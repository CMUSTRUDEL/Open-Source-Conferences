Title: Keynote: Double the Awesome - Dr. Nicole Forsgren
Publication date: 2019-08-28
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	Keynote: Double the Awesome - Dr. Nicole Forsgren, Researcher & Strategist, Google Cloud and Co-Author of “Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations”*
Captions: 
	00:00:00,030 --> 00:00:06,980
how are we all doing this morning do we

00:00:05,220 --> 00:00:10,800
still need coffee

00:00:06,980 --> 00:00:12,599
I left my coffee in the back I'm so sad

00:00:10,800 --> 00:00:15,299
okay everyone please take a drink of

00:00:12,599 --> 00:00:20,699
coffee for me now how are we all doing

00:00:15,299 --> 00:00:22,140
this morning fantastic so thank you so

00:00:20,699 --> 00:00:23,460
much for joining me this morning she

00:00:22,140 --> 00:00:24,930
mentioned we're going to be talking

00:00:23,460 --> 00:00:27,900
about double the awesome

00:00:24,930 --> 00:00:30,689
mostly because I am super excited to be

00:00:27,900 --> 00:00:34,559
talking about DevOps because I'm a giant

00:00:30,689 --> 00:00:40,050
nerd but I think I might be joined by

00:00:34,559 --> 00:00:44,160
some of my nerd peers yay so has have we

00:00:40,050 --> 00:00:47,250
all heard about the DevOps yeah okay I

00:00:44,160 --> 00:00:49,200
get to skip the intro so some of you may

00:00:47,250 --> 00:00:50,940
have heard of this like accelerate book

00:00:49,200 --> 00:00:53,120
that covers stated of office report have

00:00:50,940 --> 00:00:58,379
we heard of this day to DevOps reports

00:00:53,120 --> 00:01:00,660
no do we need May pants no who refuses

00:00:58,379 --> 00:01:04,650
to raise their hands in the morning yes

00:01:00,660 --> 00:01:07,760
ok so there's been like the 2014 2015

00:01:04,650 --> 00:01:11,159
2016 2017 2018 state of DevOps report

00:01:07,760 --> 00:01:13,229
I'm super excited because as of right

00:01:11,159 --> 00:01:16,560
this very second the 2019 state of

00:01:13,229 --> 00:01:18,950
DevOps report is out so we all get the

00:01:16,560 --> 00:01:22,350
first review of it

00:01:18,950 --> 00:01:25,610
I'm excited are you excited are you

00:01:22,350 --> 00:01:27,540
gonna pretend to be excited with me yay

00:01:25,610 --> 00:01:30,720
ok here we go this is what we're gonna

00:01:27,540 --> 00:01:33,450
talk about is this DevOps thing even a

00:01:30,720 --> 00:01:34,979
thing maybe not if not I'm out of a job

00:01:33,450 --> 00:01:37,140
that's fine

00:01:34,979 --> 00:01:38,189
getting better aka

00:01:37,140 --> 00:01:39,689
choose-your-own-adventure

00:01:38,189 --> 00:01:40,710
this is a very double the awesome comes

00:01:39,689 --> 00:01:44,520
from we're here to talk about

00:01:40,710 --> 00:01:46,320
performance productivity culture open

00:01:44,520 --> 00:01:48,630
source because that's why we're here

00:01:46,320 --> 00:01:53,460
today and then we'll be done

00:01:48,630 --> 00:01:55,439
so DevOps let's get on the same page so

00:01:53,460 --> 00:01:58,590
when I'm talking about DevOps I'm

00:01:55,439 --> 00:02:00,780
talking about these types of things I'm

00:01:58,590 --> 00:02:03,680
talking about software development

00:02:00,780 --> 00:02:07,110
software delivery I'm also talking about

00:02:03,680 --> 00:02:10,860
availability so has some people may have

00:02:07,110 --> 00:02:12,510
heard of the four key metrics lots of

00:02:10,860 --> 00:02:13,110
organizations are starting to talk about

00:02:12,510 --> 00:02:15,810
this now

00:02:13,110 --> 00:02:17,250
so when I talk about DevOps I'm talking

00:02:15,810 --> 00:02:20,310
about measuring it because I do this

00:02:17,250 --> 00:02:23,190
like researchy thing so there are two

00:02:20,310 --> 00:02:25,680
throughput metrics speed metrics lead

00:02:23,190 --> 00:02:28,170
time from code commit to code running in

00:02:25,680 --> 00:02:31,140
production deployment frequency how

00:02:28,170 --> 00:02:33,600
often you're pushing code - those are

00:02:31,140 --> 00:02:36,300
those are in green eye color code cuz I

00:02:33,600 --> 00:02:38,610
was a professor I'm also talking about

00:02:36,300 --> 00:02:41,220
stability so change fail rate the

00:02:38,610 --> 00:02:43,440
percentage of time like how often the

00:02:41,220 --> 00:02:47,640
percentage of times that you push code

00:02:43,440 --> 00:02:50,010
to production but like it box on you so

00:02:47,640 --> 00:02:52,920
it can either come all the way down or

00:02:50,010 --> 00:02:57,290
it just requires some type of attention

00:02:52,920 --> 00:03:00,209
hop fix patch a real forward or rollback

00:02:57,290 --> 00:03:02,330
time to restore service how long it

00:03:00,209 --> 00:03:05,250
takes you to bring those systems back up

00:03:02,330 --> 00:03:08,130
those are the four key metrics now we

00:03:05,250 --> 00:03:09,000
also talked about availability just keep

00:03:08,130 --> 00:03:10,670
that in the back of your head I'll come

00:03:09,000 --> 00:03:16,140
to in a minute

00:03:10,670 --> 00:03:19,100
now we have movement when I compare last

00:03:16,140 --> 00:03:23,310
year 2018 and this year

00:03:19,100 --> 00:03:26,700
check out those elite performers last

00:03:23,310 --> 00:03:30,060
year seven percent of our data seven

00:03:26,700 --> 00:03:31,769
percent of those four key metrics by the

00:03:30,060 --> 00:03:34,320
way they always move together

00:03:31,769 --> 00:03:35,580
I see no trade-offs in speed or

00:03:34,320 --> 00:03:38,220
stability you don't have to sacrifice

00:03:35,580 --> 00:03:40,260
speed for stability or stability for

00:03:38,220 --> 00:03:43,470
speed this has been consistent for six

00:03:40,260 --> 00:03:48,780
years in a row ok so anyway seven

00:03:43,470 --> 00:03:51,239
percent of our population of our sample

00:03:48,780 --> 00:03:53,489
were elite performers they were

00:03:51,239 --> 00:03:56,070
optimizing on both speed stability but

00:03:53,489 --> 00:04:00,420
it was a subset this year check it out

00:03:56,070 --> 00:04:03,030
that seven percent broke out to their

00:04:00,420 --> 00:04:04,380
own it's they've almost tripled so you

00:04:03,030 --> 00:04:05,790
know how like we keep hearing this whole

00:04:04,380 --> 00:04:10,640
cross the chasm thing have you heard

00:04:05,790 --> 00:04:13,500
this before this confirms that so yay

00:04:10,640 --> 00:04:18,269
now check out the low performers they

00:04:13,500 --> 00:04:20,970
went from 15% of our data to 12% that

00:04:18,269 --> 00:04:22,320
means that like everyone is getting like

00:04:20,970 --> 00:04:23,940
more people are getting better they're

00:04:22,320 --> 00:04:25,880
moving out of the low performance group

00:04:23,940 --> 00:04:30,860
into the medium performance group

00:04:25,880 --> 00:04:33,500
yay say it with me yay I love you guys

00:04:30,860 --> 00:04:35,750
thank you for indulging me okay now we

00:04:33,500 --> 00:04:39,500
have medium performers look they went

00:04:35,750 --> 00:04:41,510
from 37% to 44% that's interesting

00:04:39,500 --> 00:04:45,140
because some of it came from low

00:04:41,510 --> 00:04:46,670
performers but some of it came from high

00:04:45,140 --> 00:04:50,720
performers high performers used to be

00:04:46,670 --> 00:04:53,390
48% which included elite so they also

00:04:50,720 --> 00:04:56,060
they went from 48 percent to 43 percent

00:04:53,390 --> 00:04:58,730
right 20 plus 23 I can do a little bit

00:04:56,060 --> 00:05:00,410
of math in my head not very much what

00:04:58,730 --> 00:05:03,260
does that mean that means some high

00:05:00,410 --> 00:05:06,460
performers fell back probably struggling

00:05:03,260 --> 00:05:08,690
with some complexity probably also

00:05:06,460 --> 00:05:10,130
achieving high performance and giving

00:05:08,690 --> 00:05:12,820
themselves a gold star on their forehead

00:05:10,130 --> 00:05:15,590
and sitting back and declaring vacation

00:05:12,820 --> 00:05:21,110
probably not great not that anyone's

00:05:15,590 --> 00:05:22,310
executive has ever done that maybe ok

00:05:21,110 --> 00:05:26,330
this is an eye chart

00:05:22,310 --> 00:05:28,280
I apologize now it's in the report but

00:05:26,330 --> 00:05:29,870
when I like some people are gonna say

00:05:28,280 --> 00:05:32,510
what does it mean to actually be a high

00:05:29,870 --> 00:05:36,800
performer again deployment frequency on

00:05:32,510 --> 00:05:38,870
demand multiple deploys per day or it's

00:05:36,800 --> 00:05:39,650
a business decision and not a technical

00:05:38,870 --> 00:05:41,900
constraint

00:05:39,650 --> 00:05:44,540
maybe you're pushing maybe you're like

00:05:41,900 --> 00:05:45,950
making an app pushing to an app store so

00:05:44,540 --> 00:05:47,600
you don't have to do it like all the

00:05:45,950 --> 00:05:49,280
time but again business decision not a

00:05:47,600 --> 00:05:52,010
technical constraint lead time for

00:05:49,280 --> 00:05:53,810
changes less than a day time to restore

00:05:52,010 --> 00:05:56,840
less than an hour change fail rate

00:05:53,810 --> 00:05:59,270
between 0 and 15% look at the low

00:05:56,840 --> 00:06:01,310
performers between once a month and once

00:05:59,270 --> 00:06:03,530
every six months lead time for changes

00:06:01,310 --> 00:06:05,300
between once a month and six months time

00:06:03,530 --> 00:06:10,010
to restore between once a week and once

00:06:05,300 --> 00:06:11,720
a month change fail 46 to 60% I will

00:06:10,010 --> 00:06:13,490
note that change fail rate it looks like

00:06:11,720 --> 00:06:15,880
it's the same for elite high and medium

00:06:13,490 --> 00:06:18,230
performers there's a bunch of like

00:06:15,880 --> 00:06:20,900
asterisks there it's because we report a

00:06:18,230 --> 00:06:22,700
median because the distribution isn't

00:06:20,900 --> 00:06:24,890
normal they're actually different and we

00:06:22,700 --> 00:06:26,240
include visualizations for like fun math

00:06:24,890 --> 00:06:27,770
nerds out there that want to see what it

00:06:26,240 --> 00:06:30,370
looks like they are significantly

00:06:27,770 --> 00:06:33,530
different just the medians look similar

00:06:30,370 --> 00:06:35,840
okay so you can benchmark you can take a

00:06:33,530 --> 00:06:38,510
look and see where your teams fall see

00:06:35,840 --> 00:06:39,240
where you are you can also go look at

00:06:38,510 --> 00:06:41,160
the website that

00:06:39,240 --> 00:06:43,110
note at the back and there's a quick

00:06:41,160 --> 00:06:45,900
check so you can also like do it

00:06:43,110 --> 00:06:47,880
automatically so how do they compare and

00:06:45,900 --> 00:06:50,569
what does it even mean if I compare the

00:06:47,880 --> 00:06:53,610
elite performers and the low performers

00:06:50,569 --> 00:06:56,819
we see 208 times more frequent code

00:06:53,610 --> 00:07:01,289
deployments 106 times faster lead time

00:06:56,819 --> 00:07:04,770
from commit to deploy so this means we

00:07:01,289 --> 00:07:06,810
can push features faster but it's not

00:07:04,770 --> 00:07:08,550
just about features it's about keeping

00:07:06,810 --> 00:07:15,000
up with compliance and regulatory

00:07:08,550 --> 00:07:18,360
changes it's about being more secure it

00:07:15,000 --> 00:07:21,509
also gives us over 2,600 times faster

00:07:18,360 --> 00:07:22,949
time to recover from incidents and seven

00:07:21,509 --> 00:07:24,240
times lower change fail rate now

00:07:22,949 --> 00:07:26,699
sometimes people are like this doesn't

00:07:24,240 --> 00:07:29,370
make sense but when we think about it

00:07:26,699 --> 00:07:31,229
when we take this code if we can release

00:07:29,370 --> 00:07:33,389
more frequently we're releasing in

00:07:31,229 --> 00:07:36,419
smaller batches let's think about it in

00:07:33,389 --> 00:07:41,159
the inverse if we release slowly our

00:07:36,419 --> 00:07:44,810
code piles up when it finally gets to

00:07:41,159 --> 00:07:50,099
production we have a large chunk of code

00:07:44,810 --> 00:07:52,530
so we have increased our blast radius we

00:07:50,099 --> 00:07:54,870
have increased the likelihood that it

00:07:52,530 --> 00:07:57,509
will cause problems when it does

00:07:54,870 --> 00:08:00,180
eventually cause problems and cause an

00:07:57,509 --> 00:08:03,810
outage we've made it much harder to

00:08:00,180 --> 00:08:08,940
debug what that problem is and we've

00:08:03,810 --> 00:08:10,919
made it much harder and much longer to

00:08:08,940 --> 00:08:17,340
bring up that time to restore is much

00:08:10,919 --> 00:08:22,130
much longer so when we introduce delays

00:08:17,340 --> 00:08:25,440
when we introduce process we intend to

00:08:22,130 --> 00:08:27,780
create more stable systems that's not

00:08:25,440 --> 00:08:29,940
true we've never seen that we haven't we

00:08:27,780 --> 00:08:32,279
tested it in 2014 we tested it again

00:08:29,940 --> 00:08:36,899
this year it actually creates

00:08:32,279 --> 00:08:39,810
instability now I told you to remember

00:08:36,899 --> 00:08:42,029
availability availability is about the

00:08:39,810 --> 00:08:44,880
promises that we make and keep to our

00:08:42,029 --> 00:08:47,820
customers and end-users this is how we

00:08:44,880 --> 00:08:49,440
measure it it's basically about how well

00:08:47,820 --> 00:08:50,209
teams can define their availability

00:08:49,440 --> 00:08:53,040
targets

00:08:50,209 --> 00:08:54,630
track their current availability and

00:08:53,040 --> 00:09:01,350
learned for many outages that they do

00:08:54,630 --> 00:09:06,000
have has anyone heard the saying day one

00:09:01,350 --> 00:09:10,170
is short and day two is long this is

00:09:06,000 --> 00:09:14,660
what this is about so wait we do Tech

00:09:10,170 --> 00:09:19,709
just because it's fun well I mean yes

00:09:14,660 --> 00:09:22,620
and it's important because technology

00:09:19,709 --> 00:09:25,050
delivers value we see that elite

00:09:22,620 --> 00:09:26,339
performers are twice as likely to meet

00:09:25,050 --> 00:09:29,759
or exceed their organizational

00:09:26,339 --> 00:09:31,949
performance goals let me translate this

00:09:29,759 --> 00:09:33,449
this is a little bit academic we call

00:09:31,949 --> 00:09:35,459
them organizational performance goals

00:09:33,449 --> 00:09:37,860
because it encompasses a lot of things

00:09:35,459 --> 00:09:42,509
some of its commercial goals things like

00:09:37,860 --> 00:09:46,199
productivity profitability market share

00:09:42,509 --> 00:09:47,850
like money stuff money stuffs nice even

00:09:46,199 --> 00:09:50,220
in not-for-profits maybe money because

00:09:47,850 --> 00:09:52,440
we need to pay bills we need to pay

00:09:50,220 --> 00:09:55,050
salaries we need to pay something but it

00:09:52,440 --> 00:09:57,260
also covers non-commercial goals things

00:09:55,050 --> 00:09:59,790
like effectiveness and efficiency

00:09:57,260 --> 00:10:09,180
customer satisfaction achieving the

00:09:59,790 --> 00:10:11,779
mission goal serving our constituents ok

00:10:09,180 --> 00:10:15,709
hopefully I've convinced you it matters

00:10:11,779 --> 00:10:19,470
ok so like how do we actually get better

00:10:15,709 --> 00:10:20,720
this is how I also like to call this

00:10:19,470 --> 00:10:22,860
slide choose-your-own-adventure

00:10:20,720 --> 00:10:25,019
because you can start by choosing your

00:10:22,860 --> 00:10:26,610
goal if your goal is sto and

00:10:25,019 --> 00:10:29,430
organizational performance that stuff we

00:10:26,610 --> 00:10:33,240
just covered we cover this in this

00:10:29,430 --> 00:10:36,079
year's report start there and then pick

00:10:33,240 --> 00:10:38,730
the things that you want to improve or

00:10:36,079 --> 00:10:40,980
if you want to improve productivity we

00:10:38,730 --> 00:10:43,139
have a whole entire extra model this

00:10:40,980 --> 00:10:45,720
year to help improve productivity so

00:10:43,139 --> 00:10:47,880
let's start with sto and organizational

00:10:45,720 --> 00:10:50,519
performance this is the predictive model

00:10:47,880 --> 00:10:52,670
this year I mean pretty straightforward

00:10:50,519 --> 00:10:52,670
right

00:10:53,750 --> 00:11:02,000
I mean it's fine okay this is how we

00:10:58,189 --> 00:11:03,649
read it we have a dark box around the

00:11:02,000 --> 00:11:05,629
things that are typical goals things

00:11:03,649 --> 00:11:06,769
like sto performance software delivery

00:11:05,629 --> 00:11:08,930
and operational performance right we

00:11:06,769 --> 00:11:10,360
talked about how software deliver

00:11:08,930 --> 00:11:12,259
performance is that speed and stability

00:11:10,360 --> 00:11:13,339
or the way we cover this in the report

00:11:12,259 --> 00:11:14,990
like there's lots of reminders

00:11:13,339 --> 00:11:16,509
availability is the promises that we

00:11:14,990 --> 00:11:18,920
make and keep to our customers

00:11:16,509 --> 00:11:21,519
organizational performance is like money

00:11:18,920 --> 00:11:24,199
and efficiency now we can work backward

00:11:21,519 --> 00:11:25,910
into identifying the constructs that

00:11:24,199 --> 00:11:28,850
help us get better green boxes or

00:11:25,910 --> 00:11:30,379
constructs that's things that like help

00:11:28,850 --> 00:11:32,779
us do things better like we know what

00:11:30,379 --> 00:11:35,269
continuous delivery is right we know

00:11:32,779 --> 00:11:38,180
what monitoring is and we talked about

00:11:35,269 --> 00:11:40,879
this in the report the things that are

00:11:38,180 --> 00:11:42,889
in dark bold like clear change process

00:11:40,879 --> 00:11:45,529
culture of psychological safety they're

00:11:42,889 --> 00:11:47,449
just in bold because here in 2019 this

00:11:45,529 --> 00:11:49,519
is the first year we study them if it's

00:11:47,449 --> 00:11:51,680
not in bold it just means that we've

00:11:49,519 --> 00:11:54,800
studied them in previous state of DevOps

00:11:51,680 --> 00:11:57,980
reports so we've revalidated them

00:11:54,800 --> 00:12:01,309
anytime you see a line with an arrow you

00:11:57,980 --> 00:12:03,980
can read that as predicts drives impacts

00:12:01,309 --> 00:12:06,620
because our research is unique and that

00:12:03,980 --> 00:12:09,709
we study predictive relationships it

00:12:06,620 --> 00:12:12,079
goes well beyond correlation anytime you

00:12:09,709 --> 00:12:14,750
see a line with a minus that means it

00:12:12,079 --> 00:12:17,089
negatively predicts or reduces so

00:12:14,750 --> 00:12:19,160
remember how I said sometimes we try or

00:12:17,089 --> 00:12:22,660
organisations try with very good

00:12:19,160 --> 00:12:25,370
intentions to introduce change approvals

00:12:22,660 --> 00:12:27,620
heavyweight like cabs like the change

00:12:25,370 --> 00:12:29,660
approval board they try to do this to

00:12:27,620 --> 00:12:30,980
increase stability it doesn't work

00:12:29,660 --> 00:12:33,949
spoiler alert

00:12:30,980 --> 00:12:36,829
narrator it did not work heavy weight

00:12:33,949 --> 00:12:38,899
change approvals reduce speed and

00:12:36,829 --> 00:12:41,540
stability software deliver performance

00:12:38,899 --> 00:12:43,309
we also see the nice thing continuous

00:12:41,540 --> 00:12:45,559
delivery see how it has that line with a

00:12:43,309 --> 00:12:47,329
minus sign to burnout doing continuous

00:12:45,559 --> 00:12:51,529
delivering a good ways helps reduce

00:12:47,329 --> 00:12:53,509
burnout so because I don't have very

00:12:51,529 --> 00:12:57,399
much time I'm just gonna cover a couple

00:12:53,509 --> 00:13:01,579
things cloud who here's doing the clock

00:12:57,399 --> 00:13:04,160
cloud cloud is a differentiator for

00:13:01,579 --> 00:13:07,200
elite performance however we have to be

00:13:04,160 --> 00:13:09,660
doing it the right way these five

00:13:07,200 --> 00:13:11,850
essential capabilities come from NIST I

00:13:09,660 --> 00:13:13,020
didn't make this up come from nest

00:13:11,850 --> 00:13:15,330
here's what we see

00:13:13,020 --> 00:13:17,730
only 29% of respondents who say they're

00:13:15,330 --> 00:13:20,850
in the cloud are actually doing all five

00:13:17,730 --> 00:13:22,890
of these things and elite performers are

00:13:20,850 --> 00:13:26,220
twenty four times more likely to have

00:13:22,890 --> 00:13:29,430
met these characteristics this is such a

00:13:26,220 --> 00:13:33,060
bummer also I mean like I went to a gym

00:13:29,430 --> 00:13:36,570
paid for a membership I have to actually

00:13:33,060 --> 00:13:38,100
do the work so when I meet with

00:13:36,570 --> 00:13:40,290
organizations or execs and they're like

00:13:38,100 --> 00:13:42,890
I went to the cloud I'm not seeing the

00:13:40,290 --> 00:13:46,980
benefits I'm like are you doing the work

00:13:42,890 --> 00:13:49,440
although we probably know this right we

00:13:46,980 --> 00:13:50,730
know this so like on-demand self service

00:13:49,440 --> 00:13:53,070
if you go to the cloud but you still

00:13:50,730 --> 00:13:56,360
throw it behind service now and someone

00:13:53,070 --> 00:13:59,160
has to manually approve it doesn't count

00:13:56,360 --> 00:14:01,500
we know this how frustrating is it when

00:13:59,160 --> 00:14:04,610
like we do the cloud but we still have

00:14:01,500 --> 00:14:08,340
to put in a service ticket that sucks

00:14:04,610 --> 00:14:10,740
we know this okay code maintainability

00:14:08,340 --> 00:14:12,000
this one's new this year and I was

00:14:10,740 --> 00:14:14,820
excited to see what this looks like

00:14:12,000 --> 00:14:16,230
because this contributes to CD and helps

00:14:14,820 --> 00:14:18,690
reduce technical debt I'll talk about

00:14:16,230 --> 00:14:20,730
this in a minute code maintainability is

00:14:18,690 --> 00:14:23,280
about having systems and tools that make

00:14:20,730 --> 00:14:26,780
it easy to change code maintained by

00:14:23,280 --> 00:14:31,020
other teams find code in the codebase

00:14:26,780 --> 00:14:34,500
reuse other people's code and this last

00:14:31,020 --> 00:14:36,810
one I love add upgrade and migrate to

00:14:34,500 --> 00:14:38,820
new versions of dependencies without

00:14:36,810 --> 00:14:40,410
breaking code does anyone here have

00:14:38,820 --> 00:14:41,610
tools that are kind of like this I know

00:14:40,410 --> 00:14:45,180
there are a couple open-source tools

00:14:41,610 --> 00:14:49,650
like this these are dope right these

00:14:45,180 --> 00:14:51,360
make writing code so much easier okay

00:14:49,650 --> 00:14:54,600
yeah yeah yeah I read the report or I'm

00:14:51,360 --> 00:14:56,730
about to so what else is new this is the

00:14:54,600 --> 00:15:00,300
productivity model you can read it very

00:14:56,730 --> 00:15:02,850
similarly lines and arrows are

00:15:00,300 --> 00:15:06,660
prediction lines and arrows with minus

00:15:02,850 --> 00:15:09,120
signs are reducing so the goal here is

00:15:06,660 --> 00:15:11,490
to improve productivity the thing I like

00:15:09,120 --> 00:15:14,460
about this is the productivity done the

00:15:11,490 --> 00:15:17,160
right way helps improve work recovery

00:15:14,460 --> 00:15:19,680
and reduces burnout so work recovery is

00:15:17,160 --> 00:15:22,170
when you can leave work at work

00:15:19,680 --> 00:15:26,220
it's when you can detach it's about

00:15:22,170 --> 00:15:28,139
work-life balance but we have to have

00:15:26,220 --> 00:15:30,629
the right kind of productivity this is

00:15:28,139 --> 00:15:33,629
not about lines of code written this is

00:15:30,629 --> 00:15:34,829
not about story points because we all

00:15:33,629 --> 00:15:39,240
know that writing too many lines of code

00:15:34,829 --> 00:15:40,860
just leads to loaded systems and story

00:15:39,240 --> 00:15:41,399
points is bad because if it's story

00:15:40,860 --> 00:15:43,050
points

00:15:41,399 --> 00:15:44,730
I'm never gonna help you with your work

00:15:43,050 --> 00:15:48,389
because I have to get my story points

00:15:44,730 --> 00:15:50,699
done so lots of researchers are starting

00:15:48,389 --> 00:15:52,559
to study productivity this way it's the

00:15:50,699 --> 00:15:55,019
ability to get complex time-consuming

00:15:52,559 --> 00:15:57,119
tasks done with minimal distractions and

00:15:55,019 --> 00:15:59,579
interruptions we know when we've had a

00:15:57,119 --> 00:16:01,920
good day right I know when I've had a

00:15:59,579 --> 00:16:05,160
good productive day the nice thing about

00:16:01,920 --> 00:16:07,709
this is that this kind of productivity

00:16:05,160 --> 00:16:11,369
helps us disconnect we can show off our

00:16:07,709 --> 00:16:12,449
brains when they go home now let's talk

00:16:11,369 --> 00:16:14,399
about technical debt a little bit

00:16:12,449 --> 00:16:16,490
technical that reduces productivity

00:16:14,399 --> 00:16:19,259
because we can never get in that flow

00:16:16,490 --> 00:16:22,230
technical debt was introduced in 92 by

00:16:19,259 --> 00:16:25,499
Ward Cunningham he uses this to describe

00:16:22,230 --> 00:16:28,829
what happens when we don't maintain what

00:16:25,499 --> 00:16:33,120
he calls immature code who here has ever

00:16:28,829 --> 00:16:34,679
hit a technical dead weight we okay so

00:16:33,120 --> 00:16:35,910
we know this a few people were like

00:16:34,679 --> 00:16:41,939
technical that's not a problem when I

00:16:35,910 --> 00:16:45,740
was like I have a hunch let me throw it

00:16:41,939 --> 00:16:50,370
in this year's research and see this is

00:16:45,740 --> 00:16:53,129
what showed up like what loaded so

00:16:50,370 --> 00:16:55,170
loaded is actually a stats term these

00:16:53,129 --> 00:16:58,829
are the things that statistically piled

00:16:55,170 --> 00:17:07,260
on in the analysis do do these resonate

00:16:58,829 --> 00:17:09,569
with y'all y'all are red people this is

00:17:07,260 --> 00:17:13,069
what technical that is known bugs that

00:17:09,569 --> 00:17:15,720
go on fixed because we need features

00:17:13,069 --> 00:17:17,520
insufficient test coverage problems

00:17:15,720 --> 00:17:20,640
related to low code quality or poor

00:17:17,520 --> 00:17:21,870
design code and artifacts facts that

00:17:20,640 --> 00:17:23,279
aren't cleaned up when they're no longer

00:17:21,870 --> 00:17:26,549
used because sometimes the best code is

00:17:23,279 --> 00:17:28,590
deleting code implementations that we

00:17:26,549 --> 00:17:30,070
don't have expertise in so we can't

00:17:28,590 --> 00:17:34,770
debug or maintain it

00:17:30,070 --> 00:17:34,770
in complete migration I feel attacked

00:17:35,490 --> 00:17:41,950
obsolete technology behind this last one

00:17:39,580 --> 00:17:43,660
incomplete or outdated documentation or

00:17:41,950 --> 00:17:44,890
missing comments I hate it when people

00:17:43,660 --> 00:17:46,810
are like it's just documentation and

00:17:44,890 --> 00:17:47,680
comments and I'm like what are you

00:17:46,810 --> 00:17:49,630
talking about

00:17:47,680 --> 00:17:51,190
this is absolutely relevant because if

00:17:49,630 --> 00:17:57,910
no one can read your code it doesn't

00:17:51,190 --> 00:18:00,310
count thank you I love you so how can we

00:17:57,910 --> 00:18:02,380
reduce technical debt Ward Cunningham

00:18:00,310 --> 00:18:03,910
also suggested that one of the best ways

00:18:02,380 --> 00:18:07,240
to deal with technical debt is to allow

00:18:03,910 --> 00:18:08,740
people to maintain a mental model of the

00:18:07,240 --> 00:18:11,110
entire system in their heads at the same

00:18:08,740 --> 00:18:12,670
time this was in 92 so that's adorable

00:18:11,110 --> 00:18:18,580
because what do our systems look like

00:18:12,670 --> 00:18:21,430
now complex distributed with multiple

00:18:18,580 --> 00:18:23,910
people maintaining them so one of the

00:18:21,430 --> 00:18:27,370
best ways is to allow our systems to be

00:18:23,910 --> 00:18:28,990
flexible extensible and viewable and the

00:18:27,370 --> 00:18:30,670
thing that we found is that maintainable

00:18:28,990 --> 00:18:32,950
code loosey coupled architecture and

00:18:30,670 --> 00:18:36,370
monitoring helps decrease technical debt

00:18:32,950 --> 00:18:39,880
I love that because that helps us at

00:18:36,370 --> 00:18:42,580
least get some type of idea of what our

00:18:39,880 --> 00:18:45,630
systems are looking like ok I'm gonna

00:18:42,580 --> 00:18:50,670
hurry I keep hearing culture matters

00:18:45,630 --> 00:18:54,460
what does that even mean this model was

00:18:50,670 --> 00:18:56,110
studied by the project Aristotle team at

00:18:54,460 --> 00:18:57,060
Google a few years ago has anyone heard

00:18:56,110 --> 00:18:59,740
of this before

00:18:57,060 --> 00:19:02,490
psychological safety dependability

00:18:59,740 --> 00:19:04,930
structure and clarity meaning and impact

00:19:02,490 --> 00:19:06,760
they put out this work a few years ago

00:19:04,930 --> 00:19:08,320
the interesting thing is that a few

00:19:06,760 --> 00:19:10,870
people were like of course they found

00:19:08,320 --> 00:19:15,730
this to be an important driver for

00:19:10,870 --> 00:19:17,230
performance it's at Google so many

00:19:15,730 --> 00:19:18,730
thanks to the project Aristotle team

00:19:17,230 --> 00:19:21,490
they shared their research instrument

00:19:18,730 --> 00:19:24,850
with us and so we tested this to see if

00:19:21,490 --> 00:19:27,340
this is also impactful in organizations

00:19:24,850 --> 00:19:29,200
that are outside of Google and indeed we

00:19:27,340 --> 00:19:31,570
did find that this model of culture is

00:19:29,200 --> 00:19:33,820
important Trust and psychological safety

00:19:31,570 --> 00:19:35,800
has a positive impact on software

00:19:33,820 --> 00:19:38,110
delivery performance organizational

00:19:35,800 --> 00:19:39,670
performance and productivity so these

00:19:38,110 --> 00:19:41,500
results indicate that teams with this

00:19:39,670 --> 00:19:42,490
culture see significant benefits in

00:19:41,500 --> 00:19:45,520
teams in

00:19:42,490 --> 00:19:48,790
many contexts I'm does this sound

00:19:45,520 --> 00:19:50,620
familiar would you rather be on a team

00:19:48,790 --> 00:19:52,059
where you can trust people and you can

00:19:50,620 --> 00:19:55,660
depend on their work and you're working

00:19:52,059 --> 00:20:00,010
on meaningful things no trust trust no

00:19:55,660 --> 00:20:04,179
one okay so what does this all mean for

00:20:00,010 --> 00:20:06,130
open source community is an asset high

00:20:04,179 --> 00:20:09,340
and elite performers continue to use

00:20:06,130 --> 00:20:11,620
open source the most elite performers

00:20:09,340 --> 00:20:14,260
are 1.7 times more likely to make

00:20:11,620 --> 00:20:16,350
extensive use of open source software by

00:20:14,260 --> 00:20:18,910
the way this also benefits recruiting as

00:20:16,350 --> 00:20:20,559
an aside low performers are using fully

00:20:18,910 --> 00:20:22,990
proprietary software than most

00:20:20,559 --> 00:20:26,410
this comes with extensive costs to

00:20:22,990 --> 00:20:28,990
maintain external search contributes to

00:20:26,410 --> 00:20:31,750
productivity engineers who can use

00:20:28,990 --> 00:20:34,330
external search information like Stack

00:20:31,750 --> 00:20:38,250
Overflow and YouTube are one point six

00:20:34,330 --> 00:20:38,250
seven times more likely to be productive

00:20:38,550 --> 00:20:44,410
faster is better even an open source

00:20:41,880 --> 00:20:46,240
open source projects are community

00:20:44,410 --> 00:20:49,390
driven with contributors from around the

00:20:46,240 --> 00:20:51,700
world at all levels still committing

00:20:49,390 --> 00:20:54,720
code sooner is better it helps you merge

00:20:51,700 --> 00:20:57,929
patches faster and prevent rebase --is

00:20:54,720 --> 00:21:01,090
also working in small batches is better

00:20:57,929 --> 00:21:03,910
large patch bombs are so much harder and

00:21:01,090 --> 00:21:06,429
slower to merge into a project than

00:21:03,910 --> 00:21:10,990
smaller and readable patch sets help

00:21:06,429 --> 00:21:13,030
your maintainer out okay here's your TL

00:21:10,990 --> 00:21:17,380
there take a picture in case you were on

00:21:13,030 --> 00:21:20,320
like Facebook and Twitter is DevOps even

00:21:17,380 --> 00:21:23,050
a thing how to get better we covered

00:21:20,320 --> 00:21:25,120
performance we covered productivity we

00:21:23,050 --> 00:21:26,950
talked about culture and open source by

00:21:25,120 --> 00:21:27,429
the way there's so much more in this

00:21:26,950 --> 00:21:29,110
report

00:21:27,429 --> 00:21:30,790
there's disaster recovery testing

00:21:29,110 --> 00:21:32,110
there's change approvals there's more

00:21:30,790 --> 00:21:35,620
about open source there's more about

00:21:32,110 --> 00:21:36,630
cloud and costs we talked about we also

00:21:35,620 --> 00:21:39,130
talked about scaling transformation

00:21:36,630 --> 00:21:41,580
successfully to get the report you can

00:21:39,130 --> 00:21:44,509
go to cloud giggle comm slash DevOps

00:21:41,580 --> 00:21:46,570
thanks so much everyone

00:21:44,509 --> 00:21:46,570

YouTube URL: https://www.youtube.com/watch?v=c2VwRKAyQ-M


