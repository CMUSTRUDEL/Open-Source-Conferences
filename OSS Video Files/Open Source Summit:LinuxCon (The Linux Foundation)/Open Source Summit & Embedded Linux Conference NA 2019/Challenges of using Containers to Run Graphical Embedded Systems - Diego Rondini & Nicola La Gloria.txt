Title: Challenges of using Containers to Run Graphical Embedded Systems - Diego Rondini & Nicola La Gloria
Publication date: 2019-09-16
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	Challenges of using Containers to Run Graphical Embedded Systems - Diego Rondini & Nicola La Gloria, Kynetics

Despite their quick success and adoption, containers are already a well established technology and their use is steadily rising also in the embedded community. However the specific requirements of an embedded system set new challenges like running demanding graphical applications.While containers’ most common use case is to easily deploy headless server applications, graphical subsystem containerization is heavily dependent on the SOC GPU architecture.This session will provide an overview of the challenges encountered running X11 and Wayland applications inside docker containers on ARM SOCs. In particular we will focus on new advantages with respect to a traditional monolithic embedded OS but considering also container drawbacks and limitations.In our journey we’ll share our considerations and results with respect to different software setups, security & isolation, support for accelerated graphics and video decoding which are not an option on systems featuring a GUI.
Captions: 
	00:00:00,030 --> 00:00:10,710
okay hi hi everybody welcome to this

00:00:04,620 --> 00:00:13,170
session my name is Diego and this is

00:00:10,710 --> 00:00:17,910
about the challenges of using containers

00:00:13,170 --> 00:00:24,210
to run graphical embedded systems so a

00:00:17,910 --> 00:00:28,199
few words about Who am I I'm better the

00:00:24,210 --> 00:00:33,260
engineer at kinetics I have work on lots

00:00:28,199 --> 00:00:37,500
of different OSS bill from octo or

00:00:33,260 --> 00:00:40,800
Android operating system so my

00:00:37,500 --> 00:00:46,280
experience is building everything from

00:00:40,800 --> 00:00:46,280
the kernel to everything in userspace Oh

00:00:47,180 --> 00:00:57,079
what this session is about to look

00:00:52,379 --> 00:01:01,309
around and see the possible approaches

00:00:57,079 --> 00:01:05,100
to use containers which are a technology

00:01:01,309 --> 00:01:10,439
very very used in for example web

00:01:05,100 --> 00:01:13,740
services and web servers in general also

00:01:10,439 --> 00:01:17,460
on embedded and in this case also with

00:01:13,740 --> 00:01:24,720
graphical applications so QT application

00:01:17,460 --> 00:01:27,090
GDK and so on so first a quick poll how

00:01:24,720 --> 00:01:31,409
many of you are using already using

00:01:27,090 --> 00:01:34,500
containers for example docker ok so most

00:01:31,409 --> 00:01:39,960
of you right and how many are already

00:01:34,500 --> 00:01:45,180
using them on embedded devices ok so not

00:01:39,960 --> 00:01:49,049
that many so we think that we can enjoy

00:01:45,180 --> 00:01:56,579
the benefits of the beauty of using

00:01:49,049 --> 00:02:01,049
containers also on embedded boards so we

00:01:56,579 --> 00:02:02,759
are not trying to show the products that

00:02:01,049 --> 00:02:04,920
are available because there are our

00:02:02,759 --> 00:02:08,250
products trying to solve this problem

00:02:04,920 --> 00:02:09,959
but instead we wanted to evaluate all

00:02:08,250 --> 00:02:13,469
the possible options

00:02:09,959 --> 00:02:15,269
there are easily available it's not that

00:02:13,469 --> 00:02:20,209
difficult but you need to have a look

00:02:15,269 --> 00:02:26,790
and evaluate what's best for you

00:02:20,209 --> 00:02:31,439
so here's what we'll see today so why we

00:02:26,790 --> 00:02:37,500
want to do that the options are

00:02:31,439 --> 00:02:41,579
available the impact of having the

00:02:37,500 --> 00:02:47,900
drivers outside of the container so you

00:02:41,579 --> 00:02:53,750
need to have the kernel on the host

00:02:47,900 --> 00:02:56,700
which is running the darker daemon and

00:02:53,750 --> 00:03:01,439
especially we want to have a look at 3d

00:02:56,700 --> 00:03:05,370
graphics so OpenGL applications we want

00:03:01,439 --> 00:03:10,519
to have a look if there's a performance

00:03:05,370 --> 00:03:13,680
difference between running natively or

00:03:10,519 --> 00:03:17,129
if darker doesn't make a difference

00:03:13,680 --> 00:03:20,250
which is what we expect and also of

00:03:17,129 --> 00:03:25,439
course when you select an option to run

00:03:20,250 --> 00:03:28,310
your graphical application in a

00:03:25,439 --> 00:03:37,349
container you want to take into account

00:03:28,310 --> 00:03:40,439
security okay so why first of all we

00:03:37,349 --> 00:03:44,040
have experience with building Yocto

00:03:40,439 --> 00:03:47,099
operating system and a lot of times

00:03:44,040 --> 00:03:50,430
people just want to install a new

00:03:47,099 --> 00:03:54,750
package and you probably need to build

00:03:50,430 --> 00:03:56,989
everything from sources and every small

00:03:54,750 --> 00:04:00,239
difference in the sources require

00:03:56,989 --> 00:04:02,790
requires compiling everything again so

00:04:00,239 --> 00:04:05,040
we wanted to avoid the hassles of

00:04:02,790 --> 00:04:10,650
building everything from sources if

00:04:05,040 --> 00:04:13,500
that's not needed of course building an

00:04:10,650 --> 00:04:18,560
application inside a container has

00:04:13,500 --> 00:04:22,460
packaging and advantages so for example

00:04:18,560 --> 00:04:25,669
you can build all that you need

00:04:22,460 --> 00:04:29,330
and describe your requirements in a

00:04:25,669 --> 00:04:34,120
docker file and quickly build an image

00:04:29,330 --> 00:04:37,699
and also you can easily move your

00:04:34,120 --> 00:04:42,020
application from an architecture to a

00:04:37,699 --> 00:04:44,990
different architecture if the base image

00:04:42,020 --> 00:04:48,169
in your container supports that for

00:04:44,990 --> 00:04:52,009
example if you are using Ubuntu docker

00:04:48,169 --> 00:04:56,599
image you will have support for x86 for

00:04:52,009 --> 00:05:01,180
arm 32 bits and arm 64 bits so your

00:04:56,599 --> 00:05:06,490
docker file will not change only the

00:05:01,180 --> 00:05:10,210
image that is pulled by docker changes

00:05:06,490 --> 00:05:13,160
so you already know what containers are

00:05:10,210 --> 00:05:18,020
but this is what we need to pay

00:05:13,160 --> 00:05:21,889
attention when using containers so the

00:05:18,020 --> 00:05:25,669
difference with respect with respect to

00:05:21,889 --> 00:05:29,030
virtual machine is that containers don't

00:05:25,669 --> 00:05:31,970
have hardware virtualization so the

00:05:29,030 --> 00:05:35,180
kernel is running on the host operating

00:05:31,970 --> 00:05:42,169
system it's not part of the container on

00:05:35,180 --> 00:05:44,930
the other side in chroot you don't have

00:05:42,169 --> 00:05:49,310
the process and network isolation you

00:05:44,930 --> 00:05:55,130
have in darker so you are running in the

00:05:49,310 --> 00:06:00,919
same process space when using chroot so

00:05:55,130 --> 00:06:05,030
here's a small simple diagram about what

00:06:00,919 --> 00:06:07,970
we want to do so again we have an

00:06:05,030 --> 00:06:13,250
operating system and we call it the core

00:06:07,970 --> 00:06:15,919
OS which is running on the host the

00:06:13,250 --> 00:06:19,039
kernel is Ronnie is part of this

00:06:15,919 --> 00:06:23,240
operating system and the user space for

00:06:19,039 --> 00:06:27,409
example also the darker daemon the

00:06:23,240 --> 00:06:30,560
darker runtime is part of the core

00:06:27,409 --> 00:06:33,289
operating system but then we want to run

00:06:30,560 --> 00:06:35,650
our graphical application in the

00:06:33,289 --> 00:06:35,650
container

00:06:36,449 --> 00:06:47,490
so how can can we do that in general or

00:06:42,699 --> 00:06:51,249
in general graphical applications our

00:06:47,490 --> 00:06:54,369
clients in a server and client

00:06:51,249 --> 00:06:59,349
architecture so if you're running x11

00:06:54,369 --> 00:07:03,279
you have an X 11 display server and your

00:06:59,349 --> 00:07:05,580
application our x11 clients and the same

00:07:03,279 --> 00:07:12,639
goes for Wayland

00:07:05,580 --> 00:07:15,849
so how can we actually run a graphical

00:07:12,639 --> 00:07:19,539
application in a container there are

00:07:15,849 --> 00:07:23,949
different ideas one of them is the

00:07:19,539 --> 00:07:26,499
simplest one I think is to use the

00:07:23,949 --> 00:07:29,289
network remote protocols that are

00:07:26,499 --> 00:07:33,639
already available for example think of B

00:07:29,289 --> 00:07:38,050
and C you can already run remotely a

00:07:33,639 --> 00:07:43,300
graphical application in a different

00:07:38,050 --> 00:07:45,870
machine but of course that means that in

00:07:43,300 --> 00:07:51,219
the middle you have a network protocol

00:07:45,870 --> 00:07:53,259
you can use local IPC for example

00:07:51,219 --> 00:08:01,680
sokka's sharing we'll see a bit more

00:07:53,259 --> 00:08:04,749
about that later or you can use a

00:08:01,680 --> 00:08:08,709
display server on the host and client

00:08:04,749 --> 00:08:13,869
window in the container and the last

00:08:08,709 --> 00:08:17,529
option which is the most radical is to

00:08:13,869 --> 00:08:20,019
move everything in the container so you

00:08:17,529 --> 00:08:23,919
just have the kernel and the drivers and

00:08:20,019 --> 00:08:28,240
and the rest is in the container so you

00:08:23,919 --> 00:08:34,180
can run an X 11 display server in the

00:08:28,240 --> 00:08:40,029
container or a Western compositor okay

00:08:34,180 --> 00:08:42,880
so in the previous slide we had the high

00:08:40,029 --> 00:08:46,029
level options and we are now going into

00:08:42,880 --> 00:08:47,850
the details if you want to follow along

00:08:46,029 --> 00:08:51,810
the slides are

00:08:47,850 --> 00:08:56,279
uploaded so this kind of this part is

00:08:51,810 --> 00:08:59,269
kind of difficult but I've named the

00:08:56,279 --> 00:09:06,860
options so you will see references to

00:08:59,269 --> 00:09:11,279
this list of options later so

00:09:06,860 --> 00:09:17,660
specifically for specifically for x11

00:09:11,279 --> 00:09:23,550
I wrote this list of possible options

00:09:17,660 --> 00:09:26,639
the first one is again to use network

00:09:23,550 --> 00:09:33,329
rattle remote protocol for example VNC

00:09:26,639 --> 00:09:36,269
or Express to connect from the container

00:09:33,329 --> 00:09:42,000
to the display server which is running

00:09:36,269 --> 00:09:45,360
on the host the second option which has

00:09:42,000 --> 00:09:48,690
security implications which we'll

00:09:45,360 --> 00:09:52,370
discuss later is to run the X display

00:09:48,690 --> 00:09:57,120
server on the host again but just share

00:09:52,370 --> 00:10:01,019
the x11 socket to the container so the

00:09:57,120 --> 00:10:05,430
container has direct access to the x11

00:10:01,019 --> 00:10:09,000
socket and your windows your window is

00:10:05,430 --> 00:10:12,420
not that different to the other X 11

00:10:09,000 --> 00:10:16,560
windows that are running locally on the

00:10:12,420 --> 00:10:22,339
host this is not a great idea because it

00:10:16,560 --> 00:10:22,339
doesn't provide isolations isolation a

00:10:23,089 --> 00:10:35,220
better idea is to use something called X

00:10:29,160 --> 00:10:38,370
on X which is a full x displacement in

00:10:35,220 --> 00:10:41,370
side the main display server so in this

00:10:38,370 --> 00:10:44,519
case your application we will not see

00:10:41,370 --> 00:10:48,630
the parent X display server but a new

00:10:44,519 --> 00:10:52,439
one created for example by X after this

00:10:48,630 --> 00:10:57,240
provide good isolation but as we were

00:10:52,439 --> 00:11:02,060
talking about we will not have GPU 3d

00:10:57,240 --> 00:11:07,830
acceleration so it has some drawbacks a

00:11:02,060 --> 00:11:12,029
good idea I think is the D option so to

00:11:07,830 --> 00:11:16,080
actually run a Whelan compositor on the

00:11:12,029 --> 00:11:21,180
host so for example like Weston and have

00:11:16,080 --> 00:11:26,250
your x11 application B X Wayland client

00:11:21,180 --> 00:11:29,550
so basically your application will talk

00:11:26,250 --> 00:11:33,930
the Wayland protocol thanks to the X

00:11:29,550 --> 00:11:37,950
Wayland implementation so you will not

00:11:33,930 --> 00:11:42,480
have a deep X 11 display server on the

00:11:37,950 --> 00:11:46,529
host but only a translation between the

00:11:42,480 --> 00:11:49,110
true the two particles the last options

00:11:46,529 --> 00:11:54,149
is to have everything in the container

00:11:49,110 --> 00:11:58,950
so you just have a shell nothing else on

00:11:54,149 --> 00:12:02,459
the swab your own console on the host

00:11:58,950 --> 00:12:05,910
and in the container you have the for

00:12:02,459 --> 00:12:08,880
example X arc x11 display server

00:12:05,910 --> 00:12:18,660
implementation and also your X 11

00:12:08,880 --> 00:12:22,520
application so let's see how we can run

00:12:18,660 --> 00:12:27,810
Wayland applications now so if you have

00:12:22,520 --> 00:12:31,470
if you're using gtk or QT to develop

00:12:27,810 --> 00:12:35,089
your application you will likely have

00:12:31,470 --> 00:12:38,760
the possibility to switch easily between

00:12:35,089 --> 00:12:41,010
using an x11 the can or Waylon McCann

00:12:38,760 --> 00:12:51,450
but if you don't have that option and

00:12:41,010 --> 00:12:53,820
you still have an X 11 to use the x11

00:12:51,450 --> 00:12:58,260
so in case you can run a whale and

00:12:53,820 --> 00:13:03,420
Native Client again there are similar

00:12:58,260 --> 00:13:07,010
options so Wayland compositor running on

00:13:03,420 --> 00:13:09,340
the host and a Waylon application client

00:13:07,010 --> 00:13:12,460
in the container

00:13:09,340 --> 00:13:16,030
or again move everything inside the

00:13:12,460 --> 00:13:19,530
container and have for example waste

00:13:16,030 --> 00:13:23,680
them inside the container

00:13:19,530 --> 00:13:28,240
the last options but I don't really like

00:13:23,680 --> 00:13:31,960
it is to have x11 display server on the

00:13:28,240 --> 00:13:35,050
host and then run Weiland has X 11

00:13:31,960 --> 00:13:37,660
client will and compositor as X 11

00:13:35,050 --> 00:13:40,870
client and inside you have the whelen

00:13:37,660 --> 00:13:45,340
application but I don't see any good

00:13:40,870 --> 00:13:48,580
reason to do things like that okay so

00:13:45,340 --> 00:13:54,640
let's see some details about the options

00:13:48,580 --> 00:14:00,540
that we described before so extra is a

00:13:54,640 --> 00:14:04,690
good example of using a remote protocol

00:14:00,540 --> 00:14:08,460
the advantage is that it has good

00:14:04,690 --> 00:14:11,920
isolation and it's called

00:14:08,460 --> 00:14:15,310
also screening for x11 so you can also

00:14:11,920 --> 00:14:20,380
detach from sessions and reattach like

00:14:15,310 --> 00:14:24,940
you would do with a screen on the common

00:14:20,380 --> 00:14:30,100
line so it is a good solution if you

00:14:24,940 --> 00:14:33,040
don't require 3d graphics so if you

00:14:30,100 --> 00:14:36,670
don't need GPU acceleration it's a good

00:14:33,040 --> 00:14:40,020
solution another option that we

00:14:36,670 --> 00:14:45,780
mentioned before is running an

00:14:40,020 --> 00:14:48,790
explanation plantation like safer and

00:14:45,780 --> 00:14:52,510
this one provides you isolation because

00:14:48,790 --> 00:14:58,800
you are having two different X 11

00:14:52,510 --> 00:15:02,890
display servers so your application is

00:14:58,800 --> 00:15:08,260
isolated in the child X 11 display

00:15:02,890 --> 00:15:13,810
server again you cannot use the GPU with

00:15:08,260 --> 00:15:17,500
this with this solution okay so let's

00:15:13,810 --> 00:15:22,570
have a look one of the solutions that I

00:15:17,500 --> 00:15:23,170
like the most which is having a Wayland

00:15:22,570 --> 00:15:27,069
composite

00:15:23,170 --> 00:15:33,609
running on your host so again we see

00:15:27,069 --> 00:15:37,540
that the host OS the core OS let's call

00:15:33,609 --> 00:15:45,299
it is running the kernel and some users

00:15:37,540 --> 00:15:48,910
base on hardware and then we have the

00:15:45,299 --> 00:15:53,109
our graphical applications inside the

00:15:48,910 --> 00:15:55,839
container in this case we're using the

00:15:53,109 --> 00:16:00,699
wadn't protocol between the host and the

00:15:55,839 --> 00:16:06,040
container and because the whelen

00:16:00,699 --> 00:16:09,929
protocol is much more secure than x11 it

00:16:06,040 --> 00:16:18,009
is actually a good solution to run both

00:16:09,929 --> 00:16:21,069
a Weyland Weyland client a Whalen

00:16:18,009 --> 00:16:24,339
graphical application and an X 11

00:16:21,069 --> 00:16:27,220
graphical application because if you

00:16:24,339 --> 00:16:32,079
have support for X Wayland you can run

00:16:27,220 --> 00:16:39,610
your X 11 application inside a whale and

00:16:32,079 --> 00:16:45,540
compositor ok so one of the best tools I

00:16:39,610 --> 00:16:48,399
have found to play and start to

00:16:45,540 --> 00:16:51,579
understand how things work when running

00:16:48,399 --> 00:16:55,629
graphical applications in containers is

00:16:51,579 --> 00:16:59,410
called x11 docker despite the name which

00:16:55,629 --> 00:17:06,399
i think is somehow an historical name it

00:16:59,410 --> 00:17:09,850
can be used both to run x11 application

00:17:06,399 --> 00:17:12,819
and whale and applications so this

00:17:09,850 --> 00:17:14,679
regard that the name you can try almost

00:17:12,819 --> 00:17:18,459
every option that I have mentioned

00:17:14,679 --> 00:17:21,970
before with this tool it's a very simple

00:17:18,459 --> 00:17:25,149
script exactly just once in one script

00:17:21,970 --> 00:17:28,590
shell script that allows you to run

00:17:25,149 --> 00:17:34,409
graphical application or entire desktops

00:17:28,590 --> 00:17:34,409
inside darker Linux Linux containers

00:17:34,690 --> 00:17:40,480
it's very simple to try so you just

00:17:37,870 --> 00:17:42,640
download the script have a look at the

00:17:40,480 --> 00:17:46,140
common line options that are available

00:17:42,640 --> 00:17:49,179
you select the one that you prefer and

00:17:46,140 --> 00:17:53,230
the best thing about the project is that

00:17:49,179 --> 00:17:56,320
it's very very well documented so when

00:17:53,230 --> 00:18:03,820
you have played with watch what is

00:17:56,320 --> 00:18:08,980
available you can look behind this the

00:18:03,820 --> 00:18:10,860
current curtain and just understand what

00:18:08,980 --> 00:18:14,740
it is doing basically it's just

00:18:10,860 --> 00:18:18,900
generating environment variables copy

00:18:14,740 --> 00:18:22,600
some very important files and then

00:18:18,900 --> 00:18:26,230
preparing a darker common line for you

00:18:22,600 --> 00:18:30,190
so when you're ready when you have

00:18:26,230 --> 00:18:37,650
selected the option that fits your use

00:18:30,190 --> 00:18:41,170
case you can basically disregard the to

00:18:37,650 --> 00:18:44,470
just understand what it does and run the

00:18:41,170 --> 00:18:48,610
same comment line that this tool is

00:18:44,470 --> 00:18:54,870
actually creating for you so very good

00:18:48,610 --> 00:19:00,250
to try things out so we wanted to play

00:18:54,870 --> 00:19:05,700
with hardware and so we wanted to have a

00:19:00,250 --> 00:19:10,300
look at some of the issues that you may

00:19:05,700 --> 00:19:14,260
find when using an open-source graphics

00:19:10,300 --> 00:19:17,230
stack or a proprietary graphics stack so

00:19:14,260 --> 00:19:23,980
we have two examples here we work with

00:19:17,230 --> 00:19:29,309
an XP devices the most so an XP chips we

00:19:23,980 --> 00:19:36,130
are trying the Aetna beef driver on the

00:19:29,309 --> 00:19:44,260
imx6 and the Bement proprietary

00:19:36,130 --> 00:19:45,800
proprietary stack on the AMX 8 M we had

00:19:44,260 --> 00:19:51,400
to add

00:19:45,800 --> 00:19:51,400
am SATA disk because we wanted to try a

00:19:51,730 --> 00:19:57,620
general available distributions like

00:19:54,680 --> 00:20:02,690
Fedora or Ubuntu we didn't want to

00:19:57,620 --> 00:20:05,720
create our own Yocto OS to do this kind

00:20:02,690 --> 00:20:11,870
of tests because we wanted to stay as

00:20:05,720 --> 00:20:15,950
general as possible so to fit the fedora

00:20:11,870 --> 00:20:19,210
that we were going to install the space

00:20:15,950 --> 00:20:22,190
on emmc was not enough and we installed

00:20:19,210 --> 00:20:26,300
named SATA disk to have better

00:20:22,190 --> 00:20:31,700
performances and the space that we

00:20:26,300 --> 00:20:35,240
needed so again to test the open-source

00:20:31,700 --> 00:20:43,430
graphics stack we tried the Etna imp

00:20:35,240 --> 00:20:45,740
driver on Fedora 30 on our I will go a

00:20:43,430 --> 00:20:49,850
bit quickly here because basically it's

00:20:45,740 --> 00:20:56,510
what you need to do to install Fedora on

00:20:49,850 --> 00:21:02,990
a nopales imx6 board again you install

00:20:56,510 --> 00:21:08,900
the disk and copy fedora on the board

00:21:02,990 --> 00:21:14,900
you adjust you boot to tell hey boot

00:21:08,900 --> 00:21:19,640
from the SATA disk and then we had to

00:21:14,900 --> 00:21:22,010
tweak some kernel parameters because

00:21:19,640 --> 00:21:26,390
there were some bugs we had to work

00:21:22,010 --> 00:21:31,280
around or some option that we didn't

00:21:26,390 --> 00:21:37,580
need then we installed that to dx11

00:21:31,280 --> 00:21:40,700
graphics driver and then so at that

00:21:37,580 --> 00:21:43,810
point we had x11 display server working

00:21:40,700 --> 00:21:46,810
correctly with 2d and 3d graphics

00:21:43,810 --> 00:21:46,810
acceleration

00:21:46,900 --> 00:21:55,040
we were close to have the same also on

00:21:50,810 --> 00:21:59,540
Weiland but there's a small bug in waste

00:21:55,040 --> 00:22:04,130
on six that prevents the session to

00:21:59,540 --> 00:22:09,650
actually start so I had to build from

00:22:04,130 --> 00:22:11,330
master from build waste on 7.0 and then

00:22:09,650 --> 00:22:17,240
everything was working perfectly

00:22:11,330 --> 00:22:21,860
basically and Fedora already had Mesa 3d

00:22:17,240 --> 00:22:23,260
drivers to provide OpenGL to and OpenGL

00:22:21,860 --> 00:22:30,020
es2

00:22:23,260 --> 00:22:33,820
acceleration so this is a quick recap of

00:22:30,020 --> 00:22:37,340
the installation instructions to build

00:22:33,820 --> 00:22:44,600
wisdom from sources let's have a look

00:22:37,340 --> 00:22:47,690
now at how to so now we have X 11 and

00:22:44,600 --> 00:22:50,690
Wayland working correctly on our host

00:22:47,690 --> 00:22:54,920
but we didn't touch doctor yet so now we

00:22:50,690 --> 00:22:57,920
want to actually test if everything is

00:22:54,920 --> 00:23:03,740
working also inside a docker container

00:22:57,920 --> 00:23:07,280
and in this case so with the open open

00:23:03,740 --> 00:23:12,260
source graphics stack it's been very

00:23:07,280 --> 00:23:16,270
very easy because we used an ubuntu

00:23:12,260 --> 00:23:20,620
docker image very small and basic ubuntu

00:23:16,270 --> 00:23:24,740
image as a starting point and installed

00:23:20,620 --> 00:23:30,160
the application so the 3d bank Jamar's

00:23:24,740 --> 00:23:34,670
that we needed and these common line so

00:23:30,160 --> 00:23:38,930
apt-get install gel mark 2 already

00:23:34,670 --> 00:23:41,900
provided a major version with Etna Beebe

00:23:38,930 --> 00:23:44,990
drivers so we didn't had to copy

00:23:41,900 --> 00:23:48,440
anything special inside the container we

00:23:44,990 --> 00:23:51,020
already had 3d drivers and we just built

00:23:48,440 --> 00:23:56,690
the docker image from this docker file

00:23:51,020 --> 00:24:00,440
and we had the our graphical application

00:23:56,690 --> 00:24:01,560
running inside the container so here's a

00:24:00,440 --> 00:24:06,060
brief

00:24:01,560 --> 00:24:09,450
of how to use the the to the x11 darker

00:24:06,060 --> 00:24:15,900
tool that I mentioned before so here

00:24:09,450 --> 00:24:20,370
there are three examples of running the

00:24:15,900 --> 00:24:27,290
GL mark to benchmark in the first case

00:24:20,370 --> 00:24:32,280
we are running X X 11 on the host and

00:24:27,290 --> 00:24:37,970
have an X 11 client running inside the

00:24:32,280 --> 00:24:42,750
container in darker this one is not very

00:24:37,970 --> 00:24:45,840
very isolated so it's not secure but if

00:24:42,750 --> 00:24:49,080
you want performances of course in this

00:24:45,840 --> 00:24:54,150
case you can use 3d graphics

00:24:49,080 --> 00:24:59,450
the other two are using Wayland

00:24:54,150 --> 00:25:03,180
exclusively so in the second one we have

00:24:59,450 --> 00:25:06,960
waste on running on the host so in the

00:25:03,180 --> 00:25:12,150
core part of the core OS and a Wayland

00:25:06,960 --> 00:25:14,520
client inside the docker container and

00:25:12,150 --> 00:25:21,030
in the last one instead we have

00:25:14,520 --> 00:25:25,380
everything inside the container okay so

00:25:21,030 --> 00:25:30,290
let's see how we can do the same thing

00:25:25,380 --> 00:25:33,570
with a proprietary graphics stack it's a

00:25:30,290 --> 00:25:38,430
bit more difficult when you have to

00:25:33,570 --> 00:25:41,370
write the docker file because again we

00:25:38,430 --> 00:25:45,060
wanted to test the proprietary Devante

00:25:41,370 --> 00:25:53,120
graphic stack on a nitrogen a times

00:25:45,060 --> 00:25:57,080
basically nx8 so as you can see here

00:25:53,120 --> 00:26:01,260
there are some steps you need to do

00:25:57,080 --> 00:26:03,900
because you will not find the Banta

00:26:01,260 --> 00:26:07,800
proprietary graphics stack inside a

00:26:03,900 --> 00:26:08,830
ubuntu basic docker image so it's not in

00:26:07,800 --> 00:26:12,710
the

00:26:08,830 --> 00:26:17,240
you boon to represent arrays so I had to

00:26:12,710 --> 00:26:22,960
basically copy the apt-get configuration

00:26:17,240 --> 00:26:28,150
and repositories from the host and

00:26:22,960 --> 00:26:32,680
install as you can see the AMX GPU

00:26:28,150 --> 00:26:36,940
Bamonte a proprietary graphics driver a

00:26:32,680 --> 00:26:41,270
couple of symlinks to tell you boon to

00:26:36,940 --> 00:26:45,830
look in the right places for 3d graphics

00:26:41,270 --> 00:26:50,300
libraries and then it was working as as

00:26:45,830 --> 00:26:53,780
expected so in this case we only have

00:26:50,300 --> 00:26:57,470
support from the proprietary drivers for

00:26:53,780 --> 00:27:05,150
wastin so again here's an example of

00:26:57,470 --> 00:27:10,310
running x11 docker to run the GL mark

00:27:05,150 --> 00:27:16,940
benchmark as you can see here we had to

00:27:10,310 --> 00:27:20,630
share this additional device here so the

00:27:16,940 --> 00:27:25,850
slash dev slash gal core is something

00:27:20,630 --> 00:27:31,370
that the Vivante kernel drivers creates

00:27:25,850 --> 00:27:36,080
and of course is needed also to be

00:27:31,370 --> 00:27:38,570
available inside the docker container so

00:27:36,080 --> 00:27:41,960
as you can see here there are two

00:27:38,570 --> 00:27:45,380
options related to the GPU the first one

00:27:41,960 --> 00:27:50,030
is GPU which was also in the open source

00:27:45,380 --> 00:27:52,580
graphic stack which means share you can

00:27:50,030 --> 00:27:55,760
see that in the darker common line that

00:27:52,580 --> 00:27:59,840
x11 Tucker generates it means share

00:27:55,760 --> 00:28:05,990
slash dev slash DRI so the container can

00:27:59,840 --> 00:28:08,150
access the graphics card device but in

00:28:05,990 --> 00:28:15,650
this case we had also to share this

00:28:08,150 --> 00:28:20,330
specific device so we now have created

00:28:15,650 --> 00:28:21,830
some examples we have evaluated the

00:28:20,330 --> 00:28:30,230
options that we can

00:28:21,830 --> 00:28:33,200
but we want to be sure that what what is

00:28:30,230 --> 00:28:36,649
running the staff that we have on the

00:28:33,200 --> 00:28:40,399
host doesn't have any specific advantage

00:28:36,649 --> 00:28:43,100
over running in darker so the question

00:28:40,399 --> 00:28:47,450
is does it make any difference

00:28:43,100 --> 00:28:51,830
running 3d graphics on the inside

00:28:47,450 --> 00:28:56,809
container with respect to using hosta

00:28:51,830 --> 00:28:59,840
libraries and the answer is no so as you

00:28:56,809 --> 00:29:04,489
can see here I have three different

00:28:59,840 --> 00:29:06,679
examples with waylynn with x11 with the

00:29:04,489 --> 00:29:08,629
open-source graphics stack or with the

00:29:06,679 --> 00:29:10,700
proprietor graphic stacks it doesn't

00:29:08,629 --> 00:29:16,639
make a difference after all it's just

00:29:10,700 --> 00:29:19,009
that you are isolated in in a process

00:29:16,639 --> 00:29:19,879
and dedicated process space when you are

00:29:19,009 --> 00:29:23,749
using docker

00:29:19,879 --> 00:29:28,279
but you are actually using the resources

00:29:23,749 --> 00:29:30,379
provided from the same kernel so the

00:29:28,279 --> 00:29:33,739
driver in the kernel is the same what

00:29:30,379 --> 00:29:37,789
can change of course is the 3d graphics

00:29:33,739 --> 00:29:41,019
drivers so as you can see here when you

00:29:37,789 --> 00:29:47,149
are running in the core OS on the host

00:29:41,019 --> 00:29:51,259
you are using the the Mesa

00:29:47,149 --> 00:29:55,340
implementation provided by the host so

00:29:51,259 --> 00:29:58,549
fedora 30 in our case so we had Mason

00:29:55,340 --> 00:30:01,399
and 18.1 but if you are running inside

00:29:58,549 --> 00:30:04,940
the docker container you you are of

00:30:01,399 --> 00:30:10,940
course running the Mesa implementation

00:30:04,940 --> 00:30:17,590
of Ubuntu so of the user space in the

00:30:10,940 --> 00:30:22,159
container so in this case Mason 18.0 so

00:30:17,590 --> 00:30:25,279
this is the case for the open-source

00:30:22,159 --> 00:30:29,830
graphics stack on x11 you can see the

00:30:25,279 --> 00:30:32,779
results are the results are the same

00:30:29,830 --> 00:30:35,570
also when using Wayland on the

00:30:32,779 --> 00:30:38,960
open-source graphics stack and as well

00:30:35,570 --> 00:30:45,410
on of course the proprietary graphics

00:30:38,960 --> 00:30:50,960
tag so it doesn't make a difference okay

00:30:45,410 --> 00:30:55,700
so of course we need to take care of

00:30:50,960 --> 00:30:57,710
security when selecting the the best

00:30:55,700 --> 00:31:04,340
option for us to run a graphical

00:30:57,710 --> 00:31:08,780
application the first thing that we need

00:31:04,340 --> 00:31:13,580
to keep in mind are the x11 protocol

00:31:08,780 --> 00:31:18,260
Security flows so it was designed many

00:31:13,580 --> 00:31:24,110
years ago and it has relevant problems

00:31:18,260 --> 00:31:27,640
like you are able to capture the whole

00:31:24,110 --> 00:31:31,520
screen the whole contents of the screen

00:31:27,640 --> 00:31:33,890
from an it it's application so basically

00:31:31,520 --> 00:31:37,460
you can grab everything that is on the

00:31:33,890 --> 00:31:41,930
screen from an application or you can do

00:31:37,460 --> 00:31:45,890
key logging so X 11 is not a secure

00:31:41,930 --> 00:31:49,490
protocol whereas the whelen protocol has

00:31:45,890 --> 00:31:51,980
been designed with security in mind this

00:31:49,490 --> 00:31:59,600
is this is the first thing that you need

00:31:51,980 --> 00:32:09,680
to keep in mind then you need to

00:31:59,600 --> 00:32:13,550
remember that you don't want to be rude

00:32:09,680 --> 00:32:19,190
inside a container and you also want to

00:32:13,550 --> 00:32:21,770
start the container in background not

00:32:19,190 --> 00:32:26,360
from the shell because for example if

00:32:21,770 --> 00:32:29,630
you're adding your host user to the

00:32:26,360 --> 00:32:32,570
darker group you can actually run darker

00:32:29,630 --> 00:32:35,960
comment lines from your user on your PC

00:32:32,570 --> 00:32:40,850
and then you can do nice these things

00:32:35,960 --> 00:32:44,690
like sharing the whole route of the host

00:32:40,850 --> 00:32:46,820
and B route inside the container so

00:32:44,690 --> 00:32:47,140
inside the container you are route and

00:32:46,820 --> 00:32:52,510
you

00:32:47,140 --> 00:32:56,350
can modify the content of the host so of

00:32:52,510 --> 00:32:56,860
your PC or embedded board so don't do

00:32:56,350 --> 00:33:00,130
that

00:32:56,860 --> 00:33:04,030
and then again sometimes you need to

00:33:00,130 --> 00:33:09,430
make compromises for example sharing the

00:33:04,030 --> 00:33:12,490
GPU devices is some kind of security

00:33:09,430 --> 00:33:17,350
violation but at the moment there are

00:33:12,490 --> 00:33:24,430
not many options you can use to work

00:33:17,350 --> 00:33:26,590
around that so share as as least as you

00:33:24,430 --> 00:33:30,630
can so don't share what you don't need

00:33:26,590 --> 00:33:34,120
to share and of course start with the

00:33:30,630 --> 00:33:37,060
highest security possible and then if

00:33:34,120 --> 00:33:43,720
you really need to disable the security

00:33:37,060 --> 00:33:51,580
options that that causes you troubles or

00:33:43,720 --> 00:33:56,230
issues ok so we have seen how to

00:33:51,580 --> 00:34:00,010
experiment with running applications

00:33:56,230 --> 00:34:05,110
inside the docker container we have seen

00:34:00,010 --> 00:34:08,620
some considerations on what you need to

00:34:05,110 --> 00:34:11,830
think about so security of course is one

00:34:08,620 --> 00:34:14,020
of the most important things but of

00:34:11,830 --> 00:34:16,750
course for example if you are running

00:34:14,020 --> 00:34:22,240
just a kiosk application which is your

00:34:16,750 --> 00:34:24,310
only applications you don't need to

00:34:22,240 --> 00:34:30,370
isolate with something else because

00:34:24,310 --> 00:34:33,270
something else doesn't exist so thank

00:34:30,370 --> 00:34:40,649
you very much everybody if you have

00:34:33,270 --> 00:34:40,649

YouTube URL: https://www.youtube.com/watch?v=LHXpv2oee84


