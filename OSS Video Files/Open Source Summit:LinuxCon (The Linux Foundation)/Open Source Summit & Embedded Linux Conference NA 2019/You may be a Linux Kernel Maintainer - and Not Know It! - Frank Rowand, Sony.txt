Title: You may be a Linux Kernel Maintainer - and Not Know It! - Frank Rowand, Sony
Publication date: 2019-09-16
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	You may be a Linux Kernel Maintainer - and Not Know It! - Frank Rowand, Sony

You may be a Linux Kernel Maintainer, resulting from your contributions to the kernel, or you may want to become a Maintainer. This presentation will address- how do you become a maintainer without knowing it?- how do you become a maintainer on purpose?- what are your roles and responsibilities?- how do you fulfill those roles?- what will make you a good maintainer?- what resources are available to assist you?
Captions: 
	00:00:00,299 --> 00:00:05,009
so we'll go ahead and get started as you

00:00:03,330 --> 00:00:06,960
may have guessed from the schedule or

00:00:05,009 --> 00:00:09,179
for my intro slide I'm Frank Rowand I

00:00:06,960 --> 00:00:12,360
work for Sony I've worked for Sony

00:00:09,179 --> 00:00:14,389
around 13 or 14 years now and quite a

00:00:12,360 --> 00:00:19,939
few other embedded Linux companies

00:00:14,389 --> 00:00:24,660
before that and proprietary companies I

00:00:19,939 --> 00:00:26,279
have several roles in Sony and one of

00:00:24,660 --> 00:00:28,109
those roles led to a real life story

00:00:26,279 --> 00:00:30,929
which I'm going to talk about today the

00:00:28,109 --> 00:00:33,600
impetus for these slides I work with

00:00:30,929 --> 00:00:35,160
different groups inside Sony who are

00:00:33,600 --> 00:00:38,520
learning how to work with open source

00:00:35,160 --> 00:00:41,100
and how to interact how to submit code

00:00:38,520 --> 00:00:43,530
things like that and I was working with

00:00:41,100 --> 00:00:48,030
a team that was creating a brand new

00:00:43,530 --> 00:00:49,410
driver for an ASIC a TV tuner and we

00:00:48,030 --> 00:00:51,000
gave them some advice on how to get

00:00:49,410 --> 00:00:52,260
their patches in the kernel we reviewed

00:00:51,000 --> 00:00:55,140
their patches and helped them out a bit

00:00:52,260 --> 00:00:59,160
and so they send in your typical patch

00:00:55,140 --> 00:01:00,780
series and as usual the last patch in

00:00:59,160 --> 00:01:03,090
the series included some housekeeping

00:01:00,780 --> 00:01:05,250
things things like make files but most

00:01:03,090 --> 00:01:07,950
importantly adding an entry into the

00:01:05,250 --> 00:01:11,159
maintainer file so here we find that

00:01:07,950 --> 00:01:15,000
we've added a Sony engineer for a set of

00:01:11,159 --> 00:01:17,600
files that encompass this driver so just

00:01:15,000 --> 00:01:20,460
by getting this patch series accepted

00:01:17,600 --> 00:01:23,549
magic this engineer is now a kernel

00:01:20,460 --> 00:01:25,049
maintainer and you don't really think

00:01:23,549 --> 00:01:27,270
about that so often if you're just

00:01:25,049 --> 00:01:29,100
putting in a new driver just adding your

00:01:27,270 --> 00:01:30,600
name to a few files to the maintainer x'

00:01:29,100 --> 00:01:34,229
file but you really are a maintainer at

00:01:30,600 --> 00:01:36,090
this point so what happens next you wait

00:01:34,229 --> 00:01:39,930
a few months maybe four or five months

00:01:36,090 --> 00:01:42,990
and an email appears to my inbox from

00:01:39,930 --> 00:01:45,119
this development team and if you look at

00:01:42,990 --> 00:01:47,369
the bottom of this email someone has

00:01:45,119 --> 00:01:48,840
sent them a patch so this development

00:01:47,369 --> 00:01:51,180
team is forwarding this me this patch

00:01:48,840 --> 00:01:55,110
and saying what the heck am I supposed

00:01:51,180 --> 00:01:57,180
to do with this should I be replying to

00:01:55,110 --> 00:01:59,520
them that this is a confirmed fix or

00:01:57,180 --> 00:02:00,710
should I give them some comments what

00:01:59,520 --> 00:02:04,079
should I do

00:02:00,710 --> 00:02:07,799
so this exposed to gap in our internal

00:02:04,079 --> 00:02:10,289
training it turns out that we taught

00:02:07,799 --> 00:02:12,180
people how to submit a driver but we

00:02:10,289 --> 00:02:13,800
never talked to them about what it was

00:02:12,180 --> 00:02:15,120
going to be like to be a maintainer

00:02:13,800 --> 00:02:18,300
this is an area that was totally

00:02:15,120 --> 00:02:22,320
unexplored so that leaves the question

00:02:18,300 --> 00:02:24,570
open of what role do they have and any

00:02:22,320 --> 00:02:25,980
patches that later get submitted to

00:02:24,570 --> 00:02:28,980
their software that they put into the

00:02:25,980 --> 00:02:31,620
tree and there are a couple of plausible

00:02:28,980 --> 00:02:34,320
paths that patches and fetuses can go

00:02:31,620 --> 00:02:35,970
through mostly I'll be talking about the

00:02:34,320 --> 00:02:38,040
leg well I'll be talking half way about

00:02:35,970 --> 00:02:39,780
the likely path and also possible path

00:02:38,040 --> 00:02:43,110
there are two different directions here

00:02:39,780 --> 00:02:46,380
the easiest way is when someone sends a

00:02:43,110 --> 00:02:48,360
fix the developer sends a fix up to the

00:02:46,380 --> 00:02:50,940
typical subsystem maintainer totally

00:02:48,360 --> 00:02:52,680
bypassing you the driver maintainer and

00:02:50,940 --> 00:02:54,870
the subsystem maintainer worries about

00:02:52,680 --> 00:02:57,720
getting the patch up to kernel.org being

00:02:54,870 --> 00:03:01,080
leanness and exposure in the linux next

00:02:57,720 --> 00:03:03,450
tree for testing another possible path

00:03:01,080 --> 00:03:06,060
that you could choose to to follow is

00:03:03,450 --> 00:03:08,070
that a fix would go directly to the

00:03:06,060 --> 00:03:10,140
device the driver maintainer the person

00:03:08,070 --> 00:03:11,910
who created the driver and that person

00:03:10,140 --> 00:03:14,250
would either interact with the subsystem

00:03:11,910 --> 00:03:17,220
maintainer or directly with leanness and

00:03:14,250 --> 00:03:18,660
Linux next and about half my talk is

00:03:17,220 --> 00:03:23,220
going to be about those possible

00:03:18,660 --> 00:03:26,190
interactions so you should work with

00:03:23,220 --> 00:03:28,020
your subsystem maintainer and make sure

00:03:26,190 --> 00:03:30,000
that you're on a common ground about

00:03:28,020 --> 00:03:31,980
what role you're going to you're going

00:03:30,000 --> 00:03:35,760
to be taking just so that you're on the

00:03:31,980 --> 00:03:39,209
same page so there are five different

00:03:35,760 --> 00:03:41,370
possible roles that you can take and

00:03:39,209 --> 00:03:44,060
I'll talk about these each in detail the

00:03:41,370 --> 00:03:47,190
first is just totally ignore your role

00:03:44,060 --> 00:03:51,030
by the way my slides are already up

00:03:47,190 --> 00:03:54,230
stream on the schedule page and the emx

00:03:51,030 --> 00:03:56,850
org wiki if you want to copy the slides

00:03:54,230 --> 00:03:58,170
and if you have any questions interrupt

00:03:56,850 --> 00:04:01,050
me at any point and I'll answer

00:03:58,170 --> 00:04:03,030
questions along the way so the second

00:04:01,050 --> 00:04:04,560
role you can take is you can provide

00:04:03,030 --> 00:04:06,390
advice to your upstream maintainer

00:04:04,560 --> 00:04:08,430
advise them on the patches as they come

00:04:06,390 --> 00:04:10,739
in the third is that you can directly

00:04:08,430 --> 00:04:12,660
review patches explicitly review them

00:04:10,739 --> 00:04:14,820
the fourth is you can actually become a

00:04:12,660 --> 00:04:16,650
sub maintainer and that was that less

00:04:14,820 --> 00:04:18,510
likely paths are showing where patches

00:04:16,650 --> 00:04:19,739
would flow through you and they're

00:04:18,510 --> 00:04:21,239
probably other roles you could take off

00:04:19,739 --> 00:04:24,540
that I didn't even think about but I

00:04:21,239 --> 00:04:26,100
think these are the main way ways you

00:04:24,540 --> 00:04:28,120
get involved so the first way you can

00:04:26,100 --> 00:04:29,890
you can ignore your role

00:04:28,120 --> 00:04:31,810
the amount of work you have to do for

00:04:29,890 --> 00:04:33,940
this is absolutely no work this is the

00:04:31,810 --> 00:04:36,220
easiest path to take but there's a

00:04:33,940 --> 00:04:37,750
consequence to this the next time that

00:04:36,220 --> 00:04:40,180
you have a feature or a driver that you

00:04:37,750 --> 00:04:42,550
want to submit if the maintainer is

00:04:40,180 --> 00:04:44,470
aware of you taking this do-nothing role

00:04:42,550 --> 00:04:47,140
they're going to be less likely to

00:04:44,470 --> 00:04:48,610
accept your new feature when you send a

00:04:47,140 --> 00:04:50,140
new feature in the maintainer wants you

00:04:48,610 --> 00:04:53,590
to be there to help maintain it over

00:04:50,140 --> 00:04:56,500
time if you want to follow this path

00:04:53,590 --> 00:04:57,700
please please please send a patch up and

00:04:56,500 --> 00:04:59,830
remove your name from the maintainer

00:04:57,700 --> 00:05:03,670
file that way everyone's clear on what

00:04:59,830 --> 00:05:06,040
the what the story is a slightly more

00:05:03,670 --> 00:05:08,770
involved process is you can provide

00:05:06,040 --> 00:05:12,070
advice to the upstream maintainer when

00:05:08,770 --> 00:05:13,990
you see an apache mail on the mail list

00:05:12,070 --> 00:05:14,980
or if it's directed to you which it

00:05:13,990 --> 00:05:18,190
should be because you're in the

00:05:14,980 --> 00:05:22,530
maintainer file you can add an act by

00:05:18,190 --> 00:05:25,180
tag this is somewhat a controversial

00:05:22,530 --> 00:05:27,790
statement on my part if you look at the

00:05:25,180 --> 00:05:29,200
actual definition of an act by tag it

00:05:27,790 --> 00:05:32,830
also implies that you've reviewed the

00:05:29,200 --> 00:05:34,030
patch actual practice in reality varies

00:05:32,830 --> 00:05:36,850
as to whether you've actually reviewed

00:05:34,030 --> 00:05:39,310
it when you send an act to tag my

00:05:36,850 --> 00:05:41,320
perception which will get debated by

00:05:39,310 --> 00:05:43,660
other maintainer x' is the one you add

00:05:41,320 --> 00:05:45,850
your act by tag you're telling the

00:05:43,660 --> 00:05:47,680
person who the patch is going to flow

00:05:45,850 --> 00:05:50,140
through the you're okay with them

00:05:47,680 --> 00:05:52,690
accepting that patch so that person may

00:05:50,140 --> 00:05:54,550
be your subsystem maintainer it may be

00:05:52,690 --> 00:05:56,230
an entirely different sub system if a

00:05:54,550 --> 00:05:58,480
patch series covers multiple subsystems

00:05:56,230 --> 00:06:01,060
and that's really commonly where act by

00:05:58,480 --> 00:06:02,260
tags get used when multiple maintainer

00:06:01,060 --> 00:06:06,880
czar trying to coordinate with each

00:06:02,260 --> 00:06:08,710
other if you do see problems with the

00:06:06,880 --> 00:06:11,710
patch you should at least reply to them

00:06:08,710 --> 00:06:14,470
and mention and I'll get to the next

00:06:11,710 --> 00:06:16,360
role which is actually officially

00:06:14,470 --> 00:06:18,850
reviewing this is kind of an informal

00:06:16,360 --> 00:06:20,140
you're not claiming to be a review or

00:06:18,850 --> 00:06:22,960
you're just trying to provide helpful

00:06:20,140 --> 00:06:24,220
advice at this point but the minimum you

00:06:22,960 --> 00:06:27,010
should be reading and analyzing the

00:06:24,220 --> 00:06:28,930
patch you should test the patch and this

00:06:27,010 --> 00:06:30,820
is really important you might be the

00:06:28,930 --> 00:06:32,800
only person in the community who has the

00:06:30,820 --> 00:06:35,830
actual hardware that this patch can be

00:06:32,800 --> 00:06:37,840
tested on especially if it's very

00:06:35,830 --> 00:06:40,180
expensive hardware or very niche

00:06:37,840 --> 00:06:41,750
hardware there's a way you can get

00:06:40,180 --> 00:06:44,460
around that you can

00:06:41,750 --> 00:06:46,620
provide your hardware to your sub

00:06:44,460 --> 00:06:48,660
maintainer and that's highly recommended

00:06:46,620 --> 00:06:51,720
for many reasons and that will allow

00:06:48,660 --> 00:06:54,420
other people to test the patches you

00:06:51,720 --> 00:06:56,430
could also make your test lab available

00:06:54,420 --> 00:06:59,340
on the network so that people could test

00:06:56,430 --> 00:07:02,310
your hardware via the network so the

00:06:59,340 --> 00:07:04,710
amount of work for the first option of

00:07:02,310 --> 00:07:06,540
doing nothing was no work this step

00:07:04,710 --> 00:07:08,870
they're taking a slightly larger role

00:07:06,540 --> 00:07:10,860
it's still a small amount of work and

00:07:08,870 --> 00:07:12,420
the important thing is that you're

00:07:10,860 --> 00:07:14,670
putting a burden on your upstream

00:07:12,420 --> 00:07:16,440
maintainer one thing that you want to do

00:07:14,670 --> 00:07:18,440
is make life easier for your maintainer

00:07:16,440 --> 00:07:20,610
that makes your maintainer is happy and

00:07:18,440 --> 00:07:22,860
Greg cage gives lots of talks about

00:07:20,610 --> 00:07:25,770
trying to make your maintainer happy so

00:07:22,860 --> 00:07:28,140
just go reference his stuff a slightly

00:07:25,770 --> 00:07:31,290
more expanded role you can officially

00:07:28,140 --> 00:07:32,550
start reviewing the patches this means

00:07:31,290 --> 00:07:35,250
that you do everything you did at the

00:07:32,550 --> 00:07:38,390
lower level plus you now explicitly

00:07:35,250 --> 00:07:41,700
review every patch that comes to you and

00:07:38,390 --> 00:07:44,220
comes to the mail list you should be

00:07:41,700 --> 00:07:46,350
providing good feedback and this is kind

00:07:44,220 --> 00:07:47,760
of the art of being a maintainer you

00:07:46,350 --> 00:07:50,010
need to let people know what is good

00:07:47,760 --> 00:07:53,490
about the patch you need to know let

00:07:50,010 --> 00:07:56,700
them know what's not quite good enough

00:07:53,490 --> 00:07:58,830
and what needs to be changed and you can

00:07:56,700 --> 00:08:01,650
consider providing them suggestions on

00:07:58,830 --> 00:08:03,420
how to change it sometimes it's enough

00:08:01,650 --> 00:08:05,030
simply to say this has to change and

00:08:03,420 --> 00:08:07,140
it's obvious and they'll figure it out

00:08:05,030 --> 00:08:09,660
sometimes you need to be a little bit

00:08:07,140 --> 00:08:12,030
more involved and when something isn't

00:08:09,660 --> 00:08:14,010
good enough and not acceptable you have

00:08:12,030 --> 00:08:15,210
to be explicit about that and there are

00:08:14,010 --> 00:08:16,590
a lot of talks where people will tell

00:08:15,210 --> 00:08:19,590
you one of the most important roles of

00:08:16,590 --> 00:08:21,480
mate of a maintainer is saying no it's

00:08:19,590 --> 00:08:25,560
also one of the most difficult roles to

00:08:21,480 --> 00:08:27,540
do it effectively in a positive way once

00:08:25,560 --> 00:08:29,280
you've reviewed the patch you then need

00:08:27,540 --> 00:08:32,130
to add your reviewed by tag which is

00:08:29,280 --> 00:08:33,540
simply a reply email and this is a

00:08:32,130 --> 00:08:36,750
little bit more work than the previous

00:08:33,540 --> 00:08:38,850
level of maintainer ship the amount of

00:08:36,750 --> 00:08:43,110
work really varies based on your

00:08:38,850 --> 00:08:45,810
subsystem and based on your actual patch

00:08:43,110 --> 00:08:47,880
based on how active the fixes are so

00:08:45,810 --> 00:08:50,670
it's hard to predict how much work this

00:08:47,880 --> 00:08:53,730
actually be talk a little bit about

00:08:50,670 --> 00:08:56,070
reviewed by this is all this is taken

00:08:53,730 --> 00:08:58,699
straight from the kernel documentation

00:08:56,070 --> 00:09:01,110
I'm not going to read this line by line

00:08:58,699 --> 00:09:02,490
but when you do a review by tag I

00:09:01,110 --> 00:09:03,870
suggest that you read this and really

00:09:02,490 --> 00:09:06,480
understand what you're saying it's

00:09:03,870 --> 00:09:08,250
reviewed by but just summarize it point

00:09:06,480 --> 00:09:11,550
a is saying basically I've done a

00:09:08,250 --> 00:09:14,459
technical review and is it is this patch

00:09:11,550 --> 00:09:17,339
appropriate and is it ready point B is

00:09:14,459 --> 00:09:18,720
saying if I found problems I

00:09:17,339 --> 00:09:23,069
communicated to the person who submitted

00:09:18,720 --> 00:09:25,949
the patch and I am happy or satisfied

00:09:23,069 --> 00:09:29,519
with their response to my comments point

00:09:25,949 --> 00:09:32,759
C is basically saying it's possible that

00:09:29,519 --> 00:09:34,860
this patch could be better but it will

00:09:32,759 --> 00:09:37,410
make a positive contribution in its

00:09:34,860 --> 00:09:39,149
current form and basically it's good

00:09:37,410 --> 00:09:42,300
enough and there aren't any critical

00:09:39,149 --> 00:09:45,569
issues point D is basically saying I'm

00:09:42,300 --> 00:09:48,269
not guaranteeing the usefulness or valid

00:09:45,569 --> 00:09:49,620
validity of this patch at all and then

00:09:48,269 --> 00:09:50,790
this all gets summarized at the bottom

00:09:49,620 --> 00:09:53,880
of that list in the documentation

00:09:50,790 --> 00:09:56,940
essentially saying this is this tag is

00:09:53,880 --> 00:09:58,170
your opinion that this is this patch is

00:09:56,940 --> 00:10:00,269
an appropriate modification of the

00:09:58,170 --> 00:10:02,579
kernel and there are not any remaining

00:10:00,269 --> 00:10:03,959
serious issues there still might be

00:10:02,579 --> 00:10:05,610
minor issues there still may be

00:10:03,959 --> 00:10:08,310
additional work that needs to get added

00:10:05,610 --> 00:10:12,510
in a future patch but it's good enough

00:10:08,310 --> 00:10:15,449
to go in for right now if you want to

00:10:12,510 --> 00:10:16,860
move up yet one more level and most

00:10:15,449 --> 00:10:19,230
people probably will not move to this

00:10:16,860 --> 00:10:21,899
level you can actually become a sub

00:10:19,230 --> 00:10:23,699
maintainer and this is going to require

00:10:21,899 --> 00:10:26,130
more conversations with your maintainer

00:10:23,699 --> 00:10:29,220
and you everything all the other levels

00:10:26,130 --> 00:10:30,779
of maintainer are plus you help the

00:10:29,220 --> 00:10:33,360
maintainer out essentially you have some

00:10:30,779 --> 00:10:35,610
more responsibilities the maintainer

00:10:33,360 --> 00:10:37,949
depending on the relationship who you

00:10:35,610 --> 00:10:39,839
have with them they may want you to take

00:10:37,949 --> 00:10:44,610
on some of their specific tasks and help

00:10:39,839 --> 00:10:46,860
them out they may like it when you start

00:10:44,610 --> 00:10:49,050
reviewing other drivers that are similar

00:10:46,860 --> 00:10:50,699
to yours you're an expert in a certain

00:10:49,050 --> 00:10:52,949
technical area things that are similar

00:10:50,699 --> 00:10:54,779
to your driver so your knowledge and

00:10:52,949 --> 00:10:56,519
expertise can be very helpful in

00:10:54,779 --> 00:10:59,550
providing good reviews for other similar

00:10:56,519 --> 00:11:02,339
drivers and again the amount of work

00:10:59,550 --> 00:11:05,760
involved in this depends on your driver

00:11:02,339 --> 00:11:07,410
on the subsystem what your maintainer

00:11:05,760 --> 00:11:09,920
wants you to do what you want to do and

00:11:07,410 --> 00:11:12,300
it's all negotiable

00:11:09,920 --> 00:11:14,399
some other tasks that you need to do is

00:11:12,300 --> 00:11:16,319
you need to think in a in a broader way

00:11:14,399 --> 00:11:19,259
of looking at the kernel as a whole and

00:11:16,319 --> 00:11:25,350
at your subsystem as a whole you can't

00:11:19,259 --> 00:11:28,319
just look at your narrow use case you

00:11:25,350 --> 00:11:30,209
need to be thinking about overall

00:11:28,319 --> 00:11:31,920
architecture you need to make sure that

00:11:30,209 --> 00:11:35,610
that architecture is maintained when

00:11:31,920 --> 00:11:38,310
things get added architecture may evolve

00:11:35,610 --> 00:11:40,319
and change as a result of of patches

00:11:38,310 --> 00:11:43,019
coming in but you need to be aware that

00:11:40,319 --> 00:11:45,000
that change is happening if it is you

00:11:43,019 --> 00:11:46,949
need to make sure that you're not just

00:11:45,000 --> 00:11:49,259
solving one small use case at the

00:11:46,949 --> 00:11:51,569
detriment to other use cases Linux

00:11:49,259 --> 00:11:54,660
scales incredibly well from very small

00:11:51,569 --> 00:11:56,189
embedded devices to supercomputers you

00:11:54,660 --> 00:11:58,829
know the top hundred supercomputer list

00:11:56,189 --> 00:12:01,199
contains mostly Linux and it can be

00:11:58,829 --> 00:12:04,290
difficult to encompass all those

00:12:01,199 --> 00:12:06,629
potential use cases you need to mean

00:12:04,290 --> 00:12:09,000
make sure that the patches as they get

00:12:06,629 --> 00:12:12,990
added don't hurt maintainability of the

00:12:09,000 --> 00:12:15,120
subsystem it's it's always a balancing

00:12:12,990 --> 00:12:17,339
act you need you want to be adding

00:12:15,120 --> 00:12:21,870
functionality and sometimes adding that

00:12:17,339 --> 00:12:24,240
functionality is going to make it harder

00:12:21,870 --> 00:12:27,269
to maintain and you'll see that if you

00:12:24,240 --> 00:12:29,670
look at the Linux kernel from 2000 and

00:12:27,269 --> 00:12:31,649
look at it today the complexity has

00:12:29,670 --> 00:12:33,750
grown immensely and there's some parts

00:12:31,649 --> 00:12:38,029
of the kernel that consequently are very

00:12:33,750 --> 00:12:40,800
very difficult to modify fix add-on to

00:12:38,029 --> 00:12:45,449
so it's a balancing act for maintainer

00:12:40,800 --> 00:12:47,550
keeping that at all imbalance you need

00:12:45,449 --> 00:12:50,550
to make sure that the person submitting

00:12:47,550 --> 00:12:53,399
the patches explains clearly what their

00:12:50,550 --> 00:12:55,829
use case is or what their problem is a

00:12:53,399 --> 00:12:58,019
lot of times you can help that person

00:12:55,829 --> 00:13:01,949
adjust their statement just a little bit

00:12:58,019 --> 00:13:03,449
and it might solve a much broader much

00:13:01,949 --> 00:13:06,149
broader problem than they're trying to

00:13:03,449 --> 00:13:07,139
fix or if you can help them look at it

00:13:06,149 --> 00:13:09,240
in a different way they may realize

00:13:07,139 --> 00:13:12,720
there's maybe a different approach to

00:13:09,240 --> 00:13:16,680
solving the problem you need to make

00:13:12,720 --> 00:13:20,790
sure that testing was done you need to

00:13:16,680 --> 00:13:24,139
make sure that static checks were also

00:13:20,790 --> 00:13:24,139
done which is another type of testing

00:13:25,579 --> 00:13:31,050
compatibilities important performance

00:13:28,189 --> 00:13:32,610
some patches talk about improving

00:13:31,050 --> 00:13:36,809
performance or solving a performance

00:13:32,610 --> 00:13:38,790
problem some patches explicitly say this

00:13:36,809 --> 00:13:41,879
is a really really important feature and

00:13:38,790 --> 00:13:44,670
it's going to hurt performance but this

00:13:41,879 --> 00:13:47,459
patch is so critical that we should

00:13:44,670 --> 00:13:48,959
accept the performance hit and a really

00:13:47,459 --> 00:13:50,639
good example of that are the recent

00:13:48,959 --> 00:13:52,740
Spectre meltdown all those other patches

00:13:50,639 --> 00:13:54,869
where we were taking a big performance

00:13:52,740 --> 00:13:57,179
hit in the kernel to fix those security

00:13:54,869 --> 00:13:59,279
issues but it was felt that it was

00:13:57,179 --> 00:14:01,079
critical to solve those and over time

00:13:59,279 --> 00:14:03,779
they've been trying to reduce the

00:14:01,079 --> 00:14:10,889
performance hit from that specific set

00:14:03,779 --> 00:14:12,420
of patches another test that you have is

00:14:10,889 --> 00:14:14,519
you're there to help your your

00:14:12,420 --> 00:14:17,429
developers when they have questions

00:14:14,519 --> 00:14:20,819
issues concerns you're a resource for

00:14:17,429 --> 00:14:22,290
them ok I mentioned that you should be

00:14:20,819 --> 00:14:25,139
talking with your upstream maintainer

00:14:22,290 --> 00:14:29,129
you need to make sure you're on the same

00:14:25,139 --> 00:14:30,389
page and as you if you want to assume

00:14:29,129 --> 00:14:32,339
different levels of responsibility

00:14:30,389 --> 00:14:34,470
there's a lot of freedom to move back

00:14:32,339 --> 00:14:37,679
and forth between the levels there's no

00:14:34,470 --> 00:14:40,949
need to commit to a three-year role as a

00:14:37,679 --> 00:14:43,649
seer as a top level sub maintainer or

00:14:40,949 --> 00:14:45,959
you're devoting you know 20 hours a week

00:14:43,649 --> 00:14:52,620
every week to it you know negotiate with

00:14:45,959 --> 00:14:54,029
your sub maintainer so summarize all of

00:14:52,620 --> 00:14:57,179
that all those different roles you could

00:14:54,029 --> 00:14:59,550
take you have various levels that you

00:14:57,179 --> 00:15:02,069
can get involved in that flow of that

00:14:59,550 --> 00:15:04,139
patch coming from developers into the

00:15:02,069 --> 00:15:06,470
Linux kernel from a very minor

00:15:04,139 --> 00:15:09,360
involvement to a very heavy involvement

00:15:06,470 --> 00:15:11,399
it's really important to try to make

00:15:09,360 --> 00:15:14,480
your upstream maintainer job easier and

00:15:11,399 --> 00:15:16,499
I say that selfishly as a maintainer and

00:15:14,480 --> 00:15:19,259
again your role is to help the

00:15:16,499 --> 00:15:21,629
contributors below you and and this is

00:15:19,259 --> 00:15:24,179
true of all maintained errs you're there

00:15:21,629 --> 00:15:27,360
to help the people above you so people

00:15:24,179 --> 00:15:29,040
who are top level maintainer still are

00:15:27,360 --> 00:15:31,199
there to make leanness as life easier

00:15:29,040 --> 00:15:32,370
and they're always always trying to help

00:15:31,199 --> 00:15:34,639
people at the bottom come into the

00:15:32,370 --> 00:15:36,480
kernel and start working on it and

00:15:34,639 --> 00:15:38,730
understand it better

00:15:36,480 --> 00:15:41,369
so changing the tax here a little bit

00:15:38,730 --> 00:15:46,439
this is kind of a strange jump but going

00:15:41,369 --> 00:15:48,389
to tags tags and patch emails it's an

00:15:46,439 --> 00:15:53,850
interesting way to provide some other

00:15:48,389 --> 00:15:57,029
insights just looking at tags so what

00:15:53,850 --> 00:15:59,279
tags should you require they come in in

00:15:57,029 --> 00:16:01,379
emails to you and when you process a

00:15:59,279 --> 00:16:05,160
patch in an email what tags will you be

00:16:01,379 --> 00:16:07,679
adding is a maintainer signed off every

00:16:05,160 --> 00:16:09,959
patch that sent to you or sent to your

00:16:07,679 --> 00:16:12,059
sub maintainer every patch that's going

00:16:09,959 --> 00:16:14,339
into leanness this tree must have a

00:16:12,059 --> 00:16:19,949
signed off by tag on it or it will not

00:16:14,339 --> 00:16:22,470
be accepted if you take a patch email

00:16:19,949 --> 00:16:24,359
and then you forward that patch email to

00:16:22,470 --> 00:16:26,579
your sub maintainer that patch is

00:16:24,359 --> 00:16:30,029
flowing through you then you would add

00:16:26,579 --> 00:16:31,980
your signed off tag if you're simply

00:16:30,029 --> 00:16:35,279
letting the patch go to your sub

00:16:31,980 --> 00:16:37,499
maintainer by passing you your sub

00:16:35,279 --> 00:16:41,730
maintainer we'll add their signed off by

00:16:37,499 --> 00:16:45,059
tag and this is one of the the meanings

00:16:41,730 --> 00:16:46,919
behind signed off tag paragraph C in the

00:16:45,059 --> 00:16:48,709
documentation just simply saying

00:16:46,919 --> 00:16:51,419
somebody gave me this contribution

00:16:48,709 --> 00:16:53,429
directly and they certified that they

00:16:51,419 --> 00:16:55,379
were allowed to submit it and that's

00:16:53,429 --> 00:16:57,449
what a B and C are they're basically

00:16:55,379 --> 00:17:02,039
providing assurances that they have the

00:16:57,449 --> 00:17:03,600
right to submit this patch to you so

00:17:02,039 --> 00:17:05,909
you're making sure that chain of custody

00:17:03,600 --> 00:17:08,189
of the patch is maintained as it comes

00:17:05,909 --> 00:17:10,319
into the kernel this one is not a tag

00:17:08,189 --> 00:17:12,539
this is a it still fits in the patch

00:17:10,319 --> 00:17:15,269
comment area it's not an email see see

00:17:12,539 --> 00:17:18,809
it's in the patch comment if you see C

00:17:15,269 --> 00:17:20,789
the stable people it looks like an email

00:17:18,809 --> 00:17:24,480
C C is something that they'll notice

00:17:20,789 --> 00:17:26,610
when a commit gets accepted in the Linux

00:17:24,480 --> 00:17:28,679
kernel and that would be a clue to them

00:17:26,610 --> 00:17:31,320
that this is a patch that fixes

00:17:28,679 --> 00:17:33,029
something that's in older released

00:17:31,320 --> 00:17:35,130
kernels and maybe they should add this

00:17:33,029 --> 00:17:37,500
into the stable trees and then they'll

00:17:35,130 --> 00:17:38,970
make that determination if they're

00:17:37,500 --> 00:17:41,220
ignoring your patch you really think he

00:17:38,970 --> 00:17:42,809
goes in there you can talk to Greg KH he

00:17:41,220 --> 00:17:47,429
has other ways of getting patches into

00:17:42,809 --> 00:17:50,010
stable fix this tag this one I strongly

00:17:47,429 --> 00:17:50,280
encourage if you're fixing a bug it has

00:17:50,010 --> 00:17:55,500
a

00:17:50,280 --> 00:17:58,410
of useful features if your reviewer and

00:17:55,500 --> 00:18:01,260
you're trying to figure out whether a

00:17:58,410 --> 00:18:04,110
patch fixes a bug having a pointer to

00:18:01,260 --> 00:18:05,340
the actual code that's broken it really

00:18:04,110 --> 00:18:08,400
makes it a whole lot easier to analyze

00:18:05,340 --> 00:18:11,370
whether the fix is effective if you're

00:18:08,400 --> 00:18:13,980
testing a fix it's a whole lot easier to

00:18:11,370 --> 00:18:16,620
be able to go to the version of the

00:18:13,980 --> 00:18:19,410
kernel right before the commit that

00:18:16,620 --> 00:18:21,690
created the bug verify that the problem

00:18:19,410 --> 00:18:24,420
it doesn't show up in your test case add

00:18:21,690 --> 00:18:28,170
that one commit make sure that the

00:18:24,420 --> 00:18:30,300
problem does show up continue forward

00:18:28,170 --> 00:18:35,040
add the fix to make sure the bug is gone

00:18:30,300 --> 00:18:38,940
again through your test case next tag

00:18:35,040 --> 00:18:41,400
tested by how much should patches be

00:18:38,940 --> 00:18:43,170
tested there's not a black and white set

00:18:41,400 --> 00:18:46,470
of rules that every single patch goes

00:18:43,170 --> 00:18:49,500
through and there's a lot of variation

00:18:46,470 --> 00:18:51,990
between the subsystems a lot of personal

00:18:49,500 --> 00:18:54,000
preferences by maintainer x' so this is

00:18:51,990 --> 00:18:56,220
my personal take on it things that I

00:18:54,000 --> 00:18:57,900
think should be mandatory the first one

00:18:56,220 --> 00:18:59,190
almost everyone will agree with your

00:18:57,900 --> 00:19:01,830
patch should have been checked against

00:18:59,190 --> 00:19:04,160
check patch if it feels that you didn't

00:19:01,830 --> 00:19:08,100
do even the beginning of due diligence

00:19:04,160 --> 00:19:10,170
the next you should make sure that when

00:19:08,100 --> 00:19:12,620
you compile the kernel after adding your

00:19:10,170 --> 00:19:17,550
your patches no new compile warnings

00:19:12,620 --> 00:19:20,840
occur generally the kernel day-to-day

00:19:17,550 --> 00:19:25,650
does not generate any compile warnings

00:19:20,840 --> 00:19:27,810
for most configurations when I get a new

00:19:25,650 --> 00:19:30,810
major release occasionally I'll see one

00:19:27,810 --> 00:19:32,430
or two new warnings and sometimes it's

00:19:30,810 --> 00:19:34,500
because of a specific configuration that

00:19:32,430 --> 00:19:36,720
I have there may be no one else tested

00:19:34,500 --> 00:19:39,270
but the community as a whole is very

00:19:36,720 --> 00:19:44,430
good about maintaining lack of warnings

00:19:39,270 --> 00:19:46,500
with no special Diagnostics turns on you

00:19:44,430 --> 00:19:49,110
know I'll talk about a little bit

00:19:46,500 --> 00:19:52,800
stricter compile warnings on the next

00:19:49,110 --> 00:19:55,650
slide this may sound really stupid but

00:19:52,800 --> 00:19:56,940
if your patch is fixing a bug test it

00:19:55,650 --> 00:19:59,820
and make sure that the bug really does

00:19:56,940 --> 00:20:00,900
go away after applying your patch you

00:19:59,820 --> 00:20:04,380
may have to try a few different

00:20:00,900 --> 00:20:06,240
configurations make sure it's not

00:20:04,380 --> 00:20:08,210
configuration specific that it fixes

00:20:06,240 --> 00:20:10,620
that it fixes a broad set of

00:20:08,210 --> 00:20:12,300
configurations and that's just a

00:20:10,620 --> 00:20:15,540
judgement call of how do you figure out

00:20:12,300 --> 00:20:18,030
what all detest your subsystem may have

00:20:15,540 --> 00:20:19,650
a test suite some of the file systems

00:20:18,030 --> 00:20:22,110
specifically have Suites that they

00:20:19,650 --> 00:20:23,610
expect you to run device tree which is

00:20:22,110 --> 00:20:26,670
what I'm a maintainer of we have

00:20:23,610 --> 00:20:28,410
built-in tests so just find out what

00:20:26,670 --> 00:20:32,730
your subsystem expects and follow that

00:20:28,410 --> 00:20:34,740
if you are adding a new feature make

00:20:32,730 --> 00:20:37,680
sure that the feature by the time you

00:20:34,740 --> 00:20:41,700
finish it actually matches what the

00:20:37,680 --> 00:20:43,950
documentation is a lot of times your

00:20:41,700 --> 00:20:46,740
your feature will evolve over time and

00:20:43,950 --> 00:20:48,090
it's really easy for the documentation

00:20:46,740 --> 00:20:55,080
to get out of sync with the actual

00:20:48,090 --> 00:20:58,290
implementation and one that again sounds

00:20:55,080 --> 00:21:01,380
really stupid but you would be surprised

00:20:58,290 --> 00:21:03,570
make sure your kernel still boots after

00:21:01,380 --> 00:21:05,040
you apply the patch and sometimes again

00:21:03,570 --> 00:21:07,710
this might be a matter of trying a few

00:21:05,040 --> 00:21:10,170
different configurations maybe trying a

00:21:07,710 --> 00:21:12,180
different architecture most people will

00:21:10,170 --> 00:21:14,370
not try building and booting a different

00:21:12,180 --> 00:21:16,440
architecture some people are really good

00:21:14,370 --> 00:21:17,670
about that and religious and they'll try

00:21:16,440 --> 00:21:19,680
three or four or five different

00:21:17,670 --> 00:21:21,900
architectures and they'll use virtual

00:21:19,680 --> 00:21:23,520
machines typically to do that or they

00:21:21,900 --> 00:21:26,340
may have a large board farm available

00:21:23,520 --> 00:21:27,300
but that's a really easy problem to hit

00:21:26,340 --> 00:21:32,160
if you don't test different

00:21:27,300 --> 00:21:35,280
architectures okay I mention that for

00:21:32,160 --> 00:21:37,320
compile warnings you can check a little

00:21:35,280 --> 00:21:39,450
bit more stringently and when you do a

00:21:37,320 --> 00:21:42,840
kernel build you can specify w equals

00:21:39,450 --> 00:21:47,010
one two three or any combination of

00:21:42,840 --> 00:21:51,200
those and each of those levels of

00:21:47,010 --> 00:21:51,200
warnings is a different set of warnings

00:21:51,560 --> 00:21:58,230
for make w equals one in general you

00:21:54,960 --> 00:22:00,960
should not create any new warnings in

00:21:58,230 --> 00:22:03,930
the kernel is a whole that's pretty well

00:22:00,960 --> 00:22:06,450
well done once you get to w equals two

00:22:03,930 --> 00:22:09,110
or three then you get into a little bit

00:22:06,450 --> 00:22:11,550
more esoteric warnings and sometimes

00:22:09,110 --> 00:22:13,200
they're justifiable sometimes you just

00:22:11,550 --> 00:22:16,050
can't avoid them there are a lot of

00:22:13,200 --> 00:22:17,830
warnings that come out of macros in

00:22:16,050 --> 00:22:20,320
header files

00:22:17,830 --> 00:22:23,019
so if that problem is already there in

00:22:20,320 --> 00:22:24,879
the header file you're stuck in less

00:22:23,019 --> 00:22:27,460
your Seng someone else's problem it's

00:22:24,879 --> 00:22:28,869
this preexisting it may be incentive

00:22:27,460 --> 00:22:31,720
that you may want to start going fixed

00:22:28,869 --> 00:22:34,629
hanging fixing header files but you can

00:22:31,720 --> 00:22:36,309
always say hey not my problem someone

00:22:34,629 --> 00:22:37,960
created this problem headed and it's

00:22:36,309 --> 00:22:40,929
already there it's already hitting

00:22:37,960 --> 00:22:43,239
everybody there other static tools

00:22:40,929 --> 00:22:46,509
sparse and smach or I recommend them

00:22:43,239 --> 00:22:47,769
very highly I would say I don't have any

00:22:46,509 --> 00:22:49,389
justification for this but I would say

00:22:47,769 --> 00:22:51,850
most people actually don't run these

00:22:49,389 --> 00:22:54,070
tools if you run these tools and catch

00:22:51,850 --> 00:22:55,779
things you will stand out as being a

00:22:54,070 --> 00:23:00,850
really good person in a really good

00:22:55,779 --> 00:23:03,460
developer and again I mention that if

00:23:00,850 --> 00:23:05,019
you're going to impact performance you

00:23:03,460 --> 00:23:08,109
should be doing performance measurements

00:23:05,019 --> 00:23:10,389
and providing data for that and that

00:23:08,109 --> 00:23:13,239
that's such a wide open field like I

00:23:10,389 --> 00:23:16,419
can't even give a hand is specifically

00:23:13,239 --> 00:23:18,029
what type of data in any given case I

00:23:16,419 --> 00:23:20,289
mean there's so many different types of

00:23:18,029 --> 00:23:23,919
performance data that matter in the

00:23:20,289 --> 00:23:25,629
kernel and different subsystems the last

00:23:23,919 --> 00:23:29,859
tag is reviewed by and I talked about

00:23:25,629 --> 00:23:31,450
that earlier time expectations how are

00:23:29,859 --> 00:23:34,989
you personally going to get hit by this

00:23:31,450 --> 00:23:36,789
this whole role you're going to need to

00:23:34,989 --> 00:23:39,489
allocate some time in your personal work

00:23:36,789 --> 00:23:42,999
schedule you'll want to make sure your

00:23:39,489 --> 00:23:45,850
manager knows that you can't just ignore

00:23:42,999 --> 00:23:48,090
the community for three weeks to the

00:23:45,850 --> 00:23:50,669
next window and your schedule opens up

00:23:48,090 --> 00:23:52,629
by the time that three weeks goes by

00:23:50,669 --> 00:23:57,879
someone else will have accepted the

00:23:52,629 --> 00:23:59,289
patch or or whatever kind of a side note

00:23:57,879 --> 00:24:01,179
on that if you're going to be on

00:23:59,289 --> 00:24:03,429
vacation or otherwise unavailable for a

00:24:01,179 --> 00:24:05,460
while it's really nice if you can find

00:24:03,429 --> 00:24:10,119
someone else to help fill in your role

00:24:05,460 --> 00:24:12,129
especially if your driver is for

00:24:10,119 --> 00:24:15,879
Hardware where not all the documentation

00:24:12,129 --> 00:24:17,679
might be publicly available you might be

00:24:15,879 --> 00:24:19,299
able to share hints from your

00:24:17,679 --> 00:24:22,450
documentation to other developers as

00:24:19,299 --> 00:24:23,919
they hit specific cases and so if you

00:24:22,450 --> 00:24:25,809
have someone else in your in your team

00:24:23,919 --> 00:24:28,629
who has access to those documents that

00:24:25,809 --> 00:24:31,059
can be extremely helpful and they also

00:24:28,629 --> 00:24:31,840
may understand the the drive room and be

00:24:31,059 --> 00:24:34,690
able to provide

00:24:31,840 --> 00:24:37,830
good review for bonus points if you want

00:24:34,690 --> 00:24:40,960
to be really really a good maintainer

00:24:37,830 --> 00:24:44,049
monitor or skim your subsystem mail list

00:24:40,960 --> 00:24:48,039
for a couple reasons one is your sub

00:24:44,049 --> 00:24:49,990
system is changing over time and what

00:24:48,039 --> 00:24:51,730
looked like when you first developed

00:24:49,990 --> 00:24:54,120
your driver may not look like what it is

00:24:51,730 --> 00:24:54,120
today

00:24:54,210 --> 00:24:58,809
so just keeping track of how how the sub

00:24:57,370 --> 00:25:03,490
system is evolving will help you as a

00:24:58,809 --> 00:25:05,770
reviewer also people who submit patches

00:25:03,490 --> 00:25:07,270
are supposed to use get maintainer it

00:25:05,770 --> 00:25:10,659
should find your name in the maintainer

00:25:07,270 --> 00:25:13,179
z' file you should get c seed or have a

00:25:10,659 --> 00:25:15,690
two on the mail for a patch but that

00:25:13,179 --> 00:25:15,690
doesn't always happen

00:25:15,820 --> 00:25:26,830
I'd say about 5% of patches my sub

00:25:20,980 --> 00:25:28,750
system I don't get directly emailed if

00:25:26,830 --> 00:25:31,000
you want to keep up with even broader

00:25:28,750 --> 00:25:32,620
trends so that was subsystem if you want

00:25:31,000 --> 00:25:35,649
to look at what's going on in the entire

00:25:32,620 --> 00:25:37,299
kernel there's one more email list you

00:25:35,649 --> 00:25:39,760
might want to consider subscribing to

00:25:37,299 --> 00:25:42,220
and that's the case summit discussed

00:25:39,760 --> 00:25:43,890
mail lists and this is where the

00:25:42,220 --> 00:25:46,870
top-level maintainer z' have all these

00:25:43,890 --> 00:25:50,470
theoretical esoteric and actually

00:25:46,870 --> 00:25:52,960
practical pragmatic discussions on how

00:25:50,470 --> 00:25:55,740
our processes works how it's going to

00:25:52,960 --> 00:25:57,580
evolve and interestingly a lot of these

00:25:55,740 --> 00:26:00,250
processes that I've talked about today

00:25:57,580 --> 00:26:03,100
have been discussed over the last month

00:26:00,250 --> 00:26:08,919
or two on this list coming up into our

00:26:03,100 --> 00:26:12,610
next summit and Portugal in a couple of

00:26:08,919 --> 00:26:14,169
weeks and that's one place where you see

00:26:12,610 --> 00:26:17,200
people don't necessarily agree what act

00:26:14,169 --> 00:26:21,520
by means are reviewed by or kind of

00:26:17,200 --> 00:26:24,490
interesting so to summarize what I've

00:26:21,520 --> 00:26:26,320
said so far today once your name is in

00:26:24,490 --> 00:26:28,860
the maintainer file you automatically

00:26:26,320 --> 00:26:31,419
you now are maintainer congratulations

00:26:28,860 --> 00:26:34,419
you can choose how involved you want to

00:26:31,419 --> 00:26:36,179
be in that maintainer role work out with

00:26:34,419 --> 00:26:39,039
your maintainer what you want that to be

00:26:36,179 --> 00:26:41,530
I discuss some of the different tasks

00:26:39,039 --> 00:26:43,600
that you'll be responsible for and I

00:26:41,530 --> 00:26:45,100
wanted to point out one more time when

00:26:43,600 --> 00:26:46,720
you need help

00:26:45,100 --> 00:26:49,000
you're upstream maintainer is there to

00:26:46,720 --> 00:26:54,250
help you just like you're there to help

00:26:49,000 --> 00:26:55,090
people submitting things to you thank

00:26:54,250 --> 00:27:02,830
you for coming

00:26:55,090 --> 00:27:05,500
questions thoughts suggestions well

00:27:02,830 --> 00:27:09,370
people are thinking of questions

00:27:05,500 --> 00:27:11,950
I did mention one unlikely path if you

00:27:09,370 --> 00:27:13,990
become the path that patches flow

00:27:11,950 --> 00:27:16,390
through then you'll be sending poor

00:27:13,990 --> 00:27:19,419
request to your sub maintainer and you

00:27:16,390 --> 00:27:22,000
need a repository and a key and that's

00:27:19,419 --> 00:27:24,510
all described done on this website in a

00:27:22,000 --> 00:27:27,520
wiki so if you do get in that position

00:27:24,510 --> 00:27:31,570
just go look at that and the

00:27:27,520 --> 00:27:35,200
administrators will help you out sorry

00:27:31,570 --> 00:27:39,059
the slides are online so yeah okay I'll

00:27:35,200 --> 00:27:39,059
I'll let it I'll let you take a picture

00:27:39,780 --> 00:27:42,780
okay

00:27:48,540 --> 00:27:57,390
questions jeers no hecklers my front row

00:27:53,610 --> 00:28:00,750
is missing today oh thank you for coming

00:27:57,390 --> 00:28:02,280
I'll be here all week you can also reach

00:28:00,750 --> 00:28:05,220
out to me by by email if you have

00:28:02,280 --> 00:28:06,590
questions and thoughts and thanks for

00:28:05,220 --> 00:28:10,890
coming today

00:28:06,590 --> 00:28:10,890

YouTube URL: https://www.youtube.com/watch?v=2Ttyvdl8_F0


