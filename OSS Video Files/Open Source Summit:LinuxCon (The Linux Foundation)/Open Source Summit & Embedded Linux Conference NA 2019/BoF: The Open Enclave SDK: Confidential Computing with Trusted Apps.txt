Title: BoF: The Open Enclave SDK: Confidential Computing with Trusted Apps
Publication date: 2019-09-16
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	BoF: The Open Enclave SDK: Confidential Computing with Trusted Apps â€“ Simon Leet and Andrew Schwartzmeyer, Microsoft

Cloud computing today primarily address the challenges of encrypting sensitive data at rest and in transit, but not while in use; Confidential Computing is an initiative focusing on this last step of securing data in use to close the gap.One enabler of Confidential Computing is the use of hardware-enforced Trusted Execution Environments (TEE), such as Intel's SGX, that allow encrypted data to be processed as plaintext in memory without exposing it to the rest of the system. The Open Enclave SDK is a project that attempts to support the development of Trusted Applications across different TEE. This BoF provides an informal setting to learn more about Open Enclave or Confidential Computing and how you can get involved.
Captions: 
	00:00:00,060 --> 00:00:07,259
we shut that door people leave the door

00:00:03,600 --> 00:00:10,170
open so people walk in so it is now 5:10

00:00:07,259 --> 00:00:11,460
so we are gonna get started folks are

00:00:10,170 --> 00:00:13,830
all encouraged to move towards the front

00:00:11,460 --> 00:00:14,969
because this is primarily for you to ask

00:00:13,830 --> 00:00:20,300
questions the presentation is really

00:00:14,969 --> 00:00:23,070
short right so if folks can't hear me

00:00:20,300 --> 00:00:24,660
move forwards because I will mumble

00:00:23,070 --> 00:00:29,359
throughout the talk and that is a threat

00:00:24,660 --> 00:00:33,000
oh you've raised your hand really sure

00:00:29,359 --> 00:00:34,950
that is what the five slides I have will

00:00:33,000 --> 00:00:37,649
answer in not-so-great detail

00:00:34,950 --> 00:00:39,140
your job is done thank you plant I will

00:00:37,649 --> 00:00:41,340
pay you later

00:00:39,140 --> 00:00:44,160
so we're just gonna get started right

00:00:41,340 --> 00:00:45,780
now I'm assuming folks here mostly from

00:00:44,160 --> 00:00:47,280
the open source summit side of things is

00:00:45,780 --> 00:00:53,250
anybody here from the Security Summit

00:00:47,280 --> 00:00:54,570
okay all the ringers can leave now but

00:00:53,250 --> 00:00:56,399
for the open source summit people were

00:00:54,570 --> 00:00:58,320
folks at the keynote do you guys know

00:00:56,399 --> 00:00:59,699
what the confidential consortium stuff

00:00:58,320 --> 00:01:03,300
is confidential computing consortium

00:00:59,699 --> 00:01:05,489
stuff is do the words trusted execution

00:01:03,300 --> 00:01:07,979
environment mean anything to any of you

00:01:05,489 --> 00:01:08,580
okay good good number of hands bring

00:01:07,979 --> 00:01:12,270
yours don't count

00:01:08,580 --> 00:01:14,790
bring your some so okay well we'll go

00:01:12,270 --> 00:01:16,680
through a bunch of that detail hopefully

00:01:14,790 --> 00:01:18,180
fairly quickly so just to motivate a

00:01:16,680 --> 00:01:20,040
bunch of this stuff right like before we

00:01:18,180 --> 00:01:22,710
even get to what the open Enclave SDK is

00:01:20,040 --> 00:01:24,540
we should probably uh explain a little

00:01:22,710 --> 00:01:25,740
bit the problem space it lives in we

00:01:24,540 --> 00:01:28,259
should probably add to who we were as

00:01:25,740 --> 00:01:31,409
well I'm Andy from Microsoft and this is

00:01:28,259 --> 00:01:33,450
Simon my sure we're unimportant we're

00:01:31,409 --> 00:01:35,520
just puppets for just so you know who

00:01:33,450 --> 00:01:38,759
you're talking to you yes so we can go

00:01:35,520 --> 00:01:44,970
back a slide no yes

00:01:38,759 --> 00:01:45,840
so Simon Andy next slide so again we're

00:01:44,970 --> 00:01:46,979
just going to skip through a bunch of

00:01:45,840 --> 00:01:48,750
this stuff right so everybody knows

00:01:46,979 --> 00:01:50,189
security today if you walk in Linux

00:01:48,750 --> 00:01:51,659
environments a lot of it is just around

00:01:50,189 --> 00:01:53,909
how do you secure data when it's sitting

00:01:51,659 --> 00:01:55,290
on someone's hard drive somewhere lots

00:01:53,909 --> 00:01:57,149
and lots of technologies available for

00:01:55,290 --> 00:01:58,619
that already all variants of that

00:01:57,149 --> 00:02:01,110
technology available you can encrypt

00:01:58,619 --> 00:02:02,939
things on a block device spaces you can

00:02:01,110 --> 00:02:06,180
encrypt databases you can encrypt on a

00:02:02,939 --> 00:02:07,950
file system basis pretty much a software

00:02:06,180 --> 00:02:09,539
lots and lots of solutions were there

00:02:07,950 --> 00:02:11,360
for you to use right

00:02:09,539 --> 00:02:13,080
if you're talking about sort of

00:02:11,360 --> 00:02:14,670
microservices and how you actually

00:02:13,080 --> 00:02:16,590
deploy applications and the cloud today

00:02:14,670 --> 00:02:18,810
the other thing you have to solve of

00:02:16,590 --> 00:02:20,670
course is how does your data get to this

00:02:18,810 --> 00:02:22,230
place and we have lots and lots of

00:02:20,670 --> 00:02:23,579
solutions in that space as well sort of

00:02:22,230 --> 00:02:25,019
the de facto standard if you use

00:02:23,579 --> 00:02:28,370
Internet at all that's going to be

00:02:25,019 --> 00:02:31,079
transport layer security TLS or HTTPS

00:02:28,370 --> 00:02:33,989
there are more esoteric protocols you

00:02:31,079 --> 00:02:35,579
can also employ if you want to we that's

00:02:33,989 --> 00:02:36,450
also in a place where it's sort of a

00:02:35,579 --> 00:02:39,409
buyers market right

00:02:36,450 --> 00:02:41,609
lots of things for you to be able to do

00:02:39,409 --> 00:02:43,440
sort of what we're talking about when we

00:02:41,609 --> 00:02:46,200
mentioned this magical term of

00:02:43,440 --> 00:02:48,299
confidential computing is what you do if

00:02:46,200 --> 00:02:50,639
you want to have secrets which are being

00:02:48,299 --> 00:02:52,829
computed on a machine that you don't own

00:02:50,639 --> 00:02:55,799
and you want those secrets to remain

00:02:52,829 --> 00:02:57,269
secret so the obvious example of this is

00:02:55,799 --> 00:03:00,389
we're not these major cloud providers

00:02:57,269 --> 00:03:01,859
with Azure Google with Amazon you want

00:03:00,389 --> 00:03:03,359
to run your enterprise applications on

00:03:01,859 --> 00:03:06,000
these cloud providers but the

00:03:03,359 --> 00:03:08,250
traditional model of security is if I

00:03:06,000 --> 00:03:10,170
want machine I can do lots of things to

00:03:08,250 --> 00:03:10,980
that machine I own the operating system

00:03:10,170 --> 00:03:12,780
that you're running on

00:03:10,980 --> 00:03:15,510
I may have admin rights the operator has

00:03:12,780 --> 00:03:17,459
I've been rights to this thing I can

00:03:15,510 --> 00:03:19,319
dump your memory pages right like your

00:03:17,459 --> 00:03:22,319
application may be running just fine

00:03:19,319 --> 00:03:24,000
maybe now we're free but how do you

00:03:22,319 --> 00:03:25,410
trust that no one who has access to the

00:03:24,000 --> 00:03:28,199
device or the operating system has

00:03:25,410 --> 00:03:31,560
access to your data as well and so

00:03:28,199 --> 00:03:33,090
there's this new area where you actually

00:03:31,560 --> 00:03:35,849
want encryption right you kind of want

00:03:33,090 --> 00:03:37,319
your data to be encrypted so that even

00:03:35,849 --> 00:03:39,870
when it's running even when it's been

00:03:37,319 --> 00:03:42,569
computed over no one else should be able

00:03:39,870 --> 00:03:46,680
to see your data except presumably your

00:03:42,569 --> 00:03:48,030
application right and so this idea of

00:03:46,680 --> 00:03:50,400
being able to protect your data while

00:03:48,030 --> 00:03:52,349
it's in use is it's sort of this new

00:03:50,400 --> 00:03:54,720
space that we're trying to refer to and

00:03:52,349 --> 00:03:55,739
there are other technologies in a couple

00:03:54,720 --> 00:03:57,230
of different technologies in the space

00:03:55,739 --> 00:03:59,190
some of them are pretty nascent

00:03:57,230 --> 00:04:01,560
homomorphic encryption has been around

00:03:59,190 --> 00:04:03,409
for a really long time in academia is

00:04:01,560 --> 00:04:05,790
about 20 years at this point I think

00:04:03,409 --> 00:04:07,680
it's not really taken off because there

00:04:05,790 --> 00:04:09,690
are lots of severe limitations on what

00:04:07,680 --> 00:04:12,019
it can do efficiently today if you

00:04:09,690 --> 00:04:12,019
happen

00:04:13,810 --> 00:04:20,449
um yes they can't do division so the set

00:04:18,380 --> 00:04:21,709
of operations yeah it's whenever the set

00:04:20,449 --> 00:04:23,570
of operations right it's not when we

00:04:21,709 --> 00:04:25,310
talk about algorithms yeah it's like the

00:04:23,570 --> 00:04:26,810
set of operations you can do efficiently

00:04:25,310 --> 00:04:30,139
unencrypted data it's just very

00:04:26,810 --> 00:04:31,580
restricted today so if you happen to

00:04:30,139 --> 00:04:33,620
have the problem that that can solve for

00:04:31,580 --> 00:04:36,050
you congratulations that's kind of the

00:04:33,620 --> 00:04:37,699
gold standard but the vast majority of

00:04:36,050 --> 00:04:40,220
applications just don't have that

00:04:37,699 --> 00:04:41,870
benefit today the other technology

00:04:40,220 --> 00:04:43,370
that's open emergent over the last five

00:04:41,870 --> 00:04:45,020
to ten years are these things we call

00:04:43,370 --> 00:04:47,389
trusted execution environments and

00:04:45,020 --> 00:04:49,639
that's really the idea of using Hardware

00:04:47,389 --> 00:04:50,930
so you're sort of way below decided

00:04:49,639 --> 00:04:54,710
below the hypervisor you're below the

00:04:50,930 --> 00:04:55,669
kernel operating system but that piece

00:04:54,710 --> 00:04:58,190
of hardware is going to give you a

00:04:55,669 --> 00:05:00,020
promise that while it's gonna compute on

00:04:58,190 --> 00:05:01,669
all the information in a decrypted form

00:05:00,020 --> 00:05:03,740
which means that you can use all the

00:05:01,669 --> 00:05:06,320
regular operations that you expect to be

00:05:03,740 --> 00:05:08,090
able to do the hardware is going to

00:05:06,320 --> 00:05:08,509
promise you that no one else can see you

00:05:08,090 --> 00:05:10,669
later

00:05:08,509 --> 00:05:12,320
not the kernel not the hypervisor it's

00:05:10,669 --> 00:05:14,539
that level protection where it's

00:05:12,320 --> 00:05:16,449
effectively your data is only encrypted

00:05:14,539 --> 00:05:21,979
and only your application gets to see it

00:05:16,449 --> 00:05:23,930
right and so when we talk about these

00:05:21,979 --> 00:05:25,970
tes there's really a sort of a set of

00:05:23,930 --> 00:05:28,280
primitives that they all kind of do

00:05:25,970 --> 00:05:30,199
right so if I have this trust execution

00:05:28,280 --> 00:05:33,080
environment the question becomes how do

00:05:30,199 --> 00:05:34,159
I run applications in this like well the

00:05:33,080 --> 00:05:35,659
assumption is you're gonna have some

00:05:34,159 --> 00:05:37,130
magical way of basically calling

00:05:35,659 --> 00:05:39,590
functions that run in this environment

00:05:37,130 --> 00:05:40,669
how do you do that right I'll be set up

00:05:39,590 --> 00:05:42,860
and how do you create this environment

00:05:40,669 --> 00:05:44,240
well you've got to tell someone to make

00:05:42,860 --> 00:05:45,830
this thing for you this is sort of CPU

00:05:44,240 --> 00:05:47,810
instructions or Hardware specific

00:05:45,830 --> 00:05:50,150
protocols that you run to be able to set

00:05:47,810 --> 00:05:52,280
up one of these things once you have

00:05:50,150 --> 00:05:53,690
this thing running how do you know that

00:05:52,280 --> 00:05:55,490
it's running inside this environment I

00:05:53,690 --> 00:05:57,560
could be running an emulator right if

00:05:55,490 --> 00:06:00,380
you are remoting into this piece of

00:05:57,560 --> 00:06:01,729
software what do you do to figure out

00:06:00,380 --> 00:06:02,960
that you're actually running against a

00:06:01,729 --> 00:06:04,580
trusted execution environment

00:06:02,960 --> 00:06:07,880
specifically running the code of your

00:06:04,580 --> 00:06:09,470
choice that you trust so the notions of

00:06:07,880 --> 00:06:11,990
attestation are really important there

00:06:09,470 --> 00:06:14,870
and if you use for example selinux

00:06:11,990 --> 00:06:17,750
before the idea of being able to attest

00:06:14,870 --> 00:06:18,979
like but the set of hardware that you're

00:06:17,750 --> 00:06:21,110
running instead of for mady running

00:06:18,979 --> 00:06:23,289
machine plus the set of software do you

00:06:21,110 --> 00:06:26,060
want to run on that those become

00:06:23,289 --> 00:06:27,199
basically intrinsic operations to what

00:06:26,060 --> 00:06:28,849
you want to be able to do

00:06:27,199 --> 00:06:31,090
when you run an application inside one

00:06:28,849 --> 00:06:33,680
of these trusted execution environments

00:06:31,090 --> 00:06:36,229
and finally like if you're familiar of

00:06:33,680 --> 00:06:40,189
TPMS of anybody not familiar for the

00:06:36,229 --> 00:06:42,800
TPMS in this room question trust the

00:06:40,189 --> 00:06:45,560
platform modules so basically a small

00:06:42,800 --> 00:06:47,029
hardware module that provides you

00:06:45,560 --> 00:06:49,699
private keys which are hard way about

00:06:47,029 --> 00:06:51,289
right and one of the major operations

00:06:49,699 --> 00:06:53,629
that you can do of these TPMS is

00:06:51,289 --> 00:06:55,699
basically to do identity where you can

00:06:53,629 --> 00:06:58,069
say I have a unique identifier and if I

00:06:55,699 --> 00:07:00,349
know this machine has this Hardware

00:06:58,069 --> 00:07:01,759
bound identity and also you can see what

00:07:00,349 --> 00:07:03,169
secrets it is because it has a zone set

00:07:01,759 --> 00:07:05,779
of keys that's not available to any

00:07:03,169 --> 00:07:07,249
other machine right and so sealing is

00:07:05,779 --> 00:07:08,330
one of these interesting primitives that

00:07:07,249 --> 00:07:10,240
you want to be able to do with these

00:07:08,330 --> 00:07:14,770
trusted execution environments as well

00:07:10,240 --> 00:07:17,779
so that's sort of trinity of things or

00:07:14,770 --> 00:07:19,460
for sort of operations being a create

00:07:17,779 --> 00:07:21,770
people to call functions being able to

00:07:19,460 --> 00:07:24,650
test a te and then being with the

00:07:21,770 --> 00:07:25,699
sealing operations right those are kind

00:07:24,650 --> 00:07:27,800
of things that we think are kind of

00:07:25,699 --> 00:07:30,020
fundamental to how you think about

00:07:27,800 --> 00:07:31,610
writing a program across all of these

00:07:30,020 --> 00:07:34,219
different cluster execution environments

00:07:31,610 --> 00:07:36,860
and that's really the problem that this

00:07:34,219 --> 00:07:38,810
SDK that we call the open Enclave SDK is

00:07:36,860 --> 00:07:40,759
trying to solve right so unclear this

00:07:38,810 --> 00:07:42,439
kind of was kind of derived from Intel's

00:07:40,759 --> 00:07:45,050
implementation of this trusted execution

00:07:42,439 --> 00:07:47,180
environment technology today where you

00:07:45,050 --> 00:07:50,569
can think of the Enclave as a term for a

00:07:47,180 --> 00:07:53,449
GE right the open Enclave SDK itself

00:07:50,569 --> 00:07:55,460
though tries to generalize that so Intel

00:07:53,449 --> 00:07:58,249
does have a very efficient and fully

00:07:55,460 --> 00:08:01,099
featured SDK for writing applications

00:07:58,249 --> 00:08:02,449
against the Intel SGX platform today as

00:08:01,099 --> 00:08:05,990
jack stands for software guard

00:08:02,449 --> 00:08:07,219
extensions but we also expect that

00:08:05,990 --> 00:08:09,439
they're going to be a lot more of these

00:08:07,219 --> 00:08:10,849
platforms in the future even software

00:08:09,439 --> 00:08:11,960
based ones i believe yesterday we had a

00:08:10,849 --> 00:08:15,110
similar talks and was asked about

00:08:11,960 --> 00:08:16,699
virtualization basically right you can

00:08:15,110 --> 00:08:20,629
think of trusted execution environments

00:08:16,699 --> 00:08:22,279
as being an application model where

00:08:20,629 --> 00:08:25,639
there is this notion that you will do

00:08:22,279 --> 00:08:27,080
some portion of your computation in this

00:08:25,639 --> 00:08:29,689
special memory space that's protected

00:08:27,080 --> 00:08:30,919
for you and there's the rest of the

00:08:29,689 --> 00:08:33,589
application so if you're familiar of

00:08:30,919 --> 00:08:35,120
doing things like RPC where you have

00:08:33,589 --> 00:08:36,800
something that's less trusted than

00:08:35,120 --> 00:08:39,430
something that you are a PC into for

00:08:36,800 --> 00:08:42,969
more trusted operation that's a very

00:08:39,430 --> 00:08:46,149
kind of model specifically for the open

00:08:42,969 --> 00:08:48,580
Enclave SDK we care that it is going to

00:08:46,149 --> 00:08:51,430
deal with these different kinds of tes

00:08:48,580 --> 00:08:53,290
on your behalf so imagine if there's a

00:08:51,430 --> 00:08:54,880
different platform in the future right

00:08:53,290 --> 00:08:56,709
now for example we are in the process of

00:08:54,880 --> 00:08:58,779
integrating arm trust zone as one of the

00:08:56,709 --> 00:09:00,399
things that you can automatically take

00:08:58,779 --> 00:09:02,920
an application that's written for the

00:09:00,399 --> 00:09:05,529
open on cliff SDK and run it against the

00:09:02,920 --> 00:09:07,330
Intel SGX SDK sorry the Intel SGX

00:09:05,529 --> 00:09:11,020
platform as well as the arm transform

00:09:07,330 --> 00:09:17,670
platform oh what's that question sorry

00:09:11,020 --> 00:09:17,670
no okay um and so so

00:09:24,680 --> 00:09:33,709
so for clarify that boundary

00:09:29,329 --> 00:09:35,990
establishment in what senses yeah yep so

00:09:33,709 --> 00:09:39,740
for example think about a and the CV

00:09:35,990 --> 00:09:41,689
model right so for this one we're

00:09:39,740 --> 00:09:45,259
currently much more it's a much lower

00:09:41,689 --> 00:09:47,689
level abstraction at this point the AMD

00:09:45,259 --> 00:09:49,490
SAV model I will point to my narcs

00:09:47,689 --> 00:09:51,110
because they that's something that they

00:09:49,490 --> 00:09:52,759
have explicitly tried to address I think

00:09:51,110 --> 00:09:56,779
si laws also try to address that space

00:09:52,759 --> 00:09:58,490
to a different extent but the primary

00:09:56,779 --> 00:10:00,350
model that we're dealing with today

00:09:58,490 --> 00:10:01,879
somebody because trust zone is one of

00:10:00,350 --> 00:10:04,790
the first other pieces that we're going

00:10:01,879 --> 00:10:08,540
for is really for restricted very small

00:10:04,790 --> 00:10:10,730
applications right so imagine the memory

00:10:08,540 --> 00:10:13,160
model for Intel SGX today for example a

00:10:10,730 --> 00:10:14,839
single process restricted memory address

00:10:13,160 --> 00:10:17,059
space that happens to live within the

00:10:14,839 --> 00:10:20,089
same process that's the untrusted host

00:10:17,059 --> 00:10:21,949
process right and so you have a benefit

00:10:20,089 --> 00:10:23,779
there potentially where there's a shared

00:10:21,949 --> 00:10:27,559
memory model where you have a higher

00:10:23,779 --> 00:10:29,300
trust sort of application running inside

00:10:27,559 --> 00:10:32,899
the Enclave that is access to both

00:10:29,300 --> 00:10:34,550
memory spaces right the VM model has

00:10:32,899 --> 00:10:36,559
other benefits that we'll talk about

00:10:34,550 --> 00:10:37,699
like you can basically there's more of a

00:10:36,559 --> 00:10:39,769
lifting ship approach right like you're

00:10:37,699 --> 00:10:41,689
running of the N and if you have the

00:10:39,769 --> 00:10:43,610
keys that basically allow you to encrypt

00:10:41,689 --> 00:10:45,519
in memory used by the VM then you're

00:10:43,610 --> 00:10:47,420
trusting fewer things in that regard

00:10:45,519 --> 00:10:48,649
we're trying to scope this down to

00:10:47,420 --> 00:10:50,749
something that's very very low level

00:10:48,649 --> 00:10:53,029
right now the SDK itself runs for C and

00:10:50,749 --> 00:10:54,889
C++ and it's primarily targeted people

00:10:53,029 --> 00:10:56,269
who really care about reducing the

00:10:54,889 --> 00:10:58,699
trusted computing base for their

00:10:56,269 --> 00:10:59,959
application so again you could take a

00:10:58,699 --> 00:11:02,089
whole application and run inside an

00:10:59,959 --> 00:11:03,800
environment but you still have a bunch

00:11:02,089 --> 00:11:06,019
of other security considerations there

00:11:03,800 --> 00:11:07,730
right are you using memory inappropriate

00:11:06,019 --> 00:11:11,439
way that doesn't involve side channels

00:11:07,730 --> 00:11:13,670
are you using a bunch of memory you know

00:11:11,439 --> 00:11:16,459
operations that then themselves become a

00:11:13,670 --> 00:11:18,799
side channel so the less things you have

00:11:16,459 --> 00:11:22,009
in this very constrained protected

00:11:18,799 --> 00:11:23,720
memory space the better and so at least

00:11:22,009 --> 00:11:25,670
in the current incarnation the open

00:11:23,720 --> 00:11:27,920
Enclave SDK sort of optimize words those

00:11:25,670 --> 00:11:28,999
sort of single process experiences we'll

00:11:27,920 --> 00:11:30,649
talk a little bit more about where it's

00:11:28,999 --> 00:11:32,569
going just in terms of building

00:11:30,649 --> 00:11:36,129
compatibility building additional

00:11:32,569 --> 00:11:38,180
supports POSIX and these other things so

00:11:36,129 --> 00:11:41,839
that's the first piece

00:11:38,180 --> 00:11:43,070
NOS lo lava sdk primarily sort of

00:11:41,839 --> 00:11:44,750
focused on just doing that integration

00:11:43,070 --> 00:11:46,820
with the different hardware providers

00:11:44,750 --> 00:11:49,520
which EES today the other thing of

00:11:46,820 --> 00:11:50,960
course is we want to wear at OSS summit

00:11:49,520 --> 00:11:53,240
because it is a fully open source

00:11:50,960 --> 00:11:54,620
project and that's really an important

00:11:53,240 --> 00:11:56,959
consideration right if you are gonna be

00:11:54,620 --> 00:11:58,670
writing two E's in the future you kind

00:11:56,959 --> 00:11:59,930
of want to know that all the code that

00:11:58,670 --> 00:12:00,580
goes in this application that you're

00:11:59,930 --> 00:12:03,110
running

00:12:00,580 --> 00:12:04,970
someone has looked at someone has has a

00:12:03,110 --> 00:12:07,010
bitterly audit every line of code that's

00:12:04,970 --> 00:12:08,959
in this thing that is handling your

00:12:07,010 --> 00:12:10,940
secrets supposedly in a trusted way and

00:12:08,959 --> 00:12:13,279
so there is there is definitely a

00:12:10,940 --> 00:12:15,520
dedication this project will remain open

00:12:13,279 --> 00:12:18,050
source it's made fully transparent and

00:12:15,520 --> 00:12:20,089
we now have a governance model and you

00:12:18,050 --> 00:12:22,370
will talk about in a bit where we are

00:12:20,089 --> 00:12:24,020
encouraging people to basically shape it

00:12:22,370 --> 00:12:27,529
like what do you need these things to do

00:12:24,020 --> 00:12:28,970
for your applications finally open

00:12:27,529 --> 00:12:29,870
Enclave SDKs are so a little bit unique

00:12:28,970 --> 00:12:31,250
in the sense that we're trying to

00:12:29,870 --> 00:12:34,160
support multiple operating systems as

00:12:31,250 --> 00:12:36,290
well so we are from Microsoft caveat

00:12:34,160 --> 00:12:38,420
given there so in addition to supporting

00:12:36,290 --> 00:12:40,730
Linux which is the primary operating

00:12:38,420 --> 00:12:43,160
system that's supported by this SDK we

00:12:40,730 --> 00:12:44,330
will also try to support Windows as an

00:12:43,160 --> 00:12:45,500
operating system that you can run these

00:12:44,330 --> 00:12:47,870
kinds of applications on from the whole

00:12:45,500 --> 00:12:49,400
side specifically also trying to support

00:12:47,870 --> 00:12:51,770
binary compatibility so if you've

00:12:49,400 --> 00:12:53,779
written in application and Linux or at

00:12:51,770 --> 00:12:55,520
least the trusted application portion of

00:12:53,779 --> 00:12:56,720
that you can just take that actually

00:12:55,520 --> 00:12:59,300
just run out on Windows we're going to

00:12:56,720 --> 00:13:00,350
recompile it so these are kinds of

00:12:59,300 --> 00:13:02,720
things that we're thinking of that space

00:13:00,350 --> 00:13:04,250
specifically for the arm trust zone side

00:13:02,720 --> 00:13:07,550
of things right now it's running on a

00:13:04,250 --> 00:13:09,200
soft specialized system for these kinds

00:13:07,550 --> 00:13:13,810
of trusted measurements called the opt e

00:13:09,200 --> 00:13:16,250
OS so this is basically sort of the

00:13:13,810 --> 00:13:21,529
principles that we're building this open

00:13:16,250 --> 00:13:22,850
or closed SDK under so as Simon pointed

00:13:21,529 --> 00:13:24,410
it out today was the first day of the

00:13:22,850 --> 00:13:26,300
open-source summit and I want to

00:13:24,410 --> 00:13:29,480
highlight the first part of the name of

00:13:26,300 --> 00:13:31,520
our SDK is the open Enclave SDK this has

00:13:29,480 --> 00:13:33,560
been publicly available since October

00:13:31,520 --> 00:13:36,110
last year it's published out on github

00:13:33,560 --> 00:13:37,850
under an MIT license we're working

00:13:36,110 --> 00:13:40,190
really hard to build the community we

00:13:37,850 --> 00:13:42,050
want this to be an SDK not just by us

00:13:40,190 --> 00:13:44,060
for people to use but by the users

00:13:42,050 --> 00:13:45,200
themselves to contribute with us and

00:13:44,060 --> 00:13:48,320
Alba shaped like the future of this

00:13:45,200 --> 00:13:49,459
project as of July which means that

00:13:48,320 --> 00:13:51,860
these numbers are a little out of date

00:13:49,459 --> 00:13:54,529
they were already over 2000 commit

00:13:51,860 --> 00:13:57,500
for I think now at six releases since we

00:13:54,529 --> 00:13:59,630
published it we've got 40 contributors

00:13:57,500 --> 00:14:01,880
mostly at Microsoft but they've been

00:13:59,630 --> 00:14:03,950
cross-team at least and we really would

00:14:01,880 --> 00:14:06,410
like that to expand to be cross company

00:14:03,950 --> 00:14:08,510
and just across the industry there's

00:14:06,410 --> 00:14:10,760
been activities that we've got 70 Forks

00:14:08,510 --> 00:14:13,100
and 210 stars I'm hoping that I can

00:14:10,760 --> 00:14:14,990
leave here tonight after two of these

00:14:13,100 --> 00:14:17,300
buffs and the mention of the fact that

00:14:14,990 --> 00:14:18,529
we'll be donating this to the intended

00:14:17,300 --> 00:14:20,029
to form confidential computing

00:14:18,529 --> 00:14:21,680
consortium and I want to see those

00:14:20,029 --> 00:14:23,000
numbers go up I think that was pretty

00:14:21,680 --> 00:14:25,790
good considering we win it pretty

00:14:23,000 --> 00:14:27,890
quietly last year and now here's the big

00:14:25,790 --> 00:14:30,079
loud announcement about these cool

00:14:27,890 --> 00:14:31,790
projects that are happening so this is a

00:14:30,079 --> 00:14:33,920
continuously active project we've got

00:14:31,790 --> 00:14:36,200
lots of commits coming in we have lots

00:14:33,920 --> 00:14:37,579
of people working on it we've performed

00:14:36,200 --> 00:14:39,560
like a community maintenance committee

00:14:37,579 --> 00:14:41,120
and we'll be having open community

00:14:39,560 --> 00:14:43,370
forums to speak in there's a gator

00:14:41,120 --> 00:14:45,200
channel you can hop in on we encourage

00:14:43,370 --> 00:14:47,390
people to open issues and pull requests

00:14:45,200 --> 00:14:49,399
with us there's a suggested design

00:14:47,390 --> 00:14:51,500
review document if you have a feature

00:14:49,399 --> 00:14:53,690
that you'd like to discuss you can fill

00:14:51,500 --> 00:14:56,240
out a full request with a template of

00:14:53,690 --> 00:14:58,250
what you want it to look like and who it

00:14:56,240 --> 00:15:00,440
would be for and we want to all these

00:14:58,250 --> 00:15:03,260
decisions in the open with the community

00:15:00,440 --> 00:15:08,959
and that is the open part of the open

00:15:03,260 --> 00:15:10,940
Enclave SDK here so also to emphasize

00:15:08,959 --> 00:15:13,220
the fact that we we are getting usage of

00:15:10,940 --> 00:15:15,470
the SDK just in terms of again sort of

00:15:13,220 --> 00:15:16,640
Microsoft so you'll see for example that

00:15:15,470 --> 00:15:18,320
there are other projects that have

00:15:16,640 --> 00:15:20,300
really taken dependency on the open

00:15:18,320 --> 00:15:22,310
Enclave SDK another one that you

00:15:20,300 --> 00:15:24,949
actually find on the public get up side

00:15:22,310 --> 00:15:27,410
is the confidential consortium framework

00:15:24,949 --> 00:15:29,870
so you go to github.com slash Microsoft

00:15:27,410 --> 00:15:30,860
slash CCF this is basically an

00:15:29,870 --> 00:15:34,100
application that allows you to build

00:15:30,860 --> 00:15:36,199
like open source consortium based frame

00:15:34,100 --> 00:15:38,300
works based on top of these trusted

00:15:36,199 --> 00:15:39,860
execution environments and then you can

00:15:38,300 --> 00:15:41,870
use for example and theory and based

00:15:39,860 --> 00:15:44,500
engine to build a blockchain application

00:15:41,870 --> 00:15:46,970
of your choice on top of these right so

00:15:44,500 --> 00:15:49,970
we really are positioning ourselves sort

00:15:46,970 --> 00:15:51,290
of as this is not the solution that we

00:15:49,970 --> 00:15:52,910
will push onto you for building your

00:15:51,290 --> 00:15:54,860
kinds of applications we're trying to

00:15:52,910 --> 00:15:56,180
enable people to build more interesting

00:15:54,860 --> 00:15:58,610
kinds of applications on top of this

00:15:56,180 --> 00:16:00,050
framework right and so we're really

00:15:58,610 --> 00:16:01,490
interested in the kinds of things that

00:16:00,050 --> 00:16:03,580
people do want to build on top of this

00:16:01,490 --> 00:16:09,279
and basically enabling you guys

00:16:03,580 --> 00:16:11,320
do that so I'm just gonna go very

00:16:09,279 --> 00:16:13,390
quickly over features if folks actually

00:16:11,320 --> 00:16:14,920
have specific interests in any one of

00:16:13,390 --> 00:16:18,160
these topics we're just gonna go right

00:16:14,920 --> 00:16:20,230
in the QA and after this demo well yeah

00:16:18,160 --> 00:16:21,760
if we can do the demo two folks one we

00:16:20,230 --> 00:16:23,920
can also do multiple demos if you want

00:16:21,760 --> 00:16:25,380
ready we have a very simple demo where

00:16:23,920 --> 00:16:28,209
you do more complicated ones if you want

00:16:25,380 --> 00:16:30,519
but less as I've mentioned open all play

00:16:28,209 --> 00:16:32,050
features basically we try and cover the

00:16:30,519 --> 00:16:33,730
basics of the force of four major

00:16:32,050 --> 00:16:36,279
operations we talked about just in terms

00:16:33,730 --> 00:16:37,720
of what we think are essential for you'd

00:16:36,279 --> 00:16:41,769
be able to write trust the execution

00:16:37,720 --> 00:16:44,290
environment applications with just sort

00:16:41,769 --> 00:16:46,300
of as an enabler we we come up with a

00:16:44,290 --> 00:16:48,220
set of basic libraries because you

00:16:46,300 --> 00:16:50,170
imagine if you try to keep applications

00:16:48,220 --> 00:16:52,000
say from the operating system you don't

00:16:50,170 --> 00:16:54,100
really get a lot of functionality by

00:16:52,000 --> 00:16:57,970
default like you don't get your Linux

00:16:54,100 --> 00:16:59,769
system C library by default right so the

00:16:57,970 --> 00:17:00,970
open Enclave SDK basically ships with a

00:16:59,769 --> 00:17:02,440
bunch of these libraries that you can

00:17:00,970 --> 00:17:04,510
use right off the bat to compile the

00:17:02,440 --> 00:17:06,880
applications for these trusted execution

00:17:04,510 --> 00:17:08,620
environments and for us we've chosen to

00:17:06,880 --> 00:17:10,809
use the embed TLS which is also an open

00:17:08,620 --> 00:17:12,910
source crypto library it's nice because

00:17:10,809 --> 00:17:16,809
it has a very small TCP it was optimized

00:17:12,910 --> 00:17:20,140
for embedded systems we have a basically

00:17:16,809 --> 00:17:23,490
a cut-down variation of the Lipsy the MU

00:17:20,140 --> 00:17:27,640
solid C library and we also support

00:17:23,490 --> 00:17:29,740
basically the LLVM the c++ library up to

00:17:27,640 --> 00:17:32,500
the c++ 11 standard we're trying to get

00:17:29,740 --> 00:17:34,090
it to supertruss 14 with caveats that

00:17:32,500 --> 00:17:36,580
there are specific subsets of

00:17:34,090 --> 00:17:38,950
functionality that we don't support for

00:17:36,580 --> 00:17:41,020
security reasons so if you want to write

00:17:38,950 --> 00:17:43,090
an application we're just not really

00:17:41,020 --> 00:17:44,800
going to support you opening sockets

00:17:43,090 --> 00:17:46,179
which will go out into the untrusted

00:17:44,800 --> 00:17:48,429
world that have to be managed by the

00:17:46,179 --> 00:17:50,890
operating system for example so some

00:17:48,429 --> 00:17:53,260
basic things like file i/o those are not

00:17:50,890 --> 00:17:55,360
included in the box with the open

00:17:53,260 --> 00:17:56,830
Enclave has to say right off the bat if

00:17:55,360 --> 00:17:57,940
you look at the next line you'll see

00:17:56,830 --> 00:18:00,070
that one of the other things we're

00:17:57,940 --> 00:18:01,809
trying to do is to basically provide a

00:18:00,070 --> 00:18:04,510
set of POSIX primitives on top of that

00:18:01,809 --> 00:18:06,490
and sort of expand that optionally right

00:18:04,510 --> 00:18:09,040
so one for the new modules that came up

00:18:06,490 --> 00:18:11,320
with the recent previous thought version

00:18:09,040 --> 00:18:14,919
release was essentially a file system

00:18:11,320 --> 00:18:16,610
and i/o module that you can then link

00:18:14,919 --> 00:18:18,920
into your application if you want

00:18:16,610 --> 00:18:20,210
shonali so if you have a thought if you

00:18:18,920 --> 00:18:22,820
have had application that really needs

00:18:20,210 --> 00:18:24,920
for example to write sealed data out to

00:18:22,820 --> 00:18:26,390
disk right you can choose the compile

00:18:24,920 --> 00:18:27,679
that into your application knowing that

00:18:26,390 --> 00:18:31,100
if you didn't need that then that's not

00:18:27,679 --> 00:18:32,330
part of a PCB at all so we expect to

00:18:31,100 --> 00:18:33,470
grow that as much as possible we

00:18:32,330 --> 00:18:36,290
understand that that's basicly a

00:18:33,470 --> 00:18:38,150
continuum of people who from you want to

00:18:36,290 --> 00:18:39,950
be super secure and we want the smallest

00:18:38,150 --> 00:18:42,890
possible footprint for this application

00:18:39,950 --> 00:18:44,390
through to we need quite a lot of pause

00:18:42,890 --> 00:18:45,049
except for this application of work

00:18:44,390 --> 00:18:47,179
right

00:18:45,049 --> 00:18:48,620
and so we're self trying to phase in

00:18:47,179 --> 00:18:51,440
different pieces of positive support

00:18:48,620 --> 00:18:53,000
potentially there are lots of different

00:18:51,440 --> 00:18:54,380
ways we can go with this support and

00:18:53,000 --> 00:18:55,669
therefore you know community

00:18:54,380 --> 00:18:57,200
participation would rather be would

00:18:55,669 --> 00:18:58,820
really helpful in that space if you have

00:18:57,200 --> 00:19:01,630
specific things you guys are interested

00:18:58,820 --> 00:19:04,130
in we would love to hear about that

00:19:01,630 --> 00:19:06,110
Cisco handling for structure is also

00:19:04,130 --> 00:19:08,299
kind of what we talked about primarily

00:19:06,110 --> 00:19:09,590
also we want to support people being

00:19:08,299 --> 00:19:10,820
able to deploy these things in

00:19:09,590 --> 00:19:13,520
containers right

00:19:10,820 --> 00:19:17,179
and so that's also working towards a

00:19:13,520 --> 00:19:18,740
piece of that the other last piece have

00:19:17,179 --> 00:19:20,210
also spoken about already which is we

00:19:18,740 --> 00:19:22,190
want to be able support this across the

00:19:20,210 --> 00:19:23,390
operating systems the upcoming one will

00:19:22,190 --> 00:19:24,830
be it'll be our first release where we

00:19:23,390 --> 00:19:26,270
have full experimental support for you

00:19:24,830 --> 00:19:30,169
to just build the application and just

00:19:26,270 --> 00:19:31,730
run it on a Windows host so that's

00:19:30,169 --> 00:19:36,290
basically it I'm going to turn it back

00:19:31,730 --> 00:19:37,549
to Andy now for a quick demo so the

00:19:36,290 --> 00:19:39,650
question for the audience how many of

00:19:37,549 --> 00:19:41,600
you are developers and would like to see

00:19:39,650 --> 00:19:43,940
what a simple application written

00:19:41,600 --> 00:19:46,160
against this SDK would look like yeah

00:19:43,940 --> 00:19:49,850
awesome lots of hands there so I'm gonna

00:19:46,160 --> 00:19:55,900
go ahead and minimize this and find the

00:19:49,850 --> 00:19:55,900
exit button for the slide there we go

00:19:56,530 --> 00:20:04,460
what happened yep past present future

00:20:00,320 --> 00:20:06,650
anyone who's interested so I'll start

00:20:04,460 --> 00:20:09,049
with just this is the github project it

00:20:06,650 --> 00:20:11,450
is Gabe comm slash open Enclave slash

00:20:09,049 --> 00:20:13,400
open Enclave there's a website if you're

00:20:11,450 --> 00:20:15,169
interested as well that kind of goes

00:20:13,400 --> 00:20:17,450
over the high-level overview

00:20:15,169 --> 00:20:19,400
most of which we've covered in this talk

00:20:17,450 --> 00:20:21,500
you're for you to take a look at the

00:20:19,400 --> 00:20:23,870
website at the github if you do go to

00:20:21,500 --> 00:20:26,210
the github I hope that this isn't easy

00:20:23,870 --> 00:20:29,480
to follow readme that should walk you

00:20:26,210 --> 00:20:29,840
through what the SDK is how you would

00:20:29,480 --> 00:20:32,870
get start

00:20:29,840 --> 00:20:34,429
if you have s gxk little hardware if you

00:20:32,870 --> 00:20:36,169
don't have SGX capable hardware we have

00:20:34,429 --> 00:20:37,700
a couple samples that do run in

00:20:36,169 --> 00:20:39,529
simulation mode so you could still like

00:20:37,700 --> 00:20:41,150
look at this and see what it would look

00:20:39,529 --> 00:20:42,500
like to write against it just you

00:20:41,150 --> 00:20:45,409
obviously wouldn't get any guarantees of

00:20:42,500 --> 00:20:49,630
encryption there and if you actually did

00:20:45,409 --> 00:20:52,640
want to see the demo that's uh maximize

00:20:49,630 --> 00:20:58,730
log back in live demo by the way not

00:20:52,640 --> 00:21:02,419
recorded that's me not part of the demo

00:20:58,730 --> 00:21:05,899
I promise I logged in before it just

00:21:02,419 --> 00:21:07,909
timed out so we have the hello world

00:21:05,899 --> 00:21:09,649
sample it's a pretty simple sample it's

00:21:07,909 --> 00:21:12,500
written in C it's kind of just the

00:21:09,649 --> 00:21:14,270
minimum code you need to understand what

00:21:12,500 --> 00:21:16,250
an open Enclave application is I think

00:21:14,270 --> 00:21:18,830
the best place to start is to look at

00:21:16,250 --> 00:21:22,789
what is the Enclave definition language

00:21:18,830 --> 00:21:25,520
file it's EDL the Enclave definition

00:21:22,789 --> 00:21:29,169
language is like a declared Ibsen deal

00:21:25,520 --> 00:21:32,419
what what a DSL stand for declarative no

00:21:29,169 --> 00:21:34,220
domain-specific language thank you and

00:21:32,419 --> 00:21:37,070
so this just kind of gives you an

00:21:34,220 --> 00:21:38,659
overview of what your AP eyes look like

00:21:37,070 --> 00:21:40,309
like what are your trusted functions

00:21:38,659 --> 00:21:42,649
what are your untrusted functions and

00:21:40,309 --> 00:21:44,270
this file is real code it gets processed

00:21:42,649 --> 00:21:45,620
through a narrator that generates all

00:21:44,270 --> 00:21:48,830
like the marshaling code for your

00:21:45,620 --> 00:21:51,529
application so let's look at the trusted

00:21:48,830 --> 00:21:53,750
side of this Enclave dot C is just a

00:21:51,529 --> 00:21:55,130
tiny little C file that implements the

00:21:53,750 --> 00:21:57,529
function that you saw a prototype there

00:21:55,130 --> 00:21:59,059
Enclave hello world it prints out that

00:21:57,529 --> 00:22:01,909
we were saying hello world from the

00:21:59,059 --> 00:22:05,450
Enclave from the house side it's another

00:22:01,909 --> 00:22:07,179
fairly simple C file most of this is and

00:22:05,450 --> 00:22:10,880
scroll back up here from the last demo

00:22:07,179 --> 00:22:12,950
the first part here is at the top of the

00:22:10,880 --> 00:22:15,590
screen there the implementation of a

00:22:12,950 --> 00:22:17,990
host side call-out from like the the o

00:22:15,590 --> 00:22:20,539
callback from The Enclave and the main

00:22:17,990 --> 00:22:22,130
function that is your host side

00:22:20,539 --> 00:22:23,899
application that you're running and

00:22:22,130 --> 00:22:26,390
inside you can see where you create an

00:22:23,899 --> 00:22:27,559
enclave using one of our API is the part

00:22:26,390 --> 00:22:29,779
that's generated for you just go ahead

00:22:27,559 --> 00:22:31,279
and call it and you call into the

00:22:29,779 --> 00:22:33,200
Enclave and you call the function that

00:22:31,279 --> 00:22:35,210
you described and compiled into an

00:22:33,200 --> 00:22:36,529
enclave so that's all of the code let's

00:22:35,210 --> 00:22:38,809
see if it works

00:22:36,529 --> 00:22:41,059
being that we're targeting C and C++

00:22:38,809 --> 00:22:42,710
code we have both like package config

00:22:41,059 --> 00:22:43,110
files if you use go new make and package

00:22:42,710 --> 00:22:45,540
confit

00:22:43,110 --> 00:22:46,770
we also have a seeming package that's

00:22:45,540 --> 00:22:48,630
installed when you install like one of

00:22:46,770 --> 00:22:51,960
our Debian packages and so you have a

00:22:48,630 --> 00:22:54,720
pretty simple see make file to actually

00:22:51,960 --> 00:22:56,370
look at how this would be built you

00:22:54,720 --> 00:22:58,620
import our package and it provides you

00:22:56,370 --> 00:23:01,110
some targets that handle all the very

00:22:58,620 --> 00:23:03,000
annoying compilation flags to build code

00:23:01,110 --> 00:23:06,179
targeted for an Enclave

00:23:03,000 --> 00:23:09,030
so you can dive into this the sample is

00:23:06,179 --> 00:23:11,580
available in the github actually looking

00:23:09,030 --> 00:23:15,090
at that Enclave build it's not too bad

00:23:11,580 --> 00:23:16,980
right we generate our code by calling

00:23:15,090 --> 00:23:18,780
the edge rater we create an executable

00:23:16,980 --> 00:23:20,070
called The Enclave given those source

00:23:18,780 --> 00:23:23,400
files that we generated in the source

00:23:20,070 --> 00:23:25,830
file we wrote and we link it to open

00:23:23,400 --> 00:23:27,960
Enclave libraries themselves does this

00:23:25,830 --> 00:23:29,270
all work let's find out so I'm gonna hop

00:23:27,960 --> 00:23:31,950
over to my shell here

00:23:29,270 --> 00:23:33,360
I'm gonna run a make clean just to prove

00:23:31,950 --> 00:23:36,750
that this is a live demo we're gonna

00:23:33,360 --> 00:23:39,090
look at it and see there is no files

00:23:36,750 --> 00:23:43,740
built yet so praying to the demo gods

00:23:39,090 --> 00:23:45,419
make a everything built that's great and

00:23:43,740 --> 00:23:49,650
we can go ahead and run it as well and

00:23:45,419 --> 00:23:51,720
see what happens and we did actually run

00:23:49,650 --> 00:23:53,880
the Enclave we signed the Enclave we

00:23:51,720 --> 00:23:55,440
called in to the Enclave that printed

00:23:53,880 --> 00:23:57,179
out hello world from the Enclave and

00:23:55,440 --> 00:23:59,160
then the Enclave called back into the

00:23:57,179 --> 00:24:02,610
house to print hello world and our

00:23:59,160 --> 00:24:03,570
application exited it really is I want

00:24:02,610 --> 00:24:05,220
to say as simple as that

00:24:03,570 --> 00:24:07,470
there's obviously a lot that goes into

00:24:05,220 --> 00:24:09,990
using an SDK like this but we are

00:24:07,470 --> 00:24:12,740
working hard to make it easy to use and

00:24:09,990 --> 00:24:12,740
easy to follow

00:24:16,820 --> 00:24:22,950
not in this demo I've seen some cool

00:24:20,850 --> 00:24:24,480
demos that like pretend that you have a

00:24:22,950 --> 00:24:26,160
key in the Enclave memory and then you

00:24:24,480 --> 00:24:27,870
dump out the memory that would be

00:24:26,160 --> 00:24:29,340
proving that the Intel side of this like

00:24:27,870 --> 00:24:31,110
the SGX instructions are working and

00:24:29,340 --> 00:24:32,820
that you have the memory that you dump

00:24:31,110 --> 00:24:34,620
in oh look you can't see the key and

00:24:32,820 --> 00:24:36,330
then you run into say a simulation mode

00:24:34,620 --> 00:24:38,490
and go oh there's a key those are some

00:24:36,330 --> 00:24:40,260
cool demos we could hook up a debugger

00:24:38,490 --> 00:24:42,360
and see that there's no way to access

00:24:40,260 --> 00:24:44,720
into that memory I could certainly try

00:24:42,360 --> 00:24:48,480
that it would be fun into the session

00:24:44,720 --> 00:24:49,410
but aha come after the session yeah we

00:24:48,480 --> 00:24:51,000
want it if you want to hook up the

00:24:49,410 --> 00:24:54,540
debugger to this with me I would be more

00:24:51,000 --> 00:24:55,890
than happy to it'd be fun so I guess we

00:24:54,540 --> 00:24:56,990
don't really need to go to the end of

00:24:55,890 --> 00:24:58,520
the slideshow but just

00:24:56,990 --> 00:25:19,460
back up questions who's got questions

00:24:58,520 --> 00:25:21,290
for us yes it's oh I think what you're

00:25:19,460 --> 00:25:30,770
asking is do we do we have to build any

00:25:21,290 --> 00:25:33,530
bridge code so correct

00:25:30,770 --> 00:25:35,210
so for well I can't speak for the

00:25:33,530 --> 00:25:37,250
opportunities of that because up tears a

00:25:35,210 --> 00:25:38,480
little bit we're in that you you have to

00:25:37,250 --> 00:25:39,770
recompile for a specific configuration

00:25:38,480 --> 00:25:41,840
that you need to do and I don't know

00:25:39,770 --> 00:25:43,940
whether they do anything special there

00:25:41,840 --> 00:25:46,100
my understand is they they don't because

00:25:43,940 --> 00:26:12,200
a lot of that is shimmed into the model

00:25:46,100 --> 00:26:14,690
that is on our side to adapt to that so

00:26:12,200 --> 00:26:16,520
for example we we take what Intel

00:26:14,690 --> 00:26:18,470
provides in terms of shares the out of

00:26:16,520 --> 00:26:20,510
tree driver today and here's the set of

00:26:18,470 --> 00:26:22,670
libraries that we'll use for at a

00:26:20,510 --> 00:26:25,760
station for example and we just take

00:26:22,670 --> 00:26:27,890
that as a dependency package right so we

00:26:25,760 --> 00:26:29,870
try as much as possible not to have to

00:26:27,890 --> 00:26:32,240
go and invasively modify existing

00:26:29,870 --> 00:26:35,120
project or existing code just to make

00:26:32,240 --> 00:26:36,920
the framework work it is intel has a set

00:26:35,120 --> 00:26:38,059
of things that they provide and we can

00:26:36,920 --> 00:26:39,830
just make use of that

00:26:38,059 --> 00:26:41,540
similarly on Windows on the window side

00:26:39,830 --> 00:26:42,740
it's because it is part the kernel so

00:26:41,540 --> 00:26:44,270
we're a little bit more restricted

00:26:42,740 --> 00:26:48,080
instead of functionality that's provided

00:26:44,270 --> 00:26:49,760
there again we don't try like we are an

00:26:48,080 --> 00:26:52,190
open source project we have no say in

00:26:49,760 --> 00:26:53,510
what windows kernel wants to do and so

00:26:52,190 --> 00:26:54,770
some some features for example they're

00:26:53,510 --> 00:26:57,740
available on Linux are not available

00:26:54,770 --> 00:26:59,630
Windows today like the Linux driver for

00:26:57,740 --> 00:27:02,410
Intel for example will do dynamic paging

00:26:59,630 --> 00:27:05,330
of a PC memory so you can technically

00:27:02,410 --> 00:27:06,730
unlimited memory space in your Enclave

00:27:05,330 --> 00:27:08,890
because they'll try and cage that out

00:27:06,730 --> 00:27:10,390
windows won't do that for you today

00:27:08,890 --> 00:27:11,590
right so there are there are so these

00:27:10,390 --> 00:27:14,530
differences that it just based on a

00:27:11,590 --> 00:27:51,190
platform that you use it's answered your

00:27:14,530 --> 00:27:52,900
question other questions yes so we don't

00:27:51,190 --> 00:27:55,240
actually give you guarantees if you go

00:27:52,900 --> 00:27:57,130
across that boundary today so it's

00:27:55,240 --> 00:28:01,090
basically a this call so says contract

00:27:57,130 --> 00:28:02,290
layer right and so we one of the things

00:28:01,090 --> 00:28:04,059
that we had when our roadmap was

00:28:02,290 --> 00:28:05,860
basically to implement a secure file

00:28:04,059 --> 00:28:07,510
system and in that particular model what

00:28:05,860 --> 00:28:11,320
we will do is we mount an entire file

00:28:07,510 --> 00:28:12,669
system and that would have everything or

00:28:11,320 --> 00:28:15,549
basically encrypted we were basically

00:28:12,669 --> 00:28:17,590
encrypt the file table as well all those

00:28:15,549 --> 00:28:19,500
things come with that and an option was

00:28:17,590 --> 00:28:22,330
basically to make an adapter for Intel's

00:28:19,500 --> 00:28:27,850
secure file system that's of an adapter

00:28:22,330 --> 00:28:30,070
piece right because right so sockets

00:28:27,850 --> 00:28:32,200
sockets for example we don't do anything

00:28:30,070 --> 00:28:33,820
special to serialize the data pack has

00:28:32,200 --> 00:28:36,040
to go across that it's like you want to

00:28:33,820 --> 00:28:39,669
sock it you get a socket you're on your

00:28:36,040 --> 00:28:41,410
own here right so we're certainly

00:28:39,669 --> 00:28:43,270
interested in sort of ways of making

00:28:41,410 --> 00:28:45,040
that there have actually been more

00:28:43,270 --> 00:28:46,630
research projects they talk about well

00:28:45,040 --> 00:28:47,980
we could sandbox it

00:28:46,630 --> 00:28:49,390
you could have an omelet and then within

00:28:47,980 --> 00:28:51,100
your clip there's a sandbox that handles

00:28:49,390 --> 00:28:54,400
essentially the rights out to untrusted

00:28:51,100 --> 00:28:58,059
memory space right that's still a little

00:28:54,400 --> 00:29:00,100
bit speculative for us so if folks are

00:28:58,059 --> 00:29:02,070
interested in that we would love to have

00:29:00,100 --> 00:29:06,520
deeper discussions about that as well

00:29:02,070 --> 00:29:08,110
but it's sort of a there's not been as

00:29:06,520 --> 00:29:10,570
compelling a use case for that and it

00:29:08,110 --> 00:29:13,240
says that people tend to want to use

00:29:10,570 --> 00:29:15,400
that and want to use a GE we sort of

00:29:13,240 --> 00:29:16,390
expect that you kind of know that you

00:29:15,400 --> 00:29:17,290
can have to encrypt your information

00:29:16,390 --> 00:29:19,360
you're gonna have to worry about these

00:29:17,290 --> 00:29:20,530
problems of serialization they're not

00:29:19,360 --> 00:29:21,530
gonna try and do this an interesting

00:29:20,530 --> 00:29:23,300
multi-threaded

00:29:21,530 --> 00:29:26,000
someone can hijack your file descriptor

00:29:23,300 --> 00:29:28,040
as you come so things of that sort it's

00:29:26,000 --> 00:29:30,830
it's an optional module right now

00:29:28,040 --> 00:29:33,560
because there is clearly elevated love

00:29:30,830 --> 00:30:00,140
of risk and developer knowledge for you

00:29:33,560 --> 00:30:02,090
to use that functionality it is it is

00:30:00,140 --> 00:30:04,600
the magical bucket of future working

00:30:02,090 --> 00:30:04,600
backlog

00:30:16,000 --> 00:30:19,770
[Laughter]

00:31:35,220 --> 00:31:51,130
stickers get on that I'm not gonna get

00:31:41,800 --> 00:31:52,780
that but yes I mean a lot of what we're

00:31:51,130 --> 00:31:54,460
trying to do with the confidential

00:31:52,780 --> 00:31:55,930
computing consortium really is to

00:31:54,460 --> 00:31:57,850
bootstrap this for the industry right

00:31:55,930 --> 00:32:00,280
like we've seen what the CNC F has done

00:31:57,850 --> 00:32:01,960
just in terms of getting a bunch of this

00:32:00,280 --> 00:32:04,570
technology sort of up and coming for

00:32:01,960 --> 00:32:05,860
just industry to use in general and this

00:32:04,570 --> 00:32:07,180
is really on sort of on the cusp of that

00:32:05,860 --> 00:32:08,410
like there's sort of different projects

00:32:07,180 --> 00:32:12,430
transit service slightly different

00:32:08,410 --> 00:32:14,350
models right now and the hope that this

00:32:12,430 --> 00:32:16,450
the exchange of all this information is

00:32:14,350 --> 00:32:18,010
going to make much better platforms for

00:32:16,450 --> 00:32:20,080
just everybody people to use in general

00:32:18,010 --> 00:32:21,400
one piece of software does not solve

00:32:20,080 --> 00:32:22,810
everyone's problems there should be a

00:32:21,400 --> 00:32:28,560
collaborative and open effort among all

00:32:22,810 --> 00:32:28,560
of us so more questions

00:32:31,010 --> 00:32:38,920
oh you're being too British man this

00:32:35,600 --> 00:32:38,920
guy's really done a full-on plug

00:33:40,350 --> 00:33:59,830
so for the cocktail so yes now for

00:33:58,300 --> 00:34:04,060
questions with a non wringer section of

00:33:59,830 --> 00:34:05,950
the audience yes

00:34:04,060 --> 00:34:07,540
anybody like folks who showed up here

00:34:05,950 --> 00:34:09,040
either you're really tired and just

00:34:07,540 --> 00:34:11,320
really needed to close the seat or

00:34:09,040 --> 00:34:13,540
you're curious about something and happy

00:34:11,320 --> 00:34:16,860
to answer any questions you have doesn't

00:34:13,540 --> 00:34:16,860
have to be able to open all clip SDK

00:34:18,450 --> 00:34:21,870
crickets crickets

00:34:26,700 --> 00:34:33,200
we're all talking about removing trust

00:34:30,450 --> 00:34:33,200
promises

00:35:44,230 --> 00:35:48,230
so they're couple of different pieces to

00:35:46,550 --> 00:35:50,000
this problem right so clearly

00:35:48,230 --> 00:35:51,650
open-source is is a major part of this

00:35:50,000 --> 00:35:53,540
because that very least you need to

00:35:51,650 --> 00:35:55,520
audit the code that you expect to be in

00:35:53,540 --> 00:35:58,640
there now the next question that falls

00:35:55,520 --> 00:36:00,860
is okay I think this is the code it's

00:35:58,640 --> 00:36:02,540
now some binary do I know what's in

00:36:00,860 --> 00:36:03,830
there right and there are a bunch of

00:36:02,540 --> 00:36:05,330
other conversations happening in this

00:36:03,830 --> 00:36:06,890
space right now because we've seen the

00:36:05,330 --> 00:36:08,930
supply chain attacks against putting on

00:36:06,890 --> 00:36:10,400
public open source projects where you

00:36:08,930 --> 00:36:12,370
really do care about things like how do

00:36:10,400 --> 00:36:15,590
you securely build this how do I do like

00:36:12,370 --> 00:36:19,940
full end-to-end reproducible bills

00:36:15,590 --> 00:36:22,430
secure builds and I can write exactly so

00:36:19,940 --> 00:36:23,450
so you know when I do a build or we give

00:36:22,430 --> 00:36:25,400
you for example a containerized

00:36:23,450 --> 00:36:27,230
environment like this is the source code

00:36:25,400 --> 00:36:29,690
these are the build tool chains right

00:36:27,230 --> 00:36:31,580
it's gonna produce this binary with this

00:36:29,690 --> 00:36:33,680
particular hash you can validate that on

00:36:31,580 --> 00:36:35,660
your own right so if we give you a drop

00:36:33,680 --> 00:36:37,340
in a Debian package and that IBM package

00:36:35,660 --> 00:36:39,380
happens I have this hash and you don't

00:36:37,340 --> 00:36:41,180
trust us go take the source code they

00:36:39,380 --> 00:36:42,710
expect it to Matt to go build in this

00:36:41,180 --> 00:36:44,810
environment it should produce exactly

00:36:42,710 --> 00:36:46,580
the same hash and there are some sort of

00:36:44,810 --> 00:36:48,320
courses you trust all the versions of

00:36:46,580 --> 00:36:52,140
the build chain tools and that one and

00:36:48,320 --> 00:37:15,300
all that and we're verify

00:36:52,140 --> 00:37:16,880
and then that's actually an interesting

00:37:15,300 --> 00:37:21,930
discussion I want to have you later

00:37:16,880 --> 00:37:24,030
because that has also been an honor but

00:37:21,930 --> 00:37:26,130
there are other types of things that

00:37:24,030 --> 00:37:28,440
we're looking at as well essentially for

00:37:26,130 --> 00:37:30,870
example static analysis of sort of

00:37:28,440 --> 00:37:32,130
runtime problems like bugs about this

00:37:30,870 --> 00:37:33,390
right you want to basically flush as

00:37:32,130 --> 00:37:35,790
many of those out and you know

00:37:33,390 --> 00:37:37,980
visualaudio it's the postman bug shallow

00:37:35,790 --> 00:37:40,350
but you know open source projects still

00:37:37,980 --> 00:37:41,490
get hit of CVS all the time so static

00:37:40,350 --> 00:37:42,960
analysis is another thing that were

00:37:41,490 --> 00:37:46,200
starting to invest a little bit more in

00:37:42,960 --> 00:37:48,450
just to be able to do like for example

00:37:46,200 --> 00:37:50,040
ER two chains out there like SEMO bunch

00:37:48,450 --> 00:37:52,620
of the decline verification tools so

00:37:50,040 --> 00:37:53,940
we've moved recently from GCC decline to

00:37:52,620 --> 00:37:56,760
be able to adopt for example wharf

00:37:53,940 --> 00:37:58,320
static verifiers we're starting to look

00:37:56,760 --> 00:38:00,090
at different build environments where

00:37:58,320 --> 00:38:02,580
it's kind of hard from an existing two

00:38:00,090 --> 00:38:05,430
chains on enclaves because all these tes

00:38:02,580 --> 00:38:07,530
because by default you can't look into a

00:38:05,430 --> 00:38:09,060
te or you need a special debugger

00:38:07,530 --> 00:38:10,350
contract to understand how you actually

00:38:09,060 --> 00:38:12,150
read the information out of this memory

00:38:10,350 --> 00:38:14,430
space so we're looking for example

00:38:12,150 --> 00:38:16,110
virtual enclaves or just software

00:38:14,430 --> 00:38:17,580
implementations of the Enclave so that

00:38:16,110 --> 00:38:19,500
you can run these tools and it'll give

00:38:17,580 --> 00:38:21,810
you a code coverage and you know things

00:38:19,500 --> 00:38:23,160
of that nature to get you the kind of

00:38:21,810 --> 00:38:24,630
assurance that you need for the quality

00:38:23,160 --> 00:38:33,570
of the cool that is actually running

00:38:24,630 --> 00:38:35,760
inside the same questions you'd ask

00:38:33,570 --> 00:38:38,060
about like an arcs and a silo as well

00:38:35,760 --> 00:38:38,060
right

00:38:54,830 --> 00:39:06,900
questions yes what form those plans take

00:39:05,100 --> 00:39:09,240
right now are a little bit up in the air

00:39:06,900 --> 00:39:10,440
so containerization has been has been

00:39:09,240 --> 00:39:11,220
mentioned is one of the things that we

00:39:10,440 --> 00:39:15,830
want to be able to do right so

00:39:11,220 --> 00:39:18,300
ultimately we understand what sorry well

00:39:15,830 --> 00:39:19,740
I'm an advocate of generating some brass

00:39:18,300 --> 00:39:23,310
bang bang that be going is something

00:39:19,740 --> 00:39:25,320
we've heard people ask about as well go

00:39:23,310 --> 00:39:27,810
Python Python it's actually been really

00:39:25,320 --> 00:40:06,690
big one I suspect see sharp because

00:39:27,810 --> 00:40:08,940
Microsoft so transformation of one one

00:40:06,690 --> 00:40:10,320
approach when I mentioned continuation

00:40:08,940 --> 00:40:11,700
for example one of the things we're

00:40:10,320 --> 00:40:12,870
looking at for example is from the

00:40:11,700 --> 00:40:14,430
bottom up we're looking at just

00:40:12,870 --> 00:40:16,830
supporting subsets of syscalls

00:40:14,430 --> 00:40:18,000
so to give you better compatibility from

00:40:16,830 --> 00:40:19,290
the top-down approach we're looking

00:40:18,000 --> 00:40:22,050
basically for example unique kernels

00:40:19,290 --> 00:40:24,390
library OSS right so if like I want to

00:40:22,050 --> 00:40:26,340
take you know a unique kernel and put it

00:40:24,390 --> 00:40:28,410
inside so that I can just run my

00:40:26,340 --> 00:40:30,300
application as if it has an operating

00:40:28,410 --> 00:40:31,800
system squatted that's also something

00:40:30,300 --> 00:40:33,150
exploring right now and that will

00:40:31,800 --> 00:40:36,240
support a range of runtimes once that's

00:40:33,150 --> 00:40:42,110
available that's that answer your

00:40:36,240 --> 00:40:42,110

YouTube URL: https://www.youtube.com/watch?v=AmFHuaXEjPg


