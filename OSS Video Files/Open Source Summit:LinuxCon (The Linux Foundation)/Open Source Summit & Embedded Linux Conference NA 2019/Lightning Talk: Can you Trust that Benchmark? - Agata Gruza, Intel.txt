Title: Lightning Talk: Can you Trust that Benchmark? - Agata Gruza, Intel
Publication date: 2019-09-16
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	Lightning Talk: Can you Trust that Benchmark? - Agata Gruza, Intel

Benchmarking is a way of uncovering what best possible performance is and how can be achieved. It helps understand bottlenecks and real limitations of your system. Optimizing benchmark is not an easy job. Did you ever ask yourself how do you know that benchmark numbers are correct? How do you validate your benchmark? What if you are measuring the wrong thing? Itâ€™s important to have those answers as data from benchmark have a huge impact on purchasing and strategic decisions.In this talk, Agata will walk you through an explanation of the benchmarking process, why is it so important to validate your data. She will also provide examples of bad optimization, and how to avoid common pitfalls.
Captions: 
	00:00:00,030 --> 00:00:03,510
good morning everyone I think my name is

00:00:02,850 --> 00:00:05,970
Agata gruza

00:00:03,510 --> 00:00:07,020
and performance lead at Intel and today

00:00:05,970 --> 00:00:09,900
I would like to talk with you about

00:00:07,020 --> 00:00:13,320
benchmarking why is it important and how

00:00:09,900 --> 00:00:15,540
to trust benchmark number so first what

00:00:13,320 --> 00:00:17,369
is benchmarking formally benchmarking in

00:00:15,540 --> 00:00:19,699
just running single applications single

00:00:17,369 --> 00:00:22,050
time but that's so much more

00:00:19,699 --> 00:00:24,180
benchmarking it's an ongoing process of

00:00:22,050 --> 00:00:26,099
identifying understanding and

00:00:24,180 --> 00:00:33,600
implementing best practice how to

00:00:26,099 --> 00:00:37,140
improve performance it's also it's also

00:00:33,600 --> 00:00:39,510
the way to find limitation of your

00:00:37,140 --> 00:00:42,180
benchmark before products gonna be

00:00:39,510 --> 00:00:45,360
released there are multiple

00:00:42,180 --> 00:00:47,640
misconception about benchmarking some of

00:00:45,360 --> 00:00:49,940
them on the slide benchmarking it's too

00:00:47,640 --> 00:00:52,469
expensive tariff or I'm not gonna do it

00:00:49,940 --> 00:00:55,020
benchmarking involves lots of work and I

00:00:52,469 --> 00:00:56,640
don't have time for that management and

00:00:55,020 --> 00:00:58,379
people in charge of making decision they

00:00:56,640 --> 00:01:02,670
don't understand the benchmark tariff or

00:00:58,379 --> 00:01:06,119
why should I bother I should only do

00:01:02,670 --> 00:01:08,909
benchmarking with the best our company

00:01:06,119 --> 00:01:10,860
it's too small and we don't have some

00:01:08,909 --> 00:01:14,220
practice in place it's working well

00:01:10,860 --> 00:01:17,189
tariffs or I don't need benchmarking all

00:01:14,220 --> 00:01:20,070
of that it's misconception and you

00:01:17,189 --> 00:01:22,409
should do benchmarking because making

00:01:20,070 --> 00:01:24,869
decision on benchmarking can impact your

00:01:22,409 --> 00:01:28,500
performance and you make decision that

00:01:24,869 --> 00:01:30,509
can financially impact you as well so

00:01:28,500 --> 00:01:33,150
how to build trust in the benchmark they

00:01:30,509 --> 00:01:36,299
are multiple factors on the slide they

00:01:33,150 --> 00:01:39,420
are the one that they are commonly used

00:01:36,299 --> 00:01:42,570
across all benchmarks what you shouldn't

00:01:39,420 --> 00:01:46,770
do you shouldn't use benchmark just

00:01:42,570 --> 00:01:49,920
because it's popular you shouldn't trust

00:01:46,770 --> 00:01:51,390
numbers without analysis you should when

00:01:49,920 --> 00:01:52,920
you run the benchmark you should check

00:01:51,390 --> 00:01:54,500
the numbers you should validate them you

00:01:52,920 --> 00:01:56,759
should make sure that they are correct

00:01:54,500 --> 00:01:59,189
you should make sure you test what you

00:01:56,759 --> 00:02:01,110
want to test for example you run

00:01:59,189 --> 00:02:05,280
benchmark that stress memory but you

00:02:01,110 --> 00:02:07,560
want to stress CPU you need to read the

00:02:05,280 --> 00:02:10,590
errors because errors can give you wrong

00:02:07,560 --> 00:02:13,110
conclusion for example you have service

00:02:10,590 --> 00:02:13,920
latency one second but when you dig

00:02:13,110 --> 00:02:16,260
deeper you

00:02:13,920 --> 00:02:18,660
so that all of these Latin seeds do to

00:02:16,260 --> 00:02:20,940
the firewall tariff or benchmark is fine

00:02:18,660 --> 00:02:24,450
but you wouldn't know that if you didn't

00:02:20,940 --> 00:02:25,980
do analysis change only one factor at

00:02:24,450 --> 00:02:28,110
the time why because when you change

00:02:25,980 --> 00:02:29,819
multiple factors you don't know which

00:02:28,110 --> 00:02:31,950
one actually impact performance some

00:02:29,819 --> 00:02:33,660
factors can increase performance some

00:02:31,950 --> 00:02:35,700
decrease and at the end did nothing

00:02:33,660 --> 00:02:41,160
change but you don't know that tariff or

00:02:35,700 --> 00:02:43,950
only one parameters at the time make

00:02:41,160 --> 00:02:46,080
sure and keep in mind that since

00:02:43,950 --> 00:02:49,020
sometimes benchmark have variability in

00:02:46,080 --> 00:02:50,820
data and benchmark has can have a run to

00:02:49,020 --> 00:02:52,920
run variance so just keep that in mind

00:02:50,820 --> 00:02:56,519
and that will check if that's one of

00:02:52,920 --> 00:02:58,560
your benchmark tuning benchmark improve

00:02:56,519 --> 00:03:01,380
your performance but that's very broad

00:02:58,560 --> 00:03:03,360
aspect and that's just another talk I

00:03:01,380 --> 00:03:06,540
just want you to keep in mind that you

00:03:03,360 --> 00:03:08,459
should tune your benchmark also define

00:03:06,540 --> 00:03:10,800
your number even if you want to improve

00:03:08,459 --> 00:03:13,980
your performance you need to know how

00:03:10,800 --> 00:03:16,470
much actually you can 5% is a doable is

00:03:13,980 --> 00:03:19,680
a 10x doable you need to know how much

00:03:16,470 --> 00:03:22,650
you can tune and make sure that run is

00:03:19,680 --> 00:03:24,989
reproducible always because sometimes

00:03:22,650 --> 00:03:27,959
you need to reproduce the bag you have

00:03:24,989 --> 00:03:31,590
or some other factors and year from now

00:03:27,959 --> 00:03:33,750
you need to run benchmark again I want

00:03:31,590 --> 00:03:36,900
to show you example how does it look

00:03:33,750 --> 00:03:39,030
when you don't benchmark and when you do

00:03:36,900 --> 00:03:40,650
benchmark on the left side is the image

00:03:39,030 --> 00:03:42,810
of the work local Cassandra

00:03:40,650 --> 00:03:44,940
all the information about that it's on

00:03:42,810 --> 00:03:47,070
the last right I want you to pay

00:03:44,940 --> 00:03:48,840
attention to that two things here the

00:03:47,070 --> 00:03:52,500
first is the green color on the chart

00:03:48,840 --> 00:03:56,040
it's a CPU utilization in the user space

00:03:52,500 --> 00:03:58,680
it's useful time made by CPU and on the

00:03:56,040 --> 00:04:01,140
bottom throughput throughput is the main

00:03:58,680 --> 00:04:02,519
metric that each benchmark use that's

00:04:01,140 --> 00:04:04,920
out of the box when you run the

00:04:02,519 --> 00:04:07,890
benchmark without any of the practice I

00:04:04,920 --> 00:04:10,350
mentioned and on the on the right when

00:04:07,890 --> 00:04:12,410
you use practice I mentioned the green

00:04:10,350 --> 00:04:15,090
bar increased dramatically and

00:04:12,410 --> 00:04:16,919
throughput also increased for thirty one

00:04:15,090 --> 00:04:19,709
thousand two eighty two which is great

00:04:16,919 --> 00:04:21,900
so all of this showing that when you

00:04:19,709 --> 00:04:24,240
trust your when you trust your benchmark

00:04:21,900 --> 00:04:27,330
you do the right analysis and you come

00:04:24,240 --> 00:04:30,300
up to the right conclusion

00:04:27,330 --> 00:04:32,729
takeaways don't assume benchmark running

00:04:30,300 --> 00:04:34,650
out of the box and don't assume that

00:04:32,729 --> 00:04:39,539
what you ran is correct always validate

00:04:34,650 --> 00:04:42,169
always do analysis make sure you take

00:04:39,539 --> 00:04:46,289
benchmark that suits your needs change

00:04:42,169 --> 00:04:48,810
only one parameter at the time make

00:04:46,289 --> 00:04:55,729
proper tuning and the very last one CPU

00:04:48,810 --> 00:04:55,729
utilization does matter thank you

00:04:56,090 --> 00:04:59,290

YouTube URL: https://www.youtube.com/watch?v=rboFtqyuWTI


