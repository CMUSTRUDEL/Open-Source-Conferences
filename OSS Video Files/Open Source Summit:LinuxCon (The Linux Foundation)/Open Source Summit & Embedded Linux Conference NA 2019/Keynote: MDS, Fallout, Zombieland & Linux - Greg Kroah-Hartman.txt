Title: Keynote: MDS, Fallout, Zombieland & Linux - Greg Kroah-Hartman
Publication date: 2019-08-28
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	Keynote: MDS, Fallout, Zombieland & Linux - Greg Kroah-Hartman, Linux Kernel Developer and Fellow, The Linux Foundation
Captions: 
	00:00:00,290 --> 00:00:08,910
hi I'm Greg girl I can do a whole talk

00:00:03,449 --> 00:00:10,110
in just a cons so last year I've been

00:00:08,910 --> 00:00:12,450
giving a talk about what happened to

00:00:10,110 --> 00:00:13,559
spell spectra and meltdown and this year

00:00:12,450 --> 00:00:15,030
I'm actually talking about what's

00:00:13,559 --> 00:00:17,160
happened in the past year it wasn't as

00:00:15,030 --> 00:00:21,660
publicized but it's just as important

00:00:17,160 --> 00:00:22,920
and just as nasty in a way so I gave

00:00:21,660 --> 00:00:23,369
this disclaimer last year I'll give it

00:00:22,920 --> 00:00:26,010
again

00:00:23,369 --> 00:00:28,080
this is I'm vastly oversimplifying all

00:00:26,010 --> 00:00:30,510
this I don't actually have code in this

00:00:28,080 --> 00:00:32,189
talk anymore there's a whole bunch of

00:00:30,510 --> 00:00:35,100
really really good details links to

00:00:32,189 --> 00:00:36,300
technical papers links to the academic

00:00:35,100 --> 00:00:38,040
papers that are written about this links

00:00:36,300 --> 00:00:39,750
to everything else in the presentation

00:00:38,040 --> 00:00:45,719
are links that are in here too as well

00:00:39,750 --> 00:00:48,600
so go download the presentation let's

00:00:45,719 --> 00:00:50,640
talk about this so MDS MDS was announced

00:00:48,600 --> 00:00:53,910
beginning of this year as yet another

00:00:50,640 --> 00:00:56,039
type of spectrum meltdown issues these

00:00:53,910 --> 00:00:58,949
are again Hardware bugs these are bugs

00:00:56,039 --> 00:01:00,960
in the CPUs themselves that the kernel

00:00:58,949 --> 00:01:02,760
is then responsible for fixing because

00:01:00,960 --> 00:01:05,250
it's hard to fix awful hard to fix

00:01:02,760 --> 00:01:07,020
hardware you have to buy the CPU life

00:01:05,250 --> 00:01:11,189
cycles or years long it'll take a while

00:01:07,020 --> 00:01:12,960
all these issues exploit how processors

00:01:11,189 --> 00:01:14,430
see in the future so in order to go

00:01:12,960 --> 00:01:16,500
faster you have to guess what's going to

00:01:14,430 --> 00:01:17,520
happen next the problem is when you

00:01:16,500 --> 00:01:19,530
guess what's going to happen next and

00:01:17,520 --> 00:01:22,740
you guess wrong you have to unwind and

00:01:19,530 --> 00:01:25,320
it turns out a lot of CPUs don't really

00:01:22,740 --> 00:01:26,880
unwind everything if you they did

00:01:25,320 --> 00:01:28,829
something and it affected the system and

00:01:26,880 --> 00:01:30,450
when you that happens you can take

00:01:28,829 --> 00:01:32,100
advantage of it and a side channel and

00:01:30,450 --> 00:01:33,119
get some information there's a whole

00:01:32,100 --> 00:01:34,500
bunch of different variants a lot of

00:01:33,119 --> 00:01:36,750
them got lumped under this name of MDS

00:01:34,500 --> 00:01:38,759
and like I said last year this is gonna

00:01:36,750 --> 00:01:40,470
happen for a very long time I've been

00:01:38,759 --> 00:01:42,479
giving this talk already for a number of

00:01:40,470 --> 00:01:44,520
months and I'll talk another issue just

00:01:42,479 --> 00:01:47,100
was publicly released two weeks ago I'll

00:01:44,520 --> 00:01:50,579
talk about and there will be more this

00:01:47,100 --> 00:01:53,520
is not going away so again all these are

00:01:50,579 --> 00:01:55,979
hardware issues MDS really only affects

00:01:53,520 --> 00:01:57,540
Intel chips no other processors are

00:01:55,979 --> 00:01:59,790
affected in order hardware companies are

00:01:57,540 --> 00:02:02,340
affected spectrum meltdown did hit all

00:01:59,790 --> 00:02:05,219
the other companies PowerPC AMD whatnot

00:02:02,340 --> 00:02:07,079
AMD was only half affected but all these

00:02:05,219 --> 00:02:09,149
are for Intel and there's all again the

00:02:07,079 --> 00:02:09,860
variant of the same problem about going

00:02:09,149 --> 00:02:11,900
ahead and

00:02:09,860 --> 00:02:14,210
unwinding and the only way you can fix

00:02:11,900 --> 00:02:16,490
this is if you fix in the kernel and you

00:02:14,210 --> 00:02:18,320
update your BIOS so you have to update

00:02:16,490 --> 00:02:20,930
your bias we have to work hand-in-hand

00:02:18,320 --> 00:02:23,210
they have to do things in the processor

00:02:20,930 --> 00:02:26,930
to fix this and if you don't update your

00:02:23,210 --> 00:02:28,820
bias you are still at risk so please

00:02:26,930 --> 00:02:30,680
update your bias it'll ask you to do so

00:02:28,820 --> 00:02:32,570
don't ignore that you have to do that

00:02:30,680 --> 00:02:35,360
and if your vendor is not providing you

00:02:32,570 --> 00:02:36,709
a BIOS update you are insecure so push

00:02:35,360 --> 00:02:39,560
back on your vendor they have to have

00:02:36,709 --> 00:02:41,720
this so MDS is again the same type of

00:02:39,560 --> 00:02:44,390
thing is there not a really extreme

00:02:41,720 --> 00:02:46,010
security security issue you can't write

00:02:44,390 --> 00:02:47,900
something to somebody else you can't

00:02:46,010 --> 00:02:49,370
cause something else to happen in the

00:02:47,900 --> 00:02:51,440
machine all you can do is read what

00:02:49,370 --> 00:02:52,700
somebody else did but the interesting

00:02:51,440 --> 00:02:55,820
thing about this is it'll cross the

00:02:52,700 --> 00:02:57,410
virtual machine boundary and in cloud

00:02:55,820 --> 00:02:59,150
computing you're running untrusted

00:02:57,410 --> 00:03:00,350
things in different virtual machines you

00:02:59,150 --> 00:03:02,420
don't know who else is running on your

00:03:00,350 --> 00:03:04,340
machine so this can be a real issue I

00:03:02,420 --> 00:03:06,290
can read a data of somebody else

00:03:04,340 --> 00:03:08,810
somebody else can read your data and

00:03:06,290 --> 00:03:11,000
that's not a good thing I can also cross

00:03:08,810 --> 00:03:12,590
in the user space you can run web

00:03:11,000 --> 00:03:13,580
browser and read other web browser tabs

00:03:12,590 --> 00:03:16,580
and things like that so that's

00:03:13,580 --> 00:03:18,650
exploitative ways as well the big thing

00:03:16,580 --> 00:03:20,810
about these MDS issues that is is

00:03:18,650 --> 00:03:22,820
exploits hyperthreading hyperthre ending

00:03:20,810 --> 00:03:25,549
is when you put multiple cores and they

00:03:22,820 --> 00:03:27,650
share a CPU cache so you share some

00:03:25,549 --> 00:03:28,970
caches and is a way that Intel and a

00:03:27,650 --> 00:03:32,750
number of other processor companies have

00:03:28,970 --> 00:03:35,090
done to give you a fake second CPU but

00:03:32,750 --> 00:03:36,739
when you start sharing resources it

00:03:35,090 --> 00:03:39,680
turns out you can see the resources that

00:03:36,739 --> 00:03:41,299
the other people are using again you

00:03:39,680 --> 00:03:42,890
share the TLB Xand they level one cache

00:03:41,299 --> 00:03:44,900
sometimes level two cache depends on

00:03:42,890 --> 00:03:48,880
your chip these are the problems that

00:03:44,900 --> 00:03:52,220
are issues here I want to call this out

00:03:48,880 --> 00:03:53,769
open BSD was right when the spectrum

00:03:52,220 --> 00:03:56,150
meltdown first came out they told people

00:03:53,769 --> 00:03:57,260
disable hyper threading we think there's

00:03:56,150 --> 00:03:59,410
gonna be more issues than the hitter

00:03:57,260 --> 00:04:01,459
they were right for the wrong reasons

00:03:59,410 --> 00:04:03,650
they didn't guess what was really gonna

00:04:01,459 --> 00:04:06,140
happen but they knew something could

00:04:03,650 --> 00:04:07,220
happen here and they took the heat they

00:04:06,140 --> 00:04:10,549
took the heat from a lot of people

00:04:07,220 --> 00:04:12,739
because when you disable a hyper CPU you

00:04:10,549 --> 00:04:14,480
are now removing a processor from your

00:04:12,739 --> 00:04:15,530
machine and it can affect performance

00:04:14,480 --> 00:04:18,349
big-time

00:04:15,530 --> 00:04:20,400
OpenBSD again repeated it in August

00:04:18,349 --> 00:04:23,550
please disable hyper-threading as people

00:04:20,400 --> 00:04:25,410
doing it and because of that they were

00:04:23,550 --> 00:04:26,190
not vulnerable almost not vulnerable

00:04:25,410 --> 00:04:28,919
there we had a little bit of

00:04:26,190 --> 00:04:30,000
vulnerability but they took away almost

00:04:28,919 --> 00:04:32,190
all the vulnerability because you

00:04:30,000 --> 00:04:35,220
disabled hyper-threading they chose

00:04:32,190 --> 00:04:36,600
security over performance and you have

00:04:35,220 --> 00:04:38,759
to give them credit for that they were

00:04:36,600 --> 00:04:40,050
ahead of the curve that way now all the

00:04:38,759 --> 00:04:41,520
links to shows say disabled

00:04:40,050 --> 00:04:43,110
hyper-threading on the other operating

00:04:41,520 --> 00:04:46,259
systems say disabled hyper-threading

00:04:43,110 --> 00:04:48,449
FreeBSD and a BSD even Windows you have

00:04:46,259 --> 00:04:50,539
to do that but open BSD was first so I

00:04:48,449 --> 00:04:54,120
gotta give them credit for

00:04:50,539 --> 00:04:56,789
so that was MDS here's the specifics of

00:04:54,120 --> 00:04:58,740
them one was called Riedel it was rogue

00:04:56,789 --> 00:05:01,500
in-flight data load there's a cool

00:04:58,740 --> 00:05:02,850
research paper about this inside CPUs or

00:05:01,500 --> 00:05:04,740
something called line fill buffers and

00:05:02,850 --> 00:05:06,150
load port CPUs do there's a whole nother

00:05:04,740 --> 00:05:07,830
machine way down underneath there that

00:05:06,150 --> 00:05:09,539
does all sorts of other complex things

00:05:07,830 --> 00:05:12,060
I'm learning way too much about I never

00:05:09,539 --> 00:05:13,530
wanted to know and these again you can

00:05:12,060 --> 00:05:16,620
steal the data across an application

00:05:13,530 --> 00:05:18,750
across the virtual machine and out of a

00:05:16,620 --> 00:05:20,729
secure Enclave and this is really unique

00:05:18,750 --> 00:05:22,259
Intel processors have this thing called

00:05:20,729 --> 00:05:24,120
a secure Enclave that it was supposed to

00:05:22,259 --> 00:05:27,180
be trusted nothing can ever get out of

00:05:24,120 --> 00:05:30,360
this at all it turns out everything

00:05:27,180 --> 00:05:32,910
could get out of these they were totally

00:05:30,360 --> 00:05:34,470
and completely broken we fix this by

00:05:32,910 --> 00:05:36,690
flushing some buffers in the CPU when

00:05:34,470 --> 00:05:38,940
you do some context flips and again a

00:05:36,690 --> 00:05:41,099
BIOS fix so we flushed buffers and it

00:05:38,940 --> 00:05:42,889
fixes it there's another paper came out

00:05:41,099 --> 00:05:45,360
called fallout this one had a cool logo

00:05:42,889 --> 00:05:47,849
again the CPU store buffers not load

00:05:45,360 --> 00:05:49,349
buffers same idea this one from user

00:05:47,849 --> 00:05:51,240
space you can read what the kernel is

00:05:49,349 --> 00:05:53,940
doing and normally that's not a big deal

00:05:51,240 --> 00:05:56,220
on if you own your machine but sometimes

00:05:53,940 --> 00:05:57,750
you can leave own read secrets like if

00:05:56,220 --> 00:05:59,400
you're in a container from somebody

00:05:57,750 --> 00:06:01,080
else's container or you can read secrets

00:05:59,400 --> 00:06:03,240
in the kernel where they have keys other

00:06:01,080 --> 00:06:05,460
issues like that not good at all it

00:06:03,240 --> 00:06:08,820
totally and completely broke the random

00:06:05,460 --> 00:06:11,070
criminal addressing and a a nice side

00:06:08,820 --> 00:06:14,550
effect of meltdown is it made it much

00:06:11,070 --> 00:06:16,440
easier to exploit this side effects it

00:06:14,550 --> 00:06:17,880
is bad so we fixed this by flushing the

00:06:16,440 --> 00:06:21,930
buffers in the CPU on every contact

00:06:17,880 --> 00:06:25,020
switch and a BIOS fix Zombieland best

00:06:21,930 --> 00:06:26,970
logo ever these guys have a really

00:06:25,020 --> 00:06:28,320
really cool demo nice little demo in the

00:06:26,970 --> 00:06:31,200
browser you can read another browsers

00:06:28,320 --> 00:06:32,050
tab good at marketing these academic

00:06:31,200 --> 00:06:34,900
people are really cool

00:06:32,050 --> 00:06:36,639
just like riedel again steal data across

00:06:34,900 --> 00:06:38,650
applications out of virtual machines out

00:06:36,639 --> 00:06:40,270
of secure enclaves another little

00:06:38,650 --> 00:06:42,639
different variant we fix it by flushing

00:06:40,270 --> 00:06:44,949
the buffers on the context switch that's

00:06:42,639 --> 00:06:46,180
fun and then there's a number of other

00:06:44,949 --> 00:06:48,819
ones all these got announced at the same

00:06:46,180 --> 00:06:51,729
time stored a leak meltdown you see they

00:06:48,819 --> 00:06:53,470
all again reading data across security

00:06:51,729 --> 00:06:55,840
boundaries places that you should not be

00:06:53,470 --> 00:06:56,229
able to break you can read eight across

00:06:55,840 --> 00:06:58,210
them

00:06:56,229 --> 00:07:04,360
we again fix it by flushing the buffers

00:06:58,210 --> 00:07:06,370
on the context switch no fun and then

00:07:04,360 --> 00:07:08,560
two weeks ago and yet another one came

00:07:06,370 --> 00:07:10,240
out swap to yes this one's a little bit

00:07:08,560 --> 00:07:12,819
different it's more like spectra was in

00:07:10,240 --> 00:07:15,940
the beginning and the best thing about

00:07:12,819 --> 00:07:21,250
this is Intel has documented all this

00:07:15,940 --> 00:07:23,380
stuff in their patents security

00:07:21,250 --> 00:07:25,330
researchers and academics is a great

00:07:23,380 --> 00:07:27,550
suite of weather academics who I think

00:07:25,330 --> 00:07:29,380
colors this one showing all the patents

00:07:27,550 --> 00:07:32,889
they printed out from Intel and how

00:07:29,380 --> 00:07:35,050
they're finding these issues um it's

00:07:32,889 --> 00:07:37,560
really funny so now you have all these

00:07:35,050 --> 00:07:41,889
professors out there reading patents

00:07:37,560 --> 00:07:43,360
there's going to be more again they

00:07:41,889 --> 00:07:45,400
found it reading patents so this is

00:07:43,360 --> 00:07:47,229
public knowledge one two five percent

00:07:45,400 --> 00:07:49,659
performance it's depending on your

00:07:47,229 --> 00:07:51,750
workload and we fix it by flushing the

00:07:49,659 --> 00:07:56,319
buffers fun stuff

00:07:51,750 --> 00:07:57,849
so all this flushing buffers is slow so

00:07:56,319 --> 00:07:59,740
all of a sudden the kernel has to do a

00:07:57,849 --> 00:08:02,440
whole bunch of more work that it used to

00:07:59,740 --> 00:08:04,210
never have to do that um we can't do

00:08:02,440 --> 00:08:05,620
anything about this there's a way in

00:08:04,210 --> 00:08:07,180
theory that we can do something by

00:08:05,620 --> 00:08:08,800
scheduling things in different ways and

00:08:07,180 --> 00:08:10,930
different processors or whatnot it's a

00:08:08,800 --> 00:08:12,310
wonderful academic theory there's nobody

00:08:10,930 --> 00:08:13,539
actually been able to do this in a way

00:08:12,310 --> 00:08:14,860
that works where there's some cool

00:08:13,539 --> 00:08:16,870
patches out there for it if people want

00:08:14,860 --> 00:08:19,389
to try it and work on it but so far it

00:08:16,870 --> 00:08:21,099
is not a viable solution the best way to

00:08:19,389 --> 00:08:23,289
do it is disable hyper threading and

00:08:21,099 --> 00:08:26,349
then notice almost all these issues go

00:08:23,289 --> 00:08:28,960
away so all the distros all the

00:08:26,349 --> 00:08:29,830
processor company all the Linux or all

00:08:28,960 --> 00:08:32,440
the operating system companies are

00:08:29,830 --> 00:08:34,450
saying disable hyper threading do it and

00:08:32,440 --> 00:08:36,190
that's the only way to solve this issue

00:08:34,450 --> 00:08:39,669
so if you're worried about this you have

00:08:36,190 --> 00:08:41,440
to do this not good but that's the only

00:08:39,669 --> 00:08:43,539
way to do this but how slow is this

00:08:41,440 --> 00:08:45,640
really and it all depends on your

00:08:43,539 --> 00:08:45,940
workload so when I do things I do two

00:08:45,640 --> 00:08:47,470
thing

00:08:45,940 --> 00:08:50,380
all the time besides reading email I

00:08:47,470 --> 00:08:52,000
build kernels and then I make a kernel

00:08:50,380 --> 00:08:55,450
and ship it off somewhere else when I

00:08:52,000 --> 00:08:59,260
build a kernel highly OS are highly i/o

00:08:55,450 --> 00:09:01,660
and CPU bound huge issues it is a 15

00:08:59,260 --> 00:09:03,220
percent decrease on my workload that's

00:09:01,660 --> 00:09:06,040
noticeable that's real

00:09:03,220 --> 00:09:07,390
if I leave hyper threading on with some

00:09:06,040 --> 00:09:08,890
of the with some of the performance

00:09:07,390 --> 00:09:10,300
issues we're still flushing some buffers

00:09:08,890 --> 00:09:12,640
are still a little bit of security

00:09:10,300 --> 00:09:14,860
issues it's only 2% down but that's not

00:09:12,640 --> 00:09:17,380
very good but when I create a kernel

00:09:14,860 --> 00:09:21,040
it's all one thread it's all i/o bound

00:09:17,380 --> 00:09:22,480
no impact on my performance at all so it

00:09:21,040 --> 00:09:24,910
all depends on your workload whether

00:09:22,480 --> 00:09:26,560
you'll see this or not run your workload

00:09:24,910 --> 00:09:29,080
everybody has a different workload run

00:09:26,560 --> 00:09:31,330
it and test it because now the problem

00:09:29,080 --> 00:09:33,820
in the kernel using Linux assists calls

00:09:31,330 --> 00:09:36,310
actually matter before Linux syscalls

00:09:33,820 --> 00:09:38,170
were the fastest thing out there now

00:09:36,310 --> 00:09:39,730
they're slow and now you need to worry

00:09:38,170 --> 00:09:40,990
about that depending on which syscalls

00:09:39,730 --> 00:09:42,340
you're doing if you're doing an iOS call

00:09:40,990 --> 00:09:43,570
now let's not slow because you're doing

00:09:42,340 --> 00:09:45,100
i/o and that's the slowest thing in the

00:09:43,570 --> 00:09:47,890
world but you're doing other syscalls

00:09:45,100 --> 00:09:48,460
they can be slow and that's a real

00:09:47,890 --> 00:09:50,940
problem

00:09:48,460 --> 00:09:52,840
everybody's workloads gonna be different

00:09:50,940 --> 00:09:54,580
there's nothing we can do about it so

00:09:52,840 --> 00:09:58,360
test your workload it's a little

00:09:54,580 --> 00:09:59,980
different so now you have a choice you

00:09:58,360 --> 00:10:01,390
have a choice whether you want to go for

00:09:59,980 --> 00:10:03,220
performance or whether you want to go

00:10:01,390 --> 00:10:06,700
for security and everybody's choosing

00:10:03,220 --> 00:10:08,830
differently my cloud provider shows

00:10:06,700 --> 00:10:10,440
performance I don't know if they're

00:10:08,830 --> 00:10:12,370
gonna be my cloud provider much longer

00:10:10,440 --> 00:10:13,990
the cool thing about the kernel is we

00:10:12,370 --> 00:10:16,240
export all this information and you can

00:10:13,990 --> 00:10:18,010
see below you what is happening in the

00:10:16,240 --> 00:10:19,750
virtual machine and on the hyper on the

00:10:18,010 --> 00:10:20,890
physical machine whether it has these

00:10:19,750 --> 00:10:22,660
updates whether the bias has been

00:10:20,890 --> 00:10:24,250
updated whether the patches have been

00:10:22,660 --> 00:10:25,750
made lower than you and your virtual

00:10:24,250 --> 00:10:27,970
machine your kernel will report that

00:10:25,750 --> 00:10:29,200
information to look at that and make

00:10:27,970 --> 00:10:31,210
your own decision what you want to do

00:10:29,200 --> 00:10:33,190
and tongue-and-cheek

00:10:31,210 --> 00:10:34,570
make linux fast again shows you the

00:10:33,190 --> 00:10:37,180
command line you can give to the kernel

00:10:34,570 --> 00:10:39,070
to disable all this stuff all my kernels

00:10:37,180 --> 00:10:40,240
go back to 15% this actually all my

00:10:39,070 --> 00:10:43,150
numbers my performance numbers were

00:10:40,240 --> 00:10:45,760
before swap to yes so add another 5% to

00:10:43,150 --> 00:10:48,460
my workload so now my kernels can be 20%

00:10:45,760 --> 00:10:51,730
faster back to what they were two years

00:10:48,460 --> 00:10:53,890
ago we call the kernel all new releases

00:10:51,730 --> 00:10:56,170
are usually faster now we're actually

00:10:53,890 --> 00:10:59,010
having a slower to fix hardware bugs

00:10:56,170 --> 00:11:00,240
it's not fun but look at what your

00:10:59,010 --> 00:11:02,340
I provided it everybody did something

00:11:00,240 --> 00:11:04,410
differently hopefully everybody will

00:11:02,340 --> 00:11:06,510
make the right decision for cloud

00:11:04,410 --> 00:11:10,950
providers release running untrusted

00:11:06,510 --> 00:11:12,150
virtual machines to be secure I hope so

00:11:10,950 --> 00:11:13,830
I talked about before respect her

00:11:12,150 --> 00:11:16,620
meltdown with Linux was a total and

00:11:13,830 --> 00:11:19,770
complete nightmare the way it was

00:11:16,620 --> 00:11:21,870
handled whatnot so for this we were much

00:11:19,770 --> 00:11:23,310
better we've done a lot better I'm we

00:11:21,870 --> 00:11:25,530
had kernel fixes for everybody

00:11:23,310 --> 00:11:27,420
available on the announcement date Intel

00:11:25,530 --> 00:11:29,850
did talk to us and we let us work

00:11:27,420 --> 00:11:31,050
together in a nice way it was much much

00:11:29,850 --> 00:11:32,670
better we worked with the other OS

00:11:31,050 --> 00:11:35,040
vendors we work with the BSD who work

00:11:32,670 --> 00:11:36,960
with Windows work was then we'd worked

00:11:35,040 --> 00:11:39,710
really well together much much better it

00:11:36,960 --> 00:11:43,140
still needs some work I will call out

00:11:39,710 --> 00:11:45,680
Debian was only notified two days in

00:11:43,140 --> 00:11:48,950
advance that was not acceptable for

00:11:45,680 --> 00:11:51,810
swaped yes debian wasn't notified at all

00:11:48,950 --> 00:11:54,120
so intellectually regrets there they've

00:11:51,810 --> 00:11:55,140
sent fix that and they are now knowing

00:11:54,120 --> 00:11:58,050
what's coming up next

00:11:55,140 --> 00:12:00,360
but debian worked their butt off and had

00:11:58,050 --> 00:12:03,480
things ready I got a call a very good

00:12:00,360 --> 00:12:06,180
job because it turns out 80% of the

00:12:03,480 --> 00:12:08,520
cloud systems out there are either

00:12:06,180 --> 00:12:10,980
running a kernel.org kernel or Debian

00:12:08,520 --> 00:12:12,750
and companies don't realize that anymore

00:12:10,980 --> 00:12:14,400
they think that the old model of the

00:12:12,750 --> 00:12:16,560
enterprise distros which their market

00:12:14,400 --> 00:12:18,630
has grown and they're still important

00:12:16,560 --> 00:12:21,090
but that's not the majority anymore the

00:12:18,630 --> 00:12:23,970
majority is Debian and curl'd org based

00:12:21,090 --> 00:12:25,290
kernels so like AWS has a kernel org

00:12:23,970 --> 00:12:27,930
based kernel that they use on their

00:12:25,290 --> 00:12:30,240
systems things like that you cannot

00:12:27,930 --> 00:12:32,400
ignore Debian that is not acceptable

00:12:30,240 --> 00:12:34,920
until it's getting better let's doing

00:12:32,400 --> 00:12:37,410
that and the thing is we release these

00:12:34,920 --> 00:12:39,030
things now a larger amount of kernel

00:12:37,410 --> 00:12:40,830
people can see it and we fixed another

00:12:39,030 --> 00:12:42,720
thing a week later and again keep

00:12:40,830 --> 00:12:44,100
updating we're still doing fixes we're

00:12:42,720 --> 00:12:46,050
still finding problems we're still

00:12:44,100 --> 00:12:48,180
fixing other issues it is not a matter

00:12:46,050 --> 00:12:50,300
of patch once and you're done you have

00:12:48,180 --> 00:12:52,740
to take these kernel updates every week

00:12:50,300 --> 00:12:54,240
always update your kernel and always

00:12:52,740 --> 00:12:56,730
update your bias that's the best way to

00:12:54,240 --> 00:12:58,410
do this and along these lines talk about

00:12:56,730 --> 00:13:00,600
security fixes overall for Linux you

00:12:58,410 --> 00:13:03,120
have to do this we update and push out a

00:13:00,600 --> 00:13:05,340
security fix at least once a week if we

00:13:03,120 --> 00:13:06,990
know it or not we're doing about 22

00:13:05,340 --> 00:13:09,180
patches a day and the security and the

00:13:06,990 --> 00:13:11,190
stable kernel releases those are all

00:13:09,180 --> 00:13:12,870
known bug fixes you need to take those

00:13:11,190 --> 00:13:14,870
sometimes we don't know if a bug

00:13:12,870 --> 00:13:17,070
security fixed or not until years later

00:13:14,870 --> 00:13:19,020
infamously there was a bug in code that

00:13:17,070 --> 00:13:20,250
I wrote and then fix that wasn't figured

00:13:19,020 --> 00:13:23,100
out till three years later that it was a

00:13:20,250 --> 00:13:25,529
security fix I didn't even know it so

00:13:23,100 --> 00:13:28,560
take these fixes and do it the kernel

00:13:25,529 --> 00:13:30,779
community mantra is a bug as a bug as a

00:13:28,560 --> 00:13:35,850
bug we fix it we push it out and we go

00:13:30,779 --> 00:13:38,730
and we don't get CDs CDs for the kernel

00:13:35,850 --> 00:13:39,810
mean nothing we don't assign them we

00:13:38,730 --> 00:13:43,020
don't do anything about them

00:13:39,810 --> 00:13:45,150
current you cannot rely on a CBE to say

00:13:43,020 --> 00:13:47,100
oh I got the CVD fix and okay for the

00:13:45,150 --> 00:13:49,050
kernel it doesn't matter because only a

00:13:47,100 --> 00:13:50,370
small fraction of the fixes for the

00:13:49,050 --> 00:13:52,230
kernel get a CV at all

00:13:50,370 --> 00:13:53,580
I will never apply for one there's

00:13:52,230 --> 00:13:55,020
issues with trying to revoke them when

00:13:53,580 --> 00:13:56,190
they're invalid and there's the

00:13:55,020 --> 00:13:58,320
nightmare for the kernel it doesn't

00:13:56,190 --> 00:14:00,210
matter it does not work well because we

00:13:58,320 --> 00:14:03,750
have fixes like spectre and meltdown had

00:14:00,210 --> 00:14:05,430
one CBE number but we had 80 patches and

00:14:03,750 --> 00:14:08,010
I just fixed or they were fixed by

00:14:05,430 --> 00:14:09,990
Gustavo more spectra patches last week

00:14:08,010 --> 00:14:12,810
so he's been fixing spectral patches for

00:14:09,990 --> 00:14:15,420
about two years now you can't say it's

00:14:12,810 --> 00:14:17,450
one CBE every you know here's the 200

00:14:15,420 --> 00:14:20,339
patches it does not work that well

00:14:17,450 --> 00:14:21,720
somebody is so there's a link you can

00:14:20,339 --> 00:14:23,850
look at my talk how the kernel security

00:14:21,720 --> 00:14:25,589
team works and why this matters and how

00:14:23,850 --> 00:14:27,089
we do this type of stuff read that

00:14:25,589 --> 00:14:29,190
document it's a big long white paper I

00:14:27,089 --> 00:14:31,920
wrote a long time ago it's really really

00:14:29,190 --> 00:14:33,510
relevant and another thing is we've

00:14:31,920 --> 00:14:36,240
looked at what see bees are actually

00:14:33,510 --> 00:14:38,040
issued for the kernel case cook did this

00:14:36,240 --> 00:14:41,940
research looked at 12 years of the

00:14:38,040 --> 00:14:43,589
Cardinal see bees the best is negative

00:14:41,940 --> 00:14:49,920
fixed state average fixed date of

00:14:43,589 --> 00:14:52,980
negative 100 days think about that for a

00:14:49,920 --> 00:14:54,420
second somebody's I wonder the CVE for

00:14:52,980 --> 00:14:55,920
this bug fix so I go get great they sign

00:14:54,420 --> 00:14:59,880
the CV you say what was the fixed it was

00:14:55,920 --> 00:15:02,279
fixed four months ago but people are

00:14:59,880 --> 00:15:03,990
abusing see bees to get around

00:15:02,279 --> 00:15:07,170
management problems with their companies

00:15:03,990 --> 00:15:08,400
they assign a CBE because this as the

00:15:07,170 --> 00:15:10,830
sea bees there they have to get the

00:15:08,400 --> 00:15:13,620
fixin instantly right now engineers are

00:15:10,830 --> 00:15:16,050
routing around the crazy policies that

00:15:13,620 --> 00:15:18,360
management is put in place that's what

00:15:16,050 --> 00:15:21,360
this is proof of I mean look at the

00:15:18,360 --> 00:15:24,329
negative three Hudson days I don't even

00:15:21,360 --> 00:15:25,769
know why that Stevie was assigned the

00:15:24,329 --> 00:15:27,929
standard deviation is what for

00:15:25,769 --> 00:15:29,279
hundreds over a year this data is all

00:15:27,929 --> 00:15:32,279
over the place

00:15:29,279 --> 00:15:34,199
it means nothing see bees and the

00:15:32,279 --> 00:15:35,759
colonel do not work I've sat down on the

00:15:34,199 --> 00:15:37,079
mitral people we're trying to figure out

00:15:35,759 --> 00:15:39,809
what to do

00:15:37,079 --> 00:15:41,129
Davis skeevies and the colonel does not

00:15:39,809 --> 00:15:43,019
matter at all open source and see bees

00:15:41,129 --> 00:15:44,459
from a lot of projects do not are not

00:15:43,019 --> 00:15:46,110
relevant that's not what CPUs were

00:15:44,459 --> 00:15:48,059
created for we're trying to come up with

00:15:46,110 --> 00:15:49,889
a way to have a better type of thing I

00:15:48,059 --> 00:15:51,689
talked about it with earlier at a

00:15:49,889 --> 00:15:53,160
conference this week here and I'm

00:15:51,689 --> 00:15:54,869
talking about in in Paris in another

00:15:53,160 --> 00:15:56,279
conference in a couple weeks we're

00:15:54,869 --> 00:15:58,790
coming up with some ways to handle this

00:15:56,279 --> 00:16:01,069
but for now do not handle this four CVEs

00:15:58,790 --> 00:16:03,449
there is a better way to do this and

00:16:01,069 --> 00:16:05,160
Google actually has documented this

00:16:03,449 --> 00:16:07,559
stuff they've proven this we always said

00:16:05,160 --> 00:16:08,970
the kernel of the stable releases they

00:16:07,559 --> 00:16:09,299
have all these fixes in before you need

00:16:08,970 --> 00:16:11,189
it

00:16:09,299 --> 00:16:12,629
and Google's like yeah yeah we don't

00:16:11,189 --> 00:16:14,730
believe you so we did the track the

00:16:12,629 --> 00:16:16,980
numbers the kernel or the kernel

00:16:14,730 --> 00:16:18,029
security team at Google goes around and

00:16:16,980 --> 00:16:20,399
finds all the problems that were

00:16:18,029 --> 00:16:22,170
reported that are found that are told to

00:16:20,399 --> 00:16:23,429
them that are announced them with their

00:16:22,170 --> 00:16:26,489
bug bounty program and then they tell

00:16:23,429 --> 00:16:30,420
Android hey go take these fixes for all

00:16:26,489 --> 00:16:32,129
of 2018 ninety-two over two hundred and

00:16:30,420 --> 00:16:35,670
one of all the problems were already

00:16:32,129 --> 00:16:37,230
fixed before they knew about it every

00:16:35,670 --> 00:16:39,240
single one of them was already fixed the

00:16:37,230 --> 00:16:40,799
only ones that were not fixed were ones

00:16:39,240 --> 00:16:43,199
in the code that they had added to their

00:16:40,799 --> 00:16:44,579
kernel that was not upstream or that was

00:16:43,199 --> 00:16:46,980
there because they back ported features

00:16:44,579 --> 00:16:50,040
incorrectly and they got it wrong so

00:16:46,980 --> 00:16:51,660
every single fix every single problem

00:16:50,040 --> 00:16:54,149
that they found that they were reported

00:16:51,660 --> 00:16:56,309
but they dug up was already fixed before

00:16:54,149 --> 00:16:58,379
they knew it and because of this Google

00:16:56,309 --> 00:17:00,990
is now mandating for Android devices you

00:16:58,379 --> 00:17:03,029
take the LTS releases pixel phones they

00:17:00,990 --> 00:17:04,919
update to the LTS release I'll call out

00:17:03,029 --> 00:17:06,990
Sony Sony's been doing this for the past

00:17:04,919 --> 00:17:09,149
year and a half at least update the

00:17:06,990 --> 00:17:11,789
kernel every two months or so with all

00:17:09,149 --> 00:17:13,649
news LTS they are safe and they're good

00:17:11,789 --> 00:17:15,539
essential another letter phone company

00:17:13,649 --> 00:17:17,669
really good about this they're doing the

00:17:15,539 --> 00:17:19,679
right work I seen the numbers so far

00:17:17,669 --> 00:17:21,839
from Google it's not public yet on the

00:17:19,679 --> 00:17:24,000
numbers so far we're over halfway there

00:17:21,839 --> 00:17:25,829
already in the 200s so they're actually

00:17:24,000 --> 00:17:27,360
finding more and more problems and again

00:17:25,829 --> 00:17:30,389
we're on track record to be the same

00:17:27,360 --> 00:17:33,270
percentage again so it is take LTS

00:17:30,389 --> 00:17:35,210
releases you'll be fine so I will say

00:17:33,270 --> 00:17:37,660
this I say this in other conferences

00:17:35,210 --> 00:17:40,000
please get this through your head

00:17:37,660 --> 00:17:41,950
if you're not using a distro colonel

00:17:40,000 --> 00:17:44,530
that you trust some dishes just more

00:17:41,950 --> 00:17:47,980
than others or stable a long-term kernel

00:17:44,530 --> 00:17:49,810
you have an insecure system that is the

00:17:47,980 --> 00:17:52,510
facts if you can't update your kernel

00:17:49,810 --> 00:17:55,240
and the device that's insecure I'll say

00:17:52,510 --> 00:17:59,740
that right about 5:00 so I gave this

00:17:55,240 --> 00:18:03,520
talk somebody in this room told me this

00:17:59,740 --> 00:18:07,750
quote somebody else has said that needs

00:18:03,520 --> 00:18:12,010
to be the title of my talk it's sad and

00:18:07,750 --> 00:18:14,260
you should feel bad we feel bad I'm the

00:18:12,010 --> 00:18:15,670
goal of a kernel is to paper over the

00:18:14,260 --> 00:18:17,710
bugs and hardware and make it look like

00:18:15,670 --> 00:18:19,330
a unified system to use your space you

00:18:17,710 --> 00:18:21,610
can run any kernel run any hardware

00:18:19,330 --> 00:18:22,990
that's the job of Linux we do that

00:18:21,610 --> 00:18:25,450
really well we doing that for 20 years

00:18:22,990 --> 00:18:27,340
the problem is when the hardware has

00:18:25,450 --> 00:18:29,710
bugs that breaks the model of how we

00:18:27,340 --> 00:18:31,570
thought they worked and you can't really

00:18:29,710 --> 00:18:33,220
fix it and we have to do things to work

00:18:31,570 --> 00:18:35,170
around those problems that directly

00:18:33,220 --> 00:18:37,630
impact you that's the whole way we can

00:18:35,170 --> 00:18:39,430
fix this stuff hardware has bugs we've

00:18:37,630 --> 00:18:41,170
always known about it but now we have to

00:18:39,430 --> 00:18:41,950
fix this and we're fixing this before

00:18:41,170 --> 00:18:44,680
you know about it

00:18:41,950 --> 00:18:47,260
specter meltdown Zombieland MDS they're

00:18:44,680 --> 00:18:49,540
all issues they're not as important than

00:18:47,260 --> 00:18:50,860
the whole security instance we push out

00:18:49,540 --> 00:18:52,960
fixes that can cause your machine to

00:18:50,860 --> 00:18:55,510
crash that can handle nasty network

00:18:52,960 --> 00:18:57,760
packets that do bad things we fix those

00:18:55,510 --> 00:18:59,290
bugs every single week and we push them

00:18:57,760 --> 00:19:01,900
out to the world and people take them

00:18:59,290 --> 00:19:04,090
update your kernel disable your hyper

00:19:01,900 --> 00:19:05,740
threading have to do that we are now on

00:19:04,090 --> 00:19:08,530
board with open BSD again they were

00:19:05,740 --> 00:19:09,640
right fully give them credit disable

00:19:08,530 --> 00:19:11,830
hyper sorting that's the only way you

00:19:09,640 --> 00:19:14,500
can have a secure system and update your

00:19:11,830 --> 00:19:17,150
kernel and update your BIOS and you have

00:19:14,500 --> 00:19:21,219
sat I'm sorry thank you very much

00:19:17,150 --> 00:19:21,219

YouTube URL: https://www.youtube.com/watch?v=kahLQVs9658


