Title: Static Partitioning Made Simple - Stefano Stabellini, Xilinx
Publication date: 2019-09-16
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	Static Partitioning Made Simple - Stefano Stabellini, Xilinx

Static partitioning is used to split an embedded system into multiple domains, each of them having access only to a portion of the hardware on the SoC. It is key to enable mixed-criticality scenarios, where a critical application, often based on a small RTOS, runs alongside a larger non-critical app, typically based on Linux. The two domains cannot interfere with each other.This talk will explain how to use Xen for static partitioning. It will introduce dom0-less, a new Xen feature written for the purpose. Dom0-less allows multiple VMs to start at boot time directly from the Xen hypervisor, decreasing boot times drastically. It makes it very easy to partition the system without virtualization overhead. Dom0 becomes unnecessary.This presentation will go into details on how to setup a Xen dom0-less system. It will show configuration examples and explain device assignment. The talk will discuss its implications for latency-sensitive and safety-critical environments.
Captions: 
	00:00:00,829 --> 00:00:07,560
all right hi everybody I'm gonna take it

00:00:05,609 --> 00:00:10,590
slow just in case some people might

00:00:07,560 --> 00:00:12,570
still want to come in so I'm gonna start

00:00:10,590 --> 00:00:15,089
by talking about what is a started

00:00:12,570 --> 00:00:18,300
partitioning something you might you

00:00:15,089 --> 00:00:21,270
probably are all familiar with so the

00:00:18,300 --> 00:00:23,699
idea is that on a modern SOC there is so

00:00:21,270 --> 00:00:26,130
much hardware that it's difficult to

00:00:23,699 --> 00:00:29,060
manage it all from a single system

00:00:26,130 --> 00:00:31,830
you wanna divide it up into different

00:00:29,060 --> 00:00:33,540
domains into different partitions and

00:00:31,830 --> 00:00:35,880
run different system on different

00:00:33,540 --> 00:00:38,280
partitions now in this example for

00:00:35,880 --> 00:00:41,640
instance this is excellence ultra scale

00:00:38,280 --> 00:00:44,460
plus and PSoC is a block diagram of it

00:00:41,640 --> 00:00:47,460
as you can see there is a lot of stuff

00:00:44,460 --> 00:00:51,329
in it for fully powered a faeces

00:00:47,460 --> 00:00:53,879
recourse a bunch of programmable logic a

00:00:51,329 --> 00:00:57,360
number of peripherals a graphic

00:00:53,879 --> 00:00:59,070
processor and much more this is you know

00:00:57,360 --> 00:01:02,190
from Xilinx but if you look at the block

00:00:59,070 --> 00:01:05,970
diagrams of other SOC vendors you see

00:01:02,190 --> 00:01:09,270
something you know comparable so the

00:01:05,970 --> 00:01:13,439
point is what we do is so much hardware

00:01:09,270 --> 00:01:15,810
with so much stuff so ideally what we

00:01:13,439 --> 00:01:18,810
would like to do is to you know draw

00:01:15,810 --> 00:01:23,580
circles nice circles around the block

00:01:18,810 --> 00:01:26,520
that you want to use and use them for

00:01:23,580 --> 00:01:28,560
with Linux with a certain whereas with

00:01:26,520 --> 00:01:30,810
whatever you like with a special setup

00:01:28,560 --> 00:01:33,210
to make use of these are the resources

00:01:30,810 --> 00:01:36,030
and then draw a different diagram a

00:01:33,210 --> 00:01:38,250
different a different circle around a

00:01:36,030 --> 00:01:40,530
different set of resources and do

00:01:38,250 --> 00:01:43,649
something differently there so in this

00:01:40,530 --> 00:01:47,540
almost random example I draw a red

00:01:43,649 --> 00:01:53,100
circle around a couple of the fe3 course

00:01:47,540 --> 00:01:56,250
some memory here and whoops and the PCIe

00:01:53,100 --> 00:01:59,130
controller and I draw red circles around

00:01:56,250 --> 00:02:01,500
the other took a physics recourse some

00:01:59,130 --> 00:02:05,899
more memory and a bunch of programmable

00:02:01,500 --> 00:02:09,030
logic underneath so again the idea is

00:02:05,899 --> 00:02:10,920
yes there is enough hardware so that you

00:02:09,030 --> 00:02:13,020
can run independently

00:02:10,920 --> 00:02:14,760
everything that you need separately so

00:02:13,020 --> 00:02:16,920
they don't really need to cram

00:02:14,760 --> 00:02:24,319
everything together on a single system

00:02:16,920 --> 00:02:27,230
anymore so why why is desirable to

00:02:24,319 --> 00:02:30,630
statically partition the system that way

00:02:27,230 --> 00:02:33,060
so there are a number of reasons I'm

00:02:30,630 --> 00:02:36,959
gonna go through the top ones or the one

00:02:33,060 --> 00:02:39,390
I am aware of but I think mixed

00:02:36,959 --> 00:02:42,030
criticality is really the chief concept

00:02:39,390 --> 00:02:44,610
to understand so typically in most

00:02:42,030 --> 00:02:47,010
people across industry and there was a

00:02:44,610 --> 00:02:49,350
very nice talk earlier on from the BMW

00:02:47,010 --> 00:02:51,569
from the saying you know each industry

00:02:49,350 --> 00:02:54,209
is actually quite different and that is

00:02:51,569 --> 00:02:56,790
very true I find so there are some

00:02:54,209 --> 00:02:59,910
commonalities across industries and one

00:02:56,790 --> 00:03:02,220
that is common across many is mixed

00:02:59,910 --> 00:03:04,019
criticality meaning that the resulting

00:03:02,220 --> 00:03:06,870
something that is very critical that you

00:03:04,019 --> 00:03:09,600
wanna run and something that is far less

00:03:06,870 --> 00:03:11,880
critical obviously different industries

00:03:09,600 --> 00:03:14,730
can a very different example of this so

00:03:11,880 --> 00:03:18,690
I've seen for instance in avionics the

00:03:14,730 --> 00:03:20,459
critical application is the pilot in

00:03:18,690 --> 00:03:22,440
software for your drone and the

00:03:20,459 --> 00:03:26,670
non-critical optic application is the

00:03:22,440 --> 00:03:29,340
control path in automotive the critical

00:03:26,670 --> 00:03:32,100
application could be the software that

00:03:29,340 --> 00:03:33,900
takes as an input the rearview camera

00:03:32,100 --> 00:03:36,390
stream that you look at when you back

00:03:33,900 --> 00:03:39,390
wearable when you're backing out and the

00:03:36,390 --> 00:03:42,420
non-critical could be just the UI in

00:03:39,390 --> 00:03:45,239
industrial the critical component could

00:03:42,420 --> 00:03:47,250
be the software that is controlling the

00:03:45,239 --> 00:03:49,250
robotic arm and the non-critical

00:03:47,250 --> 00:03:51,269
software could be the user interface

00:03:49,250 --> 00:03:54,930
something connected to the internet

00:03:51,269 --> 00:03:57,780
doing statistics and things like that so

00:03:54,930 --> 00:04:00,450
in all these scenarios the critical and

00:03:57,780 --> 00:04:02,430
the non-critical software is desirable

00:04:00,450 --> 00:04:04,920
for them to coexist on the single board

00:04:02,430 --> 00:04:07,170
because I have as we have seen you know

00:04:04,920 --> 00:04:09,450
at least this board and sure many others

00:04:07,170 --> 00:04:11,819
I have definitely enough hardware to run

00:04:09,450 --> 00:04:14,700
them both but these are two completely

00:04:11,819 --> 00:04:18,060
different environments developed

00:04:14,700 --> 00:04:20,400
differently even if they are the same

00:04:18,060 --> 00:04:22,349
operas are both Linux typically is a

00:04:20,400 --> 00:04:23,240
critical is non Linux but even if you

00:04:22,349 --> 00:04:25,130
was layin up say we

00:04:23,240 --> 00:04:26,810
be different kernels developed

00:04:25,130 --> 00:04:28,849
differently different update schedules

00:04:26,810 --> 00:04:31,130
different providers one might be R and

00:04:28,849 --> 00:04:34,099
RT Linux kernels the other one might not

00:04:31,130 --> 00:04:36,470
be an RT Linux kernel so very very

00:04:34,099 --> 00:04:38,180
different environments we static

00:04:36,470 --> 00:04:41,539
partitioning you can run both of them

00:04:38,180 --> 00:04:46,280
together but independently on different

00:04:41,539 --> 00:04:48,349
domains on your own your SOC that brings

00:04:46,280 --> 00:04:51,199
me to the next topic which is safety so

00:04:48,349 --> 00:04:54,340
the criticals application has often not

00:04:51,199 --> 00:04:58,030
always but often some safety

00:04:54,340 --> 00:05:01,310
requirements so in the industrial case

00:04:58,030 --> 00:05:04,130
if the critical application fails to

00:05:01,310 --> 00:05:06,139
control the robotic arm properly the

00:05:04,130 --> 00:05:08,569
robotic arm is weighing around and hits

00:05:06,139 --> 00:05:11,090
some of the worker right so there are

00:05:08,569 --> 00:05:13,729
there is actually often a safety concern

00:05:11,090 --> 00:05:16,009
related to people and when that is the

00:05:13,729 --> 00:05:19,610
case there are certification involved

00:05:16,009 --> 00:05:22,280
which is a very big topic of course so

00:05:19,610 --> 00:05:25,430
in these cases the applications that are

00:05:22,280 --> 00:05:28,159
safety a safety requirement definitely

00:05:25,430 --> 00:05:30,169
is a great idea to keep it separate from

00:05:28,159 --> 00:05:32,810
the one that does not that's non safety

00:05:30,169 --> 00:05:35,630
critical because the last thing you want

00:05:32,810 --> 00:05:39,050
is a non safety critical environment to

00:05:35,630 --> 00:05:41,240
compromise to affect in any way your

00:05:39,050 --> 00:05:44,060
safety environment and that goes across

00:05:41,240 --> 00:05:46,789
the board is not just security but it's

00:05:44,060 --> 00:05:48,889
also isolation the performance level so

00:05:46,789 --> 00:05:51,440
the non-critical application should not

00:05:48,889 --> 00:05:53,539
be able to affect the performance of the

00:05:51,440 --> 00:05:55,909
critical application in any way it was

00:05:53,539 --> 00:05:59,060
internal CPU but also in terms of the RQ

00:05:55,909 --> 00:06:01,699
latency and everything else security

00:05:59,060 --> 00:06:03,259
like obviously like critical and

00:06:01,699 --> 00:06:05,560
non-critical application typically a

00:06:03,259 --> 00:06:08,240
very different security update schedules

00:06:05,560 --> 00:06:10,340
different they might be develop on on

00:06:08,240 --> 00:06:13,449
different classes they might just have

00:06:10,340 --> 00:06:16,190
different security policies real time

00:06:13,449 --> 00:06:19,069
the critical application almost always

00:06:16,190 --> 00:06:21,979
has real some sort of real time

00:06:19,069 --> 00:06:25,849
requirements some RQ latency

00:06:21,979 --> 00:06:28,520
requirements and even non safety

00:06:25,849 --> 00:06:29,870
critical app often have some real RQ

00:06:28,520 --> 00:06:32,510
latency requirement they need to be

00:06:29,870 --> 00:06:35,089
respected by partitioning the system

00:06:32,510 --> 00:06:36,480
splitting it up cleanly you can

00:06:35,089 --> 00:06:40,410
guarantee this

00:06:36,480 --> 00:06:42,690
real time requirements even if one of

00:06:40,410 --> 00:06:44,660
the two systems have not has not really

00:06:42,690 --> 00:06:51,120
been developed against any real-time

00:06:44,660 --> 00:06:52,920
properties forth isolation so almost

00:06:51,120 --> 00:06:54,990
always in my experience with what I've

00:06:52,920 --> 00:06:57,930
seen one of the first four points

00:06:54,990 --> 00:07:02,040
typically applies but even if none of

00:06:57,930 --> 00:07:04,950
them apply it's still a good series a

00:07:02,040 --> 00:07:07,200
good software development policy to not

00:07:04,950 --> 00:07:09,810
put all your eggs in one basket right so

00:07:07,200 --> 00:07:12,090
so to separate the application in a way

00:07:09,810 --> 00:07:14,720
that they are only run with the least

00:07:12,090 --> 00:07:18,090
amount of privilege to do their job and

00:07:14,720 --> 00:07:21,240
so that if they crash the only thing

00:07:18,090 --> 00:07:23,960
that is compromised is the functionality

00:07:21,240 --> 00:07:26,430
of that application not the old system

00:07:23,960 --> 00:07:28,110
so if you do start the partitioning you

00:07:26,430 --> 00:07:30,300
can develop a system that works exactly

00:07:28,110 --> 00:07:33,870
like that so each partition is separate

00:07:30,300 --> 00:07:35,250
is isolated and each application is only

00:07:33,870 --> 00:07:38,670
privileged enough to do his own thing

00:07:35,250 --> 00:07:41,880
it's partition allows it only to do one

00:07:38,670 --> 00:07:45,870
thing and if he crashes the crash is

00:07:41,880 --> 00:07:48,270
contained within the partition multiple

00:07:45,870 --> 00:07:50,150
oasis well that's the simplest of them

00:07:48,270 --> 00:07:52,920
all if you have more than one OS

00:07:50,150 --> 00:07:56,880
obviously typically you need to run them

00:07:52,920 --> 00:07:59,730
in separate partitions so how do we how

00:07:56,880 --> 00:08:03,810
do we deploy or developer a static

00:07:59,730 --> 00:08:08,070
partitioning solution so the goal here

00:08:03,810 --> 00:08:10,320
is what I try to achieve is to use them

00:08:08,070 --> 00:08:12,900
to set up a static partitioning

00:08:10,320 --> 00:08:15,840
environment now this looks good on paper

00:08:12,900 --> 00:08:17,580
because exam is a type 1 hypervisor

00:08:15,840 --> 00:08:21,420
actually following from the previous

00:08:17,580 --> 00:08:24,780
talk is a microkernel in fact so it it

00:08:21,420 --> 00:08:26,940
it's very small it starts on the highest

00:08:24,780 --> 00:08:29,190
privilege level so it should have it

00:08:26,940 --> 00:08:31,890
does I have the capability to set up all

00:08:29,190 --> 00:08:34,680
the system the whole system with each

00:08:31,890 --> 00:08:38,120
domain the right amount of privilege

00:08:34,680 --> 00:08:40,440
that he needs and dedicated CPU cores

00:08:38,120 --> 00:08:44,280
dedicated memory dedicated harder

00:08:40,440 --> 00:08:49,210
resources guaranteed req latency they

00:08:44,280 --> 00:08:53,560
were needed just as I as I explained

00:08:49,210 --> 00:08:57,100
in theory in practice is not quite like

00:08:53,560 --> 00:08:58,390
that it's close but not quite quite as

00:08:57,100 --> 00:09:03,670
as good

00:08:58,390 --> 00:09:05,860
why because yes Zen is definitely

00:09:03,670 --> 00:09:08,050
running in the is privileged mode start

00:09:05,860 --> 00:09:10,720
first so if you'd be able to do all the

00:09:08,050 --> 00:09:13,510
partitioning the way we like but in

00:09:10,720 --> 00:09:17,050
practice the way it has been used so far

00:09:13,510 --> 00:09:17,680
all these years is to start doomsy row

00:09:17,050 --> 00:09:19,660
first

00:09:17,680 --> 00:09:22,800
what is is done zero them zero is a

00:09:19,660 --> 00:09:25,990
special vm which is typically Linux

00:09:22,800 --> 00:09:28,180
which is privileged so if you can do

00:09:25,990 --> 00:09:30,550
privileged operation from it like

00:09:28,180 --> 00:09:32,860
starting all the VM stopping all the VMS

00:09:30,550 --> 00:09:36,880
doing all sort of stuff rebooting the

00:09:32,860 --> 00:09:39,220
old machine and so on now well what does

00:09:36,880 --> 00:09:41,410
it mean first well it means a number of

00:09:39,220 --> 00:09:44,380
things so you could still set up your

00:09:41,410 --> 00:09:46,210
system from them zero but it doesn't

00:09:44,380 --> 00:09:49,770
look quite as good as this does it and

00:09:46,210 --> 00:09:53,020
and also there are actual concrete

00:09:49,770 --> 00:09:55,750
consequences of having domes ero so this

00:09:53,020 --> 00:09:58,480
is a at least non comprehensive list of

00:09:55,750 --> 00:10:00,580
consequences of having them zero so one

00:09:58,480 --> 00:10:03,400
consequence is simply well I start from

00:10:00,580 --> 00:10:06,310
the easy one you have one more partition

00:10:03,400 --> 00:10:08,820
in your system right so if you don't

00:10:06,310 --> 00:10:11,860
need if you don't need a Linux system

00:10:08,820 --> 00:10:14,020
why should you write this is one more

00:10:11,860 --> 00:10:15,730
partition that is using resources if

00:10:14,020 --> 00:10:18,520
nothing else is going to use power right

00:10:15,730 --> 00:10:20,620
so you don't need that secondly this is

00:10:18,520 --> 00:10:22,480
privileged so you have one has to be

00:10:20,620 --> 00:10:24,610
very careful what it puts into zero

00:10:22,480 --> 00:10:26,140
because well them Jiro is pretty much

00:10:24,610 --> 00:10:29,350
the keys to the castle right so you

00:10:26,140 --> 00:10:32,080
cannot really put your you know the

00:10:29,350 --> 00:10:35,350
least privileged application in the Miro

00:10:32,080 --> 00:10:37,810
it wouldn't be a good idea there are

00:10:35,350 --> 00:10:40,240
other consequences things the worst one

00:10:37,810 --> 00:10:42,430
is probably the boot time let's say that

00:10:40,240 --> 00:10:45,550
what you care about is your critical

00:10:42,430 --> 00:10:47,530
application that you wanna put in yet in

00:10:45,550 --> 00:10:49,930
the yellow domain the yellow partition

00:10:47,530 --> 00:10:51,850
or yellow VM you wanna call it so what

00:10:49,930 --> 00:10:55,050
you care about is a startup time of your

00:10:51,850 --> 00:10:58,420
yellow app so wisdom zero in the system

00:10:55,050 --> 00:11:00,580
you have to put Zen well there's more

00:10:58,420 --> 00:11:02,230
and then quick fine but then you need to

00:11:00,580 --> 00:11:02,920
put it on zero kernel which again

00:11:02,230 --> 00:11:05,589
typically

00:11:02,920 --> 00:11:07,959
knocks the dumb zero userspace all of it

00:11:05,589 --> 00:11:10,750
and then finally you have the excel tool

00:11:07,959 --> 00:11:12,579
available to start your yellow BM them

00:11:10,750 --> 00:11:15,670
in your boot time if you don't start

00:11:12,579 --> 00:11:17,680
doing some optimization some really good

00:11:15,670 --> 00:11:19,600
optimization on you're dumb you're dumb

00:11:17,680 --> 00:11:21,339
zero system it's gonna be bigger than

00:11:19,600 --> 00:11:23,380
three seconds it's fair to say bigger

00:11:21,339 --> 00:11:25,089
than five second I think by default is

00:11:23,380 --> 00:11:26,709
gonna be even bigger than ten seconds if

00:11:25,089 --> 00:11:29,620
you don't start cutting any system and

00:11:26,709 --> 00:11:31,630
so on right this is not what you want

00:11:29,620 --> 00:11:35,290
for your swing game robotic arm

00:11:31,630 --> 00:11:39,279
controller right that would be 10

00:11:35,290 --> 00:11:41,170
seconds of panic there so there are

00:11:39,279 --> 00:11:45,370
other consequence safety certification

00:11:41,170 --> 00:11:47,529
so Linux is large is a bit problematic

00:11:45,370 --> 00:11:49,779
certifying a Linux system so what do you

00:11:47,529 --> 00:11:51,459
do for them zero there isn't a simple

00:11:49,779 --> 00:11:55,209
answer you could replace it with another

00:11:51,459 --> 00:11:58,570
Wes so nothing nothing says atom zero

00:11:55,209 --> 00:12:01,329
ask to be Linux but then if you don't

00:11:58,570 --> 00:12:03,880
use a Linux system zero you are both up

00:12:01,329 --> 00:12:05,829
on a bit of a strange path no many other

00:12:03,880 --> 00:12:07,839
people use and on Linux than zero so it

00:12:05,829 --> 00:12:10,449
become harder to set up so on and so

00:12:07,839 --> 00:12:12,880
forth there are other simple solution

00:12:10,449 --> 00:12:16,570
like one idea is simply to use them zero

00:12:12,880 --> 00:12:18,880
to set up the system and then quit that

00:12:16,570 --> 00:12:21,550
means dom0 will only be there a start at

00:12:18,880 --> 00:12:25,329
time okay that may be feasible it could

00:12:21,550 --> 00:12:27,640
be a decent workaround but we'll have a

00:12:25,329 --> 00:12:30,910
better solution just in a in a couple of

00:12:27,640 --> 00:12:35,320
slides complexity obviously you have one

00:12:30,910 --> 00:12:38,050
more VM to to build Yocto and so on pros

00:12:35,320 --> 00:12:40,810
I only been focusing on the cons so far

00:12:38,050 --> 00:12:42,610
so there are pros in a Wyndham zero well

00:12:40,810 --> 00:12:44,199
you have one place where you can do

00:12:42,610 --> 00:12:45,699
monitoring you can monitor your health

00:12:44,199 --> 00:12:47,769
in the health of your system you can

00:12:45,699 --> 00:12:49,420
reboot your VM you can do a bunch of

00:12:47,769 --> 00:12:52,329
stuff some of them really cool like

00:12:49,420 --> 00:12:54,850
doing memory introspection getting very

00:12:52,329 --> 00:12:57,370
very very detailed information on the

00:12:54,850 --> 00:13:00,430
behavior of your VM of the application

00:12:57,370 --> 00:13:03,510
within the VM really cool so you know

00:13:00,430 --> 00:13:07,240
you can't have everything right that

00:13:03,510 --> 00:13:08,769
brings me to the solution so what I've

00:13:07,240 --> 00:13:11,730
been working on in the last year and a

00:13:08,769 --> 00:13:14,730
half is to improve static partitioning

00:13:11,730 --> 00:13:17,430
scenarios with them

00:13:14,730 --> 00:13:19,470
I did that by implementing a new

00:13:17,430 --> 00:13:24,060
features that we've been calling dumb

00:13:19,470 --> 00:13:29,160
zero less Y and it will become obvious

00:13:24,060 --> 00:13:34,200
very soon so the idea is to not require

00:13:29,160 --> 00:13:36,360
them zero to put your system how do we

00:13:34,200 --> 00:13:39,390
achieve that goal we achieve that goal

00:13:36,360 --> 00:13:42,000
first of all by every new boot load more

00:13:39,390 --> 00:13:44,040
things into memory than usually does so

00:13:42,000 --> 00:13:44,490
what does you boot usually load into

00:13:44,040 --> 00:13:47,000
memory

00:13:44,490 --> 00:13:48,120
well it load the zen hypervisor

00:13:47,000 --> 00:13:51,450
obviously

00:13:48,120 --> 00:13:55,170
it also loads it on 0 kernel and ram

00:13:51,450 --> 00:13:59,370
disk also obvious but usually stop there

00:13:55,170 --> 00:14:02,190
so we extended it the protocol to also

00:13:59,370 --> 00:14:04,740
load the kernel and ram disk of yellow

00:14:02,190 --> 00:14:11,040
and the color kernel and ram disk of

00:14:04,740 --> 00:14:14,310
purple step 1 step 2 we boot then as

00:14:11,040 --> 00:14:17,490
usual but then we have Zen start in

00:14:14,310 --> 00:14:20,910
parallel all your domains on separate

00:14:17,490 --> 00:14:24,090
physical cores so here we have done 0

00:14:20,910 --> 00:14:27,900
yellow and purple all starting in

00:14:24,090 --> 00:14:31,710
parallel now that means that your yellow

00:14:27,900 --> 00:14:33,900
up here is a good time of yellow without

00:14:31,710 --> 00:14:36,570
doing any optimization it's going to be

00:14:33,900 --> 00:14:39,300
less than a second why because the only

00:14:36,570 --> 00:14:41,850
thing needs to wait is for exam to start

00:14:39,300 --> 00:14:44,820
and then is pretty tiny is less than

00:14:41,850 --> 00:14:45,680
50,000 lines of code so it's not gonna

00:14:44,820 --> 00:14:49,290
take long

00:14:45,680 --> 00:14:50,910
so it's easy to probably with some

00:14:49,290 --> 00:14:56,160
optimization you can go into the realm

00:14:50,910 --> 00:14:59,250
of milliseconds of boot time how do we

00:14:56,160 --> 00:15:01,410
do the parallel boot thing so the idea

00:14:59,250 --> 00:15:04,320
is that when you boot start then it

00:15:01,410 --> 00:15:06,990
passes to send some more information

00:15:04,320 --> 00:15:09,780
telling them that it shouldn't just

00:15:06,990 --> 00:15:12,090
start them 0 and stop there but you

00:15:09,780 --> 00:15:14,850
should also start yellow and purple I'm

00:15:12,090 --> 00:15:17,520
going to go into detail of how that is

00:15:14,850 --> 00:15:20,190
done in a couple of slides but what I

00:15:17,520 --> 00:15:22,200
want to say here is well I've been

00:15:20,190 --> 00:15:26,100
saying tom 0 less than 0 less than 0

00:15:22,200 --> 00:15:27,840
less but custom theorem yes so the idea

00:15:26,100 --> 00:15:30,360
is don't you

00:15:27,840 --> 00:15:32,820
refers to these two vm's yellow and

00:15:30,360 --> 00:15:36,510
purple why because they have been

00:15:32,820 --> 00:15:39,660
started without any help from them zero

00:15:36,510 --> 00:15:43,050
so dumb zeros done nothing whatsoever to

00:15:39,660 --> 00:15:46,440
help or provide any services like

00:15:43,050 --> 00:15:49,350
nothing zero nada to start the arrow in

00:15:46,440 --> 00:15:52,140
purple and that's why we call them dumb

00:15:49,350 --> 00:15:54,690
zero lesbians but you still left on zero

00:15:52,140 --> 00:15:57,600
there so you can still use it to start

00:15:54,690 --> 00:16:00,620
more vm's like in this case our regular

00:15:57,600 --> 00:16:04,170
your you know round of the meal red BM

00:16:00,620 --> 00:16:07,620
usual or the monitoring do the usual

00:16:04,170 --> 00:16:09,290
stuff that you do from them zero how

00:16:07,620 --> 00:16:12,270
does it work

00:16:09,290 --> 00:16:14,280
so Jesus to Jonas is a technical

00:16:12,270 --> 00:16:17,970
conference so I wanted to go a bit more

00:16:14,280 --> 00:16:20,460
into the implementation detail so the

00:16:17,970 --> 00:16:23,970
way it works is as I said first of all

00:16:20,460 --> 00:16:26,730
we extend you I mean we ask you boot to

00:16:23,970 --> 00:16:30,660
load more things into memory so here we

00:16:26,730 --> 00:16:32,250
have you would start loading into memory

00:16:30,660 --> 00:16:36,150
the device tree that's the first line

00:16:32,250 --> 00:16:38,700
the dom0 kernel the hypervisor satyam

00:16:36,150 --> 00:16:42,180
zero ram disk the last command here is

00:16:38,700 --> 00:16:44,790
to put send this is what we usually do

00:16:42,180 --> 00:16:48,360
this is what it has been done up to now

00:16:44,790 --> 00:16:51,330
was new is and now you we also ask to

00:16:48,360 --> 00:16:54,210
load the kernel and ram disk of yellow

00:16:51,330 --> 00:16:59,730
and again the same for purple or any of

00:16:54,210 --> 00:17:03,600
the other tombs 0 less VMs step 1 step 2

00:16:59,730 --> 00:17:05,970
we have to tell Zen somehow that in this

00:17:03,600 --> 00:17:08,240
system the reason just on 0 but there

00:17:05,970 --> 00:17:12,390
are two more VMS how do we do that

00:17:08,240 --> 00:17:15,450
device tree so we have already some dumb

00:17:12,390 --> 00:17:18,450
0 related configuration under the chosen

00:17:15,450 --> 00:17:23,610
node in the by tree so we just extended

00:17:18,450 --> 00:17:27,360
that set of bindings to also advertise

00:17:23,610 --> 00:17:31,260
the presence of more PM's so we added a

00:17:27,360 --> 00:17:36,630
node that is compatible to Xen domain it

00:17:31,260 --> 00:17:39,570
has some memory some butyl CPU PL 0 11

00:17:36,630 --> 00:17:41,310
and just a you art and immolated by then

00:17:39,570 --> 00:17:45,030
and this

00:17:41,310 --> 00:17:47,900
where the kernel is last module tells

00:17:45,030 --> 00:17:50,790
and where the RAM disk is so this is a

00:17:47,900 --> 00:17:52,950
unit of description for one of these

00:17:50,790 --> 00:17:54,960
domes eros VM sin is going to read it

00:17:52,950 --> 00:17:57,390
it's going to find out that it needs to

00:17:54,960 --> 00:17:59,700
start a VM with the kernel loaded here

00:17:57,390 --> 00:18:05,910
and the RAM this loaded here and it's

00:17:59,700 --> 00:18:08,310
going to start it okay so all of all of

00:18:05,910 --> 00:18:10,740
that everything I said so far is good

00:18:08,310 --> 00:18:13,260
and but it's honestly useless without

00:18:10,740 --> 00:18:15,720
device assignment because yes you can

00:18:13,260 --> 00:18:17,730
start VMs but there is no memory no

00:18:15,720 --> 00:18:19,290
Parab utilize driver nothing what are

00:18:17,730 --> 00:18:22,860
you going to do with them right this is

00:18:19,290 --> 00:18:25,140
not much so this becomes useful as soon

00:18:22,860 --> 00:18:27,660
as you can assign physical resources to

00:18:25,140 --> 00:18:30,150
each of these domain or static

00:18:27,660 --> 00:18:32,880
partitions how do you do that with

00:18:30,150 --> 00:18:35,910
device assignment so you remap a memory

00:18:32,880 --> 00:18:38,070
region and interrupts of hard physical

00:18:35,910 --> 00:18:41,700
are the resources into these partitions

00:18:38,070 --> 00:18:45,810
so in this example the network card is

00:18:41,700 --> 00:18:49,800
given to yellow BM how is it done again

00:18:45,810 --> 00:18:51,780
with the battery so we expose so if you

00:18:49,800 --> 00:18:54,150
if any of you are already familiar with

00:18:51,780 --> 00:18:56,790
then today is possible to assign devices

00:18:54,150 --> 00:18:59,850
to VM that are started from them zero

00:18:56,790 --> 00:19:04,350
and it is done by adding a little device

00:18:59,850 --> 00:19:07,650
tree snippet to your VM config file we

00:19:04,350 --> 00:19:11,190
took the same idea the idea that this

00:19:07,650 --> 00:19:13,650
device tree snippet here describes one

00:19:11,190 --> 00:19:16,950
device that needs to be assigned to one

00:19:13,650 --> 00:19:20,520
of your domains for instance the network

00:19:16,950 --> 00:19:24,140
card you compile it into his own dtb and

00:19:20,520 --> 00:19:28,860
then you load it again from you boot

00:19:24,140 --> 00:19:31,770
added to the domain description and this

00:19:28,860 --> 00:19:33,960
basically tells n that there is one

00:19:31,770 --> 00:19:35,370
device to be assigned one or more device

00:19:33,960 --> 00:19:37,410
to be assigned

00:19:35,370 --> 00:19:38,880
how does it work is pretty simple it

00:19:37,410 --> 00:19:41,700
contains the description of the device

00:19:38,880 --> 00:19:44,790
design a couple of special attributes

00:19:41,700 --> 00:19:46,710
one with the memory region then you

00:19:44,790 --> 00:19:50,130
wanna remap and the destination and

00:19:46,710 --> 00:19:52,680
another one with the path like they are

00:19:50,130 --> 00:19:56,000
basically a link to the corresponding

00:19:52,680 --> 00:19:58,230
device on the host device tree

00:19:56,000 --> 00:19:59,970
because this way if you are asking why

00:19:58,230 --> 00:20:02,400
there are two description is this way

00:19:59,970 --> 00:20:05,460
you might you can expose a different

00:20:02,400 --> 00:20:08,190
description of the device to your domain

00:20:05,460 --> 00:20:10,140
compared to the physical host device

00:20:08,190 --> 00:20:15,050
three description there are cases that

00:20:10,140 --> 00:20:18,240
is useful alright so that brings me to

00:20:15,050 --> 00:20:22,560
truth um 0 less so through them 0 less

00:20:18,240 --> 00:20:25,770
mean actually there is no dumb 0 okay so

00:20:22,560 --> 00:20:28,710
in this example we have only two VMs

00:20:25,770 --> 00:20:31,140
only two domains yellow with the network

00:20:28,710 --> 00:20:33,450
card and purple with the PL like a

00:20:31,140 --> 00:20:35,040
programmable logic block and that's

00:20:33,450 --> 00:20:38,580
definitely achievable now that we have

00:20:35,040 --> 00:20:43,080
done 0 less not done yet upstream but

00:20:38,580 --> 00:20:47,430
definitely doable so yeah going back to

00:20:43,080 --> 00:20:49,590
that slide using them 0 lists we can

00:20:47,430 --> 00:20:52,890
definitely set up a system where then

00:20:49,590 --> 00:20:55,140
start and automatically set up all the

00:20:52,890 --> 00:20:58,050
static partitions for you according to

00:20:55,140 --> 00:21:00,900
your configuration with each static

00:20:58,050 --> 00:21:04,590
partition having physical core fully

00:21:00,900 --> 00:21:07,620
dedicated to them as well as hardware

00:21:04,590 --> 00:21:11,550
resources assigned to them our Q latency

00:21:07,620 --> 00:21:14,970
is minimal and you because CPU are fully

00:21:11,550 --> 00:21:18,120
dedicated using a special schedulers

00:21:14,970 --> 00:21:21,060
call now that tells them to dedicate

00:21:18,120 --> 00:21:23,640
fully course to started partition and

00:21:21,060 --> 00:21:29,790
not do any scheduling that increases our

00:21:23,640 --> 00:21:31,500
queue latency ok so yes the toll cubes

00:21:29,790 --> 00:21:33,060
about static partitioning and this is I

00:21:31,500 --> 00:21:35,100
think where this picture really shine

00:21:33,060 --> 00:21:37,590
but I wanted to just spend a couple of

00:21:35,100 --> 00:21:40,250
word to say that it can also be used for

00:21:37,590 --> 00:21:43,380
non-static partition in cases like

00:21:40,250 --> 00:21:46,260
unless you take it out you still have

00:21:43,380 --> 00:21:49,980
them 0 so you can use it for stuff right

00:21:46,260 --> 00:21:52,080
you can for instance have a couple of

00:21:49,980 --> 00:21:54,480
more VMS which could be you know driving

00:21:52,080 --> 00:21:56,760
your safety-critical or your critical

00:21:54,480 --> 00:21:59,160
applications started a boot time to

00:21:56,760 --> 00:22:01,470
increase the oil to decrease to minimize

00:21:59,160 --> 00:22:03,270
the boot time and then as well after the

00:22:01,470 --> 00:22:04,640
system is fully up and running you can

00:22:03,270 --> 00:22:08,429
still use them zero to start

00:22:04,640 --> 00:22:12,309
non-critical stuff separately

00:22:08,429 --> 00:22:14,830
okay pros and cons so wisdom zero less

00:22:12,309 --> 00:22:18,460
you can set up a true started

00:22:14,830 --> 00:22:21,549
partitioning system you get way faster

00:22:18,460 --> 00:22:25,269
boot times so I get easily less than a

00:22:21,549 --> 00:22:26,980
second boot times is excellent for a

00:22:25,269 --> 00:22:29,470
small system with only few static

00:22:26,980 --> 00:22:31,059
partitions is way easier to certify

00:22:29,470 --> 00:22:34,179
because now you only have to say to

00:22:31,059 --> 00:22:38,049
safely certifies the hypervisor not from

00:22:34,179 --> 00:22:41,950
zero so this big chunk of the system the

00:22:38,049 --> 00:22:44,379
software solution goes away lower

00:22:41,950 --> 00:22:46,029
complexity the big chunk of software

00:22:44,379 --> 00:22:47,230
solution that goes away also means you

00:22:46,029 --> 00:22:48,700
don't need to build it you don't need to

00:22:47,230 --> 00:22:51,639
build a Linux system anymore especially

00:22:48,700 --> 00:22:54,220
just two runs X and tools you don't need

00:22:51,639 --> 00:22:55,539
to use Yocto or anything so to set up

00:22:54,220 --> 00:22:59,139
them zero less you basically just

00:22:55,539 --> 00:23:01,029
compile exam with the llanera GCC the

00:22:59,139 --> 00:23:02,619
way you do the Linux kernel that's it

00:23:01,029 --> 00:23:04,539
there is nothing else to build so you

00:23:02,619 --> 00:23:08,889
just build then you tell it to start two

00:23:04,539 --> 00:23:11,679
things in parallel and at the end what

00:23:08,889 --> 00:23:13,600
else well I have a pretty being comes

00:23:11,679 --> 00:23:16,029
for a pretty big cons for you there is

00:23:13,600 --> 00:23:18,429
no x e r oh yeah yeah there is no x 0

00:23:16,029 --> 00:23:21,639
that means if you want to reboot your

00:23:18,429 --> 00:23:25,359
VMs you can't you want to start more VMs

00:23:21,639 --> 00:23:27,129
you can't right so every everything is a

00:23:25,359 --> 00:23:29,320
trade-off so if you want to get rid of

00:23:27,129 --> 00:23:33,340
Tom's Eero it means you have no time

00:23:29,320 --> 00:23:36,159
zero after all right one thing that you

00:23:33,340 --> 00:23:41,049
should be aware of today what is not

00:23:36,159 --> 00:23:43,840
implemented is you don't have pv drivers

00:23:41,049 --> 00:23:46,419
between them zero lesbians this is

00:23:43,840 --> 00:23:48,580
technically possible to have a network

00:23:46,419 --> 00:23:50,889
back-end to share the network card for

00:23:48,580 --> 00:23:53,230
instance running in yellow and then the

00:23:50,889 --> 00:23:55,779
front end running in purple technically

00:23:53,230 --> 00:23:58,059
possible doesn't work ok it's on the

00:23:55,779 --> 00:23:59,590
roadmap and will be in telemental at

00:23:58,059 --> 00:24:01,529
some point so today can only really be

00:23:59,590 --> 00:24:07,090
used for pure static partitioning

00:24:01,529 --> 00:24:10,269
scenarios that brings me to the to do

00:24:07,090 --> 00:24:12,639
list and what's done was missing what is

00:24:10,269 --> 00:24:14,350
done is basic Thom 0 less like starting

00:24:12,639 --> 00:24:17,429
multiple VMs in parallel that's

00:24:14,350 --> 00:24:20,470
implemented is upstream in Xen 412

00:24:17,429 --> 00:24:22,020
device assignment is in progress we are

00:24:20,470 --> 00:24:24,840
very close to up streaming it

00:24:22,020 --> 00:24:27,230
and hopefully is gonna be in in 4:13

00:24:24,840 --> 00:24:30,950
which will be out by the end of the year

00:24:27,230 --> 00:24:32,550
is also available in the exiling century

00:24:30,950 --> 00:24:35,160
what's next

00:24:32,550 --> 00:24:37,620
so through them 0s meaning getting rid

00:24:35,160 --> 00:24:41,190
of them 0 for good you can very easily

00:24:37,620 --> 00:24:43,470
do with a one-line change patch but is

00:24:41,190 --> 00:24:47,130
not updating you can you can only do it

00:24:43,470 --> 00:24:49,170
with with just a configuration sheer

00:24:47,130 --> 00:24:50,640
memory the interrupt so is really really

00:24:49,170 --> 00:24:52,740
will be really good to be able to share

00:24:50,640 --> 00:24:54,560
memory cacheable memory between the dome

00:24:52,740 --> 00:24:57,900
0 lesbians and let them communicate

00:24:54,560 --> 00:25:00,450
that's missing and PV front end and back

00:24:57,900 --> 00:25:02,070
end is a bit further out but it will be

00:25:00,450 --> 00:25:04,050
done at some point so sheer memory is

00:25:02,070 --> 00:25:08,220
actually quite easy to implement just I

00:25:04,050 --> 00:25:12,030
haven't got around to it yet alright so

00:25:08,220 --> 00:25:16,850
I have quite a few interesting demos to

00:25:12,030 --> 00:25:20,100
show you I'm gonna start with this demo

00:25:16,850 --> 00:25:22,710
so actually first I want to show you

00:25:20,100 --> 00:25:26,850
something else the first thing I want to

00:25:22,710 --> 00:25:29,220
show you is I've been working on

00:25:26,850 --> 00:25:30,930
simplifying the computer configuration

00:25:29,220 --> 00:25:33,210
even further so you don't have to

00:25:30,930 --> 00:25:35,910
manually edit your device 3 manually

00:25:33,210 --> 00:25:39,240
edit your Yubel script so what this does

00:25:35,910 --> 00:25:41,520
is a very very simple tech plain test

00:25:39,240 --> 00:25:44,160
config file and there is a very very

00:25:41,520 --> 00:25:47,340
simple script that takes this as an

00:25:44,160 --> 00:25:48,780
input and generates a uboot script for

00:25:47,340 --> 00:25:51,840
you that's going to boot the entire

00:25:48,780 --> 00:25:54,210
system so this tells it you know where

00:25:51,840 --> 00:25:56,940
the memory is the device 3 binary that

00:25:54,210 --> 00:25:58,380
the battery blob you're using exam the

00:25:56,940 --> 00:26:01,500
binary that you're using the kernel

00:25:58,380 --> 00:26:03,750
fordham 0 that kernel the ramdux for

00:26:01,500 --> 00:26:06,060
them 0 how many other domains you have

00:26:03,750 --> 00:26:08,010
this is a configuration for device

00:26:06,060 --> 00:26:11,970
assignment it contains a network card

00:26:08,010 --> 00:26:15,390
and that's basically the output so I'm

00:26:11,970 --> 00:26:20,280
gonna run it as an example for you these

00:26:15,390 --> 00:26:22,560
generated that you boot script you want

00:26:20,280 --> 00:26:24,360
to see the source this source is

00:26:22,560 --> 00:26:27,030
basically loading a bunch of current of

00:26:24,360 --> 00:26:29,610
binaries into memory is also doing the

00:26:27,030 --> 00:26:32,460
modification of the device tree from the

00:26:29,610 --> 00:26:34,320
yuba script itself so that all your

00:26:32,460 --> 00:26:35,380
binary that you provided as input are

00:26:34,320 --> 00:26:37,960
pristine

00:26:35,380 --> 00:26:42,970
and unchanged and any sim please call

00:26:37,960 --> 00:26:45,669
booth so I can show you how it can be

00:26:42,970 --> 00:26:49,059
how it works but I'm running it from GM

00:26:45,669 --> 00:26:51,610
so this is gonna be slow I can tell you

00:26:49,059 --> 00:26:53,080
straight ahead it's gonna be slow the

00:26:51,610 --> 00:26:55,900
only thing you need to do is set the IP

00:26:53,080 --> 00:26:59,230
address load the script into memory and

00:26:55,900 --> 00:27:01,870
run it and you're gonna see a bunch of

00:26:59,230 --> 00:27:03,850
VM being started in parallel slowly

00:27:01,870 --> 00:27:06,160
because this is fully emulated on my

00:27:03,850 --> 00:27:08,770
laptop right now so basically there are

00:27:06,160 --> 00:27:10,330
three BMS all starting the mesons the

00:27:08,770 --> 00:27:14,669
console is because all of them are

00:27:10,330 --> 00:27:19,179
printing one of them as a network card

00:27:14,669 --> 00:27:20,860
and so on okay right so this is pretty

00:27:19,179 --> 00:27:22,630
basic time zero less so you should be

00:27:20,860 --> 00:27:26,260
able to reproduce this on your own

00:27:22,630 --> 00:27:28,289
without much difficulty I wanted to show

00:27:26,260 --> 00:27:32,020
you something more interesting that this

00:27:28,289 --> 00:27:34,120
something more interesting is the demo I

00:27:32,020 --> 00:27:37,419
wanted to talk to you about so in this

00:27:34,120 --> 00:27:40,030
demo there is no Tom's ear oh there is a

00:27:37,419 --> 00:27:41,950
yellow BM with a network car which is

00:27:40,030 --> 00:27:44,049
Linux plus PC box so it's a very very

00:27:41,950 --> 00:27:46,690
small Linux environment and the other

00:27:44,049 --> 00:27:49,179
one purple is a bare-metal app so this

00:27:46,690 --> 00:27:52,360
is not even Linux is tiny it's bare

00:27:49,179 --> 00:27:54,070
metal and as a you are directly assigned

00:27:52,360 --> 00:27:56,110
to it the secondary you are there are

00:27:54,070 --> 00:27:58,150
like thing two or four maybe on the

00:27:56,110 --> 00:28:00,100
ultra scale plus more than you need and

00:27:58,150 --> 00:28:01,840
a TTC timer1

00:28:00,100 --> 00:28:03,429
the one of the many timers that are

00:28:01,840 --> 00:28:05,289
available on the board so what I'm

00:28:03,429 --> 00:28:08,460
running on purple is just a tiny

00:28:05,289 --> 00:28:12,309
application to measure our queue latency

00:28:08,460 --> 00:28:14,679
so I'm gonna run it now so this is live

00:28:12,309 --> 00:28:16,210
all over the internet so if anything

00:28:14,679 --> 00:28:17,169
goes wrong I'm going to blame it on the

00:28:16,210 --> 00:28:22,450
internet I'm gonna tell you straight

00:28:17,169 --> 00:28:24,820
away so here you'll see the system

00:28:22,450 --> 00:28:28,320
starting and you should be able to see

00:28:24,820 --> 00:28:28,320
the first VM only

00:28:31,680 --> 00:28:37,590
and on the other tab year the bare-metal

00:28:34,620 --> 00:28:39,720
app will start this is an now this is

00:28:37,590 --> 00:28:41,160
the bare metal up already finished

00:28:39,720 --> 00:28:43,710
obviously because it's Thainess already

00:28:41,160 --> 00:28:48,210
started booted run and finished and it

00:28:43,710 --> 00:28:51,480
ran its own RQ latency test if I go back

00:28:48,210 --> 00:28:54,810
to this we have only one domain running

00:28:51,480 --> 00:28:59,760
Weiss called domain to this this is

00:28:54,810 --> 00:29:03,420
because I implemented through them TLS

00:28:59,760 --> 00:29:05,700
for this demo with this patch return 0

00:29:03,420 --> 00:29:08,520
there so I just stopped them from

00:29:05,700 --> 00:29:11,640
starting Donzi row so if you take x 0

00:29:08,520 --> 00:29:15,390
out dom one is the one with the latency

00:29:11,640 --> 00:29:17,610
test so don't you is the one left with

00:29:15,390 --> 00:29:21,360
the network card so I'm going to switch

00:29:17,610 --> 00:29:26,730
him to tier 2 this guy and you can see

00:29:21,360 --> 00:29:32,340
he has an IP address and I can ping the

00:29:26,730 --> 00:29:37,320
host is connected to and it works okay

00:29:32,340 --> 00:29:41,580
so that's two demos I can show you and

00:29:37,320 --> 00:29:47,100
one more if I can which is a pretty

00:29:41,580 --> 00:29:50,310
complex solution with Zen starting 3 VM

00:29:47,100 --> 00:29:53,370
from 0 yellow and purple and then from

00:29:50,310 --> 00:29:56,100
them 0 starting one more VM regular with

00:29:53,370 --> 00:29:58,350
fronted them back end with the network

00:29:56,100 --> 00:30:00,180
are so assigned to yellow so the only

00:29:58,350 --> 00:30:02,550
one that can actually go out is yellow

00:30:00,180 --> 00:30:04,560
and the other two can only talked with

00:30:02,550 --> 00:30:06,540
one another so this is basically a

00:30:04,560 --> 00:30:08,850
private network by virtue of the fact

00:30:06,540 --> 00:30:15,630
there is no internet connection there at

00:30:08,850 --> 00:30:18,470
all this is recorded and I can see this

00:30:15,630 --> 00:30:18,470
is about to boot

00:30:26,000 --> 00:30:31,680
so this is then starting the 3vm start

00:30:29,190 --> 00:30:34,140
to being parallel bit of a mess on the

00:30:31,680 --> 00:30:45,570
consoles the other two are finished only

00:30:34,140 --> 00:30:50,750
the zero is left okay dum zero is fully

00:30:45,570 --> 00:30:53,820
booted I'm logging in now from here you

00:30:50,750 --> 00:30:56,160
can see so I switch the input here to

00:30:53,820 --> 00:30:57,690
dumb one so dumb one is the one with a

00:30:56,160 --> 00:31:00,570
network card that will be yellow in the

00:30:57,690 --> 00:31:03,030
picture it and it has an IP address

00:31:00,570 --> 00:31:06,210
assigned to it same as in the demo I

00:31:03,030 --> 00:31:08,670
just showed you live I'm here what I'm

00:31:06,210 --> 00:31:11,760
doing I'm showing that you can ping the

00:31:08,670 --> 00:31:13,290
host funnily enough I cannot show you

00:31:11,760 --> 00:31:15,600
ping Google because this is in my

00:31:13,290 --> 00:31:17,130
firewall darlings network so I cannot

00:31:15,600 --> 00:31:18,810
actually ping Google but that's the

00:31:17,130 --> 00:31:21,840
closest to ping in the real internet

00:31:18,810 --> 00:31:23,970
that I can get into in this demo then I

00:31:21,840 --> 00:31:26,910
switch the input to the second domain

00:31:23,970 --> 00:31:30,360
then back to Zen dom0 okay and in them

00:31:26,910 --> 00:31:33,960
zero you see I can use Excel to issue

00:31:30,360 --> 00:31:37,170
commands I start you you see this - now

00:31:33,960 --> 00:31:39,060
named VMs don't 0 less VM have no name

00:31:37,170 --> 00:31:42,180
because the name is assigned from them

00:31:39,060 --> 00:31:43,830
zero so they come up as now but you can

00:31:42,180 --> 00:31:46,380
see that there are there are two of them

00:31:43,830 --> 00:31:48,540
was one with two V CPU the other one

00:31:46,380 --> 00:31:52,620
with only one B CPU and both of them

00:31:48,540 --> 00:31:54,780
with 128 megabytes of memory and then

00:31:52,620 --> 00:31:58,380
what I'm doing is I'm just starting one

00:31:54,780 --> 00:31:59,570
more VM this is a config file of the DM

00:31:58,380 --> 00:32:05,670
I'm about to start

00:31:59,570 --> 00:32:08,640
starting the BM ok

00:32:05,670 --> 00:32:10,830
obviously there are three vm's now that

00:32:08,640 --> 00:32:16,410
one called test is the one started from

00:32:10,830 --> 00:32:18,960
zero and now I am gonna do a silly test

00:32:16,410 --> 00:32:22,670
where I write child to index dot HTML

00:32:18,960 --> 00:32:28,080
and use a busybox implementation of

00:32:22,670 --> 00:32:29,640
httpd running here and then there is no

00:32:28,080 --> 00:32:32,490
network interface because i'm using a

00:32:29,640 --> 00:32:34,679
special parable tries network networking

00:32:32,490 --> 00:32:37,890
called pd calls that doesn't create the

00:32:34,679 --> 00:32:39,679
network interface and then from dom0 I'm

00:32:37,890 --> 00:32:43,710
gonna fetch

00:32:39,679 --> 00:32:45,870
I'm gonna fetch the index dot HTML page

00:32:43,710 --> 00:32:47,730
from local loft that's because this

00:32:45,870 --> 00:32:50,399
locker lost is this communication domain

00:32:47,730 --> 00:32:52,499
between old BM syndromes ero using the

00:32:50,399 --> 00:32:54,960
special PD called parameterize interface

00:32:52,499 --> 00:32:57,120
and you can see there is Chow written in

00:32:54,960 --> 00:32:59,220
the page so basically again you can see

00:32:57,120 --> 00:33:00,870
that they communicate as usual as you

00:32:59,220 --> 00:33:03,149
could do without them zero less and

00:33:00,870 --> 00:33:05,460
still the network is completely separate

00:33:03,149 --> 00:33:08,730
because we assign the network card to

00:33:05,460 --> 00:33:10,649
the other domain ok that that's the end

00:33:08,730 --> 00:33:14,029
so if you have any questions and would

00:33:10,649 --> 00:33:14,029
be happy to answer any

00:33:34,920 --> 00:33:37,610
yes

00:33:44,910 --> 00:33:49,800
yes so typically thumbs ero is the one

00:33:47,580 --> 00:33:52,170
that in in a traditional setup time zero

00:33:49,800 --> 00:33:54,600
is the one to tell all devices and then

00:33:52,170 --> 00:33:58,310
or almost all except for the one in

00:33:54,600 --> 00:34:01,320
directly assigned to others and then you

00:33:58,310 --> 00:34:03,060
para you start these paralyzed back ends

00:34:01,320 --> 00:34:07,140
in the mirror and the front end in other

00:34:03,060 --> 00:34:09,780
be ends so here all of that stuff is

00:34:07,140 --> 00:34:12,510
still architectural II present exam so

00:34:09,780 --> 00:34:15,540
you could do it and the idea that one

00:34:12,510 --> 00:34:17,040
day you could do this right this this

00:34:15,540 --> 00:34:19,860
thing doesn't quite work so you could

00:34:17,040 --> 00:34:22,740
start yellow with a network card but

00:34:19,860 --> 00:34:25,140
also the network end as typical is done

00:34:22,740 --> 00:34:27,870
in them G row so that another VM can

00:34:25,140 --> 00:34:29,280
actually connect to it and in fact part

00:34:27,870 --> 00:34:32,010
of this protocols there is already a

00:34:29,280 --> 00:34:33,630
rendezvous mechanism that is based on

00:34:32,010 --> 00:34:36,120
status you know check when the other

00:34:33,630 --> 00:34:38,070
guys online so it will work with

00:34:36,120 --> 00:34:41,510
parallel reboot - it's just that the

00:34:38,070 --> 00:34:41,510
plumbing is not done yet

00:34:53,180 --> 00:35:01,380
absolutely yeah yeah so the one is a

00:34:59,280 --> 00:35:02,100
bare-metal for instance that's not a

00:35:01,380 --> 00:35:04,500
proprietor

00:35:02,100 --> 00:35:07,860
so Verma tell you is what darling calls

00:35:04,500 --> 00:35:09,390
this tiny tiny little library or s is

00:35:07,860 --> 00:35:11,610
not even know s it's just a set of

00:35:09,390 --> 00:35:14,310
library function to initialize your bare

00:35:11,610 --> 00:35:16,410
metal hardware that can also be run in a

00:35:14,310 --> 00:35:19,350
VM but we are talking about a kernel

00:35:16,410 --> 00:35:21,470
plus app that is maybe less than 100

00:35:19,350 --> 00:35:23,700
kilobytes like it's a tiny tiny

00:35:21,470 --> 00:35:27,060
application and that's definitely not

00:35:23,700 --> 00:35:28,800
Linux and this is what you have seen

00:35:27,060 --> 00:35:31,620
starting with the Archie latency test

00:35:28,800 --> 00:35:42,390
that's a completely separate kernel that

00:35:31,620 --> 00:35:44,280
has been run in parallel yeah yeah so

00:35:42,390 --> 00:35:53,420
keep in mind that a far better number

00:35:44,280 --> 00:35:53,420
that I can tell you about so

00:35:56,690 --> 00:36:01,950
so actually this is a big topic I could

00:35:59,520 --> 00:36:03,780
talk about our cue latency for an entire

00:36:01,950 --> 00:36:08,060
presentation and I plan to do that next

00:36:03,780 --> 00:36:11,250
year but I mean I can I can explain so

00:36:08,060 --> 00:36:13,950
our cue latency is a key to every low is

00:36:11,250 --> 00:36:15,750
to fully dedicate CPUs so that you don't

00:36:13,950 --> 00:36:17,730
do scheduling and D scheduling okay

00:36:15,750 --> 00:36:20,670
that's you can do it by default by using

00:36:17,730 --> 00:36:23,190
SCAD equal null on the xn command line

00:36:20,670 --> 00:36:25,530
that means each vertice pew is going to

00:36:23,190 --> 00:36:29,070
be one-to-one mapped to a physical core

00:36:25,530 --> 00:36:31,290
now that works if you have a system with

00:36:29,070 --> 00:36:33,180
no interference and you get to already

00:36:31,290 --> 00:36:35,369
this pretty good number like if you look

00:36:33,180 --> 00:36:39,440
this one as a high latency so the

00:36:35,369 --> 00:36:42,270
biggest latency this test is 3.7

00:36:39,440 --> 00:36:44,220
microseconds this is pretty good for an

00:36:42,270 --> 00:36:47,160
arm system and telling you like it's

00:36:44,220 --> 00:36:50,940
very hard to beat that however the key

00:36:47,160 --> 00:36:53,220
is on a system without interference so

00:36:50,940 --> 00:36:55,260
there are still ways on arm systems to

00:36:53,220 --> 00:36:58,619
create cause interference between core

00:36:55,260 --> 00:37:01,230
and affect the performance from one

00:36:58,619 --> 00:37:04,020
chord to another but we are close to

00:37:01,230 --> 00:37:07,619
publishing a set of changes to exam that

00:37:04,020 --> 00:37:10,650
basically like zero the possibility of

00:37:07,619 --> 00:37:14,160
interference by separating the cache of

00:37:10,650 --> 00:37:16,349
each processor and we have done

00:37:14,160 --> 00:37:18,480
extremely detailed measurements of an RQ

00:37:16,349 --> 00:37:20,430
latency and even in the worst possible

00:37:18,480 --> 00:37:23,270
case with the worst possible kind of

00:37:20,430 --> 00:37:25,740
interference is always less than 5

00:37:23,270 --> 00:37:29,160
microseconds so I feel extremely

00:37:25,740 --> 00:37:31,140
comfortable on the RQ latency side but

00:37:29,160 --> 00:37:34,400
you need those changes not published yet

00:37:31,140 --> 00:37:34,400
about to be

00:37:41,750 --> 00:37:50,390
so so is not is not is not separate that

00:37:46,380 --> 00:37:52,920
way so it's only that each VM has

00:37:50,390 --> 00:37:56,940
dedicated cash nine that's a good way of

00:37:52,920 --> 00:38:00,150
putting it so that way you don't know

00:37:56,940 --> 00:38:01,770
you have no chance of a VM affecting

00:38:00,150 --> 00:38:03,450
cash line performance of another beer

00:38:01,770 --> 00:38:05,670
but you can still share memory and on

00:38:03,450 --> 00:38:08,730
the shared memory of course like if you

00:38:05,670 --> 00:38:13,430
share a page that one can be affected

00:38:08,730 --> 00:38:13,430
that one page of course go ahead

00:38:20,880 --> 00:38:26,670
yes so well yes and no so the code is

00:38:25,109 --> 00:38:29,339
all open source and I'm sure you can

00:38:26,670 --> 00:38:31,859
find it somewhere on the exotics github

00:38:29,339 --> 00:38:34,440
page in practice so the classic way of

00:38:31,859 --> 00:38:37,650
building it is through divider which is

00:38:34,440 --> 00:38:42,059
a pretty big as decay from darlings that

00:38:37,650 --> 00:38:44,940
come with the product so the divide

00:38:42,059 --> 00:38:48,390
itself is not open source but all the

00:38:44,940 --> 00:38:50,819
libraries is all BSD license so it's you

00:38:48,390 --> 00:38:53,069
can in theory you could build it but I

00:38:50,819 --> 00:38:55,200
did it before believe by hand outside of

00:38:53,069 --> 00:39:01,289
Avadh oh and that would be completely

00:38:55,200 --> 00:39:03,180
open source yeah absolutely I know that

00:39:01,289 --> 00:39:05,339
people up for instance I took it and

00:39:03,180 --> 00:39:09,210
slightly modified it and use it on a

00:39:05,339 --> 00:39:12,079
Renaissance board for instance so it can

00:39:09,210 --> 00:39:12,079
be done yeah

00:39:15,190 --> 00:39:21,529
so Lars is going to have a presentation

00:39:17,989 --> 00:39:24,410
tomorrow and it's going to talk about it

00:39:21,529 --> 00:39:25,789
we have a lot of thoughts on the area so

00:39:24,410 --> 00:39:27,859
we made some progress this year

00:39:25,789 --> 00:39:29,749
specifically on certification we'd be

00:39:27,859 --> 00:39:32,509
talking about it for a while and we

00:39:29,749 --> 00:39:34,099
recognize it's key for the xni proviso

00:39:32,509 --> 00:39:35,749
to make forward progress

00:39:34,099 --> 00:39:49,220
so you check out large talk tomorrow

00:39:35,749 --> 00:39:53,599
yeah so then supports x86 and arm arm 32

00:39:49,220 --> 00:39:56,749
and 64 actually our however dumb 0 less

00:39:53,599 --> 00:39:59,269
only is all implemented on arm so you

00:39:56,749 --> 00:40:00,890
cannot use them 0 less than x 86 what

00:39:59,269 --> 00:40:03,920
you could do on x86 so you could have

00:40:00,890 --> 00:40:06,859
them 0 start the other VMs and quit and

00:40:03,920 --> 00:40:09,579
you can get actually close not quite as

00:40:06,859 --> 00:40:12,710
good as but close in terms of like

00:40:09,579 --> 00:40:20,119
startup time for instance and Jack you

00:40:12,710 --> 00:40:21,650
could do it too today last questions no

00:40:20,119 --> 00:40:25,390
I'm the only thing standing between me

00:40:21,650 --> 00:40:25,390
and refreshment and okay

00:40:40,620 --> 00:40:44,470
so

00:40:42,310 --> 00:40:47,140
yeah I guess the question so the key is

00:40:44,470 --> 00:40:50,950
it needs to be protected with the smmu

00:40:47,140 --> 00:40:54,400
so and then automatically will use the

00:40:50,950 --> 00:40:57,010
smmu to protect every device assignment

00:40:54,400 --> 00:40:59,800
in the system if the smmu is available

00:40:57,010 --> 00:41:01,150
on ultra scale plus is available there

00:40:59,800 --> 00:41:02,860
are few other boards with a good-ass

00:41:01,150 --> 00:41:06,400
enemy implementation so it's definitely

00:41:02,860 --> 00:41:08,470
something to look at when you look at

00:41:06,400 --> 00:41:11,950
this solution because if the smmu is not

00:41:08,470 --> 00:41:17,710
there or it doesn't quite work then it

00:41:11,950 --> 00:41:19,630
becomes a bit difficult yeah okay thank

00:41:17,710 --> 00:41:21,870
you all and have a good rest of the

00:41:19,630 --> 00:41:21,870

YouTube URL: https://www.youtube.com/watch?v=UfiP9eAV0WA


