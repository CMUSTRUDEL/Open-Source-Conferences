Title: Lightning Talk: Continuous Delivery with Kubernetes: The Prequel - Priyanka Sharma
Publication date: 2019-08-28
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	Lightning Talk: Continuous Delivery with Kubernetes: The Prequel - Priyanka Sharma, Director of Alliances, GitLab and Governing Board Member, CNCF*
Captions: 
	00:00:00,230 --> 00:00:07,049
hello everybody how's it going it's like

00:00:04,770 --> 00:00:09,059
what 10 a.m. is that like early morning

00:00:07,049 --> 00:00:13,650
for some of you it's early morning for

00:00:09,059 --> 00:00:15,150
me alright well let's get started

00:00:13,650 --> 00:00:17,060
since I have only five minutes I

00:00:15,150 --> 00:00:20,369
actually thought I had 10 so whoops

00:00:17,060 --> 00:00:22,310
we'll do what we can so I'm here to talk

00:00:20,369 --> 00:00:27,900
about continuous delivery but kubernetes

00:00:22,310 --> 00:00:29,429
the prequel so as as Jim said I work at

00:00:27,900 --> 00:00:32,489
git lab and it sounded like almost

00:00:29,429 --> 00:00:35,040
everybody had heard of it so great job I

00:00:32,489 --> 00:00:37,170
also sit on the board for the cloud

00:00:35,040 --> 00:00:39,780
native computing foundation which is the

00:00:37,170 --> 00:00:41,670
home for the kubernetes project if

00:00:39,780 --> 00:00:44,460
anybody wants to engage further after

00:00:41,670 --> 00:00:46,590
this talk I spend way too much time on

00:00:44,460 --> 00:00:50,399
Twitter so you can always find me there

00:00:46,590 --> 00:00:53,039
my DMS are also open so with that

00:00:50,399 --> 00:00:55,170
communication thing done I just want to

00:00:53,039 --> 00:00:56,850
do a quick primer how many folks here

00:00:55,170 --> 00:01:02,250
are familiar with the continuous

00:00:56,850 --> 00:01:03,840
delivery solids all right so just to

00:01:02,250 --> 00:01:05,309
make sure we're all on the same page I

00:01:03,840 --> 00:01:07,520
am NOT talking about continuous

00:01:05,309 --> 00:01:09,689
deployment today and there's only one

00:01:07,520 --> 00:01:12,119
difference between continuous delivery

00:01:09,689 --> 00:01:14,909
and deployment and that is that in the

00:01:12,119 --> 00:01:18,509
delivery case there is a manual push to

00:01:14,909 --> 00:01:21,659
prod and oftentimes businesses do that

00:01:18,509 --> 00:01:23,549
because they have regulatory reasons for

00:01:21,659 --> 00:01:26,640
get lab its compliance something we're

00:01:23,549 --> 00:01:29,430
working through right now so that's the

00:01:26,640 --> 00:01:29,850
only difference and that's what sets it

00:01:29,430 --> 00:01:31,650
apart

00:01:29,850 --> 00:01:37,049
how is everybody here familiar with

00:01:31,650 --> 00:01:38,100
kubernetes awesome well I don't know if

00:01:37,049 --> 00:01:40,500
everybody heard me on that side

00:01:38,100 --> 00:01:44,280
particularly raise your hand if you know

00:01:40,500 --> 00:01:46,170
kubernetes alright now this is good so

00:01:44,280 --> 00:01:48,390
as we all know kubernetes is an

00:01:46,170 --> 00:01:51,149
orchestration system for containers and

00:01:48,390 --> 00:01:53,189
it's only just the biggest blockbuster

00:01:51,149 --> 00:01:58,490
project of all time in the lead-in

00:01:53,189 --> 00:02:01,619
lately lately no shade on git Linux etc

00:01:58,490 --> 00:02:03,659
all right with that baseline let's get

00:02:01,619 --> 00:02:07,240
started so today what I'm going to talk

00:02:03,659 --> 00:02:09,670
to you about in very fast words

00:02:07,240 --> 00:02:12,340
the gitlab case study of moving to

00:02:09,670 --> 00:02:15,280
continuous delivery and the key message

00:02:12,340 --> 00:02:17,980
that i'm going to try to pass on today

00:02:15,280 --> 00:02:20,650
is that don't necessarily go run to the

00:02:17,980 --> 00:02:22,930
newest shiniest object in tooling when

00:02:20,650 --> 00:02:25,540
you're trying to change workflows for a

00:02:22,930 --> 00:02:26,860
business objective in our case we went

00:02:25,540 --> 00:02:30,040
to continuous delivery without

00:02:26,860 --> 00:02:32,800
kubernetes on our legacy system and I'll

00:02:30,040 --> 00:02:34,780
show you really quickly on how we did it

00:02:32,800 --> 00:02:36,819
what the benefits were and some humble

00:02:34,780 --> 00:02:41,010
pieces of advice if they help you in

00:02:36,819 --> 00:02:43,209
your work in daily stir in daily life so

00:02:41,010 --> 00:02:46,000
why do we care about continuous delivery

00:02:43,209 --> 00:02:49,300
simply because I think everybody here is

00:02:46,000 --> 00:02:51,010
familiar at this point right that for

00:02:49,300 --> 00:02:52,900
business survival we need to be

00:02:51,010 --> 00:02:56,410
responsive to our users and customers

00:02:52,900 --> 00:03:00,250
the only way to do that is to ship fast

00:02:56,410 --> 00:03:02,610
and resilient Lee who here is not trying

00:03:00,250 --> 00:03:06,100
to ship quickly

00:03:02,610 --> 00:03:10,209
all right well one person you're

00:03:06,100 --> 00:03:12,730
listening but yes this has become such a

00:03:10,209 --> 00:03:15,700
mantra for all businesses today that we

00:03:12,730 --> 00:03:18,700
need to get there and instead of having

00:03:15,700 --> 00:03:20,620
let's say two weeks two months quarterly

00:03:18,700 --> 00:03:22,269
say you know issues that you work

00:03:20,620 --> 00:03:24,250
through and stories that you build and

00:03:22,269 --> 00:03:26,380
then get feedback from users on if you

00:03:24,250 --> 00:03:28,209
make quick small changes put it out

00:03:26,380 --> 00:03:29,500
there to your customers quickly you get

00:03:28,209 --> 00:03:32,049
a response and then you keep adjusting

00:03:29,500 --> 00:03:33,989
to reach the optimal solution for what

00:03:32,049 --> 00:03:36,370
your product should be and that's why

00:03:33,989 --> 00:03:37,840
cycle time compression is important and

00:03:36,370 --> 00:03:39,370
that's why continuous delivery is

00:03:37,840 --> 00:03:43,329
important because without that it's

00:03:39,370 --> 00:03:49,299
harder to ship fast so how did get lab

00:03:43,329 --> 00:03:51,250
do it as I said legacy first so as some

00:03:49,299 --> 00:03:53,380
of you may know get lab has millions of

00:03:51,250 --> 00:03:55,989
users and over a hundred thousand

00:03:53,380 --> 00:03:57,670
organizations rely on us so it's not

00:03:55,989 --> 00:03:59,200
like having a greenfield project where

00:03:57,670 --> 00:04:02,380
you can do everything newfangled and

00:03:59,200 --> 00:04:04,810
awesome so what we did so in terms of

00:04:02,380 --> 00:04:08,200
our tooling get lab runs on get labs so

00:04:04,810 --> 00:04:10,060
that helps everywhere from like the

00:04:08,200 --> 00:04:11,920
issue planning to the version control to

00:04:10,060 --> 00:04:16,209
the CI CD pipelines security and

00:04:11,920 --> 00:04:19,239
post-production monitoring but we do not

00:04:16,209 --> 00:04:21,250
use containers just yet in our

00:04:19,239 --> 00:04:23,440
environments we use virtual machines

00:04:21,250 --> 00:04:26,290
and we use ansible scripts to

00:04:23,440 --> 00:04:29,020
orchestrate that's pretty old-school by

00:04:26,290 --> 00:04:31,350
a lot of people's standards it's

00:04:29,020 --> 00:04:34,090
definitely not all in cloud native and

00:04:31,350 --> 00:04:37,720
that's been a conscious choice that we

00:04:34,090 --> 00:04:39,820
have done in order to get to CD in order

00:04:37,720 --> 00:04:42,310
to train our workforce and in order to

00:04:39,820 --> 00:04:45,250
really get the benefits of shipping

00:04:42,310 --> 00:04:46,630
quickly so there's a little bit of

00:04:45,250 --> 00:04:49,210
kubernetes in the product with like

00:04:46,630 --> 00:04:51,340
feature flags and people can review

00:04:49,210 --> 00:04:53,470
changes live but that's more get

00:04:51,340 --> 00:04:59,290
laughing not part of the CD pipeline

00:04:53,470 --> 00:05:01,300
thing and what has that given us well we

00:04:59,290 --> 00:05:03,550
go from commit to canary in two hours

00:05:01,300 --> 00:05:07,630
now which used to be over a day in the

00:05:03,550 --> 00:05:10,360
past we've gone from weekly to daily

00:05:07,630 --> 00:05:12,400
deploys and keep in mind this is because

00:05:10,360 --> 00:05:15,070
of the manual button push that we still

00:05:12,400 --> 00:05:17,830
have to do to deploy to production the

00:05:15,070 --> 00:05:21,280
delivery thing is as I said commit to

00:05:17,830 --> 00:05:22,780
canary two hours and then finally and I

00:05:21,280 --> 00:05:25,810
think this is the biggest thing of all

00:05:22,780 --> 00:05:28,150
all of our developers are now on an

00:05:25,810 --> 00:05:31,120
on-call rotation and we achieved this in

00:05:28,150 --> 00:05:33,640
three weeks since we released the

00:05:31,120 --> 00:05:35,200
continuous delivery system for three

00:05:33,640 --> 00:05:37,210
years as a company we'd been talking

00:05:35,200 --> 00:05:39,010
about this to go from dev - dev ops and

00:05:37,210 --> 00:05:45,010
within three weeks once we implemented

00:05:39,010 --> 00:05:47,080
this we were on it so what what did we

00:05:45,010 --> 00:05:49,360
get so we got a culture shift and this

00:05:47,080 --> 00:05:50,890
is what I suggest to you as an audience

00:05:49,360 --> 00:05:54,190
listening about a continuous delivery

00:05:50,890 --> 00:05:56,530
talk focus on one element for us

00:05:54,190 --> 00:05:58,570
focusing on culture shift without having

00:05:56,530 --> 00:06:01,150
to change our infrastructure as we move

00:05:58,570 --> 00:06:03,700
to CD has helped us put quality as the

00:06:01,150 --> 00:06:05,680
top priority so the way the pipeline

00:06:03,700 --> 00:06:07,360
runs if the if the automated tests fail

00:06:05,680 --> 00:06:08,530
it just sends a slack message to the

00:06:07,360 --> 00:06:11,230
team and they have to fix it before

00:06:08,530 --> 00:06:13,570
it'll go forward and we do not do any

00:06:11,230 --> 00:06:16,390
hot patching anymore unless it's p1 and

00:06:13,570 --> 00:06:18,370
s1 p1 being Priority One is somewhat

00:06:16,390 --> 00:06:20,680
some user is deeply affected but s1

00:06:18,370 --> 00:06:22,990
being it's a large scale problem it's a

00:06:20,680 --> 00:06:24,550
compliance issue something major and as

00:06:22,990 --> 00:06:28,150
I said every engineer is on the one

00:06:24,550 --> 00:06:30,100
called rotation doing what we've done we

00:06:28,150 --> 00:06:32,530
have actually maxed out our legacy

00:06:30,100 --> 00:06:34,720
system we could we went from you know

00:06:32,530 --> 00:06:38,200
weekly to daily deploys and we've

00:06:34,720 --> 00:06:41,470
had 24 releases in July compared to four

00:06:38,200 --> 00:06:43,600
and May and now we have bought time to

00:06:41,470 --> 00:06:45,910
join the kubernetes boat now that the

00:06:43,600 --> 00:06:47,350
operations team is close with the

00:06:45,910 --> 00:06:49,840
developers everyone's coming together to

00:06:47,350 --> 00:06:52,120
DevOps security has regular sessions

00:06:49,840 --> 00:06:55,270
with the developers where a point where

00:06:52,120 --> 00:06:57,160
we can join the kubernetes boat being on

00:06:55,270 --> 00:06:59,620
get lab kind of gave us some advantages

00:06:57,160 --> 00:07:02,140
but the tooling decision was really

00:06:59,620 --> 00:07:04,660
important and as I said humble advice

00:07:02,140 --> 00:07:06,850
figure out the workflows first get your

00:07:04,660 --> 00:07:08,860
team ready the rest will follow don't

00:07:06,850 --> 00:07:11,020
use shiny objects before you're ready to

00:07:08,860 --> 00:07:13,090
use shiny objects and decouple big

00:07:11,020 --> 00:07:14,770
changes like infra changes versus people

00:07:13,090 --> 00:07:17,620
changes and that will make continuous

00:07:14,770 --> 00:07:19,120
delivery a lot more doable and that's

00:07:17,620 --> 00:07:20,260
all I had thank you so much for

00:07:19,120 --> 00:07:20,450
listening and I hope you have a great

00:07:20,260 --> 00:07:23,850
day

00:07:20,450 --> 00:07:23,850

YouTube URL: https://www.youtube.com/watch?v=M91KXLEhBME


