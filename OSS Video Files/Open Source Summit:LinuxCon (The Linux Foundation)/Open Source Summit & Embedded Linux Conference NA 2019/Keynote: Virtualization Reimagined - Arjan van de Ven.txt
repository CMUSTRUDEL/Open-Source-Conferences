Title: Keynote: Virtualization Reimagined - Arjan van de Ven
Publication date: 2019-08-28
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	Keynote: Virtualization Reimagined - Arjan van de Ven, Intel Fellow, Linux and Data Centric Software Architecture & Director, Pathfinding and Advanced Technology, Intel Corporation 

Over the past decade, virtualization has transformed cloud computing and the way we do business. As companies continue their cloud transformations, they are looking more closely at security and performance trade-offs when considering which services can be migrated to the cloud.In this talk, Arjan van de Ven, Intel Fellow Linux and Data-Centric Software Architecture, Director, Pathfinding and Advanced Technology will showcase some of the ways Intel has expanded its scope from kernel into cloud technologies and present how we are leading this innovation through secure containers, end-to-end software stacks and performance.
Captions: 
	00:00:00,030 --> 00:00:05,220
thank you for taking the time to listen

00:00:02,460 --> 00:00:06,870
to me so Jim start our by going back in

00:00:05,220 --> 00:00:09,269
time and say hey we were the limo

00:00:06,870 --> 00:00:11,550
foundation we did Linux and he showed a

00:00:09,269 --> 00:00:13,969
slide from like six seven years ago I

00:00:11,550 --> 00:00:18,300
have a slide from five years ago as well

00:00:13,969 --> 00:00:20,550
five years ago we showed really how as

00:00:18,300 --> 00:00:22,289
much as containers were ever gonna make

00:00:20,550 --> 00:00:25,289
virtualization obsolete virtualization

00:00:22,289 --> 00:00:27,119
for floppy disks the technology behind

00:00:25,289 --> 00:00:30,240
fertilization and containers was sort of

00:00:27,119 --> 00:00:32,430
the we were rethinking that space and we

00:00:30,240 --> 00:00:35,760
launched clear containers or later color

00:00:32,430 --> 00:00:37,380
containers and I have one a sort of

00:00:35,760 --> 00:00:39,870
flashback slide where we go talk about

00:00:37,380 --> 00:00:42,300
how it happened containers came up

00:00:39,870 --> 00:00:43,860
containers for what isolation and

00:00:42,300 --> 00:00:46,829
containers were about how we deploy

00:00:43,860 --> 00:00:49,980
software now contain of change the world

00:00:46,829 --> 00:00:55,920
container change how we deploy software

00:00:49,980 --> 00:00:57,719
how we develop software completely at

00:00:55,920 --> 00:00:59,579
the same time security was a question

00:00:57,719 --> 00:01:02,550
how do we secure containers how do we

00:00:59,579 --> 00:01:07,049
isolate how do we do interesting things

00:01:02,550 --> 00:01:09,330
there and in one of the staff meetings

00:01:07,049 --> 00:01:11,610
that worked where some some guidance

00:01:09,330 --> 00:01:12,479
staff said hey well purchase a sheet is

00:01:11,610 --> 00:01:13,860
that you should stop this whole

00:01:12,479 --> 00:01:16,950
virtualization thing ever go do

00:01:13,860 --> 00:01:21,270
something else because it's too heavy

00:01:16,950 --> 00:01:23,369
too hard like I asked myself and we

00:01:21,270 --> 00:01:25,229
asked it out loud how hard can it be

00:01:23,369 --> 00:01:27,330
right the more dangerous were through

00:01:25,229 --> 00:01:30,270
computer science how hard can I be to

00:01:27,330 --> 00:01:32,070
actually we've reimagined virtualization

00:01:30,270 --> 00:01:34,110
and we did it with clear containers in

00:01:32,070 --> 00:01:36,900
the beginning all we showed was we can

00:01:34,110 --> 00:01:38,220
reverb lightweight isolation oh and by

00:01:36,900 --> 00:01:40,200
the way we can glue it in the docker

00:01:38,220 --> 00:01:42,299
although docker was kind of at the time

00:01:40,200 --> 00:01:44,070
of mature enough to have plug-in

00:01:42,299 --> 00:01:46,979
architecture which was hard to make it

00:01:44,070 --> 00:01:49,110
work over the over the last few years we

00:01:46,979 --> 00:01:51,479
went from something that was really hard

00:01:49,110 --> 00:01:54,649
to use it was an interesting concept who

00:01:51,479 --> 00:01:57,780
a docker bantman modular Aussie I showed

00:01:54,649 --> 00:02:00,420
that that containers are an ecosystem

00:01:57,780 --> 00:02:02,130
not an implementation and as multiple

00:02:00,420 --> 00:02:06,719
ways of making backends as multiple ways

00:02:02,130 --> 00:02:09,599
of doing containers and wasn't your

00:02:06,719 --> 00:02:11,180
first the hyper-v company did the same

00:02:09,599 --> 00:02:13,040
thing around the same time

00:02:11,180 --> 00:02:14,569
and at some point we all decided to sort

00:02:13,040 --> 00:02:17,000
of join hands and pick the best

00:02:14,569 --> 00:02:18,620
technology of business just from the

00:02:17,000 --> 00:02:20,299
previous speaker you have multiple

00:02:18,620 --> 00:02:22,069
innovation points and at some point you

00:02:20,299 --> 00:02:25,489
make a step together you combine two new

00:02:22,069 --> 00:02:27,859
things together and then kubernetes

00:02:25,489 --> 00:02:29,540
happened and kubernetes was basically

00:02:27,859 --> 00:02:31,489
saying your containers are great but

00:02:29,540 --> 00:02:32,959
here's how you use them here's how you

00:02:31,489 --> 00:02:35,389
deploy them here's how you put them into

00:02:32,959 --> 00:02:37,639
production use and it was an order whole

00:02:35,389 --> 00:02:39,500
bunch of work to make sure fertilization

00:02:37,639 --> 00:02:45,200
containers all that work together very

00:02:39,500 --> 00:02:47,750
well and in the last few years

00:02:45,200 --> 00:02:49,970
we're now at the point where the cotta

00:02:47,750 --> 00:02:51,620
container technology is mature people

00:02:49,970 --> 00:02:52,879
are producing in a production our

00:02:51,620 --> 00:02:56,510
friends as soon as they started shipping

00:02:52,879 --> 00:02:58,040
it in their OS called gaming people are

00:02:56,510 --> 00:03:00,379
using it for gaming in the cloud as a

00:02:58,040 --> 00:03:03,980
way of having high density but still

00:03:00,379 --> 00:03:06,260
secure kind of gaming sort of it has

00:03:03,980 --> 00:03:10,700
arrived okay so why am i saying this why

00:03:06,260 --> 00:03:13,340
my total quarter past well one of the

00:03:10,700 --> 00:03:15,609
things that changed was really okay so

00:03:13,340 --> 00:03:17,870
virtualization technology isn't about

00:03:15,609 --> 00:03:19,819
enterprise VM fat emulator flow people

00:03:17,870 --> 00:03:22,040
at your expense control system from the

00:03:19,819 --> 00:03:25,699
1980s can still expand process your

00:03:22,040 --> 00:03:28,159
expenses it's really about it's lighter

00:03:25,699 --> 00:03:30,949
it's about isolation it's about dead the

00:03:28,159 --> 00:03:33,859
basic of the technology and it's

00:03:30,949 --> 00:03:35,389
basically a spectrum the problems

00:03:33,859 --> 00:03:37,340
virtualization technology can solve for

00:03:35,389 --> 00:03:40,519
you are not your authorization as an

00:03:37,340 --> 00:03:42,169
enterprise technology and earlier this

00:03:40,519 --> 00:03:43,790
year like the fire crab Amazon guys

00:03:42,169 --> 00:03:45,739
launched firecracker and they showed hey

00:03:43,790 --> 00:03:47,959
lightweight virtues a technology is

00:03:45,739 --> 00:03:49,489
great for fast mode even containers

00:03:47,959 --> 00:03:51,650
nevermind containers containers are big

00:03:49,489 --> 00:03:53,060
and heavy remember fertilization was

00:03:51,650 --> 00:03:56,209
making heavy containers a big and heavy

00:03:53,060 --> 00:03:57,739
let's do it fast and they use the same

00:03:56,209 --> 00:03:59,709
kind of technology for isolating fast

00:03:57,739 --> 00:04:03,859
from different customers from each other

00:03:59,709 --> 00:04:05,389
and really one of the things about our

00:04:03,859 --> 00:04:07,959
group realized is and we talked to many

00:04:05,389 --> 00:04:10,909
of our customers is well

00:04:07,959 --> 00:04:15,099
virtualization is changing what people

00:04:10,909 --> 00:04:18,409
need from the isolation is changing so

00:04:15,099 --> 00:04:20,479
what do what do people want we talk to

00:04:18,409 --> 00:04:22,070
our customers we talked to the community

00:04:20,479 --> 00:04:24,260
folks we talked to a lot of people and

00:04:22,070 --> 00:04:26,750
sort of five themes came out

00:04:24,260 --> 00:04:28,730
of that the first theme was ever ever we

00:04:26,750 --> 00:04:30,500
have to be lightweight Alec means many

00:04:28,730 --> 00:04:31,760
different things to many people but

00:04:30,500 --> 00:04:33,710
lightweight was something that came back

00:04:31,760 --> 00:04:37,780
over and over again fast well know

00:04:33,710 --> 00:04:40,160
everybody was fast but what is fast mean

00:04:37,780 --> 00:04:42,530
the more tangible one knows density

00:04:40,160 --> 00:04:45,730
people want to use them they're the same

00:04:42,530 --> 00:04:48,650
hardware for more and more more work if

00:04:45,730 --> 00:04:49,940
Amazon would run one faster server it

00:04:48,650 --> 00:04:51,860
wouldn't be in business they want to run

00:04:49,940 --> 00:04:56,240
her notes or thousands of fast jobs on

00:04:51,860 --> 00:04:58,820
the server just be quick the world where

00:04:56,240 --> 00:04:59,990
you install a server install a VM leave

00:04:58,820 --> 00:05:03,080
it running for three months and then

00:04:59,990 --> 00:05:05,060
shut it down I've gone the files do

00:05:03,080 --> 00:05:07,580
opens five ten milliseconds and it's

00:05:05,060 --> 00:05:10,940
going again if I take you to me three

00:05:07,580 --> 00:05:13,010
minutes to start doesn't matter you

00:05:10,940 --> 00:05:14,080
don't you don't exist and security is

00:05:13,010 --> 00:05:16,490
almost not negotiable

00:05:14,080 --> 00:05:19,580
Jimmy earlier launched your computing

00:05:16,490 --> 00:05:21,140
but security as a concept is every

00:05:19,580 --> 00:05:23,090
customer we talked to says security

00:05:21,140 --> 00:05:25,370
that's a baseline you can all the go she

00:05:23,090 --> 00:05:26,690
ate security you can negotiate density

00:05:25,370 --> 00:05:29,180
you can ago she ate startup you can

00:05:26,690 --> 00:05:34,100
negotiate lightweight security is a bar

00:05:29,180 --> 00:05:35,450
it's just a baseline okay so we let me

00:05:34,100 --> 00:05:38,390
run back to the same customer said okay

00:05:35,450 --> 00:05:40,910
so you mean lightweight but you're for

00:05:38,390 --> 00:05:43,520
fast what is lightweight mean two

00:05:40,910 --> 00:05:45,040
megabytes and I went to the guy who

00:05:43,520 --> 00:05:47,690
wrote the clouds and the clouds

00:05:45,040 --> 00:05:49,640
fertilization layer for big customer

00:05:47,690 --> 00:05:52,880
what does lively mean well to kick to

00:05:49,640 --> 00:05:54,590
gigabyte so some of these things are

00:05:52,880 --> 00:05:57,260
proportional to the problem space

00:05:54,590 --> 00:06:02,630
therein and that means there's not

00:05:57,260 --> 00:06:04,520
really one size fits all at startup time

00:06:02,630 --> 00:06:06,410
same thing fat the fast guys say yeah my

00:06:04,520 --> 00:06:09,580
my whole job runs ten milliseconds a

00:06:06,410 --> 00:06:12,020
fast startup is one millisecond or less

00:06:09,580 --> 00:06:14,240
but if you were not running your

00:06:12,020 --> 00:06:16,430
enterprise VM in a big cloud provider

00:06:14,240 --> 00:06:20,960
and the thing you run for three months

00:06:16,430 --> 00:06:24,890
yeah few seconds who cares so all of

00:06:20,960 --> 00:06:26,420
these things are proportional and one of

00:06:24,890 --> 00:06:28,790
the challenges you always have is ok so

00:06:26,420 --> 00:06:30,620
from a technology perspective what do

00:06:28,790 --> 00:06:33,230
you do you have this wide range of

00:06:30,620 --> 00:06:36,020
requirements from very rich requirements

00:06:33,230 --> 00:06:38,090
with tolerance before for for

00:06:36,020 --> 00:06:40,850
lightweight for density versus too

00:06:38,090 --> 00:06:42,710
fast and one things we started working

00:06:40,850 --> 00:06:45,320
with with a privilege of our community

00:06:42,710 --> 00:06:47,840
partners is something we call rusty a

00:06:45,320 --> 00:06:49,340
man and that is basically for hard-on

00:06:47,840 --> 00:06:51,220
I'm building one hypervisor or one

00:06:49,340 --> 00:06:54,139
virtualization stack for everything

00:06:51,220 --> 00:06:57,320
build a set of components that you can

00:06:54,139 --> 00:06:59,000
stack together in any way you want in

00:06:57,320 --> 00:07:01,490
order to make it to make it easy to make

00:06:59,000 --> 00:07:02,780
a domain-specific solution it still

00:07:01,490 --> 00:07:06,199
shares when you have the common building

00:07:02,780 --> 00:07:08,360
blocks so the fast guys can use half of

00:07:06,199 --> 00:07:09,440
this or maybe a third of this but if you

00:07:08,360 --> 00:07:12,590
want to make a full enterprise

00:07:09,440 --> 00:07:14,270
hypervisor you use all of it or use

00:07:12,590 --> 00:07:15,860
different versions of the same block you

00:07:14,270 --> 00:07:17,750
can make a lightweight version of the

00:07:15,860 --> 00:07:19,490
device modeling can make a very fat rich

00:07:17,750 --> 00:07:23,410
version of the device model and swap

00:07:19,490 --> 00:07:26,000
them out so rather than having one

00:07:23,410 --> 00:07:27,260
virtualization block you make we build a

00:07:26,000 --> 00:07:29,660
set of building blocks that are

00:07:27,260 --> 00:07:31,880
replaceable that are optional making

00:07:29,660 --> 00:07:33,979
very fast decomposed into a domain

00:07:31,880 --> 00:07:36,139
solution all the way from fast on

00:07:33,979 --> 00:07:38,780
lighter to all the way to enterprise or

00:07:36,139 --> 00:07:42,190
richer if I was having to reinvent two

00:07:38,780 --> 00:07:42,190
wheels or the things that you can share

00:07:42,820 --> 00:07:47,240
now how do you build the set of building

00:07:45,410 --> 00:07:49,160
blocks like that without actually

00:07:47,240 --> 00:07:51,830
getting lost so one of the things one of

00:07:49,160 --> 00:07:53,720
my team did is okay so let's also build

00:07:51,830 --> 00:07:55,880
an actual implementation of this that is

00:07:53,720 --> 00:07:58,460
relatively rich so that we can verify

00:07:55,880 --> 00:08:01,370
all of it works together this is what we

00:07:58,460 --> 00:08:03,169
call the cloud hypervisor it's a full

00:08:01,370 --> 00:08:05,090
hypervisor for a virtual machine setup

00:08:03,169 --> 00:08:07,280
it's it's an early phases so don't

00:08:05,090 --> 00:08:09,260
expect it to be compared to be it in the

00:08:07,280 --> 00:08:10,610
production tomorrow but we're using is

00:08:09,260 --> 00:08:12,560
to prove that all the blocks for

00:08:10,610 --> 00:08:15,169
building as components can be used

00:08:12,560 --> 00:08:17,270
together in a rich set up but also we

00:08:15,169 --> 00:08:20,090
have configuration of this or less than

00:08:17,270 --> 00:08:20,990
that it turns out yet to make hypervisor

00:08:20,090 --> 00:08:22,669
so you need more than just these

00:08:20,990 --> 00:08:24,710
building blocks you need to add device

00:08:22,669 --> 00:08:25,820
backends to it what's what kind of

00:08:24,710 --> 00:08:30,560
stories do you use how we should

00:08:25,820 --> 00:08:33,380
networking work but if you don't prove

00:08:30,560 --> 00:08:34,880
out the set of blocks you have no idea

00:08:33,380 --> 00:08:36,110
if they all work together so we have to

00:08:34,880 --> 00:08:38,050
build blocks to put them together in

00:08:36,110 --> 00:08:40,610
addition to the light we're fast of the

00:08:38,050 --> 00:08:44,240
container situs is also today the other

00:08:40,610 --> 00:08:46,459
side of the spectrum so when we say

00:08:44,240 --> 00:08:49,010
reimagining virtualization it is really

00:08:46,459 --> 00:08:50,570
about being composable being

00:08:49,010 --> 00:08:51,860
domain-specific

00:08:50,570 --> 00:08:54,110
while sharing as money

00:08:51,860 --> 00:08:58,279
as you can from a common building blocks

00:08:54,110 --> 00:09:01,490
at okay so okay we've solved

00:08:58,279 --> 00:09:02,660
virtualization let's move my team is

00:09:01,490 --> 00:09:03,890
very busy with this and we're spending

00:09:02,660 --> 00:09:06,220
all the time making sure we get this

00:09:03,890 --> 00:09:09,140
right because virtualization and then

00:09:06,220 --> 00:09:11,320
the OS around it is a building work for

00:09:09,140 --> 00:09:16,250
everything else you do in your computer

00:09:11,320 --> 00:09:18,170
ok so the second thing that Jim Jim

00:09:16,250 --> 00:09:19,220
alluded I spend my time on is ok what

00:09:18,170 --> 00:09:21,860
what else is there

00:09:19,220 --> 00:09:23,420
and Jim kind of applied this earlier as

00:09:21,860 --> 00:09:26,570
the Linux Foundation went from the

00:09:23,420 --> 00:09:28,640
kernel all the way to networking to

00:09:26,570 --> 00:09:31,579
higher up node no GS higher up in the

00:09:28,640 --> 00:09:35,480
stack so did we in terms of how we look

00:09:31,579 --> 00:09:37,040
at software so far isn't just the kernel

00:09:35,480 --> 00:09:39,740
jatropha isn't just of our transition

00:09:37,040 --> 00:09:42,200
they are faux fur isn't just from

00:09:39,740 --> 00:09:44,390
library GDP and maybe a compiler here or

00:09:42,200 --> 00:09:49,040
there so far is all the way in to an end

00:09:44,390 --> 00:09:50,420
application I'm back and in my date in

00:09:49,040 --> 00:09:52,880
my spare time and I can actually do

00:09:50,420 --> 00:09:56,480
coding I can order to add a yes yeah my

00:09:52,880 --> 00:09:57,769
do code I look at like looking at

00:09:56,480 --> 00:09:59,959
performance because performance is a

00:09:57,769 --> 00:10:01,040
place where you can look at it things in

00:09:59,959 --> 00:10:03,470
a different way and get a different

00:10:01,040 --> 00:10:05,240
outcome so when we looked at performance

00:10:03,470 --> 00:10:07,029
for a bunch of basic machine learning

00:10:05,240 --> 00:10:09,050
and order operations it turns out that

00:10:07,029 --> 00:10:12,230
performance is not a problem you solve

00:10:09,050 --> 00:10:13,550
in one spot on the stack performance is

00:10:12,230 --> 00:10:15,920
something you have to solve an every

00:10:13,550 --> 00:10:18,709
layer for it all work together and it's

00:10:15,920 --> 00:10:20,899
a nonlinear effort we found okay we

00:10:18,709 --> 00:10:22,670
solve performance in matrix multiply

00:10:20,899 --> 00:10:25,370
spent a few Saturday afternoons matrix

00:10:22,670 --> 00:10:28,310
Rocio matrix multiply it was great I got

00:10:25,370 --> 00:10:31,160
a 6x performance improvement that's a

00:10:28,310 --> 00:10:32,690
great Saturday afternoon right it turns

00:10:31,160 --> 00:10:34,940
out if you blue boy the same algorithm

00:10:32,690 --> 00:10:36,110
in a specific cloud provider you

00:10:34,940 --> 00:10:37,459
wouldn't get any benefit because

00:10:36,110 --> 00:10:39,529
different they didn't actually pass

00:10:37,459 --> 00:10:42,410
through some of the basic data you need

00:10:39,529 --> 00:10:43,880
to get a performance improvement I won

00:10:42,410 --> 00:10:45,829
by the way and then the layer on top the

00:10:43,880 --> 00:10:48,470
machine learning layer had a matrix it

00:10:45,829 --> 00:10:53,899
which was wasn't nicely 64 by 64 it was

00:10:48,470 --> 00:10:54,980
65 or 63 and not a nice power of 2 so

00:10:53,899 --> 00:10:56,990
you have to change the machine link

00:10:54,980 --> 00:10:58,459
layer above it to say can we make the

00:10:56,990 --> 00:11:00,980
matrix at least sort of multiple of

00:10:58,459 --> 00:11:02,600
eight to get nice performance so

00:11:00,980 --> 00:11:04,340
performance turns out to be something

00:11:02,600 --> 00:11:06,200
you have to do all the way up and down

00:11:04,340 --> 00:11:08,510
that makes it an interesting challenge

00:11:06,200 --> 00:11:10,120
and open-source we have the source code

00:11:08,510 --> 00:11:12,700
for every single layer of the stack so

00:11:10,120 --> 00:11:15,700
that became a Sunday afternoon project

00:11:12,700 --> 00:11:19,700
can we do the rest of the stack as well

00:11:15,700 --> 00:11:21,860
and he answer is yes we can and at work

00:11:19,700 --> 00:11:24,200
we realized that this is a hard problem

00:11:21,860 --> 00:11:26,060
a lot of people in the open source world

00:11:24,200 --> 00:11:28,310
have their own sort of project and they

00:11:26,060 --> 00:11:30,620
know kind of what happens around it but

00:11:28,310 --> 00:11:32,779
not a lot of people really look at what

00:11:30,620 --> 00:11:35,960
up and down and from an end user it's

00:11:32,779 --> 00:11:37,520
even harder if can you imagine being a

00:11:35,960 --> 00:11:38,779
system administrator and having to do of

00:11:37,520 --> 00:11:39,830
eight layers of the stack and making

00:11:38,779 --> 00:11:42,380
sure they all work together that's a

00:11:39,830 --> 00:11:45,710
hard problem so one of the things we

00:11:42,380 --> 00:11:47,600
started doing at Intel is okay can we

00:11:45,710 --> 00:11:50,120
just publish one of these make sure it

00:11:47,600 --> 00:11:51,529
works well and then have people and even

00:11:50,120 --> 00:11:53,630
if they don't use it they can at least

00:11:51,529 --> 00:11:55,310
see how it works together and it can

00:11:53,630 --> 00:11:57,560
compare their version of this with what

00:11:55,310 --> 00:11:59,450
what could be and if they come as a way

00:11:57,560 --> 00:12:01,940
of learning from it hey if you want to

00:11:59,450 --> 00:12:03,440
use it you can download it it's great if

00:12:01,940 --> 00:12:06,500
you don't want to use it that's fine too

00:12:03,440 --> 00:12:08,480
but if your performance is not as good

00:12:06,500 --> 00:12:10,700
as what we show you at least steal the

00:12:08,480 --> 00:12:11,930
performance a bit from that alright we

00:12:10,700 --> 00:12:15,200
want to show you what can be done and

00:12:11,930 --> 00:12:16,910
how it is done and this is almost

00:12:15,200 --> 00:12:17,240
integration exercise because it sounds

00:12:16,910 --> 00:12:19,460
boring

00:12:17,240 --> 00:12:20,870
but putting it all together in a way

00:12:19,460 --> 00:12:23,030
that works together it's actually harder

00:12:20,870 --> 00:12:26,000
than it sounds so we did machine

00:12:23,030 --> 00:12:28,400
learning they work great just like for

00:12:26,000 --> 00:12:31,370
first people DevOps team measure every

00:12:28,400 --> 00:12:32,900
day and just keep tweaking at it we

00:12:31,370 --> 00:12:35,630
ended up doing something around data

00:12:32,900 --> 00:12:38,839
analytics data analytics is a even

00:12:35,630 --> 00:12:41,030
bigger problem and spark is and Hadoop a

00:12:38,839 --> 00:12:42,830
great project but getting sparks held up

00:12:41,030 --> 00:12:45,470
correctly using all the layers in the

00:12:42,830 --> 00:12:48,740
stack is actually incredibly complicated

00:12:45,470 --> 00:12:50,360
challenge because you have for to seyne

00:12:48,740 --> 00:12:52,370
have the kernel you have Numa yeah

00:12:50,360 --> 00:12:54,290
network you have all those components if

00:12:52,370 --> 00:12:56,570
you get run on that not optimal the

00:12:54,290 --> 00:13:01,700
whole performance collapses so we

00:12:56,570 --> 00:13:05,060
decided let's do one for spark and we

00:13:01,700 --> 00:13:06,200
did that and this was fine we go put for

00:13:05,060 --> 00:13:07,459
machine learning we got a 12x

00:13:06,200 --> 00:13:09,770
performance increase by doing things

00:13:07,459 --> 00:13:12,200
right now I don't like giving these

00:13:09,770 --> 00:13:14,490
numbers because people say yeah but but

00:13:12,200 --> 00:13:16,290
at least it will 5%

00:13:14,490 --> 00:13:18,000
there's real performance on the table

00:13:16,290 --> 00:13:19,529
doing is right maybe you're in the

00:13:18,000 --> 00:13:21,930
middle of there and you can only get 2x

00:13:19,529 --> 00:13:22,950
more that's fine but these kind of

00:13:21,930 --> 00:13:24,870
things the difference between your

00:13:22,950 --> 00:13:29,730
negative almost right and completely

00:13:24,870 --> 00:13:32,279
right is completely nonlinear we did

00:13:29,730 --> 00:13:35,310
that now machine learning and then

00:13:32,279 --> 00:13:36,420
analytics are pieces we also realized we

00:13:35,310 --> 00:13:40,250
have to make a much more complicated

00:13:36,420 --> 00:13:43,050
system this was a this was basically

00:13:40,250 --> 00:13:44,430
sentiment analysis which was about okay

00:13:43,050 --> 00:13:45,899
we have a bunch of texts coming in from

00:13:44,430 --> 00:13:47,730
let's say Twitter feeds and order of

00:13:45,899 --> 00:13:49,620
sources how do we know our product

00:13:47,730 --> 00:13:51,240
analysis was done well because a very

00:13:49,620 --> 00:13:54,000
typical people thing people do in

00:13:51,240 --> 00:13:56,190
marketing or in detail and it turns out

00:13:54,000 --> 00:13:57,959
it's a bunch of those vertical sects I

00:13:56,190 --> 00:13:58,890
just showed you chained together in a

00:13:57,959 --> 00:14:00,870
way that actually makes them work

00:13:58,890 --> 00:14:02,459
together and I even on a layer of

00:14:00,870 --> 00:14:05,130
complexity making sure they work well

00:14:02,459 --> 00:14:06,959
together and also this you can also get

00:14:05,130 --> 00:14:08,160
on our website as a way of hey here's

00:14:06,959 --> 00:14:10,260
how I'll put all these pieces together

00:14:08,160 --> 00:14:12,149
to get end-to-end performers for your

00:14:10,260 --> 00:14:18,600
total problem not just freeze individual

00:14:12,149 --> 00:14:21,570
pieces okay with that time to get my

00:14:18,600 --> 00:14:22,649
paycheck back and my boss wants me don't

00:14:21,570 --> 00:14:24,899
you to know that we have an info booth

00:14:22,649 --> 00:14:26,490
we have Auto demos all the things I

00:14:24,899 --> 00:14:28,709
showed you we have demos in the booth

00:14:26,490 --> 00:14:30,089
upstairs there's winter session from our

00:14:28,709 --> 00:14:33,149
co-workers we're talking today and

00:14:30,089 --> 00:14:36,770
tomorrow a Friday please visit them come

00:14:33,149 --> 00:14:40,750
talk to us at the booth and oh thank you

00:14:36,770 --> 00:14:40,750

YouTube URL: https://www.youtube.com/watch?v=FucmwYODjqc


