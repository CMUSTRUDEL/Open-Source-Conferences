Title: What's New with U-Boot? - Simon Glass, Google LLC
Publication date: 2019-09-16
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	What's New with U-Boot? - Simon Glass, Google LLC

U-Boot is a widely used bootloader in embedded systems. Many users are unaware of the wide feature-set of U-Boot, particularly features added in the last few years. This talk aims to bring users (and prospective users) up to speed on the state of the art in U-Boot. Topics touched on include driver model, Kconfig and build, logging, sandbox, EFI, builder, firmware packaging (binman), automated testing, Android boot, x86 support and verified boot.
Captions: 
	00:00:00,030 --> 00:00:04,799
okay hello everyone I'm sorry for the

00:00:02,520 --> 00:00:09,500
late start a little bit of laptop

00:00:04,799 --> 00:00:12,090
trouble but I'm on a Chromebook now so

00:00:09,500 --> 00:00:15,150
maybe I should've done that from the

00:00:12,090 --> 00:00:18,029
start so my name is Simon glass I'm

00:00:15,150 --> 00:00:23,310
gonna I'm here to talk a little bit

00:00:18,029 --> 00:00:27,060
about idli about what's new in Ubud so

00:00:23,310 --> 00:00:29,369
here's my goals of this talk I will say

00:00:27,060 --> 00:00:32,219
that I am I don't know everything about

00:00:29,369 --> 00:00:33,390
you Buddhist a huge project but I so I'm

00:00:32,219 --> 00:00:35,160
going to talk a little bit more about

00:00:33,390 --> 00:00:38,700
things they know about the things that I

00:00:35,160 --> 00:00:41,520
don't and it's only natural right and I

00:00:38,700 --> 00:00:44,789
also I also know that some people use

00:00:41,520 --> 00:00:46,680
quite old versions of of u-boot how many

00:00:44,789 --> 00:00:48,320
of you are using the u-boot that's five

00:00:46,680 --> 00:00:51,899
years old

00:00:48,320 --> 00:00:55,260
yeah what about two two years old or

00:00:51,899 --> 00:00:56,910
more yeah so it's not very common to

00:00:55,260 --> 00:00:59,670
update your u-boot so some of these

00:00:56,910 --> 00:01:01,109
things I will mention some things that

00:00:59,670 --> 00:01:06,680
have happened threats older than two

00:01:01,109 --> 00:01:09,510
years okay so just an overview of u-boot

00:01:06,680 --> 00:01:12,600
it's been around quite a while since

00:01:09,510 --> 00:01:15,150
2012 Tom ready tom rainy has been the

00:01:12,600 --> 00:01:16,890
head custodian and there are about 50

00:01:15,150 --> 00:01:20,580
other custodians for different areas of

00:01:16,890 --> 00:01:22,140
the project it's about 2.2 million lines

00:01:20,580 --> 00:01:24,930
of code but a lot of that is board

00:01:22,140 --> 00:01:26,850
specific you know and drivers and things

00:01:24,930 --> 00:01:28,200
like that the amount of code you

00:01:26,850 --> 00:01:31,409
actually compiled into your particular

00:01:28,200 --> 00:01:33,240
board is considerably less there's a

00:01:31,409 --> 00:01:35,369
release cycle that was two months and

00:01:33,240 --> 00:01:37,560
now it's three months there's a lot of

00:01:35,369 --> 00:01:40,560
contributors a lot of things going on in

00:01:37,560 --> 00:01:43,020
the project and it has quite strong

00:01:40,560 --> 00:01:46,020
links to Linux uses Linux code style

00:01:43,020 --> 00:01:49,860
obviously and some Linux drivers and so

00:01:46,020 --> 00:01:51,990
on so I'm not going to talk about these

00:01:49,860 --> 00:01:55,009
things and probably these things have

00:01:51,990 --> 00:01:59,820
been true five or even ten years ago

00:01:55,009 --> 00:02:02,329
certainly five years ago so you boot has

00:01:59,820 --> 00:02:07,950
very wide architecture and board support

00:02:02,329 --> 00:02:10,770
it has a mechanism for loading you boot

00:02:07,950 --> 00:02:12,750
which is you know see 100k when you've

00:02:10,770 --> 00:02:13,440
only got a very small amount of SRAM and

00:02:12,750 --> 00:02:17,040
you need to

00:02:13,440 --> 00:02:20,220
or sdram going that's called TPL in this

00:02:17,040 --> 00:02:22,890
appeal it's got pretty wide amateur

00:02:20,220 --> 00:02:25,110
support there's also a sandbox

00:02:22,890 --> 00:02:26,940
architecture so you can run you boot on

00:02:25,110 --> 00:02:29,640
top of Linux just for testing and for

00:02:26,940 --> 00:02:32,340
development and so certainly in my case

00:02:29,640 --> 00:02:35,430
any feature development is done in

00:02:32,340 --> 00:02:36,900
sandbox because you can use normal host

00:02:35,430 --> 00:02:39,090
debugging tools and all that sort of

00:02:36,900 --> 00:02:42,870
thing and then it just works as expected

00:02:39,090 --> 00:02:44,970
on on the actual board you bid has a

00:02:42,870 --> 00:02:48,480
command line so when you when you run it

00:02:44,970 --> 00:02:50,460
you just get a command line I won't be

00:02:48,480 --> 00:02:52,920
able to run it on this Chromebook but

00:02:50,460 --> 00:02:54,630
take my word for it you can you can run

00:02:52,920 --> 00:02:56,460
all the different commands and and and

00:02:54,630 --> 00:02:57,980
things like you know looking at files in

00:02:56,460 --> 00:03:04,950
the filesystem looking at memory

00:02:57,980 --> 00:03:07,350
changing memory that kind of thing so

00:03:04,950 --> 00:03:09,690
here are some things that you may not

00:03:07,350 --> 00:03:13,470
have known about if you're using the you

00:03:09,690 --> 00:03:16,050
boot from four or five years ago so you

00:03:13,470 --> 00:03:19,680
boot has a driver model now which is

00:03:16,050 --> 00:03:21,570
designed to take care of all the

00:03:19,680 --> 00:03:24,720
different driver drivers and devices you

00:03:21,570 --> 00:03:28,860
might have in your system it uses K

00:03:24,720 --> 00:03:30,450
build and K config the sae verify the

00:03:28,860 --> 00:03:33,530
several actually that's at least three

00:03:30,450 --> 00:03:36,690
verified or secure boot mechanisms

00:03:33,530 --> 00:03:38,880
supports firmware update and fastboot

00:03:36,690 --> 00:03:40,890
that sort of thing and it's attached to

00:03:38,880 --> 00:03:44,610
the Coverity system so we actually get

00:03:40,890 --> 00:03:47,580
security emails telling us to go and fix

00:03:44,610 --> 00:03:50,780
our code that kind of thing so just to

00:03:47,580 --> 00:03:54,000
look at a couple of these things

00:03:50,780 --> 00:03:56,610
first of all driver model how many of

00:03:54,000 --> 00:03:59,880
you have ever used driver models scene

00:03:56,610 --> 00:04:05,790
driver model okay some of you all right

00:03:59,880 --> 00:04:08,370
so it's it's fair to say that it's it

00:04:05,790 --> 00:04:10,890
came out in 2004 and I think it's sorry

00:04:08,370 --> 00:04:13,050
2014 and I think it's settled down a bit

00:04:10,890 --> 00:04:16,530
now we have it sort of embedded in most

00:04:13,050 --> 00:04:19,830
areas of you boo the goal is to allow

00:04:16,530 --> 00:04:22,289
you to specify the devices in your

00:04:19,830 --> 00:04:26,150
system using device tree as we do on

00:04:22,289 --> 00:04:28,670
Linux and by doing that we can then

00:04:26,150 --> 00:04:30,680
we can then effectively use those

00:04:28,670 --> 00:04:32,570
devices within u-boot without having to

00:04:30,680 --> 00:04:35,270
sort of run a whole lot of code to set

00:04:32,570 --> 00:04:37,550
them up so here's an example on the

00:04:35,270 --> 00:04:41,660
right you can see there's an I squared C

00:04:37,550 --> 00:04:45,020
bus it has a PMAC in it that PMAC has a

00:04:41,660 --> 00:04:48,680
l do and we want that l do to be set to

00:04:45,020 --> 00:04:51,260
2.8 volts and some other things as well

00:04:48,680 --> 00:04:55,100
and so there it's a bottom bottom left

00:04:51,260 --> 00:04:57,620
you can see that we're all automatically

00:04:55,100 --> 00:04:59,990
setting the all the regulator's that had

00:04:57,620 --> 00:05:01,610
that where we know the voltage you can

00:04:59,990 --> 00:05:04,130
imagine behind-the-scenes what's

00:05:01,610 --> 00:05:06,530
happening it's going and finding that P

00:05:04,130 --> 00:05:09,230
Mac you boot has lazy and initialization

00:05:06,530 --> 00:05:10,910
so I'll only do it when it needs to it

00:05:09,230 --> 00:05:12,860
will go on to that I squid C bus it will

00:05:10,910 --> 00:05:15,620
send some register commands to that P

00:05:12,860 --> 00:05:18,850
Mac to see it the voltages and it will

00:05:15,620 --> 00:05:18,850
do that for the three different

00:05:19,000 --> 00:05:22,910
regulators that we've mentioned there so

00:05:21,500 --> 00:05:24,860
that's something that driver model can

00:05:22,910 --> 00:05:26,120
do whereas previously perhaps you would

00:05:24,860 --> 00:05:29,780
have had to code all this up with

00:05:26,120 --> 00:05:34,550
register access as directly and the in

00:05:29,780 --> 00:05:36,440
the code and your board code I'll just

00:05:34,550 --> 00:05:39,770
mention this I don't think it's widely

00:05:36,440 --> 00:05:41,930
used but there is a mechanism for for

00:05:39,770 --> 00:05:43,160
measuring boot time through the

00:05:41,930 --> 00:05:45,710
different stages of you boot through

00:05:43,160 --> 00:05:47,630
different phases and getting that a sort

00:05:45,710 --> 00:05:49,010
of micro stick and count to find out

00:05:47,630 --> 00:05:50,990
where your boot where your boot timers

00:05:49,010 --> 00:05:52,940
going and there's even a tracing

00:05:50,990 --> 00:05:56,780
mechanism lets you see function tracing

00:05:52,940 --> 00:06:00,260
it's a little bit atrophied now but you

00:05:56,780 --> 00:06:01,580
can it will record tracing information

00:06:00,260 --> 00:06:04,640
you can actually write it here we're

00:06:01,580 --> 00:06:07,820
writing it using a network TFTP put

00:06:04,640 --> 00:06:10,060
command to and then analyzing it on the

00:06:07,820 --> 00:06:10,060
host

00:06:13,590 --> 00:06:18,570
so I want to mention build men a couple

00:06:16,290 --> 00:06:20,820
of years ago thus the there was a script

00:06:18,570 --> 00:06:22,230
called Michael which was designed to

00:06:20,820 --> 00:06:23,970
make all the boards and they would tell

00:06:22,230 --> 00:06:26,040
you whether things were good or not and

00:06:23,970 --> 00:06:28,590
that got retired in favor of this thing

00:06:26,040 --> 00:06:30,510
called build man on the ball at the

00:06:28,590 --> 00:06:32,760
bottom right you can see I'm doing that

00:06:30,510 --> 00:06:36,750
build a very ambitious build here I'm

00:06:32,760 --> 00:06:39,420
building a tree with 145 commits in that

00:06:36,750 --> 00:06:41,760
for all of the boards is about 1,300

00:06:39,420 --> 00:06:43,110
boards and you boo and it's busy they're

00:06:41,760 --> 00:06:44,310
working away and it's going to be done

00:06:43,110 --> 00:06:46,200
in about 24 hours

00:06:44,310 --> 00:06:49,080
I didn't continue that I didn't leave

00:06:46,200 --> 00:06:50,430
that finish but that's build man

00:06:49,080 --> 00:06:54,300
essentially lets you building a number

00:06:50,430 --> 00:06:55,320
of commits it lets you build for any

00:06:54,300 --> 00:06:56,970
number of boards you can select

00:06:55,320 --> 00:06:59,190
architectures and that kind of things

00:06:56,970 --> 00:07:01,020
and hence the handles are tall chain for

00:06:59,190 --> 00:07:03,630
you at downloads the tool chains if you

00:07:01,020 --> 00:07:07,530
ask it to and it's pretty pretty easy to

00:07:03,630 --> 00:07:09,630
use and on the top you've got the

00:07:07,530 --> 00:07:11,760
analysis face so when you when you say -

00:07:09,630 --> 00:07:12,960
estimate to build man it looks at

00:07:11,760 --> 00:07:16,200
existing build that you've actually

00:07:12,960 --> 00:07:18,120
completed and it here it's telling us

00:07:16,200 --> 00:07:20,670
where our code size is changing or our

00:07:18,120 --> 00:07:22,080
data size it's a little bit there's a

00:07:20,670 --> 00:07:24,770
lot of changes going on here because

00:07:22,080 --> 00:07:27,360
this is a series which introduces

00:07:24,770 --> 00:07:31,770
reflectors and introduces sdram support

00:07:27,360 --> 00:07:34,290
for a particular SOC and yeah there's a

00:07:31,770 --> 00:07:36,780
lot of commits but basically if you look

00:07:34,290 --> 00:07:39,960
at this look at this here you can see

00:07:36,780 --> 00:07:42,180
the tick size has gone up by about 60

00:07:39,960 --> 00:07:43,950
bytes which isn't too bad and some of

00:07:42,180 --> 00:07:46,440
these functions have gone up in size 3

00:07:43,950 --> 00:07:47,940
it means they've got bigger green means

00:07:46,440 --> 00:07:49,290
they've got smaller so it's pretty easy

00:07:47,940 --> 00:07:51,840
to see where you've made things better

00:07:49,290 --> 00:07:53,790
or worse in terms of code size bill Ben

00:07:51,840 --> 00:07:57,180
also supports conflict changes in

00:07:53,790 --> 00:07:58,950
environment changes so now I'm going to

00:07:57,180 --> 00:08:00,570
talk about some of these new things this

00:07:58,950 --> 00:08:04,010
is I'm just picking a selection of

00:08:00,570 --> 00:08:06,780
things but I'm going to going to mention

00:08:04,010 --> 00:08:08,010
hopefully if you've not looked at you

00:08:06,780 --> 00:08:09,180
boot in the last couple of years you

00:08:08,010 --> 00:08:11,550
won't quite know what these are and

00:08:09,180 --> 00:08:12,780
you'll learn something if not please

00:08:11,550 --> 00:08:18,750
tell me what you wanted to know

00:08:12,780 --> 00:08:23,430
afterwards so this thing is device tree

00:08:18,750 --> 00:08:25,200
overlays these are not not needed on

00:08:23,430 --> 00:08:26,280
every board but here's an example of a

00:08:25,200 --> 00:08:28,830
base board where we can

00:08:26,280 --> 00:08:31,800
number of additional add-on boards to it

00:08:28,830 --> 00:08:34,349
and the the device tree basically is

00:08:31,800 --> 00:08:35,909
used to describe what devices are on

00:08:34,349 --> 00:08:37,590
that board and when you add a different

00:08:35,909 --> 00:08:39,240
adapter board on top

00:08:37,590 --> 00:08:41,510
obviously you're changing the devices

00:08:39,240 --> 00:08:44,600
that are available and the mechanism

00:08:41,510 --> 00:08:47,850
used in the kernel to support this is

00:08:44,600 --> 00:08:51,000
device tree overlays so here on the

00:08:47,850 --> 00:08:53,510
right you can sort of see on loading in

00:08:51,000 --> 00:08:56,550
a couple of device trees I'm then

00:08:53,510 --> 00:08:58,050
applying the overlay and now I can see

00:08:56,550 --> 00:09:00,330
that my display has appeared whereas

00:08:58,050 --> 00:09:02,760
previously it wasn't there so that's a

00:09:00,330 --> 00:09:08,280
very very simple example of an overlay

00:09:02,760 --> 00:09:10,740
being applied in you boo and so when we

00:09:08,280 --> 00:09:12,930
have a node on board we can access those

00:09:10,740 --> 00:09:14,730
peripherals if you do this early enough

00:09:12,930 --> 00:09:18,780
a new boot then you boot can use those

00:09:14,730 --> 00:09:21,720
peripherals too you can use that same

00:09:18,780 --> 00:09:23,910
device tree so obviously that's

00:09:21,720 --> 00:09:27,680
supported in Ubud and SPL workers in

00:09:23,910 --> 00:09:29,880
progress it's also possible to do this

00:09:27,680 --> 00:09:31,890
with in Linux but the nice thing about

00:09:29,880 --> 00:09:33,960
having it early having it ready to go is

00:09:31,890 --> 00:09:39,450
everything as everything is consistent

00:09:33,960 --> 00:09:42,080
so you boots head device tree for quite

00:09:39,450 --> 00:09:44,610
a while but it was a little bit clunky

00:09:42,080 --> 00:09:48,330
there's a new interface called a live

00:09:44,610 --> 00:09:51,330
tree interface the code for that was

00:09:48,330 --> 00:09:53,910
largely copied out of Linux essentially

00:09:51,330 --> 00:09:56,460
there's a new API called div read and

00:09:53,910 --> 00:09:58,070
you use that now to say you know read it

00:09:56,460 --> 00:10:01,230
and read a device tree property from

00:09:58,070 --> 00:10:03,390
from from the device tree see we've got

00:10:01,230 --> 00:10:05,070
several examples here the simplest one

00:10:03,390 --> 00:10:09,960
is on the bottom left here where we're

00:10:05,070 --> 00:10:11,190
reading reading boolean values from from

00:10:09,960 --> 00:10:12,839
the device tree and it's just going to

00:10:11,190 --> 00:10:15,930
read it from the node associated with

00:10:12,839 --> 00:10:18,360
that device and we've got other things

00:10:15,930 --> 00:10:21,570
here like reading the address of the

00:10:18,360 --> 00:10:24,839
peripheral and reading resources and so

00:10:21,570 --> 00:10:26,100
on so it's a fairly consistent interface

00:10:24,839 --> 00:10:28,080
you don't have to worry about device

00:10:26,100 --> 00:10:31,310
tree pointers or anything like that if

00:10:28,080 --> 00:10:34,320
you have not got configure if live

00:10:31,310 --> 00:10:36,060
enabled it will still work the div read

00:10:34,320 --> 00:10:37,860
interface still works as transparent

00:10:36,060 --> 00:10:38,850
it'll just it'll work and whether no

00:10:37,860 --> 00:10:41,699
matter whether I'd say

00:10:38,850 --> 00:10:42,959
live tree or flattery so in your boot

00:10:41,699 --> 00:10:48,509
now we're trying to use this interface

00:10:42,959 --> 00:10:51,300
and preference to anything else so this

00:10:48,509 --> 00:10:54,000
is a little bit of a crazy thing it's

00:10:51,300 --> 00:10:56,160
not really widely used in new boot but

00:10:54,000 --> 00:10:59,250
there are about I think five or ten

00:10:56,160 --> 00:11:01,920
boards that user the device tree does it

00:10:59,250 --> 00:11:08,730
overhead typically the code size

00:11:01,920 --> 00:11:11,399
increase on on armors 3k three or four K

00:11:08,730 --> 00:11:12,690
and the device tree itself I mean

00:11:11,399 --> 00:11:16,529
obviously the device trees are typically

00:11:12,690 --> 00:11:19,470
40 60 K or even 100 K in size what we do

00:11:16,529 --> 00:11:23,190
in Ubud is we we actually grep down the

00:11:19,470 --> 00:11:25,860
if the the device tree and remove the

00:11:23,190 --> 00:11:27,930
things that aren't used in SPL so yes PL

00:11:25,860 --> 00:11:29,550
is very small memory constrained thing

00:11:27,930 --> 00:11:33,600
we can typically get the device tree

00:11:29,550 --> 00:11:36,089
down to about 3k in SPL so the over here

00:11:33,600 --> 00:11:38,850
typically is sucks to see them K which

00:11:36,089 --> 00:11:39,690
is not too bad but if you've only got 32

00:11:38,850 --> 00:11:43,290
cave Ram

00:11:39,690 --> 00:11:45,660
it's very matte it's too much so this is

00:11:43,290 --> 00:11:49,290
a scheme for converting the device tree

00:11:45,660 --> 00:11:51,600
into C automatically you can see what

00:11:49,290 --> 00:11:53,639
it's doing here on the top right you've

00:11:51,600 --> 00:11:56,399
got a device tree node for a memory

00:11:53,639 --> 00:11:58,949
controller and here's what it produces

00:11:56,399 --> 00:12:00,899
it produces this declaration and the

00:11:58,949 --> 00:12:03,209
header file here and then it produces

00:12:00,899 --> 00:12:06,680
the actual contents of the device tree

00:12:03,209 --> 00:12:09,329
here and then declares a you boot device

00:12:06,680 --> 00:12:11,370
so hopefully that makes some sort of

00:12:09,329 --> 00:12:13,139
sense you can see what's going on the

00:12:11,370 --> 00:12:15,240
point is when you run is PL now you

00:12:13,139 --> 00:12:17,100
don't need the device tree it's actually

00:12:15,240 --> 00:12:18,899
it's just not that's not necessary at

00:12:17,100 --> 00:12:21,779
all you've got all the data you need and

00:12:18,899 --> 00:12:24,060
available in C and if you're interested

00:12:21,779 --> 00:12:24,449
the code that's actually used to access

00:12:24,060 --> 00:12:26,040
it

00:12:24,449 --> 00:12:28,829
there's really just a series of

00:12:26,040 --> 00:12:31,560
assignments to assign from the this

00:12:28,829 --> 00:12:33,209
weird structure that dtc creates into

00:12:31,560 --> 00:12:35,699
your correct one the normal one that you

00:12:33,209 --> 00:12:37,649
would use with device tree and if that's

00:12:35,699 --> 00:12:39,930
enabled you do you do this special code

00:12:37,649 --> 00:12:42,300
to copy things over and it's much

00:12:39,930 --> 00:12:44,509
smaller code than having the 50 tag in

00:12:42,300 --> 00:12:44,509
there

00:12:45,320 --> 00:12:51,210
a couple of other things to mention is

00:12:48,480 --> 00:12:53,700
Android bootloader support avb Liberty

00:12:51,210 --> 00:12:59,490
Lib a V B is an you boot now and there's

00:12:53,700 --> 00:13:02,190
a there's also an opt-in oakum and so

00:12:59,490 --> 00:13:04,620
that is an example of a boot flow

00:13:02,190 --> 00:13:07,650
they're very simple you run through

00:13:04,620 --> 00:13:09,090
these this verify command if it verifies

00:13:07,650 --> 00:13:12,810
in all is good otherwise you've got a

00:13:09,090 --> 00:13:19,670
problem it's just I think it's the third

00:13:12,810 --> 00:13:23,180
or fourth verified boot you boot

00:13:19,670 --> 00:13:26,880
sometime they see a move to get lib and

00:13:23,180 --> 00:13:30,300
I quite like it

00:13:26,880 --> 00:13:32,360
it's it does similar things to Travis

00:13:30,300 --> 00:13:34,950
it's a little more integrated

00:13:32,360 --> 00:13:37,710
essentially when you push a commit up to

00:13:34,950 --> 00:13:38,850
get lab it goes ahead and builds it for

00:13:37,710 --> 00:13:40,920
you and tells you whether there's any

00:13:38,850 --> 00:13:44,880
problems and you can see see there

00:13:40,920 --> 00:13:46,890
actually errors and so on so so that's

00:13:44,880 --> 00:13:50,340
fairly new we're still using Travis CI

00:13:46,890 --> 00:13:52,260
but we'll see how it goes if you've got

00:13:50,340 --> 00:13:54,360
a build server sitting around not doing

00:13:52,260 --> 00:13:56,250
anything and want to hook it up to

00:13:54,360 --> 00:13:58,520
provide capacity please don't let me

00:13:56,250 --> 00:13:58,520
stop you

00:13:58,730 --> 00:14:04,980
which leads me on to this which i think

00:14:01,830 --> 00:14:07,950
is really cool you boots

00:14:04,980 --> 00:14:10,170
Finley's not the best place for testing

00:14:07,950 --> 00:14:11,940
quite often when people write firmware

00:14:10,170 --> 00:14:14,160
they just write the code and then

00:14:11,940 --> 00:14:17,730
manually test it and they don't change

00:14:14,160 --> 00:14:19,050
it either and that sort of thing and

00:14:17,730 --> 00:14:20,940
well maybe there's a lot of manual

00:14:19,050 --> 00:14:22,830
manual testing or functional testing of

00:14:20,940 --> 00:14:24,930
the actual device and that sort of thing

00:14:22,830 --> 00:14:27,120
with you boot in the last several years

00:14:24,930 --> 00:14:29,190
there's been an effort to increase the

00:14:27,120 --> 00:14:34,440
amount of automated testing that's

00:14:29,190 --> 00:14:37,050
available so there is a there is a thing

00:14:34,440 --> 00:14:39,930
called pi test we basically a number of

00:14:37,050 --> 00:14:42,300
unit tests and functional tests that are

00:14:39,930 --> 00:14:44,490
that are built into you boot things like

00:14:42,300 --> 00:14:46,710
for example doesn't do the file systems

00:14:44,490 --> 00:14:49,710
work can i you know write and read files

00:14:46,710 --> 00:14:53,160
and the file system support can't do all

00:14:49,710 --> 00:14:55,560
of the different device tree sorry

00:14:53,160 --> 00:14:58,320
driver model new classes they actually

00:14:55,560 --> 00:15:02,220
work for example there's a test

00:14:58,320 --> 00:15:04,620
it basically uses a simulated USB stick

00:15:02,220 --> 00:15:06,090
it goes and tries to read you know a

00:15:04,620 --> 00:15:07,920
couple of blocks off this and related

00:15:06,090 --> 00:15:09,770
USB stick obviously that requires going

00:15:07,920 --> 00:15:12,900
right through the whole USB stick and

00:15:09,770 --> 00:15:17,070
therefore we get some feeling that

00:15:12,900 --> 00:15:19,560
they're kind of works when you run it's

00:15:17,070 --> 00:15:21,480
actually make küçük what make make check

00:15:19,560 --> 00:15:24,630
it will run all these tests it takes

00:15:21,480 --> 00:15:26,430
about a minute or so including including

00:15:24,630 --> 00:15:29,280
all these things and they use sandbox

00:15:26,430 --> 00:15:31,950
when you run them on your machine the

00:15:29,280 --> 00:15:33,510
test can also run on qmu or they can run

00:15:31,950 --> 00:15:35,670
on real hardware with it with

00:15:33,510 --> 00:15:38,310
appropriate hooks and there's a thing

00:15:35,670 --> 00:15:42,920
called tea bot does anyone using tea pot

00:15:38,310 --> 00:15:42,920
does anyone familiar with that yeah okay

00:15:43,050 --> 00:15:48,750
so I don't I guess it's not widely used

00:15:46,170 --> 00:15:52,170
but this is very flexible it's you test

00:15:48,750 --> 00:15:54,680
you boot the Nexen and beyond and on

00:15:52,170 --> 00:15:57,000
real hardware and it clicks the

00:15:54,680 --> 00:15:58,380
information the failures and that sort

00:15:57,000 --> 00:15:59,970
of thing so I think what's going to

00:15:58,380 --> 00:16:03,390
happen over the next few years as more

00:15:59,970 --> 00:16:05,480
and more of the stuff is going to it's

00:16:03,390 --> 00:16:08,160
going to be become possible

00:16:05,480 --> 00:16:10,620
traditionally or more recently there has

00:16:08,160 --> 00:16:12,330
been this use of these Wi-Fi flash

00:16:10,620 --> 00:16:14,400
sticks they can you know you can they

00:16:12,330 --> 00:16:16,770
use for cameras but you can basically

00:16:14,400 --> 00:16:19,170
send you boot over to it and then reboot

00:16:16,770 --> 00:16:21,180
the device with with the some sort of

00:16:19,170 --> 00:16:23,430
power control module and that allows you

00:16:21,180 --> 00:16:25,910
to test that it's working but there is

00:16:23,430 --> 00:16:29,400
this thing which I recently discovered

00:16:25,910 --> 00:16:32,190
maybe I'm just slow which record is D

00:16:29,400 --> 00:16:34,440
wire which plugs into your board and

00:16:32,190 --> 00:16:37,620
then connects to your development

00:16:34,440 --> 00:16:41,370
machine via USB so now you can control

00:16:37,620 --> 00:16:43,140
you can write o to the SD card over USB

00:16:41,370 --> 00:16:45,450
some sort of new gear boot Linux

00:16:43,140 --> 00:16:47,910
whatever and then use power control to

00:16:45,450 --> 00:16:49,980
reboot it and now you can and obviously

00:16:47,910 --> 00:16:52,860
access the console and see what's

00:16:49,980 --> 00:16:55,140
happening there so connecting it to get

00:16:52,860 --> 00:16:56,970
lab I think will happen hopefully as

00:16:55,140 --> 00:17:00,720
well more more people will have these

00:16:56,970 --> 00:17:03,710
things running automated tests on on

00:17:00,720 --> 00:17:03,710
actual real hardware

00:17:04,520 --> 00:17:11,789
so you boot supports efi if i interface

00:17:08,610 --> 00:17:13,919
effectively you can boot you can boot

00:17:11,789 --> 00:17:16,860
for example well you can boot that next

00:17:13,919 --> 00:17:22,049
week you can boot grub to and use that

00:17:16,860 --> 00:17:23,370
and the this came from some work from

00:17:22,049 --> 00:17:25,140
Susie and I think it's been fairly

00:17:23,370 --> 00:17:30,179
widely publicized have been a few talks

00:17:25,140 --> 00:17:32,070
about essentially with this you can you

00:17:30,179 --> 00:17:34,620
can run an EFI application new boot

00:17:32,070 --> 00:17:36,570
provides console support serial support

00:17:34,620 --> 00:17:38,370
and it worked asking that kind of thing

00:17:36,570 --> 00:17:41,390
and then you don't so you don't actually

00:17:38,370 --> 00:17:44,580
need UEFI as such if your platform

00:17:41,390 --> 00:17:48,320
supports you boo and there's pretty good

00:17:44,580 --> 00:17:48,320
tests associated with that as well

00:17:51,919 --> 00:17:56,429
there's a recent change to use

00:17:54,390 --> 00:17:59,460
restructure text for documentation and

00:17:56,429 --> 00:18:01,110
also the documentation this is a large

00:17:59,460 --> 00:18:02,580
amount of documentation and you boot

00:18:01,110 --> 00:18:04,830
it's all sort of traditionally been in

00:18:02,580 --> 00:18:06,780
this big doctoral jury and you kind of

00:18:04,830 --> 00:18:09,390
grip for it really because otherwise you

00:18:06,780 --> 00:18:11,760
couldn't figure out where it is so so

00:18:09,390 --> 00:18:14,850
this is so narrow it's kind of moving to

00:18:11,760 --> 00:18:16,320
being inside a directory which mirrors

00:18:14,850 --> 00:18:18,570
the architecture and the board

00:18:16,320 --> 00:18:20,850
directories so for example you'll put

00:18:18,570 --> 00:18:22,860
your board or documentation and dock

00:18:20,850 --> 00:18:25,919
board in the name of your board that

00:18:22,860 --> 00:18:28,350
kind of thing so I think there's a minor

00:18:25,919 --> 00:18:32,610
change but it should help people find

00:18:28,350 --> 00:18:34,530
things a bit more easily and I'm just

00:18:32,610 --> 00:18:37,049
gonna mention some things some other

00:18:34,530 --> 00:18:41,549
random things these are things that I've

00:18:37,049 --> 00:18:42,539
worked on and that I wanted to you have

00:18:41,549 --> 00:18:46,200
to put up with me talking about

00:18:42,539 --> 00:18:48,900
basically don't take too long the first

00:18:46,200 --> 00:18:49,409
thing is been men but men is a firmware

00:18:48,900 --> 00:18:51,450
Packer

00:18:49,409 --> 00:18:53,250
it's not it's not widely used it's used

00:18:51,450 --> 00:18:56,720
by Sonic's I and taro and a few other

00:18:53,250 --> 00:18:59,340
things in x86 it's written in Python

00:18:56,720 --> 00:19:01,200
it's basically the way you use it is you

00:18:59,340 --> 00:19:03,600
put a device tree description of your

00:19:01,200 --> 00:19:05,190
image and in there somewhere

00:19:03,600 --> 00:19:07,559
and when you run bin man it will

00:19:05,190 --> 00:19:09,570
automatically produce an image here you

00:19:07,559 --> 00:19:12,960
can see it's taking the SPL that's

00:19:09,570 --> 00:19:14,669
taking the image it's creating a bit

00:19:12,960 --> 00:19:17,460
weird but this is a have you heard of

00:19:14,669 --> 00:19:19,830
coreboot it's another bootloader

00:19:17,460 --> 00:19:21,690
the state is making a corporate file

00:19:19,830 --> 00:19:23,850
system with these three files in it you

00:19:21,690 --> 00:19:25,980
know with some compression and so on so

00:19:23,850 --> 00:19:29,070
it's what Birdman does it's basically a

00:19:25,980 --> 00:19:30,990
one pass film where Pecha based on a

00:19:29,070 --> 00:19:32,700
configuration description so it's not

00:19:30,990 --> 00:19:34,860
sort of run lots of commands to build up

00:19:32,700 --> 00:19:36,990
your image you just describe it in one

00:19:34,860 --> 00:19:39,149
place and it's very quickly puts it

00:19:36,990 --> 00:19:40,710
together it's very handy for complex

00:19:39,149 --> 00:19:42,390
images you know when you've got assign a

00:19:40,710 --> 00:19:44,039
particular piece of the image and put

00:19:42,390 --> 00:19:47,159
some put that data somewhere else and

00:19:44,039 --> 00:19:50,970
all that kind of thing so the status of

00:19:47,159 --> 00:19:53,039
this is it's it's kind of I wouldn't

00:19:50,970 --> 00:19:55,350
call it feature complete but it's it's

00:19:53,039 --> 00:19:56,940
been in use for a while and recently

00:19:55,350 --> 00:20:01,710
it's had a bit more if and we'll work on

00:19:56,940 --> 00:20:04,980
it and we'll see how it goes so those of

00:20:01,710 --> 00:20:08,010
you who know me a little bit over the

00:20:04,980 --> 00:20:10,740
years I'm not personally have not had a

00:20:08,010 --> 00:20:14,549
huge amount of interest in x86 stuff

00:20:10,740 --> 00:20:17,070
however various reasons I was the

00:20:14,549 --> 00:20:19,100
briefly the x86 maintainer for you boo

00:20:17,070 --> 00:20:21,840
we now have a much better maintainer

00:20:19,100 --> 00:20:25,320
luckily that I still maintain some

00:20:21,840 --> 00:20:27,059
interest in it and boot supports be a

00:20:25,320 --> 00:20:31,529
middle operation on and furious

00:20:27,059 --> 00:20:34,500
different x86 CPUs traditionally excit

00:20:31,529 --> 00:20:37,649
six uses you know UEFI and core boot and

00:20:34,500 --> 00:20:39,950
so on but would the Intel FSP that's

00:20:37,649 --> 00:20:42,090
that's become kind of standard now

00:20:39,950 --> 00:20:43,830
there's actually not that much code

00:20:42,090 --> 00:20:47,850
needed in the boot loader a lot of it is

00:20:43,830 --> 00:20:50,010
in the FSP in fact intel has a thing

00:20:47,850 --> 00:20:53,460
called slim boot loader anyone who'd of

00:20:50,010 --> 00:20:57,600
that yeah it's very new but this

00:20:53,460 --> 00:20:59,700
effectively lets you boot using the FSB

00:20:57,600 --> 00:21:02,520
this sort of binary blood stuff that

00:20:59,700 --> 00:21:04,950
Intel provides and very quickly you to

00:21:02,520 --> 00:21:07,440
get something running on on a platform

00:21:04,950 --> 00:21:09,510
and some bootloader recently supports

00:21:07,440 --> 00:21:10,620
you boot as a payload so you can jump

00:21:09,510 --> 00:21:11,789
into you boot and then have all these

00:21:10,620 --> 00:21:13,620
features you know all the e-book

00:21:11,789 --> 00:21:15,950
features that you like that you expect

00:21:13,620 --> 00:21:18,330
but you ever need to do very much work

00:21:15,950 --> 00:21:22,409
so x36

00:21:18,330 --> 00:21:26,370
it's interesting environment I'll just

00:21:22,409 --> 00:21:28,770
quickly mention logging again it's not

00:21:26,370 --> 00:21:30,420
widely used as feeling you but if you

00:21:28,770 --> 00:21:33,270
build for examples if you

00:21:30,420 --> 00:21:36,330
Ubu with all the logging enabled and run

00:21:33,270 --> 00:21:37,470
it it will produce huge amounts of stuff

00:21:36,330 --> 00:21:40,010
all the debugs

00:21:37,470 --> 00:21:42,860
turn into you know print ifs or whatever

00:21:40,010 --> 00:21:45,360
so there's a there's an ability now to

00:21:42,860 --> 00:21:47,070
categorize things you know that say for

00:21:45,360 --> 00:21:49,440
example it's a USB message or a spy

00:21:47,070 --> 00:21:51,720
flash message and you can filter

00:21:49,440 --> 00:21:56,130
accordingly there's different levels

00:21:51,720 --> 00:21:59,280
from you know debug up to info a warning

00:21:56,130 --> 00:22:00,840
or critical or whatever and and some

00:21:59,280 --> 00:22:04,830
little helpers like this thing here

00:22:00,840 --> 00:22:08,400
which if if there was an error then we

00:22:04,830 --> 00:22:10,320
just return the we log a message and

00:22:08,400 --> 00:22:13,200
return the euro now this gets cut down

00:22:10,320 --> 00:22:14,520
to just simply a return of the error but

00:22:13,200 --> 00:22:16,050
if you've got logging enabled you get a

00:22:14,520 --> 00:22:17,940
message telling you why I've returned

00:22:16,050 --> 00:22:19,710
with an error this can be very handy

00:22:17,940 --> 00:22:23,100
when you're trying to debug a particular

00:22:19,710 --> 00:22:25,590
driver or whatever so again it's not

00:22:23,100 --> 00:22:28,050
really widely used but I think we'll

00:22:25,590 --> 00:22:31,740
start to see the sort of thing used a

00:22:28,050 --> 00:22:34,410
bit more and pac-man is really really

00:22:31,740 --> 00:22:35,640
old I really shouldn't be over I really

00:22:34,410 --> 00:22:38,070
shouldn't be talking about this and

00:22:35,640 --> 00:22:40,020
something that's new but many people are

00:22:38,070 --> 00:22:44,130
not aware of it it's just a little tool

00:22:40,020 --> 00:22:45,810
which lets you essentially seen building

00:22:44,130 --> 00:22:47,760
there's a patch set and send it to a

00:22:45,810 --> 00:22:50,850
mailing list here we're going to send it

00:22:47,760 --> 00:22:52,500
to you boo see see this guy and we're

00:22:50,850 --> 00:22:54,780
gonna here's our cover letter and it

00:22:52,500 --> 00:22:56,790
will just produce the patches tidy them

00:22:54,780 --> 00:22:58,140
up and email them off for you will let

00:22:56,790 --> 00:23:01,410
you check them first and that kind of

00:22:58,140 --> 00:23:03,390
thing so just mention that I'm not going

00:23:01,410 --> 00:23:08,880
to do a little demo doesn't run on my

00:23:03,390 --> 00:23:12,030
Chromebook so it's gonna talk at the end

00:23:08,880 --> 00:23:13,130
about what you buy you boot might look

00:23:12,030 --> 00:23:16,320
like in a few years

00:23:13,130 --> 00:23:18,030
so you buddhas it's very hard to predict

00:23:16,320 --> 00:23:19,440
because it's very much see if i

00:23:18,030 --> 00:23:22,470
contribute as people someone will turn

00:23:19,440 --> 00:23:25,290
up and say gosh I wish you boot could

00:23:22,470 --> 00:23:26,790
you know head EFI supporter I wish it

00:23:25,290 --> 00:23:28,980
supported risk five or whatever it might

00:23:26,790 --> 00:23:31,020
be and we never really know you know

00:23:28,980 --> 00:23:33,390
never really predict it basically is

00:23:31,020 --> 00:23:37,890
driven by the market and by you know

00:23:33,390 --> 00:23:41,429
technical demands right and so lots of

00:23:37,890 --> 00:23:44,370
random things come along out of the blue

00:23:41,429 --> 00:23:46,710
you boot is basically there to quickly

00:23:44,370 --> 00:23:48,840
and easily boot your system into an

00:23:46,710 --> 00:23:51,450
operating system and whatever that

00:23:48,840 --> 00:23:53,280
system might look like and so as systems

00:23:51,450 --> 00:23:55,169
change and as trends change and so on

00:23:53,280 --> 00:23:58,620
new boots obviously going to evolve but

00:23:55,169 --> 00:24:02,039
here's a few things that I think I can

00:23:58,620 --> 00:24:05,400
predict with some confidence I mentioned

00:24:02,039 --> 00:24:07,799
the the test farm business and I think I

00:24:05,400 --> 00:24:09,870
think we'll actually see a lot of

00:24:07,799 --> 00:24:12,780
custodians having two or three boards or

00:24:09,870 --> 00:24:15,030
four boards setting the running tests

00:24:12,780 --> 00:24:16,620
pointing to a particular tree maybe it's

00:24:15,030 --> 00:24:19,169
master or some of the other some of the

00:24:16,620 --> 00:24:21,299
other trees on get led and running

00:24:19,169 --> 00:24:23,070
automated tests and emailing me or

00:24:21,299 --> 00:24:26,010
somebody when they break when they break

00:24:23,070 --> 00:24:27,900
things so the I for example I know that

00:24:26,010 --> 00:24:29,730
Nvidia does this because every now and

00:24:27,900 --> 00:24:31,470
then I'll get an email from someone some

00:24:29,730 --> 00:24:35,070
would have made a thing a video saying

00:24:31,470 --> 00:24:38,789
you broke this not very often I should I

00:24:35,070 --> 00:24:40,260
should hasten to say but but yeah I

00:24:38,789 --> 00:24:42,059
don't think there's very many companies

00:24:40,260 --> 00:24:44,640
doing that I listed some I think do it

00:24:42,059 --> 00:24:46,799
but it's not widely widespread I think

00:24:44,640 --> 00:24:50,730
that will grow and the benefit is that

00:24:46,799 --> 00:24:52,049
regressions should become less common at

00:24:50,730 --> 00:24:54,360
the moment if you're using a really

00:24:52,049 --> 00:24:56,400
widely used board it pretty much always

00:24:54,360 --> 00:24:58,919
works but if using some weird board that

00:24:56,400 --> 00:25:00,450
you know and you and your it's been two

00:24:58,919 --> 00:25:02,340
years since you updated you boot and

00:25:00,450 --> 00:25:04,559
you're going back to our data in maybe

00:25:02,340 --> 00:25:07,470
there'll be a problem because that's not

00:25:04,559 --> 00:25:09,929
getting a lot of testing I think the

00:25:07,470 --> 00:25:12,059
driver model migration will start to

00:25:09,929 --> 00:25:14,970
come to an end there's quite a lot of

00:25:12,059 --> 00:25:18,210
deadlines this year for most of the

00:25:14,970 --> 00:25:21,000
subsystems and Kay config I think it

00:25:18,210 --> 00:25:22,590
used to be 9,000 config options we still

00:25:21,000 --> 00:25:24,360
have four and a half thousand sort of

00:25:22,590 --> 00:25:26,789
out there most of them aboard specific

00:25:24,360 --> 00:25:29,370
but I think that their migration maybe

00:25:26,789 --> 00:25:32,549
will come to an end at some point before

00:25:29,370 --> 00:25:34,260
the end of the universe I think we're

00:25:32,549 --> 00:25:35,610
going to see more Linux code and you

00:25:34,260 --> 00:25:38,100
boot some of the subsystems that are

00:25:35,610 --> 00:25:39,840
coming around is all appreciative mate

00:25:38,100 --> 00:25:41,730
and work in a similar way and be able to

00:25:39,840 --> 00:25:44,159
update them from the next back and forth

00:25:41,730 --> 00:25:47,039
and that sort of thing so I think that's

00:25:44,159 --> 00:25:48,539
something we'll see and I'd like to see

00:25:47,039 --> 00:25:51,480
this but I don't know if it'll happen

00:25:48,539 --> 00:25:52,890
there new code comes with tests so when

00:25:51,480 --> 00:25:54,850
you write a new when you do a new

00:25:52,890 --> 00:25:56,350
file system or a new driver or whatever

00:25:54,850 --> 00:25:57,760
test that goes along with that to make

00:25:56,350 --> 00:26:03,340
sure that it works and then nobody

00:25:57,760 --> 00:26:05,500
breaks it down the track and finally you

00:26:03,340 --> 00:26:07,420
boot you boot just keep sort of getting

00:26:05,500 --> 00:26:09,010
slightly bigger a few bikes here if you

00:26:07,420 --> 00:26:12,310
buy it's their little little new

00:26:09,010 --> 00:26:14,080
features and so on and it's extremely

00:26:12,310 --> 00:26:15,580
configurable you can turn off an awful

00:26:14,080 --> 00:26:17,440
lot of stuff now you can turn off the

00:26:15,580 --> 00:26:21,400
command line for example and save a huge

00:26:17,440 --> 00:26:24,070
amount but it was creeping concerned

00:26:21,400 --> 00:26:25,600
that you know it's getting a little bit

00:26:24,070 --> 00:26:28,920
bigger to do the same thing as it did

00:26:25,600 --> 00:26:31,480
you know ten years ago and so I thinks

00:26:28,920 --> 00:26:33,070
we'll likely see some effort in that in

00:26:31,480 --> 00:26:37,930
that area to sort of start to trimmer

00:26:33,070 --> 00:26:39,730
down a little bit as well so sorry it

00:26:37,930 --> 00:26:44,080
was a little bit abbreviated due to my

00:26:39,730 --> 00:26:46,660
laptop fella but thank you for listening

00:26:44,080 --> 00:26:49,150
I do want to say if you've never seen a

00:26:46,660 --> 00:26:50,410
pet to the u-boot mailing list now would

00:26:49,150 --> 00:26:53,340
be a great time to do it

00:26:50,410 --> 00:26:58,990
it's a pretty friendly mailing list I

00:26:53,340 --> 00:27:00,880
think people most of the time you know

00:26:58,990 --> 00:27:02,200
win it together and get on pretty well

00:27:00,880 --> 00:27:04,330
and they and they're happy to help

00:27:02,200 --> 00:27:05,950
there's a high RC as well where people

00:27:04,330 --> 00:27:09,760
are always helping out I'm not very good

00:27:05,950 --> 00:27:12,460
at there but but yeah and if you have

00:27:09,760 --> 00:27:13,870
any trouble please sing out my details

00:27:12,460 --> 00:27:16,500
at the bottom if you email the bit

00:27:13,870 --> 00:27:18,910
Manning less than CC may you'll get me

00:27:16,500 --> 00:27:21,880
so that's it I don't know if anyone

00:27:18,910 --> 00:27:23,400
wants to have any questions but thank

00:27:21,880 --> 00:27:26,400
you very much

00:27:23,400 --> 00:27:26,400
sure

00:27:37,320 --> 00:27:55,300
are you talking about built men this

00:27:42,429 --> 00:27:56,770
thing Peter on what way if you're

00:27:55,300 --> 00:27:58,720
building your own board you'll typically

00:27:56,770 --> 00:28:01,840
do it and you'll just use make movies an

00:27:58,720 --> 00:28:04,360
incremental build yes you can use build

00:28:01,840 --> 00:28:07,870
men every time you want to build for

00:28:04,360 --> 00:28:13,330
your board but it's not very efficient

00:28:07,870 --> 00:28:17,830
for there it's more to do all of them

00:28:13,330 --> 00:28:18,790
yeah yeah I mean I don't know love to

00:28:17,830 --> 00:28:22,720
improve it

00:28:18,790 --> 00:28:24,880
it's basically it doesn't use it's

00:28:22,720 --> 00:28:26,650
incremental in the sense that when it

00:28:24,880 --> 00:28:29,170
builds the first commit and then it

00:28:26,650 --> 00:28:30,790
builds next ones they are incremental so

00:28:29,170 --> 00:28:33,160
it's not just rebuilding each one it's

00:28:30,790 --> 00:28:35,440
relatively fast I mean I know 24 hours

00:28:33,160 --> 00:28:41,170
to build 200 fails and Commerce's not

00:28:35,440 --> 00:28:43,000
too bad yes there's a conflict father

00:28:41,170 --> 00:28:46,090
lets you select the tool chain so you

00:28:43,000 --> 00:28:50,770
can do what you want there but yeah

00:28:46,090 --> 00:28:55,080
patches are differently welcome leave

00:28:50,770 --> 00:28:55,080
anyone else yes

00:28:56,250 --> 00:29:06,400
LPD dr training well I'm seeing for

00:29:04,000 --> 00:29:09,940
example Rock ship recently moved to

00:29:06,400 --> 00:29:12,190
using TPL jumping to SPL and doing you

00:29:09,940 --> 00:29:16,960
know doing the training via cuz it's so

00:29:12,190 --> 00:29:19,030
in the code is so large so yeah I think

00:29:16,960 --> 00:29:23,190
I don't know where that's gonna go I've

00:29:19,030 --> 00:29:26,950
also just recently been looking at until

00:29:23,190 --> 00:29:29,290
Apollo Lake and I think it's needs 180 K

00:29:26,950 --> 00:29:31,360
of memory for the minute

00:29:29,290 --> 00:29:33,520
phase and it takes uh something like 30

00:29:31,360 --> 00:29:35,770
seconds 25 seconds to do the memory

00:29:33,520 --> 00:29:37,360
training so well I think you might have

00:29:35,770 --> 00:29:40,210
problems they're probably not as bad as

00:29:37,360 --> 00:29:41,790
they're it's it is a challenge that the

00:29:40,210 --> 00:29:44,140
technology is getting more and more

00:29:41,790 --> 00:29:46,840
bleeding edge and more and more advanced

00:29:44,140 --> 00:29:54,870
and yeah I'm not too sure where that's

00:29:46,840 --> 00:29:54,870
gonna end up thing else

00:29:56,450 --> 00:29:59,910
okay well thank you very much for

00:29:58,860 --> 00:30:06,089
listening

00:29:59,910 --> 00:30:06,089

YouTube URL: https://www.youtube.com/watch?v=TJzFK8VIUJo


