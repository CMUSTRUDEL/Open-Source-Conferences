Title: Finding the Best Way to Use Linux Kernel - Status Update - Tsugikazu Shibata, NEC
Publication date: 2019-09-16
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	Finding the Best Way to Use Linux Kernel - Status Update - Tsugikazu Shibata, NEC

Linux is the default choice of modern IT system including IoT, Embedded and many others. For IT system, historically, commercial distros are providing distribution with security and bug fixes in Long Term. That has a huge number of continuous testing and fixing in backside to provide professional support.On the other hand, Embedded space is very different. Every company needs to roll up their own distribution by themselves with picking the best kernel and evaluate it on their own. Sometimes it will be the duplicated effort even we are using Open Source.LTSI had been established to find a way to solve such issue and continued to advocate using LTS kernel.I will present kernel development process with the latest statistics to find the best recommended LTS kernel with surrounding community situation.Then, I will cover what is happening for Linux testing activities. Also, cover Open Source Licensing topics which should be known for the people using Linux for their products.
Captions: 
	00:00:00,030 --> 00:00:07,250
hi good afternoon red starters my

00:00:04,589 --> 00:00:07,250
session

00:00:07,319 --> 00:00:17,250
my name is incacha bata come from Tokyo

00:00:12,210 --> 00:00:23,490
Japan on on Sunday it's after three days

00:00:17,250 --> 00:00:29,160
but to see I'm with Jay drag but it's to

00:00:23,490 --> 00:00:33,870
enjoy a conference first of all again my

00:00:29,160 --> 00:00:37,020
name is Lucas Potter I in my when my sub

00:00:33,870 --> 00:00:40,050
I submit my proposal I was working for

00:00:37,020 --> 00:00:44,100
NEC it's a Japanese company but after

00:00:40,050 --> 00:00:48,149
that I read my company so that stepped

00:00:44,100 --> 00:00:51,030
away from my company and but still very

00:00:48,149 --> 00:00:53,550
much interested in working for Linux and

00:00:51,030 --> 00:00:55,920
officers so that I'm joined Linux

00:00:53,550 --> 00:00:59,760
Foundation and also open invention

00:00:55,920 --> 00:01:04,500
network and so forth Amory I'm working

00:00:59,760 --> 00:01:08,630
for full of open source now in my

00:01:04,500 --> 00:01:11,490
presentation no Marie talked about

00:01:08,630 --> 00:01:15,390
statistics of reacts kernel development

00:01:11,490 --> 00:01:19,860
and also which on which version is the

00:01:15,390 --> 00:01:23,520
best for usable for the industry actual

00:01:19,860 --> 00:01:27,900
use case so it's it's good to start it

00:01:23,520 --> 00:01:31,290
Linux is one of the most successful open

00:01:27,900 --> 00:01:36,060
source project and continue growing in

00:01:31,290 --> 00:01:39,420
28 years expanding the variety of use

00:01:36,060 --> 00:01:43,380
cases such as IT Enterprise crowd a

00:01:39,420 --> 00:01:46,909
networking Android you know emulate and

00:01:43,380 --> 00:01:51,060
IOT and many other devices and

00:01:46,909 --> 00:01:57,649
development in inducing under GPL

00:01:51,060 --> 00:01:59,280
version 2 most of these statistics are

00:01:57,649 --> 00:02:05,310
discussed by

00:01:59,280 --> 00:02:08,700
Greg Hartmann or Johnson Corbett who is

00:02:05,310 --> 00:02:10,960
right of EWN note that I will again I

00:02:08,700 --> 00:02:15,160
will try to talk about

00:02:10,960 --> 00:02:19,510
development community the reacts Connor

00:02:15,160 --> 00:02:23,590
is participating over 1700 therapist and

00:02:19,510 --> 00:02:28,420
at 230 companies every every releases

00:02:23,590 --> 00:02:30,820
and growing a year e 1.5 millions of

00:02:28,420 --> 00:02:33,730
lines of code and over four thousands of

00:02:30,820 --> 00:02:38,040
fighters are increased in every every

00:02:33,730 --> 00:02:42,600
years and again Linux was started in

00:02:38,040 --> 00:02:47,850
1991 so now it's a 28 years so it's not

00:02:42,600 --> 00:02:50,350
re face so very much matured and

00:02:47,850 --> 00:02:52,660
maintenance have a great skill to manage

00:02:50,350 --> 00:02:56,920
the subsystem and professional knowledge

00:02:52,660 --> 00:03:00,310
of its area of technologies in the very

00:02:56,920 --> 00:03:03,340
early stage every Roger company have its

00:03:00,310 --> 00:03:07,120
own operating system so that developers

00:03:03,340 --> 00:03:10,990
are working for their own operating

00:03:07,120 --> 00:03:13,980
system or own hardware but nowadays many

00:03:10,990 --> 00:03:16,390
of a company have no such kind of

00:03:13,980 --> 00:03:18,730
proprietary operating system so that

00:03:16,390 --> 00:03:22,150
such kind of people go into open source

00:03:18,730 --> 00:03:25,060
and gathering into the Linux community

00:03:22,150 --> 00:03:28,350
so that's a reason why the GU great

00:03:25,060 --> 00:03:32,500
maintainer is gathering gathering into

00:03:28,350 --> 00:03:35,950
kernel communities and here is the

00:03:32,500 --> 00:03:40,090
latest status of Linux cano latest

00:03:35,950 --> 00:03:44,530
version is a 5.2 and that was released

00:03:40,090 --> 00:03:48,930
in July 7 last month reins of code aqua

00:03:44,530 --> 00:03:55,300
is 26 millions of millions and the files

00:03:48,930 --> 00:04:00,460
64 thousand and that was the European

00:03:55,300 --> 00:04:05,860
period was 63 days from previous 15.1

00:04:00,460 --> 00:04:10,840
version 63 days means nine weeks so the

00:04:05,860 --> 00:04:15,340
most of the Linux kernel is released in

00:04:10,840 --> 00:04:18,040
the mostly some day and another update

00:04:15,340 --> 00:04:22,030
will be also releasing Sunday so that

00:04:18,040 --> 00:04:26,469
nine weeks is every Sunday

00:04:22,030 --> 00:04:30,430
updater will be happen I will show you

00:04:26,469 --> 00:04:32,889
some more details and current astable

00:04:30,430 --> 00:04:35,830
Connor is five point two point nine so

00:04:32,889 --> 00:04:38,099
nine times updaters happen in current

00:04:35,830 --> 00:04:42,699
development Connor is five point three

00:04:38,099 --> 00:04:47,979
RC release candidate v so v times of

00:04:42,699 --> 00:04:50,999
risk and is already released so how long

00:04:47,979 --> 00:04:50,999
okay yeah

00:04:54,580 --> 00:05:07,900
yeah 5.3 release candidate yeah yeah

00:05:02,710 --> 00:05:13,510
it's means after 5.2 release and update

00:05:07,900 --> 00:05:17,290
release will sudden 9 nice update which

00:05:13,510 --> 00:05:23,410
is happening that's why five point two

00:05:17,290 --> 00:05:29,380
point nine yeah I will show you some

00:05:23,410 --> 00:05:34,390
more details later and how long does the

00:05:29,380 --> 00:05:38,980
Cano take the Brockman I was countin

00:05:34,390 --> 00:05:46,390
number days when this was happened hole

00:05:38,980 --> 00:05:48,700
it's ricotta 20 year 2016 4 point 4 was

00:05:46,390 --> 00:05:55,890
released in 2016

00:05:48,700 --> 00:06:00,670
January and 4.9 was released in December

00:05:55,890 --> 00:06:04,660
that was a 6-3 dismiss happen and each

00:06:00,670 --> 00:06:09,420
release was take 63 four days 63 days of

00:06:04,660 --> 00:06:16,000
70 days 70 days means that 10 weeks and

00:06:09,420 --> 00:06:22,660
420 a 17 it was started from February

00:06:16,000 --> 00:06:26,310
and 4.14 was in November so it was a

00:06:22,660 --> 00:06:30,810
hybrid this was happened in a year and

00:06:26,310 --> 00:06:34,990
last year started from 4.15 in that

00:06:30,810 --> 00:06:39,340
January and 4.20 was released in

00:06:34,990 --> 00:06:43,810
December so six threes was happened it's

00:06:39,340 --> 00:06:45,910
about two months or three months yes

00:06:43,810 --> 00:06:49,180
resins three months and four this year

00:06:45,910 --> 00:06:55,120
five point was one Vipond zero was risen

00:06:49,180 --> 00:06:58,830
much and a five point one was me and the

00:06:55,120 --> 00:07:04,900
five point two was July it's it's very

00:06:58,830 --> 00:07:07,870
coincidently March 3 May 5 and July 7 so

00:07:04,900 --> 00:07:12,320
maybe next one is September hopefully

00:07:07,870 --> 00:07:13,010
but September 9 is not a Sunday so not

00:07:12,320 --> 00:07:16,790
good

00:07:13,010 --> 00:07:21,530
it's just a joke but it's easy to see so

00:07:16,790 --> 00:07:23,840
that we are easy to think about what

00:07:21,530 --> 00:07:26,480
time frame the next color will be

00:07:23,840 --> 00:07:29,660
released the kernel development is a

00:07:26,480 --> 00:07:31,910
kind of a nice development process

00:07:29,660 --> 00:07:35,150
having a very nice development process

00:07:31,910 --> 00:07:38,320
and what time frame the next carnival

00:07:35,150 --> 00:07:42,910
beer is is easy to estimate such a

00:07:38,320 --> 00:07:46,610
history of wrong years of development

00:07:42,910 --> 00:07:50,180
and another very important point is

00:07:46,610 --> 00:07:54,910
Linux kernel development policy the

00:07:50,180 --> 00:07:59,390
upstream is the only place to send pods

00:07:54,910 --> 00:08:04,060
it's a single place every new features

00:07:59,390 --> 00:08:08,540
or fixes should be sent to upstream and

00:08:04,060 --> 00:08:11,570
very matured skill maintenance review

00:08:08,540 --> 00:08:14,420
each individual patches and then decide

00:08:11,570 --> 00:08:17,870
it will be accepted or not so that

00:08:14,420 --> 00:08:24,110
that's why Venus Connor can keep the

00:08:17,870 --> 00:08:27,140
higher quality and tested with every

00:08:24,110 --> 00:08:31,550
single parties without any conflict it's

00:08:27,140 --> 00:08:34,970
it's also happening and will that need

00:08:31,550 --> 00:08:37,340
the well coordinated process but Connor

00:08:34,970 --> 00:08:39,979
developer is discussing each other to

00:08:37,340 --> 00:08:43,370
create a better development process that

00:08:39,979 --> 00:08:46,070
an current shape so we need to

00:08:43,370 --> 00:08:50,960
understand upstream is the only place so

00:08:46,070 --> 00:08:54,290
that if we sometimes we made our own

00:08:50,960 --> 00:08:57,940
product and then create our own parties

00:08:54,290 --> 00:09:01,070
but that's not good if we will

00:08:57,940 --> 00:09:05,870
continuously release our own kernel that

00:09:01,070 --> 00:09:08,780
may sometimes make a difference for with

00:09:05,870 --> 00:09:13,070
the stream and our own version so that's

00:09:08,780 --> 00:09:15,990
a very important point and here is a

00:09:13,070 --> 00:09:19,920
corner development process

00:09:15,990 --> 00:09:23,610
after the five point and was released

00:09:19,920 --> 00:09:28,260
and then start two weeks of merge

00:09:23,610 --> 00:09:31,770
Wyndham I am not yet upload - right but

00:09:28,260 --> 00:09:33,300
after my a presentation then our upload

00:09:31,770 --> 00:09:37,800
is right sorry

00:09:33,300 --> 00:09:40,290
and after 5.10 was released two weeks of

00:09:37,800 --> 00:09:45,149
magic window will happen so everyone can

00:09:40,290 --> 00:09:49,470
propose the new Apaches and then Lina's

00:09:45,149 --> 00:09:52,500
towbars will create our - RC one release

00:09:49,470 --> 00:09:56,820
candiate and every mostly every week

00:09:52,500 --> 00:10:01,709
next risk and candidate will be provided

00:09:56,820 --> 00:10:03,149
so Venus will review the parties and

00:10:01,709 --> 00:10:06,540
them

00:10:03,149 --> 00:10:10,700
denisa release candidate mostly every

00:10:06,540 --> 00:10:14,850
Sunday so developer can download that

00:10:10,700 --> 00:10:17,940
risk candidate from Monday and until

00:10:14,850 --> 00:10:21,390
Saturday the new changes will be

00:10:17,940 --> 00:10:25,650
submitted and then Venus will much and

00:10:21,390 --> 00:10:31,200
release - RC - rc3 that's a development

00:10:25,650 --> 00:10:36,839
process and mostly RC 7 / 8 will happen

00:10:31,200 --> 00:10:41,190
and and then PI point n plus 1 will be

00:10:36,839 --> 00:10:44,100
released that the that is why it's seven

00:10:41,190 --> 00:10:51,930
weeks or eight weeks will take in

00:10:44,100 --> 00:10:56,420
Napoli's and here is a graph of how

00:10:51,930 --> 00:10:59,850
linux kernel code is growing it's

00:10:56,420 --> 00:11:03,540
surprising 20 it's 20 years ago still

00:10:59,850 --> 00:11:05,790
growing because of not just a I T

00:11:03,540 --> 00:11:08,520
enterprise but also a minute or some

00:11:05,790 --> 00:11:13,649
other use cases happening and newer

00:11:08,520 --> 00:11:16,170
driver need to be most so that new use

00:11:13,649 --> 00:11:19,459
case will be every time happening so

00:11:16,170 --> 00:11:23,810
that the code is increased increased but

00:11:19,459 --> 00:11:25,600
Linux kernel have a nice custom

00:11:23,810 --> 00:11:28,839
customization

00:11:25,600 --> 00:11:32,380
no configuration option so that unused

00:11:28,839 --> 00:11:32,769
driver is not be able to include in the

00:11:32,380 --> 00:11:35,440
Conner

00:11:32,769 --> 00:11:38,769
so that called source code is being big

00:11:35,440 --> 00:11:42,009
but if you wanted to use the unused

00:11:38,769 --> 00:11:46,779
driver that will be outside of the

00:11:42,009 --> 00:11:57,810
binary in the outside of binaries and

00:11:46,779 --> 00:12:01,569
but this one is always up in upstream

00:11:57,810 --> 00:12:05,139
experimental code is always produced and

00:12:01,569 --> 00:12:09,959
sometimes is not matured so people who

00:12:05,139 --> 00:12:12,910
wanted to use stable one not

00:12:09,959 --> 00:12:16,269
experimenter one so that such kind of

00:12:12,910 --> 00:12:19,029
use case there is a stable color Greg

00:12:16,269 --> 00:12:20,920
Crowe Hartman who is a fellow of very

00:12:19,029 --> 00:12:22,569
next foundation is maintained this

00:12:20,920 --> 00:12:27,670
stable Connor

00:12:22,569 --> 00:12:31,209
this one is you ask me that five point n

00:12:27,670 --> 00:12:34,870
for us in point one a three digit of the

00:12:31,209 --> 00:12:42,490
Connor is frequently released it's this

00:12:34,870 --> 00:12:46,630
is sometimes one time per week

00:12:42,490 --> 00:12:51,189
sometimes two times four week and this

00:12:46,630 --> 00:12:53,620
one is becomes end of life when next

00:12:51,189 --> 00:12:56,709
Connor version will be released so that

00:12:53,620 --> 00:13:00,399
stable version is useful for the stable

00:12:56,709 --> 00:13:03,910
use case but end of life is just as

00:13:00,399 --> 00:13:07,209
sixty or seventy days so it's not a full

00:13:03,910 --> 00:13:11,220
of it for the our industry use case or

00:13:07,209 --> 00:13:14,380
we wanted to use more wrong Adam Turner

00:13:11,220 --> 00:13:20,470
to that kind of requirement there is a

00:13:14,380 --> 00:13:24,189
LTS column is there that is continuing

00:13:20,470 --> 00:13:28,660
to maintain the single current version

00:13:24,189 --> 00:13:31,990
that is there D s terrorist also a Greg

00:13:28,660 --> 00:13:36,939
is maintained this one and then this one

00:13:31,990 --> 00:13:38,660
will be released just one time in in-ear

00:13:36,939 --> 00:13:41,329
and maintained

00:13:38,660 --> 00:13:45,199
two years that initially that was all

00:13:41,329 --> 00:13:48,740
all the ways this one we was two years

00:13:45,199 --> 00:13:51,829
but nowadays it was extended and some

00:13:48,740 --> 00:13:54,290
part someone is maintained six years

00:13:51,829 --> 00:13:56,930
this one maybe sometimes somewhat

00:13:54,290 --> 00:14:02,740
reasonable okay

00:13:56,930 --> 00:14:08,959
and let's look back what I explained

00:14:02,740 --> 00:14:12,680
radius cone was 5.2 and stable one is a

00:14:08,959 --> 00:14:16,519
six nine time release is now happening

00:14:12,680 --> 00:14:19,579
and already five point one stable one

00:14:16,519 --> 00:14:23,689
was a twenty one time released butter

00:14:19,579 --> 00:14:26,240
becomes the end of life and also current

00:14:23,689 --> 00:14:29,709
development Connell is a looking at the

00:14:26,240 --> 00:14:33,800
five points week Bojan but now is a

00:14:29,709 --> 00:14:37,160
release candidate five so maybe more

00:14:33,800 --> 00:14:38,689
three two or three weeks later five

00:14:37,160 --> 00:14:42,589
points three will be released

00:14:38,689 --> 00:14:46,069
that's the current situation so like

00:14:42,589 --> 00:14:49,300
this we are very much easier to imagine

00:14:46,069 --> 00:14:53,170
what time Connor will be released but

00:14:49,300 --> 00:14:56,240
sometimes experimental feature is

00:14:53,170 --> 00:15:00,560
created some of a regression and that

00:14:56,240 --> 00:15:04,329
may take sometimes explained extended so

00:15:00,560 --> 00:15:07,130
that that's why we are need we are

00:15:04,329 --> 00:15:12,800
important to looking at what Connor it

00:15:07,130 --> 00:15:17,569
counter development is happening okay so

00:15:12,800 --> 00:15:21,559
let's go into LTS LTS as I mentioned on

00:15:17,569 --> 00:15:26,230
the tree provider fix from the community

00:15:21,559 --> 00:15:32,050
and in the real use case we don't need

00:15:26,230 --> 00:15:35,509
experimental features just on the stable

00:15:32,050 --> 00:15:37,879
tested and confirmed Connor and the

00:15:35,509 --> 00:15:41,509
security fix will be release the free

00:15:37,879 --> 00:15:44,199
country we until end of life it's some

00:15:41,509 --> 00:15:47,410
time to reason sometimes six years and

00:15:44,199 --> 00:15:48,980
atheists will be released around

00:15:47,410 --> 00:15:52,249
November

00:15:48,980 --> 00:15:55,429
December timeframe so that we are able

00:15:52,249 --> 00:15:57,290
to imagine how what kind of corner

00:15:55,429 --> 00:16:00,649
bottom will be released in December

00:15:57,290 --> 00:16:03,889
November timeframe and targeting that

00:16:00,649 --> 00:16:09,439
Conell we are able to submit our own

00:16:03,889 --> 00:16:13,669
parties into the con oh okay here is a

00:16:09,439 --> 00:16:18,109
what version is already released in the

00:16:13,669 --> 00:16:22,600
bottom side six 3.16 is maintained by

00:16:18,109 --> 00:16:26,929
being Hutchings it was release in 2014

00:16:22,600 --> 00:16:27,739
being Hutchings is maintained of debian

00:16:26,929 --> 00:16:30,639
Cano

00:16:27,739 --> 00:16:34,509
so debian is committed to provide a

00:16:30,639 --> 00:16:40,339
stable kernel but other than that Gregg

00:16:34,509 --> 00:16:45,499
Gregor Hoffman is maintained 4.4 was

00:16:40,339 --> 00:16:48,739
raised in 2016 in January initially it

00:16:45,499 --> 00:16:51,980
was a two-year zone but now in

00:16:48,739 --> 00:16:56,899
maintaining six years so committed by a

00:16:51,980 --> 00:17:01,970
grade and the end of life were projected

00:16:56,899 --> 00:17:05,419
to February 20 22 and also 4.9 also

00:17:01,970 --> 00:17:11,589
become six years and when I was

00:17:05,419 --> 00:17:15,470
presented same similar slide in July

00:17:11,589 --> 00:17:19,699
4.14 was a two years time but now it was

00:17:15,470 --> 00:17:23,350
extended to six years because of some

00:17:19,699 --> 00:17:27,069
large company is talking with Greg and

00:17:23,350 --> 00:17:30,409
extended to six years so we hopefully

00:17:27,069 --> 00:17:36,769
extend a seat for nineteen also becomes

00:17:30,409 --> 00:17:41,899
six years it is so nice but Greg is a

00:17:36,769 --> 00:17:44,149
just one guy and in the growth sixty or

00:17:41,899 --> 00:17:46,760
maintain a period internal spirit and

00:17:44,149 --> 00:17:49,250
then maybe next year this year so

00:17:46,760 --> 00:17:50,240
another one will be released next year

00:17:49,250 --> 00:17:53,630
will be released

00:17:50,240 --> 00:17:57,440
Greg should maintain six different color

00:17:53,630 --> 00:17:59,320
in in a year that's a heavy road so that

00:17:57,440 --> 00:18:03,070
we may need to do something

00:17:59,320 --> 00:18:06,400
- more automated testing or what not

00:18:03,070 --> 00:18:09,270
much easier to maintain that that's a

00:18:06,400 --> 00:18:13,240
big issue in in not just a Connor

00:18:09,270 --> 00:18:19,600
community but also users over for us

00:18:13,240 --> 00:18:22,110
that's a big issue and it's actually I'm

00:18:19,600 --> 00:18:26,800
trying to do something but not yet

00:18:22,110 --> 00:18:31,540
solved so now now is a very difficult

00:18:26,800 --> 00:18:37,080
point of time here is an actual use case

00:18:31,540 --> 00:18:41,920
of 80s for Android is already committed

00:18:37,080 --> 00:18:44,320
Android con AOSP will be used six years

00:18:41,920 --> 00:18:49,290
in a four point four four point nine

00:18:44,320 --> 00:18:55,510
four point fourteen is used to buy a OSP

00:18:49,290 --> 00:18:59,070
actually Google is always talking

00:18:55,510 --> 00:19:04,420
where's Craig and help something and

00:18:59,070 --> 00:19:07,930
asking him to expand six years and also

00:19:04,420 --> 00:19:11,860
Chromebook is initially used or four

00:19:07,930 --> 00:19:15,640
point four but now extend to 4.14 so

00:19:11,860 --> 00:19:20,740
latest Chromebook is using 4.14 kernel

00:19:15,640 --> 00:19:24,580
and also Microsoft is already announced

00:19:20,740 --> 00:19:28,750
the windows subsystem for Linux version

00:19:24,580 --> 00:19:35,250
2 is running Linux Linux kernel on top

00:19:28,750 --> 00:19:38,020
of hyper-v on in Windows 10 it is not

00:19:35,250 --> 00:19:42,100
every user cannot use but a test version

00:19:38,020 --> 00:19:44,940
but the still the connect button is 4.19

00:19:42,100 --> 00:19:50,830
because Microsoft have knowledge about

00:19:44,940 --> 00:19:54,730
this LTS and Iraq as well raspberry pi

00:19:50,830 --> 00:19:59,070
to use something and I checked dry

00:19:54,730 --> 00:20:04,690
version of raspberry pi Cano others also

00:19:59,070 --> 00:20:05,720
4.19 and also Amazon is providing their

00:20:04,690 --> 00:20:10,030
own

00:20:05,720 --> 00:20:16,130
coño Amazon Linux is using 4.14 to and

00:20:10,030 --> 00:20:20,000
4.19 so we can see from the Raspberry Pi

00:20:16,130 --> 00:20:23,090
to crowd in axis running everywhere

00:20:20,000 --> 00:20:28,100
it was an 80s version so err this is a

00:20:23,090 --> 00:20:31,850
nice choice that we can see it's not a

00:20:28,100 --> 00:20:36,520
good thing not only a good thing I was

00:20:31,850 --> 00:20:40,910
countin number of comets included in RDS

00:20:36,520 --> 00:20:44,330
arrow one is a LTS button and other the

00:20:40,910 --> 00:20:51,050
normal stable kernel so it reads ricotta

00:20:44,330 --> 00:20:56,180
4.4 it's included of 12 thousands of

00:20:51,050 --> 00:21:03,740
comets are included already but 4.5 have

00:20:56,180 --> 00:21:07,820
a 900 so that huge amount of patties are

00:21:03,740 --> 00:21:13,040
already provided this kind of change

00:21:07,820 --> 00:21:18,410
need to be upright real product that

00:21:13,040 --> 00:21:23,690
maybe some of our issue for every most

00:21:18,410 --> 00:21:26,780
of immediate shipment is just shipping

00:21:23,690 --> 00:21:27,890
to one time and have no fixes that's

00:21:26,780 --> 00:21:37,810
another issue

00:21:27,890 --> 00:21:41,390
and let's see 4.9 is 30,000 4.14 it's

00:21:37,810 --> 00:21:46,580
11,000 this kind of large amount of

00:21:41,390 --> 00:21:49,730
fixes provided by crack and this should

00:21:46,580 --> 00:21:54,770
be upright that will be create a more

00:21:49,730 --> 00:21:58,580
secure devices but unfortunately some

00:21:54,770 --> 00:22:01,730
some some people are not provided such

00:21:58,580 --> 00:22:09,530
such kind of fixes but in case of our

00:22:01,730 --> 00:22:12,260
Android Sony is sipping changes every

00:22:09,530 --> 00:22:14,900
month or every three months with this

00:22:12,260 --> 00:22:16,050
kind of effects included with this kind

00:22:14,900 --> 00:22:20,590
of fix

00:22:16,050 --> 00:22:25,000
so that such a one of our important

00:22:20,590 --> 00:22:30,250
point to do more provider fix to the

00:22:25,000 --> 00:22:35,140
already sipped product and how many in a

00:22:30,250 --> 00:22:38,920
re fixer provided in case of four point

00:22:35,140 --> 00:22:42,580
war I count the total number and divided

00:22:38,920 --> 00:22:44,800
by the ear so that three thousand four

00:22:42,580 --> 00:22:47,710
thousand seven thousands of fix are

00:22:44,800 --> 00:22:51,310
already provided so Yuri this kind of

00:22:47,710 --> 00:22:55,210
huge number of patches provided from the

00:22:51,310 --> 00:22:59,530
community so we pick up these parties to

00:22:55,210 --> 00:23:03,670
our already shaped product that's of one

00:22:59,530 --> 00:23:07,060
over issue so how do handle such huge

00:23:03,670 --> 00:23:10,900
amount of patches the testing color for

00:23:07,060 --> 00:23:14,770
every notice is actually hard so use

00:23:10,900 --> 00:23:17,020
automated test testing there is a some

00:23:14,770 --> 00:23:21,280
mobile automated testing open-source

00:23:17,020 --> 00:23:24,850
framework such as hue go work on LCI or

00:23:21,280 --> 00:23:27,550
some other rubber from dinero that that

00:23:24,850 --> 00:23:30,040
kind of open source based the automated

00:23:27,550 --> 00:23:33,130
testing framework will help something

00:23:30,040 --> 00:23:36,850
and also use common test Suites and

00:23:33,130 --> 00:23:40,360
shares a result I believe almost all the

00:23:36,850 --> 00:23:42,970
company is doing their own tests but the

00:23:40,360 --> 00:23:46,000
result of test is not shared so that

00:23:42,970 --> 00:23:50,410
everyone is doing same test when having

00:23:46,000 --> 00:23:53,890
a same program but it's not open so if

00:23:50,410 --> 00:23:56,260
that kind of sharing will be happen that

00:23:53,890 --> 00:24:01,060
may be some decreasing are some of our

00:23:56,260 --> 00:24:05,230
activities and make consensus of common

00:24:01,060 --> 00:24:08,920
test and appropriate we have some LTP or

00:24:05,230 --> 00:24:12,790
some other test packages but it's a kind

00:24:08,920 --> 00:24:16,030
of community driven and may sometimes

00:24:12,790 --> 00:24:18,520
not very much fit with industry use case

00:24:16,030 --> 00:24:22,150
so industry people need to get together

00:24:18,520 --> 00:24:25,880
and create some common test packages

00:24:22,150 --> 00:24:27,800
that and then that will be tested to buy

00:24:25,880 --> 00:24:32,780
a very early phase of the Linux kernel

00:24:27,800 --> 00:24:36,260
then almost all some of the program will

00:24:32,780 --> 00:24:40,340
be fixed by the community and not come

00:24:36,260 --> 00:24:43,690
back to come later to our many or

00:24:40,340 --> 00:24:48,520
industrial use case that that is another

00:24:43,690 --> 00:24:53,210
topic to be discussed and O'Connor ci is

00:24:48,520 --> 00:24:57,590
already a actively working but they are

00:24:53,210 --> 00:25:00,080
try to create their own project and by

00:24:57,590 --> 00:25:02,840
funding some of the company but still

00:25:00,080 --> 00:25:05,660
not yet happened because of people don't

00:25:02,840 --> 00:25:09,920
want to invest the testing phase but

00:25:05,660 --> 00:25:13,130
this one maybe create a common place so

00:25:09,920 --> 00:25:19,430
I really hope to establish scanner CI

00:25:13,130 --> 00:25:22,150
but I see not yet happen and here's my

00:25:19,430 --> 00:25:26,180
recommended step for the future so

00:25:22,150 --> 00:25:29,170
expected next RTS version and release

00:25:26,180 --> 00:25:33,440
time frame around December or November

00:25:29,170 --> 00:25:36,500
put our own parties into upstream and

00:25:33,440 --> 00:25:39,380
then that party will be included and

00:25:36,500 --> 00:25:44,180
then very easy to maintain for Rome

00:25:39,380 --> 00:25:47,510
madam and also choose a pram LTS counter

00:25:44,180 --> 00:25:50,800
for your own product or services and and

00:25:47,510 --> 00:25:54,410
that will be maintaining six years and

00:25:50,800 --> 00:25:58,460
create a process to apply all the

00:25:54,410 --> 00:26:03,290
parties including security fixes and

00:25:58,460 --> 00:26:07,430
that will be so nice but I know it's not

00:26:03,290 --> 00:26:12,670
easy so that so that why I will present

00:26:07,430 --> 00:26:18,170
it is this kind of opposition is that

00:26:12,670 --> 00:26:21,310
try to solve this kind of program and ok

00:26:18,170 --> 00:26:25,940
another one is a so what is the next

00:26:21,310 --> 00:26:27,640
earliest version I need a drum roll due

00:26:25,940 --> 00:26:30,820
to rules

00:26:27,640 --> 00:26:35,799
I actually discussed with Gregor Hardman

00:26:30,820 --> 00:26:40,540
and he told me 5.4 will be a next artist

00:26:35,799 --> 00:26:43,990
version if everything goes fine and

00:26:40,540 --> 00:26:47,380
sometimes rusty arenas was stopped his

00:26:43,990 --> 00:26:51,400
maintaining of the Cano sometimes may be

00:26:47,380 --> 00:26:54,640
delayed sometimes another programmer

00:26:51,400 --> 00:26:59,010
maybe happen the community is gathering

00:26:54,640 --> 00:27:03,970
of the contribution so that sometimes

00:26:59,010 --> 00:27:06,970
development phase will be becomes more

00:27:03,970 --> 00:27:10,960
extended so that if everything is goes

00:27:06,970 --> 00:27:14,770
fine within this year 5.4 will be

00:27:10,960 --> 00:27:17,790
released so that this one is next year

00:27:14,770 --> 00:27:21,940
yes so okay

00:27:17,790 --> 00:27:25,570
most of my presentation is finished but

00:27:21,940 --> 00:27:29,410
I'm trying to talk about what is

00:27:25,570 --> 00:27:33,540
happening in the con oh I have two two

00:27:29,410 --> 00:27:39,570
topics one is a CPU braunability's

00:27:33,540 --> 00:27:39,570
actually rusty year 2018 in January

00:27:39,809 --> 00:27:46,570
Specter or Meldrum program was happen

00:27:43,240 --> 00:27:50,590
that was a big surprise

00:27:46,570 --> 00:27:54,610
we were believed that the CPU doesn't

00:27:50,590 --> 00:28:00,429
have any program but Spector Merton our

00:27:54,610 --> 00:28:05,710
town was a big issue in the kernel

00:28:00,429 --> 00:28:10,830
committee was working so hard in January

00:28:05,710 --> 00:28:16,780
and create a better solution to solve

00:28:10,830 --> 00:28:20,610
this kind of problem in that was Albany

00:28:16,780 --> 00:28:23,710
in Rossier January but after that in May

00:28:20,610 --> 00:28:31,570
another Spectre program was announced

00:28:23,710 --> 00:28:36,600
and then in June for some other one was

00:28:31,570 --> 00:28:40,390
released announced and also in August a

00:28:36,600 --> 00:28:43,059
1pf it's called a create for shadow

00:28:40,390 --> 00:28:48,220
that kind of burn another Brown ability

00:28:43,059 --> 00:28:51,549
was happened that this means this one

00:28:48,220 --> 00:28:57,130
maybe found some other things I thought

00:28:51,549 --> 00:29:01,600
and then this year may MDS is called

00:28:57,130 --> 00:29:03,910
zombie road or our idea or fall out kind

00:29:01,600 --> 00:29:07,360
of this kind the same kind of CP of our

00:29:03,910 --> 00:29:13,210
nobility what's happened and this means

00:29:07,360 --> 00:29:18,880
that we were getting some of our impact

00:29:13,210 --> 00:29:23,380
that is what CPU we are using Intel AMD

00:29:18,880 --> 00:29:28,419
or and also what kind of generation of

00:29:23,380 --> 00:29:33,490
CPU like a coherent some of skylake

00:29:28,419 --> 00:29:36,640
automated and also 32 bit or 64 bits

00:29:33,490 --> 00:29:40,299
these are a big impact and also what

00:29:36,640 --> 00:29:45,150
kind of kernel Linux Android commercial

00:29:40,299 --> 00:29:50,230
OS such as Windows Mac crowd OS like

00:29:45,150 --> 00:29:53,530
Amazon and also other grown ability

00:29:50,230 --> 00:29:57,549
environment like a web browser or

00:29:53,530 --> 00:30:01,900
microcode this is not just a CPU program

00:29:57,549 --> 00:30:05,410
but also more broader range of impactor

00:30:01,900 --> 00:30:09,010
is happening and also some software

00:30:05,410 --> 00:30:12,820
version is that older one have no

00:30:09,010 --> 00:30:16,660
workaround so that must be latest

00:30:12,820 --> 00:30:18,820
software upgrade software and a BIOS

00:30:16,660 --> 00:30:22,330
configuration and the performance

00:30:18,820 --> 00:30:25,480
degradation is happening and then need

00:30:22,330 --> 00:30:28,240
to add more or higher performance CPU so

00:30:25,480 --> 00:30:31,840
that it's not just a single burn ability

00:30:28,240 --> 00:30:34,750
but also impact is so huge and finally

00:30:31,840 --> 00:30:38,410
should we expect further problem in the

00:30:34,750 --> 00:30:42,120
future the answer will be I think yes

00:30:38,410 --> 00:30:46,580
maybe some other will happen so that the

00:30:42,120 --> 00:30:50,299
right answer is

00:30:46,580 --> 00:30:53,360
CPU it takes some more time so that we

00:30:50,299 --> 00:30:56,120
need to think about her father ran away

00:30:53,360 --> 00:30:59,510
they always will be happen and then then

00:30:56,120 --> 00:31:06,890
get this kind of impact will happen that

00:30:59,510 --> 00:31:09,320
is current situation so so the content

00:31:06,890 --> 00:31:12,049
update is very important

00:31:09,320 --> 00:31:14,539
CPU burnaby to terrorists issue is

00:31:12,049 --> 00:31:18,080
happening everywhere not just software

00:31:14,539 --> 00:31:21,320
but also in a CPU or micro cotton and so

00:31:18,080 --> 00:31:25,100
on so security programming is also a

00:31:21,320 --> 00:31:27,710
number one issue if we were a sippin a

00:31:25,100 --> 00:31:30,440
midi device to the customers customer

00:31:27,710 --> 00:31:35,529
always ask us are there any open

00:31:30,440 --> 00:31:38,679
security issues there no it's not

00:31:35,529 --> 00:31:43,519
then we should provide a security fixes

00:31:38,679 --> 00:31:47,570
and we must sink with LTS no patch

00:31:43,519 --> 00:31:50,960
providers known LTS Connor so this is

00:31:47,570 --> 00:31:54,080
also very important to use LTS if we

00:31:50,960 --> 00:31:56,769
will not use LTS Connor then these kind

00:31:54,080 --> 00:32:02,419
of security fix who not provided

00:31:56,769 --> 00:32:06,529
gregory's only provide a patch for this

00:32:02,419 --> 00:32:09,769
security fix for ATS Connor that is that

00:32:06,529 --> 00:32:14,600
is another important point and sometimes

00:32:09,769 --> 00:32:17,000
we wanted to pick cherry-picking oh this

00:32:14,600 --> 00:32:20,659
patch can solve this problem but the

00:32:17,000 --> 00:32:24,019
Greg always told us that patch is not a

00:32:20,659 --> 00:32:24,889
single one further possible we provided

00:32:24,019 --> 00:32:28,190
a later

00:32:24,889 --> 00:32:31,639
so chasing radius service is another

00:32:28,190 --> 00:32:35,110
very important point I think greatest

00:32:31,639 --> 00:32:39,740
keynote will happen in Friday morning so

00:32:35,110 --> 00:32:43,309
if you are interested in please hear his

00:32:39,740 --> 00:32:45,889
keynote and again applying all the

00:32:43,309 --> 00:32:50,230
earliest part is the best way not

00:32:45,889 --> 00:32:57,320
cherry-picking that's a one over topic

00:32:50,230 --> 00:32:59,600
second one is another radius one Gousha

00:32:57,320 --> 00:33:01,360
I'm not sure this one it's pronounced

00:32:59,600 --> 00:33:05,560
it's okay because I'm Japanese

00:33:01,360 --> 00:33:09,380
Casilla is provided by Google as a

00:33:05,560 --> 00:33:12,980
microkernel based on circle micro Connor

00:33:09,380 --> 00:33:16,910
is very different from monolithic kernel

00:33:12,980 --> 00:33:19,790
I was a kind of old guy and when I was a

00:33:16,910 --> 00:33:24,530
very young maybe 20 years 80 years old

00:33:19,790 --> 00:33:27,400
before I was a member of mimics user

00:33:24,530 --> 00:33:31,490
group and in a stove are sent parts two

00:33:27,400 --> 00:33:35,080
meanings community and in that time

00:33:31,490 --> 00:33:36,730
first professor Andrew Tannenbaum

00:33:35,080 --> 00:33:41,090
becomes angry

00:33:36,730 --> 00:33:45,440
the latest Conor should be microkernel

00:33:41,090 --> 00:33:49,010
but Venus submitted a monolithic kernel

00:33:45,440 --> 00:33:52,460
so that was some of a debate but arenas

00:33:49,010 --> 00:33:55,640
didn't change his mind so that now in

00:33:52,460 --> 00:33:59,300
ex-con is a monolithic but after 28

00:33:55,640 --> 00:34:03,620
years later the kuzia is based on

00:33:59,300 --> 00:34:08,000
microkernel because of in the old time

00:34:03,620 --> 00:34:10,750
cpu performance was very roll and liked

00:34:08,000 --> 00:34:12,980
by using a microkernel architecture

00:34:10,750 --> 00:34:18,740
interprocedural inter-process

00:34:12,980 --> 00:34:21,500
communication IPC is very massively used

00:34:18,740 --> 00:34:24,410
so that the CPU performance is slower

00:34:21,500 --> 00:34:26,960
and that in that time the performance of

00:34:24,410 --> 00:34:28,669
the kana were not so good so that's our

00:34:26,960 --> 00:34:32,060
one over reason why Venus

00:34:28,669 --> 00:34:33,800
chosen Michael Connor but nowadays CP

00:34:32,060 --> 00:34:39,669
bombers much better than before

00:34:33,800 --> 00:34:42,740
so maybe this one is so good and Google

00:34:39,669 --> 00:34:45,740
said that they expects it to be used the

00:34:42,740 --> 00:34:49,280
next generation embedded devices maybe

00:34:45,740 --> 00:34:52,790
in five years so that that may be very

00:34:49,280 --> 00:34:57,590
very interesting so maybe Russia I can

00:34:52,790 --> 00:35:02,330
replace the Linux column and in the

00:34:57,590 --> 00:35:06,710
contrast of Cuccia far away announce how

00:35:02,330 --> 00:35:08,890
many OS just this month we are very easy

00:35:06,710 --> 00:35:12,100
to imagine that us

00:35:08,890 --> 00:35:15,640
China relationship nowadays it's so hard

00:35:12,100 --> 00:35:18,970
so that our family is already thinking

00:35:15,640 --> 00:35:23,010
about the creation of their own microcon

00:35:18,970 --> 00:35:26,920
oh it's a coda how many OS is also a

00:35:23,010 --> 00:35:30,400
microkernel basis they said it's a safe

00:35:26,920 --> 00:35:33,160
or secure because of a microkernel and

00:35:30,400 --> 00:35:38,800
they have a deterministic rating see

00:35:33,160 --> 00:35:45,730
engine that may be kind of higher

00:35:38,800 --> 00:35:49,690
performance or some some other things

00:35:45,730 --> 00:35:54,310
and they mentioned that available in

00:35:49,690 --> 00:35:58,120
2020 that is next year so those two are

00:35:54,310 --> 00:36:01,840
very very interesting I'm I'm nearly I

00:35:58,120 --> 00:36:04,510
was mostly come from OS 3 a guy these

00:36:01,840 --> 00:36:08,770
are very interesting and hope this one

00:36:04,510 --> 00:36:10,330
will be grow up and can be used and I

00:36:08,770 --> 00:36:16,840
would like to try this one

00:36:10,330 --> 00:36:20,980
but how newer technology come closer to

00:36:16,840 --> 00:36:23,710
rinax we are it's a coup Xie and harmony

00:36:20,980 --> 00:36:26,860
OS becomes the open source but open

00:36:23,710 --> 00:36:29,410
source is the community activity

00:36:26,860 --> 00:36:34,180
contributing code into obscure with

00:36:29,410 --> 00:36:37,240
diverse developers the surf Castillo is

00:36:34,180 --> 00:36:40,320
the Harmony OS can do this that's a big

00:36:37,240 --> 00:36:43,630
question and also open and transparent

00:36:40,320 --> 00:36:46,540
development model everyone can imagine

00:36:43,630 --> 00:36:48,640
when that comes when that will be

00:36:46,540 --> 00:36:52,420
released what kind of code will be

00:36:48,640 --> 00:36:54,940
included that is a open transparent

00:36:52,420 --> 00:36:58,020
develop not the working model but of

00:36:54,940 --> 00:37:01,360
Casilla and how many ways can do this

00:36:58,020 --> 00:37:05,350
that that's a question in a security and

00:37:01,360 --> 00:37:07,680
bound fixing with trusted and a timely

00:37:05,350 --> 00:37:10,870
fashion that is another point and

00:37:07,680 --> 00:37:15,220
finally long Dhamma supported by the

00:37:10,870 --> 00:37:17,830
community this is not just to open up

00:37:15,220 --> 00:37:21,480
the code but also create a better

00:37:17,830 --> 00:37:24,770
community is very important so being the

00:37:21,480 --> 00:37:27,869
the community is very important and

00:37:24,770 --> 00:37:31,050
until this kind of structure can be

00:37:27,869 --> 00:37:34,410
established into Casilla or hominid OS

00:37:31,050 --> 00:37:38,060
we must use Linux that's a current

00:37:34,410 --> 00:37:41,880
situation of it but the serum very much

00:37:38,060 --> 00:37:46,410
hoping to see what is happening in the

00:37:41,880 --> 00:37:50,270
microkernel base and this one is the

00:37:46,410 --> 00:37:53,400
last one so what is a key piece of

00:37:50,270 --> 00:37:55,859
maintaining open source in long term I

00:37:53,400 --> 00:37:58,950
think that there is a three key point

00:37:55,859 --> 00:38:01,140
one is a long-term community committee

00:37:58,950 --> 00:38:03,990
continue to provide about weeks in

00:38:01,140 --> 00:38:07,200
normal town maybe six years or more and

00:38:03,990 --> 00:38:10,490
then may have a organization to support

00:38:07,200 --> 00:38:13,380
its activities great core hotline is

00:38:10,490 --> 00:38:15,210
fair overburden explanation so that the

00:38:13,380 --> 00:38:18,030
X foundation is supporting his

00:38:15,210 --> 00:38:22,109
activities so that that's why he can

00:38:18,030 --> 00:38:24,900
continue to do that so this this one is

00:38:22,109 --> 00:38:27,570
not be able to happen in a single person

00:38:24,900 --> 00:38:30,270
but the backside of the this kind of

00:38:27,570 --> 00:38:33,990
organization is supporting that is very

00:38:30,270 --> 00:38:38,280
important and also security fix provide

00:38:33,990 --> 00:38:40,920
security fix with trusted process the

00:38:38,280 --> 00:38:43,590
community is living in each other each

00:38:40,920 --> 00:38:45,990
single individual parties so that's it's

00:38:43,590 --> 00:38:49,530
a transient process and a continuing

00:38:45,990 --> 00:38:51,600
update and issue down less downtime and

00:38:49,530 --> 00:38:54,420
also respond to many different risks

00:38:51,600 --> 00:38:56,460
that maybe sometimes are not owned by a

00:38:54,420 --> 00:39:00,450
community but the companies need to do

00:38:56,460 --> 00:39:03,450
that and sir one is a compliance we are

00:39:00,450 --> 00:39:06,450
already very much serious to looking at

00:39:03,450 --> 00:39:10,200
our own product is matching with

00:39:06,450 --> 00:39:13,550
open-source compliance sometimes GPL or

00:39:10,200 --> 00:39:18,240
some other things but not just a single

00:39:13,550 --> 00:39:21,060
product but also companies shipping a

00:39:18,240 --> 00:39:24,600
many different product and then

00:39:21,060 --> 00:39:26,490
cooperate rebel over internal standards

00:39:24,600 --> 00:39:31,080
should be created for the comprehensive

00:39:26,490 --> 00:39:33,360
and also there is a number of discussion

00:39:31,080 --> 00:39:38,120
happening supply chain comprar

00:39:33,360 --> 00:39:41,400
so that sometimes om odm bender can do

00:39:38,120 --> 00:39:44,520
different things that may happen so open

00:39:41,400 --> 00:39:49,320
change is try to be more compliant for

00:39:44,520 --> 00:39:52,350
them or the supply chain that is another

00:39:49,320 --> 00:39:55,080
thing is happening so these three is a

00:39:52,350 --> 00:39:59,850
key key piece of maintaining open

00:39:55,080 --> 00:40:03,030
sourcing long term that is final - right

00:39:59,850 --> 00:40:05,649
thank you so much

00:40:03,030 --> 00:40:05,649

YouTube URL: https://www.youtube.com/watch?v=oWi94eSzdj0


