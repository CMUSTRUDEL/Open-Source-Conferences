Title: Migrating to Yocto: A Guide and Lessons Learned - Muhammad Tauqir Ahmad, Cisco Meraki
Publication date: 2019-09-16
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	Migrating to Yocto: A Guide and Lessons Learned - Muhammad Tauqir Ahmad, Cisco Meraki

Tauqir and Ram took it upon themselves to migrate the build system for the whole engineering organization about 2 years ago at Cisco Meraki. The need arose from a new platform that was very well-supported on yocto. But there was already a pressing need to migrate to a more modern build system from the old, unmaintained copy of OpenWRT in use. They will go into how they went about doing it and the lessons they learned along the way including the technical challenges like supporting proprietary software on yocto, verifying correctness of the builds produced by the new build system, accommodating the various use cases at Meraki, integrating with existing CI systems, as well as human aspects of such a large migration like getting buy-in from stakeholders, documenting process and maintenance and devising an iterative, non-disruptive migration path.
Captions: 
	00:00:00,290 --> 00:00:05,580
okay let's get started my name is talky

00:00:03,389 --> 00:00:09,330
I'm an embedded platform engineer at

00:00:05,580 --> 00:00:11,099
Cisco Meraki and we're a cloud-based

00:00:09,330 --> 00:00:14,400
networking company based out of San

00:00:11,099 --> 00:00:17,220
Francisco and I'm here to talk to you

00:00:14,400 --> 00:00:21,080
about migrating to Yocto and how you can

00:00:17,220 --> 00:00:24,000
migrate your build system over to Yocto

00:00:21,080 --> 00:00:26,580
we as a company built a number of

00:00:24,000 --> 00:00:29,429
products that we sell ranging from

00:00:26,580 --> 00:00:32,189
wireless access points to security

00:00:29,429 --> 00:00:35,820
appliances layer 2 and layer 3 switches

00:00:32,189 --> 00:00:38,219
and security cameras these products are

00:00:35,820 --> 00:00:40,850
built on a number of different hardware

00:00:38,219 --> 00:00:44,460
ranging from different CPU architectures

00:00:40,850 --> 00:00:46,890
to different sock benders that we use

00:00:44,460 --> 00:00:50,190
and a number of our jewelry chips like

00:00:46,890 --> 00:00:51,989
LT modules and switching Hardware and we

00:00:50,190 --> 00:00:55,860
use a number of different kernels for

00:00:51,989 --> 00:00:59,699
these products ranging from 3.4 all the

00:00:55,860 --> 00:01:01,289
way up to you 4.9 and for those of you

00:00:59,699 --> 00:01:03,530
wondering these are actually that code

00:01:01,289 --> 00:01:07,590
names that Linux uses for their releases

00:01:03,530 --> 00:01:09,030
who comes up with these anyway all these

00:01:07,590 --> 00:01:11,760
products are built out of a single

00:01:09,030 --> 00:01:13,860
repository we call router this

00:01:11,760 --> 00:01:16,259
repository contains the main entry point

00:01:13,860 --> 00:01:18,810
which is a make file to do all the bills

00:01:16,259 --> 00:01:20,640
and this make file includes other

00:01:18,810 --> 00:01:23,790
product specific make files and open

00:01:20,640 --> 00:01:25,770
what make files and so on this supposed

00:01:23,790 --> 00:01:27,750
to be also contains all our kernel

00:01:25,770 --> 00:01:30,869
checkouts and all our user space apps

00:01:27,750 --> 00:01:33,420
and drivers and SDKs anything that goes

00:01:30,869 --> 00:01:38,520
into a build lives in this one large git

00:01:33,420 --> 00:01:41,400
repository this legacy build system is

00:01:38,520 --> 00:01:43,470
built around an old check out of open

00:01:41,400 --> 00:01:45,780
word and we have the single made file

00:01:43,470 --> 00:01:49,170
that I showed orchestrating the whole

00:01:45,780 --> 00:01:53,759
build this made file is handwritten and

00:01:49,170 --> 00:01:56,130
that's never a good idea to do it has 13

00:01:53,759 --> 00:01:58,759
years of craft in it with people adding

00:01:56,130 --> 00:02:01,170
in all their changes however they want

00:01:58,759 --> 00:02:04,110
and a typical build looks something like

00:02:01,170 --> 00:02:05,820
this you specify the product you want to

00:02:04,110 --> 00:02:07,680
build for and you invoke make in that

00:02:05,820 --> 00:02:10,349
directory with that make file and it

00:02:07,680 --> 00:02:12,120
starts a build so you might be wondering

00:02:10,349 --> 00:02:13,800
why am I here talking about octave

00:02:12,120 --> 00:02:16,620
why don't we just take the bill

00:02:13,800 --> 00:02:19,680
system we have improve it a bit upgrade

00:02:16,620 --> 00:02:22,820
it and we'll be there right well to give

00:02:19,680 --> 00:02:28,050
an idea our open world check out is from

00:02:22,820 --> 00:02:29,700
2006 and in the 13 years since then we

00:02:28,050 --> 00:02:32,880
have made a number of changes to this

00:02:29,700 --> 00:02:35,730
check out of open world at the same time

00:02:32,880 --> 00:02:38,220
upstream Yocto has upstream open waters

00:02:35,730 --> 00:02:41,730
continue to make their own changes to

00:02:38,220 --> 00:02:44,190
their own checkouts and we have diverged

00:02:41,730 --> 00:02:46,740
further and further from what upstream

00:02:44,190 --> 00:02:48,570
does so at this point it's fairly

00:02:46,740 --> 00:02:50,100
difficult to pull in the new stuff they

00:02:48,570 --> 00:02:52,710
have been doing to pull in the

00:02:50,100 --> 00:02:56,910
improvements fixes and so on into our

00:02:52,710 --> 00:02:59,700
build system if not impossible secondly

00:02:56,910 --> 00:03:03,030
our legacy build system is very painful

00:02:59,700 --> 00:03:05,610
to use builds are super slow like four

00:03:03,030 --> 00:03:07,350
hours for a clean build and that's

00:03:05,610 --> 00:03:09,360
because of undeclared dependencies which

00:03:07,350 --> 00:03:12,300
means we have to build linearly if you

00:03:09,360 --> 00:03:14,400
do not know whether package a can be

00:03:12,300 --> 00:03:16,860
built before package B you cannot sort

00:03:14,400 --> 00:03:20,760
of paralyze them for fears of race

00:03:16,860 --> 00:03:22,440
conditions and so on and when we do a

00:03:20,760 --> 00:03:25,140
get pull it often breaks our bills

00:03:22,440 --> 00:03:27,810
because we might have leftover artifacts

00:03:25,140 --> 00:03:29,640
in the source directories and a package

00:03:27,810 --> 00:03:30,209
we depend on might not get rebuilt and

00:03:29,640 --> 00:03:33,300
so on

00:03:30,209 --> 00:03:35,640
and this get clean thing is a real

00:03:33,300 --> 00:03:38,790
problem like it hears are all the

00:03:35,640 --> 00:03:41,180
examples that I found in slack where

00:03:38,790 --> 00:03:44,640
people have been suggesting get cleaning

00:03:41,180 --> 00:03:47,160
over and over like here's me suggesting

00:03:44,640 --> 00:03:49,380
it here's my friend like everyone

00:03:47,160 --> 00:03:51,480
suggests this every other day all the

00:03:49,380 --> 00:03:55,680
way back to 2015 when we first started

00:03:51,480 --> 00:03:57,660
using slack not only that we also had an

00:03:55,680 --> 00:03:59,520
opportunity we were working on a new

00:03:57,660 --> 00:04:01,380
product and because it's a new product

00:03:59,520 --> 00:04:03,840
we are gonna get a lot of the testing

00:04:01,380 --> 00:04:05,580
for free we're gonna be testing things

00:04:03,840 --> 00:04:08,160
that are not even covered by automated

00:04:05,580 --> 00:04:10,700
tests for example and the vendor we were

00:04:08,160 --> 00:04:13,350
working with had good support on Yocto

00:04:10,700 --> 00:04:15,120
so to summarize we have a build system

00:04:13,350 --> 00:04:18,120
that's pretty unmaintainable at this

00:04:15,120 --> 00:04:20,430
point and it's slow and we need

00:04:18,120 --> 00:04:23,250
something that's fast more flexible able

00:04:20,430 --> 00:04:24,630
to handle our complex use cases so we

00:04:23,250 --> 00:04:27,180
thought why not give you up to a short

00:04:24,630 --> 00:04:30,840
it seems like a modern build system

00:04:27,180 --> 00:04:32,400
built on something called bitbake and it

00:04:30,840 --> 00:04:34,650
seems like it's better equipped to

00:04:32,400 --> 00:04:37,979
handle our complex use cases and it

00:04:34,650 --> 00:04:40,320
seems to a better vendor support so we

00:04:37,979 --> 00:04:44,789
decided to do our first bit plate build

00:04:40,320 --> 00:04:47,820
and we followed the Yocto QuickStart

00:04:44,789 --> 00:04:49,710
guide to first check out some

00:04:47,820 --> 00:04:51,060
repositories that they suggest in the

00:04:49,710 --> 00:04:54,449
QuickStart guide and then run these

00:04:51,060 --> 00:04:57,330
commands to do a build and run the image

00:04:54,449 --> 00:04:59,820
on kami and this only took about 10

00:04:57,330 --> 00:05:02,580
minutes and we already had an image that

00:04:59,820 --> 00:05:05,789
was able to get to the internet and run

00:05:02,580 --> 00:05:08,010
in Cameo and that was pretty nice but we

00:05:05,789 --> 00:05:10,020
wanted to build our own image that is

00:05:08,010 --> 00:05:13,289
able to run on our own hardware the new

00:05:10,020 --> 00:05:15,000
product that I was talking about so we

00:05:13,289 --> 00:05:17,669
went again went to the guides which are

00:05:15,000 --> 00:05:19,349
pretty helpful by the way and decided

00:05:17,669 --> 00:05:22,199
the first thing we needed to do was add

00:05:19,349 --> 00:05:24,660
a new layer and a new distro and a new

00:05:22,199 --> 00:05:27,020
machine that maps to the hardware we

00:05:24,660 --> 00:05:29,520
were actually using for the new product

00:05:27,020 --> 00:05:30,960
we then created a very minimal package

00:05:29,520 --> 00:05:33,660
group which is just a collection of

00:05:30,960 --> 00:05:36,660
different packages that would help us

00:05:33,660 --> 00:05:38,580
get to the Internet and then we create a

00:05:36,660 --> 00:05:41,729
new image that simply installs this

00:05:38,580 --> 00:05:45,090
group of packages and we kept picking

00:05:41,729 --> 00:05:47,250
again this again just only it takes

00:05:45,090 --> 00:05:49,530
about 10 minutes and we already had

00:05:47,250 --> 00:05:53,130
something that was booting on real

00:05:49,530 --> 00:05:56,190
hardware and this only took like a few

00:05:53,130 --> 00:05:58,080
days of work and that was pretty nice to

00:05:56,190 --> 00:06:00,720
see that it's so easy and nice to work

00:05:58,080 --> 00:06:03,300
with but of course it doesn't look much

00:06:00,720 --> 00:06:05,610
like our muraki's products right it

00:06:03,300 --> 00:06:06,630
doesn't have our proprietary stuff it

00:06:05,610 --> 00:06:09,750
doesn't have our packet processing

00:06:06,630 --> 00:06:11,460
engine all our packages and the packages

00:06:09,750 --> 00:06:12,900
that are there might be configured

00:06:11,460 --> 00:06:16,560
differently might be built differently

00:06:12,900 --> 00:06:18,539
so they don't exactly work for us so we

00:06:16,560 --> 00:06:20,400
decided the next thing to do is to pour

00:06:18,539 --> 00:06:23,190
packages from our existing open-wheel

00:06:20,400 --> 00:06:26,310
word paste pill system to our new build

00:06:23,190 --> 00:06:27,690
system and what do I mean by that well

00:06:26,310 --> 00:06:30,030
there are several packages that are

00:06:27,690 --> 00:06:31,560
missing in upstream Yocto and that's

00:06:30,030 --> 00:06:33,180
because they might be proprietary or

00:06:31,560 --> 00:06:37,229
maybe the community doesn't use them as

00:06:33,180 --> 00:06:39,170
often and we also want to make sure that

00:06:37,229 --> 00:06:43,070
the recipes that are there are

00:06:39,170 --> 00:06:44,810
modified to our needs I mean while we

00:06:43,070 --> 00:06:48,110
are in the migratory path we also want

00:06:44,810 --> 00:06:50,570
to make sure that the Delta between what

00:06:48,110 --> 00:06:52,820
our existing build system does and what

00:06:50,570 --> 00:06:54,740
our new build system does is kept to a

00:06:52,820 --> 00:06:56,810
minimum to avoid like confusing errors

00:06:54,740 --> 00:07:00,170
we're built from one does something

00:06:56,810 --> 00:07:02,090
different or so on but before I go into

00:07:00,170 --> 00:07:03,980
that I want to give a quick crash course

00:07:02,090 --> 00:07:05,350
on bitbake for those of you who are not

00:07:03,980 --> 00:07:08,690
familiar with it

00:07:05,350 --> 00:07:12,230
starting with recipes a recipe is a

00:07:08,690 --> 00:07:14,450
basic unit of input into a bitbake run

00:07:12,230 --> 00:07:18,830
and it's a set of instructions that are

00:07:14,450 --> 00:07:21,530
passed by bid peak and then executed to

00:07:18,830 --> 00:07:23,210
prove something we call a package and a

00:07:21,530 --> 00:07:26,750
recipe is written in the form of a make

00:07:23,210 --> 00:07:28,970
in sort of a bit big file where it's

00:07:26,750 --> 00:07:31,250
something like the package name followed

00:07:28,970 --> 00:07:33,350
by an underscore followed by the version

00:07:31,250 --> 00:07:35,570
and this version is passed into a

00:07:33,350 --> 00:07:37,670
variable called PV short for package

00:07:35,570 --> 00:07:41,120
version and that will be relevant in a

00:07:37,670 --> 00:07:44,120
little bit we also have the concept of a

00:07:41,120 --> 00:07:46,460
pens and a pen lets you modify an

00:07:44,120 --> 00:07:50,600
existing recipe without having to modify

00:07:46,460 --> 00:07:53,000
the existing recipes bit big file that

00:07:50,600 --> 00:07:55,040
lets you keep your changes separate from

00:07:53,000 --> 00:07:57,020
upstream changes and that's obviously

00:07:55,040 --> 00:07:59,060
very useful when you're trying to

00:07:57,020 --> 00:08:00,610
maintain things because you don't want

00:07:59,060 --> 00:08:05,030
to keep modifying upstream because

00:08:00,610 --> 00:08:07,610
merges become a problem a parents can be

00:08:05,030 --> 00:08:09,110
wild card the for the second example

00:08:07,610 --> 00:08:12,950
where there's a percentage sign that

00:08:09,110 --> 00:08:14,480
means that append applies to any version

00:08:12,950 --> 00:08:16,700
of the curl recipe

00:08:14,480 --> 00:08:18,230
they can also be version specific so the

00:08:16,700 --> 00:08:22,280
append only applies to their specific

00:08:18,230 --> 00:08:25,160
version of the recipe and finally we

00:08:22,280 --> 00:08:27,590
have layers layers let you sort of group

00:08:25,160 --> 00:08:30,080
recipes and modifications and classes

00:08:27,590 --> 00:08:32,150
into into separate groups in a separate

00:08:30,080 --> 00:08:35,000
directory so you can keep them contained

00:08:32,150 --> 00:08:39,380
and sort of defined logical group around

00:08:35,000 --> 00:08:41,240
them so bad back to pouring packages

00:08:39,380 --> 00:08:44,180
from open word to your - what do I mean

00:08:41,240 --> 00:08:45,920
by that well we want to make sure that

00:08:44,180 --> 00:08:48,410
the same sources are used the same

00:08:45,920 --> 00:08:49,670
packaged versions are used we also want

00:08:48,410 --> 00:08:51,470
to make sure the same patches are

00:08:49,670 --> 00:08:51,640
applied and the packages are configured

00:08:51,470 --> 00:08:55,180
the

00:08:51,640 --> 00:08:57,700
same way and compiled the same way so

00:08:55,180 --> 00:08:59,650
does that look like while we have on the

00:08:57,700 --> 00:09:03,130
left the original recipe provided by

00:08:59,650 --> 00:09:04,990
upstream Yocto at a specific version

00:09:03,130 --> 00:09:08,650
let's say one point four point three one

00:09:04,990 --> 00:09:11,890
and what we do that's the first step to

00:09:08,650 --> 00:09:16,660
modify this existing recipe is to create

00:09:11,890 --> 00:09:20,350
a BB append in our own layer and then we

00:09:16,660 --> 00:09:22,390
set P V to this new value I mentioned

00:09:20,350 --> 00:09:25,210
earlier that P V is passed out of the

00:09:22,390 --> 00:09:27,460
file name but you can actually override

00:09:25,210 --> 00:09:29,170
it in an append and even though the

00:09:27,460 --> 00:09:31,270
append is wildcard it's sort of like

00:09:29,170 --> 00:09:33,640
changing the version number it seems a

00:09:31,270 --> 00:09:37,120
bit hacky but it works for us and we

00:09:33,640 --> 00:09:38,770
will kind of okay with it we also have

00:09:37,120 --> 00:09:41,290
to update the checksums because we're

00:09:38,770 --> 00:09:43,300
using different sources we want to make

00:09:41,290 --> 00:09:44,830
sure our morality specific patches are

00:09:43,300 --> 00:09:47,500
applied or any other patches we might

00:09:44,830 --> 00:09:48,820
have like security fixes and so on you

00:09:47,500 --> 00:09:50,470
want to make sure the same consider

00:09:48,820 --> 00:09:54,070
options are used in the same compiler

00:09:50,470 --> 00:09:57,520
flags are used and this seems fairly

00:09:54,070 --> 00:09:58,870
straightforward but not all the packages

00:09:57,520 --> 00:10:00,670
were this straightforward to port some

00:09:58,870 --> 00:10:03,330
were actually fairly tricky requiring

00:10:00,670 --> 00:10:06,250
several patches to the upstream sources

00:10:03,330 --> 00:10:08,830
to make them work for our thing like we

00:10:06,250 --> 00:10:10,420
would enable some configure flag and now

00:10:08,830 --> 00:10:14,110
we have to patch the thing to make it

00:10:10,420 --> 00:10:15,370
work in the doctor thing and some of the

00:10:14,110 --> 00:10:17,560
packages were actually missing like I

00:10:15,370 --> 00:10:20,380
mentioned and we had a lot of these

00:10:17,560 --> 00:10:22,180
packages to port about 50 of them and we

00:10:20,380 --> 00:10:23,620
just didn't have enough time because as

00:10:22,180 --> 00:10:25,810
I mention early were working on bringing

00:10:23,620 --> 00:10:29,020
up a new product that we had to launch

00:10:25,810 --> 00:10:32,200
at a given deadline and so on so we

00:10:29,020 --> 00:10:34,690
decided to recruit help we organized the

00:10:32,200 --> 00:10:36,820
Yocto pouring day we created a jariabek

00:10:34,690 --> 00:10:40,510
added all the recipes that needed pour

00:10:36,820 --> 00:10:42,670
into it and we did some prep work like

00:10:40,510 --> 00:10:44,470
making sure all the recipes are labeled

00:10:42,670 --> 00:10:46,420
easy medium or hard so when people are

00:10:44,470 --> 00:10:49,060
picking they can decide what level of

00:10:46,420 --> 00:10:50,530
comfort they are at with it he also

00:10:49,060 --> 00:10:52,450
asked everyone to do a build the day

00:10:50,530 --> 00:10:56,590
before to speed up the bills on the day

00:10:52,450 --> 00:11:00,210
off and we sent our invoice with promise

00:10:56,590 --> 00:11:02,860
of snacks and boba that always works on

00:11:00,210 --> 00:11:04,900
the day off and actually this is the

00:11:02,860 --> 00:11:05,200
highest resolution image I could find

00:11:04,900 --> 00:11:07,840
out

00:11:05,200 --> 00:11:10,810
the recording excuse the potato

00:11:07,840 --> 00:11:12,630
recording but on the day off I gave

00:11:10,810 --> 00:11:15,880
everyone a tutorial of pippick and

00:11:12,630 --> 00:11:17,620
showed them how to pour a recipe and I

00:11:15,880 --> 00:11:20,740
asked everyone to go and assign

00:11:17,620 --> 00:11:22,270
themselves a recipe to port so that we

00:11:20,740 --> 00:11:25,180
don't have multiple people working on

00:11:22,270 --> 00:11:26,860
the same recipe he also has everyone to

00:11:25,180 --> 00:11:29,170
use slack so that if someone has seen a

00:11:26,860 --> 00:11:30,640
problem and solved that maybe others can

00:11:29,170 --> 00:11:33,250
benefit from it too rather than having

00:11:30,640 --> 00:11:36,430
to ask me and a couple of other people

00:11:33,250 --> 00:11:37,210
who knew Yocto and they still not to be

00:11:36,430 --> 00:11:39,400
a huge success

00:11:37,210 --> 00:11:41,230
we started at like you know around noon

00:11:39,400 --> 00:11:44,020
and by the end of the day we had 35

00:11:41,230 --> 00:11:45,760
recipes for eight out of the 50 and a

00:11:44,020 --> 00:11:48,070
lot of the difficult ones were 42 which

00:11:45,760 --> 00:11:49,810
was pretty impressive but I think most

00:11:48,070 --> 00:11:52,240
importantly it helped get people on

00:11:49,810 --> 00:11:54,400
board it helped them get a taste of

00:11:52,240 --> 00:11:56,560
Yocto and how its fast and easy to work

00:11:54,400 --> 00:11:59,410
with and that was really helpful in the

00:11:56,560 --> 00:12:01,660
long run so as a tip if you're working

00:11:59,410 --> 00:12:03,700
on some similar migration doesn't have

00:12:01,660 --> 00:12:05,770
to be the build system get people on

00:12:03,700 --> 00:12:08,110
board early address their concerns and

00:12:05,770 --> 00:12:11,820
it will also help you achieve your

00:12:08,110 --> 00:12:14,560
objectives faster like added hours I

00:12:11,820 --> 00:12:19,060
also want to talk about how we extended

00:12:14,560 --> 00:12:20,920
Yocto for our needs at Meraki your octo

00:12:19,060 --> 00:12:23,800
might not have everything you want for

00:12:20,920 --> 00:12:26,260
exactly the use cases you have but Yocto

00:12:23,800 --> 00:12:28,000
is super flexible it lets you build

00:12:26,260 --> 00:12:30,100
things on top and it provides all the

00:12:28,000 --> 00:12:32,110
building blocks to build those features

00:12:30,100 --> 00:12:36,100
that you want for your specific use

00:12:32,110 --> 00:12:37,750
cases our specific use cases were

00:12:36,100 --> 00:12:39,580
building out of discs because we had

00:12:37,750 --> 00:12:41,440
that one large repository that people

00:12:39,580 --> 00:12:43,990
check out and build out of and make

00:12:41,440 --> 00:12:46,600
modifications to and also enabling

00:12:43,990 --> 00:12:49,720
features and disabling features for up

00:12:46,600 --> 00:12:51,100
on Apple product bases and these are the

00:12:49,720 --> 00:12:54,070
two I'll go into but there were several

00:12:51,100 --> 00:12:56,140
other things we added as well so

00:12:54,070 --> 00:12:58,390
starting from building with building

00:12:56,140 --> 00:13:01,750
from disk the first thing we tried was

00:12:58,390 --> 00:13:04,510
something called external source to use

00:13:01,750 --> 00:13:05,800
it you simply inherit this class which

00:13:04,510 --> 00:13:07,390
basically gives you all the

00:13:05,800 --> 00:13:10,030
functionality implemented by this

00:13:07,390 --> 00:13:13,000
feature and you set this variable to

00:13:10,030 --> 00:13:16,210
point to your sources the problem

00:13:13,000 --> 00:13:18,340
however is this class makes it directly

00:13:16,210 --> 00:13:18,830
point to the sources on disk rather than

00:13:18,340 --> 00:13:20,690
cop

00:13:18,830 --> 00:13:23,930
the source is over into the Yocto

00:13:20,690 --> 00:13:26,150
staging directory and what that does is

00:13:23,930 --> 00:13:28,490
if you have a broken package that for

00:13:26,150 --> 00:13:30,110
example creates artifacts in the source

00:13:28,490 --> 00:13:33,500
directory you end up polluting your

00:13:30,110 --> 00:13:35,180
whole source our repository and then you

00:13:33,500 --> 00:13:37,250
have to go clean a game to produce a

00:13:35,180 --> 00:13:38,810
clean build and then we're back to the

00:13:37,250 --> 00:13:41,420
good clean problem which we really

00:13:38,810 --> 00:13:43,070
didn't want it also cannot handle

00:13:41,420 --> 00:13:47,270
multiple sources which we had to do for

00:13:43,070 --> 00:13:49,280
a few packages and if anything changes

00:13:47,270 --> 00:13:50,990
so let's say you change a C file it will

00:13:49,280 --> 00:13:53,270
go configure again and then compile

00:13:50,990 --> 00:13:56,870
again and so on and that also isn't

00:13:53,270 --> 00:13:58,580
great so to address the multiple source

00:13:56,870 --> 00:14:01,130
problem we tried using Soccio right

00:13:58,580 --> 00:14:02,540
directly sociai lets you specify all the

00:14:01,130 --> 00:14:05,690
sources that go into your build

00:14:02,540 --> 00:14:08,150
including patches so we tried this we

00:14:05,690 --> 00:14:12,770
tried the file type sociai which lets

00:14:08,150 --> 00:14:14,870
you specify a path on local disk but the

00:14:12,770 --> 00:14:16,940
main thing is we have to set s ourselves

00:14:14,870 --> 00:14:21,560
it copies things over but it doesn't

00:14:16,940 --> 00:14:23,060
change s to point to this new path so it

00:14:21,560 --> 00:14:24,890
handles multiple sources but there's

00:14:23,060 --> 00:14:28,240
this annoying thing of having to set s

00:14:24,890 --> 00:14:31,400
manually which is where it bills are off

00:14:28,240 --> 00:14:35,200
and it also doesn't address the problem

00:14:31,400 --> 00:14:37,640
of rebuilds if any of the sources change

00:14:35,200 --> 00:14:38,150
so we wrote something we call Meraki

00:14:37,640 --> 00:14:40,580
source

00:14:38,150 --> 00:14:43,220
it's very loosely based on external

00:14:40,580 --> 00:14:45,290
source and to use it you simply inherit

00:14:43,220 --> 00:14:47,000
miraka source and you set moeraki

00:14:45,290 --> 00:14:50,300
sources to point to all the directories

00:14:47,000 --> 00:14:52,340
you want copied over but more

00:14:50,300 --> 00:14:57,410
interestingly you can specify patterns

00:14:52,340 --> 00:14:59,210
of files which this task tracks so what

00:14:57,410 --> 00:15:01,790
you can do is say hey my configure tasks

00:14:59,210 --> 00:15:03,470
should only be rerun if on any of the

00:15:01,790 --> 00:15:04,420
automate files or any of the C mate

00:15:03,470 --> 00:15:06,920
files change

00:15:04,420 --> 00:15:11,680
similarly for compilation if any of the

00:15:06,920 --> 00:15:14,030
C and C++ files change to rebuild so if

00:15:11,680 --> 00:15:15,980
let's say you're working with the

00:15:14,030 --> 00:15:18,020
package you only change a C file you

00:15:15,980 --> 00:15:20,270
don't need to reconfigure you can just

00:15:18,020 --> 00:15:22,250
go straight to compilation again unless

00:15:20,270 --> 00:15:23,810
any of how to make files change or any

00:15:22,250 --> 00:15:26,870
of the make files change or something

00:15:23,810 --> 00:15:28,430
like that so this clearly handles

00:15:26,870 --> 00:15:30,530
multiple sources because you can define

00:15:28,430 --> 00:15:31,670
as many sources as you want in Meraki

00:15:30,530 --> 00:15:35,390
sources

00:15:31,670 --> 00:15:37,220
you can also this also copy sources over

00:15:35,390 --> 00:15:41,740
so it doesn't pollute the source

00:15:37,220 --> 00:15:45,950
directories and steps are only rerun if

00:15:41,740 --> 00:15:50,050
this set of files that are striking

00:15:45,950 --> 00:15:52,520
changes and this is all built using

00:15:50,050 --> 00:15:54,470
fundamental primitives that Yocto

00:15:52,520 --> 00:15:56,450
provides we didn't build a state caching

00:15:54,470 --> 00:15:59,360
or file check terms or prefix these are

00:15:56,450 --> 00:16:02,120
all cool concepts provided by octo for

00:15:59,360 --> 00:16:04,130
you to build on top and we should all

00:16:02,120 --> 00:16:07,610
take advantage of it if we have specific

00:16:04,130 --> 00:16:11,720
use cases so that helped us do nice

00:16:07,610 --> 00:16:13,040
clean extreme from these bills and I

00:16:11,720 --> 00:16:17,720
want to talk about picking and choosing

00:16:13,040 --> 00:16:19,130
features based on a specific product you

00:16:17,720 --> 00:16:21,200
might be feeling some of you might be

00:16:19,130 --> 00:16:23,600
familiar with the machine features and

00:16:21,200 --> 00:16:26,570
these two features and what that lets

00:16:23,600 --> 00:16:29,480
you do is say hey for my product or my

00:16:26,570 --> 00:16:31,820
district or this image I want you know

00:16:29,480 --> 00:16:34,040
people being able door I want Bluetooth

00:16:31,820 --> 00:16:35,990
enabled or something like that but of

00:16:34,040 --> 00:16:38,450
course our features were much different

00:16:35,990 --> 00:16:41,000
we wanted for example LEDs enabled or we

00:16:38,450 --> 00:16:42,710
wanted the LT drivers installed or

00:16:41,000 --> 00:16:45,950
something like that so they don't quite

00:16:42,710 --> 00:16:47,420
map so we took inspiration from it and

00:16:45,950 --> 00:16:48,950
we wrote something called moeraki

00:16:47,420 --> 00:16:52,130
features it's simply a global variable

00:16:48,950 --> 00:16:54,590
and you said to it in in your machine

00:16:52,130 --> 00:16:57,380
config or wherever you want to set the

00:16:54,590 --> 00:16:59,750
value of it and it lets you

00:16:57,380 --> 00:17:02,210
for example pick which packages you want

00:16:59,750 --> 00:17:04,209
to install or configure package

00:17:02,210 --> 00:17:07,430
differently or something like that and

00:17:04,209 --> 00:17:08,630
the way you do that is by setting the

00:17:07,430 --> 00:17:10,730
features you want in your machine

00:17:08,630 --> 00:17:14,360
configuration so for example you want

00:17:10,730 --> 00:17:16,160
the bird feature and in your package

00:17:14,360 --> 00:17:18,500
group you can simply say hey if this

00:17:16,160 --> 00:17:20,750
bird feature is in Meraki features

00:17:18,500 --> 00:17:22,970
install all the related dependencies and

00:17:20,750 --> 00:17:24,650
we can do all sorts of cool things with

00:17:22,970 --> 00:17:28,580
it just like machine features and

00:17:24,650 --> 00:17:30,710
destroy features so far I've talked

00:17:28,580 --> 00:17:32,030
about all the things all the places

00:17:30,710 --> 00:17:36,080
where your two really shines

00:17:32,030 --> 00:17:38,960
extensibility flexibility speed but I

00:17:36,080 --> 00:17:40,910
also want to talk a bit more about room

00:17:38,960 --> 00:17:42,320
for improvement in Yocto of course

00:17:40,910 --> 00:17:43,900
there's always room for improvement but

00:17:42,320 --> 00:17:46,900
I've picked two things I

00:17:43,900 --> 00:17:48,490
to talk about specifically and the first

00:17:46,900 --> 00:17:51,340
one is the problem of mismatched

00:17:48,490 --> 00:17:54,520
e-library headers some of you might have

00:17:51,340 --> 00:17:56,920
seen this recipe called linux Lipsy

00:17:54,520 --> 00:17:59,770
headers if you have ever wondered how

00:17:56,920 --> 00:18:02,470
the c library itself gets compiled it

00:17:59,770 --> 00:18:04,930
starts with kernel sources itself you

00:18:02,470 --> 00:18:06,670
essentially run make headers install on

00:18:04,930 --> 00:18:09,430
your kernel sources for a specific

00:18:06,670 --> 00:18:13,000
version that say kernel 4.1 Linux kernel

00:18:09,430 --> 00:18:17,590
4.1 it spits out a bunch of headers that

00:18:13,000 --> 00:18:19,690
you then use for Lipsey's own build then

00:18:17,590 --> 00:18:21,610
the C library gets built spits out its

00:18:19,690 --> 00:18:23,770
own headers which are then used for an

00:18:21,610 --> 00:18:27,820
actual application that you might want

00:18:23,770 --> 00:18:29,530
to run on an actual machine our problem

00:18:27,820 --> 00:18:32,170
was we were building a different kernel

00:18:29,530 --> 00:18:35,200
the next 3.14 which was running on a

00:18:32,170 --> 00:18:38,920
machine and we wanted to run it to on

00:18:35,200 --> 00:18:41,710
this specific machine but the problem is

00:18:38,920 --> 00:18:43,780
each tool is one of those applications

00:18:41,710 --> 00:18:45,850
that talks directly to the kernel why

00:18:43,780 --> 00:18:47,920
are the netlink api there are several

00:18:45,850 --> 00:18:50,080
other such user space applications that

00:18:47,920 --> 00:18:52,600
need to know exactly how to talk to the

00:18:50,080 --> 00:18:55,210
kernel over I octaves or anything like

00:18:52,600 --> 00:18:58,810
that but this is currently not possible

00:18:55,210 --> 00:19:01,320
and that is because of this disjoint

00:18:58,810 --> 00:19:04,090
view of build time and runtime

00:19:01,320 --> 00:19:05,800
environment that it has at build time it

00:19:04,090 --> 00:19:07,900
sees a header saying this is the API to

00:19:05,800 --> 00:19:10,180
talk to the colonel at wrong time it

00:19:07,900 --> 00:19:14,110
tries to use it and maybe it's not the

00:19:10,180 --> 00:19:15,760
same and the way I ran into it was I was

00:19:14,110 --> 00:19:18,460
doing my usual bills and this package

00:19:15,760 --> 00:19:21,040
started feeling poorer and there was

00:19:18,460 --> 00:19:23,740
this constant speed underscore 5,000 now

00:19:21,040 --> 00:19:25,390
undefined so I did some digging through

00:19:23,740 --> 00:19:27,300
the gate history and I saw that a

00:19:25,390 --> 00:19:30,070
colleague of mine had made this change

00:19:27,300 --> 00:19:35,050
she had added the use of speed 5,000

00:19:30,070 --> 00:19:36,640
into the program into the C++ file so I

00:19:35,050 --> 00:19:38,410
did some more digging see where it's

00:19:36,640 --> 00:19:40,810
defined and turns out she had actually

00:19:38,410 --> 00:19:42,460
passed the kernel but this is our legit

00:19:40,810 --> 00:19:46,240
she had actually back ported the patch

00:19:42,460 --> 00:19:49,030
from a future kernel from 4.4 into 3.14

00:19:46,240 --> 00:19:51,460
and this is totally legitimate even

00:19:49,030 --> 00:19:54,910
upstream kernel has this patch so we

00:19:51,460 --> 00:19:57,490
simply are back coding the patch but

00:19:54,910 --> 00:20:00,549
again we just weren't able to come

00:19:57,490 --> 00:20:02,679
because we wrote an application that was

00:20:00,549 --> 00:20:04,419
meant to run against the specific set of

00:20:02,679 --> 00:20:07,210
kernels that were either patched or were

00:20:04,419 --> 00:20:08,740
new enough to have this patch in it but

00:20:07,210 --> 00:20:11,620
we just couldn't because of this

00:20:08,740 --> 00:20:15,520
disjoint view of the world for this

00:20:11,620 --> 00:20:17,530
application our solution was to write

00:20:15,520 --> 00:20:20,169
our own recipe of linux Lipsy errors I

00:20:17,530 --> 00:20:21,910
know there's a big fad like 50 line

00:20:20,169 --> 00:20:24,520
comment in the open-source

00:20:21,910 --> 00:20:27,040
Yocto Linux Lipsy headers recipe saying

00:20:24,520 --> 00:20:29,770
you must use this recipe and nothing

00:20:27,040 --> 00:20:31,690
else and but I think it's incorrect and

00:20:29,770 --> 00:20:34,990
we can talk about it if you want to talk

00:20:31,690 --> 00:20:37,929
about it later so what we do is we write

00:20:34,990 --> 00:20:40,840
our own recipe which always matches the

00:20:37,929 --> 00:20:44,110
kernel that we are building and that way

00:20:40,840 --> 00:20:46,390
it the compile-time and run-time view of

00:20:44,110 --> 00:20:48,160
the world is coherent it's it's built

00:20:46,390 --> 00:20:51,460
against the exact same headers that the

00:20:48,160 --> 00:20:54,490
kernel is going to be built against and

00:20:51,460 --> 00:20:56,559
we did this again like I said by writing

00:20:54,490 --> 00:20:58,630
our own Linux Lipsy headers recipe on

00:20:56,559 --> 00:21:01,480
the Left we have a version recipe at

00:20:58,630 --> 00:21:03,429
four point one let's say energy known

00:21:01,480 --> 00:21:08,799
fetches those exact sources of the

00:21:03,429 --> 00:21:11,169
kernel what we do is set pv ourselves

00:21:08,799 --> 00:21:13,360
and it always points to the version that

00:21:11,169 --> 00:21:17,830
actual kernel being built is built out

00:21:13,360 --> 00:21:20,110
of we also change s to point to the

00:21:17,830 --> 00:21:22,900
exact sources that the kernel is using

00:21:20,110 --> 00:21:25,660
itself that way we know that there

00:21:22,900 --> 00:21:28,000
there's literally no difference in the

00:21:25,660 --> 00:21:30,880
headers or in anything else that might

00:21:28,000 --> 00:21:32,710
go into the build and the rest of the

00:21:30,880 --> 00:21:34,690
recipe is fairly similar except like a

00:21:32,710 --> 00:21:38,230
few minor caveat but it's the rest of

00:21:34,690 --> 00:21:40,510
the recipe is fairly similar and this

00:21:38,230 --> 00:21:43,450
solved our problem even though it's a

00:21:40,510 --> 00:21:45,760
little bit hacky so unless what we

00:21:43,450 --> 00:21:47,799
learned from this exercise was some

00:21:45,760 --> 00:21:51,370
hacks are ok if they help you move

00:21:47,799 --> 00:21:52,929
forward and unblock here but of course

00:21:51,370 --> 00:21:54,520
in the long run we would love to work

00:21:52,929 --> 00:21:56,830
with the community to actually find a

00:21:54,520 --> 00:21:59,290
middle ground where the community is

00:21:56,830 --> 00:22:04,150
happy other users of the of this recipe

00:21:59,290 --> 00:22:06,700
are happy and we are happy I also want

00:22:04,150 --> 00:22:08,890
to talk a bit more about layers and how

00:22:06,700 --> 00:22:10,260
they can be so much more than they are

00:22:08,890 --> 00:22:12,960
today

00:22:10,260 --> 00:22:14,540
I thought I touched on BB lairs variable

00:22:12,960 --> 00:22:17,790
earlier and how you can pick and choose

00:22:14,540 --> 00:22:20,010
layers using that variable but what I

00:22:17,790 --> 00:22:22,020
did not mention is that layers cannot

00:22:20,010 --> 00:22:24,510
actually be programmatically selected

00:22:22,020 --> 00:22:26,070
they are sort of statically built into

00:22:24,510 --> 00:22:29,160
this one file and I'll go into that a

00:22:26,070 --> 00:22:32,040
little bit so let's say you have your

00:22:29,160 --> 00:22:33,840
open source Yocto provided layers that

00:22:32,040 --> 00:22:36,630
you use if you're doing a build pretty

00:22:33,840 --> 00:22:38,820
much every one selects these layers then

00:22:36,630 --> 00:22:40,440
we have our Meraki specifically this

00:22:38,820 --> 00:22:42,900
contains all our modifications of all

00:22:40,440 --> 00:22:46,950
our recipes and let's say we start a

00:22:42,900 --> 00:22:49,350
build for our particular machine what we

00:22:46,950 --> 00:22:51,900
would have liked is for a some way to

00:22:49,350 --> 00:22:54,929
conditionally programmatically insert a

00:22:51,900 --> 00:22:57,240
new layer for this specific machine that

00:22:54,929 --> 00:22:59,700
way we could keep all the changes and

00:22:57,240 --> 00:23:01,590
modifications for this one machine in

00:22:59,700 --> 00:23:05,190
its own layer like keep it segregated

00:23:01,590 --> 00:23:06,630
keep it clean but as we know it's layers

00:23:05,190 --> 00:23:10,169
are selected through a variable called

00:23:06,630 --> 00:23:13,110
BB layers and this lives inside a file

00:23:10,169 --> 00:23:15,840
called BB layer scarf which lives inside

00:23:13,110 --> 00:23:17,970
the build right tree so every time you

00:23:15,840 --> 00:23:19,590
create a new build directory this file

00:23:17,970 --> 00:23:22,890
is sort of statically put in there and

00:23:19,590 --> 00:23:25,490
if you want to choose different set of

00:23:22,890 --> 00:23:29,040
layers you have to go modify this file

00:23:25,490 --> 00:23:31,110
you can all sort of like conditionally

00:23:29,040 --> 00:23:33,270
select people layers which is the thing

00:23:31,110 --> 00:23:34,799
we were really missing sure we could

00:23:33,270 --> 00:23:37,290
have written tooling around it but that

00:23:34,799 --> 00:23:38,640
seemed like even more happy than then

00:23:37,290 --> 00:23:41,250
it's worth and we talked to some people

00:23:38,640 --> 00:23:43,049
in the community and they seem to have

00:23:41,250 --> 00:23:46,500
run into problems trying to do that so

00:23:43,049 --> 00:23:48,090
we stayed away from it similarly if you

00:23:46,500 --> 00:23:50,370
want to do a build for a different

00:23:48,090 --> 00:23:51,870
machine you would have liked a new set

00:23:50,370 --> 00:23:54,270
of layers to be picked for that

00:23:51,870 --> 00:23:56,190
particular build but again this is not

00:23:54,270 --> 00:23:57,960
possible because you have to go modify

00:23:56,190 --> 00:24:00,120
this file before you can start the build

00:23:57,960 --> 00:24:02,070
and if you're working with two machines

00:24:00,120 --> 00:24:04,320
you have to kind of go back and forth

00:24:02,070 --> 00:24:06,600
and take Meraki for example we were

00:24:04,320 --> 00:24:08,040
working with like ten machines fifteen

00:24:06,600 --> 00:24:11,910
machines and then it becomes a real

00:24:08,040 --> 00:24:14,669
headache but layers are still very

00:24:11,910 --> 00:24:16,230
useful everyone should use them as long

00:24:14,669 --> 00:24:19,650
as you don't have to switch them in and

00:24:16,230 --> 00:24:24,179
out often enough so let's say we have

00:24:19,650 --> 00:24:24,390
our same set of layers we use layers for

00:24:24,179 --> 00:24:26,820
some

00:24:24,390 --> 00:24:28,980
we called back port Slayers so we have

00:24:26,820 --> 00:24:30,750
our own set of layers the same set and

00:24:28,980 --> 00:24:33,600
the open-source layers are checked out

00:24:30,750 --> 00:24:35,400
at position 2.5 and let's say they

00:24:33,600 --> 00:24:38,070
contain a recipe for curl at version one

00:24:35,400 --> 00:24:39,720
point four point one what we find a

00:24:38,070 --> 00:24:41,370
security vulnerability in one point four

00:24:39,720 --> 00:24:43,770
point one and we have to upgrade it as

00:24:41,370 --> 00:24:46,740
soon as possible to address the security

00:24:43,770 --> 00:24:49,350
vulnerability so we decided we need to

00:24:46,740 --> 00:24:51,150
upgrade to one point five and we see

00:24:49,350 --> 00:24:53,010
that upstream Yocto the next version

00:24:51,150 --> 00:24:55,800
perhaps already has a recipe for one

00:24:53,010 --> 00:24:58,140
point five but we don't want to just

00:24:55,800 --> 00:24:59,820
blindly download that recipe and add it

00:24:58,140 --> 00:25:02,190
to our home layer because we'll end up

00:24:59,820 --> 00:25:04,290
with like these tons of recipes that

00:25:02,190 --> 00:25:07,740
will have duplicates for once we go to

00:25:04,290 --> 00:25:09,480
the next version anyway so what we do is

00:25:07,740 --> 00:25:12,030
we create a new layer called the back

00:25:09,480 --> 00:25:16,950
ports 2.6 layer and this layer contains

00:25:12,030 --> 00:25:18,840
all the back ports from 2.6 that way the

00:25:16,950 --> 00:25:20,160
changes are kept in their own thing and

00:25:18,840 --> 00:25:23,430
we know where they came from they came

00:25:20,160 --> 00:25:24,570
from the next version of Yocto at some

00:25:23,430 --> 00:25:26,820
point of course we are going to upgrade

00:25:24,570 --> 00:25:29,130
our own ahktar to 2.6 and now we have

00:25:26,820 --> 00:25:31,020
two copies of this recipe but this is

00:25:29,130 --> 00:25:32,460
all totally fine because we can just

00:25:31,020 --> 00:25:35,100
simply get rid of the back ports layer

00:25:32,460 --> 00:25:38,070
and we have this single coherent view of

00:25:35,100 --> 00:25:39,750
the world again and it's basically an

00:25:38,070 --> 00:25:42,810
orb to remove that layer at that point

00:25:39,750 --> 00:25:46,230
and that sort of gives you a nice clean

00:25:42,810 --> 00:25:48,720
path to upgrade and your own check out

00:25:46,230 --> 00:25:52,290
of Yocto without having to stick to the

00:25:48,720 --> 00:25:54,330
upstream releases and you can upgrade at

00:25:52,290 --> 00:25:58,230
your own cadence you can decide when to

00:25:54,330 --> 00:25:59,880
a career and so on all of this work that

00:25:58,230 --> 00:26:01,560
went into Yocto and all the people who

00:25:59,880 --> 00:26:04,350
helped with it led to a number of

00:26:01,560 --> 00:26:06,870
successes the biggest one was of course

00:26:04,350 --> 00:26:10,470
the build times and this is a super

00:26:06,870 --> 00:26:12,900
exaggerated diagram or a chart but it

00:26:10,470 --> 00:26:14,730
actually gave us a 16x speed-up over the

00:26:12,900 --> 00:26:17,700
existing build system we went from

00:26:14,730 --> 00:26:20,580
literally four hours to 15 minutes and

00:26:17,700 --> 00:26:22,110
that's a huge gain in developer time we

00:26:20,580 --> 00:26:25,380
no longer have to start a build and just

00:26:22,110 --> 00:26:27,210
go home you know so that's the real win

00:26:25,380 --> 00:26:29,760
for us we save a lot of developer time

00:26:27,210 --> 00:26:31,440
we save a lot of frustration around like

00:26:29,760 --> 00:26:33,210
waiting for bills and then if it fails

00:26:31,440 --> 00:26:34,910
you have to clean and start all over

00:26:33,210 --> 00:26:39,280
again

00:26:34,910 --> 00:26:41,230
most of our products are also now on

00:26:39,280 --> 00:26:42,970
and that means we gain more and more

00:26:41,230 --> 00:26:45,880
benefit from it as more and more

00:26:42,970 --> 00:26:48,420
products move to your toe at Meraki you

00:26:45,880 --> 00:26:50,830
might see this like sort of slow penis

00:26:48,420 --> 00:26:53,290
jumps in the number of products pour it

00:26:50,830 --> 00:26:55,930
and that's because let's say you have a

00:26:53,290 --> 00:26:58,210
certain class of products let's say our

00:26:55,930 --> 00:27:00,340
wireless access points the first one

00:26:58,210 --> 00:27:02,140
might take a long time to port because

00:27:00,340 --> 00:27:04,060
you have to test it and think about all

00:27:02,140 --> 00:27:05,650
the base but after that all the other

00:27:04,060 --> 00:27:08,260
wireless access points are very similar

00:27:05,650 --> 00:27:10,690
to each other so the next few just take

00:27:08,260 --> 00:27:13,060
you know like a week to report two or

00:27:10,690 --> 00:27:16,650
three at a time so that's how we get

00:27:13,060 --> 00:27:18,430
this like sort of jumpiness in the chart

00:27:16,650 --> 00:27:19,960
and that's an important thing to

00:27:18,430 --> 00:27:21,760
remember like if you're pouring the

00:27:19,960 --> 00:27:24,040
first one will be difficult it will take

00:27:21,760 --> 00:27:27,870
a lot of time but the ones after will

00:27:24,040 --> 00:27:30,160
code sort of come for free and finally

00:27:27,870 --> 00:27:32,110
working with the ahktar has been a

00:27:30,160 --> 00:27:34,810
pleasure it's super easy to maintain

00:27:32,110 --> 00:27:37,180
super easy to upgrade and we don't have

00:27:34,810 --> 00:27:39,520
to write recipes oftentimes by the time

00:27:37,180 --> 00:27:42,610
we need a recipe option doctor already

00:27:39,520 --> 00:27:45,070
has a recipe for it and and if we do

00:27:42,610 --> 00:27:47,650
write our recipes first before the

00:27:45,070 --> 00:27:50,200
upstream doctor we like open sourcing

00:27:47,650 --> 00:27:54,070
them so that the community can advantage

00:27:50,200 --> 00:27:56,860
take advantage of it and I want to close

00:27:54,070 --> 00:27:59,410
where the feet are I really will can't

00:27:56,860 --> 00:28:01,570
stress enough how great reactor has been

00:27:59,410 --> 00:28:04,240
to work with the community has really

00:28:01,570 --> 00:28:06,850
put a lot of thought into designing it

00:28:04,240 --> 00:28:09,370
making it flexible sort of giving us a

00:28:06,850 --> 00:28:12,370
general purpose pill system and not just

00:28:09,370 --> 00:28:14,470
specific to one use case and that has

00:28:12,370 --> 00:28:16,750
helped us build a lot of features on top

00:28:14,470 --> 00:28:19,030
of Yocto and we would love to

00:28:16,750 --> 00:28:21,580
open-source all those features there's

00:28:19,030 --> 00:28:23,110
nothing proprietary and we have taken a

00:28:21,580 --> 00:28:26,590
lot from either York to community and we

00:28:23,110 --> 00:28:28,900
would love to give back and while I'm at

00:28:26,590 --> 00:28:32,560
here I also would like to propose a more

00:28:28,900 --> 00:28:35,230
of a modern RFC process rather than

00:28:32,560 --> 00:28:37,470
perhaps using mailing lists I'm not the

00:28:35,230 --> 00:28:39,490
biggest fan of mailing lists and

00:28:37,470 --> 00:28:42,040
something like what the rest community

00:28:39,490 --> 00:28:45,280
uses like github or gait lab or any

00:28:42,040 --> 00:28:47,890
other modern tool or platform I think it

00:28:45,280 --> 00:28:50,320
would really help drive input into new

00:28:47,890 --> 00:28:51,399
features that get designed and get more

00:28:50,320 --> 00:28:53,019
participation from the

00:28:51,399 --> 00:28:58,509
corporate and open source and the

00:28:53,019 --> 00:29:00,070
community and so on I also really want

00:28:58,509 --> 00:29:03,159
to stress how important it is to get

00:29:00,070 --> 00:29:05,529
people on board early it will help you

00:29:03,159 --> 00:29:07,179
achieve your objectives faster like I

00:29:05,529 --> 00:29:11,080
mentioned but it also helps reduce

00:29:07,179 --> 00:29:14,049
friction listen to what the people have

00:29:11,080 --> 00:29:16,659
to say address their concerns show them

00:29:14,049 --> 00:29:19,809
that you know you care what they think

00:29:16,659 --> 00:29:21,879
otherwise by the time you introduce the

00:29:19,809 --> 00:29:23,619
change there'll be a lot of friction and

00:29:21,879 --> 00:29:27,039
pushback and it's too much to deal with

00:29:23,619 --> 00:29:29,710
at once and I want to close by thanking

00:29:27,039 --> 00:29:31,899
Rahm who was the other main person who

00:29:29,710 --> 00:29:34,450
worked with me on York to make it the

00:29:31,899 --> 00:29:37,179
reality it is at Meraki today and Matt

00:29:34,450 --> 00:29:40,269
proko said Meraki who did the initial

00:29:37,179 --> 00:29:42,789
proof of concept and helped us realize

00:29:40,269 --> 00:29:43,989
we can actually do it at Meraki of

00:29:42,789 --> 00:29:46,359
course everyone who helped me prepare

00:29:43,989 --> 00:29:48,999
the presentation and the amazing reactor

00:29:46,359 --> 00:29:51,219
community or the last year of so I have

00:29:48,999 --> 00:29:54,369
had a bunch of dumb questions to ask on

00:29:51,219 --> 00:29:56,259
the IRC and always met with good useful

00:29:54,369 --> 00:29:59,080
responses that I have been able to work

00:29:56,259 --> 00:30:01,269
with and also I want to thank everyone

00:29:59,080 --> 00:30:03,009
at the Yocto dev days last year who also

00:30:01,269 --> 00:30:04,659
answered a bunch of our dumb questions

00:30:03,009 --> 00:30:07,059
and helped us think through some of the

00:30:04,659 --> 00:30:11,799
problems you're facing and also helped

00:30:07,059 --> 00:30:13,509
us decide to present here this year if

00:30:11,799 --> 00:30:15,729
you want to reach me that's my email

00:30:13,509 --> 00:30:17,289
address you can also come find me if you

00:30:15,729 --> 00:30:21,669
see me and ask me any questions you

00:30:17,289 --> 00:30:28,259
might have and if anyone has questions I

00:30:21,669 --> 00:30:28,259
can take them now yep

00:30:40,850 --> 00:30:47,749
so using core image install also to

00:30:44,700 --> 00:30:51,029
decide which packages go into the thing

00:30:47,749 --> 00:30:54,929
right we did think about that but that

00:30:51,029 --> 00:30:56,960
feature specifically addresses what

00:30:54,929 --> 00:30:59,129
things get installed a lot of the times

00:30:56,960 --> 00:31:01,289
let's say we enable some features we

00:30:59,129 --> 00:31:03,149
have to configure a number of packages

00:31:01,289 --> 00:31:04,649
differently if you have to compile them

00:31:03,149 --> 00:31:07,769
differently you have to do all sorts of

00:31:04,649 --> 00:31:10,049
other things besides just installing a

00:31:07,769 --> 00:31:12,809
different set of packages so that's why

00:31:10,049 --> 00:31:17,629
we try to decide to use that good

00:31:12,809 --> 00:31:17,629
question yep

00:31:35,630 --> 00:31:47,190
all right all right so we did look into

00:31:45,360 --> 00:31:49,050
BSP layers quite a bit and that's

00:31:47,190 --> 00:31:52,790
exactly sort of the thing we wanted to

00:31:49,050 --> 00:31:55,560
do but I wasn't aware that they were

00:31:52,790 --> 00:31:57,960
dynamically selectable do you still have

00:31:55,560 --> 00:32:16,680
to go edit PB layers confer today that

00:31:57,960 --> 00:32:19,770
uh huh okay right so we looked into that

00:32:16,680 --> 00:32:21,660
the second option you mentioned but we

00:32:19,770 --> 00:32:24,000
sort of decided not to do that because

00:32:21,660 --> 00:32:26,400
we talked to some people at yeah after

00:32:24,000 --> 00:32:28,890
depth this last year and they had done

00:32:26,400 --> 00:32:30,930
something similar but they want huge

00:32:28,890 --> 00:32:33,330
fans of it so so I would love to hear

00:32:30,930 --> 00:32:45,030
more about it and maybe you can actually

00:32:33,330 --> 00:32:48,380
fix that issue okay cool thank you I'll

00:32:45,030 --> 00:32:48,380
definitely look into that

00:32:48,770 --> 00:32:55,070
other questions

00:32:52,070 --> 00:32:55,070
yep

00:32:57,400 --> 00:33:02,480
so the new product we started working on

00:33:00,980 --> 00:33:06,770
was like you know towards the end of

00:33:02,480 --> 00:33:08,570
2017 we launched in 2018 and from then

00:33:06,770 --> 00:33:12,080
on we started pouring all our existing

00:33:08,570 --> 00:33:21,110
products and today we are at like you

00:33:12,080 --> 00:33:22,910
know 60 70 % done right we were like

00:33:21,110 --> 00:33:25,429
okay we're gonna launch the new product

00:33:22,910 --> 00:33:27,770
on York to exclusively and then move

00:33:25,429 --> 00:33:29,990
everything over we haven't been working

00:33:27,770 --> 00:33:32,900
on it like you know full time but as we

00:33:29,990 --> 00:33:40,540
get time and resources we try to portal

00:33:32,900 --> 00:33:40,540
yep mm-hmm

00:33:40,600 --> 00:33:48,020
nothing really except resources and time

00:33:44,679 --> 00:33:49,070
we would weekend we would love to start

00:33:48,020 --> 00:33:53,030
as soon as possible

00:33:49,070 --> 00:33:54,950
there's like we could make the Moroccan

00:33:53,030 --> 00:33:57,500
sauce generic and let the community use

00:33:54,950 --> 00:33:58,850
it and stuff like that so definitely we

00:33:57,500 --> 00:34:01,040
want to contribute that's not in

00:33:58,850 --> 00:34:04,030
question but just you know the timing

00:34:01,040 --> 00:34:04,030
and resources to do

00:34:14,800 --> 00:34:32,899
all right all right right right so I say

00:34:29,690 --> 00:34:34,429
what do you mean to ask if we were

00:34:32,899 --> 00:34:41,800
starting from scratch and we didn't

00:34:34,429 --> 00:34:44,780
already have existing products all right

00:34:41,800 --> 00:34:48,260
that's a tough question to ask or to

00:34:44,780 --> 00:34:50,450
answer rather because I mean if you if

00:34:48,260 --> 00:34:53,240
you're a very simple use case maybe

00:34:50,450 --> 00:34:55,070
build root would be fine for you but if

00:34:53,240 --> 00:34:59,930
you don't like make files then maybe

00:34:55,070 --> 00:35:05,150
build root is not fine for you depends I

00:34:59,930 --> 00:35:07,339
think as you scale if you predict your

00:35:05,150 --> 00:35:09,920
number of products going up and your use

00:35:07,339 --> 00:35:12,200
case is kind of specializing go with

00:35:09,920 --> 00:35:15,080
something that's more you know complex

00:35:12,200 --> 00:35:17,450
and helps you deal with the complexity

00:35:15,080 --> 00:35:20,810
if you just only have one product and

00:35:17,450 --> 00:35:24,460
you are doing minimal modifications to

00:35:20,810 --> 00:35:26,780
upstream then and anything works really

00:35:24,460 --> 00:35:29,030
they're both equivalent in terms of you

00:35:26,780 --> 00:35:31,720
know build times and features and so on

00:35:29,030 --> 00:35:34,820
but just how flexible they are and

00:35:31,720 --> 00:35:41,650
whether you like make false I really

00:35:34,820 --> 00:35:41,650
don't like make files anything else

00:35:44,410 --> 00:35:52,280
thank you very much

00:35:46,440 --> 00:35:52,280

YouTube URL: https://www.youtube.com/watch?v=hG_ktX48PEg


