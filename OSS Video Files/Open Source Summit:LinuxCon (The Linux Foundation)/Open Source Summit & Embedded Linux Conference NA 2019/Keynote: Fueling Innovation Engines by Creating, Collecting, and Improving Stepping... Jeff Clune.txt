Title: Keynote: Fueling Innovation Engines by Creating, Collecting, and Improving Stepping... Jeff Clune
Publication date: 2019-08-28
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	Keynote: Fueling Innovation Engines by Creating, Collecting, and Improving Stepping Stones - Jeff Clune, Harris Associate Professor - Computer Science, University of Wyoming & Senior Research Manager (Staff Scientist), Uber AI Labs
Captions: 
	00:00:00,030 --> 00:00:04,080
hello everyone it's an honor to be here

00:00:01,589 --> 00:00:05,670
thank you to the organizers so I want to

00:00:04,080 --> 00:00:07,950
talk to you today about fueling

00:00:05,670 --> 00:00:10,920
innovation by creating collecting and

00:00:07,950 --> 00:00:13,710
improving stepping-stones and there's an

00:00:10,920 --> 00:00:20,310
interesting paradox in life let's see if

00:00:13,710 --> 00:00:23,010
this works it's not working that's not

00:00:20,310 --> 00:00:25,710
good all right there's a paradox in life

00:00:23,010 --> 00:00:28,410
which is if you try too hard to solve a

00:00:25,710 --> 00:00:30,750
really ambitious problem which is to say

00:00:28,410 --> 00:00:32,880
that you only take actions that advance

00:00:30,750 --> 00:00:35,760
towards that goal then you'll fail

00:00:32,880 --> 00:00:37,829
however if you ignore the objective

00:00:35,760 --> 00:00:40,230
completely you're much more likely to

00:00:37,829 --> 00:00:42,120
succeed so a metaphor for that is this

00:00:40,230 --> 00:00:43,500
maze here whereas if you imagine a

00:00:42,120 --> 00:00:45,270
little robot that it starts at the

00:00:43,500 --> 00:00:47,640
bottom and it tries to reduce its

00:00:45,270 --> 00:00:48,930
distance to the goal if it only takes

00:00:47,640 --> 00:00:50,520
actions that do that then it will go

00:00:48,930 --> 00:00:51,329
north and it will bang its head against

00:00:50,520 --> 00:00:52,739
the wall forever

00:00:51,329 --> 00:00:54,480
which is what this optimization

00:00:52,739 --> 00:00:56,129
algorithm in the middle does when

00:00:54,480 --> 00:00:58,410
incentivize reduce distance to the goal

00:00:56,129 --> 00:01:00,090
however if you ignore the objective and

00:00:58,410 --> 00:01:03,080
just explore the set of possibilities

00:01:00,090 --> 00:01:07,020
then you contribute I solve this problem

00:01:03,080 --> 00:01:09,450
so the this is actually a really key and

00:01:07,020 --> 00:01:11,159
important problem idea behind all

00:01:09,450 --> 00:01:12,960
innovative processes out there in the

00:01:11,159 --> 00:01:14,610
world whether or not that be science or

00:01:12,960 --> 00:01:16,860
technological process or even natural

00:01:14,610 --> 00:01:19,710
evolution the general idea is that you

00:01:16,860 --> 00:01:21,689
cannot have one overarching goal that

00:01:19,710 --> 00:01:23,880
you myopic the optimized tour and invest

00:01:21,689 --> 00:01:25,710
all your resources in instead you have

00:01:23,880 --> 00:01:28,170
to invent your own subproblems in your

00:01:25,710 --> 00:01:29,610
own goals as you go and then kind of if

00:01:28,170 --> 00:01:31,170
you're working on one problem and you

00:01:29,610 --> 00:01:33,000
suddenly invent something that is

00:01:31,170 --> 00:01:34,470
actually helpful on another problem then

00:01:33,000 --> 00:01:36,150
you catch chance on the wing and you

00:01:34,470 --> 00:01:38,100
recognize that serendipitous moment and

00:01:36,150 --> 00:01:39,270
you switch and you start you know you do

00:01:38,100 --> 00:01:42,060
a goal switch and you start optimizing

00:01:39,270 --> 00:01:43,920
for that other problem too so there are

00:01:42,060 --> 00:01:45,899
many examples of this in life so if you

00:01:43,920 --> 00:01:47,850
think about the this technology for

00:01:45,899 --> 00:01:49,680
cooking food and you wanted to say I

00:01:47,850 --> 00:01:52,079
want to cook food faster and cleaner and

00:01:49,680 --> 00:01:53,970
you only worked on things that cooked

00:01:52,079 --> 00:01:55,979
food faster then you would never invent

00:01:53,970 --> 00:01:57,689
the modern microwave because in order to

00:01:55,979 --> 00:01:59,460
invent a modern microwave you had to

00:01:57,689 --> 00:02:01,530
have been working on radar technology

00:01:59,460 --> 00:02:02,939
and then recognize that that melted a

00:02:01,530 --> 00:02:04,229
chocolate bar in your pocket and say oh

00:02:02,939 --> 00:02:06,149
that's interesting and start adapting

00:02:04,229 --> 00:02:08,099
that technology to cooking food

00:02:06,149 --> 00:02:09,539
similarly if you start out centuries ago

00:02:08,099 --> 00:02:11,700
with the abacus and you say that's

00:02:09,539 --> 00:02:13,410
fantastic it does computation for me

00:02:11,700 --> 00:02:15,570
what I'd really like is orders of

00:02:13,410 --> 00:02:17,370
magnitude more computation well then if

00:02:15,570 --> 00:02:18,930
you only invest it in things that

00:02:17,370 --> 00:02:20,790
improve the amount of computation that

00:02:18,930 --> 00:02:23,190
an abacus provides you may get longer

00:02:20,790 --> 00:02:25,170
rods and more beads but you would never

00:02:23,190 --> 00:02:26,640
invent the modern computer because to

00:02:25,170 --> 00:02:28,800
invent the modern computer you need to

00:02:26,640 --> 00:02:30,630
be working on vacuum tubes and

00:02:28,800 --> 00:02:33,120
electricity which immediately have

00:02:30,630 --> 00:02:35,850
nothing to do with increasing

00:02:33,120 --> 00:02:37,680
computation similarly to go from coal

00:02:35,850 --> 00:02:39,030
fire furnaces to clean energy in the

00:02:37,680 --> 00:02:41,760
form of nuclear power you have to be

00:02:39,030 --> 00:02:43,800
investing in space in time in the form

00:02:41,760 --> 00:02:45,360
of Albert Einstein and in a natural

00:02:43,800 --> 00:02:47,580
evolutionary example if you want to go

00:02:45,360 --> 00:02:49,290
from dinosaurs two things that can fly

00:02:47,580 --> 00:02:50,760
well you shouldn't invest in things that

00:02:49,290 --> 00:02:52,230
get you higher off the ground instead

00:02:50,760 --> 00:02:53,790
you have to start researching and

00:02:52,230 --> 00:02:55,890
investing in this newfangled technology

00:02:53,790 --> 00:02:57,810
called feathers which initially are

00:02:55,890 --> 00:02:59,460
really good for insulation and are not

00:02:57,810 --> 00:03:02,430
at all good for getting you off the

00:02:59,460 --> 00:03:04,590
ground so the conjecture here is that

00:03:02,430 --> 00:03:07,680
the only way to solve really hard

00:03:04,590 --> 00:03:08,970
problems is to create the problems while

00:03:07,680 --> 00:03:11,850
you're trying to solve them and then

00:03:08,970 --> 00:03:14,310
goal switch between them frequently over

00:03:11,850 --> 00:03:15,750
time and so by the way that we can do

00:03:14,310 --> 00:03:17,280
that algorithmically is we can have our

00:03:15,750 --> 00:03:19,170
algorithms if they're starting to

00:03:17,280 --> 00:03:20,970
optimize for one objective and they

00:03:19,170 --> 00:03:22,380
suddenly recognize they produce progress

00:03:20,970 --> 00:03:24,600
that another objective to start

00:03:22,380 --> 00:03:25,980
optimizing on that other objective - so

00:03:24,600 --> 00:03:27,420
imagine a scientist and it wants to

00:03:25,980 --> 00:03:29,310
create a robot that can learn to walk

00:03:27,420 --> 00:03:31,050
with like a deep neural network if that

00:03:29,310 --> 00:03:32,790
robot during training suddenly starts

00:03:31,050 --> 00:03:35,130
crawling really well or balancing on one

00:03:32,790 --> 00:03:36,630
foot really well we shouldn't throw that

00:03:35,130 --> 00:03:38,220
out as a failure because it's not

00:03:36,630 --> 00:03:39,780
walking instead we should capture that

00:03:38,220 --> 00:03:42,060
serendipitous event and start optimizing

00:03:39,780 --> 00:03:43,980
for crawling and balancing - because

00:03:42,060 --> 00:03:46,950
those may be essential stepping stones

00:03:43,980 --> 00:03:48,810
to ultimately produce a walking robot so

00:03:46,950 --> 00:03:50,489
the ultimate goal here is we want to

00:03:48,810 --> 00:03:52,140
produce what we call open-ended

00:03:50,489 --> 00:03:54,300
algorithms these are algorithms that can

00:03:52,140 --> 00:03:55,650
endlessly innovate and I mean endlessly

00:03:54,300 --> 00:03:58,290
I'm talking about if you give these

00:03:55,650 --> 00:04:00,360
algorithms a billion years of infinite

00:03:58,290 --> 00:04:01,980
planet-sized computation would they

00:04:00,360 --> 00:04:03,870
continue to innovate we have no

00:04:01,980 --> 00:04:05,340
algorithms like that today but we think

00:04:03,870 --> 00:04:07,230
it's fascinating to try to figure out

00:04:05,340 --> 00:04:08,760
how we might build them now we know that

00:04:07,230 --> 00:04:10,140
this can happen it happened on earth

00:04:08,760 --> 00:04:11,880
which has been innovating for over a

00:04:10,140 --> 00:04:13,500
billion years and if you think about it

00:04:11,880 --> 00:04:15,180
from this very simple origin of a

00:04:13,500 --> 00:04:17,489
single-celled creature we now have

00:04:15,180 --> 00:04:19,380
Jaguars and hawks and the human brain in

00:04:17,489 --> 00:04:20,880
this endless parade of engineering

00:04:19,380 --> 00:04:23,070
Marvel's unraveling from this system

00:04:20,880 --> 00:04:24,780
it's also true in human culture which

00:04:23,070 --> 00:04:25,820
has been endlessly innovating since the

00:04:24,780 --> 00:04:27,380
dawn of human civilization

00:04:25,820 --> 00:04:30,020
so the question is can we make

00:04:27,380 --> 00:04:31,160
algorithms that do this and so one of

00:04:30,020 --> 00:04:32,660
the things that we've noticed is if

00:04:31,160 --> 00:04:34,820
there is kind of an abstract principle

00:04:32,660 --> 00:04:36,740
that underlies all of these innovation

00:04:34,820 --> 00:04:37,820
engines and that is that they start with

00:04:36,740 --> 00:04:40,220
a set of things that they've already

00:04:37,820 --> 00:04:41,990
built and they generate permutations of

00:04:40,220 --> 00:04:43,400
those things and if they're interesting

00:04:41,990 --> 00:04:45,080
then they keep them and they add them to

00:04:43,400 --> 00:04:46,280
the set and then they continue expanding

00:04:45,080 --> 00:04:49,550
outward with this ever expanding

00:04:46,280 --> 00:04:51,500
collection of stepping stones and so one

00:04:49,550 --> 00:04:53,060
of my goals in this talk today is I want

00:04:51,500 --> 00:04:54,770
to sketch out a little bit more how

00:04:53,060 --> 00:04:56,510
we're trying to build algorithms that

00:04:54,770 --> 00:04:58,790
kind of capture this innovation in a

00:04:56,510 --> 00:05:00,500
bottle and produce it which we call

00:04:58,790 --> 00:05:01,790
open-ended AI algorithms and then I

00:05:00,500 --> 00:05:04,490
actually want to draw some connections

00:05:01,790 --> 00:05:05,810
between those algorithms and the open

00:05:04,490 --> 00:05:09,080
source community which I hope you'll

00:05:05,810 --> 00:05:10,550
find interesting so the first kind of

00:05:09,080 --> 00:05:11,780
family of algorithms my colleagues and I

00:05:10,550 --> 00:05:13,250
have been building kind of pushing

00:05:11,780 --> 00:05:15,410
towards open-ended algorithms or what we

00:05:13,250 --> 00:05:17,330
call quality diversity algorithms and

00:05:15,410 --> 00:05:19,640
the idea here is that we want to our

00:05:17,330 --> 00:05:23,060
algorithm to find and produce a diverse

00:05:19,640 --> 00:05:25,100
set of high-performing solutions and a

00:05:23,060 --> 00:05:26,540
canonical example of this type of

00:05:25,100 --> 00:05:28,190
algorithm is an algorithm that I co

00:05:26,540 --> 00:05:30,740
invented with jean-baptiste Moray called

00:05:28,190 --> 00:05:32,540
map elites and the idea here is that you

00:05:30,740 --> 00:05:34,880
choose dimensions of interest that your

00:05:32,540 --> 00:05:36,620
dimensions of interest that you will

00:05:34,880 --> 00:05:38,390
care about and then you discretize them

00:05:36,620 --> 00:05:39,890
so for example if you have a robot and

00:05:38,390 --> 00:05:40,490
you wanted to find survivors after an

00:05:39,890 --> 00:05:42,230
earthquake

00:05:40,490 --> 00:05:44,480
you might also care about other things

00:05:42,230 --> 00:05:46,130
like safety and energy efficiency so you

00:05:44,480 --> 00:05:47,570
discretize those dimensions as in this

00:05:46,130 --> 00:05:49,090
grid and then you search for the

00:05:47,570 --> 00:05:51,950
highest-performing

00:05:49,090 --> 00:05:53,420
solution at every point in this grid and

00:05:51,950 --> 00:05:55,370
what's interesting about this algorithm

00:05:53,420 --> 00:05:56,690
is it doesn't return to you one solution

00:05:55,370 --> 00:05:58,790
with an arbitrary trade-off between

00:05:56,690 --> 00:06:00,710
safety and fuel efficiency but instead

00:05:58,790 --> 00:06:02,330
it returns to you an entire surface that

00:06:00,710 --> 00:06:04,190
should illuminate the space of

00:06:02,330 --> 00:06:05,420
possibilities telling you for example

00:06:04,190 --> 00:06:07,550
that you can do really well in the

00:06:05,420 --> 00:06:10,010
corners of this box but not in the

00:06:07,550 --> 00:06:11,420
center so I want to show you this is a

00:06:10,010 --> 00:06:12,980
qualitatively different kind of

00:06:11,420 --> 00:06:15,050
algorithm if you run traditional machine

00:06:12,980 --> 00:06:17,390
learning on a problem that has for

00:06:15,050 --> 00:06:19,280
example some dimensions of interest and

00:06:17,390 --> 00:06:20,990
you only optimize for performance what

00:06:19,280 --> 00:06:22,640
you get are low performing points here

00:06:20,990 --> 00:06:25,370
and you don't explore much of the search

00:06:22,640 --> 00:06:26,720
space if you add diversity a pressure to

00:06:25,370 --> 00:06:28,280
kind of actually explore more of the

00:06:26,720 --> 00:06:29,480
search space you do get higher

00:06:28,280 --> 00:06:31,640
performance that we've known that for

00:06:29,480 --> 00:06:33,260
decades but you still in actuality don't

00:06:31,640 --> 00:06:35,720
explore that much of the search to space

00:06:33,260 --> 00:06:37,760
map elites which is a quality diversity

00:06:35,720 --> 00:06:37,920
algorithm is a qualitative difference in

00:06:37,760 --> 00:06:39,840
a

00:06:37,920 --> 00:06:41,910
see change and what happens with search

00:06:39,840 --> 00:06:44,040
here with the exact same amount of

00:06:41,910 --> 00:06:45,600
compute you completely fan out and

00:06:44,040 --> 00:06:47,610
understand what's possible in this

00:06:45,600 --> 00:06:49,050
search space you explore much more of it

00:06:47,610 --> 00:06:50,340
and what's really interesting is we're

00:06:49,050 --> 00:06:52,650
finding over and over again that these

00:06:50,340 --> 00:06:54,510
algorithms actually find a better max

00:06:52,650 --> 00:06:56,850
performing solution than the other

00:06:54,510 --> 00:06:58,710
algorithms whose job is solely to find

00:06:56,850 --> 00:07:00,120
the highest performing solution and

00:06:58,710 --> 00:07:01,590
that's because they do a better job of

00:07:00,120 --> 00:07:04,500
expanding out and finding what's

00:07:01,590 --> 00:07:05,610
possible in this search space so what's

00:07:04,500 --> 00:07:08,070
really interesting is that we can

00:07:05,610 --> 00:07:09,690
observe in these laboratory experiments

00:07:08,070 --> 00:07:12,000
that goal switching is absolutely

00:07:09,690 --> 00:07:13,890
essential for success so if you take one

00:07:12,000 --> 00:07:15,750
of the final solutions in the maps the

00:07:13,890 --> 00:07:17,520
best thing that map elites ever found

00:07:15,750 --> 00:07:19,260
for one of these types of problems and

00:07:17,520 --> 00:07:21,510
you then you look through the kind of a

00:07:19,260 --> 00:07:23,610
history what problems were being worked

00:07:21,510 --> 00:07:25,500
out in the lineage that eventually led

00:07:23,610 --> 00:07:27,090
to that solution and what you find is

00:07:25,500 --> 00:07:28,770
that search was not working on that

00:07:27,090 --> 00:07:30,990
particular version of the problem or

00:07:28,770 --> 00:07:32,670
even nearby versions of the problem they

00:07:30,990 --> 00:07:34,590
very frequently you have these long

00:07:32,670 --> 00:07:36,000
circuitous routes through the search

00:07:34,590 --> 00:07:37,290
space that you had to be working on this

00:07:36,000 --> 00:07:38,610
problem and then that problem then

00:07:37,290 --> 00:07:40,740
switch to this problem and then work on

00:07:38,610 --> 00:07:42,300
that problem to ultimately solve one

00:07:40,740 --> 00:07:44,010
particular problem and here you can see

00:07:42,300 --> 00:07:45,630
some of those traces through time and

00:07:44,010 --> 00:07:47,490
what I propose to you is that they would

00:07:45,630 --> 00:07:48,900
be virtually impossible for a human to

00:07:47,490 --> 00:07:50,850
come up with this curriculum ahead of

00:07:48,900 --> 00:07:52,590
time but what's cool and what's powerful

00:07:50,850 --> 00:07:54,720
is that this algorithm is automatically

00:07:52,590 --> 00:07:56,460
simultaneously exploring many curricula

00:07:54,720 --> 00:07:59,070
through the space and finding the ones

00:07:56,460 --> 00:08:00,330
that ultimately work so we actually

00:07:59,070 --> 00:08:02,190
created an algorithm called innovation

00:08:00,330 --> 00:08:03,780
engines and we challenged a whole a

00:08:02,190 --> 00:08:05,400
population of little tiny neural

00:08:03,780 --> 00:08:07,410
networks to produce one picture that

00:08:05,400 --> 00:08:09,060
activates the neuron and a deep neural

00:08:07,410 --> 00:08:10,710
net that's needed is trained to

00:08:09,060 --> 00:08:13,320
recognize coffee cups or golden

00:08:10,710 --> 00:08:15,210
retrievers or a motorcycle and what that

00:08:13,320 --> 00:08:16,890
allows us to do is compare what happens

00:08:15,210 --> 00:08:18,660
when you try to optimize for a single

00:08:16,890 --> 00:08:21,150
objective say make me a coffee cup

00:08:18,660 --> 00:08:22,980
picture or you have a thousand different

00:08:21,150 --> 00:08:24,900
objective simultaneously and you allow

00:08:22,980 --> 00:08:27,210
goal switching between them so in this

00:08:24,900 --> 00:08:29,070
single class case this this optimization

00:08:27,210 --> 00:08:30,750
landed on this early motif it's trying

00:08:29,070 --> 00:08:32,190
to produce a water tower here it doesn't

00:08:30,750 --> 00:08:34,020
look much like a water tower but it's

00:08:32,190 --> 00:08:35,729
stuck on that local Optima and just

00:08:34,020 --> 00:08:37,290
forever is basically stuck on that theme

00:08:35,729 --> 00:08:38,910
it makes minor enhancements that improve

00:08:37,290 --> 00:08:41,460
the score but ultimately don't produce a

00:08:38,910 --> 00:08:42,990
very high-performing picture in contrast

00:08:41,460 --> 00:08:44,310
map elites when it has a thousand

00:08:42,990 --> 00:08:46,230
different classes and allows goal

00:08:44,310 --> 00:08:47,940
switching initially it lands on that

00:08:46,230 --> 00:08:49,320
dome or moon-like thing which kind of

00:08:47,940 --> 00:08:50,579
looks like the top of a water tower but

00:08:49,320 --> 00:08:52,110
isn't very hyper

00:08:50,579 --> 00:08:54,209
but ultimately something that was doing

00:08:52,110 --> 00:08:56,249
well on the beacon class swaps in

00:08:54,209 --> 00:08:58,079
becomes a better water tower and then

00:08:56,249 --> 00:09:00,240
gets refined to ultimately look more

00:08:58,079 --> 00:09:02,100
like the water towers in this data set

00:09:00,240 --> 00:09:04,170
and became much more higher performing

00:09:02,100 --> 00:09:06,120
so we can quantify this if you have more

00:09:04,170 --> 00:09:08,160
objectives you do better over time and

00:09:06,120 --> 00:09:10,079
in fact the more objectives the merrier

00:09:08,160 --> 00:09:11,579
that as you add more objectives you get

00:09:10,079 --> 00:09:13,889
more goal switching and you get higher

00:09:11,579 --> 00:09:14,459
performance ultimately in this in the

00:09:13,889 --> 00:09:16,649
system

00:09:14,459 --> 00:09:19,079
now goal switching also enables really

00:09:16,649 --> 00:09:21,029
good ideas to spread which I love and so

00:09:19,079 --> 00:09:22,680
this help this is basically allows one

00:09:21,029 --> 00:09:23,970
innovation somewhere in the algorithm to

00:09:22,680 --> 00:09:25,499
spread to a whole lot of different

00:09:23,970 --> 00:09:27,209
problem types and then become the

00:09:25,499 --> 00:09:29,639
technological foundation on which

00:09:27,209 --> 00:09:31,499
further innovation is built and this

00:09:29,639 --> 00:09:33,720
happens also in nature so biologists

00:09:31,499 --> 00:09:35,189
call these adaptive radiations in one

00:09:33,720 --> 00:09:36,600
lake in Africa there might have been an

00:09:35,189 --> 00:09:38,339
innovation in the efficiency of

00:09:36,600 --> 00:09:40,019
breathing in a lung for example and that

00:09:38,339 --> 00:09:42,240
can spread to all the other lakes in

00:09:40,019 --> 00:09:44,459
Africa and then that solution can be

00:09:42,240 --> 00:09:45,149
customized to the particularity of those

00:09:44,459 --> 00:09:47,069
different lakes

00:09:45,149 --> 00:09:49,410
similarly darwin's finches started out

00:09:47,069 --> 00:09:50,699
with one idea and then spread and got it

00:09:49,410 --> 00:09:53,220
and customized to each of the different

00:09:50,699 --> 00:09:55,199
niches on the different Darwin NIR the

00:09:53,220 --> 00:09:57,300
Galapagos Islands and finally think

00:09:55,199 --> 00:09:59,550
about the computer that amazing original

00:09:57,300 --> 00:10:01,350
invention has radiated out into society

00:09:59,550 --> 00:10:03,329
and been adapted to so many different

00:10:01,350 --> 00:10:05,339
use cases and is the foundation upon

00:10:03,329 --> 00:10:06,569
which we all build so we want that to

00:10:05,339 --> 00:10:08,189
happen in our algorithms and what's

00:10:06,569 --> 00:10:10,620
amazing is that we are starting to see

00:10:08,189 --> 00:10:11,850
that happen in our algorithms so in that

00:10:10,620 --> 00:10:14,430
domain where we were generating images

00:10:11,850 --> 00:10:16,769
this initial innovation of the black

00:10:14,430 --> 00:10:18,149
dome with a red background initially

00:10:16,769 --> 00:10:19,649
with the deep neural Nets thought that

00:10:18,149 --> 00:10:22,110
that looked like an abaya and that

00:10:19,649 --> 00:10:23,730
original idea then radiates out through

00:10:22,110 --> 00:10:25,920
all of these different classes to

00:10:23,730 --> 00:10:28,439
ultimately become the backbone on which

00:10:25,920 --> 00:10:31,259
you get a volcano a mosque a water tower

00:10:28,439 --> 00:10:33,660
a beacon a yurt a church a planetarium

00:10:31,259 --> 00:10:35,699
and obelisk and a dome so that's really

00:10:33,660 --> 00:10:39,269
amazing to see this happen inside of our

00:10:35,699 --> 00:10:40,679
search algorithms in 2015 we had a paper

00:10:39,269 --> 00:10:42,839
in nature that showed some of the power

00:10:40,679 --> 00:10:44,550
of these ideas what we did is ahead of

00:10:42,839 --> 00:10:46,110
time in simulation we launched a quality

00:10:44,550 --> 00:10:47,819
diversity algorithms specifically map

00:10:46,110 --> 00:10:49,350
elites and it went out and it gathered

00:10:47,819 --> 00:10:51,089
all of these different ways to walk

00:10:49,350 --> 00:10:53,339
using legs in different ways and

00:10:51,089 --> 00:10:55,439
combinations and then when a real robot

00:10:53,339 --> 00:10:56,850
became damaged in the real world we use

00:10:55,439 --> 00:10:58,769
an efficient algorithm Bayesian

00:10:56,850 --> 00:11:00,929
optimization to search through that set

00:10:58,769 --> 00:11:03,000
of high-performing diverse solutions to

00:11:00,929 --> 00:11:03,630
find a gate that worked despite the

00:11:03,000 --> 00:11:05,550
damage

00:11:03,630 --> 00:11:07,590
on the robot and in about thirty to a

00:11:05,550 --> 00:11:09,480
minute and a half this robot is able to

00:11:07,590 --> 00:11:11,490
get up conduct a few experiments and

00:11:09,480 --> 00:11:13,590
walk away and continue on with its

00:11:11,490 --> 00:11:14,940
mission we also use these exact same

00:11:13,590 --> 00:11:17,070
ideas to solve this kind of

00:11:14,940 --> 00:11:18,480
long-standing kind of grand challenge in

00:11:17,070 --> 00:11:20,610
artificial intelligence which was this

00:11:18,480 --> 00:11:21,930
videogame Montezuma's Revenge which was

00:11:20,610 --> 00:11:23,970
one of the games on which deepmind's

00:11:21,930 --> 00:11:25,830
original paper scored exactly zero and

00:11:23,970 --> 00:11:27,660
many as you can see all the blue dots

00:11:25,830 --> 00:11:29,070
here many different industrial and

00:11:27,660 --> 00:11:31,560
academic labs have been trying to make

00:11:29,070 --> 00:11:33,690
progress on this task for years now

00:11:31,560 --> 00:11:36,120
mostly without success scores between

00:11:33,690 --> 00:11:38,160
zero and about 10,000 and then we

00:11:36,120 --> 00:11:40,110
applied these ideas and enhance them a

00:11:38,160 --> 00:11:41,520
little bit just have the agents in this

00:11:40,110 --> 00:11:43,260
game kind of go out and find the best

00:11:41,520 --> 00:11:45,090
way to go here in the game and go here

00:11:43,260 --> 00:11:47,520
and go over here and do this activity

00:11:45,090 --> 00:11:49,530
and that exploration strategy kind of

00:11:47,520 --> 00:11:51,720
produced a sea change that took scores

00:11:49,530 --> 00:11:54,120
from about 0 to 10,000 all the way up to

00:11:51,720 --> 00:11:56,490
one average 660,000 with our top

00:11:54,120 --> 00:11:58,620
performing neural network here scoring

00:11:56,490 --> 00:12:02,340
about 18 million and beating the human

00:11:58,620 --> 00:12:03,870
world record of 1.2 million so quality

00:12:02,340 --> 00:12:05,070
diversity algorithms are really exciting

00:12:03,870 --> 00:12:06,930
for all the reasons I've told you and

00:12:05,070 --> 00:12:09,240
the question is what's missing and the

00:12:06,930 --> 00:12:11,010
answer is that still ultimately their

00:12:09,240 --> 00:12:12,210
ability to innovate is constrained to

00:12:11,010 --> 00:12:13,680
whatever problem it is that we're

00:12:12,210 --> 00:12:15,150
running them on and this is actually

00:12:13,680 --> 00:12:17,310
true with almost all machine learning

00:12:15,150 --> 00:12:20,760
algorithms so no matter how long you run

00:12:17,310 --> 00:12:23,340
open a eyes dota agent in dota or alpha

00:12:20,760 --> 00:12:25,260
or deepmind's alpha zero algorithm in go

00:12:23,340 --> 00:12:27,840
what you'll end up with is a really good

00:12:25,260 --> 00:12:29,760
dota agent or a really good chess or go

00:12:27,840 --> 00:12:31,260
playing agent but what you won't have is

00:12:29,760 --> 00:12:32,940
a robot that can like wake up and make

00:12:31,260 --> 00:12:34,500
you breakfast in the morning which is

00:12:32,940 --> 00:12:35,970
what I would want and so we want

00:12:34,500 --> 00:12:37,920
algorithms that can do that that can

00:12:35,970 --> 00:12:40,290
kind of break out of their sandbox and

00:12:37,920 --> 00:12:42,120
continue to innovate relentlessly and so

00:12:40,290 --> 00:12:43,680
the intriguing possibility that I want

00:12:42,120 --> 00:12:45,330
to raise with you today is that we you

00:12:43,680 --> 00:12:47,190
know could we create algorithms that

00:12:45,330 --> 00:12:49,770
generate their own challenges and to

00:12:47,190 --> 00:12:51,690
solve them all at the same time just as

00:12:49,770 --> 00:12:53,940
nature kind of invented the problem of

00:12:51,690 --> 00:12:55,650
trees or sorry leaves high up in trees

00:12:53,940 --> 00:12:57,360
and the solutions in the form of

00:12:55,650 --> 00:13:00,240
caterpillars and giraffes that can eat

00:12:57,360 --> 00:13:01,470
those leaves and so though our most

00:13:00,240 --> 00:13:03,810
recent work here is the paired

00:13:01,470 --> 00:13:05,340
open-ended trailblazer or poet algorithm

00:13:03,810 --> 00:13:07,050
out of uber AI Labs with my wonderful

00:13:05,340 --> 00:13:08,550
colleagues here and the idea is that we

00:13:07,050 --> 00:13:09,930
want to endlessly generate increasingly

00:13:08,550 --> 00:13:11,630
complex and diverse learning

00:13:09,930 --> 00:13:14,580
environments and their solutions

00:13:11,630 --> 00:13:16,020
simultaneously so here poet repairs to

00:13:14,580 --> 00:13:17,070
populations of populations of

00:13:16,020 --> 00:13:19,530
environments and a

00:13:17,070 --> 00:13:21,390
populations of agents and periodically

00:13:19,530 --> 00:13:22,950
we'll add a new environmental challenge

00:13:21,390 --> 00:13:25,020
if it's not too difficult or too easy

00:13:22,950 --> 00:13:26,640
for the current set of agents and then

00:13:25,020 --> 00:13:28,740
we'll also optimize the agents to do

00:13:26,640 --> 00:13:30,390
better on those those challenges and

00:13:28,740 --> 00:13:31,890
will allow goal switching between them

00:13:30,390 --> 00:13:33,630
we have a deep neural network with a

00:13:31,890 --> 00:13:35,340
variety of sensors and the degrees of

00:13:33,630 --> 00:13:38,250
freedom in the environment are listed

00:13:35,340 --> 00:13:40,380
there so this algorithm has to learn on

00:13:38,250 --> 00:13:42,930
its own how to walk and it starts off on

00:13:40,380 --> 00:13:44,940
easy domains such as flat ground with

00:13:42,930 --> 00:13:47,400
little tiny stumps or slightly hilly

00:13:44,940 --> 00:13:49,530
domains a few steps a few of very very

00:13:47,400 --> 00:13:51,180
small gaps and over time poets

00:13:49,530 --> 00:13:52,800
generating harder and harder challenges

00:13:51,180 --> 00:13:54,690
for this little deep neural network to

00:13:52,800 --> 00:13:56,430
learn how to control this robot to walk

00:13:54,690 --> 00:13:58,350
on this task and over time the

00:13:56,430 --> 00:14:00,180
environments increase in complexity now

00:13:58,350 --> 00:14:03,450
we're starting to see bigger gaps or

00:14:00,180 --> 00:14:05,100
taller stumps in this case but you're

00:14:03,450 --> 00:14:06,720
seeing them kind of each separate it's

00:14:05,100 --> 00:14:08,370
like learning these skills first I want

00:14:06,720 --> 00:14:09,930
to take on big gaps and then I want to

00:14:08,370 --> 00:14:12,030
learn how to climb big stumps and now

00:14:09,930 --> 00:14:13,800
rugged terrain it's not yet combining

00:14:12,030 --> 00:14:15,330
those things but later the algorithm

00:14:13,800 --> 00:14:17,160
does start to combine those objectives

00:14:15,330 --> 00:14:18,900
so now this poor little robot has to

00:14:17,160 --> 00:14:20,790
jump these big gaps and climb over

00:14:18,900 --> 00:14:22,290
really big stumps and it's using its

00:14:20,790 --> 00:14:24,270
sensors to figure out how to run and

00:14:22,290 --> 00:14:26,850
leap over chasms that are about as big

00:14:24,270 --> 00:14:30,180
as this is possible for its body and its

00:14:26,850 --> 00:14:31,530
motor torques so here's another

00:14:30,180 --> 00:14:32,910
challenging environment we didn't even

00:14:31,530 --> 00:14:35,040
think this was possible but poet

00:14:32,910 --> 00:14:37,410
invented it itself and figured out how

00:14:35,040 --> 00:14:39,030
to solve it so what's interesting is

00:14:37,410 --> 00:14:41,130
that if you take the final environments

00:14:39,030 --> 00:14:43,350
the poet has invented and solved and

00:14:41,130 --> 00:14:44,460
then you directly drop a new deep neural

00:14:43,350 --> 00:14:45,780
net with optimization in that

00:14:44,460 --> 00:14:47,340
environment try to solve it it always

00:14:45,780 --> 00:14:48,990
fails because there's no gradient or

00:14:47,340 --> 00:14:50,550
curriculum to figure out how to solve

00:14:48,990 --> 00:14:52,320
this really hard task it's like being

00:14:50,550 --> 00:14:54,210
dropped in calc 3 you know when you're a

00:14:52,320 --> 00:14:55,560
four-year-old or something so you might

00:14:54,210 --> 00:14:57,330
think that's too hard so we'll try to do

00:14:55,560 --> 00:14:58,800
a draw you know kind of what's intuitive

00:14:57,330 --> 00:15:00,510
well take the solutions that poet

00:14:58,800 --> 00:15:02,340
invents and then we'll create kind of a

00:15:00,510 --> 00:15:03,810
direct path a series of stepping stones

00:15:02,340 --> 00:15:05,550
that linearly interpolate between the

00:15:03,810 --> 00:15:07,050
original simple environment and that

00:15:05,550 --> 00:15:09,210
hard environment and what we find is

00:15:07,050 --> 00:15:10,710
that also always fail somewhere along

00:15:09,210 --> 00:15:12,960
the line there's some step there's some

00:15:10,710 --> 00:15:14,760
jump that it can't make because the

00:15:12,960 --> 00:15:16,410
right stepping stone to solve the first

00:15:14,760 --> 00:15:17,880
read thing in this chain is not the

00:15:16,410 --> 00:15:19,440
green thing right before it so

00:15:17,880 --> 00:15:20,940
intuitively designing these curricula

00:15:19,440 --> 00:15:24,360
never worked and that problem gets worse

00:15:20,940 --> 00:15:25,920
the harder that the task is so goal

00:15:24,360 --> 00:15:28,200
switching is absolutely essential for

00:15:25,920 --> 00:15:29,370
the success of this algorithm now I want

00:15:28,200 --> 00:15:30,509
to share with you one of my favorite

00:15:29,370 --> 00:15:32,699
anecdotes from this

00:15:30,509 --> 00:15:34,169
from this work so here is an optin

00:15:32,699 --> 00:15:35,459
algorithm it's learning how to walk and

00:15:34,169 --> 00:15:37,589
it does so in the original simple

00:15:35,459 --> 00:15:39,059
environment and it's if you notice it's

00:15:37,589 --> 00:15:40,889
kind of dragging it to me on the ground

00:15:39,059 --> 00:15:43,139
it's not standing up and walking for

00:15:40,889 --> 00:15:44,549
whatever reason and however poet

00:15:43,139 --> 00:15:45,419
eventually says ok you're good enough on

00:15:44,549 --> 00:15:47,009
that environment we'll create a new

00:15:45,419 --> 00:15:48,480
environment with little tiny stumps and

00:15:47,009 --> 00:15:50,069
that knee dragging behavior now no

00:15:48,480 --> 00:15:52,199
longer works it's getting tripped up on

00:15:50,069 --> 00:15:54,600
these stumps so in that environment it

00:15:52,199 --> 00:15:55,799
has to stand up learns to do that and go

00:15:54,600 --> 00:15:58,319
over these stumps and gets a better

00:15:55,799 --> 00:16:00,269
score but poet is always checking for

00:15:58,319 --> 00:16:02,279
goal switching opportunities you know is

00:16:00,269 --> 00:16:03,899
the best solution on one problem a good

00:16:02,279 --> 00:16:06,269
solution for another problem so it

00:16:03,899 --> 00:16:07,919
automatically swapped that solution back

00:16:06,269 --> 00:16:09,720
into the original simple environment

00:16:07,919 --> 00:16:11,220
where now that it's standing up against

00:16:09,720 --> 00:16:13,439
it even higher score and with further

00:16:11,220 --> 00:16:15,660
optimization gets all the way to a score

00:16:13,439 --> 00:16:17,220
of nearly 350 now we did the

00:16:15,660 --> 00:16:19,410
counterfactual here we took the original

00:16:17,220 --> 00:16:22,139
agent and gave it as much computation as

00:16:19,410 --> 00:16:23,699
was required to get to the score of 349

00:16:22,139 --> 00:16:25,470
but let it run or it in that original

00:16:23,699 --> 00:16:27,629
environment and it never stands up and

00:16:25,470 --> 00:16:28,709
it never gets a very good score so here

00:16:27,629 --> 00:16:31,169
think about this counterintuitive

00:16:28,709 --> 00:16:32,609
curriculum to solve a simple problem you

00:16:31,169 --> 00:16:35,209
actually had to go work on a harder

00:16:32,609 --> 00:16:38,279
problem for a while and come back to it

00:16:35,209 --> 00:16:40,079
so we can test poet with and without

00:16:38,279 --> 00:16:42,419
goal switching and we find that without

00:16:40,079 --> 00:16:44,189
go switching it never salt produces and

00:16:42,419 --> 00:16:46,319
solves these really hard challenges but

00:16:44,189 --> 00:16:48,509
with it with goal switching it always

00:16:46,319 --> 00:16:49,980
does so in future work in this domain

00:16:48,509 --> 00:16:51,959
what we'd like to do is take this to

00:16:49,980 --> 00:16:53,399
much more interesting complex 3d

00:16:51,959 --> 00:16:54,989
environments such as the one that you

00:16:53,399 --> 00:16:56,189
see here but I think it's more

00:16:54,989 --> 00:16:58,889
provocative to think about this

00:16:56,189 --> 00:17:01,259
algorithm in this context as we get more

00:16:58,889 --> 00:17:02,669
computation and in the coming decades

00:17:01,259 --> 00:17:04,799
what will happen with an algorithm like

00:17:02,669 --> 00:17:07,260
this when it has the ability to explore

00:17:04,799 --> 00:17:08,699
extremely complicated environments with

00:17:07,260 --> 00:17:11,010
other agents that you have to negotiate

00:17:08,699 --> 00:17:12,089
with to buy and sell goods you might

00:17:11,010 --> 00:17:13,649
have to fight you might have to

00:17:12,089 --> 00:17:17,279
cooperate you might have to climb walls

00:17:13,649 --> 00:17:19,260
evade aerial predators etc etc and so

00:17:17,279 --> 00:17:20,789
with a billion years of computation and

00:17:19,260 --> 00:17:23,760
environments like these these algorithms

00:17:20,789 --> 00:17:26,069
might do really wonderful things so

00:17:23,760 --> 00:17:27,959
ultimately I think that this is a step

00:17:26,069 --> 00:17:30,240
towards what I call AI generating

00:17:27,959 --> 00:17:32,240
algorithms which might be and I argue in

00:17:30,240 --> 00:17:34,710
this paper that's linked here are

00:17:32,240 --> 00:17:36,539
potentially the fastest path to our most

00:17:34,710 --> 00:17:37,529
ambitious goals as an AI research

00:17:36,539 --> 00:17:40,320
community which is the previous

00:17:37,529 --> 00:17:41,940
human-level AI within computers and the

00:17:40,320 --> 00:17:43,710
idea is that we might need algorithms

00:17:41,940 --> 00:17:44,040
that learn as much as possible on their

00:17:43,710 --> 00:17:45,570
own

00:17:44,040 --> 00:17:46,890
opposed to the current dominant trend to

00:17:45,570 --> 00:17:48,870
machine learning which is trying to hand

00:17:46,890 --> 00:17:50,430
design the solution piece by piece and

00:17:48,870 --> 00:17:52,260
the idea is that we could launch an

00:17:50,430 --> 00:17:54,420
algorithm that bootstraps itself from

00:17:52,260 --> 00:17:56,670
simple origins all the way up through

00:17:54,420 --> 00:17:58,890
producing human level or even superhuman

00:17:56,670 --> 00:18:00,630
level AI all on its own we know this is

00:17:58,890 --> 00:18:02,310
possible because that algorithm has run

00:18:00,630 --> 00:18:04,320
on earth and has produced all of the

00:18:02,310 --> 00:18:05,670
people in this room so we can do it

00:18:04,320 --> 00:18:07,890
algorithmically we just have to figure

00:18:05,670 --> 00:18:08,820
out how and the idea is that the game

00:18:07,890 --> 00:18:10,740
plan is that we would have to

00:18:08,820 --> 00:18:12,390
simultaneously do three things we'd have

00:18:10,740 --> 00:18:14,310
to medal learn the architectures the

00:18:12,390 --> 00:18:15,600
learning algorithms and automatically

00:18:14,310 --> 00:18:17,100
generate their learning to the

00:18:15,600 --> 00:18:18,810
environments the learning challenges

00:18:17,100 --> 00:18:21,810
which is what I've focused on in my talk

00:18:18,810 --> 00:18:23,330
today so to conclude kind of the

00:18:21,810 --> 00:18:25,350
academic portion of this talk

00:18:23,330 --> 00:18:26,940
automatically generating environments

00:18:25,350 --> 00:18:28,920
and solutions I think is a really really

00:18:26,940 --> 00:18:31,110
powerful ingredient to try to propel

00:18:28,920 --> 00:18:32,220
forward innovation engines they

00:18:31,110 --> 00:18:34,050
automatically invent their own

00:18:32,220 --> 00:18:36,090
curriculum they create collect and

00:18:34,050 --> 00:18:38,460
improve stepping stones they harness

00:18:36,090 --> 00:18:39,930
goal switching and adaptive radiations

00:18:38,460 --> 00:18:41,580
they also hedge their bets by

00:18:39,930 --> 00:18:43,290
simultaneously trying multiple

00:18:41,580 --> 00:18:45,480
overlapping curricula and finding the

00:18:43,290 --> 00:18:46,710
one that ultimately works and I think

00:18:45,480 --> 00:18:48,480
that these are keys to out the

00:18:46,710 --> 00:18:50,700
algorithms that endlessly innovate

00:18:48,480 --> 00:18:52,320
including evolution and human culture in

00:18:50,700 --> 00:18:54,330
the form of science technology and art

00:18:52,320 --> 00:18:56,790
and therefore they may be the only way

00:18:54,330 --> 00:18:59,040
to solve really ambitious problems that

00:18:56,790 --> 00:19:00,780
we have in society and in research and

00:18:59,040 --> 00:19:03,210
to discover the full gamut of what's

00:19:00,780 --> 00:19:04,440
possible out there in a search space so

00:19:03,210 --> 00:19:06,090
if you're interested in more on these

00:19:04,440 --> 00:19:08,970
subjects we just put a tutorial online

00:19:06,090 --> 00:19:11,550
from our ICML in 2019 on

00:19:08,970 --> 00:19:12,720
population-based methods so now I

00:19:11,550 --> 00:19:13,860
promised you I would draw some

00:19:12,720 --> 00:19:15,390
connections between this line of

00:19:13,860 --> 00:19:17,430
research and the open source community

00:19:15,390 --> 00:19:19,110
and what I think is really interesting

00:19:17,430 --> 00:19:20,670
if you think about it is that the open

00:19:19,110 --> 00:19:22,800
source community acts a lot like

00:19:20,670 --> 00:19:24,510
equality diversity algorithm if you

00:19:22,800 --> 00:19:27,210
think about what people here do they

00:19:24,510 --> 00:19:29,490
create they collect and curate and they

00:19:27,210 --> 00:19:31,710
improve stepping stones which are these

00:19:29,490 --> 00:19:33,600
different packages and repositories so

00:19:31,710 --> 00:19:34,920
in the sense you and the people in this

00:19:33,600 --> 00:19:36,690
room and the people in this foundation

00:19:34,920 --> 00:19:39,420
are doing exactly what is needed to

00:19:36,690 --> 00:19:41,070
catalyze progress in society so to the

00:19:39,420 --> 00:19:42,840
individual contributors in this room I

00:19:41,070 --> 00:19:44,610
would say please creep creating

00:19:42,840 --> 00:19:46,140
collecting and improving your projects

00:19:44,610 --> 00:19:48,180
and to the people that are community

00:19:46,140 --> 00:19:50,850
organizers keep enabling those wonderful

00:19:48,180 --> 00:19:52,140
activities so all of the code you know I

00:19:50,850 --> 00:19:53,970
want to mention we're doing our part all

00:19:52,140 --> 00:19:56,100
of the code for all of the algorithms

00:19:53,970 --> 00:19:58,470
I've introduced are all open door

00:19:56,100 --> 00:20:00,179
mine and available and also there are

00:19:58,470 --> 00:20:01,230
more open-source projects at uber we're

00:20:00,179 --> 00:20:03,750
really proud of our open-source

00:20:01,230 --> 00:20:05,220
activities there so my final thoughts

00:20:03,750 --> 00:20:08,880
for this room and the open-source

00:20:05,220 --> 00:20:10,410
community are this and this is kind of

00:20:08,880 --> 00:20:12,299
what I've learned is working on these

00:20:10,410 --> 00:20:14,460
algorithms if you find it interesting

00:20:12,299 --> 00:20:15,900
even if you don't know why you find it

00:20:14,460 --> 00:20:18,360
interesting or you don't know what its

00:20:15,900 --> 00:20:20,490
possible uses in the world put it out

00:20:18,360 --> 00:20:21,929
there go out there and build it because

00:20:20,490 --> 00:20:23,910
you never know we're working on that

00:20:21,929 --> 00:20:25,650
idea that project will take you you may

00:20:23,910 --> 00:20:27,230
goal switch from that to something else

00:20:25,650 --> 00:20:29,610
and have a serendipitous discovery

00:20:27,230 --> 00:20:31,620
similarly I would say share it because

00:20:29,610 --> 00:20:33,450
the more stepping stones the merrier you

00:20:31,620 --> 00:20:36,210
never know how your idea or your

00:20:33,450 --> 00:20:38,100
repository or your code or your hardware

00:20:36,210 --> 00:20:39,809
will be used by someone else you just

00:20:38,100 --> 00:20:41,159
can't anticipate it so put it out there

00:20:39,809 --> 00:20:44,039
into the world and something wonderful

00:20:41,159 --> 00:20:46,799
might happen I'd also say just release

00:20:44,039 --> 00:20:48,330
it so clean code is great but please

00:20:46,799 --> 00:20:50,010
don't let perfect be the enemy of the

00:20:48,330 --> 00:20:51,539
good I've seen time after time people

00:20:50,010 --> 00:20:53,400
say my codes not good enough to release

00:20:51,539 --> 00:20:55,830
and they deny civilization the

00:20:53,400 --> 00:20:57,690
opportunity to benefit from that code

00:20:55,830 --> 00:20:59,280
and that innovation so just put it out

00:20:57,690 --> 00:21:01,110
there if you don't have time to clean it

00:20:59,280 --> 00:21:03,510
up so I would say that the least helpful

00:21:01,110 --> 00:21:06,270
repository out there is the one that

00:21:03,510 --> 00:21:08,340
doesn't exist so finally I just want to

00:21:06,270 --> 00:21:10,380
say keep doing what you're doing which

00:21:08,340 --> 00:21:11,760
is providing the rocket fuel for the

00:21:10,380 --> 00:21:13,260
open-ended algorithm that is

00:21:11,760 --> 00:21:15,040
technological progress

00:21:13,260 --> 00:21:20,170
thank you

00:21:15,040 --> 00:21:20,170

YouTube URL: https://www.youtube.com/watch?v=fxWw_buT_vM


