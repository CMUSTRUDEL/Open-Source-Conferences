Title: Open Source CVE Monitoring and Management: Cutting Through the Vulnerability Storm - Akshay Bhat
Publication date: 2019-09-16
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	Open Source CVE Monitoring and Management: Cutting Through the Vulnerability Storm - Akshay Bhat, Timesys

A key aspect to maintaining device security is monitoring and addressing known vulnerabilities in open source software in a timely fashion. This presentation will help you get started with the process of monitoring CVE's, determining applicability, assessing the severity and finding fixes.We take a deeper dive into some of the challenges in tracking CVE's due to NVD/MITRE feeds having incorrect/missing data, leading to missed vulnerabilities and a false sense of security. The problem is compounded by inaccuracies in scanning tools and the way fixes are tagged in build systems resulting in a alarming number of false positives.We review the CVE's reported by cve-check-tool in Yocto and determine the root cause for inaccuracies. We also discuss techniques to mitigate the issues so that the entire community can benefit. This presentation will enable you to improve your device security posture.
Captions: 
	00:00:00,110 --> 00:00:06,960
hello everybody my name is Akshay and

00:00:03,540 --> 00:00:09,120
I'm here to talk about monitoring and

00:00:06,960 --> 00:00:14,370
managing security vulnerabilities in

00:00:09,120 --> 00:00:17,449
open source software the topics I'm

00:00:14,370 --> 00:00:21,390
going to be covering is what exactly is

00:00:17,449 --> 00:00:28,680
CBE how do you go about monitoring and

00:00:21,390 --> 00:00:34,410
fixing CVS and just the quality of the

00:00:28,680 --> 00:00:39,329
CV data or covering statistics about the

00:00:34,410 --> 00:00:41,910
quality of CV data and the tools and its

00:00:39,329 --> 00:00:45,239
shortcomings and lastly I'm going to

00:00:41,910 --> 00:00:45,989
cover security best practices to keep

00:00:45,239 --> 00:00:50,550
your product

00:00:45,989 --> 00:00:52,289
secure and if not anything else there

00:00:50,550 --> 00:00:58,859
are a lot of memes so you can have a

00:00:52,289 --> 00:01:01,680
laugh at those so what is the CVE CV

00:00:58,859 --> 00:01:05,519
stands for common vulnerabilities and

00:01:01,680 --> 00:01:08,090
exposure and whenever a security

00:01:05,519 --> 00:01:11,750
researcher or a developer finds a

00:01:08,090 --> 00:01:15,930
software bug which has a security impact

00:01:11,750 --> 00:01:21,360
what they do is they notify organization

00:01:15,930 --> 00:01:25,590
like mitre and that organization keeps

00:01:21,360 --> 00:01:28,320
track of this in a public record or a

00:01:25,590 --> 00:01:30,299
database where they entered the

00:01:28,320 --> 00:01:35,420
vulnerability information in that

00:01:30,299 --> 00:01:41,700
database and it gets tracked uniquely

00:01:35,420 --> 00:01:45,180
however if developer treats that bug as

00:01:41,700 --> 00:01:48,630
a functional issue and does not evaluate

00:01:45,180 --> 00:01:53,250
the security impact in that case it

00:01:48,630 --> 00:01:55,579
would get silently fixed as a regular

00:01:53,250 --> 00:02:01,950
issue and it might not make it to the

00:01:55,579 --> 00:02:03,960
CVE list or CV database so your product

00:02:01,950 --> 00:02:07,860
might still be vulnerable from a

00:02:03,960 --> 00:02:10,080
security standpoint of view but it's not

00:02:07,860 --> 00:02:13,270
tracked as

00:02:10,080 --> 00:02:15,520
vulnerability from CV dictionary

00:02:13,270 --> 00:02:19,260
standpoint of view and then there is a

00:02:15,520 --> 00:02:23,200
whole bunch of undiscovered

00:02:19,260 --> 00:02:26,700
vulnerabilities which get discovered

00:02:23,200 --> 00:02:32,080
over time might be zero day exploits or

00:02:26,700 --> 00:02:40,930
might just be caught through fuzzing

00:02:32,080 --> 00:02:42,850
tools or static analysis tools so now

00:02:40,930 --> 00:02:47,550
that you know the different types of

00:02:42,850 --> 00:02:50,710
vulnerabilities how do you go about

00:02:47,550 --> 00:02:54,820
monitoring them so if you just take CV

00:02:50,710 --> 00:02:57,700
data then you there are open source

00:02:54,820 --> 00:03:03,850
tools which can be used to monitor the

00:02:57,700 --> 00:03:07,950
seaweed CVEs in a product however there

00:03:03,850 --> 00:03:11,230
are a lot of missed CVS because of

00:03:07,950 --> 00:03:13,180
various issues with the quality of the

00:03:11,230 --> 00:03:17,830
CV data which we're going to discuss in

00:03:13,180 --> 00:03:20,500
the upcoming slides and the effort

00:03:17,830 --> 00:03:23,320
involved in monitoring using open source

00:03:20,500 --> 00:03:25,660
tools is quite minimal but at the same

00:03:23,320 --> 00:03:29,470
time because of the mess CVS the product

00:03:25,660 --> 00:03:32,050
might not be secure then you can combine

00:03:29,470 --> 00:03:38,380
those tools along with some manual

00:03:32,050 --> 00:03:41,260
analysis of CVS and in doing so you can

00:03:38,380 --> 00:03:46,300
improve the security of your product but

00:03:41,260 --> 00:03:48,970
the effort required is much more so this

00:03:46,300 --> 00:03:51,190
covers CVS if you want to track all the

00:03:48,970 --> 00:03:53,740
silent bug fixes which have security

00:03:51,190 --> 00:03:58,330
impact as well in that case you might

00:03:53,740 --> 00:04:02,050
want to look at the security bulletins

00:03:58,330 --> 00:04:05,020
issue trackers change logs of new

00:04:02,050 --> 00:04:07,240
releases of software and see what got

00:04:05,020 --> 00:04:10,600
fixed in the latest version of software

00:04:07,240 --> 00:04:13,560
and then evaluate if it might have

00:04:10,600 --> 00:04:18,630
potential security impact yourself and

00:04:13,560 --> 00:04:22,030
if you want to go into the undiscovered

00:04:18,630 --> 00:04:23,080
vulnerabilities then you can run static

00:04:22,030 --> 00:04:25,599
analysis tools or

00:04:23,080 --> 00:04:29,610
fathers yourself and then discover them

00:04:25,599 --> 00:04:34,719
and there are commercial tools available

00:04:29,610 --> 00:04:38,139
to help reduce the effort but depending

00:04:34,719 --> 00:04:40,389
on the tools it may or may not like help

00:04:38,139 --> 00:04:41,919
secure your product so you'll have to

00:04:40,389 --> 00:04:48,810
evaluate the tool on a case-by-case

00:04:41,919 --> 00:04:52,419
basis before starting to use them and

00:04:48,810 --> 00:04:55,990
why exactly is monitoring cv is a

00:04:52,419 --> 00:05:00,580
challenge so if you take a look at the

00:04:55,990 --> 00:05:03,940
year-over-year data of the number of CVS

00:05:00,580 --> 00:05:08,080
being reported so it has been constantly

00:05:03,940 --> 00:05:10,719
growing and in 2018 there are more than

00:05:08,080 --> 00:05:13,030
16,000 vulnerabilities which were

00:05:10,719 --> 00:05:14,919
reported so if you have to manually

00:05:13,030 --> 00:05:25,599
analyze each of these CVS

00:05:14,919 --> 00:05:29,169
then it's a big challenge so how do we

00:05:25,599 --> 00:05:32,620
monitor CVS so before going into the

00:05:29,169 --> 00:05:36,819
details of monitoring CVS I want to just

00:05:32,620 --> 00:05:38,050
briefly talk about what is the what are

00:05:36,819 --> 00:05:42,610
the contents of a CVE

00:05:38,050 --> 00:05:47,169
the first one is like a CV ID which is a

00:05:42,610 --> 00:05:49,629
unique number unique ID given to the

00:05:47,169 --> 00:05:52,710
vulnerability then there's the

00:05:49,629 --> 00:05:57,069
description of the vulnerability and

00:05:52,710 --> 00:05:59,729
NIST adds some additional metrics such

00:05:57,069 --> 00:06:03,729
as how severe the vulnerability is and

00:05:59,729 --> 00:06:07,930
that depends on is it easily exploitable

00:06:03,729 --> 00:06:10,659
and what is the impact if somebody does

00:06:07,930 --> 00:06:14,740
exploit it so it's a score between like

00:06:10,659 --> 00:06:20,560
zero to ten you have low medium high and

00:06:14,740 --> 00:06:23,589
critical severity this also attack

00:06:20,560 --> 00:06:25,750
vector field which means that do you

00:06:23,589 --> 00:06:27,789
need to be physically present at the

00:06:25,750 --> 00:06:33,069
device or do you need to be like a local

00:06:27,789 --> 00:06:35,500
user on the device to exploit the

00:06:33,069 --> 00:06:38,240
vulnerability or can you do it remotely

00:06:35,500 --> 00:06:40,370
through the network

00:06:38,240 --> 00:06:42,909
it also has information that the like

00:06:40,370 --> 00:06:45,500
user in interaction is required or not

00:06:42,909 --> 00:06:48,830
and the last key piece of information

00:06:45,500 --> 00:06:52,340
which is also encoded is something

00:06:48,830 --> 00:06:56,270
called as CPE which stands for common

00:06:52,340 --> 00:07:00,139
platform enumeration and what this is is

00:06:56,270 --> 00:07:03,319
like it has information as to what the

00:07:00,139 --> 00:07:07,240
product is for example like open SSL and

00:07:03,319 --> 00:07:10,370
who the vendor is and which versions of

00:07:07,240 --> 00:07:12,199
software is affected so it could be

00:07:10,370 --> 00:07:14,750
arranged it could be a single version

00:07:12,199 --> 00:07:16,849
and this is a key piece because if

00:07:14,750 --> 00:07:19,879
you're using tools to automate

00:07:16,849 --> 00:07:22,099
monitoring CVS then this is the

00:07:19,879 --> 00:07:26,360
information the tools would look at to

00:07:22,099 --> 00:07:27,830
figure out if your product is or if the

00:07:26,360 --> 00:07:34,180
version of software you're using is

00:07:27,830 --> 00:07:38,479
vulnerable or not so having talked about

00:07:34,180 --> 00:07:42,830
the contents of a CVE so how do we go

00:07:38,479 --> 00:07:47,629
about monitoring it so since like Ubuntu

00:07:42,830 --> 00:07:50,419
and Debian distros have been successful

00:07:47,629 --> 00:07:52,580
in monitoring security vulnerabilities

00:07:50,419 --> 00:07:56,029
and fixing them in a timely fashion so

00:07:52,580 --> 00:07:59,810
if you consider their model what they

00:07:56,029 --> 00:08:04,940
kind of do is they manually review every

00:07:59,810 --> 00:08:07,400
CVE in the CVE feed and then see whether

00:08:04,940 --> 00:08:09,259
it's applicable to their product and if

00:08:07,400 --> 00:08:11,810
it is applicable to their product they

00:08:09,259 --> 00:08:15,800
go ahead and then like Patchett issue

00:08:11,810 --> 00:08:18,500
security advisories and not only do they

00:08:15,800 --> 00:08:20,509
do that they also monitor release notes

00:08:18,500 --> 00:08:24,199
whenever a new version of software is

00:08:20,509 --> 00:08:29,409
released they subscribe to various

00:08:24,199 --> 00:08:32,180
security mailing lists and then

00:08:29,409 --> 00:08:35,479
appropriately in a timely fashion fix

00:08:32,180 --> 00:08:38,990
vulnerabilities and if you as an

00:08:35,479 --> 00:08:41,599
embedded developer trying to mimic that

00:08:38,990 --> 00:08:44,269
model it's not feasible unless you have

00:08:41,599 --> 00:08:46,220
a dedicated cyber security team that's

00:08:44,269 --> 00:08:49,670
and the reason being there are more than

00:08:46,220 --> 00:08:52,820
16,000 known vulnerabilities which

00:08:49,670 --> 00:08:55,160
I reported on a yearly basis which

00:08:52,820 --> 00:08:56,960
translates to more than 300 CVS weekly

00:08:55,160 --> 00:08:59,050
and you're also responsible for

00:08:56,960 --> 00:09:05,120
delivering features in a timely fashion

00:08:59,050 --> 00:09:07,400
so it's not a practical model so what

00:09:05,120 --> 00:09:10,220
are some of the other options if you

00:09:07,400 --> 00:09:17,780
were to do it yourself the first step is

00:09:10,220 --> 00:09:19,490
to gather a list of software running on

00:09:17,780 --> 00:09:22,910
the device along with the version

00:09:19,490 --> 00:09:25,970
associated version with it once you have

00:09:22,910 --> 00:09:29,600
that list what you can do is look at the

00:09:25,970 --> 00:09:32,120
nvd feed which is public or go to the

00:09:29,600 --> 00:09:34,580
NBD website and then like enter that

00:09:32,120 --> 00:09:39,380
information there and that's going to

00:09:34,580 --> 00:09:42,080
give you a list of CVS and for that

00:09:39,380 --> 00:09:45,290
particular version of software and once

00:09:42,080 --> 00:09:47,390
you have that list of CVS then you can

00:09:45,290 --> 00:09:49,250
see whether they really applicable to

00:09:47,390 --> 00:09:51,740
your product or not for example you

00:09:49,250 --> 00:09:54,680
might not be using a certain kernel

00:09:51,740 --> 00:09:56,240
feature in which case if a cv is against

00:09:54,680 --> 00:09:59,000
like the floppy driver and you're not

00:09:56,240 --> 00:10:01,540
using like a floppy in your product then

00:09:59,000 --> 00:10:04,820
you can safely ignore that so you'd go

00:10:01,540 --> 00:10:07,160
you would analyze each of those cbs3 ask

00:10:04,820 --> 00:10:09,650
them and make a shorter list as to which

00:10:07,160 --> 00:10:12,080
ones need to be fixed or some of them

00:10:09,650 --> 00:10:16,100
might not be important based on like how

00:10:12,080 --> 00:10:19,150
your product is configured so that

00:10:16,100 --> 00:10:22,940
constitutes the monitoring portion of

00:10:19,150 --> 00:10:25,600
CVS this is a website which I was

00:10:22,940 --> 00:10:29,840
talking about so you can go in there

00:10:25,600 --> 00:10:32,720
enter the vendor and product information

00:10:29,840 --> 00:10:35,090
it also has an option for entering the

00:10:32,720 --> 00:10:37,310
version information you do that hit

00:10:35,090 --> 00:10:40,670
Search and it's going to give you a list

00:10:37,310 --> 00:10:46,430
of CVS for that particular product and

00:10:40,670 --> 00:10:50,570
version and if you're coming from a

00:10:46,430 --> 00:10:54,800
build system such as yocto Yocto has

00:10:50,570 --> 00:10:57,560
this capability called CV check class

00:10:54,800 --> 00:11:01,220
all you have to do is inherit this class

00:10:57,560 --> 00:11:02,980
in your local cons and run your regular

00:11:01,220 --> 00:11:05,839
bit break command

00:11:02,980 --> 00:11:09,290
to build and when you at the end of the

00:11:05,839 --> 00:11:12,769
build it gives you a report which

00:11:09,290 --> 00:11:16,430
contains a summary of all the CVS in

00:11:12,769 --> 00:11:19,220
your build the only downside is the

00:11:16,430 --> 00:11:21,259
weight science right now both host and

00:11:19,220 --> 00:11:24,139
the host in the sense like native

00:11:21,259 --> 00:11:26,829
packages and target packages CVS are all

00:11:24,139 --> 00:11:29,480
bunched together and it's a giant list

00:11:26,829 --> 00:11:36,740
so you'll have to sift through it which

00:11:29,480 --> 00:11:39,620
is cumbersome so now you have different

00:11:36,740 --> 00:11:42,709
ways in which you get a list of CVS what

00:11:39,620 --> 00:11:46,610
do you do with that list the first thing

00:11:42,709 --> 00:11:49,759
is you need to prioritize which CVS need

00:11:46,610 --> 00:11:52,459
to be fixed ideally if you upgrade to

00:11:49,759 --> 00:11:54,800
the latest and greatest version of all

00:11:52,459 --> 00:11:56,660
the versions of software you have you

00:11:54,800 --> 00:11:59,959
should get all the CV most of the CV

00:11:56,660 --> 00:12:04,730
fixes automatically but it might not be

00:11:59,959 --> 00:12:08,089
practical in that case so what you do is

00:12:04,730 --> 00:12:09,529
apply various levels of filtering so

00:12:08,089 --> 00:12:15,829
like how I mentioned that if you're not

00:12:09,529 --> 00:12:18,980
using certain kernel features the CVS

00:12:15,829 --> 00:12:21,139
might not be applicable to you so you

00:12:18,980 --> 00:12:27,500
can go through the list so for example

00:12:21,139 --> 00:12:30,290
here's example c ve list based on IMX

00:12:27,500 --> 00:12:33,290
rocco release which is roughly two years

00:12:30,290 --> 00:12:36,829
old I think at this point it had by

00:12:33,290 --> 00:12:40,399
default 658 CVS out of which 339 were

00:12:36,829 --> 00:12:42,939
kernel TVs up after applying the kernel

00:12:40,399 --> 00:12:46,339
config filter it dropped down to like

00:12:42,939 --> 00:12:50,180
432 now if you want to concentrate just

00:12:46,339 --> 00:12:54,980
on the high end critical CVS score based

00:12:50,180 --> 00:12:59,990
CVS then it it further drops down to 239

00:12:54,980 --> 00:13:02,389
CVS and most embedded devices you don't

00:12:59,990 --> 00:13:04,550
have like local users logging into the

00:13:02,389 --> 00:13:06,500
device and interacting with the devices

00:13:04,550 --> 00:13:09,649
so you could probably safely ignore

00:13:06,500 --> 00:13:12,350
those and look at the network attack

00:13:09,649 --> 00:13:15,559
vectors which ones can be remotely

00:13:12,350 --> 00:13:15,950
exploited so once applying that filter

00:13:15,559 --> 00:13:20,450
you

00:13:15,950 --> 00:13:24,170
you further drop down to like 158 CVS at

00:13:20,450 --> 00:13:26,180
this point I would recommend going and

00:13:24,170 --> 00:13:28,850
fixing all of those but if you are in a

00:13:26,180 --> 00:13:30,889
time crunch you can also look at which

00:13:28,850 --> 00:13:34,100
ones have public exploits

00:13:30,889 --> 00:13:35,810
so typically references for public

00:13:34,100 --> 00:13:37,990
exploits are also available in the

00:13:35,810 --> 00:13:40,579
immediate or you can look at like a

00:13:37,990 --> 00:13:44,560
website called exploit dB

00:13:40,579 --> 00:13:47,600
so see which CVS have exploits and

00:13:44,560 --> 00:13:50,209
prioritize those because those are the

00:13:47,600 --> 00:13:57,440
ones which most likely hackers would

00:13:50,209 --> 00:14:00,410
first target so now that you have like a

00:13:57,440 --> 00:14:03,769
prioritized list of which CVS you plan

00:14:00,410 --> 00:14:08,149
on fixing how do you go about passing

00:14:03,769 --> 00:14:10,399
them one option is to see if the latest

00:14:08,149 --> 00:14:12,829
version of software already fixes it in

00:14:10,399 --> 00:14:16,850
case it does upgrade to the latest

00:14:12,829 --> 00:14:20,269
version otherwise look at the reference

00:14:16,850 --> 00:14:23,870
links in nvd to see what is the commit

00:14:20,269 --> 00:14:27,699
ID or where where is a patch recite for

00:14:23,870 --> 00:14:30,560
that CVE and then back port it yourself

00:14:27,699 --> 00:14:33,709
you can also look at commit logs from

00:14:30,560 --> 00:14:36,680
upstream packages typically people do

00:14:33,709 --> 00:14:39,589
tag CV information in those as well and

00:14:36,680 --> 00:14:43,399
if you do backport them then you might

00:14:39,589 --> 00:14:45,860
have to maintain patches because there

00:14:43,399 --> 00:14:47,959
might be the number of CVS over time

00:14:45,860 --> 00:14:50,449
keep growing and you might if you

00:14:47,959 --> 00:14:53,660
continue to back port other cv fixes

00:14:50,449 --> 00:14:55,880
there might be conflicts as well which

00:14:53,660 --> 00:14:57,589
might not cleanly apply so you might

00:14:55,880 --> 00:14:59,600
have you might be on the hook for

00:14:57,589 --> 00:15:06,500
maintaining them as well if you don't do

00:14:59,600 --> 00:15:08,390
not upgrade the software talking more

00:15:06,500 --> 00:15:11,600
about like upgrading the software versus

00:15:08,390 --> 00:15:12,829
backporting first question you get asked

00:15:11,600 --> 00:15:14,870
is why don't they just upgrade to the

00:15:12,829 --> 00:15:17,350
latest software most I am like there are

00:15:14,870 --> 00:15:21,139
API changes especially in user space

00:15:17,350 --> 00:15:23,420
components and that means you might have

00:15:21,139 --> 00:15:25,160
to change your application and if you

00:15:23,420 --> 00:15:27,860
are using like third-party applications

00:15:25,160 --> 00:15:28,559
you might be stuck with older versions

00:15:27,860 --> 00:15:31,709
we

00:15:28,559 --> 00:15:35,549
the third-party application might be

00:15:31,709 --> 00:15:38,549
slow to make those API changes which you

00:15:35,549 --> 00:15:41,249
are a user application depends on there

00:15:38,549 --> 00:15:43,109
might be license changes as well so you

00:15:41,249 --> 00:15:46,409
might end up back porting which is

00:15:43,109 --> 00:15:48,749
complex but if you do do the back

00:15:46,409 --> 00:15:51,479
porting then if there is a public

00:15:48,749 --> 00:15:57,989
exploit available just run that make

00:15:51,479 --> 00:16:05,459
sure the backboard is cleanly done such

00:15:57,989 --> 00:16:07,739
that the exploit is not able to such

00:16:05,459 --> 00:16:11,129
that the vulnerability is addressed with

00:16:07,739 --> 00:16:13,589
the back port you can also run package

00:16:11,129 --> 00:16:19,229
tests in Yocto to make sure there are no

00:16:13,589 --> 00:16:22,499
regression related issues and make sure

00:16:19,229 --> 00:16:27,119
the backward is good the last aspect is

00:16:22,499 --> 00:16:29,309
the practicality of addressing CVS in

00:16:27,119 --> 00:16:32,999
the linux kernel if you consider the

00:16:29,309 --> 00:16:37,709
linux kernel there is one release every

00:16:32,999 --> 00:16:40,049
five days or so for the LTS branches

00:16:37,709 --> 00:16:43,499
which is good which means it's getting

00:16:40,049 --> 00:16:46,499
all the bug fixes and the cv fixes in to

00:16:43,499 --> 00:16:49,079
the LTS branches on an average there's

00:16:46,499 --> 00:16:51,839
like one to two cv is fixed but at the

00:16:49,079 --> 00:16:54,629
same time it means that you need to

00:16:51,839 --> 00:16:58,139
continuously upgrade and run tests and

00:16:54,629 --> 00:17:00,989
many times product test cycles are

00:16:58,139 --> 00:17:05,369
greater than five days so how do you

00:17:00,989 --> 00:17:08,459
keep up so this is where like having

00:17:05,369 --> 00:17:11,250
like a monthly release cadence or when

00:17:08,459 --> 00:17:14,549
sufficient number of like higher

00:17:11,250 --> 00:17:17,039
critical CVS get accumulated then

00:17:14,549 --> 00:17:21,360
immediately jumping to the latest minor

00:17:17,039 --> 00:17:23,399
LTS release might make sense and the

00:17:21,360 --> 00:17:26,970
kernel config filtering will definitely

00:17:23,399 --> 00:17:28,740
help because if the CVS don't affect you

00:17:26,970 --> 00:17:30,860
then you don't you might not need to

00:17:28,740 --> 00:17:30,860
upgrade

00:17:32,930 --> 00:17:38,190
the other major thing which determines

00:17:36,030 --> 00:17:41,460
how many CVS are there in your product

00:17:38,190 --> 00:17:45,060
is the number of packages in your

00:17:41,460 --> 00:17:47,490
product and how old your releases so if

00:17:45,060 --> 00:17:49,260
you take again Yocto as an example if

00:17:47,490 --> 00:17:52,500
you're running like core image minimal

00:17:49,260 --> 00:17:56,070
even a two and a half year old the multi

00:17:52,500 --> 00:17:58,400
release of Yocto just has 33 CVS and the

00:17:56,070 --> 00:18:01,320
master branch has like just for CVS

00:17:58,400 --> 00:18:03,540
whereas if you consider a core image

00:18:01,320 --> 00:18:07,260
satyr which includes a lot of graphic

00:18:03,540 --> 00:18:11,760
libraries and various other packages it

00:18:07,260 --> 00:18:13,320
has 336 CVS just from a user space time

00:18:11,760 --> 00:18:15,590
point of view and this does not include

00:18:13,320 --> 00:18:19,220
any kernel TVs

00:18:15,590 --> 00:18:21,740
whereas the master branch contains 14 so

00:18:19,220 --> 00:18:25,050
periodically updating to the latest

00:18:21,740 --> 00:18:27,570
version of Yocto makes sense especially

00:18:25,050 --> 00:18:32,760
if you have a large number of packages

00:18:27,570 --> 00:18:34,590
and it's also crucial that if you're not

00:18:32,760 --> 00:18:38,730
using certain packages get rid of it

00:18:34,590 --> 00:18:44,310
reduce your attack surface from a

00:18:38,730 --> 00:18:49,310
security standpoint of you so now that

00:18:44,310 --> 00:18:53,730
you know how to monitor and patch CVS

00:18:49,310 --> 00:18:58,110
the next step is the real issue with CVS

00:18:53,730 --> 00:19:02,480
is the quality of data in the nvd

00:18:58,110 --> 00:19:05,400
database so there are various issues

00:19:02,480 --> 00:19:07,590
first one being like inconsistent naming

00:19:05,400 --> 00:19:11,400
so if you consider a package like arm

00:19:07,590 --> 00:19:14,970
trusted firmware there are CVS listed in

00:19:11,400 --> 00:19:17,490
nvd database against arm - trusted

00:19:14,970 --> 00:19:21,840
firmware arm underscore trusted firmware

00:19:17,490 --> 00:19:24,120
trusted underscore firmware - a so if

00:19:21,840 --> 00:19:27,480
you did not know to look for all those

00:19:24,120 --> 00:19:30,810
three products you'd miss CVS against

00:19:27,480 --> 00:19:34,850
that particular package there are other

00:19:30,810 --> 00:19:38,520
issues where there are typos for example

00:19:34,850 --> 00:19:41,730
2.23 might be listed as 2.2 dot 3 in the

00:19:38,520 --> 00:19:43,650
CP information in which case your

00:19:41,730 --> 00:19:45,960
automated tool would never catch that

00:19:43,650 --> 00:19:48,419
and report that CVE leaving

00:19:45,960 --> 00:19:51,600
- leading to a missed CV there might be

00:19:48,419 --> 00:19:54,570
typos in names as well and sometimes

00:19:51,600 --> 00:19:57,090
there's incomplete analysis so for

00:19:54,570 --> 00:19:59,100
example they may say all versions up to

00:19:57,090 --> 00:20:01,200
the latest version of software is

00:19:59,100 --> 00:20:02,940
affected because that's the easiest

00:20:01,200 --> 00:20:05,940
thing to do instead of figuring out

00:20:02,940 --> 00:20:09,809
which commits actually introduced the cv

00:20:05,940 --> 00:20:11,880
and in doing so it will result in false

00:20:09,809 --> 00:20:14,789
positives so if you are an older version

00:20:11,880 --> 00:20:18,110
of software which is not affected you

00:20:14,789 --> 00:20:21,870
might still be your - must still be

00:20:18,110 --> 00:20:26,070
flagging that package as having a CV on

00:20:21,870 --> 00:20:27,779
the flipside sometimes there are entries

00:20:26,070 --> 00:20:30,720
saying only the latest version of

00:20:27,779 --> 00:20:33,080
software is affected whereas the prior

00:20:30,720 --> 00:20:39,090
versions of software also are affected

00:20:33,080 --> 00:20:40,799
and lastly there is the issue of new CPE

00:20:39,090 --> 00:20:46,830
information or no version information

00:20:40,799 --> 00:20:50,700
leading to missed CBE's so how do you

00:20:46,830 --> 00:20:53,700
address some of these issues Yocto has

00:20:50,700 --> 00:20:58,500
solutions for some of these so for

00:20:53,700 --> 00:21:01,500
example you can specify a CV product and

00:20:58,500 --> 00:21:05,490
what that means is you have your Yocto

00:21:01,500 --> 00:21:10,850
recipe name and that needs to map to the

00:21:05,490 --> 00:21:15,360
nvd name for that for a particular CBE

00:21:10,850 --> 00:21:18,960
so for curl CV might be listed against

00:21:15,360 --> 00:21:21,029
curl or lip curl so by specific by

00:21:18,960 --> 00:21:23,220
specifying the CV product saying like

00:21:21,029 --> 00:21:26,250
curl space lip curl is going to search

00:21:23,220 --> 00:21:29,340
for CVS against both of those in the nvd

00:21:26,250 --> 00:21:35,130
database so this will reduce the number

00:21:29,340 --> 00:21:38,940
of missed CVS if there is if the Yocto

00:21:35,130 --> 00:21:42,510
recipe versioning scheme is different

00:21:38,940 --> 00:21:45,600
from what in nvd you can also have a CV

00:21:42,510 --> 00:21:50,210
underscore version which will help you

00:21:45,600 --> 00:21:53,520
do the mapping between Yocto to NVD

00:21:50,210 --> 00:21:57,720
lastly the octo community itself is

00:21:53,520 --> 00:21:59,389
pretty good at backporting cv fixes and

00:21:57,720 --> 00:22:01,129
when they do that

00:21:59,389 --> 00:22:04,299
they tagged that information in the

00:22:01,129 --> 00:22:07,999
patch headers or in the filename itself

00:22:04,299 --> 00:22:12,379
so the Seavey's check class looks for

00:22:07,999 --> 00:22:15,529
the patch headers and are the CV ID in

00:22:12,379 --> 00:22:19,309
the file name to see whether the CV is

00:22:15,529 --> 00:22:22,009
fixed this way you don't have to look at

00:22:19,309 --> 00:22:28,820
CVS which are already fixed which helps

00:22:22,009 --> 00:22:31,429
you save time all these solutions are

00:22:28,820 --> 00:22:33,679
good but it totally depends on which

00:22:31,429 --> 00:22:37,820
version of Yocto you are armed

00:22:33,679 --> 00:22:40,309
so taking CV product as an example if

00:22:37,820 --> 00:22:42,739
you consider the Marty release which was

00:22:40,309 --> 00:22:43,399
like two years back against what's

00:22:42,739 --> 00:22:46,969
warrior

00:22:43,399 --> 00:22:50,019
there's 22 entries for CV product which

00:22:46,969 --> 00:22:55,219
is missing so nobody back ported those

00:22:50,019 --> 00:22:58,999
CV products to Marty so 22 might look

00:22:55,219 --> 00:23:00,649
like a small number but it means that 22

00:22:58,999 --> 00:23:06,469
of the packages are not being tracked

00:23:00,649 --> 00:23:09,469
for CVS and that translates 251 C visas

00:23:06,469 --> 00:23:13,549
which are missed out of which 96 of them

00:23:09,469 --> 00:23:16,159
were higher critical so you need to

00:23:13,549 --> 00:23:21,079
consider that when you use the CV check

00:23:16,159 --> 00:23:24,559
tool in Yocto and this is just including

00:23:21,079 --> 00:23:26,599
pokey not even talking about the

00:23:24,559 --> 00:23:29,179
hundreds of other meta layers out there

00:23:26,599 --> 00:23:35,719
I went and analyzed those just analyzed

00:23:29,179 --> 00:23:37,489
pokey and that's the data from that the

00:23:35,719 --> 00:23:43,629
others the other aspect of it is the

00:23:37,489 --> 00:23:43,629
tools themselves constantly improve and

00:23:43,719 --> 00:23:50,149
recently Yocto moved from CV check tool

00:23:47,359 --> 00:23:52,999
to something called CV update database

00:23:50,149 --> 00:23:56,809
and that's only in the master branch and

00:23:52,999 --> 00:23:59,690
what that does is it moves from like a

00:23:56,809 --> 00:24:04,279
XML feed which used to do like a string

00:23:59,690 --> 00:24:07,849
comparison to using the JSON feed and

00:24:04,279 --> 00:24:09,950
doing logical comparison like greater

00:24:07,849 --> 00:24:11,760
than or equal to or less than equal to

00:24:09,950 --> 00:24:15,210
for version numbers

00:24:11,760 --> 00:24:17,220
and just taking three recipes in as an

00:24:15,210 --> 00:24:19,230
example for the same version of the

00:24:17,220 --> 00:24:22,290
package with the old scheme and new

00:24:19,230 --> 00:24:25,170
scheme there's like ten new CVS which

00:24:22,290 --> 00:24:27,960
are being reported and that's only in

00:24:25,170 --> 00:24:29,730
master branch so unless these patches

00:24:27,960 --> 00:24:31,800
have been back ported to previous

00:24:29,730 --> 00:24:36,120
versions you might be missing a lot of

00:24:31,800 --> 00:24:41,310
CVS because of that and as the tools

00:24:36,120 --> 00:24:43,380
improve you get lot less missed CVS but

00:24:41,310 --> 00:24:46,680
at the same time it exposes some of the

00:24:43,380 --> 00:24:49,950
other issues with the quality of data

00:24:46,680 --> 00:24:52,880
and nvd leading to more false positives

00:24:49,950 --> 00:25:00,030
so that's at least been my experience

00:24:52,880 --> 00:25:06,000
using that so how do we improve the N

00:25:00,030 --> 00:25:09,420
Vedic feed data quality so first thing

00:25:06,000 --> 00:25:12,420
is if you see something which is

00:25:09,420 --> 00:25:15,330
inconsistent or inaccurate just send an

00:25:12,420 --> 00:25:19,020
email to Nvidia at nescau my personal

00:25:15,330 --> 00:25:21,480
experience is within an hour they

00:25:19,020 --> 00:25:24,780
updated and that website is updated the

00:25:21,480 --> 00:25:27,000
feeds are updated and it fixes the issue

00:25:24,780 --> 00:25:28,860
for everybody so everybody doesn't have

00:25:27,000 --> 00:25:31,530
to keep looking at the same CVE saying

00:25:28,860 --> 00:25:33,840
like oh this is bad data and continuing

00:25:31,530 --> 00:25:37,380
to ignore them so that's the least you

00:25:33,840 --> 00:25:42,210
can do if you see any discrepancies in

00:25:37,380 --> 00:25:45,810
the CVE summary or references you can

00:25:42,210 --> 00:25:49,410
submit in submit that information to

00:25:45,810 --> 00:25:51,510
mitre and if you see the cv product

00:25:49,410 --> 00:25:54,330
which is being missed for a particular

00:25:51,510 --> 00:25:55,770
recipe submitter Yocto patch but if you

00:25:54,330 --> 00:26:03,570
want to improve the tools yourself you

00:25:55,770 --> 00:26:07,140
can do that as well so there's also

00:26:03,570 --> 00:26:09,180
another issue with the cv data quality

00:26:07,140 --> 00:26:13,290
that's mainly for the linux kernel

00:26:09,180 --> 00:26:15,630
so whenever a CV is being reported

00:26:13,290 --> 00:26:19,340
against the Linux kernel what an media

00:26:15,630 --> 00:26:22,920
does is like they analyze that and then

00:26:19,340 --> 00:26:25,389
report it against all versions up to

00:26:22,920 --> 00:26:29,820
like the latest version let's say 5.2

00:26:25,389 --> 00:26:35,039
for example then the kernel maintainer

00:26:29,820 --> 00:26:36,969
proposed a fix main line it and then the

00:26:35,039 --> 00:26:40,059
community of the stable kernel

00:26:36,969 --> 00:26:42,129
maintainer go ahead and then back put

00:26:40,059 --> 00:26:46,299
those fixes to all the LTS branches

00:26:42,129 --> 00:26:49,629
however this does not go ahead and then

00:26:46,299 --> 00:26:53,229
like reanalyze this these CVS to say

00:26:49,629 --> 00:26:55,450
okay this fix was back ported and they

00:26:53,229 --> 00:26:58,809
don't update the nvd database for it

00:26:55,450 --> 00:27:02,529
this results in a lot of false positives

00:26:58,809 --> 00:27:06,609
just taking for for as an example if you

00:27:02,529 --> 00:27:09,070
query the for for 184 kernel there are

00:27:06,609 --> 00:27:11,889
more than 400 CV is being reported out

00:27:09,070 --> 00:27:14,859
of which 415 of them are false positives

00:27:11,889 --> 00:27:16,719
so just waste all your time looking at

00:27:14,859 --> 00:27:18,729
these saying okay these are not

00:27:16,719 --> 00:27:24,119
applicable to me because I'm unlike the

00:27:18,729 --> 00:27:24,119
layers LTS release of for for kernel

00:27:28,620 --> 00:27:33,300
so those are all problems with the

00:27:31,140 --> 00:27:36,960
quality of data then there is another

00:27:33,300 --> 00:27:40,950
aspect which is the delay in reporting

00:27:36,960 --> 00:27:44,480
the CV data itself so it can vastly vary

00:27:40,950 --> 00:27:48,030
so taking two of the CVS as an example

00:27:44,480 --> 00:27:49,980
the processes the security reporter goes

00:27:48,030 --> 00:27:55,710
back and forth with the maintainer in

00:27:49,980 --> 00:27:59,400
private the after the fix has been

00:27:55,710 --> 00:28:01,800
developed then what happens is the

00:27:59,400 --> 00:28:04,710
maintainer either discloses it on the

00:28:01,800 --> 00:28:06,450
public list like OSS security if you're

00:28:04,710 --> 00:28:09,000
not subscribe to it I would recommend

00:28:06,450 --> 00:28:13,110
subscribing to it that's where most of

00:28:09,000 --> 00:28:16,140
the CVS do get reported or else it might

00:28:13,110 --> 00:28:19,470
get reported on a private list like

00:28:16,140 --> 00:28:23,940
distros where it goes through a seven

00:28:19,470 --> 00:28:28,950
day embargo period where lunettes

00:28:23,940 --> 00:28:31,020
distributions can patch it so that they

00:28:28,950 --> 00:28:35,250
don't have to scramble on the day when

00:28:31,020 --> 00:28:39,720
the CV is made public and then once the

00:28:35,250 --> 00:28:43,650
CV does go public and really the CV

00:28:39,720 --> 00:28:46,950
starts showing up on nvd and after few

00:28:43,650 --> 00:28:50,550
days NVDA analyzes that see the CV is

00:28:46,950 --> 00:28:54,200
analyzed and the NVD entry is updated to

00:28:50,550 --> 00:28:56,850
add the CPE information and if your

00:28:54,200 --> 00:28:59,160
automated tools rely on the CP

00:28:56,850 --> 00:29:02,780
information it's not going to report the

00:28:59,160 --> 00:29:06,000
CV until this initial analysis is done

00:29:02,780 --> 00:29:08,790
so it could be up to like for example in

00:29:06,000 --> 00:29:11,490
this case 68 days before your tool

00:29:08,790 --> 00:29:16,290
starts reporting that CV against your

00:29:11,490 --> 00:29:20,880
version of software here's some fun

00:29:16,290 --> 00:29:24,150
stats so from when NBD publishes the

00:29:20,880 --> 00:29:29,730
data - when the initial analysis is done

00:29:24,150 --> 00:29:33,510
which is when the CPE entry is added it

00:29:29,730 --> 00:29:37,410
could be in 2017 the average delay was

00:29:33,510 --> 00:29:40,340
11 days 2018 it went up to 34 and then

00:29:37,410 --> 00:29:44,690
2019 it went back to 10

00:29:40,340 --> 00:29:47,600
so it varies quite a bit there and

00:29:44,690 --> 00:29:50,180
there's also another interesting thing

00:29:47,600 --> 00:29:54,290
where sometimes I talked about these

00:29:50,180 --> 00:29:56,690
silent bug fixes where a bug gets fixed

00:29:54,290 --> 00:29:58,850
and years later somebody looks at that

00:29:56,690 --> 00:30:02,500
and says hey this had a security impact

00:29:58,850 --> 00:30:06,670
and then goes ahead and then requests

00:30:02,500 --> 00:30:11,450
mightor to issue a cv against that so

00:30:06,670 --> 00:30:13,280
there's an example for a CV from 2019

00:30:11,450 --> 00:30:15,860
which was actually fixed in the kernel

00:30:13,280 --> 00:30:22,550
in 2016 so three years later somebody

00:30:15,860 --> 00:30:26,330
requested for a cv for it and it got

00:30:22,550 --> 00:30:29,410
assigned so RedHat for example tracks

00:30:26,330 --> 00:30:31,970
such information where when a

00:30:29,410 --> 00:30:34,760
vulnerability was actually made public

00:30:31,970 --> 00:30:38,180
so if you consider that with a grain of

00:30:34,760 --> 00:30:40,760
salt lake for a limited number of set of

00:30:38,180 --> 00:30:44,960
packages the average delays for like

00:30:40,760 --> 00:30:49,550
roughly like 101 in 2007 and it's down

00:30:44,960 --> 00:30:52,910
to 25 in 2019 so next time when you see

00:30:49,550 --> 00:30:55,910
a CV in the news and you're wondering

00:30:52,910 --> 00:30:58,310
why your tool is not reporting that CV

00:30:55,910 --> 00:31:03,140
that's probably because the delays and

00:30:58,310 --> 00:31:10,130
the CPE information being added in the

00:31:03,140 --> 00:31:14,030
nvd database so how do you mitigate some

00:31:10,130 --> 00:31:17,450
of these so most of these CVS are

00:31:14,030 --> 00:31:20,870
already being analyzed by Ubuntu Debian

00:31:17,450 --> 00:31:24,620
RedHat and most of them have public

00:31:20,870 --> 00:31:26,660
trackers available so if you can write

00:31:24,620 --> 00:31:30,220
scripts which can aggregate that

00:31:26,660 --> 00:31:34,250
information from you going to end Debian

00:31:30,220 --> 00:31:38,840
then you could leverage or reuse some of

00:31:34,250 --> 00:31:43,700
that information to report the CVS in a

00:31:38,840 --> 00:31:48,220
more early fashion for yourself and you

00:31:43,700 --> 00:31:52,010
wouldn't also has commit IDs as to which

00:31:48,220 --> 00:31:54,080
see which commit fixes a particular CV

00:31:52,010 --> 00:31:56,230
and which one introduced it

00:31:54,080 --> 00:31:59,390
so the civil infrastructure platform

00:31:56,230 --> 00:32:08,750
uses that to reduce the number of false

00:31:59,390 --> 00:32:11,050
positives in the CIP karma so another

00:32:08,750 --> 00:32:14,200
aspect which I wanted to talk about was

00:32:11,050 --> 00:32:17,300
secure boot so many of our customers

00:32:14,200 --> 00:32:19,940
implement secure boot chain of trust and

00:32:17,300 --> 00:32:24,230
then just forget about it thinking their

00:32:19,940 --> 00:32:27,110
product is secure but if you go back and

00:32:24,230 --> 00:32:29,840
look at CVS affecting let's say the

00:32:27,110 --> 00:32:33,350
processor itself for example the IMX

00:32:29,840 --> 00:32:35,620
processor had few CVS related to secure

00:32:33,350 --> 00:32:40,310
boot in which it would allow

00:32:35,620 --> 00:32:42,050
unauthorized code to run because of a

00:32:40,310 --> 00:32:46,790
buffer overflow issue in the checking of

00:32:42,050 --> 00:32:50,720
the signature arm trusted firmware opti

00:32:46,790 --> 00:32:53,510
which are secured world operating system

00:32:50,720 --> 00:32:57,230
code also have multiple Seavey's

00:32:53,510 --> 00:33:01,570
reported against them so it's not enough

00:32:57,230 --> 00:33:04,340
to just initially design secure boot as

00:33:01,570 --> 00:33:07,930
part of development you also need to

00:33:04,340 --> 00:33:12,110
continuously monitor for CVS against us

00:33:07,930 --> 00:33:15,470
and it's not this software which are

00:33:12,110 --> 00:33:19,610
assigned CDs it's also like processors

00:33:15,470 --> 00:33:21,800
and processor firmware so if you look at

00:33:19,610 --> 00:33:23,660
the Snapdragon 410 processor and look at

00:33:21,800 --> 00:33:24,910
how many CVS are there it's like two

00:33:23,660 --> 00:33:28,790
hundred and forty-six

00:33:24,910 --> 00:33:32,480
CVS reported against the processor and

00:33:28,790 --> 00:33:35,780
the firmware binary blobs as well so you

00:33:32,480 --> 00:33:38,180
need to look at those and manage those

00:33:35,780 --> 00:33:39,890
if because those are typically not

00:33:38,180 --> 00:33:42,730
included in your build system like

00:33:39,890 --> 00:33:42,730
doctor

00:33:47,080 --> 00:33:56,049
so given all the challenges with

00:33:50,590 --> 00:34:01,210
monitoring CVEs what is a good strategy

00:33:56,049 --> 00:34:05,320
my recommendation is twofold approach

00:34:01,210 --> 00:34:08,020
one is during the design of the product

00:34:05,320 --> 00:34:11,730
bacon security and what that means is

00:34:08,020 --> 00:34:14,200
whether you're locking down hardware by

00:34:11,730 --> 00:34:17,260
disabling the serial console disabling

00:34:14,200 --> 00:34:18,299
JTAG implementing secure boot chain of

00:34:17,260 --> 00:34:21,849
trust

00:34:18,299 --> 00:34:25,869
implementing access control like SELinux

00:34:21,849 --> 00:34:28,929
or app armour and then the other key

00:34:25,869 --> 00:34:32,139
aspect is having a secure firmware

00:34:28,929 --> 00:34:34,869
update mechanism such that when you do

00:34:32,139 --> 00:34:38,909
discs or CVS you can go ahead and then

00:34:34,869 --> 00:34:42,609
securely deploy new versions of software

00:34:38,909 --> 00:34:50,859
reduce the attack surface by reducing

00:34:42,609 --> 00:34:54,010
the number of unused components and the

00:34:50,859 --> 00:34:56,710
next aspect is staying secure which is

00:34:54,010 --> 00:34:59,530
periodically updating your software

00:34:56,710 --> 00:35:01,980
versions managing vulnerabilities

00:34:59,530 --> 00:35:05,619
monitoring them and then patching

00:35:01,980 --> 00:35:11,160
vulnerabilities also having some sort of

00:35:05,619 --> 00:35:11,160
a audit log and monitoring that as well

00:35:13,170 --> 00:35:20,650
so from a tool standpoint of you if you

00:35:16,450 --> 00:35:22,599
are evaluating any commercial tools or

00:35:20,650 --> 00:35:24,690
if you are trying to improve the

00:35:22,599 --> 00:35:28,420
existing open source tools themselves

00:35:24,690 --> 00:35:30,640
here are some of the wish list such that

00:35:28,420 --> 00:35:31,510
the effort involved in monitoring CVS

00:35:30,640 --> 00:35:34,150
can be reduced

00:35:31,510 --> 00:35:37,359
one thing I talked about was kernel

00:35:34,150 --> 00:35:40,270
config based filtering so you can go

00:35:37,359 --> 00:35:43,420
ahead and then like have some kind of

00:35:40,270 --> 00:35:46,780
CVE to kernel config mapping so that you

00:35:43,420 --> 00:35:49,900
don't have to look at those Seavey's if

00:35:46,780 --> 00:35:53,819
they're not applicable having ability to

00:35:49,900 --> 00:35:56,319
add like nodes for a particular CV

00:35:53,819 --> 00:35:59,470
Collaborate team collaboration like

00:35:56,319 --> 00:36:01,840
hearing another thing is

00:35:59,470 --> 00:36:09,369
like right now with the octo whenever

00:36:01,840 --> 00:36:12,420
you run a rescan of the CV you don't get

00:36:09,369 --> 00:36:15,190
a comparison report so you are to

00:36:12,420 --> 00:36:16,780
manually diff the results and figure out

00:36:15,190 --> 00:36:19,230
which ones are new which ones are

00:36:16,780 --> 00:36:23,530
already addressed so on

00:36:19,230 --> 00:36:26,140
and the other aspect is are there

00:36:23,530 --> 00:36:31,690
multiple sources other than nvd being

00:36:26,140 --> 00:36:36,160
used to mitigate the delays in NVDA

00:36:31,690 --> 00:36:38,410
updating the database so if you want to

00:36:36,160 --> 00:36:41,440
see some of these features in action top

00:36:38,410 --> 00:36:43,990
stop by the time sis booth or check out

00:36:41,440 --> 00:36:45,910
this particular link we have a tool

00:36:43,990 --> 00:36:52,990
which can help with some of these things

00:36:45,910 --> 00:36:55,660
so to wrap most of these things up the

00:36:52,990 --> 00:37:02,820
key takeaway is there is no magic bullet

00:36:55,660 --> 00:37:07,270
in managing and monitoring CVEs here so

00:37:02,820 --> 00:37:11,369
you need to design security in from the

00:37:07,270 --> 00:37:16,500
get-go allow for firmware upgrades

00:37:11,369 --> 00:37:20,580
continuously monitored mailing lists

00:37:16,500 --> 00:37:23,530
triage them triage the vulnerabilities

00:37:20,580 --> 00:37:27,670
patch and update to the latest version

00:37:23,530 --> 00:37:31,599
of software try and automate it wherever

00:37:27,670 --> 00:37:34,839
it's possible but just be aware of the

00:37:31,599 --> 00:37:37,570
more you automate because of the quality

00:37:34,839 --> 00:37:41,530
of the NVT data being bad you might

00:37:37,570 --> 00:37:45,160
result with miss CVS and false positives

00:37:41,530 --> 00:37:48,700
as well and whenever you do see such

00:37:45,160 --> 00:37:53,010
quality issues go ahead and then improve

00:37:48,700 --> 00:37:57,099
the database by sending an email to nest

00:37:53,010 --> 00:38:00,940
or submitting Yocto patches for the

00:37:57,099 --> 00:38:03,730
tools and if your product does not have

00:38:00,940 --> 00:38:06,119
security please don't connect it on the

00:38:03,730 --> 00:38:06,119
Internet

00:38:07,790 --> 00:38:12,339
that's it any questions

00:38:16,040 --> 00:38:18,640
yeah

00:38:31,200 --> 00:38:53,579
Fido that's like more than four years

00:38:36,119 --> 00:38:55,230
old at this point I think okay so I

00:38:53,579 --> 00:38:59,809
don't think I can answer that off the

00:38:55,230 --> 00:39:04,140
top of my head but I think it should be

00:38:59,809 --> 00:39:08,250
fairly okay because the tool itself is

00:39:04,140 --> 00:39:11,819
like natively compiled and doesn't have

00:39:08,250 --> 00:39:15,270
too many dependencies other than like

00:39:11,819 --> 00:39:18,990
Python and URL Lib 3 I think so it

00:39:15,270 --> 00:39:20,910
should be possible to backport but it

00:39:18,990 --> 00:39:22,440
fighters not actively maintained so

00:39:20,910 --> 00:39:24,420
nobody's going to do it so you'd have to

00:39:22,440 --> 00:39:27,809
probably do it yourself and if you do

00:39:24,420 --> 00:39:30,030
you can contribute back if they accept

00:39:27,809 --> 00:39:33,650
those patches yeah

00:39:30,030 --> 00:39:33,650
any other questions

00:39:37,340 --> 00:39:41,710
now

00:39:39,260 --> 00:39:48,489
okay thanks everyone

00:39:41,710 --> 00:39:48,489

YouTube URL: https://www.youtube.com/watch?v=cCzb0lewVj4


