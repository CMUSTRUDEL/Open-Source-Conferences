Title: News from the Embedded GFX Space - Robert Foss, Collabora
Publication date: 2019-09-16
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	News from the Embedded GFX Space - Robert Foss, Collabora

The embedded GPU space is seeing rapid changes with the introduction of new standards like Vulkan and new applications like VR and wearables.This of course affects the GPU hardware and what we expect from it, which in turn means that the software ecosystem is seeing a lot new demands placed on it. From low latency output of VR to power optimizations of wearables.New standards like Vulkan also have a large impact on the software stack, with some implementations going as far as implementing legacy standards like OpenGL on top the Vulkan stack.This presentation will look at the different GPUs and provide an outlook their Linux support, including a comparison of drivers provided by the vendor against the one provided by the Linux Community looking at the benefits and disadvantages of each of them.
Captions: 
	00:00:00,030 --> 00:00:09,710
we can get started so this talk is going

00:00:05,700 --> 00:00:13,080
to be about the embedded GPU space and

00:00:09,710 --> 00:00:16,199
yeah what's going on what's been

00:00:13,080 --> 00:00:18,600
happening and what you can look forward

00:00:16,199 --> 00:00:20,970
to in the future but before we get into

00:00:18,600 --> 00:00:23,930
that Who am I

00:00:20,970 --> 00:00:27,689
my name is Robert Foss I live in Germany

00:00:23,930 --> 00:00:29,760
I'm a software engineer at kelabra and I

00:00:27,689 --> 00:00:33,329
work in the open-source graphics space

00:00:29,760 --> 00:00:37,050
so that means doing kernel work Mesa

00:00:33,329 --> 00:00:41,960
work Android work Wayland work that kind

00:00:37,050 --> 00:00:41,960
of stuff it's all over the place but

00:00:42,320 --> 00:00:46,829
this is going to be a talk about the

00:00:45,090 --> 00:00:50,059
different graphics vendors and what you

00:00:46,829 --> 00:00:52,649
can look forward to so let's get started

00:00:50,059 --> 00:00:56,340
the first event vendor I want to talk

00:00:52,649 --> 00:00:59,870
about is Intel and they have a very very

00:00:56,340 --> 00:01:02,760
long history of being good solid

00:00:59,870 --> 00:01:05,970
open-source contributors they started in

00:01:02,760 --> 00:01:08,070
2004 with the AI 915 driver and it's

00:01:05,970 --> 00:01:10,860
never stopped essentially they're still

00:01:08,070 --> 00:01:13,170
doing super good work and their driver

00:01:10,860 --> 00:01:18,990
supports the very latest OpenGL and

00:01:13,170 --> 00:01:22,170
Vulcan standards and this is what their

00:01:18,990 --> 00:01:24,210
timeline of development looks like it's

00:01:22,170 --> 00:01:26,549
a bit truncated because none of the

00:01:24,210 --> 00:01:30,900
other other vendors have been around for

00:01:26,549 --> 00:01:33,170
that long so it starts 2009 but there's

00:01:30,900 --> 00:01:35,970
a few interesting features of this

00:01:33,170 --> 00:01:37,619
diagram one is that all of their

00:01:35,970 --> 00:01:40,979
hardware is supported that's not the

00:01:37,619 --> 00:01:42,060
case for every vendor and but since inta

00:01:40,979 --> 00:01:43,680
let's been around for such a long time

00:01:42,060 --> 00:01:46,640
all of their vendor or all of their

00:01:43,680 --> 00:01:49,649
hardware is very very well supported

00:01:46,640 --> 00:01:54,540
another interesting feature is the blue

00:01:49,649 --> 00:01:59,340
driver the blue dot the iris gen8 plus

00:01:54,540 --> 00:02:04,350
item and the iris driver is the name for

00:01:59,340 --> 00:02:07,110
Intel's new graphics driver and it is as

00:02:04,350 --> 00:02:10,080
open source as the old one but it's

00:02:07,110 --> 00:02:11,670
using the same driver framework that the

00:02:10,080 --> 00:02:13,140
other open-source graphics drivers are

00:02:11,670 --> 00:02:13,819
using it's called

00:02:13,140 --> 00:02:16,790
galley

00:02:13,819 --> 00:02:18,200
and it's a framework for building a

00:02:16,790 --> 00:02:22,310
graphics driver it gives you a lot of

00:02:18,200 --> 00:02:27,079
stuff for free and intel has chosen

00:02:22,310 --> 00:02:29,959
since about 1 or 2 years ago to to look

00:02:27,079 --> 00:02:34,310
into building building a gallium based

00:02:29,959 --> 00:02:36,829
driver and it's been paying off this

00:02:34,310 --> 00:02:41,269
driver is included in the latest version

00:02:36,829 --> 00:02:42,680
of Mesa and it performs better in some

00:02:41,269 --> 00:02:45,680
sort of circumstance than the previous

00:02:42,680 --> 00:02:47,989
one that has had like 15 years of

00:02:45,680 --> 00:02:49,450
development poured into it and that's

00:02:47,989 --> 00:02:53,000
quite impressive

00:02:49,450 --> 00:02:56,810
specifically they quoted CPU performance

00:02:53,000 --> 00:02:58,579
and lower CPU overhead as being a large

00:02:56,810 --> 00:03:02,870
contributing factor to wanting to switch

00:02:58,579 --> 00:03:05,060
and that's good news for not just Intel

00:03:02,870 --> 00:03:08,870
but it's good news for all of the GPU

00:03:05,060 --> 00:03:11,239
driver vendors because that means the

00:03:08,870 --> 00:03:13,760
resources that Intel pour into testing

00:03:11,239 --> 00:03:18,169
and development goes to all of us

00:03:13,760 --> 00:03:20,659
essentially whether you're on a Vivante

00:03:18,169 --> 00:03:22,190
GPU or an arm GPU or whatever you're

00:03:20,659 --> 00:03:24,199
also going to see some benefits from

00:03:22,190 --> 00:03:26,120
this be it better stability through

00:03:24,199 --> 00:03:29,540
testing or better performance through

00:03:26,120 --> 00:03:32,750
optimizations so that's very interesting

00:03:29,540 --> 00:03:36,260
and the the last almost equally as

00:03:32,750 --> 00:03:38,000
interesting part is the gen 12 p.m. so

00:03:36,260 --> 00:03:42,889
it looks like just another one of their

00:03:38,000 --> 00:03:45,680
integrated GPUs but gen 12 is as far as

00:03:42,889 --> 00:03:49,459
I understand it going to support being

00:03:45,680 --> 00:03:50,540
run as a dedicated GPU so this is going

00:03:49,459 --> 00:03:53,659
to mean that they're going to offer a

00:03:50,540 --> 00:03:57,769
higher performance dedicated separate

00:03:53,659 --> 00:04:00,919
GPU I I would assume that it's going to

00:03:57,769 --> 00:04:03,049
be used for primarily like server and

00:04:00,919 --> 00:04:05,329
price type workloads so it's probably

00:04:03,049 --> 00:04:08,780
not going to be in your your next gaming

00:04:05,329 --> 00:04:12,139
rig but but who knows the graphics

00:04:08,780 --> 00:04:15,079
support is there anyway so on to the

00:04:12,139 --> 00:04:18,380
next vendor AMD they're also like a

00:04:15,079 --> 00:04:21,380
really good open source citizen they've

00:04:18,380 --> 00:04:24,560
been around since 2009 in the space when

00:04:21,380 --> 00:04:26,720
they decided to start opening up their

00:04:24,560 --> 00:04:28,640
documentation for their GPUs

00:04:26,720 --> 00:04:31,430
and providing this documentation

00:04:28,640 --> 00:04:33,590
essentially means that you don't have to

00:04:31,430 --> 00:04:36,320
reverse engineer their driver in order

00:04:33,590 --> 00:04:40,220
for you to start writing your own new

00:04:36,320 --> 00:04:42,800
driver so taking away the the reverse

00:04:40,220 --> 00:04:45,400
engineering work really lowers the

00:04:42,800 --> 00:04:49,010
threshold for our driver to emerge and

00:04:45,400 --> 00:04:51,680
since then a lot of AMD drivers have

00:04:49,010 --> 00:04:55,490
emerged there's yeah almost too many

00:04:51,680 --> 00:04:58,240
like I'll go into it but there's like a

00:04:55,490 --> 00:05:02,120
forest of different slightly different

00:04:58,240 --> 00:05:04,400
AMD drivers all of them or all of the

00:05:02,120 --> 00:05:08,030
current ones support the latest OpenGL

00:05:04,400 --> 00:05:10,810
and Vulcan standards so you can expect

00:05:08,030 --> 00:05:15,380
it to work with anything essentially and

00:05:10,810 --> 00:05:17,810
this is what the timeline looks like so

00:05:15,380 --> 00:05:22,700
if you look to the left the blue ones

00:05:17,810 --> 00:05:25,250
are drivers or they're platforms that

00:05:22,700 --> 00:05:28,850
are supported by the kernel Radeon

00:05:25,250 --> 00:05:33,560
driver the Radeon driver targets the

00:05:28,850 --> 00:05:37,750
really old hardware think the past

00:05:33,560 --> 00:05:42,680
fifteen years up to like five years ago

00:05:37,750 --> 00:05:44,990
super old hardware and the red dots on

00:05:42,680 --> 00:05:46,850
the timeline support like everything

00:05:44,990 --> 00:05:49,030
else essentially up to the very latest

00:05:46,850 --> 00:05:51,710
GPUs the ones released a few months ago

00:05:49,030 --> 00:05:53,960
they are all supported upstream both in

00:05:51,710 --> 00:05:59,750
the kernel and on Mesa she's very nice

00:05:53,960 --> 00:06:01,580
but apart from the Mesa driver AMD also

00:05:59,750 --> 00:06:05,660
supplies their own user space driver

00:06:01,580 --> 00:06:07,460
that is also open source and one is

00:06:05,660 --> 00:06:10,040
called AMD GPU and the other one is

00:06:07,460 --> 00:06:15,590
called Mt Vulcan and they support OpenGL

00:06:10,040 --> 00:06:19,970
and Vulcan of course these are not the

00:06:15,590 --> 00:06:21,110
community drivers but they are fully and

00:06:19,970 --> 00:06:24,440
totally open source but they're

00:06:21,110 --> 00:06:25,669
maintained by AMD essentially m.d also

00:06:24,440 --> 00:06:28,430
provides resources for the community

00:06:25,669 --> 00:06:31,610
drivers which seems like a crazy amount

00:06:28,430 --> 00:06:33,950
of extra work not just going with only

00:06:31,610 --> 00:06:36,740
the community drivers but I can also see

00:06:33,950 --> 00:06:39,370
their point of view of wanting to reuse

00:06:36,740 --> 00:06:42,520
the driver across all platforms

00:06:39,370 --> 00:06:44,889
but a driver like that is not something

00:06:42,520 --> 00:06:50,550
that can be included in into the Mesa or

00:06:44,889 --> 00:06:53,160
Colonel project then there is nvidia

00:06:50,550 --> 00:06:54,880
which is a very interesting story

00:06:53,160 --> 00:06:57,820
they've been around for a long time

00:06:54,880 --> 00:07:01,240
since 2010 there's been an open-source

00:06:57,820 --> 00:07:03,250
driver called Nouveau Nvidia has never

00:07:01,240 --> 00:07:05,740
really contributed towards that they

00:07:03,250 --> 00:07:08,290
have in the very limited case of Tegra

00:07:05,740 --> 00:07:10,270
which is their embedded platforms

00:07:08,290 --> 00:07:13,810
they've contributed some code towards

00:07:10,270 --> 00:07:17,800
the Nouveau project the nouveau project

00:07:13,810 --> 00:07:20,260
supports the latest OpenGL standards but

00:07:17,800 --> 00:07:23,050
it doesn't really matter it's still not

00:07:20,260 --> 00:07:24,520
useful and we're gonna get into that so

00:07:23,050 --> 00:07:26,830
if you look at the reverse engineering

00:07:24,520 --> 00:07:28,600
timeline here this is essentially all of

00:07:26,830 --> 00:07:33,610
the GPUs that have been released by

00:07:28,600 --> 00:07:36,039
Nvidia and in this time span and if we

00:07:33,610 --> 00:07:38,350
look at the support for GPUs in the

00:07:36,039 --> 00:07:40,110
upstream kernel and Mesa projects it's

00:07:38,350 --> 00:07:43,930
also essentially all of the GPUs but

00:07:40,110 --> 00:07:48,610
it's still not usable because in order

00:07:43,930 --> 00:07:52,030
for you to make the GPU go faster or go

00:07:48,610 --> 00:07:55,090
fast you need to load the firmer firmer

00:07:52,030 --> 00:07:57,760
blob provided by Nvidia this allows the

00:07:55,090 --> 00:08:00,160
GPU to increase the frequency at which

00:07:57,760 --> 00:08:03,070
its operating from the baseline the

00:08:00,160 --> 00:08:07,180
lowest safety levels to the actual

00:08:03,070 --> 00:08:11,860
performance levels this blob exists in

00:08:07,180 --> 00:08:13,690
there the driver they ship and it is

00:08:11,860 --> 00:08:15,760
usable you could use it with the

00:08:13,690 --> 00:08:19,750
open-source drivers and just load it up

00:08:15,760 --> 00:08:21,849
however they threw legalese prohibit

00:08:19,750 --> 00:08:23,639
this from from being allowed so while

00:08:21,849 --> 00:08:26,080
it's entirely technically possible

00:08:23,639 --> 00:08:28,330
Debian can't for example ship this blob

00:08:26,080 --> 00:08:30,610
nor can you nor can I only invidious

00:08:28,330 --> 00:08:34,060
allowed to ship it so that effectively

00:08:30,610 --> 00:08:36,610
means that Nouveau is not useful you

00:08:34,060 --> 00:08:38,260
can't use it and this is something

00:08:36,610 --> 00:08:40,270
something that would be super simple to

00:08:38,260 --> 00:08:46,570
fix if people were interested in in

00:08:40,270 --> 00:08:47,829
doing that then there's imagination so

00:08:46,570 --> 00:08:50,860
we used to see a lot of imagination

00:08:47,829 --> 00:08:52,430
imagination GPUs in a bunch of different

00:08:50,860 --> 00:08:55,610
places

00:08:52,430 --> 00:08:57,110
from Apple devices which is maybe not

00:08:55,610 --> 00:09:01,640
what this talk is targeting targeting

00:08:57,110 --> 00:09:03,890
but to single board computers and a

00:09:01,640 --> 00:09:07,520
bunch of things they're not quite as

00:09:03,890 --> 00:09:12,670
common anymore and they also have

00:09:07,520 --> 00:09:16,700
essentially no upstream support at all

00:09:12,670 --> 00:09:19,640
imagination has written a a sort of stub

00:09:16,700 --> 00:09:21,440
kernel driver but it can't be accepted

00:09:19,640 --> 00:09:24,020
into the Linux kernel since there's no

00:09:21,440 --> 00:09:27,560
user space 3d driver that actually uses

00:09:24,020 --> 00:09:30,380
it they have a few Mesa patches floating

00:09:27,560 --> 00:09:32,440
around but they don't even try to offer

00:09:30,380 --> 00:09:34,220
like 3d support in them so that

00:09:32,440 --> 00:09:36,920
essentially means that that can't be

00:09:34,220 --> 00:09:39,170
merged either so until they change their

00:09:36,920 --> 00:09:42,140
mind there's not a lot to be said for

00:09:39,170 --> 00:09:43,970
imagination either unlike many of the

00:09:42,140 --> 00:09:46,400
other drivers the community has shown

00:09:43,970 --> 00:09:49,280
very little interest in reverse

00:09:46,400 --> 00:09:52,270
engineering their GPUs that's partly

00:09:49,280 --> 00:09:54,620
because they're very complicated they're

00:09:52,270 --> 00:10:00,020
slightly different from the other sets

00:09:54,620 --> 00:10:02,180
of GPUs but unfortunately that means

00:10:00,020 --> 00:10:05,810
that no one has really picked this up in

00:10:02,180 --> 00:10:07,940
a serious way imagination is the last

00:10:05,810 --> 00:10:11,240
vendor that I know of that doesn't have

00:10:07,940 --> 00:10:12,770
any type of open source GPU which is

00:10:11,240 --> 00:10:14,990
interesting and something that they

00:10:12,770 --> 00:10:17,120
maybe should take note of there's a

00:10:14,990 --> 00:10:19,750
trajectory here and the trajectory is

00:10:17,120 --> 00:10:25,490
that every every GPU has an open-source

00:10:19,750 --> 00:10:29,300
driver except for them on to Qualcomm

00:10:25,490 --> 00:10:32,150
which is a much better story so the free

00:10:29,300 --> 00:10:35,150
tree no driver which targets the adrenal

00:10:32,150 --> 00:10:39,800
GPUs of Qualcomm has been developed

00:10:35,150 --> 00:10:42,860
since 2013 and Qualcomm has been

00:10:39,800 --> 00:10:44,690
supporting this GPU or at least lately

00:10:42,860 --> 00:10:47,090
they've been supporting it directly and

00:10:44,690 --> 00:10:52,240
indirectly with actual actual developer

00:10:47,090 --> 00:10:56,240
time which is really nice to see and

00:10:52,240 --> 00:10:58,190
there's a little bit a little piece of

00:10:56,240 --> 00:11:02,390
trivia in the name of their GPU the

00:10:58,190 --> 00:11:06,170
Adreno so Qualcomm bought the mobile

00:11:02,390 --> 00:11:10,940
handset of AMD in 2009

00:11:06,170 --> 00:11:12,139
including their gpus which is why there

00:11:10,940 --> 00:11:17,750
a GPU is called

00:11:12,139 --> 00:11:19,160
Audrina it's a wordplay on Radeon this

00:11:17,750 --> 00:11:21,860
is what the reverse engineering process

00:11:19,160 --> 00:11:25,160
has looked like for the call come GPUs

00:11:21,860 --> 00:11:28,610
these are all of their GPUs so every

00:11:25,160 --> 00:11:31,370
single one is supported and this reverse

00:11:28,610 --> 00:11:33,350
engineering work was done by Rob Clarke

00:11:31,370 --> 00:11:37,310
and Elia Merkin and others in the

00:11:33,350 --> 00:11:41,240
community and if we look at the results

00:11:37,310 --> 00:11:43,579
of that see that there's not a lot of

00:11:41,240 --> 00:11:46,490
lag between driver being reverse

00:11:43,579 --> 00:11:48,410
engineered and at being supported in the

00:11:46,490 --> 00:11:52,449
upstream up in the upstream products

00:11:48,410 --> 00:11:55,959
maybe it's six months a year at most

00:11:52,449 --> 00:11:59,060
it's just pretty incredible given that

00:11:55,959 --> 00:12:02,360
to reverse engineer a GPU this it's not

00:11:59,060 --> 00:12:05,209
a trivial task and this is partly done

00:12:02,360 --> 00:12:08,720
just for fun because people enjoy it

00:12:05,209 --> 00:12:12,519
like not everyone is or very few are

00:12:08,720 --> 00:12:18,470
paid to do this reverse engineering work

00:12:12,519 --> 00:12:21,740
and then we have Broadcom which is their

00:12:18,470 --> 00:12:27,040
I guess a very recent citizen to the

00:12:21,740 --> 00:12:30,230
open-source driver community in 2015

00:12:27,040 --> 00:12:33,470
they started developing the VC for

00:12:30,230 --> 00:12:35,480
driver the VC for is the GPU that's in

00:12:33,470 --> 00:12:38,329
the Raspberry Pi well rather the

00:12:35,480 --> 00:12:42,529
Raspberry Pi of one through three the

00:12:38,329 --> 00:12:47,540
Raspberry Pi for ships the vc v GPU

00:12:42,529 --> 00:12:49,519
oh sorry six GPU I believe and there was

00:12:47,540 --> 00:12:52,100
essentially no reverse engineering done

00:12:49,519 --> 00:12:55,339
for this driver since it was sponsored

00:12:52,100 --> 00:12:58,370
entirely by Broadcom and they clearly

00:12:55,339 --> 00:13:00,260
have documentation in-house and they

00:12:58,370 --> 00:13:02,990
essentially hired a community person

00:13:00,260 --> 00:13:07,040
eric Anhalt to write this driver and he

00:13:02,990 --> 00:13:10,130
did until very recently so this is what

00:13:07,040 --> 00:13:12,529
the timeline looks like for for Broadcom

00:13:10,130 --> 00:13:15,440
it's not a lot of GPUs in there yeah

00:13:12,529 --> 00:13:19,310
there's the VC for and the v3d driver

00:13:15,440 --> 00:13:27,470
the v3 three driver targets VC five

00:13:19,310 --> 00:13:31,910
than vc6 gpus the next vendor is Vivante

00:13:27,470 --> 00:13:34,279
and a driver was starting to be

00:13:31,910 --> 00:13:37,160
developed in 2015 for their their

00:13:34,279 --> 00:13:39,670
hardware it was already originally it

00:13:37,160 --> 00:13:43,639
wasn't entirely like community driven

00:13:39,670 --> 00:13:48,550
and it started it was based on reverse

00:13:43,639 --> 00:13:51,410
engineering since 2012 since then

00:13:48,550 --> 00:13:55,490
reverse engineering and development has

00:13:51,410 --> 00:13:58,339
been sponsored amongst or some of it by

00:13:55,490 --> 00:14:02,620
aircraft suppliers if you saw the talk

00:13:58,339 --> 00:14:07,550
before mine there is a real problem with

00:14:02,620 --> 00:14:10,220
long term support and and GPUs and

00:14:07,550 --> 00:14:12,980
proprietary drivers if you want to offer

00:14:10,220 --> 00:14:15,889
long term support that's not the one

00:14:12,980 --> 00:14:17,329
year or five years or even ten years or

00:14:15,889 --> 00:14:18,139
in the case of aircraft suppliers like

00:14:17,329 --> 00:14:21,649
20 years

00:14:18,139 --> 00:14:26,029
you really can't rely on a vendor both

00:14:21,649 --> 00:14:28,250
being there and being willing to supply

00:14:26,029 --> 00:14:34,879
you with an actual proprietary driver

00:14:28,250 --> 00:14:36,439
with the latest fixes so some of the

00:14:34,879 --> 00:14:38,629
people in our industry have chosen to

00:14:36,439 --> 00:14:41,149
and just forego the proprietary driver

00:14:38,629 --> 00:14:44,889
and sponsor the development of a new one

00:14:41,149 --> 00:14:49,639
and this is what the reverse engineering

00:14:44,889 --> 00:14:57,009
timeline looks like and it resulted in a

00:14:49,639 --> 00:15:00,860
driver rather recently so this driver is

00:14:57,009 --> 00:15:05,179
shipped now as far as I know and in

00:15:00,860 --> 00:15:07,540
actual aircraft and it's used should be

00:15:05,179 --> 00:15:10,339
like a sign of a vote of confidence and

00:15:07,540 --> 00:15:13,910
do to further illustrate where where

00:15:10,339 --> 00:15:16,730
this driver is here's a benchmark it's

00:15:13,910 --> 00:15:19,550
just a random benchmark basically and it

00:15:16,730 --> 00:15:21,439
shows that the open source driver has

00:15:19,550 --> 00:15:24,470
essentially 80% of the performance of

00:15:21,439 --> 00:15:27,589
the prepared heroine and I would say

00:15:24,470 --> 00:15:30,980
that this is like a worst case if your

00:15:27,589 --> 00:15:32,690
application performs poorly the

00:15:30,980 --> 00:15:35,709
situation can surely be improved

00:15:32,690 --> 00:15:39,230
and or if you have a weird use case that

00:15:35,709 --> 00:15:41,360
maybe isn't supported by the proprietary

00:15:39,230 --> 00:15:47,329
driver that's something that could be

00:15:41,360 --> 00:15:49,910
added as well so let's look at the the

00:15:47,329 --> 00:15:53,300
last vendor here they're sort of the

00:15:49,910 --> 00:15:56,110
last ones to the party and they're not

00:15:53,300 --> 00:15:58,399
entirely willingly at the party but

00:15:56,110 --> 00:16:03,649
there's some really exciting stuff to be

00:15:58,399 --> 00:16:08,060
said about arm so in the past years

00:16:03,649 --> 00:16:11,569
since essentially 2012 there's been a

00:16:08,060 --> 00:16:14,959
very slow burning type of that reverse

00:16:11,569 --> 00:16:18,439
engineering effort in 2012 a guy called

00:16:14,959 --> 00:16:21,560
lucre Hagen started reverse engineering

00:16:18,439 --> 00:16:25,040
the mali-400 series of GPUs they're

00:16:21,560 --> 00:16:27,980
pretty low and relatively simple GPUs

00:16:25,040 --> 00:16:29,779
and he created a prototype which

00:16:27,980 --> 00:16:30,589
unfortunately he was never truly

00:16:29,779 --> 00:16:32,750
open-sourced

00:16:30,589 --> 00:16:37,009
he gave some talks about it and it did

00:16:32,750 --> 00:16:38,990
work at least in some cases but since

00:16:37,009 --> 00:16:41,120
the code was never really published not

00:16:38,990 --> 00:16:45,519
a lot happened and the effort sort of

00:16:41,120 --> 00:16:49,459
died out until 2000 2017 where keon you

00:16:45,519 --> 00:16:52,990
decided to pick up the work hyung is a

00:16:49,459 --> 00:16:55,670
developer at AMD which is interesting

00:16:52,990 --> 00:16:57,860
this is pretty common a thing you see

00:16:55,670 --> 00:17:00,019
quite often in this space where a

00:16:57,860 --> 00:17:03,589
developer of one company is prohibited

00:17:00,019 --> 00:17:05,929
for prohibited from contributing towards

00:17:03,589 --> 00:17:08,569
his driver so he develops a driver for

00:17:05,929 --> 00:17:10,400
another company instead because he has

00:17:08,569 --> 00:17:11,929
the knowledge and he wants to make an

00:17:10,400 --> 00:17:16,280
open-source driver but he can't make it

00:17:11,929 --> 00:17:19,520
first on hardware so and in 2017

00:17:16,280 --> 00:17:24,140
yang picked us up for the mali-400

00:17:19,520 --> 00:17:30,530
series this driver is called Lima and in

00:17:24,140 --> 00:17:33,919
2018 there a new driver for that malli

00:17:30,530 --> 00:17:37,909
T series and G series of GPUs called

00:17:33,919 --> 00:17:42,919
tan frost was created by Alice

00:17:37,909 --> 00:17:44,400
rosensweig and Connor Abbott and this is

00:17:42,919 --> 00:17:48,200
essentially the

00:17:44,400 --> 00:17:50,220
current middle and high end AMD GPUs and

00:17:48,200 --> 00:17:57,150
they've been reverse-engineered from

00:17:50,220 --> 00:18:00,210
scratch and very recently both pan Frost

00:17:57,150 --> 00:18:02,550
and Lima have landed in the kernel and

00:18:00,210 --> 00:18:05,280
the Mesa repositories so they're fully

00:18:02,550 --> 00:18:07,650
supported by or not not fully supported

00:18:05,280 --> 00:18:12,180
they're supported by open source drivers

00:18:07,650 --> 00:18:16,880
both and currently the peripherals

00:18:12,180 --> 00:18:18,780
driver runs Wayland runs 3d apps and

00:18:16,880 --> 00:18:22,679
kelabra has decided to contribute

00:18:18,780 --> 00:18:24,600
towards that too and we do contribute to

00:18:22,679 --> 00:18:27,360
full-time engineers to working on this

00:18:24,600 --> 00:18:30,150
so we're trying to push this forward but

00:18:27,360 --> 00:18:32,820
this started as a community process and

00:18:30,150 --> 00:18:34,860
without the community we wouldn't be we

00:18:32,820 --> 00:18:37,530
wouldn't be anywhere essentially if

00:18:34,860 --> 00:18:39,210
you're curious about what this looks

00:18:37,530 --> 00:18:41,520
like we have a demo at our booth you can

00:18:39,210 --> 00:18:43,710
come play some super tux cart with us

00:18:41,520 --> 00:18:47,580
we're all pretty terrible so I'm sure

00:18:43,710 --> 00:18:49,740
you'd win so that's very exciting but

00:18:47,580 --> 00:18:55,920
there's some more stuff coming down the

00:18:49,740 --> 00:18:58,320
line so a big thing is open CL and open

00:18:55,920 --> 00:19:01,650
CL support and it's been a big thing for

00:18:58,320 --> 00:19:04,440
a long time because there it's

00:19:01,650 --> 00:19:06,630
essentially a large step from not

00:19:04,440 --> 00:19:09,240
supporting it to supporting it and the

00:19:06,630 --> 00:19:13,320
Community Interest unlike for 3d as a

00:19:09,240 --> 00:19:15,179
lot smaller so we depend on like client

00:19:13,320 --> 00:19:17,040
work essentially like a client would

00:19:15,179 --> 00:19:19,950
have to come to us and say we want open

00:19:17,040 --> 00:19:23,340
CL make this happen here's a bag of

00:19:19,950 --> 00:19:26,280
money and then we could go into like

00:19:23,340 --> 00:19:29,010
development mode currently a few of the

00:19:26,280 --> 00:19:30,840
drivers however are seeing some interest

00:19:29,010 --> 00:19:33,840
in some work being done to support open

00:19:30,840 --> 00:19:36,770
CL Ford we know driver the nouveau

00:19:33,840 --> 00:19:42,179
driver and the web driver

00:19:36,770 --> 00:19:46,170
so these are mostly intended to be used

00:19:42,179 --> 00:19:49,380
in like the embedded space and the work

00:19:46,170 --> 00:19:54,179
itself has come in the form of enabling

00:19:49,380 --> 00:19:56,340
a new or the most modern compiler

00:19:54,179 --> 00:19:57,520
intermediate representation that makes

00:19:56,340 --> 00:20:01,420
the supports called

00:19:57,520 --> 00:20:04,360
and I NIR so NIR is one part of a in

00:20:01,420 --> 00:20:07,480
abling OpenCL the other part is having

00:20:04,360 --> 00:20:11,200
an open CL compiler front-end that works

00:20:07,480 --> 00:20:13,929
and is compatible with NIR and that

00:20:11,200 --> 00:20:19,420
essentially means LLVM and getting LLVM

00:20:13,929 --> 00:20:22,330
to support yeah open CL and yeah recent

00:20:19,420 --> 00:20:24,010
open CL features some work is being done

00:20:22,330 --> 00:20:26,920
in this space too

00:20:24,010 --> 00:20:28,600
it's also not done but hopefully we

00:20:26,920 --> 00:20:31,710
could see open CL support merged into

00:20:28,600 --> 00:20:36,360
LLVM too maybe this year maybe next year

00:20:31,710 --> 00:20:40,650
then there's Vulcan compute which is

00:20:36,360 --> 00:20:43,660
already working for the two big driver

00:20:40,650 --> 00:20:45,760
developers in the Mesa space so Intel

00:20:43,660 --> 00:20:47,470
and AMD have Vulcan drivers and their

00:20:45,760 --> 00:20:50,200
Vulcan drivers already support what can

00:20:47,470 --> 00:20:53,050
compute so that's very interesting and

00:20:50,200 --> 00:20:56,710
especially how it relates to open CL if

00:20:53,050 --> 00:20:59,410
you ask Chronos the standards body that

00:20:56,710 --> 00:21:02,290
are responsible for both Vulcan OpenCL

00:20:59,410 --> 00:21:04,270
onobu and OpenGL they will tell you that

00:21:02,290 --> 00:21:07,450
Vulcan compute is not an open seal

00:21:04,270 --> 00:21:10,540
replacement it's not meant to be so that

00:21:07,450 --> 00:21:12,820
might be an interesting data point even

00:21:10,540 --> 00:21:14,800
if the support for some of these drivers

00:21:12,820 --> 00:21:16,380
is pretty good for Vulcan computes it

00:21:14,800 --> 00:21:19,630
may not be something that you should

00:21:16,380 --> 00:21:24,700
hope too much more in terms of solving

00:21:19,630 --> 00:21:29,320
your embedded compute issues and then

00:21:24,700 --> 00:21:31,030
there's a cycle and cycle is a layer

00:21:29,320 --> 00:21:34,510
that isn't done that is intended to be

00:21:31,030 --> 00:21:38,860
built on top of open CL essentially so

00:21:34,510 --> 00:21:44,230
think of it as as CUDA essentially it's

00:21:38,860 --> 00:21:46,660
a single source language that allows you

00:21:44,230 --> 00:21:48,700
to compile both the compute kernel and

00:21:46,660 --> 00:21:52,929
your application in a single source file

00:21:48,700 --> 00:21:54,460
it also solves some other issues so

00:21:52,929 --> 00:21:56,440
that's something to look forward to and

00:21:54,460 --> 00:22:01,929
that's also a standard that's backed by

00:21:56,440 --> 00:22:05,230
Kronos as for the the bigger tick at the

00:22:01,929 --> 00:22:07,210
bigger picture some drivers are

00:22:05,230 --> 00:22:08,500
extremely mature and have been around

00:22:07,210 --> 00:22:12,690
for a long long time

00:22:08,500 --> 00:22:15,970
some are newer yet still very mature

00:22:12,690 --> 00:22:18,220
the community drivers now all share the

00:22:15,970 --> 00:22:20,289
same codebase especially with Intel now

00:22:18,220 --> 00:22:22,929
moving to the galley or to using the

00:22:20,289 --> 00:22:26,950
gallium framework this is very much the

00:22:22,929 --> 00:22:30,749
case that what benefits one driver will

00:22:26,950 --> 00:22:33,249
likely benefit the other as well be it

00:22:30,749 --> 00:22:36,309
stability through testing or better

00:22:33,249 --> 00:22:38,139
performance through optimization there's

00:22:36,309 --> 00:22:40,720
a lot to be gained for for everyone when

00:22:38,139 --> 00:22:44,409
one of the vendors makes some

00:22:40,720 --> 00:22:46,480
contribution reverse engineering a

00:22:44,409 --> 00:22:48,279
driver from reverse engineering to

00:22:46,480 --> 00:22:51,249
having something actually upstream takes

00:22:48,279 --> 00:22:54,609
some thing like one to seven years

00:22:51,249 --> 00:22:57,220
that's pretty hand wavy but it's it's a

00:22:54,609 --> 00:23:02,080
number maybe the average is a lot closer

00:22:57,220 --> 00:23:03,789
to one or two years and compute is still

00:23:02,080 --> 00:23:06,549
on the way as it always has been

00:23:03,789 --> 00:23:08,820
we'll see maybe next year maybe the year

00:23:06,549 --> 00:23:08,820
after that

00:23:09,359 --> 00:23:15,340
but maybe the more interesting question

00:23:13,450 --> 00:23:17,109
to ask yourself why do you even care

00:23:15,340 --> 00:23:18,909
about running open-source drivers why

00:23:17,109 --> 00:23:20,830
does it matter like my Nvidia

00:23:18,909 --> 00:23:22,809
proprietary driver works just fine it's

00:23:20,830 --> 00:23:26,830
great it's performance it supports all

00:23:22,809 --> 00:23:31,210
the use cases I have but there are some

00:23:26,830 --> 00:23:34,480
real important thoughts or things to

00:23:31,210 --> 00:23:36,730
think about this if you want to want to

00:23:34,480 --> 00:23:42,359
support your product for a seriously

00:23:36,730 --> 00:23:45,129
long time be it one year or 20 years

00:23:42,359 --> 00:23:48,159
getting a vendor to actually support

00:23:45,129 --> 00:23:50,440
their proprietary driver is a going to

00:23:48,159 --> 00:23:54,909
be hard or B going to cost you a lot of

00:23:50,440 --> 00:23:57,580
money so that's an important question to

00:23:54,909 --> 00:23:59,409
have in mind when choosing what software

00:23:57,580 --> 00:24:01,239
stack you want to use especially if

00:23:59,409 --> 00:24:07,590
you're developing actual physical

00:24:01,239 --> 00:24:12,220
products and the performance of the

00:24:07,590 --> 00:24:14,379
open-source driver is mostly on par

00:24:12,220 --> 00:24:16,989
sometimes better sometimes worse with

00:24:14,379 --> 00:24:19,259
proprietary ones it really depends on on

00:24:16,989 --> 00:24:24,039
which vendor we're talking about here

00:24:19,259 --> 00:24:24,920
but for Intel and AMD that's certainly

00:24:24,039 --> 00:24:28,490
the case

00:24:24,920 --> 00:24:31,460
for a Vivante it's more of a depends on

00:24:28,490 --> 00:24:34,310
your application for our mitts yeah I

00:24:31,460 --> 00:24:37,520
don't know if it's working we're very

00:24:34,310 --> 00:24:39,920
happy the performances may be good in

00:24:37,520 --> 00:24:44,930
some cases but it's not competitive with

00:24:39,920 --> 00:24:47,930
a proprietary blob another very

00:24:44,930 --> 00:24:50,660
important question to ask yourself is

00:24:47,930 --> 00:24:53,390
how are we going to debug this thing if

00:24:50,660 --> 00:24:56,030
you have simple debugging your time to

00:24:53,390 --> 00:24:57,700
market is going to be lower that's just

00:24:56,030 --> 00:25:00,650
a fact

00:24:57,700 --> 00:25:02,990
getting the insight that you need to to

00:25:00,650 --> 00:25:05,810
solve an issue immediately really

00:25:02,990 --> 00:25:06,890
matters and it matters when you're in

00:25:05,810 --> 00:25:10,010
the most critical phase of development

00:25:06,890 --> 00:25:12,050
like bringing a thing up if you don't

00:25:10,010 --> 00:25:17,120
have any insight it'll just take you

00:25:12,050 --> 00:25:18,860
longer and and lastly like having old

00:25:17,120 --> 00:25:21,350
hardware supported for a long time and

00:25:18,860 --> 00:25:23,720
means that maybe you'll see new features

00:25:21,350 --> 00:25:27,590
added to your old hardware especially

00:25:23,720 --> 00:25:30,110
when it comes to the community graphics

00:25:27,590 --> 00:25:31,700
drivers that share the gallium Framework

00:25:30,110 --> 00:25:34,160
like you get a lot of stuff for free

00:25:31,700 --> 00:25:36,050
just because they it's the same codebase

00:25:34,160 --> 00:25:37,550
if you make an improvement to one driver

00:25:36,050 --> 00:25:42,700
it may be available to the other ones

00:25:37,550 --> 00:25:45,740
and yeah what's not to like about that

00:25:42,700 --> 00:25:48,710
and that's essentially it that's

00:25:45,740 --> 00:25:56,230
everything I wanted to say does anyone

00:25:48,710 --> 00:25:56,230
have any questions shoot

00:26:05,160 --> 00:26:15,920
how to do it there's barely support for

00:26:11,520 --> 00:26:18,630
OpenCL as it is so I would say no but

00:26:15,920 --> 00:26:22,260
the intention is of course to do it as

00:26:18,630 --> 00:26:25,410
as well as possible and like when you're

00:26:22,260 --> 00:26:26,760
developing support for a feature like

00:26:25,410 --> 00:26:29,250
OpenCL a big one

00:26:26,760 --> 00:26:31,650
like having the debug tools that other

00:26:29,250 --> 00:26:32,880
people will need yourself it's something

00:26:31,650 --> 00:26:35,580
that you want right you want your

00:26:32,880 --> 00:26:36,990
development to be easy and then as a

00:26:35,580 --> 00:26:40,440
result other people's development

00:26:36,990 --> 00:26:42,210
process will be easy as well but as for

00:26:40,440 --> 00:26:51,830
the actual way to do it I can't tell you

00:26:42,210 --> 00:26:51,830
that all right

00:26:54,500 --> 00:26:59,390
I think that's the general thing about

00:26:56,900 --> 00:27:01,400
the open spaces or sorry the the compute

00:26:59,390 --> 00:27:04,100
space especially with an open source

00:27:01,400 --> 00:27:05,960
there's a lot to be done and some of the

00:27:04,100 --> 00:27:11,710
work is underway and some is yet to

00:27:05,960 --> 00:27:11,710
start any other questions

00:27:16,320 --> 00:27:27,880
for pan frost its upstream yes yep we're

00:27:25,270 --> 00:27:34,350
running in the upstream version on in

00:27:27,880 --> 00:27:34,350
our booth so in Mesa and in the kernel

00:27:34,680 --> 00:27:40,450
yep it's there you can run your normal

00:27:38,050 --> 00:27:47,320
desktop we run genome shell on our demo

00:27:40,450 --> 00:27:50,940
it's just no none yeah it just works I

00:27:47,320 --> 00:27:58,380
mean it's not flawless but it does work

00:27:50,940 --> 00:27:58,380
any other questions sir louder

00:28:05,350 --> 00:28:10,990
not for that specific benchmark no I

00:28:08,980 --> 00:28:13,360
didn't look into it I just ran a

00:28:10,990 --> 00:28:15,550
benchmark to have some numbers to show

00:28:13,360 --> 00:28:18,280
you that the performance well not always

00:28:15,550 --> 00:28:19,950
better as competitive or in the the

00:28:18,280 --> 00:28:22,360
right ballpark

00:28:19,950 --> 00:28:24,630
I'm sure if you wanted better

00:28:22,360 --> 00:28:26,440
performance it could be improved

00:28:24,630 --> 00:28:34,950
specifically for that case or other

00:28:26,440 --> 00:28:37,950
cases any other questions

00:28:34,950 --> 00:28:37,950
shoot

00:28:38,370 --> 00:28:46,120
so the Pam prescriber targets both the G

00:28:43,960 --> 00:28:49,810
Series and the T series of armed abuse

00:28:46,120 --> 00:28:52,900
however we're only currently using the

00:28:49,810 --> 00:28:54,580
or testing against the T series the G

00:28:52,900 --> 00:28:57,610
Series is further out I think there's

00:28:54,580 --> 00:29:00,010
it's been reverse-engineered to a large

00:28:57,610 --> 00:29:02,830
extent but very little actual

00:29:00,010 --> 00:29:17,650
development has been done towards

00:29:02,830 --> 00:29:19,900
supporting that platform I mean there is

00:29:17,650 --> 00:29:21,910
a project like that but I unfortunately

00:29:19,900 --> 00:29:25,600
I don't think progress is on it on there

00:29:21,910 --> 00:29:27,580
it's called the Mesa tracker so for the

00:29:25,600 --> 00:29:30,790
other drivers like Edna V you can have a

00:29:27,580 --> 00:29:36,700
look it up compost should maybe at some

00:29:30,790 --> 00:29:41,680
point have that enabled as well all

00:29:36,700 --> 00:29:43,180
right any more questions in that case I

00:29:41,680 --> 00:29:45,290
think we're done thank you all for

00:29:43,180 --> 00:29:51,089
coming

00:29:45,290 --> 00:29:51,089

YouTube URL: https://www.youtube.com/watch?v=FvBv7j2PsJs


