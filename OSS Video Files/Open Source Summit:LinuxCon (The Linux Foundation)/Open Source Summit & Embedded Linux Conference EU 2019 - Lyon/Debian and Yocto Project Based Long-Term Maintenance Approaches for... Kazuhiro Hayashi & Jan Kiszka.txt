Title: Debian and Yocto Project Based Long-Term Maintenance Approaches for... Kazuhiro Hayashi & Jan Kiszka
Publication date: 2019-10-29
Playlist: Open Source Summit & Embedded Linux Conference EU 2019 - Lyon
Description: 
	Debian and Yocto Project Based Long-Term Maintenance Approaches for Embedded Products - Kazuhiro Hayashi, Toshiba & Jan Kiszka, Siemens AG

In industrial products, 10+ years maintenance is required, including security fixes, reproducible builds, and continuous system updates. Selecting appropriate base systems and tools is necessary for efficient product development. Debian has been applied to industrial products because of its stability, long-term supports, and powerful tools for packages development. The CIP Project, which provides scalable and customizable base image and BSP layers, is now used in various embedded devices. The speakers introduce the two different approaches to satisfy the requirements above; Deby and ISAR. Both provide simple but effective functions to customize and maintain Debian for embedded products. This talk not only explains preferred use cases of each approach, how to apply to product development, and relation with other open source projects but also how the CIP project supports building a sustainable industrial-grade Linux distribution.
Captions: 
	00:00:00,060 --> 00:00:08,610
good morning thank you for attending

00:00:02,929 --> 00:00:12,570
positioned we'd like to introduce a low

00:00:08,610 --> 00:00:15,240
long-term maintenance approaches for the

00:00:12,570 --> 00:00:19,830
embedded products based on Debian and

00:00:15,240 --> 00:00:22,470
your project I'm cause hero

00:00:19,830 --> 00:00:27,260
I actually working in Toshiba

00:00:22,470 --> 00:00:31,410
Corporation in Japan and usually

00:00:27,260 --> 00:00:35,820
developing our embedded Linux products

00:00:31,410 --> 00:00:39,149
you know company and also I'm a member

00:00:35,820 --> 00:00:43,260
of the CLP project which is which will

00:00:39,149 --> 00:00:46,500
be a scribe in this session and could

00:00:43,260 --> 00:00:48,270
you explain my name is Yann Kisker I'm

00:00:46,500 --> 00:00:51,329
basically doing the same what cars was

00:00:48,270 --> 00:00:53,610
doing but for Siemens cop technology I'm

00:00:51,329 --> 00:00:56,250
also involved in the CIB project looking

00:00:53,610 --> 00:00:59,190
after the the either pass of CIP we look

00:00:56,250 --> 00:01:00,780
into later on and also maintaining and

00:00:59,190 --> 00:01:06,390
contributing to a number of other open

00:01:00,780 --> 00:01:11,280
source projects thank you and he's at

00:01:06,390 --> 00:01:14,460
today's agenda first I'd like to explain

00:01:11,280 --> 00:01:19,680
some background in our product

00:01:14,460 --> 00:01:24,570
development and explain what is this EAP

00:01:19,680 --> 00:01:27,270
and a see a peak or and explain some

00:01:24,570 --> 00:01:31,020
concrete example of the implementation

00:01:27,270 --> 00:01:34,380
of this epic or and how we are thinking

00:01:31,020 --> 00:01:42,899
about building products on top of the

00:01:34,380 --> 00:01:45,810
CIP here is a basic steps in in the

00:01:42,899 --> 00:01:50,570
solar product development in the left

00:01:45,810 --> 00:01:54,930
side and in the right side there are

00:01:50,570 --> 00:01:59,670
several requirements in each require in

00:01:54,930 --> 00:02:04,250
the each step for example in the

00:01:59,670 --> 00:02:08,069
development state we need to select

00:02:04,250 --> 00:02:10,580
based system which supports monster

00:02:08,069 --> 00:02:11,900
architectures and embedded pose

00:02:10,580 --> 00:02:16,770
[Music]

00:02:11,900 --> 00:02:20,160
also on the high customizability and the

00:02:16,770 --> 00:02:25,160
scalability is required to cover the

00:02:20,160 --> 00:02:30,570
many kind of product developments and

00:02:25,160 --> 00:02:37,530
usually our product developers required

00:02:30,570 --> 00:02:40,980
lady to use images to install some

00:02:37,530 --> 00:02:47,670
systems into the target very easily and

00:02:40,980 --> 00:02:50,940
quickly as well as standalone SDK which

00:02:47,670 --> 00:02:57,090
is required to do the web application by

00:02:50,940 --> 00:03:02,100
themselves and after the latest product

00:02:57,090 --> 00:03:05,700
sulu product certification the products

00:03:02,100 --> 00:03:10,920
will be in maintenance phase in this

00:03:05,700 --> 00:03:13,410
phase important things is that we need

00:03:10,920 --> 00:03:18,590
to provide a many kind of backfist

00:03:13,410 --> 00:03:24,440
and security fix if needed without

00:03:18,590 --> 00:03:28,040
changing without adding and many

00:03:24,440 --> 00:03:33,480
significant updates to the each software

00:03:28,040 --> 00:03:37,920
installed in the target and we need to

00:03:33,480 --> 00:03:42,420
support such kind of things for a long

00:03:37,920 --> 00:03:46,470
time with verified automated update and

00:03:42,420 --> 00:03:50,160
we also need to do such kind of things

00:03:46,470 --> 00:03:54,900
very quickly and also need to share

00:03:50,160 --> 00:03:59,459
common resources elements required in

00:03:54,900 --> 00:04:01,650
the multiple products so things of what

00:03:59,459 --> 00:04:07,079
we need to to fast is to select

00:04:01,650 --> 00:04:09,860
appropriate base system we select the

00:04:07,079 --> 00:04:15,269
one our Linux distribution for that and

00:04:09,860 --> 00:04:18,570
also need to provide some tools that can

00:04:15,269 --> 00:04:22,550
integrate the database system into our

00:04:18,570 --> 00:04:24,570
product requirements o severe

00:04:22,550 --> 00:04:31,110
infrastructure platform

00:04:24,570 --> 00:04:33,270
project was launched to cover such kind

00:04:31,110 --> 00:04:39,660
of requirement in our product

00:04:33,270 --> 00:04:43,790
development it provides first industrial

00:04:39,660 --> 00:04:48,270
grade software which is required to

00:04:43,790 --> 00:04:51,600
achieve features required which is like

00:04:48,270 --> 00:04:53,000
reliability or high real time

00:04:51,600 --> 00:04:58,700
performance and so on

00:04:53,000 --> 00:05:02,280
and second it's also need to provide the

00:04:58,700 --> 00:05:08,910
sustainability so that the systems of

00:05:02,280 --> 00:05:13,200
the product need to be maintained well

00:05:08,910 --> 00:05:20,640
long term more than 10 years they being

00:05:13,200 --> 00:05:26,930
based on standards also security there

00:05:20,640 --> 00:05:33,320
we need to apply the many security fixes

00:05:26,930 --> 00:05:38,000
for a long time but very secure ways

00:05:33,320 --> 00:05:38,000
without the regulations Oh

00:05:38,570 --> 00:05:47,430
basically the software stacks also

00:05:42,240 --> 00:05:52,970
product consists of the Linux kernel and

00:05:47,430 --> 00:05:57,090
core packages sorry the hundred packages

00:05:52,970 --> 00:06:01,290
that it's provided an open source

00:05:57,090 --> 00:06:03,920
distribution and the product specific

00:06:01,290 --> 00:06:09,330
software and c.a.p

00:06:03,920 --> 00:06:13,370
is focusing on to establish an open

00:06:09,330 --> 00:06:18,000
source base layer which consists of

00:06:13,370 --> 00:06:24,480
super long term support it Carnell plus

00:06:18,000 --> 00:06:28,130
C IP core packages most famous

00:06:24,480 --> 00:06:31,350
distribution focusing on provide various

00:06:28,130 --> 00:06:35,400
100 packages to cover the various

00:06:31,350 --> 00:06:38,039
requirement in general but the target

00:06:35,400 --> 00:06:44,909
obviously appear is bottom two

00:06:38,039 --> 00:06:48,300
since several there are several work

00:06:44,909 --> 00:06:52,789
groups in the c.a.p project and she

00:06:48,300 --> 00:06:57,210
epicor is one of them and it focuses on

00:06:52,789 --> 00:07:00,599
userland software and tools the one of

00:06:57,210 --> 00:07:04,379
the goals of the CP Corps is to provide

00:07:00,599 --> 00:07:08,490
a differe to define a list of CP core

00:07:04,379 --> 00:07:12,899
packages that should be maintained for a

00:07:08,490 --> 00:07:15,439
very long time about the CLP and also to

00:07:12,899 --> 00:07:21,449
provide the reference implementation

00:07:15,439 --> 00:07:24,870
including that core packages also to

00:07:21,449 --> 00:07:28,199
test the implementation on the CFPB for

00:07:24,870 --> 00:07:33,259
Hallowell which is decided by the safety

00:07:28,199 --> 00:07:37,309
project members currently around

00:07:33,259 --> 00:07:43,919
currently the 6 volt difference Hardware

00:07:37,309 --> 00:07:47,999
defined in the CP project this is the

00:07:43,919 --> 00:07:53,459
position of the Sepik core work group in

00:07:47,999 --> 00:07:58,620
the CLP project first we clearly define

00:07:53,459 --> 00:08:02,009
the process to decide coop packages we

00:07:58,620 --> 00:08:07,379
need to support and discuss with the CP

00:08:02,009 --> 00:08:12,930
as a CP members then updates the coop

00:08:07,379 --> 00:08:17,580
package list and other what groups like

00:08:12,930 --> 00:08:19,589
a security and software update request

00:08:17,580 --> 00:08:22,620
some packages or additional

00:08:19,589 --> 00:08:25,979
configuration in the system to support

00:08:22,620 --> 00:08:29,099
their support features they are

00:08:25,979 --> 00:08:33,120
requiring in that case each work group

00:08:29,099 --> 00:08:36,630
the request some specific specific

00:08:33,120 --> 00:08:38,370
packages to the CP Koko then we see a

00:08:36,630 --> 00:08:41,909
peak or provide relief honest

00:08:38,370 --> 00:08:44,250
implementation including support

00:08:41,909 --> 00:08:49,380
long-term support color and typical

00:08:44,250 --> 00:08:51,870
packages then test the implementation on

00:08:49,380 --> 00:08:55,949
the CP live Orleans hot way

00:08:51,870 --> 00:08:59,939
based using the CI environment probably

00:08:55,949 --> 00:09:03,870
by the testing lock groups so what it

00:08:59,939 --> 00:09:08,480
does here Pico implementation correctly

00:09:03,870 --> 00:09:12,420
it's based on Debian which is one of the

00:09:08,480 --> 00:09:15,899
mixture and high-quality distribution in

00:09:12,420 --> 00:09:18,930
the world and from long time ago there

00:09:15,899 --> 00:09:22,170
it supports many new and all architects

00:09:18,930 --> 00:09:26,189
appear architectures and suitable for

00:09:22,170 --> 00:09:29,220
the various system from small one to the

00:09:26,189 --> 00:09:31,550
big one where there are many packaged

00:09:29,220 --> 00:09:35,579
various packages need to be installed

00:09:31,550 --> 00:09:41,100
and also it provides a lot of security

00:09:35,579 --> 00:09:46,160
updates frequently by driven security

00:09:41,100 --> 00:09:51,529
team and also the penalty s and Debian

00:09:46,160 --> 00:09:54,779
extended energies project so see Epicor

00:09:51,529 --> 00:09:57,449
provided two profiles a based on debian

00:09:54,779 --> 00:10:00,959
one of them is a generic profile and

00:09:57,449 --> 00:10:07,350
another since the tiny profile internet

00:10:00,959 --> 00:10:13,019
profile it upload its approaches is the

00:10:07,350 --> 00:10:17,009
binary based and using the two either to

00:10:13,019 --> 00:10:21,600
generates a finer image and in the tiny

00:10:17,009 --> 00:10:25,680
profile we this depends on the source

00:10:21,600 --> 00:10:33,350
packages of the debian and using debbie

00:10:25,680 --> 00:10:38,540
as a bill to and i would like to explain

00:10:33,350 --> 00:10:41,459
some features of each upstream project

00:10:38,540 --> 00:10:46,350
first one its debbie is a repository

00:10:41,459 --> 00:10:47,779
name is a metal debian which is looked

00:10:46,350 --> 00:10:50,699
browse one of the Yocto project

00:10:47,779 --> 00:10:53,850
extensions for using the debian sauce

00:10:50,699 --> 00:10:55,860
packages so the beautiful system is

00:10:53,850 --> 00:11:00,569
completely same as the of the project

00:10:55,860 --> 00:11:04,090
and its goal is to achieve the stability

00:11:00,569 --> 00:11:10,640
in the long term support with

00:11:04,090 --> 00:11:15,800
keeping the Yocto advantages yeah Oh is

00:11:10,640 --> 00:11:20,840
a very flexible and extend double by

00:11:15,800 --> 00:11:23,180
adding our own recipes and the

00:11:20,840 --> 00:11:25,520
interesting one of the interesting scene

00:11:23,180 --> 00:11:28,310
is we can provide a some very small

00:11:25,520 --> 00:11:31,640
footprint systems using the Debian

00:11:28,310 --> 00:11:37,220
sauces around its solute file system

00:11:31,640 --> 00:11:41,090
size is allowed two megabytes and it can

00:11:37,220 --> 00:11:43,460
also provide various target machine

00:11:41,090 --> 00:11:46,160
configuration for the various CPU

00:11:43,460 --> 00:11:48,980
architectures and tuning angles as well

00:11:46,160 --> 00:11:52,130
as ESP Rhea's are provided by the boat

00:11:48,980 --> 00:11:54,950
vendors you can check this upstream

00:11:52,130 --> 00:12:01,180
repository and see a Pico tiny profile

00:11:54,950 --> 00:12:04,460
is provided as bottom you are rare this

00:12:01,180 --> 00:12:08,660
described how the Debbie works very

00:12:04,460 --> 00:12:12,850
simply in the bottom there is a pokey

00:12:08,660 --> 00:12:17,020
that is probably in the your project and

00:12:12,850 --> 00:12:23,780
on top of this the meta debian working

00:12:17,020 --> 00:12:27,710
it contains some recipes to cross build

00:12:23,780 --> 00:12:30,530
the debian sauces and also it provides

00:12:27,710 --> 00:12:34,460
some common functions to effectively a

00:12:30,530 --> 00:12:38,200
fetch or unpack or a patch that debian

00:12:34,460 --> 00:12:42,500
sauces and finally the big baked

00:12:38,200 --> 00:12:44,660
automatically generates required images

00:12:42,500 --> 00:12:49,030
like a car and look for system with

00:12:44,660 --> 00:12:53,120
loader and we stand our own SDK for each

00:12:49,030 --> 00:12:57,170
hardware then from this right I'd like

00:12:53,120 --> 00:12:59,330
to change the speaker to yeah yeah Thank

00:12:57,170 --> 00:13:01,520
You castle so I would like to give you a

00:12:59,330 --> 00:13:03,860
brief introduction about the build tool

00:13:01,520 --> 00:13:07,460
we are using for the binary based

00:13:03,860 --> 00:13:10,280
approach in CIP that's the easier build

00:13:07,460 --> 00:13:13,370
system not part of the CIP project but

00:13:10,280 --> 00:13:16,280
it's an external project we support that

00:13:13,370 --> 00:13:17,610
has to go to to you to generate you

00:13:16,280 --> 00:13:21,120
basically a Debian

00:13:17,610 --> 00:13:23,490
compliant Debian compatible image out of

00:13:21,120 --> 00:13:27,930
normal Debian or in the normal Debian

00:13:23,490 --> 00:13:29,750
way out of binary packages mostly it's a

00:13:27,930 --> 00:13:33,380
developer centric workflows we have one

00:13:29,750 --> 00:13:37,430
command building basically you have

00:13:33,380 --> 00:13:40,200
still the need in embedded world to do

00:13:37,430 --> 00:13:41,730
customizations and extensions to some

00:13:40,200 --> 00:13:42,930
packages but not to all that's the

00:13:41,730 --> 00:13:45,450
philosophy behind it and this is

00:13:42,930 --> 00:13:47,190
purported by this and yeah as we are

00:13:45,450 --> 00:13:49,470
primarily binary based its vision

00:13:47,190 --> 00:13:51,060
building so that you beyond is basically

00:13:49,470 --> 00:13:53,100
combined the best of both worlds

00:13:51,060 --> 00:13:56,160
have the binary distribution as a major

00:13:53,100 --> 00:13:59,130
source but have a build system similar

00:13:56,160 --> 00:14:02,220
to to Yocto which actually we are using

00:13:59,130 --> 00:14:04,170
bitbake internally in order to have the

00:14:02,220 --> 00:14:07,440
customization and have also similar

00:14:04,170 --> 00:14:10,649
structure like Howser described for the

00:14:07,440 --> 00:14:12,600
made a Debian approach and that of

00:14:10,649 --> 00:14:14,310
course also implies reusing knowledge of

00:14:12,600 --> 00:14:16,980
developers who used to work with talked

00:14:14,310 --> 00:14:19,170
to before just to give you a brief idea

00:14:16,980 --> 00:14:22,260
how the workflow looks like inside Iza

00:14:19,170 --> 00:14:23,820
so we start with a deep bootstrap of the

00:14:22,260 --> 00:14:25,110
required environments we need for the

00:14:23,820 --> 00:14:27,810
target as well as for the built

00:14:25,110 --> 00:14:30,630
environment so we create a build change

00:14:27,810 --> 00:14:33,779
root out of this to have a built

00:14:30,630 --> 00:14:36,029
environment for custom packages for the

00:14:33,779 --> 00:14:38,820
view we may have like for example to

00:14:36,029 --> 00:14:41,089
Colonel or some customizations on other

00:14:38,820 --> 00:14:45,110
packets or not yet have been packaged

00:14:41,089 --> 00:14:47,519
packages or components so you can either

00:14:45,110 --> 00:14:50,250
come with a source package which

00:14:47,519 --> 00:14:53,370
contains organization or we have some

00:14:50,250 --> 00:14:55,410
internal recipes which generated ad hoc

00:14:53,370 --> 00:14:58,470
well of course not a debian standards

00:14:55,410 --> 00:15:01,140
but technically working and then you

00:14:58,470 --> 00:15:03,269
generate packages out of these normal

00:15:01,140 --> 00:15:06,660
binary packages and add them to the pool

00:15:03,269 --> 00:15:09,890
of the pre-existing Debian packages to

00:15:06,660 --> 00:15:12,690
finally assemble the root filesystem for

00:15:09,890 --> 00:15:14,970
your targets install all the needed

00:15:12,690 --> 00:15:17,490
components so it's all package centric

00:15:14,970 --> 00:15:19,440
and last but not least generate an image

00:15:17,490 --> 00:15:22,199
out of this the image you want a boot on

00:15:19,440 --> 00:15:24,930
your system from the flash from the SD

00:15:22,199 --> 00:15:26,480
card or whatever you have for that we

00:15:24,930 --> 00:15:30,170
are using big

00:15:26,480 --> 00:15:33,769
the Yocto project most cases some are

00:15:30,170 --> 00:15:36,620
done with custom classes but that is the

00:15:33,769 --> 00:15:37,940
approach granted for customizing the

00:15:36,620 --> 00:15:40,160
image generating the image doing the

00:15:37,940 --> 00:15:41,870
petitioning Buddha installation all

00:15:40,160 --> 00:15:46,610
these are stuff and then you have your

00:15:41,870 --> 00:15:50,240
bootable image in the end these are the

00:15:46,610 --> 00:15:54,589
two systems on top we have our our

00:15:50,240 --> 00:15:57,260
layers for CIP so for the the either

00:15:54,589 --> 00:15:58,579
variant is either CIP core layer and

00:15:57,260 --> 00:16:00,980
this is just to give you an idea how

00:15:58,579 --> 00:16:02,480
quick you can generate an image for a

00:16:00,980 --> 00:16:05,000
concrete board in this case the

00:16:02,480 --> 00:16:06,560
BeagleBone board we're using

00:16:05,000 --> 00:16:09,290
configuration management tool for that

00:16:06,560 --> 00:16:13,310
which is also usable for for Yocto and

00:16:09,290 --> 00:16:15,350
for the tiny profile path and you just

00:16:13,310 --> 00:16:18,079
select basically what you want to build

00:16:15,350 --> 00:16:20,089
which port which configuration and at

00:16:18,079 --> 00:16:25,000
the end you have this directly bootable

00:16:20,089 --> 00:16:28,279
images so to compare the two approaches

00:16:25,000 --> 00:16:30,889
the the easier path is you get the

00:16:28,279 --> 00:16:32,720
compatibility to Debian so you get an

00:16:30,889 --> 00:16:34,490
image in the end but you can just if you

00:16:32,720 --> 00:16:37,610
like to install further packages on the

00:16:34,490 --> 00:16:39,920
target when you're developing still or

00:16:37,610 --> 00:16:41,870
you can pull from all the compatible

00:16:39,920 --> 00:16:45,740
sources of Debian packages onto your

00:16:41,870 --> 00:16:47,899
target while with a tiny profile you

00:16:45,740 --> 00:16:50,690
have a system which is confined first of

00:16:47,899 --> 00:16:53,300
all to a subset of Debian packages which

00:16:50,690 --> 00:16:55,190
have been put into recipes but in

00:16:53,300 --> 00:16:56,690
addition you can pull from the Yocto

00:16:55,190 --> 00:17:00,529
world additional components you want to

00:16:56,690 --> 00:17:03,949
have there clearly the goal for the very

00:17:00,529 --> 00:17:05,839
profile is well bigger size system or

00:17:03,949 --> 00:17:07,130
bigger these days is also relative so

00:17:05,839 --> 00:17:12,079
anything starting from one hunting

00:17:07,130 --> 00:17:14,900
graboids + + - is normal goal for these

00:17:12,079 --> 00:17:19,669
systems while escazu set for debbie you

00:17:14,900 --> 00:17:22,189
can go much smaller compared we already

00:17:19,669 --> 00:17:24,650
mentioned on the user side the binary

00:17:22,189 --> 00:17:28,870
packages on the Debbie side the octo

00:17:24,650 --> 00:17:30,110
recipes the skillset is kind of similar

00:17:28,870 --> 00:17:33,380
bitbake

00:17:30,110 --> 00:17:35,330
octo is the common sense but in addition

00:17:33,380 --> 00:17:36,590
on the other side you should have a

00:17:35,330 --> 00:17:39,650
little bit of knowledge of debian

00:17:36,590 --> 00:17:41,690
packaging to do things properly

00:17:39,650 --> 00:17:42,950
for the non trivial things at least for

00:17:41,690 --> 00:17:45,620
simple things I said there are

00:17:42,950 --> 00:17:47,150
automation for that available major

00:17:45,620 --> 00:17:49,640
difference is of course the build time

00:17:47,150 --> 00:17:51,860
as we are generating not too many

00:17:49,640 --> 00:17:55,130
packages with the either pass or unity

00:17:51,860 --> 00:17:56,750
up to a few 10 minutes for an image

00:17:55,130 --> 00:17:58,700
build while if you have to put

00:17:56,750 --> 00:18:01,010
everything from sources you can do the

00:17:58,700 --> 00:18:05,590
mass that can easily go into our

00:18:01,010 --> 00:18:09,050
dimension regarding the customization

00:18:05,590 --> 00:18:11,900
yeah needs for these two parts clearly

00:18:09,050 --> 00:18:15,140
if you go the genetic profile the user

00:18:11,900 --> 00:18:16,850
path that is only needed or that's the

00:18:15,140 --> 00:18:19,040
goal should only be to have a few

00:18:16,850 --> 00:18:21,830
packages customized and the rest just

00:18:19,040 --> 00:18:23,900
taking as they are while it was a Devi

00:18:21,830 --> 00:18:26,240
profile you've been a tiny profile you

00:18:23,900 --> 00:18:28,010
can go much more into customizations

00:18:26,240 --> 00:18:33,440
with all the pros and cons you have of

00:18:28,010 --> 00:18:35,930
this so yeah typical systems for the

00:18:33,440 --> 00:18:37,760
generic profile IOT gateways edge

00:18:35,930 --> 00:18:41,360
devices industrial controllers

00:18:37,760 --> 00:18:43,430
everything of a certain size while I was

00:18:41,360 --> 00:18:45,770
tiny profile you can go down to small

00:18:43,430 --> 00:18:50,210
IOT devices everything which still runs

00:18:45,770 --> 00:18:52,880
something like Linux so of course these

00:18:50,210 --> 00:18:56,680
paths also need to be tested and so we

00:18:52,880 --> 00:18:59,210
have set up not to surprise in the

00:18:56,680 --> 00:19:03,980
complex test infrastructure where we

00:18:59,210 --> 00:19:06,410
push the builds on both sides in to get

00:19:03,980 --> 00:19:10,220
lab so CIP project is hosted on grid lab

00:19:06,410 --> 00:19:12,980
calm and trigger the necessary builds on

00:19:10,220 --> 00:19:15,890
them we have eight ideas based built

00:19:12,980 --> 00:19:17,690
farm behind it which is a project of its

00:19:15,890 --> 00:19:20,870
own by the way so we can also use it if

00:19:17,690 --> 00:19:23,000
you like to wear these images are being

00:19:20,870 --> 00:19:28,370
produced and artifacts later on being

00:19:23,000 --> 00:19:31,040
pushed to s3 and from there on in

00:19:28,370 --> 00:19:34,460
parallel the built also triggers lava

00:19:31,040 --> 00:19:37,360
tests so lava masters running in our lap

00:19:34,460 --> 00:19:41,570
and we have a couple of member labs

00:19:37,360 --> 00:19:43,880
hosting a few boards that they will then

00:19:41,570 --> 00:19:45,620
take these jobs and execute pulling the

00:19:43,880 --> 00:19:49,750
artifacts and execute the test run

00:19:45,620 --> 00:19:49,750
directly on the targets

00:19:50,559 --> 00:19:56,510
so how to apply this now into a product

00:19:53,750 --> 00:19:58,070
development so normally if you build the

00:19:56,510 --> 00:20:00,440
product you are not happy with just

00:19:58,070 --> 00:20:01,970
taking what we distribute in form of a

00:20:00,440 --> 00:20:03,309
layer or on form of package list you

00:20:01,970 --> 00:20:05,690
want to customize you need to customize

00:20:03,309 --> 00:20:07,669
that means you need to put at least one

00:20:05,690 --> 00:20:11,270
layer on top which describes your

00:20:07,669 --> 00:20:13,940
product to well install your custom

00:20:11,270 --> 00:20:16,580
application to do further adjustments to

00:20:13,940 --> 00:20:20,450
your target to add some VSP which is not

00:20:16,580 --> 00:20:23,270
in scope or not supported here as is for

00:20:20,450 --> 00:20:26,390
that both approaches as I said are based

00:20:23,270 --> 00:20:30,320
on the bit make layering concept so you

00:20:26,390 --> 00:20:33,279
can put these layers on top and managed

00:20:30,320 --> 00:20:35,809
to change the customizations in this way

00:20:33,279 --> 00:20:37,220
you can also manage of course more

00:20:35,809 --> 00:20:40,100
commoditization so if you put the

00:20:37,220 --> 00:20:43,880
product line and define common product

00:20:40,100 --> 00:20:46,850
layers or even go into your mapping your

00:20:43,880 --> 00:20:49,429
corporate structure on this if you have

00:20:46,850 --> 00:20:52,720
for your division a commodity you can

00:20:49,429 --> 00:20:55,309
also put it this way and as I said these

00:20:52,720 --> 00:20:57,529
passes are supported in both profiles

00:20:55,309 --> 00:20:59,600
even if the technology underneath are in

00:20:57,529 --> 00:21:01,190
details different and actually it is

00:20:59,600 --> 00:21:03,500
currently also the approach that CIP

00:21:01,190 --> 00:21:06,230
members are applying so we have

00:21:03,500 --> 00:21:09,080
internally in our companies this kind of

00:21:06,230 --> 00:21:12,620
structure we have some business domain

00:21:09,080 --> 00:21:16,340
specific commodity layers often which

00:21:12,620 --> 00:21:20,240
add further internal or open source

00:21:16,340 --> 00:21:23,270
components specific to the domain and

00:21:20,240 --> 00:21:25,279
then further on half on top the product

00:21:23,270 --> 00:21:30,289
layer describing the individual product

00:21:25,279 --> 00:21:32,630
or product line and that happens in both

00:21:30,289 --> 00:21:35,419
systems however there is now the desire

00:21:32,630 --> 00:21:37,190
to make this easier integrator will see

00:21:35,419 --> 00:21:39,919
a piece of currently the our internal

00:21:37,190 --> 00:21:42,260
our CIP layers are primarily targeting

00:21:39,919 --> 00:21:45,409
the testability of our infrastructure so

00:21:42,260 --> 00:21:47,380
they are an early stage so what you see

00:21:45,409 --> 00:21:49,700
on the right in the structure is

00:21:47,380 --> 00:21:52,100
basically just using the build system

00:21:49,700 --> 00:21:54,850
directly underneath and not yet to see

00:21:52,100 --> 00:21:58,000
IP layer this is one you want to change

00:21:54,850 --> 00:22:00,820
so we are heading for making

00:21:58,000 --> 00:22:05,350
the CIP layers relevant and interesting

00:22:00,820 --> 00:22:09,300
for direct product use means providing

00:22:05,350 --> 00:22:12,030
really releases with tested dependencies

00:22:09,300 --> 00:22:14,800
also including the build tools behind it

00:22:12,030 --> 00:22:17,560
and he bought supports and the things

00:22:14,800 --> 00:22:19,300
like this and also providing

00:22:17,560 --> 00:22:21,580
repositories for mirroring our

00:22:19,300 --> 00:22:23,590
dependencies of making them long-term

00:22:21,580 --> 00:22:26,470
available I mean by now many of them

00:22:23,590 --> 00:22:28,240
identical to the upstream components but

00:22:26,470 --> 00:22:30,250
if you think five years ahead that

00:22:28,240 --> 00:22:32,320
situation will eventually change not all

00:22:30,250 --> 00:22:34,750
of these will be supported by upstream

00:22:32,320 --> 00:22:38,110
communities anymore and CRV will have to

00:22:34,750 --> 00:22:44,470
be come the source and then we provide

00:22:38,110 --> 00:22:46,270
it in one place so furthermore as Carol

00:22:44,470 --> 00:22:49,000
mentioned we are working on this package

00:22:46,270 --> 00:22:51,760
set package list and that of course

00:22:49,000 --> 00:22:54,040
would also be encoded as reference image

00:22:51,760 --> 00:22:56,040
in these layers once that has been

00:22:54,040 --> 00:23:00,280
concluded to list we will add this to it

00:22:56,040 --> 00:23:03,130
it's going to be soon and and last but

00:23:00,280 --> 00:23:05,140
not least as multiple workgroups are

00:23:03,130 --> 00:23:07,660
working on components which should come

00:23:05,140 --> 00:23:11,470
into test as well which should be part

00:23:07,660 --> 00:23:13,210
of this one-stop solution so to say we

00:23:11,470 --> 00:23:16,210
want to integrate them pre integrate

00:23:13,210 --> 00:23:20,440
them that is specifically relevant for

00:23:16,210 --> 00:23:23,080
the software update mechanism which of

00:23:20,440 --> 00:23:25,300
course is a mechanism which will require

00:23:23,080 --> 00:23:26,740
some product specific customization but

00:23:25,300 --> 00:23:28,480
the existing patterns could be

00:23:26,740 --> 00:23:30,550
demonstrated this way and the existing

00:23:28,480 --> 00:23:32,740
components we integrate could be tested

00:23:30,550 --> 00:23:35,440
this way furthermore we are working on

00:23:32,740 --> 00:23:37,990
making the CIP core also certifiable

00:23:35,440 --> 00:23:40,470
according to IEC standards for security

00:23:37,990 --> 00:23:42,520
and for the mechanisms and further

00:23:40,470 --> 00:23:44,710
configurations and tools but we have to

00:23:42,520 --> 00:23:47,170
be integrated and those should also be

00:23:44,710 --> 00:23:53,500
integrated pre-integrated we are this

00:23:47,170 --> 00:23:55,120
CIP core layers so to summarize epi

00:23:53,500 --> 00:23:58,000
provides a long term maintained

00:23:55,120 --> 00:24:00,550
open-source base layer consisting of

00:23:58,000 --> 00:24:02,530
kernel and essential packages right now

00:24:00,550 --> 00:24:05,350
adding for other features in the future

00:24:02,530 --> 00:24:10,150
providing or aiming for a support time

00:24:05,350 --> 00:24:11,320
of 10 years plus we this year the coop

00:24:10,150 --> 00:24:13,510
project was here

00:24:11,320 --> 00:24:16,150
the work group a co-op work group within

00:24:13,510 --> 00:24:18,280
this project defines this package set

00:24:16,150 --> 00:24:20,470
based on the input of our members and of

00:24:18,280 --> 00:24:23,440
the work groups and shows the

00:24:20,470 --> 00:24:26,170
integration of these elements in in a

00:24:23,440 --> 00:24:26,980
central layer we have two flavors for

00:24:26,170 --> 00:24:30,490
these layers

00:24:26,980 --> 00:24:34,900
Debbie approach for smaller dr. Oh a

00:24:30,490 --> 00:24:37,900
compatible projects while the either CIP

00:24:34,900 --> 00:24:41,590
core is targeting a larger and Debian

00:24:37,900 --> 00:24:43,120
binary compatible projects both are

00:24:41,590 --> 00:24:45,070
still early in the stages but more

00:24:43,120 --> 00:24:47,230
features are to come around software

00:24:45,070 --> 00:24:51,430
updates and security hardening as I

00:24:47,230 --> 00:24:53,590
mentioned with that just one note we

00:24:51,430 --> 00:24:57,160
have a boost up there in the showcase

00:24:53,590 --> 00:25:00,460
room come and visit us look for the

00:24:57,160 --> 00:25:02,110
Labor figures there's also CIP mini

00:25:00,460 --> 00:25:05,560
summit on thirsty unfortunately already

00:25:02,110 --> 00:25:08,680
sold out but you can always approach us

00:25:05,560 --> 00:25:12,480
on question at the booth and when we

00:25:08,680 --> 00:25:12,480
around that thank you

00:25:14,160 --> 00:25:22,729
[Applause]

00:25:32,290 --> 00:25:38,770
so you're using Yocto to build the

00:25:35,110 --> 00:25:39,790
debian sources Yocto also comes with it

00:25:38,770 --> 00:25:42,429
on its own

00:25:39,790 --> 00:25:45,250
upstream provided sources why did you

00:25:42,429 --> 00:25:48,100
choose to Debian sources over the octo

00:25:45,250 --> 00:25:53,919
sources what are the pros and cons of

00:25:48,100 --> 00:25:57,910
each like yeah basically in the Yocto

00:25:53,919 --> 00:26:06,840
project sources upstream sources using

00:25:57,910 --> 00:26:11,230
the new project is the new world that is

00:26:06,840 --> 00:26:15,580
pros to use original the yoke to project

00:26:11,230 --> 00:26:17,190
meta teachers but at the same time the

00:26:15,580 --> 00:26:20,429
youth project metadata is not

00:26:17,190 --> 00:26:24,150
responsible for providing long-term

00:26:20,429 --> 00:26:29,200
support so that is why it's the most

00:26:24,150 --> 00:26:34,660
biggest reason we just to choose the

00:26:29,200 --> 00:26:41,370
tibia sources or as our target in the

00:26:34,660 --> 00:26:41,370
meta Debian and babies thank you

00:26:47,190 --> 00:26:50,190
sorry

00:26:55,770 --> 00:27:07,440
continue back to Jesus right a number

00:26:58,290 --> 00:27:12,870
Paul thank you

00:27:07,440 --> 00:27:15,870
thank you are there anything to solve

00:27:12,870 --> 00:27:19,590
license queering phrase are there any

00:27:15,870 --> 00:27:28,290
tools do you think or do you how do you

00:27:19,590 --> 00:27:33,600
think it is currently in a CA there is

00:27:28,290 --> 00:27:39,890
no activity as the CIP but actually any

00:27:33,600 --> 00:27:43,620
each company we are doing some clearance

00:27:39,890 --> 00:27:45,960
ways for example that we we mean that

00:27:43,620 --> 00:27:50,700
Toshiba compression are using the for

00:27:45,960 --> 00:27:54,990
serology to qualify the including

00:27:50,700 --> 00:27:57,240
licensing target and same situation at

00:27:54,990 --> 00:28:01,230
that cement so we are currently not yet

00:27:57,240 --> 00:28:03,480
in the more achievable more or a better

00:28:01,230 --> 00:28:05,760
situation to share things between the

00:28:03,480 --> 00:28:08,130
companies but inside our companies we

00:28:05,760 --> 00:28:09,630
are trying to make this single stop for

00:28:08,130 --> 00:28:12,390
the license carrying because currently

00:28:09,630 --> 00:28:15,060
the lawyers normally trust themselves

00:28:12,390 --> 00:28:18,180
and not the others to the clearing

00:28:15,060 --> 00:28:20,460
results are kind of confined at least

00:28:18,180 --> 00:28:22,410
for the binding results to the companies

00:28:20,460 --> 00:28:24,900
but inside the companies of course there

00:28:22,410 --> 00:28:26,640
is significant sharing possible this way

00:28:24,900 --> 00:28:29,850
and there's also one of the motivations

00:28:26,640 --> 00:28:32,490
to consolidate inside the companies on a

00:28:29,850 --> 00:28:34,410
base layers on base components on a base

00:28:32,490 --> 00:28:36,180
package set and providing the clearing

00:28:34,410 --> 00:28:39,170
results eternally at least in a

00:28:36,180 --> 00:28:39,170
shareable reasonable way

00:28:43,090 --> 00:28:56,200
too few mics sorry on high a question

00:28:54,340 --> 00:28:58,149
from my side so how do you handle the

00:28:56,200 --> 00:29:01,450
Yorkshire branch compatibility because

00:28:58,149 --> 00:29:09,429
Yocto moves fast and which issues do you

00:29:01,450 --> 00:29:15,639
have regarding Debbie approach in a tiny

00:29:09,429 --> 00:29:18,820
profile connect with the warrior 22.7

00:29:15,639 --> 00:29:24,179
maybe is the target of the target

00:29:18,820 --> 00:29:29,740
version of the project and it basically

00:29:24,179 --> 00:29:32,919
depends on this version so we have

00:29:29,740 --> 00:29:39,249
currently responsible for supporting and

00:29:32,919 --> 00:29:43,360
as apartment in depositories so that

00:29:39,249 --> 00:29:48,970
means if yeah we provide a one branch

00:29:43,360 --> 00:29:51,549
name warrior also in meta Debian

00:29:48,970 --> 00:29:54,090
repositories and we need to use a

00:29:51,549 --> 00:29:59,789
warrior branch of the meta Debian with

00:29:54,090 --> 00:30:03,659
pokey warrior branch at least you know

00:29:59,789 --> 00:30:03,659
answer for your question

00:30:06,269 --> 00:30:11,740
the second part was which issues do you

00:30:09,249 --> 00:30:15,249
have because at some point you will have

00:30:11,740 --> 00:30:18,279
to upgrade and there might be like big

00:30:15,249 --> 00:30:24,330
big big compatibility and others other

00:30:18,279 --> 00:30:29,139
things that at least bit by compatible

00:30:24,330 --> 00:30:32,820
there it is not compatible between the

00:30:29,139 --> 00:30:35,950
recipes in the open embedded core and

00:30:32,820 --> 00:30:38,440
recipes in the meta Debian because some

00:30:35,950 --> 00:30:45,419
of them depending on the implementation

00:30:38,440 --> 00:30:45,419
of pokey Lacey piece so inter case at

00:30:45,460 --> 00:30:59,320
last case we cannot we get errors in a

00:30:52,870 --> 00:31:01,770
bit big passing phase yep any other

00:30:59,320 --> 00:31:01,770
question

00:31:11,200 --> 00:31:19,359
otherwise thank you again

00:31:14,460 --> 00:31:19,359

YouTube URL: https://www.youtube.com/watch?v=2XXP7j4Jygk


