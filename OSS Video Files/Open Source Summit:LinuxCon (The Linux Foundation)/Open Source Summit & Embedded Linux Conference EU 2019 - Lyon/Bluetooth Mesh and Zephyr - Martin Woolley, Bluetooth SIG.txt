Title: Bluetooth Mesh and Zephyr - Martin Woolley, Bluetooth SIG
Publication date: 2019-10-29
Playlist: Open Source Summit & Embedded Linux Conference EU 2019 - Lyon
Description: 
	Bluetooth Mesh and Zephyr - Martin Woolley, Bluetooth SIG*

Bluetooth mesh was released in 2017 and allows secure networks of thousands of Bluetooth devices to be created. It uses Bluetooth Low Energy (LE) for radio communications and inherits its optimised, low power and other characteristics.

The Zephyr open source OS supports Bluetooth mesh on devices as affordable as the BBC micro:bit.

This session will explain the fundamental technical concepts of Bluetooth mesh, including models, messages, publish/subscribe, node composition and security keys and will explore whatâ€™s involved in implementing firmware that uses Bluetooth mesh on the Zephyr RTOS platform.
Captions: 
	00:00:00,800 --> 00:00:06,330
it looks like we're approaching the

00:00:04,170 --> 00:00:07,980
official start time I've got this

00:00:06,330 --> 00:00:10,050
horrible feeling that the way the system

00:00:07,980 --> 00:00:12,000
works is that I meant to be professional

00:00:10,050 --> 00:00:13,469
and know what I'm doing and therefore

00:00:12,000 --> 00:00:14,130
start on time no one's going to tell me

00:00:13,469 --> 00:00:19,529
what to do

00:00:14,130 --> 00:00:22,470
she's always disconcerting people just

00:00:19,529 --> 00:00:23,939
arriving welcome there are very exciting

00:00:22,470 --> 00:00:25,109
free stickers but I'm not going to be

00:00:23,939 --> 00:00:26,519
able to come down into the audience

00:00:25,109 --> 00:00:29,010
right now because I'm due to start so

00:00:26,519 --> 00:00:36,090
make sure you get one before you go they

00:00:29,010 --> 00:00:37,800
are the perfect Christmas gift okay so I

00:00:36,090 --> 00:00:40,680
think I'll starts if that's okay

00:00:37,800 --> 00:00:44,010
as people are taking their seats I'll

00:00:40,680 --> 00:00:46,500
just pause briefly out will start I'll

00:00:44,010 --> 00:00:49,110
introduce myself so hi again thanks for

00:00:46,500 --> 00:00:50,789
coming because I do know there are lots

00:00:49,110 --> 00:00:52,620
and lots of really interesting looking

00:00:50,789 --> 00:00:53,850
talks going on right now and you've

00:00:52,620 --> 00:00:55,320
chosen to come to this one for some

00:00:53,850 --> 00:00:56,699
reason maybe you heard about the free

00:00:55,320 --> 00:00:57,239
stickers and that was enough to get you

00:00:56,699 --> 00:01:00,840
in the room

00:00:57,239 --> 00:01:02,280
job done so I'm Martin and I work for

00:01:00,840 --> 00:01:04,049
the Bluetooth special interest group who

00:01:02,280 --> 00:01:05,850
are the standards organization behind

00:01:04,049 --> 00:01:07,710
Bluetooth technology so we don't make

00:01:05,850 --> 00:01:10,040
things we're a manufacturer which is

00:01:07,710 --> 00:01:13,320
concerned with specifications and

00:01:10,040 --> 00:01:16,799
evolution of the technology and so on so

00:01:13,320 --> 00:01:19,650
I'm talking here about Bluetooth mesh

00:01:16,799 --> 00:01:22,890
with a bit of a nod to Zephir C bit of

00:01:19,650 --> 00:01:24,420
code later on I'm talking this afternoon

00:01:22,890 --> 00:01:27,630
about a much newer Bluetooth feature

00:01:24,420 --> 00:01:31,500
which is radio direction-finding and

00:01:27,630 --> 00:01:34,890
location services as a 225 so lots to

00:01:31,500 --> 00:01:37,640
cover let's make a start just to get

00:01:34,890 --> 00:01:41,909
orientated then there are kind of three

00:01:37,640 --> 00:01:44,009
main Bluetooth technologies now so be

00:01:41,909 --> 00:01:44,490
our EDR that's basic rate enhanced data

00:01:44,009 --> 00:01:46,380
rates

00:01:44,490 --> 00:01:48,030
that's the original bluetooth bluetooth

00:01:46,380 --> 00:01:50,430
it's like 20 years old male which is

00:01:48,030 --> 00:01:52,649
quite remarkable it's still around

00:01:50,430 --> 00:01:54,570
though it's great at streaming data from

00:01:52,649 --> 00:01:55,799
you know one device to another kind of

00:01:54,570 --> 00:01:58,500
device to device point-to-point

00:01:55,799 --> 00:02:03,450
connection used in audio quite a lot at

00:01:58,500 --> 00:02:04,649
the moment Bluetooth Low Energy kind of

00:02:03,450 --> 00:02:06,180
can do the same things it can do

00:02:04,649 --> 00:02:07,380
point-to-point connections but it can

00:02:06,180 --> 00:02:09,090
also broadcast

00:02:07,380 --> 00:02:11,129
so that's connectionless communication

00:02:09,090 --> 00:02:12,540
something I mentioned later on in the

00:02:11,129 --> 00:02:14,099
context of blue team

00:02:12,540 --> 00:02:15,769
mesh and of course it's very power

00:02:14,099 --> 00:02:17,760
efficient it's a low-power wireless

00:02:15,769 --> 00:02:19,680
communication technology that's the

00:02:17,760 --> 00:02:22,590
category and then we have this thing

00:02:19,680 --> 00:02:24,989
called Bluetooth mesh the specification

00:02:22,590 --> 00:02:26,909
for which was released two years ago

00:02:24,989 --> 00:02:29,519
it's not a wireless communication

00:02:26,909 --> 00:02:33,180
technology it's a networking stack which

00:02:29,519 --> 00:02:35,459
uses blue Bluetooth Low Energy for radio

00:02:33,180 --> 00:02:36,689
communications talk more about that in a

00:02:35,459 --> 00:02:38,459
moment I think there are something like

00:02:36,689 --> 00:02:41,250
200 Bluetooth mesh products certified

00:02:38,459 --> 00:02:44,489
now which is actually huge in that sort

00:02:41,250 --> 00:02:45,930
of time period relative to other things

00:02:44,489 --> 00:02:51,870
I've seen in the market with other

00:02:45,930 --> 00:02:52,169
technologies so press this button thank

00:02:51,870 --> 00:02:54,689
you

00:02:52,169 --> 00:02:58,909
naughty laptop wasn't behaving there we

00:02:54,689 --> 00:03:01,200
go so let's start here it's kind of

00:02:58,909 --> 00:03:03,000
almost not valid now to talk about the

00:03:01,200 --> 00:03:05,819
Bluetooth stack because in fact there

00:03:03,000 --> 00:03:08,669
are several standard configurations of

00:03:05,819 --> 00:03:11,430
stack that we we have in the spec and

00:03:08,669 --> 00:03:12,659
the one on screen light right now is is

00:03:11,430 --> 00:03:15,500
the one you have on your smart phones

00:03:12,659 --> 00:03:17,549
and in things like smartwatches and

00:03:15,500 --> 00:03:18,989
activity trackers and heart rate

00:03:17,549 --> 00:03:22,260
monitors and those kinds of kind of

00:03:18,989 --> 00:03:23,909
connectible bluetooth devices as always

00:03:22,260 --> 00:03:25,409
the architecture breaks down into two

00:03:23,909 --> 00:03:27,569
major parts we've got a controller

00:03:25,409 --> 00:03:29,010
controller at the bottom there are

00:03:27,569 --> 00:03:31,620
choices of controllers that's the

00:03:29,010 --> 00:03:34,680
Bluetooth Low Energy controller in this

00:03:31,620 --> 00:03:36,569
case takes care of stuff right into

00:03:34,680 --> 00:03:38,729
interfaces directly with the radio takes

00:03:36,569 --> 00:03:40,680
care of analog things didn't learn such

00:03:38,729 --> 00:03:43,109
as modulation schemes blah blah blah and

00:03:40,680 --> 00:03:45,449
then the other major architectural

00:03:43,109 --> 00:03:47,000
component is called the host in this

00:03:45,449 --> 00:03:49,639
case you can see layers from the

00:03:47,000 --> 00:03:51,840
Bluetooth stack which enable

00:03:49,639 --> 00:03:53,780
communication in interaction with those

00:03:51,840 --> 00:03:56,310
connectible devices like activity

00:03:53,780 --> 00:03:59,549
truckers who's worked with Bluetooth

00:03:56,310 --> 00:04:01,530
low-energy maybe on projects so quite a

00:03:59,549 --> 00:04:04,530
few of you are already familiar with

00:04:01,530 --> 00:04:07,919
terms like gaps and gap and apps these

00:04:04,530 --> 00:04:11,220
are acronyms from that variant of the

00:04:07,919 --> 00:04:14,189
Bluetooth stack so that's what you do

00:04:11,220 --> 00:04:15,989
have on devices like phones what you

00:04:14,189 --> 00:04:18,810
don't have though is this variant of the

00:04:15,989 --> 00:04:21,150
stack this is Bluetooth mesh so all of

00:04:18,810 --> 00:04:22,409
the Bluetooth mesh stack layers live

00:04:21,150 --> 00:04:24,930
inside the host and there they are

00:04:22,409 --> 00:04:26,310
depicted on-screen if you're a staff

00:04:24,930 --> 00:04:27,900
developer your interest

00:04:26,310 --> 00:04:30,720
in all of them and you will need to read

00:04:27,900 --> 00:04:34,470
the spec if your developer who creates

00:04:30,720 --> 00:04:36,330
firmware for products then you're

00:04:34,470 --> 00:04:37,740
probably mostly interested in the very

00:04:36,330 --> 00:04:39,360
top of the stack you'll be working with

00:04:37,740 --> 00:04:40,940
things called models talk more about

00:04:39,360 --> 00:04:42,780
that in a moment

00:04:40,940 --> 00:04:44,280
importantly down at the bottom of the

00:04:42,780 --> 00:04:46,200
stack we have bearers and they define

00:04:44,280 --> 00:04:48,630
how Bluetooth low energies controller is

00:04:46,200 --> 00:04:50,730
used for radio communication and there's

00:04:48,630 --> 00:04:52,650
a couple of difference bearers defines

00:04:50,730 --> 00:04:56,610
today with possibilities for the future

00:04:52,650 --> 00:04:59,910
to do other things some mesh devices

00:04:56,610 --> 00:05:04,410
have both these stack variants and we'll

00:04:59,910 --> 00:05:06,120
see that hopefully later on so I'll

00:05:04,410 --> 00:05:07,770
start you off kind of assuming that it's

00:05:06,120 --> 00:05:09,360
a new subject for you with some basic

00:05:07,770 --> 00:05:11,669
concepts starting with some sort of

00:05:09,360 --> 00:05:15,360
network level things some terminology

00:05:11,669 --> 00:05:17,400
and kind of network level behaviors so

00:05:15,360 --> 00:05:18,810
three words all start with multi so you

00:05:17,400 --> 00:05:21,990
know remember that for the test that

00:05:18,810 --> 00:05:25,290
follows multi-hop multipath and

00:05:21,990 --> 00:05:26,940
multicast everything's message oriented

00:05:25,290 --> 00:05:28,530
so devices communicate with each other

00:05:26,940 --> 00:05:30,210
by sending messages there are lots of

00:05:28,530 --> 00:05:33,539
types and messages they're all in a spec

00:05:30,210 --> 00:05:36,169
as you'd expect but messages can travel

00:05:33,539 --> 00:05:40,080
right across the network far further

00:05:36,169 --> 00:05:41,940
than radio range would normally suggest

00:05:40,080 --> 00:05:43,770
so normally were constrained by the

00:05:41,940 --> 00:05:45,810
range that our radio has for wireless

00:05:43,770 --> 00:05:47,940
communication but in a mesh network

00:05:45,810 --> 00:05:50,370
messages hop across the network from

00:05:47,940 --> 00:05:51,780
device to device to device process

00:05:50,370 --> 00:05:54,000
called relaying which I'll talk more

00:05:51,780 --> 00:05:55,620
about in a moment so that gives us

00:05:54,000 --> 00:05:58,310
enormous coverage you can have big

00:05:55,620 --> 00:06:01,950
networks containing up to 32,000 plus

00:05:58,310 --> 00:06:03,180
devices covering very large areas whole

00:06:01,950 --> 00:06:05,400
buildings buildings like this one

00:06:03,180 --> 00:06:06,840
collections of buildings maybe even

00:06:05,400 --> 00:06:09,210
neighborhoods I know someone working on

00:06:06,840 --> 00:06:11,130
a project looking at Bluetooth mesh in a

00:06:09,210 --> 00:06:13,950
neighborhood context so that's multi-hop

00:06:11,130 --> 00:06:16,650
gives us very very wide coverage to do

00:06:13,950 --> 00:06:18,600
up to 127 hops by the way and the

00:06:16,650 --> 00:06:22,380
point-to-point range between devices is

00:06:18,600 --> 00:06:24,630
far larger than you perhaps think it is

00:06:22,380 --> 00:06:26,310
if you look at Bluetooth comm today

00:06:24,630 --> 00:06:28,830
you'll see we've got a thing going on

00:06:26,310 --> 00:06:32,010
looking to dispel myths about Bluetooth

00:06:28,830 --> 00:06:34,229
and range it's not 20 meters it's over a

00:06:32,010 --> 00:06:37,140
kilometer these days okay not saying

00:06:34,229 --> 00:06:39,030
you'll get that in a building but the

00:06:37,140 --> 00:06:40,240
basic building blocks relation to range

00:06:39,030 --> 00:06:41,610
are very very positive

00:06:40,240 --> 00:06:44,830
very healthy with Bluetooth these days

00:06:41,610 --> 00:06:46,180
so we can do up to 127 hops but you can

00:06:44,830 --> 00:06:47,860
control that you wouldn't want all your

00:06:46,180 --> 00:06:49,449
messages traveling all the way across

00:06:47,860 --> 00:06:51,520
them via the network so you can

00:06:49,449 --> 00:06:53,590
configure kind of maximum number of hops

00:06:51,520 --> 00:06:55,860
and you can control that from code as

00:06:53,590 --> 00:06:59,110
well if I was controlling I was

00:06:55,860 --> 00:07:01,060
programming a switch to control all the

00:06:59,110 --> 00:07:02,710
lights in this room they're almost

00:07:01,060 --> 00:07:04,180
certainly all in direct range so we

00:07:02,710 --> 00:07:06,520
actually don't want any hopping to take

00:07:04,180 --> 00:07:07,240
place at all so I can make sure that's

00:07:06,520 --> 00:07:10,330
the case

00:07:07,240 --> 00:07:13,630
oh sorry so that was multi-hop multipath

00:07:10,330 --> 00:07:15,909
actually is about reliability like any

00:07:13,630 --> 00:07:17,620
networking technology we kind of have to

00:07:15,909 --> 00:07:19,659
do some thinking about network design

00:07:17,620 --> 00:07:22,180
it's not too hard to be honest with a

00:07:19,659 --> 00:07:25,319
Bluetooth mesh network but one of the

00:07:22,180 --> 00:07:27,569
things you'll do is think about

00:07:25,319 --> 00:07:30,789
reliability and with not a great deal of

00:07:27,569 --> 00:07:34,030
brainpower required your network will

00:07:30,789 --> 00:07:35,710
work such that without any extra effort

00:07:34,030 --> 00:07:38,520
on the part of the developer and without

00:07:35,710 --> 00:07:40,960
centralized complex routing tables

00:07:38,520 --> 00:07:43,810
multiple copies of every message sent

00:07:40,960 --> 00:07:46,469
will travel via different paths through

00:07:43,810 --> 00:07:49,120
the network to the destination devices

00:07:46,469 --> 00:07:51,699
that are being targeted okay so this

00:07:49,120 --> 00:07:53,560
gives us kind of redundancy one of those

00:07:51,699 --> 00:07:54,789
paths is broken not a problem

00:07:53,560 --> 00:07:56,169
because one of the other copies will

00:07:54,789 --> 00:07:58,750
make it through one of the other paths

00:07:56,169 --> 00:08:00,669
to its destination and when duplicates

00:07:58,750 --> 00:08:04,060
arrive the first is acted upon the rest

00:08:00,669 --> 00:08:05,469
just get ignored okay multicast means

00:08:04,060 --> 00:08:07,030
exactly what it always means this is

00:08:05,469 --> 00:08:09,610
about one device addressing multiple

00:08:07,030 --> 00:08:11,380
devices actually quite a complex

00:08:09,610 --> 00:08:14,919
engineering problem in the world of

00:08:11,380 --> 00:08:16,300
wireless communication read RFC and I'm

00:08:14,919 --> 00:08:17,560
looking at my notes here three one seven

00:08:16,300 --> 00:08:19,060
oh because I can never remember the

00:08:17,560 --> 00:08:21,370
number three one seven oh there's IP

00:08:19,060 --> 00:08:22,990
multicast applications it's got nothing

00:08:21,370 --> 00:08:24,789
to do with Bluetooth but it does lay out

00:08:22,990 --> 00:08:27,099
some of the problems to do with

00:08:24,789 --> 00:08:29,139
multicast communication really really

00:08:27,099 --> 00:08:31,300
nicely and bluetooth takes a really

00:08:29,139 --> 00:08:34,599
interesting approach to multicast

00:08:31,300 --> 00:08:35,890
communication in mesh networking and in

00:08:34,599 --> 00:08:37,839
fact it's kind of assumed that all

00:08:35,890 --> 00:08:40,479
operations are multicast support from a

00:08:37,839 --> 00:08:44,110
small number entire systems built around

00:08:40,479 --> 00:08:47,410
this idea multicast communication gives

00:08:44,110 --> 00:08:49,529
you immense scalability you're probably

00:08:47,410 --> 00:08:51,790
number one constraint and scaling a

00:08:49,529 --> 00:08:54,230
wireless mesh network

00:08:51,790 --> 00:08:57,019
concerns how efficiently or otherwise

00:08:54,230 --> 00:09:00,319
you use the radio spectrum how long

00:08:57,019 --> 00:09:03,139
you're occupying a frequency for such

00:09:00,319 --> 00:09:05,089
that some operation is initiated in the

00:09:03,139 --> 00:09:07,730
network okay so big message is

00:09:05,089 --> 00:09:09,350
transmitted slowly are gonna occupy a

00:09:07,730 --> 00:09:11,149
frequency for a long time and stop other

00:09:09,350 --> 00:09:13,430
devices from communicating during that

00:09:11,149 --> 00:09:15,949
time slot small highly optimized

00:09:13,430 --> 00:09:17,809
messages transmitted quickly through the

00:09:15,949 --> 00:09:21,620
air with a very fast symbol rate which

00:09:17,809 --> 00:09:23,569
Bluetooth has and addressing multiple

00:09:21,620 --> 00:09:26,420
devices all the one hits that's how you

00:09:23,569 --> 00:09:28,550
get best scalability one tiny message to

00:09:26,420 --> 00:09:32,839
control all the lights in this room so

00:09:28,550 --> 00:09:36,019
that's about scalability we talk about

00:09:32,839 --> 00:09:38,120
individual devices now so devices that

00:09:36,019 --> 00:09:40,040
are members of our network in terms of

00:09:38,120 --> 00:09:41,509
terminology we call them nodes I'll tell

00:09:40,040 --> 00:09:44,990
you how they become a member later on

00:09:41,509 --> 00:09:47,990
and we don't really have any special

00:09:44,990 --> 00:09:51,170
kind of blackbox networking devices

00:09:47,990 --> 00:09:52,519
defined or needed in the world a

00:09:51,170 --> 00:09:54,649
Bluetooth mesh there's some special

00:09:52,519 --> 00:09:56,990
roles that devices can have providing

00:09:54,649 --> 00:09:58,970
network services various sorts within

00:09:56,990 --> 00:10:00,860
the network it's all software so in

00:09:58,970 --> 00:10:03,410
principle any device running a Bluetooth

00:10:00,860 --> 00:10:05,720
nest AK through configuration can be

00:10:03,410 --> 00:10:09,860
told we want you to have this particular

00:10:05,720 --> 00:10:11,059
special role in the network please four

00:10:09,860 --> 00:10:13,579
of them and the first one I've kind of

00:10:11,059 --> 00:10:15,379
hinted at already and that's to relay so

00:10:13,579 --> 00:10:17,269
that multi-hop capability where we hop

00:10:15,379 --> 00:10:20,089
across the network that's a consequence

00:10:17,269 --> 00:10:24,139
of devices acting as relays and actually

00:10:20,089 --> 00:10:27,050
so is multipath all the relay does is it

00:10:24,139 --> 00:10:29,089
will receive any mesh communication

00:10:27,050 --> 00:10:31,040
going on that's in range of it in terms

00:10:29,089 --> 00:10:33,410
of radio range and it will repeat it

00:10:31,040 --> 00:10:35,170
it'll broadcast it again I've got two

00:10:33,410 --> 00:10:38,059
relays different ends of this room maybe

00:10:35,170 --> 00:10:39,559
that are in range of every transmitting

00:10:38,059 --> 00:10:42,589
device in this room they'll both re

00:10:39,559 --> 00:10:44,300
transmit the messages they receive and

00:10:42,589 --> 00:10:46,490
that's how we get multipath it's really

00:10:44,300 --> 00:10:49,339
really simple but very effective the

00:10:46,490 --> 00:10:51,290
point is we don't need routing tables to

00:10:49,339 --> 00:10:52,790
be centrally maintained and replicated

00:10:51,290 --> 00:10:54,379
across the network and fixed when they

00:10:52,790 --> 00:10:58,059
break which is how some other things do

00:10:54,379 --> 00:11:01,279
it there's a whole world of complexity

00:10:58,059 --> 00:11:04,160
one issue with relays some of you

00:11:01,279 --> 00:11:05,120
probably already thinking is that given

00:11:04,160 --> 00:11:07,910
the importance

00:11:05,120 --> 00:11:10,880
of looking after our finites radio

00:11:07,910 --> 00:11:12,470
spectrum relays of course repeat things

00:11:10,880 --> 00:11:14,180
that they hear so they're gonna use some

00:11:12,470 --> 00:11:18,020
of your radio spectrum so you don't have

00:11:14,180 --> 00:11:19,250
too many of them rough rule of thumb 5%

00:11:18,020 --> 00:11:20,690
of your nodes are probably going to be

00:11:19,250 --> 00:11:24,320
relays but you have to figure that out

00:11:20,690 --> 00:11:25,820
on a case-by-case basis too many it's

00:11:24,320 --> 00:11:27,110
not going to scale well you kind of

00:11:25,820 --> 00:11:32,300
create a little storm if you're not

00:11:27,110 --> 00:11:34,100
careful next two roles can work together

00:11:32,300 --> 00:11:36,080
we've got things for low-power nodes and

00:11:34,100 --> 00:11:38,570
friends again this is a configuration

00:11:36,080 --> 00:11:41,510
for like you switch on devices that you

00:11:38,570 --> 00:11:42,770
choose the point here is that some

00:11:41,510 --> 00:11:46,330
devices are going to be kind of very

00:11:42,770 --> 00:11:48,589
power poor maybe they run of batteries

00:11:46,330 --> 00:11:50,150
others will be what we call power rich

00:11:48,589 --> 00:11:53,350
they're connected to the mains to the

00:11:50,150 --> 00:11:57,170
grid power availability not a problem

00:11:53,350 --> 00:11:59,210
the power poor devices in some

00:11:57,170 --> 00:12:00,890
situations not relation to Bluetooth

00:11:59,210 --> 00:12:02,720
mesh maybe we don't have to worry about

00:12:00,890 --> 00:12:04,480
that too much because they only use the

00:12:02,720 --> 00:12:06,260
radio which is what uses our power

00:12:04,480 --> 00:12:09,020
occasionally they transmit a message

00:12:06,260 --> 00:12:10,610
twice a year we're not generally worried

00:12:09,020 --> 00:12:12,500
about devices like that but in the

00:12:10,610 --> 00:12:15,140
context of Bluetooth mesh we still are

00:12:12,500 --> 00:12:17,089
because even those devices need to be

00:12:15,140 --> 00:12:19,040
able to receive messages from across the

00:12:17,089 --> 00:12:20,660
network there are system messages

00:12:19,040 --> 00:12:23,720
flowing around the network from time to

00:12:20,660 --> 00:12:26,240
time for example consequently the radio

00:12:23,720 --> 00:12:28,010
has to be on and receive mode some

00:12:26,240 --> 00:12:29,510
proportion of the time such that

00:12:28,010 --> 00:12:31,880
messages can be received and that's

00:12:29,510 --> 00:12:34,910
going to use power so it's seemingly at

00:12:31,880 --> 00:12:38,120
dilemma how do we take a power efficient

00:12:34,910 --> 00:12:40,130
approach to power poor devices that are

00:12:38,120 --> 00:12:41,420
perhaps battery-powered and the answer

00:12:40,130 --> 00:12:43,279
comes through this thing called

00:12:41,420 --> 00:12:46,970
friendship I kid you not that is the

00:12:43,279 --> 00:12:48,680
technical term it's in the spec so you

00:12:46,970 --> 00:12:50,990
in setting up your network will

00:12:48,680 --> 00:12:53,690
designate some devices as low-power

00:12:50,990 --> 00:12:56,750
notes and some as friends meaning

00:12:53,690 --> 00:12:58,550
devices that are not powerful and can

00:12:56,750 --> 00:13:02,080
lend some assistance to the low power

00:12:58,550 --> 00:13:04,430
nodes and the stack defines a protocol

00:13:02,080 --> 00:13:06,140
whereby when you first switch on your

00:13:04,430 --> 00:13:09,200
low-power node it can dynamically

00:13:06,140 --> 00:13:10,730
discover nodes that are friends and

00:13:09,200 --> 00:13:12,800
which are in range to have a little

00:13:10,730 --> 00:13:14,959
conversation establish a relationship

00:13:12,800 --> 00:13:17,030
called friendship and after that point

00:13:14,959 --> 00:13:18,480
the two work together with the friend

00:13:17,030 --> 00:13:20,040
doing the heavy lifting

00:13:18,480 --> 00:13:23,130
the low-power note goes to sleep his

00:13:20,040 --> 00:13:26,579
radio is now off using next to no power

00:13:23,130 --> 00:13:28,589
doing whatever it needs to do excuse me

00:13:26,579 --> 00:13:30,720
and then any messages that need to be

00:13:28,589 --> 00:13:33,810
delivered to the low-power node in this

00:13:30,720 --> 00:13:36,180
case I've got a sensor actually get

00:13:33,810 --> 00:13:39,540
delivered to the friend where they're

00:13:36,180 --> 00:13:41,279
stored for safekeeping and according to

00:13:39,540 --> 00:13:43,410
some frequency you configure maybe once

00:13:41,279 --> 00:13:45,690
a day the low-power now it's going to

00:13:43,410 --> 00:13:47,670
wake up switches radio on use the

00:13:45,690 --> 00:13:49,019
protocol to send a message to its friend

00:13:47,670 --> 00:13:51,870
to say have you got a new message is

00:13:49,019 --> 00:13:53,820
stored for me stay awake now in receive

00:13:51,870 --> 00:13:56,430
mode those messages get delivered back

00:13:53,820 --> 00:13:58,019
I'm now going back to sleep again so

00:13:56,430 --> 00:14:00,750
that's how low-power nodes and friends

00:13:58,019 --> 00:14:06,570
work together so that power can be

00:14:00,750 --> 00:14:11,070
efficiently used so our last role is

00:14:06,570 --> 00:14:14,430
called the proxy and I kind of hinted at

00:14:11,070 --> 00:14:15,480
proxies earlier on because proxies walk

00:14:14,430 --> 00:14:18,240
away from the microphone and keep

00:14:15,480 --> 00:14:19,949
talking proxies are the type of

00:14:18,240 --> 00:14:21,720
Bluetooth mesh device to have both of

00:14:19,949 --> 00:14:23,459
those stock variants that I showed you

00:14:21,720 --> 00:14:24,750
at the beginning on them they both

00:14:23,459 --> 00:14:27,390
support the world of GATS

00:14:24,750 --> 00:14:29,310
gap and the attribute protocol which our

00:14:27,390 --> 00:14:31,230
connectable devices use which your smart

00:14:29,310 --> 00:14:33,300
phones support which my laptop supports

00:14:31,230 --> 00:14:34,890
and so on and they have a mesh stuck on

00:14:33,300 --> 00:14:37,190
them as well bit more memory needed but

00:14:34,890 --> 00:14:39,120
they are dual role and consequently

00:14:37,190 --> 00:14:40,649
proxy knows which can either be

00:14:39,120 --> 00:14:43,380
dedicated devices or it could be

00:14:40,649 --> 00:14:45,540
something convenient like a lights can

00:14:43,380 --> 00:14:48,720
provide a kind of interface from one

00:14:45,540 --> 00:14:50,640
version of bluetooth to the other and in

00:14:48,720 --> 00:14:53,459
fact there's a protocol called the proxy

00:14:50,640 --> 00:14:56,550
protocol that lets me encapsulate mesh

00:14:53,459 --> 00:14:59,519
network PDUs inside these proxy things

00:14:56,550 --> 00:15:01,829
which I can write to my proxy device it

00:14:59,519 --> 00:15:03,839
unwraps them and relays them into the

00:15:01,829 --> 00:15:05,630
mesh network and vice versa if you're

00:15:03,839 --> 00:15:07,829
familiar with Bluetooth notifications

00:15:05,630 --> 00:15:09,540
mesh messages will be turned into

00:15:07,829 --> 00:15:11,069
notifications by your proxy and

00:15:09,540 --> 00:15:12,690
delivered to the connected Bluetooth

00:15:11,069 --> 00:15:15,959
device your smart phone your laptop or

00:15:12,690 --> 00:15:18,750
whatever sometimes we need graphical

00:15:15,959 --> 00:15:20,399
user interfaces as part of our mesh

00:15:18,750 --> 00:15:21,899
network not tiny molecular controller

00:15:20,399 --> 00:15:24,630
stuff we need people to be able to

00:15:21,899 --> 00:15:26,550
monitor and control systems in industry

00:15:24,630 --> 00:15:30,029
and smart buildings or wherever our

00:15:26,550 --> 00:15:31,860
network has been deployed so

00:15:30,029 --> 00:15:33,329
communication interaction and

00:15:31,860 --> 00:15:36,209
an already hinted at some of this stuff

00:15:33,329 --> 00:15:38,579
again it's all message oriented so there

00:15:36,209 --> 00:15:40,140
are several specifications three in

00:15:38,579 --> 00:15:43,079
total actually that cover the entirety

00:15:40,140 --> 00:15:44,880
of Bluetooth mesh one of them defines

00:15:43,079 --> 00:15:49,350
things called models which I'll come on

00:15:44,880 --> 00:15:52,320
to messages and States so states are

00:15:49,350 --> 00:15:56,540
data items that have names take certain

00:15:52,320 --> 00:15:59,399
values reflect some aspects of a device

00:15:56,540 --> 00:16:01,200
message is act upon those state values

00:15:59,399 --> 00:16:02,730
better so for every state type that

00:16:01,200 --> 00:16:05,870
there is in the spec there are at least

00:16:02,730 --> 00:16:10,440
or there are four message types defined

00:16:05,870 --> 00:16:13,740
the four types are set which of course

00:16:10,440 --> 00:16:15,480
lets me change a given state in one or

00:16:13,740 --> 00:16:17,459
more remote devices so the simplest

00:16:15,480 --> 00:16:22,410
example is on/off there's a state called

00:16:17,459 --> 00:16:24,690
generic on/off if I send a set message a

00:16:22,410 --> 00:16:27,209
generic on offset message I can change

00:16:24,690 --> 00:16:30,350
the state of remote target devices from

00:16:27,209 --> 00:16:32,640
off to on from on top simple stuff right

00:16:30,350 --> 00:16:35,550
there are get messages which let me

00:16:32,640 --> 00:16:37,620
query the state of remote devices and

00:16:35,550 --> 00:16:40,380
they will reply with a status message

00:16:37,620 --> 00:16:42,180
that contains that value you can send

00:16:40,380 --> 00:16:45,149
status messages anytime you want just to

00:16:42,180 --> 00:16:47,130
report your state and so on so that's

00:16:45,149 --> 00:16:48,959
three but in fact there are two types of

00:16:47,130 --> 00:16:51,390
set message which gives us our four

00:16:48,959 --> 00:16:53,760
because we have acknowledged set

00:16:51,390 --> 00:16:56,579
messages if I send one of those I'm

00:16:53,760 --> 00:16:58,949
gonna get a reply to confirm it was

00:16:56,579 --> 00:17:01,800
received and acted upon that reply is a

00:16:58,949 --> 00:17:03,209
status message but I also have set on

00:17:01,800 --> 00:17:05,910
that knowledge two messages you are I

00:17:03,209 --> 00:17:08,339
send my message and I get no reply now

00:17:05,910 --> 00:17:09,839
I'm fairly sure everyone who's ever

00:17:08,339 --> 00:17:12,540
worked with the protocol has worked with

00:17:09,839 --> 00:17:13,980
a request response style protocol that's

00:17:12,540 --> 00:17:17,069
the most common form that they are from

00:17:13,980 --> 00:17:19,500
HTTP onwards so you might assume that

00:17:17,069 --> 00:17:20,939
that's what we use in Bluetooth mesh but

00:17:19,500 --> 00:17:24,209
in actual fact it's not it's rare that

00:17:20,939 --> 00:17:25,230
you use at knowledge messages generally

00:17:24,209 --> 00:17:28,110
speaking you're going to use

00:17:25,230 --> 00:17:31,380
unacknowledged messages and as briefly

00:17:28,110 --> 00:17:35,040
as I can here's the reason complexity

00:17:31,380 --> 00:17:36,660
grows very very rapidly in mesh

00:17:35,040 --> 00:17:40,020
networking especially with multicast

00:17:36,660 --> 00:17:42,030
operations if I flick a switch on the

00:17:40,020 --> 00:17:43,070
wall to switch all the lights in this

00:17:42,030 --> 00:17:44,330
room on Forex

00:17:43,070 --> 00:17:46,460
important and how many lights there are

00:17:44,330 --> 00:17:50,090
in here let's say there are 50 I'm I

00:17:46,460 --> 00:17:51,950
send an acknowledgement back

00:17:50,090 --> 00:17:54,790
assuming all those messages are received

00:17:51,950 --> 00:17:56,990
and acted upon the first time around

00:17:54,790 --> 00:17:59,390
that's what you know immediately as a

00:17:56,990 --> 00:18:01,730
spike in traffic of course I might not

00:17:59,390 --> 00:18:02,960
receive responses from all of them so

00:18:01,730 --> 00:18:05,330
I'm gonna have to have some time out

00:18:02,960 --> 00:18:07,010
process you now while I wait I'm also

00:18:05,330 --> 00:18:10,190
gonna need to know the identities of

00:18:07,010 --> 00:18:11,870
every device that I expected to respond

00:18:10,190 --> 00:18:14,900
to that message that's information I

00:18:11,870 --> 00:18:16,820
have to have somewhere hmm okay getting

00:18:14,900 --> 00:18:19,190
a bit more complicated and having

00:18:16,820 --> 00:18:21,290
realized after my 10 second timeout

00:18:19,190 --> 00:18:23,090
window or whatever that three of them

00:18:21,290 --> 00:18:26,960
didn't reply I now need some kind of

00:18:23,090 --> 00:18:27,650
retry logic and the same it kind of

00:18:26,960 --> 00:18:29,570
repeats itself

00:18:27,650 --> 00:18:31,220
so very quickly complexity scaled and we

00:18:29,570 --> 00:18:32,690
start to eat done with really quickly

00:18:31,220 --> 00:18:33,950
you can generate storms very very

00:18:32,690 --> 00:18:36,050
quickly indeed if you're not careful

00:18:33,950 --> 00:18:38,030
read that RFC which is not about

00:18:36,050 --> 00:18:40,010
Bluetooth but it's it talks about all

00:18:38,030 --> 00:18:42,710
this stuff so we take a different

00:18:40,010 --> 00:18:44,540
approach because one of the kind of

00:18:42,710 --> 00:18:46,190
subject headings here is reliability how

00:18:44,540 --> 00:18:47,900
do I know it worked well you don't have

00:18:46,190 --> 00:18:49,490
to know that it worked what you have to

00:18:47,900 --> 00:18:52,100
do is take steps to ensure that it

00:18:49,490 --> 00:18:53,510
almost certainly does wireless

00:18:52,100 --> 00:18:54,320
communication that's the best you can

00:18:53,510 --> 00:18:56,240
ever hope for

00:18:54,320 --> 00:18:57,730
almost certainly okay there's always

00:18:56,240 --> 00:19:00,340
going to be a probability that

00:18:57,730 --> 00:19:03,320
communication fails someone could have

00:19:00,340 --> 00:19:05,990
half a dozen microwave ovens switched on

00:19:03,320 --> 00:19:07,670
with the door open saturating that part

00:19:05,990 --> 00:19:10,090
of the radio spectrum you might find

00:19:07,670 --> 00:19:13,580
your stuff doesn't work anymore okay so

00:19:10,090 --> 00:19:16,040
we take a probabilistic so how you say

00:19:13,580 --> 00:19:18,500
it probabilistic stochastic I can say

00:19:16,040 --> 00:19:20,540
that kind of approach to reliability

00:19:18,500 --> 00:19:23,000
here and low down in the stack at the

00:19:20,540 --> 00:19:26,540
network layer you can configure your

00:19:23,000 --> 00:19:28,760
device to send the same message handed

00:19:26,540 --> 00:19:30,950
from higher in the stack multiple times

00:19:28,760 --> 00:19:32,510
maybe two times maybe three times in

00:19:30,950 --> 00:19:35,300
rapid succession

00:19:32,510 --> 00:19:37,610
maybe with twenty or 160 millisecond

00:19:35,300 --> 00:19:40,160
gaps between them and here's what that

00:19:37,610 --> 00:19:42,200
does imagine and these are not real

00:19:40,160 --> 00:19:44,570
numbers but imagine the probability of

00:19:42,200 --> 00:19:46,340
my message not being received is point

00:19:44,570 --> 00:19:49,630
zero one percent because usually they

00:19:46,340 --> 00:19:52,040
are but there's a small probability

00:19:49,630 --> 00:19:54,500
consequently the probability that the

00:19:52,040 --> 00:19:57,090
original message and the duplicate

00:19:54,500 --> 00:19:59,340
follow its followed by very quickly

00:19:57,090 --> 00:20:02,580
also not being received is point oh one

00:19:59,340 --> 00:20:04,140
squared o small number now if I send two

00:20:02,580 --> 00:20:06,180
duplicates it becomes a really small

00:20:04,140 --> 00:20:08,910
number and all we're looking for really

00:20:06,180 --> 00:20:11,520
is a kind of fit for purpose degree of

00:20:08,910 --> 00:20:14,070
reliability think about availability

00:20:11,520 --> 00:20:15,720
figures for for big systems used to talk

00:20:14,070 --> 00:20:17,370
about five nines availability in the

00:20:15,720 --> 00:20:19,470
world of high availability systems blah

00:20:17,370 --> 00:20:21,420
blah blah never entirely sure how anyone

00:20:19,470 --> 00:20:22,950
ever proved this stuff but that's that

00:20:21,420 --> 00:20:25,350
was the mindset and the mindset of

00:20:22,950 --> 00:20:27,990
suppose it's a similar here but this is

00:20:25,350 --> 00:20:29,790
a simple approach that's effective do a

00:20:27,990 --> 00:20:32,390
demonstration later it's called the kiss

00:20:29,790 --> 00:20:34,710
of death saying all these things

00:20:32,390 --> 00:20:38,640
effective and doesn't consume loads of

00:20:34,710 --> 00:20:43,530
bandwidth so States acted upon by

00:20:38,640 --> 00:20:46,260
messages is where we got to this in

00:20:43,530 --> 00:20:47,910
dressing scheme so each device has a

00:20:46,260 --> 00:20:50,640
unique address as you'd expect but we

00:20:47,910 --> 00:20:52,410
hardly ever use them ok there are also

00:20:50,640 --> 00:20:55,830
group addresses that identify

00:20:52,410 --> 00:20:57,450
collections or sets of devices those are

00:20:55,830 --> 00:21:00,660
the ones we use even when we think

00:20:57,450 --> 00:21:02,580
there's only one member in that set we

00:21:00,660 --> 00:21:04,680
use a publish and subscribe system this

00:21:02,580 --> 00:21:06,480
means that sending devices know nothing

00:21:04,680 --> 00:21:08,610
about the recipients of their messages I

00:21:06,480 --> 00:21:10,560
refer the learned audience back to my

00:21:08,610 --> 00:21:12,150
comments earlier about complexity and

00:21:10,560 --> 00:21:13,380
managing acknowledgments and stuff you

00:21:12,150 --> 00:21:17,220
need to know who's receiving your

00:21:13,380 --> 00:21:18,390
messages we don't okay when I configure

00:21:17,220 --> 00:21:19,890
my light switch I'm going to use

00:21:18,390 --> 00:21:21,900
lighting as an example because we all

00:21:19,890 --> 00:21:23,970
know about lighting I'm going to say

00:21:21,900 --> 00:21:26,130
when the buttons pressed you're going to

00:21:23,970 --> 00:21:28,920
transmit or publish a message to this

00:21:26,130 --> 00:21:30,540
group address meanwhile where I set up

00:21:28,920 --> 00:21:32,370
all of my lights through a process

00:21:30,540 --> 00:21:35,070
called provisioning and configuration

00:21:32,370 --> 00:21:37,290
they will be subscribed to that same

00:21:35,070 --> 00:21:39,570
address all that means is that they will

00:21:37,290 --> 00:21:41,220
listen and respond to messages with that

00:21:39,570 --> 00:21:43,200
address on them they don't know where

00:21:41,220 --> 00:21:44,730
they're coming from I have no idea where

00:21:43,200 --> 00:21:47,130
the 10 switches might send those

00:21:44,730 --> 00:21:49,440
messages that address or just one

00:21:47,130 --> 00:21:51,780
they're completely decoupled which is

00:21:49,440 --> 00:21:53,910
great because I can make changes without

00:21:51,780 --> 00:21:55,890
having to reconfigure change loads of

00:21:53,910 --> 00:21:57,390
things maybe wait overnight for tables

00:21:55,890 --> 00:22:00,990
to rebuild there's one mesh networking

00:21:57,390 --> 00:22:03,570
technology that does that not good so ok

00:22:00,990 --> 00:22:04,890
bad enough in their domestic context but

00:22:03,570 --> 00:22:06,980
this is really for big commercial

00:22:04,890 --> 00:22:09,019
buildings you can't have that

00:22:06,980 --> 00:22:10,999
hotels can have tens of thousands of

00:22:09,019 --> 00:22:14,210
lights so that's how we're dressing

00:22:10,999 --> 00:22:16,659
works let's look a bit more closely at

00:22:14,210 --> 00:22:19,909
nodes slightly concerned about time

00:22:16,659 --> 00:22:21,950
so nodes things devices that are members

00:22:19,909 --> 00:22:24,049
of our network but notes can have more

00:22:21,950 --> 00:22:26,179
than one addressable part and we call

00:22:24,049 --> 00:22:27,919
those things elements and again every

00:22:26,179 --> 00:22:30,889
device does have a unique address it's a

00:22:27,919 --> 00:22:33,159
16-bit number that address belongs to

00:22:30,889 --> 00:22:35,869
the element or elements your node house

00:22:33,159 --> 00:22:38,179
now sitting inside each element we have

00:22:35,869 --> 00:22:41,029
things called models models are actually

00:22:38,179 --> 00:22:42,549
standard software components standard in

00:22:41,029 --> 00:22:45,710
the sense that they're defined by our

00:22:42,549 --> 00:22:47,600
specification they do one thing to take

00:22:45,710 --> 00:22:50,359
care of one type of operation handling

00:22:47,600 --> 00:22:52,369
on offs changing levels changing colors

00:22:50,359 --> 00:22:54,590
those sorts of things that's what models

00:22:52,369 --> 00:22:56,389
define they define the behaviors the

00:22:54,590 --> 00:22:58,690
message types associated with them and

00:22:56,389 --> 00:23:01,220
the states that represent the various

00:22:58,690 --> 00:23:06,019
conditions associated with that aspect

00:23:01,220 --> 00:23:08,840
of the device there's an example so I've

00:23:06,019 --> 00:23:11,389
got a big kind of LED units there that

00:23:08,840 --> 00:23:12,649
would be one node in my network but it's

00:23:11,389 --> 00:23:14,749
got three elements because the

00:23:12,649 --> 00:23:17,720
individual LEDs are individually

00:23:14,749 --> 00:23:20,059
controllable okay makes sense so in my

00:23:17,720 --> 00:23:22,399
code I'm going to have some sort of

00:23:20,059 --> 00:23:24,019
structure that defines my node and the

00:23:22,399 --> 00:23:26,320
fact that it has three elements and that

00:23:24,019 --> 00:23:29,450
each element implements two particular

00:23:26,320 --> 00:23:31,309
models in this case I've got the generic

00:23:29,450 --> 00:23:33,649
on/off server model yes we have clients

00:23:31,309 --> 00:23:36,169
and servers clients don't have any state

00:23:33,649 --> 00:23:38,299
values they just send messages servers

00:23:36,169 --> 00:23:40,460
contain state but I've also got the

00:23:38,299 --> 00:23:42,289
light lightness server model because

00:23:40,460 --> 00:23:44,570
that's to do with brightness control my

00:23:42,289 --> 00:23:47,539
LEDs are dimmable so as a kind of

00:23:44,570 --> 00:23:49,429
firmware developer working with product

00:23:47,539 --> 00:23:51,799
management you're looking at equipping

00:23:49,429 --> 00:23:53,690
products with certain behaviors those

00:23:51,799 --> 00:23:55,789
behaviors are a consequence of the

00:23:53,690 --> 00:23:58,399
models the device house which you will

00:23:55,789 --> 00:23:59,989
either implement in code or your vendor

00:23:58,399 --> 00:24:01,970
will have implemented in for you and

00:23:59,989 --> 00:24:04,789
you'll just be adding the device

00:24:01,970 --> 00:24:09,019
specific stuff in response to messages

00:24:04,789 --> 00:24:11,149
that model and has associated with it so

00:24:09,019 --> 00:24:12,739
security absolutely no time to talk

00:24:11,149 --> 00:24:15,470
about this subject properly it's at

00:24:12,739 --> 00:24:18,320
least two or three presentations in its

00:24:15,470 --> 00:24:19,489
own right but here's a summary take your

00:24:18,320 --> 00:24:20,809
device out to the box that you just

00:24:19,489 --> 00:24:23,690
bought from Amazon or

00:24:20,809 --> 00:24:25,669
some other shop it's not a member of

00:24:23,690 --> 00:24:28,249
your mesh network it's just a thing your

00:24:25,669 --> 00:24:29,629
device to turn it into a member of your

00:24:28,249 --> 00:24:31,730
network you go through a process called

00:24:29,629 --> 00:24:33,499
provisioning which usually involves a

00:24:31,730 --> 00:24:36,080
smartphone application or something like

00:24:33,499 --> 00:24:39,110
that what actually happens if you equip

00:24:36,080 --> 00:24:40,789
over a secure communication channel the

00:24:39,110 --> 00:24:42,769
new device with a number of security

00:24:40,789 --> 00:24:45,320
keys one of which is called the network

00:24:42,769 --> 00:24:48,259
key possession of that key is what makes

00:24:45,320 --> 00:24:49,909
you part of your network okay there are

00:24:48,259 --> 00:24:50,990
other keys as well I'll kind of come on

00:24:49,909 --> 00:24:53,179
to in the next slide

00:24:50,990 --> 00:24:55,149
so that's provisioning and now they're

00:24:53,179 --> 00:24:57,440
just appearing but it isn't pairing

00:24:55,149 --> 00:24:59,419
imagine if you had to pair every member

00:24:57,440 --> 00:25:02,330
of your 32,000 Oh network with every

00:24:59,419 --> 00:25:04,399
other member of your 32,000 node network

00:25:02,330 --> 00:25:09,649
it would take quite a long time so new

00:25:04,399 --> 00:25:11,809
process called provisioning some bullet

00:25:09,649 --> 00:25:15,980
points on security to tax my technical

00:25:11,809 --> 00:25:20,119
knowledge and public speaking skills but

00:25:15,980 --> 00:25:21,860
number one it's mandatory with the other

00:25:20,119 --> 00:25:23,240
Bluetooth stuff the term was on the the

00:25:21,860 --> 00:25:24,919
stack diagram earlier on it's not

00:25:23,240 --> 00:25:26,899
mandatory some to manufacturers to

00:25:24,919 --> 00:25:28,070
decide what security features they use

00:25:26,899 --> 00:25:30,019
for their products because they

00:25:28,070 --> 00:25:32,450
understand it and the context is used in

00:25:30,019 --> 00:25:34,039
under threats which is mesh it's

00:25:32,450 --> 00:25:35,679
mandatory so everybody has to do the

00:25:34,039 --> 00:25:38,659
same thing you can't have one device

00:25:35,679 --> 00:25:40,669
coming in with weak security and ruining

00:25:38,659 --> 00:25:43,820
the security of the whole network all

00:25:40,669 --> 00:25:47,299
messages are encrypted and authenticated

00:25:43,820 --> 00:25:49,519
that's a es CCM we've got separate sets

00:25:47,299 --> 00:25:52,210
of security keys that encrypt network

00:25:49,519 --> 00:25:55,429
layer related fields in PD use and

00:25:52,210 --> 00:25:57,200
application layer PD use so in the

00:25:55,429 --> 00:25:58,759
context of a Bluetooth mesh network an

00:25:57,200 --> 00:26:01,369
application is anything you want it to

00:25:58,759 --> 00:26:03,470
be but it's things like lighting air

00:26:01,369 --> 00:26:06,619
conditioning heating again smart

00:26:03,470 --> 00:26:09,529
building example say you decide and you

00:26:06,619 --> 00:26:11,360
make devices part of applications by

00:26:09,529 --> 00:26:12,799
giving them appropriate application keys

00:26:11,360 --> 00:26:16,600
that you've created during the whole

00:26:12,799 --> 00:26:19,039
setup process you can do things like

00:26:16,600 --> 00:26:21,590
area isolation quite like this one so

00:26:19,039 --> 00:26:23,809
with different subnet keys you can kind

00:26:21,590 --> 00:26:25,519
of draw cryptographic boundaries around

00:26:23,809 --> 00:26:27,799
physical areas so thinking about rooms

00:26:25,519 --> 00:26:29,919
in hotels you can issue different

00:26:27,799 --> 00:26:32,059
networks subnet keys for different rooms

00:26:29,919 --> 00:26:33,470
you know when you check in your phone

00:26:32,059 --> 00:26:34,530
gets issued with some stuff you can

00:26:33,470 --> 00:26:36,240
control the smoke

00:26:34,530 --> 00:26:37,920
vices in your room but not the devices

00:26:36,240 --> 00:26:41,100
in the room next door hopefully that's

00:26:37,920 --> 00:26:44,430
that's the idea all messages have some

00:26:41,100 --> 00:26:46,410
head of stuff that's not encrypted has

00:26:44,430 --> 00:26:49,020
to stay that way but we do obfuscate it

00:26:46,410 --> 00:26:51,440
so that any kind of you know kind of

00:26:49,020 --> 00:26:54,420
pattern analysis to try and track

00:26:51,440 --> 00:26:56,580
patterns of behavior maybe track people

00:26:54,420 --> 00:26:57,660
in the network won't we're very

00:26:56,580 --> 00:27:00,390
difficult to do thanks to that

00:26:57,660 --> 00:27:01,770
obfuscation as a protection against some

00:27:00,390 --> 00:27:04,410
of the standard things like replay

00:27:01,770 --> 00:27:06,330
attacks trashcan attacks and so on and

00:27:04,410 --> 00:27:07,860
it all derives from that first thing

00:27:06,330 --> 00:27:09,330
that you do which is provisioning that's

00:27:07,860 --> 00:27:12,480
our devices get their keys and

00:27:09,330 --> 00:27:15,060
everything stems from there it's

00:27:12,480 --> 00:27:17,160
demonstration time I've managed very

00:27:15,060 --> 00:27:19,380
well to to completely clear my mind of

00:27:17,160 --> 00:27:21,150
the the horror of demonstrations so I've

00:27:19,380 --> 00:27:23,150
got this thing let me quickly introduce

00:27:21,150 --> 00:27:26,760
it cuz I'm really short of time now

00:27:23,150 --> 00:27:28,290
16 independent devices here where the

00:27:26,760 --> 00:27:30,150
Bluetooth module inside them running

00:27:28,290 --> 00:27:33,330
Zephyr I'm assuming everyone knows what

00:27:30,150 --> 00:27:34,860
the Zephyr is open-source embedded OS

00:27:33,330 --> 00:27:37,770
framework whatever you want to call it

00:27:34,860 --> 00:27:40,500
with a Bluetooth mesh stack and some

00:27:37,770 --> 00:27:41,820
associated api's so the mesh is doing

00:27:40,500 --> 00:27:44,220
all the stock of doing all the things

00:27:41,820 --> 00:27:46,740
that it does I've implemented the the

00:27:44,220 --> 00:27:48,930
kind of models and I've implemented the

00:27:46,740 --> 00:27:50,430
general generic on off server model

00:27:48,930 --> 00:27:53,670
because there are some LEDs I want to

00:27:50,430 --> 00:27:56,250
switch on and off and the lights HSL

00:27:53,670 --> 00:27:57,960
server model HSL of course the hue

00:27:56,250 --> 00:28:00,990
saturation and lightness it's a color

00:27:57,960 --> 00:28:04,310
scheme they're colored LEDs had quite

00:28:00,990 --> 00:28:04,310
like to change the color of the LEDs

00:28:04,850 --> 00:28:09,270
this has got the generic on/off client

00:28:07,290 --> 00:28:11,220
on it and it's got two buttons one of

00:28:09,270 --> 00:28:14,670
which I've programmed to send generic on

00:28:11,220 --> 00:28:16,710
off set unacknowledged brackets 1 which

00:28:14,670 --> 00:28:19,740
means switch on on the same bucket 0

00:28:16,710 --> 00:28:25,620
which means switched off and oh look it

00:28:19,740 --> 00:28:27,960
works ok what I'm pleased and proof that

00:28:25,620 --> 00:28:31,980
one and they all go off now in terms of

00:28:27,960 --> 00:28:33,930
addresses every node in my network has

00:28:31,980 --> 00:28:35,820
been subscribed to three addresses

00:28:33,930 --> 00:28:38,190
because this is how I decided I wanted

00:28:35,820 --> 00:28:39,840
to do it there's an address that every

00:28:38,190 --> 00:28:42,990
node has subscribed to so that's a whole

00:28:39,840 --> 00:28:45,180
panel and then each node subscribes to a

00:28:42,990 --> 00:28:46,630
distinct address for the column it's in

00:28:45,180 --> 00:28:48,160
in the row that it's in so

00:28:46,630 --> 00:28:51,910
transmitting here to the all panel

00:28:48,160 --> 00:28:53,170
address and I've also gotten I've just

00:28:51,910 --> 00:28:55,540
realized I haven't switched it on some

00:28:53,170 --> 00:28:57,310
doing that now is a device that actually

00:28:55,540 --> 00:28:59,560
is only acting as a proxy so in a way

00:28:57,310 --> 00:29:06,430
it's a black box and I'll quickly show

00:28:59,560 --> 00:29:07,780
you this if I can so this is a web

00:29:06,430 --> 00:29:09,610
applications you're looking a web page

00:29:07,780 --> 00:29:12,730
here I've used the web Bluetooth

00:29:09,610 --> 00:29:15,160
JavaScript API so hopefully it's going

00:29:12,730 --> 00:29:17,860
to discover that thing it's always

00:29:15,160 --> 00:29:19,840
freaks me out this part there we go so

00:29:17,860 --> 00:29:22,330
it's found my proxy which as far as its

00:29:19,840 --> 00:29:24,460
concerned is a Bluetooth device with the

00:29:22,330 --> 00:29:27,430
gap gap and apt layers that we saw

00:29:24,460 --> 00:29:30,460
earlier on I've just hopefully connected

00:29:27,430 --> 00:29:33,640
to it I have so now I can start

00:29:30,460 --> 00:29:35,830
injecting mesh messages into the network

00:29:33,640 --> 00:29:37,960
and if you look at the top right there

00:29:35,830 --> 00:29:39,910
DST that's one of the fields in PDUs

00:29:37,960 --> 00:29:41,980
destination address by clicking around I

00:29:39,910 --> 00:29:45,580
can change it that's the all nodes

00:29:41,980 --> 00:29:49,900
address hey presto there you go and

00:29:45,580 --> 00:29:52,030
switch off if I click on a column that's

00:29:49,900 --> 00:29:54,430
boring let's do that one then only that

00:29:52,030 --> 00:29:57,070
column should respond and it did I click

00:29:54,430 --> 00:29:58,810
on a row I can just switch on that row

00:29:57,070 --> 00:30:01,300
so you can see how the publish and

00:29:58,810 --> 00:30:04,210
subscribe stuff works and I can change

00:30:01,300 --> 00:30:07,660
colors stay with that row there we go

00:30:04,210 --> 00:30:09,640
this is the white HSL server model blah

00:30:07,660 --> 00:30:12,330
blah blah isn't that thrilling I'm quite

00:30:09,640 --> 00:30:15,100
thrilled I can tell that you are two

00:30:12,330 --> 00:30:16,420
disconnects moving swiftly on I think

00:30:15,100 --> 00:30:17,860
we've got a bit of a 20 minute buffer

00:30:16,420 --> 00:30:23,770
after my talk actually so maybe I'll

00:30:17,860 --> 00:30:27,040
just steal what's so joyous news the

00:30:23,770 --> 00:30:29,110
demo worked let's look at code now so

00:30:27,040 --> 00:30:30,310
obviously now this is straying out of my

00:30:29,110 --> 00:30:32,440
world really where standards

00:30:30,310 --> 00:30:34,270
organization we don't define api's or

00:30:32,440 --> 00:30:38,740
products or software any of that kind of

00:30:34,270 --> 00:30:40,120
stuff but I've mucked around with Zephyr

00:30:38,740 --> 00:30:42,760
quite a lot of think is that the right

00:30:40,120 --> 00:30:44,470
way of saying it and we have some

00:30:42,760 --> 00:30:47,350
educational resources that we based on

00:30:44,470 --> 00:30:48,670
Zephyr kind of like a lot about it's not

00:30:47,350 --> 00:30:51,400
least of which is the fact that it's

00:30:48,670 --> 00:30:53,530
Hardware agnostic you know you can build

00:30:51,400 --> 00:30:55,630
for lots and lots and lots of different

00:30:53,530 --> 00:30:56,920
boards I want to say about 200 someone

00:30:55,630 --> 00:30:58,160
in the audience correct me is it around

00:30:56,920 --> 00:30:59,270
200 now anyone

00:30:58,160 --> 00:31:00,710
not looking at anyone in particular

00:30:59,270 --> 00:31:02,030
thank you someone gave me a thumbs up

00:31:00,710 --> 00:31:04,400
two loads of different boards different

00:31:02,030 --> 00:31:06,470
hardware manufacturers supported we are

00:31:04,400 --> 00:31:08,720
like Switzerland we have no favorites so

00:31:06,470 --> 00:31:11,450
this works well in terms of my kind of

00:31:08,720 --> 00:31:16,070
diplomacy just give you a sense of what

00:31:11,450 --> 00:31:17,600
coding looks like here so if we start

00:31:16,070 --> 00:31:19,190
here this is this kind of node

00:31:17,600 --> 00:31:22,190
composition stuff and if you look at the

00:31:19,190 --> 00:31:24,830
code from the bottom up I've got if

00:31:22,190 --> 00:31:26,480
you've got lots of data types and

00:31:24,830 --> 00:31:27,770
structs and macros that you work with in

00:31:26,480 --> 00:31:30,830
Zephir so at the bottom here I'm

00:31:27,770 --> 00:31:32,600
defining essentially my my nodes this is

00:31:30,830 --> 00:31:35,270
got the kind of route of my node

00:31:32,600 --> 00:31:36,920
composition hierarchy and it's saying

00:31:35,270 --> 00:31:39,410
that my node consists of an array of

00:31:36,920 --> 00:31:42,770
elements and if we look at the elements

00:31:39,410 --> 00:31:44,420
array above it I've defined actually

00:31:42,770 --> 00:31:45,590
only one element so I've got a single

00:31:44,420 --> 00:31:50,510
element there's only one addressable

00:31:45,590 --> 00:31:52,700
part in each of these devices that

00:31:50,510 --> 00:31:55,010
element though comprises a list of an

00:31:52,700 --> 00:31:56,750
array of models if we go to the models

00:31:55,010 --> 00:32:00,050
array above it you'll see that I'm using

00:31:56,750 --> 00:32:01,880
various macros to define models now

00:32:00,050 --> 00:32:03,620
there are some system models defined in

00:32:01,880 --> 00:32:05,960
the spec we call them foundation models

00:32:03,620 --> 00:32:07,490
there's the configuration server model

00:32:05,960 --> 00:32:09,680
that's what lets you configure your

00:32:07,490 --> 00:32:11,450
device and there's the health server

00:32:09,680 --> 00:32:13,190
model which is about fault reporting and

00:32:11,450 --> 00:32:15,050
then there's other stuff for which we

00:32:13,190 --> 00:32:17,240
have a macro called bt mesh model and

00:32:15,050 --> 00:32:19,010
you can probably see there I've defined

00:32:17,240 --> 00:32:22,730
the generic on/off server model and the

00:32:19,010 --> 00:32:25,610
generic level server model now all well

00:32:22,730 --> 00:32:28,100
and good but I need to map message op

00:32:25,610 --> 00:32:30,290
codes that uniquely define individual

00:32:28,100 --> 00:32:32,000
message types to functions that will

00:32:30,290 --> 00:32:34,280
handle them which is partly what I'm

00:32:32,000 --> 00:32:35,840
doing with the highlighted reference in

00:32:34,280 --> 00:32:37,760
that code so if we move on to the next

00:32:35,840 --> 00:32:40,850
slide there you'll see that I've got

00:32:37,760 --> 00:32:42,830
some constants defined again using some

00:32:40,850 --> 00:32:45,650
nice macros you can see that message op

00:32:42,830 --> 00:32:48,080
codes or 16-bit values again you get all

00:32:45,650 --> 00:32:51,200
the numbers from the spec and then

00:32:48,080 --> 00:32:53,300
sitting underneath that for particular

00:32:51,200 --> 00:32:56,840
model highlighted on the previous slide

00:32:53,300 --> 00:32:57,410
I've listed functions which must be

00:32:56,840 --> 00:32:59,630
called

00:32:57,410 --> 00:33:01,430
if we receive a message with this OP

00:32:59,630 --> 00:33:05,090
code so that's how we kind of routes

00:33:01,430 --> 00:33:07,490
inbound messages by opcode and model to

00:33:05,090 --> 00:33:09,200
functions which then responds to them

00:33:07,490 --> 00:33:11,900
and this is where it gets implementation

00:33:09,200 --> 00:33:14,300
specific because you now need to do

00:33:11,900 --> 00:33:18,050
what is he gonna do in response to

00:33:14,300 --> 00:33:21,670
receiving that message so we have

00:33:18,050 --> 00:33:24,290
various knives f4 api's available to us

00:33:21,670 --> 00:33:25,550
your stuff arrives in a network buffer

00:33:24,290 --> 00:33:28,370
so you're gonna use the network buffer

00:33:25,550 --> 00:33:30,710
API you're gonna have the Bluetooth mesh

00:33:28,370 --> 00:33:32,120
models specification open it page

00:33:30,710 --> 00:33:34,250
whatever so you can see the message

00:33:32,120 --> 00:33:36,860
structure you'll use the network buffer

00:33:34,250 --> 00:33:39,380
API to take fields according to their

00:33:36,860 --> 00:33:41,660
size and type out of the network buffer

00:33:39,380 --> 00:33:44,240
and once you've got them set up in

00:33:41,660 --> 00:33:46,880
variables you then initiate some work to

00:33:44,240 --> 00:33:48,650
respond and I've used a worker so I

00:33:46,880 --> 00:33:52,280
don't block the main thread to to get

00:33:48,650 --> 00:33:54,050
that done sending messages is pretty

00:33:52,280 --> 00:33:55,910
much the same but in Reverse so I'm

00:33:54,050 --> 00:33:58,190
going to populate a network buffer with

00:33:55,910 --> 00:34:00,830
the fields that my message must contain

00:33:58,190 --> 00:34:02,420
to be a valid mesh message and again I'm

00:34:00,830 --> 00:34:04,580
consulting the spec to know what that

00:34:02,420 --> 00:34:05,960
means so I'm creating a network buffer

00:34:04,580 --> 00:34:07,790
at the bottom of the slide there and

00:34:05,960 --> 00:34:09,620
then I'm populating it with some

00:34:07,790 --> 00:34:11,810
messages down at the bottom with things

00:34:09,620 --> 00:34:13,399
like net buff symbol add u8 unsigned

00:34:11,810 --> 00:34:16,429
8-bit integer and down at the bottom

00:34:13,399 --> 00:34:17,840
there we've also got a context that we

00:34:16,429 --> 00:34:20,600
need to define which has various

00:34:17,840 --> 00:34:22,669
parameters in it if you can read at the

00:34:20,600 --> 00:34:25,879
back we've got net ID X an app ID X

00:34:22,669 --> 00:34:28,040
these are actually indexes to various

00:34:25,879 --> 00:34:29,690
security keys which I've registered in

00:34:28,040 --> 00:34:31,159
code you haven't seen I could have lots

00:34:29,690 --> 00:34:33,169
of different security key to lots of

00:34:31,159 --> 00:34:35,480
different applications lots of different

00:34:33,169 --> 00:34:37,970
subnets I have to say which ones I want

00:34:35,480 --> 00:34:40,070
to be used to encrypt the different

00:34:37,970 --> 00:34:42,290
parts of my PDU so I'm saying that

00:34:40,070 --> 00:34:45,110
they're in my contacts I'm also setting

00:34:42,290 --> 00:34:48,320
the destination address for my message

00:34:45,110 --> 00:34:50,690
and TTL is the name of the field which

00:34:48,320 --> 00:34:52,790
controls how many hops maximum will do

00:34:50,690 --> 00:34:55,820
across the network if I know nothing's

00:34:52,790 --> 00:34:57,770
more more than one hop out of out of

00:34:55,820 --> 00:35:00,320
range then when I configure my switch

00:34:57,770 --> 00:35:03,260
I'm gonna say you know by default set

00:35:00,320 --> 00:35:05,540
TTL to two one so you and you do one hop

00:35:03,260 --> 00:35:07,160
and what I'm saying in the code there is

00:35:05,540 --> 00:35:09,140
used to default it's fine

00:35:07,160 --> 00:35:10,820
but I could override it in my code if I

00:35:09,140 --> 00:35:13,580
wanted to maybe there's some conditional

00:35:10,820 --> 00:35:17,090
stuff that I wanted to do it's not

00:35:13,580 --> 00:35:18,800
sending messages and there's the actual

00:35:17,090 --> 00:35:21,350
send message there sorry out my last

00:35:18,800 --> 00:35:23,630
slide on that subject BT mesh model

00:35:21,350 --> 00:35:24,240
sends brackets some parameters message

00:35:23,630 --> 00:35:25,770
sent

00:35:24,240 --> 00:35:27,359
the kind of the whole point here is not

00:35:25,770 --> 00:35:29,280
to kind of absorb the detail list

00:35:27,359 --> 00:35:31,710
hopefully to go oh that looks quite easy

00:35:29,280 --> 00:35:33,750
because it's quite rational quites

00:35:31,710 --> 00:35:36,030
there's a learning curve regarding some

00:35:33,750 --> 00:35:37,920
of the concepts but putting it into

00:35:36,030 --> 00:35:40,109
practice isn't hard and Zephyr ships

00:35:37,920 --> 00:35:44,250
with loads of samples for all sorts of

00:35:40,109 --> 00:35:46,410
things including all supported flavors

00:35:44,250 --> 00:35:48,030
of Bluetooth which of course includes

00:35:46,410 --> 00:35:51,809
mesh there's some good stuff in there to

00:35:48,030 --> 00:35:54,950
help you get started that said it's not

00:35:51,809 --> 00:35:57,480
your only source of information because

00:35:54,950 --> 00:36:10,920
we've got some stuff as well so our

00:35:57,480 --> 00:36:14,040
website is www.pevs.com on to in a

00:36:10,920 --> 00:36:15,630
moment but we've got some papers picked

00:36:14,040 --> 00:36:17,760
out a couple for you here one is the

00:36:15,630 --> 00:36:19,950
Bluetooth mesh networking intro for

00:36:17,760 --> 00:36:22,650
developers it's sort of the stuff I've

00:36:19,950 --> 00:36:24,569
been talking about but more it might

00:36:22,650 --> 00:36:26,550
look like it's 20 or pages but I think

00:36:24,569 --> 00:36:28,140
mostly it's pictures I think in reality

00:36:26,550 --> 00:36:29,640
it's like eight pages you'll read it on

00:36:28,140 --> 00:36:34,710
the train in half an hour and it's like

00:36:29,640 --> 00:36:36,540
okay pretty good place to start the mesh

00:36:34,710 --> 00:36:38,309
models technical overview focuses

00:36:36,540 --> 00:36:39,930
specifically on model it's like what

00:36:38,309 --> 00:36:41,520
models do we have whatever we define

00:36:39,930 --> 00:36:43,829
what do I need to know to understand

00:36:41,520 --> 00:36:46,109
them you just read the bits that make ya

00:36:43,829 --> 00:36:48,089
are of interest to you ultimately you've

00:36:46,109 --> 00:36:49,230
got to read the spec line or at least

00:36:48,089 --> 00:36:52,500
parts of it that's where you absolutely

00:36:49,230 --> 00:36:54,990
have to go this should make it easier if

00:36:52,500 --> 00:36:57,750
you want hands-on practice two things

00:36:54,990 --> 00:36:59,339
we've got the Bluetooth mesh developer

00:36:57,750 --> 00:37:00,720
study guide is what we call it that's

00:36:59,339 --> 00:37:02,130
the one on the left click on the gain

00:37:00,720 --> 00:37:03,750
resources study guides you'll see it

00:37:02,130 --> 00:37:05,670
there you'll do some coding a whole

00:37:03,750 --> 00:37:07,619
series of projects all based on zephyr

00:37:05,670 --> 00:37:09,510
slightly out of date the Zephyr actually

00:37:07,619 --> 00:37:11,579
which I need to update guilty conscience

00:37:09,510 --> 00:37:13,890
forcing me to confess to you all there

00:37:11,579 --> 00:37:16,109
but I'll get to that I promise and

00:37:13,890 --> 00:37:17,940
there's also a resource specifically

00:37:16,109 --> 00:37:19,549
about the proxy function which I used to

00:37:17,940 --> 00:37:21,839
make my web Bluetooth

00:37:19,549 --> 00:37:22,950
application and in fact all the code for

00:37:21,839 --> 00:37:25,950
that demo is in there

00:37:22,950 --> 00:37:27,599
I'm being bombed by an insect's here all

00:37:25,950 --> 00:37:29,430
the code for that demo application is

00:37:27,599 --> 00:37:31,200
there and also an iOS smartphone

00:37:29,430 --> 00:37:34,109
application which does the same thing so

00:37:31,200 --> 00:37:35,790
lots of stuff to help you make progress

00:37:34,109 --> 00:37:36,700
up the learning curve with Bluetooth

00:37:35,790 --> 00:37:38,950
mesh

00:37:36,700 --> 00:37:41,230
and that my friends slightly out over

00:37:38,950 --> 00:37:43,599
time entire terrible human being but I

00:37:41,230 --> 00:37:45,790
did give you a sticker is it from me

00:37:43,599 --> 00:37:48,430
thank you very much for for listening I

00:37:45,790 --> 00:37:50,470
don't know if we have time for questions

00:37:48,430 --> 00:37:53,579
let's do questions unless somebody tells

00:37:50,470 --> 00:37:55,990
us to stop shall we do that's yes I

00:37:53,579 --> 00:37:57,430
don't know I've got no idea how this

00:37:55,990 --> 00:37:59,470
this works all I'm happy to repeat the

00:37:57,430 --> 00:38:02,140
questions or you could come up here

00:37:59,470 --> 00:38:04,720
come up here what is the current support

00:38:02,140 --> 00:38:10,420
of Bluetooth smash in upstream Linux

00:38:04,720 --> 00:38:12,460
kernel if you know oh I'm gonna say it's

00:38:10,420 --> 00:38:13,869
partially supported but I'm not good to

00:38:12,460 --> 00:38:15,549
answer this question however I do happen

00:38:13,869 --> 00:38:17,710
to know somebody in the audience who

00:38:15,549 --> 00:38:19,180
probably absolutely does know without

00:38:17,710 --> 00:38:20,380
wishing to single him out would anyone

00:38:19,180 --> 00:38:24,359
like to volunteer an answer to that

00:38:20,380 --> 00:38:24,359
question it's better than what Johan

00:38:51,140 --> 00:38:56,280
see wasn't a good answer see I I knew

00:38:54,600 --> 00:38:57,420
who's gonna be here and secretly we

00:38:56,280 --> 00:38:58,530
arranged this whole thing it's good to

00:38:57,420 --> 00:39:01,080
have someone in the audience he knows

00:38:58,530 --> 00:39:02,580
what they're talking about thank you

00:39:01,080 --> 00:39:06,080
very much anyone else got a question who

00:39:02,580 --> 00:39:09,530
knows I might know the answer might not

00:39:06,080 --> 00:39:09,530
yeah at the back

00:39:14,590 --> 00:39:19,810
oh right no it wasn't so the moving

00:39:18,010 --> 00:39:25,120
parts in this demo that on screens on

00:39:19,810 --> 00:39:28,350
screen roads yeah so the moving part

00:39:25,120 --> 00:39:31,690
series I have a web page HTML CSS

00:39:28,350 --> 00:39:33,070
JavaScript like always there happen

00:39:31,690 --> 00:39:34,810
stock could have no actually I couldn't

00:39:33,070 --> 00:39:38,290
have opened it from the file system I

00:39:34,810 --> 00:39:40,600
have a local for web server okay I'm

00:39:38,290 --> 00:39:43,210
using an API which is not supported by

00:39:40,600 --> 00:39:44,830
all browsers it's Googler driving it so

00:39:43,210 --> 00:39:48,490
it's in Chrome on everything except I US

00:39:44,830 --> 00:39:51,400
and it's in some songs browser and it

00:39:48,490 --> 00:39:53,140
might materialize in in Microsoft

00:39:51,400 --> 00:39:54,960
browser Brown at Microsoft's a new

00:39:53,140 --> 00:39:58,000
browser soon it's called web Bluetooth

00:39:54,960 --> 00:39:59,740
so it's not for mesh it's for those

00:39:58,000 --> 00:40:01,390
other types those are the categories of

00:39:59,740 --> 00:40:03,940
Bluetooth devices lets me discover

00:40:01,390 --> 00:40:07,380
connect to and then interact with

00:40:03,940 --> 00:40:11,020
connectable devices of which this is one

00:40:07,380 --> 00:40:14,020
so this is a zephyr device and it's got

00:40:11,020 --> 00:40:16,510
both of those stuck variants on it so as

00:40:14,020 --> 00:40:19,180
a kind of connectable bluetooth device

00:40:16,510 --> 00:40:20,860
it's advertising that's broadcasting

00:40:19,180 --> 00:40:23,140
package to say hello i am here and this

00:40:20,860 --> 00:40:25,690
is what kind of device i am at the

00:40:23,140 --> 00:40:29,470
advertising packets actually include a

00:40:25,690 --> 00:40:31,810
16 bit ID that says i'm a mesh proxy so

00:40:29,470 --> 00:40:33,340
my web Bluetooth app app is scanning for

00:40:31,810 --> 00:40:34,450
those packets finding them that's the

00:40:33,340 --> 00:40:35,590
first thing I did when I click the

00:40:34,450 --> 00:40:39,280
button at the top I'm currently

00:40:35,590 --> 00:40:43,870
connected already once I've formed that

00:40:39,280 --> 00:40:45,010
connection in my code which I won't show

00:40:43,870 --> 00:40:50,670
you cuz we'll get kicked out the room in

00:40:45,010 --> 00:40:53,980
about I am creating mesh network PDUs

00:40:50,670 --> 00:40:56,530
and I am encrypting them in the required

00:40:53,980 --> 00:40:58,000
we're using some JavaScript API s my

00:40:56,530 --> 00:41:00,250
application has the networking

00:40:58,000 --> 00:41:02,380
application keys it's been provisioned

00:41:00,250 --> 00:41:04,750
manually by which I mean in this case I

00:41:02,380 --> 00:41:06,940
hard-coded them yes I'm a bad person you

00:41:04,750 --> 00:41:09,340
wouldn't do that in real life you can

00:41:06,940 --> 00:41:11,050
see them in my if we do show source what

00:41:09,340 --> 00:41:12,190
I view you'll see my security keys there

00:41:11,050 --> 00:41:15,940
so it's not how you do it but it's a

00:41:12,190 --> 00:41:17,620
demo and then I'm wrapping what is

00:41:15,940 --> 00:41:19,960
essentially a byte array with some

00:41:17,620 --> 00:41:22,030
encrypted parts in another layer of

00:41:19,960 --> 00:41:25,060
protocol called the proxy protocol and

00:41:22,030 --> 00:41:27,880
I'm writing it to my proxy device

00:41:25,060 --> 00:41:31,250
there's a write operation supported by

00:41:27,880 --> 00:41:35,480
and proxy devices will take the contents

00:41:31,250 --> 00:41:38,330
of gap rights unwrapped the proxy PDU

00:41:35,480 --> 00:41:40,640
layer take out the mesh networking PDU

00:41:38,330 --> 00:41:42,740
and relay it that's how that works

00:41:40,640 --> 00:41:45,560
so no web server in here hope that makes

00:41:42,740 --> 00:41:55,910
sense but the codes available anyone

00:41:45,560 --> 00:42:02,930
else do I have to stop yet yes could you

00:41:55,910 --> 00:42:04,670
repeat that please a bit louder yes it

00:42:02,930 --> 00:42:06,200
can yes so of the four roles you can be

00:42:04,670 --> 00:42:07,970
all four or none or anything in between

00:42:06,200 --> 00:42:10,220
it's a software configuration flag

00:42:07,970 --> 00:42:12,560
subject to implementation limitations

00:42:10,220 --> 00:42:14,840
some devices won't allow you to proxies

00:42:12,560 --> 00:42:17,420
need more memory for example so I did

00:42:14,840 --> 00:42:18,830
try to see where try to make a proxy out

00:42:17,420 --> 00:42:21,020
of one of these things once and they

00:42:18,830 --> 00:42:23,930
have 16k around and it didn't work I

00:42:21,020 --> 00:42:26,450
couldn't do it but I started from

00:42:23,930 --> 00:42:33,190
implementation constraints yes you can

00:42:26,450 --> 00:42:33,190
have multi role nodes anyone else yes

00:42:41,370 --> 00:42:46,520
yes and no so the question was about

00:42:43,110 --> 00:42:49,170
limits regarding power consumption or

00:42:46,520 --> 00:42:51,240
network congestion so now we're outside

00:42:49,170 --> 00:42:52,320
the spec we don't specify anything about

00:42:51,240 --> 00:42:54,750
power consumption that's an

00:42:52,320 --> 00:42:57,480
implementation issue so really you need

00:42:54,750 --> 00:42:59,190
to look at you know products or modules

00:42:57,480 --> 00:43:02,820
from vendors to really get a good answer

00:42:59,190 --> 00:43:04,350
to that question probably best up and

00:43:02,820 --> 00:43:06,870
give you on that one network congestion

00:43:04,350 --> 00:43:07,950
there's some benchmarking data available

00:43:06,870 --> 00:43:10,110
I think Erickson did a lot of

00:43:07,950 --> 00:43:12,930
benchmarking which you'll find on our

00:43:10,110 --> 00:43:15,930
websites I've done some but only with

00:43:12,930 --> 00:43:18,470
small networks sort of 64 nodes I did

00:43:15,930 --> 00:43:23,730
some stuff with but that's all I've got

00:43:18,470 --> 00:43:25,800
have to say anecdotally my impression is

00:43:23,730 --> 00:43:28,140
that Bluetooth mesh scales way beyond

00:43:25,800 --> 00:43:29,040
the other kind of usual suspects there

00:43:28,140 --> 00:43:31,620
are other low-power

00:43:29,040 --> 00:43:33,320
mesh networking technologies I'm not an

00:43:31,620 --> 00:43:36,000
expert in any of them but anecdotally

00:43:33,320 --> 00:43:37,680
because I get asked questions like oh we

00:43:36,000 --> 00:43:39,630
did some stuff with X Y Zed mesh

00:43:37,680 --> 00:43:40,950
networking technology and we started to

00:43:39,630 --> 00:43:43,400
struggle when we had more than 10

00:43:40,950 --> 00:43:46,050
devices and like oh dear

00:43:43,400 --> 00:43:48,990
yeah that sounds pitiful this was

00:43:46,050 --> 00:43:51,060
designed for commercial buildings in the

00:43:48,990 --> 00:43:54,230
first instance those are the large-scale

00:43:51,060 --> 00:43:57,510
networks as opposed to going smart home

00:43:54,230 --> 00:43:59,400
residential sector 10 possibly 11

00:43:57,510 --> 00:44:00,990
devices to control one is a thermostat

00:43:59,400 --> 00:44:02,670
and then trying to make whatever you

00:44:00,990 --> 00:44:04,500
come up with work on large-scale they

00:44:02,670 --> 00:44:09,000
did it the other way around so I think

00:44:04,500 --> 00:44:10,650
it scales pretty well and a feeling like

00:44:09,000 --> 00:44:12,090
I'm probably supposed to be stopping any

00:44:10,650 --> 00:44:18,990
moment now but again it will keep going

00:44:12,090 --> 00:44:20,760
yes what well yes and no so first of all

00:44:18,990 --> 00:44:22,730
to be pedantic which of course is our

00:44:20,760 --> 00:44:25,770
job as as engineers and there are no

00:44:22,730 --> 00:44:27,510
Reuters or even routers so there are no

00:44:25,770 --> 00:44:29,760
things like that in a Bluetooth mesh

00:44:27,510 --> 00:44:31,230
network and there is no routing okay

00:44:29,760 --> 00:44:33,060
it's the relay process and the

00:44:31,230 --> 00:44:34,770
publish/subscribe thing that yarn ups

00:44:33,060 --> 00:44:37,820
forgive me I know you know that you were

00:44:34,770 --> 00:44:39,810
listening but can you buy certified

00:44:37,820 --> 00:44:44,580
requalified Bluetooth mesh products

00:44:39,810 --> 00:44:46,590
absolutely so I was at an event in Paris

00:44:44,580 --> 00:44:49,050
in I think it was February this year and

00:44:46,590 --> 00:44:52,950
someone did a presentation on one of the

00:44:49,050 --> 00:44:53,609
other mesh networking technologies which

00:44:52,950 --> 00:44:54,749
is old of

00:44:53,609 --> 00:44:55,799
Bluetooth meshing I'm not going to name

00:44:54,749 --> 00:44:58,890
it because I kind of don't like being

00:44:55,799 --> 00:45:00,660
mean about the competition at that time

00:44:58,890 --> 00:45:02,700
there were two qualified products for it

00:45:00,660 --> 00:45:05,460
and it's older than Bluetooth mesh we've

00:45:02,700 --> 00:45:07,829
got over 200 now which might not sound a

00:45:05,460 --> 00:45:10,079
lot the spec came out two years ago

00:45:07,829 --> 00:45:11,549
people have to read it they have to

00:45:10,079 --> 00:45:13,380
discuss with product product management

00:45:11,549 --> 00:45:15,509
they have to think about new products or

00:45:13,380 --> 00:45:18,390
impact on product roadmap schedule

00:45:15,509 --> 00:45:20,069
engineering resources eventually stuff

00:45:18,390 --> 00:45:22,559
starts coming out of stuff's coming out

00:45:20,069 --> 00:45:23,940
I think it's growing I always get mixed

00:45:22,559 --> 00:45:26,009
up it's exponentially yeah I think one

00:45:23,940 --> 00:45:27,269
of those words logarithmically yeah I

00:45:26,009 --> 00:45:30,359
think it's exponential that's that one

00:45:27,269 --> 00:45:31,980
so the sort of doubling every three

00:45:30,359 --> 00:45:34,440
months I want to say I think that's what

00:45:31,980 --> 00:45:36,269
we've been seeing so it's growing quite

00:45:34,440 --> 00:45:48,029
quickly but you know as always we'll see

00:45:36,269 --> 00:45:53,460
what happens the market decides yes good

00:45:48,029 --> 00:45:55,470
point yeah thank you that's a really

00:45:53,460 --> 00:45:58,430
good point so in a sense

00:45:55,470 --> 00:46:00,359
despite being new in the context of

00:45:58,430 --> 00:46:03,059
standardization processes which can be

00:46:00,359 --> 00:46:05,210
quite lengthy it's actually maturing

00:46:03,059 --> 00:46:07,170
very quickly I think it's fair to say I

00:46:05,210 --> 00:46:08,489
think people are coming in for the next

00:46:07,170 --> 00:46:10,890
talk and I'm still here so I'm gonna

00:46:08,489 --> 00:46:12,690
stop now if that's okay with you guys

00:46:10,890 --> 00:46:13,980
thanks for the questions but I'm not

00:46:12,690 --> 00:46:17,519
disappearing if you want to talk more

00:46:13,980 --> 00:46:19,380
I'll look outside until it seems I don't

00:46:17,519 --> 00:46:20,450
need to lurk anymore thank you again

00:46:19,380 --> 00:46:25,489
Cheers

00:46:20,450 --> 00:46:25,489

YouTube URL: https://www.youtube.com/watch?v=9RMElr61SQI


