Title: Linux Kernel Debugging: Going Beyond Printk Messages - Sergio Prado, Embedded Labworks
Publication date: 2019-10-29
Playlist: Open Source Summit & Embedded Linux Conference EU 2019 - Lyon
Description: 
	Linux Kernel Debugging: Going Beyond Printk Messages - Sergio Prado, Embedded Labworks*

Debugging the Linux kernel with printk messages is a common technique. And sometimes a good one. The problem happens when we only know this debugging technique. How to debug a kernel oops message? How to trace and understand the kernel execution? How to identify and analyze a buffer overflow? How to identify a memory leak or a deadlock in kernel space?

In many situations, there are more effective debugging tools and techniques we could use to debug the kernel, including KGDB, ftrace, addr2line, kmemleak, and so on. In this presentation, we will go over these and many other very useful tools to identify and fix problems in the Linux kernel.
Captions: 
	00:00:00,060 --> 00:00:03,589
hello everyone thank you all for being

00:00:02,850 --> 00:00:06,120
here

00:00:03,589 --> 00:00:08,670
my name is Sarah Jo I'm from Brazil this

00:00:06,120 --> 00:00:10,860
is my first talk at Lenin's conference

00:00:08,670 --> 00:00:12,450
so I hope you enjoy the talk we're going

00:00:10,860 --> 00:00:12,990
to talk here about the limbs Canada

00:00:12,450 --> 00:00:16,260
buggy

00:00:12,990 --> 00:00:19,080
the title is going beyond print came

00:00:16,260 --> 00:00:21,119
messages so one thing that we are not

00:00:19,080 --> 00:00:23,189
going to talk about here is putting

00:00:21,119 --> 00:00:27,920
print messages on the kernel to the

00:00:23,189 --> 00:00:34,140
buggy right well that's right

00:00:27,920 --> 00:00:36,210
okay well as I said I'm from Brazil I've

00:00:34,140 --> 00:00:39,719
been working with a melody notes for

00:00:36,210 --> 00:00:42,239
about 15 years and today I have a

00:00:39,719 --> 00:00:45,090
company called in their lab works we do

00:00:42,239 --> 00:00:47,850
a lot of training in Brazil so it's

00:00:45,090 --> 00:00:49,980
around 40 trainees per year so I'm used

00:00:47,850 --> 00:00:54,000
to talk a lot let's see if I can talk

00:00:49,980 --> 00:00:56,039
for only 30 minutes here and I also have

00:00:54,000 --> 00:00:59,399
a blog in Brazil I write a lot of about

00:00:56,039 --> 00:01:01,260
embedded Linux and I'm also a Linux

00:00:59,399 --> 00:01:03,660
kernel contributory contribute a little

00:01:01,260 --> 00:01:06,150
bit with millivolts and other open

00:01:03,660 --> 00:01:08,790
source projects so this talk is not

00:01:06,150 --> 00:01:11,610
about Prince K right and everything

00:01:08,790 --> 00:01:14,250
related to Prince gate we're not also

00:01:11,610 --> 00:01:18,180
talking about static analysis to like

00:01:14,250 --> 00:01:20,009
how to find bugs in the kernel looking

00:01:18,180 --> 00:01:22,259
at the source code we're not talking

00:01:20,009 --> 00:01:25,229
also about fuzzy tools like testing

00:01:22,259 --> 00:01:26,939
tools to found bugs in the kernel we're

00:01:25,229 --> 00:01:27,600
not going to talk about use the space

00:01:26,939 --> 00:01:30,210
debugging

00:01:27,600 --> 00:01:33,540
it's only Canada buggy and this is not

00:01:30,210 --> 00:01:36,450
shown or a tutorial because it's just 30

00:01:33,540 --> 00:01:38,520
minutes so we can't have it to todo on a

00:01:36,450 --> 00:01:42,360
lot of tools that are going to to study

00:01:38,520 --> 00:01:45,899
here with just 30 minutes and I know

00:01:42,360 --> 00:01:48,780
that there is some talks about debugging

00:01:45,899 --> 00:01:51,119
the Linux kernel in the past so I'm

00:01:48,780 --> 00:01:54,540
trying here a little bit different talks

00:01:51,119 --> 00:01:57,899
so I will try some live demos I know

00:01:54,540 --> 00:01:59,880
it's risky yeah but I will try it anyway

00:01:57,899 --> 00:02:05,640
I have a hero abort connected to my

00:01:59,880 --> 00:02:07,020
machine and it support from toradex

00:02:05,640 --> 00:02:09,470
so if i have any problem here i will

00:02:07,020 --> 00:02:12,000
call the guys from products will help me

00:02:09,470 --> 00:02:13,260
it is boarding the Linux kernel through

00:02:12,000 --> 00:02:15,810
TFTP to

00:02:13,260 --> 00:02:18,269
to work and then mounting a hotel system

00:02:15,810 --> 00:02:20,069
built with busy route so it's a very

00:02:18,269 --> 00:02:24,090
small system with the tools necessary

00:02:20,069 --> 00:02:25,739
for for a my my talk right so I have a

00:02:24,090 --> 00:02:28,860
lot of thing to talk about a lot of

00:02:25,739 --> 00:02:31,590
tools to show you guys who here is Carol

00:02:28,860 --> 00:02:35,220
Carol developer develop product and

00:02:31,590 --> 00:02:39,239
Great Britain I talk about a lot of

00:02:35,220 --> 00:02:41,940
tools to the burglar care now and I hope

00:02:39,239 --> 00:02:43,709
you enjoy it so before I start talking

00:02:41,940 --> 00:02:45,090
about the tools I just want to talk a

00:02:43,709 --> 00:02:46,739
little bit about the process of

00:02:45,090 --> 00:02:48,180
debugging when you have to debug

00:02:46,739 --> 00:02:50,340
something you have to understand the

00:02:48,180 --> 00:02:51,629
problem will have to reproduce the

00:02:50,340 --> 00:02:54,359
problem if you don't understand the

00:02:51,629 --> 00:02:58,290
problem you're not going to be able to

00:02:54,359 --> 00:03:00,780
solve the issue faster right you have to

00:02:58,290 --> 00:03:02,639
be able to reproduce the problem because

00:03:00,780 --> 00:03:06,209
if you don't reproduce the problem you

00:03:02,639 --> 00:03:08,340
don't know how how and when you solve it

00:03:06,209 --> 00:03:11,129
right you have to know how to reproduce

00:03:08,340 --> 00:03:14,730
it we have to identify the source of the

00:03:11,129 --> 00:03:16,829
problem and then you have to fix it so I

00:03:14,730 --> 00:03:20,400
would say this is the man four steps to

00:03:16,829 --> 00:03:23,790
to the bug anything right in software so

00:03:20,400 --> 00:03:27,359
our talk here is focus on under the tree

00:03:23,790 --> 00:03:31,530
right the third step in defy the source

00:03:27,359 --> 00:03:33,870
of the problem there are different kind

00:03:31,530 --> 00:03:36,599
of kind of problems that we we can have

00:03:33,870 --> 00:03:39,030
in the kernel we can have crashes so the

00:03:36,599 --> 00:03:41,609
kernel just crash you have the kind of

00:03:39,030 --> 00:03:43,859
ups the kernel panic and some tools to

00:03:41,609 --> 00:03:47,209
to debug it and find the source of the

00:03:43,859 --> 00:03:50,430
problem and there is some problems that

00:03:47,209 --> 00:03:51,900
like a deadlock so you have a lock up

00:03:50,430 --> 00:03:54,900
and the kind of something hangs and

00:03:51,900 --> 00:03:57,299
start working and you have other tools

00:03:54,900 --> 00:03:59,879
to try to identify you fix that kind of

00:03:57,299 --> 00:04:03,269
problem you could have a a logic problem

00:03:59,879 --> 00:04:06,690
like everything is working but the

00:04:03,269 --> 00:04:09,959
results not is not what is expecting you

00:04:06,690 --> 00:04:13,349
can have a kind of leak like memory leak

00:04:09,959 --> 00:04:16,909
so in some research leaks could be

00:04:13,349 --> 00:04:19,310
memory could be a file descriptor socket

00:04:16,909 --> 00:04:21,630
you could have performance problems

00:04:19,310 --> 00:04:25,320
right like

00:04:21,630 --> 00:04:28,530
this the usage of the Sifu is too much

00:04:25,320 --> 00:04:31,580
higher things like that so it's here we

00:04:28,530 --> 00:04:34,980
have five different kind of problems and

00:04:31,580 --> 00:04:36,660
we we could use different tools to the

00:04:34,980 --> 00:04:39,810
bug and then try the source of those

00:04:36,660 --> 00:04:41,970
problems the first two I would mention

00:04:39,810 --> 00:04:44,430
it's our brain right the key knowledge

00:04:41,970 --> 00:04:47,340
because if you don't have the college to

00:04:44,430 --> 00:04:51,120
the bug problems and you won't succeed

00:04:47,340 --> 00:04:53,220
right so if you don't know how the kind

00:04:51,120 --> 00:04:55,920
of works what is virtual memory

00:04:53,220 --> 00:04:58,710
how would you the bug problem with

00:04:55,920 --> 00:05:02,550
invalid memory access so you have to

00:04:58,710 --> 00:05:06,210
know how the system works the the second

00:05:02,550 --> 00:05:08,910
kind of to or technique you could use we

00:05:06,210 --> 00:05:10,800
call the post-mortem analysis right so

00:05:08,910 --> 00:05:14,010
the problem already happened will have

00:05:10,800 --> 00:05:15,510
the logs or a cordon and have to to take

00:05:14,010 --> 00:05:18,840
a look at and find the source of the

00:05:15,510 --> 00:05:22,170
problem another to or technique we use

00:05:18,840 --> 00:05:24,330
is Tracy right so trace the system and

00:05:22,170 --> 00:05:26,760
it inspire what functions are being call

00:05:24,330 --> 00:05:29,220
it how the foods are in call it how much

00:05:26,760 --> 00:05:31,590
time is taking to try to notify the

00:05:29,220 --> 00:05:34,680
source of the problem another kind of

00:05:31,590 --> 00:05:36,990
tool is interactive debugging so you

00:05:34,680 --> 00:05:40,800
start gdb and debug the system

00:05:36,990 --> 00:05:42,840
interactively you run the code step by

00:05:40,800 --> 00:05:46,230
step things like that put breakpoints

00:05:42,840 --> 00:05:49,350
etcetera and with you could have also

00:05:46,230 --> 00:05:52,740
some I call the buggy frameworks like

00:05:49,350 --> 00:05:55,590
tools to to find problems with memory

00:05:52,740 --> 00:05:59,880
leaks and lot and look at things like

00:05:55,590 --> 00:06:03,810
that so we could have this five

00:05:59,880 --> 00:06:07,950
different tools and techniques to try to

00:06:03,810 --> 00:06:11,250
the burglars five kinds of bugs and I

00:06:07,950 --> 00:06:13,530
created here a kind of table to try to

00:06:11,250 --> 00:06:18,480
image file what is the best tool for the

00:06:13,530 --> 00:06:23,420
job right so you could put printed so

00:06:18,480 --> 00:06:25,820
other things right no yeah

00:06:23,420 --> 00:06:30,450
our objective here is to talk about

00:06:25,820 --> 00:06:33,750
those two so acknowledge acknowledge

00:06:30,450 --> 00:06:35,100
could have helped no problems so if you

00:06:33,750 --> 00:06:37,140
don't have the chronology if you don't

00:06:35,100 --> 00:06:39,300
know how the system works would be very

00:06:37,140 --> 00:06:43,050
difficult to to work and solve the

00:06:39,300 --> 00:06:46,890
problems post-mortem analysis like

00:06:43,050 --> 00:06:49,740
having logs and dams would help in some

00:06:46,890 --> 00:06:53,220
kind of problems like crashes the best

00:06:49,740 --> 00:06:55,080
way to find bugs and that crashes the

00:06:53,220 --> 00:06:56,940
system is to look at is to look at the

00:06:55,080 --> 00:07:00,180
logs take a look at the Karen whoops

00:06:56,940 --> 00:07:03,000
kind of panic or a dump in our case of

00:07:00,180 --> 00:07:05,160
the kernel to try to find a source of

00:07:03,000 --> 00:07:09,420
the problem logs and herbs could also

00:07:05,160 --> 00:07:11,370
help sometimes with lookups the task

00:07:09,420 --> 00:07:13,830
hangs in can a space you could have a

00:07:11,370 --> 00:07:16,830
look at our large key problems you have

00:07:13,830 --> 00:07:19,200
the logs you can take a look at the the

00:07:16,830 --> 00:07:22,770
system or the application order Karen of

00:07:19,200 --> 00:07:26,850
execution try to find a bug but research

00:07:22,770 --> 00:07:29,730
leaks and performance normally logs

00:07:26,850 --> 00:07:31,950
don't help with that tracing profiling

00:07:29,730 --> 00:07:34,980
could also help you a lot of different

00:07:31,950 --> 00:07:37,290
problems like lookups you could trace

00:07:34,980 --> 00:07:40,140
the system find the functions that are

00:07:37,290 --> 00:07:42,870
running so if it's not stopped is in one

00:07:40,140 --> 00:07:46,710
potion you know it's hang hang out there

00:07:42,870 --> 00:07:48,780
so can take a look at the problem easily

00:07:46,710 --> 00:07:52,010
we're going to try to use Europe trace

00:07:48,780 --> 00:07:54,360
to find our lookup in the kernel

00:07:52,010 --> 00:07:57,360
performance could also be used with

00:07:54,360 --> 00:07:59,940
trace and profiling too so the tracing

00:07:57,360 --> 00:08:02,070
profiling tools like perhaps race could

00:07:59,940 --> 00:08:06,000
help you to find problem lands of

00:08:02,070 --> 00:08:08,100
ladings in the kernel space interactive

00:08:06,000 --> 00:08:11,640
debugging can help in some kind of

00:08:08,100 --> 00:08:13,710
problems like crashes sometimes we're

00:08:11,640 --> 00:08:16,230
going to use gdb a key here in the

00:08:13,710 --> 00:08:20,730
kernel to try to find problems with

00:08:16,230 --> 00:08:24,360
crashes awesome lookups logic writes

00:08:20,730 --> 00:08:27,480
your program in our case the kernel

00:08:24,360 --> 00:08:30,780
doesn't do what what we want so we could

00:08:27,480 --> 00:08:33,570
start gdb session to take a look why it

00:08:30,780 --> 00:08:36,560
is not doing what supposed to do but

00:08:33,570 --> 00:08:38,840
leakage problems probably not and

00:08:36,560 --> 00:08:41,710
formants of course not because the gdb

00:08:38,840 --> 00:08:45,020
makes the can run slower so it's worse

00:08:41,710 --> 00:08:48,440
in the buggy frameworks like you create

00:08:45,020 --> 00:08:51,200
a kind of tool to find the problems for

00:08:48,440 --> 00:08:55,700
example memory leak you can you have the

00:08:51,200 --> 00:08:58,029
Linux kernel has a to to find to try to

00:08:55,700 --> 00:09:01,339
find memory leaks inside the kernel

00:08:58,029 --> 00:09:04,670
that's one example of the buggy

00:09:01,339 --> 00:09:07,040
framework Kenya has also a lot of

00:09:04,670 --> 00:09:11,120
options that we could enable to find

00:09:07,040 --> 00:09:13,310
local apps and things like that so this

00:09:11,120 --> 00:09:16,460
was great by me of course you could we

00:09:13,310 --> 00:09:22,100
could discuss a little bit about what to

00:09:16,460 --> 00:09:23,810
is bad for for a kind of problem but the

00:09:22,100 --> 00:09:25,430
main message here is we have a lot of

00:09:23,810 --> 00:09:29,830
tools a lot of different tools that

00:09:25,430 --> 00:09:32,630
behavior different so we have to and

00:09:29,830 --> 00:09:38,360
sometimes find the best tool for the job

00:09:32,630 --> 00:09:41,210
right to fix bugs faster okay and that

00:09:38,360 --> 00:09:45,650
said I will start talking about care

00:09:41,210 --> 00:09:47,690
Nawabs analysis can orbs is a way of the

00:09:45,650 --> 00:09:51,980
Loom cards to tell us that something bad

00:09:47,690 --> 00:09:54,740
happens or happened and when the kind of

00:09:51,980 --> 00:09:57,970
detects a problem like an invalid memory

00:09:54,740 --> 00:10:00,290
extrusion invalid memory acts is

00:09:57,970 --> 00:10:03,230
something that they can continue with

00:10:00,290 --> 00:10:05,690
the section they will print a kind of

00:10:03,230 --> 00:10:09,440
ops message in the can Bob's message we

00:10:05,690 --> 00:10:14,930
have a lot of useful things to to use

00:10:09,440 --> 00:10:17,810
for the the buggy process sometimes the

00:10:14,930 --> 00:10:20,959
the kernel whoops generates a kernel

00:10:17,810 --> 00:10:23,870
panic right and when the can event

00:10:20,959 --> 00:10:25,790
happens we don't have access to the

00:10:23,870 --> 00:10:29,060
canvas just stop everything

00:10:25,790 --> 00:10:30,410
you don't run any task there is a

00:10:29,060 --> 00:10:33,980
documentation did an external source

00:10:30,410 --> 00:10:37,880
code to help us the bug this kind of

00:10:33,980 --> 00:10:40,940
problems find using the kind of oops

00:10:37,880 --> 00:10:43,400
find the the source code that caused the

00:10:40,940 --> 00:10:47,830
problem and that what we are going to do

00:10:43,400 --> 00:10:51,670
here so this is our first demo

00:10:47,830 --> 00:10:53,800
for the kind of developers you're going

00:10:51,670 --> 00:10:57,459
to see a lot of bugs here but that these

00:10:53,800 --> 00:11:00,519
bugs don't exist and the the kind of

00:10:57,459 --> 00:11:03,610
right so don't worry about it I put this

00:11:00,519 --> 00:11:07,450
bugs in the kernel for for the talk so

00:11:03,610 --> 00:11:10,209
I'm going to call here a crash in the

00:11:07,450 --> 00:11:14,399
kernel right there is a bug somewhere in

00:11:10,209 --> 00:11:19,450
the kernel when I try to read GPIO

00:11:14,399 --> 00:11:24,519
crashes right so this I think it's big

00:11:19,450 --> 00:11:25,769
enough for you guys to see right so we

00:11:24,519 --> 00:11:30,329
have a kick I know ops

00:11:25,769 --> 00:11:33,100
followed by a kernel panic so the system

00:11:30,329 --> 00:11:36,310
just stopped at this equation the

00:11:33,100 --> 00:11:39,269
current is not doing and more scheduling

00:11:36,310 --> 00:11:42,730
things like that what we have here

00:11:39,269 --> 00:11:45,100
looking at the slides is better I will

00:11:42,730 --> 00:11:49,300
come back to the terminal so we have

00:11:45,100 --> 00:11:52,630
here from bottom up we have the stack

00:11:49,300 --> 00:11:55,660
trace so with a stack trace see we know

00:11:52,630 --> 00:11:59,140
which food shoes were recall it right

00:11:55,660 --> 00:12:02,950
and the legs last function that was was

00:11:59,140 --> 00:12:06,490
the cuted before the crash I put it in

00:12:02,950 --> 00:12:09,820
red to make it easier for you to to see

00:12:06,490 --> 00:12:13,480
we have the program counter right so

00:12:09,820 --> 00:12:16,089
it's like the instruction pointer for

00:12:13,480 --> 00:12:18,990
the guys that work with this function

00:12:16,089 --> 00:12:21,490
register for the guys that work with x86

00:12:18,990 --> 00:12:24,820
so we have a kid we have here the

00:12:21,490 --> 00:12:28,510
address that we have the problem the

00:12:24,820 --> 00:12:31,329
crash and a ball we have the program

00:12:28,510 --> 00:12:35,050
counter the colonel who is able to solve

00:12:31,329 --> 00:12:37,029
the address to the function the norm

00:12:35,050 --> 00:12:39,810
normally that looks kind of is compile

00:12:37,029 --> 00:12:43,300
it with the option called K all seems so

00:12:39,810 --> 00:12:46,079
with this option the kind of chains of

00:12:43,300 --> 00:12:49,000
some symbols like pointers to functions

00:12:46,079 --> 00:12:56,410
so here he's saying that the crash was

00:12:49,000 --> 00:13:00,070
that the function CP 23 x AK s X X X P I

00:12:56,410 --> 00:13:01,170
read ed of sites 34 so we have the

00:13:00,070 --> 00:13:04,500
function in the

00:13:01,170 --> 00:13:06,750
what can we do about it we could use a

00:13:04,500 --> 00:13:11,300
lot of tools to to find a search of this

00:13:06,750 --> 00:13:14,160
problem one of the tools it's called a

00:13:11,300 --> 00:13:16,920
dress lining one of the tools from the

00:13:14,160 --> 00:13:19,290
tool Cheney so we'll call it here I'm

00:13:16,920 --> 00:13:21,660
working with a board that's based on

00:13:19,290 --> 00:13:30,600
army architecture so I have to user to

00:13:21,660 --> 00:13:33,480
chain and forearm so I'm going to use

00:13:30,600 --> 00:13:37,410
the address to line shoe to just convert

00:13:33,480 --> 00:13:40,680
that address to a line that's what the

00:13:37,410 --> 00:13:43,790
tudors so I'm going to pass them

00:13:40,680 --> 00:13:48,420
- F that will show me that function name

00:13:43,790 --> 00:13:50,820
- e - e we have to to give this to the

00:13:48,420 --> 00:13:54,060
karna with the buggy symbols so you have

00:13:50,820 --> 00:13:56,550
to to have the karna mean elf format

00:13:54,060 --> 00:14:01,770
with the buggy symbol so we have here I

00:13:56,550 --> 00:14:05,040
am in the Linux kernel source code so I

00:14:01,770 --> 00:14:08,010
am the source code I have the VM Linux

00:14:05,040 --> 00:14:09,330
that's the elf image of the kernel with

00:14:08,010 --> 00:14:12,390
the buggy symbols

00:14:09,330 --> 00:14:16,140
so I I compile at the current with the

00:14:12,390 --> 00:14:18,930
buggy Simoes and then the last parameter

00:14:16,140 --> 00:14:22,790
is the address that I will just copy

00:14:18,930 --> 00:14:25,290
from the oops message

00:14:22,790 --> 00:14:34,130
let's go to the beginning of the ops

00:14:25,290 --> 00:14:39,560
message it's here so just copy it here

00:14:34,130 --> 00:14:39,560
input here right

00:14:41,930 --> 00:14:49,019
so it is saying that this problem

00:14:45,870 --> 00:14:51,800
counter this address is associated with

00:14:49,019 --> 00:15:02,490
this source code in the kernel

00:14:51,800 --> 00:15:09,120
line 357 and then we have the line that

00:15:02,490 --> 00:15:12,630
causes the crash as you can see the mCP

00:15:09,120 --> 00:15:16,199
pointer is new here because I just

00:15:12,630 --> 00:15:18,630
changed the code so we could call the

00:15:16,199 --> 00:15:23,579
scratch right so the code doesn't have

00:15:18,630 --> 00:15:27,060
this bug okay how can we debug this

00:15:23,579 --> 00:15:28,860
differently that is to in the scripts

00:15:27,060 --> 00:15:34,410
director of the the Linux kernel that

00:15:28,860 --> 00:15:39,620
called fadh2 line and in this tool we

00:15:34,410 --> 00:15:39,620
just have to give the the kernel image

00:15:40,009 --> 00:15:50,779
with the bug symbols in our format and

00:15:42,920 --> 00:15:56,759
the function and it's offset so this

00:15:50,779 --> 00:16:00,420
this is what we want and the results the

00:15:56,759 --> 00:16:02,040
same so you don't have the program

00:16:00,420 --> 00:16:05,870
counter but you have the function with

00:16:02,040 --> 00:16:09,000
the upset you can talk to a line of code

00:16:05,870 --> 00:16:16,410
another way to solve this is using gdb

00:16:09,000 --> 00:16:23,699
so we could just run your gdb oh I

00:16:16,410 --> 00:16:26,430
forgot to give the Linux so I started

00:16:23,699 --> 00:16:29,699
the gdb for my to chain with the kernel

00:16:26,430 --> 00:16:33,389
image and now I'm going to ask use the

00:16:29,699 --> 00:16:37,019
visual list what is in the that address

00:16:33,389 --> 00:16:39,839
I could use the address or the function

00:16:37,019 --> 00:16:44,360
plus the offset is the same right I will

00:16:39,839 --> 00:16:44,360
take the function in the offset

00:16:46,570 --> 00:16:54,620
the same result I can open here the 2d

00:16:50,720 --> 00:16:56,000
mode of gdb sometimes doesn't work that

00:16:54,620 --> 00:17:07,670
we moved

00:16:56,000 --> 00:17:09,650
let's try again yeah very good so in any

00:17:07,670 --> 00:17:11,300
form of kudos that address line you

00:17:09,650 --> 00:17:15,530
could use that script from the konnyaku

00:17:11,300 --> 00:17:21,650
this gdb and QQ you can find the source

00:17:15,530 --> 00:17:27,110
code that caused the crash right it's

00:17:21,650 --> 00:17:29,540
all in the slides here but what if you

00:17:27,110 --> 00:17:30,920
can access the the kernel console I'm

00:17:29,540 --> 00:17:32,950
here in the kind of calls so I'm

00:17:30,920 --> 00:17:37,040
connected to a set of parts so I can

00:17:32,950 --> 00:17:39,620
grab the the kernel whoops and then

00:17:37,040 --> 00:17:43,070
analyze it but what if I don't have

00:17:39,620 --> 00:17:44,300
access to it how can we debug crash in

00:17:43,070 --> 00:17:47,360
the Karen if I don't have the access

00:17:44,300 --> 00:17:49,340
because when it crashes and panics you

00:17:47,360 --> 00:17:50,750
lost connection with the kernel right if

00:17:49,340 --> 00:17:54,320
you are not connected with something

00:17:50,750 --> 00:17:57,830
that are sending the message you just

00:17:54,320 --> 00:17:59,720
will just lose the message so that is a

00:17:57,830 --> 00:18:02,750
framework in a kind of Carl called P

00:17:59,720 --> 00:18:07,010
store it's a generic framework to to

00:18:02,750 --> 00:18:11,660
start date and that is a driver for this

00:18:07,010 --> 00:18:14,390
framework that is able to store the

00:18:11,660 --> 00:18:17,270
kernel message the logs the you could

00:18:14,390 --> 00:18:21,650
start a full log of the carriages the

00:18:17,270 --> 00:18:24,080
kernel whoops panic in memory so - you

00:18:21,650 --> 00:18:26,600
should reserve part of the memory for

00:18:24,080 --> 00:18:30,020
this of course the canopy and cottage

00:18:26,600 --> 00:18:33,260
because you lose in the reboot so it was

00:18:30,020 --> 00:18:35,390
a part of her memory for the to store

00:18:33,260 --> 00:18:38,960
the kernel whoops and panicky messages

00:18:35,390 --> 00:18:40,730
and if the kind of panics you should you

00:18:38,960 --> 00:18:43,340
should configure it to reboot not any

00:18:40,730 --> 00:18:44,750
key so when you reboot a soft it must be

00:18:43,340 --> 00:18:48,140
a software reboot of course because a

00:18:44,750 --> 00:18:50,270
rather hard reboot you just lose the

00:18:48,140 --> 00:18:53,510
memory so it should be a soft very good

00:18:50,270 --> 00:18:56,360
so if a kind of panics and rebooted you

00:18:53,510 --> 00:18:59,510
could can have access to the to the

00:18:56,360 --> 00:19:01,580
keynotes and panicky message so in army

00:18:59,510 --> 00:19:03,140
you to configurate that the P start of

00:19:01,580 --> 00:19:05,000
course you first have to enable be

00:19:03,140 --> 00:19:07,820
starting a care no they don't have to

00:19:05,000 --> 00:19:11,780
configure the device three of your board

00:19:07,820 --> 00:19:15,020
to reserve part of your physical memory

00:19:11,780 --> 00:19:17,750
to store this message so this is an

00:19:15,020 --> 00:19:19,730
example that's is how its configured on

00:19:17,750 --> 00:19:25,340
my advice stream you just enable the

00:19:19,730 --> 00:19:28,220
runoffs renewal driver with a specific

00:19:25,340 --> 00:19:30,950
operation to allocate part of her memory

00:19:28,220 --> 00:19:34,580
I'm allocating here two megabytes of

00:19:30,950 --> 00:19:37,520
memory for an to store kernel messages

00:19:34,580 --> 00:19:42,320
and they're not let's try that now see

00:19:37,520 --> 00:19:48,590
how how it works the first thing I would

00:19:42,320 --> 00:19:52,400
do is configure the kernel I will give

00:19:48,590 --> 00:20:03,800
care the kernel parameter to reboot on

00:19:52,400 --> 00:20:05,780
panic let me take here money here so I'm

00:20:03,800 --> 00:20:09,740
just passing the candidate the option

00:20:05,780 --> 00:20:14,180
pain panic equals three so it's going to

00:20:09,740 --> 00:20:21,020
to panic when when we have a panic it's

00:20:14,180 --> 00:20:24,970
going to reboot in three seconds let be

00:20:21,020 --> 00:20:24,970
bought it that's me

00:20:28,070 --> 00:20:49,650
and I'm great now I will access the

00:20:34,200 --> 00:20:55,429
board via SSH great I I will show you

00:20:49,650 --> 00:20:55,429
that this colonel please

00:20:57,140 --> 00:21:04,260
show me show you first the the P stories

00:21:01,409 --> 00:21:06,809
is a is exported to the user

00:21:04,260 --> 00:21:09,630
yeah virtual file system so we have to

00:21:06,809 --> 00:21:14,549
mount it in some directory the default

00:21:09,630 --> 00:21:19,909
directory is C's FSP store so we should

00:21:14,549 --> 00:21:25,080
be empty now because I just did a

00:21:19,909 --> 00:21:29,159
hardware a hard reboot so now I'm going

00:21:25,080 --> 00:21:34,500
to crush the kernel but since I I am an

00:21:29,159 --> 00:21:36,510
SSH I just just going to freeze right I

00:21:34,500 --> 00:21:38,760
don't have the kind of tank here because

00:21:36,510 --> 00:21:43,289
I'm not connected to a to a console the

00:21:38,760 --> 00:21:46,409
kernel right it's episode o TTY here so

00:21:43,289 --> 00:21:48,780
I should I'm not going to take a look at

00:21:46,409 --> 00:21:54,510
the console so I don't have the console

00:21:48,780 --> 00:21:57,900
it should close in a few seconds close

00:21:54,510 --> 00:22:04,650
it and the kind of rebooted right I'm

00:21:57,900 --> 00:22:06,179
going to do SSH again and now I have the

00:22:04,650 --> 00:22:09,210
files of the crash

00:22:06,179 --> 00:22:14,130
inside the T store root of filesystem

00:22:09,210 --> 00:22:17,490
can print oops and I have the same crash

00:22:14,130 --> 00:22:20,190
I can take a look at it so so if you

00:22:17,490 --> 00:22:25,950
don't have access to the console used to

00:22:20,190 --> 00:22:29,929
you can restore the last kernel log or

00:22:25,950 --> 00:22:35,159
the last canopy and take a look at it

00:22:29,929 --> 00:22:38,730
that's the pistol there is a feature

00:22:35,159 --> 00:22:40,900
called cadent hasn't won here usage

00:22:38,730 --> 00:22:43,540
Cayden for

00:22:40,900 --> 00:22:49,620
right I must say it took a while for me

00:22:43,540 --> 00:22:55,270
to make it work on arm but it'll work it

00:22:49,620 --> 00:22:59,290
k-dubb is is a mechanism a to to take

00:22:55,270 --> 00:23:02,320
card length of the kernel so it uses the

00:22:59,290 --> 00:23:05,440
key exec system call from the kernel to

00:23:02,320 --> 00:23:07,710
run another care no it's like you could

00:23:05,440 --> 00:23:11,020
use the key as actual reboot your kernel

00:23:07,710 --> 00:23:14,650
you just give your economy image it will

00:23:11,020 --> 00:23:18,550
run and the key dump is a mechanism for

00:23:14,650 --> 00:23:21,100
you to use when you want to take the

00:23:18,550 --> 00:23:23,679
care know the cordon of the kernel

00:23:21,100 --> 00:23:28,450
for example candidate crashes you could

00:23:23,679 --> 00:23:31,260
take an image of the the coordinate I

00:23:28,450 --> 00:23:36,880
will show you here in the terminal how

00:23:31,260 --> 00:23:40,360
it works so first you have to an able

00:23:36,880 --> 00:23:43,300
Kaden in the kernel and you should style

00:23:40,360 --> 00:23:46,600
the K exact tools in your huge file

00:23:43,300 --> 00:23:52,150
system and that's what I've done so I

00:23:46,600 --> 00:23:55,540
have here oh and you have to give the

00:23:52,150 --> 00:24:03,160
kernel an option let me show you

00:23:55,540 --> 00:24:04,960
you called crash kernel and you give the

00:24:03,160 --> 00:24:07,900
size of the memory that we want to

00:24:04,960 --> 00:24:10,210
allocate for the crash dump kernel the

00:24:07,900 --> 00:24:15,340
kernel that will capture the core done

00:24:10,210 --> 00:24:17,350
for you so I give him 64 megabytes for

00:24:15,340 --> 00:24:19,870
the crash don't care now I'm used the

00:24:17,350 --> 00:24:21,580
same kind of image and I didn't create

00:24:19,870 --> 00:24:24,250
to care no two different can you image

00:24:21,580 --> 00:24:31,360
so the same can use that will learn my

00:24:24,250 --> 00:24:35,910
image okay and then how how to use this

00:24:31,360 --> 00:24:40,179
feature first you have to you have to

00:24:35,910 --> 00:24:42,190
configure run the key exact to to to

00:24:40,179 --> 00:24:44,860
said to the council load your can you

00:24:42,190 --> 00:24:48,600
image to just reserved a range of memory

00:24:44,860 --> 00:24:50,400
I have here I script to do that

00:24:48,600 --> 00:24:58,800
it's

00:24:50,400 --> 00:25:02,100
here that's my script so if we were that

00:24:58,800 --> 00:25:04,770
did the K is act 2 and we'll give the

00:25:02,100 --> 00:25:06,570
cusack to some parameters that's G for

00:25:04,770 --> 00:25:09,330
the buggy to show the bug information

00:25:06,570 --> 00:25:12,080
the type of my image is as the image is

00:25:09,330 --> 00:25:14,490
an army machine my image ship is in my

00:25:12,080 --> 00:25:17,280
boots directory it's the same image

00:25:14,490 --> 00:25:20,550
diamond bootie here and the command line

00:25:17,280 --> 00:25:23,250
to pass the colonel

00:25:20,550 --> 00:25:28,950
it's it could be any common line

00:25:23,250 --> 00:25:32,970
normally you use here in each disk image

00:25:28,950 --> 00:25:35,940
but I'm just rebooting using the NFS

00:25:32,970 --> 00:25:38,130
protocol again the same huge file system

00:25:35,940 --> 00:25:40,490
there are certain parameters that the

00:25:38,130 --> 00:25:44,700
documentation of the kernel and

00:25:40,490 --> 00:25:47,900
recommend to to pass to these crushed-up

00:25:44,700 --> 00:25:51,650
kernel then I'm giving here three for

00:25:47,900 --> 00:25:55,620
Network support and they say you

00:25:51,650 --> 00:25:58,890
shouldn't boot with SMP support so it

00:25:55,620 --> 00:26:01,770
should run just one CPU - - to take the

00:25:58,890 --> 00:26:07,320
card amp right so I'm going to run this

00:26:01,770 --> 00:26:09,960
script to load my kernel memory great it

00:26:07,320 --> 00:26:10,800
is loaded it is configured now if I have

00:26:09,960 --> 00:26:14,130
a kind of panic

00:26:10,800 --> 00:26:18,030
you just run this image this kind of

00:26:14,130 --> 00:26:21,210
image to to take a coordinate of the

00:26:18,030 --> 00:26:26,940
kernel so I'm running the same comma

00:26:21,210 --> 00:26:30,059
again and let's see if work loading

00:26:26,940 --> 00:26:33,390
could crash them can you buy and then

00:26:30,059 --> 00:26:37,559
can is rebooting with other can that are

00:26:33,390 --> 00:26:43,429
loaded with key exact and then this

00:26:37,559 --> 00:26:49,200
carrier will provide me this file core

00:26:43,429 --> 00:26:51,920
let me remember the name of the file the

00:26:49,200 --> 00:26:51,920
name of the file

00:26:53,720 --> 00:27:04,020
VM Cora think Oh proc in core this is

00:27:01,440 --> 00:27:07,620
the core dump of the car it's an image

00:27:04,020 --> 00:27:11,070
in L format then you can save it as a

00:27:07,620 --> 00:27:13,490
car and open like with gdb there are

00:27:11,070 --> 00:27:18,300
there also there is also a tool called

00:27:13,490 --> 00:27:22,530
crash that is beaut using gdb which when

00:27:18,300 --> 00:27:24,540
I analyze this kind of image copy this

00:27:22,530 --> 00:27:29,960
image it takes a while because it's big

00:27:24,540 --> 00:27:29,960
and it's funny

00:27:30,380 --> 00:27:39,510
almost 45 for 50 hundred megabytes so

00:27:36,660 --> 00:27:42,720
I'm not going to copy this image I have

00:27:39,510 --> 00:27:51,080
I already copied to my machine it is

00:27:42,720 --> 00:27:54,420
here and the files VM car is here so how

00:27:51,080 --> 00:27:57,330
what we should do you should just copy

00:27:54,420 --> 00:28:01,020
this since it is in memory right it's in

00:27:57,330 --> 00:28:05,940
the profile system should copy it so the

00:28:01,020 --> 00:28:09,110
disk like you could do that we're going

00:28:05,940 --> 00:28:12,750
to take away with this copy so I just

00:28:09,110 --> 00:28:15,210
this is no wrong there is a bug with the

00:28:12,750 --> 00:28:17,880
caming leak that's framework and I

00:28:15,210 --> 00:28:22,740
didn't have time to to take a look at

00:28:17,880 --> 00:28:27,120
this so but it work in spite this work

00:28:22,740 --> 00:28:31,050
with the K malloc and then I have here

00:28:27,120 --> 00:28:39,170
the the card up of the kernel where it

00:28:31,050 --> 00:28:42,330
is here and I can just open GDB GDB p--

00:28:39,170 --> 00:28:44,760
you have to give you should be the can

00:28:42,330 --> 00:28:48,110
wait in the elf format with the bug in

00:28:44,760 --> 00:28:48,110
symbols and then the car

00:28:51,580 --> 00:29:05,739
I will start with the tree mode let's

00:29:02,110 --> 00:29:08,590
see if it work and then we have the

00:29:05,739 --> 00:29:14,049
source code the write the line of the

00:29:08,590 --> 00:29:17,320
source code that caused the problem so a

00:29:14,049 --> 00:29:19,950
lot of different ways right - to get the

00:29:17,320 --> 00:29:19,950
same result

00:29:21,899 --> 00:29:31,629
very good my problem here is the 30

00:29:26,679 --> 00:29:33,940
minute limit of the talk that's it for

00:29:31,629 --> 00:29:35,559
the crash stamp analysis let's talk a

00:29:33,940 --> 00:29:37,840
little bit about the bug in the kernel

00:29:35,559 --> 00:29:39,929
which should be like you want to

00:29:37,840 --> 00:29:42,429
interact with about the kernel the

00:29:39,929 --> 00:29:44,919
problem is that you want to use the

00:29:42,429 --> 00:29:48,730
kernel to the bug itself right so it's

00:29:44,919 --> 00:29:51,609
not an easy task and you have the source

00:29:48,730 --> 00:29:54,129
code in one side you have the the kernel

00:29:51,609 --> 00:29:57,340
running on the target in the other side

00:29:54,129 --> 00:30:00,279
so the solution is to use a kind of

00:29:57,340 --> 00:30:02,739
client-server architecture so we have to

00:30:00,279 --> 00:30:06,639
have the courage it observer in the

00:30:02,739 --> 00:30:09,009
kernel and a client in your machine to

00:30:06,639 --> 00:30:11,889
send messages to the kernel to the gdb

00:30:09,009 --> 00:30:14,379
server in the kernel and that's how

00:30:11,889 --> 00:30:15,879
we're going to do here so the kernel has

00:30:14,379 --> 00:30:19,330
an implementation of the gdb server

00:30:15,879 --> 00:30:21,549
called KGB and you could use it to to

00:30:19,330 --> 00:30:24,850
the back of the canyon and that's the

00:30:21,549 --> 00:30:28,450
the architecture you have just to enable

00:30:24,850 --> 00:30:31,989
so how how to make this work you have to

00:30:28,450 --> 00:30:36,429
enable the Acacia to be in a canyon HDB

00:30:31,989 --> 00:30:38,139
is available for a long time you can use

00:30:36,429 --> 00:30:40,899
it to communicate with the can you use

00:30:38,139 --> 00:30:43,480
in the serial port or network but the

00:30:40,899 --> 00:30:46,109
network support is not mainline you have

00:30:43,480 --> 00:30:50,139
to apply patches in the kernel to use it

00:30:46,109 --> 00:30:56,320
now as far as I know the mainline kernel

00:30:50,139 --> 00:30:58,509
supports debugging the serial port so

00:30:56,320 --> 00:31:01,539
first you you compile the carrier with

00:30:58,509 --> 00:31:05,710
the KGB support second you put the care

00:31:01,539 --> 00:31:07,970
now in debug mode and then use your

00:31:05,710 --> 00:31:09,350
beforehand to attempt to connect to the

00:31:07,970 --> 00:31:13,400
Vedic area and start the debugging

00:31:09,350 --> 00:31:16,549
process we start off showing you guys

00:31:13,400 --> 00:31:20,299
the lights how will this laser is

00:31:16,549 --> 00:31:24,980
available right in the website from the

00:31:20,299 --> 00:31:27,980
event I will show you a session of she

00:31:24,980 --> 00:31:30,110
to be here so what I have here I have I

00:31:27,980 --> 00:31:32,960
already compiled the Karen with KGB and

00:31:30,110 --> 00:31:38,510
all we need to to the by the kernel with

00:31:32,960 --> 00:31:43,400
gdb the first thing I would do is reboot

00:31:38,510 --> 00:31:45,080
because it just hangs the first

00:31:43,400 --> 00:31:47,690
so the first step I already done I

00:31:45,080 --> 00:31:54,500
already compiled the kernel with the KGB

00:31:47,690 --> 00:32:01,010
support the second thing it's to put a

00:31:54,500 --> 00:32:03,140
kernel in W mode so you could pass

00:32:01,010 --> 00:32:06,770
parameters to the kind of common line to

00:32:03,140 --> 00:32:10,790
do that or you can at runtime put the

00:32:06,770 --> 00:32:14,059
kernel in gdb mode at runtime we just

00:32:10,790 --> 00:32:14,990
need to configure parameter tell the

00:32:14,059 --> 00:32:16,760
colonel

00:32:14,990 --> 00:32:19,340
what ereports going to choose for the

00:32:16,760 --> 00:32:21,320
debugging images need to send a command

00:32:19,340 --> 00:32:24,549
to enter a double mode and I'm going to

00:32:21,320 --> 00:32:27,650
use here the C's RQ

00:32:24,549 --> 00:32:32,630
sees our kill command to the cannon let

00:32:27,650 --> 00:32:35,169
me show you here I have here a script to

00:32:32,630 --> 00:32:38,150
do that okay gdb

00:32:35,169 --> 00:32:40,669
so this is Mike scripture is very simple

00:32:38,150 --> 00:32:42,169
it's going to configure the kernel with

00:32:40,669 --> 00:32:44,240
the name of the scylla part that's going

00:32:42,169 --> 00:32:49,280
to choose for the bug in and we just put

00:32:44,240 --> 00:32:54,980
a canada buggy mode right I'm going to

00:32:49,280 --> 00:32:57,980
run it and it's running I forgot

00:32:54,980 --> 00:33:00,230
something here I'm using the set apart

00:32:57,980 --> 00:33:02,690
for the console and I'm trying to debug

00:33:00,230 --> 00:33:07,510
the kernel with a set apart that's not

00:33:02,690 --> 00:33:12,140
going to work very well so I will do

00:33:07,510 --> 00:33:15,500
something here there is a project that

00:33:12,140 --> 00:33:17,420
works as a proxy for the SATA port is

00:33:15,500 --> 00:33:20,960
available in the

00:33:17,420 --> 00:33:21,740
the kernel.org website it's called agent

00:33:20,960 --> 00:33:27,910
proxy

00:33:21,740 --> 00:33:30,799
I'm going to use that to to do that so I

00:33:27,910 --> 00:33:32,420
wouldn't need that if I was not using

00:33:30,799 --> 00:33:34,160
the set apart for the consume I said but

00:33:32,420 --> 00:33:39,910
I want the set apart as a console also

00:33:34,160 --> 00:33:39,910
so I'm going to do that so I will just

00:33:41,290 --> 00:33:57,220
stop my my report program I will start

00:33:47,420 --> 00:34:01,130
this agent proxy I'm all I'm almost

00:33:57,220 --> 00:34:08,080
without time right let me finish here I

00:34:01,130 --> 00:34:17,000
will run the the the proxy is running

00:34:08,080 --> 00:34:17,889
now I'm just going to tell that sounded

00:34:17,000 --> 00:34:21,619
sorry

00:34:17,889 --> 00:34:24,440
so this proxy is going to create two two

00:34:21,619 --> 00:34:26,899
TCP ports one of the TCP ports for the

00:34:24,440 --> 00:34:28,369
console the other one is for the gdb

00:34:26,899 --> 00:34:30,020
connection this is going to work as

00:34:28,369 --> 00:34:31,340
aprox is going to receive the commands

00:34:30,020 --> 00:34:35,600
and see all these comments for the

00:34:31,340 --> 00:34:42,500
constants comments for the gdb so one of

00:34:35,600 --> 00:34:47,419
the parts five five five zero

00:34:42,500 --> 00:34:51,109
it's for the the console so the console

00:34:47,419 --> 00:34:52,820
is working and the other one for gdb so

00:34:51,109 --> 00:34:55,520
now I'm going to put the carrier in the

00:34:52,820 --> 00:35:02,390
buggy mode again in started about the

00:34:55,520 --> 00:35:08,020
session great about now I'm going to to

00:35:02,390 --> 00:35:15,650
go to the the kernel source code in X

00:35:08,020 --> 00:35:19,150
I'm going to my herb hf gdb with the

00:35:15,650 --> 00:35:19,150
Karin with the buggy Sybil's

00:35:22,550 --> 00:35:29,000
let me open here the tree mode and I'm

00:35:25,010 --> 00:35:32,360
going to connect using the common target

00:35:29,000 --> 00:35:38,000
remote to connect to the kernel and then

00:35:32,360 --> 00:35:42,650
I have to give localhost 5 v 5m that's

00:35:38,000 --> 00:35:46,430
the other part from the agent proxy and

00:35:42,650 --> 00:35:48,590
it is connected now so I will stop it in

00:35:46,430 --> 00:35:50,990
the breakpoint I will just tell the

00:35:48,590 --> 00:35:55,460
colonel children continue now should be

00:35:50,990 --> 00:35:59,390
running forget about this a lot of

00:35:55,460 --> 00:36:02,480
strange things in the console so it is

00:35:59,390 --> 00:36:03,080
really right I can interrupt it at any

00:36:02,480 --> 00:36:07,610
moment

00:36:03,080 --> 00:36:15,320
type in control C so what I'm going to

00:36:07,610 --> 00:36:17,510
draw here is board I tried to put a

00:36:15,320 --> 00:36:22,220
breakpoint let me see if that works

00:36:17,510 --> 00:36:25,460
ctrl C it is in the in the breakpoints I

00:36:22,220 --> 00:36:28,880
will put here a breakpoint in a function

00:36:25,460 --> 00:36:33,200
of the kernel that function is in the

00:36:28,880 --> 00:36:37,190
GPIO keys driver continue again and I'll

00:36:33,200 --> 00:36:39,370
just press a button from my board and it

00:36:37,190 --> 00:36:42,830
stopped it in the function I can do

00:36:39,370 --> 00:36:45,710
debugging stuff like run the step by

00:36:42,830 --> 00:36:47,780
step print variables and things like

00:36:45,710 --> 00:36:51,650
that so I am the bug in the kernel with

00:36:47,780 --> 00:36:53,450
gdb one thing who is that when you when

00:36:51,650 --> 00:36:56,000
your we were running the kind of with

00:36:53,450 --> 00:37:02,300
gdb if you have any crash it will stop

00:36:56,000 --> 00:37:05,570
in gdb so if I run that catch again we

00:37:02,300 --> 00:37:10,190
have the crash and then need to be we

00:37:05,570 --> 00:37:13,700
have the you can stops the execution and

00:37:10,190 --> 00:37:20,060
you could analyze here that crash again

00:37:13,700 --> 00:37:23,690
right so I think we are out of time we I

00:37:20,060 --> 00:37:24,890
I have here a lot of more tools to to

00:37:23,690 --> 00:37:28,930
show you

00:37:24,890 --> 00:37:34,590
does anyone here wants to have coffee no

00:37:28,930 --> 00:37:43,410
you're fine I'm fine okay Marty minutes

00:37:34,590 --> 00:37:46,560
okay great right so another tool that I

00:37:43,410 --> 00:37:48,660
wanted to show you stray see I don't

00:37:46,560 --> 00:37:52,530
know if anyone here was the this even

00:37:48,660 --> 00:37:55,320
talked earlier today he talked a lot

00:37:52,530 --> 00:37:57,060
about the history of the traces the kind

00:37:55,320 --> 00:38:02,430
of various tools that you had inside a

00:37:57,060 --> 00:38:05,430
kernel so today a Linux and Linux have a

00:38:02,430 --> 00:38:07,230
very good support for tracing there are

00:38:05,430 --> 00:38:09,540
two kinds of trace you have a statute

00:38:07,230 --> 00:38:12,360
racing like you you instrument the

00:38:09,540 --> 00:38:13,920
kernel and at the compilation so you put

00:38:12,360 --> 00:38:16,560
Tracy points in the compilation of the

00:38:13,920 --> 00:38:18,810
kernel and you have dynamic Tracy like

00:38:16,560 --> 00:38:23,690
who you instrument the kernel at runtime

00:38:18,810 --> 00:38:26,450
in at any position of the code of memory

00:38:23,690 --> 00:38:31,680
some examples of how the kernel is

00:38:26,450 --> 00:38:35,220
tracing the the f trace uses the dash T

00:38:31,680 --> 00:38:38,760
G sub parameter from GC to instrument of

00:38:35,220 --> 00:38:41,310
the functions so we just call a function

00:38:38,760 --> 00:38:43,680
when you call a function this is that

00:38:41,310 --> 00:38:48,030
the same plot function of the kernel so

00:38:43,680 --> 00:38:50,610
I have here just just to show you when

00:38:48,030 --> 00:38:54,450
you enable tracing the kernel you have

00:38:50,610 --> 00:38:56,220
this you have a cultural function that

00:38:54,450 --> 00:39:01,800
you can implement to Engstrom in the

00:38:56,220 --> 00:39:03,810
kernel we have trace events to

00:39:01,800 --> 00:39:06,900
instrument specific events in the

00:39:03,810 --> 00:39:09,990
Carignan like scheduling GPIO Indians in

00:39:06,900 --> 00:39:13,200
this example so we have a whole whole

00:39:09,990 --> 00:39:16,680
framework is sure to add the trace event

00:39:13,200 --> 00:39:19,140
to the kernel we have a probe k probe

00:39:16,680 --> 00:39:21,300
they probe is a is a framework for you

00:39:19,140 --> 00:39:23,190
to instrument anywhere in memory you

00:39:21,300 --> 00:39:27,690
could put a breakpoint and run

00:39:23,190 --> 00:39:29,940
everything you want in the kernel so

00:39:27,690 --> 00:39:32,940
this is some examples of the framework

00:39:29,940 --> 00:39:35,850
the can that we have inside the canyon

00:39:32,940 --> 00:39:38,070
for the tools to use it and we have a

00:39:35,850 --> 00:39:39,680
lot of tools they use this this kind of

00:39:38,070 --> 00:39:44,960
frameworks right

00:39:39,680 --> 00:39:51,520
no F tres tres MD that's the common line

00:39:44,960 --> 00:39:55,520
two for f3 is Colonel shark that's

00:39:51,520 --> 00:39:59,030
visual to for the file generated by

00:39:55,520 --> 00:40:03,500
tracing the system tab per care no life

00:39:59,030 --> 00:40:05,420
patch uses and there are many more LTT

00:40:03,500 --> 00:40:09,350
Angie there are many more tools that

00:40:05,420 --> 00:40:12,410
that use this this framework over the

00:40:09,350 --> 00:40:15,170
colonel F traces are is a very useful to

00:40:12,410 --> 00:40:16,940
because it's very simple it is able to

00:40:15,170 --> 00:40:20,450
trace the care and you're using static

00:40:16,940 --> 00:40:22,730
and dynamic probes and the interface is

00:40:20,450 --> 00:40:24,980
very simple just file so just write your

00:40:22,730 --> 00:40:27,620
files using a virtual file system called

00:40:24,980 --> 00:40:29,780
trace of yes you just read the right to

00:40:27,620 --> 00:40:33,290
file them you can trace the colonel so

00:40:29,780 --> 00:40:36,650
it's very very simple interface but

00:40:33,290 --> 00:40:41,720
sometimes dependent dependent on what

00:40:36,650 --> 00:40:46,370
you want to do it's difficult to use

00:40:41,720 --> 00:40:47,780
that trace some examples we have trace

00:40:46,370 --> 00:40:51,950
you can enable the actress and the

00:40:47,780 --> 00:40:55,730
colonel hacky menu of the menu config of

00:40:51,950 --> 00:40:59,060
the colonel UCF trace is simple

00:40:55,730 --> 00:41:00,620
so you just mount the trace FS in a

00:40:59,060 --> 00:41:04,370
director that the folder I tried today

00:41:00,620 --> 00:41:07,520
is Cisco tracing you mount there you

00:41:04,370 --> 00:41:10,160
have the available traces in a file so

00:41:07,520 --> 00:41:12,680
you can trace functions you could trace

00:41:10,160 --> 00:41:17,630
the function graph and have functions in

00:41:12,680 --> 00:41:20,390
a C style you can trace latency of the

00:41:17,630 --> 00:41:22,640
task is you can trace a lot of things so

00:41:20,390 --> 00:41:24,890
for example to trace a function you just

00:41:22,640 --> 00:41:28,700
write function to the file currents

00:41:24,890 --> 00:41:30,290
tracer and catch the trace file so the

00:41:28,700 --> 00:41:32,120
current will start to trace all of the

00:41:30,290 --> 00:41:35,720
functions and there are a lot of files

00:41:32,120 --> 00:41:39,380
that we you can use to configure F trace

00:41:35,720 --> 00:41:41,690
you could set filters now I just want to

00:41:39,380 --> 00:41:43,460
trace this driver you could set the

00:41:41,690 --> 00:41:46,490
functions of this driver to trace the

00:41:43,460 --> 00:41:49,250
car now twist

00:41:46,490 --> 00:41:51,770
Tracy MIDI is a command-line tool that

00:41:49,250 --> 00:41:52,760
is able to write to these files so it is

00:41:51,770 --> 00:41:57,140
easier

00:41:52,760 --> 00:41:59,300
then just write into the file and it is

00:41:57,140 --> 00:42:02,620
able to generate a file called trace dot

00:41:59,300 --> 00:42:05,240
that that you can open the can or shark

00:42:02,620 --> 00:42:10,040
let me show here an example of using

00:42:05,240 --> 00:42:14,870
these tools so I have here let me just

00:42:10,040 --> 00:42:19,270
reboot that's the last thing I'm going

00:42:14,870 --> 00:42:19,270
to do right because we are out of time I

00:42:19,410 --> 00:42:22,530
[Music]

00:42:23,170 --> 00:42:35,120
have here a bug the bug doesn't exist in

00:42:31,220 --> 00:42:38,450
the mainland karaoke when I try to set

00:42:35,120 --> 00:42:44,000
the sepia frag scaling over nurture on

00:42:38,450 --> 00:42:45,830
the mat the kernel actually the comment

00:42:44,000 --> 00:42:49,700
freezes so I don't know what's going on

00:42:45,830 --> 00:42:51,860
I don't know if everything is freeze

00:42:49,700 --> 00:42:58,150
I don't know if just this comment I

00:42:51,860 --> 00:43:07,070
could try to SSH to see if it is runny

00:42:58,150 --> 00:43:12,320
so SSH looks like it is running but it's

00:43:07,070 --> 00:43:16,670
really so how can we use the F trace to

00:43:12,320 --> 00:43:18,380
debug this kind of problem the the the

00:43:16,670 --> 00:43:23,180
program is Arecibo right is just right

00:43:18,380 --> 00:43:26,630
into a file but it is freezing so it is

00:43:23,180 --> 00:43:29,180
hanging inside the kernel so we can use

00:43:26,630 --> 00:43:35,180
F trace this is the command I am going

00:43:29,180 --> 00:43:38,410
to use to debug this problem what's

00:43:35,180 --> 00:43:38,410
going on here

00:43:48,650 --> 00:44:04,580
on demand scaling governor right so I'm

00:44:01,520 --> 00:44:08,390
going to I am using the trace simply

00:44:04,580 --> 00:44:10,790
comment I'm asking to record the events

00:44:08,390 --> 00:44:13,970
from the kernel I'm asking to use the

00:44:10,790 --> 00:44:17,600
function graph tracing and I'm asking to

00:44:13,970 --> 00:44:21,830
not trace interruptions functions inside

00:44:17,600 --> 00:44:25,190
interruptions and I'm asking to follow

00:44:21,830 --> 00:44:28,640
this comment so is it is going to to

00:44:25,190 --> 00:44:30,590
follow to trace just the kind of

00:44:28,640 --> 00:44:33,580
functions from this comment that's the

00:44:30,590 --> 00:44:36,860
comment that is freeze inside aquarium

00:44:33,580 --> 00:44:39,470
when you run it it gives us 0 it should

00:44:36,860 --> 00:44:45,650
I give this error because something is

00:44:39,470 --> 00:44:50,590
wrong right that is a let me try again

00:44:45,650 --> 00:44:50,590
here and echo

00:44:55,500 --> 00:45:03,660
again it is Ronnie

00:45:01,180 --> 00:45:09,510
it is tres in the car no it is

00:45:03,660 --> 00:45:13,930
generating the the trace dot that file

00:45:09,510 --> 00:45:20,140
but it is not returning right because it

00:45:13,930 --> 00:45:27,520
is hanging inside the kernel so let's

00:45:20,140 --> 00:45:32,830
just reboot the board you see what we

00:45:27,520 --> 00:45:38,650
have in the directory that we ran run

00:45:32,830 --> 00:45:42,340
the problem the program we have here in

00:45:38,650 --> 00:45:45,430
these files so this is kind of temporary

00:45:42,340 --> 00:45:48,700
files from the tray CMD command we have

00:45:45,430 --> 00:45:51,550
to generate trace dot that file with

00:45:48,700 --> 00:45:54,250
both of these files because the the

00:45:51,550 --> 00:45:57,460
command didn't complete Tristan D wasn't

00:45:54,250 --> 00:45:59,740
able to generate the file final trace a

00:45:57,460 --> 00:46:01,930
MIDI file so there is a comment from the

00:45:59,740 --> 00:46:04,450
SME dude as the restore comment that is

00:46:01,930 --> 00:46:08,080
able to take both of this trace files

00:46:04,450 --> 00:46:11,770
from CPU 0 and 1 and generate the final

00:46:08,080 --> 00:46:15,040
trace dot that file we can see here

00:46:11,770 --> 00:46:20,590
that's just spew 0 run render the

00:46:15,040 --> 00:46:24,280
command then should take a while I also

00:46:20,590 --> 00:46:29,320
have the comment here in my machine to

00:46:24,280 --> 00:46:32,590
show you guys the trace dot that files

00:46:29,320 --> 00:46:39,820
here and then we can open this comment

00:46:32,590 --> 00:46:42,460
with care no shark that's a two visual

00:46:39,820 --> 00:46:48,130
tool that you can use to trace the

00:46:42,460 --> 00:46:49,780
kernel in a more visual way right so I

00:46:48,130 --> 00:46:56,310
have you here all the functions were

00:46:49,780 --> 00:47:03,340
executed by the my task I will just

00:46:56,310 --> 00:47:06,540
sometimes I don't know if that's 178

00:47:03,340 --> 00:47:10,710
that's the the TIG of the process

00:47:06,540 --> 00:47:16,020
of the comments that we ran I will

00:47:10,710 --> 00:47:18,750
filter by this 178 I don't want to see

00:47:16,020 --> 00:47:24,080
any other process here right

00:47:18,750 --> 00:47:29,370
so how now to find out where the kind of

00:47:24,080 --> 00:47:32,760
freezer right where is the problem I'm

00:47:29,370 --> 00:47:35,760
going to filter here I'm going to search

00:47:32,760 --> 00:47:37,650
for a function of the care that I know

00:47:35,760 --> 00:47:39,810
that is going to be call it on right

00:47:37,650 --> 00:47:42,180
because that's what I'm doing I'm

00:47:39,810 --> 00:47:45,900
writing to a file

00:47:42,180 --> 00:47:51,750
I'm sorry I will search for C's right

00:47:45,900 --> 00:47:53,700
and she's right she's here this is the

00:47:51,750 --> 00:47:57,950
SIS right I can followed all the calls

00:47:53,700 --> 00:48:01,830
his right case is right v FS is right

00:47:57,950 --> 00:48:06,660
since I'm doing graph tracing I can see

00:48:01,830 --> 00:48:11,310
who's calling who and I can see if one

00:48:06,660 --> 00:48:16,200
of the phocians didn't return right the

00:48:11,310 --> 00:48:18,810
FS right that called VF s on - - VF s

00:48:16,200 --> 00:48:24,180
right underline underline of your fresh

00:48:18,810 --> 00:48:30,000
write that call let's see Karen OFS

00:48:24,180 --> 00:48:32,220
thought right and the call goes C the

00:48:30,000 --> 00:48:37,950
first gate right now we're going inside

00:48:32,220 --> 00:48:41,610
the CFS system that called store that

00:48:37,950 --> 00:48:43,380
call start killing governor so we know

00:48:41,610 --> 00:48:46,950
the plong is around here because we are

00:48:43,380 --> 00:48:52,620
trying to set the governor that code is

00:48:46,950 --> 00:48:55,860
CPU frack parts governor that called mu

00:48:52,620 --> 00:48:59,490
techs lock that can't find governor that

00:48:55,860 --> 00:49:07,680
called tried model get that mutex lock

00:48:59,490 --> 00:49:10,580
again and that call looks like it didn't

00:49:07,680 --> 00:49:10,580
return

00:49:19,080 --> 00:49:23,900
the mutex lock should return faster but

00:49:21,690 --> 00:49:31,620
it didn't return so there is something

00:49:23,900 --> 00:49:35,730
wrong with this call what we can do here

00:49:31,620 --> 00:49:41,100
we can't just go to the function CPU

00:49:35,730 --> 00:49:43,400
frag pass governor to see this cause I'm

00:49:41,100 --> 00:49:50,220
going to open the can source code here

00:49:43,400 --> 00:49:55,280
CPU frag bars governor whoops

00:49:50,220 --> 00:50:04,230
take CPU frack bars

00:49:55,280 --> 00:50:10,790
burner so here you can see that this

00:50:04,230 --> 00:50:16,710
function call tax lock find you governor

00:50:10,790 --> 00:50:21,540
you have the function so the function

00:50:16,710 --> 00:50:23,760
will takes lock find you go over no you

00:50:21,540 --> 00:50:26,010
didn't call this mote X and lock because

00:50:23,760 --> 00:50:29,810
we're not seeing here right just find

00:50:26,010 --> 00:50:33,690
vault and try to model get that's here

00:50:29,810 --> 00:50:40,830
then another mote X lock that didn't

00:50:33,690 --> 00:50:43,320
return is not closing the mutex lock and

00:50:40,830 --> 00:50:46,430
as you can see in the code it is in a

00:50:43,320 --> 00:50:50,700
deadlock state because you were doing to

00:50:46,430 --> 00:50:54,180
vertex lock of the same mutex so that's

00:50:50,700 --> 00:50:56,040
the problem so that's another way of the

00:50:54,180 --> 00:51:01,560
bug in the kernel in the case the

00:50:56,040 --> 00:51:04,320
current that hangs about the bug that

00:51:01,560 --> 00:51:07,080
hangs the kernel very good well let's

00:51:04,320 --> 00:51:10,050
finish the talk the conclusion here that

00:51:07,080 --> 00:51:12,920
is more there are more tools here but I

00:51:10,050 --> 00:51:16,080
don't have the time to talk about it

00:51:12,920 --> 00:51:17,520
please take a look after the talk at the

00:51:16,080 --> 00:51:20,820
slides and if you have any questions

00:51:17,520 --> 00:51:23,130
please send me an e-mail the conclusion

00:51:20,820 --> 00:51:25,560
the conclusion is no your tools right

00:51:23,130 --> 00:51:27,780
eye I see a lot of developed developers

00:51:25,560 --> 00:51:31,910
when when they have bugs in the kernel

00:51:27,780 --> 00:51:35,660
dangers go to the print a comment to do

00:51:31,910 --> 00:51:37,640
and sometimes we have more efficient

00:51:35,660 --> 00:51:39,740
tools to the - ah - oh so know your

00:51:37,640 --> 00:51:42,230
tools and use the right tool for the job

00:51:39,740 --> 00:51:43,700
right that's our conclusion there are

00:51:42,230 --> 00:51:49,069
many more - more tools to talk about

00:51:43,700 --> 00:51:52,480
system tattoo / eb PF there is a lot of

00:51:49,069 --> 00:51:55,609
uses nowadays of the EBP have framework

00:51:52,480 --> 00:51:59,180
sometimes preached k solves the problem

00:51:55,609 --> 00:52:00,829
so don't ignore the problem is not using

00:51:59,180 --> 00:52:03,710
the critic a the problem is used just

00:52:00,829 --> 00:52:06,339
the bridge k - the burger the canyon and

00:52:03,710 --> 00:52:07,930
a buggy is fun

00:52:06,339 --> 00:52:14,120
thank you

00:52:07,930 --> 00:52:14,120

YouTube URL: https://www.youtube.com/watch?v=NDXYpR_m1CU


