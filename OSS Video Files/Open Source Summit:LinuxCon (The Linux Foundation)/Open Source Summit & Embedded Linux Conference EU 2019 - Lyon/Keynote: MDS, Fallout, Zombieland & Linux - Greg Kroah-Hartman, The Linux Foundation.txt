Title: Keynote: MDS, Fallout, Zombieland & Linux - Greg Kroah-Hartman, The Linux Foundation
Publication date: 2019-10-28
Playlist: Open Source Summit & Embedded Linux Conference EU 2019 - Lyon
Description: 
	Keynote: MDS, Fallout, Zombieland & Linux - Greg Kroah-Hartman, Linux Kernel Developer and Fellow, The Linux Foundation
Captions: 
	00:00:00,030 --> 00:00:06,089
there we go I get to do a whole talk in

00:00:01,949 --> 00:00:07,740
icons this is a talk a follow-on from

00:00:06,089 --> 00:00:11,010
last year where I gave a talk about

00:00:07,740 --> 00:00:12,900
spectra meltdown what happened then and

00:00:11,010 --> 00:00:14,849
then let's talk about what's happened in

00:00:12,900 --> 00:00:17,160
the year since then a lot of things

00:00:14,849 --> 00:00:20,730
there's new icons there's new logos and

00:00:17,160 --> 00:00:22,740
there's more fun I am again gonna vastly

00:00:20,730 --> 00:00:24,750
oversimplify everything here there's a

00:00:22,740 --> 00:00:27,060
whole bunch of good technical background

00:00:24,750 --> 00:00:29,220
here full details resources go to that

00:00:27,060 --> 00:00:31,500
link it's all online the whole talk is

00:00:29,220 --> 00:00:34,710
there notes everything if you wanna know

00:00:31,500 --> 00:00:37,770
more so that being said let's just dive

00:00:34,710 --> 00:00:39,510
into technical stuff so um this year

00:00:37,770 --> 00:00:41,640
earlier beginning of this year we had

00:00:39,510 --> 00:00:44,430
something that came out that was noticed

00:00:41,640 --> 00:00:46,500
are reported as MDS that was a common

00:00:44,430 --> 00:00:48,840
phrase for this and this is all these

00:00:46,500 --> 00:00:51,180
bugs that happening are all bugs in

00:00:48,840 --> 00:00:53,340
hardware not bugs in software so they're

00:00:51,180 --> 00:00:54,780
bugs that the software and the kernel or

00:00:53,340 --> 00:00:56,850
the operating system for other operating

00:00:54,780 --> 00:00:59,579
systems these affect everybody has to

00:00:56,850 --> 00:01:01,620
fix cuz they're bugs in hardware they're

00:00:59,579 --> 00:01:03,600
same family that spectrum meltdown was

00:01:01,620 --> 00:01:05,369
in so it's kind of the same idea and

00:01:03,600 --> 00:01:08,970
everything we're doing here is we're

00:01:05,369 --> 00:01:11,310
exploiting the bugs in the hardware when

00:01:08,970 --> 00:01:13,290
the kernel in the chip is trying to look

00:01:11,310 --> 00:01:15,420
into the future trying to speculate as

00:01:13,290 --> 00:01:17,580
to what's going to happen so chips these

00:01:15,420 --> 00:01:18,780
days go down in multiple paths thinking

00:01:17,580 --> 00:01:20,009
they're gonna figure out what's gonna

00:01:18,780 --> 00:01:21,689
happen in the future and when they do

00:01:20,009 --> 00:01:23,369
when the code doesn't go down that path

00:01:21,689 --> 00:01:25,250
they throw it away and keep on going the

00:01:23,369 --> 00:01:27,810
other way when you throw things away

00:01:25,250 --> 00:01:29,820
turns out it wasn't always throwing

00:01:27,810 --> 00:01:31,200
everything away and there's all these

00:01:29,820 --> 00:01:32,850
different variants there's all these

00:01:31,200 --> 00:01:34,650
different issues with involved in here

00:01:32,850 --> 00:01:36,030
and there's different types of this

00:01:34,650 --> 00:01:37,829
stuff and let's go through some of these

00:01:36,030 --> 00:01:39,210
little types because this is what's been

00:01:37,829 --> 00:01:41,490
announced and what is keeps being

00:01:39,210 --> 00:01:42,090
announced this past year and like I said

00:01:41,490 --> 00:01:43,229
last year

00:01:42,090 --> 00:01:45,540
these problems are going to be with us

00:01:43,229 --> 00:01:48,420
for a very long time they're not going

00:01:45,540 --> 00:01:51,930
away they're just not going away it's

00:01:48,420 --> 00:01:54,479
gonna be with us we got more coming so

00:01:51,930 --> 00:01:56,759
I'm - yes MDS it equals the same type of

00:01:54,479 --> 00:01:59,159
thing there's read all fallout zombie

00:01:56,759 --> 00:02:03,619
land and others again these are CPU bugs

00:01:59,159 --> 00:02:06,149
all the same problem um again

00:02:03,619 --> 00:02:07,530
speculation but the cool thing is it's

00:02:06,149 --> 00:02:08,940
being found by different research teams

00:02:07,530 --> 00:02:11,099
we have researchers all around the world

00:02:08,940 --> 00:02:12,470
now a bunch of Netherlands a bunch of

00:02:11,099 --> 00:02:14,810
other universities

00:02:12,470 --> 00:02:16,730
that are finding bugs in these issues

00:02:14,810 --> 00:02:20,000
and funding is there finding them by

00:02:16,730 --> 00:02:22,210
reading patents they're doing the

00:02:20,000 --> 00:02:24,650
research reading the patents of what

00:02:22,210 --> 00:02:26,750
Intel and IBM and other people have done

00:02:24,650 --> 00:02:28,490
in the past and designing CPUs and

00:02:26,750 --> 00:02:32,120
they're finding problems in areas to

00:02:28,490 --> 00:02:34,340
find they're so open patent issues are

00:02:32,120 --> 00:02:36,980
affecting security problems it's kind of

00:02:34,340 --> 00:02:38,210
funny to solve these issues you have to

00:02:36,980 --> 00:02:39,830
update your kernel and you have to

00:02:38,210 --> 00:02:44,840
update your bias there's all microcode

00:02:39,830 --> 00:02:46,760
updates inside the CPU is a whole nother

00:02:44,840 --> 00:02:48,830
world we've learned more than I ever

00:02:46,760 --> 00:02:51,860
wanted to know about how a CPU works

00:02:48,830 --> 00:02:53,330
inside and I'm even learning more and

00:02:51,860 --> 00:02:54,500
more there's all sorts of fun terms I'm

00:02:53,330 --> 00:02:56,480
going to get to them some of them now

00:02:54,500 --> 00:02:57,709
but CPUs inside are a whole different

00:02:56,480 --> 00:02:59,300
state machine you think you know what

00:02:57,709 --> 00:03:00,950
they look like on the outside and how

00:02:59,300 --> 00:03:03,440
registers work it's something totally

00:03:00,950 --> 00:03:05,680
different inside and now that inside

00:03:03,440 --> 00:03:09,680
Miss and that inside the way CPUs are

00:03:05,680 --> 00:03:11,900
using and being how they work is being

00:03:09,680 --> 00:03:13,160
exposed outside that barrier and that's

00:03:11,900 --> 00:03:18,560
the problem there's that barriers

00:03:13,160 --> 00:03:21,709
becoming porous so let's talk about MDS

00:03:18,560 --> 00:03:23,750
this one MDS is one program curried and

00:03:21,709 --> 00:03:25,940
other programs data all these issues are

00:03:23,750 --> 00:03:27,470
not severe that you can't modify what

00:03:25,940 --> 00:03:29,150
somebody else is doing but you can read

00:03:27,470 --> 00:03:30,709
secrets from somebody else and that's a

00:03:29,150 --> 00:03:33,110
bad thing when you're running in a

00:03:30,709 --> 00:03:35,989
shared environment cloud computing even

00:03:33,110 --> 00:03:37,640
browser tabs to other browser tabs you

00:03:35,989 --> 00:03:40,070
can cross virtual machine boundaries for

00:03:37,640 --> 00:03:42,709
a lot of this MDS you can and MDS

00:03:40,070 --> 00:03:44,390
exploits the fact that CPUs like Intel

00:03:42,709 --> 00:03:46,430
CPUs are hyper threaded they have

00:03:44,390 --> 00:03:49,010
multiple cores on the same die that

00:03:46,430 --> 00:03:52,130
share caches when you share caches and

00:03:49,010 --> 00:03:55,489
the TLB ease you can actually detect

00:03:52,130 --> 00:03:58,640
what the other CPU core was doing and by

00:03:55,489 --> 00:04:02,989
doing that you exploit this issue and I

00:03:58,640 --> 00:04:05,540
really want to call it open BSD a year

00:04:02,989 --> 00:04:06,920
ago they said disable hyper threading

00:04:05,540 --> 00:04:09,350
there's gonna be lots of problems here

00:04:06,920 --> 00:04:10,790
we don't think we found them all and so

00:04:09,350 --> 00:04:12,049
they said stop doing this and

00:04:10,790 --> 00:04:14,390
everybody's like yeah that's gonna slow

00:04:12,049 --> 00:04:15,860
down things but they were right they're

00:04:14,390 --> 00:04:18,100
right for the wrong reasons but they

00:04:15,860 --> 00:04:18,100
were right

00:04:18,140 --> 00:04:22,669
they chose security over performance at

00:04:20,900 --> 00:04:25,240
an earlier stage than anybody else does

00:04:22,669 --> 00:04:26,889
today all the Linux distros everybody

00:04:25,240 --> 00:04:28,240
disable hyper-threading and that's the

00:04:26,889 --> 00:04:31,000
only way you can solve some of these

00:04:28,240 --> 00:04:33,490
issues with kernel changes in BIOS

00:04:31,000 --> 00:04:35,229
updates so OpenBSD by disabling hyper

00:04:33,490 --> 00:04:37,210
saying didn't solve all the problems but

00:04:35,229 --> 00:04:39,039
they solved a bunch of them earlier

00:04:37,210 --> 00:04:40,569
before everybody else so I really want

00:04:39,039 --> 00:04:44,410
to call props to them they did a good

00:04:40,569 --> 00:04:46,840
job they told people to disable in June

00:04:44,410 --> 00:04:49,509
as whole people disable in August all

00:04:46,840 --> 00:04:51,729
the kernel distro said last beginning of

00:04:49,509 --> 00:04:54,550
last year disable it now so all new

00:04:51,729 --> 00:04:56,080
installs basically Linux distros will

00:04:54,550 --> 00:04:58,360
disable hyper threading um

00:04:56,080 --> 00:05:01,419
Microsoft is the same Apple I'm not sure

00:04:58,360 --> 00:05:03,069
but they don't really affect it here so

00:05:01,419 --> 00:05:06,099
riddle was the first one that was

00:05:03,069 --> 00:05:08,919
published its called rogue in flight

00:05:06,099 --> 00:05:10,240
data load so CPUs inside again we're

00:05:08,919 --> 00:05:11,740
gonna talk about how CPUs work inside

00:05:10,240 --> 00:05:13,900
there's something called a line fill

00:05:11,740 --> 00:05:16,120
buffer and ports and this is how data

00:05:13,900 --> 00:05:18,599
comes into that how it gets used and

00:05:16,120 --> 00:05:21,400
before it gets passed on to another area

00:05:18,599 --> 00:05:22,979
so this is because of the way these work

00:05:21,400 --> 00:05:25,270
you can steal data across applications

00:05:22,979 --> 00:05:28,870
you can steal it across virtual machines

00:05:25,270 --> 00:05:31,000
and secure enclaves which is really

00:05:28,870 --> 00:05:33,639
funny because these are supposed to be

00:05:31,000 --> 00:05:36,880
secure so inside Intel chips there's

00:05:33,639 --> 00:05:38,259
something called I think it's SGX secure

00:05:36,880 --> 00:05:40,389
Enclave where you can run code that

00:05:38,259 --> 00:05:42,759
nobody else can see outside of it it's

00:05:40,389 --> 00:05:45,310
really porous you can see right through

00:05:42,759 --> 00:05:47,590
this thing to solve this in the kernel

00:05:45,310 --> 00:05:49,690
it takes a BIOS update but you also we

00:05:47,590 --> 00:05:50,949
in the kernel we fix this by flushing

00:05:49,690 --> 00:05:53,199
the buffers every time we switched

00:05:50,949 --> 00:05:55,330
context so we stop this we flush the

00:05:53,199 --> 00:05:57,150
buffer we keep on going solves the

00:05:55,330 --> 00:05:59,680
problem everybody's happy

00:05:57,150 --> 00:06:01,750
fallout another cool logo came out the

00:05:59,680 --> 00:06:04,120
same time and so those were load these

00:06:01,750 --> 00:06:05,500
are store buffers and side CPUs how CPUs

00:06:04,120 --> 00:06:07,000
right things inside before they do

00:06:05,500 --> 00:06:08,590
things this one's a little more

00:06:07,000 --> 00:06:10,690
dangerous and that you can read kernel

00:06:08,590 --> 00:06:12,099
data from with from user space doesn't

00:06:10,690 --> 00:06:13,240
cross the virtual machine boundary but

00:06:12,099 --> 00:06:15,370
you should have so you have secrets

00:06:13,240 --> 00:06:17,530
inside the kernel keys that are fun

00:06:15,370 --> 00:06:20,169
things you can now read them and this

00:06:17,530 --> 00:06:22,539
totally broke the fact that the kernel

00:06:20,169 --> 00:06:25,240
does random addressing for when it

00:06:22,539 --> 00:06:26,560
starts up so that it actually it made it

00:06:25,240 --> 00:06:29,139
worse

00:06:26,560 --> 00:06:31,449
so the random stuff just makes it easier

00:06:29,139 --> 00:06:33,339
to exploit meltdown mitigation when we

00:06:31,449 --> 00:06:35,199
added that to the kernel made this

00:06:33,339 --> 00:06:36,639
easier to exploit so we tried to fix one

00:06:35,199 --> 00:06:38,380
thing and make something else easier and

00:06:36,639 --> 00:06:39,090
again we fix this by flushing the

00:06:38,380 --> 00:06:41,780
buffers

00:06:39,090 --> 00:06:45,020
and move on again bias update fix it

00:06:41,780 --> 00:06:48,270
another one Zombieland best logo ever

00:06:45,020 --> 00:06:50,310
these guys had a cool demo so go look at

00:06:48,270 --> 00:06:52,590
our website look at the demo run it you

00:06:50,310 --> 00:06:55,250
can steal data across applications

00:06:52,590 --> 00:06:58,410
across JavaScript across browser tabs

00:06:55,250 --> 00:07:01,169
really really scary stuff good logo

00:06:58,410 --> 00:07:03,930
because it's scary I'm just like riddle

00:07:01,169 --> 00:07:06,600
slime fill buffers another to little

00:07:03,930 --> 00:07:09,900
tiny thing inside the CPU again still

00:07:06,600 --> 00:07:12,120
data applications secure enclaves we fix

00:07:09,900 --> 00:07:15,810
this by flushing the CPU buffers when we

00:07:12,120 --> 00:07:17,070
context switch and a BIOS update I mean

00:07:15,810 --> 00:07:18,960
there's a whole bunch of other variants

00:07:17,070 --> 00:07:21,030
that came out being in the Year stored a

00:07:18,960 --> 00:07:22,710
leak forwarding meltdown you see again

00:07:21,030 --> 00:07:25,620
all these things we can steal data

00:07:22,710 --> 00:07:27,540
across secure boundaries we fixed it by

00:07:25,620 --> 00:07:31,200
flushing the buffers on every context

00:07:27,540 --> 00:07:32,550
which um hand middle this year after I

00:07:31,200 --> 00:07:34,950
started giving this talk another one

00:07:32,550 --> 00:07:38,190
came out swapped you yes another like

00:07:34,950 --> 00:07:41,250
spectra again found by reading Intel

00:07:38,190 --> 00:07:43,350
patents which was really funny and again

00:07:41,250 --> 00:07:46,110
when we do these flushing when we flush

00:07:43,350 --> 00:07:47,610
these buffers it takes time so this one

00:07:46,110 --> 00:07:49,169
was a one to five percent performance

00:07:47,610 --> 00:07:52,200
hit the other one that other performance

00:07:49,169 --> 00:07:54,510
hits we flush the buffers every time we

00:07:52,200 --> 00:07:55,590
hit this stuff and that's the only way

00:07:54,510 --> 00:08:01,849
to solve this problem

00:07:55,590 --> 00:08:04,169
well flushing buffers maybe takes time

00:08:01,849 --> 00:08:05,669
every single one of these mitigations to

00:08:04,169 --> 00:08:08,300
solve these problems to solve these

00:08:05,669 --> 00:08:10,410
Hardware bugs slows down your machine

00:08:08,300 --> 00:08:12,389
people have tried coming up with ideas

00:08:10,410 --> 00:08:14,250
called gang scheduling to only schedule

00:08:12,389 --> 00:08:17,310
certain applications on certain parts of

00:08:14,250 --> 00:08:18,960
certain cores it isn't there yet other

00:08:17,310 --> 00:08:21,120
operating systems to try this as well

00:08:18,960 --> 00:08:23,639
there's patches on the LK ml to try and

00:08:21,120 --> 00:08:25,800
do this well the performance is horrible

00:08:23,639 --> 00:08:27,240
it's much much faster to just disable

00:08:25,800 --> 00:08:28,950
hyper threading than to try gang

00:08:27,240 --> 00:08:31,169
scheduling gang scheduling something

00:08:28,950 --> 00:08:32,729
that's been in academia for forever it

00:08:31,169 --> 00:08:35,400
isn't ready for the real world just yet

00:08:32,729 --> 00:08:36,029
so the only way you can solve all these

00:08:35,400 --> 00:08:38,190
problems

00:08:36,029 --> 00:08:39,810
it's disable hyper threading and do

00:08:38,190 --> 00:08:41,430
kernel updates so you can't just do one

00:08:39,810 --> 00:08:44,459
or the other you have to do in both even

00:08:41,430 --> 00:08:46,440
open BSD had to do the other thing we

00:08:44,459 --> 00:08:48,360
are slowing down your processor we're

00:08:46,440 --> 00:08:49,920
slowing down your workloads and that's

00:08:48,360 --> 00:08:52,600
the only way you can solve this problems

00:08:49,920 --> 00:08:54,820
sorry but that is

00:08:52,600 --> 00:08:57,190
but how much does a slowdown depends on

00:08:54,820 --> 00:08:59,140
exactly what you do so I do two things

00:08:57,190 --> 00:09:01,030
on my day to day I read lots of email

00:08:59,140 --> 00:09:02,230
write lots of email but I bundle up a

00:09:01,030 --> 00:09:03,970
whole bunch of patches and send them off

00:09:02,230 --> 00:09:06,040
to a build machine and that bundling up

00:09:03,970 --> 00:09:08,020
of things and sending it all off is

00:09:06,040 --> 00:09:09,670
pretty much all IO bound and with all

00:09:08,020 --> 00:09:12,550
this mitigation in fact it just is about

00:09:09,670 --> 00:09:13,990
2% slower so not really a huge

00:09:12,550 --> 00:09:16,030
difference but the other thing I do all

00:09:13,990 --> 00:09:17,860
the time is I build kernels my machine

00:09:16,030 --> 00:09:19,510
my build machines building kernels my

00:09:17,860 --> 00:09:22,360
machines building kernels and with all

00:09:19,510 --> 00:09:24,280
that stuff I see a slowdown of about 15

00:09:22,360 --> 00:09:27,610
and now I didn't update the numbers

00:09:24,280 --> 00:09:29,770
about 20% slowdown and that's real

00:09:27,610 --> 00:09:31,270
that's real and that's noticeable and in

00:09:29,770 --> 00:09:34,060
order to solve these security problems

00:09:31,270 --> 00:09:35,980
you will slow down but again it tends on

00:09:34,060 --> 00:09:38,530
your workload some workloads are fine

00:09:35,980 --> 00:09:41,050
some workloads are not the scary thing

00:09:38,530 --> 00:09:44,250
is the kernel developers we fight for a

00:09:41,050 --> 00:09:46,480
1% speed increase 2% speed increase

00:09:44,250 --> 00:09:48,490
people updating to newer kernel should

00:09:46,480 --> 00:09:50,620
always go faster and better and that's

00:09:48,490 --> 00:09:52,450
normally true we put these mitigations

00:09:50,620 --> 00:09:54,820
for these security things in and we go

00:09:52,450 --> 00:09:56,740
back like a year in performance it's sad

00:09:54,820 --> 00:09:58,420
if you're using a year old kernel you go

00:09:56,740 --> 00:10:02,320
back you and further use the latest

00:09:58,420 --> 00:10:04,680
kernel you might come out equal but it

00:10:02,320 --> 00:10:07,450
is a problem we do slow things down now

00:10:04,680 --> 00:10:08,920
sis calls and the kernel are expensive

00:10:07,450 --> 00:10:11,710
little excuse to have the fastest

00:10:08,920 --> 00:10:13,660
syscalls available now so this calls you

00:10:11,710 --> 00:10:15,220
slow down so you have to be aware of

00:10:13,660 --> 00:10:17,350
that in your application in your

00:10:15,220 --> 00:10:19,420
workload and you have to take that into

00:10:17,350 --> 00:10:21,310
consideration but everybody's workload

00:10:19,420 --> 00:10:26,350
is different you need to test to see

00:10:21,310 --> 00:10:28,930
what's going on now you have to choose

00:10:26,350 --> 00:10:30,610
between performance or security and

00:10:28,930 --> 00:10:32,080
that's something you should never have

00:10:30,610 --> 00:10:33,730
to choose you should be able to buy some

00:10:32,080 --> 00:10:35,950
hardware and expect it to work how its

00:10:33,730 --> 00:10:36,880
work but now you need to choose and you

00:10:35,950 --> 00:10:39,010
need to figure out what your cloud

00:10:36,880 --> 00:10:41,590
provider chose I've been giving this

00:10:39,010 --> 00:10:43,870
talk pretty much all year up until two

00:10:41,590 --> 00:10:46,690
weeks ago my cloud provider chose speed

00:10:43,870 --> 00:10:48,340
over security they finally switched that

00:10:46,690 --> 00:10:50,290
and now they're choosing security over

00:10:48,340 --> 00:10:52,450
speed and my build loads went down but

00:10:50,290 --> 00:10:54,100
it's now secure check your cloud

00:10:52,450 --> 00:10:55,810
provider check what your system is

00:10:54,100 --> 00:10:58,030
running on everybody did differently

00:10:55,810 --> 00:11:02,140
hopefully they've gotten it right but it

00:10:58,030 --> 00:11:05,310
does affect you and kind of

00:11:02,140 --> 00:11:07,080
tongue-in-cheek make linux fast again

00:11:05,310 --> 00:11:09,480
gives you the kernel command-line to

00:11:07,080 --> 00:11:12,750
disable all this stuff I did that and my

00:11:09,480 --> 00:11:14,190
kernel builds on my laptop go by 20% if

00:11:12,750 --> 00:11:15,930
you know what you're running and you

00:11:14,190 --> 00:11:17,610
know your environment you can disable

00:11:15,930 --> 00:11:19,170
all this stuff if you are running as a

00:11:17,610 --> 00:11:20,580
secure environment that you do trust all

00:11:19,170 --> 00:11:22,830
the applications and you do trust your

00:11:20,580 --> 00:11:24,360
users then do this and you get to speed

00:11:22,830 --> 00:11:26,160
back but otherwise if you're running in

00:11:24,360 --> 00:11:28,130
the shared environment running untrusted

00:11:26,160 --> 00:11:31,140
code like JavaScript or even a browser

00:11:28,130 --> 00:11:33,720
do this you need to be secure about this

00:11:31,140 --> 00:11:37,050
stuff but it's a good list of all the

00:11:33,720 --> 00:11:38,970
command-line options last year I talked

00:11:37,050 --> 00:11:41,970
about Linux inspector and meltdown and

00:11:38,970 --> 00:11:44,760
how we were involved or really not

00:11:41,970 --> 00:11:46,680
involved in all this stuff this time we

00:11:44,760 --> 00:11:48,510
were better on the stuff that came out

00:11:46,680 --> 00:11:51,180
we had patches available on the

00:11:48,510 --> 00:11:54,330
announcement date we Intel notified most

00:11:51,180 --> 00:11:55,260
of us in advance and time we worked with

00:11:54,330 --> 00:11:57,480
all the other operating system

00:11:55,260 --> 00:11:59,310
developers we have a pass and way to do

00:11:57,480 --> 00:12:01,970
this stuff we have a process and that

00:11:59,310 --> 00:12:04,170
place in which to talk in a secure way

00:12:01,970 --> 00:12:06,390
excuse me see our patches and work

00:12:04,170 --> 00:12:08,670
together it's really really good but it

00:12:06,390 --> 00:12:10,770
isn't working really well yet because

00:12:08,670 --> 00:12:13,740
Debian was only notified about all this

00:12:10,770 --> 00:12:17,150
stuff 48 hours in advance because they

00:12:13,740 --> 00:12:20,910
weren't considered a company turns out

00:12:17,150 --> 00:12:23,430
80% of the world runs either Debian or

00:12:20,910 --> 00:12:25,650
kernel.org kernels the world has moved

00:12:23,430 --> 00:12:27,600
on the number of processors out there

00:12:25,650 --> 00:12:29,100
this is not including Android the number

00:12:27,600 --> 00:12:31,020
of processors out there running Linux

00:12:29,100 --> 00:12:32,070
including Android because the rest of

00:12:31,020 --> 00:12:38,550
the world is a rounding error for

00:12:32,070 --> 00:12:41,100
Android 2.5 billion devices crazy 80

00:12:38,550 --> 00:12:43,290
percent run Debian or cronut org so that

00:12:41,100 --> 00:12:45,540
is very important to keep in mind it's

00:12:43,290 --> 00:12:47,670
not just Red Hat it's not Sousa it's not

00:12:45,540 --> 00:12:50,370
canonical its kernel Oregon w those are

00:12:47,670 --> 00:12:51,660
still big issues big users but the rest

00:12:50,370 --> 00:12:54,240
of the world has got even bigger so to

00:12:51,660 --> 00:12:56,670
ignore the community distros and why not

00:12:54,240 --> 00:12:57,900
is a big big mistake Intel's now learned

00:12:56,670 --> 00:13:00,570
they're finally talking with Debian

00:12:57,900 --> 00:13:02,580
kernel.org me so it's getting better

00:13:00,570 --> 00:13:04,380
but it still has some work to do I said

00:13:02,580 --> 00:13:06,450
a meeting with Intel all the companies

00:13:04,380 --> 00:13:07,560
got all the distros and kernel

00:13:06,450 --> 00:13:09,690
developers got together a couple weeks

00:13:07,560 --> 00:13:14,180
ago and we yelled at each other and it

00:13:09,690 --> 00:13:14,180
was all fun we're are working together

00:13:14,209 --> 00:13:18,750
Mork fixes so the big problem is we

00:13:17,100 --> 00:13:21,630
everybody sees the cool logo

00:13:18,750 --> 00:13:23,100
against press patches go out and

00:13:21,630 --> 00:13:25,230
everybody updates our machines they

00:13:23,100 --> 00:13:26,580
think they're fine but then a fix but

00:13:25,230 --> 00:13:27,960
the curl developers we find problems

00:13:26,580 --> 00:13:29,610
because we can't test this in the public

00:13:27,960 --> 00:13:32,190
so we don't see all the real workloads

00:13:29,610 --> 00:13:33,750
so weird hardware issues out there so

00:13:32,190 --> 00:13:35,250
then we fix more problems and then we

00:13:33,750 --> 00:13:37,800
find more bugs and we fix them and we

00:13:35,250 --> 00:13:41,010
fix them and fix them we're still fixing

00:13:37,800 --> 00:13:43,080
spectra one issues two years later you

00:13:41,010 --> 00:13:44,940
have to keep updating your kernel so

00:13:43,080 --> 00:13:46,590
always update your kernel always take

00:13:44,940 --> 00:13:48,660
the latest kernel and always take the

00:13:46,590 --> 00:13:50,310
latest bias update those latest those

00:13:48,660 --> 00:13:52,200
bias updates those micro code updates

00:13:50,310 --> 00:13:54,240
are being pushed by Intel and the

00:13:52,200 --> 00:13:57,000
vendors they're testing them take them

00:13:54,240 --> 00:14:00,270
they're there for a reason not just for

00:13:57,000 --> 00:14:02,370
fun take them reboot the machines reboot

00:14:00,270 --> 00:14:04,590
your world Wilbert the cloud that's fine

00:14:02,370 --> 00:14:06,890
you have to keep updating your kernel

00:14:04,590 --> 00:14:09,360
and you have to keep updating your bias

00:14:06,890 --> 00:14:09,900
everybody's like we don't want update

00:14:09,360 --> 00:14:11,460
our kernel

00:14:09,900 --> 00:14:13,320
we just want certain patches and whatnot

00:14:11,460 --> 00:14:16,440
but that's not how the Linux kernel

00:14:13,320 --> 00:14:18,450
security model works we do kernel

00:14:16,440 --> 00:14:21,060
security fixes at least once a week that

00:14:18,450 --> 00:14:23,370
I know of there's a lot I don't know

00:14:21,060 --> 00:14:25,410
because a lot of bugs that happen and

00:14:23,370 --> 00:14:27,210
are fixed in a kernel aren't determined

00:14:25,410 --> 00:14:28,560
to be security issues until years later

00:14:27,210 --> 00:14:32,460
because somebody looks deep in that

00:14:28,560 --> 00:14:35,430
we're fixing 22 or applying 22 to 25

00:14:32,460 --> 00:14:38,010
changes a day to the stable Linux kernel

00:14:35,430 --> 00:14:40,620
we're to the old kernel that was four

00:14:38,010 --> 00:14:42,839
years old 4.4 I'm still doing 10 patches

00:14:40,620 --> 00:14:46,230
a day these are bugs being fixed in a

00:14:42,839 --> 00:14:48,589
kernel take these fixes these the kernel

00:14:46,230 --> 00:14:51,510
treats all bugs as a bug is a bug

00:14:48,589 --> 00:14:53,310
security or not we fix it we move on so

00:14:51,510 --> 00:14:54,960
don't be just worried about these times

00:14:53,310 --> 00:14:55,350
when we have special press releases and

00:14:54,960 --> 00:14:57,930
whatnot

00:14:55,350 --> 00:14:59,570
we take fixes and we think we find

00:14:57,930 --> 00:15:02,640
problems we fix them every single day

00:14:59,570 --> 00:15:04,320
Jim talked about syz bot is finding so

00:15:02,640 --> 00:15:06,000
many bugs buzzing and testing these

00:15:04,320 --> 00:15:07,740
things they're going to the stable

00:15:06,000 --> 00:15:09,510
kernels they're getting back ported and

00:15:07,740 --> 00:15:12,300
everybody's happy you need to keep

00:15:09,510 --> 00:15:17,660
taking these fixes and don't look for

00:15:12,300 --> 00:15:21,060
CBE's CBE's mean nothing for the kernel

00:15:17,660 --> 00:15:22,920
very very few see bees ever get assigned

00:15:21,060 --> 00:15:25,530
for the colonel again I'm fixing 20

00:15:22,920 --> 00:15:27,839
patches it fixes a day I could create a

00:15:25,530 --> 00:15:29,280
CV for every single one of them I was

00:15:27,839 --> 00:15:32,760
told not to because it would burn the

00:15:29,280 --> 00:15:34,140
world down it's kind of funny but

00:15:32,760 --> 00:15:36,090
I'll talk about this in Paris a couple

00:15:34,140 --> 00:15:37,860
weeks ago we are talking about ways to

00:15:36,090 --> 00:15:40,320
track this a little bit better but just

00:15:37,860 --> 00:15:41,910
take all the security updates again see

00:15:40,320 --> 00:15:43,950
bees do not work very well for the

00:15:41,910 --> 00:15:46,380
colonel look at spectra spectra one had

00:15:43,950 --> 00:15:48,270
one CVE and it's taken like a couple

00:15:46,380 --> 00:15:49,620
thousand patches over two years they

00:15:48,270 --> 00:15:51,300
don't list them but you don't realize

00:15:49,620 --> 00:15:53,310
that you need to keep updating to solve

00:15:51,300 --> 00:15:55,500
these problems there's a link on my talk

00:15:53,310 --> 00:15:57,840
on how the colonel security team works

00:15:55,500 --> 00:16:00,660
the reasons behind how we do what we do

00:15:57,840 --> 00:16:03,090
and how patches get out to you just take

00:16:00,660 --> 00:16:07,710
all the stable updates all the time in

00:16:03,090 --> 00:16:09,360
fact the Android Google last year I'll

00:16:07,710 --> 00:16:11,160
talk about that a minute so look at this

00:16:09,360 --> 00:16:13,710
yeah Google did this work to look at all

00:16:11,160 --> 00:16:16,140
the CVS for the kernel for the past 12

00:16:13,710 --> 00:16:20,640
years high only a thousand see bees

00:16:16,140 --> 00:16:23,310
that's ridiculously slow the majority of

00:16:20,640 --> 00:16:25,200
all fixes have a negative date so see

00:16:23,310 --> 00:16:28,800
bees are asked for on an average of a

00:16:25,200 --> 00:16:30,870
fixed so it's fixed 100 days ago that

00:16:28,800 --> 00:16:33,120
shows you the see bees really don't mean

00:16:30,870 --> 00:16:34,680
anything it shows you that people use

00:16:33,120 --> 00:16:37,610
see bees in order to grease the wheels

00:16:34,680 --> 00:16:39,720
of their internal engineering processes

00:16:37,610 --> 00:16:41,220
88 of them fixed on a week standard

00:16:39,720 --> 00:16:44,790
deviation for these numbers is over a

00:16:41,220 --> 00:16:46,620
year the biggest one is one we fix 20 we

00:16:44,790 --> 00:16:48,930
were asked this for a CB for a fix we

00:16:46,620 --> 00:16:50,550
fix 12 years ago longest one is we

00:16:48,930 --> 00:16:52,500
haven't fixed it in 10 years maybe

00:16:50,550 --> 00:16:55,140
Seabees don't really matter they don't

00:16:52,500 --> 00:16:58,560
I'll tell you that so don't think of CBS

00:16:55,140 --> 00:17:00,810
as Colonel issues but look at what

00:16:58,560 --> 00:17:03,210
actually we fixed so the Android Google

00:17:00,810 --> 00:17:04,770
security team comes to the pixel team

00:17:03,210 --> 00:17:06,510
and says hey take these fixes because we

00:17:04,770 --> 00:17:08,610
find these problems we found them

00:17:06,510 --> 00:17:12,630
reported we dig into the code and last

00:17:08,610 --> 00:17:14,730
year for 2018 they 92% of all the bugs

00:17:12,630 --> 00:17:16,829
that they asked for were already fixed

00:17:14,730 --> 00:17:18,810
in the LTS kernel before they asked for

00:17:16,829 --> 00:17:20,940
I fixed it and it was out there for

00:17:18,810 --> 00:17:22,320
people to use and the one and the tiny

00:17:20,940 --> 00:17:25,680
percentage of fixes that were not there

00:17:22,320 --> 00:17:27,870
was only due to code that they had adds

00:17:25,680 --> 00:17:29,870
the kernel that was not upstream or that

00:17:27,870 --> 00:17:33,150
they had back ported in an incorrect way

00:17:29,870 --> 00:17:37,710
every single thing was fixed before they

00:17:33,150 --> 00:17:39,720
knew it that's what we do if so much so

00:17:37,710 --> 00:17:42,150
every single so that now Google is

00:17:39,720 --> 00:17:44,610
requiring newer Android devices to take

00:17:42,150 --> 00:17:46,140
all the LTS releases the new Android

00:17:44,610 --> 00:17:48,360
update comes they say you have to

00:17:46,140 --> 00:17:50,040
to a newer LTS release and maybe we

00:17:48,360 --> 00:17:53,460
should start taking them as time goes on

00:17:50,040 --> 00:17:55,920
I'll call some vendors Sony has been

00:17:53,460 --> 00:17:57,540
very very good their phones up date with

00:17:55,920 --> 00:17:59,370
the latest LTS released every couple

00:17:57,540 --> 00:18:01,260
months very they've been doing this for

00:17:59,370 --> 00:18:03,600
over a year no problems

00:18:01,260 --> 00:18:05,250
Sony has good phones essentials also

00:18:03,600 --> 00:18:06,360
doing that pixels starting to do that

00:18:05,250 --> 00:18:08,820
there's a whole bunch of other issues

00:18:06,360 --> 00:18:12,020
like that make sure you take the LTS

00:18:08,820 --> 00:18:14,580
fixes so much so that I now publicly say

00:18:12,020 --> 00:18:16,740
you're not using a supported distro i'll

00:18:14,580 --> 00:18:18,960
fall off' i by that way or save a

00:18:16,740 --> 00:18:21,060
long-term kernel you have an insecure

00:18:18,960 --> 00:18:24,300
system it's that simple

00:18:21,060 --> 00:18:25,530
sad it was that simple so if you're

00:18:24,300 --> 00:18:27,780
trying to do this on your own and not

00:18:25,530 --> 00:18:29,460
take LTS updates you have an insecure

00:18:27,780 --> 00:18:32,190
system if you have a supportive system

00:18:29,460 --> 00:18:34,260
by a company that supports and maintains

00:18:32,190 --> 00:18:36,810
the security a secure kernel like right

00:18:34,260 --> 00:18:39,990
at Sousa canonical Debbie and Debbie ins

00:18:36,810 --> 00:18:41,820
great your secure if not you have a

00:18:39,990 --> 00:18:44,100
problem so all your embedded devices out

00:18:41,820 --> 00:18:47,760
there that are not updated totally easy

00:18:44,100 --> 00:18:55,080
to break when I gave this talk first in

00:18:47,760 --> 00:19:00,120
China I had this response by somebody in

00:18:55,080 --> 00:19:02,640
this room it is this is a sad talk all

00:19:00,120 --> 00:19:04,560
Hardware always has bugs it's a job of a

00:19:02,640 --> 00:19:06,240
kernels to paper over the bugs and

00:19:04,560 --> 00:19:08,190
hardware to make it look like a unified

00:19:06,240 --> 00:19:10,170
system to users face

00:19:08,190 --> 00:19:11,940
that's a Java kernel the problem is when

00:19:10,170 --> 00:19:13,770
the hardware has security bugs that we

00:19:11,940 --> 00:19:15,750
have to fix and that we have to slow

00:19:13,770 --> 00:19:17,130
things down that's when you actually see

00:19:15,750 --> 00:19:18,720
these good otherwise we fix bugs all the

00:19:17,130 --> 00:19:20,940
time we fix bugs in our own code we fix

00:19:18,720 --> 00:19:22,950
bugs in hardware but hardware has bugs

00:19:20,940 --> 00:19:24,390
just like software does so you have to

00:19:22,950 --> 00:19:26,610
update the bias and you have to update

00:19:24,390 --> 00:19:28,860
the kernel we are fixing these bugs

00:19:26,610 --> 00:19:31,560
before you realize it again Google

00:19:28,860 --> 00:19:33,510
publicly documented this fact we fix

00:19:31,560 --> 00:19:37,200
things before they knew it was even a

00:19:33,510 --> 00:19:40,080
problem that's good so I keep saying all

00:19:37,200 --> 00:19:42,780
in conclusion disable hyper threading

00:19:40,080 --> 00:19:43,260
you'll go slower I'm so sorry not my

00:19:42,780 --> 00:19:45,960
problem

00:19:43,260 --> 00:19:48,570
but and oh and OpenBSD was right and

00:19:45,960 --> 00:19:50,640
always update your kernel and your BIOS

00:19:48,570 --> 00:19:51,550
and everything will be okay thank you

00:19:50,640 --> 00:19:58,760
very much

00:19:51,550 --> 00:19:58,760

YouTube URL: https://www.youtube.com/watch?v=fIwr_znLsec


