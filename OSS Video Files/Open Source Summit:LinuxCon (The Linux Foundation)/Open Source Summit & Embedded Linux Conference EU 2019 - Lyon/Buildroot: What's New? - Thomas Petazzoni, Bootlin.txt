Title: Buildroot: What's New? - Thomas Petazzoni, Bootlin
Publication date: 2019-10-29
Playlist: Open Source Summit & Embedded Linux Conference EU 2019 - Lyon
Description: 
	Buildroot: What's New? - Thomas Petazzoni, Bootlin

Buildroot is a popular tool to build customized and lightweight embedded Linux systems. By automating the complete process of cross-compilation, it provides an easy and efficient way to build from the source code your toolchain, Linux kernel, bootloader and root filesystem images, using the 2500+ existing packages. Based on the well-known make and kconfig tools, it is simple to use while being powerful. It is for example used by companies such as Tesla or GoPro for some of their products.

Developed by an active community of 100+ contributors, and delivering relases every 3 months, Buildroot is in constant evolution. In this talk, we'll cover the most important improvements, additions and changes of the past two years as well as the current topics and features on the radar.
Captions: 
	00:00:00,030 --> 00:00:05,790
hello good afternoon welcome to my talk

00:00:03,000 --> 00:00:07,649
thank you for coming and I hope you had

00:00:05,790 --> 00:00:10,290
a good lunch I'm really happy to be

00:00:07,649 --> 00:00:13,769
there talking at Elte for once in my

00:00:10,290 --> 00:00:15,750
home country friends it's nice and as I

00:00:13,769 --> 00:00:17,340
do most of the time I'll be talking

00:00:15,750 --> 00:00:19,050
about Bill route and this time it's

00:00:17,340 --> 00:00:21,359
gonna be what's new before we get

00:00:19,050 --> 00:00:25,800
started maybe a quick poll who is using

00:00:21,359 --> 00:00:27,960
Bill route today well cool and who is

00:00:25,800 --> 00:00:31,199
using openembedded or some of its

00:00:27,960 --> 00:00:35,790
derivatives another function in the room

00:00:31,199 --> 00:00:37,920
yeah open the majority maybe whoa okay

00:00:35,790 --> 00:00:40,200
one or two okay cool

00:00:37,920 --> 00:00:43,170
Thanks so my name is Thomas I work at

00:00:40,200 --> 00:00:45,600
Rutland we do embedded Linux engineering

00:00:43,170 --> 00:00:47,460
and trainings we have all our training

00:00:45,600 --> 00:00:49,590
materials available for free and a

00:00:47,460 --> 00:00:52,320
Creative Commons license and we do an

00:00:49,590 --> 00:00:53,850
embroidery working l build system

00:00:52,320 --> 00:00:57,090
engineering projects for for our

00:00:53,850 --> 00:00:58,859
customers and even though LC is in

00:00:57,090 --> 00:01:00,899
volume I in fact come from Toulouse

00:00:58,859 --> 00:01:04,199
friends hopefully one day it's gonna be

00:01:00,899 --> 00:01:05,640
in my city but it's close enough and I

00:01:04,199 --> 00:01:07,560
happened to be one of the commentators

00:01:05,640 --> 00:01:09,270
of build route and I guess there's at

00:01:07,560 --> 00:01:11,340
least one of the other coming near here

00:01:09,270 --> 00:01:14,310
and I know are noted in the room maybe

00:01:11,340 --> 00:01:19,049
not it's not so but is around at the

00:01:14,310 --> 00:01:20,400
conference so I saw that like 2/3 of the

00:01:19,049 --> 00:01:22,830
room is already using build routes I'm

00:01:20,400 --> 00:01:24,180
gonna go fairly quickly over that what

00:01:22,830 --> 00:01:26,280
is build word it's an embedded Onix

00:01:24,180 --> 00:01:28,799
build system so the point of this tool

00:01:26,280 --> 00:01:31,710
is to automate the process of building a

00:01:28,799 --> 00:01:34,170
complete Linux system from source using

00:01:31,710 --> 00:01:37,350
cross compilation so the obvious target

00:01:34,170 --> 00:01:39,900
is to build embedded Linux systems for

00:01:37,350 --> 00:01:42,420
embedded targets so we have an Intel

00:01:39,900 --> 00:01:43,890
build machine on our desktop and we want

00:01:42,420 --> 00:01:45,270
to cross compile all the piece of

00:01:43,890 --> 00:01:47,369
software that we need on our target

00:01:45,270 --> 00:01:49,200
starting from a bootloader a Linux

00:01:47,369 --> 00:01:51,090
kernel image and a complete user space

00:01:49,200 --> 00:01:53,520
which can be more or less complicated

00:01:51,090 --> 00:01:55,470
ranging from very simple basic box based

00:01:53,520 --> 00:01:57,600
user space all the way to a more complex

00:01:55,470 --> 00:01:58,829
user space with Wayland and gstreamer

00:01:57,600 --> 00:02:01,079
and QT and whatnot

00:01:58,829 --> 00:02:03,450
we can do all of that in an automated

00:02:01,079 --> 00:02:05,100
fashion you simply define what your

00:02:03,450 --> 00:02:07,500
system looks like should look like and

00:02:05,100 --> 00:02:09,780
it will automatically fetch configure

00:02:07,500 --> 00:02:12,500
build install and aggregate all those

00:02:09,780 --> 00:02:14,450
software components together

00:02:12,500 --> 00:02:16,340
so it's a fast build system you can

00:02:14,450 --> 00:02:19,760
build a fairly simple root filesystem in

00:02:16,340 --> 00:02:22,250
minutes which is a very nice thing it's

00:02:19,760 --> 00:02:24,140
easy to understand it uses K config for

00:02:22,250 --> 00:02:26,900
configuration just like the Linux kernel

00:02:24,140 --> 00:02:29,180
and it's written in make which is not

00:02:26,900 --> 00:02:30,920
necessarily easy to grasp but Atlas is a

00:02:29,180 --> 00:02:33,890
well-known technology that most of the

00:02:30,920 --> 00:02:36,020
folks in the in the UNIX 1x ecosystem

00:02:33,890 --> 00:02:37,880
know about so that's that's nice it's

00:02:36,020 --> 00:02:39,050
not a special language or a special

00:02:37,880 --> 00:02:40,630
technology you have to learn it's

00:02:39,050 --> 00:02:43,820
something you probably already know and

00:02:40,630 --> 00:02:45,680
it produces small root file systems the

00:02:43,820 --> 00:02:47,660
default file system we build which is a

00:02:45,680 --> 00:02:50,600
busy box base you syllabus affine system

00:02:47,660 --> 00:02:52,220
is just 2 Meg's so instead of being

00:02:50,600 --> 00:02:54,230
something big that you have to like get

00:02:52,220 --> 00:02:55,520
down to to reach your target size it's

00:02:54,230 --> 00:02:56,900
going to be opposite you have something

00:02:55,520 --> 00:02:59,660
small at the beginning and just add up

00:02:56,900 --> 00:03:02,720
what you exactly need we today have

00:02:59,660 --> 00:03:05,630
about 2500 packages and I think we're

00:03:02,720 --> 00:03:08,330
approaching 2600 packages for various

00:03:05,630 --> 00:03:10,459
pieces of user space software and as I

00:03:08,330 --> 00:03:12,290
said it can be ranging from fairly

00:03:10,459 --> 00:03:15,800
simple libraries all the way up to

00:03:12,290 --> 00:03:18,380
fairly big software stacks and this is

00:03:15,800 --> 00:03:20,500
basically the main the main thing that

00:03:18,380 --> 00:03:23,150
that is that we are maintaining this

00:03:20,500 --> 00:03:25,190
corpus of packages that we try to keep

00:03:23,150 --> 00:03:27,800
updated and that is growing over time

00:03:25,190 --> 00:03:30,080
thanks to contributions this build

00:03:27,800 --> 00:03:33,320
system produces file system images so it

00:03:30,080 --> 00:03:35,060
outputs like an ext4 or squash FS or UPI

00:03:33,320 --> 00:03:36,500
FS image that you can flash on your

00:03:35,060 --> 00:03:38,420
device it does not produce a

00:03:36,500 --> 00:03:40,430
distribution in the sense that it does

00:03:38,420 --> 00:03:42,680
not have the concept of binary packages

00:03:40,430 --> 00:03:44,690
that you can upgrade install remove

00:03:42,680 --> 00:03:46,250
individually it's just one fixed system

00:03:44,690 --> 00:03:49,370
if you want to update it you update the

00:03:46,250 --> 00:03:51,590
whole system it's a very neutral project

00:03:49,370 --> 00:03:53,299
there's no like commercial single

00:03:51,590 --> 00:03:55,610
commercial company behind it is really a

00:03:53,299 --> 00:03:57,799
bunch of open source people and working

00:03:55,610 --> 00:04:00,250
for different companies either

00:03:57,799 --> 00:04:02,750
services companies or product makers or

00:04:00,250 --> 00:04:05,750
Hardware makers who get together and

00:04:02,750 --> 00:04:08,180
create and improve that that build

00:04:05,750 --> 00:04:09,650
system the community is very active

00:04:08,180 --> 00:04:11,450
we're going to see that in the next

00:04:09,650 --> 00:04:15,019
slides we have stable releases every

00:04:11,450 --> 00:04:17,479
three months and it was started in 2001

00:04:15,019 --> 00:04:19,040
and I think it makes is the oldest teen

00:04:17,479 --> 00:04:20,750
maintained build system I'm not exactly

00:04:19,040 --> 00:04:22,910
sure of course but it's it's probably

00:04:20,750 --> 00:04:24,349
among the ones that exist today the one

00:04:22,910 --> 00:04:26,270
that has been around for for for the

00:04:24,349 --> 00:04:28,550
longest so that's pretty

00:04:26,270 --> 00:04:31,280
what is in like the two minutes summary

00:04:28,550 --> 00:04:33,259
so today what I want to cover is the

00:04:31,280 --> 00:04:35,150
activity in the project for the best

00:04:33,259 --> 00:04:40,849
more or less two years so covering

00:04:35,150 --> 00:04:43,129
between between 2017 11 to 20 1911 which

00:04:40,849 --> 00:04:45,050
is not yet the air but we're approaching

00:04:43,129 --> 00:04:46,879
that and talking about things like

00:04:45,050 --> 00:04:49,069
community activity the release schedule

00:04:46,879 --> 00:04:50,620
architecture support function support

00:04:49,069 --> 00:04:52,280
we've improved in the package

00:04:50,620 --> 00:04:54,139
infrastructures in the dome oil

00:04:52,280 --> 00:04:56,180
infrastructure and some interesting

00:04:54,139 --> 00:04:58,220
package updates and additions talk about

00:04:56,180 --> 00:04:59,750
reproducible builds top level parolee

00:04:58,220 --> 00:05:01,520
build some tooling improvements we've

00:04:59,750 --> 00:05:04,759
done so I'm gonna cover all of these

00:05:01,520 --> 00:05:06,979
topics in that what's new talk so the

00:05:04,759 --> 00:05:08,509
community activity I'm very often like

00:05:06,979 --> 00:05:10,909
to look at that just to see how the

00:05:08,509 --> 00:05:13,340
community is going is it increasing

00:05:10,909 --> 00:05:16,340
decreasing in size is its the activity

00:05:13,340 --> 00:05:17,539
is increasing or not so I have a few

00:05:16,340 --> 00:05:19,849
graphs here that show the number of

00:05:17,539 --> 00:05:23,479
commits per release all the way back

00:05:19,849 --> 00:05:26,120
from 2009 which is when we started doing

00:05:23,479 --> 00:05:29,240
stable releases before that it was just

00:05:26,120 --> 00:05:31,639
like rolling release since more than two

00:05:29,240 --> 00:05:34,130
years 10 years so we have do stable

00:05:31,639 --> 00:05:36,080
releases you can see after a ramp up we

00:05:34,130 --> 00:05:37,789
can have stabilized around a thousand

00:05:36,080 --> 00:05:40,520
two hundred thousand commits per police

00:05:37,789 --> 00:05:42,919
so which it's not decreasing or

00:05:40,520 --> 00:05:44,180
increasing it's mainly a stable project

00:05:42,919 --> 00:05:45,680
from a number of commits point of view

00:05:44,180 --> 00:05:48,680
and you'll see that it's in fact the

00:05:45,680 --> 00:05:50,960
same for the other criterias that I'll

00:05:48,680 --> 00:05:53,090
be looking at number of contributors per

00:05:50,960 --> 00:05:54,710
release we have about 100 different

00:05:53,090 --> 00:05:57,590
contributors for release and as you can

00:05:54,710 --> 00:05:59,180
see it's fairly stable sometimes goes up

00:05:57,590 --> 00:06:00,680
to one or twenty sometimes a little bit

00:05:59,180 --> 00:06:03,770
below hundred but it's fairly stable

00:06:00,680 --> 00:06:06,830
over the past five five years

00:06:03,770 --> 00:06:08,479
approximately so it's a fairly decently

00:06:06,830 --> 00:06:10,130
large community not of course as large

00:06:08,479 --> 00:06:13,009
as the Linux kernel but the scope of the

00:06:10,130 --> 00:06:15,590
project is also much smaller but it's in

00:06:13,009 --> 00:06:19,400
I guess in the range of of many of those

00:06:15,590 --> 00:06:21,199
mid sized open source projects emails on

00:06:19,400 --> 00:06:24,440
the mailing list we have approximately

00:06:21,199 --> 00:06:26,180
let's say 2,000 to 3,000 emails per

00:06:24,440 --> 00:06:28,759
month so it's a fairly active

00:06:26,180 --> 00:06:30,349
mailing list so we have a development

00:06:28,759 --> 00:06:31,909
process similar to the one of the Linux

00:06:30,349 --> 00:06:33,409
kernel in the sense that batches are

00:06:31,909 --> 00:06:35,899
posted to the mailing list review

00:06:33,409 --> 00:06:37,880
appends on the mailing list and and we

00:06:35,899 --> 00:06:39,349
have patchwork tracking our patches so

00:06:37,880 --> 00:06:39,800
it is also explained why there is so

00:06:39,349 --> 00:06:41,240
much

00:06:39,800 --> 00:06:42,949
this activity because there are lots of

00:06:41,240 --> 00:06:45,470
batches lots of discussion going on and

00:06:42,949 --> 00:06:46,789
all that adds up to the number of emails

00:06:45,470 --> 00:06:48,800
exchanged on the mailing list but it's

00:06:46,789 --> 00:06:51,440
again fill these tables we can see some

00:06:48,800 --> 00:06:54,139
spikes and then and that some downs

00:06:51,440 --> 00:06:55,970
usually summertime and Christmastime we

00:06:54,139 --> 00:06:58,400
have a few downs and and when it's

00:06:55,970 --> 00:07:00,650
really time we have a few ups which I

00:06:58,400 --> 00:07:03,199
guess is a cheese with the busy schedule

00:07:00,650 --> 00:07:06,099
of the project so really I would say

00:07:03,199 --> 00:07:09,409
active projects and in a stable state of

00:07:06,099 --> 00:07:12,469
development in terms of release schedule

00:07:09,409 --> 00:07:15,770
we've had for many many years basically

00:07:12,469 --> 00:07:18,710
all the way back to 2009 Oh - which was

00:07:15,770 --> 00:07:21,469
our first stable release for releases a

00:07:18,710 --> 00:07:23,389
year in February May August and November

00:07:21,469 --> 00:07:26,330
and we've been doing that for ten years

00:07:23,389 --> 00:07:28,250
with no exception we have there for

00:07:26,330 --> 00:07:29,930
three months development cycles and we

00:07:28,250 --> 00:07:31,430
do that a little bit differently than

00:07:29,930 --> 00:07:33,710
the kennel because well the project is

00:07:31,430 --> 00:07:35,620
different of course we have a two month

00:07:33,710 --> 00:07:39,009
deployment period where we can merge

00:07:35,620 --> 00:07:42,349
pretty much any change a big or small

00:07:39,009 --> 00:07:43,520
and then after that we have our c1 which

00:07:42,349 --> 00:07:45,860
kind of says that the end of the

00:07:43,520 --> 00:07:48,529
development period and we have one non

00:07:45,860 --> 00:07:50,449
stabilization period during which of two

00:07:48,529 --> 00:07:52,759
RCS are released and then we get to find

00:07:50,449 --> 00:07:55,669
our buddies so same idea that the Linux

00:07:52,759 --> 00:07:58,099
kernel in the sense that our c1 ends the

00:07:55,669 --> 00:07:59,389
development periods but the ratio in

00:07:58,099 --> 00:08:01,310
terms of duration between development

00:07:59,389 --> 00:08:04,039
and stabilization is is a bit different

00:08:01,310 --> 00:08:06,500
so it's been going on like this for

00:08:04,039 --> 00:08:09,050
about ten years as I said what we've

00:08:06,500 --> 00:08:11,590
added in the recent years is the concept

00:08:09,050 --> 00:08:14,599
of LTS so long term support release

00:08:11,590 --> 00:08:18,979
until then once release was done it was

00:08:14,599 --> 00:08:21,199
kind of given forget a situation where

00:08:18,979 --> 00:08:23,180
it was released but if you want new

00:08:21,199 --> 00:08:26,240
updates especially for security fixes

00:08:23,180 --> 00:08:28,340
and bug fixes you would have to keep up

00:08:26,240 --> 00:08:30,800
and and and update to the next release

00:08:28,340 --> 00:08:33,979
so what we're doing now is that every

00:08:30,800 --> 00:08:36,500
year we're picking up the o2 release and

00:08:33,979 --> 00:08:38,630
maintain it during one year for security

00:08:36,500 --> 00:08:40,729
updates and bug fixes so one year is not

00:08:38,630 --> 00:08:43,219
yet very long term but it's already an

00:08:40,729 --> 00:08:45,890
improvement over three months and it's

00:08:43,219 --> 00:08:49,459
proving to be already quite some work

00:08:45,890 --> 00:08:51,589
and to do that so this allows companies

00:08:49,459 --> 00:08:52,889
want to build product space and be able

00:08:51,589 --> 00:08:56,639
to know that every

00:08:52,889 --> 00:09:00,029
year that is update schedule that they

00:08:56,639 --> 00:09:04,619
can rely on and base their organization

00:09:00,029 --> 00:09:07,559
and planning on so in all of those oh

00:09:04,619 --> 00:09:10,379
two branches we have as I said maintain

00:09:07,559 --> 00:09:12,660
is branches and we push comets and make

00:09:10,379 --> 00:09:14,639
regular point villages more or less

00:09:12,660 --> 00:09:18,269
every month so I've got some statistics

00:09:14,639 --> 00:09:21,600
here where you can see that the 2017 or

00:09:18,269 --> 00:09:24,059
two branch at eleven point is about any

00:09:21,600 --> 00:09:26,160
red comets and same for twenty 1802

00:09:24,059 --> 00:09:28,319
which had twelve point villages about

00:09:26,160 --> 00:09:30,059
thousand comets and so of course the

00:09:28,319 --> 00:09:33,419
twenty 1902 branch is still being

00:09:30,059 --> 00:09:35,040
maintained today until 2020 or two at

00:09:33,419 --> 00:09:36,749
which point will move to that one so

00:09:35,040 --> 00:09:39,059
this is a new thing that that we have

00:09:36,749 --> 00:09:41,549
it's been working very well so far we're

00:09:39,059 --> 00:09:45,359
seeing a number of people and companies

00:09:41,549 --> 00:09:48,419
using those LTS branches reporting bugs

00:09:45,359 --> 00:09:51,389
issues or helping simply maintain those

00:09:48,419 --> 00:09:53,249
two branches by submitting patches to

00:09:51,389 --> 00:09:55,169
fix security problems that affect to do

00:09:53,249 --> 00:09:58,489
slightly older versions than than what

00:09:55,169 --> 00:10:01,889
we have in the in the master branch

00:09:58,489 --> 00:10:04,819
architecture support of course we've

00:10:01,889 --> 00:10:07,919
followed the the train of risk be

00:10:04,819 --> 00:10:12,089
appearing so we have support for 32-bit

00:10:07,919 --> 00:10:15,029
and 64-bit supporting gilepsy

00:10:12,089 --> 00:10:19,709
on both of those business and I think

00:10:15,029 --> 00:10:21,809
Masshole on the 64-bit variant the NTS

00:10:19,709 --> 00:10:23,489
32 architecture was also added it's an

00:10:21,809 --> 00:10:26,189
architecture designed by a company in

00:10:23,489 --> 00:10:27,899
China so both of these architecture have

00:10:26,189 --> 00:10:30,209
been added and people are working on

00:10:27,899 --> 00:10:31,889
fixing build issues that that fallout

00:10:30,209 --> 00:10:34,230
from these the addition of these

00:10:31,889 --> 00:10:36,179
architectures we've added support for

00:10:34,230 --> 00:10:38,489
new variants of existing architecture

00:10:36,179 --> 00:10:42,179
like the new arm core the new x86 score

00:10:38,489 --> 00:10:44,669
simply flowing the new CPUs that come up

00:10:42,179 --> 00:10:46,230
from existing vendors we've dropped the

00:10:44,669 --> 00:10:48,600
Blackfin architecture it was dropped

00:10:46,230 --> 00:10:50,489
from the linux kernel and was anyway

00:10:48,600 --> 00:10:52,470
difficult to maintain and barely used so

00:10:50,489 --> 00:10:56,730
that code and there is something that we

00:10:52,470 --> 00:10:58,829
got weed off and that means that today

00:10:56,730 --> 00:11:00,749
we have support for this complete list

00:10:58,829 --> 00:11:02,100
of architecture that you see here so of

00:11:00,749 --> 00:11:04,850
course the big names

00:11:02,100 --> 00:11:07,850
arm x86 arm 64 and

00:11:04,850 --> 00:11:10,549
but we also support more niche CPU

00:11:07,850 --> 00:11:12,559
architectures sis can I open risk now

00:11:10,549 --> 00:11:14,839
use to micro blaze all of the CPU

00:11:12,559 --> 00:11:17,149
architectures that are very often not

00:11:14,839 --> 00:11:18,679
supported by other build systems and I

00:11:17,149 --> 00:11:22,160
think openembedded doesn't have support

00:11:18,679 --> 00:11:26,059
for as many CPU architectures we do have

00:11:22,160 --> 00:11:29,269
support form on the tool chain support

00:11:26,059 --> 00:11:31,429
side so it can build its own cross

00:11:29,269 --> 00:11:33,739
compilation tool chain by building GCC

00:11:31,429 --> 00:11:36,639
and Bennett tools and AC library there

00:11:33,739 --> 00:11:39,410
hasn't been much change here in the

00:11:36,639 --> 00:11:42,229
features that we provide except that we

00:11:39,410 --> 00:11:44,029
keep things up to date with GCC updates

00:11:42,229 --> 00:11:46,069
and bonitos updates and useful Ipsy

00:11:44,029 --> 00:11:47,839
updates and muscle update and so on so

00:11:46,069 --> 00:11:51,100
everything is pretty much up to the

00:11:47,839 --> 00:11:53,329
latest stable version or close to that

00:11:51,100 --> 00:11:55,489
so that's something that is kept

00:11:53,329 --> 00:11:57,829
regularly updated and there is some very

00:11:55,489 --> 00:12:00,829
useful testing work done by women away

00:11:57,829 --> 00:12:04,609
from from smile and using a tool chain

00:12:00,829 --> 00:12:06,619
builder project where thanks to CI we

00:12:04,609 --> 00:12:08,449
are able to test when there's a new GCC

00:12:06,619 --> 00:12:09,769
release on all almost all the

00:12:08,449 --> 00:12:12,739
architecture we support at least the

00:12:09,769 --> 00:12:15,739
ones that have qmu support use the new

00:12:12,739 --> 00:12:17,989
GCC release build a complete Blahniks

00:12:15,739 --> 00:12:20,329
kennel plus user space system run that

00:12:17,989 --> 00:12:22,850
under qm you make a few checks and and

00:12:20,329 --> 00:12:24,979
that on all cpu architectures with all

00:12:22,850 --> 00:12:26,509
the C libraries that we support all

00:12:24,979 --> 00:12:28,759
automated in c9

00:12:26,509 --> 00:12:30,739
so that's very good effort that has led

00:12:28,759 --> 00:12:33,079
to a number of contributions in our bug

00:12:30,739 --> 00:12:34,759
report and GCC by nettles or C library

00:12:33,079 --> 00:12:37,459
is pointing a these new GCC release

00:12:34,759 --> 00:12:39,739
breaks muscle on this we lured CPU

00:12:37,459 --> 00:12:41,929
architecture so all of that is is of

00:12:39,739 --> 00:12:44,959
course very useful and and helps improve

00:12:41,929 --> 00:12:46,999
the quality of Bitteroot the other thing

00:12:44,959 --> 00:12:48,799
that we can do with tool chain is reuse

00:12:46,999 --> 00:12:50,779
existing tool chains you have one

00:12:48,799 --> 00:12:52,069
provided by a vendor or simply you don't

00:12:50,779 --> 00:12:54,799
want to spend the time building a tool

00:12:52,069 --> 00:12:57,199
chain you can use pre-built tool chains

00:12:54,799 --> 00:12:59,779
so we've added the tool chain from arm

00:12:57,199 --> 00:13:02,989
because they didn't exist back back then

00:12:59,779 --> 00:13:06,289
so they actual chain for arm 32 and

00:13:02,989 --> 00:13:08,269
armed 64 was little endian big engine so

00:13:06,289 --> 00:13:09,829
all of that was added just go in many

00:13:08,269 --> 00:13:12,529
config you can use those tools chains

00:13:09,829 --> 00:13:14,419
we've added support for arm 64 billion

00:13:12,529 --> 00:13:16,879
and tool chains from the narrow as well

00:13:14,419 --> 00:13:18,800
the MDS 30 total chain was added as part

00:13:16,879 --> 00:13:20,869
of adding this new CPU architecture

00:13:18,800 --> 00:13:22,699
and generally they've been updates to

00:13:20,869 --> 00:13:24,369
the existing external tour chain from

00:13:22,699 --> 00:13:27,739
the various vendors that we support

00:13:24,369 --> 00:13:30,800
another thing that has been added fairly

00:13:27,739 --> 00:13:32,989
advanced feature is the capability of

00:13:30,800 --> 00:13:34,429
declaring external actual chain from VR

00:13:32,989 --> 00:13:36,259
to external trees I'm gonna give a

00:13:34,429 --> 00:13:37,939
little bit of background on that we are

00:13:36,259 --> 00:13:39,860
to external is a mechanism that was

00:13:37,939 --> 00:13:42,829
added a couple of years ago and build

00:13:39,860 --> 00:13:45,170
route which allows you to declare now

00:13:42,829 --> 00:13:46,939
good with packages def configs and a

00:13:45,170 --> 00:13:49,790
bunch of other build route artifacts

00:13:46,939 --> 00:13:51,829
outside of the main route source tree so

00:13:49,790 --> 00:13:54,379
this allows you to keep your own custom

00:13:51,829 --> 00:13:56,869
packages really cleanly separated from

00:13:54,379 --> 00:13:59,540
from the core of the route itself which

00:13:56,869 --> 00:14:00,889
some people find it easier to when you

00:13:59,540 --> 00:14:03,040
have to update your route as your

00:14:00,889 --> 00:14:04,939
packages are are nicely separated and

00:14:03,040 --> 00:14:07,999
external tool chains could not be

00:14:04,939 --> 00:14:09,949
declared in such XML trees because of

00:14:07,999 --> 00:14:11,689
the way it works internally and it's

00:14:09,949 --> 00:14:13,369
something we have to improve and that

00:14:11,689 --> 00:14:15,170
you can declare your own custom external

00:14:13,369 --> 00:14:17,869
tool chains in your PR to external tree

00:14:15,170 --> 00:14:20,749
which again helps you cleanly isolate

00:14:17,869 --> 00:14:25,309
your secret sauce from from the main

00:14:20,749 --> 00:14:27,920
root source tree and packaging FRA

00:14:25,309 --> 00:14:29,660
structures so in route we have the

00:14:27,920 --> 00:14:31,910
concept of package infrastructure which

00:14:29,660 --> 00:14:33,769
basically factorized the common logic of

00:14:31,910 --> 00:14:36,230
configuring building installing packages

00:14:33,769 --> 00:14:38,029
when you have 500 packages that use the

00:14:36,230 --> 00:14:41,059
other tools you don't want to repeat the

00:14:38,029 --> 00:14:42,920
source of describing dot slash configure

00:14:41,059 --> 00:14:44,839
blah blah blah blah blah blah for 500

00:14:42,920 --> 00:14:46,910
packages you factorize that in a common

00:14:44,839 --> 00:14:48,829
place so we've got infrastructure for

00:14:46,910 --> 00:14:51,290
most of the major build systems like go

00:14:48,829 --> 00:14:54,410
to tools and see Megan and things like

00:14:51,290 --> 00:14:57,170
this and we've added two in the last in

00:14:54,410 --> 00:14:59,299
the past two years for goal on packages

00:14:57,170 --> 00:15:03,049
and probably more importantly the

00:14:59,299 --> 00:15:05,029
medicine based packages as well because

00:15:03,049 --> 00:15:07,850
this is becoming a very popular a build

00:15:05,029 --> 00:15:09,829
system so many young software components

00:15:07,850 --> 00:15:12,049
are moving to Mason so we support that

00:15:09,829 --> 00:15:14,809
as well so it looks like this so this is

00:15:12,049 --> 00:15:18,529
a docker see align and thought m'kay so

00:15:14,809 --> 00:15:19,939
this is the entire make file and the

00:15:18,529 --> 00:15:21,889
route that allows to build the tagger

00:15:19,939 --> 00:15:24,259
a command-line interface and it's

00:15:21,889 --> 00:15:25,970
written and go so we declare a bunch of

00:15:24,259 --> 00:15:28,759
variables describing which version we

00:15:25,970 --> 00:15:31,100
want to use from which github repository

00:15:28,759 --> 00:15:31,970
will clone it which license it uses what

00:15:31,100 --> 00:15:34,240
are the dependency

00:15:31,970 --> 00:15:36,380
and then a bunch of go specific

00:15:34,240 --> 00:15:38,510
variables that we define and that are

00:15:36,380 --> 00:15:41,840
used by the magic macro at the end :

00:15:38,510 --> 00:15:44,000
package to expand to the set of steps

00:15:41,840 --> 00:15:47,840
that are needed to configure build and

00:15:44,000 --> 00:15:49,220
install this package similar example by

00:15:47,840 --> 00:15:50,690
this time for the Mason package

00:15:49,220 --> 00:15:54,380
infrastructure and actually a simpler

00:15:50,690 --> 00:15:56,120
example here for Lib MPD client and the

00:15:54,380 --> 00:15:58,490
principle is very much the same you

00:15:56,120 --> 00:16:00,080
declare where to grab the source code

00:15:58,490 --> 00:16:03,220
from so in that case it's just a tarball

00:16:00,080 --> 00:16:05,630
over HTTP what is the license of that

00:16:03,220 --> 00:16:07,220
package and that you want to install it

00:16:05,630 --> 00:16:09,710
to stage him because that's a library

00:16:07,220 --> 00:16:11,780
and then simply you invoke this magic

00:16:09,710 --> 00:16:14,180
macro Mason package that again expands

00:16:11,780 --> 00:16:15,980
to I would configure out to build an

00:16:14,180 --> 00:16:18,140
hour to install that package and all

00:16:15,980 --> 00:16:19,340
that knowledge is factorized in the

00:16:18,140 --> 00:16:21,020
definition of the Mason packet

00:16:19,340 --> 00:16:24,880
infrastructure so it's not duplicated

00:16:21,020 --> 00:16:27,320
over dozens if not hundreds of packages

00:16:24,880 --> 00:16:28,610
so let's these are the two packet

00:16:27,320 --> 00:16:31,580
infrastructure that we've added in

00:16:28,610 --> 00:16:32,600
recent times another thing that has been

00:16:31,580 --> 00:16:34,490
improved in the in the core

00:16:32,600 --> 00:16:38,090
infrastructure is the download

00:16:34,490 --> 00:16:39,980
infrastructure so as below there's been

00:16:38,090 --> 00:16:42,530
a major rewrite of the internals but

00:16:39,980 --> 00:16:46,130
it's not so useful for the end user the

00:16:42,530 --> 00:16:51,320
main improvement from a news report view

00:16:46,130 --> 00:16:53,540
is good caching so I need to again here

00:16:51,320 --> 00:16:57,350
give a good bit of background so before

00:16:53,540 --> 00:16:58,850
that when you were specifying a git

00:16:57,350 --> 00:17:00,380
clone so this one is a bit special for

00:16:58,850 --> 00:17:01,640
Makita it's not really good clone but

00:17:00,380 --> 00:17:03,500
the package that you need to fetch from

00:17:01,640 --> 00:17:05,540
get by your Linux kernel tree for

00:17:03,500 --> 00:17:07,670
example we say it's available from that

00:17:05,540 --> 00:17:10,850
git repository and I want to fetch tag

00:17:07,670 --> 00:17:14,090
this is this what bill would do it would

00:17:10,850 --> 00:17:15,920
clone that repository and check out the

00:17:14,090 --> 00:17:16,400
version that you specify create a

00:17:15,920 --> 00:17:18,200
tarball

00:17:16,400 --> 00:17:19,970
out of that specific version of the

00:17:18,200 --> 00:17:22,310
kennel that you specified in your

00:17:19,970 --> 00:17:24,260
configuration throw away the git

00:17:22,310 --> 00:17:24,860
repository and then use the tarball to

00:17:24,260 --> 00:17:27,170
do your build

00:17:24,860 --> 00:17:29,090
so as long as you build again and again

00:17:27,170 --> 00:17:30,950
the same kind of version we're good

00:17:29,090 --> 00:17:33,950
because we have the tarball locally

00:17:30,950 --> 00:17:36,380
cached and we don't go back to the git

00:17:33,950 --> 00:17:37,670
repository but the next time you change

00:17:36,380 --> 00:17:39,260
the version of the kennel that you want

00:17:37,670 --> 00:17:41,420
to build in your in your system and

00:17:39,260 --> 00:17:42,780
during development it happens usually

00:17:41,420 --> 00:17:45,600
quite often

00:17:42,780 --> 00:17:47,550
and what good would would do is home I

00:17:45,600 --> 00:17:49,230
don't have this keynote version locally

00:17:47,550 --> 00:17:52,050
available as a tarball so let's go to

00:17:49,230 --> 00:17:53,820
the Cape repo do a full clone check out

00:17:52,050 --> 00:17:55,740
the version and so on and you can

00:17:53,820 --> 00:17:58,470
imagine doing a full clone of the kennel

00:17:55,740 --> 00:18:01,050
each time you change the version for

00:17:58,470 --> 00:18:04,080
just grabbing two or three more commits

00:18:01,050 --> 00:18:07,380
it's not very efficient so we've changed

00:18:04,080 --> 00:18:10,230
that and we know do I think what is the

00:18:07,380 --> 00:18:13,680
obvious thing that we should do keep a

00:18:10,230 --> 00:18:16,050
local cache of the repository and so

00:18:13,680 --> 00:18:17,670
that the next time you try to fetch the

00:18:16,050 --> 00:18:20,610
keynote source code or of course it's

00:18:17,670 --> 00:18:22,920
valid for every gig based project we

00:18:20,610 --> 00:18:25,080
have a local clone available and we just

00:18:22,920 --> 00:18:27,780
grab the radiation all objects that are

00:18:25,080 --> 00:18:30,930
missing use that to produce the Tarble

00:18:27,780 --> 00:18:33,930
and we move on so we've moved from a

00:18:30,930 --> 00:18:36,330
very long repetitive complete clones of

00:18:33,930 --> 00:18:38,820
repositories to using a local repository

00:18:36,330 --> 00:18:42,300
and only grab the missing geeet objects

00:18:38,820 --> 00:18:45,180
to achieve the specific version of the

00:18:42,300 --> 00:18:48,180
software component you wanted to to

00:18:45,180 --> 00:18:51,930
clone and so the way it's organized is

00:18:48,180 --> 00:18:54,630
shown here we have the mouth working yes

00:18:51,930 --> 00:18:56,700
so we have DL here which is the top

00:18:54,630 --> 00:18:58,890
directory where all the downloads are

00:18:56,700 --> 00:19:00,900
are stored it's not organized in

00:18:58,890 --> 00:19:02,850
subdirectories so for those of you we're

00:19:00,900 --> 00:19:05,970
familiar with it it used to be like this

00:19:02,850 --> 00:19:08,190
this big dump of tar balls and stuff so

00:19:05,970 --> 00:19:10,590
no we have one subdirectory per package

00:19:08,190 --> 00:19:12,000
which makes it a little bit nicer so

00:19:10,590 --> 00:19:15,240
this is an example of a package that

00:19:12,000 --> 00:19:16,860
always fetched through like HTTP or FTP

00:19:15,240 --> 00:19:18,660
and we have tar balls or just the tar

00:19:16,860 --> 00:19:21,450
balls are nicely all grouped together in

00:19:18,660 --> 00:19:23,370
a folder but we do boot is sometimes

00:19:21,450 --> 00:19:25,110
patch as complete tar balls as you can

00:19:23,370 --> 00:19:28,560
see here these are the official versions

00:19:25,110 --> 00:19:30,030
but sometimes in this example we

00:19:28,560 --> 00:19:32,280
sometimes try to work it so we have a

00:19:30,030 --> 00:19:33,930
good sub folder which contains the

00:19:32,280 --> 00:19:37,020
complete repository of that project

00:19:33,930 --> 00:19:39,930
including the target metadata and we use

00:19:37,020 --> 00:19:42,480
that every time I bleed wood needs to

00:19:39,930 --> 00:19:45,480
grab a given reboot version and produce

00:19:42,480 --> 00:19:47,430
corresponding tar balls so here ashes

00:19:45,480 --> 00:19:49,140
were used to identify the versions so

00:19:47,430 --> 00:19:52,020
that's slightly reorganization of the

00:19:49,140 --> 00:19:53,460
download directory we were careful to

00:19:52,020 --> 00:19:56,280
keep backward compatibility with

00:19:53,460 --> 00:19:58,020
previous to no directories all that can

00:19:56,280 --> 00:20:00,210
kind of tapas and all but the

00:19:58,020 --> 00:20:04,890
organization is a little bit different

00:20:00,210 --> 00:20:08,160
now in terms of package updates and

00:20:04,890 --> 00:20:10,290
additions this is actually where most of

00:20:08,160 --> 00:20:13,650
the activity in in Beirut occurs

00:20:10,290 --> 00:20:15,630
maintaining this set of 2,500 packages

00:20:13,650 --> 00:20:17,580
is is a lot of work and requires

00:20:15,630 --> 00:20:20,940
contributions for from a large number of

00:20:17,580 --> 00:20:23,550
people but it's it's mostly pretty

00:20:20,940 --> 00:20:25,590
boring right it's just new packages

00:20:23,550 --> 00:20:28,290
being added to support another Python

00:20:25,590 --> 00:20:30,120
module or updating packages here and

00:20:28,290 --> 00:20:33,590
there so I can have tried to extract a

00:20:30,120 --> 00:20:37,710
few highlights of that so we've added

00:20:33,590 --> 00:20:41,040
378 packages remove 56 packages but 30

00:20:37,710 --> 00:20:43,560
of which are x.org proto packages so X

00:20:41,040 --> 00:20:45,090
or get split packages for all the header

00:20:43,560 --> 00:20:46,950
files and no they have a single one

00:20:45,090 --> 00:20:49,020
replacing this so it's kind of screws up

00:20:46,950 --> 00:20:53,270
the the number of 56 packages being

00:20:49,020 --> 00:20:55,740
removed we remove cute for anyways long

00:20:53,270 --> 00:20:58,440
deprecated and we had to move on and

00:20:55,740 --> 00:21:00,750
keep on the cute 5 among the things that

00:20:58,440 --> 00:21:03,140
we've added that are kind of made with a

00:21:00,750 --> 00:21:06,180
major we added support for rest

00:21:03,140 --> 00:21:09,690
so the combiner itself and package

00:21:06,180 --> 00:21:11,790
manager as well we support for LVM clang

00:21:09,690 --> 00:21:13,890
so not yet as a compiler there is work

00:21:11,790 --> 00:21:16,440
being done around that but for now it's

00:21:13,890 --> 00:21:18,320
only to have clang on the target for

00:21:16,440 --> 00:21:21,120
things like OpenGL

00:21:18,320 --> 00:21:23,910
but not yet to use as a compiler for

00:21:21,120 --> 00:21:26,790
building entire system we've added the

00:21:23,910 --> 00:21:29,670
OTA software mender OpenJDK to have

00:21:26,790 --> 00:21:32,700
another java vm on the target the

00:21:29,670 --> 00:21:37,200
openers init system the opti secure

00:21:32,700 --> 00:21:38,910
trust zone side OS and zillions of peril

00:21:37,200 --> 00:21:40,460
and pipe modules and why I say zillions

00:21:38,910 --> 00:21:43,850
it's like really zillions of more

00:21:40,460 --> 00:21:46,170
additional pipe modules and perl modules

00:21:43,850 --> 00:21:48,650
most of the major software stacks have

00:21:46,170 --> 00:21:52,260
been updated so we have huge 5.12

00:21:48,650 --> 00:21:55,440
lighters x.org latest gstreamer Weiland

00:21:52,260 --> 00:21:56,910
Western Cody and I there's probably more

00:21:55,440 --> 00:21:59,100
that I missed because we're doing all

00:21:56,910 --> 00:22:00,870
those commits who is kind of a boring

00:21:59,100 --> 00:22:04,230
thing to do and extract the iolite is

00:22:00,870 --> 00:22:07,770
not necessarily easy so I just had a

00:22:04,230 --> 00:22:09,500
quick look at our history of comments

00:22:07,770 --> 00:22:12,890
and and whenever a package

00:22:09,500 --> 00:22:16,010
updated we usually do package foom them

00:22:12,890 --> 00:22:17,870
to version XYZ in in the commit title so

00:22:16,010 --> 00:22:19,820
I look at all the commits that add bump

00:22:17,870 --> 00:22:21,680
in their title as a kind of an

00:22:19,820 --> 00:22:24,290
approximation of how many comets were

00:22:21,680 --> 00:22:25,970
done to simply bump packages and it's

00:22:24,290 --> 00:22:29,180
about three thousand comets that were

00:22:25,970 --> 00:22:33,260
done and in the course of a little bit

00:22:29,180 --> 00:22:36,020
less than two years to keep our set of

00:22:33,260 --> 00:22:38,870
packages updated so most of the work is

00:22:36,020 --> 00:22:42,230
actually going on on keeping packages up

00:22:38,870 --> 00:22:44,270
to date and adding new packages check

00:22:42,230 --> 00:22:45,950
the time all right

00:22:44,270 --> 00:22:48,410
another thing that we've added our

00:22:45,950 --> 00:22:50,600
hardening options to support for

00:22:48,410 --> 00:22:53,840
increasing the security of the binaries

00:22:50,600 --> 00:22:57,230
that we produce against certain classes

00:22:53,840 --> 00:23:00,110
of your liabilities so stack protection

00:22:57,230 --> 00:23:02,330
railro and buffer overflow detection

00:23:00,110 --> 00:23:04,870
with the fortify source options we all

00:23:02,330 --> 00:23:07,700
of that with edit so you can build a

00:23:04,870 --> 00:23:09,860
framework that is more secure binaries

00:23:07,700 --> 00:23:11,690
so it's quite quite nice and we've

00:23:09,860 --> 00:23:13,430
recently added more testing effort

00:23:11,690 --> 00:23:16,030
around use and possibly will move to

00:23:13,430 --> 00:23:18,710
defaulting to some of these options

00:23:16,030 --> 00:23:20,930
default rather than no protection at all

00:23:18,710 --> 00:23:23,570
but that's like on the runner for the

00:23:20,930 --> 00:23:27,800
future another thing we've added is make

00:23:23,570 --> 00:23:30,470
show info it's a target that spits out a

00:23:27,800 --> 00:23:32,390
JSON blurb that looks like what you can

00:23:30,470 --> 00:23:35,150
see on the right side of this line here

00:23:32,390 --> 00:23:36,680
it basically tells you details about all

00:23:35,150 --> 00:23:38,810
the packages that are enabled in your

00:23:36,680 --> 00:23:40,460
current configuration the name and the

00:23:38,810 --> 00:23:42,230
version and the license and all that

00:23:40,460 --> 00:23:43,190
kind of things and then you can do

00:23:42,230 --> 00:23:46,430
whatever you want with it

00:23:43,190 --> 00:23:48,500
parsing it to write a nice HTML page

00:23:46,430 --> 00:23:51,620
that describes what is in your products

00:23:48,500 --> 00:23:53,090
or download the guitar balls that they

00:23:51,620 --> 00:23:54,830
are needed to reproduce the bill that

00:23:53,090 --> 00:23:57,020
product basically whatever you want is

00:23:54,830 --> 00:23:59,180
just some metadata about your

00:23:57,020 --> 00:24:02,570
configuration that you can easily parse

00:23:59,180 --> 00:24:05,180
because it's Jason we've done some work

00:24:02,570 --> 00:24:06,770
around reproducible builds where the

00:24:05,180 --> 00:24:09,170
idea is that given a boot configuration

00:24:06,770 --> 00:24:11,420
version if you do two Bills of the same

00:24:09,170 --> 00:24:14,600
configuration you get the same binary

00:24:11,420 --> 00:24:18,500
identical result so there was a google

00:24:14,600 --> 00:24:19,800
Summer of Code and this summer with at

00:24:18,500 --> 00:24:21,630
Arvind Lily I'm not sure

00:24:19,800 --> 00:24:24,930
pronouncing correctly working on this

00:24:21,630 --> 00:24:28,280
topic and he was mentored by to a core

00:24:24,930 --> 00:24:30,630
of Detroit developers are now tanyon and

00:24:28,280 --> 00:24:32,340
improving the support for that in period

00:24:30,630 --> 00:24:34,170
there was already some initial work that

00:24:32,340 --> 00:24:36,000
had been done in the past but it kind of

00:24:34,170 --> 00:24:37,710
pushed that a bit further and it's

00:24:36,000 --> 00:24:39,630
mainly on the testing side it has been

00:24:37,710 --> 00:24:41,580
pushed a bit further because our build

00:24:39,630 --> 00:24:43,380
infrastructure that already existed has

00:24:41,580 --> 00:24:46,230
been extended to test reproducible

00:24:43,380 --> 00:24:48,960
builds so what we do is that for some

00:24:46,230 --> 00:24:51,450
bills we do to build two times and we do

00:24:48,960 --> 00:24:54,600
it in two different folders so that we

00:24:51,450 --> 00:24:56,580
test the different test builds that have

00:24:54,600 --> 00:24:58,500
a difference in terms of time and build

00:24:56,580 --> 00:24:59,880
location so for now the blood

00:24:58,500 --> 00:25:01,800
environment is the same it's the same

00:24:59,880 --> 00:25:03,930
build machine that is used to do build

00:25:01,800 --> 00:25:06,990
number one build number two but time and

00:25:03,930 --> 00:25:08,400
build location is different doing builds

00:25:06,990 --> 00:25:10,470
in different environments is like

00:25:08,400 --> 00:25:12,150
something we would like to do but in the

00:25:10,470 --> 00:25:14,700
future we can have take it step by step

00:25:12,150 --> 00:25:17,850
and not introduce too much randomization

00:25:14,700 --> 00:25:20,340
at first and first fix to those issues a

00:25:17,850 --> 00:25:22,380
number of issues in tar.gz PCP are you

00:25:20,340 --> 00:25:25,320
handling around time stems were fixed

00:25:22,380 --> 00:25:27,390
around past as well but of course more

00:25:25,320 --> 00:25:30,390
work is needed but we do have reports

00:25:27,390 --> 00:25:33,630
like that in automated fashion so when a

00:25:30,390 --> 00:25:35,340
build fails because of reproducibility

00:25:33,630 --> 00:25:38,190
issue so basically the build succeeded

00:25:35,340 --> 00:25:40,830
but the file system images are not

00:25:38,190 --> 00:25:42,600
binary identical so we compare them with

00:25:40,830 --> 00:25:44,730
this tool called defrost cup which

00:25:42,600 --> 00:25:45,660
investigates the defined system image in

00:25:44,730 --> 00:25:47,880
that case it's a tarball

00:25:45,660 --> 00:25:49,980
it sees the difference in in that case

00:25:47,880 --> 00:25:53,070
in a shared object from the asterisk

00:25:49,980 --> 00:25:54,840
software and then uses really LF to go

00:25:53,070 --> 00:25:56,940
inside the binary identified very

00:25:54,840 --> 00:25:58,320
specifically which part of the minor E

00:25:56,940 --> 00:26:01,350
as a difference and you can see here

00:25:58,320 --> 00:26:03,120
output 1 output 2 these are the separate

00:26:01,350 --> 00:26:05,400
folders we use for build them and one

00:26:03,120 --> 00:26:08,100
built number two so it sneaks in into

00:26:05,400 --> 00:26:09,720
one of the binaries someone is to figure

00:26:08,100 --> 00:26:11,660
out why and how to fix it but at least

00:26:09,720 --> 00:26:16,560
we detected and we have a very clear

00:26:11,660 --> 00:26:19,320
idea of what the problem is another

00:26:16,560 --> 00:26:21,720
topic that has made some amount of

00:26:19,320 --> 00:26:24,930
progress even if not enough is top level

00:26:21,720 --> 00:26:27,540
parallel build and so right now and the

00:26:24,930 --> 00:26:30,090
way it works is that builds are linear

00:26:27,540 --> 00:26:32,520
every package is built after the other

00:26:30,090 --> 00:26:33,350
within each package we leverage multiple

00:26:32,520 --> 00:26:35,840
cores by using

00:26:33,350 --> 00:26:38,150
make minus J something depending on your

00:26:35,840 --> 00:26:41,000
number of CPUs but packages are built

00:26:38,150 --> 00:26:42,740
one after the other and what top Ravel

00:26:41,000 --> 00:26:46,549
apparel builds allows to do is to do

00:26:42,740 --> 00:26:48,890
this use your multiple cores to build

00:26:46,549 --> 00:26:50,419
and multiple packages in parallel of

00:26:48,890 --> 00:26:52,880
course as long as they don't have any

00:26:50,419 --> 00:26:54,230
dependency relationship so this is

00:26:52,880 --> 00:26:56,900
something that has been in the works for

00:26:54,230 --> 00:26:59,780
quite some time and the main thing that

00:26:56,900 --> 00:27:01,250
remains to be done is and that for which

00:26:59,780 --> 00:27:04,309
we already have patches they've been

00:27:01,250 --> 00:27:07,190
posted so it's really in the works is

00:27:04,309 --> 00:27:09,740
perfect directories where the idea is to

00:27:07,190 --> 00:27:11,659
isolate the build of every package so

00:27:09,740 --> 00:27:13,549
that even if other packages get built in

00:27:11,659 --> 00:27:15,260
parallel if they won't interfere with

00:27:13,549 --> 00:27:16,929
the build of other packages without

00:27:15,260 --> 00:27:19,130
going into the details it's really

00:27:16,929 --> 00:27:21,289
isolating the build of each package in

00:27:19,130 --> 00:27:23,240
its own little environment so that

00:27:21,289 --> 00:27:26,090
having parallel bill is not going to

00:27:23,240 --> 00:27:29,179
close confusion in the build of other

00:27:26,090 --> 00:27:31,070
packages so in this example that build

00:27:29,179 --> 00:27:32,900
which is not very representative it's

00:27:31,070 --> 00:27:36,230
doesn't have that many packages was

00:27:32,900 --> 00:27:38,299
about more than 500 seconds and we

00:27:36,230 --> 00:27:44,150
stopped over a little bit enable it was

00:27:38,299 --> 00:27:45,710
down to 370 years or 80 seconds so it's

00:27:44,150 --> 00:27:47,659
already a good improvement

00:27:45,710 --> 00:27:49,730
I think the improvement can be better

00:27:47,659 --> 00:27:51,470
with bigger configurations which have

00:27:49,730 --> 00:27:53,179
more packages they don't have

00:27:51,470 --> 00:27:55,039
dependencies with each other because we

00:27:53,179 --> 00:27:57,500
can see here there's a chain of

00:27:55,039 --> 00:27:59,419
dependency here where no parallelization

00:27:57,500 --> 00:28:00,799
occurs because these depend on that with

00:27:59,419 --> 00:28:03,110
Japan and this with Japan on that which

00:28:00,799 --> 00:28:05,120
depend on this so this is something

00:28:03,110 --> 00:28:07,880
we're working on it's not yet there but

00:28:05,120 --> 00:28:09,620
yeah hopefully 2020 will be the year of

00:28:07,880 --> 00:28:11,570
top developers will in the woods just

00:28:09,620 --> 00:28:13,990
like it should be the Europe clinics on

00:28:11,570 --> 00:28:13,990
the desktop

00:28:15,130 --> 00:28:21,550
runtime test this is another thing we've

00:28:17,620 --> 00:28:23,530
we've added in 2017 Oh - so it was

00:28:21,550 --> 00:28:26,800
already there and compared to the two

00:28:23,530 --> 00:28:28,270
year time span I'm looking at but it was

00:28:26,800 --> 00:28:30,100
improved quite significantly

00:28:28,270 --> 00:28:34,210
so this runtime test infrastructure

00:28:30,100 --> 00:28:35,830
basically allows us to have a set of

00:28:34,210 --> 00:28:37,900
well-defined good route configuration

00:28:35,830 --> 00:28:40,720
they build a system for armed with this

00:28:37,900 --> 00:28:43,120
piece of user space software builds it

00:28:40,720 --> 00:28:45,340
puts it under qmu and runs a bunch of

00:28:43,120 --> 00:28:47,710
comments to verify that whatever we want

00:28:45,340 --> 00:28:49,780
is working let's say despite module or

00:28:47,710 --> 00:28:54,430
drop bear is running or platino things

00:28:49,780 --> 00:28:56,680
and these tests are executed in our CI

00:28:54,430 --> 00:28:59,590
so that's for now it's once a week we

00:28:56,680 --> 00:29:01,830
run the entire set of test cases and

00:28:59,590 --> 00:29:05,020
make sure that they continue to run and

00:29:01,830 --> 00:29:06,820
this a runtime test infrastructure was

00:29:05,020 --> 00:29:09,510
mainly improved with additional test

00:29:06,820 --> 00:29:11,710
cases so we moved from a tank a few

00:29:09,510 --> 00:29:13,570
thousands of test cases to a few

00:29:11,710 --> 00:29:16,720
hundreds of test cases or something like

00:29:13,570 --> 00:29:18,910
that testing five modules per module do

00:29:16,720 --> 00:29:20,440
a module open JDK and darker and

00:29:18,910 --> 00:29:22,720
hardening flags and lots of other

00:29:20,440 --> 00:29:24,850
features and we of course need many more

00:29:22,720 --> 00:29:26,800
but it's been a lot of improvement and

00:29:24,850 --> 00:29:28,810
if you want and in an easy way to

00:29:26,800 --> 00:29:31,600
contribute to build woods that's a very

00:29:28,810 --> 00:29:35,500
good starting point adding one or two

00:29:31,600 --> 00:29:37,630
more additional tests and there's been

00:29:35,500 --> 00:29:39,610
also tooling improvements so next there

00:29:37,630 --> 00:29:41,230
was a google Summer of Code on one side

00:29:39,610 --> 00:29:43,870
with at our van and on the other side

00:29:41,230 --> 00:29:46,270
there was an internship in in France at

00:29:43,870 --> 00:29:48,270
at boot lane where Victor Wescoe a

00:29:46,270 --> 00:29:50,770
student from friends worked with me

00:29:48,270 --> 00:29:53,020
during the summer to improve some of the

00:29:50,770 --> 00:29:55,900
tooling we have around blue to maintain

00:29:53,020 --> 00:29:57,640
it and this is mainly around release

00:29:55,900 --> 00:30:00,070
monitoring for tracking apps from

00:29:57,640 --> 00:30:02,140
villages and notification to developers

00:30:00,070 --> 00:30:04,840
and auto builder search capabilities I'm

00:30:02,140 --> 00:30:06,880
gonna give a few more details so release

00:30:04,840 --> 00:30:09,730
monitoring org is a website from the

00:30:06,880 --> 00:30:11,620
federal community that tracks from

00:30:09,730 --> 00:30:14,560
releases open source project so it looks

00:30:11,620 --> 00:30:16,660
like this for the fuzzy box project so

00:30:14,560 --> 00:30:19,480
the nobody boxes are still bare and they

00:30:16,660 --> 00:30:22,060
regularly poll they're like HTTP site to

00:30:19,480 --> 00:30:24,430
know when new releases are made and they

00:30:22,060 --> 00:30:26,380
provide an HTTP API we can query to know

00:30:24,430 --> 00:30:27,880
what is the what are the latest version

00:30:26,380 --> 00:30:33,050
of busybox available

00:30:27,880 --> 00:30:35,030
so it tracks 27,000 projects and build

00:30:33,050 --> 00:30:37,610
route as of course a lot less but even

00:30:35,030 --> 00:30:39,500
with 2500 packages that we maintain it's

00:30:37,610 --> 00:30:43,610
difficult to keep all of them up to date

00:30:39,500 --> 00:30:45,860
so what we have done is that we have

00:30:43,610 --> 00:30:49,310
extended our tool that produces this

00:30:45,860 --> 00:30:51,320
table for every Madrid package and it

00:30:49,310 --> 00:30:52,700
knows the current version which is this

00:30:51,320 --> 00:30:55,100
column so that's the version we

00:30:52,700 --> 00:30:57,110
currently have in boot and another

00:30:55,100 --> 00:30:58,940
column shows what release monitoring

00:30:57,110 --> 00:31:02,150
knows about that package so for example

00:30:58,940 --> 00:31:04,640
this is not up to date that's an example

00:31:02,150 --> 00:31:06,710
so this kind of gives us oh maybe we

00:31:04,640 --> 00:31:08,360
should approach what are the improvement

00:31:06,710 --> 00:31:12,280
in that package other security fixes

00:31:08,360 --> 00:31:14,720
there is there anything interesting so

00:31:12,280 --> 00:31:16,760
we've done a number of improvements who

00:31:14,720 --> 00:31:19,280
that script to basically query release

00:31:16,760 --> 00:31:21,380
monitoring improve the speeds and of the

00:31:19,280 --> 00:31:23,330
script and other things like that so

00:31:21,380 --> 00:31:24,920
let's tell you as an initial tooling

00:31:23,330 --> 00:31:27,050
improvement and what that was done and

00:31:24,920 --> 00:31:29,060
this page is public you can go to Bill

00:31:27,050 --> 00:31:32,540
burg org slash stats and you've got this

00:31:29,060 --> 00:31:35,360
page updated on a daily basis based on

00:31:32,540 --> 00:31:38,210
that we've done improvement to the

00:31:35,360 --> 00:31:39,380
notification sent to developers so very

00:31:38,210 --> 00:31:41,150
much like the Linux kernel as a

00:31:39,380 --> 00:31:43,400
maintainer file we have a developer's

00:31:41,150 --> 00:31:46,400
file that says this package this tab

00:31:43,400 --> 00:31:49,130
config and this test is maintained by

00:31:46,400 --> 00:31:51,200
this or that person with this email

00:31:49,130 --> 00:31:53,000
address and we use that to send emails

00:31:51,200 --> 00:31:55,130
so we were already using that to send

00:31:53,000 --> 00:31:57,200
email about build failures occurring in

00:31:55,130 --> 00:31:58,850
now in our tubular infrastructure and

00:31:57,200 --> 00:32:00,770
we've extended that to send

00:31:58,850 --> 00:32:02,330
notifications about packages that are

00:32:00,770 --> 00:32:04,340
not up to date hey you are maintaining

00:32:02,330 --> 00:32:06,560
drought there but Rob air is at version

00:32:04,340 --> 00:32:08,060
this in Beirut and there is this newer

00:32:06,560 --> 00:32:09,920
version available upstream maybe you

00:32:08,060 --> 00:32:11,780
should have a look in and submit a patch

00:32:09,920 --> 00:32:15,050
in and and provide an update to that

00:32:11,780 --> 00:32:17,150
we've also extended it to notify

00:32:15,050 --> 00:32:19,490
developers when they're the Deaf configs

00:32:17,150 --> 00:32:21,620
they maintain no longer bill in our CI

00:32:19,490 --> 00:32:24,830
or when one of the tests they maintain

00:32:21,620 --> 00:32:27,670
no longer build or runs in in our CI so

00:32:24,830 --> 00:32:31,790
it gives something like this for the

00:32:27,670 --> 00:32:34,730
version notification so it says a

00:32:31,790 --> 00:32:36,500
package a CPI CA is that version this

00:32:34,730 --> 00:32:39,410
list is simply route and upstream as

00:32:36,500 --> 00:32:41,090
that maybe you should have a look at

00:32:39,410 --> 00:32:42,860
that so this is sent

00:32:41,090 --> 00:32:45,320
to individual developers about the

00:32:42,860 --> 00:32:47,389
packages they care about and also to the

00:32:45,320 --> 00:32:48,980
mailing list about all packages so that

00:32:47,389 --> 00:32:52,039
the entire community can can participate

00:32:48,980 --> 00:32:54,320
- to the airport and here is the same

00:32:52,039 --> 00:32:56,600
idea for what I say def config failures

00:32:54,320 --> 00:32:58,700
and runtime test failures when a def

00:32:56,600 --> 00:33:01,460
config like for a particular platform no

00:32:58,700 --> 00:33:06,110
longer builds or when given tests and no

00:33:01,460 --> 00:33:08,450
longer builds or runs we improve the

00:33:06,110 --> 00:33:11,539
search capabilities in our auto builders

00:33:08,450 --> 00:33:15,019
or what a builder is a form of build

00:33:11,539 --> 00:33:17,389
machines that 24/7 generate random build

00:33:15,019 --> 00:33:19,070
root configurations build and provide

00:33:17,389 --> 00:33:21,259
the result and it allows us to detect

00:33:19,070 --> 00:33:23,659
dependency problems version

00:33:21,259 --> 00:33:25,549
compatibility issues the fact that this

00:33:23,659 --> 00:33:27,259
given package on this given architecture

00:33:25,549 --> 00:33:29,110
with this optimization flying's and

00:33:27,259 --> 00:33:31,580
these are Dineen flags doesn't build and

00:33:29,110 --> 00:33:35,119
we've been running that for many games

00:33:31,580 --> 00:33:36,980
and the improvement we've done is

00:33:35,119 --> 00:33:39,019
basically be able to search in the

00:33:36,980 --> 00:33:40,429
history of build results by config

00:33:39,019 --> 00:33:43,429
symbol so that we can answer questions

00:33:40,429 --> 00:33:44,899
like what were the build results that

00:33:43,429 --> 00:33:46,669
were successful and armed with just

00:33:44,899 --> 00:33:48,289
ellipse e and that add the Bessie box

00:33:46,669 --> 00:33:50,179
package enabled so of course for Bessie

00:33:48,289 --> 00:33:52,730
box it usually builds fine so that's not

00:33:50,179 --> 00:33:53,779
very good example but sometimes it helps

00:33:52,730 --> 00:33:55,940
us investigate

00:33:53,779 --> 00:33:58,129
since when something started to fail

00:33:55,940 --> 00:34:00,529
until when it was still working when it

00:33:58,129 --> 00:34:02,899
started it failing so that's a very nice

00:34:00,529 --> 00:34:04,249
improvement for mainly the corporate

00:34:02,899 --> 00:34:06,799
with developers when they are

00:34:04,249 --> 00:34:08,450
investigating build issues try to

00:34:06,799 --> 00:34:10,099
understand the scope is it only

00:34:08,450 --> 00:34:12,139
appearing on one simply architecture or

00:34:10,099 --> 00:34:14,119
multiple CPU architecture is it

00:34:12,139 --> 00:34:15,649
appearing only when we have this

00:34:14,119 --> 00:34:17,690
combination of that package and then

00:34:15,649 --> 00:34:20,599
package enable or not so that's you know

00:34:17,690 --> 00:34:22,040
helping us answer those questions so it

00:34:20,599 --> 00:34:24,200
looks like this it's a very simple page

00:34:22,040 --> 00:34:26,540
that you can give all your search

00:34:24,200 --> 00:34:30,260
Criterion's and it gives you a list of

00:34:26,540 --> 00:34:32,149
blood results we've got a few other

00:34:30,260 --> 00:34:35,599
smaller improvements that were not worst

00:34:32,149 --> 00:34:38,389
having their entire slide a make lonex

00:34:35,599 --> 00:34:40,250
difficult leak target that shows you the

00:34:38,389 --> 00:34:42,530
difference between the current

00:34:40,250 --> 00:34:43,849
configuration you're using for the Linux

00:34:42,530 --> 00:34:45,470
kernel because you've changed it you've

00:34:43,849 --> 00:34:47,569
edited it and the one you have stored

00:34:45,470 --> 00:34:48,950
for your platform configuration so it

00:34:47,569 --> 00:34:51,020
shows you okay you have enabled that

00:34:48,950 --> 00:34:53,910
driver that other driver maybe you need

00:34:51,020 --> 00:34:56,480
to update your configuration accordingly

00:34:53,910 --> 00:34:59,280
we have support for generating images

00:34:56,480 --> 00:35:01,890
filesystem images in the f2 FS and

00:34:59,280 --> 00:35:03,840
better FS fun system formats so in

00:35:01,890 --> 00:35:06,570
addition to the usual and I said ext4

00:35:03,840 --> 00:35:10,350
and squash FS and ubi offense and

00:35:06,570 --> 00:35:12,210
finally we've added support for get text

00:35:10,350 --> 00:35:14,070
tiny as an alternative for the

00:35:12,210 --> 00:35:17,370
full-blown you get text so if you don't

00:35:14,070 --> 00:35:19,500
need complete and native language

00:35:17,370 --> 00:35:21,120
support with translations and you can

00:35:19,500 --> 00:35:23,190
work with just a stub that does more

00:35:21,120 --> 00:35:25,170
translation get text tiny is nice it has

00:35:23,190 --> 00:35:27,650
a smaller footprint smaller build time

00:35:25,170 --> 00:35:30,000
so we know support class of these

00:35:27,650 --> 00:35:35,670
alternatives for the get text

00:35:30,000 --> 00:35:38,760
implementation so to conclude project is

00:35:35,670 --> 00:35:39,750
active we've seen with the comets and a

00:35:38,760 --> 00:35:42,540
number of contributors

00:35:39,750 --> 00:35:45,390
we've got LTS release once a year with

00:35:42,540 --> 00:35:48,030
security and bug fixes a few new CPU

00:35:45,390 --> 00:35:49,890
architectures new packet infrastructure

00:35:48,030 --> 00:35:54,060
to cover new build system that show up

00:35:49,890 --> 00:35:56,250
the get cashing feature in the dominant

00:35:54,060 --> 00:35:59,100
file structure the fact that we keep

00:35:56,250 --> 00:36:02,070
packages up to date we have many new

00:35:59,100 --> 00:36:03,600
packages and new notifications around

00:36:02,070 --> 00:36:06,030
release monitoring is even pushing that

00:36:03,600 --> 00:36:08,610
folder and we see a good increase in the

00:36:06,030 --> 00:36:10,230
number of contributions in this area

00:36:08,610 --> 00:36:12,510
because people receive notifications so

00:36:10,230 --> 00:36:15,930
they submit patches to help keep their

00:36:12,510 --> 00:36:17,610
packages updated reproducible builds in

00:36:15,930 --> 00:36:19,380
effort and in progress they've been a

00:36:17,610 --> 00:36:22,710
good push and we hope to continue that

00:36:19,380 --> 00:36:26,640
effort and as I said maintenance tooling

00:36:22,710 --> 00:36:28,800
improvements as well we're done there is

00:36:26,640 --> 00:36:30,750
a tutorial on build routes on Wednesday

00:36:28,800 --> 00:36:35,310
if you're interested about the basics

00:36:30,750 --> 00:36:38,370
and other than that about done I know if

00:36:35,310 --> 00:36:40,080
I have time for questions no maybe I'll

00:36:38,370 --> 00:36:41,820
take one just to pretend I took

00:36:40,080 --> 00:36:43,380
questions and otherwise I'll be in the

00:36:41,820 --> 00:36:45,450
hallway for the entire conference so

00:36:43,380 --> 00:36:47,880
feel free to hang at me and ask

00:36:45,450 --> 00:36:50,100
questions maybe one question and then I

00:36:47,880 --> 00:36:50,450
give the time the microphone to the next

00:36:50,100 --> 00:36:54,200
speaker

00:36:50,450 --> 00:36:54,200
thank you for your attention

00:37:00,190 --> 00:37:04,299
one question yes please

00:37:06,279 --> 00:37:10,670
so what's the best way to do an enema

00:37:08,539 --> 00:37:13,910
fest with build roads well that's I was

00:37:10,670 --> 00:37:16,489
hoping for a quicker question so it

00:37:13,910 --> 00:37:18,349
depends if you put your entire system to

00:37:16,489 --> 00:37:20,299
an inny tram FS and stay there and never

00:37:18,349 --> 00:37:21,980
switch to a root filesystem that that's

00:37:20,299 --> 00:37:24,019
kind of reason but if you have this

00:37:21,980 --> 00:37:25,609
combination of you need an innie trauma

00:37:24,019 --> 00:37:27,319
fest and a root filesystem and you

00:37:25,609 --> 00:37:29,390
switch between the two during the boot

00:37:27,319 --> 00:37:31,099
process then essentially you need to

00:37:29,390 --> 00:37:33,230
build root configurations one to build

00:37:31,099 --> 00:37:34,609
the complete root filesystem and want to

00:37:33,230 --> 00:37:36,289
build the inner triumph s and then some

00:37:34,609 --> 00:37:38,390
kind of glue between the two and to

00:37:36,289 --> 00:37:40,849
combine them that's the kind of 32nd

00:37:38,390 --> 00:37:42,440
ends where I can give alright thanks a

00:37:40,849 --> 00:37:44,180
lot again I'd be in the always you have

00:37:42,440 --> 00:37:46,069
more questions and I want to leave the

00:37:44,180 --> 00:37:48,090
the place for the next speaker thank you

00:37:46,069 --> 00:37:52,249
and have a good conference

00:37:48,090 --> 00:37:52,249

YouTube URL: https://www.youtube.com/watch?v=w-74BMK1ROM


