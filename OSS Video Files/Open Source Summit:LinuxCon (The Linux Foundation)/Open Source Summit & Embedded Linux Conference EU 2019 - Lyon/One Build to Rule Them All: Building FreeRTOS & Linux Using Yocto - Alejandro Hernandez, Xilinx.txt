Title: One Build to Rule Them All: Building FreeRTOS & Linux Using Yocto - Alejandro Hernandez, Xilinx
Publication date: 2019-11-04
Playlist: Open Source Summit & Embedded Linux Conference EU 2019 - Lyon
Description: 
	One Build to Rule Them All: Building FreeRTOS & Linux Using Yocto - Alejandro Hernandez, Xilinx

Systems with a mix of architectures on a single device are commonly found on embedded products nowadays, where each processor provides different functionality; allowing developers to achieve great performance, while minimizing power consumption and cost.
Where Linux can excel at providing driver compatibility, community support and availability of software packages, an RTOS such as FreeRTOS might be ideal to make important decisions guaranteeing maximum time to perform critical operations whilst requiring a smaller footprint.

Since both operating systems might be used on a single product, a single workflow to develop applications for them would be ideal, this talk will cover how, by using a meta-freertos layer and OpenEmbedded/Yocto Project, applications can be created (and tested) via classes and recipes for both FreeRTOS and Embedded Linux, along with the toolchain and an SDK.

To showcase its usage, a sample FreeRTOS application built with the Yocto Project will be executed on QEMU during the talk.
Captions: 
	00:00:00,439 --> 00:00:07,470
hello ok I think I'm gonna get started

00:00:04,130 --> 00:00:12,240
it's better to finish on time or early

00:00:07,470 --> 00:00:14,219
on then not finish at all so for those

00:00:12,240 --> 00:00:14,969
of you who now know me my name is

00:00:14,219 --> 00:00:19,529
Alejandro hernÃ¡ndez

00:00:14,969 --> 00:00:23,970
and I am currently the Yocto project

00:00:19,529 --> 00:00:25,560
tech lead at tilings and I've been at

00:00:23,970 --> 00:00:29,310
Yocto developer for a few years now and

00:00:25,560 --> 00:00:31,740
I'm gonna present to you this one bill

00:00:29,310 --> 00:00:33,059
to rule them all building 3 are those

00:00:31,740 --> 00:00:35,910
and Linux using the Yocto project

00:00:33,059 --> 00:00:45,719
there's a Tolkien reference there of

00:00:35,910 --> 00:00:47,280
course so the yellow in this

00:00:45,719 --> 00:00:50,579
presentation I divided in 3 parts

00:00:47,280 --> 00:00:52,670
basically the first is like a very small

00:00:50,579 --> 00:00:56,000
introduction on why this is important

00:00:52,670 --> 00:00:58,219
talking about heterogeneous systems our

00:00:56,000 --> 00:01:00,660
RTOS as Linux and bare metal

00:00:58,219 --> 00:01:04,350
applications and how their word cloves

00:01:00,660 --> 00:01:06,780
defer and there's the second part of the

00:01:04,350 --> 00:01:10,260
the presentation one's gonna be on the

00:01:06,780 --> 00:01:14,610
open embedded development that happened

00:01:10,260 --> 00:01:16,229
to two for this to be achievable free

00:01:14,610 --> 00:01:18,000
artisan unlocked on the archetype

00:01:16,229 --> 00:01:22,470
project what what is new live in lip

00:01:18,000 --> 00:01:25,500
gloss how that's that's wired into into

00:01:22,470 --> 00:01:27,509
bit baked and then the last then

00:01:25,500 --> 00:01:30,869
actually creating a layer meta free

00:01:27,509 --> 00:01:33,390
artists that can be used right this

00:01:30,869 --> 00:01:37,110
layer can psych class recipes what's the

00:01:33,390 --> 00:01:40,259
BSP what's an application how can we run

00:01:37,110 --> 00:01:42,450
it on qmu for testing and actually how

00:01:40,259 --> 00:01:46,649
can you we how can we run automated

00:01:42,450 --> 00:01:48,060
tests on on this applications using the

00:01:46,649 --> 00:01:51,479
open and better infrastructure that

00:01:48,060 --> 00:01:53,850
already exists in the third part of it

00:01:51,479 --> 00:01:56,579
it's like actually how can we achieve

00:01:53,850 --> 00:01:58,229
one bill to rule them all which is where

00:01:56,579 --> 00:01:59,759
I'm going to touch on concept of multi

00:01:58,229 --> 00:02:03,799
config built and multi config

00:01:59,759 --> 00:02:10,220
dependencies so first of all

00:02:03,799 --> 00:02:10,220
heterogeneous devices I think there's

00:02:10,520 --> 00:02:15,410
the more and more everyday we're seeing

00:02:13,100 --> 00:02:18,800
devices that have a myriad of different

00:02:15,410 --> 00:02:20,480
architectures inside them right I'm the

00:02:18,800 --> 00:02:22,610
obvious side links example here is the

00:02:20,480 --> 00:02:24,830
virtual architecture in which well

00:02:22,610 --> 00:02:29,960
styling exist an FPGA company right so

00:02:24,830 --> 00:02:31,640
it has an FPGA fabric and also has which

00:02:29,960 --> 00:02:35,420
is called a programmable logic part and

00:02:31,640 --> 00:02:37,640
also has a processing system part or ps

00:02:35,420 --> 00:02:41,690
part which is the part that i work on it

00:02:37,640 --> 00:02:44,180
that runs Linux it has an a 72 cortex -

00:02:41,690 --> 00:02:46,310
a 72 processor which is the application

00:02:44,180 --> 00:02:48,560
processing unit in that runs Linux and

00:02:46,310 --> 00:02:51,740
it has a real-time processing unit or

00:02:48,560 --> 00:02:57,340
not an R 5 that can run on rtos on it

00:02:51,740 --> 00:02:59,810
along with a mic release for example and

00:02:57,340 --> 00:03:01,820
well the reason for these I when I was

00:02:59,810 --> 00:03:05,140
in grad school I had this professor of

00:03:01,820 --> 00:03:07,940
computer architecture in and he was like

00:03:05,140 --> 00:03:09,860
explaining to us like pipelining or

00:03:07,940 --> 00:03:12,110
hyper threading or something and then

00:03:09,860 --> 00:03:14,300
after explaining he would ask us what's

00:03:12,110 --> 00:03:15,980
the right answer for this and then the

00:03:14,300 --> 00:03:18,260
answer is almost all the time it's a

00:03:15,980 --> 00:03:22,550
depends like there's no single answer

00:03:18,260 --> 00:03:24,920
for your problem there's so for some

00:03:22,550 --> 00:03:27,590
application Linux is fine for some other

00:03:24,920 --> 00:03:29,090
application on rtos is fine you might

00:03:27,590 --> 00:03:31,190
need like deterministic behavior or

00:03:29,090 --> 00:03:32,930
something for some other application you

00:03:31,190 --> 00:03:35,090
can use bare metal so there's no one

00:03:32,930 --> 00:03:36,800
single answer that's gonna solve all

00:03:35,090 --> 00:03:39,620
your problems

00:03:36,800 --> 00:03:42,080
and yeah I mean in the embedded space we

00:03:39,620 --> 00:03:45,350
have this right like we can even on this

00:03:42,080 --> 00:03:46,880
device you can run different things

00:03:45,350 --> 00:03:50,300
depending on what you want you can run

00:03:46,880 --> 00:03:50,780
Linux and on RTOS you can just run an

00:03:50,300 --> 00:03:52,760
RTOS

00:03:50,780 --> 00:03:54,770
you can run run Linux and a bare metal

00:03:52,760 --> 00:03:57,860
application you can just ruin bare metal

00:03:54,770 --> 00:03:59,780
and the problem comes here where they

00:03:57,860 --> 00:04:03,050
all use different workflows and it

00:03:59,780 --> 00:04:05,900
becomes really hard to get everyone

00:04:03,050 --> 00:04:10,340
together in and be able to develop this

00:04:05,900 --> 00:04:16,160
you know in an easier manner so free

00:04:10,340 --> 00:04:18,919
artists and the octave project the I the

00:04:16,160 --> 00:04:21,350
the point that I'm gonna prove today or

00:04:18,919 --> 00:04:24,640
that I'm trying to prove today is that

00:04:21,350 --> 00:04:29,140
you can't do this and I use

00:04:24,640 --> 00:04:32,260
the Q mu RM b5 machine when I started as

00:04:29,140 --> 00:04:35,320
it was Q mu arm but it was it was move

00:04:32,260 --> 00:04:38,830
now to kim r b5 which is a versatile 9

00:04:35,320 --> 00:04:40,930
to 6 I think BSP and that's already a

00:04:38,830 --> 00:04:46,060
nope no ii corps that's the reason why

00:04:40,930 --> 00:04:47,680
I'm using that now the other thing when

00:04:46,060 --> 00:04:50,590
if you look at the free arts as

00:04:47,680 --> 00:04:52,210
documentation you're gonna realize that

00:04:50,590 --> 00:04:54,070
what you need to build an application

00:04:52,210 --> 00:04:55,540
for this it's the armor and better tool

00:04:54,070 --> 00:04:56,650
chain and they just say this go and

00:04:55,540 --> 00:04:59,080
download it from somewhere

00:04:56,650 --> 00:05:03,070
and once you like get the tool change

00:04:59,080 --> 00:05:05,620
you you look at in what's in it so you

00:05:03,070 --> 00:05:08,350
got the GNU C compiler you got Ben utils

00:05:05,620 --> 00:05:10,210
gdv and you get new live and I think the

00:05:08,350 --> 00:05:12,760
first three components were pretty much

00:05:10,210 --> 00:05:15,780
all familiar with them and the last one

00:05:12,760 --> 00:05:18,010
we all may not so I'm going to put

00:05:15,780 --> 00:05:20,080
explain what they say on the web page it

00:05:18,010 --> 00:05:22,330
says new live is the C library intended

00:05:20,080 --> 00:05:24,250
for use on embedded systems it is a

00:05:22,330 --> 00:05:26,440
conglomeration of several library parts

00:05:24,250 --> 00:05:28,150
all under several licenses that make

00:05:26,440 --> 00:05:30,340
them easily usable on and better

00:05:28,150 --> 00:05:32,110
products and if you translate that to

00:05:30,340 --> 00:05:33,330
English it means that it's a very

00:05:32,110 --> 00:05:36,850
bare-bones

00:05:33,330 --> 00:05:40,090
C library that it's meant to be used on

00:05:36,850 --> 00:05:41,400
on either a bare metal application or an

00:05:40,090 --> 00:05:43,630
RTOS

00:05:41,400 --> 00:05:48,220
so that's what's on in the arm and by

00:05:43,630 --> 00:05:49,630
the toolchain right so some of the

00:05:48,220 --> 00:05:52,060
previous work that i'm not gonna focus

00:05:49,630 --> 00:05:55,450
on the on this presentation is what it's

00:05:52,060 --> 00:05:58,510
actually getting new live and lip gloss

00:05:55,450 --> 00:06:00,820
recipes and the wiring this TC leap c

00:05:58,510 --> 00:06:03,790
new live wiring the happen and open a

00:06:00,820 --> 00:06:06,220
better core to achieve this it's just

00:06:03,790 --> 00:06:08,410
worth mentioning and by the way new live

00:06:06,220 --> 00:06:12,669
is the seal every part in lip gloss is

00:06:08,410 --> 00:06:14,979
the bsp part in a very high level new

00:06:12,669 --> 00:06:17,260
lip contains a lot of wick symbols which

00:06:14,979 --> 00:06:19,260
allows the program to link and then on

00:06:17,260 --> 00:06:22,030
the label as part of the red of the

00:06:19,260 --> 00:06:24,490
application you override whatever heart

00:06:22,030 --> 00:06:26,979
depending on the heart what you have and

00:06:24,490 --> 00:06:29,560
then the the other part is like creating

00:06:26,979 --> 00:06:31,240
the actual layer right so meta free

00:06:29,560 --> 00:06:35,380
artists is that the name of the layer i

00:06:31,240 --> 00:06:37,060
have to create a distro for it that the

00:06:35,380 --> 00:06:40,330
problem comes here where

00:06:37,060 --> 00:06:42,700
in Linux you have an OS and you have

00:06:40,330 --> 00:06:46,150
applications on top of it but in an RTOS

00:06:42,700 --> 00:06:47,800
the RTOS itself is the application so

00:06:46,150 --> 00:06:51,820
that's that's where things become a

00:06:47,800 --> 00:06:55,180
little confusing and then also I try to

00:06:51,820 --> 00:06:58,360
abstract the concept of the OS the vsp

00:06:55,180 --> 00:07:01,360
for that kernel for the Fiats of kernel

00:06:58,360 --> 00:07:05,080
and what the application part of it is

00:07:01,360 --> 00:07:06,370
and to to achieve this I use a class

00:07:05,080 --> 00:07:10,090
which I'm going to show you in a little

00:07:06,370 --> 00:07:12,310
bit and lately sorry lastly what I

00:07:10,090 --> 00:07:16,300
wanted was to be able to run automated

00:07:12,310 --> 00:07:17,800
tests on an RTOS application using the

00:07:16,300 --> 00:07:19,570
open embedded testing infrastructure

00:07:17,800 --> 00:07:21,520
because that was already there that's

00:07:19,570 --> 00:07:23,710
being used every single day on the auto

00:07:21,520 --> 00:07:25,420
builder for Linux and there's no reason

00:07:23,710 --> 00:07:29,350
why can that why that can't be used to

00:07:25,420 --> 00:07:32,860
test something else so first a distro

00:07:29,350 --> 00:07:35,110
the distro that is a distro kampf it's

00:07:32,860 --> 00:07:37,990
not very complicated it's it's pretty

00:07:35,110 --> 00:07:40,540
much placeholder that's just the name of

00:07:37,990 --> 00:07:43,450
the distro and then the important part

00:07:40,540 --> 00:07:45,670
there is the TC leap C variable that it

00:07:43,450 --> 00:07:48,250
specifies the build system that is gonna

00:07:45,670 --> 00:07:52,030
we're gonna use new live as a C library

00:07:48,250 --> 00:07:54,010
on on a normal normal distro like on

00:07:52,030 --> 00:07:58,500
pokey or something you would see either

00:07:54,010 --> 00:08:06,490
like muscle or jelly PC in that part

00:07:58,500 --> 00:08:10,270
let's see the time ok so then this is

00:08:06,490 --> 00:08:13,150
the class the the freertos app class and

00:08:10,270 --> 00:08:16,270
the idea here is that be able to provide

00:08:13,150 --> 00:08:19,390
a single class that recipes can inherit

00:08:16,270 --> 00:08:21,670
it makes it easy to for different

00:08:19,390 --> 00:08:26,920
applications to be developed in this in

00:08:21,670 --> 00:08:28,690
this manner right the IE declare some

00:08:26,920 --> 00:08:31,180
variables here the first ones the first

00:08:28,690 --> 00:08:33,730
ReactOS version which is ten to one

00:08:31,180 --> 00:08:37,210
which at least until the beginning of

00:08:33,730 --> 00:08:39,130
this month was the latest SOC arise

00:08:37,210 --> 00:08:40,960
where is gonna get the source code and

00:08:39,130 --> 00:08:43,990
as you can see there's only two there

00:08:40,960 --> 00:08:47,560
one it's coming directly from amazon

00:08:43,990 --> 00:08:49,690
free art does get which is the the

00:08:47,560 --> 00:08:50,910
official one and the other one it's

00:08:49,690 --> 00:08:53,430
coming from

00:08:50,910 --> 00:08:57,630
my github because I that's where I get

00:08:53,430 --> 00:09:00,210
the bsp part of it and then I just this

00:08:57,630 --> 00:09:04,020
are just the checksums there's nothing

00:09:00,210 --> 00:09:07,230
funny there here's when things get a

00:09:04,020 --> 00:09:10,290
little interesting because now that I

00:09:07,230 --> 00:09:12,720
got the BSP separated from the I got the

00:09:10,290 --> 00:09:14,700
kernels right and now I have a VSP or a

00:09:12,720 --> 00:09:17,730
port of free actors that I want to use

00:09:14,700 --> 00:09:20,340
and that gets downloaded from a

00:09:17,730 --> 00:09:24,570
different repo and basically I have to

00:09:20,340 --> 00:09:26,160
copy it to the kernel code so he knows

00:09:24,570 --> 00:09:28,950
about it right it knows it's gonna build

00:09:26,160 --> 00:09:30,900
that application I do have to declare

00:09:28,950 --> 00:09:34,380
some variables here so the make files

00:09:30,900 --> 00:09:36,990
know where the code resides and stuff

00:09:34,380 --> 00:09:41,490
like that and then I do create some tax

00:09:36,990 --> 00:09:43,440
for it to make it make bit big things

00:09:41,490 --> 00:09:46,170
that is building an actual Linux image

00:09:43,440 --> 00:09:48,360
basically so for example I need a do

00:09:46,170 --> 00:09:53,970
image task it does nothing but I needed

00:09:48,360 --> 00:09:59,340
to exist part of the class as well is

00:09:53,970 --> 00:10:01,230
the emu wiring that allows us to run use

00:09:59,340 --> 00:10:04,320
the same infrastructure as I said from

00:10:01,230 --> 00:10:07,410
openembedded to run qmu for a different

00:10:04,320 --> 00:10:09,720
operating system so in this in this case

00:10:07,410 --> 00:10:12,870
basically I'm saying I'm gonna use qmu

00:10:09,720 --> 00:10:15,330
system arm and my architecture is gonna

00:10:12,870 --> 00:10:17,460
be versatile PV that's that's the

00:10:15,330 --> 00:10:21,570
interesting part of it I'm gonna use a

00:10:17,460 --> 00:10:24,060
binary as a smiley kernel and as I

00:10:21,570 --> 00:10:28,940
explained here this whole next part is

00:10:24,060 --> 00:10:31,500
necessary to create the wiring for qmu

00:10:28,940 --> 00:10:33,510
if you look at your deployed directory

00:10:31,500 --> 00:10:36,330
once you build a Linux image you end up

00:10:33,510 --> 00:10:38,970
with your image and then a file that's

00:10:36,330 --> 00:10:41,610
uh and ends with QM you boot comes and

00:10:38,970 --> 00:10:44,520
it contains the configuration that ronk

00:10:41,610 --> 00:10:46,880
Amy knows how it's gonna run it right so

00:10:44,520 --> 00:10:49,890
this part is necessary for that and

00:10:46,880 --> 00:10:53,070
while this might seem a little

00:10:49,890 --> 00:10:55,110
convoluted the idea is that no one has

00:10:53,070 --> 00:10:57,570
to look at this the class you should

00:10:55,110 --> 00:10:59,970
just inherit it and then focus on your

00:10:57,570 --> 00:11:02,640
application right so how does a recipe

00:10:59,970 --> 00:11:04,890
actually look like and this is a recipe

00:11:02,640 --> 00:11:08,040
for an application

00:11:04,890 --> 00:11:09,960
this is the complete recipe so any hair

00:11:08,040 --> 00:11:11,610
it's a class so you don't have to take

00:11:09,960 --> 00:11:15,300
care of all the cute stuff and anything

00:11:11,610 --> 00:11:18,480
like that and then I have to source

00:11:15,300 --> 00:11:21,150
sources here one is that well in the

00:11:18,480 --> 00:11:23,310
class I have the kernel right so I get

00:11:21,150 --> 00:11:25,550
the kernel now from Amazon I get the BSP

00:11:23,310 --> 00:11:29,520
from somewhere else the port for

00:11:25,550 --> 00:11:31,410
versatile 9:26 and then here I I have

00:11:29,520 --> 00:11:35,070
the application code only the

00:11:31,410 --> 00:11:36,750
application code and I just have a small

00:11:35,070 --> 00:11:39,510
patch for the make file to use new live

00:11:36,750 --> 00:11:42,000
and that's pretty much it the

00:11:39,510 --> 00:11:44,400
application that I used I got it from an

00:11:42,000 --> 00:11:45,750
open source project which had a port for

00:11:44,400 --> 00:11:48,870
the arm 9:00 to 6:00

00:11:45,750 --> 00:11:51,300
EGS and I added some extra functionality

00:11:48,870 --> 00:11:53,760
to it too so whatever you find on this

00:11:51,300 --> 00:11:56,730
repo it's this plus some extra

00:11:53,760 --> 00:12:01,250
functionality to use the toss notify API

00:11:56,730 --> 00:12:04,080
from free artists to wake up a task

00:12:01,250 --> 00:12:07,550
there's there's two recipes on the layer

00:12:04,080 --> 00:12:10,050
right now one is where you get the

00:12:07,550 --> 00:12:12,120
source code for the application from a

00:12:10,050 --> 00:12:14,070
git repo so this is called this is

00:12:12,120 --> 00:12:16,530
actually free artists demo underscore

00:12:14,070 --> 00:12:20,100
get and then the other one is free

00:12:16,530 --> 00:12:22,470
artist demo - local so the local the

00:12:20,100 --> 00:12:25,820
application code itself it's locally on

00:12:22,470 --> 00:12:28,590
the file system and it looks like this

00:12:25,820 --> 00:12:30,000
it these are all the files are necessary

00:12:28,590 --> 00:12:31,740
and that's only the part of the

00:12:30,000 --> 00:12:34,590
application it doesn't it doesn't have

00:12:31,740 --> 00:12:36,420
the ferritin only doesn't have the BSP

00:12:34,590 --> 00:12:39,540
report nothing like that is just the

00:12:36,420 --> 00:12:44,250
application right and that that's the

00:12:39,540 --> 00:12:48,840
whole recipe it's it's it's simple this

00:12:44,250 --> 00:12:51,030
is what the tree of the whole I think

00:12:48,840 --> 00:12:54,110
this ran out of battery this is what the

00:12:51,030 --> 00:12:57,210
tree of the whole layer looks like and

00:12:54,110 --> 00:12:59,160
as you can see it's this those are the

00:12:57,210 --> 00:13:04,430
files that I just showed you there are

00:12:59,160 --> 00:13:04,430
two recipes and the distro comes there

00:13:06,140 --> 00:13:11,970
I'm gonna show you a demo of how this

00:13:09,480 --> 00:13:16,530
works and I thought it was better to use

00:13:11,970 --> 00:13:18,300
a video not that I wouldn't run but I

00:13:16,530 --> 00:13:21,330
wanted to I

00:13:18,300 --> 00:13:24,630
want to stop at some point that I think

00:13:21,330 --> 00:13:29,280
they're interesting so I have three

00:13:24,630 --> 00:13:32,790
videos hopefully you can see it right so

00:13:29,280 --> 00:13:35,100
first of all this is just a clone of

00:13:32,790 --> 00:13:38,610
pokey that's it I just did clone git

00:13:35,100 --> 00:13:43,620
clone and then the funky repo along with

00:13:38,610 --> 00:13:48,890
the meta freertos layer so that's very

00:13:43,620 --> 00:13:52,050
basic after that I sort my environment

00:13:48,890 --> 00:13:54,150
just like I as you would normally do I'm

00:13:52,050 --> 00:13:57,420
gonna show you what my config my local

00:13:54,150 --> 00:14:00,000
Kampf looks like and it has I'm gonna

00:13:57,420 --> 00:14:02,940
pause it there so it has a machine which

00:14:00,000 --> 00:14:05,670
I like I said this is for qrb five for

00:14:02,940 --> 00:14:07,590
testing the distro name which is the

00:14:05,670 --> 00:14:09,840
file is gonna use that I just showed you

00:14:07,590 --> 00:14:11,790
before and then since I'm gonna be

00:14:09,840 --> 00:14:13,980
running automated tests as you would

00:14:11,790 --> 00:14:16,560
with Linux as well you inherit the class

00:14:13,980 --> 00:14:19,410
test image and then you i created a test

00:14:16,560 --> 00:14:21,420
suite for free artists which obviously

00:14:19,410 --> 00:14:24,930
it's not the same as linux so that does

00:14:21,420 --> 00:14:26,640
what you decide what to test for your

00:14:24,930 --> 00:14:27,270
application you would have to write your

00:14:26,640 --> 00:14:32,250
own test

00:14:27,270 --> 00:14:36,060
I just does just swimming in to so you

00:14:32,250 --> 00:14:39,510
can see it also there just FYI I already

00:14:36,060 --> 00:14:44,100
like this this is gonna be built from st

00:14:39,510 --> 00:14:46,560
cache so it was faster I just didn't

00:14:44,100 --> 00:14:49,020
want to have to type all this in lose

00:14:46,560 --> 00:14:51,060
time or not on that so so there I am

00:14:49,020 --> 00:14:55,080
gonna build the local demo right I call

00:14:51,060 --> 00:14:58,040
bed beg for your toes demo local it

00:14:55,080 --> 00:14:58,040
parses the recipes

00:15:06,110 --> 00:15:11,089
I'm gonna pass it there for a second so

00:15:08,180 --> 00:15:13,459
you can see here in the target says it

00:15:11,089 --> 00:15:16,850
says that it's building the EI VI which

00:15:13,459 --> 00:15:19,009
is the embedded tool chain for arm in

00:15:16,850 --> 00:15:21,199
this case and again the distro name is

00:15:19,009 --> 00:15:23,240
there and stuff like that so I'm gonna

00:15:21,199 --> 00:15:25,819
let it build it's it's quite fast

00:15:23,240 --> 00:15:27,889
because it's from a state and this has

00:15:25,819 --> 00:15:32,149
way less dependencies in Linux so it

00:15:27,889 --> 00:15:35,240
builds way faster anyway so it runs all

00:15:32,149 --> 00:15:40,670
the tasks for further recipe and at the

00:15:35,240 --> 00:15:44,749
end that's it I just built it I if I do

00:15:40,670 --> 00:15:48,559
a less on my deploy directory I see that

00:15:44,749 --> 00:15:51,559
I just built a binary an elf file and

00:15:48,559 --> 00:15:54,829
manifest that's needed for the test

00:15:51,559 --> 00:15:57,350
cases and like I mentioned the key mu

00:15:54,829 --> 00:15:59,269
boot that comm file which is necessary

00:15:57,350 --> 00:16:03,439
for ranking you to understand what its

00:15:59,269 --> 00:16:05,929
gonna run so the next step is just as

00:16:03,439 --> 00:16:07,639
after you build a Linux image if you

00:16:05,929 --> 00:16:11,929
want to test it you just type round key

00:16:07,639 --> 00:16:13,309
mu and I just build three artists and

00:16:11,929 --> 00:16:15,050
I'm just gonna type Ron Kim you and

00:16:13,309 --> 00:16:19,730
that's it that's all I'm gonna do I

00:16:15,050 --> 00:16:23,209
passed it and I'm gonna pulse it again

00:16:19,730 --> 00:16:28,009
there so there you can see the the full

00:16:23,209 --> 00:16:29,449
command that that qmu is using again you

00:16:28,009 --> 00:16:32,300
can see for example the machine that's

00:16:29,449 --> 00:16:34,189
using it so tell pv one or twenty eight

00:16:32,300 --> 00:16:36,980
megabytes and stuff like that everything

00:16:34,189 --> 00:16:39,050
all these stuff it's taking care on the

00:16:36,980 --> 00:16:40,970
class and then it starts running the

00:16:39,050 --> 00:16:43,129
actual application so free arts our

00:16:40,970 --> 00:16:45,199
sample application does where notes it

00:16:43,129 --> 00:16:46,999
starts and then it says the text may be

00:16:45,199 --> 00:16:49,279
entered using a keyboard and will be

00:16:46,999 --> 00:16:51,769
displayed then when enter is pressed and

00:16:49,279 --> 00:16:52,879
then I have a periodic task that runs

00:16:51,769 --> 00:16:55,519
every 10 seconds

00:16:52,879 --> 00:16:57,379
I have another task that is just called

00:16:55,519 --> 00:17:00,170
task one and it runs every one or two

00:16:57,379 --> 00:17:03,679
seconds I don't remember and then I have

00:17:00,170 --> 00:17:05,990
another task that it's blocked and I

00:17:03,679 --> 00:17:08,720
have to type something and whenever I

00:17:05,990 --> 00:17:09,350
times type something that has will get

00:17:08,720 --> 00:17:12,079
unblocked

00:17:09,350 --> 00:17:15,230
so that here task one run and then the

00:17:12,079 --> 00:17:17,210
other task got blocked has one ran again

00:17:15,230 --> 00:17:21,100
and then I typed a

00:17:17,210 --> 00:17:23,150
in it unblocked the task that was

00:17:21,100 --> 00:17:25,339
blogged before so we receive our

00:17:23,150 --> 00:17:27,470
notification it unblock the task and

00:17:25,339 --> 00:17:29,630
then he blocked again so it's quitting

00:17:27,470 --> 00:17:30,550
for something else and I typed B same

00:17:29,630 --> 00:17:33,290
thing happen

00:17:30,550 --> 00:17:35,120
Castle Wan keeps running and then I type

00:17:33,290 --> 00:17:37,760
ELC 2019

00:17:35,120 --> 00:17:39,890
I am blog the task again and then it

00:17:37,760 --> 00:17:41,720
over and over again right and then I

00:17:39,890 --> 00:17:43,520
think yeah the period it's been more

00:17:41,720 --> 00:17:45,050
than 10 seconds so the periodic tasks

00:17:43,520 --> 00:17:47,480
that was supposed to run after 10

00:17:45,050 --> 00:17:51,380
seconds once again deterministic

00:17:47,480 --> 00:17:55,880
behavior so there I just exited Bronk

00:17:51,380 --> 00:17:59,930
EMU just normally as you would and the

00:17:55,880 --> 00:18:03,140
next part of this is now I want to have

00:17:59,930 --> 00:18:04,460
this run I develop my application I want

00:18:03,140 --> 00:18:06,410
it to run

00:18:04,460 --> 00:18:07,940
automate a test on it and I want to make

00:18:06,410 --> 00:18:10,010
sure if something broke someone broke

00:18:07,940 --> 00:18:12,110
the code and IA this is important for me

00:18:10,010 --> 00:18:15,500
and I can run it every day or whenever

00:18:12,110 --> 00:18:19,790
you want to write on your CI so the way

00:18:15,500 --> 00:18:22,070
it works on Yocto is that you call

00:18:19,790 --> 00:18:24,440
bitbake and then the image name and then

00:18:22,070 --> 00:18:26,360
you called C - C test image that's

00:18:24,440 --> 00:18:28,100
that's then you decide the test Suites

00:18:26,360 --> 00:18:29,360
that I just showed you before and that's

00:18:28,100 --> 00:18:32,090
how it tests

00:18:29,360 --> 00:18:34,430
that's how Linux has tested for all the

00:18:32,090 --> 00:18:40,280
different applications in this case it's

00:18:34,430 --> 00:18:43,190
gonna test the free arts as one again oh

00:18:40,280 --> 00:18:45,200
there's this is gonna be building a bit

00:18:43,190 --> 00:18:47,810
more dependencies because test image

00:18:45,200 --> 00:18:50,120
actually requires a bit more an extra

00:18:47,810 --> 00:18:52,730
dependencies and then it's gonna run the

00:18:50,120 --> 00:18:55,940
test image application and it's gonna

00:18:52,730 --> 00:18:57,230
run it for 15 seconds so it's at 11 I

00:18:55,940 --> 00:18:59,780
don't know if you can see it but it says

00:18:57,230 --> 00:19:02,300
11 seconds there and then I put some

00:18:59,780 --> 00:19:05,150
warnings there that are not necessary I

00:19:02,300 --> 00:19:06,640
just wanted it to be yellow basically it

00:19:05,150 --> 00:19:10,790
says the test passed

00:19:06,640 --> 00:19:12,820
and it was a very simple test I'm not

00:19:10,790 --> 00:19:15,080
here to tell you how to write your tests

00:19:12,820 --> 00:19:17,360
but basically I just counted the amount

00:19:15,080 --> 00:19:19,430
of periodic tasks that happen in 15

00:19:17,360 --> 00:19:21,920
seconds in that to me at least I

00:19:19,430 --> 00:19:23,660
asserted that it's still working it run

00:19:21,920 --> 00:19:25,610
the program and it's still working I'm

00:19:23,660 --> 00:19:27,170
checking the output of qmu and it's

00:19:25,610 --> 00:19:30,140
still working and then I get a result

00:19:27,170 --> 00:19:31,100
and it says a test passed and you get a

00:19:30,140 --> 00:19:32,900
summary

00:19:31,100 --> 00:19:40,100
actually the same as you would with

00:19:32,900 --> 00:19:43,760
Linux okay video number one now if I go

00:19:40,100 --> 00:19:48,260
to the next one okay so the second video

00:19:43,760 --> 00:19:54,020
is I hope everyone gets this it's a joke

00:19:48,260 --> 00:19:56,090
I the the local version of the source

00:19:54,020 --> 00:19:58,750
code just to show you that you can

00:19:56,090 --> 00:20:02,210
easily modify just the application code

00:19:58,750 --> 00:20:05,510
and everyone's familiar with knock-knock

00:20:02,210 --> 00:20:07,100
jokes right okay hopefully I can't take

00:20:05,510 --> 00:20:08,840
credit for this I just Google like

00:20:07,100 --> 00:20:13,250
programming jokes and this came up and

00:20:08,840 --> 00:20:16,070
it seemed fitting anyway so there I am

00:20:13,250 --> 00:20:17,840
just showing you that I am I modified a

00:20:16,070 --> 00:20:19,610
couple files in the actually just

00:20:17,840 --> 00:20:22,309
modified main that see and receive that

00:20:19,610 --> 00:20:23,650
see I can't show you the changes because

00:20:22,309 --> 00:20:26,299
otherwise the joke would not make sense

00:20:23,650 --> 00:20:28,190
but anyway I just modified two files and

00:20:26,299 --> 00:20:33,049
then when I'm gonna after modifying the

00:20:28,190 --> 00:20:35,570
files I am gonna run bit big again and

00:20:33,049 --> 00:20:37,370
rebuild the application which obviously

00:20:35,570 --> 00:20:38,900
doesn't have to rebuild the toolchain

00:20:37,370 --> 00:20:42,890
reason like that is just the application

00:20:38,900 --> 00:20:46,669
it's really fast so yeah it it unpacked

00:20:42,890 --> 00:20:52,090
it again and it built it right so I have

00:20:46,669 --> 00:21:00,950
my new built FreeRTOS application there

00:20:52,090 --> 00:21:04,720
and when I round km you okay it so again

00:21:00,950 --> 00:21:13,890
knock-knock and then who's there right

00:21:04,720 --> 00:21:17,220
who's there job

00:21:13,890 --> 00:21:19,020
okay don't take it personally it just

00:21:17,220 --> 00:21:21,000
seemed fitting the point is that you can

00:21:19,020 --> 00:21:27,059
modify your application it's still gonna

00:21:21,000 --> 00:21:29,460
work with the BSP right and then on my

00:21:27,059 --> 00:21:36,570
own time okay

00:21:29,460 --> 00:21:38,910
so after that so the the one build I can

00:21:36,570 --> 00:21:41,390
move again the one bill to rule them all

00:21:38,910 --> 00:21:43,679
so how can we achieve this actually

00:21:41,390 --> 00:21:45,150
because right now I just show you that I

00:21:43,679 --> 00:21:48,750
built three artists but I just filled

00:21:45,150 --> 00:21:51,299
three artists and that's it so now I'm

00:21:48,750 --> 00:21:54,540
gonna talk a little bit on how does this

00:21:51,299 --> 00:21:58,260
gets all wired in so so for a device

00:21:54,540 --> 00:21:59,760
like I'm gonna go way back so for a

00:21:58,260 --> 00:22:02,280
device like this that has multiple

00:21:59,760 --> 00:22:05,340
architectures and that has multiple OSS

00:22:02,280 --> 00:22:08,280
or applications or something how can you

00:22:05,340 --> 00:22:11,600
use one single built four and then get

00:22:08,280 --> 00:22:14,549
everything that you need for that so

00:22:11,600 --> 00:22:16,530
this is where Multi multi config builds

00:22:14,549 --> 00:22:19,679
come into place this is taken from the

00:22:16,530 --> 00:22:21,450
mega manual of the Yocto project and it

00:22:19,679 --> 00:22:24,450
says you can use single bit they command

00:22:21,450 --> 00:22:26,580
to build multiple images or packages for

00:22:24,450 --> 00:22:27,690
different targets where each image or

00:22:26,580 --> 00:22:30,059
package requires a different

00:22:27,690 --> 00:22:31,650
configuration multicon multiple

00:22:30,059 --> 00:22:33,990
configuration builds and that's just a

00:22:31,650 --> 00:22:36,000
hierarchy the filesystem hierarchy of

00:22:33,990 --> 00:22:37,440
what you need usually you have your

00:22:36,000 --> 00:22:40,020
build directory you have your comm

00:22:37,440 --> 00:22:42,450
folder and a local comp if you want to

00:22:40,020 --> 00:22:45,540
use multi come fix you just add a multi

00:22:42,450 --> 00:22:47,669
config directory and add whatever

00:22:45,540 --> 00:22:49,410
multi-company multi conflicts you want

00:22:47,669 --> 00:22:54,980
in the in the case of the manual is

00:22:49,410 --> 00:22:57,030
using an x86 come and unarmed comes and

00:22:54,980 --> 00:23:00,020
where it gets a little more complicated

00:22:57,030 --> 00:23:01,980
is a multi config dependencies part so

00:23:00,020 --> 00:23:03,630
I'm not gonna read that because there's

00:23:01,980 --> 00:23:09,179
a lot of text in there but the point is

00:23:03,630 --> 00:23:10,590
that let's say if you want to build for

00:23:09,179 --> 00:23:12,929
some reason let's say you want to build

00:23:10,590 --> 00:23:16,260
your Linux and your Linux depends for

00:23:12,929 --> 00:23:18,450
some reason on your free artists this is

00:23:16,260 --> 00:23:20,220
the way to achieve it right and the

00:23:18,450 --> 00:23:22,080
synthetic leaks a little convoluted but

00:23:20,220 --> 00:23:24,840
once you get used to it it's not that

00:23:22,080 --> 00:23:27,510
bad the idea is here for example on the

00:23:24,840 --> 00:23:30,150
last line it says do image

00:23:27,510 --> 00:23:33,360
the bar flag is MC depends MC which

00:23:30,150 --> 00:23:36,060
stands for multi config and then x86 arm

00:23:33,360 --> 00:23:37,890
core image minimal do root of s so I'm

00:23:36,060 --> 00:23:41,340
gonna translate you that what that means

00:23:37,890 --> 00:23:45,390
that means that the task to Rufus for

00:23:41,340 --> 00:23:49,770
from the core image minimal recipe from

00:23:45,390 --> 00:23:54,240
the arm config is depending on the task

00:23:49,770 --> 00:23:57,900
do image from the x86 comfy so I'm

00:23:54,240 --> 00:24:02,070
building an x86 in an arm different come

00:23:57,900 --> 00:24:04,470
fix and that if I do bitbake core image

00:24:02,070 --> 00:24:06,540
minimal for the x86 the arm one is going

00:24:04,470 --> 00:24:10,500
to be built as well that's use the

00:24:06,540 --> 00:24:12,540
example that's on the documentation so

00:24:10,500 --> 00:24:18,150
how can we build Linux in three artists

00:24:12,540 --> 00:24:20,850
and don't get me I don't want to confuse

00:24:18,150 --> 00:24:21,870
people this multi config builds is that

00:24:20,850 --> 00:24:23,910
they don't have to be for different

00:24:21,870 --> 00:24:25,890
operating systems they can be for

00:24:23,910 --> 00:24:27,270
anything literally just to come you

00:24:25,890 --> 00:24:28,830
could be building the same architecture

00:24:27,270 --> 00:24:31,440
you could be building let's say you want

00:24:28,830 --> 00:24:33,720
to build for the same architecture you

00:24:31,440 --> 00:24:35,940
want to build two different distros or

00:24:33,720 --> 00:24:37,860
the same district one Destry wanted to

00:24:35,940 --> 00:24:40,230
use CSV in it and the other one wants to

00:24:37,860 --> 00:24:40,940
use a system V write that that's what

00:24:40,230 --> 00:24:43,380
they're for

00:24:40,940 --> 00:24:45,930
in this case I'm just taking advantage

00:24:43,380 --> 00:24:48,570
of that to use to be able to build two

00:24:45,930 --> 00:24:51,350
different operating systems at the same

00:24:48,570 --> 00:24:51,350
time and

00:24:57,170 --> 00:25:01,550
so again I just see the into pokey

00:24:59,450 --> 00:25:04,790
whatever when I clone it eyesores my

00:25:01,550 --> 00:25:06,950
environment and I have a specific multi

00:25:04,790 --> 00:25:10,160
config environment there that I have and

00:25:06,950 --> 00:25:13,820
then if I I'm gonna look at what my

00:25:10,160 --> 00:25:16,970
local comm looks like and the important

00:25:13,820 --> 00:25:20,780
part here is this BB multi config

00:25:16,970 --> 00:25:23,240
variable which declares it tells bitbake

00:25:20,780 --> 00:25:26,420
what am I gonna parse in this case I

00:25:23,240 --> 00:25:29,180
named my multi config file arm -

00:25:26,420 --> 00:25:30,620
FreeRTOS and then I created what I just

00:25:29,180 --> 00:25:34,900
explained to you before on the

00:25:30,620 --> 00:25:39,110
dependencies I said the do image tasks

00:25:34,900 --> 00:25:42,290
from the free artist demo recipe will

00:25:39,110 --> 00:25:46,130
the from the arm free artists config

00:25:42,290 --> 00:25:48,620
will depend on the do image tasks from

00:25:46,130 --> 00:25:50,690
the default config please look at this

00:25:48,620 --> 00:25:51,890
there's nothing here there's it's an

00:25:50,690 --> 00:25:53,810
empty string that means this is a

00:25:51,890 --> 00:25:59,690
default config that the one coming from

00:25:53,810 --> 00:26:01,580
local Kampf so if I do a less

00:25:59,690 --> 00:26:04,160
comfortable to conflict I'll have a file

00:26:01,580 --> 00:26:06,380
like I said that's named the same as

00:26:04,160 --> 00:26:10,450
what I declare in this variable arm free

00:26:06,380 --> 00:26:16,220
artists and then if I look at that file

00:26:10,450 --> 00:26:17,270
what it contains it says it has the

00:26:16,220 --> 00:26:19,280
machine that I'm going to be building

00:26:17,270 --> 00:26:20,600
that for the distro that I'm going to be

00:26:19,280 --> 00:26:22,360
using and the temp directory that's

00:26:20,600 --> 00:26:25,220
gonna be used for that

00:26:22,360 --> 00:26:28,670
so isn't there's there's three lines on

00:26:25,220 --> 00:26:31,750
that conflict that's it and now there's

00:26:28,670 --> 00:26:34,460
the I'm explaining there that there's

00:26:31,750 --> 00:26:36,290
I'm using I'm gonna build the default

00:26:34,460 --> 00:26:40,340
config the one for local Kampf

00:26:36,290 --> 00:26:42,290
so I say bid Beck MC and then Colin and

00:26:40,340 --> 00:26:44,030
then look nothing would meet the default

00:26:42,290 --> 00:26:49,580
one and then after that I'm gonna say

00:26:44,030 --> 00:26:52,520
core image minimal so what's gonna

00:26:49,580 --> 00:26:54,530
happen there technically it's I'm asking

00:26:52,520 --> 00:26:57,220
just to build core image minimal for

00:26:54,530 --> 00:27:00,860
local Kampf but since I have this

00:26:57,220 --> 00:27:03,730
dependency there it should build both of

00:27:00,860 --> 00:27:03,730
them at the same time

00:27:07,000 --> 00:27:13,810
I passed it so here is the interesting

00:27:10,150 --> 00:27:16,480
thing here's where the the convicts are

00:27:13,810 --> 00:27:19,170
shown of what you're building on one

00:27:16,480 --> 00:27:22,660
side on the local law come on I'm

00:27:19,170 --> 00:27:25,450
building qmu x86 64 I'm building the

00:27:22,660 --> 00:27:27,660
distro pokey and a master and that's it

00:27:25,450 --> 00:27:31,890
right and on the second one I'm building

00:27:27,660 --> 00:27:35,080
the camera the Kimura and b5 in the arm

00:27:31,890 --> 00:27:38,680
config for the three artists one so

00:27:35,080 --> 00:27:41,050
those two convicts I'm building and it's

00:27:38,680 --> 00:27:46,780
gonna be really hard to pause at the

00:27:41,050 --> 00:27:49,470
right time here but okay so that that's

00:27:46,780 --> 00:27:52,060
that does it that's enough for me so

00:27:49,470 --> 00:27:54,760
here is the wrong cue of the tasks that

00:27:52,060 --> 00:27:57,760
are running usually and as you can see

00:27:54,760 --> 00:27:59,980
here I never put anything about arm when

00:27:57,760 --> 00:28:02,650
I type bitbake I just had Cornish

00:27:59,980 --> 00:28:05,380
minimal for the default one and in the

00:28:02,650 --> 00:28:06,970
wrong queue here I have two tasks one is

00:28:05,380 --> 00:28:08,500
running for the local account which is

00:28:06,970 --> 00:28:11,410
quarry much minimal and the second one

00:28:08,500 --> 00:28:13,600
it says MC arm free Arthas free Otto's

00:28:11,410 --> 00:28:15,790
demo so it automatically started

00:28:13,600 --> 00:28:23,290
building the other config because of

00:28:15,790 --> 00:28:26,250
that dependency and once it runs yeah it

00:28:23,290 --> 00:28:28,960
keeps running both both come fix

00:28:26,250 --> 00:28:37,270
obviously I did this on share state so

00:28:28,960 --> 00:28:44,260
it's really fast it creates a Linux

00:28:37,270 --> 00:28:46,570
image and there you go so now I'm gonna

00:28:44,260 --> 00:28:48,790
look at the deployed directories and if

00:28:46,570 --> 00:28:52,800
I'd look in the top deploy there I can

00:28:48,790 --> 00:28:55,570
see I just built an image for qmu x86 64

00:28:52,800 --> 00:28:57,670
normal Corey Mitchell minimal no changes

00:28:55,570 --> 00:28:59,920
and then if I look at the deploy

00:28:57,670 --> 00:29:05,230
directory that I define for free artists

00:28:59,920 --> 00:29:09,600
I can see that I also built a newly free

00:29:05,230 --> 00:29:11,860
artists binary at the same time now

00:29:09,600 --> 00:29:13,780
here's things would get a little bit

00:29:11,860 --> 00:29:15,730
confusing because I just built two

00:29:13,780 --> 00:29:17,770
different complex and what if I type run

00:29:15,730 --> 00:29:20,500
give me what's gonna happen well I think

00:29:17,770 --> 00:29:22,720
it's a little obvious it's going to

00:29:20,500 --> 00:29:24,760
take the one from local Kampf so if I

00:29:22,720 --> 00:29:27,910
just type wrong Kim you he's gonna run

00:29:24,760 --> 00:29:30,040
Linux and the the koifish minimal that I

00:29:27,910 --> 00:29:36,970
just built any work just fine

00:29:30,040 --> 00:29:40,000
I think I let it boot there you can do

00:29:36,970 --> 00:29:42,850
it there you go so it I'm gonna get a

00:29:40,000 --> 00:29:46,120
login prompt there I built that and then

00:29:42,850 --> 00:29:47,920
I exited on key mu but also the the Q me

00:29:46,120 --> 00:29:50,050
wiring that I keep saying and saying and

00:29:47,920 --> 00:29:52,780
saying is that you can pass that as an

00:29:50,050 --> 00:29:56,500
argument to run ki mu and if I pass that

00:29:52,780 --> 00:29:58,000
as an argument to run key mu that the QA

00:29:56,500 --> 00:30:03,820
would come from the free arts was one

00:29:58,000 --> 00:30:06,160
it's able to run that as well you see

00:30:03,820 --> 00:30:14,890
now like I just run drunk mu for

00:30:06,160 --> 00:30:16,300
different OSS in like three seconds okay

00:30:14,890 --> 00:30:21,580
I think that proves my point

00:30:16,300 --> 00:30:24,010
now what time is it okay so future work

00:30:21,580 --> 00:30:27,610
there's there's some multi config

00:30:24,010 --> 00:30:29,950
optimizations that I have to do some of

00:30:27,610 --> 00:30:31,960
them are sharing estate cash between

00:30:29,950 --> 00:30:34,480
multi come fix which is gonna be a lot

00:30:31,960 --> 00:30:37,660
easier now with the changes that happen

00:30:34,480 --> 00:30:39,070
in Sears which was just released a

00:30:37,660 --> 00:30:41,950
couple of weeks ago over the last week

00:30:39,070 --> 00:30:45,370
and then there's parsing optimizations

00:30:41,950 --> 00:30:47,560
as well there could be more ports or

00:30:45,370 --> 00:30:48,970
more architecture supported or BSP

00:30:47,560 --> 00:30:51,070
whatever you want to call it on the

00:30:48,970 --> 00:30:52,690
layer on the metaphorical layer and I'm

00:30:51,070 --> 00:30:54,760
sure there's some fine-tuning on the

00:30:52,690 --> 00:30:56,230
layer that has to happen but I just

00:30:54,760 --> 00:30:57,670
haven't gotten to that point because how

00:30:56,230 --> 00:30:59,500
you don't have more ports one you get

00:30:57,670 --> 00:31:02,080
some more ports you test it and you

00:30:59,500 --> 00:31:04,450
realize oh I'm missing this this part or

00:31:02,080 --> 00:31:07,090
this other part and I also have to

00:31:04,450 --> 00:31:09,580
upstream some of the test infrastructure

00:31:07,090 --> 00:31:12,540
for free actors so it so it knows how to

00:31:09,580 --> 00:31:14,620
test it on on open embedded core and

00:31:12,540 --> 00:31:16,840
yeah I mean to take away from this

00:31:14,620 --> 00:31:19,660
presentation is that the Yocto project

00:31:16,840 --> 00:31:21,790
and big big specifically provides

00:31:19,660 --> 00:31:25,060
scalability I think a lot of people

00:31:21,790 --> 00:31:29,380
complain on how it's complicated to to

00:31:25,060 --> 00:31:31,570
use at the beginning but I think it's it

00:31:29,380 --> 00:31:33,190
might be a con but the pro is that it

00:31:31,570 --> 00:31:34,020
provides scalability allows you to do

00:31:33,190 --> 00:31:36,960
some kind of things like

00:31:34,020 --> 00:31:37,530
this free arts is was used used as a

00:31:36,960 --> 00:31:39,570
test-case

00:31:37,530 --> 00:31:41,700
it's just what I found it could be

00:31:39,570 --> 00:31:43,410
anything you can run a bare-metal

00:31:41,700 --> 00:31:46,710
application you could run and set for

00:31:43,410 --> 00:31:48,780
whatever you want it doesn't matter so

00:31:46,710 --> 00:31:50,550
we could technically support more OSS or

00:31:48,780 --> 00:31:51,810
application or open embedded it that's a

00:31:50,550 --> 00:31:52,020
question that I'm not gonna answer right

00:31:51,810 --> 00:31:54,660
now

00:31:52,020 --> 00:31:57,330
and the idea here is that unified

00:31:54,660 --> 00:31:58,590
workflows across teams within a company

00:31:57,330 --> 00:32:01,110
and everyone if everyone's using the

00:31:58,590 --> 00:32:03,480
same thing you can for example produce

00:32:01,110 --> 00:32:05,220
this can produce an SDK and you have

00:32:03,480 --> 00:32:07,350
control over the tool chain that

00:32:05,220 --> 00:32:09,900
everyone is using and that gives you

00:32:07,350 --> 00:32:11,910
reproducibility right so whenever you

00:32:09,900 --> 00:32:14,100
someone hopefully not a customer but

00:32:11,910 --> 00:32:16,080
someone finds a bug and it comes to you

00:32:14,100 --> 00:32:17,940
you know exactly what they're using

00:32:16,080 --> 00:32:19,140
because otherwise they might be using

00:32:17,940 --> 00:32:21,090
some different tool chain or some

00:32:19,140 --> 00:32:27,510
different flag and it becomes really

00:32:21,090 --> 00:32:34,820
like way more complicated so this is my

00:32:27,510 --> 00:32:34,820
last slide and I'm gonna run it I

00:32:39,110 --> 00:32:45,890
mistyped anks but thank you guys

00:32:41,910 --> 00:32:48,500
I just run the free arts application and

00:32:45,890 --> 00:32:51,480
yeah thank you thank you for attending

00:32:48,500 --> 00:32:55,490
does anyone have any questions we have

00:32:51,480 --> 00:32:55,490
like three minutes yes

00:33:08,840 --> 00:33:15,450
you could yeah actually you could

00:33:13,110 --> 00:33:17,490
it depends obviously in the device but

00:33:15,450 --> 00:33:20,160
technically the the the binary the

00:33:17,490 --> 00:33:22,020
ferreters image that gets built actually

00:33:20,160 --> 00:33:23,220
gets an RPM so you can technically

00:33:22,020 --> 00:33:26,270
install it on the roof oil system with

00:33:23,220 --> 00:33:29,070
Linux and then you can flash the other

00:33:26,270 --> 00:33:32,120
memory or whatever in in your own way

00:33:29,070 --> 00:33:32,120
so it's possible

00:33:37,700 --> 00:33:44,000
I have not had time to try any other

00:33:41,000 --> 00:33:46,430
ports yet but it should be the idea here

00:33:44,000 --> 00:33:50,360
is to abstract that right and to have to

00:33:46,430 --> 00:33:52,190
make it easy to get ports there m0

00:33:50,360 --> 00:33:55,220
raised 5 it should not be that

00:33:52,190 --> 00:33:56,720
complicated to do so the wiring what I

00:33:55,220 --> 00:33:59,300
wanted to provide was the wiring there

00:33:56,720 --> 00:34:01,760
and adding more ports to it should not

00:33:59,300 --> 00:34:05,230
be at least not as complicated as it

00:34:01,760 --> 00:34:05,230
would be in on other occasions

00:34:09,730 --> 00:34:15,220
well that each multi config uses its own

00:34:12,800 --> 00:34:19,310
cross compiler

00:34:15,220 --> 00:34:21,970
cross compiler so it doesn't interfere

00:34:19,310 --> 00:34:21,970
with one another

00:34:30,809 --> 00:34:33,809
yes

00:34:35,080 --> 00:34:37,980
yeah

00:34:43,230 --> 00:34:48,359
I think it like that the fact that he's

00:34:45,569 --> 00:34:50,250
the the TC leaf Seenu live is there the

00:34:48,359 --> 00:34:51,299
wiring it would make it work now I'm

00:34:50,250 --> 00:34:54,809
actually going to take a look at

00:34:51,299 --> 00:34:57,480
metaphor and and but it should not be

00:34:54,809 --> 00:35:00,029
complicated Yocto is able to provide you

00:34:57,480 --> 00:35:03,000
a tool chain with and it's just to

00:35:00,029 --> 00:35:04,710
change this it's not well it's not easy

00:35:03,000 --> 00:35:09,930
but it's still not rocket science

00:35:04,710 --> 00:35:12,150
so yeah does anyone yeah okay now yeah I

00:35:09,930 --> 00:35:13,589
will I will share the slides I just I

00:35:12,150 --> 00:35:14,640
was just having problems with the video

00:35:13,589 --> 00:35:16,410
because I could they wouldn't let me

00:35:14,640 --> 00:35:18,980
upload it but yeah they're I'm gonna

00:35:16,410 --> 00:35:18,980
upload them

00:35:33,520 --> 00:35:41,000
sure not immediate plans but it's kind

00:35:37,640 --> 00:35:42,530
of the it would be a nice road to take

00:35:41,000 --> 00:35:44,390
like it would be it would simplify

00:35:42,530 --> 00:35:46,460
things right

00:35:44,390 --> 00:35:54,830
we just need to port it to the different

00:35:46,460 --> 00:35:57,080
architectures are five in this case well

00:35:54,830 --> 00:35:58,730
that yeah and in that case that there

00:35:57,080 --> 00:35:59,180
would not be necessary because the tool

00:35:58,730 --> 00:36:00,410
chain

00:35:59,180 --> 00:36:06,680
you would get the tool chain from here

00:36:00,410 --> 00:36:08,270
and it could it could yes I think we're

00:36:06,680 --> 00:36:10,220
out of time

00:36:08,270 --> 00:36:12,610
so thank you guys for coming I hope you

00:36:10,220 --> 00:36:12,610
enjoyed it

00:36:13,570 --> 00:36:16,849

YouTube URL: https://www.youtube.com/watch?v=mFgiIXv7b5U


