Title: We Need to Talk About Systemd: Boot Time Optimization for the New init daemon - Chris Simmonds, 2net
Publication date: 2019-11-04
Playlist: Open Source Summit & Embedded Linux Conference EU 2019 - Lyon
Description: 
	We Need to Talk About Systemd: Boot Time Optimization for the New init daemon - Chris Simmonds, 2net

Systemd has many advantages over the traditional System V init daemon. One advantage is its ability to run init tasks in parallel, which should reduce the boot time. Yet in practice the boot time seems to go up, not down. Why so? What did I do wrong?

The fact is that like all tools you have to know how to use it to make it effective. With the default configuration, systemd is indeed quite slow. In this presentation I will delve into systemd units and their dependencies and show you how to eliminate tasks that you donâ€™t need and reorder the remaining tasks to get a working system in the minimum time. Ultimately, we will find that systemd just needs to be loved
Captions: 
	00:00:01,010 --> 00:00:07,859
hello good morning so it's time to make

00:00:06,089 --> 00:00:09,150
a start on this what a lovely audience

00:00:07,859 --> 00:00:13,550
if we don't mind I'm just going take a

00:00:09,150 --> 00:00:13,550
quick selfie of you guys and ladies

00:00:17,000 --> 00:00:29,910
because normally nobody turns up for my

00:00:19,289 --> 00:00:35,640
talks well some people do okay so we

00:00:29,910 --> 00:00:37,559
need to talk about system D get through

00:00:35,640 --> 00:00:41,910
this stuff this is me I've done some

00:00:37,559 --> 00:00:44,489
stuff skip that so yeah some of you may

00:00:41,910 --> 00:00:47,250
remember a couple years ago I did a talk

00:00:44,489 --> 00:00:48,960
on boot time reduction boot time

00:00:47,250 --> 00:00:53,070
optimization which you can find at that

00:00:48,960 --> 00:00:56,510
URL there and it was mostly focused on

00:00:53,070 --> 00:00:59,460
the boot loader and the kernel parts

00:00:56,510 --> 00:01:02,520
when it came to the user space part I

00:00:59,460 --> 00:01:04,769
kind of bailed out and I just put in an

00:01:02,520 --> 00:01:07,040
init equals whatever program I was

00:01:04,769 --> 00:01:11,939
running so when the boot up it just runs

00:01:07,040 --> 00:01:14,670
in this case QT demo whatever which

00:01:11,939 --> 00:01:17,040
started really really fast gotta say

00:01:14,670 --> 00:01:18,689
that was a good solution but it doesn't

00:01:17,040 --> 00:01:22,590
always work out because there may be

00:01:18,689 --> 00:01:24,420
some other dependencies so in this talk

00:01:22,590 --> 00:01:28,850
I really want to look at the things I

00:01:24,420 --> 00:01:28,850
was missing out in doing it that way

00:01:29,659 --> 00:01:36,320
so this talk then is going to be well

00:01:33,150 --> 00:01:39,240
initially it's going to be about a

00:01:36,320 --> 00:01:41,310
really hard focus on boot time

00:01:39,240 --> 00:01:43,860
optimization but then I kind of

00:01:41,310 --> 00:01:45,149
discovered that as I delved into this I

00:01:43,860 --> 00:01:48,600
was having to describe more and more

00:01:45,149 --> 00:01:52,470
stuff so it's kind of more slightly into

00:01:48,600 --> 00:01:56,040
a introduction to system D and then some

00:01:52,470 --> 00:01:57,840
boot time optimization following that so

00:01:56,040 --> 00:02:02,250
I'm gonna be covering what is system D

00:01:57,840 --> 00:02:06,240
what does it do a bit of an introduction

00:02:02,250 --> 00:02:08,899
just as to how system D works then we

00:02:06,240 --> 00:02:11,069
talked about optimizing boot time and

00:02:08,899 --> 00:02:12,480
then there are a couple of topics I'm

00:02:11,069 --> 00:02:14,810
going to cover at the end before we're

00:02:12,480 --> 00:02:14,810
all fit

00:02:14,990 --> 00:02:20,900
I got to say that this is not if anybody

00:02:17,959 --> 00:02:22,550
here is expecting the real deep dive

00:02:20,900 --> 00:02:26,900
into system D this is actually not that

00:02:22,550 --> 00:02:29,270
talk this is the embedded programmers

00:02:26,900 --> 00:02:34,940
view of system D and how the hell do we

00:02:29,270 --> 00:02:37,910
make this thing work so first of all in

00:02:34,940 --> 00:02:38,840
it demons what do we need demons do

00:02:37,910 --> 00:02:40,370
you've got to have an init daemon

00:02:38,840 --> 00:02:44,150
otherwise nothing is ever going to

00:02:40,370 --> 00:02:45,890
happen so the inner demon is the program

00:02:44,150 --> 00:02:47,540
that's launched immediately after the

00:02:45,890 --> 00:02:50,000
kernel has booted so once the current

00:02:47,540 --> 00:02:51,860
got up to it's done it's initializing of

00:02:50,000 --> 00:02:54,680
it's all internal structures and device

00:02:51,860 --> 00:02:57,140
drivers or whatever it execs the very

00:02:54,680 --> 00:03:02,209
first program which therefore has

00:02:57,140 --> 00:03:05,810
process identify PID one and then in it

00:03:02,209 --> 00:03:09,890
starts running and it starts a whole

00:03:05,810 --> 00:03:11,989
bunch of other demons it configures a

00:03:09,890 --> 00:03:19,600
bunch of stuff through various obscure

00:03:11,989 --> 00:03:21,709
means and so that's in the wrong place

00:03:19,600 --> 00:03:23,570
and then once it's done the the

00:03:21,709 --> 00:03:24,980
initialization it will then sit in the

00:03:23,570 --> 00:03:28,430
background just waiting for things to

00:03:24,980 --> 00:03:31,940
happen so kind of it has a part of

00:03:28,430 --> 00:03:36,290
things at this stage is it is the parent

00:03:31,940 --> 00:03:38,690
of last resort so when a process dies

00:03:36,290 --> 00:03:42,530
which has children then those children

00:03:38,690 --> 00:03:44,750
get reparent it to in it for example it

00:03:42,530 --> 00:03:46,880
also is monitoring some of those demons

00:03:44,750 --> 00:03:49,459
and restarting them as necessary and

00:03:46,880 --> 00:03:52,930
it's also killing off zombies and all

00:03:49,459 --> 00:03:52,930
that all kinds of other exciting stuff

00:03:53,920 --> 00:04:01,040
so there are several init demons we may

00:03:57,500 --> 00:04:06,890
consider so here I'm looking at three

00:04:01,040 --> 00:04:09,079
busy box system five and system D so

00:04:06,890 --> 00:04:12,380
system sorry busy box in net is the

00:04:09,079 --> 00:04:14,930
simplest of the lot it's part of busy

00:04:12,380 --> 00:04:17,239
box so there's no real overhead to it is

00:04:14,930 --> 00:04:19,700
just a couple of shell scripts and it

00:04:17,239 --> 00:04:21,830
kind of works so for simple embedded

00:04:19,700 --> 00:04:26,630
systems that is by far the best thing to

00:04:21,830 --> 00:04:29,870
use system v in it on the other hand

00:04:26,630 --> 00:04:32,420
is a bit more flexible than busybox in

00:04:29,870 --> 00:04:33,530
it it has this concept called run levels

00:04:32,420 --> 00:04:35,180
and you can switch from one we'll have

00:04:33,530 --> 00:04:37,250
run level to another which allows you to

00:04:35,180 --> 00:04:39,610
start and stop a bunch of demons when

00:04:37,250 --> 00:04:43,280
you make that switch

00:04:39,610 --> 00:04:44,810
Berndt system five in it is kind of slow

00:04:43,280 --> 00:04:46,910
because it's a bunch of shell scripts

00:04:44,810 --> 00:04:49,880
each one of those shell scripts takes

00:04:46,910 --> 00:04:53,980
time to launch and so on plus it is 30

00:04:49,880 --> 00:04:56,900
odd years old so then we have system D

00:04:53,980 --> 00:04:59,810
which is the modern way of doing things

00:04:56,900 --> 00:05:07,760
and that's what we're gonna talk about

00:04:59,810 --> 00:05:13,970
basically so system D it is not just an

00:05:07,760 --> 00:05:14,750
init daemon it is a way of life well

00:05:13,970 --> 00:05:18,650
kind of

00:05:14,750 --> 00:05:22,880
so systemd is aims to be a

00:05:18,650 --> 00:05:24,140
general-purpose system manager and it

00:05:22,880 --> 00:05:26,510
does a whole bunch of things I've listed

00:05:24,140 --> 00:05:28,130
I if I were to list everything every

00:05:26,510 --> 00:05:30,500
component of system D it wouldn't fit on

00:05:28,130 --> 00:05:33,770
the slide so I've edited things down a

00:05:30,500 --> 00:05:36,820
little bit but the things that are

00:05:33,770 --> 00:05:40,160
important to us are the system D itself

00:05:36,820 --> 00:05:42,080
there's a journal journal v which is

00:05:40,160 --> 00:05:44,950
doing the event logging kind of

00:05:42,080 --> 00:05:47,000
replacement for the older syslog stuff

00:05:44,950 --> 00:05:49,850
there's the logger demon which is

00:05:47,000 --> 00:05:55,160
handling logins on terminals and such

00:05:49,850 --> 00:05:59,180
like the u event daemon you you dev has

00:05:55,160 --> 00:06:02,180
been around for a long time but it's now

00:05:59,180 --> 00:06:04,100
integrated as part of system D a new

00:06:02,180 --> 00:06:06,710
daily you dev is basically managing the

00:06:04,100 --> 00:06:11,060
dev directory and also handing hot-plug

00:06:06,710 --> 00:06:12,860
and other kernel events network daemon

00:06:11,060 --> 00:06:16,550
does what it says it configures network

00:06:12,860 --> 00:06:19,700
interfaces time sync daemon handy for

00:06:16,550 --> 00:06:22,070
synchronizing your clock and resolve

00:06:19,700 --> 00:06:25,760
daemon is basically a wrapper around a

00:06:22,070 --> 00:06:26,990
DNS resolve so there's the kind of

00:06:25,760 --> 00:06:28,670
things that we want they're the kind of

00:06:26,990 --> 00:06:31,150
services want in our in our embedded

00:06:28,670 --> 00:06:31,150
systems

00:06:31,450 --> 00:06:37,060
so why systemd why go to all this

00:06:35,000 --> 00:06:37,060
trouble

00:06:37,280 --> 00:06:44,030
so systemd is kind of reinvented from

00:06:40,250 --> 00:06:46,520
the ground upwards started in 2010 I

00:06:44,030 --> 00:06:50,210
think by Leonard pottery pottery and Kay

00:06:46,520 --> 00:06:51,439
severs a Red Hat and they basically

00:06:50,210 --> 00:06:54,310
started with a clean sheet of paper and

00:06:51,439 --> 00:06:59,990
said how should we design a system

00:06:54,310 --> 00:07:03,099
startup daemon so it is it we have now

00:06:59,990 --> 00:07:08,539
explicit dependencies between services

00:07:03,099 --> 00:07:11,240
whereas work in the old system five init

00:07:08,539 --> 00:07:14,000
days the only ordering was was by the

00:07:11,240 --> 00:07:21,440
number of the script you put into the

00:07:14,000 --> 00:07:23,389
our seed or whatever directory it given

00:07:21,440 --> 00:07:25,310
that dependency information it can build

00:07:23,389 --> 00:07:27,770
up a dependency tree at boot time and

00:07:25,310 --> 00:07:30,050
then by walking through the tree we can

00:07:27,770 --> 00:07:33,259
then do parallel starts as we walk back

00:07:30,050 --> 00:07:34,729
up the tree at each branch node we start

00:07:33,259 --> 00:07:37,759
everything at that level and then we're

00:07:34,729 --> 00:07:39,139
back up to the root so theoretically at

00:07:37,759 --> 00:07:41,800
least it should be faster because we're

00:07:39,139 --> 00:07:45,889
doing things in parallel

00:07:41,800 --> 00:07:48,590
no more shell scripts so system deed

00:07:45,889 --> 00:07:52,069
doesn't depend on shell scripts so

00:07:48,590 --> 00:07:54,529
that's a that's a definite plus plus

00:07:52,069 --> 00:07:57,529
there are some handy things which are

00:07:54,529 --> 00:07:59,900
good for embedded so we'll look at this

00:07:57,529 --> 00:08:02,449
briefly at the end of the presentation

00:07:59,900 --> 00:08:05,479
but we have per daemon resource control

00:08:02,449 --> 00:08:06,800
so we can set CPU and memory limits on

00:08:05,479 --> 00:08:10,039
each program if we wish

00:08:06,800 --> 00:08:13,849
and it has built-in support for

00:08:10,039 --> 00:08:15,289
watchdogs so we can set a watchdog so

00:08:13,849 --> 00:08:16,729
that if a demon stops responding for

00:08:15,289 --> 00:08:21,469
some reason it stops with Bonnie - the

00:08:16,729 --> 00:08:23,060
watchdog it will get restarted so all

00:08:21,469 --> 00:08:28,500
the kind of things that we need in our

00:08:23,060 --> 00:08:32,289
systems so

00:08:28,500 --> 00:08:34,210
the aim then is to for at this point is

00:08:32,289 --> 00:08:35,830
for me to describe the the base some of

00:08:34,210 --> 00:08:40,210
the basic concepts of track the height

00:08:35,830 --> 00:08:42,219
system D and I'm attacking it from the

00:08:40,210 --> 00:08:44,290
point of view of units services and

00:08:42,219 --> 00:08:45,940
targets I believe you understand these

00:08:44,290 --> 00:08:52,300
three things you basically understand

00:08:45,940 --> 00:08:54,660
system D so a unit is a thing everything

00:08:52,300 --> 00:08:58,000
is a unit it's a text file

00:08:54,660 --> 00:08:59,980
a service is a particular sort of unit

00:08:58,000 --> 00:09:02,709
which describes a service in other words

00:08:59,980 --> 00:09:05,830
a program that you run and then a target

00:09:02,709 --> 00:09:08,320
is a group of services so as we go down

00:09:05,830 --> 00:09:12,490
that list we go from the particular to

00:09:08,320 --> 00:09:18,279
the general so that's a quick look at

00:09:12,490 --> 00:09:20,230
these things so system D units they're

00:09:18,279 --> 00:09:23,380
just text files and they live in one of

00:09:20,230 --> 00:09:25,149
these three directories the nice thing

00:09:23,380 --> 00:09:27,820
is that when system D goes looking for a

00:09:25,149 --> 00:09:30,130
unit or any other configuration files it

00:09:27,820 --> 00:09:32,920
scans these directories in this order so

00:09:30,130 --> 00:09:34,959
it looks in the et Cie system D system

00:09:32,920 --> 00:09:36,670
direct you first then it looks in the

00:09:34,959 --> 00:09:40,959
Run directory and then it looks in the

00:09:36,670 --> 00:09:43,900
Lib directory the idea then is that the

00:09:40,959 --> 00:09:46,240
stuff you put into system SR into et Cie

00:09:43,900 --> 00:09:48,100
system D system this is the local

00:09:46,240 --> 00:09:50,770
configuration anything you want to

00:09:48,100 --> 00:09:52,300
change you do in that directory whereas

00:09:50,770 --> 00:09:55,510
the stuff that's in the Lib directory

00:09:52,300 --> 00:09:58,089
lip system D system that is the system

00:09:55,510 --> 00:10:00,640
default stuff if you do nothing in the

00:09:58,089 --> 00:10:03,580
EGC directory then what is in the Lib

00:10:00,640 --> 00:10:05,350
directory wins so it means it's very

00:10:03,580 --> 00:10:08,170
easy to customize stuff you just put

00:10:05,350 --> 00:10:10,720
newly new units into e.t.c system D

00:10:08,170 --> 00:10:12,520
system and they will override whatever

00:10:10,720 --> 00:10:17,050
the system defaults are in the Lib

00:10:12,520 --> 00:10:18,730
directory so for example as it says at

00:10:17,050 --> 00:10:21,750
the bottom if you want to disable a unit

00:10:18,730 --> 00:10:23,950
the quick and dirty way to do it is

00:10:21,750 --> 00:10:26,740
either create an empty file with the

00:10:23,950 --> 00:10:29,470
same name in the EDC system D system

00:10:26,740 --> 00:10:31,420
directory or if you wanna be a bit fancy

00:10:29,470 --> 00:10:35,040
about it you can create a file that's a

00:10:31,420 --> 00:10:35,040
link to dev nul

00:10:36,470 --> 00:10:44,190
so units a Eunice is well that all the

00:10:43,110 --> 00:10:46,410
things we're going to talk about are

00:10:44,190 --> 00:10:49,950
going to be units every unit begins with

00:10:46,410 --> 00:10:52,260
a section marked unit and in my example

00:10:49,950 --> 00:10:55,890
here we have a description which is just

00:10:52,260 --> 00:10:57,930
some human readable code a message

00:10:55,890 --> 00:11:00,230
rather we have documentation which

00:10:57,930 --> 00:11:02,610
references a man page in this case and

00:11:00,230 --> 00:11:05,210
then we have a dependency which we'll

00:11:02,610 --> 00:11:05,210
come to in a moment

00:11:07,520 --> 00:11:12,870
so the dependencies the dependencies

00:11:11,010 --> 00:11:14,370
that are the crucial bit because by

00:11:12,870 --> 00:11:17,190
reading the dependencies of all the

00:11:14,370 --> 00:11:19,350
units system D can build the dependency

00:11:17,190 --> 00:11:24,030
graph and then it can do its parallel

00:11:19,350 --> 00:11:27,960
execution thing so in the previous

00:11:24,030 --> 00:11:30,060
example we have a requires so requires

00:11:27,960 --> 00:11:32,880
is the most common sort of dependency it

00:11:30,060 --> 00:11:36,630
says this unit requires some other units

00:11:32,880 --> 00:11:39,020
all units can be multiple so that means

00:11:36,630 --> 00:11:41,790
that those units when I start this unit

00:11:39,020 --> 00:11:46,440
it should start out the other units as

00:11:41,790 --> 00:11:51,750
well you can also have once which is

00:11:46,440 --> 00:11:53,940
kind of like requires but less there's a

00:11:51,750 --> 00:12:00,120
weaker form requires in other words if

00:11:53,940 --> 00:12:02,340
the if the units if if I have a once

00:12:00,120 --> 00:12:05,630
instead of requires it's not fatal if

00:12:02,340 --> 00:12:08,790
the the wanted unit doesn't start and

00:12:05,630 --> 00:12:10,770
then conflicts is the opposite of

00:12:08,790 --> 00:12:12,690
requires if I have a unit that conflicts

00:12:10,770 --> 00:12:14,970
or another unit it means the two cannot

00:12:12,690 --> 00:12:17,040
coexist at the same time if I start this

00:12:14,970 --> 00:12:18,240
unit it will stop the other unit if the

00:12:17,040 --> 00:12:18,780
unit get started is going to stop this

00:12:18,240 --> 00:12:22,070
unit

00:12:18,780 --> 00:12:22,070
okay but we can't have them both

00:12:24,960 --> 00:12:33,570
and then we have another similar concept

00:12:27,390 --> 00:12:36,060
called order so the requires etc is the

00:12:33,570 --> 00:12:38,160
dependencies the order is the order we'd

00:12:36,060 --> 00:12:43,950
like things to happen they are different

00:12:38,160 --> 00:12:48,810
concepts different things so typically

00:12:43,950 --> 00:12:50,880
if I put here that where was this okay

00:12:48,810 --> 00:12:53,940
in this particular unit it says after

00:12:50,880 --> 00:12:55,649
network target so that means that when

00:12:53,940 --> 00:12:58,410
we start this unit up which is going to

00:12:55,649 --> 00:13:01,140
be a web server then we're going to

00:12:58,410 --> 00:13:03,209
start this after in this case network

00:13:01,140 --> 00:13:04,620
target is started which kind of makes

00:13:03,209 --> 00:13:11,730
sense because a web server doesn't make

00:13:04,620 --> 00:13:15,240
much use without without a network so

00:13:11,730 --> 00:13:18,300
after is kind of similar to require but

00:13:15,240 --> 00:13:23,060
also different so just rest an example

00:13:18,300 --> 00:13:29,370
if I have three services ABC if I say a

00:13:23,060 --> 00:13:31,560
requires B and C and it is after B then

00:13:29,370 --> 00:13:33,360
that means that we so when it would

00:13:31,560 --> 00:13:34,920
protis processes that require statement

00:13:33,360 --> 00:13:36,770
it'll actually start all three things or

00:13:34,920 --> 00:13:40,800
cancer all three things up in parallel

00:13:36,770 --> 00:13:43,020
but if I put in a an after statement

00:13:40,800 --> 00:13:46,260
after B for example it means it's going

00:13:43,020 --> 00:13:48,420
to start basically C and then B and then

00:13:46,260 --> 00:13:49,890
it will start a okay so we're

00:13:48,420 --> 00:13:51,360
introducing some order into the way

00:13:49,890 --> 00:13:53,970
things are going to happen if you don't

00:13:51,360 --> 00:14:00,900
add in an ordering then it's just

00:13:53,970 --> 00:14:03,630
however systemd chooses to do it so

00:14:00,900 --> 00:14:06,720
that's the unit section the next bit

00:14:03,630 --> 00:14:11,459
then is a service so a service is a

00:14:06,720 --> 00:14:13,440
particular sort of unit and it has a

00:14:11,459 --> 00:14:15,209
unit section and then followed by in

00:14:13,440 --> 00:14:21,270
this case a service section this is

00:14:15,209 --> 00:14:22,680
again for the light T TBD surface so in

00:14:21,270 --> 00:14:24,990
the service section we basically say

00:14:22,680 --> 00:14:28,529
what program it is want to run and any

00:14:24,990 --> 00:14:30,209
parameters we want to specify there so

00:14:28,529 --> 00:14:32,040
the key thing here is the exec start

00:14:30,209 --> 00:14:34,980
statement which gives the name of the

00:14:32,040 --> 00:14:36,060
program like T DB D and the parameters

00:14:34,980 --> 00:14:39,240
required to run

00:14:36,060 --> 00:14:42,510
and in my example here there's an exact

00:14:39,240 --> 00:14:45,710
reload which says that if we do a reload

00:14:42,510 --> 00:14:49,170
of this service you'll do that by

00:14:45,710 --> 00:14:56,970
sending a kill - HUP - whatever PID it

00:14:49,170 --> 00:14:59,460
happens to be running with and then the

00:14:56,970 --> 00:15:02,970
third part of the of the triumvirate is

00:14:59,460 --> 00:15:07,080
the target so target is a group of

00:15:02,970 --> 00:15:09,690
services so targets their units that end

00:15:07,080 --> 00:15:16,590
in target and they look something like

00:15:09,690 --> 00:15:19,710
this the interesting thing is that when

00:15:16,590 --> 00:15:21,180
you look at targets initially I thought

00:15:19,710 --> 00:15:23,040
that if I looked at a target it would

00:15:21,180 --> 00:15:25,800
have a whole bunch of dependencies on

00:15:23,040 --> 00:15:28,410
services so that if I star for example

00:15:25,800 --> 00:15:30,810
the multi-user target I would expect to

00:15:28,410 --> 00:15:34,380
see all the services required for

00:15:30,810 --> 00:15:37,710
multi-user in fact when you look at a

00:15:34,380 --> 00:15:41,540
target such as this one here the

00:15:37,710 --> 00:15:45,780
dependencies are just on other targets

00:15:41,540 --> 00:15:46,260
so how does that work well I'll come to

00:15:45,780 --> 00:15:49,470
in a moment

00:15:46,260 --> 00:15:50,670
oh yeah so I meant I've sorted forgot

00:15:49,470 --> 00:15:53,490
this bit here there is a thing called a

00:15:50,670 --> 00:15:55,680
default target this is that link shown

00:15:53,490 --> 00:15:59,880
there this is the target is going to be

00:15:55,680 --> 00:16:01,530
started when you boot up so it's called

00:15:59,880 --> 00:16:03,780
default target it's a symbolic link in

00:16:01,530 --> 00:16:10,730
this case to multi-user target which

00:16:03,780 --> 00:16:10,730
would be the the non graphical login

00:16:14,459 --> 00:16:21,639
so yes how do these dependencies with

00:16:17,889 --> 00:16:25,300
targets actually work and the answer is

00:16:21,639 --> 00:16:27,160
it all works by reverse dependencies so

00:16:25,300 --> 00:16:31,600
we have two more keywords here requires

00:16:27,160 --> 00:16:34,990
and wants so these are called outgoing

00:16:31,600 --> 00:16:40,449
dependencies so essentially I can within

00:16:34,990 --> 00:16:44,139
my service I can say my service is

00:16:40,449 --> 00:16:45,610
wanted by the multi-user target so

00:16:44,139 --> 00:16:47,829
instead of having a pointer from multi

00:16:45,610 --> 00:16:51,850
usually target to my service it actually

00:16:47,829 --> 00:16:53,619
goes the other way and then when it

00:16:51,850 --> 00:16:55,869
starts on multi-user target it will see

00:16:53,619 --> 00:16:57,490
that it's wanted by a whole bunch of

00:16:55,869 --> 00:17:00,929
other services so it will then start

00:16:57,490 --> 00:17:00,929
them all up in the right order

00:17:05,490 --> 00:17:09,510
and the way this is actually implemented

00:17:07,920 --> 00:17:13,040
is kind of interesting is done with a

00:17:09,510 --> 00:17:15,689
bunch of symbolic links so if you look

00:17:13,040 --> 00:17:19,740
actually in the EGC system D system

00:17:15,689 --> 00:17:21,270
multi-user target wants directory so

00:17:19,740 --> 00:17:23,370
this is the list of incoming

00:17:21,270 --> 00:17:26,730
dependencies in this case for the target

00:17:23,370 --> 00:17:28,740
multi-user target and there you will see

00:17:26,730 --> 00:17:31,590
there are symbolic links created by the

00:17:28,740 --> 00:17:34,170
wanted bys for each one of the services

00:17:31,590 --> 00:17:35,700
so in this case there here it's for

00:17:34,170 --> 00:17:40,140
something called simple service which is

00:17:35,700 --> 00:17:41,340
just a demo program ok and if you look

00:17:40,140 --> 00:17:42,929
further in that directory we'll see

00:17:41,340 --> 00:17:51,030
their symbolic links for every single

00:17:42,929 --> 00:17:53,160
one of these things and then they need

00:17:51,030 --> 00:17:55,710
to look a little bit about systemctl so

00:17:53,160 --> 00:17:57,510
this is the the driver program which

00:17:55,710 --> 00:18:00,000
allows you to control system D and make

00:17:57,510 --> 00:18:01,380
it do different things so you can do a

00:18:00,000 --> 00:18:04,830
whole bunch of things with systemctl

00:18:01,380 --> 00:18:06,900
this is just a brief list but we can for

00:18:04,830 --> 00:18:11,340
example start and stop a unit for

00:18:06,900 --> 00:18:13,350
example a service we can enable a unit

00:18:11,340 --> 00:18:15,120
so when you enable a unit this is the

00:18:13,350 --> 00:18:17,490
point at which it installs that symbolic

00:18:15,120 --> 00:18:20,690
link we've just been talking about so if

00:18:17,490 --> 00:18:22,620
I enable in this case simple server

00:18:20,690 --> 00:18:25,830
that's the point at which it creates

00:18:22,620 --> 00:18:27,960
that symbolic link if you are ship in a

00:18:25,830 --> 00:18:31,200
system which has a bunch of units

00:18:27,960 --> 00:18:34,140
enabled by default then essentially your

00:18:31,200 --> 00:18:37,559
system image will have these links

00:18:34,140 --> 00:18:40,530
already created in the lib systemd

00:18:37,559 --> 00:18:42,780
system directory and if you're using

00:18:40,530 --> 00:18:44,490
pocky or build route or whatever that

00:18:42,780 --> 00:18:46,140
will create the the symbolic links for

00:18:44,490 --> 00:18:48,530
you in the image before you put it onto

00:18:46,140 --> 00:18:48,530
the target

00:18:52,210 --> 00:18:57,250
disable just deletes that with symbolic

00:18:54,550 --> 00:18:59,680
link it's easy enough and then status

00:18:57,250 --> 00:19:01,510
tells you what it's doing

00:18:59,680 --> 00:19:03,370
get default tells you what the default

00:19:01,510 --> 00:19:04,990
target is there's also a set default

00:19:03,370 --> 00:19:07,630
people on a change that's symbolic link

00:19:04,990 --> 00:19:08,800
for the default target and then lists

00:19:07,630 --> 00:19:10,750
dependencies shows you a nice little

00:19:08,800 --> 00:19:18,010
graph showing how all these dependencies

00:19:10,750 --> 00:19:20,560
work so that's a kind of that as much as

00:19:18,010 --> 00:19:23,410
I want to go into right now so that's

00:19:20,560 --> 00:19:25,120
kind of hopefully despite my slightly

00:19:23,410 --> 00:19:26,920
garbled description of all this stuff

00:19:25,120 --> 00:19:29,310
you got an idea then of how the

00:19:26,920 --> 00:19:31,960
dependencies and how the ordering of

00:19:29,310 --> 00:19:38,920
system D allows you to bring things up

00:19:31,960 --> 00:19:41,020
in a particular order so what do we how

00:19:38,920 --> 00:19:44,740
do you apply this then to reducing boot

00:19:41,020 --> 00:19:47,560
time so I'm defining boot time here as

00:19:44,740 --> 00:19:54,640
the time from powering on to running the

00:19:47,560 --> 00:19:56,500
the critical amp typically then what you

00:19:54,640 --> 00:19:59,260
are doing at this point is you have some

00:19:56,500 --> 00:20:01,120
generic image generated by your favorite

00:19:59,260 --> 00:20:04,780
build tool like the old route or Yocto

00:20:01,120 --> 00:20:06,340
project or maybe even using a standard

00:20:04,780 --> 00:20:13,170
off-the-shelf distro like debian or

00:20:06,340 --> 00:20:15,960
something these images are generated to

00:20:13,170 --> 00:20:19,030
cover a variety of circumstances

00:20:15,960 --> 00:20:21,040
possibly different Hardware different

00:20:19,030 --> 00:20:22,570
configurations or whatever so they tend

00:20:21,040 --> 00:20:23,740
to be quite conservative and the things

00:20:22,570 --> 00:20:27,820
they're going to do because they have to

00:20:23,740 --> 00:20:29,980
work in all circumstances in most cases

00:20:27,820 --> 00:20:31,990
then reducing boot time is taking

00:20:29,980 --> 00:20:35,850
something that's generic and making it

00:20:31,990 --> 00:20:35,850
specific to your particular use case

00:20:39,250 --> 00:20:43,000
and there are basically two ways you can

00:20:41,650 --> 00:20:45,940
do this a far from rewriting the whole

00:20:43,000 --> 00:20:47,669
thing the simplest thing is just to

00:20:45,940 --> 00:20:49,990
leave that stuff you don't really need

00:20:47,669 --> 00:20:51,640
so if it's running a bunch of demons you

00:20:49,990 --> 00:20:55,210
don't need or if it's configured

00:20:51,640 --> 00:20:57,490
some-some interfaces that you don't

00:20:55,210 --> 00:21:01,990
require you can just tell the system D

00:20:57,490 --> 00:21:03,789
to ignore those things the other thing

00:21:01,990 --> 00:21:05,049
that can sometimes be a win is doing

00:21:03,789 --> 00:21:09,309
things in the different order

00:21:05,049 --> 00:21:12,340
so sometimes it's it's a win to be able

00:21:09,309 --> 00:21:15,240
to start your critical program ahead of

00:21:12,340 --> 00:21:15,240
stuff that's less critical

00:21:19,100 --> 00:21:23,540
systemd comes with a bunch of what it

00:21:22,190 --> 00:21:26,000
comes with a tool core systemd are now

00:21:23,540 --> 00:21:29,090
analyzed which has a bunch of options to

00:21:26,000 --> 00:21:32,150
get information about what systemd is up

00:21:29,090 --> 00:21:36,020
to so this is the key the main tool I

00:21:32,150 --> 00:21:39,260
would use I do use for running for

00:21:36,020 --> 00:21:40,850
optimizing system D so you can just

00:21:39,260 --> 00:21:42,410
giant systemd analyze and it gives you a

00:21:40,850 --> 00:21:46,160
brief summary or one-line summary of

00:21:42,410 --> 00:21:48,860
what's been going on then you got blame

00:21:46,160 --> 00:21:51,950
systemd analyze blame which gives you a

00:21:48,860 --> 00:21:54,650
list of all the units that it's run to

00:21:51,950 --> 00:21:55,880
get to boot up and tells you how long

00:21:54,650 --> 00:21:57,650
each one of those took and then he

00:21:55,880 --> 00:22:01,309
orders them from the longest to the

00:21:57,650 --> 00:22:03,530
shortest which is kind of interesting

00:22:01,309 --> 00:22:06,590
but really the key one is the last one

00:22:03,530 --> 00:22:09,530
on this list here critical chain this

00:22:06,590 --> 00:22:13,580
takes the the critical path from startup

00:22:09,530 --> 00:22:15,830
to whatever the default target is and it

00:22:13,580 --> 00:22:20,570
tells you which units were affecting

00:22:15,830 --> 00:22:22,580
that that path so really the critical

00:22:20,570 --> 00:22:25,460
chain is where you want to start you

00:22:22,580 --> 00:22:27,110
look at what is taking the time what are

00:22:25,460 --> 00:22:33,020
things on the critical path and then you

00:22:27,110 --> 00:22:39,800
start optimizing those things so as an

00:22:33,020 --> 00:22:42,440
example then I have some example dumps

00:22:39,800 --> 00:22:45,110
of systemd analyze which I talked on

00:22:42,440 --> 00:22:48,230
this little pocket beagle which I happen

00:22:45,110 --> 00:22:52,040
to have left over from yesterday being

00:22:48,230 --> 00:22:56,630
at the embedded apprentice Linux

00:22:52,040 --> 00:23:00,290
engineer thing down in yeah the thing

00:22:56,630 --> 00:23:02,890
that debÃ­a that beyond running so best

00:23:00,290 --> 00:23:06,830
running a copy of Debian stretch and

00:23:02,890 --> 00:23:10,250
when I run system be analyzed it tells

00:23:06,830 --> 00:23:11,900
me this and so it's taking quite a long

00:23:10,250 --> 00:23:13,910
time to boot the carnal I haven't done

00:23:11,900 --> 00:23:18,760
anything to optimize that but it's 18

00:23:13,910 --> 00:23:22,250
seconds but then the user space is taken

00:23:18,760 --> 00:23:26,150
47 and a bit seconds so the total boot

00:23:22,250 --> 00:23:28,309
time is one minute and a bit so

00:23:26,150 --> 00:23:30,850
obviously there is some optimization to

00:23:28,309 --> 00:23:30,850
be done here

00:23:31,149 --> 00:23:37,249
if we run blame we see a whole bunch of

00:23:34,999 --> 00:23:40,009
things so the oneness at the top of the

00:23:37,249 --> 00:23:44,870
list is called bald to a generic boards

00:23:40,009 --> 00:23:47,899
startup whatever that is then it seems

00:23:44,870 --> 00:23:49,539
to have some as the MHD block device hmm

00:23:47,899 --> 00:23:52,519
that's not actually very interesting

00:23:49,539 --> 00:24:01,100
network service CPU free service and so

00:23:52,519 --> 00:24:03,679
on but the interesting thing is this one

00:24:01,100 --> 00:24:05,240
here if we look at the critical chain so

00:24:03,679 --> 00:24:10,460
we can see there that the the default

00:24:05,240 --> 00:24:13,850
target is graphical target so it's going

00:24:10,460 --> 00:24:16,820
to run an X server and some kind of GUI

00:24:13,850 --> 00:24:19,340
on top of that that depends on

00:24:16,820 --> 00:24:20,779
multi-user target then we have Getty

00:24:19,340 --> 00:24:25,029
target and then we have something called

00:24:20,779 --> 00:24:25,029
get eg s0 service

00:24:25,159 --> 00:24:32,509
I wish depends on the honor device so

00:24:28,999 --> 00:24:34,549
having a quick look at this just

00:24:32,509 --> 00:24:37,249
yesterday in fact and trying to optimize

00:24:34,549 --> 00:24:41,809
this the most obvious thing is that TTY

00:24:37,249 --> 00:24:44,960
GS 0 doesn't actually exist and if you

00:24:41,809 --> 00:24:46,940
look at the the logs we look at the

00:24:44,960 --> 00:24:50,590
journal log you see that there is a

00:24:46,940 --> 00:24:52,909
timeout after 40 seconds or something

00:24:50,590 --> 00:24:56,779
trying to international initialize this

00:24:52,909 --> 00:25:02,929
device so the quick win is to remove

00:24:56,779 --> 00:25:05,600
that service so taking my pocket beagle

00:25:02,929 --> 00:25:09,409
and doing a few changes to the system D

00:25:05,600 --> 00:25:12,470
configuration first thing I did is I

00:25:09,409 --> 00:25:15,950
switch from graphical to multi-user

00:25:12,470 --> 00:25:21,619
default target because there is no

00:25:15,950 --> 00:25:25,970
display on this device then I remove the

00:25:21,619 --> 00:25:29,119
offending GS 0 service and then I went

00:25:25,970 --> 00:25:30,230
through and actually these yeah I went

00:25:29,119 --> 00:25:32,629
through and removed a bunch of other

00:25:30,230 --> 00:25:34,759
services whilst I was at it which I knew

00:25:32,629 --> 00:25:36,860
I wasn't using so I'm not using this as

00:25:34,759 --> 00:25:38,809
a robot controller so I could remove

00:25:36,860 --> 00:25:40,659
remote robot control there was no

00:25:38,809 --> 00:25:44,990
Bluetooth

00:25:40,659 --> 00:25:47,499
hardware on this device and I don't

00:25:44,990 --> 00:25:50,720
really need an Apache web server running

00:25:47,499 --> 00:25:53,779
so I hate all those things out

00:25:50,720 --> 00:25:57,470
run systemd analyze again yeah and it's

00:25:53,779 --> 00:25:58,700
quite good so the kernel time is well

00:25:57,470 --> 00:26:01,519
it's slightly different but that's just

00:25:58,700 --> 00:26:03,590
random variation the important thing is

00:26:01,519 --> 00:26:06,559
the user space boot time is now 12

00:26:03,590 --> 00:26:08,509
seconds so I've managed to shave 35

00:26:06,559 --> 00:26:12,529
seconds off the boot time which I regard

00:26:08,509 --> 00:26:15,649
as a win it's still kind of longer than

00:26:12,529 --> 00:26:17,960
I would like and I had intended to spend

00:26:15,649 --> 00:26:21,409
a bit time more time optimizing that but

00:26:17,960 --> 00:26:23,600
I kind of ran out of time doing that but

00:26:21,409 --> 00:26:26,299
hey so that's the kind of things you can

00:26:23,600 --> 00:26:29,090
do that's the best the I guess the key

00:26:26,299 --> 00:26:32,509
point here is we have the systemd

00:26:29,090 --> 00:26:34,940
analyze command which allows you to get

00:26:32,509 --> 00:26:37,340
a list of problem areas and then you can

00:26:34,940 --> 00:26:39,769
go through looking at the unit's looking

00:26:37,340 --> 00:26:41,840
at the dependencies and removing stuff

00:26:39,769 --> 00:26:47,629
that isn't needed or is in the wrong

00:26:41,840 --> 00:26:49,039
order so that's the main part of the

00:26:47,629 --> 00:26:53,139
talk I've got a couple more slides

00:26:49,039 --> 00:26:55,970
before we're finished so in addition to

00:26:53,139 --> 00:26:58,610
just the plain init daemon which what

00:26:55,970 --> 00:26:59,600
we've been talking about system D comes

00:26:58,610 --> 00:27:02,749
with a whole bunch of other useful

00:26:59,600 --> 00:27:05,029
things and so I want to mention just

00:27:02,749 --> 00:27:07,009
briefly the watchdog and the resource

00:27:05,029 --> 00:27:12,379
limits both of which are kind of useful

00:27:07,009 --> 00:27:14,659
for the embedded use case so here's an

00:27:12,379 --> 00:27:20,299
example of the watchdog you canyou can

00:27:14,659 --> 00:27:23,379
use in a service and just looking at the

00:27:20,299 --> 00:27:25,519
example there we have watchdog sec

00:27:23,379 --> 00:27:29,269
restart and watchdog so basically the

00:27:25,519 --> 00:27:31,610
watchdog SEC says that if this service

00:27:29,269 --> 00:27:34,759
isn't Friday by the by the watchdog in

00:27:31,610 --> 00:27:37,309
30 seconds then we're going to restart

00:27:34,759 --> 00:27:41,690
the service so so long as the service is

00:27:37,309 --> 00:27:43,759
responding to watchdogs that's fine but

00:27:41,690 --> 00:27:45,919
if it doesn't respond within 30 seconds

00:27:43,759 --> 00:27:47,480
something's gone wrong system D will

00:27:45,919 --> 00:27:51,889
then stop that service and then restart

00:27:47,480 --> 00:27:54,470
it and you can also do this other thing

00:27:51,889 --> 00:27:56,870
you can put in a limit so you don't

00:27:54,470 --> 00:28:00,559
into some kind of boot loop so in the

00:27:56,870 --> 00:28:03,080
example here if we get four boots for a

00:28:00,559 --> 00:28:04,940
size four restarts in five minutes then

00:28:03,080 --> 00:28:07,100
there is something seriously wrong wrong

00:28:04,940 --> 00:28:14,330
with the system and that case will force

00:28:07,100 --> 00:28:16,460
a system reboot and start over again and

00:28:14,330 --> 00:28:18,350
the other really useful thing in in

00:28:16,460 --> 00:28:22,870
better again for the better use case is

00:28:18,350 --> 00:28:28,520
to be able to set limits on the

00:28:22,870 --> 00:28:29,809
resources used by a service and in this

00:28:28,520 --> 00:28:34,520
example here I'm just showing two of

00:28:29,809 --> 00:28:37,490
these things we have CPU quota that's

00:28:34,520 --> 00:28:41,929
the percentage of time that this service

00:28:37,490 --> 00:28:43,700
is allowed to use okay so it can't use

00:28:41,929 --> 00:28:45,679
more than 20% of your CPU bandwidth

00:28:43,700 --> 00:28:47,659
which is kind of useful if you've got

00:28:45,679 --> 00:28:49,580
some real-time stuff going on as well

00:28:47,659 --> 00:28:51,830
then you may want to make sure this

00:28:49,580 --> 00:28:54,409
doesn't take up too much of your

00:28:51,830 --> 00:28:56,120
bandwidth and then the other thing the

00:28:54,409 --> 00:28:58,309
memory max option

00:28:56,120 --> 00:29:01,720
this allows us to say how much memory

00:28:58,309 --> 00:29:07,280
what's the memory quota of this device

00:29:01,720 --> 00:29:08,270
in this case is set to 4x there's a

00:29:07,280 --> 00:29:09,740
whole bunch of other stuff you can do

00:29:08,270 --> 00:29:12,200
with this the manual page system D

00:29:09,740 --> 00:29:13,520
resource control tells you bunch of

00:29:12,200 --> 00:29:18,770
other a bunch of other things to do with

00:29:13,520 --> 00:29:20,419
Io scheduling and suchlike and if you're

00:29:18,770 --> 00:29:22,510
interested in on how this is actually

00:29:20,419 --> 00:29:25,909
implemented it's all done through

00:29:22,510 --> 00:29:30,830
control groups or C groups but I'm not

00:29:25,909 --> 00:29:33,380
going to describe that now and that is

00:29:30,830 --> 00:29:35,330
basically it there we go so there's a

00:29:33,380 --> 00:29:38,110
quick run through system D fancy stuff

00:29:35,330 --> 00:29:41,890
we can do a system D any questions I

00:29:38,110 --> 00:29:41,890
have a microphone here

00:29:48,790 --> 00:29:54,120
nope yes okay yeah can we get the

00:29:51,790 --> 00:29:54,120
microphone

00:30:08,360 --> 00:30:11,570
I'm sorry if I take questions without

00:30:10,429 --> 00:30:13,039
the microphone and then it's not picked

00:30:11,570 --> 00:30:14,620
it up by the recording and then nobody

00:30:13,039 --> 00:30:17,240
knows what so and we're talking about

00:30:14,620 --> 00:30:18,980
already so about the watchdog do you

00:30:17,240 --> 00:30:21,950
know if it's possible to implement it

00:30:18,980 --> 00:30:26,210
without needing to have specific systemd

00:30:21,950 --> 00:30:29,269
related code in your application no I

00:30:26,210 --> 00:30:31,340
mean so in order for the sister for your

00:30:29,269 --> 00:30:32,360
service to respond to the watchdog

00:30:31,340 --> 00:30:33,950
prompts that which are going to come

00:30:32,360 --> 00:30:36,080
from system day then yet you've got to

00:30:33,950 --> 00:30:38,029
write some code to do that it's only a

00:30:36,080 --> 00:30:40,549
little bit code but system did specific

00:30:38,029 --> 00:30:45,350
you kind of import something or is it

00:30:40,549 --> 00:30:48,169
what is the way okay I have a put on

00:30:45,350 --> 00:30:50,570
this well you either use a lip system D

00:30:48,169 --> 00:30:54,500
which in which case you have one line of

00:30:50,570 --> 00:30:56,840
C code to just trigger as a watchdog or

00:30:54,500 --> 00:30:58,669
you can just at the end of the day it's

00:30:56,840 --> 00:31:00,679
just writing in a socket that is made

00:30:58,669 --> 00:31:02,840
available by system D so you can just

00:31:00,679 --> 00:31:05,240
check an environment variable which

00:31:02,840 --> 00:31:06,380
tells you where the socket is and find

00:31:05,240 --> 00:31:08,570
out what you have to write in that

00:31:06,380 --> 00:31:14,990
socket and do it in whatever way you

00:31:08,570 --> 00:31:16,909
want it's not very complicated okay

00:31:14,990 --> 00:31:19,549
thank you for that - to answer the

00:31:16,909 --> 00:31:22,519
question I assume you will run some cell

00:31:19,549 --> 00:31:24,200
script to do the watchdog check and I've

00:31:22,519 --> 00:31:27,200
written a small utility called half dog

00:31:24,200 --> 00:31:29,019
you can find on github were you it will

00:31:27,200 --> 00:31:31,970
wrap your program and automatically

00:31:29,019 --> 00:31:34,600
forward the exit code of your health

00:31:31,970 --> 00:31:36,830
script to system D so you don't have to

00:31:34,600 --> 00:31:39,799
change the target program and recompile

00:31:36,830 --> 00:31:43,279
it go what was the name of that it have

00:31:39,799 --> 00:31:51,169
a health dog healthy yeah okay cool

00:31:43,279 --> 00:31:52,519
thanks okay anyone else you might have

00:31:51,169 --> 00:31:54,080
to come over if you come to the front

00:31:52,519 --> 00:31:56,330
then we'll pick you up next time round I

00:31:54,080 --> 00:31:58,279
was wondering because we've experienced

00:31:56,330 --> 00:32:00,110
that we've actually had problems because

00:31:58,279 --> 00:32:02,419
system D was paralyzing too much

00:32:00,110 --> 00:32:05,899
especially in combination with a watch

00:32:02,419 --> 00:32:07,610
dog that our our services or we're

00:32:05,899 --> 00:32:09,110
already stopped because they weren't

00:32:07,610 --> 00:32:11,090
responding to the watch dog have you

00:32:09,110 --> 00:32:14,090
experienced something like that it in

00:32:11,090 --> 00:32:16,230
some cases it's faster to actually not

00:32:14,090 --> 00:32:20,669
paralyze too much to put in

00:32:16,230 --> 00:32:26,330
some boundaries so they can't paralyze

00:32:20,669 --> 00:32:29,220
too much yeah I mean so if you have on

00:32:26,330 --> 00:32:30,960
boot if system D it's only gonna start

00:32:29,220 --> 00:32:32,669
up a million different services then

00:32:30,960 --> 00:32:36,090
obviously that's going to consume all

00:32:32,669 --> 00:32:39,480
your CPU resources so I guess the answer

00:32:36,090 --> 00:32:42,600
to that would be to put in the ordering

00:32:39,480 --> 00:32:45,600
statements the the afternoon before and

00:32:42,600 --> 00:32:48,120
so on so that things happen in a more a

00:32:45,600 --> 00:32:50,840
more leisurely order should we say it's

00:32:48,120 --> 00:32:57,210
also what we put it in there yes yep

00:32:50,840 --> 00:33:00,179
behind you thank you so a lot of

00:32:57,210 --> 00:33:02,429
embedded systems up till I don't know I

00:33:00,179 --> 00:33:03,660
guess recently have been you know using

00:33:02,429 --> 00:33:05,820
the busybox startup

00:33:03,660 --> 00:33:07,919
I think build root ship with busybox

00:33:05,820 --> 00:33:10,890
startup by default at least a few years

00:33:07,919 --> 00:33:12,270
ago maybe I'm wrong about that but at

00:33:10,890 --> 00:33:16,530
what point would you recommend switching

00:33:12,270 --> 00:33:19,350
to system D from busybox well what would

00:33:16,530 --> 00:33:22,559
be the what would be the criteria you

00:33:19,350 --> 00:33:26,730
could suggest well I mean that's kind of

00:33:22,559 --> 00:33:31,500
a general purpose question yes I guess I

00:33:26,730 --> 00:33:33,390
mean the compound answer would be at the

00:33:31,500 --> 00:33:39,809
point at which busybox in it stops

00:33:33,390 --> 00:33:43,260
working for you but thank you but I

00:33:39,809 --> 00:33:46,500
think that I mean if you have a really

00:33:43,260 --> 00:33:47,850
small system and you have you know just

00:33:46,500 --> 00:33:49,290
a few megabytes of RAM and if you have a

00:33:47,850 --> 00:33:50,700
few megabytes of storage then obviously

00:33:49,290 --> 00:33:52,590
want to slim things down as much as

00:33:50,700 --> 00:33:55,860
possible but if you've got a more

00:33:52,590 --> 00:33:58,620
complicated system with multiple network

00:33:55,860 --> 00:34:01,170
demons doing various things

00:33:58,620 --> 00:34:04,140
you know in control programs so on then

00:34:01,170 --> 00:34:05,700
system D really is an advantage because

00:34:04,140 --> 00:34:07,290
you have all these extra facilities I

00:34:05,700 --> 00:34:12,480
haven't even talked about the journaling

00:34:07,290 --> 00:34:14,580
yet which allows you to to do journal do

00:34:12,480 --> 00:34:16,770
a logging system logging in a flexible

00:34:14,580 --> 00:34:20,940
way and to upload those logs securely to

00:34:16,770 --> 00:34:22,620
remote web servers and so on so it has a

00:34:20,940 --> 00:34:25,200
whole bunch of extra facilities which

00:34:22,620 --> 00:34:28,409
you just don't get if you're using a

00:34:25,200 --> 00:34:30,090
simple either busybox Lynette or or

00:34:28,409 --> 00:34:31,889
system five in it okay so it's more

00:34:30,090 --> 00:34:33,510
about the capabilities of system D than

00:34:31,889 --> 00:34:39,419
the boot time advantages it could give

00:34:33,510 --> 00:34:42,690
you yeah I mean if you have a system

00:34:39,419 --> 00:34:44,760
that's that simple then probably busybox

00:34:42,690 --> 00:34:47,730
in it will be as fast or faster than

00:34:44,760 --> 00:34:49,740
system D so in that in that particular

00:34:47,730 --> 00:34:51,179
case your advantage will come from the

00:34:49,740 --> 00:34:57,930
extra things that system do you can do

00:34:51,179 --> 00:35:06,030
for you thank you I would be possible to

00:34:57,930 --> 00:35:07,530
open slide 25 I don't know yeah here if

00:35:06,030 --> 00:35:10,050
you see the second line there is the

00:35:07,530 --> 00:35:12,300
device file and on the fifth line there

00:35:10,050 --> 00:35:14,790
is the utility record service did you

00:35:12,300 --> 00:35:25,860
make any optimization to improve the

00:35:14,790 --> 00:35:29,640
speed of these files to be so chairs on

00:35:25,860 --> 00:35:33,360
that oops excuse me that's that's

00:35:29,640 --> 00:35:35,970
indicating time's up yeah

00:35:33,360 --> 00:35:39,330
so we can talk about this afterwards but

00:35:35,970 --> 00:35:42,270
the simple answer is no I didn't do you

00:35:39,330 --> 00:35:45,810
have time for one more question who's

00:35:42,270 --> 00:35:47,640
controlling this gone in maybe not

00:35:45,810 --> 00:35:49,680
really a question but a comment to the

00:35:47,640 --> 00:35:54,600
gentleman in the gray t-shirt there who

00:35:49,680 --> 00:35:59,340
had the problem with a paralyzation I

00:35:54,600 --> 00:36:01,260
found very familiar and I think your

00:35:59,340 --> 00:36:03,390
second line even it's a bit different

00:36:01,260 --> 00:36:06,050
chose actually the reason because many

00:36:03,390 --> 00:36:10,070
of those embedded systems are very

00:36:06,050 --> 00:36:12,740
much io bombed so there i all limited

00:36:10,070 --> 00:36:16,430
and our system D coming from the server

00:36:12,740 --> 00:36:20,720
world they paralyzed like crazy which is

00:36:16,430 --> 00:36:23,240
not nice in our embedded systems so the

00:36:20,720 --> 00:36:25,850
answer of the addition I would there to

00:36:23,240 --> 00:36:29,090
make to make there is I would use

00:36:25,850 --> 00:36:33,770
systemd analyze plot which actually

00:36:29,090 --> 00:36:35,810
shows you which step takes how long and

00:36:33,770 --> 00:36:38,450
it shows you whether you have a CPU

00:36:35,810 --> 00:36:40,430
bottleneck or an i/o bottleneck in most

00:36:38,450 --> 00:36:41,990
cases what my experience you do not have

00:36:40,430 --> 00:36:44,660
a CPA before like you have an i/o

00:36:41,990 --> 00:36:48,920
bottleneck because it takes too long to

00:36:44,660 --> 00:36:54,650
read all the executables and all the

00:36:48,920 --> 00:36:56,570
libraries from this slow MMC crap so and

00:36:54,650 --> 00:36:59,660
the answer is then as you as you said as

00:36:56,570 --> 00:37:03,260
you said look there what takes long and

00:36:59,660 --> 00:37:07,160
then just at war after statements there

00:37:03,260 --> 00:37:08,960
to get not so parallel okay so in a

00:37:07,160 --> 00:37:10,610
system de there are two exist of the

00:37:08,960 --> 00:37:12,890
analyze things that you didn't mention

00:37:10,610 --> 00:37:15,260
which I would recommend there the plot

00:37:12,890 --> 00:37:17,450
which I said and the dot the dot is

00:37:15,260 --> 00:37:20,270
typically very intimidating but that

00:37:17,450 --> 00:37:22,160
also tells you that you have too much

00:37:20,270 --> 00:37:23,480
stuff on going as you know probably

00:37:22,160 --> 00:37:25,790
throw something out

00:37:23,480 --> 00:37:29,180
so the systemd analyze has many hidden

00:37:25,790 --> 00:37:31,000
goodies there okay thank you very much

00:37:29,180 --> 00:37:34,910
so I think that's the end of the session

00:37:31,000 --> 00:37:35,480
thank you all very much and yep enjoy

00:37:34,910 --> 00:37:39,849
the rest of the day

00:37:35,480 --> 00:37:39,849

YouTube URL: https://www.youtube.com/watch?v=NNgZXNQtil8


