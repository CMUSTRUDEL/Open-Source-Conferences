Title: Safety vs Security: A Tale of Two Updates - Jeremy Rosen, Smile.fr
Publication date: 2019-10-29
Playlist: Open Source Summit & Embedded Linux Conference EU 2019 - Lyon
Description: 
	Safety vs Security: A Tale of Two Updates - Jeremy Rosen, Smile.fr*

When developing a product, safety and security usually go along nicely : Both want a product that has no remaining bugs.

However, once the product is out, the constraints of safety and security tends to be very contradictory. Safety tend to avoid updating the product, whereas security wants the exposure window to be as small as possible.

The embedded ecosystem always had a culture heavily influenced by safety, and this is one of the few places where product owners will say "no" to security if they are not confident that it won't compromise safety.

This talk will analyze the two philosophies, based on Jeremy Rosen's experience interacting with safety engineers, security officers, and various product owners and project managers.

Once the pain points are understood, the talk will discuss how to mitigate them, either through an architectural approch or by giving talking points to present the safety constraints to a security officer and the security constraints to a safety engineer.
Captions: 
	00:00:00,030 --> 00:00:06,410
okay let's get started hello everybody

00:00:02,810 --> 00:00:09,210
my name is Jeremy Rosen and I'm a

00:00:06,410 --> 00:00:13,139
embedded technical expert at smile which

00:00:09,210 --> 00:00:15,509
is a big open source company and I

00:00:13,139 --> 00:00:20,699
wanted to talk about safety versus

00:00:15,509 --> 00:00:22,439
security and how the way people think

00:00:20,699 --> 00:00:25,769
when they're thinking thinking about

00:00:22,439 --> 00:00:28,170
safety and security contradicts and kind

00:00:25,769 --> 00:00:32,850
of tend to pull the projects in opposite

00:00:28,170 --> 00:00:36,420
directions so before going into the meat

00:00:32,850 --> 00:00:38,690
of the talk a few warning points to kind

00:00:36,420 --> 00:00:41,579
of set out what I'm going to talk about

00:00:38,690 --> 00:00:44,100
I'm going to talk about philosophy and

00:00:41,579 --> 00:00:46,110
culture I mean I'm going to talk about

00:00:44,100 --> 00:00:48,600
how people react when I talk about

00:00:46,110 --> 00:00:50,969
security or safety in the embedded

00:00:48,600 --> 00:00:53,879
context so it's not a technical talk

00:00:50,969 --> 00:00:56,250
it's about how technical people react

00:00:53,879 --> 00:00:57,620
from what they've learned about safety

00:00:56,250 --> 00:01:00,780
and security

00:00:57,620 --> 00:01:03,650
my company does embedded stuff and

00:01:00,780 --> 00:01:08,939
mainly industrial and but it's tough so

00:01:03,650 --> 00:01:11,549
that's a that's a very special subset of

00:01:08,939 --> 00:01:14,250
embedded development in general it's

00:01:11,549 --> 00:01:16,799
very different from say consumer

00:01:14,250 --> 00:01:19,080
products it has its own constraints in

00:01:16,799 --> 00:01:22,890
particular with regard to updates which

00:01:19,080 --> 00:01:26,040
are way more complicated we'll get to it

00:01:22,890 --> 00:01:28,680
so just keep in mind that's not all

00:01:26,040 --> 00:01:31,829
embedded systems that's the one I see I

00:01:28,680 --> 00:01:33,990
see about 20 to 50 embedded projects a

00:01:31,829 --> 00:01:37,140
year so quite a few I can start doing

00:01:33,990 --> 00:01:40,020
statistics about them and all project

00:01:37,140 --> 00:01:41,820
are different so I will tend to say yeah

00:01:40,020 --> 00:01:44,250
but you can have to do that on your

00:01:41,820 --> 00:01:46,159
embedded project all embedded projects

00:01:44,250 --> 00:01:48,869
are different each of them has its own

00:01:46,159 --> 00:01:54,619
problems and you always have to think

00:01:48,869 --> 00:01:56,640
about your particular case and since its

00:01:54,619 --> 00:01:59,549
philosophical talk

00:01:56,640 --> 00:02:01,649
I have very simple definition about

00:01:59,549 --> 00:02:03,570
safety and security and I don't want to

00:02:01,649 --> 00:02:04,350
go into the exact details and the

00:02:03,570 --> 00:02:06,360
meaning of those words

00:02:04,350 --> 00:02:09,509
safety is anything related to

00:02:06,360 --> 00:02:10,569
reliability and security is anything

00:02:09,509 --> 00:02:13,719
related to

00:02:10,569 --> 00:02:16,840
hostile takeover in general okay we will

00:02:13,719 --> 00:02:19,269
try to talk a little bit about why

00:02:16,840 --> 00:02:21,400
embedded systems like at security I mean

00:02:19,269 --> 00:02:23,530
everybody knows that embedded systems

00:02:21,400 --> 00:02:25,480
suck at security and it's an X next be

00:02:23,530 --> 00:02:28,090
big end of the world things that's

00:02:25,480 --> 00:02:30,370
coming around but there are very little

00:02:28,090 --> 00:02:32,590
people that actually try to understand

00:02:30,370 --> 00:02:35,590
why and where we are where it comes from

00:02:32,590 --> 00:02:39,359
beyond the as a usual there is no

00:02:35,590 --> 00:02:43,419
updates it's more complicated than that

00:02:39,359 --> 00:02:46,859
so just to start my talk I would like to

00:02:43,419 --> 00:02:52,500
do a quick show of hands in this room

00:02:46,859 --> 00:02:56,109
who consider himself a safety person Oh

00:02:52,500 --> 00:03:00,099
quite a few and people who are more like

00:02:56,109 --> 00:03:03,099
security people a bit more I would say

00:03:00,099 --> 00:03:07,329
ones third to third and who's more or

00:03:03,099 --> 00:03:09,250
less doing both I end up doing both so

00:03:07,329 --> 00:03:10,449
that's quite a few people like that so

00:03:09,250 --> 00:03:12,340
that's good because that means we'll

00:03:10,449 --> 00:03:14,530
have people from both sides I'm gonna

00:03:12,340 --> 00:03:20,169
try to think with the other person's

00:03:14,530 --> 00:03:23,199
hats so let's start with safety safety

00:03:20,169 --> 00:03:24,879
people are kind of brainwashed in the

00:03:23,199 --> 00:03:28,120
way they think there are extremists so

00:03:24,879 --> 00:03:30,340
I'll try to explain how why where it

00:03:28,120 --> 00:03:33,340
comes from to the security people who

00:03:30,340 --> 00:03:36,340
are not used to them so the first thing

00:03:33,340 --> 00:03:38,889
with safety is you want your your system

00:03:36,340 --> 00:03:42,699
to always work with a very very strict

00:03:38,889 --> 00:03:45,519
definition of always so having correct

00:03:42,699 --> 00:03:48,609
software is not enough you need to prove

00:03:45,519 --> 00:03:50,139
that software is correct so you need to

00:03:48,609 --> 00:03:52,090
prove that your software is correct I

00:03:50,139 --> 00:03:54,099
have no idea how you can prove that

00:03:52,090 --> 00:03:56,319
machine learning is correct that's gonna

00:03:54,099 --> 00:03:58,629
be very interesting in the coming years

00:03:56,319 --> 00:04:00,549
you usually need to prove that your

00:03:58,629 --> 00:04:02,500
hardware is correct on the

00:04:00,549 --> 00:04:04,629
safety-critical system it means that you

00:04:02,500 --> 00:04:06,310
cannot use caches because it might

00:04:04,629 --> 00:04:09,189
change timings and you don't really know

00:04:06,310 --> 00:04:11,189
how they work and you need to prove is

00:04:09,189 --> 00:04:15,310
that your tools are correct

00:04:11,189 --> 00:04:17,199
compilers when you do safety-critical

00:04:15,310 --> 00:04:19,690
codes you have people that are paid

00:04:17,199 --> 00:04:22,200
whole time to proofread the assembly

00:04:19,690 --> 00:04:24,690
with the source code and just compare to

00:04:22,200 --> 00:04:27,630
sure that's a compiler generates correct

00:04:24,690 --> 00:04:30,720
code because you cannot trust your

00:04:27,630 --> 00:04:32,400
compiler and then because you need to

00:04:30,720 --> 00:04:35,310
prove things correct you need to

00:04:32,400 --> 00:04:37,410
simplify things so you have those crazy

00:04:35,310 --> 00:04:40,320
general rules you need to follow when

00:04:37,410 --> 00:04:44,220
you're doing a safety critical code like

00:04:40,320 --> 00:04:46,710
no dynamic memory allocation or software

00:04:44,220 --> 00:04:49,140
version which is no dynamic memory

00:04:46,710 --> 00:04:51,180
allocation after initialization anyway

00:04:49,140 --> 00:04:54,600
you want to make sure that you don't do

00:04:51,180 --> 00:04:57,930
not have use after free so no free no

00:04:54,600 --> 00:05:00,180
double free no free no memory leaks no

00:04:57,930 --> 00:05:02,250
memory allocation so it's it simplifies

00:05:00,180 --> 00:05:06,210
stuff a lot and you need it because you

00:05:02,250 --> 00:05:09,260
need to prove it a consequence of that

00:05:06,210 --> 00:05:12,240
is that when your product is out and you

00:05:09,260 --> 00:05:14,550
discover a bug in the product the first

00:05:12,240 --> 00:05:17,670
thing safety people will do is try to

00:05:14,550 --> 00:05:21,120
find out if the bug has any consequence

00:05:17,670 --> 00:05:23,670
at all because proof changing the code

00:05:21,120 --> 00:05:27,780
means certifying the code again and that

00:05:23,670 --> 00:05:30,060
can be extremely expensive so if we can

00:05:27,780 --> 00:05:34,500
prove that the bug has no consequence

00:05:30,060 --> 00:05:37,590
that's way better and also when you're

00:05:34,500 --> 00:05:40,080
doing safety critical stuff any change

00:05:37,590 --> 00:05:42,480
is safety is a safety change and need to

00:05:40,080 --> 00:05:44,850
be evaluated I had an accent

00:05:42,480 --> 00:05:47,010
alright recently from people working on

00:05:44,850 --> 00:05:51,210
hardware that was going into trains so

00:05:47,010 --> 00:05:53,220
they had this little rackable unit that

00:05:51,210 --> 00:05:55,440
had they had to put it and those units

00:05:53,220 --> 00:05:57,480
had connectors on the front side with a

00:05:55,440 --> 00:06:00,660
little knob that she could screw on and

00:05:57,480 --> 00:06:03,120
the knob was linked to the unit with a

00:06:00,660 --> 00:06:05,280
little chain at some points they had to

00:06:03,120 --> 00:06:07,380
change the provider as a provider for

00:06:05,280 --> 00:06:10,020
those little chains and they had to

00:06:07,380 --> 00:06:12,330
recertify the hardware because they

00:06:10,020 --> 00:06:14,910
change the hardware so don't ask the

00:06:12,330 --> 00:06:18,030
question just recertify the whole thing

00:06:14,910 --> 00:06:21,120
so safety people are completely paranoid

00:06:18,030 --> 00:06:24,930
but that's why planes work it's because

00:06:21,120 --> 00:06:27,240
they check everything but security

00:06:24,930 --> 00:06:31,830
people are kind of brainwashed the other

00:06:27,240 --> 00:06:34,360
way so the difference is security is

00:06:31,830 --> 00:06:37,030
about not just things working

00:06:34,360 --> 00:06:39,400
or all the time it's more about making

00:06:37,030 --> 00:06:42,780
sure that can it cannot be used for

00:06:39,400 --> 00:06:45,159
anything than its original purpose so

00:06:42,780 --> 00:06:48,099
everything is an attack vector

00:06:45,159 --> 00:06:50,020
I mean I'm do a little security but I'm

00:06:48,099 --> 00:06:52,960
not a security person and when you read

00:06:50,020 --> 00:06:55,569
how a specter and meltdown works you're

00:06:52,960 --> 00:06:58,240
like it's impossible nobody would think

00:06:55,569 --> 00:07:02,620
of that and nobody could really exploit

00:06:58,240 --> 00:07:06,099
it do they oh they do so the whole thing

00:07:02,620 --> 00:07:08,409
is also any little hole is potentially a

00:07:06,099 --> 00:07:10,599
leapfrog to a bigger hole and a bigger

00:07:08,409 --> 00:07:13,599
hole and a bigger hole so you need to do

00:07:10,599 --> 00:07:16,449
everything check everything fix

00:07:13,599 --> 00:07:18,879
everything and then a big difference is

00:07:16,449 --> 00:07:21,099
security is a race you have to find a

00:07:18,879 --> 00:07:23,669
weakness before people that are going to

00:07:21,099 --> 00:07:27,389
exploit it you had to fix it as fast as

00:07:23,669 --> 00:07:30,729
possible even if you have to temporarily

00:07:27,389 --> 00:07:32,949
temporarily break another part of the

00:07:30,729 --> 00:07:35,259
code that's okay because leaving a hole

00:07:32,949 --> 00:07:37,389
is dangerous and then you have to deploy

00:07:35,259 --> 00:07:40,180
and you have to deploy fast because once

00:07:37,389 --> 00:07:42,430
you start deploying basically you

00:07:40,180 --> 00:07:45,310
publish the bug so people will try to

00:07:42,430 --> 00:07:48,339
start exploiting it so speed is the

00:07:45,310 --> 00:07:50,949
essence and the whole world is out to

00:07:48,339 --> 00:07:54,039
get you so security people completely

00:07:50,949 --> 00:07:56,349
paranoid but the thing is attacks are a

00:07:54,039 --> 00:07:59,110
real thing spectrum meltdown has been

00:07:56,349 --> 00:08:01,300
exploited in the wild and the security

00:07:59,110 --> 00:08:03,580
culture that way of doing stuff there is

00:08:01,300 --> 00:08:06,449
a whole talk about upgrade upgrade

00:08:03,580 --> 00:08:09,460
upgrade upgrade it works it does reduce

00:08:06,449 --> 00:08:13,300
all the security threats so it makes us

00:08:09,460 --> 00:08:15,120
it makes sense so now is that we've been

00:08:13,300 --> 00:08:18,669
explaining that what happens when we

00:08:15,120 --> 00:08:20,650
have to put both side to side you have

00:08:18,669 --> 00:08:23,919
the safety people that will tell you

00:08:20,650 --> 00:08:26,289
your code must be proven and certified

00:08:23,919 --> 00:08:28,650
and that's long I mean if you have to

00:08:26,289 --> 00:08:31,509
proof read every line of it it takes

00:08:28,650 --> 00:08:33,820
years but on the other hands our

00:08:31,509 --> 00:08:36,250
security people they want to go fast and

00:08:33,820 --> 00:08:41,199
they have very good reason to want to go

00:08:36,250 --> 00:08:44,620
fast safety works because you know

00:08:41,199 --> 00:08:46,630
exactly what your software has to do so

00:08:44,620 --> 00:08:49,360
you have very well-defined

00:08:46,630 --> 00:08:52,839
Constraints an operating range where as

00:08:49,360 --> 00:08:55,209
security we'll just start by looking

00:08:52,839 --> 00:08:56,740
where out of the say of the ranch

00:08:55,209 --> 00:08:58,690
because that's where the attacks come

00:08:56,740 --> 00:09:01,360
from you must protect from a hostile

00:08:58,690 --> 00:09:04,990
behavior not just accidents not just

00:09:01,360 --> 00:09:07,509
bugs you must protect from people who

00:09:04,990 --> 00:09:10,360
actually are here to get you so it's a

00:09:07,509 --> 00:09:15,610
very different way of thinking about

00:09:10,360 --> 00:09:17,290
bugs one of the big big difference

00:09:15,610 --> 00:09:20,529
what's one of the ones that has the most

00:09:17,290 --> 00:09:23,889
impact is that the way bugs go down

00:09:20,529 --> 00:09:27,009
safety people considers that the more

00:09:23,889 --> 00:09:30,519
you the more time passes is a less bug

00:09:27,009 --> 00:09:32,589
left you have so long tape testing works

00:09:30,519 --> 00:09:35,380
long testing will reduce the number of

00:09:32,589 --> 00:09:39,639
bugs and as long as you do not introduce

00:09:35,380 --> 00:09:42,759
new code the number of bugs left will go

00:09:39,639 --> 00:09:45,069
down that's not true with security

00:09:42,759 --> 00:09:47,769
because threat models evolve and some

00:09:45,069 --> 00:09:50,500
things that was safe might not be safe

00:09:47,769 --> 00:09:52,959
and more some code which was state of

00:09:50,500 --> 00:09:55,779
ceará of the art a couple of years ago

00:09:52,959 --> 00:09:59,079
might be dangerous nowadays because we

00:09:55,779 --> 00:10:02,170
have a new way to exploit it so again

00:09:59,079 --> 00:10:07,000
there is this consideration about time

00:10:02,170 --> 00:10:09,459
makes a huge difference and then you

00:10:07,000 --> 00:10:11,410
have the idea of known bugs and safety

00:10:09,459 --> 00:10:13,600
you will check that the bugs has no

00:10:11,410 --> 00:10:16,540
consequence and if your bug has no

00:10:13,600 --> 00:10:20,560
consequence you will actively ignore it

00:10:16,540 --> 00:10:22,060
I mean there is a known bug on Airbus

00:10:20,560 --> 00:10:24,730
planes which mean you have to shut down

00:10:22,060 --> 00:10:28,240
and restart your plane every hundred and

00:10:24,730 --> 00:10:31,060
forty days this bud will probably never

00:10:28,240 --> 00:10:32,980
be fixed because they have a fix

00:10:31,060 --> 00:10:34,899
you just turn off the plane and back on

00:10:32,980 --> 00:10:37,360
and that's good enough and they don't

00:10:34,899 --> 00:10:39,819
want to change the software because see

00:10:37,360 --> 00:10:42,100
changing the software in any way will

00:10:39,819 --> 00:10:44,079
probably be way more dangerous than

00:10:42,100 --> 00:10:46,720
adding a line to the manual and get your

00:10:44,079 --> 00:10:51,449
your pilot to do it because pilots are

00:10:46,720 --> 00:10:54,430
very good at following instructions and

00:10:51,449 --> 00:10:57,100
so as a consequence safety people will

00:10:54,430 --> 00:10:59,410
upgrade only as a last resort safety

00:10:57,100 --> 00:11:00,000
people do not care about new features

00:10:59,410 --> 00:11:01,740
you

00:11:00,000 --> 00:11:05,430
never need new features because your

00:11:01,740 --> 00:11:07,320
product never changes and the ideas that

00:11:05,430 --> 00:11:10,530
you've just fixed bug because they're

00:11:07,320 --> 00:11:13,260
here is totally impossible it's way too

00:11:10,530 --> 00:11:16,020
dangerous and the other hand we had this

00:11:13,260 --> 00:11:18,630
morning we has a toxic keynote by Craig

00:11:16,020 --> 00:11:21,060
Cohen Hartman who told us every bug you

00:11:18,630 --> 00:11:22,740
fix is a security fix and even if you

00:11:21,060 --> 00:11:24,690
don't know it so you should take in

00:11:22,740 --> 00:11:27,420
every possible change and all way around

00:11:24,690 --> 00:11:28,320
the newest version and that makes sense

00:11:27,420 --> 00:11:30,450
too

00:11:28,320 --> 00:11:34,560
that's the big performance total your

00:11:30,450 --> 00:11:39,390
posits but both aspect makes sense so

00:11:34,560 --> 00:11:41,880
any change is a risk any change is a

00:11:39,390 --> 00:11:44,730
risk and need to be justified and any

00:11:41,880 --> 00:11:48,260
bug is a potential security weakness and

00:11:44,730 --> 00:11:51,890
needs to be fixed how do we solve that

00:11:48,260 --> 00:11:53,970
and then you have this cultural problem

00:11:51,890 --> 00:11:56,070
security Trump's everything

00:11:53,970 --> 00:11:58,400
safety trumps everything when your

00:11:56,070 --> 00:12:01,710
safety engineers tell it tells you no

00:11:58,400 --> 00:12:03,900
your products won't go out and when the

00:12:01,710 --> 00:12:06,120
security engineers tell you you need to

00:12:03,900 --> 00:12:11,100
fix that bug you need to fix that bug

00:12:06,120 --> 00:12:14,640
today and when you discuss with product

00:12:11,100 --> 00:12:16,470
managers that have products that are in

00:12:14,640 --> 00:12:18,180
the making and they're going to go out

00:12:16,470 --> 00:12:21,990
and they don't know how to deal with

00:12:18,180 --> 00:12:23,460
this they're torn because they is there

00:12:21,990 --> 00:12:25,620
allow they're literally torn apart

00:12:23,460 --> 00:12:28,589
between those two completely different

00:12:25,620 --> 00:12:31,740
consideration and how do you salsa in

00:12:28,589 --> 00:12:35,220
the embedded world historically safe

00:12:31,740 --> 00:12:37,830
safety tends to win which is one of the

00:12:35,220 --> 00:12:40,350
big reason why you don't have that many

00:12:37,830 --> 00:12:42,600
upgrades in industrial product again

00:12:40,350 --> 00:12:44,220
customer consumer products are a bit

00:12:42,600 --> 00:12:46,020
different but in industrial products

00:12:44,220 --> 00:12:48,870
you're like okay so you want to do a

00:12:46,020 --> 00:12:52,380
security fix I need six months of

00:12:48,870 --> 00:12:54,690
testing do you do we do it now or do we

00:12:52,380 --> 00:12:57,390
wait for tomorrow when you'll have three

00:12:54,690 --> 00:12:59,640
more fixes yes but that will reset our

00:12:57,390 --> 00:13:01,320
clock and we cannot wait six months

00:12:59,640 --> 00:13:05,060
because in six months you have so many

00:13:01,320 --> 00:13:05,060
new bugs around what do we do

00:13:06,269 --> 00:13:12,009
so that was safety versus securities and

00:13:09,730 --> 00:13:14,350
I need to do a side note about embedded

00:13:12,009 --> 00:13:16,839
systems and upgrading embedded systems

00:13:14,350 --> 00:13:18,489
so I kind of assume everybody here is in

00:13:16,839 --> 00:13:21,610
the embedded world but still it's

00:13:18,489 --> 00:13:23,739
important to point out that upgrading an

00:13:21,610 --> 00:13:27,759
embedded product is very different from

00:13:23,739 --> 00:13:30,549
a Grady any other product the first

00:13:27,759 --> 00:13:34,329
thing is that we need to have upgrade

00:13:30,549 --> 00:13:37,329
systems that are extremely robust I mean

00:13:34,329 --> 00:13:40,239
way more than in the data center why

00:13:37,329 --> 00:13:43,869
because if an upgrade fails a product is

00:13:40,239 --> 00:13:45,519
a brick there is sometimes you have no

00:13:43,869 --> 00:13:49,869
access to the product because the

00:13:45,519 --> 00:13:52,029
product might be might just be into your

00:13:49,869 --> 00:13:54,459
consumers hands so you don't know where

00:13:52,029 --> 00:13:56,290
they are they might not have a network

00:13:54,459 --> 00:13:57,910
access in particular if an upgrade has

00:13:56,290 --> 00:14:00,730
failed it might not have that work

00:13:57,910 --> 00:14:03,189
access anymore some products you just

00:14:00,730 --> 00:14:04,660
cannot access we had once an example of

00:14:03,189 --> 00:14:07,079
a product that when I tried that was

00:14:04,660 --> 00:14:11,350
actually literally poured into concrete

00:14:07,079 --> 00:14:13,869
so no you cannot access the hardware you

00:14:11,350 --> 00:14:16,269
need to have all cases when when your

00:14:13,869 --> 00:14:18,639
life when the life of your product is

00:14:16,269 --> 00:14:20,860
very long you have to deal with stuff

00:14:18,639 --> 00:14:23,350
that only happens once in a decade

00:14:20,860 --> 00:14:24,910
that blocks that blocks on this is a

00:14:23,350 --> 00:14:26,619
problem you cannot change the hard disk

00:14:24,910 --> 00:14:28,420
and you cannot just throw a waste of

00:14:26,619 --> 00:14:30,389
over the old hardwood this can put a new

00:14:28,420 --> 00:14:33,249
one not with embedded products

00:14:30,389 --> 00:14:36,399
conflicting configuration files that's a

00:14:33,249 --> 00:14:38,799
big problem if you have well let's call

00:14:36,399 --> 00:14:40,360
it a naive Debian based system when you

00:14:38,799 --> 00:14:43,480
upgrade packages you might have

00:14:40,360 --> 00:14:46,119
conflicting files in at a great time I

00:14:43,480 --> 00:14:50,230
had that one on et CSS tab on a product

00:14:46,119 --> 00:14:52,269
and it drags the product so you need

00:14:50,230 --> 00:14:55,029
even if you have a per package upgrade

00:14:52,269 --> 00:14:57,850
you need a way to get back to a

00:14:55,029 --> 00:15:01,660
completely well-known state that might

00:14:57,850 --> 00:15:04,329
not be useful but it which is safe and

00:15:01,660 --> 00:15:07,809
is able to upgrade the product back into

00:15:04,329 --> 00:15:09,220
a good state you need to do that when

00:15:07,809 --> 00:15:11,649
you upgrade you want to keep user

00:15:09,220 --> 00:15:14,910
configuration it means that your new

00:15:11,649 --> 00:15:18,610
system has to be able to read the old

00:15:14,910 --> 00:15:19,760
configuration with all the problems of

00:15:18,610 --> 00:15:21,470
upgrading that config

00:15:19,760 --> 00:15:23,210
and having a problem in having to

00:15:21,470 --> 00:15:24,920
downgrade the configuration to get back

00:15:23,210 --> 00:15:28,180
to the previous version stuff like that

00:15:24,920 --> 00:15:30,980
and last you need to be able to upgrade

00:15:28,180 --> 00:15:33,350
everything maybe not the first stage

00:15:30,980 --> 00:15:35,150
nuke loader but about everything else

00:15:33,350 --> 00:15:37,520
which means you need to upgrade your

00:15:35,150 --> 00:15:39,140
kernel which means that containers are

00:15:37,520 --> 00:15:41,120
not a complete solution because

00:15:39,140 --> 00:15:43,040
containers do not upgrade the kernel

00:15:41,120 --> 00:15:45,740
they share the kernel the kernel is

00:15:43,040 --> 00:15:48,170
always on the host so even if you want

00:15:45,740 --> 00:15:49,790
to upgrade to have your whole system

00:15:48,170 --> 00:15:51,410
container based and just a great

00:15:49,790 --> 00:15:53,510
container per container per container

00:15:51,410 --> 00:15:56,240
which is easier because a container is

00:15:53,510 --> 00:15:57,590
more or less a single file you still

00:15:56,240 --> 00:16:00,050
need to have a way to upgrade your

00:15:57,590 --> 00:16:03,050
kernel and the kernel upgrades can fail

00:16:00,050 --> 00:16:04,880
and when an upgrade fail your system has

00:16:03,050 --> 00:16:07,990
to have a way to get back on its feet on

00:16:04,880 --> 00:16:11,570
its own so the cool upgrade problem is

00:16:07,990 --> 00:16:14,630
complicated some systems can stop

00:16:11,570 --> 00:16:16,430
fortunately few of the most embedded

00:16:14,630 --> 00:16:20,840
system don't have that sort of

00:16:16,430 --> 00:16:23,720
constraint but some systems have safety

00:16:20,840 --> 00:16:25,820
critical or vital features that you just

00:16:23,720 --> 00:16:27,590
cannot stop during an upgrade so they

00:16:25,820 --> 00:16:29,450
have to have some sort usually a

00:16:27,590 --> 00:16:31,940
secondary microcontroller which will

00:16:29,450 --> 00:16:34,490
just keep the breathing system working

00:16:31,940 --> 00:16:35,960
while you upgrade the main system is the

00:16:34,490 --> 00:16:37,610
main upgrade system field and the

00:16:35,960 --> 00:16:40,100
breathing system has to works on its own

00:16:37,610 --> 00:16:42,800
until someone goes for the beep and

00:16:40,100 --> 00:16:45,260
replace the product or something but

00:16:42,800 --> 00:16:49,180
that means that even rebooting on an

00:16:45,260 --> 00:16:52,280
embedded system can be very hard

00:16:49,180 --> 00:16:53,810
you can't phase-out Hardware I mean

00:16:52,280 --> 00:16:55,730
that's also a big problem is once you

00:16:53,810 --> 00:16:58,490
sell a product how long must you

00:16:55,730 --> 00:17:01,030
maintain it as long as you have a

00:16:58,490 --> 00:17:04,010
consumer using it how long is that it

00:17:01,030 --> 00:17:06,199
can be 5 years for some products it can

00:17:04,010 --> 00:17:09,410
be 20 years for other products so you

00:17:06,199 --> 00:17:11,540
need to have back if you do an upgrade

00:17:09,410 --> 00:17:14,270
to new version of software you need to

00:17:11,540 --> 00:17:17,000
have it be backward compatible to the

00:17:14,270 --> 00:17:20,300
first version of your hardware issued

00:17:17,000 --> 00:17:22,339
product works for 20 years we're in 2019

00:17:20,300 --> 00:17:24,920
it means that you have you would still

00:17:22,339 --> 00:17:28,310
have to support hardware where hardware

00:17:24,920 --> 00:17:30,300
from the years 2000 it's getting

00:17:28,310 --> 00:17:35,660
complicated because that would be three

00:17:30,300 --> 00:17:40,190
six 386 support in linux is phasing out

00:17:35,660 --> 00:17:40,190
how do you do how do you deal with that

00:17:41,390 --> 00:17:47,550
deployment time is hard deployment time

00:17:45,240 --> 00:17:50,340
can be controlled by the user when will

00:17:47,550 --> 00:17:53,040
your user turn your product on who knows

00:17:50,340 --> 00:17:54,870
so once you have the upgrade available

00:17:53,040 --> 00:17:56,850
on your servers how long will it takes

00:17:54,870 --> 00:17:59,520
for every instance of your product to go

00:17:56,850 --> 00:18:01,680
to be updated I don't know I had some

00:17:59,520 --> 00:18:03,900
consumers who are some customers where

00:18:01,680 --> 00:18:06,750
we were discussing then told me yeah any

00:18:03,900 --> 00:18:12,690
upgrade six months to certify six months

00:18:06,750 --> 00:18:15,450
to deploy it's kind of long and yeah

00:18:12,690 --> 00:18:17,730
very long-term support means you can't

00:18:15,450 --> 00:18:19,320
trust anybody you can trust your

00:18:17,730 --> 00:18:22,020
subcontractors so that's a bit of a

00:18:19,320 --> 00:18:24,480
problem if you go with there are lots of

00:18:22,020 --> 00:18:26,670
companies that provide the base system

00:18:24,480 --> 00:18:28,680
for embedded products and we'll deal

00:18:26,670 --> 00:18:31,560
with you upgrades for you will they

00:18:28,680 --> 00:18:33,270
survive as long as your product you can

00:18:31,560 --> 00:18:36,420
trust your technologies it's what I said

00:18:33,270 --> 00:18:40,200
about 386 on Linux how long will they

00:18:36,420 --> 00:18:43,380
support your hardware it's hard and your

00:18:40,200 --> 00:18:45,030
whole team will change it's not all I'm

00:18:43,380 --> 00:18:47,550
putting it as it you can trust your

00:18:45,030 --> 00:18:49,860
engineers to survive but people retire

00:18:47,550 --> 00:18:52,320
people approaching job are people simply

00:18:49,860 --> 00:18:55,440
don't want to spend 20 years on the same

00:18:52,320 --> 00:18:57,840
project so your whole team will change

00:18:55,440 --> 00:19:03,540
during the life of your product and you

00:18:57,840 --> 00:19:06,750
need to deal with that and it's hard so

00:19:03,540 --> 00:19:09,750
that was about upgrade security in the

00:19:06,750 --> 00:19:12,930
embedded world is also pretty different

00:19:09,750 --> 00:19:14,730
from security the one you have in the

00:19:12,930 --> 00:19:19,830
literature which is mainly based on the

00:19:14,730 --> 00:19:22,140
data center problems because we have our

00:19:19,830 --> 00:19:24,510
products in different places so physical

00:19:22,140 --> 00:19:26,400
access can't be restricted it always

00:19:24,510 --> 00:19:29,310
depends on the products but some

00:19:26,400 --> 00:19:32,220
products are just out in the street so

00:19:29,310 --> 00:19:34,470
you need secure boot you need to make

00:19:32,220 --> 00:19:36,600
sure that only sign code can be booted

00:19:34,470 --> 00:19:38,400
because people will go around and open

00:19:36,600 --> 00:19:40,860
the hardware and steal their hardware

00:19:38,400 --> 00:19:42,660
and looks inside so

00:19:40,860 --> 00:19:44,760
makes things very complete dedicated

00:19:42,660 --> 00:19:46,440
from a product management point of view

00:19:44,760 --> 00:19:48,559
because each product has to have a

00:19:46,440 --> 00:19:51,150
unique key because it's um if someone

00:19:48,559 --> 00:19:53,250
hacks into one product and the product

00:19:51,150 --> 00:19:55,920
is the same has the same keys and every

00:19:53,250 --> 00:19:58,380
other product he has corrupted the whole

00:19:55,920 --> 00:20:00,480
line of product so you can't do that so

00:19:58,380 --> 00:20:02,160
you might need there are multiple ways

00:20:00,480 --> 00:20:04,860
of dealings with that but you might need

00:20:02,160 --> 00:20:07,500
a unique image per product which mean

00:20:04,860 --> 00:20:08,820
redoing your image instead of simply

00:20:07,500 --> 00:20:11,640
flashing them that makes very

00:20:08,820 --> 00:20:15,870
complicated factory processes that you

00:20:11,640 --> 00:20:17,640
have to deal with very complicated is

00:20:15,870 --> 00:20:19,650
the problem of a return to a trusted

00:20:17,640 --> 00:20:22,470
saz's so you have your product in the

00:20:19,650 --> 00:20:24,240
wild and for various reasons someone

00:20:22,470 --> 00:20:26,640
attacks your products and so someone

00:20:24,240 --> 00:20:30,030
takes over your product how do you get

00:20:26,640 --> 00:20:33,030
it back when you're in a data center you

00:20:30,030 --> 00:20:35,669
just stop the machines reformat with an

00:20:33,030 --> 00:20:38,910
reinstalled newer software and restart

00:20:35,669 --> 00:20:42,650
it on the embedded world what part of

00:20:38,910 --> 00:20:45,900
the software stack can still be trusted

00:20:42,650 --> 00:20:48,750
it's hard you the first idea would be

00:20:45,900 --> 00:20:50,400
well I have some very rich boot loaders

00:20:48,750 --> 00:20:53,790
like you boot which can do absolutely

00:20:50,400 --> 00:20:56,549
everything you boot could be is able to

00:20:53,790 --> 00:20:58,410
reinstall a Linux from a known image

00:20:56,549 --> 00:21:00,780
somewhere you would can totally do that

00:20:58,410 --> 00:21:03,270
yes but boot loaders attacks are things

00:21:00,780 --> 00:21:05,040
so you need to protect your you boot and

00:21:03,270 --> 00:21:06,900
if someone takes over Linux he can

00:21:05,040 --> 00:21:10,679
basically write wherever he wants in

00:21:06,900 --> 00:21:12,870
memory so he can attack your new boot J

00:21:10,679 --> 00:21:14,580
tags attack are things so the other idea

00:21:12,870 --> 00:21:18,240
would be let's plug some hardware and

00:21:14,580 --> 00:21:21,240
have some some way to upgrade via a JTAG

00:21:18,240 --> 00:21:23,190
for instance but if you have a JTAG port

00:21:21,240 --> 00:21:25,440
out people will use it

00:21:23,190 --> 00:21:30,450
so most embedded processor you can

00:21:25,440 --> 00:21:34,890
actually use an article how hardware

00:21:30,450 --> 00:21:36,210
software switches to deactivate entirely

00:21:34,890 --> 00:21:38,520
and once and for all

00:21:36,210 --> 00:21:40,500
JTAG so you can do that but in that case

00:21:38,520 --> 00:21:43,470
you cannot get your product back by

00:21:40,500 --> 00:21:45,510
refreshing the eject act so the only way

00:21:43,470 --> 00:21:48,270
which is kind of safe is having your

00:21:45,510 --> 00:21:49,100
first stage of boot and your known good

00:21:48,270 --> 00:21:51,770
image being

00:21:49,100 --> 00:21:54,679
ramaa so you can reinstall from ROM and

00:21:51,770 --> 00:21:57,020
you hope that nobody will have attacks

00:21:54,679 --> 00:21:58,880
that actually corrupt the image on the

00:21:57,020 --> 00:22:02,120
run once it's reinstall or you have a

00:21:58,880 --> 00:22:04,160
way to make it good again but wrong are

00:22:02,120 --> 00:22:06,919
expensive and in the embedded world

00:22:04,160 --> 00:22:09,860
anything that ends on the bill of

00:22:06,919 --> 00:22:11,900
material will be scrutinized so it might

00:22:09,860 --> 00:22:15,200
be a few more dollar on your board but a

00:22:11,900 --> 00:22:20,090
few more dollar can be a huge difference

00:22:15,200 --> 00:22:22,070
and you will also being working against

00:22:20,090 --> 00:22:25,130
the culture because again there is no

00:22:22,070 --> 00:22:27,710
upgrade culture in the embedded world

00:22:25,130 --> 00:22:30,260
that's mainly because most embedded

00:22:27,710 --> 00:22:33,650
products are products that have been

00:22:30,260 --> 00:22:36,890
around for a very long time but the idea

00:22:33,650 --> 00:22:38,659
of having a computer inside is you I

00:22:36,890 --> 00:22:41,240
mean if you take I don't know air

00:22:38,659 --> 00:22:44,299
conditioners we've had air conditioners

00:22:41,240 --> 00:22:46,100
for four years and right now every air

00:22:44,299 --> 00:22:48,530
conditioner manufacturer is considering

00:22:46,100 --> 00:22:50,090
adding a small Raspberry Pi type board

00:22:48,530 --> 00:22:52,370
inside so you can control with your

00:22:50,090 --> 00:22:53,840
phone and all that kind of stuff that

00:22:52,370 --> 00:22:57,799
means that those people who are

00:22:53,840 --> 00:22:59,510
mechanics suddenly they have to handle

00:22:57,799 --> 00:23:01,580
all the problems of dealing with the

00:22:59,510 --> 00:23:03,650
distribution with software upgrades with

00:23:01,580 --> 00:23:05,210
with the lifetime of the different

00:23:03,650 --> 00:23:08,480
products they have inside when it's a

00:23:05,210 --> 00:23:10,010
building sized air conditioner it means

00:23:08,480 --> 00:23:14,630
that which will it will stay in the

00:23:10,010 --> 00:23:18,200
building for 3050 years and they have no

00:23:14,630 --> 00:23:19,250
idea how to do it it's not their culture

00:23:18,200 --> 00:23:22,760
it's not their job

00:23:19,250 --> 00:23:24,980
and again they and on the other hand you

00:23:22,760 --> 00:23:27,980
have all sorts of startups that have

00:23:24,980 --> 00:23:29,809
great ideas for embedded products but

00:23:27,980 --> 00:23:31,789
they don't think long term and that

00:23:29,809 --> 00:23:33,590
makes sense when you're starting when

00:23:31,789 --> 00:23:37,010
you're startup you don't prepare for the

00:23:33,590 --> 00:23:38,539
30 next years because that's a waste of

00:23:37,010 --> 00:23:40,190
money in a way because you don't know if

00:23:38,539 --> 00:23:42,530
your survives that long and it's

00:23:40,190 --> 00:23:45,409
expensive and that has no real point so

00:23:42,530 --> 00:23:48,080
both sides mean that from the start it's

00:23:45,409 --> 00:23:51,230
hard to have something ready for

00:23:48,080 --> 00:23:55,280
upgraded it's hard to have people that

00:23:51,230 --> 00:23:57,290
are thinking in terms of upgrades so at

00:23:55,280 --> 00:23:59,240
some point when you're developing your

00:23:57,290 --> 00:24:01,320
your embedded product and you're

00:23:59,240 --> 00:24:03,240
thinking about upgrades and how to

00:24:01,320 --> 00:24:07,700
where's upgrade you have this hard

00:24:03,240 --> 00:24:10,500
choice bricked or pund do you do I put

00:24:07,700 --> 00:24:12,570
security first which means that at some

00:24:10,500 --> 00:24:16,140
point the product will be lost because

00:24:12,570 --> 00:24:18,210
of an attack or do I leave some sort of

00:24:16,140 --> 00:24:20,700
door for my malevolent

00:24:18,210 --> 00:24:22,290
which means that he will take over but

00:24:20,700 --> 00:24:23,760
at least the product has maybe a small

00:24:22,290 --> 00:24:27,870
chance of still working at least

00:24:23,760 --> 00:24:30,620
partially and you know when I go to my

00:24:27,870 --> 00:24:33,600
customers and as I ask them the question

00:24:30,620 --> 00:24:35,700
there is a big blank because nobody want

00:24:33,600 --> 00:24:37,230
to think about that and those are real

00:24:35,700 --> 00:24:39,770
problems in the embedded world you

00:24:37,230 --> 00:24:45,690
cannot get your machine back once its

00:24:39,770 --> 00:24:50,340
corrupted so then you have the security

00:24:45,690 --> 00:24:51,960
update so first when you go to big

00:24:50,340 --> 00:24:53,970
industrial with people like that and you

00:24:51,960 --> 00:24:55,140
ask them how often do you think you need

00:24:53,970 --> 00:24:56,490
to upgrade their products that they will

00:24:55,140 --> 00:25:00,600
tell you oh it's pretty easy

00:24:56,490 --> 00:25:02,250
we monitor CVS let's go back to this

00:25:00,600 --> 00:25:04,680
morning's discussion but we money

00:25:02,250 --> 00:25:06,270
towards TV and we look over every patch

00:25:04,680 --> 00:25:07,890
and when there is one which affects our

00:25:06,270 --> 00:25:10,410
product then we back for it and we do in

00:25:07,890 --> 00:25:14,730
your release ok how do you think this

00:25:10,410 --> 00:25:17,520
will happen Oh once a year maybe that's

00:25:14,730 --> 00:25:20,580
not so as needed as in when there is a

00:25:17,520 --> 00:25:22,830
vulnerability just does not send it as a

00:25:20,580 --> 00:25:27,240
test of rail this isn't so looking

00:25:22,830 --> 00:25:30,270
around at big embedded makers how often

00:25:27,240 --> 00:25:33,180
do they upgrade Android monthly security

00:25:30,270 --> 00:25:35,130
update Windows monthly security Linux it

00:25:33,180 --> 00:25:37,080
depends a lot some of your distribution

00:25:35,130 --> 00:25:38,760
but usually it's more or less rolling a

00:25:37,080 --> 00:25:39,900
release type of thing basically which

00:25:38,760 --> 00:25:42,690
upgrades on its own

00:25:39,900 --> 00:25:45,920
iOS it's more or less as needed but it

00:25:42,690 --> 00:25:48,120
turns around a bonsly you're great so

00:25:45,920 --> 00:25:50,520
best practices when you look around

00:25:48,120 --> 00:25:53,460
seems to be you need to upgrade your

00:25:50,520 --> 00:25:57,000
product monthly and that's a

00:25:53,460 --> 00:26:01,640
a good thing except recertifying is long

00:25:57,000 --> 00:26:01,640
when it takes six months how do I do it

00:26:02,060 --> 00:26:08,280
yes but if it takes six months my

00:26:05,190 --> 00:26:10,590
vulnerability window is huge

00:26:08,280 --> 00:26:12,450
it's humongous I mean it's it's free

00:26:10,590 --> 00:26:14,790
it's a free party for people who want to

00:26:12,450 --> 00:26:16,770
attack and against once someone has

00:26:14,790 --> 00:26:21,930
corrupting it's a product you cannot get

00:26:16,770 --> 00:26:27,540
it back so when we look at things from

00:26:21,930 --> 00:26:30,000
both sides both sides has very good and

00:26:27,540 --> 00:26:32,940
very strict processes that are justified

00:26:30,000 --> 00:26:34,740
by years of good practice both sides

00:26:32,940 --> 00:26:38,430
have this very strong argument that

00:26:34,740 --> 00:26:40,110
their way of doing things works but they

00:26:38,430 --> 00:26:42,420
works only because they are very

00:26:40,110 --> 00:26:45,060
strictly followed you can't do half

00:26:42,420 --> 00:26:48,720
security have safety you will get none

00:26:45,060 --> 00:26:51,060
and they work they're effective and what

00:26:48,720 --> 00:26:53,820
they are meant to do so completely

00:26:51,060 --> 00:26:55,740
opposite we have speak critical vs.

00:26:53,820 --> 00:26:58,070
confidence critical proactive versus

00:26:55,740 --> 00:27:02,070
reactive and preventive versus proven

00:26:58,070 --> 00:27:06,540
okay so just they're completely pulling

00:27:02,070 --> 00:27:09,330
in different directions so I have no

00:27:06,540 --> 00:27:11,610
magic for you I don't know how to do

00:27:09,330 --> 00:27:13,890
both and I don't think it's possible to

00:27:11,610 --> 00:27:18,690
do both with the way they are working

00:27:13,890 --> 00:27:21,270
currently so to finish we'll have a look

00:27:18,690 --> 00:27:24,780
at way we can mitigate the problem how

00:27:21,270 --> 00:27:26,820
to make safety faster how to get

00:27:24,780 --> 00:27:31,970
security to work better with safety

00:27:26,820 --> 00:27:35,700
critical software that sort of things so

00:27:31,970 --> 00:27:38,660
we can avoid probably the problem

00:27:35,700 --> 00:27:41,790
entirely not all product or safety

00:27:38,660 --> 00:27:43,710
critical but any ok let's say any

00:27:41,790 --> 00:27:46,410
connected product needs to care about

00:27:43,710 --> 00:27:49,860
security so is your product safety

00:27:46,410 --> 00:27:52,380
critical or is it some sort of remnant

00:27:49,860 --> 00:27:55,290
culture from previous products but that

00:27:52,380 --> 00:27:59,010
makes no sense now they that works both

00:27:55,290 --> 00:28:01,170
way if you're a security person will my

00:27:59,010 --> 00:28:04,530
product be attacked by an advanced

00:28:01,170 --> 00:28:05,610
persistent threat probably not so maybe

00:28:04,530 --> 00:28:08,429
you don't need

00:28:05,610 --> 00:28:11,070
all the security level you can put in

00:28:08,429 --> 00:28:15,120
and at some point there is some balance

00:28:11,070 --> 00:28:17,340
to do and there is to find out what

00:28:15,120 --> 00:28:20,070
levels of security you want because high

00:28:17,340 --> 00:28:21,960
level of security is proportionally way

00:28:20,070 --> 00:28:24,720
more expensive in the embedded world

00:28:21,960 --> 00:28:27,540
because because of the wait works and

00:28:24,720 --> 00:28:29,850
there is we have but whatever your

00:28:27,540 --> 00:28:32,370
choice you will need a robust upgrade

00:28:29,850 --> 00:28:37,770
system because breaking is a big problem

00:28:32,370 --> 00:28:40,370
with a great systems a good way to do it

00:28:37,770 --> 00:28:42,750
but it's also not that easy is to have

00:28:40,370 --> 00:28:46,850
recertification go faster

00:28:42,750 --> 00:28:49,290
that's a cultural problem in the

00:28:46,850 --> 00:28:51,960
certification world as certification

00:28:49,290 --> 00:28:54,630
works really well it has some very well

00:28:51,960 --> 00:28:57,870
tested processes that have been around

00:28:54,630 --> 00:29:01,350
for decades and that nobody wants to

00:28:57,870 --> 00:29:05,700
touch because they work so stuff like

00:29:01,350 --> 00:29:08,030
automated testing is minimal ok so there

00:29:05,700 --> 00:29:11,160
is probably ways to accelerate

00:29:08,030 --> 00:29:14,490
certification by automating more stuff

00:29:11,160 --> 00:29:16,860
and making sure that automated testing

00:29:14,490 --> 00:29:19,740
is acceptable by the certification

00:29:16,860 --> 00:29:21,750
Authority and that's not a luxury that's

00:29:19,740 --> 00:29:24,419
not about saving cost because usually in

00:29:21,750 --> 00:29:26,220
safety critical application they they

00:29:24,419 --> 00:29:29,610
factor in the cost of certification it's

00:29:26,220 --> 00:29:31,830
about being able to certify faster for

00:29:29,610 --> 00:29:33,840
security reasons ok

00:29:31,830 --> 00:29:36,330
you could that's something you need to

00:29:33,840 --> 00:29:38,880
discuss with your safety office is your

00:29:36,330 --> 00:29:41,059
safety engineer but you might want to

00:29:38,880 --> 00:29:43,980
have some sort of fast pass

00:29:41,059 --> 00:29:48,090
recertification for security problems in

00:29:43,980 --> 00:29:50,100
a network facing areas not the whole

00:29:48,090 --> 00:29:52,410
product some parts of the product will

00:29:50,100 --> 00:29:54,900
be safety first other parts will be

00:29:52,410 --> 00:29:57,590
security first maybe you can only have

00:29:54,900 --> 00:30:00,299
different upgrade passes as far as as

00:29:57,590 --> 00:30:04,740
recertification works for your security

00:30:00,299 --> 00:30:06,600
critical parts and minimize the safety

00:30:04,740 --> 00:30:08,760
critical parameter that's something

00:30:06,600 --> 00:30:12,090
safety people tend to do anyway because

00:30:08,760 --> 00:30:14,540
of cost but again it's a good thing try

00:30:12,090 --> 00:30:18,510
to reduce how much is safety critical

00:30:14,540 --> 00:30:19,130
and then you have everything that is

00:30:18,510 --> 00:30:22,310
that you

00:30:19,130 --> 00:30:25,070
use two completely separate safety and

00:30:22,310 --> 00:30:27,650
security so the three most obvious way

00:30:25,070 --> 00:30:30,890
of doing it are containers hypervisors

00:30:27,650 --> 00:30:33,220
and good old hardware separation the

00:30:30,890 --> 00:30:37,490
three of them we see in the industry

00:30:33,220 --> 00:30:39,800
containers is interesting but you will

00:30:37,490 --> 00:30:42,590
tend to but if they have the problem of

00:30:39,800 --> 00:30:45,440
the kernel which is common and this is

00:30:42,590 --> 00:30:47,540
safety critical so you can't upgrade

00:30:45,440 --> 00:30:51,020
your kernel it's pretty useful because

00:30:47,540 --> 00:30:53,900
it means that the network facing parts

00:30:51,020 --> 00:30:55,670
can be in a container so your firewall

00:30:53,900 --> 00:30:58,700
you could upgrade separated for instance

00:30:55,670 --> 00:31:00,860
but you still have some parts that will

00:30:58,700 --> 00:31:02,690
stay safety critical but it's cheap and

00:31:00,860 --> 00:31:04,700
containers are now a well-known

00:31:02,690 --> 00:31:06,980
technology hypervisors

00:31:04,700 --> 00:31:09,530
get it one level lower but basically you

00:31:06,980 --> 00:31:12,140
have your safety critical minimal OS on

00:31:09,530 --> 00:31:14,750
one side and a linux which protects the

00:31:12,140 --> 00:31:16,550
network on the other side that's mainly

00:31:14,750 --> 00:31:18,170
how it works that's pretty good because

00:31:16,550 --> 00:31:20,990
it means that you can upgrade your whole

00:31:18,170 --> 00:31:23,930
Linux kernel included usually but the

00:31:20,990 --> 00:31:27,460
hypervisor is now a safety critical part

00:31:23,930 --> 00:31:30,170
so it's easier because you will have few

00:31:27,460 --> 00:31:32,570
hopefully few security problems it's a

00:31:30,170 --> 00:31:34,670
hypervisor so you've reduced the problem

00:31:32,570 --> 00:31:37,930
you met you might might still have some

00:31:34,670 --> 00:31:41,570
and you have to prove your hypervisors

00:31:37,930 --> 00:31:43,340
which is hard and then hardware

00:31:41,570 --> 00:31:48,800
separation which basically mean you have

00:31:43,340 --> 00:31:50,390
two core CPU and many ways of doing it

00:31:48,800 --> 00:31:52,640
but basically you completely separate

00:31:50,390 --> 00:31:54,500
the hardware and that's the best

00:31:52,640 --> 00:31:59,240
solution but it has another problem it's

00:31:54,500 --> 00:32:01,550
expensive and as I said on mass-produced

00:31:59,240 --> 00:32:03,020
products every dollar counts and the

00:32:01,550 --> 00:32:04,940
reason why people are considering

00:32:03,020 --> 00:32:08,420
hypervisors and containers in the

00:32:04,940 --> 00:32:10,190
embedded space is mainly cost if you had

00:32:08,420 --> 00:32:12,290
infinite money you would just put more

00:32:10,190 --> 00:32:14,720
Hardware on a throw more hardware is a

00:32:12,290 --> 00:32:19,370
problem and you'd be done but that's not

00:32:14,720 --> 00:32:22,940
how it works and then the big part is

00:32:19,370 --> 00:32:25,880
how is to plan for security updates

00:32:22,940 --> 00:32:29,450
that's the cultural answer the problem

00:32:25,880 --> 00:32:32,209
we have is not just that we don't have

00:32:29,450 --> 00:32:35,539
security update mechanism salon better

00:32:32,209 --> 00:32:37,459
products nowadays all projects all

00:32:35,539 --> 00:32:39,979
embedded projects have some sort of

00:32:37,459 --> 00:32:42,979
security update mechanisms are not all

00:32:39,979 --> 00:32:46,369
out yet but that that problem is solved

00:32:42,979 --> 00:32:48,499
people want a date system but most of my

00:32:46,369 --> 00:32:52,690
customers have Update systems and don't

00:32:48,499 --> 00:32:55,729
have a team for maintenance so you need

00:32:52,690 --> 00:32:57,849
to plan that beforehand you have to have

00:32:55,729 --> 00:33:01,219
an agenda a maintenance product and

00:32:57,849 --> 00:33:03,859
because you need to control costs you

00:33:01,219 --> 00:33:06,139
need to have a documented and off life

00:33:03,859 --> 00:33:08,629
for your product at some point you will

00:33:06,139 --> 00:33:11,029
have to kill your product and if yours

00:33:08,629 --> 00:33:13,609
if you surprise your customer you'll get

00:33:11,029 --> 00:33:15,829
a bad reputation for it if you plan it

00:33:13,609 --> 00:33:17,719
from the start of the product and you

00:33:15,829 --> 00:33:20,899
tell your customer about it from the

00:33:17,719 --> 00:33:22,789
start you will just be following your

00:33:20,899 --> 00:33:27,489
planning and it's a public planning and

00:33:22,789 --> 00:33:30,979
it won't give you bad reputation and

00:33:27,489 --> 00:33:33,409
there we have it that's basically what I

00:33:30,979 --> 00:33:35,690
see from the reaction of the people I

00:33:33,409 --> 00:33:37,700
talk to about security versus safety and

00:33:35,690 --> 00:33:40,519
how why people just are afraid of

00:33:37,700 --> 00:33:43,070
upgrading why why in the embedded world

00:33:40,519 --> 00:33:45,139
we tend to have very very old software

00:33:43,070 --> 00:33:47,059
it's not just a problem of doing the

00:33:45,139 --> 00:33:50,059
upgrade or doing the maintenance it's

00:33:47,059 --> 00:33:52,099
also a fear of new features and that's

00:33:50,059 --> 00:33:55,190
something we need to understand in order

00:33:52,099 --> 00:33:56,820
to be able to talk about it thank you

00:33:55,190 --> 00:34:00,000
any questions

00:33:56,820 --> 00:34:00,000

YouTube URL: https://www.youtube.com/watch?v=Tte8PKDVp-Y


