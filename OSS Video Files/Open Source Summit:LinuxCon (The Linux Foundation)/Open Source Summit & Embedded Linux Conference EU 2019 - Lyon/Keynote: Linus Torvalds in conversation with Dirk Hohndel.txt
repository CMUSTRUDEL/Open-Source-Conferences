Title: Keynote: Linus Torvalds in conversation with Dirk Hohndel
Publication date: 2019-10-29
Playlist: Open Source Summit & Embedded Linux Conference EU 2019 - Lyon
Description: 
	Keynote: Linus Torvalds, Creator of Linux & Git, in conversation with Dirk Hohndel, VP & Chief Open Source Officer, VMware
Captions: 
	00:00:00,030 --> 00:00:04,350
good morning everyone wow it's right

00:00:01,920 --> 00:00:06,480
here after sitting here in the nice dark

00:00:04,350 --> 00:00:08,670
side this is quite a change so my name

00:00:06,480 --> 00:00:10,500
is Dirk Wankel I'm I'm BMS chief

00:00:08,670 --> 00:00:12,509
open-source officer been around

00:00:10,500 --> 00:00:14,340
open-source for nearly 30 years actually

00:00:12,509 --> 00:00:19,439
over 30 years now that I think about it

00:00:14,340 --> 00:00:21,900
and you are and I'm Linus and many of

00:00:19,439 --> 00:00:23,279
you may have seen the so-called Dirk and

00:00:21,900 --> 00:00:26,550
Lena's show

00:00:23,279 --> 00:00:28,710
I don't do speeches anymore I hate doing

00:00:26,550 --> 00:00:32,189
that so we tend to have this kind of

00:00:28,710 --> 00:00:34,739
fireside chat thing going where Dirk

00:00:32,189 --> 00:00:36,030
asks questions that he thinks you are

00:00:34,739 --> 00:00:37,950
interested in and we'll see how that

00:00:36,030 --> 00:00:40,079
goes great throwing me under the bus

00:00:37,950 --> 00:00:41,879
thank you there and and we have no

00:00:40,079 --> 00:00:45,149
artificial fire behind us this time

00:00:41,879 --> 00:00:46,860
which I'm very thankful for so my first

00:00:45,149 --> 00:00:52,050
question is always the same only the

00:00:46,860 --> 00:00:55,199
number changes so 5.4 rc5 there's still

00:00:52,050 --> 00:00:57,270
a lot of churn it's pretty big it's this

00:00:55,199 --> 00:01:00,629
whirring it sorry I'll be on the right

00:00:57,270 --> 00:01:02,280
track is this a normal release it's so

00:01:00,629 --> 00:01:04,739
if I point for it was actually odd

00:01:02,280 --> 00:01:09,930
because it was smaller than than usual

00:01:04,739 --> 00:01:13,640
for the first few our seats and and

00:01:09,930 --> 00:01:16,799
that's usually a good sign it means that

00:01:13,640 --> 00:01:18,360
we just didn't have a lot of churn and

00:01:16,799 --> 00:01:21,869
we didn't have a lot of changes that

00:01:18,360 --> 00:01:23,670
then made people find bugs and then

00:01:21,869 --> 00:01:25,619
something happened last week at last

00:01:23,670 --> 00:01:29,220
week we're back to normal and slightly

00:01:25,619 --> 00:01:31,470
above normal and and it doesn't worry me

00:01:29,220 --> 00:01:33,270
because maybe there was a lull for some

00:01:31,470 --> 00:01:36,479
reason for a couple of weeks and now

00:01:33,270 --> 00:01:38,790
we're catching up but this might be if

00:01:36,479 --> 00:01:40,710
if this trend continues it might be one

00:01:38,790 --> 00:01:43,950
of those releases where we take an extra

00:01:40,710 --> 00:01:46,020
week to make sure everything is calm and

00:01:43,950 --> 00:01:48,960
we found all the problems but there's

00:01:46,020 --> 00:01:51,390
nothing special on odd going on per se

00:01:48,960 --> 00:01:54,180
it might just be a timing issue but

00:01:51,390 --> 00:01:56,399
talking about odd things so in the last

00:01:54,180 --> 00:01:59,130
kernel release we had this really odd

00:01:56,399 --> 00:02:03,149
bug where a change to a file system

00:01:59,130 --> 00:02:07,170
causes boot hangs on on some platforms

00:02:03,149 --> 00:02:09,479
and we see a lot more of these complex

00:02:07,170 --> 00:02:11,580
deep system interactions that are

00:02:09,479 --> 00:02:15,330
incredibly hard to debug and

00:02:11,580 --> 00:02:18,750
is Linux as a system becoming so complex

00:02:15,330 --> 00:02:23,190
that the testability is starting to to

00:02:18,750 --> 00:02:27,300
be very simple I don't feel that I feel

00:02:23,190 --> 00:02:30,180
that the fact that 5.3 had this very odd

00:02:27,300 --> 00:02:33,330
bug at the end that we just punted on

00:02:30,180 --> 00:02:36,720
and we solve it in the 5.4 release cycle

00:02:33,330 --> 00:02:39,750
I think that's more of a sign that we

00:02:36,720 --> 00:02:43,920
have fewer of the obvious bugs so the

00:02:39,750 --> 00:02:46,650
bugs that then get noticed are just more

00:02:43,920 --> 00:02:49,670
subtle because we have better testing

00:02:46,650 --> 00:02:53,610
infrastructure we have a lot better

00:02:49,670 --> 00:02:57,210
tools for both dynamic and Static

00:02:53,610 --> 00:03:01,080
checking all the sources and our process

00:02:57,210 --> 00:03:03,930
has been pretty good at figuring out the

00:03:01,080 --> 00:03:06,750
the obvious bugs long before they even

00:03:03,930 --> 00:03:10,400
hit my kernel and that obviously that

00:03:06,750 --> 00:03:13,080
means that that the bugs we do hit are

00:03:10,400 --> 00:03:15,840
often these subtle interactions between

00:03:13,080 --> 00:03:18,150
two subsystems often things that only

00:03:15,840 --> 00:03:20,280
happen on certain platforms and certain

00:03:18,150 --> 00:03:21,810
hardware platforms and also certainly

00:03:20,280 --> 00:03:24,000
usages

00:03:21,810 --> 00:03:29,580
it doesn't really I think that's a good

00:03:24,000 --> 00:03:31,410
sign in general it just means that we do

00:03:29,580 --> 00:03:33,270
the basics fairly well and then

00:03:31,410 --> 00:03:34,770
occasionally you hit something it is a

00:03:33,270 --> 00:03:37,380
complex system don't get me wrong

00:03:34,770 --> 00:03:40,650
so there will be these interaction bugs

00:03:37,380 --> 00:03:43,410
that that happened but we mean RT

00:03:40,650 --> 00:03:46,170
real-time extensions are finally almost

00:03:43,410 --> 00:03:48,840
merged and we are talking about the end

00:03:46,170 --> 00:03:51,840
of the or it's a 10-year journey of

00:03:48,840 --> 00:03:56,790
getting this in more than 10 years no I

00:03:51,840 --> 00:04:01,320
was being generous but and with that we

00:03:56,790 --> 00:04:03,600
see increased focus on using Linux in in

00:04:01,320 --> 00:04:06,350
safety critical systems whether it's in

00:04:03,600 --> 00:04:09,630
cars or in avionics or whatnot

00:04:06,350 --> 00:04:12,120
isn't this this increased complexity and

00:04:09,630 --> 00:04:14,610
the subtlety of these bugs something

00:04:12,120 --> 00:04:16,799
that is worrying in the context of RT in

00:04:14,610 --> 00:04:18,930
the context of safety critical systems

00:04:16,799 --> 00:04:21,539
where the more complex and the more

00:04:18,930 --> 00:04:24,620
non-deterministic a system is the harder

00:04:21,539 --> 00:04:30,780
becomes to actually trust it

00:04:24,620 --> 00:04:33,169
the Lexus always been fairly I mean any

00:04:30,780 --> 00:04:38,669
operating system by definition does

00:04:33,169 --> 00:04:42,000
complicated things and I don't think

00:04:38,669 --> 00:04:44,729
we've been getting worse I actually

00:04:42,000 --> 00:04:48,150
think one of the things that makes me

00:04:44,729 --> 00:04:51,870
very happy is how people are still

00:04:48,150 --> 00:04:55,020
looking in more detail at very core

00:04:51,870 --> 00:04:57,120
kernel code and doing changes and doing

00:04:55,020 --> 00:05:00,960
cleanup of code that has been around for

00:04:57,120 --> 00:05:03,509
decades right now and when you say

00:05:00,960 --> 00:05:05,759
safety critical systems one of the

00:05:03,509 --> 00:05:08,430
things that people don't always realize

00:05:05,759 --> 00:05:12,840
is that these safety critical systems

00:05:08,430 --> 00:05:15,629
tend to do one thing and one thing only

00:05:12,840 --> 00:05:20,330
the safety critical thing and that means

00:05:15,629 --> 00:05:24,000
that the kind of bugs that we see in on

00:05:20,330 --> 00:05:27,000
desktop systems in random distributions

00:05:24,000 --> 00:05:30,000
are things that you never would normally

00:05:27,000 --> 00:05:31,620
even hit in the embedded world in in

00:05:30,000 --> 00:05:33,569
those safety critical systems because

00:05:31,620 --> 00:05:36,479
they do one thing that has been tested

00:05:33,569 --> 00:05:39,690
very very very well and and the kind of

00:05:36,479 --> 00:05:42,509
bugs we tend to find are the random

00:05:39,690 --> 00:05:46,289
crazy users bugs where somebody does

00:05:42,509 --> 00:05:51,750
something that nobody even thought would

00:05:46,289 --> 00:05:54,599
be would be remotely saying and so the

00:05:51,750 --> 00:05:57,180
bugs we see are not bugs that I think

00:05:54,599 --> 00:06:00,569
would hit safety cradles so put words in

00:05:57,180 --> 00:06:03,240
your mouth you're saying that the the

00:06:00,569 --> 00:06:05,219
size of the community and the the long

00:06:03,240 --> 00:06:07,800
experience with our development process

00:06:05,219 --> 00:06:10,259
is actually helping us despite this

00:06:07,800 --> 00:06:13,349
complexity to create better software

00:06:10,259 --> 00:06:16,279
also if you look at what happens now the

00:06:13,349 --> 00:06:20,069
kernel I make is not the kernel that

00:06:16,279 --> 00:06:23,159
even the distributions use so that this

00:06:20,069 --> 00:06:26,639
the the development kernel where we

00:06:23,159 --> 00:06:30,629
found a bug just before the 5.3 release

00:06:26,639 --> 00:06:34,229
is only the first step then we have

00:06:30,629 --> 00:06:36,599
dregg who's here somewhere who is the

00:06:34,229 --> 00:06:39,419
second step who does

00:06:36,599 --> 00:06:41,669
just the stable kernels the third step

00:06:39,419 --> 00:06:44,959
is the district kernels that take the

00:06:41,669 --> 00:06:48,629
stable kernels usually work their own

00:06:44,959 --> 00:06:50,939
testing on top of that often have a few

00:06:48,629 --> 00:06:55,439
patches that they do for their customers

00:06:50,939 --> 00:06:57,869
and then way beyond that you end up

00:06:55,439 --> 00:07:01,409
having all the people who actually do

00:06:57,869 --> 00:07:04,949
long-term stable stuff like in

00:07:01,409 --> 00:07:08,249
automotive in industrial automation and

00:07:04,949 --> 00:07:09,990
things like that so there are not only

00:07:08,249 --> 00:07:14,430
are we getting better on the development

00:07:09,990 --> 00:07:17,580
kernel side we now over the last many

00:07:14,430 --> 00:07:19,619
many years we've had this process in

00:07:17,580 --> 00:07:23,580
place where you have multiple levels of

00:07:19,619 --> 00:07:29,699
filtering so by the time it hits it's a

00:07:23,580 --> 00:07:31,889
train not not hopefully hitting a train

00:07:29,699 --> 00:07:34,709
but by the time the system is installed

00:07:31,889 --> 00:07:37,830
in in these industrial applications

00:07:34,709 --> 00:07:40,319
they've gone through years of testing so

00:07:37,830 --> 00:07:42,659
this really is a case where the the size

00:07:40,319 --> 00:07:44,639
of this community and and the long

00:07:42,659 --> 00:07:48,479
experience that we've had in how we

00:07:44,639 --> 00:07:51,599
actually develop and then test what we

00:07:48,479 --> 00:07:54,629
do and maintain it over time is to the

00:07:51,599 --> 00:07:57,149
advantage even of these typically rather

00:07:54,629 --> 00:07:59,519
extreme use cases like real time or or

00:07:57,149 --> 00:08:01,589
safety critical and one of the problems

00:07:59,519 --> 00:08:04,919
we see is that in some of the embedded

00:08:01,589 --> 00:08:08,639
world people are still working with

00:08:04,919 --> 00:08:13,439
kernels that are so old that the base

00:08:08,639 --> 00:08:15,659
kernel actually is from before we got

00:08:13,439 --> 00:08:22,050
all the processing place and before we

00:08:15,659 --> 00:08:26,629
may say 18 yes exactly so so some of the

00:08:22,050 --> 00:08:30,089
the really long-term systems are using

00:08:26,629 --> 00:08:31,709
kernels that are very much inferior and

00:08:30,089 --> 00:08:34,620
we've actually improved on our stability

00:08:31,709 --> 00:08:37,589
and on our process and I'm testing a lot

00:08:34,620 --> 00:08:39,449
in the last decade so I think one other

00:08:37,589 --> 00:08:41,880
things that is interesting for people to

00:08:39,449 --> 00:08:44,099
understand is what do you spend your

00:08:41,880 --> 00:08:45,600
time on s the kernel maintainer

00:08:44,099 --> 00:08:48,600
because I don't think a lot of people

00:08:45,600 --> 00:08:50,120
have inside in into your workflow what

00:08:48,600 --> 00:08:54,890
do you do

00:08:50,120 --> 00:08:58,250
I read email I read email I write email

00:08:54,890 --> 00:09:00,080
I do no coding at all anymore

00:08:58,250 --> 00:09:03,650
most of the code I write I actually

00:09:00,080 --> 00:09:05,900
write inside my mail reader so somebody

00:09:03,650 --> 00:09:07,760
sends me a patch or more commonly they

00:09:05,900 --> 00:09:10,580
send me a pull request or there's a

00:09:07,760 --> 00:09:13,460
discussion about the next full request

00:09:10,580 --> 00:09:20,500
and and there's something I react to and

00:09:13,460 --> 00:09:23,600
say no this is fine but and I send out

00:09:20,500 --> 00:09:25,010
pseudocode or I I'm so used to editing

00:09:23,600 --> 00:09:27,320
patches that I sometimes they did

00:09:25,010 --> 00:09:30,500
patches and send out the patch without

00:09:27,320 --> 00:09:33,170
having ever compiled it ever tested it

00:09:30,500 --> 00:09:35,630
because I literally wrote it in the mail

00:09:33,170 --> 00:09:37,640
reader and saying I think this is how it

00:09:35,630 --> 00:09:42,740
should be done but this is what I do I

00:09:37,640 --> 00:09:45,980
are not a programmer anymore I I've read

00:09:42,740 --> 00:09:50,930
a lot more email than I write because

00:09:45,980 --> 00:09:54,830
what my job really is in the end my job

00:09:50,930 --> 00:09:59,120
is to say no somebody somebody has to be

00:09:54,830 --> 00:10:01,910
able to say no to people and because

00:09:59,120 --> 00:10:06,650
people other developers know that if

00:10:01,910 --> 00:10:10,040
they do something bad I will say no they

00:10:06,650 --> 00:10:13,910
hopefully in turn are more careful but

00:10:10,040 --> 00:10:17,410
in order to be able to say no I have to

00:10:13,910 --> 00:10:21,620
know the background because otherwise I

00:10:17,410 --> 00:10:24,650
know is my I can't do my job so I spent

00:10:21,620 --> 00:10:27,080
all my time basically reading email

00:10:24,650 --> 00:10:29,690
about what people are working on I think

00:10:27,080 --> 00:10:34,430
you just dig Laura fide your job by

00:10:29,690 --> 00:10:36,860
quite a bit but the very same vein so

00:10:34,430 --> 00:10:40,430
what do you think the kernel developers

00:10:36,860 --> 00:10:46,130
should spend most their time on at the

00:10:40,430 --> 00:10:47,510
other end of this pipeline so there's so

00:10:46,130 --> 00:10:51,680
many different levels of kernel

00:10:47,510 --> 00:10:56,060
developers I see one of my primary goals

00:10:51,680 --> 00:10:58,490
to be very responsive to the sub

00:10:56,060 --> 00:10:59,450
maintainer x' who sent me patches or

00:10:58,490 --> 00:11:02,900
send me

00:10:59,450 --> 00:11:06,980
well requests I want to feel like I can

00:11:02,900 --> 00:11:08,870
say yes or no within a day or two during

00:11:06,980 --> 00:11:12,020
the merger window the day or two may

00:11:08,870 --> 00:11:15,110
stretch into a week but I want to be

00:11:12,020 --> 00:11:17,960
there all the time and that's as a

00:11:15,110 --> 00:11:21,020
maintainer I think that's one of the

00:11:17,960 --> 00:11:23,780
main things you want to do you want to

00:11:21,020 --> 00:11:27,050
be responsive so that the people who are

00:11:23,780 --> 00:11:33,140
sending you code either s patches or as

00:11:27,050 --> 00:11:35,300
full requests feel like their work is

00:11:33,140 --> 00:11:38,060
maybe not appreciated because sometimes

00:11:35,300 --> 00:11:40,340
it's not let's be honest but at least

00:11:38,060 --> 00:11:44,470
they get the feedback quickly so that

00:11:40,340 --> 00:11:48,160
they don't sit there wondering what's up

00:11:44,470 --> 00:11:51,140
so that's one part from from the

00:11:48,160 --> 00:11:53,090
managerial side is to be there all the

00:11:51,140 --> 00:11:58,820
time and be responsive and it really is

00:11:53,090 --> 00:12:01,700
not very Laureus it's not a it is an

00:11:58,820 --> 00:12:03,470
interesting job but you do end up

00:12:01,700 --> 00:12:06,380
spending most their time reading email

00:12:03,470 --> 00:12:11,060
on the developers side what I hope

00:12:06,380 --> 00:12:13,100
people are doing is trying to make not

00:12:11,060 --> 00:12:16,550
just good code but these days we've been

00:12:13,100 --> 00:12:19,730
very good about having explanations for

00:12:16,550 --> 00:12:22,550
the code so commit messages to me are

00:12:19,730 --> 00:12:25,490
almost as important as the code changed

00:12:22,550 --> 00:12:29,560
itself right sometimes the code change

00:12:25,490 --> 00:12:33,620
is so obvious that no message is really

00:12:29,560 --> 00:12:37,550
required but that is very very rare and

00:12:33,620 --> 00:12:39,050
so one of the things I hope developers

00:12:37,550 --> 00:12:42,380
are thinking about the people who are

00:12:39,050 --> 00:12:45,140
actually writing code is not just the

00:12:42,380 --> 00:12:47,240
code itself but explaining why the code

00:12:45,140 --> 00:12:49,900
does something and why some change was

00:12:47,240 --> 00:12:53,240
needed because that then in turn helps

00:12:49,900 --> 00:12:55,700
the managerial side of the equation

00:12:53,240 --> 00:12:59,450
where if you can explain your code to me

00:12:55,700 --> 00:13:01,370
I will trust the code and it also helps

00:12:59,450 --> 00:13:03,350
if in three years somebody else is

00:13:01,370 --> 00:13:05,390
trying to fix a bug yes and it looks at

00:13:03,350 --> 00:13:07,400
the change and says what the heck is

00:13:05,390 --> 00:13:09,770
that if you have a good commit message

00:13:07,400 --> 00:13:11,450
that explains why you did this it's

00:13:09,770 --> 00:13:12,740
usually much easier to actually

00:13:11,450 --> 00:13:13,310
understand what's going on a lot of

00:13:12,740 --> 00:13:15,170
open-source

00:13:13,310 --> 00:13:17,390
generally is about communication yeah I

00:13:15,170 --> 00:13:19,010
mean and part of it is is the commit

00:13:17,390 --> 00:13:21,650
messages part of it is just the email

00:13:19,010 --> 00:13:25,070
going back and forth communicating what

00:13:21,650 --> 00:13:28,160
you're trying to do or communicating why

00:13:25,070 --> 00:13:30,770
something doesn't work for you is really

00:13:28,160 --> 00:13:33,290
important I think that's a very

00:13:30,770 --> 00:13:35,330
important message that communication is

00:13:33,290 --> 00:13:37,760
key to all of this I wanna switch gear

00:13:35,330 --> 00:13:40,400
completely for a moment and and talk a

00:13:37,760 --> 00:13:43,360
little bit about history so your rather

00:13:40,400 --> 00:13:46,190
early memoir was titled just for fun and

00:13:43,360 --> 00:13:49,790
if I look back at the early 90s when we

00:13:46,190 --> 00:13:52,850
started computers had four megabytes of

00:13:49,790 --> 00:13:56,779
RAM Meg megabytes with an m2 those young

00:13:52,850 --> 00:14:01,400
people in the room a big hard drive was

00:13:56,779 --> 00:14:03,860
a hundred megabytes and and libraries

00:14:01,400 --> 00:14:06,470
were simple the tools that you had were

00:14:03,860 --> 00:14:08,240
fairly simple I remember when I first

00:14:06,470 --> 00:14:10,220
started in external development I

00:14:08,240 --> 00:14:12,140
printed out the complete source code of

00:14:10,220 --> 00:14:17,660
the Linux kernel tree I don't recommend

00:14:12,140 --> 00:14:21,260
doing this anymore do you think for

00:14:17,660 --> 00:14:25,100
people starting today it is as much fun

00:14:21,260 --> 00:14:27,020
it's as easy to have fun and feel that

00:14:25,100 --> 00:14:31,850
you understand the space that you in

00:14:27,020 --> 00:14:38,450
that it was 25 28 years ago I don't know

00:14:31,850 --> 00:14:41,540
I think in many respects excuse me

00:14:38,450 --> 00:14:44,000
kernel development has gone much easier

00:14:41,540 --> 00:14:46,880
because yes it's bigger and more

00:14:44,000 --> 00:14:50,240
complicated but on the other hand we

00:14:46,880 --> 00:14:54,339
have much better tools and we have much

00:14:50,240 --> 00:14:58,250
better documentation we have a lot more

00:14:54,339 --> 00:15:01,250
community where people there are lots of

00:14:58,250 --> 00:15:03,470
people who feel that it's part of their

00:15:01,250 --> 00:15:06,589
jobs sometimes the primary part of their

00:15:03,470 --> 00:15:11,480
job to help new people come into the

00:15:06,589 --> 00:15:16,970
community so that all helps there's also

00:15:11,480 --> 00:15:19,839
a lot less of the problems that stop you

00:15:16,970 --> 00:15:23,209
from from even jumping into it I mean

00:15:19,839 --> 00:15:26,480
early on you might not have the right

00:15:23,209 --> 00:15:26,970
hardware just because the kernel would

00:15:26,480 --> 00:15:29,819
only

00:15:26,970 --> 00:15:33,000
work on on a very small subset of the

00:15:29,819 --> 00:15:35,370
hardware out there and that just isn't a

00:15:33,000 --> 00:15:38,430
problem anymore at the same time it's

00:15:35,370 --> 00:15:43,740
clearly the case that the kernel has

00:15:38,430 --> 00:15:46,379
gotten huge and hugely more complicated

00:15:43,740 --> 00:15:49,529
and and the kind of immediate

00:15:46,379 --> 00:15:51,899
low-hanging fruit where where new people

00:15:49,529 --> 00:15:54,240
can feel like they're they have

00:15:51,899 --> 00:15:56,879
something to work on might be not as

00:15:54,240 --> 00:16:00,089
easy to find yeah I think the the the

00:15:56,879 --> 00:16:02,310
learning curve the amount of things that

00:16:00,089 --> 00:16:03,689
you need to understand before you can do

00:16:02,310 --> 00:16:05,910
something and that's not just about the

00:16:03,689 --> 00:16:08,009
count that's about kubernetes about

00:16:05,910 --> 00:16:10,290
docker about anything in this space

00:16:08,009 --> 00:16:12,629
it just feels to me that there is so

00:16:10,290 --> 00:16:14,879
much that you need to grasp off the

00:16:12,629 --> 00:16:16,620
environment before you can get really

00:16:14,879 --> 00:16:18,600
something done back then you know you

00:16:16,620 --> 00:16:20,939
send a patch to Linus he yelled at you

00:16:18,600 --> 00:16:25,350
and and life was good and today it's

00:16:20,939 --> 00:16:27,990
it's it's very different but I mean it's

00:16:25,350 --> 00:16:32,490
still the case that I mean almost nobody

00:16:27,990 --> 00:16:35,189
got started doing Linux by getting into

00:16:32,490 --> 00:16:37,559
some core kernel functionality almost

00:16:35,189 --> 00:16:42,230
all kernel developers started doing a

00:16:37,559 --> 00:16:45,990
small drive or doing something pretty

00:16:42,230 --> 00:16:48,509
small at the edges of the system and and

00:16:45,990 --> 00:16:51,930
the edges have grown there's a lot more

00:16:48,509 --> 00:16:55,500
of those drivers that might have small

00:16:51,930 --> 00:17:00,420
annoyances there where even if you don't

00:16:55,500 --> 00:17:03,089
know the system very well in general you

00:17:00,420 --> 00:17:05,520
can find something very particular that

00:17:03,089 --> 00:17:07,559
you want to get into and I used to say

00:17:05,520 --> 00:17:08,880
that nobody should get into kernel

00:17:07,559 --> 00:17:12,059
programming because there's all these

00:17:08,880 --> 00:17:13,980
other open source projects that that are

00:17:12,059 --> 00:17:15,720
easier to get into but I think there's

00:17:13,980 --> 00:17:17,669
still a lot of people who are interested

00:17:15,720 --> 00:17:19,500
in interacting with hardware and are

00:17:17,669 --> 00:17:21,959
interested in the kind of problems that

00:17:19,500 --> 00:17:24,329
occur in all phases and we still have a

00:17:21,959 --> 00:17:27,990
huge community and we still have a lot

00:17:24,329 --> 00:17:29,610
of new faces coming every release so

00:17:27,990 --> 00:17:33,630
things seem to be working very well and

00:17:29,610 --> 00:17:35,549
and there are places to go again and I

00:17:33,630 --> 00:17:37,470
wasn't implying that things aren't

00:17:35,549 --> 00:17:39,570
working well it just it feels to me and

00:17:37,470 --> 00:17:40,610
and there was my next question so if you

00:17:39,570 --> 00:17:46,160
look at this

00:17:40,610 --> 00:17:48,290
transition from 1991 tiny community very

00:17:46,160 --> 00:17:50,600
very basic in its functionality that's

00:17:48,290 --> 00:17:52,309
let's face it when I started there was

00:17:50,600 --> 00:17:57,110
no login prompt you just got a root

00:17:52,309 --> 00:18:00,070
shell and then moving forward I did at

00:17:57,110 --> 00:18:02,660
some point to you this switch for

00:18:00,070 --> 00:18:05,630
something that felt like just for fun a

00:18:02,660 --> 00:18:07,520
hobby project to something that was big

00:18:05,630 --> 00:18:09,920
business that was mission critical

00:18:07,520 --> 00:18:12,740
software was there an inflection point

00:18:09,920 --> 00:18:14,860
where you said the nature of this

00:18:12,740 --> 00:18:17,240
project has changed

00:18:14,860 --> 00:18:19,070
no the nature of the problems have

00:18:17,240 --> 00:18:21,860
changed and there's always been things

00:18:19,070 --> 00:18:24,530
that are not fun right when you hit your

00:18:21,860 --> 00:18:29,030
head against the wall for a week chasing

00:18:24,530 --> 00:18:32,570
a bug that part is not fun and never has

00:18:29,030 --> 00:18:35,179
been and that was always there they're

00:18:32,570 --> 00:18:37,580
the kinds of things that are not fun

00:18:35,179 --> 00:18:43,490
these days are tend to be different I

00:18:37,580 --> 00:18:50,200
mean these days sometimes you have CPU

00:18:43,490 --> 00:18:50,200
bugs those are not fun with a capital N

00:18:50,380 --> 00:19:00,799
and there's also what is maybe slightly

00:18:58,190 --> 00:19:03,950
not fun is we have to have a lot more

00:19:00,799 --> 00:19:06,340
rules in place it was much more

00:19:03,950 --> 00:19:10,640
freewheeling back in the days and and

00:19:06,340 --> 00:19:13,070
and there was more banter and you could

00:19:10,640 --> 00:19:15,200
try things out without really worrying

00:19:13,070 --> 00:19:18,799
about breaking systems as much as you

00:19:15,200 --> 00:19:21,320
can these days so there there is a lot

00:19:18,799 --> 00:19:23,240
of seriousness and and some stuff that

00:19:21,320 --> 00:19:27,620
isn't fun but the reason I'm still doing

00:19:23,240 --> 00:19:30,140
it is it's the fun thing I mean so I I

00:19:27,620 --> 00:19:33,710
may spend most of my time reading email

00:19:30,140 --> 00:19:36,350
but part of the reason I do that is I'd

00:19:33,710 --> 00:19:38,660
be really bored if I wasn't yeah so I

00:19:36,350 --> 00:19:41,870
thought you might pick up on the change

00:19:38,660 --> 00:19:43,760
from early on you had the production

00:19:41,870 --> 00:19:46,460
kernel development kernel the odd and

00:19:43,760 --> 00:19:48,080
even and then with 2.6 we changed to a

00:19:46,460 --> 00:19:50,120
completely different development model

00:19:48,080 --> 00:19:52,400
the one that we still have today with

00:19:50,120 --> 00:19:54,290
the 10 to 12 week release cycle I I

00:19:52,400 --> 00:19:57,140
would have assumed that you would pick

00:19:54,290 --> 00:19:59,180
as kind of this transition from we have

00:19:57,140 --> 00:20:01,340
this experimenting branch that is just

00:19:59,180 --> 00:20:03,320
for fun and then we we get the release

00:20:01,340 --> 00:20:06,440
car but you didn't receive it that way I

00:20:03,320 --> 00:20:09,620
actually it turned out that the reason

00:20:06,440 --> 00:20:11,810
we switched to the modern model where we

00:20:09,620 --> 00:20:15,500
don't have an experimental colonel and a

00:20:11,810 --> 00:20:19,340
stable colonel was that old model was so

00:20:15,500 --> 00:20:23,860
much not fun because the experimental

00:20:19,340 --> 00:20:27,590
colonel was too experimental it was

00:20:23,860 --> 00:20:31,460
there was too much craziness going on

00:20:27,590 --> 00:20:33,770
that most regular users would not want

00:20:31,460 --> 00:20:36,890
to touch it and that meant that from a

00:20:33,770 --> 00:20:40,850
development standpoint the the the

00:20:36,890 --> 00:20:43,970
experimental kernels were we're not that

00:20:40,850 --> 00:20:47,630
much fun to develop either because if

00:20:43,970 --> 00:20:50,450
you well this may be me I feel like when

00:20:47,630 --> 00:20:53,360
I write code or when I'm a part of a

00:20:50,450 --> 00:20:56,630
project I want that project to be

00:20:53,360 --> 00:21:01,130
meaningful to other people if there are

00:20:56,630 --> 00:21:04,310
no users what I do is not fun and and

00:21:01,130 --> 00:21:08,480
that's the situation we were in back in

00:21:04,310 --> 00:21:10,430
the 2.5 days where we're users didn't

00:21:08,480 --> 00:21:12,110
dare use our experimental kernels

00:21:10,430 --> 00:21:15,410
because they were they were too

00:21:12,110 --> 00:21:18,140
experimental and and changing to a model

00:21:15,410 --> 00:21:21,290
where we have to be more careful

00:21:18,140 --> 00:21:24,590
and we only integrates things when they

00:21:21,290 --> 00:21:27,770
are ready to be integrated actually made

00:21:24,590 --> 00:21:30,170
a lot of that go away and it made our

00:21:27,770 --> 00:21:32,510
release cycle these days is so much more

00:21:30,170 --> 00:21:34,880
predictable and there's much less stress

00:21:32,510 --> 00:21:37,340
over that side but I actually think it's

00:21:34,880 --> 00:21:39,590
much more fun so in in Jim's

00:21:37,340 --> 00:21:42,770
introduction he pointed out 28 years of

00:21:39,590 --> 00:21:45,380
Linux 15 years of git and he always

00:21:42,770 --> 00:21:48,410
forgets mentioning eight years of

00:21:45,380 --> 00:21:50,720
subsurface the third most important

00:21:48,410 --> 00:21:51,230
third most important open-source project

00:21:50,720 --> 00:21:54,140
I agree

00:21:51,230 --> 00:21:57,020
I wholeheartedly agree but isn't it time

00:21:54,140 --> 00:22:01,400
for a new project no no no no I am so

00:21:57,020 --> 00:22:04,520
done I'm very happy with how it ended up

00:22:01,400 --> 00:22:06,980
but I every time get is mentioned I want

00:22:04,520 --> 00:22:07,640
to make it are very very obvious that I

00:22:06,980 --> 00:22:11,390
maintain

00:22:07,640 --> 00:22:14,630
for six months and no more and it's been

00:22:11,390 --> 00:22:15,950
15 years and the real credit goes to

00:22:14,630 --> 00:22:18,350
union hermano

00:22:15,950 --> 00:22:23,990
yeah and and a lot of other get

00:22:18,350 --> 00:22:26,720
developers I'll take credit for the

00:22:23,990 --> 00:22:31,460
design and and the thing that makes me

00:22:26,720 --> 00:22:32,630
happy about git it's not that it's it's

00:22:31,460 --> 00:22:36,440
taken over the world

00:22:32,630 --> 00:22:39,350
it's that we all have self-doubt right

00:22:36,440 --> 00:22:42,260
we all think are we actually any good

00:22:39,350 --> 00:22:44,929
and one of the self doubts I had with

00:22:42,260 --> 00:22:48,080
Linux was it was just a reemployment

00:22:44,929 --> 00:22:50,750
ation of UNIX right can I do something

00:22:48,080 --> 00:22:56,179
that isn't just a better version of

00:22:50,750 --> 00:23:02,240
something else and get proof that yes

00:22:56,179 --> 00:23:05,240
like yes you can and that to me having

00:23:02,240 --> 00:23:09,100
having two projects that made a big

00:23:05,240 --> 00:23:11,929
splash means that I'm not three projects

00:23:09,100 --> 00:23:14,030
means that I'm not like this one-hit

00:23:11,929 --> 00:23:15,770
wonder to those in the audience who

00:23:14,030 --> 00:23:18,140
don't get the joke so the third project

00:23:15,770 --> 00:23:20,750
subsurface is one that I now maintain so

00:23:18,140 --> 00:23:24,710
I keep trying to talk it out but it's

00:23:20,750 --> 00:23:27,350
okay so so we have only a couple minutes

00:23:24,710 --> 00:23:29,690
left a few years ago you started using

00:23:27,350 --> 00:23:32,720
code names for the development kernels

00:23:29,690 --> 00:23:34,640
and in the new release of rc5 you

00:23:32,720 --> 00:23:38,840
changed the code name of the current

00:23:34,640 --> 00:23:41,600
kernel can you talk about that I've used

00:23:38,840 --> 00:23:43,970
the how many in the audience know that

00:23:41,600 --> 00:23:47,150
kernels don't only have version numbers

00:23:43,970 --> 00:23:49,970
they have names to you that's easy most

00:23:47,150 --> 00:23:53,000
people know yeah so it's not just a few

00:23:49,970 --> 00:23:55,490
years ago I've done this since way

00:23:53,000 --> 00:23:57,830
before 1.0 the kernels have always in

00:23:55,490 --> 00:24:00,919
the main top-level make file there's a

00:23:57,830 --> 00:24:08,450
name variable that gets set and it's

00:24:00,919 --> 00:24:11,299
usually a random creature I where I live

00:24:08,450 --> 00:24:14,929
there was this one squirrel that kept

00:24:11,299 --> 00:24:18,830
running in front of my car for a week

00:24:14,929 --> 00:24:19,740
and and so I named the kernel suicidal

00:24:18,830 --> 00:24:22,110
squirrel

00:24:19,740 --> 00:24:24,120
and and the name is not used anywhere

00:24:22,110 --> 00:24:26,700
it's literally just a variable it gets

00:24:24,120 --> 00:24:28,890
set and then never ever used again but

00:24:26,700 --> 00:24:31,860
it's it's being disowned going joke for

00:24:28,890 --> 00:24:34,789
me for the last 20 plus years and I

00:24:31,860 --> 00:24:40,169
think Greg names he's stable kernels too

00:24:34,789 --> 00:24:43,679
and I if something happens either in the

00:24:40,169 --> 00:24:46,080
news or or in my personal life you can

00:24:43,679 --> 00:24:49,919
sometimes see it in the name change so

00:24:46,080 --> 00:24:53,690
the last release on Sunday name change

00:24:49,919 --> 00:24:56,640
to kleptomaniac octopus because we were

00:24:53,690 --> 00:24:59,370
diving this is what Derek was aiming for

00:24:56,640 --> 00:25:02,250
we were diving and playing with an

00:24:59,370 --> 00:25:03,840
octopus and at two different octopus and

00:25:02,250 --> 00:25:07,140
the first one tried to steal my

00:25:03,840 --> 00:25:09,690
flashlight and the second one tried to

00:25:07,140 --> 00:25:11,429
steal Dirk's camera and the picture of

00:25:09,690 --> 00:25:13,919
that if you look at my Twitter handle

00:25:11,429 --> 00:25:15,929
there was up a moment ago I actually

00:25:13,919 --> 00:25:17,520
posted a picture of that it's free

00:25:15,929 --> 00:25:19,559
hilarious and the octopus goes for my

00:25:17,520 --> 00:25:21,840
camera so the name has absolutely no

00:25:19,559 --> 00:25:24,600
meaning but sometimes you can guess that

00:25:21,840 --> 00:25:27,960
oh something happened in Venus's life

00:25:24,600 --> 00:25:31,500
where some some random animal did

00:25:27,960 --> 00:25:34,110
something silly okay so we are out of

00:25:31,500 --> 00:25:37,500
time so the the most important part a

00:25:34,110 --> 00:25:40,260
parting question as always where should

00:25:37,500 --> 00:25:41,820
the 30 year celebration for Linux be so

00:25:40,260 --> 00:25:46,080
where should Angela host those

00:25:41,820 --> 00:25:51,990
conferences it's only a couple of years

00:25:46,080 --> 00:25:57,570
a couple years no I'm thinking I'm

00:25:51,990 --> 00:26:01,350
thinking diving Hawaii I've done so

00:25:57,570 --> 00:26:04,240
Tahiti in in a couple of years name on

00:26:01,350 --> 00:26:09,680
that happy note thank you everyone

00:26:04,240 --> 00:26:09,680

YouTube URL: https://www.youtube.com/watch?v=H8Gd9t7FQqI


