Title: Migrating Legacy Monoliths to Cloud Native Microservices Architectures on Kubernetes - Dan Kohn
Publication date: 2017-06-23
Playlist: Open Source Summit Japan 2017
Description: 
	Cloud Native architectures, such as those built on Kubernetes, are envied for their ability to segment different parts of an application into microservices that can separately be containerized, so that each microservice can be written in its own language, with its own framework, and its unique set of libraries. This has been shown to significantly increase developer and team productivity by decoupling dependencies between different parts of a team. However, most legacy code consists of a large monolithic code base, not microservices applications. This talk will look at several real-world cases where existing monolithic, legacy applications deployed in multi-billion dollar companies were slowly evolved into cloud native microservices architectures on Kubernetes. Demonstrating that the cloud native architecture is suitable across most categories of computing.

About Dan Kohn

Dan Kohn leads the Cloud Native Computing Foundation. Dan previously served as CTO of several startups, including Spreemo, a healthcare marketplace, and Shopbeam, a shoppable ads company. Earlier, he was a general partner at Skymoon Ventures, a $70 million seed-stage venture capital firm that created startups in semiconductors and telecom infrastructure. He also helped create and launch The Linux Foundationâ€™s Core Infrastructure Initiative.
Captions: 
	00:00:00,060 --> 00:00:06,450
hi everyone I'm Dan Khan I live in New

00:00:03,870 --> 00:00:08,969
York City and from the cloud native

00:00:06,450 --> 00:00:11,669
computing foundation like to especially

00:00:08,969 --> 00:00:14,190
thank nori and events team year for

00:00:11,669 --> 00:00:18,060
really extraordinary job and put

00:00:14,190 --> 00:00:19,650
together this is oh I've actually been

00:00:18,060 --> 00:00:22,140
coming to Japan with the Linux

00:00:19,650 --> 00:00:25,140
Foundation for almost a decade a lot of

00:00:22,140 --> 00:00:29,190
offices just amazing to see a little

00:00:25,140 --> 00:00:31,710
interest so why don't you dive in to

00:00:29,190 --> 00:00:34,379
tell you a little bit about the SPF and

00:00:31,710 --> 00:00:37,980
how it matters and why it may affect you

00:00:34,379 --> 00:00:40,620
and as part of the Linux Foundation were

00:00:37,980 --> 00:00:45,210
just a little bit less than 18 months

00:00:40,620 --> 00:00:48,600
old we have now have 10 projects in the

00:00:45,210 --> 00:00:50,659
foundation of where 380 is the best

00:00:48,600 --> 00:00:53,219
known it was the anchor tenant

00:00:50,659 --> 00:00:55,469
originally we now add it in the number

00:00:53,219 --> 00:00:58,499
of new ones including the container

00:00:55,469 --> 00:01:01,440
network interface CNI which just came on

00:00:58,499 --> 00:01:04,170
last week and I wanna give a shout out

00:01:01,440 --> 00:01:07,140
for platform members by the majority of

00:01:04,170 --> 00:01:10,820
funding especially Fujitsu which was a

00:01:07,140 --> 00:01:14,009
founding member of the MacLeod native

00:01:10,820 --> 00:01:17,759
Canadian band and NBC which is also good

00:01:14,009 --> 00:01:19,710
very supportive and as you've seen for

00:01:17,759 --> 00:01:22,649
the last few days here the Linux

00:01:19,710 --> 00:01:24,750
Foundation is money more than Linux so

00:01:22,649 --> 00:01:26,700
later say there's a talk from lesson

00:01:24,750 --> 00:01:29,939
crypt which is provided free

00:01:26,700 --> 00:01:33,240
certificates to those websites and

00:01:29,939 --> 00:01:34,680
creating more than 50 from the pages on

00:01:33,240 --> 00:01:37,770
the web for now ACPs

00:01:34,680 --> 00:01:42,240
our pitches book about omeka oh now I

00:01:37,770 --> 00:01:44,100
forgot them type of MGF and how she has

00:01:42,240 --> 00:01:46,079
the whole parallel sessions talking

00:01:44,100 --> 00:01:48,600
about automotive grade Linux and then

00:01:46,079 --> 00:01:50,549
Brian yesterday had a great conversation

00:01:48,600 --> 00:01:52,859
of blockchain but these are actually

00:01:50,549 --> 00:01:54,210
there's a several dozen more projects

00:01:52,859 --> 00:01:57,810
within the Linux

00:01:54,210 --> 00:01:59,909
in this URL bringing to them okay and

00:01:57,810 --> 00:02:01,830
then I just want to give them a very

00:01:59,909 --> 00:02:05,250
abbreviated version of the talk I gave

00:02:01,830 --> 00:02:07,530
yesterday about how loud they didn't fit

00:02:05,250 --> 00:02:10,880
in to the history of application

00:02:07,530 --> 00:02:13,830
development if you go back to 2000 and

00:02:10,880 --> 00:02:16,590
at that point when you wanted to launch

00:02:13,830 --> 00:02:19,200
you a new application needed to buy a

00:02:16,590 --> 00:02:22,260
physical server or off an attractive

00:02:19,200 --> 00:02:24,780
servers and that was very expensive and

00:02:22,260 --> 00:02:29,160
led to a high stock price your son but

00:02:24,780 --> 00:02:31,170
then in 2001 VMware came out with the

00:02:29,160 --> 00:02:34,050
technology to level virtual machines

00:02:31,170 --> 00:02:36,390
that you can put in application in a VM

00:02:34,050 --> 00:02:40,500
and have multiple applications on logs

00:02:36,390 --> 00:02:43,530
then in 2006 Amazon Web Services

00:02:40,500 --> 00:02:48,269
popularized the idea of infrastructure

00:02:43,530 --> 00:02:52,620
as a service to allow rather than having

00:02:48,269 --> 00:02:55,230
to spend half X on a on your hardware

00:02:52,620 --> 00:02:56,459
you can become an operating expense that

00:02:55,230 --> 00:03:01,170
you rented by the hour

00:02:56,459 --> 00:03:04,829
and in 2009 Heroku popularized the idea

00:03:01,170 --> 00:03:06,930
of a platform as a service in the magic

00:03:04,829 --> 00:03:09,959
of being able to type gift witty or

00:03:06,930 --> 00:03:11,910
remove to have the new version of your

00:03:09,959 --> 00:03:13,829
application deployed and what's

00:03:11,910 --> 00:03:17,160
interesting is all four of those steps

00:03:13,829 --> 00:03:19,170
were proprietary companies the next

00:03:17,160 --> 00:03:23,610
board on our little brief history here

00:03:19,170 --> 00:03:27,600
are all open source offerings so in 2010

00:03:23,610 --> 00:03:30,209
you had OpenStack which took the

00:03:27,600 --> 00:03:32,579
technology from VMware and Amazon Web

00:03:30,209 --> 00:03:35,600
Services made available in an open

00:03:32,579 --> 00:03:39,150
source platform then a cloud foundry

00:03:35,600 --> 00:03:41,850
that abby's both about two days ago is

00:03:39,150 --> 00:03:45,090
an open source platform as a service

00:03:41,850 --> 00:03:48,180
similar to the Roku and then in 2013

00:03:45,090 --> 00:03:50,700
doctor came along and popularized the

00:03:48,180 --> 00:03:52,980
concept of containers that you can wrap

00:03:50,700 --> 00:03:53,980
your application in container making

00:03:52,980 --> 00:03:56,440
money easier

00:03:53,980 --> 00:04:00,190
to move around and then finally the last

00:03:56,440 --> 00:04:03,340
stop of 2015 was the creation of cmcm

00:04:00,190 --> 00:04:06,190
and where we are starting out hosting

00:04:03,340 --> 00:04:09,459
kubernetes and we defined loud native

00:04:06,190 --> 00:04:11,799
ears having 3d parts that you divide

00:04:09,459 --> 00:04:15,989
your application up into member services

00:04:11,799 --> 00:04:18,790
you happy each part is own container and

00:04:15,989 --> 00:04:21,130
dynamically orchestrated imitators and

00:04:18,790 --> 00:04:24,430
so let's just talk about why people are

00:04:21,130 --> 00:04:29,639
so excited about these changes as I go

00:04:24,430 --> 00:04:33,970
into the I'm a crazy charge where it's

00:04:29,639 --> 00:04:36,460
448 projects and company in the space I

00:04:33,970 --> 00:04:38,830
will point out that this is on github in

00:04:36,460 --> 00:04:40,630
a high resolution version and if your

00:04:38,830 --> 00:04:43,030
company or project is missing here

00:04:40,630 --> 00:04:46,750
please open an issue and we'll add it in

00:04:43,030 --> 00:04:49,810
the next version what we're trying to do

00:04:46,750 --> 00:04:52,360
here to build a massive cloud view and

00:04:49,810 --> 00:04:54,310
say that there is a destination that

00:04:52,360 --> 00:04:56,500
we're all trying to get to but there's

00:04:54,310 --> 00:04:58,870
actually multiple tasks that teach you

00:04:56,500 --> 00:05:01,539
that destination and then the projects

00:04:58,870 --> 00:05:04,450
that are in green here so kubernetes

00:05:01,539 --> 00:05:07,510
rocket a turkey in i for dns and others

00:05:04,450 --> 00:05:09,220
are the ones that we're hosting at cmcm

00:05:07,510 --> 00:05:11,440
we're not saying that these are the only

00:05:09,220 --> 00:05:14,229
way to be funded Oh everything that

00:05:11,440 --> 00:05:17,380
we're working and have picked a very

00:05:14,229 --> 00:05:19,780
good group of technologies that we are

00:05:17,380 --> 00:05:23,500
sure work well together and they can

00:05:19,780 --> 00:05:25,470
meet and prizes and starlets needs okay

00:05:23,500 --> 00:05:28,000
so why are people making this journey

00:05:25,470 --> 00:05:30,720
one of the biggest is to avoid vendor

00:05:28,000 --> 00:05:33,610
lock-in than open source software

00:05:30,720 --> 00:05:37,630
enables deployment one a public private

00:05:33,610 --> 00:05:39,190
or hybrid cloud and you can download the

00:05:37,630 --> 00:05:41,020
software you can use it yourself and

00:05:39,190 --> 00:05:41,670
there's multiple vendors they can

00:05:41,020 --> 00:05:43,710
support

00:05:41,670 --> 00:05:46,920
you can switch from one to another if

00:05:43,710 --> 00:05:51,230
you want to a really extraordinary level

00:05:46,920 --> 00:05:53,430
of scalability Carini's is evolved from

00:05:51,230 --> 00:05:56,060
Google's experiences with their

00:05:53,430 --> 00:05:58,620
container system born that system

00:05:56,060 --> 00:06:03,360
launches more than 2 million containers

00:05:58,620 --> 00:06:06,270
per week that 3300 per second on average

00:06:03,360 --> 00:06:09,090
but of course that P is so much much

00:06:06,270 --> 00:06:11,720
higher and so the systems designed to

00:06:09,090 --> 00:06:15,330
support thousands of self queuing

00:06:11,720 --> 00:06:18,600
unattended notice my bigger example of

00:06:15,330 --> 00:06:22,380
this and he was finding out my son's to

00:06:18,600 --> 00:06:25,800
take my job more seriously was a Pokemon

00:06:22,380 --> 00:06:29,730
go runs on Koreans and I've heard that

00:06:25,800 --> 00:06:33,720
it it took up to 60,000 nodes at the at

00:06:29,730 --> 00:06:35,430
a big debate cloud needed about

00:06:33,720 --> 00:06:37,800
increasing the journey and

00:06:35,430 --> 00:06:40,830
maintainability so the idea that you

00:06:37,800 --> 00:06:45,240
split up your application that these of

00:06:40,830 --> 00:06:47,460
parts are separately described in a way

00:06:45,240 --> 00:06:50,730
that your team to have scale much better

00:06:47,460 --> 00:06:53,850
and this is the concept of orchestration

00:06:50,730 --> 00:06:56,550
that you can improve efficiency resource

00:06:53,850 --> 00:06:58,380
utilization that in by dynamically

00:06:56,550 --> 00:07:01,350
managing and scheduling these micro

00:06:58,380 --> 00:07:03,480
services and that also allows you to

00:07:01,350 --> 00:07:05,790
have an extraordinary level of

00:07:03,480 --> 00:07:09,000
resiliency so your individual container

00:07:05,790 --> 00:07:11,490
can fail a machine even entire data

00:07:09,000 --> 00:07:15,210
center and then have your demand goes up

00:07:11,490 --> 00:07:18,870
and down you adjust dynamically to that

00:07:15,210 --> 00:07:21,980
so how does that impact company this is

00:07:18,870 --> 00:07:23,810
a statistic from puppet that

00:07:21,980 --> 00:07:26,370
high-performing about native

00:07:23,810 --> 00:07:29,040
architectures tend to have 200 times

00:07:26,370 --> 00:07:29,529
more frequent development for the 2,000

00:07:29,040 --> 00:07:32,409
times

00:07:29,529 --> 00:07:36,669
Shirley's low failure rate and much

00:07:32,409 --> 00:07:38,499
faster recovery from failures so I think

00:07:36,669 --> 00:07:39,899
the takeaway from all this is to say

00:07:38,499 --> 00:07:43,539
that if you're building a new

00:07:39,899 --> 00:07:46,479
application from scratch of refeel

00:07:43,539 --> 00:07:48,489
dalekanium that the cloud native cloud

00:07:46,479 --> 00:07:51,429
native application architecture is the

00:07:48,489 --> 00:07:53,169
way to go and your kick euler I would

00:07:51,429 --> 00:07:55,779
say that the leading choice your cloud

00:07:53,169 --> 00:07:58,239
native orchestration in kubernetes it's

00:07:55,779 --> 00:08:00,789
been selected by a larger for companies

00:07:58,239 --> 00:08:03,519
is backed by this extraordinary group of

00:08:00,789 --> 00:08:05,649
members employees many here and it's one

00:08:03,519 --> 00:08:08,309
of the highest velocity development

00:08:05,649 --> 00:08:11,739
projects in the history of open-source

00:08:08,309 --> 00:08:14,739
so we should be done but now I'm going

00:08:11,739 --> 00:08:17,289
to read one my favorite quotes from John

00:08:14,739 --> 00:08:19,809
Maynard Keynes in the long run we are

00:08:17,289 --> 00:08:22,869
all dead economists said themselves too

00:08:19,809 --> 00:08:25,569
easy too useless a task if in

00:08:22,869 --> 00:08:28,119
tempestuous seasons they can only tell

00:08:25,569 --> 00:08:30,849
us that when the stores long past the

00:08:28,119 --> 00:08:35,319
ocean this platinum I just love that

00:08:30,849 --> 00:08:37,269
great to need to use with a task and I

00:08:35,319 --> 00:08:39,039
want to make the argument that they're

00:08:37,269 --> 00:08:41,500
happy aren't that many green field

00:08:39,039 --> 00:08:43,599
applications out there then the real

00:08:41,500 --> 00:08:45,550
world consists of ground field

00:08:43,599 --> 00:08:48,220
applications and if you look at the

00:08:45,550 --> 00:08:50,050
growth world project product that's all

00:08:48,220 --> 00:08:52,209
the Eevee's from all the countries added

00:08:50,050 --> 00:08:55,120
together it's a hundred trillion dollars

00:08:52,209 --> 00:08:57,730
essentially all of that close group

00:08:55,120 --> 00:09:01,439
brownfield allocations and we use this

00:08:57,730 --> 00:09:04,350
term along with to talk about a big

00:09:01,439 --> 00:09:07,240
consolidated often like a large java or

00:09:04,350 --> 00:09:10,930
other complexity application that's very

00:09:07,240 --> 00:09:12,699
good harder to evolve so just quick

00:09:10,930 --> 00:09:16,629
question for the audience how many folks

00:09:12,699 --> 00:09:18,730
have seen moving 2001 yeah given the

00:09:16,629 --> 00:09:19,430
younger crowd I think you could do more

00:09:18,730 --> 00:09:22,160
like a star

00:09:19,430 --> 00:09:25,880
or something but I popularized is the

00:09:22,160 --> 00:09:29,270
concept of a monolith that big imposing

00:09:25,880 --> 00:09:32,089
shape and yeah it's nearly all

00:09:29,270 --> 00:09:35,510
production applications in use today are

00:09:32,089 --> 00:09:37,279
monoliths and so they're they're really

00:09:35,510 --> 00:09:40,010
neat about the opposite of cloud native

00:09:37,279 --> 00:09:44,000
in that brief the question will lesson

00:09:40,010 --> 00:09:45,589
rewrite it there's this famous book up

00:09:44,000 --> 00:09:48,230
in tears about the mythical man-month

00:09:45,589 --> 00:09:51,260
that show the venoms never works and

00:09:48,230 --> 00:09:54,560
created the term the second system

00:09:51,260 --> 00:09:58,040
syndrome and it says that many rewrite

00:09:54,560 --> 00:10:00,770
engine failure because the first system

00:09:58,040 --> 00:10:02,930
is evolving even in you're trying to

00:10:00,770 --> 00:10:05,270
replace it and sometimes that versus

00:10:02,930 --> 00:10:09,140
emma calls faster and you can never

00:10:05,270 --> 00:10:11,240
catch up okay so we have on lewis are

00:10:09,140 --> 00:10:12,830
the antithesis of cloud native they're

00:10:11,240 --> 00:10:16,730
inflexible they're tightly coupled

00:10:12,830 --> 00:10:21,260
they're grilled so how can we evolve it

00:10:16,730 --> 00:10:24,200
and step one is if you're in a hole you

00:10:21,260 --> 00:10:27,440
want to stop digging and so the idea is

00:10:24,200 --> 00:10:30,500
to try and stop adding significant new

00:10:27,440 --> 00:10:34,250
functionality to your existing monolith

00:10:30,500 --> 00:10:37,070
and then there's a concept of lifting

00:10:34,250 --> 00:10:40,100
shoes and the idea is that whatever your

00:10:37,070 --> 00:10:42,290
lengthy application is you actually can

00:10:40,100 --> 00:10:44,750
containerize it people think of

00:10:42,290 --> 00:10:47,779
containers that be very small agile

00:10:44,750 --> 00:10:49,400
kinds of things but you can take a job

00:10:47,779 --> 00:10:52,250
application that requires eight

00:10:49,400 --> 00:10:55,220
gigabytes of ram and you can wrap a

00:10:52,250 --> 00:10:58,070
container around it for another cup

00:10:55,220 --> 00:11:01,310
fastened example is Ticketmaster where

00:10:58,070 --> 00:11:03,829
there have code that snow runs on a PP

00:11:01,310 --> 00:11:06,650
11 and they were able to get an EP 11

00:11:03,829 --> 00:11:08,750
emulator running inside of a docker

00:11:06,650 --> 00:11:11,990
container in order to be able to

00:11:08,750 --> 00:11:14,670
containerize that like

00:11:11,990 --> 00:11:17,370
when to create there's a specific

00:11:14,670 --> 00:11:19,620
technologies equal sets or were formerly

00:11:17,370 --> 00:11:22,680
known as pen sets that allow you to lock

00:11:19,620 --> 00:11:24,450
a container to one piece of hardware in

00:11:22,680 --> 00:11:27,690
order to make sure that it has adequate

00:11:24,450 --> 00:11:29,940
performance okay

00:11:27,690 --> 00:11:32,940
and now and this is really the key part

00:11:29,940 --> 00:11:36,210
of the talk you start chipping away at

00:11:32,940 --> 00:11:38,340
the monolith and so Ticketmaster as I

00:11:36,210 --> 00:11:40,710
mentioned has this challenge where

00:11:38,340 --> 00:11:42,960
essentially every time they would take

00:11:40,710 --> 00:11:44,940
us on for sale they're launching the

00:11:42,960 --> 00:11:47,040
distributed denial of service attack

00:11:44,940 --> 00:11:49,710
against themselves because so many

00:11:47,040 --> 00:11:51,810
people are coming in and so what they

00:11:49,710 --> 00:11:54,990
needed to do was have a set of front end

00:11:51,810 --> 00:11:57,210
servers that could scale up and handle

00:11:54,990 --> 00:11:59,400
that demand rather than trying to write

00:11:57,210 --> 00:12:03,450
that in their legacy application they

00:11:59,400 --> 00:12:03,960
would that new technology in a in the

00:12:03,450 --> 00:12:06,360
newbies

00:12:03,960 --> 00:12:08,970
now sometimes shipping isn't enough you

00:12:06,360 --> 00:12:11,690
actually need a chainsaw to cut away

00:12:08,970 --> 00:12:13,890
some of the original functionality or

00:12:11,690 --> 00:12:16,020
new visas that you're going to write for

00:12:13,890 --> 00:12:16,980
example if you want to have one

00:12:16,020 --> 00:12:19,230
functionality

00:12:16,980 --> 00:12:20,850
maybe that's a new vis application that

00:12:19,230 --> 00:12:22,890
you put in front of it if you have a

00:12:20,850 --> 00:12:25,980
particularly performance sensitive tasks

00:12:22,890 --> 00:12:29,070
maybe you write that and go and you're

00:12:25,980 --> 00:12:31,980
still having API calls back to your

00:12:29,070 --> 00:12:34,200
existing lazy monolith but the new

00:12:31,980 --> 00:12:36,990
functionality can be written in more

00:12:34,200 --> 00:12:38,880
modern languages by different teams that

00:12:36,990 --> 00:12:41,640
can work with their own set of libraries

00:12:38,880 --> 00:12:45,750
and dependencies and it starts cleaning

00:12:41,640 --> 00:12:48,270
up all that that that monolith see bank

00:12:45,750 --> 00:12:52,380
in North Carolina had very good success

00:12:48,270 --> 00:12:55,320
with UJS applicative servers in front of

00:12:52,380 --> 00:12:58,980
their legacy Java navigation in order to

00:12:55,320 --> 00:13:01,860
be able to handle mobile clients now the

00:12:58,980 --> 00:13:04,530
key thought is the highest value today

00:13:01,860 --> 00:13:07,500
from cloud native is with stainless

00:13:04,530 --> 00:13:10,280
services so navigation front answer

00:13:07,500 --> 00:13:11,490
where you need resiliency load-balancing

00:13:10,280 --> 00:13:14,130
auto-scaling

00:13:11,490 --> 00:13:17,130
anything they will here is Wikipedia

00:13:14,130 --> 00:13:20,580
where they're taking their media with

00:13:17,130 --> 00:13:23,520
EPG Alpena servers and putting those

00:13:20,580 --> 00:13:26,520
into crannies but their data store which

00:13:23,520 --> 00:13:30,000
is a massive massive database if we're

00:13:26,520 --> 00:13:31,500
meeting on a bear valve server because

00:13:30,000 --> 00:13:35,280
they don't have a good enough story

00:13:31,500 --> 00:13:38,610
today to justify moving into two loud

00:13:35,280 --> 00:13:40,920
native and the idea that when you are

00:13:38,610 --> 00:13:43,950
eventually going to transition your data

00:13:40,920 --> 00:13:46,680
stores is still challenging today use

00:13:43,950 --> 00:13:49,590
legacy systems like a boat post vs. or

00:13:46,680 --> 00:13:52,920
Redis there are some interesting cloud

00:13:49,590 --> 00:13:56,580
native database solutions like Cockrell

00:13:52,920 --> 00:14:00,810
you me and the cast which came out of

00:13:56,580 --> 00:14:03,210
youtube there's also if you're in the

00:14:00,810 --> 00:14:06,570
public cloud a number of hosted data

00:14:03,210 --> 00:14:09,330
services like Amazon RDS and and who

00:14:06,570 --> 00:14:11,940
will spanner and others and but the idea

00:14:09,330 --> 00:14:15,060
that this really would be the last thing

00:14:11,940 --> 00:14:18,030
that you're transitioning to a cloud

00:14:15,060 --> 00:14:19,230
native architecture and then I would

00:14:18,030 --> 00:14:21,530
make the argument that you should

00:14:19,230 --> 00:14:24,420
consider a constellation of

00:14:21,530 --> 00:14:28,290
complementary projects such as the ones

00:14:24,420 --> 00:14:30,900
within India and so when you're changing

00:14:28,290 --> 00:14:33,780
out native environment so the biggest

00:14:30,900 --> 00:14:36,360
priorities are monitoring tracing and

00:14:33,780 --> 00:14:39,540
logging pre media monitoring of

00:14:36,360 --> 00:14:42,750
intriguing and foodies which was

00:14:39,540 --> 00:14:45,270
developed here in Japan a majority the

00:14:42,750 --> 00:14:47,970
developers are Japanese and we had the

00:14:45,270 --> 00:14:50,280
flu in detox yesterday then I'll just

00:14:47,970 --> 00:14:53,550
mention a few others later D is a

00:14:50,280 --> 00:14:56,760
service mesh to support more complicated

00:14:53,550 --> 00:15:00,300
versions of browsing GRDC is an

00:14:56,760 --> 00:15:04,320
extremely high performance API system

00:15:00,300 --> 00:15:08,880
that can replace JSON breast for DNS is

00:15:04,320 --> 00:15:12,150
a service discovery platform container

00:15:08,880 --> 00:15:13,589
key and rockets are above container

00:15:12,150 --> 00:15:16,560
runtimes that were originally added

00:15:13,589 --> 00:15:19,380
container II is the upstream runtime

00:15:16,560 --> 00:15:22,050
that's used in doctor and then finally

00:15:19,380 --> 00:15:24,390
the container network interface CNI is

00:15:22,050 --> 00:15:26,700
that about architecture for network

00:15:24,390 --> 00:15:31,470
plugins to support more complicated

00:15:26,700 --> 00:15:33,900
architectures and so eventually when you

00:15:31,470 --> 00:15:37,290
kicked away enough you can evolve your

00:15:33,900 --> 00:15:41,880
monolith into a beautiful micro service

00:15:37,290 --> 00:15:43,740
panel grover norquist in the united

00:15:41,880 --> 00:15:46,320
states who is always trying to lower

00:15:43,740 --> 00:15:48,330
taxes has afraid that he wants to get

00:15:46,320 --> 00:15:50,490
governments small enough that he can

00:15:48,330 --> 00:15:52,740
drown it in a bathtub

00:15:50,490 --> 00:15:55,050
maybe your goal is to eventually kill

00:15:52,740 --> 00:15:56,720
off your mullet more realistically it's

00:15:55,050 --> 00:15:59,130
going to stay around forever but

00:15:56,720 --> 00:16:01,770
hopefully you can have all pieces of it

00:15:59,130 --> 00:16:04,950
off and even have a beautiful collection

00:16:01,770 --> 00:16:06,450
of different micro services that are all

00:16:04,950 --> 00:16:10,890
connected together and being

00:16:06,450 --> 00:16:13,890
orchestrated in single system and so

00:16:10,890 --> 00:16:16,290
when you think of kubernetes and the

00:16:13,890 --> 00:16:18,180
kinds of architectures that it can work

00:16:16,290 --> 00:16:20,760
with I really want to emphasize this

00:16:18,180 --> 00:16:23,490
concept of there's a term that's soft

00:16:20,760 --> 00:16:26,130
bigotry of low expectations that you

00:16:23,490 --> 00:16:28,860
shouldn't just think oh I need to do a

00:16:26,130 --> 00:16:32,370
premium rewrite in order to get the

00:16:28,860 --> 00:16:35,010
benefits of cloud native the big message

00:16:32,370 --> 00:16:37,380
here for is the cocoon any loves

00:16:35,010 --> 00:16:40,380
brownfield applications and that there

00:16:37,380 --> 00:16:41,840
is an evolution path that pulls every

00:16:40,380 --> 00:16:47,000
Enterprise and

00:16:41,840 --> 00:16:49,040
company out there should be so if you

00:16:47,000 --> 00:16:50,900
download this presentation later or take

00:16:49,040 --> 00:16:54,110
a picture this fears of detailed

00:16:50,900 --> 00:16:55,820
articles on a few of the companies that

00:16:54,110 --> 00:16:59,000
I mentioned and there's a lot more key

00:16:55,820 --> 00:17:01,210
Studies on Google i/o and then actually

00:16:59,000 --> 00:17:04,670
talk about a lot of these similar themes

00:17:01,210 --> 00:17:07,670
and then finally I wanted to invite

00:17:04,670 --> 00:17:10,580
everyone to the big event that we're

00:17:07,670 --> 00:17:12,080
going to be having in Austin is it

00:17:10,580 --> 00:17:15,430
actually going to be one of the largest

00:17:12,080 --> 00:17:15,430

YouTube URL: https://www.youtube.com/watch?v=C1g9qV1vwFI


