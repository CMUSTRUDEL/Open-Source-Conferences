Title: 5 Years of Providing Root Shells to Strangers on the Internet - Stephane Graber, Canonical Ltd
Publication date: 2020-09-08
Playlist: Open Source Summit + Embedded Linux Conference NA 2020
Description: 
	5 Years of Providing Root Shells to Strangers on the Internet - Stephane Graber, Canonical Ltd
Captions: 
	00:00:03,120 --> 00:00:05,520
hello

00:00:11,440 --> 00:00:16,880
okay here we go so hi everyone i'm

00:00:14,639 --> 00:00:20,240
stephen grabber i work at canonical

00:00:16,880 --> 00:00:20,880
on the blacksd team i'm the project

00:00:20,240 --> 00:00:24,000
leader

00:00:20,880 --> 00:00:25,760
for lexi lex d like cfs

00:00:24,000 --> 00:00:27,359
and today we're going to be talking

00:00:25,760 --> 00:00:29,840
about

00:00:27,359 --> 00:00:33,359
five years of providing root shells to

00:00:29,840 --> 00:00:33,359
random strangers on the internet

00:00:33,680 --> 00:00:38,399
so what's all that about well

00:00:38,640 --> 00:00:43,200
we develop a piece of software that you

00:00:41,040 --> 00:00:44,480
can install it's a container manager it

00:00:43,200 --> 00:00:46,879
lets you you know

00:00:44,480 --> 00:00:48,559
run containers on your machine but we

00:00:46,879 --> 00:00:51,920
know that a lot of our users

00:00:48,559 --> 00:00:54,640
are not running linux and

00:00:51,920 --> 00:00:56,239
so to evaluate our software see how it

00:00:54,640 --> 00:00:57,360
works and play with it before they

00:00:56,239 --> 00:00:59,840
actually start using it

00:00:57,360 --> 00:01:01,199
on on some cloud instance or on some

00:00:59,840 --> 00:01:02,960
physical server

00:01:01,199 --> 00:01:04,640
we figured it would be quite convenient

00:01:02,960 --> 00:01:07,280
if they could just go on our website

00:01:04,640 --> 00:01:07,920
and click a link and then try the

00:01:07,280 --> 00:01:10,799
software

00:01:07,920 --> 00:01:12,159
right there for a few minutes and if

00:01:10,799 --> 00:01:13,439
they think it's useful for them then

00:01:12,159 --> 00:01:15,759
they can go and install it

00:01:13,439 --> 00:01:18,080
on in production we've been doing that

00:01:15,759 --> 00:01:19,759
for a number of years now as i mentioned

00:01:18,080 --> 00:01:22,159
and that's been quite successful we've

00:01:19,759 --> 00:01:23,040
had tens of thousands of users trying

00:01:22,159 --> 00:01:27,040
next year this way

00:01:23,040 --> 00:01:29,520
several thousand more every month

00:01:27,040 --> 00:01:30,240
but there were a few issues with that as

00:01:29,520 --> 00:01:34,000
a

00:01:30,240 --> 00:01:36,960
very complex system service lexi

00:01:34,000 --> 00:01:38,079
runs as root and now we had a bit of a

00:01:36,960 --> 00:01:40,079
problem of you know

00:01:38,079 --> 00:01:41,439
giving root shares to random strangers

00:01:40,079 --> 00:01:44,000
on the internet and

00:01:41,439 --> 00:01:46,320
trying to make this all safe because

00:01:44,000 --> 00:01:48,560
well we didn't really want to

00:01:46,320 --> 00:01:50,479
to have to deal with a lot of security

00:01:48,560 --> 00:01:54,799
issues and people breaking stuff

00:01:50,479 --> 00:01:58,479
left and right

00:01:54,799 --> 00:02:00,880
so um just a quick brief on what lexi is

00:01:58,479 --> 00:02:02,640
um because it might better explain what

00:02:00,880 --> 00:02:03,520
we're running in there and also what

00:02:02,640 --> 00:02:07,280
we've been using

00:02:03,520 --> 00:02:08,959
to protect those very sessions next is a

00:02:07,280 --> 00:02:09,679
system container and virtual machine

00:02:08,959 --> 00:02:11,599
manager

00:02:09,679 --> 00:02:13,599
that later part is somewhat new we've

00:02:11,599 --> 00:02:15,440
only been managing virtual machines with

00:02:13,599 --> 00:02:18,640
it for the past

00:02:15,440 --> 00:02:19,360
four to six months now for demo purposes

00:02:18,640 --> 00:02:22,239
we

00:02:19,360 --> 00:02:23,760
really only focus on containers letting

00:02:22,239 --> 00:02:25,280
random strangers on the internet run

00:02:23,760 --> 00:02:26,959
virtual machines

00:02:25,280 --> 00:02:28,160
is a bit trickier and not really

00:02:26,959 --> 00:02:28,879
something we're super keen on doing

00:02:28,160 --> 00:02:30,239
right now

00:02:28,879 --> 00:02:32,239
so we really just focus on running

00:02:30,239 --> 00:02:33,680
containers lexi

00:02:32,239 --> 00:02:35,760
unlike some of the other container

00:02:33,680 --> 00:02:37,440
managers lets you run

00:02:35,760 --> 00:02:40,080
system containers so there are full

00:02:37,440 --> 00:02:42,239
linux distributions that can install

00:02:40,080 --> 00:02:43,680
and run only normal packages in a normal

00:02:42,239 --> 00:02:44,800
workload we don't know what's going to

00:02:43,680 --> 00:02:47,599
run in there

00:02:44,800 --> 00:02:48,480
and so to some extent we can't really

00:02:47,599 --> 00:02:51,200
build like

00:02:48,480 --> 00:02:52,879
a very tight profile or restrictions

00:02:51,200 --> 00:02:54,080
around the expected workloads because

00:02:52,879 --> 00:02:55,680
we've got no idea what the workload is

00:02:54,080 --> 00:02:58,000
going to be

00:02:55,680 --> 00:02:58,720
like this supports a variety of storage

00:02:58,000 --> 00:03:02,159
options

00:02:58,720 --> 00:03:05,040
and network options we support

00:03:02,159 --> 00:03:07,040
the default rfs lvmcif and plain

00:03:05,040 --> 00:03:09,519
directory for storage for network we

00:03:07,040 --> 00:03:12,800
support just about anything from

00:03:09,519 --> 00:03:16,159
sr iov so for physical passthrough

00:03:12,800 --> 00:03:18,000
uh macvlan normal linux bridging

00:03:16,159 --> 00:03:19,519
ipvan we support a lot of different

00:03:18,000 --> 00:03:21,840
options around there

00:03:19,519 --> 00:03:23,040
and we offer a lot of knobs especially

00:03:21,840 --> 00:03:27,040
around security

00:03:23,040 --> 00:03:30,159
to restrict what the container can do

00:03:27,040 --> 00:03:32,959
or allow a otherwise pretty

00:03:30,159 --> 00:03:34,319
safe and privileged container to do some

00:03:32,959 --> 00:03:34,799
amount of privileged actions that we

00:03:34,319 --> 00:03:38,560
deem

00:03:34,799 --> 00:03:42,080
to be safe so that's kind of next

00:03:38,560 --> 00:03:42,640
in a nutshell now what we would like to

00:03:42,080 --> 00:03:45,599
demo

00:03:42,640 --> 00:03:46,000
through our website is the ability to

00:03:45,599 --> 00:03:48,480
create

00:03:46,000 --> 00:03:51,519
and start containers using images from

00:03:48,480 --> 00:03:53,360
an external image server

00:03:51,519 --> 00:03:56,159
make snapshots of those containers copy

00:03:53,360 --> 00:03:58,080
containers around install software

00:03:56,159 --> 00:03:59,360
whatever software the user feels like we

00:03:58,080 --> 00:04:00,400
don't we have no idea what they're gonna

00:03:59,360 --> 00:04:02,159
be installing

00:04:00,400 --> 00:04:04,319
um apply resource limits on those

00:04:02,159 --> 00:04:05,439
containers copy those containers to

00:04:04,319 --> 00:04:07,840
another system

00:04:05,439 --> 00:04:09,280
um so that includes like two of those

00:04:07,840 --> 00:04:11,360
sessions connecting to each other and

00:04:09,280 --> 00:04:13,120
then being able to exchange data

00:04:11,360 --> 00:04:15,439
so it's a reasonably complex demo but

00:04:13,120 --> 00:04:16,639
it's a good base overview of what 6d can

00:04:15,439 --> 00:04:19,440
do and with

00:04:16,639 --> 00:04:20,560
that's what we've been providing in one

00:04:19,440 --> 00:04:23,359
way or another for for

00:04:20,560 --> 00:04:23,359
a little while now

00:04:25,759 --> 00:04:29,759
so doing all of this safely well that's

00:04:28,960 --> 00:04:32,479
where things get

00:04:29,759 --> 00:04:34,639
get funny um so first of all let's look

00:04:32,479 --> 00:04:37,360
at container security for a tiny bit

00:04:34,639 --> 00:04:38,320
if you've been in uh the talk i just

00:04:37,360 --> 00:04:41,919
gave with christian

00:04:38,320 --> 00:04:43,280
you're gonna recognize that slide like

00:04:41,919 --> 00:04:44,720
i'm not gonna go in quite as much depth

00:04:43,280 --> 00:04:46,639
as we did because it was it would take

00:04:44,720 --> 00:04:48,560
another hour and a half

00:04:46,639 --> 00:04:50,880
but we can quickly go through the main

00:04:48,560 --> 00:04:52,960
components of continuous security

00:04:50,880 --> 00:04:54,320
so you've got the file system layer for

00:04:52,960 --> 00:04:56,479
containers

00:04:54,320 --> 00:04:57,440
that simply means the container has its

00:04:56,479 --> 00:04:59,120
own file system

00:04:57,440 --> 00:05:00,400
uh we might run it in a different index

00:04:59,120 --> 00:05:02,400
distribution we might be running the

00:05:00,400 --> 00:05:05,840
same as the host we might be running

00:05:02,400 --> 00:05:07,039
you know android um that comes with its

00:05:05,840 --> 00:05:09,680
own file system

00:05:07,039 --> 00:05:11,120
we need that to shred us slash inside

00:05:09,680 --> 00:05:12,960
that container

00:05:11,120 --> 00:05:14,560
so that's done through cherry topper

00:05:12,960 --> 00:05:16,320
truth pivot truth being the

00:05:14,560 --> 00:05:20,000
save variant of the two that's what xd

00:05:16,320 --> 00:05:20,000
does we just don't do through it

00:05:20,560 --> 00:05:26,320
we use namespaces uts lets you do

00:05:24,240 --> 00:05:27,600
hostname mount that's you create a new

00:05:26,320 --> 00:05:29,199
mount table

00:05:27,600 --> 00:05:31,600
bit namespace gets you a new process

00:05:29,199 --> 00:05:32,960
tree ibc namespace protects things like

00:05:31,600 --> 00:05:35,199
shared memory

00:05:32,960 --> 00:05:37,199
the network namespace gets your keys

00:05:35,199 --> 00:05:40,479
late as far as networking devices

00:05:37,199 --> 00:05:45,440
and firewall file firewall rules

00:05:40,479 --> 00:05:49,440
and routing the username space gets you

00:05:45,440 --> 00:05:50,800
your shifted subset of your ids and gids

00:05:49,440 --> 00:05:52,000
from the host so that

00:05:50,800 --> 00:05:54,240
should you be able to escape the

00:05:52,000 --> 00:05:57,280
container somehow you

00:05:54,240 --> 00:06:00,560
are not rude on the host

00:05:57,280 --> 00:06:03,520
um the secret name space is mostly uh

00:06:00,560 --> 00:06:05,280
to allow for nested containers and

00:06:03,520 --> 00:06:06,880
systems in a container to

00:06:05,280 --> 00:06:08,319
to be able to manage their own subsidy

00:06:06,880 --> 00:06:10,960
groups so that's that's why it's

00:06:08,319 --> 00:06:12,560
important there and there's another

00:06:10,960 --> 00:06:12,880
namespace that was added very recently

00:06:12,560 --> 00:06:14,800
that

00:06:12,880 --> 00:06:16,720
one you started supporting last week

00:06:14,800 --> 00:06:18,560
which is the timeline space

00:06:16,720 --> 00:06:19,840
that one lets you set an offset compared

00:06:18,560 --> 00:06:20,479
to the base system clock for your

00:06:19,840 --> 00:06:23,280
container

00:06:20,479 --> 00:06:23,919
it's not particularly useful for most

00:06:23,280 --> 00:06:27,039
users so

00:06:23,919 --> 00:06:30,319
lexi doesn't drive it right now

00:06:27,039 --> 00:06:32,160
now on the security layer

00:06:30,319 --> 00:06:34,319
in all the examples we're going to be

00:06:32,160 --> 00:06:35,919
giving here for online demos

00:06:34,319 --> 00:06:37,759
we will not be doing privileged

00:06:35,919 --> 00:06:39,840
containers because those are

00:06:37,759 --> 00:06:41,520
just unsafe and never something you

00:06:39,840 --> 00:06:43,039
should provide to anyone on the internet

00:06:41,520 --> 00:06:45,199
or they're going to get full root access

00:06:43,039 --> 00:06:48,560
on your system in a matter of minutes

00:06:45,199 --> 00:06:50,080
no we're going to be using spaces so on

00:06:48,560 --> 00:06:53,280
privileged containers

00:06:50,080 --> 00:06:54,880
which means that the security items you

00:06:53,280 --> 00:06:56,240
see there are effectively an extra

00:06:54,880 --> 00:06:58,960
safety net

00:06:56,240 --> 00:07:00,240
the username space on its own means that

00:06:58,960 --> 00:07:02,160
the container is running

00:07:00,240 --> 00:07:04,160
with the same privileges as a normal

00:07:02,160 --> 00:07:06,960
user it is

00:07:04,160 --> 00:07:08,880
given extra privileges on resources that

00:07:06,960 --> 00:07:10,319
it creates itself but doesn't have any

00:07:08,880 --> 00:07:14,479
rights on anything outside

00:07:10,319 --> 00:07:15,199
of of that namespace now we can use lsms

00:07:14,479 --> 00:07:17,759
on top of that

00:07:15,199 --> 00:07:18,240
in our case uh we'll be using apparently

00:07:17,759 --> 00:07:21,120
to

00:07:18,240 --> 00:07:23,120
prevent potential issues so say you've

00:07:21,120 --> 00:07:24,479
got a kernel issue that lets you bypass

00:07:23,120 --> 00:07:26,479
some of the username space

00:07:24,479 --> 00:07:27,520
aparna maybe won't be affected by that

00:07:26,479 --> 00:07:29,199
bug and might

00:07:27,520 --> 00:07:31,520
prevent you from still accessing

00:07:29,199 --> 00:07:34,560
resources you should not be able to see

00:07:31,520 --> 00:07:36,000
same thing with sec comp um like c

00:07:34,560 --> 00:07:38,160
scores that are not

00:07:36,000 --> 00:07:40,319
suited for unpredicted use will not be

00:07:38,160 --> 00:07:42,880
allowed because of the user name space

00:07:40,319 --> 00:07:44,720
but there's no harm in having a second

00:07:42,880 --> 00:07:46,720
policy which also blocks them

00:07:44,720 --> 00:07:47,919
because again if there's some kind of

00:07:46,720 --> 00:07:49,680
bug in which okay

00:07:47,919 --> 00:07:51,280
like in where in some situations you

00:07:49,680 --> 00:07:53,120
might be able to use

00:07:51,280 --> 00:07:55,280
a privileged system called as an

00:07:53,120 --> 00:07:55,759
improved user having assist having a

00:07:55,280 --> 00:07:59,440
second

00:07:55,759 --> 00:08:00,319
policy um ahead of that which rejects it

00:07:59,440 --> 00:08:03,680
anyway

00:08:00,319 --> 00:08:04,240
can only help security and the same can

00:08:03,680 --> 00:08:06,479
go with

00:08:04,240 --> 00:08:08,639
capabilities where if you know that some

00:08:06,479 --> 00:08:11,520
capabilities you just don't need

00:08:08,639 --> 00:08:13,520
you can start dropping those and same

00:08:11,520 --> 00:08:15,360
thing even though

00:08:13,520 --> 00:08:17,120
they were not you were not supposed to

00:08:15,360 --> 00:08:18,639
be able to use those in the first place

00:08:17,120 --> 00:08:20,720
because of the username space

00:08:18,639 --> 00:08:22,560
now you really really don't have them um

00:08:20,720 --> 00:08:25,120
so even if you escape you

00:08:22,560 --> 00:08:26,639
you shouldn't have any problems there

00:08:25,120 --> 00:08:29,680
for resource control

00:08:26,639 --> 00:08:31,520
we'll be using c groups um which gives

00:08:29,680 --> 00:08:33,039
you some some amount of control on

00:08:31,520 --> 00:08:35,120
the resources that the container is

00:08:33,039 --> 00:08:36,159
allowed to use and can avoid a whole

00:08:35,120 --> 00:08:38,880
bunch of

00:08:36,159 --> 00:08:42,240
issues around denial of service and just

00:08:38,880 --> 00:08:42,240
bad neighbor type situations

00:08:44,240 --> 00:08:48,080
okay let's go through the requirements

00:08:46,240 --> 00:08:50,160
for that service

00:08:48,080 --> 00:08:52,160
so first of all we wanted it to be fast

00:08:50,160 --> 00:08:53,600
so new sessions need to start within

00:08:52,160 --> 00:08:55,920
five seconds

00:08:53,600 --> 00:08:58,080
we wanted it to be scalable right now

00:08:55,920 --> 00:08:59,760
the public service is configured for 32

00:08:58,080 --> 00:09:01,760
sessions because we didn't have that

00:08:59,760 --> 00:09:03,839
many concurrent users so we just

00:09:01,760 --> 00:09:04,800
removed some of the ram and made it

00:09:03,839 --> 00:09:06,959
lighter but

00:09:04,800 --> 00:09:09,600
we could easily move it back to 64

00:09:06,959 --> 00:09:12,160
concurrent sessions no problem

00:09:09,600 --> 00:09:13,360
it needs to be safe we don't want a user

00:09:12,160 --> 00:09:16,480
on there to start

00:09:13,360 --> 00:09:17,680
attacking other users or outside

00:09:16,480 --> 00:09:19,839
services

00:09:17,680 --> 00:09:21,200
or be able to escape the container in in

00:09:19,839 --> 00:09:23,279
some way

00:09:21,200 --> 00:09:24,800
and it needs to be both reliable and low

00:09:23,279 --> 00:09:26,959
maintenance we don't

00:09:24,800 --> 00:09:28,640
like we want this is going to be the

00:09:26,959 --> 00:09:30,240
entry point for a lot of our users we

00:09:28,640 --> 00:09:32,160
don't want those users to have their

00:09:30,240 --> 00:09:34,720
first expense with lexi be a crash

00:09:32,160 --> 00:09:36,640
that'd be quite bad so we want the

00:09:34,720 --> 00:09:40,720
service to pretty much always work

00:09:36,640 --> 00:09:42,800
um we also are a very small team

00:09:40,720 --> 00:09:44,880
developing a piece of apartment software

00:09:42,800 --> 00:09:46,480
we are not this admins our job is not to

00:09:44,880 --> 00:09:48,640
monitor this service

00:09:46,480 --> 00:09:50,480
so we want it to just run itself the

00:09:48,640 --> 00:09:52,080
only time at which

00:09:50,480 --> 00:09:53,600
we should be involved to the service is

00:09:52,080 --> 00:09:55,120
to update it every time we do a new

00:09:53,600 --> 00:09:56,800
release to move it on to the next

00:09:55,120 --> 00:09:59,519
release of flex d so that people can

00:09:56,800 --> 00:09:59,519
experience that

00:10:00,880 --> 00:10:05,519
now before we go into some of the

00:10:03,519 --> 00:10:08,640
challenges and problems and

00:10:05,519 --> 00:10:10,720
uh how we and pull that off

00:10:08,640 --> 00:10:12,800
we can go through the the existing

00:10:10,720 --> 00:10:13,680
service and just kind of show you how

00:10:12,800 --> 00:10:16,399
that all works

00:10:13,680 --> 00:10:17,600
so let me move the mic here because i

00:10:16,399 --> 00:10:20,920
need to be closer to

00:10:17,600 --> 00:10:22,800
my other screen there we go

00:10:20,920 --> 00:10:27,040
[Music]

00:10:22,800 --> 00:10:27,040
so let's switch to

00:10:27,279 --> 00:10:29,680
this

00:10:30,320 --> 00:10:34,640
so that's the entry point uh for online

00:10:32,560 --> 00:10:35,680
demo service you've got some basic terms

00:10:34,640 --> 00:10:38,560
of service which

00:10:35,680 --> 00:10:40,320
mostly there are a legal safety net in

00:10:38,560 --> 00:10:42,800
case someone does abuse the service

00:10:40,320 --> 00:10:45,200
uh or find some way around those

00:10:42,800 --> 00:10:47,279
security measures we've put in place

00:10:45,200 --> 00:10:48,640
you could you hit the button saying i

00:10:47,279 --> 00:10:51,279
want a session

00:10:48,640 --> 00:10:53,760
takes about five seconds and you get a

00:10:51,279 --> 00:10:53,760
rude shot

00:10:54,480 --> 00:10:56,720
so yeah we weren't kidding when we were

00:10:55,680 --> 00:10:58,240
saying we're giving good access to

00:10:56,720 --> 00:11:00,800
random people on the internet we

00:10:58,240 --> 00:11:00,800
definitely are

00:11:01,360 --> 00:11:05,920
now if you're an id you see running root

00:11:03,600 --> 00:11:08,720
in the root group

00:11:05,920 --> 00:11:10,160
if you look at processes uh we've we've

00:11:08,720 --> 00:11:10,800
trimmed the container as much as

00:11:10,160 --> 00:11:12,959
possible

00:11:10,800 --> 00:11:14,320
not for security concerns just to not

00:11:12,959 --> 00:11:16,240
waste resources

00:11:14,320 --> 00:11:18,160
so even though we do run systemd we only

00:11:16,240 --> 00:11:18,640
run just the one unit we care about

00:11:18,160 --> 00:11:20,560
which is

00:11:18,640 --> 00:11:22,720
the lxd demand and everything else is

00:11:20,560 --> 00:11:26,000
off because it's just plain

00:11:22,720 --> 00:11:28,720
not needed now

00:11:26,000 --> 00:11:29,120
a normal user would then go down there

00:11:28,720 --> 00:11:32,480
and

00:11:29,120 --> 00:11:34,640
go through some of the instructions um

00:11:32,480 --> 00:11:36,240
for example you can click on

00:11:34,640 --> 00:11:38,320
instructions that executes the command

00:11:36,240 --> 00:11:39,760
immediately up there

00:11:38,320 --> 00:11:42,000
there's like instruction to create a new

00:11:39,760 --> 00:11:45,279
container so they can click on that and

00:11:42,000 --> 00:11:45,279
we'll see it pulls the image

00:11:47,200 --> 00:11:51,600
we'll unpack it and then create the

00:11:48,800 --> 00:11:54,720
container there we go

00:11:51,600 --> 00:11:56,880
so now that user has created a container

00:11:54,720 --> 00:11:59,200
running on next day

00:11:56,880 --> 00:12:00,000
um let's launch ourselves another

00:11:59,200 --> 00:12:11,040
container

00:12:00,000 --> 00:12:14,160
let's place this one off ubuntu 2004.

00:12:11,040 --> 00:12:16,959
give it a few seconds there we go

00:12:14,160 --> 00:12:17,440
and it should be put it at this point it

00:12:16,959 --> 00:12:20,959
is

00:12:17,440 --> 00:12:22,240
now let's get a shot inside there

00:12:20,959 --> 00:12:24,800
this one we can see has a lot more

00:12:22,240 --> 00:12:27,680
processes running that's because it's a

00:12:24,800 --> 00:12:30,720
clean ubuntu 2004 image it's not a

00:12:27,680 --> 00:12:34,800
customized sim image or anything

00:12:30,720 --> 00:12:34,800
and let's install sl

00:12:35,519 --> 00:12:39,600
so as you can see i'm perfectly capable

00:12:38,000 --> 00:12:40,880
to hit the internet and actually

00:12:39,600 --> 00:12:44,240
download packages from

00:12:40,880 --> 00:12:45,440
from that environment and we can run a

00:12:44,240 --> 00:12:52,079
cell and see a nice

00:12:45,440 --> 00:12:55,200
train crossing the screen

00:12:52,079 --> 00:12:57,360
now that nested container um well that

00:12:55,200 --> 00:12:57,680
that container is running now has access

00:12:57,360 --> 00:13:01,279
to

00:12:57,680 --> 00:13:01,279
all the resources of its parents

00:13:02,800 --> 00:13:11,839
we can see it sees two cpus and

00:13:06,399 --> 00:13:14,160
what is that 256 megs of ram effectively

00:13:11,839 --> 00:13:14,959
but we can we can change that so the

00:13:14,160 --> 00:13:16,160
user

00:13:14,959 --> 00:13:19,200
while playing with your service can

00:13:16,160 --> 00:13:21,279
probably reduce

00:13:19,200 --> 00:13:22,320
the memory and apply further memory

00:13:21,279 --> 00:13:24,800
limits on the

00:13:22,320 --> 00:13:24,800
workloads

00:13:25,680 --> 00:13:29,279
and we see the memory has been reduced

00:13:32,880 --> 00:13:41,760
the cpu limits don't always get to apply

00:13:37,279 --> 00:13:41,760
without a restart but there we go

00:13:43,839 --> 00:13:48,240
now we can do some as i mentioned we can

00:13:47,519 --> 00:13:50,959
do some

00:13:48,240 --> 00:13:53,279
fancier things there um say i get

00:13:50,959 --> 00:14:02,399
another session

00:13:53,279 --> 00:14:04,639
here and i started

00:14:02,399 --> 00:14:05,760
at the top i'm given a command which is

00:14:04,639 --> 00:14:07,920
used to

00:14:05,760 --> 00:14:10,000
connect two sessions together so i can

00:14:07,920 --> 00:14:12,959
copy that into the first one

00:14:10,000 --> 00:14:13,920
say yes and now that means that that

00:14:12,959 --> 00:14:16,399
particular

00:14:13,920 --> 00:14:17,440
next client can see both itself and it

00:14:16,399 --> 00:14:20,560
can see

00:14:17,440 --> 00:14:20,560
the other session

00:14:20,800 --> 00:14:24,480
that's another funny aspect because we

00:14:22,880 --> 00:14:25,600
actually need networking working between

00:14:24,480 --> 00:14:27,680
them

00:14:25,600 --> 00:14:29,440
let's create a snapshot of that f1

00:14:27,680 --> 00:14:32,160
container we created

00:14:29,440 --> 00:14:33,120
and now let's move well let's copy that

00:14:32,160 --> 00:14:34,959
snapshot

00:14:33,120 --> 00:14:38,320
onto the second instance as a new

00:14:34,959 --> 00:14:38,320
container called f2

00:14:38,399 --> 00:14:44,320
so now that's doing bfs and then receive

00:14:41,680 --> 00:14:47,360
of that container from one demo instance

00:14:44,320 --> 00:14:47,360
to another demo instance

00:14:48,720 --> 00:14:53,760
there we go and now we can start it

00:14:56,240 --> 00:14:59,360
and so if we just local that's what we

00:14:58,399 --> 00:15:00,959
have and if we see

00:14:59,360 --> 00:15:02,480
another one that's what we have over

00:15:00,959 --> 00:15:06,880
there and

00:15:02,480 --> 00:15:09,040
we can get a shell into that remote

00:15:06,880 --> 00:15:12,079
container and just interact with it

00:15:09,040 --> 00:15:13,920
perfectly normally

00:15:12,079 --> 00:15:15,040
so that's the stuff that's possible i

00:15:13,920 --> 00:15:16,399
mean there's there are a lot more

00:15:15,040 --> 00:15:19,120
features that are possible

00:15:16,399 --> 00:15:20,320
um like one of the things we've got in

00:15:19,120 --> 00:15:23,440
our example is just

00:15:20,320 --> 00:15:25,040
showing you starting other distros

00:15:23,440 --> 00:15:27,360
so in this case i'm starting a centos

00:15:25,040 --> 00:15:29,199
eight container for example

00:15:27,360 --> 00:15:31,360
our entire image server is available and

00:15:29,199 --> 00:15:34,160
people can use that

00:15:31,360 --> 00:15:36,800
at this up until they hit the disk limit

00:15:34,160 --> 00:15:36,800
we've applied

00:15:37,600 --> 00:15:42,320
since it's a bit larger takes a tiny bit

00:15:39,600 --> 00:15:45,440
longer to to unpack

00:15:42,320 --> 00:15:48,959
there we go so if i get

00:15:45,440 --> 00:15:48,959
into centers eight

00:15:52,839 --> 00:15:57,440
here

00:15:55,440 --> 00:15:59,920
you confirm it's running red at uh well

00:15:57,440 --> 00:16:01,920
centers in this case

00:15:59,920 --> 00:16:03,519
now for the things that are other things

00:16:01,920 --> 00:16:06,320
that are possible and not possible

00:16:03,519 --> 00:16:07,600
so in the brief session that your debate

00:16:06,320 --> 00:16:10,240
is returning or your offered

00:16:07,600 --> 00:16:10,639
you can totally update your package list

00:16:10,240 --> 00:16:12,880
that's

00:16:10,639 --> 00:16:15,120
that's perfectly fine we'll let you do

00:16:12,880 --> 00:16:15,120
that

00:16:17,120 --> 00:16:23,279
come on all right

00:16:21,199 --> 00:16:24,720
um we even let you install packages

00:16:23,279 --> 00:16:27,839
there's also

00:16:24,720 --> 00:16:27,839
no real problem with that

00:16:29,600 --> 00:16:40,000
come on

00:16:37,279 --> 00:16:40,880
you can do it or is the last percent

00:16:40,000 --> 00:16:44,079
always

00:16:40,880 --> 00:16:50,880
longer than any of the others okay um

00:16:44,079 --> 00:16:52,240
so it's an installed curl

00:16:50,880 --> 00:16:53,600
again no problem there we're just

00:16:52,240 --> 00:16:56,000
pulling a bunch of packages from the

00:16:53,600 --> 00:16:56,000
internet

00:16:57,279 --> 00:17:05,839
and installing them

00:17:12,799 --> 00:17:16,000
processing trigger

00:17:16,319 --> 00:17:21,360
there we go all right now at last some

00:17:19,760 --> 00:17:25,760
things that do not work

00:17:21,360 --> 00:17:25,760
uh they try to access google

00:17:27,039 --> 00:17:33,840
that doesn't work let's try to access

00:17:30,640 --> 00:17:36,320
some my pv4 address that's weird

00:17:33,840 --> 00:17:37,280
what's going on here well we don't give

00:17:36,320 --> 00:17:40,480
you any ipv6

00:17:37,280 --> 00:17:42,400
ipv4 addresses we only have ipv6

00:17:40,480 --> 00:17:44,160
but we don't really need ipv4 so why

00:17:42,400 --> 00:17:45,679
would we give that to you

00:17:44,160 --> 00:17:47,280
and if you try to access something about

00:17:45,679 --> 00:17:49,280
ipv6 you'll notice that

00:17:47,280 --> 00:17:51,679
same thing we don't let you access a lot

00:17:49,280 --> 00:17:51,679
of things

00:17:52,480 --> 00:17:55,679
so that's pretty much the state of the

00:17:54,320 --> 00:18:01,840
set of this um

00:17:55,679 --> 00:18:01,840
let's go back to

00:18:02,080 --> 00:18:04,400
okay

00:18:07,600 --> 00:18:11,120
so let's go through some of the problems

00:18:10,559 --> 00:18:14,880
with

00:18:11,120 --> 00:18:16,880
running a service like this

00:18:14,880 --> 00:18:19,360
possibly from most obvious to list

00:18:16,880 --> 00:18:22,080
obviously from easiest to deal with to

00:18:19,360 --> 00:18:23,280
worst to deal with the first one would

00:18:22,080 --> 00:18:26,960
be networking

00:18:23,280 --> 00:18:28,000
so most i mean the most common issue on

00:18:26,960 --> 00:18:30,720
there is really people

00:18:28,000 --> 00:18:32,080
trying to attack uh outside services

00:18:30,720 --> 00:18:35,200
because they feel like

00:18:32,080 --> 00:18:36,480
they've got an easy road shell and they

00:18:35,200 --> 00:18:38,400
they're reasonably sure they're

00:18:36,480 --> 00:18:40,320
anonymous to some extent

00:18:38,400 --> 00:18:42,240
and that they can then use that to do

00:18:40,320 --> 00:18:43,679
mass mailing or attacking servers or

00:18:42,240 --> 00:18:45,679
scanning people

00:18:43,679 --> 00:18:47,200
so that's that's a bit of a common

00:18:45,679 --> 00:18:48,880
pattern for what we've seen as far as

00:18:47,200 --> 00:18:51,440
networking

00:18:48,880 --> 00:18:53,120
the other thing which less people try is

00:18:51,440 --> 00:18:54,480
interfering with other containers

00:18:53,120 --> 00:18:56,480
effectively just making the entire

00:18:54,480 --> 00:18:58,240
experience miserable for other users

00:18:56,480 --> 00:18:59,440
a bit just rewarding because you're not

00:18:58,240 --> 00:19:00,799
actually doing something that might own

00:18:59,440 --> 00:19:01,360
you money you're really just annoying

00:19:00,799 --> 00:19:03,120
people

00:19:01,360 --> 00:19:05,200
so eventually you're probably gonna get

00:19:03,120 --> 00:19:07,039
bored of doing that but

00:19:05,200 --> 00:19:08,880
it's yeah it's just something something

00:19:07,039 --> 00:19:10,000
has to keep in mind uh we've got some

00:19:08,880 --> 00:19:12,240
solutions for that

00:19:10,000 --> 00:19:13,200
the first one is firewall the hell out

00:19:12,240 --> 00:19:14,880
of everything

00:19:13,200 --> 00:19:16,480
which is exactly what we're doing as

00:19:14,880 --> 00:19:18,720
you've seen we can't reach google we

00:19:16,480 --> 00:19:20,400
can't reach a lot of other things

00:19:18,720 --> 00:19:23,200
the only services that are effectively

00:19:20,400 --> 00:19:26,480
allowed are services that we ourselves

00:19:23,200 --> 00:19:28,240
own or that we have an agreement with

00:19:26,480 --> 00:19:30,160
the people that own them

00:19:28,240 --> 00:19:31,760
so in this case i do work for canonical

00:19:30,160 --> 00:19:33,280
we make ubuntu so i don't really have a

00:19:31,760 --> 00:19:34,559
concern with letting someone access new

00:19:33,280 --> 00:19:36,080
moon to archive servers

00:19:34,559 --> 00:19:38,000
because i know they're static web

00:19:36,080 --> 00:19:39,120
servers anyways so there's not much you

00:19:38,000 --> 00:19:42,400
can do there

00:19:39,120 --> 00:19:44,799
um and it's pretty easy to set up rules

00:19:42,400 --> 00:19:46,160
to just allow those very specific use

00:19:44,799 --> 00:19:48,480
cases we care about

00:19:46,160 --> 00:19:49,679
same thing with the image servers we run

00:19:48,480 --> 00:19:51,120
the image servers

00:19:49,679 --> 00:19:53,280
we don't have any concerns with people

00:19:51,120 --> 00:19:54,320
trying to attack those we also know that

00:19:53,280 --> 00:19:58,000
they're fully static

00:19:54,320 --> 00:19:58,000
same thing so we just allowed those

00:19:58,240 --> 00:20:01,760
as far as attacks between containers

00:20:00,240 --> 00:20:02,799
that's where things get a bit a bit

00:20:01,760 --> 00:20:05,039
weirder

00:20:02,799 --> 00:20:06,559
you can restrict internal networking

00:20:05,039 --> 00:20:08,400
using filters

00:20:06,559 --> 00:20:10,400
that doesn't always work depending on

00:20:08,400 --> 00:20:12,320
what kind of workload you care about so

00:20:10,400 --> 00:20:14,720
the filters in xd work perfectly well

00:20:12,320 --> 00:20:17,280
you can filter ipv4 ipv6 and max

00:20:14,720 --> 00:20:19,760
proofing no problem

00:20:17,280 --> 00:20:21,200
but if your workload requires bridging

00:20:19,760 --> 00:20:22,720
or getting it's

00:20:21,200 --> 00:20:26,080
a separate mac address on the parrot

00:20:22,720 --> 00:20:27,520
network then that that just can't work

00:20:26,080 --> 00:20:29,679
so it's kind of a bit of a balancing

00:20:27,520 --> 00:20:34,000
game there

00:20:29,679 --> 00:20:35,520
the other thing to cover are privileges

00:20:34,000 --> 00:20:37,440
so i kind of hinted at that earlier

00:20:35,520 --> 00:20:41,520
around the username space

00:20:37,440 --> 00:20:45,120
but consider escape is a real

00:20:41,520 --> 00:20:47,039
issue with that kind of services and

00:20:45,120 --> 00:20:48,880
you want to be careful of what you're

00:20:47,039 --> 00:20:52,000
doing there um

00:20:48,880 --> 00:20:53,200
that mostly mean no no previous

00:20:52,000 --> 00:20:54,720
containers using onion previous

00:20:53,200 --> 00:20:57,360
containers

00:20:54,720 --> 00:20:58,000
the other aspect to that is being able

00:20:57,360 --> 00:21:00,799
to

00:20:58,000 --> 00:21:01,280
create denial of service attacks based

00:21:00,799 --> 00:21:04,640
on

00:21:01,280 --> 00:21:06,320
shared uids and gids between containers

00:21:04,640 --> 00:21:07,679
that's possible even between

00:21:06,320 --> 00:21:10,080
unprivileged containers

00:21:07,679 --> 00:21:11,600
so naive implementations of and

00:21:10,080 --> 00:21:13,600
privileged containers

00:21:11,600 --> 00:21:15,760
can get you into trouble still you need

00:21:13,600 --> 00:21:18,320
you need to be quite careful with that

00:21:15,760 --> 00:21:19,280
the solutions there for the container

00:21:18,320 --> 00:21:21,360
escape case

00:21:19,280 --> 00:21:22,559
is what i covered in security slide

00:21:21,360 --> 00:21:24,880
earlier so

00:21:22,559 --> 00:21:26,799
use the username space setup setcomp

00:21:24,880 --> 00:21:29,440
setup lsms

00:21:26,799 --> 00:21:30,960
so that you've got your main mitigation

00:21:29,440 --> 00:21:32,480
measure being the user name space with

00:21:30,960 --> 00:21:35,520
the rest as safety nets

00:21:32,480 --> 00:21:35,520
should something go wrong

00:21:35,919 --> 00:21:40,640
for the denial of service part what you

00:21:38,000 --> 00:21:42,159
need are isolated username spaces

00:21:40,640 --> 00:21:44,720
that's something that xd supports it's a

00:21:42,159 --> 00:21:45,919
configuration flag and that means that

00:21:44,720 --> 00:21:50,480
every single container

00:21:45,919 --> 00:21:52,400
gets its own range of 65 and 536 uids

00:21:50,480 --> 00:21:54,240
and gi days that do not

00:21:52,400 --> 00:21:56,400
overlap on the host with any other

00:21:54,240 --> 00:21:57,840
container that does restrict the number

00:21:56,400 --> 00:21:58,960
of containers you can run but that

00:21:57,840 --> 00:22:01,360
restricts that to

00:21:58,960 --> 00:22:03,600
65 000 or so which is usually not a

00:22:01,360 --> 00:22:05,120
problem

00:22:03,600 --> 00:22:06,799
but it it completely prevents that

00:22:05,120 --> 00:22:08,080
entire class of attack like it is no

00:22:06,799 --> 00:22:10,840
longer possible to do

00:22:08,080 --> 00:22:13,840
a new limit type denial of service

00:22:10,840 --> 00:22:13,840
attacks

00:22:14,559 --> 00:22:17,679
um resource consumption so that's kind

00:22:16,559 --> 00:22:20,960
of your aspect

00:22:17,679 --> 00:22:21,840
of that we need to deal with two

00:22:20,960 --> 00:22:25,200
different things

00:22:21,840 --> 00:22:25,840
one is just load on the service as many

00:22:25,200 --> 00:22:28,880
people

00:22:25,840 --> 00:22:30,640
use it so we obviously see that every

00:22:28,880 --> 00:22:32,559
time we do a major new release because

00:22:30,640 --> 00:22:35,760
the service is used at 100

00:22:32,559 --> 00:22:39,840
for a number of hours or days

00:22:35,760 --> 00:22:40,640
and we don't want one user to be able to

00:22:39,840 --> 00:22:42,480
use

00:22:40,640 --> 00:22:45,360
the bulk of the resources and then gave

00:22:42,480 --> 00:22:46,720
a very bad experience to everyone else

00:22:45,360 --> 00:22:48,240
the other aspect is that there's there

00:22:46,720 --> 00:22:49,600
are gonna be some people there to just

00:22:48,240 --> 00:22:51,520
try and annoy everyone else so they're

00:22:49,600 --> 00:22:52,960
gonna try and do denial service attacks

00:22:51,520 --> 00:22:54,880
they're gonna try to run four bombs

00:22:52,960 --> 00:22:55,600
they're gonna try to use all the cpu all

00:22:54,880 --> 00:22:59,039
the memory

00:22:55,600 --> 00:23:00,400
or all the network um

00:22:59,039 --> 00:23:03,280
the solutions there are pretty much the

00:23:00,400 --> 00:23:06,000
same in both cases which is c groups

00:23:03,280 --> 00:23:08,480
so you want to set cpu memory and

00:23:06,000 --> 00:23:12,559
network limits um

00:23:08,480 --> 00:23:14,000
to just make it fair for everyone so

00:23:12,559 --> 00:23:15,440
like certain amount of memory that

00:23:14,000 --> 00:23:16,320
everyone gets the amount of cpu that

00:23:15,440 --> 00:23:18,880
everyone gets

00:23:16,320 --> 00:23:19,919
other commissioning is perfectly fine

00:23:18,880 --> 00:23:22,080
there's nothing wrong

00:23:19,919 --> 00:23:24,159
with that but you need to kind of know

00:23:22,080 --> 00:23:27,280
what your

00:23:24,159 --> 00:23:28,960
maximum usage pattern will be and what

00:23:27,280 --> 00:23:30,559
your normal usage pattern looks like

00:23:28,960 --> 00:23:32,159
and kind of set the limit somewhere in

00:23:30,559 --> 00:23:35,760
between

00:23:32,159 --> 00:23:37,760
now for the u.s attacks you need some

00:23:35,760 --> 00:23:38,640
extra limits around things like process

00:23:37,760 --> 00:23:40,480
limits

00:23:38,640 --> 00:23:42,159
so that if someone tries to run a fork

00:23:40,480 --> 00:23:44,240
bomb all they're gonna do is

00:23:42,159 --> 00:23:45,440
kill their container effectively like

00:23:44,240 --> 00:23:46,960
they're gonna run themselves out of

00:23:45,440 --> 00:23:50,080
processes but they're not gonna

00:23:46,960 --> 00:23:51,760
take out the entire system

00:23:50,080 --> 00:23:53,120
the interesting thing here is that when

00:23:51,760 --> 00:23:54,720
they do it

00:23:53,120 --> 00:23:56,240
they will it will look to them to some

00:23:54,720 --> 00:23:57,679
extent like if they succeeded because

00:23:56,240 --> 00:23:59,120
like their terminal won't work anymore

00:23:57,679 --> 00:24:00,480
if they try to spawn another terminal it

00:23:59,120 --> 00:24:02,080
won't work either they'll be like hey

00:24:00,480 --> 00:24:03,919
what took down the service

00:24:02,080 --> 00:24:05,120
when they've just taken down themselves

00:24:03,919 --> 00:24:07,600
which that's

00:24:05,120 --> 00:24:08,799
great exactly what we want um same goes

00:24:07,600 --> 00:24:10,480
with the memory limits

00:24:08,799 --> 00:24:12,320
you know they're gonna get weird errors

00:24:10,480 --> 00:24:14,000
memory related they will trigger the out

00:24:12,320 --> 00:24:14,720
of memory killer they will trigger a lot

00:24:14,000 --> 00:24:17,760
of

00:24:14,720 --> 00:24:19,360
like nasty looking areas

00:24:17,760 --> 00:24:21,039
but it really only affects themselves so

00:24:19,360 --> 00:24:23,039
it's fine

00:24:21,039 --> 00:24:24,880
you probably also want to restrict just

00:24:23,039 --> 00:24:27,120
the length of the session

00:24:24,880 --> 00:24:28,000
in our case we give 30 minutes slots

00:24:27,120 --> 00:24:29,919
it's just

00:24:28,000 --> 00:24:31,279
yeah makes it a bit more fair so that

00:24:29,919 --> 00:24:34,000
everyone has a chance

00:24:31,279 --> 00:24:35,440
also prevents people from walking around

00:24:34,000 --> 00:24:36,640
for too long

00:24:35,440 --> 00:24:38,880
and we also restrict the number of

00:24:36,640 --> 00:24:39,919
sessions per iep because same thing

00:24:38,880 --> 00:24:41,520
there's no

00:24:39,919 --> 00:24:43,279
like you need to have more than one of

00:24:41,520 --> 00:24:46,320
them because otherwise you can't

00:24:43,279 --> 00:24:49,039
do the copy demo i did but

00:24:46,320 --> 00:24:49,039
if you've got

00:24:49,360 --> 00:24:52,159
if you allow a lot of them then someone

00:24:50,799 --> 00:24:55,679
might just end up using half of your

00:24:52,159 --> 00:24:55,679
slots which would be unfortunate

00:24:56,080 --> 00:25:00,320
okay the next class are kernel bugs that

00:24:58,799 --> 00:25:01,360
tends to be the the main point that a

00:25:00,320 --> 00:25:03,360
lot of people bring up

00:25:01,360 --> 00:25:05,600
around those kind of containers

00:25:03,360 --> 00:25:08,559
deployments um

00:25:05,600 --> 00:25:10,000
and it is a perfectly fair one um the

00:25:08,559 --> 00:25:13,120
linux kernel is not perfect

00:25:10,000 --> 00:25:15,039
there are security issues um

00:25:13,120 --> 00:25:16,559
not that many of them tend to apply to

00:25:15,039 --> 00:25:17,760
containers these days that definitely

00:25:16,559 --> 00:25:19,679
wasn't true at the beginning of the

00:25:17,760 --> 00:25:22,080
username space but we had a bunch of

00:25:19,679 --> 00:25:22,720
pretty nasty security issues these days

00:25:22,080 --> 00:25:25,039
it's

00:25:22,720 --> 00:25:26,640
reasonably good um but still something

00:25:25,039 --> 00:25:29,360
you need to keep a close eye

00:25:26,640 --> 00:25:31,440
like a pretty close look at because that

00:25:29,360 --> 00:25:33,679
can be an issue

00:25:31,440 --> 00:25:36,320
those that are denial of service attacks

00:25:33,679 --> 00:25:40,240
uh are obviously a problem

00:25:36,320 --> 00:25:42,960
but not devastating in many cases

00:25:40,240 --> 00:25:43,600
privileged escalation is the the big

00:25:42,960 --> 00:25:45,600
issue

00:25:43,600 --> 00:25:48,400
um and for those the only thing you can

00:25:45,600 --> 00:25:50,799
really do is make sure you're up to date

00:25:48,400 --> 00:25:52,480
so the solutions tend to be if you can

00:25:50,799 --> 00:25:54,000
live patch if your digital support live

00:25:52,480 --> 00:25:54,720
pattern is quick at releasing live

00:25:54,000 --> 00:25:58,880
patches

00:25:54,720 --> 00:26:00,720
then do that on top of that or

00:25:58,880 --> 00:26:02,240
as kissed as an alternative to that you

00:26:00,720 --> 00:26:04,159
should be extremely aggressive to

00:26:02,240 --> 00:26:05,840
on applying updates and rebooting

00:26:04,159 --> 00:26:07,039
immediately after the camera security

00:26:05,840 --> 00:26:09,440
fix

00:26:07,039 --> 00:26:10,400
that's definitely what we've been doing

00:26:09,440 --> 00:26:11,840
we take

00:26:10,400 --> 00:26:14,000
applying security updates above

00:26:11,840 --> 00:26:15,360
everything else if someone gets

00:26:14,000 --> 00:26:16,320
disconnected and they've got to get a

00:26:15,360 --> 00:26:17,919
fresh session

00:26:16,320 --> 00:26:24,640
you know a minute later when the service

00:26:17,919 --> 00:26:27,120
has restarted that's fine with us

00:26:24,640 --> 00:26:28,640
and well hardly i can't really be

00:26:27,120 --> 00:26:29,360
trusted anymore so that's also a bit of

00:26:28,640 --> 00:26:32,000
a problem

00:26:29,360 --> 00:26:32,640
uh spectre and meltdown are real things

00:26:32,000 --> 00:26:35,360
that

00:26:32,640 --> 00:26:37,360
have caused a bit of havoc around that

00:26:35,360 --> 00:26:39,679
um

00:26:37,360 --> 00:26:40,640
so for for those kind of things you can

00:26:39,679 --> 00:26:44,240
have two options

00:26:40,640 --> 00:26:46,159
one is it's a dedicated physical server

00:26:44,240 --> 00:26:48,400
and you don't care because nothing else

00:26:46,159 --> 00:26:50,400
is running on it so

00:26:48,400 --> 00:26:53,679
people being able to potentially

00:26:50,400 --> 00:26:56,720
eavesdrop is not a big concern to you

00:26:53,679 --> 00:26:58,240
um if the system is shared in some way

00:26:56,720 --> 00:27:00,080
then you're gonna need to deal with

00:26:58,240 --> 00:27:02,400
things like cpu pinning

00:27:00,080 --> 00:27:04,159
so effectively making sure that you

00:27:02,400 --> 00:27:07,120
dedicate a number of

00:27:04,159 --> 00:27:08,000
physical cpu calls to a service like

00:27:07,120 --> 00:27:10,799
that

00:27:08,000 --> 00:27:12,159
and you never put anything else on those

00:27:10,799 --> 00:27:14,000
cpu calls

00:27:12,159 --> 00:27:15,440
that way even if you've got

00:27:14,000 --> 00:27:17,279
multi-trading enabled on those

00:27:15,440 --> 00:27:18,799
it's not really an issue your users

00:27:17,279 --> 00:27:20,399
might be able to drop on each other

00:27:18,799 --> 00:27:21,840
within the demo service but

00:27:20,399 --> 00:27:24,799
they're not gonna be able to do anything

00:27:21,840 --> 00:27:27,600
much more than that

00:27:24,799 --> 00:27:28,799
if that's not an option for you then you

00:27:27,600 --> 00:27:31,679
should at the very least

00:27:28,799 --> 00:27:33,360
disable smt so turn off hyper threading

00:27:31,679 --> 00:27:35,120
effectively

00:27:33,360 --> 00:27:36,799
and an alternative to that which has

00:27:35,120 --> 00:27:38,399
been worked on

00:27:36,799 --> 00:27:40,559
quite a bit recently would be core

00:27:38,399 --> 00:27:44,320
scheduling so effectively

00:27:40,559 --> 00:27:44,320
configuring the kernel so that it knows

00:27:44,799 --> 00:27:49,679
that those specific workloads could not

00:27:47,760 --> 00:27:52,720
be scheduled on the same core

00:27:49,679 --> 00:27:54,399
as some other workloads at which point

00:27:52,720 --> 00:27:57,039
that that guarantees that there's

00:27:54,399 --> 00:27:57,600
no hyper thread type attacks possible

00:27:57,039 --> 00:27:59,440
because

00:27:57,600 --> 00:28:02,000
the only time where two the two threads

00:27:59,440 --> 00:28:04,559
would be used at the same time

00:28:02,000 --> 00:28:06,159
would be if it's the s if it's the demo

00:28:04,559 --> 00:28:06,559
service using both of them at the same

00:28:06,159 --> 00:28:08,320
time

00:28:06,559 --> 00:28:10,640
it effectively avoids those kind of

00:28:08,320 --> 00:28:12,559
problems

00:28:10,640 --> 00:28:14,320
um there are a few trade-offs and

00:28:12,559 --> 00:28:16,799
additions we did um

00:28:14,320 --> 00:28:18,880
for the actual production service i did

00:28:16,799 --> 00:28:21,440
mention network filtering and how we can

00:28:18,880 --> 00:28:22,799
prevent ipv4 ipv6 and mac address

00:28:21,440 --> 00:28:25,440
spoofing

00:28:22,799 --> 00:28:28,840
unfortunately because our own use case

00:28:25,440 --> 00:28:32,159
is to run a container manager

00:28:28,840 --> 00:28:33,919
we can't do that since we

00:28:32,159 --> 00:28:35,600
are using nested containers that are

00:28:33,919 --> 00:28:36,399
connected to the same network as their

00:28:35,600 --> 00:28:38,080
parent

00:28:36,399 --> 00:28:39,679
that means that those containers each

00:28:38,080 --> 00:28:42,159
put a new mac address on a network as

00:28:39,679 --> 00:28:44,799
well as a new ipv4 and ipv6 address

00:28:42,159 --> 00:28:45,440
that effectively prevents filtering but

00:28:44,799 --> 00:28:47,600
if you're

00:28:45,440 --> 00:28:48,960
using something like this for any reason

00:28:47,600 --> 00:28:50,880
for anything other than running a

00:28:48,960 --> 00:28:52,399
container runtime inside

00:28:50,880 --> 00:28:54,159
then you should totally do that because

00:28:52,399 --> 00:28:55,919
that will that will save you a lot of

00:28:54,159 --> 00:28:58,559
potential headaches from people trying

00:28:55,919 --> 00:29:01,120
to be annoying

00:28:58,559 --> 00:29:02,720
the other thing is and kind of the same

00:29:01,120 --> 00:29:05,440
issue to some extent

00:29:02,720 --> 00:29:07,120
we are using rfs for storage rather than

00:29:05,440 --> 00:29:11,120
using something

00:29:07,120 --> 00:29:13,840
with stronger quota enforcement like zfs

00:29:11,120 --> 00:29:15,919
the reason for that is also that brfs is

00:29:13,840 --> 00:29:18,320
the only file system that lets you do

00:29:15,919 --> 00:29:19,600
proper container nesting without wasting

00:29:18,320 --> 00:29:22,320
disk space

00:29:19,600 --> 00:29:23,600
so in this case we've decided to kind of

00:29:22,320 --> 00:29:28,000
you know bit the bullet

00:29:23,600 --> 00:29:31,200
and use per fs knowing that some of our

00:29:28,000 --> 00:29:34,000
users might try and bypass the limit

00:29:31,200 --> 00:29:35,679
rather than use zfs which would have

00:29:34,000 --> 00:29:36,240
guaranteed they wouldn't but also would

00:29:35,679 --> 00:29:39,120
have

00:29:36,240 --> 00:29:41,279
significantly increased the disk usage

00:29:39,120 --> 00:29:42,960
per container

00:29:41,279 --> 00:29:45,200
so that was kind of a compromise we had

00:29:42,960 --> 00:29:46,880
to do on that one we're still hoping for

00:29:45,200 --> 00:29:48,960
zfs to eventually support proper

00:29:46,880 --> 00:29:52,720
container proper using this

00:29:48,960 --> 00:29:55,600
in containers but it's not there yet

00:29:52,720 --> 00:29:56,799
we've made a few additions to on top of

00:29:55,600 --> 00:30:00,080
everything as it was

00:29:56,799 --> 00:30:02,320
discussed in our case the the host that

00:30:00,080 --> 00:30:06,080
we use is actually based on ubuntu

00:30:02,320 --> 00:30:08,720
18 which is image based

00:30:06,080 --> 00:30:10,080
um effectively read-only transactional

00:30:08,720 --> 00:30:12,799
system

00:30:10,080 --> 00:30:14,240
so that does help a bit in that even in

00:30:12,799 --> 00:30:14,960
the worst-case scenario someone manages

00:30:14,240 --> 00:30:16,799
to escape

00:30:14,960 --> 00:30:18,559
there's not much they can actually write

00:30:16,799 --> 00:30:20,240
to or do on the host

00:30:18,559 --> 00:30:22,240
because pretty much everything is

00:30:20,240 --> 00:30:24,000
read-only and checked

00:30:22,240 --> 00:30:25,840
it's rehashing whenever it's installed

00:30:24,000 --> 00:30:28,320
or updated

00:30:25,840 --> 00:30:29,039
we also do automatic updates every 15

00:30:28,320 --> 00:30:31,600
minutes

00:30:29,039 --> 00:30:33,360
so that usually tends to get any kernel

00:30:31,600 --> 00:30:34,640
update applied pretty much immediately

00:30:33,360 --> 00:30:38,159
and we've got canon live patching

00:30:34,640 --> 00:30:38,159
enabled on top of all of that too

00:30:41,120 --> 00:30:44,880
so now for another bit of demo i'm just

00:30:43,520 --> 00:30:47,360
gonna show you how you can

00:30:44,880 --> 00:30:50,480
run your own search service because

00:30:47,360 --> 00:30:53,440
we've made that pretty easy

00:30:50,480 --> 00:30:54,399
so i've got a system here that's just a

00:30:53,440 --> 00:30:58,159
random development

00:30:54,399 --> 00:30:58,159
machine i've got in my basement

00:30:58,480 --> 00:31:02,840
and i'm gonna be installing starting by

00:31:00,960 --> 00:31:05,760
installing next day

00:31:02,840 --> 00:31:08,720
so

00:31:05,760 --> 00:31:10,720
let's go next day then we'll be

00:31:08,720 --> 00:31:18,559
installing a second package

00:31:10,720 --> 00:31:22,640
called snap let's be demo server

00:31:18,559 --> 00:31:22,640
okay now we configure xd so

00:31:23,200 --> 00:31:27,200
uh we don't really need any of the fancy

00:31:26,000 --> 00:31:28,720
features or anything at this point so we

00:31:27,200 --> 00:31:31,440
pretty much just hit enter to everything

00:31:28,720 --> 00:31:32,720
that makes it px by default for storage

00:31:31,440 --> 00:31:36,080
that's okay

00:31:32,720 --> 00:31:39,760
for this particular use case there we go

00:31:36,080 --> 00:31:42,799
then let's create a new container

00:31:39,760 --> 00:31:46,480
using let's see ubuntu 2004 and we'll

00:31:42,799 --> 00:31:49,840
call that my demo okay let's

00:31:46,480 --> 00:31:49,840
grab the image and pack it

00:31:52,720 --> 00:31:55,760
and start the container

00:31:56,320 --> 00:32:00,399
now let's go in that container and

00:31:58,840 --> 00:32:04,159
install

00:32:00,399 --> 00:32:06,240
again i said why not let's get out okay

00:32:04,159 --> 00:32:14,720
let's just make sure it works but pretty

00:32:06,240 --> 00:32:18,000
sure it does

00:32:14,720 --> 00:32:18,399
yep all good so our container is now

00:32:18,000 --> 00:32:22,720
ready

00:32:18,399 --> 00:32:25,519
let's run lexi demo server configure

00:32:22,720 --> 00:32:26,799
it into a text editor in there you've

00:32:25,519 --> 00:32:29,679
got the choice of either

00:32:26,799 --> 00:32:30,720
creating your demo sessions from an

00:32:29,679 --> 00:32:32,559
existing

00:32:30,720 --> 00:32:34,320
or from an image that's available in the

00:32:32,559 --> 00:32:34,559
store or available from some server you

00:32:34,320 --> 00:32:37,039
may

00:32:34,559 --> 00:32:38,640
you manage yourself or by using an

00:32:37,039 --> 00:32:39,360
existing container so in our case we'll

00:32:38,640 --> 00:32:41,440
do that

00:32:39,360 --> 00:32:43,039
so we're gonna comment that image line

00:32:41,440 --> 00:32:46,159
and we're going to be

00:32:43,039 --> 00:32:49,279
using the my demo container

00:32:46,159 --> 00:32:51,120
but use default profile that's fine the

00:32:49,279 --> 00:32:53,360
command we're going to customize that so

00:32:51,120 --> 00:32:56,960
that this

00:32:53,360 --> 00:32:59,120
any demo session just starts as a

00:32:56,960 --> 00:33:00,720
now we can allow people leaving feedback

00:32:59,120 --> 00:33:04,720
that's all right

00:33:00,720 --> 00:33:08,080
one cpu 200 processor 256 megs of ram

00:33:04,720 --> 00:33:09,360
two sessions per user it's fine half an

00:33:08,080 --> 00:33:11,519
hour sessions

00:33:09,360 --> 00:33:14,799
and that's some really quarter because

00:33:11,519 --> 00:33:16,480
why not let's do one gig

00:33:14,799 --> 00:33:18,240
the rest you can customize what port it

00:33:16,480 --> 00:33:20,000
binds to and

00:33:18,240 --> 00:33:21,120
list of ip addresses that are banned

00:33:20,000 --> 00:33:24,320
from using the service because they

00:33:21,120 --> 00:33:25,600
broke the rules

00:33:24,320 --> 00:33:27,519
you can also configure things like

00:33:25,600 --> 00:33:28,880
whether you're on ipv6 only or not

00:33:27,519 --> 00:33:31,919
if the service is currently under

00:33:28,880 --> 00:33:33,600
maintenance and there's an api to

00:33:31,919 --> 00:33:35,360
retrieve that user feedback that they

00:33:33,600 --> 00:33:37,200
can leave at the end so that's what

00:33:35,360 --> 00:33:38,960
those tokens are for and you can write

00:33:37,200 --> 00:33:42,800
the content service

00:33:38,960 --> 00:33:45,039
so down in there so we'll just save that

00:33:42,800 --> 00:33:50,159
[Music]

00:33:45,039 --> 00:33:50,159
and restart the service okay

00:33:50,840 --> 00:33:57,200
now

00:33:52,320 --> 00:33:57,200
let me switch back to a white brother

00:34:04,840 --> 00:34:07,840
um

00:34:12,639 --> 00:34:15,919
okay and that's that's what the user is

00:34:15,280 --> 00:34:18,639
going to get

00:34:15,919 --> 00:34:20,560
when they go on on that web server do

00:34:18,639 --> 00:34:21,440
you see the terms of service can hit the

00:34:20,560 --> 00:34:24,879
button to approve

00:34:21,440 --> 00:34:27,760
to accept them and the time

00:34:24,879 --> 00:34:29,200
the container is created and the comment

00:34:27,760 --> 00:34:32,480
is run

00:34:29,200 --> 00:34:32,480
at which point the session will

00:34:32,839 --> 00:34:38,079
disconnect

00:34:34,560 --> 00:34:39,679
and that's it if they click on

00:34:38,079 --> 00:34:41,919
on reconnect here they're just going to

00:34:39,679 --> 00:34:43,280
be attached to the exact same session

00:34:41,919 --> 00:34:45,280
again which is going to just spawn the

00:34:43,280 --> 00:34:48,399
command again and get to see the trainer

00:34:45,280 --> 00:34:49,679
all the time

00:34:48,399 --> 00:34:51,760
so that makes it pretty simple like you

00:34:49,679 --> 00:34:54,240
can if you

00:34:51,760 --> 00:34:55,919
if you wrote a command line based piece

00:34:54,240 --> 00:34:57,359
of software you can effectively make the

00:34:55,919 --> 00:34:58,640
demonstration name straight in the piece

00:34:57,359 --> 00:35:03,200
of software when they close it

00:34:58,640 --> 00:35:05,440
that resets the session

00:35:03,200 --> 00:35:07,200
um now we can see if i switch back to

00:35:05,440 --> 00:35:09,520
the terminal here

00:35:07,200 --> 00:35:10,880
on that system if i look at uh what's

00:35:09,520 --> 00:35:13,599
running we can see we've got

00:35:10,880 --> 00:35:15,040
try it dash great which is the

00:35:13,599 --> 00:35:17,440
automatically generated name

00:35:15,040 --> 00:35:18,480
that the system took and that's the

00:35:17,440 --> 00:35:20,800
container that's running

00:35:18,480 --> 00:35:23,920
after 30 minutes it will automatically

00:35:20,800 --> 00:35:23,920
get stopped and deleted

00:35:28,720 --> 00:35:33,599
so let's switch back to slides

00:35:41,839 --> 00:35:45,359
i'm already at the conclusion like the

00:35:43,280 --> 00:35:46,079
the demo went a tiny bit faster than i

00:35:45,359 --> 00:35:50,000
expected

00:35:46,079 --> 00:35:52,960
um so

00:35:50,000 --> 00:35:54,720
it's possible to offer which as random

00:35:52,960 --> 00:35:58,320
strangers on the internet and not get

00:35:54,720 --> 00:36:00,720
pawned immediately which is nice

00:35:58,320 --> 00:36:02,720
but you need to be careful um there are

00:36:00,720 --> 00:36:05,200
lots of things to keep in mind there

00:36:02,720 --> 00:36:07,119
um as i said we've done it for five

00:36:05,200 --> 00:36:07,520
years we've not actually we've seen a

00:36:07,119 --> 00:36:10,960
number of

00:36:07,520 --> 00:36:11,359
views i mean the um the list of problems

00:36:10,960 --> 00:36:14,560
i ran

00:36:11,359 --> 00:36:16,480
through earlier are based from from real

00:36:14,560 --> 00:36:19,040
experience like we definitely

00:36:16,480 --> 00:36:20,000
had users try to attack it in a number

00:36:19,040 --> 00:36:23,040
of ways

00:36:20,000 --> 00:36:25,839
um prior to even doing that service we

00:36:23,040 --> 00:36:29,760
were i was doing something even

00:36:25,839 --> 00:36:32,079
riskier to some extent which was

00:36:29,760 --> 00:36:33,599
for a linux distribution called edubuntu

00:36:32,079 --> 00:36:36,640
which is like an educational

00:36:33,599 --> 00:36:40,400
variant of ubuntu we had an integration

00:36:36,640 --> 00:36:43,119
in the desktop where you could try any

00:36:40,400 --> 00:36:44,400
any application you wanted and that

00:36:43,119 --> 00:36:46,960
would

00:36:44,400 --> 00:36:48,079
spawn a remote container install the

00:36:46,960 --> 00:36:50,160
graphical application

00:36:48,079 --> 00:36:51,680
and then export it through the

00:36:50,160 --> 00:36:53,280
non-machine protocol just like a

00:36:51,680 --> 00:36:54,480
slightly nicer version of vnc

00:36:53,280 --> 00:36:57,119
effectively

00:36:54,480 --> 00:36:57,839
back to the client and the client would

00:36:57,119 --> 00:36:59,760
then

00:36:57,839 --> 00:37:01,040
just run that application like if it was

00:36:59,760 --> 00:37:03,119
local effectively

00:37:01,040 --> 00:37:05,440
for up to i think 10 minutes then it

00:37:03,119 --> 00:37:08,480
would disconnect

00:37:05,440 --> 00:37:11,200
we pretty quickly had people installing

00:37:08,480 --> 00:37:12,320
all kinds of shells and then trying to

00:37:11,200 --> 00:37:15,599
do mass mailing

00:37:12,320 --> 00:37:18,000
trying to sport scan the entire internet

00:37:15,599 --> 00:37:19,599
and doing a whole bunch of weird things

00:37:18,000 --> 00:37:21,119
we didn't have a very strong firewall on

00:37:19,599 --> 00:37:22,640
that at the beginning so it was

00:37:21,119 --> 00:37:23,440
definitely a bit of a lesson learned

00:37:22,640 --> 00:37:24,880
there

00:37:23,440 --> 00:37:26,720
and not the problem we had with the legs

00:37:24,880 --> 00:37:28,880
d1 because that was

00:37:26,720 --> 00:37:30,240
a few years later and i've already

00:37:28,880 --> 00:37:33,200
learned from that

00:37:30,240 --> 00:37:33,839
uh so but still like looking at some of

00:37:33,200 --> 00:37:35,920
the

00:37:33,839 --> 00:37:36,960
the initial sessions maybe for the first

00:37:35,920 --> 00:37:39,119
couple days or so

00:37:36,960 --> 00:37:40,720
that we had that service for lxd which

00:37:39,119 --> 00:37:41,920
definitely saw people installing a whole

00:37:40,720 --> 00:37:45,200
bunch of

00:37:41,920 --> 00:37:47,200
your usual port scanning and

00:37:45,200 --> 00:37:48,960
vulnerability scanning tooling and then

00:37:47,200 --> 00:37:50,640
trying to both scan the

00:37:48,960 --> 00:37:52,000
infrastructure that they're running on

00:37:50,640 --> 00:37:53,680
see whether they could attack

00:37:52,000 --> 00:37:56,000
us but also just try to attack the

00:37:53,680 --> 00:37:56,960
internet thankfully firewalling was

00:37:56,000 --> 00:37:59,280
blocking all of that

00:37:56,960 --> 00:38:00,640
and our own systems are up to date so

00:37:59,280 --> 00:38:05,359
not an actual issue

00:38:00,640 --> 00:38:08,560
but still people definitely tried

00:38:05,359 --> 00:38:10,160
also script kiddies um that was actually

00:38:08,560 --> 00:38:11,520
a bit of a problem at the beginning of

00:38:10,160 --> 00:38:14,320
that service because the

00:38:11,520 --> 00:38:15,920
pidsc group is pretty recent and did not

00:38:14,320 --> 00:38:18,480
exist back then

00:38:15,920 --> 00:38:20,079
so five years ago when we launched the

00:38:18,480 --> 00:38:21,520
service we actually had no way to

00:38:20,079 --> 00:38:23,599
prevent the fork bomb

00:38:21,520 --> 00:38:24,960
uh the only way we could do it was by

00:38:23,599 --> 00:38:26,720
limiting memory

00:38:24,960 --> 00:38:28,240
specifically kernel memory and hope that

00:38:26,720 --> 00:38:31,440
they would run themselves out of kernel

00:38:28,240 --> 00:38:34,640
memory before the system would have

00:38:31,440 --> 00:38:38,960
like a very negative impact

00:38:34,640 --> 00:38:40,960
that yeah that that kind of worked um

00:38:38,960 --> 00:38:43,040
but the the phd group is definitely much

00:38:40,960 --> 00:38:45,280
better and just blocks that

00:38:43,040 --> 00:38:46,079
kind of a track kind of attacks in their

00:38:45,280 --> 00:38:49,920
tracks

00:38:46,079 --> 00:38:49,920
no problem um

00:38:50,160 --> 00:38:53,920
them otherwise the main thing i would i

00:38:52,079 --> 00:38:56,400
would try and recommend there

00:38:53,920 --> 00:38:58,160
is you know make sure everything is well

00:38:56,400 --> 00:38:59,599
isolated everything is kept up to date

00:38:58,160 --> 00:39:01,680
and that you monitor things as closely

00:38:59,599 --> 00:39:03,040
as you can

00:39:01,680 --> 00:39:04,320
you can pretty much count on some people

00:39:03,040 --> 00:39:05,920
are using it no matter what you're

00:39:04,320 --> 00:39:07,920
writing in terms of service no matter

00:39:05,920 --> 00:39:12,160
what kind of limits you put in place

00:39:07,920 --> 00:39:15,440
people are going to be people and

00:39:12,160 --> 00:39:17,599
the best you can do is try to not try to

00:39:15,440 --> 00:39:19,200
notice repeat offenders and just block

00:39:17,599 --> 00:39:21,760
their ips for a while

00:39:19,200 --> 00:39:23,119
that tends to send them away that's

00:39:21,760 --> 00:39:24,560
definitely what we've been doing we've

00:39:23,119 --> 00:39:27,280
not actually had

00:39:24,560 --> 00:39:28,960
any very nasty security issues or

00:39:27,280 --> 00:39:31,520
anything we would just notice that

00:39:28,960 --> 00:39:33,200
hey the system load is particularly high

00:39:31,520 --> 00:39:34,880
and every time we notice that we'd see

00:39:33,200 --> 00:39:36,079
the same ip address is connected to it

00:39:34,880 --> 00:39:36,560
so i'm like okay there's definitely

00:39:36,079 --> 00:39:39,680
something

00:39:36,560 --> 00:39:41,359
wrong going on there um but otherwise

00:39:39,680 --> 00:39:45,839
this this whole thing is a great

00:39:41,359 --> 00:39:47,599
great tool to onboard new users i mean

00:39:45,839 --> 00:39:49,680
we've definitely had

00:39:47,599 --> 00:39:51,280
tens and tens of thousands of users

00:39:49,680 --> 00:39:53,040
going through that by now probably

00:39:51,280 --> 00:39:56,960
hundreds of thousands

00:39:53,040 --> 00:39:59,040
um and getting to test our software and

00:39:56,960 --> 00:40:00,560
especially test the latest version of it

00:39:59,040 --> 00:40:02,880
online without having to install

00:40:00,560 --> 00:40:10,560
anything anywhere has been a very

00:40:02,880 --> 00:40:12,800
very good tool for our users

00:40:10,560 --> 00:40:14,240
and that's it uh so that gives us about

00:40:12,800 --> 00:40:17,119
10 minutes for questions

00:40:14,240 --> 00:40:18,560
i don't believe we've got any right now

00:40:17,119 --> 00:40:20,560
let me just

00:40:18,560 --> 00:40:23,280
open that thing oh actually no we do

00:40:20,560 --> 00:40:26,880
never mind not sure why i didn't

00:40:23,280 --> 00:40:26,880
see that immediately let's see

00:40:29,920 --> 00:40:39,040
okay let me just read the question first

00:40:32,000 --> 00:40:41,200
and i'll repeat it

00:40:39,040 --> 00:40:42,880
okay um first question is someone who

00:40:41,200 --> 00:40:46,240
had permission issues

00:40:42,880 --> 00:40:49,760
accessing something that was nfs mounted

00:40:46,240 --> 00:40:51,680
inside a legacy container so in that

00:40:49,760 --> 00:40:54,880
case that would be an nfs mount

00:40:51,680 --> 00:40:57,119
on the host system passed as

00:40:54,880 --> 00:40:59,760
a bind mount into the container and then

00:40:57,119 --> 00:41:01,280
accessed from within that container

00:40:59,760 --> 00:41:03,839
what you would most likely see in those

00:41:01,280 --> 00:41:06,700
kind of cases is everything showing up

00:41:03,839 --> 00:41:07,839
in that chair as nobody no group

00:41:06,700 --> 00:41:11,440
[Music]

00:41:07,839 --> 00:41:14,480
that's because of the username space

00:41:11,440 --> 00:41:17,119
in place which will prevent uh

00:41:14,480 --> 00:41:17,119
prevent you

00:41:17,599 --> 00:41:22,800
which will close that shift um i can

00:41:20,880 --> 00:41:24,960
better show it here so if i look at my

00:41:22,800 --> 00:41:26,480
containers we see that

00:41:24,960 --> 00:41:28,800
right now everything is running at 100

00:41:26,480 --> 00:41:30,319
000 inside them even though that process

00:41:28,800 --> 00:41:31,440
will show up as being root inside the

00:41:30,319 --> 00:41:34,960
container

00:41:31,440 --> 00:41:36,880
now if i was to say

00:41:34,960 --> 00:41:38,319
so just create a file and search it's

00:41:36,880 --> 00:41:41,440
always oh

00:41:38,319 --> 00:41:43,200
blah and

00:41:41,440 --> 00:41:44,800
what's the name of my my demo is the

00:41:43,200 --> 00:41:48,960
name of my container so i'm gonna

00:41:44,800 --> 00:41:52,079
add a new disk uh to my demo

00:41:48,960 --> 00:41:54,720
um just call it test called at the disk

00:41:52,079 --> 00:41:56,800
the source is going to be slv

00:41:54,720 --> 00:41:57,920
and the path in the container is gonna

00:41:56,800 --> 00:42:01,920
be

00:41:57,920 --> 00:42:06,000
let's oops the source gonna be srv will

00:42:01,920 --> 00:42:06,000
man that as mnts are we in the container

00:42:06,720 --> 00:42:10,240
right so if i go in the container and

00:42:08,319 --> 00:42:13,040
now i look at

00:42:10,240 --> 00:42:14,079
mnts rv my blood file shows up as nobody

00:42:13,040 --> 00:42:16,480
no group

00:42:14,079 --> 00:42:17,839
was on the hosts that same part of the

00:42:16,480 --> 00:42:19,359
password

00:42:17,839 --> 00:42:21,760
that's because of that gap there's

00:42:19,359 --> 00:42:23,599
effectively no way to represent

00:42:21,760 --> 00:42:25,040
root route so zero zero in that

00:42:23,599 --> 00:42:27,040
container because the container is

00:42:25,040 --> 00:42:28,839
shifted and that uid just plain doesn't

00:42:27,040 --> 00:42:32,240
exist

00:42:28,839 --> 00:42:34,319
um the easiest way to solve this

00:42:32,240 --> 00:42:35,920
is through a file system called shiftfs

00:42:34,319 --> 00:42:37,440
that we've implemented in nextday

00:42:35,920 --> 00:42:39,280
it's currently disabled by default

00:42:37,440 --> 00:42:42,319
because we have because of some

00:42:39,280 --> 00:42:46,960
restrictions still on it but say if

00:42:42,319 --> 00:42:46,960
we enable it and then we restart xd

00:42:48,240 --> 00:42:52,640
i'm gonna stop that demo container now

00:42:53,119 --> 00:42:58,480
okay device

00:42:56,160 --> 00:43:00,000
i'll remove the device i added which was

00:42:58,480 --> 00:43:01,920
called test

00:43:00,000 --> 00:43:03,040
and what we do is we'll just add it back

00:43:01,920 --> 00:43:12,480
with

00:43:03,040 --> 00:43:15,520
should be quite true that should work

00:43:12,480 --> 00:43:17,760
there we go so with that um so

00:43:15,520 --> 00:43:19,040
i had to enable shift fs support in next

00:43:17,760 --> 00:43:21,599
day and then

00:43:19,040 --> 00:43:22,400
i removed that device i passed from the

00:43:21,599 --> 00:43:24,079
host

00:43:22,400 --> 00:43:26,000
and re-added it with an extra property

00:43:24,079 --> 00:43:28,640
saying shift equals true

00:43:26,000 --> 00:43:29,280
which now means that we've got a kernel

00:43:28,640 --> 00:43:31,920
layer

00:43:29,280 --> 00:43:32,800
translation layer which for that

00:43:31,920 --> 00:43:36,240
particular amount

00:43:32,800 --> 00:43:38,160
that particular amount alone lines up

00:43:36,240 --> 00:43:39,520
the ids outside and inside the container

00:43:38,160 --> 00:43:39,839
so now root outside the container i'll

00:43:39,520 --> 00:43:42,160
press

00:43:39,839 --> 00:43:44,560
root inside the container and so if in

00:43:42,160 --> 00:43:48,400
that container i want to

00:43:44,560 --> 00:43:52,720
do a survey foo and say i don't know

00:43:48,400 --> 00:43:55,839
let's send it ownership to one two three

00:43:52,720 --> 00:43:55,839
four five six

00:43:57,359 --> 00:44:01,119
there we go now if we look for the same

00:43:59,119 --> 00:44:03,599
thing on the host

00:44:01,119 --> 00:44:04,750
we'll see that just went through without

00:44:03,599 --> 00:44:06,160
the

00:44:04,750 --> 00:44:07,920
[Music]

00:44:06,160 --> 00:44:09,599
id range mapping that happens with the

00:44:07,920 --> 00:44:11,440
username space

00:44:09,599 --> 00:44:13,040
so that's our best solution around that

00:44:11,440 --> 00:44:14,160
the test you still run fully and

00:44:13,040 --> 00:44:16,720
privileged containers

00:44:14,160 --> 00:44:18,560
including isolated maps and yet share

00:44:16,720 --> 00:44:20,240
data either with other containers or

00:44:18,560 --> 00:44:22,800
with the host

00:44:20,240 --> 00:44:24,000
by using the shift fs channel file

00:44:22,800 --> 00:44:27,839
system to

00:44:24,000 --> 00:44:37,839
to shift things for you another question

00:44:27,839 --> 00:44:37,839
uh let's see

00:44:39,280 --> 00:44:46,240
so the other question was around using

00:44:42,720 --> 00:44:48,720
tomoyo for security on on linux

00:44:46,240 --> 00:44:50,079
so tomoyo is my understanding of

00:44:48,720 --> 00:44:51,760
somewhere is pretty limited

00:44:50,079 --> 00:44:53,440
i understand it's another miniature

00:44:51,760 --> 00:44:56,800
access system um

00:44:53,440 --> 00:44:57,920
so i think it's a lsm the integrity

00:44:56,800 --> 00:45:00,240
module

00:44:57,920 --> 00:45:02,880
in our case we use a partner because we

00:45:00,240 --> 00:45:04,800
weren't on ubuntu

00:45:02,880 --> 00:45:06,960
but tomorrow would be an alternative to

00:45:04,800 --> 00:45:09,520
that there is

00:45:06,960 --> 00:45:11,520
work being done upstream to allow mix

00:45:09,520 --> 00:45:15,520
and matching lsms

00:45:11,520 --> 00:45:19,040
um so that's called uh linux module

00:45:15,520 --> 00:45:22,319
stacking and name spacing right now

00:45:19,040 --> 00:45:24,480
it's not quite there yet um

00:45:22,319 --> 00:45:26,880
which means that if your host system say

00:45:24,480 --> 00:45:30,079
in my case an ubuntu server

00:45:26,880 --> 00:45:32,079
uses obama i can't have the container

00:45:30,079 --> 00:45:35,040
use something else

00:45:32,079 --> 00:45:37,040
we hope this will be changed within the

00:45:35,040 --> 00:45:38,640
next couple of years hopefully

00:45:37,040 --> 00:45:40,000
at which point we'll be able to have a

00:45:38,640 --> 00:45:41,200
host running a panel and then the

00:45:40,000 --> 00:45:44,240
container will be protected by

00:45:41,200 --> 00:45:45,680
linux or tomorrow or smack

00:45:44,240 --> 00:45:46,960
or the reversing have the horse running

00:45:45,680 --> 00:45:48,160
as a linux and then the container be

00:45:46,960 --> 00:45:50,880
protected by obama

00:45:48,160 --> 00:45:52,480
that'd be that'd be really nice and

00:45:50,880 --> 00:45:53,680
those implementations effectively means

00:45:52,480 --> 00:45:55,680
that the rules would

00:45:53,680 --> 00:45:56,720
would combine which would then let you

00:45:55,680 --> 00:45:58,720
use a

00:45:56,720 --> 00:45:59,760
combination of the host profile which

00:45:58,720 --> 00:46:02,640
could be again be

00:45:59,760 --> 00:46:04,160
a pandora cylinder or tomorrow whatever

00:46:02,640 --> 00:46:05,680
and then your container itself having

00:46:04,160 --> 00:46:06,560
its own set of rules which is in a

00:46:05,680 --> 00:46:08,960
different lsm

00:46:06,560 --> 00:46:09,839
unless you cannot get the best of all

00:46:08,960 --> 00:46:12,560
worlds by

00:46:09,839 --> 00:46:13,839
combining lsms that might have slightly

00:46:12,560 --> 00:46:16,560
um

00:46:13,839 --> 00:46:17,520
feature coverage so definitely something

00:46:16,560 --> 00:46:19,839
very exciting

00:46:17,520 --> 00:46:20,640
we would love to have that that would

00:46:19,839 --> 00:46:23,920
also

00:46:20,640 --> 00:46:27,359
unblock use cases like running a

00:46:23,920 --> 00:46:29,040
android container on an obama protected

00:46:27,359 --> 00:46:31,200
kennel and having that container use

00:46:29,040 --> 00:46:32,800
this linux policy for the apps

00:46:31,200 --> 00:46:34,560
or same thing if you're running like a

00:46:32,800 --> 00:46:36,400
red hat based distro on top of a

00:46:34,560 --> 00:46:37,599
something like ubuntu that would also

00:46:36,400 --> 00:46:39,200
let you run as linux

00:46:37,599 --> 00:46:41,359
inside the container and apparently on

00:46:39,200 --> 00:46:43,200
the host or the reverse when running

00:46:41,359 --> 00:46:44,720
ubuntu open suse or something like that

00:46:43,200 --> 00:46:46,319
on top of a red hat based distro that

00:46:44,720 --> 00:46:47,599
would let you run up armor on top of the

00:46:46,319 --> 00:46:48,800
cnx

00:46:47,599 --> 00:46:50,560
so it's something we're really excited

00:46:48,800 --> 00:46:51,280
about but it's not quite there yet and

00:46:50,560 --> 00:46:53,760
for now

00:46:51,280 --> 00:46:55,760
our expertise tends to be around aparna

00:46:53,760 --> 00:46:58,160
if only because that's what default's

00:46:55,760 --> 00:47:00,319
been ubuntu and so what we have

00:46:58,160 --> 00:47:01,440
what we get to play the most with given

00:47:00,319 --> 00:47:04,560
that

00:47:01,440 --> 00:47:08,720
the kernel we interact with the most

00:47:04,560 --> 00:47:11,920
okay i believe that was

00:47:08,720 --> 00:47:14,720
the only two questions we got um

00:47:11,920 --> 00:47:16,240
so can wait another you know 30 seconds

00:47:14,720 --> 00:47:16,880
to a minute or so just to see if there's

00:47:16,240 --> 00:47:18,240
any other

00:47:16,880 --> 00:47:25,839
last minute question otherwise we're

00:47:18,240 --> 00:47:25,839
going to be wrapping up

00:47:36,720 --> 00:47:41,599
i'm giving you another 20 seconds

00:47:45,520 --> 00:47:48,079
00:47:50,839 --> 00:47:53,839
00:47:59,119 --> 00:48:03,200
okay getting a few people saying thanks

00:48:01,200 --> 00:48:04,319
well thank you all for attending and for

00:48:03,200 --> 00:48:07,520
watching

00:48:04,319 --> 00:48:08,960
um well it's definitely a lot of fun and

00:48:07,520 --> 00:48:10,480
if you've got any more questions i'll be

00:48:08,960 --> 00:48:11,839
on slack for a little while so you can

00:48:10,480 --> 00:48:21,839
always ask there

00:48:11,839 --> 00:48:21,839
thank you bye

00:48:24,160 --> 00:48:26,240

YouTube URL: https://www.youtube.com/watch?v=CSJR8XDL9uE


