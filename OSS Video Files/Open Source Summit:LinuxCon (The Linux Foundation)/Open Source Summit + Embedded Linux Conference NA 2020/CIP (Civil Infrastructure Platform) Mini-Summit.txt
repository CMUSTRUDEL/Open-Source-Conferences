Title: CIP (Civil Infrastructure Platform) Mini-Summit
Publication date: 2020-09-08
Playlist: Open Source Summit + Embedded Linux Conference NA 2020
Description: 
	CIP (Civil Infrastructure Platform) Mini-Summit
Captions: 
	00:00:04,080 --> 00:00:08,240
hi everyone

00:00:04,960 --> 00:00:11,519
uh welcome to uh cip mean summit

00:00:08,240 --> 00:00:12,639
uh this is second summit for us and

00:00:11,519 --> 00:00:15,200
there are

00:00:12,639 --> 00:00:15,679
more than six people thanks for joining

00:00:15,200 --> 00:00:19,520
this

00:00:15,679 --> 00:00:22,960
project this project focused to

00:00:19,520 --> 00:00:27,119
introduce what cib is doing so first

00:00:22,960 --> 00:00:30,320
talk is introducing

00:00:27,119 --> 00:00:31,119
cip and the speaker is earthquake from

00:00:30,320 --> 00:00:34,079
zlx

00:00:31,119 --> 00:00:34,079
so welcome

00:00:34,800 --> 00:00:37,920
thank you thank you yeah and the second

00:00:36,880 --> 00:00:41,600
speaker is

00:00:37,920 --> 00:00:45,039
yoshitaki kobayashi son who just

00:00:41,600 --> 00:00:48,399
welcomed you so we will give

00:00:45,039 --> 00:00:48,719
a very very brief introduction on what

00:00:48,399 --> 00:00:52,399
uh

00:00:48,719 --> 00:00:56,239
cip is doing the long version

00:00:52,399 --> 00:00:56,960
uh was so the long story was told on

00:00:56,239 --> 00:00:59,680
monday

00:00:56,960 --> 00:01:01,199
in our talk i think you can still see

00:00:59,680 --> 00:01:04,640
this online

00:01:01,199 --> 00:01:09,520
and so we will pick some of the slides

00:01:04,640 --> 00:01:12,720
we showed so we are talking about

00:01:09,520 --> 00:01:13,600
development of systems which really are

00:01:12,720 --> 00:01:17,280
used in

00:01:13,600 --> 00:01:21,439
in industry and in uh

00:01:17,280 --> 00:01:23,680
in um in civil infrastructure so i

00:01:21,439 --> 00:01:24,720
i thought i could click on the slides

00:01:23,680 --> 00:01:27,360
directly but

00:01:24,720 --> 00:01:29,119
of course i just noticed that i have to

00:01:27,360 --> 00:01:31,759
advance them

00:01:29,119 --> 00:01:32,240
so on this slide you see some examples

00:01:31,759 --> 00:01:34,720
of

00:01:32,240 --> 00:01:36,400
transportation systems energy systems

00:01:34,720 --> 00:01:40,240
which are built in power plants

00:01:36,400 --> 00:01:44,159
energy distribution or

00:01:40,240 --> 00:01:46,399
building automation industry automation

00:01:44,159 --> 00:01:48,159
and those systems have several

00:01:46,399 --> 00:01:50,399
requirements in common which are not

00:01:48,159 --> 00:01:54,479
addressed by typical linux

00:01:50,399 --> 00:01:56,799
distribution and software stacks

00:01:54,479 --> 00:01:57,920
so first of all they have to be

00:01:56,799 --> 00:02:02,000
industrial great

00:01:57,920 --> 00:02:05,360
in the sense they have to work reliable

00:02:02,000 --> 00:02:07,200
24 7 some need to fulfill functional

00:02:05,360 --> 00:02:09,520
safety requirements

00:02:07,200 --> 00:02:11,680
many systems interact with the physical

00:02:09,520 --> 00:02:12,720
world so we have real-time capabilities

00:02:11,680 --> 00:02:16,560
to be

00:02:12,720 --> 00:02:19,599
fulfilled and a big

00:02:16,560 --> 00:02:21,520
question is how to support and maintain

00:02:19,599 --> 00:02:25,120
these systems for a long time the

00:02:21,520 --> 00:02:28,400
systems typically live 10-15 years

00:02:25,120 --> 00:02:30,400
and there are systems for example in the

00:02:28,400 --> 00:02:34,640
power generation area which

00:02:30,400 --> 00:02:38,080
which live up to 40-60 years even

00:02:34,640 --> 00:02:39,040
and so not only hardware-wise but also

00:02:38,080 --> 00:02:42,400
software

00:02:39,040 --> 00:02:44,000
wise these systems have to be maintained

00:02:42,400 --> 00:02:45,840
and this leads me to the third point

00:02:44,000 --> 00:02:47,200
which is security which is tightly

00:02:45,840 --> 00:02:49,120
connected to this

00:02:47,200 --> 00:02:50,879
we have to keep the system secure this

00:02:49,120 --> 00:02:51,760
means we have to provide security

00:02:50,879 --> 00:02:55,440
patches

00:02:51,760 --> 00:02:59,040
we have to update the systems and

00:02:55,440 --> 00:03:00,640
this is was maybe the motivation of

00:02:59,040 --> 00:03:03,519
founding cip

00:03:00,640 --> 00:03:06,239
which is now consisting or which was

00:03:03,519 --> 00:03:08,560
founded in 2016

00:03:06,239 --> 00:03:10,400
and what we do basically is the

00:03:08,560 --> 00:03:12,480
following we are building

00:03:10,400 --> 00:03:15,680
a base layer which is used by different

00:03:12,480 --> 00:03:19,040
companies to build their own linux

00:03:15,680 --> 00:03:21,360
distributions on top and

00:03:19,040 --> 00:03:22,239
we started small focusing on the linux

00:03:21,360 --> 00:03:24,879
kernel

00:03:22,239 --> 00:03:27,200
and focusing on the long-term

00:03:24,879 --> 00:03:30,080
maintenance and we will learn later

00:03:27,200 --> 00:03:32,480
what evolved out of this so there is

00:03:30,080 --> 00:03:36,480
automated test infrastructure

00:03:32,480 --> 00:03:39,040
there is a build tooling

00:03:36,480 --> 00:03:40,640
behind that which is harmonized for for

00:03:39,040 --> 00:03:44,560
all these companies

00:03:40,640 --> 00:03:47,360
and we are working also on

00:03:44,560 --> 00:03:48,560
on extending this to to add additional

00:03:47,360 --> 00:03:52,000
package

00:03:48,560 --> 00:03:54,319
packages to to build really base layer

00:03:52,000 --> 00:03:56,000
putting packages on top then in the

00:03:54,319 --> 00:03:57,680
different companies and this looks

00:03:56,000 --> 00:04:00,159
basically like this

00:03:57,680 --> 00:04:03,519
we try to take the lower part and you

00:04:00,159 --> 00:04:06,799
see this on the right side out of cip

00:04:03,519 --> 00:04:09,360
and then we add our domain specific or

00:04:06,799 --> 00:04:11,599
company specific extensions on top of

00:04:09,360 --> 00:04:11,599
this

00:04:12,840 --> 00:04:16,239
okay um

00:04:16,320 --> 00:04:22,479
so all right

00:04:19,600 --> 00:04:25,040
so i hope you can still hear me i i i i

00:04:22,479 --> 00:04:27,520
i i did my phone so i had a call in

00:04:25,040 --> 00:04:27,520
between

00:04:41,040 --> 00:04:45,040
technical focus stuff and then as you

00:04:44,240 --> 00:04:49,199
can see

00:04:45,040 --> 00:04:52,560
a lot of technical topics are there

00:04:49,199 --> 00:04:54,880
but since we started the cip uh we are

00:04:52,560 --> 00:04:54,880
going to

00:04:55,199 --> 00:04:58,800
so i'm hoping to realize the cip based

00:04:58,080 --> 00:05:01,919
layer

00:04:58,800 --> 00:05:03,360
so we play with that technical topic uh

00:05:01,919 --> 00:05:06,880
one by one

00:05:03,360 --> 00:05:07,840
and the first uh topic was a super long

00:05:06,880 --> 00:05:11,520
time support

00:05:07,840 --> 00:05:14,400
because our use case mainly uh

00:05:11,520 --> 00:05:16,160
focusing uh to use uh such an existence

00:05:14,400 --> 00:05:20,479
more than 10 year or

00:05:16,160 --> 00:05:23,360
20 years so and then we

00:05:20,479 --> 00:05:26,000
extend this focus to the current party

00:05:23,360 --> 00:05:29,199
for the real times

00:05:26,000 --> 00:05:29,840
and step by step so we are currently

00:05:29,199 --> 00:05:33,280
doing

00:05:29,840 --> 00:05:33,280
six activities earlier

00:05:34,479 --> 00:05:40,800
and each topic relates to

00:05:37,600 --> 00:05:43,360
our key aspect industrial grade and

00:05:40,800 --> 00:05:45,600
sustainability and security

00:05:43,360 --> 00:05:45,600
so

00:05:47,039 --> 00:05:51,199
we have a technical steering committee

00:05:49,600 --> 00:05:53,919
to pray with us

00:05:51,199 --> 00:05:54,639
are and he will do and we currently do

00:05:53,919 --> 00:05:57,919
and

00:05:54,639 --> 00:06:00,400
what we should do so um

00:05:57,919 --> 00:06:03,680
but there are successive needs focusing

00:06:00,400 --> 00:06:06,960
for each technical aspect

00:06:03,680 --> 00:06:10,160
and today um so we

00:06:06,960 --> 00:06:13,360
have four sessions from uh uh

00:06:10,160 --> 00:06:16,639
activities for this

00:06:13,360 --> 00:06:18,160
so to realize the cip basically uh we

00:06:16,639 --> 00:06:20,880
also have a strict

00:06:18,160 --> 00:06:22,319
policy uh the pulsey is upstream

00:06:20,880 --> 00:06:26,240
construction

00:06:22,319 --> 00:06:29,840
and to create a therapy based layer

00:06:26,240 --> 00:06:33,280
we use of course we use reacts

00:06:29,840 --> 00:06:36,319
and the next main line is our absolute

00:06:33,280 --> 00:06:39,759
and currently we are focused

00:06:36,319 --> 00:06:40,800
to create super long-term support

00:06:39,759 --> 00:06:43,840
currently

00:06:40,800 --> 00:06:47,680
which means stable uh team

00:06:43,840 --> 00:06:50,720
is also our c so we contribute first

00:06:47,680 --> 00:06:50,720
and um

00:06:52,479 --> 00:07:00,000
pick that kind of output through cip

00:06:57,120 --> 00:07:01,360
to create our base area so this is

00:07:00,000 --> 00:07:06,000
actually a

00:07:01,360 --> 00:07:06,000
structure i want to be currently doing

00:07:06,160 --> 00:07:12,639
so i would say

00:07:09,840 --> 00:07:12,639
we have

00:07:12,960 --> 00:07:16,400
four technical sessions after this

00:07:15,039 --> 00:07:19,840
introduction

00:07:16,400 --> 00:07:22,400
so first uh lesson is related to

00:07:19,840 --> 00:07:23,840
mainly focus current team so current

00:07:22,400 --> 00:07:27,599
team focused to create

00:07:23,840 --> 00:07:30,880
a cip super long-term support value

00:07:27,599 --> 00:07:34,080
which includes some

00:07:30,880 --> 00:07:37,120
sort of features so

00:07:34,080 --> 00:07:37,120
current team um

00:07:39,599 --> 00:07:46,560
and then we moved to um

00:07:42,960 --> 00:07:50,080
actually use cases and me from our

00:07:46,560 --> 00:07:53,280
lessons also present the uh

00:07:50,080 --> 00:07:56,879
yeah use cases

00:07:53,280 --> 00:07:57,919
and then um we moved to our city

00:07:56,879 --> 00:08:02,000
security work

00:07:57,919 --> 00:08:02,000
group topics so this is

00:08:02,080 --> 00:08:08,960
today's agenda

00:08:05,680 --> 00:08:11,039
so so

00:08:08,960 --> 00:08:12,160
i'm just concluding our weekly

00:08:11,039 --> 00:08:14,639
introduction so

00:08:12,160 --> 00:08:16,240
can we currently focus to create open

00:08:14,639 --> 00:08:19,599
source based layer

00:08:16,240 --> 00:08:21,440
and this basically our book to realize

00:08:19,599 --> 00:08:24,400
that's very great and also

00:08:21,440 --> 00:08:24,400
sustainability

00:08:24,960 --> 00:08:32,080
to ensure this one is the key aspect

00:08:28,400 --> 00:08:35,120
contribution and collaboration is

00:08:32,080 --> 00:08:38,719
our key active

00:08:35,120 --> 00:08:42,479
so let's see and if you are interested

00:08:38,719 --> 00:08:46,000
in our activity please consider to join

00:08:42,479 --> 00:08:50,000
to realize our sustainable order

00:08:46,000 --> 00:08:50,000
well thank you very much for

00:08:53,360 --> 00:08:57,920
i would watching take one um

00:08:59,360 --> 00:09:02,160
wrong questions

00:09:03,040 --> 00:09:06,080
no oh yeah

00:09:07,120 --> 00:09:14,080
maybe yeah that's fine so um

00:09:10,640 --> 00:09:17,360
no if so if you need um

00:09:14,080 --> 00:09:17,920
this kind of slide yeah i you know we

00:09:17,360 --> 00:09:21,440
put

00:09:17,920 --> 00:09:24,399
uh to be a website so

00:09:21,440 --> 00:09:26,399
please you know if you're today don't

00:09:24,399 --> 00:09:30,399
worry about that

00:09:26,399 --> 00:09:33,600
so the next speaker is kudo

00:09:30,399 --> 00:09:37,839
from current team so please welcome

00:09:33,600 --> 00:09:37,839
to amazon

00:09:39,519 --> 00:09:45,279
thank you very much hi welcome to clp

00:09:43,440 --> 00:09:48,839
minnesota

00:09:45,279 --> 00:09:50,800
this talk will discuss about cip kernel

00:09:48,839 --> 00:09:53,600
team

00:09:50,800 --> 00:09:55,200
if you have watched my talk on monday

00:09:53,600 --> 00:09:58,480
thank you very much

00:09:55,200 --> 00:10:00,399
if you have not please don't worry i'll

00:09:58,480 --> 00:10:03,680
cover full stories about

00:10:00,399 --> 00:10:06,240
cip kernel team activities from the talk

00:10:03,680 --> 00:10:06,240
on monday

00:10:08,800 --> 00:10:12,720
before starting the talk let me

00:10:10,800 --> 00:10:16,800
introduce myself

00:10:12,720 --> 00:10:18,640
i'm masashi kudo from cybertrust japan

00:10:16,800 --> 00:10:20,320
i have been working on software

00:10:18,640 --> 00:10:24,560
development in i.t

00:10:20,320 --> 00:10:28,000
and network areas for more than 30 years

00:10:24,560 --> 00:10:30,880
i had acted as open daylight ambassador

00:10:28,000 --> 00:10:33,200
and currently act as cip kernel team

00:10:30,880 --> 00:10:36,720
chair

00:10:33,200 --> 00:10:39,760
i'm located in japan so let me give this

00:10:36,720 --> 00:10:39,760
talk from japan

00:10:45,200 --> 00:10:51,920
cib kernel team started four years ago

00:10:49,040 --> 00:10:52,240
since then the team has steadily worked

00:10:51,920 --> 00:10:54,800
and

00:10:52,240 --> 00:10:58,160
improved processes to sustain the

00:10:54,800 --> 00:11:01,360
infrastructure of civil platforms

00:10:58,160 --> 00:11:04,240
so in my talk i'd like to explain what

00:11:01,360 --> 00:11:07,440
the kernel team's activities are

00:11:04,240 --> 00:11:08,320
also i'd like to explain open source

00:11:07,440 --> 00:11:11,279
tools

00:11:08,320 --> 00:11:13,120
which we developed to facilitate our

00:11:11,279 --> 00:11:16,240
activities

00:11:13,120 --> 00:11:18,800
then let me start with cip kernel team

00:11:16,240 --> 00:11:18,800
updates

00:11:21,279 --> 00:11:25,200
primary goal of cip kernel team is to

00:11:24,560 --> 00:11:29,200
provide

00:11:25,200 --> 00:11:31,680
cip slts kernels for 10 plus years

00:11:29,200 --> 00:11:32,720
by fixing versions to fulfill the

00:11:31,680 --> 00:11:35,839
required level

00:11:32,720 --> 00:11:37,920
of reliability sustainability and

00:11:35,839 --> 00:11:40,480
security

00:11:37,920 --> 00:11:41,680
there are two kernel maintenance one

00:11:40,480 --> 00:11:45,920
kernel mentor

00:11:41,680 --> 00:11:45,920
and two kernel developers in the team

00:11:48,079 --> 00:11:52,399
while we are highly motivated to work on

00:11:50,959 --> 00:11:54,800
the project

00:11:52,399 --> 00:11:56,800
we don't think we can achieve the goal

00:11:54,800 --> 00:11:59,600
by ourselves only

00:11:56,800 --> 00:12:02,000
we definitely rely on outputs from

00:11:59,600 --> 00:12:05,440
upstream projects

00:12:02,000 --> 00:12:09,200
therefore cib adopts the upstream first

00:12:05,440 --> 00:12:10,399
as a development principle the upstream

00:12:09,200 --> 00:12:13,279
first principle

00:12:10,399 --> 00:12:14,800
allows patch commits only if those

00:12:13,279 --> 00:12:18,079
patches are already

00:12:14,800 --> 00:12:19,680
in the upstream by following this

00:12:18,079 --> 00:12:22,560
principle

00:12:19,680 --> 00:12:24,079
if a desired patch is not in the

00:12:22,560 --> 00:12:26,240
upstream yet

00:12:24,079 --> 00:12:28,480
this patch should be accepted by the

00:12:26,240 --> 00:12:31,920
upstream at first

00:12:28,480 --> 00:12:35,839
therefore it may take time to introduce

00:12:31,920 --> 00:12:39,839
the desired patch to our project

00:12:35,839 --> 00:12:43,200
but it enables us to share our outputs

00:12:39,839 --> 00:12:48,160
with the upstream at the same time

00:12:43,200 --> 00:12:48,160
the risk of conflicts can be eliminated

00:12:48,480 --> 00:12:52,000
cib is aiming to sustain target systems

00:12:51,760 --> 00:12:54,800
and

00:12:52,000 --> 00:12:57,600
devices during their life cycles which

00:12:54,800 --> 00:13:00,160
are very long by their nature

00:12:57,600 --> 00:13:06,720
so the upstream first principle is

00:13:00,160 --> 00:13:10,480
essential to achieve our goal

00:13:06,720 --> 00:13:13,040
for cip kernel team upstreams are linus

00:13:10,480 --> 00:13:16,240
mainline and lts

00:13:13,040 --> 00:13:19,120
we collaborate with upstream projects

00:13:16,240 --> 00:13:20,800
before using our their outputs we

00:13:19,120 --> 00:13:24,639
upstream what we have

00:13:20,800 --> 00:13:24,639
and don't keep them locally

00:13:24,800 --> 00:13:29,519
as marked 1 contribution is our first

00:13:28,079 --> 00:13:32,160
action

00:13:29,519 --> 00:13:34,079
feature of streaming is done by cip

00:13:32,160 --> 00:13:37,200
member developers

00:13:34,079 --> 00:13:40,320
on the other hand cip kernel team

00:13:37,200 --> 00:13:41,920
contributes to upstreams in more general

00:13:40,320 --> 00:13:44,639
manner

00:13:41,920 --> 00:13:47,920
we developed open source tools in order

00:13:44,639 --> 00:13:52,079
to work on contributions effectively

00:13:47,920 --> 00:13:52,079
i'll talk about those tools later

00:13:52,800 --> 00:14:00,560
as marked 2 use is the second action

00:13:57,279 --> 00:14:04,959
we use lts kernels to release cip

00:14:00,560 --> 00:14:08,240
slts kernels for those releases

00:14:04,959 --> 00:14:09,600
automated testing acts a very important

00:14:08,240 --> 00:14:12,639
role

00:14:09,600 --> 00:14:16,240
so cib kernel team is closely working

00:14:12,639 --> 00:14:19,600
with cip testing team

00:14:16,240 --> 00:14:22,800
as marked 3 integrate is the third

00:14:19,600 --> 00:14:26,399
action by integrating those

00:14:22,800 --> 00:14:29,600
slts kernels with cip core packages

00:14:26,399 --> 00:14:31,920
and additional packages industrial

00:14:29,600 --> 00:14:33,839
systems or devices can be developed and

00:14:31,920 --> 00:14:35,839
maintained

00:14:33,839 --> 00:14:36,880
i'm going to elaborate those three

00:14:35,839 --> 00:14:39,120
actions each by

00:14:36,880 --> 00:14:39,120
each

00:14:41,519 --> 00:14:47,839
the first action is contribution

00:14:44,560 --> 00:14:50,560
because we use upstream outputs we value

00:14:47,839 --> 00:14:51,600
the general contributions to upstreams

00:14:50,560 --> 00:14:55,680
in order to be

00:14:51,600 --> 00:14:58,240
fair therefore cip kernel team

00:14:55,680 --> 00:14:59,440
works on backboarding of bug fixes and

00:14:58,240 --> 00:15:03,279
security patches

00:14:59,440 --> 00:15:06,800
to lds these statistics

00:15:03,279 --> 00:15:10,240
are the contributions by cip kernel team

00:15:06,800 --> 00:15:13,760
to lts cip

00:15:10,240 --> 00:15:17,680
slts kernels are based on lts 4.4

00:15:13,760 --> 00:15:20,000
and 4.19 but the contributions are not

00:15:17,680 --> 00:15:23,519
limited to them

00:15:20,000 --> 00:15:26,240
contribution counts differ depends on

00:15:23,519 --> 00:15:29,040
the length of each life

00:15:26,240 --> 00:15:31,120
by summing up each contribution count

00:15:29,040 --> 00:15:34,959
the total of our contribution is

00:15:31,120 --> 00:15:34,959
around 1600

00:15:37,360 --> 00:15:46,000
the second action is used

00:15:40,399 --> 00:15:49,839
we use lts for cip slts kernel bases

00:15:46,000 --> 00:15:50,480
i just mentioned cip slts kernels are

00:15:49,839 --> 00:15:54,160
based on

00:15:50,480 --> 00:15:57,600
lts 4.4 and 4.19

00:15:54,160 --> 00:16:01,320
the first releases of srts 4.19

00:15:57,600 --> 00:16:05,480
and 4.19 rt were done in

00:16:01,320 --> 00:16:09,600
2019. we plan to maintain them until

00:16:05,480 --> 00:16:13,680
2029 for 10 years

00:16:09,600 --> 00:16:14,399
the first releases of srts 4.4 and 4.4

00:16:13,680 --> 00:16:17,440
rd

00:16:14,399 --> 00:16:20,320
were done in 2017 and

00:16:17,440 --> 00:16:21,320
likewise we support them for 10 years

00:16:20,320 --> 00:16:24,320
till

00:16:21,320 --> 00:16:24,320
00:16:26,399 --> 00:16:32,639
currently srds 4.19

00:16:29,600 --> 00:16:34,800
is released twice a month and 4.4 is

00:16:32,639 --> 00:16:39,279
once a month

00:16:34,800 --> 00:16:42,000
it is because commit counts of slps 4.4

00:16:39,279 --> 00:16:42,000
are reduced

00:16:42,480 --> 00:16:51,839
srts 4.19 rt is once a month

00:16:46,720 --> 00:16:51,839
and 4.4 rt once every two months

00:16:54,160 --> 00:16:59,519
so far we have steadily released cip

00:16:57,519 --> 00:17:01,920
srds currents

00:16:59,519 --> 00:17:04,720
thanks to a maintenance by following

00:17:01,920 --> 00:17:07,120
release frequencies i just i just

00:17:04,720 --> 00:17:07,120
mentioned

00:17:09,039 --> 00:17:12,880
this chart shows how upstream releases

00:17:12,160 --> 00:17:16,880
are used

00:17:12,880 --> 00:17:16,880
in our slts releases

00:17:17,039 --> 00:17:23,760
both lts 4.4 and 4.19

00:17:20,400 --> 00:17:25,919
are maintained for six years by lts

00:17:23,760 --> 00:17:28,960
project

00:17:25,919 --> 00:17:29,840
because cip aims to maintain for 10

00:17:28,960 --> 00:17:31,760
years

00:17:29,840 --> 00:17:34,640
the rest of four years will be

00:17:31,760 --> 00:17:38,160
maintained by cip

00:17:34,640 --> 00:17:43,679
we made major releases in 2017

00:17:38,160 --> 00:17:47,600
and 2019 so a major release frequency

00:17:43,679 --> 00:17:50,000
is once per two years so far

00:17:47,600 --> 00:17:51,840
another two years is going to pass and

00:17:50,000 --> 00:17:54,559
the er 2021 is

00:17:51,840 --> 00:17:55,120
approaching so we started to discuss

00:17:54,559 --> 00:18:01,600
about

00:17:55,120 --> 00:18:04,880
new slds kernels

00:18:01,600 --> 00:18:07,520
the third action is integrate

00:18:04,880 --> 00:18:08,640
precisely speaking this action is not

00:18:07,520 --> 00:18:14,400
taken by

00:18:08,640 --> 00:18:17,679
the kernel team but by cip kernel users

00:18:14,400 --> 00:18:20,799
by integrating the slts kernel with

00:18:17,679 --> 00:18:22,080
cip core packages and additional

00:18:20,799 --> 00:18:24,240
packages

00:18:22,080 --> 00:18:26,799
industrial systems or devices can be

00:18:24,240 --> 00:18:31,760
developed

00:18:26,799 --> 00:18:33,679
cip refers deviant for userland packages

00:18:31,760 --> 00:18:35,200
if you'd like to use debian source

00:18:33,679 --> 00:18:40,000
packages

00:18:35,200 --> 00:18:43,919
you can use yokt 4k as a build system

00:18:40,000 --> 00:18:46,080
cipco packages contain tons of packages

00:18:43,919 --> 00:18:47,360
which may not be sufficient for the

00:18:46,080 --> 00:18:50,799
development of end

00:18:47,360 --> 00:18:51,600
products so you can add the necessary

00:18:50,799 --> 00:18:56,240
packages

00:18:51,600 --> 00:18:59,280
from debian by writing recipes

00:18:56,240 --> 00:19:02,640
debian provides lts scheme even

00:18:59,280 --> 00:19:05,919
extended rts so these schemes

00:19:02,640 --> 00:19:07,440
can be taken into account for super long

00:19:05,919 --> 00:19:11,840
term support

00:19:07,440 --> 00:19:11,840
including user run packages

00:19:14,320 --> 00:19:20,880
as i explained cib kernel team is

00:19:17,760 --> 00:19:21,919
actively contributing to upstream open

00:19:20,880 --> 00:19:25,360
source 2

00:19:21,919 --> 00:19:28,080
were developed to help this activity now

00:19:25,360 --> 00:19:30,880
i would like to explain those tools in

00:19:28,080 --> 00:19:30,880
this session

00:19:32,320 --> 00:19:36,000
there are mainly three tools

00:19:36,400 --> 00:19:40,160
classify favorite patches cip kernel

00:19:39,360 --> 00:19:44,480
seek

00:19:40,160 --> 00:19:49,600
and cip connect config in this slide

00:19:44,480 --> 00:19:49,600
those relationships are roughly pictured

00:19:49,760 --> 00:19:54,240
the tool of classified failed patches

00:19:52,480 --> 00:19:56,799
filters and fetches

00:19:54,240 --> 00:19:58,320
backboard patches from the stable kernel

00:19:56,799 --> 00:20:00,960
mailing list

00:19:58,320 --> 00:20:01,520
and classify the needs of backboarding

00:20:00,960 --> 00:20:05,039
means

00:20:01,520 --> 00:20:07,600
cip stable kernel the scope of the

00:20:05,039 --> 00:20:10,799
backboarding is based on cib kernel

00:20:07,600 --> 00:20:10,799
configure repository

00:20:11,120 --> 00:20:18,240
another tool is cib chronosync

00:20:15,280 --> 00:20:20,240
the cip kernel sig tracks that result a

00:20:18,240 --> 00:20:23,679
status of security issues

00:20:20,240 --> 00:20:26,960
identified with cve ids

00:20:23,679 --> 00:20:28,559
in mainline stable and other configured

00:20:26,960 --> 00:20:30,880
branches

00:20:28,559 --> 00:20:34,799
the scope of the backboarding is based

00:20:30,880 --> 00:20:38,000
on cib kernel config repository as well

00:20:34,799 --> 00:20:42,320
so cib kernel config is used

00:20:38,000 --> 00:20:46,720
as a gate for go logo decisions

00:20:42,320 --> 00:20:50,080
by the way i just mentioned cve

00:20:46,720 --> 00:20:50,400
cbe stands for common vulnerabilities

00:20:50,080 --> 00:20:54,960
and

00:20:50,400 --> 00:20:58,080
exposures let me elaborate each two

00:20:54,960 --> 00:20:58,080
in the following slides

00:20:59,440 --> 00:21:07,120
the first story cip kernel sec

00:21:03,280 --> 00:21:07,120
you can find it on the git lab

00:21:07,919 --> 00:21:11,760
the cip kernel sig is a vulnerability

00:21:10,799 --> 00:21:14,960
scanner

00:21:11,760 --> 00:21:16,480
it gathers cv information from multiple

00:21:14,960 --> 00:21:20,720
app streams

00:21:16,480 --> 00:21:24,400
such as the stable color ubuntu kernel

00:21:20,720 --> 00:21:25,600
and debian kernel the result can be

00:21:24,400 --> 00:21:29,440
referred through both

00:21:25,600 --> 00:21:32,640
web interface and command line interface

00:21:29,440 --> 00:21:37,200
the kernel team mainly works on cves

00:21:32,640 --> 00:21:40,240
affected in kernel 4.4 and 4.19

00:21:37,200 --> 00:21:44,960
and may backboard the specific cv comets

00:21:40,240 --> 00:21:47,840
to the stable kernel

00:21:44,960 --> 00:21:48,400
the cip kernel sake provides a simple

00:21:47,840 --> 00:21:51,600
graphic

00:21:48,400 --> 00:21:52,559
layout and the users can get detailed

00:21:51,600 --> 00:21:56,000
information

00:21:52,559 --> 00:21:59,840
through web gui and you can see

00:21:56,000 --> 00:21:59,840
in this slide

00:22:01,440 --> 00:22:09,360
next tool is classify field patches

00:22:05,360 --> 00:22:09,360
this is also on the git lab

00:22:11,360 --> 00:22:18,480
the stable kernel only accepts patches

00:22:14,720 --> 00:22:21,520
related to bug fixes or security fixes

00:22:18,480 --> 00:22:22,159
therefore the patches in the stable

00:22:21,520 --> 00:22:25,840
archive

00:22:22,159 --> 00:22:28,240
are vital to be reviewed

00:22:25,840 --> 00:22:28,960
project tracks the status of stable

00:22:28,240 --> 00:22:31,679
patches

00:22:28,960 --> 00:22:33,280
and classifies patches into two

00:22:31,679 --> 00:22:36,720
categories

00:22:33,280 --> 00:22:40,000
one is already applied and another is to

00:22:36,720 --> 00:22:43,120
be applied

00:22:40,000 --> 00:22:45,360
the cip kernel team reviews them and may

00:22:43,120 --> 00:22:46,559
back both the specific comments to the

00:22:45,360 --> 00:22:49,679
saved kernel

00:22:46,559 --> 00:22:49,679
where applicable

00:22:50,400 --> 00:22:54,480
this is an example of outputs of this

00:22:52,880 --> 00:22:57,280
tool

00:22:54,480 --> 00:23:00,000
the upper side shows the examples of

00:22:57,280 --> 00:23:03,679
already applied patches

00:23:00,000 --> 00:23:06,559
each line starts with applied

00:23:03,679 --> 00:23:08,159
the bottom line and bottom side shows

00:23:06,559 --> 00:23:11,360
the examples of patches

00:23:08,159 --> 00:23:15,600
to be applied each line starts

00:23:11,360 --> 00:23:15,600
with to apply in this case

00:23:18,720 --> 00:23:23,760
and the last but not the least is cip

00:23:21,840 --> 00:23:27,120
kernel config

00:23:23,760 --> 00:23:30,000
this is also on the git lab this

00:23:27,120 --> 00:23:32,640
repository collects kernel configuration

00:23:30,000 --> 00:23:35,600
from cib members

00:23:32,640 --> 00:23:36,080
to define the maintenance scope in cib

00:23:35,600 --> 00:23:40,880
kernel

00:23:36,080 --> 00:23:43,520
4.4 and 4.19 respectively

00:23:40,880 --> 00:23:45,840
this is also the maintenance baseline

00:23:43,520 --> 00:23:46,880
for cip kernel sync and classified

00:23:45,840 --> 00:23:50,799
ferric patches

00:23:46,880 --> 00:23:54,799
as i mentioned earlier

00:23:50,799 --> 00:23:54,799
so let me conclude today's talk

00:23:55,600 --> 00:24:00,880
our goal is to provide sfds currents for

00:23:58,880 --> 00:24:04,159
10 plus years by fulfilling

00:24:00,880 --> 00:24:04,960
industrial requirements in order to

00:24:04,159 --> 00:24:08,880
achieve the

00:24:04,960 --> 00:24:12,400
goal cip colonel team follows

00:24:08,880 --> 00:24:14,799
upstream first principle and contributes

00:24:12,400 --> 00:24:18,080
to upstreams

00:24:14,799 --> 00:24:19,200
we are studying releasing cip slts

00:24:18,080 --> 00:24:23,039
kernels by

00:24:19,200 --> 00:24:27,600
taking advantage of lts and we developed

00:24:23,039 --> 00:24:27,600
cip open source tools for contributions

00:24:29,039 --> 00:24:34,159
ok that's all from me thanks for

00:24:31,840 --> 00:24:37,600
listening to my talk

00:24:34,159 --> 00:24:37,600
are there any questions

00:24:38,080 --> 00:24:47,840
let's see

00:24:48,080 --> 00:24:53,039
okay i have a question

00:24:56,960 --> 00:25:02,480
let's see one question

00:25:00,000 --> 00:25:02,480
uh is

00:25:03,440 --> 00:25:09,600
being the newcomer how to contribute in

00:25:06,559 --> 00:25:09,600
cip kernel

00:25:09,919 --> 00:25:15,840
uh thank you very much uh this is a very

00:25:11,840 --> 00:25:15,840
good question uh

00:25:16,240 --> 00:25:24,400
i i do not prepare but

00:25:20,240 --> 00:25:27,440
uh uh if you

00:25:24,400 --> 00:25:31,600
can subscribe cip dev

00:25:27,440 --> 00:25:34,720
mailing list by going to the cip

00:25:31,600 --> 00:25:38,000
website and there are

00:25:34,720 --> 00:25:38,000
a bunch of emails

00:25:39,919 --> 00:25:48,480
exchanged and you can see

00:25:42,960 --> 00:25:53,200
how the cip development is going

00:25:48,480 --> 00:25:57,039
and every thursday every thursday

00:25:53,200 --> 00:26:01,120
we have a iic channel meeting

00:25:57,039 --> 00:26:04,000
and by joining such ielts channel

00:26:01,120 --> 00:26:06,559
you can also understand the status of

00:26:04,000 --> 00:26:11,840
cip development

00:26:06,559 --> 00:26:11,840
so please uh

00:26:13,360 --> 00:26:20,559
come to the cip website and

00:26:16,880 --> 00:26:24,880
see the information listed

00:26:20,559 --> 00:26:28,320
on the web

00:26:24,880 --> 00:26:31,360
the next question is usually how soon

00:26:28,320 --> 00:26:35,039
can cip release a patch

00:26:31,360 --> 00:26:38,559
once a ca cv related upstream kernel

00:26:35,039 --> 00:26:41,760
is released yeah thank you

00:26:38,559 --> 00:26:45,039
uh this is also a good question we are

00:26:41,760 --> 00:26:49,360
trying to incorporate uh seaweed

00:26:45,039 --> 00:26:52,720
patch release quite often

00:26:49,360 --> 00:26:58,720
as you can see we are releasing

00:26:52,720 --> 00:26:58,720
uh for example slts 4.19

00:26:58,960 --> 00:27:05,919
once uh per two weeks

00:27:03,039 --> 00:27:06,320
that means uh we are catching up uh the

00:27:05,919 --> 00:27:09,440
late

00:27:06,320 --> 00:27:13,039
we are trying to catch up the latest lts

00:27:09,440 --> 00:27:15,120
and buying if uh

00:27:13,039 --> 00:27:16,559
cb part security patches are

00:27:15,120 --> 00:27:21,120
incorporated in

00:27:16,559 --> 00:27:24,159
lts uh by delaying the

00:27:21,120 --> 00:27:28,799
such two weeks maximum

00:27:24,159 --> 00:27:28,799
we can incorporate such security batches

00:27:32,399 --> 00:27:39,600
do do do i have more time

00:27:36,559 --> 00:27:42,399
i have one more question it is

00:27:39,600 --> 00:27:43,919
that some security fixes are not marked

00:27:42,399 --> 00:27:46,559
as security fixed but

00:27:43,919 --> 00:27:48,559
how cib curdle maintenance will pick up

00:27:46,559 --> 00:27:51,679
such fixing

00:27:48,559 --> 00:27:54,880
yeah this is

00:27:51,679 --> 00:27:58,480
yes uh this is actually a problem

00:27:54,880 --> 00:28:01,600
but currently as i showed

00:27:58,480 --> 00:28:05,600
in my previous slide

00:28:01,600 --> 00:28:05,600
let's see can i see my slide

00:28:12,159 --> 00:28:16,000
we are not only collecting such

00:28:14,880 --> 00:28:19,520
information from

00:28:16,000 --> 00:28:23,679
a stable kernel but also from ubuntu and

00:28:19,520 --> 00:28:27,120
debian they are marking

00:28:23,679 --> 00:28:31,120
patches with cv ids and

00:28:27,120 --> 00:28:33,600
by corresponding those information

00:28:31,120 --> 00:28:37,360
we are trying to incorporate our cv

00:28:33,600 --> 00:28:45,840
security patches into our cip

00:28:37,360 --> 00:28:45,840
or even bug boarding to lts

00:28:51,200 --> 00:28:53,679
okay

00:28:56,960 --> 00:29:01,760
okay the next question is can you

00:28:59,360 --> 00:29:02,480
elaborate on the cv tracking that is

00:29:01,760 --> 00:29:07,440
done

00:29:02,480 --> 00:29:07,440
relative to upstream mainline column

00:29:08,000 --> 00:29:15,600
since a main line does not mark or track

00:29:12,320 --> 00:29:18,240
this is uh i think similar question

00:29:15,600 --> 00:29:18,240
i think

00:29:19,360 --> 00:29:26,320
and if my answer is not

00:29:22,960 --> 00:29:30,880
satisfactory uh let's

00:29:26,320 --> 00:29:30,880
discuss data offline

00:29:34,480 --> 00:29:38,240
what is method of doing security

00:29:37,039 --> 00:29:42,080
verification

00:29:38,240 --> 00:29:42,080
and research on kernel

00:29:43,919 --> 00:29:50,559
well uh

00:29:47,840 --> 00:29:51,440
kind of security verification method is

00:29:50,559 --> 00:29:55,520
as i mentioned

00:29:51,440 --> 00:30:00,159
uh this kind of a cv

00:29:55,520 --> 00:30:04,960
cb by through a cv

00:30:00,159 --> 00:30:07,279
scanner this cip kernel sec

00:30:04,960 --> 00:30:08,399
we are trying to find the identified

00:30:07,279 --> 00:30:13,679
security patch

00:30:08,399 --> 00:30:13,679
which are needed for cip currents

00:30:13,840 --> 00:30:20,640
at this moment we do not use any

00:30:16,960 --> 00:30:23,120
special tools

00:30:20,640 --> 00:30:26,559
specific to security security

00:30:23,120 --> 00:30:26,559
verification at this moment

00:30:27,120 --> 00:30:33,360
okay so time is running out so

00:30:30,480 --> 00:30:33,360
the last question

00:30:33,760 --> 00:30:38,240
do you know who are currently using cip

00:30:37,039 --> 00:30:41,440
kernel

00:30:38,240 --> 00:30:41,440
yes actually

00:30:41,520 --> 00:30:51,039
of course cip member companies

00:30:45,360 --> 00:30:55,440
are using cip kernels entirely

00:30:51,039 --> 00:30:58,559
also actually my company cybertrust

00:30:55,440 --> 00:30:58,559
is releasing a

00:30:59,039 --> 00:31:06,960
linux distribution based on the cip

00:31:02,159 --> 00:31:11,600
kernel and there are several

00:31:06,960 --> 00:31:11,600
customers already using a cip column

00:31:12,320 --> 00:31:15,919
okay thank you very much for such many

00:31:15,440 --> 00:31:18,960
questions

00:31:15,919 --> 00:31:22,640
and great questions uh

00:31:18,960 --> 00:31:26,559
so probably uh i have to hand over to

00:31:22,640 --> 00:31:33,840
the next speaker so your son

00:31:26,559 --> 00:31:33,840
is it okay

00:31:35,039 --> 00:31:37,279
uh

00:31:40,880 --> 00:31:45,360
good morning everyone i'm from

00:31:43,919 --> 00:31:47,840
renaissance

00:31:45,360 --> 00:31:50,799
next i will share my experiences

00:31:47,840 --> 00:31:54,559
integrating the cv slts kernel

00:31:50,799 --> 00:31:57,919
into a fully fledged psb and

00:31:54,559 --> 00:32:00,399
here is the agenda i will briefly

00:31:57,919 --> 00:32:02,640
introduce myself and the company

00:32:00,399 --> 00:32:04,480
and go some background information about

00:32:02,640 --> 00:32:08,080
the application field

00:32:04,480 --> 00:32:10,240
our platform the solution for hmi

00:32:08,080 --> 00:32:11,440
and the relation between renaissance and

00:32:10,240 --> 00:32:15,039
cab

00:32:11,440 --> 00:32:18,080
and next is the main part my experiences

00:32:15,039 --> 00:32:21,279
and it have totally seven items

00:32:18,080 --> 00:32:23,519
and last i will share some future ideas

00:32:21,279 --> 00:32:26,840
and q a section thank you message and

00:32:23,519 --> 00:32:28,000
some reference link for you to refer

00:32:26,840 --> 00:32:29,840
later

00:32:28,000 --> 00:32:31,519
uh at first i will go to the

00:32:29,840 --> 00:32:34,960
introductions

00:32:31,519 --> 00:32:38,000
um this is me and

00:32:34,960 --> 00:32:39,360
uh a senior staff engineer of princess

00:32:38,000 --> 00:32:42,080
design vietnam

00:32:39,360 --> 00:32:42,960
and i'm a project leader in the asset

00:32:42,080 --> 00:32:46,159
linux team

00:32:42,960 --> 00:32:46,799
at renaissance design vietnam and we

00:32:46,159 --> 00:32:50,559
provide

00:32:46,799 --> 00:32:53,760
verified linux package icon vlp

00:32:50,559 --> 00:32:56,320
integrating the cv slts kernel

00:32:53,760 --> 00:32:59,039
i have 10 years experience in embedded

00:32:56,320 --> 00:33:04,720
software development and mainly linux

00:32:59,039 --> 00:33:04,720
and at the end is my contact email

00:33:04,960 --> 00:33:08,720
about renaissance renaissance is a short

00:33:08,080 --> 00:33:11,279
form for

00:33:08,720 --> 00:33:12,880
renaissance semiconductor for advanced

00:33:11,279 --> 00:33:16,080
solutions

00:33:12,880 --> 00:33:19,679
our headquarters in tokyo japan

00:33:16,080 --> 00:33:23,919
our major platform and automotive hmi

00:33:19,679 --> 00:33:24,480
industrial and iot we have more than 18

00:33:23,919 --> 00:33:28,080
00:33:24,480 --> 00:33:29,120
staffs all over the world and our major

00:33:28,080 --> 00:33:32,080
operations

00:33:29,120 --> 00:33:33,279
as research development design

00:33:32,080 --> 00:33:36,840
manufacturers

00:33:33,279 --> 00:33:38,240
sales and servicing of semiconductor

00:33:36,840 --> 00:33:42,399
products

00:33:38,240 --> 00:33:45,519
and in old ranges around the world

00:33:42,399 --> 00:33:49,039
ibc releases design vietnam is

00:33:45,519 --> 00:33:49,840
one of them and we located in ho chi

00:33:49,039 --> 00:33:53,039
minh city

00:33:49,840 --> 00:33:56,960
vietnam our major platform

00:33:53,039 --> 00:34:00,159
automotive and hmi with more than 800

00:33:56,960 --> 00:34:02,320
engineers we work for the design of

00:34:00,159 --> 00:34:05,519
semiconductor forward headquarters

00:34:02,320 --> 00:34:10,399
software aspect

00:34:05,519 --> 00:34:10,399
and next year the background information

00:34:10,720 --> 00:34:17,359
today target is the application

00:34:13,839 --> 00:34:20,720
fields for human machine interface

00:34:17,359 --> 00:34:22,240
hmi block with 3d graphics and video

00:34:20,720 --> 00:34:25,919
capabilities

00:34:22,240 --> 00:34:26,560
we can see it in many applications feel

00:34:25,919 --> 00:34:30,320
like the

00:34:26,560 --> 00:34:33,839
intercom digital signage and cure

00:34:30,320 --> 00:34:38,079
terminals and many more

00:34:33,839 --> 00:34:41,679
to satisfy these application fields

00:34:38,079 --> 00:34:45,200
we provide the ssd platform

00:34:41,679 --> 00:34:48,879
and the platform here contains five

00:34:45,200 --> 00:34:52,240
factors the first one is as if

00:34:48,879 --> 00:34:56,480
the platform multimedia processor

00:34:52,240 --> 00:34:56,960
is a family of 64-bit and 32-bit amp

00:34:56,480 --> 00:35:01,040
based

00:34:56,960 --> 00:35:02,320
mpu up to 7 cores with imagination 3d

00:35:01,040 --> 00:35:05,520
graphics

00:35:02,320 --> 00:35:06,480
accelerations and variety video

00:35:05,520 --> 00:35:10,640
processing

00:35:06,480 --> 00:35:11,280
up to 4k and other functions necessary

00:35:10,640 --> 00:35:13,839
for the

00:35:11,280 --> 00:35:15,599
embedded devices in hmi type

00:35:13,839 --> 00:35:19,040
applications

00:35:15,599 --> 00:35:20,800
and we also have the evolution kit with

00:35:19,040 --> 00:35:24,480
mass production thumb

00:35:20,800 --> 00:35:28,000
and also the software side we have the

00:35:24,480 --> 00:35:30,400
verify linux package vlp that i will

00:35:28,000 --> 00:35:31,280
explain more more detail in the later

00:35:30,400 --> 00:35:35,040
slide

00:35:31,280 --> 00:35:39,200
you also have the uh linux level muntoon

00:35:35,040 --> 00:35:39,200
and also some software add-ons

00:35:39,920 --> 00:35:47,599
about the um verify linux package

00:35:44,320 --> 00:35:49,920
we have many components from the gui

00:35:47,599 --> 00:35:51,280
to the multimedia to the secure

00:35:49,920 --> 00:35:54,720
middleware

00:35:51,280 --> 00:35:58,160
and what we want to focus

00:35:54,720 --> 00:35:59,680
here is verify linux package we want to

00:35:58,160 --> 00:36:02,880
provide the evidence

00:35:59,680 --> 00:36:06,800
of our verification reason and

00:36:02,880 --> 00:36:08,240
we also want to have a industrial grade

00:36:06,800 --> 00:36:10,880
winner kernel

00:36:08,240 --> 00:36:12,000
with 10 or more years super long term

00:36:10,880 --> 00:36:14,880
support

00:36:12,000 --> 00:36:16,800
high reliability security and with

00:36:14,880 --> 00:36:20,160
real-time features

00:36:16,800 --> 00:36:22,960
and cab-s-lts kernel can satisfy

00:36:20,160 --> 00:36:24,000
all these requirements that's why we

00:36:22,960 --> 00:36:27,680
want to adopt

00:36:24,000 --> 00:36:32,160
the clb slts kernel into our vlp

00:36:27,680 --> 00:36:32,160
to profile a fully fledged pc

00:36:38,839 --> 00:36:41,839
and

00:36:47,040 --> 00:36:53,359
about the relations between

00:36:50,160 --> 00:36:56,480
cb and renaissance

00:36:53,359 --> 00:36:58,079
because we want to adopt the cbs lts

00:36:56,480 --> 00:37:00,720
kernel so we also

00:36:58,079 --> 00:37:01,760
decide to try the cv as a platinum

00:37:00,720 --> 00:37:04,880
member

00:37:01,760 --> 00:37:08,079
and we also propose our hardware

00:37:04,880 --> 00:37:09,520
to be the reference for the cab as we

00:37:08,079 --> 00:37:13,240
can see here we have

00:37:09,520 --> 00:37:14,720
sfc one m highway q7 development kit for

00:37:13,240 --> 00:37:18,480
mp7

00:37:14,720 --> 00:37:22,000
and renaissance as hd2m 96c

00:37:18,480 --> 00:37:25,760
ball for the m v8 and we have

00:37:22,000 --> 00:37:28,400
many more um totally you will have

00:37:25,760 --> 00:37:30,320
seven relevant hardware platform from

00:37:28,400 --> 00:37:34,839
other cv members

00:37:30,320 --> 00:37:38,480
and on covered x86 m7 and m

00:37:34,839 --> 00:37:38,480
e8 architecture

00:37:38,720 --> 00:37:41,359
and next

00:37:44,880 --> 00:37:51,839
next i will go to the main park

00:37:48,400 --> 00:37:51,839
my experience

00:38:18,079 --> 00:38:23,280
i have totally seven experiences that i

00:38:20,880 --> 00:38:33,839
want to share

00:38:23,280 --> 00:38:33,839
the first one

00:38:41,119 --> 00:38:47,839
the first one is star first the ideal

00:38:44,839 --> 00:38:47,839
development

00:38:47,920 --> 00:38:55,119
the ideo development flow starts with cb

00:38:51,119 --> 00:38:57,839
kernel team upstream to the mainline and

00:38:55,119 --> 00:38:57,839
lts

00:38:58,160 --> 00:39:01,640
cp connor team here i mentioned is just

00:39:00,960 --> 00:39:04,800
the

00:39:01,640 --> 00:39:07,520
representative because it's not just the

00:39:04,800 --> 00:39:08,320
kernel team who upstream the code cv

00:39:07,520 --> 00:39:11,680
member

00:39:08,320 --> 00:39:14,320
and non-cv member also upstream

00:39:11,680 --> 00:39:16,640
and this upstream means include

00:39:14,320 --> 00:39:20,880
renaissance patches

00:39:16,640 --> 00:39:25,119
then the lts will be used in cbs

00:39:20,880 --> 00:39:29,839
lts kernel and cbs lts kernel will be

00:39:25,119 --> 00:39:29,839
integrated into our assessment

00:40:01,760 --> 00:40:06,079
and this is just the

00:40:07,119 --> 00:40:14,800
just the ideal development flow

00:40:11,280 --> 00:40:25,839
in reality our renaissance business team

00:40:14,800 --> 00:40:25,839
have to patch a lot by ourselves

00:40:29,359 --> 00:40:35,520
and we have to catch a lot

00:40:32,400 --> 00:40:36,079
before integrating the cbs lts kernel

00:40:35,520 --> 00:40:39,599
into

00:40:36,079 --> 00:40:43,760
our suspicion and we have to do that

00:40:39,599 --> 00:40:48,400
to satisfy the on-time delivery

00:40:43,760 --> 00:40:48,400
okay and next splice please

00:40:48,880 --> 00:40:53,839
for the number two tip experience

00:41:04,480 --> 00:41:09,599
for the number two experience we

00:41:06,800 --> 00:41:12,960
gradually get the benefit

00:41:09,599 --> 00:41:13,839
after the first patching for the next

00:41:12,960 --> 00:41:17,200
update and

00:41:13,839 --> 00:41:20,480
super long-term maintenance we gradually

00:41:17,200 --> 00:41:22,960
touch less and less because the

00:41:20,480 --> 00:41:24,079
renaissance patch is already included in

00:41:22,960 --> 00:41:27,119
cbs lts

00:41:24,079 --> 00:41:28,240
kernel and we can directly apply it for

00:41:27,119 --> 00:41:30,720
example

00:41:28,240 --> 00:41:31,359
for the first release it took us 15 main

00:41:30,720 --> 00:41:33,839
months

00:41:31,359 --> 00:41:36,000
and for the second release just 11 and

00:41:33,839 --> 00:41:38,640
for the next one until the

00:41:36,000 --> 00:41:40,240
stable phase around seven main months

00:41:38,640 --> 00:41:42,720
although these numbers

00:41:40,240 --> 00:41:44,560
are not real and just for example but we

00:41:42,720 --> 00:41:49,920
can see the development here

00:41:44,560 --> 00:41:53,440
is reduced and next is tip 3

00:41:49,920 --> 00:41:55,440
we continuously get the benefit um

00:41:53,440 --> 00:41:56,880
the development law is still the same

00:41:55,440 --> 00:42:00,560
but now we focus

00:41:56,880 --> 00:42:02,440
on the fixing in the past we may have to

00:42:00,560 --> 00:42:05,359
sell investigate

00:42:02,440 --> 00:42:06,720
self-solving or consider the impact for

00:42:05,359 --> 00:42:09,359
other components

00:42:06,720 --> 00:42:11,520
but now we can directly refer to the

00:42:09,359 --> 00:42:14,079
mainland or the lts purchase

00:42:11,520 --> 00:42:15,520
and if we cut any similar issues with

00:42:14,079 --> 00:42:19,680
the solutions we can

00:42:15,520 --> 00:42:23,280
easily consider and quickly apply to our

00:42:19,680 --> 00:42:27,359
bsb and not just our assessments be

00:42:23,280 --> 00:42:28,880
the customer of research also have the

00:42:27,359 --> 00:42:31,040
similar benefits

00:42:28,880 --> 00:42:32,319
and additionally if they want to support

00:42:31,040 --> 00:42:35,760
the latest kernel

00:42:32,319 --> 00:42:37,760
they can directly refer to the main line

00:42:35,760 --> 00:42:41,680
and the lts kernel

00:42:37,760 --> 00:42:44,560
instead of cell protein so

00:42:41,680 --> 00:42:47,040
the exponent here is renaissance and our

00:42:44,560 --> 00:42:50,240
customers spend less effort to fix

00:42:47,040 --> 00:42:54,720
books or to support the latest kernel

00:42:50,240 --> 00:42:54,720
and next tip experience number four

00:42:55,119 --> 00:42:58,880
we get long-term benefit i have five

00:42:58,319 --> 00:43:02,319
things

00:42:58,880 --> 00:43:04,480
to mention the first one is if

00:43:02,319 --> 00:43:05,680
renaissance and civic corner teamwork on

00:43:04,480 --> 00:43:09,839
the same kernel

00:43:05,680 --> 00:43:13,359
take for example here is 4.9 team

00:43:09,839 --> 00:43:15,440
price 72 for cb10

00:43:13,359 --> 00:43:17,440
um we have the patch from the

00:43:15,440 --> 00:43:20,640
ramstarsmith with team

00:43:17,440 --> 00:43:23,119
and i call here the newbie patches and

00:43:20,640 --> 00:43:25,680
we have the patch from siri kernel team

00:43:23,119 --> 00:43:28,880
i call here the expert patches

00:43:25,680 --> 00:43:30,240
and watch in global restart purchase and

00:43:28,880 --> 00:43:33,280
by comparisons

00:43:30,240 --> 00:43:35,839
these two type of passes we can learn

00:43:33,280 --> 00:43:37,680
what are the experts know about the

00:43:35,839 --> 00:43:41,200
similar features

00:43:37,680 --> 00:43:41,839
and also number two by subscribing in

00:43:41,200 --> 00:43:44,960
the cb

00:43:41,839 --> 00:43:48,480
development mailing list we can monitor

00:43:44,960 --> 00:43:51,200
or we can see a lot of expert discussion

00:43:48,480 --> 00:43:52,480
and number three especially if the

00:43:51,200 --> 00:43:55,520
discussion is

00:43:52,480 --> 00:43:58,800
related to the renaissance as a cmpus

00:43:55,520 --> 00:44:02,160
we can directly discuss with the expert

00:43:58,800 --> 00:44:05,520
and all of this have got a lot in this

00:44:02,160 --> 00:44:06,640
developing our patching and working

00:44:05,520 --> 00:44:09,839
skills

00:44:06,640 --> 00:44:11,839
and also number four i we have the

00:44:09,839 --> 00:44:14,880
chance to attend a lot of

00:44:11,839 --> 00:44:15,520
open source conference like this cv mini

00:44:14,880 --> 00:44:17,920
submit

00:44:15,520 --> 00:44:19,280
and also number five we have a chance to

00:44:17,920 --> 00:44:23,440
speak at the civi

00:44:19,280 --> 00:44:26,400
municipalities here and um

00:44:23,440 --> 00:44:28,400
in summarize in summaries uh we have

00:44:26,400 --> 00:44:30,960
many chances to learn from

00:44:28,400 --> 00:44:33,440
and to work with experts and that's how

00:44:30,960 --> 00:44:37,839
for our human development

00:44:33,440 --> 00:44:37,839
and experiment number five

00:44:40,560 --> 00:44:43,599
next number five

00:44:46,319 --> 00:44:50,079
we want to go step by step take for

00:44:49,280 --> 00:44:53,599
example

00:44:50,079 --> 00:44:55,040
cb slts kernel have two support version

00:44:53,599 --> 00:44:57,040
normal in real time

00:44:55,040 --> 00:44:59,920
and renaissance means we want to do the

00:44:57,040 --> 00:45:02,560
same things but we do step by step

00:44:59,920 --> 00:45:03,599
from verify normal version first and

00:45:02,560 --> 00:45:06,560
then for the next

00:45:03,599 --> 00:45:07,359
we add the real time with verify and for

00:45:06,560 --> 00:45:09,680
the next one

00:45:07,359 --> 00:45:11,760
we switch back to verify normal and

00:45:09,680 --> 00:45:14,480
non-verify real time

00:45:11,760 --> 00:45:15,040
but this way you can support but step by

00:45:14,480 --> 00:45:17,119
step

00:45:15,040 --> 00:45:18,319
from easy to difficult and to stable

00:45:17,119 --> 00:45:22,000
phase

00:45:18,319 --> 00:45:24,720
next is building number six

00:45:22,000 --> 00:45:25,760
we support one version at one time for

00:45:24,720 --> 00:45:29,119
example

00:45:25,760 --> 00:45:34,319
at october of uh

00:45:29,119 --> 00:45:38,720
uh 2019 for 4.19 with the park cb

00:45:34,319 --> 00:45:42,280
12 for normal and cv 10 for real time

00:45:38,720 --> 00:45:46,240
and for 4.4 cb

00:45:42,280 --> 00:45:50,160
38 for normal and 36 for real time

00:45:46,240 --> 00:45:53,680
and for renaissance we want to integrate

00:45:50,160 --> 00:45:54,240
the cd kernel to our whisper but we

00:45:53,680 --> 00:45:57,839
choose

00:45:54,240 --> 00:46:02,000
just one version 4.18 we do cb 10

00:45:57,839 --> 00:46:03,440
and 4.4 we do cb 36 and this way we have

00:46:02,000 --> 00:46:05,280
the unified support

00:46:03,440 --> 00:46:07,680
the only difference between the normal

00:46:05,280 --> 00:46:08,640
and real time is just the real-time pass

00:46:07,680 --> 00:46:15,839
set

00:46:08,640 --> 00:46:15,839
and next is the experience 7.

00:46:16,240 --> 00:46:22,240
we released once every three months

00:46:19,359 --> 00:46:23,040
um the kernel policy from cv they

00:46:22,240 --> 00:46:26,240
released

00:46:23,040 --> 00:46:29,760
4.18 tristan for before one summer

00:46:26,240 --> 00:46:33,280
and real-time transformers for 4.19

00:46:29,760 --> 00:46:36,160
and 4x4 real-time once every two months

00:46:33,280 --> 00:46:38,319
and by release one every three months

00:46:36,160 --> 00:46:41,839
renaissance and we get the latest

00:46:38,319 --> 00:46:43,680
update and we also have enough time for

00:46:41,839 --> 00:46:46,079
one development cycle

00:46:43,680 --> 00:46:47,200
four or six weeks for protein similar

00:46:46,079 --> 00:46:50,400
for verifying

00:46:47,200 --> 00:46:52,240
and remain for documentation and this is

00:46:50,400 --> 00:46:56,560
for the whole development

00:46:52,240 --> 00:46:58,720
reactor work for kernel is much less and

00:46:56,560 --> 00:47:00,480
that's all of the experience that i have

00:46:58,720 --> 00:47:03,680
time to share now

00:47:00,480 --> 00:47:06,319
so i go next to some idea for the

00:47:03,680 --> 00:47:06,319
futures

00:47:08,240 --> 00:47:14,160
the near future

00:47:11,280 --> 00:47:14,720
renaissance will iterate the cd car

00:47:14,160 --> 00:47:18,079
package

00:47:14,720 --> 00:47:21,359
into our abcd and we want to expand the

00:47:18,079 --> 00:47:24,480
number of package in the cv core and

00:47:21,359 --> 00:47:25,040
for the fair future we may consider to

00:47:24,480 --> 00:47:29,920
the test

00:47:25,040 --> 00:47:29,920
automation security and maybe more

00:47:30,319 --> 00:47:36,720
and thank you

00:47:34,559 --> 00:47:39,040
this chance i want to say thanks for the

00:47:36,720 --> 00:47:40,160
cb team who have worked for that so that

00:47:39,040 --> 00:47:42,800
we can integrate

00:47:40,160 --> 00:47:44,160
the kernel into our obviously and uh

00:47:42,800 --> 00:47:46,319
thank you lena fordish

00:47:44,160 --> 00:47:48,079
for preparing and support me to speak

00:47:46,319 --> 00:47:51,440
here and thank you for

00:47:48,079 --> 00:47:55,040
all your time for attending

00:47:51,440 --> 00:47:56,960
my sharing thank you and the last one is

00:47:55,040 --> 00:47:58,800
some reference link

00:47:56,960 --> 00:48:00,640
so that you can check later if you want

00:47:58,800 --> 00:48:03,680
to know more about

00:48:00,640 --> 00:48:06,880
my experience today and

00:48:03,680 --> 00:48:10,160
finally either q a sections so do you

00:48:06,880 --> 00:48:10,160
have any questions for me

00:48:17,359 --> 00:48:21,760
so the first question is what the

00:48:19,200 --> 00:48:24,880
biggest challenge in maintaining this is

00:48:21,760 --> 00:48:24,880
be in long term

00:48:25,680 --> 00:48:34,480
until now the biggest challenge

00:48:29,599 --> 00:48:37,920
is that beside the

00:48:34,480 --> 00:48:38,720
working we have to work faster and

00:48:37,920 --> 00:48:41,599
better

00:48:38,720 --> 00:48:43,040
day by day because in the maintenance we

00:48:41,599 --> 00:48:46,480
cannot do the same work

00:48:43,040 --> 00:48:48,960
for a long time we have to

00:48:46,480 --> 00:48:50,960
find what we have to do better day by

00:48:48,960 --> 00:48:54,720
day

00:48:50,960 --> 00:48:57,599
and when i say patch a lot

00:48:54,720 --> 00:48:58,400
could be more specific for example at

00:48:57,599 --> 00:49:01,280
first

00:48:58,400 --> 00:49:02,079
when the grenade patches are not

00:49:01,280 --> 00:49:05,520
included

00:49:02,079 --> 00:49:08,559
in the cbsl test kernel so that means

00:49:05,520 --> 00:49:11,040
when we apply the cd

00:49:08,559 --> 00:49:12,400
kernel adjust the kernel itself on the

00:49:11,040 --> 00:49:15,680
ball support package

00:49:12,400 --> 00:49:17,839
for the only rival for our hardware are

00:49:15,680 --> 00:49:20,559
not included so we have to work by

00:49:17,839 --> 00:49:20,559
ourselves

00:49:21,280 --> 00:49:30,400
and what kind of

00:49:25,119 --> 00:49:31,040
patches mainly for the driver for the ip

00:49:30,400 --> 00:49:45,839
stuff

00:49:31,040 --> 00:49:45,839
on our device and on our ball

00:50:02,400 --> 00:50:07,200
experience for using a cip uh water use

00:50:06,160 --> 00:50:10,640
cases

00:50:07,200 --> 00:50:13,440
so the next speaker uh let's

00:50:10,640 --> 00:50:14,319
speak about security physically is more

00:50:13,440 --> 00:50:17,280
important

00:50:14,319 --> 00:50:18,480
for industrial use cases we use don't

00:50:17,280 --> 00:50:21,680
care about

00:50:18,480 --> 00:50:24,319
the connect devices on the internet but

00:50:21,680 --> 00:50:24,800
now it's changing so they're talking

00:50:24,319 --> 00:50:29,520
about

00:50:24,800 --> 00:50:32,720
how we ensure the security for our crt

00:50:29,520 --> 00:50:40,480
devices so please welcome

00:50:32,720 --> 00:50:44,800
kento and the danish from crp

00:50:40,480 --> 00:50:47,839
so great hi guys thank you for inter

00:50:44,800 --> 00:50:50,559
and introducing me yoshi and thank you

00:50:47,839 --> 00:50:52,559
for attending cfp mini summit all

00:50:50,559 --> 00:50:54,400
i'm kent yoshida from lunches

00:50:52,559 --> 00:50:57,520
electronics in charge of

00:50:54,400 --> 00:50:58,400
the first part of this talk and second

00:50:57,520 --> 00:51:01,920
speaker is

00:50:58,400 --> 00:51:09,280
mr kumar dinesh kumar from

00:51:01,920 --> 00:51:12,319
dojiba software india

00:51:09,280 --> 00:51:15,200
okay today we would like to talk about

00:51:12,319 --> 00:51:16,319
activities of cfe security working group

00:51:15,200 --> 00:51:19,680
to achieve

00:51:16,319 --> 00:51:22,559
industrial grade security

00:51:19,680 --> 00:51:23,599
in the first part i will talk about the

00:51:22,559 --> 00:51:26,000
background

00:51:23,599 --> 00:51:26,640
purpose and activities of bus the

00:51:26,000 --> 00:51:29,680
roadmap

00:51:26,640 --> 00:51:33,200
and progress of the certification for

00:51:29,680 --> 00:51:36,160
iec 6043 part 4.

00:51:33,200 --> 00:51:37,359
and the survey results about technical

00:51:36,160 --> 00:51:41,200
requirements for

00:51:37,359 --> 00:51:44,400
iec 6443-4-2

00:51:41,200 --> 00:51:47,599
in the second part mr kumar will explain

00:51:44,400 --> 00:51:49,119
about our challenges for an open source

00:51:47,599 --> 00:51:53,160
project to achieve

00:51:49,119 --> 00:51:56,160
a secure development process to meet iec

00:51:53,160 --> 00:51:56,160
643-4-1

00:52:01,520 --> 00:52:08,240
as yoshi mentioned cip is working to

00:52:05,280 --> 00:52:10,400
establish an open source base layer of

00:52:08,240 --> 00:52:11,440
industrial grade software through the

00:52:10,400 --> 00:52:14,720
activities of

00:52:11,440 --> 00:52:18,000
each working group to achieve

00:52:14,720 --> 00:52:21,680
higher industrial grade for cip products

00:52:18,000 --> 00:52:24,160
security is one of key challenge

00:52:21,680 --> 00:52:27,040
the security working group is launched

00:52:24,160 --> 00:52:30,559
in december 2018

00:52:27,040 --> 00:52:31,200
and considering what can be done to deal

00:52:30,559 --> 00:52:34,640
with

00:52:31,200 --> 00:52:38,640
cyber attacks that's seriously damaging

00:52:34,640 --> 00:52:42,319
in the industry we are working on

00:52:38,640 --> 00:52:45,440
as a project to provide a base layer

00:52:42,319 --> 00:52:46,240
of industrial grade software we must be

00:52:45,440 --> 00:52:50,079
serious

00:52:46,240 --> 00:52:52,800
about security needs with iec 643

00:52:50,079 --> 00:52:53,599
which is the cyber security standard for

00:52:52,800 --> 00:53:00,480
industrial

00:52:53,599 --> 00:53:04,960
automation and control systems

00:53:00,480 --> 00:53:08,000
as you know where iec 643 was born

00:53:04,960 --> 00:53:11,680
by integrating the standards of major

00:53:08,000 --> 00:53:15,520
industries such as plant energy

00:53:11,680 --> 00:53:18,960
smart grid and railway in addition

00:53:15,520 --> 00:53:22,079
iec 643 is a standard series

00:53:18,960 --> 00:53:23,280
for all control system players who are

00:53:22,079 --> 00:53:26,319
operators

00:53:23,280 --> 00:53:29,440
system integrators and component program

00:53:26,319 --> 00:53:32,079
product suppliers linux

00:53:29,440 --> 00:53:32,880
is used in many of the component

00:53:32,079 --> 00:53:36,000
products

00:53:32,880 --> 00:53:38,160
that make up industrial automation and

00:53:36,000 --> 00:53:42,480
control systems

00:53:38,160 --> 00:53:44,960
the iec 643 part 4 sheets which is

00:53:42,480 --> 00:53:46,079
security requirements for component

00:53:44,960 --> 00:53:49,440
products

00:53:46,079 --> 00:53:54,640
list embedded devices network devices

00:53:49,440 --> 00:53:54,640
and host devices as examples of target

00:53:54,839 --> 00:53:57,839
product

00:53:58,960 --> 00:54:02,160
this working group's mission is to

00:54:01,359 --> 00:54:04,559
provide

00:54:02,160 --> 00:54:05,440
open source based layer needed for

00:54:04,559 --> 00:54:10,079
developing

00:54:05,440 --> 00:54:13,119
products compliant with iec 643-2

00:54:10,079 --> 00:54:17,040
security requirements as well as to

00:54:13,119 --> 00:54:20,160
keep its security up to date

00:54:17,040 --> 00:54:21,119
more suppliers take advantage of our

00:54:20,160 --> 00:54:24,800
solutions

00:54:21,119 --> 00:54:29,680
and get iec 643.

00:54:24,800 --> 00:54:32,800
to make industry more secure with cip

00:54:29,680 --> 00:54:33,839
for that we are considering to create a

00:54:32,800 --> 00:54:36,960
platform

00:54:33,839 --> 00:54:38,079
such as kernel and package software to

00:54:36,960 --> 00:54:42,000
be compliant for

00:54:38,079 --> 00:54:43,599
certification a guideline that shows how

00:54:42,000 --> 00:54:45,839
users can develop

00:54:43,599 --> 00:54:47,200
compliant applications using our

00:54:45,839 --> 00:54:49,040
platform

00:54:47,200 --> 00:54:50,839
and a testing environment to be

00:54:49,040 --> 00:54:53,839
compliant for

00:54:50,839 --> 00:54:53,839
certification

00:54:55,599 --> 00:54:59,760
we are a sub-working group of the clb

00:54:58,960 --> 00:55:02,319
project

00:54:59,760 --> 00:55:03,359
and our activities are supposed

00:55:02,319 --> 00:55:05,599
supported by

00:55:03,359 --> 00:55:06,960
the contributions of gib member

00:55:05,599 --> 00:55:10,160
companies

00:55:06,960 --> 00:55:12,720
currently six companies of the eight

00:55:10,160 --> 00:55:14,000
member companies are participating in

00:55:12,720 --> 00:55:19,440
this activity

00:55:14,000 --> 00:55:19,440
from germany india taiwan and japan

00:55:19,599 --> 00:55:23,119
in addition to the activity report at

00:55:22,400 --> 00:55:26,559
the

00:55:23,119 --> 00:55:29,760
cip tsc conference and

00:55:26,559 --> 00:55:30,319
the development conference at the irc we

00:55:29,760 --> 00:55:33,280
hold

00:55:30,319 --> 00:55:34,400
private conferences that is every other

00:55:33,280 --> 00:55:38,000
week conference

00:55:34,400 --> 00:55:42,079
and every week irc we should keep

00:55:38,000 --> 00:55:45,119
content in the paid standard in private

00:55:42,079 --> 00:55:48,720
so we need to discuss with only

00:55:45,119 --> 00:55:51,839
those who had purchased the standard

00:55:48,720 --> 00:55:54,160
this is the only reason why we hold the

00:55:51,839 --> 00:55:57,839
private conferences

00:55:54,160 --> 00:56:01,119
but i know we are an open source project

00:55:57,839 --> 00:56:04,319
so our activities should be opened

00:56:01,119 --> 00:56:07,839
thus our deliverables will be

00:56:04,319 --> 00:56:11,119
not limited like any other product

00:56:07,839 --> 00:56:17,839
of cip it will be generally shared on

00:56:11,119 --> 00:56:20,960
our gitlab

00:56:17,839 --> 00:56:24,160
okay so next i will share

00:56:20,960 --> 00:56:27,200
you the roadmap and current status

00:56:24,160 --> 00:56:29,200
our first task was to investigate the

00:56:27,200 --> 00:56:34,400
security requirements for the

00:56:29,200 --> 00:56:37,680
iec 644-4-2 which is our objective

00:56:34,400 --> 00:56:38,319
and we selected some package software to

00:56:37,680 --> 00:56:42,839
meet

00:56:38,319 --> 00:56:44,160
the requirements as the investigation

00:56:42,839 --> 00:56:48,079
result

00:56:44,160 --> 00:56:50,880
to get certified iec 643-2

00:56:48,079 --> 00:56:52,319
it must be proved that the target

00:56:50,880 --> 00:56:56,240
software was

00:56:52,319 --> 00:56:59,520
developed in a secure process

00:56:56,240 --> 00:57:04,079
so we are investing investigating

00:56:59,520 --> 00:57:07,599
how cip can meet to iec 643-4-1

00:57:04,079 --> 00:57:11,200
secure development process this is a big

00:57:07,599 --> 00:57:14,400
challenge for our open source project

00:57:11,200 --> 00:57:17,680
but we need to address

00:57:14,400 --> 00:57:18,559
we believe it is great benefits for many

00:57:17,680 --> 00:57:21,760
users that

00:57:18,559 --> 00:57:25,280
a universally shared platform guarantees

00:57:21,760 --> 00:57:27,440
those security in addition

00:57:25,280 --> 00:57:28,480
the result of our investigation should

00:57:27,440 --> 00:57:31,839
be rebuild

00:57:28,480 --> 00:57:34,079
with the sufficient body because there

00:57:31,839 --> 00:57:37,520
is a strict suffocation program

00:57:34,079 --> 00:57:41,599
in iec 643 about

00:57:37,520 --> 00:57:44,559
our activities for iec 643

00:57:41,599 --> 00:57:46,160
part 4 certification please see our

00:57:44,559 --> 00:57:54,559
security working

00:57:46,160 --> 00:57:57,680
group wiki in the cip wiki

00:57:54,559 --> 00:58:01,680
as you note notice our activities is

00:57:57,680 --> 00:58:04,880
related to all groups in the cfd project

00:58:01,680 --> 00:58:06,799
a software level procedure how to keep a

00:58:04,880 --> 00:58:08,799
record of this review

00:58:06,799 --> 00:58:10,079
providing test cases according to

00:58:08,799 --> 00:58:13,200
requirements

00:58:10,079 --> 00:58:17,200
required functions for package software

00:58:13,200 --> 00:58:19,119
and so on and of course software

00:58:17,200 --> 00:58:22,960
updating procedure

00:58:19,119 --> 00:58:25,440
as well apparently we will be able to

00:58:22,960 --> 00:58:27,200
make a clear request after discussion

00:58:25,440 --> 00:58:30,319
with the certification body

00:58:27,200 --> 00:58:31,119
however we should start the security

00:58:30,319 --> 00:58:33,839
practices

00:58:31,119 --> 00:58:34,640
because it is necessary to clarify the

00:58:33,839 --> 00:58:37,680
issues

00:58:34,640 --> 00:58:40,880
through those actions

00:58:37,680 --> 00:58:44,000
so we have already started to discuss

00:58:40,880 --> 00:58:47,359
about a few security practices with

00:58:44,000 --> 00:58:48,960
other team such as jp core and testing

00:58:47,359 --> 00:58:52,480
group

00:58:48,960 --> 00:58:52,799
in details of this mr kumar will talk to

00:58:52,480 --> 00:58:55,839
you

00:58:52,799 --> 00:58:55,839
in a second but

00:58:58,079 --> 00:59:04,319
okay at the end of my talk

00:59:01,119 --> 00:59:07,839
i'd like to share you the report of the

00:59:04,319 --> 00:59:09,280
the investigation for iec 643-2

00:59:07,839 --> 00:59:11,920
requirements

00:59:09,280 --> 00:59:12,799
these numbers shows what numbers of

00:59:11,920 --> 00:59:15,760
requirements

00:59:12,799 --> 00:59:18,480
are supported by about 20 package

00:59:15,760 --> 00:59:21,920
software we selected

00:59:18,480 --> 00:59:25,040
as a result we can provide a

00:59:21,920 --> 00:59:28,640
viable function for 48

00:59:25,040 --> 00:59:33,440
of 77 requirements of security level 3

00:59:28,640 --> 00:59:36,000
of embedded devices

00:59:33,440 --> 00:59:36,720
the best layer can support over 60

00:59:36,000 --> 00:59:39,200
percent

00:59:36,720 --> 00:59:40,000
of the requirements that embedded

00:59:39,200 --> 00:59:42,480
devices

00:59:40,000 --> 00:59:43,839
and their software application have to

00:59:42,480 --> 00:59:46,480
meet

00:59:43,839 --> 00:59:47,839
it will be a great advantage for many

00:59:46,480 --> 00:59:50,960
users

00:59:47,839 --> 00:59:54,400
we believe the result

00:59:50,960 --> 00:59:58,319
of this survey and our great

00:59:54,400 --> 00:59:58,319
significance to our activities

00:59:58,839 --> 01:00:01,839
okay

01:00:02,160 --> 01:00:10,079
now let's move on to the instruction

01:00:05,359 --> 01:00:12,799
of initiatives related to iec 640-1

01:00:10,079 --> 01:00:15,839
secure development process so uh it's

01:00:12,799 --> 01:00:15,839
your turn mr kumar

01:00:17,599 --> 01:00:22,000
hello how so first i will introduce

01:00:21,040 --> 01:00:25,359
myself

01:00:22,000 --> 01:00:28,160
i am dinesh from toshua india basically

01:00:25,359 --> 01:00:31,599
i am working currently for uh

01:00:28,160 --> 01:00:35,839
cip activities in security work group

01:00:31,599 --> 01:00:39,040
where we are investigating iec 62443

01:00:35,839 --> 01:00:43,280
hard as ford s1 and 4s2

01:00:39,040 --> 01:00:47,040
standards so maybe uh it's already

01:00:43,280 --> 01:00:50,240
explained about four days to uh by kent

01:00:47,040 --> 01:00:52,480
and uh in this uh

01:00:50,240 --> 01:00:54,160
second part of this session i will be

01:00:52,480 --> 01:00:58,319
explaining about

01:00:54,160 --> 01:01:00,960
a brief overview of 4ds1 and

01:00:58,319 --> 01:01:03,359
briefly i will also update about our

01:01:00,960 --> 01:01:06,400
activities

01:01:03,359 --> 01:01:09,680
so uh by now probably you can

01:01:06,400 --> 01:01:13,280
understand that this is something like

01:01:09,680 --> 01:01:16,799
unique initiative taken in cip where

01:01:13,280 --> 01:01:20,000
we are trying to uh get assessment

01:01:16,799 --> 01:01:22,720
uh by iec certification body for

01:01:20,000 --> 01:01:23,440
our open source project where we are

01:01:22,720 --> 01:01:26,720
having

01:01:23,440 --> 01:01:28,880
like so many challenges in terms of in

01:01:26,720 --> 01:01:31,359
open source there are many things which

01:01:28,880 --> 01:01:32,799
are not documented there is no proper

01:01:31,359 --> 01:01:36,000
process

01:01:32,799 --> 01:01:39,200
and there are so many contributions

01:01:36,000 --> 01:01:42,720
all around the world so

01:01:39,200 --> 01:01:45,680
whereas in ic standards they expect

01:01:42,720 --> 01:01:46,079
many things to be streamlined documented

01:01:45,680 --> 01:01:49,520
and

01:01:46,079 --> 01:01:52,480
strict process to be followed so

01:01:49,520 --> 01:01:53,119
in ford s1 there are total eight

01:01:52,480 --> 01:01:56,400
practice

01:01:53,119 --> 01:01:59,520
practices as mentioned here where

01:01:56,400 --> 01:02:01,200
uh security management practice such

01:01:59,520 --> 01:02:04,400
further sub practices

01:02:01,200 --> 01:02:06,559
like a process should be defined where

01:02:04,400 --> 01:02:09,599
everything is documented

01:02:06,559 --> 01:02:12,880
and there should be uh

01:02:09,599 --> 01:02:13,359
process to deliverables like whenever

01:02:12,880 --> 01:02:16,480
some

01:02:13,359 --> 01:02:16,880
scripts binaries are shared it is shared

01:02:16,480 --> 01:02:19,680
with

01:02:16,880 --> 01:02:20,880
uh where and customer can verify the

01:02:19,680 --> 01:02:22,799
integrity

01:02:20,880 --> 01:02:24,240
so that kind of process should be in

01:02:22,799 --> 01:02:26,240
place and

01:02:24,240 --> 01:02:27,599
in specification of security

01:02:26,240 --> 01:02:30,160
requirements

01:02:27,599 --> 01:02:33,359
further there are many things the

01:02:30,160 --> 01:02:36,720
specification expects like

01:02:33,359 --> 01:02:40,319
threat model should be defined and

01:02:36,720 --> 01:02:43,039
all the input output to the product

01:02:40,319 --> 01:02:44,160
as well as boundaries of the product

01:02:43,039 --> 01:02:48,240
process should be

01:02:44,160 --> 01:02:51,599
defined and in secure by design

01:02:48,240 --> 01:02:54,799
again it expects a secure design

01:02:51,599 --> 01:02:57,520
principles or secure coding guidelines

01:02:54,799 --> 01:02:57,520
to be followed

01:02:58,000 --> 01:03:02,960
secure implementation practice further

01:03:01,359 --> 01:03:05,839
elaborates on

01:03:02,960 --> 01:03:07,200
implementation part of where we'll see

01:03:05,839 --> 01:03:09,680
in coming slides

01:03:07,200 --> 01:03:10,319
the challenges we face in open source

01:03:09,680 --> 01:03:13,200
and

01:03:10,319 --> 01:03:14,960
how as of now we are planning to uh

01:03:13,200 --> 01:03:17,599
explain

01:03:14,960 --> 01:03:20,000
and uh then next is security

01:03:17,599 --> 01:03:22,559
verification and validation testing

01:03:20,000 --> 01:03:25,440
where it is expected or that all the

01:03:22,559 --> 01:03:27,839
security requirements which are defined

01:03:25,440 --> 01:03:28,799
uh should be properly validated and

01:03:27,839 --> 01:03:31,920
tested

01:03:28,799 --> 01:03:34,400
that should be proof for all the

01:03:31,920 --> 01:03:35,200
things which were identified in threat

01:03:34,400 --> 01:03:38,000
model

01:03:35,200 --> 01:03:40,640
how they will be mitigated and in

01:03:38,000 --> 01:03:43,680
management of security related issues

01:03:40,640 --> 01:03:46,720
on the specification aspects like

01:03:43,680 --> 01:03:50,079
how or issues will be handed like

01:03:46,720 --> 01:03:51,440
if the any if any issue is reported by

01:03:50,079 --> 01:03:53,920
end customer

01:03:51,440 --> 01:03:54,960
what is the channel and how it is made

01:03:53,920 --> 01:03:58,400
sure that

01:03:54,960 --> 01:04:01,520
the fix goes in a secure way

01:03:58,400 --> 01:04:02,640
then there are practices of security

01:04:01,520 --> 01:04:05,680
update management

01:04:02,640 --> 01:04:06,400
and security guidelines of which again

01:04:05,680 --> 01:04:08,880
defines

01:04:06,400 --> 01:04:09,520
certain guidelines to be followed so

01:04:08,880 --> 01:04:13,039
overall

01:04:09,520 --> 01:04:16,640
how this dash one mainly focuses

01:04:13,039 --> 01:04:20,000
around a secure development

01:04:16,640 --> 01:04:23,680
now as we can see when a product

01:04:20,000 --> 01:04:26,480
supplier wants to comply for four h1

01:04:23,680 --> 01:04:28,000
uh it applies to four categories

01:04:26,480 --> 01:04:30,559
basically applications

01:04:28,000 --> 01:04:32,960
embedded devices network components and

01:04:30,559 --> 01:04:35,839
host devices

01:04:32,960 --> 01:04:38,079
in cip how we are currently targeting

01:04:35,839 --> 01:04:41,839
embedded device category as well as

01:04:38,079 --> 01:04:41,839
our network device category

01:04:54,640 --> 01:05:00,880
okay so in uh so now we will see

01:04:58,000 --> 01:05:02,640
as i mentioned in open source there are

01:05:00,880 --> 01:05:05,839
a few challenges which we

01:05:02,640 --> 01:05:08,799
uh face and uh before that we will see

01:05:05,839 --> 01:05:12,000
what all the key elements in 4ds1

01:05:08,799 --> 01:05:13,359
so the scope of 4ds1 is limited to

01:05:12,000 --> 01:05:16,480
developer as well as

01:05:13,359 --> 01:05:19,359
maintainer of a secure product it

01:05:16,480 --> 01:05:20,720
doesn't specify anything about the usage

01:05:19,359 --> 01:05:23,200
and all those things

01:05:20,720 --> 01:05:24,720
it encourages security concerns to be

01:05:23,200 --> 01:05:27,839
proactively addressed

01:05:24,720 --> 01:05:30,559
at an early stage in product life cycle

01:05:27,839 --> 01:05:31,599
so that accordingly mitigation can be

01:05:30,559 --> 01:05:34,480
planned

01:05:31,599 --> 01:05:35,599
it encourages to do threat analysis

01:05:34,480 --> 01:05:38,400
exhaustively

01:05:35,599 --> 01:05:39,920
based on the use case and considering

01:05:38,400 --> 01:05:43,200
all possible scenarios

01:05:39,920 --> 01:05:44,000
product is going to support do the risk

01:05:43,200 --> 01:05:46,480
assessment

01:05:44,000 --> 01:05:48,240
to establish just boundaries for process

01:05:46,480 --> 01:05:50,799
data and control flow

01:05:48,240 --> 01:05:54,960
and thorough security verification and

01:05:50,799 --> 01:05:54,960
validation testing has to be performed

01:06:02,160 --> 01:06:10,160
okay so uh we'll see uh

01:06:05,200 --> 01:06:13,200
what all the key challenges in ford s1

01:06:10,160 --> 01:06:16,400
uh considering open source nature of cip

01:06:13,200 --> 01:06:18,079
and not being an end product so these

01:06:16,400 --> 01:06:21,119
are the challenges uh

01:06:18,079 --> 01:06:22,160
like development environment security so

01:06:21,119 --> 01:06:24,640
as we know in

01:06:22,160 --> 01:06:25,359
open source software the development

01:06:24,640 --> 01:06:27,680
happens

01:06:25,359 --> 01:06:28,960
across the globe and different people

01:06:27,680 --> 01:06:32,079
contribute

01:06:28,960 --> 01:06:32,799
and guaranteeing the security of

01:06:32,079 --> 01:06:36,160
development

01:06:32,799 --> 01:06:39,359
environment access of the code

01:06:36,160 --> 01:06:41,200
is bit challenging next one is following

01:06:39,359 --> 01:06:44,640
secure design principles

01:06:41,200 --> 01:06:47,520
again being open source or software

01:06:44,640 --> 01:06:48,880
there are many participations and

01:06:47,520 --> 01:06:51,200
contributions where

01:06:48,880 --> 01:06:52,960
different people try to follow different

01:06:51,200 --> 01:06:56,480
uh guidelines and

01:06:52,960 --> 01:06:59,760
different design principles so of

01:06:56,480 --> 01:07:00,160
making sure how it is achieved in open

01:06:59,760 --> 01:07:03,280
source

01:07:00,160 --> 01:07:06,400
or software is again a challenge then

01:07:03,280 --> 01:07:08,799
defense in depth measures

01:07:06,400 --> 01:07:09,839
when the product is deployed somewhere

01:07:08,799 --> 01:07:13,119
so what kind of

01:07:09,839 --> 01:07:16,000
measures are expected by original

01:07:13,119 --> 01:07:18,240
manufacture of the product and what is

01:07:16,000 --> 01:07:21,119
actually available in the deployment

01:07:18,240 --> 01:07:23,119
environment so that is something a bit

01:07:21,119 --> 01:07:25,680
challenging because cip

01:07:23,119 --> 01:07:26,319
is not a specific product it's a

01:07:25,680 --> 01:07:30,079
platform

01:07:26,319 --> 01:07:31,920
it targets many use cases

01:07:30,079 --> 01:07:35,119
the next is security implementation

01:07:31,920 --> 01:07:38,880
review like what all

01:07:35,119 --> 01:07:41,200
security fixes come from or around

01:07:38,880 --> 01:07:42,559
and what all security features are

01:07:41,200 --> 01:07:45,280
implemented so they

01:07:42,559 --> 01:07:45,920
should be reviewed thoroughly before

01:07:45,280 --> 01:07:49,920
including

01:07:45,920 --> 01:07:53,119
in the product a defining threat model

01:07:49,920 --> 01:07:54,319
so again cip being a platform or it's a

01:07:53,119 --> 01:07:57,520
challenge to define

01:07:54,319 --> 01:08:01,280
threat model and its boundaries

01:07:57,520 --> 01:08:02,799
because it tries to address many use

01:08:01,280 --> 01:08:05,920
cases

01:08:02,799 --> 01:08:09,119
but still how we are trying to

01:08:05,920 --> 01:08:11,119
define a generic threat model and as

01:08:09,119 --> 01:08:12,240
it was mentioned in the first part of

01:08:11,119 --> 01:08:14,720
this session

01:08:12,240 --> 01:08:16,239
we are currently discussing with the

01:08:14,720 --> 01:08:19,199
certification body

01:08:16,239 --> 01:08:19,600
and probably by end of this month we

01:08:19,199 --> 01:08:22,960
will

01:08:19,600 --> 01:08:26,480
start gap assessment and then one by one

01:08:22,960 --> 01:08:29,600
each of these challenges plus how we are

01:08:26,480 --> 01:08:30,799
targeting to meet these challenges will

01:08:29,600 --> 01:08:34,480
be discussed

01:08:30,799 --> 01:08:34,480
then we will come to know where is the

01:08:36,839 --> 01:08:39,839
gap

01:08:42,799 --> 01:08:46,400
okay so as of now basically based on the

01:08:45,440 --> 01:08:49,520
investigation

01:08:46,400 --> 01:08:50,000
and based on our understanding as well

01:08:49,520 --> 01:08:52,000
as

01:08:50,000 --> 01:08:54,319
based on the clarifications received

01:08:52,000 --> 01:08:56,960
with the certification body

01:08:54,319 --> 01:08:57,679
of this is the approach which we are

01:08:56,960 --> 01:09:01,040
thinking

01:08:57,679 --> 01:09:03,440
we will apply like for development

01:09:01,040 --> 01:09:04,239
environment security we will use

01:09:03,440 --> 01:09:06,560
existing

01:09:04,239 --> 01:09:08,080
open source infrastructure such as

01:09:06,560 --> 01:09:11,759
combination of

01:09:08,080 --> 01:09:14,799
private and public reports where

01:09:11,759 --> 01:09:18,080
there will be limited uh limited

01:09:14,799 --> 01:09:20,640
privileges to merge quote and

01:09:18,080 --> 01:09:23,359
every merge will be reviewed before

01:09:20,640 --> 01:09:26,400
including in the product

01:09:23,359 --> 01:09:29,520
so even though contribution is done from

01:09:26,400 --> 01:09:30,159
all over the world but the control will

01:09:29,520 --> 01:09:33,199
be through

01:09:30,159 --> 01:09:35,920
merge requests so it will not be like

01:09:33,199 --> 01:09:37,920
anyone can modify the code following

01:09:35,920 --> 01:09:41,040
secure design principles

01:09:37,920 --> 01:09:42,080
we plan to document how to protect open

01:09:41,040 --> 01:09:46,239
interfaces or

01:09:42,080 --> 01:09:48,000
stick access in a generic way but again

01:09:46,239 --> 01:09:49,440
once we discuss these things with

01:09:48,000 --> 01:09:51,839
certification body

01:09:49,440 --> 01:09:52,480
we will have more specific things in

01:09:51,839 --> 01:09:54,640
place

01:09:52,480 --> 01:09:57,280
which can be further reused by and

01:09:54,640 --> 01:10:00,719
product owners

01:09:57,280 --> 01:10:04,239
defense in depth measures so here

01:10:00,719 --> 01:10:07,120
ultimately the overall objective is to

01:10:04,239 --> 01:10:08,000
reduce attack surfaces in all possible

01:10:07,120 --> 01:10:11,120
ways

01:10:08,000 --> 01:10:13,360
so our objective would be to basically

01:10:11,120 --> 01:10:17,280
document our general measures

01:10:13,360 --> 01:10:19,360
because finally in the end product

01:10:17,280 --> 01:10:20,560
they have to be specific about these

01:10:19,360 --> 01:10:24,400
things

01:10:20,560 --> 01:10:26,480
so we will be like generic and security

01:10:24,400 --> 01:10:29,679
implementation review

01:10:26,480 --> 01:10:32,719
for this we have for dedicated

01:10:29,679 --> 01:10:34,400
reviewers like in cip kernel we have

01:10:32,719 --> 01:10:38,640
kernel maintainers

01:10:34,400 --> 01:10:41,360
who review fixes before taking in cip

01:10:38,640 --> 01:10:42,320
and same kind of process we are planning

01:10:41,360 --> 01:10:45,440
to apply

01:10:42,320 --> 01:10:50,000
in cip core where we will

01:10:45,440 --> 01:10:52,640
start including fixes uh first by living

01:10:50,000 --> 01:10:53,920
uh then defining threat model or this

01:10:52,640 --> 01:10:57,120
will be like

01:10:53,920 --> 01:10:59,600
generic and based on the discussion and

01:10:57,120 --> 01:11:00,560
inputs received from a certification

01:10:59,600 --> 01:11:03,280
body

01:11:00,560 --> 01:11:05,600
we will try to have for this in place

01:11:03,280 --> 01:11:05,600
also

01:11:11,360 --> 01:11:16,080
uh well so usually uh there is always a

01:11:14,640 --> 01:11:19,360
question like once

01:11:16,080 --> 01:11:21,840
any product is certified by ic

01:11:19,360 --> 01:11:23,199
then how it is maintained and what is

01:11:21,840 --> 01:11:26,080
its validity

01:11:23,199 --> 01:11:29,760
so this slide explains about it once the

01:11:26,080 --> 01:11:31,600
certification or assessment is completed

01:11:29,760 --> 01:11:34,800
during the certification certification

01:11:31,600 --> 01:11:37,600
body defines change control process

01:11:34,800 --> 01:11:38,719
which has to be followed for any kind of

01:11:37,600 --> 01:11:42,480
changes

01:11:38,719 --> 01:11:44,320
and once the changes are followed

01:11:42,480 --> 01:11:47,760
sorry a change control process is

01:11:44,320 --> 01:11:51,440
followed for all the modification

01:11:47,760 --> 01:11:54,080
and the changes are limited in nature

01:11:51,440 --> 01:11:55,520
uh then it can be maintained and

01:11:54,080 --> 01:11:58,560
according to

01:11:55,520 --> 01:12:00,960
process defined by ic after

01:11:58,560 --> 01:12:03,040
three years certification body audits

01:12:00,960 --> 01:12:05,440
all the past changes

01:12:03,040 --> 01:12:06,640
and if all the changes are found in

01:12:05,440 --> 01:12:09,360
accordance with the

01:12:06,640 --> 01:12:11,360
change control process certification is

01:12:09,360 --> 01:12:14,560
renewed or

01:12:11,360 --> 01:12:16,480
invalidated if it is found

01:12:14,560 --> 01:12:17,920
if it is meeting the change control

01:12:16,480 --> 01:12:20,239
process or not

01:12:17,920 --> 01:12:21,360
so this way or the certification can be

01:12:20,239 --> 01:12:23,840
maintained for

01:12:21,360 --> 01:12:23,840
long term

01:12:30,640 --> 01:12:37,679
okay so this slide basically explains

01:12:34,000 --> 01:12:39,840
recently we have included the

01:12:37,679 --> 01:12:41,120
debian security packages which were

01:12:39,840 --> 01:12:44,159
required to meet

01:12:41,120 --> 01:12:47,120
folders to our security requirements

01:12:44,159 --> 01:12:48,320
so we are testing those packages and

01:12:47,120 --> 01:12:52,159
this slide explains

01:12:48,320 --> 01:12:54,480
how can you take the cip source code and

01:12:52,159 --> 01:12:56,000
security branch where we have included

01:12:54,480 --> 01:12:58,800
the specifically

01:12:56,000 --> 01:13:00,159
debian packages which will meet security

01:12:58,800 --> 01:13:03,360
requirements

01:13:00,159 --> 01:13:06,080
and then it can be tested so

01:13:03,360 --> 01:13:07,840
currently how we are developing our test

01:13:06,080 --> 01:13:11,199
cases

01:13:07,840 --> 01:13:14,640
in the next slide uh here

01:13:11,199 --> 01:13:17,120
you see currently we are developing

01:13:14,640 --> 01:13:18,080
lava test definitions which will be used

01:13:17,120 --> 01:13:22,000
to automate

01:13:18,080 --> 01:13:24,800
the testing of security requirements

01:13:22,000 --> 01:13:26,480
as it was already explained in cip

01:13:24,800 --> 01:13:29,280
kernel session

01:13:26,480 --> 01:13:31,280
already there is automated testing is

01:13:29,280 --> 01:13:35,199
happening for cip kernel

01:13:31,280 --> 01:13:37,280
using lava framework and same thing so

01:13:35,199 --> 01:13:39,280
like in same infrastructure we are

01:13:37,280 --> 01:13:40,719
planning to integrate all these lower

01:13:39,280 --> 01:13:43,040
test definitions

01:13:40,719 --> 01:13:44,080
for security requirements once this

01:13:43,040 --> 01:13:48,239
development is

01:13:44,080 --> 01:13:50,320
completed so anyone who wants to verify

01:13:48,239 --> 01:13:51,840
the security requirements they can

01:13:50,320 --> 01:13:54,880
simply run these

01:13:51,840 --> 01:13:56,080
test cases and it can be seen through a

01:13:54,880 --> 01:13:59,600
web ui

01:13:56,080 --> 01:14:00,000
how is the security requirements so test

01:13:59,600 --> 01:14:03,040
cases

01:14:00,000 --> 01:14:05,440
are passing or failing so

01:14:03,040 --> 01:14:14,400
currently how these test definitions are

01:14:05,440 --> 01:14:17,120
under our development so

01:14:14,400 --> 01:14:18,400
you can see how as under development

01:14:17,120 --> 01:14:21,440
test cases so

01:14:18,400 --> 01:14:21,920
now it is this screen is showing the web

01:14:21,440 --> 01:14:25,280
ui

01:14:21,920 --> 01:14:28,320
of lava interface where

01:14:25,280 --> 01:14:30,800
when i submitted this slide

01:14:28,320 --> 01:14:32,159
we just started that time and there were

01:14:30,800 --> 01:14:35,120
just three test cases

01:14:32,159 --> 01:14:36,400
which passed we were verifying locally

01:14:35,120 --> 01:14:39,520
now we are slowly

01:14:36,400 --> 01:14:41,679
working to move this into cloud and this

01:14:39,520 --> 01:14:43,679
uh test results will be available as

01:14:41,679 --> 01:14:46,239
part of entire cip test

01:14:43,679 --> 01:14:46,239
origins

01:14:49,440 --> 01:14:53,120
well so one of the requirements of food

01:14:52,560 --> 01:14:57,040
s1

01:14:53,120 --> 01:15:00,800
is how the security issue fixes

01:14:57,040 --> 01:15:03,440
are tracked and how it is released

01:15:00,800 --> 01:15:05,520
so to meet those requirements basically

01:15:03,440 --> 01:15:09,120
as part of open source project

01:15:05,520 --> 01:15:13,760
the best way is to track cv is and

01:15:09,120 --> 01:15:17,760
uh basically include a certain level of

01:15:13,760 --> 01:15:21,440
vulnerability fixes in cip automatically

01:15:17,760 --> 01:15:24,640
so we are currently investigating

01:15:21,440 --> 01:15:25,679
uh various tools so that we can automate

01:15:24,640 --> 01:15:29,360
the process

01:15:25,679 --> 01:15:32,480
of process of including cv fixes

01:15:29,360 --> 01:15:36,080
automatically at build time so the

01:15:32,480 --> 01:15:39,440
tools we are exploring cv check tool cv

01:15:36,080 --> 01:15:41,600
checker and sw sw360r framework

01:15:39,440 --> 01:15:44,080
and once this is finalized or this will

01:15:41,600 --> 01:15:46,320
be integrated

01:15:44,080 --> 01:15:48,159
and in the build time itself

01:15:46,320 --> 01:15:52,480
automatically it will check the

01:15:48,159 --> 01:15:54,239
cv fixes and before that

01:15:52,480 --> 01:15:56,480
yeah this is uh these are the

01:15:54,239 --> 01:15:59,679
requirements from ford s1

01:15:56,480 --> 01:16:01,120
um where cvh will help us to uh achieve

01:15:59,679 --> 01:16:03,120
these requirements like

01:16:01,120 --> 01:16:04,880
before making product release how

01:16:03,120 --> 01:16:07,120
critical security fixes should be

01:16:04,880 --> 01:16:10,400
incorporated and made available to

01:16:07,120 --> 01:16:12,480
end user re receiving notifications for

01:16:10,400 --> 01:16:15,679
security related resource

01:16:12,480 --> 01:16:17,280
so as for our understanding or these

01:16:15,679 --> 01:16:20,480
requirements can be met by

01:16:17,280 --> 01:16:23,120
cv is because in open source projects we

01:16:20,480 --> 01:16:25,679
don't have anything uh proprietary

01:16:23,120 --> 01:16:26,320
and rest of the things so probably will

01:16:25,679 --> 01:16:29,199
go to

01:16:26,320 --> 01:16:30,640
end product owner or to meet these

01:16:29,199 --> 01:16:33,040
requirements

01:16:30,640 --> 01:16:34,320
so this is the generic way of achieving

01:16:33,040 --> 01:16:37,679
this requirement

01:16:34,320 --> 01:16:39,920
however as it was mentioned earlier

01:16:37,679 --> 01:16:41,440
we will discuss this with certification

01:16:39,920 --> 01:16:44,640
body and we will see

01:16:41,440 --> 01:16:49,840
whether this or this can be used to

01:16:44,640 --> 01:16:49,840
meet the requirement

01:16:52,080 --> 01:16:56,000
ah this slide probably you have already

01:16:54,159 --> 01:16:59,280
seen during the cip kernel

01:16:56,000 --> 01:17:01,840
presentation so in cip kernel already

01:16:59,280 --> 01:17:05,120
how there is a tool cip kernel sack

01:17:01,840 --> 01:17:08,239
which is already or tracking the cvs

01:17:05,120 --> 01:17:11,440
related to kernel but those

01:17:08,239 --> 01:17:14,960
are currently limited to only cip kernel

01:17:11,440 --> 01:17:18,320
and our target is to

01:17:14,960 --> 01:17:21,360
include the cv tracking tool even for

01:17:18,320 --> 01:17:25,040
user packages so as part of

01:17:21,360 --> 01:17:27,440
cip core we are investigating the

01:17:25,040 --> 01:17:28,800
other cv hard tracking tools which will

01:17:27,440 --> 01:17:31,280
be integrated

01:17:28,800 --> 01:17:32,640
and later we will see whether they all

01:17:31,280 --> 01:17:35,920
can be consolidated

01:17:32,640 --> 01:17:37,360
or we may continue to track cip kernel

01:17:35,920 --> 01:17:41,199
cvs separately

01:17:37,360 --> 01:17:44,640
and use the package series separately

01:17:41,199 --> 01:17:47,520
so this will be decided once we conclude

01:17:44,640 --> 01:17:47,520
our investigation

01:17:52,880 --> 01:17:59,760
okay so for this one being a mainly

01:17:56,239 --> 01:18:02,400
secure development of focused standard

01:17:59,760 --> 01:18:03,360
it expects several documents to be in

01:18:02,400 --> 01:18:07,120
place

01:18:03,360 --> 01:18:09,199
and even process should be documented

01:18:07,120 --> 01:18:11,679
a lot of documents such as design

01:18:09,199 --> 01:18:13,840
documents user manual

01:18:11,679 --> 01:18:15,760
security requirement document security

01:18:13,840 --> 01:18:18,960
capabilities document so those kind of

01:18:15,760 --> 01:18:22,480
documents should be in place

01:18:18,960 --> 01:18:26,480
so to achieve the requirement of

01:18:22,480 --> 01:18:30,320
this ford s1 we we have finalized

01:18:26,480 --> 01:18:33,679
to use gitlab in a restricted way

01:18:30,320 --> 01:18:36,560
where we will keep certain documents

01:18:33,679 --> 01:18:37,920
uh will have restricted access because

01:18:36,560 --> 01:18:40,239
they will have iec

01:18:37,920 --> 01:18:41,840
or standards information which cannot be

01:18:40,239 --> 01:18:44,560
made public

01:18:41,840 --> 01:18:46,400
and certain documents would be kept in

01:18:44,560 --> 01:18:49,440
public repositories which will be

01:18:46,400 --> 01:18:53,360
available for anyone

01:18:49,440 --> 01:18:56,719
so how we are going to

01:18:53,360 --> 01:18:58,719
do is basically maintain version of

01:18:56,719 --> 01:19:01,040
each document these are again the

01:18:58,719 --> 01:19:04,000
requirements for this certification

01:19:01,040 --> 01:19:05,280
and restricted access of some documents

01:19:04,000 --> 01:19:08,560
such as secure design

01:19:05,280 --> 01:19:11,840
ic information documents and

01:19:08,560 --> 01:19:14,800
version could be compared of different

01:19:11,840 --> 01:19:14,800
version documents

01:19:14,960 --> 01:19:19,360
so based on this we decided to use

01:19:17,679 --> 01:19:21,760
jitlab

01:19:19,360 --> 01:19:23,440
and have two repositories private and

01:19:21,760 --> 01:19:25,920
public repositories

01:19:23,440 --> 01:19:27,199
so there will be only few documents in

01:19:25,920 --> 01:19:29,280
private repositories

01:19:27,199 --> 01:19:32,719
and most of the documents will be part

01:19:29,280 --> 01:19:32,719
of a public repository

01:19:32,800 --> 01:19:39,360
it will be maintained in cip jitlab

01:19:36,080 --> 01:19:43,120
and this is already this plan is

01:19:39,360 --> 01:19:45,920
already approved in ciptsc meeting

01:19:43,120 --> 01:19:46,960
so we soon we are going to create these

01:19:45,920 --> 01:19:49,920
repositories

01:19:46,960 --> 01:19:52,239
and we will start putting the documents

01:19:49,920 --> 01:19:52,239
here

01:19:59,120 --> 01:20:04,239
okay so this is a comparison of if

01:20:02,239 --> 01:20:08,000
someone selects cip as

01:20:04,239 --> 01:20:10,480
a distribution and non-cip distributions

01:20:08,000 --> 01:20:11,520
so what all the advantages associated

01:20:10,480 --> 01:20:15,440
with cip

01:20:11,520 --> 01:20:18,159
and non-cip distributions so the

01:20:15,440 --> 01:20:19,520
biggest advantage we can see dedicated

01:20:18,159 --> 01:20:22,960
kernel maintenance

01:20:19,520 --> 01:20:24,480
for slts up to 10 years which is not

01:20:22,960 --> 01:20:27,760
available usually in

01:20:24,480 --> 01:20:30,480
other open source distributions which

01:20:27,760 --> 01:20:31,760
which is a big relief especially

01:20:30,480 --> 01:20:35,120
considering

01:20:31,760 --> 01:20:35,920
the effort required to maintain so many

01:20:35,120 --> 01:20:39,360
packages

01:20:35,920 --> 01:20:43,360
so many frequent releases

01:20:39,360 --> 01:20:47,120
and next one is isa 62443

01:20:43,360 --> 01:20:49,280
dash 4s 1 and two assist platform

01:20:47,120 --> 01:20:51,600
so this is also another unique

01:20:49,280 --> 01:20:54,719
initiative taken by cip

01:20:51,600 --> 01:20:58,239
members to uh to work for

01:20:54,719 --> 01:20:59,280
iec standards and get the platform

01:20:58,239 --> 01:21:02,880
assist

01:20:59,280 --> 01:21:05,360
so here as as we have

01:21:02,880 --> 01:21:07,280
explained for four days to we have

01:21:05,360 --> 01:21:10,159
already included

01:21:07,280 --> 01:21:11,760
certain debian packages and for ford s1

01:21:10,159 --> 01:21:14,080
we are working

01:21:11,760 --> 01:21:14,800
so we will have for secure development

01:21:14,080 --> 01:21:18,080
process

01:21:14,800 --> 01:21:20,960
and required artifacts in place

01:21:18,080 --> 01:21:21,360
so these things are not available in

01:21:20,960 --> 01:21:24,480
other

01:21:21,360 --> 01:21:25,040
open source distributions and the third

01:21:24,480 --> 01:21:28,239
one is

01:21:25,040 --> 01:21:29,600
close monitoring of cvs at user and

01:21:28,239 --> 01:21:32,960
kernel level

01:21:29,600 --> 01:21:34,880
so here you can see already in cip

01:21:32,960 --> 01:21:38,239
kernel it is in place

01:21:34,880 --> 01:21:39,679
and for cip core we are currently

01:21:38,239 --> 01:21:41,920
investigating

01:21:39,679 --> 01:21:43,600
so it's not like something not available

01:21:41,920 --> 01:21:47,920
in other distributions

01:21:43,600 --> 01:21:50,159
but here we have a dedicated support and

01:21:47,920 --> 01:21:53,120
the most important thing is the support

01:21:50,159 --> 01:21:55,840
last up to 10 years

01:21:53,120 --> 01:21:57,360
extended support from debian elts for

01:21:55,840 --> 01:22:01,120
specific packages

01:21:57,360 --> 01:22:03,600
so based on the cip members

01:22:01,120 --> 01:22:04,239
requests or the requirements from

01:22:03,600 --> 01:22:07,600
further

01:22:04,239 --> 01:22:10,639
end customers sometimes cip members

01:22:07,600 --> 01:22:13,199
agree to support additional

01:22:10,639 --> 01:22:14,159
debian packages and based on the

01:22:13,199 --> 01:22:17,199
agreement

01:22:14,159 --> 01:22:20,480
it is again requested to debian

01:22:17,199 --> 01:22:21,280
and cip basically does the funding for

01:22:20,480 --> 01:22:24,400
this

01:22:21,280 --> 01:22:27,600
and as end result this

01:22:24,400 --> 01:22:30,080
extended support is again for additional

01:22:27,600 --> 01:22:30,080
packages

01:22:31,120 --> 01:22:35,199
and regular automated testing on

01:22:33,760 --> 01:22:37,600
multiple resources

01:22:35,199 --> 01:22:38,639
with published test results on kernel ci

01:22:37,600 --> 01:22:41,840
as well

01:22:38,639 --> 01:22:43,280
so as it was highlighted during cip

01:22:41,840 --> 01:22:46,960
kernel session

01:22:43,280 --> 01:22:50,480
uh the cip kernel is currently regularly

01:22:46,960 --> 01:22:53,679
uh released and tested on lava

01:22:50,480 --> 01:22:56,239
flav framework and

01:22:53,679 --> 01:22:57,199
at multiple sources so currently it is

01:22:56,239 --> 01:22:58,960
being tested

01:22:57,199 --> 01:23:00,560
or there is a list of supported

01:22:58,960 --> 01:23:04,000
reference hardwares

01:23:00,560 --> 01:23:05,280
on cip or wiki page available and if you

01:23:04,000 --> 01:23:08,719
are interested

01:23:05,280 --> 01:23:10,400
or any whenever or any cip member

01:23:08,719 --> 01:23:11,760
wants to add additional reference

01:23:10,400 --> 01:23:14,960
hardware

01:23:11,760 --> 01:23:17,600
after certain process it is added and

01:23:14,960 --> 01:23:21,280
all the cip test cases are executed on

01:23:17,600 --> 01:23:23,920
the reference hardware

01:23:21,280 --> 01:23:25,120
and last but not least strong support

01:23:23,920 --> 01:23:27,760
from big players of

01:23:25,120 --> 01:23:28,159
embedded system industry so you have

01:23:27,760 --> 01:23:30,800
seen

01:23:28,159 --> 01:23:32,239
in previous sessions there are all big

01:23:30,800 --> 01:23:35,280
players

01:23:32,239 --> 01:23:38,080
who are supporting cip and

01:23:35,280 --> 01:23:38,480
we are having a good support in terms of

01:23:38,080 --> 01:23:41,600
for

01:23:38,480 --> 01:23:49,840
technical as well as all kind of

01:23:41,600 --> 01:23:49,840
supports from community as well

01:23:50,080 --> 01:23:56,880
so what is next from cip security

01:23:53,360 --> 01:23:56,880
perspective so

01:23:56,960 --> 01:24:03,760
uh next step basically we are about to

01:24:00,719 --> 01:24:07,040
finish contract signing with

01:24:03,760 --> 01:24:08,960
one of the certification body so we will

01:24:07,040 --> 01:24:12,159
start the gap assessment for

01:24:08,960 --> 01:24:15,520
compliance with iec 62443

01:24:12,159 --> 01:24:18,560
dash 4s1 and 4s2 so all

01:24:15,520 --> 01:24:21,679
the artifacts of cip including

01:24:18,560 --> 01:24:23,920
current repositories or documents

01:24:21,679 --> 01:24:25,040
and the process which is followed will

01:24:23,920 --> 01:24:28,320
be reviewed

01:24:25,040 --> 01:24:31,120
with a certification body and

01:24:28,320 --> 01:24:32,159
a certification body will prepare a

01:24:31,120 --> 01:24:34,719
report

01:24:32,159 --> 01:24:35,280
which will highlight the gaps to achieve

01:24:34,719 --> 01:24:37,199
the

01:24:35,280 --> 01:24:38,480
these requirements of these

01:24:37,199 --> 01:24:41,040
specifications

01:24:38,480 --> 01:24:41,679
and accordingly again we will work to

01:24:41,040 --> 01:24:44,800
meet

01:24:41,679 --> 01:24:48,000
those gaps and then we will go to

01:24:44,800 --> 01:24:48,000
our final certification

01:24:48,080 --> 01:24:53,040
uh for this again we will have work with

01:24:51,040 --> 01:24:56,080
certification body and initiate

01:24:53,040 --> 01:25:00,560
final cip assessment for conformity with

01:24:56,080 --> 01:25:00,560
iec afford one and four dash two

01:25:01,280 --> 01:25:05,120
once uh final assessment is completed a

01:25:04,400 --> 01:25:07,679
result

01:25:05,120 --> 01:25:09,440
will be published in terms of reports

01:25:07,679 --> 01:25:13,040
guidelines as well as

01:25:09,440 --> 01:25:16,960
additional packages required to meet

01:25:13,040 --> 01:25:20,080
4ds 2 and 4s1 requirements

01:25:16,960 --> 01:25:23,120
which can be used by our suppliers

01:25:20,080 --> 01:25:26,400
and they can basically using

01:25:23,120 --> 01:25:27,679
these artifacts the cost of end product

01:25:26,400 --> 01:25:31,600
certification can be

01:25:27,679 --> 01:25:33,679
reduced drastically because

01:25:31,600 --> 01:25:34,960
as per the discussion with certification

01:25:33,679 --> 01:25:36,960
body the

01:25:34,960 --> 01:25:38,000
certification requirements which are

01:25:36,960 --> 01:25:41,440
already met by

01:25:38,000 --> 01:25:43,679
cip and product don't need to

01:25:41,440 --> 01:25:45,520
again meet those requirements even they

01:25:43,679 --> 01:25:48,719
will not be assessed

01:25:45,520 --> 01:25:49,360
so there will be uh in cip we are trying

01:25:48,719 --> 01:25:52,239
to meet

01:25:49,360 --> 01:25:54,080
as many requirements as we can so there

01:25:52,239 --> 01:25:56,639
will be only fewer requirements

01:25:54,080 --> 01:25:57,440
which will be very much product specific

01:25:56,639 --> 01:26:00,000
and use case

01:25:57,440 --> 01:26:02,159
specific which has to be met by and

01:26:00,000 --> 01:26:04,960
supplier

01:26:02,159 --> 01:26:07,440
so once the assessment is completed all

01:26:04,960 --> 01:26:10,719
these artifacts will be available

01:26:07,440 --> 01:26:14,560
for anyone to utilize

01:26:10,719 --> 01:26:15,520
and take full advantage of rcip or

01:26:14,560 --> 01:26:23,840
security

01:26:15,520 --> 01:26:23,840
activities so

01:26:26,560 --> 01:26:31,760
so this is the list of references you

01:26:29,520 --> 01:26:34,400
can get further information

01:26:31,760 --> 01:26:36,560
this is the cip mailing list if you are

01:26:34,400 --> 01:26:37,920
interested you can join the cipdef

01:26:36,560 --> 01:26:40,320
mailing list where

01:26:37,920 --> 01:26:42,159
all sort of discussion happens and you

01:26:40,320 --> 01:26:45,840
can get all the information

01:26:42,159 --> 01:26:48,880
and please join the project to share the

01:26:45,840 --> 01:26:52,000
effort and there are you can see

01:26:48,880 --> 01:26:52,960
there the different urls to get further

01:26:52,000 --> 01:26:55,440
information

01:26:52,960 --> 01:26:56,639
related to security you can get complete

01:26:55,440 --> 01:26:58,719
information

01:26:56,639 --> 01:27:00,000
and we will be periodically updating

01:26:58,719 --> 01:27:02,560
this space

01:27:00,000 --> 01:27:04,560
to reflect the progress of assessment

01:27:02,560 --> 01:27:06,960
with the certification body

01:27:04,560 --> 01:27:09,040
so please keep frequently harvesting

01:27:06,960 --> 01:27:12,000
this space to get the

01:27:09,040 --> 01:27:12,000
latest updates

01:27:15,520 --> 01:27:19,040
so that's all from this session thank

01:27:18,400 --> 01:27:22,480
you for

01:27:19,040 --> 01:27:27,440
attending this session and

01:27:22,480 --> 01:27:27,440
next we'll take the questions

01:27:29,280 --> 01:27:36,480
yeah we have one question

01:27:33,360 --> 01:27:39,600
and uh i answered

01:27:36,480 --> 01:27:43,040
to that questions

01:27:39,600 --> 01:27:45,760
uh yeah the question is there is

01:27:43,040 --> 01:27:48,400
a resell project so if my company

01:27:45,760 --> 01:27:48,800
planned to use crp corner and also needs

01:27:48,400 --> 01:27:51,679
for

01:27:48,800 --> 01:27:53,760
safety procedures is there an existing

01:27:51,679 --> 01:27:54,239
example or a solid state process to

01:27:53,760 --> 01:27:57,120
debuff

01:27:54,239 --> 01:27:58,000
using crp while following elisa at the

01:27:57,120 --> 01:28:01,120
same time

01:27:58,000 --> 01:28:04,239
so yeah it's a great point

01:28:01,120 --> 01:28:07,360
and uh now uh currently we

01:28:04,239 --> 01:28:12,080
focus uh uh we

01:28:07,360 --> 01:28:12,080
refocus ic643 so uh

01:28:12,719 --> 01:28:16,880
yeah we don't focus safety specific uh

01:28:15,920 --> 01:28:21,520
use case

01:28:16,880 --> 01:28:25,040
uh currently uh but uh

01:28:21,520 --> 01:28:28,000
yeah i guess uh our sjp

01:28:25,040 --> 01:28:30,400
karma is used in the product for safety

01:28:28,000 --> 01:28:34,239
and related systems i guess so

01:28:30,400 --> 01:28:36,880
uh yeah we believe uh

01:28:34,239 --> 01:28:38,000
yeah there are not competitive

01:28:36,880 --> 01:28:43,840
relationships so

01:28:38,000 --> 01:28:43,840
uh we hope so

01:28:44,320 --> 01:28:54,480
uh i think that's

01:28:47,840 --> 01:28:54,480
all so yeah one minutes remaining so

01:28:56,880 --> 01:29:01,280
yeah we are we would like to pass to

01:28:59,840 --> 01:29:05,280
yoshi

01:29:01,280 --> 01:29:05,280
thank you for attending this session

01:29:05,520 --> 01:29:09,360
hi uh thank you very much for attending

01:29:07,840 --> 01:29:13,040
gibb and charlie to

01:29:09,360 --> 01:29:16,560
this time and thank you very much

01:29:13,040 --> 01:29:17,920
for all speakers so we today we focus to

01:29:16,560 --> 01:29:20,800
introduce our

01:29:17,920 --> 01:29:23,760
activities especially for college team

01:29:20,800 --> 01:29:26,800
and also 60 working teams so

01:29:23,760 --> 01:29:27,920
we mainly focus on critical topics for

01:29:26,800 --> 01:29:31,040
our life

01:29:27,920 --> 01:29:34,080
so if you have a interest

01:29:31,040 --> 01:29:37,360
for our activities uh please

01:29:34,080 --> 01:29:40,480
join uh marines or our

01:29:37,360 --> 01:29:43,360
chat so

01:29:40,480 --> 01:29:43,360
we are free to

01:29:43,520 --> 01:29:47,760
accept anyone to join so thank you very

01:29:46,480 --> 01:29:49,440
much for everyone

01:29:47,760 --> 01:29:50,960
thank you very much for all attendees

01:29:49,440 --> 01:29:54,639
for citing summit

01:29:50,960 --> 01:29:57,840
and i hope to see you next time

01:29:54,639 --> 01:30:01,920
so let's close our mini summit

01:29:57,840 --> 01:30:01,920
so bye bye everyone and thank you very

01:30:04,840 --> 01:30:09,199
much

01:30:07,120 --> 01:30:09,199

YouTube URL: https://www.youtube.com/watch?v=G4JfWS-d0jc


