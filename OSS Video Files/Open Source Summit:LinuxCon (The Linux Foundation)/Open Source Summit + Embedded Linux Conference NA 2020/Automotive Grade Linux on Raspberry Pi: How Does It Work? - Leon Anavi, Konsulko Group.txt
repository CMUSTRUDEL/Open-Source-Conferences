Title: Automotive Grade Linux on Raspberry Pi: How Does It Work? - Leon Anavi, Konsulko Group
Publication date: 2020-09-10
Playlist: Open Source Summit + Embedded Linux Conference NA 2020
Description: 
	Automotive Grade Linux on Raspberry Pi: How Does It Work? - Leon Anavi, Konsulko Group
Captions: 
	00:00:05,040 --> 00:00:06,960
hi

00:00:05,359 --> 00:00:09,760
and welcome to this session about

00:00:06,960 --> 00:00:11,759
automotive grade linux on raspberry pi

00:00:09,760 --> 00:00:14,160
my name is noel navee and i'm senior

00:00:11,759 --> 00:00:16,000
software engineer at consuego group

00:00:14,160 --> 00:00:17,760
and it's pleasure to be presented here

00:00:16,000 --> 00:00:20,560
at embedded linux conference

00:00:17,760 --> 00:00:22,400
before we start a huge thanks to the

00:00:20,560 --> 00:00:25,119
whole team at linux foundation

00:00:22,400 --> 00:00:26,640
for switching to a virtual event on such

00:00:25,119 --> 00:00:29,279
a short notice

00:00:26,640 --> 00:00:30,160
fingers crossed that the future ahead of

00:00:29,279 --> 00:00:33,520
us is better

00:00:30,160 --> 00:00:36,640
and soon will be able to gather together

00:00:33,520 --> 00:00:38,559
on physical events

00:00:36,640 --> 00:00:41,040
consucho group the company that i work

00:00:38,559 --> 00:00:42,879
for is a service company specialized

00:00:41,040 --> 00:00:44,719
in embedded linux and open source

00:00:42,879 --> 00:00:46,879
software my colleagues and i

00:00:44,719 --> 00:00:48,960
have experience in hardware and software

00:00:46,879 --> 00:00:49,840
build design development and training

00:00:48,960 --> 00:00:52,320
services

00:00:49,840 --> 00:00:53,680
we have upstream contributions to other

00:00:52,320 --> 00:00:56,480
various popular

00:00:53,680 --> 00:00:57,520
open source projects among which are the

00:00:56,480 --> 00:01:00,480
yokta project

00:00:57,520 --> 00:01:01,359
open embedded the linux kernel itself uh

00:01:00,480 --> 00:01:03,520
u-boot

00:01:01,359 --> 00:01:06,000
and of course automotive great linux the

00:01:03,520 --> 00:01:08,240
company is based in uh california

00:01:06,000 --> 00:01:09,280
however we have engineering presence

00:01:08,240 --> 00:01:11,920
worldwide

00:01:09,280 --> 00:01:13,920
and i am living in poverty bulgaria in

00:01:11,920 --> 00:01:16,479
europe

00:01:13,920 --> 00:01:17,680
the agenda for the talk today includes a

00:01:16,479 --> 00:01:20,720
brief introduction to

00:01:17,680 --> 00:01:21,600
automotive grade linux followed by a few

00:01:20,720 --> 00:01:24,560
words about

00:01:21,600 --> 00:01:25,600
raspberry pi and the history how aga was

00:01:24,560 --> 00:01:28,400
ported

00:01:25,600 --> 00:01:29,840
to hgl a process that i was involved

00:01:28,400 --> 00:01:31,840
from day one

00:01:29,840 --> 00:01:33,280
uh in this talk you'll learn how to

00:01:31,840 --> 00:01:35,600
build an image

00:01:33,280 --> 00:01:37,759
agl image for raspberry pi how to boot

00:01:35,600 --> 00:01:41,040
it on raspberry pi 3 or 4

00:01:37,759 --> 00:01:42,479
you understand how it works and finally

00:01:41,040 --> 00:01:46,159
we'll do some conclusions

00:01:42,479 --> 00:01:48,799
and there will be time for q a session

00:01:46,159 --> 00:01:50,320
so automotive grade linux is a project

00:01:48,799 --> 00:01:52,479
of the linux foundation

00:01:50,320 --> 00:01:54,079
it is an open source new linux

00:01:52,479 --> 00:01:56,799
automotive distribution with

00:01:54,079 --> 00:01:57,840
e-vehicle infotainment uh it's very

00:01:56,799 --> 00:02:00,640
important to know

00:01:57,840 --> 00:02:02,479
that automotive grade linux is based on

00:02:00,640 --> 00:02:04,079
another project of the linux foundation

00:02:02,479 --> 00:02:06,479
the yocto project

00:02:04,079 --> 00:02:08,560
and the open embedded build framework

00:02:06,479 --> 00:02:09,840
automotive great linux was founded

00:02:08,560 --> 00:02:12,879
several years ago

00:02:09,840 --> 00:02:14,560
and the first code delivery was in 2014.

00:02:12,879 --> 00:02:17,360
i personally started contributing to

00:02:14,560 --> 00:02:21,040
this project back in 2015

00:02:17,360 --> 00:02:23,200
which makes five years uh

00:02:21,040 --> 00:02:26,959
for me i'll be celebrating five years of

00:02:23,200 --> 00:02:30,000
contributions to agl this year

00:02:26,959 --> 00:02:31,840
agl has a lot of members

00:02:30,000 --> 00:02:34,239
these uh are companies from the

00:02:31,840 --> 00:02:36,560
automotive industry well-known

00:02:34,239 --> 00:02:37,840
names in the industry more and more

00:02:36,560 --> 00:02:41,280
companies are joining

00:02:37,840 --> 00:02:41,280
agl over the time

00:02:42,319 --> 00:02:48,480
and by the way ago is already available

00:02:45,760 --> 00:02:49,680
on vehicles on the road for example

00:02:48,480 --> 00:02:52,800
toyota camry

00:02:49,680 --> 00:02:55,599
is powered by agl this is

00:02:52,800 --> 00:02:56,480
a high level picture of the core

00:02:55,599 --> 00:02:59,440
components

00:02:56,480 --> 00:02:59,440
of agl

00:02:59,519 --> 00:03:05,680
so in general ago as a linux

00:03:02,800 --> 00:03:06,400
distribution is not so different from

00:03:05,680 --> 00:03:08,640
the

00:03:06,400 --> 00:03:10,480
linux distributions that we are running

00:03:08,640 --> 00:03:13,200
on our personal computers

00:03:10,480 --> 00:03:15,040
as desktops however there are certain

00:03:13,200 --> 00:03:15,360
components that are very specific for

00:03:15,040 --> 00:03:19,519
the

00:03:15,360 --> 00:03:20,480
automotive industry and that makes agl

00:03:19,519 --> 00:03:22,480
special

00:03:20,480 --> 00:03:23,519
so let's have a look at these core

00:03:22,480 --> 00:03:25,519
components of course

00:03:23,519 --> 00:03:27,200
this is a very small portion of the

00:03:25,519 --> 00:03:29,680
other components that the

00:03:27,200 --> 00:03:30,319
linux distribution has however i think

00:03:29,680 --> 00:03:34,159
these are

00:03:30,319 --> 00:03:34,159
some of the most important parts

00:03:34,400 --> 00:03:37,840
so ajo works on various different

00:03:37,040 --> 00:03:40,560
hardware

00:03:37,840 --> 00:03:40,959
platforms in the next slides i'll show

00:03:40,560 --> 00:03:44,480
you

00:03:40,959 --> 00:03:45,760
the list of boards on which you can run

00:03:44,480 --> 00:03:48,640
agl

00:03:45,760 --> 00:03:49,840
so for each board there is a specific

00:03:48,640 --> 00:03:53,439
boss port package

00:03:49,840 --> 00:03:55,760
which includes a linux kernel version if

00:03:53,439 --> 00:03:56,720
the board does not support running

00:03:55,760 --> 00:03:59,599
mainline

00:03:56,720 --> 00:04:01,599
linux kernel and the bootloader

00:03:59,599 --> 00:04:03,680
eventually some

00:04:01,599 --> 00:04:06,799
binary blobs for uh running the

00:04:03,680 --> 00:04:06,799
graphical user stack

00:04:07,280 --> 00:04:13,680
agl is powered with system d

00:04:10,400 --> 00:04:14,400
there is this new audio framework pipe

00:04:13,680 --> 00:04:18,160
wire

00:04:14,400 --> 00:04:18,479
uh agl started with awesome pool sound

00:04:18,160 --> 00:04:20,560
view

00:04:18,479 --> 00:04:21,759
after that there was another audio

00:04:20,560 --> 00:04:24,960
framework called

00:04:21,759 --> 00:04:27,680
4a audio and uh

00:04:24,960 --> 00:04:28,960
for the past about a year or a bit more

00:04:27,680 --> 00:04:32,000
than a year

00:04:28,960 --> 00:04:33,280
ngo is using pipewire this is a really

00:04:32,000 --> 00:04:36,000
exciting project

00:04:33,280 --> 00:04:37,919
covering some very specific audio use

00:04:36,000 --> 00:04:38,800
cases especially for the automotive

00:04:37,919 --> 00:04:42,160
industry

00:04:38,800 --> 00:04:45,280
with um uh

00:04:42,160 --> 00:04:46,720
with bluetooth connected devices there

00:04:45,280 --> 00:04:49,280
there are software over

00:04:46,720 --> 00:04:50,240
the air updates another components which

00:04:49,280 --> 00:04:53,840
is specific for

00:04:50,240 --> 00:04:55,600
embedded devices and um especially for

00:04:53,840 --> 00:05:00,880
the automotive industry

00:04:55,600 --> 00:05:03,440
agl relies on ois 3 or not also known

00:05:00,880 --> 00:05:04,560
in modern days as lip oystery and

00:05:03,440 --> 00:05:08,000
actualizer

00:05:04,560 --> 00:05:09,440
to perform git like software updates

00:05:08,000 --> 00:05:12,160
over the air

00:05:09,440 --> 00:05:13,360
this means that you're downloading only

00:05:12,160 --> 00:05:16,000
the binary

00:05:13,360 --> 00:05:17,680
delta which is smaller compared to doing

00:05:16,000 --> 00:05:19,039
ap updates

00:05:17,680 --> 00:05:21,520
and this is convenient because the

00:05:19,039 --> 00:05:24,960
vehicle might be in a region with

00:05:21,520 --> 00:05:28,320
uh not so good internet connectivity

00:05:24,960 --> 00:05:30,479
and it might be hard to download a huge

00:05:28,320 --> 00:05:31,440
uh image if you're doing ap updates in

00:05:30,479 --> 00:05:33,919
this uh

00:05:31,440 --> 00:05:35,039
in this particular case uh oystery and

00:05:33,919 --> 00:05:38,160
actualizer are

00:05:35,039 --> 00:05:40,800
providing a better solution

00:05:38,160 --> 00:05:43,120
another specific thing about agl is the

00:05:40,800 --> 00:05:46,479
graphical user stack which is based on

00:05:43,120 --> 00:05:48,960
weyland with western as a compositor and

00:05:46,479 --> 00:05:52,560
something new that is going on right now

00:05:48,960 --> 00:05:55,840
uh agr is switching from the ibi shell

00:05:52,560 --> 00:05:58,720
uh for western to agl uh shared

00:05:55,840 --> 00:05:59,199
desktop uh this is uh something that is

00:05:58,720 --> 00:06:01,039
uh

00:05:59,199 --> 00:06:02,479
in development i'm really excited about

00:06:01,039 --> 00:06:06,560
it uh you can

00:06:02,479 --> 00:06:08,960
check some of the newer images of agl

00:06:06,560 --> 00:06:10,080
and see how this is going on on the top

00:06:08,960 --> 00:06:12,800
of agl

00:06:10,080 --> 00:06:13,919
you find a human interface human to

00:06:12,800 --> 00:06:16,800
machine interface

00:06:13,919 --> 00:06:17,360
applications uh the default applications

00:06:16,800 --> 00:06:19,600
are uh

00:06:17,360 --> 00:06:22,240
written in qt and qml these are just

00:06:19,600 --> 00:06:24,160
demo applications of course

00:06:22,240 --> 00:06:25,360
companies manufacturing vehicles for the

00:06:24,160 --> 00:06:27,520
market are

00:06:25,360 --> 00:06:28,479
replacing these applications with

00:06:27,520 --> 00:06:31,280
specific

00:06:28,479 --> 00:06:32,160
application branded for for their

00:06:31,280 --> 00:06:35,280
vehicle

00:06:32,160 --> 00:06:38,400
alternatively you can also use html5

00:06:35,280 --> 00:06:43,199
or uh integrate a completely different

00:06:38,400 --> 00:06:46,639
platform for development of

00:06:43,199 --> 00:06:50,400
graphical user interfaces also

00:06:46,639 --> 00:06:52,000
we have a number of supported

00:06:50,400 --> 00:06:54,240
support technologies such as gist

00:06:52,000 --> 00:06:57,520
streamer for video streaming

00:06:54,240 --> 00:06:58,160
uh before we move on uh just to mention

00:06:57,520 --> 00:06:59,840
that

00:06:58,160 --> 00:07:01,840
another very specific thing about

00:06:59,840 --> 00:07:02,880
automotive grade linux is the security

00:07:01,840 --> 00:07:05,039
model

00:07:02,880 --> 00:07:06,639
smart has to be enabled in the linux

00:07:05,039 --> 00:07:09,120
kernel and

00:07:06,639 --> 00:07:10,720
agl uses the so called application

00:07:09,120 --> 00:07:15,360
framework

00:07:10,720 --> 00:07:17,520
although the name may sound as

00:07:15,360 --> 00:07:18,960
something else the application framework

00:07:17,520 --> 00:07:19,840
is actually part of the security

00:07:18,960 --> 00:07:22,560
mechanism

00:07:19,840 --> 00:07:23,520
within agora it provides permissions how

00:07:22,560 --> 00:07:26,160
different parts

00:07:23,520 --> 00:07:27,280
of the system can access it can be

00:07:26,160 --> 00:07:30,960
accessed by

00:07:27,280 --> 00:07:33,759
applications and software components

00:07:30,960 --> 00:07:35,280
uh as i said uh automotive grade linux

00:07:33,759 --> 00:07:37,919
is based on the yokota project

00:07:35,280 --> 00:07:38,880
and open embedded therefore you can see

00:07:37,919 --> 00:07:42,720
a lot of

00:07:38,880 --> 00:07:45,120
layers uh in agl

00:07:42,720 --> 00:07:46,800
uh aj is based on pokey poke is the

00:07:45,120 --> 00:07:48,000
reference distribution provided by the

00:07:46,800 --> 00:07:50,720
yokta project

00:07:48,000 --> 00:07:52,160
uh there are a number of um agio

00:07:50,720 --> 00:07:54,160
specific layers

00:07:52,160 --> 00:07:56,479
uh you see that they're starting with

00:07:54,160 --> 00:07:59,919
prefix meta aga

00:07:56,479 --> 00:08:01,199
also there are a lot of um boar support

00:07:59,919 --> 00:08:03,840
package layers

00:08:01,199 --> 00:08:04,479
um most importantly for this talk which

00:08:03,840 --> 00:08:07,120
is for

00:08:04,479 --> 00:08:08,560
uh which is focused on raspberry pi is

00:08:07,120 --> 00:08:10,960
metal raspberry pi

00:08:08,560 --> 00:08:12,400
uh this is the layer that provides

00:08:10,960 --> 00:08:15,840
support

00:08:12,400 --> 00:08:19,039
for all raspberry pi models and versions

00:08:15,840 --> 00:08:22,080
however in ago in the latest age of

00:08:19,039 --> 00:08:24,639
releases we support only raspberry pi 3

00:08:22,080 --> 00:08:24,639
and 4.

00:08:25,280 --> 00:08:28,639
other layers that uh worth mentioning of

00:08:28,080 --> 00:08:32,560
course

00:08:28,639 --> 00:08:35,599
are meta open embedded which provide

00:08:32,560 --> 00:08:39,120
a number of sub layers such as

00:08:35,599 --> 00:08:40,640
meta oe metapython and so on if you are

00:08:39,120 --> 00:08:42,479
building a distribution

00:08:40,640 --> 00:08:44,240
uh another distribution with the octa

00:08:42,479 --> 00:08:46,080
project and uh uh

00:08:44,240 --> 00:08:47,519
open embedded most probably you will end

00:08:46,080 --> 00:08:50,800
up using metal

00:08:47,519 --> 00:08:51,760
open but it too it's probably the most

00:08:50,800 --> 00:08:54,000
popular

00:08:51,760 --> 00:08:56,240
uh collection of recipes in the youtube

00:08:54,000 --> 00:08:58,000
and open embedded world

00:08:56,240 --> 00:08:59,440
metadata uh something that i've

00:08:58,000 --> 00:09:01,760
mentioned before uh

00:08:59,440 --> 00:09:03,120
the is it is required for the software

00:09:01,760 --> 00:09:06,320
over uh the air

00:09:03,120 --> 00:09:09,760
updates with libos3 and actualizer

00:09:06,320 --> 00:09:13,600
and metacube5 is required for

00:09:09,760 --> 00:09:18,959
compiling and running uh the default

00:09:13,600 --> 00:09:18,959
demo graphical user interface

00:09:20,160 --> 00:09:26,320
let's have a look at the releases of agl

00:09:23,200 --> 00:09:27,680
uh aj releases twice per year every six

00:09:26,320 --> 00:09:30,880
months so there is a new

00:09:27,680 --> 00:09:34,160
stable release of ago

00:09:30,880 --> 00:09:36,800
aj releases are named on on

00:09:34,160 --> 00:09:37,760
fishes so the latest stable release as

00:09:36,800 --> 00:09:40,880
of today

00:09:37,760 --> 00:09:44,160
is uh itchy ice fish

00:09:40,880 --> 00:09:46,880
however uh in just in a few days uh

00:09:44,160 --> 00:09:48,640
another uh release candidate and a

00:09:46,880 --> 00:09:50,480
stable release hopefully after that will

00:09:48,640 --> 00:09:53,519
be released this is going to be

00:09:50,480 --> 00:09:56,800
jumping jellyfish it's part of

00:09:53,519 --> 00:09:59,920
the development process right now

00:09:56,800 --> 00:10:01,040
uh here you can see a screenshot which

00:09:59,920 --> 00:10:04,720
is taken from the

00:10:01,040 --> 00:10:08,000
agr wiki with the agio schedule for

00:10:04,720 --> 00:10:10,959
uh this year and so far the project is

00:10:08,000 --> 00:10:11,920
going on schedule so in july we can

00:10:10,959 --> 00:10:16,399
expect

00:10:11,920 --> 00:10:16,399
the next release candidate

00:10:17,519 --> 00:10:23,920
ago runs on several uh

00:10:20,560 --> 00:10:26,000
hardware devices uh

00:10:23,920 --> 00:10:26,959
the tire one devices the devices that

00:10:26,000 --> 00:10:29,519
has um

00:10:26,959 --> 00:10:32,320
best support for agl our renaissance

00:10:29,519 --> 00:10:35,120
aircar starter kit generation 3 boards

00:10:32,320 --> 00:10:36,240
most of intel's 64-bit hardware

00:10:35,120 --> 00:10:38,880
platforms including

00:10:36,240 --> 00:10:40,800
minimum board max and turbo these are

00:10:38,880 --> 00:10:44,240
open source hardware

00:10:40,800 --> 00:10:47,600
development boards with intel cpu

00:10:44,240 --> 00:10:49,040
you can also run agl in emulator there

00:10:47,600 --> 00:10:52,560
are two options for this

00:10:49,040 --> 00:10:52,880
uh cuemo or virtualbox it's it's up to

00:10:52,560 --> 00:10:55,920
you

00:10:52,880 --> 00:10:57,680
to decide raspberry pi is part of the

00:10:55,920 --> 00:11:00,079
community supported boards

00:10:57,680 --> 00:11:02,640
uh both raspberry pi 3 and 4 are

00:11:00,079 --> 00:11:05,760
supported by the latest versions of

00:11:02,640 --> 00:11:07,279
agl uh there there are a bunch of other

00:11:05,760 --> 00:11:09,920
devices that are supported

00:11:07,279 --> 00:11:11,200
by ago including an older version of

00:11:09,920 --> 00:11:16,320
raspberry pi

00:11:11,200 --> 00:11:18,640
um raspberry pi 2 was supported by

00:11:16,320 --> 00:11:20,399
the the first actually was the first

00:11:18,640 --> 00:11:24,000
raspberry pi model supported by

00:11:20,399 --> 00:11:25,519
ago however due to the limited hardware

00:11:24,000 --> 00:11:29,040
capabilities

00:11:25,519 --> 00:11:31,040
of it in the later age your

00:11:29,040 --> 00:11:32,079
releases will stop supporting raspberry

00:11:31,040 --> 00:11:35,120
pi 2.

00:11:32,079 --> 00:11:37,120
visit this link in the wiki to learn

00:11:35,120 --> 00:11:37,839
more about the supported devices and the

00:11:37,120 --> 00:11:40,839
particular

00:11:37,839 --> 00:11:43,600
releases in agl in which they are

00:11:40,839 --> 00:11:45,760
supported a few words about raspberry pi

00:11:43,600 --> 00:11:47,920
i'm personally attached to raspberry pi

00:11:45,760 --> 00:11:50,240
i like this platform a lot

00:11:47,920 --> 00:11:52,079
raspberry pi are a series of small

00:11:50,240 --> 00:11:54,639
single board computers

00:11:52,079 --> 00:11:55,440
with the size of a credit card or even

00:11:54,639 --> 00:11:57,519
smaller

00:11:55,440 --> 00:11:58,639
considering raspberry pi zero which

00:11:57,519 --> 00:12:00,880
actually is

00:11:58,639 --> 00:12:01,920
out of the scope of this talk because uh

00:12:00,880 --> 00:12:05,279
agl doesn't run

00:12:01,920 --> 00:12:07,200
raspberry pi zero however uh still

00:12:05,279 --> 00:12:09,200
uh raspberry pi is a single board

00:12:07,200 --> 00:12:10,320
computers developed by the raspberry pi

00:12:09,200 --> 00:12:12,000
foundation

00:12:10,320 --> 00:12:13,519
which is based in cambridge in the

00:12:12,000 --> 00:12:16,160
united kingdom

00:12:13,519 --> 00:12:16,959
uh omoto is a raspberry pi feature a

00:12:16,160 --> 00:12:21,200
broadcom

00:12:16,959 --> 00:12:23,279
system on a chip and a an armed cpu

00:12:21,200 --> 00:12:25,839
raspberry pi has been designed primarily

00:12:23,279 --> 00:12:26,720
to promote teaching of basic computer

00:12:25,839 --> 00:12:28,959
science

00:12:26,720 --> 00:12:30,480
however over the time it became

00:12:28,959 --> 00:12:33,120
extremely popular

00:12:30,480 --> 00:12:34,639
platform in the maker community for

00:12:33,120 --> 00:12:35,760
hobby projects and a lot of

00:12:34,639 --> 00:12:39,120
demonstrations

00:12:35,760 --> 00:12:41,360
and actually in agl raspberry pi is uh

00:12:39,120 --> 00:12:43,360
commonly used for demonstrations uh

00:12:41,360 --> 00:12:44,399
raspberry pi nowadays is a commodity

00:12:43,360 --> 00:12:46,880
it's easy to buy

00:12:44,399 --> 00:12:47,680
it's all around the world uh pretty much

00:12:46,880 --> 00:12:50,959
everyone

00:12:47,680 --> 00:12:53,200
has a raspberry pi so it's easy to just

00:12:50,959 --> 00:12:55,279
grab it

00:12:53,200 --> 00:12:56,720
build an image flash it on a micro sd

00:12:55,279 --> 00:12:58,880
card and do it on

00:12:56,720 --> 00:13:00,320
raspberry pi and by the way the

00:12:58,880 --> 00:13:03,839
raspberry pi foundation

00:13:00,320 --> 00:13:04,880
is providing um a desktop distribution

00:13:03,839 --> 00:13:08,079
which i'm sure

00:13:04,880 --> 00:13:08,560
everyone here knows raspbian however

00:13:08,079 --> 00:13:11,040
it's a

00:13:08,560 --> 00:13:11,920
very different distribution compared to

00:13:11,040 --> 00:13:14,560
agl

00:13:11,920 --> 00:13:16,880
and in the next slides you see the major

00:13:14,560 --> 00:13:19,279
differences

00:13:16,880 --> 00:13:20,480
a few small milestones about raspberry

00:13:19,279 --> 00:13:23,120
pi important dates

00:13:20,480 --> 00:13:25,360
the raspberry pi foundation was

00:13:23,120 --> 00:13:28,120
established more than a decade ago

00:13:25,360 --> 00:13:30,399
the first raspberry pi was released in

00:13:28,120 --> 00:13:34,560
00:13:30,399 --> 00:13:36,839
raspberry pi then transformed

00:13:34,560 --> 00:13:38,399
with a lot of hardware differences in

00:13:36,839 --> 00:13:40,800
00:13:38,399 --> 00:13:42,160
they have extended the header from 26

00:13:40,800 --> 00:13:45,040
pins to 40 pins

00:13:42,160 --> 00:13:45,440
and introduced the new form factor which

00:13:45,040 --> 00:13:48,480
they

00:13:45,440 --> 00:13:50,560
keep for several versions now the first

00:13:48,480 --> 00:13:51,519
uh board with this form factor was

00:13:50,560 --> 00:13:54,639
raspberry pi

00:13:51,519 --> 00:13:57,600
b plus uh after that raspberry pi two

00:13:54,639 --> 00:13:58,959
three and four all they have the same

00:13:57,600 --> 00:14:01,600
form factor

00:13:58,959 --> 00:14:03,120
um important dates uh for these

00:14:01,600 --> 00:14:05,680
milestones

00:14:03,120 --> 00:14:06,639
related to hdl is the release at

00:14:05,680 --> 00:14:09,680
raspberry pi

00:14:06,639 --> 00:14:10,880
3 and 4 because us at the moment the

00:14:09,680 --> 00:14:14,079
master branch of

00:14:10,880 --> 00:14:17,760
ago supports these two

00:14:14,079 --> 00:14:21,440
hardware versions of raspberry pi

00:14:17,760 --> 00:14:22,000
uh so uh in terms of hgo the important

00:14:21,440 --> 00:14:25,519
dates

00:14:22,000 --> 00:14:27,519
started actually in 2015 when

00:14:25,519 --> 00:14:29,680
mauro china who at that time was working

00:14:27,519 --> 00:14:31,440
for samsung open source group boarded

00:14:29,680 --> 00:14:34,880
tizen based on yokota and open

00:14:31,440 --> 00:14:36,639
beta to raspberry pi 2. the difficult

00:14:34,880 --> 00:14:40,399
part there was to get

00:14:36,639 --> 00:14:44,720
weyland and weston properly working

00:14:40,399 --> 00:14:45,839
on a raspberry pi with armed devices uh

00:14:44,720 --> 00:14:48,480
getting uh with

00:14:45,839 --> 00:14:50,000
western properly working is always one

00:14:48,480 --> 00:14:54,399
of the huge challenges

00:14:50,000 --> 00:14:54,399
even uh today five years later

00:14:54,560 --> 00:14:59,839
as i mentioned the first code release of

00:14:57,440 --> 00:15:03,360
agl from 2014

00:14:59,839 --> 00:15:04,160
was based on tizen the ibi profile of

00:15:03,360 --> 00:15:08,160
tizen

00:15:04,160 --> 00:15:11,199
so um there are some

00:15:08,160 --> 00:15:14,959
similarities between tizen and agl of

00:15:11,199 --> 00:15:14,959
course over the time the two projects

00:15:15,839 --> 00:15:19,680
are moving on in different directions so

00:15:18,560 --> 00:15:22,800
nowadays there are

00:15:19,680 --> 00:15:26,240
quite a lot of differences as well but

00:15:22,800 --> 00:15:27,920
in 2015 what mower did was very useful

00:15:26,240 --> 00:15:30,720
because after that

00:15:27,920 --> 00:15:32,560
uh his work was adopted first by the

00:15:30,720 --> 00:15:35,600
geneva development platform

00:15:32,560 --> 00:15:38,079
and shortly after that i was the one who

00:15:35,600 --> 00:15:40,000
uh used the knowledge from geneva

00:15:38,079 --> 00:15:42,480
development platform and tizen

00:15:40,000 --> 00:15:43,680
which are both open source projects and

00:15:42,480 --> 00:15:47,040
ported

00:15:43,680 --> 00:15:50,079
agl to raspberry pi 2.

00:15:47,040 --> 00:15:51,040
over the time we also support raspberry

00:15:50,079 --> 00:15:56,160
pi 3

00:15:51,040 --> 00:15:59,440
which was the support in asia was

00:15:56,160 --> 00:16:01,040
added in 2016 with uh pretty much all uh

00:15:59,440 --> 00:16:04,320
the same time with the release of

00:16:01,040 --> 00:16:07,600
the new raspberry pi uh version and last

00:16:04,320 --> 00:16:10,399
year we added support for raspberry pi

00:16:07,600 --> 00:16:11,199
uh which was a quite an exciting process

00:16:10,399 --> 00:16:13,600
there were some

00:16:11,199 --> 00:16:15,040
challenges over it uh which we'll

00:16:13,600 --> 00:16:16,880
mention at the end of this

00:16:15,040 --> 00:16:19,199
presentation but today we have both

00:16:16,880 --> 00:16:22,320
raspberry pi 3 and 4

00:16:19,199 --> 00:16:25,360
working in the master of agl as well as

00:16:22,320 --> 00:16:27,120
in the latest table release however keep

00:16:25,360 --> 00:16:30,880
in mind that um

00:16:27,120 --> 00:16:33,920
a raspberry pi 3 is with less ram

00:16:30,880 --> 00:16:36,880
and that's kind of a problem for agl so

00:16:33,920 --> 00:16:37,920
i expect that in near future the support

00:16:36,880 --> 00:16:40,959
for raspberry pi

00:16:37,920 --> 00:16:43,440
3 will be dropped and ago will focus

00:16:40,959 --> 00:16:44,160
on supporting raspberry pi 4 and

00:16:43,440 --> 00:16:47,279
eventually

00:16:44,160 --> 00:16:48,480
a new new raspberry pi version of the

00:16:47,279 --> 00:16:52,000
raspberry foundation

00:16:48,480 --> 00:16:54,000
hopefully will release on the market

00:16:52,000 --> 00:16:56,959
let's have a look at how to build an

00:16:54,000 --> 00:16:59,279
image for a raspberry pi from scratch

00:16:56,959 --> 00:17:00,560
and before we go into the details which

00:16:59,279 --> 00:17:03,519
you already seen

00:17:00,560 --> 00:17:04,319
um in this slide i would like to

00:17:03,519 --> 00:17:07,280
highlight

00:17:04,319 --> 00:17:08,079
that it is also possible to directly

00:17:07,280 --> 00:17:10,959
download

00:17:08,079 --> 00:17:12,319
a pre-built agile image for raspberry pi

00:17:10,959 --> 00:17:14,880
3.4

00:17:12,319 --> 00:17:16,799
and to save all these steps for building

00:17:14,880 --> 00:17:18,240
an image from scratch however the point

00:17:16,799 --> 00:17:21,280
of this presentation

00:17:18,240 --> 00:17:24,240
is that this presentation is for

00:17:21,280 --> 00:17:25,039
beginners people that are interested in

00:17:24,240 --> 00:17:27,919
developing

00:17:25,039 --> 00:17:29,679
for agio using kgo for prototyping and

00:17:27,919 --> 00:17:32,480
in this case you should be able

00:17:29,679 --> 00:17:34,240
to customize agl which means that you

00:17:32,480 --> 00:17:35,919
need to build it to modify the source

00:17:34,240 --> 00:17:37,919
code to build it again to deploy it on

00:17:35,919 --> 00:17:41,200
the board and so on

00:17:37,919 --> 00:17:44,960
so agio is using the google repo tool

00:17:41,200 --> 00:17:48,799
to simplify the process for downloading

00:17:44,960 --> 00:17:50,799
all the metadata for building an image

00:17:48,799 --> 00:17:51,919
so uh first of all you need to prepare

00:17:50,799 --> 00:17:54,400
the repo tool

00:17:51,919 --> 00:17:55,679
this is a one-time operation after that

00:17:54,400 --> 00:17:56,640
you need to make an appropriate

00:17:55,679 --> 00:17:59,679
directory

00:17:56,640 --> 00:18:02,080
and to initialize a repo in it

00:17:59,679 --> 00:18:03,039
as you can see here i'm directly uh

00:18:02,080 --> 00:18:07,280
initializing

00:18:03,039 --> 00:18:07,919
a rifle um for the master branch of agl

00:18:07,280 --> 00:18:10,320
this is

00:18:07,919 --> 00:18:11,760
the latest and greatest however uh this

00:18:10,320 --> 00:18:12,799
means that this is not the stable

00:18:11,760 --> 00:18:16,080
version this is

00:18:12,799 --> 00:18:18,960
the version that is being in development

00:18:16,080 --> 00:18:20,720
uh if you want to use something that's

00:18:18,960 --> 00:18:22,880
stable and properly tested

00:18:20,720 --> 00:18:24,559
i highly recommend you instead of using

00:18:22,880 --> 00:18:27,600
the master branch

00:18:24,559 --> 00:18:29,520
to use the appropriate

00:18:27,600 --> 00:18:31,200
stable version as of the time when we

00:18:29,520 --> 00:18:34,160
are doing it

00:18:31,200 --> 00:18:35,280
represent command actually downloads the

00:18:34,160 --> 00:18:37,440
source code based

00:18:35,280 --> 00:18:39,039
on the repo that we have initialized on

00:18:37,440 --> 00:18:41,840
the previous command

00:18:39,039 --> 00:18:42,799
once we have downloaded the metadata

00:18:41,840 --> 00:18:45,760
then there is this

00:18:42,799 --> 00:18:47,679
agl script which initializes the build

00:18:45,760 --> 00:18:50,880
environment

00:18:47,679 --> 00:18:54,320
um so in this agio setup script

00:18:50,880 --> 00:18:56,000
it's a basket we need to set a machine

00:18:54,320 --> 00:18:57,520
in our case we're going to build it for

00:18:56,000 --> 00:19:00,559
raspberry pi

00:18:57,520 --> 00:19:04,320
and a list of agl

00:19:00,559 --> 00:19:07,760
features uh this is going to be a very

00:19:04,320 --> 00:19:10,880
basic image with not too many features

00:19:07,760 --> 00:19:13,039
i'm just um i'm just

00:19:10,880 --> 00:19:14,000
setting up a build environment with

00:19:13,039 --> 00:19:16,799
agile demo

00:19:14,000 --> 00:19:17,919
and agile application framework smart

00:19:16,799 --> 00:19:20,160
features

00:19:17,919 --> 00:19:21,919
however depending on the use case that

00:19:20,160 --> 00:19:23,440
you're going to use your raspberry pi

00:19:21,919 --> 00:19:26,960
and agl

00:19:23,440 --> 00:19:30,000
you should decide whether

00:19:26,960 --> 00:19:30,480
you need to enable more features and

00:19:30,000 --> 00:19:33,280
then

00:19:30,480 --> 00:19:35,039
you need to execute bitbake the big is

00:19:33,280 --> 00:19:36,960
coming uh from the york report it can

00:19:35,039 --> 00:19:38,880
open and better people with experience

00:19:36,960 --> 00:19:40,240
with the yorkshire project are already

00:19:38,880 --> 00:19:43,039
familiar with bitbay

00:19:40,240 --> 00:19:43,919
so the name of the most common targeted

00:19:43,039 --> 00:19:48,720
image

00:19:43,919 --> 00:19:52,080
in the agile world is agl democratic

00:19:48,720 --> 00:19:54,240
so the bills from scratch takes a

00:19:52,080 --> 00:19:55,840
significant amount of time because agr

00:19:54,240 --> 00:19:59,440
has a lot of components

00:19:55,840 --> 00:20:01,760
uh the time depends on

00:19:59,440 --> 00:20:03,679
your internet connection speed because

00:20:01,760 --> 00:20:04,559
uh in the previous step we just

00:20:03,679 --> 00:20:07,360
downloaded

00:20:04,559 --> 00:20:09,360
the source code of the metadata uh which

00:20:07,360 --> 00:20:12,720
bitbake uses to start building

00:20:09,360 --> 00:20:13,760
each package each recipe now we are

00:20:12,720 --> 00:20:17,039
going through

00:20:13,760 --> 00:20:20,799
the download task for each of these

00:20:17,039 --> 00:20:22,640
recipes and this will

00:20:20,799 --> 00:20:24,400
again take some time to download

00:20:22,640 --> 00:20:25,200
depending on your internet connection

00:20:24,400 --> 00:20:27,120
speed

00:20:25,200 --> 00:20:29,200
and after that it also depends on the

00:20:27,120 --> 00:20:32,799
hardware capabilities of your

00:20:29,200 --> 00:20:34,720
build machine something super important

00:20:32,799 --> 00:20:37,039
to note uh

00:20:34,720 --> 00:20:38,000
the whole procedure that you see here

00:20:37,039 --> 00:20:41,919
the idea

00:20:38,000 --> 00:20:45,600
is that you should execute this on

00:20:41,919 --> 00:20:48,640
on a machine with x86 64 cpu from

00:20:45,600 --> 00:20:49,840
intel or imd with a linux distribution

00:20:48,640 --> 00:20:53,120
that is compatible

00:20:49,840 --> 00:20:56,320
to the default uh release of agl

00:20:53,120 --> 00:20:58,159
for example i'm i'm an ubuntu user i'm

00:20:56,320 --> 00:21:00,000
running on bluetooth both for my laptop

00:20:58,159 --> 00:21:02,760
and my build machines

00:21:00,000 --> 00:21:05,200
so i have built this image on ubuntu

00:21:02,760 --> 00:21:07,360
18.4

00:21:05,200 --> 00:21:09,760
uh it's also possible to to build it on

00:21:07,360 --> 00:21:13,919
other new linux distributions

00:21:09,760 --> 00:21:16,880
um have um have a look a look at the

00:21:13,919 --> 00:21:18,240
appropriate um your mega manual for

00:21:16,880 --> 00:21:20,480
release downfall

00:21:18,240 --> 00:21:24,080
as of the moment or from your releases

00:21:20,480 --> 00:21:24,080
if you are watching this presentation

00:21:24,159 --> 00:21:28,840
later on to figure out which are the

00:21:27,280 --> 00:21:31,440
supported distributions

00:21:28,840 --> 00:21:33,440
if the distribution that you are running

00:21:31,440 --> 00:21:38,240
on your build machine is different

00:21:33,440 --> 00:21:41,919
please consider please consider

00:21:38,240 --> 00:21:41,919
building it in a container

00:21:42,480 --> 00:21:45,840
so the supported raspberry pi models

00:21:44,880 --> 00:21:49,039
which you can set

00:21:45,840 --> 00:21:51,039
in the agio um script

00:21:49,039 --> 00:21:53,039
that initializes the build environment

00:21:51,039 --> 00:21:55,919
and raspberry pi 3 and four

00:21:53,039 --> 00:21:57,600
uh this is a short list of the uh some

00:21:55,919 --> 00:21:58,320
of the ago features that you may

00:21:57,600 --> 00:22:00,559
consider

00:21:58,320 --> 00:22:01,760
for example the aegean netboot for

00:22:00,559 --> 00:22:04,400
network uh

00:22:01,760 --> 00:22:06,159
for boot over the network or hdr solar

00:22:04,400 --> 00:22:07,120
which enables the software over the year

00:22:06,159 --> 00:22:09,280
upgrades

00:22:07,120 --> 00:22:11,760
uh run source meta again slash script

00:22:09,280 --> 00:22:14,320
slash agr setup.sh

00:22:11,760 --> 00:22:17,280
help to show the the list of all

00:22:14,320 --> 00:22:19,360
features supported

00:22:17,280 --> 00:22:20,640
uh once the image is ready it will end

00:22:19,360 --> 00:22:23,120
up in the temporary

00:22:20,640 --> 00:22:24,080
deploy directory for the image that

00:22:23,120 --> 00:22:26,559
you've selected

00:22:24,080 --> 00:22:27,520
for raspberry pi 4 we are building a

00:22:26,559 --> 00:22:30,640
64-bit

00:22:27,520 --> 00:22:33,600
image of agl uh the

00:22:30,640 --> 00:22:34,640
output file is weak and you need to

00:22:33,600 --> 00:22:37,360
extract it

00:22:34,640 --> 00:22:39,440
and flush it on the microsd card the

00:22:37,360 --> 00:22:41,520
easiest way to do it is using dd

00:22:39,440 --> 00:22:43,440
however just be careful to find the

00:22:41,520 --> 00:22:46,640
appropriate sd card device

00:22:43,440 --> 00:22:50,240
otherwise you risk to wipe out

00:22:46,640 --> 00:22:51,760
your your drive um for beginners it's

00:22:50,240 --> 00:22:54,960
also possible

00:22:51,760 --> 00:22:56,880
instead of using a dd to use a software

00:22:54,960 --> 00:22:58,080
with graphical user interface such as

00:22:56,880 --> 00:23:00,720
ballet etcher

00:22:58,080 --> 00:23:03,039
or the recently released by raspberry pi

00:23:00,720 --> 00:23:04,480
foundation raspberry pi imager

00:23:03,039 --> 00:23:07,440
once you're ready with the flashing

00:23:04,480 --> 00:23:08,000
procedure flip the microsd card in the

00:23:07,440 --> 00:23:10,080
raspberry

00:23:08,000 --> 00:23:12,480
pi and turn it on to turn on the

00:23:10,080 --> 00:23:13,600
raspberry pi all you need is to plug an

00:23:12,480 --> 00:23:16,880
appropriate

00:23:13,600 --> 00:23:18,080
um usb cable for raspberry pi 4 this has

00:23:16,880 --> 00:23:21,679
to be a usbc

00:23:18,080 --> 00:23:24,320
cable the first booth of a geotext takes

00:23:21,679 --> 00:23:27,200
a little bit

00:23:24,320 --> 00:23:29,360
more time because it's doing some

00:23:27,200 --> 00:23:31,679
one-off

00:23:29,360 --> 00:23:33,440
preparations each next boot is

00:23:31,679 --> 00:23:35,840
significantly faster

00:23:33,440 --> 00:23:37,679
these are the common ago images we would

00:23:35,840 --> 00:23:38,400
build agile demo platform but there are

00:23:37,679 --> 00:23:42,000
also

00:23:38,400 --> 00:23:44,159
other images such as uh agile image idi

00:23:42,000 --> 00:23:47,360
which is a very base image for ibi

00:23:44,159 --> 00:23:48,080
targets or agio image minimal which is a

00:23:47,360 --> 00:23:50,159
minimal

00:23:48,080 --> 00:23:51,360
file system with aps without graphical

00:23:50,159 --> 00:23:53,840
interface

00:23:51,360 --> 00:23:55,919
there is also an agile image that just

00:23:53,840 --> 00:23:58,320
includes a wayland and western

00:23:55,919 --> 00:23:59,440
um explore these images if you need to

00:23:58,320 --> 00:24:01,200
customize them

00:23:59,440 --> 00:24:02,559
however the most common target

00:24:01,200 --> 00:24:05,840
especially if you are a beginner

00:24:02,559 --> 00:24:05,840
is agile than the platform

00:24:06,720 --> 00:24:10,720
this is an um output from the serial

00:24:09,120 --> 00:24:12,960
console so basically you can connect

00:24:10,720 --> 00:24:16,720
your computer to the raspberry pi using

00:24:12,960 --> 00:24:19,360
uh the uart pins on the uh on the 40 pin

00:24:16,720 --> 00:24:22,240
header of the raspberry pi

00:24:19,360 --> 00:24:24,240
and using a usb to uart cable you can

00:24:22,240 --> 00:24:25,279
monitor the serial output as the

00:24:24,240 --> 00:24:28,799
raspberry pi

00:24:25,279 --> 00:24:32,159
boots uh this is um

00:24:28,799 --> 00:24:33,679
i've copied the sample how our model

00:24:32,159 --> 00:24:36,960
grade linux has

00:24:33,679 --> 00:24:39,760
been booted on my raspberry pi 4. uh the

00:24:36,960 --> 00:24:42,320
the default organ is root and this is

00:24:39,760 --> 00:24:44,320
the linux kernel version that um

00:24:42,320 --> 00:24:45,520
that i have printed it out the serial

00:24:44,320 --> 00:24:46,880
balls rate if you're doing something

00:24:45,520 --> 00:24:51,760
like this

00:24:46,880 --> 00:24:54,799
as 115 200.

00:24:51,760 --> 00:24:58,159
a few screenshots of uh raspberry pi on

00:24:54,799 --> 00:25:00,880
ago of ago and raspberry pi

00:24:58,159 --> 00:25:01,840
4 these are three screenshots the first

00:25:00,880 --> 00:25:05,440
screenshot

00:25:01,840 --> 00:25:07,039
is the the home screen with all the

00:25:05,440 --> 00:25:08,799
installed applications

00:25:07,039 --> 00:25:10,400
as i told you the first boot takes a

00:25:08,799 --> 00:25:13,039
little bit more time because

00:25:10,400 --> 00:25:14,480
all these applications are automatically

00:25:13,039 --> 00:25:17,279
installed in first boot

00:25:14,480 --> 00:25:18,400
each next boot is significantly faster

00:25:17,279 --> 00:25:20,480
um

00:25:18,400 --> 00:25:21,600
these are of course just demo demo

00:25:20,480 --> 00:25:24,400
applications

00:25:21,600 --> 00:25:26,480
uh just to to prove that the platform

00:25:24,400 --> 00:25:28,960
works and to allow you to make more

00:25:26,480 --> 00:25:29,679
uh complex demonstrations the second

00:25:28,960 --> 00:25:32,480
screenshot

00:25:29,679 --> 00:25:33,200
is from the hvac application and the

00:25:32,480 --> 00:25:34,559
third one

00:25:33,200 --> 00:25:36,240
is from the settings and more

00:25:34,559 --> 00:25:40,400
specifically from the about

00:25:36,240 --> 00:25:44,240
setting about section of the settings

00:25:40,400 --> 00:25:46,159
here is a system d log of western

00:25:44,240 --> 00:25:48,159
uh as i told you uh this is something

00:25:46,159 --> 00:25:51,520
very specific for agl

00:25:48,159 --> 00:25:54,840
uh agree lies instead of x11 or wayland

00:25:51,520 --> 00:25:58,320
and weston is a reference compositor

00:25:54,840 --> 00:26:00,480
for uh wayland uh wayland is actually

00:25:58,320 --> 00:26:02,559
over over the time has been adopted not

00:26:00,480 --> 00:26:05,360
only by the automotive industry but

00:26:02,559 --> 00:26:06,720
also uh you can find it in modern smart

00:26:05,360 --> 00:26:09,760
tvs manufactured by

00:26:06,720 --> 00:26:12,799
lg and samsung respectively with web and

00:26:09,760 --> 00:26:16,159
tyson as as well as even in

00:26:12,799 --> 00:26:18,480
smart watches with tyson

00:26:16,159 --> 00:26:20,559
um supported raspberry pi peripherals in

00:26:18,480 --> 00:26:24,320
ago these are peripherals that we

00:26:20,559 --> 00:26:27,840
try to um we try to

00:26:24,320 --> 00:26:29,440
test hdmi monitors of course this is the

00:26:27,840 --> 00:26:32,080
most common setup to plug an

00:26:29,440 --> 00:26:33,120
hdmi cable in your raspberry pi for

00:26:32,080 --> 00:26:37,039
raspberry pi 4

00:26:33,120 --> 00:26:39,200
it's going to be the uh the first hdmi

00:26:37,039 --> 00:26:40,080
connect connector uh of course the

00:26:39,200 --> 00:26:42,640
raspberry pi

00:26:40,080 --> 00:26:43,360
official seven inch touch screen display

00:26:42,640 --> 00:26:44,799
which is

00:26:43,360 --> 00:26:47,440
which has a separate connector on the

00:26:44,799 --> 00:26:50,480
raspberry pi board is also supported

00:26:47,440 --> 00:26:53,440
um starting with raspberry pi 3

00:26:50,480 --> 00:26:55,520
the platform uh has a built-in wi-fi and

00:26:53,440 --> 00:26:58,240
bluetooth capabilities

00:26:55,520 --> 00:27:00,799
uh they are supported and they work

00:26:58,240 --> 00:27:02,240
however they are not super reliable in

00:27:00,799 --> 00:27:04,880
agile jira you can see

00:27:02,240 --> 00:27:07,120
some people complaining about the real

00:27:04,880 --> 00:27:08,880
real abilities of the wi-fi so

00:27:07,120 --> 00:27:10,640
if you are experiencing something like

00:27:08,880 --> 00:27:13,840
this with the wi-fi

00:27:10,640 --> 00:27:17,039
and it's highly recommended uh to use

00:27:13,840 --> 00:27:19,279
a usb dongle as an external hardware and

00:27:17,039 --> 00:27:21,360
plug it into a raspberry pi for more

00:27:19,279 --> 00:27:23,520
stable wi-fi connection

00:27:21,360 --> 00:27:24,399
uh also you can attach virus third-party

00:27:23,520 --> 00:27:27,440
out on boards

00:27:24,399 --> 00:27:30,159
and heads heads is

00:27:27,440 --> 00:27:31,600
a hardware standard introduced by the

00:27:30,159 --> 00:27:34,480
raspberry pi foundation

00:27:31,600 --> 00:27:36,240
it means hardware attached on top and

00:27:34,480 --> 00:27:37,360
these are devices that you plug on the

00:27:36,240 --> 00:27:40,640
40 pin header

00:27:37,360 --> 00:27:42,799
of the raspberry pi and uh has an ee

00:27:40,640 --> 00:27:46,720
problem with device 3 binary overlay

00:27:42,799 --> 00:27:48,320
connected to piece 27 and 28 of the

00:27:46,720 --> 00:27:52,320
raspberry pi header

00:27:48,320 --> 00:27:54,480
where is the secondary i squared c

00:27:52,320 --> 00:27:56,559
okay so we've built an image the image

00:27:54,480 --> 00:27:58,159
boots we've seen all this but how does

00:27:56,559 --> 00:28:01,520
this really work

00:27:58,159 --> 00:28:04,960
so first of all uh the core component

00:28:01,520 --> 00:28:07,600
for building um agl

00:28:04,960 --> 00:28:08,080
is the octa product uh the yoko project

00:28:07,600 --> 00:28:10,000
is an

00:28:08,080 --> 00:28:12,159
open source collaborative project of the

00:28:10,000 --> 00:28:13,120
linux foundation for creating custom

00:28:12,159 --> 00:28:16,000
linux based

00:28:13,120 --> 00:28:18,640
systems for embedded devices using the

00:28:16,000 --> 00:28:20,880
open embedded build system

00:28:18,640 --> 00:28:21,679
uh open embedded boot system provides

00:28:20,880 --> 00:28:23,360
bit bait

00:28:21,679 --> 00:28:25,760
which you have already seen in the

00:28:23,360 --> 00:28:28,799
previous slides how to use to

00:28:25,760 --> 00:28:30,240
to kick off a build of an image and open

00:28:28,799 --> 00:28:32,159
embedded core

00:28:30,240 --> 00:28:34,000
pokey is the name of the reference

00:28:32,159 --> 00:28:34,960
distribution provided by the octo

00:28:34,000 --> 00:28:38,080
project it is

00:28:34,960 --> 00:28:38,720
used by automotive grade linux uh in one

00:28:38,080 --> 00:28:40,720
of the

00:28:38,720 --> 00:28:44,000
previous slides you saw it among the

00:28:40,720 --> 00:28:47,679
list of the octo open embedded layers

00:28:44,000 --> 00:28:48,559
so pocky provides is provided as

00:28:47,679 --> 00:28:51,039
metadata

00:28:48,559 --> 00:28:52,960
there are no binary files there the idea

00:28:51,039 --> 00:28:54,720
is to bootstrap your own distribution

00:28:52,960 --> 00:28:57,760
for embedded devices

00:28:54,720 --> 00:28:58,320
and to save you some time because pokey

00:28:57,760 --> 00:29:00,799
is

00:28:58,320 --> 00:29:01,760
on its own it's a very minimal linux

00:29:00,799 --> 00:29:04,720
distribution that

00:29:01,760 --> 00:29:06,159
you can boot the octa project has the

00:29:04,720 --> 00:29:08,480
annual release cycle

00:29:06,159 --> 00:29:11,600
twice per year there is a new release of

00:29:08,480 --> 00:29:15,279
the iot project uh this uh

00:29:11,600 --> 00:29:18,960
happens in the spring and in the autumn

00:29:15,279 --> 00:29:21,600
so here is um here is uh the current uh

00:29:18,960 --> 00:29:22,320
uh releases of the yokota project as of

00:29:21,600 --> 00:29:25,760
the moment

00:29:22,320 --> 00:29:26,159
uh since april uh the stable uh release

00:29:25,760 --> 00:29:28,159
of

00:29:26,159 --> 00:29:31,760
the auto project is called dunfo this is

00:29:28,159 --> 00:29:34,240
version 3.1 this is a long term stable

00:29:31,760 --> 00:29:37,120
the names of the previous releases were

00:29:34,240 --> 00:29:39,200
zeros warrior third sumo rocco and so on

00:29:37,120 --> 00:29:40,159
the next release is hopefully scheduled

00:29:39,200 --> 00:29:43,440
for october

00:29:40,159 --> 00:29:46,559
this year agm master

00:29:43,440 --> 00:29:49,760
as at the moment is based on dunfeld

00:29:46,559 --> 00:29:51,520
here is a code snippet taken from the

00:29:49,760 --> 00:29:54,960
default xml this is the

00:29:51,520 --> 00:29:57,120
repo manifest that we

00:29:54,960 --> 00:29:58,880
we are actually using for for the build

00:29:57,120 --> 00:30:00,080
that we did on the previous steps

00:29:58,880 --> 00:30:02,799
because when we did this

00:30:00,080 --> 00:30:03,600
repo init command what it actually did

00:30:02,799 --> 00:30:06,559
was to

00:30:03,600 --> 00:30:07,120
download this default xml manifest and

00:30:06,559 --> 00:30:10,240
using

00:30:07,120 --> 00:30:11,440
it to do the wrapper sync so here you

00:30:10,240 --> 00:30:13,679
see

00:30:11,440 --> 00:30:14,960
uh the exact revisions from the build

00:30:13,679 --> 00:30:17,039
that we did

00:30:14,960 --> 00:30:18,960
or at least i did at the time when i

00:30:17,039 --> 00:30:20,720
when i did it and the upstream

00:30:18,960 --> 00:30:22,720
is referencing to the latest stable

00:30:20,720 --> 00:30:24,799
release of the yokta product called

00:30:22,720 --> 00:30:27,760
dunfeld

00:30:24,799 --> 00:30:30,080
agile also provides virus other releases

00:30:27,760 --> 00:30:30,880
so if you want to use a stable release

00:30:30,080 --> 00:30:33,919
for

00:30:30,880 --> 00:30:34,960
agl instead of master you can explore

00:30:33,919 --> 00:30:37,679
the agile

00:30:34,960 --> 00:30:39,520
agr repo and figure out the exact

00:30:37,679 --> 00:30:41,120
release that you need for the bulb that

00:30:39,520 --> 00:30:41,760
you're touching this very specific

00:30:41,120 --> 00:30:46,399
depending

00:30:41,760 --> 00:30:47,120
on um on the project you were working on

00:30:46,399 --> 00:30:48,799
if you

00:30:47,120 --> 00:30:50,880
if you don't know how to start what i

00:30:48,799 --> 00:30:53,840
would recommend you is just to take the

00:30:50,880 --> 00:30:56,000
latest table release

00:30:53,840 --> 00:30:57,600
a few words about matter raspberry pi

00:30:56,000 --> 00:30:59,360
we've already mentioned it

00:30:57,600 --> 00:31:00,960
on a couple of occasions this is a

00:30:59,360 --> 00:31:02,480
general yoked open embedded board

00:31:00,960 --> 00:31:05,279
support package layer

00:31:02,480 --> 00:31:05,919
for all models and versions of raspberry

00:31:05,279 --> 00:31:09,840
pi

00:31:05,919 --> 00:31:12,000
it depends on layers from

00:31:09,840 --> 00:31:13,200
metal open embedded these are meta oe

00:31:12,000 --> 00:31:16,399
meta multimedia

00:31:13,200 --> 00:31:19,200
metal networking metapython it provides

00:31:16,399 --> 00:31:19,840
specific variables as knobs to enable

00:31:19,200 --> 00:31:22,880
disable

00:31:19,840 --> 00:31:24,000
hardware specific features uh in agile

00:31:22,880 --> 00:31:27,360
we have

00:31:24,000 --> 00:31:29,519
the uart enabled as well as u-boot

00:31:27,360 --> 00:31:30,640
uh another very important thing is the

00:31:29,519 --> 00:31:34,080
variable

00:31:30,640 --> 00:31:37,519
that sets the type of

00:31:34,080 --> 00:31:40,720
kms that should be used in um

00:31:37,519 --> 00:31:41,200
in ago to support wayland and weston and

00:31:40,720 --> 00:31:43,120
the

00:31:41,200 --> 00:31:44,640
uh up the demo applications that you've

00:31:43,120 --> 00:31:46,720
seen on screenshots

00:31:44,640 --> 00:31:48,880
on both the hdmi monitor and the

00:31:46,720 --> 00:31:49,919
official raspberry pi 7 inch touchscreen

00:31:48,880 --> 00:31:53,440
display

00:31:49,919 --> 00:31:55,919
uh last autumn in october and november

00:31:53,440 --> 00:31:57,039
um we had some difficulties to figure

00:31:55,919 --> 00:31:59,200
out why the

00:31:57,039 --> 00:32:00,159
um the official raspberry pi 7-inch

00:31:59,200 --> 00:32:04,159
touchscreen display

00:32:00,159 --> 00:32:06,720
isn't properly working in agl uh on

00:32:04,159 --> 00:32:07,600
on certain uh raspberry pi models and it

00:32:06,720 --> 00:32:10,399
appears

00:32:07,600 --> 00:32:11,120
uh that at that time uh we were we were

00:32:10,399 --> 00:32:14,559
using

00:32:11,120 --> 00:32:17,519
uh kms instead of firmware canvas so

00:32:14,559 --> 00:32:18,240
the solution was to switch this variable

00:32:17,519 --> 00:32:19,840
to

00:32:18,240 --> 00:32:21,360
the value that you see here which

00:32:19,840 --> 00:32:24,480
basically means using

00:32:21,360 --> 00:32:24,480
the firmware canvas

00:32:24,960 --> 00:32:28,480
if you find a book book and want to

00:32:27,600 --> 00:32:30,640
report it

00:32:28,480 --> 00:32:32,559
if you want to fix it or add a new

00:32:30,640 --> 00:32:34,640
feature to my raspberry pi

00:32:32,559 --> 00:32:36,480
uh do it as a github pull request this

00:32:34,640 --> 00:32:37,039
is the link in github where you can find

00:32:36,480 --> 00:32:39,440
it

00:32:37,039 --> 00:32:41,760
the maintainer of metal raspberry pi is

00:32:39,440 --> 00:32:43,840
andre gerson

00:32:41,760 --> 00:32:45,440
are more than 90 contributors a very

00:32:43,840 --> 00:32:47,440
active community

00:32:45,440 --> 00:32:48,960
raspberry pi after all is super popular

00:32:47,440 --> 00:32:49,279
so there are a lot of people interested

00:32:48,960 --> 00:32:51,200
in

00:32:49,279 --> 00:32:52,960
looking after the this board support

00:32:51,200 --> 00:32:55,840
package and i have to say that

00:32:52,960 --> 00:32:56,399
andre is doing a great job and this is

00:32:55,840 --> 00:32:58,240
one of

00:32:56,399 --> 00:32:59,760
actually this is my favorite more

00:32:58,240 --> 00:33:02,399
support package

00:32:59,760 --> 00:33:04,480
layer for your project and open embedded

00:33:02,399 --> 00:33:08,840
there is also a great documentation

00:33:04,480 --> 00:33:10,240
it's available the link here at read the

00:33:08,840 --> 00:33:14,240
docs

00:33:10,240 --> 00:33:16,320
raspberry pi uh in ago is done

00:33:14,240 --> 00:33:19,120
uh in the following way so when you run

00:33:16,320 --> 00:33:22,559
the ajo setup script for raspberry pi

00:33:19,120 --> 00:33:25,279
if you specify raspberry pi 3 or 4

00:33:22,559 --> 00:33:26,720
as a targeted machine it initializes the

00:33:25,279 --> 00:33:29,120
build environment

00:33:26,720 --> 00:33:32,320
by automatically populating com slash

00:33:29,120 --> 00:33:35,399
local.com and comm slash bblayers.com

00:33:32,320 --> 00:33:36,880
uh so meta raspberry pi will go into the

00:33:35,399 --> 00:33:39,279
bblayers.com file

00:33:36,880 --> 00:33:40,880
in order to take advantage of all the

00:33:39,279 --> 00:33:44,640
things that it brings for

00:33:40,880 --> 00:33:48,080
supporting ago um

00:33:44,640 --> 00:33:50,840
so furthermore uh there is a one

00:33:48,080 --> 00:33:52,000
sub layer of meta ago called meta ago

00:33:50,840 --> 00:33:54,480
bsp

00:33:52,000 --> 00:33:55,840
which contains hardware specific

00:33:54,480 --> 00:33:57,840
configurations so

00:33:55,840 --> 00:33:59,600
agio setup will take care of

00:33:57,840 --> 00:34:03,840
automatically loading it

00:33:59,600 --> 00:34:04,320
also in the bb layers in a local.com

00:34:03,840 --> 00:34:05,919
file

00:34:04,320 --> 00:34:08,320
if you have a look at it for example if

00:34:05,919 --> 00:34:10,720
you open it with vim or nano or

00:34:08,320 --> 00:34:13,119
whatever is your favorite text editor

00:34:10,720 --> 00:34:16,560
you'll notice that it will include

00:34:13,119 --> 00:34:17,720
um ago underscore raspberry pi 3 or 4

00:34:16,560 --> 00:34:18,879
depending on the machine that you've

00:34:17,720 --> 00:34:22,000
selected

00:34:18,879 --> 00:34:23,679
um so these are again

00:34:22,000 --> 00:34:26,399
hardware specific configurations for

00:34:23,679 --> 00:34:28,720
running agile raspberry pi

00:34:26,399 --> 00:34:30,320
um so what what are these hardware

00:34:28,720 --> 00:34:32,720
specific configuration well

00:34:30,320 --> 00:34:33,919
adrian raspberry pi uses ubud as a

00:34:32,720 --> 00:34:36,240
bootloader

00:34:33,919 --> 00:34:37,679
not the default bootloader provided by

00:34:36,240 --> 00:34:40,399
the raspberry pi foundation

00:34:37,679 --> 00:34:40,720
we are using ubud uh we're setting up

00:34:40,399 --> 00:34:44,159
the

00:34:40,720 --> 00:34:45,040
uh the gpu memory we're enabling uart

00:34:44,159 --> 00:34:48,000
which provides

00:34:45,040 --> 00:34:49,839
provide us the the opportunity to

00:34:48,000 --> 00:34:50,399
monitor the serial output while the

00:34:49,839 --> 00:34:54,079
board

00:34:50,399 --> 00:34:56,320
moves uh also various kernel modules

00:34:54,079 --> 00:34:57,520
as well as wi-fi and bluetooth firmware

00:34:56,320 --> 00:35:01,200
are included

00:34:57,520 --> 00:35:03,119
in the agile demo platform image that we

00:35:01,200 --> 00:35:05,839
we've learned how to build in one of the

00:35:03,119 --> 00:35:05,839
previous slides

00:35:06,160 --> 00:35:10,800
um a few words about the ago software

00:35:09,200 --> 00:35:13,760
over the year updates

00:35:10,800 --> 00:35:15,119
in order to enable them you have to

00:35:13,760 --> 00:35:17,920
explicitly

00:35:15,119 --> 00:35:21,119
type in the agl sort of feature when you

00:35:17,920 --> 00:35:24,240
are running the ajo setup script

00:35:21,119 --> 00:35:25,520
it will include a couple of uh yokota

00:35:24,240 --> 00:35:28,560
and open embedded

00:35:25,520 --> 00:35:31,040
layers there they're called meta updater

00:35:28,560 --> 00:35:33,040
and meta updater raspberry pi as the

00:35:31,040 --> 00:35:34,240
name suggests the second layer metadata

00:35:33,040 --> 00:35:37,599
raspberry pi

00:35:34,240 --> 00:35:38,320
uh contains some specific db append

00:35:37,599 --> 00:35:42,320
files

00:35:38,320 --> 00:35:45,680
uh to run uh os3 and actualizer

00:35:42,320 --> 00:35:48,240
and properly make the partitions

00:35:45,680 --> 00:35:49,520
and everything uh for booting her on a

00:35:48,240 --> 00:35:52,560
raspberry pi

00:35:49,520 --> 00:35:55,520
uh libos3 is a great project

00:35:52,560 --> 00:35:56,400
that i really admire because it provides

00:35:55,520 --> 00:36:00,079
a good-like

00:35:56,400 --> 00:36:04,079
model for committing and downloading

00:36:00,079 --> 00:36:05,599
updates initially it was a technology

00:36:04,079 --> 00:36:09,040
that was developed

00:36:05,599 --> 00:36:09,920
for um for desktop distribution actually

00:36:09,040 --> 00:36:13,200
dom continuous

00:36:09,920 --> 00:36:15,680
is using it for quality assurance

00:36:13,200 --> 00:36:18,000
and several years ago maybe four or five

00:36:15,680 --> 00:36:21,760
years

00:36:18,000 --> 00:36:25,359
it was supported to to embedded devices

00:36:21,760 --> 00:36:27,920
i was happy to be part of this process

00:36:25,359 --> 00:36:28,880
there is uh there is a tool called

00:36:27,920 --> 00:36:32,240
actualizer

00:36:28,880 --> 00:36:34,800
um which was developed by um

00:36:32,240 --> 00:36:36,000
the german company uh uh advanced

00:36:34,800 --> 00:36:38,880
animatic systems

00:36:36,000 --> 00:36:40,480
which was uh which was acquired by uh

00:36:38,880 --> 00:36:42,800
here and uh

00:36:40,480 --> 00:36:44,240
here is now developing it uh which is

00:36:42,800 --> 00:36:46,480
another open source tool

00:36:44,240 --> 00:36:47,760
for automatic provisioning of bootable

00:36:46,480 --> 00:36:49,760
file system trees

00:36:47,760 --> 00:36:50,960
to free the vehicles so this is

00:36:49,760 --> 00:36:54,320
something specific

00:36:50,960 --> 00:36:57,520
for for the automotive industry

00:36:54,320 --> 00:36:59,119
um so yeah you can use uh liberal

00:36:57,520 --> 00:37:01,760
austrian actualizer

00:36:59,119 --> 00:37:02,400
either in ngo the using the age of sort

00:37:01,760 --> 00:37:04,800
of feature

00:37:02,400 --> 00:37:05,680
or if you prefer you can even integrate

00:37:04,800 --> 00:37:09,200
them in

00:37:05,680 --> 00:37:11,040
in a separate your own yokto

00:37:09,200 --> 00:37:12,960
and open embedded base distribution even

00:37:11,040 --> 00:37:15,920
if it's uh it's not ago

00:37:12,960 --> 00:37:16,560
more details about how to use it are

00:37:15,920 --> 00:37:19,760
available

00:37:16,560 --> 00:37:22,720
both in the wiki

00:37:19,760 --> 00:37:23,839
of agl as well as the documentation the

00:37:22,720 --> 00:37:26,880
official documentation

00:37:23,839 --> 00:37:30,240
for actualizer and

00:37:26,880 --> 00:37:30,880
provided by here both links are

00:37:30,240 --> 00:37:34,800
available

00:37:30,880 --> 00:37:37,760
in slides um

00:37:34,800 --> 00:37:38,480
so now let's have a look uh what

00:37:37,760 --> 00:37:40,960
development

00:37:38,480 --> 00:37:42,480
tools are used in agl so that you can

00:37:40,960 --> 00:37:44,480
join the project and use them

00:37:42,480 --> 00:37:46,000
actually all those tools are quite

00:37:44,480 --> 00:37:48,079
popular in the industry

00:37:46,000 --> 00:37:49,359
and most most probably you are already

00:37:48,079 --> 00:37:51,440
familiar with them so

00:37:49,359 --> 00:37:53,839
it's going to be an easy transition if

00:37:51,440 --> 00:37:58,079
you're new to the project

00:37:53,839 --> 00:38:00,400
as you have seen the source code in agl

00:37:58,079 --> 00:38:03,680
is stored in various git repositories

00:38:00,400 --> 00:38:06,960
and the google repo tool is used

00:38:03,680 --> 00:38:09,359
to easily with just a few commands

00:38:06,960 --> 00:38:10,720
uh check out these repositories together

00:38:09,359 --> 00:38:13,920
and build an image

00:38:10,720 --> 00:38:15,839
for code reviews agrs relying on garrett

00:38:13,920 --> 00:38:17,520
also there is uh there are github

00:38:15,839 --> 00:38:18,720
repositories but only for the

00:38:17,520 --> 00:38:21,040
documentation

00:38:18,720 --> 00:38:22,320
uh here you can see both links to

00:38:21,040 --> 00:38:25,119
garrett and

00:38:22,320 --> 00:38:25,839
github if you find a book and want to

00:38:25,119 --> 00:38:27,599
report it

00:38:25,839 --> 00:38:29,680
go to jira this is the book tracking

00:38:27,599 --> 00:38:32,240
system that ago uses

00:38:29,680 --> 00:38:34,000
there is also a great wiki so if you

00:38:32,240 --> 00:38:35,440
find something specific

00:38:34,000 --> 00:38:37,200
or if you are searching for some

00:38:35,440 --> 00:38:39,760
specific information have a look at the

00:38:37,200 --> 00:38:41,680
wiki first

00:38:39,760 --> 00:38:43,119
and for the general documentation the

00:38:41,680 --> 00:38:45,280
official documentation

00:38:43,119 --> 00:38:48,480
of our award upgrade linux is available

00:38:45,280 --> 00:38:50,560
at docs.automotivelands.org

00:38:48,480 --> 00:38:52,160
agr relies on jenkins for continuous

00:38:50,560 --> 00:38:55,440
integrations lava and for

00:38:52,160 --> 00:38:57,440
uh and fuego for running tests a few

00:38:55,440 --> 00:38:59,359
words about agile garrett

00:38:57,440 --> 00:39:01,520
this is a free and open source web-based

00:38:59,359 --> 00:39:02,480
theme called collaboration tool for code

00:39:01,520 --> 00:39:05,599
reviewers

00:39:02,480 --> 00:39:08,000
it is specifically useful

00:39:05,599 --> 00:39:08,640
when you have large projects and

00:39:08,000 --> 00:39:11,280
definitely

00:39:08,640 --> 00:39:12,400
agio is a large project with people

00:39:11,280 --> 00:39:15,119
working

00:39:12,400 --> 00:39:17,119
and reviewing code that are people that

00:39:15,119 --> 00:39:19,280
are distributed around the world

00:39:17,119 --> 00:39:21,760
working in different time zones agile

00:39:19,280 --> 00:39:25,760
simplifies the code review process

00:39:21,760 --> 00:39:28,160
and it's a great tool uh for this job

00:39:25,760 --> 00:39:30,240
you can use agile garrett all you need

00:39:28,160 --> 00:39:33,520
to do is to create a free account

00:39:30,240 --> 00:39:38,560
at identitylinuxfoundation.org and to be

00:39:33,520 --> 00:39:40,800
able to login to gary.multifunctions.org

00:39:38,560 --> 00:39:42,560
so the the workflow for contributing to

00:39:40,800 --> 00:39:44,640
agr is basically that

00:39:42,560 --> 00:39:47,040
you report an issue or a new feature in

00:39:44,640 --> 00:39:47,839
jira after that you modify the source

00:39:47,040 --> 00:39:50,160
code

00:39:47,839 --> 00:39:50,960
you include a reference to the jira

00:39:50,160 --> 00:39:54,079
issues in the

00:39:50,960 --> 00:39:56,560
git commit message that provides the bug

00:39:54,079 --> 00:39:59,599
fix or the new feature and

00:39:56,560 --> 00:40:01,920
um you have to contribute it to the agio

00:39:59,599 --> 00:40:04,000
gary workflow

00:40:01,920 --> 00:40:06,000
which is pretty standard for for using

00:40:04,000 --> 00:40:09,200
garrett so basically the idea

00:40:06,000 --> 00:40:12,240
is that you are

00:40:09,200 --> 00:40:14,960
you are cloning locally uh

00:40:12,240 --> 00:40:16,880
the git repository you are modifying it

00:40:14,960 --> 00:40:18,000
after that you are pushing changes which

00:40:16,880 --> 00:40:21,599
are pending

00:40:18,000 --> 00:40:24,480
under review and a reviewer must vote

00:40:21,599 --> 00:40:25,440
and uh if uh if the change is approved

00:40:24,480 --> 00:40:27,760
by the community

00:40:25,440 --> 00:40:29,680
if it has enough plus volts the

00:40:27,760 --> 00:40:33,440
maintainer will submit it

00:40:29,680 --> 00:40:34,960
uh to to the agile repository

00:40:33,440 --> 00:40:36,640
uh here's an example this is a

00:40:34,960 --> 00:40:39,760
screenshot um

00:40:36,640 --> 00:40:40,800
taken from one commit that i did a few

00:40:39,760 --> 00:40:44,400
months ago

00:40:40,800 --> 00:40:46,960
uh and it has been merged uh in ngo

00:40:44,400 --> 00:40:48,880
garrett i've mentioned them back in the

00:40:46,960 --> 00:40:52,000
days uh last autumn

00:40:48,880 --> 00:40:54,960
uh we we had a lot of problems

00:40:52,000 --> 00:40:56,400
supporting both the asian hdmi monitors

00:40:54,960 --> 00:40:58,640
and the seven

00:40:56,400 --> 00:40:59,440
inch official raspberry pi touchscreen

00:40:58,640 --> 00:41:01,440
display

00:40:59,440 --> 00:41:03,280
so the solution was to switch to

00:41:01,440 --> 00:41:07,440
firmware kms

00:41:03,280 --> 00:41:10,880
so here if you notice there is this uh

00:41:07,440 --> 00:41:15,160
buck agl tag and it contains

00:41:10,880 --> 00:41:18,960
a link to the jira issue this is spec

00:41:15,160 --> 00:41:20,800
2465 so this is very convenient because

00:41:18,960 --> 00:41:22,560
if you're reading the law several months

00:41:20,800 --> 00:41:24,960
later as we do it here

00:41:22,560 --> 00:41:26,880
today you can just click on the on this

00:41:24,960 --> 00:41:30,079
link and you see the whole

00:41:26,880 --> 00:41:33,119
the whole history with more details uh

00:41:30,079 --> 00:41:35,839
what has been done and why it has been

00:41:33,119 --> 00:41:35,839
done

00:41:36,640 --> 00:41:40,560
i encourage you to join the hl

00:41:38,560 --> 00:41:43,280
communication channels aja has some

00:41:40,560 --> 00:41:45,520
mailing lists

00:41:43,280 --> 00:41:47,680
there is a weekly developer call each

00:41:45,520 --> 00:41:48,800
tuesday where all developers gather to

00:41:47,680 --> 00:41:52,000
discuss uh the

00:41:48,800 --> 00:41:54,720
the progress of the project uh

00:41:52,000 --> 00:41:55,839
this developer call takes about an hour

00:41:54,720 --> 00:41:57,760
or even less

00:41:55,839 --> 00:41:58,880
and if you have a quick question you can

00:41:57,760 --> 00:42:03,280
always join the

00:41:58,880 --> 00:42:05,200
automotive channel on freenode

00:42:03,280 --> 00:42:07,119
so a few conclusions at the end of this

00:42:05,200 --> 00:42:08,880
presentation as you have seen

00:42:07,119 --> 00:42:10,720
automotive grade linux is a

00:42:08,880 --> 00:42:12,800
collaborative open source project

00:42:10,720 --> 00:42:15,119
that is bringing together out more

00:42:12,800 --> 00:42:17,040
automotive makers suppliers

00:42:15,119 --> 00:42:18,160
and technology companies as well as

00:42:17,040 --> 00:42:20,400
individuals

00:42:18,160 --> 00:42:21,440
the idea is to accelerate accelerate the

00:42:20,400 --> 00:42:23,359
development and

00:42:21,440 --> 00:42:25,359
adoption of fully open source software

00:42:23,359 --> 00:42:28,000
stack based on linux this is

00:42:25,359 --> 00:42:29,040
really important for the connective car

00:42:28,000 --> 00:42:32,160
agility

00:42:29,040 --> 00:42:34,000
linux foundation project uh raspberry pi

00:42:32,160 --> 00:42:35,440
is just one of the supported platforms

00:42:34,000 --> 00:42:38,800
fire agl

00:42:35,440 --> 00:42:41,359
of course uh hgo uh um is

00:42:38,800 --> 00:42:43,760
in general targeting to run uh

00:42:41,359 --> 00:42:47,040
automotive grade hardware raspberry pi

00:42:43,760 --> 00:42:50,800
is not made for cars however

00:42:47,040 --> 00:42:52,480
it's a very convenient platform for

00:42:50,800 --> 00:42:54,400
getting started for doing proof of

00:42:52,480 --> 00:42:55,119
concept demonstrations because raspberry

00:42:54,400 --> 00:42:58,880
pi

00:42:55,119 --> 00:43:01,280
is cheap and it's easy to get

00:42:58,880 --> 00:43:03,440
no matter where you're living uh most

00:43:01,280 --> 00:43:06,079
probably there's a distributor near

00:43:03,440 --> 00:43:07,920
you so you can easily buy a raspberry pi

00:43:06,079 --> 00:43:09,839
and get started

00:43:07,920 --> 00:43:11,520
i hope this talk will encourage you to

00:43:09,839 --> 00:43:13,200
join the automotive grade linux

00:43:11,520 --> 00:43:15,440
community start contributing to the

00:43:13,200 --> 00:43:16,560
development to the testing by reporting

00:43:15,440 --> 00:43:19,040
bugs on jira

00:43:16,560 --> 00:43:20,400
or to the documentation agio is

00:43:19,040 --> 00:43:24,800
participating

00:43:20,400 --> 00:43:26,880
in the google summer of code

00:43:24,800 --> 00:43:28,160
programs uh as well as summer of

00:43:26,880 --> 00:43:31,040
documentation

00:43:28,160 --> 00:43:31,839
uh the community manager managers of uh

00:43:31,040 --> 00:43:35,440
agl

00:43:31,839 --> 00:43:38,079
uh can share more details about it uh

00:43:35,440 --> 00:43:39,040
they're part of the linux conference uh

00:43:38,079 --> 00:43:42,000
have a look for

00:43:39,040 --> 00:43:44,480
walt or jan simon to chat about the

00:43:42,000 --> 00:43:47,280
project if you are interested

00:43:44,480 --> 00:43:49,040
and want to learn more details uh how to

00:43:47,280 --> 00:43:51,040
join our community

00:43:49,040 --> 00:43:52,560
thank you very much here are a few

00:43:51,040 --> 00:43:56,240
useful links

00:43:52,560 --> 00:43:59,440
and i'll be happy to hear your

00:43:56,240 --> 00:44:09,839
questions thank you very much for

00:43:59,440 --> 00:44:09,839
for your attention again

00:44:12,640 --> 00:44:16,720
hi thank you very much for joining this

00:44:14,319 --> 00:44:17,599
session uh there are a lot of useful

00:44:16,720 --> 00:44:21,119
comments

00:44:17,599 --> 00:44:22,319
and uh questions so i'll start answering

00:44:21,119 --> 00:44:24,319
them um

00:44:22,319 --> 00:44:26,800
randy from the linux foundation who's

00:44:24,319 --> 00:44:29,119
looking after the infrastructure of agl

00:44:26,800 --> 00:44:30,400
has a very important command he wrote

00:44:29,119 --> 00:44:31,760
that soon there will be github

00:44:30,400 --> 00:44:32,720
repositories not only for the

00:44:31,760 --> 00:44:35,359
documentation

00:44:32,720 --> 00:44:38,800
but also for the source code ryan thank

00:44:35,359 --> 00:44:38,800
you very much for this command

00:44:39,680 --> 00:44:43,839
another question uh does this work for

00:44:42,319 --> 00:44:47,599
raspberry pi zero

00:44:43,839 --> 00:44:48,400
uh sorry valentine no ago doesn't run on

00:44:47,599 --> 00:44:51,280
raspberry pi

00:44:48,400 --> 00:44:52,319
zero because raspberry pi 0 and

00:44:51,280 --> 00:44:53,599
raspberry pi 0

00:44:52,319 --> 00:44:56,240
as well as the very first version of

00:44:53,599 --> 00:44:59,040
raspberry pi 0 have a very constrained

00:44:56,240 --> 00:45:00,319
hardware this was the same reason why we

00:44:59,040 --> 00:45:04,800
stopped supporting

00:45:00,319 --> 00:45:07,359
ago on raspberry pi 2. in general um

00:45:04,800 --> 00:45:09,440
agr requires quite a lot of resources

00:45:07,359 --> 00:45:11,119
and uh as a conclusion of this talk i

00:45:09,440 --> 00:45:14,240
would highly recommend you

00:45:11,119 --> 00:45:17,119
using uh agile raspberry pi 4

00:45:14,240 --> 00:45:18,960
with four or eight gigabytes of ram

00:45:17,119 --> 00:45:22,400
because of the ui

00:45:18,960 --> 00:45:25,200
um another question

00:45:22,400 --> 00:45:26,319
uh orlin is asking uh qt and qml has

00:45:25,200 --> 00:45:28,720
been very common

00:45:26,319 --> 00:45:30,640
in the automotive industry is html5

00:45:28,720 --> 00:45:33,839
getting popular as well do you know any

00:45:30,640 --> 00:45:36,240
car companies using html5 for ui

00:45:33,839 --> 00:45:37,520
i'm not familiar with products uh

00:45:36,240 --> 00:45:40,640
integrated

00:45:37,520 --> 00:45:42,000
in cars on the road the idea in agl is

00:45:40,640 --> 00:45:44,560
to provide a platform

00:45:42,000 --> 00:45:45,280
on top of which manufacturers can change

00:45:44,560 --> 00:45:48,000
the ui

00:45:45,280 --> 00:45:50,400
and shift it to the market however you

00:45:48,000 --> 00:45:52,880
can see some demonstrations by igalia

00:45:50,400 --> 00:45:54,160
running html5 applications on embedded

00:45:52,880 --> 00:45:57,520
linux devices

00:45:54,160 --> 00:45:59,599
and and on agl i'm sorry that i can

00:45:57,520 --> 00:46:01,359
not provide any details about uh

00:45:59,599 --> 00:46:03,280
products available on the market

00:46:01,359 --> 00:46:05,680
it's uh just something that i really

00:46:03,280 --> 00:46:09,119
don't know

00:46:05,680 --> 00:46:12,319
another question does ago support any

00:46:09,119 --> 00:46:13,599
account shields for raspberry pi uh yes

00:46:12,319 --> 00:46:16,319
marcelo uh

00:46:13,599 --> 00:46:17,119
can shoots are supported however i don't

00:46:16,319 --> 00:46:19,760
remember

00:46:17,119 --> 00:46:21,119
uh on top of my head the exact motto of

00:46:19,760 --> 00:46:24,400
raspberry i had with

00:46:21,119 --> 00:46:28,160
kanda uh was uh supported uh

00:46:24,400 --> 00:46:30,240
is supported by ago however um

00:46:28,160 --> 00:46:32,319
this year during the demonstrations at

00:46:30,240 --> 00:46:36,480
ces and fosdem

00:46:32,319 --> 00:46:39,680
uh agio had a demo uh which raspberry i

00:46:36,480 --> 00:46:42,000
had exactly for this uh please uh let's

00:46:39,680 --> 00:46:44,160
continue this conversation in slack

00:46:42,000 --> 00:46:45,920
and i'll try to find pointers and

00:46:44,160 --> 00:46:50,000
provide you more details about it

00:46:45,920 --> 00:46:52,000
i believe jan simon

00:46:50,000 --> 00:46:56,840
from linux foundation can also provide

00:46:52,000 --> 00:46:59,440
details on this

00:46:56,840 --> 00:47:02,079
[Music]

00:46:59,440 --> 00:47:04,079
thank you very much for uh your commands

00:47:02,079 --> 00:47:05,040
uh here's another question uh that's

00:47:04,079 --> 00:47:07,359
important to us

00:47:05,040 --> 00:47:08,839
to answer how can open source beginners

00:47:07,359 --> 00:47:12,079
start contributing to

00:47:08,839 --> 00:47:15,200
agl you can follow the instructions

00:47:12,079 --> 00:47:17,359
uh and the links shared in my slides

00:47:15,200 --> 00:47:18,960
and my slides are already available at

00:47:17,359 --> 00:47:19,599
chat after the conference i'm going to

00:47:18,960 --> 00:47:22,720
share them

00:47:19,599 --> 00:47:25,040
also in slideshare and linkedin so the

00:47:22,720 --> 00:47:27,599
easiest way is um

00:47:25,040 --> 00:47:28,240
first to join our community the maining

00:47:27,599 --> 00:47:32,160
list

00:47:28,240 --> 00:47:32,880
the uh the weekly uh developer calls on

00:47:32,160 --> 00:47:35,440
tuesday

00:47:32,880 --> 00:47:36,319
the rc channel to have a look at the

00:47:35,440 --> 00:47:38,480
documentation

00:47:36,319 --> 00:47:39,599
and the wiki to get started and

00:47:38,480 --> 00:47:41,920
hopefully this uh

00:47:39,599 --> 00:47:44,160
this presentation will encourage you and

00:47:41,920 --> 00:47:45,119
more people to join our community and

00:47:44,160 --> 00:47:48,240
get started

00:47:45,119 --> 00:47:51,280
uh agio is a is a great product uh

00:47:48,240 --> 00:47:54,240
open source uh product uh to

00:47:51,280 --> 00:47:56,160
for beginners to get started with open

00:47:54,240 --> 00:47:59,440
source and something that's uh

00:47:56,160 --> 00:48:01,920
made for embedded devices and especially

00:47:59,440 --> 00:48:01,920
vehicles

00:48:04,839 --> 00:48:07,839
uh

00:48:10,000 --> 00:48:14,319
all right um court is asking apart from

00:48:12,800 --> 00:48:16,480
infotainment telematics

00:48:14,319 --> 00:48:18,480
what other anticipated application

00:48:16,480 --> 00:48:20,240
domains uh

00:48:18,480 --> 00:48:21,680
yeah that's a good question uh there are

00:48:20,240 --> 00:48:24,800
many demonstrations done with

00:48:21,680 --> 00:48:25,119
ago uh especially in the past years as

00:48:24,800 --> 00:48:26,640
you

00:48:25,119 --> 00:48:28,240
have seen in this presentation there are

00:48:26,640 --> 00:48:31,520
a lot of changes going on

00:48:28,240 --> 00:48:34,640
there was even a demonstration with um

00:48:31,520 --> 00:48:36,960
with alexa integrated in agl

00:48:34,640 --> 00:48:39,520
so again i would recommend you to have a

00:48:36,960 --> 00:48:42,079
look at the ces demonstrations with

00:48:39,520 --> 00:48:44,480
ag other details about them in the ag

00:48:42,079 --> 00:48:44,480
wiki

00:48:46,839 --> 00:48:51,760
uh there's a

00:48:49,920 --> 00:48:53,200
big question here uh i know it's a big

00:48:51,760 --> 00:48:54,240
question but what are the usual

00:48:53,200 --> 00:48:56,480
challenges with porting

00:48:54,240 --> 00:48:57,760
airport bsp from wales western and

00:48:56,480 --> 00:49:00,960
perspective

00:48:57,760 --> 00:49:02,800
um yeah that that's a huge challenge

00:49:00,960 --> 00:49:04,240
it was a huge challenge nowadays it's

00:49:02,800 --> 00:49:05,280
not such a challenge because of the

00:49:04,240 --> 00:49:07,920
excellent shape

00:49:05,280 --> 00:49:09,440
in uh meta raspberry pi fortunately i

00:49:07,920 --> 00:49:12,800
don't have enough time to

00:49:09,440 --> 00:49:16,400
answer in details however uh if you

00:49:12,800 --> 00:49:18,319
if you're basing an linux distribution

00:49:16,400 --> 00:49:19,040
built with the yokota project and open

00:49:18,319 --> 00:49:22,480
embedded

00:49:19,040 --> 00:49:25,280
on the meta uh raspberry pi bsp layer

00:49:22,480 --> 00:49:25,680
uh nowadays sporting to uh wayland is

00:49:25,280 --> 00:49:28,240
way

00:49:25,680 --> 00:49:29,040
easier than it used to be thank you very

00:49:28,240 --> 00:49:31,440
much uh

00:49:29,040 --> 00:49:32,079
for uh joining this presentation it's

00:49:31,440 --> 00:49:35,440
great to

00:49:32,079 --> 00:49:37,599
to see so many comments and uh questions

00:49:35,440 --> 00:49:39,440
we're running out of time uh so please

00:49:37,599 --> 00:49:42,240
let's continue the discussion in

00:49:39,440 --> 00:49:43,359
you can find me there in the uh embedded

00:49:42,240 --> 00:49:45,440
track

00:49:43,359 --> 00:49:47,119
as well as in the yocto project track

00:49:45,440 --> 00:49:49,760
and the vehicle software track

00:49:47,119 --> 00:49:51,520
so uh it's going to be great to continue

00:49:49,760 --> 00:49:53,119
the discussion over there

00:49:51,520 --> 00:49:54,559
thank you very much for your attention

00:49:53,119 --> 00:49:56,480
and huge thanks to the whole team of

00:49:54,559 --> 00:50:00,160
linux foundation for organizing this

00:49:56,480 --> 00:50:00,160
virtual event i hope you enjoyed

00:50:03,540 --> 00:50:06,780
[Music]

00:50:07,880 --> 00:50:10,880

YouTube URL: https://www.youtube.com/watch?v=5pO09BcKJ-o


