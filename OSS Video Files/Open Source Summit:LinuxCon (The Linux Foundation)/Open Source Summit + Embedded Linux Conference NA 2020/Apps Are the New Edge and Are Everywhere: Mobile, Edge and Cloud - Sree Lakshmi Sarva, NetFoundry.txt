Title: Apps Are the New Edge and Are Everywhere: Mobile, Edge and Cloud - Sree Lakshmi Sarva, NetFoundry
Publication date: 2020-09-10
Playlist: Open Source Summit + Embedded Linux Conference NA 2020
Description: 
	Apps Are the New Edge and Are Everywhere: Mobile, Edge and Cloud - Sree Lakshmi Sarva, NetFoundry Inc.
Captions: 
	00:00:09,200 --> 00:00:12,400
hello everyone

00:00:10,480 --> 00:00:14,000
hope all of you are doing well good

00:00:12,400 --> 00:00:16,400
morning good afternoon

00:00:14,000 --> 00:00:17,359
and welcome to today's oss north america

00:00:16,400 --> 00:00:19,920
summit session

00:00:17,359 --> 00:00:21,279
on apps or the new edge a bit about

00:00:19,920 --> 00:00:23,439
myself

00:00:21,279 --> 00:00:25,199
my name is srilakshmi sarva i've been

00:00:23,439 --> 00:00:28,240
hanging around in the networking

00:00:25,199 --> 00:00:30,720
industry for almost the last two decades

00:00:28,240 --> 00:00:32,320
most recently working on sdn and cloud

00:00:30,720 --> 00:00:35,280
technologies

00:00:32,320 --> 00:00:36,239
my current uh role i had products at net

00:00:35,280 --> 00:00:39,680
foundry

00:00:36,239 --> 00:00:40,800
a very innovative startup redefining the

00:00:39,680 --> 00:00:43,840
network paradigm

00:00:40,800 --> 00:00:44,640
and enabling new programmable constructs

00:00:43,840 --> 00:00:46,079
for

00:00:44,640 --> 00:00:48,320
the hyper connected world of

00:00:46,079 --> 00:00:50,559
applications with its open source

00:00:48,320 --> 00:00:52,160
initiative called project ct

00:00:50,559 --> 00:00:53,600
which we will hear through this session

00:00:52,160 --> 00:00:55,840
today

00:00:53,600 --> 00:00:59,359
prior to net foundry i was at a company

00:00:55,840 --> 00:01:00,960
called juniper networks driving the sdn

00:00:59,359 --> 00:01:03,680
and cloud solutions

00:01:00,960 --> 00:01:04,960
uh with a product called contra which

00:01:03,680 --> 00:01:08,080
was also an open source

00:01:04,960 --> 00:01:10,960
uh initiative at juniper and that's my

00:01:08,080 --> 00:01:10,960
twitter handle

00:01:11,360 --> 00:01:17,439
now in today's uh session when i

00:01:14,640 --> 00:01:18,640
say applications are the new edge what

00:01:17,439 --> 00:01:21,680
do i mean by

00:01:18,640 --> 00:01:23,920
by that you know we will review

00:01:21,680 --> 00:01:26,479
some of the trends that are fueling the

00:01:23,920 --> 00:01:29,920
edge and cloud

00:01:26,479 --> 00:01:30,799
trends cloud innovation trends what is

00:01:29,920 --> 00:01:33,439
project zt

00:01:30,799 --> 00:01:35,280
and why should you care about it we'll

00:01:33,439 --> 00:01:37,520
talk a little bit about the apps that

00:01:35,280 --> 00:01:39,759
fit into the

00:01:37,520 --> 00:01:40,880
need or domain of secure by design

00:01:39,759 --> 00:01:42,799
applications

00:01:40,880 --> 00:01:44,079
will will we will do a code walkthrough

00:01:42,799 --> 00:01:47,600
or a demo

00:01:44,079 --> 00:01:49,520
based on uh based on the time

00:01:47,600 --> 00:01:52,479
that we have for the session and we'll

00:01:49,520 --> 00:01:52,479
end it with q

00:01:52,840 --> 00:01:55,840
a

00:02:01,280 --> 00:02:07,520
now when i say the edge

00:02:05,280 --> 00:02:08,479
you know edge has a different

00:02:07,520 --> 00:02:11,520
connotations

00:02:08,479 --> 00:02:11,920
it's mostly a misnomer and we you know i

00:02:11,520 --> 00:02:14,080
will

00:02:11,920 --> 00:02:15,120
create a baseline reference on what i

00:02:14,080 --> 00:02:18,560
mean by the edge in

00:02:15,120 --> 00:02:20,480
in the next slide or two application

00:02:18,560 --> 00:02:23,280
architectures have evolved

00:02:20,480 --> 00:02:24,160
from a centralized mainframe based model

00:02:23,280 --> 00:02:26,000
to a

00:02:24,160 --> 00:02:27,920
distributed client server model in the

00:02:26,000 --> 00:02:30,560
last several decades

00:02:27,920 --> 00:02:31,599
and most recently into virtualized and

00:02:30,560 --> 00:02:34,480
containerized

00:02:31,599 --> 00:02:36,160
form factors with cloud adoption being

00:02:34,480 --> 00:02:38,720
on the rise

00:02:36,160 --> 00:02:40,680
with the advent of micro services based

00:02:38,720 --> 00:02:44,000
application architectures

00:02:40,680 --> 00:02:46,800
containerization service meshes

00:02:44,000 --> 00:02:47,840
enterprises are embracing open

00:02:46,800 --> 00:02:50,080
architectures

00:02:47,840 --> 00:02:51,920
white box based technologies open source

00:02:50,080 --> 00:02:55,120
software

00:02:51,920 --> 00:02:57,120
with 5g and private lte becoming a

00:02:55,120 --> 00:02:59,280
reality in terms of scaling the notion

00:02:57,120 --> 00:03:02,840
of connected things

00:02:59,280 --> 00:03:04,319
to thousands or tens of thousands of

00:03:02,840 --> 00:03:08,800
devices

00:03:04,319 --> 00:03:10,879
there's yet again an evolutionary trend

00:03:08,800 --> 00:03:11,840
of enterprises embracing digital

00:03:10,879 --> 00:03:14,480
transformation

00:03:11,840 --> 00:03:15,840
to re-architect modernize their

00:03:14,480 --> 00:03:18,959
applications

00:03:15,840 --> 00:03:22,239
build new industry 4.0 applications that

00:03:18,959 --> 00:03:23,040
fuel their businesses processes and

00:03:22,239 --> 00:03:25,200
things

00:03:23,040 --> 00:03:28,080
to a magnificent scale that we have

00:03:25,200 --> 00:03:31,200
never seen before

00:03:28,080 --> 00:03:33,200
and it's all centered around cloud and

00:03:31,200 --> 00:03:36,959
edge computing

00:03:33,200 --> 00:03:39,360
now the ai and ml based technologies

00:03:36,959 --> 00:03:40,400
with their data learning models and

00:03:39,360 --> 00:03:43,519
analytics

00:03:40,400 --> 00:03:46,480
are further fueling and putting edge

00:03:43,519 --> 00:03:47,519
at the forefront edge i said is a

00:03:46,480 --> 00:03:51,120
misnomer

00:03:47,519 --> 00:03:53,519
a wide variety of definitions h

00:03:51,120 --> 00:03:55,439
in the context of this presentation is

00:03:53,519 --> 00:03:59,360
anything that can skip us

00:03:55,439 --> 00:04:00,000
that can span between the end device the

00:03:59,360 --> 00:04:02,959
application

00:04:00,000 --> 00:04:03,680
of the sensor that's generating data and

00:04:02,959 --> 00:04:07,920
the cloud

00:04:03,680 --> 00:04:10,400
whether it's private uh or public

00:04:07,920 --> 00:04:12,560
modern digital applications whether it's

00:04:10,400 --> 00:04:15,920
smart factory floor automation with

00:04:12,560 --> 00:04:19,280
air vr type capabilities a smart

00:04:15,920 --> 00:04:21,280
retail uh enhanced consumer experience

00:04:19,280 --> 00:04:23,440
with drone-based deliveries

00:04:21,280 --> 00:04:24,639
or contactless deliveries mainly due to

00:04:23,440 --> 00:04:27,280
cover 19

00:04:24,639 --> 00:04:28,800
or a smart retail health healthcare

00:04:27,280 --> 00:04:31,360
application

00:04:28,800 --> 00:04:32,639
experience with telemedicine type

00:04:31,360 --> 00:04:36,160
applications

00:04:32,639 --> 00:04:38,639
connected vehicles with v2x technologies

00:04:36,160 --> 00:04:40,000
and smart cities for connected

00:04:38,639 --> 00:04:42,880
infrastructure

00:04:40,000 --> 00:04:45,759
take any of these applications they are

00:04:42,880 --> 00:04:49,040
usually frontended by a mobile app

00:04:45,759 --> 00:04:50,720
providing an interface into uh the

00:04:49,040 --> 00:04:53,759
environment

00:04:50,720 --> 00:04:55,280
now the ai and machine learning data

00:04:53,759 --> 00:04:59,360
analytics

00:04:55,280 --> 00:04:59,360
that are responsible for

00:04:59,600 --> 00:05:05,520
analyzing the data from the sources

00:05:03,759 --> 00:05:08,479
that are being generated by the devices

00:05:05,520 --> 00:05:11,600
or the applications of the sensors

00:05:08,479 --> 00:05:14,080
require extensive compute capacity

00:05:11,600 --> 00:05:15,759
in an effort to reduce costs of sending

00:05:14,080 --> 00:05:19,120
the generated data

00:05:15,759 --> 00:05:22,479
over to cloud environments

00:05:19,120 --> 00:05:25,520
and to help increase the intelligence

00:05:22,479 --> 00:05:27,680
in real time near real time

00:05:25,520 --> 00:05:29,280
the inference portion of the ai

00:05:27,680 --> 00:05:32,320
processing workflow

00:05:29,280 --> 00:05:33,120
is emerging to co-locate closer to the

00:05:32,320 --> 00:05:35,039
device

00:05:33,120 --> 00:05:36,479
or the application that's generating

00:05:35,039 --> 00:05:40,800
this data

00:05:36,479 --> 00:05:43,360
and enable real-time data pre-treatment

00:05:40,800 --> 00:05:45,840
filtering and interpretation in the form

00:05:43,360 --> 00:05:49,520
of an edge platform

00:05:45,840 --> 00:05:52,000
note that the training models themselves

00:05:49,520 --> 00:05:53,199
are still residing in the cloud the

00:05:52,000 --> 00:05:57,280
inferred data

00:05:53,199 --> 00:05:57,280
at the edge is sent back to the cloud

00:05:58,080 --> 00:06:02,960
now there are several vendors providing

00:06:00,000 --> 00:06:05,520
these edge platforms today

00:06:02,960 --> 00:06:06,479
super micro smart retailer edge azure

00:06:05,520 --> 00:06:10,479
stack

00:06:06,479 --> 00:06:12,479
edge wallterra and other vendors

00:06:10,479 --> 00:06:14,639
are offering these edge platform

00:06:12,479 --> 00:06:17,759
capabilities

00:06:14,639 --> 00:06:20,800
gartner also predicts that 50

00:06:17,759 --> 00:06:22,400
of the enterprise data will be outside

00:06:20,800 --> 00:06:25,280
of their data centers or cloud

00:06:22,400 --> 00:06:27,280
environments by 2022.

00:06:25,280 --> 00:06:29,520
now how do you securely connect these

00:06:27,280 --> 00:06:32,960
applications the data sources

00:06:29,520 --> 00:06:34,800
the mobile devices the users edge cloud

00:06:32,960 --> 00:06:38,400
on demand

00:06:34,800 --> 00:06:39,680
using an internet as the connectivity

00:06:38,400 --> 00:06:42,479
medium

00:06:39,680 --> 00:06:43,600
the traditional networking and security

00:06:42,479 --> 00:06:47,039
approaches

00:06:43,600 --> 00:06:49,120
are too heavyweight and expensive

00:06:47,039 --> 00:06:51,440
to solve these application connectivity

00:06:49,120 --> 00:06:51,440
needs

00:06:51,680 --> 00:06:55,039
now that's where net family comes into

00:06:54,160 --> 00:06:56,880
play

00:06:55,039 --> 00:06:59,280
with its cloud-native networking

00:06:56,880 --> 00:07:00,160
approach to solve this distributed

00:06:59,280 --> 00:07:03,280
dynamic

00:07:00,160 --> 00:07:06,800
programmable connectivity needs

00:07:03,280 --> 00:07:12,080
across any application any cloud or

00:07:06,800 --> 00:07:14,000
edge to draw an analogy

00:07:12,080 --> 00:07:16,400
similar to how one would log into a

00:07:14,000 --> 00:07:19,599
cloud provider's console

00:07:16,400 --> 00:07:21,840
to instantiate vms or containers

00:07:19,599 --> 00:07:23,599
on demand and tear them down once they

00:07:21,840 --> 00:07:26,160
are done

00:07:23,599 --> 00:07:26,639
in case of net foundry an it cloud or

00:07:26,160 --> 00:07:29,599
nod

00:07:26,639 --> 00:07:30,400
administrator can spin up global scale

00:07:29,599 --> 00:07:33,840
networks

00:07:30,400 --> 00:07:37,280
on demand programmatically enable

00:07:33,840 --> 00:07:40,560
access to the distributed endpoints

00:07:37,280 --> 00:07:42,240
the applications the devices across the

00:07:40,560 --> 00:07:44,800
globe

00:07:42,240 --> 00:07:47,120
all that the it administrator has to do

00:07:44,800 --> 00:07:49,759
is to log into the net foundry

00:07:47,120 --> 00:07:52,000
nas console spin up a global scale

00:07:49,759 --> 00:07:53,520
private network

00:07:52,000 --> 00:07:56,479
which would be ready in the matter of

00:07:53,520 --> 00:07:58,720
minutes and enroll the identity

00:07:56,479 --> 00:08:00,960
of the endpoints and the applications or

00:07:58,720 --> 00:08:03,360
the iot devices or sensors that need to

00:08:00,960 --> 00:08:08,400
be part of

00:08:03,360 --> 00:08:12,960
the overlay now based on the identity

00:08:08,400 --> 00:08:15,599
trust context such as geolocation

00:08:12,960 --> 00:08:16,160
net foundry would use an authenticate

00:08:15,599 --> 00:08:20,000
before

00:08:16,160 --> 00:08:21,039
connect model to orchestrate a zero

00:08:20,000 --> 00:08:23,599
trust

00:08:21,039 --> 00:08:25,759
secure overlay an app specific

00:08:23,599 --> 00:08:26,879
connectivity which is called as an app

00:08:25,759 --> 00:08:29,919
and the one that

00:08:26,879 --> 00:08:31,120
you see is color coded in this in this

00:08:29,919 --> 00:08:34,640
slide

00:08:31,120 --> 00:08:37,680
across these endpoints and in public

00:08:34,640 --> 00:08:40,800
private cloud or secure global

00:08:37,680 --> 00:08:41,760
fabric now global fabric itself spans

00:08:40,800 --> 00:08:43,919
across

00:08:41,760 --> 00:08:46,480
you know hyperscaler environments and

00:08:43,919 --> 00:08:49,040
private data centers that we own

00:08:46,480 --> 00:08:52,399
and all we need is internet connectivity

00:08:49,040 --> 00:08:55,440
and some cool application developers

00:08:52,399 --> 00:08:58,399
how are we enabling this and you know

00:08:55,440 --> 00:09:01,519
what's unique about this hybrid model

00:08:58,399 --> 00:09:02,240
is that we support legacy applications

00:09:01,519 --> 00:09:06,320
that have been

00:09:02,240 --> 00:09:08,880
uh returned in uh in the previous years

00:09:06,320 --> 00:09:10,800
in legacy environments

00:09:08,880 --> 00:09:12,320
as well as modern applications that can

00:09:10,800 --> 00:09:16,480
benefit with the zero trust

00:09:12,320 --> 00:09:19,120
approach we have uh the endpoint clients

00:09:16,480 --> 00:09:22,240
cloud gateways across market several

00:09:19,120 --> 00:09:23,920
cloud service provider marketplaces

00:09:22,240 --> 00:09:25,279
in addition what's unique about net

00:09:23,920 --> 00:09:28,480
foundry is that

00:09:25,279 --> 00:09:29,360
we are enabling app developers to

00:09:28,480 --> 00:09:33,120
natively

00:09:29,360 --> 00:09:36,720
embed secure private networking

00:09:33,120 --> 00:09:40,080
with off before connect identity trust

00:09:36,720 --> 00:09:42,080
natively into the application itself

00:09:40,080 --> 00:09:44,000
we no longer want networking to be a

00:09:42,080 --> 00:09:47,680
barrier to innovate

00:09:44,000 --> 00:09:49,360
nor security to be an afterthought

00:09:47,680 --> 00:09:51,519
how do we go about this how are we

00:09:49,360 --> 00:09:52,640
enabling this let's dig a little bit

00:09:51,519 --> 00:09:56,000
deeper

00:09:52,640 --> 00:09:58,160
project ct is all about we never trust

00:09:56,000 --> 00:10:01,279
anything we verify everything before we

00:09:58,160 --> 00:10:01,279
establish that trust

00:10:01,519 --> 00:10:05,680
to give a high level block diagram the

00:10:04,079 --> 00:10:09,200
net family platform has

00:10:05,680 --> 00:10:10,880
the micro services based sas

00:10:09,200 --> 00:10:12,640
implementation that manages the

00:10:10,880 --> 00:10:16,480
orchestration of the network and

00:10:12,640 --> 00:10:19,680
enrollment of the edge

00:10:16,480 --> 00:10:21,760
devices or iot cloud

00:10:19,680 --> 00:10:24,000
mobile applications that are connecting

00:10:21,760 --> 00:10:27,440
and dialing into the fabric

00:10:24,000 --> 00:10:30,480
now under the hoods below the sas layer

00:10:27,440 --> 00:10:31,279
is what we call as our open source

00:10:30,480 --> 00:10:34,880
platform

00:10:31,279 --> 00:10:37,279
project cd yes that's true that we built

00:10:34,880 --> 00:10:40,480
our network as a service platform on top

00:10:37,279 --> 00:10:43,440
of the open source uh building block

00:10:40,480 --> 00:10:43,440
that we believe in

00:10:43,920 --> 00:10:50,320
and that has the fabric

00:10:47,120 --> 00:10:53,600
and the edge complementary to make this

00:10:50,320 --> 00:10:57,440
a programmable zero trust network

00:10:53,600 --> 00:10:58,720
experience possible now for the rest of

00:10:57,440 --> 00:11:02,480
this session

00:10:58,720 --> 00:11:05,600
we will focus on the zd fabric

00:11:02,480 --> 00:11:08,000
initiative uh and we'll talk a little

00:11:05,600 --> 00:11:09,200
bit deeper around what fabric does and

00:11:08,000 --> 00:11:11,460
edge does and

00:11:09,200 --> 00:11:13,040
what are the application developers

00:11:11,460 --> 00:11:16,320
[Music]

00:11:13,040 --> 00:11:16,320
uh should care about

00:11:17,040 --> 00:11:20,800
now what is ct zt in addition to it

00:11:20,079 --> 00:11:24,560
being the

00:11:20,800 --> 00:11:27,040
yummy pasta it also means that

00:11:24,560 --> 00:11:29,120
it's a modern programmable network

00:11:27,040 --> 00:11:32,399
overlay with associated

00:11:29,120 --> 00:11:35,200
edge componentry for an

00:11:32,399 --> 00:11:36,240
application embedded zero trust

00:11:35,200 --> 00:11:40,800
networking

00:11:36,240 --> 00:11:43,839
approach it is written by developers

00:11:40,800 --> 00:11:43,839
for developers

00:11:44,000 --> 00:11:50,639
ziti allows app developers to

00:11:47,680 --> 00:11:52,000
take secure programmable constructs

00:11:50,639 --> 00:11:54,800
identity and trust

00:11:52,000 --> 00:11:55,519
and embed natively natively into the

00:11:54,800 --> 00:11:58,480
application

00:11:55,519 --> 00:12:00,240
few lines of code five to ten lines of

00:11:58,480 --> 00:12:02,320
code and it's available in multiple

00:12:00,240 --> 00:12:03,839
programming like the libraries and sdks

00:12:02,320 --> 00:12:05,920
are available in multiple programming

00:12:03,839 --> 00:12:09,040
languages

00:12:05,920 --> 00:12:12,880
now the best mental model to picture zt

00:12:09,040 --> 00:12:14,160
is as two separate modules the fabric

00:12:12,880 --> 00:12:16,320
and the edge

00:12:14,160 --> 00:12:18,800
if you look at our source code you would

00:12:16,320 --> 00:12:21,279
see that these two repositories

00:12:18,800 --> 00:12:23,440
uh the zd edge and the fabric

00:12:21,279 --> 00:12:26,959
repositories on our github

00:12:23,440 --> 00:12:28,959
repo the fabric

00:12:26,959 --> 00:12:30,240
uh let's talk about it a little bit

00:12:28,959 --> 00:12:32,560
further

00:12:30,240 --> 00:12:33,440
fabric consists of the network

00:12:32,560 --> 00:12:36,720
controllers

00:12:33,440 --> 00:12:40,079
the edge routers that are responsible

00:12:36,720 --> 00:12:42,240
for creating the long-haul routing mesh

00:12:40,079 --> 00:12:43,279
pluggable transport such as quick

00:12:42,240 --> 00:12:47,600
transfer

00:12:43,279 --> 00:12:50,800
tcp to udp proxy optimizations

00:12:47,600 --> 00:12:52,320
concept of services routers circuits

00:12:50,800 --> 00:12:55,200
tons of functionality that can be

00:12:52,320 --> 00:12:57,760
extended the visibility and routing

00:12:55,200 --> 00:12:58,560
metrics across the data paths whole

00:12:57,760 --> 00:13:01,200
bunch of

00:12:58,560 --> 00:13:02,639
extras x-link management software that's

00:13:01,200 --> 00:13:05,519
really important

00:13:02,639 --> 00:13:06,399
and an amazing piece of software on its

00:13:05,519 --> 00:13:08,959
own

00:13:06,399 --> 00:13:10,880
or delivering open source long haul

00:13:08,959 --> 00:13:13,839
overlay by itself

00:13:10,880 --> 00:13:15,200
now the edge sits on top of fabric if

00:13:13,839 --> 00:13:18,320
fabric is the cake

00:13:15,200 --> 00:13:22,480
it just sort of the icing on the cake

00:13:18,320 --> 00:13:22,480
there it offers the

00:13:23,040 --> 00:13:30,000
ease of use uh so you know the end

00:13:26,480 --> 00:13:33,120
applications uh or the endpoints

00:13:30,000 --> 00:13:34,639
can use the tunnelers the sdks

00:13:33,120 --> 00:13:36,639
available in multiple programming

00:13:34,639 --> 00:13:39,120
languages providing that last mile

00:13:36,639 --> 00:13:42,880
connectivity

00:13:39,120 --> 00:13:45,920
so that the device or the app can talk

00:13:42,880 --> 00:13:48,560
to each other over the fabric based

00:13:45,920 --> 00:13:50,240
overlay now any client that's running

00:13:48,560 --> 00:13:52,720
the hsdk

00:13:50,240 --> 00:13:56,079
can host any service or it can be a

00:13:52,720 --> 00:13:56,079
client to any service

00:13:57,519 --> 00:14:00,959
and all that comes down to the policy

00:13:59,760 --> 00:14:03,680
configuration

00:14:00,959 --> 00:14:04,240
the policy engine by itself is extremely

00:14:03,680 --> 00:14:08,079
powerful

00:14:04,240 --> 00:14:09,600
extensible can be set up to do automatic

00:14:08,079 --> 00:14:12,079
rules

00:14:09,600 --> 00:14:14,800
such that when devices appear they can

00:14:12,079 --> 00:14:17,279
automatically be enabled

00:14:14,800 --> 00:14:18,720
for auto enrollment and have access to

00:14:17,279 --> 00:14:21,839
other services

00:14:18,720 --> 00:14:24,160
and endpoints within the advance the

00:14:21,839 --> 00:14:26,000
policy configurations also allow you to

00:14:24,160 --> 00:14:28,240
configure things such as geofencing

00:14:26,000 --> 00:14:30,079
capabilities where you can restrict

00:14:28,240 --> 00:14:32,320
the edge routers and the controllers

00:14:30,079 --> 00:14:34,720
that need to be used in the fabric

00:14:32,320 --> 00:14:36,079
a lot of complex systems fail to do this

00:14:34,720 --> 00:14:38,160
at scale mainly because of the

00:14:36,079 --> 00:14:41,040
difficulty to manage

00:14:38,160 --> 00:14:42,160
thousands of devices and their policies

00:14:41,040 --> 00:14:44,639
in here

00:14:42,160 --> 00:14:45,519
with project zt you can set them up

00:14:44,639 --> 00:14:47,920
pretty much

00:14:45,519 --> 00:14:49,680
automatically apply the device apply the

00:14:47,920 --> 00:14:51,440
policies and the devices when they show

00:14:49,680 --> 00:14:53,920
up enable connectivity

00:14:51,440 --> 00:14:55,519
revoke isolate access based on any

00:14:53,920 --> 00:14:57,519
external events triggers

00:14:55,519 --> 00:15:00,399
by simply modifying the policies the

00:14:57,519 --> 00:15:00,399
same policies

00:15:00,720 --> 00:15:04,320
ziti edge itself as mentioned is

00:15:02,720 --> 00:15:05,440
available in multiple programming

00:15:04,320 --> 00:15:09,040
languages cc

00:15:05,440 --> 00:15:12,320
sharp java portland cortova electron

00:15:09,040 --> 00:15:16,240
go we are adding many more

00:15:12,320 --> 00:15:19,920
uh in the coming weeks our customers

00:15:16,240 --> 00:15:22,320
are in fact helping us extend these sdks

00:15:19,920 --> 00:15:23,279
only basis on the applications that they

00:15:22,320 --> 00:15:25,519
are building

00:15:23,279 --> 00:15:27,199
and they are innovating with us in

00:15:25,519 --> 00:15:28,959
addition to the sdks

00:15:27,199 --> 00:15:31,279
which is mainly meant for greenfield

00:15:28,959 --> 00:15:33,839
applications we also have

00:15:31,279 --> 00:15:34,720
pre-built application connectors or

00:15:33,839 --> 00:15:36,800
tunnelers

00:15:34,720 --> 00:15:37,839
for brownfield applications that are

00:15:36,800 --> 00:15:41,120
pre-existing

00:15:37,839 --> 00:15:43,279
in your environment that want to benefit

00:15:41,120 --> 00:15:44,160
from the zero trust secure connectivity

00:15:43,279 --> 00:15:48,480
models

00:15:44,160 --> 00:15:50,399
in addition we also have a

00:15:48,480 --> 00:15:51,600
psychoproxy implementation for

00:15:50,399 --> 00:15:54,639
kubernetes

00:15:51,600 --> 00:15:56,560
environments as well as a

00:15:54,639 --> 00:15:59,360
plain old docker container available in

00:15:56,560 --> 00:15:59,360
our registries

00:15:59,600 --> 00:16:03,680
now app embedded sdk or the app

00:16:02,639 --> 00:16:06,160
connector

00:16:03,680 --> 00:16:07,199
uh pretty much intercepts the interested

00:16:06,160 --> 00:16:09,519
traffic

00:16:07,199 --> 00:16:11,120
based on the service name or the policy

00:16:09,519 --> 00:16:12,000
there's no mention of ip addresses

00:16:11,120 --> 00:16:14,639
anywhere

00:16:12,000 --> 00:16:15,199
and it sends it over the cd fabric now

00:16:14,639 --> 00:16:16,720
the edge

00:16:15,199 --> 00:16:18,480
and the fabric are the two building

00:16:16,720 --> 00:16:21,600
blocks well fabric

00:16:18,480 --> 00:16:24,160
can exist completely on its own

00:16:21,600 --> 00:16:26,639
providing the long-haul transport

00:16:24,160 --> 00:16:28,720
independent of the edge

00:16:26,639 --> 00:16:30,720
all of its functionality all of its

00:16:28,720 --> 00:16:34,240
concerns

00:16:30,720 --> 00:16:36,800
are of its own can it can pretty much uh

00:16:34,240 --> 00:16:38,800
exist as its own entity for all

00:16:36,800 --> 00:16:39,920
practical purposes delivering the fabric

00:16:38,800 --> 00:16:43,040
capability

00:16:39,920 --> 00:16:46,639
however the edge uses fabric

00:16:43,040 --> 00:16:50,800
and the way it does is that it carved

00:16:46,639 --> 00:16:54,000
out a small space for itself

00:16:50,800 --> 00:16:56,240
called the fabric api layout

00:16:54,000 --> 00:16:57,920
and it's an internal code level api that

00:16:56,240 --> 00:17:03,120
the edge uses

00:16:57,920 --> 00:17:08,559
to head users to

00:17:03,120 --> 00:17:08,559
connect with the fabric components

00:17:10,480 --> 00:17:14,480
now that's how the edge and fabric

00:17:15,280 --> 00:17:20,319
work together in order to deliver the

00:17:18,480 --> 00:17:22,000
zero trust programmable connectivity

00:17:20,319 --> 00:17:25,600
models

00:17:22,000 --> 00:17:28,799
the fabric has the network controller

00:17:25,600 --> 00:17:30,799
the edge routers and the edge

00:17:28,799 --> 00:17:32,720
complementary comes with the application

00:17:30,799 --> 00:17:36,640
sdks or the app connectors or the

00:17:32,720 --> 00:17:36,640
tunnelers that plug into the fabric

00:17:36,720 --> 00:17:41,600
and these applications and end points

00:17:39,760 --> 00:17:44,480
that are connecting and dialing into the

00:17:41,600 --> 00:17:49,280
fabric imagine them at scale with

00:17:44,480 --> 00:17:51,360
thousands of routers and

00:17:49,280 --> 00:17:54,640
tens of thousands of these endpoints

00:17:51,360 --> 00:17:58,840
applications devices

00:17:54,640 --> 00:18:01,600
riding over a programmable fabric

00:17:58,840 --> 00:18:03,200
theoretically anybody could come along

00:18:01,600 --> 00:18:05,360
and start reproducing the edge

00:18:03,200 --> 00:18:08,559
capability and rewrite

00:18:05,360 --> 00:18:10,320
the edge using the fabric apis however

00:18:08,559 --> 00:18:11,600
the value is that we have already done

00:18:10,320 --> 00:18:14,480
this for them

00:18:11,600 --> 00:18:15,840
and on top we have done it securely and

00:18:14,480 --> 00:18:20,640
on top of that

00:18:15,840 --> 00:18:23,840
we have a full lifecycle management

00:18:20,640 --> 00:18:27,039
of certificates not just for the initial

00:18:23,840 --> 00:18:29,360
boot of trust but also

00:18:27,039 --> 00:18:30,160
for continuous trust with periodic

00:18:29,360 --> 00:18:34,320
circuit

00:18:30,160 --> 00:18:35,919
rotation and um

00:18:34,320 --> 00:18:39,039
maintaining of the certain

00:18:35,919 --> 00:18:40,720
infrastructure is all handled by cd

00:18:39,039 --> 00:18:42,080
in addition we provide end-to-end

00:18:40,720 --> 00:18:44,960
encryption across

00:18:42,080 --> 00:18:48,799
the endpoints and the applications that

00:18:44,960 --> 00:18:48,799
are riding on top of the series fabric

00:18:49,120 --> 00:18:52,160
since we are a zero trust product and we

00:18:51,120 --> 00:18:54,640
don't trust

00:18:52,160 --> 00:18:56,880
uh you know this particular project is

00:18:54,640 --> 00:19:00,000
all about zero trust and we don't trust

00:18:56,880 --> 00:19:02,480
anything unless we verify

00:19:00,000 --> 00:19:04,880
there's an interesting problem of how do

00:19:02,480 --> 00:19:08,400
we initiate and build trust

00:19:04,880 --> 00:19:12,000
this means that we would need to

00:19:08,400 --> 00:19:14,880
put cryptographic software

00:19:12,000 --> 00:19:16,080
all over the place configure them

00:19:14,880 --> 00:19:18,880
properly

00:19:16,080 --> 00:19:19,840
manage them properly including the life

00:19:18,880 --> 00:19:23,679
cycle

00:19:19,840 --> 00:19:26,799
we are going to manage these entire uh

00:19:23,679 --> 00:19:29,520
life cycle of private and public cert

00:19:26,799 --> 00:19:31,200
keys for the devices in large scale

00:19:29,520 --> 00:19:34,080
deployments we're talking about

00:19:31,200 --> 00:19:36,320
thousands or millions of endpoints and

00:19:34,080 --> 00:19:37,280
devices and thousands of routers spread

00:19:36,320 --> 00:19:40,400
across the

00:19:37,280 --> 00:19:43,440
globe across different cloud hybrid

00:19:40,400 --> 00:19:45,360
cloud public private cloud environments

00:19:43,440 --> 00:19:47,440
it would establish trust in these

00:19:45,360 --> 00:19:51,280
locations

00:19:47,440 --> 00:19:54,640
so looking back at this picture

00:19:51,280 --> 00:19:57,360
we have the sdk we have the edge

00:19:54,640 --> 00:19:58,880
the routers the controllers fabric

00:19:57,360 --> 00:20:02,240
working in harmony

00:19:58,880 --> 00:20:03,679
providing amazing capabilities on device

00:20:02,240 --> 00:20:07,360
identity

00:20:03,679 --> 00:20:09,679
enrollment of trust initiating the trust

00:20:07,360 --> 00:20:11,360
fabric for long-haul communication and

00:20:09,679 --> 00:20:14,880
end-to-end encryption

00:20:11,360 --> 00:20:18,880
all packaged as a simple solution

00:20:14,880 --> 00:20:20,960
when you compare this to a https type of

00:20:18,880 --> 00:20:23,679
a session where you're initiating a

00:20:20,960 --> 00:20:26,400
connection to a website

00:20:23,679 --> 00:20:27,440
but the server side connection is being

00:20:26,400 --> 00:20:29,679
validated

00:20:27,440 --> 00:20:31,120
the server the website is not validating

00:20:29,679 --> 00:20:32,960
the client who's originating the

00:20:31,120 --> 00:20:36,720
connection request

00:20:32,960 --> 00:20:39,200
single side single side or server-side

00:20:36,720 --> 00:20:40,480
validation mechanism but as with ct we

00:20:39,200 --> 00:20:42,880
are talking about

00:20:40,480 --> 00:20:43,919
with the edge and the fabric components

00:20:42,880 --> 00:20:47,120
what we offer

00:20:43,919 --> 00:20:49,919
is a mutual tls based cert validation

00:20:47,120 --> 00:20:51,840
and verification with where

00:20:49,919 --> 00:20:55,120
communication

00:20:51,840 --> 00:20:58,600
in all directions in both directions is

00:20:55,120 --> 00:21:02,080
validated authorized and cryptograph

00:20:58,600 --> 00:21:04,640
cryptographically signed using

00:21:02,080 --> 00:21:07,280
public plus private key infrastructure

00:21:04,640 --> 00:21:10,799
managed by us

00:21:07,280 --> 00:21:11,360
now let's talk about uh before i talk

00:21:10,799 --> 00:21:13,760
about

00:21:11,360 --> 00:21:15,200
bootstrapping trust i wanted to mention

00:21:13,760 --> 00:21:19,440
that

00:21:15,200 --> 00:21:22,480
the zt controller itself has its own ca

00:21:19,440 --> 00:21:24,880
and it is responsible for bootstrapping

00:21:22,480 --> 00:21:27,840
trust and extending the trust to

00:21:24,880 --> 00:21:29,919
the routers the edge routers and the

00:21:27,840 --> 00:21:31,600
application edge

00:21:29,919 --> 00:21:34,000
instances with which are built with the

00:21:31,600 --> 00:21:36,080
sdks

00:21:34,000 --> 00:21:38,159
now let's talk about how do we bootstrap

00:21:36,080 --> 00:21:40,080
trust from the controller

00:21:38,159 --> 00:21:41,200
to the edge routers and to the

00:21:40,080 --> 00:21:43,919
applications

00:21:41,200 --> 00:21:46,000
and or enter the applications that are

00:21:43,919 --> 00:21:47,679
built with the sdks

00:21:46,000 --> 00:21:50,240
an administrator who sets up the

00:21:47,679 --> 00:21:50,240
controller

00:21:51,280 --> 00:21:54,799
sets up the controller the controller

00:21:53,120 --> 00:21:58,240
comes with the default

00:21:54,799 --> 00:22:00,400
ca and a servicer admin requests for

00:21:58,240 --> 00:22:01,280
creating identity for the enrolling app

00:22:00,400 --> 00:22:03,440
or device

00:22:01,280 --> 00:22:04,480
and it will do the same thing for

00:22:03,440 --> 00:22:07,520
enrolling a

00:22:04,480 --> 00:22:10,559
z uh router uh

00:22:07,520 --> 00:22:13,919
in this case the admin then sends the

00:22:10,559 --> 00:22:16,720
generated jot token back to the

00:22:13,919 --> 00:22:18,640
unrolling device that has the sdk

00:22:16,720 --> 00:22:21,440
componentry in it

00:22:18,640 --> 00:22:24,559
the sdk componentry or the app or the

00:22:21,440 --> 00:22:27,280
tunnel or parses the jot token

00:22:24,559 --> 00:22:28,240
retrieves the controller cert verifies

00:22:27,280 --> 00:22:31,760
the jot

00:22:28,240 --> 00:22:35,280
signature to ensure it's a valid one

00:22:31,760 --> 00:22:38,320
and retrieves uh the

00:22:35,280 --> 00:22:42,080
ca store from the controller

00:22:38,320 --> 00:22:45,360
well non-c is store from the controller

00:22:42,080 --> 00:22:48,720
at that point the controller establishes

00:22:45,360 --> 00:22:53,120
trust with the sdk however the

00:22:48,720 --> 00:22:55,120
uh how sorry the sdk establishes

00:22:53,120 --> 00:22:57,280
control trust with the controller

00:22:55,120 --> 00:22:58,159
however the controller has to establish

00:22:57,280 --> 00:23:01,919
trust with the

00:22:58,159 --> 00:23:04,640
sdk as a known identity

00:23:01,919 --> 00:23:06,000
so that's when the app sdk sends and

00:23:04,640 --> 00:23:07,520
generates a csr

00:23:06,000 --> 00:23:09,360
and enrollment request back to the

00:23:07,520 --> 00:23:10,400
controller and the controller validates

00:23:09,360 --> 00:23:12,799
the request

00:23:10,400 --> 00:23:13,600
and returns uh the signed certificates

00:23:12,799 --> 00:23:17,440
back to the

00:23:13,600 --> 00:23:20,480
application endpoint now imagine

00:23:17,440 --> 00:23:24,400
all of this being done at scale

00:23:20,480 --> 00:23:28,000
across millions of uh

00:23:24,400 --> 00:23:33,919
distributed applications and devices

00:23:28,000 --> 00:23:38,640
and across thousands of zdh routers

00:23:33,919 --> 00:23:41,520
the sdk app uh the the zdh routers

00:23:38,640 --> 00:23:43,440
uh the ongoing trust it's not just about

00:23:41,520 --> 00:23:45,360
building that initial trust

00:23:43,440 --> 00:23:47,520
ongoing trust is something that needs to

00:23:45,360 --> 00:23:49,840
be maintained by periodic

00:23:47,520 --> 00:23:53,039
rotation and the required infrastructure

00:23:49,840 --> 00:23:53,039
is managed by ct

00:23:54,000 --> 00:23:56,240
so

00:23:57,679 --> 00:24:03,919
the identity trust into an encryption

00:24:01,360 --> 00:24:06,000
data flows across the fabric the smart

00:24:03,919 --> 00:24:06,720
routing self-healing capabilities across

00:24:06,000 --> 00:24:10,240
the fabric

00:24:06,720 --> 00:24:14,159
all of that form the basis

00:24:10,240 --> 00:24:17,039
of a programmable network fabric

00:24:14,159 --> 00:24:18,480
allowing distributed applications to use

00:24:17,039 --> 00:24:23,679
the mutual tls

00:24:18,480 --> 00:24:23,679
identity trust encryption constructs

00:24:24,000 --> 00:24:27,600
now there are additional details on our

00:24:26,559 --> 00:24:32,400
github page

00:24:27,600 --> 00:24:32,400
where an important aspect about

00:24:32,480 --> 00:24:40,000
about zt the name it

00:24:35,919 --> 00:24:43,120
got because of the fact that

00:24:40,000 --> 00:24:45,919
there is no network connectivity

00:24:43,120 --> 00:24:48,000
established no connectivity established

00:24:45,919 --> 00:24:52,960
unless the authentication is done

00:24:48,000 --> 00:24:57,120
across the initiating service

00:24:52,960 --> 00:24:59,360
on both sides and the assets

00:24:57,120 --> 00:25:01,679
whether it's the edge routers or it's

00:24:59,360 --> 00:25:04,559
the applications themselves remain

00:25:01,679 --> 00:25:05,840
dark to the internet which means that we

00:25:04,559 --> 00:25:09,200
avoid potential

00:25:05,840 --> 00:25:11,600
attacks and security hacks uh

00:25:09,200 --> 00:25:14,480
that have been on the rise in the recent

00:25:11,600 --> 00:25:16,799
years with vpn like technologies

00:25:14,480 --> 00:25:18,960
identification and authentication is

00:25:16,799 --> 00:25:20,400
sort of integrated and baked into the

00:25:18,960 --> 00:25:22,880
platform offering

00:25:20,400 --> 00:25:24,960
where you get a managed pki

00:25:22,880 --> 00:25:28,159
infrastructure

00:25:24,960 --> 00:25:31,120
with cd now let's talk

00:25:28,159 --> 00:25:33,600
a little bit about what kind of

00:25:31,120 --> 00:25:38,240
applications can leverage

00:25:33,600 --> 00:25:40,000
zd think of smart trading applications

00:25:38,240 --> 00:25:40,960
where there are remote traders using

00:25:40,000 --> 00:25:43,679
applications

00:25:40,960 --> 00:25:45,120
trying to conduct transactions low

00:25:43,679 --> 00:25:48,159
latency

00:25:45,120 --> 00:25:51,039
high performance transactions that

00:25:48,159 --> 00:25:52,720
are connected to cloud and edge data

00:25:51,039 --> 00:25:55,760
centers

00:25:52,720 --> 00:25:56,799
typically they are using vpn like

00:25:55,760 --> 00:25:59,279
technologies which

00:25:56,799 --> 00:26:00,400
are being replaced with a zd based

00:25:59,279 --> 00:26:03,520
programmable

00:26:00,400 --> 00:26:07,279
overlay based connectivity from the app

00:26:03,520 --> 00:26:09,840
into the cloud and edge data center

00:26:07,279 --> 00:26:11,679
locations

00:26:09,840 --> 00:26:12,880
smart vehicles silicon to cloud

00:26:11,679 --> 00:26:16,080
connectivity

00:26:12,880 --> 00:26:18,159
where fleet of forklifts are

00:26:16,080 --> 00:26:20,799
staged with telemetry gateway units

00:26:18,159 --> 00:26:24,720
built on deluge gateway boxes

00:26:20,799 --> 00:26:27,840
deployed with micron authenta

00:26:24,720 --> 00:26:29,600
based hardware root of trust three

00:26:27,840 --> 00:26:32,880
applications telemetry app

00:26:29,600 --> 00:26:34,080
over the top uh uh update app and a

00:26:32,880 --> 00:26:37,279
diagnostic app

00:26:34,080 --> 00:26:40,720
all built with sdks with the

00:26:37,279 --> 00:26:43,120
zdsd case they orchestrate connectivity

00:26:40,720 --> 00:26:45,039
from the edge appliance to the cloud

00:26:43,120 --> 00:26:47,360
data center locations

00:26:45,039 --> 00:26:49,440
for sending periodic updates on how the

00:26:47,360 --> 00:26:52,080
focus is performing

00:26:49,440 --> 00:26:53,600
for predictive maintenance and br in all

00:26:52,080 --> 00:26:56,960
the top updates

00:26:53,600 --> 00:26:59,200
in case of a malfunctioning the forklift

00:26:56,960 --> 00:27:00,559
administrator can log in via the

00:26:59,200 --> 00:27:03,600
management app and

00:27:00,559 --> 00:27:07,200
isolate the failure and

00:27:03,600 --> 00:27:09,520
correct the issue in this scenario each

00:27:07,200 --> 00:27:10,799
application is getting its own private

00:27:09,520 --> 00:27:13,679
network

00:27:10,799 --> 00:27:14,640
and there is no lateral movement in case

00:27:13,679 --> 00:27:20,159
a potential

00:27:14,640 --> 00:27:22,320
attack occurs

00:27:20,159 --> 00:27:23,360
the next use case is an interesting one

00:27:22,320 --> 00:27:27,520
with b2x

00:27:23,360 --> 00:27:30,080
uh capabilities such as a vehicle to

00:27:27,520 --> 00:27:31,279
infrastructure vehicle to vehicle where

00:27:30,080 --> 00:27:33,200
the

00:27:31,279 --> 00:27:35,679
third party trust needs to be

00:27:33,200 --> 00:27:38,159
established

00:27:35,679 --> 00:27:39,520
in-car applications requiring ota

00:27:38,159 --> 00:27:44,000
updates

00:27:39,520 --> 00:27:46,880
on vehicle maintenance or

00:27:44,000 --> 00:27:48,159
charging in case of electric vehicles uh

00:27:46,880 --> 00:27:51,520
charging

00:27:48,159 --> 00:27:52,960
stations integrating with the vehicle

00:27:51,520 --> 00:27:55,200
apps

00:27:52,960 --> 00:27:57,600
smart retail with enhanced customer

00:27:55,200 --> 00:28:00,000
services contactless delivery

00:27:57,600 --> 00:28:02,960
drone-based delivery in-store

00:28:00,000 --> 00:28:06,240
maintenance of the inventory

00:28:02,960 --> 00:28:07,760
camera based surveillance connected

00:28:06,240 --> 00:28:10,880
warehouse management

00:28:07,760 --> 00:28:14,000
all of these applications require

00:28:10,880 --> 00:28:16,720
zero trust connectivity

00:28:14,000 --> 00:28:17,919
to the application users and to cloud

00:28:16,720 --> 00:28:21,279
services that they need

00:28:17,919 --> 00:28:23,840
access to last

00:28:21,279 --> 00:28:25,279
last but not the least for which we will

00:28:23,840 --> 00:28:27,520
see a demo

00:28:25,279 --> 00:28:29,120
is the mobile point of sale applications

00:28:27,520 --> 00:28:32,720
that are being architected

00:28:29,120 --> 00:28:35,120
for secure mtls based transactions

00:28:32,720 --> 00:28:37,440
between the mobile app and the cloud

00:28:35,120 --> 00:28:40,080
backing

00:28:37,440 --> 00:28:42,840
these are few examples but we are

00:28:40,080 --> 00:28:46,080
inviting app developers to start

00:28:42,840 --> 00:28:46,640
exploring this new paradigm of secure by

00:28:46,080 --> 00:28:50,159
design

00:28:46,640 --> 00:28:51,520
application innovation where do you want

00:28:50,159 --> 00:28:54,399
to ideally use

00:28:51,520 --> 00:28:55,919
zd you look for application

00:28:54,399 --> 00:28:58,720
architectures that require

00:28:55,919 --> 00:28:59,840
private business apn or vpn you

00:28:58,720 --> 00:29:04,799
eliminate that

00:28:59,840 --> 00:29:07,840
with a zero trust zt based overlay

00:29:04,799 --> 00:29:11,120
look for opportunities to embed

00:29:07,840 --> 00:29:13,200
secure by design very low footprint

00:29:11,120 --> 00:29:14,640
connectivity constructs natively into

00:29:13,200 --> 00:29:16,480
the app

00:29:14,640 --> 00:29:17,760
applications that require hydrogen

00:29:16,480 --> 00:29:20,240
security

00:29:17,760 --> 00:29:22,000
replace tls with an mtls implementation

00:29:20,240 --> 00:29:24,640
that's managed by cd

00:29:22,000 --> 00:29:27,520
all of that without the enterprise

00:29:24,640 --> 00:29:29,039
needing to maintain deploy pki

00:29:27,520 --> 00:29:31,279
infrastructure it's done by

00:29:29,039 --> 00:29:34,720
us when we have the customer and no

00:29:31,279 --> 00:29:34,720
hardware deployment is needed

00:29:37,360 --> 00:29:44,000
well no meat is complete without a demo

00:29:40,399 --> 00:29:44,799
and i intended to show two specific demo

00:29:44,000 --> 00:29:47,360
showcases

00:29:44,799 --> 00:29:48,000
one with an application that is built

00:29:47,360 --> 00:29:51,679
with an

00:29:48,000 --> 00:29:53,760
sdk with the zt sdk written in java

00:29:51,679 --> 00:29:54,960
and the second one is a windows

00:29:53,760 --> 00:29:58,399
application

00:29:54,960 --> 00:30:02,080
that leverages a pre-built

00:29:58,399 --> 00:30:04,640
tunneler that's also built on top of our

00:30:02,080 --> 00:30:04,640
csd

00:30:05,679 --> 00:30:12,880
let me go

00:30:08,880 --> 00:30:12,880
back for a second

00:30:21,120 --> 00:30:25,200
so the first demo that we are seeing is

00:30:23,520 --> 00:30:28,559
a mobile point of sale

00:30:25,200 --> 00:30:32,640
application where there is a mobile app

00:30:28,559 --> 00:30:36,080
the flash app that is

00:30:32,640 --> 00:30:39,120
enrolled in terms of identity

00:30:36,080 --> 00:30:41,440
and you know that's written in java the

00:30:39,120 --> 00:30:45,360
identity of that particular application

00:30:41,440 --> 00:30:48,640
is enrolled into a a z based system

00:30:45,360 --> 00:30:52,000
uh and the code for

00:30:48,640 --> 00:30:56,320
the mpos app is as simple as replacing

00:30:52,000 --> 00:30:59,039
a tcp connect with the cd in it

00:30:56,320 --> 00:31:00,320
using the java sdk libraries that we

00:30:59,039 --> 00:31:03,760
publish

00:31:00,320 --> 00:31:05,600
and as the app executes you will see

00:31:03,760 --> 00:31:08,399
that

00:31:05,600 --> 00:31:10,399
the merchant initiates a sale

00:31:08,399 --> 00:31:12,960
transaction the merchant of

00:31:10,399 --> 00:31:14,960
uh this particular application is

00:31:12,960 --> 00:31:16,720
initiating a sale train transaction on

00:31:14,960 --> 00:31:20,480
behalf of a customer

00:31:16,720 --> 00:31:23,840
the customer then receives

00:31:20,480 --> 00:31:24,799
uh at that point the transaction is

00:31:23,840 --> 00:31:27,360
initiated

00:31:24,799 --> 00:31:29,120
and the customer needs to enter their

00:31:27,360 --> 00:31:32,640
mobile phone number

00:31:29,120 --> 00:31:33,039
and confirm the purchase amount and once

00:31:32,640 --> 00:31:36,480
the

00:31:33,039 --> 00:31:39,919
purchase amount is submitted

00:31:36,480 --> 00:31:44,720
the transaction is initiated over

00:31:39,919 --> 00:31:47,360
a net foundry zt based overlay

00:31:44,720 --> 00:31:48,240
at this point the customer would receive

00:31:47,360 --> 00:31:51,440
an otp

00:31:48,240 --> 00:31:52,960
code an otp code where in the backend

00:31:51,440 --> 00:31:56,000
dashboard you could see

00:31:52,960 --> 00:31:57,519
that a transaction was initiated by a

00:31:56,000 --> 00:32:00,559
certain

00:31:57,519 --> 00:32:04,559
merchant or a specific phone number

00:32:00,559 --> 00:32:07,279
the otp code was issued and once the

00:32:04,559 --> 00:32:10,000
end customer receives the otp code the

00:32:07,279 --> 00:32:13,440
otp code 2988 in this case

00:32:10,000 --> 00:32:16,480
is entered in the mobile app

00:32:13,440 --> 00:32:17,279
then upon submission the transaction is

00:32:16,480 --> 00:32:20,640
then

00:32:17,279 --> 00:32:23,360
confirmed to be submitted to be complete

00:32:20,640 --> 00:32:24,320
now both the transaction initiative

00:32:23,360 --> 00:32:27,440
initiation

00:32:24,320 --> 00:32:30,880
and transaction completion are all done

00:32:27,440 --> 00:32:33,360
a secure mtls based uh

00:32:30,880 --> 00:32:34,559
transactions over a zt based overlay in

00:32:33,360 --> 00:32:37,039
this

00:32:34,559 --> 00:32:39,760
sample application the source code of

00:32:37,039 --> 00:32:43,840
this app is available on our github repo

00:32:39,760 --> 00:32:44,960
um we welcome application developers to

00:32:43,840 --> 00:32:46,799
take a look at it

00:32:44,960 --> 00:32:48,320
um you can use it as a boilerplate

00:32:46,799 --> 00:32:50,240
template as you're

00:32:48,320 --> 00:32:52,640
exercising or investigating more

00:32:50,240 --> 00:32:55,679
capabilities with seeking

00:32:52,640 --> 00:32:56,480
the second application that i wanted to

00:32:55,679 --> 00:32:59,919
show

00:32:56,480 --> 00:33:03,120
is the one for brownfield apps

00:32:59,919 --> 00:33:06,159
that are on your windows environment

00:33:03,120 --> 00:33:09,360
and you require secure access

00:33:06,159 --> 00:33:10,799
to those applications via your windows

00:33:09,360 --> 00:33:14,159
desktops

00:33:10,799 --> 00:33:15,760
where you do not have access to rebuild

00:33:14,159 --> 00:33:18,159
something with the sdks

00:33:15,760 --> 00:33:19,120
what we have done is we have we

00:33:18,159 --> 00:33:21,039
published

00:33:19,120 --> 00:33:22,320
something called as app connectors or

00:33:21,039 --> 00:33:25,840
tunnelers that

00:33:22,320 --> 00:33:27,039
are again built on top of the ztsd case

00:33:25,840 --> 00:33:30,000
that we offer

00:33:27,039 --> 00:33:31,840
and here is an example this is done by

00:33:30,000 --> 00:33:34,720
one of my colleague

00:33:31,840 --> 00:33:35,919
jeremy teller he's part of our advanced

00:33:34,720 --> 00:33:38,080
networking

00:33:35,919 --> 00:33:39,360
team at netflix okay i'm gonna set this

00:33:38,080 --> 00:33:40,720
up here we are

00:33:39,360 --> 00:33:42,640
you'll see we're executing in a windows

00:33:40,720 --> 00:33:44,000
sandbox that i just turned on

00:33:42,640 --> 00:33:46,320
so everything is nice and clean

00:33:44,000 --> 00:33:48,320
nothing's been configured up

00:33:46,320 --> 00:33:49,440
uh what i'm gonna show is we have a

00:33:48,320 --> 00:33:53,200
service

00:33:49,440 --> 00:33:54,000
secured by a zd network hello.zd so that

00:33:53,200 --> 00:33:55,600
if you're

00:33:54,000 --> 00:33:58,000
come here and you don't have zd access

00:33:55,600 --> 00:34:00,640
you just get the regular old 404

00:33:58,000 --> 00:34:01,760
uh error but if you do have access you

00:34:00,640 --> 00:34:05,840
have identities

00:34:01,760 --> 00:34:08,000
and a tunneler running that uses our sdk

00:34:05,840 --> 00:34:09,440
you'll be able to access that resource

00:34:08,000 --> 00:34:11,760
so first off i'm going to come in and

00:34:09,440 --> 00:34:13,599
i'm going to create an identity

00:34:11,760 --> 00:34:14,879
for the service while i'm here i'll

00:34:13,599 --> 00:34:17,280
double check to make sure we have a

00:34:14,879 --> 00:34:21,760
service defined

00:34:17,280 --> 00:34:25,440
um which we do here hello.cdm480

00:34:21,760 --> 00:34:25,440
so now i'll go to identities

00:34:27,280 --> 00:34:30,320
demo sandbox

00:34:32,839 --> 00:34:38,320
identity we'll save that

00:34:39,040 --> 00:34:43,599
quick search for it here

00:34:42,079 --> 00:34:47,760
download that so i have it my downloads

00:34:43,599 --> 00:34:49,359
folder now i'm going to run the

00:34:47,760 --> 00:34:51,760
zd installer we'll do this right from

00:34:49,359 --> 00:34:51,760
scratch

00:34:59,599 --> 00:35:05,440
okay step through the prerequisites

00:35:11,760 --> 00:35:20,000
thoroughly read the eula

00:35:16,320 --> 00:35:20,000
and in a moment it'll be installed

00:35:22,000 --> 00:35:25,680
now this is just a windows c-sharp

00:35:24,320 --> 00:35:31,839
application

00:35:25,680 --> 00:35:31,839
that uses the csdk

00:35:34,480 --> 00:35:38,400
will add an identity that i just created

00:35:38,480 --> 00:35:46,400
downloads give it a second to register

00:35:44,720 --> 00:35:48,160
we'll turn it on of course so we'll come

00:35:46,400 --> 00:35:48,800
check to make sure hello dad see that

00:35:48,160 --> 00:35:52,160
there's hello

00:35:48,800 --> 00:35:54,480
zd poor daddy go ahead and close this

00:35:52,160 --> 00:35:59,760
down

00:35:54,480 --> 00:36:01,440
and we will come over here and now

00:35:59,760 --> 00:36:03,440
voila now we can actually access the

00:36:01,440 --> 00:36:06,800
resource using the windows

00:36:03,440 --> 00:36:06,800
sdk and windows tunneler

00:36:07,680 --> 00:36:12,400
thanks jeremy uh this is a very

00:36:10,400 --> 00:36:15,839
interesting use case where

00:36:12,400 --> 00:36:17,280
we are talking about a scenario where

00:36:15,839 --> 00:36:18,160
you have an existing brownfield

00:36:17,280 --> 00:36:19,760
application

00:36:18,160 --> 00:36:21,599
that wants to leverage zero truss

00:36:19,760 --> 00:36:23,680
connectivity models

00:36:21,599 --> 00:36:26,400
we have pre-built the application

00:36:23,680 --> 00:36:28,720
connectors or the tunnelers

00:36:26,400 --> 00:36:31,280
and you should be able to connect those

00:36:28,720 --> 00:36:33,200
brown field applications into the

00:36:31,280 --> 00:36:36,000
zero truss secure fabric environment

00:36:33,200 --> 00:36:38,640
powered by cd

00:36:36,000 --> 00:36:39,440
and that was a excellent demonstration

00:36:38,640 --> 00:36:42,800
based on

00:36:39,440 --> 00:36:45,920
windows applications now we will park

00:36:42,800 --> 00:36:47,280
for q a uh and you know i will respond

00:36:45,920 --> 00:36:50,320
to any questions that

00:36:47,280 --> 00:36:50,320
might come along the way

00:36:50,640 --> 00:36:55,839
thank you

00:36:57,680 --> 00:37:03,040
hi this is open to q a right now

00:37:03,599 --> 00:37:07,680
i do see some questions posted on how do

00:37:06,560 --> 00:37:12,240
we

00:37:07,680 --> 00:37:15,280
handle end-to-end encryption

00:37:12,240 --> 00:37:17,599
we do use rfc 7030

00:37:15,280 --> 00:37:18,480
enrollment over security secure

00:37:17,599 --> 00:37:22,079
transport

00:37:18,480 --> 00:37:25,599
and end-to-end encryption

00:37:22,079 --> 00:37:26,880
uh between the iot or the application

00:37:25,599 --> 00:37:30,000
endpoints to

00:37:26,880 --> 00:37:31,540
um to connect the apps

00:37:30,000 --> 00:37:34,480
themselves um

00:37:31,540 --> 00:37:37,839
[Music]

00:37:34,480 --> 00:37:42,000
yes there was a problem with the session

00:37:37,839 --> 00:37:45,280
recording i think uh um

00:37:42,000 --> 00:37:47,200
the oss team will make sure that

00:37:45,280 --> 00:37:49,200
the recording that would be posted would

00:37:47,200 --> 00:37:52,320
have um

00:37:49,200 --> 00:37:55,280
the original pieces around the demo and

00:37:52,320 --> 00:37:57,920
the slides would be made accessible to

00:37:55,280 --> 00:37:57,920
the audience

00:38:01,760 --> 00:38:09,839
so github repo if you go to https

00:38:06,599 --> 00:38:12,000
zt.dev you will find the

00:38:09,839 --> 00:38:12,880
urls that i shared during the

00:38:12,000 --> 00:38:16,240
presentation

00:38:12,880 --> 00:38:20,000
it's github.com forward slash open

00:38:16,240 --> 00:38:23,760
zt e m z iti

00:38:20,000 --> 00:38:26,960
uh please um start our repo

00:38:23,760 --> 00:38:29,680
and uh please share your thoughts on uh

00:38:26,960 --> 00:38:32,320
what you think about uh this particular

00:38:29,680 --> 00:38:34,960
open source project and we would like to

00:38:32,320 --> 00:38:36,400
invite audience to start actively

00:38:34,960 --> 00:38:40,720
participating and

00:38:36,400 --> 00:38:40,720
discussing with us in the open source

00:38:44,839 --> 00:38:50,560
forum

00:38:47,280 --> 00:38:52,400
i think those were the questions um

00:38:50,560 --> 00:38:54,880
thank you for attending the session

00:38:52,400 --> 00:38:56,800
again apologize for a few glitches we'll

00:38:54,880 --> 00:38:59,920
make sure that the recording

00:38:56,800 --> 00:39:02,720
does have uh the end-to-end slides and

00:38:59,920 --> 00:39:15,839
the demos that we have shared during

00:39:02,720 --> 00:39:15,839

YouTube URL: https://www.youtube.com/watch?v=2A9xww7hBm4


