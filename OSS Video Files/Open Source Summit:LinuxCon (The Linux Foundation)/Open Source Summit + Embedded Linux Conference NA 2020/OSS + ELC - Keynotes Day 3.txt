Title: OSS + ELC - Keynotes Day 3
Publication date: 2020-09-10
Playlist: Open Source Summit + Embedded Linux Conference NA 2020
Description: 
	Keynote: Cloud Native Projects: Powering Your Life in Ways You didnâ€™t Realize - Katelin Ramer, Business Development Manager, Cloud Native Computing Foundation - Presented by our sponsor Cloud Native Computing Foundation

Keynote: Open Source in Safety Critical Applications: The End Game - Kate Stewart, Senior Director of Strategic Programs, The Linux Foundation (Start Time: 6:05)

Keynote: Transformation Keys: Simplify, Modernize and Accelerate - Alan Clark, CTO of Directing Industry Initiatives & Emerging Standards, SUSE (Start Time: 27:15)

Keynote Lightning Talk: Wyliodrin STUDIO: From Prototyping to Small-scale Deployment - Ioana Culic, Teaching Assistant & Cosmin Daniel Radu, Teaching Assistant, Politehnica University of Bucharest (Start Time: 33:40)

Keynote Lightning Talk: OpenBMC: Migrating "Inside the Box" Communications from IPMI to PLDM - Deepak Kodihalli, Senior Engineer, IBM (Start Time: 44:50)

Keynote Lightning Talk: Unified Cloud Infrastructure Remediation in eBay - Daniel Qian, Software Engineer, eBay (Start Time: 57:00)

Keynote Lightning Talk: An Open-Source Model Zoo for Analyzing, Visualizing, and Comparing Deep Reinforcement Learning Agents - Joel Lehman, Senior Research Scientist, Uber (Start Time: 1:04:37)

Keynote: RISC-V: Instruction Sets Want to be Free - Krste Asanovic, Professor, Computer Science Division, University of California, Berkeley (Start Time: 1:15:14)
Captions: 
	00:00:00,620 --> 00:00:07,910
[Music]

00:00:08,639 --> 00:00:13,519
good morning everyone and welcome to

00:00:10,559 --> 00:00:14,559
day three of the open source summit a

00:00:13,519 --> 00:00:16,720
virtual event

00:00:14,559 --> 00:00:18,480
again we're sad we couldn't see you in

00:00:16,720 --> 00:00:19,039
austin but we're very happy you could

00:00:18,480 --> 00:00:21,920
join us

00:00:19,039 --> 00:00:22,480
virtually today for those of you who

00:00:21,920 --> 00:00:24,720
weren't

00:00:22,480 --> 00:00:26,240
here yesterday you know that due to

00:00:24,720 --> 00:00:28,640
technical difficulties we

00:00:26,240 --> 00:00:30,080
didn't quite get to see how cloud native

00:00:28,640 --> 00:00:32,320
projects power your life

00:00:30,080 --> 00:00:34,800
in more ways than you realize from our

00:00:32,320 --> 00:00:36,320
very own caitlin ramer

00:00:34,800 --> 00:00:38,160
so we're going to give it another try

00:00:36,320 --> 00:00:44,239
today please welcome

00:00:38,160 --> 00:00:46,000
caitlin ramer

00:00:44,239 --> 00:00:48,879
welcome to open source summit north

00:00:46,000 --> 00:00:51,360
america i'm caitlin ramer and i lead

00:00:48,879 --> 00:00:53,680
business development for cncf

00:00:51,360 --> 00:00:56,160
today i'm streaming to you directly from

00:00:53,680 --> 00:00:58,480
my quarantine kitchen

00:00:56,160 --> 00:00:59,199
being confined to my home over the past

00:00:58,480 --> 00:01:01,280
few months

00:00:59,199 --> 00:01:02,719
has sparked much creativity and really

00:01:01,280 --> 00:01:04,239
got me thinking

00:01:02,719 --> 00:01:06,400
where are all the places that cloud

00:01:04,239 --> 00:01:07,920
native projects are powering my life and

00:01:06,400 --> 00:01:10,080
yours

00:01:07,920 --> 00:01:12,080
do sourdough bread and cloud native have

00:01:10,080 --> 00:01:14,640
anything in common

00:01:12,080 --> 00:01:16,479
surprisingly the answer is yes you just

00:01:14,640 --> 00:01:19,200
have to know where to look

00:01:16,479 --> 00:01:21,680
enter pinterest powered by kubernetes

00:01:19,200 --> 00:01:23,840
and letting me realize my inner baker

00:01:21,680 --> 00:01:25,759
by pinning to my heart's content

00:01:23,840 --> 00:01:28,720
sourdough bread recipes

00:01:25,759 --> 00:01:31,280
did you know over 300 million people

00:01:28,720 --> 00:01:34,159
visit their platform every month

00:01:31,280 --> 00:01:36,960
to explore and experience more than 200

00:01:34,159 --> 00:01:38,720
billion ideas that have been saved

00:01:36,960 --> 00:01:40,400
it's got to be even more now with this

00:01:38,720 --> 00:01:42,479
sourdough trend

00:01:40,400 --> 00:01:44,000
today you'll learn about the benefits

00:01:42,479 --> 00:01:44,960
pinterest has seen in adopting

00:01:44,000 --> 00:01:47,520
kubernetes

00:01:44,960 --> 00:01:49,280
and where you can go to get involved and

00:01:47,520 --> 00:01:52,799
learn more

00:01:49,280 --> 00:01:54,320
let's jump in one of the main reasons

00:01:52,799 --> 00:01:56,320
pinterest chose kubernetes

00:01:54,320 --> 00:01:58,640
was because of its flexibility and

00:01:56,320 --> 00:02:01,200
extensive community support

00:01:58,640 --> 00:02:02,960
at peak pinterest runs thousands of pods

00:02:01,200 --> 00:02:04,960
on a few hundred notes

00:02:02,960 --> 00:02:06,880
by moving to kubernetes the team was

00:02:04,960 --> 00:02:09,280
able to build on-demand scaling

00:02:06,880 --> 00:02:11,280
and new failover policies in addition to

00:02:09,280 --> 00:02:13,599
simplifying the overall deployment

00:02:11,280 --> 00:02:16,239
and management of infrastructure they

00:02:13,599 --> 00:02:18,720
had some huge efficiency wins

00:02:16,239 --> 00:02:20,480
for instance the team reclaimed over 80

00:02:18,720 --> 00:02:23,920
percent of capacity of its jenkins

00:02:20,480 --> 00:02:26,080
kubernetes cluster during non-peak hours

00:02:23,920 --> 00:02:28,000
but that's not all let's hear directly

00:02:26,080 --> 00:02:30,239
from the pinterest engineering team on

00:02:28,000 --> 00:02:32,000
their move to kubernetes

00:02:30,239 --> 00:02:33,280
pinterest is the world's first visual

00:02:32,000 --> 00:02:35,599
discovery engine

00:02:33,280 --> 00:02:37,040
our mission is to help users discover

00:02:35,599 --> 00:02:39,200
and do things they love

00:02:37,040 --> 00:02:40,800
so the scale of infrastructure at

00:02:39,200 --> 00:02:43,680
pinterest is pretty enormous

00:02:40,800 --> 00:02:44,480
we have tens of thousands of servers we

00:02:43,680 --> 00:02:46,720
have

00:02:44,480 --> 00:02:48,800
300 megabytes of data and we have

00:02:46,720 --> 00:02:51,280
thousands of jobs and workflows

00:02:48,800 --> 00:02:52,640
that all power the pinterest experience

00:02:51,280 --> 00:02:54,560
pinterest has been on the cloud

00:02:52,640 --> 00:02:55,760
since day one and it became clear that

00:02:54,560 --> 00:02:57,519
as the company grew

00:02:55,760 --> 00:03:00,400
it was important for us to reduce the

00:02:57,519 --> 00:03:03,519
overhead of managing virtual machines

00:03:00,400 --> 00:03:05,519
thus we invested on kubernetes as the

00:03:03,519 --> 00:03:06,959
computer infrastructure so we can enable

00:03:05,519 --> 00:03:08,480
engineers to move fast

00:03:06,959 --> 00:03:10,400
and remove that overhead of managing

00:03:08,480 --> 00:03:11,599
machines by themselves the process

00:03:10,400 --> 00:03:13,760
involved from all the way

00:03:11,599 --> 00:03:16,159
evaluating how networking works to

00:03:13,760 --> 00:03:17,440
scheduling to operations and also

00:03:16,159 --> 00:03:19,280
community support

00:03:17,440 --> 00:03:21,440
we found that kubernetes definitely aged

00:03:19,280 --> 00:03:22,800
each one of those areas for us to make

00:03:21,440 --> 00:03:24,640
clear decisions to move forward with

00:03:22,800 --> 00:03:26,640
communities our motivation of joining

00:03:24,640 --> 00:03:29,120
cncf was largely because of the

00:03:26,640 --> 00:03:31,040
community that it gives us access to

00:03:29,120 --> 00:03:32,959
we are strong believers in open source

00:03:31,040 --> 00:03:34,000
software and want to engage and leverage

00:03:32,959 --> 00:03:37,920
the community

00:03:34,000 --> 00:03:37,920
to scale the systems that we are using

00:03:39,360 --> 00:03:45,120
how cool was that i hope this story has

00:03:42,879 --> 00:03:47,040
left you as inspired as me to learn more

00:03:45,120 --> 00:03:49,519
about how cloud native projects

00:03:47,040 --> 00:03:51,519
are powering your life every day and

00:03:49,519 --> 00:03:53,680
keeping you connected to the people and

00:03:51,519 --> 00:03:56,080
activities that you love

00:03:53,680 --> 00:03:58,159
come visit cncf today at our virtual

00:03:56,080 --> 00:04:00,319
booth and don't forget to sign up for

00:03:58,159 --> 00:04:03,599
kubecon cloudnativecon europe

00:04:00,319 --> 00:04:05,760
now virtual august 17th through the 20th

00:04:03,599 --> 00:04:07,840
let's keep cloud native connected and

00:04:05,760 --> 00:04:10,720
have a great conference

00:04:07,840 --> 00:04:10,720
moment of truth

00:04:11,120 --> 00:04:16,560
whoa all right it's perfectly toasted

00:04:17,359 --> 00:04:29,840
check that out

00:04:31,330 --> 00:04:34,500
[Music]

00:04:34,880 --> 00:04:40,320
thank you caitlin and that was some

00:04:36,880 --> 00:04:42,320
impressive cloud native sourdough skills

00:04:40,320 --> 00:04:44,880
uh and it's amazing to see that

00:04:42,320 --> 00:04:46,400
pinterest runs on kubernetes uh

00:04:44,880 --> 00:04:48,639
for those of you who have joined us

00:04:46,400 --> 00:04:49,600
three days in a row you may have noticed

00:04:48,639 --> 00:04:52,800
my hair got

00:04:49,600 --> 00:04:55,840
significantly shorter uh today

00:04:52,800 --> 00:04:57,600
uh my daughter and i did mutual haircuts

00:04:55,840 --> 00:04:59,280
uh yesterday and i believe

00:04:57,600 --> 00:05:01,199
my daughter was also my 12 year old

00:04:59,280 --> 00:05:04,800
daughter was also inspired by

00:05:01,199 --> 00:05:07,759
pinterest and for this this cut so

00:05:04,800 --> 00:05:09,360
uh we are grateful for all of the great

00:05:07,759 --> 00:05:12,400
cloud native technology out there that

00:05:09,360 --> 00:05:15,520
gives us access to tons of information

00:05:12,400 --> 00:05:16,080
our next speaker is going to be talking

00:05:15,520 --> 00:05:17,840
about

00:05:16,080 --> 00:05:19,120
another great way that open source

00:05:17,840 --> 00:05:21,360
technology is

00:05:19,120 --> 00:05:23,440
powering the world uh you know for the

00:05:21,360 --> 00:05:24,080
past 20 years we've seen open source

00:05:23,440 --> 00:05:26,560
emerge

00:05:24,080 --> 00:05:28,320
across all sorts of new technologies and

00:05:26,560 --> 00:05:30,160
capabilities

00:05:28,320 --> 00:05:32,240
and open source building blocks have

00:05:30,160 --> 00:05:35,919
really increasingly become

00:05:32,240 --> 00:05:37,919
a attractive base for

00:05:35,919 --> 00:05:39,440
all sorts of new hardware and

00:05:37,919 --> 00:05:41,600
interesting products

00:05:39,440 --> 00:05:43,520
recently there's been a trend for safety

00:05:41,600 --> 00:05:45,919
critical applications to now start

00:05:43,520 --> 00:05:47,280
considering using open source as well

00:05:45,919 --> 00:05:49,120
for those of you who don't know what

00:05:47,280 --> 00:05:52,160
safety critical is it's

00:05:49,120 --> 00:05:54,000
a system where the malfunction could

00:05:52,160 --> 00:05:56,880
result in one of the following

00:05:54,000 --> 00:05:58,800
death or injury to people loss or severe

00:05:56,880 --> 00:06:00,160
damage of equipment or property or

00:05:58,800 --> 00:06:01,919
environmental harm

00:06:00,160 --> 00:06:03,600
so the stakes are high when it comes to

00:06:01,919 --> 00:06:05,520
safety critical software

00:06:03,600 --> 00:06:06,639
our next speaker is going to look at

00:06:05,520 --> 00:06:08,479
some of the challenges

00:06:06,639 --> 00:06:10,000
and approaches to build trust and

00:06:08,479 --> 00:06:13,039
confidence in open source

00:06:10,000 --> 00:06:15,039
for use in safety critical software

00:06:13,039 --> 00:06:16,960
please welcome kate stewart senior

00:06:15,039 --> 00:06:20,000
director of strategic programs

00:06:16,960 --> 00:06:23,129
at the linux foundation

00:06:20,000 --> 00:06:23,129
[Music]

00:06:25,280 --> 00:06:28,800
good morning my name is kate stewart and

00:06:27,680 --> 00:06:30,080
i'm a director here at the linux

00:06:28,800 --> 00:06:32,080
foundation

00:06:30,080 --> 00:06:33,360
and i'm here to tell you a bit more

00:06:32,080 --> 00:06:34,880
about what we're sort of doing with the

00:06:33,360 --> 00:06:36,800
safety

00:06:34,880 --> 00:06:38,080
projects and the projects that have an

00:06:36,800 --> 00:06:39,280
element of how do we deal with the

00:06:38,080 --> 00:06:41,680
safety

00:06:39,280 --> 00:06:44,800
considerations and certifications and

00:06:41,680 --> 00:06:47,360
making sure open source is safe

00:06:44,800 --> 00:06:48,240
i've been around software in various

00:06:47,360 --> 00:06:50,880
roles

00:06:48,240 --> 00:06:52,240
uh for over 30 years now and been a

00:06:50,880 --> 00:06:55,360
developer manager

00:06:52,240 --> 00:06:57,199
director um and have looked at various

00:06:55,360 --> 00:06:59,759
roadmap issues and so forth

00:06:57,199 --> 00:07:01,680
and this survey this area is

00:06:59,759 --> 00:07:04,080
particularly interesting to me

00:07:01,680 --> 00:07:05,919
however as i go through these slides if

00:07:04,080 --> 00:07:07,840
you've got any questions

00:07:05,919 --> 00:07:10,240
feel free to reach out in the chat or an

00:07:07,840 --> 00:07:11,280
email and i will try to answer them as

00:07:10,240 --> 00:07:15,120
we go

00:07:11,280 --> 00:07:15,120
and with that um

00:07:15,199 --> 00:07:20,240
one of my first memories as a kid um

00:07:18,400 --> 00:07:22,720
was my father pulling me downstairs and

00:07:20,240 --> 00:07:25,520
asked and pointing out that there was

00:07:22,720 --> 00:07:27,599
uh the moon landing happening and so you

00:07:25,520 --> 00:07:28,080
know i've got this very vivid memory of

00:07:27,599 --> 00:07:30,000
watching

00:07:28,080 --> 00:07:31,120
men land on the moon and the man would

00:07:30,000 --> 00:07:31,759
have been landed on the moon without

00:07:31,120 --> 00:07:33,440
this woman

00:07:31,759 --> 00:07:35,120
um margaret hamilton who actually

00:07:33,440 --> 00:07:38,400
programmed the software

00:07:35,120 --> 00:07:41,680
and did the testing behind the lunar

00:07:38,400 --> 00:07:42,960
the apollo 11 program

00:07:41,680 --> 00:07:44,879
and you can find her source on the

00:07:42,960 --> 00:07:46,639
internet and the actual size of the

00:07:44,879 --> 00:07:49,280
source when it's compiled

00:07:46,639 --> 00:07:50,800
is much smaller than what we see in iot

00:07:49,280 --> 00:07:54,240
devices today

00:07:50,800 --> 00:07:59,120
so there's been a lot of change

00:07:54,240 --> 00:08:00,319
but the principles that she started

00:07:59,120 --> 00:08:02,240
and some of the discussions that

00:08:00,319 --> 00:08:05,440
happened after that

00:08:02,240 --> 00:08:09,120
revolved around making sure that we

00:08:05,440 --> 00:08:12,080
had things safe for them um

00:08:09,120 --> 00:08:12,960
basically this slide was taken from ixy

00:08:12,080 --> 00:08:15,840
um

00:08:12,960 --> 00:08:17,599
when she gave a keynote in 2018 and that

00:08:15,840 --> 00:08:20,479
was the first time i saw her live

00:08:17,599 --> 00:08:21,599
and that definitely left an impression

00:08:20,479 --> 00:08:25,199
and one of the key

00:08:21,599 --> 00:08:27,199
things in this slide is the fact that um

00:08:25,199 --> 00:08:28,960
you know they had to have man-made

00:08:27,199 --> 00:08:31,120
software and astronauts lives were at

00:08:28,960 --> 00:08:32,719
stake so it had to work the first time

00:08:31,120 --> 00:08:34,800
and so this is a very high level of

00:08:32,719 --> 00:08:39,440
scrutiny and a high level of making sure

00:08:34,800 --> 00:08:43,120
what we are doing um and so

00:08:39,440 --> 00:08:44,880
what we've got is we've got a lot of

00:08:43,120 --> 00:08:47,040
methodologies that have evolved since

00:08:44,880 --> 00:08:48,640
that time to make sure that software is

00:08:47,040 --> 00:08:51,120
safe to use

00:08:48,640 --> 00:08:52,959
and what we're having to look at now is

00:08:51,120 --> 00:08:56,640
the fact that

00:08:52,959 --> 00:08:58,080
open source is now the foundation for

00:08:56,640 --> 00:09:01,360
innovation and so

00:08:58,080 --> 00:09:03,600
over 99 of the code bases um

00:09:01,360 --> 00:09:05,680
in 2019 contained open source components

00:09:03,600 --> 00:09:08,240
from the black ducks recent report

00:09:05,680 --> 00:09:10,640
double joe growth in the components the

00:09:08,240 --> 00:09:13,279
innovations coming out of open source

00:09:10,640 --> 00:09:14,880
and so we can't ignore anymore how we

00:09:13,279 --> 00:09:16,320
can use open source and safety critical

00:09:14,880 --> 00:09:21,120
applications

00:09:16,320 --> 00:09:24,320
because they're there um

00:09:21,120 --> 00:09:24,320
you know we've seen

00:09:24,560 --> 00:09:29,200
um in the last month um we had the

00:09:28,080 --> 00:09:31,839
spacex

00:09:29,200 --> 00:09:33,360
uh rockets going up to the space station

00:09:31,839 --> 00:09:34,959
and the dragon capsule

00:09:33,360 --> 00:09:38,320
the rockets themselves have linux the

00:09:34,959 --> 00:09:41,519
dragon capsule has linux in it

00:09:38,320 --> 00:09:43,040
and other open source we also

00:09:41,519 --> 00:09:45,200
are hearing in the news all the time

00:09:43,040 --> 00:09:48,240
right now about autonomous driving

00:09:45,200 --> 00:09:50,240
and the automation of you know gas pumps

00:09:48,240 --> 00:09:52,160
electric pumps sensors signals

00:09:50,240 --> 00:09:54,800
so forth these are all being done and

00:09:52,160 --> 00:09:57,440
fueled by open source today

00:09:54,800 --> 00:09:59,120
and then we also have things

00:09:57,440 --> 00:10:02,720
applications coming in

00:09:59,120 --> 00:10:05,120
into the medical space again

00:10:02,720 --> 00:10:06,880
this is a spreadsheet that shows all of

00:10:05,120 --> 00:10:09,920
the open source projects

00:10:06,880 --> 00:10:12,399
that are being looked at uh for helping

00:10:09,920 --> 00:10:13,360
with creating an open source ventilator

00:10:12,399 --> 00:10:14,959
um and so

00:10:13,360 --> 00:10:16,640
there's source available for all of

00:10:14,959 --> 00:10:18,079
these projects they fit the definition

00:10:16,640 --> 00:10:19,440
of open source

00:10:18,079 --> 00:10:20,959
and they have you know various

00:10:19,440 --> 00:10:22,320
constraints and there's you know teams

00:10:20,959 --> 00:10:23,680
of researchers looking at these and

00:10:22,320 --> 00:10:25,760
working to advance them

00:10:23,680 --> 00:10:27,440
but you can find this whole list of

00:10:25,760 --> 00:10:28,959
projects out there and it's all open

00:10:27,440 --> 00:10:30,240
source so the innovation that we're

00:10:28,959 --> 00:10:31,279
seeing in this tremendous rate of

00:10:30,240 --> 00:10:34,000
innovation

00:10:31,279 --> 00:10:36,079
is coming from open source and so at

00:10:34,000 --> 00:10:38,480
this point in time

00:10:36,079 --> 00:10:40,399
you know open source is already being

00:10:38,480 --> 00:10:42,240
used in safety critical applications

00:10:40,399 --> 00:10:44,160
the challenge right now for us is you

00:10:42,240 --> 00:10:46,640
know how do we actually get it to

00:10:44,160 --> 00:10:48,720
be safely you know how do we basically

00:10:46,640 --> 00:10:52,240
get that same level of

00:10:48,720 --> 00:10:55,440
uh concern and scrutiny put on to it

00:10:52,240 --> 00:10:57,120
that we had had in the past or

00:10:55,440 --> 00:10:58,959
how do we basically build up the trust

00:10:57,120 --> 00:11:01,040
that we can use it safely in these

00:10:58,959 --> 00:11:02,959
you know applications where people lives

00:11:01,040 --> 00:11:06,000
are at stake literally

00:11:02,959 --> 00:11:07,519
so at the lynx foundation what we're

00:11:06,000 --> 00:11:08,800
doing right now is we have a variety of

00:11:07,519 --> 00:11:10,320
projects

00:11:08,800 --> 00:11:11,440
that are looking towards figuring out

00:11:10,320 --> 00:11:13,680
how they can go after safety

00:11:11,440 --> 00:11:15,760
certification

00:11:13,680 --> 00:11:18,240
there's a spectrum of them and so they

00:11:15,760 --> 00:11:20,399
vary in terms of the footprint size

00:11:18,240 --> 00:11:21,519
as well as you know how many components

00:11:20,399 --> 00:11:22,560
they're trying to bring in what they're

00:11:21,519 --> 00:11:24,959
trying to do

00:11:22,560 --> 00:11:27,040
i'm going to look today at sort of two

00:11:24,959 --> 00:11:28,959
rough ends of the spectrum

00:11:27,040 --> 00:11:30,880
zephyr is looking at a very very small

00:11:28,959 --> 00:11:33,120
footprint for sensors

00:11:30,880 --> 00:11:35,200
and for uh you know very constrained

00:11:33,120 --> 00:11:37,839
memory and power devices

00:11:35,200 --> 00:11:39,839
and this is linux enabling linux and

00:11:37,839 --> 00:11:42,079
safety critical applications

00:11:39,839 --> 00:11:42,880
and so what we're going to do is take a

00:11:42,079 --> 00:11:44,240
look at

00:11:42,880 --> 00:11:46,079
the different approaches and then

00:11:44,240 --> 00:11:49,839
there's these other projects like cell

00:11:46,079 --> 00:11:51,680
4 acorns and civil infrastructure and

00:11:49,839 --> 00:11:53,440
automatically linux that are using linux

00:11:51,680 --> 00:11:56,560
with

00:11:53,440 --> 00:11:58,000
components in addition to the linux and

00:11:56,560 --> 00:11:58,800
are trying to make a safe systems as

00:11:58,000 --> 00:12:00,560
well

00:11:58,800 --> 00:12:02,480
so there's a full spectrum that are

00:12:00,560 --> 00:12:03,200
emerging of projects that you want to

00:12:02,480 --> 00:12:05,760
use

00:12:03,200 --> 00:12:06,959
um be used in safety critical

00:12:05,760 --> 00:12:08,959
environments

00:12:06,959 --> 00:12:12,800
and so what we need to figure out is how

00:12:08,959 --> 00:12:12,800
can we start to tackle this problem

00:12:14,079 --> 00:12:18,720
so as people know i guess linux has

00:12:17,440 --> 00:12:19,920
grown into be one of the most important

00:12:18,720 --> 00:12:21,040
open source projects in the world so

00:12:19,920 --> 00:12:22,240
it's a good place to start for your

00:12:21,040 --> 00:12:25,279
analysis

00:12:22,240 --> 00:12:26,880
um as of 2019 i think 69

00:12:25,279 --> 00:12:29,120
of the embedded systems are actually

00:12:26,880 --> 00:12:32,160
running linux today already

00:12:29,120 --> 00:12:34,000
and uh what we've got

00:12:32,160 --> 00:12:35,839
in the rest of it is you know good

00:12:34,000 --> 00:12:36,720
places for collaboration because again

00:12:35,839 --> 00:12:38,800
these are

00:12:36,720 --> 00:12:41,519
applications that tend to get used in

00:12:38,800 --> 00:12:43,279
devices that interact with people

00:12:41,519 --> 00:12:44,720
or you know various machine and so forth

00:12:43,279 --> 00:12:47,279
and have elements of safety that have to

00:12:44,720 --> 00:12:47,279
be considered

00:12:48,160 --> 00:12:52,959
so the elisa project got started at the

00:12:50,079 --> 00:12:57,680
linux foundation in last year

00:12:52,959 --> 00:12:57,680
in february of 2019 and

00:12:58,000 --> 00:13:02,399
the key insight for this project is that

00:13:01,040 --> 00:13:05,200
you know to assess if your system is

00:13:02,399 --> 00:13:08,240
safe you need to understand your system

00:13:05,200 --> 00:13:10,399
linux as its own code base is

00:13:08,240 --> 00:13:12,720
you know has a lot of history behind it

00:13:10,399 --> 00:13:13,760
but and has a lot of you know pros and

00:13:12,720 --> 00:13:15,360
cons and there's a whole bunch of

00:13:13,760 --> 00:13:16,720
argumentation it's a tremendously moving

00:13:15,360 --> 00:13:18,480
fast-moving code base

00:13:16,720 --> 00:13:20,240
but you have to understand your system

00:13:18,480 --> 00:13:21,519
and how linux is being used in your

00:13:20,240 --> 00:13:23,440
system

00:13:21,519 --> 00:13:26,720
before you can do an assessment and

00:13:23,440 --> 00:13:26,720
that's one of the key insights

00:13:30,160 --> 00:13:35,279
and so as you understand linux there's

00:13:33,680 --> 00:13:38,000
three different points

00:13:35,279 --> 00:13:39,600
you need to sort of how to understand

00:13:38,000 --> 00:13:41,839
how to configure linux

00:13:39,600 --> 00:13:43,440
understand the different subsystems of

00:13:41,839 --> 00:13:44,800
links that you're using

00:13:43,440 --> 00:13:47,600
and then understand how your system

00:13:44,800 --> 00:13:49,600
around you is interfacing into linux

00:13:47,600 --> 00:13:50,720
but you have to make sure that linux is

00:13:49,600 --> 00:13:54,720
based

00:13:50,720 --> 00:13:56,639
on what you're needing it to go for

00:13:54,720 --> 00:13:58,959
and you're using it in an effective way

00:13:56,639 --> 00:14:01,920
for this considerations

00:13:58,959 --> 00:14:04,639
um a lot of the safety standards are

00:14:01,920 --> 00:14:06,079
basically looking for you to establish

00:14:04,639 --> 00:14:09,120
guidance on quality and so forth and

00:14:06,079 --> 00:14:12,000
they've evolved from a different

00:14:09,120 --> 00:14:12,000
time and place

00:14:13,040 --> 00:14:17,440
what they've been doing though is um

00:14:16,480 --> 00:14:19,680
they've come in from a different

00:14:17,440 --> 00:14:22,320
development model and linux has

00:14:19,680 --> 00:14:24,000
basically been coming in as well for a

00:14:22,320 --> 00:14:25,760
different development model

00:14:24,000 --> 00:14:28,160
and so lynx has been continuously

00:14:25,760 --> 00:14:29,120
developed for over 30 almost 23 years 29

00:14:28,160 --> 00:14:31,519
anyhow

00:14:29,120 --> 00:14:32,720
and um there's continuous process

00:14:31,519 --> 00:14:35,760
improvements in place

00:14:32,720 --> 00:14:37,279
um there's you know there's

00:14:35,760 --> 00:14:38,800
evidence available already for what the

00:14:37,279 --> 00:14:39,680
quality processes are in the process

00:14:38,800 --> 00:14:42,639
improvements

00:14:39,680 --> 00:14:42,639
and you know

00:14:42,800 --> 00:14:47,279
initial indicators initial indicators

00:14:45,680 --> 00:14:48,639
say that we can actually look at getting

00:14:47,279 --> 00:14:50,000
you know a reasonable level

00:14:48,639 --> 00:14:51,839
from the evidence that's there already

00:14:50,000 --> 00:14:53,360
with linux the question is making sure

00:14:51,839 --> 00:14:55,120
we all consolidate on it and move it

00:14:53,360 --> 00:14:58,160
forward

00:14:55,120 --> 00:15:00,240
um so lisa's mission is to define and

00:14:58,160 --> 00:15:02,079
maintain a set of

00:15:00,240 --> 00:15:04,560
elements processes and tools that can be

00:15:02,079 --> 00:15:06,000
incorporated into specific linux based

00:15:04,560 --> 00:15:06,639
safety critical systems to make it

00:15:06,000 --> 00:15:10,079
amenable

00:15:06,639 --> 00:15:12,480
to safety certification this is not

00:15:10,079 --> 00:15:14,160
a way of actually creating a safe linux

00:15:12,480 --> 00:15:16,480
distro we'll let other people

00:15:14,160 --> 00:15:17,519
work with that um because people have

00:15:16,480 --> 00:15:19,199
business cases around that what we're

00:15:17,519 --> 00:15:22,399
trying to do is make sure

00:15:19,199 --> 00:15:23,519
that it is possible to create a system

00:15:22,399 --> 00:15:25,040
that has linux in it

00:15:23,519 --> 00:15:26,639
that you can make the right

00:15:25,040 --> 00:15:28,959
argumentation that it's going to be safe

00:15:26,639 --> 00:15:30,399
for use

00:15:28,959 --> 00:15:32,720
and this is what this this group is

00:15:30,399 --> 00:15:32,720
doing

00:15:32,880 --> 00:15:36,000
and so we're trying to close the gaps

00:15:34,480 --> 00:15:38,399
between what's there

00:15:36,000 --> 00:15:40,240
today and what we need to do there's a

00:15:38,399 --> 00:15:43,360
kernel development process working group

00:15:40,240 --> 00:15:46,160
um that's trying to identify safe

00:15:43,360 --> 00:15:46,959
uh process reference requirements and

00:15:46,160 --> 00:15:48,880
then they assess

00:15:46,959 --> 00:15:50,959
uh what's in linux you know what's there

00:15:48,880 --> 00:15:52,959
today what testing's happening

00:15:50,959 --> 00:15:55,040
what requirements can you extract from

00:15:52,959 --> 00:15:57,920
your mail lists things like that

00:15:55,040 --> 00:15:59,759
and then there's gaps so um proposing

00:15:57,920 --> 00:16:01,440
improvements to fill these caps

00:15:59,759 --> 00:16:04,160
there's also a safety architecture

00:16:01,440 --> 00:16:06,240
working group that's looking to identify

00:16:04,160 --> 00:16:08,560
the linux software in terms of chunks

00:16:06,240 --> 00:16:10,480
and like memory subsystems schedulers

00:16:08,560 --> 00:16:13,040
things like that that have roles to play

00:16:10,480 --> 00:16:15,199
in safety critical argumentation

00:16:13,040 --> 00:16:16,240
and then make sure that the appropriate

00:16:15,199 --> 00:16:18,800
information

00:16:16,240 --> 00:16:20,240
is in place what we're looking at is you

00:16:18,800 --> 00:16:22,639
know

00:16:20,240 --> 00:16:23,440
feeding in from the safety standards

00:16:22,639 --> 00:16:25,600
worlds

00:16:23,440 --> 00:16:27,759
what they need to see as evidence and

00:16:25,600 --> 00:16:29,600
then upstreaming what we need to to the

00:16:27,759 --> 00:16:31,680
kernel community to help make it easier

00:16:29,600 --> 00:16:33,120
to satisfy as well as learning what's

00:16:31,680 --> 00:16:34,480
happening in the kernel community and

00:16:33,120 --> 00:16:37,680
bringing that back into the

00:16:34,480 --> 00:16:40,639
argumentation for systems

00:16:37,680 --> 00:16:41,519
and so those are what we're doing right

00:16:40,639 --> 00:16:43,120
in the kernel and then

00:16:41,519 --> 00:16:44,800
what we need to do is prove that path

00:16:43,120 --> 00:16:46,880
what's happening on the outside

00:16:44,800 --> 00:16:48,240
and in that sense the we've got a couple

00:16:46,880 --> 00:16:49,759
of working groups in this one one's

00:16:48,240 --> 00:16:51,040
looking at medical devices one of which

00:16:49,759 --> 00:16:52,160
is looking at the open source

00:16:51,040 --> 00:16:54,000
ventilators

00:16:52,160 --> 00:16:55,440
another automotive working group is

00:16:54,000 --> 00:16:57,120
spinning up and that's looking at what's

00:16:55,440 --> 00:16:58,240
happening in the telltales

00:16:57,120 --> 00:17:00,560
pretty much if there's a group of people

00:16:58,240 --> 00:17:01,839
that want to work on an application as

00:17:00,560 --> 00:17:04,640
long as there's source

00:17:01,839 --> 00:17:06,319
available for it that's not under nda we

00:17:04,640 --> 00:17:07,520
can work with them to source in a group

00:17:06,319 --> 00:17:08,400
to start having some studies

00:17:07,520 --> 00:17:11,039
if they have people they want to

00:17:08,400 --> 00:17:11,039
collaborate with

00:17:12,079 --> 00:17:19,280
and the key for this one is that it

00:17:15,919 --> 00:17:23,039
this project is about a collaboration

00:17:19,280 --> 00:17:26,400
it is not about um engineering

00:17:23,039 --> 00:17:28,319
your specific systems and self-worth um

00:17:26,400 --> 00:17:29,440
the lim there's limits in this project

00:17:28,319 --> 00:17:30,960
in the sense that we're not going to be

00:17:29,440 --> 00:17:32,080
you know engineering a sense to be safe

00:17:30,960 --> 00:17:33,200
we're not gonna be creating a safety

00:17:32,080 --> 00:17:36,799
distro

00:17:33,200 --> 00:17:38,080
um but we are trying to um

00:17:36,799 --> 00:17:39,200
and we're not you know relieving any one

00:17:38,080 --> 00:17:40,320
of their legal obligations or

00:17:39,200 --> 00:17:42,000
responsibilities but we're trying to

00:17:40,320 --> 00:17:42,799
provide a path forward so we can share

00:17:42,000 --> 00:17:44,559
the effort

00:17:42,799 --> 00:17:46,000
of coming up with the evidence and the

00:17:44,559 --> 00:17:49,120
argumentation and build some common

00:17:46,000 --> 00:17:49,120
understanding in the industry

00:17:50,240 --> 00:17:53,760
and so once we have to get to this point

00:17:52,000 --> 00:17:55,840
where we have some success um

00:17:53,760 --> 00:17:57,679
we're going to probably have these

00:17:55,840 --> 00:17:59,840
assets available

00:17:57,679 --> 00:18:02,160
for the processes and the features and

00:17:59,840 --> 00:18:03,520
you know next level of information down

00:18:02,160 --> 00:18:06,240
we show some reference systems from

00:18:03,520 --> 00:18:07,600
those use cases and we should also have

00:18:06,240 --> 00:18:09,360
built up the knowledge in the

00:18:07,600 --> 00:18:10,640
open source community a lot further

00:18:09,360 --> 00:18:11,679
right now there's a lot of

00:18:10,640 --> 00:18:13,919
knowledge about what we have to do with

00:18:11,679 --> 00:18:15,360
security and we kind of need to get to

00:18:13,919 --> 00:18:17,360
the same level of knowledge

00:18:15,360 --> 00:18:18,640
in the kernel community about safety and

00:18:17,360 --> 00:18:21,280
dependability

00:18:18,640 --> 00:18:22,720
and so and this ties in nicely with

00:18:21,280 --> 00:18:24,400
existing testing efforts so we'll be

00:18:22,720 --> 00:18:25,520
continuing to build on that and extend

00:18:24,400 --> 00:18:27,120
from there

00:18:25,520 --> 00:18:29,840
but that's what the elisa project is

00:18:27,120 --> 00:18:31,600
looking at right now

00:18:29,840 --> 00:18:33,039
and you know our upstream here is the

00:18:31,600 --> 00:18:35,840
kernel community itself in the

00:18:33,039 --> 00:18:37,600
linux kernel so getting up and you know

00:18:35,840 --> 00:18:38,640
improving the documentations improving

00:18:37,600 --> 00:18:39,919
the testing

00:18:38,640 --> 00:18:41,760
and you know making the evidence more

00:18:39,919 --> 00:18:43,039
accessible the bugs more accessible

00:18:41,760 --> 00:18:44,799
these are all things that

00:18:43,039 --> 00:18:46,720
we need to do in order to build up the

00:18:44,799 --> 00:18:48,400
argumentation for safety

00:18:46,720 --> 00:18:49,919
so that's sort of one approach which is

00:18:48,400 --> 00:18:51,520
you know quite different

00:18:49,919 --> 00:18:53,520
than you think of from a traditional

00:18:51,520 --> 00:18:54,559
certification but this is pretty much

00:18:53,520 --> 00:18:55,360
how we're gonna have to look at getting

00:18:54,559 --> 00:18:57,840
linux to work

00:18:55,360 --> 00:18:57,840
effectively

00:18:58,799 --> 00:19:01,840
um if you are interested in learning

00:19:00,240 --> 00:19:02,559
more um we'll be having we have virtual

00:19:01,840 --> 00:19:04,400
workshops

00:19:02,559 --> 00:19:06,240
right now in these current times and

00:19:04,400 --> 00:19:08,640
we'll be scheduling one

00:19:06,240 --> 00:19:09,760
in july but we put the schedule out in

00:19:08,640 --> 00:19:11,440
july for when we're going to be having

00:19:09,760 --> 00:19:12,880
it probably in august or september it's

00:19:11,440 --> 00:19:15,600
still being discussed

00:19:12,880 --> 00:19:17,760
and there's our links to our website and

00:19:15,600 --> 00:19:19,600
the mail lists and their sources

00:19:17,760 --> 00:19:21,200
and so if you've got any you know

00:19:19,600 --> 00:19:24,240
information please join the mail list

00:19:21,200 --> 00:19:26,960
and start asking questions or join in on

00:19:24,240 --> 00:19:26,960
some of the meetings

00:19:27,200 --> 00:19:29,760
the other project i want to chat about

00:19:28,559 --> 00:19:30,640
is on the complete other side of the

00:19:29,760 --> 00:19:33,679
spectrum

00:19:30,640 --> 00:19:36,480
and this is zephyr which is another os

00:19:33,679 --> 00:19:38,240
it's been designed as a project to be

00:19:36,480 --> 00:19:40,720
used when linux is just too small with

00:19:38,240 --> 00:19:42,640
links is too big and so you links right

00:19:40,720 --> 00:19:45,440
now doesn't get below 2 meg

00:19:42,640 --> 00:19:46,880
and so zephyr serve like you know 8k to

00:19:45,440 --> 00:19:48,480
512k type of space

00:19:46,880 --> 00:19:52,000
and you just compile in exactly what you

00:19:48,480 --> 00:19:53,280
need and you have a very limited stack

00:19:52,000 --> 00:19:55,440
and a fairly amount good amount of

00:19:53,280 --> 00:19:57,440
functionality

00:19:55,440 --> 00:20:00,559
it started in 2016 and it was literally

00:19:57,440 --> 00:20:03,679
designed as an open source project

00:20:00,559 --> 00:20:05,440
to be an rtos kernel and it was built

00:20:03,679 --> 00:20:07,520
with safety and security in mind

00:20:05,440 --> 00:20:08,799
literally right from the start we

00:20:07,520 --> 00:20:11,280
pretty much knew we were going to go

00:20:08,799 --> 00:20:13,120
after the safety as a goal with this

00:20:11,280 --> 00:20:14,080
project and so we have a community that

00:20:13,120 --> 00:20:15,919
is acceptable

00:20:14,080 --> 00:20:18,000
to making coding you know coding style

00:20:15,919 --> 00:20:22,320
changes and

00:20:18,000 --> 00:20:25,520
doing things in a fashion that's more um

00:20:22,320 --> 00:20:27,440
appropriate i guess or more familiar to

00:20:25,520 --> 00:20:29,760
the safety assessors

00:20:27,440 --> 00:20:32,000
and so this project is going to be going

00:20:29,760 --> 00:20:35,520
after certification as well

00:20:32,000 --> 00:20:37,360
um and it's going to 61 508 and so

00:20:35,520 --> 00:20:38,559
what we're doing with this one is

00:20:37,360 --> 00:20:41,200
looking towards

00:20:38,559 --> 00:20:42,240
um putting the right pieces in place and

00:20:41,200 --> 00:20:44,240
then

00:20:42,240 --> 00:20:45,440
working with assessors directly to make

00:20:44,240 --> 00:20:49,200
sure that we have

00:20:45,440 --> 00:20:51,600
a reference system and available

00:20:49,200 --> 00:20:53,200
to for people to use as models um we're

00:20:51,600 --> 00:20:54,159
working with assessors in the elisa

00:20:53,200 --> 00:20:55,840
project as well

00:20:54,159 --> 00:20:58,159
and they're active participants in the

00:20:55,840 --> 00:20:59,600
groups uh so we're we're getting that

00:20:58,159 --> 00:21:00,960
that set of inputs we've got

00:20:59,600 --> 00:21:02,799
inputs from us you know the safety

00:21:00,960 --> 00:21:05,600
community the assessors

00:21:02,799 --> 00:21:06,320
we've got the developers participating

00:21:05,600 --> 00:21:07,679
um

00:21:06,320 --> 00:21:09,840
and then we've got management and

00:21:07,679 --> 00:21:11,679
business people and so these are all

00:21:09,840 --> 00:21:17,200
necessary to have a good discussion

00:21:11,679 --> 00:21:19,039
and figure out a pragmatic solution here

00:21:17,200 --> 00:21:20,720
in zephyr right from the development

00:21:19,039 --> 00:21:23,280
we've been looking at quality as pretty

00:21:20,720 --> 00:21:25,120
much a mandatory requirement

00:21:23,280 --> 00:21:27,600
there's various code scanning that's

00:21:25,120 --> 00:21:30,480
going on already

00:21:27,600 --> 00:21:33,760
we're using caution now like the linux

00:21:30,480 --> 00:21:35,600
kernel is for doing some of the

00:21:33,760 --> 00:21:37,039
interfaces and checking the interfaces

00:21:35,600 --> 00:21:38,559
and trying to find bugs that way we're

00:21:37,039 --> 00:21:39,679
also trying to use coverity like the

00:21:38,559 --> 00:21:41,520
kernel does

00:21:39,679 --> 00:21:43,280
both projects are sort of looking at

00:21:41,520 --> 00:21:44,559
running automation

00:21:43,280 --> 00:21:46,480
and then we're looking at a variety of

00:21:44,559 --> 00:21:47,840
other static analysis tools

00:21:46,480 --> 00:21:50,000
to apply here and we're actually

00:21:47,840 --> 00:21:51,840
formally moving uh the code base over to

00:21:50,000 --> 00:21:54,559
be miserable compliant

00:21:51,840 --> 00:21:55,280
um because that's pretty much what the

00:21:54,559 --> 00:21:56,880
safety

00:21:55,280 --> 00:21:58,720
assessors expect and so there's a whole

00:21:56,880 --> 00:22:00,080
set of coding guidelines that the tse

00:21:58,720 --> 00:22:03,360
has been working on

00:22:00,080 --> 00:22:03,360
and are being deployed this year

00:22:08,400 --> 00:22:11,679
zephyr itself though is actually a

00:22:09,760 --> 00:22:13,440
pretty complete stack at this point now

00:22:11,679 --> 00:22:15,520
there it's highly configurable it's

00:22:13,440 --> 00:22:17,200
modular it's using the

00:22:15,520 --> 00:22:19,120
device tree like the kernel does it's

00:22:17,200 --> 00:22:20,960
using k config for figuring out you know

00:22:19,120 --> 00:22:23,840
what options are being used

00:22:20,960 --> 00:22:25,679
and how about you compiling together and

00:22:23,840 --> 00:22:27,039
as you can see it has a pretty complete

00:22:25,679 --> 00:22:27,919
stack what we're trying to do in this

00:22:27,039 --> 00:22:29,679
case though is we're going to be

00:22:27,919 --> 00:22:32,559
starting with the subset

00:22:29,679 --> 00:22:33,679
and then building our way out and this

00:22:32,559 --> 00:22:36,880
is how we're going to try to handle

00:22:33,679 --> 00:22:36,880
control the change rates

00:22:39,679 --> 00:22:42,880
in terms of the code repositories um

00:22:41,679 --> 00:22:45,440
zephyr

00:22:42,880 --> 00:22:46,720
um has a development tree and that's

00:22:45,440 --> 00:22:47,760
where all the development is happening

00:22:46,720 --> 00:22:49,280
we're sort of

00:22:47,760 --> 00:22:50,960
aiming getting close to about two

00:22:49,280 --> 00:22:52,320
commits an hour there now uh for

00:22:50,960 --> 00:22:53,600
comparison the links controls about nine

00:22:52,320 --> 00:22:56,559
commits per hour

00:22:53,600 --> 00:22:58,240
into their upstream um but every two

00:22:56,559 --> 00:23:01,600
years we're cutting an lts

00:22:58,240 --> 00:23:03,360
or a long-term support and from that

00:23:01,600 --> 00:23:05,600
we're taking a subset

00:23:03,360 --> 00:23:07,039
of the modules and those are what we're

00:23:05,600 --> 00:23:09,360
going to be taking and working

00:23:07,039 --> 00:23:12,080
through the argumentation for safety

00:23:09,360 --> 00:23:13,600
certification

00:23:12,080 --> 00:23:15,120
and in this way we're trying to balance

00:23:13,600 --> 00:23:16,480
the change that has to happen so quick

00:23:15,120 --> 00:23:18,559
in the upstream to keep the community

00:23:16,480 --> 00:23:20,880
interested and engaged versus

00:23:18,559 --> 00:23:22,320
what we have to do to observe hone in

00:23:20,880 --> 00:23:23,039
the argumentation and be able to take it

00:23:22,320 --> 00:23:26,080
through

00:23:23,039 --> 00:23:28,159
a more formal audit

00:23:26,080 --> 00:23:31,440
the auditable branch that's there right

00:23:28,159 --> 00:23:33,919
now is based on a subset

00:23:31,440 --> 00:23:35,200
of the kernels modules and we've got the

00:23:33,919 --> 00:23:36,480
safety and security committees both

00:23:35,200 --> 00:23:39,760
looking at it and talking about it with

00:23:36,480 --> 00:23:41,679
the tsc before it moves forward

00:23:39,760 --> 00:23:43,600
and the actual subset that we're looking

00:23:41,679 --> 00:23:45,919
at for 61.508 right now which is our

00:23:43,600 --> 00:23:48,400
first target for zephyr

00:23:45,919 --> 00:23:50,720
is illustrated here in blue and so we're

00:23:48,400 --> 00:23:54,880
looking at some of the key interfaces

00:23:50,720 --> 00:23:56,640
um and we're basically working our way

00:23:54,880 --> 00:24:00,159
forward with that

00:23:56,640 --> 00:24:00,559
getting these components the right level

00:24:00,159 --> 00:24:02,240
of

00:24:00,559 --> 00:24:04,000
traceability requirements following the

00:24:02,240 --> 00:24:05,919
v model

00:24:04,000 --> 00:24:07,039
and doing things in a more way that the

00:24:05,919 --> 00:24:10,400
safety people

00:24:07,039 --> 00:24:10,400
are expecting to see the evidence

00:24:12,400 --> 00:24:15,919
and so for zephyr's roadmap we're sort

00:24:14,480 --> 00:24:17,840
of looking right now

00:24:15,919 --> 00:24:19,600
um we're working on getting that mizrah

00:24:17,840 --> 00:24:21,679
code base we're getting the code

00:24:19,600 --> 00:24:23,120
coding guidelines adapted one of our

00:24:21,679 --> 00:24:24,640
members is working on an accelerated

00:24:23,120 --> 00:24:25,440
path of taking one of their products

00:24:24,640 --> 00:24:27,039
through

00:24:25,440 --> 00:24:28,640
and next year when we come up with our

00:24:27,039 --> 00:24:30,400
next lts um

00:24:28,640 --> 00:24:32,559
we expect to be able to take that one

00:24:30,400 --> 00:24:33,600
through getting the certification so we

00:24:32,559 --> 00:24:35,679
start working with the

00:24:33,600 --> 00:24:37,520
certification authorities right now on

00:24:35,679 --> 00:24:39,760
this one and are busy working our plans

00:24:37,520 --> 00:24:40,720
up for that portion

00:24:39,760 --> 00:24:42,240
so that's kind of what we're doing with

00:24:40,720 --> 00:24:45,279
zephyr and if you're interested in

00:24:42,240 --> 00:24:45,279
learning more about zephyr

00:24:45,440 --> 00:24:49,039
you can sort of find the information on

00:24:47,440 --> 00:24:51,120
these various

00:24:49,039 --> 00:24:53,279
um mostly codes on github there's

00:24:51,120 --> 00:24:54,880
various websites and mail lists for this

00:24:53,279 --> 00:24:56,320
project as well as we have a very active

00:24:54,880 --> 00:24:58,480
slack channel

00:24:56,320 --> 00:24:59,440
so if you have any interest by all means

00:24:58,480 --> 00:25:02,480
you're welcome to come

00:24:59,440 --> 00:25:02,480
in and participate

00:25:02,720 --> 00:25:07,440
and then just want to quickly give you a

00:25:06,559 --> 00:25:10,080
summary

00:25:07,440 --> 00:25:10,080
oops hello

00:25:10,960 --> 00:25:15,120
um you know i think we have pretty

00:25:13,840 --> 00:25:16,960
strong evidence we've got to figure out

00:25:15,120 --> 00:25:18,559
how to make it coexist we need to figure

00:25:16,960 --> 00:25:19,919
out how to

00:25:18,559 --> 00:25:21,679
make open source and the safety

00:25:19,919 --> 00:25:23,200
certifications um

00:25:21,679 --> 00:25:25,039
exist at scale so people can have the

00:25:23,200 --> 00:25:28,400
confidence that they can depend

00:25:25,039 --> 00:25:31,200
on the code and trust it um we need to

00:25:28,400 --> 00:25:33,120
basically start looking at um getting

00:25:31,200 --> 00:25:34,640
this quality at the project level at the

00:25:33,120 --> 00:25:36,400
open source project level because once

00:25:34,640 --> 00:25:38,080
you get these people creating products

00:25:36,400 --> 00:25:39,600
and integrating everything together

00:25:38,080 --> 00:25:41,120
they're depending on these open source

00:25:39,600 --> 00:25:42,640
components and so we need to make sure

00:25:41,120 --> 00:25:44,159
that they have good foundations to build

00:25:42,640 --> 00:25:45,039
off of

00:25:44,159 --> 00:25:47,360
and then the other thing we're going to

00:25:45,039 --> 00:25:50,320
have to be working on is managing

00:25:47,360 --> 00:25:52,080
the developer and certification

00:25:50,320 --> 00:25:53,039
authority expectations as we're working

00:25:52,080 --> 00:25:54,799
with this

00:25:53,039 --> 00:25:56,000
certainly the certification authority

00:25:54,799 --> 00:25:57,279
guys are looking at this and trying to

00:25:56,000 --> 00:25:58,640
figure out okay how do we deal with this

00:25:57,279 --> 00:26:01,279
open source

00:25:58,640 --> 00:26:02,640
and the development community needs to

00:26:01,279 --> 00:26:04,240
understand that some of these pieces of

00:26:02,640 --> 00:26:06,000
evidence and testing have reasons behind

00:26:04,240 --> 00:26:07,360
them and how do we basically make it

00:26:06,000 --> 00:26:09,360
efficient for everyone how can we

00:26:07,360 --> 00:26:11,120
automate as much of this as we can

00:26:09,360 --> 00:26:12,480
so that we can all move forward together

00:26:11,120 --> 00:26:14,559
so these are the sorts of

00:26:12,480 --> 00:26:15,919
you know a little sample of what the

00:26:14,559 --> 00:26:16,720
those two ends of the spectrum are like

00:26:15,919 --> 00:26:18,159
and there's a lot of different

00:26:16,720 --> 00:26:19,039
approaches that are variants of these

00:26:18,159 --> 00:26:20,960
things

00:26:19,039 --> 00:26:22,000
in that middle portion of the project so

00:26:20,960 --> 00:26:23,520
there's a lot of different approaches

00:26:22,000 --> 00:26:24,799
being taken and i guess

00:26:23,520 --> 00:26:27,919
we'll see in about a year's time where

00:26:24,799 --> 00:26:30,559
we're going and which ones are out there

00:26:27,919 --> 00:26:32,080
um and with that i just like to say

00:26:30,559 --> 00:26:34,240
thank you very much

00:26:32,080 --> 00:26:36,480
and if you if you want more information

00:26:34,240 --> 00:26:39,279
about these projects the links are here

00:26:36,480 --> 00:26:40,880
feel free to contact me by email or by

00:26:39,279 --> 00:26:43,440
chat

00:26:40,880 --> 00:26:43,440
and thank you

00:26:45,440 --> 00:26:49,360
thanks kate and again if you have any

00:26:47,679 --> 00:26:52,640
questions feel free to

00:26:49,360 --> 00:26:54,720
submit them to kate in the chat and uh

00:26:52,640 --> 00:26:56,720
we really it's nice to see the

00:26:54,720 --> 00:26:59,840
intersection of

00:26:56,720 --> 00:27:02,880
standards safety critical guidelines

00:26:59,840 --> 00:27:04,799
open source all now coming together and

00:27:02,880 --> 00:27:06,240
reaching state of maturity that they can

00:27:04,799 --> 00:27:08,559
be used in

00:27:06,240 --> 00:27:10,000
uh mission critical systems uh

00:27:08,559 --> 00:27:12,880
automotive devices

00:27:10,000 --> 00:27:15,279
medical devices and so forth so uh thank

00:27:12,880 --> 00:27:18,840
you kate for all of your great work

00:27:15,279 --> 00:27:22,000
uh our next speaker is alan clark the

00:27:18,840 --> 00:27:24,080
cto of uh industry initiatives and

00:27:22,000 --> 00:27:26,000
emerging standards at suse

00:27:24,080 --> 00:27:27,440
uh today's global headlines are

00:27:26,000 --> 00:27:28,240
definitely changing the way we do

00:27:27,440 --> 00:27:29,919
business

00:27:28,240 --> 00:27:31,520
and that change is being reflected in

00:27:29,919 --> 00:27:33,440
the manner in which modern software is

00:27:31,520 --> 00:27:36,640
being defined distributed

00:27:33,440 --> 00:27:37,840
and deployed alan will discuss the keys

00:27:36,640 --> 00:27:49,200
to this transfer

00:27:37,840 --> 00:27:51,200
transformation please welcome alan clark

00:27:49,200 --> 00:27:54,000
hello my name is alan clark and i'm a

00:27:51,200 --> 00:27:56,000
member of the suse cto office

00:27:54,000 --> 00:27:58,080
you've heard today a lot of global

00:27:56,000 --> 00:28:00,559
headlines being mentioned in the

00:27:58,080 --> 00:28:02,480
sessions that we've listened to

00:28:00,559 --> 00:28:04,480
today's global headlines are truly

00:28:02,480 --> 00:28:05,520
driving a change in the way we do

00:28:04,480 --> 00:28:07,279
business

00:28:05,520 --> 00:28:09,120
and that change is being reflected in

00:28:07,279 --> 00:28:10,480
the manner in which modern software is

00:28:09,120 --> 00:28:14,240
being defined

00:28:10,480 --> 00:28:17,120
developed distributed and deployed

00:28:14,240 --> 00:28:18,240
in today's world software is truly

00:28:17,120 --> 00:28:21,279
transforming

00:28:18,240 --> 00:28:23,120
today's business infrastructure

00:28:21,279 --> 00:28:24,880
there are three keys to be successful in

00:28:23,120 --> 00:28:29,039
this transformation

00:28:24,880 --> 00:28:31,200
simplify modernize and accelerate

00:28:29,039 --> 00:28:33,200
in just a couple minutes we have let's

00:28:31,200 --> 00:28:34,240
highlight how recent technologies are

00:28:33,200 --> 00:28:38,480
crucial

00:28:34,240 --> 00:28:40,640
to these three transformational keys

00:28:38,480 --> 00:28:42,399
note that every company is built on some

00:28:40,640 --> 00:28:44,640
type of advantage

00:28:42,399 --> 00:28:46,159
discovered inefficiencies unfulfilled

00:28:44,640 --> 00:28:49,840
market desires

00:28:46,159 --> 00:28:52,960
or regulatory mandates lasting companies

00:28:49,840 --> 00:28:56,640
are built on structural advantages

00:28:52,960 --> 00:28:58,559
however sometimes our myopic views

00:28:56,640 --> 00:29:00,640
limit us from seeing our own company's

00:28:58,559 --> 00:29:03,840
i.t structural weaknesses

00:29:00,640 --> 00:29:04,159
for example a report through suse states

00:29:03,840 --> 00:29:06,480
that

00:29:04,159 --> 00:29:08,240
75 percent of businesses consider

00:29:06,480 --> 00:29:11,279
themselves to be

00:29:08,240 --> 00:29:13,760
customer-centric while only 30 percent

00:29:11,279 --> 00:29:15,760
of customers believe that businesses are

00:29:13,760 --> 00:29:17,919
customer-centric perhaps you've seen

00:29:15,760 --> 00:29:20,080
this yourself

00:29:17,919 --> 00:29:22,320
non-response or disruption is a key

00:29:20,080 --> 00:29:23,120
contributor to customer perception of a

00:29:22,320 --> 00:29:26,320
company

00:29:23,120 --> 00:29:29,600
being non-customer-centric

00:29:26,320 --> 00:29:31,360
the report also notes that one in three

00:29:29,600 --> 00:29:32,399
companies have reported at least one

00:29:31,360 --> 00:29:34,880
disaster

00:29:32,399 --> 00:29:36,399
or a significant disruption during the

00:29:34,880 --> 00:29:38,480
last five years of which they were

00:29:36,399 --> 00:29:41,120
caused by hardware failures

00:29:38,480 --> 00:29:42,240
software failures telecom failures data

00:29:41,120 --> 00:29:46,320
corruption

00:29:42,240 --> 00:29:46,320
failed upgrades or human error

00:29:46,559 --> 00:29:51,200
global events such as covet 19 are

00:29:48,799 --> 00:29:52,559
forcing companies to rapidly modify

00:29:51,200 --> 00:29:55,679
their future plans

00:29:52,559 --> 00:29:57,360
and to deploy solutions today as a rapid

00:29:55,679 --> 00:29:59,520
response to changes

00:29:57,360 --> 00:30:01,200
such as social distancing and touchless

00:29:59,520 --> 00:30:02,799
contact

00:30:01,200 --> 00:30:05,120
it's easy to get caught up with the

00:30:02,799 --> 00:30:06,960
immediate deploying siloed point

00:30:05,120 --> 00:30:09,679
solutions to rapidly demonstrate

00:30:06,960 --> 00:30:12,799
quick response it's very tempting to do

00:30:09,679 --> 00:30:15,039
such roll outs given today's pressures

00:30:12,799 --> 00:30:17,039
but a quick short term success could be

00:30:15,039 --> 00:30:18,240
the beginnings of a long-term i.t

00:30:17,039 --> 00:30:20,000
headache

00:30:18,240 --> 00:30:21,360
and an unsure foundation for the

00:30:20,000 --> 00:30:24,000
business

00:30:21,360 --> 00:30:25,840
building silos quickly becomes untenable

00:30:24,000 --> 00:30:28,720
and complex

00:30:25,840 --> 00:30:29,760
such complexity builds unreliability

00:30:28,720 --> 00:30:33,279
hence

00:30:29,760 --> 00:30:36,399
leading to customer dissatisfaction

00:30:33,279 --> 00:30:38,640
but quick does not have to be unsure

00:30:36,399 --> 00:30:41,840
a solid architectural advantage starts

00:30:38,640 --> 00:30:44,000
with a solid foundation

00:30:41,840 --> 00:30:46,399
with today's modern rapid application

00:30:44,000 --> 00:30:49,520
development and deployment platforms

00:30:46,399 --> 00:30:52,960
rapid doesn't have to be fragile or

00:30:49,520 --> 00:30:55,679
insecure you can deploy apps in a simple

00:30:52,960 --> 00:30:57,600
fashion on modern architectures

00:30:55,679 --> 00:30:59,360
the key is to build on top of a

00:30:57,600 --> 00:31:02,840
foundation that enables

00:30:59,360 --> 00:31:05,519
simplicity modernization and

00:31:02,840 --> 00:31:06,000
acceleration susa's vision is to be the

00:31:05,519 --> 00:31:08,799
most

00:31:06,000 --> 00:31:11,600
innovative trusted leader in providing

00:31:08,799 --> 00:31:15,120
open source solutions and technologies

00:31:11,600 --> 00:31:17,840
for the enterprise to simplify modernize

00:31:15,120 --> 00:31:19,360
and accelerate traditional and cloud

00:31:17,840 --> 00:31:22,399
native applications

00:31:19,360 --> 00:31:23,919
across the it landscape in any

00:31:22,399 --> 00:31:25,919
environment

00:31:23,919 --> 00:31:28,000
this vision is built on a solid

00:31:25,919 --> 00:31:29,440
foundation with over 25 years of

00:31:28,000 --> 00:31:32,080
experience and knowledge

00:31:29,440 --> 00:31:34,559
for delivering enterprise ready secure

00:31:32,080 --> 00:31:37,360
and trusted open source solutions

00:31:34,559 --> 00:31:38,240
that enable developers one to rapidly

00:31:37,360 --> 00:31:41,600
create

00:31:38,240 --> 00:31:43,519
and accelerate delivery to leverage

00:31:41,600 --> 00:31:44,880
modern container-based platforms and

00:31:43,519 --> 00:31:48,080
three use

00:31:44,880 --> 00:31:50,000
tools such as artificial intelligence

00:31:48,080 --> 00:31:52,720
and for the operators to deploy such

00:31:50,000 --> 00:31:54,320
solutions across their domains

00:31:52,720 --> 00:31:56,000
in patterns that will provide their

00:31:54,320 --> 00:31:58,880
customer a robust

00:31:56,000 --> 00:32:00,159
and a reliable experience this implies

00:31:58,880 --> 00:32:02,480
that solutions can

00:32:00,159 --> 00:32:03,200
and will extend from the edge to the

00:32:02,480 --> 00:32:06,240
core

00:32:03,200 --> 00:32:08,000
and to the cloud operators can

00:32:06,240 --> 00:32:10,480
and want to manage workloads where and

00:32:08,000 --> 00:32:12,480
how it makes sense including

00:32:10,480 --> 00:32:14,399
leveraging different architectures but

00:32:12,480 --> 00:32:16,159
with a common code base

00:32:14,399 --> 00:32:18,960
this enables developers to take

00:32:16,159 --> 00:32:23,279
advantage of features such as vgpus

00:32:18,960 --> 00:32:26,840
high power cpus or very secure i o

00:32:23,279 --> 00:32:28,960
it also leverages consistency across the

00:32:26,840 --> 00:32:32,320
architectures how does this

00:32:28,960 --> 00:32:34,080
impact being customer-centric consider

00:32:32,320 --> 00:32:36,159
what this means in terms of customer

00:32:34,080 --> 00:32:38,720
response

00:32:36,159 --> 00:32:39,760
downtime reduces customer response

00:32:38,720 --> 00:32:42,559
reboot cycles

00:32:39,760 --> 00:32:45,200
are very long in a customer's eyes this

00:32:42,559 --> 00:32:47,519
means that up times are paramount

00:32:45,200 --> 00:32:48,720
but response to vulnerabilities are just

00:32:47,519 --> 00:32:52,240
as critical

00:32:48,720 --> 00:32:54,480
do these conflict not today

00:32:52,240 --> 00:32:55,519
with powerful technology such as live

00:32:54,480 --> 00:32:58,240
patching

00:32:55,519 --> 00:33:00,640
it can patch the vulnerabilities without

00:32:58,240 --> 00:33:03,600
incurring downtime

00:33:00,640 --> 00:33:06,159
but the key point here is consistency

00:33:03,600 --> 00:33:08,720
across the architectures

00:33:06,159 --> 00:33:09,200
which means that this capability needs

00:33:08,720 --> 00:33:11,760
to be

00:33:09,200 --> 00:33:13,200
available on all architectures and

00:33:11,760 --> 00:33:16,159
that's true today

00:33:13,200 --> 00:33:17,120
for example slee now deploys live

00:33:16,159 --> 00:33:20,240
patching

00:33:17,120 --> 00:33:20,240
on the z platform

00:33:20,720 --> 00:33:26,720
as you are as you are well aware the

00:33:23,760 --> 00:33:30,159
growth of open source

00:33:26,720 --> 00:33:31,840
is growing exponentially today

00:33:30,159 --> 00:33:34,399
but consuming open source can be

00:33:31,840 --> 00:33:34,399
cumbersome

00:33:34,480 --> 00:33:38,880
but through seuss's package hub popular

00:33:37,120 --> 00:33:40,080
community open source software is

00:33:38,880 --> 00:33:42,559
pre-built

00:33:40,080 --> 00:33:44,399
and ready for use not just for community

00:33:42,559 --> 00:33:46,159
linux distributions

00:33:44,399 --> 00:33:48,159
but also for your enterprise

00:33:46,159 --> 00:33:49,840
distributions such as suse linux

00:33:48,159 --> 00:33:51,840
enterprise

00:33:49,840 --> 00:33:53,919
package hub is where the enterprise

00:33:51,840 --> 00:33:56,559
meets the community

00:33:53,919 --> 00:33:57,279
for the enterprise users community

00:33:56,559 --> 00:33:59,200
packages

00:33:57,279 --> 00:34:00,880
are available for suicide linux

00:33:59,200 --> 00:34:03,919
enterprise

00:34:00,880 --> 00:34:07,039
enterprise users now participate in

00:34:03,919 --> 00:34:09,839
communities open source innovation

00:34:07,039 --> 00:34:10,560
and it provides an easy access to

00:34:09,839 --> 00:34:14,399
standard

00:34:10,560 --> 00:34:16,159
open source tools for community users

00:34:14,399 --> 00:34:19,280
it means that they have access to over

00:34:16,159 --> 00:34:21,200
nine thousand community packages

00:34:19,280 --> 00:34:23,440
that are maintained and supported by the

00:34:21,200 --> 00:34:26,159
community

00:34:23,440 --> 00:34:27,440
these community-maintained factory-built

00:34:26,159 --> 00:34:29,839
high-quality

00:34:27,440 --> 00:34:31,520
up-to-date latest technologies

00:34:29,839 --> 00:34:34,240
up-to-date packages

00:34:31,520 --> 00:34:35,359
are built by the opensuse community for

00:34:34,240 --> 00:34:38,560
community use

00:34:35,359 --> 00:34:38,560
and for use on

00:34:38,960 --> 00:34:46,240
community distributions such as

00:34:42,240 --> 00:34:48,720
opensuse tumbleweed and opensuse leap

00:34:46,240 --> 00:34:50,079
it's very easy to move from community to

00:34:48,720 --> 00:34:52,879
enterprise

00:34:50,079 --> 00:34:53,919
in it in place migration from suicide

00:34:52,879 --> 00:34:57,680
leap

00:34:53,919 --> 00:35:01,520
to for example suicide linux enterprise

00:34:57,680 --> 00:35:03,440
this means that it's now devops friendly

00:35:01,520 --> 00:35:05,119
development and projects can use the

00:35:03,440 --> 00:35:07,359
community distribution

00:35:05,119 --> 00:35:10,240
while operations can run in an

00:35:07,359 --> 00:35:12,480
enterprise environment

00:35:10,240 --> 00:35:13,359
so to summarize what i've quickly

00:35:12,480 --> 00:35:16,400
conveyed

00:35:13,359 --> 00:35:18,960
is that every company your company is

00:35:16,400 --> 00:35:20,480
built on some type of advantage

00:35:18,960 --> 00:35:22,079
lasting companies are built on

00:35:20,480 --> 00:35:25,200
structural advantages

00:35:22,079 --> 00:35:26,640
the key is to build that advantage on a

00:35:25,200 --> 00:35:29,760
foundation that

00:35:26,640 --> 00:35:34,160
enables simplicity modernization

00:35:29,760 --> 00:35:34,160
and acceleration thank you

00:35:37,520 --> 00:35:40,880
thank you alan uh great talk and now

00:35:40,240 --> 00:35:43,839
we've got

00:35:40,880 --> 00:35:44,560
four great lightning talks uh starting

00:35:43,839 --> 00:35:48,000
with the talk

00:35:44,560 --> 00:35:51,680
about the wylo dream studio

00:35:48,000 --> 00:35:54,960
please welcome oana kulich

00:35:51,680 --> 00:35:59,070
uh cosmin radu teaching assistance at

00:35:54,960 --> 00:36:06,000
polytechnica university in bucharest

00:35:59,070 --> 00:36:07,680
[Music]

00:36:06,000 --> 00:36:09,200
hello and thank you jim for the

00:36:07,680 --> 00:36:11,599
introduction

00:36:09,200 --> 00:36:12,960
so today we are going to talk about

00:36:11,599 --> 00:36:15,680
biology studio

00:36:12,960 --> 00:36:16,560
a platform that helps you build iot

00:36:15,680 --> 00:36:18,400
prototypes

00:36:16,560 --> 00:36:20,720
and turn them into small scale

00:36:18,400 --> 00:36:23,119
deployments

00:36:20,720 --> 00:36:24,720
to start with a quick word some quick

00:36:23,119 --> 00:36:27,440
words about us

00:36:24,720 --> 00:36:29,680
we are ivana in cosmin i am a teaching

00:36:27,440 --> 00:36:31,280
assistant at the polytechnica university

00:36:29,680 --> 00:36:34,000
of bucharest and the current

00:36:31,280 --> 00:36:36,160
currently a phd candidate there and i've

00:36:34,000 --> 00:36:37,839
been working with iot technologies for

00:36:36,160 --> 00:36:39,920
the last seven years

00:36:37,839 --> 00:36:41,920
cosmin is my student and he has been

00:36:39,920 --> 00:36:43,040
building iot applications during the

00:36:41,920 --> 00:36:44,640
last three years

00:36:43,040 --> 00:36:46,880
biology studio being one of his

00:36:44,640 --> 00:36:49,200
applications

00:36:46,880 --> 00:36:50,160
a little bit about the context so we are

00:36:49,200 --> 00:36:52,560
all aware that

00:36:50,160 --> 00:36:55,040
objects around us are becoming smart we

00:36:52,560 --> 00:36:57,040
have our refrigerators or our vacuum

00:36:55,040 --> 00:36:57,599
cleaners connected to the internet and

00:36:57,040 --> 00:37:00,800
running

00:36:57,599 --> 00:37:03,440
software and in this context

00:37:00,800 --> 00:37:05,440
we have fields such as automotive or

00:37:03,440 --> 00:37:06,560
mechanics relying more and more on

00:37:05,440 --> 00:37:09,680
applications being

00:37:06,560 --> 00:37:10,560
built and on software being deployed and

00:37:09,680 --> 00:37:12,960
what is more

00:37:10,560 --> 00:37:15,040
these applications are usually not built

00:37:12,960 --> 00:37:16,000
by computer scientists and computer

00:37:15,040 --> 00:37:18,079
engineers

00:37:16,000 --> 00:37:19,520
but by specialists in that specific

00:37:18,079 --> 00:37:22,079
domains

00:37:19,520 --> 00:37:23,280
as a result there is a need for tools

00:37:22,079 --> 00:37:25,599
especially designed

00:37:23,280 --> 00:37:26,960
for these people who are not very into

00:37:25,599 --> 00:37:28,960
computers

00:37:26,960 --> 00:37:31,760
and we have the arduino as a very good

00:37:28,960 --> 00:37:35,520
example the arduino aims to be

00:37:31,760 --> 00:37:38,480
on prototyping device that targets

00:37:35,520 --> 00:37:40,400
people who are not computer specialists

00:37:38,480 --> 00:37:43,200
and as we can all see it really

00:37:40,400 --> 00:37:46,079
succeeded in doing this

00:37:43,200 --> 00:37:47,040
however the arduino has some limitations

00:37:46,079 --> 00:37:49,280
and this is why

00:37:47,040 --> 00:37:51,359
in many of the devices of the iot

00:37:49,280 --> 00:37:53,280
devices nowadays we can find

00:37:51,359 --> 00:37:54,560
raspberry pi or raspberry pi like

00:37:53,280 --> 00:37:57,040
devices

00:37:54,560 --> 00:37:58,320
these are actually computers and they

00:37:57,040 --> 00:37:59,920
are really easy to use

00:37:58,320 --> 00:38:01,359
when you use them as computers when you

00:37:59,920 --> 00:38:02,560
connect them to a screen or to a

00:38:01,359 --> 00:38:04,800
keyboard

00:38:02,560 --> 00:38:06,800
but things can get a bit trickier when

00:38:04,800 --> 00:38:09,520
you connect them inside the compute

00:38:06,800 --> 00:38:10,960
inside the robot or place them on top of

00:38:09,520 --> 00:38:13,599
a building

00:38:10,960 --> 00:38:15,200
in this case usually what we would do is

00:38:13,599 --> 00:38:18,160
to connect remotely to it

00:38:15,200 --> 00:38:18,720
either via ssh and we would have like a

00:38:18,160 --> 00:38:20,720
shell

00:38:18,720 --> 00:38:22,720
interface which is not very intuitive

00:38:20,720 --> 00:38:24,880
and run some commands

00:38:22,720 --> 00:38:26,160
and when it comes to actually deploying

00:38:24,880 --> 00:38:28,560
code on the device

00:38:26,160 --> 00:38:30,400
things can get even bit even more

00:38:28,560 --> 00:38:32,079
trickier

00:38:30,400 --> 00:38:34,400
and while for people who are willing to

00:38:32,079 --> 00:38:35,200
computers and into programming this can

00:38:34,400 --> 00:38:38,079
be just

00:38:35,200 --> 00:38:38,480
fun and another challenge if we think

00:38:38,079 --> 00:38:40,800
about

00:38:38,480 --> 00:38:41,680
students or persons who just want to

00:38:40,800 --> 00:38:43,760
build some

00:38:41,680 --> 00:38:45,040
fine arts projects or just control some

00:38:43,760 --> 00:38:48,160
mechanical stuff

00:38:45,040 --> 00:38:49,920
this can get really intimidating and

00:38:48,160 --> 00:38:52,880
stop them from actually building the

00:38:49,920 --> 00:38:56,320
products that they want aim to build

00:38:52,880 --> 00:38:59,040
as a result we created biology studio a

00:38:56,320 --> 00:38:59,920
small project that aims to help both

00:38:59,040 --> 00:39:02,400
experienced

00:38:59,920 --> 00:39:02,960
and non-experienced people in building

00:39:02,400 --> 00:39:05,599
iot

00:39:02,960 --> 00:39:07,040
applications and further on i will let

00:39:05,599 --> 00:39:10,240
cos mean describe the

00:39:07,040 --> 00:39:12,800
interface a bit yes

00:39:10,240 --> 00:39:14,160
the interface is pretty simple you have

00:39:12,800 --> 00:39:15,760
the main file you where

00:39:14,160 --> 00:39:17,520
you can write the code that you want to

00:39:15,760 --> 00:39:19,040
run on a device and a couple of

00:39:17,520 --> 00:39:21,680
configuration options

00:39:19,040 --> 00:39:23,359
however our aim is to keep it intuitive

00:39:21,680 --> 00:39:25,359
and don't get user in plenty of

00:39:23,359 --> 00:39:27,200
configurations

00:39:25,359 --> 00:39:29,359
local devices can connect to the

00:39:27,200 --> 00:39:30,720
platform either by a serial connection

00:39:29,359 --> 00:39:33,040
or via the network

00:39:30,720 --> 00:39:34,880
when you hit the connect button the

00:39:33,040 --> 00:39:36,800
application will scan the network

00:39:34,880 --> 00:39:38,880
and do usb ports for all the connected

00:39:36,800 --> 00:39:41,359
devices in addition

00:39:38,880 --> 00:39:42,240
you can connect to remote device via the

00:39:41,359 --> 00:39:44,000
internet

00:39:42,240 --> 00:39:46,079
for this while adrian studio will

00:39:44,000 --> 00:39:48,720
generate a connection token

00:39:46,079 --> 00:39:50,880
that you need to copy in the device's

00:39:48,720 --> 00:39:53,200
memory

00:39:50,880 --> 00:39:54,720
to run the application you just need to

00:39:53,200 --> 00:39:56,800
hit the run button

00:39:54,720 --> 00:39:58,000
and while agent studio will deploy the

00:39:56,800 --> 00:40:01,920
source code

00:39:58,000 --> 00:40:01,920
on the device and launch it

00:40:02,079 --> 00:40:05,520
while adrian studio is available in

00:40:03,920 --> 00:40:07,119
several languages

00:40:05,520 --> 00:40:10,000
and of course we are looking for

00:40:07,119 --> 00:40:12,480
translators to make it even more

00:40:10,000 --> 00:40:13,920
even more accessible this is especially

00:40:12,480 --> 00:40:16,000
for young users

00:40:13,920 --> 00:40:18,079
who are more comfortable with an

00:40:16,000 --> 00:40:19,839
application that is in their mother

00:40:18,079 --> 00:40:23,440
tongue

00:40:19,839 --> 00:40:27,760
for advanced users we have

00:40:23,440 --> 00:40:30,880
a project 3 that with

00:40:27,760 --> 00:40:32,240
which will help them to build multiple

00:40:30,880 --> 00:40:34,640
file applications

00:40:32,240 --> 00:40:35,520
this enables them to manage complex

00:40:34,640 --> 00:40:38,160
projects

00:40:35,520 --> 00:40:41,040
with modules and external functions they

00:40:38,160 --> 00:40:43,440
can also generate a custom make file

00:40:41,040 --> 00:40:44,560
so they can describe how the application

00:40:43,440 --> 00:40:47,200
should start

00:40:44,560 --> 00:40:47,839
basically when they will hit the run

00:40:47,200 --> 00:40:50,000
button

00:40:47,839 --> 00:40:51,599
while adding studio will run the make

00:40:50,000 --> 00:40:53,839
run command

00:40:51,599 --> 00:40:54,880
so they can customize how the process

00:40:53,839 --> 00:40:56,800
would be

00:40:54,880 --> 00:40:59,599
they also have direct access to the

00:40:56,800 --> 00:41:02,400
device via a shell

00:40:59,599 --> 00:41:02,880
we also implemented the device simulator

00:41:02,400 --> 00:41:05,359
so

00:41:02,880 --> 00:41:06,000
users can run a very simple application

00:41:05,359 --> 00:41:08,480
without

00:41:06,000 --> 00:41:11,520
an actual device this is to help them to

00:41:08,480 --> 00:41:13,599
test some very basic functions

00:41:11,520 --> 00:41:15,920
besides the simulator we also

00:41:13,599 --> 00:41:18,960
implemented raspberry pi os

00:41:15,920 --> 00:41:20,880
emulator using quiemo this allows you to

00:41:18,960 --> 00:41:24,400
run more complex applications

00:41:20,880 --> 00:41:26,000
using only your personal computer

00:41:24,400 --> 00:41:27,440
now that we have talked about the

00:41:26,000 --> 00:41:29,200
prototyping part

00:41:27,440 --> 00:41:30,560
at a certain point you need to take your

00:41:29,200 --> 00:41:32,400
projects further

00:41:30,560 --> 00:41:33,680
and deploy them as products that other

00:41:32,400 --> 00:41:35,440
can also use

00:41:33,680 --> 00:41:37,040
the arduino team is taking the first

00:41:35,440 --> 00:41:40,640
steps towards

00:41:37,040 --> 00:41:43,680
this direction by launching arduino pro

00:41:40,640 --> 00:41:45,440
and so did we we added the capability to

00:41:43,680 --> 00:41:47,520
build stable applications that can be

00:41:45,440 --> 00:41:50,480
deployed on multiple devices

00:41:47,520 --> 00:41:51,760
we did this using containers so when you

00:41:50,480 --> 00:41:53,839
create your project

00:41:51,760 --> 00:41:55,280
you have the option to edit the docker

00:41:53,839 --> 00:41:57,520
file

00:41:55,280 --> 00:41:59,520
and customize the way that your

00:41:57,520 --> 00:42:02,079
application will start

00:41:59,520 --> 00:42:02,960
when you hit deploy the code is copied

00:42:02,079 --> 00:42:05,119
on the device

00:42:02,960 --> 00:42:06,000
and the container image is created and

00:42:05,119 --> 00:42:08,480
launched

00:42:06,000 --> 00:42:10,240
if the devices reboots or if the

00:42:08,480 --> 00:42:14,079
application crashes

00:42:10,240 --> 00:42:14,079
it will automatically restart

00:42:14,800 --> 00:42:18,720
okay so here we have some of our users

00:42:17,440 --> 00:42:22,640
most of them are educational

00:42:18,720 --> 00:42:24,400
institutions in europe and in us

00:42:22,640 --> 00:42:26,560
and a little bit about the technical

00:42:24,400 --> 00:42:28,960
implementation the platform relies on

00:42:26,560 --> 00:42:30,160
plugins so it's very easy to extend and

00:42:28,960 --> 00:42:32,079
anybody can bring

00:42:30,160 --> 00:42:34,319
new functionalities without having to

00:42:32,079 --> 00:42:36,400
interfere with the previous code base

00:42:34,319 --> 00:42:39,040
we currently have plugins for most of

00:42:36,400 --> 00:42:41,280
the functionalities presented before

00:42:39,040 --> 00:42:42,880
we can see the supported programming

00:42:41,280 --> 00:42:46,160
languages for instance we have

00:42:42,880 --> 00:42:48,079
python node.js shell and the visual

00:42:46,160 --> 00:42:51,680
programming environment which is

00:42:48,079 --> 00:42:54,240
actually based on google blocking

00:42:51,680 --> 00:42:56,720
besides being an easy to use id while

00:42:54,240 --> 00:42:58,880
the gstudio doesn't store any user data

00:42:56,720 --> 00:43:00,160
so in europe this means that is gdpr

00:42:58,880 --> 00:43:02,079
compliant

00:43:00,160 --> 00:43:04,160
and in regards to the devices that we

00:43:02,079 --> 00:43:05,520
support while the g-studio is compatible

00:43:04,160 --> 00:43:08,319
with the raspberry pi

00:43:05,520 --> 00:43:09,440
the beaglebone black and nxp's rapid iot

00:43:08,319 --> 00:43:11,359
prototyping kit

00:43:09,440 --> 00:43:12,560
and here we would like to thank nxp for

00:43:11,359 --> 00:43:14,960
their support

00:43:12,560 --> 00:43:16,960
they have they have helped us a lot in

00:43:14,960 --> 00:43:18,960
integrating this device and they also

00:43:16,960 --> 00:43:22,000
offer some scholarships for our students

00:43:18,960 --> 00:43:22,000
so they can work on this

00:43:22,240 --> 00:43:25,440
the platform comes in two flavors you

00:43:24,079 --> 00:43:26,319
can either use it as a desktop

00:43:25,440 --> 00:43:28,800
application

00:43:26,319 --> 00:43:30,880
or in a browser in both cases the

00:43:28,800 --> 00:43:32,880
platform doesn't store any user data

00:43:30,880 --> 00:43:35,440
all the data required is stored on your

00:43:32,880 --> 00:43:35,440
computer

00:43:35,680 --> 00:43:39,599
it's open source as we mentioned before

00:43:37,599 --> 00:43:41,280
the license is apache 2.0

00:43:39,599 --> 00:43:42,960
so we would like to invite everybody to

00:43:41,280 --> 00:43:45,119
contribute to the platform

00:43:42,960 --> 00:43:46,880
uh you can see here mia wants me but

00:43:45,119 --> 00:43:48,079
actually we are a team of around 10

00:43:46,880 --> 00:43:50,319
people working on it

00:43:48,079 --> 00:43:52,319
and we would like others to join us the

00:43:50,319 --> 00:43:54,400
platform is written in javascript and it

00:43:52,319 --> 00:43:57,599
runs on top of electrons so it doesn't

00:43:54,400 --> 00:43:59,440
use very difficult technologies

00:43:57,599 --> 00:44:01,440
and as i've said we are looking for

00:43:59,440 --> 00:44:02,240
contributors and we would also like to

00:44:01,440 --> 00:44:04,160
have more

00:44:02,240 --> 00:44:07,440
people translating the platform so it

00:44:04,160 --> 00:44:09,280
becomes even more accessible

00:44:07,440 --> 00:44:11,599
you can find us on our website why

00:44:09,280 --> 00:44:14,000
doesn't that studio and on github

00:44:11,599 --> 00:44:15,599
and we've also just recently published a

00:44:14,000 --> 00:44:17,680
book together with a press

00:44:15,599 --> 00:44:18,800
it's not on the slides as if it is

00:44:17,680 --> 00:44:21,760
really recent

00:44:18,800 --> 00:44:22,400
but you can find it on our website and

00:44:21,760 --> 00:44:23,839
with that

00:44:22,400 --> 00:44:25,839
being said we would like to thank you

00:44:23,839 --> 00:44:28,880
for the attention and we will take any

00:44:25,839 --> 00:44:28,880
questions in the chat

00:44:30,000 --> 00:44:34,640
thank you uh uwana and kasami and that's

00:44:32,560 --> 00:44:37,200
really great work that you're doing and

00:44:34,640 --> 00:44:38,319
i really encourage everyone to ask

00:44:37,200 --> 00:44:41,839
questions in the chat

00:44:38,319 --> 00:44:44,319
but more importantly uh go to the uh

00:44:41,839 --> 00:44:46,560
wild green studio website uh go to the

00:44:44,319 --> 00:44:47,599
github repos and check it out what an

00:44:46,560 --> 00:44:51,599
amazing project

00:44:47,599 --> 00:44:54,560
nicely done thank you

00:44:51,599 --> 00:44:55,839
thanks next we have a talk on openvmc

00:44:54,560 --> 00:44:59,280
and migrating

00:44:55,839 --> 00:45:02,960
inside the box communications from ipmi

00:44:59,280 --> 00:45:07,000
to pldm please welcome a deepak

00:45:02,960 --> 00:45:14,540
coda holly senior engineer at ibm

00:45:07,000 --> 00:45:14,540
[Music]

00:45:14,560 --> 00:45:21,280
hello everyone my name is deepak

00:45:18,000 --> 00:45:24,160
i work with ibm in bangalore india

00:45:21,280 --> 00:45:25,200
i'm with the ibm systems group and i

00:45:24,160 --> 00:45:27,359
primarily write

00:45:25,200 --> 00:45:28,800
open source firmware for the baseboard

00:45:27,359 --> 00:45:32,000
management controller

00:45:28,800 --> 00:45:33,520
or the bmc this is my

00:45:32,000 --> 00:45:35,920
first experience at the open source

00:45:33,520 --> 00:45:36,880
summit so i'm excited to be presenting

00:45:35,920 --> 00:45:39,200
here

00:45:36,880 --> 00:45:41,040
uh i've presented at other open source

00:45:39,200 --> 00:45:42,800
conferences but this is also my first

00:45:41,040 --> 00:45:46,240
virtual one so that that makes it

00:45:42,800 --> 00:45:47,359
interesting uh over the next five or so

00:45:46,240 --> 00:45:51,040
minutes

00:45:47,359 --> 00:45:53,200
uh i will talk about inside the box

00:45:51,040 --> 00:45:54,400
or inside the server communication

00:45:53,200 --> 00:45:58,240
protocols

00:45:54,400 --> 00:46:01,200
uh and how and why we are migrating

00:45:58,240 --> 00:46:02,079
uh those on some of the upcoming ibm

00:46:01,200 --> 00:46:04,480
servers

00:46:02,079 --> 00:46:05,520
from a protocol called ipmi to a

00:46:04,480 --> 00:46:08,720
protocol called

00:46:05,520 --> 00:46:11,280
pldm uh my

00:46:08,720 --> 00:46:12,960
talk today is uh is in the context of

00:46:11,280 --> 00:46:15,760
openbmc

00:46:12,960 --> 00:46:17,760
so i'd like to introduce that first a

00:46:15,760 --> 00:46:19,680
bmc is basically a small

00:46:17,760 --> 00:46:21,440
computer which sits within a bigger

00:46:19,680 --> 00:46:23,200
computer

00:46:21,440 --> 00:46:26,079
you would typically find it on the

00:46:23,200 --> 00:46:28,079
motherboard soft servers

00:46:26,079 --> 00:46:29,680
the bmc enables various management

00:46:28,079 --> 00:46:32,000
functions such as

00:46:29,680 --> 00:46:33,599
powering on the server hardware uh

00:46:32,000 --> 00:46:34,480
monitoring the health of the server in

00:46:33,599 --> 00:46:36,079
terms of

00:46:34,480 --> 00:46:37,839
reading temperatures and voltages

00:46:36,079 --> 00:46:40,079
capturing debug logs

00:46:37,839 --> 00:46:41,119
uh providing interfaces for remote

00:46:40,079 --> 00:46:44,319
management

00:46:41,119 --> 00:46:46,240
clients and so on uh so the bmc actually

00:46:44,319 --> 00:46:48,880
has great control and power

00:46:46,240 --> 00:46:49,839
uh and with great power comes great

00:46:48,880 --> 00:46:53,280
responsibility

00:46:49,839 --> 00:46:57,040
uh but unfortunately that's that's been

00:46:53,280 --> 00:46:59,839
a bit hard to achieve with traditional

00:46:57,040 --> 00:47:00,560
bmc firmware stacks that have always

00:46:59,839 --> 00:47:03,680
been close

00:47:00,560 --> 00:47:06,720
sourced that poses problems

00:47:03,680 --> 00:47:09,040
in the areas of security tooling and

00:47:06,720 --> 00:47:11,920
customizing the bmc stack

00:47:09,040 --> 00:47:12,880
so these are some of the problems that

00:47:11,920 --> 00:47:16,240
open bmc

00:47:12,880 --> 00:47:16,240
is trying to address

00:47:18,319 --> 00:47:22,839
so basically open bmc is a linux

00:47:20,800 --> 00:47:26,720
foundation project

00:47:22,839 --> 00:47:27,760
uh it is a linux based distribution for

00:47:26,720 --> 00:47:30,800
bmc's

00:47:27,760 --> 00:47:31,359
uh there are there are several companies

00:47:30,800 --> 00:47:34,079
today that

00:47:31,359 --> 00:47:36,160
that either design or build systems and

00:47:34,079 --> 00:47:39,440
and they're adopting open bmc as well as

00:47:36,160 --> 00:47:42,720
contributing to open openvmc

00:47:39,440 --> 00:47:42,720
moving on to the next slide

00:47:47,520 --> 00:47:52,800
on this slide i'd like to introduce the

00:47:49,520 --> 00:47:56,079
term inside the box communication

00:47:52,800 --> 00:47:57,839
so typically uh in servers the

00:47:56,079 --> 00:48:00,720
baseboard management controller or the

00:47:57,839 --> 00:48:03,440
bmc is involved in a lot of talking

00:48:00,720 --> 00:48:04,480
uh as you can see in the picture uh the

00:48:03,440 --> 00:48:07,440
bmc can

00:48:04,480 --> 00:48:09,200
talk to the platform server software uh

00:48:07,440 --> 00:48:12,720
the bmc can talk to other

00:48:09,200 --> 00:48:15,440
other bncs uh the bmc can also talk to

00:48:12,720 --> 00:48:16,160
uh connected devices for example pcie

00:48:15,440 --> 00:48:19,520
devices

00:48:16,160 --> 00:48:20,000
or censorships and so on and and all of

00:48:19,520 --> 00:48:22,960
these

00:48:20,000 --> 00:48:24,079
inside the box communication parts are

00:48:22,960 --> 00:48:27,280
for enabling

00:48:24,079 --> 00:48:29,760
use cases such as uh state

00:48:27,280 --> 00:48:31,359
control power control uh exchanging

00:48:29,760 --> 00:48:33,200
monitoring and health information

00:48:31,359 --> 00:48:35,599
exchanging through information and and

00:48:33,200 --> 00:48:37,760
so on uh

00:48:35,599 --> 00:48:39,599
so this this basically means there are

00:48:37,760 --> 00:48:42,000
different firmware stacks

00:48:39,599 --> 00:48:44,400
uh that are trying to talk to each other

00:48:42,000 --> 00:48:47,599
uh over different physical buses

00:48:44,400 --> 00:48:48,240
uh now if these firmware stacks would

00:48:47,599 --> 00:48:51,280
use

00:48:48,240 --> 00:48:53,440
uh proprietary protocols uh

00:48:51,280 --> 00:48:54,800
that would mean for example the bmc

00:48:53,440 --> 00:48:58,160
firmware has to change

00:48:54,800 --> 00:49:00,640
over and over again uh when

00:48:58,160 --> 00:49:01,359
the host firmware implementation changes

00:49:00,640 --> 00:49:03,599
or

00:49:01,359 --> 00:49:04,960
the device firmware implementation

00:49:03,599 --> 00:49:07,599
changes or if there are

00:49:04,960 --> 00:49:09,599
newer revisions in those firmware

00:49:07,599 --> 00:49:13,440
implementations or devices

00:49:09,599 --> 00:49:15,359
so uh that kind of makes it necessary to

00:49:13,440 --> 00:49:17,280
go for industry standard

00:49:15,359 --> 00:49:19,359
communication protocols so that all of

00:49:17,280 --> 00:49:22,160
the boxes here are kind of talking the

00:49:19,359 --> 00:49:22,160
same language

00:49:23,440 --> 00:49:27,599
let's move on to the next slide and look

00:49:25,359 --> 00:49:31,599
at one such

00:49:27,599 --> 00:49:35,520
industry standard protocol which is

00:49:31,599 --> 00:49:38,480
ipmi now ipmi is a pretty old protocol

00:49:35,520 --> 00:49:39,200
it's it's pretty popular as well it's

00:49:38,480 --> 00:49:41,680
used for

00:49:39,200 --> 00:49:42,559
inside the box communication it's also

00:49:41,680 --> 00:49:44,880
used

00:49:42,559 --> 00:49:47,119
for out of band or over the network

00:49:44,880 --> 00:49:50,880
communications to talk to the bmc

00:49:47,119 --> 00:49:54,240
uh as shown in the picture here

00:49:50,880 --> 00:49:54,720
uh on certain ibm servers we've tried to

00:49:54,240 --> 00:49:57,280
use

00:49:54,720 --> 00:50:00,960
ipmi as the communication protocol

00:49:57,280 --> 00:50:04,960
between the host firmware and the bmc

00:50:00,960 --> 00:50:06,800
while that works okay for small servers

00:50:04,960 --> 00:50:08,720
it doesn't scale really well for

00:50:06,800 --> 00:50:11,040
enterprise class servers

00:50:08,720 --> 00:50:13,440
because there are some inherent

00:50:11,040 --> 00:50:16,720
limitations with the ipmi specification

00:50:13,440 --> 00:50:19,760
for example the ipmi specification

00:50:16,720 --> 00:50:23,280
uh reserves a single unsigned byte for

00:50:19,760 --> 00:50:26,720
a sensor that would mean you can have

00:50:23,280 --> 00:50:27,760
at most 255 sensors on on large scale

00:50:26,720 --> 00:50:29,520
enterprise servers

00:50:27,760 --> 00:50:31,520
just the number of memory modules for

00:50:29,520 --> 00:50:33,200
example could exhaust the ipmi sensor

00:50:31,520 --> 00:50:36,400
space

00:50:33,200 --> 00:50:39,359
there are other limitations the ipmi

00:50:36,400 --> 00:50:41,200
specification talks about the messaging

00:50:39,359 --> 00:50:42,640
protocol as well as

00:50:41,200 --> 00:50:44,559
hardware channels and there's a bit of

00:50:42,640 --> 00:50:46,640
coupling between them

00:50:44,559 --> 00:50:48,480
uh it's hard to design the messaging

00:50:46,640 --> 00:50:51,040
protocol and the hardware channels

00:50:48,480 --> 00:50:52,400
uh separately examples of the ipmi

00:50:51,040 --> 00:50:55,760
hardware channels are

00:50:52,400 --> 00:50:57,760
kcs and bt bt stands for block transfer

00:50:55,760 --> 00:50:59,119
uh the hardware channels have their own

00:50:57,760 --> 00:51:00,640
limitations they are

00:50:59,119 --> 00:51:02,319
they are not really performant for

00:51:00,640 --> 00:51:05,440
example so if

00:51:02,319 --> 00:51:08,319
you were to update uh firmware inband

00:51:05,440 --> 00:51:10,559
and let's say the firmware image is 32mx

00:51:08,319 --> 00:51:13,119
if that happens over ipmi packets that

00:51:10,559 --> 00:51:15,920
could take hours

00:51:13,119 --> 00:51:16,400
finally the ipmi spec is currently not

00:51:15,920 --> 00:51:23,440
under

00:51:16,400 --> 00:51:26,640
active development

00:51:23,440 --> 00:51:28,480
so uh there's basically a need to find

00:51:26,640 --> 00:51:30,240
inside the ban inside the box

00:51:28,480 --> 00:51:32,000
communication protocols

00:51:30,240 --> 00:51:34,720
that address the limitations that i

00:51:32,000 --> 00:51:37,359
spoke about but at the same time we

00:51:34,720 --> 00:51:39,200
don't want to implement proprietary ones

00:51:37,359 --> 00:51:41,680
because again then there are issues in

00:51:39,200 --> 00:51:44,960
terms of interoperability

00:51:41,680 --> 00:51:48,240
this is where pmci comes into picture

00:51:44,960 --> 00:51:49,760
so pmci is a dmtf workgroup that comes

00:51:48,240 --> 00:51:52,720
up with standards

00:51:49,760 --> 00:51:54,880
to enable inside the box communications

00:51:52,720 --> 00:51:56,319
as you can see in the picture here pmci

00:51:54,880 --> 00:51:58,720
covers various forms of

00:51:56,319 --> 00:51:59,920
inside the box communications the bmc

00:51:58,720 --> 00:52:02,559
talking to the platform

00:51:59,920 --> 00:52:05,040
software or the host firmware the bmc

00:52:02,559 --> 00:52:08,079
talking to other bmc's talking to the

00:52:05,040 --> 00:52:10,400
network car or managed devices and so on

00:52:08,079 --> 00:52:11,359
uh so pmca is a collection of

00:52:10,400 --> 00:52:14,160
specifications

00:52:11,359 --> 00:52:15,839
uh a couple that i want to call out in

00:52:14,160 --> 00:52:19,839
the context of this talk or

00:52:15,839 --> 00:52:19,839
are pldm and mctp

00:52:19,920 --> 00:52:24,400
pldm stands for platform level data

00:52:22,160 --> 00:52:26,240
model it's basically a data model and a

00:52:24,400 --> 00:52:28,079
set of messages that enables

00:52:26,240 --> 00:52:29,359
exchange of information such as

00:52:28,079 --> 00:52:32,079
monitoring health

00:52:29,359 --> 00:52:33,040
through and so on mcdb is a transport

00:52:32,079 --> 00:52:35,440
protocol

00:52:33,040 --> 00:52:37,200
mctp stands for management control

00:52:35,440 --> 00:52:40,640
transport protocol

00:52:37,200 --> 00:52:43,839
plm typically runs on top of mctp

00:52:40,640 --> 00:52:46,079
together these protocols address

00:52:43,839 --> 00:52:48,880
the limitations of ipmi that we spoke

00:52:46,079 --> 00:52:52,079
about previously

00:52:48,880 --> 00:52:52,079
moving on to the next slide

00:52:54,880 --> 00:52:59,599
so this picture represents the full pmci

00:52:57,280 --> 00:53:01,760
stack

00:52:59,599 --> 00:53:03,760
as you can see this is layered there are

00:53:01,760 --> 00:53:05,440
three layers a physical layer transport

00:53:03,760 --> 00:53:07,040
layer and upper layer protocols

00:53:05,440 --> 00:53:08,880
the physical layer comprises of

00:53:07,040 --> 00:53:10,960
well-known physical

00:53:08,880 --> 00:53:12,400
inside the box interconnector or buses

00:53:10,960 --> 00:53:15,520
for example assembus

00:53:12,400 --> 00:53:16,960
pcie serial there are a couple of

00:53:15,520 --> 00:53:20,720
transport layer protocols

00:53:16,960 --> 00:53:22,160
uh mctp and also one called rbt

00:53:20,720 --> 00:53:23,680
and there are several upper layer

00:53:22,160 --> 00:53:25,359
protocols that run on top of these

00:53:23,680 --> 00:53:28,640
transport layer protocols

00:53:25,359 --> 00:53:29,680
uh pldm is one of them the goal here is

00:53:28,640 --> 00:53:33,359
to

00:53:29,680 --> 00:53:35,520
enable the transport

00:53:33,359 --> 00:53:36,400
and upper layer protocols to be designed

00:53:35,520 --> 00:53:39,040
separately

00:53:36,400 --> 00:53:41,040
without causing a coupling and the goal

00:53:39,040 --> 00:53:42,000
is also to be able to make it easy to

00:53:41,040 --> 00:53:44,880
introduce newer

00:53:42,000 --> 00:53:47,359
physical buses newer transport protocols

00:53:44,880 --> 00:53:48,880
and upper layer protocols

00:53:47,359 --> 00:53:51,440
one of the ways in which this is

00:53:48,880 --> 00:53:54,319
achieved is for example with mctp

00:53:51,440 --> 00:53:56,240
the mcdp based protocol is agnostic of

00:53:54,319 --> 00:53:59,520
the underlying physical buses

00:53:56,240 --> 00:54:01,359
that is achieved by a companion

00:53:59,520 --> 00:54:03,599
binding specifications for example you

00:54:01,359 --> 00:54:06,640
can see an mctp or pcie

00:54:03,599 --> 00:54:08,839
and an mctp or sm bus binding

00:54:06,640 --> 00:54:12,640
specification

00:54:08,839 --> 00:54:14,480
uh also as you can see here on the top

00:54:12,640 --> 00:54:16,640
plem itself is a collection of

00:54:14,480 --> 00:54:24,800
specifications each of them

00:54:16,640 --> 00:54:28,319
uh tackle a specific uh function

00:54:24,800 --> 00:54:31,440
moving on to the next slide

00:54:28,319 --> 00:54:36,240
so uh next let's look at uh

00:54:31,440 --> 00:54:36,240
what's happening on openbmc in terms of

00:54:36,960 --> 00:54:40,799
mcdp and pldm and how these protocols

00:54:39,359 --> 00:54:43,280
are helping us solve some of the

00:54:40,799 --> 00:54:46,000
challenges that we faced with ipmi

00:54:43,280 --> 00:54:49,119
so first of all openvmc has an open

00:54:46,000 --> 00:54:52,640
source pldm and mctp stack

00:54:49,119 --> 00:54:54,640
there are parts of those namely lip pldm

00:54:52,640 --> 00:54:57,280
and lip mctp

00:54:54,640 --> 00:54:58,880
that are platform agnostic they contain

00:54:57,280 --> 00:55:01,119
all of the protocol specific

00:54:58,880 --> 00:55:03,599
api and implementation and they can run

00:55:01,119 --> 00:55:06,240
outside of open bmc as well

00:55:03,599 --> 00:55:07,359
for example the host firmware stack on

00:55:06,240 --> 00:55:10,559
ibm systems

00:55:07,359 --> 00:55:13,599
uh makes use of flip pldm and libctp

00:55:10,559 --> 00:55:15,680
uh as you can see in the picture here

00:55:13,599 --> 00:55:17,520
uh what we have done on openbmc is we

00:55:15,680 --> 00:55:19,119
have implemented the mcdp based

00:55:17,520 --> 00:55:20,880
specification and the pldm based

00:55:19,119 --> 00:55:23,520
specification

00:55:20,880 --> 00:55:25,280
there there are there is implementation

00:55:23,520 --> 00:55:26,799
for some of the binding specs as well

00:55:25,280 --> 00:55:28,559
for example the pci binding

00:55:26,799 --> 00:55:31,040
specification there's a

00:55:28,559 --> 00:55:32,640
serial uh mctp over serial binding spec

00:55:31,040 --> 00:55:35,119
implementation

00:55:32,640 --> 00:55:36,079
it is also possible to throw in vendor

00:55:35,119 --> 00:55:39,040
defined

00:55:36,079 --> 00:55:40,240
uh bindings into the picture uh for

00:55:39,040 --> 00:55:43,359
example we have one for

00:55:40,240 --> 00:55:44,720
lpc uh at the same time it's also

00:55:43,359 --> 00:55:47,520
possible to

00:55:44,720 --> 00:55:48,640
standardize them by proposing the same

00:55:47,520 --> 00:55:52,000
to pmci

00:55:48,640 --> 00:55:53,440
pmci has a very active work group that

00:55:52,000 --> 00:55:56,720
works on

00:55:53,440 --> 00:55:59,280
spec development and enhancements

00:55:56,720 --> 00:56:01,359
also as you can see pldm profiles are

00:55:59,280 --> 00:56:03,760
the individual pldm specifications in

00:56:01,359 --> 00:56:05,680
the areas of bios settings

00:56:03,760 --> 00:56:07,200
monitoring and control through

00:56:05,680 --> 00:56:09,680
information exchange

00:56:07,200 --> 00:56:11,280
are being implemented uh another

00:56:09,680 --> 00:56:16,240
important point to note is

00:56:11,280 --> 00:56:19,520
uh pldm scales much better than ipmi uh

00:56:16,240 --> 00:56:19,839
for example uh pldm has two byte sensors

00:56:19,520 --> 00:56:25,040
so

00:56:19,839 --> 00:56:25,040
we don't have the limitations of ipmi

00:56:26,160 --> 00:56:31,839
moving on to the next slide

00:56:33,200 --> 00:56:37,280
so i'll basically end with this slide uh

00:56:35,839 --> 00:56:40,240
what i have here are

00:56:37,280 --> 00:56:41,680
pointers to uh some of the pmci

00:56:40,240 --> 00:56:44,960
documents and also

00:56:41,680 --> 00:56:49,760
pointers to the open bmc source code and

00:56:44,960 --> 00:56:49,760
design docs for pldm and mctp

00:56:49,839 --> 00:56:53,040
that's it thanks much

00:56:55,200 --> 00:57:01,280
thank you very much uh our next uh

00:56:58,319 --> 00:57:03,040
speaker is daniel chien software

00:57:01,280 --> 00:57:06,160
engineer at ebay

00:57:03,040 --> 00:57:08,240
and he joins us to uh talk about unified

00:57:06,160 --> 00:57:11,280
cloud infrastructure remediation

00:57:08,240 --> 00:57:12,530
at ebay please welcome daniel

00:57:11,280 --> 00:57:18,720
chien

00:57:12,530 --> 00:57:20,720
[Music]

00:57:18,720 --> 00:57:22,480
hello everyone welcome to my station i'm

00:57:20,720 --> 00:57:25,359
daniel chen from ebay

00:57:22,480 --> 00:57:27,280
inflating i'm going to talk about how we

00:57:25,359 --> 00:57:30,000
monitoring ebay cloud infrastructure

00:57:27,280 --> 00:57:33,440
and how we're building the unified cloud

00:57:30,000 --> 00:57:33,440
infrastructure reputation system

00:57:34,799 --> 00:57:40,240
this is my agenda i will first introduce

00:57:37,680 --> 00:57:42,640
the ebay terminates focus and

00:57:40,240 --> 00:57:43,839
then how we measure cloud infrastructure

00:57:42,640 --> 00:57:47,040
with the components

00:57:43,839 --> 00:57:48,960
capabilities and based on these models

00:57:47,040 --> 00:57:54,000
models will build a unified cloud

00:57:48,960 --> 00:57:57,440
infrastructure regulation system

00:57:54,000 --> 00:58:00,400
first of first ebay start kubernetes

00:57:57,440 --> 00:58:01,280
in 2015 we're running the internal

00:58:00,400 --> 00:58:04,799
distribution

00:58:01,280 --> 00:58:08,799
name testo io as of now we already have

00:58:04,799 --> 00:58:11,520
over 80 clusters running in different

00:58:08,799 --> 00:58:12,319
mixes and environments there are

00:58:11,520 --> 00:58:15,440
multiple

00:58:12,319 --> 00:58:19,200
2000 plus size clusters with

00:58:15,440 --> 00:58:22,160
heavy workflows the various

00:58:19,200 --> 00:58:23,119
production workflows including the web

00:58:22,160 --> 00:58:25,440
frontend

00:58:23,119 --> 00:58:26,880
databases search engine hadoop and the

00:58:25,440 --> 00:58:29,680
machine learnings

00:58:26,880 --> 00:58:33,520
and we are also running on the edge for

00:58:29,680 --> 00:58:33,520
a better end user experience

00:58:33,920 --> 00:58:37,040
okay now after getting some ideas on

00:58:36,400 --> 00:58:39,359
ebay

00:58:37,040 --> 00:58:40,720
properties for branch you may wondering

00:58:39,359 --> 00:58:42,480
how big data

00:58:40,720 --> 00:58:44,319
the answer short answer is we use the

00:58:42,480 --> 00:58:45,280
kubernetes to manage the cloud

00:58:44,319 --> 00:58:48,880
infrastructure

00:58:45,280 --> 00:58:49,280
lifecycle at first in order to manage

00:58:48,880 --> 00:58:51,839
them

00:58:49,280 --> 00:58:52,640
in combination with me modeling all the

00:58:51,839 --> 00:58:54,720
concepts

00:58:52,640 --> 00:58:56,880
in infrastructure layer and software

00:58:54,720 --> 00:59:00,480
layer from the ac

00:58:56,880 --> 00:59:03,520
red computer set vpc to stu flavor

00:59:00,480 --> 00:59:05,760
os images node pool and computer node

00:59:03,520 --> 00:59:06,880
all these models template present

00:59:05,760 --> 00:59:09,119
everything we need

00:59:06,880 --> 00:59:10,799
to do like another provisioning

00:59:09,119 --> 00:59:12,960
kubernetes cluster build out

00:59:10,799 --> 00:59:15,599
under the key of my session the node

00:59:12,960 --> 00:59:15,599
elimination

00:59:15,680 --> 00:59:21,359
so after we have the multiple models

00:59:18,799 --> 00:59:23,119
we can have a look about how we use them

00:59:21,359 --> 00:59:24,640
here is the architecture view of our

00:59:23,119 --> 00:59:27,680
over one single easy

00:59:24,640 --> 00:59:30,799
let's also do it quickly

00:59:27,680 --> 00:59:33,680
at first is over control plane

00:59:30,799 --> 00:59:34,720
it has the api server xcd and old all of

00:59:33,680 --> 00:59:37,680
our controllers

00:59:34,720 --> 00:59:38,799
named test mask then we have some

00:59:37,680 --> 00:59:42,000
pre-created

00:59:38,799 --> 00:59:44,839
objects like os image and flare which

00:59:42,000 --> 00:59:47,680
contains the osg and the disk partition

00:59:44,839 --> 00:59:50,480
specs

00:59:47,680 --> 00:59:52,400
after we have these of objects let's see

00:59:50,480 --> 00:59:55,440
we have

00:59:52,400 --> 00:59:56,000
a rack from our data center we can

00:59:55,440 --> 00:59:58,000
generate

00:59:56,000 --> 01:00:00,000
all infrastructure layer models like

00:59:58,000 --> 01:00:04,240
asset and to domain subnet

01:00:00,000 --> 01:00:06,480
and even the load from over ebay mdb

01:00:04,240 --> 01:00:08,480
once you have the assets and they can be

01:00:06,480 --> 01:00:09,119
consumed by our home drone provision

01:00:08,480 --> 01:00:11,599
system

01:00:09,119 --> 01:00:12,400
to be a computer node and after we have

01:00:11,599 --> 01:00:14,319
several

01:00:12,400 --> 01:00:16,240
provisional computer node we can

01:00:14,319 --> 01:00:18,559
leverage the source state

01:00:16,240 --> 01:00:21,359
to build kubernetes clusters with the

01:00:18,559 --> 01:00:21,359
data of subway

01:00:22,400 --> 01:00:26,160
okay now we already know how the

01:00:25,040 --> 01:00:28,880
probation host

01:00:26,160 --> 01:00:29,839
and build the translators in ebay and

01:00:28,880 --> 01:00:32,559
since the system

01:00:29,839 --> 01:00:34,160
and the hardware can fail so unified and

01:00:32,559 --> 01:00:36,880
highly automated remediation

01:00:34,160 --> 01:00:38,720
system is needed for the infrastructure

01:00:36,880 --> 01:00:40,960
lifecycle management

01:00:38,720 --> 01:00:41,760
here is over unified remediation

01:00:40,960 --> 01:00:44,160
framework

01:00:41,760 --> 01:00:46,480
they are thrillers and i will introduce

01:00:44,160 --> 01:00:49,359
them one by one

01:00:46,480 --> 01:00:51,280
the first layer is a detector this over

01:00:49,359 --> 01:00:52,160
of our eyes to find out the node

01:00:51,280 --> 01:00:54,640
failures

01:00:52,160 --> 01:00:56,160
currently the most important three times

01:00:54,640 --> 01:00:58,160
of detector fast

01:00:56,160 --> 01:01:01,119
is not problem detector level is

01:00:58,160 --> 01:01:02,880
readings probe and the logic detector

01:01:01,119 --> 01:01:05,200
the node prompt detector is an open

01:01:02,880 --> 01:01:07,920
source project in kubernetes

01:01:05,200 --> 01:01:09,520
it provides a flexible framework for us

01:01:07,920 --> 01:01:12,240
to leverage different tools and

01:01:09,520 --> 01:01:12,799
lots to detect hardware failures the

01:01:12,240 --> 01:01:15,920
time c

01:01:12,799 --> 01:01:17,760
arrow ipmi error and the disk arrow then

01:01:15,920 --> 01:01:20,000
for software layer

01:01:17,760 --> 01:01:21,359
failures we leveraged the labness and

01:01:20,000 --> 01:01:24,880
the region probe

01:01:21,359 --> 01:01:26,880
to detect the t components of our system

01:01:24,880 --> 01:01:28,720
that is another prime detector itself

01:01:26,880 --> 01:01:31,920
and the horizontal

01:01:28,720 --> 01:01:32,720
the last but not least is the alert

01:01:31,920 --> 01:01:35,200
detector

01:01:32,720 --> 01:01:39,200
it will use to find out the other

01:01:35,200 --> 01:01:42,400
failures from our monitoring system

01:01:39,200 --> 01:01:43,119
then we already have the classified node

01:01:42,400 --> 01:01:44,559
failures

01:01:43,119 --> 01:01:46,960
we can leverage the remediation

01:01:44,559 --> 01:01:48,559
framework to configure different

01:01:46,960 --> 01:01:50,319
remediation policy for different

01:01:48,559 --> 01:01:52,960
overfailures here are

01:01:50,319 --> 01:01:53,760
some kinds of node failures we already

01:01:52,960 --> 01:01:56,319
have this

01:01:53,760 --> 01:01:57,520
classified you can see in the hardware

01:01:56,319 --> 01:02:00,559
failure patch

01:01:57,520 --> 01:02:02,000
we can have multiple subtitles like

01:02:00,559 --> 01:02:04,400
there's a machine error and this

01:02:02,000 --> 01:02:06,319
arrow in the future we can even know

01:02:04,400 --> 01:02:09,280
whether this is a digital lost

01:02:06,319 --> 01:02:11,039
or a digital read-write failure and

01:02:09,280 --> 01:02:14,720
based on the fine grind

01:02:11,039 --> 01:02:16,000
categories we have the customized

01:02:14,720 --> 01:02:20,240
remediation policy

01:02:16,000 --> 01:02:20,880
for each of them each limitation policy

01:02:20,240 --> 01:02:25,200
consists

01:02:20,880 --> 01:02:27,920
of one or multiple remediation actions

01:02:25,200 --> 01:02:28,799
the edges can be two parts the first one

01:02:27,920 --> 01:02:31,599
is on failure

01:02:28,799 --> 01:02:32,079
actions which will be treated when we

01:02:31,599 --> 01:02:34,799
detect

01:02:32,079 --> 01:02:35,599
the node of failure we can restart the

01:02:34,799 --> 01:02:38,079
image

01:02:35,599 --> 01:02:39,760
reclaim or trigger fixed asset on the

01:02:38,079 --> 01:02:42,319
unhealthy nodes

01:02:39,760 --> 01:02:43,200
after the unfailure actions bring the

01:02:42,319 --> 01:02:46,160
nodes back

01:02:43,200 --> 01:02:47,520
to healthy which i have used the

01:02:46,160 --> 01:02:49,520
unsuccessful actions

01:02:47,520 --> 01:02:50,880
to restore data or send some

01:02:49,520 --> 01:02:53,920
notification to us

01:02:50,880 --> 01:02:53,920
or over customers

01:02:54,319 --> 01:02:57,839
okay after we have the view of the

01:02:56,160 --> 01:02:59,680
unified remedy framework

01:02:57,839 --> 01:03:01,680
we now have with the example of how the

01:02:59,680 --> 01:03:04,079
remediation flow works

01:03:01,680 --> 01:03:05,520
here is the node probe failure

01:03:04,079 --> 01:03:08,640
remediation flow

01:03:05,520 --> 01:03:11,520
you can see it has the highest priority

01:03:08,640 --> 01:03:13,200
and after the pre-condition match the

01:03:11,520 --> 01:03:14,079
unfailure actions will be treated one by

01:03:13,200 --> 01:03:16,319
one

01:03:14,079 --> 01:03:18,400
of course if this if the node becomes

01:03:16,319 --> 01:03:22,400
healthy again after several actions

01:03:18,400 --> 01:03:24,319
the left ones will be skipped at last

01:03:22,400 --> 01:03:25,760
the unsuccessful actions will be traded

01:03:24,319 --> 01:03:29,680
to do some automated

01:03:25,760 --> 01:03:32,240
operations the previous flow

01:03:29,680 --> 01:03:34,960
is the generated remission flow but we

01:03:32,240 --> 01:03:36,960
know some applications are not stainless

01:03:34,960 --> 01:03:38,400
so in order to not affect the running

01:03:36,960 --> 01:03:40,720
waters and then

01:03:38,400 --> 01:03:43,039
give some time to do like the data

01:03:40,720 --> 01:03:45,359
migration or failover process

01:03:43,039 --> 01:03:47,520
we suggest the operational owners who

01:03:45,359 --> 01:03:50,799
leverage the coordinates concept

01:03:47,520 --> 01:03:51,440
support disruption budget application

01:03:50,799 --> 01:03:53,839
owners

01:03:51,440 --> 01:03:56,000
can use the product design budget to

01:03:53,839 --> 01:03:58,640
hold over remuneration flow

01:03:56,000 --> 01:04:00,160
and if the grace period in the policy

01:03:58,640 --> 01:04:02,000
has its part

01:04:00,160 --> 01:04:04,160
we will kick off our workflow to

01:04:02,000 --> 01:04:07,119
ascertain remedial operational illness

01:04:04,160 --> 01:04:08,559
to complete the migration and the or

01:04:07,119 --> 01:04:11,280
failure over process

01:04:08,559 --> 01:04:12,079
as soon as possible and then to remove

01:04:11,280 --> 01:04:14,640
or change

01:04:12,079 --> 01:04:17,119
the positive budget to continue the next

01:04:14,640 --> 01:04:19,839
solution flow

01:04:17,119 --> 01:04:20,559
okay this is all what i want sharing

01:04:19,839 --> 01:04:22,480
today

01:04:20,559 --> 01:04:23,839
and if you if you are interested about

01:04:22,480 --> 01:04:26,319
this topic you can

01:04:23,839 --> 01:04:28,400
reach me to have a future discussion

01:04:26,319 --> 01:04:31,680
next is the 200 patch

01:04:28,400 --> 01:04:31,680
it's your time thank you

01:04:33,119 --> 01:04:36,400
thank you daniel finally we have joel

01:04:35,760 --> 01:04:38,799
lehman

01:04:36,400 --> 01:04:40,880
senior research scientist at uber

01:04:38,799 --> 01:04:44,160
joining us for a lightning talk on

01:04:40,880 --> 01:04:46,960
an open source model zoo for analyzing

01:04:44,160 --> 01:04:48,160
visualizing comparing deep reinforcement

01:04:46,960 --> 01:04:55,100
learning agents

01:04:48,160 --> 01:04:57,039
please welcome joel lehman

01:04:55,100 --> 01:05:00,079
[Music]

01:04:57,039 --> 01:05:03,359
thanks jim it's a pleasure to be here

01:05:00,079 --> 01:05:05,440
so to give a 50 000 foot view of what

01:05:03,359 --> 01:05:06,799
this talk is about

01:05:05,440 --> 01:05:08,160
i'll be talking about a project that

01:05:06,799 --> 01:05:09,839
aims to make it easier to do a

01:05:08,160 --> 01:05:11,440
particular kind of research

01:05:09,839 --> 01:05:13,440
we want to make it easier to research

01:05:11,440 --> 01:05:14,000
the behavior of reinforced learning

01:05:13,440 --> 01:05:15,680
agents

01:05:14,000 --> 01:05:17,119
produced by different algorithms i'm

01:05:15,680 --> 01:05:18,559
going to dive into

01:05:17,119 --> 01:05:20,000
this more clearly so you get a sense of

01:05:18,559 --> 01:05:21,599
what i mean but we want to be able to

01:05:20,000 --> 01:05:23,359
basically understand

01:05:21,599 --> 01:05:25,440
reinforced learning agents better than

01:05:23,359 --> 01:05:27,599
we do right now

01:05:25,440 --> 01:05:29,119
and so i'm going to use the title of the

01:05:27,599 --> 01:05:30,720
talk as a device just to kind of

01:05:29,119 --> 01:05:32,079
illuminate the different terms within it

01:05:30,720 --> 01:05:33,039
so we can build up to an understanding

01:05:32,079 --> 01:05:34,799
of what

01:05:33,039 --> 01:05:36,400
what this project's all about so this

01:05:34,799 --> 01:05:37,760
project is about deep reinforcement

01:05:36,400 --> 01:05:40,160
learning agents

01:05:37,760 --> 01:05:41,039
so this is a paradigm of machine

01:05:40,160 --> 01:05:44,640
learning

01:05:41,039 --> 01:05:47,039
in which you're trying to train an agent

01:05:44,640 --> 01:05:47,760
to take actions in the world such that

01:05:47,039 --> 01:05:49,920
it gets

01:05:47,760 --> 01:05:51,520
higher rewards and to make this more

01:05:49,920 --> 01:05:53,520
clear we can talk about

01:05:51,520 --> 01:05:54,799
a specific domain and it's the main that

01:05:53,520 --> 01:05:58,720
this project sets

01:05:54,799 --> 01:06:00,720
focuses on which is the atari

01:05:58,720 --> 01:06:02,319
reinforcement learning benchmark domain

01:06:00,720 --> 01:06:06,000
so this is inspired

01:06:02,319 --> 01:06:07,920
or builds upon the atari 2600

01:06:06,000 --> 01:06:09,680
video game console which some of you may

01:06:07,920 --> 01:06:12,480
be familiar with or have played

01:06:09,680 --> 01:06:13,680
and this console cannot be emulated

01:06:12,480 --> 01:06:16,079
within a computer

01:06:13,680 --> 01:06:17,280
and it just provides a wide range of

01:06:16,079 --> 01:06:19,280
simple

01:06:17,280 --> 01:06:21,280
and yet sometimes difficult challenges

01:06:19,280 --> 01:06:22,799
for reinforcement learning agents to to

01:06:21,280 --> 01:06:23,520
learn so the agents in this in these

01:06:22,799 --> 01:06:27,039
environments

01:06:23,520 --> 01:06:28,480
um will be trying to take actions

01:06:27,039 --> 01:06:30,319
basically press buttons in the games

01:06:28,480 --> 01:06:31,119
from viewing the pixels of the video

01:06:30,319 --> 01:06:32,960
game

01:06:31,119 --> 01:06:34,960
and trying to make the video game score

01:06:32,960 --> 01:06:36,880
go up

01:06:34,960 --> 01:06:38,319
um so that's the atari part this is sort

01:06:36,880 --> 01:06:39,680
of the domain that a lot of i'll be

01:06:38,319 --> 01:06:42,480
talking about we'll be taking

01:06:39,680 --> 01:06:43,760
um place within and then what's what's a

01:06:42,480 --> 01:06:47,440
model zoo

01:06:43,760 --> 01:06:49,119
um so a model zoo is describing

01:06:47,440 --> 01:06:50,799
a place where you can store trained

01:06:49,119 --> 01:06:52,559
models so

01:06:50,799 --> 01:06:53,839
it might seem a little bit wasteful but

01:06:52,559 --> 01:06:54,400
what people usually do when they're

01:06:53,839 --> 01:06:56,160
training

01:06:54,400 --> 01:06:57,760
big machine learning models particularly

01:06:56,160 --> 01:06:59,359
in reinforcement learning is you'll

01:06:57,760 --> 01:07:00,960
train a model from scratch and it could

01:06:59,359 --> 01:07:01,760
be a very big model many millions of

01:07:00,960 --> 01:07:03,119
parameters

01:07:01,760 --> 01:07:04,720
it could take a lot of effort to train

01:07:03,119 --> 01:07:06,160
that model it takes a lot of hours on a

01:07:04,720 --> 01:07:10,480
gpu and

01:07:06,160 --> 01:07:13,440
and cpu as well

01:07:10,480 --> 01:07:15,359
and then after you train this model you

01:07:13,440 --> 01:07:16,960
might just take the trained weights

01:07:15,359 --> 01:07:18,400
and throw them away and just look at the

01:07:16,960 --> 01:07:19,920
score that you got like how many points

01:07:18,400 --> 01:07:21,039
in the target you get

01:07:19,920 --> 01:07:23,280
but if you have a model zero you can

01:07:21,039 --> 01:07:24,559
upload models and compare models to

01:07:23,280 --> 01:07:26,240
other people's models

01:07:24,559 --> 01:07:27,680
then it can actually make analyzing the

01:07:26,240 --> 01:07:28,400
behaviors a lot easier and that's

01:07:27,680 --> 01:07:31,440
exactly

01:07:28,400 --> 01:07:32,319
what we want to do is to help us to

01:07:31,440 --> 01:07:35,359
better understand

01:07:32,319 --> 01:07:37,599
what these big neural network atari

01:07:35,359 --> 01:07:39,039
models are actually learning and so

01:07:37,599 --> 01:07:41,119
what's shown here is an image

01:07:39,039 --> 01:07:42,319
from i'm analyzing a image

01:07:41,119 --> 01:07:43,280
classification networks and not

01:07:42,319 --> 01:07:46,079
reinforcement learning

01:07:43,280 --> 01:07:47,599
but showing ways to visualize what each

01:07:46,079 --> 01:07:49,119
neuron in the network is learning

01:07:47,599 --> 01:07:50,480
and it's a way to understand why it's

01:07:49,119 --> 01:07:52,000
making the decisions that it's making

01:07:50,480 --> 01:07:54,799
and we might want something similar

01:07:52,000 --> 01:07:55,839
for deep reinforcement learning so just

01:07:54,799 --> 01:07:57,359
to dive into reinforcement

01:07:55,839 --> 01:07:58,559
just to make it a little more concrete

01:07:57,359 --> 01:07:59,680
so on the left we have this game

01:07:58,559 --> 01:08:01,280
breakout

01:07:59,680 --> 01:08:03,119
um where you're trying to control the

01:08:01,280 --> 01:08:04,319
paddle on the bottom and you're trying

01:08:03,119 --> 01:08:06,240
to

01:08:04,319 --> 01:08:07,599
uh destroy all the blocks and that means

01:08:06,240 --> 01:08:10,160
with with the

01:08:07,599 --> 01:08:12,000
with the ball so this is like an agent

01:08:10,160 --> 01:08:13,839
that isn't very good so it hits one

01:08:12,000 --> 01:08:15,119
one block and then it dies so it gets a

01:08:13,839 --> 01:08:16,560
score of one

01:08:15,119 --> 01:08:18,000
and you can imagine there would be ways

01:08:16,560 --> 01:08:19,600
to improve upon this asian the agent

01:08:18,000 --> 01:08:20,080
might somehow get more rewards just by

01:08:19,600 --> 01:08:22,000
hitting

01:08:20,080 --> 01:08:23,279
the ball off the paddle by chance and

01:08:22,000 --> 01:08:25,520
eventually through a lot of

01:08:23,279 --> 01:08:27,120
feedback and trying new actions it can

01:08:25,520 --> 01:08:29,040
get very good this is showing an agent

01:08:27,120 --> 01:08:30,640
that gets 335 points so

01:08:29,040 --> 01:08:31,920
in reinforcement learning again the

01:08:30,640 --> 01:08:33,359
agent's just trying to learn how to get

01:08:31,920 --> 01:08:37,120
the highest score

01:08:33,359 --> 01:08:38,400
and um and we

01:08:37,120 --> 01:08:40,000
people are really excited about a form

01:08:38,400 --> 01:08:41,520
of reinforced learning called deep

01:08:40,000 --> 01:08:43,040
reinforcement learning which is

01:08:41,520 --> 01:08:46,080
just means using deep networks deep

01:08:43,040 --> 01:08:47,359
neural networks um as a way to encode a

01:08:46,080 --> 01:08:50,000
policy that can

01:08:47,359 --> 01:08:50,880
learn how to play the game so there's

01:08:50,000 --> 01:08:52,719
been a lot of success

01:08:50,880 --> 01:08:54,159
in deep reinforcement learning it's

01:08:52,719 --> 01:08:57,040
plays atari well

01:08:54,159 --> 01:08:58,319
it's become world champion and go

01:08:57,040 --> 01:09:02,159
there's examples of using

01:08:58,319 --> 01:09:04,159
robots to manipulate rubik's cubes

01:09:02,159 --> 01:09:05,520
and there's a lot of potential here

01:09:04,159 --> 01:09:07,040
because many

01:09:05,520 --> 01:09:08,960
tasks that we care about that economic

01:09:07,040 --> 01:09:09,759
or social value can be framed in terms

01:09:08,960 --> 01:09:11,839
of

01:09:09,759 --> 01:09:12,799
an agent like a robot doing something in

01:09:11,839 --> 01:09:14,799
the world

01:09:12,799 --> 01:09:16,480
but this potential hasn't really been

01:09:14,799 --> 01:09:18,080
met commercially as much as

01:09:16,480 --> 01:09:19,920
in supervised learning with all the

01:09:18,080 --> 01:09:21,679
image recognition networks for example

01:09:19,920 --> 01:09:23,120
that have had a lot of commercial impact

01:09:21,679 --> 01:09:24,719
i think one of the reasons that deep

01:09:23,120 --> 01:09:26,319
reinforcement learning hasn't had this

01:09:24,719 --> 01:09:28,400
impact although there's many reasons

01:09:26,319 --> 01:09:29,839
one is that it is really critical if you

01:09:28,400 --> 01:09:30,480
have an agent doing things in the world

01:09:29,839 --> 01:09:32,080
to understand

01:09:30,480 --> 01:09:34,319
why it's doing what it's doing make sure

01:09:32,080 --> 01:09:35,279
it's not exploding some sort of trivial

01:09:34,319 --> 01:09:36,880
edge case that's not going to

01:09:35,279 --> 01:09:38,080
malfunction horribly

01:09:36,880 --> 01:09:39,920
if you go a little bit outside the

01:09:38,080 --> 01:09:41,839
training distribution so just as

01:09:39,920 --> 01:09:43,359
explainable ai is important for

01:09:41,839 --> 01:09:44,400
supervised learning it's also important

01:09:43,359 --> 01:09:45,440
for reinforcement learning and this

01:09:44,400 --> 01:09:49,920
project is about

01:09:45,440 --> 01:09:52,719
trying to make um interpretability of

01:09:49,920 --> 01:09:53,600
an understanding of um deep reinforced

01:09:52,719 --> 01:09:56,640
learning agents

01:09:53,600 --> 01:09:59,360
easier so this kind of coming back to

01:09:56,640 --> 01:10:02,159
the headline i mentioned earlier

01:09:59,360 --> 01:10:03,040
and just a little backstory is that we

01:10:02,159 --> 01:10:05,679
came upon

01:10:03,040 --> 01:10:07,199
this project because we we did some work

01:10:05,679 --> 01:10:07,760
with evolutionary algorithms training

01:10:07,199 --> 01:10:10,400
them on

01:10:07,760 --> 01:10:11,440
on atari and we wanted to compare these

01:10:10,400 --> 01:10:13,199
agents

01:10:11,440 --> 01:10:15,199
to the agents that were kind of created

01:10:13,199 --> 01:10:17,760
by more traditional rl agents

01:10:15,199 --> 01:10:19,360
and when we embarked upon that journey

01:10:17,760 --> 01:10:20,880
it turned out it was really hard

01:10:19,360 --> 01:10:22,960
and so like this this kind of was born

01:10:20,880 --> 01:10:23,840
out of just a personal desire to to do

01:10:22,960 --> 01:10:25,440
something

01:10:23,840 --> 01:10:27,040
and finding is so so hard to do it

01:10:25,440 --> 01:10:27,840
unless you have to like retrain agents

01:10:27,040 --> 01:10:29,040
you have to kind of

01:10:27,840 --> 01:10:31,120
figure all these different code bases

01:10:29,040 --> 01:10:32,400
for all these different rl algorithms

01:10:31,120 --> 01:10:35,360
it takes a lot of work it's really

01:10:32,400 --> 01:10:36,880
annoying but

01:10:35,360 --> 01:10:38,800
with the software we've created it makes

01:10:36,880 --> 01:10:40,640
it a lot easier so now you can just say

01:10:38,800 --> 01:10:44,320
i want to download the model

01:10:40,640 --> 01:10:47,199
for the algorithm a2c that was trained

01:10:44,320 --> 01:10:48,800
on seaquest a particular atari game and

01:10:47,199 --> 01:10:50,080
then i would grab the frames

01:10:48,800 --> 01:10:51,040
of animation to see what the agent was

01:10:50,080 --> 01:10:52,480
doing i want to get the the

01:10:51,040 --> 01:10:54,480
representations

01:10:52,480 --> 01:10:55,840
to understand how from a high-level

01:10:54,480 --> 01:10:58,000
neural network was seeing the world and

01:10:55,840 --> 01:11:00,239
you just kind of plot them

01:10:58,000 --> 01:11:02,000
so that gives us sort of what the atari

01:11:00,239 --> 01:11:05,120
zoo project

01:11:02,000 --> 01:11:06,560
is which is uh just a lot of

01:11:05,120 --> 01:11:08,000
trained models and in some ways you know

01:11:06,560 --> 01:11:09,120
this is another form of open source

01:11:08,000 --> 01:11:11,360
where you're just releasing

01:11:09,120 --> 01:11:12,800
not only the code but the trained models

01:11:11,360 --> 01:11:16,080
that are the code

01:11:12,800 --> 01:11:16,880
plus data and so on and so we release

01:11:16,080 --> 01:11:18,400
train models across

01:11:16,880 --> 01:11:20,480
all the different games that atari

01:11:18,400 --> 01:11:22,000
trained in all different algorithms

01:11:20,480 --> 01:11:24,080
across different independent runs so a

01:11:22,000 --> 01:11:24,719
lot of data and then also accompanying

01:11:24,080 --> 01:11:28,800
software

01:11:24,719 --> 01:11:30,400
that can help to analyze that that data

01:11:28,800 --> 01:11:32,239
and i want to note that we built on two

01:11:30,400 --> 01:11:33,520
previous libraries a beautiful aspect of

01:11:32,239 --> 01:11:35,120
open source is being able to build on

01:11:33,520 --> 01:11:36,719
each other's projects and our project is

01:11:35,120 --> 01:11:38,400
also open source

01:11:36,719 --> 01:11:41,120
but lucid and dopamine are two cool

01:11:38,400 --> 01:11:42,400
projects that we found useful

01:11:41,120 --> 01:11:44,400
and now i'll just talk about some things

01:11:42,400 --> 01:11:45,920
you can do with the this model zoo and

01:11:44,400 --> 01:11:47,840
why it's interesting so one thing is you

01:11:45,920 --> 01:11:50,239
can just quickly create a lot of videos

01:11:47,840 --> 01:11:51,520
we can just qualitatively glance at the

01:11:50,239 --> 01:11:53,440
different kinds of things that different

01:11:51,520 --> 01:11:56,640
algorithms are learning

01:11:53,440 --> 01:11:59,360
so here we have three independent runs

01:11:56,640 --> 01:12:00,239
of three rl algorithms trained on

01:11:59,360 --> 01:12:02,000
sequest

01:12:00,239 --> 01:12:03,520
and these policy search algorithms ones

01:12:02,000 --> 01:12:06,080
that are highlighted in green are all

01:12:03,520 --> 01:12:07,840
finding the same local

01:12:06,080 --> 01:12:09,199
sort of degenerate behavior just going

01:12:07,840 --> 01:12:10,080
to the bottom of the ocean just sitting

01:12:09,199 --> 01:12:12,000
there whereas

01:12:10,080 --> 01:12:13,440
the other um our algorithms are finding

01:12:12,000 --> 01:12:15,760
more sophisticated policies so you can

01:12:13,440 --> 01:12:17,760
quickly identify this pathology

01:12:15,760 --> 01:12:19,520
you can also look at the internals of

01:12:17,760 --> 01:12:20,640
the the neural networks and understand

01:12:19,520 --> 01:12:22,640
something about the brains that these

01:12:20,640 --> 01:12:24,800
different agents are

01:12:22,640 --> 01:12:26,239
creating so this is once again in

01:12:24,800 --> 01:12:28,719
sequest and just comparing

01:12:26,239 --> 01:12:30,320
sort of some of the early layers of

01:12:28,719 --> 01:12:33,120
these neural networks to each other

01:12:30,320 --> 01:12:34,640
and the non-evolutionary algorithm

01:12:33,120 --> 01:12:35,920
methods are finding

01:12:34,640 --> 01:12:37,520
what are called filters that have a lot

01:12:35,920 --> 01:12:37,840
more structure than the evolutionary

01:12:37,520 --> 01:12:39,360
ones

01:12:37,840 --> 01:12:40,560
again hinting that the evolutionary ones

01:12:39,360 --> 01:12:41,600
are doing something different maybe a

01:12:40,560 --> 01:12:44,960
little bit more

01:12:41,600 --> 01:12:47,120
um superficial than the other algorithms

01:12:44,960 --> 01:12:48,400
and similarly if we look at how much

01:12:47,120 --> 01:12:50,400
attention different algorithms are

01:12:48,400 --> 01:12:51,440
paying to the present versus the past

01:12:50,400 --> 01:12:53,360
something you could do by looking at

01:12:51,440 --> 01:12:55,120
their brains the first layers of their

01:12:53,360 --> 01:12:56,400
brains

01:12:55,120 --> 01:12:58,800
then we find again that evolutionary

01:12:56,400 --> 01:13:01,520
algorithms are different so just kind of

01:12:58,800 --> 01:13:03,199
some initial validation that we can use

01:13:01,520 --> 01:13:04,320
this data set to make interesting

01:13:03,199 --> 01:13:06,000
discoveries about

01:13:04,320 --> 01:13:08,719
how different kinds of algorithms are

01:13:06,000 --> 01:13:12,000
the same or different you can also

01:13:08,719 --> 01:13:13,679
um kind of like test these trained

01:13:12,000 --> 01:13:14,719
agents in different scenarios to see how

01:13:13,679 --> 01:13:16,560
robust they are

01:13:14,719 --> 01:13:17,840
to see if they break which algorithms

01:13:16,560 --> 01:13:19,679
are more likely to break and one way to

01:13:17,840 --> 01:13:22,239
do this is to sort of add fog to their

01:13:19,679 --> 01:13:24,800
inputs to add more noise to their inputs

01:13:22,239 --> 01:13:25,280
to see if that added fog causes them to

01:13:24,800 --> 01:13:26,800
fail

01:13:25,280 --> 01:13:29,360
and one thing we discovered is that the

01:13:26,800 --> 01:13:31,679
what are called policy search algorithms

01:13:29,360 --> 01:13:32,400
were more robust to this kind of fog

01:13:31,679 --> 01:13:35,679
than were

01:13:32,400 --> 01:13:36,880
the um the value-based uh reinforced

01:13:35,679 --> 01:13:38,560
learning algorithms just two different

01:13:36,880 --> 01:13:40,640
classes of our algorithms

01:13:38,560 --> 01:13:42,480
and the final thing you can do is have

01:13:40,640 --> 01:13:45,920
some neuroscience almost where you

01:13:42,480 --> 01:13:47,440
can visualize the activity of the brain

01:13:45,920 --> 01:13:48,640
which is on the right along with the

01:13:47,440 --> 01:13:50,400
agent acting

01:13:48,640 --> 01:13:52,000
in the world and you can make some

01:13:50,400 --> 01:13:54,239
interesting discovery so if we zoom in

01:13:52,000 --> 01:13:55,520
to just one neuron of this brain this is

01:13:54,239 --> 01:13:56,320
sort of in the later layers of the

01:13:55,520 --> 01:13:58,640
neural network

01:13:56,320 --> 01:13:59,360
we see that it's actually found a a

01:13:58,640 --> 01:14:02,320
neuron

01:13:59,360 --> 01:14:04,400
that um that tracks the sub it's kind of

01:14:02,320 --> 01:14:05,840
interesting discovery

01:14:04,400 --> 01:14:08,239
and there's a web tool that you can look

01:14:05,840 --> 01:14:11,920
at where you yourself could

01:14:08,239 --> 01:14:13,520
explore these sorts of

01:14:11,920 --> 01:14:16,080
activation patterns and see if you can

01:14:13,520 --> 01:14:19,199
find other kind of interesting neurons

01:14:16,080 --> 01:14:20,560
so to close there's a lot of things we

01:14:19,199 --> 01:14:22,239
might hope to do

01:14:20,560 --> 01:14:23,679
might hope to expand beyond atari and

01:14:22,239 --> 01:14:25,520
look at other more real world domains we

01:14:23,679 --> 01:14:27,040
might add more analysis and metrics

01:14:25,520 --> 01:14:28,239
i just want to end with the idea that

01:14:27,040 --> 01:14:29,360
maybe there's some really interesting

01:14:28,239 --> 01:14:30,640
discoveries that have been waiting to

01:14:29,360 --> 01:14:32,480
find this big data set

01:14:30,640 --> 01:14:34,000
by both professional researchers and

01:14:32,480 --> 01:14:35,520
citizen scientists so i actually

01:14:34,000 --> 01:14:37,600
i hope that you will check out our

01:14:35,520 --> 01:14:40,080
project there's all these co-authors who

01:14:37,600 --> 01:14:42,480
um contributed to this work um some of

01:14:40,080 --> 01:14:44,640
google ai some at openai

01:14:42,480 --> 01:14:45,760
here's their pictures and to conclude

01:14:44,640 --> 01:14:47,360
you know feel free to

01:14:45,760 --> 01:14:49,120
send me messages to the conference chat

01:14:47,360 --> 01:14:50,159
and message system really excited to see

01:14:49,120 --> 01:14:52,560
how people use this

01:14:50,159 --> 01:14:56,719
and looking forward to talking with you

01:14:52,560 --> 01:14:59,199
so thank you very much

01:14:56,719 --> 01:15:01,760
thank you very much joel uh i would love

01:14:59,199 --> 01:15:05,040
to see your algorithm applied to

01:15:01,760 --> 01:15:06,000
uh find the easter egg in the 1980

01:15:05,040 --> 01:15:08,880
adventure game

01:15:06,000 --> 01:15:09,520
from atari uh but really interesting

01:15:08,880 --> 01:15:11,679
stuff

01:15:09,520 --> 01:15:13,679
go check out their website if you would

01:15:11,679 --> 01:15:17,280
like to see more

01:15:13,679 --> 01:15:20,560
uh our next speaker is kirsten anovich

01:15:17,280 --> 01:15:23,520
uh chairman of the risk five foundation

01:15:20,560 --> 01:15:25,199
chief architect and co-founder of sci-fi

01:15:23,520 --> 01:15:26,880
and a professor in the department of

01:15:25,199 --> 01:15:28,159
electronic engineering and computer

01:15:26,880 --> 01:15:30,480
science at uc

01:15:28,159 --> 01:15:32,880
berkeley where he also leads the free

01:15:30,480 --> 01:15:34,800
risk five isa project

01:15:32,880 --> 01:15:36,080
the most important interface in a

01:15:34,800 --> 01:15:38,960
computing system

01:15:36,080 --> 01:15:39,840
is the instruction set architecture as

01:15:38,960 --> 01:15:42,880
it connects

01:15:39,840 --> 01:15:44,880
software to hardware today

01:15:42,880 --> 01:15:45,920
cursed day will discuss the risk five

01:15:44,880 --> 01:15:48,480
project

01:15:45,920 --> 01:15:50,480
and while which provides a free and open

01:15:48,480 --> 01:15:51,199
alternative to proprietary instruction

01:15:50,480 --> 01:15:53,120
sets

01:15:51,199 --> 01:15:54,320
with the promise of opening up heart the

01:15:53,120 --> 01:15:56,719
hardware world

01:15:54,320 --> 01:15:59,120
to the same kind of rapid innovation

01:15:56,719 --> 01:16:07,520
seen with open source software

01:15:59,120 --> 01:16:10,880
please welcome kirsten

01:16:07,520 --> 01:16:14,159
hi uh thanks jim for the introduction um

01:16:10,880 --> 01:16:16,080
really excited to be here at the um to

01:16:14,159 --> 01:16:17,840
talk at this open source event opens a

01:16:16,080 --> 01:16:18,320
software event about our project on open

01:16:17,840 --> 01:16:21,679
source

01:16:18,320 --> 01:16:23,440
hardware so risk 5 is an instruction set

01:16:21,679 --> 01:16:25,360
and the motto is that instruction sets

01:16:23,440 --> 01:16:27,520
want to be free

01:16:25,360 --> 01:16:28,800
but first i think it's kind of useful to

01:16:27,520 --> 01:16:29,360
kind of explain to people why

01:16:28,800 --> 01:16:31,199
instruction

01:16:29,360 --> 01:16:32,480
said architecture actually matters why

01:16:31,199 --> 01:16:34,719
are isas

01:16:32,480 --> 01:16:35,520
important and the way i like to uh

01:16:34,719 --> 01:16:38,719
answer this

01:16:35,520 --> 01:16:41,199
question is by asking some questions um

01:16:38,719 --> 01:16:42,719
why can't intel sell mobile chips um

01:16:41,199 --> 01:16:43,679
they're a big powerful semiconductor

01:16:42,719 --> 01:16:45,120
company how come

01:16:43,679 --> 01:16:46,960
them they're not in mobile chips

01:16:45,120 --> 01:16:47,440
everywhere and the answer is pretty

01:16:46,960 --> 01:16:49,199
simple

01:16:47,440 --> 01:16:51,920
is that most of the mobile phone tablet

01:16:49,199 --> 01:16:55,199
software requires an arm-based isa

01:16:51,920 --> 01:16:58,239
and so almost uh universally you need a

01:16:55,199 --> 01:17:00,719
arm-based isa to run any mobile software

01:16:58,239 --> 01:17:02,239
um conversely you know why is arm

01:17:00,719 --> 01:17:02,880
partners having a hard time selling

01:17:02,239 --> 01:17:04,560
surface

01:17:02,880 --> 01:17:06,080
and the answer is most service systems

01:17:04,560 --> 01:17:09,199
expect to be running on

01:17:06,080 --> 01:17:11,600
actually an amd 64 isa uh

01:17:09,199 --> 01:17:13,840
a side question that might raise is how

01:17:11,600 --> 01:17:16,080
come intel is making all this money

01:17:13,840 --> 01:17:17,040
selling servers based on an amd designed

01:17:16,080 --> 01:17:18,880
isa

01:17:17,040 --> 01:17:20,080
and the history of that is that intel

01:17:18,880 --> 01:17:21,520
actually tried to

01:17:20,080 --> 01:17:23,760
move the whole industry over to a

01:17:21,520 --> 01:17:26,159
different isa titanium

01:17:23,760 --> 01:17:27,679
thankfully they failed now but intel is

01:17:26,159 --> 01:17:29,679
still doing quite well selling

01:17:27,679 --> 01:17:31,920
machines based on this imd amd's

01:17:29,679 --> 01:17:33,440
designed isa

01:17:31,920 --> 01:17:36,320
finally how can ibm still sell

01:17:33,440 --> 01:17:38,080
mainframes so if you look at the ibm z

01:17:36,320 --> 01:17:39,600
series it can trace its routes back to

01:17:38,080 --> 01:17:42,080
the ibm 360

01:17:39,600 --> 01:17:45,199
which is the oldest surviving isa over

01:17:42,080 --> 01:17:47,280
50 years now this is been in existence

01:17:45,199 --> 01:17:48,640
and actually the 360 when it was

01:17:47,280 --> 01:17:50,960
introduced actually also

01:17:48,640 --> 01:17:52,159
introduced the notion of an instruction

01:17:50,960 --> 01:17:54,640
set architecture

01:17:52,159 --> 01:17:55,920
the idea that you should separate the

01:17:54,640 --> 01:17:57,920
software interface

01:17:55,920 --> 01:18:00,400
to a hardware platform from the actual

01:17:57,920 --> 01:18:02,239
implementation of that platform

01:18:00,400 --> 01:18:03,920
um so the instruction set is really the

01:18:02,239 --> 01:18:05,760
most important interface in a computer

01:18:03,920 --> 01:18:07,120
system because it's where software meets

01:18:05,760 --> 01:18:09,360
hardware

01:18:07,120 --> 01:18:11,199
so in the rest of the computing we have

01:18:09,360 --> 01:18:13,360
open interfaces so if you look at

01:18:11,199 --> 01:18:15,120
networking with ethernet operating

01:18:13,360 --> 01:18:18,400
systems with posix

01:18:15,120 --> 01:18:20,640
languages like c databases we have sql

01:18:18,400 --> 01:18:22,880
graphics opengl we have open standard

01:18:20,640 --> 01:18:24,159
interfaces all throughout our industry

01:18:22,880 --> 01:18:26,560
but we haven't had that at the

01:18:24,159 --> 01:18:28,640
instruction set level so why is that why

01:18:26,560 --> 01:18:30,719
are we being stuck on proprietary owned

01:18:28,640 --> 01:18:33,920
interfaces x86 arm

01:18:30,719 --> 01:18:35,280
ibm 360. um we think there's no good

01:18:33,920 --> 01:18:37,040
reason and that's part of the premise of

01:18:35,280 --> 01:18:39,600
the risk 5 project is we should have an

01:18:37,040 --> 01:18:41,199
open interface there

01:18:39,600 --> 01:18:42,640
now you may say why do we worry about

01:18:41,199 --> 01:18:45,199
whether a company owns

01:18:42,640 --> 01:18:46,480
the instruction set or not well one big

01:18:45,199 --> 01:18:48,400
challenge is that companies and their

01:18:46,480 --> 01:18:50,320
instruction sets come and go

01:18:48,400 --> 01:18:52,159
so it used to be a very big and

01:18:50,320 --> 01:18:53,520
important computer company on the east

01:18:52,159 --> 01:18:54,400
coast called digital equipment

01:18:53,520 --> 01:18:55,600
corporation

01:18:54,400 --> 01:18:57,920
and they had some very important

01:18:55,600 --> 01:19:00,719
instruction sets pdp 11 vax

01:18:57,920 --> 01:19:02,400
alpha but they're gone now and if you

01:19:00,719 --> 01:19:03,760
built your software world around these

01:19:02,400 --> 01:19:04,960
instruction sets

01:19:03,760 --> 01:19:06,800
there's nothing you can do you have to

01:19:04,960 --> 01:19:08,320
move to a new instruction set now

01:19:06,800 --> 01:19:09,679
and it's not something you did wrong

01:19:08,320 --> 01:19:10,480
it's something that happened with the

01:19:09,679 --> 01:19:12,159
business fortunes

01:19:10,480 --> 01:19:13,440
the company that owned that instruction

01:19:12,159 --> 01:19:14,400
set interface you built your world

01:19:13,440 --> 01:19:16,239
around

01:19:14,400 --> 01:19:17,760
um intel they're obviously still around

01:19:16,239 --> 01:19:20,320
very popular but they've had a lot of

01:19:17,760 --> 01:19:22,320
instruction sets come and go i-960 i860

01:19:20,320 --> 01:19:24,239
itinerary we talked about

01:19:22,320 --> 01:19:26,080
um mips is one of the early risk

01:19:24,239 --> 01:19:26,960
architectures this is an interesting

01:19:26,080 --> 01:19:28,719
case um

01:19:26,960 --> 01:19:30,800
they were successful for a while then

01:19:28,719 --> 01:19:33,920
you know at a downturn

01:19:30,800 --> 01:19:36,560
uh they sold to imagination imagination

01:19:33,920 --> 01:19:37,760
sold them to waive a startup i'd wave

01:19:36,560 --> 01:19:40,239
they decided they would

01:19:37,760 --> 01:19:40,960
inspired by the risk five wave they

01:19:40,239 --> 01:19:43,040
decided to

01:19:40,960 --> 01:19:45,280
open up lips isa but then they decided

01:19:43,040 --> 01:19:47,040
to close it down again

01:19:45,280 --> 01:19:48,719
spark is another interesting example of

01:19:47,040 --> 01:19:50,400
an early risk

01:19:48,719 --> 01:19:51,840
one of the first risk architectures and

01:19:50,400 --> 01:19:54,480
actually this was one of the first open

01:19:51,840 --> 01:19:57,360
isas as well back in 1994

01:19:54,480 --> 01:19:58,960
um sun made the spark version 8 the

01:19:57,360 --> 01:20:00,719
32-bit version of the isa

01:19:58,960 --> 01:20:02,000
had opened standard with the ieee and

01:20:00,719 --> 01:20:03,920
there were a lot of companies building

01:20:02,000 --> 01:20:05,440
implementations around spark then

01:20:03,920 --> 01:20:07,840
but then later sun was acquired by

01:20:05,440 --> 01:20:08,639
oracle and the 64-bit instruction set

01:20:07,840 --> 01:20:10,480
was closed

01:20:08,639 --> 01:20:12,719
up and then finally oracle just closed

01:20:10,480 --> 01:20:16,320
down all of spark development completely

01:20:12,719 --> 01:20:18,239
um arm is a big powerful company now in

01:20:16,320 --> 01:20:19,440
better processing but there were some

01:20:18,239 --> 01:20:20,320
shockwaves when they were sold to

01:20:19,440 --> 01:20:21,600
softbank

01:20:20,320 --> 01:20:23,600
taking private so now they're a

01:20:21,600 --> 01:20:25,120
privately run company um

01:20:23,600 --> 01:20:26,880
and so you know people are worried about

01:20:25,120 --> 01:20:29,840
what will happen to the future this

01:20:26,880 --> 01:20:31,440
uh isa now so basically companies in

01:20:29,840 --> 01:20:32,000
their isas come and go and if you tie

01:20:31,440 --> 01:20:34,159
your software

01:20:32,000 --> 01:20:35,120
stack to this proprietary instruction

01:20:34,159 --> 01:20:36,639
set you'll have to

01:20:35,120 --> 01:20:38,560
face the fact that maybe in the future

01:20:36,639 --> 01:20:40,080
due to something outside your control

01:20:38,560 --> 01:20:41,840
you'll have to move your instruction set

01:20:40,080 --> 01:20:44,560
and move all your software

01:20:41,840 --> 01:20:46,320
now it's not only that there are a lot

01:20:44,560 --> 01:20:48,239
of different companies providing isas

01:20:46,320 --> 01:20:50,639
even if you look at a single chip

01:20:48,239 --> 01:20:52,480
um a single soc today you'll see there

01:20:50,639 --> 01:20:52,960
are many instruction sets on that single

01:20:52,480 --> 01:20:54,960
eyes

01:20:52,960 --> 01:20:56,560
on that single soc you know as well as

01:20:54,960 --> 01:20:57,360
the applications processor which is

01:20:56,560 --> 01:20:59,199
usually on this

01:20:57,360 --> 01:21:01,199
these days you'll see there is a

01:20:59,199 --> 01:21:02,880
graphics image it's radio

01:21:01,199 --> 01:21:04,239
audio security processes power

01:21:02,880 --> 01:21:06,080
management processes

01:21:04,239 --> 01:21:07,840
and it's not unusual to find over a

01:21:06,080 --> 01:21:08,800
dozen different instruction sets on a

01:21:07,840 --> 01:21:10,000
single chip

01:21:08,800 --> 01:21:13,199
and each of these will have their own

01:21:10,000 --> 01:21:14,960
software stack so why are there so many

01:21:13,199 --> 01:21:16,400
well one reason is that the applications

01:21:14,960 --> 01:21:19,199
processor instruction set

01:21:16,400 --> 01:21:20,400
wasn't really designed as the basis for

01:21:19,199 --> 01:21:21,360
an accelerator or one of these

01:21:20,400 --> 01:21:23,040
specialized

01:21:21,360 --> 01:21:24,800
architectures and as a result it's just

01:21:23,040 --> 01:21:27,040
too big and it's not a good choice

01:21:24,800 --> 01:21:28,400
to base these other ones around second

01:21:27,040 --> 01:21:29,920
even if you wanted to

01:21:28,400 --> 01:21:32,080
you wouldn't be able to because of the

01:21:29,920 --> 01:21:34,400
licensing terms so when somebody

01:21:32,080 --> 01:21:36,639
assembles an soc they license ip from

01:21:34,400 --> 01:21:38,320
many vendors and each of those vendors

01:21:36,639 --> 01:21:40,159
is not able to use one of the

01:21:38,320 --> 01:21:41,520
proprietary standard isas when they

01:21:40,159 --> 01:21:43,440
design their own ip

01:21:41,520 --> 01:21:44,719
and so they design their own isa because

01:21:43,440 --> 01:21:46,000
they need to

01:21:44,719 --> 01:21:47,440
but one of the worst things that can

01:21:46,000 --> 01:21:49,360
happen also is when you're building this

01:21:47,440 --> 01:21:50,639
slc the engineers your company may

01:21:49,360 --> 01:21:51,840
decide they should just go build their

01:21:50,639 --> 01:21:53,600
own isa

01:21:51,840 --> 01:21:54,880
for one of the cores on the chip which

01:21:53,600 --> 01:21:56,400
then means they have to support the

01:21:54,880 --> 01:21:59,840
software for that

01:21:56,400 --> 01:22:01,760
core for for all time afterwards

01:21:59,840 --> 01:22:03,760
so do we really need all these different

01:22:01,760 --> 01:22:04,880
instruction sets and do they have to be

01:22:03,760 --> 01:22:08,159
proprietary

01:22:04,880 --> 01:22:10,000
and do they have to keep disappearing um

01:22:08,159 --> 01:22:11,760
what if there was just one stable free

01:22:10,000 --> 01:22:13,280
and open isa everybody could use for

01:22:11,760 --> 01:22:14,400
everything and that's really the premise

01:22:13,280 --> 01:22:15,760
behind risk five

01:22:14,400 --> 01:22:17,679
why don't we just have a single one that

01:22:15,760 --> 01:22:18,719
can serve all these purposes that's not

01:22:17,679 --> 01:22:21,040
owned by anybody

01:22:18,719 --> 01:22:23,199
and everybody can use for everything so

01:22:21,040 --> 01:22:24,960
the genesis of risk five really was

01:22:23,199 --> 01:22:26,560
uh back in our research group in

01:22:24,960 --> 01:22:27,760
berkeley in 2010

01:22:26,560 --> 01:22:30,239
we've been doing a lot of research

01:22:27,760 --> 01:22:31,840
projects i needed a new isa to base the

01:22:30,239 --> 01:22:33,120
next set of projects around

01:22:31,840 --> 01:22:34,880
we took a look at industry and the

01:22:33,120 --> 01:22:36,480
obvious choices at the time still

01:22:34,880 --> 01:22:38,880
today would be maybe the obvious choice

01:22:36,480 --> 01:22:40,880
x86 and r and the issues were that they

01:22:38,880 --> 01:22:42,480
were just impossible to use for one

01:22:40,880 --> 01:22:44,400
thing they were very complicated and we

01:22:42,480 --> 01:22:47,600
wanted to build very simple efficient

01:22:44,400 --> 01:22:49,360
implementations with a small team also

01:22:47,600 --> 01:22:50,239
there were the ip issues we wanted to

01:22:49,360 --> 01:22:51,920
build cores

01:22:50,239 --> 01:22:53,440
and share this with a community open

01:22:51,920 --> 01:22:54,719
source the implementations but it would

01:22:53,440 --> 01:22:56,159
not be possible

01:22:54,719 --> 01:22:57,840
uh with these instruction sets it's

01:22:56,159 --> 01:22:58,960
simply not legally possible to share

01:22:57,840 --> 01:23:01,520
implementations of these

01:22:58,960 --> 01:23:02,560
isas so we decided to do our own queen

01:23:01,520 --> 01:23:04,960
slate isa

01:23:02,560 --> 01:23:06,719
we thought it'd be a three month project

01:23:04,960 --> 01:23:08,320
i'll give a shout out to the principal

01:23:06,719 --> 01:23:09,600
designers andrew waterman and young sub

01:23:08,320 --> 01:23:09,920
lee who were graduate students of the

01:23:09,600 --> 01:23:12,000
time

01:23:09,920 --> 01:23:13,440
and my colleague dave patterson we're

01:23:12,000 --> 01:23:14,800
the main designers so many people helped

01:23:13,440 --> 01:23:15,760
us out along the way in designing the

01:23:14,800 --> 01:23:18,480
isa

01:23:15,760 --> 01:23:19,840
after four years we um the three-month

01:23:18,480 --> 01:23:20,639
project actually took more like four

01:23:19,840 --> 01:23:22,800
years

01:23:20,639 --> 01:23:23,840
but we had a frozen spec at that point

01:23:22,800 --> 01:23:26,000
and we done many tape

01:23:23,840 --> 01:23:28,320
outs and ported software and iterated on

01:23:26,000 --> 01:23:30,639
this many times in the meantime

01:23:28,320 --> 01:23:32,480
so it's called risk five pronouncer is

01:23:30,639 --> 01:23:34,000
five uh because it's the fifth major

01:23:32,480 --> 01:23:35,920
berkeley risk isa

01:23:34,000 --> 01:23:37,600
so going back to the original risk wide

01:23:35,920 --> 01:23:39,600
and risk two projects from the early

01:23:37,600 --> 01:23:41,760
eighties dave patterson always regrets

01:23:39,600 --> 01:23:43,679
not keeping the brand so we went back

01:23:41,760 --> 01:23:45,840
and posthumously renamed

01:23:43,679 --> 01:23:47,199
uh the soar and spur projects risk three

01:23:45,840 --> 01:23:48,639
and risk four and that's how we got to

01:23:47,199 --> 01:23:51,760
risk five

01:23:48,639 --> 01:23:53,679
and notice risk five and not risk v

01:23:51,760 --> 01:23:55,040
because the first two projects were risk

01:23:53,679 --> 01:23:58,560
one and risk two not risk

01:23:55,040 --> 01:23:58,560
i and risk ii right

01:23:58,719 --> 01:24:03,120
so we had a we were working on this isa

01:24:01,360 --> 01:24:05,040
that we started getting external

01:24:03,120 --> 01:24:06,320
uh emails from people asking about the

01:24:05,040 --> 01:24:07,360
instruction set wondering why we're

01:24:06,320 --> 01:24:09,199
changing things around

01:24:07,360 --> 01:24:11,920
let me realize those external interests

01:24:09,199 --> 01:24:15,120
in this project we've been doing

01:24:11,920 --> 01:24:16,639
so at hardship's conference in 2014 we

01:24:15,120 --> 01:24:19,520
made this major promotional push where

01:24:16,639 --> 01:24:20,880
we all dressed up in these blue t-shirts

01:24:19,520 --> 01:24:22,960
and promoted the idea there should be a

01:24:20,880 --> 01:24:25,600
free and open instruction set we had an

01:24:22,960 --> 01:24:27,440
amazingly positive response at hardships

01:24:25,600 --> 01:24:29,679
and many people from industry told us

01:24:27,440 --> 01:24:31,360
this was something they really needed

01:24:29,679 --> 01:24:32,719
out there there really was a big hole in

01:24:31,360 --> 01:24:35,840
the market for an open

01:24:32,719 --> 01:24:37,679
instruction set but one thing they said

01:24:35,840 --> 01:24:38,320
was it cannot stay just a university

01:24:37,679 --> 01:24:39,920
project

01:24:38,320 --> 01:24:41,199
we really need a more stable home for

01:24:39,920 --> 01:24:42,719
something if we're going to build the

01:24:41,199 --> 01:24:44,880
industry around us

01:24:42,719 --> 01:24:45,920
so in 2015 we created the wrist five

01:24:44,880 --> 01:24:48,080
foundation

01:24:45,920 --> 01:24:50,560
the to be a non-profit entity to

01:24:48,080 --> 01:24:52,719
basically manage the risk 5 standard

01:24:50,560 --> 01:24:55,040
now recently we've reincorporated the

01:24:52,719 --> 01:24:56,719
foundation as risk 5 international

01:24:55,040 --> 01:24:58,560
housed in switzerland to really

01:24:56,719 --> 01:25:00,800
reinforce the message that risk five is

01:24:58,560 --> 01:25:03,440
intended as a global standard

01:25:00,800 --> 01:25:04,080
so i'll give you some examples um in

01:25:03,440 --> 01:25:07,280
china

01:25:04,080 --> 01:25:08,880
uh many members a lot of interest both

01:25:07,280 --> 01:25:12,400
in industry academia

01:25:08,880 --> 01:25:17,280
in using risk five um in

01:25:12,400 --> 01:25:19,600
um in europe oops sorry let me go back

01:25:17,280 --> 01:25:21,440
uh china and europe uh the european

01:25:19,600 --> 01:25:22,880
process initiative reece announced

01:25:21,440 --> 01:25:24,480
that declared risk five is a key

01:25:22,880 --> 01:25:26,239
architecture that will be used to build

01:25:24,480 --> 01:25:30,159
high performance computing

01:25:26,239 --> 01:25:31,840
accelerators to use in hpc systems

01:25:30,159 --> 01:25:33,520
in india was one actually one of the

01:25:31,840 --> 01:25:35,920
first countries to

01:25:33,520 --> 01:25:37,040
seriously adopt rs5 and they funded a

01:25:35,920 --> 01:25:39,760
number of projects

01:25:37,040 --> 01:25:41,040
including at iat madras the shakti

01:25:39,760 --> 01:25:43,360
project which is developing

01:25:41,040 --> 01:25:45,600
six open source risk five processors

01:25:43,360 --> 01:25:47,280
that can be used by anybody

01:25:45,600 --> 01:25:48,639
japan we've seen increasing momentum

01:25:47,280 --> 01:25:49,440
many more people showing up at the

01:25:48,639 --> 01:25:52,159
events

01:25:49,440 --> 01:25:53,679
in japan and here in north america

01:25:52,159 --> 01:25:54,960
widespread industry adoption

01:25:53,679 --> 01:25:56,800
and already we're shipping millions of

01:25:54,960 --> 01:25:58,719
cores using risk five for example every

01:25:56,800 --> 01:26:00,320
nvidia gpu right now is shipping with

01:25:58,719 --> 01:26:01,920
risk five cores in there

01:26:00,320 --> 01:26:03,679
uh western digital announced they'll

01:26:01,920 --> 01:26:05,840
move their entire product line

01:26:03,679 --> 01:26:07,440
um to risk five and there's many other

01:26:05,840 --> 01:26:10,480
companies providing risk five cores and

01:26:07,440 --> 01:26:12,159
selling them inside the us

01:26:10,480 --> 01:26:14,400
now one thing that may surprise you is

01:26:12,159 --> 01:26:16,880
the biggest risk five event we've had so

01:26:14,400 --> 01:26:18,400
far was actually in lahore pakistan

01:26:16,880 --> 01:26:20,480
and this is actually a photograph of the

01:26:18,400 --> 01:26:21,040
audience uh i was giving a talk at the

01:26:20,480 --> 01:26:22,800
time

01:26:21,040 --> 01:26:24,800
over three thousand people attending to

01:26:22,800 --> 01:26:26,400
learn about risk five it's really seen

01:26:24,800 --> 01:26:28,239
as an enabling technology

01:26:26,400 --> 01:26:29,679
around the world to help everybody build

01:26:28,239 --> 01:26:32,719
up their own indigenous

01:26:29,679 --> 01:26:32,719
computing technology

01:26:32,800 --> 01:26:37,040
now it's not just academia and

01:26:35,120 --> 01:26:37,760
researchers and hobby is playing risk

01:26:37,040 --> 01:26:39,199
five

01:26:37,760 --> 01:26:41,120
almost the entire industry is very

01:26:39,199 --> 01:26:41,760
seriously approaching risk five this is

01:26:41,120 --> 01:26:43,199
uh

01:26:41,760 --> 01:26:44,480
so the scatter plot of the different

01:26:43,199 --> 01:26:45,040
members we have and i'll point out that

01:26:44,480 --> 01:26:46,719
we have

01:26:45,040 --> 01:26:47,920
nearly all the major semiconductor

01:26:46,719 --> 01:26:49,600
companies and vendors are involved in

01:26:47,920 --> 01:26:53,360
risk five we have ibm

01:26:49,600 --> 01:26:55,280
google qualcomm samsung nvidia

01:26:53,360 --> 01:26:57,040
you name it almost every company who's

01:26:55,280 --> 01:27:00,320
working in this space is interested

01:26:57,040 --> 01:27:02,320
in risk five and the growth of the

01:27:00,320 --> 01:27:04,960
membership has just been incredible uh

01:27:02,320 --> 01:27:06,719
over the last few years um so how does

01:27:04,960 --> 01:27:08,400
risk five work so just quickly describe

01:27:06,719 --> 01:27:10,159
the risk five ecosystem

01:27:08,400 --> 01:27:12,560
uh so the centralized risk five

01:27:10,159 --> 01:27:14,639
international so that we maintain

01:27:12,560 --> 01:27:15,600
uh the specifications and manage the

01:27:14,639 --> 01:27:17,760
interface between

01:27:15,600 --> 01:27:19,040
software and hardware now on the

01:27:17,760 --> 01:27:21,280
hardware side

01:27:19,040 --> 01:27:23,679
it's an open specification and often

01:27:21,280 --> 01:27:24,639
people mistakenly say that risk 5 is an

01:27:23,679 --> 01:27:27,440
open source

01:27:24,639 --> 01:27:29,360
project that's actually incorrect risk 5

01:27:27,440 --> 01:27:31,600
is an open source open

01:27:29,360 --> 01:27:33,199
specification but because it's open it

01:27:31,600 --> 01:27:34,639
means you can't have open source

01:27:33,199 --> 01:27:36,400
implementations and there's a great

01:27:34,639 --> 01:27:37,600
variety of open source cores available

01:27:36,400 --> 01:27:40,480
for risk five right now

01:27:37,600 --> 01:27:41,360
for many places but it's not only open

01:27:40,480 --> 01:27:43,440
source cores

01:27:41,360 --> 01:27:45,920
uh there's also commercially licensed

01:27:43,440 --> 01:27:47,520
cores available for many vendors and

01:27:45,920 --> 01:27:49,760
these vendors are distributed around the

01:27:47,520 --> 01:27:51,199
globe for example alibaba is in china

01:27:49,760 --> 01:27:53,440
and he's in taiwan

01:27:51,199 --> 01:27:55,520
uh kodacip in the czech republic quartus

01:27:53,440 --> 01:27:58,560
in france encore in india

01:27:55,520 --> 01:28:00,560
um sci-fi if in the us

01:27:58,560 --> 01:28:03,600
sintacore and cloudberry in russia so

01:28:00,560 --> 01:28:05,520
already today ris5 has more commercial

01:28:03,600 --> 01:28:08,080
core ip providers than any other

01:28:05,520 --> 01:28:09,840
instruction set in history

01:28:08,080 --> 01:28:11,600
and as well as open source and

01:28:09,840 --> 01:28:13,199
commercially licensed cores

01:28:11,600 --> 01:28:14,880
companies are also free to build their

01:28:13,199 --> 01:28:16,800
own in-house cores this for example is

01:28:14,880 --> 01:28:18,159
what nvidia is doing on the gpus they

01:28:16,800 --> 01:28:20,560
build their own risk 5 core for their

01:28:18,159 --> 01:28:22,159
own internal use

01:28:20,560 --> 01:28:24,639
now similarly on the software side risk

01:28:22,159 --> 01:28:26,880
5 has been adopted up upstream as

01:28:24,639 --> 01:28:28,560
one of the main architectures of many of

01:28:26,880 --> 01:28:29,920
the open source projects

01:28:28,560 --> 01:28:31,600
but it's also being supported by

01:28:29,920 --> 01:28:33,280
commercial software commercial licensed

01:28:31,600 --> 01:28:34,400
software from vendors like lauterbach

01:28:33,280 --> 01:28:36,320
and sega iar

01:28:34,400 --> 01:28:37,760
etc they're all supporting risk fire

01:28:36,320 --> 01:28:38,960
because of the demand from industry for

01:28:37,760 --> 01:28:41,520
these same tools

01:28:38,960 --> 01:28:43,679
and so really risk 5 is the

01:28:41,520 --> 01:28:45,120
specification it's an open specification

01:28:43,679 --> 01:28:46,800
that enables open source

01:28:45,120 --> 01:28:49,280
but it's also being supported by

01:28:46,800 --> 01:28:51,280
commercial entities also

01:28:49,280 --> 01:28:52,880
so what's different about it we made the

01:28:51,280 --> 01:28:55,199
isa very simple

01:28:52,880 --> 01:28:56,000
um we made a very clean slate design

01:28:55,199 --> 01:28:58,639
learning from the

01:28:56,000 --> 01:28:59,520
mistakes of the past we made it very

01:28:58,639 --> 01:29:00,880
modular

01:28:59,520 --> 01:29:02,880
so remember there's a lot of

01:29:00,880 --> 01:29:04,320
accelerators domain specific cores on

01:29:02,880 --> 01:29:06,159
these chips today we wanted to make it

01:29:04,320 --> 01:29:08,719
you only included the pieces you needed

01:29:06,159 --> 01:29:10,080
for each of those applications we made

01:29:08,719 --> 01:29:12,560
it stable we have no commercial

01:29:10,080 --> 01:29:14,000
interest to keep upgrading it and so

01:29:12,560 --> 01:29:16,239
around the community we have is a

01:29:14,000 --> 01:29:17,679
motivation to keep parts stable and not

01:29:16,239 --> 01:29:19,440
change them unnecessarily

01:29:17,679 --> 01:29:21,600
and finally is community design this is

01:29:19,440 --> 01:29:23,760
the big difference we rely on a

01:29:21,600 --> 01:29:24,800
wide range of experts out there to

01:29:23,760 --> 01:29:26,480
engage with us

01:29:24,800 --> 01:29:28,000
to develop all the parts that i say

01:29:26,480 --> 01:29:30,400
including the software community

01:29:28,000 --> 01:29:31,679
and here's just the scatter plot of some

01:29:30,400 --> 01:29:33,280
of the different working groups that are

01:29:31,679 --> 01:29:36,239
right now working on enhancing

01:29:33,280 --> 01:29:36,239
the specification

01:29:36,960 --> 01:29:40,000
it's also being a big factor in

01:29:38,239 --> 01:29:41,760
education we're seeing a big uptake

01:29:40,000 --> 01:29:43,280
it's a natural one for schools it came

01:29:41,760 --> 01:29:45,040
from schools you know part of the reason

01:29:43,280 --> 01:29:46,880
for the design being so simple

01:29:45,040 --> 01:29:48,639
it means you can teach the whole isa in

01:29:46,880 --> 01:29:49,840
one lecture and teach an implementation

01:29:48,639 --> 01:29:51,520
in another lecture

01:29:49,840 --> 01:29:54,960
it's meant to just quickly get people on

01:29:51,520 --> 01:29:57,120
board learning how to do this

01:29:54,960 --> 01:29:59,520
um so why is it so popular i think it's

01:29:57,120 --> 01:30:01,920
important to sort of stop and pause here

01:29:59,520 --> 01:30:03,600
um often i when i talk to engineers they

01:30:01,920 --> 01:30:05,360
sometimes don't see the forest for the

01:30:03,600 --> 01:30:07,520
trees

01:30:05,360 --> 01:30:09,679
the risk five movement isn't happening

01:30:07,520 --> 01:30:11,360
because some particular benchmark around

01:30:09,679 --> 01:30:14,080
10 percent faster or some

01:30:11,360 --> 01:30:15,360
implementation was a bit lower power the

01:30:14,080 --> 01:30:17,040
movement's happening because this is

01:30:15,360 --> 01:30:18,239
really a new business model that changes

01:30:17,040 --> 01:30:19,920
everything

01:30:18,239 --> 01:30:22,320
so prior to this when you're building a

01:30:19,920 --> 01:30:24,639
chip you would first have to go

01:30:22,320 --> 01:30:26,239
um talk to different vendors how they

01:30:24,639 --> 01:30:28,480
compete when you picked a vendor

01:30:26,239 --> 01:30:30,159
you got their instruction set this turns

01:30:28,480 --> 01:30:32,639
it around and says first you decide

01:30:30,159 --> 01:30:34,239
i'm gonna use risk five and then you can

01:30:32,639 --> 01:30:35,600
go out and choose either to pick a

01:30:34,239 --> 01:30:37,520
commercial core from a

01:30:35,600 --> 01:30:39,040
vendor or use an open source core or

01:30:37,520 --> 01:30:40,239
build your own core so you have that

01:30:39,040 --> 01:30:41,760
freedom of choice now

01:30:40,239 --> 01:30:43,760
and also when you go to build the second

01:30:41,760 --> 01:30:45,120
generation of your chip you again can go

01:30:43,760 --> 01:30:46,320
out to the market it makes it very

01:30:45,120 --> 01:30:48,639
competitive market

01:30:46,320 --> 01:30:50,000
for process of cores also because

01:30:48,639 --> 01:30:51,440
effectively everybody has an

01:30:50,000 --> 01:30:53,280
architectural license

01:30:51,440 --> 01:30:54,880
we designed the isa to make it easy to

01:30:53,280 --> 01:30:56,400
add your own extensions without getting

01:30:54,880 --> 01:30:57,920
permission from anybody

01:30:56,400 --> 01:31:00,639
in a way that still lets you run on the

01:30:57,920 --> 01:31:02,159
standard software

01:31:00,639 --> 01:31:03,760
now you may you know pick and poke at

01:31:02,159 --> 01:31:04,960
wrist five and say well i can't find you

01:31:03,760 --> 01:31:07,040
know this implementation

01:31:04,960 --> 01:31:08,719
level or this kind of feature um but

01:31:07,040 --> 01:31:10,239
basically things are moving so fast that

01:31:08,719 --> 01:31:11,440
whatever's broken and missing and risk

01:31:10,239 --> 01:31:12,960
five will get fixed

01:31:11,440 --> 01:31:16,000
and we're working very hard to you know

01:31:12,960 --> 01:31:18,239
fill in the whole ecosystem

01:31:16,000 --> 01:31:20,159
so modest goal this point has really

01:31:18,239 --> 01:31:22,400
become the industry standard isa

01:31:20,159 --> 01:31:23,600
for everything uh and we're pretty far

01:31:22,400 --> 01:31:25,840
along at that goal

01:31:23,600 --> 01:31:27,600
so this event i think uh one of the

01:31:25,840 --> 01:31:29,520
questions i'll get at uh any open source

01:31:27,600 --> 01:31:30,880
event is where are the dev ports

01:31:29,520 --> 01:31:33,120
you know we're desperate to work on risk

01:31:30,880 --> 01:31:35,760
5 but there's no hardware out there

01:31:33,120 --> 01:31:37,360
a while back in 2018 released high five

01:31:35,760 --> 01:31:38,159
unleashed from sci-fi which is the first

01:31:37,360 --> 01:31:39,920
dev board

01:31:38,159 --> 01:31:41,920
this is a very limited production run

01:31:39,920 --> 01:31:43,440
unfortunately sold out also the chip was

01:31:41,920 --> 01:31:45,520
quite limited in terms of

01:31:43,440 --> 01:31:47,520
peripherals but we saw the impact this

01:31:45,520 --> 01:31:49,840
had in the open source community that

01:31:47,520 --> 01:31:51,520
for example this shows how fast debian

01:31:49,840 --> 01:31:54,400
could pour packages over to risk five

01:31:51,520 --> 01:31:55,600
once we released this board

01:31:54,400 --> 01:31:57,199
and the other part about the board

01:31:55,600 --> 01:31:59,199
because it was so limited you did a very

01:31:57,199 --> 01:32:00,320
expensive expansion board supplied by

01:31:59,199 --> 01:32:01,520
microsemi

01:32:00,320 --> 01:32:03,920
to give you all the peripherals you

01:32:01,520 --> 01:32:05,520
needed to make it a full-blown pc

01:32:03,920 --> 01:32:07,440
like based on round risk five and this

01:32:05,520 --> 01:32:09,120
is far too expensive for most people

01:32:07,440 --> 01:32:11,199
but this was early days in the first dev

01:32:09,120 --> 01:32:12,800
board i just want to close out here by

01:32:11,199 --> 01:32:13,600
saying well there's some relief coming

01:32:12,800 --> 01:32:16,080
we have a

01:32:13,600 --> 01:32:17,520
new dev kit coming from microchip who's

01:32:16,080 --> 01:32:18,560
now the owner of microsemi they bought

01:32:17,520 --> 01:32:20,320
microsemi

01:32:18,560 --> 01:32:22,480
and you can view the the chip they're

01:32:20,320 --> 01:32:23,440
building as including the fpga and the

01:32:22,480 --> 01:32:25,199
hardened

01:32:23,440 --> 01:32:27,440
cy5 cores together on one piece of

01:32:25,199 --> 01:32:29,440
silicon this enables them to make a much

01:32:27,440 --> 01:32:31,760
lower cost dev board that will have

01:32:29,440 --> 01:32:32,880
photo peripherals um and the good news

01:32:31,760 --> 01:32:36,159
is that um

01:32:32,880 --> 01:32:37,679
that board is actually um coming out

01:32:36,159 --> 01:32:39,199
they'll be able to sign up right now the

01:32:37,679 --> 01:32:40,400
end of this month end of july you'll be

01:32:39,199 --> 01:32:41,920
able to sign up and it should be

01:32:40,400 --> 01:32:43,120
available in shipping by the end of

01:32:41,920 --> 01:32:44,480
august this year

01:32:43,120 --> 01:32:47,120
and this will give you a much cheaper

01:32:44,480 --> 01:32:49,920
dev board for working on risk 5 linux

01:32:47,120 --> 01:32:51,430
so i'm excited to share that but just to

01:32:49,920 --> 01:32:52,800
conclude here

01:32:51,430 --> 01:32:55,120
[Music]

01:32:52,800 --> 01:32:56,880
so risk five is really all about uh

01:32:55,120 --> 01:32:58,400
maintaining an open ecosystem

01:32:56,880 --> 01:33:00,880
and really the important thing here is

01:32:58,400 --> 01:33:02,880
completing this innovation cycle

01:33:00,880 --> 01:33:04,159
um by having an open standard we can use

01:33:02,880 --> 01:33:05,440
an education

01:33:04,159 --> 01:33:07,120
students can take that knowledge go

01:33:05,440 --> 01:33:08,320
straight to industry apply it to real

01:33:07,120 --> 01:33:10,480
industrial cores

01:33:08,320 --> 01:33:12,159
and then if there's problems in industry

01:33:10,480 --> 01:33:13,760
we can feed those problems directly into

01:33:12,159 --> 01:33:15,840
research the research solutions are

01:33:13,760 --> 01:33:17,360
directly applicable out to industry

01:33:15,840 --> 01:33:19,280
and this really think is the key is

01:33:17,360 --> 01:33:22,480
keeping this innovation cycle going

01:33:19,280 --> 01:33:24,800
and that's where the strength or is five

01:33:22,480 --> 01:33:27,120
so that's it and uh thank you for

01:33:24,800 --> 01:33:27,120
listening

01:33:28,239 --> 01:33:32,080
thanks so much uh it's good to see that

01:33:30,639 --> 01:33:34,400
those dev boards are

01:33:32,080 --> 01:33:35,760
coming out like where where can folks go

01:33:34,400 --> 01:33:36,719
get information on those dev boards

01:33:35,760 --> 01:33:39,199
again

01:33:36,719 --> 01:33:41,440
yeah it's a crowd supply uh you can sign

01:33:39,199 --> 01:33:43,520
up at crowdsupply.com

01:33:41,440 --> 01:33:45,040
and you can sign up right now to be put

01:33:43,520 --> 01:33:48,239
on the list to get information

01:33:45,040 --> 01:33:50,080
and as i said

01:33:48,239 --> 01:33:52,560
by end of august they should be shipping

01:33:50,080 --> 01:33:55,280
idea from microchip

01:33:52,560 --> 01:33:57,120
all right uh hopefully people will be uh

01:33:55,280 --> 01:33:57,600
out and about more than they are today

01:33:57,120 --> 01:33:59,600
but

01:33:57,600 --> 01:34:01,600
uh i bet people are just itching to get

01:33:59,600 --> 01:34:02,480
a hold of those dip boards in particular

01:34:01,600 --> 01:34:05,600
while they're

01:34:02,480 --> 01:34:07,199
uh sitting at social isolating so it'll

01:34:05,600 --> 01:34:11,520
be i look forward to seeing those

01:34:07,199 --> 01:34:14,080
uh come out in august okay

01:34:11,520 --> 01:34:16,080
all right thank you and thank everyone

01:34:14,080 --> 01:34:18,080
for joining us this week

01:34:16,080 --> 01:34:19,280
enjoy the rest of your day enjoy a

01:34:18,080 --> 01:34:22,000
virtual event

01:34:19,280 --> 01:34:24,880
and we will see you back at our next

01:34:22,000 --> 01:34:24,880
virtual event

01:34:26,250 --> 01:34:30,409
[Music]

01:34:30,840 --> 01:34:33,840
soon

01:34:34,690 --> 01:35:01,840
[Music]

01:34:58,840 --> 01:35:01,840
so

01:35:03,410 --> 01:35:17,079
[Music]

01:35:26,840 --> 01:35:29,840
so

01:35:37,020 --> 01:36:36,659
[Music]

01:36:39,270 --> 01:37:43,379
[Music]

01:37:45,440 --> 01:37:50,080
[Music]

01:37:52,350 --> 01:38:42,850
[Music]

01:38:56,840 --> 01:38:59,840
so

01:39:38,840 --> 01:39:41,840
so

01:39:43,210 --> 01:39:46,300
[Music]

01:39:50,800 --> 01:40:29,050
[Music]

01:40:48,840 --> 01:40:51,840
so

01:41:10,010 --> 01:41:13,549
[Music]

01:41:18,690 --> 01:41:57,890
[Music]

01:42:01,130 --> 01:42:15,840
[Music]

01:42:12,840 --> 01:42:15,840
so

01:42:16,130 --> 01:42:39,790
[Music]

01:42:40,840 --> 01:42:43,840
so

01:42:50,650 --> 01:44:29,270
[Music]

01:44:32,840 --> 01:44:35,840
so

01:44:46,410 --> 01:44:55,930
[Music]

01:45:00,840 --> 01:45:18,239
i

01:45:01,930 --> 01:45:18,239
[Music]

01:45:27,210 --> 01:46:35,130
[Music]

01:46:37,280 --> 01:46:59,960
[Music]

01:47:06,840 --> 01:47:24,170
me

01:47:08,320 --> 01:47:24,170
[Music]

01:47:26,719 --> 01:47:28,800

YouTube URL: https://www.youtube.com/watch?v=vme5sxMA7vo


