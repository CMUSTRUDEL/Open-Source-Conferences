Title: BuzzCrate: Webscaled Shoebox - Jason Plum, GitLab, Inc & Will Christensen, DAO Technologies
Publication date: 2020-09-03
Playlist: Open Source Summit + Embedded Linux Conference NA 2020
Description: 
	BuzzCrate: Webscaled Shoebox - Jason Plum, GitLab, Inc & Will Christensen, DAO Technologies
Captions: 
	00:00:05,520 --> 00:00:08,639
and

00:00:06,240 --> 00:00:10,240
welcome everybody thank you for coming

00:00:08,639 --> 00:00:11,519
out

00:00:10,240 --> 00:00:13,200
today we're going to do a little bit of

00:00:11,519 --> 00:00:14,320
playing with some technologies but we're

00:00:13,200 --> 00:00:17,359
going to try and do it in a very

00:00:14,320 --> 00:00:18,480
approachable way

00:00:17,359 --> 00:00:20,160
we're going to be talking about buzz

00:00:18,480 --> 00:00:21,199
great but we're going to talk about

00:00:20,160 --> 00:00:26,160
iteration

00:00:21,199 --> 00:00:26,160
number two the web scaled

00:00:28,840 --> 00:00:33,360
shoebox

00:00:30,000 --> 00:00:36,160
so some brief introductions myself

00:00:33,360 --> 00:00:37,760
i am jason plum i'm a developer with

00:00:36,160 --> 00:00:40,160
arch linux arm

00:00:37,760 --> 00:00:42,000
i currently work at gitlab doing cloud

00:00:40,160 --> 00:00:44,399
native deployment making some crazy

00:00:42,000 --> 00:00:45,920
things a reality

00:00:44,399 --> 00:00:48,960
i am an open source developer in my

00:00:45,920 --> 00:00:52,000
spare time and i work primarily in

00:00:48,960 --> 00:00:55,680
osi compliant licenses

00:00:52,000 --> 00:00:57,760
and i random tidbit is the

00:00:55,680 --> 00:00:59,760
inadvertent edition of the bridge ip

00:00:57,760 --> 00:01:02,879
flag to docker some years ago

00:00:59,760 --> 00:01:04,960
never knowing what the people at

00:01:02,879 --> 00:01:07,840
flannel and kelsey hightower would

00:01:04,960 --> 00:01:07,840
eventually do with it

00:01:08,000 --> 00:01:12,159
my name is william christensen i'm

00:01:09,920 --> 00:01:15,360
presently working at change healthcare

00:01:12,159 --> 00:01:16,080
as a cloud engineer i got a background

00:01:15,360 --> 00:01:17,600
working in

00:01:16,080 --> 00:01:19,439
windows software development for

00:01:17,600 --> 00:01:23,680
applications mostly for

00:01:19,439 --> 00:01:27,600
manufacturing or for asic development

00:01:23,680 --> 00:01:30,479
and uh slowly but surely

00:01:27,600 --> 00:01:31,200
the community has turned me into a

00:01:30,479 --> 00:01:33,040
devops

00:01:31,200 --> 00:01:34,320
engineer as i started playing with arch

00:01:33,040 --> 00:01:36,720
linux arm

00:01:34,320 --> 00:01:38,560
after meeting jason in irc and i've

00:01:36,720 --> 00:01:39,280
become a product of our local linux

00:01:38,560 --> 00:01:41,840
community

00:01:39,280 --> 00:01:42,560
as well as working with dao technologies

00:01:41,840 --> 00:01:45,600
uh

00:01:42,560 --> 00:01:46,079
throughout my you know becoming a open

00:01:45,600 --> 00:01:49,200
source

00:01:46,079 --> 00:01:49,200
uh contributor

00:01:51,119 --> 00:01:54,960
so why buzz great we get asked this a

00:01:54,079 --> 00:01:57,680
lot

00:01:54,960 --> 00:01:59,040
but the important thing is it's really

00:01:57,680 --> 00:02:01,280
about making it easy

00:01:59,040 --> 00:02:02,399
for developers to get hands-on with

00:02:01,280 --> 00:02:04,000
their own systems

00:02:02,399 --> 00:02:06,159
really understand how they are and not

00:02:04,000 --> 00:02:06,719
have them be living off somewhere in a

00:02:06,159 --> 00:02:09,520
cloud

00:02:06,719 --> 00:02:11,039
or somewhere where i t keeps it from you

00:02:09,520 --> 00:02:14,080
ever actually touching

00:02:11,039 --> 00:02:16,959
where your applications will run for

00:02:14,080 --> 00:02:18,480
sysadmins we want to enable you to

00:02:16,959 --> 00:02:21,280
actually continuously

00:02:18,480 --> 00:02:22,560
spin up test spin down and replicate

00:02:21,280 --> 00:02:23,680
these environments especially with

00:02:22,560 --> 00:02:26,640
kubernetes

00:02:23,680 --> 00:02:27,680
and how complex applications can end up

00:02:26,640 --> 00:02:30,160
being

00:02:27,680 --> 00:02:30,800
in that scenario we want you to be able

00:02:30,160 --> 00:02:33,840
to

00:02:30,800 --> 00:02:34,959
test it play with it break it and prove

00:02:33,840 --> 00:02:37,440
that it's going to work well in

00:02:34,959 --> 00:02:39,519
production in the end

00:02:37,440 --> 00:02:40,720
for devops we want you to be able to do

00:02:39,519 --> 00:02:42,239
the exact same thing

00:02:40,720 --> 00:02:43,840
we want you to be able to test it we

00:02:42,239 --> 00:02:45,519
want you to be able to approach it we

00:02:43,840 --> 00:02:47,760
want you to be able to really

00:02:45,519 --> 00:02:49,680
not say what works for me we want you to

00:02:47,760 --> 00:02:51,200
know that it not only works for you

00:02:49,680 --> 00:02:53,040
but it works for anybody who's going to

00:02:51,200 --> 00:02:56,239
run it because you can spin up the exact

00:02:53,040 --> 00:02:56,239
same environment they can

00:02:56,560 --> 00:02:59,840
we have the established businesses what

00:02:58,080 --> 00:03:01,840
if i told you that

00:02:59,840 --> 00:03:03,519
i can give you a proof of concept

00:03:01,840 --> 00:03:06,640
without

00:03:03,519 --> 00:03:09,840
weeks of training and massive

00:03:06,640 --> 00:03:12,800
capital inputs and just

00:03:09,840 --> 00:03:14,879
literally okay here's a small budget you

00:03:12,800 --> 00:03:19,200
can spin up a full proof of concept

00:03:14,879 --> 00:03:20,800
demo everything very very easily

00:03:19,200 --> 00:03:22,879
how about students here's the one that

00:03:20,800 --> 00:03:24,640
everybody seems to not always take into

00:03:22,879 --> 00:03:25,840
account

00:03:24,640 --> 00:03:27,920
we're working with open source

00:03:25,840 --> 00:03:32,879
technologies

00:03:27,920 --> 00:03:35,200
why should it cost money to try them out

00:03:32,879 --> 00:03:36,720
we want to make it approachable we

00:03:35,200 --> 00:03:37,440
wanted to make it something that can be

00:03:36,720 --> 00:03:40,000
easily

00:03:37,440 --> 00:03:41,200
approached whether it was cost whether

00:03:40,000 --> 00:03:43,120
it was locale

00:03:41,200 --> 00:03:44,560
or it was experience you should be able

00:03:43,120 --> 00:03:45,360
to play with these things get your

00:03:44,560 --> 00:03:48,959
fingers in there

00:03:45,360 --> 00:03:50,480
see how they work and not be restricted

00:03:48,959 --> 00:03:52,319
by anything that has to do with an

00:03:50,480 --> 00:03:55,120
economy

00:03:52,319 --> 00:03:57,840
we also want to enable people to grow

00:03:55,120 --> 00:04:01,120
personally their own skills

00:03:57,840 --> 00:04:02,000
these are complex systems but there are

00:04:01,120 --> 00:04:04,319
tools out there

00:04:02,000 --> 00:04:05,280
such as the ones that we'll use today

00:04:04,319 --> 00:04:07,519
that make

00:04:05,280 --> 00:04:09,760
everything easy to use and they do it in

00:04:07,519 --> 00:04:12,720
a very understandable way

00:04:09,760 --> 00:04:14,239
so let's have an easy entry point to

00:04:12,720 --> 00:04:17,280
these complex systems

00:04:14,239 --> 00:04:20,400
so that you can go and explore and

00:04:17,280 --> 00:04:22,479
learn on your own time

00:04:20,400 --> 00:04:23,759
we want it to be fun we're talking about

00:04:22,479 --> 00:04:25,520
enterprise technologies

00:04:23,759 --> 00:04:26,800
but they're entirely usable by

00:04:25,520 --> 00:04:28,880
enthusiasts

00:04:26,800 --> 00:04:31,120
you just have to have the ability to

00:04:28,880 --> 00:04:31,600
touch them feel them and work through

00:04:31,120 --> 00:04:34,000
them

00:04:31,600 --> 00:04:35,520
so you can learn it doesn't matter if

00:04:34,000 --> 00:04:38,240
you're doing this in the office

00:04:35,520 --> 00:04:39,600
and it's a small cluster on your desk or

00:04:38,240 --> 00:04:42,720
if it's a small cluster

00:04:39,600 --> 00:04:44,880
in the cloud it's even friendly to be

00:04:42,720 --> 00:04:46,800
a home lab it doesn't really matter we

00:04:44,880 --> 00:04:49,040
want you to be able to do it as fast as

00:04:46,800 --> 00:04:52,880
possible or as slow as possible

00:04:49,040 --> 00:04:54,880
to meet your own learning and goals

00:04:52,880 --> 00:04:57,680
and it needs to be simple it's got to be

00:04:54,880 --> 00:05:00,560
as simple as we could possibly make it

00:04:57,680 --> 00:05:02,880
in two hours you can take this read

00:05:00,560 --> 00:05:05,440
through everything walk all the steps

00:05:02,880 --> 00:05:07,039
from scratch to completely new and

00:05:05,440 --> 00:05:08,800
working

00:05:07,039 --> 00:05:12,160
once you've done it once or twice you

00:05:08,800 --> 00:05:14,560
can get this well below 10 minutes

00:05:12,160 --> 00:05:16,639
the biggest thing is that we're doing

00:05:14,560 --> 00:05:19,520
this for y'all

00:05:16,639 --> 00:05:19,840
we want this project to be put together

00:05:19,520 --> 00:05:22,320
and

00:05:19,840 --> 00:05:24,560
organized because this is a complex set

00:05:22,320 --> 00:05:27,039
of technologies

00:05:24,560 --> 00:05:28,639
we want them to be simple for you we

00:05:27,039 --> 00:05:31,280
started approaching them when they were

00:05:28,639 --> 00:05:32,639
in alphas and betas and they are

00:05:31,280 --> 00:05:34,479
horribly complex

00:05:32,639 --> 00:05:36,479
and we had to go collate okay here's a

00:05:34,479 --> 00:05:38,160
guy here here's a guy here and we've

00:05:36,479 --> 00:05:40,400
even worked with arm

00:05:38,160 --> 00:05:41,440
we've worked with kernel we've done

00:05:40,400 --> 00:05:43,759
libraries we've done

00:05:41,440 --> 00:05:45,280
dockerization and all this stuff but now

00:05:43,759 --> 00:05:46,320
let's let's try and make this a

00:05:45,280 --> 00:05:48,960
consumable

00:05:46,320 --> 00:05:52,479
amount of material this is what this

00:05:48,960 --> 00:05:55,280
project is meant to be for you

00:05:52,479 --> 00:05:56,160
so really buzz crate it started out as a

00:05:55,280 --> 00:05:58,560
project where

00:05:56,160 --> 00:06:00,000
jason heard about this new beta thing

00:05:58,560 --> 00:06:01,759
that rancher labs has talked about which

00:06:00,000 --> 00:06:03,440
goes to k3s

00:06:01,759 --> 00:06:05,199
and he said hey it's supposed to support

00:06:03,440 --> 00:06:07,280
arm i'm like cool how do we install it

00:06:05,199 --> 00:06:08,400
and that is where we started going down

00:06:07,280 --> 00:06:10,400
the rabbit hole

00:06:08,400 --> 00:06:12,160
well we as you can see with a little

00:06:10,400 --> 00:06:14,319
icon on the corner arch linux

00:06:12,160 --> 00:06:16,080
um we're not the first to be thought of

00:06:14,319 --> 00:06:19,360
when people release new software

00:06:16,080 --> 00:06:21,520
usually um and as we were trying to

00:06:19,360 --> 00:06:22,720
learn kubernetes ourselves uh we started

00:06:21,520 --> 00:06:24,720
noticing the steep learning curve

00:06:22,720 --> 00:06:26,400
just as jason mentioned and one of the

00:06:24,720 --> 00:06:28,160
alternatives is mini cube

00:06:26,400 --> 00:06:30,080
and it doesn't really scratch the itch

00:06:28,160 --> 00:06:31,680
for exactly what you want to do when you

00:06:30,080 --> 00:06:34,240
want to play with a cluster

00:06:31,680 --> 00:06:35,919
especially if you're more admin uh

00:06:34,240 --> 00:06:39,520
infrastructure focused you know

00:06:35,919 --> 00:06:42,720
playing around with one node not

00:06:39,520 --> 00:06:44,160
exactly the most appealing um but

00:06:42,720 --> 00:06:45,280
unfortunately to make it to play an

00:06:44,160 --> 00:06:47,039
environment that is the most appealing

00:06:45,280 --> 00:06:49,440
is normally with aws and

00:06:47,039 --> 00:06:50,800
and that we've discovered the the break

00:06:49,440 --> 00:06:52,160
point of the break even for us for

00:06:50,800 --> 00:06:53,680
buying this hardware

00:06:52,160 --> 00:06:55,280
at the time was about three and a half

00:06:53,680 --> 00:06:56,319
months and it was actually the same for

00:06:55,280 --> 00:06:58,240
gcp

00:06:56,319 --> 00:07:00,240
um another factor of this is the

00:06:58,240 --> 00:07:02,000
fishbowl effect

00:07:00,240 --> 00:07:04,319
when you're working on kubernetes it's

00:07:02,000 --> 00:07:05,520
nice to actually see touch hold the

00:07:04,319 --> 00:07:06,639
cluster there's a reason why a lot of

00:07:05,520 --> 00:07:09,520
home labs have a lot of like

00:07:06,639 --> 00:07:10,240
home servers this fits on your desk it

00:07:09,520 --> 00:07:11,599
it

00:07:10,240 --> 00:07:13,039
makes it so it doesn't matter if you

00:07:11,599 --> 00:07:14,000
live in the city and live in a tiny

00:07:13,039 --> 00:07:17,039
apartment or

00:07:14,000 --> 00:07:17,919
if you are you know have a nice giant

00:07:17,039 --> 00:07:20,160
home at home

00:07:17,919 --> 00:07:20,960
um it's there and it's cost are energy

00:07:20,160 --> 00:07:22,560
efficient

00:07:20,960 --> 00:07:24,319
it's air gap capable so if you need to

00:07:22,560 --> 00:07:26,080
bring it to work uh then with

00:07:24,319 --> 00:07:27,520
strict security requirements there's a

00:07:26,080 --> 00:07:28,639
possibility of it running there without

00:07:27,520 --> 00:07:30,800
any question

00:07:28,639 --> 00:07:32,319
and most importantly is uh we got into

00:07:30,800 --> 00:07:34,400
it because it was fun for us because

00:07:32,319 --> 00:07:35,680
the memes that came around with it first

00:07:34,400 --> 00:07:37,280
you're like oh it's gonna be like loot

00:07:35,680 --> 00:07:38,639
crate oh and then like the buzzwords

00:07:37,280 --> 00:07:40,560
just started flowing

00:07:38,639 --> 00:07:42,400
for instance anytime you can work on a

00:07:40,560 --> 00:07:44,080
project that says a replicable without a

00:07:42,400 --> 00:07:46,000
phd and hybrid network convergent

00:07:44,080 --> 00:07:48,879
clusterological automated cloud

00:07:46,000 --> 00:07:51,280
development operations with angelic roi

00:07:48,879 --> 00:07:52,240
is awesome and i can't believe i just

00:07:51,280 --> 00:07:55,919
nailed that

00:07:52,240 --> 00:07:56,720
so but more importantly too uh the means

00:07:55,919 --> 00:07:58,639
also long that

00:07:56,720 --> 00:07:59,840
which is it doesn't fit in the shoebox

00:07:58,639 --> 00:08:03,039
yes it will uh

00:07:59,840 --> 00:08:04,720
jason plum has canifer uh can attest the

00:08:03,039 --> 00:08:06,639
fact that it has fit in the shoe box it

00:08:04,720 --> 00:08:08,960
will travel to kubecon

00:08:06,639 --> 00:08:09,840
and it costs less than a uh was it cost

00:08:08,960 --> 00:08:11,520
less than

00:08:09,840 --> 00:08:13,919
a pair of air jordans that would

00:08:11,520 --> 00:08:16,720
normally fit instead shoe box

00:08:13,919 --> 00:08:18,000
and it allows the run not walk approach

00:08:16,720 --> 00:08:19,280
more importantly

00:08:18,000 --> 00:08:21,520
so you can actually play with an entire

00:08:19,280 --> 00:08:24,160
cluster

00:08:21,520 --> 00:08:24,879
and i don't click that button all right

00:08:24,160 --> 00:08:27,360
so

00:08:24,879 --> 00:08:28,400
as we said this is a second iteration so

00:08:27,360 --> 00:08:29,120
without you know with everyone

00:08:28,400 --> 00:08:31,680
introduced to it

00:08:29,120 --> 00:08:32,719
hi we did not meet all of our okrs the

00:08:31,680 --> 00:08:36,159
last one so

00:08:32,719 --> 00:08:38,320
more buzzwords um but the

00:08:36,159 --> 00:08:40,080
major one that we had was the we have a

00:08:38,320 --> 00:08:42,399
cheap proof of concept

00:08:40,080 --> 00:08:43,919
deployable in less than 10 minutes that

00:08:42,399 --> 00:08:45,760
is very key for us and

00:08:43,919 --> 00:08:47,360
having the the less than 500 for

00:08:45,760 --> 00:08:48,800
hardware you can have in hand

00:08:47,360 --> 00:08:50,640
is something that we want to open up the

00:08:48,800 --> 00:08:52,320
concept of kubernetes to everyone with

00:08:50,640 --> 00:08:55,680
the lowest barriers that we knew of

00:08:52,320 --> 00:08:56,560
at the time um but unfortunately three

00:08:55,680 --> 00:08:58,800
failures that

00:08:56,560 --> 00:09:00,000
i think the community and the people we

00:08:58,800 --> 00:09:03,360
need to reach out to

00:09:00,000 --> 00:09:04,959
really there um were just

00:09:03,360 --> 00:09:07,360
markers that were missed uh one of them

00:09:04,959 --> 00:09:09,360
is you know cicd we wanted to introduce

00:09:07,360 --> 00:09:10,720
the constant cicd since we're saying

00:09:09,360 --> 00:09:12,160
look at all these things we're deploying

00:09:10,720 --> 00:09:13,680
because the original bus crate was a lot

00:09:12,160 --> 00:09:15,279
of ansible well

00:09:13,680 --> 00:09:16,800
that's nice but how do you get the

00:09:15,279 --> 00:09:17,600
applications on there how do you build

00:09:16,800 --> 00:09:19,440
them

00:09:17,600 --> 00:09:21,360
there's you know we do address it this

00:09:19,440 --> 00:09:25,040
time but it took some effort

00:09:21,360 --> 00:09:25,600
uh iot platform um the iot platform at

00:09:25,040 --> 00:09:27,839
home

00:09:25,600 --> 00:09:28,720
is something i personally care about

00:09:27,839 --> 00:09:31,440
because it

00:09:28,720 --> 00:09:32,800
is a lot of technology and embedded work

00:09:31,440 --> 00:09:36,480
that i get to work with again

00:09:32,800 --> 00:09:39,839
but tie it into enterprise cluster

00:09:36,480 --> 00:09:42,480
enterprise clusters

00:09:39,839 --> 00:09:44,640
and then finally creating an ecosystem i

00:09:42,480 --> 00:09:45,600
would love to be able to order parts off

00:09:44,640 --> 00:09:48,160
of

00:09:45,600 --> 00:09:50,000
sparkfun or adafruit and just have it

00:09:48,160 --> 00:09:52,160
tie into an app i would just deploy

00:09:50,000 --> 00:09:53,680
like let's say via helm directly onto

00:09:52,160 --> 00:09:56,880
like my home cluster and this

00:09:53,680 --> 00:09:59,440
enables what i want uh in the future

00:09:56,880 --> 00:10:00,160
um going also with that we discovered

00:09:59,440 --> 00:10:01,920
that since

00:10:00,160 --> 00:10:03,519
the ver or the first version there are

00:10:01,920 --> 00:10:04,720
some additional

00:10:03,519 --> 00:10:06,959
failures that we have discovered which

00:10:04,720 --> 00:10:08,320
is cost of entry cloud has gotten a lot

00:10:06,959 --> 00:10:09,519
cheaper and a lot more accessible and

00:10:08,320 --> 00:10:11,760
there are a lot more vendors

00:10:09,519 --> 00:10:13,279
allowing for tools to use such as cloud

00:10:11,760 --> 00:10:15,200
forms terraform that kind of stuff

00:10:13,279 --> 00:10:17,120
so we need to address that the last one

00:10:15,200 --> 00:10:18,079
it was interesting to jason and i but it

00:10:17,120 --> 00:10:19,600
didn't reach

00:10:18,079 --> 00:10:21,760
our it didn't reach the community as

00:10:19,600 --> 00:10:23,360
much as we wanted to edge cases

00:10:21,760 --> 00:10:25,519
uh where it was only a focus on edge

00:10:23,360 --> 00:10:28,720
cases at the time so

00:10:25,519 --> 00:10:29,839
we had some issues with uh just focusing

00:10:28,720 --> 00:10:32,640
more on iot

00:10:29,839 --> 00:10:34,320
and people who work on the uh home lab

00:10:32,640 --> 00:10:35,600
and more importantly we didn't have

00:10:34,320 --> 00:10:38,640
enough buzzwords and i'm

00:10:35,600 --> 00:10:41,360
just noticing now that uh

00:10:38,640 --> 00:10:42,640
we're missing some emojis so that is a

00:10:41,360 --> 00:10:46,480
conversion failure i

00:10:42,640 --> 00:10:50,240
own up to all right next slide

00:10:46,480 --> 00:10:52,240
so tools used um jason feel free to

00:10:50,240 --> 00:10:53,920
tie into this because i have to go kick

00:10:52,240 --> 00:10:55,600
off the terraform if you want to start

00:10:53,920 --> 00:10:58,880
talking about it

00:10:55,600 --> 00:11:00,320
sure uh so i'll just randomly pick

00:10:58,880 --> 00:11:04,959
throughout here first off

00:11:00,320 --> 00:11:07,120
is actually yes we're running arch linux

00:11:04,959 --> 00:11:09,200
one of the reasons we're doing this is

00:11:07,120 --> 00:11:09,839
because we can get a consistent platform

00:11:09,200 --> 00:11:12,800
behavior

00:11:09,839 --> 00:11:15,440
between the armboards that we have and

00:11:12,800 --> 00:11:17,040
the vms that we're running in lenode

00:11:15,440 --> 00:11:18,800
we're using linux in this particular

00:11:17,040 --> 00:11:21,839
case because they actually do

00:11:18,800 --> 00:11:23,440
have arch images available for us but

00:11:21,839 --> 00:11:25,760
also because they happen to be

00:11:23,440 --> 00:11:26,720
a local business that runs fully open

00:11:25,760 --> 00:11:29,040
source

00:11:26,720 --> 00:11:30,800
and we really appreciate that so we're

00:11:29,040 --> 00:11:31,440
going to be using that one one it's very

00:11:30,800 --> 00:11:33,600
accessible

00:11:31,440 --> 00:11:35,920
two it's cloudy and three why not it's

00:11:33,600 --> 00:11:38,160
buzzwords

00:11:35,920 --> 00:11:39,920
when it comes to our choice of actually

00:11:38,160 --> 00:11:43,040
deploying communities we've chosen to

00:11:39,920 --> 00:11:45,680
use rancher's k3s it's a distribution of

00:11:43,040 --> 00:11:46,399
kubernetes and it's one that is designed

00:11:45,680 --> 00:11:48,079
to run

00:11:46,399 --> 00:11:49,279
in more constrained environments they've

00:11:48,079 --> 00:11:50,000
stripped out some of the things that are

00:11:49,279 --> 00:11:52,560
needed

00:11:50,000 --> 00:11:53,839
the agent can now run in sub 100

00:11:52,560 --> 00:11:56,959
megabytes instead of

00:11:53,839 --> 00:11:58,560
closer to a gig and we can run it in the

00:11:56,959 --> 00:12:00,639
ironborns and we can run it on

00:11:58,560 --> 00:12:02,639
small nodes in linux so we're keeping

00:12:00,639 --> 00:12:04,399
costs down as well as making it

00:12:02,639 --> 00:12:06,000
approachable for people who may not be

00:12:04,399 --> 00:12:07,120
able to make use of the cloud all the

00:12:06,000 --> 00:12:09,360
time

00:12:07,120 --> 00:12:10,399
we're using gitlab in this case for the

00:12:09,360 --> 00:12:13,440
ability to do

00:12:10,399 --> 00:12:14,240
ci cd it's got a built-in container

00:12:13,440 --> 00:12:17,120
registry

00:12:14,240 --> 00:12:18,399
and we're using it for source control so

00:12:17,120 --> 00:12:19,920
all the things that lead up to this

00:12:18,399 --> 00:12:20,320
project the building of the containers

00:12:19,920 --> 00:12:24,000
both

00:12:20,320 --> 00:12:27,440
for arch or should say the

00:12:24,000 --> 00:12:31,600
arm 64 arch as well as the x86

00:12:27,440 --> 00:12:32,959
arch we're using it for those things

00:12:31,600 --> 00:12:35,120
so we can push them into the registry

00:12:32,959 --> 00:12:35,839
and then we can pull one image to all of

00:12:35,120 --> 00:12:38,079
these

00:12:35,839 --> 00:12:40,480
we're using terraform for the deployment

00:12:38,079 --> 00:12:42,480
into lino to go and create the vms

00:12:40,480 --> 00:12:44,959
and resources that we'll be using and

00:12:42,480 --> 00:12:48,880
ansible to do all the configuration of

00:12:44,959 --> 00:12:50,800
both sides of these clusters json

00:12:48,880 --> 00:12:52,720
the terraform just completed just to

00:12:50,800 --> 00:12:54,480
further emphasize that this project is

00:12:52,720 --> 00:12:55,360
made to be done at home as quickly as

00:12:54,480 --> 00:12:57,200
you can with as

00:12:55,360 --> 00:12:59,279
least amount of effort as you can

00:12:57,200 --> 00:13:01,279
alright anyway jason back to ansible

00:12:59,279 --> 00:13:02,639
and of course we have some demo apps

00:13:01,279 --> 00:13:06,079
written in a mix of

00:13:02,639 --> 00:13:08,079
go and python with flask the reason we

00:13:06,079 --> 00:13:09,440
choose these two these two particular

00:13:08,079 --> 00:13:11,120
languages is because we

00:13:09,440 --> 00:13:13,600
know for a fact that these are highly

00:13:11,120 --> 00:13:15,279
portable so we can containerize them and

00:13:13,600 --> 00:13:16,480
not worry about what the destinations

00:13:15,279 --> 00:13:17,360
are where we're going to hit some sort

00:13:16,480 --> 00:13:19,279
of odd

00:13:17,360 --> 00:13:21,839
item in terms of compatibility due to a

00:13:19,279 --> 00:13:24,320
library

00:13:21,839 --> 00:13:25,760
mostly it's they're easy to learn and

00:13:24,320 --> 00:13:27,920
for someone who wants to go from

00:13:25,760 --> 00:13:29,519
i don't know anything to playing with a

00:13:27,920 --> 00:13:31,680
cluster and deploying an app you can get

00:13:29,519 --> 00:13:34,160
your hands dirty with any part of it

00:13:31,680 --> 00:13:34,720
feel free to take it mess with it expand

00:13:34,160 --> 00:13:37,680
it

00:13:34,720 --> 00:13:39,600
it's there for you to have fun with now

00:13:37,680 --> 00:13:42,480
we got started on this project

00:13:39,600 --> 00:13:44,480
right as jason told me hey rancher just

00:13:42,480 --> 00:13:47,120
announced it it wasn't even point

00:13:44,480 --> 00:13:49,120
10 at the time or was it 0.12 i think

00:13:47,120 --> 00:13:51,600
point one two definitely alpha

00:13:49,120 --> 00:13:52,959
i whatever they choose to qualify it was

00:13:51,600 --> 00:13:56,000
i was like oh

00:13:52,959 --> 00:13:57,279
we can use this yeah and we did and um

00:13:56,000 --> 00:13:59,199
there were some painful things

00:13:57,279 --> 00:14:00,720
and you know it was a learning process

00:13:59,199 --> 00:14:02,079
on rancher's side too but in the end

00:14:00,720 --> 00:14:03,440
they made a better project

00:14:02,079 --> 00:14:05,360
and more importantly they engage the

00:14:03,440 --> 00:14:07,360
community which i love

00:14:05,360 --> 00:14:08,800
seeing being a part of you know helping

00:14:07,360 --> 00:14:11,600
to emphasize

00:14:08,800 --> 00:14:12,079
uh but the biggest thing is that uh who

00:14:11,600 --> 00:14:14,959
was it

00:14:12,079 --> 00:14:16,000
ka3s the biggest part of it they removed

00:14:14,959 --> 00:14:18,240
a lot of

00:14:16,000 --> 00:14:20,160
the alpha the beta and a lot of the

00:14:18,240 --> 00:14:21,040
stuff that that's kind of like past its

00:14:20,160 --> 00:14:22,880
prime

00:14:21,040 --> 00:14:24,639
for the kubernetes uh you know

00:14:22,880 --> 00:14:26,320
distribution and they just

00:14:24,639 --> 00:14:28,160
made it so it ends up becoming a much

00:14:26,320 --> 00:14:30,399
smaller base of about you know

00:14:28,160 --> 00:14:32,720
i think about about 40 megabytes as much

00:14:30,399 --> 00:14:35,440
as it takes about 40 megs in ram

00:14:32,720 --> 00:14:36,320
which jumping through here the biggest

00:14:35,440 --> 00:14:39,360
thing is that no

00:14:36,320 --> 00:14:41,360
ncd means simpler to deploy

00:14:39,360 --> 00:14:43,440
it means you don't need as much

00:14:41,360 --> 00:14:45,360
resources because ncd is a hog

00:14:43,440 --> 00:14:46,720
it's very good at what it does it's just

00:14:45,360 --> 00:14:47,760
not efficient when you're stuck with two

00:14:46,720 --> 00:14:51,600
gigs of ram on

00:14:47,760 --> 00:14:54,000
arm boards and environment item it works

00:14:51,600 --> 00:14:54,880
perfect in enterprise but when you've

00:14:54,000 --> 00:14:57,680
got one

00:14:54,880 --> 00:14:58,000
maybe two if you're lucky for raspberry

00:14:57,680 --> 00:15:01,440
pi

00:14:58,000 --> 00:15:03,199
for example not so much

00:15:01,440 --> 00:15:05,040
but the biggest part that we found out

00:15:03,199 --> 00:15:06,880
about is without ncd and without needing

00:15:05,040 --> 00:15:08,000
multiple masters and simplicity was it

00:15:06,880 --> 00:15:09,600
which is when you start

00:15:08,000 --> 00:15:12,560
having a discussion about ephemeral

00:15:09,600 --> 00:15:15,040
clusters you can start deploying

00:15:12,560 --> 00:15:15,920
kubernetes in the same amount of time it

00:15:15,040 --> 00:15:17,360
would take to actually make the

00:15:15,920 --> 00:15:19,519
containers and publish them

00:15:17,360 --> 00:15:20,800
which means ephemeral clusters it means

00:15:19,519 --> 00:15:22,880
so if you need to update

00:15:20,800 --> 00:15:24,320
to a new version of kubernetes you can

00:15:22,880 --> 00:15:24,880
just tie it in with your deployment and

00:15:24,320 --> 00:15:25,600
test it

00:15:24,880 --> 00:15:27,440
you know you can test your

00:15:25,600 --> 00:15:27,920
infrastructure anywhere so it makes a

00:15:27,440 --> 00:15:30,399
better

00:15:27,920 --> 00:15:31,759
nicer more friendly ci devops platform

00:15:30,399 --> 00:15:32,720
for that

00:15:31,759 --> 00:15:34,160
all right we're going to kick through

00:15:32,720 --> 00:15:35,120
because we're a little short on time for

00:15:34,160 --> 00:15:38,480
right now

00:15:35,120 --> 00:15:40,480
so jason no talking um gitlab

00:15:38,480 --> 00:15:41,680
a reason why i started using gitlab is

00:15:40,480 --> 00:15:42,399
not just because jason's working there

00:15:41,680 --> 00:15:44,160
is because i

00:15:42,399 --> 00:15:45,839
really enjoy using it in terms of just

00:15:44,160 --> 00:15:47,519
like just source control management

00:15:45,839 --> 00:15:50,240
and getting involved with ci cd

00:15:47,519 --> 00:15:51,680
platforms i found the gitlab runner to

00:15:50,240 --> 00:15:53,519
be the easiest way for me

00:15:51,680 --> 00:15:55,440
to start playing around with builders it

00:15:53,519 --> 00:15:58,639
was very simple no java

00:15:55,440 --> 00:15:59,920
and it was so lean on resources i can

00:15:58,639 --> 00:16:02,399
throw it on an arm target and it

00:15:59,920 --> 00:16:03,759
supported arm target out of the box

00:16:02,399 --> 00:16:05,839
that it wasn't a problem to build the

00:16:03,759 --> 00:16:07,120
builders by the way you can go to

00:16:05,839 --> 00:16:08,959
gitlab.com

00:16:07,120 --> 00:16:10,399
buzzcrate slash details for all the

00:16:08,959 --> 00:16:10,880
details the slides that we have right

00:16:10,399 --> 00:16:13,600
now

00:16:10,880 --> 00:16:14,800
as well as in the buzz crate project we

00:16:13,600 --> 00:16:16,639
have all the code that we will be

00:16:14,800 --> 00:16:17,920
running including the pipelines that

00:16:16,639 --> 00:16:20,079
we were even working on this past

00:16:17,920 --> 00:16:22,320
weekend and a little bit last night

00:16:20,079 --> 00:16:23,759
for this presentation um the container

00:16:22,320 --> 00:16:26,079
registry we discover

00:16:23,759 --> 00:16:28,000
or i discovered a feature get labs ui

00:16:26,079 --> 00:16:29,839
doesn't even know it's supported yet

00:16:28,000 --> 00:16:31,519
and supports actually very poorly but

00:16:29,839 --> 00:16:33,360
the registry itself functions properly

00:16:31,519 --> 00:16:34,880
with supporting multiple arch containers

00:16:33,360 --> 00:16:36,480
and having it listed in a single

00:16:34,880 --> 00:16:38,399
manifest so when you just say

00:16:36,480 --> 00:16:39,680
hey i want to grab the go echo container

00:16:38,399 --> 00:16:41,199
as long as you have the latest tag

00:16:39,680 --> 00:16:43,759
it will automatically figure out whether

00:16:41,199 --> 00:16:47,680
or not you're on an arm v8

00:16:43,759 --> 00:16:50,000
arm64 v8 uh box or if you're on an

00:16:47,680 --> 00:16:51,360
amd 64 box we can support more

00:16:50,000 --> 00:16:52,320
architectures but we're limiting you

00:16:51,360 --> 00:16:54,240
know because we're using our own

00:16:52,320 --> 00:16:55,680
hardware and simplifying uh the

00:16:54,240 --> 00:16:57,279
container build and we're doing the

00:16:55,680 --> 00:17:00,639
entire build without docker

00:16:57,279 --> 00:17:03,360
which is also an interesting exercise

00:17:00,639 --> 00:17:05,280
um for me this is a learning platform

00:17:03,360 --> 00:17:06,640
canary deployments anime provisioning

00:17:05,280 --> 00:17:08,400
direct kubernetes support this is stuff

00:17:06,640 --> 00:17:10,880
that i've planned to play around with my

00:17:08,400 --> 00:17:11,439
own learning with the with the gitlab

00:17:10,880 --> 00:17:13,520
tools

00:17:11,439 --> 00:17:15,280
with buzz crate and i invite anyone else

00:17:13,520 --> 00:17:16,160
to do it rancher labs does support some

00:17:15,280 --> 00:17:17,919
other things so i actually tie in

00:17:16,160 --> 00:17:19,760
multiple clusters i have actually not

00:17:17,919 --> 00:17:21,600
played with that yet but i do plan on

00:17:19,760 --> 00:17:23,439
playing around with this uh you know

00:17:21,600 --> 00:17:27,039
with this platform as well

00:17:23,439 --> 00:17:29,360
so that aside jason you want to take

00:17:27,039 --> 00:17:29,360
this one

00:17:30,320 --> 00:17:35,039
alright unmute i had to resist there to

00:17:32,320 --> 00:17:38,240
talk so i figured i'd hard review

00:17:35,039 --> 00:17:41,600
okay so we have both

00:17:38,240 --> 00:17:43,440
kinds of projects here the last time we

00:17:41,600 --> 00:17:44,880
did talk in regards to buzz crate we

00:17:43,440 --> 00:17:47,679
only had the arm boards

00:17:44,880 --> 00:17:49,919
so this time around we've got two on the

00:17:47,679 --> 00:17:51,600
one side we've got lyndon's cloud

00:17:49,919 --> 00:17:54,240
we're using it as an infrastructure as a

00:17:51,600 --> 00:17:56,000
service we've got arch linux images

00:17:54,240 --> 00:17:57,600
thank you for those we're going to start

00:17:56,000 --> 00:17:59,440
ourselves off with a small

00:17:57,600 --> 00:18:01,120
node for the controller which is

00:17:59,440 --> 00:18:04,240
actually believe it or not

00:18:01,120 --> 00:18:05,520
slightly oversized but you know it's

00:18:04,240 --> 00:18:07,760
easy for everybody to use

00:18:05,520 --> 00:18:10,000
that's the important part and we've got

00:18:07,760 --> 00:18:12,480
a couple of worker notes

00:18:10,000 --> 00:18:13,520
then we're going to have terraform which

00:18:12,480 --> 00:18:15,840
will has already

00:18:13,520 --> 00:18:16,799
gone ahead and run as he said it ran

00:18:15,840 --> 00:18:18,640
that quickly

00:18:16,799 --> 00:18:19,919
we'll show the screen in a little bit

00:18:18,640 --> 00:18:23,200
and then we've we're using

00:18:19,919 --> 00:18:24,799
linux cli to actually go and pull the

00:18:23,200 --> 00:18:27,760
information we need

00:18:24,799 --> 00:18:28,880
out of the terraform and linux itself to

00:18:27,760 --> 00:18:30,880
actually turn around

00:18:28,880 --> 00:18:32,640
and generate the ansible inventory then

00:18:30,880 --> 00:18:36,000
we'll use ansible to actually

00:18:32,640 --> 00:18:39,360
deploy and join all the k3s nodes

00:18:36,000 --> 00:18:42,480
together into a usable cluster on the

00:18:39,360 --> 00:18:44,480
on-prem art arm hardware

00:18:42,480 --> 00:18:46,480
side we're using archlight's arm and we

00:18:44,480 --> 00:18:50,000
have a couple of choices of boards

00:18:46,480 --> 00:18:54,480
but this in particular uh we have

00:18:50,000 --> 00:18:56,799
uh the one we're using hard crate

00:18:54,480 --> 00:18:59,039
yes yes so we have heart crate if you go

00:18:56,799 --> 00:19:01,440
look up the details

00:18:59,039 --> 00:19:02,240
heart crate is a bunch of boards from

00:19:01,440 --> 00:19:05,440
odroid

00:19:02,240 --> 00:19:08,559
my cluster lubricate is obviously

00:19:05,440 --> 00:19:08,559
uh libra computer

00:19:09,360 --> 00:19:13,919
two gigs of ram we've got 32 gigs of

00:19:12,480 --> 00:19:17,919
storage on the sd card

00:19:13,919 --> 00:19:19,600
gig of the ethernet and uh arm v8 64-bit

00:19:17,919 --> 00:19:21,039
boards

00:19:19,600 --> 00:19:22,880
we're going to be using bash through the

00:19:21,039 --> 00:19:24,880
image deployment and then ansible once

00:19:22,880 --> 00:19:28,000
all of that is ready to actually do a

00:19:24,880 --> 00:19:31,280
full installation on those as well

00:19:28,000 --> 00:19:31,280
to bring up a full cluster

00:19:32,559 --> 00:19:35,679
alright so there has been some talk even

00:19:34,720 --> 00:19:38,320
including in today

00:19:35,679 --> 00:19:40,480
about arm and how much arm support is

00:19:38,320 --> 00:19:45,039
there for let's say the future macbooks

00:19:40,480 --> 00:19:46,559
well uh i can say as of 2019 um

00:19:45,039 --> 00:19:49,360
all these things that we tried debian

00:19:46,559 --> 00:19:52,240
alpine fedora gitlab runner python

00:19:49,360 --> 00:19:53,840
builder pod man nginx docker does work

00:19:52,240 --> 00:19:57,520
too thank you jason

00:19:53,840 --> 00:19:59,280
and uh postgres all worked without

00:19:57,520 --> 00:20:01,039
thinking about it the multi-arch support

00:19:59,280 --> 00:20:02,559
was there um

00:20:01,039 --> 00:20:04,320
my presentation is sorry this

00:20:02,559 --> 00:20:05,679
presentation is more about trying to get

00:20:04,320 --> 00:20:06,159
caught up with the manifest for what

00:20:05,679 --> 00:20:08,880
they did

00:20:06,159 --> 00:20:10,320
and made my life easier last year so we

00:20:08,880 --> 00:20:12,960
can introduce the concept to you

00:20:10,320 --> 00:20:14,720
this year and also using gitlab's

00:20:12,960 --> 00:20:17,919
registry as well

00:20:14,720 --> 00:20:20,480
um so if you ever wonder oh and all the

00:20:17,919 --> 00:20:22,240
everything in our project uh has

00:20:20,480 --> 00:20:23,679
everything done is built up from scratch

00:20:22,240 --> 00:20:24,240
we're not using docker we're not using

00:20:23,679 --> 00:20:25,919
from

00:20:24,240 --> 00:20:27,760
you know alpine or anything it is always

00:20:25,919 --> 00:20:29,039
from scratch and we build it from native

00:20:27,760 --> 00:20:30,880
containers on both

00:20:29,039 --> 00:20:32,840
of our platforms you can see it in our

00:20:30,880 --> 00:20:37,919
build pipelines at

00:20:32,840 --> 00:20:43,600
gitlab.com bus crate next slide

00:20:37,919 --> 00:20:43,600
jason this one is all you

00:20:44,320 --> 00:20:48,640
sure thing so before anybody goes and

00:20:46,880 --> 00:20:52,000
nests why would we choose

00:20:48,640 --> 00:20:53,679
arch versus alpine for the containers

00:20:52,000 --> 00:20:55,919
that we run

00:20:53,679 --> 00:20:57,120
so let me give you a quick run though

00:20:55,919 --> 00:20:59,440
first off

00:20:57,120 --> 00:21:01,360
we did this all by hand from scratch in

00:20:59,440 --> 00:21:03,120
the first place without necessarily

00:21:01,360 --> 00:21:05,280
having it in containers

00:21:03,120 --> 00:21:06,159
so it's all about the organic growth of

00:21:05,280 --> 00:21:08,480
the project

00:21:06,159 --> 00:21:10,799
as a whole from the pet project that it

00:21:08,480 --> 00:21:11,520
was as well as using it as a learning

00:21:10,799 --> 00:21:13,039
curve

00:21:11,520 --> 00:21:15,520
for will to bring in some of the

00:21:13,039 --> 00:21:17,679
knowledge that i was able to teach

00:21:15,520 --> 00:21:19,440
we're familiar about how it works and

00:21:17,679 --> 00:21:21,440
replication of those behaviors whether

00:21:19,440 --> 00:21:23,200
it's in or out of the container

00:21:21,440 --> 00:21:26,480
and we really appreciate the kiss

00:21:23,200 --> 00:21:28,320
philosophy of the archway

00:21:26,480 --> 00:21:29,840
now those are items you can easily look

00:21:28,320 --> 00:21:31,760
up but we'll have them in the slide

00:21:29,840 --> 00:21:34,159
links later

00:21:31,760 --> 00:21:36,080
the nice thing was we obviously are very

00:21:34,159 --> 00:21:36,960
familiar with doing images for arm

00:21:36,080 --> 00:21:40,080
boards

00:21:36,960 --> 00:21:42,320
and the availability of an image on

00:21:40,080 --> 00:21:45,520
linux made it pretty happy

00:21:42,320 --> 00:21:47,679
and it's turtles all the way down

00:21:45,520 --> 00:21:49,840
but we lost some of the gorges so

00:21:47,679 --> 00:21:52,640
apologies for the gap there

00:21:49,840 --> 00:21:53,440
now for alpine yes it's built around

00:21:52,640 --> 00:21:56,400
muscle

00:21:53,440 --> 00:21:58,240
and with that for the lipsy and busybox

00:21:56,400 --> 00:22:00,799
it is definitely smaller it is

00:21:58,240 --> 00:22:02,159
generally more efficient than many other

00:22:00,799 --> 00:22:05,840
distributions

00:22:02,159 --> 00:22:08,480
however due to it being built on muscle

00:22:05,840 --> 00:22:10,000
there are several surprising hiccups due

00:22:08,480 --> 00:22:13,280
to the difference between

00:22:10,000 --> 00:22:15,039
g live c and muscle ellipses several of

00:22:13,280 --> 00:22:15,919
which can cause some pretty mysterious

00:22:15,039 --> 00:22:18,240
failures

00:22:15,919 --> 00:22:19,600
inside of kubernetes and we wanted to

00:22:18,240 --> 00:22:22,240
save you from those

00:22:19,600 --> 00:22:23,600
because hunting them down is not fun so

00:22:22,240 --> 00:22:25,760
we did one

00:22:23,600 --> 00:22:26,880
that works with the standard behaviors

00:22:25,760 --> 00:22:29,200
with glibc

00:22:26,880 --> 00:22:31,039
that everybody will be familiar with and

00:22:29,200 --> 00:22:32,400
you won't have to go hunting down weird

00:22:31,039 --> 00:22:35,039
problems in dns

00:22:32,400 --> 00:22:36,559
because nobody wants to do that more

00:22:35,039 --> 00:22:38,000
importantly i wanted to make sure that

00:22:36,559 --> 00:22:39,280
sysadmins had a way of learning

00:22:38,000 --> 00:22:41,679
containers in a way that was more

00:22:39,280 --> 00:22:43,840
natural to them with package managers

00:22:41,679 --> 00:22:45,200
and buildings from scratch i think is

00:22:43,840 --> 00:22:46,799
easier if you

00:22:45,200 --> 00:22:49,120
have any sys admin background or if

00:22:46,799 --> 00:22:50,960
you've played a lot with distributions

00:22:49,120 --> 00:22:52,320
so this way you know you don't have to

00:22:50,960 --> 00:22:52,960
worry about someone's making the image

00:22:52,320 --> 00:22:54,799
and what's there

00:22:52,960 --> 00:22:56,240
you can put it all there um the nice

00:22:54,799 --> 00:22:56,960
part about doing with the kiss away the

00:22:56,240 --> 00:22:58,799
archway

00:22:56,960 --> 00:23:00,320
replace pack strap with dead bootstrap

00:22:58,799 --> 00:23:02,240
there's a remote install with yum

00:23:00,320 --> 00:23:04,320
you are supported with any of the major

00:23:02,240 --> 00:23:05,520
distros that you want

00:23:04,320 --> 00:23:09,360
right there you just gotta have the

00:23:05,520 --> 00:23:12,640
remote install uh process

00:23:09,360 --> 00:23:13,520
all right so hardware these are the cool

00:23:12,640 --> 00:23:16,159
pictures

00:23:13,520 --> 00:23:16,960
we have hard crate yes that giant sprawl

00:23:16,159 --> 00:23:19,120
of wires

00:23:16,960 --> 00:23:20,320
is all you need to have a running

00:23:19,120 --> 00:23:23,039
working cluster

00:23:20,320 --> 00:23:25,120
with the uh with hard crate or as i like

00:23:23,039 --> 00:23:27,280
to call the og buzz crate

00:23:25,120 --> 00:23:28,480
libra crate this is jason's cluster that

00:23:27,280 --> 00:23:30,480
tends to go travel

00:23:28,480 --> 00:23:31,520
but libra crate transforms into cube

00:23:30,480 --> 00:23:33,440
concrete

00:23:31,520 --> 00:23:34,880
when you mysteriously throw when you

00:23:33,440 --> 00:23:37,120
throw it into a shoe box

00:23:34,880 --> 00:23:39,120
check it into your uh your luggage and

00:23:37,120 --> 00:23:41,200
try uh shapes it over to kubecon

00:23:39,120 --> 00:23:42,640
so if anyone wants to go have fun go

00:23:41,200 --> 00:23:44,559
check out the get lab booth

00:23:42,640 --> 00:23:45,840
in any future conferences once we get

00:23:44,559 --> 00:23:48,159
them back and

00:23:45,840 --> 00:23:50,640
i'm sure cubecrate will you know or

00:23:48,159 --> 00:23:52,320
cubeconcrete will have a few additions

00:23:50,640 --> 00:23:53,760
if you wanted to watch jason jb

00:23:52,320 --> 00:23:55,279
challenge you know you cannot bring up

00:23:53,760 --> 00:23:56,720
an arm board and have them added to his

00:23:55,279 --> 00:23:58,159
cluster you know right there on the spot

00:23:56,720 --> 00:23:58,960
but you know one thing at a time no

00:23:58,159 --> 00:24:02,480
challenges to

00:23:58,960 --> 00:24:03,520
jason and finally we're going to share

00:24:02,480 --> 00:24:05,919
the screen because

00:24:03,520 --> 00:24:07,039
we've been talking about arm cloud well

00:24:05,919 --> 00:24:08,080
we're going to have them race because

00:24:07,039 --> 00:24:09,120
you know what we're bored and that's

00:24:08,080 --> 00:24:10,799
what we do so

00:24:09,120 --> 00:24:12,480
um i'm going to go kick off i'm going to

00:24:10,799 --> 00:24:12,799
share it on my side jason i want you to

00:24:12,480 --> 00:24:15,200
get

00:24:12,799 --> 00:24:16,640
the uh web scaled stuff we'll do a

00:24:15,200 --> 00:24:20,240
countdown when you're in the folder

00:24:16,640 --> 00:24:23,039
so start getting that set up and share

00:24:20,240 --> 00:24:24,080
minimize all right jason also can you

00:24:23,039 --> 00:24:26,799
check to make sure that i'm sharing my

00:24:24,080 --> 00:24:26,799
screen properly

00:24:28,240 --> 00:24:33,279
i can indeed see your screen just fine

00:24:30,720 --> 00:24:35,120
okay cool

00:24:33,279 --> 00:24:36,320
all right assuming this is right so

00:24:35,120 --> 00:24:37,760
first of all jason's not the most

00:24:36,320 --> 00:24:39,279
comfortable with ansible so uh it's

00:24:37,760 --> 00:24:42,480
going to be web crate

00:24:39,279 --> 00:24:46,000
ansible web scaled you're in the right

00:24:42,480 --> 00:24:50,400
one config buzz

00:24:46,000 --> 00:24:50,400
ansible what isn't it okay

00:24:51,279 --> 00:24:55,840
yep all right and then for you you just

00:24:54,559 --> 00:24:59,039
got to run the k3

00:24:55,840 --> 00:24:59,039
install that sh

00:24:59,120 --> 00:25:04,400
all right on three one two three let's

00:25:02,320 --> 00:25:05,919
go

00:25:04,400 --> 00:25:09,039
by the way if you haven't used ansible

00:25:05,919 --> 00:25:09,039
cow say you aren't living

00:25:10,559 --> 00:25:13,760
so what this is doing is it's actually

00:25:12,320 --> 00:25:17,200
going into all of the

00:25:13,760 --> 00:25:19,600
items on

00:25:17,200 --> 00:25:22,240
each side it's actually building and

00:25:19,600 --> 00:25:25,039
packaging k3s into a proper package

00:25:22,240 --> 00:25:26,559
as well as pre-configured server and

00:25:25,039 --> 00:25:28,880
agent services

00:25:26,559 --> 00:25:30,240
and then it's going to deploy that into

00:25:28,880 --> 00:25:32,080
all the nodes

00:25:30,240 --> 00:25:34,559
and then join them up into a complete

00:25:32,080 --> 00:25:34,559
cluster

00:25:35,039 --> 00:25:40,840
feel free to start asking questions uh

00:25:37,760 --> 00:25:42,480
jason will try to pluck them as we go

00:25:40,840 --> 00:25:45,600
through

00:25:42,480 --> 00:25:49,200
and it looks like linode has gotten its

00:25:45,600 --> 00:25:49,200
first node built

00:25:49,360 --> 00:25:57,840
yep just built

00:25:58,880 --> 00:26:04,000
all right i swear this one faster on arm

00:26:00,640 --> 00:26:04,000
before jason i'm jealous

00:26:06,480 --> 00:26:09,039
so right now it's just waiting to get

00:26:07,760 --> 00:26:10,080
the the note file so we can

00:26:09,039 --> 00:26:14,480
automatically grab

00:26:10,080 --> 00:26:14,480
all the agents and create the cluster

00:26:22,400 --> 00:26:28,240
come on arm i believe in you it's

00:26:25,440 --> 00:26:28,880
it's actually the sd card tries it's

00:26:28,240 --> 00:26:32,400
doing the

00:26:28,880 --> 00:26:33,760
tar and retire uh

00:26:32,400 --> 00:26:37,360
yeah that's got to be it all i know is

00:26:33,760 --> 00:26:37,360
it works pretty fast after that but

00:26:37,520 --> 00:26:40,640
get copies and the ansible uh playbooks

00:26:40,240 --> 00:26:42,240
are

00:26:40,640 --> 00:26:43,679
essentially the same between the two up

00:26:42,240 --> 00:26:46,559
yep they're starting to call in now now

00:26:43,679 --> 00:26:46,559
it's doing the install

00:26:46,799 --> 00:26:49,919
and the nice part is that with this it

00:26:48,799 --> 00:26:53,440
is simple enough

00:26:49,919 --> 00:26:56,880
you edit the pkg build and you gotta

00:26:53,440 --> 00:26:59,919
update the the show 256

00:26:56,880 --> 00:27:01,520
um stamp on it or md5 i can't remember

00:26:59,919 --> 00:27:03,360
it says in the pkg build but you update

00:27:01,520 --> 00:27:06,240
that you update the uh

00:27:03,360 --> 00:27:07,120
the ansible host file for either arm or

00:27:06,240 --> 00:27:08,480
x86

00:27:07,120 --> 00:27:11,600
and you have updated the latest version

00:27:08,480 --> 00:27:14,000
of k3s we're about two months behind

00:27:11,600 --> 00:27:14,799
so there will be an update shortly it's

00:27:14,000 --> 00:27:16,159
just one less

00:27:14,799 --> 00:27:18,399
headache we want to deal with before

00:27:16,159 --> 00:27:21,760
doing a live demo because you know

00:27:18,399 --> 00:27:26,880
the demo sometimes demand blood and uh

00:27:21,760 --> 00:27:26,880
we don't want that this time around

00:27:27,520 --> 00:27:31,360
yeah we may be archusers but we're still

00:27:29,440 --> 00:27:34,000
not silly enough to do a live update in

00:27:31,360 --> 00:27:35,760
the middle of the demo

00:27:34,000 --> 00:27:37,120
we're not linus torvalds running rock in

00:27:35,760 --> 00:27:38,799
the latest kernel which by the way

00:27:37,120 --> 00:27:41,760
excellent keynote

00:27:38,799 --> 00:27:41,760
if anyone watched it

00:27:42,240 --> 00:27:45,840
well one of many another one that i want

00:27:44,640 --> 00:27:47,440
to definitely address is that we made

00:27:45,840 --> 00:27:47,919
this as a teaching platform so what

00:27:47,440 --> 00:27:50,000
heller

00:27:47,919 --> 00:27:51,440
heather miller was talking about with

00:27:50,000 --> 00:27:54,720
the influx of

00:27:51,440 --> 00:27:55,360
new uh software um you know the need for

00:27:54,720 --> 00:27:57,200
new

00:27:55,360 --> 00:27:58,159
software engineers coming in uh

00:27:57,200 --> 00:27:58,960
hopefully this platform will help

00:27:58,159 --> 00:28:02,159
facilitate it

00:27:58,960 --> 00:28:04,000
and make it accessible to people that

00:28:02,159 --> 00:28:05,600
aren't just in the classroom aren't

00:28:04,000 --> 00:28:07,200
don't have access to this stuff at work

00:28:05,600 --> 00:28:08,640
we want to make this so anyone can get

00:28:07,200 --> 00:28:10,080
involved because well

00:28:08,640 --> 00:28:13,600
communities need to grow and if we don't

00:28:10,080 --> 00:28:15,520
focus on growing um we're shrinking

00:28:13,600 --> 00:28:17,039
and there we go we have two up and

00:28:15,520 --> 00:28:20,399
running and uh

00:28:17,039 --> 00:28:23,360
so now let's hear i got one last thing

00:28:20,399 --> 00:28:25,279
jason uh if you want yeah oh the cube

00:28:23,360 --> 00:28:28,559
config i'm not going to do it on mine

00:28:25,279 --> 00:28:30,240
you do it on yours okay

00:28:28,559 --> 00:28:31,600
yeah because we'll focus on the yeah

00:28:30,240 --> 00:28:33,200
we'll focus on the web scale one

00:28:31,600 --> 00:28:35,760
uh do you want me to shut down you know

00:28:33,200 --> 00:28:35,760
let me uh

00:28:37,279 --> 00:28:39,760
all right cool

00:28:40,480 --> 00:28:47,919
i need to pop back to config buzz right

00:28:44,000 --> 00:28:51,279
yep uh let's see here so we need to run

00:28:47,919 --> 00:28:51,279
go echo so go back again

00:28:52,240 --> 00:28:55,200
yep and then k3 remember it's got that

00:28:53,760 --> 00:28:57,200
deployment thing and we worked on a

00:28:55,200 --> 00:29:01,679
little bit yep

00:28:57,200 --> 00:29:05,440
yep what we're gonna do here

00:29:01,679 --> 00:29:09,039
is we're actually going to add in

00:29:05,440 --> 00:29:10,799
lynnode's um i can't remember what the

00:29:09,039 --> 00:29:12,960
ccm is short for

00:29:10,799 --> 00:29:15,200
but the cloud controller manager that's

00:29:12,960 --> 00:29:18,399
it so that we can actually have it

00:29:15,200 --> 00:29:20,720
deploy a load balancer from the lino

00:29:18,399 --> 00:29:22,960
platform so that we don't have to like

00:29:20,720 --> 00:29:26,240
somehow expose our own

00:29:22,960 --> 00:29:28,000
uh with metal lb that's not something

00:29:26,240 --> 00:29:29,600
that's exactly doable when you're in a

00:29:28,000 --> 00:29:32,000
cloud provider unless you have a full

00:29:29,600 --> 00:29:32,720
vpc sub networking and things like this

00:29:32,000 --> 00:29:34,880
which is not

00:29:32,720 --> 00:29:35,919
a particular feature of linux at this

00:29:34,880 --> 00:29:38,480
time

00:29:35,919 --> 00:29:40,000
so we're going to deploy that and now as

00:29:38,480 --> 00:29:41,760
we go and deploy resources

00:29:40,000 --> 00:29:43,279
when we set up a service and a load

00:29:41,760 --> 00:29:55,840
balancer will actually get

00:29:43,279 --> 00:29:55,840
a load balancer from the node

00:30:00,760 --> 00:30:04,799
[Music]

00:30:02,480 --> 00:30:06,799
uh so just let you know for the arm

00:30:04,799 --> 00:30:08,080
deployment we do have canines installed

00:30:06,799 --> 00:30:10,399
on the master node

00:30:08,080 --> 00:30:11,679
or the controller node we're changing

00:30:10,399 --> 00:30:12,480
the name to controller node when we get

00:30:11,679 --> 00:30:14,880
a time

00:30:12,480 --> 00:30:16,320
uh in the next week here um so the

00:30:14,880 --> 00:30:19,039
controller node will have

00:30:16,320 --> 00:30:20,240
all this information for you for k9 so

00:30:19,039 --> 00:30:24,000
you can have like a little

00:30:20,240 --> 00:30:27,360
in uh gui to run around

00:30:24,000 --> 00:30:27,360
it's really handy

00:30:28,240 --> 00:30:34,470
alright which window are you in now

00:30:30,850 --> 00:30:34,470
[Music]

00:30:34,840 --> 00:30:39,919
jason

00:30:37,600 --> 00:30:40,640
all right so jason uh let's see here so

00:30:39,919 --> 00:30:43,840
do you want me to

00:30:40,640 --> 00:30:46,000
i'll deploy go echo yep go ahead and do

00:30:43,840 --> 00:30:46,000
that

00:30:46,399 --> 00:30:50,080
and literally once you get the once

00:30:47,840 --> 00:30:51,520
you're on the the cube config

00:30:50,080 --> 00:30:52,799
script which is already done with

00:30:51,520 --> 00:30:53,440
ansible so you don't have to worry about

00:30:52,799 --> 00:30:54,559
where it's at

00:30:53,440 --> 00:30:57,679
some people have used this thing called

00:30:54,559 --> 00:31:00,880
catch up it's just a matter of

00:30:57,679 --> 00:31:02,240
ssh into a box grab a file rename

00:31:00,880 --> 00:31:03,919
instead of localhost what the name of

00:31:02,240 --> 00:31:04,880
the ip address is it's already taken

00:31:03,919 --> 00:31:08,080
care of for you

00:31:04,880 --> 00:31:08,080
with uh my scripts

00:31:09,279 --> 00:31:16,000
so we're just going to do a cube ctl

00:31:12,640 --> 00:31:19,279
applied f

00:31:16,000 --> 00:31:22,399
go echo deploy

00:31:19,279 --> 00:31:25,600
and yep of course

00:31:22,399 --> 00:31:27,120
i fingered that one and live demo

00:31:25,600 --> 00:31:31,200
everybody

00:31:27,120 --> 00:31:33,840
yeah there we go we didn't see at least

00:31:31,200 --> 00:31:36,480
one of those you didn't have a live demo

00:31:33,840 --> 00:31:38,640
exactly so we've already deployed this

00:31:36,480 --> 00:31:39,919
and uh yeah you're welcome to view

00:31:38,640 --> 00:31:42,480
all these files for deployment because

00:31:39,919 --> 00:31:44,399
this is where the difference between

00:31:42,480 --> 00:31:46,559
running with containers and playing with

00:31:44,399 --> 00:31:48,240
kubernetes starts if anyone's brand new

00:31:46,559 --> 00:31:50,159
to kubernetes

00:31:48,240 --> 00:31:51,679
all right so that's up and running um

00:31:50,159 --> 00:31:53,039
jason if you want to you can pull up the

00:31:51,679 --> 00:31:55,039
namespace and if you give

00:31:53,039 --> 00:31:58,000
the ip address people can actually go

00:31:55,039 --> 00:31:58,000
check it out themselves

00:31:58,840 --> 00:32:01,840
um

00:32:04,640 --> 00:32:08,960
and for here we want to do the book demo

00:32:09,600 --> 00:32:21,039
there we go so if

00:32:13,360 --> 00:32:21,039
you were all to open up 45.79.246.29

00:32:21,600 --> 00:32:26,159
anything this server is very basic http

00:32:23,840 --> 00:32:28,000
server it's literally an echo server

00:32:26,159 --> 00:32:29,440
so you do actually have to give it some

00:32:28,000 --> 00:32:31,200
sort of query string and then it will

00:32:29,440 --> 00:32:33,360
tell you what your query string was it's

00:32:31,200 --> 00:32:36,960
just a very simple example

00:32:33,360 --> 00:32:36,960
what's your first name it'll respond

00:32:39,919 --> 00:32:44,480
oh we should point out that's actually

00:32:41,519 --> 00:32:44,480
on port 81.

00:32:44,880 --> 00:32:49,120
you have to put the port 81 in um we'll

00:32:46,799 --> 00:32:53,360
have that set up in just a second

00:32:49,120 --> 00:32:53,360
i need to get the service file in and

00:32:54,080 --> 00:32:57,840
there we go

00:32:58,080 --> 00:33:02,240
so what we've actually done in this

00:32:59,760 --> 00:33:06,559
particular namespace is actually deploy

00:33:02,240 --> 00:33:10,000
the basic crud right create reuse

00:33:06,559 --> 00:33:12,640
update delete

00:33:10,000 --> 00:33:14,320
got a flask application and what we've

00:33:12,640 --> 00:33:16,080
done is deployed the database behind it

00:33:14,320 --> 00:33:17,919
and a python container running a web

00:33:16,080 --> 00:33:19,039
server and a very very basic web

00:33:17,919 --> 00:33:21,360
interface

00:33:19,039 --> 00:33:22,799
but in addition to this one we created

00:33:21,360 --> 00:33:26,000
the pods

00:33:22,799 --> 00:33:29,360
and we've created the services but

00:33:26,000 --> 00:33:33,200
we've also created an ingress

00:33:29,360 --> 00:33:34,559
whoops no we did not add that

00:33:33,200 --> 00:33:36,399
i don't think we i did not apply the

00:33:34,559 --> 00:33:37,519
ingress on the go echo give me a second

00:33:36,399 --> 00:33:42,000
we gotta update that quick

00:33:37,519 --> 00:33:42,000
because you have to add the flask

00:33:43,200 --> 00:33:53,840
oh that's right don't flash

00:33:56,559 --> 00:34:07,840
all right so what's the ip address

00:34:09,440 --> 00:34:15,919
our traffic

00:34:12,720 --> 00:34:21,839
is four five seven nine

00:34:15,919 --> 00:34:21,839
two four seven dot three four

00:34:28,800 --> 00:34:35,839
now if you open the url that you see

00:34:32,320 --> 00:34:35,839
there and i'll repeat it here

00:34:42,520 --> 00:34:45,520
books.45.79.247.34.nip.io

00:34:47,440 --> 00:34:50,879
you should actually get our little

00:34:51,359 --> 00:34:56,320
jeez can you check for questions i'm on

00:35:00,839 --> 00:35:03,839
that

00:35:04,720 --> 00:35:08,560
we we have a we have a a comma comment

00:35:07,280 --> 00:35:09,280
of pointing out that live demos are

00:35:08,560 --> 00:35:12,960
awesome

00:35:09,280 --> 00:35:14,960
so thank you for that yes i honestly

00:35:12,960 --> 00:35:17,680
feel like every tech talk should have

00:35:14,960 --> 00:35:20,800
a some form of demo and if not the demo

00:35:17,680 --> 00:35:22,240
gods deserve some blood so

00:35:20,800 --> 00:35:24,320
nothing like seeing a little failed demo

00:35:22,240 --> 00:35:28,480
just for a little extra debugging live

00:35:24,320 --> 00:35:30,800
but hey we're up and running um that one

00:35:28,480 --> 00:35:32,240
yeah we can replicate this screen share

00:35:30,800 --> 00:35:35,599
can you go ahead and actually

00:35:32,240 --> 00:35:35,599
uh show them in the web browser

00:35:39,040 --> 00:35:45,839
uh i don't think i have that i p

00:35:42,079 --> 00:35:48,560
ready give me uh right there

00:35:45,839 --> 00:35:50,079
you're good and i don't have my settings

00:35:48,560 --> 00:35:52,560
set up for that quite nice

00:35:50,079 --> 00:35:53,119
quite right yeah but yeah we're up and

00:35:52,560 --> 00:35:57,280
running hey

00:35:53,119 --> 00:35:57,280
k-8 ftw yeah

00:35:57,760 --> 00:36:02,160
by the way the very wow and much wow

00:35:59,920 --> 00:36:05,760
much appreciated demo god smiling on you

00:36:02,160 --> 00:36:08,320
uh yes they have smiled upon us today

00:36:05,760 --> 00:36:09,440
uh yes if you refresh that page one

00:36:08,320 --> 00:36:11,760
quick second

00:36:09,440 --> 00:36:12,480
yeah yeah yeah we use arch we use ours

00:36:11,760 --> 00:36:15,599
like crazy

00:36:12,480 --> 00:36:18,320
by the way bt dubs doge i mean

00:36:15,599 --> 00:36:20,079
yeah anyway so yeah we're up and running

00:36:18,320 --> 00:36:22,400
um we can also replicate this

00:36:20,079 --> 00:36:24,000
in arm but i'd rather take questions at

00:36:22,400 --> 00:36:24,960
this time if that's more of everyone

00:36:24,000 --> 00:36:28,000
else's uh

00:36:24,960 --> 00:36:31,520
pace if i'm

00:36:28,000 --> 00:36:34,079
gonna share for now okay so

00:36:31,520 --> 00:36:34,800
there's pretty much that we've got one

00:36:34,079 --> 00:36:38,079
last

00:36:34,800 --> 00:36:41,440
slide which is hey questions anybody

00:36:38,079 --> 00:36:43,119
somehow some way

00:36:41,440 --> 00:36:44,880
and also we have some questions for you

00:36:43,119 --> 00:36:46,400
to kind of take home and think about

00:36:44,880 --> 00:36:48,160
um one of the ones that we already

00:36:46,400 --> 00:36:48,480
opposed and one i really like to talk

00:36:48,160 --> 00:36:51,599
about

00:36:48,480 --> 00:36:52,880
is ephemeral clusters have we been using

00:36:51,599 --> 00:36:54,560
kubernetes

00:36:52,880 --> 00:36:56,000
for the wrong design pattern for

00:36:54,560 --> 00:36:58,079
everything and

00:36:56,000 --> 00:36:59,839
can we uh you know since this is so

00:36:58,079 --> 00:37:01,839
quick and easy to deploy

00:36:59,839 --> 00:37:03,599
and since the uptime with cloud is so

00:37:01,839 --> 00:37:06,320
nice

00:37:03,599 --> 00:37:07,520
can we just deploy clusters for what we

00:37:06,320 --> 00:37:08,320
need for like for instance for a

00:37:07,520 --> 00:37:10,240
business unit

00:37:08,320 --> 00:37:11,520
you know i work in a large company and

00:37:10,240 --> 00:37:13,440
by large company is

00:37:11,520 --> 00:37:15,520
we're a large company with many products

00:37:13,440 --> 00:37:16,000
and applications having a one size fits

00:37:15,520 --> 00:37:17,920
all

00:37:16,000 --> 00:37:20,079
does not happen we do not communicate

00:37:17,920 --> 00:37:21,760
that well but what we do do is have

00:37:20,079 --> 00:37:22,480
really targeted business units that know

00:37:21,760 --> 00:37:25,839
how to handle

00:37:22,480 --> 00:37:29,440
themselves pretty well overall so

00:37:25,839 --> 00:37:29,440
this is one approach um

00:37:30,960 --> 00:37:38,000
that i want to interject where is uh so

00:37:34,000 --> 00:37:40,560
any stats on arm versus intel

00:37:38,000 --> 00:37:41,920
uh i'm not really sure what stats

00:37:40,560 --> 00:37:45,359
particular you want

00:37:41,920 --> 00:37:47,680
in terms of either are we talking costs

00:37:45,359 --> 00:37:51,839
we're talking performance we talking

00:37:47,680 --> 00:37:51,839
i don't know

00:37:52,800 --> 00:37:56,560
so i will wait for the author that asks

00:37:55,200 --> 00:37:58,160
that question to go ahead and just pose

00:37:56,560 --> 00:37:59,520
a new question that's got more details

00:37:58,160 --> 00:38:02,240
of course

00:37:59,520 --> 00:38:02,800
um so the other thing is too uh security

00:38:02,240 --> 00:38:05,680
um

00:38:02,800 --> 00:38:07,760
i work in a healthcare company right now

00:38:05,680 --> 00:38:08,240
security is a big deal so my question is

00:38:07,760 --> 00:38:09,680
um

00:38:08,240 --> 00:38:11,680
so there's twist lock and aqualoc for

00:38:09,680 --> 00:38:12,240
testing out containers and inspecting

00:38:11,680 --> 00:38:15,760
them

00:38:12,240 --> 00:38:17,119
my question um based containers

00:38:15,760 --> 00:38:18,800
if you've already certified your base

00:38:17,119 --> 00:38:20,320
image and use the same packages to build

00:38:18,800 --> 00:38:23,680
your containers

00:38:20,320 --> 00:38:23,680
do you need to scan them again

00:38:23,839 --> 00:38:30,079
little questions there um was it

00:38:27,040 --> 00:38:31,599
how many was it for how popular how

00:38:30,079 --> 00:38:32,960
should popular projects support

00:38:31,599 --> 00:38:34,400
multi-yards containers

00:38:32,960 --> 00:38:37,040
should they do it at all you know are

00:38:34,400 --> 00:38:39,040
most people not going to touch arm

00:38:37,040 --> 00:38:40,160
with this question was written before

00:38:39,040 --> 00:38:42,720
apple announced

00:38:40,160 --> 00:38:43,599
their uh their uh their switch over to

00:38:42,720 --> 00:38:45,119
arm

00:38:43,599 --> 00:38:46,960
now that a lot of people are going to be

00:38:45,119 --> 00:38:49,520
arm users in the future

00:38:46,960 --> 00:38:51,040
should they support armed containers do

00:38:49,520 --> 00:38:53,119
people know how

00:38:51,040 --> 00:38:54,640
should we as the community advocate for

00:38:53,119 --> 00:38:57,200
it i don't know that's

00:38:54,640 --> 00:38:58,400
something for us to discuss um

00:38:57,200 --> 00:38:59,839
microservices

00:38:58,400 --> 00:39:01,680
well we've been doing a lot of talking

00:38:59,839 --> 00:39:02,880
about microservices having a pod and

00:39:01,680 --> 00:39:04,720
that kind of stuff

00:39:02,880 --> 00:39:06,320
but now that we can discuss ephemeral

00:39:04,720 --> 00:39:09,359
clusters can we

00:39:06,320 --> 00:39:12,400
just use microservices and have them

00:39:09,359 --> 00:39:14,880
have their own clusters then

00:39:12,400 --> 00:39:17,680
for load balancing in need and i you

00:39:14,880 --> 00:39:19,280
know little questions

00:39:17,680 --> 00:39:21,040
we do have a clarification on that

00:39:19,280 --> 00:39:23,920
earlier question which is

00:39:21,040 --> 00:39:25,839
definitely about the performance okay so

00:39:23,920 --> 00:39:27,599
i can tell you right now it is

00:39:25,839 --> 00:39:29,119
it's always going to depend on what kind

00:39:27,599 --> 00:39:29,599
of cpu you're actually running on in

00:39:29,119 --> 00:39:31,839
terms

00:39:29,599 --> 00:39:33,440
of whether we're talking a high

00:39:31,839 --> 00:39:37,040
performance cpu

00:39:33,440 --> 00:39:38,400
a data center cpu or a low energy cpu we

00:39:37,040 --> 00:39:39,920
can say the same thing about intel as we

00:39:38,400 --> 00:39:41,680
can with arm

00:39:39,920 --> 00:39:43,200
the cluster that we're actually making

00:39:41,680 --> 00:39:46,400
use of is built

00:39:43,200 --> 00:39:49,839
out of odroid c2s uh

00:39:46,400 --> 00:39:53,280
those are s 805

00:39:49,839 --> 00:39:55,040
i think and yeah

00:39:53,280 --> 00:39:56,400
they are effectively cell phone

00:39:55,040 --> 00:39:58,240
processors

00:39:56,400 --> 00:40:00,160
okay that's originally what that board

00:39:58,240 --> 00:40:01,839
was was built around was that chip

00:40:00,160 --> 00:40:03,200
and it was originally designed to be put

00:40:01,839 --> 00:40:05,119
into a cell phone

00:40:03,200 --> 00:40:06,960
so that performance is not the best

00:40:05,119 --> 00:40:09,040
you're possibly going to get out of arm

00:40:06,960 --> 00:40:10,560
if you were to compare it to say the

00:40:09,040 --> 00:40:13,359
xeon processor i'm

00:40:10,560 --> 00:40:14,240
running in linux right now that's going

00:40:13,359 --> 00:40:16,400
to win

00:40:14,240 --> 00:40:17,520
okay in the terms of that if but if you

00:40:16,400 --> 00:40:20,960
were to say

00:40:17,520 --> 00:40:24,160
compare that arm 8 cpu

00:40:20,960 --> 00:40:27,040
compared to a xeon from

00:40:24,160 --> 00:40:29,839
eight years ago they're actually not as

00:40:27,040 --> 00:40:32,640
far apart on a single threaded workload

00:40:29,839 --> 00:40:34,240
as you might think the biggest hindrance

00:40:32,640 --> 00:40:36,000
you might run into is if you decide to

00:40:34,240 --> 00:40:37,359
go reading things from disk

00:40:36,000 --> 00:40:38,960
but you're going to hit that limitation

00:40:37,359 --> 00:40:40,800
no matter what you do if you have a

00:40:38,960 --> 00:40:43,200
difference in the speed of the disk

00:40:40,800 --> 00:40:44,079
so when it comes to just raw cpu

00:40:43,200 --> 00:40:46,160
capability

00:40:44,079 --> 00:40:47,920
and working with just the cpu and the

00:40:46,160 --> 00:40:50,079
ram

00:40:47,920 --> 00:40:52,400
right now with the boards that we're

00:40:50,079 --> 00:40:55,680
using it's the same thing as using

00:40:52,400 --> 00:40:57,040
an old box from intel

00:40:55,680 --> 00:40:59,200
if you were to go with the latest stuff

00:40:57,040 --> 00:41:03,040
and you would compare say a graviton

00:40:59,200 --> 00:41:06,319
as opposed to what we have going on

00:41:03,040 --> 00:41:08,880
in the intel world right now you

00:41:06,319 --> 00:41:10,640
actually would be pretty amazed if you

00:41:08,880 --> 00:41:11,599
start trying to calculate fibonacci

00:41:10,640 --> 00:41:12,960
sequences

00:41:11,599 --> 00:41:14,880
you know that's probably not what you

00:41:12,960 --> 00:41:16,720
want to do in a container

00:41:14,880 --> 00:41:18,880
but that is something to take into

00:41:16,720 --> 00:41:20,640
account right now that balance is

00:41:18,880 --> 00:41:23,280
how much do you need raw performance on

00:41:20,640 --> 00:41:24,000
a single versus how much do you actually

00:41:23,280 --> 00:41:28,319
need

00:41:24,000 --> 00:41:28,319
when it comes to parallel processing

00:41:28,640 --> 00:41:36,079
yeah uh follow up to that point in

00:41:32,880 --> 00:41:38,240
is whether or not uh cue path on the

00:41:36,079 --> 00:41:39,040
xeon versus arm and the memory pass

00:41:38,240 --> 00:41:41,599
there

00:41:39,040 --> 00:41:43,359
in this particular case i don't have

00:41:41,599 --> 00:41:45,119
enough details to go into that one i

00:41:43,359 --> 00:41:47,200
don't really want to go too low level

00:41:45,119 --> 00:41:48,800
into particular cpu details because

00:41:47,200 --> 00:41:50,800
we're derailed a little bit from the

00:41:48,800 --> 00:41:52,319
original topic of the presentation

00:41:50,800 --> 00:41:53,839
the truth is we haven't really played

00:41:52,319 --> 00:41:56,800
around with many um

00:41:53,839 --> 00:41:58,000
arm based or arm focused data center uh

00:41:56,800 --> 00:42:01,280
cpus

00:41:58,000 --> 00:42:02,880
on our desk uh the truth is a lot of the

00:42:01,280 --> 00:42:04,319
arm offerings just haven't been there

00:42:02,880 --> 00:42:06,000
but the two but

00:42:04,319 --> 00:42:07,839
if you want to look at you know overall

00:42:06,000 --> 00:42:10,480
performance the latest

00:42:07,839 --> 00:42:10,960
you know top super computers arm based

00:42:10,480 --> 00:42:13,599
not

00:42:10,960 --> 00:42:14,000
uh intel based so can arm perform that

00:42:13,599 --> 00:42:16,400
way

00:42:14,000 --> 00:42:17,119
yes and i would actually recommend you

00:42:16,400 --> 00:42:19,280
look at

00:42:17,119 --> 00:42:20,400
the benefits of risk architecture versus

00:42:19,280 --> 00:42:22,880
cisc

00:42:20,400 --> 00:42:24,319
architecture um the complex instruction

00:42:22,880 --> 00:42:26,319
set versus reduced instruction set has

00:42:24,319 --> 00:42:28,480
been a debate going on for a while

00:42:26,319 --> 00:42:29,839
x86 just had familiarity with it which

00:42:28,480 --> 00:42:30,560
is once one thing that linus just

00:42:29,839 --> 00:42:32,319
brought up today

00:42:30,560 --> 00:42:34,000
which was the familiarity for what

00:42:32,319 --> 00:42:37,200
pushed the linux kernel on

00:42:34,000 --> 00:42:38,720
in his own development um it's

00:42:37,200 --> 00:42:41,119
so yeah it's availability of hardware

00:42:38,720 --> 00:42:41,920
what's on the desktop is going to really

00:42:41,119 --> 00:42:44,400
drive

00:42:41,920 --> 00:42:45,280
the performance of the system and that's

00:42:44,400 --> 00:42:46,800
part of the reason why we're also

00:42:45,280 --> 00:42:47,839
approaching this is because arms coming

00:42:46,800 --> 00:42:48,960
up

00:42:47,839 --> 00:42:50,400
we're showing you how to support it

00:42:48,960 --> 00:42:58,240
right out of the box you know if you're

00:42:50,400 --> 00:42:59,599
just curious

00:42:58,240 --> 00:43:01,599
i have to admit i'm not seeing any of

00:42:59,599 --> 00:43:04,319
the questions on my little uh

00:43:01,599 --> 00:43:05,520
on my dashboard but what i am doing in

00:43:04,319 --> 00:43:09,119
the background

00:43:05,520 --> 00:43:10,960
is i'm getting the installs for

00:43:09,119 --> 00:43:13,680
the original buzz crate on arm and i

00:43:10,960 --> 00:43:15,839
will share those as soon as that's ready

00:43:13,680 --> 00:43:17,920
so everyone can play with arm and you

00:43:15,839 --> 00:43:20,240
know from their browser

00:43:17,920 --> 00:43:22,079
okay we have a question on whether or

00:43:20,240 --> 00:43:22,640
not bus grid can be run on a raspberry

00:43:22,079 --> 00:43:25,200
pi

00:43:22,640 --> 00:43:26,880
the answer is yes however i will point

00:43:25,200 --> 00:43:30,079
out the containers that we are building

00:43:26,880 --> 00:43:33,200
are strictly for arm 64 or arm v8

00:43:30,079 --> 00:43:36,880
so you need to make use of at least a pi

00:43:33,200 --> 00:43:39,200
3 or a four and one other caviar

00:43:36,880 --> 00:43:41,280
is actually pretty solid if you can get

00:43:39,200 --> 00:43:44,000
the four gig version i would go for that

00:43:41,280 --> 00:43:44,800
but it is designed to run effectively on

00:43:44,000 --> 00:43:47,680
any

00:43:44,800 --> 00:43:49,920
platform that you can run these binaries

00:43:47,680 --> 00:43:53,040
on

00:43:49,920 --> 00:43:54,000
the automation for ansible is written

00:43:53,040 --> 00:43:57,680
specifically

00:43:54,000 --> 00:44:00,800
for arch linux as opposed to ubuntu

00:43:57,680 --> 00:44:02,720
or debian or raspbian so you may have to

00:44:00,800 --> 00:44:04,319
individually set up the nodes in that

00:44:02,720 --> 00:44:05,599
regard we haven't rewritten the

00:44:04,319 --> 00:44:08,880
modulation

00:44:05,599 --> 00:44:11,040
you need the install the install uh

00:44:08,880 --> 00:44:13,119
playbook needs to be rewritten the rest

00:44:11,040 --> 00:44:15,359
of them may be used

00:44:13,119 --> 00:44:17,040
so it's only one spot so where do we do

00:44:15,359 --> 00:44:19,839
the actual build and install

00:44:17,040 --> 00:44:21,599
that is arch linux specific either arm

00:44:19,839 --> 00:44:23,839
or x86

00:44:21,599 --> 00:44:23,839
right

00:44:27,440 --> 00:44:32,000
okay we have another question here uh

00:44:30,240 --> 00:44:34,000
given your wealth of knowledge and any

00:44:32,000 --> 00:44:36,079
advice for engineers switching careers

00:44:34,000 --> 00:44:36,880
from corporate i.t enterprise id to

00:44:36,079 --> 00:44:40,960
sective

00:44:36,880 --> 00:44:41,920
ops side of the house is getting started

00:44:40,960 --> 00:44:45,280
with containers

00:44:41,920 --> 00:44:45,280
and kates

00:44:45,839 --> 00:44:52,160
so one gratis

00:44:49,280 --> 00:44:52,720
on being open to expanding and learning

00:44:52,160 --> 00:44:56,079
new things

00:44:52,720 --> 00:44:58,240
first off second

00:44:56,079 --> 00:44:59,760
i would say the very first thing you

00:44:58,240 --> 00:45:02,079
want to do in doing

00:44:59,760 --> 00:45:03,280
devsecops and understanding how

00:45:02,079 --> 00:45:05,440
containers and how

00:45:03,280 --> 00:45:06,319
platforms such as kubernetes orchestrate

00:45:05,440 --> 00:45:08,480
those containers

00:45:06,319 --> 00:45:10,160
is first things first understand what

00:45:08,480 --> 00:45:11,839
container is

00:45:10,160 --> 00:45:13,680
and how they actually function so

00:45:11,839 --> 00:45:16,640
understand that

00:45:13,680 --> 00:45:17,280
people talk about docker docker is a

00:45:16,640 --> 00:45:19,760
form

00:45:17,280 --> 00:45:21,119
of tool to create and automate

00:45:19,760 --> 00:45:25,040
containers but it isn't

00:45:21,119 --> 00:45:28,400
actually the only way to do containers

00:45:25,040 --> 00:45:30,079
so look into what a container is and how

00:45:28,400 --> 00:45:30,560
it actually functions and in linux that

00:45:30,079 --> 00:45:33,119
means

00:45:30,560 --> 00:45:35,359
it's using c groups it's using name

00:45:33,119 --> 00:45:39,280
spacing and it's effectively

00:45:35,359 --> 00:45:41,599
the same type of thing as a bsd jail

00:45:39,280 --> 00:45:43,359
so when you look into these behaviors

00:45:41,599 --> 00:45:45,520
you're effectively going i'm going to

00:45:43,359 --> 00:45:47,200
cordon something off and let it run on

00:45:45,520 --> 00:45:49,040
its own and this is not

00:45:47,200 --> 00:45:50,960
like just i'm going to run it in a

00:45:49,040 --> 00:45:54,160
schrute this is a

00:45:50,960 --> 00:45:57,359
highly constrained kernel

00:45:54,160 --> 00:45:59,680
jailed set of processes

00:45:57,359 --> 00:46:00,640
okay once you understand basically how a

00:45:59,680 --> 00:46:01,920
container operates

00:46:00,640 --> 00:46:03,839
understand a few of the run times

00:46:01,920 --> 00:46:05,200
whether it's docker or rocket or

00:46:03,839 --> 00:46:07,760
container d

00:46:05,200 --> 00:46:08,800
and from there then you can start poking

00:46:07,760 --> 00:46:10,400
your nose

00:46:08,800 --> 00:46:12,000
going up the ladder of how many

00:46:10,400 --> 00:46:13,520
technologies are involved

00:46:12,000 --> 00:46:15,200
and really understanding how the

00:46:13,520 --> 00:46:16,720
orchestration platforms work whether

00:46:15,200 --> 00:46:21,040
that's docker compose

00:46:16,720 --> 00:46:21,040
or kubernetes or openshift

00:46:26,240 --> 00:46:31,040
all right so we're launching the last

00:46:27,920 --> 00:46:31,040
the containers right now

00:46:31,760 --> 00:46:37,520
and for these um so go echo should be up

00:46:34,720 --> 00:46:37,520
so if you go to

00:46:39,480 --> 00:46:44,640
staticserv.dns.org

00:46:41,359 --> 00:46:46,720
port 8001 slash

00:46:44,640 --> 00:46:48,319
test that's the echo container running

00:46:46,720 --> 00:46:50,640
on arm so you can play around with that

00:46:48,319 --> 00:46:52,000
i'm still launching the book demo one uh

00:46:50,640 --> 00:46:53,760
the only difference for the

00:46:52,000 --> 00:46:55,760
book demo which will be running my arm

00:46:53,760 --> 00:46:56,000
container and running much longer after

00:46:55,760 --> 00:46:57,839
the

00:46:56,000 --> 00:47:00,000
conference is actually completed is

00:46:57,839 --> 00:47:05,400
going to be at static serve

00:47:00,000 --> 00:47:09,599
i'm sorry yeah staticserv.dbns.org

00:47:05,400 --> 00:47:10,880
sorry.ddns.net port 8002

00:47:09,599 --> 00:47:13,280
and it'll just show up it's the same

00:47:10,880 --> 00:47:14,800
book demo same thing you've seen on uh

00:47:13,280 --> 00:47:16,640
the linux cluster

00:47:14,800 --> 00:47:19,839
so if i do that here if i should be able

00:47:16,640 --> 00:47:19,839
to do a test so curl

00:47:20,520 --> 00:47:26,000
staticserve.bdns.net

00:47:21,839 --> 00:47:29,280
port 8001 slash we're gonna do test

00:47:26,000 --> 00:47:32,079
ah come on and it failed to connect

00:47:29,280 --> 00:47:33,700
awesome did my metal lb get installed

00:47:32,079 --> 00:47:36,720
properly is the question

00:47:33,700 --> 00:47:38,880
[Music]

00:47:36,720 --> 00:47:38,880
wow

00:47:44,160 --> 00:47:48,079
if we pop the slides back for a quick

00:47:45,920 --> 00:47:51,119
second i want to pass our thanks along

00:47:48,079 --> 00:47:52,480
to the partners in the community uh that

00:47:51,119 --> 00:47:54,400
actually

00:47:52,480 --> 00:47:56,000
did all the work here or part of the

00:47:54,400 --> 00:47:57,920
work here first off

00:47:56,000 --> 00:47:59,359
gitlab and their their work for the

00:47:57,920 --> 00:48:01,200
tools that they have available

00:47:59,359 --> 00:48:02,640
yes they existed long before i was there

00:48:01,200 --> 00:48:03,760
no i don't work on that particular

00:48:02,640 --> 00:48:06,480
portion

00:48:03,760 --> 00:48:08,000
rancher for their work in k3s and in

00:48:06,480 --> 00:48:10,800
general throughout the greater

00:48:08,000 --> 00:48:11,440
kubernetes and docker ecosystem lino for

00:48:10,800 --> 00:48:12,640
their support

00:48:11,440 --> 00:48:15,040
and everything that we've done in this

00:48:12,640 --> 00:48:16,880
presentation and training and the rest

00:48:15,040 --> 00:48:17,920
of the team in arch linux arm and their

00:48:16,880 --> 00:48:20,160
support

00:48:17,920 --> 00:48:21,760
specifically who want to call out to

00:48:20,160 --> 00:48:24,559
jason

00:48:21,760 --> 00:48:25,280
and tim bach and eric wilson for all the

00:48:24,559 --> 00:48:28,160
help

00:48:25,280 --> 00:48:29,040
over the time that we've done this yes

00:48:28,160 --> 00:48:31,359
uh definitely

00:48:29,040 --> 00:48:32,720
tim bach thanks to you if it wasn't for

00:48:31,359 --> 00:48:34,559
the late nights that we had working

00:48:32,720 --> 00:48:35,920
on openshift i wouldn't have learned

00:48:34,559 --> 00:48:39,920
half of

00:48:35,920 --> 00:48:41,040
what i have right now um eric wilson has

00:48:39,920 --> 00:48:43,280
has been reaching out to community for

00:48:41,040 --> 00:48:44,800
k3s for quite some time if you have

00:48:43,280 --> 00:48:46,839
questions i really do recommend reaching

00:48:44,800 --> 00:48:50,319
out to him

00:48:46,839 --> 00:48:52,960
and let's see if i can get

00:48:50,319 --> 00:48:55,280
that should be about it jason are there

00:48:52,960 --> 00:48:57,599
any more questions

00:48:55,280 --> 00:48:59,280
i am not seeing any more specific

00:48:57,599 --> 00:49:00,960
questions and yes i am doing my best to

00:48:59,280 --> 00:49:03,920
make sure i read them all everybody

00:49:00,960 --> 00:49:05,440
i'm seeing a lot of uh appreciate that

00:49:03,920 --> 00:49:07,520
it was a live tech demo and

00:49:05,440 --> 00:49:09,119
not marketing it's really interesting

00:49:07,520 --> 00:49:13,119
stuff and

00:49:09,119 --> 00:49:13,119
all the blood to the demo gods

00:49:13,200 --> 00:49:16,319
uh also if you need to reach out to

00:49:15,200 --> 00:49:18,720
jason on twitter

00:49:16,319 --> 00:49:20,160
i will be making other avenues available

00:49:18,720 --> 00:49:21,680
if you have more interest to play with

00:49:20,160 --> 00:49:23,920
this cluster or if you want to learn in

00:49:21,680 --> 00:49:26,000
general um there is a community i am

00:49:23,920 --> 00:49:28,000
trying to build across discord but i

00:49:26,000 --> 00:49:30,720
don't know how much that is going

00:49:28,000 --> 00:49:32,319
uh i gotta take a look to see how well

00:49:30,720 --> 00:49:33,839
that's growing and how much more effort

00:49:32,319 --> 00:49:37,040
to put into that

00:49:33,839 --> 00:49:40,400
um there's the last item we do

00:49:37,040 --> 00:49:41,359
forever gitlab.com buzzcrate the project

00:49:40,400 --> 00:49:44,160
is open

00:49:41,359 --> 00:49:44,720
it does have issues and we can take

00:49:44,160 --> 00:49:46,240
further

00:49:44,720 --> 00:49:49,760
questions or improvements from any

00:49:46,240 --> 00:49:49,760
community member who might be interested

00:49:50,800 --> 00:49:56,480
so with that thank you our time has run

00:49:53,680 --> 00:49:59,839
out thanks everybody for coming

00:49:56,480 --> 00:49:59,839

YouTube URL: https://www.youtube.com/watch?v=bXLnFBNu6yI


