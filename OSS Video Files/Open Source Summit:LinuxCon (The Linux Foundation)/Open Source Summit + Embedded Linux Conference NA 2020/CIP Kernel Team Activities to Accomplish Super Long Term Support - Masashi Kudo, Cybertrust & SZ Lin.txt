Title: CIP Kernel Team Activities to Accomplish Super Long Term Support - Masashi Kudo, Cybertrust & SZ Lin
Publication date: 2020-09-10
Playlist: Open Source Summit + Embedded Linux Conference NA 2020
Description: 
	CIP Kernel Team Activities to Accomplish Super Long Term Support - Masashi Kudo, Cybertrust Japan Co., Ltd. & SZ Lin, Moxa Inc.
Captions: 
	00:00:03,360 --> 00:00:07,040
uh good morning

00:00:04,400 --> 00:00:09,519
good afternoon and good evening thank

00:00:07,040 --> 00:00:11,840
you very much for joining this session

00:00:09,519 --> 00:00:14,480
this talk is about city kernel team

00:00:11,840 --> 00:00:14,480
activities

00:00:14,559 --> 00:00:21,119
first of all let me introduce ourselves

00:00:18,400 --> 00:00:22,480
one of presentators is the linson from

00:00:21,119 --> 00:00:24,400
moxon

00:00:22,480 --> 00:00:26,400
he's a technical steering committee

00:00:24,400 --> 00:00:28,720
member in cip

00:00:26,400 --> 00:00:30,640
and the governing board member of open

00:00:28,720 --> 00:00:32,960
chain project

00:00:30,640 --> 00:00:35,040
he is also actively working as deviant

00:00:32,960 --> 00:00:37,920
developer

00:00:35,040 --> 00:00:40,800
another presentator is myself masashi

00:00:37,920 --> 00:00:44,160
kudo from cyber trust japan

00:00:40,800 --> 00:00:44,960
i had acted as open data ambassador and

00:00:44,160 --> 00:00:49,039
currently

00:00:44,960 --> 00:00:49,039
ask the cip kernel team chair

00:00:50,480 --> 00:00:54,960
cip stands for civil infrastructure

00:00:53,280 --> 00:00:58,000
platform

00:00:54,960 --> 00:01:00,800
it was founded almost four years ago

00:00:58,000 --> 00:01:03,440
as a collaborative project under the

00:01:00,800 --> 00:01:06,600
linux foundation

00:01:03,440 --> 00:01:08,479
cib kernel team was first formed in

00:01:06,600 --> 00:01:11,040
2016.

00:01:08,479 --> 00:01:12,960
since then the team has typically worked

00:01:11,040 --> 00:01:15,520
and improved processes

00:01:12,960 --> 00:01:17,920
to sustain the infrastructure of civil

00:01:15,520 --> 00:01:22,640
platforms

00:01:17,920 --> 00:01:26,080
today we first explain about cip

00:01:22,640 --> 00:01:27,040
then cip conor team activity will be

00:01:26,080 --> 00:01:29,840
explained

00:01:27,040 --> 00:01:33,119
in the upstream first and cip open

00:01:29,840 --> 00:01:33,119
source tools sessions

00:01:33,360 --> 00:01:38,159
testing is acting a key role of the

00:01:35,840 --> 00:01:40,720
kernel development

00:01:38,159 --> 00:01:41,680
the testing activities will be explained

00:01:40,720 --> 00:01:45,840
in the

00:01:41,680 --> 00:01:48,560
cip automated testing session

00:01:45,840 --> 00:01:49,920
open source tool session is covered by a

00:01:48,560 --> 00:01:51,840
system

00:01:49,920 --> 00:01:53,520
other sessions are covered by credo

00:01:51,840 --> 00:01:58,159
myself

00:01:53,520 --> 00:01:58,159
then let me start with what is cip

00:02:00,079 --> 00:02:04,640
when you hear civil infrastructure

00:02:05,040 --> 00:02:11,840
you may imagine power plants

00:02:08,560 --> 00:02:13,440
water gas delivery systems disaster

00:02:11,840 --> 00:02:15,840
management systems

00:02:13,440 --> 00:02:18,160
public transportation systems or

00:02:15,840 --> 00:02:21,040
surveillance systems

00:02:18,160 --> 00:02:23,120
all are true but there are a lot more

00:02:21,040 --> 00:02:25,920
around us

00:02:23,120 --> 00:02:30,160
even industrial iot devices can be

00:02:25,920 --> 00:02:32,879
categorized into civil infrastructure

00:02:30,160 --> 00:02:33,599
the way to develop all those systems and

00:02:32,879 --> 00:02:37,840
devices

00:02:33,599 --> 00:02:39,680
have been changing before 2000

00:02:37,840 --> 00:02:42,560
they have been developed with

00:02:39,680 --> 00:02:45,760
proprietary components

00:02:42,560 --> 00:02:46,560
but after studying millennium software

00:02:45,760 --> 00:02:49,040
layers

00:02:46,560 --> 00:02:49,599
were clearly divided into competitive

00:02:49,040 --> 00:02:52,800
layers

00:02:49,599 --> 00:02:55,680
and non-competitive layers some people

00:02:52,800 --> 00:02:57,599
had focused on proprietary applications

00:02:55,680 --> 00:03:01,120
in the competitive layer to

00:02:57,599 --> 00:03:04,159
differentiate functionalities

00:03:01,120 --> 00:03:06,959
recently the situation has become much

00:03:04,159 --> 00:03:08,239
complicated because mobile and cloud

00:03:06,959 --> 00:03:11,680
technologies

00:03:08,239 --> 00:03:14,720
have become more commodity

00:03:11,680 --> 00:03:17,360
systems and devices now consist

00:03:14,720 --> 00:03:19,519
of much more components but the

00:03:17,360 --> 00:03:21,280
development resources have not been so

00:03:19,519 --> 00:03:24,400
much changed

00:03:21,280 --> 00:03:26,640
therefore people are focusing only on

00:03:24,400 --> 00:03:33,840
the proprietary applications

00:03:26,640 --> 00:03:33,840
with limited results

00:03:34,000 --> 00:03:39,680
now there are millions or trillions of

00:03:37,040 --> 00:03:41,920
security infrastructure devices feature

00:03:39,680 --> 00:03:45,519
using similar social components

00:03:41,920 --> 00:03:49,440
like linux they share the same

00:03:45,519 --> 00:03:54,159
industrial requirements that is security

00:03:49,440 --> 00:03:56,400
sustainability and industrial gradients

00:03:54,159 --> 00:03:57,599
they should keep satisfying those

00:03:56,400 --> 00:04:00,000
requirements

00:03:57,599 --> 00:04:00,879
during their life cycles which are

00:04:00,000 --> 00:04:04,080
usually

00:04:00,879 --> 00:04:06,480
very long therefore

00:04:04,080 --> 00:04:08,640
super long-term maintenance becomes a

00:04:06,480 --> 00:04:12,239
key

00:04:08,640 --> 00:04:14,959
however there were no common solutions

00:04:12,239 --> 00:04:17,199
for base building blocks of civil

00:04:14,959 --> 00:04:19,680
infrastructure

00:04:17,199 --> 00:04:21,280
therefore same development and

00:04:19,680 --> 00:04:24,320
maintenance efforts

00:04:21,280 --> 00:04:29,840
should be spent each day each separately

00:04:24,320 --> 00:04:29,840
even in same companies

00:04:29,919 --> 00:04:36,160
by motivated to solve those issues

00:04:33,199 --> 00:04:37,840
tubulin class structure platform as

00:04:36,160 --> 00:04:40,639
known as cip

00:04:37,840 --> 00:04:41,680
sets its goal to develop building blocks

00:04:40,639 --> 00:04:44,240
to satisfy

00:04:41,680 --> 00:04:45,919
industrial requirements with open

00:04:44,240 --> 00:04:48,320
sources

00:04:45,919 --> 00:04:49,919
we named such building blocks as open

00:04:48,320 --> 00:04:53,840
source based layer

00:04:49,919 --> 00:04:53,840
in short osbn

00:04:55,440 --> 00:05:04,400
all this osbl consists of cip

00:04:59,040 --> 00:05:08,240
slks kernel and cip core packages

00:05:04,400 --> 00:05:11,680
pslts stands for super long term support

00:05:08,240 --> 00:05:14,479
and we aim to maintain slts kernels for

00:05:11,680 --> 00:05:17,600
10 plus years

00:05:14,479 --> 00:05:18,960
cid core packages contain only dozens of

00:05:17,600 --> 00:05:21,440
packages

00:05:18,960 --> 00:05:25,759
they are carefully selected and will

00:05:21,440 --> 00:05:28,800
likewise be maintained for long term

00:05:25,759 --> 00:05:32,400
you will notice that more packages

00:05:28,800 --> 00:05:34,800
say hundreds of hydraulic packages

00:05:32,400 --> 00:05:36,880
are needed to develop real systems or

00:05:34,800 --> 00:05:40,160
devices

00:05:36,880 --> 00:05:43,840
while cip provides osbo

00:05:40,160 --> 00:05:45,840
as a commonly used building blocks

00:05:43,840 --> 00:05:47,199
those additional packages should be

00:05:45,840 --> 00:05:50,840
added by users

00:05:47,199 --> 00:05:53,840
who are provided by linux data

00:05:50,840 --> 00:05:53,840
distributors

00:05:54,639 --> 00:06:01,120
there are various activities we set up

00:05:57,120 --> 00:06:04,400
as candidates to achieve our goals

00:06:01,120 --> 00:06:07,440
among them we selected activities

00:06:04,400 --> 00:06:08,160
cut out and numbered from one to six in

00:06:07,440 --> 00:06:10,080
the table

00:06:08,160 --> 00:06:12,800
by gathering the member company's

00:06:10,080 --> 00:06:12,800
opinions

00:06:15,120 --> 00:06:20,960
crp governance structures is explained

00:06:18,240 --> 00:06:23,120
in this slide

00:06:20,960 --> 00:06:25,360
governing board is organized with

00:06:23,120 --> 00:06:29,039
platinum members

00:06:25,360 --> 00:06:29,840
it decides whom cicip should collaborate

00:06:29,039 --> 00:06:32,960
with

00:06:29,840 --> 00:06:36,800
hope vip should invest her budget

00:06:32,960 --> 00:06:36,800
should be allocated and so on

00:06:36,880 --> 00:06:40,080
all the technical issues or directions

00:06:39,199 --> 00:06:43,120
are discussed

00:06:40,080 --> 00:06:47,680
at technical steering committee in short

00:06:43,120 --> 00:06:49,680
psc all the member companies can join

00:06:47,680 --> 00:06:52,160
tsc meetings

00:06:49,680 --> 00:06:55,440
the meetings are usually held once every

00:06:52,160 --> 00:06:55,440
two weeks on the web

00:06:55,599 --> 00:07:00,639
under the technical sharing committee

00:06:58,000 --> 00:07:04,240
the sixth activities are proceeded as

00:07:00,639 --> 00:07:04,240
teams or working groups

00:07:04,479 --> 00:07:13,520
we formed cip kernel team to work on

00:07:07,840 --> 00:07:13,520
sfts kernel as well as real-time linux

00:07:13,599 --> 00:07:18,479
testing team was formed to work on

00:07:15,919 --> 00:07:20,960
automated testing

00:07:18,479 --> 00:07:22,080
in addition there are three other

00:07:20,960 --> 00:07:25,759
activities

00:07:22,080 --> 00:07:26,479
that is cip core team security working

00:07:25,759 --> 00:07:31,840
group

00:07:26,479 --> 00:07:31,840
and software update working group

00:07:33,120 --> 00:07:37,199
currently there are eight member

00:07:35,199 --> 00:07:39,520
companies in cip

00:07:37,199 --> 00:07:41,599
and are actively working on those

00:07:39,520 --> 00:07:44,879
activities

00:07:41,599 --> 00:07:46,240
our annual membership fees are pulled as

00:07:44,879 --> 00:07:48,639
logic

00:07:46,240 --> 00:07:51,360
and we need to support developers of

00:07:48,639 --> 00:07:53,680
maintenance in vip

00:07:51,360 --> 00:07:59,680
the budget is also used to invest

00:07:53,680 --> 00:08:02,720
projects other than cip

00:07:59,680 --> 00:08:05,840
one of member companies reported that

00:08:02,720 --> 00:08:06,879
up to 70 effort reduction can be

00:08:05,840 --> 00:08:10,319
achieved

00:08:06,879 --> 00:08:13,360
by applying cip to entire organization

00:08:10,319 --> 00:08:16,879
in the company it is because

00:08:13,360 --> 00:08:20,000
activities like oss license clearing

00:08:16,879 --> 00:08:21,520
vulnerability monitoring kernel and

00:08:20,000 --> 00:08:25,039
package maintenance

00:08:21,520 --> 00:08:27,840
etc can be colonized instead of doing

00:08:25,039 --> 00:08:27,840
each by each

00:08:29,680 --> 00:08:35,760
then let's move on to the cip kernel

00:08:32,800 --> 00:08:35,760
team activities

00:08:37,760 --> 00:08:41,680
primary goal of cip kernel team is to

00:08:40,959 --> 00:08:45,519
provide

00:08:41,680 --> 00:08:48,000
cip slts kernels for 10 plus years

00:08:45,519 --> 00:08:49,040
by fixing versions to fulfill the

00:08:48,000 --> 00:08:52,839
required level

00:08:49,040 --> 00:08:55,040
of reliability sustainability and

00:08:52,839 --> 00:08:57,920
security

00:08:55,040 --> 00:08:59,360
there are two kernel maintenance both

00:08:57,920 --> 00:09:03,279
one kernel mentors

00:08:59,360 --> 00:09:05,920
and two kernel developers in the team

00:09:03,279 --> 00:09:07,040
while we are highly motivated to work on

00:09:05,920 --> 00:09:09,360
the project

00:09:07,040 --> 00:09:11,519
we don't think we can achieve the goal

00:09:09,360 --> 00:09:14,480
by ourselves only

00:09:11,519 --> 00:09:16,560
we definitely rely on outputs from

00:09:14,480 --> 00:09:20,000
upstream projects

00:09:16,560 --> 00:09:24,560
the question is how to use those outputs

00:09:20,000 --> 00:09:24,560
and how to work with upstream projects

00:09:28,959 --> 00:09:35,920
here i show two development problems

00:09:33,200 --> 00:09:37,760
the left hand side shows on communique

00:09:35,920 --> 00:09:40,800
model

00:09:37,760 --> 00:09:41,360
the project with this model branches its

00:09:40,800 --> 00:09:46,000
base

00:09:41,360 --> 00:09:48,640
from upstream and evolves by its own

00:09:46,000 --> 00:09:50,080
this model enables the project to ramp

00:09:48,640 --> 00:09:53,040
up quickly

00:09:50,080 --> 00:09:54,080
but in the long run it will be difficult

00:09:53,040 --> 00:09:58,399
to backboard

00:09:54,080 --> 00:09:58,399
upstream patches due to conflicts

00:09:58,800 --> 00:10:02,800
the right hand side shows upstream first

00:10:01,519 --> 00:10:05,519
model

00:10:02,800 --> 00:10:07,279
the project arrows touch comments only

00:10:05,519 --> 00:10:11,040
if those patches are already

00:10:07,279 --> 00:10:14,800
in the upstream it may take time

00:10:11,040 --> 00:10:17,279
to introduce a desired patch because

00:10:14,800 --> 00:10:19,120
the target patch should be accepted by

00:10:17,279 --> 00:10:23,680
the upstream at first

00:10:19,120 --> 00:10:26,560
if it is not in the upstream rate

00:10:23,680 --> 00:10:29,279
but it enables the project to share its

00:10:26,560 --> 00:10:32,240
outputs with the upstream

00:10:29,279 --> 00:10:35,600
at the same time this model eliminates

00:10:32,240 --> 00:10:35,600
the risk of conflicts

00:10:37,920 --> 00:10:42,160
other side mode please look at this

00:10:40,800 --> 00:10:44,560
graph

00:10:42,160 --> 00:10:48,399
it shows the gross trend of commit

00:10:44,560 --> 00:10:51,519
counts for each lts

00:10:48,399 --> 00:10:52,480
as you can see a few hundred patches are

00:10:51,519 --> 00:10:55,519
committed to

00:10:52,480 --> 00:10:57,920
each ltn per month

00:10:55,519 --> 00:10:58,800
this trend makes cherry picking quite

00:10:57,920 --> 00:11:01,519
difficult

00:10:58,800 --> 00:11:02,720
because cip is adding a long-term

00:11:01,519 --> 00:11:05,200
maintenance

00:11:02,720 --> 00:11:07,680
upstream first model is a preferable

00:11:05,200 --> 00:11:07,680
approach

00:11:10,560 --> 00:11:14,720
as explained so far the upstream first

00:11:13,920 --> 00:11:17,120
principle

00:11:14,720 --> 00:11:18,320
is essential to achieve industrial

00:11:17,120 --> 00:11:20,880
requirements

00:11:18,320 --> 00:11:23,440
especially in terms of long-term

00:11:20,880 --> 00:11:23,440
maintenance

00:11:24,079 --> 00:11:28,959
cip adopts the upstream first as a

00:11:27,040 --> 00:11:32,160
development principle

00:11:28,959 --> 00:11:35,440
we collaborate with upstream projects

00:11:32,160 --> 00:11:39,360
before using the outputs we upstream

00:11:35,440 --> 00:11:41,839
what we have and don't keep them locally

00:11:39,360 --> 00:11:43,279
by rotating up streaming and using

00:11:41,839 --> 00:11:47,040
continuously

00:11:43,279 --> 00:11:47,040
we are moving toward our goal

00:11:49,680 --> 00:11:54,959
so what does upstream first mean for cip

00:11:52,880 --> 00:12:00,079
kernel t

00:11:54,959 --> 00:12:00,079
our upstream line of main diamond lda

00:12:02,480 --> 00:12:08,160
as mark 1 contribution is our first

00:12:05,920 --> 00:12:10,800
action

00:12:08,160 --> 00:12:12,880
feature of streaming is done by cip

00:12:10,800 --> 00:12:15,680
member developers

00:12:12,880 --> 00:12:17,680
on the other hand cip kernel team

00:12:15,680 --> 00:12:21,680
contributes to upstream

00:12:17,680 --> 00:12:24,399
in more general manner we developed

00:12:21,680 --> 00:12:25,519
open source tools in order to work on

00:12:24,399 --> 00:12:29,120
contributions

00:12:25,519 --> 00:12:30,720
effect efficiently at this time we'll

00:12:29,120 --> 00:12:33,680
talk about those tools

00:12:30,720 --> 00:12:33,680
in detail later

00:12:34,240 --> 00:12:43,839
as mark 2 use is the second action

00:12:39,440 --> 00:12:46,000
we use lts currents to release cip slts

00:12:43,839 --> 00:12:49,760
kernels

00:12:46,000 --> 00:12:53,120
for those releases automated testing

00:12:49,760 --> 00:12:55,360
acts a very important role

00:12:53,120 --> 00:12:57,440
testing activities will be discussed

00:12:55,360 --> 00:13:00,639
later

00:12:57,440 --> 00:13:04,720
as marked 3 integrate

00:13:00,639 --> 00:13:08,800
is the third action by integrating those

00:13:04,720 --> 00:13:12,000
slds kernels with cip core packages

00:13:08,800 --> 00:13:14,480
and additional packages industrial

00:13:12,000 --> 00:13:17,120
systems or devices can be developed and

00:13:14,480 --> 00:13:17,120
maintained

00:13:17,279 --> 00:13:20,560
i'm going to elaborate those three

00:13:19,839 --> 00:13:23,360
actions

00:13:20,560 --> 00:13:23,360
each for each

00:13:27,680 --> 00:13:34,880
first action is contribution

00:13:31,200 --> 00:13:37,760
because we use up three outputs we value

00:13:34,880 --> 00:13:39,760
the general contributions to upstreams

00:13:37,760 --> 00:13:42,880
to be fair

00:13:39,760 --> 00:13:43,760
therefore cid kernel team works on

00:13:42,880 --> 00:13:49,600
backboarding

00:13:43,760 --> 00:13:52,480
of bug fixes and security touches to fds

00:13:49,600 --> 00:13:54,399
these statistics are the contributions

00:13:52,480 --> 00:13:57,040
by cip kernel team to

00:13:54,399 --> 00:13:57,040
lts

00:13:57,600 --> 00:14:04,240
crd slds kernels are based on

00:14:00,639 --> 00:14:06,800
lts 4.4 and 4.19

00:14:04,240 --> 00:14:08,639
other contributions are not limited to

00:14:06,800 --> 00:14:11,600
them

00:14:08,639 --> 00:14:12,959
contribute contribution count differs

00:14:11,600 --> 00:14:17,839
depends on the length

00:14:12,959 --> 00:14:17,839
of each life

00:14:18,079 --> 00:14:23,760
how we contribute are recorded in comic

00:14:21,040 --> 00:14:27,760
lobes in lts

00:14:23,760 --> 00:14:29,920
reported by kind of 5 x5

00:14:27,760 --> 00:14:31,199
in addition to authors thousands cc's

00:14:29,920 --> 00:14:36,240
are major comps

00:14:31,199 --> 00:14:36,240
in the total around 1600.

00:14:38,720 --> 00:14:47,680
the synchron action is used

00:14:41,839 --> 00:14:51,199
we use fds for cip slts kernel basically

00:14:47,680 --> 00:14:54,880
as just mentioned cip slt

00:14:51,199 --> 00:14:58,720
kernels are based on lts 4.4

00:14:54,880 --> 00:15:02,079
and 4.19

00:14:58,720 --> 00:15:05,800
the first releases of slgs 4.4

00:15:02,079 --> 00:15:09,839
and 4.4 rt were done in

00:15:05,800 --> 00:15:15,040
2017. we plan to maintain them

00:15:09,839 --> 00:15:15,040
till 2027 for 10 years

00:15:15,519 --> 00:15:23,920
the first releases of s3s 4.19

00:15:18,880 --> 00:15:26,320
and 4.19 rt were done in 2019

00:15:23,920 --> 00:15:27,360
and likewise we support them for 10

00:15:26,320 --> 00:15:31,279
years

00:15:27,360 --> 00:15:31,279
until 2029

00:15:35,839 --> 00:15:39,759
cip kernels are released by following

00:15:39,040 --> 00:15:43,279
the flow

00:15:39,759 --> 00:15:43,920
listed here please note that differences

00:15:43,279 --> 00:15:47,920
between

00:15:43,920 --> 00:15:50,959
civil parties and crp member patches

00:15:47,920 --> 00:15:54,240
several patches are reviewed in github

00:15:50,959 --> 00:15:59,920
while the patches from vip members

00:15:54,240 --> 00:15:59,920
review and comment gip desk maintenance

00:16:03,199 --> 00:16:09,839
currently slgs 4.19

00:16:06,560 --> 00:16:13,040
is released twice a month and 4.4

00:16:09,839 --> 00:16:13,759
is once a month it is because commit

00:16:13,040 --> 00:16:18,079
counts of

00:16:13,759 --> 00:16:18,079
slgs 4.4 are reduced

00:16:18,480 --> 00:16:27,279
slk 4.19 rp is once a month

00:16:22,079 --> 00:16:27,279
and 4.4 rp once every two months

00:16:30,720 --> 00:16:37,199
so far we have steadily released kernel

00:16:34,079 --> 00:16:39,680
promos thanks to our maintainers by

00:16:37,199 --> 00:16:42,240
following these frequencies i just

00:16:39,680 --> 00:16:42,240
explained

00:16:46,240 --> 00:16:53,040
this chart shows how upstream releases

00:16:49,199 --> 00:16:56,399
are used in our slts releases

00:16:53,040 --> 00:16:59,440
both lts 4.4 and 4.19

00:16:56,399 --> 00:17:00,880
are maintained for six years by lts

00:16:59,440 --> 00:17:03,839
project

00:17:00,880 --> 00:17:04,799
because cip aims to maintain for 10

00:17:03,839 --> 00:17:06,640
years

00:17:04,799 --> 00:17:10,079
the rest of four years will be

00:17:06,640 --> 00:17:10,079
maintained by crt

00:17:11,199 --> 00:17:18,400
we made major releases in 2017

00:17:14,720 --> 00:17:21,919
and 2019. this means that

00:17:18,400 --> 00:17:24,720
our major releases retain a major

00:17:21,919 --> 00:17:25,760
release frequency once per two years so

00:17:24,720 --> 00:17:29,280
far

00:17:25,760 --> 00:17:32,559
therefore because 2021

00:17:29,280 --> 00:17:33,360
is approaching we started to discuss

00:17:32,559 --> 00:17:36,640
about new

00:17:33,360 --> 00:17:36,640
sfd experiments

00:17:39,840 --> 00:17:45,520
the third action is integrate

00:17:42,880 --> 00:17:47,039
precisely speaking this action is not

00:17:45,520 --> 00:17:51,280
done by kernel team

00:17:47,039 --> 00:17:51,280
but by cip kernel users

00:17:51,679 --> 00:17:55,280
cip refers source packages or binary

00:17:54,559 --> 00:17:58,559
packages

00:17:55,280 --> 00:18:00,799
in deviant if you would like to use

00:17:58,559 --> 00:18:02,000
debian source packages you can use

00:18:00,799 --> 00:18:05,200
yoktoki

00:18:02,000 --> 00:18:05,200
as a build system

00:18:05,280 --> 00:18:08,799
clb core packages contain terms of

00:18:07,919 --> 00:18:10,799
packages

00:18:08,799 --> 00:18:12,000
which may not be sufficient for the

00:18:10,799 --> 00:18:15,440
development

00:18:12,000 --> 00:18:18,720
of end products so

00:18:15,440 --> 00:18:19,600
users can add necessary packages from

00:18:18,720 --> 00:18:22,799
debian

00:18:19,600 --> 00:18:25,919
by writing recipes

00:18:22,799 --> 00:18:30,400
debian provides earliest key even

00:18:25,919 --> 00:18:33,679
extended lts so super long-term support

00:18:30,400 --> 00:18:34,000
including user and packages can be based

00:18:33,679 --> 00:18:36,960
on

00:18:34,000 --> 00:18:36,960
these themes

00:18:40,160 --> 00:18:46,960
as i explained the id kernel team is

00:18:43,440 --> 00:18:49,840
effectively contributing to extreme

00:18:46,960 --> 00:18:51,760
open source tools were developed to help

00:18:49,840 --> 00:18:55,600
this activity

00:18:51,760 --> 00:18:56,320
a season will unveil how the open source

00:18:55,600 --> 00:18:59,440
tools are

00:18:56,320 --> 00:19:03,679
used in the kernel key so

00:18:59,440 --> 00:19:03,679
at least on the floor ears

00:19:05,360 --> 00:19:12,320
thank you kurosawa hello everyone

00:19:08,640 --> 00:19:13,120
this is svlin it's my pleasure to meet

00:19:12,320 --> 00:19:16,960
all of you

00:19:13,120 --> 00:19:20,080
in the air okay so

00:19:16,960 --> 00:19:22,840
let's talk about the open source tool

00:19:20,080 --> 00:19:25,840
the open source tools for back porting

00:19:22,840 --> 00:19:25,840
process

00:19:29,039 --> 00:19:35,600
to optimize the back protein process

00:19:32,240 --> 00:19:36,960
improve efficiency for back protein

00:19:35,600 --> 00:19:40,240
patches

00:19:36,960 --> 00:19:43,280
and eats the effort from maintainers

00:19:40,240 --> 00:19:47,039
the cab connecting creates and uses

00:19:43,280 --> 00:19:51,039
the open source tool that is classified

00:19:47,039 --> 00:19:54,480
fair patches and chevy corner check

00:19:51,039 --> 00:19:57,360
in our backpacking process

00:19:54,480 --> 00:19:58,320
the tour of classified fair patches

00:19:57,360 --> 00:20:01,280
filtered and

00:19:58,320 --> 00:20:03,280
fetched apple patches from the stable

00:20:01,280 --> 00:20:06,960
kernel melee list

00:20:03,280 --> 00:20:08,960
and classify the needs of that protein

00:20:06,960 --> 00:20:12,080
in semi-stable kernel

00:20:08,960 --> 00:20:13,760
the scope of the bad protein is based on

00:20:12,080 --> 00:20:17,679
semiconductor

00:20:13,760 --> 00:20:21,360
config repository

00:20:17,679 --> 00:20:24,240
another tool is um hep chronosex

00:20:21,360 --> 00:20:25,120
the kernel aesthetic concept tracks the

00:20:24,240 --> 00:20:28,159
status of

00:20:25,120 --> 00:20:31,200
security issues in kernel identified by

00:20:28,159 --> 00:20:33,840
cvid the scope of

00:20:31,200 --> 00:20:34,880
a bit protein is based on cervical

00:20:33,840 --> 00:20:38,480
config

00:20:34,880 --> 00:20:38,480
repository as well

00:20:38,960 --> 00:20:46,840
as you can see that kernel team will

00:20:42,960 --> 00:20:50,000
evaluate the result from these two

00:20:46,840 --> 00:20:54,000
projects and

00:20:50,000 --> 00:20:58,080
decided to backport to the stable kernel

00:20:54,000 --> 00:21:01,200
or the city kernel just by case

00:20:58,080 --> 00:21:04,240
i'll elaborate on the details in the

00:21:01,200 --> 00:21:04,240
next few slides

00:21:08,559 --> 00:21:14,240
cervical nose set

00:21:11,679 --> 00:21:15,039
this tool tracks the status of security

00:21:14,240 --> 00:21:18,880
issues

00:21:15,039 --> 00:21:23,120
identified by cvid and in mainline

00:21:18,880 --> 00:21:23,120
stable and other configurable branches

00:21:23,760 --> 00:21:31,840
so this repository is public

00:21:28,400 --> 00:21:32,559
and those you can link it to the project

00:21:31,840 --> 00:21:35,760
website

00:21:32,559 --> 00:21:35,760
via the qr code

00:21:40,799 --> 00:21:44,400
the cip kernel set is a source code

00:21:43,600 --> 00:21:47,840
levels

00:21:44,400 --> 00:21:51,760
and ability scanner it's gathered

00:21:47,840 --> 00:21:54,880
cv information from multiple obstruents

00:21:51,760 --> 00:21:57,280
such as stable kernel debian kernel and

00:21:54,880 --> 00:21:59,440
ubuntu kernel

00:21:57,280 --> 00:22:00,320
the current team focus on maintaining

00:21:59,440 --> 00:22:03,760
the cv

00:22:00,320 --> 00:22:08,159
affected in kernel 4.4 and

00:22:03,760 --> 00:22:11,280
4.19 and maybe called the specific

00:22:08,159 --> 00:22:14,640
cv commit to the stable kernel

00:22:11,280 --> 00:22:14,640
that's the case maybe

00:22:18,880 --> 00:22:27,039
so just like the

00:22:23,760 --> 00:22:30,080
previous slide the cip kernel check

00:22:27,039 --> 00:22:33,120
provide the webview so

00:22:30,080 --> 00:22:36,400
you can just use the

00:22:33,120 --> 00:22:39,760
browser to know how many

00:22:36,400 --> 00:22:43,600
cve in your current

00:22:39,760 --> 00:22:44,560
kernel tree and you can get the detailed

00:22:43,600 --> 00:22:45,840
information

00:22:44,560 --> 00:22:55,840
[Music]

00:22:45,840 --> 00:22:55,840
via this graphic tool

00:22:56,400 --> 00:23:00,720
let's talk about the crossfire fair

00:22:58,159 --> 00:23:00,720
patches

00:23:00,880 --> 00:23:04,240
this project tracks the filters of her

00:23:03,280 --> 00:23:07,440
patches

00:23:04,240 --> 00:23:10,559
and classifies patches into a point

00:23:07,440 --> 00:23:10,559
and to apply text

00:23:12,000 --> 00:23:17,280
just like our cv cannot say this

00:23:14,960 --> 00:23:21,520
repository is public

00:23:17,280 --> 00:23:24,799
so you can also link to the website

00:23:21,520 --> 00:23:24,799
via the qr code

00:23:30,799 --> 00:23:34,960
as you may know the stable kernel only

00:23:33,600 --> 00:23:37,679
accepted

00:23:34,960 --> 00:23:39,280
the patches are related to bug or

00:23:37,679 --> 00:23:42,799
security fixes

00:23:39,280 --> 00:23:43,360
therefore the patches in the stable

00:23:42,799 --> 00:23:47,440
archive

00:23:43,360 --> 00:23:51,120
are vital to be reviewed this project

00:23:47,440 --> 00:23:54,559
tracks the status of stable

00:23:51,120 --> 00:23:57,919
kernel pages and classifies pages into

00:23:54,559 --> 00:24:01,120
applied and supplied type

00:23:57,919 --> 00:24:04,320
the theatrical team will review it and

00:24:01,120 --> 00:24:07,679
make that all the specific commits

00:24:04,320 --> 00:24:10,080
to the stable kernel as the case

00:24:07,679 --> 00:24:10,080
may be

00:24:13,039 --> 00:24:22,080
these are the examples to

00:24:17,679 --> 00:24:22,080
apply or to apply tabs

00:24:23,200 --> 00:24:30,840
as you can see the price patches means

00:24:27,360 --> 00:24:32,320
these pages already apply in the

00:24:30,840 --> 00:24:35,360
upstream and

00:24:32,320 --> 00:24:38,159
to be a perpetrator mean we have to

00:24:35,360 --> 00:24:42,080
spend the time to analyses

00:24:38,159 --> 00:24:45,600
and maybe add just some concrete

00:24:42,080 --> 00:24:48,159
and those we can send it to the

00:24:45,600 --> 00:24:48,159
upstream

00:24:51,919 --> 00:24:57,679
last but not the least javi kernel

00:24:55,760 --> 00:25:00,720
convict

00:24:57,679 --> 00:25:03,200
as i mentioned before

00:25:00,720 --> 00:25:05,120
the cid chronosex and classified 12

00:25:03,200 --> 00:25:08,320
pages

00:25:05,120 --> 00:25:09,200
are based on these repositories to

00:25:08,320 --> 00:25:13,120
decided

00:25:09,200 --> 00:25:14,880
the action this repository collects the

00:25:13,120 --> 00:25:18,320
kernel configuration

00:25:14,880 --> 00:25:20,799
for cip members so

00:25:18,320 --> 00:25:21,679
to define the maintenance scope in cib

00:25:20,799 --> 00:25:26,320
kernel

00:25:21,679 --> 00:25:29,279
4.4 and 4.19 respectively

00:25:26,320 --> 00:25:31,200
this is also the maintenance based line

00:25:29,279 --> 00:25:34,799
for a semiconductor set

00:25:31,200 --> 00:25:34,799
and caused by failed patches

00:25:35,520 --> 00:25:40,880
these are the updates regarding the open

00:25:39,279 --> 00:25:44,159
source tool

00:25:40,880 --> 00:25:45,919
thank you for your time kurosawa allow

00:25:44,159 --> 00:25:48,559
me to give the flow

00:25:45,919 --> 00:25:48,559
back to you

00:25:55,039 --> 00:25:57,840
thank you very much

00:25:59,600 --> 00:26:05,760
uh okay then our last question is vip

00:26:03,279 --> 00:26:05,760
platform

00:26:07,279 --> 00:26:10,559
there are three goals defined the first

00:26:10,159 --> 00:26:13,360
is

00:26:10,559 --> 00:26:16,400
centralize the control of automated

00:26:13,360 --> 00:26:16,400
testing systems

00:26:16,720 --> 00:26:20,880
physical devices should be distributed

00:26:19,039 --> 00:26:24,080
in several regions

00:26:20,880 --> 00:26:26,640
by considering availability

00:26:24,080 --> 00:26:27,919
second is to promote continuous

00:26:26,640 --> 00:26:31,360
integration

00:26:27,919 --> 00:26:34,640
by automating testing exam execution

00:26:31,360 --> 00:26:37,679
on those distributed devices

00:26:34,640 --> 00:26:40,320
the third is to support ocip reference

00:26:37,679 --> 00:26:40,320
platforms

00:26:43,520 --> 00:26:48,080
in this chart i'd like to explain how

00:26:46,480 --> 00:26:52,080
cip testing team

00:26:48,080 --> 00:26:55,200
follows upstream first principle

00:26:52,080 --> 00:26:58,640
kernel pi and lava are upstream

00:26:55,200 --> 00:26:58,640
of cip testing team

00:27:00,080 --> 00:27:03,279
the first action is through upstream

00:27:02,480 --> 00:27:08,000
code

00:27:03,279 --> 00:27:10,559
and to review code of those upstream

00:27:08,000 --> 00:27:12,400
we are funding the currency on because

00:27:10,559 --> 00:27:15,360
we agree with their goals

00:27:12,400 --> 00:27:16,320
and hope that people project ramps up

00:27:15,360 --> 00:27:18,840
quickly

00:27:16,320 --> 00:27:21,840
in order to contribute to communities

00:27:18,840 --> 00:27:21,840
overall

00:27:23,120 --> 00:27:30,480
the second action is used the team uses

00:27:27,279 --> 00:27:33,919
kernel ci and lava to build automated

00:27:30,480 --> 00:27:35,120
testing systems the automated testing

00:27:33,919 --> 00:27:38,640
systems are built

00:27:35,120 --> 00:27:42,399
on full testing labs located in

00:27:38,640 --> 00:27:42,399
asia and europe

00:27:46,799 --> 00:27:53,919
here is the testing architecture

00:27:50,559 --> 00:27:54,320
15 targets of cip kernel sources as well

00:27:53,919 --> 00:27:58,080
as

00:27:54,320 --> 00:27:58,559
lts release candidates we are aiming to

00:27:58,080 --> 00:28:02,480
catch

00:27:58,559 --> 00:28:06,960
issues in lps release candidates so that

00:28:02,480 --> 00:28:06,960
we can contribute to upstream more

00:28:07,520 --> 00:28:11,200
the team is also working to create a

00:28:10,080 --> 00:28:16,159
container-based

00:28:11,200 --> 00:28:18,960
ci infrastructure for gitlab

00:28:16,159 --> 00:28:21,120
objective cell can scale horizontally

00:28:18,960 --> 00:28:24,000
and dynamically

00:28:21,120 --> 00:28:25,520
the infrastructure enables to run an

00:28:24,000 --> 00:28:29,039
arbitrary number of

00:28:25,520 --> 00:28:29,679
ci jobs in power and to scale up and

00:28:29,039 --> 00:28:34,159
down

00:28:29,679 --> 00:28:34,159
based on the current workload situation

00:28:39,039 --> 00:28:44,720
cip reference pools are listed here

00:28:42,159 --> 00:28:47,600
these votes and recruitments are

00:28:44,720 --> 00:28:52,399
prepared by cip member companies

00:28:47,600 --> 00:28:54,640
and placed in their own or common docs

00:28:52,399 --> 00:28:57,200
they are set up to be connected via

00:28:54,640 --> 00:29:00,559
internet

00:28:57,200 --> 00:29:03,520
the test trigger is applied from lava

00:29:00,559 --> 00:29:05,600
to the balls and equipment installed in

00:29:03,520 --> 00:29:13,840
the test environment

00:29:05,600 --> 00:29:13,840
and the results are displayed on the web

00:29:14,320 --> 00:29:22,480
finally cip is running to take

00:29:18,240 --> 00:29:25,520
picture meltdown checker and skt

00:29:22,480 --> 00:29:26,240
for real-time testing we added cyclic

00:29:25,520 --> 00:29:29,120
text

00:29:26,240 --> 00:29:29,120
plus hashtag

00:29:29,440 --> 00:29:40,880
we plan to incorporate case of text

00:29:32,480 --> 00:29:44,000
in future

00:29:40,880 --> 00:29:47,600
these tests are executed on cip

00:29:44,000 --> 00:29:49,919
reference books each each by each

00:29:47,600 --> 00:29:53,360
those test results can be checked

00:29:49,919 --> 00:29:53,360
through lava interface

00:29:53,600 --> 00:29:58,880
this is a list which shows scheduled

00:29:56,240 --> 00:30:01,919
testing on data

00:29:58,880 --> 00:30:08,080
in order to see more detailed results

00:30:01,919 --> 00:30:11,120
you can click bottom

00:30:08,080 --> 00:30:14,159
cit is collaborating with kernel ci

00:30:11,120 --> 00:30:16,080
to improve the range of steps supported

00:30:14,159 --> 00:30:19,840
by kernel ci

00:30:16,080 --> 00:30:19,840
starting with ltb

00:30:20,080 --> 00:30:25,360
further collaboration is being discussed

00:30:22,640 --> 00:30:30,640
between cip and current ci

00:30:25,360 --> 00:30:30,640
and will update as we progress in future

00:30:34,320 --> 00:30:39,200
so let me conclude today's talk

00:30:40,480 --> 00:30:44,320
cip kernel team follows upstream first

00:30:43,520 --> 00:30:48,080
principle

00:30:44,320 --> 00:30:50,559
and contributes to upstreams

00:30:48,080 --> 00:30:51,760
cip open source tools are people to

00:30:50,559 --> 00:30:55,039
facilitate

00:30:51,760 --> 00:30:58,080
the contribution activities

00:30:55,039 --> 00:31:02,080
by taking advantage of kernel's

00:30:58,080 --> 00:31:05,840
kernel lcs the team teddy releases cip

00:31:02,080 --> 00:31:09,039
slps kernels and aim to maintain them

00:31:05,840 --> 00:31:12,960
for 10 plus years or more

00:31:09,039 --> 00:31:15,600
to reduce vip sld kernel release cost

00:31:12,960 --> 00:31:17,200
the team is closely working with cip

00:31:15,600 --> 00:31:20,799
testing team to build

00:31:17,200 --> 00:31:20,799
automated testing systems

00:31:21,440 --> 00:31:26,960
these activities are not only to provide

00:31:24,000 --> 00:31:30,240
sfgs cleaners for 10 plus years

00:31:26,960 --> 00:31:33,679
by fulfilling industrial requirements

00:31:30,240 --> 00:31:36,720
but also to contribute to upstream

00:31:33,679 --> 00:31:37,760
recently more and more people have

00:31:36,720 --> 00:31:41,919
agreed with us

00:31:37,760 --> 00:31:41,919
by hearing about our activities

00:31:44,399 --> 00:31:50,000
if more people work with us we can

00:31:47,679 --> 00:31:53,120
expand our activities more

00:31:50,000 --> 00:31:54,000
and we can contribute to other projects

00:31:53,120 --> 00:31:58,399
more

00:31:54,000 --> 00:31:58,399
so please join us if you are interested

00:31:58,840 --> 00:32:03,519
in

00:32:00,880 --> 00:32:04,159
if you'd like to know more there are

00:32:03,519 --> 00:32:07,279
links

00:32:04,159 --> 00:32:07,840
for related information this page talks

00:32:07,279 --> 00:32:12,840
about

00:32:07,840 --> 00:32:15,840
our weekly ilc meetings it is open to

00:32:12,840 --> 00:32:15,840
everyone

00:32:17,039 --> 00:32:21,440
this page talks about repositories on

00:32:19,919 --> 00:32:24,320
gitlab

00:32:21,440 --> 00:32:24,960
you are links of open source to receipts

00:32:24,320 --> 00:32:29,840
gained by

00:32:24,960 --> 00:32:29,840
csun are here

00:32:29,919 --> 00:32:34,640
and other information is listed here

00:32:36,880 --> 00:32:42,320
that's all from us thanks for your time

00:32:39,919 --> 00:32:56,240
to join this book

00:32:42,320 --> 00:32:59,039
are there any questions

00:32:56,240 --> 00:32:59,039
hi everyone

00:33:00,399 --> 00:33:05,039
thank you for very much for joining this

00:33:02,240 --> 00:33:08,000
session uh i'm massage kudo

00:33:05,039 --> 00:33:08,000
i'm shaking hands

00:33:08,640 --> 00:33:12,000
hello i'm ezzy

00:33:14,960 --> 00:33:22,880
so currently we have couple

00:33:18,720 --> 00:33:27,440
we have couple of uh questions here

00:33:22,880 --> 00:33:28,960
so one first one is is every lts version

00:33:27,440 --> 00:33:32,480
chosen for

00:33:28,960 --> 00:33:32,480
slts in cip

00:33:34,640 --> 00:33:40,880
yes actually let's see i can show this

00:33:46,159 --> 00:33:52,720
okay so far

00:33:49,440 --> 00:33:58,240
we are selecting uh lts

00:33:52,720 --> 00:33:58,240
currently we selected 4.4 and 4.19

00:33:59,120 --> 00:34:02,320
kudoza i cannot hear you

00:34:04,880 --> 00:34:11,760
hello can you hear me yes

00:34:08,639 --> 00:34:15,440
okay sorry sorry

00:34:11,760 --> 00:34:19,679
maybe you have to emulate your computer

00:34:15,440 --> 00:34:23,440
right i uh

00:34:19,679 --> 00:34:26,879
what i'd like to answer is that

00:34:23,440 --> 00:34:30,320
instead of picking up every lts

00:34:26,879 --> 00:34:30,320
cip is selecting

00:34:32,000 --> 00:34:38,720
some lts so far we have selected 4.4 and

00:34:36,960 --> 00:34:41,760
4.19

00:34:38,720 --> 00:34:46,839
we are selecting lts every two to

00:34:41,760 --> 00:34:49,839
three years that's our current person

00:34:46,839 --> 00:34:49,839
policy

00:34:51,280 --> 00:34:58,720
yeah um as you may know there are

00:34:54,320 --> 00:35:02,760
six uh six lts version now so

00:34:58,720 --> 00:35:05,040
um the cip1 choose every version as the

00:35:02,760 --> 00:35:08,640
slrts

00:35:05,040 --> 00:35:12,640
we will discuss and exchange

00:35:08,640 --> 00:35:16,400
our idea in the cip

00:35:12,640 --> 00:35:16,880
technical steering committee and make

00:35:16,400 --> 00:35:21,599
the

00:35:16,880 --> 00:35:25,760
consensus afterward so as you can see

00:35:21,599 --> 00:35:25,760
we have two version now not every

00:35:28,839 --> 00:35:34,160
lts

00:35:30,720 --> 00:35:34,160
okay so next question is

00:35:34,640 --> 00:35:38,000
how would you recommend someone to get

00:35:37,280 --> 00:35:40,960
involved

00:35:38,000 --> 00:35:40,960
in the cip

00:35:42,000 --> 00:35:45,839
yes that's a great question

00:35:46,960 --> 00:35:49,839
uh let's see

00:35:53,280 --> 00:36:00,560
just a moment let's see

00:35:57,359 --> 00:36:00,560
yes this one

00:36:01,920 --> 00:36:10,400
uh as you know for

00:36:05,200 --> 00:36:10,400
industrial devices or systems there are

00:36:10,880 --> 00:36:15,359
several requirements and in order to

00:36:13,839 --> 00:36:18,480
satisfy

00:36:15,359 --> 00:36:21,680
those requirements there are several

00:36:18,480 --> 00:36:25,680
activities uh required

00:36:21,680 --> 00:36:29,599
required to do that and uh

00:36:25,680 --> 00:36:32,880
so far uh we have uh listed uh

00:36:29,599 --> 00:36:36,560
those activities which we

00:36:32,880 --> 00:36:40,560
believe that those activities are needed

00:36:36,560 --> 00:36:44,800
however only six of them

00:36:40,560 --> 00:36:47,839
have selected for us to uh kindly are

00:36:44,800 --> 00:36:51,040
working on if

00:36:47,839 --> 00:36:54,800
more members can join uh

00:36:51,040 --> 00:36:58,560
more why wider range of

00:36:54,800 --> 00:37:01,440
activities can be accomplished

00:36:58,560 --> 00:37:02,160
in addition to those activities we are

00:37:01,440 --> 00:37:05,200
working

00:37:02,160 --> 00:37:08,800
on the super long term support

00:37:05,200 --> 00:37:12,480
project that's uh

00:37:08,800 --> 00:37:18,160
as a season explained

00:37:12,480 --> 00:37:18,160
we are currently considering the

00:37:18,320 --> 00:37:22,320
cib kernel config that is uh our member

00:37:21,920 --> 00:37:26,480
can

00:37:22,320 --> 00:37:31,119
companies are reference board target

00:37:26,480 --> 00:37:34,240
if um people would like to have their

00:37:31,119 --> 00:37:35,680
own platform or boards to be extended

00:37:34,240 --> 00:37:39,359
for 10 years

00:37:35,680 --> 00:37:42,240
then please join and please work with us

00:37:39,359 --> 00:37:43,359
for those part boards or platforms can

00:37:42,240 --> 00:37:50,400
be extended

00:37:43,359 --> 00:37:52,960
for 10 years by working with together

00:37:50,400 --> 00:37:55,440
thank you kudos allow me to add some

00:37:52,960 --> 00:37:55,440
comments

00:37:55,599 --> 00:37:59,040
yes please thank you

00:38:01,599 --> 00:38:05,839
let me scroll down the slides first

00:38:13,440 --> 00:38:20,079
regarding the question my answer is

00:38:16,560 --> 00:38:24,320
it depends it depends on

00:38:20,079 --> 00:38:27,359
your interest in the um

00:38:24,320 --> 00:38:28,960
which kind of the activity so basically

00:38:27,359 --> 00:38:32,320
i would suggest

00:38:28,960 --> 00:38:33,040
to join the cip irc meeting it's a

00:38:32,320 --> 00:38:36,240
public

00:38:33,040 --> 00:38:37,440
ioc channel and we have a regular

00:38:36,240 --> 00:38:40,640
meeting

00:38:37,440 --> 00:38:44,000
every thursday so

00:38:40,640 --> 00:38:44,000
i will recommend

00:38:44,400 --> 00:38:49,520
if you have interest in cip activity you

00:38:47,280 --> 00:38:53,280
can feel free to join the

00:38:49,520 --> 00:38:53,280
crc weekly meeting

00:38:55,359 --> 00:38:58,720
okay so

00:38:59,599 --> 00:39:07,839
next question is with kernel 5.4

00:39:03,760 --> 00:39:10,720
version and later llts also qualify for

00:39:07,839 --> 00:39:10,720
slts

00:39:12,400 --> 00:39:19,680
uh yes uh as

00:39:15,760 --> 00:39:23,119
a csun uh explained uh

00:39:19,680 --> 00:39:28,400
we discussed about the new

00:39:23,119 --> 00:39:31,680
slts releases at the tsc meetings

00:39:28,400 --> 00:39:35,560
and currently uh

00:39:31,680 --> 00:39:37,839
we are going to skip

00:39:35,560 --> 00:39:41,200
4.5.4

00:39:37,839 --> 00:39:44,560
and we are going to probably uh

00:39:41,200 --> 00:39:48,320
we are discussing to uh

00:39:44,560 --> 00:39:51,760
select this year's lps

00:39:48,320 --> 00:39:51,760
as the next candidate

00:39:52,320 --> 00:39:58,800
and therefore again uh

00:39:55,440 --> 00:40:01,520
5.4 is skipped

00:39:58,800 --> 00:40:01,520
at this moment

00:40:04,800 --> 00:40:14,640
yes okay

00:40:09,280 --> 00:40:14,640
so the next question is

00:40:14,960 --> 00:40:25,839
do you publish results on mailing lists

00:40:27,359 --> 00:40:34,240
um this results mean the uh

00:40:30,640 --> 00:40:38,079
probably uh kernel releases maybe

00:40:34,240 --> 00:40:41,440
then if that is the case uh yes

00:40:38,079 --> 00:40:42,720
we are announcing our cip kernel

00:40:41,440 --> 00:40:47,520
releases

00:40:42,720 --> 00:40:47,520
in cip dev mailing list

00:40:49,280 --> 00:40:55,680
yes here on the top

00:40:52,640 --> 00:40:58,800
line you can see a cip mailing list

00:40:55,680 --> 00:41:03,760
clp2 this is the mailing list

00:40:58,800 --> 00:41:03,760
you can see our announcement of kernel

00:41:04,839 --> 00:41:10,160
releases

00:41:06,560 --> 00:41:13,359
yep regarding the kernel developments

00:41:10,160 --> 00:41:16,960
the cib kernel team will work with

00:41:13,359 --> 00:41:19,359
the upstream that is stable kernel so

00:41:16,960 --> 00:41:20,000
you may find some contribution from cip

00:41:19,359 --> 00:41:24,160
members

00:41:20,000 --> 00:41:28,800
in the stable kernel mailing list

00:41:24,160 --> 00:41:28,800
and as the kudos are mentioned

00:41:29,040 --> 00:41:36,079
every result will be public

00:41:33,040 --> 00:41:38,560
in the cpdv mailing list

00:41:36,079 --> 00:41:38,560
as well

00:41:39,280 --> 00:41:43,440
so you can refer to

00:41:43,599 --> 00:41:49,839
below link in this slide

00:41:53,200 --> 00:41:59,920
okay so next question is uh

00:41:56,400 --> 00:42:02,880
there are any remarkable features

00:41:59,920 --> 00:42:03,599
you are expected in currently released

00:42:02,880 --> 00:42:09,520
kernels

00:42:03,599 --> 00:42:09,520
but not yet in any slts

00:42:12,160 --> 00:42:17,839
let's see

00:42:19,040 --> 00:42:23,520
oh let's see this one

00:42:28,839 --> 00:42:31,839
okay

00:42:32,960 --> 00:42:38,319
remarkable features

00:42:36,000 --> 00:42:38,319
yes

00:42:41,520 --> 00:42:47,200
um uh

00:42:44,640 --> 00:42:49,359
this is kind a little bit controversy

00:42:47,200 --> 00:42:49,359
but

00:42:53,520 --> 00:42:56,079
one thing

00:42:56,800 --> 00:43:03,040
which is very difficult uh to achieve

00:43:00,000 --> 00:43:06,160
is a function safety and uh

00:43:03,040 --> 00:43:08,720
at this moment uh

00:43:06,160 --> 00:43:10,079
uh there are several projects working on

00:43:08,720 --> 00:43:12,720
the function safety but

00:43:10,079 --> 00:43:13,760
uh at this moment we are not

00:43:12,720 --> 00:43:17,040
incorporating such

00:43:13,760 --> 00:43:19,440
a functionality yet so that's one

00:43:17,040 --> 00:43:19,440
area

00:43:20,240 --> 00:43:23,599
we may need to consider

00:43:24,640 --> 00:43:28,160
a system do you have any comments

00:43:29,200 --> 00:43:37,040
yeah we welcome every um feedback

00:43:32,240 --> 00:43:37,040
from everyone yeah

00:43:38,400 --> 00:43:45,880
okay so next question is is there uh

00:43:42,319 --> 00:43:50,079
is there interest in the cip kernel for

00:43:45,880 --> 00:43:50,079
automotive applications

00:43:52,839 --> 00:43:55,839
whoa

00:43:56,720 --> 00:44:00,800
this is also a very uh interesting

00:44:00,240 --> 00:44:04,400
question

00:44:00,800 --> 00:44:09,839
uh and uh

00:44:04,400 --> 00:44:09,839
also uh

00:44:10,560 --> 00:44:17,280
let's see uh the area

00:44:14,000 --> 00:44:21,680
automotive uh applications

00:44:17,280 --> 00:44:24,079
uh uh seeking is one

00:44:21,680 --> 00:44:26,079
one one functionality is a function

00:44:24,079 --> 00:44:29,200
safety

00:44:26,079 --> 00:44:32,720
and uh uh

00:44:29,200 --> 00:44:36,560
that that is uh hard to see

00:44:32,720 --> 00:44:39,040
uh a little bit difficult part uh we can

00:44:36,560 --> 00:44:39,040
address

00:44:40,880 --> 00:44:49,200
but yes because automotive

00:44:45,440 --> 00:44:52,800
linux also requires long-term support

00:44:49,200 --> 00:44:56,319
and myself

00:44:52,800 --> 00:44:58,720
i myself is interested in the automotive

00:44:56,319 --> 00:44:58,720
area

00:45:00,400 --> 00:45:07,520
a season do you have any comments

00:45:04,160 --> 00:45:10,880
yeah i agree with you

00:45:07,520 --> 00:45:14,400
since the automatic application

00:45:10,880 --> 00:45:19,520
needs maybe functional safety or

00:45:14,400 --> 00:45:24,400
security features

00:45:19,520 --> 00:45:24,400
yes so maybe in the future right kudos

00:45:27,760 --> 00:45:34,000
okay the next question what

00:45:30,800 --> 00:45:39,119
sort of industrious customers

00:45:34,000 --> 00:45:39,119
are most interested in slts

00:45:44,839 --> 00:45:50,720
uh

00:45:46,720 --> 00:45:55,119
uh i uh

00:45:50,720 --> 00:45:55,119
when i uh visit customers

00:45:57,119 --> 00:46:04,400
they are uh

00:46:00,319 --> 00:46:07,599
interested in several areas uh

00:46:04,400 --> 00:46:09,119
not only uh uh super long-term support

00:46:07,599 --> 00:46:14,079
but also

00:46:09,119 --> 00:46:18,480
iot patches or other

00:46:14,079 --> 00:46:18,480
features as well and

00:46:24,560 --> 00:46:31,359
let's see uh

00:46:28,240 --> 00:46:35,040
those customers users

00:46:31,359 --> 00:46:39,599
uh include the uh

00:46:35,040 --> 00:46:39,599
how to say uh

00:46:40,000 --> 00:46:44,319
mfp camera

00:46:44,480 --> 00:46:49,119
factory automation and

00:46:49,440 --> 00:46:54,800
of course automotive area as well

00:46:54,960 --> 00:47:00,480
uh there are various areas uh

00:46:58,240 --> 00:47:03,040
there are various customers from various

00:47:00,480 --> 00:47:06,240
industries so various segments

00:47:03,040 --> 00:47:10,640
are requiring uh lts is

00:47:06,240 --> 00:47:14,640
super long time support at this moment

00:47:10,640 --> 00:47:18,720
system do you have any comments yeah uh

00:47:14,640 --> 00:47:23,040
from my personal experience the

00:47:18,720 --> 00:47:26,079
customer needs longevity products

00:47:23,040 --> 00:47:29,040
in south vertical market such as

00:47:26,079 --> 00:47:29,040
a railway

00:47:29,119 --> 00:47:35,599
power plant oil and gas

00:47:32,480 --> 00:47:35,599
etc yeah

00:47:36,559 --> 00:47:40,960
they have to maintain their system for a

00:47:39,520 --> 00:47:44,160
long time

00:47:40,960 --> 00:47:46,800
so yeah

00:47:44,160 --> 00:47:46,800
they need it

00:47:47,920 --> 00:47:56,160
okay so next question is how did you

00:47:51,119 --> 00:47:56,160
choose 10 years as the support leftline

00:47:59,280 --> 00:48:08,559
yes frankly speaking

00:48:04,000 --> 00:48:13,760
10 years is not

00:48:08,559 --> 00:48:13,760
enough for those customers

00:48:14,559 --> 00:48:20,480
usually 15 years or 20 years are

00:48:18,079 --> 00:48:23,599
requested but uh

00:48:20,480 --> 00:48:27,680
by looking at the state of the arts

00:48:23,599 --> 00:48:31,520
of a maintenance uh technology

00:48:27,680 --> 00:48:35,599
our community activity

00:48:31,520 --> 00:48:39,040
we are going we are starting with

00:48:35,599 --> 00:48:42,319
10 years by

00:48:39,040 --> 00:48:45,680
uh how to say by

00:48:42,319 --> 00:48:47,440
refining our methodology and our

00:48:45,680 --> 00:48:50,640
policies

00:48:47,440 --> 00:48:53,839
may extend uh such 10 years

00:48:50,640 --> 00:48:56,880
to 12 or 15 years but

00:48:53,839 --> 00:48:57,839
at this moment uh we are working 10

00:48:56,880 --> 00:49:00,880
years

00:48:57,839 --> 00:49:03,839
as a first uh how to say

00:49:00,880 --> 00:49:03,839
subaru

00:49:08,480 --> 00:49:12,160
yeah as you may know it took lots of

00:49:10,720 --> 00:49:15,359
resources

00:49:12,160 --> 00:49:18,880
for maintaining the nina's kernel

00:49:15,359 --> 00:49:23,520
so 10 years is just as

00:49:18,880 --> 00:49:26,160
good as i mentioned just a number

00:49:23,520 --> 00:49:26,160
false now

00:49:32,880 --> 00:49:37,359
okay so we only got uh

00:49:37,839 --> 00:49:41,359
20 seconds left so we don't have enough

00:49:40,800 --> 00:49:44,720
time

00:49:41,359 --> 00:49:47,280
for answering the question

00:49:44,720 --> 00:49:49,280
anyway if you have any question i think

00:49:47,280 --> 00:49:52,800
you can reach us via the

00:49:49,280 --> 00:49:56,480
middle list right kudosan

00:49:52,800 --> 00:49:59,520
yes uh we are welcoming you to join

00:49:56,480 --> 00:50:02,880
so we are looking forward to

00:49:59,520 --> 00:50:06,240
hearing from you moa okay thank you then

00:50:02,880 --> 00:50:07,599
uh again thanks very much for having

00:50:06,240 --> 00:50:10,640
joined our session

00:50:07,599 --> 00:50:11,680
and have a great great time in this

00:50:10,640 --> 00:50:23,599
event

00:50:11,680 --> 00:50:23,599

YouTube URL: https://www.youtube.com/watch?v=koyHOxxqUVs


