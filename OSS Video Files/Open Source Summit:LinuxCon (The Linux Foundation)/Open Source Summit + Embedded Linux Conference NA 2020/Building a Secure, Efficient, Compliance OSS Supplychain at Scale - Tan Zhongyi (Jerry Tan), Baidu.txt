Title: Building a Secure, Efficient, Compliance OSS Supplychain at Scale - Tan Zhongyi (Jerry Tan), Baidu
Publication date: 2020-09-08
Playlist: Open Source Summit + Embedded Linux Conference NA 2020
Description: 
	Building a Secure, Efficient, Compliance OSS Supplychain at Scale - Tan Zhongyi (Jerry Tan), Baidu
Captions: 
	00:00:00,240 --> 00:00:04,880
welcome to my session in my session i'll

00:00:03,840 --> 00:00:08,400
talk about

00:00:04,880 --> 00:00:12,080
how to build a secure efficient

00:00:08,400 --> 00:00:15,519
complex for supply chain at scale

00:00:12,080 --> 00:00:15,519
please enjoy my session

00:00:15,599 --> 00:00:24,160
first i'll introduce myself a little bit

00:00:20,800 --> 00:00:25,920
my name is thank me you can call me

00:00:24,160 --> 00:00:28,800
jerry

00:00:25,920 --> 00:00:29,199
i'm a program manager of baidu open

00:00:28,800 --> 00:00:32,320
source

00:00:29,199 --> 00:00:35,440
program office i have worked

00:00:32,320 --> 00:00:39,280
in open source community for over

00:00:35,440 --> 00:00:42,480
20 years i'm a committee on mozilla

00:00:39,280 --> 00:00:46,879
gloom and apache foundation

00:00:42,480 --> 00:00:49,680
i'm an advocate of open source in china

00:00:46,879 --> 00:00:50,239
and also one of the founders of open

00:00:49,680 --> 00:00:53,360
chain

00:00:50,239 --> 00:00:53,360
channel working group

00:00:54,320 --> 00:01:02,000
here's my gender first i'll talk about

00:00:57,760 --> 00:01:05,280
what is for supply chain any risks

00:01:02,000 --> 00:01:08,560
for it and a challenge for my company

00:01:05,280 --> 00:01:11,600
then i'll talk about solution for it and

00:01:08,560 --> 00:01:14,479
my practice next

00:01:11,600 --> 00:01:14,479
i will summary

00:01:14,720 --> 00:01:22,560
first what is the first flight chain

00:01:18,720 --> 00:01:25,680
first supply chain means the operation

00:01:22,560 --> 00:01:28,720
of consuming force f

00:01:25,680 --> 00:01:32,000
freeze open software

00:01:28,720 --> 00:01:33,600
within a company will run steady

00:01:32,000 --> 00:01:36,640
businesses

00:01:33,600 --> 00:01:39,840
the challenging is just not any supply

00:01:36,640 --> 00:01:43,280
chain within company

00:01:39,840 --> 00:01:46,720
do i trust my own

00:01:43,280 --> 00:01:49,840
open source supply chain is it is safe

00:01:46,720 --> 00:01:54,560
to use are risk alone

00:01:49,840 --> 00:01:58,000
is it efficient of course unknown

00:01:54,560 --> 00:02:01,360
why because today

00:01:58,000 --> 00:02:05,040
people don't write software from scratch

00:02:01,360 --> 00:02:08,399
instead they assemble them

00:02:05,040 --> 00:02:11,200
here's one picture from linux foundation

00:02:08,399 --> 00:02:13,200
and it says that in today's modern

00:02:11,200 --> 00:02:16,400
software

00:02:13,200 --> 00:02:19,680
we use 90 percent

00:02:16,400 --> 00:02:24,319
of code in

00:02:19,680 --> 00:02:29,120
open source code here's one example

00:02:24,319 --> 00:02:33,519
engineers start a open source from work

00:02:29,120 --> 00:02:36,319
then write its customers the code

00:02:33,519 --> 00:02:37,120
then combined with open source library

00:02:36,319 --> 00:02:40,640
to

00:02:37,120 --> 00:02:43,680
solve the real world problems

00:02:40,640 --> 00:02:44,640
you can see that the customer code is

00:02:43,680 --> 00:02:47,840
only

00:02:44,640 --> 00:02:51,599
10 the 90

00:02:47,840 --> 00:02:55,120
are open source code so it's very very

00:02:51,599 --> 00:02:55,120
important for companies

00:02:56,400 --> 00:03:04,000
first is free to use and it has

00:02:59,680 --> 00:03:08,560
also risks it may have

00:03:04,000 --> 00:03:13,760
security code it might have bars

00:03:08,560 --> 00:03:17,159
cooldowns harms memory links

00:03:13,760 --> 00:03:22,080
it may also have complex issues

00:03:17,159 --> 00:03:22,080
gpr-related and patent-related

00:03:22,159 --> 00:03:27,120
here are some cases the first case is a

00:03:25,360 --> 00:03:32,000
very famous case

00:03:27,120 --> 00:03:35,200
security holes cause dns losses

00:03:32,000 --> 00:03:36,319
you may have heard it before the inquiry

00:03:35,200 --> 00:03:39,560
fast bridge

00:03:36,319 --> 00:03:43,920
and online apache strats were

00:03:39,560 --> 00:03:48,480
liberties cost more than 400

00:03:43,920 --> 00:03:49,920
million dollars and affects 140 million

00:03:48,480 --> 00:03:53,680
people

00:03:49,920 --> 00:03:53,680
whoa it's crazy

00:03:54,080 --> 00:03:58,480
and there's not two cases caused by

00:03:57,040 --> 00:04:01,840
sulphur box

00:03:58,480 --> 00:04:05,200
because business is outrageous it's

00:04:01,840 --> 00:04:08,560
really cases in my company

00:04:05,200 --> 00:04:12,159
case one one online ticket service

00:04:08,560 --> 00:04:16,160
broken due to a cpu handbox

00:04:12,159 --> 00:04:20,479
when using an old version of fast csm

00:04:16,160 --> 00:04:24,400
which cost losing 500

00:04:20,479 --> 00:04:27,440
000 rmp revenues first jason

00:04:24,400 --> 00:04:31,759
is an open source library

00:04:27,440 --> 00:04:35,520
very popular in china it's a job library

00:04:31,759 --> 00:04:35,520
to pass json data

00:04:36,400 --> 00:04:43,680
first in our case one advertisement

00:04:40,320 --> 00:04:46,800
service failed due to one lone point

00:04:43,680 --> 00:04:51,840
box usual keeper software

00:04:46,800 --> 00:04:51,840
losing 7 million rmb revenues

00:04:53,840 --> 00:05:01,120
and some cases about complex issues

00:04:57,680 --> 00:05:04,320
such as gpr violations and the

00:05:01,120 --> 00:05:08,000
python terms i'm not an expert

00:05:04,320 --> 00:05:12,240
of nego so you can google

00:05:08,000 --> 00:05:15,280
mixes wrt fourth

00:05:12,240 --> 00:05:18,720
file 4g and

00:05:15,280 --> 00:05:25,039
reacted to the pattern issues on google

00:05:18,720 --> 00:05:28,960
you can get more info missions there

00:05:25,039 --> 00:05:33,039
so the whole picture of first supply

00:05:28,960 --> 00:05:37,280
chain management here

00:05:33,039 --> 00:05:40,639
is inside the company

00:05:37,280 --> 00:05:44,400
we collaborate our

00:05:40,639 --> 00:05:48,000
code but we

00:05:44,400 --> 00:05:51,199
inbound a free open software

00:05:48,000 --> 00:05:54,479
abc from our stream

00:05:51,199 --> 00:05:55,280
and then autobahn will release it to our

00:05:54,479 --> 00:05:58,800
customer

00:05:55,280 --> 00:06:02,479
we can release to ss online service

00:05:58,800 --> 00:06:06,479
and we need as a software and we meet

00:06:02,479 --> 00:06:09,600
with hardware

00:06:06,479 --> 00:06:14,479
the status in my company previously

00:06:09,600 --> 00:06:17,840
are not good it's not very compliant

00:06:14,479 --> 00:06:21,039
because nobody care about ip issues

00:06:17,840 --> 00:06:23,280
when importing oss code and releasing

00:06:21,039 --> 00:06:26,479
their own

00:06:23,280 --> 00:06:29,680
it's not very secure many usage

00:06:26,479 --> 00:06:33,280
of open source software with knowing

00:06:29,680 --> 00:06:36,400
highly risky cve box

00:06:33,280 --> 00:06:39,440
the fixing process is quite slow and

00:06:36,400 --> 00:06:42,800
not guaranteed and it's

00:06:39,440 --> 00:06:45,840
not very efficient the huge

00:06:42,800 --> 00:06:49,680
duplication of resource code in

00:06:45,840 --> 00:06:55,360
our internal code management system

00:06:49,680 --> 00:06:55,360
an updating process is quite painful

00:06:55,599 --> 00:07:04,479
here's one case when a homepage

00:06:59,360 --> 00:07:07,759
founded in fascism 1.2.51

00:07:04,479 --> 00:07:10,960
cause revenue loss in one product

00:07:07,759 --> 00:07:12,319
we want to avoid other similar problems

00:07:10,960 --> 00:07:15,919
also

00:07:12,319 --> 00:07:16,800
what do we do when notified with emails

00:07:15,919 --> 00:07:20,080
and pushed

00:07:16,800 --> 00:07:23,599
all in here to check by themselves

00:07:20,080 --> 00:07:26,880
and fix them by hand

00:07:23,599 --> 00:07:30,720
but after three months the status

00:07:26,880 --> 00:07:32,960
was still unknown engineers told me that

00:07:30,720 --> 00:07:34,160
no one was assigned to work on this

00:07:32,960 --> 00:07:37,199
issue

00:07:34,160 --> 00:07:42,240
why because this method

00:07:37,199 --> 00:07:45,120
was not efficient and did not work well

00:07:42,240 --> 00:07:47,199
if we were forced to fix it by hand

00:07:45,120 --> 00:07:51,280
there's a huge work

00:07:47,199 --> 00:07:51,280
and it's not going to scare at all

00:07:52,240 --> 00:07:58,560
so the real problem for objects of

00:07:55,440 --> 00:08:02,080
for supply chain management is to

00:07:58,560 --> 00:08:06,639
how to build a secure efficient

00:08:02,080 --> 00:08:06,639
complex for supply chain skill

00:08:08,319 --> 00:08:12,000
stands for open chain project it

00:08:10,960 --> 00:08:15,280
provides us

00:08:12,000 --> 00:08:15,280
a great framework

00:08:15,840 --> 00:08:22,800
urban chain is a standard to disquiet

00:08:19,199 --> 00:08:27,199
what organization could and should do

00:08:22,800 --> 00:08:30,800
to address enforce complex infection

00:08:27,199 --> 00:08:34,240
it identified key recommendation process

00:08:30,800 --> 00:08:37,279
and record keeping requirements for

00:08:34,240 --> 00:08:41,839
effective force management

00:08:37,279 --> 00:08:41,839
and it's not only complex

00:08:42,479 --> 00:08:46,160
you can check out the

00:08:44,680 --> 00:08:47,519
openchainproject.org for more

00:08:46,160 --> 00:08:51,360
information

00:08:47,519 --> 00:08:51,360
it defines the whole process

00:08:52,800 --> 00:08:58,240
we need training we need policy and we

00:08:55,440 --> 00:08:58,240
need process

00:08:59,440 --> 00:09:06,480
it falls idea from the mean

00:09:03,120 --> 00:09:11,040
this picture is from

00:09:06,480 --> 00:09:11,040
derrick weeks on oscar

00:09:11,160 --> 00:09:18,880
2017 it says that

00:09:14,160 --> 00:09:22,320
from damien's idea supply chain

00:09:18,880 --> 00:09:24,399
need to use fewer and better component

00:09:22,320 --> 00:09:27,839
suppliers

00:09:24,399 --> 00:09:28,800
use only the highest quality components

00:09:27,839 --> 00:09:32,880
part

00:09:28,800 --> 00:09:36,560
and continuously check when and where

00:09:32,880 --> 00:09:40,800
components are used

00:09:36,560 --> 00:09:44,080
so are the ideal practices in clothes

00:09:40,800 --> 00:09:47,200
when you find open source software

00:09:44,080 --> 00:09:50,560
engineers insure tool you

00:09:47,200 --> 00:09:54,560
use high quality ones unlimited one

00:09:50,560 --> 00:09:57,680
from trusted suppliers keep a record

00:09:54,560 --> 00:10:00,240
when consuming them know the lessons

00:09:57,680 --> 00:10:02,079
and the pattern limitation of them

00:10:00,240 --> 00:10:05,680
before using it

00:10:02,079 --> 00:10:08,800
and when outbound engineers ensure

00:10:05,680 --> 00:10:12,160
to keep a software bone

00:10:08,800 --> 00:10:15,200
when releasing fulfill the rp

00:10:12,160 --> 00:10:18,480
obligation of this force

00:10:15,200 --> 00:10:18,880
update periodically when being notified

00:10:18,480 --> 00:10:24,079
by

00:10:18,880 --> 00:10:24,079
security sie and then legal teams

00:10:25,279 --> 00:10:35,120
talk achieve but how to implement

00:10:32,959 --> 00:10:37,200
there are many challenges the real

00:10:35,120 --> 00:10:41,760
challenge for my company

00:10:37,200 --> 00:10:44,160
is that there are massive

00:10:41,760 --> 00:10:45,279
force supply and demands around the

00:10:44,160 --> 00:10:47,440
world

00:10:45,279 --> 00:10:49,920
and there are so many engineers and

00:10:47,440 --> 00:10:53,040
reports in my company

00:10:49,920 --> 00:10:57,920
the engineers habits are bad

00:10:53,040 --> 00:10:57,920
and will lack of resources

00:10:58,240 --> 00:11:02,000
the first challenge their massive first

00:11:01,440 --> 00:11:06,320
supply

00:11:02,000 --> 00:11:11,279
and demands according to the

00:11:06,320 --> 00:11:11,279
report of zone attack

00:11:11,920 --> 00:11:18,320
their 3.6 milli

00:11:14,959 --> 00:11:20,800
unit packages in central metal

00:11:18,320 --> 00:11:26,560
repository

00:11:20,800 --> 00:11:26,560
the download is increased dramatically

00:11:27,519 --> 00:11:34,720
and for javascript the 8

00:11:31,680 --> 00:11:38,079
100 key unique packages in

00:11:34,720 --> 00:11:40,880
central npm repository

00:11:38,079 --> 00:11:42,560
the download rate is increased even

00:11:40,880 --> 00:11:46,480
bigger

00:11:42,560 --> 00:11:51,120
so on average developers have access

00:11:46,480 --> 00:11:54,399
to more than 21

00:11:51,120 --> 00:12:01,760
000 new open source software components

00:11:54,399 --> 00:12:01,760
released every day since 2018.

00:12:03,040 --> 00:12:06,160
the second challenge is that there are

00:12:04,959 --> 00:12:09,200
so many engineers

00:12:06,160 --> 00:12:10,639
and the wrinkles inside my company my

00:12:09,200 --> 00:12:14,000
company has

00:12:10,639 --> 00:12:17,760
over 15k engineers

00:12:14,000 --> 00:12:21,680
they are working on over 100k reports

00:12:17,760 --> 00:12:24,959
every day and the 3 million commits

00:12:21,680 --> 00:12:25,680
last year and a 400 millions code

00:12:24,959 --> 00:12:28,320
changes

00:12:25,680 --> 00:12:28,320
last year

00:12:29,120 --> 00:12:36,480
here is a third challenge the engineer

00:12:33,279 --> 00:12:40,000
bad developing habits

00:12:36,480 --> 00:12:42,720
engineers are not aware of 4 degrees

00:12:40,000 --> 00:12:44,320
so we choose whatever code they like to

00:12:42,720 --> 00:12:47,279
use

00:12:44,320 --> 00:12:47,920
engineers are not willing to update

00:12:47,279 --> 00:12:51,200
first

00:12:47,920 --> 00:12:52,000
software version if they have already

00:12:51,200 --> 00:12:55,120
finished

00:12:52,000 --> 00:12:58,000
integrating and some engineers

00:12:55,120 --> 00:12:58,880
like to convey the first resource call

00:12:58,000 --> 00:13:02,000
into their

00:12:58,880 --> 00:13:04,720
product repo together with their

00:13:02,000 --> 00:13:04,720
own codes

00:13:05,519 --> 00:13:10,480
and we lack our resources the two

00:13:08,720 --> 00:13:13,440
engineer resources

00:13:10,480 --> 00:13:14,160
legal resources and security engineering

00:13:13,440 --> 00:13:17,680
resources

00:13:14,160 --> 00:13:21,760
are all very limited

00:13:17,680 --> 00:13:24,800
how to handle so the only solution

00:13:21,760 --> 00:13:27,920
is automation

00:13:24,800 --> 00:13:31,200
i have to use tools automatically

00:13:27,920 --> 00:13:34,639
as much as possible and i need to

00:13:31,200 --> 00:13:38,160
team work work with nego security

00:13:34,639 --> 00:13:42,160
tools teams and we might need to

00:13:38,160 --> 00:13:45,360
be injured need regime with small steps

00:13:42,160 --> 00:13:48,639
set up priorities and focuses on the

00:13:45,360 --> 00:13:52,720
highest one

00:13:48,639 --> 00:13:56,399
so what i do i set up a work team

00:13:52,720 --> 00:13:59,680
including guys from legal security

00:13:56,399 --> 00:14:03,040
and tours and land up

00:13:59,680 --> 00:14:06,399
our goals and priorities we set out

00:14:03,040 --> 00:14:09,680
our action plan interest steps for the

00:14:06,399 --> 00:14:09,680
less than three years

00:14:09,920 --> 00:14:16,639
here's is our action plan three steps

00:14:13,199 --> 00:14:20,240
for the last three years first

00:14:16,639 --> 00:14:23,680
record oss usage automatically

00:14:20,240 --> 00:14:26,800
to locate and fix high risks

00:14:23,680 --> 00:14:29,839
quickly second

00:14:26,800 --> 00:14:32,240
generate software bond for some core

00:14:29,839 --> 00:14:35,360
production

00:14:32,240 --> 00:14:38,399
the last one is to complete the

00:14:35,360 --> 00:14:41,600
whole chain measurement and

00:14:38,399 --> 00:14:42,079
get open-chain certificate to approve

00:14:41,600 --> 00:14:45,839
that

00:14:42,079 --> 00:14:45,839
we have done it very well

00:14:46,880 --> 00:14:51,440
and the first step is focus on here

00:14:51,519 --> 00:14:58,160
in the right circle

00:14:54,800 --> 00:15:01,600
release is online service is our

00:14:58,160 --> 00:15:01,600
highest priority

00:15:01,920 --> 00:15:05,279
the task needs for our first step is

00:15:04,320 --> 00:15:08,480
that

00:15:05,279 --> 00:15:12,959
we set up an internal mailing server and

00:15:08,480 --> 00:15:13,680
npm server first force engineer to use

00:15:12,959 --> 00:15:16,800
them

00:15:13,680 --> 00:15:20,560
and embed all companies in the report

00:15:16,800 --> 00:15:23,839
if it contains oss code source code

00:15:20,560 --> 00:15:27,680
we define policy we use

00:15:23,839 --> 00:15:31,880
training and we enhance tools

00:15:27,680 --> 00:15:35,199
then we index everything pose nss

00:15:31,880 --> 00:15:37,040
permanent.xml or packaging.json log

00:15:35,199 --> 00:15:41,199
files

00:15:37,040 --> 00:15:44,720
to build first in data

00:15:41,199 --> 00:15:46,480
when a cv bar funding located this

00:15:44,720 --> 00:15:49,600
effective reports

00:15:46,480 --> 00:15:51,519
send the security thinkers to push

00:15:49,600 --> 00:15:55,040
engineer to fix them

00:15:51,519 --> 00:15:58,320
in sap

00:15:55,040 --> 00:16:01,360
why we choose this because baidu

00:15:58,320 --> 00:16:04,480
is an international company most

00:16:01,360 --> 00:16:09,519
of our business is online service and

00:16:04,480 --> 00:16:12,240
the risk of lessons complex is low

00:16:09,519 --> 00:16:12,880
we cannot leave without open source now

00:16:12,240 --> 00:16:16,240
we can

00:16:12,880 --> 00:16:20,079
bear one case of osf-4

00:16:16,240 --> 00:16:21,759
but we cannot tolerate duplicates of osf

00:16:20,079 --> 00:16:25,519
phones

00:16:21,759 --> 00:16:28,480
slow fixing process

00:16:25,519 --> 00:16:29,279
we select java and the javascript first

00:16:28,480 --> 00:16:34,160
because

00:16:29,279 --> 00:16:34,160
they are more popular in baidu

00:16:34,959 --> 00:16:42,639
actual practices we define

00:16:38,800 --> 00:16:45,040
measures matrix collecting metrics data

00:16:42,639 --> 00:16:47,680
before action

00:16:45,040 --> 00:16:49,120
then we announce the open source policy

00:16:47,680 --> 00:16:52,160
and train

00:16:49,120 --> 00:16:55,759
all our engineers we plan to

00:16:52,160 --> 00:17:00,480
developing scenarios for new creative

00:16:55,759 --> 00:17:00,480
codes and for existing articles

00:17:01,360 --> 00:17:05,839
training is very very important

00:17:06,000 --> 00:17:10,880
we must educate our engineers to do

00:17:09,520 --> 00:17:14,959
things correctly

00:17:10,880 --> 00:17:18,319
so we organize several offline training

00:17:14,959 --> 00:17:21,439
in several sites beijing office

00:17:18,319 --> 00:17:25,439
shanghai office and exchanging office

00:17:21,439 --> 00:17:28,640
to tell our engineers how to use

00:17:25,439 --> 00:17:31,120
open source software correctly

00:17:28,640 --> 00:17:32,240
then we're providing online video

00:17:31,120 --> 00:17:35,520
training for

00:17:32,240 --> 00:17:39,039
every engineers then

00:17:35,520 --> 00:17:40,000
we execute online design with video

00:17:39,039 --> 00:17:43,039
training

00:17:40,000 --> 00:17:46,720
for every engineer so every engineer

00:17:43,039 --> 00:17:51,360
is required to finish the video training

00:17:46,720 --> 00:17:51,360
and then pass the online exam

00:17:52,559 --> 00:17:59,039
and for new creative code

00:17:55,679 --> 00:17:59,039
with the last policy

00:17:59,120 --> 00:18:04,080
a company-wide lessons called unlock

00:18:01,760 --> 00:18:07,440
permitted to check in

00:18:04,080 --> 00:18:08,640
some high security oss codes are not

00:18:07,440 --> 00:18:11,760
permitted

00:18:08,640 --> 00:18:16,960
next just two we also

00:18:11,760 --> 00:18:16,960
instagram it called submit hook

00:18:17,600 --> 00:18:25,280
if the patch is hpl

00:18:20,960 --> 00:18:29,039
or related with oss risk oss

00:18:25,280 --> 00:18:32,080
commit will be failed if the patch

00:18:29,039 --> 00:18:37,200
contains oss source code

00:18:32,080 --> 00:18:40,720
commit will be failed too in this way

00:18:37,200 --> 00:18:44,480
we can make sure that no new

00:18:40,720 --> 00:18:48,799
oss code will be entered into the

00:18:44,480 --> 00:18:48,799
code repository illegally

00:18:49,840 --> 00:18:54,799
then we index every report and

00:18:52,640 --> 00:18:58,440
collecting data

00:18:54,799 --> 00:19:02,160
we invest home.xml or

00:18:58,440 --> 00:19:06,400
granted.estimate for job program

00:19:02,160 --> 00:19:09,600
we invest in passive.json slash log

00:19:06,400 --> 00:19:12,559
for javascript projects

00:19:09,600 --> 00:19:13,600
then we build a dependency map and

00:19:12,559 --> 00:19:16,880
import

00:19:13,600 --> 00:19:16,880
them as api

00:19:17,200 --> 00:19:21,280
after each we can set up our open source

00:19:20,559 --> 00:19:25,120
software

00:19:21,280 --> 00:19:28,480
security ticket system

00:19:25,120 --> 00:19:31,679
with sad security fixing process

00:19:28,480 --> 00:19:35,200
and allows it then we get

00:19:31,679 --> 00:19:39,120
affected repo data

00:19:35,200 --> 00:19:44,559
how many ripples and who are the owners

00:19:39,120 --> 00:19:44,559
from the api we get already

00:19:44,799 --> 00:19:51,600
with a semi pass reported we can

00:19:48,160 --> 00:19:55,679
file service tickets to report owner

00:19:51,600 --> 00:19:55,679
to push them to fix it

00:19:56,799 --> 00:20:02,000
here is one case still first jason

00:20:02,159 --> 00:20:07,120
we need to update the fascism to version

00:20:07,159 --> 00:20:12,320
1.2.66

00:20:08,799 --> 00:20:14,640
to avoid a newly funded high risk

00:20:12,320 --> 00:20:14,640
box

00:20:15,360 --> 00:20:22,559
then we identified

00:20:18,799 --> 00:20:27,919
over three hundred reports

00:20:22,559 --> 00:20:27,919
i felt it then we send out

00:20:28,360 --> 00:20:36,159
300 more security tickets

00:20:31,919 --> 00:20:39,760
to these owners to put them to face

00:20:36,159 --> 00:20:45,280
in one week we check with the

00:20:39,760 --> 00:20:49,600
tickets and check with the ripple status

00:20:45,280 --> 00:20:53,520
all are clear and are verified

00:20:49,600 --> 00:20:53,520
that's in that's great

00:20:55,280 --> 00:20:59,360
it's only the first step we need to move

00:20:58,400 --> 00:21:03,280
on with more

00:20:59,360 --> 00:21:06,400
language support go php

00:21:03,280 --> 00:21:09,360
cnc plus we need to scan

00:21:06,400 --> 00:21:10,960
every report to force engineer to

00:21:09,360 --> 00:21:14,159
migrate we use

00:21:10,960 --> 00:21:17,840
maven and npm instead if

00:21:14,159 --> 00:21:17,840
they haven't used it before

00:21:20,159 --> 00:21:24,640
but building first supply chain is a

00:21:23,200 --> 00:21:27,679
long journey

00:21:24,640 --> 00:21:28,480
it's more than complex it should be

00:21:27,679 --> 00:21:31,600
integrated

00:21:28,480 --> 00:21:35,520
with every activity of daily work for

00:21:31,600 --> 00:21:38,400
engineers and project managers

00:21:35,520 --> 00:21:39,520
we will keep going to make it more

00:21:38,400 --> 00:21:45,120
secure

00:21:39,520 --> 00:21:49,520
more efficient and more complex

00:21:45,120 --> 00:21:53,440
last i recommend we can take a look

00:21:49,520 --> 00:21:53,440
to work with open chain

00:21:53,520 --> 00:21:58,000
it's a standard it's a clashing of best

00:21:56,960 --> 00:22:02,159
practice

00:21:58,000 --> 00:22:05,200
in industry is also a community

00:22:02,159 --> 00:22:06,080
many engineers lawyers and program

00:22:05,200 --> 00:22:08,799
managers

00:22:06,080 --> 00:22:10,400
are working together and share their

00:22:08,799 --> 00:22:13,960
practice

00:22:10,400 --> 00:22:18,640
please check out open chat

00:22:13,960 --> 00:22:18,640
project.org for more information

00:22:19,360 --> 00:22:23,360
okay that's all any questions

00:22:24,840 --> 00:22:27,840
thanks

00:23:18,480 --> 00:23:20,559

YouTube URL: https://www.youtube.com/watch?v=JkxUXQyGg4Y


