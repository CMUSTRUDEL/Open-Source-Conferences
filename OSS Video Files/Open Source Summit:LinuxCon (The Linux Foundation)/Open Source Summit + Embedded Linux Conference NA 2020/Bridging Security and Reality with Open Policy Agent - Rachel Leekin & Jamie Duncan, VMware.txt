Title: Bridging Security and Reality with Open Policy Agent - Rachel Leekin & Jamie Duncan, VMware
Publication date: 2020-09-03
Playlist: Open Source Summit + Embedded Linux Conference NA 2020
Description: 
	Bridging Security and Reality with Open Policy Agent - Rachel Leekin & Jamie Duncan, VMware
Captions: 
	00:00:00,799 --> 00:00:06,560
hi welcome to the open source summit

00:00:03,919 --> 00:00:07,600
um i'm rachel legend and jamie duncan is

00:00:06,560 --> 00:00:09,519
on here as well

00:00:07,600 --> 00:00:11,440
we'll be taking you through bridging

00:00:09,519 --> 00:00:14,880
security and reality

00:00:11,440 --> 00:00:14,880
with open policy agent

00:00:15,679 --> 00:00:19,439
so let me tell you a little bit about

00:00:16,800 --> 00:00:20,480
myself i'm rachel egan i'm a field

00:00:19,439 --> 00:00:23,680
engineer

00:00:20,480 --> 00:00:25,599
uh at vmware i've been on the team

00:00:23,680 --> 00:00:27,599
for last couple years working on

00:00:25,599 --> 00:00:31,920
kubernetes and in the cloud industry

00:00:27,599 --> 00:00:34,880
in general i'm also a us pto inventor

00:00:31,920 --> 00:00:36,399
and also part of my role here at vmware

00:00:34,880 --> 00:00:38,640
is promoting

00:00:36,399 --> 00:00:40,399
kubernetes content through cube academy

00:00:38,640 --> 00:00:42,160
some instructor on that as well

00:00:40,399 --> 00:00:44,079
and also creating content for our

00:00:42,160 --> 00:00:46,879
customers through the cloud

00:00:44,079 --> 00:00:48,960
readiness program which we have here at

00:00:46,879 --> 00:00:50,399
vmware where we create content to help

00:00:48,960 --> 00:00:53,280
customers develop

00:00:50,399 --> 00:00:54,320
through their devops processes such as

00:00:53,280 --> 00:00:56,399
as you'll see today

00:00:54,320 --> 00:00:58,079
going through opa developing policies

00:00:56,399 --> 00:01:01,680
using oprah oppa

00:00:58,079 --> 00:01:04,879
also i'm a big chelsea uh soccer fan

00:01:01,680 --> 00:01:07,600
so that's my favorite team and i try to

00:01:04,879 --> 00:01:09,840
watch them whenever i can so um today

00:01:07,600 --> 00:01:10,320
i'll pass it along to my colleague jamie

00:01:09,840 --> 00:01:13,119
duncan

00:01:10,320 --> 00:01:14,320
for telling about himself awesome thanks

00:01:13,119 --> 00:01:17,840
rachel

00:01:14,320 --> 00:01:19,200
oh we jumped one slide too far all right

00:01:17,840 --> 00:01:20,479
we're gonna get control of the slides

00:01:19,200 --> 00:01:21,520
here in just a second so a little bit

00:01:20,479 --> 00:01:23,439
about me

00:01:21,520 --> 00:01:26,159
i'm one of the staff architects at

00:01:23,439 --> 00:01:28,080
vmware on the on the kubernetes team

00:01:26,159 --> 00:01:29,759
um coming out of the the sort of hefty

00:01:28,080 --> 00:01:31,119
acquisition and all of the the open

00:01:29,759 --> 00:01:32,560
source initiatives going on inside

00:01:31,119 --> 00:01:34,479
vmware right now

00:01:32,560 --> 00:01:35,840
i've been working with kubernetes since

00:01:34,479 --> 00:01:37,280
before it was called kubernetes and

00:01:35,840 --> 00:01:38,320
containers since before they were called

00:01:37,280 --> 00:01:40,079
containers

00:01:38,320 --> 00:01:41,360
um it's the nicest way i could come up

00:01:40,079 --> 00:01:45,200
with of calling myself

00:01:41,360 --> 00:01:48,560
old without calling myself old um

00:01:45,200 --> 00:01:50,479
rachel is a patented inventor which is

00:01:48,560 --> 00:01:51,600
amazing um i don't have anything near

00:01:50,479 --> 00:01:53,600
there that probably the coolest thing

00:01:51,600 --> 00:01:54,720
i've done is i did write a book on

00:01:53,600 --> 00:01:57,439
openshift which is a

00:01:54,720 --> 00:01:58,799
different kubernetes distribution i came

00:01:57,439 --> 00:02:01,119
out in 2018

00:01:58,799 --> 00:02:03,040
and in my spare time i'm a big f1 racing

00:02:01,119 --> 00:02:06,840
fan uh which rachel doesn't

00:02:03,040 --> 00:02:10,560
get and i'm working on that

00:02:06,840 --> 00:02:12,080
and and in a rabid amateur gardener uh

00:02:10,560 --> 00:02:14,720
there's there our backyard is full of

00:02:12,080 --> 00:02:15,920
things that that don't often grow

00:02:14,720 --> 00:02:17,840
so like rachel said we're going to be

00:02:15,920 --> 00:02:20,480
talking about opa or oppa

00:02:17,840 --> 00:02:22,480
open policy agent and where it lives

00:02:20,480 --> 00:02:26,400
primarily in a kubernetes ecosystem

00:02:22,480 --> 00:02:28,640
and i want to preface that with saying

00:02:26,400 --> 00:02:30,480
oppa and and they prefer that like the

00:02:28,640 --> 00:02:31,440
community prefers it is pronounced oppa

00:02:30,480 --> 00:02:33,120
instead of opa

00:02:31,440 --> 00:02:34,840
and so we're gonna i'm gonna try my best

00:02:33,120 --> 00:02:37,040
i'm an opa person but we're gonna say

00:02:34,840 --> 00:02:39,680
oppa

00:02:37,040 --> 00:02:41,519
oppa is not limited in any way shape or

00:02:39,680 --> 00:02:43,120
form to just kubernetes

00:02:41,519 --> 00:02:44,959
that is where it's seeing a lot of

00:02:43,120 --> 00:02:47,680
uptake and a lot of adoption

00:02:44,959 --> 00:02:49,120
for what it can do but it is not it is a

00:02:47,680 --> 00:02:50,239
general purpose tool and we'll get into

00:02:49,120 --> 00:02:51,840
that a little bit more

00:02:50,239 --> 00:02:53,360
we'll touch on that again when we start

00:02:51,840 --> 00:02:53,760
talking sort of about the bits and the

00:02:53,360 --> 00:02:56,640
bytes

00:02:53,760 --> 00:02:58,480
of what opa does but for today's

00:02:56,640 --> 00:03:00,239
presentation we're going to take the old

00:02:58,480 --> 00:03:03,440
who what when where why trope

00:03:00,239 --> 00:03:04,000
and we're going to apply it to opa it's

00:03:03,440 --> 00:03:06,640
pretty simple

00:03:04,000 --> 00:03:07,920
but it's also pretty effective this talk

00:03:06,640 --> 00:03:11,360
is not

00:03:07,920 --> 00:03:14,000
a 400 level graduate course in how to do

00:03:11,360 --> 00:03:16,239
crazy things with open policy agent

00:03:14,000 --> 00:03:18,879
uh one of the things that when rachel

00:03:16,239 --> 00:03:22,000
and i were putting this together

00:03:18,879 --> 00:03:24,319
that's fun doing crazy things with with

00:03:22,000 --> 00:03:26,159
cool tools like kubernetes and oppa

00:03:24,319 --> 00:03:29,280
it's a lot of fun to see how weird you

00:03:26,159 --> 00:03:31,440
can be and how weird can i kubernetes

00:03:29,280 --> 00:03:32,879
but when we stop and talk to our

00:03:31,440 --> 00:03:34,319
customers when we talk to the people

00:03:32,879 --> 00:03:35,040
that are bringing these tools into

00:03:34,319 --> 00:03:37,280
production

00:03:35,040 --> 00:03:39,280
to do work for end users to do work for

00:03:37,280 --> 00:03:44,480
customers to generate revenue

00:03:39,280 --> 00:03:47,280
to make this stuff happen in reality

00:03:44,480 --> 00:03:48,400
weird and crazy doesn't really apply and

00:03:47,280 --> 00:03:51,840
what we run into

00:03:48,400 --> 00:03:55,040
is they really need good solid

00:03:51,840 --> 00:03:55,840
fundamental knowledge of when it because

00:03:55,040 --> 00:03:57,680
when it doesn't

00:03:55,840 --> 00:03:59,200
work the way they think it should they

00:03:57,680 --> 00:04:00,959
need to understand how to go about

00:03:59,200 --> 00:04:02,799
figuring out why

00:04:00,959 --> 00:04:04,480
and that when you know every computer on

00:04:02,799 --> 00:04:04,959
the planet breaks and they need to know

00:04:04,480 --> 00:04:06,400
that

00:04:04,959 --> 00:04:08,080
you know they need that fundamental

00:04:06,400 --> 00:04:08,799
knowledge of what these tools do at

00:04:08,080 --> 00:04:10,560
their base

00:04:08,799 --> 00:04:12,080
to to understand how to unbreak them

00:04:10,560 --> 00:04:13,519
when they do

00:04:12,080 --> 00:04:15,599
so we're taking the old journalistic

00:04:13,519 --> 00:04:18,160
trope of who what when where why

00:04:15,599 --> 00:04:20,160
and how and we're applying it to oppa so

00:04:18,160 --> 00:04:22,400
why is open policy agent

00:04:20,160 --> 00:04:23,840
you know what purpose does it serve what

00:04:22,400 --> 00:04:25,440
use case does it handle inside

00:04:23,840 --> 00:04:26,720
kubernetes that kubernetes itself

00:04:25,440 --> 00:04:29,040
doesn't do

00:04:26,720 --> 00:04:30,720
who is open policy agent we'll take a

00:04:29,040 --> 00:04:31,759
couple of minutes and talk about the

00:04:30,720 --> 00:04:35,040
community around

00:04:31,759 --> 00:04:36,800
opa around oppa and

00:04:35,040 --> 00:04:38,400
where where that information is coming

00:04:36,800 --> 00:04:41,040
from who those people are

00:04:38,400 --> 00:04:42,639
and then we'll talk in well what is oppa

00:04:41,040 --> 00:04:43,759
what is open policy agent and that's

00:04:42,639 --> 00:04:45,840
where we're going to get into the bits

00:04:43,759 --> 00:04:47,919
and the bytes and how it's designed

00:04:45,840 --> 00:04:50,240
and and everything that we need to get

00:04:47,919 --> 00:04:51,680
to how is open policy agent which is the

00:04:50,240 --> 00:04:53,120
live demo that rachel's going to be

00:04:51,680 --> 00:04:54,639
running for us

00:04:53,120 --> 00:04:56,080
rachel's the smart one so she's going to

00:04:54,639 --> 00:04:57,199
be doing she's going to be doing the

00:04:56,080 --> 00:04:59,120
live demo

00:04:57,199 --> 00:05:00,560
i believe we have paid off all the live

00:04:59,120 --> 00:05:03,360
demo gods

00:05:00,560 --> 00:05:04,479
i'm pretty sure we have so cross your

00:05:03,360 --> 00:05:07,039
fingers for us even though we're

00:05:04,479 --> 00:05:08,560
recording this it will be a live demo

00:05:07,039 --> 00:05:11,840
and then as always we'll have some

00:05:08,560 --> 00:05:11,840
conclusions and a call to action

00:05:12,960 --> 00:05:16,080
so why is open policy agent why you need

00:05:15,360 --> 00:05:18,320
opa

00:05:16,080 --> 00:05:21,199
in your kubernetes security strategy and

00:05:18,320 --> 00:05:24,320
we're going to talk for just a minute

00:05:21,199 --> 00:05:24,880
about how kubernetes does security how

00:05:24,320 --> 00:05:27,520
kube does

00:05:24,880 --> 00:05:29,120
how kube secures your things and

00:05:27,520 --> 00:05:30,479
security starts all the way down at the

00:05:29,120 --> 00:05:32,479
bottom of the operating system inside

00:05:30,479 --> 00:05:34,560
the linux kernel

00:05:32,479 --> 00:05:36,720
and that's where the kubernetes security

00:05:34,560 --> 00:05:39,280
posture begins as well

00:05:36,720 --> 00:05:39,919
kubernetes uses things like selinux uses

00:05:39,280 --> 00:05:42,000
things like

00:05:39,919 --> 00:05:44,240
posix which is you know how file systems

00:05:42,000 --> 00:05:46,320
are created and handled inside linux

00:05:44,240 --> 00:05:47,520
and it uses these technologies to make

00:05:46,320 --> 00:05:50,320
sure

00:05:47,520 --> 00:05:51,520
data from one container and running

00:05:50,320 --> 00:05:54,160
managed by kubernetes

00:05:51,520 --> 00:05:55,600
is not able to jump and be accessed by

00:05:54,160 --> 00:05:57,199
another container that doesn't have

00:05:55,600 --> 00:05:58,960
proper permissions

00:05:57,199 --> 00:06:00,560
and this stuff has been tried and true

00:05:58,960 --> 00:06:02,479
and has been trusted sometimes since the

00:06:00,560 --> 00:06:04,479
90s with se linux

00:06:02,479 --> 00:06:06,160
and is securing some of the most

00:06:04,479 --> 00:06:07,840
sensitive data on the planet

00:06:06,160 --> 00:06:09,520
and doing it very effectively so we have

00:06:07,840 --> 00:06:11,360
all of that going for us so we

00:06:09,520 --> 00:06:12,639
were pretty confident in the kubernetes

00:06:11,360 --> 00:06:15,360
security world

00:06:12,639 --> 00:06:16,880
that if i put a piece of data in

00:06:15,360 --> 00:06:20,560
container a

00:06:16,880 --> 00:06:22,720
that without explicitly allowing it

00:06:20,560 --> 00:06:24,720
the the underlying linux infrastructure

00:06:22,720 --> 00:06:27,840
is not going to let containers bc or d

00:06:24,720 --> 00:06:28,800
go see the data in container a and we've

00:06:27,840 --> 00:06:30,960
got that pretty well

00:06:28,800 --> 00:06:31,919
locked down but that doesn't give us

00:06:30,960 --> 00:06:33,120
everything because we do want some

00:06:31,919 --> 00:06:35,680
levels of access

00:06:33,120 --> 00:06:37,759
so kubernetes comes out with has out of

00:06:35,680 --> 00:06:39,199
the box now a tool roll based access

00:06:37,759 --> 00:06:41,840
control is built in and there's also a

00:06:39,199 --> 00:06:44,720
concept called pod security policies

00:06:41,840 --> 00:06:45,759
and our back lets me set exactly that

00:06:44,720 --> 00:06:48,080
access controls

00:06:45,759 --> 00:06:49,840
based on users based on service accounts

00:06:48,080 --> 00:06:52,400
for all of the different objects

00:06:49,840 --> 00:06:53,759
inside my kubernetes cluster so i can

00:06:52,400 --> 00:06:55,759
create a service account and service

00:06:53,759 --> 00:06:58,479
account x can have access to

00:06:55,759 --> 00:06:59,599
anything that is got a proper label on

00:06:58,479 --> 00:07:01,280
it or anything that belongs in the

00:06:59,599 --> 00:07:02,080
specific name space or anything across

00:07:01,280 --> 00:07:05,360
the whole cluster

00:07:02,080 --> 00:07:07,360
depending on what i want and our back in

00:07:05,360 --> 00:07:08,960
kubernetes is a little unwieldy

00:07:07,360 --> 00:07:10,720
so pod security policies have been

00:07:08,960 --> 00:07:12,000
created to provide a little finer grain

00:07:10,720 --> 00:07:14,160
access control and a little more

00:07:12,000 --> 00:07:15,759
programmatic access control

00:07:14,160 --> 00:07:18,080
using those are back principles and pod

00:07:15,759 --> 00:07:19,440
security policies together

00:07:18,080 --> 00:07:21,680
and that doesn't get us all the way

00:07:19,440 --> 00:07:22,479
there so we have all of the security

00:07:21,680 --> 00:07:24,639
kind of moving

00:07:22,479 --> 00:07:25,759
up the stack but also in any kind of

00:07:24,639 --> 00:07:27,280
container initiative in

00:07:25,759 --> 00:07:29,199
any kind of kubernetes deployment you

00:07:27,280 --> 00:07:31,039
also have to have

00:07:29,199 --> 00:07:32,560
pipeline security you have to have good

00:07:31,039 --> 00:07:33,840
container hygiene and we call it

00:07:32,560 --> 00:07:35,280
container hygiene because you don't want

00:07:33,840 --> 00:07:36,479
dirty things inside your container

00:07:35,280 --> 00:07:38,560
images

00:07:36,479 --> 00:07:39,919
and that is primarily handled by an

00:07:38,560 --> 00:07:41,919
entire industry

00:07:39,919 --> 00:07:44,080
of third-party tooling stuff like claire

00:07:41,919 --> 00:07:47,520
and sonar cube and dynatrace and falco

00:07:44,080 --> 00:07:50,160
and there's a whole laundry list of

00:07:47,520 --> 00:07:51,599
of tooling that gets you to that point

00:07:50,160 --> 00:07:53,440
and they do things like

00:07:51,599 --> 00:07:54,639
scanning what's inside my container

00:07:53,440 --> 00:07:56,960
images to see if they're

00:07:54,639 --> 00:07:59,039
known vulnerabilities they do things

00:07:56,960 --> 00:08:00,879
like running integration tests inside my

00:07:59,039 --> 00:08:02,400
container images like sonar cube to make

00:08:00,879 --> 00:08:03,840
sure that what i'm doing you know the

00:08:02,400 --> 00:08:05,280
way i've built my container is in

00:08:03,840 --> 00:08:07,440
compliance with the way i've said my

00:08:05,280 --> 00:08:10,639
want my containers to be built

00:08:07,440 --> 00:08:12,560
and there's a whole raft of tools that

00:08:10,639 --> 00:08:14,560
get into the pipelines and do all of

00:08:12,560 --> 00:08:16,879
those things

00:08:14,560 --> 00:08:19,199
all of that's great and that if you're

00:08:16,879 --> 00:08:21,360
employing all of that today

00:08:19,199 --> 00:08:23,599
inside your kubernetes infrastructure

00:08:21,360 --> 00:08:26,879
you're doing a pretty good job

00:08:23,599 --> 00:08:28,560
but there are some holes left and some

00:08:26,879 --> 00:08:30,639
of those holes can be dangerous there's

00:08:28,560 --> 00:08:32,399
some gaps in the security model

00:08:30,639 --> 00:08:34,959
because there are things that the code

00:08:32,399 --> 00:08:37,680
inside kubernetes simply can't do

00:08:34,959 --> 00:08:39,039
and some of those gaps can be dangerous

00:08:37,680 --> 00:08:40,800
and they can be dangerous in ways you

00:08:39,039 --> 00:08:43,200
don't automatically think of and that's

00:08:40,800 --> 00:08:46,800
really where opa's value shines through

00:08:43,200 --> 00:08:46,800
so let's get into that just a little bit

00:08:46,880 --> 00:08:50,240
so oppa helps us close those dangerous

00:08:49,279 --> 00:08:52,240
gaps

00:08:50,240 --> 00:08:53,680
and the the primary gap we're talking

00:08:52,240 --> 00:08:56,880
about with oppa

00:08:53,680 --> 00:08:59,519
and the way it works inside kubernetes

00:08:56,880 --> 00:09:01,440
is how do you stop something that's not

00:08:59,519 --> 00:09:03,440
against the rules of your rbac

00:09:01,440 --> 00:09:05,920
setup or your pod security policies and

00:09:03,440 --> 00:09:07,920
doesn't violate the rules of se linux

00:09:05,920 --> 00:09:10,320
but it violates your business rules and

00:09:07,920 --> 00:09:12,560
it violates your best practices

00:09:10,320 --> 00:09:13,760
and that's sometimes that's obvious

00:09:12,560 --> 00:09:16,800
stuff like

00:09:13,760 --> 00:09:18,640
how do i make sure and make sure not

00:09:16,800 --> 00:09:18,959
just by telling the humans not to do it

00:09:18,640 --> 00:09:22,000
but

00:09:18,959 --> 00:09:23,760
but make sure programmatically that in

00:09:22,000 --> 00:09:25,519
my kubernetes deployment

00:09:23,760 --> 00:09:27,200
it is impossible for me to deploy

00:09:25,519 --> 00:09:30,320
development code into a production

00:09:27,200 --> 00:09:32,240
namespace like that's

00:09:30,320 --> 00:09:33,920
we've all done it like anyone that's

00:09:32,240 --> 00:09:35,120
pushed that made has made production

00:09:33,920 --> 00:09:36,560
pushes before has

00:09:35,120 --> 00:09:38,560
made the mistake of pushing the wrong

00:09:36,560 --> 00:09:40,080
thing into production at some point

00:09:38,560 --> 00:09:41,519
and that's why maintenance windows are

00:09:40,080 --> 00:09:42,720
you know these large-scale events at

00:09:41,519 --> 00:09:43,440
three o'clock in the morning on a

00:09:42,720 --> 00:09:44,959
saturday

00:09:43,440 --> 00:09:47,200
that have 400 people on a conference

00:09:44,959 --> 00:09:48,160
call because we we use humans to prevent

00:09:47,200 --> 00:09:50,399
that

00:09:48,160 --> 00:09:51,839
well oppa is a policy driven way to do

00:09:50,399 --> 00:09:54,000
the same thing

00:09:51,839 --> 00:09:55,519
and other ones are that are a little

00:09:54,000 --> 00:09:56,800
less obvious

00:09:55,519 --> 00:09:58,160
things like making sure all of our

00:09:56,800 --> 00:09:59,440
images are deployed from approved

00:09:58,160 --> 00:10:02,720
registries

00:09:59,440 --> 00:10:04,240
and that's an easy one to forget

00:10:02,720 --> 00:10:05,760
because once we start building a

00:10:04,240 --> 00:10:07,360
container image

00:10:05,760 --> 00:10:09,839
we start putting all of our stuff inside

00:10:07,360 --> 00:10:11,600
a container we forget

00:10:09,839 --> 00:10:13,760
that that very first line in the docker

00:10:11,600 --> 00:10:15,519
file says from something

00:10:13,760 --> 00:10:17,760
and if that where it's coming from is

00:10:15,519 --> 00:10:20,000
not a safe approved place especially

00:10:17,760 --> 00:10:22,079
when you start getting into regulations

00:10:20,000 --> 00:10:23,279
and and compliance rules and regs like

00:10:22,079 --> 00:10:23,839
in the healthcare industry and the

00:10:23,279 --> 00:10:26,000
government

00:10:23,839 --> 00:10:26,959
in the financial sector that gets really

00:10:26,000 --> 00:10:28,240
important

00:10:26,959 --> 00:10:30,160
i think it's really important to make

00:10:28,240 --> 00:10:31,519
sure that we that all of our data all of

00:10:30,160 --> 00:10:32,079
our personal information all of our

00:10:31,519 --> 00:10:33,279
monetary

00:10:32,079 --> 00:10:35,440
information all the government

00:10:33,279 --> 00:10:37,839
information that shouldn't be out there

00:10:35,440 --> 00:10:39,279
doesn't get out there and then you can

00:10:37,839 --> 00:10:41,040
also do things that are just good best

00:10:39,279 --> 00:10:42,560
practice inside kube that is hard to

00:10:41,040 --> 00:10:44,160
manually verify

00:10:42,560 --> 00:10:45,839
and the last one on this list is like

00:10:44,160 --> 00:10:47,680
making sure all pods have resource

00:10:45,839 --> 00:10:49,200
limits defined

00:10:47,680 --> 00:10:50,880
for a human to verify that they would

00:10:49,200 --> 00:10:52,800
have to go look through the yaml that

00:10:50,880 --> 00:10:54,320
deploys every pod in their kubernetes

00:10:52,800 --> 00:10:55,600
system in their kubernetes deployment

00:10:54,320 --> 00:10:58,160
and that's

00:10:55,600 --> 00:11:00,399
onerous and prone to failure well we can

00:10:58,160 --> 00:11:02,320
write a policy using opa to make sure

00:11:00,399 --> 00:11:05,040
that's the case

00:11:02,320 --> 00:11:07,200
so oppa gets deployed inside kubernetes

00:11:05,040 --> 00:11:09,519
and acts as a policy engine

00:11:07,200 --> 00:11:11,200
and you can apply policies based on any

00:11:09,519 --> 00:11:12,480
of the attributes of all of the objects

00:11:11,200 --> 00:11:14,560
inside kubernetes

00:11:12,480 --> 00:11:16,800
so you can deploy you can build policies

00:11:14,560 --> 00:11:18,399
based on what the object is

00:11:16,800 --> 00:11:20,160
and i think that's the demo that we have

00:11:18,399 --> 00:11:21,839
here in a few minutes

00:11:20,160 --> 00:11:23,440
you can deploy you can build policies

00:11:21,839 --> 00:11:25,279
based on what namespace something goes

00:11:23,440 --> 00:11:26,880
into you can look at the annotations of

00:11:25,279 --> 00:11:28,959
an object and build policies based on

00:11:26,880 --> 00:11:30,800
what's inside the annotations

00:11:28,959 --> 00:11:33,360
based on what's inside what labels or

00:11:30,800 --> 00:11:35,279
selectors are built into the object

00:11:33,360 --> 00:11:37,519
anything any attribute of an object

00:11:35,279 --> 00:11:39,920
inside kubernetes i can write a policy

00:11:37,519 --> 00:11:41,279
using opa and we'll get into how we

00:11:39,920 --> 00:11:42,160
write those policies here in a couple of

00:11:41,279 --> 00:11:44,240
minutes

00:11:42,160 --> 00:11:45,360
i can use those all of those attributes

00:11:44,240 --> 00:11:48,399
to build a policy

00:11:45,360 --> 00:11:50,079
to make sure the way i want my software

00:11:48,399 --> 00:11:52,639
to be deployed

00:11:50,079 --> 00:11:53,519
is the way it gets done um one of the a

00:11:52,639 --> 00:11:55,200
great example that

00:11:53,519 --> 00:11:56,480
had never dawned on me until actually it

00:11:55,200 --> 00:11:58,560
was rachel that was telling me about it

00:11:56,480 --> 00:12:00,480
with a customer she was working with

00:11:58,560 --> 00:12:02,800
was they made sure that you couldn't

00:12:00,480 --> 00:12:05,440
deploy a load balancer into

00:12:02,800 --> 00:12:06,880
certain places in their infrastructure

00:12:05,440 --> 00:12:09,200
because once you have a load balancer

00:12:06,880 --> 00:12:12,240
deployed into a namespace then

00:12:09,200 --> 00:12:14,079
that's the front door to get to my data

00:12:12,240 --> 00:12:15,440
and instead of having to go looking for

00:12:14,079 --> 00:12:17,920
those things i they

00:12:15,440 --> 00:12:20,000
built an opel rule an opal policy that

00:12:17,920 --> 00:12:22,079
just wouldn't let it happen

00:12:20,000 --> 00:12:24,240
that's an incredibly you know an

00:12:22,079 --> 00:12:26,160
incredibly insidious attack vector a

00:12:24,240 --> 00:12:28,079
very hard one to figure out

00:12:26,160 --> 00:12:31,600
that you can just stop with oppa right

00:12:28,079 --> 00:12:31,600
out the box right out of the box

00:12:33,200 --> 00:12:36,240
so who is open policy agent and the

00:12:35,760 --> 00:12:38,240
little

00:12:36,240 --> 00:12:39,760
the little viking helmet with the horns

00:12:38,240 --> 00:12:42,399
is the logo for oppa

00:12:39,760 --> 00:12:43,440
for o4 open policy agent but taking a

00:12:42,399 --> 00:12:45,440
quick look and we're not going to spend

00:12:43,440 --> 00:12:47,279
a ton of time on this but we do need to

00:12:45,440 --> 00:12:49,040
to sort of acknowledge who is building

00:12:47,279 --> 00:12:50,480
any open source project

00:12:49,040 --> 00:12:53,360
because you define an open source

00:12:50,480 --> 00:12:55,440
project's health by its community

00:12:53,360 --> 00:12:56,639
and that's the way you understand like

00:12:55,440 --> 00:12:58,480
is

00:12:56,639 --> 00:12:59,760
there's a lot of time and in a lot of

00:12:58,480 --> 00:13:02,800
our effort uh

00:12:59,760 --> 00:13:04,480
on the team that rachel and i work on

00:13:02,800 --> 00:13:06,240
is looking at these all of these

00:13:04,480 --> 00:13:08,079
products that are out there

00:13:06,240 --> 00:13:09,920
and doing the research and talking to

00:13:08,079 --> 00:13:11,200
the people that are using them

00:13:09,920 --> 00:13:12,959
and figuring out if they're going to be

00:13:11,200 --> 00:13:15,040
around in five years

00:13:12,959 --> 00:13:16,800
if you're about to spend a huge amount

00:13:15,040 --> 00:13:20,000
of time and effort

00:13:16,800 --> 00:13:21,519
to bring a new technology into your into

00:13:20,000 --> 00:13:24,639
the way you do business into the way you

00:13:21,519 --> 00:13:27,279
do you do kubernetes

00:13:24,639 --> 00:13:28,880
and it disappears in 18 months it's a

00:13:27,279 --> 00:13:30,480
lot of wasted effort that you then have

00:13:28,880 --> 00:13:32,240
to turn around and repeat

00:13:30,480 --> 00:13:33,440
so looking at the community of any open

00:13:32,240 --> 00:13:34,399
source project that you're about to

00:13:33,440 --> 00:13:38,160
bring in is

00:13:34,399 --> 00:13:41,120
is a worthwhile endeavor so

00:13:38,160 --> 00:13:43,040
oppa was started by a company called

00:13:41,120 --> 00:13:45,040
styra

00:13:43,040 --> 00:13:46,480
and zyra is the logo in the center of

00:13:45,040 --> 00:13:49,600
this slide

00:13:46,480 --> 00:13:51,519
and is a security company so it's an

00:13:49,600 --> 00:13:53,440
interesting thing and it

00:13:51,519 --> 00:13:55,199
it may be obvious when you start looking

00:13:53,440 --> 00:13:58,480
when the live demo

00:13:55,199 --> 00:13:59,519
during the live demo that it's a very

00:13:58,480 --> 00:14:02,320
security centric

00:13:59,519 --> 00:14:04,160
language um for example when you write

00:14:02,320 --> 00:14:06,399
an opa policy

00:14:04,160 --> 00:14:08,320
you start with the assumption that

00:14:06,399 --> 00:14:10,560
you're going to deny

00:14:08,320 --> 00:14:12,320
and you write the policy around a deny

00:14:10,560 --> 00:14:14,800
first idea and it's

00:14:12,320 --> 00:14:16,720
and it folds very easily into that

00:14:14,800 --> 00:14:17,360
minimal that zero trust model that

00:14:16,720 --> 00:14:20,480
everyone is

00:14:17,360 --> 00:14:23,040
is striving to achieve inside kubernetes

00:14:20,480 --> 00:14:24,320
the the work that styra is doing around

00:14:23,040 --> 00:14:25,920
oppa inside kube and

00:14:24,320 --> 00:14:28,079
inside other technologies that like i

00:14:25,920 --> 00:14:29,839
said at the beginning uh oppa is

00:14:28,079 --> 00:14:32,000
not limited to kubernetes it's not a

00:14:29,839 --> 00:14:33,839
kubernetes only planet

00:14:32,000 --> 00:14:35,120
and one of the big reasons that it's

00:14:33,839 --> 00:14:36,880
getting a lot of adoption inside

00:14:35,120 --> 00:14:38,560
kubernetes is that they can take some

00:14:36,880 --> 00:14:41,040
very similar policies

00:14:38,560 --> 00:14:42,560
and apply them outside as well so for

00:14:41,040 --> 00:14:45,600
that idea that i can have

00:14:42,560 --> 00:14:46,800
a policy engine that works on my virtual

00:14:45,600 --> 00:14:48,720
machines deployed in the cloud my

00:14:46,800 --> 00:14:50,560
virtual machine is deployed on-prem

00:14:48,720 --> 00:14:51,920
my container-based workloads and bare

00:14:50,560 --> 00:14:54,160
metal workloads

00:14:51,920 --> 00:14:55,920
and i can write one holistic idea in the

00:14:54,160 --> 00:14:58,160
same language to enforce all of my

00:14:55,920 --> 00:15:00,720
security policy and best practices

00:14:58,160 --> 00:15:02,639
it's a really powerful thought and styro

00:15:00,720 --> 00:15:03,519
are the people that had it and styra is

00:15:02,639 --> 00:15:06,959
also

00:15:03,519 --> 00:15:09,760
the primary development team for oppa

00:15:06,959 --> 00:15:12,079
um and then getting into like how do i

00:15:09,760 --> 00:15:13,760
communicate with this community uh

00:15:12,079 --> 00:15:15,440
all of the all of their source codes out

00:15:13,760 --> 00:15:18,480
on github so github.com

00:15:15,440 --> 00:15:20,000
open policy agent there is a slack for

00:15:18,480 --> 00:15:21,839
open policy agent which

00:15:20,000 --> 00:15:23,360
is i know i'm on and i'm pretty sure

00:15:21,839 --> 00:15:24,240
rachel is too because we've got

00:15:23,360 --> 00:15:25,760
questions and

00:15:24,240 --> 00:15:28,079
we're bouncing ideas off of people all

00:15:25,760 --> 00:15:31,440
the time um so there

00:15:28,079 --> 00:15:32,800
the slack is is active and and stuff is

00:15:31,440 --> 00:15:34,240
is happening in there all the time and

00:15:32,800 --> 00:15:34,959
the development team is very active in

00:15:34,240 --> 00:15:36,560
the slack

00:15:34,959 --> 00:15:39,759
and also a couple of twitter handles for

00:15:36,560 --> 00:15:42,800
styra and opa or oppa as well

00:15:39,759 --> 00:15:44,480
for both of them to have

00:15:42,800 --> 00:15:46,959
there's just good twitter handles to

00:15:44,480 --> 00:15:50,399
follow and it's the kubernetes world so

00:15:46,959 --> 00:15:50,399
everything's a twitter handle right

00:15:51,120 --> 00:15:56,320
so looking at what is open policy agent

00:15:54,959 --> 00:15:58,240
and this is where we get into the bits

00:15:56,320 --> 00:15:59,839
and the bytes and all the geeky stuff

00:15:58,240 --> 00:16:01,519
um we've set the table with all the

00:15:59,839 --> 00:16:02,320
business logic in the use cases now we

00:16:01,519 --> 00:16:05,199
get down into

00:16:02,320 --> 00:16:06,880
into the good geek bits so what is open

00:16:05,199 --> 00:16:10,000
policy agent what does this thing do

00:16:06,880 --> 00:16:11,839
or how does it do it so i have to start

00:16:10,000 --> 00:16:13,279
with the definition and apologize for

00:16:11,839 --> 00:16:16,560
the eye chart

00:16:13,279 --> 00:16:17,440
but it's also worth mentioning here and

00:16:16,560 --> 00:16:18,800
i'm not going to read the whole

00:16:17,440 --> 00:16:20,320
definition

00:16:18,800 --> 00:16:22,079
but just pointing out that it's a

00:16:20,320 --> 00:16:23,680
general purpose policy engine and it's a

00:16:22,079 --> 00:16:25,360
high-level declarative language and all

00:16:23,680 --> 00:16:27,759
those buzzwords that you need

00:16:25,360 --> 00:16:29,440
for anything that you're going to have

00:16:27,759 --> 00:16:31,199
but

00:16:29,440 --> 00:16:32,800
cncf the cloud native computing

00:16:31,199 --> 00:16:34,880
foundation which is

00:16:32,800 --> 00:16:37,680
you know a pretty important thing in in

00:16:34,880 --> 00:16:40,880
the kubernetes ecosystem

00:16:37,680 --> 00:16:44,720
this is an incubating project so

00:16:40,880 --> 00:16:46,639
opa is part of the cncf um which is

00:16:44,720 --> 00:16:48,320
very important because it helps make

00:16:46,639 --> 00:16:49,759
sure that the opa community has

00:16:48,320 --> 00:16:51,279
governance models wrapped around it and

00:16:49,759 --> 00:16:53,279
all that stuff

00:16:51,279 --> 00:16:54,399
but it's also a general purpose policy

00:16:53,279 --> 00:16:56,000
engine and

00:16:54,399 --> 00:16:58,399
like what we were talking about a minute

00:16:56,000 --> 00:16:59,920
ago it lets me provide one

00:16:58,399 --> 00:17:01,360
set of policy rules for my entire

00:16:59,920 --> 00:17:01,839
infrastructure regardless of where it's

00:17:01,360 --> 00:17:03,680
deployed

00:17:01,839 --> 00:17:05,360
regardless of how it's deployed it's

00:17:03,680 --> 00:17:06,799
just a really a really good thing so

00:17:05,360 --> 00:17:09,839
this quote is coming directly off the

00:17:06,799 --> 00:17:09,839
cncf website

00:17:10,400 --> 00:17:15,760
so inside kube inside kubernetes

00:17:14,240 --> 00:17:18,079
oppa gets deployed as what's called a

00:17:15,760 --> 00:17:21,520
validating emission controller

00:17:18,079 --> 00:17:23,199
and there's a chart on the next slide

00:17:21,520 --> 00:17:25,439
but what a validating emission

00:17:23,199 --> 00:17:28,480
controller happened does

00:17:25,439 --> 00:17:28,880
is when you type in coupe ctl create

00:17:28,480 --> 00:17:31,919
dash

00:17:28,880 --> 00:17:34,320
f and feed it some yaml all of that hits

00:17:31,919 --> 00:17:36,720
the ap the kubernetes api server

00:17:34,320 --> 00:17:39,120
and when you have a validating emission

00:17:36,720 --> 00:17:40,640
controller configured

00:17:39,120 --> 00:17:42,400
when the kubernete when the api server

00:17:40,640 --> 00:17:43,919
gets that request it takes the request

00:17:42,400 --> 00:17:45,440
and hands it off to the admission

00:17:43,919 --> 00:17:46,240
controller and says can you please

00:17:45,440 --> 00:17:48,799
validate this

00:17:46,240 --> 00:17:50,320
is this using whatever your policy

00:17:48,799 --> 00:17:54,000
engine is

00:17:50,320 --> 00:17:56,160
is this a valid request per your policy

00:17:54,000 --> 00:17:57,760
and if the policy engine says yes then

00:17:56,160 --> 00:17:59,919
the object gets created

00:17:57,760 --> 00:18:01,280
and if the policy engine says no there's

00:17:59,919 --> 00:18:03,360
something wrong with it

00:18:01,280 --> 00:18:04,799
well then your deployment your objects

00:18:03,360 --> 00:18:08,240
don't get created

00:18:04,799 --> 00:18:10,799
and it gets logged as to why so

00:18:08,240 --> 00:18:12,160
one of the really important ideas of of

00:18:10,799 --> 00:18:15,440
where opa sits in the

00:18:12,160 --> 00:18:16,720
in the kubernetes world and we'll take a

00:18:15,440 --> 00:18:18,640
look at just

00:18:16,720 --> 00:18:20,000
what i just described in picture form

00:18:18,640 --> 00:18:21,760
and this is straight off of the opal

00:18:20,000 --> 00:18:25,679
website

00:18:21,760 --> 00:18:27,280
is oppa validates the objects to make

00:18:25,679 --> 00:18:29,200
sure that they're they're in compliance

00:18:27,280 --> 00:18:32,240
with whatever policies have been written

00:18:29,200 --> 00:18:34,160
before the object ever gets created and

00:18:32,240 --> 00:18:35,760
that's a really important idea when you

00:18:34,160 --> 00:18:36,799
stop and think about it i don't want to

00:18:35,760 --> 00:18:38,400
do a security scan

00:18:36,799 --> 00:18:40,720
after i've spun up something and brought

00:18:38,400 --> 00:18:43,600
it onto the network

00:18:40,720 --> 00:18:45,440
and it sounds kind of common sense but a

00:18:43,600 --> 00:18:46,880
lot of tooling does the scanning after

00:18:45,440 --> 00:18:48,640
the fact

00:18:46,880 --> 00:18:50,559
this does the scanning this does the

00:18:48,640 --> 00:18:52,400
validation

00:18:50,559 --> 00:18:55,200
before after the object has been

00:18:52,400 --> 00:18:56,720
requested but before it gets created

00:18:55,200 --> 00:18:58,480
and that's a very powerful very

00:18:56,720 --> 00:19:00,960
important spot to live inside

00:18:58,480 --> 00:19:02,160
an application's life cycle because i

00:19:00,960 --> 00:19:03,760
can that's

00:19:02,160 --> 00:19:05,280
these validating emission controllers

00:19:03,760 --> 00:19:06,559
are the last line of defense before an

00:19:05,280 --> 00:19:08,559
object gets created

00:19:06,559 --> 00:19:10,000
they're also in a very good spot because

00:19:08,559 --> 00:19:11,440
i get to say i get to take all

00:19:10,000 --> 00:19:13,520
the information that you've added into

00:19:11,440 --> 00:19:16,000
this into this this stuff

00:19:13,520 --> 00:19:17,679
and i get to decide if it's okay or not

00:19:16,000 --> 00:19:19,520
and that's what opa does

00:19:17,679 --> 00:19:21,520
so the one thing it was on the previous

00:19:19,520 --> 00:19:22,880
slide but i didn't have a chance to

00:19:21,520 --> 00:19:25,360
mention or i just didn't

00:19:22,880 --> 00:19:27,600
squeeze it into the to the to the word

00:19:25,360 --> 00:19:30,799
soup that i'm spewing out right now

00:19:27,600 --> 00:19:32,799
is all of those policies inside oppa are

00:19:30,799 --> 00:19:33,440
written using a language that styra has

00:19:32,799 --> 00:19:34,880
developed

00:19:33,440 --> 00:19:36,960
and is developed based on a bunch of

00:19:34,880 --> 00:19:39,280
stuff that's been around for a long time

00:19:36,960 --> 00:19:41,360
called rego and rachel is going to show

00:19:39,280 --> 00:19:44,480
us some examples of rigo

00:19:41,360 --> 00:19:46,000
here in just a minute or two and rico is

00:19:44,480 --> 00:19:48,640
that high-level declarative language

00:19:46,000 --> 00:19:50,480
that we write all of our opa policies in

00:19:48,640 --> 00:19:52,000
so you'll often hear when you start

00:19:50,480 --> 00:19:53,760
getting into oppa and start writing

00:19:52,000 --> 00:19:55,679
your things you'll hear opa and rigo

00:19:53,760 --> 00:19:58,880
kind of used interchangeably

00:19:55,679 --> 00:20:00,400
it's kind of like um yaml and kubernetes

00:19:58,880 --> 00:20:01,919
you know when you start talking about

00:20:00,400 --> 00:20:02,480
the ammo what you're really talking

00:20:01,919 --> 00:20:04,080
about is

00:20:02,480 --> 00:20:05,520
the the data that represents your

00:20:04,080 --> 00:20:07,280
infrastructure

00:20:05,520 --> 00:20:09,440
and how all of that glues itself

00:20:07,280 --> 00:20:10,240
together so when we're talking about opa

00:20:09,440 --> 00:20:12,159
enrigo

00:20:10,240 --> 00:20:13,520
rigo is the definition of all of our

00:20:12,159 --> 00:20:14,720
policies to make sure that

00:20:13,520 --> 00:20:16,559
everything that happens inside

00:20:14,720 --> 00:20:17,440
kubernetes happens the way we plan on it

00:20:16,559 --> 00:20:19,280
happening

00:20:17,440 --> 00:20:22,320
so rigo is the language that oppa

00:20:19,280 --> 00:20:22,320
policies are written in

00:20:23,760 --> 00:20:27,760
and i think this is the last slide

00:20:26,400 --> 00:20:29,200
before we get to the live demo because

00:20:27,760 --> 00:20:30,400
we're all here to see a live demo

00:20:29,200 --> 00:20:33,200
because that's what everyone wants to

00:20:30,400 --> 00:20:35,039
see at conferences

00:20:33,200 --> 00:20:37,039
there has been some pretty dramatic

00:20:35,039 --> 00:20:39,360
growth inside

00:20:37,039 --> 00:20:40,400
inside oppa the code base itself that is

00:20:39,360 --> 00:20:42,159
opa

00:20:40,400 --> 00:20:44,080
and you'll see pretty different

00:20:42,159 --> 00:20:45,919
experiences depending on the version of

00:20:44,080 --> 00:20:48,240
opa that you use

00:20:45,919 --> 00:20:49,039
um and i don't i think the demo that

00:20:48,240 --> 00:20:50,480
we're doing today

00:20:49,039 --> 00:20:52,000
rachel was kind of picking and choosing

00:20:50,480 --> 00:20:54,080
between the different ones i think we're

00:20:52,000 --> 00:20:54,720
going to be using a version 1.0 demo

00:20:54,080 --> 00:20:57,440
that uses

00:20:54,720 --> 00:20:59,840
coupe management this sidecar deployment

00:20:57,440 --> 00:21:03,039
to enforce all of the policies

00:20:59,840 --> 00:21:06,000
and the reason we're using that one

00:21:03,039 --> 00:21:07,360
is because it is the most obvious it

00:21:06,000 --> 00:21:08,880
where it's the fewest layers of

00:21:07,360 --> 00:21:10,640
abstraction between

00:21:08,880 --> 00:21:12,640
the policy and what's happening inside

00:21:10,640 --> 00:21:14,159
kubernetes so it's the easiest to

00:21:12,640 --> 00:21:15,440
visualize and it's the easiest to kind

00:21:14,159 --> 00:21:17,360
of learn on

00:21:15,440 --> 00:21:19,280
and as you get into version two and then

00:21:17,360 --> 00:21:20,640
into version three you get a more

00:21:19,280 --> 00:21:23,280
comprehensive toolset

00:21:20,640 --> 00:21:24,480
you get a more sort of cloud-native

00:21:23,280 --> 00:21:26,559
coop-centric

00:21:24,480 --> 00:21:28,240
deployment methodology but you're

00:21:26,559 --> 00:21:29,520
abstracting you start abstracting things

00:21:28,240 --> 00:21:32,559
away

00:21:29,520 --> 00:21:34,480
whereas in the version 1.0 stuff

00:21:32,559 --> 00:21:36,320
i write a policy i apply it as a

00:21:34,480 --> 00:21:39,039
kubernetes config map

00:21:36,320 --> 00:21:40,640
uh to a pod and then it's done so there

00:21:39,039 --> 00:21:42,000
aren't as many moving parts in version

00:21:40,640 --> 00:21:45,120
1.0 as there are in two

00:21:42,000 --> 00:21:45,600
versions two and three so what you often

00:21:45,120 --> 00:21:47,600
do

00:21:45,600 --> 00:21:48,960
when you're getting started with oppa

00:21:47,600 --> 00:21:50,159
it's kind of a nickel's worth of free

00:21:48,960 --> 00:21:52,159
advice

00:21:50,159 --> 00:21:54,080
is you start with version 1.0 because

00:21:52,159 --> 00:21:55,760
it's the lowest barrier to entry

00:21:54,080 --> 00:21:58,159
and then as you get used to writing the

00:21:55,760 --> 00:22:00,400
policies then you start bringing on

00:21:58,159 --> 00:22:02,559
versions 2 or version 3

00:22:00,400 --> 00:22:03,760
into your kubernetes implementations

00:22:02,559 --> 00:22:06,080
your coupe deployments

00:22:03,760 --> 00:22:07,760
to bring in those additional features

00:22:06,080 --> 00:22:09,280
and to have a little more efficient

00:22:07,760 --> 00:22:10,480
experience once you understand the

00:22:09,280 --> 00:22:12,320
basics

00:22:10,480 --> 00:22:13,760
it's the way what we see most customers

00:22:12,320 --> 00:22:16,559
doing

00:22:13,760 --> 00:22:18,080
um just sort of how the the oppa

00:22:16,559 --> 00:22:19,600
ecosystem works at least in our

00:22:18,080 --> 00:22:22,960
experience

00:22:19,600 --> 00:22:24,400
so that's all of the death by powerpoint

00:22:22,960 --> 00:22:26,480
that we're going to throw at you

00:22:24,400 --> 00:22:27,760
and i think we have about 10 or 15

00:22:26,480 --> 00:22:30,000
minutes for the live demo and then a

00:22:27,760 --> 00:22:32,720
little time after that for the q a

00:22:30,000 --> 00:22:33,120
um i have to put one bad joke or one bad

00:22:32,720 --> 00:22:35,039
joke

00:22:33,120 --> 00:22:36,480
on all of my presentations and this is

00:22:35,039 --> 00:22:37,840
this one you know so this is like the

00:22:36,480 --> 00:22:40,159
spacex demo two so

00:22:37,840 --> 00:22:41,280
it's demo two but close enough so with

00:22:40,159 --> 00:22:42,240
this i'm going to hand it back over to

00:22:41,280 --> 00:22:44,960
rachel

00:22:42,240 --> 00:22:46,480
and she's going to um turn three times

00:22:44,960 --> 00:22:50,000
and and

00:22:46,480 --> 00:22:50,000
you know hope that the live demo works

00:22:53,600 --> 00:22:57,039
thanks jamie yeah so as jamie mentioned

00:22:56,159 --> 00:22:58,720
before

00:22:57,039 --> 00:23:00,880
um we want to get to the good stuff the

00:22:58,720 --> 00:23:01,440
demo but we also want to take a step

00:23:00,880 --> 00:23:04,240
back and

00:23:01,440 --> 00:23:06,000
and look at some examples these are all

00:23:04,240 --> 00:23:07,200
real world examples that we've used for

00:23:06,000 --> 00:23:09,360
customers

00:23:07,200 --> 00:23:10,720
and also you know you just want to start

00:23:09,360 --> 00:23:12,080
how do you get involved like you said

00:23:10,720 --> 00:23:13,760
what's the barrier's entry

00:23:12,080 --> 00:23:15,280
to oppa right just how do you get

00:23:13,760 --> 00:23:17,280
involved how do you get started

00:23:15,280 --> 00:23:18,720
so i want to also just show you very

00:23:17,280 --> 00:23:20,240
simply we're not going to

00:23:18,720 --> 00:23:22,240
for this demo i'm not going to install

00:23:20,240 --> 00:23:24,640
oppa this has already been pre-installed

00:23:22,240 --> 00:23:26,159
but i want to focus on the logic and the

00:23:24,640 --> 00:23:29,760
sense of how you approach

00:23:26,159 --> 00:23:31,760
developing opa policies and how do you

00:23:29,760 --> 00:23:34,000
obviously build upon that once you've

00:23:31,760 --> 00:23:37,200
kind of got the foundation going

00:23:34,000 --> 00:23:39,360
so let me share my screen give me one

00:23:37,200 --> 00:23:43,840
second here

00:23:39,360 --> 00:23:43,840
and let's do this

00:23:45,120 --> 00:23:51,200
here we go all right

00:23:49,200 --> 00:23:53,840
so you should be able to see right now i

00:23:51,200 --> 00:23:55,919
have just the tutorial this is the base

00:23:53,840 --> 00:23:59,120
tutorial to get anyone going anyone

00:23:55,919 --> 00:24:01,360
started it's very straightforward

00:23:59,120 --> 00:24:02,880
and um like i said i'm not going to walk

00:24:01,360 --> 00:24:04,000
you through it you can take your time

00:24:02,880 --> 00:24:05,919
and go through it

00:24:04,000 --> 00:24:07,760
and as you can see it deploys sofa onto

00:24:05,919 --> 00:24:11,039
the top of kubernetes for you

00:24:07,760 --> 00:24:12,000
so i've already done this and but i just

00:24:11,039 --> 00:24:15,039
want you to see

00:24:12,000 --> 00:24:16,559
you know it's very it's there for you it

00:24:15,039 --> 00:24:18,159
gets most of it done

00:24:16,559 --> 00:24:20,159
you don't have to really think too much

00:24:18,159 --> 00:24:22,799
about it and by the end of it

00:24:20,159 --> 00:24:23,919
i always suggest no matter if you're

00:24:22,799 --> 00:24:26,640
kubernetes

00:24:23,919 --> 00:24:27,440
kubernetes expert or open expert to just

00:24:26,640 --> 00:24:30,159
go through the

00:24:27,440 --> 00:24:31,919
the demo here right and just make sure

00:24:30,159 --> 00:24:33,840
that oppa is actually running because

00:24:31,919 --> 00:24:37,200
sometimes it does have its little

00:24:33,840 --> 00:24:38,640
quartz that it doesn't run right away so

00:24:37,200 --> 00:24:40,960
as you can see the first policy that

00:24:38,640 --> 00:24:42,240
they give you is very i would say it's

00:24:40,960 --> 00:24:46,080
actually very complex

00:24:42,240 --> 00:24:47,919
it's um it's uh a lot of lines here and

00:24:46,080 --> 00:24:49,520
it could be intimidating so

00:24:47,919 --> 00:24:51,120
and i've seen this a lot in a lot of the

00:24:49,520 --> 00:24:52,159
demos where they give you these long

00:24:51,120 --> 00:24:54,240
complex

00:24:52,159 --> 00:24:55,520
uh examples and you're trying to sit

00:24:54,240 --> 00:24:58,960
there because you're trying to learn

00:24:55,520 --> 00:24:59,440
rego and oppa and sometimes kubernetes

00:24:58,960 --> 00:25:01,760
as well

00:24:59,440 --> 00:25:02,880
so you don't want to see all these lines

00:25:01,760 --> 00:25:05,279
of code when you're

00:25:02,880 --> 00:25:06,240
trying to learn a new you know

00:25:05,279 --> 00:25:09,600
technology or

00:25:06,240 --> 00:25:10,559
some or new resource so i want to show

00:25:09,600 --> 00:25:13,840
you

00:25:10,559 --> 00:25:15,360
what's the simple approach how to how it

00:25:13,840 --> 00:25:17,120
started with the customer

00:25:15,360 --> 00:25:18,559
and then we'll go through how to and

00:25:17,120 --> 00:25:22,720
actually test it

00:25:18,559 --> 00:25:22,720
so this example i'm showing here

00:25:22,799 --> 00:25:28,159
is one this example was

00:25:26,000 --> 00:25:29,679
because some actually one of our

00:25:28,159 --> 00:25:33,360
customers one of their

00:25:29,679 --> 00:25:36,320
operators simply created a crd

00:25:33,360 --> 00:25:38,400
and deleted a crd just because a they

00:25:36,320 --> 00:25:39,919
were new to kubernetes as well

00:25:38,400 --> 00:25:42,400
and the remotes of the team they're

00:25:39,919 --> 00:25:42,960
still learning but they just made a

00:25:42,400 --> 00:25:45,440
simple

00:25:42,960 --> 00:25:46,320
mistake and it caused a lot of issues

00:25:45,440 --> 00:25:49,360
downstream

00:25:46,320 --> 00:25:52,240
for the customer so the security team

00:25:49,360 --> 00:25:53,760
came to us and said we got to figure a

00:25:52,240 --> 00:25:55,679
way how to

00:25:53,760 --> 00:25:56,880
prevent some of these things right but

00:25:55,679 --> 00:25:58,320
not completely

00:25:56,880 --> 00:25:59,840
block the user from doing it but they

00:25:58,320 --> 00:26:01,840
just want to make sure that the user

00:25:59,840 --> 00:26:02,320
goes to the appropriate channels before

00:26:01,840 --> 00:26:04,080
they

00:26:02,320 --> 00:26:06,240
make these decisions because like i said

00:26:04,080 --> 00:26:07,120
everybody's learning kubernetes as well

00:26:06,240 --> 00:26:09,600
as oppa

00:26:07,120 --> 00:26:10,320
and any other security pieces that they

00:26:09,600 --> 00:26:12,480
had

00:26:10,320 --> 00:26:14,400
so their first approach was like

00:26:12,480 --> 00:26:16,159
literally just listing out what they

00:26:14,400 --> 00:26:16,640
think that the user should not be able

00:26:16,159 --> 00:26:19,440
to do

00:26:16,640 --> 00:26:21,039
right off the bat that was completely it

00:26:19,440 --> 00:26:23,919
was just one liners right

00:26:21,039 --> 00:26:25,600
um and then this one here was like you

00:26:23,919 --> 00:26:27,919
know what we don't want a user to be

00:26:25,600 --> 00:26:29,840
able to create a crd without going

00:26:27,919 --> 00:26:31,679
through the appropriate person

00:26:29,840 --> 00:26:33,840
so i said fine let's see how we could

00:26:31,679 --> 00:26:35,200
approach this we could

00:26:33,840 --> 00:26:38,400
probably use either we could have

00:26:35,200 --> 00:26:40,480
thought about okay let's use psps or opa

00:26:38,400 --> 00:26:41,840
or any other you know technology that

00:26:40,480 --> 00:26:44,400
they want to use but

00:26:41,840 --> 00:26:45,039
and just so you know they use psps and

00:26:44,400 --> 00:26:46,960
opa

00:26:45,039 --> 00:26:49,120
interchangeably it was whenever it was

00:26:46,960 --> 00:26:51,919
for the right use case

00:26:49,120 --> 00:26:52,799
so we decided to do this with oppa so as

00:26:51,919 --> 00:26:55,120
you can see here

00:26:52,799 --> 00:26:57,360
this looks like the similar to the

00:26:55,120 --> 00:27:00,320
example we saw before right you got your

00:26:57,360 --> 00:27:01,360
basic rego here you got your package

00:27:00,320 --> 00:27:04,400
statement

00:27:01,360 --> 00:27:06,400
you got what you're going to be denying

00:27:04,400 --> 00:27:08,159
and as you can see it's three lines that

00:27:06,400 --> 00:27:10,720
are very effective

00:27:08,159 --> 00:27:11,840
uh all it is is just you're looking here

00:27:10,720 --> 00:27:14,159
you're saying you know what

00:27:11,840 --> 00:27:15,360
if i see a custom resource definition

00:27:14,159 --> 00:27:17,919
being created

00:27:15,360 --> 00:27:19,520
or tried to update we're gonna block

00:27:17,919 --> 00:27:20,000
this person from doing it and then you

00:27:19,520 --> 00:27:21,760
put a nice

00:27:20,000 --> 00:27:23,120
little message right say hey you're in

00:27:21,760 --> 00:27:25,440
trouble uh

00:27:23,120 --> 00:27:27,039
you know don't do this and then this is

00:27:25,440 --> 00:27:28,559
another way you can also give you a

00:27:27,039 --> 00:27:30,880
customizable

00:27:28,559 --> 00:27:31,919
uh approach to a pilot to security

00:27:30,880 --> 00:27:33,600
because a lot of times

00:27:31,919 --> 00:27:35,919
it might get blocked but the user

00:27:33,600 --> 00:27:38,000
doesn't know why so you could also

00:27:35,919 --> 00:27:39,520
fill out details to either contact

00:27:38,000 --> 00:27:41,840
someone or a department

00:27:39,520 --> 00:27:42,640
or reach out to a certain email whatever

00:27:41,840 --> 00:27:45,279
it is you can

00:27:42,640 --> 00:27:46,880
customize your messages here so it's

00:27:45,279 --> 00:27:48,720
very straightforward

00:27:46,880 --> 00:27:51,279
the next part of this is once you've

00:27:48,720 --> 00:27:52,880
kind of gotten your head wrapped around

00:27:51,279 --> 00:27:56,080
a little bit around rego

00:27:52,880 --> 00:27:58,000
you want to do some testing um and you

00:27:56,080 --> 00:28:00,240
want to do some test coverage so similar

00:27:58,000 --> 00:28:02,799
to if you're used to doing junit testing

00:28:00,240 --> 00:28:05,200
right you want to do coverage of all the

00:28:02,799 --> 00:28:05,200
possible

00:28:05,919 --> 00:28:11,679
okay so yes we are

00:28:09,919 --> 00:28:13,600
doing conferences differently now so

00:28:11,679 --> 00:28:14,960
sorry about that or until some technical

00:28:13,600 --> 00:28:16,720
difficulties but let me

00:28:14,960 --> 00:28:20,720
share my screen again and then we will

00:28:16,720 --> 00:28:20,720
go back take a little step back

00:28:21,279 --> 00:28:27,039
okay hopefully you can see my screen you

00:28:24,960 --> 00:28:30,960
can hear me good still

00:28:27,039 --> 00:28:34,240
i'll just go back to

00:28:30,960 --> 00:28:34,720
and here we go um so like i was saying

00:28:34,240 --> 00:28:36,320
before

00:28:34,720 --> 00:28:38,640
you want to make sure that you're

00:28:36,320 --> 00:28:40,720
testing you're doing a lot of coverage

00:28:38,640 --> 00:28:42,799
to meet all the possible scenarios

00:28:40,720 --> 00:28:44,399
for when you're working with oppa just

00:28:42,799 --> 00:28:45,360
like you would any other development

00:28:44,399 --> 00:28:48,480
process

00:28:45,360 --> 00:28:49,840
so here is an example of a very simple

00:28:48,480 --> 00:28:52,080
test case

00:28:49,840 --> 00:28:53,120
where it's a mix between looks like a

00:28:52,080 --> 00:28:56,799
little bit of rego

00:28:53,120 --> 00:28:59,200
as well as yaml right it's mimicking

00:28:56,799 --> 00:29:00,960
what a manifest that would come through

00:28:59,200 --> 00:29:03,200
to the api server

00:29:00,960 --> 00:29:05,120
so i'm not going to go into much depth

00:29:03,200 --> 00:29:08,080
here but you can just see that it is

00:29:05,120 --> 00:29:08,960
referencing a crd and the operation

00:29:08,080 --> 00:29:11,840
create

00:29:08,960 --> 00:29:12,640
and at the end here it's showing that it

00:29:11,840 --> 00:29:16,480
should be

00:29:12,640 --> 00:29:17,840
blocked uh by the by based off of this

00:29:16,480 --> 00:29:20,000
policy here

00:29:17,840 --> 00:29:22,000
so let's go and test it and that's the

00:29:20,000 --> 00:29:24,320
way i like to approach my

00:29:22,000 --> 00:29:26,399
development it's you know once i've

00:29:24,320 --> 00:29:28,159
created the policy you don't want to

00:29:26,399 --> 00:29:30,799
just go in and throw it into

00:29:28,159 --> 00:29:32,880
into your cluster because then sometimes

00:29:30,799 --> 00:29:34,399
it might block everything it might block

00:29:32,880 --> 00:29:36,320
something else that you didn't expect it

00:29:34,399 --> 00:29:38,159
to right so you want to

00:29:36,320 --> 00:29:39,440
test it locally first so that's what

00:29:38,159 --> 00:29:41,760
we're going to do here

00:29:39,440 --> 00:29:42,559
so i basically have a folder where i

00:29:41,760 --> 00:29:46,799
have here

00:29:42,559 --> 00:29:50,320
my my policy as well as the test policy

00:29:46,799 --> 00:29:52,240
so we're going to opa has a client

00:29:50,320 --> 00:29:53,360
a command line client that you guys can

00:29:52,240 --> 00:29:56,399
download

00:29:53,360 --> 00:29:58,080
and um you know i said you can go to

00:29:56,399 --> 00:29:59,919
their site and do that as well but

00:29:58,080 --> 00:30:01,200
basically very straightforward you just

00:29:59,919 --> 00:30:02,720
do open tests

00:30:01,200 --> 00:30:04,880
there are some ways that you can look at

00:30:02,720 --> 00:30:06,640
more details about it but you would just

00:30:04,880 --> 00:30:10,480
simply do opa test

00:30:06,640 --> 00:30:12,960
you have the name of the

00:30:10,480 --> 00:30:14,799
policy that you want to test and then

00:30:12,960 --> 00:30:16,080
what test file that you're testing

00:30:14,799 --> 00:30:20,000
against

00:30:16,080 --> 00:30:21,919
so let's do that here and i like to

00:30:20,000 --> 00:30:24,000
just name mine test just because it

00:30:21,919 --> 00:30:26,399
helps me remember

00:30:24,000 --> 00:30:28,399
you know which one i'm testing against

00:30:26,399 --> 00:30:29,440
and then very simply here it shows you

00:30:28,399 --> 00:30:32,720
that it passed

00:30:29,440 --> 00:30:33,679
um we can also see if it failed it just

00:30:32,720 --> 00:30:37,039
gives you

00:30:33,679 --> 00:30:38,960
a message of you know hey

00:30:37,039 --> 00:30:40,720
this this is film this particular one's

00:30:38,960 --> 00:30:41,760
failing so for example if we change this

00:30:40,720 --> 00:30:43,520
to zero

00:30:41,760 --> 00:30:44,880
because it's saying what this policy is

00:30:43,520 --> 00:30:48,480
saying now is

00:30:44,880 --> 00:30:50,559
hey it's supposed to not deny

00:30:48,480 --> 00:30:52,000
it's not going to deny so it's supposed

00:30:50,559 --> 00:30:53,200
to fail

00:30:52,000 --> 00:30:55,600
it should fail because we want it to

00:30:53,200 --> 00:30:57,200
deny so we run it again

00:30:55,600 --> 00:31:00,159
you should see here that it failed and

00:30:57,200 --> 00:31:02,080
you'll get an error message like this

00:31:00,159 --> 00:31:04,240
it doesn't give you a lot of detail on

00:31:02,080 --> 00:31:06,159
why it doesn't give you the logic on why

00:31:04,240 --> 00:31:08,640
it failed it's something that you kind

00:31:06,159 --> 00:31:10,720
of have to go into but it does tell you

00:31:08,640 --> 00:31:12,480
at least which test case failed

00:31:10,720 --> 00:31:14,080
and if you have a lot of them which i've

00:31:12,480 --> 00:31:17,840
done for customers where we have

00:31:14,080 --> 00:31:19,279
maybe 100 test cases that we're going

00:31:17,840 --> 00:31:21,519
through for maybe about 10

00:31:19,279 --> 00:31:23,440
policies right you test them all at once

00:31:21,519 --> 00:31:25,279
you kind of you want to see which one is

00:31:23,440 --> 00:31:27,519
particularly failing

00:31:25,279 --> 00:31:29,440
okay so that's out of the way you're all

00:31:27,519 --> 00:31:31,120
good you've tested everything

00:31:29,440 --> 00:31:33,440
locally you're feeling confident about

00:31:31,120 --> 00:31:35,600
your policy so now you want to go play

00:31:33,440 --> 00:31:38,880
around with it in a cluster

00:31:35,600 --> 00:31:40,720
i always suggest still have obviously

00:31:38,880 --> 00:31:42,000
wherever you do your testing on a dev

00:31:40,720 --> 00:31:43,760
cluster

00:31:42,000 --> 00:31:45,760
one thing that you might want to do is

00:31:43,760 --> 00:31:46,080
inform others that you will be testing

00:31:45,760 --> 00:31:48,240
on

00:31:46,080 --> 00:31:49,840
this cluster this has happened to me

00:31:48,240 --> 00:31:52,399
before where we've

00:31:49,840 --> 00:31:54,320
loaded up a policy and one of the

00:31:52,399 --> 00:31:57,360
developers came in right after me

00:31:54,320 --> 00:31:59,120
and needed to actually perform the same

00:31:57,360 --> 00:32:01,279
action that i was testing against

00:31:59,120 --> 00:32:03,039
so we ran into some issues that way so

00:32:01,279 --> 00:32:05,600
just always makes be conscious of

00:32:03,039 --> 00:32:07,200
where you're testing your policy um and

00:32:05,600 --> 00:32:08,960
and informing others of when you're

00:32:07,200 --> 00:32:11,360
going to do this

00:32:08,960 --> 00:32:13,279
so the first thing that we would do is

00:32:11,360 --> 00:32:16,720
right now as you can see i got

00:32:13,279 --> 00:32:18,480
a cluster running here and it's got

00:32:16,720 --> 00:32:19,760
opening space i said this is all

00:32:18,480 --> 00:32:23,360
described

00:32:19,760 --> 00:32:24,240
in the in the tutorial so how to get all

00:32:23,360 --> 00:32:29,760
that set up

00:32:24,240 --> 00:32:29,760
you'll see i got some uh oppa

00:32:29,840 --> 00:32:37,519
very called opa pods here running

00:32:35,039 --> 00:32:39,200
in the open name space so that's been

00:32:37,519 --> 00:32:42,159
running for a while there

00:32:39,200 --> 00:32:43,919
and simp very simple we're gonna

00:32:42,159 --> 00:32:46,640
wherever your file is located so i said

00:32:43,919 --> 00:32:50,320
i have my policy here

00:32:46,640 --> 00:32:53,279
and you're going to create a config map

00:32:50,320 --> 00:32:55,600
so of course you can create a config map

00:32:53,279 --> 00:32:58,640
multiple ways via the file

00:32:55,600 --> 00:33:03,360
or let's call it crd

00:32:58,640 --> 00:33:03,360
block that's the name of my config map

00:33:03,919 --> 00:33:07,600
and so there's many ways you can do this

00:33:05,679 --> 00:33:10,320
if you're testing in a block

00:33:07,600 --> 00:33:11,200
of you can load them all up at once

00:33:10,320 --> 00:33:14,399
however you

00:33:11,200 --> 00:33:14,799
feel best of doing it i like to load

00:33:14,399 --> 00:33:17,919
mine

00:33:14,799 --> 00:33:19,840
individually just because i like to test

00:33:17,919 --> 00:33:21,600
each policy individually just to really

00:33:19,840 --> 00:33:23,120
understand what's working what's not

00:33:21,600 --> 00:33:26,320
working

00:33:23,120 --> 00:33:29,840
and let's do oops hold on

00:33:26,320 --> 00:33:32,559
play do the wrong oh where am i missing

00:33:29,840 --> 00:33:32,559
here hold on

00:33:35,519 --> 00:33:43,279
there we go got ready to go

00:33:39,760 --> 00:33:44,240
okay so our crds are sorry configmap is

00:33:43,279 --> 00:33:46,640
created

00:33:44,240 --> 00:33:48,880
and let's look at the config maps uh

00:33:46,640 --> 00:33:50,559
oppa also puts a config map here

00:33:48,880 --> 00:33:52,799
i said that's all described in the

00:33:50,559 --> 00:33:54,640
instructions but i also had another one

00:33:52,799 --> 00:33:56,399
here as well and if you're obviously if

00:33:54,640 --> 00:33:57,039
you're running a lot of policies you'll

00:33:56,399 --> 00:33:59,440
see

00:33:57,039 --> 00:34:00,799
tons of them in there so let's take a

00:33:59,440 --> 00:34:03,840
look at the status

00:34:00,799 --> 00:34:06,240
of the config map just because you want

00:34:03,840 --> 00:34:10,079
to make sure that it's actually in there

00:34:06,240 --> 00:34:11,760
and that it's running so

00:34:10,079 --> 00:34:13,440
you want to check a couple of things so

00:34:11,760 --> 00:34:16,240
the first thing with this is

00:34:13,440 --> 00:34:18,000
the data so this is you as you can see

00:34:16,240 --> 00:34:18,960
it's your policy it's the exact same

00:34:18,000 --> 00:34:21,520
thing that you wrote

00:34:18,960 --> 00:34:23,119
in a condensed form and so this way you

00:34:21,520 --> 00:34:25,280
could read it and then the most

00:34:23,119 --> 00:34:28,159
important thing is the status

00:34:25,280 --> 00:34:29,839
so the configmat obviously might come up

00:34:28,159 --> 00:34:31,839
but if the status is as an

00:34:29,839 --> 00:34:33,440
error you're gonna obviously it's not

00:34:31,839 --> 00:34:35,520
going to work so you always want to make

00:34:33,440 --> 00:34:38,560
sure that your status is okay

00:34:35,520 --> 00:34:40,000
once you create your configma so now

00:34:38,560 --> 00:34:43,599
we've got our config map

00:34:40,000 --> 00:34:46,800
in there um oppa is now kind of sitting

00:34:43,599 --> 00:34:50,079
looking to see if i try to create a

00:34:46,800 --> 00:34:52,399
custom resource and let's see if it

00:34:50,079 --> 00:34:55,679
blocks it right hold fingers cross

00:34:52,399 --> 00:34:58,800
demo gods here let's go uh

00:34:55,679 --> 00:35:01,200
so we're going to do a simple you know a

00:34:58,800 --> 00:35:01,200
creed

00:35:01,599 --> 00:35:05,520
where uh it we're gonna just do this one

00:35:04,800 --> 00:35:08,400
here

00:35:05,520 --> 00:35:08,400
my manifest

00:35:09,040 --> 00:35:13,440
so i'm gonna create my manifest here in

00:35:11,760 --> 00:35:17,440
my oak

00:35:13,440 --> 00:35:20,560
and you'll see that fingers crossed

00:35:17,440 --> 00:35:22,400
it should block it exactly so as you can

00:35:20,560 --> 00:35:24,240
see it gives you the same error message

00:35:22,400 --> 00:35:27,440
that i used to

00:35:24,240 --> 00:35:28,320
to block what i wrote you know customize

00:35:27,440 --> 00:35:29,920
it

00:35:28,320 --> 00:35:32,480
and that's pretty straightforward right

00:35:29,920 --> 00:35:35,599
so you go through that um

00:35:32,480 --> 00:35:36,240
i can delete i'm gonna i'm gonna delete

00:35:35,599 --> 00:35:40,320
the same

00:35:36,240 --> 00:35:43,680
config map and i'm gonna try to

00:35:40,320 --> 00:35:45,200
apply it as well give me one second

00:35:43,680 --> 00:35:47,040
so we're going to go back and apply it

00:35:45,200 --> 00:35:49,280
and now it should go through

00:35:47,040 --> 00:35:50,960
so there you go very simple very

00:35:49,280 --> 00:35:54,960
straightforward demo

00:35:50,960 --> 00:35:56,960
it's very effective for customers and

00:35:54,960 --> 00:35:59,040
basically as you can see here it blocked

00:35:56,960 --> 00:36:02,480
it didn't doesn't block it

00:35:59,040 --> 00:36:04,480
and what i suggest is you know kind of

00:36:02,480 --> 00:36:06,160
take this and you build upon it

00:36:04,480 --> 00:36:08,320
so you know if you wanted to go into

00:36:06,160 --> 00:36:10,320
more details and more depth on how to

00:36:08,320 --> 00:36:11,200
how it works for your customer or your

00:36:10,320 --> 00:36:14,240
environment

00:36:11,200 --> 00:36:15,119
then you can build upon it start small

00:36:14,240 --> 00:36:18,320
and then

00:36:15,119 --> 00:36:20,320
increase on the foundation of of it

00:36:18,320 --> 00:36:21,760
so that was just really quick demo there

00:36:20,320 --> 00:36:23,760
and we'll

00:36:21,760 --> 00:36:24,960
basically get back to the slide so let

00:36:23,760 --> 00:36:28,320
me

00:36:24,960 --> 00:36:28,320
stop sharing my screen here

00:36:32,400 --> 00:36:37,200
sorry about that um in true conference

00:36:34,720 --> 00:36:39,599
call fashion i was talking on mute

00:36:37,200 --> 00:36:41,760
so kind of bringing this in for landing

00:36:39,599 --> 00:36:43,920
bringing it back to value and why oppa

00:36:41,760 --> 00:36:46,320
is important to what you're doing

00:36:43,920 --> 00:36:47,119
is the kubernetes security best

00:36:46,320 --> 00:36:49,359
practices

00:36:47,119 --> 00:36:50,800
have to include admission controllers

00:36:49,359 --> 00:36:52,880
you have to have that last

00:36:50,800 --> 00:36:54,000
check to confirm that what your p what

00:36:52,880 --> 00:36:57,280
your developers and what your

00:36:54,000 --> 00:36:59,839
operators are telling kubernetes to do

00:36:57,280 --> 00:37:01,680
is in line with the policies of what

00:36:59,839 --> 00:37:04,960
should happen

00:37:01,680 --> 00:37:05,760
and oppa is the community leader in that

00:37:04,960 --> 00:37:09,440
world

00:37:05,760 --> 00:37:10,160
so oppa is is a vibrant community that's

00:37:09,440 --> 00:37:11,599
growing

00:37:10,160 --> 00:37:13,760
the adoption rate is growing around

00:37:11,599 --> 00:37:15,760
kubernetes and it's going to be around

00:37:13,760 --> 00:37:19,040
in five years so that question of

00:37:15,760 --> 00:37:21,200
is it going to happen is there

00:37:19,040 --> 00:37:23,119
getting started isn't hard what rachel

00:37:21,200 --> 00:37:25,119
showed you is a valid

00:37:23,119 --> 00:37:27,760
use case i mean that wasn't a hello

00:37:25,119 --> 00:37:29,280
world kind of demo

00:37:27,760 --> 00:37:31,200
getting started with oppa the lift is

00:37:29,280 --> 00:37:33,599
not very high it's a little weird

00:37:31,200 --> 00:37:36,640
feeling when you have that feeling of

00:37:33,599 --> 00:37:39,440
oh i'm gonna do a default i have to deny

00:37:36,640 --> 00:37:40,880
a deny is a good thing in the world of

00:37:39,440 --> 00:37:42,480
oppa but again when you realize that

00:37:40,880 --> 00:37:43,839
it's coming from the security background

00:37:42,480 --> 00:37:45,119
that it is

00:37:43,839 --> 00:37:46,400
then it makes a little more sense it

00:37:45,119 --> 00:37:48,720
does take a little bit of getting used

00:37:46,400 --> 00:37:52,720
to but the lift to get there

00:37:48,720 --> 00:37:54,480
is not bad and then a few links that we

00:37:52,720 --> 00:37:56,720
wanted to post in there to give you

00:37:54,480 --> 00:37:59,599
up rachel's back rachel you know walk

00:37:56,720 --> 00:37:59,599
through the links real quick

00:38:00,400 --> 00:38:04,640
yep so the links that are just straight

00:38:02,720 --> 00:38:07,359
the oppa documents

00:38:04,640 --> 00:38:07,920
um one other thing is a nice link to a

00:38:07,359 --> 00:38:10,480
blog

00:38:07,920 --> 00:38:11,920
that jamie also wrote enhancing you know

00:38:10,480 --> 00:38:13,839
goes into more depth so enhancing

00:38:11,920 --> 00:38:15,440
kubernetes security with opa

00:38:13,839 --> 00:38:18,400
just more in depth of what we showed

00:38:15,440 --> 00:38:21,599
today more details on how to expand upon

00:38:18,400 --> 00:38:24,160
this uh demo another thing is

00:38:21,599 --> 00:38:25,680
gatekeeper version three right how do

00:38:24,160 --> 00:38:26,800
you take from version one and go to

00:38:25,680 --> 00:38:29,040
version three

00:38:26,800 --> 00:38:32,000
and then also the next cool thing is a

00:38:29,040 --> 00:38:35,520
nice cool podcast i love the k-files

00:38:32,000 --> 00:38:37,839
which are very own jamie duncan has uh

00:38:35,520 --> 00:38:38,800
gotten and created this nice podcast on

00:38:37,839 --> 00:38:42,240
various uh

00:38:38,800 --> 00:38:43,839
i.t solutions and in areas but he has a

00:38:42,240 --> 00:38:45,680
great episode on

00:38:43,839 --> 00:38:46,960
on opa where he goes into more depth

00:38:45,680 --> 00:38:49,200
with other of our

00:38:46,960 --> 00:38:51,280
colleagues in the industry on how to

00:38:49,200 --> 00:38:53,040
leverage opa for yourself and your cup

00:38:51,280 --> 00:38:54,960
or your customer yeah a couple of

00:38:53,040 --> 00:38:56,079
shameless plugs there to ramp everything

00:38:54,960 --> 00:38:58,160
up

00:38:56,079 --> 00:39:00,000
and with that we're about looks like we

00:38:58,160 --> 00:39:01,599
have maybe 10 minutes for q a in the

00:39:00,000 --> 00:39:03,440
live q a section

00:39:01,599 --> 00:39:04,880
and we just wanted to say thanks a quick

00:39:03,440 --> 00:39:06,640
shout out to vmware

00:39:04,880 --> 00:39:08,240
the vmware open source team that's

00:39:06,640 --> 00:39:09,760
helping you know helping bring all of

00:39:08,240 --> 00:39:11,680
this stuff to life and helping

00:39:09,760 --> 00:39:12,880
bring this into customers they have a

00:39:11,680 --> 00:39:14,320
great blog series

00:39:12,880 --> 00:39:16,160
uh the link is on the bottom of this

00:39:14,320 --> 00:39:18,880
last slide

00:39:16,160 --> 00:39:18,880
thanks for the time

00:39:22,240 --> 00:39:26,720
all right great um well i just spent 30

00:39:25,520 --> 00:39:29,440
minutes listening to my

00:39:26,720 --> 00:39:30,800
own recorded voice and well i survived

00:39:29,440 --> 00:39:32,320
for the first time ever

00:39:30,800 --> 00:39:34,240
so we've got quite a few questions in

00:39:32,320 --> 00:39:35,760
the q a um

00:39:34,240 --> 00:39:37,599
i think i'll distribute him rachel like

00:39:35,760 --> 00:39:39,119
i said during the during the talk rachel

00:39:37,599 --> 00:39:41,760
is the brains of the operation

00:39:39,119 --> 00:39:43,520
but um i think i'll i think we agreed

00:39:41,760 --> 00:39:46,960
i'll emcee them

00:39:43,520 --> 00:39:48,720
um the first one is

00:39:46,960 --> 00:39:50,560
what is the use case when rolls and roll

00:39:48,720 --> 00:39:52,640
bindings don't work and we need to move

00:39:50,560 --> 00:39:55,760
to opa

00:39:52,640 --> 00:39:58,480
uh rachel is that is that essentially

00:39:55,760 --> 00:40:01,359
what the demo was

00:39:58,480 --> 00:40:02,160
um not in this case uh we didn't in my

00:40:01,359 --> 00:40:04,560
experience

00:40:02,160 --> 00:40:06,079
uh we didn't focus too much on that that

00:40:04,560 --> 00:40:08,160
is an area that i

00:40:06,079 --> 00:40:10,079
am researching myself because it is

00:40:08,160 --> 00:40:12,160
coming up with a lot of our customers

00:40:10,079 --> 00:40:14,560
so i will be doing more in depth on that

00:40:12,160 --> 00:40:14,880
um so i don't have a definite answer for

00:40:14,560 --> 00:40:17,680
you

00:40:14,880 --> 00:40:18,720
but i do suggest go to the opa slack

00:40:17,680 --> 00:40:21,040
workspace

00:40:18,720 --> 00:40:24,160
and check that out there and someone

00:40:21,040 --> 00:40:25,680
will have an answer there if not then um

00:40:24,160 --> 00:40:27,599
i don't know where else he can go but

00:40:25,680 --> 00:40:29,200
yeah that's the place to be

00:40:27,599 --> 00:40:31,440
yeah and i think the rule of thumb is

00:40:29,200 --> 00:40:35,440
that it's not an either or situation

00:40:31,440 --> 00:40:35,440
um that you could

00:40:35,599 --> 00:40:38,720
all of these all of those tools that i

00:40:37,520 --> 00:40:39,359
talked about at the beginning of the

00:40:38,720 --> 00:40:42,160
session

00:40:39,359 --> 00:40:43,119
are part of your security stance inside

00:40:42,160 --> 00:40:46,880
kubernetes

00:40:43,119 --> 00:40:48,960
including opa um and

00:40:46,880 --> 00:40:50,640
like anything in linux kubernetes gives

00:40:48,960 --> 00:40:50,960
you 17 ways to shoot yourself in the

00:40:50,640 --> 00:40:53,040
foot

00:40:50,960 --> 00:40:54,400
which is great until you know you have

00:40:53,040 --> 00:40:56,240
12 holes in your foot and five things

00:40:54,400 --> 00:40:59,040
left to try

00:40:56,240 --> 00:41:00,400
you could probably write really complex

00:40:59,040 --> 00:41:03,760
rbac rules

00:41:00,400 --> 00:41:05,359
to get most of the functionality in opa

00:41:03,760 --> 00:41:07,520
and you could probably write really

00:41:05,359 --> 00:41:09,359
complex opa policies

00:41:07,520 --> 00:41:11,839
to get most of the functionality of the

00:41:09,359 --> 00:41:13,680
rbac engine inside kubernetes

00:41:11,839 --> 00:41:15,599
but with the goal of keeping things as

00:41:13,680 --> 00:41:17,119
simple as is practical

00:41:15,599 --> 00:41:19,280
there are things that our back lens

00:41:17,119 --> 00:41:21,119
himself lends itself towards and that's

00:41:19,280 --> 00:41:24,079
i have a user that can do a thing in a

00:41:21,119 --> 00:41:25,839
project or cluster wide

00:41:24,079 --> 00:41:27,440
very straightforward a user can create a

00:41:25,839 --> 00:41:28,960
pod a user can create

00:41:27,440 --> 00:41:31,280
a service a user can create a load

00:41:28,960 --> 00:41:33,119
balance you know can create a top level

00:41:31,280 --> 00:41:34,880
kubernetes object

00:41:33,119 --> 00:41:37,119
but there are times when those top level

00:41:34,880 --> 00:41:40,720
objects have different purposes

00:41:37,119 --> 00:41:43,760
so and that's when opa comes in so

00:41:40,720 --> 00:41:46,000
maybe you want be to be able to create

00:41:43,760 --> 00:41:47,440
certain pods with certain annotations or

00:41:46,000 --> 00:41:48,800
not

00:41:47,440 --> 00:41:50,640
that's where oppa starts getting that

00:41:48,800 --> 00:41:52,079
more fine-grained control of those top

00:41:50,640 --> 00:41:54,079
level objects and then when you get into

00:41:52,079 --> 00:41:55,680
custom controller objects

00:41:54,079 --> 00:41:57,920
you know you have to start extending our

00:41:55,680 --> 00:41:59,760
back and doing all sorts of crazy stuff

00:41:57,920 --> 00:42:00,960
so they're really just kind of look at

00:41:59,760 --> 00:42:03,200
what you're trying to do

00:42:00,960 --> 00:42:04,800
in the words of the mortal duffy cooley

00:42:03,200 --> 00:42:05,680
um you know what problem are you trying

00:42:04,800 --> 00:42:08,079
to solve

00:42:05,680 --> 00:42:09,440
and then use the best tool for it

00:42:08,079 --> 00:42:10,960
sometimes that's going to be our back

00:42:09,440 --> 00:42:12,880
sometimes it's going to be opa

00:42:10,960 --> 00:42:14,000
as or some other validating and mission

00:42:12,880 --> 00:42:15,520
controller

00:42:14,000 --> 00:42:18,160
and just go with what's going to give

00:42:15,520 --> 00:42:21,760
you the most straightforward answer

00:42:18,160 --> 00:42:24,720
um see the next one hey jamie there was

00:42:21,760 --> 00:42:26,319
just a follow-up to that um when should

00:42:24,720 --> 00:42:28,079
i switch to oppa

00:42:26,319 --> 00:42:30,000
and do not use role bindings and like

00:42:28,079 --> 00:42:32,000
jamie said this is not an either or

00:42:30,000 --> 00:42:33,280
right it's kind of more of a conjunction

00:42:32,000 --> 00:42:35,680
it's a partnership

00:42:33,280 --> 00:42:37,440
um there are scenarios when you would

00:42:35,680 --> 00:42:39,520
just use opa to do something

00:42:37,440 --> 00:42:40,960
and when you'll just use rule bindings

00:42:39,520 --> 00:42:44,400
and a combination of both so

00:42:40,960 --> 00:42:46,319
it's not a it's not a get rid of

00:42:44,400 --> 00:42:48,160
roll bindings right or it's completely

00:42:46,319 --> 00:42:50,960
moved to one or the other

00:42:48,160 --> 00:42:52,960
yeah yeah completely use the best you

00:42:50,960 --> 00:42:54,720
know everything's not a nail

00:42:52,960 --> 00:42:56,880
um you know use the best tool that use

00:42:54,720 --> 00:42:58,000
the best tool uh someone also noted that

00:42:56,880 --> 00:43:00,560
the policy looks a lot like

00:42:58,000 --> 00:43:02,480
roll.yaml well in particular when you're

00:43:00,560 --> 00:43:02,960
using the in the example that rachel

00:43:02,480 --> 00:43:05,359
gave

00:43:02,960 --> 00:43:06,880
um we're using essentially the policies

00:43:05,359 --> 00:43:07,359
written in a config map and the config

00:43:06,880 --> 00:43:10,400
map is

00:43:07,359 --> 00:43:12,560
ammo when you start using

00:43:10,400 --> 00:43:13,760
tools like gatekeeper you know it's

00:43:12,560 --> 00:43:15,040
still going to be ammo but it's going to

00:43:13,760 --> 00:43:16,720
be a little more abstracted out so it's

00:43:15,040 --> 00:43:18,319
going to be a little less coop

00:43:16,720 --> 00:43:19,839
native it's going to look a little less

00:43:18,319 --> 00:43:20,720
like the kubernetes constructs we're all

00:43:19,839 --> 00:43:22,160
used to

00:43:20,720 --> 00:43:24,160
but yeah it totally does because it's a

00:43:22,160 --> 00:43:25,599
config map and

00:43:24,160 --> 00:43:28,560
it all kind of looks the same after you

00:43:25,599 --> 00:43:28,560
stare at it long enough

00:43:29,359 --> 00:43:33,599
um see are pot security policies

00:43:31,920 --> 00:43:35,040
strictly weaker than oppa or they're

00:43:33,599 --> 00:43:38,079
things oppa can do but

00:43:35,040 --> 00:43:39,839
cannot do but psp's can i'll take that

00:43:38,079 --> 00:43:42,160
one jamie as well

00:43:39,839 --> 00:43:43,040
this is another one that comes up quite

00:43:42,160 --> 00:43:45,520
often

00:43:43,040 --> 00:43:47,200
so there was a conversation about psps

00:43:45,520 --> 00:43:49,520
going away they're not going away

00:43:47,200 --> 00:43:51,119
in replace of oppa right you can be in

00:43:49,520 --> 00:43:52,319
this customer actually that i showed in

00:43:51,119 --> 00:43:54,240
the example

00:43:52,319 --> 00:43:55,599
uh they use both right they said there

00:43:54,240 --> 00:43:57,440
was times when they needed

00:43:55,599 --> 00:43:59,200
they could just do it with a psp it kind

00:43:57,440 --> 00:44:00,480
of kept it a little bit simpler right

00:43:59,200 --> 00:44:01,520
and then they would use opa for

00:44:00,480 --> 00:44:04,400
everything else

00:44:01,520 --> 00:44:06,160
as well as um oppa can be used not just

00:44:04,400 --> 00:44:09,520
in kubernetes right it could be used for

00:44:06,160 --> 00:44:10,880
docker or you know other other it

00:44:09,520 --> 00:44:13,599
solutions so it's not just

00:44:10,880 --> 00:44:14,079
kubernetes focus so it's not an either

00:44:13,599 --> 00:44:17,119
or

00:44:14,079 --> 00:44:17,440
i personally um worked more with oppa

00:44:17,119 --> 00:44:20,560
than

00:44:17,440 --> 00:44:22,079
psps i found that it was

00:44:20,560 --> 00:44:24,240
a little more robust but that could have

00:44:22,079 --> 00:44:27,040
just been my experience so

00:44:24,240 --> 00:44:28,800
yeah yeah i think it's just a little

00:44:27,040 --> 00:44:30,480
more fine grained

00:44:28,800 --> 00:44:31,920
um but i wouldn't say weaker better

00:44:30,480 --> 00:44:32,640
again i think it's just sort of apples

00:44:31,920 --> 00:44:36,560
and oranges

00:44:32,640 --> 00:44:38,000
or at least different kinds of apples um

00:44:36,560 --> 00:44:38,890
someone's making jokes about me being a

00:44:38,000 --> 00:44:41,359
history major

00:44:38,890 --> 00:44:44,800
[Music]

00:44:41,359 --> 00:44:46,400
um let's see what's a what's the use

00:44:44,800 --> 00:44:51,839
case when rolls and roll bindings don't

00:44:46,400 --> 00:44:51,839
work and we need to move to oppa

00:44:53,760 --> 00:44:57,520
like rachel you want to jump on that one

00:44:55,200 --> 00:44:59,440
or you want me to i'll let you take this

00:44:57,520 --> 00:45:02,640
one jamie i think about this one

00:44:59,440 --> 00:45:03,359
so again it's it's that idea of having

00:45:02,640 --> 00:45:06,000
very

00:45:03,359 --> 00:45:06,720
fine grain control so you can set up a

00:45:06,000 --> 00:45:08,319
roll

00:45:06,720 --> 00:45:10,480
you know a roll binding and you can set

00:45:08,319 --> 00:45:12,800
up a roll to in a project

00:45:10,480 --> 00:45:14,800
that says you know this service account

00:45:12,800 --> 00:45:17,440
or this authenticated user can

00:45:14,800 --> 00:45:18,400
create cannot can create a pod or cannot

00:45:17,440 --> 00:45:19,920
create a pod

00:45:18,400 --> 00:45:22,720
can create a load balancer cannot create

00:45:19,920 --> 00:45:22,720
a load balancer

00:45:23,680 --> 00:45:28,240
and that's fine but when you get into

00:45:26,480 --> 00:45:29,760
different kinds of pods

00:45:28,240 --> 00:45:31,280
you know like if you have a namespace

00:45:29,760 --> 00:45:32,800
that have your that has your database

00:45:31,280 --> 00:45:35,119
deployed to it

00:45:32,800 --> 00:45:36,640
you don't want to deploy things that

00:45:35,119 --> 00:45:38,880
aren't in your database

00:45:36,640 --> 00:45:40,800
i mean or also if you want to deploy a

00:45:38,880 --> 00:45:42,560
pod great i can deploy a pod

00:45:40,800 --> 00:45:44,880
and i can set roles and role bindings to

00:45:42,560 --> 00:45:46,960
let me create or not create different

00:45:44,880 --> 00:45:48,640
objects inside kubernetes

00:45:46,960 --> 00:45:50,240
but i can't create a role binding at

00:45:48,640 --> 00:45:53,599
least i don't know how

00:45:50,240 --> 00:45:54,240
to create a roller a roll that will let

00:45:53,599 --> 00:45:57,520
me

00:45:54,240 --> 00:46:00,079
only create burstable pods that will not

00:45:57,520 --> 00:46:02,000
let best effort pods be deployed

00:46:00,079 --> 00:46:03,520
but you can very easily write an opel

00:46:02,000 --> 00:46:06,079
policy that says

00:46:03,520 --> 00:46:08,400
all all deployments all deployment

00:46:06,079 --> 00:46:10,319
objects all pods have to have

00:46:08,400 --> 00:46:11,839
requests and limits as part of their

00:46:10,319 --> 00:46:13,440
definition

00:46:11,839 --> 00:46:15,280
and that it won't let it deploy if you

00:46:13,440 --> 00:46:17,920
don't um and that

00:46:15,280 --> 00:46:19,760
while in product in dev that's not all

00:46:17,920 --> 00:46:21,280
together that important sometimes but in

00:46:19,760 --> 00:46:22,960
a production environment

00:46:21,280 --> 00:46:24,400
you know your best effort pods are the

00:46:22,960 --> 00:46:26,800
first ones to be you know

00:46:24,400 --> 00:46:28,560
out of memory killed so you want to make

00:46:26,800 --> 00:46:30,240
sure those

00:46:28,560 --> 00:46:32,000
you know your production stuff is the is

00:46:30,240 --> 00:46:34,480
the last stuff to get to to be affected

00:46:32,000 --> 00:46:36,800
by in a resource contention issue

00:46:34,480 --> 00:46:37,920
so there are again it's just about that

00:46:36,800 --> 00:46:40,720
granularity

00:46:37,920 --> 00:46:42,240
uh rolls are back i can i can or cannot

00:46:40,720 --> 00:46:45,839
do a thing to a kubernetes

00:46:42,240 --> 00:46:46,480
object with opa i can interrogate those

00:46:45,839 --> 00:46:47,920
objects

00:46:46,480 --> 00:46:49,520
based on their annotations based on

00:46:47,920 --> 00:46:51,119
their labels based on

00:46:49,520 --> 00:46:52,720
other anything that i can inquire about

00:46:51,119 --> 00:46:54,240
in the definition of the object

00:46:52,720 --> 00:46:56,000
and build policies off of that

00:46:54,240 --> 00:46:59,040
interrogation so i can just get way more

00:46:56,000 --> 00:47:01,599
fine-grained when i'm using opa

00:46:59,040 --> 00:47:02,800
and that said rolls and roll bindings

00:47:01,599 --> 00:47:04,400
are very important because i need to

00:47:02,800 --> 00:47:06,400
paint with broad strokes before i paint

00:47:04,400 --> 00:47:08,839
with the small brushes

00:47:06,400 --> 00:47:11,599
if hopefully the paint analogy makes

00:47:08,839 --> 00:47:14,160
sense

00:47:11,599 --> 00:47:14,640
um let's see looks like the last let's

00:47:14,160 --> 00:47:18,319
see

00:47:14,640 --> 00:47:18,800
did you do do you think oppa might

00:47:18,319 --> 00:47:20,319
increase

00:47:18,800 --> 00:47:23,119
cold start time for kubernetes

00:47:20,319 --> 00:47:26,480
serverless frameworks

00:47:23,119 --> 00:47:28,720
um i've never tried like i've not used

00:47:26,480 --> 00:47:29,200
like i've not deployed oppa on like a in

00:47:28,720 --> 00:47:32,079
like a k

00:47:29,200 --> 00:47:32,079
native environment

00:47:34,720 --> 00:47:39,760
probably some um but it's just something

00:47:38,400 --> 00:47:41,839
you're going to have to test out because

00:47:39,760 --> 00:47:44,640
there are so many variables there

00:47:41,839 --> 00:47:45,760
that are going to get into what your

00:47:44,640 --> 00:47:48,160
application doing

00:47:45,760 --> 00:47:49,359
what's the startup time all of that fun

00:47:48,160 --> 00:47:50,800
stuff

00:47:49,359 --> 00:47:52,160
i wish i had a good answer there follow

00:47:50,800 --> 00:47:53,520
up with me on twitter and maybe we can

00:47:52,160 --> 00:47:56,160
dig into that one a little more but i

00:47:53,520 --> 00:47:58,160
think we're just about out of time here

00:47:56,160 --> 00:47:59,760
and um and thanks a lot for coming to

00:47:58,160 --> 00:48:01,440
hang out

00:47:59,760 --> 00:48:02,800
all right thank you everyone and like

00:48:01,440 --> 00:48:07,839
said follow up with us on

00:48:02,800 --> 00:48:07,839

YouTube URL: https://www.youtube.com/watch?v=Qu2CthMD_W0


