Title: Bridging the Gap - Linux in Safety Critical Systems - Elana Copperman, Mobileye
Publication date: 2020-09-03
Playlist: Open Source Summit + Embedded Linux Conference NA 2020
Description: 
	Bridging the Gap - Linux in Safety Critical Systems - Elana Copperman, Mobileye
Captions: 
	00:00:03,840 --> 00:00:08,160
okay

00:00:05,120 --> 00:00:11,920
hi everybody um welcome

00:00:08,160 --> 00:00:15,360
and um my name is ilana

00:00:11,920 --> 00:00:18,880
copperman i'm calling in from israel

00:00:15,360 --> 00:00:21,199
and i work for mobileye and this talk

00:00:18,880 --> 00:00:23,519
will be about

00:00:21,199 --> 00:00:25,519
some work which we have been doing with

00:00:23,519 --> 00:00:27,760
the linux foundation

00:00:25,519 --> 00:00:30,800
for enabling the usage of linux and

00:00:27,760 --> 00:00:33,700
safety applications and

00:00:30,800 --> 00:00:35,200
um just to set the context um

00:00:33,700 --> 00:00:38,640
[Music]

00:00:35,200 --> 00:00:40,000
i do not come from the safety assessment

00:00:38,640 --> 00:00:42,160
or safety standards

00:00:40,000 --> 00:00:44,399
community i work as a system architect

00:00:42,160 --> 00:00:44,399
so

00:00:44,559 --> 00:00:47,840
i have many years of experience in

00:00:47,039 --> 00:00:51,760
embedded

00:00:47,840 --> 00:00:54,000
linux systems and what i do is to try to

00:00:51,760 --> 00:00:58,239
help to design solutions

00:00:54,000 --> 00:01:00,399
um for the safety and security issues

00:00:58,239 --> 00:01:02,160
what i'm going to speak about here is

00:01:00,399 --> 00:01:06,479
what i call bridging the gap

00:01:02,160 --> 00:01:10,560
because the project eliza is all about

00:01:06,479 --> 00:01:10,560
trying to help to

00:01:10,840 --> 00:01:15,759
um allow

00:01:13,280 --> 00:01:17,200
enable the usage of linux and safety

00:01:15,759 --> 00:01:19,439
applications

00:01:17,200 --> 00:01:20,560
um something which has been a major

00:01:19,439 --> 00:01:23,680
problem in the past

00:01:20,560 --> 00:01:27,439
and to see how we can all work together

00:01:23,680 --> 00:01:31,200
to make that happen so

00:01:27,439 --> 00:01:33,600
to go into more detail

00:01:31,200 --> 00:01:34,240
okay a little bit of background again i

00:01:33,600 --> 00:01:37,280
don't know

00:01:34,240 --> 00:01:38,960
who i'm speaking to um but deploying

00:01:37,280 --> 00:01:41,040
linux and safety

00:01:38,960 --> 00:01:42,000
critical systems has been a major

00:01:41,040 --> 00:01:45,759
challenge

00:01:42,000 --> 00:01:47,520
to date for those who are experienced in

00:01:45,759 --> 00:01:52,079
using linux they

00:01:47,520 --> 00:01:55,360
obviously are familiar with the benefits

00:01:52,079 --> 00:01:59,840
linux provides many

00:01:55,360 --> 00:02:03,119
features subsystems which enable to

00:01:59,840 --> 00:02:07,119
to develop complex software

00:02:03,119 --> 00:02:09,520
it has strong security capabilities

00:02:07,119 --> 00:02:12,080
and one of the really important aspects

00:02:09,520 --> 00:02:15,680
of linux is that it gives us the

00:02:12,080 --> 00:02:17,840
necessary software interfaces to

00:02:15,680 --> 00:02:19,040
virtually any underlying hardware with

00:02:17,840 --> 00:02:22,959
which we need

00:02:19,040 --> 00:02:24,800
to work with and an amazing community

00:02:22,959 --> 00:02:27,599
with which we can cooperate and work

00:02:24,800 --> 00:02:29,920
together to provide real solutions

00:02:27,599 --> 00:02:31,360
so for those reasons people in the who

00:02:29,920 --> 00:02:34,239
develop safety critical

00:02:31,360 --> 00:02:36,239
applications have been looking to linux

00:02:34,239 --> 00:02:39,920
to use it in

00:02:36,239 --> 00:02:41,200
safety critical systems the problem is

00:02:39,920 --> 00:02:43,200
though that

00:02:41,200 --> 00:02:44,400
linux in order to be used in safety

00:02:43,200 --> 00:02:47,440
critical systems

00:02:44,400 --> 00:02:48,400
it has to pass very stringent assessment

00:02:47,440 --> 00:02:51,120
processes

00:02:48,400 --> 00:02:52,400
which are defined by safety standards of

00:02:51,120 --> 00:02:53,840
different types i'm not going to go into

00:02:52,400 --> 00:02:54,720
those details so for those who are not

00:02:53,840 --> 00:02:58,080
familiar

00:02:54,720 --> 00:03:00,159
but the process is a very strict and and

00:02:58,080 --> 00:03:01,840
binding process which basically gives

00:03:00,159 --> 00:03:04,560
the liability

00:03:01,840 --> 00:03:05,920
to the people who produce those software

00:03:04,560 --> 00:03:08,720
applications

00:03:05,920 --> 00:03:10,239
to ensure that um they have done the

00:03:08,720 --> 00:03:14,080
most possible

00:03:10,239 --> 00:03:17,440
to prevent any harm to

00:03:14,080 --> 00:03:19,120
human life or any loss due to the usage

00:03:17,440 --> 00:03:20,800
of that software

00:03:19,120 --> 00:03:22,159
and that's where things start getting

00:03:20,800 --> 00:03:24,720
tricky because

00:03:22,159 --> 00:03:26,080
linux obviously hasn't grown and hasn't

00:03:24,720 --> 00:03:28,879
been developed

00:03:26,080 --> 00:03:30,239
in a way that matches the strict

00:03:28,879 --> 00:03:32,879
documentation

00:03:30,239 --> 00:03:35,840
testing and assessment requirements for

00:03:32,879 --> 00:03:39,920
this of the safety standards

00:03:35,840 --> 00:03:42,080
and um and that is where we have a major

00:03:39,920 --> 00:03:45,440
problem and where we are trying to

00:03:42,080 --> 00:03:49,280
to bridge that gap and um

00:03:45,440 --> 00:03:52,480
to bring the two sides together

00:03:49,280 --> 00:03:52,879
close enough so that we have we are able

00:03:52,480 --> 00:03:56,799
to

00:03:52,879 --> 00:03:59,200
actually deploy linux in such systems

00:03:56,799 --> 00:04:00,000
okay um this graphic and i think we

00:03:59,200 --> 00:04:02,560
should sort of keep

00:04:00,000 --> 00:04:03,840
it in the back of our minds the work of

00:04:02,560 --> 00:04:07,120
eliza the group

00:04:03,840 --> 00:04:08,959
that you know we we established um for

00:04:07,120 --> 00:04:11,439
enabling linux and safety

00:04:08,959 --> 00:04:13,519
critical applications is really all

00:04:11,439 --> 00:04:15,519
about minding the gap

00:04:13,519 --> 00:04:16,959
and it's it's it's really tricky in this

00:04:15,519 --> 00:04:18,959
sense we deal

00:04:16,959 --> 00:04:20,799
on the one hand with people who come

00:04:18,959 --> 00:04:24,560
from the world of safety

00:04:20,799 --> 00:04:26,800
assessment which is um

00:04:24,560 --> 00:04:28,400
has very strict standards very strict

00:04:26,800 --> 00:04:29,919
compliance rules

00:04:28,400 --> 00:04:32,400
because at the end of the day we're

00:04:29,919 --> 00:04:36,720
dealing with with legal implications

00:04:32,400 --> 00:04:39,040
and and uh potential risks to lives

00:04:36,720 --> 00:04:39,759
for these type of applications and on

00:04:39,040 --> 00:04:43,040
the other hand

00:04:39,759 --> 00:04:43,590
we have the the open-minded

00:04:43,040 --> 00:04:46,320
um

00:04:43,590 --> 00:04:48,479
[Music]

00:04:46,320 --> 00:04:50,160
community consensus which we see in the

00:04:48,479 --> 00:04:52,240
linux development

00:04:50,160 --> 00:04:53,680
and the two communities need to work

00:04:52,240 --> 00:04:55,199
together and that's what we're trying to

00:04:53,680 --> 00:04:58,560
do in this group

00:04:55,199 --> 00:05:00,800
to bring linux down

00:04:58,560 --> 00:05:10,800
into the world of safety critical

00:05:00,800 --> 00:05:14,479
systems in a reliable and effective way

00:05:10,800 --> 00:05:17,840
okay um sorry

00:05:14,479 --> 00:05:20,720
too fast okay

00:05:17,840 --> 00:05:21,840
um so when we started in this sort of

00:05:20,720 --> 00:05:23,520
like uh

00:05:21,840 --> 00:05:25,840
i don't know good quality even maybe a

00:05:23,520 --> 00:05:29,199
startup mode trying to figure out

00:05:25,840 --> 00:05:30,880
how can we do this so

00:05:29,199 --> 00:05:33,440
there's a lot of pressure from industry

00:05:30,880 --> 00:05:35,759
and that's where myself and

00:05:33,440 --> 00:05:36,720
other people are coming from there's a

00:05:35,759 --> 00:05:40,560
lot of pressure

00:05:36,720 --> 00:05:41,440
to to use linux in safety critical

00:05:40,560 --> 00:05:42,960
systems

00:05:41,440 --> 00:05:44,639
in particular i come from which is the

00:05:42,960 --> 00:05:46,000
automotive domain but in many other

00:05:44,639 --> 00:05:49,120
areas as well

00:05:46,000 --> 00:05:53,840
linux is a strong choice for the reasons

00:05:49,120 --> 00:05:53,840
which we mentioned before

00:05:55,520 --> 00:05:59,120
we had to get together in order to to

00:05:57,759 --> 00:06:01,280
set up the foundation

00:05:59,120 --> 00:06:02,319
which is what we have been trying to do

00:06:01,280 --> 00:06:05,600
now

00:06:02,319 --> 00:06:07,280
and um what happens we are trying to

00:06:05,600 --> 00:06:10,639
define

00:06:07,280 --> 00:06:13,120
the necessary level of functional safety

00:06:10,639 --> 00:06:14,720
which will basically give us the ability

00:06:13,120 --> 00:06:15,919
to manage the risk in our product

00:06:14,720 --> 00:06:19,360
development

00:06:15,919 --> 00:06:22,240
um as i explained before when we deploy

00:06:19,360 --> 00:06:23,440
an application in a safety critical

00:06:22,240 --> 00:06:26,560
application

00:06:23,440 --> 00:06:30,240
we have to be sure that we can evaluate

00:06:26,560 --> 00:06:34,880
and manage that risk and to ensure that

00:06:30,240 --> 00:06:37,919
we are well we have that well mapped and

00:06:34,880 --> 00:06:42,240
we define relevant mitigations for

00:06:37,919 --> 00:06:43,919
any anticipated risk and

00:06:42,240 --> 00:06:46,639
but on the other hand when we are using

00:06:43,919 --> 00:06:48,479
the linux as the foundation

00:06:46,639 --> 00:06:49,919
we have to really really understand the

00:06:48,479 --> 00:06:52,319
implications

00:06:49,919 --> 00:06:53,840
of what linux on the one hand is

00:06:52,319 --> 00:06:57,280
providing the power

00:06:53,840 --> 00:06:58,800
and the potential misuses or problems

00:06:57,280 --> 00:07:02,720
which can come up

00:06:58,800 --> 00:07:03,840
um because of the

00:07:02,720 --> 00:07:07,759
the different features the

00:07:03,840 --> 00:07:07,759
configurations the different um

00:07:08,400 --> 00:07:14,639
ways in which we interface with

00:07:12,160 --> 00:07:15,360
drivers hardware and other elements of

00:07:14,639 --> 00:07:19,280
the linux

00:07:15,360 --> 00:07:21,759
system so we need to be able to really

00:07:19,280 --> 00:07:25,520
understand where we're coming from

00:07:21,759 --> 00:07:29,599
what linux can provide for us

00:07:25,520 --> 00:07:31,759
to enhance the the safety of the system

00:07:29,599 --> 00:07:34,080
which we're trying to produce

00:07:31,759 --> 00:07:36,000
and we also need industry collaboration

00:07:34,080 --> 00:07:39,440
because if we're dealing with

00:07:36,000 --> 00:07:41,039
theory then um we're not really getting

00:07:39,440 --> 00:07:42,000
anywhere okay so we have to deal with

00:07:41,039 --> 00:07:45,520
practical

00:07:42,000 --> 00:07:49,039
real life um which have

00:07:45,520 --> 00:07:52,479
um a real business need and to see

00:07:49,039 --> 00:07:56,840
how we can actually use um

00:07:52,479 --> 00:07:59,280
linux as the operating system in such

00:07:56,840 --> 00:08:02,110
systems

00:07:59,280 --> 00:08:03,440
so um

00:08:02,110 --> 00:08:05,199
[Music]

00:08:03,440 --> 00:08:07,520
a summary of what the eliza mission

00:08:05,199 --> 00:08:09,759
statement is all about

00:08:07,520 --> 00:08:12,080
we want to define and maintain a common

00:08:09,759 --> 00:08:14,240
set of elements processes and tools

00:08:12,080 --> 00:08:16,240
that can be incorporated into specific

00:08:14,240 --> 00:08:18,720
linux-based safety-critical systems

00:08:16,240 --> 00:08:22,000
which will eventually be amenable to

00:08:18,720 --> 00:08:25,039
safety certification so if you see the

00:08:22,000 --> 00:08:25,039
mission statement here

00:08:25,440 --> 00:08:31,919
the real goal is to define different

00:08:28,879 --> 00:08:34,719
um software elements different processes

00:08:31,919 --> 00:08:38,159
tools anything that will help us

00:08:34,719 --> 00:08:39,200
um so that when we use those in an

00:08:38,159 --> 00:08:42,399
appropriate way

00:08:39,200 --> 00:08:42,959
in a specific context the resulting

00:08:42,399 --> 00:08:44,560
system

00:08:42,959 --> 00:08:46,800
will be more amenable to safety

00:08:44,560 --> 00:08:47,839
certification i'll go into a little

00:08:46,800 --> 00:08:50,320
detail later

00:08:47,839 --> 00:08:51,680
what we are not trying to do just one

00:08:50,320 --> 00:08:54,480
point i want to make clear

00:08:51,680 --> 00:08:55,680
right now we cannot provide and no one

00:08:54,480 --> 00:08:59,519
can do that

00:08:55,680 --> 00:09:01,440
a one size fits all linux kernel

00:08:59,519 --> 00:09:03,040
which is perfectly secure for any

00:09:01,440 --> 00:09:04,959
application

00:09:03,040 --> 00:09:06,800
okay anybody who is familiar with linux

00:09:04,959 --> 00:09:08,640
will understand that that

00:09:06,800 --> 00:09:09,920
that doesn't make sense even to try to

00:09:08,640 --> 00:09:12,959
go down that path

00:09:09,920 --> 00:09:13,760
what we do want to provide is a

00:09:12,959 --> 00:09:15,920
supportive

00:09:13,760 --> 00:09:17,200
infrastructure technical supportive

00:09:15,920 --> 00:09:19,760
infrastructure

00:09:17,200 --> 00:09:20,640
which will enable people who do want to

00:09:19,760 --> 00:09:22,640
develop

00:09:20,640 --> 00:09:23,920
linux-based systems for safety critical

00:09:22,640 --> 00:09:27,279
applications

00:09:23,920 --> 00:09:31,440
if they use those guidelines those tools

00:09:27,279 --> 00:09:34,640
actual kernel patches whatever it may be

00:09:31,440 --> 00:09:38,240
if they use them in the correct way

00:09:34,640 --> 00:09:41,200
they will then be able to um

00:09:38,240 --> 00:09:42,560
bring their product to be certified for

00:09:41,200 --> 00:09:46,160
for use in a safety

00:09:42,560 --> 00:09:48,240
critical context and we are working

00:09:46,160 --> 00:09:50,320
together with the linux foundation and

00:09:48,240 --> 00:09:51,680
with the different standards bodies to

00:09:50,320 --> 00:09:54,240
make sure

00:09:51,680 --> 00:09:54,880
that all of those elements each on its

00:09:54,240 --> 00:09:58,399
own

00:09:54,880 --> 00:10:01,360
bring us a bit closer to that goal

00:09:58,399 --> 00:10:02,240
but obviously that still leaves the

00:10:01,360 --> 00:10:05,120
choice

00:10:02,240 --> 00:10:05,920
the the integration the implementation

00:10:05,120 --> 00:10:09,200
up to the

00:10:05,920 --> 00:10:12,560
individual user and we cannot

00:10:09,200 --> 00:10:12,560
no um

00:10:12,959 --> 00:10:17,200
project or working group can possibly

00:10:15,680 --> 00:10:20,160
provide a single

00:10:17,200 --> 00:10:20,720
linux kernel which will be certified for

00:10:20,160 --> 00:10:23,519
use

00:10:20,720 --> 00:10:26,240
in all any or all safety critical

00:10:23,519 --> 00:10:26,240
applications

00:10:29,920 --> 00:10:32,959
okay so what are our goals i mean i

00:10:32,560 --> 00:10:34,880
think

00:10:32,959 --> 00:10:36,560
uh more or less it's what i've been

00:10:34,880 --> 00:10:38,560
talking about before

00:10:36,560 --> 00:10:39,839
we want to provide those basic building

00:10:38,560 --> 00:10:41,600
blocks

00:10:39,839 --> 00:10:43,200
we want to be able to find one of the

00:10:41,600 --> 00:10:43,600
things which we have been working on is

00:10:43,200 --> 00:10:45,920
what

00:10:43,600 --> 00:10:48,160
we call our reference process for safety

00:10:45,920 --> 00:10:51,200
assessment

00:10:48,160 --> 00:10:56,560
we found that for many reasons to take

00:10:51,200 --> 00:11:01,200
linux and to get that certified

00:10:56,560 --> 00:11:04,320
following the documents

00:11:01,200 --> 00:11:07,519
of the safety standards

00:11:04,320 --> 00:11:11,200
was was not possible for many reasons

00:11:07,519 --> 00:11:12,240
a because um different safety critical

00:11:11,200 --> 00:11:15,519
applications

00:11:12,240 --> 00:11:18,800
have to abide by different um

00:11:15,519 --> 00:11:20,959
standards and b because the language

00:11:18,800 --> 00:11:23,839
that's used there is not

00:11:20,959 --> 00:11:26,079
um so well understood by people who come

00:11:23,839 --> 00:11:29,839
from the linux background

00:11:26,079 --> 00:11:31,360
and also because um

00:11:29,839 --> 00:11:33,600
not all of those documents are

00:11:31,360 --> 00:11:35,040
accessible to everybody who comes from

00:11:33,600 --> 00:11:37,200
the linux community

00:11:35,040 --> 00:11:38,079
so the idea was to work together with

00:11:37,200 --> 00:11:40,640
the safety

00:11:38,079 --> 00:11:42,240
standards communities and to do that in

00:11:40,640 --> 00:11:46,160
two stages

00:11:42,240 --> 00:11:50,079
that on the one hand um to define

00:11:46,160 --> 00:11:53,040
a reference process as an intermediary

00:11:50,079 --> 00:11:53,680
step and then to have that reference

00:11:53,040 --> 00:11:56,040
process

00:11:53,680 --> 00:11:58,160
assessed and

00:11:56,040 --> 00:12:01,279
[Music]

00:11:58,160 --> 00:12:05,200
mapped onto one of the relevant

00:12:01,279 --> 00:12:07,360
safety standards so that the

00:12:05,200 --> 00:12:09,040
people who are working within linux when

00:12:07,360 --> 00:12:11,680
they want to define

00:12:09,040 --> 00:12:12,800
how they abide by the standards they can

00:12:11,680 --> 00:12:15,200
work

00:12:12,800 --> 00:12:16,079
with that reference process and then

00:12:15,200 --> 00:12:19,920
leave it to the

00:12:16,079 --> 00:12:21,360
safety experts to map

00:12:19,920 --> 00:12:23,440
what they are using and how they are

00:12:21,360 --> 00:12:27,360
doing it onto the

00:12:23,440 --> 00:12:30,560
original standards themselves

00:12:27,360 --> 00:12:34,000
um which is a process

00:12:30,560 --> 00:12:34,399
which hopefully will enable um everyone

00:12:34,000 --> 00:12:39,600
to

00:12:34,399 --> 00:12:41,440
focus on what they are best at doing

00:12:39,600 --> 00:12:43,279
um what we also want to do is to help

00:12:41,440 --> 00:12:45,279
support business entities

00:12:43,279 --> 00:12:47,600
in order to that they should be able to

00:12:45,279 --> 00:12:49,600
take the outputs of our projects

00:12:47,600 --> 00:12:51,040
the different tools guidelines processes

00:12:49,600 --> 00:12:54,320
whatever we define

00:12:51,040 --> 00:12:55,360
and use them package them implement them

00:12:54,320 --> 00:12:57,600
deploy them

00:12:55,360 --> 00:12:58,480
in their safety critical products and

00:12:57,600 --> 00:13:01,279
this is all about

00:12:58,480 --> 00:13:03,200
communication bridging the gap between

00:13:01,279 --> 00:13:06,160
all kinds of different communities

00:13:03,200 --> 00:13:07,440
all together working so that at the end

00:13:06,160 --> 00:13:09,600
of the day

00:13:07,440 --> 00:13:13,680
whatever we our work products that we

00:13:09,600 --> 00:13:13,680
produce will be acceptable by all

00:13:18,000 --> 00:13:21,200
okay how do we measure success i mean

00:13:19,839 --> 00:13:22,800
it's a bit early in the project but

00:13:21,200 --> 00:13:23,920
these are the standards which we defined

00:13:22,800 --> 00:13:25,600
for ourselves

00:13:23,920 --> 00:13:27,760
and as i said before we're still a bit

00:13:25,600 --> 00:13:29,760
of a

00:13:27,760 --> 00:13:32,160
startup mode but we we do have some

00:13:29,760 --> 00:13:34,000
preliminary results so the first thing

00:13:32,160 --> 00:13:35,360
what we want to do is to have actual

00:13:34,000 --> 00:13:38,399
tangible delivery

00:13:35,360 --> 00:13:39,040
the deliverables okay we want to focus

00:13:38,399 --> 00:13:40,800
on certain

00:13:39,040 --> 00:13:42,560
we are doing that already and i'll go

00:13:40,800 --> 00:13:44,720
into details soon into some of the

00:13:42,560 --> 00:13:47,120
workbooks which are set up and working

00:13:44,720 --> 00:13:49,519
but we want to define identify which

00:13:47,120 --> 00:13:52,720
kernel features are most relevant

00:13:49,519 --> 00:13:55,519
for safety assessment which tools we

00:13:52,720 --> 00:13:59,680
want to develop to be able to help us

00:13:55,519 --> 00:14:01,440
in that to that goal and

00:13:59,680 --> 00:14:02,720
we want we are keeping track of work

00:14:01,440 --> 00:14:05,519
that's being done

00:14:02,720 --> 00:14:06,240
on different use cases so that those

00:14:05,519 --> 00:14:10,480
will be

00:14:06,240 --> 00:14:12,959
established as examples for future

00:14:10,480 --> 00:14:13,680
work as well okay what i mentioned

00:14:12,959 --> 00:14:16,720
before

00:14:13,680 --> 00:14:17,600
defining that reference process which is

00:14:16,720 --> 00:14:20,560
an ongoing

00:14:17,600 --> 00:14:22,880
project we want that it should be usable

00:14:20,560 --> 00:14:28,639
maintainable um easy to maintain that

00:14:22,880 --> 00:14:31,279
if that a product that is developed

00:14:28,639 --> 00:14:32,480
and is proven to be safety critical we

00:14:31,279 --> 00:14:35,680
can maintain that

00:14:32,480 --> 00:14:37,120
over its lifetime it has to be accepted

00:14:35,680 --> 00:14:38,720
this is a very important point by

00:14:37,120 --> 00:14:41,920
everybody involved because

00:14:38,720 --> 00:14:43,839
i mean we can say that we love linux

00:14:41,920 --> 00:14:45,120
and that we appreciate its features and

00:14:43,839 --> 00:14:46,639
how it works but

00:14:45,120 --> 00:14:49,360
we need that it should be accepted by

00:14:46,639 --> 00:14:51,519
the safety community as well

00:14:49,360 --> 00:14:53,040
okay and at the other end of the

00:14:51,519 --> 00:14:54,560
spectrum we have to get the hardware

00:14:53,040 --> 00:14:57,360
support from the

00:14:54,560 --> 00:14:58,480
underlying hardware to make sure that

00:14:57,360 --> 00:15:00,639
whatever we define

00:14:58,480 --> 00:15:01,760
actually is feasible and can be

00:15:00,639 --> 00:15:04,880
implemented

00:15:01,760 --> 00:15:07,040
on any relevant platform okay so there

00:15:04,880 --> 00:15:07,760
are many goals here which all work

00:15:07,040 --> 00:15:10,639
together

00:15:07,760 --> 00:15:11,519
and as i said before i don't think we'll

00:15:10,639 --> 00:15:14,959
end up with a

00:15:11,519 --> 00:15:17,360
complete perfect one-size-fits-all

00:15:14,959 --> 00:15:18,639
solution or anything near that but we do

00:15:17,360 --> 00:15:21,199
want to help

00:15:18,639 --> 00:15:22,639
um so that business entities can come

00:15:21,199 --> 00:15:26,800
much closer

00:15:22,639 --> 00:15:29,920
um to that goal than is possible today

00:15:26,800 --> 00:15:32,079
okay what are the limits okay we

00:15:29,920 --> 00:15:34,160
we certainly will not engineer your

00:15:32,079 --> 00:15:36,079
system for you to be safe

00:15:34,160 --> 00:15:37,360
and we cannot ensure that you will do it

00:15:36,079 --> 00:15:39,759
properly

00:15:37,360 --> 00:15:41,440
and we won't create a single out of

00:15:39,759 --> 00:15:43,600
three

00:15:41,440 --> 00:15:46,240
linux kernel that you just have to plug

00:15:43,600 --> 00:15:47,680
in for your safety critical applications

00:15:46,240 --> 00:15:49,920
and obviously you have your own

00:15:47,680 --> 00:15:50,959
responsibilities legal obligations and

00:15:49,920 --> 00:15:54,079
liabilities

00:15:50,959 --> 00:15:55,759
to implement things appropriately but

00:15:54,079 --> 00:15:58,160
we certainly want to provide a path

00:15:55,759 --> 00:16:01,920
forward and do that in some way that

00:15:58,160 --> 00:16:01,920
linux works by collaboration

00:16:03,040 --> 00:16:09,120
okay if there's any questions bring them

00:16:06,000 --> 00:16:11,920
up in the chat

00:16:09,120 --> 00:16:11,920
look out for that

00:16:13,600 --> 00:16:21,120
okay now um currently we have

00:16:17,040 --> 00:16:25,759
three work groups um with the fourth one

00:16:21,120 --> 00:16:25,759
um which was just born last week

00:16:26,480 --> 00:16:31,040
and this is where um i'm opening this to

00:16:30,079 --> 00:16:32,959
the public

00:16:31,040 --> 00:16:35,120
if anybody wants to they can contact me

00:16:32,959 --> 00:16:36,639
afterwards see how they can get involved

00:16:35,120 --> 00:16:38,959
see where they can contribute see what

00:16:36,639 --> 00:16:40,320
they can gain from this collaboration

00:16:38,959 --> 00:16:41,199
and that's what i'm really looking for

00:16:40,320 --> 00:16:45,440
here

00:16:41,199 --> 00:16:49,199
um so that we can

00:16:45,440 --> 00:16:52,480
um have more uh

00:16:49,199 --> 00:16:55,680
a more uh a more

00:16:52,480 --> 00:16:57,519
representative set of contributors so

00:16:55,680 --> 00:17:01,600
that we can actually work

00:16:57,519 --> 00:17:05,600
better and and and get better results

00:17:01,600 --> 00:17:07,280
okay um

00:17:05,600 --> 00:17:09,120
the the work groups here are not listed

00:17:07,280 --> 00:17:10,480
in chronological order but whatever one

00:17:09,120 --> 00:17:12,160
work group which we have is called the

00:17:10,480 --> 00:17:14,480
kernel development process

00:17:12,160 --> 00:17:15,439
work group this work was really started

00:17:14,480 --> 00:17:17,199
because one of

00:17:15,439 --> 00:17:19,120
based on one of the bullets which had i

00:17:17,199 --> 00:17:22,319
think on the second slide

00:17:19,120 --> 00:17:24,480
um in the past there was this um

00:17:22,319 --> 00:17:27,960
[Music]

00:17:24,480 --> 00:17:32,880
concept of linux as a

00:17:27,960 --> 00:17:35,360
non-secured a non-safe non-uh

00:17:32,880 --> 00:17:36,320
with um software products which was

00:17:35,360 --> 00:17:39,120
developed by

00:17:36,320 --> 00:17:40,000
people who didn't follow any process who

00:17:39,120 --> 00:17:42,400
couldn't

00:17:40,000 --> 00:17:43,039
make any clear statements about the

00:17:42,400 --> 00:17:46,240
quality

00:17:43,039 --> 00:17:51,120
or the or the or even the

00:17:46,240 --> 00:17:51,120
requirements architecture um

00:17:52,000 --> 00:17:55,440
test coverage anything like that nothing

00:17:54,720 --> 00:17:58,320
could be

00:17:55,440 --> 00:18:00,000
well documented documented and proven

00:17:58,320 --> 00:18:03,039
about linux

00:18:00,000 --> 00:18:04,160
so i think anybody who works with linux

00:18:03,039 --> 00:18:07,120
realizes

00:18:04,160 --> 00:18:08,559
that there's a lot of power in linux

00:18:07,120 --> 00:18:10,160
there's a lot of power in the linux

00:18:08,559 --> 00:18:12,000
development process

00:18:10,160 --> 00:18:13,280
it just works in a very different way

00:18:12,000 --> 00:18:15,679
than the

00:18:13,280 --> 00:18:17,200
pretty much waterfall type of of

00:18:15,679 --> 00:18:20,720
execution flow

00:18:17,200 --> 00:18:23,919
that we see in or that is expected

00:18:20,720 --> 00:18:27,039
by from the safety standards so

00:18:23,919 --> 00:18:30,559
basically what we are trying to do is to

00:18:27,039 --> 00:18:32,320
assess um the kernel development process

00:18:30,559 --> 00:18:34,880
this is this is a process which took

00:18:32,320 --> 00:18:37,200
about six months and a lot of work

00:18:34,880 --> 00:18:38,480
was done here and together with the

00:18:37,200 --> 00:18:42,559
safety community

00:18:38,480 --> 00:18:46,080
to prove um what actually i called

00:18:42,559 --> 00:18:46,400
um you know the the the uh bringing out

00:18:46,080 --> 00:18:49,360
the

00:18:46,400 --> 00:18:50,160
the good in in linux demonstrating that

00:18:49,360 --> 00:18:53,039
there are many

00:18:50,160 --> 00:18:54,799
aspects and we'll see in the next slide

00:18:53,039 --> 00:18:57,520
or whatever soon we'll see

00:18:54,799 --> 00:18:58,720
some examples we analyzed based on the

00:18:57,520 --> 00:19:03,280
common

00:18:58,720 --> 00:19:05,679
linux stand um safety standards

00:19:03,280 --> 00:19:07,200
and our reference process we divided the

00:19:05,679 --> 00:19:08,559
kernel development process into

00:19:07,200 --> 00:19:10,960
different categories

00:19:08,559 --> 00:19:12,240
and we're able to assess what is

00:19:10,960 --> 00:19:14,400
currently done

00:19:12,240 --> 00:19:15,919
to develop linux even if it works

00:19:14,400 --> 00:19:18,160
differently

00:19:15,919 --> 00:19:19,120
than how the the safety aspect is

00:19:18,160 --> 00:19:22,400
expected

00:19:19,120 --> 00:19:24,240
to demonstrate that it it we do have

00:19:22,400 --> 00:19:26,720
that quality which is built in

00:19:24,240 --> 00:19:28,240
we have the power of the peer review we

00:19:26,720 --> 00:19:31,360
have the power

00:19:28,240 --> 00:19:32,960
of the of of um

00:19:31,360 --> 00:19:35,200
mailing lists how people communicate

00:19:32,960 --> 00:19:38,320
together how the release process

00:19:35,200 --> 00:19:41,200
how things work in linux development

00:19:38,320 --> 00:19:42,720
to demonstrate that there is actually

00:19:41,200 --> 00:19:45,840
method

00:19:42,720 --> 00:19:48,799
a strong methodology in the way um

00:19:45,840 --> 00:19:50,480
linux is developed at the same time

00:19:48,799 --> 00:19:52,240
however obviously we found that there

00:19:50,480 --> 00:19:54,400
were some

00:19:52,240 --> 00:19:55,679
major gaps which were exposed and we'll

00:19:54,400 --> 00:19:57,200
go into that soon

00:19:55,679 --> 00:19:59,520
but one of the important things which

00:19:57,200 --> 00:20:00,880
we're working on now are trying to fill

00:19:59,520 --> 00:20:03,679
in those gaps

00:20:00,880 --> 00:20:04,880
so that we bring linux closer to

00:20:03,679 --> 00:20:06,640
acceptance

00:20:04,880 --> 00:20:08,159
for usage in safety critical

00:20:06,640 --> 00:20:09,679
applications and we are working on

00:20:08,159 --> 00:20:12,720
different areas

00:20:09,679 --> 00:20:15,039
to fill in those gaps we have identified

00:20:12,720 --> 00:20:17,760
five areas which are currently

00:20:15,039 --> 00:20:21,039
in high focus and with time we hope to

00:20:17,760 --> 00:20:23,200
to cover more

00:20:21,039 --> 00:20:24,240
a second group is is the kernel

00:20:23,200 --> 00:20:25,840
development process

00:20:24,240 --> 00:20:27,280
is really dealing with the nuts and

00:20:25,840 --> 00:20:30,559
bolts of

00:20:27,280 --> 00:20:35,840
of linux as a software component

00:20:30,559 --> 00:20:35,840
the different features um

00:20:35,919 --> 00:20:40,880
the um

00:20:39,200 --> 00:20:42,880
another work group which we have is

00:20:40,880 --> 00:20:44,720
called the architecture

00:20:42,880 --> 00:20:46,960
process work group which takes things

00:20:44,720 --> 00:20:50,559
takes things up on a higher level

00:20:46,960 --> 00:20:54,080
and it looks at the architecture

00:20:50,559 --> 00:20:56,159
of linux again as a software product

00:20:54,080 --> 00:20:58,000
and it divides it up into what they call

00:20:56,159 --> 00:21:00,960
chunks the lack of a better

00:20:58,000 --> 00:21:01,520
term it's not really components it's not

00:21:00,960 --> 00:21:04,559
features

00:21:01,520 --> 00:21:05,440
it's different areas for example memory

00:21:04,559 --> 00:21:08,080
management

00:21:05,440 --> 00:21:08,720
or schedule those are two areas which

00:21:08,080 --> 00:21:12,240
are very

00:21:08,720 --> 00:21:14,320
focused for safety analysis and

00:21:12,240 --> 00:21:17,360
um what they're basically trying to do

00:21:14,320 --> 00:21:23,200
there is do this meta-analysis of safety

00:21:17,360 --> 00:21:23,200
and to help um people to understand

00:21:23,360 --> 00:21:31,039
how they can take those

00:21:27,280 --> 00:21:34,640
different areas and

00:21:31,039 --> 00:21:38,799
implement let's say for example memory

00:21:34,640 --> 00:21:41,600
management in a specific use case

00:21:38,799 --> 00:21:43,120
um in a specific on specific hardware

00:21:41,600 --> 00:21:46,559
platform

00:21:43,120 --> 00:21:47,440
based on features which exist already in

00:21:46,559 --> 00:21:50,400
linux and

00:21:47,440 --> 00:21:52,320
features which may need to be added okay

00:21:50,400 --> 00:21:54,720
so that's the focus of the architecture

00:21:52,320 --> 00:21:56,159
process for group which basically takes

00:21:54,720 --> 00:21:56,480
similar to the work which we're doing in

00:21:56,159 --> 00:21:58,080
the

00:21:56,480 --> 00:22:00,000
kernel development process worker but

00:21:58,080 --> 00:22:00,720
takes that up more on an architecture

00:22:00,000 --> 00:22:03,120
level

00:22:00,720 --> 00:22:04,240
we take into account interactions with

00:22:03,120 --> 00:22:07,679
other software and

00:22:04,240 --> 00:22:09,919
hardware components within a specific

00:22:07,679 --> 00:22:12,960
use case

00:22:09,919 --> 00:22:14,320
um the focus here was on various use

00:22:12,960 --> 00:22:19,200
cases but because

00:22:14,320 --> 00:22:19,200
of the the current um

00:22:19,440 --> 00:22:23,280
set of contributors i mean we're we're

00:22:22,240 --> 00:22:24,559
pretty much

00:22:23,280 --> 00:22:27,360
a lot of us are coming from the

00:22:24,559 --> 00:22:27,840
automotive domain so that and we ended

00:22:27,360 --> 00:22:29,440
up

00:22:27,840 --> 00:22:31,840
splitting this into a separate

00:22:29,440 --> 00:22:34,880
automotive work group which will focus

00:22:31,840 --> 00:22:37,440
on features and safety features

00:22:34,880 --> 00:22:38,880
and enhancements and what can be done

00:22:37,440 --> 00:22:44,159
specifically

00:22:38,880 --> 00:22:44,159
to meet the requirements for um

00:22:44,320 --> 00:22:47,440
software products in the automotive

00:22:46,080 --> 00:22:48,720
domain

00:22:47,440 --> 00:22:50,799
and that's that's the new grouped

00:22:48,720 --> 00:22:54,559
automotive work group which was just

00:22:50,799 --> 00:22:54,960
created last week and um that work group

00:22:54,559 --> 00:22:58,000
will do

00:22:54,960 --> 00:22:59,600
similar work but focused primarily on

00:22:58,000 --> 00:23:01,520
the automotive domain

00:22:59,600 --> 00:23:04,000
and we have representatives there from

00:23:01,520 --> 00:23:08,480
agl if people are familiar with that

00:23:04,000 --> 00:23:11,760
um and other um um

00:23:08,480 --> 00:23:13,280
major car manufacturers etc working

00:23:11,760 --> 00:23:14,960
together to try to

00:23:13,280 --> 00:23:16,400
define relevant solutions because

00:23:14,960 --> 00:23:17,200
there's a lot of pressure to be able to

00:23:16,400 --> 00:23:21,520
use

00:23:17,200 --> 00:23:23,520
linux in automotive applications

00:23:21,520 --> 00:23:26,159
and the third group working group which

00:23:23,520 --> 00:23:30,240
is actually was the first one

00:23:26,159 --> 00:23:31,360
um the third group which is actually the

00:23:30,240 --> 00:23:33,760
first one

00:23:31,360 --> 00:23:35,520
is the what's the name has been changed

00:23:33,760 --> 00:23:37,360
to the medical devices

00:23:35,520 --> 00:23:38,799
were group and i guess this is in the

00:23:37,360 --> 00:23:40,880
spirit of the times

00:23:38,799 --> 00:23:42,480
it originally started off um this was

00:23:40,880 --> 00:23:43,440
the first woo group it was really sort

00:23:42,480 --> 00:23:47,120
of as a

00:23:43,440 --> 00:23:49,919
as a brainstorming type of um

00:23:47,120 --> 00:23:51,039
first use case um there was a system

00:23:49,919 --> 00:23:53,760
called the open aps

00:23:51,039 --> 00:23:54,799
artificial pancreas system which is was

00:23:53,760 --> 00:23:57,840
open source

00:23:54,799 --> 00:24:01,600
to use to monitor um glucose

00:23:57,840 --> 00:24:05,200
for diabetics and whatever

00:24:01,600 --> 00:24:08,480
but um and i'll have some slides on that

00:24:05,200 --> 00:24:12,080
afterwards um because of the pressure to

00:24:08,480 --> 00:24:15,360
produce um increase the production of

00:24:12,080 --> 00:24:18,880
ventilators due to the um

00:24:15,360 --> 00:24:20,720
corona crisis ongoing so um there's

00:24:18,880 --> 00:24:23,200
pressure to

00:24:20,720 --> 00:24:25,120
develop open source ventilator systems

00:24:23,200 --> 00:24:28,130
but obviously ventilators

00:24:25,120 --> 00:24:30,320
are very face-to-critical systems um

00:24:28,130 --> 00:24:34,080
[Music]

00:24:30,320 --> 00:24:36,000
which are you know life-threatening if

00:24:34,080 --> 00:24:37,679
there's some malfunction which is not

00:24:36,000 --> 00:24:39,210
properly managed

00:24:37,679 --> 00:24:42,000
so um

00:24:39,210 --> 00:24:45,919
[Music]

00:24:42,000 --> 00:24:46,880
um so it's expanded rather than focusing

00:24:45,919 --> 00:24:49,440
only on the

00:24:46,880 --> 00:24:51,360
open apis it's also expanding into other

00:24:49,440 --> 00:24:53,200
areas of medical devices

00:24:51,360 --> 00:24:55,120
okay there are two questions i'll answer

00:24:53,200 --> 00:24:57,679
my contact information

00:24:55,120 --> 00:24:59,919
um i'll share it i guess at the end i

00:24:57,679 --> 00:25:01,200
don't think it's on my slides but i i

00:24:59,919 --> 00:25:04,240
thought that

00:25:01,200 --> 00:25:06,640
in the system for the conference so

00:25:04,240 --> 00:25:08,640
amelia maybe can help me with that or i

00:25:06,640 --> 00:25:12,559
know maybe i'll put it in the chat

00:25:08,640 --> 00:25:14,960
and um also um definitely

00:25:12,559 --> 00:25:16,559
we are open to any use cases these are

00:25:14,960 --> 00:25:18,000
currently the use cases

00:25:16,559 --> 00:25:20,480
there's another question about

00:25:18,000 --> 00:25:22,559
industrial real-time use cases

00:25:20,480 --> 00:25:24,880
um there is interest we just don't have

00:25:22,559 --> 00:25:27,039
people who are are there to

00:25:24,880 --> 00:25:28,960
to pick it up and and take it and to

00:25:27,039 --> 00:25:29,440
lead the effort definitely those are of

00:25:28,960 --> 00:25:32,240
interest

00:25:29,440 --> 00:25:33,840
they're important and we need more

00:25:32,240 --> 00:25:37,600
contributors

00:25:33,840 --> 00:25:38,799
okay so definitely they are related and

00:25:37,600 --> 00:25:41,840
the groups

00:25:38,799 --> 00:25:43,840
all should and will be working together

00:25:41,840 --> 00:25:44,960
with the same common goals but each one

00:25:43,840 --> 00:25:47,520
focusing on

00:25:44,960 --> 00:25:48,799
obviously different safety standards and

00:25:47,520 --> 00:25:53,919
different specific

00:25:48,799 --> 00:25:53,919
um risks and and focal points

00:25:55,279 --> 00:25:58,400
okay so going back to what i said about

00:25:57,039 --> 00:26:01,600
the kernel development

00:25:58,400 --> 00:26:02,880
process work group um i think i'll go

00:26:01,600 --> 00:26:04,640
quickly over this because i think i more

00:26:02,880 --> 00:26:08,080
or less gave the background

00:26:04,640 --> 00:26:09,279
um in my speaking my work has been

00:26:08,080 --> 00:26:11,360
divided into two

00:26:09,279 --> 00:26:13,679
phases first we defined this working

00:26:11,360 --> 00:26:16,799
reference process it took quite a while

00:26:13,679 --> 00:26:18,000
because like i said um you know about

00:26:16,799 --> 00:26:19,360
bridging the gap

00:26:18,000 --> 00:26:21,440
we're dealing with two very very

00:26:19,360 --> 00:26:25,279
different kinds of communities

00:26:21,440 --> 00:26:25,679
and um at times the communication can be

00:26:25,279 --> 00:26:27,919
a bit

00:26:25,679 --> 00:26:27,919
um

00:26:29,440 --> 00:26:32,799
noisy let's call it but all in good

00:26:31,919 --> 00:26:35,039
spirits

00:26:32,799 --> 00:26:36,080
and the point really is that we want to

00:26:35,039 --> 00:26:38,080
develop

00:26:36,080 --> 00:26:39,360
this reference process to make it easier

00:26:38,080 --> 00:26:43,840
to communicate

00:26:39,360 --> 00:26:47,279
okay because people who are um

00:26:43,840 --> 00:26:49,279
kernel developers or develop software

00:26:47,279 --> 00:26:50,480
or software architects or whatever it

00:26:49,279 --> 00:26:53,520
may be or

00:26:50,480 --> 00:26:55,360
or who develop drivers um that are not

00:26:53,520 --> 00:26:55,760
really familiar with the bits and bytes

00:26:55,360 --> 00:26:57,600
of

00:26:55,760 --> 00:26:58,799
safety standards it's a little bit hard

00:26:57,600 --> 00:27:01,279
for them to

00:26:58,799 --> 00:27:03,760
to deal with the legal terminology and

00:27:01,279 --> 00:27:06,400
the reference process was very helpful

00:27:03,760 --> 00:27:08,080
to again to bridge that cap i want to

00:27:06,400 --> 00:27:08,559
emphasize again that they're not in

00:27:08,080 --> 00:27:11,520
place

00:27:08,559 --> 00:27:12,000
of safety standards it leads the work of

00:27:11,520 --> 00:27:15,279
of

00:27:12,000 --> 00:27:18,480
having that reference process um

00:27:15,279 --> 00:27:19,600
assessed and accepted um as a second

00:27:18,480 --> 00:27:21,039
stage but

00:27:19,600 --> 00:27:23,120
that we've been working with the

00:27:21,039 --> 00:27:25,919
different standards communities to

00:27:23,120 --> 00:27:28,320
to to help ease that process as well

00:27:25,919 --> 00:27:31,679
okay because it's done in in a misada

00:27:28,320 --> 00:27:33,760
method methodical way which which

00:27:31,679 --> 00:27:34,960
helped for the communication on both

00:27:33,760 --> 00:27:37,600
sides

00:27:34,960 --> 00:27:39,039
okay but as doing the in doing the

00:27:37,600 --> 00:27:40,240
assessment we found that there are

00:27:39,039 --> 00:27:43,840
certain gaps

00:27:40,240 --> 00:27:46,000
and for each of those gaps we can say

00:27:43,840 --> 00:27:46,960
okay well for example in the automotive

00:27:46,000 --> 00:27:50,159
domain from which i'm

00:27:46,960 --> 00:27:52,159
coming those gaps are not relevant and

00:27:50,159 --> 00:27:56,080
we we don't have to deal with them

00:27:52,159 --> 00:27:59,760
or we can provide mitigation mitigations

00:27:56,080 --> 00:28:02,559
which are relevant um and ins which are

00:27:59,760 --> 00:28:05,039
specific to the use case and we

00:28:02,559 --> 00:28:06,559
um and the other the final option might

00:28:05,039 --> 00:28:08,720
be to

00:28:06,559 --> 00:28:10,720
um to work within the community to

00:28:08,720 --> 00:28:15,039
promote change

00:28:10,720 --> 00:28:18,159
to get support to add features

00:28:15,039 --> 00:28:20,880
which are relevant both um

00:28:18,159 --> 00:28:23,039
in that particular specific use case and

00:28:20,880 --> 00:28:24,720
in the more general domain

00:28:23,039 --> 00:28:26,720
and basically what we're aiming for is

00:28:24,720 --> 00:28:28,840
really to promote linux as a viable

00:28:26,720 --> 00:28:30,240
candidate for use in safety critical

00:28:28,840 --> 00:28:31,679
applications um

00:28:30,240 --> 00:28:33,840
you can hear different points of view

00:28:31,679 --> 00:28:37,279
and certainly when we started this work

00:28:33,840 --> 00:28:38,880
the attitude was no way linux and safety

00:28:37,279 --> 00:28:40,080
critical applications are totally

00:28:38,880 --> 00:28:42,399
foreign to each other

00:28:40,080 --> 00:28:44,880
there's no way that we can get that

00:28:42,399 --> 00:28:46,799
linux to be approved but slowly we are

00:28:44,880 --> 00:28:48,480
trying to bring the gap bridge that gap

00:28:46,799 --> 00:28:49,840
and bring the two sides closer to each

00:28:48,480 --> 00:28:53,840
other

00:28:49,840 --> 00:28:53,840
okay um

00:28:56,799 --> 00:29:00,240
sorry that's a bit of delay

00:29:01,440 --> 00:29:04,960
wow okay i have color markings on this

00:29:03,600 --> 00:29:06,960
and i see them on the bottom but now i

00:29:04,960 --> 00:29:10,159
see they don't show up so

00:29:06,960 --> 00:29:13,279
i'll tell you what's color coded

00:29:10,159 --> 00:29:14,000
nope don't see it interesting okay

00:29:13,279 --> 00:29:16,720
anyway

00:29:14,000 --> 00:29:17,919
um this was the list of areas which we

00:29:16,720 --> 00:29:21,279
analyzed

00:29:17,919 --> 00:29:23,600
based on the reference process and

00:29:21,279 --> 00:29:25,360
um some of these areas for example

00:29:23,600 --> 00:29:28,480
change configuration management

00:29:25,360 --> 00:29:31,279
that's well managed by um

00:29:28,480 --> 00:29:33,120
by the linux development process so

00:29:31,279 --> 00:29:35,360
there wasn't anything really major to

00:29:33,120 --> 00:29:37,860
discuss

00:29:35,360 --> 00:29:39,200
relating to gaps where we

00:29:37,860 --> 00:29:42,960
[Music]

00:29:39,200 --> 00:29:45,200
did have um we did identify

00:29:42,960 --> 00:29:46,480
uh more major gaps which we need to deal

00:29:45,200 --> 00:29:48,640
with are

00:29:46,480 --> 00:29:51,440
and again if you'll get a copy of these

00:29:48,640 --> 00:29:53,600
slides you'll see they're color-coded in

00:29:51,440 --> 00:29:55,039
yellow but okay i'll just have to tell

00:29:53,600 --> 00:29:58,320
you where they are

00:29:55,039 --> 00:30:00,640
requirements definition um

00:29:58,320 --> 00:30:01,600
obviously linux kernel developers don't

00:30:00,640 --> 00:30:04,559
have

00:30:01,600 --> 00:30:06,159
any formal process for defining

00:30:04,559 --> 00:30:09,200
requirements

00:30:06,159 --> 00:30:11,120
um static analysis there's some ongoing

00:30:09,200 --> 00:30:13,200
work but it's not a requirement

00:30:11,120 --> 00:30:14,480
we don't get full coverage there isn't a

00:30:13,200 --> 00:30:16,559
single tool

00:30:14,480 --> 00:30:17,600
but there's a lot of great ongoing work

00:30:16,559 --> 00:30:21,360
which

00:30:17,600 --> 00:30:25,200
can be expanded kernel testing similarly

00:30:21,360 --> 00:30:28,559
there's linux has come a long way

00:30:25,200 --> 00:30:31,919
and there is a lot more available

00:30:28,559 --> 00:30:32,799
tools which can be used and which are

00:30:31,919 --> 00:30:34,640
being used

00:30:32,799 --> 00:30:36,000
and which are being enhanced all the

00:30:34,640 --> 00:30:39,440
time to ensure

00:30:36,000 --> 00:30:41,200
the quality of the the code that's being

00:30:39,440 --> 00:30:46,320
developed but for obvious reasons

00:30:41,200 --> 00:30:46,320
i mean the the um

00:30:46,559 --> 00:30:50,159
the maintainers have their own

00:30:48,320 --> 00:30:52,240
responsibilities for the quality of the

00:30:50,159 --> 00:30:56,159
code and they want to be sure

00:30:52,240 --> 00:30:58,640
that there's no regressions when they

00:30:56,159 --> 00:30:59,600
or or minimize the risk of regression

00:30:58,640 --> 00:31:02,640
when they

00:30:59,600 --> 00:31:03,440
release code because of the volume of

00:31:02,640 --> 00:31:06,159
users

00:31:03,440 --> 00:31:07,039
and the volume of the different

00:31:06,159 --> 00:31:10,159
applications

00:31:07,039 --> 00:31:13,200
and um so there's a lot of work that's

00:31:10,159 --> 00:31:15,360
ongoing there um the fourth area on

00:31:13,200 --> 00:31:18,159
which we're focused right now

00:31:15,360 --> 00:31:18,960
is the the build process how we

00:31:18,159 --> 00:31:20,770
configure

00:31:18,960 --> 00:31:23,039
um um

00:31:20,770 --> 00:31:26,240
[Music]

00:31:23,039 --> 00:31:27,840
how we configure the the kernel

00:31:26,240 --> 00:31:29,840
to be used in a safety critical

00:31:27,840 --> 00:31:30,640
application what type of criteria do we

00:31:29,840 --> 00:31:34,080
use

00:31:30,640 --> 00:31:35,840
to um to decide

00:31:34,080 --> 00:31:37,440
which features will go in and which

00:31:35,840 --> 00:31:41,440
won't and

00:31:37,440 --> 00:31:43,440
um et cetera okay we'll have the next

00:31:41,440 --> 00:31:46,559
slide we'll go into some more details

00:31:43,440 --> 00:31:48,399
and the final area is how we introduce

00:31:46,559 --> 00:31:52,080
new features and patches

00:31:48,399 --> 00:31:53,600
um both as safety mechanisms to deal

00:31:52,080 --> 00:31:56,240
with safety issues

00:31:53,600 --> 00:31:57,440
and in general if we want to introduce

00:31:56,240 --> 00:32:01,120
new features

00:31:57,440 --> 00:32:04,799
how we get them um assessed

00:32:01,120 --> 00:32:07,600
approved and released to to

00:32:04,799 --> 00:32:09,679
um meet the functional crimes which you

00:32:07,600 --> 00:32:11,519
might have in a particular use case

00:32:09,679 --> 00:32:14,000
and to do that in a way which is

00:32:11,519 --> 00:32:14,960
acceptable by the safety standards so

00:32:14,000 --> 00:32:17,919
those are the five

00:32:14,960 --> 00:32:18,559
focal areas on which we are working

00:32:17,919 --> 00:32:22,159
right now

00:32:18,559 --> 00:32:25,039
in this group okay so the first area was

00:32:22,159 --> 00:32:26,799
defining some kind of umbrella criteria

00:32:25,039 --> 00:32:28,640
similar to what we see in security what

00:32:26,799 --> 00:32:32,159
we would call bug classes

00:32:28,640 --> 00:32:35,600
so in a similar way to define

00:32:32,159 --> 00:32:38,240
um what are the criteria for a safe

00:32:35,600 --> 00:32:40,000
uh linux release safe it's written with

00:32:38,240 --> 00:32:41,600
double quotes because it's not going to

00:32:40,000 --> 00:32:43,679
be really a safe linux

00:32:41,600 --> 00:32:45,120
but it's basically criteria for

00:32:43,679 --> 00:32:47,919
assessing the

00:32:45,120 --> 00:32:49,440
safety level or um the safety quality

00:32:47,919 --> 00:32:52,720
let's call it of

00:32:49,440 --> 00:32:54,840
of our kernel image which we're using in

00:32:52,720 --> 00:32:56,640
a particular

00:32:54,840 --> 00:32:59,840
application

00:32:56,640 --> 00:33:00,960
okay um so for example um i gave a list

00:32:59,840 --> 00:33:04,080
here of

00:33:00,960 --> 00:33:05,919
of different um kernel

00:33:04,080 --> 00:33:08,840
configurations which we are currently

00:33:05,919 --> 00:33:12,320
assessing for use in safety application

00:33:08,840 --> 00:33:15,440
focused on memory protection this is an

00:33:12,320 --> 00:33:17,519
ongoing work so this is not a finalist

00:33:15,440 --> 00:33:19,200
which is going to be deployed but

00:33:17,519 --> 00:33:22,399
basically to try to

00:33:19,200 --> 00:33:22,399
assess each of these

00:33:22,720 --> 00:33:26,960
kernel configurations to unders to be

00:33:25,840 --> 00:33:30,559
able to define

00:33:26,960 --> 00:33:34,399
in terminology which is relevant for

00:33:30,559 --> 00:33:37,679
safety assessment what the expected

00:33:34,399 --> 00:33:40,159
value added value for any particular

00:33:37,679 --> 00:33:44,399
kernel configuration may be

00:33:40,159 --> 00:33:46,720
and perhaps warnings caveats

00:33:44,399 --> 00:33:48,320
when it's less relevant more relevant

00:33:46,720 --> 00:33:49,120
for example if there's a performance

00:33:48,320 --> 00:33:51,279
impact

00:33:49,120 --> 00:33:52,240
or if there are certain functional

00:33:51,279 --> 00:33:56,559
requirements

00:33:52,240 --> 00:33:59,360
which contra are contrary

00:33:56,559 --> 00:34:00,880
contrary to the use of any specific

00:33:59,360 --> 00:34:04,080
configuration

00:34:00,880 --> 00:34:06,000
okay the last line we talked um is about

00:34:04,080 --> 00:34:07,840
freedom from interference which is a

00:34:06,000 --> 00:34:10,240
common term used in the automotive

00:34:07,840 --> 00:34:12,240
safety domain we want to ensure

00:34:10,240 --> 00:34:14,480
that if you have a software component

00:34:12,240 --> 00:34:17,520
which we have tested and proven

00:34:14,480 --> 00:34:21,200
um in a standalone way that it

00:34:17,520 --> 00:34:22,240
it satisfy certain requirements provide

00:34:21,200 --> 00:34:24,320
certain results

00:34:22,240 --> 00:34:25,440
give a certain level of quality we want

00:34:24,320 --> 00:34:28,879
to be sure

00:34:25,440 --> 00:34:30,800
that we have um that it won't be

00:34:28,879 --> 00:34:32,639
impacted in any way

00:34:30,800 --> 00:34:34,079
and i won't go into details of that but

00:34:32,639 --> 00:34:36,399
it won't be impacted by any

00:34:34,079 --> 00:34:38,159
other software or harder component which

00:34:36,399 --> 00:34:41,200
will interfere

00:34:38,159 --> 00:34:42,800
um with how we expect it to work okay

00:34:41,200 --> 00:34:43,280
and again here are some examples and

00:34:42,800 --> 00:34:46,079
again

00:34:43,280 --> 00:34:47,599
each of these has to be assessed and we

00:34:46,079 --> 00:34:48,000
have to provide guidelines when it's

00:34:47,599 --> 00:34:49,839
relevant

00:34:48,000 --> 00:34:51,359
and when these should be used and how

00:34:49,839 --> 00:34:53,040
they should be appropriately used

00:34:51,359 --> 00:34:55,679
but we want to give this as a set of

00:34:53,040 --> 00:34:58,720
tools that if somebody wants to

00:34:55,679 --> 00:34:59,599
um use these kernel configurations in a

00:34:58,720 --> 00:35:01,680
safe way

00:34:59,599 --> 00:35:02,800
that they will be able to to put them

00:35:01,680 --> 00:35:04,880
together

00:35:02,800 --> 00:35:06,000
and some of the configurations are more

00:35:04,880 --> 00:35:09,280
relevant for

00:35:06,000 --> 00:35:10,160
testing or are proving that um there are

00:35:09,280 --> 00:35:13,359
no

00:35:10,160 --> 00:35:14,800
um memory memory violations et cetera

00:35:13,359 --> 00:35:17,920
and and that and

00:35:14,800 --> 00:35:20,320
and those can be used as well um

00:35:17,920 --> 00:35:22,320
in the safety context okay these are

00:35:20,320 --> 00:35:23,200
these are again these areas are ongoing

00:35:22,320 --> 00:35:26,720
work

00:35:23,200 --> 00:35:30,560
static analysis um where we focus on

00:35:26,720 --> 00:35:33,520
on different areas of um uh

00:35:30,560 --> 00:35:35,119
also again based on the the first bullet

00:35:33,520 --> 00:35:38,560
about the criteria

00:35:35,119 --> 00:35:40,720
um we've been focusing on what you know

00:35:38,560 --> 00:35:42,560
there's some titles i apologize in this

00:35:40,720 --> 00:35:44,000
version which i corrected but uh when i

00:35:42,560 --> 00:35:45,440
post my final

00:35:44,000 --> 00:35:47,359
slides are correct uncut you know it's

00:35:45,440 --> 00:35:48,480
misspelled here okay but anyway we've

00:35:47,359 --> 00:35:50,720
been analyzing

00:35:48,480 --> 00:35:52,320
different semantic patches how they're

00:35:50,720 --> 00:35:55,680
how they can be used

00:35:52,320 --> 00:35:57,200
and which and to define a sweet uh a set

00:35:55,680 --> 00:36:00,400
of semantic patches

00:35:57,200 --> 00:36:02,000
which are relevant for safety analysis

00:36:00,400 --> 00:36:04,880
in particular

00:36:02,000 --> 00:36:06,240
and again coverity which is already

00:36:04,880 --> 00:36:08,960
aligned with various

00:36:06,240 --> 00:36:10,800
safety standards what is already covered

00:36:08,960 --> 00:36:12,720
what needs to be covered and how we use

00:36:10,800 --> 00:36:15,920
that effectively

00:36:12,720 --> 00:36:18,480
to ensure the quality of of

00:36:15,920 --> 00:36:20,160
the kernel the linux kernel and then

00:36:18,480 --> 00:36:22,720
there's kernel profiling a lot of

00:36:20,160 --> 00:36:25,359
ongoing work right now on ebps

00:36:22,720 --> 00:36:27,200
and how they can how it can be deployed

00:36:25,359 --> 00:36:31,760
to help with kernel profiling

00:36:27,200 --> 00:36:35,440
um including the the definition of the

00:36:31,760 --> 00:36:38,800
capability of the bpdf capability

00:36:35,440 --> 00:36:40,780
and perhaps alignment with how that

00:36:38,800 --> 00:36:42,880
can be um

00:36:40,780 --> 00:36:45,520
[Music]

00:36:42,880 --> 00:36:47,839
um can work together not only for

00:36:45,520 --> 00:36:50,560
security requ

00:36:47,839 --> 00:36:52,960
contacts but also for safety okay so

00:36:50,560 --> 00:36:55,440
again these are ongoing projects

00:36:52,960 --> 00:36:56,079
and again people who are interested who

00:36:55,440 --> 00:36:58,079
want to

00:36:56,079 --> 00:36:59,440
join who want to contribute these are

00:36:58,079 --> 00:37:02,480
the kinds of things

00:36:59,440 --> 00:37:03,920
which we're working on long-term goals

00:37:02,480 --> 00:37:05,760
these are the next steps and long-term

00:37:03,920 --> 00:37:08,000
bias it's not you know whatever

00:37:05,760 --> 00:37:09,280
it's probably those projects are now

00:37:08,000 --> 00:37:11,040
where we worked on the reference

00:37:09,280 --> 00:37:13,119
process and the assessment for about six

00:37:11,040 --> 00:37:15,040
months this is the

00:37:13,119 --> 00:37:16,320
coming the current six months perhaps

00:37:15,040 --> 00:37:19,680
till the end of

00:37:16,320 --> 00:37:21,680
of 2020 and towards the end of 2020

00:37:19,680 --> 00:37:23,680
we're going to start working on these

00:37:21,680 --> 00:37:25,599
additional areas some of which already

00:37:23,680 --> 00:37:28,880
started and again depending on

00:37:25,599 --> 00:37:30,000
the people who contribute we want to be

00:37:28,880 --> 00:37:33,119
able to

00:37:30,000 --> 00:37:35,280
to do some analysis

00:37:33,119 --> 00:37:36,720
of developers mailing lists to generate

00:37:35,280 --> 00:37:39,280
requirements

00:37:36,720 --> 00:37:40,640
from the mailing list and with

00:37:39,280 --> 00:37:43,680
appropriate tagging

00:37:40,640 --> 00:37:44,480
this is feasible and we need to work on

00:37:43,680 --> 00:37:47,200
some kind of

00:37:44,480 --> 00:37:48,320
proof of concept and start expanding

00:37:47,200 --> 00:37:51,680
this work

00:37:48,320 --> 00:37:53,680
and the the goal obviously is once we

00:37:51,680 --> 00:37:55,599
have requirements we can generate

00:37:53,680 --> 00:37:57,200
requirements based test templates and

00:37:55,599 --> 00:38:00,480
this will come a long way

00:37:57,200 --> 00:38:00,960
of establishing the quality of the linux

00:38:00,480 --> 00:38:04,160
kernel

00:38:00,960 --> 00:38:07,599
without forcing kernel developers

00:38:04,160 --> 00:38:09,280
um to i don't know what i like to call

00:38:07,599 --> 00:38:11,599
to wear a suit and a tie

00:38:09,280 --> 00:38:13,920
when it doesn't match their lifestyle

00:38:11,599 --> 00:38:15,599
and we can because the mailing lists do

00:38:13,920 --> 00:38:18,800
have all this information

00:38:15,599 --> 00:38:21,839
in one way or another to have some

00:38:18,800 --> 00:38:23,599
um established way by using the

00:38:21,839 --> 00:38:26,720
appropriate tags and

00:38:23,599 --> 00:38:30,400
appropriate crawlers data mining tools

00:38:26,720 --> 00:38:31,359
um to put together to generate those

00:38:30,400 --> 00:38:35,520
requirements

00:38:31,359 --> 00:38:37,440
document them and to generate from that

00:38:35,520 --> 00:38:38,960
test templates based on those

00:38:37,440 --> 00:38:40,960
requirements

00:38:38,960 --> 00:38:42,880
and similarly to to generate the

00:38:40,960 --> 00:38:46,079
architecture documentation

00:38:42,880 --> 00:38:48,320
which is needed as evidence of the

00:38:46,079 --> 00:38:50,240
quality of the kernel i think this is

00:38:48,320 --> 00:38:52,960
probably even easier because the

00:38:50,240 --> 00:38:54,650
the linux kernel already has a very well

00:38:52,960 --> 00:38:56,480
established

00:38:54,650 --> 00:39:00,480
[Music]

00:38:56,480 --> 00:39:02,800
software architecture okay testing

00:39:00,480 --> 00:39:05,520
there's a lot a lot of ongoing work

00:39:02,800 --> 00:39:06,240
this is not related only to safety

00:39:05,520 --> 00:39:09,119
there's a

00:39:06,240 --> 00:39:09,599
great deal of interest in expanding this

00:39:09,119 --> 00:39:13,520
and

00:39:09,599 --> 00:39:16,400
um different frameworks which exist

00:39:13,520 --> 00:39:18,000
and lots of great ideas and here i'm

00:39:16,400 --> 00:39:19,440
looking here i just noticed my time is

00:39:18,000 --> 00:39:20,240
almost running up this is the most fun

00:39:19,440 --> 00:39:22,000
part

00:39:20,240 --> 00:39:24,640
the kind of stuff which which i deal

00:39:22,000 --> 00:39:26,800
with mostly on a day-to-day basis

00:39:24,640 --> 00:39:28,480
defining different safety enhancements

00:39:26,800 --> 00:39:30,960
to the kernel source

00:39:28,480 --> 00:39:32,400
and getting different contributors to

00:39:30,960 --> 00:39:35,520
upload those

00:39:32,400 --> 00:39:37,599
to the to to the kernel and

00:39:35,520 --> 00:39:38,720
to have them available as templates as

00:39:37,599 --> 00:39:40,240
reference code

00:39:38,720 --> 00:39:42,800
reference implementations with

00:39:40,240 --> 00:39:46,160
appropriate guidelines for use

00:39:42,800 --> 00:39:48,160
by all people who want to um develop

00:39:46,160 --> 00:39:50,640
safety critical applications

00:39:48,160 --> 00:39:51,010
okay so there's a lot of work here and

00:39:50,640 --> 00:39:53,119
um

00:39:51,010 --> 00:39:56,480
[Music]

00:39:53,119 --> 00:39:59,440
and again i'll i'll send out one way and

00:39:56,480 --> 00:40:00,880
i'll send out my my uh contact

00:39:59,440 --> 00:40:02,000
information and people who are

00:40:00,880 --> 00:40:05,359
interested

00:40:02,000 --> 00:40:07,920
um certainly it will be great um

00:40:05,359 --> 00:40:10,960
to see people joining signing up joining

00:40:07,920 --> 00:40:13,760
and contributing

00:40:10,960 --> 00:40:14,500
okay the safety architecture work group

00:40:13,760 --> 00:40:16,000
um

00:40:14,500 --> 00:40:18,480
[Music]

00:40:16,000 --> 00:40:20,079
i talked about before it deals with um

00:40:18,480 --> 00:40:22,319
documenting the

00:40:20,079 --> 00:40:23,200
the linux the the what we call the

00:40:22,319 --> 00:40:24,960
chunks

00:40:23,200 --> 00:40:26,640
defining the safety requirements and

00:40:24,960 --> 00:40:29,359
those chunks

00:40:26,640 --> 00:40:29,920
how we expect them to use and and those

00:40:29,359 --> 00:40:32,400
ch

00:40:29,920 --> 00:40:34,960
and those requirements are basically

00:40:32,400 --> 00:40:38,400
derived from the specific use cases

00:40:34,960 --> 00:40:42,319
which the contributors bring with them

00:40:38,400 --> 00:40:45,160
and afterwards based on that we define

00:40:42,319 --> 00:40:46,880
we want we are aiming to propose

00:40:45,160 --> 00:40:49,920
architectural changes

00:40:46,880 --> 00:40:52,079
to make linux more boost robust

00:40:49,920 --> 00:40:53,839
and more amenable for use in safety

00:40:52,079 --> 00:40:55,599
critical application

00:40:53,839 --> 00:40:57,599
okay and from this the architecture

00:40:55,599 --> 00:41:00,160
group we formed the automotive

00:40:57,599 --> 00:41:00,160
work group

00:41:00,720 --> 00:41:04,240
okay here we have a specific use case i

00:41:02,640 --> 00:41:06,000
won't have time to go into it but it's a

00:41:04,240 --> 00:41:06,800
very typical automotive use case where

00:41:06,000 --> 00:41:09,680
we have tail

00:41:06,800 --> 00:41:10,880
telltales telltales are basically some

00:41:09,680 --> 00:41:14,160
kind of indication

00:41:10,880 --> 00:41:16,880
of malfunction for example in a car

00:41:14,160 --> 00:41:17,520
okay and the problem with it is we're

00:41:16,880 --> 00:41:21,040
trusting

00:41:17,520 --> 00:41:23,359
the the graphics rendering

00:41:21,040 --> 00:41:25,280
to display something which is really i

00:41:23,359 --> 00:41:28,319
mean if somebody's brakes

00:41:25,280 --> 00:41:32,319
are gone and and the graphics

00:41:28,319 --> 00:41:34,560
um display fails to to indicate that

00:41:32,319 --> 00:41:36,240
we have a real problem here because the

00:41:34,560 --> 00:41:37,760
the software underlying software

00:41:36,240 --> 00:41:39,359
then the hardware can be great and

00:41:37,760 --> 00:41:41,920
detects the problem

00:41:39,359 --> 00:41:43,280
that's with the the brakes but if the

00:41:41,920 --> 00:41:45,200
display

00:41:43,280 --> 00:41:47,359
somehow messes things up and doesn't

00:41:45,200 --> 00:41:49,599
actually give that indication to the

00:41:47,359 --> 00:41:53,359
driver we have a really serious

00:41:49,599 --> 00:41:56,640
um risk to that driver

00:41:53,359 --> 00:41:58,160
so a telltale display is an important

00:41:56,640 --> 00:42:00,160
safety critical element and that's why

00:41:58,160 --> 00:42:01,440
it was used as a use case it's a pretty

00:42:00,160 --> 00:42:04,880
simple use case

00:42:01,440 --> 00:42:07,040
but it has very complex implications and

00:42:04,880 --> 00:42:08,480
the solution is proposed is to have a

00:42:07,040 --> 00:42:13,359
display and

00:42:08,480 --> 00:42:15,920
a a backup monitor which basically

00:42:13,359 --> 00:42:16,560
keeps tabs of what's happening if the

00:42:15,920 --> 00:42:19,440
display

00:42:16,560 --> 00:42:20,560
succeeded and it has a watchdog running

00:42:19,440 --> 00:42:22,720
in the background

00:42:20,560 --> 00:42:23,599
to make sure that that display is

00:42:22,720 --> 00:42:26,880
updated

00:42:23,599 --> 00:42:30,000
with the critical information um in

00:42:26,880 --> 00:42:33,440
in within the time limit which is

00:42:30,000 --> 00:42:36,480
necessary so that the driver can react

00:42:33,440 --> 00:42:39,359
okay so this is a type of architecture

00:42:36,480 --> 00:42:41,200
use case which is being analyzed and the

00:42:39,359 --> 00:42:43,839
different elements

00:42:41,200 --> 00:42:45,440
that are involved here for linux are

00:42:43,839 --> 00:42:47,280
being analyzed to see where we can

00:42:45,440 --> 00:42:50,720
introduce enhancements

00:42:47,280 --> 00:42:53,839
so that the the entire um flow

00:42:50,720 --> 00:42:54,560
can be accepted um based on linux

00:42:53,839 --> 00:42:56,079
features

00:42:54,560 --> 00:42:58,560
the watchfield whatever it may be the

00:42:56,079 --> 00:43:00,720
graphics rendering and accepted

00:42:58,560 --> 00:43:03,359
um for use in safety critical

00:43:00,720 --> 00:43:03,359
applications

00:43:04,960 --> 00:43:08,000
okay and the final work group are the

00:43:06,720 --> 00:43:11,280
medical

00:43:08,000 --> 00:43:13,119
devices okay this i spoke about before

00:43:11,280 --> 00:43:15,599
there's one area which i didn't mention

00:43:13,119 --> 00:43:18,640
and that's the the safety analysis

00:43:15,599 --> 00:43:19,359
based on stpa i won't go into that as a

00:43:18,640 --> 00:43:20,960
whole i'm not

00:43:19,359 --> 00:43:22,480
that familiar with it i'm not i'm not

00:43:20,960 --> 00:43:24,640
involved in this workload

00:43:22,480 --> 00:43:26,560
but it's it's an interesting theoretical

00:43:24,640 --> 00:43:29,680
application of a

00:43:26,560 --> 00:43:33,440
way of analyzing the system

00:43:29,680 --> 00:43:36,720
and based on the stpa

00:43:33,440 --> 00:43:40,319
and defining modeling the

00:43:36,720 --> 00:43:43,599
the safety of the system it's also

00:43:40,319 --> 00:43:46,079
being used now for of open source

00:43:43,599 --> 00:43:48,000
um evaluation of open source ventilators

00:43:46,079 --> 00:43:50,960
and helping speed up the process

00:43:48,000 --> 00:43:52,560
of approval for those ventilators which

00:43:50,960 --> 00:43:55,920
are in critical need

00:43:52,560 --> 00:43:56,480
all over the world now okay and the the

00:43:55,920 --> 00:43:59,599
first

00:43:56,480 --> 00:44:01,200
um model which they

00:43:59,599 --> 00:44:03,040
are working on you can see it it's

00:44:01,200 --> 00:44:06,800
pretty streamlined

00:44:03,040 --> 00:44:08,079
um see what it looks like it's a pretty

00:44:06,800 --> 00:44:11,680
basic type of model

00:44:08,079 --> 00:44:14,079
of a of a ventilator produced by a team

00:44:11,680 --> 00:44:15,760
in france the the source code is

00:44:14,079 --> 00:44:17,359
available the documentation everything

00:44:15,760 --> 00:44:19,680
is open source

00:44:17,359 --> 00:44:20,400
they've been using ftpa to analyze it

00:44:19,680 --> 00:44:24,560
and to help

00:44:20,400 --> 00:44:26,800
to speed up the approval process

00:44:24,560 --> 00:44:28,240
but the fact that there are people who

00:44:26,800 --> 00:44:29,200
are well-versed in linux who are

00:44:28,240 --> 00:44:31,359
involved

00:44:29,200 --> 00:44:32,319
um is also helpful to bridge that gap

00:44:31,359 --> 00:44:36,240
and to

00:44:32,319 --> 00:44:39,599
to accept um

00:44:36,240 --> 00:44:40,880
the the different um components that are

00:44:39,599 --> 00:44:46,400
involved here and

00:44:40,880 --> 00:44:46,400
choose to solve the analysis process

00:44:49,359 --> 00:44:53,839
okay um okay i'm not going to really

00:44:53,119 --> 00:44:57,599
have time i

00:44:53,839 --> 00:44:59,359
i um i think my time is

00:44:57,599 --> 00:45:01,599
up in a few minutes so i'll just very

00:44:59,359 --> 00:45:04,800
quickly say we have very very

00:45:01,599 --> 00:45:06,880
um high hopes um to provide

00:45:04,800 --> 00:45:08,480
tangible deliverables and there are

00:45:06,880 --> 00:45:10,240
things specific things which are

00:45:08,480 --> 00:45:12,160
we are working on right now as i

00:45:10,240 --> 00:45:15,520
mentioned before a little bit i

00:45:12,160 --> 00:45:18,000
i went into detail and um

00:45:15,520 --> 00:45:18,880
obviously we do want more contributors

00:45:18,000 --> 00:45:21,760
people who

00:45:18,880 --> 00:45:22,560
who who believe in this who believe in

00:45:21,760 --> 00:45:24,720
in

00:45:22,560 --> 00:45:27,280
in the power which linux can bring to

00:45:24,720 --> 00:45:29,119
self safety critical applications

00:45:27,280 --> 00:45:30,839
want to contribute especially on the

00:45:29,119 --> 00:45:34,079
technical side

00:45:30,839 --> 00:45:37,440
um we're all for it

00:45:34,079 --> 00:45:39,599
i think there's a strong market need and

00:45:37,440 --> 00:45:41,280
um different business entities who do

00:45:39,599 --> 00:45:43,920
want to take advantage

00:45:41,280 --> 00:45:45,760
and who can contribute their small share

00:45:43,920 --> 00:45:46,640
but that if we have a community we all

00:45:45,760 --> 00:45:48,880
together

00:45:46,640 --> 00:45:50,160
can make the assessment process and the

00:45:48,880 --> 00:45:53,760
acceptance

00:45:50,160 --> 00:45:57,280
of such um applications so much easier

00:45:53,760 --> 00:46:00,240
and that's what we're aiming for okay

00:45:57,280 --> 00:46:01,760
um we have here a couple of slides which

00:46:00,240 --> 00:46:02,960
i won't have time to go into if we'll

00:46:01,760 --> 00:46:05,280
look at them

00:46:02,960 --> 00:46:06,960
afterwards on your own time about

00:46:05,280 --> 00:46:09,359
different focuses

00:46:06,960 --> 00:46:11,440
anyone who can contribute it in any of

00:46:09,359 --> 00:46:15,359
these specific areas

00:46:11,440 --> 00:46:18,640
um and these are the

00:46:15,359 --> 00:46:18,640
the um

00:46:18,800 --> 00:46:23,839
uh members okay

00:46:21,839 --> 00:46:24,880
i work for a company which is part of

00:46:23,839 --> 00:46:27,760
intel

00:46:24,880 --> 00:46:28,800
and but we have representatives from all

00:46:27,760 --> 00:46:31,280
kinds of

00:46:28,800 --> 00:46:33,200
both automotive manufacturers as i said

00:46:31,280 --> 00:46:34,720
before that's currently

00:46:33,200 --> 00:46:36,240
a major focus because that's where our

00:46:34,720 --> 00:46:39,280
members are coming from

00:46:36,240 --> 00:46:41,359
but if there are people who can come to

00:46:39,280 --> 00:46:44,880
um from other areas as well

00:46:41,359 --> 00:46:47,359
we're all open for that and

00:46:44,880 --> 00:46:48,480
we need that kind of synergy to to move

00:46:47,359 --> 00:46:52,800
ahead

00:46:48,480 --> 00:46:52,800
okay and the slides have links

00:46:53,599 --> 00:46:57,359
to the different allies of materials and

00:46:56,640 --> 00:47:00,240
i will add

00:46:57,359 --> 00:47:01,440
my um contact information on the last

00:47:00,240 --> 00:47:05,680
slide here

00:47:01,440 --> 00:47:06,640
and um i guess nelia i'll send to

00:47:05,680 --> 00:47:08,160
whoever

00:47:06,640 --> 00:47:10,560
from the linux foundation or whoever it

00:47:08,160 --> 00:47:11,520
will be you can update the slide i'll

00:47:10,560 --> 00:47:14,079
send

00:47:11,520 --> 00:47:14,800
a slightly updated version of these

00:47:14,079 --> 00:47:16,560
slides

00:47:14,800 --> 00:47:18,000
also with collecting some titles and the

00:47:16,560 --> 00:47:20,400
contact information

00:47:18,000 --> 00:47:20,400
for all

00:47:21,119 --> 00:47:27,839
okay um

00:47:24,400 --> 00:47:29,520
questions let me see if there's anything

00:47:27,839 --> 00:47:31,440
ah they don't advertise these unless

00:47:29,520 --> 00:47:33,839
they do it themselves so okay so i will

00:47:31,440 --> 00:47:38,720
add that to the slides that's fine

00:47:33,839 --> 00:47:43,119
and um

00:47:38,720 --> 00:47:43,119
um there was a question here about

00:47:45,280 --> 00:47:49,599
um common criteria certification and

00:47:47,920 --> 00:47:53,200
tips 140

00:47:49,599 --> 00:47:55,440
to to date we haven't worked with those

00:47:53,200 --> 00:47:57,119
standards i'm not

00:47:55,440 --> 00:47:58,720
so familiar with them because i come

00:47:57,119 --> 00:47:59,839
from the automotive domain and what

00:47:58,720 --> 00:48:03,599
we've been doing

00:47:59,839 --> 00:48:07,200
but again the the standards

00:48:03,599 --> 00:48:08,400
which feed our process are based on the

00:48:07,200 --> 00:48:10,400
use cases

00:48:08,400 --> 00:48:11,440
so that if we're coming from the

00:48:10,400 --> 00:48:14,720
automotive domain

00:48:11,440 --> 00:48:17,760
we're driven by iso 26262

00:48:14,720 --> 00:48:20,880
and if we're coming from

00:48:17,760 --> 00:48:23,520
other domains then that's what will

00:48:20,880 --> 00:48:26,400
drive the assessment process

00:48:23,520 --> 00:48:28,480
and as i said before we have a more

00:48:26,400 --> 00:48:31,599
generic reference process

00:48:28,480 --> 00:48:33,119
with which we work and because there are

00:48:31,599 --> 00:48:35,680
certain basics

00:48:33,119 --> 00:48:36,880
for safe software which are common to

00:48:35,680 --> 00:48:38,880
all standards

00:48:36,880 --> 00:48:40,880
and then we have the second stage of

00:48:38,880 --> 00:48:44,079
taking that reference process

00:48:40,880 --> 00:48:45,920
and mapping it onto the details of any

00:48:44,079 --> 00:48:49,520
specific

00:48:45,920 --> 00:48:51,119
safety standard okay so if people

00:48:49,520 --> 00:48:53,440
are interested in getting involved in

00:48:51,119 --> 00:48:55,359
new areas and new use cases

00:48:53,440 --> 00:48:57,359
that's more than welcome i think there's

00:48:55,359 --> 00:48:58,079
a lot of the foundation will be in

00:48:57,359 --> 00:49:00,960
common

00:48:58,079 --> 00:49:01,520
but obviously we do need that specific

00:49:00,960 --> 00:49:03,920
work

00:49:01,520 --> 00:49:07,760
to translate it into the specific use

00:49:03,920 --> 00:49:07,760
cases for each specific domain

00:49:08,480 --> 00:49:16,079
okay so i hope i answered on

00:49:11,760 --> 00:49:19,280
that question um

00:49:16,079 --> 00:49:20,720
one more question was about sanitizers

00:49:19,280 --> 00:49:22,480
on the target i don't have too much time

00:49:20,720 --> 00:49:25,599
to answer that but if i

00:49:22,480 --> 00:49:30,079
um understand um that's dealing with

00:49:25,599 --> 00:49:30,960
um you're referring to static analysis i

00:49:30,079 --> 00:49:34,640
think

00:49:30,960 --> 00:49:36,400
um and here if you want to follow up

00:49:34,640 --> 00:49:37,359
afterwards you can contact me i can tell

00:49:36,400 --> 00:49:40,319
you more

00:49:37,359 --> 00:49:42,319
about how the work is ongoing um what we

00:49:40,319 --> 00:49:45,359
have done what we will be doing

00:49:42,319 --> 00:49:48,640
but there's a lot of interesting work to

00:49:45,359 --> 00:49:48,640
on there okay

00:49:49,359 --> 00:49:52,960
um so i think

00:49:53,680 --> 00:49:59,839
i guess we're done and now yeah yeah you

00:49:57,119 --> 00:50:04,720
can share my contact information okay

00:49:59,839 --> 00:50:04,720
thanks and i'll share it as well thank

00:50:10,839 --> 00:50:14,480
you

00:50:12,400 --> 00:50:14,480

YouTube URL: https://www.youtube.com/watch?v=ReXnGluGp3Q


