Title: Building FOSS Software On ARM64 and ppc64le - Lance Albertson & Peter Pouliot
Publication date: 2020-09-08
Playlist: Open Source Summit + Embedded Linux Conference NA 2020
Description: 
	Building FOSS Software On ARM64 and ppc64le - Lance Albertson, OSU Open Source Lab & Peter Pouliot, Ampere Computing
Captions: 
	00:00:04,319 --> 00:00:08,480
hello

00:00:04,960 --> 00:00:10,719
and welcome my name is lance albertson

00:00:08,480 --> 00:00:11,599
um i'm here with peter we're going to be

00:00:10,719 --> 00:00:13,599
talking about

00:00:11,599 --> 00:00:15,440
uh building open three and open source

00:00:13,599 --> 00:00:18,880
software on arm 64

00:00:15,440 --> 00:00:20,480
and power pc 64 little indian uh

00:00:18,880 --> 00:00:22,560
first thing about me so you know a

00:00:20,480 --> 00:00:23,359
little bit more i'm the director of the

00:00:22,560 --> 00:00:25,680
open source

00:00:23,359 --> 00:00:27,359
lab at oregon state university i started

00:00:25,680 --> 00:00:28,960
there in 2007

00:00:27,359 --> 00:00:30,960
as a cisa man and i've been promoted the

00:00:28,960 --> 00:00:32,800
director back in 2011.

00:00:30,960 --> 00:00:34,079
i manage about seven to ten

00:00:32,800 --> 00:00:36,239
undergraduate students that help me

00:00:34,079 --> 00:00:37,760
manage all the systems

00:00:36,239 --> 00:00:39,280
over the years i've been active in the

00:00:37,760 --> 00:00:41,200
open source community starting out with

00:00:39,280 --> 00:00:42,559
agenti infrastructure team

00:00:41,200 --> 00:00:44,079
doing various things with the gennady

00:00:42,559 --> 00:00:47,680
project and now more recently i've been

00:00:44,079 --> 00:00:47,680
fairly active in the chef community

00:00:48,079 --> 00:00:52,800
and uh my name is uh peter pouliad i'm

00:00:50,640 --> 00:00:55,199
focused on developer ecosystems and

00:00:52,800 --> 00:00:57,520
advocacy here at amp air computing

00:00:55,199 --> 00:01:00,160
i've worked on open source projects and

00:00:57,520 --> 00:01:03,920
technologies professionally since 2003

00:01:00,160 --> 00:01:05,840
including uh gnome suse linux

00:01:03,920 --> 00:01:09,760
openstack and the power virtualized

00:01:05,840 --> 00:01:13,200
device driver stack for windows on

00:01:09,760 --> 00:01:15,360
virtualize on kvm and my background

00:01:13,200 --> 00:01:17,360
is primarily in data center operations

00:01:15,360 --> 00:01:22,000
and infrastructure automation

00:01:17,360 --> 00:01:22,000
continuous integration and hypervisors

00:01:25,200 --> 00:01:28,240
so here's a little summary of what we're

00:01:26,479 --> 00:01:29,520
planning on talking today is we'll start

00:01:28,240 --> 00:01:30,799
off with an introduction of what we're

00:01:29,520 --> 00:01:33,520
going to be talking about

00:01:30,799 --> 00:01:35,119
and then from there on we'll be uh

00:01:33,520 --> 00:01:36,960
discussing why it's important to

00:01:35,119 --> 00:01:38,400
provide access to these various

00:01:36,960 --> 00:01:40,320
architectures

00:01:38,400 --> 00:01:41,439
how projects actually get access with

00:01:40,320 --> 00:01:43,840
our systems

00:01:41,439 --> 00:01:44,560
the history behind uh the power

00:01:43,840 --> 00:01:47,840
ecosystem

00:01:44,560 --> 00:01:48,799
and the uh art arc or arm 64 at the open

00:01:47,840 --> 00:01:50,479
source lab

00:01:48,799 --> 00:01:52,479
and also technical challenges for the

00:01:50,479 --> 00:01:54,960
platforms that we've had throughout all

00:01:52,479 --> 00:01:56,719
these years

00:01:54,960 --> 00:01:58,240
so the first thing let me talk a little

00:01:56,719 --> 00:01:59,439
bit more about what the osu open source

00:01:58,240 --> 00:02:01,040
lab is about

00:01:59,439 --> 00:02:02,640
uh you can kind of think of us as a

00:02:01,040 --> 00:02:04,000
co-location hosting company for

00:02:02,640 --> 00:02:05,680
for open source projects but we're a

00:02:04,000 --> 00:02:09,039
little bit more than that

00:02:05,680 --> 00:02:10,959
we provide really a lot of various uh

00:02:09,039 --> 00:02:12,800
services for projects whether that is

00:02:10,959 --> 00:02:14,480
just server co-location or what we've

00:02:12,800 --> 00:02:16,480
been doing a lot more of lately is

00:02:14,480 --> 00:02:18,160
private cloud hosting

00:02:16,480 --> 00:02:20,400
we've been primarily using a lot of

00:02:18,160 --> 00:02:22,400
openstack and gennady in the past

00:02:20,400 --> 00:02:24,640
we also have a popular software download

00:02:22,400 --> 00:02:27,120
mirror ftp.osusl.org

00:02:24,640 --> 00:02:28,640
uh that is geographically uh separated

00:02:27,120 --> 00:02:31,040
between the west coast

00:02:28,640 --> 00:02:32,640
midwest and east coast um and we also

00:02:31,040 --> 00:02:34,319
offer a lot of managed hosting for a lot

00:02:32,640 --> 00:02:35,280
of projects that

00:02:34,319 --> 00:02:37,519
don't really want to deal with the

00:02:35,280 --> 00:02:39,120
schism and tasks we'll handle that for

00:02:37,519 --> 00:02:41,760
them so they can just focus on

00:02:39,120 --> 00:02:43,360
making sure their project is awesome the

00:02:41,760 --> 00:02:44,800
other side of it is is that we provide

00:02:43,360 --> 00:02:47,040
experiential learning

00:02:44,800 --> 00:02:48,959
for a lot of projects or a lot of

00:02:47,040 --> 00:02:51,519
undergraduate students at oregon state

00:02:48,959 --> 00:02:52,319
so a lot of our students get hired on we

00:02:51,519 --> 00:02:54,160
pay them

00:02:52,319 --> 00:02:55,680
and they get hands-on experience

00:02:54,160 --> 00:02:57,200
managing systems whether that's actually

00:02:55,680 --> 00:02:59,840
in the data center which has kind of

00:02:57,200 --> 00:03:02,480
gotten more difficult to do with

00:02:59,840 --> 00:03:04,159
folks having access to that or they

00:03:02,480 --> 00:03:07,040
actually uh

00:03:04,159 --> 00:03:08,000
you know manage systems more directly so

00:03:07,040 --> 00:03:10,239
for example

00:03:08,000 --> 00:03:12,720
uh they work really closely with open

00:03:10,239 --> 00:03:14,400
source projects from around the world

00:03:12,720 --> 00:03:16,080
and interact with them whether they're

00:03:14,400 --> 00:03:18,159
in the united states in europe

00:03:16,080 --> 00:03:19,440
in asia wherever we work with them day

00:03:18,159 --> 00:03:21,280
to day

00:03:19,440 --> 00:03:22,560
i also help to teach them learn and

00:03:21,280 --> 00:03:24,400
current new

00:03:22,560 --> 00:03:25,840
devops practices and technologies as

00:03:24,400 --> 00:03:27,200
best as we can and

00:03:25,840 --> 00:03:28,879
a lot of our alumni that have gone

00:03:27,200 --> 00:03:31,200
through here have been really well known

00:03:28,879 --> 00:03:34,080
in the ecosystem for example

00:03:31,200 --> 00:03:36,480
core os was started by uh two uh open

00:03:34,080 --> 00:03:38,000
source lab students uh alex golvie and

00:03:36,480 --> 00:03:39,760
brandon phelps were both from the open

00:03:38,000 --> 00:03:41,280
source lab so

00:03:39,760 --> 00:03:43,599
we're we uh we're quite known throughout

00:03:41,280 --> 00:03:45,040
the ecosystem i'm currently i'm the only

00:03:43,599 --> 00:03:48,480
full-timer and i have about eight

00:03:45,040 --> 00:03:48,480
undergraduate students that work for me

00:03:50,640 --> 00:03:54,640
so uh my name's as i said peter and i'm

00:03:53,280 --> 00:03:56,959
i'd like to give you a little background

00:03:54,640 --> 00:04:00,560
on who imperial computing is

00:03:56,959 --> 00:04:03,280
so uh amber is essentially a

00:04:00,560 --> 00:04:04,080
chip vendor who uh we've designed the

00:04:03,280 --> 00:04:06,560
first

00:04:04,080 --> 00:04:07,840
uh server microprocessor architecture

00:04:06,560 --> 00:04:10,159
from the ground up

00:04:07,840 --> 00:04:11,519
specifically designed for cloud

00:04:10,159 --> 00:04:13,360
computing

00:04:11,519 --> 00:04:14,640
in this architecture obviously it's a

00:04:13,360 --> 00:04:17,759
64-bit

00:04:14,640 --> 00:04:21,199
uh arm processor and we chose that

00:04:17,759 --> 00:04:25,520
to uh basically try to optimize the

00:04:21,199 --> 00:04:28,080
efficiency of the data center workloads

00:04:25,520 --> 00:04:29,360
uh in the you know specifically for

00:04:28,080 --> 00:04:32,320
cloud computing

00:04:29,360 --> 00:04:33,280
um you know and our essentially our goal

00:04:32,320 --> 00:04:36,000
is to be the

00:04:33,280 --> 00:04:36,800
uh the industry leader and power

00:04:36,000 --> 00:04:39,840
efficiency

00:04:36,800 --> 00:04:41,360
for uh core density and uh

00:04:39,840 --> 00:04:44,000
you know basically trying to help

00:04:41,360 --> 00:04:47,120
establish the new normal of uh

00:04:44,000 --> 00:04:50,160
scalability in the in the data center

00:04:47,120 --> 00:04:50,880
so uh yeah essentially i guess in a in a

00:04:50,160 --> 00:04:54,240
nutshell

00:04:50,880 --> 00:04:54,960
where uh arm 64 processor uh provider

00:04:54,240 --> 00:04:57,280
and where

00:04:54,960 --> 00:04:59,199
essentially the looking to bring armed

00:04:57,280 --> 00:05:02,720
technologies into the server

00:04:59,199 --> 00:05:02,720
uh ecosystem space

00:05:05,120 --> 00:05:09,039
all right so uh why is it important to

00:05:08,160 --> 00:05:14,000
provide

00:05:09,039 --> 00:05:15,840
access to arc64 and powerpc64 little ndn

00:05:14,000 --> 00:05:18,000
well for one both architectures are

00:05:15,840 --> 00:05:19,280
becoming more widely used in various

00:05:18,000 --> 00:05:22,400
ways

00:05:19,280 --> 00:05:24,880
as was mentioned in the keynotes

00:05:22,400 --> 00:05:26,400
arm 64 is going to be used quite a bit

00:05:24,880 --> 00:05:28,960
more especially with macs

00:05:26,400 --> 00:05:30,479
which will be interesting amazon web

00:05:28,960 --> 00:05:33,919
services also

00:05:30,479 --> 00:05:35,600
has provided a lot of arc64 related

00:05:33,919 --> 00:05:36,960
instances that you can can run and

00:05:35,600 --> 00:05:39,520
provide cheaper for

00:05:36,960 --> 00:05:41,600
your use but right now typically most

00:05:39,520 --> 00:05:43,840
open source developers rely on

00:05:41,600 --> 00:05:45,039
things like raspberry pi's which aren't

00:05:43,840 --> 00:05:47,520
really the best for doing

00:05:45,039 --> 00:05:48,080
a lot of compilations um it's obviously

00:05:47,520 --> 00:05:49,840
simple

00:05:48,080 --> 00:05:52,000
performance limitations and then

00:05:49,840 --> 00:05:54,240
depending on the nuances of

00:05:52,000 --> 00:05:55,280
the raspberry pi maybe doesn't relate to

00:05:54,240 --> 00:05:58,800
other things such as

00:05:55,280 --> 00:06:01,520
on aws and also running

00:05:58,800 --> 00:06:03,199
any kind of uh continuous integration

00:06:01,520 --> 00:06:03,520
and development pipelines with raspberry

00:06:03,199 --> 00:06:06,080
pi

00:06:03,520 --> 00:06:07,360
isn't really the best way of doing it

00:06:06,080 --> 00:06:08,800
the other thing is that i think a lot of

00:06:07,360 --> 00:06:11,039
raspberry pi's are still

00:06:08,800 --> 00:06:12,560
using 32-bit binaries on a lot of their

00:06:11,039 --> 00:06:15,199
stuff and really what you need is a

00:06:12,560 --> 00:06:16,880
64-bit so we really need to provide a

00:06:15,199 --> 00:06:20,560
platform to do this

00:06:16,880 --> 00:06:22,400
on the powerpc side pc has been

00:06:20,560 --> 00:06:24,160
a major role in the high performance

00:06:22,400 --> 00:06:26,160
computing and in

00:06:24,160 --> 00:06:28,400
ai and gpu and sensitive environments

00:06:26,160 --> 00:06:30,400
especially in some of the major cloud

00:06:28,400 --> 00:06:31,680
players i know they're using power pc

00:06:30,400 --> 00:06:33,680
quite a bit for that

00:06:31,680 --> 00:06:35,440
the problem is is that the hardware is

00:06:33,680 --> 00:06:37,199
generally very expensive

00:06:35,440 --> 00:06:39,120
and multiple and very difficult to

00:06:37,199 --> 00:06:40,800
obtain there really isn't like a

00:06:39,120 --> 00:06:42,560
an easy development platform i think

00:06:40,800 --> 00:06:44,400
there is one uh

00:06:42,560 --> 00:06:46,639
company that is providing desktops for

00:06:44,400 --> 00:06:48,560
this but again it's not as

00:06:46,639 --> 00:06:50,720
easy entry essentials like the raspberry

00:06:48,560 --> 00:06:52,720
pi just to get some easy access

00:06:50,720 --> 00:06:54,639
um but for those systems that you can

00:06:52,720 --> 00:06:56,479
get it requires additional knowledge on

00:06:54,639 --> 00:06:56,960
how to set up and manage those systems

00:06:56,479 --> 00:06:58,400
which

00:06:56,960 --> 00:07:01,280
can be problematic for a lot of open

00:06:58,400 --> 00:07:03,120
source developers

00:07:01,280 --> 00:07:04,240
and really if you want to manage these

00:07:03,120 --> 00:07:05,360
properly you want to have some kind of

00:07:04,240 --> 00:07:07,759
support contract

00:07:05,360 --> 00:07:09,199
and to deal with any kind of hardware

00:07:07,759 --> 00:07:09,599
failures or any other things that you

00:07:09,199 --> 00:07:11,120
can

00:07:09,599 --> 00:07:13,360
you run into when you run this type of

00:07:11,120 --> 00:07:14,560
hardware so really that's

00:07:13,360 --> 00:07:17,039
that's kind of the things you need to

00:07:14,560 --> 00:07:20,000
think about

00:07:17,039 --> 00:07:21,280
so for for open source developers you

00:07:20,000 --> 00:07:22,240
want to make sure that your software

00:07:21,280 --> 00:07:24,560
works

00:07:22,240 --> 00:07:25,680
and in the most part most software

00:07:24,560 --> 00:07:28,080
recompiles with

00:07:25,680 --> 00:07:29,599
not many changes but sometimes depending

00:07:28,080 --> 00:07:31,680
on how the developers written the code

00:07:29,599 --> 00:07:33,840
there might be some x86 specific

00:07:31,680 --> 00:07:35,599
assembly code or other things included

00:07:33,840 --> 00:07:37,360
that might cause compilation issues or

00:07:35,599 --> 00:07:39,680
even some red time issues

00:07:37,360 --> 00:07:41,120
and to fix those you know developers

00:07:39,680 --> 00:07:42,080
they might you know try and run things

00:07:41,120 --> 00:07:44,160
in an emulator

00:07:42,080 --> 00:07:45,919
solely on their laptop or whatever but

00:07:44,160 --> 00:07:47,360
ideally it'd be nice to run it on actual

00:07:45,919 --> 00:07:49,919
bare metals machines

00:07:47,360 --> 00:07:51,440
to make it work a little bit better

00:07:49,919 --> 00:07:53,199
these developers really need to have

00:07:51,440 --> 00:07:56,560
easy access to debug and fix

00:07:53,199 --> 00:07:58,240
issues in addition a lot of these

00:07:56,560 --> 00:07:59,599
architectures have specific

00:07:58,240 --> 00:08:01,199
compile flags that you want to have

00:07:59,599 --> 00:08:02,080
enabled to boost the performance on that

00:08:01,199 --> 00:08:03,360
architecture

00:08:02,080 --> 00:08:04,960
so you wouldn't be able to test that and

00:08:03,360 --> 00:08:06,080
make sure your software is working

00:08:04,960 --> 00:08:08,000
properly

00:08:06,080 --> 00:08:09,520
and for downstream users that use this

00:08:08,000 --> 00:08:11,520
so for example all the users that are

00:08:09,520 --> 00:08:13,039
spinning up instances on aws

00:08:11,520 --> 00:08:14,720
they expect their software just to work

00:08:13,039 --> 00:08:15,840
out of the box uh

00:08:14,720 --> 00:08:17,520
no matter what architecture you're

00:08:15,840 --> 00:08:18,720
running on they don't want to deal with

00:08:17,520 --> 00:08:19,919
oh this is

00:08:18,720 --> 00:08:21,120
oh this is running on a different

00:08:19,919 --> 00:08:22,000
architecture now i got to go down the

00:08:21,120 --> 00:08:23,599
rabbit hole why

00:08:22,000 --> 00:08:24,960
does this one little thing not run

00:08:23,599 --> 00:08:26,160
correctly and all that they expect

00:08:24,960 --> 00:08:27,680
everything to work

00:08:26,160 --> 00:08:29,759
and so it's really important that all of

00:08:27,680 --> 00:08:31,360
the software out there that people use

00:08:29,759 --> 00:08:33,759
will work on whatever platform they

00:08:31,360 --> 00:08:33,759
expect

00:08:34,719 --> 00:08:39,039
in addition to that a lot of open source

00:08:36,560 --> 00:08:42,479
projects rely on some type of a ci cd

00:08:39,039 --> 00:08:43,839
pipeline to ensure their software is is

00:08:42,479 --> 00:08:46,160
working properly and also for doing

00:08:43,839 --> 00:08:47,519
releases and so the other part is

00:08:46,160 --> 00:08:49,519
we want to make sure that all these new

00:08:47,519 --> 00:08:52,560
architectures work seamlessly with this

00:08:49,519 --> 00:08:54,560
whatever ci cd pipeline they use

00:08:52,560 --> 00:08:55,839
and because this often catches bugs and

00:08:54,560 --> 00:08:58,320
issues much sooner

00:08:55,839 --> 00:08:59,040
uh in a lot of development related areas

00:08:58,320 --> 00:09:00,480
in addition

00:08:59,040 --> 00:09:02,560
if they want to be able to provide

00:09:00,480 --> 00:09:04,560
binary artifacts so that users

00:09:02,560 --> 00:09:06,000
downstream users can use it easily they

00:09:04,560 --> 00:09:07,920
need to have some kind of access to that

00:09:06,000 --> 00:09:10,560
to do that easily

00:09:07,920 --> 00:09:12,560
so this really makes it a lot easier for

00:09:10,560 --> 00:09:14,000
users to use their software and so forth

00:09:12,560 --> 00:09:14,959
i remember when we first started doing

00:09:14,000 --> 00:09:18,399
this with

00:09:14,959 --> 00:09:19,279
powerpc we were using packer to build

00:09:18,399 --> 00:09:21,440
our images

00:09:19,279 --> 00:09:23,760
but at that particular time the go

00:09:21,440 --> 00:09:25,600
language hadn't been really compiled and

00:09:23,760 --> 00:09:27,200
ready yet for the power pc

00:09:25,600 --> 00:09:28,880
and so it was i was kind of in a chicken

00:09:27,200 --> 00:09:30,399
nea problem for some of it

00:09:28,880 --> 00:09:32,640
so i had to do things a little bit

00:09:30,399 --> 00:09:34,399
manually and we actually got the golang

00:09:32,640 --> 00:09:36,000
project on our platform and then they

00:09:34,399 --> 00:09:37,279
eventually started building things that

00:09:36,000 --> 00:09:38,800
we could use so it was really cool to be

00:09:37,279 --> 00:09:43,120
able to be a part of that

00:09:38,800 --> 00:09:43,120
um and make that move going forward

00:09:43,519 --> 00:09:46,959
so let's talk a little bit about the

00:09:44,720 --> 00:09:50,640
history of uh power

00:09:46,959 --> 00:09:51,920
and uh arm at 64. arm64 at the open

00:09:50,640 --> 00:09:53,519
source lab so

00:09:51,920 --> 00:09:55,120
let's first talk about power because

00:09:53,519 --> 00:09:57,279
power has been a part of the lab for the

00:09:55,120 --> 00:10:00,320
longest time

00:09:57,279 --> 00:10:02,880
we actually started doing uh hosting

00:10:00,320 --> 00:10:03,600
back in 2005 just on a simple powerfi

00:10:02,880 --> 00:10:06,079
server

00:10:03,600 --> 00:10:07,839
and all we had was gel access to do it

00:10:06,079 --> 00:10:08,240
at the time only a couple projects used

00:10:07,839 --> 00:10:10,640
it

00:10:08,240 --> 00:10:12,720
we didn't give them root access um but

00:10:10,640 --> 00:10:15,839
it was it was a nice start with it

00:10:12,720 --> 00:10:17,279
uh and then by the late 20th 2000s 2010

00:10:15,839 --> 00:10:20,079
so far we started hosting

00:10:17,279 --> 00:10:22,640
more systems with power 7 servers and

00:10:20,079 --> 00:10:24,240
our collaboration with ibm was getting

00:10:22,640 --> 00:10:27,120
much more formalized which was really

00:10:24,240 --> 00:10:30,160
nice at that time we were using

00:10:27,120 --> 00:10:31,519
lpar technology with ibm which is

00:10:30,160 --> 00:10:33,839
kind of a pain for people that are

00:10:31,519 --> 00:10:35,760
really used to how cloud works right now

00:10:33,839 --> 00:10:37,279
and we spun up they're basically like

00:10:35,760 --> 00:10:39,360
virtual machines on these systems and we

00:10:37,279 --> 00:10:41,120
spun up about a dozen different projects

00:10:39,360 --> 00:10:42,399
to kind of get them going and then at

00:10:41,120 --> 00:10:44,399
that point

00:10:42,399 --> 00:10:46,160
we also started hosting some dedicated

00:10:44,399 --> 00:10:47,120
hardware for some projects so for

00:10:46,160 --> 00:10:49,120
example

00:10:47,120 --> 00:10:50,560
um one of them was the gcc compiled from

00:10:49,120 --> 00:10:52,000
project was one of the first users of

00:10:50,560 --> 00:10:55,120
that

00:10:52,000 --> 00:10:56,079
then in 2011 we started using openstack

00:10:55,120 --> 00:10:57,360
quite a bit

00:10:56,079 --> 00:11:00,079
and that was primarily because the

00:10:57,360 --> 00:11:02,320
power8 platform changed quite a bit how

00:11:00,079 --> 00:11:04,320
uh these systems were run and the power

00:11:02,320 --> 00:11:06,079
rate system also switched it over to

00:11:04,320 --> 00:11:08,480
little engine because before then

00:11:06,079 --> 00:11:09,560
everything was big ending with power so

00:11:08,480 --> 00:11:11,120
we first started out with

00:11:09,560 --> 00:11:13,040
pre-development machines that were

00:11:11,120 --> 00:11:13,920
actually power 7 plus machines that had

00:11:13,040 --> 00:11:15,839
different firmware on

00:11:13,920 --> 00:11:18,160
it that allow us to run it like a power

00:11:15,839 --> 00:11:20,800
rate machine so we can quickly test that

00:11:18,160 --> 00:11:21,600
um but we we made the switch and using

00:11:20,800 --> 00:11:24,000
openstack

00:11:21,600 --> 00:11:24,959
to be able to make it really easy for us

00:11:24,000 --> 00:11:27,279
to provision

00:11:24,959 --> 00:11:29,120
virtual machines on these systems and

00:11:27,279 --> 00:11:30,800
also deal with any kind of storage

00:11:29,120 --> 00:11:33,680
uh requirements that we have in the long

00:11:30,800 --> 00:11:35,360
term after a certain time we replace all

00:11:33,680 --> 00:11:37,440
those pre-development machines with

00:11:35,360 --> 00:11:39,839
power8 and now power9 machines

00:11:37,440 --> 00:11:42,880
and at this point with powered osl we

00:11:39,839 --> 00:11:44,959
have around over 100 projects uh using

00:11:42,880 --> 00:11:46,720
this system uh over just about 10

00:11:44,959 --> 00:11:47,200
machines and it's working really really

00:11:46,720 --> 00:11:50,399
well

00:11:47,200 --> 00:11:50,399
that picture is one of the

00:11:50,720 --> 00:11:54,839
systems that we i think i think are one

00:11:52,480 --> 00:11:57,200
of our storage nodes that we have with

00:11:54,839 --> 00:12:00,480
that

00:11:57,200 --> 00:12:01,440
our uh history with arr 64 to open

00:12:00,480 --> 00:12:04,320
source live is fairly

00:12:01,440 --> 00:12:04,720
more recent um and about last year about

00:12:04,320 --> 00:12:06,560
this

00:12:04,720 --> 00:12:08,000
actually back in february ampere

00:12:06,560 --> 00:12:09,360
computing reached out to us and we

00:12:08,000 --> 00:12:10,399
started a discussion of how we can

00:12:09,360 --> 00:12:14,880
provide

00:12:10,399 --> 00:12:16,720
um arm64 access to open source projects

00:12:14,880 --> 00:12:17,920
um i kind of told them the story of what

00:12:16,720 --> 00:12:20,560
we did with with

00:12:17,920 --> 00:12:21,680
power and with the open source lab we

00:12:20,560 --> 00:12:23,760
kind of treat ourselves as the

00:12:21,680 --> 00:12:25,440
switzerland of open source projects

00:12:23,760 --> 00:12:28,160
we really are trying to be agnostic to

00:12:25,440 --> 00:12:30,079
whatever company or platform we provide

00:12:28,160 --> 00:12:31,839
as long as you know the project's needed

00:12:30,079 --> 00:12:32,320
so we pitched that idea and they were

00:12:31,839 --> 00:12:35,839
really

00:12:32,320 --> 00:12:37,440
receptive to that so um as things moved

00:12:35,839 --> 00:12:38,639
along we finally received a shipment of

00:12:37,440 --> 00:12:40,160
12 servers

00:12:38,639 --> 00:12:43,200
there's a picture of the server that we

00:12:40,160 --> 00:12:47,360
got we got the amp here computing emag

00:12:43,200 --> 00:12:50,639
to you servers it's in a lenovo based

00:12:47,360 --> 00:12:51,920
branded machine but it's running arm

00:12:50,639 --> 00:12:54,079
and we finally got some contracts

00:12:51,920 --> 00:12:56,000
finalized at the end of uh december and

00:12:54,079 --> 00:12:57,760
finally i racked the servers and i got

00:12:56,000 --> 00:12:59,200
openstack all deployed at the beginning

00:12:57,760 --> 00:13:00,880
of this year and

00:12:59,200 --> 00:13:02,399
uh finally in may once we finally got

00:13:00,880 --> 00:13:03,760
some kinks worked out we got

00:13:02,399 --> 00:13:06,320
our first initial projects running on

00:13:03,760 --> 00:13:07,760
the cluster so

00:13:06,320 --> 00:13:09,360
we're ready and open to get a lot more

00:13:07,760 --> 00:13:11,760
projects running on these systems

00:13:09,360 --> 00:13:11,760
right now

00:13:12,720 --> 00:13:16,240
so what are some of the goals with

00:13:14,000 --> 00:13:16,880
providing to this access the first and

00:13:16,240 --> 00:13:19,600
foremost

00:13:16,880 --> 00:13:21,279
foremost goal is ease of access we want

00:13:19,600 --> 00:13:22,880
to make sure that the project can get

00:13:21,279 --> 00:13:25,360
access to the hardware

00:13:22,880 --> 00:13:26,880
as simple as this having an ssh key and

00:13:25,360 --> 00:13:29,040
they log in and that's it

00:13:26,880 --> 00:13:30,800
that's one way we can do it

00:13:29,040 --> 00:13:33,120
alternatively we can give them access to

00:13:30,800 --> 00:13:34,720
the web console or the api access

00:13:33,120 --> 00:13:36,240
to the openstack cluster so they can do

00:13:34,720 --> 00:13:38,000
a little bit more things but generally

00:13:36,240 --> 00:13:39,920
that's all the projects need

00:13:38,000 --> 00:13:41,920
they also depend on reliability they

00:13:39,920 --> 00:13:43,839
expect this resource to be stable

00:13:41,920 --> 00:13:45,839
they they expect it to run they expect

00:13:43,839 --> 00:13:47,600
it to be able to

00:13:45,839 --> 00:13:49,600
run with their build pipeline pipelines

00:13:47,600 --> 00:13:51,279
as they expect

00:13:49,600 --> 00:13:52,880
the other part is performance they

00:13:51,279 --> 00:13:55,600
expect these systems to perform at a

00:13:52,880 --> 00:13:56,959
decent enough level to make them useful

00:13:55,600 --> 00:13:59,519
so we want to make sure that we provide

00:13:56,959 --> 00:14:01,680
enough cpu ram and disk resources

00:13:59,519 --> 00:14:04,320
now the way we have things set up we

00:14:01,680 --> 00:14:06,800
don't primarily do this in a manner that

00:14:04,320 --> 00:14:08,399
is good for doing like benchmark testing

00:14:06,800 --> 00:14:09,440
we we keep telling people that because

00:14:08,399 --> 00:14:11,360
sometimes they want to do

00:14:09,440 --> 00:14:13,760
benchmark testing but since this is a

00:14:11,360 --> 00:14:15,600
shared resource we we can't do that so

00:14:13,760 --> 00:14:17,040
we're doing performance in this expect

00:14:15,600 --> 00:14:18,639
expectation that

00:14:17,040 --> 00:14:20,560
things work good enough to be able to do

00:14:18,639 --> 00:14:22,079
the compilation

00:14:20,560 --> 00:14:24,160
the other thing we wanted to do is we

00:14:22,079 --> 00:14:26,000
wanted to make sure we had expandability

00:14:24,160 --> 00:14:26,399
and being able to grow as more projects

00:14:26,000 --> 00:14:28,560
were

00:14:26,399 --> 00:14:30,160
added onto the platform so we wanted to

00:14:28,560 --> 00:14:32,079
make sure that the architecture and the

00:14:30,160 --> 00:14:33,839
way we designed the cloud platform was

00:14:32,079 --> 00:14:36,079
easy to do that and thankfully

00:14:33,839 --> 00:14:38,320
openstack and sap for storage made it a

00:14:36,079 --> 00:14:40,399
lot easier to do that

00:14:38,320 --> 00:14:41,760
the other things we provide that we

00:14:40,399 --> 00:14:43,120
pride ourselves in at the open source

00:14:41,760 --> 00:14:44,240
lab is flexibility

00:14:43,120 --> 00:14:46,160
every project has a different

00:14:44,240 --> 00:14:47,920
requirement on how they want to

00:14:46,160 --> 00:14:49,600
host or how they want to manage their

00:14:47,920 --> 00:14:51,920
project and how they want to host things

00:14:49,600 --> 00:14:53,680
and so we try to be as open as flexible

00:14:51,920 --> 00:14:56,399
as possible with those requirements

00:14:53,680 --> 00:14:59,040
within reason as much as we can

00:14:56,399 --> 00:14:59,920
so we try to do our best with that and

00:14:59,040 --> 00:15:01,440
the last thing is

00:14:59,920 --> 00:15:03,199
we want to reduce that burden of

00:15:01,440 --> 00:15:04,320
maintaining the actual physical hardware

00:15:03,199 --> 00:15:06,880
that projects

00:15:04,320 --> 00:15:07,680
have a lot of projects tend to work with

00:15:06,880 --> 00:15:09,839
some of these

00:15:07,680 --> 00:15:11,839
vendors directly and then they have the

00:15:09,839 --> 00:15:13,839
headaches of having to deal with

00:15:11,839 --> 00:15:16,079
managing once hardware failures happen

00:15:13,839 --> 00:15:17,600
and and and support contracts and all of

00:15:16,079 --> 00:15:19,440
that and the nice thing with us is

00:15:17,600 --> 00:15:20,639
we've been doing this for so many years

00:15:19,440 --> 00:15:22,000
we know how to do it we know how to

00:15:20,639 --> 00:15:23,519
interact we know how to

00:15:22,000 --> 00:15:24,880
make sure that all they have to worry

00:15:23,519 --> 00:15:26,079
about is that a vm is up and it's

00:15:24,880 --> 00:15:28,320
working

00:15:26,079 --> 00:15:29,680
and we also work to maintain that we

00:15:28,320 --> 00:15:31,600
handle upgrades for

00:15:29,680 --> 00:15:33,360
any firmware or even on the hardware and

00:15:31,600 --> 00:15:36,880
so forth so that's kind of the goals

00:15:33,360 --> 00:15:36,880
that we wanted to provide with this

00:15:37,279 --> 00:15:41,360
so how do projects get access well for

00:15:39,600 --> 00:15:43,839
power we have a uh

00:15:41,360 --> 00:15:45,519
form that they they they put stuff in or

00:15:43,839 --> 00:15:47,120
they put information in

00:15:45,519 --> 00:15:48,639
so here's a picture of what it kind of

00:15:47,120 --> 00:15:50,480
looks like on the website

00:15:48,639 --> 00:15:52,000
basically the workflow is as we ask the

00:15:50,480 --> 00:15:52,880
simple questions to learn more about the

00:15:52,000 --> 00:15:54,480
project

00:15:52,880 --> 00:15:56,399
the form is submitted into our ticketing

00:15:54,480 --> 00:15:58,320
system which is rt based

00:15:56,399 --> 00:15:59,920
we wait for approval from an ibm

00:15:58,320 --> 00:16:00,160
representative to kind of have a thumbs

00:15:59,920 --> 00:16:02,000
up

00:16:00,160 --> 00:16:02,959
saying hey you know yeah that looks like

00:16:02,000 --> 00:16:04,160
a good thing we want to be able to

00:16:02,959 --> 00:16:05,839
provide

00:16:04,160 --> 00:16:07,920
and also let's just kind of just make

00:16:05,839 --> 00:16:09,360
sure like is this a legit project is it

00:16:07,920 --> 00:16:11,279
something that seems to be impactful

00:16:09,360 --> 00:16:13,360
enough to require to get access

00:16:11,279 --> 00:16:14,880
we obviously can't take every single

00:16:13,360 --> 00:16:15,920
project that gets access but we want to

00:16:14,880 --> 00:16:19,440
make sure that it

00:16:15,920 --> 00:16:21,279
meets a certain kind of bar um

00:16:19,440 --> 00:16:22,800
we typically get access granted within

00:16:21,279 --> 00:16:24,480
three business days i have a student

00:16:22,800 --> 00:16:26,320
that gets to sign that task

00:16:24,480 --> 00:16:27,680
and they they go ahead and they do that

00:16:26,320 --> 00:16:29,199
they get added to an

00:16:27,680 --> 00:16:30,959
announcement mailing list so that if we

00:16:29,199 --> 00:16:32,160
have any hardware issues or other issues

00:16:30,959 --> 00:16:34,560
they know about it

00:16:32,160 --> 00:16:36,160
and then the other thing that we do is

00:16:34,560 --> 00:16:37,519
troubleshooting issues so if they have

00:16:36,160 --> 00:16:38,240
any issues with their instance or

00:16:37,519 --> 00:16:40,320
anything

00:16:38,240 --> 00:16:41,680
they can send an email to this email

00:16:40,320 --> 00:16:42,880
address that goes to our ticketing

00:16:41,680 --> 00:16:44,079
system directly

00:16:42,880 --> 00:16:45,600
and then they can work with the open

00:16:44,079 --> 00:16:47,120
source lab to diagnose the problem

00:16:45,600 --> 00:16:48,959
whether it's a software issue

00:16:47,120 --> 00:16:50,160
or it's an actual issue with the

00:16:48,959 --> 00:16:51,440
architecture

00:16:50,160 --> 00:16:53,600
and then if things happen we can

00:16:51,440 --> 00:16:55,519
escalate that to ibm as needed

00:16:53,600 --> 00:16:58,480
so that's been a really big nice benefit

00:16:55,519 --> 00:17:00,800
with the power side of this

00:16:58,480 --> 00:17:03,519
on the ark64 side it's basically the

00:17:00,800 --> 00:17:05,120
same thing we have another form for that

00:17:03,519 --> 00:17:07,120
we ask the same kind of questions we

00:17:05,120 --> 00:17:09,600
wait for approval from an ampere

00:17:07,120 --> 00:17:10,959
representative which is currently peter

00:17:09,600 --> 00:17:12,799
and we go through the same thing where

00:17:10,959 --> 00:17:14,160
we get them added we get them on a

00:17:12,799 --> 00:17:15,760
mailing list

00:17:14,160 --> 00:17:18,079
we have a separate email address to deal

00:17:15,760 --> 00:17:21,520
with any kind of support tickets they

00:17:18,079 --> 00:17:21,520
work with us on any kind of

00:17:21,760 --> 00:17:26,319
issues that happen and also if there are

00:17:24,959 --> 00:17:28,160
any issues we can escalate that to

00:17:26,319 --> 00:17:29,919
ampere as needed and we can you know

00:17:28,160 --> 00:17:33,440
work through issues that we run into

00:17:29,919 --> 00:17:34,799
so we try to make that pretty easy

00:17:33,440 --> 00:17:36,559
so here's what the platform actually

00:17:34,799 --> 00:17:38,000
looks like from a cloud point of view

00:17:36,559 --> 00:17:40,960
so everything is running on top of

00:17:38,000 --> 00:17:42,320
openstack that provides the api driven

00:17:40,960 --> 00:17:44,799
platform for managing all of these

00:17:42,320 --> 00:17:46,320
various resources we have a web console

00:17:44,799 --> 00:17:48,080
so they can have uh

00:17:46,320 --> 00:17:49,679
they can get on a vnc basically under

00:17:48,080 --> 00:17:51,280
the system if they want to and kind of

00:17:49,679 --> 00:17:53,520
do some reboots if they want to to check

00:17:51,280 --> 00:17:54,640
that out we're currently using the rocky

00:17:53,520 --> 00:17:56,880
release

00:17:54,640 --> 00:17:58,080
we're a red hat or centos shop at the

00:17:56,880 --> 00:17:59,200
open source lab

00:17:58,080 --> 00:18:01,760
and so we're using the red hat

00:17:59,200 --> 00:18:03,520
distribution of openstack called rdo

00:18:01,760 --> 00:18:04,799
and we also use chef to manage all of

00:18:03,520 --> 00:18:06,960
our things

00:18:04,799 --> 00:18:08,799
so that's how we manage our systems uh

00:18:06,960 --> 00:18:10,320
currently we only provide compute block

00:18:08,799 --> 00:18:13,039
storage and image storage

00:18:10,320 --> 00:18:14,240
um we are considering adding additional

00:18:13,039 --> 00:18:16,240
services that

00:18:14,240 --> 00:18:17,919
uh openstack provides but it's basically

00:18:16,240 --> 00:18:19,360
based on what projects need and if they

00:18:17,919 --> 00:18:20,640
need those and then we'll work on adding

00:18:19,360 --> 00:18:22,799
that

00:18:20,640 --> 00:18:24,640
currently you only have ipv4 support but

00:18:22,799 --> 00:18:26,240
we will be adding ipv6 soon to our

00:18:24,640 --> 00:18:27,919
openstack

00:18:26,240 --> 00:18:29,520
from a hypervisor point of view

00:18:27,919 --> 00:18:32,000
everything is using kvm

00:18:29,520 --> 00:18:32,720
um we're actually using the qmu kvm ev

00:18:32,000 --> 00:18:34,640
package

00:18:32,720 --> 00:18:36,080
which is basically a red hat patched

00:18:34,640 --> 00:18:38,080
version that has some

00:18:36,080 --> 00:18:39,200
a more up to date with some nice patches

00:18:38,080 --> 00:18:40,799
included with it

00:18:39,200 --> 00:18:42,240
and then on the storage side we're using

00:18:40,799 --> 00:18:45,039
seth with which is a nice

00:18:42,240 --> 00:18:46,320
network storage easily expandable side

00:18:45,039 --> 00:18:46,960
power actually has their own cluster

00:18:46,320 --> 00:18:49,120
because they got

00:18:46,960 --> 00:18:51,440
hardware donated to us so we have that

00:18:49,120 --> 00:18:54,240
working while the arc cluster shares

00:18:51,440 --> 00:18:55,679
one that the osl built now before when

00:18:54,240 --> 00:18:57,840
we started all of this

00:18:55,679 --> 00:18:57,840
it

00:18:59,039 --> 00:19:01,840
we actually started all with local

00:19:00,400 --> 00:19:04,000
storage and that was great to start out

00:19:01,840 --> 00:19:04,799
with but we quickly ran into scalability

00:19:04,000 --> 00:19:08,160
issues

00:19:04,799 --> 00:19:09,840
so we have definitely gone through a

00:19:08,160 --> 00:19:11,360
a transformation over time of moving

00:19:09,840 --> 00:19:12,400
everything to seth which has made things

00:19:11,360 --> 00:19:15,679
a lot easier

00:19:12,400 --> 00:19:15,679
we're dealing with storage on this

00:19:15,919 --> 00:19:19,440
on the guest operating systems we

00:19:17,440 --> 00:19:20,799
support we try to support as many as we

00:19:19,440 --> 00:19:22,960
can within reason

00:19:20,799 --> 00:19:25,440
so we try to aim for all of the red hat

00:19:22,960 --> 00:19:28,720
based ones whether that's centos fedora

00:19:25,440 --> 00:19:29,280
rail itself currently for rel we don't

00:19:28,720 --> 00:19:30,960
have

00:19:29,280 --> 00:19:32,720
any kind of license currently site

00:19:30,960 --> 00:19:33,280
license but we're hoping to get that now

00:19:32,720 --> 00:19:36,000
that

00:19:33,280 --> 00:19:37,200
there's the the new collaboration well

00:19:36,000 --> 00:19:38,720
with ibm and

00:19:37,200 --> 00:19:40,960
and red hat working together so we'll

00:19:38,720 --> 00:19:42,400
see how that works in the long term

00:19:40,960 --> 00:19:43,600
but we can at least have the image up

00:19:42,400 --> 00:19:44,559
and if you have a license you can get

00:19:43,600 --> 00:19:46,240
that going

00:19:44,559 --> 00:19:48,400
we also have all the debian based ones

00:19:46,240 --> 00:19:50,000
the main ones we have debian and ubuntu

00:19:48,400 --> 00:19:51,600
we currently only target the lts

00:19:50,000 --> 00:19:54,880
releases of ubuntu

00:19:51,600 --> 00:19:57,200
but we can add um

00:19:54,880 --> 00:19:58,720
but we can add more as we see we also

00:19:57,200 --> 00:20:01,600
have an open suse leap

00:19:58,720 --> 00:20:02,799
instances or a guest image as well

00:20:01,600 --> 00:20:04,240
because there's a few users that want

00:20:02,799 --> 00:20:05,360
that but that's kind of where we're at

00:20:04,240 --> 00:20:06,880
right now

00:20:05,360 --> 00:20:08,320
if you have your own image that works

00:20:06,880 --> 00:20:09,520
with openstack we can certainly get that

00:20:08,320 --> 00:20:10,960
going

00:20:09,520 --> 00:20:12,400
we there were some users that actually

00:20:10,960 --> 00:20:13,600
still want to do a lot of support on

00:20:12,400 --> 00:20:17,039
powerpc

00:20:13,600 --> 00:20:18,320
64 big endian and they were able to do

00:20:17,039 --> 00:20:20,080
that on their own

00:20:18,320 --> 00:20:22,640
all of these images are built using

00:20:20,080 --> 00:20:22,960
packer i have a link there that goes to

00:20:22,640 --> 00:20:24,880
our

00:20:22,960 --> 00:20:26,960
packer templates which include actually

00:20:24,880 --> 00:20:34,000
everything that we have whether it's x86

00:20:26,960 --> 00:20:35,919
powerpc or arc64

00:20:34,000 --> 00:20:37,360
so let's go over some frequently asked

00:20:35,919 --> 00:20:38,159
questions first off we'll talk about

00:20:37,360 --> 00:20:41,360
power

00:20:38,159 --> 00:20:44,080
do we support big indian on on power

00:20:41,360 --> 00:20:45,039
otherwise known as ppc64 yes we do

00:20:44,080 --> 00:20:46,880
however

00:20:45,039 --> 00:20:48,159
a lot of the upstream distributions have

00:20:46,880 --> 00:20:51,760
stopped building

00:20:48,159 --> 00:20:53,200
for power pc64 and so

00:20:51,760 --> 00:20:54,960
there's older releases that we still

00:20:53,200 --> 00:20:56,400
have on the platform for guest images

00:20:54,960 --> 00:20:58,000
and you're welcome to use them

00:20:56,400 --> 00:20:59,120
but as time goes along we're not going

00:20:58,000 --> 00:21:01,120
to be able to support it in the long

00:20:59,120 --> 00:21:03,200
term as those end of life

00:21:01,120 --> 00:21:04,880
and also ibm has really shifted all of

00:21:03,200 --> 00:21:07,520
their focus onto

00:21:04,880 --> 00:21:08,880
uh little indian can i get access to

00:21:07,520 --> 00:21:10,640
bare metal machines

00:21:08,880 --> 00:21:12,159
it depends on the size of the project

00:21:10,640 --> 00:21:13,600
and the use case we have a couple of

00:21:12,159 --> 00:21:15,200
projects that are using that

00:21:13,600 --> 00:21:17,200
uh debian really likes to have full

00:21:15,200 --> 00:21:17,919
control of their hardware for security

00:21:17,200 --> 00:21:20,159
reasons so

00:21:17,919 --> 00:21:22,720
we do that alpine linux also has their

00:21:20,159 --> 00:21:26,640
own node

00:21:22,720 --> 00:21:28,480
and we also uh can also

00:21:26,640 --> 00:21:31,120
do a various things oh freebsd also has

00:21:28,480 --> 00:21:32,720
some access as well

00:21:31,120 --> 00:21:34,799
if you do need some temporary access to

00:21:32,720 --> 00:21:36,400
debug an issue we can probably do that

00:21:34,799 --> 00:21:38,080
we have one system on the side that we

00:21:36,400 --> 00:21:39,600
kind of use as our test

00:21:38,080 --> 00:21:42,000
system to kind of do that we can kind of

00:21:39,600 --> 00:21:44,080
use that as needed for that

00:21:42,000 --> 00:21:46,159
how does the osl get the hardware right

00:21:44,080 --> 00:21:47,120
now ibm either donates or loans the

00:21:46,159 --> 00:21:48,400
hardware

00:21:47,120 --> 00:21:49,840
uh the nice thing about the loaner

00:21:48,400 --> 00:21:51,280
systems for the open source lab is that

00:21:49,840 --> 00:21:53,360
includes all the hardware

00:21:51,280 --> 00:21:55,280
support for the life of the system so we

00:21:53,360 --> 00:21:56,840
don't have to pay for anything on that

00:21:55,280 --> 00:21:59,600
but we technically don't own the

00:21:56,840 --> 00:22:01,039
hardware however donated systems

00:21:59,600 --> 00:22:02,480
they come with a standard warranty and

00:22:01,039 --> 00:22:04,159
once that expires then we have to pay

00:22:02,480 --> 00:22:05,440
for that warranty which can be expensive

00:22:04,159 --> 00:22:07,120
depending on the hardware

00:22:05,440 --> 00:22:10,799
well that's a lot of the facts on that

00:22:07,120 --> 00:22:14,080
one on the ac64 side do we support arms

00:22:10,799 --> 00:22:17,840
or arm32 yes we do for arm

00:22:14,080 --> 00:22:20,000
v7 and 8 8a this is helpful for the

00:22:17,840 --> 00:22:21,760
newer users of the raspberry pi

00:22:20,000 --> 00:22:23,200
um i currently don't have any images

00:22:21,760 --> 00:22:24,240
right now but the images are a little

00:22:23,200 --> 00:22:26,240
bit

00:22:24,240 --> 00:22:28,640
more cumbersome to work with on the

00:22:26,240 --> 00:22:32,159
cluster primarily because

00:22:28,640 --> 00:22:34,000
uh the way the systems work on the arm64

00:22:32,159 --> 00:22:36,400
is they require efi to boot

00:22:34,000 --> 00:22:37,120
and most of these uh arm 32 systems

00:22:36,400 --> 00:22:39,520
don't support

00:22:37,120 --> 00:22:41,280
efi out of the box so we end up having

00:22:39,520 --> 00:22:43,200
to boot the systems with an external

00:22:41,280 --> 00:22:44,880
kernel in inter mfs

00:22:43,200 --> 00:22:46,559
but i was able to test this and get this

00:22:44,880 --> 00:22:48,960
going and uh

00:22:46,559 --> 00:22:50,559
plan on having some some images for this

00:22:48,960 --> 00:22:53,440
fairly soon

00:22:50,559 --> 00:22:55,360
currently though there is no uh fully

00:22:53,440 --> 00:22:57,679
virtual or fully hyper virtualized

00:22:55,360 --> 00:22:59,440
support for arm v6 and below that

00:22:57,679 --> 00:23:02,799
basically is the original pi

00:22:59,440 --> 00:23:04,240
2 and 0. but we might be able to do

00:23:02,799 --> 00:23:05,840
emulation but i don't know if that's

00:23:04,240 --> 00:23:07,280
really going to help or anything

00:23:05,840 --> 00:23:08,960
but if we get a lot of requests with

00:23:07,280 --> 00:23:11,840
that we can take a look at that

00:23:08,960 --> 00:23:13,679
we're really targeting arm64 though can

00:23:11,840 --> 00:23:15,440
i get access to the bare metal machines

00:23:13,679 --> 00:23:18,080
yes and it depends on the use case and

00:23:15,440 --> 00:23:20,080
for how long we currently don't have any

00:23:18,080 --> 00:23:21,520
projects uh having a full access to a

00:23:20,080 --> 00:23:22,000
system but we can certainly change all

00:23:21,520 --> 00:23:24,720
of that

00:23:22,000 --> 00:23:26,480
since we just started the next question

00:23:24,720 --> 00:23:28,080
how do we get the hardware well ampere

00:23:26,480 --> 00:23:30,080
computing currently loans

00:23:28,080 --> 00:23:31,520
the hardware uh they include the

00:23:30,080 --> 00:23:32,960
hardware for the

00:23:31,520 --> 00:23:35,280
full hardware support for the life of

00:23:32,960 --> 00:23:36,000
the system and it also allows ampere

00:23:35,280 --> 00:23:38,640
computing to send

00:23:36,000 --> 00:23:40,480
us newer models as they become available

00:23:38,640 --> 00:23:43,279
so that makes it a lot more flexible for

00:23:40,480 --> 00:23:43,279
us to deal with that

00:23:44,000 --> 00:23:47,440
how do we fund the both of these

00:23:46,240 --> 00:23:49,360
projects so

00:23:47,440 --> 00:23:51,120
a lot of these require some kind of way

00:23:49,360 --> 00:23:53,600
of paying for my salary the student

00:23:51,120 --> 00:23:55,919
salary and other miscellaneous expenses

00:23:53,600 --> 00:23:57,440
currently ibm does court quarterly

00:23:55,919 --> 00:23:58,000
quarterly cash donations or they have

00:23:57,440 --> 00:24:00,480
been for

00:23:58,000 --> 00:24:01,840
several several years um and this last

00:24:00,480 --> 00:24:03,520
year we actually switched to a formal

00:24:01,840 --> 00:24:05,039
contract with deliverables

00:24:03,520 --> 00:24:06,559
and so that's a lot better for us

00:24:05,039 --> 00:24:08,080
because it's a multi-year contract and

00:24:06,559 --> 00:24:09,039
we know exactly how much money we're

00:24:08,080 --> 00:24:11,120
getting and we can

00:24:09,039 --> 00:24:13,120
allocate that so that's been really good

00:24:11,120 --> 00:24:14,960
to do that ampere computing we just

00:24:13,120 --> 00:24:16,240
started out with an annual cash donation

00:24:14,960 --> 00:24:18,559
and we might switch to them to the

00:24:16,240 --> 00:24:20,000
formal contract eventually but that that

00:24:18,559 --> 00:24:21,279
really helps us make sure that we can

00:24:20,000 --> 00:24:22,880
keep this

00:24:21,279 --> 00:24:25,600
these systems going and maintain them

00:24:22,880 --> 00:24:25,600
for the long run

00:24:26,640 --> 00:24:30,559
so there's obviously some nuances

00:24:28,559 --> 00:24:32,080
between running these systems

00:24:30,559 --> 00:24:35,200
compared to running it on your regular

00:24:32,080 --> 00:24:37,279
x86 so on the power side

00:24:35,200 --> 00:24:39,360
um they have various models that they

00:24:37,279 --> 00:24:42,640
have they have the l line

00:24:39,360 --> 00:24:44,880
and and the open power lc line that are

00:24:42,640 --> 00:24:46,799
most common with writing linux so the

00:24:44,880 --> 00:24:48,799
outline is what actually looks like a

00:24:46,799 --> 00:24:49,840
regular ibm box it looks like a regular

00:24:48,799 --> 00:24:51,279
ibm box

00:24:49,840 --> 00:24:53,120
and that actually can run in two

00:24:51,279 --> 00:24:55,679
different modes the power vm mode

00:24:53,120 --> 00:24:57,520
which is the lpar as i talked earlier

00:24:55,679 --> 00:24:58,880
that talks to an hmc which is a hardware

00:24:57,520 --> 00:25:01,039
management console

00:24:58,880 --> 00:25:02,400
um it's a system that basically manages

00:25:01,039 --> 00:25:03,840
all of the systems and it can

00:25:02,400 --> 00:25:06,400
call home for support requests and

00:25:03,840 --> 00:25:09,520
things like that

00:25:06,400 --> 00:25:12,640
or it can run an opel firmware which is

00:25:09,520 --> 00:25:14,480
an abstracted firmware mode that

00:25:12,640 --> 00:25:16,559
makes the system essentially boot like a

00:25:14,480 --> 00:25:18,799
regular it looks like a regular system

00:25:16,559 --> 00:25:19,679
um and i can access it with ipmi and all

00:25:18,799 --> 00:25:22,080
of that

00:25:19,679 --> 00:25:23,919
um but that requires no having knowledge

00:25:22,080 --> 00:25:24,960
that there's a service processor on that

00:25:23,919 --> 00:25:26,159
you have to log into

00:25:24,960 --> 00:25:28,720
and then change the setting in there to

00:25:26,159 --> 00:25:30,000
get it to opel also there's no vga

00:25:28,720 --> 00:25:32,000
output it's only serial

00:25:30,000 --> 00:25:33,919
so that's also kind of a you know if

00:25:32,000 --> 00:25:35,840
you're used to dealing with x86 that's

00:25:33,919 --> 00:25:37,600
another thing you have to deal with

00:25:35,840 --> 00:25:39,039
all of our power 8 systems currently at

00:25:37,600 --> 00:25:42,400
least on the compute side

00:25:39,039 --> 00:25:43,840
are all these l lines on the newer

00:25:42,400 --> 00:25:46,000
systems they have another line called

00:25:43,840 --> 00:25:47,360
the ibm open power lc

00:25:46,000 --> 00:25:49,360
and these are actually super micro

00:25:47,360 --> 00:25:50,320
chassis which was pretty wild when we

00:25:49,360 --> 00:25:52,159
got them

00:25:50,320 --> 00:25:54,880
i was like is this actually a power box

00:25:52,159 --> 00:25:57,120
that looks like a regular machine

00:25:54,880 --> 00:25:58,799
but sure enough it is it runs power um

00:25:57,120 --> 00:25:59,440
but that one only supports the opal

00:25:58,799 --> 00:26:01,440
booting

00:25:59,440 --> 00:26:03,360
and you actually can just plug in a vga

00:26:01,440 --> 00:26:04,640
cable in the back and it boots up

00:26:03,360 --> 00:26:06,159
and you're there and there you go you

00:26:04,640 --> 00:26:10,880
can manage all that systems and it uses

00:26:06,159 --> 00:26:12,720
ipmi as well

00:26:10,880 --> 00:26:14,000
firmware is also a little bit different

00:26:12,720 --> 00:26:15,919
um

00:26:14,000 --> 00:26:17,919
from power it boots up into an

00:26:15,919 --> 00:26:19,760
environment called pettit boot

00:26:17,919 --> 00:26:21,200
it's basically a really fancy boot

00:26:19,760 --> 00:26:23,039
loader that's running linux

00:26:21,200 --> 00:26:24,400
so you can actually get into a bash

00:26:23,039 --> 00:26:25,679
prompt or shell prompt i think it's

00:26:24,400 --> 00:26:27,440
running busybox

00:26:25,679 --> 00:26:28,880
and you can run various utilities such

00:26:27,440 --> 00:26:31,760
as setting up maybe hardware

00:26:28,880 --> 00:26:33,279
rate controllers and those various

00:26:31,760 --> 00:26:35,039
things you can also do net boots from

00:26:33,279 --> 00:26:37,360
there as well

00:26:35,039 --> 00:26:38,400
the other nuance is that between the

00:26:37,360 --> 00:26:39,919
different lines

00:26:38,400 --> 00:26:41,440
actually updating that firmware is

00:26:39,919 --> 00:26:43,200
different and you have to read the

00:26:41,440 --> 00:26:43,840
documentation on how to do that so that

00:26:43,200 --> 00:26:47,200
was kind of

00:26:43,840 --> 00:26:47,200
kind of interesting to deal with

00:26:47,360 --> 00:26:52,080
on the ampere computing side the bios is

00:26:50,559 --> 00:26:55,200
very similar to the x86

00:26:52,080 --> 00:26:56,960
it very much acted like an x86 box the

00:26:55,200 --> 00:26:57,279
only other thing that was different is

00:26:56,960 --> 00:26:59,360
that

00:26:57,279 --> 00:27:01,039
efi was required for booting so we had

00:26:59,360 --> 00:27:04,159
to update some of our

00:27:01,039 --> 00:27:05,840
depth booting systems to support efi all

00:27:04,159 --> 00:27:07,600
firmware updates currently i could tell

00:27:05,840 --> 00:27:08,960
only worked for the bmc web console but

00:27:07,600 --> 00:27:10,080
it worked seamlessly and i didn't have

00:27:08,960 --> 00:27:13,200
any issues

00:27:10,080 --> 00:27:14,159
um it'll boot via the vaga or the via

00:27:13,200 --> 00:27:16,000
the serial

00:27:14,159 --> 00:27:17,760
on all of our systems we try to actually

00:27:16,000 --> 00:27:18,799
redirect everything to serial so that

00:27:17,760 --> 00:27:20,640
it's easier to

00:27:18,799 --> 00:27:21,919
connect remotely and can kind of see

00:27:20,640 --> 00:27:23,840
what's going on

00:27:21,919 --> 00:27:26,720
so the systems are really simple to use

00:27:23,840 --> 00:27:28,159
which is really nice

00:27:26,720 --> 00:27:29,919
let's move on to the technical

00:27:28,159 --> 00:27:31,919
challenges that we've run into

00:27:29,919 --> 00:27:33,679
so the first one is general binary

00:27:31,919 --> 00:27:36,000
package availability

00:27:33,679 --> 00:27:36,960
and the most part these days binaries

00:27:36,000 --> 00:27:38,159
are available

00:27:36,960 --> 00:27:40,399
but there still might be a few things

00:27:38,159 --> 00:27:41,760
that aren't available and most of that

00:27:40,399 --> 00:27:42,799
is if you're trying to get things

00:27:41,760 --> 00:27:44,000
outside of

00:27:42,799 --> 00:27:46,159
what's already included in the

00:27:44,000 --> 00:27:48,640
distribution you might have some issues

00:27:46,159 --> 00:27:49,600
so one example is um we've been using

00:27:48,640 --> 00:27:52,399
the upstream

00:27:49,600 --> 00:27:53,520
repositories from docker to use their

00:27:52,399 --> 00:27:54,880
binaries since they're

00:27:53,520 --> 00:27:56,399
generally a little bit more up to date

00:27:54,880 --> 00:27:58,880
than what you can get from the

00:27:56,399 --> 00:27:59,679
distributions however for powerpc little

00:27:58,880 --> 00:28:01,360
indian

00:27:59,679 --> 00:28:02,559
they aren't building those anymore they

00:28:01,360 --> 00:28:04,399
they were building them but they haven't

00:28:02,559 --> 00:28:06,240
been building them

00:28:04,399 --> 00:28:07,200
but but you know if i have the system i

00:28:06,240 --> 00:28:08,559
can work through and build it but it's

00:28:07,200 --> 00:28:10,240
kind of annoying to do that

00:28:08,559 --> 00:28:12,320
so i might have to revert back to using

00:28:10,240 --> 00:28:15,200
the distribution versions of that

00:28:12,320 --> 00:28:16,960
um so that's good the other part is with

00:28:15,200 --> 00:28:20,320
openstack so

00:28:16,960 --> 00:28:22,480
um right now everything at least

00:28:20,320 --> 00:28:23,679
if you're a sent off based system and i

00:28:22,480 --> 00:28:25,760
think the same is probably

00:28:23,679 --> 00:28:27,120
with ubuntu as well all the binary

00:28:25,760 --> 00:28:27,840
packages that you need to run are

00:28:27,120 --> 00:28:30,960
available

00:28:27,840 --> 00:28:32,720
on power and on arc 64. um

00:28:30,960 --> 00:28:34,640
but early on this was not the case so i

00:28:32,720 --> 00:28:36,159
ended up having to build

00:28:34,640 --> 00:28:38,320
some of these things manually and have

00:28:36,159 --> 00:28:39,039
my own repository thankfully with

00:28:38,320 --> 00:28:41,679
openstack

00:28:39,039 --> 00:28:43,520
it's mostly just a power a python

00:28:41,679 --> 00:28:46,320
application so a lot of those were just

00:28:43,520 --> 00:28:47,360
uh no work uh packages so they i didn't

00:28:46,320 --> 00:28:48,880
need to rebuild them

00:28:47,360 --> 00:28:50,799
but there were a few things that needed

00:28:48,880 --> 00:28:52,640
to be rebuilt that i needed to do

00:28:50,799 --> 00:28:54,960
so that was a fun thing early on but

00:28:52,640 --> 00:28:56,320
thankfully when we got the uh arc 64

00:28:54,960 --> 00:28:56,799
machines i didn't have to do anything it

00:28:56,320 --> 00:29:00,080
just

00:28:56,799 --> 00:29:01,760
worked out of the box um even to

00:29:00,080 --> 00:29:03,840
configure openstack i just had to make a

00:29:01,760 --> 00:29:06,000
few minor adjustments and it worked

00:29:03,840 --> 00:29:08,000
um one thing to note with power we

00:29:06,000 --> 00:29:11,039
cannot migrate instances between power8

00:29:08,000 --> 00:29:12,399
and power9 hypervisors

00:29:11,039 --> 00:29:15,520
but we can certainly spin up new

00:29:12,399 --> 00:29:15,520
instances between the two

00:29:17,360 --> 00:29:22,000
so uh on the kvm side there was some

00:29:20,559 --> 00:29:23,200
really a lot of problems on the power

00:29:22,000 --> 00:29:25,679
that we had to deal with

00:29:23,200 --> 00:29:26,320
or things that we needed to deal with so

00:29:25,679 --> 00:29:28,080
smt

00:29:26,320 --> 00:29:30,320
has to be disabled on the hypervisor or

00:29:28,080 --> 00:29:31,760
hyperthreading essentially

00:29:30,320 --> 00:29:33,360
otherwise the system doesn't work

00:29:31,760 --> 00:29:35,679
properly

00:29:33,360 --> 00:29:38,320
later on we also ran into cma memory

00:29:35,679 --> 00:29:40,799
which is contiguous memory allocation

00:29:38,320 --> 00:29:42,799
on the power8 systems at a certain point

00:29:40,799 --> 00:29:44,480
we couldn't spin up vms even though we

00:29:42,799 --> 00:29:45,360
had plenty of actual memory available in

00:29:44,480 --> 00:29:48,080
the systems

00:29:45,360 --> 00:29:48,799
the actual cma memory on the system was

00:29:48,080 --> 00:29:50,960
um

00:29:48,799 --> 00:29:52,720
was full with and it was kind of based

00:29:50,960 --> 00:29:53,279
on how power does the virtualization

00:29:52,720 --> 00:29:55,440
layer

00:29:53,279 --> 00:29:59,039
so we had to do a little bit of a kernel

00:29:55,440 --> 00:29:59,039
tunable when we booted the system up

00:29:59,600 --> 00:30:02,880
so we had to work around that we

00:30:01,200 --> 00:30:04,799
actually had to use a mainline kernel to

00:30:02,880 --> 00:30:05,520
be able to see how much cma memory we

00:30:04,799 --> 00:30:07,120
had

00:30:05,520 --> 00:30:09,279
because the the version that came with

00:30:07,120 --> 00:30:12,000
centos doesn't display that at all so we

00:30:09,279 --> 00:30:13,600
had no idea how much memory it was

00:30:12,000 --> 00:30:15,120
the other thing to note with on guest

00:30:13,600 --> 00:30:16,960
you must install this package called

00:30:15,120 --> 00:30:18,799
ppc64 diag

00:30:16,960 --> 00:30:20,320
and that allows for hot plugging devices

00:30:18,799 --> 00:30:23,279
so if you're if you want to have the

00:30:20,320 --> 00:30:26,159
ability to be able to dynamically add

00:30:23,279 --> 00:30:27,440
interfaces or disks and so forth you

00:30:26,159 --> 00:30:28,240
need to have this installed and this

00:30:27,440 --> 00:30:30,159
isn't really

00:30:28,240 --> 00:30:32,080
apparent when you first do this and a

00:30:30,159 --> 00:30:34,799
lot of the upstream

00:30:32,080 --> 00:30:36,080
uh guest images that were created don't

00:30:34,799 --> 00:30:38,240
always include this sometimes

00:30:36,080 --> 00:30:40,159
so you kind of have to think about that

00:30:38,240 --> 00:30:42,240
one nice thing is that booting guests

00:30:40,159 --> 00:30:43,760
between uh bikini and middle indian is

00:30:42,240 --> 00:30:46,320
easy you basically just

00:30:43,760 --> 00:30:48,080
uh install which whichever iso you want

00:30:46,320 --> 00:30:51,200
that works it works the very same way

00:30:48,080 --> 00:30:54,480
doing a 32-bit 64-bit 64. x8

00:30:51,200 --> 00:30:55,760
x86 i made um and i already mentioned

00:30:54,480 --> 00:30:57,279
about the main line but we've

00:30:55,760 --> 00:30:58,960
we've really been using the mainline

00:30:57,279 --> 00:31:00,799
kernel to get the latest features and

00:30:58,960 --> 00:31:01,360
fixes for a lot of the issues we ran

00:31:00,799 --> 00:31:03,120
into

00:31:01,360 --> 00:31:04,559
so we try to follow the latest lps

00:31:03,120 --> 00:31:05,600
kernel upstream and build around

00:31:04,559 --> 00:31:07,200
internally

00:31:05,600 --> 00:31:08,799
we try to have the configuration as

00:31:07,200 --> 00:31:10,240
close to what centos has with a few

00:31:08,799 --> 00:31:14,240
other minor

00:31:10,240 --> 00:31:16,720
adjustments to it when power 9 came out

00:31:14,240 --> 00:31:18,159
support was really special for centos 7

00:31:16,720 --> 00:31:20,480
and rail seven

00:31:18,159 --> 00:31:22,159
basically the kernel they had originally

00:31:20,480 --> 00:31:23,039
for just would not work so they had to

00:31:22,159 --> 00:31:25,200
create

00:31:23,039 --> 00:31:27,039
a new kernel specifically for it and so

00:31:25,200 --> 00:31:29,600
do the installation was really

00:31:27,039 --> 00:31:29,600
interesting

00:31:30,840 --> 00:31:36,080
um but uh with uh synthos eight relay

00:31:34,799 --> 00:31:37,919
that's not an issue it's actually a

00:31:36,080 --> 00:31:39,600
first class citizen of the of the of the

00:31:37,919 --> 00:31:42,320
operating of the platforms right now so

00:31:39,600 --> 00:31:46,000
that worked really well

00:31:42,320 --> 00:31:49,279
on arc64 um all the guests must boot

00:31:46,000 --> 00:31:51,600
using efi so this requires hypervisors

00:31:49,279 --> 00:31:53,120
having a special package installed

00:31:51,600 --> 00:31:54,799
called the arm architectural virtual

00:31:53,120 --> 00:31:59,279
machine firmware or a

00:31:54,799 --> 00:32:01,120
vmf that provides that special efi

00:31:59,279 --> 00:32:03,120
firmware that you need to have and it

00:32:01,120 --> 00:32:04,799
also required some special qmu flags to

00:32:03,120 --> 00:32:06,080
get this working with packer initially

00:32:04,799 --> 00:32:08,559
so i had to set

00:32:06,080 --> 00:32:10,640
some uh some settings on the machines

00:32:08,559 --> 00:32:12,799
and then i also had to point to the bios

00:32:10,640 --> 00:32:15,039
um thankfully openstack just knew about

00:32:12,799 --> 00:32:16,960
this uh already so when i spun up

00:32:15,039 --> 00:32:18,399
instances it would automatically do that

00:32:16,960 --> 00:32:19,840
but when i was wanting to build my own

00:32:18,399 --> 00:32:21,840
images with packer i had to make sure i

00:32:19,840 --> 00:32:23,919
included that in there

00:32:21,840 --> 00:32:25,679
on the hypervisor very little changes i

00:32:23,919 --> 00:32:26,880
had to do i don't have to deal with smcp

00:32:25,679 --> 00:32:28,640
or anything

00:32:26,880 --> 00:32:30,480
we're only currently running in a known

00:32:28,640 --> 00:32:32,240
issue that ampere knows about

00:32:30,480 --> 00:32:34,240
using the 10 gig nicks that we're using

00:32:32,240 --> 00:32:36,000
that are causing some random mock-ups

00:32:34,240 --> 00:32:38,159
um thankfully we seem to have mitigated

00:32:36,000 --> 00:32:40,000
most of this by using a mainline kernel

00:32:38,159 --> 00:32:41,039
but it's still happening now now and

00:32:40,000 --> 00:32:44,399
then but hopefully this will get

00:32:41,039 --> 00:32:44,399
resolved later on

00:32:45,440 --> 00:32:49,039
so oh i guess that's at the end so we

00:32:47,440 --> 00:32:57,840
can open this up for any questions if

00:32:49,039 --> 00:32:57,840
anybody has any

00:32:59,519 --> 00:33:03,519
i don't see any questions right now

00:33:07,600 --> 00:33:11,840
peter do you have anything else you want

00:33:09,200 --> 00:33:11,840
to add to this

00:33:12,799 --> 00:33:19,039
uh now just if there's anybody uh

00:33:16,240 --> 00:33:20,159
listening uh from any particular open

00:33:19,039 --> 00:33:24,000
source project that

00:33:20,159 --> 00:33:25,519
is interested in uh hosting please uh

00:33:24,000 --> 00:33:27,600
you know follow the links included in

00:33:25,519 --> 00:33:30,799
the presentation to

00:33:27,600 --> 00:33:33,600
uh you know send in uh a request

00:33:30,799 --> 00:33:33,919
and uh we'll do what we can to expedite

00:33:33,600 --> 00:33:37,200
uh

00:33:33,919 --> 00:33:37,200
access as soon as possible

00:33:37,279 --> 00:33:40,320
oh we got one question are the slides

00:33:38,880 --> 00:33:40,799
going to be available and i'm assuming

00:33:40,320 --> 00:33:43,519
yes

00:33:40,799 --> 00:33:44,799
these will all be uh published uh once

00:33:43,519 --> 00:33:47,120
everything is done here i'll make sure

00:33:44,799 --> 00:33:47,120
of that

00:33:48,320 --> 00:33:52,240
hey i'm very excited to see uh growth

00:33:50,960 --> 00:33:54,640
and expansion on the arm

00:33:52,240 --> 00:33:57,519
64 systems that we have and getting more

00:33:54,640 --> 00:33:57,519
projects on that

00:33:58,799 --> 00:34:01,840
yeah i can say just from my own

00:34:00,320 --> 00:34:03,519
experience you know working with you

00:34:01,840 --> 00:34:05,600
lance and some of the other

00:34:03,519 --> 00:34:06,559
projects i'm working with in the in the

00:34:05,600 --> 00:34:09,040
community

00:34:06,559 --> 00:34:10,079
there's definitely a need for

00:34:09,040 --> 00:34:13,679
server-based

00:34:10,079 --> 00:34:16,960
arm computing in open source

00:34:13,679 --> 00:34:19,280
development ecosystems what i've

00:34:16,960 --> 00:34:20,159
found is in most cases as you mentioned

00:34:19,280 --> 00:34:22,480
earlier

00:34:20,159 --> 00:34:23,599
it's only uh you know their only frame

00:34:22,480 --> 00:34:25,919
of reference

00:34:23,599 --> 00:34:26,639
for arm-based computing is raspberry pi

00:34:25,919 --> 00:34:29,599
hardware

00:34:26,639 --> 00:34:31,679
or some of the other tinkerboards and uh

00:34:29,599 --> 00:34:35,440
i know for a fact when

00:34:31,679 --> 00:34:36,480
they get to use uh arm server platform

00:34:35,440 --> 00:34:39,200
that has

00:34:36,480 --> 00:34:40,480
server conveniences like uh remote

00:34:39,200 --> 00:34:43,200
management

00:34:40,480 --> 00:34:45,440
and uh you know a lot of the other

00:34:43,200 --> 00:34:48,879
capabilities you typically find in

00:34:45,440 --> 00:34:51,919
uh you know the data center grade

00:34:48,879 --> 00:34:52,879
server platforms um they get really

00:34:51,919 --> 00:34:55,760
excited

00:34:52,879 --> 00:34:57,680
so it's a uh yeah it's an interesting

00:34:55,760 --> 00:34:59,440
space to be in to see

00:34:57,680 --> 00:35:01,040
uh you know a lot of the change that's

00:34:59,440 --> 00:35:04,160
occurring in the data center

00:35:01,040 --> 00:35:06,160
uh you know having um you know working

00:35:04,160 --> 00:35:09,440
for an arm server company

00:35:06,160 --> 00:35:11,760
and having uh you know seeing

00:35:09,440 --> 00:35:13,599
what you can do with real arm computing

00:35:11,760 --> 00:35:15,920
power and data center from a

00:35:13,599 --> 00:35:17,599
density and compute i think it's going

00:35:15,920 --> 00:35:20,000
to be real interesting

00:35:17,599 --> 00:35:20,880
uh you know to see what happens in the

00:35:20,000 --> 00:35:24,320
future

00:35:20,880 --> 00:35:25,359
so it's good times for for arm computing

00:35:24,320 --> 00:35:27,119
i think

00:35:25,359 --> 00:35:28,960
yeah one thing i was going to note that

00:35:27,119 --> 00:35:31,040
i didn't put in a slide is when i got

00:35:28,960 --> 00:35:32,880
these systems all rack and running

00:35:31,040 --> 00:35:35,680
one of the most amazing things i noticed

00:35:32,880 --> 00:35:36,880
was on the arm 64 systems when i powered

00:35:35,680 --> 00:35:39,119
everything on

00:35:36,880 --> 00:35:40,720
and got everything working the power

00:35:39,119 --> 00:35:43,599
being used in that rack was

00:35:40,720 --> 00:35:45,359
so much less than what i was expecting i

00:35:43,599 --> 00:35:48,560
think i figured out the

00:35:45,359 --> 00:35:50,079
i have a top of the top of the rack a

00:35:48,560 --> 00:35:51,839
regular one gig switch and then two

00:35:50,079 --> 00:35:53,760
arista 10 gig switches

00:35:51,839 --> 00:35:55,680
in there and i think out of that rack

00:35:53,760 --> 00:35:58,240
with all the 12 systems running

00:35:55,680 --> 00:35:59,839
the the ampere systems was only using 60

00:35:58,240 --> 00:36:01,359
of the power in that rack the rest of it

00:35:59,839 --> 00:36:02,800
were all the other systems

00:36:01,359 --> 00:36:05,359
i think they were running at maybe what

00:36:02,800 --> 00:36:05,680
was it it was like 170 watts each i

00:36:05,359 --> 00:36:08,079
think

00:36:05,680 --> 00:36:09,520
idling or something like that it's quite

00:36:08,079 --> 00:36:11,920
amazing you can pack a lot of these

00:36:09,520 --> 00:36:13,359
systems into a rack and not have to use

00:36:11,920 --> 00:36:15,839
a lot of power

00:36:13,359 --> 00:36:17,280
um ironically the power systems consume

00:36:15,839 --> 00:36:18,240
a lot of power especially if they have

00:36:17,280 --> 00:36:19,680
gpus

00:36:18,240 --> 00:36:22,079
connected into them which we have a few

00:36:19,680 --> 00:36:24,560
of them and they they are very loud

00:36:22,079 --> 00:36:25,839
when they turn on but but yeah that's

00:36:24,560 --> 00:36:26,960
that's one of the amazing things i like

00:36:25,839 --> 00:36:28,400
about these systems is their power

00:36:26,960 --> 00:36:31,680
consumption

00:36:28,400 --> 00:36:34,000
yep just to add to that you know as as

00:36:31,680 --> 00:36:35,680
the computing density increases right

00:36:34,000 --> 00:36:36,480
the physics of the rack doesn't really

00:36:35,680 --> 00:36:38,000
change

00:36:36,480 --> 00:36:40,000
you can only really get so much

00:36:38,000 --> 00:36:41,200
electricity into the same amount of

00:36:40,000 --> 00:36:43,839
physical space

00:36:41,200 --> 00:36:44,960
so one of the you know challenges that

00:36:43,839 --> 00:36:47,119
we're trying to address

00:36:44,960 --> 00:36:48,240
is you know specifically you know trying

00:36:47,119 --> 00:36:50,160
to address from inferior

00:36:48,240 --> 00:36:51,760
is specifically building a platform a

00:36:50,160 --> 00:36:53,599
computing platform

00:36:51,760 --> 00:36:55,200
that will allow you to achieve the

00:36:53,599 --> 00:36:57,440
maximum density possible

00:36:55,200 --> 00:36:58,400
while uh you know being as efficient as

00:36:57,440 --> 00:37:01,760
possible

00:36:58,400 --> 00:37:03,680
uh you know um and uh hopefully

00:37:01,760 --> 00:37:05,040
getting as much compute into the same

00:37:03,680 --> 00:37:08,320
physical uh

00:37:05,040 --> 00:37:11,520
space with as many cores um

00:37:08,320 --> 00:37:11,920
you know to to build and be sufficient

00:37:11,520 --> 00:37:16,160
for

00:37:11,920 --> 00:37:18,480
cloud operations right so um yeah it's a

00:37:16,160 --> 00:37:19,920
very very you know i think we're trying

00:37:18,480 --> 00:37:20,400
to address the problems that you're

00:37:19,920 --> 00:37:22,400
gonna see

00:37:20,400 --> 00:37:24,240
especially in times like this where

00:37:22,400 --> 00:37:25,839
people are being driven towards

00:37:24,240 --> 00:37:27,520
you know cloud computing and service

00:37:25,839 --> 00:37:30,480
providers um

00:37:27,520 --> 00:37:32,800
you know the need for more efficient

00:37:30,480 --> 00:37:36,560
computational power is definitely

00:37:32,800 --> 00:37:39,839
uh i would say high on it on those

00:37:36,560 --> 00:37:41,839
uh types of providers lists and uh

00:37:39,839 --> 00:37:43,760
you know being able to work for a

00:37:41,839 --> 00:37:46,560
company that provides a solution

00:37:43,760 --> 00:37:47,200
uh for high performance computing uh

00:37:46,560 --> 00:37:50,640
that's

00:37:47,200 --> 00:37:53,839
efficient and uh you know also

00:37:50,640 --> 00:37:57,760
uh optimized for uh for

00:37:53,839 --> 00:38:00,160
cloud native platforms is is uh

00:37:57,760 --> 00:38:02,720
extremely fun and and entertaining at

00:38:00,160 --> 00:38:02,720
the same time

00:38:03,040 --> 00:38:06,400
yeah one thing i was also going to note

00:38:05,119 --> 00:38:08,320
is that um

00:38:06,400 --> 00:38:10,400
one nice thing about us getting involved

00:38:08,320 --> 00:38:12,240
in this early on especially

00:38:10,400 --> 00:38:14,000
i know we we encountered that that one

00:38:12,240 --> 00:38:15,680
nick issue on the ampere system

00:38:14,000 --> 00:38:18,079
but also on the power side when we first

00:38:15,680 --> 00:38:20,640
started this we actually ran into some

00:38:18,079 --> 00:38:22,800
bugs and issues that were discovered

00:38:20,640 --> 00:38:24,720
before they were released to the ga

00:38:22,800 --> 00:38:26,960
so we were actually great to kind of be

00:38:24,720 --> 00:38:28,720
their q a in a way of testing

00:38:26,960 --> 00:38:30,240
and uh being able to catch these things

00:38:28,720 --> 00:38:31,280
before maybe the bigger providers run

00:38:30,240 --> 00:38:33,599
into that so

00:38:31,280 --> 00:38:34,960
that's one experience that i really am

00:38:33,599 --> 00:38:36,240
you know it's a pain for me if i have to

00:38:34,960 --> 00:38:37,920
work around an issue

00:38:36,240 --> 00:38:40,000
but it's also nice to know that i'm

00:38:37,920 --> 00:38:40,960
helping out down the road

00:38:40,000 --> 00:38:43,280
and the other thing i was going to

00:38:40,960 --> 00:38:45,359
mention was um

00:38:43,280 --> 00:38:47,200
it's also been great working with both

00:38:45,359 --> 00:38:48,880
ampere computing and ibm

00:38:47,200 --> 00:38:50,320
they both have been really supportive

00:38:48,880 --> 00:38:51,760
neither one of them been saying no you

00:38:50,320 --> 00:38:53,680
can't do that with them and

00:38:51,760 --> 00:38:55,440
um you know they're really excited to

00:38:53,680 --> 00:38:56,800
know that we're both providing access to

00:38:55,440 --> 00:38:58,320
all of these architectures

00:38:56,800 --> 00:39:00,000
obviously they each have their own you

00:38:58,320 --> 00:39:00,720
know business cases and what they want

00:39:00,000 --> 00:39:02,320
to do but

00:39:00,720 --> 00:39:04,000
it's great to be able to work together

00:39:02,320 --> 00:39:05,520
and being able to provide platforms for

00:39:04,000 --> 00:39:09,359
whatever architecture that

00:39:05,520 --> 00:39:09,359
is needed in the open source ecosystem

00:39:12,079 --> 00:39:15,440
well i don't think there are any other

00:39:13,599 --> 00:39:18,079
questions and i don't have anything else

00:39:15,440 --> 00:39:19,760
um i think with that we can uh end this

00:39:18,079 --> 00:39:21,920
session thank you all for

00:39:19,760 --> 00:39:23,040
coming here and uh i hope you enjoyed

00:39:21,920 --> 00:39:25,280
our session and

00:39:23,040 --> 00:39:28,160
if you have any more questions or our

00:39:25,280 --> 00:39:40,079
contact details are there on that slide

00:39:28,160 --> 00:39:40,079

YouTube URL: https://www.youtube.com/watch?v=PPb7J0ejwfU


