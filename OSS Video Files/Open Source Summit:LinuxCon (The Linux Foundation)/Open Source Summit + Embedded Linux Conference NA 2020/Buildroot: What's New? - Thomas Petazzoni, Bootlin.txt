Title: Buildroot: What's New? - Thomas Petazzoni, Bootlin
Publication date: 2020-09-10
Playlist: Open Source Summit + Embedded Linux Conference NA 2020
Description: 
	Buildroot: What's New? - Thomas Petazzoni, Bootlin
Captions: 
	00:00:05,520 --> 00:00:08,960
hello

00:00:06,080 --> 00:00:10,559
good morning good afternoon good evening

00:00:08,960 --> 00:00:12,320
or good night depending on where you are

00:00:10,559 --> 00:00:13,519
in the world and welcome to my talk

00:00:12,320 --> 00:00:15,920
about guild route

00:00:13,519 --> 00:00:18,160
so today i'll be presenting what's new

00:00:15,920 --> 00:00:19,119
in beautiful my name is thomas pelezzoni

00:00:18,160 --> 00:00:22,560
and i work for

00:00:19,119 --> 00:00:24,640
butling so to introduce myself

00:00:22,560 --> 00:00:26,480
i am the chief technical officer at

00:00:24,640 --> 00:00:29,199
bootleg we are an embedded linux

00:00:26,480 --> 00:00:31,359
services company based in france

00:00:29,199 --> 00:00:33,280
we do a lot of embedded linux

00:00:31,359 --> 00:00:34,719
development in the area of bootloader

00:00:33,280 --> 00:00:36,719
linux kernel drivers

00:00:34,719 --> 00:00:38,559
yocto project integration build root

00:00:36,719 --> 00:00:41,200
integration

00:00:38,559 --> 00:00:41,600
complete linux bsp development so we do

00:00:41,200 --> 00:00:43,840
both

00:00:41,600 --> 00:00:45,600
engineering services but also trainings

00:00:43,840 --> 00:00:46,960
and all our training materials are free

00:00:45,600 --> 00:00:48,879
available online

00:00:46,960 --> 00:00:51,039
uh maybe a lot of you have already came

00:00:48,879 --> 00:00:53,039
across our training materials already

00:00:51,039 --> 00:00:54,559
i happen to be one of the co-maintainer

00:00:53,039 --> 00:00:56,559
of beard root a project i've been

00:00:54,559 --> 00:00:59,680
contributing to for the past

00:00:56,559 --> 00:01:02,960
10 11 years now and i'm living currently

00:00:59,680 --> 00:01:05,280
in toulouse in the south west of france

00:01:02,960 --> 00:01:06,880
so before we get into the the actual

00:01:05,280 --> 00:01:08,560
topic of what's new in beardwood let's

00:01:06,880 --> 00:01:09,200
review a little bit what breedwood is

00:01:08,560 --> 00:01:11,200
actually

00:01:09,200 --> 00:01:13,200
it is an embedded linux build system

00:01:11,200 --> 00:01:14,080
which allows everyone to build from

00:01:13,200 --> 00:01:16,400
source code

00:01:14,080 --> 00:01:17,360
a cross compilation tool chain a root

00:01:16,400 --> 00:01:18,720
file system with

00:01:17,360 --> 00:01:20,640
pretty much as many libraries and

00:01:18,720 --> 00:01:22,560
applications as you want which are all

00:01:20,640 --> 00:01:25,040
compiled using cross compilation so you

00:01:22,560 --> 00:01:27,439
can leverage a fast build machine

00:01:25,040 --> 00:01:28,240
to build a linux system for your

00:01:27,439 --> 00:01:31,680
relatively

00:01:28,240 --> 00:01:33,200
uh not very powerful target and it

00:01:31,680 --> 00:01:35,439
also allows you to build of course a

00:01:33,200 --> 00:01:37,439
linux scale image and as many bootloader

00:01:35,439 --> 00:01:40,400
images as you want such as u-boot bear

00:01:37,439 --> 00:01:42,079
box grab or other boot loaders it allows

00:01:40,400 --> 00:01:45,439
to build

00:01:42,079 --> 00:01:46,799
a system that is simple in a relatively

00:01:45,439 --> 00:01:48,720
small amount of time so

00:01:46,799 --> 00:01:50,880
our default configuration can build can

00:01:48,720 --> 00:01:52,960
build in a few in a few minutes

00:01:50,880 --> 00:01:54,880
and it's easy to use and understand

00:01:52,960 --> 00:01:56,719
thanks to the use of k-config which is

00:01:54,880 --> 00:01:58,320
the same configuration system as the one

00:01:56,719 --> 00:02:00,560
used in the linux scanner

00:01:58,320 --> 00:02:02,719
and the use of make for describing all

00:02:00,560 --> 00:02:04,560
the internal logic of petrol and how to

00:02:02,719 --> 00:02:06,640
build the different packages

00:02:04,560 --> 00:02:08,239
it allows to generate very small root

00:02:06,640 --> 00:02:10,080
file systems our default

00:02:08,239 --> 00:02:12,080
root file system is only two megabyte in

00:02:10,080 --> 00:02:12,800
size it contains just puzzy box and a c

00:02:12,080 --> 00:02:14,160
library

00:02:12,800 --> 00:02:16,640
of course you can add up many more

00:02:14,160 --> 00:02:17,840
packages using the more than 2500

00:02:16,640 --> 00:02:20,560
packages we have

00:02:17,840 --> 00:02:21,680
but at least the default is minimal and

00:02:20,560 --> 00:02:24,319
small

00:02:21,680 --> 00:02:26,160
we generate only five system images not

00:02:24,319 --> 00:02:28,000
a complete distributions with binary

00:02:26,160 --> 00:02:30,000
packages that you can add remove

00:02:28,000 --> 00:02:32,560
upgrade on an individual basis we really

00:02:30,000 --> 00:02:34,319
only generate five system images

00:02:32,560 --> 00:02:36,400
we are vendor neutral project we don't

00:02:34,319 --> 00:02:38,800
have any single company behind

00:02:36,400 --> 00:02:40,879
uh behind us it's really an open source

00:02:38,800 --> 00:02:41,599
community develop project which has been

00:02:40,879 --> 00:02:44,640
around for

00:02:41,599 --> 00:02:46,239
a long time we started in 2001

00:02:44,640 --> 00:02:48,480
so it's probably the oldest team

00:02:46,239 --> 00:02:50,160
maintained and linux build system

00:02:48,480 --> 00:02:52,000
the community is very active as we will

00:02:50,160 --> 00:02:52,400
see in some of the next slides and we

00:02:52,000 --> 00:02:54,959
ship

00:02:52,400 --> 00:02:56,160
stable releases every three months if

00:02:54,959 --> 00:02:58,879
you want to learn more of course

00:02:56,160 --> 00:03:01,200
video.org is the place to go

00:02:58,879 --> 00:03:02,720
so today uh we're going to discuss

00:03:01,200 --> 00:03:04,239
what's new in peterborough within the

00:03:02,720 --> 00:03:05,840
last two years it's kind of a talk i

00:03:04,239 --> 00:03:07,440
give regularly to update

00:03:05,840 --> 00:03:08,879
the embedded linux community about

00:03:07,440 --> 00:03:09,519
what's changing what's improving in

00:03:08,879 --> 00:03:11,680
beard roots

00:03:09,519 --> 00:03:13,360
so we'll be covering what we have

00:03:11,680 --> 00:03:16,239
improved in build wood since

00:03:13,360 --> 00:03:17,280
the release 201805 to the recently

00:03:16,239 --> 00:03:20,400
released beautiful

00:03:17,280 --> 00:03:22,640
2005 and more specifically we review

00:03:20,400 --> 00:03:23,519
some community activity metrics the

00:03:22,640 --> 00:03:25,920
release schedule

00:03:23,519 --> 00:03:27,440
some architecture support changes some

00:03:25,920 --> 00:03:29,440
tool change support improvements

00:03:27,440 --> 00:03:30,480
package infrastructure improvements

00:03:29,440 --> 00:03:31,360
improvements to our dollar

00:03:30,480 --> 00:03:33,040
infrastructure

00:03:31,360 --> 00:03:35,519
some interesting package updates and

00:03:33,040 --> 00:03:36,080
additions we'll talk about reproducible

00:03:35,519 --> 00:03:38,159
builds

00:03:36,080 --> 00:03:39,760
about top-level parallel builds and also

00:03:38,159 --> 00:03:42,560
some important tooling improvements that

00:03:39,760 --> 00:03:46,000
we've made over the past two years

00:03:42,560 --> 00:03:46,640
um so start with the activity of the

00:03:46,000 --> 00:03:48,319
community

00:03:46,640 --> 00:03:50,400
this graph shows the number of commits

00:03:48,319 --> 00:03:51,440
per release and we do one release every

00:03:50,400 --> 00:03:54,879
three months

00:03:51,440 --> 00:03:56,799
um so we can see on that slide that the

00:03:54,879 --> 00:03:58,879
number of comments is pretty consistent

00:03:56,799 --> 00:04:02,080
from one release to the other we're

00:03:58,879 --> 00:04:05,360
between 100 400 1400

00:04:02,080 --> 00:04:06,080
and 1600 comics in every release with a

00:04:05,360 --> 00:04:09,439
good spike

00:04:06,080 --> 00:04:11,040
in recently um so that's showing a good

00:04:09,439 --> 00:04:13,040
level of activity in the in the

00:04:11,040 --> 00:04:14,959
root community the number of

00:04:13,040 --> 00:04:16,880
contributors is also an important metric

00:04:14,959 --> 00:04:18,400
in every open source community

00:04:16,880 --> 00:04:20,400
and here we can see that even in the

00:04:18,400 --> 00:04:22,240
last three releases we increased

00:04:20,400 --> 00:04:22,800
slightly our number of contributors so

00:04:22,240 --> 00:04:25,280
we have

00:04:22,800 --> 00:04:27,040
for every release approximately 120 to

00:04:25,280 --> 00:04:30,000
140 contributors

00:04:27,040 --> 00:04:31,600
which is nice and the mailing list

00:04:30,000 --> 00:04:34,080
activity is also a good metric

00:04:31,600 --> 00:04:35,199
we can see it's pretty uh constant over

00:04:34,080 --> 00:04:38,000
time as well with

00:04:35,199 --> 00:04:40,000
between 2000 to 3000 emails per month on

00:04:38,000 --> 00:04:42,400
the mailing list so it's a pretty

00:04:40,000 --> 00:04:44,400
significant amount of traffic which is

00:04:42,400 --> 00:04:45,520
in part due to the fact that we have all

00:04:44,400 --> 00:04:47,199
patches and review

00:04:45,520 --> 00:04:49,680
occurring on the mailing list just like

00:04:47,199 --> 00:04:52,639
the linux scale is doing

00:04:49,680 --> 00:04:53,280
our really schedule changed a little bit

00:04:52,639 --> 00:04:55,520
recently

00:04:53,280 --> 00:04:57,199
so what we already had was four release

00:04:55,520 --> 00:05:00,479
a year in february

00:04:57,199 --> 00:05:02,479
in may in august and in november so we

00:05:00,479 --> 00:05:04,400
have a three months release cycle with

00:05:02,479 --> 00:05:05,680
two months of development and one month

00:05:04,400 --> 00:05:08,479
of stabilization

00:05:05,680 --> 00:05:10,639
and this release schedule has been in

00:05:08,479 --> 00:05:12,479
place since 2009 so we've been doing

00:05:10,639 --> 00:05:14,720
that for over 10 years now

00:05:12,479 --> 00:05:15,600
but what we've more recently added is

00:05:14,720 --> 00:05:18,400
the the

00:05:15,600 --> 00:05:19,680
long-term support release every release

00:05:18,400 --> 00:05:23,600
made in february so

00:05:19,680 --> 00:05:26,080
202002 for example or 201902

00:05:23,600 --> 00:05:28,160
is going to be supported for one year

00:05:26,080 --> 00:05:28,720
which is an improvement over the support

00:05:28,160 --> 00:05:30,560
we had

00:05:28,720 --> 00:05:32,080
before it was just three months when the

00:05:30,560 --> 00:05:35,919
next release was

00:05:32,080 --> 00:05:38,000
made and in these lts branches

00:05:35,919 --> 00:05:39,840
we provide security updates and bug

00:05:38,000 --> 00:05:42,240
fixes so this is very useful

00:05:39,840 --> 00:05:43,680
if you're doing embedded linux products

00:05:42,240 --> 00:05:46,720
and so that you can more easily have

00:05:43,680 --> 00:05:48,560
access to security updates and bug fixes

00:05:46,720 --> 00:05:50,479
and to achieve that we have a

00:05:48,560 --> 00:05:52,000
maintenance branch open for each of

00:05:50,479 --> 00:05:56,080
those lts

00:05:52,000 --> 00:05:56,400
releases so we started that with 201702

00:05:56,080 --> 00:05:59,120
so

00:05:56,400 --> 00:06:00,160
three years ago and we had 11 point

00:05:59,120 --> 00:06:03,039
releases for that

00:06:00,160 --> 00:06:04,400
lts branch with approximately 800 comics

00:06:03,039 --> 00:06:07,520
and then we continued

00:06:04,400 --> 00:06:10,000
in 201802 201902

00:06:07,520 --> 00:06:11,680
each of them had between 11 to 12 point

00:06:10,000 --> 00:06:12,720
releases which we make approximately

00:06:11,680 --> 00:06:14,560
every month

00:06:12,720 --> 00:06:16,240
and you can see the number of comments

00:06:14,560 --> 00:06:18,240
increasing as we track

00:06:16,240 --> 00:06:20,400
better more and more security

00:06:18,240 --> 00:06:23,680
vulnerabilities and their fixes

00:06:20,400 --> 00:06:26,560
so today the currently maintained

00:06:23,680 --> 00:06:27,120
lts release is 20 2002 we've already

00:06:26,560 --> 00:06:29,720
made

00:06:27,120 --> 00:06:32,560
three point releases with approximately

00:06:29,720 --> 00:06:33,840
340 comments done so far which of course

00:06:32,560 --> 00:06:36,800
is increasing

00:06:33,840 --> 00:06:37,680
as we speak and as we find security

00:06:36,800 --> 00:06:41,280
issues to fix

00:06:37,680 --> 00:06:43,440
and and bugs to fix as well

00:06:41,280 --> 00:06:45,120
in terms of cpu architecture support

00:06:43,440 --> 00:06:47,919
we've added support for

00:06:45,120 --> 00:06:50,400
risk 5 32 bit and 64 bits obviously a

00:06:47,919 --> 00:06:53,520
very popular cpu architecture these days

00:06:50,400 --> 00:06:55,039
but we also had added support for nds 32

00:06:53,520 --> 00:06:57,840
a cp architecture from

00:06:55,039 --> 00:06:59,520
china made by endes technology and they

00:06:57,840 --> 00:07:01,599
contributed themselves to support for

00:06:59,520 --> 00:07:03,599
this new cpu architecture

00:07:01,599 --> 00:07:05,039
support for new variants of existing

00:07:03,599 --> 00:07:07,759
architecture was added

00:07:05,039 --> 00:07:10,080
things like new arm cortex score or x86

00:07:07,759 --> 00:07:11,280
scores meep scores r cores and so on and

00:07:10,080 --> 00:07:13,280
so forth

00:07:11,280 --> 00:07:14,880
and the blackfin cp architecture support

00:07:13,280 --> 00:07:16,880
was removed it was removed from the

00:07:14,880 --> 00:07:18,880
uptrend linux channel so it of course

00:07:16,880 --> 00:07:20,080
makes sense to also remove it from vroot

00:07:18,880 --> 00:07:23,039
as well

00:07:20,080 --> 00:07:24,880
and overall we have support for a really

00:07:23,039 --> 00:07:29,840
wide range of cpu architecture

00:07:24,880 --> 00:07:33,520
arc arm r64 csk m68k microblaze mips

00:07:29,840 --> 00:07:36,080
nds32 nios ii openwrist power pc risk 5

00:07:33,520 --> 00:07:38,720
super h spark x86x tenza

00:07:36,080 --> 00:07:40,560
which probably makes build roots the

00:07:38,720 --> 00:07:43,680
build system that has the widest cpu

00:07:40,560 --> 00:07:43,680
architectural support

00:07:43,759 --> 00:07:48,080
these architecture of course need to be

00:07:46,000 --> 00:07:49,840
supported by a tool chain so that we can

00:07:48,080 --> 00:07:52,400
cross-compile code for your

00:07:49,840 --> 00:07:52,879
for your cpu architecture and we have

00:07:52,400 --> 00:07:54,319
two

00:07:52,879 --> 00:07:56,000
tool chain back-ends in build roots the

00:07:54,319 --> 00:07:56,720
first one is called the internal tool

00:07:56,000 --> 00:07:58,560
chain

00:07:56,720 --> 00:08:00,639
and this is the back end that allows

00:07:58,560 --> 00:08:01,599
player to build its own tool chain from

00:08:00,639 --> 00:08:03,520
source

00:08:01,599 --> 00:08:04,720
so we haven't had a lot of significant

00:08:03,520 --> 00:08:06,720
changes there

00:08:04,720 --> 00:08:09,840
mainly regular updates so we've updated

00:08:06,720 --> 00:08:10,639
gcc to gcc8 first gtc 9 and we have

00:08:09,840 --> 00:08:13,199
patches

00:08:10,639 --> 00:08:14,000
for gcc 10 so this is coming up soon

00:08:13,199 --> 00:08:16,160
we've removed

00:08:14,000 --> 00:08:18,240
support for older version of gcc such as

00:08:16,160 --> 00:08:18,639
four nine five and six so this is really

00:08:18,240 --> 00:08:21,599
our

00:08:18,639 --> 00:08:23,759
regular updates uh beneteaus was updated

00:08:21,599 --> 00:08:25,120
and the 3dc libraries have been updated

00:08:23,759 --> 00:08:28,400
as well ucng

00:08:25,120 --> 00:08:31,199
muscle and gdp which we all support

00:08:28,400 --> 00:08:31,919
we are doing some really nice testing of

00:08:31,199 --> 00:08:33,680
these

00:08:31,919 --> 00:08:35,360
tool chain capabilities using the

00:08:33,680 --> 00:08:36,080
toolchain builder project especially a

00:08:35,360 --> 00:08:39,120
woman now

00:08:36,080 --> 00:08:42,959
from from smile he's doing a lot of

00:08:39,120 --> 00:08:44,800
qa and nci which allows to test these

00:08:42,959 --> 00:08:46,000
tool chain components and even report

00:08:44,800 --> 00:08:50,480
back to these

00:08:46,000 --> 00:08:53,519
upstream projects moving forward

00:08:50,480 --> 00:08:54,800
the second back-end we have for tool

00:08:53,519 --> 00:08:56,080
shine is the external tool chain

00:08:54,800 --> 00:08:58,399
back-end it allows us to

00:08:56,080 --> 00:08:59,920
use an existing pre-built tool chain

00:08:58,399 --> 00:09:01,680
that you have from your hand or vendor

00:08:59,920 --> 00:09:03,920
or other third parties

00:09:01,680 --> 00:09:05,600
and in there we added support for more

00:09:03,920 --> 00:09:07,920
arm tool chains

00:09:05,600 --> 00:09:09,760
are 64 big engine tool chain from r and

00:09:07,920 --> 00:09:12,000
linaro were also added

00:09:09,760 --> 00:09:14,320
since the nds 32 architecture was added

00:09:12,000 --> 00:09:16,000
and des provide a tool chain for for

00:09:14,320 --> 00:09:16,800
that cp architecture we had support for

00:09:16,000 --> 00:09:18,399
that as well

00:09:16,800 --> 00:09:20,399
and we did many updates to other

00:09:18,399 --> 00:09:21,440
existing tool chains another thing we

00:09:20,399 --> 00:09:23,600
did

00:09:21,440 --> 00:09:25,519
is allow declaring external tool chains

00:09:23,600 --> 00:09:27,440
in pr2 external trees

00:09:25,519 --> 00:09:28,640
pr to external is the mechanism that

00:09:27,440 --> 00:09:31,839
build root provides

00:09:28,640 --> 00:09:34,480
to allow you to store your own custom

00:09:31,839 --> 00:09:36,720
packages and recipes and configurations

00:09:34,480 --> 00:09:38,640
outside of bedroot itself to make it

00:09:36,720 --> 00:09:41,120
easier to update to build route in the

00:09:38,640 --> 00:09:43,360
future and to more clearly identify

00:09:41,120 --> 00:09:44,640
what is custom and specific to your

00:09:43,360 --> 00:09:48,080
project from

00:09:44,640 --> 00:09:49,839
the mainline upstream build route

00:09:48,080 --> 00:09:51,279
the package infrastructures and in build

00:09:49,839 --> 00:09:54,399
root are really key

00:09:51,279 --> 00:09:56,880
they factorize the common logic that

00:09:54,399 --> 00:09:57,600
describes how to configure build and

00:09:56,880 --> 00:09:59,760
install

00:09:57,600 --> 00:10:00,959
packages and that use some kind of

00:09:59,760 --> 00:10:02,880
standardized build system

00:10:00,959 --> 00:10:04,800
a good example is auto tools based

00:10:02,880 --> 00:10:07,839
packages you build them by doing

00:10:04,800 --> 00:10:10,000
dot slash configure make make install

00:10:07,839 --> 00:10:11,920
but repeating that logic in each and

00:10:10,000 --> 00:10:13,279
every package that uses the auto tools

00:10:11,920 --> 00:10:16,240
as it build system would be

00:10:13,279 --> 00:10:17,760
a bit annoying and difficult to maintain

00:10:16,240 --> 00:10:19,360
so we have the concept of package

00:10:17,760 --> 00:10:21,920
infrastructure in build roots which

00:10:19,360 --> 00:10:23,839
factorize that logic in a common place

00:10:21,920 --> 00:10:25,680
and we are adding more and more of this

00:10:23,839 --> 00:10:27,680
package infrastructure for new build

00:10:25,680 --> 00:10:29,120
systems that appear or at least that

00:10:27,680 --> 00:10:31,600
gets support

00:10:29,120 --> 00:10:32,800
for in in build wood so over the past

00:10:31,600 --> 00:10:34,640
two years

00:10:32,800 --> 00:10:36,640
we added support for three new package

00:10:34,640 --> 00:10:38,079
infrastructure golong package

00:10:36,640 --> 00:10:40,800
which as the name suggests is for

00:10:38,079 --> 00:10:42,720
gobains packages we added support for

00:10:40,800 --> 00:10:44,480
amazon package which is support for the

00:10:42,720 --> 00:10:46,079
amazon build system which is becoming

00:10:44,480 --> 00:10:48,240
very very popular

00:10:46,079 --> 00:10:49,680
and we very recently added a q make

00:10:48,240 --> 00:10:52,480
package instructor cure for

00:10:49,680 --> 00:10:53,519
q make base packages and q make is um

00:10:52,480 --> 00:10:55,920
the build system

00:10:53,519 --> 00:10:57,920
used mainly in the qt world and of

00:10:55,920 --> 00:10:58,880
course we already add support for auto

00:10:57,920 --> 00:11:01,200
tools cma

00:10:58,880 --> 00:11:02,959
k config blue rocks pearl python air

00:11:01,200 --> 00:11:04,640
long wave and kind of modules

00:11:02,959 --> 00:11:06,480
so we're simply extending that with

00:11:04,640 --> 00:11:07,279
support for more packages frame

00:11:06,480 --> 00:11:10,079
structure

00:11:07,279 --> 00:11:11,519
to illustrate that i have an example of

00:11:10,079 --> 00:11:13,600
a gold on package here

00:11:11,519 --> 00:11:14,880
docker cli which is the command line

00:11:13,600 --> 00:11:17,600
tool to

00:11:14,880 --> 00:11:18,880
communicate with the docker daemon and

00:11:17,600 --> 00:11:22,000
as you can see in this

00:11:18,880 --> 00:11:24,399
example we describe in this package make

00:11:22,000 --> 00:11:25,600
file how to build that docker cli

00:11:24,399 --> 00:11:27,680
project so we describe

00:11:25,600 --> 00:11:29,040
that it is available from github in

00:11:27,680 --> 00:11:30,880
under a given version

00:11:29,040 --> 00:11:32,959
it has a certain license a number of

00:11:30,880 --> 00:11:35,040
dependencies and then we have a few

00:11:32,959 --> 00:11:37,360
uh variables that describes how to build

00:11:35,040 --> 00:11:40,240
it but the the crux of the logic

00:11:37,360 --> 00:11:42,160
is built into the golang package

00:11:40,240 --> 00:11:44,399
infrastructure which is invoked at the

00:11:42,160 --> 00:11:45,760
on the very last line of that example

00:11:44,399 --> 00:11:48,000
and

00:11:45,760 --> 00:11:48,800
this is um really where all the logic

00:11:48,000 --> 00:11:50,560
happens

00:11:48,800 --> 00:11:52,560
and we don't have to describe step by

00:11:50,560 --> 00:11:54,399
step how to configure how to build

00:11:52,560 --> 00:11:55,760
on how to install this package this is

00:11:54,399 --> 00:11:58,320
all encapsulated

00:11:55,760 --> 00:11:59,600
into the go long package infrastructure

00:11:58,320 --> 00:12:02,639
similarly

00:11:59,600 --> 00:12:04,399
another example with leave mpd client

00:12:02,639 --> 00:12:06,320
which this time is using the amazon

00:12:04,399 --> 00:12:07,040
build system you can see that the

00:12:06,320 --> 00:12:08,959
package

00:12:07,040 --> 00:12:10,800
make file is very simple we don't have

00:12:08,959 --> 00:12:12,800
to describe how to configure how to

00:12:10,800 --> 00:12:14,959
build or how to install this package

00:12:12,800 --> 00:12:16,560
we only only have to provide metadata

00:12:14,959 --> 00:12:19,200
information such as

00:12:16,560 --> 00:12:21,040
the version the location of the terrible

00:12:19,200 --> 00:12:22,880
its license and a few other things and

00:12:21,040 --> 00:12:26,399
that is sufficient for build root to

00:12:22,880 --> 00:12:28,320
build this package um

00:12:26,399 --> 00:12:30,639
our download infrastructure was improved

00:12:28,320 --> 00:12:33,120
as well this download infrastructure is

00:12:30,639 --> 00:12:34,560
um the code in the edwards that

00:12:33,120 --> 00:12:36,160
downloads the source code of the

00:12:34,560 --> 00:12:37,680
different packages that we're going to

00:12:36,160 --> 00:12:40,639
build so don't lose the source code for

00:12:37,680 --> 00:12:42,399
your linux scanner for ubud for qut for

00:12:40,639 --> 00:12:44,399
all the user space packages or

00:12:42,399 --> 00:12:46,160
kindle modules that you are going to

00:12:44,399 --> 00:12:47,839
build and

00:12:46,160 --> 00:12:50,079
this download infrastructure already had

00:12:47,839 --> 00:12:54,399
capabilities to download from from git

00:12:50,079 --> 00:12:57,360
from http ftp mercurial cvs subversion

00:12:54,399 --> 00:12:58,560
and others but one really key thing we

00:12:57,360 --> 00:13:01,600
changed

00:12:58,560 --> 00:13:02,800
is the addition of git caching so when

00:13:01,600 --> 00:13:05,040
you're fetching a

00:13:02,800 --> 00:13:07,120
the source code for a packet from kit we

00:13:05,040 --> 00:13:09,279
used to do a complete git clone

00:13:07,120 --> 00:13:10,320
then retrieve the specific version you

00:13:09,279 --> 00:13:12,880
were interested in

00:13:10,320 --> 00:13:14,240
create a tarball out of that and throw

00:13:12,880 --> 00:13:16,720
away the git clone

00:13:14,240 --> 00:13:18,560
which meant that each time you wanted to

00:13:16,720 --> 00:13:20,000
fetch a new version of that same project

00:13:18,560 --> 00:13:21,680
so attach the linux kernel

00:13:20,000 --> 00:13:23,680
you would have to do a complete clone

00:13:21,680 --> 00:13:26,160
again which was very long

00:13:23,680 --> 00:13:27,600
bandwidth consuming and so on so what

00:13:26,160 --> 00:13:29,440
we're doing now

00:13:27,600 --> 00:13:31,519
we're keeping that clone of the git

00:13:29,440 --> 00:13:34,000
repository for every package

00:13:31,519 --> 00:13:34,959
um in in the download cache so that it

00:13:34,000 --> 00:13:37,440
can be reused

00:13:34,959 --> 00:13:39,440
for other uh downloads in the future and

00:13:37,440 --> 00:13:41,199
this is illustrated on on the right side

00:13:39,440 --> 00:13:43,760
of this slide where we can see for

00:13:41,199 --> 00:13:45,120
the viewboot um folder which is in your

00:13:43,760 --> 00:13:47,040
download directory

00:13:45,120 --> 00:13:48,880
we have the different tables you can see

00:13:47,040 --> 00:13:52,079
you boot 2018

00:13:48,880 --> 00:13:54,560
11 you put 20 1904 for example

00:13:52,079 --> 00:13:56,160
and next to that we have a git subfolder

00:13:54,560 --> 00:13:57,839
where we store a git clone of that

00:13:56,160 --> 00:13:59,040
project so whenever you are going to

00:13:57,839 --> 00:14:01,199
retrieve

00:13:59,040 --> 00:14:02,320
ubud releases using git it's going to

00:14:01,199 --> 00:14:04,959
use that clone

00:14:02,320 --> 00:14:06,079
to avoid re-downloading everything as

00:14:04,959 --> 00:14:09,519
you can see on that

00:14:06,079 --> 00:14:11,760
slide our download directory was also

00:14:09,519 --> 00:14:13,040
reorganized to have sub directories per

00:14:11,760 --> 00:14:15,040
packages

00:14:13,040 --> 00:14:17,360
we used to have a flat organization

00:14:15,040 --> 00:14:18,959
where all tables were thrown in

00:14:17,360 --> 00:14:20,560
with no sub directories into your

00:14:18,959 --> 00:14:23,519
download folder no we have sub

00:14:20,560 --> 00:14:25,680
directories per packages

00:14:23,519 --> 00:14:27,839
um another thing that we're doing

00:14:25,680 --> 00:14:30,160
constantly in vietwood is of course

00:14:27,839 --> 00:14:31,680
adding more packages and updating the

00:14:30,160 --> 00:14:35,040
existing packages

00:14:31,680 --> 00:14:36,560
uh between blade route 20 1805 and 20

00:14:35,040 --> 00:14:39,760
2005 we've added

00:14:36,560 --> 00:14:40,959
a bit more than 400 packages which is

00:14:39,760 --> 00:14:43,440
quite a lot

00:14:40,959 --> 00:14:44,920
we've removed a few packages but that

00:14:43,440 --> 00:14:47,040
rarely happens we removed

00:14:44,920 --> 00:14:48,639
individualx.org proto packages because

00:14:47,040 --> 00:14:49,440
they've all been merged into a single

00:14:48,639 --> 00:14:52,000
project

00:14:49,440 --> 00:14:53,519
qt4 has been removed because q5 has been

00:14:52,000 --> 00:14:55,839
around for long enough

00:14:53,519 --> 00:14:57,760
gstreamer 0.10 has been removed because

00:14:55,839 --> 00:14:58,880
gstreamer1 has been around for long

00:14:57,760 --> 00:15:01,040
enough

00:14:58,880 --> 00:15:03,360
in terms of significant package updates

00:15:01,040 --> 00:15:05,440
we've added a rust support for

00:15:03,360 --> 00:15:06,560
the compiler and the cargo package

00:15:05,440 --> 00:15:09,040
management system

00:15:06,560 --> 00:15:10,560
we've added support for llvm client not

00:15:09,040 --> 00:15:12,240
yet as a compiler

00:15:10,560 --> 00:15:14,240
but as a library that can be used for

00:15:12,240 --> 00:15:15,519
example for the mesa 3d opengl

00:15:14,240 --> 00:15:17,360
implementation

00:15:15,519 --> 00:15:18,959
we've added support for mender an

00:15:17,360 --> 00:15:22,160
over-the-air update system

00:15:18,959 --> 00:15:24,240
for opengdk java implementation

00:15:22,160 --> 00:15:26,320
for the openrc init system which

00:15:24,240 --> 00:15:28,000
originates from the gen 2 distribution

00:15:26,320 --> 00:15:29,199
but can now be used in build root

00:15:28,000 --> 00:15:31,680
instead of systemd

00:15:29,199 --> 00:15:32,720
or the buzzy box in it we've added

00:15:31,680 --> 00:15:36,160
support for

00:15:32,720 --> 00:15:38,560
the opti os which is the secure

00:15:36,160 --> 00:15:40,399
trusted execution environment that is

00:15:38,560 --> 00:15:41,920
used mainly on arm platforms

00:15:40,399 --> 00:15:43,680
we've added support for g object

00:15:41,920 --> 00:15:46,560
introspections for the

00:15:43,680 --> 00:15:47,600
ipalmo security modules and support for

00:15:46,560 --> 00:15:50,560
a gazillion of

00:15:47,600 --> 00:15:52,560
parallel and python modules also as i

00:15:50,560 --> 00:15:53,279
said we've done many updates to existing

00:15:52,560 --> 00:15:55,759
packages

00:15:53,279 --> 00:15:57,440
qut was updated x.org was updated g

00:15:55,759 --> 00:16:00,000
streamer weyland weston

00:15:57,440 --> 00:16:01,680
kodi and many many more at the bottom of

00:16:00,000 --> 00:16:03,440
the slide we can you can see how many

00:16:01,680 --> 00:16:04,560
packages have been updated and how many

00:16:03,440 --> 00:16:07,279
updates we've done

00:16:04,560 --> 00:16:08,079
i've counted over 4 000 updates over the

00:16:07,279 --> 00:16:10,079
past two years

00:16:08,079 --> 00:16:13,199
to the various package collections that

00:16:10,079 --> 00:16:16,480
we have in in buildboot

00:16:13,199 --> 00:16:17,920
in in terms of hardening and security we

00:16:16,480 --> 00:16:20,560
receive some contributions from

00:16:17,920 --> 00:16:21,839
colleen's aerospace to be able to build

00:16:20,560 --> 00:16:24,240
the entire

00:16:21,839 --> 00:16:26,399
user space packages with a number of

00:16:24,240 --> 00:16:27,600
security hardening features available at

00:16:26,399 --> 00:16:29,759
the tool chain level

00:16:27,600 --> 00:16:30,639
so we've improved support for stack

00:16:29,759 --> 00:16:32,800
protection

00:16:30,639 --> 00:16:34,800
we've added support for railroad and

00:16:32,800 --> 00:16:35,839
support for buffer overflow detection

00:16:34,800 --> 00:16:37,600
using the fortify

00:16:35,839 --> 00:16:39,199
source option provided by some c

00:16:37,600 --> 00:16:42,240
libraries and

00:16:39,199 --> 00:16:44,000
this is now tested in our cis so that we

00:16:42,240 --> 00:16:44,639
can verify that as many packages as

00:16:44,000 --> 00:16:46,320
possible

00:16:44,639 --> 00:16:50,240
build properly with those different

00:16:46,320 --> 00:16:52,240
hardening capabilities

00:16:50,240 --> 00:16:53,839
we've added a new make target we have

00:16:52,240 --> 00:16:55,759
plenty of make targets in build wood

00:16:53,839 --> 00:16:59,279
because everything is written in make

00:16:55,759 --> 00:17:01,120
um to query information about the build

00:16:59,279 --> 00:17:02,320
or to start the build and the new target

00:17:01,120 --> 00:17:05,760
we've added is make

00:17:02,320 --> 00:17:07,760
show info it outputs a json blurb that

00:17:05,760 --> 00:17:08,480
provides a lot of metadata about the

00:17:07,760 --> 00:17:10,160
packages

00:17:08,480 --> 00:17:12,319
you have currently enabled in your

00:17:10,160 --> 00:17:14,000
configuration so it tells you

00:17:12,319 --> 00:17:15,839
the name of the packages of course their

00:17:14,000 --> 00:17:17,919
version their license

00:17:15,839 --> 00:17:20,160
and their original location their

00:17:17,919 --> 00:17:22,720
dependencies and many many other things

00:17:20,160 --> 00:17:24,400
and this is really meant to be used by

00:17:22,720 --> 00:17:26,319
your own tooling

00:17:24,400 --> 00:17:29,440
um to analyze what is in your

00:17:26,319 --> 00:17:32,720
configuration do some post processing

00:17:29,440 --> 00:17:34,720
verify licenses verify that the upstream

00:17:32,720 --> 00:17:36,960
location is still available any other

00:17:34,720 --> 00:17:39,120
thing that you might need so this is

00:17:36,960 --> 00:17:39,520
complementing some existing analysis

00:17:39,120 --> 00:17:41,600
tool

00:17:39,520 --> 00:17:43,120
we already had in build root such as

00:17:41,600 --> 00:17:47,039
make legal info

00:17:43,120 --> 00:17:48,880
which is outputting a set of manifests

00:17:47,039 --> 00:17:50,799
and collecting all the tarbles and all

00:17:48,880 --> 00:17:52,720
the patches of the source code

00:17:50,799 --> 00:17:54,000
this billboard system is building for

00:17:52,720 --> 00:17:56,160
your configuration

00:17:54,000 --> 00:17:57,919
to help you uh be in compliance with the

00:17:56,160 --> 00:17:59,600
open source licenses

00:17:57,919 --> 00:18:01,520
we already had make craft build to

00:17:59,600 --> 00:18:03,840
generate graphs of the build time

00:18:01,520 --> 00:18:05,360
or make graph size to generate graphs of

00:18:03,840 --> 00:18:06,160
the file system size so that you can

00:18:05,360 --> 00:18:08,160
analyze

00:18:06,160 --> 00:18:11,760
why your file system is so big and what

00:18:08,160 --> 00:18:11,760
could be improved and optimized

00:18:12,559 --> 00:18:17,840
another area of effort has been the

00:18:15,120 --> 00:18:20,960
reproducible builds uh work

00:18:17,840 --> 00:18:23,600
um in 2019 we had a

00:18:20,960 --> 00:18:24,000
google summer of code with atarva lele

00:18:23,600 --> 00:18:26,000
um

00:18:24,000 --> 00:18:27,440
working as a student for the bluetooth

00:18:26,000 --> 00:18:29,440
project and

00:18:27,440 --> 00:18:31,280
was mentored by two build woodcock

00:18:29,440 --> 00:18:31,600
maintainers arnold van der kappel and

00:18:31,280 --> 00:18:35,600
jan

00:18:31,600 --> 00:18:38,240
mora and the idea was to

00:18:35,600 --> 00:18:39,760
improve the the existing support we had

00:18:38,240 --> 00:18:41,600
for reproducible builds

00:18:39,760 --> 00:18:43,200
where the goal is to be able to

00:18:41,600 --> 00:18:45,360
guarantee that if you do

00:18:43,200 --> 00:18:46,480
the same build two times in a row with

00:18:45,360 --> 00:18:48,480
the same configuration

00:18:46,480 --> 00:18:49,919
same build with version you get a bit

00:18:48,480 --> 00:18:51,520
identical result

00:18:49,919 --> 00:18:53,440
so build root already had some good

00:18:51,520 --> 00:18:55,120
reproducibility properties in the sense

00:18:53,440 --> 00:18:56,559
that when you rebuild a system with

00:18:55,120 --> 00:18:57,919
build roots we are going to build

00:18:56,559 --> 00:18:59,840
exactly the same version of the

00:18:57,919 --> 00:19:01,360
different software components with the

00:18:59,840 --> 00:19:04,080
same configuration

00:19:01,360 --> 00:19:04,799
and so on but we did not yet have

00:19:04,080 --> 00:19:08,080
something

00:19:04,799 --> 00:19:10,000
where the result is bit identical and so

00:19:08,080 --> 00:19:13,440
the br2 reproducible option that

00:19:10,000 --> 00:19:16,240
we have is helping enabling more

00:19:13,440 --> 00:19:17,919
mechanisms to increase the chance that

00:19:16,240 --> 00:19:20,640
the final result will be

00:19:17,919 --> 00:19:21,760
fully reproducible at the beat level it

00:19:20,640 --> 00:19:23,600
is not perfect yet

00:19:21,760 --> 00:19:24,799
there are still areas where

00:19:23,600 --> 00:19:26,880
reproducibility

00:19:24,799 --> 00:19:27,840
is not there but we've made good

00:19:26,880 --> 00:19:30,240
improvements

00:19:27,840 --> 00:19:31,280
and especially what this google summer

00:19:30,240 --> 00:19:33,000
of code is allowed to do

00:19:31,280 --> 00:19:34,400
is to do automated testing of that

00:19:33,000 --> 00:19:36,640
reproducibility

00:19:34,400 --> 00:19:38,000
so in our autobuilder infrastructure we

00:19:36,640 --> 00:19:40,960
now have some bills that we

00:19:38,000 --> 00:19:42,240
do twice in a row and once the two

00:19:40,960 --> 00:19:43,360
builds are done for the same

00:19:42,240 --> 00:19:45,600
configuration

00:19:43,360 --> 00:19:47,360
we compare the results and we check if

00:19:45,600 --> 00:19:49,760
they are a bit identical or not

00:19:47,360 --> 00:19:51,919
and if they are not we will compare do

00:19:49,760 --> 00:19:53,760
the differences and use that to analyze

00:19:51,919 --> 00:19:55,360
the reproducibility issue and hopefully

00:19:53,760 --> 00:19:57,919
fix them

00:19:55,360 --> 00:19:59,679
obviously not only this we did

00:19:57,919 --> 00:20:01,200
improvement on the testing side but

00:19:59,679 --> 00:20:03,360
this allowed to discover some of those

00:20:01,200 --> 00:20:07,280
reproducibility issues which were fixed

00:20:03,360 --> 00:20:09,840
entire gzip cpio around timestamp issues

00:20:07,280 --> 00:20:11,200
we of course need more work in this area

00:20:09,840 --> 00:20:12,880
and contributions are welcome

00:20:11,200 --> 00:20:15,679
but there have been some interesting

00:20:12,880 --> 00:20:17,520
improvements in my next slides i have an

00:20:15,679 --> 00:20:20,000
example of a report that

00:20:17,520 --> 00:20:22,159
defoskop is giving us so we are

00:20:20,000 --> 00:20:24,159
comparing two terribles of the root file

00:20:22,159 --> 00:20:25,120
system generated by peeled roots and it

00:20:24,159 --> 00:20:28,640
shows that we have

00:20:25,120 --> 00:20:30,799
one small difference uh in this in one

00:20:28,640 --> 00:20:33,360
file inside the table the app

00:20:30,799 --> 00:20:34,159
agent pool shared library from the

00:20:33,360 --> 00:20:36,720
asterisk

00:20:34,159 --> 00:20:38,559
package as a small difference in the

00:20:36,720 --> 00:20:41,120
sense that it contains the

00:20:38,559 --> 00:20:43,039
absolute path to the built directory

00:20:41,120 --> 00:20:43,840
which is different from one build to the

00:20:43,039 --> 00:20:45,520
other

00:20:43,840 --> 00:20:47,760
and and so that is something we'll have

00:20:45,520 --> 00:20:49,760
to address in this package it probably

00:20:47,760 --> 00:20:51,840
shouldn't include in its binary

00:20:49,760 --> 00:20:54,640
some reference to the absolute location

00:20:51,840 --> 00:20:56,960
of the build directory

00:20:54,640 --> 00:20:58,880
another area that was really recently

00:20:56,960 --> 00:21:01,120
improved is top-level parallel build

00:20:58,880 --> 00:21:02,400
the goal is to be able to build several

00:21:01,120 --> 00:21:05,039
packages in parallel

00:21:02,400 --> 00:21:06,880
indeed until recently build root was

00:21:05,039 --> 00:21:09,120
building each package sequentially

00:21:06,880 --> 00:21:11,200
so whenever it was building one package

00:21:09,120 --> 00:21:13,679
it would use make minus jx

00:21:11,200 --> 00:21:15,440
to benefit from parallelism within the

00:21:13,679 --> 00:21:16,799
build of a package such as when building

00:21:15,440 --> 00:21:18,720
the linux scanner

00:21:16,799 --> 00:21:21,679
but each package compared to the other

00:21:18,720 --> 00:21:24,480
packages were being built sequentially

00:21:21,679 --> 00:21:25,440
and this is of course a bottleneck in

00:21:24,480 --> 00:21:27,760
modern

00:21:25,440 --> 00:21:29,360
systems that have a lot of cpu cores so

00:21:27,760 --> 00:21:30,000
we want to be able to build multiple

00:21:29,360 --> 00:21:32,559
packages

00:21:30,000 --> 00:21:34,240
in parallel and with merit experimental

00:21:32,559 --> 00:21:36,559
support for this functionality in build

00:21:34,240 --> 00:21:38,400
root 202002

00:21:36,559 --> 00:21:40,880
it takes the form of an option called

00:21:38,400 --> 00:21:43,600
br2 pair package directories

00:21:40,880 --> 00:21:45,280
what this option does is that it enables

00:21:43,600 --> 00:21:47,840
per package build

00:21:45,280 --> 00:21:49,679
that creates for each package its own

00:21:47,840 --> 00:21:52,080
host directory and its own

00:21:49,679 --> 00:21:54,559
target directory so that each package is

00:21:52,080 --> 00:21:56,159
nicely isolated in its own environment

00:21:54,559 --> 00:21:57,600
and therefore we can build multiple

00:21:56,159 --> 00:21:59,679
packages in partly

00:21:57,600 --> 00:22:00,720
so that guarantees that the dependencies

00:21:59,679 --> 00:22:03,280
seen by the package

00:22:00,720 --> 00:22:06,000
are always consistent and cannot change

00:22:03,280 --> 00:22:08,159
during the build due to parallelism

00:22:06,000 --> 00:22:11,520
if you have this option enabled you can

00:22:08,159 --> 00:22:13,200
then run make minus j4 minus j8

00:22:11,520 --> 00:22:15,039
at the top level when invoking the

00:22:13,200 --> 00:22:17,760
bluetooth build and that will really

00:22:15,039 --> 00:22:19,520
build multiple packages in parallel

00:22:17,760 --> 00:22:21,600
we still have some limitations for

00:22:19,520 --> 00:22:23,440
example qt5 does not support that

00:22:21,600 --> 00:22:24,799
yet there is already a batch series

00:22:23,440 --> 00:22:27,360
pending but it

00:22:24,799 --> 00:22:28,640
requires some review and effort we also

00:22:27,360 --> 00:22:30,720
have issue with the

00:22:28,640 --> 00:22:32,480
the package rebuild package reconfigure

00:22:30,720 --> 00:22:32,960
package reinstall targets which are not

00:22:32,480 --> 00:22:35,760
working

00:22:32,960 --> 00:22:37,520
yet but we have some ideas on how to fix

00:22:35,760 --> 00:22:40,080
that

00:22:37,520 --> 00:22:40,559
um in this slide we illustrate the the

00:22:40,080 --> 00:22:42,480
effect

00:22:40,559 --> 00:22:44,480
of a top level parallel build in this

00:22:42,480 --> 00:22:46,320
first slide we have a given build that

00:22:44,480 --> 00:22:47,200
is not using top level parallel build so

00:22:46,320 --> 00:22:49,520
we can really see

00:22:47,200 --> 00:22:50,400
each package being built one after the

00:22:49,520 --> 00:22:53,600
other

00:22:50,400 --> 00:22:55,360
um conversely on the next light we have

00:22:53,600 --> 00:22:57,280
the exact same configuration

00:22:55,360 --> 00:22:59,200
being built with top level parallel bit

00:22:57,280 --> 00:23:00,960
enabled we can see multiple packages

00:22:59,200 --> 00:23:03,760
being built in parallel and therefore

00:23:00,960 --> 00:23:06,400
the overall build time being reduced

00:23:03,760 --> 00:23:09,440
this configuration was relatively small

00:23:06,400 --> 00:23:11,520
but in more practical configuration we

00:23:09,440 --> 00:23:13,440
have seen build time reductions of two

00:23:11,520 --> 00:23:15,679
times or even sometimes three times

00:23:13,440 --> 00:23:18,159
so this is really a great feature to

00:23:15,679 --> 00:23:21,600
reduce the build time

00:23:18,159 --> 00:23:23,520
another area of work was a runtime test

00:23:21,600 --> 00:23:25,600
we added infrastructure for runtime

00:23:23,520 --> 00:23:28,720
testing in 201702

00:23:25,600 --> 00:23:30,640
so what we call runtime testing is

00:23:28,720 --> 00:23:31,760
the fact that we not only build a given

00:23:30,640 --> 00:23:34,960
configuration

00:23:31,760 --> 00:23:37,440
but we also put it under qmu and verify

00:23:34,960 --> 00:23:38,960
within qmu a number of assertions for

00:23:37,440 --> 00:23:39,760
example we might start a python

00:23:38,960 --> 00:23:42,240
interpreter

00:23:39,760 --> 00:23:44,640
and run some test case we might start an

00:23:42,240 --> 00:23:46,400
http server verify that it is running

00:23:44,640 --> 00:23:48,640
and replying to requests

00:23:46,400 --> 00:23:50,960
and things like that so this is really

00:23:48,640 --> 00:23:52,080
complementing the autobuilder testing we

00:23:50,960 --> 00:23:53,760
were already doing

00:23:52,080 --> 00:23:55,919
but which was already doing build

00:23:53,760 --> 00:23:58,400
testing what we're doing now is not only

00:23:55,919 --> 00:24:01,840
build but also runtime testing

00:23:58,400 --> 00:24:04,080
and since 2017-11 we've added many many

00:24:01,840 --> 00:24:06,640
new test cases and this has become

00:24:04,080 --> 00:24:08,640
a more usual practice in the buildroot

00:24:06,640 --> 00:24:10,559
community to add test cases when new

00:24:08,640 --> 00:24:12,799
packages are being added so we have

00:24:10,559 --> 00:24:14,640
plenty of test cases for python module

00:24:12,799 --> 00:24:15,600
per modules ui modules especially

00:24:14,640 --> 00:24:18,000
because

00:24:15,600 --> 00:24:18,880
for those interpreted languages most of

00:24:18,000 --> 00:24:20,799
the problems

00:24:18,880 --> 00:24:22,799
occur at run time and not so much at

00:24:20,799 --> 00:24:25,120
build time but we also have

00:24:22,799 --> 00:24:27,520
a test cases for a number of other

00:24:25,120 --> 00:24:29,440
functionalities

00:24:27,520 --> 00:24:31,120
another area of improvement was the

00:24:29,440 --> 00:24:33,279
tooling for the maintenance of the

00:24:31,120 --> 00:24:35,919
project and here we had an

00:24:33,279 --> 00:24:36,480
internship with victor weska as a

00:24:35,919 --> 00:24:38,799
student

00:24:36,480 --> 00:24:40,400
working at brooklyn with me during the

00:24:38,799 --> 00:24:42,799
summer 2019

00:24:40,400 --> 00:24:44,320
and the topic of his internship was to

00:24:42,799 --> 00:24:45,279
improve the build root maintenance

00:24:44,320 --> 00:24:47,760
tooling

00:24:45,279 --> 00:24:49,960
and more specifically what we worked on

00:24:47,760 --> 00:24:51,679
during this internship was use of

00:24:49,960 --> 00:24:53,279
releasemonitoring.org for tracking

00:24:51,679 --> 00:24:55,440
upstream releases

00:24:53,279 --> 00:24:57,279
improving the notifications sent to

00:24:55,440 --> 00:24:58,400
build developers in relation to their

00:24:57,279 --> 00:25:00,400
packages

00:24:58,400 --> 00:25:02,559
and improving as well the search

00:25:00,400 --> 00:25:03,039
capabilities in our auto builder so i'm

00:25:02,559 --> 00:25:04,640
going to

00:25:03,039 --> 00:25:07,120
give more details on these different

00:25:04,640 --> 00:25:07,120
topics

00:25:08,159 --> 00:25:13,919
the releasemonitoring.org is a service

00:25:11,919 --> 00:25:15,840
from the fedora community that tracks a

00:25:13,919 --> 00:25:18,480
lot of open source projects

00:25:15,840 --> 00:25:20,960
and uh tracks their uh up their up

00:25:18,480 --> 00:25:21,440
through releases so it tracks over 27

00:25:20,960 --> 00:25:24,640
00:25:21,440 --> 00:25:28,240
projects and in build route we have

00:25:24,640 --> 00:25:29,360
above 2500 packages so it is difficult

00:25:28,240 --> 00:25:31,360
for us to

00:25:29,360 --> 00:25:33,760
make sure they are all kept up to date

00:25:31,360 --> 00:25:36,400
with the latest upstream releases

00:25:33,760 --> 00:25:38,960
so in bitrate we already had a script

00:25:36,400 --> 00:25:41,679
called pkg stat that produces for us

00:25:38,960 --> 00:25:42,320
a big table where for each package we

00:25:41,679 --> 00:25:44,559
have

00:25:42,320 --> 00:25:46,480
um information about the state of that

00:25:44,559 --> 00:25:48,799
package how many patches we have

00:25:46,480 --> 00:25:50,240
um and and so on and so forth but what

00:25:48,799 --> 00:25:52,320
we wanted to add

00:25:50,240 --> 00:25:53,600
is um having the current version of the

00:25:52,320 --> 00:25:55,840
package in peel root and

00:25:53,600 --> 00:25:57,600
comparing that to the latest upstream

00:25:55,840 --> 00:26:00,159
version of that package

00:25:57,600 --> 00:26:00,799
so the improvements with the internship

00:26:00,159 --> 00:26:03,039
were

00:26:00,799 --> 00:26:05,440
to add a lot of mapping between bid root

00:26:03,039 --> 00:26:07,440
packages and release monitoring

00:26:05,440 --> 00:26:08,960
dot org packages indeed the naming is

00:26:07,440 --> 00:26:09,440
sometimes slightly different so we had

00:26:08,960 --> 00:26:11,760
to

00:26:09,440 --> 00:26:12,480
accommodate for that and we made some

00:26:11,760 --> 00:26:15,840
fixes

00:26:12,480 --> 00:26:17,520
to um build packages so that the package

00:26:15,840 --> 00:26:20,080
version would match better with

00:26:17,520 --> 00:26:22,400
what upstream is using we've added json

00:26:20,080 --> 00:26:24,159
output to pkg stand so that we can do

00:26:22,400 --> 00:26:26,159
more tooling around it

00:26:24,159 --> 00:26:28,640
and we've also improved significantly

00:26:26,159 --> 00:26:31,840
the speed of pkg stance

00:26:28,640 --> 00:26:33,600
this releasemonitoring.org site

00:26:31,840 --> 00:26:35,679
looks like this so we can see here the

00:26:33,600 --> 00:26:37,600
buzzerbox project

00:26:35,679 --> 00:26:39,760
and all the releases that were made over

00:26:37,600 --> 00:26:42,000
time so it is regularly putting

00:26:39,760 --> 00:26:43,760
the buzzerbox.net website to see if

00:26:42,000 --> 00:26:46,559
there are new releases

00:26:43,760 --> 00:26:47,919
and at the bottom left we can see the

00:26:46,559 --> 00:26:49,640
mappings

00:26:47,919 --> 00:26:51,279
which is a feature of

00:26:49,640 --> 00:26:52,799
releasemonitoring.org website that

00:26:51,279 --> 00:26:55,360
allows its distribution

00:26:52,799 --> 00:26:57,200
to document what is the name of the the

00:26:55,360 --> 00:26:58,320
package corresponding to buzzy box in

00:26:57,200 --> 00:27:00,480
their distribution

00:26:58,320 --> 00:27:02,240
so for example for pilgrits the package

00:27:00,480 --> 00:27:03,279
that we use to build buzzy box is also

00:27:02,240 --> 00:27:04,880
called buzzy box

00:27:03,279 --> 00:27:06,880
but there are a number of cases where we

00:27:04,880 --> 00:27:08,480
have differences between the release

00:27:06,880 --> 00:27:11,840
monitoring.org name

00:27:08,480 --> 00:27:15,440
and the name used in bluetooth

00:27:11,840 --> 00:27:18,399
another thing we added recently is

00:27:15,440 --> 00:27:20,000
cv checking and the idea is this time

00:27:18,399 --> 00:27:22,080
not to make sure that we are up to date

00:27:20,000 --> 00:27:24,159
with the latest upstream release but

00:27:22,080 --> 00:27:27,520
that we don't have any um

00:27:24,159 --> 00:27:29,120
known cv affecting our packages for that

00:27:27,520 --> 00:27:31,360
we are using the nvd

00:27:29,120 --> 00:27:32,799
national vulnerability database provided

00:27:31,360 --> 00:27:35,120
by the nist

00:27:32,799 --> 00:27:36,000
which lists all known cvs so we've

00:27:35,120 --> 00:27:39,039
improved the same

00:27:36,000 --> 00:27:41,279
pkg stat script to make a mapping and

00:27:39,039 --> 00:27:43,039
matching against the bluetooth packages

00:27:41,279 --> 00:27:45,039
that we have on one side

00:27:43,039 --> 00:27:47,679
and the list of packages and software

00:27:45,039 --> 00:27:49,760
components known by the nvd database

00:27:47,679 --> 00:27:50,720
and based on that and the version

00:27:49,760 --> 00:27:52,640
affecting

00:27:50,720 --> 00:27:54,240
uh affected by different cvs and the

00:27:52,640 --> 00:27:56,960
version currently packaged in billboot

00:27:54,240 --> 00:28:00,080
we are able to determine if a given cv

00:27:56,960 --> 00:28:02,080
is affecting one of our packages or not

00:28:00,080 --> 00:28:03,760
together with that we've added a

00:28:02,080 --> 00:28:06,000
variable to our

00:28:03,760 --> 00:28:07,279
package make files called package ignore

00:28:06,000 --> 00:28:10,320
cves

00:28:07,279 --> 00:28:12,720
which allows a package to explicitly say

00:28:10,320 --> 00:28:15,440
yes i know there is this cv in the nvg

00:28:12,720 --> 00:28:18,000
database but i am not affected by it

00:28:15,440 --> 00:28:20,480
usually we are not affected by some cvs

00:28:18,000 --> 00:28:22,799
because we fix them locally with a patch

00:28:20,480 --> 00:28:24,000
so our version technically is still

00:28:22,799 --> 00:28:25,440
affected

00:28:24,000 --> 00:28:27,279
when you compare it with the nvidia

00:28:25,440 --> 00:28:28,399
database but because we backported the

00:28:27,279 --> 00:28:32,320
security fix

00:28:28,399 --> 00:28:35,360
this cv is no longer affecting us

00:28:32,320 --> 00:28:37,600
this matching allows build roots to

00:28:35,360 --> 00:28:41,039
notify package maintainers when they are

00:28:37,600 --> 00:28:44,000
cvs affecting their packages

00:28:41,039 --> 00:28:44,559
so here is an example of the pkg stat

00:28:44,000 --> 00:28:47,679
output

00:28:44,559 --> 00:28:49,760
we can see in the middle white uh column

00:28:47,679 --> 00:28:50,880
the current version of the package in

00:28:49,760 --> 00:28:54,399
bill root for example

00:28:50,880 --> 00:28:57,279
c cache is in version 379 in pillpot

00:28:54,399 --> 00:28:58,159
and the next column where it is found by

00:28:57,279 --> 00:29:00,120
distro

00:28:58,159 --> 00:29:02,000
is the information retrieved from

00:29:00,120 --> 00:29:03,120
risemonitoring.org so we can see release

00:29:02,000 --> 00:29:06,320
monitoring knows

00:29:03,120 --> 00:29:08,159
about c cash also being in version 3 7 9

00:29:06,320 --> 00:29:11,039
so there's nothing to do in terms of

00:29:08,159 --> 00:29:12,720
root update the next package cc id is a

00:29:11,039 --> 00:29:15,320
bit different we have version 1

00:29:12,720 --> 00:29:16,880
431 in gridwood but

00:29:15,320 --> 00:29:17,600
releasemonitoring.org knows about

00:29:16,880 --> 00:29:20,480
version 1

00:29:17,600 --> 00:29:22,399
432 which is newer so probably we should

00:29:20,480 --> 00:29:25,360
update that package

00:29:22,399 --> 00:29:26,720
moving further down the serial package

00:29:25,360 --> 00:29:28,320
is up to date with

00:29:26,720 --> 00:29:30,720
the latest upstream version but

00:29:28,320 --> 00:29:33,840
apparently according to the npd database

00:29:30,720 --> 00:29:36,080
there are two cvs from 2020 that

00:29:33,840 --> 00:29:38,320
are reported against this package so we

00:29:36,080 --> 00:29:40,320
should probably investigate that

00:29:38,320 --> 00:29:43,440
see if upstream has the appropriate

00:29:40,320 --> 00:29:43,440
venability fixes

00:29:43,679 --> 00:29:50,880
and around these release monitoring.org

00:29:48,320 --> 00:29:52,720
checks and cv checks we also wanted to

00:29:50,880 --> 00:29:53,760
improve the notifications then to

00:29:52,720 --> 00:29:55,520
developers

00:29:53,760 --> 00:29:56,799
a little bit like the linux scanner as a

00:29:55,520 --> 00:29:58,640
maintainers file

00:29:56,799 --> 00:30:00,080
build root as a developer's file which

00:29:58,640 --> 00:30:02,559
says which developer

00:30:00,080 --> 00:30:03,200
is responsible for which package or

00:30:02,559 --> 00:30:05,200
which

00:30:03,200 --> 00:30:06,880
dev config for a given platform or which

00:30:05,200 --> 00:30:09,360
cpu architecture

00:30:06,880 --> 00:30:10,480
and we are already sending a

00:30:09,360 --> 00:30:12,880
notification to

00:30:10,480 --> 00:30:14,480
uh developers when there are failures

00:30:12,880 --> 00:30:17,200
related to their packages

00:30:14,480 --> 00:30:19,279
in our auto builders and as part of the

00:30:17,200 --> 00:30:21,679
internship that was done last summer

00:30:19,279 --> 00:30:22,799
we improved that notification to cover

00:30:21,679 --> 00:30:25,120
more aspects

00:30:22,799 --> 00:30:27,520
so we know notify developers about

00:30:25,120 --> 00:30:30,480
packages being not up to date

00:30:27,520 --> 00:30:33,200
about cbes that are not fixed about

00:30:30,480 --> 00:30:33,919
build failures of our dev configs in our

00:30:33,200 --> 00:30:36,480
git lab

00:30:33,919 --> 00:30:37,039
continuous integration or about failures

00:30:36,480 --> 00:30:39,520
to run

00:30:37,039 --> 00:30:42,159
our runtime tests in the same gitlab

00:30:39,520 --> 00:30:44,000
continuous integration infrastructure

00:30:42,159 --> 00:30:46,080
this notification look like this for

00:30:44,000 --> 00:30:46,720
example packages having a newer version

00:30:46,080 --> 00:30:48,200
this is

00:30:46,720 --> 00:30:50,159
information coming from

00:30:48,200 --> 00:30:52,320
releasemonitoring.org telling a

00:30:50,159 --> 00:30:54,080
contributor okay your pack this package

00:30:52,320 --> 00:30:55,840
you're taking care of is no longer up to

00:30:54,080 --> 00:30:57,840
date with upstream

00:30:55,840 --> 00:31:00,000
we have the same for packages having

00:30:57,840 --> 00:31:02,559
cves as can be seen at the bottom of

00:31:00,000 --> 00:31:02,559
that slide

00:31:02,640 --> 00:31:07,440
moving on and we also notify

00:31:05,760 --> 00:31:09,279
developers of failures of their dev

00:31:07,440 --> 00:31:10,720
configs and so we can see here at the

00:31:09,279 --> 00:31:13,360
top of the slide a number of

00:31:10,720 --> 00:31:14,000
dev configs for different platforms that

00:31:13,360 --> 00:31:17,120
apparently

00:31:14,000 --> 00:31:18,000
do not build and some failures in our

00:31:17,120 --> 00:31:20,080
run time test

00:31:18,000 --> 00:31:22,960
as well which need to be looked at by

00:31:20,080 --> 00:31:25,200
their maintainers

00:31:22,960 --> 00:31:26,640
and another aspect that was improved as

00:31:25,200 --> 00:31:29,159
part of this internship

00:31:26,640 --> 00:31:30,480
is the search capability on

00:31:29,159 --> 00:31:32,159
autobuild.peter.org

00:31:30,480 --> 00:31:33,679
so this is our autobuilder

00:31:32,159 --> 00:31:38,399
infrastructure which we use

00:31:33,679 --> 00:31:40,880
to build uh 24 7 random configurations

00:31:38,399 --> 00:31:42,760
of billboards and report those results

00:31:40,880 --> 00:31:44,080
uh in a central location

00:31:42,760 --> 00:31:46,320
autobuild.pledgeroot.org

00:31:44,080 --> 00:31:48,240
this has been in place for many years in

00:31:46,320 --> 00:31:50,640
the root community and has helped us

00:31:48,240 --> 00:31:52,640
detect and fix many many dependency

00:31:50,640 --> 00:31:55,039
problems version compatibility issue

00:31:52,640 --> 00:31:58,159
tool chain problems and many more

00:31:55,039 --> 00:31:59,200
and so what we wanted to do is be able

00:31:58,159 --> 00:32:01,919
to query

00:31:59,200 --> 00:32:02,640
um the database for things like hey can

00:32:01,919 --> 00:32:04,559
you tell me

00:32:02,640 --> 00:32:07,760
what are all the successful builds that

00:32:04,559 --> 00:32:09,279
adds uh br2 package buzzerbox enabled on

00:32:07,760 --> 00:32:11,039
arm with uclipsi

00:32:09,279 --> 00:32:13,200
because that kind of query is sometimes

00:32:11,039 --> 00:32:15,360
useful to understand

00:32:13,200 --> 00:32:17,440
why a given failure is happening since

00:32:15,360 --> 00:32:19,919
when it is happening under what

00:32:17,440 --> 00:32:20,960
conditions it is happening and so on and

00:32:19,919 --> 00:32:23,120
so our in turn

00:32:20,960 --> 00:32:27,200
improve the um the search capabilities

00:32:23,120 --> 00:32:27,200
to to make that sort of queries possible

00:32:27,279 --> 00:32:30,559
we've done a number of other smaller

00:32:29,279 --> 00:32:33,039
improvements as well

00:32:30,559 --> 00:32:34,080
and we've added a make package diff

00:32:33,039 --> 00:32:36,480
config target

00:32:34,080 --> 00:32:38,399
for k config based packages so the k

00:32:36,480 --> 00:32:40,799
config based packages are for example

00:32:38,399 --> 00:32:42,880
are the b root package for linux for you

00:32:40,799 --> 00:32:45,279
boot for buzzy box so all those

00:32:42,880 --> 00:32:46,399
packages that use the typical manyconfig

00:32:45,279 --> 00:32:49,760
xconfig

00:32:46,399 --> 00:32:52,960
configuration interface and the make

00:32:49,760 --> 00:32:54,320
linux config target allows to calculate

00:32:52,960 --> 00:32:56,799
the difference between

00:32:54,320 --> 00:32:57,600
the currently stored configuration for

00:32:56,799 --> 00:32:59,360
linux

00:32:57,600 --> 00:33:01,279
and the one you're actually using to

00:32:59,360 --> 00:33:03,120
build your linux scanner indeed when you

00:33:01,279 --> 00:33:04,480
run make linux mini config

00:33:03,120 --> 00:33:06,159
you can change the linux kindle

00:33:04,480 --> 00:33:08,000
configuration but

00:33:06,159 --> 00:33:09,919
it might diverge from the one you have

00:33:08,000 --> 00:33:10,559
stored so this allows to calculate the

00:33:09,919 --> 00:33:12,880
difference

00:33:10,559 --> 00:33:14,399
and help you update your linux kindle

00:33:12,880 --> 00:33:16,880
configuration

00:33:14,399 --> 00:33:19,120
we've added uh support for generating

00:33:16,880 --> 00:33:20,559
root file system images in more format

00:33:19,120 --> 00:33:22,159
we obviously already supported

00:33:20,559 --> 00:33:25,519
generating ext4

00:33:22,159 --> 00:33:27,840
file system images squash fs ubi fs

00:33:25,519 --> 00:33:28,799
and 20 more but we've added support for

00:33:27,840 --> 00:33:32,080
f2fs

00:33:28,799 --> 00:33:34,880
butter fs and hero fs as well

00:33:32,080 --> 00:33:36,240
another nice contribution that we got

00:33:34,880 --> 00:33:38,240
was the addition of

00:33:36,240 --> 00:33:40,399
support for get text tiny as an

00:33:38,240 --> 00:33:42,080
alternative to the full-blown glue get

00:33:40,399 --> 00:33:44,640
text so get text is used for

00:33:42,080 --> 00:33:46,159
message translation mainly and in the

00:33:44,640 --> 00:33:48,240
number of embedded systems

00:33:46,159 --> 00:33:49,279
having message translation is not always

00:33:48,240 --> 00:33:51,679
necessary

00:33:49,279 --> 00:33:53,600
but we still had to use the full-blown

00:33:51,679 --> 00:33:55,600
glue get text which is quite long to

00:33:53,600 --> 00:33:56,640
build and has a certain footprint on the

00:33:55,600 --> 00:33:58,399
target

00:33:56,640 --> 00:33:59,679
and there is a replacement project

00:33:58,399 --> 00:34:02,720
called get text tiny

00:33:59,679 --> 00:34:05,519
so now we have the two as an alternative

00:34:02,720 --> 00:34:06,080
which is really nice to create more

00:34:05,519 --> 00:34:09,679
lightweight

00:34:06,080 --> 00:34:12,320
embedded linux systems

00:34:09,679 --> 00:34:13,839
so to conclude this talk um beadwood is

00:34:12,320 --> 00:34:15,599
a very active project

00:34:13,839 --> 00:34:17,119
as you can see from both the activity of

00:34:15,599 --> 00:34:18,800
the community and the number of things

00:34:17,119 --> 00:34:20,079
that have evolved and improved over the

00:34:18,800 --> 00:34:22,720
past two years

00:34:20,079 --> 00:34:23,119
we are now doing an lts release each

00:34:22,720 --> 00:34:24,879
year

00:34:23,119 --> 00:34:26,560
with a one year maintenance window

00:34:24,879 --> 00:34:28,480
perhaps in the future we'll extend that

00:34:26,560 --> 00:34:30,320
if we receive enough interest and

00:34:28,480 --> 00:34:32,159
contributions but for now it's a one

00:34:30,320 --> 00:34:33,679
year duration

00:34:32,159 --> 00:34:36,320
we've added support for new cpu

00:34:33,679 --> 00:34:39,679
architecture new packet infrastructures

00:34:36,320 --> 00:34:42,079
we have git caching and we have

00:34:39,679 --> 00:34:42,879
kept a lot of packages up to date and

00:34:42,079 --> 00:34:45,280
added

00:34:42,879 --> 00:34:47,359
more than 400 packages top level

00:34:45,280 --> 00:34:49,119
parallel build has made good progress

00:34:47,359 --> 00:34:50,960
we've also made progress in the

00:34:49,119 --> 00:34:53,040
reproducible build effort

00:34:50,960 --> 00:34:55,839
and most importantly the maintenance

00:34:53,040 --> 00:34:57,520
tooling has been significantly improved

00:34:55,839 --> 00:34:58,800
overall if you're interested in learning

00:34:57,520 --> 00:35:00,320
about build roots and of course

00:34:58,800 --> 00:35:00,960
available in the chat following this

00:35:00,320 --> 00:35:03,680
talk

00:35:00,960 --> 00:35:05,920
but i'm also going to teach a 16 hours

00:35:03,680 --> 00:35:06,400
online training to to dive into build

00:35:05,920 --> 00:35:08,480
root

00:35:06,400 --> 00:35:11,359
so if you're interested it's going to

00:35:08,480 --> 00:35:14,079
take place online from july 28 to july

00:35:11,359 --> 00:35:16,560
31 and you can register online on the

00:35:14,079 --> 00:35:18,320
bootleg.com website

00:35:16,560 --> 00:35:20,160
thanks a lot for your attention and know

00:35:18,320 --> 00:35:20,800
if you have any question i'm available

00:35:20,160 --> 00:35:22,720
in the chat

00:35:20,800 --> 00:35:24,800
to discuss anything related to build

00:35:22,720 --> 00:35:31,040
road with you thanks a lot and enjoy

00:35:24,800 --> 00:35:34,960
working with buildroot

00:35:31,040 --> 00:35:35,599
hello um good morning again good

00:35:34,960 --> 00:35:37,920
afternoon

00:35:35,599 --> 00:35:38,720
good evening good night depending on

00:35:37,920 --> 00:35:40,160
where you are

00:35:38,720 --> 00:35:42,720
as i said at the beginning of the talk

00:35:40,160 --> 00:35:45,200
um it was nice to see a

00:35:42,720 --> 00:35:46,960
if you familiar names in in the list of

00:35:45,200 --> 00:35:48,400
attendees and the list of questions as

00:35:46,960 --> 00:35:51,440
well and obviously a lot more

00:35:48,400 --> 00:35:53,520
new people um so i'm just gonna

00:35:51,440 --> 00:35:55,520
um talk a little bit about the different

00:35:53,520 --> 00:35:56,960
questions that i had i already answered

00:35:55,520 --> 00:36:00,240
most of them and i'm just gonna

00:35:56,960 --> 00:36:02,079
hopefully say a bit more um so my

00:36:00,240 --> 00:36:04,160
my colleague michael of the niker asked

00:36:02,079 --> 00:36:04,720
about clang support and in billboard and

00:36:04,160 --> 00:36:07,119
and

00:36:04,720 --> 00:36:08,720
we do have a clank package already but

00:36:07,119 --> 00:36:11,200
it's only used uh

00:36:08,720 --> 00:36:13,520
on the targets within the context of

00:36:11,200 --> 00:36:16,160
mesa 3d for opengl there are some

00:36:13,520 --> 00:36:16,800
opengl implementation that that rely on

00:36:16,160 --> 00:36:19,359
clank

00:36:16,800 --> 00:36:21,359
so we have that already in emerged and

00:36:19,359 --> 00:36:24,160
we have a patch series pending

00:36:21,359 --> 00:36:25,119
to add clang as a host package to a

00:36:24,160 --> 00:36:26,960
cross compiler

00:36:25,119 --> 00:36:28,560
and clang that could potentially replace

00:36:26,960 --> 00:36:31,760
gcc

00:36:28,560 --> 00:36:34,960
but um it's not it's not ready yet and

00:36:31,760 --> 00:36:36,160
i think the the road towards having full

00:36:34,960 --> 00:36:39,440
support for clang

00:36:36,160 --> 00:36:41,520
is is going to be quite long um but

00:36:39,440 --> 00:36:43,280
we have initial steps in that direction

00:36:41,520 --> 00:36:44,880
so i i think this is hopefully something

00:36:43,280 --> 00:36:48,000
we can make progress

00:36:44,880 --> 00:36:49,680
um in the next let's say months is maybe

00:36:48,000 --> 00:36:52,320
a bit short but at least the next

00:36:49,680 --> 00:36:53,200
few years hopefully and then there was

00:36:52,320 --> 00:36:55,280
the the

00:36:53,200 --> 00:36:56,800
kind of recurring question on package

00:36:55,280 --> 00:36:59,040
management systems um

00:36:56,800 --> 00:36:59,920
as as said again at the beginning of the

00:36:59,040 --> 00:37:02,320
of the talk

00:36:59,920 --> 00:37:03,680
um pluto generates a file system image

00:37:02,320 --> 00:37:06,240
and we don't have any

00:37:03,680 --> 00:37:08,000
package management um system on the

00:37:06,240 --> 00:37:11,280
target itself so we don't have any like

00:37:08,000 --> 00:37:14,320
things like opkg or apt or or dnf

00:37:11,280 --> 00:37:16,720
or anything like that um and it's been

00:37:14,320 --> 00:37:18,240
like a design choice for for for people

00:37:16,720 --> 00:37:21,040
for quite some time

00:37:18,240 --> 00:37:21,839
um in the um as i reply to the question

00:37:21,040 --> 00:37:23,200
in the youtube

00:37:21,839 --> 00:37:25,119
open embedded where there is indeed

00:37:23,200 --> 00:37:26,240
support for for packages but when you

00:37:25,119 --> 00:37:28,720
ask people

00:37:26,240 --> 00:37:29,520
even even like open embedded and and

00:37:28,720 --> 00:37:32,000
youtube

00:37:29,520 --> 00:37:32,880
and developers and experts what would

00:37:32,000 --> 00:37:34,800
they use

00:37:32,880 --> 00:37:37,200
they rarely use packages because they

00:37:34,800 --> 00:37:39,839
really like that concept of like

00:37:37,200 --> 00:37:42,079
one single image that you have tested

00:37:39,839 --> 00:37:43,599
and that you then flash on your device

00:37:42,079 --> 00:37:45,200
and then when you ship an update you

00:37:43,599 --> 00:37:46,560
update the whole thing at once so you

00:37:45,200 --> 00:37:48,400
know that what you are

00:37:46,560 --> 00:37:49,680
flashing on the device is exactly what

00:37:48,400 --> 00:37:52,880
you have tested

00:37:49,680 --> 00:37:56,079
and and so uh packages on the target

00:37:52,880 --> 00:37:58,800
look like a nice idea um

00:37:56,079 --> 00:38:00,160
but in lots of the industrial embedded

00:37:58,800 --> 00:38:02,720
contexts and environments

00:38:00,160 --> 00:38:03,359
having like this full image update is is

00:38:02,720 --> 00:38:06,880
often the

00:38:03,359 --> 00:38:09,680
the safest thing you you have um

00:38:06,880 --> 00:38:11,599
so that being said um another reason for

00:38:09,680 --> 00:38:12,160
for not having that in in build wood is

00:38:11,599 --> 00:38:14,880
because

00:38:12,160 --> 00:38:16,160
it would add a lot of complexity uh to

00:38:14,880 --> 00:38:19,599
create proper

00:38:16,160 --> 00:38:20,320
packages you really have to um be able

00:38:19,599 --> 00:38:22,560
to

00:38:20,320 --> 00:38:24,000
understand what are the the runtime

00:38:22,560 --> 00:38:25,119
dependencies between between the

00:38:24,000 --> 00:38:27,520
packages

00:38:25,119 --> 00:38:29,040
uh we have uh in lots of support for

00:38:27,520 --> 00:38:32,000
optional dependencies we make

00:38:29,040 --> 00:38:33,359
most of the time as many dependencies as

00:38:32,000 --> 00:38:36,240
possible optional

00:38:33,359 --> 00:38:37,920
and this is making support for uh

00:38:36,240 --> 00:38:40,560
packaging on the targets

00:38:37,920 --> 00:38:42,079
too complicated compared to the benefit

00:38:40,560 --> 00:38:44,079
that we perceive

00:38:42,079 --> 00:38:45,359
and and one of the key thing of build

00:38:44,079 --> 00:38:47,359
root is to be

00:38:45,359 --> 00:38:49,040
relatively simple so if we kind of break

00:38:47,359 --> 00:38:50,320
that property of build wood we

00:38:49,040 --> 00:38:52,800
would think we would kind of miss the

00:38:50,320 --> 00:38:55,359
point um

00:38:52,800 --> 00:38:56,960
nishan then asked a question about um

00:38:55,359 --> 00:38:59,599
having something to

00:38:56,960 --> 00:39:01,839
to host the downloaded artifacts in some

00:38:59,599 --> 00:39:01,839
kind of

00:39:01,920 --> 00:39:05,520
central location in a company so by

00:39:04,560 --> 00:39:07,440
default obviously

00:39:05,520 --> 00:39:08,720
the root downloads from the upstream

00:39:07,440 --> 00:39:11,839
location like

00:39:08,720 --> 00:39:13,680
kindle.org or buzzybox.net and so on

00:39:11,839 --> 00:39:16,240
and then as a local cache on your

00:39:13,680 --> 00:39:18,800
machine of the downloaded tables

00:39:16,240 --> 00:39:20,880
but optionally you can specify what we

00:39:18,800 --> 00:39:23,599
call a primary site which is an http

00:39:20,880 --> 00:39:26,880
server in your company for example

00:39:23,599 --> 00:39:28,800
where which field would query before

00:39:26,880 --> 00:39:30,960
going to the upstream site

00:39:28,800 --> 00:39:32,880
uh so that would create like a a second

00:39:30,960 --> 00:39:34,720
level cache of your local cache on your

00:39:32,880 --> 00:39:36,640
machine then you have a second level

00:39:34,720 --> 00:39:38,640
cache in your company and then

00:39:36,640 --> 00:39:40,800
as a fallback you have the upstream

00:39:38,640 --> 00:39:43,839
location and in fact there's even a

00:39:40,800 --> 00:39:44,960
another fallback and sources.buildup.net

00:39:43,839 --> 00:39:47,359
which is a backup

00:39:44,960 --> 00:39:49,040
mirror that we built community maintain

00:39:47,359 --> 00:39:50,720
with all the tar balls

00:39:49,040 --> 00:39:52,320
for all the versions of all the packages

00:39:50,720 --> 00:39:54,000
we have ever supported and we never

00:39:52,320 --> 00:39:56,560
remove anything from there

00:39:54,000 --> 00:39:59,119
and so you you can add this primary site

00:39:56,560 --> 00:40:01,200
locally in your company if you want to

00:39:59,119 --> 00:40:03,839
you can even tell build wood please do

00:40:01,200 --> 00:40:07,359
not ever go to the upstream location

00:40:03,839 --> 00:40:08,240
uh by taking this br2 primary site only

00:40:07,359 --> 00:40:11,119
option

00:40:08,240 --> 00:40:12,000
and um that would prevent you fruit from

00:40:11,119 --> 00:40:14,640
from querying

00:40:12,000 --> 00:40:17,119
anything but your local cash and the

00:40:14,640 --> 00:40:20,160
cash in your company the primary site

00:40:17,119 --> 00:40:20,480
um so that possibly uh answers some of

00:40:20,160 --> 00:40:23,040
the

00:40:20,480 --> 00:40:24,079
some in at least partly what nissan was

00:40:23,040 --> 00:40:26,960
asking

00:40:24,079 --> 00:40:28,720
um nishan was also asking about like

00:40:26,960 --> 00:40:30,319
would you recommend build wood for a new

00:40:28,720 --> 00:40:32,560
board bring up and why

00:40:30,319 --> 00:40:33,920
and yes i think build route is really

00:40:32,560 --> 00:40:37,040
really relevant there

00:40:33,920 --> 00:40:38,880
um compared to a more complex build

00:40:37,040 --> 00:40:40,480
systems such as yukto and noe which

00:40:38,880 --> 00:40:41,920
makes a lot of sense for complex

00:40:40,480 --> 00:40:44,160
products when you have a whole

00:40:41,920 --> 00:40:46,640
product family with differences between

00:40:44,160 --> 00:40:48,560
machines and images and a pretty complex

00:40:46,640 --> 00:40:48,880
uh setup it makes a lot of sense to to

00:40:48,560 --> 00:40:51,520
use

00:40:48,880 --> 00:40:52,800
your oe when you're more in the in the

00:40:51,520 --> 00:40:55,119
prototyping phase

00:40:52,800 --> 00:40:56,880
or in the uh like i'm doing kindle

00:40:55,119 --> 00:40:58,880
development can i'll bring up

00:40:56,880 --> 00:41:00,560
uh you what you want is not like

00:40:58,880 --> 00:41:01,520
something final for your product but

00:41:00,560 --> 00:41:03,839
just quickly get

00:41:01,520 --> 00:41:05,119
a small phone system that has this tool

00:41:03,839 --> 00:41:08,720
to test audio or

00:41:05,119 --> 00:41:10,400
your camera or or video or display or

00:41:08,720 --> 00:41:11,839
some other thing and often you need a

00:41:10,400 --> 00:41:13,359
few user space tools

00:41:11,839 --> 00:41:15,520
it's kind of annoying to cross-compile

00:41:13,359 --> 00:41:16,960
them by hand and bluetooth really fits

00:41:15,520 --> 00:41:19,440
in really well here

00:41:16,960 --> 00:41:20,000
i know lots of companies do k not

00:41:19,440 --> 00:41:22,000
development

00:41:20,000 --> 00:41:23,599
that do that and and in fact most of my

00:41:22,000 --> 00:41:26,000
colleagues at woodland

00:41:23,599 --> 00:41:27,119
um and that do keynote development they

00:41:26,000 --> 00:41:30,400
use build root a lot

00:41:27,119 --> 00:41:31,920
for for building this small tailored

00:41:30,400 --> 00:41:33,440
root file system that just have the

00:41:31,920 --> 00:41:36,480
tools that they need for their

00:41:33,440 --> 00:41:38,720
king of development another

00:41:36,480 --> 00:41:39,520
attendee asked about the the c-sharp

00:41:38,720 --> 00:41:42,400
support

00:41:39,520 --> 00:41:44,000
um so i'm not really well-versed into

00:41:42,400 --> 00:41:46,640
all the c-sharp ecosystem

00:41:44,000 --> 00:41:48,079
but we do have a package for mono we do

00:41:46,640 --> 00:41:50,400
have a package for gtk

00:41:48,079 --> 00:41:51,599
sharp which is the the c-sharp binding

00:41:50,400 --> 00:41:54,240
for the gtk

00:41:51,599 --> 00:41:55,119
toolkit library and this is in bedroom

00:41:54,240 --> 00:41:56,880
it's been there for

00:41:55,119 --> 00:41:58,319
quite a while uh and it's been

00:41:56,880 --> 00:42:01,040
contributed by

00:41:58,319 --> 00:42:01,520
a company called amarillo solutions and

00:42:01,040 --> 00:42:03,760
and

00:42:01,520 --> 00:42:06,319
they've been using it for uh for some

00:42:03,760 --> 00:42:08,240
products with their customers i suspect

00:42:06,319 --> 00:42:09,839
and and it's being maintained and they

00:42:08,240 --> 00:42:10,800
updated regularly so it's definitely

00:42:09,839 --> 00:42:14,720
there and and i

00:42:10,800 --> 00:42:17,280
i suppose it does work um

00:42:14,720 --> 00:42:18,079
sergio asked about like the roadmap uh

00:42:17,280 --> 00:42:19,920
what are the

00:42:18,079 --> 00:42:22,160
needs and long-term features planned for

00:42:19,920 --> 00:42:23,760
buildboots and i kind of replied like

00:42:22,160 --> 00:42:26,079
it's very much like all open source

00:42:23,760 --> 00:42:28,319
projects we don't have a roam map the

00:42:26,079 --> 00:42:30,240
roadmap is whatever gets contributed

00:42:28,319 --> 00:42:33,839
whatever is ready

00:42:30,240 --> 00:42:36,880
and yeah that we can merge

00:42:33,839 --> 00:42:38,960
so um the best way to get a

00:42:36,880 --> 00:42:40,720
sense of the roadmap is to look at the

00:42:38,960 --> 00:42:41,839
the backlog of patches we have in

00:42:40,720 --> 00:42:44,560
patchwork

00:42:41,839 --> 00:42:46,079
so there's about 500 patches pending in

00:42:44,560 --> 00:42:48,000
patchwork at the moment so we have a

00:42:46,079 --> 00:42:49,440
pretty significant backlog which is

00:42:48,000 --> 00:42:51,680
good in the sense that it means we have

00:42:49,440 --> 00:42:52,560
lots of contributions but not so good in

00:42:51,680 --> 00:42:54,000
the sense that

00:42:52,560 --> 00:42:55,440
we don't have enough maintainer

00:42:54,000 --> 00:42:56,800
bandwidth to review all of that but i

00:42:55,440 --> 00:42:59,760
guess that's that's pretty common

00:42:56,800 --> 00:43:01,119
in many open source projects but i'd say

00:42:59,760 --> 00:43:03,760
the the big things that i

00:43:01,119 --> 00:43:05,680
see isn't the improvements in top level

00:43:03,760 --> 00:43:09,680
parallel that's one thing

00:43:05,680 --> 00:43:10,240
um we have also some work on going on on

00:43:09,680 --> 00:43:13,440
cv

00:43:10,240 --> 00:43:16,319
tooling improving that's making it more

00:43:13,440 --> 00:43:16,960
more more useful for for users so you

00:43:16,319 --> 00:43:19,680
can get

00:43:16,960 --> 00:43:21,040
not just a list of cvs for the entire

00:43:19,680 --> 00:43:22,240
package set in build wood but

00:43:21,040 --> 00:43:24,240
specifically for your

00:43:22,240 --> 00:43:26,319
good configuration so if you have an

00:43:24,240 --> 00:43:28,240
older build root you can still run that

00:43:26,319 --> 00:43:31,359
tool and check if the system that you

00:43:28,240 --> 00:43:32,880
produce is is affected by any known cve

00:43:31,359 --> 00:43:34,480
and so there will definitely be some

00:43:32,880 --> 00:43:37,200
work in in this area

00:43:34,480 --> 00:43:39,040
uh supporting the clan compiler is is

00:43:37,200 --> 00:43:41,200
definitely a big thing as well

00:43:39,040 --> 00:43:42,800
um to answer the question i quickly

00:43:41,200 --> 00:43:44,319
proved through the patchwork and also we

00:43:42,800 --> 00:43:46,240
also had the apache series pending

00:43:44,319 --> 00:43:48,480
towards the chromium

00:43:46,240 --> 00:43:50,400
engine so that that would be another big

00:43:48,480 --> 00:43:52,800
thing that that we could merge

00:43:50,400 --> 00:43:54,640
but most of the the patch if you look at

00:43:52,800 --> 00:43:55,920
the backlog is really new packages

00:43:54,640 --> 00:43:57,839
package updates

00:43:55,920 --> 00:44:00,000
i think the the base build

00:43:57,839 --> 00:44:02,160
infrastructure is pretty solid now

00:44:00,000 --> 00:44:03,920
um of course it needs improvements here

00:44:02,160 --> 00:44:06,160
and there but the foundations are pretty

00:44:03,920 --> 00:44:07,599
solid and and don't change that much

00:44:06,160 --> 00:44:09,680
so most of the activity is really

00:44:07,599 --> 00:44:10,880
focused on on more packages keeping the

00:44:09,680 --> 00:44:14,000
packages updated

00:44:10,880 --> 00:44:16,079
and and so on um

00:44:14,000 --> 00:44:17,760
so then um there was a question about

00:44:16,079 --> 00:44:19,760
the slides but they will be available

00:44:17,760 --> 00:44:21,760
like like for all talks like i kind of

00:44:19,760 --> 00:44:23,119
do not really understand why people keep

00:44:21,760 --> 00:44:25,280
asking about the slides it's been a

00:44:23,119 --> 00:44:26,000
tradition at elc that all the slides are

00:44:25,280 --> 00:44:27,920
online

00:44:26,000 --> 00:44:29,839
after the event and there will be for

00:44:27,920 --> 00:44:31,040
this talk but also any other toolkit at

00:44:29,839 --> 00:44:34,319
elc

00:44:31,040 --> 00:44:35,200
um the there was another question that i

00:44:34,319 --> 00:44:38,079
did not answer

00:44:35,200 --> 00:44:39,680
it came later on um which is which says

00:44:38,079 --> 00:44:41,680
my favorite builds are

00:44:39,680 --> 00:44:43,520
taking around an hour and i am

00:44:41,680 --> 00:44:46,079
interested in parallel build when do you

00:44:43,520 --> 00:44:48,240
think the qt5 issues will be resolved

00:44:46,079 --> 00:44:49,440
also what other issues might i encounter

00:44:48,240 --> 00:44:51,440
so i believe um

00:44:49,440 --> 00:44:53,119
this attendee is is referring to a top

00:44:51,440 --> 00:44:55,760
level build here

00:44:53,119 --> 00:44:56,880
uh so the qt5 uh issues with top-rated

00:44:55,760 --> 00:44:58,960
panel builds we do

00:44:56,880 --> 00:45:01,040
have a fight series pending in

00:44:58,960 --> 00:45:02,000
patchworks it's one of the things where

00:45:01,040 --> 00:45:03,599
we do have

00:45:02,000 --> 00:45:05,200
some existing work that needs to be

00:45:03,599 --> 00:45:07,760
reviewed and integrated

00:45:05,200 --> 00:45:08,480
it looks pretty good um just needs a bit

00:45:07,760 --> 00:45:11,599
of time for

00:45:08,480 --> 00:45:15,119
for review and merging so i think this

00:45:11,599 --> 00:45:16,720
could be resolved not um in a too

00:45:15,119 --> 00:45:18,400
distant future and if you want to help

00:45:16,720 --> 00:45:20,480
feel free to pick up the batteries

00:45:18,400 --> 00:45:23,040
and you're tested by and then

00:45:20,480 --> 00:45:25,680
participate due to that discussion

00:45:23,040 --> 00:45:27,440
um we recently had someone do that and

00:45:25,680 --> 00:45:28,079
it's always useful to have that feedback

00:45:27,440 --> 00:45:29,440
from

00:45:28,079 --> 00:45:32,000
from users and from the from the

00:45:29,440 --> 00:45:33,839
community and in terms of other issues

00:45:32,000 --> 00:45:34,960
with top level build that you might

00:45:33,839 --> 00:45:37,359
encounter

00:45:34,960 --> 00:45:38,960
i see two issues that you might

00:45:37,359 --> 00:45:41,760
encounter at the moment

00:45:38,960 --> 00:45:43,680
um one issue is that the way uh top

00:45:41,760 --> 00:45:45,599
level is organized it's it's

00:45:43,680 --> 00:45:48,319
i have only five minutes left that's too

00:45:45,599 --> 00:45:50,720
too too short to explain all the details

00:45:48,319 --> 00:45:52,640
but the consequence of how it works is

00:45:50,720 --> 00:45:55,920
that it is no longer possible for

00:45:52,640 --> 00:45:57,680
one package to override overwrite a file

00:45:55,920 --> 00:45:59,119
that was installed by another package so

00:45:57,680 --> 00:46:02,240
you can't do something like

00:45:59,119 --> 00:46:02,880
package a installs a file and then

00:46:02,240 --> 00:46:04,640
package b

00:46:02,880 --> 00:46:06,800
comes and then does some said or

00:46:04,640 --> 00:46:09,119
replacements into that file

00:46:06,800 --> 00:46:09,920
right because uh due to how it's

00:46:09,119 --> 00:46:11,920
organized

00:46:09,920 --> 00:46:13,440
at the end of the build you may have a

00:46:11,920 --> 00:46:13,760
version of the file that doesn't have

00:46:13,440 --> 00:46:16,400
that

00:46:13,760 --> 00:46:16,880
the changes that that other package made

00:46:16,400 --> 00:46:19,119
so

00:46:16,880 --> 00:46:21,359
we really have to have each package

00:46:19,119 --> 00:46:22,880
install separate set of files

00:46:21,359 --> 00:46:25,280
and possibly at the end of the build

00:46:22,880 --> 00:46:27,440
have some logic that that concatenates

00:46:25,280 --> 00:46:29,359
this number of files together to produce

00:46:27,440 --> 00:46:31,440
the final result or something like that

00:46:29,359 --> 00:46:33,119
but that cannot be done within the

00:46:31,440 --> 00:46:36,240
parallel build itself

00:46:33,119 --> 00:46:38,720
um and on this we have a patch series

00:46:36,240 --> 00:46:40,480
actually from me pending that detects

00:46:38,720 --> 00:46:40,960
that kind of overrides and a board to

00:46:40,480 --> 00:46:42,640
build

00:46:40,960 --> 00:46:44,480
if one package overwrites a file

00:46:42,640 --> 00:46:46,960
installed by another so it should be

00:46:44,480 --> 00:46:49,359
pretty easy to to detect and and fix

00:46:46,960 --> 00:46:50,319
if that that work uh is merged in

00:46:49,359 --> 00:46:51,920
billboard

00:46:50,319 --> 00:46:54,240
the other thing that isn't working at

00:46:51,920 --> 00:46:57,680
the moment uh with the stopwatch

00:46:54,240 --> 00:46:59,839
a little bit of package reconfigure

00:46:57,680 --> 00:47:01,040
package rebuild package reinstall

00:46:59,839 --> 00:47:02,240
targets

00:47:01,040 --> 00:47:04,480
which you can run you can run for

00:47:02,240 --> 00:47:06,560
example make linux dash rebuild

00:47:04,480 --> 00:47:08,319
which forces build route into rebuilding

00:47:06,560 --> 00:47:09,440
the linux kindle even if it was already

00:47:08,319 --> 00:47:11,359
built

00:47:09,440 --> 00:47:12,480
maybe you've made a change into the

00:47:11,359 --> 00:47:14,240
source code you want to

00:47:12,480 --> 00:47:16,079
rebuild that package specifically so you

00:47:14,240 --> 00:47:18,240
can force into rebuilding it

00:47:16,079 --> 00:47:20,160
and that is working fine without the

00:47:18,240 --> 00:47:22,559
private payload build but with the

00:47:20,160 --> 00:47:24,079
parallel build again due to internal

00:47:22,559 --> 00:47:26,400
implementation details

00:47:24,079 --> 00:47:28,400
it doesn't work at the moment and that

00:47:26,400 --> 00:47:31,599
requires tracking which file

00:47:28,400 --> 00:47:32,559
is installed by which package which um

00:47:31,599 --> 00:47:35,520
yeah we need a

00:47:32,559 --> 00:47:35,920
bit of work we have some ideas there but

00:47:35,520 --> 00:47:37,920
it's

00:47:35,920 --> 00:47:39,760
it's yeah probably something that is

00:47:37,920 --> 00:47:41,200
going to require a bit more work than

00:47:39,760 --> 00:47:44,240
the override files

00:47:41,200 --> 00:47:48,240
issue i was referring to before

00:47:44,240 --> 00:47:49,359
um so i think i pretty much covered all

00:47:48,240 --> 00:47:52,800
questions

00:47:49,359 --> 00:47:55,520
um at least that i had until now

00:47:52,800 --> 00:47:56,240
um i'll be available on on slack there

00:47:55,520 --> 00:47:59,760
is this uh

00:47:56,240 --> 00:48:02,800
channel i think it's called a two um

00:47:59,760 --> 00:48:04,079
dash track dash embedded linux um i've

00:48:02,800 --> 00:48:06,880
been around for the past

00:48:04,079 --> 00:48:08,559
two days and and i'm going to be around

00:48:06,880 --> 00:48:10,720
as well later today and

00:48:08,559 --> 00:48:12,240
and in the next days as well the slides

00:48:10,720 --> 00:48:13,040
will be online because the video will be

00:48:12,240 --> 00:48:15,040
online

00:48:13,040 --> 00:48:16,559
pedrot is a very open community you can

00:48:15,040 --> 00:48:18,800
join our mailing list

00:48:16,559 --> 00:48:20,160
our rc channel is also very active lots

00:48:18,800 --> 00:48:22,400
of

00:48:20,160 --> 00:48:24,319
root contributors maintainers there so

00:48:22,400 --> 00:48:26,000
if you have any question

00:48:24,319 --> 00:48:28,640
don't hesitate to come we've got we have

00:48:26,000 --> 00:48:31,440
lots of users joining asking questions

00:48:28,640 --> 00:48:32,960
um and and we help them so really don't

00:48:31,440 --> 00:48:36,079
hesitate to join us

00:48:32,960 --> 00:48:39,040
and thanks for attending my talk again

00:48:36,079 --> 00:48:40,160
uh thanks for being staying for the the

00:48:39,040 --> 00:48:41,599
q a session

00:48:40,160 --> 00:48:43,520
and hope to see you soon in the

00:48:41,599 --> 00:48:46,079
beautiful community enjoy the rest of

00:48:43,520 --> 00:48:46,079
elc

00:48:46,839 --> 00:48:49,839
bye

00:49:42,960 --> 00:49:45,040

YouTube URL: https://www.youtube.com/watch?v=W8fl82SGNL0


