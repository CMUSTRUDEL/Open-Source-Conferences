Title: Better Data Security with Commodity TPM Chips - Haris Okanovic, National Instruments
Publication date: 2020-09-08
Playlist: Open Source Summit + Embedded Linux Conference NA 2020
Description: 
	Better Data Security with Commodity TPM Chips - Haris Okanovic, National Instruments
Captions: 
	00:00:00,160 --> 00:00:03,919
thing 123 testing testing and thank you

00:00:02,320 --> 00:00:05,759
for joining me today

00:00:03,919 --> 00:00:07,520
my name is harris i'm a software

00:00:05,759 --> 00:00:08,080
developer at national instruments or

00:00:07,520 --> 00:00:10,639
simply

00:00:08,080 --> 00:00:12,240
ni as we're now called i work on

00:00:10,639 --> 00:00:15,040
embedded linux firmware for

00:00:12,240 --> 00:00:16,800
various industrial products at ni and

00:00:15,040 --> 00:00:19,359
today i want to talk about tpm chips

00:00:16,800 --> 00:00:21,199
a fairly common peripheral found on many

00:00:19,359 --> 00:00:23,439
computers these days

00:00:21,199 --> 00:00:24,960
and some of the benefits and problems of

00:00:23,439 --> 00:00:27,279
using it to improve

00:00:24,960 --> 00:00:28,400
security on linux systems which is

00:00:27,279 --> 00:00:29,599
something that we've recently

00:00:28,400 --> 00:00:31,199
experimented with

00:00:29,599 --> 00:00:33,520
for some of our more security-minded

00:00:31,199 --> 00:00:36,000
customers so a disclaimer

00:00:33,520 --> 00:00:36,880
i'm not a security researcher neither i

00:00:36,000 --> 00:00:39,040
nor ni

00:00:36,880 --> 00:00:41,680
are part of the tcg nor are we a tpm

00:00:39,040 --> 00:00:43,360
vendor i'm coming to you today as a user

00:00:41,680 --> 00:00:44,879
of the technology to

00:00:43,360 --> 00:00:47,120
share some of the capabilities and

00:00:44,879 --> 00:00:47,840
problems that we've explored and i hope

00:00:47,120 --> 00:00:51,120
you find this

00:00:47,840 --> 00:00:51,120
useful in in your work

00:00:52,719 --> 00:00:55,760
so tpm stands for trusted platform

00:00:55,039 --> 00:00:57,600
module

00:00:55,760 --> 00:01:00,160
sometimes called the security chip or a

00:00:57,600 --> 00:01:01,199
cryptochip it is a kind of hardware

00:01:00,160 --> 00:01:03,920
security module

00:01:01,199 --> 00:01:05,439
somewhere on your board or inside your

00:01:03,920 --> 00:01:07,200
cpu

00:01:05,439 --> 00:01:08,960
they're sometimes confused with crypto

00:01:07,200 --> 00:01:11,280
accelerators a different kind of

00:01:08,960 --> 00:01:12,000
hardware security module i can tell you

00:01:11,280 --> 00:01:14,000
these chips

00:01:12,000 --> 00:01:17,200
uh generally accelerate nothing they're

00:01:14,000 --> 00:01:19,759
usually fairly slow devices

00:01:17,200 --> 00:01:21,439
they come in a various flavors so the

00:01:19,759 --> 00:01:23,200
the chip variant sometimes called a

00:01:21,439 --> 00:01:25,360
discrete tpm is a

00:01:23,200 --> 00:01:28,560
an independent peripheral connected via

00:01:25,360 --> 00:01:31,119
lpc or sometimes via spy or i squared c

00:01:28,560 --> 00:01:32,640
to your cpu sometimes they're soldered

00:01:31,119 --> 00:01:34,479
onto your board sometimes they're

00:01:32,640 --> 00:01:35,920
little removable modules plugged in

00:01:34,479 --> 00:01:37,920
somewhere

00:01:35,920 --> 00:01:39,119
more common these days though especially

00:01:37,920 --> 00:01:42,000
on consumer hardware

00:01:39,119 --> 00:01:43,040
some kind of firmware tpm like intel's

00:01:42,000 --> 00:01:44,560
ptt which

00:01:43,040 --> 00:01:46,960
runs on top of their management engine

00:01:44,560 --> 00:01:50,479
or amd's tpm application on their

00:01:46,960 --> 00:01:52,399
secure technology system there are also

00:01:50,479 --> 00:01:54,880
a variety of user mode simulators out

00:01:52,399 --> 00:01:58,719
there which can be used in vms or for

00:01:54,880 --> 00:01:58,719
prototype and test applications

00:01:59,360 --> 00:02:03,439
so tpm is primarily a key manager it can

00:02:02,320 --> 00:02:05,840
hide secrets

00:02:03,439 --> 00:02:08,000
sometimes called protected objects and

00:02:05,840 --> 00:02:11,039
use them conditionally based on some

00:02:08,000 --> 00:02:13,599
authorization policy defined at creation

00:02:11,039 --> 00:02:16,000
so these authorizations can be simple

00:02:13,599 --> 00:02:18,160
passwords supplied with with a command

00:02:16,000 --> 00:02:21,520
or or one of many other complicated

00:02:18,160 --> 00:02:23,520
schemes defined by the object's creator

00:02:21,520 --> 00:02:26,080
the other major function is a kind of

00:02:23,520 --> 00:02:28,319
logging capability so tpm can track

00:02:26,080 --> 00:02:30,720
hashes of running binaries and other

00:02:28,319 --> 00:02:33,519
system configuration contributed by the

00:02:30,720 --> 00:02:35,040
software running on the cpu and so this

00:02:33,519 --> 00:02:36,000
state can be used as one of those

00:02:35,040 --> 00:02:38,239
authorizations

00:02:36,000 --> 00:02:39,680
for for a protected object so for

00:02:38,239 --> 00:02:43,280
example you can

00:02:39,680 --> 00:02:44,879
create a key that can only be used or

00:02:43,280 --> 00:02:47,040
retrieved from the tpm

00:02:44,879 --> 00:02:48,720
if the system is in a certain predefined

00:02:47,040 --> 00:02:49,760
state

00:02:48,720 --> 00:02:51,360
and this can be done in addition to

00:02:49,760 --> 00:02:53,200
other authorization constraints like a

00:02:51,360 --> 00:02:54,800
password

00:02:53,200 --> 00:02:56,319
so these two functions are primarily

00:02:54,800 --> 00:02:59,120
what we're going to be exploring today

00:02:56,319 --> 00:03:00,319
um and they enable a kind of secure boot

00:02:59,120 --> 00:03:01,760
mechanism for the os

00:03:00,319 --> 00:03:03,519
and can also extend to user mode

00:03:01,760 --> 00:03:04,000
applications for for key management

00:03:03,519 --> 00:03:07,200
functions

00:03:04,000 --> 00:03:09,760
uh to some degree now

00:03:07,200 --> 00:03:12,159
the uh scribing functionality can can

00:03:09,760 --> 00:03:14,800
also extend to external actors

00:03:12,159 --> 00:03:16,400
so for example a tpm can produce a a

00:03:14,800 --> 00:03:19,360
signed attestation

00:03:16,400 --> 00:03:20,560
object to prove the state of the local

00:03:19,360 --> 00:03:22,239
system to some

00:03:20,560 --> 00:03:24,400
some external actor like like like a

00:03:22,239 --> 00:03:26,319
network system for example

00:03:24,400 --> 00:03:27,920
this has some interesting dynamics so it

00:03:26,319 --> 00:03:29,519
can be used for example as part of an

00:03:27,920 --> 00:03:31,599
intrusion detection system

00:03:29,519 --> 00:03:33,360
or or some kind of state auditing system

00:03:31,599 --> 00:03:35,280
or a credentialing mechanism right

00:03:33,360 --> 00:03:36,720
to bind a user credential to a specific

00:03:35,280 --> 00:03:38,480
machine

00:03:36,720 --> 00:03:40,799
it can also do some bad things too like

00:03:38,480 --> 00:03:43,200
it can be incorporated into drm schemes

00:03:40,799 --> 00:03:45,200
to deny users access to services when

00:03:43,200 --> 00:03:48,400
they try to run modified software

00:03:45,200 --> 00:03:51,760
on their systems security technology

00:03:48,400 --> 00:03:53,120
often cuts both ways it can help users

00:03:51,760 --> 00:03:55,120
or it can harm them

00:03:53,120 --> 00:03:56,560
and and my hope is you'll appreciate

00:03:55,120 --> 00:03:57,200
some of the benefits of the technology

00:03:56,560 --> 00:03:59,599
today

00:03:57,200 --> 00:04:01,760
so we'll be focusing more on the on the

00:03:59,599 --> 00:04:02,480
local use cases uh to protect the local

00:04:01,760 --> 00:04:05,760
data on

00:04:02,480 --> 00:04:05,760
on systems today

00:04:08,000 --> 00:04:11,360
beyond that uh it's just a slow crypto

00:04:10,400 --> 00:04:12,879
engine

00:04:11,360 --> 00:04:14,480
with some persistent storage for

00:04:12,879 --> 00:04:16,799
internal use that's also

00:04:14,480 --> 00:04:18,959
forwarded to the user and a random

00:04:16,799 --> 00:04:21,519
number generator for for generating keys

00:04:18,959 --> 00:04:23,199
independently of the cpu

00:04:21,519 --> 00:04:25,840
now this is also a good point to bring

00:04:23,199 --> 00:04:29,280
up the differences between tpm1 and tpm2

00:04:25,840 --> 00:04:32,800
so tpms have been around for a while

00:04:29,280 --> 00:04:34,880
tpm2 was introduced a a few years ago

00:04:32,800 --> 00:04:36,160
and it's a large rework of the wire

00:04:34,880 --> 00:04:39,360
protocol

00:04:36,160 --> 00:04:41,199
to communicate with the chip so so these

00:04:39,360 --> 00:04:43,040
changes were introduced primarily to

00:04:41,199 --> 00:04:44,560
modernize the crypto offered by the

00:04:43,040 --> 00:04:47,600
chips themselves

00:04:44,560 --> 00:04:50,080
so tpm1 for example required sha-1 hash

00:04:47,600 --> 00:04:53,600
and rsa28 for for authentication

00:04:50,080 --> 00:04:57,360
operations and and h-mac operations

00:04:53,600 --> 00:04:59,280
and so tpm2 increased that to shaw 256

00:04:57,360 --> 00:05:00,800
and later to 384 and added a couple

00:04:59,280 --> 00:05:02,800
elliptic curves

00:05:00,800 --> 00:05:04,000
but more significantly tpm2 also made

00:05:02,800 --> 00:05:06,720
the crypto engine

00:05:04,000 --> 00:05:08,320
much more flexible now so the individual

00:05:06,720 --> 00:05:09,759
vendors of the chip can add other

00:05:08,320 --> 00:05:13,520
algorithms as

00:05:09,759 --> 00:05:16,000
the the the default ones age or become

00:05:13,520 --> 00:05:17,919
otherwise untrusted uh but in the

00:05:16,000 --> 00:05:19,440
process much of the api has also

00:05:17,919 --> 00:05:21,280
changed and this is what's most

00:05:19,440 --> 00:05:23,440
significant to software developers

00:05:21,280 --> 00:05:25,199
besides the crypto offering uh because

00:05:23,440 --> 00:05:25,840
it necessitates a different software

00:05:25,199 --> 00:05:30,479
stack

00:05:25,840 --> 00:05:30,479
to drive one chip type versus the other

00:05:33,440 --> 00:05:36,720
so the tpm software stack usually called

00:05:35,520 --> 00:05:39,360
the tss

00:05:36,720 --> 00:05:41,919
for short specified by the trusted

00:05:39,360 --> 00:05:44,400
computing group or tcg

00:05:41,919 --> 00:05:46,080
which is a coalition of manufacturers

00:05:44,400 --> 00:05:48,479
and software vendors that

00:05:46,080 --> 00:05:50,160
define the behaviors of these chips

00:05:48,479 --> 00:05:52,720
you'll find that they also love their

00:05:50,160 --> 00:05:53,840
acronym jargon so some confusion is

00:05:52,720 --> 00:05:55,600
natural here

00:05:53,840 --> 00:05:57,919
but i'll hopefully try to demystify some

00:05:55,600 --> 00:06:00,400
of that today

00:05:57,919 --> 00:06:03,360
in a nutshell the tss is a collection of

00:06:00,400 --> 00:06:05,360
c apis for interacting with the tpm

00:06:03,360 --> 00:06:06,400
it exists largely because a correct use

00:06:05,360 --> 00:06:09,440
of tpm which

00:06:06,400 --> 00:06:11,600
makes you know some security guarantees

00:06:09,440 --> 00:06:13,520
usually involves complex message

00:06:11,600 --> 00:06:14,720
formatting and validation on the cpu

00:06:13,520 --> 00:06:16,160
side

00:06:14,720 --> 00:06:17,840
so it's more involved than a simple

00:06:16,160 --> 00:06:20,160
command response device

00:06:17,840 --> 00:06:22,560
and tss tries to abstract away some of

00:06:20,160 --> 00:06:25,199
this complexity

00:06:22,560 --> 00:06:26,240
so the api is layered into different os

00:06:25,199 --> 00:06:28,800
abstractions

00:06:26,240 --> 00:06:29,520
so the feature and enhanced system apis

00:06:28,800 --> 00:06:31,600
provide

00:06:29,520 --> 00:06:34,319
nice things like heap allocated objects

00:06:31,600 --> 00:06:36,080
file based handle storage like for pcr

00:06:34,319 --> 00:06:38,000
policies or key handles or

00:06:36,080 --> 00:06:40,240
what have you uh they can buy into a

00:06:38,000 --> 00:06:43,120
crypto library on the cpu side

00:06:40,240 --> 00:06:44,240
for computing hmacs or doing a parameter

00:06:43,120 --> 00:06:45,680
encryption

00:06:44,240 --> 00:06:47,440
they're basically kind of nice easy to

00:06:45,680 --> 00:06:49,360
use application interfaces built on top

00:06:47,440 --> 00:06:51,520
of a lib c

00:06:49,360 --> 00:06:52,720
the system api provides more primitive

00:06:51,520 --> 00:06:55,039
message formatting

00:06:52,720 --> 00:06:56,560
operations so there's no heap no file i

00:06:55,039 --> 00:06:58,160
o or crypto libraries

00:06:56,560 --> 00:07:01,280
you sort of bring all that yourself and

00:06:58,160 --> 00:07:04,160
it's more amenable to embedding

00:07:01,280 --> 00:07:06,000
now in in user mode the the the system

00:07:04,160 --> 00:07:06,720
api and then the ones above it are built

00:07:06,000 --> 00:07:09,440
on top of the

00:07:06,720 --> 00:07:11,360
tpm command transmission interface or

00:07:09,440 --> 00:07:13,360
tcti for short

00:07:11,360 --> 00:07:15,680
which is this communication layer for

00:07:13,360 --> 00:07:17,120
targeting different tpms on your system

00:07:15,680 --> 00:07:19,039
so they can for example talk to a local

00:07:17,120 --> 00:07:21,120
broker service

00:07:19,039 --> 00:07:24,400
or via network socket to a process on

00:07:21,120 --> 00:07:28,000
your system or even a remote system

00:07:24,400 --> 00:07:29,280
to to talk to like a remote tpm chip

00:07:28,000 --> 00:07:30,880
locally though there's usually going to

00:07:29,280 --> 00:07:32,000
be a resource manager which sort of

00:07:30,880 --> 00:07:33,520
marshals the

00:07:32,000 --> 00:07:36,400
commands and responses from different

00:07:33,520 --> 00:07:39,440
tasks to the actual hardware

00:07:36,400 --> 00:07:43,280
so in linux 412 and higher this is the

00:07:39,440 --> 00:07:44,160
tpm rm0 device that the the tcti will

00:07:43,280 --> 00:07:47,360
talk to by

00:07:44,160 --> 00:07:49,440
default um otherwise on

00:07:47,360 --> 00:07:50,479
older linuxes you can talk directly to

00:07:49,440 --> 00:07:52,080
tpm0

00:07:50,479 --> 00:07:53,520
and if you're using an you know older

00:07:52,080 --> 00:07:54,639
version of the chip you can also set up

00:07:53,520 --> 00:07:57,360
a broker service

00:07:54,639 --> 00:07:59,840
a daemon and talk to it over a domain

00:07:57,360 --> 00:07:59,840
socket

00:08:06,879 --> 00:08:10,319
there are a variety of tss

00:08:08,479 --> 00:08:13,199
implementations to choose from

00:08:10,319 --> 00:08:14,639
from various software vendors like ibm

00:08:13,199 --> 00:08:17,520
and microsoft intel

00:08:14,639 --> 00:08:19,919
google and and others i'll be using the

00:08:17,520 --> 00:08:22,080
first one today the tpm2 software

00:08:19,919 --> 00:08:24,080
in my examples mostly because it

00:08:22,080 --> 00:08:27,360
provides a relatively nice

00:08:24,080 --> 00:08:29,039
cli interface from bash if you have a

00:08:27,360 --> 00:08:31,360
tpm1 in your box which are

00:08:29,039 --> 00:08:33,919
still around in many systems you'll need

00:08:31,360 --> 00:08:35,120
the old trousers tss instead

00:08:33,919 --> 00:08:37,599
so the tools in this case will be

00:08:35,120 --> 00:08:39,360
different but the concepts you see here

00:08:37,599 --> 00:08:41,680
are generally the same so you can

00:08:39,360 --> 00:08:45,440
largely remap the workflows

00:08:41,680 --> 00:08:45,440
i'll be sharing today in the other tool

00:08:46,000 --> 00:08:50,399
another good application to have is a

00:08:47,760 --> 00:08:51,920
simulator like swtpm

00:08:50,399 --> 00:08:55,200
so this one in particular is compatible

00:08:51,920 --> 00:08:58,080
with qemu it's great for for prototyping

00:08:55,200 --> 00:08:58,720
on a vm you can also run it stand alone

00:08:58,080 --> 00:09:02,800
and

00:08:58,720 --> 00:09:04,160
talk to it over a socket so

00:09:02,800 --> 00:09:07,200
now that we've kind of looked at a high

00:09:04,160 --> 00:09:08,800
level view of the the hardware and the

00:09:07,200 --> 00:09:10,959
driver stacks i want to use the rest of

00:09:08,800 --> 00:09:12,399
the presentation to explore a few

00:09:10,959 --> 00:09:13,839
interesting use cases to kind of

00:09:12,399 --> 00:09:17,519
illustrate what can be done with

00:09:13,839 --> 00:09:20,160
with all of this so one popular

00:09:17,519 --> 00:09:21,920
application of tpms is measured boot

00:09:20,160 --> 00:09:23,839
this can be used in conjunction with

00:09:21,920 --> 00:09:25,519
block or file system encryption to

00:09:23,839 --> 00:09:27,279
realize a kind of secure boot scheme

00:09:25,519 --> 00:09:29,120
which can obfuscate data when

00:09:27,279 --> 00:09:31,360
something in the system's boot path is

00:09:29,120 --> 00:09:33,279
altered so this is sometimes conflated

00:09:31,360 --> 00:09:35,440
with uefi secure boot

00:09:33,279 --> 00:09:37,839
which can be incorporated into this

00:09:35,440 --> 00:09:39,920
scheme but is somewhat orthogonal

00:09:37,839 --> 00:09:41,839
uefi secure boot is a bootloader signing

00:09:39,920 --> 00:09:42,320
mechanism that checks the signature of

00:09:41,839 --> 00:09:45,600
the

00:09:42,320 --> 00:09:47,120
bootloader file that efi program

00:09:45,600 --> 00:09:49,200
that's that's run against some

00:09:47,120 --> 00:09:51,600
certificate database in the firmware

00:09:49,200 --> 00:09:53,760
before letting it continue boot

00:09:51,600 --> 00:09:55,839
measurements on the other hand are

00:09:53,760 --> 00:09:58,160
a more passive mechanism they leverage

00:09:55,839 --> 00:10:00,720
the scribing functionality of the tpm

00:09:58,160 --> 00:10:02,880
uh to track changes as the system boots

00:10:00,720 --> 00:10:04,399
up and then defer enforcement to the

00:10:02,880 --> 00:10:06,959
operating system or the user

00:10:04,399 --> 00:10:08,720
which makes it a little more flexible so

00:10:06,959 --> 00:10:10,720
for windows users this is what

00:10:08,720 --> 00:10:12,480
uh if you're familiar with bitlocker's

00:10:10,720 --> 00:10:14,240
password disk encryption this is what

00:10:12,480 --> 00:10:15,839
it's it's based on and you can do the

00:10:14,240 --> 00:10:19,839
same thing in linux as well

00:10:15,839 --> 00:10:19,839
which is what what we'll explore here

00:10:20,640 --> 00:10:24,480
so that scribing functionality is

00:10:22,160 --> 00:10:26,640
realized by platform configuration

00:10:24,480 --> 00:10:28,480
registers or pcrs for short

00:10:26,640 --> 00:10:29,760
which are a collection of hash banks in

00:10:28,480 --> 00:10:31,519
the tpm

00:10:29,760 --> 00:10:32,959
so each bank is a checksum of some

00:10:31,519 --> 00:10:35,839
subset of software

00:10:32,959 --> 00:10:37,440
and configuration running on your box so

00:10:35,839 --> 00:10:39,360
on the right is kind of a suggested

00:10:37,440 --> 00:10:40,800
breakdown from the tcg spec

00:10:39,360 --> 00:10:43,680
and they typically alternate between

00:10:40,800 --> 00:10:44,079
code and configuration so pcr 0 contains

00:10:43,680 --> 00:10:46,800
the

00:10:44,079 --> 00:10:48,480
efi firmware binaries pcr one is the

00:10:46,800 --> 00:10:49,680
firmware configuration right the

00:10:48,480 --> 00:10:50,880
hardware configuration that you're

00:10:49,680 --> 00:10:53,839
booting into

00:10:50,880 --> 00:10:55,920
uh pcr2 is the option rom code and the

00:10:53,839 --> 00:10:56,720
optionarm config and then the efi

00:10:55,920 --> 00:10:58,880
bootloader

00:10:56,720 --> 00:11:01,760
binary and then the partition table that

00:10:58,880 --> 00:11:04,480
it came from and so on so forth

00:11:01,760 --> 00:11:06,079
past pcr seven is operating system

00:11:04,480 --> 00:11:07,360
specific so it's based on what's

00:11:06,079 --> 00:11:10,480
installed on your system

00:11:07,360 --> 00:11:12,560
so in this example uh we're using grub

00:11:10,480 --> 00:11:14,720
a modified version of grub that measures

00:11:12,560 --> 00:11:17,360
the running commands into pcr eight

00:11:14,720 --> 00:11:18,079
and the hash hashes all the files that

00:11:17,360 --> 00:11:21,279
it reads

00:11:18,079 --> 00:11:23,760
into pcr9 and the pcr 11 is is used by

00:11:21,279 --> 00:11:25,920
our init system and i don't recall why

00:11:23,760 --> 00:11:29,839
we skipped pcr 10

00:11:25,920 --> 00:11:29,839
but we did

00:11:29,920 --> 00:11:32,959
so all these measurements are made by

00:11:31,839 --> 00:11:34,959
the cpu

00:11:32,959 --> 00:11:37,040
by whatever software is running on it

00:11:34,959 --> 00:11:37,760
and the idea is that each program can

00:11:37,040 --> 00:11:40,160
measure the

00:11:37,760 --> 00:11:41,760
the next thing to run before it yields

00:11:40,160 --> 00:11:45,760
control over

00:11:41,760 --> 00:11:48,320
and then if everything is measured a a

00:11:45,760 --> 00:11:49,760
change can then be observed later on in

00:11:48,320 --> 00:11:52,880
the

00:11:49,760 --> 00:11:53,760
in the boot flow to enforce something so

00:11:52,880 --> 00:11:56,160
this model

00:11:53,760 --> 00:11:58,240
relies heavily on the irrevocability of

00:11:56,160 --> 00:12:01,920
hashes of these pcr hashes

00:11:58,240 --> 00:12:04,399
so the first 16 banks can uh

00:12:01,920 --> 00:12:05,519
can only be extended they are rolling

00:12:04,399 --> 00:12:08,639
hashes right so the

00:12:05,519 --> 00:12:10,320
the cpu can only uh add a

00:12:08,639 --> 00:12:12,000
concatenated new data to the existing

00:12:10,320 --> 00:12:14,160
hash and update the pcr

00:12:12,000 --> 00:12:15,279
as a kind of an atomic operation and

00:12:14,160 --> 00:12:17,920
they can't reset it

00:12:15,279 --> 00:12:18,800
it only resets to zero on startup and so

00:12:17,920 --> 00:12:21,200
these these first

00:12:18,800 --> 00:12:22,959
16 pcrs measure what's sometimes called

00:12:21,200 --> 00:12:25,120
the static chain of trust

00:12:22,959 --> 00:12:27,200
the the chain of software involved in uh

00:12:25,120 --> 00:12:30,000
system bring up

00:12:27,200 --> 00:12:30,320
the registers above that 17 to 22 are

00:12:30,000 --> 00:12:32,480
are

00:12:30,320 --> 00:12:33,839
wholly managed by the operating system

00:12:32,480 --> 00:12:37,120
or the hypervisor

00:12:33,839 --> 00:12:38,399
on on on the cpu and so these measures

00:12:37,120 --> 00:12:39,920
what's sometimes called the dynamic

00:12:38,399 --> 00:12:42,160
chain of trust which can go into

00:12:39,920 --> 00:12:43,839
uh into different processes or different

00:12:42,160 --> 00:12:45,440
vms and so these these banks are

00:12:43,839 --> 00:12:46,240
resettable on a context switch for

00:12:45,440 --> 00:12:48,480
example

00:12:46,240 --> 00:12:50,240
um and can extend a single tps a single

00:12:48,480 --> 00:12:51,760
tpm's you know functions

00:12:50,240 --> 00:12:55,279
deeper into the software stack like

00:12:51,760 --> 00:12:55,279
deeper into user mode applications

00:12:58,160 --> 00:13:02,240
so most uefi firmwares will

00:13:00,720 --> 00:13:03,440
automatically make these static

00:13:02,240 --> 00:13:06,800
measurements throughout

00:13:03,440 --> 00:13:07,200
the normal course of booting so at early

00:13:06,800 --> 00:13:09,440
boot

00:13:07,200 --> 00:13:10,480
the the pre-efi phase will initialize

00:13:09,440 --> 00:13:13,600
the tpms

00:13:10,480 --> 00:13:15,200
uh uh with with zero pcr values

00:13:13,600 --> 00:13:17,600
followed by measurements of all the

00:13:15,200 --> 00:13:19,920
loaded software like drivers or

00:13:17,600 --> 00:13:20,800
option roms and the installed bootloader

00:13:19,920 --> 00:13:22,240
and then

00:13:20,800 --> 00:13:24,480
from there the the bootloader can

00:13:22,240 --> 00:13:26,320
measure the kernel the init system

00:13:24,480 --> 00:13:28,880
other configuration files involved in

00:13:26,320 --> 00:13:29,600
boot so on so forth you can continue

00:13:28,880 --> 00:13:32,079
this

00:13:29,600 --> 00:13:34,000
indefinitely up until some point where

00:13:32,079 --> 00:13:36,800
there's an enforcement action

00:13:34,000 --> 00:13:38,480
where uh the the software which

00:13:36,800 --> 00:13:39,279
hopefully has been measured at this

00:13:38,480 --> 00:13:41,920
point

00:13:39,279 --> 00:13:43,360
um uh requests some secret to be

00:13:41,920 --> 00:13:45,600
released from the tpm

00:13:43,360 --> 00:13:46,880
to continue booting so for example this

00:13:45,600 --> 00:13:48,880
can be the release of a key

00:13:46,880 --> 00:13:51,040
for an encrypted file system and at this

00:13:48,880 --> 00:13:54,800
point you you can do you know just

00:13:51,040 --> 00:13:57,680
cpu side file system encryption

00:13:54,800 --> 00:13:59,360
into that partition so this depicts kind

00:13:57,680 --> 00:14:01,600
of a software only approach

00:13:59,360 --> 00:14:03,519
to to hold disk encryption another

00:14:01,600 --> 00:14:05,760
popular approach is the use of

00:14:03,519 --> 00:14:08,320
self-encrypting drives which are

00:14:05,760 --> 00:14:09,440
governed largely by the tcg's opal

00:14:08,320 --> 00:14:11,920
standard

00:14:09,440 --> 00:14:13,839
so this is where the key is released to

00:14:11,920 --> 00:14:16,000
drive's firmware

00:14:13,839 --> 00:14:17,440
and so in this kind of system you can

00:14:16,000 --> 00:14:18,720
you can transparently encrypt and

00:14:17,440 --> 00:14:21,199
decrypt the entire disk

00:14:18,720 --> 00:14:21,839
independent of the os uh so long as your

00:14:21,199 --> 00:14:24,240
firmware

00:14:21,839 --> 00:14:26,480
you know knows how to drive it correctly

00:14:24,240 --> 00:14:29,519
but it largely works the same way

00:14:26,480 --> 00:14:30,959
i don't personally use them um i i can

00:14:29,519 --> 00:14:32,480
see where it's appealing on systems with

00:14:30,959 --> 00:14:34,639
with slower cpus

00:14:32,480 --> 00:14:35,920
but you know i found that the software

00:14:34,639 --> 00:14:39,600
encryption is usually

00:14:35,920 --> 00:14:42,480
pretty good and and pretty fast

00:14:39,600 --> 00:14:44,000
now the security guarantees of pcrs

00:14:42,480 --> 00:14:46,560
largely hinge on where they're

00:14:44,000 --> 00:14:48,480
initialized because from a zero value

00:14:46,560 --> 00:14:49,040
you can mimic any pcr state and

00:14:48,480 --> 00:14:51,760
therefore

00:14:49,040 --> 00:14:54,160
authorize any action that is just solely

00:14:51,760 --> 00:14:57,199
based on pcr values right

00:14:54,160 --> 00:14:57,519
so this makes the security this makes

00:14:57,199 --> 00:14:59,680
the

00:14:57,519 --> 00:15:01,839
very early phases of uefi booth the

00:14:59,680 --> 00:15:02,639
so-called security and pre-efi phase is

00:15:01,839 --> 00:15:04,880
very critical

00:15:02,639 --> 00:15:06,880
um ideally you know you want this code

00:15:04,880 --> 00:15:08,320
to run from rom or otherwise be very

00:15:06,880 --> 00:15:10,720
difficult to change without you know

00:15:08,320 --> 00:15:13,040
intrusive physical access in the system

00:15:10,720 --> 00:15:15,279
uh how how secure this is is really up

00:15:13,040 --> 00:15:17,120
to your hardware vendor

00:15:15,279 --> 00:15:18,480
this also means that plugging a tpm into

00:15:17,120 --> 00:15:19,680
a system whose firmware doesn't

00:15:18,480 --> 00:15:21,760
understand

00:15:19,680 --> 00:15:24,240
doesn't understand it can't really do

00:15:21,760 --> 00:15:26,880
this kind of secure boot

00:15:24,240 --> 00:15:29,199
so for example putting it using the tpm

00:15:26,880 --> 00:15:30,639
add-on board for raspberry pi's

00:15:29,199 --> 00:15:32,240
is not really going to get you that much

00:15:30,639 --> 00:15:35,600
uh boot security

00:15:32,240 --> 00:15:36,880
uh like this anyway so pcrs are only as

00:15:35,600 --> 00:15:39,279
trustworthy as the you know code

00:15:36,880 --> 00:15:40,560
initializing the tpm itself

00:15:39,279 --> 00:15:42,000
and there have been you know security

00:15:40,560 --> 00:15:43,440
challenges in this area in the past and

00:15:42,000 --> 00:15:45,040
there are still some today

00:15:43,440 --> 00:15:46,160
and and we will definitely look at this

00:15:45,040 --> 00:15:48,800
a little bit later on in the

00:15:46,160 --> 00:15:48,800
presentation

00:15:49,759 --> 00:15:54,079
but for now let's stay in our idealistic

00:15:52,240 --> 00:15:55,040
world for a moment and just look at an

00:15:54,079 --> 00:15:57,040
example of this

00:15:55,040 --> 00:15:58,240
simple key management scheme with tpm

00:15:57,040 --> 00:16:00,320
tools

00:15:58,240 --> 00:16:02,240
so the first block we'll set up our tpm

00:16:00,320 --> 00:16:04,560
by creating a primary key

00:16:02,240 --> 00:16:06,560
so this is a tpm resident object used to

00:16:04,560 --> 00:16:09,600
protect other secrets later on like

00:16:06,560 --> 00:16:11,839
our diskey so that second command

00:16:09,600 --> 00:16:12,959
evict control will persist this key into

00:16:11,839 --> 00:16:16,240
tpm's

00:16:12,959 --> 00:16:18,399
nvram so persisting is totally optional

00:16:16,240 --> 00:16:21,519
this is merely done for performance

00:16:18,399 --> 00:16:23,040
tpms derive primaries deterministically

00:16:21,519 --> 00:16:24,079
from a fixed seed random number

00:16:23,040 --> 00:16:25,759
generator

00:16:24,079 --> 00:16:27,680
and a combination of that and and the

00:16:25,759 --> 00:16:29,839
parameters passed to the create function

00:16:27,680 --> 00:16:31,279
so multiple runs of the same create will

00:16:29,839 --> 00:16:33,680
yield the same key so you can basically

00:16:31,279 --> 00:16:36,079
remake it after boot

00:16:33,680 --> 00:16:37,360
and this also allows you to make more

00:16:36,079 --> 00:16:40,399
primaries than you can

00:16:37,360 --> 00:16:41,920
store necessarily in in nvram at

00:16:40,399 --> 00:16:43,519
any one time so you can sort of make a

00:16:41,920 --> 00:16:48,320
key and use it and and

00:16:43,519 --> 00:16:49,839
and flush it out so the the rng seed

00:16:48,320 --> 00:16:51,680
is referenced by that hierarchy

00:16:49,839 --> 00:16:52,240
parameter in the in the create primary

00:16:51,680 --> 00:16:53,680
command

00:16:52,240 --> 00:16:55,519
uh so we're creating this one under the

00:16:53,680 --> 00:16:58,480
owner hierarchy which is what the

00:16:55,519 --> 00:16:59,120
little equals o stands for um and this

00:16:58,480 --> 00:17:01,519
is for the

00:16:59,120 --> 00:17:03,040
for the operator of the system um so

00:17:01,519 --> 00:17:04,559
that seed will remain constant

00:17:03,040 --> 00:17:06,000
so long as the owner doesn't reset the

00:17:04,559 --> 00:17:06,480
hierarchy at which point it randomly

00:17:06,000 --> 00:17:07,919
changes

00:17:06,480 --> 00:17:09,439
invalidating all of the objects

00:17:07,919 --> 00:17:11,039
underneath it this is sometimes called

00:17:09,439 --> 00:17:14,000
taking ownership of the tpm

00:17:11,039 --> 00:17:15,679
or taking ownership of the hierarchy and

00:17:14,000 --> 00:17:17,039
there are several hierarchies in the tpm

00:17:15,679 --> 00:17:18,720
that kind of operate independently of

00:17:17,039 --> 00:17:21,039
each other for different

00:17:18,720 --> 00:17:23,120
slices of the system and you can read

00:17:21,039 --> 00:17:24,480
about these in the tcg spec

00:17:23,120 --> 00:17:26,400
in these examples we'll just use the

00:17:24,480 --> 00:17:28,720
owner hierarchy

00:17:26,400 --> 00:17:29,919
so the next block will generate a secret

00:17:28,720 --> 00:17:31,600
hopefully you use something a little

00:17:29,919 --> 00:17:33,679
better than that but

00:17:31,600 --> 00:17:35,360
we'll go with it for now and then we'll

00:17:33,679 --> 00:17:36,480
seal it under our primary key and

00:17:35,360 --> 00:17:41,520
authorize it by the

00:17:36,480 --> 00:17:44,080
uefi firmware binaries so pcr02 and iv

00:17:41,520 --> 00:17:44,720
so ceiling here just means encrypting

00:17:44,080 --> 00:17:47,280
the

00:17:44,720 --> 00:17:48,720
the key the private data and a hash of

00:17:47,280 --> 00:17:51,039
the pcr values

00:17:48,720 --> 00:17:52,720
uh by the primary that we just made and

00:17:51,039 --> 00:17:54,320
and the result of this is a set of data

00:17:52,720 --> 00:17:56,160
blobs that we need to stash somewhere

00:17:54,320 --> 00:17:59,200
for use on on xboot

00:17:56,160 --> 00:18:00,080
so uh s pub contains the metadata about

00:17:59,200 --> 00:18:04,640
the sealed object

00:18:00,080 --> 00:18:04,640
and s priv is the actual encrypted key

00:18:04,799 --> 00:18:08,240
and so after boot we can reverse this

00:18:07,039 --> 00:18:10,720
process by loading

00:18:08,240 --> 00:18:12,880
that object back into the tpm and then

00:18:10,720 --> 00:18:14,559
running the unseal function which will

00:18:12,880 --> 00:18:16,880
check the policy and if everything

00:18:14,559 --> 00:18:20,000
everything matches the tpm

00:18:16,880 --> 00:18:23,120
will release the key back to you

00:18:20,000 --> 00:18:24,240
now i'm showing you the tpm commands as

00:18:23,120 --> 00:18:25,840
an example to illustrate

00:18:24,240 --> 00:18:27,760
to illustrate some of the chips

00:18:25,840 --> 00:18:28,000
operations but there are better ways to

00:18:27,760 --> 00:18:32,640
do

00:18:28,000 --> 00:18:36,559
this now so linux linux's key manager

00:18:32,640 --> 00:18:39,120
has these trusted key types which can

00:18:36,559 --> 00:18:40,000
basically do exactly this kind of object

00:18:39,120 --> 00:18:42,080
sealing

00:18:40,000 --> 00:18:44,240
on your behalf in the kernel and that

00:18:42,080 --> 00:18:45,039
code will probably age better than

00:18:44,240 --> 00:18:47,679
anything you

00:18:45,039 --> 00:18:47,679
you homebrew

00:18:52,160 --> 00:18:55,440
now software updates are generally

00:18:53,520 --> 00:18:57,440
considered good good practice too

00:18:55,440 --> 00:18:58,640
for security and reasons and other

00:18:57,440 --> 00:18:59,919
reasons

00:18:58,640 --> 00:19:02,400
and you'll find this scheme works really

00:18:59,919 --> 00:19:04,799
well until something changes

00:19:02,400 --> 00:19:07,039
supporting updates usually necessitates

00:19:04,799 --> 00:19:08,880
some kind of resealing operation to to

00:19:07,039 --> 00:19:10,400
accommodate changes

00:19:08,880 --> 00:19:12,000
there are various strategies to to go

00:19:10,400 --> 00:19:14,240
about this

00:19:12,000 --> 00:19:16,320
so one solution is to do just simple

00:19:14,240 --> 00:19:19,679
offline backups of the rocky and then

00:19:16,320 --> 00:19:22,320
manually reseal when when changes

00:19:19,679 --> 00:19:23,600
are or when changes happen on the system

00:19:22,320 --> 00:19:25,280
this works really well on personal

00:19:23,600 --> 00:19:26,880
systems when there's a user involved

00:19:25,280 --> 00:19:28,559
like a laptop

00:19:26,880 --> 00:19:30,799
this is also just generally a good idea

00:19:28,559 --> 00:19:32,960
because if if if the software changes in

00:19:30,799 --> 00:19:34,320
a way that you can't restore it back

00:19:32,960 --> 00:19:36,160
uh then you really have no way of

00:19:34,320 --> 00:19:38,880
extracting the key from the tpm so this

00:19:36,160 --> 00:19:40,160
is just generally good practice

00:19:38,880 --> 00:19:42,320
for headless systems though you have to

00:19:40,160 --> 00:19:43,760
get a little crafty uh and so we've

00:19:42,320 --> 00:19:46,960
experimented with a few schemes

00:19:43,760 --> 00:19:48,880
uh at ni so so one is

00:19:46,960 --> 00:19:50,240
this kind of boot time resealing where

00:19:48,880 --> 00:19:52,720
the plane key is

00:19:50,240 --> 00:19:55,039
temporarily unsealed into tpm's nvram

00:19:52,720 --> 00:19:57,200
after a successful update operation

00:19:55,039 --> 00:19:58,880
and then the init system reseals it next

00:19:57,200 --> 00:20:01,280
boot to new pcr values

00:19:58,880 --> 00:20:03,280
um and and this can be integrated nicely

00:20:01,280 --> 00:20:03,679
into a package manager for various kinds

00:20:03,280 --> 00:20:06,720
of

00:20:03,679 --> 00:20:07,600
you know kernel or firmware updates on

00:20:06,720 --> 00:20:09,200
the system

00:20:07,600 --> 00:20:10,880
uh but the downside is it obviously

00:20:09,200 --> 00:20:12,240
creates a momentary lapse in the key

00:20:10,880 --> 00:20:15,039
confidentiality across

00:20:12,240 --> 00:20:15,919
one boot the good thing is the user can

00:20:15,039 --> 00:20:18,480
know about it

00:20:15,919 --> 00:20:20,480
uh and can you probably do that safely

00:20:18,480 --> 00:20:21,760
hopefully can do that safely

00:20:20,480 --> 00:20:23,120
and it's fairly easy to implement and

00:20:21,760 --> 00:20:24,159
generically applies across many

00:20:23,120 --> 00:20:25,840
different systems

00:20:24,159 --> 00:20:28,320
but a far better way of doing it is to

00:20:25,840 --> 00:20:29,600
pre-compute pcrs and reseal to future

00:20:28,320 --> 00:20:32,400
values uh

00:20:29,600 --> 00:20:32,880
on an update so the the create policy

00:20:32,400 --> 00:20:35,120
tool

00:20:32,880 --> 00:20:36,960
uh can actually accept arbitrary pcr

00:20:35,120 --> 00:20:38,480
values

00:20:36,960 --> 00:20:39,919
and so you can sort of seal to you know

00:20:38,480 --> 00:20:41,520
seal to the next state before you

00:20:39,919 --> 00:20:42,960
actually enter it

00:20:41,520 --> 00:20:44,559
this can be tricky for for different

00:20:42,960 --> 00:20:46,000
reasons particularly if you have many

00:20:44,559 --> 00:20:47,840
different hardware models to deal with

00:20:46,000 --> 00:20:49,200
with you know model specific firmware or

00:20:47,840 --> 00:20:50,480
if the user can customize different

00:20:49,200 --> 00:20:52,159
software on the system

00:20:50,480 --> 00:20:54,080
um it can kind of lead to a

00:20:52,159 --> 00:20:55,360
combinatorial explosion

00:20:54,080 --> 00:20:57,280
not to mention if you compute the wrong

00:20:55,360 --> 00:20:58,320
values and you have no way of restoring

00:20:57,280 --> 00:21:03,840
the old ones

00:20:58,320 --> 00:21:03,840
uh obviously leads to some some problems

00:21:05,520 --> 00:21:09,679
now user applications can also use the

00:21:08,480 --> 00:21:13,600
tpm to manage

00:21:09,679 --> 00:21:15,280
uh their their keys beyond initial boot

00:21:13,600 --> 00:21:16,640
so i'm going to explore some of that in

00:21:15,280 --> 00:21:19,760
this section

00:21:16,640 --> 00:21:20,159
so user applications are typically built

00:21:19,760 --> 00:21:22,640
on

00:21:20,159 --> 00:21:24,159
software crypto systems like openssl

00:21:22,640 --> 00:21:24,960
which usually don't know anything about

00:21:24,159 --> 00:21:26,320
dpms

00:21:24,960 --> 00:21:28,240
but there are some clever ways around

00:21:26,320 --> 00:21:31,280
this

00:21:28,240 --> 00:21:32,799
so this is where pkcs 11's uh crypto

00:21:31,280 --> 00:21:34,880
token interface or uh

00:21:32,799 --> 00:21:36,080
kryptoki if i'm pronouncing that right

00:21:34,880 --> 00:21:37,760
can can help

00:21:36,080 --> 00:21:39,919
uh so this is a relatively standard

00:21:37,760 --> 00:21:41,760
interface uh to removable hardware

00:21:39,919 --> 00:21:43,919
security modules like smart cards

00:21:41,760 --> 00:21:46,960
where it originated or the more modern

00:21:43,919 --> 00:21:49,520
flavors like like the usb ub key

00:21:46,960 --> 00:21:51,039
so tpm are not generally removable but

00:21:49,520 --> 00:21:51,679
they're largely similar in terms of

00:21:51,039 --> 00:21:53,120
functions

00:21:51,679 --> 00:21:55,200
they're also a kind of crypto

00:21:53,120 --> 00:21:56,559
co-processor plugged into the computer

00:21:55,200 --> 00:21:58,640
right

00:21:56,559 --> 00:22:00,720
and the really nice thing about pkcs11

00:21:58,640 --> 00:22:01,360
is its api is more widely adopted in the

00:22:00,720 --> 00:22:03,840
tss

00:22:01,360 --> 00:22:05,440
which can bridge you know tpm functions

00:22:03,840 --> 00:22:06,720
into other crypto libraries which can

00:22:05,440 --> 00:22:08,240
then in turn be bridged into

00:22:06,720 --> 00:22:11,840
applications

00:22:08,240 --> 00:22:14,240
and so the the tpm2 pkcs11 project

00:22:11,840 --> 00:22:15,520
implements this kind of kryptoki api

00:22:14,240 --> 00:22:18,640
using the tpm

00:22:15,520 --> 00:22:18,640
as the backing token

00:22:19,919 --> 00:22:23,600
so continuing our example from before

00:22:22,159 --> 00:22:26,159
let's let's see how to set up this this

00:22:23,600 --> 00:22:30,000
library for our tpm chip

00:22:26,159 --> 00:22:32,000
so the the the uh pkcs11 api

00:22:30,000 --> 00:22:34,320
is rooted in the smart card world which

00:22:32,000 --> 00:22:34,799
exposes this notion of tokens and slots

00:22:34,320 --> 00:22:37,120
to the

00:22:34,799 --> 00:22:38,240
to the caller so token is a crypto

00:22:37,120 --> 00:22:40,159
device

00:22:38,240 --> 00:22:42,080
that is plugged into a slot so like a

00:22:40,159 --> 00:22:42,480
smart card reader plugged in or a smart

00:22:42,080 --> 00:22:44,880
card

00:22:42,480 --> 00:22:46,559
plugged into a smart card reader uh and

00:22:44,880 --> 00:22:48,960
so you know these apis are kind of

00:22:46,559 --> 00:22:51,200
slightly funded to accommodate tpms

00:22:48,960 --> 00:22:52,400
so uh so this example is basically

00:22:51,200 --> 00:22:55,280
constructing that

00:22:52,400 --> 00:22:58,400
that adaptation layer so the first block

00:22:55,280 --> 00:22:59,919
uses ptool to create a virtual slot so

00:22:58,400 --> 00:23:03,039
this is simply a mapping of

00:22:59,919 --> 00:23:03,679
slot id 1 to a persistent tpm primary

00:23:03,039 --> 00:23:06,240
key

00:23:03,679 --> 00:23:09,120
when we get that that persistent handle

00:23:06,240 --> 00:23:10,400
from the previous example right

00:23:09,120 --> 00:23:13,280
the next thing we do is we create a

00:23:10,400 --> 00:23:14,000
token which uh which in our tpm world is

00:23:13,280 --> 00:23:15,919
just a

00:23:14,000 --> 00:23:17,120
sealed random number and so the user

00:23:15,919 --> 00:23:19,840
will it will

00:23:17,120 --> 00:23:22,240
which will be used to authorize the the

00:23:19,840 --> 00:23:24,000
keys that we're about to create and so

00:23:22,240 --> 00:23:25,760
this token is really a kind of key ring

00:23:24,000 --> 00:23:26,880
right the user has to unlock the token

00:23:25,760 --> 00:23:29,520
first and then

00:23:26,880 --> 00:23:33,039
use that uh use its value to authorize

00:23:29,520 --> 00:23:33,039
the the use of actual keys

00:23:33,520 --> 00:23:37,600
and so this this sort of simulates you

00:23:35,840 --> 00:23:41,039
know plugging a a

00:23:37,600 --> 00:23:42,400
a a a a a a a slot into your computer

00:23:41,039 --> 00:23:43,840
and then plugging in a token into the

00:23:42,400 --> 00:23:45,760
slot if you will

00:23:43,840 --> 00:23:48,000
and then finally the the last block we

00:23:45,760 --> 00:23:50,799
create a key pair from our token

00:23:48,000 --> 00:23:52,799
on or on our on our virtual token so

00:23:50,799 --> 00:23:53,039
this would be a tpm resident key capable

00:23:52,799 --> 00:23:54,640
of

00:23:53,039 --> 00:23:56,799
encrypt decrypt functions through the

00:23:54,640 --> 00:23:59,120
chip and so once we do all this we can

00:23:56,799 --> 00:24:02,120
now treat the tpm like a smart card

00:23:59,120 --> 00:24:04,159
and from this point on we have many

00:24:02,120 --> 00:24:07,039
options

00:24:04,159 --> 00:24:07,679
but for this example let's use open ssl

00:24:07,039 --> 00:24:10,400
so

00:24:07,679 --> 00:24:11,039
the open smart card project provides a

00:24:10,400 --> 00:24:14,400
the

00:24:11,039 --> 00:24:14,880
lib p11 library which is an an open ssl

00:24:14,400 --> 00:24:17,600
engine

00:24:14,880 --> 00:24:18,720
for smart cards for pkcs 11 style smart

00:24:17,600 --> 00:24:20,240
cards

00:24:18,720 --> 00:24:21,919
and so we can do something like create

00:24:20,240 --> 00:24:24,000
an x509 cert and

00:24:21,919 --> 00:24:25,200
load it into apache or some other

00:24:24,000 --> 00:24:28,480
application

00:24:25,200 --> 00:24:29,200
so so we'll we'll we'll call openssl

00:24:28,480 --> 00:24:30,960
request

00:24:29,200 --> 00:24:32,960
to generate a self-signed x509

00:24:30,960 --> 00:24:36,159
certificate and and we use that

00:24:32,960 --> 00:24:37,600
uh uh engine parameter to direct it to

00:24:36,159 --> 00:24:40,720
the pkcs11 engine

00:24:37,600 --> 00:24:42,720
um uh and then this this will this will

00:24:40,720 --> 00:24:43,520
use the private key referenced by that

00:24:42,720 --> 00:24:45,279
url

00:24:43,520 --> 00:24:46,159
uh to create a self-signed insert and

00:24:45,279 --> 00:24:49,120
it'll prompt you for a bunch of

00:24:46,159 --> 00:24:49,120
different parameters too

00:24:49,840 --> 00:24:53,600
and then we can configure apache uh to

00:24:52,000 --> 00:24:55,600
use it so we point the public search to

00:24:53,600 --> 00:24:56,240
this new file and then again reuse the

00:24:55,600 --> 00:24:59,600
same

00:24:56,240 --> 00:25:01,840
pkcs 11 key file a

00:24:59,600 --> 00:25:03,120
url to redirect apache to the tpm as

00:25:01,840 --> 00:25:05,039
well

00:25:03,120 --> 00:25:06,960
and for convenience you can also add the

00:25:05,039 --> 00:25:10,559
certificate file into the token and just

00:25:06,960 --> 00:25:10,559
reference both using the same url

00:25:10,880 --> 00:25:15,840
now why do this aside from creating a

00:25:13,919 --> 00:25:18,000
slow web server

00:25:15,840 --> 00:25:19,840
this places a requirement on apache to

00:25:18,000 --> 00:25:21,360
have continuous access to the tpm in

00:25:19,840 --> 00:25:23,679
order to service new clients

00:25:21,360 --> 00:25:25,039
so in order to to establish new tls

00:25:23,679 --> 00:25:26,559
connections

00:25:25,039 --> 00:25:28,159
and the idea is that it makes it more

00:25:26,559 --> 00:25:29,200
difficult to duplicate the identity of

00:25:28,159 --> 00:25:30,960
the server

00:25:29,200 --> 00:25:34,080
without you know continuous access to

00:25:30,960 --> 00:25:37,919
the one tpm holding the private key

00:25:34,080 --> 00:25:39,279
it can also provide a a single point of

00:25:37,919 --> 00:25:41,039
of of disabling

00:25:39,279 --> 00:25:42,640
or revoking in the event that some

00:25:41,039 --> 00:25:43,520
security policy is violated on the

00:25:42,640 --> 00:25:46,559
system so you can

00:25:43,520 --> 00:25:47,600
you know shut down the tpm and then no

00:25:46,559 --> 00:25:49,039
clients can connect to the server

00:25:47,600 --> 00:25:50,320
anymore

00:25:49,039 --> 00:25:51,840
and so depending on the value of the

00:25:50,320 --> 00:25:53,679
data going over the wire this you know

00:25:51,840 --> 00:25:56,480
this performance trade-off might be

00:25:53,679 --> 00:25:56,799
useful to you although i'll admit there

00:25:56,480 --> 00:25:58,480
are

00:25:56,799 --> 00:26:00,400
definitely some diminishing returns

00:25:58,480 --> 00:26:02,159
involved as you add more layers of

00:26:00,400 --> 00:26:04,400
security on top of things like

00:26:02,159 --> 00:26:06,000
file system encryption but nevertheless

00:26:04,400 --> 00:26:09,440
it can make managing network identities

00:26:06,000 --> 00:26:12,159
easier in certain situations

00:26:09,440 --> 00:26:13,120
and the tpm2 pkcs11 documentation also

00:26:12,159 --> 00:26:14,799
has

00:26:13,120 --> 00:26:16,640
numerous read means on integrating this

00:26:14,799 --> 00:26:19,919
into various applications like

00:26:16,640 --> 00:26:22,960
ssh vpn uh radius

00:26:19,919 --> 00:26:25,279
wi-fi authentication uh and others and

00:26:22,960 --> 00:26:26,640
i'll leave those to you to explore

00:26:25,279 --> 00:26:30,080
they all basically follow the same

00:26:26,640 --> 00:26:30,080
pattern just just with different tools

00:26:32,240 --> 00:26:35,760
i mentioned earlier that tpms are no

00:26:34,799 --> 00:26:38,000
magic bullet

00:26:35,760 --> 00:26:39,760
and indeed no security technology really

00:26:38,000 --> 00:26:41,679
is so in this section

00:26:39,760 --> 00:26:43,120
let's explore how to break everything we

00:26:41,679 --> 00:26:44,799
just talked about

00:26:43,120 --> 00:26:46,480
and then talk about some ways to improve

00:26:44,799 --> 00:26:50,000
the aforementioned examples

00:26:46,480 --> 00:26:50,000
in some circumstances anyway

00:26:50,240 --> 00:26:54,880
so the tcg specifies tpm's security

00:26:53,679 --> 00:26:58,400
model in in terms of

00:26:54,880 --> 00:26:59,760
uh api behaviors and some internal state

00:26:58,400 --> 00:27:01,760
uh it doesn't really mandate any

00:26:59,760 --> 00:27:03,679
particular hardware security that's

00:27:01,760 --> 00:27:05,679
largely left up to vendors and

00:27:03,679 --> 00:27:08,880
integrators putting these chips into

00:27:05,679 --> 00:27:10,640
onto boards or into cpus so one common

00:27:08,880 --> 00:27:12,000
attack point particularly with discrete

00:27:10,640 --> 00:27:13,520
tpms is the bus

00:27:12,000 --> 00:27:15,200
so they're usually connected to

00:27:13,520 --> 00:27:16,080
relatively simple buses that can be

00:27:15,200 --> 00:27:18,960
decoded with

00:27:16,080 --> 00:27:20,000
cheap tools and therefore exploited with

00:27:18,960 --> 00:27:22,960
man in the middle style

00:27:20,000 --> 00:27:25,200
attacks and indeed you know passwordless

00:27:22,960 --> 00:27:27,120
disc encryption schemes like the ones i

00:27:25,200 --> 00:27:28,960
i described have been broken and offline

00:27:27,120 --> 00:27:30,480
attacks uh before

00:27:28,960 --> 00:27:32,159
for example there are some pretty simple

00:27:30,480 --> 00:27:35,039
tools to sniff bit lockers

00:27:32,159 --> 00:27:36,480
master key during power up with a 50

00:27:35,039 --> 00:27:38,159
fpga board

00:27:36,480 --> 00:27:39,760
and that project also includes software

00:27:38,159 --> 00:27:42,000
to decrypt the disk plus

00:27:39,760 --> 00:27:44,559
quite a pleasant video demonstrating how

00:27:42,000 --> 00:27:46,480
it all works in about 10 minutes

00:27:44,559 --> 00:27:48,559
and this can be you know easily adapted

00:27:46,480 --> 00:27:49,919
to linux as well

00:27:48,559 --> 00:27:51,600
the only difference really is just

00:27:49,919 --> 00:27:53,679
metadata

00:27:51,600 --> 00:27:56,159
there are tools for older tpm12 as well

00:27:53,679 --> 00:27:58,880
that can do exactly the same thing

00:27:56,159 --> 00:28:00,720
now even with a shortcoming tpm is not

00:27:58,880 --> 00:28:02,480
entirely useless

00:28:00,720 --> 00:28:04,320
it makes transient attacks more

00:28:02,480 --> 00:28:05,919
difficult so for example somebody with

00:28:04,320 --> 00:28:08,720
momentary access

00:28:05,919 --> 00:28:10,399
can't boot malware from usb to steal

00:28:08,720 --> 00:28:11,760
confidential data or manipulate

00:28:10,399 --> 00:28:13,360
something without notice

00:28:11,760 --> 00:28:15,440
but somebody with prolonged access to

00:28:13,360 --> 00:28:18,559
your system will not be stopped by tpm

00:28:15,440 --> 00:28:20,960
perhaps deterred at best

00:28:18,559 --> 00:28:23,760
but we can improve this situation with

00:28:20,960 --> 00:28:23,760
some trade-offs

00:28:24,559 --> 00:28:28,480
so we can mitigate offline attacks by

00:28:26,399 --> 00:28:31,919
adding another authorization requirement

00:28:28,480 --> 00:28:34,559
to releasing or using secrets

00:28:31,919 --> 00:28:36,480
within the tpm so almost every layer of

00:28:34,559 --> 00:28:36,960
the object hierarchy can be configured

00:28:36,480 --> 00:28:39,360
with an

00:28:36,960 --> 00:28:41,520
access password including the hierarchy

00:28:39,360 --> 00:28:42,880
itself that that seed which derives you

00:28:41,520 --> 00:28:44,159
know the primitives and objects

00:28:42,880 --> 00:28:45,679
underneath it

00:28:44,159 --> 00:28:47,279
so to use any element of the hierarchy

00:28:45,679 --> 00:28:50,480
the password needs to be supplied

00:28:47,279 --> 00:28:54,799
with with the creation command

00:28:50,480 --> 00:28:54,799
so we can amend the examples from before

00:28:55,360 --> 00:28:59,360
to include an externally supplied

00:28:56,799 --> 00:29:01,440
password saved by the user

00:28:59,360 --> 00:29:03,440
of course this is not very amenable to

00:29:01,440 --> 00:29:04,960
headless systems but if there is a user

00:29:03,440 --> 00:29:06,480
or other device involved in these

00:29:04,960 --> 00:29:08,640
systems this can

00:29:06,480 --> 00:29:11,440
mitigate many of the shortcomings we

00:29:08,640 --> 00:29:11,440
discussed earlier

00:29:11,600 --> 00:29:15,919
so tpm also provides several ways to

00:29:14,080 --> 00:29:17,279
authenticate to to prove you have the

00:29:15,919 --> 00:29:18,960
password

00:29:17,279 --> 00:29:20,399
so the simplest method is to transmit it

00:29:18,960 --> 00:29:22,320
into clear so this is what's happening

00:29:20,399 --> 00:29:24,720
on the left with with tpm tools

00:29:22,320 --> 00:29:26,080
and this is vulnerable to online

00:29:24,720 --> 00:29:28,080
man-in-the-middle attack so

00:29:26,080 --> 00:29:29,840
somebody monitoring the bus in real time

00:29:28,080 --> 00:29:31,200
as you enter your password

00:29:29,840 --> 00:29:32,799
uh but there are more sophisticated

00:29:31,200 --> 00:29:33,520
options too that can prevent this as

00:29:32,799 --> 00:29:36,399
well

00:29:33,520 --> 00:29:38,640
uh so for example the tpm will accept a

00:29:36,399 --> 00:29:40,320
non-stage mac of the command messages

00:29:38,640 --> 00:29:41,679
that are keyed to the password

00:29:40,320 --> 00:29:43,440
instead of sending the password in the

00:29:41,679 --> 00:29:45,919
clear and then it will also

00:29:43,440 --> 00:29:47,279
reply with an hmac similarly key to the

00:29:45,919 --> 00:29:49,200
same password that was

00:29:47,279 --> 00:29:50,320
agreed upon earlier so you can verify

00:29:49,200 --> 00:29:52,640
the tpm's

00:29:50,320 --> 00:29:54,240
tbm's response so basically user in the

00:29:52,640 --> 00:29:55,760
tpm can use this scheme to mutually

00:29:54,240 --> 00:30:00,480
authenticate each other without

00:29:55,760 --> 00:30:02,480
sending the actual token across the wire

00:30:00,480 --> 00:30:04,080
there's an even more complicated auth

00:30:02,480 --> 00:30:06,080
session approach which can actually

00:30:04,080 --> 00:30:08,080
chain together multiple

00:30:06,080 --> 00:30:09,440
factors of authentication together to

00:30:08,080 --> 00:30:10,320
authorize something that happens you can

00:30:09,440 --> 00:30:12,000
connect you know

00:30:10,320 --> 00:30:13,600
your fingerprint reader and your retinal

00:30:12,000 --> 00:30:15,200
scanner and whatever other

00:30:13,600 --> 00:30:16,799
other security device you want into a

00:30:15,200 --> 00:30:19,440
complex policy uh

00:30:16,799 --> 00:30:20,720
and to to to authorize some action you

00:30:19,440 --> 00:30:22,480
can also do you know

00:30:20,720 --> 00:30:23,760
encryption of in-flight data with uh

00:30:22,480 --> 00:30:26,080
with with certain commands

00:30:23,760 --> 00:30:27,120
to to to to prevent eavesdropping on the

00:30:26,080 --> 00:30:28,720
bus

00:30:27,120 --> 00:30:31,760
um and there are some limitations with

00:30:28,720 --> 00:30:34,320
this uh but this is what uh uh what what

00:30:31,760 --> 00:30:35,840
the pkcs11 library on the right is using

00:30:34,320 --> 00:30:36,480
and i believe the linux key ring uses

00:30:35,840 --> 00:30:40,240
the hvac

00:30:36,480 --> 00:30:43,360
option now one challenge with

00:30:40,240 --> 00:30:45,440
with multi-factor particularly in the

00:30:43,360 --> 00:30:47,200
context of secure boot is is

00:30:45,440 --> 00:30:48,880
where do you enter the password so if

00:30:47,200 --> 00:30:50,960
you can't trust the ui until you talk to

00:30:48,880 --> 00:30:52,640
the tpm and you can't talk to the dpm

00:30:50,960 --> 00:30:56,000
until you enter the password

00:30:52,640 --> 00:30:57,360
uh where do you enter the password so

00:30:56,000 --> 00:30:58,799
you can do this from a second like

00:30:57,360 --> 00:31:00,480
trusted authentication device

00:30:58,799 --> 00:31:01,519
communicating through the system to the

00:31:00,480 --> 00:31:04,000
tpm

00:31:01,519 --> 00:31:05,519
that would work but it's kind of clunky

00:31:04,000 --> 00:31:08,000
there's a human involved though

00:31:05,519 --> 00:31:11,360
there at least at one point during boot

00:31:08,000 --> 00:31:11,360
there is a software solution

00:31:11,840 --> 00:31:17,200
so tpm totp is a clever little tool that

00:31:16,399 --> 00:31:19,679
can generate

00:31:17,200 --> 00:31:21,200
those six-digit one-time password codes

00:31:19,679 --> 00:31:24,240
uh inside the tpm

00:31:21,200 --> 00:31:26,880
uh using a an hmac key authorized by

00:31:24,240 --> 00:31:28,080
a pcr policy so you can use this for

00:31:26,880 --> 00:31:31,039
example to give the

00:31:28,080 --> 00:31:32,720
the human operator an opportunity to

00:31:31,039 --> 00:31:34,000
visually inspect the hardware for

00:31:32,720 --> 00:31:36,080
alterations and then

00:31:34,000 --> 00:31:37,120
using their phone right and inspect the

00:31:36,080 --> 00:31:39,120
software

00:31:37,120 --> 00:31:40,880
so to speak before entering credentials

00:31:39,120 --> 00:31:42,880
to continue

00:31:40,880 --> 00:31:44,480
this also enables other security

00:31:42,880 --> 00:31:45,760
mechanisms that are sort of orthogonal

00:31:44,480 --> 00:31:47,440
to the tpm

00:31:45,760 --> 00:31:49,679
so for example you can use the tpm to

00:31:47,440 --> 00:31:52,000
verify the firmware and the

00:31:49,679 --> 00:31:54,399
in the init system with a one-time

00:31:52,000 --> 00:31:56,080
password and then use a simple password

00:31:54,399 --> 00:31:57,600
for the file system you know completely

00:31:56,080 --> 00:32:00,240
orthogonal the tpm

00:31:57,600 --> 00:32:02,159
thereafter so this is a great approach

00:32:00,240 --> 00:32:03,279
for like personal laptops

00:32:02,159 --> 00:32:05,600
obviously a little more difficult on

00:32:03,279 --> 00:32:06,640
headless systems

00:32:05,600 --> 00:32:08,640
it's also not without its own

00:32:06,640 --> 00:32:10,080
limitations an attacker for example

00:32:08,640 --> 00:32:12,559
could pre-calculate

00:32:10,080 --> 00:32:14,480
otp values into the future with one of

00:32:12,559 --> 00:32:16,720
the offline bus attacks and then

00:32:14,480 --> 00:32:18,480
present those fake values to a user as

00:32:16,720 --> 00:32:19,679
part of an online attack to get their to

00:32:18,480 --> 00:32:21,120
get their password

00:32:19,679 --> 00:32:24,399
uh they just you know just another layer

00:32:21,120 --> 00:32:24,399
that makes things more difficult

00:32:24,799 --> 00:32:29,039
and this kind of brings me to my final

00:32:26,080 --> 00:32:32,080
thought secrets inside the tpm

00:32:29,039 --> 00:32:34,799
are just blobs of data encrypted by keys

00:32:32,080 --> 00:32:37,360
derived from some seed stored on flash

00:32:34,799 --> 00:32:38,480
underneath some plastic and silicone and

00:32:37,360 --> 00:32:40,640
on many tpms

00:32:38,480 --> 00:32:42,159
this can be removed with a good laser or

00:32:40,640 --> 00:32:44,480
some potent acid

00:32:42,159 --> 00:32:45,840
and some manufacturers have decap

00:32:44,480 --> 00:32:46,559
counter measures but these aren't

00:32:45,840 --> 00:32:48,399
mandated

00:32:46,559 --> 00:32:50,720
by the spec and certainly no counter

00:32:48,399 --> 00:32:52,480
measure is ever going to be perfect

00:32:50,720 --> 00:32:54,480
so if you break the root of trust on the

00:32:52,480 --> 00:32:56,000
tpm you can then use that information to

00:32:54,480 --> 00:32:58,720
slowly break things above

00:32:56,000 --> 00:33:00,799
it whether it's fake otp values or fake

00:32:58,720 --> 00:33:02,240
pcr measurements to do something else or

00:33:00,799 --> 00:33:04,320
something else

00:33:02,240 --> 00:33:05,600
and how hard this is to exploit largely

00:33:04,320 --> 00:33:08,720
depends on how well other security

00:33:05,600 --> 00:33:11,039
systems are designed around the tpm

00:33:08,720 --> 00:33:12,480
no security technology is perfect uh

00:33:11,039 --> 00:33:14,320
tpm's job is just to

00:33:12,480 --> 00:33:16,880
make the attack more costly in a

00:33:14,320 --> 00:33:19,039
relatively standard way that's

00:33:16,880 --> 00:33:19,919
easy or easy or easier for us to

00:33:19,039 --> 00:33:22,640
implement than

00:33:19,919 --> 00:33:24,000
a home brewed solution and i hope you

00:33:22,640 --> 00:33:25,600
can see some of these benefits

00:33:24,000 --> 00:33:27,360
for your systems after today's

00:33:25,600 --> 00:33:29,760
presentation

00:33:27,360 --> 00:33:30,399
so once again thank you for attending

00:33:29,760 --> 00:33:32,799
and

00:33:30,399 --> 00:33:39,760
i will yield the remainder of my time

00:33:32,799 --> 00:33:43,279
for your questions

00:33:39,760 --> 00:33:45,039
okay hello everyone um so this will be

00:33:43,279 --> 00:33:48,720
the q a portion of the session

00:33:45,039 --> 00:33:49,279
um so uh feel free to ask some questions

00:33:48,720 --> 00:33:51,919
in the

00:33:49,279 --> 00:33:52,320
uh keyway window um i see that some of

00:33:51,919 --> 00:33:53,919
you

00:33:52,320 --> 00:33:56,000
already have so i'll just uh i'll just

00:33:53,919 --> 00:33:59,600
go down to work kind of in order

00:33:56,000 --> 00:34:02,240
um so uh thomas asked

00:33:59,600 --> 00:34:02,960
if there are any uh affordable ppms

00:34:02,240 --> 00:34:06,720
available

00:34:02,960 --> 00:34:09,599
for so raspberry infineon actually

00:34:06,720 --> 00:34:12,000
produces a few boards like

00:34:09,599 --> 00:34:13,599
the 50 60 range you can connect to the

00:34:12,000 --> 00:34:14,720
pi there's also something similar for

00:34:13,599 --> 00:34:16,720
like dealer board

00:34:14,720 --> 00:34:19,280
i would just plug into the to the i o

00:34:16,720 --> 00:34:21,520
banks on those devices

00:34:19,280 --> 00:34:22,960
but i you know i'll i'll i'll caution

00:34:21,520 --> 00:34:26,240
you with uh with those add-on

00:34:22,960 --> 00:34:27,200
tpm boards uh uh on things like the the

00:34:26,240 --> 00:34:28,639
pi uh they don't

00:34:27,200 --> 00:34:30,240
you know the firmware on the raspberry

00:34:28,639 --> 00:34:32,960
pi example doesn't understand

00:34:30,240 --> 00:34:34,320
tpm it doesn't do boot measuring so if

00:34:32,960 --> 00:34:35,919
you're hoping to use that to hold this

00:34:34,320 --> 00:34:39,200
encryption it's not really going to be

00:34:35,919 --> 00:34:39,200
that effective on that

00:34:39,839 --> 00:34:44,800
as it were on on a board with the gpmd

00:34:42,399 --> 00:34:44,800
built in

00:34:45,839 --> 00:34:50,240
uh oh and someone also asked if there

00:34:48,480 --> 00:34:50,560
will be a video recording available so

00:34:50,240 --> 00:34:52,879
uh

00:34:50,560 --> 00:34:53,760
the the slides that my slide deck is

00:34:52,879 --> 00:34:56,960
already posted

00:34:53,760 --> 00:34:59,119
on the uh uh on the abstract uh page

00:34:56,960 --> 00:35:00,160
and the video will be available uh after

00:34:59,119 --> 00:35:01,760
the show um

00:35:00,160 --> 00:35:04,160
as well as posted to youtube i think if

00:35:01,760 --> 00:35:04,160
you're on

00:35:04,800 --> 00:35:08,079
uh let's see uh

00:35:08,240 --> 00:35:12,079
so someone asked uh if considering bus

00:35:10,800 --> 00:35:14,320
attacks uh should a

00:35:12,079 --> 00:35:16,160
firmware tpm implementation that uh

00:35:14,320 --> 00:35:19,680
relies on fsb integrated block

00:35:16,160 --> 00:35:23,359
be preferred to a discrete tpm uh

00:35:19,680 --> 00:35:24,720
yes uh i mean in certain cases

00:35:23,359 --> 00:35:26,960
well really i should say there are some

00:35:24,720 --> 00:35:29,680
trade offs with it but the trouble with

00:35:26,960 --> 00:35:33,359
firmware ppms is oftentimes they

00:35:29,680 --> 00:35:36,079
they rely on uh on on

00:35:33,359 --> 00:35:38,320
looking memory uh isolation um so like

00:35:36,079 --> 00:35:38,880
the intel ppt runs in a memory enclave

00:35:38,320 --> 00:35:41,599
on the chip

00:35:38,880 --> 00:35:42,160
and so uh you know it can be vulnerable

00:35:41,599 --> 00:35:45,280
to like

00:35:42,160 --> 00:35:45,760
the the spectre class attack uh to

00:35:45,280 --> 00:35:48,320
extract

00:35:45,760 --> 00:35:49,359
secrets from it uh but yeah on on the

00:35:48,320 --> 00:35:50,880
flip side of it

00:35:49,359 --> 00:35:53,599
there are no leads that you can probe

00:35:50,880 --> 00:35:55,920
with a hardware attack um

00:35:53,599 --> 00:35:57,440
the amd secure technology i think on

00:35:55,920 --> 00:35:59,760
some of their chips that actually is a

00:35:57,440 --> 00:36:02,000
co-processor embedded inside the ssd

00:35:59,760 --> 00:36:03,280
so that that actually provides a little

00:36:02,000 --> 00:36:04,560
more security guarantees you know you

00:36:03,280 --> 00:36:05,760
always have like the benefits of a

00:36:04,560 --> 00:36:08,480
discrete dpm

00:36:05,760 --> 00:36:10,720
um and with that without some of the

00:36:08,480 --> 00:36:14,400
limitations of it running with you know

00:36:10,720 --> 00:36:16,320
within the cpu and memory so it sort of

00:36:14,400 --> 00:36:19,680
depends

00:36:16,320 --> 00:36:23,200
um thomas also mentioned that

00:36:19,680 --> 00:36:24,240
uh there's a uh monday server is an

00:36:23,200 --> 00:36:26,800
example of

00:36:24,240 --> 00:36:27,760
a user-free to factor off um so i i've

00:36:26,800 --> 00:36:31,119
never heard of that

00:36:27,760 --> 00:36:33,359
but it's interesting um yeah certainly

00:36:31,119 --> 00:36:35,440
you know a legitimate strategy for

00:36:33,359 --> 00:36:36,800
headless systems with cpm is to have a

00:36:35,440 --> 00:36:39,200
remote system provide

00:36:36,800 --> 00:36:41,200
the authorization value to release the

00:36:39,200 --> 00:36:42,960
you know the disconnection key

00:36:41,200 --> 00:36:44,960
um so that's definitely one way to go

00:36:42,960 --> 00:36:48,640
about it um i say that you know

00:36:44,960 --> 00:36:51,520
the most common implementation is

00:36:48,640 --> 00:36:53,440
rather you know user interactive or just

00:36:51,520 --> 00:36:56,320
kind of one factor in every cases like

00:36:53,440 --> 00:36:56,320
the visibility

00:36:58,160 --> 00:37:00,640
let's see

00:37:03,599 --> 00:37:09,680
oh yes somebody just responded there's a

00:37:06,800 --> 00:37:13,040
link to a cpm through a great buy

00:37:09,680 --> 00:37:13,040
from a company called let's trust

00:37:17,680 --> 00:37:20,800
okay well if

00:37:21,440 --> 00:37:24,960
there are no more questions uh uh you

00:37:23,599 --> 00:37:28,079
can feel free to email me

00:37:24,960 --> 00:37:29,599
um uh uh after the show uh or i will

00:37:28,079 --> 00:37:33,040
also be on the uh

00:37:29,599 --> 00:37:34,640
linux uh uh track on slack uh where you

00:37:33,040 --> 00:37:37,200
can chat afterwards

00:37:34,640 --> 00:37:49,839
so thank you all for uh again for

00:37:37,200 --> 00:37:49,839

YouTube URL: https://www.youtube.com/watch?v=fu2RGBcb9aQ


