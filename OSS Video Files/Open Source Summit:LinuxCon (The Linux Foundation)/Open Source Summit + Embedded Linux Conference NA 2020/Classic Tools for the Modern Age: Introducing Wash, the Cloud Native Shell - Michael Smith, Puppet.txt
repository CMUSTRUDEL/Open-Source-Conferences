Title: Classic Tools for the Modern Age: Introducing Wash, the Cloud Native Shell - Michael Smith, Puppet
Publication date: 2020-09-08
Playlist: Open Source Summit + Embedded Linux Conference NA 2020
Description: 
	Classic Tools for the Modern Age: Introducing Wash, the Cloud Native Shell - Michael Smith, Puppet, Inc.
Captions: 
	00:00:00,560 --> 00:00:04,400
i'm michael smith a software engineer at

00:00:03,040 --> 00:00:05,839
puppet

00:00:04,400 --> 00:00:07,440
i spent a lot of my career at puppet

00:00:05,839 --> 00:00:10,719
working on command line tools for

00:00:07,440 --> 00:00:12,400
sysadmins such as factor puppet and bolt

00:00:10,719 --> 00:00:14,559
this talk is going to be a bit about

00:00:12,400 --> 00:00:16,720
designing command line experiences

00:00:14,559 --> 00:00:18,880
a bit about cool linux tech and a bit

00:00:16,720 --> 00:00:20,480
about cloud infrastructure

00:00:18,880 --> 00:00:22,160
i'm going to refer to a lot of examples

00:00:20,480 --> 00:00:22,960
in google and amazon hosted cloud

00:00:22,160 --> 00:00:25,199
infrastructure

00:00:22,960 --> 00:00:26,560
but it can be generalized to anything

00:00:25,199 --> 00:00:29,199
that manages infrastructure

00:00:26,560 --> 00:00:31,840
behind an api for example openstack and

00:00:29,199 --> 00:00:31,840
kubernetes

00:00:31,920 --> 00:00:35,200
a lot of us probably spend a majority of

00:00:34,079 --> 00:00:38,640
our time working on

00:00:35,200 --> 00:00:41,040
in command shells bash z fish whatever

00:00:38,640 --> 00:00:42,160
i certainly do i can get a lot done

00:00:41,040 --> 00:00:43,920
quickly on the command line

00:00:42,160 --> 00:00:45,680
particularly with tab completion

00:00:43,920 --> 00:00:47,680
selecting just the concepts i need

00:00:45,680 --> 00:00:49,360
to describe the specific task i want to

00:00:47,680 --> 00:00:51,520
complete

00:00:49,360 --> 00:00:52,480
but being effective on the command line

00:00:51,520 --> 00:00:54,160
requires

00:00:52,480 --> 00:00:55,520
a lot of learning you need to have a

00:00:54,160 --> 00:00:56,079
working model of each tool you're going

00:00:55,520 --> 00:00:57,760
to use

00:00:56,079 --> 00:00:59,840
so you can quickly select the concept

00:00:57,760 --> 00:01:02,079
you need as a command

00:00:59,840 --> 00:01:04,239
sub command or option there are a huge

00:01:02,079 --> 00:01:06,240
number of tools available to us

00:01:04,239 --> 00:01:07,760
i want to talk a little bit about a

00:01:06,240 --> 00:01:09,360
particular type of command line tool

00:01:07,760 --> 00:01:12,560
specifically those built for interacting

00:01:09,360 --> 00:01:13,760
with cloud infrastructure so when using

00:01:12,560 --> 00:01:15,119
those tools

00:01:13,760 --> 00:01:18,159
there are a number of idiomatic

00:01:15,119 --> 00:01:18,159
operations you might do

00:01:18,720 --> 00:01:22,320
you might want to see what's running

00:01:21,119 --> 00:01:26,400
what are my containers

00:01:22,320 --> 00:01:28,240
vms s3 buckets volumes

00:01:26,400 --> 00:01:30,159
how do i figure out if my s3 bucket is

00:01:28,240 --> 00:01:33,360
public or

00:01:30,159 --> 00:01:35,119
who created that ec2 instance we need to

00:01:33,360 --> 00:01:37,439
select the right description

00:01:35,119 --> 00:01:38,880
are they volumes persistent volume

00:01:37,439 --> 00:01:42,159
claims

00:01:38,880 --> 00:01:44,640
cloud storage then

00:01:42,159 --> 00:01:45,520
is it just ls or did they come up with

00:01:44,640 --> 00:01:48,560
some new way to

00:01:45,520 --> 00:01:48,560
say list this thing

00:01:48,960 --> 00:01:52,640
this image is an example of netflix

00:01:50,720 --> 00:01:54,479
traffic among microservices in one

00:01:52,640 --> 00:01:56,159
availability zone it'll say

00:01:54,479 --> 00:01:59,840
straights the scale of complexity we're

00:01:56,159 --> 00:01:59,840
dealing with in our infrastructure

00:02:01,360 --> 00:02:06,079
you might look at logs for different

00:02:03,040 --> 00:02:09,119
services you need to remember how to see

00:02:06,079 --> 00:02:11,840
logs with kubernetes or docker

00:02:09,119 --> 00:02:14,879
or ssh into an ec2 instance to look at

00:02:11,840 --> 00:02:16,160
something in its log directory

00:02:14,879 --> 00:02:19,440
what if you want to see some logs

00:02:16,160 --> 00:02:19,440
written to a persistent volume

00:02:19,520 --> 00:02:22,959
or how do i see what's happening in an

00:02:21,360 --> 00:02:24,560
aws service

00:02:22,959 --> 00:02:27,840
or what messages are coming in on the

00:02:24,560 --> 00:02:27,840
simple notification service

00:02:29,680 --> 00:02:33,040
how about execute a command with

00:02:32,480 --> 00:02:35,360
complaint

00:02:33,040 --> 00:02:36,720
containers you probably don't have sshd

00:02:35,360 --> 00:02:39,120
running so you need to remember the

00:02:36,720 --> 00:02:41,280
options to use for exec

00:02:39,120 --> 00:02:42,480
to connect to a vm you need to find your

00:02:41,280 --> 00:02:45,599
instances publicly

00:02:42,480 --> 00:02:47,360
public ip address or dns name or hop

00:02:45,599 --> 00:02:49,599
over to a bastion host so you can

00:02:47,360 --> 00:02:52,720
then ssh to an instance with only a

00:02:49,599 --> 00:02:52,720
private ip address

00:02:54,000 --> 00:02:59,200
you may need to stop some services

00:02:57,280 --> 00:03:00,560
shut down a container or application

00:02:59,200 --> 00:03:03,519
stack

00:03:00,560 --> 00:03:05,280
remove a kubernetes deployment stop a

00:03:03,519 --> 00:03:08,480
google compute instance or delete other

00:03:05,280 --> 00:03:08,480
things that are costing you money

00:03:11,120 --> 00:03:14,640
these examples are all concepts you're

00:03:12,879 --> 00:03:17,360
likely familiar with

00:03:14,640 --> 00:03:18,720
they have simple shell commands what if

00:03:17,360 --> 00:03:20,080
you we could use the same commands

00:03:18,720 --> 00:03:21,760
across different cloud providers and

00:03:20,080 --> 00:03:24,720
apis

00:03:21,760 --> 00:03:25,200
it'd be nice not to have to learn a new

00:03:24,720 --> 00:03:27,040
different

00:03:25,200 --> 00:03:29,680
command line tool just to do the same

00:03:27,040 --> 00:03:29,680
sorts of things

00:03:31,120 --> 00:03:34,720
taking this further what things could we

00:03:33,040 --> 00:03:35,120
build if we could rely on those commands

00:03:34,720 --> 00:03:36,879
to

00:03:35,120 --> 00:03:39,040
abstract across different infrastructure

00:03:36,879 --> 00:03:40,879
for us

00:03:39,040 --> 00:03:43,680
we could have a live view of processes

00:03:40,879 --> 00:03:45,920
and usage across the fleet of vms

00:03:43,680 --> 00:03:49,440
we could aggregate logs across different

00:03:45,920 --> 00:03:51,040
containers vms and services

00:03:49,440 --> 00:03:53,280
i've previously worked on a data

00:03:51,040 --> 00:03:55,200
ingestion service that takes in data

00:03:53,280 --> 00:03:57,120
submits it to google cloud via pub sub

00:03:55,200 --> 00:03:59,360
which transforms it in a data flow and

00:03:57,120 --> 00:04:01,280
submits it to bigquery

00:03:59,360 --> 00:04:02,799
be i've always wanted to be able to look

00:04:01,280 --> 00:04:05,680
at the logs and messages across

00:04:02,799 --> 00:04:07,200
all those systems in a single stream but

00:04:05,680 --> 00:04:10,400
don't want to run my own elk stack or

00:04:07,200 --> 00:04:12,080
other login justin service

00:04:10,400 --> 00:04:13,680
given the right tagging it becomes

00:04:12,080 --> 00:04:17,200
pretty easy to find and clean up

00:04:13,680 --> 00:04:17,200
resources that are no longer used

00:04:18,799 --> 00:04:23,600
these are the ideas behind wash a shell

00:04:22,079 --> 00:04:25,759
for constructing abstractions

00:04:23,600 --> 00:04:27,520
across cloud native resources and

00:04:25,759 --> 00:04:28,080
exposing them with a set of powerful and

00:04:27,520 --> 00:04:30,400
familiar

00:04:28,080 --> 00:04:31,840
tools the name is short for the wide

00:04:30,400 --> 00:04:34,080
area shell

00:04:31,840 --> 00:04:36,160
i want to show a little bit of it right

00:04:34,080 --> 00:04:39,520
now

00:04:36,160 --> 00:04:39,520
so we are going to

00:04:39,680 --> 00:04:43,840
take a live tour through it

00:04:44,720 --> 00:04:49,600
so when i start up wash it gives a

00:04:46,880 --> 00:04:52,080
helpful suggestion to

00:04:49,600 --> 00:04:54,479
look at some documentation and this is

00:04:52,080 --> 00:04:57,360
available consistently throughout

00:04:54,479 --> 00:04:58,960
the experience of using wash so wash

00:04:57,360 --> 00:05:00,720
enters a shell

00:04:58,960 --> 00:05:02,000
it gives me some ideas of things to use

00:05:00,720 --> 00:05:05,520
that are familiar

00:05:02,000 --> 00:05:07,039
tools so i can see there are a number of

00:05:05,520 --> 00:05:11,360
plugins available

00:05:07,039 --> 00:05:15,039
right from the start uh

00:05:11,360 --> 00:05:19,280
we have aws docker gcp and kubernetes

00:05:15,039 --> 00:05:21,280
i can take a look at docs for aws

00:05:19,280 --> 00:05:22,840
that gives me a little bit more of how

00:05:21,280 --> 00:05:28,080
is it configured

00:05:22,840 --> 00:05:30,720
uh what things are available to look at

00:05:28,080 --> 00:05:33,440
how to deal with mfa or multi-factor

00:05:30,720 --> 00:05:33,440
authentication

00:05:33,759 --> 00:05:41,280
we it also suggests looking at s tree

00:05:38,720 --> 00:05:41,840
wash is backed wash plugins implement a

00:05:41,280 --> 00:05:44,880
schema

00:05:41,840 --> 00:05:47,919
that tell that describes what kind of

00:05:44,880 --> 00:05:49,759
things we will find in it and so s tree

00:05:47,919 --> 00:05:51,280
is a way to look at that schema

00:05:49,759 --> 00:05:52,720
i can see that under kubernetes i'm

00:05:51,280 --> 00:05:53,280
going to have things categorized by

00:05:52,720 --> 00:05:55,039
context

00:05:53,280 --> 00:05:58,080
namespaces and i'll see pods and

00:05:55,039 --> 00:05:58,080
persistent volumes

00:05:59,120 --> 00:06:04,720
additionally i'll have logs

00:06:02,639 --> 00:06:06,800
i'll have something called fs that we'll

00:06:04,720 --> 00:06:09,919
get into later

00:06:06,800 --> 00:06:12,639
docker has a similar view google gcp

00:06:09,919 --> 00:06:16,080
shows a bit more

00:06:12,639 --> 00:06:18,319
so that's both useful to understand

00:06:16,080 --> 00:06:20,000
what things are available to me we also

00:06:18,319 --> 00:06:23,440
use that

00:06:20,000 --> 00:06:24,240
to optimize some different ways of

00:06:23,440 --> 00:06:28,160
searching

00:06:24,240 --> 00:06:31,360
through all this all these pieces

00:06:28,160 --> 00:06:32,840
some regular built-in commands such as

00:06:31,360 --> 00:06:36,960
tree just

00:06:32,840 --> 00:06:38,639
work there's a file system backing this

00:06:36,960 --> 00:06:41,600
and so they can just you can use

00:06:38,639 --> 00:06:45,039
commands you're familiar with

00:06:41,600 --> 00:06:48,160
i can use a different ls to look at

00:06:45,039 --> 00:06:51,440
projects under gcp

00:06:48,160 --> 00:06:52,479
we also have built-in help so this

00:06:51,440 --> 00:06:55,120
describes a bunch of

00:06:52,479 --> 00:06:57,520
the commands that are available i'm

00:06:55,120 --> 00:06:57,520
going to

00:06:57,680 --> 00:07:04,639
work with find for a minute

00:07:00,880 --> 00:07:07,840
so we have a find is a command

00:07:04,639 --> 00:07:11,039
for select is it

00:07:07,840 --> 00:07:15,280
modeled on the unix find command it's

00:07:11,039 --> 00:07:17,199
for selecting uh

00:07:15,280 --> 00:07:18,800
selecting resources files et cetera

00:07:17,199 --> 00:07:21,199
based on a query

00:07:18,800 --> 00:07:22,800
a set of queries that i put together one

00:07:21,199 --> 00:07:27,680
of the ones i most commonly use

00:07:22,800 --> 00:07:30,880
is searching based on metadata

00:07:27,680 --> 00:07:32,800
so most resources in this

00:07:30,880 --> 00:07:34,400
most cloud resources have some metadata

00:07:32,800 --> 00:07:36,880
associated with them often it's how

00:07:34,400 --> 00:07:41,360
they're configured

00:07:36,880 --> 00:07:44,960
if i look at aws

00:07:41,360 --> 00:07:46,000
ec2 instances i can look at one example

00:07:44,960 --> 00:07:49,440
of that

00:07:46,000 --> 00:07:51,840
has a bunch of metadata about it

00:07:49,440 --> 00:07:53,280
i'm going to look for just instances

00:07:51,840 --> 00:07:58,080
that are running

00:07:53,280 --> 00:08:02,000
so i can say state name running

00:07:58,080 --> 00:08:02,000
i have two instances okay

00:08:02,080 --> 00:08:05,199
wash also has a concept of common

00:08:04,400 --> 00:08:09,280
attributes

00:08:05,199 --> 00:08:11,599
so we can see what common attributes are

00:08:09,280 --> 00:08:13,759
available on those things we have a set

00:08:11,599 --> 00:08:15,759
of actions that you can take on them

00:08:13,759 --> 00:08:17,039
those modeled to the commands you can

00:08:15,759 --> 00:08:19,520
execute

00:08:17,039 --> 00:08:22,160
and other things like creation time

00:08:19,520 --> 00:08:26,479
modification time

00:08:22,160 --> 00:08:28,400
a login shell available on those systems

00:08:26,479 --> 00:08:30,160
uh and as you can see just piping to

00:08:28,400 --> 00:08:32,320
x-args works just fine this is just a

00:08:30,160 --> 00:08:34,479
normal shell

00:08:32,320 --> 00:08:36,800
well that only found aws instances but i

00:08:34,479 --> 00:08:40,000
know i have some stuff running in gcp

00:08:36,800 --> 00:08:43,279
so let's take a look at what

00:08:40,000 --> 00:08:45,040
metadata looks like there

00:08:43,279 --> 00:08:47,360
we have a different model or a different

00:08:45,040 --> 00:08:49,120
set of metadata

00:08:47,360 --> 00:08:52,560
while wash has some common attributes a

00:08:49,120 --> 00:08:52,560
lot of stuff is still

00:08:52,839 --> 00:08:57,519
um described as unique metadata and as

00:08:56,160 --> 00:08:59,120
we find commonal

00:08:57,519 --> 00:09:00,399
common analogies among a bunch of

00:08:59,120 --> 00:09:02,720
different resources we try to bring them

00:09:00,399 --> 00:09:05,519
into attributes so to make

00:09:02,720 --> 00:09:06,080
uh queries like this simpler but i'll

00:09:05,519 --> 00:09:08,640
look for

00:09:06,080 --> 00:09:10,720
all the stuff that's from matches the

00:09:08,640 --> 00:09:12,959
snow

00:09:10,720 --> 00:09:14,480
i find i have two instances running in

00:09:12,959 --> 00:09:18,880
different projects in gcp

00:09:14,480 --> 00:09:22,320
cool so find has a full

00:09:18,880 --> 00:09:26,720
grammar available to it it's modeled on

00:09:22,320 --> 00:09:28,800
how on unix finds how you can

00:09:26,720 --> 00:09:30,160
string together multiple queries so i

00:09:28,800 --> 00:09:32,560
can say

00:09:30,160 --> 00:09:32,560
give me

00:09:34,240 --> 00:09:41,519
either the status is running or

00:09:37,360 --> 00:09:41,519
state name running

00:09:43,279 --> 00:09:46,480
uh and so there's a whole set of

00:09:45,360 --> 00:09:49,600
operands there's

00:09:46,480 --> 00:09:52,160
the primaries are um there are extra

00:09:49,600 --> 00:09:55,200
primaries that are unique to wash

00:09:52,160 --> 00:09:59,040
dealing with things like it's the schema

00:09:55,200 --> 00:10:02,160
um you can specify a kind

00:09:59,040 --> 00:10:06,640
i can say give me just

00:10:02,160 --> 00:10:06,640
things that mount a file system this fs

00:10:07,519 --> 00:10:13,600
and that's using washi the schema

00:10:10,800 --> 00:10:15,360
declared on these plugins to identify

00:10:13,600 --> 00:10:17,200
what things to search for

00:10:15,360 --> 00:10:18,640
otherwise we'd be this could take

00:10:17,200 --> 00:10:19,200
forever as we dig through the file

00:10:18,640 --> 00:10:22,800
systems

00:10:19,200 --> 00:10:26,000
of a bunch of these uh

00:10:22,800 --> 00:10:26,000
computers or computers

00:10:26,720 --> 00:10:33,839
um so that's fine

00:10:30,640 --> 00:10:33,839
i'm gonna

00:10:34,480 --> 00:10:37,839
since this is just a file system i also

00:10:36,560 --> 00:10:41,600
have access to

00:10:37,839 --> 00:10:42,399
things in storage so aws s3 i can just

00:10:41,600 --> 00:10:45,680
pull up

00:10:42,399 --> 00:10:49,200
find or finder and look at files

00:10:45,680 --> 00:10:50,240
hosted in s3 that's just made it

00:10:49,200 --> 00:10:53,440
available immediately

00:10:50,240 --> 00:10:55,200
a similar thing works for gcp but with

00:10:53,440 --> 00:10:58,160
gcp at the moment we've added we've

00:10:55,200 --> 00:10:58,160
implemented a few other

00:10:59,440 --> 00:11:04,560
sets of resources such as looking at

00:11:02,480 --> 00:11:08,240
documents in firestore

00:11:04,560 --> 00:11:10,320
um we have storage in gcp as well

00:11:08,240 --> 00:11:12,079
so i can look at files and i'm hosting

00:11:10,320 --> 00:11:15,839
some containers there that

00:11:12,079 --> 00:11:20,079
live in google storage

00:11:15,839 --> 00:11:24,480
i can also interact with a pub sub

00:11:20,079 --> 00:11:26,240
in gcp so

00:11:24,480 --> 00:11:27,760
i'm just going to tail on that and that

00:11:26,240 --> 00:11:31,839
attaches a

00:11:27,760 --> 00:11:35,440
new subscriber to that queue

00:11:31,839 --> 00:11:37,279
and then if i send it a message

00:11:35,440 --> 00:11:39,279
i get that response back and so that

00:11:37,279 --> 00:11:43,839
pushed a message onto that queue

00:11:39,279 --> 00:11:46,399
and um and my subscriber received it and

00:11:43,839 --> 00:11:46,399
displayed it

00:11:47,519 --> 00:11:50,480
with docker

00:11:50,800 --> 00:11:58,959
we have containers listed we also have

00:11:55,279 --> 00:12:00,800
volumes and so accessing docker volumes

00:11:58,959 --> 00:12:03,920
is not necessarily

00:12:00,800 --> 00:12:04,720
always straightforward the most common

00:12:03,920 --> 00:12:06,880
pattern is to

00:12:04,720 --> 00:12:08,160
mount them in a new container which is

00:12:06,880 --> 00:12:09,920
what we're doing in the back end

00:12:08,160 --> 00:12:11,279
but this makes it a lot simpler to

00:12:09,920 --> 00:12:15,440
interact with

00:12:11,279 --> 00:12:20,160
um and i can go delete so i can look at

00:12:15,440 --> 00:12:23,760
well what's my redis swarm been up to um

00:12:20,160 --> 00:12:27,519
but i can also go delete files and

00:12:23,760 --> 00:12:27,519
this foo file doesn't need to be here

00:12:29,200 --> 00:12:32,160
so let's get rid of that

00:12:32,240 --> 00:12:35,440
um and additionally we have the ability

00:12:34,959 --> 00:12:39,839
to

00:12:35,440 --> 00:12:42,399
see some um

00:12:39,839 --> 00:12:43,680
we have a command that aggregates across

00:12:42,399 --> 00:12:45,839
different

00:12:43,680 --> 00:12:48,000
vms and containers for looking at what

00:12:45,839 --> 00:12:51,360
processes are running so i can go

00:12:48,000 --> 00:12:52,320
take a look at when that is a little too

00:12:51,360 --> 00:12:54,079
wide for this

00:12:52,320 --> 00:12:57,360
display but i can take a look at

00:12:54,079 --> 00:12:58,880
processes running in my containers

00:12:57,360 --> 00:13:01,360
and a couple of them didn't work because

00:12:58,880 --> 00:13:04,720
they're very very streamlined containers

00:13:01,360 --> 00:13:04,720
that don't have a shell in them

00:13:04,959 --> 00:13:09,040
and then last i can

00:13:13,680 --> 00:13:17,279
so getting back to one of the other

00:13:15,680 --> 00:13:19,920
examples that i like

00:13:17,279 --> 00:13:20,959
wanted to be able to do i can tail logs

00:13:19,920 --> 00:13:24,079
across

00:13:20,959 --> 00:13:26,959
several different containers with

00:13:24,079 --> 00:13:27,920
running different purposes so here i

00:13:26,959 --> 00:13:30,079
have

00:13:27,920 --> 00:13:32,320
min io postgres and a service all

00:13:30,079 --> 00:13:34,720
running together so i can see

00:13:32,320 --> 00:13:35,440
messages from those services um

00:13:34,720 --> 00:13:38,800
interleaved

00:13:35,440 --> 00:13:41,839
as they come in and that all works

00:13:38,800 --> 00:13:44,399
really simply via commands we're already

00:13:41,839 --> 00:13:44,399
familiar with

00:13:47,360 --> 00:13:51,040
looking at a few of the others

00:13:51,120 --> 00:13:54,560
yeah i can see a history of what i've

00:13:53,120 --> 00:13:57,600
run

00:13:54,560 --> 00:14:01,680
i can also see some details

00:13:57,600 --> 00:14:04,240
about what kind of

00:14:01,680 --> 00:14:04,800
operations i was doing in the background

00:14:04,240 --> 00:14:07,680
for that

00:14:04,800 --> 00:14:10,399
so there's some debugging information

00:14:07,680 --> 00:14:10,399
available here

00:14:11,519 --> 00:14:14,800
so returning to

00:14:14,839 --> 00:14:17,920
screen um

00:14:20,160 --> 00:14:26,800
yeah we have aws instances um

00:14:24,480 --> 00:14:28,079
i've just reiterate that you have access

00:14:26,800 --> 00:14:31,519
there's

00:14:28,079 --> 00:14:32,880
there's ec2 and s3 ec2 instances and s38

00:14:31,519 --> 00:14:35,120
buckets and

00:14:32,880 --> 00:14:37,040
you have ways of viewing those accessing

00:14:35,120 --> 00:14:39,120
and looking at the output of files from

00:14:37,040 --> 00:14:41,920
them

00:14:39,120 --> 00:14:44,399
querying what's there via metadata

00:14:41,920 --> 00:14:46,320
attributes and other queries

00:14:44,399 --> 00:14:48,639
same with gcp plus some extras that

00:14:46,320 --> 00:14:52,720
we've added

00:14:48,639 --> 00:14:54,399
or that i've added a similar approach

00:14:52,720 --> 00:14:59,040
with docker

00:14:54,399 --> 00:15:01,760
and kubernetes

00:14:59,040 --> 00:15:02,720
additionally wash has a simple external

00:15:01,760 --> 00:15:04,639
plug-in interface

00:15:02,720 --> 00:15:07,120
which a co-worker used to write up a

00:15:04,639 --> 00:15:09,199
view of spotify playlists

00:15:07,120 --> 00:15:10,800
exploring spotify playlists via the cla

00:15:09,199 --> 00:15:13,120
may not be what you need

00:15:10,800 --> 00:15:16,959
but this shows how simple it is to adapt

00:15:13,120 --> 00:15:16,959
an api to wash's plugin system

00:15:18,639 --> 00:15:22,320
so i've shown a little of what wash can

00:15:20,880 --> 00:15:24,000
do it supports

00:15:22,320 --> 00:15:27,199
more commands that provide powerful ways

00:15:24,000 --> 00:15:28,880
to find things based on their metadata

00:15:27,199 --> 00:15:30,240
a consistent way to execute commands on

00:15:28,880 --> 00:15:32,160
compute instances

00:15:30,240 --> 00:15:34,079
and most of the other examples of common

00:15:32,160 --> 00:15:35,360
operations i talked about earlier

00:15:34,079 --> 00:15:36,720
if you're interested in seeing more the

00:15:35,360 --> 00:15:38,160
short link is on the bottom right it's

00:15:36,720 --> 00:15:40,399
pep dot pt

00:15:38,160 --> 00:15:41,199
wash i want to spend the rest of this

00:15:40,399 --> 00:15:44,800
talk

00:15:41,199 --> 00:15:44,800
looking at how it works

00:15:46,720 --> 00:15:52,720
but first why is it a shell rather than

00:15:49,759 --> 00:15:54,320
just a set of cli tools

00:15:52,720 --> 00:15:56,720
let's examine what properties we expect

00:15:54,320 --> 00:15:59,920
to have in a shell

00:15:56,720 --> 00:16:02,560
a shell is a repleta valley print loop

00:15:59,920 --> 00:16:03,839
so you can quickly test things out it's

00:16:02,560 --> 00:16:06,399
all text-based

00:16:03,839 --> 00:16:07,519
so we can execute it share it and re-run

00:16:06,399 --> 00:16:10,880
it

00:16:07,519 --> 00:16:13,759
what's happening is explicit there

00:16:10,880 --> 00:16:15,519
it's that so you can see all the

00:16:13,759 --> 00:16:18,240
behavior you can share that easily you

00:16:15,519 --> 00:16:18,240
can rerun it

00:16:20,480 --> 00:16:25,920
this is the vsh project

00:16:24,399 --> 00:16:28,480
which provides a shell for querying and

00:16:25,920 --> 00:16:32,320
configuring secrets in hashicorp vault

00:16:28,480 --> 00:16:32,320
and it seems that the

00:16:32,480 --> 00:16:35,600
demo is not working exactly so i think

00:16:34,480 --> 00:16:37,839
i'll pull that up

00:16:35,600 --> 00:16:37,839
on

00:16:38,800 --> 00:16:51,839
a live screen

00:16:56,000 --> 00:17:01,199
so i wanted to

00:16:59,199 --> 00:17:04,000
use this example because it shows off

00:17:01,199 --> 00:17:07,839
some of the rest of the

00:17:04,000 --> 00:17:09,919
properties that i that i see in a shell

00:17:07,839 --> 00:17:12,959
so this is a shell for querying and

00:17:09,919 --> 00:17:14,480
configuring secrets in hashicorp fault

00:17:12,959 --> 00:17:17,439
it's designed around making it easy to

00:17:14,480 --> 00:17:19,439
write complicated operations quickly

00:17:17,439 --> 00:17:22,720
short command names tab completion

00:17:19,439 --> 00:17:24,240
simple access to environment variables

00:17:22,720 --> 00:17:27,839
you can navigate through a hierarchy

00:17:24,240 --> 00:17:27,839
representing how the secrets are stored

00:17:28,960 --> 00:17:32,000
and organized and the context of where

00:17:31,440 --> 00:17:33,760
you are in that

00:17:32,000 --> 00:17:36,880
hierarchy feeds into the commands we run

00:17:33,760 --> 00:17:38,480
to read or update them

00:17:36,880 --> 00:17:41,039
wash provides these things for cloud

00:17:38,480 --> 00:17:41,039
resources

00:17:43,200 --> 00:17:49,520
it builds on an existing

00:17:46,320 --> 00:17:51,760
shell reusing familiar commands

00:17:49,520 --> 00:17:54,320
it represents your infrastructure as an

00:17:51,760 --> 00:17:56,640
organized hierarchy you can navigate

00:17:54,320 --> 00:18:01,280
wash commands operate on the objects of

00:17:56,640 --> 00:18:03,760
that hierarchy

00:18:01,280 --> 00:18:05,280
now standard shell tools are built on

00:18:03,760 --> 00:18:07,360
system calls

00:18:05,280 --> 00:18:08,880
on linux those are a small set that

00:18:07,360 --> 00:18:11,840
enable access to processes

00:18:08,880 --> 00:18:13,360
memory networking and the file system

00:18:11,840 --> 00:18:14,960
they then expose more os

00:18:13,360 --> 00:18:17,760
information through the file system for

00:18:14,960 --> 00:18:19,360
example via slash proc

00:18:17,760 --> 00:18:21,280
so what are our cloud native system

00:18:19,360 --> 00:18:22,880
calls the cloud

00:18:21,280 --> 00:18:24,880
consists of file objects and

00:18:22,880 --> 00:18:28,000
hierarchical organization

00:18:24,880 --> 00:18:30,960
vms and containers databases service

00:18:28,000 --> 00:18:32,559
appliances we should have create read

00:18:30,960 --> 00:18:33,760
update and delete operations on each of

00:18:32,559 --> 00:18:36,160
these things

00:18:33,760 --> 00:18:37,200
plus access to logs configuration and

00:18:36,160 --> 00:18:40,880
labels

00:18:37,200 --> 00:18:42,640
and links to related resources

00:18:40,880 --> 00:18:44,000
for general purpose compute instances we

00:18:42,640 --> 00:18:45,679
need remote access to see what's

00:18:44,000 --> 00:18:47,440
happening in the os

00:18:45,679 --> 00:18:51,440
we need to send data around such as

00:18:47,440 --> 00:18:51,440
publishing messages on a message queue

00:18:53,360 --> 00:18:57,200
wash has defined a set of primitives

00:18:55,200 --> 00:18:59,120
that represent abstract versions of many

00:18:57,200 --> 00:19:01,600
of those operations

00:18:59,120 --> 00:19:05,120
the ability to list what's there and get

00:19:01,600 --> 00:19:06,799
configuration or metadata about it

00:19:05,120 --> 00:19:08,720
you can read data or get a stream of

00:19:06,799 --> 00:19:10,000
updates

00:19:08,720 --> 00:19:11,840
and you can update a file or

00:19:10,000 --> 00:19:14,880
configuration

00:19:11,840 --> 00:19:16,720
execute a command uh delete the resource

00:19:14,880 --> 00:19:18,640
and delete a resource or

00:19:16,720 --> 00:19:20,720
signal it to trigger some sort of state

00:19:18,640 --> 00:19:22,320
change

00:19:20,720 --> 00:19:24,000
the most common example we use right now

00:19:22,320 --> 00:19:26,240
is restarting a vm

00:19:24,000 --> 00:19:28,240
or a service while wash's primary focus

00:19:26,240 --> 00:19:31,600
is on cloud native infrastructure

00:19:28,240 --> 00:19:32,960
it's designed to be pluggable so each

00:19:31,600 --> 00:19:34,480
resource it interacts with

00:19:32,960 --> 00:19:36,000
can choose to implement any or all of

00:19:34,480 --> 00:19:37,360
these primitives

00:19:36,000 --> 00:19:38,799
and commands and wash will work with

00:19:37,360 --> 00:19:40,960
anything that implements the required

00:19:38,799 --> 00:19:42,880
primitive

00:19:40,960 --> 00:19:45,039
wash occasionally adds new primitives as

00:19:42,880 --> 00:19:47,039
new use cases demand them

00:19:45,039 --> 00:19:50,720
by keeping this first list small i hope

00:19:47,039 --> 00:19:50,720
to make it easy to add new resources to

00:19:50,840 --> 00:19:55,440
wash

00:19:53,600 --> 00:19:56,720
to map these primitives to the ways you

00:19:55,440 --> 00:19:59,679
use wash

00:19:56,720 --> 00:20:00,320
we mount plugins as a fuse file system

00:19:59,679 --> 00:20:02,960
so

00:20:00,320 --> 00:20:05,520
ls becomes a call to the list primitive

00:20:02,960 --> 00:20:08,559
opening a file becomes a read

00:20:05,520 --> 00:20:10,559
this lets existing tools like less or an

00:20:08,559 --> 00:20:14,159
editor or the finder as i showed earlier

00:20:10,559 --> 00:20:14,159
access remote data transparently

00:20:17,840 --> 00:20:23,360
some primitives such as exec don't map

00:20:20,799 --> 00:20:26,400
to file system operations

00:20:23,360 --> 00:20:29,039
so wash is running lib fuse it's got

00:20:26,400 --> 00:20:34,080
plugins connected to it this is showing

00:20:29,039 --> 00:20:37,200
a couple of examples

00:20:34,080 --> 00:20:38,960
so for things that

00:20:37,200 --> 00:20:40,559
we can't do through the file system wash

00:20:38,960 --> 00:20:43,919
also runs a local demon that shell

00:20:40,559 --> 00:20:43,919
commands talk to over a socket

00:20:44,320 --> 00:20:49,039
that influence things like execute

00:20:46,840 --> 00:20:51,679
signaling

00:20:49,039 --> 00:20:53,440
the main wash process also maintains a

00:20:51,679 --> 00:20:54,960
cache so that repeated interaction can

00:20:53,440 --> 00:20:57,039
be quick rather than reaching out of the

00:20:54,960 --> 00:20:58,640
network again

00:20:57,039 --> 00:21:00,880
it caches the result of primitives that

00:20:58,640 --> 00:21:04,240
we expect to be repeatable so primarily

00:21:00,880 --> 00:21:04,240
list metadata and read

00:21:04,720 --> 00:21:08,880
and when you're doing reads and writes

00:21:06,640 --> 00:21:09,760
that's operating on a local copy until

00:21:08,880 --> 00:21:13,120
it actually

00:21:09,760 --> 00:21:14,880
saves it and uploads it but to build

00:21:13,120 --> 00:21:17,679
watch quickly we're actually doing a bit

00:21:14,880 --> 00:21:19,440
of sleight of hand

00:21:17,679 --> 00:21:21,600
washer uses your existing shell for the

00:21:19,440 --> 00:21:24,480
scripting layer and customizes it with

00:21:21,600 --> 00:21:26,400
its own defaults and a wash rc file

00:21:24,480 --> 00:21:28,480
so then you're calling aliased watch sub

00:21:26,400 --> 00:21:29,120
commands to do some of the more complex

00:21:28,480 --> 00:21:31,840
interaction

00:21:29,120 --> 00:21:32,799
interactions with wash and we provide a

00:21:31,840 --> 00:21:36,640
customized prompt

00:21:32,799 --> 00:21:45,520
to give that a sense of place within

00:21:36,640 --> 00:21:49,360
a washer's hierarchy

00:21:45,520 --> 00:21:50,320
and so most of these washer ls goes

00:21:49,360 --> 00:21:52,559
through web fuse

00:21:50,320 --> 00:21:53,919
wash exec and ps go through the socket

00:21:52,559 --> 00:21:56,400
uh

00:21:53,919 --> 00:21:57,440
you're invoking all of this um as

00:21:56,400 --> 00:22:00,480
aliases to those

00:21:57,440 --> 00:22:03,600
invoke those commands uh via

00:22:00,480 --> 00:22:05,120
your own shell so

00:22:03,600 --> 00:22:06,720
while plugins that are distributed with

00:22:05,120 --> 00:22:07,679
wash are written and go and compiled

00:22:06,720 --> 00:22:09,039
into wash

00:22:07,679 --> 00:22:11,520
we want to make it really easy to add

00:22:09,039 --> 00:22:13,280
new plugins so new plugins can be

00:22:11,520 --> 00:22:15,520
written in any language

00:22:13,280 --> 00:22:17,120
by creating a script or executable that

00:22:15,520 --> 00:22:19,600
responds to specific commands

00:22:17,120 --> 00:22:20,960
command line arguments it mirrors the

00:22:19,600 --> 00:22:22,480
primitives we defined earlier

00:22:20,960 --> 00:22:25,760
with some additional arguments to help

00:22:22,480 --> 00:22:27,919
manage state between runs of the script

00:22:25,760 --> 00:22:29,520
i also have a rubygem that simplifies

00:22:27,919 --> 00:22:31,360
most of this to defining classes that

00:22:29,520 --> 00:22:34,480
reflect your data hierarchy

00:22:31,360 --> 00:22:41,840
so i want to show two different

00:22:34,480 --> 00:22:41,840
examples of this

00:22:44,720 --> 00:22:51,280
one i'm going to restart wash with a

00:22:47,840 --> 00:22:54,960
new plug-in loaded that

00:22:51,280 --> 00:22:58,960
this lets me browse my goodreads

00:22:54,960 --> 00:23:02,240
uh let's see goodreads library

00:22:58,960 --> 00:23:02,240
i guess uh

00:23:03,200 --> 00:23:08,159
so i've got a different tagging or

00:23:05,360 --> 00:23:11,200
different categories of things

00:23:08,159 --> 00:23:13,440
books i'm reading books i've

00:23:11,200 --> 00:23:13,440
read

00:23:16,559 --> 00:23:20,159
and most of the weird behaviors you're

00:23:18,880 --> 00:23:21,200
going to see on this are because the

00:23:20,159 --> 00:23:26,080
goodreads api

00:23:21,200 --> 00:23:26,080
is all xml and paged and kind of slow

00:23:26,240 --> 00:23:30,080
but after this first operation finishes

00:23:32,159 --> 00:23:38,960
it's pretty fast so i can go look at

00:23:35,679 --> 00:23:40,640
well it's metadata about zoe's tail

00:23:38,960 --> 00:23:42,240
uh who are the author who's the author

00:23:40,640 --> 00:23:43,760
john scalzi

00:23:42,240 --> 00:23:46,640
get a description get all sorts of

00:23:43,760 --> 00:23:46,640
information about it

00:23:49,679 --> 00:23:56,240
and i can look at currently reading so

00:23:53,120 --> 00:23:56,240
this project

00:24:00,000 --> 00:24:06,720
or the plugin that implements this is

00:24:03,440 --> 00:24:10,960
a fairly straightforward ruby script

00:24:06,720 --> 00:24:15,440
if you ignore the xml parsing uh

00:24:10,960 --> 00:24:15,440
we need to authenticate against the api

00:24:16,720 --> 00:24:19,840
we're going to

00:24:24,080 --> 00:24:27,360
come back to those methods later once we

00:24:25,760 --> 00:24:30,480
use them

00:24:27,360 --> 00:24:32,640
but we'll implement a

00:24:30,480 --> 00:24:35,039
init method that's called when the

00:24:32,640 --> 00:24:38,240
plug-ins to load the plug-in

00:24:35,039 --> 00:24:41,840
that handles authentication uh and

00:24:38,240 --> 00:24:46,880
returns a json object that we

00:24:41,840 --> 00:24:50,400
we cache to um

00:24:46,880 --> 00:24:51,360
that describes the plugin and caches any

00:24:50,400 --> 00:24:54,480
additional state

00:24:51,360 --> 00:24:57,360
in this case a user id

00:24:54,480 --> 00:24:58,880
then whenever i list a directory we're

00:24:57,360 --> 00:25:02,000
going to

00:24:58,880 --> 00:25:03,840
get a a list argument

00:25:02,000 --> 00:25:05,520
uh we'll pull out that state to get the

00:25:03,840 --> 00:25:09,039
user id and then

00:25:05,520 --> 00:25:10,720
depending on what pathway

00:25:09,039 --> 00:25:13,840
we're invoking whether we're at the top

00:25:10,720 --> 00:25:17,919
or whether we are looking at a bookshelf

00:25:13,840 --> 00:25:17,919
i'll return a list of bookshelves

00:25:18,320 --> 00:25:28,960
or a list of books in that bookshelf

00:25:23,600 --> 00:25:31,760
and serialize that to json

00:25:28,960 --> 00:25:33,520
uh implementing things like read are

00:25:31,760 --> 00:25:34,000
similarly simple when you get a read

00:25:33,520 --> 00:25:36,960
commit

00:25:34,000 --> 00:25:37,760
read request it's going to be on a path

00:25:36,960 --> 00:25:40,880
and

00:25:37,760 --> 00:25:43,360
the response is going to be

00:25:40,880 --> 00:25:46,799
writing everything you wanted everything

00:25:43,360 --> 00:25:46,799
in the response to standard out

00:25:47,039 --> 00:25:51,120
so developing those is pretty straight

00:25:49,679 --> 00:25:54,640
pretty

00:25:51,120 --> 00:25:57,840
quick you can um change them

00:25:54,640 --> 00:25:57,840
live in wash

00:25:59,840 --> 00:26:04,559
the other example i wanted to show was

00:26:08,840 --> 00:26:13,120
a

00:26:11,360 --> 00:26:15,840
um what the structure looks like when

00:26:13,120 --> 00:26:15,840
you're dealing with

00:26:16,080 --> 00:26:22,559
using the wash ruby gem

00:26:19,440 --> 00:26:24,080
so in this case all of your everything

00:26:22,559 --> 00:26:25,440
is declared as a set of classes that

00:26:24,080 --> 00:26:27,279
implement methods

00:26:25,440 --> 00:26:30,320
and all the extra serialization is

00:26:27,279 --> 00:26:30,320
handled via the helper

00:26:30,880 --> 00:26:36,840
so we have this is a

00:26:34,000 --> 00:26:39,120
this is a piece for looking connecting

00:26:36,840 --> 00:26:40,880
to

00:26:39,120 --> 00:26:42,480
targets that you've declared in a both

00:26:40,880 --> 00:26:46,720
inventory so this ties to

00:26:42,480 --> 00:26:48,640
puppetbull but it has a root plugin that

00:26:46,720 --> 00:26:51,200
implements its own list behavior that

00:26:48,640 --> 00:26:54,720
shows groups those groups have

00:26:51,200 --> 00:26:56,799
targets and those targets implement

00:26:54,720 --> 00:26:59,279
ways to execute commands on them among

00:26:56,799 --> 00:26:59,279
other things

00:27:05,520 --> 00:27:11,440
so uh we've worked hard

00:27:08,720 --> 00:27:12,880
i've worked hard to make um extending

00:27:11,440 --> 00:27:16,640
this via plugins

00:27:12,880 --> 00:27:16,640
pretty as simple as possible

00:27:16,960 --> 00:27:20,480
so wash has been out in the wild for a

00:27:19,440 --> 00:27:22,480
year now

00:27:20,480 --> 00:27:24,159
i want to talk about some thoughts and

00:27:22,480 --> 00:27:25,360
feedback based on that time

00:27:24,159 --> 00:27:27,760
and what that could lead to in the

00:27:25,360 --> 00:27:27,760
future

00:27:28,640 --> 00:27:31,919
one of the things that really clicks

00:27:29,840 --> 00:27:32,799
with people is the same thing sshfs

00:27:31,919 --> 00:27:34,320
provides

00:27:32,799 --> 00:27:36,000
flexibility in working with files on

00:27:34,320 --> 00:27:38,080
remote systems

00:27:36,000 --> 00:27:39,679
that might be taking a diff of files on

00:27:38,080 --> 00:27:41,520
different systems or copying from one

00:27:39,679 --> 00:27:43,440
system to another

00:27:41,520 --> 00:27:45,919
watch is like having any system that you

00:27:43,440 --> 00:27:48,159
have access to automatically mounted

00:27:45,919 --> 00:27:49,360
it also works over winrm docker and

00:27:48,159 --> 00:27:52,000
kubernetes apis

00:27:49,360 --> 00:27:52,559
and puppet bolt transports and it's easy

00:27:52,000 --> 00:27:55,679
to extend

00:27:52,559 --> 00:27:57,360
new things the only thing

00:27:55,679 --> 00:27:58,559
missing right now in that is a primitive

00:27:57,360 --> 00:28:03,840
to create new files and directories

00:27:58,559 --> 00:28:03,840
which i'm hoping to add soon

00:28:05,840 --> 00:28:10,960
running in a shell is great at orienting

00:28:08,480 --> 00:28:13,600
you in a new context

00:28:10,960 --> 00:28:14,159
i also dislike running extra background

00:28:13,600 --> 00:28:16,720
services

00:28:14,159 --> 00:28:17,679
unless i'm using them so booting into a

00:28:16,720 --> 00:28:20,000
shell provides

00:28:17,679 --> 00:28:21,360
a clean context for saying i'm working

00:28:20,000 --> 00:28:22,799
on a different problem now

00:28:21,360 --> 00:28:25,279
and ensures everything is cleaned up

00:28:22,799 --> 00:28:26,640
when you exit

00:28:25,279 --> 00:28:30,159
but it also adds some additional

00:28:26,640 --> 00:28:32,080
overhead to interacting with the system

00:28:30,159 --> 00:28:34,640
if i want to view files in an ide why

00:28:32,080 --> 00:28:36,640
would i start up a shell first

00:28:34,640 --> 00:28:38,000
wash has ways to run just as just a

00:28:36,640 --> 00:28:39,840
daemon

00:28:38,000 --> 00:28:40,960
that would keep a file system

00:28:39,840 --> 00:28:42,480
persistently mounted but the

00:28:40,960 --> 00:28:45,840
configuration to run that as a service

00:28:42,480 --> 00:28:45,840
isn't there

00:28:46,799 --> 00:28:50,159
starting a shell is also lots of

00:28:48,559 --> 00:28:52,640
overhead for doing small things

00:28:50,159 --> 00:28:54,399
so especially as i get more practice

00:28:52,640 --> 00:28:55,279
practiced with them i'll i still find

00:28:54,399 --> 00:28:59,440
myself doing

00:28:55,279 --> 00:29:01,120
docker copy or coupe cuddle logs

00:28:59,440 --> 00:29:02,720
wash could be improved so sub commands

00:29:01,120 --> 00:29:06,880
can be run by themselves and support

00:29:02,720 --> 00:29:09,600
auto completion so you can do wash tail

00:29:06,880 --> 00:29:11,279
and be able to refer the things by wash

00:29:09,600 --> 00:29:13,840
identifiers without having to start a

00:29:11,279 --> 00:29:13,840
shell

00:29:17,200 --> 00:29:21,600
while wash principally sticks to

00:29:19,200 --> 00:29:23,279
standard posix shell commands

00:29:21,600 --> 00:29:25,039
some dedicated tools improve on those

00:29:23,279 --> 00:29:27,520
patterns in cool ways

00:29:25,039 --> 00:29:28,399
stern is one i came across recently it's

00:29:27,520 --> 00:29:30,720
a tool for

00:29:28,399 --> 00:29:32,480
viewing kubernetes logs across multiple

00:29:30,720 --> 00:29:34,159
containers that supports

00:29:32,480 --> 00:29:36,480
really simple selection via pattern

00:29:34,159 --> 00:29:38,159
matching i found myself using it a lot

00:29:36,480 --> 00:29:39,760
because it's so simple to select what i

00:29:38,159 --> 00:29:42,000
want to see

00:29:39,760 --> 00:29:44,159
i'd be really interested in adapting it

00:29:42,000 --> 00:29:46,640
to work with wash's plugin system

00:29:44,159 --> 00:29:47,760
to make it simple to view aggregate logs

00:29:46,640 --> 00:29:51,440
across a wide

00:29:47,760 --> 00:29:55,039
set of systems with some simple

00:29:51,440 --> 00:29:58,159
with very simple ways of specif

00:29:55,039 --> 00:29:58,159
matching what i want to view

00:30:01,120 --> 00:30:05,600
so folks have written plugins to github

00:30:03,360 --> 00:30:07,200
puppetdb and goodreads

00:30:05,600 --> 00:30:11,360
with a simple way to extend your shell

00:30:07,200 --> 00:30:11,360
and file system what would you add to it

00:30:13,760 --> 00:30:23,840
thanks for listening i

00:30:17,279 --> 00:30:23,840
will be here for any questions

00:30:27,360 --> 00:30:31,840
so uh i have a slight change of

00:30:29,200 --> 00:30:33,840
perspective um

00:30:31,840 --> 00:30:34,880
there are a couple questions um up

00:30:33,840 --> 00:30:37,200
already um

00:30:34,880 --> 00:30:38,799
that i'll go ahead and respond to live

00:30:37,200 --> 00:30:40,720
here and

00:30:38,799 --> 00:30:42,640
we have a bit of time for any more that

00:30:40,720 --> 00:30:44,880
people want to throw in

00:30:42,640 --> 00:30:45,679
so uh first one was are there any

00:30:44,880 --> 00:30:49,279
plugins for

00:30:45,679 --> 00:30:52,320
azure yet uh and the answer is no um

00:30:49,279 --> 00:30:57,039
there's a lot of

00:30:52,320 --> 00:31:00,080
uh a lot of surface area to cover uh and

00:30:57,039 --> 00:31:04,399
we i've been more experimenting with

00:31:00,080 --> 00:31:06,399
um with different models um than trying

00:31:04,399 --> 00:31:09,279
to build out breadth of support yet

00:31:06,399 --> 00:31:11,360
so azure would be cool to add but it's

00:31:09,279 --> 00:31:13,600
not there at the moment

00:31:11,360 --> 00:31:15,279
um how do i configure another question

00:31:13,600 --> 00:31:18,880
how do i configure wash to discover the

00:31:15,279 --> 00:31:18,880
metadata of different services

00:31:19,039 --> 00:31:26,799
right now wash pulls it looks at

00:31:23,519 --> 00:31:28,480
defaults for how different

00:31:26,799 --> 00:31:30,320
command line tools for those services

00:31:28,480 --> 00:31:32,799
are configured so

00:31:30,320 --> 00:31:33,360
right now it's going to pull on anything

00:31:32,799 --> 00:31:35,679
that you've

00:31:33,360 --> 00:31:37,200
used via a different native command line

00:31:35,679 --> 00:31:40,960
tool like gcloud

00:31:37,200 --> 00:31:44,240
or aws or coupe cuddle or

00:31:40,960 --> 00:31:47,039
docker primarily those ones

00:31:44,240 --> 00:31:48,399
and just start with those automatically

00:31:47,039 --> 00:31:50,080
um

00:31:48,399 --> 00:31:52,000
other external plug-ins tend to have

00:31:50,080 --> 00:31:55,760
their own methods for

00:31:52,000 --> 00:31:59,279
adding configuration and uh

00:31:55,760 --> 00:32:00,320
i understand that those cli workflows

00:31:59,279 --> 00:32:03,279
are often not

00:32:00,320 --> 00:32:04,559
obvious um it'd be really cool to

00:32:03,279 --> 00:32:06,399
enhance this with better

00:32:04,559 --> 00:32:09,120
login workflows for each of those but

00:32:06,399 --> 00:32:11,440
it's not something i've tried yet

00:32:09,120 --> 00:32:13,120
um another question is it possible to

00:32:11,440 --> 00:32:14,880
write wash scripts i.e for batch

00:32:13,120 --> 00:32:16,799
processing yes

00:32:14,880 --> 00:32:18,559
uh in the help you might have noticed

00:32:16,799 --> 00:32:19,039
that there's a script script argument so

00:32:18,559 --> 00:32:21,679
you can

00:32:19,039 --> 00:32:22,640
say wash and provide a script and it'll

00:32:21,679 --> 00:32:26,640
run it

00:32:22,640 --> 00:32:30,159
non-interactively it well

00:32:26,640 --> 00:32:30,640
yeah uh it'll run it it'll uh choose

00:32:30,159 --> 00:32:33,039
whether

00:32:30,640 --> 00:32:34,799
it's interactive based on um whether it

00:32:33,039 --> 00:32:39,039
has an interactive

00:32:34,799 --> 00:32:39,039
uh file descriptor to work with

00:32:39,120 --> 00:32:43,360
um it also has a c argument so you can

00:32:41,600 --> 00:32:46,720
just run a short command

00:32:43,360 --> 00:32:46,720
and have it exit immediately

00:32:50,159 --> 00:32:53,760
the slides will be posted

00:32:54,799 --> 00:32:59,600
i believe that the oss the conference

00:32:58,240 --> 00:33:03,039
has been collecting slides

00:32:59,600 --> 00:33:04,480
um often i will double check that those

00:33:03,039 --> 00:33:05,679
are going to be publicly shared but i

00:33:04,480 --> 00:33:11,279
will be uploading them

00:33:05,679 --> 00:33:14,159
after this talk um

00:33:11,279 --> 00:33:16,159
okay uh another question can i use this

00:33:14,159 --> 00:33:17,919
to create resources in aws

00:33:16,159 --> 00:33:19,519
um or is it just to get information

00:33:17,919 --> 00:33:21,519
about them it's

00:33:19,519 --> 00:33:22,799
currently targeting just get getting

00:33:21,519 --> 00:33:25,840
information around them

00:33:22,799 --> 00:33:28,960
and more kind of operational interaction

00:33:25,840 --> 00:33:29,679
um one of the areas that would be easy

00:33:28,960 --> 00:33:32,880
to add is

00:33:29,679 --> 00:33:32,880
the ability to edit

00:33:33,120 --> 00:33:36,880
configurations of something that already

00:33:34,640 --> 00:33:39,039
exists

00:33:36,880 --> 00:33:41,519
if that's a fairly common pattern

00:33:39,039 --> 00:33:44,799
already for kubernetes resources

00:33:41,519 --> 00:33:46,720
um uh one of the next things i do want

00:33:44,799 --> 00:33:49,519
to add is creating

00:33:46,720 --> 00:33:51,360
new things ideal initially focused

00:33:49,519 --> 00:33:52,880
around files and folders

00:33:51,360 --> 00:33:54,880
to make it easier to copy stuff around

00:33:52,880 --> 00:33:58,080
between different systems

00:33:54,880 --> 00:33:59,279
but we're going to that design should be

00:33:58,080 --> 00:34:02,159
broad enough to

00:33:59,279 --> 00:34:02,640
handle different resources it may not

00:34:02,159 --> 00:34:04,080
make

00:34:02,640 --> 00:34:06,080
provide an easy interface because

00:34:04,080 --> 00:34:07,200
there's a lot of there's a lot of

00:34:06,080 --> 00:34:09,919
parameters

00:34:07,200 --> 00:34:11,200
that are unique to each of those systems

00:34:09,919 --> 00:34:12,639
um

00:34:11,200 --> 00:34:14,960
one thing i'd be that would be

00:34:12,639 --> 00:34:16,879
interesting to explore is having

00:34:14,960 --> 00:34:18,000
really there's some simple defaults for

00:34:16,879 --> 00:34:21,200
people that just want to spin up

00:34:18,000 --> 00:34:24,240
something uh

00:34:21,200 --> 00:34:26,720
that is that they're using and plan to

00:34:24,240 --> 00:34:26,720
throw away

00:34:32,839 --> 00:34:35,839
um

00:34:46,839 --> 00:34:49,839
okay

00:35:14,839 --> 00:35:17,920
gun

00:35:16,480 --> 00:35:20,400
i don't think i see any more questions

00:35:17,920 --> 00:35:20,400
at the moment

00:35:27,440 --> 00:35:30,960
there was one about whether wash is more

00:35:29,280 --> 00:35:31,520
like a shell for the cloud services like

00:35:30,960 --> 00:35:36,320
easy two

00:35:31,520 --> 00:35:37,680
s3 containers etc um that is a

00:35:36,320 --> 00:35:39,440
i'm not sure i fully understand the

00:35:37,680 --> 00:35:41,680
question

00:35:39,440 --> 00:35:42,480
it is that but i think as i said at the

00:35:41,680 --> 00:35:46,079
beginning of the talk

00:35:42,480 --> 00:35:46,720
it's uh it's designed around a plug-in

00:35:46,079 --> 00:35:48,880
framework

00:35:46,720 --> 00:35:48,880
that

00:35:49,760 --> 00:35:54,800
tries to be useful

00:35:52,960 --> 00:35:56,640
when interacting with anything driven by

00:35:54,800 --> 00:35:58,960
an api

00:35:56,640 --> 00:36:00,400
so one way of thinking about this is a

00:35:58,960 --> 00:36:04,720
pattern for

00:36:00,400 --> 00:36:04,720
um creating

00:36:05,900 --> 00:36:13,359
[Music]

00:36:07,760 --> 00:36:16,800
for being able to quickly

00:36:13,359 --> 00:36:18,640
adapt these tools like wash for browsing

00:36:16,800 --> 00:36:20,320
um resources that are represented by an

00:36:18,640 --> 00:36:22,240
api

00:36:20,320 --> 00:36:23,680
so rather than having to go curl it and

00:36:22,240 --> 00:36:27,040
all that it's

00:36:23,680 --> 00:36:30,400
a short step to build a plug-in that

00:36:27,040 --> 00:36:32,400
um brings a bunch of um

00:36:30,400 --> 00:36:34,560
a bunch of extra capabilities like being

00:36:32,400 --> 00:36:38,560
able to navigate around it

00:36:34,560 --> 00:36:38,560
use your own tools to browse it and edit

00:36:38,839 --> 00:36:43,520
things

00:36:40,560 --> 00:36:46,240
and the be able to use a find as a query

00:36:43,520 --> 00:36:46,240
language over it

00:36:49,200 --> 00:36:55,119
um so another question any thoughts on

00:36:53,359 --> 00:36:57,920
how configuration management can be done

00:36:55,119 --> 00:36:57,920
or implemented

00:36:59,119 --> 00:37:01,760
i think it's

00:37:03,680 --> 00:37:06,720
i'm not really trying to make it a

00:37:05,200 --> 00:37:09,359
configuration management tool

00:37:06,720 --> 00:37:10,560
it is orthogonal to something like

00:37:09,359 --> 00:37:14,320
terraform

00:37:10,560 --> 00:37:14,320
at the moment uh

00:37:15,200 --> 00:37:21,680
it's generally

00:37:18,640 --> 00:37:24,960
it's it's more target

00:37:21,680 --> 00:37:27,599
at targeted at filling in

00:37:24,960 --> 00:37:29,040
kind of all the gaps that you might run

00:37:27,599 --> 00:37:32,560
into where you need to go do

00:37:29,040 --> 00:37:32,560
more manual operations

00:37:33,760 --> 00:37:37,839
i think the

00:37:42,480 --> 00:37:46,560
yeah i don't know that it's well suited

00:37:44,079 --> 00:37:48,400
for configuration management per se

00:37:46,560 --> 00:37:50,160
um it does have take some similar

00:37:48,400 --> 00:37:51,280
concepts around abstracting across

00:37:50,160 --> 00:37:54,400
different resources

00:37:51,280 --> 00:37:56,960
but we're targeting different operating

00:37:54,400 --> 00:37:58,160
modes of operation on that then

00:37:56,960 --> 00:38:00,079
primarily creation

00:37:58,160 --> 00:38:01,359
which is what something like creation

00:38:00,079 --> 00:38:03,680
and delete

00:38:01,359 --> 00:38:05,200
updates and deletion which is what

00:38:03,680 --> 00:38:09,760
terraform

00:38:05,200 --> 00:38:09,760
in particular would specialize in

00:38:13,680 --> 00:38:17,200
another question if someone were to use

00:38:15,520 --> 00:38:17,839
wash for navigating kubernetes would you

00:38:17,200 --> 00:38:19,839
need to

00:38:17,839 --> 00:38:21,040
also install the cube cuddle client as

00:38:19,839 --> 00:38:25,119
well separately

00:38:21,040 --> 00:38:27,280
no you will need a config of some sort

00:38:25,119 --> 00:38:28,160
that gives grants you access but it

00:38:27,280 --> 00:38:31,200
doesn't rely

00:38:28,160 --> 00:38:32,800
on cli tools

00:38:31,200 --> 00:38:34,560
any cli tools in particular to be

00:38:32,800 --> 00:38:35,119
installed it's a self-contained binary

00:38:34,560 --> 00:38:38,720
that

00:38:35,119 --> 00:38:41,599
comes with the sdks for those things

00:38:38,720 --> 00:38:41,599
embedded into it

00:38:45,359 --> 00:38:48,160
all right great

00:38:48,400 --> 00:39:01,839
i will be in the slack

00:39:02,720 --> 00:39:04,800

YouTube URL: https://www.youtube.com/watch?v=Gl2sU__lEcI


