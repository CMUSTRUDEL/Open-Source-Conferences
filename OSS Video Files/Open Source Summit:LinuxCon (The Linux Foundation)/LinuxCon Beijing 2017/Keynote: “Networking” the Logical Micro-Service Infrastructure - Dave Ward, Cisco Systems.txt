Title: Keynote: “Networking” the Logical Micro-Service Infrastructure - Dave Ward, Cisco Systems
Publication date: 2017-06-26
Playlist: LinuxCon Beijing 2017
Description: 
	Keynote: “Networking” the Logical Micro-Service Infrastructure [E] - Dave Ward, ‎CTO of Engineering and Chief Architect, Cisco Systems

Cloud adoption is driven by the need to provide fast business response to competitive pressures, changing market conditions. More & more enterprises are realizing their survival depends on focusing their funding, cloud strategy on achieving business agility, fast delivery of applications to market.Cloud native, micro-services based methodology was adopted to speed up delivery of new application features. Still micro-services architecture introduced distributed system challenges where a number of service nodes using multiple logical compute units (containers/VMs) must communicate with each other or to the outside world based on rules specified by devops teams.This presentation discusses how one can bridge the gap between current “infrastructure networking/security” and micro-services logical infrastructure to address their challenges and automate, hide networking & security components.

About Dave Ward
David Ward is CTO of Engineering and Chief Architect at Cisco where he is responsible for leading research and development of new Cisco technologies.Recognized in the industry for his expertise in routing, systems software and network design, he was also one of the chief architects of Cisco's IOS-XR software.
Captions: 
	00:00:00,030 --> 00:00:06,029
thank you all very much I want to follow

00:00:02,639 --> 00:00:08,519
up the last presentation with setting

00:00:06,029 --> 00:00:11,160
the stage of how all of the networking

00:00:08,519 --> 00:00:13,230
open-source projects are are coming

00:00:11,160 --> 00:00:16,410
together inside the Linux Foundation and

00:00:13,230 --> 00:00:19,770
how this affects how we end up in a

00:00:16,410 --> 00:00:22,859
containerized world and so what I want

00:00:19,770 --> 00:00:25,890
to start with is reminding everyone all

00:00:22,859 --> 00:00:27,750
that had to be invented over the last

00:00:25,890 --> 00:00:30,810
seven years as the networking industry

00:00:27,750 --> 00:00:34,500
has come into open source what was just

00:00:30,810 --> 00:00:36,660
discussed in indirect use cases really

00:00:34,500 --> 00:00:39,360
was this orange bubble from service

00:00:36,660 --> 00:00:43,079
orchestration and Sdn to virtualize

00:00:39,360 --> 00:00:46,530
networking what's had to all of Sdn can

00:00:43,079 --> 00:00:48,510
be really defined by that one word that

00:00:46,530 --> 00:00:51,480
says programmability between the two and

00:00:48,510 --> 00:00:52,620
that is something that has spent taken

00:00:51,480 --> 00:00:55,230
years and years for the networking

00:00:52,620 --> 00:00:58,739
industry to build an open-source and

00:00:55,230 --> 00:01:01,530
standardize also moving forward from

00:00:58,739 --> 00:01:03,870
there the incorporation of analytics and

00:01:01,530 --> 00:01:06,060
data Lakes which is now available inside

00:01:03,870 --> 00:01:08,520
the Linux Foundation has come out of

00:01:06,060 --> 00:01:11,369
this but in addition where the industry

00:01:08,520 --> 00:01:13,920
is going is adding a policy layer and

00:01:11,369 --> 00:01:15,180
then a platform for the applications

00:01:13,920 --> 00:01:17,240
including bringing all of these

00:01:15,180 --> 00:01:21,330
networking services into Cloud Foundry

00:01:17,240 --> 00:01:22,830
so let's step through this a bit the

00:01:21,330 --> 00:01:25,409
original notion of software-defined

00:01:22,830 --> 00:01:27,840
networking which really focused just on

00:01:25,409 --> 00:01:30,210
config and provisioning was far too

00:01:27,840 --> 00:01:32,640
simplistic for what we really needed to

00:01:30,210 --> 00:01:34,680
do in the network and we realized that

00:01:32,640 --> 00:01:36,960
there was no notion of resource

00:01:34,680 --> 00:01:39,630
management no notion of endpoints or

00:01:36,960 --> 00:01:43,200
computers involved in this and creating

00:01:39,630 --> 00:01:44,909
virtual overlays is necessary but not

00:01:43,200 --> 00:01:47,939
sufficient for what we need to do in the

00:01:44,909 --> 00:01:49,710
network what we need to what we needed

00:01:47,939 --> 00:01:54,000
to add and what was then added through a

00:01:49,710 --> 00:01:55,979
project called panda IO was this

00:01:54,000 --> 00:01:58,649
analytics framework to take the

00:01:55,979 --> 00:02:02,219
telemetry and data coming out of compute

00:01:58,649 --> 00:02:04,439
network storage and security bring this

00:02:02,219 --> 00:02:06,060
into a data Lake which could those

00:02:04,439 --> 00:02:09,179
events could then be correlated to

00:02:06,060 --> 00:02:09,729
trigger other events inside the Sdn

00:02:09,179 --> 00:02:13,510
world

00:02:09,729 --> 00:02:16,000
and so really what this comes down to is

00:02:13,510 --> 00:02:18,610
that all of operational state of

00:02:16,000 --> 00:02:21,190
networking and of compute had to change

00:02:18,610 --> 00:02:23,830
and you've seen this with the change

00:02:21,190 --> 00:02:27,640
away from legacy polling mechanisms

00:02:23,830 --> 00:02:30,760
inside networking to the the pushing of

00:02:27,640 --> 00:02:33,010
this data in real time directly into

00:02:30,760 --> 00:02:34,660
that data lake and in some that's what

00:02:33,010 --> 00:02:41,130
the networking industry refers to as

00:02:34,660 --> 00:02:43,239
telemetry this catalyzed the Panda IO

00:02:41,130 --> 00:02:45,250
organization and community inside the

00:02:43,239 --> 00:02:47,829
Linux Foundation and that is now a

00:02:45,250 --> 00:02:49,690
project with an Opie NFV and soon to be

00:02:47,829 --> 00:02:51,190
a project with an own app and that

00:02:49,690 --> 00:02:55,180
orchestration piece and I'll show you

00:02:51,190 --> 00:02:57,579
that shortly but what's interesting is

00:02:55,180 --> 00:02:59,590
that Software Defined Networking is

00:02:57,579 --> 00:03:03,730
bigger than config and provisioning and

00:02:59,590 --> 00:03:05,440
bigger than data analytics itself it has

00:03:03,730 --> 00:03:09,310
to have end to end resource management

00:03:05,440 --> 00:03:11,489
and the point really is is that today

00:03:09,310 --> 00:03:16,109
and scheduler frameworks and

00:03:11,489 --> 00:03:20,170
orchestration frameworks at best we can

00:03:16,109 --> 00:03:22,560
perform compute and still end to compute

00:03:20,170 --> 00:03:24,940
and storage scheduling but there's no

00:03:22,560 --> 00:03:27,700
optimization of that scheduling for

00:03:24,940 --> 00:03:29,650
compute networking and storage and so

00:03:27,700 --> 00:03:31,389
for that effective service placement or

00:03:29,650 --> 00:03:34,030
effective container placement or

00:03:31,389 --> 00:03:37,090
collective hypervisor placement these

00:03:34,030 --> 00:03:40,319
pieces need to be optimized together and

00:03:37,090 --> 00:03:44,130
it's been impossible to date to do that

00:03:40,319 --> 00:03:47,500
so what we've what we've done on top of

00:03:44,130 --> 00:03:50,920
panda is use machine learning algorithms

00:03:47,500 --> 00:03:52,840
but instead of just talking about the

00:03:50,920 --> 00:03:55,239
type of models that are used what we've

00:03:52,840 --> 00:03:57,579
what we've realized is mechanistic

00:03:55,239 --> 00:04:00,760
models of the network of compute of

00:03:57,579 --> 00:04:03,190
storage and security are impossible to

00:04:00,760 --> 00:04:05,079
create with any accuracy and so this is

00:04:03,190 --> 00:04:08,169
how stochastic and differential machine

00:04:05,079 --> 00:04:11,169
learning algorithms which are observing

00:04:08,169 --> 00:04:13,810
and analyzing how the relationship of

00:04:11,169 --> 00:04:16,479
the applications are occurring and make

00:04:13,810 --> 00:04:19,180
it an including traffic aware awareness

00:04:16,479 --> 00:04:20,859
into the analytics is optimizing that

00:04:19,180 --> 00:04:23,110
the placement of those workloads and

00:04:20,859 --> 00:04:24,969
we're seeing up to 30 percent gain

00:04:23,110 --> 00:04:26,740
the efficiency of the data center

00:04:24,969 --> 00:04:28,180
equipment whether it's an accord

00:04:26,740 --> 00:04:31,500
architecture or an enterprise

00:04:28,180 --> 00:04:34,599
application architecture based upon that

00:04:31,500 --> 00:04:36,370
learned placement optimization by

00:04:34,599 --> 00:04:41,139
looking at compute networking and

00:04:36,370 --> 00:04:44,949
storage together but also what's

00:04:41,139 --> 00:04:47,349
interesting is that creating an Sdn

00:04:44,949 --> 00:04:49,719
controlled network getting the data out

00:04:47,349 --> 00:04:52,300
of the network creating a feedback loop

00:04:49,719 --> 00:04:54,240
between these pieces is what's been

00:04:52,300 --> 00:04:56,919
worked on over the last couple of years

00:04:54,240 --> 00:04:59,379
but that still doesn't build the service

00:04:56,919 --> 00:05:02,889
that's necessary what's missing is

00:04:59,379 --> 00:05:05,050
identity and the policy to drive the

00:05:02,889 --> 00:05:07,150
micro segmentation and the service

00:05:05,050 --> 00:05:09,310
chains to be created inside that data

00:05:07,150 --> 00:05:13,479
center or inside that chord architecture

00:05:09,310 --> 00:05:16,689
that we just heard about and so using

00:05:13,479 --> 00:05:18,520
identity as an input variable is now one

00:05:16,689 --> 00:05:21,159
of the newest things that's been added

00:05:18,520 --> 00:05:23,439
into this orchestration architecture and

00:05:21,159 --> 00:05:26,379
as a part of the own app architecture at

00:05:23,439 --> 00:05:29,379
the Linux Foundation really the identity

00:05:26,379 --> 00:05:31,750
is not necessarily just trying to focus

00:05:29,379 --> 00:05:34,449
on are we using a certain address for

00:05:31,750 --> 00:05:37,080
the device or its cellular identifier or

00:05:34,449 --> 00:05:40,210
its IP address but really it's a

00:05:37,080 --> 00:05:45,460
multivariate normal ization

00:05:40,210 --> 00:05:49,419
of user devices geolocation networks

00:05:45,460 --> 00:05:52,449
apology location time of day etc that

00:05:49,419 --> 00:05:55,240
come together to define the identity of

00:05:52,449 --> 00:05:57,490
that user that application when you have

00:05:55,240 --> 00:06:00,219
identity and can add this into it you

00:05:57,490 --> 00:06:02,400
can then start to orchestrate the micro

00:06:00,219 --> 00:06:05,169
segments from a wireless access point or

00:06:02,400 --> 00:06:07,889
from a data center interconnect router

00:06:05,169 --> 00:06:10,659
the micro services across that network

00:06:07,889 --> 00:06:12,580
linked to a specific service chain for

00:06:10,659 --> 00:06:16,990
all the devices associated with a

00:06:12,580 --> 00:06:19,089
particular user the in the networking

00:06:16,990 --> 00:06:21,939
world there's been a large conversation

00:06:19,089 --> 00:06:24,550
about the use of micro segmentation to

00:06:21,939 --> 00:06:26,770
across the win across the edge and in

00:06:24,550 --> 00:06:30,069
the data center but without identity

00:06:26,770 --> 00:06:32,680
there's nothing to drive the linkage of

00:06:30,069 --> 00:06:34,160
a user to the applications or a user to

00:06:32,680 --> 00:06:37,640
those services

00:06:34,160 --> 00:06:40,250
except for IT and direct operator and

00:06:37,640 --> 00:06:42,800
administrator control by adding in

00:06:40,250 --> 00:06:48,170
identity and policy you can now create a

00:06:42,800 --> 00:06:50,840
much larger self-driving system so this

00:06:48,170 --> 00:06:54,350
also is what's believed to be the path

00:06:50,840 --> 00:06:55,990
using open ID an open source community

00:06:54,350 --> 00:06:58,100
and compass or project in community

00:06:55,990 --> 00:07:01,190
linking that into the orchestration

00:06:58,100 --> 00:07:04,370
framework is how we can rapidly onboard

00:07:01,190 --> 00:07:06,620
the the Internet of Things all those

00:07:04,370 --> 00:07:09,800
devices that are going to be attached to

00:07:06,620 --> 00:07:12,350
the network without requiring other user

00:07:09,800 --> 00:07:15,970
onboarding and allowing for automatic

00:07:12,350 --> 00:07:19,100
bootstrapping of the system itself that

00:07:15,970 --> 00:07:21,470
by understanding the device and its role

00:07:19,100 --> 00:07:23,810
in the network the security micro

00:07:21,470 --> 00:07:27,040
segments or the security policy can be

00:07:23,810 --> 00:07:33,080
directly applied to those devices to

00:07:27,040 --> 00:07:35,960
bind these together the emergence of a

00:07:33,080 --> 00:07:38,690
policy engine needs to occur many policy

00:07:35,960 --> 00:07:40,780
engines exist in the network today but

00:07:38,690 --> 00:07:44,330
none of them on top of an Sdn

00:07:40,780 --> 00:07:46,910
orchestrated control and really what

00:07:44,330 --> 00:07:50,060
this means is that as there is an

00:07:46,910 --> 00:07:51,980
enterprise IT function and as devices

00:07:50,060 --> 00:07:54,560
and users are on boarded onto the

00:07:51,980 --> 00:07:56,660
network then the policy can be pushed

00:07:54,560 --> 00:07:58,310
into the Sdn controller and into the

00:07:56,660 --> 00:08:01,340
network and into the application

00:07:58,310 --> 00:08:03,350
services themselves this also ends up

00:08:01,340 --> 00:08:05,060
driving the analytics to be associated

00:08:03,350 --> 00:08:06,560
with the policy of course and with the

00:08:05,060 --> 00:08:10,610
user and the binding of these pieces

00:08:06,560 --> 00:08:12,350
together this block has just emerged

00:08:10,610 --> 00:08:15,200
inside own app inside the Linux

00:08:12,350 --> 00:08:18,020
Foundation as well but again overall

00:08:15,200 --> 00:08:20,630
driving these all the network services

00:08:18,020 --> 00:08:24,790
and application placement doesn't exist

00:08:20,630 --> 00:08:27,530
yet what you can get when you do this

00:08:24,790 --> 00:08:29,210
ends up becoming all new ways of

00:08:27,530 --> 00:08:30,830
orchestrating a network and

00:08:29,210 --> 00:08:33,590
orchestrating the services on the

00:08:30,830 --> 00:08:38,030
network so you're able to see when

00:08:33,590 --> 00:08:40,760
associating users network stored objects

00:08:38,030 --> 00:08:43,160
and applications are actually security

00:08:40,760 --> 00:08:45,730
violations if an individual is not

00:08:43,160 --> 00:08:47,990
supposed to be able to decrypt a

00:08:45,730 --> 00:08:52,940
critical financial document in this

00:08:47,990 --> 00:08:56,959
case and so what this turns into is in

00:08:52,940 --> 00:08:59,000
fact a policy language that can be

00:08:56,959 --> 00:09:02,300
written in human readable form as you

00:08:59,000 --> 00:09:05,930
can see here where the finance team can

00:09:02,300 --> 00:09:09,860
only access secure documents when on

00:09:05,930 --> 00:09:11,779
campus in previous incarnations of SDN

00:09:09,860 --> 00:09:14,270
and networking this is all done through

00:09:11,779 --> 00:09:16,100
address management now it can be done

00:09:14,270 --> 00:09:20,720
through binding and onboarding of the

00:09:16,100 --> 00:09:22,250
users onboarding of of the documents or

00:09:20,720 --> 00:09:25,730
of applications or of services

00:09:22,250 --> 00:09:27,980
themselves and lending itself towards

00:09:25,730 --> 00:09:29,630
again a human readable way of expressing

00:09:27,980 --> 00:09:31,839
what you want to have happen on the

00:09:29,630 --> 00:09:35,240
network

00:09:31,839 --> 00:09:37,760
so when we take a look again at this we

00:09:35,240 --> 00:09:40,399
love what has to be invented or and what

00:09:37,760 --> 00:09:44,510
has been invented we've done well with

00:09:40,399 --> 00:09:48,110
Sdn orchestration is emerging virtual

00:09:44,510 --> 00:09:51,890
networking with FDA FDI oh or phyto is

00:09:48,110 --> 00:09:53,600
their analytics has come through and the

00:09:51,890 --> 00:09:56,360
policy management for resource

00:09:53,600 --> 00:09:58,970
allocation and optimization and binding

00:09:56,360 --> 00:10:01,100
of identity is what's emerging next in

00:09:58,970 --> 00:10:06,950
the networking side of the Linux

00:10:01,100 --> 00:10:10,550
Foundation and orchestration so changing

00:10:06,950 --> 00:10:12,290
topics a bit the previous talk and and

00:10:10,550 --> 00:10:14,089
what what you've seen inside the Linux

00:10:12,290 --> 00:10:16,700
Foundation to date has been all about

00:10:14,089 --> 00:10:19,490
the orchestration of hypervisors and in

00:10:16,700 --> 00:10:22,190
some cases bare-metal as well but as we

00:10:19,490 --> 00:10:24,589
know containerized services are rapidly

00:10:22,190 --> 00:10:27,620
emerging in the industry it allows

00:10:24,589 --> 00:10:29,510
towards optimal componentization and and

00:10:27,620 --> 00:10:32,329
second and breaking up of the

00:10:29,510 --> 00:10:34,459
application suite but it leads itself

00:10:32,329 --> 00:10:35,750
towards very large challenges in the

00:10:34,459 --> 00:10:40,160
networking world and I want to discuss

00:10:35,750 --> 00:10:43,220
with those with you next so as has been

00:10:40,160 --> 00:10:44,959
discussed in the industry the movement

00:10:43,220 --> 00:10:47,540
the changing development process

00:10:44,959 --> 00:10:50,120
application architecture deployment and

00:10:47,540 --> 00:10:53,240
packaging and the infrastructure around

00:10:50,120 --> 00:10:54,860
it has changed really completely in the

00:10:53,240 --> 00:10:56,980
industry and everyone in the room is

00:10:54,860 --> 00:10:59,180
well aware of this and in particular

00:10:56,980 --> 00:11:01,520
front all the way from trying to do

00:10:59,180 --> 00:11:01,880
DevOps work all the way into a notion of

00:11:01,520 --> 00:11:04,250
server

00:11:01,880 --> 00:11:07,070
this computing and and for me that would

00:11:04,250 --> 00:11:11,360
be edge computing fog computing or or

00:11:07,070 --> 00:11:12,980
use of very very large data centers but

00:11:11,360 --> 00:11:17,120
what this looks like when looking at the

00:11:12,980 --> 00:11:19,910
networking side of it is in fact a very

00:11:17,120 --> 00:11:22,100
very diverse set of communication that

00:11:19,910 --> 00:11:24,410
does not look like a service chain it

00:11:22,100 --> 00:11:27,520
looks like full communication full mesh

00:11:24,410 --> 00:11:31,310
communication between containers and

00:11:27,520 --> 00:11:33,890
expressing the networking policy for

00:11:31,310 --> 00:11:37,190
containers in a traditional service

00:11:33,890 --> 00:11:39,320
chain architecture will not work and so

00:11:37,190 --> 00:11:43,040
there's a massive amount of work that

00:11:39,320 --> 00:11:44,930
needs to Inc sorry be created inside the

00:11:43,040 --> 00:11:48,170
cloud networking foundation inside

00:11:44,930 --> 00:11:50,510
kubernetes inside networking domains as

00:11:48,170 --> 00:11:53,480
well so it can be expressed all the way

00:11:50,510 --> 00:11:58,790
to the pass layer in communities like

00:11:53,480 --> 00:12:00,470
Cloud Foundry so my point here is really

00:11:58,790 --> 00:12:04,520
that the way that the networking world

00:12:00,470 --> 00:12:07,000
has viewed creating networking services

00:12:04,520 --> 00:12:09,800
and virtualized network functions is

00:12:07,000 --> 00:12:10,880
really directly analogous to a

00:12:09,800 --> 00:12:14,690
three-tiered

00:12:10,880 --> 00:12:17,150
application architecture where a service

00:12:14,690 --> 00:12:19,460
chain is created hypervisors are

00:12:17,150 --> 00:12:21,170
launched and policies are placed in

00:12:19,460 --> 00:12:23,780
between those that's a classic

00:12:21,170 --> 00:12:26,150
three-tier architecture but that

00:12:23,780 --> 00:12:31,250
three-tier architecture just doesn't

00:12:26,150 --> 00:12:34,250
work in a mesh like this and so stepping

00:12:31,250 --> 00:12:38,030
this forward we have to remember that

00:12:34,250 --> 00:12:40,160
policy binds identity to those services

00:12:38,030 --> 00:12:43,190
and what's really changing in the stack

00:12:40,160 --> 00:12:46,460
is that as applications are being

00:12:43,190 --> 00:12:49,220
launched the rules of the policy need to

00:12:46,460 --> 00:12:52,490
be pushed with intent into the stack

00:12:49,220 --> 00:12:54,890
itself versus having the infrastructure

00:12:52,490 --> 00:12:58,190
hold the policy and applications are

00:12:54,890 --> 00:13:00,610
placed into it as easy as that is for me

00:12:58,190 --> 00:13:04,790
to say that is a fundamentally different

00:13:00,610 --> 00:13:06,080
mode of building a stack than we've done

00:13:04,790 --> 00:13:08,060
in the networking world and in the

00:13:06,080 --> 00:13:13,010
infrastructure world and that becomes

00:13:08,060 --> 00:13:15,460
that that itself is the challenge and so

00:13:13,010 --> 00:13:19,160
to create this application control

00:13:15,460 --> 00:13:21,860
during application composition as we

00:13:19,160 --> 00:13:23,780
know with the OCI framework you start

00:13:21,860 --> 00:13:26,510
describing the application in the rules

00:13:23,780 --> 00:13:29,810
necessary for that application that

00:13:26,510 --> 00:13:31,880
becomes a policy source of when you go

00:13:29,810 --> 00:13:34,550
to launch or execute those containers

00:13:31,880 --> 00:13:36,260
the the rules flow into it and I'll

00:13:34,550 --> 00:13:38,510
describe this a bit more in the stack in

00:13:36,260 --> 00:13:41,090
just a second but the fundamental change

00:13:38,510 --> 00:13:43,010
of the application has metadata and

00:13:41,090 --> 00:13:45,530
rules associated with it to be driven

00:13:43,010 --> 00:13:47,270
with intent into the infrastructure is a

00:13:45,530 --> 00:13:49,580
fundamentally different architecture

00:13:47,270 --> 00:13:53,090
than the than the service chain that I

00:13:49,580 --> 00:13:56,180
just showed so what are we doing about

00:13:53,090 --> 00:13:58,540
this inside the Linux Foundation there

00:13:56,180 --> 00:14:02,060
are a number of projects as you can see

00:13:58,540 --> 00:14:04,130
really that have emerged very recently

00:14:02,060 --> 00:14:06,350
at the different layers of the stack as

00:14:04,130 --> 00:14:09,290
they as they look in an IT

00:14:06,350 --> 00:14:11,060
infrastructure stack from or from

00:14:09,290 --> 00:14:13,340
orchestrating configuring the hardware

00:14:11,060 --> 00:14:15,590
all the way up to the pass layer with

00:14:13,340 --> 00:14:17,270
Cloud Foundry and this is one way of

00:14:15,590 --> 00:14:20,510
representing how those projects come

00:14:17,270 --> 00:14:22,760
together when we take a look at this

00:14:20,510 --> 00:14:26,510
with one particular use case and instead

00:14:22,760 --> 00:14:29,720
of looking at the mobility cord case I'm

00:14:26,510 --> 00:14:32,240
actually showing here a video video

00:14:29,720 --> 00:14:34,400
workload or video service case we have

00:14:32,240 --> 00:14:38,110
to realize that the stacks on the

00:14:34,400 --> 00:14:41,600
previous slide that get built out

00:14:38,110 --> 00:14:43,970
actually get directly represented just

00:14:41,600 --> 00:14:45,650
written a little differently into this

00:14:43,970 --> 00:14:48,200
case as well what are the resources

00:14:45,650 --> 00:14:50,540
what's the physical topology etc there's

00:14:48,200 --> 00:14:53,450
been a lot of discussion and we have to

00:14:50,540 --> 00:14:56,270
realize that every line between each of

00:14:53,450 --> 00:14:58,550
these elements requires some config and

00:14:56,270 --> 00:15:02,840
provisioning as well as analytics coming

00:14:58,550 --> 00:15:05,390
out of it but the goal of own app and

00:15:02,840 --> 00:15:07,910
the goal of OPN MV and the goal of all

00:15:05,390 --> 00:15:10,880
the work we've done in networking inside

00:15:07,910 --> 00:15:14,210
the Linux Foundation is to remove the

00:15:10,880 --> 00:15:16,100
complexity below that red line because

00:15:14,210 --> 00:15:17,960
what I'm trying to say is that the

00:15:16,100 --> 00:15:20,090
notion that's been discussed in the

00:15:17,960 --> 00:15:23,240
industry of the whole stack developer is

00:15:20,090 --> 00:15:25,010
in fact a fallacy the goal of what we're

00:15:23,240 --> 00:15:27,100
trying to do in all this infrastructure

00:15:25,010 --> 00:15:29,760
is in fact a no stack tavella

00:15:27,100 --> 00:15:33,730
in which everything below the red line

00:15:29,760 --> 00:15:35,740
becomes intent driven networking with

00:15:33,730 --> 00:15:38,740
the rules passed from the application on

00:15:35,740 --> 00:15:40,330
top and we have quite a ways to go but

00:15:38,740 --> 00:15:41,920
the goal is to really remove the

00:15:40,330 --> 00:15:44,920
complexity of this part of the network

00:15:41,920 --> 00:15:46,779
and this part of the IT stack from from

00:15:44,920 --> 00:15:52,690
an application developer and from an

00:15:46,779 --> 00:15:55,209
operator so to show the difference

00:15:52,690 --> 00:15:58,720
between this you can see the classic

00:15:55,209 --> 00:16:01,000
VMware stack or a VM stack on the on the

00:15:58,720 --> 00:16:02,769
left hand side or the right hand side

00:16:01,000 --> 00:16:05,019
and you can see the classic container

00:16:02,769 --> 00:16:07,029
stack on the left hand side here and

00:16:05,019 --> 00:16:09,130
what's really interesting about this is

00:16:07,029 --> 00:16:11,200
the separation of lifecycle management

00:16:09,130 --> 00:16:15,070
from policy and management on the top

00:16:11,200 --> 00:16:17,640
and in the in the classic VM based stack

00:16:15,070 --> 00:16:20,589
and looking at OPN FV in this case

00:16:17,640 --> 00:16:23,320
really it shows that the policy point in

00:16:20,589 --> 00:16:25,120
the middle is opendaylight and on the

00:16:23,320 --> 00:16:28,630
left hand side what's interesting is

00:16:25,120 --> 00:16:30,640
that there is no policy point yet

00:16:28,630 --> 00:16:32,770
available and I show one open one

00:16:30,640 --> 00:16:34,570
open-source project called conceived and

00:16:32,770 --> 00:16:37,240
there are several other open-source

00:16:34,570 --> 00:16:40,329
projects in the space but that policy

00:16:37,240 --> 00:16:43,990
point becomes the way that compute

00:16:40,329 --> 00:16:46,480
network storage and security end up

00:16:43,990 --> 00:16:49,390
getting optimized together and that

00:16:46,480 --> 00:16:53,440
doesn't exist as a uniform way inside

00:16:49,390 --> 00:16:56,560
the container stack today and what this

00:16:53,440 --> 00:17:00,790
enables us to do underneath then is to

00:16:56,560 --> 00:17:03,850
use projects like Fido forwarding plane

00:17:00,790 --> 00:17:06,010
running in user space and have that be

00:17:03,850 --> 00:17:08,260
configured and operated at the pace of

00:17:06,010 --> 00:17:14,589
the applications that are happening

00:17:08,260 --> 00:17:16,689
within kubernetes for example as this

00:17:14,589 --> 00:17:20,650
comes together inside the Linux

00:17:16,689 --> 00:17:22,589
Foundation there's a number of different

00:17:20,650 --> 00:17:25,480
elements that are being worked on

00:17:22,589 --> 00:17:27,429
towards building out this stack and

00:17:25,480 --> 00:17:29,980
these are those these are some of those

00:17:27,429 --> 00:17:32,140
open source projects and this actually

00:17:29,980 --> 00:17:35,470
has been built together and was shown at

00:17:32,140 --> 00:17:36,940
the a NGA conference just just about a

00:17:35,470 --> 00:17:40,120
month ago

00:17:36,940 --> 00:17:42,640
building out the networking

00:17:40,120 --> 00:17:44,559
pieces as if it was a generic

00:17:42,640 --> 00:17:46,870
application in a container based stack

00:17:44,559 --> 00:17:49,480
but a number of these pieces had to come

00:17:46,870 --> 00:17:52,720
together the policy piece had to be

00:17:49,480 --> 00:17:55,300
built a net plug in on top of phyto had

00:17:52,720 --> 00:17:57,910
to be built and these are now all open

00:17:55,300 --> 00:18:01,780
sourced again in experimentation towards

00:17:57,910 --> 00:18:04,360
driving and building a active networking

00:18:01,780 --> 00:18:06,550
stack as part of the container ecosystem

00:18:04,360 --> 00:18:10,809
to be able to deploy these applications

00:18:06,550 --> 00:18:13,140
readily so when we take a look at these

00:18:10,809 --> 00:18:15,870
different open source solution

00:18:13,140 --> 00:18:19,059
components we have to realize that

00:18:15,870 --> 00:18:23,440
looking down from the top now at cloud

00:18:19,059 --> 00:18:25,960
foundry there is no tie-in Diego or in

00:18:23,440 --> 00:18:29,710
Bosh to the networking pieces below and

00:18:25,960 --> 00:18:31,690
so how can we get a notion of the rules

00:18:29,710 --> 00:18:33,970
that we want to drive all the way from

00:18:31,690 --> 00:18:36,940
the pad layer to be driven through that

00:18:33,970 --> 00:18:39,400
infrastructure and so Cloud Foundry has

00:18:36,940 --> 00:18:41,590
picked up the notion of OCI and picked

00:18:39,400 --> 00:18:44,590
up CNI and a number of other open-source

00:18:41,590 --> 00:18:47,400
projects within its architecture to be

00:18:44,590 --> 00:18:50,050
able to start to move towards this

00:18:47,400 --> 00:18:51,910
architecture that I'm describing which

00:18:50,050 --> 00:18:54,250
is the rules go with the application

00:18:51,910 --> 00:18:56,860
that get driven into the overall stack

00:18:54,250 --> 00:18:59,500
and it allows virtualized functions

00:18:56,860 --> 00:19:02,380
either running on bare metal hypervisor

00:18:59,500 --> 00:19:05,800
or containers to be fully orchestrated

00:19:02,380 --> 00:19:08,440
across compute networking storage and

00:19:05,800 --> 00:19:10,570
security that's the overall goal for

00:19:08,440 --> 00:19:14,920
which we have quite quite a bit of work

00:19:10,570 --> 00:19:16,570
to do nonetheless a number of these

00:19:14,920 --> 00:19:21,490
projects are working very closely

00:19:16,570 --> 00:19:23,410
together and one is onap and opie NFV as

00:19:21,490 --> 00:19:27,130
I mentioned and as was mentioned in the

00:19:23,410 --> 00:19:28,950
previous talk the components of onap on

00:19:27,130 --> 00:19:31,710
top which performs management

00:19:28,950 --> 00:19:35,080
orchestration and design of a service

00:19:31,710 --> 00:19:37,809
can be built on top of technically opie

00:19:35,080 --> 00:19:42,100
NFV which then can config provision and

00:19:37,809 --> 00:19:43,510
provide analytics for that in for the

00:19:42,100 --> 00:19:46,929
infrastructure and for the services

00:19:43,510 --> 00:19:49,360
being deployed and thankfully a number

00:19:46,929 --> 00:19:51,280
of these projects coming together and in

00:19:49,360 --> 00:19:53,280
this case what was proposed last week at

00:19:51,280 --> 00:19:54,420
the opie NFV summit

00:19:53,280 --> 00:19:57,180
that there's a cross community

00:19:54,420 --> 00:19:59,580
infrastructure an ability to test out

00:19:57,180 --> 00:20:01,290
this interest test out this entire piece

00:19:59,580 --> 00:20:05,880
moving forward and so that was a

00:20:01,290 --> 00:20:10,250
fantastic outcome last week as we take a

00:20:05,880 --> 00:20:13,020
look at how onap open networking

00:20:10,250 --> 00:20:16,020
automation project is moving forward

00:20:13,020 --> 00:20:19,230
these are all the components of that

00:20:16,020 --> 00:20:21,960
piece and this is being able to enable

00:20:19,230 --> 00:20:24,240
companies like China Unicom to be able

00:20:21,960 --> 00:20:27,900
to build their core architecture over

00:20:24,240 --> 00:20:30,540
time and continue to add identity policy

00:20:27,900 --> 00:20:32,700
analytics and even billing as a piece of

00:20:30,540 --> 00:20:35,850
this but these are all the pieces that

00:20:32,700 --> 00:20:41,370
need to come together what's being

00:20:35,850 --> 00:20:42,960
proposed is evolving own app to take on

00:20:41,370 --> 00:20:46,080
the some of these new elements and

00:20:42,960 --> 00:20:47,760
projects that I have in red and these

00:20:46,080 --> 00:20:50,460
are some of the projects that are part

00:20:47,760 --> 00:20:52,770
of the first releases of that project

00:20:50,460 --> 00:20:55,290
itself and you can see the good thing

00:20:52,770 --> 00:20:58,500
that you can see here is that a number

00:20:55,290 --> 00:21:01,320
of the networking pieces that have been

00:20:58,500 --> 00:21:03,180
built from Sdn control through the

00:21:01,320 --> 00:21:06,420
protocols through virtual networking

00:21:03,180 --> 00:21:08,400
telemetry analytics are embedded in be

00:21:06,420 --> 00:21:11,940
able to be integrated as a part of this

00:21:08,400 --> 00:21:14,450
overall architecture dcae for example

00:21:11,940 --> 00:21:16,770
which is the analytics engine of own app

00:21:14,450 --> 00:21:19,800
panda is being built in with that as

00:21:16,770 --> 00:21:22,500
well as I mentioned as well as if we can

00:21:19,800 --> 00:21:24,860
bring Opie NFV underneath we then have

00:21:22,500 --> 00:21:28,350
that stack to orchestrate those services

00:21:24,860 --> 00:21:30,270
so where this is heading in the big

00:21:28,350 --> 00:21:32,460
conversation going on in the networking

00:21:30,270 --> 00:21:34,710
community of the Linux Foundation is

00:21:32,460 --> 00:21:37,230
really trying to pull these all together

00:21:34,710 --> 00:21:39,330
underneath an open networking umbrella

00:21:37,230 --> 00:21:41,700
so that way the architecture can come

00:21:39,330 --> 00:21:43,860
together and there aren't necessarily a

00:21:41,700 --> 00:21:46,440
number of competing satellites of

00:21:43,860 --> 00:21:48,840
technology although we we continue to

00:21:46,440 --> 00:21:51,000
foster and desire new approaches to

00:21:48,840 --> 00:21:53,540
solve this problem but that there is a

00:21:51,000 --> 00:21:57,090
stack that actually can be built and

00:21:53,540 --> 00:22:00,110
operated to have the industry on a

00:21:57,090 --> 00:22:03,900
common trajectory to use bare metal

00:22:00,110 --> 00:22:06,330
hypervisors and containers in the same

00:22:03,900 --> 00:22:07,120
orchestrated workflow all with the same

00:22:06,330 --> 00:22:11,310
policy

00:22:07,120 --> 00:22:14,650
including identity associated with it so

00:22:11,310 --> 00:22:15,790
the industries come a very long way and

00:22:14,650 --> 00:22:17,560
the networking industry in particular

00:22:15,790 --> 00:22:19,540
has come a very long way in the last

00:22:17,560 --> 00:22:21,970
five to seven years as it's been working

00:22:19,540 --> 00:22:26,680
not only in standards but now within the

00:22:21,970 --> 00:22:28,090
Linux Foundation we've built a number

00:22:26,680 --> 00:22:30,730
we've built a service lifecycle

00:22:28,090 --> 00:22:32,770
management OPN fe to be able to

00:22:30,730 --> 00:22:35,620
orchestrate the hardware a data platform

00:22:32,770 --> 00:22:37,900
and what's being added to the mix now is

00:22:35,620 --> 00:22:40,840
that linkage of identity of things and

00:22:37,900 --> 00:22:43,300
people to the to compute networking

00:22:40,840 --> 00:22:45,820
storage and security through a policy

00:22:43,300 --> 00:22:48,010
engine across bare-metal hypervisor and

00:22:45,820 --> 00:22:50,050
containers it's been a ton of work

00:22:48,010 --> 00:22:52,180
there's a long way to go the Linux

00:22:50,050 --> 00:22:53,440
Foundation has been paramount in it

00:22:52,180 --> 00:22:55,810
trying and working towards achieving

00:22:53,440 --> 00:22:57,790
these goals and this is where we're

00:22:55,810 --> 00:23:00,390
headed as a networking community so

00:22:57,790 --> 00:23:05,329
thank you very much

00:23:00,390 --> 00:23:05,329

YouTube URL: https://www.youtube.com/watch?v=TJfE3hC60UY


