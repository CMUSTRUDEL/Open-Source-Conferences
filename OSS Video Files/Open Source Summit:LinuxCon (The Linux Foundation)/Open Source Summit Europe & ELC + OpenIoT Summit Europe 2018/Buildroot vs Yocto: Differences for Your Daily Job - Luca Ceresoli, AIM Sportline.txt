Title: Buildroot vs Yocto: Differences for Your Daily Job - Luca Ceresoli, AIM Sportline
Publication date: 2018-10-25
Playlist: Open Source Summit Europe & ELC + OpenIoT Summit Europe 2018
Description: 
	Buildroot vs Yocto: Differences for Your Daily Job - Luca Ceresoli, AIM Sportline

Buildroot and Yocto, the two leading embedded Linux buildsystems, have largely overlapping goals but vastly different implementations.

Perhaps you're familiar with either, and wonder how your daily job would change if you used the other.

Luca will share insights he gained while managing projects with both tools, spending a lot of time in learning how to achieve the same goals in a different way.

He will give a sort of "translation table" to ease the transition between the two, covering: bootstrapping a project, what happens under the hood, invoking the build, customizing the rootfs and tweaking recipes. 

About Luca Ceresoli
Luca Ceresoli is an Embedded Linux Engineer at AIM Sportline. He designed several embedded Linux products from the ground up, mostly hacking around bootloader, kernel, device drivers, system programming, build system and FPGA.
He contributes to a few open-source projects, including the Linux kernel and Buildroot. He has been a speaker at ELC-E and FOSDEM.
Captions: 
	00:00:00,680 --> 00:00:08,370
hi everybody thanks for being here my

00:00:05,609 --> 00:00:09,780
name is Luca chittitalli and as an

00:00:08,370 --> 00:00:12,360
embedded Linux engineer I've been

00:00:09,780 --> 00:00:15,059
working for several years on build root

00:00:12,360 --> 00:00:17,940
in the past getting to know it quite

00:00:15,059 --> 00:00:20,400
well and became a contributor last year

00:00:17,940 --> 00:00:22,310
I moved to a I am support line where I'm

00:00:20,400 --> 00:00:25,289
designing the next generation of

00:00:22,310 --> 00:00:29,160
dashboards data loggers and cameras for

00:00:25,289 --> 00:00:31,920
motorsports and in that company octo was

00:00:29,160 --> 00:00:35,460
being used so I started learned a new

00:00:31,920 --> 00:00:36,960
tool and it was a bigger Ford because

00:00:35,460 --> 00:00:38,670
it's so different from wind route even

00:00:36,960 --> 00:00:41,600
when you have to do pretty much the same

00:00:38,670 --> 00:00:44,430
things so here are the most interesting

00:00:41,600 --> 00:00:46,770
experiences I gather from that in hope

00:00:44,430 --> 00:00:48,420
that they'll be useful for those of you

00:00:46,770 --> 00:00:52,050
who have to switch from one project to

00:00:48,420 --> 00:00:54,840
the other ok so first of all this talk

00:00:52,050 --> 00:00:57,570
is not a tutorial you're not supposed to

00:00:54,840 --> 00:00:59,879
learn the tools now this is not a

00:00:57,570 --> 00:01:02,010
feature comparison to help you choose

00:00:59,879 --> 00:01:05,339
the better product for you if you need

00:01:02,010 --> 00:01:08,369
one there are several there is a talk

00:01:05,339 --> 00:01:10,979
blog entry some articles so check those

00:01:08,369 --> 00:01:15,240
out they are very interesting and those

00:01:10,979 --> 00:01:17,670
are very fair comparisons I think so the

00:01:15,240 --> 00:01:20,280
conclusion of all of them is that both

00:01:17,670 --> 00:01:23,640
tools have advantages and disadvantages

00:01:20,280 --> 00:01:25,350
and even more important each of them is

00:01:23,640 --> 00:01:28,200
better than the other in several

00:01:25,350 --> 00:01:30,750
relevant use cases so this probably the

00:01:28,200 --> 00:01:33,360
reason they still coexist and each of

00:01:30,750 --> 00:01:38,430
them is actively used developed and so

00:01:33,360 --> 00:01:41,820
on so just comparing them on the

00:01:38,430 --> 00:01:44,939
technical side shows one very important

00:01:41,820 --> 00:01:47,610
similarity they both maintain a graph of

00:01:44,939 --> 00:01:49,920
dependencies and use that to build the

00:01:47,610 --> 00:01:53,070
various steps were each step has

00:01:49,920 --> 00:01:56,610
instruction to be to do something on top

00:01:53,070 --> 00:01:58,250
of the with dependencies that's pretty

00:01:56,610 --> 00:02:01,020
much all for the similarities

00:01:58,250 --> 00:02:02,369
technically speaking because they are

00:02:01,020 --> 00:02:06,350
implemented using completely different

00:02:02,369 --> 00:02:09,350
tools built route is built using on

00:02:06,350 --> 00:02:11,569
on top of two big pillars which are the

00:02:09,350 --> 00:02:13,930
K confi configuration system from the

00:02:11,569 --> 00:02:17,420
kernel which you probably already know

00:02:13,930 --> 00:02:19,790
this is used to tell build route what we

00:02:17,420 --> 00:02:23,270
want it to do so to configure it and

00:02:19,790 --> 00:02:26,620
then it it uses the even more well-known

00:02:23,270 --> 00:02:30,800
make tool to do the actual build

00:02:26,620 --> 00:02:33,620
so Yocto is completely different it uses

00:02:30,800 --> 00:02:36,470
a single tool called bitbake which is

00:02:33,620 --> 00:02:41,110
pretty much used only for that purpose I

00:02:36,470 --> 00:02:45,019
think and it is tailored to that use and

00:02:41,110 --> 00:02:47,180
it has its own language it doesn't have

00:02:45,019 --> 00:02:49,489
a real configuration engine so

00:02:47,180 --> 00:02:52,390
configuration happens through source

00:02:49,489 --> 00:02:54,620
files but we'll see more on that later

00:02:52,390 --> 00:02:57,769
another important difference is

00:02:54,620 --> 00:03:02,239
Bitteroot that it's focused on embedded

00:02:57,769 --> 00:03:04,340
Linux devices so most typically they use

00:03:02,239 --> 00:03:07,000
a root filesystem and they read entire

00:03:04,340 --> 00:03:10,820
root filesystem for several huge reasons

00:03:07,000 --> 00:03:13,489
and so what it does is build a kernel

00:03:10,820 --> 00:03:15,320
boot loader a root of s as well as a

00:03:13,489 --> 00:03:19,040
tool chain and so on so it directly been

00:03:15,320 --> 00:03:21,170
through the system Yocto instead is

00:03:19,040 --> 00:03:23,620
meant to build an entire distribution

00:03:21,170 --> 00:03:27,739
and so what it does is it builds

00:03:23,620 --> 00:03:30,530
packages I PKG or AMD PKG whatever and

00:03:27,739 --> 00:03:33,560
you can use those to put them on a

00:03:30,530 --> 00:03:37,220
package feed on a server and devices can

00:03:33,560 --> 00:03:39,350
connect and do things like apt install

00:03:37,220 --> 00:03:42,290
to install packages with dependencies so

00:03:39,350 --> 00:03:45,440
it's really a distribution and actually

00:03:42,290 --> 00:03:48,170
he can also produce the same thing as

00:03:45,440 --> 00:03:49,910
Bitteroot so kernel boot loader to chain

00:03:48,170 --> 00:03:53,720
and most important the root filesystem

00:03:49,910 --> 00:03:56,480
as a sort of byproduct of packages so to

00:03:53,720 --> 00:03:58,640
build a root filesystem it just creates

00:03:56,480 --> 00:04:00,859
an empty directory and installs a list

00:03:58,640 --> 00:04:03,920
of packages into it so this is very

00:04:00,859 --> 00:04:07,760
different this mule of this talk is to

00:04:03,920 --> 00:04:09,920
cover the topics that exist in both file

00:04:07,760 --> 00:04:12,829
in both build systems so I will not talk

00:04:09,920 --> 00:04:14,470
about packages I will talk about the

00:04:12,829 --> 00:04:17,120
root filesystem

00:04:14,470 --> 00:04:21,169
because it's tuned for embedded devices

00:04:17,120 --> 00:04:23,810
tickly and of course I will speak only

00:04:21,169 --> 00:04:27,979
about the topics I have some experience

00:04:23,810 --> 00:04:30,650
with in build systems yet even with

00:04:27,979 --> 00:04:33,080
those limitations the list of topics is

00:04:30,650 --> 00:04:36,169
really huge it will not fit in 40

00:04:33,080 --> 00:04:39,289
minutes so this is these are the topics

00:04:36,169 --> 00:04:41,930
that I covered in my slides so how you

00:04:39,289 --> 00:04:44,210
would drop a project from zero naming

00:04:41,930 --> 00:04:47,780
differences how the two tools name the

00:04:44,210 --> 00:04:52,310
same things in different ways basics on

00:04:47,780 --> 00:04:55,280
writing recipes layers and somewhat

00:04:52,310 --> 00:04:58,190
similar in Beirut building and

00:04:55,280 --> 00:05:01,400
commanding a build understanding what's

00:04:58,190 --> 00:05:03,050
going on under the hood customizing the

00:05:01,400 --> 00:05:03,710
output that is generated especially the

00:05:03,050 --> 00:05:06,110
root filesystem

00:05:03,710 --> 00:05:09,949
and finally a more advanced section on

00:05:06,110 --> 00:05:12,110
working our recipes so I won't be able

00:05:09,949 --> 00:05:14,270
to cover all of them so if you have any

00:05:12,110 --> 00:05:16,280
topic that you're more interested in you

00:05:14,270 --> 00:05:19,849
can raise your hand and ask now so I

00:05:16,280 --> 00:05:22,820
will focus on that mostly okay

00:05:19,849 --> 00:05:25,729
so I'll switch to my default shadow

00:05:22,820 --> 00:05:28,130
which goes mostly on the topics that are

00:05:25,729 --> 00:05:31,370
that at least that were less obvious to

00:05:28,130 --> 00:05:34,550
me to learn okay first thing to set up a

00:05:31,370 --> 00:05:36,590
new project from zero well it's all

00:05:34,550 --> 00:05:38,389
covered in the tutorials and manuals so

00:05:36,590 --> 00:05:40,970
I will go very very quick the main

00:05:38,389 --> 00:05:43,130
difference is build root in the concept

00:05:40,970 --> 00:05:46,190
is you have a unique repo with bid root

00:05:43,130 --> 00:05:49,849
pretty much like the Linux kernel while

00:05:46,190 --> 00:05:51,620
you has several layers so you just learn

00:05:49,849 --> 00:05:54,770
one repository to start working with be

00:05:51,620 --> 00:05:56,720
root with you there is one repo which is

00:05:54,770 --> 00:06:00,039
called pocky which collects the basic

00:05:56,720 --> 00:06:02,770
tools and the most widely used recipes

00:06:00,039 --> 00:06:06,289
so you can use it for a reference design

00:06:02,770 --> 00:06:08,930
for a reference build for like

00:06:06,289 --> 00:06:10,699
BeagleBone black but if you do in a real

00:06:08,930 --> 00:06:13,460
project most likely you will need at

00:06:10,699 --> 00:06:16,010
least the open embedded layer which has

00:06:13,460 --> 00:06:20,030
a huge list of recipes for a lot of

00:06:16,010 --> 00:06:22,969
pieces of software and probably other

00:06:20,030 --> 00:06:26,440
layers will be useful maybe one from

00:06:22,969 --> 00:06:28,960
your system-on-chip vendor maybe one for

00:06:26,440 --> 00:06:31,240
shanell software like cute five or many

00:06:28,960 --> 00:06:35,110
many others you should just go on the

00:06:31,240 --> 00:06:39,430
layer index side see URL there it's very

00:06:35,110 --> 00:06:42,100
useful it has a list of many many layers

00:06:39,430 --> 00:06:46,150
that you can use with all the

00:06:42,100 --> 00:06:47,290
information but them okay so after that

00:06:46,150 --> 00:06:51,220
you have to configure the build system

00:06:47,290 --> 00:06:53,410
to tell you what to do with build route

00:06:51,220 --> 00:06:56,140
you have K config so it you can ask it

00:06:53,410 --> 00:06:58,060
to show the available current default

00:06:56,140 --> 00:07:00,790
configurations which are minimal booting

00:06:58,060 --> 00:07:02,440
completes for many boards you just load

00:07:00,790 --> 00:07:04,330
that configuration and you are ready or

00:07:02,440 --> 00:07:07,120
if you want to start from scratch you

00:07:04,330 --> 00:07:11,610
just enter menu config and the basic you

00:07:07,120 --> 00:07:14,470
have to tell it is the kind of of

00:07:11,610 --> 00:07:18,070
processors who architecture and DNS and

00:07:14,470 --> 00:07:20,740
so on and the torch anyone optionally

00:07:18,070 --> 00:07:22,720
and then you have to tell it where to

00:07:20,740 --> 00:07:25,150
find a working kernel and a working

00:07:22,720 --> 00:07:27,640
bootloader for your target which is

00:07:25,150 --> 00:07:31,060
probably from your system-on-chip vendor

00:07:27,640 --> 00:07:33,010
or mainline and then you have to tell it

00:07:31,060 --> 00:07:35,700
which def configuration to build when we

00:07:33,010 --> 00:07:40,500
enrich the by 3 to build and that's it

00:07:35,700 --> 00:07:43,630
so here's how you configure a kernel

00:07:40,500 --> 00:07:46,900
with the octo you first thing to start

00:07:43,630 --> 00:07:49,750
after cloning is you must execute this

00:07:46,900 --> 00:07:51,490
script we need to build them

00:07:49,750 --> 00:07:55,570
you must source it so there is a dot

00:07:51,490 --> 00:07:59,800
opposite and then you should look in

00:07:55,570 --> 00:08:01,660
your sock vendor lair for a

00:07:59,800 --> 00:08:04,000
configuration for your board or a

00:08:01,660 --> 00:08:06,550
similar board and then set that into the

00:08:04,000 --> 00:08:09,880
machine variable so it knows it you want

00:08:06,550 --> 00:08:12,490
to build for that machine ok run in the

00:08:09,880 --> 00:08:14,260
build is just a matter of : make 4-pin

00:08:12,490 --> 00:08:16,300
root and it will start all of its

00:08:14,260 --> 00:08:19,720
process with bitbake

00:08:16,300 --> 00:08:21,700
you have to supply an argument you can

00:08:19,720 --> 00:08:25,150
start with core image minimal which is

00:08:21,700 --> 00:08:27,310
an image with just the basic to start so

00:08:25,150 --> 00:08:32,229
both of them will build a minimal system

00:08:27,310 --> 00:08:33,779
boot into busybox okay of course the to

00:08:32,229 --> 00:08:37,379
system do

00:08:33,779 --> 00:08:40,050
many of the same things but they name

00:08:37,379 --> 00:08:42,990
them differently so the common thing is

00:08:40,050 --> 00:08:46,019
they maintain as I said a graph of

00:08:42,990 --> 00:08:49,189
dependencies between packages but for

00:08:46,019 --> 00:08:52,649
each package they also have a set of sub

00:08:49,189 --> 00:08:54,720
targets of sub steps to accomplish like

00:08:52,649 --> 00:08:59,519
configuring installing building of

00:08:54,720 --> 00:09:01,170
course so the naming is the word package

00:08:59,519 --> 00:09:02,999
is used in build Road where the word

00:09:01,170 --> 00:09:04,559
recipe is used in the octo so it's

00:09:02,999 --> 00:09:06,509
pretty much the same thing it's a

00:09:04,559 --> 00:09:10,529
description half of how to build a

00:09:06,509 --> 00:09:13,470
package in both cases you can just call

00:09:10,529 --> 00:09:15,420
either make or beat bake with an

00:09:13,470 --> 00:09:17,970
argument that is the name of the package

00:09:15,420 --> 00:09:20,069
and they will build every package around

00:09:17,970 --> 00:09:23,309
with all of its dependencies that's

00:09:20,069 --> 00:09:25,170
pretty much the same the packages

00:09:23,309 --> 00:09:28,620
compile for the development host

00:09:25,170 --> 00:09:30,749
natively are called host name of the

00:09:28,620 --> 00:09:32,910
package in build wood and package -

00:09:30,749 --> 00:09:37,170
native in the opto so it's exactly the

00:09:32,910 --> 00:09:41,069
same thing the sub steps needed to build

00:09:37,170 --> 00:09:43,589
each package are all just steps usually

00:09:41,069 --> 00:09:47,490
in mid route there is no formal name

00:09:43,589 --> 00:09:50,910
while in yup - they are called tasks and

00:09:47,490 --> 00:09:53,579
tasks are really first class citizen in

00:09:50,910 --> 00:09:59,399
in bitbake they are in a different

00:09:53,579 --> 00:10:01,649
namespace so for example you can ask it

00:09:59,399 --> 00:10:05,189
to just run up to the configure step for

00:10:01,649 --> 00:10:08,399
some packages with - see configure well

00:10:05,189 --> 00:10:11,100
I'll bid route generation creates a new

00:10:08,399 --> 00:10:13,680
make target for each of these steps so

00:10:11,100 --> 00:10:16,529
you will write make name of the package

00:10:13,680 --> 00:10:19,410
- configure your name of the package -

00:10:16,529 --> 00:10:23,220
Build and so on but it's the same thing

00:10:19,410 --> 00:10:27,089
more or less okay here it's a picture of

00:10:23,220 --> 00:10:29,309
how the default normal steps of or tasks

00:10:27,089 --> 00:10:31,259
are organized in the tool system they

00:10:29,309 --> 00:10:34,459
are very similar except for the naming

00:10:31,259 --> 00:10:38,610
so source becomes fetch and so on

00:10:34,459 --> 00:10:41,069
okay the build step is kind of ambiguous

00:10:38,610 --> 00:10:43,079
because in Midwood it means run the

00:10:41,069 --> 00:10:45,840
build the compilation itself so before

00:10:43,079 --> 00:10:49,080
without installing while in New York

00:10:45,840 --> 00:10:51,660
is in a special task meaning build

00:10:49,080 --> 00:10:53,550
everything related to a package it's

00:10:51,660 --> 00:10:56,220
what happens when you 2-bit big space

00:10:53,550 --> 00:10:58,350
name of the package okay II story has

00:10:56,220 --> 00:11:01,200
two different steps it build route to

00:10:58,350 --> 00:11:05,460
install in staging and to install on the

00:11:01,200 --> 00:11:08,010
on the target group and system while you

00:11:05,460 --> 00:11:10,560
have to manage this internally so there

00:11:08,010 --> 00:11:13,320
is only one is for step and finally the

00:11:10,560 --> 00:11:16,589
what articles deploy step is install

00:11:13,320 --> 00:11:18,960
images in in build route that's to

00:11:16,589 --> 00:11:22,020
install just images not in the root

00:11:18,960 --> 00:11:24,810
filesystem okay this is just a recap of

00:11:22,020 --> 00:11:27,120
what I've said with naming one by one as

00:11:24,810 --> 00:11:29,490
a reference table and along with the

00:11:27,120 --> 00:11:33,450
name of the files were these happen to

00:11:29,490 --> 00:11:35,850
be implemented in the two systems okay

00:11:33,450 --> 00:11:39,089
it's impossible to talk about the octave

00:11:35,850 --> 00:11:43,740
without talking about layers so just a

00:11:39,089 --> 00:11:46,410
few notes you when you start a new new

00:11:43,740 --> 00:11:48,450
project there is a default layers file

00:11:46,410 --> 00:11:50,339
that is created for you with a simple

00:11:48,450 --> 00:11:52,890
list of paths to the to the Lanier's

00:11:50,339 --> 00:11:57,750
this is the default just three layers

00:11:52,890 --> 00:12:01,620
and then you can add more as as you want

00:11:57,750 --> 00:12:03,720
I suggest you use a relative path not an

00:12:01,620 --> 00:12:05,520
absolute path otherwise it won't be

00:12:03,720 --> 00:12:07,860
portable with your colleague for your

00:12:05,520 --> 00:12:12,839
colleagues for example or on two

00:12:07,860 --> 00:12:16,440
different directories ok and what

00:12:12,839 --> 00:12:20,700
happens with layers is a recipe for a

00:12:16,440 --> 00:12:25,110
package is defined as a dot b b file in

00:12:20,700 --> 00:12:27,810
one of the of the layers but then other

00:12:25,110 --> 00:12:30,780
layers on the higher levels can have a

00:12:27,810 --> 00:12:33,750
BBF and file so there can be zero or

00:12:30,780 --> 00:12:35,700
more DB append files and what bitbake

00:12:33,750 --> 00:12:39,110
does at the beginning while parsing your

00:12:35,700 --> 00:12:41,670
your code it will just pretty much

00:12:39,110 --> 00:12:44,610
concatenate the files are pending one of

00:12:41,670 --> 00:12:45,139
the other so the final recipe will be a

00:12:44,610 --> 00:12:48,410
concur

00:12:45,139 --> 00:12:50,809
of them and your highest level peepee

00:12:48,410 --> 00:12:54,879
happened will come last and can change

00:12:50,809 --> 00:12:54,879
what has been said in the previous files

00:12:55,660 --> 00:13:01,119
layers can are very powerful but can

00:12:59,209 --> 00:13:04,100
also create some problems especially

00:13:01,119 --> 00:13:07,459
some of them are a very good quality

00:13:04,100 --> 00:13:11,329
some are not and but most important

00:13:07,459 --> 00:13:13,790
there can be conflicts which is your

00:13:11,329 --> 00:13:15,829
build will fail this happened to me for

00:13:13,790 --> 00:13:18,350
example with this dreamer word were a

00:13:15,829 --> 00:13:21,919
vendor layer wanted to implement their

00:13:18,350 --> 00:13:24,049
own video codec hardware and so tweet on

00:13:21,919 --> 00:13:26,869
the GStreamer recipes with the DB append

00:13:24,049 --> 00:13:29,929
other which is not compatible with what

00:13:26,869 --> 00:13:32,959
other layers do and so in those cases my

00:13:29,929 --> 00:13:35,569
personal algorithm to fix the problem is

00:13:32,959 --> 00:13:37,999
if at all possible fix the offending

00:13:35,569 --> 00:13:40,279
code in my VP happen maybe it's just a

00:13:37,999 --> 00:13:42,319
matter of changing one or two variables

00:13:40,279 --> 00:13:45,799
if that's not enough you can just

00:13:42,319 --> 00:13:48,040
blacklist one recipe so it will not be

00:13:45,799 --> 00:13:51,110
considered by the big and then you

00:13:48,040 --> 00:13:53,779
implement what's needed on your own

00:13:51,110 --> 00:13:56,119
layer and finally if the whole layer

00:13:53,779 --> 00:13:59,089
itself is creating problems just don't

00:13:56,119 --> 00:14:01,910
use it and copy over the part that is

00:13:59,089 --> 00:14:04,069
useful in your layer so there are these

00:14:01,910 --> 00:14:07,699
are possibilities to escape these kind

00:14:04,069 --> 00:14:10,669
of problems ok and finally you're not

00:14:07,699 --> 00:14:13,519
supposed to modify the existing layers

00:14:10,669 --> 00:14:14,720
but you should create your own top level

00:14:13,519 --> 00:14:16,790
layer where you add all of your

00:14:14,720 --> 00:14:20,290
customization specific to your product

00:14:16,790 --> 00:14:26,049
and maybe fixes to global level layers

00:14:20,290 --> 00:14:31,369
and everything should go in there

00:14:26,049 --> 00:14:33,230
ok Bitteroot has mechanisms we doesn't

00:14:31,369 --> 00:14:36,230
really have a nice name but br-2

00:14:33,230 --> 00:14:38,629
external is the kekkai config variable

00:14:36,230 --> 00:14:41,119
to enable it and it's also how it's

00:14:38,629 --> 00:14:44,029
usually called it is somewhat similar to

00:14:41,119 --> 00:14:46,309
layer technically but it's simpler

00:14:44,029 --> 00:14:49,459
it's also simple in its goal its goal is

00:14:46,309 --> 00:14:52,639
not to give something that can do

00:14:49,459 --> 00:14:54,829
whatever to change every recipe but just

00:14:52,639 --> 00:14:56,190
to keep your own local customization in

00:14:54,829 --> 00:14:59,280
a separate place so you

00:14:56,190 --> 00:15:01,980
developing a product and you have your

00:14:59,280 --> 00:15:03,980
own packages your board convicts and so

00:15:01,980 --> 00:15:08,430
on you can keep them in a separate place

00:15:03,980 --> 00:15:10,860
if you find bugs in or problems or

00:15:08,430 --> 00:15:13,800
missing features in a Bitteroot recipe

00:15:10,860 --> 00:15:16,230
the policy that you were suggested to

00:15:13,800 --> 00:15:19,290
follow is to submit your improvement

00:15:16,230 --> 00:15:22,650
upstream and then it will be part of the

00:15:19,290 --> 00:15:26,400
whole build route okay this is how you

00:15:22,650 --> 00:15:29,790
use it you just have to call me whatever

00:15:26,400 --> 00:15:32,030
like make menu config with we are to

00:15:29,790 --> 00:15:36,090
external and the list of your of your

00:15:32,030 --> 00:15:37,500
external trees that's it that's if in

00:15:36,090 --> 00:15:40,650
your def config so you don't have to

00:15:37,500 --> 00:15:43,680
type in the game every time what happens

00:15:40,650 --> 00:15:46,500
basically is the top-level build root

00:15:43,680 --> 00:15:48,810
make file will include your own make

00:15:46,500 --> 00:15:53,310
files in your external trees and the

00:15:48,810 --> 00:15:55,890
same happens with K config files so it's

00:15:53,310 --> 00:15:59,040
all pretty much a part of a unique

00:15:55,890 --> 00:16:01,400
system then so this is in this sense it

00:15:59,040 --> 00:16:04,320
is somewhat similar to layers ok

00:16:01,400 --> 00:16:06,090
Brighton recipes I will mostly skip on

00:16:04,320 --> 00:16:09,090
this section because it's well covered

00:16:06,090 --> 00:16:13,760
in tutorials and manuals I just wanted

00:16:09,090 --> 00:16:17,130
to highlight how as bird's eye view it

00:16:13,760 --> 00:16:19,350
it looks very similar to this one the

00:16:17,130 --> 00:16:21,570
syntax is different but with Bitteroot a

00:16:19,350 --> 00:16:23,520
new octo in both cases you are just

00:16:21,570 --> 00:16:27,990
telling word to download the code from

00:16:23,520 --> 00:16:29,490
how to build how to install that's

00:16:27,990 --> 00:16:34,130
pretty much the same you do with the

00:16:29,490 --> 00:16:36,900
octo with the different syntax ok so

00:16:34,130 --> 00:16:40,350
actually in Bitteroot you also have to

00:16:36,900 --> 00:16:42,510
define a k config file to let your

00:16:40,350 --> 00:16:46,110
packet be visible in menu config but

00:16:42,510 --> 00:16:49,260
that's very simple at least for normal

00:16:46,110 --> 00:16:51,330
packages and ok in after you have

00:16:49,260 --> 00:16:52,800
classes so if you have no total package

00:16:51,330 --> 00:16:55,140
you know don't have to re-implement

00:16:52,800 --> 00:16:56,670
everything in the same way every time

00:16:55,140 --> 00:16:59,400
there's a class doing all the basic

00:16:56,670 --> 00:17:01,710
stuff for you and it's extensible

00:16:59,400 --> 00:17:03,780
exactly the same happens in Bitteroot

00:17:01,710 --> 00:17:06,449
the syntax is clear

00:17:03,780 --> 00:17:08,550
in after you doing here it Auto Tunes

00:17:06,449 --> 00:17:10,920
which is very intuitive it is a bit less

00:17:08,550 --> 00:17:13,380
intuitive in build route where there is

00:17:10,920 --> 00:17:17,089
this syntax because that based on me

00:17:13,380 --> 00:17:19,650
because it made features to implement

00:17:17,089 --> 00:17:22,140
classes they are called actually package

00:17:19,650 --> 00:17:24,810
infrastructures in builder but each it

00:17:22,140 --> 00:17:28,830
is used in the same way to implement

00:17:24,810 --> 00:17:31,950
packages okay if you use classes but

00:17:28,830 --> 00:17:34,710
same applies to be bi pens you can add

00:17:31,950 --> 00:17:38,700
code to be executed before after every

00:17:34,710 --> 00:17:40,830
every task so you can have things like

00:17:38,700 --> 00:17:43,290
do we stole a pen and it will be

00:17:40,830 --> 00:17:47,460
appended to the existing doest all step

00:17:43,290 --> 00:17:50,340
from your list class or base BB file

00:17:47,460 --> 00:17:52,680
he built route this is called hooks so

00:17:50,340 --> 00:17:55,130
for every step there is a pre who can

00:17:52,680 --> 00:17:57,420
approach hook so you can append code

00:17:55,130 --> 00:17:59,310
again the syntax is a little bit more

00:17:57,420 --> 00:18:04,200
verbose but you can do the same things

00:17:59,310 --> 00:18:07,320
it's probably equivalent okay so here

00:18:04,200 --> 00:18:11,820
just an overview showing that both tools

00:18:07,320 --> 00:18:14,280
have played several variables for you to

00:18:11,820 --> 00:18:17,010
use in your recipes like for example PV

00:18:14,280 --> 00:18:19,170
is the package version in Yocto and name

00:18:17,010 --> 00:18:21,990
of the package angus corporation is the

00:18:19,170 --> 00:18:23,760
same thing in in build route there is

00:18:21,990 --> 00:18:26,310
always the name of the package in front

00:18:23,760 --> 00:18:30,060
of variables for build route and that is

00:18:26,310 --> 00:18:32,100
because it reduces make and in make all

00:18:30,060 --> 00:18:33,900
variables are in a unique namespace so

00:18:32,100 --> 00:18:36,180
they need to have a prefix with the

00:18:33,900 --> 00:18:39,720
update these variables assigned per

00:18:36,180 --> 00:18:42,450
recipe so they don't need a prefix it's

00:18:39,720 --> 00:18:45,000
read more concise there are variables to

00:18:42,450 --> 00:18:47,760
know the various directory have to work

00:18:45,000 --> 00:18:49,890
in the source and built the year and

00:18:47,760 --> 00:18:53,640
where you should install and store

00:18:49,890 --> 00:18:55,710
images this mean a bit different things

00:18:53,640 --> 00:18:58,050
in the two tools because build route

00:18:55,710 --> 00:18:59,940
installs directly in the root file

00:18:58,050 --> 00:19:02,370
system while the octal stores in the

00:18:59,940 --> 00:19:04,860
temporary directory but that can change

00:19:02,370 --> 00:19:06,870
in the future and so you should not rely

00:19:04,860 --> 00:19:09,620
on the just use the variables and don't

00:19:06,870 --> 00:19:10,800
make assumptions is always the bad thing

00:19:09,620 --> 00:19:13,530
okay

00:19:10,800 --> 00:19:14,320
finally you will need to add a cheese to

00:19:13,530 --> 00:19:19,049
a package

00:19:14,320 --> 00:19:22,299
that you are not developing directly to

00:19:19,049 --> 00:19:25,120
it is rather simple you just have to put

00:19:22,299 --> 00:19:27,309
a dot patch file within any convention

00:19:25,120 --> 00:19:30,070
in the packet directory so it's going to

00:19:27,309 --> 00:19:32,259
look like this in your package directory

00:19:30,070 --> 00:19:34,990
there is the MK file the K conflicts and

00:19:32,259 --> 00:19:37,710
there is the patch here in the after it

00:19:34,990 --> 00:19:42,340
goes into a subdirectory at least the

00:19:37,710 --> 00:19:45,250
convention but you also need to set a

00:19:42,340 --> 00:19:49,029
source early the the name of the patch

00:19:45,250 --> 00:19:50,440
otherwise the file is ignored if the sub

00:19:49,029 --> 00:19:52,750
directory does not have standard name

00:19:50,440 --> 00:19:58,360
you also need to listing in files extra

00:19:52,750 --> 00:20:01,419
paths repent okay otherwise you can have

00:19:58,360 --> 00:20:03,340
a page downloaded from the internet in

00:20:01,419 --> 00:20:05,230
this case it is the movie package and

00:20:03,340 --> 00:20:07,389
the score patch in build route and you

00:20:05,230 --> 00:20:11,110
just mention it in sauce early with

00:20:07,389 --> 00:20:13,960
Yocto finally if you need to patch

00:20:11,110 --> 00:20:16,870
packages which is quite likely that are

00:20:13,960 --> 00:20:20,950
not in your lair but are in lower level

00:20:16,870 --> 00:20:23,080
layers the way in in the octo is to just

00:20:20,950 --> 00:20:25,480
put them in your layers and mention them

00:20:23,080 --> 00:20:27,370
in a PP up and file so that's pretty

00:20:25,480 --> 00:20:31,019
much the same mechanism as the first

00:20:27,370 --> 00:20:33,669
line in table will be route there is a

00:20:31,019 --> 00:20:35,769
configuration variable called global

00:20:33,669 --> 00:20:38,980
patch D so this should point to a

00:20:35,769 --> 00:20:41,200
directory where you have a tree of of

00:20:38,980 --> 00:20:44,169
patches and it will pick patches from

00:20:41,200 --> 00:20:48,070
there without having to change them in

00:20:44,169 --> 00:20:51,039
the bid root tree and it can be used

00:20:48,070 --> 00:20:54,610
also of course with their to external ok

00:20:51,039 --> 00:20:58,210
so building and I mean invoking the

00:20:54,610 --> 00:21:00,809
build is happens in a very similar way

00:20:58,210 --> 00:21:03,129
although the syntax is different so what

00:21:00,809 --> 00:21:05,470
I've already shown some of the command

00:21:03,129 --> 00:21:08,980
lines is just an overview of other

00:21:05,470 --> 00:21:12,190
possibilities maybe the most complex one

00:21:08,980 --> 00:21:14,500
cover here is make busybox reconfigure

00:21:12,190 --> 00:21:16,990
which is equivalent to make to be baked

00:21:14,500 --> 00:21:19,240
- uppercase seek out in your beauty box

00:21:16,990 --> 00:21:21,220
which means forced to rerun the

00:21:19,240 --> 00:21:23,980
reconfiguration and everything else to

00:21:21,220 --> 00:21:25,909
build that package so they can do pretty

00:21:23,980 --> 00:21:30,510
much the same thing

00:21:25,909 --> 00:21:32,279
okay keeping on these okay with

00:21:30,510 --> 00:21:34,710
Bitteroot you can do out of three bills

00:21:32,279 --> 00:21:36,960
if you want like from the saints Mildred

00:21:34,710 --> 00:21:39,240
code to test different configurations

00:21:36,960 --> 00:21:40,679
you can just put them in different sub

00:21:39,240 --> 00:21:43,110
directories just like you do for the

00:21:40,679 --> 00:21:45,720
colonel and then you can launch two

00:21:43,110 --> 00:21:48,990
different consoles and build in parallel

00:21:45,720 --> 00:21:50,909
the two or three or more to see how a

00:21:48,990 --> 00:21:54,659
change in your source effects several

00:21:50,909 --> 00:21:56,909
several boards this is not present I

00:21:54,659 --> 00:22:00,630
think in Yocto but you achieve the same

00:21:56,909 --> 00:22:02,850
probably in a better way using other

00:22:00,630 --> 00:22:05,460
techniques so you can just run big bay

00:22:02,850 --> 00:22:08,220
core image minimal and then beat make my

00:22:05,460 --> 00:22:10,529
image and it will build only the parts

00:22:08,220 --> 00:22:12,510
of my image that are not already built

00:22:10,529 --> 00:22:15,600
from the core image minimal so it will

00:22:12,510 --> 00:22:18,750
recycle the builds very effectively and

00:22:15,600 --> 00:22:20,850
also you can change the machine then and

00:22:18,750 --> 00:22:22,770
build for a different machine and it

00:22:20,850 --> 00:22:24,690
will also recycle whatever is coming so

00:22:22,770 --> 00:22:27,120
the machine if the machine is using the

00:22:24,690 --> 00:22:29,850
same target architecture it will not

00:22:27,120 --> 00:22:32,820
reveal most of the code only the board

00:22:29,850 --> 00:22:36,000
dependent code so you will save on both

00:22:32,820 --> 00:22:38,159
on this cannon time okay

00:22:36,000 --> 00:22:40,590
the Ranson dependency tracking is very

00:22:38,159 --> 00:22:43,470
different build route keep keeps track

00:22:40,590 --> 00:22:45,450
of completed tasks using a stamp file

00:22:43,470 --> 00:22:51,299
the stamp file is an empty file whose

00:22:45,450 --> 00:22:54,090
date matters and this is not covered in

00:22:51,299 --> 00:22:55,830
all cases because if you like build a

00:22:54,090 --> 00:22:58,770
package then change the configuration

00:22:55,830 --> 00:23:00,570
and it doesn't know it has to rebuild it

00:22:58,770 --> 00:23:02,700
because the same file is up-to-date

00:23:00,570 --> 00:23:05,789
so in that case you need to manually

00:23:02,700 --> 00:23:08,820
rebuild in to trigger a manual rebuild

00:23:05,789 --> 00:23:11,429
but the most simple and safe way is just

00:23:08,820 --> 00:23:13,080
run make clean with me clean it will

00:23:11,429 --> 00:23:15,899
then restart building everything of

00:23:13,080 --> 00:23:17,669
course it takes more time if you know

00:23:15,899 --> 00:23:20,279
what you're doing like you know why just

00:23:17,669 --> 00:23:23,070
change something affecting this specific

00:23:20,279 --> 00:23:25,590
package you can just reconfigure or

00:23:23,070 --> 00:23:27,960
rebuild that package and save a lot of

00:23:25,590 --> 00:23:29,880
time so with some knowledge on the

00:23:27,960 --> 00:23:32,789
packages that you are having on your

00:23:29,880 --> 00:23:33,270
target device this gets to be relatively

00:23:32,789 --> 00:23:37,200
simple

00:23:33,270 --> 00:23:38,460
in many cases ok yato has a much more

00:23:37,200 --> 00:23:42,630
powerful making

00:23:38,460 --> 00:23:46,500
so it keeps an entire edge of everything

00:23:42,630 --> 00:23:50,400
that is in the recipe so if you change

00:23:46,500 --> 00:23:55,440
one variable one function in your BB

00:23:50,400 --> 00:23:57,300
file then it notices the already built

00:23:55,440 --> 00:23:58,710
version has it if what Milton with the

00:23:57,300 --> 00:24:00,450
different hash and it will rebuild it

00:23:58,710 --> 00:24:02,850
automatically along with all the bonuses

00:24:00,450 --> 00:24:04,980
this is very powerful and handy you

00:24:02,850 --> 00:24:08,130
don't have to think much about what you

00:24:04,980 --> 00:24:09,630
are building on the other hand he forces

00:24:08,130 --> 00:24:14,790
you to rebuild things that at times

00:24:09,630 --> 00:24:16,950
might be unnecessary okay if you still

00:24:14,790 --> 00:24:19,710
want to force a build you can do it with

00:24:16,950 --> 00:24:23,160
the dash F flag which forces are

00:24:19,710 --> 00:24:23,970
building a step even when it is already

00:24:23,160 --> 00:24:27,840
built

00:24:23,970 --> 00:24:29,730
useful for debugging okay so after

00:24:27,840 --> 00:24:32,010
finishing your build you wonder where

00:24:29,730 --> 00:24:33,930
are you output files it took me quite

00:24:32,010 --> 00:24:36,390
some time to understand with octo

00:24:33,930 --> 00:24:38,640
because it has a very deep and huge

00:24:36,390 --> 00:24:41,130
directory hierarchy well with build root

00:24:38,640 --> 00:24:43,530
it's very simple there's the output

00:24:41,130 --> 00:24:46,080
directory is the default name if you

00:24:43,530 --> 00:24:48,540
don't change it it has a build

00:24:46,080 --> 00:24:50,070
subdirectory and then there is a

00:24:48,540 --> 00:24:52,430
subdirectory which builds each package

00:24:50,070 --> 00:24:58,970
for example busybox

00:24:52,430 --> 00:25:01,860
while Yocto has much deeper hierarchy or

00:24:58,970 --> 00:25:07,590
this is very working the build here and

00:25:01,860 --> 00:25:09,360
then with the tupple like x86 linux blah

00:25:07,590 --> 00:25:10,890
blah and then the name of the packet

00:25:09,360 --> 00:25:12,690
devotion and then there are many

00:25:10,890 --> 00:25:16,290
directories there are many because it

00:25:12,690 --> 00:25:18,150
does many more steps he does out of tree

00:25:16,290 --> 00:25:21,870
builds were not possible so you have

00:25:18,150 --> 00:25:24,060
source and build output and then when

00:25:21,870 --> 00:25:26,370
you install it doesn't install in the

00:25:24,060 --> 00:25:29,670
target file system but in an e in

00:25:26,370 --> 00:25:32,730
directory called image and then in with

00:25:29,670 --> 00:25:34,560
internal tasks it takes from image and

00:25:32,730 --> 00:25:38,670
puts in package and then in package

00:25:34,560 --> 00:25:40,620
split split in the development files and

00:25:38,670 --> 00:25:42,840
the files for the target documentation

00:25:40,620 --> 00:25:48,160
and so on so it has several steps that

00:25:42,840 --> 00:25:52,180
are useful to inspect where your will

00:25:48,160 --> 00:25:54,400
that going wrong for example okay the

00:25:52,180 --> 00:25:58,030
root system is incinerated with bill

00:25:54,400 --> 00:26:01,110
root in the output / target so this is

00:25:58,030 --> 00:26:04,990
pretty much your final root file system

00:26:01,110 --> 00:26:09,730
more or less but it's where you find all

00:26:04,990 --> 00:26:13,300
of your files basically in Yahoo there

00:26:09,730 --> 00:26:14,980
is no concept of the file system but

00:26:13,300 --> 00:26:18,540
there are images you can have multiple

00:26:14,980 --> 00:26:21,970
so they are pretty much like the regular

00:26:18,540 --> 00:26:23,620
recipes over there they don't really

00:26:21,970 --> 00:26:26,260
build stuff they just collect stuff so

00:26:23,620 --> 00:26:29,110
in the same Araki as before more or less

00:26:26,260 --> 00:26:30,820
there is this core image minimal and it

00:26:29,110 --> 00:26:33,850
has a subdirectory root FAS that

00:26:30,820 --> 00:26:35,650
contains your own file system which is

00:26:33,850 --> 00:26:37,170
collected after building your packages

00:26:35,650 --> 00:26:39,670
okay

00:26:37,170 --> 00:26:44,320
finally the images that you really

00:26:39,670 --> 00:26:47,770
deploy to your devices in output /

00:26:44,320 --> 00:26:50,320
images with Bill root and in pretty much

00:26:47,770 --> 00:26:52,870
the same hierarchy but instead of work

00:26:50,320 --> 00:26:56,440
it has a deploy here so here are your

00:26:52,870 --> 00:26:59,590
images and they are more or less the

00:26:56,440 --> 00:27:02,350
same result now so this is where you'll

00:26:59,590 --> 00:27:05,080
find them well there are yaag hierarchy

00:27:02,350 --> 00:27:08,320
is a lot deep so you will use a lot your

00:27:05,080 --> 00:27:12,490
tab key definitely but at time after

00:27:08,320 --> 00:27:14,170
some time you get used to it okay this

00:27:12,490 --> 00:27:19,360
seems to me a very important chapter

00:27:14,170 --> 00:27:22,690
because it is it is very spent like a

00:27:19,360 --> 00:27:25,840
lot of my time in understanding why I

00:27:22,690 --> 00:27:28,150
was seeing red red text on my screen the

00:27:25,840 --> 00:27:30,790
bid was failing and it's very important

00:27:28,150 --> 00:27:33,430
to understand what the tool is doing you

00:27:30,790 --> 00:27:35,830
know these tools are not minesweeper

00:27:33,430 --> 00:27:37,960
they are they do a complex task things

00:27:35,830 --> 00:27:40,810
may fail in many different ways so

00:27:37,960 --> 00:27:43,120
you'll definitely spend some time in

00:27:40,810 --> 00:27:46,600
scratching your head with a question and

00:27:43,120 --> 00:27:48,430
so one of this question is what will the

00:27:46,600 --> 00:27:50,320
tool build and why does it build so much

00:27:48,430 --> 00:27:52,990
stuff I just want busybox it's building

00:27:50,320 --> 00:27:55,230
tons of packages well build root has a

00:27:52,990 --> 00:27:57,970
neat tool to do that

00:27:55,230 --> 00:28:01,090
you just type make rough depends

00:27:57,970 --> 00:28:04,450
and it will produce a PDF with all the

00:28:01,090 --> 00:28:06,610
dependencies I don't know if you can see

00:28:04,450 --> 00:28:09,220
it but there are two different shades of

00:28:06,610 --> 00:28:11,410
grey here the dark gray is target

00:28:09,220 --> 00:28:14,860
packages the lightweight host packages

00:28:11,410 --> 00:28:17,380
that don't go on your device so it's

00:28:14,860 --> 00:28:20,740
very easy here to understand why the

00:28:17,380 --> 00:28:24,610
tool is building I don't know host

00:28:20,740 --> 00:28:27,790
really because it's needed by somebody

00:28:24,610 --> 00:28:30,490
and also useful to fine-tune what goes

00:28:27,790 --> 00:28:32,140
on your target and to save space if you

00:28:30,490 --> 00:28:35,320
only care about some of the information

00:28:32,140 --> 00:28:37,360
you can filter them there is an

00:28:35,320 --> 00:28:39,670
environment variable to which can do

00:28:37,360 --> 00:28:42,040
many things among these exclude the host

00:28:39,670 --> 00:28:46,290
packages so I just want to see what goes

00:28:42,040 --> 00:28:49,660
on my target and then you can was it who

00:28:46,290 --> 00:28:51,880
make name of the package graph depends

00:28:49,660 --> 00:28:54,610
it will only show the name of that

00:28:51,880 --> 00:28:58,150
package and its dependencies so it's

00:28:54,610 --> 00:28:59,470
nice to see okay if I use this tool for

00:28:58,150 --> 00:29:01,900
implementing this feature

00:28:59,470 --> 00:29:03,670
how many dependencies will it have how

00:29:01,900 --> 00:29:09,310
much space will it take on my on my

00:29:03,670 --> 00:29:11,470
device we think there is no similar tool

00:29:09,310 --> 00:29:14,110
in New York the world reach one it can

00:29:11,470 --> 00:29:17,770
generate a similar graph in a dot file

00:29:14,110 --> 00:29:19,960
but it's not really usable it takes

00:29:17,770 --> 00:29:24,610
hours to generate and then the graph is

00:29:19,960 --> 00:29:27,910
not really readable I think the closest

00:29:24,610 --> 00:29:30,550
thing is task Explorer which does tasks

00:29:27,910 --> 00:29:33,790
depends Explorer which is invoked this

00:29:30,550 --> 00:29:35,860
way bitbake that G the new task expert

00:29:33,790 --> 00:29:39,280
and then the name of the package or word

00:29:35,860 --> 00:29:42,280
to see all the packages and he it

00:29:39,280 --> 00:29:45,550
doesn't show a graph so it only shows

00:29:42,280 --> 00:29:48,280
for each item is dependencies and

00:29:45,550 --> 00:29:50,920
reverse dependencies and it's also much

00:29:48,280 --> 00:29:53,890
more fine-grained because it shows tasks

00:29:50,920 --> 00:29:56,320
not packages so it it shows a huge

00:29:53,890 --> 00:29:59,520
amount of information it's not really

00:29:56,320 --> 00:30:03,970
easy to find out what you're looking for

00:29:59,520 --> 00:30:06,120
okay then you want to understand what

00:30:03,970 --> 00:30:08,650
the tool is doing of course and

00:30:06,120 --> 00:30:10,040
especially what went wrong when Bill

00:30:08,650 --> 00:30:12,230
fails

00:30:10,040 --> 00:30:15,350
to recruit by the fool shows a very

00:30:12,230 --> 00:30:19,220
verbose output so I'm starting this step

00:30:15,350 --> 00:30:21,680
and then the whole step output and when

00:30:19,220 --> 00:30:23,750
things fail typically there are is in

00:30:21,680 --> 00:30:26,180
the last few lines on your terminal

00:30:23,750 --> 00:30:28,580
if you want to concise output a utility

00:30:26,180 --> 00:30:30,980
script code BR make which shows only the

00:30:28,580 --> 00:30:35,060
start of each task and date and set

00:30:30,980 --> 00:30:38,450
everything into a log file Yocto has a

00:30:35,060 --> 00:30:41,240
different output it shows in a in a very

00:30:38,450 --> 00:30:43,190
visual way what is happening in this

00:30:41,240 --> 00:30:45,110
moment so if you just turn in your head

00:30:43,190 --> 00:30:46,370
and then look back into your screen you

00:30:45,110 --> 00:30:49,430
don't know what happened in the

00:30:46,370 --> 00:30:50,900
meanwhile but it's very effective in

00:30:49,430 --> 00:30:54,560
saying what is happening at the moment

00:30:50,900 --> 00:30:57,560
if you want a sort of concise output

00:30:54,560 --> 00:31:00,770
very stupid freak I found is just type

00:30:57,560 --> 00:31:03,020
it into cut so it will show like I'm

00:31:00,770 --> 00:31:05,570
starting this step this task I'm

00:31:03,020 --> 00:31:08,090
finishing this task which is also what

00:31:05,570 --> 00:31:09,560
happened probably in in your CIA

00:31:08,090 --> 00:31:11,750
machines because it doesn't have a

00:31:09,560 --> 00:31:15,100
terminal so it's more useful if you want

00:31:11,750 --> 00:31:17,690
to look after at what happened okay and

00:31:15,100 --> 00:31:19,670
when something goes wrong you can

00:31:17,690 --> 00:31:22,100
inspect the bill drugs for each step you

00:31:19,670 --> 00:31:26,230
have to save a bill separate bit log the

00:31:22,100 --> 00:31:28,460
date in one of those long directories so

00:31:26,230 --> 00:31:30,380
for the package there is a temp

00:31:28,460 --> 00:31:32,150
directory with all the logs it's very

00:31:30,380 --> 00:31:35,570
useful because you can inspect whatever

00:31:32,150 --> 00:31:37,850
happened but if you want to see the

00:31:35,570 --> 00:31:40,460
error happen in life then you can just

00:31:37,850 --> 00:31:43,130
rerun it with the - V flag which means

00:31:40,460 --> 00:31:47,950
verbose and in that case whatever is log

00:31:43,130 --> 00:31:51,320
it is also showed on screen okay and

00:31:47,950 --> 00:31:56,030
understanding what the truely's thinking

00:31:51,320 --> 00:31:58,160
i mean means you wrote a recipe you set

00:31:56,030 --> 00:32:01,370
a variable and you thought it as the

00:31:58,160 --> 00:32:03,590
fact but it doesn't so why so you can

00:32:01,370 --> 00:32:06,760
inspect the internal thinking of the

00:32:03,590 --> 00:32:10,850
tool in build route using the print VARs

00:32:06,760 --> 00:32:12,770
feature so you just you can just look at

00:32:10,850 --> 00:32:15,590
the second example it's a typical usage

00:32:12,770 --> 00:32:17,930
make - s you give a pattern and then

00:32:15,590 --> 00:32:20,390
print bars it will show all variables

00:32:17,930 --> 00:32:22,260
starting with busybox so if you don't

00:32:20,390 --> 00:32:24,330
find it very very just said the

00:32:22,260 --> 00:32:27,419
maybe you have a type or anyway you can

00:32:24,330 --> 00:32:30,990
see the value of each variable after

00:32:27,419 --> 00:32:33,900
expansion well if you want a much more

00:32:30,990 --> 00:32:41,790
low-level tool you can use directly make

00:32:33,900 --> 00:32:44,010
make this make - QFP means it prints the

00:32:41,790 --> 00:32:47,040
hole make database it's a huge output

00:32:44,010 --> 00:32:49,799
where all variables are before expansion

00:32:47,040 --> 00:32:52,200
so it's a lot harder to understand but

00:32:49,799 --> 00:32:54,240
in some case it could be useful and it

00:32:52,200 --> 00:32:58,590
also showed the rules and the action is

00:32:54,240 --> 00:33:02,160
it would execute without executing yup

00:32:58,590 --> 00:33:05,280
though has a similar possibility with

00:33:02,160 --> 00:33:07,260
the - in flag a bitbake - issue only the

00:33:05,280 --> 00:33:11,820
global environment variables affecting

00:33:07,260 --> 00:33:14,190
all of the build entirely or if you pass

00:33:11,820 --> 00:33:17,250
a recipe name it will show the variables

00:33:14,190 --> 00:33:20,340
and the function for that recipe along

00:33:17,250 --> 00:33:22,890
with where they have been set it is very

00:33:20,340 --> 00:33:24,840
useful especially when a variable is set

00:33:22,890 --> 00:33:26,809
and modified in several different files

00:33:24,840 --> 00:33:32,700
so you can see which file is actually

00:33:26,809 --> 00:33:34,770
causing trouble to you ok so that these

00:33:32,700 --> 00:33:39,290
are very important tools to understand

00:33:34,770 --> 00:33:44,250
what the to build systems are doing ok

00:33:39,290 --> 00:33:46,710
now I'd like to give you an some ideas

00:33:44,250 --> 00:33:48,510
about how you customize your root

00:33:46,710 --> 00:33:51,990
filesystem and your build out good in

00:33:48,510 --> 00:33:53,940
general because well with a default bill

00:33:51,990 --> 00:33:56,880
you have a default system but you don't

00:33:53,940 --> 00:33:58,770
sell beaglebones with the default

00:33:56,880 --> 00:34:02,850
busybox image you sell product so you

00:33:58,770 --> 00:34:07,530
want to customize stuff and for this

00:34:02,850 --> 00:34:09,270
well as I said the build route has its

00:34:07,530 --> 00:34:11,970
configuration system with its

00:34:09,270 --> 00:34:15,240
configuration file you use many country

00:34:11,970 --> 00:34:17,250
to customize and well the command makes

00:34:15,240 --> 00:34:20,429
it that config will overwrite your

00:34:17,250 --> 00:34:23,940
previous configuration with the current

00:34:20,429 --> 00:34:27,540
values so if it's version it's very

00:34:23,940 --> 00:34:29,190
handy you are ready to commit it with

00:34:27,540 --> 00:34:32,100
Yocto the configuration actually goes

00:34:29,190 --> 00:34:33,669
into BB file so there is no separation

00:34:32,100 --> 00:34:35,349
no strong

00:34:33,669 --> 00:34:41,109
separation between configuration and

00:34:35,349 --> 00:34:45,299
build anyway the layout is probably

00:34:41,109 --> 00:34:47,950
quite common is to define all of your

00:34:45,299 --> 00:34:50,799
building build option the tool change

00:34:47,950 --> 00:34:52,210
especially your target machine in a

00:34:50,799 --> 00:34:56,740
configuration file in your top layer

00:34:52,210 --> 00:34:59,319
well you could use the con fresh local

00:34:56,740 --> 00:35:01,180
con file in your bill directory it works

00:34:59,319 --> 00:35:04,599
but it's not meant for that it's meant

00:35:01,180 --> 00:35:07,200
for really local stuff but basically you

00:35:04,599 --> 00:35:14,500
can choose where you put your file and

00:35:07,200 --> 00:35:17,170
then you can set that and you the system

00:35:14,500 --> 00:35:19,270
configuration so what those options that

00:35:17,170 --> 00:35:23,260
effect generally the system must go in

00:35:19,270 --> 00:35:27,339
several places and you have to look for

00:35:23,260 --> 00:35:29,260
them and finally the to add packages to

00:35:27,339 --> 00:35:33,670
your root filesystem you use an image

00:35:29,260 --> 00:35:35,920
recipe as I mentioned before okay so in

00:35:33,670 --> 00:35:38,109
a package in in build route is very

00:35:35,920 --> 00:35:42,670
simple you just enter menu config go

00:35:38,109 --> 00:35:44,109
into the packages sub menu and if it is

00:35:42,670 --> 00:35:47,170
implemented you will find it there it's

00:35:44,109 --> 00:35:49,329
very easy you can search and then if you

00:35:47,170 --> 00:35:51,940
removed or modified the configuration of

00:35:49,329 --> 00:35:55,599
sub packages you have to maybe clean a

00:35:51,940 --> 00:35:57,339
rebuild if you do then you save your

00:35:55,599 --> 00:36:02,349
configuration of your package will be in

00:35:57,339 --> 00:36:05,920
your image with the octo it is a bit

00:36:02,349 --> 00:36:09,069
different there is no menu but you can

00:36:05,920 --> 00:36:11,410
ask big bag to print the list of all the

00:36:09,069 --> 00:36:14,559
packages that it knows so those that are

00:36:11,410 --> 00:36:17,829
in the layers you have enabled with big

00:36:14,559 --> 00:36:20,140
big layers show recipes if you don't

00:36:17,829 --> 00:36:23,049
find it there you can go again on the

00:36:20,140 --> 00:36:26,319
layer index it also indexes recipes in

00:36:23,049 --> 00:36:28,960
layers and so you can just look for a

00:36:26,319 --> 00:36:31,030
recipe and see which layers implemented

00:36:28,960 --> 00:36:33,910
so maybe that layer is useful to you you

00:36:31,030 --> 00:36:36,130
should pull in that layer probably and

00:36:33,910 --> 00:36:38,770
then to create a root filesystem you

00:36:36,130 --> 00:36:41,290
create an image recipe like the core

00:36:38,770 --> 00:36:45,210
image minimal showing above you can

00:36:41,290 --> 00:36:47,970
create another one basically an image is

00:36:45,210 --> 00:36:52,290
like it's a collection of packages so

00:36:47,970 --> 00:36:55,520
this is a very simple image recipe image

00:36:52,290 --> 00:36:58,230
install plus equal a list of packages

00:36:55,520 --> 00:36:58,800
well not only packages but also package

00:36:58,230 --> 00:37:00,930
groups

00:36:58,800 --> 00:37:03,720
well the package groups is a sub group

00:37:00,930 --> 00:37:06,300
of packages so you can just include a

00:37:03,720 --> 00:37:08,040
package group for debugging and include

00:37:06,300 --> 00:37:14,119
that or or not

00:37:08,040 --> 00:37:17,790
so actually what does it build packages

00:37:14,119 --> 00:37:19,890
and then from that from from it picks

00:37:17,790 --> 00:37:21,450
those packages that you've listed in the

00:37:19,890 --> 00:37:25,160
image and installs them in the root

00:37:21,450 --> 00:37:28,430
filesystem okay

00:37:25,160 --> 00:37:30,210
there are many root filesystem

00:37:28,430 --> 00:37:33,630
customization that affect the whole

00:37:30,210 --> 00:37:34,710
system and build route has a really nice

00:37:33,630 --> 00:37:38,790
menu for that

00:37:34,710 --> 00:37:40,829
so you just enter menu config and system

00:37:38,790 --> 00:37:43,770
configuration and you will see options

00:37:40,829 --> 00:37:48,420
to change important things like the init

00:37:43,770 --> 00:37:50,220
system the the management passwords root

00:37:48,420 --> 00:37:54,660
password and many many more

00:37:50,220 --> 00:37:56,849
so actually what happens is everything

00:37:54,660 --> 00:37:59,160
is stored in your configuration and is

00:37:56,849 --> 00:38:02,069
most important it is very easy to find

00:37:59,160 --> 00:38:04,170
all of those option in a menu it's very

00:38:02,069 --> 00:38:06,150
handy with the update it's more

00:38:04,170 --> 00:38:08,309
difficult because for each of the

00:38:06,150 --> 00:38:15,000
features you have to find where it

00:38:08,309 --> 00:38:18,089
exists in which recipe and so my my

00:38:15,000 --> 00:38:21,420
personal algorithm to to do that is

00:38:18,089 --> 00:38:24,030
first I look into the Yocto reference

00:38:21,420 --> 00:38:27,030
manual which is very comprehensive if I

00:38:24,030 --> 00:38:29,220
don't find it there then I grab into the

00:38:27,030 --> 00:38:31,170
pocky sources because maybe there is a

00:38:29,220 --> 00:38:33,690
variable which is not documented and it

00:38:31,170 --> 00:38:39,000
does but I need well otherwise you just

00:38:33,690 --> 00:38:41,190
search the internet then for I listed

00:38:39,000 --> 00:38:44,819
here just a very small selection of

00:38:41,190 --> 00:38:47,760
possible configuration he it will be too

00:38:44,819 --> 00:38:50,490
used to leave them all but starting from

00:38:47,760 --> 00:38:55,890
very basic and mundane things like

00:38:50,490 --> 00:38:57,180
setting the hostname in this is the menu

00:38:55,890 --> 00:38:59,339
entry in Veeru

00:38:57,180 --> 00:39:02,400
on the left so you just go in system

00:38:59,339 --> 00:39:04,170
configuration and find this I set your

00:39:02,400 --> 00:39:07,260
host name in the octo you have to set

00:39:04,170 --> 00:39:11,099
this variable here which come from the

00:39:07,260 --> 00:39:13,430
base files recipe in in Pocky

00:39:11,099 --> 00:39:18,300
this happens in similar ways for other

00:39:13,430 --> 00:39:20,579
settings okay and more important things

00:39:18,300 --> 00:39:24,599
are the unit system that means mint and

00:39:20,579 --> 00:39:28,490
this really affect the whole system okay

00:39:24,599 --> 00:39:30,000
this is just a brief list as an example

00:39:28,490 --> 00:39:33,180
okay

00:39:30,000 --> 00:39:36,630
then if you need extra root filesystem

00:39:33,180 --> 00:39:38,760
or image modifications then bill root

00:39:36,630 --> 00:39:41,910
has two tools one is the root filesystem

00:39:38,760 --> 00:39:44,430
overlay directory or directories you

00:39:41,910 --> 00:39:46,170
give it one or more directories and at

00:39:44,430 --> 00:39:48,990
the end of root filesystem creation it

00:39:46,170 --> 00:39:51,510
will just copy your overlay over the

00:39:48,990 --> 00:39:54,030
root filesystem one by one so it's

00:39:51,510 --> 00:39:56,819
actually really an overlay of everything

00:39:54,030 --> 00:39:59,250
it's typical for configuration files and

00:39:56,819 --> 00:40:02,910
similar that are global and not specific

00:39:59,250 --> 00:40:05,400
to a package if that's not enough you

00:40:02,910 --> 00:40:08,280
can ask it to run as create a post build

00:40:05,400 --> 00:40:11,670
or post image script it will just be run

00:40:08,280 --> 00:40:13,470
after each of these two steps it's well

00:40:11,670 --> 00:40:15,750
it's called script that it can be any

00:40:13,470 --> 00:40:17,400
program actually and then you can do

00:40:15,750 --> 00:40:19,559
everything on your file system or your

00:40:17,400 --> 00:40:21,210
images the same thing can be done in

00:40:19,559 --> 00:40:23,369
Yocto with the route Affairs post

00:40:21,210 --> 00:40:28,710
process command an image post process

00:40:23,369 --> 00:40:34,650
command it's very similar okay I think

00:40:28,710 --> 00:40:39,359
I'm kind of out of time so there is

00:40:34,650 --> 00:40:41,940
probably time only for one question but

00:40:39,359 --> 00:40:44,579
if you have more questions I will be

00:40:41,940 --> 00:40:48,000
available during office hour on

00:40:44,579 --> 00:40:50,930
Wednesday on well it's in the building

00:40:48,000 --> 00:40:53,640
sitting it's just over here on the right

00:40:50,930 --> 00:40:56,400
so I'll be able over for an hour if you

00:40:53,640 --> 00:40:58,109
have additional questions so if there is

00:40:56,400 --> 00:41:02,690
a question now I think we have time to

00:40:58,109 --> 00:41:02,690
reply yep

00:41:29,820 --> 00:41:36,849
okay the question is in I can ask it to

00:41:33,550 --> 00:41:39,970
explicitly exclude recipes with a given

00:41:36,849 --> 00:41:43,270
license how can I do it with beetroot we

00:41:39,970 --> 00:41:49,210
do does not do that directly actually

00:41:43,270 --> 00:41:51,580
one of the the thing is he typically is

00:41:49,210 --> 00:41:53,530
used to build a small to medium systems

00:41:51,580 --> 00:41:56,170
where you have quite a good knowledge of

00:41:53,530 --> 00:41:58,260
what goes in your file system so you

00:41:56,170 --> 00:42:02,380
just have a look at your dependencies

00:41:58,260 --> 00:42:06,849
bit root on the other side can produce a

00:42:02,380 --> 00:42:08,650
very detailed reporting about legal or

00:42:06,849 --> 00:42:11,170
related information you just do make

00:42:08,650 --> 00:42:14,400
space legal info it will produce a

00:42:11,170 --> 00:42:17,890
directory with all the license files the

00:42:14,400 --> 00:42:21,790
the tarballs and so on and also a report

00:42:17,890 --> 00:42:23,980
a manifest which is a CSV table with

00:42:21,790 --> 00:42:26,710
whole packages on the target and all

00:42:23,980 --> 00:42:28,869
host packages and with their license and

00:42:26,710 --> 00:42:31,210
additional information so you can look

00:42:28,869 --> 00:42:35,830
into that to see if you have any package

00:42:31,210 --> 00:42:39,010
with a forbidden license and it's a very

00:42:35,830 --> 00:42:43,320
useful tool so you you can do that with

00:42:39,010 --> 00:42:50,460
a little manual intervention yes really

00:42:43,320 --> 00:42:50,460
just another question before we you okay

00:42:53,339 --> 00:43:08,999
oh sorry we have more which tool is

00:43:07,319 --> 00:43:13,339
gonna be used more in the future by

00:43:08,999 --> 00:43:13,339
vendors wallah I really don't know

00:43:13,890 --> 00:43:20,999
I think octo is more used by vendors

00:43:16,849 --> 00:43:21,420
probably yes I think it's more used by

00:43:20,999 --> 00:43:26,519
vendors

00:43:21,420 --> 00:43:29,460
however these disease-related also to

00:43:26,519 --> 00:43:31,469
the philosophy of the project so with

00:43:29,460 --> 00:43:34,069
the OP - it is very typical that each

00:43:31,469 --> 00:43:38,670
vendor has have they owned a year so

00:43:34,069 --> 00:43:40,440
nobody they don't have to go through a

00:43:38,670 --> 00:43:43,609
pet review process they just put them

00:43:40,440 --> 00:43:46,440
there things online and they are there

00:43:43,609 --> 00:43:48,089
this is a pro and con so they can

00:43:46,440 --> 00:43:49,759
publish freely but on the other hand

00:43:48,089 --> 00:43:54,359
there is no quality assurance and

00:43:49,759 --> 00:43:56,849
complete testing we'd build route most

00:43:54,359 --> 00:44:01,499
typically to implement a new platform

00:43:56,849 --> 00:44:03,539
you don't need much in build route in

00:44:01,499 --> 00:44:06,150
most cases you just need a def config

00:44:03,539 --> 00:44:08,160
saying pull the kernel from here pull

00:44:06,150 --> 00:44:11,779
the bootloader from there this is the

00:44:08,160 --> 00:44:14,009
configuration to use and that's it so

00:44:11,779 --> 00:44:15,420
except for some more complex

00:44:14,009 --> 00:44:19,259
architectures that's all you have to do

00:44:15,420 --> 00:44:21,180
so I think some vendors just don't do

00:44:19,259 --> 00:44:25,619
that because I don't know it doesn't

00:44:21,180 --> 00:44:27,900
look so serious stuff like having a

00:44:25,619 --> 00:44:29,339
layer but it's actually a matter of

00:44:27,900 --> 00:44:33,349
having a working camera and walking boot

00:44:29,339 --> 00:44:36,180
loader well a little chain of course ok

00:44:33,349 --> 00:44:37,260
time is out so thank you very much for

00:44:36,180 --> 00:44:45,059
your attention

00:44:37,260 --> 00:44:45,059

YouTube URL: https://www.youtube.com/watch?v=wCVYQWFIvBs


