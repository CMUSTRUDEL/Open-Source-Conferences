Title: Large Scale Deployments for Automated Kernel Testing - Dave Pigott, Linaro
Publication date: 2018-10-25
Playlist: Open Source Summit Europe & ELC + OpenIoT Summit Europe 2018
Description: 
	Large Scale Deployments for Automated Kernel Testing - Dave Pigott, Linaro

 The Linaro Automated Validation Architecture, or LAVA for short, allows users to test kernels, modules, root filesystems and applications in an automated way, allowing systems to look for regressions, improvements, all under the test writers control. The Linux Kernel Functional Test (LKFT) deployment was built on our experience of large automated deployments, and even more lessons were learned as a consequence. This presentation focusses on that deployment and itâ€™s wider implications for others wishing to deploy LAVA.

The requirements for rapid turn around of results means that many devices of a particular type need to be available, and this presents challenges in reliability, control and space utilisation. 

About Dave Pigott
Originally qualified as a Physicist, Dave has been doing embedded computing for so long that when he started it was just known as "computing". He has worked for notable companies, including ARM and Harlequin in Cambridge, and has lived and worked in Sweden, the United States and Italy.

Dave joined the LAVA team at Linaro from the ARM Fast Models team in March of 2011. At that point LAVA was still very much at the drawing board stage, and there was one rack with a server, a switch and a handful of devices on which to model and test our code. When LAVA first went live in July of 2011 we had grown that to 12 devices, mainly TI Pandaboards, and Beagle XMs.
Over the next 7 years, and two office moves, that lab has grown to 17 racks, numerous ARM devices in the main production instance, as well as hosting LAVA micro instances for Linaro's Networking, Power Management and Linux Kernel Functional Test projects.
Captions: 
	00:00:01,790 --> 00:00:06,450
first of all for anybody who knows me

00:00:05,069 --> 00:00:08,639
and I know there are a couple in the

00:00:06,450 --> 00:00:10,860
audience who do I apologize for wearing

00:00:08,639 --> 00:00:15,320
a shirt my wife made me promise not to

00:00:10,860 --> 00:00:19,650
look too much like a geek up on stage so

00:00:15,320 --> 00:00:24,140
my name is Dave Pinkett I am the tech

00:00:19,650 --> 00:00:27,000
lead for the Lennar o lava lab project

00:00:24,140 --> 00:00:30,869
I'm going to be talking today about the

00:00:27,000 --> 00:00:34,290
challenges in deploying test devices

00:00:30,869 --> 00:00:37,829
from every scale from very very low end

00:00:34,290 --> 00:00:41,219
up to the very high end from IOT all the

00:00:37,829 --> 00:00:42,570
way up to server class so the first

00:00:41,219 --> 00:00:47,820
thing I'm going to talk about I'm going

00:00:42,570 --> 00:00:49,649
to talk about lava itself how do we how

00:00:47,820 --> 00:00:53,760
does it work how do we deploy our test

00:00:49,649 --> 00:00:56,120
images what do we do if a board gets

00:00:53,760 --> 00:01:01,230
bricked or where we deploy a test image

00:00:56,120 --> 00:01:03,239
the issues surrounding connectivity the

00:01:01,230 --> 00:01:06,240
physical constraints on deployment

00:01:03,239 --> 00:01:10,640
everything in the Cambridge lab is in

00:01:06,240 --> 00:01:12,390
racks and that produces challenges the

00:01:10,640 --> 00:01:15,600
work I want to talk about the

00:01:12,390 --> 00:01:21,380
administration how we manage the devices

00:01:15,600 --> 00:01:24,030
managed access to the lab then look at

00:01:21,380 --> 00:01:26,430
how we test out before we actually

00:01:24,030 --> 00:01:28,799
deploy new software and your boards

00:01:26,430 --> 00:01:31,619
whatever and then looking at the whole

00:01:28,799 --> 00:01:35,970
concept of very large scale deployments

00:01:31,619 --> 00:01:38,909
going forward so what is lava

00:01:35,970 --> 00:01:40,970
it's the denaro automated validation

00:01:38,909 --> 00:01:48,329
architecture the first implementation

00:01:40,970 --> 00:01:51,990
started late 2010 and it's basically

00:01:48,329 --> 00:01:54,750
just it is not it does not define what

00:01:51,990 --> 00:01:59,369
tests you run you can run any tests you

00:01:54,750 --> 00:02:03,000
like it just allows you to deploy a test

00:01:59,369 --> 00:02:05,820
image so a kernel and a root FS or if

00:02:03,000 --> 00:02:10,530
it's an IOT device just the Zephyr image

00:02:05,820 --> 00:02:12,510
or whatever and then to specify what

00:02:10,530 --> 00:02:14,099
tests you want to run and run them and

00:02:12,510 --> 00:02:17,799
gather there is

00:02:14,099 --> 00:02:20,290
the first iteration was it was

00:02:17,799 --> 00:02:23,950
successful it was good it had some

00:02:20,290 --> 00:02:26,790
limitations and a guy called Neil

00:02:23,950 --> 00:02:31,239
Williams joined the company back in 2014

00:02:26,790 --> 00:02:35,519
and Neil said we need to completely

00:02:31,239 --> 00:02:38,230
change this so the second iteration v2

00:02:35,519 --> 00:02:40,329
you can't believe how many meetings we

00:02:38,230 --> 00:02:44,920
had about what we should call the second

00:02:40,329 --> 00:02:47,980
iteration and we came up with v2 that

00:02:44,920 --> 00:02:52,500
was rolled out fully into the the Ladera

00:02:47,980 --> 00:02:56,079
lab in Cambridge in well last year and

00:02:52,500 --> 00:02:58,599
we've got rid completely of the history

00:02:56,079 --> 00:03:00,730
of v1 and everything there is a database

00:02:58,599 --> 00:03:07,180
archive so we actually do have access to

00:03:00,730 --> 00:03:08,530
the data if we want it so what are the

00:03:07,180 --> 00:03:14,310
challenges when you're trying to do

00:03:08,530 --> 00:03:18,790
automated testing the device ideally

00:03:14,310 --> 00:03:21,699
should boot when you apply power because

00:03:18,790 --> 00:03:26,109
if you have to press a button that gets

00:03:21,699 --> 00:03:28,060
a little bit boring challenging we we

00:03:26,109 --> 00:03:30,099
had conversations going way back about

00:03:28,060 --> 00:03:33,129
having little robot fingers to press

00:03:30,099 --> 00:03:37,720
buttons that's not the way we solve that

00:03:33,129 --> 00:03:40,049
sort of problem but you're going to have

00:03:37,720 --> 00:03:42,579
multiple devices connected to one server

00:03:40,049 --> 00:03:45,010
that lava rays are sort of like now it's

00:03:42,579 --> 00:03:48,280
not quite federated but it will be but

00:03:45,010 --> 00:03:50,709
it's a master slave environment so

00:03:48,280 --> 00:03:54,609
you've got one master which dispatches

00:03:50,709 --> 00:03:59,040
the jobs two slave servers dispatchers

00:03:54,609 --> 00:04:01,180
in fact we call them and if that device

00:03:59,040 --> 00:04:04,750
let's say you've got ten of them

00:04:01,180 --> 00:04:06,760
connected to one server you have to be

00:04:04,750 --> 00:04:10,530
able to uniquely identify that device in

00:04:06,760 --> 00:04:10,530
several different ways one of which is

00:04:10,680 --> 00:04:16,690
if it's a USB serial device the USB

00:04:14,949 --> 00:04:18,820
serial needs to be unique so that you

00:04:16,690 --> 00:04:23,169
can get a unique serial connection if

00:04:18,820 --> 00:04:25,810
it's a fastboot type USB device that has

00:04:23,169 --> 00:04:27,160
to be uniquely identifiable the fastboot

00:04:25,810 --> 00:04:30,970
ID

00:04:27,160 --> 00:04:34,449
we use serial concentrators which allow

00:04:30,970 --> 00:04:36,370
us to just tell that on to the onto a

00:04:34,449 --> 00:04:38,259
board through the serial concentrator

00:04:36,370 --> 00:04:46,539
but not everything has just a standard

00:04:38,259 --> 00:04:50,949
old rs-232 serial so and serial

00:04:46,539 --> 00:04:52,630
connectivity you need to have a serial

00:04:50,949 --> 00:04:54,610
connection to the device so you could

00:04:52,630 --> 00:04:57,160
interact with it lava does everything

00:04:54,610 --> 00:05:01,870
we're okay there's a caveat to that but

00:04:57,160 --> 00:05:03,370
I'll come back to it 99% of all lava

00:05:01,870 --> 00:05:05,860
interaction is through a serial

00:05:03,370 --> 00:05:07,570
interface we don't rely on SSH we don't

00:05:05,860 --> 00:05:10,510
rely on a network we just have to have

00:05:07,570 --> 00:05:13,780
some sort of serial access and that has

00:05:10,510 --> 00:05:17,590
to be reliable that in itself can be

00:05:13,780 --> 00:05:23,979
challenging but I'll go back to that

00:05:17,590 --> 00:05:26,380
caveat with IOT devices you don't have

00:05:23,979 --> 00:05:29,199
an interaction layer all you do is you

00:05:26,380 --> 00:05:31,150
flash an image to it you then look for

00:05:29,199 --> 00:05:35,169
the serial output and look for the

00:05:31,150 --> 00:05:38,590
results when you parse them and put them

00:05:35,169 --> 00:05:40,870
again but they get collated and put back

00:05:38,590 --> 00:05:43,990
up so these are the these are the things

00:05:40,870 --> 00:05:50,979
that we have to address with every

00:05:43,990 --> 00:05:53,979
device so if the board gets bricked the

00:05:50,979 --> 00:05:55,270
first thing we have is power control we

00:05:53,979 --> 00:05:59,530
have remote power control we use

00:05:55,270 --> 00:06:03,190
software controllable PDUs with a PD you

00:05:59,530 --> 00:06:07,050
control abstraction layer which I wrote

00:06:03,190 --> 00:06:10,180
it's a SNMP client which talks to our

00:06:07,050 --> 00:06:12,789
our PD use but there's no reason why you

00:06:10,180 --> 00:06:15,039
couldn't add support for other PD you

00:06:12,789 --> 00:06:21,699
types in fact there was a predecessor to

00:06:15,039 --> 00:06:22,870
the PD you control that gave basically

00:06:21,699 --> 00:06:26,560
did everything over a serial connection

00:06:22,870 --> 00:06:31,260
to the PD use written by matter than as

00:06:26,560 --> 00:06:35,440
Matt's here but I should name checking

00:06:31,260 --> 00:06:40,120
the other thing when you submit a job to

00:06:35,440 --> 00:06:42,090
larvae with some tests it it can

00:06:40,120 --> 00:06:46,750
the job can fail for a number of

00:06:42,090 --> 00:06:49,350
interesting challenging reasons one of

00:06:46,750 --> 00:06:51,970
them is an infrastructure problem if

00:06:49,350 --> 00:06:54,600
larvae detects that there is a problem

00:06:51,970 --> 00:06:58,169
with the serial connectivity with the

00:06:54,600 --> 00:07:01,330
fastboot flash with the network whatever

00:06:58,169 --> 00:07:03,790
what happens is we run a known good job

00:07:01,330 --> 00:07:06,610
with a known good image we run a health

00:07:03,790 --> 00:07:07,960
check and if the board then fails the

00:07:06,610 --> 00:07:10,770
health check we take it off out of the

00:07:07,960 --> 00:07:10,770
pool take it offline

00:07:11,530 --> 00:07:19,540
I mentioned the whole idea of a robot

00:07:16,150 --> 00:07:24,010
finger to press buttons what we've ended

00:07:19,540 --> 00:07:27,550
up doing is actually sourcing some

00:07:24,010 --> 00:07:29,290
Ethernet control relays for emulating

00:07:27,550 --> 00:07:31,570
the push of a button so basically

00:07:29,290 --> 00:07:33,669
wherever the button is you just put a

00:07:31,570 --> 00:07:36,669
wire each side of it put it out onto the

00:07:33,669 --> 00:07:38,260
relay and then you just there's again

00:07:36,669 --> 00:07:40,840
another abstraction layer you control

00:07:38,260 --> 00:07:45,669
the relay you say I want that relay to

00:07:40,840 --> 00:07:47,490
go off for two seconds and then back on

00:07:45,669 --> 00:07:55,660
or the other way around depending on the

00:07:47,490 --> 00:07:57,910
device so the other thing is what if the

00:07:55,660 --> 00:08:00,639
ball what if the board is completely

00:07:57,910 --> 00:08:02,320
brick and even the firmware is not

00:08:00,639 --> 00:08:05,430
reliable well you can reflash the

00:08:02,320 --> 00:08:10,510
firmware on some devices not all and

00:08:05,430 --> 00:08:13,389
again you some devices just give it you

00:08:10,510 --> 00:08:16,930
out of the box some of them again

00:08:13,389 --> 00:08:19,479
require real a connection to put it into

00:08:16,930 --> 00:08:21,210
a recovery state and other devices it's

00:08:19,479 --> 00:08:24,550
just not possible

00:08:21,210 --> 00:08:26,650
so it is completely board dependent and

00:08:24,550 --> 00:08:32,520
we have to come up with solutions on a

00:08:26,650 --> 00:08:35,860
per per board basis and all of that

00:08:32,520 --> 00:08:38,349
feeds into the fact that we have to do

00:08:35,860 --> 00:08:41,289
solder mods which if you're doing if

00:08:38,349 --> 00:08:46,540
you're going to deploy as we have around

00:08:41,289 --> 00:08:48,820
200 devices you know in a lab it doesn't

00:08:46,540 --> 00:08:50,230
scale well lots and lots of folder mods

00:08:48,820 --> 00:08:51,990
doesn't scale well and there's the

00:08:50,230 --> 00:08:55,260
danger that you might

00:08:51,990 --> 00:08:58,300
somehow break the board there's the

00:08:55,260 --> 00:09:03,060
other danger that well solder itself can

00:08:58,300 --> 00:09:05,500
be flaky and this came up yesterday

00:09:03,060 --> 00:09:08,380
there's a thing called the SD much has

00:09:05,500 --> 00:09:09,550
been floating around for about all the

00:09:08,380 --> 00:09:16,090
time I've been at Lennar Oh which is

00:09:09,550 --> 00:09:20,200
eight years the idea here is that you

00:09:16,090 --> 00:09:24,580
have something plugged into an SD slot

00:09:20,200 --> 00:09:28,680
on an on the device and you can write

00:09:24,580 --> 00:09:31,180
the image onto this from the server and

00:09:28,680 --> 00:09:33,970
then switch it so that it just looks

00:09:31,180 --> 00:09:36,130
like an SD card I don't know how many

00:09:33,970 --> 00:09:42,730
iterations of this we've had it started

00:09:36,130 --> 00:09:44,350
with in Orlando in 2011 I won't mention

00:09:42,730 --> 00:09:46,060
the company or the name of the guy who

00:09:44,350 --> 00:09:48,730
but he turned up with this thing it was

00:09:46,060 --> 00:09:53,440
like oh this is brilliant actually we've

00:09:48,730 --> 00:09:57,580
solved all our problems except it would

00:09:53,440 --> 00:10:00,010
work with one board no others we had

00:09:57,580 --> 00:10:03,220
another epic iteration the next year a

00:10:00,010 --> 00:10:07,530
thing called the larva multi-purpose

00:10:03,220 --> 00:10:12,060
multi probe the LMP which had an SD MUX

00:10:07,530 --> 00:10:15,340
it worked most of the time and then

00:10:12,060 --> 00:10:20,380
performance degraded over the period of

00:10:15,340 --> 00:10:23,340
a couple of hours not days even and

00:10:20,380 --> 00:10:25,210
we've had other iterations sent to us

00:10:23,340 --> 00:10:27,160
contribution says there's another one

00:10:25,210 --> 00:10:30,490
which has just turned up I heard about

00:10:27,160 --> 00:10:32,560
in the last couple of days maybe that

00:10:30,490 --> 00:10:35,620
will help but that if we could find the

00:10:32,560 --> 00:10:38,050
perfect SD MUX that would solve an awful

00:10:35,620 --> 00:10:42,100
awful lot of the problems for our sort

00:10:38,050 --> 00:10:44,710
of low-level deployments but we're not

00:10:42,100 --> 00:10:46,330
there yet and it has been a bit of a

00:10:44,710 --> 00:10:48,700
nightmare it's been seven years eight

00:10:46,330 --> 00:10:55,490
years of trying to get something which

00:10:48,700 --> 00:11:00,630
works so the other thing we've learned

00:10:55,490 --> 00:11:03,360
rather painfully overtime and particular

00:11:00,630 --> 00:11:06,080
I want to mention here a lot of this has

00:11:03,360 --> 00:11:09,300
come up in the last two years

00:11:06,080 --> 00:11:11,760
we've had this deployment called the lk

00:11:09,300 --> 00:11:16,650
f t-- than the narrow colonel functional

00:11:11,760 --> 00:11:21,450
test and it's an isolated instance of a

00:11:16,650 --> 00:11:24,750
larvae lab in Cambridge and we had a

00:11:21,450 --> 00:11:29,460
relatively high failure rate in terms of

00:11:24,750 --> 00:11:35,570
infrastructure and those failures were

00:11:29,460 --> 00:11:35,570
serial USB connectivity for fastboot

00:11:35,780 --> 00:11:43,970
networking you name it so the first

00:11:40,050 --> 00:11:47,160
thing one of the first things we did was

00:11:43,970 --> 00:11:50,730
going yet really high quality serial

00:11:47,160 --> 00:11:55,860
cables I hate to name check somebody but

00:11:50,730 --> 00:11:59,090
FTDI are the ones who we buy FTDI cables

00:11:55,860 --> 00:12:04,410
and they are so reliable

00:11:59,090 --> 00:12:07,590
likewise for USB connections for a

00:12:04,410 --> 00:12:11,190
fastboot of the like we bought they're

00:12:07,590 --> 00:12:15,420
much more expensive but shielded USB

00:12:11,190 --> 00:12:17,700
cables who knew we reduced our our

00:12:15,420 --> 00:12:19,110
infrastructure error rate when we first

00:12:17,700 --> 00:12:24,230
started the project was running at

00:12:19,110 --> 00:12:30,480
around 30% it is now below 1% we have a

00:12:24,230 --> 00:12:32,280
99% infrastructure reliability which was

00:12:30,480 --> 00:12:36,690
like a dream when we started this

00:12:32,280 --> 00:12:38,790
project and the other thing we had a

00:12:36,690 --> 00:12:42,630
challenge which is which goes back a

00:12:38,790 --> 00:12:47,910
long long way the USB hubs that we used

00:12:42,630 --> 00:12:51,570
I well we have spent a lot of money on

00:12:47,910 --> 00:12:53,280
USB hubs over the years because all the

00:12:51,570 --> 00:12:55,710
devices need to be need to be connected

00:12:53,280 --> 00:13:02,370
they need to be available on USB and we

00:12:55,710 --> 00:13:04,020
had reliability issues it seemed it

00:13:02,370 --> 00:13:06,209
didn't matter home and how much you

00:13:04,020 --> 00:13:09,040
spent on the USB hub

00:13:06,209 --> 00:13:10,870
after a period of time the colonel on

00:13:09,040 --> 00:13:15,820
the server it was connected to would

00:13:10,870 --> 00:13:17,230
just start to go there I don't I don't

00:13:15,820 --> 00:13:18,310
know that there's even anything

00:13:17,230 --> 00:13:23,010
connected anymore

00:13:18,310 --> 00:13:25,720
and the other challenge we had

00:13:23,010 --> 00:13:29,290
particularly when the ninety six boards

00:13:25,720 --> 00:13:34,420
project started delivering hardware to

00:13:29,290 --> 00:13:37,079
us was that there's only one USB

00:13:34,420 --> 00:13:41,170
controller on the consumer edition

00:13:37,079 --> 00:13:44,110
ninety six board so and there's no

00:13:41,170 --> 00:13:46,959
ethernet so we needed USB Ethernet but

00:13:44,110 --> 00:13:50,610
you also need USB to control the

00:13:46,959 --> 00:13:54,610
on-the-go port for flashing your images

00:13:50,610 --> 00:13:57,070
and the only way of doing this if if you

00:13:54,610 --> 00:13:59,680
physically have a board at your desk

00:13:57,070 --> 00:14:02,290
that's fine because you just go up I

00:13:59,680 --> 00:14:07,570
just unplugged the OTG and that flips

00:14:02,290 --> 00:14:09,370
over and enables the other USB ports you

00:14:07,570 --> 00:14:15,430
can't do that in an automated

00:14:09,370 --> 00:14:19,959
environment and so going back nearly two

00:14:15,430 --> 00:14:22,300
years somebody at arm said me an email

00:14:19,959 --> 00:14:25,600
saying oh this this little company make

00:14:22,300 --> 00:14:29,470
really good USB hubs and they're here in

00:14:25,600 --> 00:14:33,190
Cambridge and having bought numerous USB

00:14:29,470 --> 00:14:34,769
hubs over the years I thought yeah okay

00:14:33,190 --> 00:14:41,920
I'm sure this is going to be fantastic

00:14:34,769 --> 00:14:43,180
we'll take a look so I contacted this

00:14:41,920 --> 00:14:45,040
company they're called cambree onyx

00:14:43,180 --> 00:14:50,920
they're upon some John's Innovation

00:14:45,040 --> 00:14:56,680
Center in Cambridge and I asked if we

00:14:50,920 --> 00:14:57,490
could borrow one to test it out and yeah

00:14:56,680 --> 00:15:01,329
sure no problem

00:14:57,490 --> 00:15:04,600
I said they sent it it was coming up to

00:15:01,329 --> 00:15:06,579
Christmas and I remember I'll just

00:15:04,600 --> 00:15:10,149
unpack it and take a look and it's a

00:15:06,579 --> 00:15:13,180
very industrial looking thing 415 USB

00:15:10,149 --> 00:15:16,870
ports the claim on the box is it

00:15:13,180 --> 00:15:20,450
guarantees 2.1 amps per port maximum

00:15:16,870 --> 00:15:25,710
load it comes with a very very big

00:15:20,450 --> 00:15:30,720
and then like all I did was I plugged it

00:15:25,710 --> 00:15:36,510
in to my laptop and lo and behold it

00:15:30,720 --> 00:15:39,120
turned up as a serial device okay so I

00:15:36,510 --> 00:15:42,600
just did a little hacker with a surgeon

00:15:39,120 --> 00:15:45,830
at config and tell knitted on to it

00:15:42,600 --> 00:15:52,080
and I got a command line from a USB hub

00:15:45,830 --> 00:15:55,490
so I typed help and it came up with a

00:15:52,080 --> 00:16:00,330
load of things I could do one of which

00:15:55,490 --> 00:16:02,610
was to control the power on that port on

00:16:00,330 --> 00:16:05,150
any port I control the power on all the

00:16:02,610 --> 00:16:09,060
ports or just one port at a time

00:16:05,150 --> 00:16:10,920
so a little Python later I had an

00:16:09,060 --> 00:16:15,930
abstraction layer that allowed us to

00:16:10,920 --> 00:16:18,330
just say I want that port on or that

00:16:15,930 --> 00:16:20,040
port sorry in sync mode or typically we

00:16:18,330 --> 00:16:23,670
power it off while we put it in sig mode

00:16:20,040 --> 00:16:25,020
because we need data not just power so

00:16:23,670 --> 00:16:28,380
you put it in sync mode or you put it

00:16:25,020 --> 00:16:31,260
off there are all sorts of other things

00:16:28,380 --> 00:16:33,450
that that Script allows you can go and

00:16:31,260 --> 00:16:35,340
find out the state of a port for example

00:16:33,450 --> 00:16:42,680
just so that you you're very short of

00:16:35,340 --> 00:16:44,490
where you are what's more it's

00:16:42,680 --> 00:16:47,280
unbelievably reliable

00:16:44,490 --> 00:16:49,980
I have never in a year and a half two

00:16:47,280 --> 00:16:51,390
years had any problem with the kernel

00:16:49,980 --> 00:16:59,310
groaning I don't know anything about any

00:16:51,390 --> 00:17:01,290
us DB devices anymore not once so I then

00:16:59,310 --> 00:17:02,870
went back to cambree onyx and I said

00:17:01,290 --> 00:17:08,880
this is great

00:17:02,870 --> 00:17:11,330
I'll buy ten and he then told me how

00:17:08,880 --> 00:17:11,330
much they were

00:17:11,930 --> 00:17:22,830
they're a bit more expensive than most

00:17:14,160 --> 00:17:27,290
USB hubs but it did buy 10 and we now

00:17:22,830 --> 00:17:27,290
have something like 30 in the lab

00:17:27,980 --> 00:17:35,040
spending ostensibly probably about eight

00:17:32,190 --> 00:17:41,340
times more than you would on a high

00:17:35,040 --> 00:17:43,290
quality USB hub has been absolutely

00:17:41,340 --> 00:17:47,910
worth its weight in gold because the

00:17:43,290 --> 00:17:49,830
reliability so it is worth if you are

00:17:47,910 --> 00:17:51,990
trying to do any sort of large-scale

00:17:49,830 --> 00:17:55,140
deployment spending that money because

00:17:51,990 --> 00:17:56,520
if you don't you're going to end up with

00:17:55,140 --> 00:18:01,380
30 percent failure rates that's all

00:17:56,520 --> 00:18:03,900
nonsense so then there's the physical

00:18:01,380 --> 00:18:08,010
aspect so how you're going to deploy

00:18:03,900 --> 00:18:10,410
something you get a wide range of form

00:18:08,010 --> 00:18:15,270
factors everything but so IOT boards can

00:18:10,410 --> 00:18:19,280
be like that big and you've got service

00:18:15,270 --> 00:18:25,230
which come in two and in one case 3u

00:18:19,280 --> 00:18:28,200
forms so anything that's on a relatively

00:18:25,230 --> 00:18:29,790
small form factor we tend to just use

00:18:28,200 --> 00:18:31,800
monitor shelves we just put monitor

00:18:29,790 --> 00:18:39,180
shelves in and then fix them onto the

00:18:31,800 --> 00:18:43,200
shelf using various techniques in the

00:18:39,180 --> 00:18:50,120
cases of boards that come in odd form

00:18:43,200 --> 00:18:53,600
factors an example is well okay the

00:18:50,120 --> 00:18:57,030
versatile Express platform comes in a

00:18:53,600 --> 00:18:57,870
box very nice-looking box but when

00:18:57,030 --> 00:19:01,380
you're trying to do large scale

00:18:57,870 --> 00:19:04,080
deployments it's not great so what you

00:19:01,380 --> 00:19:08,240
do is you refactor it into a one new

00:19:04,080 --> 00:19:11,520
case which costs you about 40 pounds and

00:19:08,240 --> 00:19:13,670
you end up being able to deploy many

00:19:11,520 --> 00:19:17,120
many more into the equivalent medicine

00:19:13,670 --> 00:19:17,120
space in Iraq

00:19:17,270 --> 00:19:24,870
and one of the things we are doing now

00:19:22,100 --> 00:19:28,290
because of our LK of T we had to look at

00:19:24,870 --> 00:19:31,950
how can we get more boards if we've got

00:19:28,290 --> 00:19:37,770
the small form factors how do we get

00:19:31,950 --> 00:19:41,250
them into multiple multiple into one

00:19:37,770 --> 00:19:45,000
case and we started doing this manually

00:19:41,250 --> 00:19:48,679
I'll come to the future of that in

00:19:45,000 --> 00:19:52,559
towards the end of the presentation but

00:19:48,679 --> 00:19:56,309
the next problem is we've got a large

00:19:52,559 --> 00:20:00,660
regards actually there's five six larvae

00:19:56,309 --> 00:20:04,770
instances in the lab one for networking

00:20:00,660 --> 00:20:07,200
one for just general daily day-to-day

00:20:04,770 --> 00:20:12,900
testing lkf t power management group

00:20:07,200 --> 00:20:15,030
have their own we have the light the IOT

00:20:12,900 --> 00:20:16,770
group have their own instance and then

00:20:15,030 --> 00:20:19,740
we've got a couple of staging instances

00:20:16,770 --> 00:20:23,820
and you have to manage the configuration

00:20:19,740 --> 00:20:26,309
of all this because all those tools I

00:20:23,820 --> 00:20:29,820
was talking about the SNMP PD you

00:20:26,309 --> 00:20:32,730
control the USB hub control all of that

00:20:29,820 --> 00:20:36,210
stuff you have to get that onto each of

00:20:32,730 --> 00:20:41,130
the the dispatches so that's available

00:20:36,210 --> 00:20:44,040
for larva to use so all of that server

00:20:41,130 --> 00:20:46,140
and larva configuration we hold in a

00:20:44,040 --> 00:20:48,600
salt repo I don't know if anybody

00:20:46,140 --> 00:20:51,890
everybody is aware of salt but it's a

00:20:48,600 --> 00:20:55,020
very good configuration management tool

00:20:51,890 --> 00:20:58,320
it basically you have one central

00:20:55,020 --> 00:21:01,260
repository and then you salt the changes

00:20:58,320 --> 00:21:06,840
across all the different dispatches from

00:21:01,260 --> 00:21:09,270
the one master server we use ansible for

00:21:06,840 --> 00:21:11,100
user account management there i've got

00:21:09,270 --> 00:21:13,080
the links to the various bits and pieces

00:21:11,100 --> 00:21:17,900
you can have a look in if you look at

00:21:13,080 --> 00:21:20,580
larvae lab kit you'll see all of those

00:21:17,900 --> 00:21:23,040
there in shared lab scripts there's all

00:21:20,580 --> 00:21:29,000
the stuff that specifically to do all

00:21:23,040 --> 00:21:29,000
that lovely control and monitoring and

00:21:29,370 --> 00:21:36,250
the announce table there's all the user

00:21:34,090 --> 00:21:40,170
account management specifically as well

00:21:36,250 --> 00:21:42,970
added to that is a VPN access because

00:21:40,170 --> 00:21:45,340
sometimes people don't just want to

00:21:42,970 --> 00:21:48,550
submit jobs remotely or using a bot

00:21:45,340 --> 00:21:51,460
whatever they want to be able to

00:21:48,550 --> 00:21:53,170
actually talk to a board and there's a

00:21:51,460 --> 00:21:54,850
thing called a lava hacking session

00:21:53,170 --> 00:21:57,850
which allows you to do that you submit a

00:21:54,850 --> 00:22:01,510
job as a hacking session it deploys the

00:21:57,850 --> 00:22:04,810
image you want gets the boot the board

00:22:01,510 --> 00:22:06,670
powered up and then gives you SSH access

00:22:04,810 --> 00:22:10,480
as long as you are within the lab

00:22:06,670 --> 00:22:13,150
network for that you need VPN and you

00:22:10,480 --> 00:22:16,420
can do it with remote SSH access into a

00:22:13,150 --> 00:22:25,440
gateway box but the principles still the

00:22:16,420 --> 00:22:27,820
same and for people who want to do other

00:22:25,440 --> 00:22:29,920
types of testing where they they don't

00:22:27,820 --> 00:22:32,110
that they may want to do lots of reboots

00:22:29,920 --> 00:22:33,220
because a hacking session stops the

00:22:32,110 --> 00:22:38,800
moment the board reboots

00:22:33,220 --> 00:22:41,890
and you're kicked out if you want to get

00:22:38,800 --> 00:22:44,980
onto a board and play around with a a

00:22:41,890 --> 00:22:45,430
lot more we give us SH access through

00:22:44,980 --> 00:22:48,700
VPN

00:22:45,430 --> 00:22:51,750
on to your control server and then

00:22:48,700 --> 00:22:55,660
there's a thing develop LXE it's called

00:22:51,750 --> 00:22:58,120
script it just runs a container brings

00:22:55,660 --> 00:23:01,210
the device up passes all the information

00:22:58,120 --> 00:23:02,920
through to the container and you can do

00:23:01,210 --> 00:23:04,600
what you want then you can tell that on

00:23:02,920 --> 00:23:07,180
to the board yet so you can get serial

00:23:04,600 --> 00:23:09,130
access you can flash anything you want

00:23:07,180 --> 00:23:13,210
onto it that you know anything you want

00:23:09,130 --> 00:23:16,270
so that goes outside of lava but it

00:23:13,210 --> 00:23:18,940
allows another layer of interaction and

00:23:16,270 --> 00:23:21,610
our power management working group tend

00:23:18,940 --> 00:23:25,150
to use that quite a lot because they're

00:23:21,610 --> 00:23:26,710
testing out all sorts of weird things

00:23:25,150 --> 00:23:32,470
that happen during boot as they're doing

00:23:26,710 --> 00:23:36,850
power measurement and I mentioned it

00:23:32,470 --> 00:23:40,179
briefly staging instances so we have to

00:23:36,850 --> 00:23:41,500
staging instances one for the main lava

00:23:40,179 --> 00:23:44,170
production and one

00:23:41,500 --> 00:23:49,030
for specifically for elk AFT the colonel

00:23:44,170 --> 00:23:51,190
functional test it's very important

00:23:49,030 --> 00:23:52,660
because you can't just there's a new

00:23:51,190 --> 00:23:58,420
release of lava every month

00:23:52,660 --> 00:23:59,920
practically you can't just install the

00:23:58,420 --> 00:24:02,710
new release and go oh I'm sure

00:23:59,920 --> 00:24:04,960
everything will be fine because often

00:24:02,710 --> 00:24:08,020
it's not something fundamental may be

00:24:04,960 --> 00:24:10,510
broken so we have at least one instance

00:24:08,020 --> 00:24:13,570
of every device type in our staging

00:24:10,510 --> 00:24:17,050
instances and with that way we get to

00:24:13,570 --> 00:24:20,080
test out the new releases of lava also

00:24:17,050 --> 00:24:22,750
and this is really important for elk AFT

00:24:20,080 --> 00:24:25,420
when there's a new firmware available

00:24:22,750 --> 00:24:27,370
new bootloader available you don't just

00:24:25,420 --> 00:24:29,440
put it on a production instance and just

00:24:27,370 --> 00:24:32,890
go I'm sure everything will be fine

00:24:29,440 --> 00:24:33,280
again because it never is it really

00:24:32,890 --> 00:24:36,910
isn't

00:24:33,280 --> 00:24:39,070
we have had so many oh no this this this

00:24:36,910 --> 00:24:40,780
fixes everything don't worry and we've

00:24:39,070 --> 00:24:43,450
gone ok it fixes everything

00:24:40,780 --> 00:24:48,910
they there's broken everything but the

00:24:43,450 --> 00:24:50,830
one thing it fixed so we always if we

00:24:48,910 --> 00:24:53,740
get new firmware we test it out in the

00:24:50,830 --> 00:24:56,500
staging instance and we test it to

00:24:53,740 --> 00:24:59,410
destruction practically because we have

00:24:56,500 --> 00:25:01,480
to we we have to provide a service that

00:24:59,410 --> 00:25:05,290
is high reliability high availability

00:25:01,480 --> 00:25:08,590
and so we we cannot take those risks and

00:25:05,290 --> 00:25:10,560
we we risk-averse we have to be we're

00:25:08,590 --> 00:25:14,800
providing a service

00:25:10,560 --> 00:25:23,080
so I mentioned large-scale deployments

00:25:14,800 --> 00:25:25,900
where we're looking for ways to scale up

00:25:23,080 --> 00:25:32,380
massively so we're working with a third

00:25:25,900 --> 00:25:37,000
party to fit 16 of the 96 board see a

00:25:32,380 --> 00:25:38,080
form factor into one you and that is

00:25:37,000 --> 00:25:39,400
more of a challenge than you think

00:25:38,080 --> 00:25:41,340
because you've got to get all the power

00:25:39,400 --> 00:25:44,050
in there to power all those boards

00:25:41,340 --> 00:25:47,320
you've gotta have all the cereal and all

00:25:44,050 --> 00:25:50,710
we want is the ability to plug one

00:25:47,320 --> 00:25:53,710
network cable in one power cable in

00:25:50,710 --> 00:25:58,470
and what USB cable in and everything

00:25:53,710 --> 00:26:00,700
else is done within that instance and we

00:25:58,470 --> 00:26:04,600
when you have that that's actually the

00:26:00,700 --> 00:26:08,200
last design template I got from the

00:26:04,600 --> 00:26:10,149
third party if anybody wants to talk to

00:26:08,200 --> 00:26:16,710
me about that in detail I could do so

00:26:10,149 --> 00:26:21,970
outside of the session if we can do that

00:26:16,710 --> 00:26:28,960
16 boards in one year we use we could

00:26:21,970 --> 00:26:31,149
have hundreds of boards in one rack the

00:26:28,960 --> 00:26:34,539
scalability the reliability is going to

00:26:31,149 --> 00:26:36,990
be key in this but I have great faith in

00:26:34,539 --> 00:26:40,240
the company doing this but the

00:26:36,990 --> 00:26:43,210
scalability is going to be enormous it's

00:26:40,240 --> 00:26:44,940
going to be a huge benefit to us going

00:26:43,210 --> 00:26:48,340
forward because we have requirements

00:26:44,940 --> 00:26:51,760
where we will need hundreds of a

00:26:48,340 --> 00:26:53,620
particular board type or even mixes of

00:26:51,760 --> 00:26:56,260
board types because it doesn't have to

00:26:53,620 --> 00:26:58,690
be just one board type in there as long

00:26:56,260 --> 00:27:03,299
as they're of the right form factor they

00:26:58,690 --> 00:27:05,980
can be you can have a complete mix

00:27:03,299 --> 00:27:12,399
that's where we're going those are the

00:27:05,980 --> 00:27:14,380
challenges we've faced and that is the

00:27:12,399 --> 00:27:16,539
end of my presentation if are there any

00:27:14,380 --> 00:27:19,710
questions if there are there's

00:27:16,539 --> 00:27:19,710
microphones here and here

00:27:35,550 --> 00:27:42,180
that's all oh yeah hey is there any

00:27:40,720 --> 00:27:45,610
particular reason why you used

00:27:42,180 --> 00:27:47,620
separately salt and ansible I believe

00:27:45,610 --> 00:27:54,990
you can do you can use only one of them

00:27:47,620 --> 00:27:57,220
right its history all right so the

00:27:54,990 --> 00:28:00,370
originally we used salt for everything

00:27:57,220 --> 00:28:05,350
and that was initiated by Andy don't

00:28:00,370 --> 00:28:07,960
going back a few years and then ansible

00:28:05,350 --> 00:28:11,860
became the thing that was being used by

00:28:07,960 --> 00:28:16,630
other areas within the Naro so there is

00:28:11,860 --> 00:28:20,650
a I have a project to migrate everything

00:28:16,630 --> 00:28:21,910
to ansible but everything is in salt at

00:28:20,650 --> 00:28:32,770
the moment that works and it's one of

00:28:21,910 --> 00:28:34,920
those yeah I don't want to change anyone

00:28:32,770 --> 00:28:34,920
else

00:28:38,000 --> 00:28:48,249
okay and thank you very much

00:28:41,850 --> 00:28:48,249

YouTube URL: https://www.youtube.com/watch?v=VnlPmQ1I6hA


