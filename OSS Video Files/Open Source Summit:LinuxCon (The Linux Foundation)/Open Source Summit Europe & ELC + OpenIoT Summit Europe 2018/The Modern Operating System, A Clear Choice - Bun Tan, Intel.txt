Title: The Modern Operating System, A Clear Choice - Bun Tan, Intel
Publication date: 2018-10-25
Playlist: Open Source Summit Europe & ELC + OpenIoT Summit Europe 2018
Description: 
	The Modern Operating System, A Clear Choice - Bun Tan, Intel

This session introduces the Clear Linux OS, its core value propositions, and why it is a modern approach to Linux distros. We will discuss how these core pillars of Clear Linux make it a modern OS, and how itâ€™s positioned to provide solutions to help deliver, performance and security from the edge to the cloud. 

About Bun Tan
Bun is a Technical Marketing Engineer at Intel's Open Source Technology Center working on the Clear Linux Project. He is responsible for documentation, training, showcasing, and customer support.
Captions: 
	00:00:00,030 --> 00:00:06,540
so so allow me to introduce myself my

00:00:04,890 --> 00:00:09,480
name is boon tan I'm a technical

00:00:06,540 --> 00:00:11,460
marketing engineer at Intel's open

00:00:09,480 --> 00:00:13,860
source Technology Center

00:00:11,460 --> 00:00:16,049
my goal today is to basically give you a

00:00:13,860 --> 00:00:19,020
brief introduction to what Claire Linux

00:00:16,049 --> 00:00:21,930
is and talk about it's you know it

00:00:19,020 --> 00:00:24,000
distinct features all right so and feel

00:00:21,930 --> 00:00:26,279
free to stop me along the way and ask

00:00:24,000 --> 00:00:31,859
questions it would be good to be have it

00:00:26,279 --> 00:00:34,230
as an interactive session here ok so the

00:00:31,859 --> 00:00:36,570
agenda I'm going to go over is why you

00:00:34,230 --> 00:00:39,690
know the clear linux OS i'll talk about

00:00:36,570 --> 00:00:42,690
the security and performance features of

00:00:39,690 --> 00:00:44,489
clear linux and some of the you know the

00:00:42,690 --> 00:00:46,920
distinguishing features of clear Lake's

00:00:44,489 --> 00:00:50,190
how as it compares to other distros and

00:00:46,920 --> 00:00:52,079
then i'll talk about how you can easily

00:00:50,190 --> 00:00:54,300
customize your own version of clear

00:00:52,079 --> 00:01:00,329
linux very easily with some of the tools

00:00:54,300 --> 00:01:04,470
that we make of it available ok ok so

00:01:00,329 --> 00:01:07,080
why clear linux so as more and more

00:01:04,470 --> 00:01:09,060
intelligent devices and systems get

00:01:07,080 --> 00:01:10,860
connected to the internet we believe

00:01:09,060 --> 00:01:13,229
that the operating system that run on

00:01:10,860 --> 00:01:16,140
these device must meet the demand of

00:01:13,229 --> 00:01:18,990
modern-day usages right the demand of

00:01:16,140 --> 00:01:21,450
these modern day you know these usages

00:01:18,990 --> 00:01:24,960
means that the that the operating system

00:01:21,450 --> 00:01:27,659
should be performant it should be secure

00:01:24,960 --> 00:01:29,369
and it should be easily customizable and

00:01:27,659 --> 00:01:32,009
it should be easily manageable as well

00:01:29,369 --> 00:01:34,259
and we believe that you know the the

00:01:32,009 --> 00:01:37,829
operating system that meets these

00:01:34,259 --> 00:01:40,560
criterias is it's actually the the clear

00:01:37,829 --> 00:01:43,470
linux OS itself clear linux is an

00:01:40,560 --> 00:01:46,259
open-source operating system completely

00:01:43,470 --> 00:01:49,200
open and it's optimized for performance

00:01:46,259 --> 00:01:52,530
and security and it is designed to work

00:01:49,200 --> 00:01:54,240
in any range of you know environments

00:01:52,530 --> 00:01:57,479
right from the cloud all the way to the

00:01:54,240 --> 00:02:00,619
edge and it is very easy to customize

00:01:57,479 --> 00:02:00,619
and it's easy to deploy

00:02:01,140 --> 00:02:08,550
so people have asked you know what's

00:02:05,130 --> 00:02:10,679
what is it based on so the answer to

00:02:08,550 --> 00:02:12,990
that is clear linux is actually designed

00:02:10,679 --> 00:02:15,120
from the ground up it is

00:02:12,990 --> 00:02:18,390
based on all the learnings that we've

00:02:15,120 --> 00:02:19,980
had and you know in the Intel OTC center

00:02:18,390 --> 00:02:21,960
from the years and years that we've come

00:02:19,980 --> 00:02:24,150
you know contributed to basically open

00:02:21,960 --> 00:02:26,640
source projects right so there's a lot

00:02:24,150 --> 00:02:28,200
of learnings we had and we put all the

00:02:26,640 --> 00:02:31,230
best features and all the things that we

00:02:28,200 --> 00:02:31,980
know in to clear Linux it is an industry

00:02:31,230 --> 00:02:35,070
blueprint

00:02:31,980 --> 00:02:36,740
- that incorporates basically all you

00:02:35,070 --> 00:02:39,630
know that gives you the best performance

00:02:36,740 --> 00:02:43,200
capability on Intel hardware itself

00:02:39,630 --> 00:02:45,720
right you know if you buy the latest

00:02:43,200 --> 00:02:48,570
hardware or something like that you know

00:02:45,720 --> 00:02:51,180
you have Intel hardware we you know we'd

00:02:48,570 --> 00:02:52,890
rather you be using a newer operating

00:02:51,180 --> 00:02:54,180
system that has the best that takes

00:02:52,890 --> 00:02:56,370
advantage of the hardware instead of

00:02:54,180 --> 00:02:57,990
using a three-year-old OS that you know

00:02:56,370 --> 00:02:59,430
you can't take advantage of what you

00:02:57,990 --> 00:03:01,620
just paid for right so we want to give

00:02:59,430 --> 00:03:03,630
you the best performance and that's why

00:03:01,620 --> 00:03:05,790
clear Linux is there is basically it

00:03:03,630 --> 00:03:07,650
knows how to take advantage of all those

00:03:05,790 --> 00:03:11,040
things we work to optimize it as much as

00:03:07,650 --> 00:03:14,010
possible for Intel that's it it does run

00:03:11,040 --> 00:03:17,370
on AMD and it does also runs on arm as

00:03:14,010 --> 00:03:19,170
well so we have you know intel has FPGA

00:03:17,370 --> 00:03:24,390
hardware solution and we know that it

00:03:19,170 --> 00:03:26,490
runs on FPGA for sure so Kleenex is

00:03:24,390 --> 00:03:31,530
available on our web site at Clear Lake

00:03:26,490 --> 00:03:34,710
or you can get it on web cloud solutions

00:03:31,530 --> 00:03:38,880
such as Asher in AWS you can find it on

00:03:34,710 --> 00:03:41,940
Google as well we have many ways to you

00:03:38,880 --> 00:03:46,290
know run clear Linux so there's also

00:03:41,940 --> 00:03:51,060
docker as well so okay so let's talk

00:03:46,290 --> 00:03:53,250
about security right so security is very

00:03:51,060 --> 00:03:55,290
very important for clear Linux and for

00:03:53,250 --> 00:03:57,390
Intel in general we want to make sure

00:03:55,290 --> 00:04:00,090
that the software that you're running is

00:03:57,390 --> 00:04:03,000
secure so what we do is we actually stay

00:04:00,090 --> 00:04:06,620
in you know we do a constant CVE

00:04:03,000 --> 00:04:09,090
scanning all the time we if there's any

00:04:06,620 --> 00:04:11,730
patches or anything that needs to go out

00:04:09,090 --> 00:04:14,220
we'll get it out in less than 24 hours

00:04:11,730 --> 00:04:16,140
right so we don't wait three months we

00:04:14,220 --> 00:04:17,940
don't wait six months or a year to

00:04:16,140 --> 00:04:22,630
basically roll out the next release of

00:04:17,940 --> 00:04:25,060
patches we are a rolling release we do

00:04:22,630 --> 00:04:26,770
we on average we do up to 10 releases a

00:04:25,060 --> 00:04:28,750
week so they're you know they're small

00:04:26,770 --> 00:04:30,460
incremental updates but any updates that

00:04:28,750 --> 00:04:31,960
needs to get out will get it out as soon

00:04:30,460 --> 00:04:39,640
as possible so you don't have to wait

00:04:31,960 --> 00:04:42,640
for it okay so in terms of security we

00:04:39,640 --> 00:04:44,830
also offer a unified trust or so this is

00:04:42,640 --> 00:04:47,440
where you know your certificates can be

00:04:44,830 --> 00:04:50,170
stored right that way you don't have to

00:04:47,440 --> 00:04:52,750
deal with multiple you know it's trust

00:04:50,170 --> 00:04:54,550
doors in and like certain districts have

00:04:52,750 --> 00:04:57,010
multiple and I've heard from developers

00:04:54,550 --> 00:04:59,250
that it can be quite a pain to basically

00:04:57,010 --> 00:05:01,720
have to deal with multiple ones so a

00:04:59,250 --> 00:05:05,290
unified places where you know it makes

00:05:01,720 --> 00:05:07,410
it easier in terms of industry standard

00:05:05,290 --> 00:05:09,520
security features so out of the box

00:05:07,410 --> 00:05:11,560
there's some of the software that we

00:05:09,520 --> 00:05:13,900
install we configure them to be as

00:05:11,560 --> 00:05:16,180
secure as possible we close up a lot you

00:05:13,900 --> 00:05:20,410
know and loopholes or you know on known

00:05:16,180 --> 00:05:22,270
ports and so forth so that when out of

00:05:20,410 --> 00:05:24,520
the box it's secure and then you have

00:05:22,270 --> 00:05:28,120
the choice to basically go and configure

00:05:24,520 --> 00:05:35,260
what you need for for your own usage for

00:05:28,120 --> 00:05:38,050
it okay so in terms of performance so in

00:05:35,260 --> 00:05:41,530
terms of performance we actually

00:05:38,050 --> 00:05:43,390
optimize you know throughout the entire

00:05:41,530 --> 00:05:46,300
stack right we don't look at just one

00:05:43,390 --> 00:05:47,770
area of the operating system we look at

00:05:46,300 --> 00:05:49,660
you know the kernel we look at the

00:05:47,770 --> 00:05:52,090
drivers we look at runtime we look

00:05:49,660 --> 00:05:53,770
middleware all up and down just you know

00:05:52,090 --> 00:05:56,110
the staff right we want you to get the

00:05:53,770 --> 00:05:58,180
best performance and the best user

00:05:56,110 --> 00:06:00,190
experience out of an operating system

00:05:58,180 --> 00:06:02,770
and the software that you install on

00:06:00,190 --> 00:06:07,470
clear Linux right so we do a lot of work

00:06:02,770 --> 00:06:07,470
to make it better for for the user

00:06:10,020 --> 00:06:15,300
so these are these are some of the

00:06:12,300 --> 00:06:18,750
things that we do to basically optimize

00:06:15,300 --> 00:06:21,420
the OS to run best on Intel hardware so

00:06:18,750 --> 00:06:22,950
at the kernel level right we ship we

00:06:21,420 --> 00:06:26,370
always ship with the with the very

00:06:22,950 --> 00:06:29,340
latest and we do make older kernels

00:06:26,370 --> 00:06:31,440
available as well if you need it so and

00:06:29,340 --> 00:06:34,590
then in terms of library we leverage

00:06:31,440 --> 00:06:36,270
runtime optimizations and that allows

00:06:34,590 --> 00:06:39,420
you to basically auto select different

00:06:36,270 --> 00:06:44,070
libraries at runtime so for example if

00:06:39,420 --> 00:06:45,450
the avx2 and avx-512 right so if if a

00:06:44,070 --> 00:06:49,440
particularly if the hardware that you

00:06:45,450 --> 00:06:51,270
have will support avx-512 and when your

00:06:49,440 --> 00:06:53,130
software starts up we will on them to

00:06:51,270 --> 00:06:55,590
dynamically select that one instead of

00:06:53,130 --> 00:06:57,720
going to an older one right so you get

00:06:55,590 --> 00:06:59,880
the best of both but you get the best in

00:06:57,720 --> 00:07:03,140
that sense and then in terms of

00:06:59,880 --> 00:07:07,490
compiling software we you know we use

00:07:03,140 --> 00:07:09,510
compiler flags that basically that

00:07:07,490 --> 00:07:11,520
aggressive compiler flags that takes

00:07:09,510 --> 00:07:15,510
advantage of the hardware that we have

00:07:11,520 --> 00:07:17,700
on there right so okay and then on the

00:07:15,510 --> 00:07:20,700
latest hardware our AVX optimization

00:07:17,700 --> 00:07:23,010
library is selected at application

00:07:20,700 --> 00:07:26,040
runtime just as I was stating earlier so

00:07:23,010 --> 00:07:29,610
ok let me know if you guys have any

00:07:26,040 --> 00:07:31,140
questions so here's an example of some

00:07:29,610 --> 00:07:36,710
of the optimization work that we do for

00:07:31,140 --> 00:07:40,230
the tensile tensor flow library right so

00:07:36,710 --> 00:07:42,780
that we ship so at the kernel way level

00:07:40,230 --> 00:07:48,120
we tune you know weaken the kernel for

00:07:42,780 --> 00:07:50,850
critical workloads the gcg Lib C library

00:07:48,120 --> 00:07:54,420
we tune you know we add additional

00:07:50,850 --> 00:07:58,640
routines for avx-512 and then for Python

00:07:54,420 --> 00:08:02,060
we add the AVX avx2 and avx-512

00:07:58,640 --> 00:08:06,840
optimizations for Python and then for

00:08:02,060 --> 00:08:09,570
for these modules we optimize them like

00:08:06,840 --> 00:08:12,390
the numpy and the pandas and then we

00:08:09,570 --> 00:08:17,400
have you know avx-512 optimizations for

00:08:12,390 --> 00:08:20,100
the eigen c++ template library so and

00:08:17,400 --> 00:08:22,200
then obviously we use the latest GCC

00:08:20,100 --> 00:08:23,610
compiler and we use all the flags that

00:08:22,200 --> 00:08:25,320
basically

00:08:23,610 --> 00:08:27,270
so that it would take advantage of the

00:08:25,320 --> 00:08:33,690
hardware that's available that you have

00:08:27,270 --> 00:08:36,210
there so okay so some of the other

00:08:33,690 --> 00:08:38,910
distinct distinguishing features of

00:08:36,210 --> 00:08:42,120
clear Linux so clear Linux works at a

00:08:38,910 --> 00:08:43,620
bundled level it doesn't people have

00:08:42,120 --> 00:08:46,050
always asked me like you know which

00:08:43,620 --> 00:08:48,900
package manager do you use so we don't

00:08:46,050 --> 00:08:51,030
use a package manager we use we deliver

00:08:48,900 --> 00:08:55,530
software through bundles a bundle

00:08:51,030 --> 00:08:57,960
basically consists of packages but we

00:08:55,530 --> 00:08:59,970
but we were inside the bundle we list

00:08:57,960 --> 00:09:02,220
all the packages that you would need for

00:08:59,970 --> 00:09:05,060
that bundle to work a bundle is a

00:09:02,220 --> 00:09:07,830
functionality that you install not an

00:09:05,060 --> 00:09:12,360
individual package that you install so

00:09:07,830 --> 00:09:15,390
as an example like in let's say that you

00:09:12,360 --> 00:09:17,760
know you want kubernetes you want to

00:09:15,390 --> 00:09:19,530
enable kubernetes on your on your system

00:09:17,760 --> 00:09:21,780
right so what you would do is you would

00:09:19,530 --> 00:09:23,880
install our what we call our cloud

00:09:21,780 --> 00:09:25,320
native bundle the cloud native bundle

00:09:23,880 --> 00:09:29,190
consists all of the kubernetes

00:09:25,320 --> 00:09:31,770
capability binaries and you know any

00:09:29,190 --> 00:09:33,330
dependencies that it needs to install to

00:09:31,770 --> 00:09:35,490
in order for kubernetes to work out of

00:09:33,330 --> 00:09:37,500
the box right that way you don't have to

00:09:35,490 --> 00:09:39,030
go and search for yourself oh I got to

00:09:37,500 --> 00:09:40,440
go get this package I got to go get this

00:09:39,030 --> 00:09:44,820
package and to get to go to this package

00:09:40,440 --> 00:09:47,580
right so at the development site bundle

00:09:44,820 --> 00:09:50,820
art sorry at the build time on our side

00:09:47,580 --> 00:09:53,220
where we curate the bundles we we have

00:09:50,820 --> 00:09:55,350
the list of packages in there and then

00:09:53,220 --> 00:09:58,260
what gets delivered to the client side

00:09:55,350 --> 00:10:00,570
at the end of the day is actually a list

00:09:58,260 --> 00:10:03,540
of files that are broken down from the

00:10:00,570 --> 00:10:06,240
packages themselves I hope that makes it

00:10:03,540 --> 00:10:07,860
clear to people right so so the the

00:10:06,240 --> 00:10:10,410
clients doesn't have any concept of what

00:10:07,860 --> 00:10:13,770
it packages it just installs files and

00:10:10,410 --> 00:10:15,690
the files are basically the we when we

00:10:13,770 --> 00:10:17,580
when you install a bundle you get a

00:10:15,690 --> 00:10:20,700
manifest and the manifest lists all the

00:10:17,580 --> 00:10:23,340
files that gets installed with that okay

00:10:20,700 --> 00:10:26,100
so again we we resolve all the

00:10:23,340 --> 00:10:30,630
dependencies at at the upstream side not

00:10:26,100 --> 00:10:33,240
at the Installer runtime we also again

00:10:30,630 --> 00:10:35,610
we curate many many bundles we have

00:10:33,240 --> 00:10:39,060
close to about 200

00:10:35,610 --> 00:10:49,110
at this point from clearing out from our

00:10:39,060 --> 00:10:51,410
upstream side there okay so in terms of

00:10:49,110 --> 00:10:54,660
updates so this is our update principle

00:10:51,410 --> 00:10:56,550
so again we don't work at a package

00:10:54,660 --> 00:10:59,490
level we work in a file level on the

00:10:56,550 --> 00:11:01,769
client side so if there's an update the

00:10:59,490 --> 00:11:04,110
update is very very small right

00:11:01,769 --> 00:11:07,019
generally it's a what we do is we push

00:11:04,110 --> 00:11:08,940
out Delta updates we don't so there's an

00:11:07,019 --> 00:11:11,100
update inside a particular package for

00:11:08,940 --> 00:11:13,290
example typically another distro you

00:11:11,100 --> 00:11:15,899
would basically have to deliver the

00:11:13,290 --> 00:11:17,700
entire package over and then go through

00:11:15,899 --> 00:11:20,310
an install process to update it right

00:11:17,700 --> 00:11:22,079
what we do on clear linux is that we if

00:11:20,310 --> 00:11:24,240
there's a small you know whatever the

00:11:22,079 --> 00:11:26,339
delta updates is we send that Delta and

00:11:24,240 --> 00:11:29,010
then we patch it into the system itself

00:11:26,339 --> 00:11:32,910
so it's quite small so it's lightweight

00:11:29,010 --> 00:11:35,790
it's incremental so like I said we do we

00:11:32,910 --> 00:11:37,980
do about you know on average 10 updates

00:11:35,790 --> 00:11:40,230
a week so that way you know you don't

00:11:37,980 --> 00:11:41,880
have to you know take down your system

00:11:40,230 --> 00:11:43,829
to do a big update or anything like that

00:11:41,880 --> 00:11:47,490
it's a rolling release so it's done in

00:11:43,829 --> 00:11:51,720
the background so we do a whole system

00:11:47,490 --> 00:11:54,180
update so that means that you don't you

00:11:51,720 --> 00:11:56,190
you don't choose what you update on your

00:11:54,180 --> 00:11:57,930
system when you go from one version of

00:11:56,190 --> 00:12:00,270
clear linux to the next version of clear

00:11:57,930 --> 00:12:02,250
linux whatever bundles you install in

00:12:00,270 --> 00:12:04,290
that system if there's any update in

00:12:02,250 --> 00:12:06,240
there everything gets whatever gets

00:12:04,290 --> 00:12:10,050
updated gets updated to the end the next

00:12:06,240 --> 00:12:13,260
version of clear linux itself so and the

00:12:10,050 --> 00:12:16,560
how we control we have a version control

00:12:13,260 --> 00:12:19,770
method where you just have the version

00:12:16,560 --> 00:12:22,110
of the OS itself you don't so and then

00:12:19,770 --> 00:12:26,100
then that version number basically

00:12:22,110 --> 00:12:27,570
dictates what what what list of packages

00:12:26,100 --> 00:12:30,290
and the versions that go into that

00:12:27,570 --> 00:12:34,290
version of clear linux right so that way

00:12:30,290 --> 00:12:36,720
if you if you have it like say if your

00:12:34,290 --> 00:12:38,220
coworker is running version 10 and

00:12:36,720 --> 00:12:41,339
you're running version 10 and you both

00:12:38,220 --> 00:12:43,740
install the same set of bundles you know

00:12:41,339 --> 00:12:45,389
for sure that you both have the same set

00:12:43,740 --> 00:12:47,999
of software you would never have to get

00:12:45,389 --> 00:12:49,949
you know try to figure out that you have

00:12:47,999 --> 00:12:52,199
this and do you have this right that

00:12:49,949 --> 00:12:55,920
guarantees that it makes it easier to

00:12:52,199 --> 00:12:58,709
compare systems and for development

00:12:55,920 --> 00:13:00,569
purposes or validation usage use cases

00:12:58,709 --> 00:13:02,790
it's very easy and even for deployment

00:13:00,569 --> 00:13:04,259
right so if you're deploying you know a

00:13:02,790 --> 00:13:05,759
farmer servers and they're running a

00:13:04,259 --> 00:13:07,769
particular version of clear Linux and

00:13:05,759 --> 00:13:09,389
the same set of bundles you know that

00:13:07,769 --> 00:13:11,309
you would never have any discrepancies

00:13:09,389 --> 00:13:14,209
between them because the version number

00:13:11,309 --> 00:13:19,739
basically dictate what goes into that I

00:13:14,209 --> 00:13:22,290
hope that makes it clear ok it's it's a

00:13:19,739 --> 00:13:26,119
hard one for people to get the concept

00:13:22,290 --> 00:13:30,809
of at the very beginning but anyway the

00:13:26,119 --> 00:13:32,999
so by default the OS is set to auto

00:13:30,809 --> 00:13:35,819
update but you can disable that and

00:13:32,999 --> 00:13:39,509
choose to update yourself whenever you

00:13:35,819 --> 00:13:44,399
want to sell you're not forced to take

00:13:39,509 --> 00:13:49,199
everything that we put out ok so the

00:13:44,399 --> 00:13:53,009
other one is that we have a concept of a

00:13:49,199 --> 00:13:55,139
stateless operating system so in some

00:13:53,009 --> 00:13:57,509
distros when you install packages and

00:13:55,139 --> 00:14:02,309
software configuration files kind of get

00:13:57,509 --> 00:14:04,499
you know and installed in different

00:14:02,309 --> 00:14:06,929
places in stone et Cie and so on the

00:14:04,499 --> 00:14:08,939
user installed in you know in your home

00:14:06,929 --> 00:14:11,790
directory right what we do is that we

00:14:08,939 --> 00:14:14,730
segregate what the operating system owns

00:14:11,790 --> 00:14:17,249
and what you own right so when when we

00:14:14,730 --> 00:14:19,769
when you install software when the OS

00:14:17,249 --> 00:14:21,389
install software all the configurations

00:14:19,769 --> 00:14:24,449
that it needs the minimum configuration

00:14:21,389 --> 00:14:26,790
that is done to make the software its

00:14:24,449 --> 00:14:29,069
work is put in slash user which is owned

00:14:26,790 --> 00:14:32,600
by the the operating system itself and

00:14:29,069 --> 00:14:35,819
then if you want to do additional

00:14:32,600 --> 00:14:38,040
configuration or override additional

00:14:35,819 --> 00:14:40,049
settings you would put that in Sasha et

00:14:38,040 --> 00:14:43,589
Cie so you as the system administrator

00:14:40,049 --> 00:14:45,779
would own that and then and then you can

00:14:43,589 --> 00:14:49,589
also do additional configuration in your

00:14:45,779 --> 00:14:51,959
home directory now let's say that let's

00:14:49,589 --> 00:14:53,190
say you actually delete it et Cie for

00:14:51,959 --> 00:14:56,610
some reason right

00:14:53,190 --> 00:14:58,920
in the clear linux case the system is

00:14:56,610 --> 00:15:00,569
still actually recoverable and it will

00:14:58,920 --> 00:15:03,000
still boot and what it means is that

00:15:00,569 --> 00:15:07,050
when you delete etc' it just sets the

00:15:03,000 --> 00:15:09,569
system into a factory reset right so the

00:15:07,050 --> 00:15:11,670
the minimum configuration that's in

00:15:09,569 --> 00:15:13,170
slash user still works so that the whole

00:15:11,670 --> 00:15:15,810
system will still boot you just won't

00:15:13,170 --> 00:15:18,120
have your custom configuration et Cie so

00:15:15,810 --> 00:15:19,829
in that case would you would as a

00:15:18,120 --> 00:15:20,759
practice what you would want to do is do

00:15:19,829 --> 00:15:23,910
all your configuration

00:15:20,759 --> 00:15:26,009
you know backup your et Cie and then if

00:15:23,910 --> 00:15:28,290
for some reason et Cie gets deleted you

00:15:26,009 --> 00:15:30,540
can boot it up login as root set a new

00:15:28,290 --> 00:15:32,730
password for root restore et Cie and

00:15:30,540 --> 00:15:39,540
your back up and running in no time at

00:15:32,730 --> 00:15:43,970
all I'm seeing some eye-rolling over

00:15:39,540 --> 00:15:51,589
there does that make any sense yeah okay

00:15:43,970 --> 00:15:54,480
we're blowing through here so alright so

00:15:51,589 --> 00:15:57,240
so we also another thing that we have in

00:15:54,480 --> 00:16:00,180
clear Linux is as a telemetry solution

00:15:57,240 --> 00:16:02,149
so this is an opt-in solution right so I

00:16:00,180 --> 00:16:04,470
on I

00:16:02,149 --> 00:16:06,930
underlined opt-in because people always

00:16:04,470 --> 00:16:09,120
get you know scared whenever they hear

00:16:06,930 --> 00:16:10,980
telemetry right so this is something

00:16:09,120 --> 00:16:12,689
that the user has to turn on it's not

00:16:10,980 --> 00:16:15,089
something that's turn on by default

00:16:12,689 --> 00:16:17,880
right it's it's a it's a lightweight

00:16:15,089 --> 00:16:21,149
client solution the client-side

00:16:17,880 --> 00:16:24,360
basically sends probes to you know

00:16:21,149 --> 00:16:27,259
probes information to the to the server

00:16:24,360 --> 00:16:30,029
side right of any software anomalies

00:16:27,259 --> 00:16:32,339
again we don't collect you know personal

00:16:30,029 --> 00:16:34,800
identifiable information it's mostly

00:16:32,339 --> 00:16:36,959
just information that you want to put

00:16:34,800 --> 00:16:41,160
into the probe itself for debugging

00:16:36,959 --> 00:16:44,459
purposes or for OS you know crashes or

00:16:41,160 --> 00:16:47,130
whatnot right we have protein the OS

00:16:44,459 --> 00:16:48,630
itself has probes in there but if you

00:16:47,130 --> 00:16:51,779
don't turn it on that stuff doesn't get

00:16:48,630 --> 00:16:54,959
sent to us at all right so you can

00:16:51,779 --> 00:16:57,180
actually so the telemetry solution is

00:16:54,959 --> 00:16:59,129
very customizable you can actually set

00:16:57,180 --> 00:17:01,559
up your own telemetry solution using

00:16:59,129 --> 00:17:03,420
ours and then your client you can

00:17:01,559 --> 00:17:06,300
configure your clients and basically

00:17:03,420 --> 00:17:08,070
send the termini solution to your server

00:17:06,300 --> 00:17:11,250
instead of to the upstream server itself

00:17:08,070 --> 00:17:13,770
right so we use this solution as a

00:17:11,250 --> 00:17:16,110
development a tool because it helps us

00:17:13,770 --> 00:17:17,940
to basically you know figure out where

00:17:16,110 --> 00:17:20,130
all the bugs are where the crashes are

00:17:17,940 --> 00:17:22,680
and then we basically analyze that and

00:17:20,130 --> 00:17:24,330
patch it and then send updates right

00:17:22,680 --> 00:17:27,390
away right so this is how we're able to

00:17:24,330 --> 00:17:30,510
move fast very quickly is that you know

00:17:27,390 --> 00:17:32,190
we get things out there if we see you

00:17:30,510 --> 00:17:33,570
know any anomalies or any issue we'll

00:17:32,190 --> 00:17:41,630
patch it and we'll get it out right away

00:17:33,570 --> 00:17:43,830
so okay so I'm gonna talk about

00:17:41,630 --> 00:17:52,770
customization does anybody have any

00:17:43,830 --> 00:17:55,020
questions so far no oh yeah go ahead so

00:17:52,770 --> 00:17:57,780
we build it twice I think we what we do

00:17:55,020 --> 00:18:00,720
is we build the library for the base

00:17:57,780 --> 00:18:03,960
hardware based older hardware right so

00:18:00,720 --> 00:18:05,850
our vests Westmere platform and then we

00:18:03,960 --> 00:18:08,070
also build for the newer version the

00:18:05,850 --> 00:18:09,960
latest hardware so that the dynamic

00:18:08,070 --> 00:18:12,720
linker can basically pick and choose at

00:18:09,960 --> 00:18:18,170
runtime that's how I was explaining to

00:18:12,720 --> 00:18:18,170
me so yes

00:18:20,180 --> 00:18:43,080
yeah okay you don't see the KVM version

00:18:35,180 --> 00:18:46,470
okay yes so yeah I'm happy to help you

00:18:43,080 --> 00:19:01,830
after this presentation okay okay great

00:18:46,470 --> 00:19:03,720
yes yes yeah no so we actually so what

00:19:01,830 --> 00:19:06,480
we do is we actually build all the

00:19:03,720 --> 00:19:09,929
packages ourselves so we take all this

00:19:06,480 --> 00:19:12,360
the upstream sources and then we go put

00:19:09,929 --> 00:19:14,820
it feed it through our tooling we have a

00:19:12,360 --> 00:19:18,390
tool called Auto spec which is basically

00:19:14,820 --> 00:19:21,059
an automated way of building a spec for

00:19:18,390 --> 00:19:23,760
rpm files right what this does is you

00:19:21,059 --> 00:19:25,920
feed it a tar ball and it analyzes the

00:19:23,760 --> 00:19:28,080
tar ball and looks at the build patterns

00:19:25,920 --> 00:19:30,660
in the make file and basically helps you

00:19:28,080 --> 00:19:33,090
to generate a spec file out of it and it

00:19:30,660 --> 00:19:34,920
builds the RPM for you for the most part

00:19:33,090 --> 00:19:37,380
it will do 80 percent of it the work for

00:19:34,920 --> 00:19:39,960
you because it is able to intelligently

00:19:37,380 --> 00:19:41,850
figure that out right and and then it'll

00:19:39,960 --> 00:19:44,100
spit out the tar file and then you put

00:19:41,850 --> 00:19:46,350
and then I started the RPM file and then

00:19:44,100 --> 00:19:49,700
you put the RPMs and then you you you

00:19:46,350 --> 00:19:52,770
basically put the RPM files into your

00:19:49,700 --> 00:19:54,960
ear bundle and then you then we go

00:19:52,770 --> 00:19:57,780
through a build process where it

00:19:54,960 --> 00:20:00,809
decomposes the you know the bundle the

00:19:57,780 --> 00:20:02,730
the packages and then creates a manifest

00:20:00,809 --> 00:20:05,520
of all the individual files that goes

00:20:02,730 --> 00:20:07,740
into all the package in the actual RPM

00:20:05,520 --> 00:20:09,900
package we set in a manifest to the

00:20:07,740 --> 00:20:12,840
client side and then the client

00:20:09,900 --> 00:20:14,550
basically looks at the manifest and said

00:20:12,840 --> 00:20:17,580
these are all the files that I need to

00:20:14,550 --> 00:20:19,950
install and then these are all the you

00:20:17,580 --> 00:20:22,740
know and then it checks it has we do we

00:20:19,950 --> 00:20:25,020
send hash for every single file so that

00:20:22,740 --> 00:20:27,179
we can make sure that it's secure right

00:20:25,020 --> 00:20:29,190
so then and then we go to install the

00:20:27,179 --> 00:20:31,830
file so the client doesn't have any

00:20:29,190 --> 00:20:34,470
concept of packages at all it just you

00:20:31,830 --> 00:20:37,650
it just basically installs file directly

00:20:34,470 --> 00:20:39,640
onto the system itself does that make

00:20:37,650 --> 00:20:53,770
sense yeah

00:20:39,640 --> 00:20:57,280
okay go ahead yeah that that is a good

00:20:53,770 --> 00:20:59,650
question right now we don't have like

00:20:57,280 --> 00:21:01,809
the concept of a long-term release or

00:20:59,650 --> 00:21:03,490
you know we are right now we're a

00:21:01,809 --> 00:21:06,309
rolling release but we have heard that

00:21:03,490 --> 00:21:08,230
you know that that question before and

00:21:06,309 --> 00:21:10,059
we are looking into it there's something

00:21:08,230 --> 00:21:12,429
that we could potentially do in the

00:21:10,059 --> 00:21:14,590
future to you know basically provide

00:21:12,429 --> 00:21:17,799
that capability right but right now it's

00:21:14,590 --> 00:21:20,559
a rolling release and but we do do do do

00:21:17,799 --> 00:21:26,080
a lot of QA and do a lot of work to make

00:21:20,559 --> 00:21:28,570
sure that what we put out is good no no

00:21:26,080 --> 00:21:30,520
you can you can the auto-update is

00:21:28,570 --> 00:21:32,380
enabled by default but you can disable

00:21:30,520 --> 00:21:34,900
it right away and then you can then

00:21:32,380 --> 00:21:37,450
choose to update to a particular version

00:21:34,900 --> 00:21:39,850
that you want right another thing that I

00:21:37,450 --> 00:21:42,520
actually want to mention is that our

00:21:39,850 --> 00:21:44,919
update tool which is our installer or

00:21:42,520 --> 00:21:47,860
slash update tool is called swap D which

00:21:44,919 --> 00:21:50,290
is SW PD it's software update daemon

00:21:47,860 --> 00:21:53,830
right and that tool allows you to

00:21:50,290 --> 00:21:55,750
basically specify which version of clear

00:21:53,830 --> 00:21:57,520
Linux you want to go to by default it's

00:21:55,750 --> 00:22:00,730
always tries to install the latest but

00:21:57,520 --> 00:22:02,410
you can actually roll back to a

00:22:00,730 --> 00:22:04,510
particular version if you wanted to

00:22:02,410 --> 00:22:06,730
right when what happens is that when you

00:22:04,510 --> 00:22:09,669
roll back or you roll to another version

00:22:06,730 --> 00:22:11,919
it would basically look up the manifest

00:22:09,669 --> 00:22:14,500
for that particular version of all the

00:22:11,919 --> 00:22:16,570
bundles that you install and then update

00:22:14,500 --> 00:22:19,860
those files according to that version of

00:22:16,570 --> 00:22:19,860
clear Linux that you trying to go to

00:22:20,760 --> 00:22:28,600
sorry you're right right

00:22:26,830 --> 00:22:30,070
exactly right yeah you can built an

00:22:28,600 --> 00:22:32,049
older version but you know people like

00:22:30,070 --> 00:22:33,309
to do that sometimes for you know

00:22:32,049 --> 00:22:37,030
different reasons right

00:22:33,309 --> 00:22:39,190
but but the capability is there another

00:22:37,030 --> 00:22:41,620
thing that I really like about clear

00:22:39,190 --> 00:22:45,309
Linux the the swap D tooling that we

00:22:41,620 --> 00:22:47,620
have is basically that if you let's say

00:22:45,309 --> 00:22:50,050
that you actually deleted some files in

00:22:47,620 --> 00:22:52,929
your system because we work with

00:22:50,050 --> 00:22:53,560
manifests right and bundles what you do

00:22:52,929 --> 00:22:55,810
is you do

00:22:53,560 --> 00:22:58,300
we have this capability called verify

00:22:55,810 --> 00:23:00,160
fix what it basically does is when you

00:22:58,300 --> 00:23:02,050
asked it to do that it basically looks

00:23:00,160 --> 00:23:04,660
at you did your bundle and it knows that

00:23:02,050 --> 00:23:07,270
what what's in the manifest and it goes

00:23:04,660 --> 00:23:09,760
check your system and it goes say oh if

00:23:07,270 --> 00:23:12,430
this file is not there it will actually

00:23:09,760 --> 00:23:15,430
go and fix that for you right away or if

00:23:12,430 --> 00:23:18,070
you you know modified something and it's

00:23:15,430 --> 00:23:20,080
not according to the the hash for that

00:23:18,070 --> 00:23:22,870
particular file in the bundle it will

00:23:20,080 --> 00:23:26,140
actually modify or that as basically a

00:23:22,870 --> 00:23:29,500
system restore capability right so it's

00:23:26,140 --> 00:23:32,290
a nice way of ensuring that you you have

00:23:29,500 --> 00:23:45,100
system integrity with this this

00:23:32,290 --> 00:23:47,890
capability yes sir yes exactly yes yes

00:23:45,100 --> 00:23:50,230
it's it's a list of rpms and then we

00:23:47,890 --> 00:23:52,390
break the RPMs down into individual

00:23:50,230 --> 00:23:54,520
files within the RPM right and that's

00:23:52,390 --> 00:23:56,560
and the individual file is what gets

00:23:54,520 --> 00:23:59,050
sent to the to the client side to get

00:23:56,560 --> 00:24:05,770
installed we don't send the RPMs to the

00:23:59,050 --> 00:24:10,210
client side itself just because we're

00:24:05,770 --> 00:24:12,490
trying to use what's you know and we we

00:24:10,210 --> 00:24:14,290
use the RPM packages just because that's

00:24:12,490 --> 00:24:19,000
what you know the rest of the world we

00:24:14,290 --> 00:24:21,970
still do that essentially yes but you

00:24:19,000 --> 00:24:23,980
you can install an RPM on top of AB on

00:24:21,970 --> 00:24:25,750
your system but then the OS doesn't

00:24:23,980 --> 00:24:28,600
manage that right because remember the

00:24:25,750 --> 00:24:30,550
met the OS has to have the bundle list

00:24:28,600 --> 00:24:32,620
and the manifest that's in you that's

00:24:30,550 --> 00:24:34,660
installed on your system right so if you

00:24:32,620 --> 00:24:37,000
installed a pack and you you can install

00:24:34,660 --> 00:24:39,520
an RPM package but that means that if

00:24:37,000 --> 00:24:42,040
you ever do like verify fix to check the

00:24:39,520 --> 00:24:44,950
integrity of your system and if you give

00:24:42,040 --> 00:24:46,420
it this - - picky it will go and find

00:24:44,950 --> 00:24:47,860
stuff that's not there and delete it out

00:24:46,420 --> 00:24:55,450
of the system because it doesn't know

00:24:47,860 --> 00:24:58,630
about it right yes yes on the system and

00:24:55,450 --> 00:25:01,840
so on so we don't and keep a database of

00:24:58,630 --> 00:25:04,720
install packages we keep a list of the

00:25:01,840 --> 00:25:15,800
bundles installed on your system

00:25:04,720 --> 00:25:17,720
sigh I mean you can force install an RPM

00:25:15,800 --> 00:25:19,100
without yeah but you wouldn't know what

00:25:17,720 --> 00:25:21,680
are you what dependency you would have

00:25:19,100 --> 00:25:24,200
to resolve that yourself right but you

00:25:21,680 --> 00:25:25,850
can't install an RPM I've done it so and

00:25:24,200 --> 00:25:27,320
but like I said the OS doesn't know

00:25:25,850 --> 00:25:29,780
anything about it so when you go do a

00:25:27,320 --> 00:25:40,280
system integrity check it may delete it

00:25:29,780 --> 00:25:54,080
right if you tell it to yes how do I

00:25:40,280 --> 00:25:56,900
resolve file we detect that at the build

00:25:54,080 --> 00:25:58,940
side so we do bundle testing on the

00:25:56,900 --> 00:26:00,170
build side so that we know what you know

00:25:58,940 --> 00:26:05,720
so that they don't collide with each

00:26:00,170 --> 00:26:07,460
other yeah like I said yeah we take care

00:26:05,720 --> 00:26:09,080
of we do all the hard work on ours on

00:26:07,460 --> 00:26:11,420
the build side right we have servers

00:26:09,080 --> 00:26:13,550
that basically go through and you know

00:26:11,420 --> 00:26:16,610
build these bundles and test them and

00:26:13,550 --> 00:26:18,500
things like that and then again once the

00:26:16,610 --> 00:26:20,660
at the client side all they're doing is

00:26:18,500 --> 00:26:22,910
just installing into you know discrete

00:26:20,660 --> 00:26:24,440
files that's listed in a manifest so you

00:26:22,910 --> 00:26:26,120
don't actually have to think about what

00:26:24,440 --> 00:26:32,840
you're you know what the dependency

00:26:26,120 --> 00:26:39,260
issues are how do you think spect how do

00:26:32,840 --> 00:26:41,630
I expect third-party applications so

00:26:39,260 --> 00:26:43,850
there there is a way to do that for

00:26:41,630 --> 00:26:46,130
third party you can where there's a you

00:26:43,850 --> 00:26:49,130
know soap because Claire Linux is all

00:26:46,130 --> 00:26:51,170
open-source right so we only ship open

00:26:49,130 --> 00:26:53,660
source software so we don't package

00:26:51,170 --> 00:26:57,220
proprietary software at all so if you

00:26:53,660 --> 00:26:57,220
had stuff that you want just

00:27:03,880 --> 00:27:08,330
yes you can build software that you can

00:27:06,380 --> 00:27:11,870
install right that's what I was gonna

00:27:08,330 --> 00:27:14,060
get to so we're so we have and I can

00:27:11,870 --> 00:27:16,870
talk about it in a customization area a

00:27:14,060 --> 00:27:20,210
part of this presentation but basically

00:27:16,870 --> 00:27:23,000
we have a tool called mixer that allows

00:27:20,210 --> 00:27:24,290
you to basically create your own distro

00:27:23,000 --> 00:27:26,540
and you can actually create your own

00:27:24,290 --> 00:27:28,340
bundles and I'll talk more about it here

00:27:26,540 --> 00:27:30,260
in a bit right and then we have another

00:27:28,340 --> 00:27:32,090
tool called mix in which is a wrapper

00:27:30,260 --> 00:27:35,420
for mixer but that allows you to create

00:27:32,090 --> 00:27:38,450
your own bundle and put your own package

00:27:35,420 --> 00:27:40,550
in there and install side loaded into an

00:27:38,450 --> 00:27:43,010
upstream the upstream version of clear

00:27:40,550 --> 00:27:44,840
Linux or instead of a fourth version of

00:27:43,010 --> 00:27:47,240
clear Linux and I'll get it a little bit

00:27:44,840 --> 00:27:48,620
more about that but but keep asking me

00:27:47,240 --> 00:27:50,870
that question if this still doesn't make

00:27:48,620 --> 00:27:52,250
sense all right so any other questions

00:27:50,870 --> 00:27:57,230
in Thoth before I get into the next

00:27:52,250 --> 00:28:02,150
section here all good questions all

00:27:57,230 --> 00:28:06,320
right so modular for a customization in

00:28:02,150 --> 00:28:08,860
control right so on on this diagram here

00:28:06,320 --> 00:28:11,540
on the top right side you know the blue

00:28:08,860 --> 00:28:13,820
boxes here right so this is the normal

00:28:11,540 --> 00:28:15,950
upstream version of clear Linux and the

00:28:13,820 --> 00:28:17,390
clients are using the upstream version

00:28:15,950 --> 00:28:19,760
of clear Linux right they're getting all

00:28:17,390 --> 00:28:23,240
the updates from us right but let's say

00:28:19,760 --> 00:28:26,540
that you want to become your own osv

00:28:23,240 --> 00:28:28,460
well you want a forked version your own

00:28:26,540 --> 00:28:30,290
flavor clear Linux right you don't want

00:28:28,460 --> 00:28:31,730
to get all our updates all the time you

00:28:30,290 --> 00:28:32,120
want to be in total control of that

00:28:31,730 --> 00:28:34,370
right

00:28:32,120 --> 00:28:35,990
we have tooling that allows you to do

00:28:34,370 --> 00:28:38,240
that and that tooling is basically

00:28:35,990 --> 00:28:40,040
called mixer right the analogy that I

00:28:38,240 --> 00:28:43,550
like to tell people about it is that you

00:28:40,040 --> 00:28:45,800
know you you like to eat food you know I

00:28:43,550 --> 00:28:47,780
don't know tacos so I'm a you know the

00:28:45,800 --> 00:28:49,370
factory right and all the toppings that

00:28:47,780 --> 00:28:51,470
comes with it but maybe you don't like

00:28:49,370 --> 00:28:53,330
certain the certain things ingredients

00:28:51,470 --> 00:28:55,040
in the topping so you can go and

00:28:53,330 --> 00:28:56,900
redefine what those means and the

00:28:55,040 --> 00:28:58,970
toppings are basically the bundles and

00:28:56,900 --> 00:29:00,650
you can go and redefine what goes into

00:28:58,970 --> 00:29:02,720
bundles itself right you're - you're

00:29:00,650 --> 00:29:05,390
modifying what packages go in there and

00:29:02,720 --> 00:29:08,150
then through the mixing process it's

00:29:05,390 --> 00:29:10,490
able to basically generate you know your

00:29:08,150 --> 00:29:14,650
own a clear linux image right so it

00:29:10,490 --> 00:29:16,780
becomes a forked version okay so

00:29:14,650 --> 00:29:19,210
so the key part right here is this here

00:29:16,780 --> 00:29:21,130
you don't need to recompile the OS if

00:29:19,210 --> 00:29:23,530
you want to basically create a forked

00:29:21,130 --> 00:29:25,330
version of clear Linux remember a bundle

00:29:23,530 --> 00:29:27,640
is just basically a list of binary

00:29:25,330 --> 00:29:30,430
packages right and all the packages that

00:29:27,640 --> 00:29:32,770
we build are all available upstream on

00:29:30,430 --> 00:29:35,050
our server so when you redefine a bundle

00:29:32,770 --> 00:29:37,270
and you specify a particular package

00:29:35,050 --> 00:29:39,700
that we already have it will just pull

00:29:37,270 --> 00:29:41,050
the packages into your mix and build it

00:29:39,700 --> 00:29:43,030
for you so you don't actually have

00:29:41,050 --> 00:29:43,990
actually have to recompile code at all

00:29:43,030 --> 00:29:45,730
right

00:29:43,990 --> 00:29:47,770
the only time you would have to actually

00:29:45,730 --> 00:29:50,430
compile code to create a derivative

00:29:47,770 --> 00:29:53,130
clear Linux is if you want to basically

00:29:50,430 --> 00:29:55,660
build your own you know your own

00:29:53,130 --> 00:29:57,610
software package right so for example if

00:29:55,660 --> 00:30:01,090
you want to build you know your own

00:29:57,610 --> 00:30:03,070
hello world software and we don't have

00:30:01,090 --> 00:30:05,590
it available upstream already then you

00:30:03,070 --> 00:30:08,080
would go through the auto spec tool to

00:30:05,590 --> 00:30:10,000
basically build an RPM package and then

00:30:08,080 --> 00:30:11,770
you feed that to a mixer and then you

00:30:10,000 --> 00:30:14,080
build a bundle out of that and then you

00:30:11,770 --> 00:30:16,120
basically put that on your own update

00:30:14,080 --> 00:30:18,520
server where your clear Linux will then

00:30:16,120 --> 00:30:21,820
pull its updates from right so basically

00:30:18,520 --> 00:30:22,380
at that point you forked okay does that

00:30:21,820 --> 00:30:25,390
make sense

00:30:22,380 --> 00:30:26,950
so we actually use mixer ourselves so

00:30:25,390 --> 00:30:28,840
you can see at the top part right there

00:30:26,950 --> 00:30:31,270
so there's clearly record release right

00:30:28,840 --> 00:30:33,220
so every time we build a package and

00:30:31,270 --> 00:30:34,960
then we update anything in a bundle we

00:30:33,220 --> 00:30:37,210
feed it through the mixer tool itself we

00:30:34,960 --> 00:30:39,280
generate bundles and we put it on our

00:30:37,210 --> 00:30:41,590
update server and then all the you know

00:30:39,280 --> 00:30:43,180
now clients consume that right so that's

00:30:41,590 --> 00:30:44,500
the same way for you if you want it to

00:30:43,180 --> 00:30:46,690
build your own version right you

00:30:44,500 --> 00:30:48,430
basically just set up a web server you

00:30:46,690 --> 00:30:50,500
go through the mixing process create

00:30:48,430 --> 00:30:52,660
your bundles create your own version of

00:30:50,500 --> 00:30:55,030
your create set up your own version of

00:30:52,660 --> 00:30:56,830
clear linux create an image and then

00:30:55,030 --> 00:31:03,640
your images would basically pull the

00:30:56,830 --> 00:31:06,700
updates from your server itself so

00:31:03,640 --> 00:31:08,080
you're not required to basically you

00:31:06,700 --> 00:31:09,700
know you know you're not we call if you

00:31:08,080 --> 00:31:11,290
create your own version of clear linux

00:31:09,700 --> 00:31:13,450
you're not required to every take every

00:31:11,290 --> 00:31:15,040
single release that we put out right so

00:31:13,450 --> 00:31:17,020
this is this diagram here basically

00:31:15,040 --> 00:31:19,900
shows that you know these the penguin

00:31:17,020 --> 00:31:22,120
here is basically all our you know daily

00:31:19,900 --> 00:31:24,310
a weekly releases right and then these

00:31:22,120 --> 00:31:26,830
up here are the upstream packages that

00:31:24,310 --> 00:31:28,750
we put incorporate into clear linux down

00:31:26,830 --> 00:31:31,510
here is your custom version right here

00:31:28,750 --> 00:31:32,950
right so you can choose and you can pick

00:31:31,510 --> 00:31:34,540
and choose which one you know which

00:31:32,950 --> 00:31:36,070
release of clear linux you want to put

00:31:34,540 --> 00:31:38,020
in and which bundles you want to put in

00:31:36,070 --> 00:31:39,700
there yourself right so you're not

00:31:38,020 --> 00:31:42,730
forced to basically take everything we

00:31:39,700 --> 00:31:50,620
we release so it's very very

00:31:42,730 --> 00:31:52,660
customizable security updates well

00:31:50,620 --> 00:31:54,040
security I mean every up security

00:31:52,660 --> 00:31:57,190
updates all go through our normal

00:31:54,040 --> 00:32:02,080
regular releases so but yes so you you

00:31:57,190 --> 00:32:03,550
know if you want well you can pick and

00:32:02,080 --> 00:32:11,710
choose which we which clear linux

00:32:03,550 --> 00:32:14,080
release we put out right do we specify

00:32:11,710 --> 00:32:23,400
which one has security releases all

00:32:14,080 --> 00:32:23,400
right yeah yeah all right

00:32:24,360 --> 00:32:29,230
you would have to basically take the

00:32:27,010 --> 00:32:30,880
next release that has that the the

00:32:29,230 --> 00:32:36,190
security patch and incorporated into

00:32:30,880 --> 00:32:41,170
your mix right no right where we're

00:32:36,190 --> 00:32:43,060
trying to move forward well you yes you

00:32:41,170 --> 00:32:45,280
can you can choose which one you want

00:32:43,060 --> 00:32:47,170
yes in a sense that you don't have to

00:32:45,280 --> 00:32:49,570
take every release you're not forced to

00:32:47,170 --> 00:32:54,880
incorporate every release into your into

00:32:49,570 --> 00:32:56,830
your mix yeah if you want a feature you

00:32:54,880 --> 00:33:02,460
have to go and you have to go up and

00:32:56,830 --> 00:33:02,460
update yes security features yes

00:33:06,290 --> 00:33:32,360
so any other questions on this at all

00:33:08,780 --> 00:33:34,550
yes go ahead you did if you do if you do

00:33:32,360 --> 00:33:47,060
an update will the auto update be turn

00:33:34,550 --> 00:33:49,730
on is that what the question if you if

00:33:47,060 --> 00:33:52,370
you do if you so when you disable auto

00:33:49,730 --> 00:33:55,040
update able to be disabled and then you

00:33:52,370 --> 00:33:57,020
can manually update to another version

00:33:55,040 --> 00:34:05,780
of clear Linux that may have the secure

00:33:57,020 --> 00:34:08,210
boot update right if it's if it's

00:34:05,780 --> 00:34:10,190
updated in the next version if it's

00:34:08,210 --> 00:34:23,500
enabled yes you would probably have to

00:34:10,190 --> 00:34:23,500
do that yeah questions so yeah go ahead

00:34:29,650 --> 00:34:43,910
so so let me let me go let me go here

00:34:33,140 --> 00:34:48,080
real quick hold on okay ah I don't have

00:34:43,910 --> 00:34:50,590
that diagram here so let me see if I can

00:34:48,080 --> 00:34:50,590
find it

00:35:00,550 --> 00:35:06,430
okay let me hopefully I can describe

00:35:04,030 --> 00:35:08,350
this right here right so this is this is

00:35:06,430 --> 00:35:10,660
the process that we go through right so

00:35:08,350 --> 00:35:13,600
on the left side we have a tool called

00:35:10,660 --> 00:35:15,910
auto spec auto spec is what builds your

00:35:13,600 --> 00:35:18,820
your source and turns it into an RPM

00:35:15,910 --> 00:35:22,180
file right so this is basically rpm

00:35:18,820 --> 00:35:22,600
build but it's highly automated for you

00:35:22,180 --> 00:35:25,750
right

00:35:22,600 --> 00:35:27,670
so you basically feed it a tarball or

00:35:25,750 --> 00:35:30,100
and then what it'll do is it will

00:35:27,670 --> 00:35:32,050
generate these rpms for you right and

00:35:30,100 --> 00:35:35,440
then what you didn't do is you go and

00:35:32,050 --> 00:35:38,730
create your bundle which which contains

00:35:35,440 --> 00:35:41,400
your rpm files right and then you then

00:35:38,730 --> 00:35:44,140
mixer is what helps it basically

00:35:41,400 --> 00:35:46,210
generates the bundle for you and what

00:35:44,140 --> 00:35:49,860
you do is you go and define what goes in

00:35:46,210 --> 00:35:49,860
the bundle as part of the mixing process

00:35:51,870 --> 00:36:02,710
it does yes exactly yes exactly it's

00:35:59,980 --> 00:36:05,200
just like you know think of it as a you

00:36:02,710 --> 00:36:07,720
know a food preparation process right

00:36:05,200 --> 00:36:10,780
the Ardell spec is the part where you go

00:36:07,720 --> 00:36:14,260
and you know take the basic ingredients

00:36:10,780 --> 00:36:17,470
and create them cook and make something

00:36:14,260 --> 00:36:19,660
right and then mixer is the bundling

00:36:17,470 --> 00:36:21,580
process where you package it up before

00:36:19,660 --> 00:36:51,690
you ship it out for somebody else to

00:36:21,580 --> 00:36:54,640
consume it right it's required by other

00:36:51,690 --> 00:36:57,040
that is a good question

00:36:54,640 --> 00:37:00,390
I think if there's dependency I think

00:36:57,040 --> 00:37:00,390
you may have to do that yes

00:37:19,079 --> 00:37:25,289
I don't so I I'm not you know I don't

00:37:23,309 --> 00:37:28,169
know that answer I'll top my head but if

00:37:25,289 --> 00:37:30,179
you would you come to our the Intel

00:37:28,169 --> 00:37:31,889
booth and I can find someone to answer

00:37:30,179 --> 00:37:33,899
that question for you because that's

00:37:31,889 --> 00:37:37,079
probably the developers are probably

00:37:33,899 --> 00:37:49,999
better than I am so yeah but please come

00:37:37,079 --> 00:37:49,999
by okay questions yes

00:38:24,309 --> 00:38:31,640
yeah so so we try to always use the

00:38:27,589 --> 00:38:33,499
latest version as possible right so the

00:38:31,640 --> 00:38:42,859
tarp that are you talking about from a

00:38:33,499 --> 00:38:45,229
tarball level or from just any right we

00:38:42,859 --> 00:38:48,670
always try to incorporate the latest as

00:38:45,229 --> 00:38:51,859
possible so we tend to do yes we do that

00:38:48,670 --> 00:38:53,890
if you needed an older version then yes

00:38:51,859 --> 00:38:56,150
you can go and probably you know

00:38:53,890 --> 00:38:58,369
recompile and build your own bundle

00:38:56,150 --> 00:39:12,549
using the older library or you know an

00:38:58,369 --> 00:39:15,529
older version that you want right yes

00:39:12,549 --> 00:39:17,420
right and then are now developers are

00:39:15,529 --> 00:39:20,150
well aware of that and they try to pick

00:39:17,420 --> 00:39:23,150
you know make the the best balance that

00:39:20,150 --> 00:39:25,729
works for for it users right you know we

00:39:23,150 --> 00:39:28,579
we still use you know for example what

00:39:25,729 --> 00:39:31,579
Python we use we still we offer Python 3

00:39:28,579 --> 00:39:33,199
and we also do point 2.7 right but we're

00:39:31,579 --> 00:39:35,239
eventually we want people to basically

00:39:33,199 --> 00:39:37,809
be using the latest as you know as

00:39:35,239 --> 00:39:37,809
possible

00:39:44,940 --> 00:40:02,410
any other questions alright so so so

00:39:59,279 --> 00:40:04,809
basically we have all sorts of avenues

00:40:02,410 --> 00:40:08,019
for you to basically try out clear necks

00:40:04,809 --> 00:40:10,749
or use clear Linux I mean you know you

00:40:08,019 --> 00:40:13,930
go to a clarinet or all our source code

00:40:10,749 --> 00:40:16,660
is completely open-source again it's a

00:40:13,930 --> 00:40:18,849
reference operating system we would love

00:40:16,660 --> 00:40:20,920
it if anybody want to take any of it

00:40:18,849 --> 00:40:23,170
incorporate it into their own you know

00:40:20,920 --> 00:40:26,140
steal it if they want to right I mean

00:40:23,170 --> 00:40:28,779
it's completely open so and we have a

00:40:26,140 --> 00:40:30,309
public IRC that you can go to for any

00:40:28,779 --> 00:40:32,469
questions or help that you might have

00:40:30,309 --> 00:40:37,599
and then we also have a public mailing

00:40:32,469 --> 00:40:40,630
list as well I'm also doing demos

00:40:37,599 --> 00:40:43,749
downstairs as it upstairs I think it's

00:40:40,630 --> 00:40:45,249
upstairs yeah so come by if you have

00:40:43,749 --> 00:40:48,130
additional questions that you might have

00:40:45,249 --> 00:40:50,559
at the Intel booth and I will be happy

00:40:48,130 --> 00:40:51,430
to try to answer as much as I can and if

00:40:50,559 --> 00:40:55,420
I can't answer it

00:40:51,430 --> 00:40:59,319
I'll get back to you over email and get

00:40:55,420 --> 00:41:01,900
you the correct answer so with that it's

00:40:59,319 --> 00:41:04,329
a five till we have five minutes

00:41:01,900 --> 00:41:09,729
actually no I think it's 40 minutes

00:41:04,329 --> 00:41:17,800
right so point five okay then you get

00:41:09,729 --> 00:41:22,659
other questions no thank you

00:41:17,800 --> 00:41:22,659

YouTube URL: https://www.youtube.com/watch?v=ND16Ub8oWLo


