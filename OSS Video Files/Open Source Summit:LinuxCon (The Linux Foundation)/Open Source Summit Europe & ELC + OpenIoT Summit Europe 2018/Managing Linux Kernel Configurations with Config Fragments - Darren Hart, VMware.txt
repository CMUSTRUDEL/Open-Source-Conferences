Title: Managing Linux Kernel Configurations with Config Fragments - Darren Hart, VMware
Publication date: 2018-10-25
Playlist: Open Source Summit Europe & ELC + OpenIoT Summit Europe 2018
Description: 
	Managing Linux Kernel Configurations with Config Fragments - Darren Hart, VMware

With well over 10,000 unique configuration options it can be difficult to make your Linux kernel configuration a deliberate one. Each new version introduces new options, renames some, and removes others. A static config is convenient at first, but it doesnâ€™t distinguish between deliberate choices and the defaults, making it difficult to evaluate changes and prepare for upgrades. Configuration fragments have been part of build systems like the Yocto Project for years, and later became more common with the addition of the merge_config.sh script to the upstream Linux kernel. Darren will explore the complex task of Linux kernel configuration management through some common scenarios and pitfalls, and show how granular configuration with fragments provides for a more deliberate and more manageable approach to Linux kernel configuration management.

About Darren Hart
Darren is the Director of the Open Source Technology Center at VMware. He leads the engineering team in their efforts to contribute to open-source projects as well as role model and advocate for open source best practices within VMware. Prior to VMware, Darren spent 7 years at each of Intel and IBM where he worked on real-time Linux, embedded platform enabling, ACPI specifications, open hardware, and safety critical software. He has maintained the x86 platform drivers in the Linux kernel since 2014. Darren has degrees in Computer Engineering and Computer Science from Brigham Young University. He lives with his wife and two children in Portland, OR.
Captions: 
	00:00:00,000 --> 00:00:03,510
thanks for joining my name is Darren

00:00:01,650 --> 00:00:07,200
Hart I'm the director of the open source

00:00:03,510 --> 00:00:08,940
technology center at VMware and today

00:00:07,200 --> 00:00:12,809
we're going to talk about managing Linux

00:00:08,940 --> 00:00:16,500
kernel configs specifically with config

00:00:12,809 --> 00:00:18,930
fragments so just as a general idea how

00:00:16,500 --> 00:00:24,230
many folks maintain a Linux kernel

00:00:18,930 --> 00:00:29,279
config for a project for a product for

00:00:24,230 --> 00:00:31,710
okay whoa whoa okay awesome

00:00:29,279 --> 00:00:33,600
and so today we're going to talk about

00:00:31,710 --> 00:00:35,370
some tools that are available within the

00:00:33,600 --> 00:00:37,710
Linux kernel to try and minimize the

00:00:35,370 --> 00:00:39,780
amount of work and effort around that

00:00:37,710 --> 00:00:45,020
process all right

00:00:39,780 --> 00:00:48,450
so oh this worked before here we go

00:00:45,020 --> 00:00:51,930
Linux is used broadly throughout the

00:00:48,450 --> 00:00:55,559
industry from phones to servers to

00:00:51,930 --> 00:00:57,149
laptops to supercomputers and the

00:00:55,559 --> 00:00:58,770
requirements of each of those is very

00:00:57,149 --> 00:01:01,920
different so this is this is the

00:00:58,770 --> 00:01:05,460
embedded track and so in that space we

00:01:01,920 --> 00:01:09,450
particularly see a wide variety of

00:01:05,460 --> 00:01:12,869
configuration types embedded is a lot

00:01:09,450 --> 00:01:15,360
less boring than pcs and and servers and

00:01:12,869 --> 00:01:17,220
so we see a just a lot of diversity in

00:01:15,360 --> 00:01:19,830
the way that we create configuration

00:01:17,220 --> 00:01:23,790
fragments so on the left for anyone

00:01:19,830 --> 00:01:27,689
that's relatively new this is what a few

00:01:23,790 --> 00:01:30,479
lines of a typical config looks like for

00:01:27,689 --> 00:01:35,700
the Linux kernel you'll see in the lower

00:01:30,479 --> 00:01:40,170
area here 3456 is the length of that

00:01:35,700 --> 00:01:44,100
particular dot config this is the

00:01:40,170 --> 00:01:48,270
largest number of unique config symbols

00:01:44,100 --> 00:01:50,820
in the Linux kernel and it's not really

00:01:48,270 --> 00:01:53,909
going down so over this period of time

00:01:50,820 --> 00:01:56,369
except for the last couple we've seen a

00:01:53,909 --> 00:01:59,280
continual increase in the total number

00:01:56,369 --> 00:02:02,430
of configs now those of you that manage

00:01:59,280 --> 00:02:05,430
your configs are saying oh we never use

00:02:02,430 --> 00:02:08,099
all of those we use def configs for a

00:02:05,430 --> 00:02:10,530
given architecture and that really cuts

00:02:08,099 --> 00:02:13,250
that down a lot and you're right takes

00:02:10,530 --> 00:02:16,760
it all the way down to here which

00:02:13,250 --> 00:02:19,250
is still a lot and then you can say okay

00:02:16,760 --> 00:02:22,160
but I only do that once and then I only

00:02:19,250 --> 00:02:24,620
have to do a diff each time for the for

00:02:22,160 --> 00:02:28,640
the DEF config as it changes okay sure

00:02:24,620 --> 00:02:31,340
still smaller 500 lines of difference

00:02:28,640 --> 00:02:34,820
between each one okay but a lot of

00:02:31,340 --> 00:02:36,770
that's context right so really in terms

00:02:34,820 --> 00:02:41,480
of actual changes you're only talking

00:02:36,770 --> 00:02:43,220
about a hundred or so sure and that's

00:02:41,480 --> 00:02:45,440
just to maintain the default you have

00:02:43,220 --> 00:02:48,800
made no decisions you haven't made any

00:02:45,440 --> 00:02:51,620
selections of configs yourself this is

00:02:48,800 --> 00:02:56,000
entirely every single kernel revision

00:02:51,620 --> 00:02:59,270
just to maintain a default config so we

00:02:56,000 --> 00:03:01,160
can do better than that but before we

00:02:59,270 --> 00:03:04,910
get into that let's talk a little bit

00:03:01,160 --> 00:03:06,650
about the k config language so k config

00:03:04,910 --> 00:03:10,610
is the mechanism that we use within the

00:03:06,650 --> 00:03:12,650
linux kernel to be able to create

00:03:10,610 --> 00:03:15,920
dependencies and such throughout the

00:03:12,650 --> 00:03:18,590
various config symbols in the kernel on

00:03:15,920 --> 00:03:20,480
the right is an example k config file

00:03:18,590 --> 00:03:22,220
all the config symbols within the kernel

00:03:20,480 --> 00:03:23,959
are created from these k config files

00:03:22,220 --> 00:03:27,830
you'll typically find one in any major

00:03:23,959 --> 00:03:30,709
directory or subsystem and they're all

00:03:27,830 --> 00:03:32,930
created with a few general rules or a

00:03:30,709 --> 00:03:34,760
few general types first you have the

00:03:32,930 --> 00:03:36,620
name config and in the symbol name which

00:03:34,760 --> 00:03:38,299
is the all-caps bit that you see and

00:03:36,620 --> 00:03:41,660
typically how will you refer to the

00:03:38,299 --> 00:03:45,170
symbols everything has a type and these

00:03:41,660 --> 00:03:47,090
are generally generally you say yes or

00:03:45,170 --> 00:03:50,750
module herb sorry module or built in

00:03:47,090 --> 00:03:53,110
right so all these types are derivatives

00:03:50,750 --> 00:03:58,940
of tri-state or string tri-state is

00:03:53,110 --> 00:04:00,230
built in module or no and then string is

00:03:58,940 --> 00:04:01,700
just that it's a string and then the

00:04:00,230 --> 00:04:04,310
other types are derived from those a

00:04:01,700 --> 00:04:07,670
bool eliminates the module and they need

00:04:04,310 --> 00:04:12,140
to create hex or int and numbers from

00:04:07,670 --> 00:04:14,690
the strings the prompt is the part that

00:04:12,140 --> 00:04:17,510
you read in menu config prompt is the

00:04:14,690 --> 00:04:19,910
user visible user visible description of

00:04:17,510 --> 00:04:21,229
what this symbol is for if it doesn't

00:04:19,910 --> 00:04:23,780
have a prompt it doesn't show up and

00:04:21,229 --> 00:04:27,530
menu config but that doesn't mean that

00:04:23,780 --> 00:04:29,840
it's not there it means it gets selected

00:04:27,530 --> 00:04:31,340
or something like that and in another

00:04:29,840 --> 00:04:34,850
way and we'll talk about select in a

00:04:31,340 --> 00:04:37,010
minute there's a setting called default

00:04:34,850 --> 00:04:38,930
and this and this tells the

00:04:37,010 --> 00:04:40,900
configuration system whether or not the

00:04:38,930 --> 00:04:43,520
config should be enabled by default

00:04:40,900 --> 00:04:49,820
unless it's something that everybody

00:04:43,520 --> 00:04:53,570
uses that's typically no depends is the

00:04:49,820 --> 00:04:55,640
way that we satisfy mutual requirements

00:04:53,570 --> 00:04:57,320
within the cake config language so if

00:04:55,640 --> 00:04:59,750
you want to write an I square C driver

00:04:57,320 --> 00:05:02,570
you need to have I Square C enabled if

00:04:59,750 --> 00:05:06,220
you want to write if you're writing an a

00:05:02,570 --> 00:05:08,960
CPI driver you need a CPI if you're

00:05:06,220 --> 00:05:13,430
creating drivers that only run on x86

00:05:08,960 --> 00:05:15,530
then you might depend on x86 but it gets

00:05:13,430 --> 00:05:19,160
more complex than that so on the example

00:05:15,530 --> 00:05:24,020
on the right you'll see depends on a CPI

00:05:19,160 --> 00:05:26,360
WMI or a CPI WMI equals no so ostensibly

00:05:24,020 --> 00:05:30,740
that's a little confusing right it says

00:05:26,360 --> 00:05:35,360
I depend on either you have this feature

00:05:30,740 --> 00:05:38,450
or you don't have this feature so that's

00:05:35,360 --> 00:05:40,580
a yes right so it depends means more

00:05:38,450 --> 00:05:44,030
than just this has to be there

00:05:40,580 --> 00:05:47,479
the depend statement means that if you

00:05:44,030 --> 00:05:51,740
want to build this driver or this

00:05:47,479 --> 00:05:55,340
feature you have to you depend on this

00:05:51,740 --> 00:05:57,350
other symbol then you cannot be if that

00:05:55,340 --> 00:05:58,729
other symbol is built in then you can be

00:05:57,350 --> 00:06:01,370
built in our module but if that other

00:05:58,729 --> 00:06:02,960
symbol is a module you can't be built in

00:06:01,370 --> 00:06:07,090
because you'll be missing the symbols at

00:06:02,960 --> 00:06:10,610
boot right so what that is saying is if

00:06:07,090 --> 00:06:13,430
symbol foo then you have to follow up on

00:06:10,610 --> 00:06:15,200
whatever depends on that means or not

00:06:13,430 --> 00:06:17,570
symbol fill foo and then we don't worry

00:06:15,200 --> 00:06:20,650
about it it's a little bit confusing but

00:06:17,570 --> 00:06:22,820
the reason I highlight it here is it's

00:06:20,650 --> 00:06:25,120
illustrative of the complexity of the

00:06:22,820 --> 00:06:27,680
cake config language and then finally

00:06:25,120 --> 00:06:29,930
select so select is that hand grenade

00:06:27,680 --> 00:06:32,000
that we throw into our configs that just

00:06:29,930 --> 00:06:33,710
breaks everything so when you do a

00:06:32,000 --> 00:06:36,800
select it's like a reverse dependency

00:06:33,710 --> 00:06:39,650
without dependency tracking so you can

00:06:36,800 --> 00:06:41,120
select another symbol but it won't

00:06:39,650 --> 00:06:43,190
through and make sure that the select

00:06:41,120 --> 00:06:45,500
that that symbols dependencies were

00:06:43,190 --> 00:06:47,150
satisfied so you typically only use

00:06:45,500 --> 00:06:48,710
select for something that has no

00:06:47,150 --> 00:06:50,840
dependencies and even better if it

00:06:48,710 --> 00:06:52,550
doesn't have a prompt because what that

00:06:50,840 --> 00:06:55,280
means is the users not going to be able

00:06:52,550 --> 00:06:57,620
to go select it on their own so always

00:06:55,280 --> 00:06:59,539
be careful if you're defining selects or

00:06:57,620 --> 00:07:03,860
using wealth both defining and using

00:06:59,539 --> 00:07:04,550
selects okay so if you'd like to know

00:07:03,860 --> 00:07:06,560
more

00:07:04,550 --> 00:07:11,630
there's excruciating detail available in

00:07:06,560 --> 00:07:14,539
the documentation okay so we're talking

00:07:11,630 --> 00:07:17,539
about managing Linux kernel configs and

00:07:14,539 --> 00:07:18,979
so both and we're typically hopefully

00:07:17,539 --> 00:07:21,380
all of you doing that are doing so in

00:07:18,979 --> 00:07:22,970
revision control and if you're working

00:07:21,380 --> 00:07:26,660
with revision control let's review what

00:07:22,970 --> 00:07:28,610
a good get commit is a good get commit

00:07:26,660 --> 00:07:31,370
should start with a problem that should

00:07:28,610 --> 00:07:36,050
be defined why why is this change

00:07:31,370 --> 00:07:39,289
necessary it should describe the intent

00:07:36,050 --> 00:07:41,419
of the of the developer this is the

00:07:39,289 --> 00:07:43,490
problem and this is how I'm going about

00:07:41,419 --> 00:07:45,860
fixing it this is what I intend to do

00:07:43,490 --> 00:07:48,199
then the changes should address the

00:07:45,860 --> 00:07:51,199
problem in a way that is consistent with

00:07:48,199 --> 00:07:53,000
the stated intent and then number four

00:07:51,199 --> 00:07:57,889
is the most important part right it

00:07:53,000 --> 00:08:02,900
doesn't do anything else and we'll talk

00:07:57,889 --> 00:08:03,830
about that in this context okay so let's

00:08:02,900 --> 00:08:06,409
take an example

00:08:03,830 --> 00:08:08,510
um let's turn on the dell lesson bios

00:08:06,409 --> 00:08:10,490
driver so all of you are familiar with

00:08:08,510 --> 00:08:12,260
men you can figure on the right you type

00:08:10,490 --> 00:08:14,780
in make menu config you open up that

00:08:12,260 --> 00:08:16,669
menu you search through it you check a

00:08:14,780 --> 00:08:18,380
couple of things you go to exit and it

00:08:16,669 --> 00:08:19,789
says would you like to save your changes

00:08:18,380 --> 00:08:25,970
you say of course and it writes it to

00:08:19,789 --> 00:08:28,610
the dot config so the diff created by

00:08:25,970 --> 00:08:30,680
this should indicate to me that I've

00:08:28,610 --> 00:08:32,930
made that I've enabled those two drivers

00:08:30,680 --> 00:08:35,839
right that's the only thing I wanted to

00:08:32,930 --> 00:08:38,599
do here that was my intent was enabled

00:08:35,839 --> 00:08:42,130
LS and BIOS so my changes should reflect

00:08:38,599 --> 00:08:42,130
that and nothing else

00:08:45,760 --> 00:08:52,910
huh okay so in green you see the three

00:08:50,959 --> 00:08:56,540
that I wanted and then there's context

00:08:52,910 --> 00:09:02,180
that's cool but then there's all these

00:08:56,540 --> 00:09:04,310
other things and you might and so things

00:09:02,180 --> 00:09:06,649
like the del W my descriptor is set to a

00:09:04,310 --> 00:09:07,760
module I didn't turn that on but then

00:09:06,649 --> 00:09:11,209
you might say okay but all that other

00:09:07,760 --> 00:09:13,610
stuff is just comments right no because

00:09:11,209 --> 00:09:16,010
when we these are symbols and we check

00:09:13,610 --> 00:09:19,540
to see if they are defined the pound

00:09:16,010 --> 00:09:22,519
symbol is not set is effectively no

00:09:19,540 --> 00:09:24,649
right this is saying I explicitly am

00:09:22,519 --> 00:09:27,640
saying that I don't want this thing and

00:09:24,649 --> 00:09:30,529
so the reason that that's a problem is

00:09:27,640 --> 00:09:32,149
let's say later you got this Dell laptop

00:09:30,529 --> 00:09:33,950
you just turn the del s and BIOS on so

00:09:32,149 --> 00:09:36,529
you want to be able to come in later and

00:09:33,950 --> 00:09:38,029
turn on the Dell W my led so you go and

00:09:36,529 --> 00:09:40,940
you look at the config and what you

00:09:38,029 --> 00:09:44,810
realize is hey some developer in the

00:09:40,940 --> 00:09:48,620
past intentionally disabled the dell w

00:09:44,810 --> 00:09:50,630
mi LED they turned it off but you're

00:09:48,620 --> 00:09:52,430
trying to turn it on so now you need to

00:09:50,630 --> 00:09:53,390
know why did they turn it off you want

00:09:52,430 --> 00:09:54,860
to know that right because you're not

00:09:53,390 --> 00:09:57,050
just gonna change what they did

00:09:54,860 --> 00:09:59,480
intentionally was something else unless

00:09:57,050 --> 00:10:00,860
you know because if you turn that on to

00:09:59,480 --> 00:10:02,930
make your laptop work you might break

00:10:00,860 --> 00:10:06,199
theirs because you don't have their

00:10:02,930 --> 00:10:08,630
laptop to test so this is where the

00:10:06,199 --> 00:10:10,010
managing a monolithic kernel config it's

00:10:08,630 --> 00:10:12,500
to be a real problem because you're

00:10:10,010 --> 00:10:16,070
recording not only your intent but also

00:10:12,500 --> 00:10:19,269
the artifacts that come out of turning

00:10:16,070 --> 00:10:22,850
certain things on in the kernel config

00:10:19,269 --> 00:10:24,170
now this was these fifty-seven lines for

00:10:22,850 --> 00:10:26,779
example though keep in mind that was to

00:10:24,170 --> 00:10:29,779
turn on one driver so presumably you're

00:10:26,779 --> 00:10:32,089
going to have 100 that you explicitly

00:10:29,779 --> 00:10:35,720
set for your project or your product so

00:10:32,089 --> 00:10:38,390
now you have five thousand lines of

00:10:35,720 --> 00:10:41,089
diffs that you're managing to turn on

00:10:38,390 --> 00:10:43,399
those and then anytime that the def

00:10:41,089 --> 00:10:44,750
config changes your context changes and

00:10:43,399 --> 00:10:47,329
as your context changes you have to

00:10:44,750 --> 00:10:50,870
rewrite these patches too so this gets

00:10:47,329 --> 00:10:52,550
to be a pretty ungainly thing to

00:10:50,870 --> 00:10:55,100
maintain so what can we do differently

00:10:52,550 --> 00:10:57,110
so let's start with what I want my disk

00:10:55,100 --> 00:10:58,610
to look like so on the left you have an

00:10:57,110 --> 00:11:00,890
example of what I would like

00:10:58,610 --> 00:11:03,790
my DIF to look like I have the three

00:11:00,890 --> 00:11:07,670
lines that I explicitly changed and

00:11:03,790 --> 00:11:10,490
nothing else and I save this to a file

00:11:07,670 --> 00:11:13,880
that's called Dell s and BIOS dub what

00:11:10,490 --> 00:11:18,410
did I call it del s and BIOS W my dot

00:11:13,880 --> 00:11:20,240
config so if I do that then I can use

00:11:18,410 --> 00:11:23,500
this is what I call a configuration

00:11:20,240 --> 00:11:26,690
fragment and to be able to apply this

00:11:23,500 --> 00:11:30,320
the Linux kernel build system knows how

00:11:26,690 --> 00:11:31,820
to merge configuration fragments so if

00:11:30,320 --> 00:11:34,550
you look at the commands on the right I

00:11:31,820 --> 00:11:36,769
do a def config and then check to see

00:11:34,550 --> 00:11:39,769
what the del s of BIOS is you can see it

00:11:36,769 --> 00:11:43,670
is not set and then I do a make def

00:11:39,769 --> 00:11:46,610
config del s and BIOS wmijuc config and

00:11:43,670 --> 00:11:50,269
so what that will do is merge the config

00:11:46,610 --> 00:11:52,579
fragment into your larger dot config for

00:11:50,269 --> 00:11:54,740
you and then we do a we do a test

00:11:52,579 --> 00:11:56,660
afterward with grep and look for SM BIOS

00:11:54,740 --> 00:12:00,110
and we see that both del s and BIOS and

00:11:56,660 --> 00:12:01,430
LS and BIOS WMI are configured and now

00:12:00,110 --> 00:12:06,410
if we build the kernel we'll have that

00:12:01,430 --> 00:12:09,199
support now the the change is something

00:12:06,410 --> 00:12:11,269
that is independent of the def config so

00:12:09,199 --> 00:12:13,089
not only do I only record the three

00:12:11,269 --> 00:12:16,459
things that I wanted to change but

00:12:13,089 --> 00:12:18,140
unless that unless the later kernel

00:12:16,459 --> 00:12:20,149
versions change the name of those

00:12:18,140 --> 00:12:22,820
symbols or add dependencies that you

00:12:20,149 --> 00:12:26,000
thus have to satisfy you don't have to

00:12:22,820 --> 00:12:29,180
change that file ever so you're able to

00:12:26,000 --> 00:12:31,399
maintain the the specific things that

00:12:29,180 --> 00:12:33,800
you wanted to change in a separate file

00:12:31,399 --> 00:12:35,899
build the config and then build your

00:12:33,800 --> 00:12:38,240
kernel and so this makes sure your

00:12:35,899 --> 00:12:41,449
config management a much more explicit

00:12:38,240 --> 00:12:43,610
process right that's good for you that's

00:12:41,449 --> 00:12:45,380
good for people doing debug later that's

00:12:43,610 --> 00:12:47,300
good for people doing code review it's

00:12:45,380 --> 00:12:53,930
all a lot more explicit in what you're

00:12:47,300 --> 00:12:59,269
trying to do okay so what does it

00:12:53,930 --> 00:13:00,560
actually do so the last one I just piped

00:12:59,269 --> 00:13:02,480
all this to death null because it's

00:13:00,560 --> 00:13:03,980
noisy but if you look at what's

00:13:02,480 --> 00:13:06,800
happening here I just run the same

00:13:03,980 --> 00:13:09,890
command again based on Def config add my

00:13:06,800 --> 00:13:11,600
configuration fragment so it says it's

00:13:09,890 --> 00:13:14,720
using the dot configures base

00:13:11,600 --> 00:13:18,170
and then it's merging the Delta s in

00:13:14,720 --> 00:13:20,029
BIOS WI config into the main config and

00:13:18,170 --> 00:13:22,339
then it goes through each line one at a

00:13:20,029 --> 00:13:24,380
time and it says hey this config

00:13:22,339 --> 00:13:27,949
fragment is overwriting the previously

00:13:24,380 --> 00:13:30,920
defined value of symbol foo its new

00:13:27,949 --> 00:13:34,870
value is going to be this and then it

00:13:30,920 --> 00:13:37,519
just walks through each one in in your

00:13:34,870 --> 00:13:39,500
config fragment and it'll do this for

00:13:37,519 --> 00:13:40,880
every config fragment that you specify

00:13:39,500 --> 00:13:43,160
in the command line so you can have a

00:13:40,880 --> 00:13:45,560
hundred of these and it'll just please

00:13:43,160 --> 00:13:48,199
don't have a hundred but it'll go

00:13:45,560 --> 00:13:51,170
through each of these and and give you a

00:13:48,199 --> 00:13:53,060
report out and then finally it'll save

00:13:51,170 --> 00:13:59,839
that to your dot config and now you're

00:13:53,060 --> 00:14:02,839
ready to build this is dependent on a

00:13:59,839 --> 00:14:04,160
script called merge config so while I

00:14:02,839 --> 00:14:07,100
was at Intel I spent a lot of time

00:14:04,160 --> 00:14:10,009
working on the kernel management in the

00:14:07,100 --> 00:14:12,050
Yocto project and this idea was kind of

00:14:10,009 --> 00:14:15,579
born from the way we managed that in the

00:14:12,050 --> 00:14:17,810
octo project and I felt that you know

00:14:15,579 --> 00:14:19,459
config fragments which we use in the

00:14:17,810 --> 00:14:20,630
octo project are a great idea that

00:14:19,459 --> 00:14:22,310
should probably have an upstream

00:14:20,630 --> 00:14:25,339
counterpart maybe we can leverage that

00:14:22,310 --> 00:14:27,800
so with a few other developers outside

00:14:25,339 --> 00:14:30,680
of Intel we wrote the merge config

00:14:27,800 --> 00:14:36,319
script and we merge that upstream and

00:14:30,680 --> 00:14:40,069
since merge config is yeah merge config

00:14:36,319 --> 00:14:42,620
has become a part of the upstream build

00:14:40,069 --> 00:14:44,779
process so MIPS uses it PowerPC use is

00:14:42,620 --> 00:14:47,779
it this is not an additional thing this

00:14:44,779 --> 00:14:49,910
is upstream Linux it's available there

00:14:47,779 --> 00:14:52,850
now and it's used as part of the default

00:14:49,910 --> 00:14:54,800
build system so if you're not interested

00:14:52,850 --> 00:14:56,240
in explicitly generating the config and

00:14:54,800 --> 00:14:58,670
building your kernel and you just want

00:14:56,240 --> 00:15:03,230
to manipulate config files you can use

00:14:58,670 --> 00:15:04,819
merge config directly it's in scripts

00:15:03,230 --> 00:15:05,540
Kay config and it's got a few options

00:15:04,819 --> 00:15:08,180
there

00:15:05,540 --> 00:15:09,860
a couple of things that you can do my

00:15:08,180 --> 00:15:13,790
examples previously we're all about

00:15:09,860 --> 00:15:17,470
using def config but if you're working

00:15:13,790 --> 00:15:19,319
on embedded you probably have some

00:15:17,470 --> 00:15:21,579
sensitivities to

00:15:19,319 --> 00:15:23,170
resources you don't want a big kernel

00:15:21,579 --> 00:15:24,759
you don't want a ton of modules you want

00:15:23,170 --> 00:15:28,019
to keep this minimal so you might start

00:15:24,759 --> 00:15:31,509
with all no config so that that's the -

00:15:28,019 --> 00:15:35,350
in option up there so you can start with

00:15:31,509 --> 00:15:37,089
all no config which is all no right and

00:15:35,350 --> 00:15:38,619
then you can add I need this

00:15:37,089 --> 00:15:44,290
architecture and need this machine I

00:15:38,619 --> 00:15:47,170
need these drivers ok so a little bit

00:15:44,290 --> 00:15:50,619
about config organizations so as you can

00:15:47,170 --> 00:15:52,240
imagine if you did a config fragment for

00:15:50,619 --> 00:15:54,279
every driver you wanted you would have

00:15:52,240 --> 00:15:56,410
way more than you probably wanted to

00:15:54,279 --> 00:15:58,179
manage but if you did it all in one then

00:15:56,410 --> 00:16:02,439
you kind of start having the same

00:15:58,179 --> 00:16:03,730
problem that we started with so the

00:16:02,439 --> 00:16:05,199
Yocto project which I think does a

00:16:03,730 --> 00:16:07,149
really good job at the way they

00:16:05,199 --> 00:16:09,339
recommend doing configuration management

00:16:07,149 --> 00:16:12,300
breaks things up generally like this so

00:16:09,339 --> 00:16:14,949
I'm going to use the same example

00:16:12,300 --> 00:16:17,769
there's certain policy decisions that

00:16:14,949 --> 00:16:19,119
you make when you're creating your Linux

00:16:17,769 --> 00:16:21,189
kernel for your projects you might

00:16:19,119 --> 00:16:23,860
decide on which file systems you use or

00:16:21,189 --> 00:16:26,290
which crypto algorithms you're going to

00:16:23,860 --> 00:16:28,420
support which networking stacks those

00:16:26,290 --> 00:16:30,730
are all policy decisions that you make

00:16:28,420 --> 00:16:33,040
and that can be one configuration

00:16:30,730 --> 00:16:35,679
fragment another might be the

00:16:33,040 --> 00:16:37,240
architecture you could use a def config

00:16:35,679 --> 00:16:40,059
that maybe you don't want to use that

00:16:37,240 --> 00:16:42,309
entire def config which is usually more

00:16:40,059 --> 00:16:44,379
like this works on my server or my my

00:16:42,309 --> 00:16:46,299
general PC or something like that if you

00:16:44,379 --> 00:16:48,189
have a very targeted device your

00:16:46,299 --> 00:16:50,799
architecture definition might be

00:16:48,189 --> 00:16:52,509
considerably smaller more restrictive so

00:16:50,799 --> 00:16:54,369
if you're pairing this with an O config

00:16:52,509 --> 00:16:57,100
having an architecture fragment is a

00:16:54,369 --> 00:16:58,899
good idea and then from there if you

00:16:57,100 --> 00:17:01,660
have boards specific things so which

00:16:58,899 --> 00:17:03,549
which buses do you have and which

00:17:01,660 --> 00:17:05,049
specific drivers are on board that's

00:17:03,549 --> 00:17:07,149
where you can put those kinds of

00:17:05,049 --> 00:17:08,770
configurations and then if you're

00:17:07,149 --> 00:17:11,049
working on a device that is not locked

00:17:08,770 --> 00:17:13,449
down but might have users adding or

00:17:11,049 --> 00:17:16,120
removing things to it that's where the

00:17:13,449 --> 00:17:18,459
general drivers work so things like USB

00:17:16,120 --> 00:17:19,600
webcams are a really good example like

00:17:18,459 --> 00:17:25,449
which ones of those do you want to

00:17:19,600 --> 00:17:27,309
support and then finally looking forward

00:17:25,449 --> 00:17:30,580
as I was creating this presentation I

00:17:27,309 --> 00:17:32,280
noticed a few things creating your

00:17:30,580 --> 00:17:35,190
configuration fragments is currently

00:17:32,280 --> 00:17:36,810
so you go in there and you go through

00:17:35,190 --> 00:17:37,980
menu config and you search and you find

00:17:36,810 --> 00:17:39,630
the one that you want and then you go

00:17:37,980 --> 00:17:42,720
type it into the file and you say what

00:17:39,630 --> 00:17:44,640
you want it to be and it'd be really

00:17:42,720 --> 00:17:47,790
nice if I could go into menu config and

00:17:44,640 --> 00:17:50,430
have it record which things I check yes

00:17:47,790 --> 00:17:51,750
module on and then just when I exit it

00:17:50,430 --> 00:17:54,180
says do you want to save your config

00:17:51,750 --> 00:17:56,310
maybe I could instead say would you like

00:17:54,180 --> 00:17:58,230
to save your fragment that would be

00:17:56,310 --> 00:18:00,390
really nice right it just generates that

00:17:58,230 --> 00:18:02,250
for me not all the things that changed

00:18:00,390 --> 00:18:04,140
just all the things I intentionally

00:18:02,250 --> 00:18:05,940
changed I don't care about all the

00:18:04,140 --> 00:18:07,500
things that got checked by default

00:18:05,940 --> 00:18:09,780
I'm accepting the defaults these are

00:18:07,500 --> 00:18:11,130
just the things that I changed I wanted

00:18:09,780 --> 00:18:13,410
to write that on the plane because Dave

00:18:11,130 --> 00:18:16,260
Hanson shamed me into not having had a

00:18:13,410 --> 00:18:17,190
30,000 foot commit but my flights got

00:18:16,260 --> 00:18:20,820
all screwed up and I didn't get that

00:18:17,190 --> 00:18:23,100
done so maybe on the way back

00:18:20,820 --> 00:18:26,370
and then another thing I noticed was

00:18:23,100 --> 00:18:28,710
merge config can silently fail so if you

00:18:26,370 --> 00:18:31,650
add something that has it doesn't know

00:18:28,710 --> 00:18:33,150
about rather than saying hey you tried

00:18:31,650 --> 00:18:33,540
to config this to that and it didn't

00:18:33,150 --> 00:18:36,930
happen

00:18:33,540 --> 00:18:39,570
it's quiet about it and I notice that

00:18:36,930 --> 00:18:40,950
last night and I didn't actually nail

00:18:39,570 --> 00:18:44,760
down exactly what's happening so that's

00:18:40,950 --> 00:18:47,700
something we can work on fixing and then

00:18:44,760 --> 00:18:49,590
something like make audit config where

00:18:47,700 --> 00:18:51,930
you pass all your config fragments after

00:18:49,590 --> 00:18:53,910
it where it can go through and then

00:18:51,930 --> 00:18:54,780
verify or any of these things that

00:18:53,910 --> 00:18:58,020
you've asked for

00:18:54,780 --> 00:19:00,090
not in the dot config seems like it

00:18:58,020 --> 00:19:04,500
would be a pretty useful tool for some

00:19:00,090 --> 00:19:06,510
of our CI CD processes when people are

00:19:04,500 --> 00:19:07,620
changing that configs so those are my

00:19:06,510 --> 00:19:10,890
thoughts on what we might do in the

00:19:07,620 --> 00:19:12,360
future and that's the content that I had

00:19:10,890 --> 00:19:14,820
to share with you today that leaves us

00:19:12,360 --> 00:19:18,180
with a little over five minutes for

00:19:14,820 --> 00:19:19,740
questions I've got a live system up if

00:19:18,180 --> 00:19:21,270
you had specific questions or you wanted

00:19:19,740 --> 00:19:22,920
to see us in some things worked we could

00:19:21,270 --> 00:19:24,510
go through but if you have questions

00:19:22,920 --> 00:19:26,250
I've got some folks with mics that'll

00:19:24,510 --> 00:19:27,420
happily walk them back down so we got

00:19:26,250 --> 00:19:31,500
some quick let's start going through

00:19:27,420 --> 00:19:38,660
questions here on the left and Suzanne

00:19:31,500 --> 00:19:38,660
over to Alex yep up here in front

00:19:40,270 --> 00:19:46,390
so what I wondered about a conflicts

00:19:43,020 --> 00:19:48,370
that how like doctor uses them isn't

00:19:46,390 --> 00:19:50,860
couldn't be in some cases the order be

00:19:48,370 --> 00:19:53,140
significant and how does Yocto decide in

00:19:50,860 --> 00:19:56,679
which order it uses there's conflicts

00:19:53,140 --> 00:19:59,260
okay does the order matter yes the order

00:19:56,679 --> 00:20:02,650
matters so each each subsequent one can

00:19:59,260 --> 00:20:10,480
override the prior I would recommend

00:20:02,650 --> 00:20:14,800
that when you have these that you apply

00:20:10,480 --> 00:20:16,900
them in this order as well but this is

00:20:14,800 --> 00:20:19,420
also why I think that the make audit

00:20:16,900 --> 00:20:21,370
config is something we should work on

00:20:19,420 --> 00:20:23,980
because then you can be could be

00:20:21,370 --> 00:20:25,929
something I forgot to mention was your

00:20:23,980 --> 00:20:28,120
your fragments can indeed be

00:20:25,929 --> 00:20:30,130
contradictory and if they are something

00:20:28,120 --> 00:20:32,290
you should be aware of yeah good

00:20:30,130 --> 00:20:38,020
question and that's not Yocto specific

00:20:32,290 --> 00:20:39,730
that's upstream but yes hello do you

00:20:38,020 --> 00:20:42,100
think you could sorry one sec Bart

00:20:39,730 --> 00:20:44,470
there's a question oh let's take the mic

00:20:42,100 --> 00:20:46,179
over to him in the back go ahead do you

00:20:44,470 --> 00:20:47,530
think this kind of merge conflict system

00:20:46,179 --> 00:20:49,300
could be used for something else either

00:20:47,530 --> 00:20:52,000
the similar conflict system say build

00:20:49,300 --> 00:20:54,550
route build route busybox yeah anything

00:20:52,000 --> 00:20:59,559
that's k config based yep right next

00:20:54,550 --> 00:21:02,200
year okay I was having the question

00:20:59,559 --> 00:21:04,150
whether or you could only enable the

00:21:02,200 --> 00:21:06,130
config symbols or also this April don't

00:21:04,150 --> 00:21:08,800
know yeah good question you can also put

00:21:06,130 --> 00:21:12,970
pound config symbol is not set that's

00:21:08,800 --> 00:21:15,730
the same thing as saying no yep hi there

00:21:12,970 --> 00:21:19,300
um is there or do you have any easy way

00:21:15,730 --> 00:21:21,490
to trace back when a dependencies not

00:21:19,300 --> 00:21:23,920
met because when you when you merge it

00:21:21,490 --> 00:21:25,450
you say it says uh something didn't get

00:21:23,920 --> 00:21:27,250
enabled but it was on the config right

00:21:25,450 --> 00:21:30,580
but it only tells you like the last

00:21:27,250 --> 00:21:31,780
thing that wasn't enabled for it to be

00:21:30,580 --> 00:21:34,530
enabled you know I'm saying

00:21:31,780 --> 00:21:37,720
so yeah fact the whole dependency chain

00:21:34,530 --> 00:21:39,280
the that's a really good question I

00:21:37,720 --> 00:21:40,570
think it's something we'd all like it's

00:21:39,280 --> 00:21:43,360
something that the Yocto project has

00:21:40,570 --> 00:21:45,309
struggled with too and one of the

00:21:43,360 --> 00:21:49,120
problems with that there's a term that

00:21:45,309 --> 00:21:50,679
we use that describes the type of prop

00:21:49,120 --> 00:21:51,870
that the type of problem that a

00:21:50,679 --> 00:21:53,900
dependency

00:21:51,870 --> 00:21:57,830
chain is and I don't remember the term

00:21:53,900 --> 00:22:01,230
but the the problem is you might have

00:21:57,830 --> 00:22:04,710
well you will have a number of depends

00:22:01,230 --> 00:22:06,870
on this or that and then that gets made

00:22:04,710 --> 00:22:09,030
more complex by each of those having it

00:22:06,870 --> 00:22:11,100
depends on this or that and so if you

00:22:09,030 --> 00:22:14,270
say enable this and it says I can't

00:22:11,100 --> 00:22:16,740
because the dependencies aren't met the

00:22:14,270 --> 00:22:20,309
what we'd like it to do is say please go

00:22:16,740 --> 00:22:22,650
enable this unfortunately that is please

00:22:20,309 --> 00:22:24,900
go enable this and this or that and this

00:22:22,650 --> 00:22:26,700
and and that parenthesis or this and

00:22:24,900 --> 00:22:30,540
that unless you're armed and then do

00:22:26,700 --> 00:22:32,340
this unless you're X so know that I

00:22:30,540 --> 00:22:36,660
think the best that we can do there is

00:22:32,340 --> 00:22:39,179
do the make audit config and then maybe

00:22:36,660 --> 00:22:41,910
provide some how to's on how to do that

00:22:39,179 --> 00:22:43,770
spelunking basically through the configs

00:22:41,910 --> 00:22:51,570
unless somebody else has a brilliant

00:22:43,770 --> 00:22:54,030
idea on how we can fix bruce these

00:22:51,570 --> 00:22:56,840
things yes a well what i use right now

00:22:54,030 --> 00:23:01,230
in Yocto it's the the python k config

00:22:56,840 --> 00:23:03,240
lib and it now can up to for eighteen

00:23:01,230 --> 00:23:04,980
plus parse all those dependencies so

00:23:03,240 --> 00:23:07,200
when it fails so you don't make it in

00:23:04,980 --> 00:23:09,450
the final config it does a pretty good

00:23:07,200 --> 00:23:11,250
job of going back and saying you missed

00:23:09,450 --> 00:23:13,440
this dependency this was selected or

00:23:11,250 --> 00:23:15,720
that and it you can do that's plunking

00:23:13,440 --> 00:23:17,370
in python and dump it out oh okay

00:23:15,720 --> 00:23:19,559
i'd like to catch up with you after and

00:23:17,370 --> 00:23:21,780
see what's possible there thanks in the

00:23:19,559 --> 00:23:25,370
back can you create an umbrella

00:23:21,780 --> 00:23:28,890
fragments that include all the fragments

00:23:25,370 --> 00:23:30,690
no right i don't i don't think we have

00:23:28,890 --> 00:23:33,210
any kind of an include system right now

00:23:30,690 --> 00:23:36,090
config fragments are strictly fragments

00:23:33,210 --> 00:23:38,940
of dot config so nothing more than

00:23:36,090 --> 00:23:41,460
config symbol or pound config symbol is

00:23:38,940 --> 00:23:45,929
not set is that anyone know differently

00:23:41,460 --> 00:23:48,600
i we considered that and what the the

00:23:45,929 --> 00:23:50,400
Yocto solution to that is a one

00:23:48,600 --> 00:23:52,350
higher-level language that wraps that

00:23:50,400 --> 00:23:55,050
that allows you to create those includes

00:23:52,350 --> 00:23:58,600
but in terms of the mainline linux merge

00:23:55,050 --> 00:24:03,250
config tooling we do not have that

00:23:58,600 --> 00:24:06,640
what about the options that get enabled

00:24:03,250 --> 00:24:09,640
by default when you enable or disable

00:24:06,640 --> 00:24:11,980
some other options what about dos so

00:24:09,640 --> 00:24:16,770
that is a really good question and that

00:24:11,980 --> 00:24:18,910
is what I was trying to illustrate here

00:24:16,770 --> 00:24:21,160
so that's basically what all those red

00:24:18,910 --> 00:24:23,169
things are and that's the additional

00:24:21,160 --> 00:24:26,020
context that you didn't intentionally

00:24:23,169 --> 00:24:29,679
change but that got added to the dot

00:24:26,020 --> 00:24:31,900
config and so the approach that I'm

00:24:29,679 --> 00:24:34,450
recommending is that don't worry about

00:24:31,900 --> 00:24:36,490
the defaults what because you didn't

00:24:34,450 --> 00:24:38,530
specify them let this let that be

00:24:36,490 --> 00:24:40,299
managed by the system only explicitly

00:24:38,530 --> 00:24:43,419
state what you care about which is in

00:24:40,299 --> 00:24:44,679
green and then if you when you go back

00:24:43,419 --> 00:24:46,960
and you look through your config later

00:24:44,679 --> 00:24:48,580
you might find that hey this is disabled

00:24:46,960 --> 00:24:51,100
or enabled things that I cared about and

00:24:48,580 --> 00:24:59,610
then explicitly add those into your

00:24:51,100 --> 00:25:04,179
config fragments one different question

00:24:59,610 --> 00:25:07,179
could you use this for arguments to be

00:25:04,179 --> 00:25:11,260
you take graph of the driver dependency

00:25:07,179 --> 00:25:14,350
at runtime sorry one more time

00:25:11,260 --> 00:25:17,620
could you use these fragments as some

00:25:14,350 --> 00:25:22,780
hint to the core now when it probes

00:25:17,620 --> 00:25:24,850
drivers that we have something exactly

00:25:22,780 --> 00:25:29,409
present on the platform you would like

00:25:24,850 --> 00:25:30,730
to run this kernel on oh that's a good

00:25:29,409 --> 00:25:36,100
idea I don't think we have anything like

00:25:30,730 --> 00:25:38,890
that now but yeah oh yeah thanks for

00:25:36,100 --> 00:25:47,500
your talk just a small notice there is a

00:25:38,890 --> 00:25:51,669
tricky word imply in Kay config so when

00:25:47,500 --> 00:25:54,640
when when some option enables or

00:25:51,669 --> 00:25:58,150
disables another option if it was not

00:25:54,640 --> 00:26:03,010
explicitly set it has not depend but

00:25:58,150 --> 00:26:05,679
imply and I wanted to ask whether your

00:26:03,010 --> 00:26:09,460
script while switching on and off the

00:26:05,679 --> 00:26:12,310
options report about changing employment

00:26:09,460 --> 00:26:15,460
options so it isn't it is

00:26:12,310 --> 00:26:17,710
dependency but it is a weak dependence a

00:26:15,460 --> 00:26:21,010
weak dependency yeah so for people

00:26:17,710 --> 00:26:23,440
wondering go look here it'll talk about

00:26:21,010 --> 00:26:25,000
imply I was trying to decide do I add

00:26:23,440 --> 00:26:27,730
imply or not I thought it was probably a

00:26:25,000 --> 00:26:31,450
little more special case this doesn't

00:26:27,730 --> 00:26:34,660
handle select or imply any differently

00:26:31,450 --> 00:26:36,730
than if you were to just change the

00:26:34,660 --> 00:26:40,390
config manually because all this does is

00:26:36,730 --> 00:26:42,790
merges explicit statements so it doesn't

00:26:40,390 --> 00:26:44,830
it won't report out on anything on what

00:26:42,790 --> 00:26:50,110
what you if you selected anything or

00:26:44,830 --> 00:26:50,970
imply anything okay yeah we have three

00:26:50,110 --> 00:26:54,130
more minutes

00:26:50,970 --> 00:26:56,050
we're okay because we're we are past but

00:26:54,130 --> 00:26:57,940
if we're I don't think there's anything

00:26:56,050 --> 00:26:59,980
conflicting in the room so unless they

00:26:57,940 --> 00:27:01,900
kick us out I think we have one up there

00:26:59,980 --> 00:27:05,860
and then aren't up here for the next

00:27:01,900 --> 00:27:08,860
Mike go ahead yeah I think the defaults

00:27:05,860 --> 00:27:11,320
are actually a problem because when you

00:27:08,860 --> 00:27:15,700
bump your kernel version the defaults

00:27:11,320 --> 00:27:21,220
may change yeah so just doing that yeah

00:27:15,700 --> 00:27:22,240
you're intense is as well it's not

00:27:21,220 --> 00:27:24,130
applied anymore

00:27:22,240 --> 00:27:26,080
and I don't think there's any good

00:27:24,130 --> 00:27:29,380
solution for that except for comparing

00:27:26,080 --> 00:27:32,230
the full coffee which is horrible so

00:27:29,380 --> 00:27:35,050
you're he makes a good point which is

00:27:32,230 --> 00:27:36,940
when you do change your your base kernel

00:27:35,050 --> 00:27:40,300
version you're going to get a bunch new

00:27:36,940 --> 00:27:43,950
defaults this is much less a config

00:27:40,300 --> 00:27:46,990
fragment management problem and more of

00:27:43,950 --> 00:27:50,950
Hayes maintain errs we need to be doing

00:27:46,990 --> 00:27:54,120
a better job at not enabling things by

00:27:50,950 --> 00:27:58,000
default that we shouldn't I got

00:27:54,120 --> 00:28:01,210
corrected a few months back about having

00:27:58,000 --> 00:28:04,330
way too many default yeses in the

00:28:01,210 --> 00:28:10,480
platform drivers x86 you might notice a

00:28:04,330 --> 00:28:14,740
patch from leanness that no no no the

00:28:10,480 --> 00:28:16,480
equals no not the anyway so that is

00:28:14,740 --> 00:28:19,080
something that as colonel maintainer z--

00:28:16,480 --> 00:28:23,250
we need to try and do a good job at

00:28:19,080 --> 00:28:25,660
avoiding that bloat of the default yes

00:28:23,250 --> 00:28:26,210
but otherwise you do need to do a

00:28:25,660 --> 00:28:28,460
compare

00:28:26,210 --> 00:28:30,230
if your kernel size grows hopefully

00:28:28,460 --> 00:28:31,909
you're watching that in your CI CD and

00:28:30,230 --> 00:28:34,759
you're able to come back and say what do

00:28:31,909 --> 00:28:38,240
I need to turn off and unfortunately yes

00:28:34,759 --> 00:28:41,090
that means adding a number of config

00:28:38,240 --> 00:28:43,580
symbol is not set all right

00:28:41,090 --> 00:28:49,309
so I'm missing a feature to turn on a

00:28:43,580 --> 00:28:53,049
symbol more but not less so for example

00:28:49,309 --> 00:28:55,429
we might want to test your M drivers and

00:28:53,049 --> 00:28:56,960
enable them as modules an arm but I

00:28:55,429 --> 00:29:01,009
applied the same contract fragment on

00:28:56,960 --> 00:29:03,259
x86 we're setting DRM from yes to module

00:29:01,009 --> 00:29:06,289
we'll just lose the console so we don't

00:29:03,259 --> 00:29:08,929
want to make it we don't want to make it

00:29:06,289 --> 00:29:12,860
module on x86 we want to leave that yes

00:29:08,929 --> 00:29:14,419
an arm we would want to make it module

00:29:12,860 --> 00:29:15,740
if it doesn't already on but we don't

00:29:14,419 --> 00:29:20,629
want to build it in because that just

00:29:15,740 --> 00:29:22,159
loads the kernel so that to me sounds

00:29:20,629 --> 00:29:23,929
like something you because it's

00:29:22,159 --> 00:29:25,639
architecture specific you'd want to

00:29:23,929 --> 00:29:27,200
include it in an architecture fragment

00:29:25,639 --> 00:29:30,200
as in what's Blissett state the idea was

00:29:27,200 --> 00:29:33,590
that we have a couple of those and it's

00:29:30,200 --> 00:29:36,350
always a fragment that is in principle

00:29:33,590 --> 00:29:39,249
architecture independent so we have a

00:29:36,350 --> 00:29:42,769
fragment that we want to use for running

00:29:39,249 --> 00:29:44,539
K self-test so having a K self-test

00:29:42,769 --> 00:29:46,549
fragment should not depend on the

00:29:44,539 --> 00:29:48,169
architecture we don't want to have the

00:29:46,549 --> 00:29:49,970
whole matrix of all architectures and

00:29:48,169 --> 00:29:53,629
all K self-test tests yeah

00:29:49,970 --> 00:29:58,039
but just having some way of saying apply

00:29:53,629 --> 00:30:00,860
this fragment but if it says equals M

00:29:58,039 --> 00:30:04,700
and is already enabled and don't turn it

00:30:00,860 --> 00:30:11,419
off don't make it less yes that's a good

00:30:04,700 --> 00:30:14,360
suggestion youyou think patches welcome

00:30:11,419 --> 00:30:15,799
yeah no I I mean look but catch me after

00:30:14,360 --> 00:30:17,090
I can actually write everything down

00:30:15,799 --> 00:30:18,710
right now we're send me email because

00:30:17,090 --> 00:30:21,200
that's that's a collection of things I'd

00:30:18,710 --> 00:30:26,590
like to I'd like to have okay

00:30:21,200 --> 00:30:26,590
I haven't kicked us out yet anyone else

00:30:29,390 --> 00:30:33,170
everybody thank you for coming I

00:30:30,740 --> 00:30:35,330
appreciate the questions feel free to no

00:30:33,170 --> 00:30:36,080
it's not up here now but feel free to

00:30:35,330 --> 00:30:39,260
email me

00:30:36,080 --> 00:30:40,870
TV hard at vmware.com if you have any

00:30:39,260 --> 00:30:47,510
other thoughts or questions or

00:30:40,870 --> 00:30:50,660
suggestions thank you everyone

00:30:47,510 --> 00:30:50,660

YouTube URL: https://www.youtube.com/watch?v=J8zxekwYMDY


