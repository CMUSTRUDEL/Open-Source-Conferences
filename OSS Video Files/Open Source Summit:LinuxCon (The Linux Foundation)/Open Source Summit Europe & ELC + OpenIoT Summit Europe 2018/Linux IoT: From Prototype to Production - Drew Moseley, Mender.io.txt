Title: Linux IoT: From Prototype to Production - Drew Moseley, Mender.io
Publication date: 2018-10-25
Playlist: Open Source Summit Europe & ELC + OpenIoT Summit Europe 2018
Description: 
	Linux IoT: From Prototype to Production - Drew Moseley, Mender.io

 We will discuss some of the considerations device manufacturers should consider when designing Linux-based connected devices. These devices are increasingly common in the Internet of Things. We will discuss hardware, software, security, and how to bring it all together. We will present a demo solution using a Raspberry Pi device and provide a build environment and instructions for attendees to use on their own hardware.

We will start by defining IoT and its basics. We will cover the various applications, including the consumer, industrial, enterprise, and municipal markets. Design considerations for IoT development will be covered as well as the Cloud Infrastructure options available. 

The selection process will be covered, including hardware (on-board peripherals, form factor), system software (OS, system development tools, deployment strategies), and application software criteria. 

About Drew Moseley
Drew Moseley is currently part of the Mender.io open source project to deploy OTA software updates to embedded Linux devices. He has worked on embedded projects such as RAID storage controllers, Direct and Network attached storage devices and graphical pagers.

He has spent the last 7 years working in developing production deployments of embedded Linux systems for various security-sensitive industries. He has spent his career in embedded software and developer tools and has focused on embedded Linux and Yocto for about 10 years. He has given talks at various conferences, including Embedded Linux Conference, OSCON, Embedded Systems Conference and All Systems Go Berlin.

He is currently a Technical Solutions Engineer at Northern.tech, the company behind Mender.io, helping customers develop safer, more secure connected devices. He worked previously as a Technical Project Manager and Professional Services Engineer for Mentor Graphics. He was raised in Tampa, Florida and attended the University of Florida.
Captions: 
	00:00:00,050 --> 00:00:03,810
hopefully we're all in the right place

00:00:01,800 --> 00:00:07,319
I'm here to talk a little bit about the

00:00:03,810 --> 00:00:08,670
basics of IOT development just some all

00:00:07,319 --> 00:00:09,920
the way from the beginning prototyping

00:00:08,670 --> 00:00:13,200
phase all the way out to production

00:00:09,920 --> 00:00:15,780
that's obviously a very broad topic so

00:00:13,200 --> 00:00:17,850
this talk will end up being a very

00:00:15,780 --> 00:00:19,350
high-level survey of a lot of things you

00:00:17,850 --> 00:00:21,769
need to think about as you're looking to

00:00:19,350 --> 00:00:25,710
move into the IOT development space

00:00:21,769 --> 00:00:27,869
given the target of this conference if

00:00:25,710 --> 00:00:29,250
you're have been doing IOT devices for

00:00:27,869 --> 00:00:30,720
many years you probably won't get a

00:00:29,250 --> 00:00:33,840
whole lot out of this talk I appreciate

00:00:30,720 --> 00:00:35,579
you coming anyway but for those that are

00:00:33,840 --> 00:00:38,700
new to the space hopefully this talk

00:00:35,579 --> 00:00:41,550
will give you a good overview and some

00:00:38,700 --> 00:00:42,570
things to consider as you start thinking

00:00:41,550 --> 00:00:49,620
about how you're going to design your

00:00:42,570 --> 00:00:51,180
systems moving forward so just a brief

00:00:49,620 --> 00:00:53,070
overview of what we're talking about

00:00:51,180 --> 00:00:54,449
we'll start just talking about what IOT

00:00:53,070 --> 00:00:57,449
is and what are some of the markets that

00:00:54,449 --> 00:00:59,449
it's targeting most of us I'm sure

00:00:57,449 --> 00:01:02,640
that'll be a refresher information for

00:00:59,449 --> 00:01:04,830
but it's always good to start with a

00:01:02,640 --> 00:01:06,650
little bit of motivation for why we're

00:01:04,830 --> 00:01:08,640
we're talking about the things we are

00:01:06,650 --> 00:01:11,130
then we'll talk a little bit about the

00:01:08,640 --> 00:01:12,990
hardware and software things that we

00:01:11,130 --> 00:01:15,360
would want to look at when you're

00:01:12,990 --> 00:01:17,250
designing an IOT system and finally

00:01:15,360 --> 00:01:19,290
we'll kind of go to a little bit higher

00:01:17,250 --> 00:01:22,020
level and talk about some of the the

00:01:19,290 --> 00:01:28,500
overall system design considerations in

00:01:22,020 --> 00:01:30,299
the IOT space so a bit about me I've

00:01:28,500 --> 00:01:32,670
been in the embedded Linux space for

00:01:30,299 --> 00:01:35,250
about 10 years now primarily focused on

00:01:32,670 --> 00:01:37,409
Yocto longer than that I've been in the

00:01:35,250 --> 00:01:40,140
general embedded space in my current

00:01:37,409 --> 00:01:42,479
role as primarily as a project lead and

00:01:40,140 --> 00:01:43,920
a Solutions Architect not deeply

00:01:42,479 --> 00:01:45,780
involved writing the code on a day to

00:01:43,920 --> 00:01:49,140
day basis but I am a technical

00:01:45,780 --> 00:01:51,600
customer-facing engineer on the mend or

00:01:49,140 --> 00:01:54,450
IO project which is a over-the-air

00:01:51,600 --> 00:01:56,189
update client and server for embedded

00:01:54,450 --> 00:01:58,740
Linux devices we got a booth out there

00:01:56,189 --> 00:02:00,119
so if you are in the IOT space and have

00:01:58,740 --> 00:02:02,070
a need for updates which we will

00:02:00,119 --> 00:02:03,719
certainly cover here in a little bit

00:02:02,070 --> 00:02:05,939
feel free to swing by and we can give

00:02:03,719 --> 00:02:09,539
you some more details about about what

00:02:05,939 --> 00:02:12,810
we have so let's start with a definition

00:02:09,539 --> 00:02:13,860
of IOT when I was putting these slides

00:02:12,810 --> 00:02:15,330
together

00:02:13,860 --> 00:02:17,010
first thing I did was what everybody

00:02:15,330 --> 00:02:19,710
does and go to google and type in IOT

00:02:17,010 --> 00:02:20,100
and I got a got a few a few choice links

00:02:19,710 --> 00:02:22,020
here

00:02:20,100 --> 00:02:23,940
Business Insider claims it's a network

00:02:22,020 --> 00:02:25,640
of interconnected objects able to

00:02:23,940 --> 00:02:29,820
collect and exchange data using embedded

00:02:25,640 --> 00:02:32,070
sensors so a lot of words there then I

00:02:29,820 --> 00:02:34,350
found this other one on the I Triple E

00:02:32,070 --> 00:02:35,970
which was a lot more content it was 86

00:02:34,350 --> 00:02:37,350
pages I read about the first paragraph

00:02:35,970 --> 00:02:39,480
and a half and stopped

00:02:37,350 --> 00:02:42,000
so you're the the link is down at the

00:02:39,480 --> 00:02:43,830
bottom feel free if you are looking for

00:02:42,000 --> 00:02:46,080
if you're having trouble sleeping or

00:02:43,830 --> 00:02:49,140
whatever download that and you should be

00:02:46,080 --> 00:02:51,120
in good shape after that I went to the

00:02:49,140 --> 00:02:54,570
font of all knowledge today I went to

00:02:51,120 --> 00:02:56,310
Wikipedia and Wikipedia has a very

00:02:54,570 --> 00:02:58,500
similar definition a network of physical

00:02:56,310 --> 00:03:00,209
devices vehicles home appliances and

00:02:58,500 --> 00:03:02,250
other items embedded with electronics

00:03:00,209 --> 00:03:04,470
software sensors actuators and

00:03:02,250 --> 00:03:06,660
connectivity which enables these objects

00:03:04,470 --> 00:03:09,420
to connect and exchange data again lots

00:03:06,660 --> 00:03:12,120
of words but it comes down to a couple

00:03:09,420 --> 00:03:14,700
of couple key characteristics in the

00:03:12,120 --> 00:03:16,350
Internet of Things space we're always

00:03:14,700 --> 00:03:17,820
talking connected devices it might not

00:03:16,350 --> 00:03:19,410
be always-on connection but there is

00:03:17,820 --> 00:03:22,590
some kind of connectivity to these

00:03:19,410 --> 00:03:24,750
devices generally speaking you have some

00:03:22,590 --> 00:03:27,030
number of sensors that are able to

00:03:24,750 --> 00:03:29,519
detect characteristics of their

00:03:27,030 --> 00:03:32,519
environment you have some number of

00:03:29,519 --> 00:03:35,519
actuators that are enable able to affect

00:03:32,519 --> 00:03:37,739
change in the environment and in a lot

00:03:35,519 --> 00:03:39,000
of cases it you have cloud

00:03:37,739 --> 00:03:40,530
infrastructure involved that's not

00:03:39,000 --> 00:03:43,920
strictly speaking required there are

00:03:40,530 --> 00:03:45,830
plenty of IOT applications where there's

00:03:43,920 --> 00:03:48,660
no connectivity back to the cloud but

00:03:45,830 --> 00:03:52,560
more and more these days things are

00:03:48,660 --> 00:03:54,930
moving back to the cloud so what are

00:03:52,560 --> 00:03:57,180
some of the typical IOT applications

00:03:54,930 --> 00:03:59,820
first ones that come to mind are the

00:03:57,180 --> 00:04:01,890
consumer the consumer devices obviously

00:03:59,820 --> 00:04:05,190
the the nest thermostat the competitors

00:04:01,890 --> 00:04:07,260
therefore the smart home climate control

00:04:05,190 --> 00:04:09,870
systems smart lighting I've got a few

00:04:07,260 --> 00:04:11,970
different things one from Ikea and one

00:04:09,870 --> 00:04:13,860
some random that I picked up on sale on

00:04:11,970 --> 00:04:16,590
Amazon one day to control lights in my

00:04:13,860 --> 00:04:18,239
house home security there's a lot of

00:04:16,590 --> 00:04:20,820
those I know the the ring doorbell is a

00:04:18,239 --> 00:04:22,650
very fairly common device out that's

00:04:20,820 --> 00:04:25,770
advertising quite a bit now and there's

00:04:22,650 --> 00:04:26,510
other there's other connected alarms and

00:04:25,770 --> 00:04:29,480
that kind of thing

00:04:26,510 --> 00:04:31,640
and connected automobiles obviously a

00:04:29,480 --> 00:04:34,480
very big space I know there's a lot of

00:04:31,640 --> 00:04:36,140
people here in the automotive space and

00:04:34,480 --> 00:04:38,060
automobiles are getting more and more

00:04:36,140 --> 00:04:41,230
connected every day I saw a stat

00:04:38,060 --> 00:04:44,270
somewhere that the modern high-end

00:04:41,230 --> 00:04:46,220
automobile has about ten times the

00:04:44,270 --> 00:04:49,190
number of lines of code in it as the the

00:04:46,220 --> 00:04:50,180
747 jet so think about that next time

00:04:49,190 --> 00:04:51,800
you're getting into it one of these

00:04:50,180 --> 00:04:53,690
vehicles there's a lot of code in there

00:04:51,800 --> 00:04:57,290
and there's a lot of connectivity going

00:04:53,690 --> 00:05:00,080
on other markets for Internet of Things

00:04:57,290 --> 00:05:02,210
industrial industrial applications in

00:05:00,080 --> 00:05:05,450
the operations center a lot of factory

00:05:02,210 --> 00:05:08,120
inventory management it makes it a lot

00:05:05,450 --> 00:05:10,270
easier to deploy a large fleet of fairly

00:05:08,120 --> 00:05:12,380
low power devices to track things that

00:05:10,270 --> 00:05:15,290
previously would require fairly high

00:05:12,380 --> 00:05:18,140
compute capabilities so a lot of a lot

00:05:15,290 --> 00:05:21,290
of factories are retooling and adding

00:05:18,140 --> 00:05:22,910
new capabilities to track things at a

00:05:21,290 --> 00:05:27,320
much Grant more granular level through

00:05:22,910 --> 00:05:29,690
the factory processes seeing some in

00:05:27,320 --> 00:05:32,210
enterprise supply chain management is

00:05:29,690 --> 00:05:34,430
obviously a big deal I'm sure we've all

00:05:32,210 --> 00:05:35,990
seen headlines of issues with supply

00:05:34,430 --> 00:05:37,490
chain management when I Quinn can I get

00:05:35,990 --> 00:05:39,500
the next greatest phone and you know

00:05:37,490 --> 00:05:41,570
when are they gonna have enough LCD

00:05:39,500 --> 00:05:44,450
panels or whatever so being able to

00:05:41,570 --> 00:05:46,850
track the the supply chain as the the

00:05:44,450 --> 00:05:49,540
parts you need go from one one place to

00:05:46,850 --> 00:05:53,570
the next and make it all the way to your

00:05:49,540 --> 00:05:56,720
to your manufacturer device is pretty

00:05:53,570 --> 00:05:59,240
important medical men be asleep is a lot

00:05:56,720 --> 00:06:01,520
of a lot of things going on in the

00:05:59,240 --> 00:06:04,850
medical space and then business

00:06:01,520 --> 00:06:07,100
operations I've read somewhere about an

00:06:04,850 --> 00:06:09,380
elevator company that's using IOT

00:06:07,100 --> 00:06:11,240
enabled services to help improve

00:06:09,380 --> 00:06:12,590
reliability to decrease downtime

00:06:11,240 --> 00:06:14,420
decrease the time that people are stuck

00:06:12,590 --> 00:06:16,520
in elevators when there are inevitable

00:06:14,420 --> 00:06:18,740
issues but the ultimate goal for all of

00:06:16,520 --> 00:06:20,570
these especially once you get outside of

00:06:18,740 --> 00:06:22,660
the consumer space is obviously lowering

00:06:20,570 --> 00:06:26,840
your operating costs to moving forward

00:06:22,660 --> 00:06:28,640
and finally one area that I some places

00:06:26,840 --> 00:06:30,590
are doing better than other is is in the

00:06:28,640 --> 00:06:32,030
municipal space obviously traffic

00:06:30,590 --> 00:06:34,280
control public transit there's a lot a

00:06:32,030 --> 00:06:35,840
lot of possibilities there especially

00:06:34,280 --> 00:06:38,000
with the connected automobiles I know

00:06:35,840 --> 00:06:39,330
I'm from the tampa florida area and i

00:06:38,000 --> 00:06:42,360
know they've got the project

00:06:39,330 --> 00:06:44,939
going now somehow using connected

00:06:42,360 --> 00:06:46,889
automobiles and then sensors on the

00:06:44,939 --> 00:06:48,270
streets to help control traffic flow and

00:06:46,889 --> 00:06:49,590
do extra studies and things like that so

00:06:48,270 --> 00:06:54,120
there's a lot a lot of interesting

00:06:49,590 --> 00:06:56,909
applications as I mentioned cloud

00:06:54,120 --> 00:06:58,050
infrastructure is increasingly important

00:06:56,909 --> 00:07:00,750
in the Internet of Things you see all

00:06:58,050 --> 00:07:03,569
the logos on this slide there's there

00:07:00,750 --> 00:07:06,300
there's no end of providers for cloud

00:07:03,569 --> 00:07:09,689
infrastructure at a minimum they're used

00:07:06,300 --> 00:07:11,490
for device control and and datastore in

00:07:09,689 --> 00:07:14,669
your in your Internet of Things

00:07:11,490 --> 00:07:17,490
applications depending on exactly what

00:07:14,669 --> 00:07:19,650
your workflow and use cases are the

00:07:17,490 --> 00:07:21,930
cloud infrastructure may provide AI and

00:07:19,650 --> 00:07:24,930
Big Data services in addition to just

00:07:21,930 --> 00:07:26,909
simple data aggregation and some of them

00:07:24,930 --> 00:07:29,430
also have overall fleet management

00:07:26,909 --> 00:07:31,319
device dashboards and that kind of thing

00:07:29,430 --> 00:07:33,180
where your operations team can actually

00:07:31,319 --> 00:07:35,610
see at a glance a view of your entire

00:07:33,180 --> 00:07:38,039
device fleet be able to be able to make

00:07:35,610 --> 00:07:44,430
changes trigger updates turn devices on

00:07:38,039 --> 00:07:46,580
and off that kind of thing so this is a

00:07:44,430 --> 00:07:49,080
diagram I put together to kind of help

00:07:46,580 --> 00:07:51,539
explain what IOT is because there's a

00:07:49,080 --> 00:07:53,039
lot of buzzwords in there you see at the

00:07:51,539 --> 00:07:55,080
upper upper half of the screen is the

00:07:53,039 --> 00:07:57,449
world of atoms that's the world real

00:07:55,080 --> 00:08:00,960
things and then we have our lovely

00:07:57,449 --> 00:08:02,729
little border there which is called the

00:08:00,960 --> 00:08:05,159
edge and on it on the inside of the edge

00:08:02,729 --> 00:08:08,069
is the world of bits and that's you know

00:08:05,159 --> 00:08:10,379
the IOT kind of spans that boundary you

00:08:08,069 --> 00:08:13,050
have a number of devices the devices in

00:08:10,379 --> 00:08:15,240
green here one of the architectures is

00:08:13,050 --> 00:08:16,770
the devices themselves on the edge will

00:08:15,240 --> 00:08:18,659
connect directly to the cloud so the

00:08:16,770 --> 00:08:21,690
device and that's a lot of the devices

00:08:18,659 --> 00:08:23,370
that folks at this conference deal with

00:08:21,690 --> 00:08:24,509
they're running a full embedded Linux

00:08:23,370 --> 00:08:26,039
system they have all the connectivity

00:08:24,509 --> 00:08:28,319
they need they're able to connect

00:08:26,039 --> 00:08:30,960
directly to the cloud and they can do

00:08:28,319 --> 00:08:33,180
whatever they need on the device

00:08:30,960 --> 00:08:35,070
themselves some of the low power devices

00:08:33,180 --> 00:08:36,930
thing things running some of the smaller

00:08:35,070 --> 00:08:41,149
our cost is that kind of thing might use

00:08:36,930 --> 00:08:41,149
a sorry about that

00:08:42,199 --> 00:08:47,730
come on there we go some of the the

00:08:45,000 --> 00:08:49,649
other devices might use a gateway

00:08:47,730 --> 00:08:51,000
between the device so some of these

00:08:49,649 --> 00:08:52,589
devices some of these devices will be

00:08:51,000 --> 00:08:53,310
running a small real time operating

00:08:52,589 --> 00:08:55,860
system

00:08:53,310 --> 00:08:58,200
with limited connectivity limited

00:08:55,860 --> 00:08:59,580
communications capabilities so then they

00:08:58,200 --> 00:09:02,700
would pass the data back to a gateway

00:08:59,580 --> 00:09:04,080
which has more more capabilities to

00:09:02,700 --> 00:09:07,020
actually deliver that data back into the

00:09:04,080 --> 00:09:09,150
cloud infrastructure and and the the the

00:09:07,020 --> 00:09:10,890
third typical architecture we see is

00:09:09,150 --> 00:09:12,180
that the Gateway is sometimes optional

00:09:10,890 --> 00:09:13,920
even for some of these smaller devices

00:09:12,180 --> 00:09:16,560
they can communicate between themselves

00:09:13,920 --> 00:09:18,720
directly there may not be actually any

00:09:16,560 --> 00:09:21,300
cloud connectivity needed for a

00:09:18,720 --> 00:09:23,070
particular use case so in that case if

00:09:21,300 --> 00:09:25,170
your devices can communicate directly to

00:09:23,070 --> 00:09:26,340
each other and share whatever data is

00:09:25,170 --> 00:09:27,690
necessary you can get away without even

00:09:26,340 --> 00:09:32,160
having the Gateway and that in that

00:09:27,690 --> 00:09:33,600
instance so talking about some of the

00:09:32,160 --> 00:09:35,190
connectivity options that you'll need to

00:09:33,600 --> 00:09:38,370
consider when you are planning your

00:09:35,190 --> 00:09:40,950
design the first couple on this list I

00:09:38,370 --> 00:09:42,270
think most of us are familiar with we've

00:09:40,950 --> 00:09:45,480
got the short distance generally

00:09:42,270 --> 00:09:47,310
considered personal area NFC and

00:09:45,480 --> 00:09:48,960
Bluetooth although I've seen claims that

00:09:47,310 --> 00:09:50,100
bluetooth can go up to 30 meters I don't

00:09:48,960 --> 00:09:51,690
think I've ever managed to get my

00:09:50,100 --> 00:09:53,790
Bluetooth headset to go more than about

00:09:51,690 --> 00:09:55,890
six or eight feet before I start getting

00:09:53,790 --> 00:09:57,300
dropouts so depending on the amount of

00:09:55,890 --> 00:09:59,000
data you're transferring obviously

00:09:57,300 --> 00:10:02,280
you're gonna get better or worse

00:09:59,000 --> 00:10:04,190
distance on some of these things moving

00:10:02,280 --> 00:10:07,020
up into medium distance connectivity

00:10:04,190 --> 00:10:08,700
Venerable Wi-Fi and Ethernet I think we

00:10:07,020 --> 00:10:10,080
all understand what that is and the the

00:10:08,700 --> 00:10:12,570
pluses and minuses of those those are

00:10:10,080 --> 00:10:13,920
obviously fairly high bandwidth but

00:10:12,570 --> 00:10:17,130
especially if you're dealing with Wi-Fi

00:10:13,920 --> 00:10:18,270
you've got some extra configuration that

00:10:17,130 --> 00:10:21,180
needs to be tracked and that kind of

00:10:18,270 --> 00:10:23,700
thing moving on from there these are

00:10:21,180 --> 00:10:25,920
some of the emerging technologies that

00:10:23,700 --> 00:10:27,810
are increasingly in use in the Internet

00:10:25,920 --> 00:10:29,100
of Things space these are typically

00:10:27,810 --> 00:10:32,100
longer distance than within the

00:10:29,100 --> 00:10:34,140
building's city scale is what they're

00:10:32,100 --> 00:10:37,080
looking at here you've got Laura and

00:10:34,140 --> 00:10:38,550
Laura Wan which are protocols that are

00:10:37,080 --> 00:10:40,230
governed by an industry Alliance and

00:10:38,550 --> 00:10:44,070
there are a number of cities that are

00:10:40,230 --> 00:10:45,810
rolling out these kind of networks and

00:10:44,070 --> 00:10:47,790
then sig Fox is a commercial entity

00:10:45,810 --> 00:10:50,190
doing a very similar thing so if you've

00:10:47,790 --> 00:10:52,950
got a fleet of say weather sensors you

00:10:50,190 --> 00:10:55,589
want to deploy across the city the the

00:10:52,950 --> 00:10:57,420
devices can communicate over some of

00:10:55,589 --> 00:11:00,300
these protocols and not have to have any

00:10:57,420 --> 00:11:02,040
kind of gateways or anything and the big

00:11:00,300 --> 00:11:03,270
advantage is of course the battery life

00:11:02,040 --> 00:11:04,200
on these things is measured in years

00:11:03,270 --> 00:11:05,850
they're very low-power

00:11:04,200 --> 00:11:06,690
they're not really intended for high

00:11:05,850 --> 00:11:08,460
bandwidth applications

00:11:06,690 --> 00:11:10,800
you're not gonna be streaming multimedia

00:11:08,460 --> 00:11:12,780
data over these protocols but that's not

00:11:10,800 --> 00:11:14,310
really what they're designed for and

00:11:12,780 --> 00:11:17,900
then moving out from there looking at

00:11:14,310 --> 00:11:19,740
even larger scales nationwide statewide

00:11:17,900 --> 00:11:22,500
then you start looking at things like

00:11:19,740 --> 00:11:24,540
cellular and LTE with the obvious costs

00:11:22,500 --> 00:11:26,610
associated with that so when you're

00:11:24,540 --> 00:11:28,200
talking connectivity some of them you

00:11:26,610 --> 00:11:30,420
know you've got to figure out what what

00:11:28,200 --> 00:11:32,250
your bandwidth needs are what your

00:11:30,420 --> 00:11:33,630
Layton sees and that kind of thing are

00:11:32,250 --> 00:11:35,180
as well as what the costs are gonna be

00:11:33,630 --> 00:11:37,320
obviously with Wi-Fi and Ethernet

00:11:35,180 --> 00:11:39,180
typically that's not gonna be a metered

00:11:37,320 --> 00:11:41,670
connection but obviously when you get

00:11:39,180 --> 00:11:43,080
into sell your own LTE you're generally

00:11:41,670 --> 00:11:47,160
gonna be paying for a bit in that in

00:11:43,080 --> 00:11:50,700
that kind of scenario so moving up the

00:11:47,160 --> 00:11:53,160
stack a bit we have the higher level IOT

00:11:50,700 --> 00:11:55,410
communication protocols and these and

00:11:53,160 --> 00:11:57,510
there's definitely some overlap between

00:11:55,410 --> 00:11:59,310
things here but these are the kind of

00:11:57,510 --> 00:12:00,720
things that are typically layered on top

00:11:59,310 --> 00:12:04,200
of the base connectivity that we

00:12:00,720 --> 00:12:07,560
discussed in the previous slide so HTTP

00:12:04,200 --> 00:12:10,530
and secure HTTP REST API is that's a

00:12:07,560 --> 00:12:12,960
pretty common mechanism that used today

00:12:10,530 --> 00:12:15,090
but there are some other things in the

00:12:12,960 --> 00:12:18,300
IOT space that you will start to see as

00:12:15,090 --> 00:12:21,470
you as you ramped up in your research

00:12:18,300 --> 00:12:24,750
tasks 6lowpan is an implementation of

00:12:21,470 --> 00:12:26,580
ipv6 over some of the load the low power

00:12:24,750 --> 00:12:28,350
wind protocols it's not one I have any

00:12:26,580 --> 00:12:31,610
direct experience with but I know it

00:12:28,350 --> 00:12:35,400
does come up from time to time MQTT is a

00:12:31,610 --> 00:12:37,410
it's a more structured protocol than say

00:12:35,400 --> 00:12:38,160
something like a REST API where you get

00:12:37,410 --> 00:12:40,380
to define everything

00:12:38,160 --> 00:12:43,590
mqtt really follows the hub subscribe

00:12:40,380 --> 00:12:45,720
model it's very lightweight most

00:12:43,590 --> 00:12:49,200
implementations typically run a run

00:12:45,720 --> 00:12:52,410
across your your standard tcp net links

00:12:49,200 --> 00:12:53,850
and there was sometime recently an

00:12:52,410 --> 00:12:55,589
actual standard published for that so

00:12:53,850 --> 00:12:57,930
that's getting to be extremely common in

00:12:55,589 --> 00:12:59,940
the IOT space and it's very easy to use

00:12:57,930 --> 00:13:02,520
those libraries for just about any

00:12:59,940 --> 00:13:05,220
language you may want and and it's very

00:13:02,520 --> 00:13:07,110
easy to get started with that then

00:13:05,220 --> 00:13:09,540
there's another one called zero and Q

00:13:07,110 --> 00:13:11,430
it's similar in its you know it does

00:13:09,540 --> 00:13:14,280
have the publish/subscribe model but it

00:13:11,430 --> 00:13:15,900
supports a few other a few other models

00:13:14,280 --> 00:13:17,700
there's more push-pull and router dealer

00:13:15,900 --> 00:13:18,459
kinds of things that are implemented in

00:13:17,700 --> 00:13:21,100
there

00:13:18,459 --> 00:13:23,199
and it is an open-source protocol so

00:13:21,100 --> 00:13:27,430
that makes it very applicable for most

00:13:23,199 --> 00:13:29,319
of the the Linux based IOT designs and

00:13:27,430 --> 00:13:31,480
then then you'll start to see things

00:13:29,319 --> 00:13:32,769
like ZigBee which is primarily used for

00:13:31,480 --> 00:13:34,689
home automation I think that's a little

00:13:32,769 --> 00:13:37,720
bit lower level protocol then something

00:13:34,689 --> 00:13:40,540
like mqtt but it's definitely growing in

00:13:37,720 --> 00:13:42,939
popularity and then one that I have had

00:13:40,540 --> 00:13:46,300
conversations with folks about which is

00:13:42,939 --> 00:13:48,610
kind of a bit of a stretch to have on

00:13:46,300 --> 00:13:50,759
this slide but it's the dds which is a

00:13:48,610 --> 00:13:53,740
data distribution service this provides

00:13:50,759 --> 00:13:55,749
for a global data space distributed with

00:13:53,740 --> 00:13:58,240
proper access control so if you have a

00:13:55,749 --> 00:14:00,610
fairly large amount of data that you

00:13:58,240 --> 00:14:02,439
want to have distributed and have proper

00:14:00,610 --> 00:14:04,600
backups and that kind of thing this is

00:14:02,439 --> 00:14:09,819
certainly something to consider

00:14:04,600 --> 00:14:10,899
moving forward so hardware first thing

00:14:09,819 --> 00:14:12,910
typically in the design is going to

00:14:10,899 --> 00:14:14,680
start thinking about Hardware first

00:14:12,910 --> 00:14:17,589
choice is a you know do you have an MCU

00:14:14,680 --> 00:14:19,779
versus the system on chip MC use are

00:14:17,589 --> 00:14:22,209
generally lower powered systems not

00:14:19,779 --> 00:14:25,029
gonna be running Linux probably will be

00:14:22,209 --> 00:14:26,470
running in our toss of some kind I think

00:14:25,029 --> 00:14:28,449
probably for this audience we're

00:14:26,470 --> 00:14:30,370
probably mostly looking towards the the

00:14:28,449 --> 00:14:32,319
SOC level but I know there's quite a few

00:14:30,370 --> 00:14:34,329
folks here doing things like Zephyr and

00:14:32,319 --> 00:14:36,660
other real-time operating systems that

00:14:34,329 --> 00:14:40,149
that are more appropriate for the MCU

00:14:36,660 --> 00:14:41,980
level chips from from there you know

00:14:40,149 --> 00:14:44,259
once you've decided on the the basic

00:14:41,980 --> 00:14:45,189
chipset that's part of your system then

00:14:44,259 --> 00:14:47,199
you start looking at on-board

00:14:45,189 --> 00:14:50,170
peripherals what hardware does your

00:14:47,199 --> 00:14:51,430
particular use case require most of

00:14:50,170 --> 00:14:53,800
these chips are gonna have a variety of

00:14:51,430 --> 00:14:55,149
onboard peripherals and if you're buying

00:14:53,800 --> 00:14:56,980
things you don't need obviously you're

00:14:55,149 --> 00:14:58,779
paying extra money but if you buy

00:14:56,980 --> 00:15:00,430
something that doesn't have half what

00:14:58,779 --> 00:15:03,069
you need on it you know that's not good

00:15:00,430 --> 00:15:06,040
either so that's the that's the next

00:15:03,069 --> 00:15:07,899
basic step in deciding on the chip is

00:15:06,040 --> 00:15:11,980
mapping out what your use cases are and

00:15:07,899 --> 00:15:13,839
what peripherals you may need then start

00:15:11,980 --> 00:15:15,429
to look at the hobbyist versus the

00:15:13,839 --> 00:15:18,399
commercial vendor type platforms

00:15:15,429 --> 00:15:21,279
Raspberry Pi and BeagleBone we use those

00:15:18,399 --> 00:15:23,230
a lot in our day-to-day but typically

00:15:21,279 --> 00:15:25,389
lead times and inventories can be can be

00:15:23,230 --> 00:15:27,519
tricky if you're going to be producing

00:15:25,389 --> 00:15:29,829
builds in you know tens of thousands or

00:15:27,519 --> 00:15:30,879
hundreds of thousands of devices you may

00:15:29,829 --> 00:15:31,750
be better off going with a commercial

00:15:30,879 --> 00:15:35,580
vendor that the

00:15:31,750 --> 00:15:38,590
able to actually satisfy those numbers

00:15:35,580 --> 00:15:39,910
other things to consider are you gonna

00:15:38,590 --> 00:15:42,460
have battery power is it gonna be

00:15:39,910 --> 00:15:44,050
hardwired power because some some chips

00:15:42,460 --> 00:15:45,880
are gonna be running obviously lower

00:15:44,050 --> 00:15:47,500
power than others so that that's

00:15:45,880 --> 00:15:50,080
something to consider and obviously

00:15:47,500 --> 00:15:52,110
price always comes in and the last one

00:15:50,080 --> 00:15:54,670
that I mentioned here is the form factor

00:15:52,110 --> 00:15:56,080
boards like the BeagleBone and the

00:15:54,670 --> 00:15:56,830
Raspberry Pi are typically standalone

00:15:56,080 --> 00:15:59,110
boards

00:15:56,830 --> 00:16:01,090
they'll be mounted case somewhere but

00:15:59,110 --> 00:16:04,180
the the boards themselves are fully

00:16:01,090 --> 00:16:07,570
functional without any add-ons then

00:16:04,180 --> 00:16:09,970
another common design that we see a lot

00:16:07,570 --> 00:16:12,250
is the system on module where you have a

00:16:09,970 --> 00:16:13,840
base board which is typically provided

00:16:12,250 --> 00:16:16,360
as a reference design by the

00:16:13,840 --> 00:16:19,060
manufacturer and then they also provide

00:16:16,360 --> 00:16:20,260
the system on module where you for your

00:16:19,060 --> 00:16:21,880
design you would take the system on

00:16:20,260 --> 00:16:23,410
module and modified but you would create

00:16:21,880 --> 00:16:24,760
a custom version of that base board that

00:16:23,410 --> 00:16:26,980
would have the exact peripherals you

00:16:24,760 --> 00:16:28,630
need on it that is the nice point about

00:16:26,980 --> 00:16:31,090
these kind of designs is you can

00:16:28,630 --> 00:16:33,280
customize in the base board the

00:16:31,090 --> 00:16:35,650
connectivity between the psalm and the

00:16:33,280 --> 00:16:38,080
base board is well defined so that you

00:16:35,650 --> 00:16:40,839
know that if your board works with their

00:16:38,080 --> 00:16:43,630
base board that as long as you use the

00:16:40,839 --> 00:16:45,550
same protocol and have the same pin out

00:16:43,630 --> 00:16:48,640
you'll be able to plug that into your

00:16:45,550 --> 00:16:51,610
custom design and it also gives you the

00:16:48,640 --> 00:16:54,100
flexibility most of these vendors have a

00:16:51,610 --> 00:16:56,710
wide range of system on modules that are

00:16:54,100 --> 00:16:58,750
available with different MCU so or

00:16:56,710 --> 00:17:00,790
different SOC s on them so if you start

00:16:58,750 --> 00:17:02,050
with a lower powered chip and at some

00:17:00,790 --> 00:17:04,150
point you just say you have you need to

00:17:02,050 --> 00:17:06,130
move to a higher powered system you have

00:17:04,150 --> 00:17:08,980
the ability to simply swap into new ssam

00:17:06,130 --> 00:17:10,390
and it should in that case work pretty

00:17:08,980 --> 00:17:14,890
well with your existing designs without

00:17:10,390 --> 00:17:17,589
having to redo retool your designs so

00:17:14,890 --> 00:17:18,850
once we picked Hardware now we start

00:17:17,589 --> 00:17:21,010
need to start thinking about the system

00:17:18,850 --> 00:17:22,959
software that we're gonna be running on

00:17:21,010 --> 00:17:26,319
these devices three main choices

00:17:22,959 --> 00:17:28,420
typically are a no are a full full-blown

00:17:26,319 --> 00:17:29,470
OS which i think is probably the choice

00:17:28,420 --> 00:17:32,020
of most of the people in this room

00:17:29,470 --> 00:17:35,200
versus in our TAS versus just simply

00:17:32,020 --> 00:17:37,000
writing bare metal code directly you

00:17:35,200 --> 00:17:39,540
know write every line of code in the

00:17:37,000 --> 00:17:42,850
system do at a bare metal control loop

00:17:39,540 --> 00:17:44,650
then once you've chosen there obviously

00:17:42,850 --> 00:17:45,700
if you're in the in the Linux space you

00:17:44,650 --> 00:17:47,710
have a choice for system

00:17:45,700 --> 00:17:49,179
development tools things like yak go and

00:17:47,710 --> 00:17:51,880
build route which are very very common

00:17:49,179 --> 00:17:53,470
and there's a lot of expertise here a

00:17:51,880 --> 00:17:56,110
lot of a lot of a lot of folks talking

00:17:53,470 --> 00:17:59,169
about those kind of things then open wrt

00:17:56,110 --> 00:18:00,929
is is another option and finally you

00:17:59,169 --> 00:18:03,490
have things like Debian and and other

00:18:00,929 --> 00:18:06,039
desktop class os's that have been

00:18:03,490 --> 00:18:08,559
repurposed in the embedded space and

00:18:06,039 --> 00:18:10,830
then from there you also have some

00:18:08,559 --> 00:18:14,110
additional deployment strategies

00:18:10,830 --> 00:18:15,940
hypervisors and containers obviously

00:18:14,110 --> 00:18:18,820
there's a lot of talk of that a lot of

00:18:15,940 --> 00:18:20,769
activity in the industry today with a

00:18:18,820 --> 00:18:22,929
lot of asynchronous multiprocessor

00:18:20,769 --> 00:18:25,029
designs where you run in maybe a

00:18:22,929 --> 00:18:27,460
hypervisor and you run in an artist on

00:18:25,029 --> 00:18:30,549
one core and a full-blown Linux instance

00:18:27,460 --> 00:18:32,200
on the remainder of the cores and things

00:18:30,549 --> 00:18:33,639
like that so there's a you know some

00:18:32,200 --> 00:18:35,010
very high-level decisions that need to

00:18:33,639 --> 00:18:38,080
be made about your system software

00:18:35,010 --> 00:18:39,899
deployment strategies well and finally

00:18:38,080 --> 00:18:43,779
depending on the industry you're in

00:18:39,899 --> 00:18:47,440
security and safety are a big concern

00:18:43,779 --> 00:18:50,409
ISO 26262 it's a automotive automobile

00:18:47,440 --> 00:18:52,720
functional safety spec it's pretty hard

00:18:50,409 --> 00:18:54,460
to satisfy something like that in Linux

00:18:52,720 --> 00:18:57,639
but a lot of the artists will have that

00:18:54,460 --> 00:19:00,490
so that's where the EMP type design will

00:18:57,639 --> 00:19:01,690
come in if you have some areas of your

00:19:00,490 --> 00:19:03,639
code that need that level of

00:19:01,690 --> 00:19:06,309
certification you can implement those in

00:19:03,639 --> 00:19:07,750
an artists on a sequestered core and

00:19:06,309 --> 00:19:09,970
then have your Linux system handling the

00:19:07,750 --> 00:19:11,380
the rest of the connectivity on the

00:19:09,970 --> 00:19:14,500
other other other cause of your

00:19:11,380 --> 00:19:18,220
multi-core chip set and then obviously

00:19:14,500 --> 00:19:21,669
things like selinux app armour and smack

00:19:18,220 --> 00:19:23,889
our our Linux ID security frameworks

00:19:21,669 --> 00:19:26,850
that can add additional security over

00:19:23,889 --> 00:19:29,649
there the traditional split model of

00:19:26,850 --> 00:19:33,789
users and then route who has who can do

00:19:29,649 --> 00:19:35,200
anything and everything so moving up the

00:19:33,789 --> 00:19:37,659
stack a bit more now we started talking

00:19:35,200 --> 00:19:39,279
about applications software and this is

00:19:37,659 --> 00:19:40,870
a definitely outside of my area of

00:19:39,279 --> 00:19:43,600
expertise so most of these things are

00:19:40,870 --> 00:19:46,240
just names to me but application

00:19:43,600 --> 00:19:48,190
frameworks that we see commonly things

00:19:46,240 --> 00:19:51,309
like node-red nodejs those are very

00:19:48,190 --> 00:19:54,429
common in the IOT space eclipse Akira is

00:19:51,309 --> 00:19:57,429
I believe it's more of a development IDE

00:19:54,429 --> 00:19:58,909
type plugin that works on the

00:19:57,429 --> 00:20:00,970
development side

00:19:58,909 --> 00:20:03,169
and QT obviously a lot of the graphical

00:20:00,970 --> 00:20:07,489
embedded Linux applications are running

00:20:03,169 --> 00:20:08,749
QT based api's and then from there you

00:20:07,489 --> 00:20:11,599
know how are you gonna develop your code

00:20:08,749 --> 00:20:14,989
you're gonna use Eclipse or some kind of

00:20:11,599 --> 00:20:16,309
CLI or you know what is what are your

00:20:14,989 --> 00:20:18,289
developers gonna be looking at on the

00:20:16,309 --> 00:20:21,259
day-to-day typically if you're in a

00:20:18,289 --> 00:20:22,609
commercial artists or even a an

00:20:21,259 --> 00:20:25,009
open-source artist they're gonna have

00:20:22,609 --> 00:20:26,929
one mechanism for working if you're in

00:20:25,009 --> 00:20:29,029
the Linux space obviously it's gonna be

00:20:26,929 --> 00:20:30,590
very dependent on the build system that

00:20:29,029 --> 00:20:33,769
you use the packaging system that you

00:20:30,590 --> 00:20:35,779
use and that kind of thing language

00:20:33,769 --> 00:20:37,099
availability something to consider if

00:20:35,779 --> 00:20:38,119
you're in the Linux space that's usually

00:20:37,099 --> 00:20:41,330
not a big deal

00:20:38,119 --> 00:20:42,859
Galang is obviously increasing in

00:20:41,330 --> 00:20:44,749
popularity I see a lot of people talk

00:20:42,859 --> 00:20:46,909
about rust these days although I don't

00:20:44,749 --> 00:20:49,129
think we've seen it a whole lot just yet

00:20:46,909 --> 00:20:52,249
in terms of actual devices going to

00:20:49,129 --> 00:20:53,779
market and then finally just look at

00:20:52,249 --> 00:20:55,729
third-party package availability you

00:20:53,779 --> 00:20:58,159
know what your use cases are you know if

00:20:55,729 --> 00:21:00,889
you need specific libraries or specific

00:20:58,159 --> 00:21:03,529
protocols a lot of that is going to help

00:21:00,889 --> 00:21:05,779
drive some of the other decisions that

00:21:03,529 --> 00:21:07,519
you might make based on where the the

00:21:05,779 --> 00:21:08,809
libraries you need are available if

00:21:07,519 --> 00:21:10,580
they're in the Yocto project great

00:21:08,809 --> 00:21:12,940
that's an option if not if they're

00:21:10,580 --> 00:21:16,070
provided is you know packages for Debian

00:21:12,940 --> 00:21:18,619
that may push you towards a Debian based

00:21:16,070 --> 00:21:22,629
system and and likewise for other

00:21:18,619 --> 00:21:22,629
packages and and protocols you may need

00:21:22,720 --> 00:21:28,940
so just briefly mentioning a few things

00:21:25,909 --> 00:21:30,049
if you aren't running Linux couple

00:21:28,940 --> 00:21:32,200
options I mentioned the bare metal

00:21:30,049 --> 00:21:35,419
embedded control loop very low level

00:21:32,200 --> 00:21:36,710
writing everything yourself and then one

00:21:35,419 --> 00:21:38,929
step up from that as an embedded are

00:21:36,710 --> 00:21:41,809
toss things like Zephyr and my new to

00:21:38,929 --> 00:21:44,090
include OS free are toss those are all

00:21:41,809 --> 00:21:46,549
things that that we hear in discussions

00:21:44,090 --> 00:21:47,989
with the IOT developers that that

00:21:46,549 --> 00:21:49,940
they're considering and then there's

00:21:47,989 --> 00:21:53,029
commercial offerings such as nucleus

00:21:49,940 --> 00:21:54,080
vxworks and Q and X obviously the cost

00:21:53,029 --> 00:21:55,279
models are going to different vary

00:21:54,080 --> 00:21:56,539
between them sometimes there will be

00:21:55,279 --> 00:21:58,460
royalties sometimes there won't

00:21:56,539 --> 00:22:01,190
sometimes there'll be a development up

00:21:58,460 --> 00:22:03,289
front license so so that all has to be

00:22:01,190 --> 00:22:05,389
taken into consideration as you're

00:22:03,289 --> 00:22:07,039
planning your system and I didn't want

00:22:05,389 --> 00:22:09,049
to mention Windows IOT core here I

00:22:07,039 --> 00:22:10,909
wasn't really sure the best way to

00:22:09,049 --> 00:22:12,630
classify it other than as a desktop

00:22:10,909 --> 00:22:14,910
class OS

00:22:12,630 --> 00:22:17,160
in the area I live there's a lot of

00:22:14,910 --> 00:22:19,470
Windows IOT development going on so I've

00:22:17,160 --> 00:22:21,720
actually been several meetups with folks

00:22:19,470 --> 00:22:23,370
that use it and they really like it I

00:22:21,720 --> 00:22:28,170
don't know enough about it to really

00:22:23,370 --> 00:22:32,460
comment but it is an option moving on if

00:22:28,170 --> 00:22:35,520
we assume that we are working on a Linux

00:22:32,460 --> 00:22:36,750
system I briefly mentioned some of these

00:22:35,520 --> 00:22:38,790
but you have quite a few options here

00:22:36,750 --> 00:22:40,950
you have your deck desktop class

00:22:38,790 --> 00:22:43,620
distributions debian ubuntu things like

00:22:40,950 --> 00:22:45,150
that a couple options with those you can

00:22:43,620 --> 00:22:47,310
go with the direct install typically

00:22:45,150 --> 00:22:49,110
most of them are available just in a

00:22:47,310 --> 00:22:51,600
disk image that you download you DD out

00:22:49,110 --> 00:22:53,550
to your SD card or your MMC and you boot

00:22:51,600 --> 00:22:56,490
and typically there will be a package

00:22:53,550 --> 00:22:58,620
manager apt-get something like that you

00:22:56,490 --> 00:23:00,360
install everything you need all your

00:22:58,620 --> 00:23:04,770
dependencies and then you can either

00:23:00,360 --> 00:23:07,290
package your application as in that

00:23:04,770 --> 00:23:08,550
package manager format or however you

00:23:07,290 --> 00:23:09,960
know whatever you decide is appropriate

00:23:08,550 --> 00:23:12,300
to get the code onto the device

00:23:09,960 --> 00:23:14,940
another option for the desktop class

00:23:12,300 --> 00:23:18,180
distributions is packaging strips I know

00:23:14,940 --> 00:23:21,690
that in the in the Debian space there

00:23:18,180 --> 00:23:24,750
there's de bootstrapping and other

00:23:21,690 --> 00:23:27,030
options that actually allow you to kind

00:23:24,750 --> 00:23:27,930
of script and and customize these

00:23:27,030 --> 00:23:30,810
systems offline

00:23:27,930 --> 00:23:32,640
and then the output of course is is

00:23:30,810 --> 00:23:37,110
typically the image that then gets

00:23:32,640 --> 00:23:38,520
written to your storage media one one

00:23:37,110 --> 00:23:40,230
step down from there is the embedded

00:23:38,520 --> 00:23:42,510
distribution builders things like Yocto

00:23:40,230 --> 00:23:44,460
build route and open wrt which I

00:23:42,510 --> 00:23:47,610
mentioned previously I've got will go

00:23:44,460 --> 00:23:49,740
into a little bit of what those are in

00:23:47,610 --> 00:23:52,980
just a moment and finally there's some

00:23:49,740 --> 00:23:54,690
hybrids which are new to me

00:23:52,980 --> 00:23:56,490
I know there's folks here that are given

00:23:54,690 --> 00:23:59,520
talks about them so things like ESR

00:23:56,490 --> 00:24:02,370
which is an lbe which I believe are

00:23:59,520 --> 00:24:04,530
basically just using bitbake with

00:24:02,370 --> 00:24:06,780
special customized recipes to actually

00:24:04,530 --> 00:24:08,430
pull binaries from the Debian build

00:24:06,780 --> 00:24:09,960
system so you're actually not doing a

00:24:08,430 --> 00:24:11,640
full build every time of each package

00:24:09,960 --> 00:24:14,100
like you do with a typical yocto bitbake

00:24:11,640 --> 00:24:16,170
build but you're actually still able to

00:24:14,100 --> 00:24:18,660
control it and and set up your designs

00:24:16,170 --> 00:24:20,280
and your configuration in a language

00:24:18,660 --> 00:24:23,060
configuration language that you may

00:24:20,280 --> 00:24:23,060
already be familiar with

00:24:23,630 --> 00:24:28,110
so Yocto project

00:24:26,100 --> 00:24:29,610
those that aren't familiar with it the

00:24:28,110 --> 00:24:31,169
quote at the top of this slide comes

00:24:29,610 --> 00:24:36,240
directly from the the Yocto project

00:24:31,169 --> 00:24:38,760
website the the primary focus of Yocto

00:24:36,240 --> 00:24:40,679
is the recipes that tell the system how

00:24:38,760 --> 00:24:42,450
to build all the packages that are part

00:24:40,679 --> 00:24:44,039
of your system how to build the images

00:24:42,450 --> 00:24:46,530
and that kind of thing the primary

00:24:44,039 --> 00:24:48,150
output of a Yocto project build is a

00:24:46,530 --> 00:24:49,620
packaged feed which is really just a

00:24:48,150 --> 00:24:53,070
directory somewhere in your build tree

00:24:49,620 --> 00:24:55,230
with a whole lot of dot rpm files or dot

00:24:53,070 --> 00:24:58,320
Deb files or whatever packaging format

00:24:55,230 --> 00:25:00,990
you choose the secondary output is the

00:24:58,320 --> 00:25:02,789
boot images and this is the actual bag

00:25:00,990 --> 00:25:05,250
of bits that gets installed on your

00:25:02,789 --> 00:25:06,750
storage media and it contains typically

00:25:05,250 --> 00:25:07,850
the entire root filesystem boot loaders

00:25:06,750 --> 00:25:09,929
and that kind of thing

00:25:07,850 --> 00:25:11,220
yak dough generally builds all

00:25:09,929 --> 00:25:12,929
components from source although there

00:25:11,220 --> 00:25:14,880
are some things like the Linux firmware

00:25:12,929 --> 00:25:17,960
that are typically just binary blobs

00:25:14,880 --> 00:25:20,700
that are installed and the yak dough

00:25:17,960 --> 00:25:22,380
focuses on mechanism not policy that and

00:25:20,700 --> 00:25:24,179
that kind of goes back to the quote

00:25:22,380 --> 00:25:25,980
about it's not a distribution it builds

00:25:24,179 --> 00:25:28,169
a custom one for you there are sensible

00:25:25,980 --> 00:25:29,429
defaults for most things in Yocto so

00:25:28,169 --> 00:25:30,059
that you can get up and running really

00:25:29,429 --> 00:25:32,820
quickly

00:25:30,059 --> 00:25:34,320
however Yocto is focused on allowing you

00:25:32,820 --> 00:25:35,580
to make changes to things like the init

00:25:34,320 --> 00:25:37,740
system so you can switch easily between

00:25:35,580 --> 00:25:42,390
sis pianet and system D and things like

00:25:37,740 --> 00:25:45,030
that so the the focus of the octo team

00:25:42,390 --> 00:25:46,470
is not to enforce policy on you as the

00:25:45,030 --> 00:25:49,880
system designer so you're able to

00:25:46,470 --> 00:25:49,880
customize it however you want

00:25:50,510 --> 00:25:57,270
moving on to build route build route has

00:25:53,970 --> 00:26:00,210
a similar objective to Yocto it's

00:25:57,270 --> 00:26:02,820
focuses on being is on a much simpler

00:26:00,210 --> 00:26:06,030
view and they build simpler systems by

00:26:02,820 --> 00:26:08,640
default than the Yocto project does they

00:26:06,030 --> 00:26:11,669
don't support package feeds in the same

00:26:08,640 --> 00:26:13,650
way that octo does the primary output of

00:26:11,669 --> 00:26:15,450
build route are the images that are

00:26:13,650 --> 00:26:16,590
installed on your system so it's the

00:26:15,450 --> 00:26:18,539
root filesystem the kernel the

00:26:16,590 --> 00:26:20,580
bootloader and that kind of thing it

00:26:18,539 --> 00:26:23,580
does again focus it does build

00:26:20,580 --> 00:26:25,200
everything from source and its default

00:26:23,580 --> 00:26:26,760
is to focus on simplicity so if you

00:26:25,200 --> 00:26:28,890
download the build route sources and you

00:26:26,760 --> 00:26:30,090
build without making any modifications

00:26:28,890 --> 00:26:32,250
you're gonna get a very bare-bones

00:26:30,090 --> 00:26:34,679
system that is enough to come up to a

00:26:32,250 --> 00:26:36,240
shell prompt and connect to a wired

00:26:34,679 --> 00:26:38,159
Ethernet and then you need to start

00:26:36,240 --> 00:26:39,470
adding things back in turning on package

00:26:38,159 --> 00:26:41,419
configurations for

00:26:39,470 --> 00:26:45,140
all the packages that are installed in

00:26:41,419 --> 00:26:49,039
that kind of thing and finally just want

00:26:45,140 --> 00:26:50,809
to mention open wrt it's a a fully

00:26:49,039 --> 00:26:52,760
writable system with package management

00:26:50,809 --> 00:26:54,890
so it's very similar in concept to

00:26:52,760 --> 00:26:57,380
things like Debian and Ubuntu its

00:26:54,890 --> 00:26:59,630
primary focuses networking obviously

00:26:57,380 --> 00:27:01,460
based on the name it came out it

00:26:59,630 --> 00:27:12,260
originally started as a replacement

00:27:01,460 --> 00:27:14,330
firmware for the Linksys wrt54g every

00:27:12,260 --> 00:27:15,380
commercial router available if you look

00:27:14,330 --> 00:27:17,750
at their support page it's pretty

00:27:15,380 --> 00:27:20,450
impressive how many how many devices are

00:27:17,750 --> 00:27:23,480
supported it does it's primarily a

00:27:20,450 --> 00:27:26,299
binary distribution there's more of a

00:27:23,480 --> 00:27:29,030
separation in the open wrt world between

00:27:26,299 --> 00:27:32,120
the the bits that you run and then the

00:27:29,030 --> 00:27:34,190
build system then then is for example

00:27:32,120 --> 00:27:37,190
with the octo and build routes so most

00:27:34,190 --> 00:27:38,870
users of the open wrt won't be messing

00:27:37,190 --> 00:27:40,610
with the open wrt build system you'll

00:27:38,870 --> 00:27:42,350
just download the pre-built binary for

00:27:40,610 --> 00:27:45,440
your particular router install it and

00:27:42,350 --> 00:27:47,720
you're good to go and there and they do

00:27:45,440 --> 00:27:50,659
provide network available package

00:27:47,720 --> 00:27:53,450
repositories for the for open wrt unlike

00:27:50,659 --> 00:27:55,220
Yocto and build route where especially

00:27:53,450 --> 00:27:57,049
with Yocto the package feed is part of

00:27:55,220 --> 00:27:58,429
the build that you do which you can then

00:27:57,049 --> 00:28:00,350
make available on the network but there

00:27:58,429 --> 00:28:01,909
are no generally available package

00:28:00,350 --> 00:28:04,490
repositories for those where it's with

00:28:01,909 --> 00:28:05,630
open wrt when you install and boot up

00:28:04,490 --> 00:28:07,549
you can actually go to the package

00:28:05,630 --> 00:28:12,530
manager and install new packages on your

00:28:07,549 --> 00:28:14,260
on your device at runtime so looking up

00:28:12,530 --> 00:28:16,100
at a little bit higher level of

00:28:14,260 --> 00:28:18,650
considerations for when you're deploying

00:28:16,100 --> 00:28:19,669
an IOT device fleet things you might

00:28:18,650 --> 00:28:21,679
need to think about what are the

00:28:19,669 --> 00:28:22,850
lifetimes of your devices typically

00:28:21,679 --> 00:28:24,470
consumer devices

00:28:22,850 --> 00:28:26,059
you know the lifetimes are anywhere from

00:28:24,470 --> 00:28:28,010
six months to you know two to three

00:28:26,059 --> 00:28:30,770
years although I think the router I'm I

00:28:28,010 --> 00:28:32,539
have at home now is you know four to

00:28:30,770 --> 00:28:33,770
five years but it's getting long in the

00:28:32,539 --> 00:28:36,770
tooth so I'm getting ready to replace

00:28:33,770 --> 00:28:37,880
that during the automotive space you

00:28:36,770 --> 00:28:39,679
know you're talking at least a 10-year

00:28:37,880 --> 00:28:41,900
life time once the the systems are

00:28:39,679 --> 00:28:44,360
deployed and typically the lead times

00:28:41,900 --> 00:28:45,980
for for new designs in the automotive

00:28:44,360 --> 00:28:47,990
space is you know between five and ten

00:28:45,980 --> 00:28:49,760
years so right away you're looking at

00:28:47,990 --> 00:28:51,890
fifteen to twenty years total total

00:28:49,760 --> 00:28:53,270
lifetime from prototype to production on

00:28:51,890 --> 00:28:54,500
the automotive space so

00:28:53,270 --> 00:28:57,560
that's definitely something you need to

00:28:54,500 --> 00:28:59,840
keep in mind what kind of fleet do you

00:28:57,560 --> 00:29:02,630
have are your devices in device is

00:28:59,840 --> 00:29:05,330
managed by the by you as the system

00:29:02,630 --> 00:29:08,390
designer or by some central authority or

00:29:05,330 --> 00:29:09,710
the unmanaged you know if you're selling

00:29:08,390 --> 00:29:11,270
consumer devices that are going into

00:29:09,710 --> 00:29:13,550
people's homes you're probably not gonna

00:29:11,270 --> 00:29:15,230
have a managed fleet so these devices

00:29:13,550 --> 00:29:16,460
will be out there they'll be they'll

00:29:15,230 --> 00:29:18,050
they'll be out there on their own they

00:29:16,460 --> 00:29:20,660
need to do their updates and that kind

00:29:18,050 --> 00:29:23,510
of thing but if you have a device a

00:29:20,660 --> 00:29:26,540
smaller deployment or a managed fleet

00:29:23,510 --> 00:29:28,160
you probably will be able to have

00:29:26,540 --> 00:29:31,670
visibility into what the devices are

00:29:28,160 --> 00:29:33,110
doing over their lifetime what what's

00:29:31,670 --> 00:29:36,320
the the operating environment how

00:29:33,110 --> 00:29:38,570
hostile is it if it's deployed in say

00:29:36,320 --> 00:29:40,700
coffee shops with you know open Wi-Fi

00:29:38,570 --> 00:29:42,710
you know you're gonna be getting Network

00:29:40,700 --> 00:29:44,810
pings on a fairly regular basis if it's

00:29:42,710 --> 00:29:46,940
in a fairly controlled lab environment

00:29:44,810 --> 00:29:48,850
then they're not be so that's a that

00:29:46,940 --> 00:29:50,870
that's a different different

00:29:48,850 --> 00:29:53,180
consideration what's the power and

00:29:50,870 --> 00:29:55,040
connectivity like obviously if you are

00:29:53,180 --> 00:29:56,330
battery based that's always a concern

00:29:55,040 --> 00:30:00,070
you need to make sure that you can

00:29:56,330 --> 00:30:02,810
handle unexpected power outage outages

00:30:00,070 --> 00:30:05,330
can the users modify the software do you

00:30:02,810 --> 00:30:06,650
have a system with installable packages

00:30:05,330 --> 00:30:08,480
where the end users of the device are

00:30:06,650 --> 00:30:10,310
actually able to manipulate the software

00:30:08,480 --> 00:30:12,380
that's installed on the device that adds

00:30:10,310 --> 00:30:14,030
a whole level of security and complexity

00:30:12,380 --> 00:30:16,130
that if you can get away with a

00:30:14,030 --> 00:30:19,070
completely read-only a system that you

00:30:16,130 --> 00:30:20,720
don't have to deal with and then you

00:30:19,070 --> 00:30:24,200
know what what is the end user interface

00:30:20,720 --> 00:30:25,970
is this say an appliance that goes in a

00:30:24,200 --> 00:30:27,980
cabinet somewhere nobody ever looks at

00:30:25,970 --> 00:30:30,260
it in that case you can get away with

00:30:27,980 --> 00:30:31,790
doing updates you know when when your

00:30:30,260 --> 00:30:32,720
software determines it's right but if

00:30:31,790 --> 00:30:34,700
it's something with an end user

00:30:32,720 --> 00:30:36,020
interface generally you know you don't

00:30:34,700 --> 00:30:37,910
want to install new software or do

00:30:36,020 --> 00:30:40,820
reboots or anything without prompting

00:30:37,910 --> 00:30:43,670
the end user and then as we mentioned

00:30:40,820 --> 00:30:45,980
before the bandwidth is always something

00:30:43,670 --> 00:30:47,930
to consider both the network bandwidth

00:30:45,980 --> 00:30:50,240
to your device as well as how much cloud

00:30:47,930 --> 00:30:53,800
compute capabilities you might need for

00:30:50,240 --> 00:30:57,860
for that cloud structure and the backend

00:30:53,800 --> 00:31:00,410
so and security we'll talk a bit about

00:30:57,860 --> 00:31:01,940
this the quote at the top the SN io T

00:31:00,410 --> 00:31:06,169
stands for security I hear it a lot

00:31:01,940 --> 00:31:08,269
don't know exactly who came up with it

00:31:06,169 --> 00:31:10,970
but the the Twitter handle you see there

00:31:08,269 --> 00:31:13,759
is the the best guess I could find after

00:31:10,970 --> 00:31:16,879
searching for a bit but I think it's

00:31:13,759 --> 00:31:19,909
obvious that all security all software

00:31:16,879 --> 00:31:22,519
has bugs not all bugs are become

00:31:19,909 --> 00:31:24,320
vulnerable ''tis but when you have one

00:31:22,519 --> 00:31:25,909
to twenty five bugs for every thousand

00:31:24,320 --> 00:31:27,859
lines of code there's like liable to be

00:31:25,909 --> 00:31:31,220
some vulnerabilities out there that will

00:31:27,859 --> 00:31:35,359
eventually allow your device to be taken

00:31:31,220 --> 00:31:37,489
over so just in general just as general

00:31:35,359 --> 00:31:39,409
advice use well-maintained software keep

00:31:37,489 --> 00:31:41,989
it updated you don't want to be the only

00:31:39,409 --> 00:31:44,029
one using you know some branch of you

00:31:41,989 --> 00:31:46,489
boot or a Linux kernel that hasn't been

00:31:44,029 --> 00:31:48,619
touched in a number of years and then

00:31:46,489 --> 00:31:50,210
you know just follow general security

00:31:48,619 --> 00:31:52,129
practices principle of least privilege

00:31:50,210 --> 00:31:53,480
don't run something as root unless it

00:31:52,129 --> 00:31:55,249
needs to be root if you do have

00:31:53,480 --> 00:31:56,600
something like selinux or smack you can

00:31:55,249 --> 00:32:00,789
get a little bit more fine-grained

00:31:56,600 --> 00:32:05,169
control over that care Crofts principle

00:32:00,789 --> 00:32:07,279
basically says that you know the only

00:32:05,169 --> 00:32:09,559
security of an encryption system is the

00:32:07,279 --> 00:32:11,269
key so don't don't rely on security

00:32:09,559 --> 00:32:13,039
through obscurity use a well-known

00:32:11,269 --> 00:32:20,200
encryption system if you are when you

00:32:13,039 --> 00:32:23,509
are doing a crypto in your devices and

00:32:20,200 --> 00:32:25,159
just as kind of self-serving a thing

00:32:23,509 --> 00:32:26,840
here at the end over-the-air updates are

00:32:25,159 --> 00:32:28,730
must have these days especially for any

00:32:26,840 --> 00:32:30,710
of these devices that are connected as I

00:32:28,730 --> 00:32:32,359
said you're gonna have more bugs which

00:32:30,710 --> 00:32:34,519
will eventually become vulnerabilities

00:32:32,359 --> 00:32:37,789
and if your device is connected there

00:32:34,519 --> 00:32:38,899
are people out there scanning and they

00:32:37,789 --> 00:32:44,779
will take over your device pretty

00:32:38,899 --> 00:32:47,960
quickly and I'll just leave this slide

00:32:44,779 --> 00:32:50,119
up this is I think fairly well

00:32:47,960 --> 00:32:51,549
understood it kind of kind of just goes

00:32:50,119 --> 00:32:54,679
to the point on my previous slide about

00:32:51,549 --> 00:32:56,840
the the number of bugs out there but

00:32:54,679 --> 00:33:00,739
with the average remediation time being

00:32:56,840 --> 00:33:03,409
110 days well beyond when then there's a

00:33:00,739 --> 00:33:05,570
90% probability of a former ability

00:33:03,409 --> 00:33:08,059
being exploited obviously we as an

00:33:05,570 --> 00:33:09,950
industry have to get better at getting

00:33:08,059 --> 00:33:13,389
these things fixed to get getting the

00:33:09,950 --> 00:33:13,389
the fixes deployed to our devices

00:33:16,650 --> 00:33:21,820
so briefly about patching and updates

00:33:19,240 --> 00:33:23,740
you see the the number from a bi

00:33:21,820 --> 00:33:25,150
research they're one third of current

00:33:23,740 --> 00:33:27,700
recalls are for problems that could have

00:33:25,150 --> 00:33:29,980
been fixed over the air thirty five

00:33:27,700 --> 00:33:32,050
billion dollars in savings in 2022

00:33:29,980 --> 00:33:35,020
according to one automotive survey

00:33:32,050 --> 00:33:37,570
obviously in the automotive space if

00:33:35,020 --> 00:33:39,070
there are vulnerabilities that you can

00:33:37,570 --> 00:33:41,770
fix over the air that's significantly

00:33:39,070 --> 00:33:44,590
cheaper than spinning up all your repair

00:33:41,770 --> 00:33:47,830
centers having your customers bring the

00:33:44,590 --> 00:33:52,530
devices in and have them flashed over

00:33:47,830 --> 00:33:54,490
USB so if at all possible

00:33:52,530 --> 00:33:56,380
definitely when you're deploying IOT

00:33:54,490 --> 00:33:59,050
devices or any kind of connected device

00:33:56,380 --> 00:34:00,760
over-the-air updates should be

00:33:59,050 --> 00:34:04,510
considered a must have especially given

00:34:00,760 --> 00:34:05,920
some of the lifetimes and the expense of

00:34:04,510 --> 00:34:08,560
accessing these devices when they're

00:34:05,920 --> 00:34:11,410
deployed in the field all of these

00:34:08,560 --> 00:34:15,190
things put together to tell us we need

00:34:11,410 --> 00:34:18,520
to do this and in when you're looking at

00:34:15,190 --> 00:34:21,910
updates just a some high-level design

00:34:18,520 --> 00:34:23,500
criteria robustness how do how does the

00:34:21,910 --> 00:34:26,110
update mechanism ensure that you don't

00:34:23,500 --> 00:34:28,150
get brick devices in the field if you

00:34:26,110 --> 00:34:29,290
you know if the device is on the on the

00:34:28,150 --> 00:34:31,540
shelf next to you it's easy enough to

00:34:29,290 --> 00:34:33,850
reach up and hit the power power switch

00:34:31,540 --> 00:34:38,380
but I was talking to somebody yesterday

00:34:33,850 --> 00:34:40,480
who does devices for undersea usage it's

00:34:38,380 --> 00:34:43,090
a little bit more expensive to charter a

00:34:40,480 --> 00:34:44,290
boat get a dive team go out descend the

00:34:43,090 --> 00:34:47,860
dive team down two hundred three hundred

00:34:44,290 --> 00:34:49,720
feet and hit the power supply so you

00:34:47,860 --> 00:34:52,210
don't want to be deploying an update

00:34:49,720 --> 00:34:54,010
have the the power cycle at that exact

00:34:52,210 --> 00:34:56,710
moment and end up with a device with a

00:34:54,010 --> 00:34:58,780
corrupted root filesystem so you know

00:34:56,710 --> 00:35:01,960
the the robustness of the deserve the

00:34:58,780 --> 00:35:05,110
update system is is critical security

00:35:01,960 --> 00:35:07,810
obviously TLS image signing all the

00:35:05,110 --> 00:35:10,840
industry best practices I think that's

00:35:07,810 --> 00:35:12,700
all fairly standard are the Attar the

00:35:10,840 --> 00:35:14,890
updates atomic if you're doing apt-get

00:35:12,700 --> 00:35:17,500
update typically that's not an atomic

00:35:14,890 --> 00:35:19,900
type of update it makes it very

00:35:17,500 --> 00:35:21,850
difficult to know exactly what set of

00:35:19,900 --> 00:35:23,260
software is on any given device if

00:35:21,850 --> 00:35:25,630
you're doing full image updates it makes

00:35:23,260 --> 00:35:28,630
it very easy to say my fleet of devices

00:35:25,630 --> 00:35:31,040
is all running the exact same bit of

00:35:28,630 --> 00:35:32,810
software and

00:35:31,040 --> 00:35:35,390
the automatic rollback that goes to

00:35:32,810 --> 00:35:37,369
implementing the robustness so if there

00:35:35,390 --> 00:35:38,869
is an issue with an update

00:35:37,369 --> 00:35:40,190
these your system going to detect it and

00:35:38,869 --> 00:35:42,590
automatically roll back to a known good

00:35:40,190 --> 00:35:45,200
configuration and finally you know how

00:35:42,590 --> 00:35:47,570
expandable is it is is the update system

00:35:45,200 --> 00:35:50,119
for your particular workflow and use

00:35:47,570 --> 00:35:52,130
case the the update system isn't going

00:35:50,119 --> 00:35:54,770
to know about your database structure or

00:35:52,130 --> 00:35:56,240
what peripherals you have and so there

00:35:54,770 --> 00:35:58,130
needs to be mechanisms in the update

00:35:56,240 --> 00:36:00,140
keep in the update system for you as the

00:35:58,130 --> 00:36:02,390
system designer to be able to customize

00:36:00,140 --> 00:36:05,300
it and say ok on a new boot I want to

00:36:02,390 --> 00:36:07,520
test the I want to validate the database

00:36:05,300 --> 00:36:08,300
and I want to check this peripheral over

00:36:07,520 --> 00:36:11,359
here and make sure everything's working

00:36:08,300 --> 00:36:12,830
so the expandability is something to

00:36:11,359 --> 00:36:15,830
consider when you when you are adding

00:36:12,830 --> 00:36:17,060
this into your system and with that I

00:36:15,830 --> 00:36:19,450
think we've got just a few minutes for

00:36:17,060 --> 00:36:21,859
questions I got a couple links here that

00:36:19,450 --> 00:36:24,740
that go into a bit more depth on some of

00:36:21,859 --> 00:36:26,780
these things if you I would encourage

00:36:24,740 --> 00:36:29,750
you to check them out there's a couple

00:36:26,780 --> 00:36:31,609
articles and a talk I gave last time

00:36:29,750 --> 00:36:33,440
that goes into a bit more depth about

00:36:31,609 --> 00:36:35,060
things like acto and build route so you

00:36:33,440 --> 00:36:37,250
have an interest in that feel free to

00:36:35,060 --> 00:36:38,869
take a look and with that I'll open the

00:36:37,250 --> 00:36:40,280
floor for questions we've got mics on

00:36:38,869 --> 00:36:43,130
either side so if you have a question

00:36:40,280 --> 00:36:44,180
just come on up and make sure that

00:36:43,130 --> 00:36:46,570
everybody can hear you and we get it

00:36:44,180 --> 00:36:46,570
recorded

00:36:53,180 --> 00:36:56,839
all right I must be in-between lunch oh

00:36:56,030 --> 00:37:20,500
we got one

00:36:56,839 --> 00:37:21,740
I evidently not such as what I'm sorry

00:37:20,500 --> 00:37:25,640
okay

00:37:21,740 --> 00:37:27,530
okay yeah so the the yeah so the comment

00:37:25,640 --> 00:37:29,030
was in you're right I didn't mention it

00:37:27,530 --> 00:37:30,140
you know I mentioned Debbie and I

00:37:29,030 --> 00:37:33,609
mentioned yack go and build Ruth there

00:37:30,140 --> 00:37:36,770
are a number of commercially supported

00:37:33,609 --> 00:37:39,380
desktop-class districts such as SUSE

00:37:36,770 --> 00:37:42,230
Linux that are supported and available

00:37:39,380 --> 00:37:43,940
for embedded / IOT use so that's another

00:37:42,230 --> 00:37:45,319
certainly another consideration when

00:37:43,940 --> 00:37:47,359
you're looking at your system software

00:37:45,319 --> 00:37:49,160
strategy is you know who do you call

00:37:47,359 --> 00:37:50,510
when something goes wrong if you're if

00:37:49,160 --> 00:37:52,730
you're starting with a completely open

00:37:50,510 --> 00:37:54,050
source thing it's a you know you might

00:37:52,730 --> 00:37:55,640
get help on a mailing list you might not

00:37:54,050 --> 00:37:56,869
but if you get a device you know a fleet

00:37:55,640 --> 00:37:58,280
of a hundred thousand devices in the

00:37:56,869 --> 00:38:00,230
field you might want to consider some

00:37:58,280 --> 00:38:05,059
kind of support arrangement so you get

00:38:00,230 --> 00:38:07,599
somebody to call all right let's see if

00:38:05,059 --> 00:38:07,599
this sides working

00:38:11,940 --> 00:38:20,240
evidently not nope

00:38:28,110 --> 00:38:35,640
I have a question about your product

00:38:31,530 --> 00:38:38,070
mentor I Oh does it allow to enforce an

00:38:35,640 --> 00:38:43,740
atomic update of systems that consists

00:38:38,070 --> 00:39:08,280
of several Linux nodes no not today it

00:38:43,740 --> 00:39:10,370
does not we ourselves have today thank

00:39:08,280 --> 00:39:10,370
you

00:39:15,680 --> 00:39:20,449
all right thank you very much

00:39:18,090 --> 00:39:20,449

YouTube URL: https://www.youtube.com/watch?v=XFpi1aK0zbU


