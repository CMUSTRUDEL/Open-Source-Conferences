Title: Extending the Performance Analyis Toolset - Christoph Sterz, KDAB
Publication date: 2018-10-25
Playlist: Open Source Summit Europe & ELC + OpenIoT Summit Europe 2018
Description: 
	Extending the Performance Analyis Toolset - Christoph Sterz, KDAB

Finding and analyzing performance issues on embedded devices can be a tiresome search. Nowadays, modern sampling and tracing technologies are built into the Linux kernel to address this, in the form of perf and LTTng respectively. Still, the vast amounts of data recorded are difficult to handle on the limited embedded devices themselves. In the talk, I present Hotspot, an open-source performance analysis tool based on perf that enables you to visualize the recorded information and lets you navigate through the enormous amounts of sampled data offline. For tracing, sophisticated analysis tools such as TraceCompass already exist, but trace points in embedded userspace applications are rare. We see how LTTng tracepoints can be added to userland UI frameworks on the example of Qt. Here, I explain LTTng's low overhead and outline our plans in instrumenting Qt for the LTTng tracing ecosystem. 

About Christoph Sterz
Christoph Sterz is a Software Engineer at KDAB where he mostly works on solving perfomance-issues for multiple automotive customers. He is passionate about all aspects of performance and works mostly on Embedded Linux platforms. In his spare time he teaches programing to Kids in a local CoderDojo. Christoph gave a talk on Qt World Summit 2017, titled QML-driven HMI Architectures for Rolling Embedded Devices.
Captions: 
	00:00:00,149 --> 00:00:05,910
welcome to my talk thanks all for coming

00:00:02,990 --> 00:00:09,599
my talk will be about extending the

00:00:05,910 --> 00:00:11,429
performance analysis tool set so I will

00:00:09,599 --> 00:00:14,880
be talking about tools that you can use

00:00:11,429 --> 00:00:18,449
in your Linux environment in order to

00:00:14,880 --> 00:00:21,930
find out performance bugs in different

00:00:18,449 --> 00:00:24,029
ways so this is about performance and

00:00:21,930 --> 00:00:25,769
this is about embedded performance

00:00:24,029 --> 00:00:27,900
because it's on an embedded conference

00:00:25,769 --> 00:00:29,670
and when it comes to embedded

00:00:27,900 --> 00:00:31,260
performance it's really important to

00:00:29,670 --> 00:00:34,920
understand that when you're coming from

00:00:31,260 --> 00:00:39,180
a desktop world your performance will

00:00:34,920 --> 00:00:40,890
look differently the time inside your

00:00:39,180 --> 00:00:43,200
embedded system will be spent

00:00:40,890 --> 00:00:45,840
differently maybe let's have a show of

00:00:43,200 --> 00:00:48,149
hands who had that situation of of

00:00:45,840 --> 00:00:50,039
thinking well I know this is probably

00:00:48,149 --> 00:00:52,949
something with the i/o and in the end

00:00:50,039 --> 00:00:58,640
the performance part where was somewhere

00:00:52,949 --> 00:01:01,500
else totally ok I see some hands so I

00:00:58,640 --> 00:01:04,019
want embedded we cannot really rely on

00:01:01,500 --> 00:01:06,570
our intuition we need to be scientific

00:01:04,019 --> 00:01:10,799
and we need to measure and then we can

00:01:06,570 --> 00:01:14,280
decide and improve things ok here is the

00:01:10,799 --> 00:01:16,799
outline of the talk ok first I will talk

00:01:14,280 --> 00:01:19,259
a little bit about how to get sampling

00:01:16,799 --> 00:01:22,020
performance information on an embedded

00:01:19,259 --> 00:01:24,420
device with perf and how to get the

00:01:22,020 --> 00:01:26,369
symbols in and so on debug symbols and

00:01:24,420 --> 00:01:28,680
the second part I will show you a

00:01:26,369 --> 00:01:30,150
hotspot a tool that we develop I already

00:01:28,680 --> 00:01:35,820
have the t-shirt on it's quite cold but

00:01:30,150 --> 00:01:37,590
still ok I show you hotspot and I will

00:01:35,820 --> 00:01:39,780
demo this for you and we will go through

00:01:37,590 --> 00:01:41,549
several examples like how like

00:01:39,780 --> 00:01:43,740
performance defects can look like in

00:01:41,549 --> 00:01:46,229
this tool hotspot how you spot them and

00:01:43,740 --> 00:01:48,270
maybe also how you fix them and in the

00:01:46,229 --> 00:01:50,880
third part I have to do a little bit of

00:01:48,270 --> 00:01:54,270
a disclaimer here I'm coming from the QT

00:01:50,880 --> 00:01:58,140
world I will talk about how we at k-dubb

00:01:54,270 --> 00:02:01,439
introduced LT TNG tracing not sampling

00:01:58,140 --> 00:02:05,130
the tracing to the cute libraries in

00:02:01,439 --> 00:02:10,110
order to enhance the experience you have

00:02:05,130 --> 00:02:12,810
when debugging performance issues ok so

00:02:10,110 --> 00:02:14,130
at first talk about linux perth let's

00:02:12,810 --> 00:02:18,000
talk about embedded

00:02:14,130 --> 00:02:20,100
so what you usually will have when when

00:02:18,000 --> 00:02:23,100
you want to have perf information so

00:02:20,100 --> 00:02:25,490
sampling information you need to have

00:02:23,100 --> 00:02:27,830
your perf running on your system

00:02:25,490 --> 00:02:29,700
oftentimes that's a performance

00:02:27,830 --> 00:02:32,160
performance issue sometimes there's a

00:02:29,700 --> 00:02:34,440
security issue oftentimes your managers

00:02:32,160 --> 00:02:36,690
say now let's don't have perf on our

00:02:34,440 --> 00:02:38,760
real images so i really suggest you to

00:02:36,690 --> 00:02:40,620
have a production image and the

00:02:38,760 --> 00:02:43,490
development image and the development

00:02:40,620 --> 00:02:48,270
image should at least have all these

00:02:43,490 --> 00:02:50,340
flags set in the corner so these flags

00:02:48,270 --> 00:02:53,370
really determine whether you can do

00:02:50,340 --> 00:02:55,830
useful tracing with your perf

00:02:53,370 --> 00:02:58,950
so the first is do we have perf at all

00:02:55,830 --> 00:03:01,230
the second is can we do with 12

00:02:58,950 --> 00:03:04,020
unwinding which becomes important in

00:03:01,230 --> 00:03:06,210
some time and then do we have Trey's

00:03:04,020 --> 00:03:08,370
points which we can use for example to

00:03:06,210 --> 00:03:12,180
trace the scheduler to find out issues

00:03:08,370 --> 00:03:13,620
with locks and so on okay so when you

00:03:12,180 --> 00:03:15,180
have an embedded system make sure you

00:03:13,620 --> 00:03:17,250
have an image that at least has

00:03:15,180 --> 00:03:18,810
something like this because otherwise

00:03:17,250 --> 00:03:21,690
you cannot measure on your bedded system

00:03:18,810 --> 00:03:26,160
if you measure on your desktop you would

00:03:21,690 --> 00:03:29,160
you will not find the issue second point

00:03:26,160 --> 00:03:34,340
it's really really really important to

00:03:29,160 --> 00:03:37,560
have debug symbols but build on release

00:03:34,340 --> 00:03:40,020
maybe you know this this trick here this

00:03:37,560 --> 00:03:43,320
code this code cakes it calculates the

00:03:40,020 --> 00:03:45,180
sum of integers beginning from 0 ending

00:03:43,320 --> 00:03:48,720
at a certain integer that you want and

00:03:45,180 --> 00:03:51,750
you compile it with and without the - OH

00:03:48,720 --> 00:03:57,600
- what will happen anyone knows the

00:03:51,750 --> 00:04:00,900
answer yeah maybe it's a little bit here

00:03:57,600 --> 00:04:02,640
so without how - you will get a for loop

00:04:00,900 --> 00:04:05,210
normal loop you will can look at the

00:04:02,640 --> 00:04:09,450
assembler will be a normal loop but

00:04:05,210 --> 00:04:12,090
there's a really smart guy called Gauss

00:04:09,450 --> 00:04:15,270
who found a formula for this and when

00:04:12,090 --> 00:04:17,970
you pass the - or - the formula will be

00:04:15,270 --> 00:04:21,690
applied so we you will have that n times

00:04:17,970 --> 00:04:24,690
n minus 1 and half of that as the result

00:04:21,690 --> 00:04:26,790
of this that means in in some ways it

00:04:24,690 --> 00:04:27,370
will be infinitely faster when you have

00:04:26,790 --> 00:04:29,770
the

00:04:27,370 --> 00:04:33,550
- OH - so always be sure to have a

00:04:29,770 --> 00:04:37,030
profile built so in your build systems

00:04:33,550 --> 00:04:39,010
there's this rebel with debug info for

00:04:37,030 --> 00:04:40,600
example please make sure that you have

00:04:39,010 --> 00:04:45,130
this because otherwise you're not

00:04:40,600 --> 00:04:47,169
measuring anything that is relevant to -

00:04:45,130 --> 00:04:49,889
performance because on your release

00:04:47,169 --> 00:04:53,590
systems you will have release builds and

00:04:49,889 --> 00:04:56,050
for this please have Auto but with debug

00:04:53,590 --> 00:05:02,280
symbols first okay

00:04:56,050 --> 00:05:05,949
second problem we have no space on our

00:05:02,280 --> 00:05:07,419
embedded systems so usually you have

00:05:05,949 --> 00:05:09,610
something like this use the space

00:05:07,419 --> 00:05:12,160
libraries again I'm coming from the cute

00:05:09,610 --> 00:05:14,710
world the cute five core and look cute

00:05:12,160 --> 00:05:16,960
five core stripped it's five megabytes

00:05:14,710 --> 00:05:19,150
which is big for embedded systems but

00:05:16,960 --> 00:05:21,550
it's okay but if you have the debug

00:05:19,150 --> 00:05:24,070
symbols inside then it's really big so

00:05:21,550 --> 00:05:25,750
you cannot really have it inside so what

00:05:24,070 --> 00:05:28,600
will you have instead you will have

00:05:25,750 --> 00:05:30,310
separate dwarf debug info inside your

00:05:28,600 --> 00:05:32,620
build system I think your - does it by

00:05:30,310 --> 00:05:35,200
default so inside your SDK

00:05:32,620 --> 00:05:38,039
you will find your debug symbols which

00:05:35,200 --> 00:05:41,229
are just elf objects that are separated

00:05:38,039 --> 00:05:43,210
onto your host system but on the target

00:05:41,229 --> 00:05:47,710
you just have your libraries that are

00:05:43,210 --> 00:05:51,160
stripped okay another problem now that

00:05:47,710 --> 00:05:53,800
we have debug info on the holes but

00:05:51,160 --> 00:05:57,550
actually we're measuring on the target

00:05:53,800 --> 00:06:00,520
system we have an architecture mismatch

00:05:57,550 --> 00:06:03,910
so what we need to do is we need to

00:06:00,520 --> 00:06:06,810
unwind the measurement like stack

00:06:03,910 --> 00:06:09,280
pointer measurements that we did on the

00:06:06,810 --> 00:06:12,190
on the target system we need to unwind

00:06:09,280 --> 00:06:16,560
on the host system so on our desktop

00:06:12,190 --> 00:06:19,120
system that's not always easy to do okay

00:06:16,560 --> 00:06:22,180
and then we have Linux per for itself

00:06:19,120 --> 00:06:25,120
and there we also need to look whether

00:06:22,180 --> 00:06:27,729
we can do low overhead measurements

00:06:25,120 --> 00:06:31,570
using our performance measurement unit

00:06:27,729 --> 00:06:33,610
inside our CPU to see whether you have a

00:06:31,570 --> 00:06:35,919
performance measurement unit just scroll

00:06:33,610 --> 00:06:38,140
through D message and look whether you

00:06:35,919 --> 00:06:38,960
have that pmu entry somewhere on

00:06:38,140 --> 00:06:42,259
interview with

00:06:38,960 --> 00:06:45,080
find it on some arm CPUs only called

00:06:42,259 --> 00:06:48,470
zero is counted arm does not specify

00:06:45,080 --> 00:06:51,259
that this P mu has to be inside the CPU

00:06:48,470 --> 00:06:54,020
so it can be no P mu at all at some

00:06:51,259 --> 00:06:56,330
times it just gives you bogus values so

00:06:54,020 --> 00:06:58,940
please find out if you haven't P mu

00:06:56,330 --> 00:07:03,319
and if perf can actually measure things

00:06:58,940 --> 00:07:06,770
like cycles on on your CPU okay but then

00:07:03,319 --> 00:07:09,979
we can go ahead and get our debug info

00:07:06,770 --> 00:07:12,800
from our device just with this call here

00:07:09,979 --> 00:07:15,680
we do perf records because we now now

00:07:12,800 --> 00:07:18,530
perf is working on our device and we do

00:07:15,680 --> 00:07:21,860
- - call graph we want to have the stack

00:07:18,530 --> 00:07:23,990
information and then we just close the

00:07:21,860 --> 00:07:26,150
parameters here for perf and then we

00:07:23,990 --> 00:07:29,030
start our app with our promised

00:07:26,150 --> 00:07:33,830
parameters that we want to that we want

00:07:29,030 --> 00:07:36,259
to see and just measure there okay now

00:07:33,830 --> 00:07:38,630
we have our profiling information and

00:07:36,259 --> 00:07:40,789
now we need to process it and as I said

00:07:38,630 --> 00:07:43,150
before when we do unwinding on the

00:07:40,789 --> 00:07:45,530
device we can use perth there is a perf

00:07:43,150 --> 00:07:48,949
report which is kind of this

00:07:45,530 --> 00:07:52,190
command-line interface looks like this I

00:07:48,949 --> 00:07:54,530
don't really see any information this

00:07:52,190 --> 00:07:59,120
weird right here the numbers do not

00:07:54,530 --> 00:08:00,650
really add up to 100% yeah like my

00:07:59,120 --> 00:08:03,409
biggest problem is apparently end up

00:08:00,650 --> 00:08:05,870
seeing it's unclear what's happening

00:08:03,409 --> 00:08:07,280
there you can actually expand these you

00:08:05,870 --> 00:08:09,500
can look inside what is actually

00:08:07,280 --> 00:08:10,430
happening inside my Lipsy and like where

00:08:09,500 --> 00:08:13,759
is it coming from

00:08:10,430 --> 00:08:19,190
but queue event loop exit does not

00:08:13,759 --> 00:08:21,919
really tell me a lot here this is why we

00:08:19,190 --> 00:08:24,710
build hot spot hot spot is a free and

00:08:21,919 --> 00:08:27,229
open source software Linux UI for

00:08:24,710 --> 00:08:29,719
visualizing your per free sites there's

00:08:27,229 --> 00:08:32,180
already your eyes for visualizing or

00:08:29,719 --> 00:08:34,459
like approaches for visualizing perf

00:08:32,180 --> 00:08:37,070
results for example from Brendan Gregg

00:08:34,459 --> 00:08:38,930
who is really great on this topic so

00:08:37,070 --> 00:08:40,610
really check out his webpage when you

00:08:38,930 --> 00:08:45,140
want to learn about Perth and Linux

00:08:40,610 --> 00:08:47,270
performance in general but we wrote a

00:08:45,140 --> 00:08:50,910
tool that can do a bit more I will show

00:08:47,270 --> 00:08:53,700
in a short time in a demo internally

00:08:50,910 --> 00:08:56,940
uses perf Pazza which comes from the

00:08:53,700 --> 00:09:00,690
cute creator guys and which in turn uses

00:08:56,940 --> 00:09:02,970
slip unwind or lip dwo for unwinding

00:09:00,690 --> 00:09:05,940
even of architecture and this is the

00:09:02,970 --> 00:09:08,280
important part here before I come to the

00:09:05,940 --> 00:09:10,860
demo I just want to give a big shout out

00:09:08,280 --> 00:09:15,020
to a media envoy who cannot be here

00:09:10,860 --> 00:09:19,530
today but he is the core maintainer and

00:09:15,020 --> 00:09:23,160
like all courtesy goes to him ok let's

00:09:19,530 --> 00:09:27,210
let's see a bit how this hotspot looks

00:09:23,160 --> 00:09:29,430
like I have a perf I have a simple

00:09:27,210 --> 00:09:32,880
application here it's just called

00:09:29,430 --> 00:09:36,510
example one I show you example one it's

00:09:32,880 --> 00:09:38,130
one of these nice mandal port examples

00:09:36,510 --> 00:09:41,670
that's that's plain you may be note from

00:09:38,130 --> 00:09:44,940
university but the problem here is that

00:09:41,670 --> 00:09:48,000
it's a bit slow so if I need like scale

00:09:44,940 --> 00:09:51,390
it a bit bigger you see it slowed even

00:09:48,000 --> 00:09:54,150
lags take some time before I get there

00:09:51,390 --> 00:09:58,290
now I want to find out what is really

00:09:54,150 --> 00:10:03,540
slow inside here ok so we heard that we

00:09:58,290 --> 00:10:08,040
just go there and right perf record - -

00:10:03,540 --> 00:10:11,160
call - graph dwarf so we're using the

00:10:08,040 --> 00:10:12,600
the dwarf information for unwinding or

00:10:11,160 --> 00:10:17,330
like for recording and later for

00:10:12,600 --> 00:10:22,950
unwinding and then I go ahead and do x1

00:10:17,330 --> 00:10:26,730
sorters and laugh man report I will pass

00:10:22,950 --> 00:10:29,370
an argument to this I would say - B 10

00:10:26,730 --> 00:10:31,410
which means repeat the drawing 10 times

00:10:29,370 --> 00:10:33,660
you won't see anything on the screen but

00:10:31,410 --> 00:10:37,550
believe me it's actually calculating the

00:10:33,660 --> 00:10:42,180
thing 10 times okay we do this and what

00:10:37,550 --> 00:10:44,970
falls out of it in a few seconds is this

00:10:42,180 --> 00:10:47,520
perfect data here you see maybe another

00:10:44,970 --> 00:10:52,650
problem that you get the perfect data is

00:10:47,520 --> 00:10:56,250
quite big but you can set the the

00:10:52,650 --> 00:10:58,590
frequency in which it actually records

00:10:56,250 --> 00:11:00,660
the data so you can shrink it down and

00:10:58,590 --> 00:11:02,700
like play around a little bit

00:11:00,660 --> 00:11:03,800
so you'll find that sweet spot of there

00:11:02,700 --> 00:11:06,380
maybe 10 megabytes

00:11:03,800 --> 00:11:11,269
have left on your device or maybe just

00:11:06,380 --> 00:11:13,720
yeah and then if I look inside here we

00:11:11,269 --> 00:11:19,959
have this perv that data information now

00:11:13,720 --> 00:11:22,790
recorded and now I can start hotspot and

00:11:19,959 --> 00:11:25,940
by default it will read the birthdate

00:11:22,790 --> 00:11:29,480
data out of this file here okay starts

00:11:25,940 --> 00:11:31,760
and the first thing I see here is it is

00:11:29,480 --> 00:11:34,010
it too small please interrupt me if it's

00:11:31,760 --> 00:11:39,649
totally too small it's okay

00:11:34,010 --> 00:11:42,110
direct first I see what was recorded

00:11:39,649 --> 00:11:44,510
here actually the total run time we are

00:11:42,110 --> 00:11:46,240
at five seconds it's gotta be important

00:11:44,510 --> 00:11:50,360
later because we can improve this thing

00:11:46,240 --> 00:11:53,089
and then we will see our hotspots hi pod

00:11:50,360 --> 00:11:55,610
finite and there's also a drum and

00:11:53,089 --> 00:12:00,320
abroad and there's also a multiplication

00:11:55,610 --> 00:12:03,800
of a complex double version three that

00:12:00,320 --> 00:12:05,829
is important here this is something that

00:12:03,800 --> 00:12:08,300
is already telling us something about

00:12:05,829 --> 00:12:11,300
where our hot spot or where problems

00:12:08,300 --> 00:12:14,180
might might be but something that is

00:12:11,300 --> 00:12:18,320
really useful and really widely known in

00:12:14,180 --> 00:12:20,540
the field now is this flame graph and I

00:12:18,320 --> 00:12:25,100
wake playing the flame graph really

00:12:20,540 --> 00:12:30,320
short just everything you see here is

00:12:25,100 --> 00:12:33,860
actually the stack in going up direction

00:12:30,320 --> 00:12:36,829
and going left to right is the cost of

00:12:33,860 --> 00:12:40,430
the functions that were called on a

00:12:36,829 --> 00:12:43,010
stick okay so I see inside my start I

00:12:40,430 --> 00:12:44,990
have my lips II start main inside I have

00:12:43,010 --> 00:12:48,199
my main inside I have my draw man report

00:12:44,990 --> 00:12:51,050
inside I have my standard absolute from

00:12:48,199 --> 00:12:54,980
from a complex table and then I come to

00:12:51,050 --> 00:12:58,100
my iPod iPod finite and so on so what we

00:12:54,980 --> 00:12:59,930
can see here is we cannot even inspect

00:12:58,100 --> 00:13:01,760
and go inside like just click on main

00:12:59,930 --> 00:13:03,410
now main becomes the new hundred percent

00:13:01,760 --> 00:13:05,120
we can go inside and inspect that

00:13:03,410 --> 00:13:07,550
further we will see that in other

00:13:05,120 --> 00:13:10,370
examples later on what we can do with

00:13:07,550 --> 00:13:13,100
hotspot also which you cannot really do

00:13:10,370 --> 00:13:15,890
with the scripts that are outside there

00:13:13,100 --> 00:13:16,889
which also produce these flame graphs

00:13:15,890 --> 00:13:20,939
for you

00:13:16,889 --> 00:13:23,339
is you can select individual filters

00:13:20,939 --> 00:13:25,230
like filter for time for example you

00:13:23,339 --> 00:13:26,879
might be interested in your startup time

00:13:25,230 --> 00:13:28,949
maybe your startup time is your problem

00:13:26,879 --> 00:13:31,139
you want to look what is going on in my

00:13:28,949 --> 00:13:34,230
startup time here so I filter on here

00:13:31,139 --> 00:13:35,699
and what I see here is ok I'm actually

00:13:34,230 --> 00:13:37,439
in the loader there's a lots of deal

00:13:35,699 --> 00:13:39,989
open and stuff going on and there's

00:13:37,439 --> 00:13:44,970
actually no man report at all in my

00:13:39,989 --> 00:13:48,809
startup time here ok I can also okay

00:13:44,970 --> 00:13:51,929
reset the filter again reset zoom and

00:13:48,809 --> 00:13:54,540
filter and then I go I go back in this

00:13:51,929 --> 00:13:57,149
in this time frame and at this time

00:13:54,540 --> 00:13:59,160
frame I should have nothing not these

00:13:57,149 --> 00:14:01,529
steel opens and this stuff but I should

00:13:59,160 --> 00:14:04,350
have my start main and so on in my mind

00:14:01,529 --> 00:14:06,179
report which is actually my cost yeah I

00:14:04,350 --> 00:14:08,189
filter in on selection you can see you

00:14:06,179 --> 00:14:11,609
can also filter in on individual threads

00:14:08,189 --> 00:14:16,350
and so on ok we go here did I just just

00:14:11,609 --> 00:14:19,889
soon know and I can also go here and ask

00:14:16,350 --> 00:14:22,129
ok this draw am and abroad let's go to

00:14:19,889 --> 00:14:26,759
another view which is the collar Colleen

00:14:22,129 --> 00:14:29,429
mode we can see ok who was calling me as

00:14:26,759 --> 00:14:33,889
my function is function like draw Amanda

00:14:29,429 --> 00:14:33,889
brought okay I was called mostly by main

00:14:34,339 --> 00:14:42,689
inside I was calling these standard apps

00:14:38,489 --> 00:14:44,399
of this complex other and so on and here

00:14:42,689 --> 00:14:47,100
I have locations where actually the

00:14:44,399 --> 00:14:50,220
costs are having happening so actually

00:14:47,100 --> 00:14:53,699
in a hot spot you can go here say open

00:14:50,220 --> 00:14:56,790
an editor then after some time editor

00:14:53,699 --> 00:15:00,119
will open up and we just saw it's in

00:14:56,790 --> 00:15:02,759
line 14 we see ok here 9:40 here's my

00:15:00,119 --> 00:15:05,279
standard apps of my complex which is

00:15:02,759 --> 00:15:08,089
actually like giving me headaches which

00:15:05,279 --> 00:15:11,189
is actually giving me problems here

00:15:08,089 --> 00:15:13,439
small spoiler for solutions complex

00:15:11,189 --> 00:15:15,480
numbers I'm calculating the absolute on

00:15:13,439 --> 00:15:17,480
office complex number here so solution

00:15:15,480 --> 00:15:22,249
to make this faster here for example

00:15:17,480 --> 00:15:24,449
would be this is kind of a Pythagoras

00:15:22,249 --> 00:15:27,600
calculation it's kind of a square root

00:15:24,449 --> 00:15:29,939
of real real squared plus imaginary

00:15:27,600 --> 00:15:32,669
squared but why have this

00:15:29,939 --> 00:15:35,369
railroad and why not put a fall here and

00:15:32,669 --> 00:15:38,879
don't take the square root okay so I

00:15:35,369 --> 00:15:42,299
just would replace this with kind of a

00:15:38,879 --> 00:15:44,749
fast norm that still would be the square

00:15:42,299 --> 00:15:49,499
norm instead of the norm that has the

00:15:44,749 --> 00:15:53,309
that has it the square root inside I'm

00:15:49,499 --> 00:15:58,439
not doing it right now I'm just telling

00:15:53,309 --> 00:16:01,859
this to you another piece would be line

00:15:58,439 --> 00:16:05,579
42 we have another problem here open it

00:16:01,859 --> 00:16:08,489
again go there on line 42 it's actually

00:16:05,579 --> 00:16:10,979
wrong it would be on line 45 it's it's

00:16:08,489 --> 00:16:13,409
complicated sometimes with these sec

00:16:10,979 --> 00:16:16,559
traces there sometimes off you would see

00:16:13,409 --> 00:16:19,169
that actually this moldy see like this

00:16:16,559 --> 00:16:20,819
complex other multiplication here's

00:16:19,169 --> 00:16:22,919
actually slow and there's another trick

00:16:20,819 --> 00:16:25,229
when you multiply by yourself you can

00:16:22,919 --> 00:16:28,619
also be faster with the complex number

00:16:25,229 --> 00:16:32,789
just a simple example of how you could

00:16:28,619 --> 00:16:34,769
find problems inside your code just

00:16:32,789 --> 00:16:36,479
looking back at the flame graph just

00:16:34,769 --> 00:16:38,009
there is a simple look you can have at

00:16:36,479 --> 00:16:39,689
the flame graph and tell if there's a

00:16:38,009 --> 00:16:42,299
problem and which kinds of problem is

00:16:39,689 --> 00:16:44,759
there this is kind of the one big

00:16:42,299 --> 00:16:47,159
problem problem which is the good

00:16:44,759 --> 00:16:51,619
problem so if you have one big problem

00:16:47,159 --> 00:16:54,179
you might be easy on finding this

00:16:51,619 --> 00:16:56,789
another problem is the death by a

00:16:54,179 --> 00:16:59,309
thousand cuts where you pay and pay and

00:16:56,789 --> 00:17:01,409
pay but you pay really small amounts

00:16:59,309 --> 00:17:04,620
everywhere distributed over your whole

00:17:01,409 --> 00:17:09,029
College stick and we will see this in

00:17:04,620 --> 00:17:12,509
other implementations so I just show you

00:17:09,029 --> 00:17:15,720
the I have a solution for this and I

00:17:12,509 --> 00:17:18,240
also show you what hotspot shows you for

00:17:15,720 --> 00:17:21,089
the solution here hot spot so I just

00:17:18,240 --> 00:17:23,929
replaced this in the code and I go to

00:17:21,089 --> 00:17:23,929
example number two

00:17:23,980 --> 00:17:31,510
and have perf data here and when I look

00:17:29,620 --> 00:17:34,600
at the summary we had five seconds

00:17:31,510 --> 00:17:37,990
before it now ran for the same even with

00:17:34,600 --> 00:17:40,870
15 it only ran for one point four

00:17:37,990 --> 00:17:42,850
seconds so it became faster and if we

00:17:40,870 --> 00:17:46,210
look at the flame grass there is still

00:17:42,850 --> 00:17:48,220
these plateaus but now I know about

00:17:46,210 --> 00:17:50,500
these plateaus yes their optimal or

00:17:48,220 --> 00:17:53,110
their nearer to what I want to have in

00:17:50,500 --> 00:17:55,150
terms of performance and now we can also

00:17:53,110 --> 00:17:57,460
see some parts of the flame graph that

00:17:55,150 --> 00:17:59,530
are actually becoming more like the

00:17:57,460 --> 00:18:03,419
usual flattened graph which I will show

00:17:59,530 --> 00:18:06,419
you in the next example some three years

00:18:03,419 --> 00:18:06,419
education

00:18:14,180 --> 00:18:27,260
okay here is application called settings

00:18:22,320 --> 00:18:30,120
and this application already has some

00:18:27,260 --> 00:18:32,490
some problems with the unwinding it

00:18:30,120 --> 00:18:34,380
doesn't really find the symbols because

00:18:32,490 --> 00:18:36,750
now I have libraries maybe you see that

00:18:34,380 --> 00:18:40,200
in the binaries here I'm inside my

00:18:36,750 --> 00:18:43,350
graphics driver I'm inside PNG I'm

00:18:40,200 --> 00:18:45,510
inside lip Zee I'm inside cute which

00:18:43,350 --> 00:18:47,730
didn't have like information at this

00:18:45,510 --> 00:18:50,700
point let's see whether we can still

00:18:47,730 --> 00:18:53,520
find something out here okay this is how

00:18:50,700 --> 00:18:57,300
the flame graph looks right now so this

00:18:53,520 --> 00:18:59,310
is how a usual flame graph I would say

00:18:57,300 --> 00:19:00,990
when we go to a customer something is

00:18:59,310 --> 00:19:03,510
slow we don't have all the information

00:19:00,990 --> 00:19:05,340
would look like you have like mixed you

00:19:03,510 --> 00:19:07,020
have symbols and mixed you have no

00:19:05,340 --> 00:19:10,080
information at all and you need your way

00:19:07,020 --> 00:19:12,570
to find your way inside this inside

00:19:10,080 --> 00:19:14,910
these mountains but what you can see is

00:19:12,570 --> 00:19:18,180
that the flame graph you should looks a

00:19:14,910 --> 00:19:20,370
bit more like the like the same flame

00:19:18,180 --> 00:19:22,410
graph which is like lots of small Peaks

00:19:20,370 --> 00:19:23,820
so if you have lots of small Peaks you

00:19:22,410 --> 00:19:25,950
can be assured you don't have the big

00:19:23,820 --> 00:19:33,830
problem problem but you have maybe just

00:19:25,950 --> 00:19:36,780
many small problems problem yeah so here

00:19:33,830 --> 00:19:40,860
we can also turn this flame graph around

00:19:36,780 --> 00:19:43,050
we can go to bottom-up view and see okay

00:19:40,860 --> 00:19:46,140
let's suppose we are on the top of our

00:19:43,050 --> 00:19:48,120
stack where was I and where was I coming

00:19:46,140 --> 00:19:52,410
from when I was at the top of my stack

00:19:48,120 --> 00:19:54,870
so here I see all the calls that ended

00:19:52,410 --> 00:20:01,500
up in my graphics reiver this is during

00:19:54,870 --> 00:20:03,840
rendering and here I see two two paths

00:20:01,500 --> 00:20:06,510
that come from various parts of the code

00:20:03,840 --> 00:20:08,850
that we're loading pngs

00:20:06,510 --> 00:20:11,100
that were inflating the PNG s so maybe

00:20:08,850 --> 00:20:13,380
this was the problem in this case which

00:20:11,100 --> 00:20:15,690
actually was the problem in this case so

00:20:13,380 --> 00:20:18,120
I go there and look is there anything

00:20:15,690 --> 00:20:20,730
like big PM G's that I could replace

00:20:18,120 --> 00:20:23,700
something that I could that I could

00:20:20,730 --> 00:20:25,480
maybe preload during boot or something

00:20:23,700 --> 00:20:28,029
like that which I could improve

00:20:25,480 --> 00:20:29,559
in order to improve the startup

00:20:28,029 --> 00:20:34,539
performance of this application for

00:20:29,559 --> 00:20:36,580
example okay if there's any questions

00:20:34,539 --> 00:20:40,860
please interrupt me there's bonus points

00:20:36,580 --> 00:20:44,799
for interrupting me with questions okay

00:20:40,860 --> 00:20:47,399
let's go to our last example about hot

00:20:44,799 --> 00:20:50,380
spot here you see unwinding happens now

00:20:47,399 --> 00:20:52,360
it takes a long time and sometimes

00:20:50,380 --> 00:20:54,460
you're really spending like a minute or

00:20:52,360 --> 00:20:55,929
two minutes unwinding your information

00:20:54,460 --> 00:20:57,340
because sometimes you just have lots of

00:20:55,929 --> 00:20:59,230
stake information that you need to

00:20:57,340 --> 00:21:02,200
retrieve I mean this is megabytes or

00:20:59,230 --> 00:21:06,639
hundreds of megabytes of data okay and

00:21:02,200 --> 00:21:08,830
this is something that I would call kind

00:21:06,639 --> 00:21:13,299
of a healthy flame graph it's been

00:21:08,830 --> 00:21:15,639
complicated to see you can make it this

00:21:13,299 --> 00:21:19,630
so if you see a flame graph that looks

00:21:15,639 --> 00:21:21,730
like this and you would think okay maybe

00:21:19,630 --> 00:21:23,649
it's it's healthy let's turn it around

00:21:21,730 --> 00:21:26,740
maybe see whether we have a lots of

00:21:23,649 --> 00:21:28,600
small stuff on top of our graph okay

00:21:26,740 --> 00:21:30,370
maybe here's something in fun config

00:21:28,600 --> 00:21:32,740
front-loading maybe I need to look at

00:21:30,370 --> 00:21:35,980
this but other than that I'm quite happy

00:21:32,740 --> 00:21:38,260
with my flame graph and I'm quite okay

00:21:35,980 --> 00:21:42,820
that I like at least with hotspot I

00:21:38,260 --> 00:21:44,980
cannot find any other performance issues

00:21:42,820 --> 00:21:50,590
really fast so just with this one look

00:21:44,980 --> 00:21:52,630
on this flame graph right here the phone

00:21:50,590 --> 00:21:55,210
config we could fix the phone configs

00:21:52,630 --> 00:21:57,909
other than this we have like small parts

00:21:55,210 --> 00:22:01,269
on top or on the bottom with bottom up

00:21:57,909 --> 00:22:03,070
or like these many small Peaks which

00:22:01,269 --> 00:22:06,070
indicate that there isn't that one big

00:22:03,070 --> 00:22:08,110
problem and also not that distributed

00:22:06,070 --> 00:22:10,740
problem because it would show up in the

00:22:08,110 --> 00:22:10,740
bottom of you

00:22:11,040 --> 00:22:21,790
all right so again about hot spot there

00:22:19,540 --> 00:22:24,600
is one thing I liked the most when I go

00:22:21,790 --> 00:22:29,290
to a customer and we have an embedded

00:22:24,600 --> 00:22:33,010
system and I get some information from

00:22:29,290 --> 00:22:37,690
there I can unwind off-target

00:22:33,010 --> 00:22:40,840
you can provide hot spot with all kinds

00:22:37,690 --> 00:22:43,030
of hints where to look for extra

00:22:40,840 --> 00:22:45,820
information for this unwinding as to get

00:22:43,030 --> 00:22:48,460
more and better looking flame graphs and

00:22:45,820 --> 00:22:51,790
flame graphs that don't have that

00:22:48,460 --> 00:22:54,820
question marks inside so you can provide

00:22:51,790 --> 00:22:56,770
your debug path where it's your split

00:22:54,820 --> 00:22:59,050
debug information I just recently

00:22:56,770 --> 00:23:01,300
learned that there's also an elf you

00:22:59,050 --> 00:23:02,920
said it's an strip so if you have some

00:23:01,300 --> 00:23:06,490
debug information that you want to just

00:23:02,920 --> 00:23:08,559
put in a strip library you could also do

00:23:06,490 --> 00:23:11,160
that on target maybe you have space for

00:23:08,559 --> 00:23:13,900
this maybe just if you have an image

00:23:11,160 --> 00:23:16,240
back happening and just the top of your

00:23:13,900 --> 00:23:19,510
stack is unknown maybe you want to find

00:23:16,240 --> 00:23:21,340
out okay just these last frames what is

00:23:19,510 --> 00:23:23,170
happening what is going on there just

00:23:21,340 --> 00:23:24,790
take your debug information and strip it

00:23:23,170 --> 00:23:28,390
on the device and have debug information

00:23:24,790 --> 00:23:31,030
just in your last frames then you can

00:23:28,390 --> 00:23:32,890
provide extra lip paths so this is

00:23:31,030 --> 00:23:34,510
something when you have lips that you're

00:23:32,890 --> 00:23:37,150
developing on your own and they're maybe

00:23:34,510 --> 00:23:39,820
not inside the SDK that the application

00:23:37,150 --> 00:23:44,230
path which hotspot needs looks as well

00:23:39,820 --> 00:23:47,290
and then the SIS route which is just

00:23:44,230 --> 00:23:49,960
yeah just SDKs route and which is also

00:23:47,290 --> 00:23:51,990
important is the kernel symbols which

00:23:49,960 --> 00:23:56,140
you can get out of the proc file system

00:23:51,990 --> 00:23:57,970
inside your embedded system so after

00:23:56,140 --> 00:24:02,290
you've done your performance measurement

00:23:57,970 --> 00:24:03,130
just take all your chaos Sims from proc

00:24:02,290 --> 00:24:05,620
a autism's

00:24:03,130 --> 00:24:07,840
get them into a file and also put them

00:24:05,620 --> 00:24:11,050
on your device for later unwinding so

00:24:07,840 --> 00:24:13,179
you can see even kernel information so

00:24:11,050 --> 00:24:14,740
you see okay some kernel worker or

00:24:13,179 --> 00:24:19,870
something like that was actually slow

00:24:14,740 --> 00:24:23,440
there okay that's it for hot spot again

00:24:19,870 --> 00:24:28,000
please go to github

00:24:23,440 --> 00:24:30,730
download hotspot tried out it's free

00:24:28,000 --> 00:24:32,800
please contribute to hotspot also we

00:24:30,730 --> 00:24:38,100
recently fixed a big issue with

00:24:32,800 --> 00:24:41,350
unwinding so also for newer newer

00:24:38,100 --> 00:24:45,460
compilers it should be working a bit

00:24:41,350 --> 00:24:47,350
more stable now okay now about the

00:24:45,460 --> 00:24:50,680
second part I want to talk about which

00:24:47,350 --> 00:24:53,410
is LT TNG Linux racing towards next

00:24:50,680 --> 00:24:59,940
generations nothing that we invented it

00:24:53,410 --> 00:25:03,970
comes from the I think officio s and

00:24:59,940 --> 00:25:07,930
Ericsson site and it's a great source of

00:25:03,970 --> 00:25:10,900
information for tracing so tracing

00:25:07,930 --> 00:25:11,710
information about your kernel that you

00:25:10,900 --> 00:25:15,670
can get there

00:25:11,710 --> 00:25:17,650
problem is it's only for the camera so

00:25:15,670 --> 00:25:19,750
it's not really a lots of user space

00:25:17,650 --> 00:25:22,810
libraries that are actually existing

00:25:19,750 --> 00:25:24,220
that where you can look at the same time

00:25:22,810 --> 00:25:26,320
what is happening in my user space

00:25:24,220 --> 00:25:28,090
application and what is then happening

00:25:26,320 --> 00:25:31,870
in my kernel at the same time and we

00:25:28,090 --> 00:25:34,180
want to change this so this is just

00:25:31,870 --> 00:25:37,870
backup sites I can also show you an a

00:25:34,180 --> 00:25:41,590
tool which we also did not develop here

00:25:37,870 --> 00:25:44,200
it's called trace comm-pass and with

00:25:41,590 --> 00:25:47,440
trace compiles you can see like inspect

00:25:44,200 --> 00:25:48,790
your traces a bit better so now we are

00:25:47,440 --> 00:25:50,890
talking about a different kind of

00:25:48,790 --> 00:25:54,550
performance analysis right before we had

00:25:50,890 --> 00:25:56,140
this kind of collection of how many

00:25:54,550 --> 00:25:57,850
times was I in this function like

00:25:56,140 --> 00:26:00,430
everything was summed up but now I have

00:25:57,850 --> 00:26:04,530
detailed informations with time stone we

00:26:00,430 --> 00:26:04,530
can see that when I start trace compass

00:26:04,620 --> 00:26:15,580
converse hmm it's kind of an eclipse

00:26:09,120 --> 00:26:18,370
program open source and trace compose

00:26:15,580 --> 00:26:21,670
allows you to visualize the so-called

00:26:18,370 --> 00:26:26,320
CTF information which is a common

00:26:21,670 --> 00:26:29,680
tracing format which I think not only at

00:26:26,320 --> 00:26:32,320
Eng but also other tracing tools support

00:26:29,680 --> 00:26:35,230
so what you can do here in what

00:26:32,320 --> 00:26:37,060
like surprises me most all the time is

00:26:35,230 --> 00:26:40,330
you can zoom and kind of infinitely

00:26:37,060 --> 00:26:42,850
enter your running system so you can go

00:26:40,330 --> 00:26:45,280
here and say okay I want to know what

00:26:42,850 --> 00:26:48,400
it's happening here and you can go here

00:26:45,280 --> 00:26:51,280
you say okay here's an iPod wait and you

00:26:48,400 --> 00:26:53,920
can go further here like this is my X or

00:26:51,280 --> 00:26:56,980
ik the red part means okay I'm waiting

00:26:53,920 --> 00:27:00,190
for some things actually yeah wait for

00:26:56,980 --> 00:27:03,030
CPU and here I can like step through all

00:27:00,190 --> 00:27:06,640
the SIS cards that are happening inside

00:27:03,030 --> 00:27:08,110
the kernel partly I see all the kernel

00:27:06,640 --> 00:27:10,480
workers for example is this too small

00:27:08,110 --> 00:27:14,830
maybe should I increase the size okay

00:27:10,480 --> 00:27:16,660
okay and here I have an exact listing of

00:27:14,830 --> 00:27:19,270
what's what's going on here like this

00:27:16,660 --> 00:27:21,730
eople wait I don't just have the

00:27:19,270 --> 00:27:23,860
information that there is an EPO way or

00:27:21,730 --> 00:27:26,470
like okay here's the skates quick switch

00:27:23,860 --> 00:27:28,240
like because I was waiting before and

00:27:26,470 --> 00:27:30,280
not waiting anymore first I get the

00:27:28,240 --> 00:27:33,760
event about the scheduler that I was now

00:27:30,280 --> 00:27:36,100
switched on and I could see from from

00:27:33,760 --> 00:27:39,460
which process I was switched I think

00:27:36,100 --> 00:27:41,410
this is the idle process here and yeah

00:27:39,460 --> 00:27:43,150
you can you can see all kinds of

00:27:41,410 --> 00:27:51,400
information here which is got what is

00:27:43,150 --> 00:27:54,100
going on in your corner and it's just

00:27:51,400 --> 00:27:57,910
too bad that you cannot have user space

00:27:54,100 --> 00:28:01,720
tracing here up until now because ATT

00:27:57,910 --> 00:28:05,500
and G also supports user space tracing

00:28:01,720 --> 00:28:10,440
hmm and it's also kind of a low-level

00:28:05,500 --> 00:28:15,610
thing to have inside your application so

00:28:10,440 --> 00:28:16,780
it's not only like it's low overhead I'm

00:28:15,610 --> 00:28:19,060
sorry

00:28:16,780 --> 00:28:20,620
so why is it low overhead because you

00:28:19,060 --> 00:28:22,600
can have it outside and it's actually

00:28:20,620 --> 00:28:25,780
using a fast buffer either inside the

00:28:22,600 --> 00:28:28,600
corner or inside your user space to

00:28:25,780 --> 00:28:31,630
store all this information so there's

00:28:28,600 --> 00:28:33,640
several ways of having trades point

00:28:31,630 --> 00:28:35,770
providers I tell you a bit more about

00:28:33,640 --> 00:28:38,410
this in a second inside your application

00:28:35,770 --> 00:28:42,550
so either you compile it in on compile

00:28:38,410 --> 00:28:45,070
time or on kind of ones start on run

00:28:42,550 --> 00:28:45,410
time you can LD preload it inside your

00:28:45,070 --> 00:28:48,320
application

00:28:45,410 --> 00:28:51,260
or even insight on runtime during the

00:28:48,320 --> 00:28:53,000
application you can deal open the TP

00:28:51,260 --> 00:28:55,910
provider the trace point provider and

00:28:53,000 --> 00:28:58,760
have the information also in as in as

00:28:55,910 --> 00:29:00,830
well so if you don't have the TP

00:28:58,760 --> 00:29:02,840
provider in usually the trace points

00:29:00,830 --> 00:29:04,520
cost you nothing but if you have them in

00:29:02,840 --> 00:29:07,160
they cost you a little bit just putting

00:29:04,520 --> 00:29:11,090
these information inside an offer okay

00:29:07,160 --> 00:29:15,230
so what would we do what did we do in

00:29:11,090 --> 00:29:18,100
cute and cute we edit a tool called

00:29:15,230 --> 00:29:23,270
trace gen which kind of a cogeneration

00:29:18,100 --> 00:29:25,940
generating tool which adds these trace

00:29:23,270 --> 00:29:29,390
points to interesting points inside the

00:29:25,940 --> 00:29:32,480
cute library for example here we had

00:29:29,390 --> 00:29:34,280
this PNG loading which was slow so here

00:29:32,480 --> 00:29:36,590
I have this Q image reader read before

00:29:34,280 --> 00:29:39,680
reading and read after reading so I can

00:29:36,590 --> 00:29:43,190
measure okay exactly which image was

00:29:39,680 --> 00:29:44,540
slow what what maybe can I improve maybe

00:29:43,190 --> 00:29:47,000
I can talk to my designers and stuff

00:29:44,540 --> 00:29:49,430
like that so here's all the information

00:29:47,000 --> 00:29:53,200
the other trace points that we have and

00:29:49,430 --> 00:30:01,550
trace edge trace gen goes ahead and

00:29:53,200 --> 00:30:03,110
creates this create these functions it's

00:30:01,550 --> 00:30:05,510
actually macros but it creates these

00:30:03,110 --> 00:30:07,490
functions which you can then compile to

00:30:05,510 --> 00:30:10,700
this object files trace points which you

00:30:07,490 --> 00:30:15,770
can then use inside your application ok

00:30:10,700 --> 00:30:17,150
so here it's for this image reader you

00:30:15,770 --> 00:30:18,830
might ask yourself what is different

00:30:17,150 --> 00:30:20,840
between transporting to trace point it's

00:30:18,830 --> 00:30:23,900
just one asks if it's a neighbor the

00:30:20,840 --> 00:30:26,720
other one does it anyways so if it snows

00:30:23,900 --> 00:30:29,240
trace points are enabled and the third

00:30:26,720 --> 00:30:31,520
one is just do I have the trace point ok

00:30:29,240 --> 00:30:34,970
and here is how it looks like inside

00:30:31,520 --> 00:30:36,620
cute I have this macro cue trace and I

00:30:34,970 --> 00:30:39,920
have this cue imagereader read before

00:30:36,620 --> 00:30:43,970
reading and I also pass arguments like

00:30:39,920 --> 00:30:47,330
the file name and with this information

00:30:43,970 --> 00:30:50,650
I can now go ahead back to my trace

00:30:47,330 --> 00:30:53,600
compass and see that I don't only have

00:30:50,650 --> 00:30:54,950
kernel information but if I go and

00:30:53,600 --> 00:30:59,090
filter for my application which was

00:30:54,950 --> 00:31:05,930
called chip here maybe and

00:30:59,090 --> 00:31:09,890
check ah and then just check she uses

00:31:05,930 --> 00:31:11,270
based racing and everything else you

00:31:09,890 --> 00:31:18,110
want to check maybe some kind of

00:31:11,270 --> 00:31:21,980
information and so on then we can see

00:31:18,110 --> 00:31:24,980
here that we have some information about

00:31:21,980 --> 00:31:29,900
the kernel like this M protect

00:31:24,980 --> 00:31:32,450
information but additionally to this we

00:31:29,900 --> 00:31:46,450
should have some user space information

00:31:32,450 --> 00:31:46,450
as well just start up

00:31:47,560 --> 00:31:54,660
it's just so many things that are going

00:31:50,560 --> 00:31:58,090
on here here you can see for example

00:31:54,660 --> 00:31:58,750
user space tracing cute core tomato

00:31:58,090 --> 00:32:01,930
object

00:31:58,750 --> 00:32:05,560
active and signal so some signal was

00:32:01,930 --> 00:32:08,200
just processed inside cute we know that

00:32:05,560 --> 00:32:10,000
it still we should improve upon this

00:32:08,200 --> 00:32:11,530
like sender has just given you with an

00:32:10,000 --> 00:32:13,330
address there should be a class name

00:32:11,530 --> 00:32:15,280
something like there was this class

00:32:13,330 --> 00:32:16,740
sending me something and then I waited

00:32:15,280 --> 00:32:20,560
for ages and okona

00:32:16,740 --> 00:32:24,370
but yeah this is the start that we are

00:32:20,560 --> 00:32:26,980
providing for LTC mga coming inside cute

00:32:24,370 --> 00:32:29,200
and with these trace points that we're

00:32:26,980 --> 00:32:31,750
introducing with this trace gem code

00:32:29,200 --> 00:32:33,730
generator we're not just having antigen

00:32:31,750 --> 00:32:36,640
PNG information which you can use on

00:32:33,730 --> 00:32:39,340
Linux but also etw information which you

00:32:36,640 --> 00:32:42,580
can use on Windows with these nice UI

00:32:39,340 --> 00:32:45,850
for etw for performance analysis that

00:32:42,580 --> 00:32:48,250
looks like this like a mix of hotspot

00:32:45,850 --> 00:32:51,160
and just trace compares which I just

00:32:48,250 --> 00:32:53,500
showed you but on Windows so if you're

00:32:51,160 --> 00:32:54,930
running Windows you can also look inside

00:32:53,500 --> 00:32:59,020
this ok

00:32:54,930 --> 00:33:03,790
as in 5.12 you have this what I just

00:32:59,020 --> 00:33:05,920
show shown to you inside cute so even if

00:33:03,790 --> 00:33:07,960
you have a like a lower cute version if

00:33:05,920 --> 00:33:10,960
you are able to run it with cute 5 to 12

00:33:07,960 --> 00:33:14,170
just try it out and please give us

00:33:10,960 --> 00:33:15,970
feedback on how you want more choice

00:33:14,170 --> 00:33:19,240
points and which trace points you really

00:33:15,970 --> 00:33:22,390
want to have inside cute ok just

00:33:19,240 --> 00:33:25,660
summarize how is edit Eng also different

00:33:22,390 --> 00:33:29,850
from path first I showed you perf and

00:33:25,660 --> 00:33:33,310
hotspot and I showed you how sampling

00:33:29,850 --> 00:33:36,010
kind of is a stopwatch next to your CPU

00:33:33,310 --> 00:33:37,990
stopping your CPU from time to time and

00:33:36,010 --> 00:33:40,570
writing down where you are in the stack

00:33:37,990 --> 00:33:42,460
trace and then you can see where you are

00:33:40,570 --> 00:33:46,030
like where you were most of the time

00:33:42,460 --> 00:33:48,210
when this stopwatch was taken and trace

00:33:46,030 --> 00:33:51,550
points you can have a trace point file

00:33:48,210 --> 00:33:53,320
edit this add this to your code and then

00:33:51,550 --> 00:33:56,470
have detailed information about your

00:33:53,320 --> 00:33:59,920
trace points with LT TNG and inspect

00:33:56,470 --> 00:34:00,730
these events up to the nanosecond inside

00:33:59,920 --> 00:34:05,620
your

00:34:00,730 --> 00:34:07,260
application okay and that's all I want

00:34:05,620 --> 00:34:10,600
to thank you for your attention and

00:34:07,260 --> 00:34:12,880
maybe we can have a small discussion on

00:34:10,600 --> 00:34:14,770
performance issues you had and maybe how

00:34:12,880 --> 00:34:16,720
you solve them or if there is any

00:34:14,770 --> 00:34:18,220
question feel free to come to the

00:34:16,720 --> 00:34:42,850
microphones here in the front

00:34:18,220 --> 00:34:46,150
Thanks okay it sounds really nice

00:34:42,850 --> 00:34:47,830
feature my question is on the other side

00:34:46,150 --> 00:34:52,900
of the boundary because I'm Colonel

00:34:47,830 --> 00:34:55,840
develop or would I use that for

00:34:52,900 --> 00:34:59,020
debugging C programs is there pulling

00:34:55,840 --> 00:35:01,780
for tracing points we do C program

00:34:59,020 --> 00:35:05,800
yeah there's there's user space tools

00:35:01,780 --> 00:35:09,100
for LT TNG for C programs just go to the

00:35:05,800 --> 00:35:11,890
LT G&G it.org webpage they have really

00:35:09,100 --> 00:35:14,530
great information on this and they tell

00:35:11,890 --> 00:35:16,530
you how to add simple trace F which is

00:35:14,530 --> 00:35:21,580
kind of a printf that goes inside these

00:35:16,530 --> 00:35:23,380
tracing information or how to add real

00:35:21,580 --> 00:35:27,280
trace points which you can see as these

00:35:23,380 --> 00:35:33,960
bars which I've just shown you so a TT

00:35:27,280 --> 00:35:39,310
in G dot org I just look for user space

00:35:33,960 --> 00:35:41,710
C and then you will see how to get the

00:35:39,310 --> 00:35:44,470
user space tracing also for see it's

00:35:41,710 --> 00:35:47,860
just how to get these information how to

00:35:44,470 --> 00:35:52,270
like get it inside okay and one question

00:35:47,860 --> 00:35:56,200
is perfect honest if back-end

00:35:52,270 --> 00:35:59,290
infrastructure used to trace the

00:35:56,200 --> 00:36:01,900
goes no no no no they're not at all yeah

00:35:59,290 --> 00:36:04,770
good question good question for example

00:36:01,900 --> 00:36:06,850
I think tomorrow a few hours earlier

00:36:04,770 --> 00:36:07,780
exactly this room there will be talk

00:36:06,850 --> 00:36:10,990
about ebps

00:36:07,780 --> 00:36:13,510
which is now like the rising star in the

00:36:10,990 --> 00:36:16,510
world of performance analysis so people

00:36:13,510 --> 00:36:18,880
go right each small EVP F programs or BB

00:36:16,510 --> 00:36:23,740
PPF programs put them into the kernel

00:36:18,880 --> 00:36:27,190
and collect information there to for

00:36:23,740 --> 00:36:29,320
example find out there iOS use or

00:36:27,190 --> 00:36:30,970
something like that so count stuff every

00:36:29,320 --> 00:36:33,460
time something happened in the kernel

00:36:30,970 --> 00:36:36,430
just count stuff or selectively filter

00:36:33,460 --> 00:36:40,720
for certain events using these small BPF

00:36:36,430 --> 00:36:43,300
programs so also this read up on a Brent

00:36:40,720 --> 00:36:47,140
Gregg's webpage he is talking a lot

00:36:43,300 --> 00:36:48,550
about EBP F&B PF and recent times and of

00:36:47,140 --> 00:36:53,410
course there's other sources of

00:36:48,550 --> 00:36:55,660
information I think like all these old F

00:36:53,410 --> 00:36:57,700
trays and so on days of the office list

00:36:55,660 --> 00:36:59,680
still work and are a great source of

00:36:57,700 --> 00:37:02,710
information I just wanted to show you

00:36:59,680 --> 00:37:05,859
ATG ng and perf as two examples of this

00:37:02,710 --> 00:37:07,180
great that you again told me that

00:37:05,859 --> 00:37:08,740
there's actually more and please go

00:37:07,180 --> 00:37:12,600
ahead and look at everything days yeah

00:37:08,740 --> 00:37:17,250
that's almost really great feature okay

00:37:12,600 --> 00:37:17,250
are there another other questions

00:37:19,560 --> 00:37:26,290
if not then thanks again and enjoy the

00:37:24,160 --> 00:37:31,389
rest of the conference

00:37:26,290 --> 00:37:31,389

YouTube URL: https://www.youtube.com/watch?v=PO9jnbaOqEA


