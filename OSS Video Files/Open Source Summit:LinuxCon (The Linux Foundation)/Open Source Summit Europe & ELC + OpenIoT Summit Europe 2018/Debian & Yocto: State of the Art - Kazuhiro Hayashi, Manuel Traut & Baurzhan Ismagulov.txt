Title: Debian & Yocto: State of the Art - Kazuhiro Hayashi, Manuel Traut & Baurzhan Ismagulov
Publication date: 2018-10-25
Playlist: Open Source Summit Europe & ELC + OpenIoT Summit Europe 2018
Description: 
	Debian & Yocto: State of the Art - Kazuhiro Hayashi, Toshiba Corporation & Manuel Traut, Linutronix GmbH & Baurzhan Ismagulov

For building Linux-based products, combining benefits of existing distributions and tools becomes essential. Debian is the platform of choice for industrial and other products requiring continuous security updates and 10+ years of maintenance. Product builders need an integrated, flexible, easy-to-use toolkit for building product applications, patching Debian packages, and generating and customizing the root filesystem image.

ELBE, Isar, and Deby use Debian as the base system. The projects are working together towards a common solution. The approach is to provide tooling for package building, customization and release management based on Yocto build tools, structure, and workflows. In this talk, we will introduce why the projects joined efforts, what kind of functions are required for satisfying product demands, and how the functionality could be implemented with bitbake recipes. 

About Kazuhiro Hayashi
orks at TOSHIBA Corporation as a Software Engineer since 2010. The main part of his work is to develop Linux for various industrial embedded products. His another focus is to provide a common Linux distribution and its build infrastructure for effective product development and management by sharing existing resources and issues. Recently, he is maintaining the distro as an open source “Deby” (https://github.com/meta-debian/meta-debian) to improve its functionality by reflecting world-wide demands and keeping better affinity with existing communities such as Debian. 

About Baurzhan Ismagulov
ilbers GmbH

About Manuel Traut
Manuel works as Software Specialist at Linutronix GmbH since 2007. Over the years he gained experience in building Linux BSPs with different methods and toolkits. With this knowledge in mind he currently maintains the embedded linux build environment (ELBE http://elbe-rfs.org). ELBE reuses as much as possible from the Debian project. He regularly acts as Trainer for various embedded Linux topics (Yocto, Debian, Kernel Development, ...) and has given Linux-related talks at RTLWS, LinuxTag and Chemnitzer Linuxtage and Embedded Linux Conference Europe.
Captions: 
	00:00:00,620 --> 00:00:07,639
afternoon everyone secure bargaining

00:00:03,720 --> 00:00:12,120
this presentation today so we try to

00:00:07,639 --> 00:00:16,320
explain introduce some activities about

00:00:12,120 --> 00:00:21,650
Debian in New York there are three

00:00:16,320 --> 00:00:27,359
speakers in this session one we're from

00:00:21,650 --> 00:00:30,269
Lena tonics and borgia from ebooks and

00:00:27,359 --> 00:00:34,440
I'm a hero or working in Toshiba

00:00:30,269 --> 00:00:38,489
Corporation we are just walking for us

00:00:34,440 --> 00:00:43,290
some activities related to Debian Yocto

00:00:38,489 --> 00:00:45,750
and we are developing as customer Linux

00:00:43,290 --> 00:00:50,960
environment for the indirect product so

00:00:45,750 --> 00:00:50,960
we try to introduce activities today

00:00:51,500 --> 00:01:01,350
first his ascenders and first tried to

00:00:57,109 --> 00:01:03,149
explain some background of this

00:01:01,350 --> 00:01:08,280
presentation

00:01:03,149 --> 00:01:12,860
yeah we are product developers and there

00:01:08,280 --> 00:01:18,560
are many options in the world to create

00:01:12,860 --> 00:01:25,110
Linux environment for every product and

00:01:18,560 --> 00:01:29,220
we are already half individual solution

00:01:25,110 --> 00:01:31,909
in each company so first I'd like to

00:01:29,220 --> 00:01:36,780
introduce such existing approaches and

00:01:31,909 --> 00:01:40,890
second I'd like to show why we are

00:01:36,780 --> 00:01:44,490
joined and factor we are thinking about

00:01:40,890 --> 00:01:48,270
and what is the common goals or

00:01:44,490 --> 00:01:52,290
requirements and so on and it is open

00:01:48,270 --> 00:01:54,689
source project so to collect as many

00:01:52,290 --> 00:02:00,420
feedback as possible raising very

00:01:54,689 --> 00:02:06,030
important force that is why we are

00:02:00,420 --> 00:02:08,179
making this presentation so fast in

00:02:06,030 --> 00:02:12,560
product development

00:02:08,179 --> 00:02:14,030
we usually defined Linux based system

00:02:12,560 --> 00:02:18,620
but alliterate

00:02:14,030 --> 00:02:21,590
not enough to achieve the whole

00:02:18,620 --> 00:02:25,930
requirement in the product for example

00:02:21,590 --> 00:02:32,060
there are many customization required

00:02:25,930 --> 00:02:35,689
sometimes and also we need to add some

00:02:32,060 --> 00:02:38,269
application for each product and

00:02:35,689 --> 00:02:45,819
sometimes it's proved some pasar party

00:02:38,269 --> 00:02:52,099
software dependency in in development

00:02:45,819 --> 00:02:57,760
yeah we usually need to provide ready to

00:02:52,099 --> 00:03:00,859
use image for example only one a single

00:02:57,760 --> 00:03:02,689
binary file which includes both water

00:03:00,859 --> 00:03:07,069
and color and the root of our system and

00:03:02,689 --> 00:03:11,959
so on also the whole development process

00:03:07,069 --> 00:03:16,400
should be repeatable for the led the

00:03:11,959 --> 00:03:22,220
rock path in other words all development

00:03:16,400 --> 00:03:27,709
information details need to be kept in

00:03:22,220 --> 00:03:30,109
the future for for the future and the

00:03:27,709 --> 00:03:35,449
such kind of process development process

00:03:30,109 --> 00:03:43,280
should be very clear for everyone and of

00:03:35,449 --> 00:03:47,269
course we need to you need to use very

00:03:43,280 --> 00:03:51,250
stable and maintainable packages using

00:03:47,269 --> 00:03:54,680
winter wall and was a long time

00:03:51,250 --> 00:03:56,300
maintenance features is very important

00:03:54,680 --> 00:04:01,500
especially

00:03:56,300 --> 00:04:03,540
industrial product and rice comparison

00:04:01,500 --> 00:04:07,950
and so on and many features are required

00:04:03,540 --> 00:04:12,840
in the product developments so what do

00:04:07,950 --> 00:04:15,330
we need to do actually first at least we

00:04:12,840 --> 00:04:18,600
select the appropriate bin system it is

00:04:15,330 --> 00:04:21,450
in other words Linux distribution and

00:04:18,600 --> 00:04:25,170
also to provide some kind of tools or

00:04:21,450 --> 00:04:29,400
lessons framework to effectively manage

00:04:25,170 --> 00:04:33,830
the base system it sometimes becomes a

00:04:29,400 --> 00:04:37,260
be required period system or framework

00:04:33,830 --> 00:04:41,840
to customize or maintain effectively

00:04:37,260 --> 00:04:47,070
maintain product resources one option is

00:04:41,840 --> 00:04:51,840
division we're now in our distribution

00:04:47,070 --> 00:04:55,770
and for from long time ago it supports

00:04:51,840 --> 00:04:59,700
many multi-core CPU architectures and

00:04:55,770 --> 00:05:03,420
also recently support across 2g in

00:04:59,700 --> 00:05:07,080
efficient inference cost of Debian

00:05:03,420 --> 00:05:11,940
storage and many security updates over

00:05:07,080 --> 00:05:16,470
over and Debian LTS team fortunately

00:05:11,940 --> 00:05:20,070
support long-term maintenance process

00:05:16,470 --> 00:05:25,290
two years in total five years or seven

00:05:20,070 --> 00:05:29,400
specific packages so support it and many

00:05:25,290 --> 00:05:37,080
other features of airport is useful

00:05:29,400 --> 00:05:40,140
products when we need to integrate twist

00:05:37,080 --> 00:05:44,970
application or some support software

00:05:40,140 --> 00:05:48,230
into the product into the Debian system

00:05:44,970 --> 00:05:51,960
when we are creating some products and

00:05:48,230 --> 00:05:54,710
also need to customize some packages I

00:05:51,960 --> 00:05:59,780
have Debian package it is very stable

00:05:54,710 --> 00:06:02,420
and well tested but sometimes we need to

00:05:59,780 --> 00:06:06,830
pop it in changing some configuration or

00:06:02,420 --> 00:06:09,200
something and also in Everett word

00:06:06,830 --> 00:06:14,410
sometimes need to support the very

00:06:09,200 --> 00:06:19,100
latest SOC architecture or something and

00:06:14,410 --> 00:06:22,930
your top project is a very famous Indian

00:06:19,100 --> 00:06:28,130
War two days it has a very strong

00:06:22,930 --> 00:06:31,580
integration to be big or and it's very

00:06:28,130 --> 00:06:35,440
very flexible we can modify everything

00:06:31,580 --> 00:06:38,840
by just modifying the recipes and

00:06:35,440 --> 00:06:42,260
layering function is very useful meaning

00:06:38,840 --> 00:06:45,919
to explain about it later right

00:06:42,260 --> 00:06:49,580
and SDK start our SDK generation is also

00:06:45,919 --> 00:06:53,090
supported and new architecture user a

00:06:49,580 --> 00:06:57,200
property by associate benders metal

00:06:53,090 --> 00:07:02,870
areas but sometimes it takes very long

00:06:57,200 --> 00:07:06,620
time to generate many images and a long

00:07:02,870 --> 00:07:11,150
time support is also required if we are

00:07:06,620 --> 00:07:14,840
private to the product ever went so I'd

00:07:11,150 --> 00:07:17,210
like to change the speaker you okay so

00:07:14,840 --> 00:07:19,550
let me continue I have a microphone here

00:07:17,210 --> 00:07:22,160
thanks I want to present you the

00:07:19,550 --> 00:07:26,840
existing projects that are more or less

00:07:22,160 --> 00:07:29,870
fit into this area so we have it

00:07:26,840 --> 00:07:33,440
identified three projects that are using

00:07:29,870 --> 00:07:34,479
some combination of bitbake Debian

00:07:33,440 --> 00:07:38,360
already

00:07:34,479 --> 00:07:40,190
these are naita LMA which will be

00:07:38,360 --> 00:07:43,160
presented by me because I'm also the

00:07:40,190 --> 00:07:46,789
maintainer of this thing that we have is

00:07:43,160 --> 00:07:49,580
our portion must maintain of either and

00:07:46,789 --> 00:07:52,190
we have meta debian represented by Kazu

00:07:49,580 --> 00:07:54,470
so we will give you a quick overview

00:07:52,190 --> 00:07:57,890
about the three approaches that are

00:07:54,470 --> 00:08:00,380
already existing of course there are

00:07:57,890 --> 00:08:02,720
some other projects out there that are

00:08:00,380 --> 00:08:04,970
using Debian and embedded word for

00:08:02,720 --> 00:08:07,370
example maybe you have heard the talk

00:08:04,970 --> 00:08:10,260
yesterday about demos

00:08:07,370 --> 00:08:13,340
there also is a really huge

00:08:10,260 --> 00:08:16,830
star of tools and the Debian Viki like

00:08:13,340 --> 00:08:19,170
tools like VMD bootstrap PMDB - and

00:08:16,830 --> 00:08:22,500
there are much more tools for using

00:08:19,170 --> 00:08:25,380
Debian an embedded environment and for

00:08:22,500 --> 00:08:28,050
helping you creating images with Debian

00:08:25,380 --> 00:08:32,150
but none of those other projects we

00:08:28,050 --> 00:08:35,840
identified have some bitbake interface

00:08:32,150 --> 00:08:39,150
so let me just explain you about

00:08:35,840 --> 00:08:41,640
something about every because air is the

00:08:39,150 --> 00:08:45,570
base system of this nita

00:08:41,640 --> 00:08:49,430
everything is there anybody in here who

00:08:45,570 --> 00:08:54,210
has heard something of Elbe before oh

00:08:49,430 --> 00:08:57,390
that's nice so you might know that an

00:08:54,210 --> 00:09:02,330
elevate nearly everything is specified

00:08:57,390 --> 00:09:05,340
in a single XML file and this XML file

00:09:02,330 --> 00:09:08,520
is put into something we call the innate

00:09:05,340 --> 00:09:12,000
VM and inside the in atrium we have two

00:09:08,520 --> 00:09:14,220
lb demon and the lb demon basically uses

00:09:12,000 --> 00:09:17,370
tools from Debian like the bootstrap

00:09:14,220 --> 00:09:20,220
like Python app total like the P builder

00:09:17,370 --> 00:09:23,520
to interpret the information from XML

00:09:20,220 --> 00:09:26,370
and generate the output that can be an

00:09:23,520 --> 00:09:29,270
image that can be an SDK and we also

00:09:26,370 --> 00:09:31,680
care about providing license

00:09:29,270 --> 00:09:35,670
informations and source files you need

00:09:31,680 --> 00:09:38,040
to give to the customer so recently we

00:09:35,670 --> 00:09:40,800
added into the testing version also some

00:09:38,040 --> 00:09:43,190
kind of variant management that you can

00:09:40,800 --> 00:09:46,830
build different variants that are

00:09:43,190 --> 00:09:50,850
mentioned in the XML file but a lot of

00:09:46,830 --> 00:09:53,850
people are afraid of familiar with the

00:09:50,850 --> 00:09:58,410
bitbake tool and so we decided to also

00:09:53,850 --> 00:10:01,560
provide bitbake interface for meta 4lb

00:09:58,410 --> 00:10:03,110
and this one is called meta lb the

00:10:01,560 --> 00:10:06,720
important thing what you need to

00:10:03,110 --> 00:10:09,300
understand if you use this basically all

00:10:06,720 --> 00:10:12,210
the things we have there in the layers

00:10:09,300 --> 00:10:17,160
and what bitbake is actually doing is

00:10:12,210 --> 00:10:19,140
just parsing the config files from the

00:10:17,160 --> 00:10:21,660
different bitbake layers and combining

00:10:19,140 --> 00:10:25,720
down the information and Chan

00:10:21,660 --> 00:10:29,110
Elva xml file and then we just trigger

00:10:25,720 --> 00:10:32,470
lb builds and LBP builder runs and in a

00:10:29,110 --> 00:10:34,899
vm creation and so on from pit bake so

00:10:32,470 --> 00:10:39,760
basically it's just a wrapper around

00:10:34,899 --> 00:10:43,079
element nothing more so then we thought

00:10:39,760 --> 00:10:46,570
about yeah what can be improved and

00:10:43,079 --> 00:10:49,269
there are some reasons for us to have a

00:10:46,570 --> 00:10:51,820
better system and one is if you think

00:10:49,269 --> 00:10:55,630
about bootstrapping new architectures

00:10:51,820 --> 00:10:57,700
because there are people who do who have

00:10:55,630 --> 00:11:01,209
an architecture that is currently not

00:10:57,700 --> 00:11:04,240
supported by Debian and therefore

00:11:01,209 --> 00:11:07,440
bitbake would be also may be nice option

00:11:04,240 --> 00:11:10,740
to produce a new chillip see a new

00:11:07,440 --> 00:11:13,899
chi-chi-chi zz4 for new architecture

00:11:10,740 --> 00:11:18,279
trellis newer versions also another

00:11:13,899 --> 00:11:20,860
thing is we use I for binary packages or

00:11:18,279 --> 00:11:23,829
we built them natively and a qmu

00:11:20,860 --> 00:11:25,990
emulated P builder and this building is

00:11:23,829 --> 00:11:30,399
very slow and what we'd like to support

00:11:25,990 --> 00:11:33,610
is cross building packages and that's

00:11:30,399 --> 00:11:42,279
also a reason why we like to join the

00:11:33,610 --> 00:11:45,730
EDP in a word portion who could present

00:11:42,279 --> 00:11:49,540
you easier now yeah Thank You Man

00:11:45,730 --> 00:11:52,959
so either is a package builder and an

00:11:49,540 --> 00:11:56,110
image generator what we do is basically

00:11:52,959 --> 00:11:59,320
the same steps like install base system

00:11:56,110 --> 00:12:03,300
take our product own applications build

00:11:59,320 --> 00:12:07,180
them in a Debian way from source code

00:12:03,300 --> 00:12:10,810
ideal deionised and also our

00:12:07,180 --> 00:12:17,380
customizations and put this all together

00:12:10,810 --> 00:12:21,390
in the installed base system and create

00:12:17,380 --> 00:12:25,480
one ready to use image out of that

00:12:21,390 --> 00:12:29,650
either took the path of being

00:12:25,480 --> 00:12:33,270
let's say almost pure debian-based this

00:12:29,650 --> 00:12:38,950
means that we use Debian binary packages

00:12:33,270 --> 00:12:41,710
as a base system we use Debian tools

00:12:38,950 --> 00:12:46,630
like typically built a cat repair Pro

00:12:41,710 --> 00:12:50,680
apt the bootstrap to do all the internal

00:12:46,630 --> 00:12:52,510
stuff for building packages and managing

00:12:50,680 --> 00:12:56,560
app depositories managing dependencies

00:12:52,510 --> 00:13:02,010
and creating the root filesystem

00:12:56,560 --> 00:13:04,440
and we use bitbake as an efficient

00:13:02,010 --> 00:13:08,650
package build dispatcher

00:13:04,440 --> 00:13:13,900
so that packages are built according to

00:13:08,650 --> 00:13:19,000
their dependencies in parallel or in the

00:13:13,900 --> 00:13:23,250
right order important thing is dr. like

00:13:19,000 --> 00:13:26,290
layering to ensure the right workflow

00:13:23,250 --> 00:13:30,910
between hardware vendors middleware

00:13:26,290 --> 00:13:34,540
suppliers and the end application

00:13:30,910 --> 00:13:38,710
developer so if you are interested we

00:13:34,540 --> 00:13:42,850
have live demo today evening at the

00:13:38,710 --> 00:13:47,620
technical showcase so here you can see

00:13:42,850 --> 00:13:52,740
the basic structure of either either

00:13:47,620 --> 00:13:56,230
self is a thin small layer that

00:13:52,740 --> 00:14:00,610
orchestrates the building of packages

00:13:56,230 --> 00:14:04,120
and packaging the root filesystem and so

00:14:00,610 --> 00:14:08,020
on on the top of that you can have some

00:14:04,120 --> 00:14:10,900
BSP or corporate layers with other

00:14:08,020 --> 00:14:14,920
software and product layers that have

00:14:10,900 --> 00:14:20,770
product specific applications for

00:14:14,920 --> 00:14:24,960
developers you can generate SDK one can

00:14:20,770 --> 00:14:29,230
easily attach upstream Debian packages

00:14:24,960 --> 00:14:33,100
without having to fork them from the

00:14:29,230 --> 00:14:36,150
beginning it was a requirement for

00:14:33,100 --> 00:14:44,550
either to support variants this me

00:14:36,150 --> 00:14:48,120
that one product maybe consisting of

00:14:44,550 --> 00:14:51,420
several boards and different

00:14:48,120 --> 00:14:54,290
applications so that like 80% of the

00:14:51,420 --> 00:14:59,250
code is shared between the boards and

00:14:54,290 --> 00:15:04,110
this is efficiently supported by recipes

00:14:59,250 --> 00:15:10,770
and their dependencies so why do we want

00:15:04,110 --> 00:15:14,400
to go further we would like to keep the

00:15:10,770 --> 00:15:18,450
right mix of the tools and at the same

00:15:14,400 --> 00:15:21,090
time we would like to avoid reinventing

00:15:18,450 --> 00:15:24,470
the wheel so there are many tools around

00:15:21,090 --> 00:15:28,650
and you would like to join forces and

00:15:24,470 --> 00:15:32,100
achieve more together also you would

00:15:28,650 --> 00:15:39,870
like to improve the implementation if we

00:15:32,100 --> 00:15:42,030
can solve some tasks in upstream the

00:15:39,870 --> 00:15:48,500
third approach by Toshiba

00:15:42,030 --> 00:15:54,420
is called meta Debian and it is a

00:15:48,500 --> 00:15:58,400
metadata set for Yocto project for

00:15:54,420 --> 00:16:02,280
building Debian source code this means

00:15:58,400 --> 00:16:08,670
Debian source packages are integrated

00:16:02,280 --> 00:16:14,760
into the Yocto layer and then built by

00:16:08,670 --> 00:16:22,250
dr. means and also dr. cross compiler

00:16:14,760 --> 00:16:25,400
and image generation tools are used in

00:16:22,250 --> 00:16:30,150
difference to the previous approaches

00:16:25,400 --> 00:16:34,590
this one is a distribution this means

00:16:30,150 --> 00:16:39,720
that the packages are included with the

00:16:34,590 --> 00:16:43,920
meta itself and it is source based like

00:16:39,720 --> 00:16:46,449
octo it means that we want to cross

00:16:43,920 --> 00:16:51,970
build everything from scratch

00:16:46,449 --> 00:16:55,359
to achieve customizability and to be

00:16:51,970 --> 00:16:59,970
able to use this system for the latest

00:16:55,359 --> 00:17:06,579
CPUs with our desired tunings and so on

00:16:59,970 --> 00:17:11,130
their motivation to work on the next

00:17:06,579 --> 00:17:15,870
generation build system is to reduce

00:17:11,130 --> 00:17:19,839
build times by reusing binaries and also

00:17:15,870 --> 00:17:24,399
to reuse Debian packaging to avoid

00:17:19,839 --> 00:17:29,740
copying of Debian rules into octo

00:17:24,399 --> 00:17:34,179
recipes so here you have the comparison

00:17:29,740 --> 00:17:43,570
with green you see some common features

00:17:34,179 --> 00:17:46,720
of each tool and yeah so this this

00:17:43,570 --> 00:17:49,630
project work today and our goal is to

00:17:46,720 --> 00:17:52,659
create to reboot the whole thing and to

00:17:49,630 --> 00:17:55,419
create a next-generation project with

00:17:52,659 --> 00:17:59,740
our shared goals for that we would like

00:17:55,419 --> 00:18:02,950
to define these goals what we would like

00:17:59,740 --> 00:18:06,850
to achieve here so first we would like

00:18:02,950 --> 00:18:12,370
to name the thing somehow so one obvious

00:18:06,850 --> 00:18:16,720
thing is to combine the first letters of

00:18:12,370 --> 00:18:20,529
our projects to aid and we pronounce it

00:18:16,720 --> 00:18:28,450
as aid in hope that it helps us and

00:18:20,529 --> 00:18:32,769
others so what I personal like about the

00:18:28,450 --> 00:18:35,320
Yocto project is the ease of use so we

00:18:32,769 --> 00:18:38,139
have one command building with bitbake

00:18:35,320 --> 00:18:42,820
and this is the only thing that the

00:18:38,139 --> 00:18:46,870
developer who has his first day working

00:18:42,820 --> 00:18:50,070
on this project has to know this is very

00:18:46,870 --> 00:18:53,300
important that all the details are

00:18:50,070 --> 00:18:59,060
hidden in the first

00:18:53,300 --> 00:19:02,810
till you need them but after you need to

00:18:59,060 --> 00:19:04,940
do some more complex stuff like adding

00:19:02,810 --> 00:19:12,160
new applications adding dependencies

00:19:04,940 --> 00:19:16,580
between them adding layers etc you will

00:19:12,160 --> 00:19:19,070
discover the recipe structure dependency

00:19:16,580 --> 00:19:22,670
structure and so on these use cases have

00:19:19,070 --> 00:19:26,540
to be covered in a scalable way this is

00:19:22,670 --> 00:19:28,850
well done in recipes and dependencies

00:19:26,540 --> 00:19:33,890
between them it should be easy to

00:19:28,850 --> 00:19:37,870
customize this also we know from the

00:19:33,890 --> 00:19:42,190
Yocto project because each recipe is

00:19:37,870 --> 00:19:46,070
responsible for its respective area and

00:19:42,190 --> 00:19:49,390
by customizing the respective part you

00:19:46,070 --> 00:19:54,170
can get the customization you want

00:19:49,390 --> 00:19:58,550
important thing is tooling we would like

00:19:54,170 --> 00:20:04,100
to use existing tools because Debian is

00:19:58,550 --> 00:20:05,690
about tools and we want to use them as

00:20:04,100 --> 00:20:12,560
much as possible so we would like to

00:20:05,690 --> 00:20:15,850
prefer existing tools over rather than

00:20:12,560 --> 00:20:21,050
developing our old tool sets for that

00:20:15,850 --> 00:20:26,000
and use those tools also not as a fork

00:20:21,050 --> 00:20:29,930
but by properly wrapping connecting or

00:20:26,000 --> 00:20:33,310
enhancing them upstream and if needed

00:20:29,930 --> 00:20:36,050
then contribute to upstream projects

00:20:33,310 --> 00:20:39,230
during that we would like of course to

00:20:36,050 --> 00:20:43,220
have clean minimal manageable now

00:20:39,230 --> 00:20:46,070
architecture of the whole regarding

00:20:43,220 --> 00:20:48,680
build targets well this is a floating

00:20:46,070 --> 00:20:51,860
target but of course the obvious things

00:20:48,680 --> 00:20:55,940
are like built deionized or non

00:20:51,860 --> 00:21:00,050
deionized sources generate ready to use

00:20:55,940 --> 00:21:02,410
images and generate SDK maybe there are

00:21:00,050 --> 00:21:03,840
further topics like provides

00:21:02,410 --> 00:21:11,090
repositories but

00:21:03,840 --> 00:21:14,340
this is currently out of scope maybe

00:21:11,090 --> 00:21:18,659
regarding performance the performance is

00:21:14,340 --> 00:21:21,049
one of the last topics but nonetheless

00:21:18,659 --> 00:21:26,580
quite important so we would like to

00:21:21,049 --> 00:21:29,820
avoid rebuilding stuff every time and we

00:21:26,580 --> 00:21:35,460
use binary packages also from Debian and

00:21:29,820 --> 00:21:39,110
from our own building of course there is

00:21:35,460 --> 00:21:42,510
much QA that flows into the Debian

00:21:39,110 --> 00:21:46,350
binary packages and this is what we

00:21:42,510 --> 00:21:49,830
would like to use however we would also

00:21:46,350 --> 00:21:53,940
like to use cross building because in

00:21:49,830 --> 00:21:57,240
our experience it's faster than native

00:21:53,940 --> 00:22:01,890
building on native hardware or qui MO

00:21:57,240 --> 00:22:07,740
and avoid unnecessary stuff or

00:22:01,890 --> 00:22:11,309
parallelization blockers that would slow

00:22:07,740 --> 00:22:15,299
down the whole thing and also of course

00:22:11,309 --> 00:22:18,750
this is a product oriented framework

00:22:15,299 --> 00:22:23,730
this means we want to keep the

00:22:18,750 --> 00:22:27,140
reproducibility features of our projects

00:22:23,730 --> 00:22:30,960
and have metadata layering for

00:22:27,140 --> 00:22:33,899
collaboration so here we have an example

00:22:30,960 --> 00:22:37,230
how this could look like for those of

00:22:33,899 --> 00:22:39,299
you who are familiar with Yocto this is

00:22:37,230 --> 00:22:44,549
quite obvious so at the bottom we have

00:22:39,299 --> 00:22:49,169
meta 8 and then we have some layers for

00:22:44,549 --> 00:22:53,480
a company for projects and boards with

00:22:49,169 --> 00:22:56,909
the difference that these recipes do not

00:22:53,480 --> 00:23:01,350
control they do not have the usual to

00:22:56,909 --> 00:23:03,920
build to install tasks that do the

00:23:01,350 --> 00:23:08,270
actual thing but they in

00:23:03,920 --> 00:23:12,740
from one let's say Debian dpkg class

00:23:08,270 --> 00:23:16,460
that builds the whole thing using Debian

00:23:12,740 --> 00:23:20,890
tools in Debian way there are some nice

00:23:16,460 --> 00:23:24,530
to have things we personally find

00:23:20,890 --> 00:23:30,500
bootstrapping Debian a very cool thing

00:23:24,530 --> 00:23:33,890
and it would also be useful for us if we

00:23:30,500 --> 00:23:37,250
had it for tuning for specific CPUs or

00:23:33,890 --> 00:23:40,850
for example one case where we needed to

00:23:37,250 --> 00:23:43,730
rebuild the whole project back in all

00:23:40,850 --> 00:23:47,030
the times when Debian was built without

00:23:43,730 --> 00:23:49,160
stack protection we wanted to rebuild

00:23:47,030 --> 00:23:52,430
the whole thing with stack protection

00:23:49,160 --> 00:23:55,310
and here where this would be useful if

00:23:52,430 --> 00:23:58,100
we could define like project white extra

00:23:55,310 --> 00:24:01,760
see Flags last but not least is

00:23:58,100 --> 00:24:07,580
footprint means for kind of lower

00:24:01,760 --> 00:24:11,860
priority for us but yeah if we could

00:24:07,580 --> 00:24:16,640
provide this it would be also nice so

00:24:11,860 --> 00:24:20,480
I'd like to pass over to Kazu for

00:24:16,640 --> 00:24:24,020
Carnaval yep on this ride I'd like to

00:24:20,480 --> 00:24:27,920
explain some technical parts we already

00:24:24,020 --> 00:24:31,310
defined some common visions so it's time

00:24:27,920 --> 00:24:35,450
to define some use cases for our tools

00:24:31,310 --> 00:24:39,890
and sadhya actually five main use cases

00:24:35,450 --> 00:24:44,210
here and first one needs to be built

00:24:39,890 --> 00:24:45,800
existing the resources by just typing

00:24:44,210 --> 00:24:49,340
the big baked

00:24:45,800 --> 00:24:52,070
hello commands this is a example folder

00:24:49,340 --> 00:24:55,580
hollow package which is included in

00:24:52,070 --> 00:24:58,370
Debian official packages and second one

00:24:55,580 --> 00:25:01,070
is to build a Debian artist so Steven

00:24:58,370 --> 00:25:05,780
eyes means the source Austria which

00:25:01,070 --> 00:25:08,559
includes some Debian metadata in this

00:25:05,780 --> 00:25:12,970
case we can also

00:25:08,559 --> 00:25:16,179
to build the final packages were just

00:25:12,970 --> 00:25:19,690
typing in a big big for example RPP one

00:25:16,179 --> 00:25:23,830
and someone is to build an on day be a

00:25:19,690 --> 00:25:28,210
nice sauce which is a normal case in

00:25:23,830 --> 00:25:31,929
your project maybe but in such case we

00:25:28,210 --> 00:25:35,559
also want to view the application which

00:25:31,929 --> 00:25:39,490
don't which is not they be analyzed or

00:25:35,559 --> 00:25:44,980
just building the booter orders or

00:25:39,490 --> 00:25:48,990
colors or something and then generates a

00:25:44,980 --> 00:25:53,259
route of our system is DKE by it is also

00:25:48,990 --> 00:25:56,549
should be done by one command like the

00:25:53,259 --> 00:26:00,399
Debbie a big big Debian image which

00:25:56,549 --> 00:26:04,480
pulled which is all required binary

00:26:00,399 --> 00:26:09,159
packages and generates a lot final route

00:26:04,480 --> 00:26:13,299
of our system o SDK images and to

00:26:09,159 --> 00:26:16,679
achieve that we need to implement at

00:26:13,299 --> 00:26:21,639
least the functions are received here

00:26:16,679 --> 00:26:25,419
first one is effects or structures in

00:26:21,639 --> 00:26:28,570
our case we usually use the debian sauce

00:26:25,419 --> 00:26:32,409
packages for building so it's important

00:26:28,570 --> 00:26:35,049
to improve some fridge function feature

00:26:32,409 --> 00:26:39,399
functions for the debian source pockets

00:26:35,049 --> 00:26:44,710
like the DC and other important things

00:26:39,399 --> 00:26:49,659
is how to resolve dependencies sorry

00:26:44,710 --> 00:26:52,769
most dependencies you can be solved with

00:26:49,659 --> 00:26:58,570
apt which is tragic

00:26:52,769 --> 00:26:59,159
same way as Debian world but actually we

00:26:58,570 --> 00:27:02,740
have

00:26:59,159 --> 00:27:06,700
non-avian exhaust and we need to

00:27:02,740 --> 00:27:12,710
implement recipe for that in such cases

00:27:06,700 --> 00:27:16,429
a big bay dependency mechanism habit and

00:27:12,710 --> 00:27:19,909
we need to use the boss dependency

00:27:16,429 --> 00:27:22,940
resolution at the same time without any

00:27:19,909 --> 00:27:28,179
duplication and of course the package

00:27:22,940 --> 00:27:34,100
filter is required and we need to use

00:27:28,179 --> 00:27:37,899
same build package builder the Debian

00:27:34,100 --> 00:27:41,029
official way which is a speed and also

00:27:37,899 --> 00:27:45,499
need to implement some builder for the

00:27:41,029 --> 00:27:49,220
non Debian nice sources in such case we

00:27:45,499 --> 00:27:52,159
need to put the sauce into the Debian

00:27:49,220 --> 00:27:56,600
change route and use Debian to change

00:27:52,159 --> 00:27:59,929
and build it the finally is requesting

00:27:56,600 --> 00:28:03,950
is image generator which country based

00:27:59,929 --> 00:28:06,639
on the tabletop and we also have some

00:28:03,950 --> 00:28:10,999
possibilities to cooperate existing

00:28:06,639 --> 00:28:13,070
tools in a twister in Debian community

00:28:10,999 --> 00:28:17,840
there are many image generation to

00:28:13,070 --> 00:28:21,919
develop or so we also give some chance

00:28:17,840 --> 00:28:27,019
to cooperate such an existing project it

00:28:21,919 --> 00:28:32,929
is simple workflow of the current

00:28:27,019 --> 00:28:38,240
approach first we there is a feature

00:28:32,929 --> 00:28:42,289
which just download the source for

00:28:38,240 --> 00:28:44,240
Debian source packages or extra source

00:28:42,289 --> 00:28:50,749
code like bootloader command an

00:28:44,240 --> 00:28:54,169
application and this rule idea is the

00:28:50,749 --> 00:28:58,490
Debian heist world and the green area is

00:28:54,169 --> 00:29:02,330
unknown Debian I swore in the Debian

00:28:58,490 --> 00:29:05,929
eyes what our source code can be built

00:29:02,330 --> 00:29:09,710
with a speed which is official appeal

00:29:05,929 --> 00:29:12,259
process in the Debian infrastructure and

00:29:09,710 --> 00:29:16,100
then we can get the change we can get

00:29:12,259 --> 00:29:20,779
binary packages which is taught in depth

00:29:16,100 --> 00:29:21,980
repository then in organized world there

00:29:20,779 --> 00:29:24,850
are two options

00:29:21,980 --> 00:29:30,470
then if the source code is very simple

00:29:24,850 --> 00:29:34,669
we can sometimes deionized the existing

00:29:30,470 --> 00:29:40,299
source and after a process is completely

00:29:34,669 --> 00:29:43,220
saying as existing that you know sorry

00:29:40,299 --> 00:29:47,000
completely same as the process to build

00:29:43,220 --> 00:29:52,700
existing at IBM sauce pocket another way

00:29:47,000 --> 00:29:56,049
is to build with some low builder in the

00:29:52,700 --> 00:30:00,740
exchange route provided by a spirit and

00:29:56,049 --> 00:30:04,340
use debian to chain and generate just

00:30:00,740 --> 00:30:05,169
binaries 10 packages to absolutely

00:30:04,340 --> 00:30:09,409
positive

00:30:05,169 --> 00:30:17,409
finally the generator would fall system

00:30:09,409 --> 00:30:21,440
SDK by image builder currently we and so

00:30:17,409 --> 00:30:27,649
features corrupt red colored things it's

00:30:21,440 --> 00:30:30,380
available in the prototype one of them

00:30:27,649 --> 00:30:34,850
is building the deionized sources and

00:30:30,380 --> 00:30:39,889
also Debian rising and building with

00:30:34,850 --> 00:30:43,460
this build some some application you can

00:30:39,889 --> 00:30:47,179
easily find some implementation in by

00:30:43,460 --> 00:30:50,059
checking its github repositories here's

00:30:47,179 --> 00:30:52,639
one support to rebuild the debian sauce

00:30:50,059 --> 00:30:56,299
packages at least very simple honest

00:30:52,639 --> 00:30:58,570
rewrite required to build thorough sauce

00:30:56,299 --> 00:31:04,029
package

00:30:58,570 --> 00:31:09,799
sorry we need to define only the C URI

00:31:04,029 --> 00:31:16,130
which specified some URI to the DC file

00:31:09,799 --> 00:31:19,460
and after we inherited them in DC a all

00:31:16,130 --> 00:31:22,190
required source package files listed in

00:31:19,460 --> 00:31:23,970
DC automatically fetch to by the system

00:31:22,190 --> 00:31:29,860
and

00:31:23,970 --> 00:31:34,360
every field is down by a speed by just

00:31:29,860 --> 00:31:36,280
inheriting a speed cross it is another

00:31:34,360 --> 00:31:41,040
example to build a Monday be honest

00:31:36,280 --> 00:31:46,840
package which is also not so complicated

00:31:41,040 --> 00:31:51,300
when the first line means just to Debian

00:31:46,840 --> 00:31:55,270
lies this source code and could eat to

00:31:51,300 --> 00:31:59,470
so beautiful all the best same as the

00:31:55,270 --> 00:32:02,140
previous one then the it worth of

00:31:59,470 --> 00:32:06,820
interesting part is the bottom through

00:32:02,140 --> 00:32:09,450
your eyes it's dependent the some

00:32:06,820 --> 00:32:12,700
propagation of who country depends on

00:32:09,450 --> 00:32:17,520
sleep packages people depend machine

00:32:12,700 --> 00:32:21,190
runtime dependencies if it depends on

00:32:17,520 --> 00:32:25,900
some other recipes we can just define

00:32:21,190 --> 00:32:28,840
that depends - for example parts it is

00:32:25,900 --> 00:32:33,760
the same approach with the your project

00:32:28,840 --> 00:32:38,320
but if that packages all depends on some

00:32:33,760 --> 00:32:43,270
binary packages already exist in Debian

00:32:38,320 --> 00:32:46,390
what you can define you can create the

00:32:43,270 --> 00:32:49,320
dependencies by just defining the temp

00:32:46,390 --> 00:32:52,410
depends and all depends

00:32:49,320 --> 00:32:55,240
regarding the builder dependencies

00:32:52,410 --> 00:32:58,630
suppose all the depends and the deputy

00:32:55,240 --> 00:33:03,010
pins here finally going to the pill

00:32:58,630 --> 00:33:07,210
depends of the source package yep so the

00:33:03,010 --> 00:33:10,270
rest part will be down we buy one okay

00:33:07,210 --> 00:33:13,810
so let me summarize up what we've

00:33:10,270 --> 00:33:17,110
learned about last two years we are

00:33:13,810 --> 00:33:20,500
working together I think so we

00:33:17,110 --> 00:33:24,630
definitely learned that we can build SDK

00:33:20,500 --> 00:33:30,270
and root file systems with our

00:33:24,630 --> 00:33:34,040
combination of bitbake and debian we

00:33:30,270 --> 00:33:36,890
thinking about evaluating more tools

00:33:34,040 --> 00:33:39,140
for doing the actual image generation if

00:33:36,890 --> 00:33:42,740
you want to go to your way or Debian way

00:33:39,140 --> 00:33:46,700
or maybe provide several options for

00:33:42,740 --> 00:33:49,220
doing this them another thing we need to

00:33:46,700 --> 00:33:51,470
solve this the apt repository management

00:33:49,220 --> 00:33:54,440
currently we put all packages that are

00:33:51,470 --> 00:33:58,280
built into one apt repository but of

00:33:54,440 --> 00:34:01,070
course we need an easy way to define

00:33:58,280 --> 00:34:03,770
which packages should be used from a

00:34:01,070 --> 00:34:06,880
binary repository and which packages

00:34:03,770 --> 00:34:09,800
should be rebuilded from sauce each time

00:34:06,880 --> 00:34:12,400
so this is another thing we need to

00:34:09,800 --> 00:34:16,910
think about and introduce a solution

00:34:12,400 --> 00:34:22,550
damn it's about rebuilding of non Debian

00:34:16,910 --> 00:34:24,290
eyes losses it's often preferred for

00:34:22,550 --> 00:34:26,480
your only application that you don't

00:34:24,290 --> 00:34:30,040
want to Debian eyes it trusts you to

00:34:26,480 --> 00:34:33,020
build if it within a build system and

00:34:30,040 --> 00:34:35,540
therefore we did this prototype of

00:34:33,020 --> 00:34:39,050
Debian izing automatically simple

00:34:35,540 --> 00:34:41,240
applications but of course for complex

00:34:39,050 --> 00:34:44,270
applications that doesn't work at the

00:34:41,240 --> 00:34:47,419
moment we need to think about you we

00:34:44,270 --> 00:34:50,630
want to support something like bitbake

00:34:47,419 --> 00:34:53,720
does actually for building them or

00:34:50,630 --> 00:34:56,570
improved Debian either or would we we

00:34:53,720 --> 00:34:58,490
want to go there then you'd like to

00:34:56,570 --> 00:35:01,430
customize often you like to customize

00:34:58,490 --> 00:35:03,680
some packages and also therefore we need

00:35:01,430 --> 00:35:06,770
to specify a workflow especially for

00:35:03,680 --> 00:35:09,830
customizing currently existing packages

00:35:06,770 --> 00:35:11,990
in Debian for building them for example

00:35:09,830 --> 00:35:16,270
Auto configure options or something like

00:35:11,990 --> 00:35:21,290
that then we use currently qmo emulator

00:35:16,270 --> 00:35:24,220
built for doing the actual package build

00:35:21,290 --> 00:35:27,890
and therefore we'd like to take into

00:35:24,220 --> 00:35:30,170
Debian multi lip and ass build

00:35:27,890 --> 00:35:33,110
supporting cross to chains that we can

00:35:30,170 --> 00:35:36,740
use across to trial in inside aspect we

00:35:33,110 --> 00:35:39,230
have native compiler in there another

00:35:36,740 --> 00:35:42,860
thing we need to look at a slippage

00:35:39,230 --> 00:35:47,280
usability and all the management of the

00:35:42,860 --> 00:35:50,020
metadata and so on so

00:35:47,280 --> 00:35:55,569
whatever is our conclusion of our what

00:35:50,020 --> 00:35:59,430
two together so it is possible to do it

00:35:55,569 --> 00:36:02,230
the way we think it should work we

00:35:59,430 --> 00:36:04,900
learned that we want to write lie on

00:36:02,230 --> 00:36:06,700
Debian's infrastructure tools on debian

00:36:04,900 --> 00:36:08,890
cross building features and that we

00:36:06,700 --> 00:36:15,339
don't want to reinvent the wheel by our

00:36:08,890 --> 00:36:17,950
own we have have even idea that it might

00:36:15,339 --> 00:36:20,980
should be possible to build variants or

00:36:17,950 --> 00:36:23,109
packages without even having any bit

00:36:20,980 --> 00:36:25,420
bakeries deep in the file system so that

00:36:23,109 --> 00:36:31,270
we can feed the information from the app

00:36:25,420 --> 00:36:35,170
cache directly into bitbake we have a

00:36:31,270 --> 00:36:37,589
pre off of concept code available on

00:36:35,170 --> 00:36:41,170
github I show you on the next slide and

00:36:37,589 --> 00:36:43,839
there we worked heavily on the

00:36:41,170 --> 00:36:49,599
dependency resolution problem over the

00:36:43,839 --> 00:36:52,059
last couple of months and yeah of course

00:36:49,599 --> 00:36:55,210
we also learned that we often have to

00:36:52,059 --> 00:36:58,089
support the same thing and a different

00:36:55,210 --> 00:36:59,859
way because some people don't want to

00:36:58,089 --> 00:37:01,599
prosper they always want to do the

00:36:59,859 --> 00:37:04,660
native build because they have so

00:37:01,599 --> 00:37:07,510
complex applications where they say I

00:37:04,660 --> 00:37:09,549
don't like to improve the build system

00:37:07,510 --> 00:37:11,770
that it supports cross building and I

00:37:09,549 --> 00:37:15,640
say I need cross building because of

00:37:11,770 --> 00:37:17,920
speed so we learned that we need to

00:37:15,640 --> 00:37:20,549
implement sometimes two ways to do the

00:37:17,920 --> 00:37:24,299
same thing because the people have

00:37:20,549 --> 00:37:27,039
different estimations on the process

00:37:24,299 --> 00:37:30,279
another thing we realized there are many

00:37:27,039 --> 00:37:34,089
projects out there with very similar

00:37:30,279 --> 00:37:37,690
goals and of course we are open so we

00:37:34,089 --> 00:37:40,319
want to welcome you to join us so we

00:37:37,690 --> 00:37:44,109
just created a github organization

00:37:40,319 --> 00:37:49,299
called the ad project where we host our

00:37:44,109 --> 00:37:51,940
prototype or a proof of concept code we

00:37:49,299 --> 00:37:55,240
also want to use github to track the

00:37:51,940 --> 00:37:58,990
issues and we implemented some Travis

00:37:55,240 --> 00:38:00,010
based testing that we can that you can

00:37:58,990 --> 00:38:01,930
also easily

00:38:00,010 --> 00:38:06,130
to see what is working at the moment

00:38:01,930 --> 00:38:10,480
already then we have created a mailing

00:38:06,130 --> 00:38:12,640
list where you are invited to join us

00:38:10,480 --> 00:38:15,330
where we want to have technical the

00:38:12,640 --> 00:38:20,950
technical discussions and where we do

00:38:15,330 --> 00:38:22,900
the review of patches so for back

00:38:20,950 --> 00:38:25,240
reports please use the issue tracker on

00:38:22,900 --> 00:38:26,980
github for sending us patches please

00:38:25,240 --> 00:38:31,750
post them on the mailing list if you

00:38:26,980 --> 00:38:36,940
want to to trial we are here for today

00:38:31,750 --> 00:38:40,600
and tomorrow and we are happy to talk to

00:38:36,940 --> 00:38:44,050
anyone who is interesting yeah

00:38:40,600 --> 00:39:04,560
and now we have time for one last

00:38:44,050 --> 00:39:04,560
question - its daily yeah okay thank you

00:39:12,790 --> 00:39:21,270
any questions yes

00:39:30,100 --> 00:39:40,160
so I have a working doctor build if I of

00:39:36,410 --> 00:39:43,820
course I don't have the time to put it

00:39:40,160 --> 00:39:46,190
completely to something new but if I

00:39:43,820 --> 00:39:47,810
happen to have a package that doesn't it

00:39:46,190 --> 00:39:50,330
isn't it's not you know your tests are

00:39:47,810 --> 00:39:55,160
suitably after layer available could I

00:39:50,330 --> 00:39:57,140
easily use the Debian package and your

00:39:55,160 --> 00:39:59,390
to two classes you showed there and

00:39:57,140 --> 00:40:01,780
would that integrate or is that

00:39:59,390 --> 00:40:05,030
something that would require more work

00:40:01,780 --> 00:40:07,520
hmm I think it's basically not possible

00:40:05,030 --> 00:40:10,790
because you're using completely

00:40:07,520 --> 00:40:13,180
different versions of of the trilogy of

00:40:10,790 --> 00:40:16,220
the compilers and so on you have

00:40:13,180 --> 00:40:18,980
different dependencies because bitbake

00:40:16,220 --> 00:40:21,560
names sometimes package shells with

00:40:18,980 --> 00:40:25,600
other names than they have in Debian so

00:40:21,560 --> 00:40:28,720
this would be really really a hard task

00:40:25,600 --> 00:40:28,720
thank you

00:40:31,039 --> 00:40:39,569
okay should we finish yep okay so thank

00:40:36,539 --> 00:40:42,269
you for your intention and as I told we

00:40:39,569 --> 00:40:45,329
are open for questions are here and

00:40:42,269 --> 00:40:47,369
there and on the technical showcase off

00:40:45,329 --> 00:40:49,500
Washington you can ask questions about

00:40:47,369 --> 00:40:55,389
either thank you very much

00:40:49,500 --> 00:40:55,389

YouTube URL: https://www.youtube.com/watch?v=pWskw-79hSk


