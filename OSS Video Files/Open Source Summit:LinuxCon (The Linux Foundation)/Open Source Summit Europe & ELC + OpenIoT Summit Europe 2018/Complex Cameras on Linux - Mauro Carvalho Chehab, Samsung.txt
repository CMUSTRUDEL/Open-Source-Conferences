Title: Complex Cameras on Linux - Mauro Carvalho Chehab, Samsung
Publication date: 2018-10-25
Playlist: Open Source Summit Europe & ELC + OpenIoT Summit Europe 2018
Description: 
	Complex Cameras on Linux - Mauro Carvalho Chehab, Samsung

The media subsystem supports two types of camera devices:

    "traditional" media hardware, supported via standard V4L2 API, via device nodes, called devnode-based drivers. On those hardware, image processing happens at the camera. Those are meant to be used by customer-based devices.
    Media-controller based devices, supported by 3 sets of APIs: Media Controller, V4L2, and V4L2 subdevices. Those are meant to be used by SoC-based embedded devices. On those devices, image processing happens at the SoC.
    Devnode-based drivers are supported by "standard" media applications, but right now, media-controller based devices require a special design application.

Along with this speech, we'll cover both types of camera hardware and describe a recent effort of making both compatible with standard camera applications. 

About Mauro Carvalho Chehab
Mauro is the upstream maintainer of the Linux kernel media and EDAC subsystems, and also a major contributor for the Reliability Availability and Serviceability (RAS) subsystems. He is a KDE developer, where it maintains Kaffeine since 2016. Mauro also maintains Tizen on Yocto packages upstream. He works for the Samsung Open Source Group since 2013. Has worked during 5 years at the Red Hat RHEL Kernel team, having broad experience in telecommunications due to his work at some of the Brazilian largest wired and wireless carriers.
Captions: 
	00:00:00,570 --> 00:00:04,920
the goal of this presentation it's

00:00:02,760 --> 00:00:07,589
explain a little bit about what we are

00:00:04,920 --> 00:00:11,820
doing right now at the linux major

00:00:07,589 --> 00:00:15,870
subsystem disease for me one of the hot

00:00:11,820 --> 00:00:18,600
pot is that happening right now it is

00:00:15,870 --> 00:00:22,230
related with the way we handle cameras

00:00:18,600 --> 00:00:27,960
inside the not only at the kind of site

00:00:22,230 --> 00:00:31,109
but actually at the user space side we

00:00:27,960 --> 00:00:34,410
will be talking a little bit during this

00:00:31,109 --> 00:00:37,950
talk about what it is a complex camera

00:00:34,410 --> 00:00:40,950
on our cells i will be discussing a

00:00:37,950 --> 00:00:44,550
little bit about how we solve it camera

00:00:40,950 --> 00:00:48,719
issues we had in the past using the lib

00:00:44,550 --> 00:00:53,160
video for linux and we've then talk

00:00:48,719 --> 00:00:56,430
about modern hardware that are coming

00:00:53,160 --> 00:00:59,539
together if in be a device and finally

00:00:56,430 --> 00:01:03,390
how can we solve the issues on those had

00:00:59,539 --> 00:01:09,659
they make them work with generic

00:01:03,390 --> 00:01:12,780
applications basically when beautiful

00:01:09,659 --> 00:01:17,130
into a development we were focusing on

00:01:12,780 --> 00:01:20,610
the traditional hard those hard we have

00:01:17,130 --> 00:01:26,280
internal inside the ships at loss of

00:01:20,610 --> 00:01:29,490
complexity so the drivers and the

00:01:26,280 --> 00:01:35,060
support for those hard were simply

00:01:29,490 --> 00:01:39,540
activated by just one single device load

00:01:35,060 --> 00:01:43,350
that work at predefined until we started

00:01:39,540 --> 00:01:49,380
cell phones where part of the complexity

00:01:43,350 --> 00:01:52,320
web sent to the kind of side cannot

00:01:49,380 --> 00:01:54,570
drive and to use space in order to set

00:01:52,320 --> 00:01:59,280
up the pipelines internally at the

00:01:54,570 --> 00:02:04,170
huddle that is basically a traditional

00:01:59,280 --> 00:02:05,820
camera is not very different from what

00:02:04,170 --> 00:02:09,959
you have on your notebooks

00:02:05,820 --> 00:02:11,940
it is usually an USB camera it could be

00:02:09,959 --> 00:02:16,500
internal inside the load

00:02:11,940 --> 00:02:18,660
could be external the thing is I can't

00:02:16,500 --> 00:02:21,290
control fully control this kind of

00:02:18,660 --> 00:02:26,850
cameras with just one device nodes

00:02:21,290 --> 00:02:29,940
usually dev video 0 with that device

00:02:26,850 --> 00:02:32,940
node I have full access to the camera to

00:02:29,940 --> 00:02:39,300
the streaming part to the controls of

00:02:32,940 --> 00:02:41,580
bright gangs white balance and things

00:02:39,300 --> 00:02:44,940
like that I can do everything for a

00:02:41,580 --> 00:02:47,280
single device mode event only others

00:02:44,940 --> 00:02:50,820
could be exposed if they had for example

00:02:47,280 --> 00:02:54,540
has TV it may actually expose all the

00:02:50,820 --> 00:02:57,090
device knows but in a general rule is

00:02:54,540 --> 00:03:02,550
that just one device node is enough to

00:02:57,090 --> 00:03:07,160
control this kind of has more generic

00:03:02,550 --> 00:03:10,500
applications assume this kind of model

00:03:07,160 --> 00:03:12,090
so it is very easy for you to use the

00:03:10,500 --> 00:03:15,720
heart we just need to open whatever

00:03:12,090 --> 00:03:19,739
application even your browser and your

00:03:15,720 --> 00:03:24,420
camera is ready for you to use we call

00:03:19,739 --> 00:03:26,550
this device node based device this is an

00:03:24,420 --> 00:03:28,950
example of a simple camera this is a

00:03:26,550 --> 00:03:33,300
camera actually from an embittered heart

00:03:28,950 --> 00:03:38,910
disease a Chromebook snow camera it is

00:03:33,300 --> 00:03:44,220
internal an USB camera basically ' we

00:03:38,910 --> 00:03:48,000
see we basically have the camera one

00:03:44,220 --> 00:03:52,200
processing unit inside the heart not a

00:03:48,000 --> 00:03:54,269
unit that do some control like white

00:03:52,200 --> 00:03:57,360
balance and things like that and

00:03:54,269 --> 00:04:01,350
everything is controlled via a v20

00:03:57,360 --> 00:04:03,930
device node the graph itself can be

00:04:01,350 --> 00:04:07,590
generated using the media controller but

00:04:03,930 --> 00:04:12,810
it's very simple the applications can

00:04:07,590 --> 00:04:15,030
use it very very easily the second kind

00:04:12,810 --> 00:04:19,440
of a heart started actually with the

00:04:15,030 --> 00:04:22,230
cameras from the Nokia n9 and a 900 cell

00:04:19,440 --> 00:04:26,340
phones they assuming

00:04:22,230 --> 00:04:29,250
that you can control each single part of

00:04:26,340 --> 00:04:33,990
the pipelines inside the heart so it

00:04:29,250 --> 00:04:37,050
exposes a lot of sub devices and I need

00:04:33,990 --> 00:04:39,210
first to get all those sub devices then

00:04:37,050 --> 00:04:42,360
I need an epic application that knows

00:04:39,210 --> 00:04:47,190
exactly how to set up in order to get

00:04:42,360 --> 00:04:50,130
the best resolutions best quality of

00:04:47,190 --> 00:04:54,330
image without an official specialized

00:04:50,130 --> 00:04:58,760
applications this hard award work we

00:04:54,330 --> 00:05:02,880
call this media controller based device

00:04:58,760 --> 00:05:05,580
this is an example of an in one of those

00:05:02,880 --> 00:05:12,390
hard exists exactly the same chipset

00:05:05,580 --> 00:05:16,320
find it on 900 watt 3 ISP all those

00:05:12,390 --> 00:05:19,080
yellow boxes are device nodes and

00:05:16,320 --> 00:05:21,840
application should open all of those are

00:05:19,080 --> 00:05:24,330
moves of those in all to access the

00:05:21,840 --> 00:05:28,050
heart and control and it has to be

00:05:24,330 --> 00:05:32,190
expects eliezer in this specific case we

00:05:28,050 --> 00:05:35,040
have 17 device nodes so it is really

00:05:32,190 --> 00:05:41,430
complex for applications to work with

00:05:35,040 --> 00:05:44,910
this kind of hard when we start work

00:05:41,430 --> 00:05:47,790
with camera very soon we realized that

00:05:44,910 --> 00:05:50,460
we had a trouble the trouble on that

00:05:47,790 --> 00:05:53,820
time and you talking about additional

00:05:50,460 --> 00:05:56,550
cameras right now at the trouble we had

00:05:53,820 --> 00:06:00,750
on that time he is basically when we

00:05:56,550 --> 00:06:03,810
added one camera drive and GSPC a we've

00:06:00,750 --> 00:06:07,590
detected that several different hardware

00:06:03,810 --> 00:06:09,960
vendors that manufactures USB bridges

00:06:07,590 --> 00:06:13,410
for camera had their own proprietary

00:06:09,960 --> 00:06:19,260
formats the reason for that is that on

00:06:13,410 --> 00:06:22,650
that time USB 1.1 the bandwidth of the

00:06:19,260 --> 00:06:25,290
USB birth were really small so the

00:06:22,650 --> 00:06:28,290
camera harder needed to compress images

00:06:25,290 --> 00:06:33,000
and each vendor came with its own

00:06:28,290 --> 00:06:34,650
proprietary algorithm so if you had a

00:06:33,000 --> 00:06:38,180
generic application on

00:06:34,650 --> 00:06:42,720
time it would work only with the hard

00:06:38,180 --> 00:06:46,500
that the specific developed of such

00:06:42,720 --> 00:06:49,889
application would happen good to have so

00:06:46,500 --> 00:06:53,270
it was a real nightmare you have if you

00:06:49,889 --> 00:06:56,400
want to use a webcam you have to find a

00:06:53,270 --> 00:06:59,250
harder that we are read supported by

00:06:56,400 --> 00:07:02,100
your application or you would need to

00:06:59,250 --> 00:07:05,760
write some code in order for that camera

00:07:02,100 --> 00:07:07,889
to work so what we did at that time is

00:07:05,760 --> 00:07:12,360
that we wrote a library lip read for

00:07:07,889 --> 00:07:14,130
linux and inside that library we added

00:07:12,360 --> 00:07:20,039
support for all those proprietary

00:07:14,130 --> 00:07:24,389
formats then a single application could

00:07:20,039 --> 00:07:27,570
open whatever camera it was there there

00:07:24,389 --> 00:07:30,539
were some glitches on some cases Rendel

00:07:27,570 --> 00:07:34,169
start to mount the surface upside down

00:07:30,539 --> 00:07:37,440
so if you use just application you would

00:07:34,169 --> 00:07:39,539
see all the images inverted so we had

00:07:37,440 --> 00:07:43,580
soon enough to have needed to add the

00:07:39,539 --> 00:07:48,750
list of quirks saying that dispersive

00:07:43,580 --> 00:07:54,620
USB ID has an upside-down camera so the

00:07:48,750 --> 00:07:54,620
library does the image insertion for you

00:07:54,919 --> 00:08:03,660
this way we found a way of hiding from

00:08:00,750 --> 00:08:10,470
the applications the differences between

00:08:03,660 --> 00:08:15,410
different cameras nowadays most of the

00:08:10,470 --> 00:08:19,050
cameras are using a standard a USB

00:08:15,410 --> 00:08:23,010
format and the numbers of format of

00:08:19,050 --> 00:08:25,260
possible formats are reduce it so it's

00:08:23,010 --> 00:08:27,949
now a way more simpler than it used to

00:08:25,260 --> 00:08:27,949
be on that time

00:08:38,789 --> 00:08:46,730
not sure what happened here I guess this

00:08:42,120 --> 00:08:46,730
little work I find just second place

00:08:55,580 --> 00:09:00,760
so the grew of the library were just to

00:08:58,250 --> 00:09:06,320
add support for all those different

00:09:00,760 --> 00:09:09,350
sorts of complexity and while we were

00:09:06,320 --> 00:09:13,459
doing those kind of things we also got

00:09:09,350 --> 00:09:18,019
rid of a beautiful in special one API it

00:09:13,459 --> 00:09:20,810
was in kind of since 1997 and we've just

00:09:18,019 --> 00:09:23,240
got rid of that and we move it all those

00:09:20,810 --> 00:09:26,750
things inside the library you know how

00:09:23,240 --> 00:09:36,290
to get rid of the kernel lay that didn't

00:09:26,750 --> 00:09:38,959
work fine by the way okay so Lib vid for

00:09:36,290 --> 00:09:42,500
Linux it actually has three sets of

00:09:38,959 --> 00:09:46,279
libraries inside the first one was image

00:09:42,500 --> 00:09:50,000
processing the second one does the old

00:09:46,279 --> 00:09:53,300
api compatibility serve and finally the

00:09:50,000 --> 00:09:58,870
last one provides abstraction for

00:09:53,300 --> 00:09:58,870
applications to be used by the library

00:09:59,200 --> 00:10:07,700
the image processing part is it is what

00:10:03,800 --> 00:10:10,940
actually makes all the image format

00:10:07,700 --> 00:10:16,899
conversions from user space application

00:10:10,940 --> 00:10:20,600
they only need support for example RGB

00:10:16,899 --> 00:10:22,790
24 bits and that's it if the application

00:10:20,600 --> 00:10:25,940
supports that it can work with whatever

00:10:22,790 --> 00:10:29,390
camera you have there are a few other

00:10:25,940 --> 00:10:31,730
formats for example high UV and not a

00:10:29,390 --> 00:10:33,980
few other formats that the application

00:10:31,730 --> 00:10:37,310
could use it can select whatever it

00:10:33,980 --> 00:10:39,500
wants and of course the hard expose is

00:10:37,310 --> 00:10:42,050
everything it supports so if the

00:10:39,500 --> 00:10:45,440
application wants to do more or knows

00:10:42,050 --> 00:10:48,709
more about different formats it can use

00:10:45,440 --> 00:10:53,149
that actually otherwise the library will

00:10:48,709 --> 00:10:54,680
emulate for the the application to work

00:10:53,149 --> 00:10:58,040
so whatever application you have

00:10:54,680 --> 00:11:02,300
nowadays they are using the library in

00:10:58,040 --> 00:11:04,630
order to get a set that would work for

00:11:02,300 --> 00:11:04,630
it

00:11:05,450 --> 00:11:13,710
basically confessions it does for the

00:11:09,420 --> 00:11:20,490
camera bridges between different formats

00:11:13,710 --> 00:11:23,700
like rgbi UV Bayer MPEG M jpg JPEG light

00:11:20,490 --> 00:11:26,430
light and things like that there are

00:11:23,700 --> 00:11:30,390
some requests for added support for

00:11:26,430 --> 00:11:34,980
impact we don't have it in yet it also

00:11:30,390 --> 00:11:38,310
handles on a specific format for impact

00:11:34,980 --> 00:11:43,580
base it harder on connections chipsets

00:11:38,310 --> 00:11:47,160
and every time it provides an emulated

00:11:43,580 --> 00:11:50,670
format a flag is change the application

00:11:47,160 --> 00:11:54,380
application knows what format the header

00:11:50,670 --> 00:11:57,510
support directly and what formats are

00:11:54,380 --> 00:12:00,750
emulated by the library so if the

00:11:57,510 --> 00:12:03,450
application have a format that is

00:12:00,750 --> 00:12:07,320
compatible with the HOD it can use that

00:12:03,450 --> 00:12:11,010
format directly otherwise it can use the

00:12:07,320 --> 00:12:12,990
emulated flag and let the library do his

00:12:11,010 --> 00:12:15,060
work it may not be the best

00:12:12,990 --> 00:12:18,090
implementation but it is there in the

00:12:15,060 --> 00:12:24,240
camera to do that's the whole idea of

00:12:18,090 --> 00:12:28,650
this flag inside library we also have

00:12:24,240 --> 00:12:32,210
things like gamma control out white

00:12:28,650 --> 00:12:34,770
balancing out again so if that your

00:12:32,210 --> 00:12:38,040
sensor your camera doesn't have those

00:12:34,770 --> 00:12:42,060
features the library will emulate it for

00:12:38,040 --> 00:12:44,160
you and there is also a patch pending

00:12:42,060 --> 00:12:50,010
submission that would also provide

00:12:44,160 --> 00:12:52,350
autofocus and I said before it also

00:12:50,010 --> 00:12:56,070
gained support cameras are mounted

00:12:52,350 --> 00:12:58,910
upside down and things like that the

00:12:56,070 --> 00:13:02,220
whole idea here is that if the camera

00:12:58,910 --> 00:13:04,530
supports in hard for example doing

00:13:02,220 --> 00:13:07,350
mirroring and things like that if you

00:13:04,530 --> 00:13:13,650
use had a support otherwise library we

00:13:07,350 --> 00:13:16,680
were malade for you the video for links

00:13:13,650 --> 00:13:17,770
one compile to build G libraries are

00:13:16,680 --> 00:13:20,740
just

00:13:17,770 --> 00:13:26,680
for the new Danone applications that

00:13:20,740 --> 00:13:30,010
were written before which fall into we I

00:13:26,680 --> 00:13:32,140
was pretty sure that we had gone of

00:13:30,010 --> 00:13:35,380
those applications until I started

00:13:32,140 --> 00:13:37,360
looking on it and I discovered that one

00:13:35,380 --> 00:13:40,660
of my favorite came and applications

00:13:37,360 --> 00:13:45,430
came a Roman where if you use in those

00:13:40,660 --> 00:13:48,780
days the old will fall into one API

00:13:45,430 --> 00:13:53,170
I actually got comment in ership of that

00:13:48,780 --> 00:13:56,050
application and already ported it to use

00:13:53,170 --> 00:13:59,500
video for links to I'm planning to use

00:13:56,050 --> 00:14:02,350
this application also when we start

00:13:59,500 --> 00:14:05,320
working with complex cameras it is

00:14:02,350 --> 00:14:07,900
already available in fedora others

00:14:05,320 --> 00:14:09,820
issues may or may not have this new

00:14:07,900 --> 00:14:12,910
version applied

00:14:09,820 --> 00:14:18,610
I guess Musa Sudan but it is just a

00:14:12,910 --> 00:14:21,040
matter of time now it was required with

00:14:18,610 --> 00:14:24,190
the conversion in the way this library

00:14:21,040 --> 00:14:28,210
works it can work in two ways actually

00:14:24,190 --> 00:14:34,570
you could use video falling through one

00:14:28,210 --> 00:14:39,220
slash open/close and whatever or we can

00:14:34,570 --> 00:14:43,300
set an LD preload oops sorry wrong

00:14:39,220 --> 00:14:45,700
button there is an LD preload parameter

00:14:43,300 --> 00:14:49,210
that you can use on your when you call

00:14:45,700 --> 00:14:53,290
your application asking the liable to

00:14:49,210 --> 00:14:55,470
take control of open/close io cons and

00:14:53,290 --> 00:15:00,670
those io in those GCC

00:14:55,470 --> 00:15:04,300
dilib she calls it will have replaced

00:15:00,670 --> 00:15:08,110
the standard gypsy by its own

00:15:04,300 --> 00:15:10,780
implementation that's one easy way for

00:15:08,110 --> 00:15:13,390
you to use applications like Skype and

00:15:10,780 --> 00:15:18,810
other closest source applications that

00:15:13,390 --> 00:15:18,810
don't support the library director

00:15:22,220 --> 00:15:30,179
finally the lib for video for links to

00:15:25,589 --> 00:15:33,859
and video falling to convert encapsulate

00:15:30,179 --> 00:15:37,829
everything into a video for links to a

00:15:33,859 --> 00:15:40,579
set of functions it uses the same

00:15:37,829 --> 00:15:44,579
concept as live with fall into one

00:15:40,579 --> 00:15:46,919
basically we have video for Linux two

00:15:44,579 --> 00:15:50,279
and this car opened closed every map and

00:15:46,919 --> 00:15:56,179
so on if I call using the video for

00:15:50,279 --> 00:15:59,790
links to prefix if you call the library

00:15:56,179 --> 00:16:03,569
otherwise I can also use LD preload to

00:15:59,790 --> 00:16:05,459
this end it you there emulate for you on

00:16:03,569 --> 00:16:09,689
skype and other closed source

00:16:05,459 --> 00:16:12,689
applications internal it calls live feed

00:16:09,689 --> 00:16:15,660
fallens convert so all those features

00:16:12,689 --> 00:16:16,970
are available directly here when we are

00:16:15,660 --> 00:16:20,040
using those libels

00:16:16,970 --> 00:16:24,660
and you can have generic applications

00:16:20,040 --> 00:16:27,239
using this in a way that applications

00:16:24,660 --> 00:16:30,029
don't actually need support all formats

00:16:27,239 --> 00:16:33,209
because and don't know don't need to

00:16:30,029 --> 00:16:35,819
know if they had have sensor in that or

00:16:33,209 --> 00:16:38,059
not because the library will do that for

00:16:35,819 --> 00:16:38,059
you

00:16:42,350 --> 00:16:47,600
it was really easy to go over taxes in

00:16:45,949 --> 00:16:50,870
applications to use a library because

00:16:47,600 --> 00:16:54,350
the only thing you need to do where to

00:16:50,870 --> 00:16:58,699
seek for open/close I O'Conner etc and

00:16:54,350 --> 00:17:02,019
replace by the add a new prefix to the

00:16:58,699 --> 00:17:07,189
square I account roast those controls

00:17:02,019 --> 00:17:11,120
adding the video for links to underscore

00:17:07,189 --> 00:17:13,669
prefix and that's it what's the problem

00:17:11,120 --> 00:17:16,880
with that the problem is that we had to

00:17:13,669 --> 00:17:20,510
stick exactly with the same video

00:17:16,880 --> 00:17:23,530
falling say P I had before we couldn't

00:17:20,510 --> 00:17:27,709
add new things because otherwise

00:17:23,530 --> 00:17:30,200
applications won't be recognized so it

00:17:27,709 --> 00:17:41,809
was easy to implement but it has some

00:17:30,200 --> 00:17:45,080
drawbacks what are the main troubles

00:17:41,809 --> 00:17:48,590
with the approach we've took first of

00:17:45,080 --> 00:17:52,640
all it is my there is a maintenance

00:17:48,590 --> 00:17:57,140
issue there if we add new stuff at the

00:17:52,640 --> 00:17:59,299
video for Linux API we need to write

00:17:57,140 --> 00:18:05,169
patches to the library in our dot

00:17:59,299 --> 00:18:05,169
support for those new system calls

00:18:06,070 --> 00:18:13,760
second one as we are doing emulation

00:18:09,290 --> 00:18:16,600
software emulation it has some issues on

00:18:13,760 --> 00:18:21,070
performance the algorithms there are

00:18:16,600 --> 00:18:23,720
supposed to be fast but they don't use

00:18:21,070 --> 00:18:26,990
special assembly instructions

00:18:23,720 --> 00:18:31,309
it doesn't use acceleration that some

00:18:26,990 --> 00:18:34,760
harder could be providing so it is not

00:18:31,309 --> 00:18:38,570
as the same as if you use for example

00:18:34,760 --> 00:18:41,330
the GPU for doing format conversions it

00:18:38,570 --> 00:18:44,090
is lower than that so depending on your

00:18:41,330 --> 00:18:47,540
needs depend if you are running on in

00:18:44,090 --> 00:18:52,390
bit device this may consume more battery

00:18:47,540 --> 00:18:55,370
this may not be performing very well so

00:18:52,390 --> 00:18:58,280
it is a way for the neck up gamers who

00:18:55,370 --> 00:19:05,090
but it has some side effects in terms of

00:18:58,280 --> 00:19:07,970
performance the most the biggest trouble

00:19:05,090 --> 00:19:11,150
right now is that it supports only

00:19:07,970 --> 00:19:15,620
traditional cameras it was not meant to

00:19:11,150 --> 00:19:18,500
work with complex camera hard it was not

00:19:15,620 --> 00:19:23,210
designed for that and that was okay

00:19:18,500 --> 00:19:26,809
until they're at you now because usually

00:19:23,210 --> 00:19:31,280
when we have any bit hard you have a

00:19:26,809 --> 00:19:33,770
different kind of needs and maybe camera

00:19:31,280 --> 00:19:37,340
is not what you want a little hard we

00:19:33,770 --> 00:19:40,970
need something else you you are doing

00:19:37,340 --> 00:19:44,990
for example images on your cell phone so

00:19:40,970 --> 00:19:46,910
you have may be needing to use two

00:19:44,990 --> 00:19:50,750
different cameras at the same time or

00:19:46,910 --> 00:19:54,320
may be using a higher resolution when

00:19:50,750 --> 00:19:59,720
you click on a button so it has

00:19:54,320 --> 00:20:05,780
different demands so that was okay but

00:19:59,720 --> 00:20:08,420
the thing is for vendors the model of

00:20:05,780 --> 00:20:11,630
complex camera are very very interesting

00:20:08,420 --> 00:20:13,580
because the only the sensor and

00:20:11,630 --> 00:20:16,750
everything else is inside the ship set

00:20:13,580 --> 00:20:20,750
that could be the same chipset and CPU

00:20:16,750 --> 00:20:22,940
so it is cheaper for a vendor to use a

00:20:20,750 --> 00:20:27,080
complex camera and move everything to

00:20:22,940 --> 00:20:29,480
softer instead of having a dedicated the

00:20:27,080 --> 00:20:35,800
harder for handling the camera itself

00:20:29,480 --> 00:20:40,730
and convert into an USB bus so most o

00:20:35,800 --> 00:20:44,690
SLC chipsets use this model and Intel

00:20:40,730 --> 00:20:48,710
itself is now using it at this model for

00:20:44,690 --> 00:20:51,650
notebook chipsets so there are a few

00:20:48,710 --> 00:20:56,059
there are few models already using this

00:20:51,650 --> 00:20:58,570
kind of cameras for notebooks so we need

00:20:56,059 --> 00:21:03,220
a solution now because of the wise

00:20:58,570 --> 00:21:06,170
generic applications won't work anymore

00:21:03,220 --> 00:21:09,190
let's say that I'm saying that if you

00:21:06,170 --> 00:21:12,170
are wanting to use your brows

00:21:09,190 --> 00:21:15,230
to do a video conferencing with someone

00:21:12,170 --> 00:21:19,160
you won't be able to do on Linux anymore

00:21:15,230 --> 00:21:21,590
if you have a newer heart so we need to

00:21:19,160 --> 00:21:28,160
fix this and we need to fix it

00:21:21,590 --> 00:21:32,090
quick real quick Jerry may also have

00:21:28,160 --> 00:21:35,570
some issues with live with for Linux the

00:21:32,090 --> 00:21:37,880
best issue here exactly because the guy

00:21:35,570 --> 00:21:41,030
that we're developing live with four

00:21:37,880 --> 00:21:45,290
limits he had some other things to do

00:21:41,030 --> 00:21:47,450
and he left the project and we don't

00:21:45,290 --> 00:21:50,240
have any active maintainer anymore for

00:21:47,450 --> 00:21:52,280
the library and as we added things that

00:21:50,240 --> 00:21:55,670
live with for Linux that with volumes

00:21:52,280 --> 00:21:58,840
API we started having trouble I won't

00:21:55,670 --> 00:22:02,270
get into details it doesn't really

00:21:58,840 --> 00:22:04,760
matter here but it is important to know

00:22:02,270 --> 00:22:07,580
that it has a read some issues that we

00:22:04,760 --> 00:22:11,680
know and that should be featured someday

00:22:07,580 --> 00:22:11,680
or we need to move some something else

00:22:13,360 --> 00:22:21,460
as I said before

00:22:16,280 --> 00:22:24,890
several modern harder are now based on

00:22:21,460 --> 00:22:30,110
the complexity we approach it started

00:22:24,890 --> 00:22:33,320
200 eight if luckiest cell phones and

00:22:30,110 --> 00:22:37,760
nowadays we have several newer hard

00:22:33,320 --> 00:22:43,010
using this model the first issue start

00:22:37,760 --> 00:22:46,130
with Intel Atom ISP driver he had to buy

00:22:43,010 --> 00:22:50,750
be remove it from the key a no it it was

00:22:46,130 --> 00:22:53,510
measured as a stage in driver nobody had

00:22:50,750 --> 00:22:55,070
time to mud fight we're on a really

00:22:53,510 --> 00:22:57,320
really poor condition

00:22:55,070 --> 00:23:00,350
he ended ib remove it and it was a

00:22:57,320 --> 00:23:03,040
specific for atom which is not really a

00:23:00,350 --> 00:23:07,340
big issue because you don't use the atom

00:23:03,040 --> 00:23:11,960
outside of crying people hard so we

00:23:07,340 --> 00:23:15,620
mostly don't use a meal but now the new

00:23:11,960 --> 00:23:19,970
approach from Intel Mobile is using IP

00:23:15,620 --> 00:23:21,610
block called IP u3 we have a red some

00:23:19,970 --> 00:23:25,780
top of

00:23:21,610 --> 00:23:29,000
there are notebooks using these chipsets

00:23:25,780 --> 00:23:32,300
if you have one of those harder like

00:23:29,000 --> 00:23:35,420
Dell Latitude five to eight five

00:23:32,300 --> 00:23:38,300
keep your camera won't work you need to

00:23:35,420 --> 00:23:42,380
buy another external camera using you as

00:23:38,300 --> 00:23:44,630
a bead because the one inside is complex

00:23:42,380 --> 00:23:47,660
camera and we don't have support for

00:23:44,630 --> 00:23:50,690
that neither at the kennel driver and

00:23:47,660 --> 00:23:54,800
nor user space applications we are work

00:23:50,690 --> 00:23:59,810
with Intel Dell and Google is not solve

00:23:54,800 --> 00:24:02,300
this problem but basically what we want

00:23:59,810 --> 00:24:06,430
right now is a solution that works for

00:24:02,300 --> 00:24:09,760
all kinds of Linux Bailey's vision a

00:24:06,430 --> 00:24:14,120
normal distribution on a notebook our

00:24:09,760 --> 00:24:16,040
desktop Android and Chrome OS and that's

00:24:14,120 --> 00:24:22,880
the kind of things that we are now

00:24:16,040 --> 00:24:27,740
working to solve okay we have a trouble

00:24:22,880 --> 00:24:32,600
we need to fix how can we do that we

00:24:27,740 --> 00:24:37,690
have that meeting in Japan on July with

00:24:32,600 --> 00:24:40,730
several parties it was at Google's site

00:24:37,690 --> 00:24:41,800
Google has intercepts on doing those

00:24:40,730 --> 00:24:44,720
kind of things

00:24:41,800 --> 00:24:48,530
we had people from Intel we had people

00:24:44,720 --> 00:24:52,670
from other companies and we've discussed

00:24:48,530 --> 00:24:56,140
a lot and the conclusion we've arrived

00:24:52,670 --> 00:25:01,180
at is that we should have a new library

00:24:56,140 --> 00:25:05,540
stack we are calling it in Lib camera

00:25:01,180 --> 00:25:10,300
and the idea is that the application

00:25:05,540 --> 00:25:14,780
will talk with this library the library

00:25:10,300 --> 00:25:17,720
internally will have handlers for

00:25:14,780 --> 00:25:21,500
example to set up pipelines inside the

00:25:17,720 --> 00:25:23,840
heart so when you select a resolution if

00:25:21,500 --> 00:25:28,700
you find the best way to provide you

00:25:23,840 --> 00:25:31,550
that resolution on that frame rate with

00:25:28,700 --> 00:25:33,790
that corrected is that you yourse often

00:25:31,550 --> 00:25:33,790
needs

00:25:34,060 --> 00:25:40,210
and if your camera has algorithms I need

00:25:38,170 --> 00:25:43,240
some algorithms in order to make the

00:25:40,210 --> 00:25:49,410
quality of the image better for example

00:25:43,240 --> 00:25:53,770
improving the focus or him adjusting the

00:25:49,410 --> 00:25:57,910
white balance and things like that he'll

00:25:53,770 --> 00:26:01,390
call another part of the library for

00:25:57,910 --> 00:26:07,420
those three algorithms that part is

00:26:01,390 --> 00:26:12,250
usually very specific so this model is

00:26:07,420 --> 00:26:17,020
meant to be open source using a generic

00:26:12,250 --> 00:26:21,910
appeases license but in this particular

00:26:17,020 --> 00:26:24,280
case we believe that we will need to run

00:26:21,910 --> 00:26:27,510
some very specific stuff that's what

00:26:24,280 --> 00:26:30,940
happens right now on the bit systems and

00:26:27,510 --> 00:26:35,710
the fact is that vendors don't usually

00:26:30,940 --> 00:26:38,020
open this kind of software yet we are

00:26:35,710 --> 00:26:41,680
planning to do in a way that if someone

00:26:38,020 --> 00:26:45,880
else wants to write a song triple a code

00:26:41,680 --> 00:26:49,780
it can do so it you support both a

00:26:45,880 --> 00:26:53,640
vendor specific improvement software and

00:26:49,780 --> 00:26:58,990
topping so soft this idea we are

00:26:53,640 --> 00:27:02,740
planning to do and we will have both the

00:26:58,990 --> 00:27:06,060
camera stack and those api's documented

00:27:02,740 --> 00:27:09,220
in a way that you can replace any time

00:27:06,060 --> 00:27:12,400
and applications won't need to know

00:27:09,220 --> 00:27:17,910
chemically snip details all of those

00:27:12,400 --> 00:27:17,910
will be inside the label camera approach

00:27:19,170 --> 00:27:27,040
the idea is you use the what is there on

00:27:22,450 --> 00:27:32,830
how Android house version 3 camera API

00:27:27,040 --> 00:27:36,070
as a start and we will be changing it as

00:27:32,830 --> 00:27:40,000
needed in order to make it more generic

00:27:36,070 --> 00:27:42,600
and in a way that can be used not only

00:27:40,000 --> 00:27:44,130
with Intel hard but with how hard that

00:27:42,600 --> 00:27:47,580
would have

00:27:44,130 --> 00:27:49,950
same requirements we are of course

00:27:47,580 --> 00:27:53,220
artificial because that's the thing that

00:27:49,950 --> 00:27:55,740
right now in front of us and that is

00:27:53,220 --> 00:28:04,020
cost areas most because it will affect

00:27:55,740 --> 00:28:08,060
our notebooks what's next we will have

00:28:04,020 --> 00:28:11,760
another presentation it will be tomorrow

00:28:08,060 --> 00:28:14,400
Roja will be presenting us from ideas on

00:28:11,760 --> 00:28:16,620
board he will be presented as another

00:28:14,400 --> 00:28:20,010
stuff that are related with complex

00:28:16,620 --> 00:28:26,580
cameras and cameras in general it will

00:28:20,010 --> 00:28:29,790
be tomorrow at 4:15 here I'm not sure

00:28:26,580 --> 00:28:35,220
what room but anyway is he sorry this

00:28:29,790 --> 00:28:39,180
room okay so it will be in this room we

00:28:35,220 --> 00:28:43,230
will be launching tomorrow to a hot site

00:28:39,180 --> 00:28:47,130
called live camera he to have a few

00:28:43,230 --> 00:28:50,940
things related with this project and we

00:28:47,130 --> 00:28:52,460
will be hosting the g3 for that project

00:28:50,940 --> 00:28:55,650
and Linda's tv.org

00:28:52,460 --> 00:29:01,100
it should also be available tomorrow the

00:28:55,650 --> 00:29:04,260
first initial commits of data a suspect

00:29:01,100 --> 00:29:08,160
and do you have a lot more discussions

00:29:04,260 --> 00:29:14,100
to happen on Thursday only at little

00:29:08,160 --> 00:29:16,800
media summit so the idea is to get the

00:29:14,100 --> 00:29:19,230
community involved on a solution of

00:29:16,800 --> 00:29:22,530
course it fields first commit will come

00:29:19,230 --> 00:29:25,530
from Intel and Google because they have

00:29:22,530 --> 00:29:27,800
the internal expect of this harder but

00:29:25,530 --> 00:29:31,380
the idea is to invite everyone to

00:29:27,800 --> 00:29:35,430
collaborate together in order to have a

00:29:31,380 --> 00:29:39,050
generic support for all kinds of cameras

00:29:35,430 --> 00:29:39,050
inside the delight

00:29:42,400 --> 00:29:48,130
that's it from my side any questions and

00:29:45,500 --> 00:29:48,130
comments

00:29:54,230 --> 00:29:56,980
nobody

00:29:59,540 --> 00:30:09,150
okay thank you for your time

00:30:02,290 --> 00:30:09,150

YouTube URL: https://www.youtube.com/watch?v=KpaNNJr92CY


