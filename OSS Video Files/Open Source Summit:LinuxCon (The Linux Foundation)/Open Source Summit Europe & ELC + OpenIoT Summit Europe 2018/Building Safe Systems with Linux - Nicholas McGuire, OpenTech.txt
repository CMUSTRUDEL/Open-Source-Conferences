Title: Building Safe Systems with Linux - Nicholas McGuire, OpenTech
Publication date: 2018-10-25
Playlist: Open Source Summit Europe & ELC + OpenIoT Summit Europe 2018
Description: 
	Building Safe Systems with Linux - Nicholas McGuire, OpenTech

With the increasing complexity of technical systems, as in autonomous robotic systems, the functionality of safety-related systems is dramatically changing and calling for elaborate capabilities, while at the same time demanding a high level of assurance. Linux is on the shortlist of many projects now due to its utility, its security capabilities, and its versatility, but can it be safe? It can be answered by assessing conformance to current functional safety standards. Defining and developing adequate methodologies for a safe Linux-based system was the goal of OSADL's SIL2LinuxMP project. Based on three years of work on SIL2LinuxMP at OSADL, Linux is a suitable candidate for complex safety-related systems.

The challenge is mapping the intent of functional safety standards to the concrete properties, capabilities, and limits of Linux. This talk shows the project's approach to compliance. 

About Nicholas McGuire
After working on Magnetic bearing control systems at the Technical University of Vienna, in 1995, Nicholas McGuire moved towards the other end of the spectrum towards clusters at the Inst. for Computational Material Science at the University of Vienna. With the focus shifting to real-time and distributed embedded systems, initially maintaining RTLinux/GPL (2001-2005), safety related systems were an almost natural next step since 2003. Nicholas main topic is system safety since he founded OpenTech, with a special focus on the utilization of pre-existing FLOSS/COTS components in safety-related systems and thus integration of high-complexity pre-existing (SOUP) components while retaining system level safety properties. He is the technical lead and main contributor in the OSADL SIL2LinuxMP project and has been giving talks at various conferences, FOSDEM, Embedded World, etc.
Captions: 
	00:00:00,060 --> 00:00:06,299
so welcome to this little introduction

00:00:03,270 --> 00:00:09,960
to building safety related systems with

00:00:06,299 --> 00:00:14,009
Linux the intent of this section session

00:00:09,960 --> 00:00:17,539
is to disappoint most of you so don't be

00:00:14,009 --> 00:00:21,689
too surprised okay go to the first one

00:00:17,539 --> 00:00:24,109
so some of the basic question you want

00:00:21,689 --> 00:00:26,519
to answer is what standard to use

00:00:24,109 --> 00:00:28,680
because there seems to be quite a bit of

00:00:26,519 --> 00:00:31,019
confusion or here a lot of confusion in

00:00:28,680 --> 00:00:34,620
industry about that of course this is my

00:00:31,019 --> 00:00:39,350
view it's based on working in safety now

00:00:34,620 --> 00:00:43,190
for a little bit more than 15 years and

00:00:39,350 --> 00:00:46,140
I started thinking about how to certify

00:00:43,190 --> 00:00:49,020
Linux in 2007 when we started the

00:00:46,140 --> 00:00:53,520
safety-critical linux working group at

00:00:49,020 --> 00:00:55,680
OSI dl and if we look at the target

00:00:53,520 --> 00:00:58,410
systems that people are trying to build

00:00:55,680 --> 00:01:01,020
and what components are trying to put

00:00:58,410 --> 00:01:03,449
into these target systems then we're

00:01:01,020 --> 00:01:06,979
talking about relatively powerful

00:01:03,449 --> 00:01:11,670
multi-core systems connected devices

00:01:06,979 --> 00:01:17,210
which means security comes in new

00:01:11,670 --> 00:01:17,210
concepts like using machine learning AI

00:01:17,570 --> 00:01:26,310
over there updates so new concepts new

00:01:22,380 --> 00:01:29,340
hardware new tools new measures and

00:01:26,310 --> 00:01:31,770
techniques needed for assessing the

00:01:29,340 --> 00:01:35,159
correctness of the system or the safety

00:01:31,770 --> 00:01:37,979
properties of the system new design

00:01:35,159 --> 00:01:40,079
methods my favorite question is to ask

00:01:37,979 --> 00:01:43,049
if anybody knows which real time Jordan

00:01:40,079 --> 00:01:45,960
is that's one of the specified design

00:01:43,049 --> 00:01:50,130
methods and I see standards don't worry

00:01:45,960 --> 00:01:52,380
we don't know it nobody knows it because

00:01:50,130 --> 00:01:55,710
a lot of the measures and techniques and

00:01:52,380 --> 00:01:58,920
these standards are safe carefully a

00:01:55,710 --> 00:02:03,840
little bit out of date they were written

00:01:58,920 --> 00:02:06,920
and late-1990s based on technical

00:02:03,840 --> 00:02:09,149
standards of the late 1980s and

00:02:06,920 --> 00:02:13,319
basically they were not really updated

00:02:09,149 --> 00:02:17,480
now in the new edition 2010 61508

00:02:13,319 --> 00:02:20,639
you do have a few new methods mentioned

00:02:17,480 --> 00:02:23,719
that's good but the old methods were not

00:02:20,639 --> 00:02:26,189
removed and is still mostly out of date

00:02:23,719 --> 00:02:29,700
then we come to the domain standards

00:02:26,189 --> 00:02:32,939
these domain standards use 61508 Edition

00:02:29,700 --> 00:02:34,409
1 as their base is not edition - so they

00:02:32,939 --> 00:02:38,400
are really out of date

00:02:34,409 --> 00:02:40,139
next one things so we end up in the

00:02:38,400 --> 00:02:42,120
situation the people are trying to use a

00:02:40,139 --> 00:02:44,760
domain standard because they say oh I'm

00:02:42,120 --> 00:02:48,930
building a rail system so I own you is

00:02:44,760 --> 00:02:52,530
use in 5128 for software or I'm building

00:02:48,930 --> 00:02:56,549
a car so I'll use ISO 26262 because it

00:02:52,530 --> 00:02:59,430
says vehicle's functional safety for

00:02:56,549 --> 00:03:03,540
vehicles on the title unfortunately

00:02:59,430 --> 00:03:05,819
these are based on what is a standards

00:03:03,540 --> 00:03:08,459
the consolidation of the state of the

00:03:05,819 --> 00:03:10,859
art of an industry the state of the art

00:03:08,459 --> 00:03:13,109
of the industry was microcontrollers

00:03:10,859 --> 00:03:17,729
riding running osek type operating

00:03:13,109 --> 00:03:21,989
system bare metal or maybe AUTOSAR on a

00:03:17,729 --> 00:03:24,680
single core so not anything that we're

00:03:21,989 --> 00:03:27,989
trying to do with with Linux now

00:03:24,680 --> 00:03:31,049
essentially just means that you can't

00:03:27,989 --> 00:03:33,930
use the domain standards if you're

00:03:31,049 --> 00:03:36,449
trying to implement something this new

00:03:33,930 --> 00:03:39,780
if we look at the history of functional

00:03:36,449 --> 00:03:42,389
safety we have never done that that we

00:03:39,780 --> 00:03:44,879
sort of switch all paradigms at once

00:03:42,389 --> 00:03:48,479
because that's a perfect recipe for

00:03:44,879 --> 00:03:51,329
disaster so what you normally do is you

00:03:48,479 --> 00:03:53,879
would be switching one of these issues

00:03:51,329 --> 00:03:56,579
after the author may be moving to

00:03:53,879 --> 00:04:02,189
multi-core or and keeping everything

00:03:56,579 --> 00:04:04,489
else stable or moving into a connected

00:04:02,189 --> 00:04:06,870
environment where you introduce security

00:04:04,489 --> 00:04:09,689
we're trying to do all of this at once

00:04:06,870 --> 00:04:11,789
and that's just not going to work aside

00:04:09,689 --> 00:04:13,620
from the simple fact that we don't have

00:04:11,789 --> 00:04:16,469
any certified Hardware but we'll get to

00:04:13,620 --> 00:04:17,849
that a little bit later so the solution

00:04:16,469 --> 00:04:21,539
that you have to then take is you have

00:04:17,849 --> 00:04:24,029
to go up the standards stack and say ok

00:04:21,539 --> 00:04:24,880
if you're you don't have a domain

00:04:24,029 --> 00:04:26,560
standard

00:04:24,880 --> 00:04:29,080
trying to do new stuff then you have to

00:04:26,560 --> 00:04:32,440
use one of the generic safety standards

00:04:29,080 --> 00:04:34,600
like 61508 and that scares a lot of

00:04:32,440 --> 00:04:36,910
people they say well but I want to use

00:04:34,600 --> 00:04:39,280
automotive or the rail or the chemical

00:04:36,910 --> 00:04:42,820
industry standards but actually it's

00:04:39,280 --> 00:04:44,800
much much harder to use one of the

00:04:42,820 --> 00:04:46,710
domain standards that is as a setter

00:04:44,800 --> 00:04:50,260
consolidation of previous

00:04:46,710 --> 00:04:53,170
state-of-the-art for new technologies so

00:04:50,260 --> 00:04:57,430
actually it's much simpler to use 61508

00:04:53,170 --> 00:05:00,640
and use ISO 26262 for autonomous cars to

00:04:57,430 --> 00:05:03,640
stay with a hot topic simply because the

00:05:00,640 --> 00:05:06,940
generic or basic safety standards as I

00:05:03,640 --> 00:05:10,780
see calls them were designed to be much

00:05:06,940 --> 00:05:14,110
more flexible make less assumptions on

00:05:10,780 --> 00:05:16,600
how they will be used and therefore also

00:05:14,110 --> 00:05:19,780
have the appropriate structure to be

00:05:16,600 --> 00:05:23,560
flexible and then just to make it very

00:05:19,780 --> 00:05:27,910
clear next one please if you are one of

00:05:23,560 --> 00:05:29,620
the people using ISO 26262 for

00:05:27,910 --> 00:05:32,080
autonomous cars you're using the wrong

00:05:29,620 --> 00:05:36,100
standard it would be really good thing

00:05:32,080 --> 00:05:38,740
to at least look at 61508 before you go

00:05:36,100 --> 00:05:43,000
on I've been asking especially not

00:05:38,740 --> 00:05:46,390
emotive industry who has read 61508 and

00:05:43,000 --> 00:05:48,850
found out that almost never anybody

00:05:46,390 --> 00:05:52,980
actually I know a single engineer that

00:05:48,850 --> 00:05:55,450
said he had read it even though it's

00:05:52,980 --> 00:05:57,630
normatively referenced which actually

00:05:55,450 --> 00:06:02,350
means that everybody should have read it

00:05:57,630 --> 00:06:05,130
ok so NIC phone please so that brings us

00:06:02,350 --> 00:06:08,860
to the question what is compliance

00:06:05,130 --> 00:06:10,780
because one of the reasons why we're

00:06:08,860 --> 00:06:15,130
trying to use standards is people want

00:06:10,780 --> 00:06:16,870
to be compliant to something the problem

00:06:15,130 --> 00:06:20,650
is that there's some misconceptions

00:06:16,870 --> 00:06:22,930
about compliance as well now if you do

00:06:20,650 --> 00:06:26,500
not comply to functional safety

00:06:22,930 --> 00:06:28,690
standards then the probability of you

00:06:26,500 --> 00:06:31,720
just not building a safe system is

00:06:28,690 --> 00:06:34,570
actually quite high now technically

00:06:31,720 --> 00:06:36,610
that's not really always true because we

00:06:34,570 --> 00:06:39,340
have a number of domains that don't have

00:06:36,610 --> 00:06:42,970
appropriate safety standards and have

00:06:39,340 --> 00:06:44,919
still been able to build safety systems

00:06:42,970 --> 00:06:46,659
I mean just automotive industry itself

00:06:44,919 --> 00:06:49,360
it's a good example where we had no

00:06:46,659 --> 00:06:51,909
functional safety standards at least not

00:06:49,360 --> 00:06:56,319
the formal level for many years and

00:06:51,909 --> 00:06:59,909
still cars weren't just randomly turning

00:06:56,319 --> 00:07:03,490
left or so on there was internal

00:06:59,909 --> 00:07:07,930
appropriate awareness of safety and

00:07:03,490 --> 00:07:10,599
there were precautions taken to build

00:07:07,930 --> 00:07:12,430
safe systems so it was not maybe a

00:07:10,599 --> 00:07:14,430
formal standard but there was de facto

00:07:12,430 --> 00:07:20,050
standards

00:07:14,430 --> 00:07:22,270
unfortunately ISO 26262 sort of came

00:07:20,050 --> 00:07:23,620
into this industry and they scared a lot

00:07:22,270 --> 00:07:26,110
of people and they said we have to be

00:07:23,620 --> 00:07:28,860
conforming to this and the decision was

00:07:26,110 --> 00:07:31,599
to blindly follow a standard which

00:07:28,860 --> 00:07:33,969
equally does not result in building a

00:07:31,599 --> 00:07:37,150
safe system you might have a compliance

00:07:33,969 --> 00:07:38,860
system but you're not safe safety

00:07:37,150 --> 00:07:41,949
standards or compliance or safety

00:07:38,860 --> 00:07:44,159
standards is just really this first line

00:07:41,949 --> 00:07:47,349
of defense to make sure that your

00:07:44,159 --> 00:07:50,560
internal safety processes your internal

00:07:47,349 --> 00:07:54,639
safety culture is reasonable and not

00:07:50,560 --> 00:07:57,759
going totally off into the wild that's

00:07:54,639 --> 00:08:00,310
what you supposed or what what I think

00:07:57,759 --> 00:08:02,680
that safety standards are intended t to

00:08:00,310 --> 00:08:04,330
use but not to follow them and

00:08:02,680 --> 00:08:08,740
especially not when you're following the

00:08:04,330 --> 00:08:11,740
wrong one and this is something that has

00:08:08,740 --> 00:08:16,620
to be I would say established in

00:08:11,740 --> 00:08:19,150
industry to a certain extent that the

00:08:16,620 --> 00:08:22,199
standards that we have now are really

00:08:19,150 --> 00:08:24,969
not guidelines that you can hold on to

00:08:22,199 --> 00:08:27,490
this is not like the previous standards

00:08:24,969 --> 00:08:31,979
generation that we had in 1980s early

00:08:27,490 --> 00:08:35,500
1990s some of you might know them new

00:08:31,979 --> 00:08:37,269
8004 which was extremely prescriptive

00:08:35,500 --> 00:08:39,940
standard to say you have to have a

00:08:37,269 --> 00:08:42,579
replicated power supply you have to have

00:08:39,940 --> 00:08:45,459
independence of I don't know some unit

00:08:42,579 --> 00:08:48,490
you have to have duplication and it

00:08:45,459 --> 00:08:50,050
didn't care about the use case and the

00:08:48,490 --> 00:08:52,440
reason why that was possible

00:08:50,050 --> 00:08:55,930
because the use cases over the use of

00:08:52,440 --> 00:08:59,020
electronic devices and safety related

00:08:55,930 --> 00:09:01,060
system was actually limited to

00:08:59,020 --> 00:09:04,120
relatively simple devices so they had a

00:09:01,060 --> 00:09:06,670
lot of commonality with growing

00:09:04,120 --> 00:09:09,100
complexity this commonality more or less

00:09:06,670 --> 00:09:14,130
disappears and that means at that point

00:09:09,100 --> 00:09:18,180
you have to use them as sort of guidance

00:09:14,130 --> 00:09:21,550
but not trying to stick to the each

00:09:18,180 --> 00:09:25,300
statement in the standard strictly so if

00:09:21,550 --> 00:09:28,000
you have to adjust each of these

00:09:25,300 --> 00:09:30,010
standards to your specific use case the

00:09:28,000 --> 00:09:37,770
higher the complexity the more of that

00:09:30,010 --> 00:09:42,310
you have to do and this this idea that

00:09:37,770 --> 00:09:45,490
yeah you can achieve safety of a system

00:09:42,310 --> 00:09:48,820
by being compliant as standard is really

00:09:45,490 --> 00:09:53,470
one of the fallacies that we have in a

00:09:48,820 --> 00:09:55,390
lot of industries compliance not only

00:09:53,470 --> 00:09:57,490
that it doesn't prove the safe system

00:09:55,390 --> 00:10:00,580
just as a side note also does not give

00:09:57,490 --> 00:10:02,680
you any legal guarantees which is I

00:10:00,580 --> 00:10:04,840
think one of the reasons why a lot of

00:10:02,680 --> 00:10:06,970
industries are trying to do that because

00:10:04,840 --> 00:10:10,020
they assume if we're compliant to some

00:10:06,970 --> 00:10:16,090
safety standard and we would have a

00:10:10,020 --> 00:10:20,310
reduced problem during any court cases I

00:10:16,090 --> 00:10:20,310
don't think that's going to be true

00:10:20,490 --> 00:10:27,130
generally if you do not follow standards

00:10:24,310 --> 00:10:29,650
then it's you that has to prove that

00:10:27,130 --> 00:10:32,770
your system is safe if you did follow a

00:10:29,650 --> 00:10:36,460
standard then it will be the other

00:10:32,770 --> 00:10:38,770
side's duty to prove that you did not

00:10:36,460 --> 00:10:41,110
follow it correctly or they didn't do it

00:10:38,770 --> 00:10:43,360
properly which is generally considered

00:10:41,110 --> 00:10:45,640
to be harder but if you follow the wrong

00:10:43,360 --> 00:10:47,290
standard it's going to be trivial and

00:10:45,640 --> 00:10:50,280
that's exactly what's happening at the

00:10:47,290 --> 00:10:57,160
moment ok next one please

00:10:50,280 --> 00:11:00,670
so basically we have two types of

00:10:57,160 --> 00:11:03,439
systems and that's also sort of the next

00:11:00,670 --> 00:11:05,879
confusion that I see in industry

00:11:03,439 --> 00:11:07,980
when we're talking about compliance to a

00:11:05,879 --> 00:11:10,499
standard none of the standards actually

00:11:07,980 --> 00:11:14,040
is a specification for a particular

00:11:10,499 --> 00:11:16,259
system its specification for a class of

00:11:14,040 --> 00:11:19,470
system for a very very broad class of

00:11:16,259 --> 00:11:22,709
systems and in some industries these

00:11:19,470 --> 00:11:24,809
classes have been we are quite constant

00:11:22,709 --> 00:11:28,620
over the years we look in real industry

00:11:24,809 --> 00:11:30,089
an interlocking system in 1925 actually

00:11:28,620 --> 00:11:32,370
had basically the same high level

00:11:30,089 --> 00:11:36,240
requirement and an interlocking system

00:11:32,370 --> 00:11:40,319
has in 2018 it was manually operated in

00:11:36,240 --> 00:11:43,620
nineteen in the 1920s mechanically

00:11:40,319 --> 00:11:46,319
operated in the 1950s and electrically

00:11:43,620 --> 00:11:49,319
now it's done by computers but the basic

00:11:46,319 --> 00:11:52,110
requirements did not really change you

00:11:49,319 --> 00:11:56,100
want to have prevent head-on collision

00:11:52,110 --> 00:12:01,079
site collisions follow-up collisions and

00:11:56,100 --> 00:12:03,600
so on there's not that many rules so in

00:12:01,079 --> 00:12:06,509
that sense we can make a domain standard

00:12:03,600 --> 00:12:10,649
because we know the potential high level

00:12:06,509 --> 00:12:13,800
hazards of the system the sort of the

00:12:10,649 --> 00:12:16,170
technology agnostic level of the system

00:12:13,800 --> 00:12:18,990
what this has it is similar in cars we

00:12:16,170 --> 00:12:20,670
know that brakes fail it's it's going to

00:12:18,990 --> 00:12:22,589
be hazardous we don't really care which

00:12:20,670 --> 00:12:25,069
technology you're using for its brakes

00:12:22,589 --> 00:12:27,839
we don't care if it's manually or

00:12:25,069 --> 00:12:30,240
electronically operated brake we can

00:12:27,839 --> 00:12:35,069
estimate which impact a failure of a

00:12:30,240 --> 00:12:38,870
braking system would have but when you

00:12:35,069 --> 00:12:41,670
get to a highly diversified area or

00:12:38,870 --> 00:12:44,879
introduction of new technologies then

00:12:41,670 --> 00:12:47,490
the domain standards fail and the task

00:12:44,879 --> 00:12:50,699
to do with that domain standards

00:12:47,490 --> 00:12:53,819
conceptually we're doing a translation

00:12:50,699 --> 00:12:57,329
from type B system to type A systems so

00:12:53,819 --> 00:12:59,999
a type a system or low complexity system

00:12:57,329 --> 00:13:02,670
is a system where we know all faults or

00:12:59,999 --> 00:13:06,870
failure modes that are possible or at

00:13:02,670 --> 00:13:09,600
least reasonably high percentage of the

00:13:06,870 --> 00:13:11,839
failure modes and more importantly we

00:13:09,600 --> 00:13:13,840
understand how the system will behave

00:13:11,839 --> 00:13:17,260
under failure condition

00:13:13,840 --> 00:13:21,310
that means that opens the mitigation

00:13:17,260 --> 00:13:23,080
potential of monitoring and reactive

00:13:21,310 --> 00:13:25,840
response in the system by an independent

00:13:23,080 --> 00:13:29,410
second system like think of a watchdog

00:13:25,840 --> 00:13:32,560
timer or intelligent monitoring system

00:13:29,410 --> 00:13:37,150
that can detect some animal e in the

00:13:32,560 --> 00:13:39,360
system and then respond and finally all

00:13:37,150 --> 00:13:41,890
of this assessment of criticality

00:13:39,360 --> 00:13:43,750
because basically the risk that we try

00:13:41,890 --> 00:13:47,350
to mitigate its probability time

00:13:43,750 --> 00:13:50,860
severity now severity can be judged in

00:13:47,350 --> 00:13:54,310
context but probability generally cannot

00:13:50,860 --> 00:13:57,130
be judged so we have some reliable data

00:13:54,310 --> 00:14:00,910
hopefully reliable data from previous

00:13:57,130 --> 00:14:03,220
similar systems and we have that and we

00:14:00,910 --> 00:14:06,210
can judge the severity in the context of

00:14:03,220 --> 00:14:10,690
the specific system then we basically

00:14:06,210 --> 00:14:13,660
have the necessary data to do risk

00:14:10,690 --> 00:14:15,820
estimation of the system now if any one

00:14:13,660 --> 00:14:17,890
of these requirements or these

00:14:15,820 --> 00:14:20,410
assumptions is not satisfied learner

00:14:17,890 --> 00:14:24,220
type B systems so we don't know all

00:14:20,410 --> 00:14:27,130
failure modes or we don't know the

00:14:24,220 --> 00:14:29,170
behavior of the system under one of or

00:14:27,130 --> 00:14:33,160
more the failure mode or we don't have

00:14:29,170 --> 00:14:36,040
reliable field data and this applies to

00:14:33,160 --> 00:14:39,310
absolutely every system that's trying to

00:14:36,040 --> 00:14:42,430
use Linux they're Type B systems all the

00:14:39,310 --> 00:14:44,890
domain standards are for Type A systems

00:14:42,430 --> 00:14:47,470
because the assumption was we have a

00:14:44,890 --> 00:14:49,870
consolidated knowledgebase for this

00:14:47,470 --> 00:14:53,170
domain because we have this consolidated

00:14:49,870 --> 00:14:55,570
knowledgebase we can actually treat them

00:14:53,170 --> 00:14:57,250
as Type A systems we have enough

00:14:55,570 --> 00:14:59,980
experience that we have the reliability

00:14:57,250 --> 00:15:02,590
data we have an understanding of the

00:14:59,980 --> 00:15:04,210
potential failure modes this is not true

00:15:02,590 --> 00:15:06,640
for any of the new systems that we're

00:15:04,210 --> 00:15:09,760
trying to build be it autonomous robots

00:15:06,640 --> 00:15:12,370
cars or some of the upcoming medical

00:15:09,760 --> 00:15:16,000
devices and this is going to be a

00:15:12,370 --> 00:15:18,040
critical point because that test of

00:15:16,000 --> 00:15:19,840
course is connected to the idea of

00:15:18,040 --> 00:15:23,310
conformance in which standard we are

00:15:19,840 --> 00:15:26,200
using so essentially as soon as you're

00:15:23,310 --> 00:15:27,390
at the point where you're in a type B

00:15:26,200 --> 00:15:29,820
system

00:15:27,390 --> 00:15:34,800
most of the domain standards explicitly

00:15:29,820 --> 00:15:36,810
refer you back to 61508 like 20 60 206

00:15:34,800 --> 00:15:39,350
t14 machine-tools will actually say if

00:15:36,810 --> 00:15:42,540
you have a type B system go use 61508

00:15:39,350 --> 00:15:46,370
and when you're done with 61508 and you

00:15:42,540 --> 00:15:48,959
can incorporate this sort of analyzed

00:15:46,370 --> 00:15:52,200
pre-certified dangerous word to use with

00:15:48,959 --> 00:15:55,019
these analyze system in to the machine

00:15:52,200 --> 00:15:58,410
tool and treat it as a low complexity

00:15:55,019 --> 00:16:01,649
system again or a type a system because

00:15:58,410 --> 00:16:07,230
you qualified it to a generic standard

00:16:01,649 --> 00:16:09,779
this is how a 61 5:11 for chemical

00:16:07,230 --> 00:16:14,850
industry treated or 51 28 for a real

00:16:09,779 --> 00:16:18,690
industry treats it now ISO 26262 the one

00:16:14,850 --> 00:16:21,570
standard alike the bosch almost forgot

00:16:18,690 --> 00:16:23,339
to put this little line into the

00:16:21,570 --> 00:16:25,440
standard saying that if you have a type

00:16:23,339 --> 00:16:28,230
b system go back to 61508

00:16:25,440 --> 00:16:30,959
but implicitly it it does the same thing

00:16:28,230 --> 00:16:33,240
is all that the domain standards so this

00:16:30,959 --> 00:16:35,910
difference of which system type you're

00:16:33,240 --> 00:16:37,920
building is really essential and if we

00:16:35,910 --> 00:16:40,440
go back to the principle of functional

00:16:37,920 --> 00:16:43,050
safety what functional safety is really

00:16:40,440 --> 00:16:45,480
trying to do is you take a system and

00:16:43,050 --> 00:16:48,390
you're trying to analyze it and

00:16:45,480 --> 00:16:50,820
especially you're analyzing not testing

00:16:48,390 --> 00:16:52,949
you're trying to analyze it to the point

00:16:50,820 --> 00:16:55,350
where you're actually in a certain way

00:16:52,949 --> 00:16:58,199
doing a transition from a type b to a

00:16:55,350 --> 00:17:01,290
type a systems because we know that we

00:16:58,199 --> 00:17:03,449
can't actually build safe type B systems

00:17:01,290 --> 00:17:06,900
if you don't know the behavior under

00:17:03,449 --> 00:17:09,990
fault condition it can't be safe so

00:17:06,900 --> 00:17:11,819
essentially that's our target to get

00:17:09,990 --> 00:17:16,350
every system to the point where we have

00:17:11,819 --> 00:17:18,870
a Type A system as I said sometimes we

00:17:16,350 --> 00:17:21,569
can't do it and then we substitute that

00:17:18,870 --> 00:17:24,900
some of the portions of the system might

00:17:21,569 --> 00:17:28,770
stay type B but then we use basic safety

00:17:24,900 --> 00:17:32,570
stands like 61 5 way to mitigate this

00:17:28,770 --> 00:17:37,020
elevated level of risk and that's really

00:17:32,570 --> 00:17:38,580
where 61508 gets its flexibility from

00:17:37,020 --> 00:17:40,750
because they did not make any

00:17:38,580 --> 00:17:42,940
assumptions on the domain

00:17:40,750 --> 00:17:45,100
in the use case and they have to give

00:17:42,940 --> 00:17:50,789
you the full spectrum of what must be

00:17:45,100 --> 00:17:53,970
able to what you must be able to do so

00:17:50,789 --> 00:17:56,580
keeping that in mind that's where we are

00:17:53,970 --> 00:18:00,510
we're trying to build type-a systems

00:17:56,580 --> 00:18:08,440
next one that which would be hardware

00:18:00,510 --> 00:18:11,620
yeah okay so how is 61508 going to treat

00:18:08,440 --> 00:18:14,440
this and basically we have a structure

00:18:11,620 --> 00:18:15,760
we're 61508 and all this derivative

00:18:14,440 --> 00:18:17,380
standards say first you have to

00:18:15,760 --> 00:18:19,870
understand your system you have to build

00:18:17,380 --> 00:18:23,650
up the context of your system you have

00:18:19,870 --> 00:18:25,419
to know what your use case is which in

00:18:23,650 --> 00:18:27,789
context hazards you have and then you

00:18:25,419 --> 00:18:29,919
can go into hardware and software for

00:18:27,789 --> 00:18:31,450
the implementation but again I'm just

00:18:29,919 --> 00:18:34,809
looking at the hardware in the software

00:18:31,450 --> 00:18:38,110
will not allow you to do that

00:18:34,809 --> 00:18:40,240
we do have pre certified hardware for

00:18:38,110 --> 00:18:42,490
low complexity systems you can bike

00:18:40,240 --> 00:18:45,490
gravity relays that are certified to

00:18:42,490 --> 00:18:47,620
sell three that's simply big as the use

00:18:45,490 --> 00:18:50,409
case of gravity relay is really quite

00:18:47,620 --> 00:18:53,350
limited and we can exhaustively

00:18:50,409 --> 00:18:55,030
enumerate all of the input state and

00:18:53,350 --> 00:18:58,150
output states of these things in all

00:18:55,030 --> 00:19:01,110
possible error modes and we're done so

00:18:58,150 --> 00:19:04,870
you can do it totally out of context and

00:19:01,110 --> 00:19:08,320
similarly if we look at Hardware part

00:19:04,870 --> 00:19:11,669
two and 61508 covering that we have

00:19:08,320 --> 00:19:14,950
compliance routes defined there that is

00:19:11,669 --> 00:19:16,900
trying to again get close to this

00:19:14,950 --> 00:19:19,270
situation where we understand the system

00:19:16,900 --> 00:19:23,080
fully basically we have two compliance

00:19:19,270 --> 00:19:26,470
routes h1 which looks at the fault

00:19:23,080 --> 00:19:29,110
tolerance capabilities of hardware and a

00:19:26,470 --> 00:19:32,080
safe failure fraction now safely in the

00:19:29,110 --> 00:19:34,840
fraction is basically somewhat

00:19:32,080 --> 00:19:36,490
simplified you look at all the failure

00:19:34,840 --> 00:19:38,980
modes that you know when you say which

00:19:36,490 --> 00:19:41,860
one of these failure modes is going to

00:19:38,980 --> 00:19:44,830
be safety critical in which not very

00:19:41,860 --> 00:19:47,820
often if you have a fail stop system

00:19:44,830 --> 00:19:50,440
then all crashes are not safety critical

00:19:47,820 --> 00:19:54,029
if you have a failed operational system

00:19:50,440 --> 00:19:59,129
then crashes of a single system would of

00:19:54,029 --> 00:20:01,979
be critical so typically systems that

00:19:59,129 --> 00:20:04,499
can stop will have a elevated safe

00:20:01,979 --> 00:20:07,889
failure fraction now we have to do this

00:20:04,499 --> 00:20:09,869
analysis and this analysis is in context

00:20:07,889 --> 00:20:12,019
and the higher the complexity of the

00:20:09,869 --> 00:20:15,509
hardware is getting the worse this is

00:20:12,019 --> 00:20:19,769
getting and the more assessment has to

00:20:15,509 --> 00:20:23,399
be done for element that will never be

00:20:19,769 --> 00:20:25,499
used if we look at a complex system than

00:20:23,399 --> 00:20:28,469
it is quite common that only a fraction

00:20:25,499 --> 00:20:31,019
of the hardware is actually being used

00:20:28,469 --> 00:20:33,769
you know number of hardware used on the

00:20:31,019 --> 00:20:36,599
platform that might just never be used

00:20:33,769 --> 00:20:39,989
so certifying Hardware out of context

00:20:36,599 --> 00:20:42,629
will be a painful thing and again with

00:20:39,989 --> 00:20:44,609
very high complexity trying to analyze

00:20:42,629 --> 00:20:45,809
this they feel infraction out of context

00:20:44,609 --> 00:20:48,089
it's going to be impossible

00:20:45,809 --> 00:20:53,309
the second path that we have for

00:20:48,089 --> 00:20:56,339
Hardware h2 is that we build up adequate

00:20:53,309 --> 00:20:59,129
dependability data unfortunately that's

00:20:56,339 --> 00:21:02,899
quite well specified what dependability

00:20:59,129 --> 00:21:06,839
data is and just got a pointy - I see

00:21:02,899 --> 00:21:10,559
6300 - two dots three as sort of the

00:21:06,839 --> 00:21:12,719
entry point in a set that is about sixty

00:21:10,559 --> 00:21:14,820
IEC standards long that describes the

00:21:12,719 --> 00:21:16,830
different properties statistical

00:21:14,820 --> 00:21:19,469
properties and so on that you can

00:21:16,830 --> 00:21:21,570
extract from field data field data

00:21:19,469 --> 00:21:24,719
itself is something that is very

00:21:21,570 --> 00:21:28,339
numerically specification in all of the

00:21:24,719 --> 00:21:30,899
standards but there seems to be a strong

00:21:28,339 --> 00:21:32,489
idea that oh we'll just collect enough

00:21:30,899 --> 00:21:35,159
data and then we will be good

00:21:32,489 --> 00:21:37,529
unfortunately that doesn't work and if

00:21:35,159 --> 00:21:40,649
you look at this 6300 series of

00:21:37,529 --> 00:21:43,139
standards which is a very large series

00:21:40,649 --> 00:21:45,960
of standards and some of the derived

00:21:43,139 --> 00:21:46,979
standards then you will see why this is

00:21:45,960 --> 00:21:50,700
not so simple

00:21:46,979 --> 00:21:52,649
I'm not mentioning the 14 to 24 because

00:21:50,700 --> 00:21:54,049
that's just for low complexity systems

00:21:52,649 --> 00:21:57,299
that comes from the chemical industry

00:21:54,049 --> 00:22:00,029
probably not too interesting for anybody

00:21:57,299 --> 00:22:01,469
that's looking at Linux based platform

00:22:00,029 --> 00:22:05,009
because you're not going to have low

00:22:01,469 --> 00:22:06,839
complexity components in there so

00:22:05,009 --> 00:22:07,290
essentially you're collecting data in

00:22:06,839 --> 00:22:11,430
the sec

00:22:07,290 --> 00:22:14,310
compliance route collecting it not by

00:22:11,430 --> 00:22:16,980
just using field data but do you have to

00:22:14,310 --> 00:22:19,020
collect it by appropriate standards and

00:22:16,980 --> 00:22:21,720
specifications again for it actually to

00:22:19,020 --> 00:22:23,670
be valid and when you have that and you

00:22:21,720 --> 00:22:26,250
can do the net do an assessment what

00:22:23,670 --> 00:22:27,900
you're really trying to get back is just

00:22:26,250 --> 00:22:30,900
you're trying to do this transformation

00:22:27,900 --> 00:22:32,970
back to type a system we have to know

00:22:30,900 --> 00:22:36,600
what the systems failure modes are how

00:22:32,970 --> 00:22:37,980
the behavior and do the system is or the

00:22:36,600 --> 00:22:40,040
behavior of the system during the

00:22:37,980 --> 00:22:44,730
failure conditions and we have to have

00:22:40,040 --> 00:22:46,440
reasonable justified assurance that the

00:22:44,730 --> 00:22:48,660
numbers that were assuming for the

00:22:46,440 --> 00:22:51,690
failure rates are plausible that's why

00:22:48,660 --> 00:22:52,520
he needs such a rigorous data okay next

00:22:51,690 --> 00:22:58,080
one

00:22:52,520 --> 00:23:00,030
so if we ever get a certified multi-core

00:22:58,080 --> 00:23:03,480
system on this planet currently we don't

00:23:00,030 --> 00:23:05,640
have a single one I'm still waiting for

00:23:03,480 --> 00:23:07,260
it I think that we actually have to sit

00:23:05,640 --> 00:23:09,300
down write a new standard for that

00:23:07,260 --> 00:23:11,730
to avoid this to happen but that's a

00:23:09,300 --> 00:23:14,490
different story then we have to look at

00:23:11,730 --> 00:23:18,330
the software stack and the software

00:23:14,490 --> 00:23:20,580
stack were talking about Linux for our

00:23:18,330 --> 00:23:22,770
safety latest system we're really doing

00:23:20,580 --> 00:23:25,380
a paradigm shift here because we're

00:23:22,770 --> 00:23:28,050
talking about in orders or many orders

00:23:25,380 --> 00:23:31,560
of magnitude larger systems than we

00:23:28,050 --> 00:23:33,510
previously were using and the prime

00:23:31,560 --> 00:23:35,100
reason why looking at Linux becomes

00:23:33,510 --> 00:23:39,210
interesting for safety is actually not

00:23:35,100 --> 00:23:42,180
safety but versatility and security

00:23:39,210 --> 00:23:46,590
because all the Linux systems that I've

00:23:42,180 --> 00:23:51,000
known to be under development for safety

00:23:46,590 --> 00:23:52,590
are connected systems or will be

00:23:51,000 --> 00:23:55,460
connected to systems and that means

00:23:52,590 --> 00:23:56,730
security becomes an important issue

00:23:55,460 --> 00:23:59,640
00:23:56,730 --> 00:24:01,590
does consider c'n security unfortunately

00:23:59,640 --> 00:24:05,040
the derived standards generally do not

00:24:01,590 --> 00:24:08,730
and if you have credible threats and

00:24:05,040 --> 00:24:12,750
just point you into I see 62 443 which

00:24:08,730 --> 00:24:15,450
unfortunately is not completed yet but

00:24:12,750 --> 00:24:17,550
at least it registered that if you want

00:24:15,450 --> 00:24:19,230
to do all over-the-air updates then

00:24:17,550 --> 00:24:20,390
might be a good idea to consider

00:24:19,230 --> 00:24:22,519
security

00:24:20,390 --> 00:24:24,470
and this is really one of the big

00:24:22,519 --> 00:24:26,990
changes that we have with this level of

00:24:24,470 --> 00:24:29,779
complexity we're not talking about

00:24:26,990 --> 00:24:32,299
certifying a system we're talking about

00:24:29,779 --> 00:24:34,909
maintaining a safe state of the system

00:24:32,299 --> 00:24:36,320
even though the thing will have updates

00:24:34,909 --> 00:24:40,299
on a weekly basis

00:24:36,320 --> 00:24:43,490
even a small kernel configuration with a

00:24:40,299 --> 00:24:46,610
limited gilepsy support you have to

00:24:43,490 --> 00:24:50,179
expect that you will have one or two

00:24:46,610 --> 00:24:53,120
patches in mainline stable kernel per

00:24:50,179 --> 00:24:56,210
week not all of them will be safety

00:24:53,120 --> 00:24:58,370
related my current estimated that

00:24:56,210 --> 00:25:01,490
roughly one out of 30 will be safety

00:24:58,370 --> 00:25:03,679
related that means you're going to have

00:25:01,490 --> 00:25:06,590
quite frequent updates sometimes you can

00:25:03,679 --> 00:25:09,860
get away with this D rating a system

00:25:06,590 --> 00:25:12,260
were temporarily disabling a feature but

00:25:09,860 --> 00:25:14,809
essentially the dynamics of these

00:25:12,260 --> 00:25:16,639
systems is dramatically higher so give

00:25:14,809 --> 00:25:20,450
back getting back to the compliance

00:25:16,639 --> 00:25:22,929
route or compliance issue my 61508

00:25:20,450 --> 00:25:26,179
basically allows three compliance routes

00:25:22,929 --> 00:25:29,450
bespoke development just follow the

00:25:26,179 --> 00:25:33,590
standard not an option if you want to

00:25:29,450 --> 00:25:35,960
build a Linux system route 2's proven in

00:25:33,590 --> 00:25:37,880
use that's sort of something that you

00:25:35,960 --> 00:25:41,000
should immediately delete from your

00:25:37,880 --> 00:25:42,950
memory again don't even try using proven

00:25:41,000 --> 00:25:45,019
and use for anything that's more than a

00:25:42,950 --> 00:25:47,929
wild one running on an 8-bit

00:25:45,019 --> 00:25:50,299
microcontroller so we're left with route

00:25:47,929 --> 00:25:52,190
3s which is assessment of non-compliant

00:25:50,299 --> 00:25:55,340
development not going to go into the

00:25:52,190 --> 00:25:56,779
details of assessment of non-compliant

00:25:55,340 --> 00:25:59,299
development because it actually means

00:25:56,779 --> 00:26:02,269
I'm explaining all of part three of

00:25:59,299 --> 00:26:05,360
61508 even though it's a single class

00:26:02,269 --> 00:26:08,269
but through its iteration it sort of

00:26:05,360 --> 00:26:12,230
evolves through the entire standard the

00:26:08,269 --> 00:26:14,570
essence of route 3s is saying if we have

00:26:12,230 --> 00:26:17,510
complex software components that are

00:26:14,570 --> 00:26:21,980
doing anything reasonable there must be

00:26:17,510 --> 00:26:23,600
some basis some reasonable procedural

00:26:21,980 --> 00:26:25,519
basis that created this software

00:26:23,600 --> 00:26:29,120
otherwise it would be exploding all the

00:26:25,519 --> 00:26:31,010
time so essentially you saying bespoke

00:26:29,120 --> 00:26:34,130
development is you take some rigorous

00:26:31,010 --> 00:26:38,330
process be it a spiced ISO 9000

00:26:34,130 --> 00:26:40,460
one or a CMMI you apply these methods

00:26:38,330 --> 00:26:42,500
you generate software and then you

00:26:40,460 --> 00:26:45,919
monitor it and you will have some bug

00:26:42,500 --> 00:26:49,039
rate or fix rate or whatever in the

00:26:45,919 --> 00:26:51,080
software and assessment of non compliant

00:26:49,039 --> 00:26:54,770
development is just saying take the

00:26:51,080 --> 00:26:59,480
process as is assess it find its gaps

00:26:54,770 --> 00:27:02,360
find out how good is it identify gaps in

00:26:59,480 --> 00:27:05,150
the process mitigate these gaps mitigate

00:27:02,360 --> 00:27:08,539
these gaps by either doing architectural

00:27:05,150 --> 00:27:10,669
protection moving protection into the

00:27:08,539 --> 00:27:14,600
application level which will never be

00:27:10,669 --> 00:27:18,880
pre-existing or by putting constraints

00:27:14,600 --> 00:27:21,260
on the elements use not by modifying it

00:27:18,880 --> 00:27:23,870
even though the standard does have one

00:27:21,260 --> 00:27:25,850
bug in it where it says we can modify to

00:27:23,870 --> 00:27:27,740
eliminate dead code I would not

00:27:25,850 --> 00:27:29,600
recommend even trying that path for the

00:27:27,740 --> 00:27:33,530
Linux kernel because it would be an

00:27:29,600 --> 00:27:35,150
extremely invasive thing to do so

00:27:33,530 --> 00:27:38,600
essentially what you're trying to do is

00:27:35,150 --> 00:27:41,659
you're trying to look at the bug

00:27:38,600 --> 00:27:45,830
development or the incident development

00:27:41,659 --> 00:27:49,130
and by doing that assess if the

00:27:45,830 --> 00:27:52,130
documented process is as good as a

00:27:49,130 --> 00:27:53,840
bespoke process and this is careful I

00:27:52,130 --> 00:27:55,870
have to be careful how to formulate that

00:27:53,840 --> 00:27:59,030
because some people have taken this as

00:27:55,870 --> 00:28:01,640
proven in use through the backdoor it's

00:27:59,030 --> 00:28:03,919
not that you're just doing bug tracking

00:28:01,640 --> 00:28:05,330
and saying oh we have five residual box

00:28:03,919 --> 00:28:07,940
in the Linux kernel for this

00:28:05,330 --> 00:28:09,799
configuration so we're good that's not

00:28:07,940 --> 00:28:13,039
what you're doing you're saying if the

00:28:09,799 --> 00:28:15,169
process is as good as a bespoke process

00:28:13,039 --> 00:28:17,210
then we should not have a too high bug

00:28:15,169 --> 00:28:20,230
rate that's what you're trying to assess

00:28:17,210 --> 00:28:23,270
but essentially the only way to remove

00:28:20,230 --> 00:28:26,900
systematic faults in complex system is

00:28:23,270 --> 00:28:29,330
by process so it's documenting the

00:28:26,900 --> 00:28:31,159
process assessing the process and that's

00:28:29,330 --> 00:28:33,830
why this route is called assessment of

00:28:31,159 --> 00:28:34,330
non-compliant development and next one

00:28:33,830 --> 00:28:37,700
please

00:28:34,330 --> 00:28:41,840
so assessment of non-compliant

00:28:37,700 --> 00:28:44,750
development for is our compliance route

00:28:41,840 --> 00:28:47,010
that we are intending to use for the

00:28:44,750 --> 00:28:53,370
pre-existing element like those nukes

00:28:47,010 --> 00:28:56,820
gilepsy minimum busybox set yeah some of

00:28:53,370 --> 00:28:58,380
the tools and so on a number of

00:28:56,820 --> 00:29:02,580
technology that we're using for

00:28:58,380 --> 00:29:05,190
protection but sis safety just like

00:29:02,580 --> 00:29:08,160
security is a system property and not an

00:29:05,190 --> 00:29:10,679
element property so when we're talking

00:29:08,160 --> 00:29:13,130
about building a system with Linux we're

00:29:10,679 --> 00:29:16,440
always talking about a system

00:29:13,130 --> 00:29:18,270
development lifecycle and the top part

00:29:16,440 --> 00:29:21,660
of the system development lifecycle

00:29:18,270 --> 00:29:24,510
developing the requirements for the

00:29:21,660 --> 00:29:27,179
specific system as well as the overall

00:29:24,510 --> 00:29:31,169
software and system design is never

00:29:27,179 --> 00:29:33,750
going to be pre-existing at least not at

00:29:31,169 --> 00:29:36,690
the beginning of the use of a Linux

00:29:33,750 --> 00:29:38,100
kernel or Linux for safety and really

00:29:36,690 --> 00:29:41,570
that's again again the difference

00:29:38,100 --> 00:29:43,860
between the domain standards and 61508

00:29:41,570 --> 00:29:46,470
because in this domain standard here

00:29:43,860 --> 00:29:49,080
assuming that these top parts of the

00:29:46,470 --> 00:29:52,320
development lifecycle requirements

00:29:49,080 --> 00:29:54,690
design would also be more or less

00:29:52,320 --> 00:29:57,090
following a common patterning actually

00:29:54,690 --> 00:29:58,770
could be covered at least largely by the

00:29:57,090 --> 00:30:02,880
safety standard

00:29:58,770 --> 00:30:04,760
so in 61508 they don't make any such

00:30:02,880 --> 00:30:07,049
assumptions of they are very flexible

00:30:04,760 --> 00:30:09,900
but they assume that you're doing a

00:30:07,049 --> 00:30:12,299
bespoke development for this top part so

00:30:09,900 --> 00:30:15,419
requirements design basically we have to

00:30:12,299 --> 00:30:21,270
follow route 1s I'll just flip in the

00:30:15,419 --> 00:30:26,790
bottom part please so the system itself

00:30:21,270 --> 00:30:29,490
is is a 1s development and want you down

00:30:26,790 --> 00:30:33,350
to the design the overall software

00:30:29,490 --> 00:30:35,460
system design then rather than omitting

00:30:33,350 --> 00:30:37,860
requirements on the specific software

00:30:35,460 --> 00:30:42,480
element or hardware elements you would

00:30:37,860 --> 00:30:45,419
be omitting called a wish list what

00:30:42,480 --> 00:30:48,559
these elements should provide and then

00:30:45,419 --> 00:30:51,990
you would go and select adequate

00:30:48,559 --> 00:30:54,480
elements that can cover these functional

00:30:51,990 --> 00:30:56,190
and non-functional requirements now of

00:30:54,480 --> 00:31:00,050
course that's not going to be a precise

00:30:56,190 --> 00:31:03,050
mapping Linux kernel will not satisfy it

00:31:00,050 --> 00:31:05,240
exactly your specification it will have

00:31:03,050 --> 00:31:08,660
a whole bunch of dead code in it and

00:31:05,240 --> 00:31:11,000
will might have some functionality that

00:31:08,660 --> 00:31:14,060
is close but not exact and then you

00:31:11,000 --> 00:31:16,820
might have to do adjustments at the

00:31:14,060 --> 00:31:20,120
architectural level or at the

00:31:16,820 --> 00:31:23,450
application level then the actual

00:31:20,120 --> 00:31:26,060
elements that you selected that's where

00:31:23,450 --> 00:31:28,970
you want to use route 3s and we do

00:31:26,060 --> 00:31:33,730
expect that mid term we will have

00:31:28,970 --> 00:31:37,180
patterns emerging that will allow it to

00:31:33,730 --> 00:31:39,850
get very close to a pre certified

00:31:37,180 --> 00:31:42,470
element in the sense that the

00:31:39,850 --> 00:31:44,480
certification of the next Linux kernel

00:31:42,470 --> 00:31:47,420
will be more or less a routine task or

00:31:44,480 --> 00:31:50,840
the next gilepsy version but essentially

00:31:47,420 --> 00:31:52,310
there will not ever be a pre certified

00:31:50,840 --> 00:31:55,730
Linux kernel that you download and

00:31:52,310 --> 00:31:58,100
you're safe and finally we have then of

00:31:55,730 --> 00:32:02,380
course the whole top of the stack

00:31:58,100 --> 00:32:06,760
application stack and maybe some generic

00:32:02,380 --> 00:32:09,380
functionality like a system bring up

00:32:06,760 --> 00:32:11,870
which we call the launcher and the silh

00:32:09,380 --> 00:32:16,540
to project and these launcher are these

00:32:11,870 --> 00:32:19,640
these generic components will also be 1s

00:32:16,540 --> 00:32:23,660
components mostly and have to follow the

00:32:19,640 --> 00:32:27,590
appropriate standards so the effective

00:32:23,660 --> 00:32:28,930
development life cycle is not that much

00:32:27,590 --> 00:32:31,100
different than the traditional

00:32:28,930 --> 00:32:33,800
development life cycle at least for the

00:32:31,100 --> 00:32:36,530
first few layers and the bottom layers

00:32:33,800 --> 00:32:38,330
at word we want to be able to reuse

00:32:36,530 --> 00:32:40,880
pre-existing and open source software

00:32:38,330 --> 00:32:43,070
and I might add that there's of course a

00:32:40,880 --> 00:32:46,310
lot of pre-existing non open source

00:32:43,070 --> 00:32:51,110
software but I personally think it will

00:32:46,310 --> 00:32:53,150
be very hard to qualify that if it was

00:32:51,110 --> 00:32:54,980
not developed according to a safety

00:32:53,150 --> 00:32:58,010
standard because you simply don't have

00:32:54,980 --> 00:33:00,200
the necessary data to do assessment of

00:32:58,010 --> 00:33:02,960
non-compliant development because you

00:33:00,200 --> 00:33:05,060
need process data and that's the big

00:33:02,960 --> 00:33:08,270
advantage of the open source projects

00:33:05,060 --> 00:33:11,000
for safety is that this process data is

00:33:08,270 --> 00:33:13,350
actually available as Jonathan Corbett

00:33:11,000 --> 00:33:16,049
today in the morning in the keynote

00:33:13,350 --> 00:33:18,269
was describing of course it were under

00:33:16,049 --> 00:33:21,600
went significant transformation from

00:33:18,269 --> 00:33:23,610
maybe not so well-structured project to

00:33:21,600 --> 00:33:26,460
know a very well structured project and

00:33:23,610 --> 00:33:28,110
that's exactly what assessment of

00:33:26,460 --> 00:33:30,539
non-compliant development is about

00:33:28,110 --> 00:33:33,889
showing that this process is not only

00:33:30,539 --> 00:33:37,830
stable but it has the self corrective

00:33:33,889 --> 00:33:41,700
capabilities and therefore the results

00:33:37,830 --> 00:33:44,009
of this process are trustworthy if then

00:33:41,700 --> 00:33:49,799
additional testing and verification

00:33:44,009 --> 00:33:53,700
efforts confirm it okay next one okay

00:33:49,799 --> 00:33:56,100
that's interpretation mapping yeah okay

00:33:53,700 --> 00:34:00,869
sorry I sometimes get lost in my own

00:33:56,100 --> 00:34:03,210
slides yeah so the basis to do this

00:34:00,869 --> 00:34:06,239
assessment of non-compliant development

00:34:03,210 --> 00:34:07,830
is that you have to take a standard and

00:34:06,239 --> 00:34:10,020
you have to adjust to you actually use

00:34:07,830 --> 00:34:11,909
case in our case we assume that

00:34:10,020 --> 00:34:14,129
requirement and design is going to be

00:34:11,909 --> 00:34:17,040
one s and then we can go into the three

00:34:14,129 --> 00:34:18,540
s route how do you get to that point how

00:34:17,040 --> 00:34:21,780
do you know what you have to do from

00:34:18,540 --> 00:34:23,879
scratch which methods you can reuse as

00:34:21,780 --> 00:34:26,040
recommended by this standard which you

00:34:23,879 --> 00:34:29,540
cannot the way we do that is basically

00:34:26,040 --> 00:34:33,000
what we do is it interpretation mapping

00:34:29,540 --> 00:34:36,960
what it means it did take the standard

00:34:33,000 --> 00:34:40,790
clause by clause a lot of vague words in

00:34:36,960 --> 00:34:43,950
these claws like adequate for use

00:34:40,790 --> 00:34:46,020
sufficiently whatever and you have to

00:34:43,950 --> 00:34:47,790
interpret this so what you're doing is

00:34:46,020 --> 00:34:50,419
you're mapping the entire standard to

00:34:47,790 --> 00:34:52,829
your particular use case then there's

00:34:50,419 --> 00:34:54,450
clauses in the standard that simply

00:34:52,829 --> 00:34:57,240
don't apply to you because they only

00:34:54,450 --> 00:35:00,119
apply to a one out of one system or only

00:34:57,240 --> 00:35:02,010
to a fail operational system and if

00:35:00,119 --> 00:35:02,309
you're a fail-safe system you can skip

00:35:02,010 --> 00:35:05,309
it

00:35:02,309 --> 00:35:07,260
they just discover it so you have to do

00:35:05,309 --> 00:35:09,960
this interpretation clause by policy

00:35:07,260 --> 00:35:13,020
interpretation removing all the vague

00:35:09,960 --> 00:35:16,589
putting way vague wording putting it

00:35:13,020 --> 00:35:18,660
into context and as I said safety is a

00:35:16,589 --> 00:35:21,150
system property in certification is a

00:35:18,660 --> 00:35:24,070
system property as well so you are

00:35:21,150 --> 00:35:27,850
creating the certification Road

00:35:24,070 --> 00:35:30,640
for your particular system again it

00:35:27,850 --> 00:35:33,550
might be well be that if we do this ten

00:35:30,640 --> 00:35:36,670
times in the specific domain like rail

00:35:33,550 --> 00:35:41,560
that we see patterns emerging and then

00:35:36,670 --> 00:35:43,210
later we can simplify or extract a open

00:35:41,560 --> 00:35:45,940
source domain standard for the rail

00:35:43,210 --> 00:35:49,090
industry where we say 90% this is

00:35:45,940 --> 00:35:51,780
repetition and therefore we can reuse

00:35:49,090 --> 00:35:54,970
the argument structure or extract

00:35:51,780 --> 00:35:58,120
generic arguments for this particular

00:35:54,970 --> 00:36:01,180
domain and say okay if you replicate

00:35:58,120 --> 00:36:03,100
your system in runoff in a two out of

00:36:01,180 --> 00:36:05,770
two then certain clauses are simply

00:36:03,100 --> 00:36:08,110
covered by this architectural pattern

00:36:05,770 --> 00:36:10,260
but this is not something that we can do

00:36:08,110 --> 00:36:12,490
initially especially we're trying to use

00:36:10,260 --> 00:36:14,950
things like machine learning or

00:36:12,490 --> 00:36:17,730
artificial intelligence where we have no

00:36:14,950 --> 00:36:20,320
clue how these things actually work

00:36:17,730 --> 00:36:23,350
needless to say that we have no safety

00:36:20,320 --> 00:36:25,870
concepts for them so this interpretation

00:36:23,350 --> 00:36:30,070
mapping is really the basis because what

00:36:25,870 --> 00:36:32,560
you get out of it is not only a complete

00:36:30,070 --> 00:36:35,950
mapping of the standard in your specific

00:36:32,560 --> 00:36:40,270
context you also get a certainly feeling

00:36:35,950 --> 00:36:44,290
for the uncertainties or for the part of

00:36:40,270 --> 00:36:48,720
it that might need to be refined in the

00:36:44,290 --> 00:36:51,580
case that you have field findings or

00:36:48,720 --> 00:36:56,020
incident reports so it's not something

00:36:51,580 --> 00:37:00,400
static and really the creative work of

00:36:56,020 --> 00:37:02,850
working and safety is interpreting and

00:37:00,400 --> 00:37:05,890
working with the standards this is again

00:37:02,850 --> 00:37:07,480
where the domain standards are harder to

00:37:05,890 --> 00:37:10,630
work with because they're much more

00:37:07,480 --> 00:37:13,630
rigid they were written for a specific

00:37:10,630 --> 00:37:17,560
use case not for the generic case so

00:37:13,630 --> 00:37:19,510
61508 another basic safety stands are

00:37:17,560 --> 00:37:22,210
just much more flexible and that gives

00:37:19,510 --> 00:37:27,340
you back the engineering flexibility

00:37:22,210 --> 00:37:28,630
that you need and just to respond to one

00:37:27,340 --> 00:37:29,890
of the statements during the keynote

00:37:28,630 --> 00:37:32,110
today in the morning

00:37:29,890 --> 00:37:36,390
safety has nothing to do with producing

00:37:32,110 --> 00:37:36,390
paper okay next one

00:37:36,420 --> 00:37:46,330
okay that's a list of changes extensions

00:37:42,360 --> 00:37:48,400
okay good so now getting a little bit

00:37:46,330 --> 00:37:50,980
closer to Scylla to Linux what do we

00:37:48,400 --> 00:37:53,260
have in silt'e Linux so to Linux project

00:37:50,980 --> 00:37:55,630
was running now for a little bit more

00:37:53,260 --> 00:37:59,500
than three years trying to come up with

00:37:55,630 --> 00:38:02,050
a qualification route for new Linux

00:37:59,500 --> 00:38:05,440
based systems and to do that we actually

00:38:02,050 --> 00:38:08,500
had to extend 61508 and get these

00:38:05,440 --> 00:38:11,920
extension reviewed so the extensions

00:38:08,500 --> 00:38:15,670
cover selection because we have to be

00:38:11,920 --> 00:38:17,620
able to eliminate hazards not only

00:38:15,670 --> 00:38:21,790
mitigate them so selection is a place

00:38:17,620 --> 00:38:25,830
where we can mitigate them oops

00:38:21,790 --> 00:38:28,660
okay okay then we'll leave this list for

00:38:25,830 --> 00:38:30,520
you to review later sorry for that I'm

00:38:28,660 --> 00:38:36,490
too slow again just jump to the

00:38:30,520 --> 00:38:39,160
conclusions in okay the good news for

00:38:36,490 --> 00:38:42,880
certifying Linux is that we think we

00:38:39,160 --> 00:38:45,330
know most of the problems and we have a

00:38:42,880 --> 00:38:48,910
large number of the solutions options

00:38:45,330 --> 00:38:50,890
outlined and sometimes prototyped the

00:38:48,910 --> 00:38:54,010
bad news is that there's no hardware on

00:38:50,890 --> 00:38:55,660
this planet and we don't see any concept

00:38:54,010 --> 00:38:59,050
of how we're going to get any certified

00:38:55,660 --> 00:39:01,990
hardware unless industry sits down and

00:38:59,050 --> 00:39:04,030
writes appropriate standards like

00:39:01,990 --> 00:39:07,390
developing assessment of non-compliant

00:39:04,030 --> 00:39:10,840
development for Hardware there never

00:39:07,390 --> 00:39:14,110
will be a pre certified shrink-wrap safe

00:39:10,840 --> 00:39:17,700
Linux so don't ask for it there will be

00:39:14,110 --> 00:39:20,290
no safety element out of context that

00:39:17,700 --> 00:39:24,940
includes Linux and gilepsy and other

00:39:20,290 --> 00:39:27,550
complex components what will be possible

00:39:24,940 --> 00:39:30,430
is that we have a consolidated procedure

00:39:27,550 --> 00:39:32,650
that eliminates the business risk of

00:39:30,430 --> 00:39:35,440
using Linux and safety related systems

00:39:32,650 --> 00:39:38,320
because you have a reasonable assurance

00:39:35,440 --> 00:39:43,120
that you follow this pattern you will be

00:39:38,320 --> 00:39:46,290
certified there's a kickoff or meeting

00:39:43,120 --> 00:39:47,850
on a follow-up project - still - on

00:39:46,290 --> 00:39:50,280
Wednesday

00:39:47,850 --> 00:39:54,210
safety Linux initiative from Linux

00:39:50,280 --> 00:39:56,340
Foundation bad news for that it's not

00:39:54,210 --> 00:39:59,190
going to happen that fast my personal

00:39:56,340 --> 00:40:01,680
view is that we're talking about two to

00:39:59,190 --> 00:40:04,940
three years minimum if we get to work

00:40:01,680 --> 00:40:09,210
now to actually come up with a

00:40:04,940 --> 00:40:14,090
reasonably of consolidated process for a

00:40:09,210 --> 00:40:14,090
certification of Linux okay thank you

00:40:16,750 --> 00:40:19,059

YouTube URL: https://www.youtube.com/watch?v=UedAzd4eSjY


