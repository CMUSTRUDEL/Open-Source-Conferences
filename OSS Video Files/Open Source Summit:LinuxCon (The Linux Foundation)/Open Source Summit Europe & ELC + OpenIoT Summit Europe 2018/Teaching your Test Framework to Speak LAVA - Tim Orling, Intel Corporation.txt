Title: Teaching your Test Framework to Speak LAVA - Tim Orling, Intel Corporation
Publication date: 2018-10-25
Playlist: Open Source Summit Europe & ELC + OpenIoT Summit Europe 2018
Description: 
	Teaching your Test Framework to Speak LAVA - Tim Orling, Intel Corporation

You already have tests, and you want to use LAVA, the popular automated test automation framework. Now you have to rewrite them to work in LAVA? Instead, teach your testing framework to output the signals LAVA understands to get more benefit from the LAVA dashboard. A simple technique transforms a one-line “pass/fail” result for your entire test suite into individual test case results. This enables the use of queries and charts built-in to the LAVA dashboard. We will show examples of how to do this in several unit testing frameworks, such as pytest, unittest, and BATS. 

About Tim Orling
Tim Orling is a software engineer at the Intel Open Source Technology Center. Tim joined Intel in early 2016 after many years as a volunteer developer for OpenEmbedded and the Yocto Project. He has been an open source software and embedded hardware enthusiast for many years. He taught in a university setting for more than 5 years and has given many technical talks at conferences.
Captions: 
	00:00:00,120 --> 00:00:04,560
today I'm here to talk about teaching

00:00:02,520 --> 00:00:07,379
your test framework or your test runner

00:00:04,560 --> 00:00:09,330
to speak lava so how many people are

00:00:07,379 --> 00:00:11,820
already using lava and been quite

00:00:09,330 --> 00:00:13,320
familiar with it okay how many people

00:00:11,820 --> 00:00:15,389
have just heard about lava they're

00:00:13,320 --> 00:00:19,680
interested in what it is and trying to

00:00:15,389 --> 00:00:22,140
use it okay so for those of you who are

00:00:19,680 --> 00:00:24,539
very new to lava I'm going to be going

00:00:22,140 --> 00:00:27,689
into a little bit more depth than you're

00:00:24,539 --> 00:00:31,199
probably quite ready to grasp so there's

00:00:27,689 --> 00:00:32,850
a number of prior ELC presentations on

00:00:31,199 --> 00:00:36,079
you know introductions to lava and

00:00:32,850 --> 00:00:38,820
actually on Simone the other just gave a

00:00:36,079 --> 00:00:40,680
talk yesterday of that that gives you a

00:00:38,820 --> 00:00:44,430
good overview of it and things like that

00:00:40,680 --> 00:00:50,820
but I will do my best to not dive too

00:00:44,430 --> 00:00:53,730
deep to lose you so most of us already

00:00:50,820 --> 00:00:55,860
have tests right so we're coming to lava

00:00:53,730 --> 00:00:57,600
with tests that already exist we already

00:00:55,860 --> 00:01:00,440
have a team that's been writing tests in

00:00:57,600 --> 00:01:04,379
some kind of test framework of some kind

00:01:00,440 --> 00:01:06,750
so wouldn't it be great if lava could

00:01:04,379 --> 00:01:09,119
autodiscover your tests just like pi

00:01:06,750 --> 00:01:10,950
test or something like that can be right

00:01:09,119 --> 00:01:14,790
just pointed at a folder say PI test and

00:01:10,950 --> 00:01:17,159
it goes would it be great if you could

00:01:14,790 --> 00:01:20,939
just run the same commands in your CI

00:01:17,159 --> 00:01:22,680
system or in lava as your developers are

00:01:20,939 --> 00:01:25,590
already running right you don't have to

00:01:22,680 --> 00:01:29,790
do any special incantations for lava you

00:01:25,590 --> 00:01:31,950
just run the same thing so this is you

00:01:29,790 --> 00:01:33,240
know to keep it simple and I don't want

00:01:31,950 --> 00:01:36,710
to put the word stupid in there so I

00:01:33,240 --> 00:01:39,000
changed just smartypants but that's a

00:01:36,710 --> 00:01:41,729
you know common approach and software

00:01:39,000 --> 00:01:43,229
also you don't really want to rewrite

00:01:41,729 --> 00:01:44,790
your tests just to make them work for

00:01:43,229 --> 00:01:48,960
lava so you know don't repeat yourself

00:01:44,790 --> 00:01:51,030
don't don't add extra work and also you

00:01:48,960 --> 00:01:53,280
know the traditional approach in lava

00:01:51,030 --> 00:01:57,329
world is to do post-processing of your

00:01:53,280 --> 00:01:59,009
results post process parsing wouldn't be

00:01:57,329 --> 00:02:01,860
great if you didn't have to do that so

00:01:59,009 --> 00:02:03,509
that's what I'm talking about today so

00:02:01,860 --> 00:02:07,530
let's just go a little bit into the

00:02:03,509 --> 00:02:09,780
lifecycle of a test case in lava what

00:02:07,530 --> 00:02:12,450
what by this what I mean is what shows

00:02:09,780 --> 00:02:13,470
up on the dashboard in lava and why why

00:02:12,450 --> 00:02:16,800
is it show up as a

00:02:13,470 --> 00:02:21,300
case so the reason is that there's these

00:02:16,800 --> 00:02:24,330
special signals so number one this lava

00:02:21,300 --> 00:02:29,460
start or lava signals start kisi ping

00:02:24,330 --> 00:02:31,680
test right so once you have started a

00:02:29,460 --> 00:02:33,210
test run lava does a bunch of other

00:02:31,680 --> 00:02:35,790
things I'm not going to go into you that

00:02:33,210 --> 00:02:38,880
but before the test starts running but

00:02:35,790 --> 00:02:42,000
once you have started a test run lava is

00:02:38,880 --> 00:02:44,550
only observing standard out period

00:02:42,000 --> 00:02:45,750
that's what it is doing unless you hit a

00:02:44,550 --> 00:02:48,810
time out or something like that

00:02:45,750 --> 00:02:53,070
so it is literally looking for the

00:02:48,810 --> 00:02:55,050
string lava signal start kisi and then

00:02:53,070 --> 00:02:57,510
whatever the test case name is and then

00:02:55,050 --> 00:03:00,030
you've got some stuff and then you've

00:02:57,510 --> 00:03:02,820
got lava signal NTC then it knows the

00:03:00,030 --> 00:03:05,580
test case is done and then it knows what

00:03:02,820 --> 00:03:09,450
the result is by lava signal test case

00:03:05,580 --> 00:03:12,690
test case ID so on okay so in this case

00:03:09,450 --> 00:03:15,630
this test failed but you can see at the

00:03:12,690 --> 00:03:17,700
very top the + lava test case put a ping

00:03:15,630 --> 00:03:20,070
test right that's using a special

00:03:17,700 --> 00:03:23,040
incantation for lava which is where

00:03:20,070 --> 00:03:28,970
we're trying to get away from so there's

00:03:23,040 --> 00:03:32,459
a little bit of extra stuff or sorry so

00:03:28,970 --> 00:03:34,170
what's let's look at what can we do

00:03:32,459 --> 00:03:36,420
right this is this was my aha moment

00:03:34,170 --> 00:03:38,670
right when I realized this is what lava

00:03:36,420 --> 00:03:42,750
is looking for why don't I just make my

00:03:38,670 --> 00:03:44,250
test Runner my test case runner just

00:03:42,750 --> 00:03:47,190
omit this stuff so I got pseudocode

00:03:44,250 --> 00:03:48,330
that's sort of Python it on the left so

00:03:47,190 --> 00:03:51,390
why don't I just go ahead and print out

00:03:48,330 --> 00:03:54,660
hey you know a lot of signals start PC

00:03:51,390 --> 00:03:57,120
whatever and then do my test and then

00:03:54,660 --> 00:04:01,799
lava you know etc okay why don't I just

00:03:57,120 --> 00:04:03,390
do that see what happens and results

00:04:01,799 --> 00:04:05,160
going to be exactly the same right

00:04:03,390 --> 00:04:07,680
because again that stuff's going to

00:04:05,160 --> 00:04:09,959
standard out and lava is just observing

00:04:07,680 --> 00:04:13,140
standard out it doesn't know whether

00:04:09,959 --> 00:04:16,739
lava test case the script wrote it or

00:04:13,140 --> 00:04:17,880
whether your runner ran it there's a

00:04:16,739 --> 00:04:20,340
little bit of extra stuff that's

00:04:17,880 --> 00:04:23,750
available it's not super commonly used

00:04:20,340 --> 00:04:25,919
but you can have a numeric measurement

00:04:23,750 --> 00:04:27,150
so like in this case just purely a

00:04:25,919 --> 00:04:31,110
number you could have

00:04:27,150 --> 00:04:33,330
pi emitted and you can also have a have

00:04:31,110 --> 00:04:36,630
units of measurement with units select

00:04:33,330 --> 00:04:39,960
you know a velocity and so that just

00:04:36,630 --> 00:04:42,750
adds a couple extra you know clauses to

00:04:39,960 --> 00:04:47,910
that last statement the lava test signal

00:04:42,750 --> 00:04:50,039
a lot of signal test case line so this

00:04:47,910 --> 00:04:52,530
is another idea that I had is like oh

00:04:50,039 --> 00:04:55,199
now I can actually have my test case

00:04:52,530 --> 00:04:57,120
runner he met those things as well and

00:04:55,199 --> 00:05:01,020
then I start seeing results showing up

00:04:57,120 --> 00:05:03,000
even with with measurements and units so

00:05:01,020 --> 00:05:04,949
the first thing that my team looked at

00:05:03,000 --> 00:05:07,289
is PI test we're all really really

00:05:04,949 --> 00:05:09,180
comfortable with Python and so we just

00:05:07,289 --> 00:05:10,530
naturally went straight to PI test and

00:05:09,180 --> 00:05:16,500
we wanted to write all of our tests in

00:05:10,530 --> 00:05:22,229
that hmm so I gave a talk at LC in

00:05:16,500 --> 00:05:25,199
Portland last year about running a

00:05:22,229 --> 00:05:27,900
rolling release with open embedded Yocto

00:05:25,199 --> 00:05:29,460
project based thing and I disclosed that

00:05:27,900 --> 00:05:31,050
I had been doing this stuff with PI test

00:05:29,460 --> 00:05:35,400
and we talked about writing a pipe chest

00:05:31,050 --> 00:05:37,020
plugin for various reasons I haven't

00:05:35,400 --> 00:05:38,310
quite gotten that done yet so I'm just

00:05:37,020 --> 00:05:40,139
going to go ahead and show you what we

00:05:38,310 --> 00:05:42,930
actually used so what we really

00:05:40,139 --> 00:05:45,479
literally did is in the same folder

00:05:42,930 --> 00:05:47,370
where your tests exist or you're gonna

00:05:45,479 --> 00:05:50,159
call PI it you're gonna say PI test go

00:05:47,370 --> 00:05:54,330
to this folder in that folder you put

00:05:50,159 --> 00:05:55,530
this special file called contest PI so

00:05:54,330 --> 00:05:59,310
pi test is looking for this specific

00:05:55,530 --> 00:06:02,729
file name and in this case I need to

00:05:59,310 --> 00:06:05,820
convert the results from PI to from PI

00:06:02,729 --> 00:06:08,820
test which was this PI test outcome

00:06:05,820 --> 00:06:11,789
passed or skipped or X failed right so

00:06:08,820 --> 00:06:15,389
in lava there is no such thing as an x

00:06:11,789 --> 00:06:17,430
fail or a skip condition sorry okay

00:06:15,389 --> 00:06:20,490
then I need to change this thank you

00:06:17,430 --> 00:06:22,830
very much I met to double-check that and

00:06:20,490 --> 00:06:24,150
I did in fact check myself so I need it

00:06:22,830 --> 00:06:28,080
if that one line you should change that

00:06:24,150 --> 00:06:33,090
to skip okay there's no X failed so X

00:06:28,080 --> 00:06:34,139
failed should just be a pass okay but I

00:06:33,090 --> 00:06:36,680
think they might not have been a skip

00:06:34,139 --> 00:06:39,770
earlier or anyway it doesn't matter

00:06:36,680 --> 00:06:42,770
my bad okay

00:06:39,770 --> 00:06:45,680
so the other thing that you need in this

00:06:42,770 --> 00:06:47,810
case is where those actual signals going

00:06:45,680 --> 00:06:51,139
to get emitted from so there's a special

00:06:47,810 --> 00:06:54,919
function that we're overriding in this

00:06:51,139 --> 00:06:59,270
case so it's a report type of function

00:06:54,919 --> 00:07:02,060
or type of object and basically you can

00:06:59,270 --> 00:07:05,870
see this is quite simple so we're

00:07:02,060 --> 00:07:10,699
looking at what is the what is the

00:07:05,870 --> 00:07:14,870
status of or where are we in in the PI

00:07:10,699 --> 00:07:16,159
test run so this is traditional unit

00:07:14,870 --> 00:07:20,090
testing it's got setup and teardown

00:07:16,159 --> 00:07:23,419
clauses so in the setup case we want to

00:07:20,090 --> 00:07:25,190
omit that start signal and then when

00:07:23,419 --> 00:07:27,199
it's actually in call we're going to

00:07:25,190 --> 00:07:30,380
figure out what the result is at the end

00:07:27,199 --> 00:07:34,159
of everything and then we're gonna omit

00:07:30,380 --> 00:07:38,569
the the end signal and the the test case

00:07:34,159 --> 00:07:39,740
ID and end result so this is the simple

00:07:38,569 --> 00:07:41,599
case where there's no measurement in

00:07:39,740 --> 00:07:44,690
units I have an appendix where I show

00:07:41,599 --> 00:07:49,460
how we would do it with with units if we

00:07:44,690 --> 00:07:52,840
have time so this is what my test

00:07:49,460 --> 00:07:56,960
definitions look like before and after

00:07:52,840 --> 00:08:00,020
this change that I'm I've done so you

00:07:56,960 --> 00:08:01,820
could have just run I picked Python six

00:08:00,020 --> 00:08:03,919
just cuz it happens or just because it

00:08:01,820 --> 00:08:05,840
happens to be a module that uses PI

00:08:03,919 --> 00:08:09,919
tests so you could have just run lava

00:08:05,840 --> 00:08:12,590
test case give it a name Python three

00:08:09,919 --> 00:08:14,990
six tests and then just run a shell come

00:08:12,590 --> 00:08:18,860
in PI test okay so really there's no

00:08:14,990 --> 00:08:20,479
difference from what we're calling on

00:08:18,860 --> 00:08:26,509
the right we're just gonna say call PI

00:08:20,479 --> 00:08:28,370
test directly so the difference is if we

00:08:26,509 --> 00:08:31,659
look at what the output of the first run

00:08:28,370 --> 00:08:34,700
would be we get all of the tests

00:08:31,659 --> 00:08:37,190
everything that PI test was gonna run in

00:08:34,700 --> 00:08:41,149
one big blob and we get the result for

00:08:37,190 --> 00:08:43,430
the one big blob and that's it okay

00:08:41,149 --> 00:08:45,829
PI test happens did by default X you

00:08:43,430 --> 00:08:46,880
know output these dots for passes and s4

00:08:45,829 --> 00:08:49,490
skips and f4

00:08:46,880 --> 00:08:51,200
fail but you can see you know it's still

00:08:49,490 --> 00:08:56,030
got the same pattern right over and over

00:08:51,200 --> 00:08:58,310
again of start T C and T C test case so

00:08:56,030 --> 00:08:59,930
what happens when I use that comp test

00:08:58,310 --> 00:09:01,790
pie that I just showed you

00:08:59,930 --> 00:09:06,860
okay literally copy and paste that whole

00:09:01,790 --> 00:09:09,230
file into your into your area and run it

00:09:06,860 --> 00:09:12,590
what we see is that it's going to pick

00:09:09,230 --> 00:09:15,470
up each individual test case so I've

00:09:12,590 --> 00:09:18,140
abbreviated this because it's you know

00:09:15,470 --> 00:09:20,300
hundreds of lines but you can see now

00:09:18,140 --> 00:09:23,240
there's actually a test case named ad

00:09:20,300 --> 00:09:26,450
metaclass that passed and then there's a

00:09:23,240 --> 00:09:31,550
test game case named ad metaclass nested

00:09:26,450 --> 00:09:35,630
that failed so why do we care the reason

00:09:31,550 --> 00:09:38,810
I care is I tend to do a lot of looking

00:09:35,630 --> 00:09:41,600
at my results through the web UI and so

00:09:38,810 --> 00:09:46,160
when you look at the results tab or the

00:09:41,600 --> 00:09:47,570
results part of your lava dashboard in

00:09:46,160 --> 00:09:50,450
the first case all I'm gonna see is

00:09:47,570 --> 00:09:55,070
Python 3 6 tests my entire test suite

00:09:50,450 --> 00:09:57,860
failed if I click on that it just shows

00:09:55,070 --> 00:09:59,780
me the top of the the tests where it

00:09:57,860 --> 00:10:00,890
shows me the whole suite failed and

00:09:59,780 --> 00:10:06,710
that's it I don't really have much

00:10:00,890 --> 00:10:10,850
information with the COFF test pie that

00:10:06,710 --> 00:10:13,220
we added I've got 20 pages of it with 10

00:10:10,850 --> 00:10:16,070
on each page 20 pages worth of results

00:10:13,220 --> 00:10:18,170
of test cases and it actually shows me

00:10:16,070 --> 00:10:21,890
that the only thing that failed was this

00:10:18,170 --> 00:10:23,930
ad medic class nested and if I click on

00:10:21,890 --> 00:10:26,090
that now it's actually gonna take me

00:10:23,930 --> 00:10:29,060
straight to that part of the log or the

00:10:26,090 --> 00:10:33,020
output and show me what that what that

00:10:29,060 --> 00:10:35,870
was okay so to me this is a tremendous

00:10:33,020 --> 00:10:38,150
benefit for extremely little effort and

00:10:35,870 --> 00:10:40,940
I don't have to do any post-processing

00:10:38,150 --> 00:10:43,490
and if any of these tests failed at some

00:10:40,940 --> 00:10:45,920
weird random way that ended up making a

00:10:43,490 --> 00:10:48,230
lava crash out I don't know how that

00:10:45,920 --> 00:10:55,240
would happen but if it did I might still

00:10:48,230 --> 00:10:55,240
have already captured some results so

00:10:55,560 --> 00:11:00,389
for this talk I decided let me go look

00:10:57,749 --> 00:11:03,060
at some more test runners and see what

00:11:00,389 --> 00:11:05,579
else can I do because this this is a

00:11:03,060 --> 00:11:08,990
very very simple technique all I need to

00:11:05,579 --> 00:11:12,149
do is have a setup and teardown change

00:11:08,990 --> 00:11:13,649
so bats Bosch automated testing system

00:11:12,149 --> 00:11:18,990
you get to write all your tests and in

00:11:13,649 --> 00:11:21,870
bash so basically I just added this - L

00:11:18,990 --> 00:11:23,430
so I added a you know a lava option here

00:11:21,870 --> 00:11:26,759
and again you can just copy and paste

00:11:23,430 --> 00:11:29,759
these and and this was the diff taun top

00:11:26,759 --> 00:11:34,920
of master as of a couple of days ago for

00:11:29,759 --> 00:11:38,220
bats core I need to you know give some

00:11:34,920 --> 00:11:40,680
nice help info so you MIT the signals to

00:11:38,220 --> 00:11:44,189
lava blah blah you need to set up a flag

00:11:40,680 --> 00:11:50,040
and make it cleared before I start

00:11:44,189 --> 00:11:54,269
running I need to actually do something

00:11:50,040 --> 00:11:57,420
when that lava flag is being set so I

00:11:54,269 --> 00:12:00,120
just set this variable to one a check if

00:11:57,420 --> 00:12:07,199
that variable exists and then I changed

00:12:00,120 --> 00:12:12,149
the executor to this this batts format

00:12:07,199 --> 00:12:15,269
lava lava stream and I just copied that

00:12:12,149 --> 00:12:19,579
straight from the bats format tap stream

00:12:15,269 --> 00:12:23,189
and just changed it a little bit so

00:12:19,579 --> 00:12:25,829
here's this bats format lava stream and

00:12:23,189 --> 00:12:29,009
I just did a diff between what I did and

00:12:25,829 --> 00:12:32,160
the tap the lot that's the format lava

00:12:29,009 --> 00:12:35,730
start on a tap stream so I added in

00:12:32,160 --> 00:12:37,769
result measurements and units I have not

00:12:35,730 --> 00:12:39,509
actually implemented measurement and

00:12:37,769 --> 00:12:42,360
unit stuff yet to see if it works but I

00:12:39,509 --> 00:12:46,319
put it in here anyway and then at the

00:12:42,360 --> 00:12:48,149
beginning of the run I need to do setup

00:12:46,319 --> 00:12:50,579
because this is where I'm gonna actually

00:12:48,149 --> 00:12:57,240
emit the signal so I needed to add that

00:12:50,579 --> 00:13:00,990
in again I need to convert my results

00:12:57,240 --> 00:13:04,420
and it again here I should have made

00:13:00,990 --> 00:13:06,940
this skip but forgive me for that

00:13:04,420 --> 00:13:10,870
and again we'd have to change this to

00:13:06,940 --> 00:13:12,730
fail it turns out that the test case

00:13:10,870 --> 00:13:14,350
names are gonna have spaces and things

00:13:12,730 --> 00:13:16,029
like that in it and lava needs that to

00:13:14,350 --> 00:13:17,380
be converted to something else I just

00:13:16,029 --> 00:13:19,480
made them all an underscore because

00:13:17,380 --> 00:13:21,550
that's pretty common convention so

00:13:19,480 --> 00:13:23,070
that's what this is doing and then here

00:13:21,550 --> 00:13:25,180
this buffer is sort of like printf

00:13:23,070 --> 00:13:27,910
basically it's just a wrapper for

00:13:25,180 --> 00:13:33,130
another function and so here I just omit

00:13:27,910 --> 00:13:38,290
the start of the test case teardown

00:13:33,130 --> 00:13:41,920
again I need to to manage this name

00:13:38,290 --> 00:13:45,670
escape it and I just buffer out the test

00:13:41,920 --> 00:13:48,910
signal end and then I do a little bit of

00:13:45,670 --> 00:13:51,450
testing to see whether I've got a

00:13:48,910 --> 00:13:57,310
measurement or not and then then you met

00:13:51,450 --> 00:13:59,800
you met the test case signal so here's

00:13:57,310 --> 00:14:02,740
just a very basic a lot of test

00:13:59,800 --> 00:14:05,110
definition so again on the left you can

00:14:02,740 --> 00:14:07,660
still just run this pretty simply in

00:14:05,110 --> 00:14:09,670
this case the dash t is for tap output

00:14:07,660 --> 00:14:12,430
it's a little bit easier to read and

00:14:09,670 --> 00:14:18,100
over here I've added my new L flag that

00:14:12,430 --> 00:14:22,449
I've created so again if you look at the

00:14:18,100 --> 00:14:24,850
original run you're just gonna get a

00:14:22,449 --> 00:14:26,620
whole bunch of data there's 70 different

00:14:24,850 --> 00:14:28,810
test cases here that rands there's a

00:14:26,620 --> 00:14:31,750
bunch of stuff I'm skipping but I just

00:14:28,810 --> 00:14:33,630
showed the one thing that failed and so

00:14:31,750 --> 00:14:39,070
the whole test run is going to fail

00:14:33,630 --> 00:14:42,220
because of that but when I add the this

00:14:39,070 --> 00:14:44,110
dash L change now again I'm gonna see

00:14:42,220 --> 00:14:47,740
every single test case and so I'm gonna

00:14:44,110 --> 00:14:50,680
see the output printed even when no

00:14:47,740 --> 00:14:53,560
first no final newline test case and so

00:14:50,680 --> 00:14:57,250
on and I'm still gonna be able to catch

00:14:53,560 --> 00:14:59,170
when an individual test case fails and

00:14:57,250 --> 00:15:01,149
I've skipped a whole bunch of the stuff

00:14:59,170 --> 00:15:03,519
because it's too much to put on the

00:15:01,149 --> 00:15:05,320
screen so you're gonna see this pattern

00:15:03,519 --> 00:15:08,170
right I mean just gonna drill this into

00:15:05,320 --> 00:15:11,560
you but forgive me so for the whole run

00:15:08,170 --> 00:15:14,680
I've got just this whole test suite that

00:15:11,560 --> 00:15:17,010
ran my result is fail if I click on that

00:15:14,680 --> 00:15:18,600
it's going to take me to the entire law

00:15:17,010 --> 00:15:20,190
which is hundreds and hundreds of lines

00:15:18,600 --> 00:15:23,579
long and I've got to go searching for

00:15:20,190 --> 00:15:24,870
where the hell the failure was you can

00:15:23,579 --> 00:15:26,970
grab it you can do whatever you want to

00:15:24,870 --> 00:15:28,529
do with it right but ultimately it's

00:15:26,970 --> 00:15:30,480
just frustrating to me to have to do

00:15:28,529 --> 00:15:30,959
that I want to get to it as fast as I

00:15:30,480 --> 00:15:34,410
can

00:15:30,959 --> 00:15:37,440
so what happens when I actually just add

00:15:34,410 --> 00:15:41,910
this very very few simple changes to the

00:15:37,440 --> 00:15:43,860
runner all of a sudden I get seven pages

00:15:41,910 --> 00:15:46,560
of results with 10 10 results per page

00:15:43,860 --> 00:15:48,240
and I get all the way down to seeing

00:15:46,560 --> 00:15:51,660
that hey these are the two test cases

00:15:48,240 --> 00:15:54,480
that failed and now I can click on these

00:15:51,660 --> 00:15:56,220
and I can get straight to that part of

00:15:54,480 --> 00:16:04,190
the log immediately and see what the

00:15:56,220 --> 00:16:07,260
failure was right so what else can I do

00:16:04,190 --> 00:16:09,389
Soyoung Simone gave a Miller gave a very

00:16:07,260 --> 00:16:11,430
very excellent introduction to P test

00:16:09,389 --> 00:16:15,810
part of the Yocto project openembedded

00:16:11,430 --> 00:16:18,060
test suite yesterday so this lets you

00:16:15,810 --> 00:16:19,769
test individual packages and you

00:16:18,060 --> 00:16:21,810
basically do the equivalent of make

00:16:19,769 --> 00:16:28,860
check or make tests of whatever your

00:16:21,810 --> 00:16:31,889
software is at currently within Lava

00:16:28,860 --> 00:16:34,769
there's some Python scripts that do post

00:16:31,889 --> 00:16:36,329
processing of P test results and they

00:16:34,769 --> 00:16:39,930
essentially will give you the same

00:16:36,329 --> 00:16:42,360
result that I'm gonna show but it's post

00:16:39,930 --> 00:16:45,360
processed versus process at the same

00:16:42,360 --> 00:16:49,470
time so the first thing I needed to do

00:16:45,360 --> 00:16:54,000
to make this work is modify the the P

00:16:49,470 --> 00:16:57,360
test runner to a test case it's C++ or C

00:16:54,000 --> 00:17:00,540
I mean code so I need it lips I needed a

00:16:57,360 --> 00:17:02,819
flag so I'm just gonna create this flag

00:17:00,540 --> 00:17:06,390
and in a way so we can expand it later

00:17:02,819 --> 00:17:10,470
in case we need more need to include

00:17:06,390 --> 00:17:13,319
that I need to add a new test runner or

00:17:10,470 --> 00:17:15,540
a new option there was already an L

00:17:13,319 --> 00:17:23,429
option for a list and so I went with

00:17:15,540 --> 00:17:24,900
capital L we need to add to the these

00:17:23,429 --> 00:17:28,260
options that are available we need to

00:17:24,900 --> 00:17:30,060
zero out those flags need to add the L

00:17:28,260 --> 00:17:32,400
the capital L to the

00:17:30,060 --> 00:17:35,250
get up and no colon after it because it

00:17:32,400 --> 00:17:36,930
doesn't take any values you need to add

00:17:35,250 --> 00:17:40,140
this case for the check and for the L

00:17:36,930 --> 00:17:42,990
and we're just going to or bit or that

00:17:40,140 --> 00:17:45,720
value with a lot of signal enable that

00:17:42,990 --> 00:17:47,400
flag and in this case I printed it out

00:17:45,720 --> 00:17:51,660
just so you can see and you know that

00:17:47,400 --> 00:17:54,450
you enabled that in the may or the utils

00:17:51,660 --> 00:17:56,490
see this is where the actual emission of

00:17:54,450 --> 00:18:00,140
the the results happens so I need to

00:17:56,490 --> 00:18:02,790
include that file turns out I need to

00:18:00,140 --> 00:18:06,660
get what the P test name is and that was

00:18:02,790 --> 00:18:08,580
what I did here so this would have given

00:18:06,660 --> 00:18:11,010
this directory would give me the the

00:18:08,580 --> 00:18:17,640
path to to the tests and I wanted the

00:18:11,010 --> 00:18:21,840
name of the exact test case so I get the

00:18:17,640 --> 00:18:23,070
results make a make an array for that we

00:18:21,840 --> 00:18:24,930
know it's gonna be five characters

00:18:23,070 --> 00:18:27,540
because we've only got pass/fail and

00:18:24,930 --> 00:18:31,760
skip here I knew it was skip for some

00:18:27,540 --> 00:18:36,360
reason ignored it elsewhere and then we

00:18:31,760 --> 00:18:39,570
just check with just an a regular and is

00:18:36,360 --> 00:18:43,400
that bit set and if it is we're gonna

00:18:39,570 --> 00:18:43,400
omit the start signal

00:18:48,960 --> 00:18:56,790
so then here we're going to check if

00:18:52,770 --> 00:18:59,640
that exists we're going to print out

00:18:56,790 --> 00:19:01,770
whether it's a pass or a fail didn't add

00:18:59,640 --> 00:19:04,530
a I guess I should modify this to add a

00:19:01,770 --> 00:19:07,800
skip option this is kind of a teardown

00:19:04,530 --> 00:19:12,380
and so now we're going to print out the

00:19:07,800 --> 00:19:20,220
ends and test case and the test case ID

00:19:12,380 --> 00:19:21,690
stuff so not you know all this code is

00:19:20,220 --> 00:19:26,220
there it's pretty obvious I'm not gonna

00:19:21,690 --> 00:19:28,860
go into all of it but so in this case I

00:19:26,220 --> 00:19:30,180
am the maintainer for the meta pearl

00:19:28,860 --> 00:19:32,310
layer in openembedded

00:19:30,180 --> 00:19:37,380
and so I wanted to do a bunch of tests

00:19:32,310 --> 00:19:38,580
on some Debian named pearl modules so on

00:19:37,380 --> 00:19:40,050
the Left we've got you know the way I

00:19:38,580 --> 00:19:41,910
could have done it on the right we've

00:19:40,050 --> 00:19:44,490
got this very similar but one

00:19:41,910 --> 00:19:48,570
modification running that capital L in

00:19:44,490 --> 00:19:53,160
there again if I do the regular run in

00:19:48,570 --> 00:19:56,070
this case it's gonna start the test case

00:19:53,160 --> 00:19:57,810
runner and it's gonna start the first of

00:19:56,070 --> 00:19:59,910
all those things I had on the command

00:19:57,810 --> 00:20:01,260
line or if I ran it with no no options

00:19:59,910 --> 00:20:03,990
that would run all the test cases

00:20:01,260 --> 00:20:05,820
available and as you know and Simone

00:20:03,990 --> 00:20:08,580
Miller said in yesterday's talk you end

00:20:05,820 --> 00:20:10,110
up with five megabytes or more of log

00:20:08,580 --> 00:20:12,600
that you have to go through and try to

00:20:10,110 --> 00:20:15,360
figure out what the results are this at

00:20:12,600 --> 00:20:16,950
least breaks it up a little bit and at

00:20:15,360 --> 00:20:18,810
the end of it all you know I've got a

00:20:16,950 --> 00:20:21,300
hundred hundreds and hundreds of lines

00:20:18,810 --> 00:20:23,280
of output I skipped and then the last

00:20:21,300 --> 00:20:26,970
test that ran happened to be you would

00:20:23,280 --> 00:20:33,780
digest HMH pearl and I get an overall

00:20:26,970 --> 00:20:35,780
result if I use my change again you know

00:20:33,780 --> 00:20:39,120
you're seeing this pattern right so now

00:20:35,780 --> 00:20:40,800
it actually says that the test case was

00:20:39,120 --> 00:20:44,310
this lib capture tiny pearl that was the

00:20:40,800 --> 00:20:51,680
first in the list of tests it was gonna

00:20:44,310 --> 00:20:51,680
run the last one happened to be whoops

00:20:51,950 --> 00:20:56,580
anyway if this shouldn't be the

00:20:53,670 --> 00:20:57,810
identical my bad but anyway I ran

00:20:56,580 --> 00:20:59,310
through a whole bunch of tests and each

00:20:57,810 --> 00:21:02,070
one of them each one of the test cases

00:20:59,310 --> 00:21:04,680
is gonna run individually

00:21:02,070 --> 00:21:08,160
so again what I would normally see is

00:21:04,680 --> 00:21:09,930
just one great big blob pass right the

00:21:08,160 --> 00:21:13,380
entire pee test around of everything

00:21:09,930 --> 00:21:14,880
that ran what's the result how do you

00:21:13,380 --> 00:21:19,290
drill down into that and see any any

00:21:14,880 --> 00:21:21,960
differences pretty hard so with my

00:21:19,290 --> 00:21:25,410
change I actually now see each

00:21:21,960 --> 00:21:27,980
individual pee test suite that ran and I

00:21:25,410 --> 00:21:31,040
see the result for that

00:21:27,980 --> 00:21:34,170
in doing this I actually caught that a

00:21:31,040 --> 00:21:37,980
the pee test Runner module that I i've

00:21:34,170 --> 00:21:39,510
modified personally in the past needs a

00:21:37,980 --> 00:21:41,670
little help because not not all these

00:21:39,510 --> 00:21:44,190
past 100% I don't think so

00:21:41,670 --> 00:21:47,430
there's something missing there but so

00:21:44,190 --> 00:21:49,860
just in summary I think you can see this

00:21:47,430 --> 00:21:51,570
is really a very very simple concept I

00:21:49,860 --> 00:21:53,250
mean I'm surprised I could spend this

00:21:51,570 --> 00:21:55,650
much time talking about it but I wanted

00:21:53,250 --> 00:21:59,640
to go over at least a few options are a

00:21:55,650 --> 00:22:03,570
few examples of how you could do this so

00:21:59,640 --> 00:22:04,920
I think it's it really improves you know

00:22:03,570 --> 00:22:06,750
the dashboard experience what you can

00:22:04,920 --> 00:22:09,300
get out of it it opens up the ability to

00:22:06,750 --> 00:22:10,770
do charting and queries which I didn't

00:22:09,300 --> 00:22:13,590
really have time to prove and show you

00:22:10,770 --> 00:22:15,240
today but there's a lot more you could

00:22:13,590 --> 00:22:18,570
do with with the dashboard because of

00:22:15,240 --> 00:22:23,160
this I think it's way easier to find the

00:22:18,570 --> 00:22:25,200
cause of test failures PI test it works

00:22:23,160 --> 00:22:26,370
pretty well the output gets a bit

00:22:25,200 --> 00:22:30,030
cluttered because it's really just

00:22:26,370 --> 00:22:33,090
showing you whatever dot whatever and so

00:22:30,030 --> 00:22:34,320
on I it's the output leaves a little bit

00:22:33,090 --> 00:22:37,910
to be desired

00:22:34,320 --> 00:22:40,260
I do have an actual PI test plug-in

00:22:37,910 --> 00:22:41,520
which I'm going to call PI test lava I

00:22:40,260 --> 00:22:43,710
believe as long as the lawyers agree

00:22:41,520 --> 00:22:48,290
with me that's probably gonna be hosted

00:22:43,710 --> 00:22:50,760
on kernel CI org but I don't know yet

00:22:48,290 --> 00:22:52,530
the real reason that it's held up is

00:22:50,760 --> 00:22:54,380
because the mesh measurement decorator

00:22:52,530 --> 00:22:57,090
stuff that I've got in the appendix

00:22:54,380 --> 00:23:01,050
isn't all fully implemented yet and if

00:22:57,090 --> 00:23:02,670
we have time I'll go to that bats I was

00:23:01,050 --> 00:23:06,870
surprised how well that worked I mean

00:23:02,670 --> 00:23:09,840
it's just it was just easy it'd be nice

00:23:06,870 --> 00:23:15,330
though because the way they did it the

00:23:09,840 --> 00:23:15,900
tap output isn't there in the way I've

00:23:15,330 --> 00:23:19,680
got it

00:23:15,900 --> 00:23:22,410
it's not easy to enable it and so right

00:23:19,680 --> 00:23:27,240
now the - L and - T options that the

00:23:22,410 --> 00:23:28,740
lava and tap output are exclusive and I

00:23:27,240 --> 00:23:29,970
haven't figured out exactly your I

00:23:28,740 --> 00:23:33,600
haven't tried the measurement and

00:23:29,970 --> 00:23:34,710
function units functionality yet it

00:23:33,600 --> 00:23:37,670
doesn't seem like it's that commonly

00:23:34,710 --> 00:23:42,480
used of a framework so you know that's

00:23:37,670 --> 00:23:46,290
something to consider for P test what I

00:23:42,480 --> 00:23:48,390
caught here is that each test case in P

00:23:46,290 --> 00:23:51,720
tests parlance should really be like a

00:23:48,390 --> 00:23:53,970
test set or test suite or some other

00:23:51,720 --> 00:23:55,770
term in lava Parliament's and we should

00:23:53,970 --> 00:23:58,740
actually break it down even further so

00:23:55,770 --> 00:24:00,360
we need more work there I think we would

00:23:58,740 --> 00:24:02,370
get a lot better results you know at

00:24:00,360 --> 00:24:04,680
least for like the pearl examples you

00:24:02,370 --> 00:24:08,450
know each of the the teeth that slash

00:24:04,680 --> 00:24:11,730
whatever should be broken down and I

00:24:08,450 --> 00:24:15,720
this showed me that some failures might

00:24:11,730 --> 00:24:17,700
be hidden if you're not using so the in

00:24:15,720 --> 00:24:21,630
P test of the runner is a script called

00:24:17,700 --> 00:24:25,020
or the thing that actually is evoked for

00:24:21,630 --> 00:24:27,930
each test case is a script called run P

00:24:25,020 --> 00:24:29,490
test which is usually bash and actually

00:24:27,930 --> 00:24:33,050
went back and caught the fact that I had

00:24:29,490 --> 00:24:35,070
not set X right I had not set this up to

00:24:33,050 --> 00:24:37,200
export the result of every single

00:24:35,070 --> 00:24:39,450
command that was running and that's why

00:24:37,200 --> 00:24:43,170
I have hidden failures so I'm gonna go

00:24:39,450 --> 00:24:44,760
fix that when I when I get back so I

00:24:43,170 --> 00:24:46,680
think going forward you know I think all

00:24:44,760 --> 00:24:48,480
of you like I'm literally giving you

00:24:46,680 --> 00:24:51,960
everything I've given you all the code

00:24:48,480 --> 00:24:53,670
to make this work I I think we should

00:24:51,960 --> 00:24:56,610
all go out there and enable more test

00:24:53,670 --> 00:24:58,230
runners you know whatever your favorite

00:24:56,610 --> 00:25:03,420
test Runner is let's figure out how to

00:24:58,230 --> 00:25:05,340
make that work so I just want to thank

00:25:03,420 --> 00:25:07,050
everybody for this opportunity and thank

00:25:05,340 --> 00:25:11,460
some team members that really helped me

00:25:07,050 --> 00:25:13,110
out a lot in this work and I'll go for

00:25:11,460 --> 00:25:17,330
questions now or we can show the

00:25:13,110 --> 00:25:17,330
measurement decorator thing but yeah

00:25:22,800 --> 00:25:31,390
so I think I am a hundred percent for

00:25:27,250 --> 00:25:34,090
cap parser tap parsing in lava in fact I

00:25:31,390 --> 00:25:37,150
would like to have rather than just the

00:25:34,090 --> 00:25:40,870
CSV and yeah mole outputs I'd like to be

00:25:37,150 --> 00:25:44,350
able to get J unit or cap output from

00:25:40,870 --> 00:25:51,040
lava so that's a great thing I think

00:25:44,350 --> 00:25:52,660
absolutely not all of the tests that I'm

00:25:51,040 --> 00:25:59,290
gonna be running here not all of them

00:25:52,660 --> 00:26:00,940
have tap output right yeah but I think

00:25:59,290 --> 00:26:05,080
yeah I mean you're absolutely right and

00:26:00,940 --> 00:26:06,910
that's the what I looked at was could I

00:26:05,080 --> 00:26:09,760
figure out how to add that all into lava

00:26:06,910 --> 00:26:12,150
easily and what how quickly could we get

00:26:09,760 --> 00:26:15,460
that in and merge it as a community

00:26:12,150 --> 00:26:17,830
versus this was down and dirty and it

00:26:15,460 --> 00:26:20,500
worked right so I'm showing you a

00:26:17,830 --> 00:26:21,640
shortcut it works you're absolutely

00:26:20,500 --> 00:26:24,880
right that's the better long-term

00:26:21,640 --> 00:26:26,680
solution no doubt about it there's

00:26:24,880 --> 00:26:29,730
others there as well right but that's

00:26:26,680 --> 00:26:34,240
that's an obvious one in lava I think

00:26:29,730 --> 00:26:35,860
any other questions yes

00:26:34,240 --> 00:26:41,500
oh sorry can you come up to the mics

00:26:35,860 --> 00:26:43,540
sorry I forgot to this is recorded and

00:26:41,500 --> 00:26:45,610
lots of people watch these videos after

00:26:43,540 --> 00:26:47,440
the fact I watch my own videos because I

00:26:45,610 --> 00:26:52,270
often forget what I worked on six months

00:26:47,440 --> 00:26:55,230
ago or a year ago thank you

00:26:52,270 --> 00:26:59,260
question is short is there any plans to

00:26:55,230 --> 00:27:04,980
do it with robot framework to do that

00:26:59,260 --> 00:27:08,730
what lava is there any science teeth to

00:27:04,980 --> 00:27:11,220
make such operation with robot framework

00:27:08,730 --> 00:27:15,160
can do no robot framework

00:27:11,220 --> 00:27:17,380
robot robot yeah got it

00:27:15,160 --> 00:27:19,150
yeah I used robot framework in the past

00:27:17,380 --> 00:27:22,630
that one's a little bit more complicated

00:27:19,150 --> 00:27:26,410
because robot framework has an awful lot

00:27:22,630 --> 00:27:27,700
of ways of putting tests into it which

00:27:26,410 --> 00:27:29,770
is why I didn't want to try to show it

00:27:27,700 --> 00:27:30,880
here because showing what the tests

00:27:29,770 --> 00:27:32,379
actually were would be kind of difficult

00:27:30,880 --> 00:27:34,029
and then

00:27:32,379 --> 00:27:37,240
the output it's got a lot of output

00:27:34,029 --> 00:27:39,129
options but it's this is fairly trivial

00:27:37,240 --> 00:27:42,999
to do so we could absolutely do that in

00:27:39,129 --> 00:27:44,679
robot framework yeah and I've been a

00:27:42,999 --> 00:27:46,629
contributor robot framework in the past

00:27:44,679 --> 00:27:55,659
so we can absolutely look forward to

00:27:46,629 --> 00:27:57,190
doing that yeah anything else okay I'm

00:27:55,659 --> 00:28:02,619
just gonna go ahead and show just the

00:27:57,190 --> 00:28:05,320
measurement stuff just really quickly so

00:28:02,619 --> 00:28:10,389
basically we still need that lava result

00:28:05,320 --> 00:28:16,659
converter we modify the test stop high a

00:28:10,389 --> 00:28:21,519
little bit because we add in the ability

00:28:16,659 --> 00:28:25,090
to have this measurement text and we add

00:28:21,519 --> 00:28:27,519
in in this case the test that we were

00:28:25,090 --> 00:28:29,440
running we run training cyclic test and

00:28:27,519 --> 00:28:33,070
we're actually printing the units and

00:28:29,440 --> 00:28:34,600
the measurement at the same time so this

00:28:33,070 --> 00:28:38,019
is you know just a slight modification

00:28:34,600 --> 00:28:42,429
to what I should the one big difference

00:28:38,019 --> 00:28:46,720
here which I didn't even I missed the

00:28:42,429 --> 00:28:48,369
line I didn't import oh I did up here so

00:28:46,720 --> 00:28:52,029
I have to import this measurement

00:28:48,369 --> 00:28:54,639
decorator and so the measurement and

00:28:52,029 --> 00:28:57,309
then the measurement decorator is just

00:28:54,639 --> 00:28:59,980
this measurement object this is a little

00:28:57,309 --> 00:29:06,460
bit of a hack but basically we just set

00:28:59,980 --> 00:29:10,830
up an array and in this array we

00:29:06,460 --> 00:29:13,629
basically end up setting up just a

00:29:10,830 --> 00:29:17,490
measurement and the units so you just

00:29:13,629 --> 00:29:24,039
your test case has to emit that or

00:29:17,490 --> 00:29:28,269
return that this works for our case it's

00:29:24,039 --> 00:29:30,190
a little bit hacky it doesn't it was not

00:29:28,269 --> 00:29:33,970
that easy to implement in the actual PI

00:29:30,190 --> 00:29:35,580
tests as a as a plugin and there aren't

00:29:33,970 --> 00:29:39,669
that many tests are actually emitting

00:29:35,580 --> 00:29:42,249
measurements and and units but this this

00:29:39,669 --> 00:29:43,410
does work but it does require you to

00:29:42,249 --> 00:29:47,670
actually

00:29:43,410 --> 00:29:51,840
change your test case runner or your

00:29:47,670 --> 00:29:53,730
test cases themselves so I just didn't I

00:29:51,840 --> 00:29:55,320
didn't really like this that much that

00:29:53,730 --> 00:29:57,900
we had to modify the test cases

00:29:55,320 --> 00:29:59,670
themselves and because I thought that

00:29:57,900 --> 00:30:02,910
kind of breaks with my original theme

00:29:59,670 --> 00:30:06,540
was don't modify your test cases for

00:30:02,910 --> 00:30:10,890
lava just modify your test case runner

00:30:06,540 --> 00:30:14,240
or modify lava to parse it but anyway

00:30:10,890 --> 00:30:16,550
that's that's all I've got

00:30:14,240 --> 00:30:19,200
anybody's got any other questions about

00:30:16,550 --> 00:30:24,170
this or automated testing in general

00:30:19,200 --> 00:30:24,170
I'll be around and happy to talk to you

00:30:25,190 --> 00:30:30,890
anybody anybody anything else okay thank

00:30:29,940 --> 00:30:33,890
you so much

00:30:30,890 --> 00:30:33,890

YouTube URL: https://www.youtube.com/watch?v=FYP9ArpAA7o


