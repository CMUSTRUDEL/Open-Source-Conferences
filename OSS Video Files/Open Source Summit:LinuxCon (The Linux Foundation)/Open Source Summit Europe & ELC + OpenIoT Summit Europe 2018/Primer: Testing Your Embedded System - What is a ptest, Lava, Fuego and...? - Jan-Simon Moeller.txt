Title: Primer: Testing Your Embedded System - What is a ptest, Lava, Fuego and...? - Jan-Simon Moeller
Publication date: 2018-10-25
Playlist: Open Source Summit Europe & ELC + OpenIoT Summit Europe 2018
Description: 
	Primer: Testing Your Embedded System - What is a ptest, Lava, Fuego, KernelCI and...? - Jan-Simon Moeller, The Linux Foundation

This talk will introduce multiple frameworks available to test your Embedded Linux System and compare the use-cases . E.g. if you use the Yocto Project this talk introduces the ptest framework for recipes shipping their own unit tests/test suite. Fuego is introduced as a solution for complex test suites like LTP. Also introduced will be Lava as framework to manage your board farm and schedule tests on them. We'll also review the current developments and introduce the latest work (e.g. labgrid, Libvirt/R4D). 

About Jan-Simon MÃ¶ller
AGL Release Manager, The Linux Foundation
Captions: 
	00:00:00,030 --> 00:00:07,529
yeah welcome i'm yun similar i'm working

00:00:04,799 --> 00:00:08,639
were on automotive grade Linux and I'm

00:00:07,529 --> 00:00:13,830
the release manager

00:00:08,639 --> 00:00:20,210
I'm also lead of the see at expert group

00:00:13,830 --> 00:00:23,160
and today I want to talk about some well

00:00:20,210 --> 00:00:28,050
experiences I made while dealing with

00:00:23,160 --> 00:00:31,579
testing a GL so it will be basically a

00:00:28,050 --> 00:00:36,030
quick overview what systems we looked at

00:00:31,579 --> 00:00:40,649
what we use already what we might use or

00:00:36,030 --> 00:00:45,030
plan to use and well some observations

00:00:40,649 --> 00:00:49,500
so take that with some grain of salt so

00:00:45,030 --> 00:00:54,989
I want to talk about a few systems that

00:00:49,500 --> 00:00:59,010
are here on this list and want to

00:00:54,989 --> 00:01:02,910
introduce you to your topi test so who

00:00:59,010 --> 00:01:09,590
uses Yocto raise your hand okay that's a

00:01:02,910 --> 00:01:14,430
good chair so Yocto p test i will

00:01:09,590 --> 00:01:16,470
introduce it fuego lava kernel CI lab

00:01:14,430 --> 00:01:22,200
treat and r4d so that's basically the

00:01:16,470 --> 00:01:25,590
ones I looked into more closely and of

00:01:22,200 --> 00:01:28,009
course there are more so but that's for

00:01:25,590 --> 00:01:28,009
another day

00:01:33,260 --> 00:01:47,360
okay so pee tests who use the pee test

00:01:37,670 --> 00:01:50,380
already okay that's like ten okay so we

00:01:47,360 --> 00:01:55,100
have something to do so what is pee test

00:01:50,380 --> 00:01:56,540
pee test is a part of well the Yocto

00:01:55,100 --> 00:02:00,200
project openembedded

00:01:56,540 --> 00:02:03,800
to be more specifically and you can find

00:02:00,200 --> 00:02:05,600
the documentation here in the Yocto wiki

00:02:03,800 --> 00:02:08,240
it's also in the manuals

00:02:05,600 --> 00:02:13,640
we just need to Istanbul across it so

00:02:08,240 --> 00:02:19,400
what is it basically so TL DR it is a

00:02:13,640 --> 00:02:22,790
way to package up the well actually most

00:02:19,400 --> 00:02:29,150
of the time the test suit that a package

00:02:22,790 --> 00:02:33,350
library ships already yeah and we can

00:02:29,150 --> 00:02:38,500
then execute it on the target and

00:02:33,350 --> 00:02:38,500
collect some results so let's say

00:02:38,830 --> 00:02:47,410
battery is dead I'll use that one

00:02:48,130 --> 00:03:00,019
so in principle P tests are a convention

00:02:55,190 --> 00:03:05,480
how things are packaged within Yocto by

00:03:00,019 --> 00:03:08,360
E in principle we create sub packages so

00:03:05,480 --> 00:03:15,050
if your package is called foo we create

00:03:08,360 --> 00:03:19,730
a foo - pee test subpage the output

00:03:15,050 --> 00:03:23,890
format is basically result like

00:03:19,730 --> 00:03:28,220
pass/fail skip and then the test name

00:03:23,890 --> 00:03:33,620
basically it aligns with the auto tools

00:03:28,220 --> 00:03:36,320
and the test suits that make test hat it

00:03:33,620 --> 00:03:38,570
has some limitations because well you

00:03:36,320 --> 00:03:41,840
have a lot of paths a couple of fails

00:03:38,570 --> 00:03:44,819
maybe few skips how do you present that

00:03:41,840 --> 00:03:47,280
so that's not handled here

00:03:44,819 --> 00:03:54,560
pee test is also a convention how to

00:03:47,280 --> 00:03:59,310
call them there's two things that are

00:03:54,560 --> 00:04:02,430
applied here a we call that thing run -

00:03:59,310 --> 00:04:08,459
pee test so we have a rapper script with

00:04:02,430 --> 00:04:11,760
that name and add the final image that

00:04:08,459 --> 00:04:15,560
we deploy on the target we have a small

00:04:11,760 --> 00:04:20,060
C application called P test runner which

00:04:15,560 --> 00:04:24,120
goes through either a single test if I

00:04:20,060 --> 00:04:28,410
specified or all installed P tests which

00:04:24,120 --> 00:04:31,050
can take quite some time let's take a

00:04:28,410 --> 00:04:35,820
little closer look so you can write your

00:04:31,050 --> 00:04:40,530
own pee test and submit it to we and

00:04:35,820 --> 00:04:45,360
Yocto so a pee test so I took this from

00:04:40,530 --> 00:04:48,840
the C leap recipe and I just well

00:04:45,360 --> 00:04:54,000
distilled the parts out that are

00:04:48,840 --> 00:04:56,729
relevant for pee test so we have at the

00:04:54,000 --> 00:05:01,500
very top our wrapper run P test as by

00:04:56,729 --> 00:05:04,110
the convention we have the class inherit

00:05:01,500 --> 00:05:08,720
P test which enables all the metric to

00:05:04,110 --> 00:05:12,110
actually package it up and so on we have

00:05:08,720 --> 00:05:16,560
one step where we can actually compile

00:05:12,110 --> 00:05:20,599
the test in this case it's calling make

00:05:16,560 --> 00:05:22,770
test might be different for your other

00:05:20,599 --> 00:05:25,410
applications or libraries but in

00:05:22,770 --> 00:05:27,479
principle here we compile the test suit

00:05:25,410 --> 00:05:31,250
in the next step we install the test

00:05:27,479 --> 00:05:34,650
suit look at this it's a special path

00:05:31,250 --> 00:05:40,250
where we actually install the files into

00:05:34,650 --> 00:05:44,550
and yes we might have to fix up some

00:05:40,250 --> 00:05:47,900
paths that are in the well probably test

00:05:44,550 --> 00:05:51,870
scripts or in the make file that is

00:05:47,900 --> 00:05:54,270
likely unavoidable in some cases because

00:05:51,870 --> 00:05:56,250
they still think they are with we were

00:05:54,270 --> 00:05:57,070
compiled within the Yocto cross

00:05:56,250 --> 00:05:59,550
compilation

00:05:57,070 --> 00:06:03,460
and we don't run on the target so

00:05:59,550 --> 00:06:09,280
usually a little fix-up can be expected

00:06:03,460 --> 00:06:13,270
okay well so far that is not hard and in

00:06:09,280 --> 00:06:16,540
the end we just tell which package or

00:06:13,270 --> 00:06:19,750
which dependency the Pietists a package

00:06:16,540 --> 00:06:23,230
has which cannot be auto-detected that

00:06:19,750 --> 00:06:27,280
is usually something like make because

00:06:23,230 --> 00:06:31,660
or some if you use a pine or pearl that

00:06:27,280 --> 00:06:33,730
might not get well detected easily so

00:06:31,660 --> 00:06:36,250
otherwise it's not hard because we just

00:06:33,730 --> 00:06:38,380
packaged something that already exists

00:06:36,250 --> 00:06:43,180
so until now we didn't have to develop

00:06:38,380 --> 00:06:48,130
any test we just packaged up what we

00:06:43,180 --> 00:06:50,980
already have open embedded Yocto has

00:06:48,130 --> 00:06:58,320
already I think in the number of 50 P

00:06:50,980 --> 00:07:03,190
test packages if I'm not wrong sorry 64

00:06:58,320 --> 00:07:05,620
so we have the the most common package

00:07:03,190 --> 00:07:08,500
is covered but there are probably a few

00:07:05,620 --> 00:07:10,750
more libraries that have a pee test

00:07:08,500 --> 00:07:15,820
which is not yet packaged so patches

00:07:10,750 --> 00:07:19,600
welcome here you know how it works now

00:07:15,820 --> 00:07:25,840
how do we use that thing so we did all

00:07:19,600 --> 00:07:28,510
the work we have to do two things a well

00:07:25,840 --> 00:07:32,260
we need to enable the pee test machinery

00:07:28,510 --> 00:07:34,900
during building that is the first line

00:07:32,260 --> 00:07:38,560
that is distro features append pee test

00:07:34,900 --> 00:07:44,220
and that will make sure all the pee test

00:07:38,560 --> 00:07:47,620
packages are created the second line

00:07:44,220 --> 00:07:51,940
make sure all the pee test packages are

00:07:47,620 --> 00:07:55,620
installed in our final image and then I

00:07:51,940 --> 00:07:55,620
can go ahead call pee test runner

00:07:55,830 --> 00:08:03,090
alternative if you just want like five

00:08:00,160 --> 00:08:07,570
pee tests that are of interest to you

00:08:03,090 --> 00:08:10,420
well you can always install only the sub

00:08:07,570 --> 00:08:13,120
packages this will install all Peters

00:08:10,420 --> 00:08:15,940
 but you can also use just use

00:08:13,120 --> 00:08:28,200
image underscore install plus equals and

00:08:15,940 --> 00:08:34,830
then name minus P test so a few well

00:08:28,200 --> 00:08:38,740
personal things that I found good or bad

00:08:34,830 --> 00:08:43,240
take with a grain of salt so P test is

00:08:38,740 --> 00:08:45,910
nice it's it compiles the tests as we

00:08:43,240 --> 00:08:47,500
compile the binary so it's exactly the

00:08:45,910 --> 00:08:51,490
matching test it's cross compilation

00:08:47,500 --> 00:08:55,630
it's ahead of time it's well integrated

00:08:51,490 --> 00:08:59,700
with bitbake and there is also a feature

00:08:55,630 --> 00:09:01,510
called the test image class which will

00:08:59,700 --> 00:09:05,310
which allows you to basically

00:09:01,510 --> 00:09:10,300
automatically spin a qmo vm and

00:09:05,310 --> 00:09:14,800
basically run the tests on it so there

00:09:10,300 --> 00:09:18,880
is some nice simple automation available

00:09:14,800 --> 00:09:22,210
here what I found a little hard is we

00:09:18,880 --> 00:09:24,940
have a lot of output that comes out of

00:09:22,210 --> 00:09:28,780
this and it's not very easy to digest

00:09:24,940 --> 00:09:32,110
that the run takes quite long yes sure I

00:09:28,780 --> 00:09:36,240
mean if we do a full pass of all tests

00:09:32,110 --> 00:09:38,590
use and GCC and whatnot yeah that's like

00:09:36,240 --> 00:09:43,900
depending on the hardware we run that on

00:09:38,590 --> 00:09:47,380
five hours or even more or less what we

00:09:43,900 --> 00:09:52,780
get out of it is quite a large lock here

00:09:47,380 --> 00:09:55,570
and now so there are helper scripts in

00:09:52,780 --> 00:09:58,180
the Yocto QA that allow us to diff

00:09:55,570 --> 00:10:05,410
between the previous run and the current

00:09:58,180 --> 00:10:08,980
run which allow us to do some analysis

00:10:05,410 --> 00:10:10,780
kind of what changed that is good but

00:10:08,980 --> 00:10:15,460
digging through that lock is is quite

00:10:10,780 --> 00:10:17,920
hard yeah so the actual visualisation of

00:10:15,460 --> 00:10:21,629
the results needs a lot of

00:10:17,920 --> 00:10:28,089
post-processing or additional tools

00:10:21,629 --> 00:10:36,089
okay so references so here is that's the

00:10:28,089 --> 00:10:36,089
wiki and this link is the bitbake manual

00:10:37,109 --> 00:10:43,859
okay let's take a look at the next

00:10:40,929 --> 00:10:54,339
system Fuego

00:10:43,859 --> 00:10:58,509
so what is Fuego it's a system well if I

00:10:54,339 --> 00:11:01,809
would condense it to one sentence TLDR

00:10:58,509 --> 00:11:06,699
so it's automated testing of an embedded

00:11:01,809 --> 00:11:09,339
target from a host system with pre with

00:11:06,699 --> 00:11:14,229
a large set of prepackaged tests so what

00:11:09,339 --> 00:11:19,239
does that mean we do not depend on the

00:11:14,229 --> 00:11:22,299
target system we compile the needed test

00:11:19,239 --> 00:11:25,419
the needed resources on the host which

00:11:22,299 --> 00:11:27,789
is a nice feature actually because we

00:11:25,419 --> 00:11:29,199
test a production image at a as ease we

00:11:27,789 --> 00:11:29,889
don't have additional resources

00:11:29,199 --> 00:11:31,839
installed

00:11:29,889 --> 00:11:34,779
all right so P test would be an

00:11:31,839 --> 00:11:41,379
additional package we can remove it yeah

00:11:34,779 --> 00:11:45,309
but I mean choose your weapon so what is

00:11:41,379 --> 00:11:47,109
vehicle so if you set up for Agel you

00:11:45,309 --> 00:11:51,519
get a drinking's instance that's

00:11:47,109 --> 00:11:59,410
preloaded with a lot of tests ranging

00:11:51,519 --> 00:12:02,769
from LTP to all kinds of stuff simple

00:11:59,410 --> 00:12:12,489
stress tests but you can also write up I

00:12:02,769 --> 00:12:16,899
don't know we have a command-line tool

00:12:12,489 --> 00:12:19,479
that lets us instantiate those tests in

00:12:16,899 --> 00:12:22,059
principle what it will do we have strips

00:12:19,479 --> 00:12:25,179
to compile the tests for the target so

00:12:22,059 --> 00:12:28,649
we have to define what the target is

00:12:25,179 --> 00:12:31,929
what compiler to use it will then

00:12:28,649 --> 00:12:34,420
connect to the target upload and run the

00:12:31,929 --> 00:12:38,510
tests on the tar

00:12:34,420 --> 00:12:42,830
it will grab the results it has the

00:12:38,510 --> 00:12:48,230
capability to parse them and visualize

00:12:42,830 --> 00:12:58,070
the results for the tests where that is

00:12:48,230 --> 00:13:02,740
configured makes sense and so on so

00:12:58,070 --> 00:13:08,240
here's an example so this is the

00:13:02,740 --> 00:13:13,490
configured set of tests for a BB born

00:13:08,240 --> 00:13:16,399
black a BB boned board we have different

00:13:13,490 --> 00:13:19,600
categories benchmark functional tests so

00:13:16,399 --> 00:13:22,160
this this list goes on very long

00:13:19,600 --> 00:13:29,120
probably are around about a hundred or

00:13:22,160 --> 00:13:32,600
even more the visualization is possible

00:13:29,120 --> 00:13:37,209
we have so Jenkins can store the results

00:13:32,600 --> 00:13:39,860
and we can actually draw graphs and

00:13:37,209 --> 00:13:43,250
configure rankings to have those graphs

00:13:39,860 --> 00:13:47,529
for us and then we see how things

00:13:43,250 --> 00:13:47,529
develop over time which is quite nice so

00:13:49,570 --> 00:13:58,040
a few notes again with a grain of salt

00:13:54,730 --> 00:14:02,630
large tests out of the box that's a big

00:13:58,040 --> 00:14:06,200
plus the fact that we do not require

00:14:02,630 --> 00:14:10,940
anything beside basically SSH and a

00:14:06,200 --> 00:14:16,550
shell on the target is good the results

00:14:10,940 --> 00:14:20,360
parsers are very very good strength now

00:14:16,550 --> 00:14:26,029
for the use case that I have or Adriel

00:14:20,360 --> 00:14:29,540
has if you are working on this on your

00:14:26,029 --> 00:14:32,300
desk with your board next to it it's

00:14:29,540 --> 00:14:34,370
great we have the assumption that we can

00:14:32,300 --> 00:14:39,320
actually connect to the board from the

00:14:34,370 --> 00:14:42,829
Jenkins now if we go with an open source

00:14:39,320 --> 00:14:44,930
project the board might not be where the

00:14:42,829 --> 00:14:46,490
Jenkins is or the Jenkins is actually

00:14:44,930 --> 00:14:55,010
somewhere in the cloud

00:14:46,490 --> 00:14:58,610
then we would need in VPN we do not well

00:14:55,010 --> 00:15:01,160
what is not out in in the box by default

00:14:58,610 --> 00:15:05,180
is deploying the port you can make your

00:15:01,160 --> 00:15:09,680
own deployment Jenkins job and bring it

00:15:05,180 --> 00:15:13,220
in the chain but in principle we assume

00:15:09,680 --> 00:15:18,740
board is deployed and we have SSH over

00:15:13,220 --> 00:15:22,970
network each port even if it's the same

00:15:18,740 --> 00:15:30,890
type of board is its own executor in

00:15:22,970 --> 00:15:32,930
Jenkins is its own configuration now it

00:15:30,890 --> 00:15:37,010
might be interesting to have kind of

00:15:32,930 --> 00:15:40,220
some sort of pooling yeah I have like

00:15:37,010 --> 00:15:44,120
three bigger bones yeah and we could

00:15:40,220 --> 00:15:47,899
basically execute some of those actually

00:15:44,120 --> 00:15:51,230
in parallel yeah if we would apply the

00:15:47,899 --> 00:15:54,020
concept of executors and just crank up

00:15:51,230 --> 00:15:55,390
the number of CPUs to stay in the

00:15:54,020 --> 00:15:59,390
Jenkins

00:15:55,390 --> 00:16:01,970
drinking's language or there you had a

00:15:59,390 --> 00:16:04,820
number of executors so if we make that

00:16:01,970 --> 00:16:08,300
not a board but a device type device

00:16:04,820 --> 00:16:19,420
category we could just crank up the

00:16:08,300 --> 00:16:22,640
Jenkins executors on that node yeah okay

00:16:19,420 --> 00:16:28,779
a few references if you grab the slides

00:16:22,640 --> 00:16:33,380
later we have the Ergo test org wiki

00:16:28,779 --> 00:16:37,190
which is kept up to date there is a nice

00:16:33,380 --> 00:16:40,279
presentation about what Fuego is and a

00:16:37,190 --> 00:16:43,730
QuickStart guide how to set up for a go

00:16:40,279 --> 00:16:47,860
using a set of containers so it's quite

00:16:43,730 --> 00:16:47,860
easy to get jump-started here

00:16:49,650 --> 00:17:04,630
we also looked into lava so what is lava

00:16:57,610 --> 00:17:06,820
now the lava project just read it or

00:17:04,630 --> 00:17:09,310
well just got a new website so this is

00:17:06,820 --> 00:17:12,600
just like two weeks old

00:17:09,310 --> 00:17:18,100
it was started with inland arrow and

00:17:12,600 --> 00:17:20,709
their need was to test on like well

00:17:18,100 --> 00:17:23,709
initially there are pictures like 10

00:17:20,709 --> 00:17:29,860
panda boards so we had a stack of 10

00:17:23,709 --> 00:17:34,510
Pandavas alright so they started to

00:17:29,860 --> 00:17:38,170
scratch that itch and developed lava in

00:17:34,510 --> 00:17:42,070
principle it its strength is device

00:17:38,170 --> 00:17:47,110
automation and we can execute then test

00:17:42,070 --> 00:17:50,560
so initially we are able to power up the

00:17:47,110 --> 00:17:53,680
device pump the filesystem up usually

00:17:50,560 --> 00:17:56,650
over Network netboot and then we can

00:17:53,680 --> 00:18:04,600
well do something yeah execute the test

00:17:56,650 --> 00:18:08,100
and so on so what does lava do so it

00:18:04,600 --> 00:18:13,900
manages dip it manages basically the

00:18:08,100 --> 00:18:17,250
devices in your board farm so having 10

00:18:13,900 --> 00:18:20,560
panda boards yeah we have a device type

00:18:17,250 --> 00:18:24,040
panda board and 10 instances so it

00:18:20,560 --> 00:18:26,290
schedules it has a scheduler it manages

00:18:24,040 --> 00:18:29,200
the deployment of the file systems power

00:18:26,290 --> 00:18:34,240
of booting commands for the bootloader

00:18:29,200 --> 00:18:38,130
test execution again multiple devices

00:18:34,240 --> 00:18:43,080
per type and meanwhile in the latest

00:18:38,130 --> 00:18:47,020
lava we have templates for more than 150

00:18:43,080 --> 00:18:52,560
devices that come as part of lava so

00:18:47,020 --> 00:18:52,560
adding a device is quite easy meanwhile

00:18:52,590 --> 00:19:01,759
the setup supports the actual well

00:18:58,830 --> 00:19:04,500
workers where the

00:19:01,759 --> 00:19:07,259
devices under test are attached to be

00:19:04,500 --> 00:19:09,779
remote so you can have one master

00:19:07,259 --> 00:19:13,529
instance which is basically accept

00:19:09,779 --> 00:19:15,960
accepting the job requests and multiple

00:19:13,529 --> 00:19:17,879
labs that actually have the devices

00:19:15,960 --> 00:19:23,909
attached which could be in a different

00:19:17,879 --> 00:19:32,279
rack different building yeah they can be

00:19:23,909 --> 00:19:36,870
remote so here's an example that's from

00:19:32,279 --> 00:19:40,250
the public lava instance here you see we

00:19:36,870 --> 00:19:43,789
have different worker hosts we have

00:19:40,250 --> 00:19:47,340
different devices of a specific type

00:19:43,789 --> 00:19:52,740
they are either in good condition that

00:19:47,340 --> 00:20:02,669
that it condition retired so those ones

00:19:52,740 --> 00:20:06,120
are actually idle accepting jobs here we

00:20:02,669 --> 00:20:08,070
see the output of one execution run

00:20:06,120 --> 00:20:11,820
before that we have the whole

00:20:08,070 --> 00:20:15,330
downloading the resources getting the

00:20:11,820 --> 00:20:18,659
bootloader over serial to load the right

00:20:15,330 --> 00:20:20,580
files and so on and finally we have to

00:20:18,659 --> 00:20:27,179
use a space up and here we see actually

00:20:20,580 --> 00:20:31,740
how those how tests can be ran and we

00:20:27,179 --> 00:20:35,669
see those marks here so we we run a you

00:20:31,740 --> 00:20:39,659
name that's the output but we have here

00:20:35,669 --> 00:20:45,090
those marks for the test cases which are

00:20:39,659 --> 00:20:50,070
then picked up by the lava engine so we

00:20:45,090 --> 00:20:52,799
can identify that this portion here

00:20:50,070 --> 00:20:55,639
belongs to this test case and the result

00:20:52,799 --> 00:20:55,639
is passed

00:20:57,810 --> 00:21:05,170
so what's good about this here we have

00:21:02,310 --> 00:21:08,620
multiple instances for each type which

00:21:05,170 --> 00:21:11,950
makes it really easy to allow multiple

00:21:08,620 --> 00:21:14,470
tests to run in parallel yeah that would

00:21:11,950 --> 00:21:15,910
be similar in four if we go for the

00:21:14,470 --> 00:21:19,630
drinking's and crank up the number of

00:21:15,910 --> 00:21:22,930
executors that is in here

00:21:19,630 --> 00:21:28,900
the master worker split allows you to

00:21:22,930 --> 00:21:31,600
have multiple labs let's say for for a

00:21:28,900 --> 00:21:36,480
larger project you might not have the

00:21:31,600 --> 00:21:40,110
board's well on your desk or in your

00:21:36,480 --> 00:21:44,740
department so it's possible to have

00:21:40,110 --> 00:21:47,770
boards where they actually are and it's

00:21:44,740 --> 00:21:50,650
not hard to set up such a worker yeah

00:21:47,770 --> 00:21:55,660
the simplest case that you can actually

00:21:50,650 --> 00:21:58,510
do is well don't expect miracles but you

00:21:55,660 --> 00:22:05,680
can take in Raspberry Pi with with real

00:21:58,510 --> 00:22:09,280
a hat and that is your worker yeah what

00:22:05,680 --> 00:22:13,540
is hard the initial setup yeah it got

00:22:09,280 --> 00:22:16,210
meanwhile better also by using

00:22:13,540 --> 00:22:22,360
containers so there's a project lava -

00:22:16,210 --> 00:22:26,080
docker which is hosted by the on github

00:22:22,360 --> 00:22:34,200
by a kernel CI and that makes the whole

00:22:26,080 --> 00:22:38,440
deployment easier the parsing here is

00:22:34,200 --> 00:22:43,410
not that sophisticated as as in Fuego so

00:22:38,440 --> 00:22:46,420
we have just basically markers here and

00:22:43,410 --> 00:22:52,630
ability to collect results we can

00:22:46,420 --> 00:22:53,020
collect some measurement like a single

00:22:52,630 --> 00:22:58,480
number

00:22:53,020 --> 00:23:06,480
but that's limited so the actual result

00:22:58,480 --> 00:23:13,639
of parsing is less advanced then

00:23:06,480 --> 00:23:17,159
in Fuego a few references to the

00:23:13,639 --> 00:23:19,980
documentation of lava and to the lava

00:23:17,159 --> 00:23:24,029
docker which will help you set it up in

00:23:19,980 --> 00:23:28,679
case you want to try it out so lava

00:23:24,029 --> 00:23:30,779
docker has one configuration file that's

00:23:28,679 --> 00:23:32,940
needed it's called board siamo and

00:23:30,779 --> 00:23:35,759
there's an example if you copy that over

00:23:32,940 --> 00:23:39,570
follow the instructions you get a lava

00:23:35,759 --> 00:23:41,730
set up with a QA mu with a q mo machine

00:23:39,570 --> 00:23:52,730
and that will get you jump-started

00:23:41,730 --> 00:23:52,730
quickly okay

00:23:53,149 --> 00:24:00,000
then if we are talking about you see

00:23:58,529 --> 00:24:02,480
there's a pattern we are going more and

00:24:00,000 --> 00:24:08,100
more remote if we are talking about

00:24:02,480 --> 00:24:11,029
multiple people working on a platform on

00:24:08,100 --> 00:24:13,940
different boards maybe the same boards

00:24:11,029 --> 00:24:18,330
then we need a way to collect results

00:24:13,940 --> 00:24:21,870
that applies to lava possibly to Fuego

00:24:18,330 --> 00:24:24,629
or different for area instances we want

00:24:21,870 --> 00:24:27,090
a way to collect the results but because

00:24:24,629 --> 00:24:29,639
well to be honest

00:24:27,090 --> 00:24:32,730
do we care that much about the actual

00:24:29,639 --> 00:24:35,580
testing the testing is actually a tool

00:24:32,730 --> 00:24:37,830
we actually care about the results so we

00:24:35,580 --> 00:24:43,909
need a way to collect them we looked

00:24:37,830 --> 00:24:49,860
into kernel CI for that now colonelcy I

00:24:43,909 --> 00:24:53,399
started out as a project to collect boot

00:24:49,860 --> 00:24:56,940
reports for the Linux kernel and it was

00:24:53,399 --> 00:25:04,070
quite successful in what it tried to

00:24:56,940 --> 00:25:04,070
achieve and meanwhile the project is

00:25:05,269 --> 00:25:13,019
organizing itself and we can expect some

00:25:09,179 --> 00:25:16,019
more development going on here the

00:25:13,019 --> 00:25:18,960
initial tests were related to the Linux

00:25:16,019 --> 00:25:19,470
kernel and we act well for the Linux

00:25:18,960 --> 00:25:21,809
kernel we

00:25:19,470 --> 00:25:25,440
interested in does it boot does it pass

00:25:21,809 --> 00:25:31,620
kind of some well LS is to network up

00:25:25,440 --> 00:25:37,140
some very simple tests and that was the

00:25:31,620 --> 00:25:40,460
test case basically kernel related so

00:25:37,140 --> 00:25:48,240
Colonel CI is good at aggregation and

00:25:40,460 --> 00:25:51,390
visualization of your tests what is

00:25:48,240 --> 00:25:55,020
Colonel CI it's a database it's a

00:25:51,390 --> 00:26:02,400
back-end to parse the incoming results

00:25:55,020 --> 00:26:06,330
and a web front-end the format for the

00:26:02,400 --> 00:26:11,100
results is JSON and it is then capable

00:26:06,330 --> 00:26:14,600
of visualizing the results in this case

00:26:11,100 --> 00:26:17,940
that's the official kernel CI instance

00:26:14,600 --> 00:26:23,070
we see that for given kernel version

00:26:17,940 --> 00:26:29,490
here we had a couple of boards doing the

00:26:23,070 --> 00:26:33,539
run the boot and we see here the pass

00:26:29,490 --> 00:26:38,159
and fail rate so for this use case it's

00:26:33,539 --> 00:26:41,909
quite good and we can actually collect

00:26:38,159 --> 00:26:44,730
the results of a lot of laps which

00:26:41,909 --> 00:26:49,770
actually distributed around the globe so

00:26:44,730 --> 00:26:54,419
it's a very distributed systems most of

00:26:49,770 --> 00:26:58,350
those labs run lava some run custom

00:26:54,419 --> 00:27:00,500
tools right the the upload is

00:26:58,350 --> 00:27:03,809
independent of the tool so we could run

00:27:00,500 --> 00:27:07,890
whatever underneath way go lava doesn't

00:27:03,809 --> 00:27:09,720
matter this is still centric to testing

00:27:07,890 --> 00:27:14,280
the kernel so this is basically boot

00:27:09,720 --> 00:27:17,429
reports what we care about now for our

00:27:14,280 --> 00:27:19,830
use case we have to take that to another

00:27:17,429 --> 00:27:22,860
level because we are actually not take

00:27:19,830 --> 00:27:25,530
not interested in does it boot we are

00:27:22,860 --> 00:27:29,560
actually interested in tests at runtime

00:27:25,530 --> 00:27:34,000
yeah different tests at runtime

00:27:29,560 --> 00:27:38,500
so there has been the addition of so

00:27:34,000 --> 00:27:44,680
this is the boot tap on kernel CI we

00:27:38,500 --> 00:27:49,750
have now a tests tap and that's being

00:27:44,680 --> 00:27:52,360
further developed so what's good about

00:27:49,750 --> 00:27:57,010
this we can actually aggregate results

00:27:52,360 --> 00:28:00,940
from multiple sources it's independent

00:27:57,010 --> 00:28:05,950
of the tool we have JSON format how to

00:28:00,940 --> 00:28:08,800
submit the results the setup yeah

00:28:05,950 --> 00:28:11,350
initially the setup again a little bit

00:28:08,800 --> 00:28:14,110
painful meanwhile there's a kernel CI

00:28:11,350 --> 00:28:22,320
talker so that makes the setup fairly

00:28:14,110 --> 00:28:25,600
easy and repeatable what is hard is that

00:28:22,320 --> 00:28:28,060
tailoring kernel CI now for different

00:28:25,600 --> 00:28:33,610
use cases like the users based tests

00:28:28,060 --> 00:28:36,340
that is hard and kernel CI they are they

00:28:33,610 --> 00:28:44,080
are working on a redesign to make that

00:28:36,340 --> 00:28:45,820
easier a few references so there's the

00:28:44,080 --> 00:28:50,440
currency I docker if you want to set it

00:28:45,820 --> 00:28:52,630
up there's a two with kernel CI admin

00:28:50,440 --> 00:28:56,770
which then helps with creating the

00:28:52,630 --> 00:29:01,090
tokens one example how it can be

00:28:56,770 --> 00:29:05,980
modified is power CI so that's the

00:29:01,090 --> 00:29:08,350
modification of kernel CI and it's used

00:29:05,980 --> 00:29:12,700
to measure the power consumption of the

00:29:08,350 --> 00:29:16,030
system which brings in quite nice a few

00:29:12,700 --> 00:29:22,450
graphs and so on but a lot of work to do

00:29:16,030 --> 00:29:24,670
that now you see the pattern we are

00:29:22,450 --> 00:29:26,560
getting more and more into distributed

00:29:24,670 --> 00:29:31,930
and we are getting more and more into

00:29:26,560 --> 00:29:37,760
larger labs so more than one board so if

00:29:31,930 --> 00:29:44,929
you set up kind of your own lab

00:29:37,760 --> 00:29:49,850
and you yeah add it to one of the

00:29:44,929 --> 00:29:51,470
engines whatever ingenue use you sooner

00:29:49,850 --> 00:29:56,090
or later have the problem that you want

00:29:51,470 --> 00:29:58,730
to jump into one board and debug it yeah

00:29:56,090 --> 00:30:02,389
or you want to grab a board for local

00:29:58,730 --> 00:30:06,980
development local debugging so you need

00:30:02,389 --> 00:30:09,380
to take it to take over control yeah

00:30:06,980 --> 00:30:13,779
block the board from further processing

00:30:09,380 --> 00:30:19,480
and there's a project called lab grid

00:30:13,779 --> 00:30:22,309
which stretches that each lab treat was

00:30:19,480 --> 00:30:27,169
started by Penghu tronics

00:30:22,309 --> 00:30:29,330
and they maintained that project so

00:30:27,169 --> 00:30:34,100
what's it in principle it's an

00:30:29,330 --> 00:30:41,210
abstraction of the hardware control what

00:30:34,100 --> 00:30:44,179
does that mean well power serial and it

00:30:41,210 --> 00:30:47,570
lets you basically reserve a board take

00:30:44,179 --> 00:30:52,909
over control get the terminal from the

00:30:47,570 --> 00:30:56,990
board in a unified manner it has such a

00:30:52,909 --> 00:31:00,080
coordinator and basically a developer or

00:30:56,990 --> 00:31:06,700
admin could than access a reserved

00:31:00,080 --> 00:31:06,700
aboard a specific board and access it so

00:31:08,320 --> 00:31:16,190
you can expose the devices under test

00:31:11,980 --> 00:31:23,630
either to the test tool or to the

00:31:16,190 --> 00:31:26,470
developer with this wrapper war where

00:31:23,630 --> 00:31:26,470
with lab grid

00:31:27,470 --> 00:31:36,789
so what's good is we can and easily jump

00:31:31,730 --> 00:31:46,570
into the boards on the farm debug them

00:31:36,789 --> 00:31:51,350
without yeah big issues and without

00:31:46,570 --> 00:31:52,909
basically going through the if we talk

00:31:51,350 --> 00:31:54,710
about lava without going through the

00:31:52,909 --> 00:31:57,259
worker node right you don't need access

00:31:54,710 --> 00:32:00,649
to the worker node you get access

00:31:57,259 --> 00:32:02,870
through lab grid it abstracts the

00:32:00,649 --> 00:32:05,990
hardware specific so how do we get the

00:32:02,870 --> 00:32:08,570
serial how do we power on the board that

00:32:05,990 --> 00:32:11,149
is basically encapsulated in lab grid

00:32:08,570 --> 00:32:14,539
which makes things like configuring it

00:32:11,149 --> 00:32:16,549
for let's say using Fuego or use in lava

00:32:14,539 --> 00:32:19,419
easier because you have to say in

00:32:16,549 --> 00:32:24,409
commands for all boards you can hide

00:32:19,419 --> 00:32:29,320
nitty-gritty details away the setup it's

00:32:24,409 --> 00:32:34,159
actually yeah written in peyten

00:32:29,320 --> 00:32:37,179
installed with with pip I still had a

00:32:34,159 --> 00:32:39,169
little netic problems here and there so

00:32:37,179 --> 00:32:46,610
but that should be better

00:32:39,169 --> 00:32:49,549
meanwhile the docs are quite good

00:32:46,610 --> 00:32:57,950
they aren't read dogs so that will get

00:32:49,549 --> 00:33:01,399
you started with it similar slightly

00:32:57,950 --> 00:33:11,149
different use case but quite interesting

00:33:01,399 --> 00:33:19,730
idea is or for D our for team were

00:33:11,149 --> 00:33:21,740
started by the RT patch guys and they

00:33:19,730 --> 00:33:27,350
said okay we want to automate now a rag

00:33:21,740 --> 00:33:34,299
off let's say whatever device and we

00:33:27,350 --> 00:33:34,299
want to hook it up to let's say Jenkins

00:33:34,760 --> 00:33:44,210
so it is kind of similar to what a lab

00:33:40,880 --> 00:33:51,470
critters but it has an exists and an

00:33:44,210 --> 00:33:58,010
interesting difference so our 14 which

00:33:51,470 --> 00:34:02,510
is well maintained under the CIRT

00:33:58,010 --> 00:34:05,920
project so it provides infrastructure

00:34:02,510 --> 00:34:08,960
for power control and console access and

00:34:05,920 --> 00:34:09,760
the interesting feature it plugs into

00:34:08,960 --> 00:34:17,720
libvirt

00:34:09,760 --> 00:34:21,649
what does that mean so the idea was that

00:34:17,720 --> 00:34:23,990
we have a rack with some boards could be

00:34:21,649 --> 00:34:27,080
an x86 system could be an arm system

00:34:23,990 --> 00:34:29,899
could be some whatever board doesn't

00:34:27,080 --> 00:34:31,700
matter but it's sitting in Iraq we have

00:34:29,899 --> 00:34:34,220
a network switch power switch serial

00:34:31,700 --> 00:34:36,350
server done so kind of standardized

00:34:34,220 --> 00:34:38,060
components yeah specific network

00:34:36,350 --> 00:34:40,310
switches specific powers which are

00:34:38,060 --> 00:34:44,690
specific service area server so it's not

00:34:40,310 --> 00:34:50,990
that flexible like the other tools but

00:34:44,690 --> 00:34:56,149
it allows us to hook into libvirt there

00:34:50,990 --> 00:35:04,370
is a lipfird slave plugin which can talk

00:34:56,149 --> 00:35:07,450
to this r4d stack and basically to

00:35:04,370 --> 00:35:11,930
configure that thing we would add iraq

00:35:07,450 --> 00:35:14,540
we would add a power controller so this

00:35:11,930 --> 00:35:16,760
specific power switch a serial server

00:35:14,540 --> 00:35:21,320
this specific serial server and so on

00:35:16,760 --> 00:35:24,920
and add the board so we have power we

00:35:21,320 --> 00:35:30,410
have serial that's all we need to

00:35:24,920 --> 00:35:32,540
control that for basic stuff so we will

00:35:30,410 --> 00:35:35,180
manage power Cyril here we will allow

00:35:32,540 --> 00:35:38,840
remote control and we plug in into lip

00:35:35,180 --> 00:35:41,600
word that plugging into lip word is

00:35:38,840 --> 00:35:43,300
actually the very interesting idea

00:35:41,600 --> 00:35:48,100
because

00:35:43,300 --> 00:35:56,380
that thing shows up in Jenkins like an

00:35:48,100 --> 00:36:00,340
executor like a note so it shows up as

00:35:56,380 --> 00:36:04,050
if it was a cloud machine you can

00:36:00,340 --> 00:36:07,570
configure it like a cloud machine and

00:36:04,050 --> 00:36:10,000
Jenkins has the necessary calls to hook

00:36:07,570 --> 00:36:13,480
into libvirt and make that happen so

00:36:10,000 --> 00:36:19,600
actually the ports will show up in

00:36:13,480 --> 00:36:21,960
Jenkins with those descriptions where's

00:36:19,600 --> 00:36:28,270
the board so that will actually show up

00:36:21,960 --> 00:36:33,330
in Jenkins which is a really really nice

00:36:28,270 --> 00:36:44,590
idea to do that so it's something for

00:36:33,330 --> 00:36:46,750
you a go right it's well suited ya know

00:36:44,590 --> 00:36:50,500
so hooking it up with with flip weird

00:36:46,750 --> 00:36:53,710
great idea I like it it's rather small

00:36:50,500 --> 00:36:56,830
the downside is currently only a

00:36:53,710 --> 00:37:00,420
specific set of power switches serial

00:36:56,830 --> 00:37:04,060
server and so on is supported there is

00:37:00,420 --> 00:37:06,910
there is also like a tiny machine with

00:37:04,060 --> 00:37:10,620
some relays I don't remember that it was

00:37:06,910 --> 00:37:13,240
in the talk so there is possibility to

00:37:10,620 --> 00:37:17,080
extend that to do it also with other

00:37:13,240 --> 00:37:19,210
Hardware downside delivered patches

00:37:17,080 --> 00:37:22,770
don't seem to be upstream but we have

00:37:19,210 --> 00:37:29,200
deviant packages to our rescue

00:37:22,770 --> 00:37:36,370
all right now of course there are more

00:37:29,200 --> 00:37:41,770
and other systems this was basically a

00:37:36,370 --> 00:37:47,520
quick tour around the systems that I got

00:37:41,770 --> 00:37:47,520
in touch with if you will I need to oh

00:37:48,180 --> 00:37:53,890
yeah

00:37:49,990 --> 00:38:03,070
that's how it works just a second I need

00:37:53,890 --> 00:38:06,730
to move to here and then I can show this

00:38:03,070 --> 00:38:09,820
over here yes so if you are interested

00:38:06,730 --> 00:38:17,080
in what other systems exist if you want

00:38:09,820 --> 00:38:20,260
way more ideas then I could yeah give

00:38:17,080 --> 00:38:23,890
you in in the time available then take a

00:38:20,260 --> 00:38:28,170
look at the test stack survey which is

00:38:23,890 --> 00:38:31,650
on in Linux dot org this is part of the

00:38:28,170 --> 00:38:36,280
testing summit which has been organized

00:38:31,650 --> 00:38:38,710
and there are a lot of well way more

00:38:36,280 --> 00:38:42,460
than I already knew so that's a very

00:38:38,710 --> 00:38:49,150
interesting list of test systems they

00:38:42,460 --> 00:38:53,260
all have their speciality so check them

00:38:49,150 --> 00:38:57,910
out they have some interesting ideas and

00:38:53,260 --> 00:39:00,359
solutions so you can pick your favorite

00:38:57,910 --> 00:39:00,359
weapon

00:39:07,000 --> 00:39:18,600
so with that we are wrap up and QA so if

00:39:15,040 --> 00:39:23,560
you have questions somewhere was the mic

00:39:18,600 --> 00:39:28,390
over here so of course the frameworks

00:39:23,560 --> 00:39:32,320
all have their own strengths but what is

00:39:28,390 --> 00:39:35,410
important is in my opinion is that we

00:39:32,320 --> 00:39:39,760
can collaborate on those tests that we

00:39:35,410 --> 00:39:42,580
can share actually the test results yeah

00:39:39,760 --> 00:39:47,130
because the more well it gets a big data

00:39:42,580 --> 00:39:47,130
problem in the end but the more we can

00:39:47,370 --> 00:39:51,610
share here the more weak the more data

00:39:50,410 --> 00:39:54,400
points we have

00:39:51,610 --> 00:39:57,820
the more results we can actually

00:39:54,400 --> 00:40:00,010
evaluate and then it becomes a problem

00:39:57,820 --> 00:40:02,860
of aggregating that evaluating and

00:40:00,010 --> 00:40:07,030
visualization so the big part is we need

00:40:02,860 --> 00:40:09,910
better tools to collaborate to share the

00:40:07,030 --> 00:40:11,530
results and to visualize the results so

00:40:09,910 --> 00:40:16,390
we can make something out of it and

00:40:11,530 --> 00:40:21,940
don't have like five megabytes of past

00:40:16,390 --> 00:40:25,690
skip in a log file and more boards more

00:40:21,940 --> 00:40:30,100
boards that actually we are running the

00:40:25,690 --> 00:40:34,180
tests on so that will help to raise the

00:40:30,100 --> 00:40:39,850
bar here and that's my call to action

00:40:34,180 --> 00:40:42,600
here any questions we have microphones

00:40:39,850 --> 00:40:42,600
over here

00:40:45,910 --> 00:40:53,100
it's a little bright over here questions

00:40:50,100 --> 00:40:53,100
yep

00:41:01,380 --> 00:41:07,290
okay the question is about do you know

00:41:05,010 --> 00:41:09,359
any test frameworks that deal with real

00:41:07,290 --> 00:41:11,400
Hardware attached to the boards so like

00:41:09,359 --> 00:41:14,160
bear board is fun but if you need the

00:41:11,400 --> 00:41:17,520
microphone and Driver something like

00:41:14,160 --> 00:41:21,480
that but do you know any ways that

00:41:17,520 --> 00:41:24,030
automate this like nicely thank you can

00:41:21,480 --> 00:41:25,080
you can you specify I mean a microphone

00:41:24,030 --> 00:41:30,300
attached yeah

00:41:25,080 --> 00:41:31,890
what no I mean if the board has some

00:41:30,300 --> 00:41:34,650
hardware that it works with the

00:41:31,890 --> 00:41:36,420
microphone like a digitizer or something

00:41:34,650 --> 00:41:38,160
and you need to play a sound into that

00:41:36,420 --> 00:41:40,980
microphone externally or you need to

00:41:38,160 --> 00:41:41,640
record the picture from the HDMI it's

00:41:40,980 --> 00:41:44,130
nothing like that

00:41:41,640 --> 00:41:46,589
so if you need to drive external stimuli

00:41:44,130 --> 00:41:49,349
to the board and you have to like

00:41:46,589 --> 00:41:52,770
control this some way yeah yeah okay

00:41:49,349 --> 00:41:59,010
okay so I'm sure you can write that up

00:41:52,770 --> 00:42:05,300
with with Fuego in a job it will not be

00:41:59,010 --> 00:42:08,640
easy similar in similar in lava you can

00:42:05,300 --> 00:42:09,180
so in lava you can attach a label to a

00:42:08,640 --> 00:42:11,760
port

00:42:09,180 --> 00:42:15,660
which means has some extra hardware so

00:42:11,760 --> 00:42:17,700
you can identify that we have special

00:42:15,660 --> 00:42:20,550
hardware on that board and you can

00:42:17,700 --> 00:42:25,020
basically steer a drop to that very

00:42:20,550 --> 00:42:28,980
board second if you need some external

00:42:25,020 --> 00:42:31,410
input in lava you can you can in the job

00:42:28,980 --> 00:42:33,630
it gets pretty long then in the job

00:42:31,410 --> 00:42:36,000
description you can start you can either

00:42:33,630 --> 00:42:38,580
grab another board which is connected or

00:42:36,000 --> 00:42:41,550
you can create you you can create a

00:42:38,580 --> 00:42:45,599
container which runs at the same time

00:42:41,550 --> 00:42:48,570
and which then does some poking yeah I

00:42:45,599 --> 00:42:51,030
don't say the writing that tests

00:42:48,570 --> 00:42:55,910
description is easy yeah it's pretty

00:42:51,030 --> 00:42:59,280
spaghetti ish but it's possible

00:42:55,910 --> 00:43:01,640
multi-node yeah yeah could you run the

00:42:59,280 --> 00:43:01,640
microphone

00:43:06,110 --> 00:43:15,710
who has a question raise your hand yeah

00:43:13,040 --> 00:43:17,810
a couple of things yes we have done

00:43:15,710 --> 00:43:21,260
things with audio in lava in the lab

00:43:17,810 --> 00:43:23,660
before there is some limited video

00:43:21,260 --> 00:43:25,940
testing but as was noted it really is

00:43:23,660 --> 00:43:28,790
down to the test writer that you know

00:43:25,940 --> 00:43:31,880
and it's having the right support

00:43:28,790 --> 00:43:35,540
hardware there to be able to do it yeah

00:43:31,880 --> 00:43:37,100
the second thing I'd note is you

00:43:35,540 --> 00:43:39,530
mentioned of lab grid and having access

00:43:37,100 --> 00:43:42,620
to the board there is also within lava

00:43:39,530 --> 00:43:45,650
the concept of a hacking session you can

00:43:42,620 --> 00:43:47,330
submit a job which will give you SSH

00:43:45,650 --> 00:43:49,490
access as long as you are granted that

00:43:47,330 --> 00:43:51,890
access to the particular subnet in the

00:43:49,490 --> 00:43:53,930
lab you can SSH on to the board once the

00:43:51,890 --> 00:43:55,130
image has been deployed so there is that

00:43:53,930 --> 00:43:56,840
sort of access they will do all the

00:43:55,130 --> 00:43:59,750
power control all the deployment for you

00:43:56,840 --> 00:44:03,890
so just wanted to make that note yes the

00:43:59,750 --> 00:44:07,450
hacking session is there and I actually

00:44:03,890 --> 00:44:11,150
use that myself

00:44:07,450 --> 00:44:14,360
now with lab twit you get kind of a set

00:44:11,150 --> 00:44:18,050
of ports attracted so yep

00:44:14,360 --> 00:44:21,770
okay so to the first question we are

00:44:18,050 --> 00:44:24,260
also developing this lab stack and it's

00:44:21,770 --> 00:44:26,270
also mentioned in the survey and there

00:44:24,260 --> 00:44:30,170
is a custom-made board it's called muck

00:44:26,270 --> 00:44:32,270
spy it has add-ons by its own it

00:44:30,170 --> 00:44:34,910
provides internet us be some kind of

00:44:32,270 --> 00:44:38,510
switches etc but recently we started

00:44:34,910 --> 00:44:40,850
developing some add-ons to it and the

00:44:38,510 --> 00:44:43,370
microphone and the speakers are one of

00:44:40,850 --> 00:44:49,280
the add-ons so we use this for example

00:44:43,370 --> 00:44:51,260
to automate tests this tests of like NLP

00:44:49,280 --> 00:44:54,080
and that kind of stuff

00:44:51,260 --> 00:44:56,810
I'm also going to have a talk on add-on

00:44:54,080 --> 00:44:59,420
which allows you to grab a video and to

00:44:56,810 --> 00:45:02,480
provide some kind of input so that you

00:44:59,420 --> 00:45:05,240
can emulate something a user clicking or

00:45:02,480 --> 00:45:08,030
to get real fully remote access like

00:45:05,240 --> 00:45:11,090
hardware hardware version of the RDP so

00:45:08,030 --> 00:45:15,370
generally yes we are doing stuff like

00:45:11,090 --> 00:45:18,980
that and if you are interested find us

00:45:15,370 --> 00:45:20,960
ok are the boards available where can I

00:45:18,980 --> 00:45:28,120
get a board

00:45:20,960 --> 00:45:31,670
yep okay but I have to produce it myself

00:45:28,120 --> 00:45:34,400
hi okay one last question I think we are

00:45:31,670 --> 00:45:36,620
running running late already for the

00:45:34,400 --> 00:45:38,600
audio testing I think Google provides a

00:45:36,620 --> 00:45:41,750
loopback module which you can use in

00:45:38,600 --> 00:45:44,140
order to also deploy sound and also

00:45:41,750 --> 00:45:48,620
record it in the same time yeah with the

00:45:44,140 --> 00:45:50,510
delay he loosed in them yeah I was

00:45:48,620 --> 00:45:52,750
wondering if you have any solutions

00:45:50,510 --> 00:45:55,910
regarding the deployment of the image

00:45:52,750 --> 00:45:59,300
you said about lab grid that only that

00:45:55,910 --> 00:46:01,490
it's an abstraction layer for hardware

00:45:59,300 --> 00:46:03,590
but the main problem we have I mean the

00:46:01,490 --> 00:46:06,110
main problem I had was deploying the the

00:46:03,590 --> 00:46:08,330
whole image and the only solution was

00:46:06,110 --> 00:46:11,960
using relays and stuff like that in

00:46:08,330 --> 00:46:15,170
order to you that is the usual case you

00:46:11,960 --> 00:46:19,280
need some sort of power control either

00:46:15,170 --> 00:46:23,840
kind of remote PD you with the sockets

00:46:19,280 --> 00:46:26,560
or a relay that is what you require in

00:46:23,840 --> 00:46:30,500
most solutions so our for the same deal

00:46:26,560 --> 00:46:34,010
lab Crete you need also well some

00:46:30,500 --> 00:46:35,810
command you know it provides the layer

00:46:34,010 --> 00:46:38,840
but I'll have to take care of the of the

00:46:35,810 --> 00:46:42,890
deployment of the image you you need to

00:46:38,840 --> 00:46:45,890
wire up the board any in in any case yes

00:46:42,890 --> 00:46:48,080
okay thanks that's true that's true so

00:46:45,890 --> 00:46:51,260
there will be writing you need to

00:46:48,080 --> 00:46:55,150
provide serial some sort of power switch

00:46:51,260 --> 00:46:58,970
whatever that is yeah

00:46:55,150 --> 00:47:02,330
just add that so a lot of the modern dev

00:46:58,970 --> 00:47:03,680
boards are using SD cards and so there

00:47:02,330 --> 00:47:06,380
are some solutions out there where

00:47:03,680 --> 00:47:09,020
people are have made SD card mixers so

00:47:06,380 --> 00:47:11,330
you can switch the an SD card image from

00:47:09,020 --> 00:47:15,050
being attached to the device under test

00:47:11,330 --> 00:47:17,630
to some host system and then like which

00:47:15,050 --> 00:47:19,340
is that's yeah which is like I'd like to

00:47:17,630 --> 00:47:23,330
buy that from seed studio that's that's

00:47:19,340 --> 00:47:29,290
quite nifty yeah and I'm sure there will

00:47:23,330 --> 00:47:32,660
be some some boards being manufactured

00:47:29,290 --> 00:47:34,020
soon everyone needs it but it's hard to

00:47:32,660 --> 00:47:36,450
get by those right

00:47:34,020 --> 00:47:38,430
yeah yeah you can't find them just off

00:47:36,450 --> 00:47:42,000
the shelf yeah at first it would be good

00:47:38,430 --> 00:47:43,020
if we if we come up with with a board

00:47:42,000 --> 00:47:46,230
that does that for us

00:47:43,020 --> 00:47:48,780
alright thanks for joining and I'm

00:47:46,230 --> 00:47:50,910
around all week if you have any more

00:47:48,780 --> 00:47:56,020
questions or want a deep dive into any

00:47:50,910 --> 00:47:58,520
of those find me and thanks for joining

00:47:56,020 --> 00:47:58,520

YouTube URL: https://www.youtube.com/watch?v=NRywFwe0uwU


