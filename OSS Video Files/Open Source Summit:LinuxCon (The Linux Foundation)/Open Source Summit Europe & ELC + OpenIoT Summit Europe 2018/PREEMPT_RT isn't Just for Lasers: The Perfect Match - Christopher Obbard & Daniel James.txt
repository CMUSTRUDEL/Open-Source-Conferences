Title: PREEMPT_RT isn't Just for Lasers: The Perfect Match - Christopher Obbard & Daniel James
Publication date: 2018-10-25
Playlist: Open Source Summit Europe & ELC + OpenIoT Summit Europe 2018
Description: 
	PREEMPT_RT isn't Just for Lasers: The Perfect Match for Hearing Aid Research! - Christopher Obbard & Daniel James, 64 Studio Ltd

Have you ever wondered how digital hearing aids are developed? Most people have probably never given this complex problem a second thought.

The Linux kernel (with the PREEMPT_RT patchset), GNU tools and Debian are the key ingredients for a project by the Cluster of Excellence group Hearing4all to research the development of new hearing aid algorithms.

The open Master Hearing Aid (openMHA) is an open-souce cross-platform toolbox which allows a user to form hearing aid processing chains. The software is scriptable to allow researchers to update and test algorithms on-the-fly.

At this session we'll present openMHA running on Mahalia, a mobile research platform composed of a BeagleBone Black Wireless, custom 6-channel soundcard (Cape4all) and battery. You'll learn how 64 Studio tuned the system to process all 6 channels of audio through complicated algorithms in less than 4ms! 

About Daniel James
Daniel James and Free Ekanayaka founded 64 Studio in 2005, using Debian, the new 64-bit desktop processors and the real-time Linux kernel to create a GNU/Linux workstation for media with best-in-class performance and stability. Since 2009, we have contributed to low-latency hearing aid research by the OpenMHA project, first on laptops, and now on embedded ARM devices. Daniel has been on a mission to make Free Software available to all since he got his own dial-up modem. 

About Chris Obbard
At 64 Studio Ltd we develop software and hardware solutions for research projects and consumer products normally with an audio or multimedia focus. We also develop tools to create Linux distributions for PCs as well as more recently Embedded Development boards and custom Embedded targets.

Most of the time I can be found in a dark room poking at the Linux Kernel trying to get an extra few bogomips of performance, crafting the final lines of an ALSA Soundcard driver, porting software to a newly released platform, laying out a circuit board or running hardware verification tests.

Christopher Obbard is a GNU/Linux developer focusing on embedded solutions, and a hardware engineer of medical and aerospace devices. Chris has recently contributed to a paper on multichannel embedded audio hardware for open source hearing aid research, submitted to the 2018 International Linux Audio Conference in Berlin.

Chris's specialities include audio driver development, working with Debian GNU/Linux for ARM processors, and the 64 Studio Platform Development Kit. In his spare time, Chris has built the software for the PiDeck project, a real-time embedded distribution for DJs, based on Debian and the xwax application by Mark Hills. PiDeck has a world-wide community and has featured in the official MagPi magazine from the Raspberry Pi Foundation.
Captions: 
	00:00:00,060 --> 00:00:06,120
thank you um good afternoon everyone

00:00:03,230 --> 00:00:09,269
we're here to tell you about the work

00:00:06,120 --> 00:00:12,210
we've been doing to assist the

00:00:09,269 --> 00:00:14,219
University of oldenburg and the what's

00:00:12,210 --> 00:00:18,060
called the competent centrum for hearing

00:00:14,219 --> 00:00:20,400
aid research in Germany and we're going

00:00:18,060 --> 00:00:23,580
to be telling you about sort of how we

00:00:20,400 --> 00:00:24,199
did it and why so great the first slide

00:00:23,580 --> 00:00:27,570
please

00:00:24,199 --> 00:00:32,430
so we're from a small UK company called

00:00:27,570 --> 00:00:33,600
64 studio we created an amd64 based

00:00:32,430 --> 00:00:36,000
district

00:00:33,600 --> 00:00:39,480
for media production so workstations

00:00:36,000 --> 00:00:46,920
essentially and what we did was we took

00:00:39,480 --> 00:00:48,180
the new AMD 64 port of debian we

00:00:46,920 --> 00:00:51,780
combined that with a real-time kernel

00:00:48,180 --> 00:00:53,730
and a curated package selection and we

00:00:51,780 --> 00:00:57,840
produced that distro from about sort of

00:00:53,730 --> 00:01:00,300
2005 2006 and pretty soon people got the

00:00:57,840 --> 00:01:02,270
idea that this was a worthwhile approach

00:01:00,300 --> 00:01:04,860
and the other distros started to take on

00:01:02,270 --> 00:01:08,580
the idea of packaging a real-time kernel

00:01:04,860 --> 00:01:11,159
for desktop systems so what do we do

00:01:08,580 --> 00:01:13,549
well we make this still make a custom

00:01:11,159 --> 00:01:18,710
Debian based and a Bungie based distros

00:01:13,549 --> 00:01:21,810
for x86 64 but now arm as well and

00:01:18,710 --> 00:01:24,869
because we focus on audio performance we

00:01:21,810 --> 00:01:27,750
do some development work and debugging

00:01:24,869 --> 00:01:30,630
for audio systems so sound cards that

00:01:27,750 --> 00:01:32,579
kind of thing and our target is to get

00:01:30,630 --> 00:01:36,119
the best possible audio latency from

00:01:32,579 --> 00:01:38,960
commodity hardware but also to make our

00:01:36,119 --> 00:01:43,740
tools available to everyone

00:01:38,960 --> 00:01:46,799
so Daniel I co-founded a company 2005

00:01:43,740 --> 00:01:49,229
with free economica who was a developer

00:01:46,799 --> 00:01:52,200
on the dem UD distribution the Debian

00:01:49,229 --> 00:01:54,659
multimedia distribution and we brought

00:01:52,200 --> 00:01:55,740
the initial destroy together I also

00:01:54,659 --> 00:01:57,479
worked on Linux user and developer

00:01:55,740 --> 00:02:00,659
magazine if any of you remember that

00:01:57,479 --> 00:02:05,250
from the 1990s and I've written a couple

00:02:00,659 --> 00:02:08,099
of books about this sort of area and I

00:02:05,250 --> 00:02:09,720
was doing a journalism assignment and I

00:02:08,099 --> 00:02:12,060
was talking to musicians we were

00:02:09,720 --> 00:02:13,500
adopting the AMD Opteron this is about

00:02:12,060 --> 00:02:15,060
00:02:13,500 --> 00:02:17,460
and thought this sounds like a really

00:02:15,060 --> 00:02:20,190
interesting processor what if we had a

00:02:17,460 --> 00:02:22,260
distribution that was you know really

00:02:20,190 --> 00:02:24,780
targeted for this new hardware making

00:02:22,260 --> 00:02:27,180
the best use of this sort of new tech as

00:02:24,780 --> 00:02:30,240
it was at the time and that turned out

00:02:27,180 --> 00:02:33,180
to be a good bet and that's how basic

00:02:30,240 --> 00:02:34,560
Google started so what Dan's writing

00:02:33,180 --> 00:02:38,100
these magazines and writing books

00:02:34,560 --> 00:02:39,630
handled the engineering so originally I

00:02:38,100 --> 00:02:43,350
trained as an electronic engineer but I

00:02:39,630 --> 00:02:45,180
also now to do software with Linux just

00:02:43,350 --> 00:02:49,200
find it really fun and it's challenging

00:02:45,180 --> 00:02:52,830
so why not I mean really interested in

00:02:49,200 --> 00:02:54,330
projects like Linux and XE upstream in

00:02:52,830 --> 00:02:57,600
the Allwinner

00:02:54,330 --> 00:03:04,560
chips I've been hacking on Linux for a

00:02:57,600 --> 00:03:07,709
few years now so yeah so hearing aids

00:03:04,560 --> 00:03:09,060
well obviously hearing aids have a long

00:03:07,709 --> 00:03:10,520
history from the sort of picture in the

00:03:09,060 --> 00:03:12,840
middle here sort of pure acoustic

00:03:10,520 --> 00:03:15,540
instruments - the one on the left which

00:03:12,840 --> 00:03:18,209
is a sort of familiar analog hearing aid

00:03:15,540 --> 00:03:20,340
quite bulky quite limited just a simple

00:03:18,209 --> 00:03:21,780
amplifier essentially and on the

00:03:20,340 --> 00:03:23,970
right-hand side we've got the the sort

00:03:21,780 --> 00:03:25,920
of modern digital hearing aid which is a

00:03:23,970 --> 00:03:29,010
tiny device that doesn't have a great

00:03:25,920 --> 00:03:30,930
deal more now if you have that hearing

00:03:29,010 --> 00:03:32,720
aid which is just a simple acoustic

00:03:30,930 --> 00:03:34,620
amplifier it will amplify everything

00:03:32,720 --> 00:03:36,930
including the sounds that you don't want

00:03:34,620 --> 00:03:37,680
to hear such as a fire engine going past

00:03:36,930 --> 00:03:39,989
while you're trying to have a

00:03:37,680 --> 00:03:43,290
conversation so what digital hearing

00:03:39,989 --> 00:03:45,269
aids do is they take this this idea of

00:03:43,290 --> 00:03:47,459
an amplifier and they turn it into more

00:03:45,269 --> 00:03:54,690
of a processing device that can filter

00:03:47,459 --> 00:03:57,450
audio and enhance it so obviously we

00:03:54,690 --> 00:03:59,250
want sound to be audible to people have

00:03:57,450 --> 00:04:01,070
hearing loss there are many causes of

00:03:59,250 --> 00:04:04,320
hearing loss

00:04:01,070 --> 00:04:07,170
you know like traumatic hearing loss

00:04:04,320 --> 00:04:09,630
caused by loud noises no disease and

00:04:07,170 --> 00:04:11,670
inherited hearing loss there's a wide

00:04:09,630 --> 00:04:15,420
range of devices at different price

00:04:11,670 --> 00:04:16,799
levels and as hearing aids become more

00:04:15,420 --> 00:04:20,640
sophisticated they may need to be

00:04:16,799 --> 00:04:24,780
calibrated for individuals and hearing

00:04:20,640 --> 00:04:26,070
aids are relatively underfunded area of

00:04:24,780 --> 00:04:29,220
research

00:04:26,070 --> 00:04:33,300
we found the statistic of just over a

00:04:29,220 --> 00:04:36,690
pound is spent per person in the UK per

00:04:33,300 --> 00:04:39,390
year on hearing aid research and hearing

00:04:36,690 --> 00:04:40,970
research more generally and that is you

00:04:39,390 --> 00:04:47,130
know probably less than a tenth of the

00:04:40,970 --> 00:04:49,280
income for sight loss researcher but

00:04:47,130 --> 00:04:52,740
there is some evidence to suggest that

00:04:49,280 --> 00:04:56,280
hearing aids have all kinds of side

00:04:52,740 --> 00:04:59,100
benefits one of which may be the later

00:04:56,280 --> 00:05:01,200
onset of dementia because if people

00:04:59,100 --> 00:05:05,180
cannot hear what people saying to them

00:05:01,200 --> 00:05:05,180
it obviously is not going to help them

00:05:05,270 --> 00:05:11,160
so what is the hearing aid well it's one

00:05:09,420 --> 00:05:13,890
or more microphones that we'll see later

00:05:11,160 --> 00:05:16,200
our multiple microphone hearing aids are

00:05:13,890 --> 00:05:17,420
now part of the sort of research that's

00:05:16,200 --> 00:05:19,710
being done

00:05:17,420 --> 00:05:22,200
you got a processing circuit of some

00:05:19,710 --> 00:05:27,960
kind and an output and of course you

00:05:22,200 --> 00:05:29,100
need a battery to power this so the

00:05:27,960 --> 00:05:32,000
analog hearing aid that we saw in a

00:05:29,100 --> 00:05:35,400
previous slide not really sold anymore

00:05:32,000 --> 00:05:37,980
they can be bulky and rather expensive

00:05:35,400 --> 00:05:41,880
for what they are and it's it's all tech

00:05:37,980 --> 00:05:44,640
essentially the filter response is sort

00:05:41,880 --> 00:05:46,350
of baked in to that hardware and it may

00:05:44,640 --> 00:05:47,790
be difficult to tailor for an individual

00:05:46,350 --> 00:05:49,500
and then of course we have the other

00:05:47,790 --> 00:05:52,320
problem which is that nowadays people

00:05:49,500 --> 00:05:53,640
have mobile phones they have digital TVs

00:05:52,320 --> 00:05:56,640
and all kinds of other audio devices

00:05:53,640 --> 00:05:58,410
that need to be able to integrate with

00:05:56,640 --> 00:06:00,510
these hearing aids and in the past this

00:05:58,410 --> 00:06:02,610
was done by induction so you would have

00:06:00,510 --> 00:06:05,640
a telephone pickup coil inside a hearing

00:06:02,610 --> 00:06:07,110
aid but obviously we've got bluetooth

00:06:05,640 --> 00:06:09,210
got all kinds of other technologies

00:06:07,110 --> 00:06:10,980
nowadays and people need to be able to

00:06:09,210 --> 00:06:13,320
take that phone call or listen to the TV

00:06:10,980 --> 00:06:18,330
and without you know how to take the

00:06:13,320 --> 00:06:21,540
hearing aid in or out so digital hearing

00:06:18,330 --> 00:06:24,630
aids quite different the research in

00:06:21,540 --> 00:06:26,370
this area is quite difficult to break

00:06:24,630 --> 00:06:29,310
into and that because the

00:06:26,370 --> 00:06:33,900
miniaturization involved is it's very

00:06:29,310 --> 00:06:35,760
expensive to do it's not necessarily

00:06:33,900 --> 00:06:37,900
something a small company can can break

00:06:35,760 --> 00:06:39,840
into easily

00:06:37,900 --> 00:06:41,830
so you tend to see the very large

00:06:39,840 --> 00:06:45,639
companies involved spending a great deal

00:06:41,830 --> 00:06:47,500
of money on on these these projects this

00:06:45,639 --> 00:06:49,630
sort of earlier generation digital

00:06:47,500 --> 00:06:51,850
hearing aids may not be software

00:06:49,630 --> 00:06:55,840
upgradeable the algorithms may be backed

00:06:51,850 --> 00:06:59,199
into the hardware innocence and that is

00:06:55,840 --> 00:07:00,580
obviously a less flexible the initial

00:06:59,199 --> 00:07:05,699
cost of these devices might be higher

00:07:00,580 --> 00:07:08,229
and we have this latency issue if you

00:07:05,699 --> 00:07:10,150
sort of do more processing than the

00:07:08,229 --> 00:07:13,030
hearing aid can handle we can introduce

00:07:10,150 --> 00:07:14,400
delay and that would be somewhat like

00:07:13,030 --> 00:07:16,780
listening to a badly double movie

00:07:14,400 --> 00:07:19,000
obviously that's not a good thing for

00:07:16,780 --> 00:07:21,639
hearing it so it's a very latency

00:07:19,000 --> 00:07:23,229
critical application you've got power

00:07:21,639 --> 00:07:26,680
issues of course battery life all those

00:07:23,229 --> 00:07:28,360
kind of things and then we've got the

00:07:26,680 --> 00:07:30,130
new generation devices like the

00:07:28,360 --> 00:07:30,910
Bluetooth devices audio devices and

00:07:30,130 --> 00:07:34,150
things like that that need to be

00:07:30,910 --> 00:07:35,979
integrated so there are commercial

00:07:34,150 --> 00:07:38,260
products beginning to break into this

00:07:35,979 --> 00:07:40,240
this area but they're not very hackable

00:07:38,260 --> 00:07:41,770
they're not very easy to break into for

00:07:40,240 --> 00:07:44,410
these sort of small to medium sized

00:07:41,770 --> 00:07:48,220
companies so this is the things we can

00:07:44,410 --> 00:07:51,160
to tackle the open MHA is the the master

00:07:48,220 --> 00:07:54,789
hearing aid the sort of open master

00:07:51,160 --> 00:07:58,210
hearing aid this was established as part

00:07:54,789 --> 00:08:00,490
of this competence center in in Germany

00:07:58,210 --> 00:08:03,310
the University of oldenburg has led this

00:08:00,490 --> 00:08:06,610
project in partnership with commercial

00:08:03,310 --> 00:08:08,950
companies and for some years since about

00:08:06,610 --> 00:08:10,840
2006 they've been developing this is

00:08:08,950 --> 00:08:13,479
sort of open platform for hearing over

00:08:10,840 --> 00:08:17,370
research there's various bits of

00:08:13,479 --> 00:08:20,020
software available obviously it's

00:08:17,370 --> 00:08:21,250
emphasizing the real-time aspect so

00:08:20,020 --> 00:08:24,250
that's with the real-time Linux camera

00:08:21,250 --> 00:08:26,050
comes in and there are multiple

00:08:24,250 --> 00:08:29,950
algorithms that can be tested and

00:08:26,050 --> 00:08:31,900
evaluated it's not only the sort of the

00:08:29,950 --> 00:08:34,180
software that you put in the hearing aid

00:08:31,900 --> 00:08:36,640
but it's also the relationship of that

00:08:34,180 --> 00:08:38,860
software to the hardware so for example

00:08:36,640 --> 00:08:42,190
you can have multiple microphones per

00:08:38,860 --> 00:08:44,980
ear you can set up a directional array

00:08:42,190 --> 00:08:47,320
so that microphones are amplifying in

00:08:44,980 --> 00:08:49,100
front of the wearer rather than off to

00:08:47,320 --> 00:08:52,069
the side or behind that person

00:08:49,100 --> 00:08:53,470
you can use beamforming techniques which

00:08:52,069 --> 00:08:56,089
are also used in things like

00:08:53,470 --> 00:08:59,660
videoconferencing microphones so we're

00:08:56,089 --> 00:09:01,970
trying to compare the time that sounds

00:08:59,660 --> 00:09:04,610
arrived at different microphones and use

00:09:01,970 --> 00:09:06,680
that to sort of focus the amplification

00:09:04,610 --> 00:09:09,699
on a certain spot normally in front of

00:09:06,680 --> 00:09:11,509
the where and these are more complex

00:09:09,699 --> 00:09:14,269
techniques that need more processing

00:09:11,509 --> 00:09:16,069
power but what this project basically

00:09:14,269 --> 00:09:17,620
does is it gives all these different

00:09:16,069 --> 00:09:19,690
research groups and universities

00:09:17,620 --> 00:09:22,339
different companies around the world

00:09:19,690 --> 00:09:24,199
like a base platform that they can

00:09:22,339 --> 00:09:27,230
evaluate certain techniques or

00:09:24,199 --> 00:09:32,029
algorithms against and as a submission

00:09:27,230 --> 00:09:34,339
it's been going over a few years so what

00:09:32,029 --> 00:09:37,490
happened initially well at the time

00:09:34,339 --> 00:09:41,480
we're talking sort of twelve or so years

00:09:37,490 --> 00:09:43,310
ago the algorithms required

00:09:41,480 --> 00:09:46,480
running on something like a laptop or a

00:09:43,310 --> 00:09:48,769
PC and the reason was that these are

00:09:46,480 --> 00:09:50,420
algorithms which have not yet been

00:09:48,769 --> 00:09:52,550
optimized for the miniature hardware

00:09:50,420 --> 00:09:54,439
that you'll find in hearing aid and the

00:09:52,550 --> 00:09:56,899
reason for that is if you've got a

00:09:54,439 --> 00:09:58,850
research approach which may not be

00:09:56,899 --> 00:10:00,470
fruitful it doesn't make sense to

00:09:58,850 --> 00:10:03,230
heavily optimize that for the miniature

00:10:00,470 --> 00:10:04,910
hardware before you're sure that it's

00:10:03,230 --> 00:10:05,899
actually a good technique because you

00:10:04,910 --> 00:10:08,779
could waste a lot of time and money

00:10:05,899 --> 00:10:10,430
doing that so it was this is more the

00:10:08,779 --> 00:10:12,769
sort of what you were doing our lab

00:10:10,430 --> 00:10:15,620
right you would sit someone down and

00:10:12,769 --> 00:10:18,529
maybe expose them to some sounds and get

00:10:15,620 --> 00:10:21,170
their feedback and you know adjust the

00:10:18,529 --> 00:10:27,339
audio techniques and so sort of desk

00:10:21,170 --> 00:10:30,680
based we typically be using a USB device

00:10:27,339 --> 00:10:32,300
in a lab setting and you'll see on top

00:10:30,680 --> 00:10:33,470
of the black box on the top right corner

00:10:32,300 --> 00:10:35,930
there you've got the the actual

00:10:33,470 --> 00:10:39,829
earpieces which fit behind the wear as

00:10:35,930 --> 00:10:45,800
is and this is quite quite CPU hungry

00:10:39,829 --> 00:10:48,290
stuff so fast forward a decade or so and

00:10:45,800 --> 00:10:50,449
we want to take those people out of the

00:10:48,290 --> 00:10:54,139
lab and into the wider world now there

00:10:50,449 --> 00:10:56,180
was a laptop based version which meant

00:10:54,139 --> 00:10:58,040
you put a think pad in a backpack and

00:10:56,180 --> 00:11:00,260
you had the cables running out the

00:10:58,040 --> 00:11:01,610
backpack to the earpieces and you could

00:11:00,260 --> 00:11:04,100
send people

00:11:01,610 --> 00:11:07,760
into the real world to test these

00:11:04,100 --> 00:11:10,280
hearing aids but of course you would

00:11:07,760 --> 00:11:12,500
only get maybe a couple of hours of

00:11:10,280 --> 00:11:14,300
battery-life doing this sort of quite

00:11:12,500 --> 00:11:16,280
intense some audio processing and then

00:11:14,300 --> 00:11:17,450
you'd have to return to base so it's not

00:11:16,280 --> 00:11:19,460
the sort of thing that somebody could

00:11:17,450 --> 00:11:22,910
use in their daily life not not too

00:11:19,460 --> 00:11:24,590
practical but now we've got the single

00:11:22,910 --> 00:11:30,260
board computers this is a BeagleBone

00:11:24,590 --> 00:11:34,520
black the wireless version we will tell

00:11:30,260 --> 00:11:35,900
you more about that the SPC's based on

00:11:34,520 --> 00:11:38,780
mobile phone parts are relatively

00:11:35,900 --> 00:11:41,270
affordable compared to the laptops that

00:11:38,780 --> 00:11:42,980
we used before of course they're using a

00:11:41,270 --> 00:11:46,130
lot less power so we can extend a

00:11:42,980 --> 00:11:47,780
battery life and there are lots of

00:11:46,130 --> 00:11:49,220
peripherals that we can add on to it

00:11:47,780 --> 00:11:54,200
like this audio tape we'll be telling

00:11:49,220 --> 00:11:58,280
you about for some issues there are some

00:11:54,200 --> 00:12:01,880
issues with these devices if they don't

00:11:58,280 --> 00:12:03,050
have long lifespans we may not be able

00:12:01,880 --> 00:12:05,000
to have a standard base because this

00:12:03,050 --> 00:12:08,810
project wants to run over many years so

00:12:05,000 --> 00:12:10,490
we need a device with long availability

00:12:08,810 --> 00:12:12,620
preferably open hardware so we can make

00:12:10,490 --> 00:12:19,550
more if we need to and that's whether

00:12:12,620 --> 00:12:21,560
this is a BeagleBone so so as you saw in

00:12:19,550 --> 00:12:24,590
the previous slide there was a USB audio

00:12:21,560 --> 00:12:28,220
interface but USB audio has a lot of

00:12:24,590 --> 00:12:30,080
extra stuff that's sort of passing down

00:12:28,220 --> 00:12:32,900
the wire that's not necessarily to do

00:12:30,080 --> 00:12:35,750
with audio but just the overhead of USB

00:12:32,900 --> 00:12:38,090
itself and so we want to use as little

00:12:35,750 --> 00:12:40,340
as possible in order to get that low

00:12:38,090 --> 00:12:43,700
latency performance so we're using the I

00:12:40,340 --> 00:12:46,130
squared s bus which is on the on the

00:12:43,700 --> 00:12:49,340
BeagleBone and on the Raspberry Pi and

00:12:46,130 --> 00:12:51,350
other devices the Raspberry Pi only

00:12:49,340 --> 00:12:53,150
supports two channels of I squared s and

00:12:51,350 --> 00:12:54,860
if you're not familiar with our squad

00:12:53,150 --> 00:12:57,470
assets the it's the sort of low-level

00:12:54,860 --> 00:12:59,390
protocol that was used in compact disc

00:12:57,470 --> 00:13:02,960
players it was a valid invented by

00:12:59,390 --> 00:13:05,150
Philips in the 1980s and it's very

00:13:02,960 --> 00:13:07,760
suitable for our purposes but there's

00:13:05,150 --> 00:13:10,760
only as I say only two two channels on

00:13:07,760 --> 00:13:12,560
the I squared s on the Raspberry Pi and

00:13:10,760 --> 00:13:14,899
because we want to use multiple

00:13:12,560 --> 00:13:16,999
microphones per ear we need more than

00:13:14,899 --> 00:13:19,970
two channels so fortunately the

00:13:16,999 --> 00:13:22,459
BeagleBone supports more and this is in

00:13:19,970 --> 00:13:25,309
part because of home theater so you've

00:13:22,459 --> 00:13:27,290
got these chipsets which support eight

00:13:25,309 --> 00:13:28,670
channels or sixteen channels of audio

00:13:27,290 --> 00:13:30,499
because they're designed for surround

00:13:28,670 --> 00:13:32,360
sound essentially so we're we're

00:13:30,499 --> 00:13:35,499
appropriating that and misusing it for

00:13:32,360 --> 00:13:35,499
some completely different purpose

00:13:36,619 --> 00:13:44,240
so the BeagleBone black it's a good

00:13:40,910 --> 00:13:48,279
balance of the features that we need as

00:13:44,240 --> 00:13:51,529
this isn't slide it's available it's

00:13:48,279 --> 00:13:56,420
reasonably priced and it sort of does

00:13:51,529 --> 00:13:57,860
what we need it to do and the sort of

00:13:56,420 --> 00:13:59,959
development because his own open

00:13:57,860 --> 00:14:02,949
hardware means that we can take it to

00:13:59,959 --> 00:14:04,999
produce our own device if we need to and

00:14:02,949 --> 00:14:08,869
Texas Instruments actually very very

00:14:04,999 --> 00:14:10,850
helpful on specs and so on support but

00:14:08,869 --> 00:14:12,800
it is right getting rather old now as a

00:14:10,850 --> 00:14:15,889
design and it's it's only one gigahertz

00:14:12,800 --> 00:14:18,079
um single core and we're doing intensive

00:14:15,889 --> 00:14:21,730
audio processing so we we're looking to

00:14:18,079 --> 00:14:24,050
the future to see what we can do instead

00:14:21,730 --> 00:14:26,569
so Chris would you like to tell us about

00:14:24,050 --> 00:14:28,249
this so the board you can see in front

00:14:26,569 --> 00:14:32,059
of us is a development board from analog

00:14:28,249 --> 00:14:34,040
devices it's hooked up to the BeagleBone

00:14:32,059 --> 00:14:36,110
black and there's also some MEMS

00:14:34,040 --> 00:14:37,850
microphones on there which digital

00:14:36,110 --> 00:14:40,600
microphones

00:14:37,850 --> 00:14:43,579
there's also speaker and some amplifiers

00:14:40,600 --> 00:14:45,620
now obviously that is very difficult to

00:14:43,579 --> 00:14:47,449
fit in a patient to send them out into

00:14:45,620 --> 00:14:51,309
the field and the wires will come off

00:14:47,449 --> 00:14:58,129
and then be quite difficult to

00:14:51,309 --> 00:15:00,589
eventually come back together so it was

00:14:58,129 --> 00:15:02,799
decided that it would be designed as a

00:15:00,589 --> 00:15:04,910
cape to fit on the BeagleBone

00:15:02,799 --> 00:15:07,399
unfortunately it's not available for

00:15:04,910 --> 00:15:09,259
purchase at the moment but in the future

00:15:07,399 --> 00:15:13,160
we're looking to make it available for

00:15:09,259 --> 00:15:16,730
purchase to others so it's designed to

00:15:13,160 --> 00:15:18,259
be used with hearing aids and preamps

00:15:16,730 --> 00:15:22,910
that have already been created so this

00:15:18,259 --> 00:15:25,670
is basically lining and line out three

00:15:22,910 --> 00:15:28,590
stereo microphone inputs and three oh

00:15:25,670 --> 00:15:31,140
sorry two stereo headphone outputs

00:15:28,590 --> 00:15:33,660
we've got an external microSD storage as

00:15:31,140 --> 00:15:35,090
well as there's also a MMC storage on

00:15:33,660 --> 00:15:38,100
the BeagleBone black itself

00:15:35,090 --> 00:15:40,500
there's Bluetooth and wireless and also

00:15:38,100 --> 00:15:41,610
battery connections and the final good

00:15:40,500 --> 00:15:45,140
thing about it is it's open-source

00:15:41,610 --> 00:15:45,140
hardware and it's very cheap to produce

00:15:49,040 --> 00:15:55,070
so we generate our images using a tool

00:15:51,960 --> 00:15:58,860
called PDK platform development kit

00:15:55,070 --> 00:16:03,150
which basically takes a debian base and

00:15:58,860 --> 00:16:05,460
we can add our own packages in so we

00:16:03,150 --> 00:16:06,960
decided to add the BeagleBone support to

00:16:05,460 --> 00:16:08,670
that in the first case because we were

00:16:06,960 --> 00:16:10,110
familiar with our tool and how it works

00:16:08,670 --> 00:16:13,380
we're so very familiar with debian

00:16:10,110 --> 00:16:16,260
aren't we so what we did in that case

00:16:13,380 --> 00:16:18,630
was we looked at the BeagleBone images

00:16:16,260 --> 00:16:20,850
that are out there already and we

00:16:18,630 --> 00:16:22,830
basically copied what was in there the

00:16:20,850 --> 00:16:28,170
layouts of the SD card that sort of

00:16:22,830 --> 00:16:30,240
thing small you boot scripts small

00:16:28,170 --> 00:16:33,360
Debian packages for the Linux kernel and

00:16:30,240 --> 00:16:35,490
the u-boot then we used bootstrap to

00:16:33,360 --> 00:16:38,420
make a debt minimal debian environment

00:16:35,490 --> 00:16:41,070
and then we added some tools in as well

00:16:38,420 --> 00:16:42,930
then later on we added in our custom

00:16:41,070 --> 00:16:44,610
packages there's some links at the

00:16:42,930 --> 00:16:46,920
bottom if you want to find out more

00:16:44,610 --> 00:16:50,730
about PDK but we won't be touching much

00:16:46,920 --> 00:16:53,280
on that in this presentation so we

00:16:50,730 --> 00:16:57,440
created a small glue logic driver for

00:16:53,280 --> 00:17:01,200
the kernel just to explain to the system

00:16:57,440 --> 00:17:03,600
the codecs and how they're actually

00:17:01,200 --> 00:17:07,490
wired up into the BeagleBone black how

00:17:03,600 --> 00:17:10,860
the clocks defined that sort of thing

00:17:07,490 --> 00:17:13,050
the I squared C address is that that

00:17:10,860 --> 00:17:14,730
sort of stuff after that it was quite an

00:17:13,050 --> 00:17:16,620
easy job to get the audio in and the

00:17:14,730 --> 00:17:19,320
audio out and we just tested it with a

00:17:16,620 --> 00:17:22,560
standard Jack and ouster tools it just

00:17:19,320 --> 00:17:25,500
seems to work fine but then the problem

00:17:22,560 --> 00:17:27,630
came with the real time performance so

00:17:25,500 --> 00:17:30,420
I'm not sure how many milliseconds it is

00:17:27,630 --> 00:17:33,720
per foot it's about a millisecond for

00:17:30,420 --> 00:17:35,460
every foot or 30 centimeters that you

00:17:33,720 --> 00:17:36,090
are from the thing that you're listening

00:17:35,460 --> 00:17:38,610
to

00:17:36,090 --> 00:17:41,190
so 17 milliseconds of latency is quite

00:17:38,610 --> 00:17:42,000
high and also our CPU usage was quite

00:17:41,190 --> 00:17:43,800
high

00:17:42,000 --> 00:17:45,960
this is basically just taking the input

00:17:43,800 --> 00:17:50,100
and dumping it to the output so there's

00:17:45,960 --> 00:17:53,220
no processing in there at all with the

00:17:50,100 --> 00:17:56,190
preamp tarty we achieve four

00:17:53,220 --> 00:17:58,440
milliseconds latency at 20% CPU usage

00:17:56,190 --> 00:18:01,500
and I think there's even scope for

00:17:58,440 --> 00:18:02,760
reducing that even further I'm quite

00:18:01,500 --> 00:18:04,290
happy with the result and it was

00:18:02,760 --> 00:18:09,000
basically without any patches from us

00:18:04,290 --> 00:18:10,830
just some careful configuration so we

00:18:09,000 --> 00:18:13,770
used the Texas Instruments Linux kernel

00:18:10,830 --> 00:18:17,520
which has already been patched with the

00:18:13,770 --> 00:18:20,330
preempt RT patch set it's also got some

00:18:17,520 --> 00:18:24,600
other patches in there for specific

00:18:20,330 --> 00:18:27,780
parts of the board also it's got the

00:18:24,600 --> 00:18:29,550
serial port driver for the audio built

00:18:27,780 --> 00:18:32,070
in with the latest patches from Texas

00:18:29,550 --> 00:18:34,170
Instruments we found it a lot better

00:18:32,070 --> 00:18:36,240
than the mainline Linux in this case I

00:18:34,170 --> 00:18:41,070
know text interests are working hard

00:18:36,240 --> 00:18:43,020
upstream all of that and you'll find

00:18:41,070 --> 00:18:45,990
that some vendor support is not as good

00:18:43,020 --> 00:18:48,510
as Texas humans or other Western

00:18:45,990 --> 00:18:49,800
manufacturers there's some Chinese

00:18:48,510 --> 00:18:54,000
manufacturers out there that aren't

00:18:49,800 --> 00:18:56,400
quite as helpful and we've also had that

00:18:54,000 --> 00:18:59,130
headache in other projects so we're very

00:18:56,400 --> 00:19:02,400
grateful for the community and Texas

00:18:59,130 --> 00:19:05,070
roots for the help on that so basically

00:19:02,400 --> 00:19:08,580
a real-time kernel or a real-time system

00:19:05,070 --> 00:19:10,800
means that the system has to meet a

00:19:08,580 --> 00:19:12,300
deadline some people obviously confuse

00:19:10,800 --> 00:19:16,350
that with it being fast that's not

00:19:12,300 --> 00:19:18,240
necessarily the case in most real-time

00:19:16,350 --> 00:19:21,840
applications the deadline is like a

00:19:18,240 --> 00:19:24,570
life-or-death situation so you pressing

00:19:21,840 --> 00:19:28,190
the brakes on your car the real-time

00:19:24,570 --> 00:19:31,320
system delays and your car doesn't break

00:19:28,190 --> 00:19:33,960
in our case we don't really matter so

00:19:31,320 --> 00:19:35,520
much about that all we care about is the

00:19:33,960 --> 00:19:39,570
speed of filling the buffers and

00:19:35,520 --> 00:19:42,180
clearing the buffers so it's not that

00:19:39,570 --> 00:19:44,160
bad of a deal is it yeah I mean the

00:19:42,180 --> 00:19:46,410
worst that can happen is you send audio

00:19:44,160 --> 00:19:49,320
to the wrong channel through a channel

00:19:46,410 --> 00:19:51,600
skip and you in a home theater system

00:19:49,320 --> 00:19:53,640
you might blow up a subwoofer or

00:19:51,600 --> 00:19:54,290
something like that but in a hearing aid

00:19:53,640 --> 00:19:57,470
we have

00:19:54,290 --> 00:20:00,050
and countered that problem yet so

00:19:57,470 --> 00:20:02,150
there's a lot of patience required to do

00:20:00,050 --> 00:20:03,770
this a lot of iterations needed I think

00:20:02,150 --> 00:20:06,830
it was a couple of days of my time to

00:20:03,770 --> 00:20:09,440
actually get this all working well but

00:20:06,830 --> 00:20:13,700
now we've done it very happy with the

00:20:09,440 --> 00:20:16,070
performance so we did actually find

00:20:13,700 --> 00:20:18,530
someone a while back that was asking us

00:20:16,070 --> 00:20:20,720
about how to tune a real-time system and

00:20:18,530 --> 00:20:22,850
they thought just because they've got a

00:20:20,720 --> 00:20:24,980
real-time kernel on the system it's

00:20:22,850 --> 00:20:27,130
gonna be much better there's a lot of

00:20:24,980 --> 00:20:34,460
tweaking a lot of things you need to do

00:20:27,130 --> 00:20:36,800
I've explained that on the slides so to

00:20:34,460 --> 00:20:39,080
run through some of those points so yeah

00:20:36,800 --> 00:20:44,060
so the first step obviously is to make

00:20:39,080 --> 00:20:47,090
sure your system is real-time so using

00:20:44,060 --> 00:20:48,290
the cyclic test you can you find out

00:20:47,090 --> 00:20:51,710
whether your system really is real-time

00:20:48,290 --> 00:20:55,460
on up if it's not real-time obviously go

00:20:51,710 --> 00:20:59,300
back to the drawing board and apply the

00:20:55,460 --> 00:21:03,140
patches properly in the file proc

00:20:59,300 --> 00:21:06,080
interrupts there is the IR Q's in there

00:21:03,140 --> 00:21:08,810
you can find the sound card DMA and then

00:21:06,080 --> 00:21:09,800
increase the priority that high but

00:21:08,810 --> 00:21:12,230
that's got to be higher than your

00:21:09,800 --> 00:21:15,070
application so in our case we're using

00:21:12,230 --> 00:21:18,020
Jack audio server and that's got to be

00:21:15,070 --> 00:21:19,400
below the priority of the sound card and

00:21:18,020 --> 00:21:22,970
then after that hopefully it should just

00:21:19,400 --> 00:21:25,130
work make it sound quite easy but we

00:21:22,970 --> 00:21:31,970
spent a lot of time and effort in the

00:21:25,130 --> 00:21:34,640
past to do this seventh we hmm so what

00:21:31,970 --> 00:21:37,190
we done was we created a system based

00:21:34,640 --> 00:21:39,920
off a Debian I customer like that

00:21:37,190 --> 00:21:42,350
because they sort of use Ubuntu and

00:21:39,920 --> 00:21:44,770
Debian in their labs anyway so it was

00:21:42,350 --> 00:21:46,490
just a natural selection choice to use

00:21:44,770 --> 00:21:48,980
Debian and my current distribution

00:21:46,490 --> 00:21:50,810
around it we could have done something

00:21:48,980 --> 00:21:53,180
like y'all so we'll build root but

00:21:50,810 --> 00:21:55,820
really we've got the tools to make

00:21:53,180 --> 00:22:00,470
Debian based images so we thought we'd

00:21:55,820 --> 00:22:04,190
do that normally our systems are built

00:22:00,470 --> 00:22:06,110
up of 99% Debian packages and we've got

00:22:04,190 --> 00:22:06,840
our own custom packages on top like the

00:22:06,110 --> 00:22:10,800
application

00:22:06,840 --> 00:22:15,270
the colonel and you boot things like

00:22:10,800 --> 00:22:18,780
that so basically we just copied one of

00:22:15,270 --> 00:22:20,670
our distros put some scripts on there to

00:22:18,780 --> 00:22:24,270
set the sound card up and settle the

00:22:20,670 --> 00:22:26,100
priorities up installed open MHA the

00:22:24,270 --> 00:22:29,430
package and all the configuration files

00:22:26,100 --> 00:22:30,900
for that and just tweak the system yeah

00:22:29,430 --> 00:22:32,430
I think it's fair to say that for a

00:22:30,900 --> 00:22:34,530
research and development platform the

00:22:32,430 --> 00:22:36,260
requirements of the end-users are quite

00:22:34,530 --> 00:22:40,500
different from a consumer application

00:22:36,260 --> 00:22:43,260
our end-users are sort of researchers

00:22:40,500 --> 00:22:45,630
scientists people who work in labs and

00:22:43,260 --> 00:22:48,780
they want the ability to install

00:22:45,630 --> 00:22:51,240
additional packages on the target system

00:22:48,780 --> 00:22:52,260
and in much the same way that they would

00:22:51,240 --> 00:22:54,510
install them on their development

00:22:52,260 --> 00:22:58,470
workstation and they don't want to have

00:22:54,510 --> 00:23:01,320
to flash the whole system and to you

00:22:58,470 --> 00:23:03,950
know install an extra tool for maybe

00:23:01,320 --> 00:23:07,230
compiling a package or some extra audio

00:23:03,950 --> 00:23:09,720
filters or something like that so they

00:23:07,230 --> 00:23:12,480
appreciated the benefits of running a

00:23:09,720 --> 00:23:13,950
full Debian on this little thing so that

00:23:12,480 --> 00:23:15,870
they could treat it much like that

00:23:13,950 --> 00:23:18,810
workstation or laptop they used to

00:23:15,870 --> 00:23:21,090
working on so that sort of suggested a

00:23:18,810 --> 00:23:24,180
more sort of standard Debian approach

00:23:21,090 --> 00:23:26,060
than a more embedded approach where you

00:23:24,180 --> 00:23:28,170
know you might be delivering a complete

00:23:26,060 --> 00:23:30,300
system image and then just flashing it

00:23:28,170 --> 00:23:33,150
over the top so that's one of the

00:23:30,300 --> 00:23:35,430
reasons for that that design decision so

00:23:33,150 --> 00:23:37,680
in the end that created a system that we

00:23:35,430 --> 00:23:38,820
call mahalia who's named after singer

00:23:37,680 --> 00:23:40,470
wasn't it that's right yeah all our

00:23:38,820 --> 00:23:43,440
projects are named after musicians so

00:23:40,470 --> 00:23:45,630
this named after Mahalia Jackson the

00:23:43,440 --> 00:23:46,650
gospel singer and also because her name

00:23:45,630 --> 00:23:48,960
had mah nà

00:23:46,650 --> 00:23:53,010
in that order so it's a kind of a code

00:23:48,960 --> 00:23:56,070
name but yeah that's that's what that is

00:23:53,010 --> 00:23:58,740
it's basically a distro that's set up to

00:23:56,070 --> 00:24:02,760
run the programs that the researchers

00:23:58,740 --> 00:24:06,480
need sort of straight out of the box so

00:24:02,760 --> 00:24:08,790
the programs that I run as well include

00:24:06,480 --> 00:24:11,250
a Wi-Fi hotspot it's a very simple

00:24:08,790 --> 00:24:12,510
hotspot we've also appended the serial

00:24:11,250 --> 00:24:15,150
number to the end of the hotspot name

00:24:12,510 --> 00:24:16,710
because it can get quite complicated if

00:24:15,150 --> 00:24:19,700
you've got a number of these bores

00:24:16,710 --> 00:24:22,159
running you don't know which ones which

00:24:19,700 --> 00:24:26,090
I also wrote a Bluetooth Low Energy

00:24:22,159 --> 00:24:27,860
peripheral in nodejs using blenny which

00:24:26,090 --> 00:24:29,809
allows you to control the device from

00:24:27,860 --> 00:24:33,230
your phone to set up different filter

00:24:29,809 --> 00:24:35,450
parameters the system can be flashed to

00:24:33,230 --> 00:24:38,210
an SD card just as way that you do any

00:24:35,450 --> 00:24:40,970
other image but it can also be flashed

00:24:38,210 --> 00:24:43,580
to the internal MMC on the device just

00:24:40,970 --> 00:24:45,049
by pressing a button on boot so it's got

00:24:43,580 --> 00:24:49,130
all of that built in so the user can

00:24:45,049 --> 00:24:52,460
just pick it up and go I'm working very

00:24:49,130 --> 00:24:54,080
hard at the moment to renew to release

00:24:52,460 --> 00:24:58,429
the instructions on how to build your

00:24:54,080 --> 00:25:00,260
own system with PDK that's hopefully

00:24:58,429 --> 00:25:02,659
gonna become around at the end of this

00:25:00,260 --> 00:25:04,779
year early next year so look forward to

00:25:02,659 --> 00:25:04,779
that

00:25:05,980 --> 00:25:10,580
so yeah I mean I would say that the one

00:25:08,990 --> 00:25:13,639
of the key things for the lab that uses

00:25:10,580 --> 00:25:16,460
these things as the idea that they can

00:25:13,639 --> 00:25:18,380
save researcher time in doing those

00:25:16,460 --> 00:25:20,450
routine sort of system administration

00:25:18,380 --> 00:25:23,149
tasks quite setting up these devices

00:25:20,450 --> 00:25:25,010
from scratch for example using like a

00:25:23,149 --> 00:25:27,980
stock Debian would take many hours of

00:25:25,010 --> 00:25:30,049
tweaking and fiddling and so for their

00:25:27,980 --> 00:25:31,669
researchers if they can save time in the

00:25:30,049 --> 00:25:34,370
lab that's more time they can spend on

00:25:31,669 --> 00:25:37,100
research but it also means that we can

00:25:34,370 --> 00:25:38,630
send this distro out to the sort of

00:25:37,100 --> 00:25:40,580
general public the interested people

00:25:38,630 --> 00:25:42,230
around the world and we could also get

00:25:40,580 --> 00:25:48,080
up and running to test these things

00:25:42,230 --> 00:25:51,950
independently so the main problem with

00:25:48,080 --> 00:25:53,929
this board is the CPU is quite slow we

00:25:51,950 --> 00:25:55,340
seen a lot of system on chips recently

00:25:53,929 --> 00:25:56,990
coming out of China and the likes that

00:25:55,340 --> 00:26:00,260
are really cheap and they've got a lot

00:25:56,990 --> 00:26:02,419
of processing power in them so hopefully

00:26:00,260 --> 00:26:04,370
we're looking next at using the old

00:26:02,419 --> 00:26:07,120
winner chips I think we're looking at

00:26:04,370 --> 00:26:08,779
the h6 there's got sixteen channels

00:26:07,120 --> 00:26:12,679
hopefully we could start writing a

00:26:08,779 --> 00:26:14,330
driver for the CDM on that and they're

00:26:12,679 --> 00:26:16,159
the same thing on another system yeah

00:26:14,330 --> 00:26:18,860
and there is there is a port of this

00:26:16,159 --> 00:26:20,570
software to the Raspberry Pi and as I

00:26:18,860 --> 00:26:23,510
mentioned it only has two channels of I

00:26:20,570 --> 00:26:25,340
squared s and but you can use that with

00:26:23,510 --> 00:26:28,309
a binaural headphones so these are

00:26:25,340 --> 00:26:32,419
earbud headphones that have a microphone

00:26:28,309 --> 00:26:33,050
in each year for simpler stereo version

00:26:32,419 --> 00:26:34,970
so

00:26:33,050 --> 00:26:36,830
if someone was looking to get into this

00:26:34,970 --> 00:26:38,680
area of research and that's a very

00:26:36,830 --> 00:26:40,910
affordable way to do that and there are

00:26:38,680 --> 00:26:45,320
instructions up on github for the

00:26:40,910 --> 00:26:47,330
raspberry pi version even if if as I

00:26:45,320 --> 00:26:49,520
said it's only two channels but that may

00:26:47,330 --> 00:26:52,610
be enough to get people started in this

00:26:49,520 --> 00:26:55,400
era of research and the University of

00:26:52,610 --> 00:26:58,010
oldenburg is very interested in having

00:26:55,400 --> 00:27:01,130
more people test this stuff contribute

00:26:58,010 --> 00:27:02,660
to it you know and just look at the area

00:27:01,130 --> 00:27:06,050
of hearing aid development in general

00:27:02,660 --> 00:27:08,090
because with an aging demographic in

00:27:06,050 --> 00:27:10,700
many countries it's there it's a really

00:27:08,090 --> 00:27:12,590
big market opportunity for people are

00:27:10,700 --> 00:27:16,880
interested in commercial development but

00:27:12,590 --> 00:27:18,710
it's also a very sort of worthwhile area

00:27:16,880 --> 00:27:19,820
of research force of humanitarian

00:27:18,710 --> 00:27:21,260
development as well

00:27:19,820 --> 00:27:24,020
as we've seen the there are many

00:27:21,260 --> 00:27:30,050
benefits to being able to improve

00:27:24,020 --> 00:27:31,940
people's hearing so yeah we put all the

00:27:30,050 --> 00:27:34,280
trademark disclaimers up there and of

00:27:31,940 --> 00:27:37,400
course you know we didn't make the Linux

00:27:34,280 --> 00:27:39,200
kernel you know we just use it and Jon

00:27:37,400 --> 00:27:41,360
Maddog halt would be very pleased to

00:27:39,200 --> 00:27:44,000
hear that it is a trademark of Luis

00:27:41,360 --> 00:27:45,980
Torvalds so if there any questions

00:27:44,000 --> 00:27:48,950
please do come to the mics there's one

00:27:45,980 --> 00:27:52,220
over there and one over there we've also

00:27:48,950 --> 00:27:53,870
got a demo of the system tonight that's

00:27:52,220 --> 00:27:55,370
true in the technical showcase which is

00:27:53,870 --> 00:27:59,420
happening in the foyer by the

00:27:55,370 --> 00:28:01,280
registration desk this evening so please

00:27:59,420 --> 00:28:02,840
yeah please do come along to that and

00:28:01,280 --> 00:28:04,520
ask us more questions about the

00:28:02,840 --> 00:28:06,050
specifics of this thing if you would

00:28:04,520 --> 00:28:11,090
like bring your own hearing aids hello

00:28:06,050 --> 00:28:13,820
we have a great talk a general question

00:28:11,090 --> 00:28:15,230
the manufacturers that produce the more

00:28:13,820 --> 00:28:17,750
expensive originates with their

00:28:15,230 --> 00:28:20,330
algorithms where people have to go back

00:28:17,750 --> 00:28:23,090
every three months to have it reset have

00:28:20,330 --> 00:28:25,790
taken that acute oh yeah absolutely and

00:28:23,090 --> 00:28:30,800
this the University of oldenburg does

00:28:25,790 --> 00:28:32,510
work with the industry but the R&D that

00:28:30,800 --> 00:28:36,130
they are doing is for the like the next

00:28:32,510 --> 00:28:38,390
generation of hearing aids so there's a

00:28:36,130 --> 00:28:39,770
some spin-off from the University which

00:28:38,390 --> 00:28:42,170
works directly with the commercial

00:28:39,770 --> 00:28:43,460
partners and they're very interested

00:28:42,170 --> 00:28:46,190
obviously in

00:28:43,460 --> 00:28:48,350
making this R&D more accessible and more

00:28:46,190 --> 00:28:51,260
sort of easily tested in the field

00:28:48,350 --> 00:28:53,960
because you know the next brilliant

00:28:51,260 --> 00:28:55,669
algorithm for hearing aid from it could

00:28:53,960 --> 00:28:57,770
have come from potentially anywhere you

00:28:55,669 --> 00:28:59,000
know it could come from somebody who's

00:28:57,770 --> 00:29:01,370
you know not even working in a

00:28:59,000 --> 00:29:03,380
university if they can maybe download

00:29:01,370 --> 00:29:05,169
some of the stuff run out on a Raspberry

00:29:03,380 --> 00:29:08,330
Pi and come up with some sort of genius

00:29:05,169 --> 00:29:09,770
you know sort of innovation that could

00:29:08,330 --> 00:29:11,059
come from anywhere and that's really

00:29:09,770 --> 00:29:13,610
what the whole project is about is

00:29:11,059 --> 00:29:15,890
opening up the access to outside of

00:29:13,610 --> 00:29:19,390
these these sort of small R&D teams

00:29:15,890 --> 00:29:19,390
thank you thank you

00:29:19,419 --> 00:29:23,870
why is a long term availability

00:29:22,159 --> 00:29:26,000
important for you isn't the only

00:29:23,870 --> 00:29:27,890
requirement really that the form factors

00:29:26,000 --> 00:29:31,549
are the thing you can plug the cable

00:29:27,890 --> 00:29:33,559
it's long term available well really we

00:29:31,549 --> 00:29:36,860
want the system to be a available for

00:29:33,559 --> 00:29:38,990
over ten years we want the exact same

00:29:36,860 --> 00:29:42,350
system really to be available for the

00:29:38,990 --> 00:29:44,510
different researchers because their

00:29:42,350 --> 00:29:46,460
research may take a long time to finish

00:29:44,510 --> 00:29:48,860
and you've got to have the hardware

00:29:46,460 --> 00:29:53,210
available over that time for their

00:29:48,860 --> 00:29:55,159
thesis and things to be accepted so why

00:29:53,210 --> 00:29:56,630
does it have to be the same exact same

00:29:55,159 --> 00:30:01,850
hardware why can't it be a newer

00:29:56,630 --> 00:30:04,429
generation of the something that I

00:30:01,850 --> 00:30:07,909
understand it could be yeah and we're

00:30:04,429 --> 00:30:10,100
constantly looking to improve that but

00:30:07,909 --> 00:30:11,659
it's got to be available just in case we

00:30:10,100 --> 00:30:14,899
don't want to go back and try on those

00:30:11,659 --> 00:30:16,309
older boards yeah I mean some of the

00:30:14,899 --> 00:30:19,429
some of the Chinese balls which are

00:30:16,309 --> 00:30:20,779
really high performance they make a

00:30:19,429 --> 00:30:22,250
million of them and then they don't make

00:30:20,779 --> 00:30:25,220
anymore but then you can't get them

00:30:22,250 --> 00:30:27,770
anymore so at least with them open

00:30:25,220 --> 00:30:28,909
hardware it may be an older design but

00:30:27,770 --> 00:30:31,190
you know that design is going to be

00:30:28,909 --> 00:30:33,080
available for you to fab some more if

00:30:31,190 --> 00:30:35,659
you have to in a number of years time

00:30:33,080 --> 00:30:38,390
and also another really pertinent thing

00:30:35,659 --> 00:30:39,860
is the the custom audio hardware so if

00:30:38,390 --> 00:30:41,260
you make this custom audio board and you

00:30:39,860 --> 00:30:43,580
have a design and it works really well

00:30:41,260 --> 00:30:46,220
it interfaces with this BeagleBone black

00:30:43,580 --> 00:30:48,350
it may not work with the next generation

00:30:46,220 --> 00:30:51,590
of whatever other wonder board is out

00:30:48,350 --> 00:30:53,510
there it's really the Cape interface

00:30:51,590 --> 00:30:55,610
that has to be long-term available yeah

00:30:53,510 --> 00:30:56,160
not so much the BeagleBone itself or

00:30:55,610 --> 00:30:57,780
whatever

00:30:56,160 --> 00:31:00,720
yeah a sport you know we love the

00:30:57,780 --> 00:31:02,130
BeagleBone it's great and part of it is

00:31:00,720 --> 00:31:03,900
because of the open hardware and the

00:31:02,130 --> 00:31:06,900
long-term availability I'm sure there

00:31:03,900 --> 00:31:08,670
are other boards that will you know come

00:31:06,900 --> 00:31:10,560
along and as I say at the moment the

00:31:08,670 --> 00:31:13,350
Raspberry Pi is a little bit limited in

00:31:10,560 --> 00:31:15,000
terms of channel count but I'm sure

00:31:13,350 --> 00:31:17,340
there'll be a future device from the

00:31:15,000 --> 00:31:21,390
Raspberry Pi foundation which you know

00:31:17,340 --> 00:31:24,570
addresses those issues we are

00:31:21,390 --> 00:31:26,940
considering D speed options or SPG based

00:31:24,570 --> 00:31:29,070
boards for example there are boards

00:31:26,940 --> 00:31:33,110
around also hundred dollars like big

00:31:29,070 --> 00:31:36,540
ribbon and for example you can use

00:31:33,110 --> 00:31:39,750
either combination of air air m core or

00:31:36,540 --> 00:31:42,810
use just fully like soft processor like

00:31:39,750 --> 00:31:44,250
microplace mhm well the whole point of

00:31:42,810 --> 00:31:47,040
this device is to avoid premature

00:31:44,250 --> 00:31:49,950
optimization so it's all host based

00:31:47,040 --> 00:31:52,290
software processing so as I said before

00:31:49,950 --> 00:31:54,750
if there's a new algorithm and it

00:31:52,290 --> 00:31:56,610
doesn't turn out to be that good then at

00:31:54,750 --> 00:31:59,250
least they've avoided the effort

00:31:56,610 --> 00:32:01,950
involved in sort of making that hardware

00:31:59,250 --> 00:32:04,220
and so there are many many different

00:32:01,950 --> 00:32:06,890
techniques using multiple microphones

00:32:04,220 --> 00:32:09,030
different kinds of dynamic compression

00:32:06,890 --> 00:32:11,070
filtering all this kind of thing and the

00:32:09,030 --> 00:32:12,210
idea is to give that that same host

00:32:11,070 --> 00:32:13,650
based environment that you would have

00:32:12,210 --> 00:32:17,280
when you are working on the workstation

00:32:13,650 --> 00:32:20,010
but in a portable device so yeah I mean

00:32:17,280 --> 00:32:22,350
for sure the manufacturers will be doing

00:32:20,010 --> 00:32:23,760
all that DSP work when it comes to the

00:32:22,350 --> 00:32:27,180
actual thing that you will put in your

00:32:23,760 --> 00:32:32,820
ear as a retail product but for research

00:32:27,180 --> 00:32:34,410
it's all about the software thank you so

00:32:32,820 --> 00:32:40,680
there any other questions just one over

00:32:34,410 --> 00:32:42,540
here oh yeah um see using the BeagleBone

00:32:40,680 --> 00:32:45,840
black it's well known for having their

00:32:42,540 --> 00:32:47,220
PR UK processors and that's one if

00:32:45,840 --> 00:32:50,670
there's any reason you didn't just use

00:32:47,220 --> 00:32:53,400
normal NX plus some real time processes

00:32:50,670 --> 00:32:54,990
on the coprocessors the P I use well I

00:32:53,400 --> 00:32:56,670
think the coprocessor is actually very

00:32:54,990 --> 00:32:58,890
small and you couldn't run these filters

00:32:56,670 --> 00:33:00,600
on there I'm not sure exactly whether

00:32:58,890 --> 00:33:02,850
the I squared s peripheral was available

00:33:00,600 --> 00:33:04,770
on there I'll have to check that out and

00:33:02,850 --> 00:33:07,020
it doesn't have voice squared s but yeah

00:33:04,770 --> 00:33:09,940
it's just a yeah yeah I think that's

00:33:07,020 --> 00:33:12,010
mainly for a lot lower level

00:33:09,940 --> 00:33:15,460
like few hundred lines of C code rather

00:33:12,010 --> 00:33:17,440
than yeah all filters and things some of

00:33:15,460 --> 00:33:19,360
the audio filters that run basically use

00:33:17,440 --> 00:33:21,190
every drop of CPU that's available like

00:33:19,360 --> 00:33:23,200
white intense and because I said they're

00:33:21,190 --> 00:33:25,990
not they're not optimized particularly

00:33:23,200 --> 00:33:28,720
it's more like early stages research so

00:33:25,990 --> 00:33:30,370
it's more like they went for the the

00:33:28,720 --> 00:33:32,590
sort of the full power option rather

00:33:30,370 --> 00:33:35,020
than the efficient option yes you've got

00:33:32,590 --> 00:33:36,520
a software and version of something

00:33:35,020 --> 00:33:39,340
would be running optimized from a DSP

00:33:36,520 --> 00:33:42,070
yeah knows ways yeah very high power and

00:33:39,340 --> 00:33:43,540
as I mentioned the idea is to translate

00:33:42,070 --> 00:33:44,980
what these people have been doing on

00:33:43,540 --> 00:33:46,780
their workstations and their laptops

00:33:44,980 --> 00:33:49,990
directly onto the Beagle bone without

00:33:46,780 --> 00:33:52,830
having anything that's too specific to

00:33:49,990 --> 00:33:55,630
the device itself so for example the

00:33:52,830 --> 00:33:58,480
audio interface is standard hauser

00:33:55,630 --> 00:34:00,580
interface and it appears to the jack

00:33:58,480 --> 00:34:02,740
server i like just a regular sound card

00:34:00,580 --> 00:34:04,870
in a PC so there's no sort of special

00:34:02,740 --> 00:34:07,150
trickery around the sort of embedded

00:34:04,870 --> 00:34:08,890
hardware and so it's all keeping a very

00:34:07,150 --> 00:34:13,120
very standard of very translatable

00:34:08,890 --> 00:34:14,230
across different work that's and you

00:34:13,120 --> 00:34:17,050
know different machines that people

00:34:14,230 --> 00:34:20,770
might be using for this work thank you

00:34:17,050 --> 00:34:22,210
so yeah thank you okay FM if that's all

00:34:20,770 --> 00:34:23,860
the questions I'll say thank you very

00:34:22,210 --> 00:34:25,750
much for coming and please do come and

00:34:23,860 --> 00:34:27,900
see us at the technical showcase thank

00:34:25,750 --> 00:34:27,900

YouTube URL: https://www.youtube.com/watch?v=vRpMAbILSEc


