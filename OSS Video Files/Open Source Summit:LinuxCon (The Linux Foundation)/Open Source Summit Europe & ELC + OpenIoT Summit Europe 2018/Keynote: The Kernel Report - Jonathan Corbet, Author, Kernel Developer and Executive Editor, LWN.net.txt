Title: Keynote: The Kernel Report - Jonathan Corbet, Author, Kernel Developer and Executive Editor, LWN.net
Publication date: 2018-10-22
Playlist: Open Source Summit Europe & ELC + OpenIoT Summit Europe 2018
Description: 
	Keynote: The Kernel Report - Jonathan Corbet, Author, Kernel Developer and Executive Editor, LWN.netÂ 

About avatar for Jonathan Corbet
Executive Editor, LWN.net
Captions: 
	00:00:00,000 --> 00:00:02,909
all right good morning thanks a lot it's

00:00:01,469 --> 00:00:04,080
great to be back here at Nevin burrow

00:00:02,909 --> 00:00:06,210
thanks Jim that was a very nice

00:00:04,080 --> 00:00:08,460
introduction perhaps a little too nice

00:00:06,210 --> 00:00:09,960
um but so be it anyway I got a lot to

00:00:08,460 --> 00:00:11,849
talk about so let's get right into it

00:00:09,960 --> 00:00:13,530
here is what the kernel community has

00:00:11,849 --> 00:00:16,139
done over the last year or so we've done

00:00:13,530 --> 00:00:17,730
seven major releases over the course of

00:00:16,139 --> 00:00:21,090
just over a year since September of last

00:00:17,730 --> 00:00:22,859
year with 4.19 actually appearing not on

00:00:21,090 --> 00:00:25,019
the 21st but this morning so I was off

00:00:22,859 --> 00:00:26,220
by one just another off by one error

00:00:25,019 --> 00:00:28,920
anyway

00:00:26,220 --> 00:00:31,590
if you look every one of these releases

00:00:28,920 --> 00:00:34,710
has to work of about 1,700 developers

00:00:31,590 --> 00:00:36,980
contains over 13,000 changes you know

00:00:34,710 --> 00:00:39,899
comes out and we're about 9 to 10 weeks

00:00:36,980 --> 00:00:42,120
it's an impressive rate of change and an

00:00:39,899 --> 00:00:43,379
impressive rate of work but this is

00:00:42,120 --> 00:00:44,670
really the same chart I've been putting

00:00:43,379 --> 00:00:46,140
up for quite a while it's pretty boring

00:00:44,670 --> 00:00:48,629
at this point this is just what we do

00:00:46,140 --> 00:00:51,660
it's kind of like putting up a chart of

00:00:48,629 --> 00:00:54,210
sunrise times or something at this point

00:00:51,660 --> 00:00:56,100
so I'm not going to dwell on that but

00:00:54,210 --> 00:00:57,300
there is one little thing in this chart

00:00:56,100 --> 00:01:00,420
that's a little bit different that I

00:00:57,300 --> 00:01:02,730
want to point out which is 4.15 took not

00:01:00,420 --> 00:01:04,650
10 weeks but 11 weeks to come out this

00:01:02,730 --> 00:01:06,090
is the first time we spent more than 10

00:01:04,650 --> 00:01:08,610
weeks to produce a kernel

00:01:06,090 --> 00:01:12,390
since 3.1 came out almost exactly 7

00:01:08,610 --> 00:01:14,189
years ago 3.1 was delayed because of the

00:01:12,390 --> 00:01:16,920
compromise' kernel.org and all the

00:01:14,189 --> 00:01:18,960
cleanup that was required as a result of

00:01:16,920 --> 00:01:21,090
that so one might think that something

00:01:18,960 --> 00:01:25,380
similar would have happened for 4.15 and

00:01:21,090 --> 00:01:28,080
of course the answer to that is our good

00:01:25,380 --> 00:01:29,610
friends meltdown inspector now I'm not

00:01:28,080 --> 00:01:31,409
going to get into the technical details

00:01:29,610 --> 00:01:33,270
of all this if you're interested in that

00:01:31,409 --> 00:01:35,460
Brad Crowe Hartmann is doing a talk I

00:01:33,270 --> 00:01:37,860
believe on Wednesday where he will get

00:01:35,460 --> 00:01:40,320
into it in much more detail but I want

00:01:37,860 --> 00:01:44,040
to talk a little bit about how this

00:01:40,320 --> 00:01:45,329
whole thing affected our our our

00:01:44,040 --> 00:01:49,020
community and how we dealt with it

00:01:45,329 --> 00:01:50,909
because from the point of view of the

00:01:49,020 --> 00:01:52,799
kernel community a hardware

00:01:50,909 --> 00:01:54,810
vulnerability like meltdown or spectrum

00:01:52,799 --> 00:01:56,369
looks an awful lot like a software

00:01:54,810 --> 00:01:58,320
vulnerability we have to deal with it

00:01:56,369 --> 00:02:00,030
the same way we gathered together the

00:01:58,320 --> 00:02:01,770
people who understand the problem domain

00:02:00,030 --> 00:02:04,020
give them the information they need and

00:02:01,770 --> 00:02:05,670
let them fix the problem we have a nice

00:02:04,020 --> 00:02:07,680
process for this that goes through and

00:02:05,670 --> 00:02:09,379
fix this on the order I've been told of

00:02:07,680 --> 00:02:12,060
about one security vulnerability a week

00:02:09,379 --> 00:02:12,930
it handles it very well it works very

00:02:12,060 --> 00:02:14,909
well

00:02:12,930 --> 00:02:16,709
but this process was not followed with

00:02:14,909 --> 00:02:19,140
meltdown inspector with some results

00:02:16,709 --> 00:02:20,819
that we saw quite clearly and with some

00:02:19,140 --> 00:02:23,700
lessons I think that we all can learn

00:02:20,819 --> 00:02:25,290
going forward from here rather than

00:02:23,700 --> 00:02:27,480
following this process what we got was a

00:02:25,290 --> 00:02:29,579
whole lot of secrecy these these

00:02:27,480 --> 00:02:31,500
vulnerabilities were found in the early

00:02:29,579 --> 00:02:33,719
summer of last year the kernel community

00:02:31,500 --> 00:02:34,409
was not informed until the end of

00:02:33,719 --> 00:02:36,900
October

00:02:34,409 --> 00:02:38,219
quite a bit later than that only a

00:02:36,900 --> 00:02:41,129
couple of months before the disclosure

00:02:38,219 --> 00:02:42,540
really and when we were informed there

00:02:41,129 --> 00:02:43,889
was a whole lot of siloing that went on

00:02:42,540 --> 00:02:45,359
the people who were told about it were

00:02:43,889 --> 00:02:46,950
not allowed to talk to each other they

00:02:45,359 --> 00:02:48,450
were not allowed to work together to

00:02:46,950 --> 00:02:50,250
solve the problem in the way that we

00:02:48,450 --> 00:02:52,439
normally work together in the kernel

00:02:50,250 --> 00:02:54,810
community as as a single engineering

00:02:52,439 --> 00:02:57,180
organization so there are consequences

00:02:54,810 --> 00:02:59,819
from this including enough a lot of

00:02:57,180 --> 00:03:02,310
fragmentation out there every

00:02:59,819 --> 00:03:03,599
distributor ships something different

00:03:02,310 --> 00:03:06,030
when this when these vulnerabilities

00:03:03,599 --> 00:03:08,159
were disclosed and some of the things

00:03:06,030 --> 00:03:10,079
they shipped were rather different or

00:03:08,159 --> 00:03:12,180
rather better than some of the others

00:03:10,079 --> 00:03:14,760
and I want to get into a little bit more

00:03:12,180 --> 00:03:16,139
detail because there's it shows a little

00:03:14,760 --> 00:03:18,650
bit about how our community works here

00:03:16,139 --> 00:03:23,459
if you look at how the meltdown

00:03:18,650 --> 00:03:25,319
vulnerability was handled meltdown the

00:03:23,459 --> 00:03:27,239
fixes for meltdown kernel page table

00:03:25,319 --> 00:03:29,819
isolation were actually developed in

00:03:27,239 --> 00:03:32,220
public the patches were put out there at

00:03:29,819 --> 00:03:33,870
the beginning of November with a kind of

00:03:32,220 --> 00:03:37,409
unconvincing cover story about why they

00:03:33,870 --> 00:03:38,879
were there and and people were able to

00:03:37,409 --> 00:03:40,799
look at them and a whole lot of

00:03:38,879 --> 00:03:42,720
developers came in who were not actually

00:03:40,799 --> 00:03:44,009
privy to the full disclosure but could

00:03:42,720 --> 00:03:45,959
see the patch doesn't help to improve

00:03:44,009 --> 00:03:47,579
them these patches improved a whole lot

00:03:45,959 --> 00:03:49,620
and by the time that meltdown was

00:03:47,579 --> 00:03:51,000
disclosed these patches were in good

00:03:49,620 --> 00:03:53,579
shape they're in the main line they were

00:03:51,000 --> 00:03:55,079
more or less ready to go of modulo a bug

00:03:53,579 --> 00:03:58,169
here or there but that's the normal way

00:03:55,079 --> 00:03:59,669
and as part of the result of that the

00:03:58,169 --> 00:04:02,599
distributors all shipped more or less

00:03:59,669 --> 00:04:06,139
the same thing in response to meltdown

00:04:02,599 --> 00:04:08,970
this fixes for Spectre instead were

00:04:06,139 --> 00:04:10,680
developed very much in private by people

00:04:08,970 --> 00:04:13,139
who were not necessarily able to talk to

00:04:10,680 --> 00:04:16,289
each other about about what they were

00:04:13,139 --> 00:04:18,120
doing and so the result of that was that

00:04:16,289 --> 00:04:19,620
those those fixers were not in very good

00:04:18,120 --> 00:04:21,690
shape at the time the problem was

00:04:19,620 --> 00:04:23,760
disclosed distributors shipped very

00:04:21,690 --> 00:04:25,490
different things and none of them none

00:04:23,760 --> 00:04:26,870
of them shipped anything that was in

00:04:25,490 --> 00:04:28,729
would actually got into the mainline

00:04:26,870 --> 00:04:31,280
kernel at the end things had to change

00:04:28,729 --> 00:04:34,729
quite a bit once people's eyes were on

00:04:31,280 --> 00:04:36,729
it and we were able to apply our normal

00:04:34,729 --> 00:04:38,930
sorts of development processes to it

00:04:36,729 --> 00:04:41,300
so there's a real difference there about

00:04:38,930 --> 00:04:43,160
how they were handled and really shows

00:04:41,300 --> 00:04:44,720
in my mind that what happens when you

00:04:43,160 --> 00:04:46,580
get the community focusing on a problem

00:04:44,720 --> 00:04:51,530
and there are ways of focusing on

00:04:46,580 --> 00:04:54,199
problems like this that do not require

00:04:51,530 --> 00:04:57,380
broad disclosure you can do things still

00:04:54,199 --> 00:04:58,580
under under an embargo sort of situation

00:04:57,380 --> 00:05:02,090
but it can be done better than it was

00:04:58,580 --> 00:05:04,220
done here so we got had many results

00:05:02,090 --> 00:05:05,720
beyond fragmentation quite a bit of

00:05:04,220 --> 00:05:07,970
developer burnout and frustration I

00:05:05,720 --> 00:05:10,970
think that people don't understand still

00:05:07,970 --> 00:05:12,889
just how hard a small group of people

00:05:10,970 --> 00:05:15,259
worked to make sure that we were ready

00:05:12,889 --> 00:05:16,880
for these these vulnerabilities once

00:05:15,259 --> 00:05:18,770
they were disclosed this include by the

00:05:16,880 --> 00:05:20,120
way our previous speaker who put a lot

00:05:18,770 --> 00:05:21,470
of effort into it quite a few others I

00:05:20,120 --> 00:05:25,000
think we owe them all a big round of

00:05:21,470 --> 00:05:25,000
applause for what they did

00:05:27,729 --> 00:05:31,490
those people had our back it was a good

00:05:29,990 --> 00:05:36,620
thing but every now and then it kind of

00:05:31,490 --> 00:05:38,090
showed as as they got frustrated with

00:05:36,620 --> 00:05:39,919
with the bounds that were put on them

00:05:38,090 --> 00:05:42,349
and simply tired from all the work and

00:05:39,919 --> 00:05:44,389
they all took some rather long vacations

00:05:42,349 --> 00:05:46,430
in January once this was held out and

00:05:44,389 --> 00:05:48,259
the final aspect of this I think really

00:05:46,430 --> 00:05:49,610
needs to be mentioned there's a lot of

00:05:48,259 --> 00:05:51,919
people were left out in the cold because

00:05:49,610 --> 00:05:53,810
of the way this worked some distributors

00:05:51,919 --> 00:05:56,090
knew about these vulnerabilities others

00:05:53,810 --> 00:05:57,440
like Debian for example we're only

00:05:56,090 --> 00:05:59,240
informed a little bit before the

00:05:57,440 --> 00:06:00,979
disclosure and other distributors were

00:05:59,240 --> 00:06:03,070
not informed at all and had no story for

00:06:00,979 --> 00:06:05,750
their users when the disclosure happened

00:06:03,070 --> 00:06:08,090
this also happened in commercial world

00:06:05,750 --> 00:06:09,860
there are some big cloud providers they

00:06:08,090 --> 00:06:12,289
had very nice reassuring press releases

00:06:09,860 --> 00:06:15,320
about how all of their customers were

00:06:12,289 --> 00:06:18,440
already protected but other providers

00:06:15,320 --> 00:06:20,330
such as the one that hosts my sites were

00:06:18,440 --> 00:06:22,580
not brought into this and had no story

00:06:20,330 --> 00:06:23,630
for their customers and this is not a

00:06:22,580 --> 00:06:26,180
good thing right

00:06:23,630 --> 00:06:28,340
the free software world offers many

00:06:26,180 --> 00:06:31,130
things one of which is equal access to

00:06:28,340 --> 00:06:32,870
the code everybody can work on it on the

00:06:31,130 --> 00:06:35,240
same basis and build something from it

00:06:32,870 --> 00:06:37,250
on the same basis if we now create a

00:06:35,240 --> 00:06:38,070
world where only the biggest players

00:06:37,250 --> 00:06:39,870
have act

00:06:38,070 --> 00:06:42,090
information like this this kind of

00:06:39,870 --> 00:06:43,320
crucial information then what we're

00:06:42,090 --> 00:06:45,260
going to end up with is further

00:06:43,320 --> 00:06:47,640
consolidation than what we see now and

00:06:45,260 --> 00:06:49,320
in a much tighter commercial world I

00:06:47,640 --> 00:06:51,150
don't think that's really what we want

00:06:49,320 --> 00:06:52,890
to work for in the free software

00:06:51,150 --> 00:06:54,780
community so I hope that we're not going

00:06:52,890 --> 00:06:57,360
to see more of that in the future the

00:06:54,780 --> 00:06:59,220
good news is that a lot of these lessons

00:06:57,360 --> 00:07:01,200
appear to have been learned everything

00:06:59,220 --> 00:07:02,790
I've been told says that the the Oman

00:07:01,200 --> 00:07:05,490
terminal Fault vulnerabilities which

00:07:02,790 --> 00:07:07,650
were disclosed in September were handled

00:07:05,490 --> 00:07:08,940
much better and the developers were much

00:07:07,650 --> 00:07:10,950
happier with it and things went much

00:07:08,940 --> 00:07:12,060
more smoothly so with any luck at all we

00:07:10,950 --> 00:07:13,980
will not go through that again

00:07:12,060 --> 00:07:17,850
that our community processes will be

00:07:13,980 --> 00:07:19,200
allowed to proceed but there's some bad

00:07:17,850 --> 00:07:21,450
news that's associated with us that

00:07:19,200 --> 00:07:23,370
we've learned we like to think of

00:07:21,450 --> 00:07:25,680
ourselves in the free software community

00:07:23,370 --> 00:07:27,390
as being in total control of our systems

00:07:25,680 --> 00:07:29,850
we have all the code we can look at it

00:07:27,390 --> 00:07:32,090
we run exactly what we want to run but

00:07:29,850 --> 00:07:34,860
that code has to run on hardware and

00:07:32,090 --> 00:07:38,220
that hardware as it turns out is kind of

00:07:34,860 --> 00:07:40,050
a black box and we don't really know

00:07:38,220 --> 00:07:41,700
what's inside it now if you've ever read

00:07:40,050 --> 00:07:43,200
the works of Herbert Simon one of the

00:07:41,700 --> 00:07:44,430
things he pointed out is the way that

00:07:43,200 --> 00:07:46,980
you learn about what's inside of black

00:07:44,430 --> 00:07:48,750
box is to make it fail that will teach

00:07:46,980 --> 00:07:51,000
you what's inside it and so we've made

00:07:48,750 --> 00:07:54,060
it fail and what we found the side is

00:07:51,000 --> 00:07:55,800
not necessarily what we might have

00:07:54,060 --> 00:07:57,900
wanted to find it what's inside that

00:07:55,800 --> 00:07:59,700
black box is among other things some

00:07:57,900 --> 00:08:01,800
proprietary software that suffers from a

00:07:59,700 --> 00:08:04,740
lot of the the problems of proprietary

00:08:01,800 --> 00:08:07,080
software and we we find ourselves in the

00:08:04,740 --> 00:08:09,180
world where the hardware is that quite

00:08:07,080 --> 00:08:11,700
the solid foundation that we thought it

00:08:09,180 --> 00:08:14,730
was going to be and we haven't fully

00:08:11,700 --> 00:08:15,930
come to terms with that and what I

00:08:14,730 --> 00:08:18,030
believe is going to be the ongoing

00:08:15,930 --> 00:08:20,460
series of vulnerabilities that will come

00:08:18,030 --> 00:08:22,110
from simply the nature of hardware as a

00:08:20,460 --> 00:08:23,400
whole and this is going to be a hard one

00:08:22,110 --> 00:08:28,560
to fix we're going to be working on this

00:08:23,400 --> 00:08:30,660
for a long time so moving on stable

00:08:28,560 --> 00:08:32,280
kernels I put up that chart of mainline

00:08:30,660 --> 00:08:34,260
kernel releases at the beginning but

00:08:32,280 --> 00:08:36,120
very few of us actually run those we

00:08:34,260 --> 00:08:37,680
mostly run something that's been

00:08:36,120 --> 00:08:39,450
produced by the stable kernel process

00:08:37,680 --> 00:08:41,400
which includes a lot of fixes and so on

00:08:39,450 --> 00:08:43,680
these are the currently maintain stable

00:08:41,400 --> 00:08:45,480
kernels out there plus there are some

00:08:43,680 --> 00:08:46,890
others maintained in particular by

00:08:45,480 --> 00:08:49,050
people in the Debian project to go

00:08:46,890 --> 00:08:50,850
vacuum and older but in the in the

00:08:49,050 --> 00:08:52,709
mainstream stable kernels we

00:08:50,850 --> 00:08:55,139
support for Colonels going back about

00:08:52,709 --> 00:08:56,550
four years an awful lot of stuff goes in

00:08:55,139 --> 00:08:58,980
there some of these Colonels have

00:08:56,550 --> 00:09:00,779
released received about 10,000 fixes

00:08:58,980 --> 00:09:02,310
since the actual mainline kernel

00:09:00,779 --> 00:09:04,079
released that's an awful lot of fixes

00:09:02,310 --> 00:09:06,269
that's something that you want to have

00:09:04,079 --> 00:09:08,370
if you're running these kernels this

00:09:06,269 --> 00:09:10,110
process works pretty well and it's

00:09:08,370 --> 00:09:12,389
getting better but we're working on

00:09:10,110 --> 00:09:15,060
course making things work better one of

00:09:12,389 --> 00:09:17,940
the areas of effort here is in longer

00:09:15,060 --> 00:09:20,699
term support because the two years that

00:09:17,940 --> 00:09:23,279
we originally set aside for long term

00:09:20,699 --> 00:09:25,470
stable kernel support really proves not

00:09:23,279 --> 00:09:27,990
to be enough for a lot of users so we

00:09:25,470 --> 00:09:31,170
now have Gregg promising to support 4.4

00:09:27,990 --> 00:09:32,910
through 2022 in 4.9 through 2023 which

00:09:31,170 --> 00:09:35,579
is quite an extension of that support

00:09:32,910 --> 00:09:37,079
that's and that's an awful nice support

00:09:35,579 --> 00:09:38,519
for the community and then there are

00:09:37,079 --> 00:09:40,380
really crazy people like the civil

00:09:38,519 --> 00:09:43,649
infrastructure initiative looking to

00:09:40,380 --> 00:09:45,660
support kernels for for ten years or

00:09:43,649 --> 00:09:47,730
longer they're looking at deployments

00:09:45,660 --> 00:09:49,620
like in buildings or in cars or in

00:09:47,730 --> 00:09:51,810
places where the system has to run for a

00:09:49,620 --> 00:09:53,160
very long time and you want it supported

00:09:51,810 --> 00:09:55,439
for all that time and you have to figure

00:09:53,160 --> 00:09:57,300
out a way to actually keep things

00:09:55,439 --> 00:10:00,480
running for that long not an easy task

00:09:57,300 --> 00:10:02,069
to do that the other thing of course is

00:10:00,480 --> 00:10:07,500
we always want to get more fixes because

00:10:02,069 --> 00:10:09,540
fixes are good yes 4.9 the 419 stable

00:10:07,500 --> 00:10:12,449
series services received almost 10,000

00:10:09,540 --> 00:10:15,360
fixes but the main line since 4.9 has to

00:10:12,449 --> 00:10:18,089
head over 136,000 changes merged into it

00:10:15,360 --> 00:10:21,209
it's pretty likely that some of the

00:10:18,089 --> 00:10:23,370
other 126,000 changes were fixes that we

00:10:21,209 --> 00:10:25,920
wanted to have to in the stable kernels

00:10:23,370 --> 00:10:27,540
so identifying all those as hard we're

00:10:25,920 --> 00:10:28,980
working on discipline to improve that

00:10:27,540 --> 00:10:31,019
and have improved it quite a bit

00:10:28,980 --> 00:10:33,750
there are even people like Sasha Levin

00:10:31,019 --> 00:10:35,459
working on on a neural network a machine

00:10:33,750 --> 00:10:38,130
learning system to automatically

00:10:35,459 --> 00:10:40,230
identify patches that look like fixes

00:10:38,130 --> 00:10:42,060
and to kick them out for review to bring

00:10:40,230 --> 00:10:43,829
them into the stable kernels so we'll

00:10:42,060 --> 00:10:45,839
see more and more fixes going into the

00:10:43,829 --> 00:10:48,000
stable kernels over time it doesn't mean

00:10:45,839 --> 00:10:49,380
that we're releasing buggier kernels it

00:10:48,000 --> 00:10:51,779
means we're getting better at finding

00:10:49,380 --> 00:10:53,279
the fixes and this zone is good but

00:10:51,779 --> 00:10:54,259
there are some challenges in the stable

00:10:53,279 --> 00:10:56,730
world as well

00:10:54,259 --> 00:10:58,170
one of which we'll be talking about in

00:10:56,730 --> 00:11:00,209
the maintainer summit this afternoon is

00:10:58,170 --> 00:11:01,680
regressions if you have something that's

00:11:00,209 --> 00:11:03,880
supposed to be a stable kernel the last

00:11:01,680 --> 00:11:07,269
thing you want to do is to break it with

00:11:03,880 --> 00:11:09,850
with a bad fix but that does happen on

00:11:07,269 --> 00:11:12,040
occasion and a couple of times has been

00:11:09,850 --> 00:11:13,990
fairly serious this has gotten to a

00:11:12,040 --> 00:11:15,459
point where some of the distributors are

00:11:13,990 --> 00:11:17,620
getting a little leery about using this

00:11:15,459 --> 00:11:19,180
stable kernels as a result of that and

00:11:17,620 --> 00:11:23,410
this is not good this is not something

00:11:19,180 --> 00:11:25,000
that we want so you know there's a lot

00:11:23,410 --> 00:11:26,350
of effort going and testing and so on

00:11:25,000 --> 00:11:27,970
but this is a challenge that we're gonna

00:11:26,350 --> 00:11:29,980
have to face we've been talking about it

00:11:27,970 --> 00:11:31,110
for years I think we will continue to

00:11:29,980 --> 00:11:33,959
have to talk about it for a while

00:11:31,110 --> 00:11:36,910
another problem for stable kernels to

00:11:33,959 --> 00:11:38,800
get back to a previous subject is is

00:11:36,910 --> 00:11:42,040
huge invasive fixes like meltdown

00:11:38,800 --> 00:11:43,930
inspector it was quite a challenge to

00:11:42,040 --> 00:11:48,130
get those fixes into the mainline kernel

00:11:43,930 --> 00:11:49,690
to back port them to say 4.14 was more

00:11:48,130 --> 00:11:50,920
work because you had to taking the count

00:11:49,690 --> 00:11:53,230
all those changes they happen in the

00:11:50,920 --> 00:11:56,139
meantime by the time you get back to 4.9

00:11:53,230 --> 00:11:57,819
or 4.4 it's a huge job and a very

00:11:56,139 --> 00:12:00,310
invasive change to those kernels that

00:11:57,819 --> 00:12:01,630
really kind of pushes the boundary of

00:12:00,310 --> 00:12:03,519
what you might consider to be a stable

00:12:01,630 --> 00:12:05,470
kernel at that point and it gets the

00:12:03,519 --> 00:12:06,970
point where the older kernels were not

00:12:05,470 --> 00:12:09,040
all those fixes haven't fully back

00:12:06,970 --> 00:12:13,029
ported because it is simply too hard to

00:12:09,040 --> 00:12:15,040
do so fixes like this in which there

00:12:13,029 --> 00:12:16,930
will be more have caused people to start

00:12:15,040 --> 00:12:19,630
to question this this long-term stable

00:12:16,930 --> 00:12:22,360
model entirely and ask whether this

00:12:19,630 --> 00:12:24,310
model is broken whether the idea that we

00:12:22,360 --> 00:12:27,970
can support a kernel for for many many

00:12:24,310 --> 00:12:29,649
years and put all those changes in there

00:12:27,970 --> 00:12:31,600
and keep nothing constant really except

00:12:29,649 --> 00:12:33,819
the version number is really something

00:12:31,600 --> 00:12:35,279
that that we can support in fact some

00:12:33,819 --> 00:12:40,290
developers have been quite clear that

00:12:35,279 --> 00:12:43,420
they believe otherwise on this score so

00:12:40,290 --> 00:12:45,459
we cast around four other models what we

00:12:43,420 --> 00:12:47,170
usually hear suggested when people

00:12:45,459 --> 00:12:49,000
developers am is just suggesting for

00:12:47,170 --> 00:12:52,689
quite a while is to stick with the

00:12:49,000 --> 00:12:54,040
latest long-term stable kernel right if

00:12:52,689 --> 00:12:56,259
you've got an older system bring it

00:12:54,040 --> 00:12:58,540
forward to this newer kernel even if you

00:12:56,259 --> 00:13:00,550
don't want to rev the version number do

00:12:58,540 --> 00:13:02,649
that because this is the kernel that has

00:13:00,550 --> 00:13:04,209
all the fixes and perhaps some useful

00:13:02,649 --> 00:13:05,740
features some security hardening on the

00:13:04,209 --> 00:13:07,899
stuff that you would like to have it's

00:13:05,740 --> 00:13:09,759
the best kernel that we in the community

00:13:07,899 --> 00:13:11,949
know how to make at this given time and

00:13:09,759 --> 00:13:13,870
it is the kernel that we tell people

00:13:11,949 --> 00:13:16,240
they should be running this is this is a

00:13:13,870 --> 00:13:18,399
hard pill to swallow in a lot of places

00:13:16,240 --> 00:13:20,200
people averse to risk and they're afraid

00:13:18,399 --> 00:13:22,510
of regressions and I and we all

00:13:20,200 --> 00:13:24,880
understand that but this I think is the

00:13:22,510 --> 00:13:26,980
way we're gonna end up eventually is

00:13:24,880 --> 00:13:30,070
doing this rather than trying to support

00:13:26,980 --> 00:13:31,570
ancient kernels for a long long time but

00:13:30,070 --> 00:13:34,270
even if we get there that leaves behind

00:13:31,570 --> 00:13:36,010
one little problem what do you do if

00:13:34,270 --> 00:13:38,320
you're going to take some really old

00:13:36,010 --> 00:13:41,080
hardware and put a modern kernel on it

00:13:38,320 --> 00:13:43,060
and make sure that all of the hardware

00:13:41,080 --> 00:13:44,830
associated with that system still works

00:13:43,060 --> 00:13:46,450
even though the developer is working on

00:13:44,830 --> 00:13:49,930
the modern kernel haven't had that

00:13:46,450 --> 00:13:51,550
hardware in hand for a decade it's it's

00:13:49,930 --> 00:13:52,630
hard not to break things in that setting

00:13:51,550 --> 00:13:54,010
and we haven't really solved that

00:13:52,630 --> 00:13:55,450
problem yet that's that's something that

00:13:54,010 --> 00:13:59,130
we're gonna have to work on for a while

00:13:55,450 --> 00:14:01,120
yet so some challenges in that area I

00:13:59,130 --> 00:14:03,220
want to talk about one technical

00:14:01,120 --> 00:14:04,870
software thing because I think this is

00:14:03,220 --> 00:14:07,120
an area that people don't quite realize

00:14:04,870 --> 00:14:09,970
how fundamental the changes are that are

00:14:07,120 --> 00:14:14,110
going on and that of course is BPF BPF

00:14:09,970 --> 00:14:15,670
is an internal virtual machine it's one

00:14:14,110 --> 00:14:19,000
of many we have in the kernel but this

00:14:15,670 --> 00:14:21,550
one is different it allows a user space

00:14:19,000 --> 00:14:23,920
process to load a blob of code into the

00:14:21,550 --> 00:14:26,110
kernel and to run that code in kernel

00:14:23,920 --> 00:14:28,329
space okay this sounds like kind of a

00:14:26,110 --> 00:14:29,709
dangerous thing to do so to address some

00:14:28,329 --> 00:14:31,990
of that there are things like a built-in

00:14:29,709 --> 00:14:33,880
verifier that actually performs a static

00:14:31,990 --> 00:14:35,620
analysis of this blob of code once you

00:14:33,880 --> 00:14:37,870
load it into the kernel and tries to

00:14:35,620 --> 00:14:41,230
ensure that that code is safe to run in

00:14:37,870 --> 00:14:44,140
in their kernels context there is also a

00:14:41,230 --> 00:14:45,880
an internal just-in-time compiler to

00:14:44,140 --> 00:14:46,959
convert this code into native code so

00:14:45,880 --> 00:14:49,149
even though it's code written for a

00:14:46,959 --> 00:14:50,800
virtual machine it runs as native code

00:14:49,149 --> 00:14:53,740
it runs quite quickly and that's

00:14:50,800 --> 00:14:55,690
important so BPF is showing up in an

00:14:53,740 --> 00:14:58,089
awful lot of places you see it making

00:14:55,690 --> 00:15:00,550
security policy decisions the secure

00:14:58,089 --> 00:15:02,230
computing mechanism is allowed the use

00:15:00,550 --> 00:15:03,130
of BPF programs for a long time for

00:15:02,230 --> 00:15:04,779
policy decisions

00:15:03,130 --> 00:15:06,970
all right the out of tree land lock

00:15:04,779 --> 00:15:08,950
security module will expand that quite a

00:15:06,970 --> 00:15:11,680
bit once that gets into the kernel as

00:15:08,950 --> 00:15:14,410
well protocol implementations there are

00:15:11,680 --> 00:15:16,630
a thousand infrared remote controls like

00:15:14,410 --> 00:15:18,250
TV controls out there each one of course

00:15:16,630 --> 00:15:19,450
has to speak its own protocol just

00:15:18,250 --> 00:15:19,810
because that's how you have to do these

00:15:19,450 --> 00:15:22,720
things

00:15:19,810 --> 00:15:24,880
so rather than encode all these

00:15:22,720 --> 00:15:26,910
protocols in the kernel you can just

00:15:24,880 --> 00:15:28,380
load a little BPF program that

00:15:26,910 --> 00:15:30,440
understands the one protocol that you

00:15:28,380 --> 00:15:32,910
need and just do that

00:15:30,440 --> 00:15:34,860
instrumentation Colonel tracing has used

00:15:32,910 --> 00:15:36,600
BPF it's a great extent for a while

00:15:34,860 --> 00:15:37,830
there's an awful lot of interesting work

00:15:36,600 --> 00:15:41,310
going on there if you haven't looked

00:15:37,830 --> 00:15:43,050
into that I recommend doing so we see a

00:15:41,310 --> 00:15:45,120
lot in networking and cleaning packet

00:15:43,050 --> 00:15:48,530
filtering which is unsurprising BPF was

00:15:45,120 --> 00:15:51,060
after all the berkeley packet filter but

00:15:48,530 --> 00:15:53,460
developments like BP filter go beyond

00:15:51,060 --> 00:15:56,070
that and remove most of the kernels

00:15:53,460 --> 00:15:59,310
firewalling and code to replace it with

00:15:56,070 --> 00:16:01,350
a simple mechanism built on BPF where

00:15:59,310 --> 00:16:03,420
the particular firewalling rules you

00:16:01,350 --> 00:16:04,860
need or loaded as a PPF program and

00:16:03,420 --> 00:16:06,720
rather than have this whole

00:16:04,860 --> 00:16:08,520
general-purpose firewalling mechanism

00:16:06,720 --> 00:16:10,410
you have a very tight little program

00:16:08,520 --> 00:16:12,600
that does exactly what you need and no

00:16:10,410 --> 00:16:14,550
more it gives you more flexibility at

00:16:12,600 --> 00:16:17,390
the same time it has a potential to be

00:16:14,550 --> 00:16:19,620
quite a bit faster than what we have now

00:16:17,390 --> 00:16:21,900
the other thing that said of interest

00:16:19,620 --> 00:16:24,390
here is - called the except the Express

00:16:21,900 --> 00:16:27,660
data path or XDP in the networking world

00:16:24,390 --> 00:16:29,640
xep is an attempt to claw back some of

00:16:27,660 --> 00:16:32,430
the users who move to user space

00:16:29,640 --> 00:16:33,900
networking stacks over the years by

00:16:32,430 --> 00:16:35,520
providing some of the same functionality

00:16:33,900 --> 00:16:37,920
so if you're running the Express data

00:16:35,520 --> 00:16:39,690
path there is really almost no network

00:16:37,920 --> 00:16:41,610
protocol processing that was happening

00:16:39,690 --> 00:16:43,560
in the kernel at all instead the kernel

00:16:41,610 --> 00:16:45,600
and sorting packets into a set of shared

00:16:43,560 --> 00:16:47,280
memory buffers they are shared with user

00:16:45,600 --> 00:16:49,470
space and then the protocol processing

00:16:47,280 --> 00:16:51,540
whatever you need to do is done by a

00:16:49,470 --> 00:16:53,100
user space program it's able to read

00:16:51,540 --> 00:16:54,960
these packets directly out of the shared

00:16:53,100 --> 00:16:55,860
memory buffer without having to go into

00:16:54,960 --> 00:16:58,200
the kernel at all

00:16:55,860 --> 00:16:59,550
so it's moved it out of there but the

00:16:58,200 --> 00:17:02,790
sorting of those packets and those

00:16:59,550 --> 00:17:04,890
buffers is done by of course a BPF

00:17:02,790 --> 00:17:06,870
program it's a it's a vital piece of

00:17:04,890 --> 00:17:08,220
this this whole picture so we're gonna

00:17:06,870 --> 00:17:10,410
see interesting stuff happening around

00:17:08,220 --> 00:17:14,010
that and there's more going on with BPF

00:17:10,410 --> 00:17:16,110
in short we're seeing BPF use one to

00:17:14,010 --> 00:17:18,150
supplement existing kernel functionality

00:17:16,110 --> 00:17:20,610
to add the ability to do policy

00:17:18,150 --> 00:17:22,590
decisions or whatever but also to

00:17:20,610 --> 00:17:24,720
outright replace some kernel

00:17:22,590 --> 00:17:26,640
functionality allow a replacement for

00:17:24,720 --> 00:17:28,650
that functionality to be loaded from

00:17:26,640 --> 00:17:30,270
user space and to do things in a

00:17:28,650 --> 00:17:32,970
different way than the kernel developers

00:17:30,270 --> 00:17:34,590
ever imagined that it might be done this

00:17:32,970 --> 00:17:36,660
allows us to push code into the kernel

00:17:34,590 --> 00:17:38,250
for both of these two purposes and

00:17:36,660 --> 00:17:39,710
that's a significant development but

00:17:38,250 --> 00:17:42,470
there's another piece to this

00:17:39,710 --> 00:17:44,900
and the other piece of that is a move to

00:17:42,470 --> 00:17:46,850
push code out of the kernel into user

00:17:44,900 --> 00:17:48,710
space so again the Express data pass

00:17:46,850 --> 00:17:50,810
that I just mentioned moves a lot of

00:17:48,710 --> 00:17:53,440
network processing out of the kernel and

00:17:50,810 --> 00:17:57,230
in the user space secure computing can

00:17:53,440 --> 00:17:59,630
or will be able to push policy decisions

00:17:57,230 --> 00:18:01,490
out to a user space program the elf

00:17:59,630 --> 00:18:04,280
modules mechanism which was recently

00:18:01,490 --> 00:18:07,160
merged allows a kernel subsystem to run

00:18:04,280 --> 00:18:08,780
user space code as a special little

00:18:07,160 --> 00:18:11,060
module that's contained within the

00:18:08,780 --> 00:18:14,060
kernel but running in user contexts for

00:18:11,060 --> 00:18:15,740
isolation and other such things and user

00:18:14,060 --> 00:18:17,030
fault FD is the system call we've had

00:18:15,740 --> 00:18:18,950
for awhile to actually allow us to

00:18:17,030 --> 00:18:21,050
handling of page faults which is a

00:18:18,950 --> 00:18:23,150
consummate kernel tasks to be done in

00:18:21,050 --> 00:18:24,380
user space so we're seeing also an

00:18:23,150 --> 00:18:26,570
effort to move code in the other

00:18:24,380 --> 00:18:28,730
direction and this is changing the way

00:18:26,570 --> 00:18:31,790
that we view our system the traditional

00:18:28,730 --> 00:18:34,820
view of of any kind of monolithic UNIX

00:18:31,790 --> 00:18:36,200
tank system is with this hard kernel in

00:18:34,820 --> 00:18:38,600
the middle this knob in the middle of

00:18:36,200 --> 00:18:40,910
the kernel with a very firm boundary

00:18:38,600 --> 00:18:43,850
around it and well-defined interfaces

00:18:40,910 --> 00:18:46,850
between it with all this effort to push

00:18:43,850 --> 00:18:48,830
code into the kernel and associate

00:18:46,850 --> 00:18:50,690
effort to move other code code out of

00:18:48,830 --> 00:18:53,330
the kernel we're seeing that boundary

00:18:50,690 --> 00:18:55,490
become porous and the shape of the

00:18:53,330 --> 00:18:57,200
kernel becomes much more amorphous it

00:18:55,490 --> 00:18:59,360
can change depending on what the

00:18:57,200 --> 00:19:01,220
workload is the is running on a

00:18:59,360 --> 00:19:03,050
particular time it can be configured

00:19:01,220 --> 00:19:06,560
quite differently and so the way that

00:19:03,050 --> 00:19:08,360
our systems is going to look is this as

00:19:06,560 --> 00:19:09,680
this work progresses it's going to

00:19:08,360 --> 00:19:11,210
change I think it's going to be quite

00:19:09,680 --> 00:19:13,070
interesting to see where this takes us

00:19:11,210 --> 00:19:14,060
some people say that we're finally

00:19:13,070 --> 00:19:16,450
getting towards a microkernel

00:19:14,060 --> 00:19:18,850
architecture with all this others

00:19:16,450 --> 00:19:22,760
perhaps we prefer to use different words

00:19:18,850 --> 00:19:24,920
but um but we're we're definitely

00:19:22,760 --> 00:19:27,440
changing the some of the fundamental

00:19:24,920 --> 00:19:29,600
concepts of how how the kernel and user

00:19:27,440 --> 00:19:31,880
space in a react and how we build an

00:19:29,600 --> 00:19:33,560
actual running system out there for a

00:19:31,880 --> 00:19:36,740
specific task it's going to be

00:19:33,560 --> 00:19:38,810
interesting to watch so the last thing

00:19:36,740 --> 00:19:40,490
that I have on mind in the air is

00:19:38,810 --> 00:19:42,530
something that I didn't think I could

00:19:40,490 --> 00:19:45,400
really pass over given all this happen

00:19:42,530 --> 00:19:49,820
and this is the the concept of conduct

00:19:45,400 --> 00:19:50,900
so um I wrote a book once I've learned

00:19:49,820 --> 00:19:52,980
from my mistakes I'm not going to do

00:19:50,900 --> 00:19:56,830
that again

00:19:52,980 --> 00:19:59,500
but when a Riley put together a series

00:19:56,830 --> 00:20:01,390
of Linux books and they decided on the

00:19:59,500 --> 00:20:03,730
covers they didn't give us little

00:20:01,390 --> 00:20:06,910
leopard kittens or they didn't give us

00:20:03,730 --> 00:20:08,140
you know baby seals or any sort of cute

00:20:06,910 --> 00:20:11,620
animal like that right

00:20:08,140 --> 00:20:13,360
we got a wild west theme and I've never

00:20:11,620 --> 00:20:15,820
talked to whoever it was that made this

00:20:13,360 --> 00:20:19,120
decision but I can only assume this was

00:20:15,820 --> 00:20:20,920
done as a very deliberate action because

00:20:19,120 --> 00:20:24,370
the kernel community at that time was

00:20:20,920 --> 00:20:26,350
viewed I think and rightly so as a sort

00:20:24,370 --> 00:20:28,540
of wild west as a place where the rules

00:20:26,350 --> 00:20:30,730
if they apply it at all were rather

00:20:28,540 --> 00:20:32,590
different rules and where we sort of

00:20:30,730 --> 00:20:35,740
settled things with with duels on the

00:20:32,590 --> 00:20:38,560
street and so on so if you think back to

00:20:35,740 --> 00:20:40,290
the environment that we had back in the

00:20:38,560 --> 00:20:43,720
good old days when that book was written

00:20:40,290 --> 00:20:45,460
right think back to the days when we had

00:20:43,720 --> 00:20:47,470
no source code management system and no

00:20:45,460 --> 00:20:50,800
change tracking right you still go back

00:20:47,470 --> 00:20:52,570
and look you know pre-pre 2.4 --is--

00:20:50,800 --> 00:20:55,090
kernels and so on it's hard to tell

00:20:52,570 --> 00:20:57,190
where the code came from who contributed

00:20:55,090 --> 00:20:58,990
how it got there no release discipline

00:20:57,190 --> 00:21:01,180
if you remember the days when it took us

00:20:58,990 --> 00:21:03,850
three or four years to get a major

00:21:01,180 --> 00:21:06,370
kernel release out rather than 9 or 10

00:21:03,850 --> 00:21:08,290
weeks you realize that things have

00:21:06,370 --> 00:21:10,060
changed a little bit over this time we

00:21:08,290 --> 00:21:12,490
didn't have our strict anti regression

00:21:10,060 --> 00:21:15,280
rule we didn't have really much of

00:21:12,490 --> 00:21:17,110
anything and way of automated testing in

00:21:15,280 --> 00:21:18,550
fact it was explicitly sad at times by

00:21:17,110 --> 00:21:20,230
kernel developers that the reason we

00:21:18,550 --> 00:21:25,050
keep users around and test our kernels

00:21:20,230 --> 00:21:27,550
so what we had was in very many ways

00:21:25,050 --> 00:21:29,440
something that was not a professional

00:21:27,550 --> 00:21:31,420
software development environment and

00:21:29,440 --> 00:21:33,550
it's amazing that we accomplished as

00:21:31,420 --> 00:21:37,270
much as we did with these kinds of

00:21:33,550 --> 00:21:39,040
handicaps right this was it was it was a

00:21:37,270 --> 00:21:41,050
different sort of environment and as

00:21:39,040 --> 00:21:43,060
part of that we had no common code of

00:21:41,050 --> 00:21:45,400
contact no set of rules that describe

00:21:43,060 --> 00:21:47,590
how it was that we thought we should

00:21:45,400 --> 00:21:49,780
deal with each other in their kernel

00:21:47,590 --> 00:21:52,060
community fact instead we had if

00:21:49,780 --> 00:21:53,860
anything a rule that said people should

00:21:52,060 --> 00:21:56,380
be able to say just about anything that

00:21:53,860 --> 00:21:58,210
they want to behave pretty much any way

00:21:56,380 --> 00:22:01,300
they want to and there were people who

00:21:58,210 --> 00:22:03,040
took that to heart so over the years we

00:22:01,300 --> 00:22:05,200
have addressed most of these things

00:22:03,040 --> 00:22:05,440
right we have source code management and

00:22:05,200 --> 00:22:08,080
change

00:22:05,440 --> 00:22:10,000
tracking all this good stuff the kernel

00:22:08,080 --> 00:22:12,909
development community has over the time

00:22:10,000 --> 00:22:17,889
I've been watching it which is she's

00:22:12,909 --> 00:22:19,899
about 25 years now as as more from the

00:22:17,889 --> 00:22:22,379
Wild West into a highly professional

00:22:19,899 --> 00:22:25,330
highly disciplined development community

00:22:22,379 --> 00:22:28,000
it has changed an awful lot and I think

00:22:25,330 --> 00:22:29,529
that we would all pretty much agree that

00:22:28,000 --> 00:22:31,629
these changes have been for the better

00:22:29,529 --> 00:22:33,909
the we're doing much better now

00:22:31,629 --> 00:22:36,190
it's the only reason that we can now

00:22:33,909 --> 00:22:38,830
produce kernels with such a rate of

00:22:36,190 --> 00:22:40,299
change every 9 or 10 weeks and actually

00:22:38,830 --> 00:22:45,759
produce something that people want to

00:22:40,299 --> 00:22:47,590
run so as of about last month we now

00:22:45,759 --> 00:22:49,629
have a code of conduct - we have finally

00:22:47,590 --> 00:22:51,309
adopted a set of rules this say

00:22:49,629 --> 00:22:53,740
essentially that we're going to deal

00:22:51,309 --> 00:22:56,259
with each other with respect that we're

00:22:53,740 --> 00:22:58,570
going to try to to be nicer to each

00:22:56,259 --> 00:23:00,580
other essentially these rules have

00:22:58,570 --> 00:23:02,500
created a certain amount of angst in

00:23:00,580 --> 00:23:04,659
certain areas of our community the worst

00:23:02,500 --> 00:23:06,340
of it in my opinion comes from outside

00:23:04,659 --> 00:23:07,779
the kernel community and is that

00:23:06,340 --> 00:23:09,519
something that I'm worried about so much

00:23:07,779 --> 00:23:11,350
but there are definitely developers

00:23:09,519 --> 00:23:12,960
within the community who are worried

00:23:11,350 --> 00:23:15,370
about some of this they are afraid that

00:23:12,960 --> 00:23:17,620
that we are maybe going to have to start

00:23:15,370 --> 00:23:22,389
to accept code that is not up to our

00:23:17,620 --> 00:23:25,000
standards or that we have given control

00:23:22,389 --> 00:23:27,070
over the community to people outside of

00:23:25,000 --> 00:23:29,289
it who perhaps do not share our goals

00:23:27,070 --> 00:23:31,000
within the community or the kernel

00:23:29,289 --> 00:23:33,039
development is no longer going to be fun

00:23:31,000 --> 00:23:35,169
I think that what we're going to find

00:23:33,039 --> 00:23:38,350
over time as all of this settles out is

00:23:35,169 --> 00:23:40,870
that these fears are unfounded that the

00:23:38,350 --> 00:23:43,990
kernel community remains in control that

00:23:40,870 --> 00:23:45,879
we continue to hold to our goal of

00:23:43,990 --> 00:23:48,220
producing the best kernel that we can

00:23:45,879 --> 00:23:51,220
and in fact the best kernel that anybody

00:23:48,220 --> 00:23:53,649
can produce and then in the end we want

00:23:51,220 --> 00:23:55,509
to continue to have fun and in fact if

00:23:53,649 --> 00:23:56,950
we can manage to be a little bit nicer

00:23:55,509 --> 00:23:58,929
to each other and a little bit more

00:23:56,950 --> 00:24:00,669
respectful to each other as we develop

00:23:58,929 --> 00:24:03,100
the kernel I think it will be even more

00:24:00,669 --> 00:24:05,110
fun than it has been in the past that is

00:24:03,100 --> 00:24:07,299
my hope that is our goal and I think

00:24:05,110 --> 00:24:09,279
that is what we're going to get and with

00:24:07,299 --> 00:24:10,360
that I am out of time and I would like

00:24:09,279 --> 00:24:19,750
to thank you all very much

00:24:10,360 --> 00:24:19,750

YouTube URL: https://www.youtube.com/watch?v=XQGUi5Gu0D8


