Title: Keynote: Serverless State of the Union - Austen Collins, Founder & CEO, Serverless Inc.
Publication date: 2018-09-04
Playlist: Open Source Summit NA 2018 - Vancouver
Description: 
	Keynote: Serverless State of the Union - Austen Collins, Founder & CEO, Serverless Inc.

Serverless has captivated the IT community at an incredible pace, and for good reason.  It has tremendous power to liberate productivity, increase innovation and reduce overhead.  However, adopting serverless technologies is still not well understood.  As the ecosystem grows around serverless, we’re empowered with options, yet further distanced us from a clear path to adoption.

In this talk, we’ll break through the clutter to investigate use-cases, adoption methods, the power of serverless now and it’s capacity to meet the demands of the future.  We’ll also look into open-source, community-led projects within the Cloud Native Computing Foundation that aim to advance the adoption of serverless technologies while enabling interoperability and an open ecosystem.

About Austen Collins
Austen Collins is a product-obsessed, software engineering leader. His focus is not on technology, but on business value, customer experience and making meaning. Austen is a primary influencer of the emerging “serverless” movement. He is the creator of the Serverless Framework, the leading open-source tool for building applications with the least possible cost and overhead on top of infrastructure with “serverless” qualities. In 2015, he founded Serverless Inc. (serverless.com), which creates developer tools and infrastructure to help organizations build and operate serverless applications. He lives in San Francisco, CA.
Captions: 
	00:00:00,000 --> 00:00:05,700
hey everyone thanks for having me super

00:00:02,190 --> 00:00:07,259
excited to be here open source probably

00:00:05,700 --> 00:00:07,799
one of the greatest macro trends of our

00:00:07,259 --> 00:00:10,290
time

00:00:07,799 --> 00:00:12,660
right I mean people working together all

00:00:10,290 --> 00:00:15,330
around the globe on a voluntary basis

00:00:12,660 --> 00:00:17,730
this efficiently at this scale that's

00:00:15,330 --> 00:00:20,010
that's pretty awesome my morning routine

00:00:17,730 --> 00:00:22,529
these days is just read the news get

00:00:20,010 --> 00:00:25,260
depressed log into github get hopeful

00:00:22,529 --> 00:00:26,699
about humanity again thank God for open

00:00:25,260 --> 00:00:28,230
source and thank God for all the people

00:00:26,699 --> 00:00:30,750
behind open source and that's you

00:00:28,230 --> 00:00:33,899
my name is Austin Collins and I'm

00:00:30,750 --> 00:00:35,880
looking for the clicker there we go

00:00:33,899 --> 00:00:36,989
I'm the creator of an open-source

00:00:35,880 --> 00:00:39,480
project called the service framework

00:00:36,989 --> 00:00:40,920
it's pretty popular right we just hit 25

00:00:39,480 --> 00:00:42,450
thousand stars on github we have a

00:00:40,920 --> 00:00:44,489
fantastic community a really

00:00:42,450 --> 00:00:46,530
enthusiastic community of supporters

00:00:44,489 --> 00:00:49,050
contributing to it they contribute to I

00:00:46,530 --> 00:00:50,640
think they've been about 90% of all the

00:00:49,050 --> 00:00:52,500
contributions the open-source community

00:00:50,640 --> 00:00:54,149
has over the last year so it's a

00:00:52,500 --> 00:00:55,800
self-sustaining project and it's picking

00:00:54,149 --> 00:00:57,270
up a lot of momentum I'm also the

00:00:55,800 --> 00:00:59,430
founder of a company called serverless

00:00:57,270 --> 00:01:01,199
Inc and we make great tools for building

00:00:59,430 --> 00:01:03,090
and operating service architectures and

00:01:01,199 --> 00:01:06,659
yes today I'm going to talk about

00:01:03,090 --> 00:01:08,520
serverless stuff but I'm gonna do it in

00:01:06,659 --> 00:01:10,080
a different way because I don't think

00:01:08,520 --> 00:01:12,210
many people really understand what's

00:01:10,080 --> 00:01:14,549
going on here and if you agree with this

00:01:12,210 --> 00:01:15,869
assessment I'm also gonna suggest a new

00:01:14,549 --> 00:01:19,080
opportunity for the open source

00:01:15,869 --> 00:01:24,240
community in this service era so here we

00:01:19,080 --> 00:01:26,189
go it appears that we are using more

00:01:24,240 --> 00:01:29,579
externally managed services in our

00:01:26,189 --> 00:01:32,909
applications than ever before that is

00:01:29,579 --> 00:01:34,799
you are using more services that you

00:01:32,909 --> 00:01:36,299
don't own and operate and that your

00:01:34,799 --> 00:01:40,079
company doesn't own and operate in your

00:01:36,299 --> 00:01:41,430
applications than ever before and yes

00:01:40,079 --> 00:01:42,570
we're still making our own services so

00:01:41,430 --> 00:01:45,000
we're gonna do this for a long time

00:01:42,570 --> 00:01:46,619
we're still going to make our big custom

00:01:45,000 --> 00:01:48,360
monolithic services were to continue to

00:01:46,619 --> 00:01:49,320
make our small micro services we're

00:01:48,360 --> 00:01:51,149
probably gonna continue to have

00:01:49,320 --> 00:01:52,439
religious arguments as to whether or not

00:01:51,149 --> 00:01:54,630
this one's too big and that was too

00:01:52,439 --> 00:01:57,299
small that's going to continue however

00:01:54,630 --> 00:01:59,340
it appears that we're using more

00:01:57,299 --> 00:02:01,259
external services in our applications

00:01:59,340 --> 00:02:05,250
and further it appears like we're using

00:02:01,259 --> 00:02:07,320
a lot these days runtime services ton of

00:02:05,250 --> 00:02:09,629
growth here lifecycle management

00:02:07,320 --> 00:02:13,060
services a lot of growth here office

00:02:09,629 --> 00:02:14,950
services Community Services

00:02:13,060 --> 00:02:16,900
steamer services the list goes on and on

00:02:14,950 --> 00:02:18,250
you can call these cloud you can call

00:02:16,900 --> 00:02:20,800
these sass you can call these server

00:02:18,250 --> 00:02:22,450
lists whatever you don't own and operate

00:02:20,800 --> 00:02:24,700
these someone else does and that's an

00:02:22,450 --> 00:02:27,489
important distinction and it appears

00:02:24,700 --> 00:02:30,430
that we're increasingly okay with using

00:02:27,489 --> 00:02:32,550
all these things at last year's open

00:02:30,430 --> 00:02:35,560
source summit Jim showed a chart

00:02:32,550 --> 00:02:37,120
suggesting that a lot of the code in our

00:02:35,560 --> 00:02:38,980
applications these days is written by

00:02:37,120 --> 00:02:40,959
other people and that's right it's the

00:02:38,980 --> 00:02:42,220
open source community is writing a lot

00:02:40,959 --> 00:02:44,560
of our code these days because we're all

00:02:42,220 --> 00:02:45,850
using so many open-source services at

00:02:44,560 --> 00:02:48,580
libraries and frameworks and our

00:02:45,850 --> 00:02:51,819
applications but perhaps we can make one

00:02:48,580 --> 00:02:53,200
minor improvement to this I think that a

00:02:51,819 --> 00:02:55,299
lot of the code in our applications

00:02:53,200 --> 00:02:57,480
these days is yes absolutely open source

00:02:55,299 --> 00:02:59,860
but it's also a lot of external services

00:02:57,480 --> 00:03:01,510
right and these things are taking up the

00:02:59,860 --> 00:03:05,830
majority of our application logic and as

00:03:01,510 --> 00:03:08,410
a result we're writing less and less and

00:03:05,830 --> 00:03:09,790
now these external services are taking

00:03:08,410 --> 00:03:12,040
up more of our application logic than

00:03:09,790 --> 00:03:14,920
ever before and as a result it seems

00:03:12,040 --> 00:03:18,130
like the custom code we need to write is

00:03:14,920 --> 00:03:20,739
much less than before and if that's true

00:03:18,130 --> 00:03:23,109
it also seems like maintaining the

00:03:20,739 --> 00:03:25,959
machines and the environments necessary

00:03:23,109 --> 00:03:26,500
to run our custom code isn't that big of

00:03:25,959 --> 00:03:29,380
a deal

00:03:26,500 --> 00:03:31,269
as it used to be instead what makes more

00:03:29,380 --> 00:03:34,209
sense these days is solving business

00:03:31,269 --> 00:03:36,040
problems writing code running that code

00:03:34,209 --> 00:03:37,750
went on it whenever it's needed and only

00:03:36,040 --> 00:03:39,519
being charged for whenever it's run and

00:03:37,750 --> 00:03:41,440
wouldn't it be great if there was an

00:03:39,519 --> 00:03:45,100
externally managed service that provided

00:03:41,440 --> 00:03:46,299
this to that's service computing so

00:03:45,100 --> 00:03:48,910
ladies and gentlemen I present to you

00:03:46,299 --> 00:03:51,519
the service architecture many call it

00:03:48,910 --> 00:03:53,139
the service pole architecture and I'm

00:03:51,519 --> 00:03:54,549
introducing it in this manner because

00:03:53,139 --> 00:03:56,410
whenever there's a server list talk

00:03:54,549 --> 00:03:58,120
people always focus on the compute part

00:03:56,410 --> 00:04:00,310
this whole functions as a service idea

00:03:58,120 --> 00:04:02,109
and that's very powerful but the compute

00:04:00,310 --> 00:04:03,940
is only one part of what's happening

00:04:02,109 --> 00:04:05,350
here the service architecture is not

00:04:03,940 --> 00:04:07,209
just about these functions but it's

00:04:05,350 --> 00:04:08,010
about using all the as a services

00:04:07,209 --> 00:04:11,470
together

00:04:08,010 --> 00:04:13,810
AWS lamda without AWS s3 aw slam de

00:04:11,470 --> 00:04:15,819
without dynamodb aw sand without api

00:04:13,810 --> 00:04:17,620
gateway not as valuable because you

00:04:15,819 --> 00:04:19,359
can't do as much stuff serverless

00:04:17,620 --> 00:04:20,590
compute needs server list services

00:04:19,359 --> 00:04:22,720
surplus computer is probably going to

00:04:20,590 --> 00:04:25,450
pave the way for more of these services

00:04:22,720 --> 00:04:26,810
in the future and together they're

00:04:25,450 --> 00:04:28,250
really valuable and together

00:04:26,810 --> 00:04:31,730
is really what the service movement is

00:04:28,250 --> 00:04:33,320
all about when we built the service

00:04:31,730 --> 00:04:35,330
framework we had this philosophy in mind

00:04:33,320 --> 00:04:37,880
the service framework has three simple

00:04:35,330 --> 00:04:40,400
concepts it has functions events and

00:04:37,880 --> 00:04:42,350
resources resources is where you put

00:04:40,400 --> 00:04:45,410
your service services like your AWS s3

00:04:42,350 --> 00:04:47,330
bucket or your DynamoDB table events is

00:04:45,410 --> 00:04:49,669
data coming from those service services

00:04:47,330 --> 00:04:51,800
that trigger your functions which

00:04:49,669 --> 00:04:53,389
contain your custom code now this may

00:04:51,800 --> 00:04:55,760
not be what we thought the future of

00:04:53,389 --> 00:04:57,500
applications was going to look like but

00:04:55,760 --> 00:04:59,419
a lot of people like this and it's a

00:04:57,500 --> 00:05:03,590
very simple way to think about these new

00:04:59,419 --> 00:05:05,450
service service full architectures now

00:05:03,590 --> 00:05:07,400
why is this happening why are there more

00:05:05,450 --> 00:05:09,470
external services these days well I

00:05:07,400 --> 00:05:11,330
think first off it's because we want to

00:05:09,470 --> 00:05:13,040
build fast and/or build more and we want

00:05:11,330 --> 00:05:15,260
to manage less right I mean when the

00:05:13,040 --> 00:05:16,760
boss comes in and goes okay we need to

00:05:15,260 --> 00:05:18,800
solve these three problems and if we do

00:05:16,760 --> 00:05:22,729
so we're gonna change the world as an

00:05:18,800 --> 00:05:25,490
engineer I respond I'm in that sounds

00:05:22,729 --> 00:05:26,630
awesome right that sounds fantastic but

00:05:25,490 --> 00:05:29,510
then what happens right after that is

00:05:26,630 --> 00:05:30,470
the boss says great but before you do

00:05:29,510 --> 00:05:32,600
that could you please maintain

00:05:30,470 --> 00:05:38,990
everything we've already built and then

00:05:32,600 --> 00:05:41,030
as an engineer I say oh oh my god really

00:05:38,990 --> 00:05:43,160
and that just you know takes the takes

00:05:41,030 --> 00:05:45,470
the excitement out of it but also why

00:05:43,160 --> 00:05:47,120
more external services because the world

00:05:45,470 --> 00:05:50,390
is moving faster than ever and if you

00:05:47,120 --> 00:05:52,700
want a snowball's chance to keep up let

00:05:50,390 --> 00:05:54,800
alone lead in a world or the pace of

00:05:52,700 --> 00:05:56,210
innovation is one of the most important

00:05:54,800 --> 00:05:58,820
things building and maintaining

00:05:56,210 --> 00:06:00,139
everything yourself it's just gonna be a

00:05:58,820 --> 00:06:03,740
hard way to do that it's not very

00:06:00,139 --> 00:06:06,770
competitive and now no doubt when you

00:06:03,740 --> 00:06:08,240
give up control well you give up control

00:06:06,770 --> 00:06:10,070
to an external service there's a lot of

00:06:08,240 --> 00:06:11,539
devastating downsides potentially you're

00:06:10,070 --> 00:06:13,610
talking about costs we're talking about

00:06:11,539 --> 00:06:14,930
reliability we're talking about locking

00:06:13,610 --> 00:06:17,630
and we're talking about legal we're

00:06:14,930 --> 00:06:18,800
talking about your data and there's

00:06:17,630 --> 00:06:20,210
these are plenty of strong reasons to

00:06:18,800 --> 00:06:21,380
continue building stuff for yourself I'm

00:06:20,210 --> 00:06:22,639
not saying that there's anything wrong

00:06:21,380 --> 00:06:24,470
with that absolutely not

00:06:22,639 --> 00:06:26,539
and thanks to organizations like the

00:06:24,470 --> 00:06:27,979
Linux Foundation thanks to organizations

00:06:26,539 --> 00:06:29,539
like the CNC F and thanks to the

00:06:27,979 --> 00:06:30,889
open-source community it's getting much

00:06:29,539 --> 00:06:34,760
easier to build and maintain things

00:06:30,889 --> 00:06:36,590
yourself however it appears that the

00:06:34,760 --> 00:06:38,030
culture is signaling that may be

00:06:36,590 --> 00:06:40,090
building and maintaining everything

00:06:38,030 --> 00:06:41,770
ourselves is just not as

00:06:40,090 --> 00:06:44,410
active anymore and this is what the

00:06:41,770 --> 00:06:46,120
service movement is telling us and

00:06:44,410 --> 00:06:50,169
honestly when you need to go somewhere

00:06:46,120 --> 00:06:51,669
do you first build a car anyway the rise

00:06:50,169 --> 00:06:53,949
of externally managed services has

00:06:51,669 --> 00:06:56,320
caused the rise of this notion of the

00:06:53,949 --> 00:06:58,260
service architecture service

00:06:56,320 --> 00:07:00,250
architectures won't take over everything

00:06:58,260 --> 00:07:01,510
it's early days for service

00:07:00,250 --> 00:07:03,460
architectures but it's likely that

00:07:01,510 --> 00:07:05,979
they're going to grow and to get really

00:07:03,460 --> 00:07:07,870
meta what if the rise of the service

00:07:05,979 --> 00:07:09,790
architecture just results in more

00:07:07,870 --> 00:07:12,010
externally managed services right how

00:07:09,790 --> 00:07:13,750
many of you are already offering a

00:07:12,010 --> 00:07:17,020
service that's relying on somebody

00:07:13,750 --> 00:07:19,210
else's externally managed service AWS

00:07:17,020 --> 00:07:20,530
they just build all their new services

00:07:19,210 --> 00:07:24,780
on top of their old services and that's

00:07:20,530 --> 00:07:26,860
a big reason why they move so fast and

00:07:24,780 --> 00:07:29,290
perhaps who knows three years from now

00:07:26,860 --> 00:07:31,120
all the stuff I showed earlier perhaps

00:07:29,290 --> 00:07:32,889
your stuff your stack could include

00:07:31,120 --> 00:07:34,330
twice as many services in the future I

00:07:32,889 --> 00:07:36,430
don't know it seems like it could be

00:07:34,330 --> 00:07:38,710
likely just given history in the and the

00:07:36,430 --> 00:07:41,470
trends we're seeing right now now some

00:07:38,710 --> 00:07:43,360
of this makes sense to you why does it

00:07:41,470 --> 00:07:45,520
matter like what does it really mean for

00:07:43,360 --> 00:07:47,830
all of us well I think for developers it

00:07:45,520 --> 00:07:49,780
means opportunity oh my god these

00:07:47,830 --> 00:07:51,669
service services are the greatest

00:07:49,780 --> 00:07:54,220
building blocks of all time it is a

00:07:51,669 --> 00:07:56,260
terrific time to be a developer the

00:07:54,220 --> 00:07:59,590
service era is the golden era of

00:07:56,260 --> 00:08:02,650
software development we could finally we

00:07:59,590 --> 00:08:04,450
could finally build more manage less and

00:08:02,650 --> 00:08:06,970
it's getting easier right you don't need

00:08:04,450 --> 00:08:08,860
to go be a specialist anymore you could

00:08:06,970 --> 00:08:10,630
be a great generalist and the diversity

00:08:08,860 --> 00:08:12,520
of the things that every single person

00:08:10,630 --> 00:08:15,220
here can make is going to greatly

00:08:12,520 --> 00:08:17,380
increase and perhaps it's plausible

00:08:15,220 --> 00:08:19,690
who knows that maybe one day developers

00:08:17,380 --> 00:08:21,849
in every school and every startup and in

00:08:19,690 --> 00:08:23,800
every enterprise organization will reach

00:08:21,849 --> 00:08:24,340
for the service architecture as their

00:08:23,800 --> 00:08:27,039
go-to

00:08:24,340 --> 00:08:28,960
general all-purpose tool before anything

00:08:27,039 --> 00:08:30,430
else because if you want to get

00:08:28,960 --> 00:08:31,840
something done and you want to get

00:08:30,430 --> 00:08:33,729
something done with really really low

00:08:31,840 --> 00:08:35,260
overhead service architecture is

00:08:33,729 --> 00:08:38,770
becoming the new best option for doing

00:08:35,260 --> 00:08:40,719
that now for vendors I think this also

00:08:38,770 --> 00:08:42,339
means tremendous opportunity not only is

00:08:40,719 --> 00:08:44,410
there a lot more demand for service

00:08:42,339 --> 00:08:47,440
services but we're talking about

00:08:44,410 --> 00:08:50,320
building building kind of provisioning

00:08:47,440 --> 00:08:52,690
updating distributed systems that are

00:08:50,320 --> 00:08:53,840
largely owned by someone else right

00:08:52,690 --> 00:08:55,340
we're building them on top of other

00:08:53,840 --> 00:08:56,870
people's stuff that's a really hard

00:08:55,340 --> 00:08:58,730
problem like how do we build test

00:08:56,870 --> 00:09:00,740
provision update observe distribute

00:08:58,730 --> 00:09:03,710
systems that we barely own and deliver

00:09:00,740 --> 00:09:05,030
them in a reliable performant way that's

00:09:03,710 --> 00:09:08,210
a tough one that's a problem that we

00:09:05,030 --> 00:09:09,470
want to solve over at serverless Inc but

00:09:08,210 --> 00:09:11,420
a lot of opportunity there and then

00:09:09,470 --> 00:09:14,060
lastly for the open source community

00:09:11,420 --> 00:09:16,220
what is the server list mean well I

00:09:14,060 --> 00:09:19,190
think I think that again tremendous

00:09:16,220 --> 00:09:20,570
opportunity I think the service movement

00:09:19,190 --> 00:09:22,970
first off doesn't want to focus on

00:09:20,570 --> 00:09:24,680
infrastructure they care about outcomes

00:09:22,970 --> 00:09:25,970
they don't want to think about databases

00:09:24,680 --> 00:09:27,410
they don't want to think about load

00:09:25,970 --> 00:09:28,940
balancers they don't to think about API

00:09:27,410 --> 00:09:30,620
gateways they want to think about

00:09:28,940 --> 00:09:32,810
software features we're moving way up

00:09:30,620 --> 00:09:35,480
the stack now and I think stitching

00:09:32,810 --> 00:09:37,700
together managed services with custom

00:09:35,480 --> 00:09:39,920
logic to make serverless features that

00:09:37,700 --> 00:09:42,410
could be reused by anyone is a huge

00:09:39,920 --> 00:09:45,140
opportunity for open source an ecosystem

00:09:42,410 --> 00:09:47,540
of open source server list features that

00:09:45,140 --> 00:09:49,250
derive insights from an image respond to

00:09:47,540 --> 00:09:52,250
a delinquent payment send a confirmation

00:09:49,250 --> 00:09:54,230
email respond to a slack command update

00:09:52,250 --> 00:09:56,800
a user profile detect sentiment in your

00:09:54,230 --> 00:09:59,540
comments send a reminder text message

00:09:56,800 --> 00:10:01,340
respond to a voice command I think now

00:09:59,540 --> 00:10:02,420
managed services will take on a lot of

00:10:01,340 --> 00:10:03,920
that stuff and help with those features

00:10:02,420 --> 00:10:05,990
but the open source community in

00:10:03,920 --> 00:10:08,090
particular has a lot of opportunity to

00:10:05,990 --> 00:10:10,100
create a rich vibrant ecosystem of all

00:10:08,090 --> 00:10:12,890
these turnkey solutions that anyone can

00:10:10,100 --> 00:10:14,390
install right away in a month we're

00:10:12,890 --> 00:10:18,260
gonna announce service framework version

00:10:14,390 --> 00:10:19,700
two and this project has again one one

00:10:18,260 --> 00:10:22,310
simple big goal and that's to better

00:10:19,700 --> 00:10:24,740
enable you to package up external

00:10:22,310 --> 00:10:26,960
services with custom logic and events to

00:10:24,740 --> 00:10:29,390
deliver reusable serverless features and

00:10:26,960 --> 00:10:31,550
applications and the goal is to create a

00:10:29,390 --> 00:10:33,470
system where you could easily bring in

00:10:31,550 --> 00:10:36,200
these features all built on service

00:10:33,470 --> 00:10:37,760
services to rapidly build your

00:10:36,200 --> 00:10:40,070
applications and applications that have

00:10:37,760 --> 00:10:41,510
remarkably low overhead so if this

00:10:40,070 --> 00:10:43,010
sounds interesting to you just check us

00:10:41,510 --> 00:10:45,640
out at service comm we're going to talk

00:10:43,010 --> 00:10:48,590
about it a lot up in the next month and

00:10:45,640 --> 00:10:52,190
to wrap up I like to offer one last

00:10:48,590 --> 00:10:53,750
consideration I started talking about

00:10:52,190 --> 00:10:55,610
how the service movement is about

00:10:53,750 --> 00:10:58,820
managed services and how it's about

00:10:55,610 --> 00:11:01,430
outcomes and today it is but I think

00:10:58,820 --> 00:11:03,770
tomorrow the logical outcome of all this

00:11:01,430 --> 00:11:06,080
stuff I think the service movement this

00:11:03,770 --> 00:11:07,370
goal is to abstract the complexity out

00:11:06,080 --> 00:11:09,500
of software development

00:11:07,370 --> 00:11:11,150
till it's accessible to everyone I think

00:11:09,500 --> 00:11:13,970
this is the most meaningful impact that

00:11:11,150 --> 00:11:15,500
the movement can make and we must keep

00:11:13,970 --> 00:11:17,570
this in mind as it progresses we must

00:11:15,500 --> 00:11:19,100
ask hey do we want another generation of

00:11:17,570 --> 00:11:21,500
people who are forced to care about

00:11:19,100 --> 00:11:22,880
patching provisioning upgrading scaling

00:11:21,500 --> 00:11:26,000
infrastructure in order to deliver

00:11:22,880 --> 00:11:28,339
software or do we want another

00:11:26,000 --> 00:11:30,050
generation of biologists writers

00:11:28,339 --> 00:11:32,000
accountants who could all build their

00:11:30,050 --> 00:11:33,680
own software to solve problems and make

00:11:32,000 --> 00:11:36,170
an impact in their specific field

00:11:33,680 --> 00:11:38,390
I think the metric of success for

00:11:36,170 --> 00:11:40,190
service is not going to be to increase

00:11:38,390 --> 00:11:42,170
the quantity and diversity of software

00:11:40,190 --> 00:11:44,630
that we can build but to increase the

00:11:42,170 --> 00:11:46,880
quantity and diversity of people making

00:11:44,630 --> 00:11:47,900
software and that's it

00:11:46,880 --> 00:11:49,700
check us out if you're interested

00:11:47,900 --> 00:11:51,990
serverless comm and the framework is

00:11:49,700 --> 00:11:57,019
open source of course thank you

00:11:51,990 --> 00:11:57,019

YouTube URL: https://www.youtube.com/watch?v=q7mFl9sLiCY


