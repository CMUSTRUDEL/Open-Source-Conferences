Title: DinosaurJS 2019: A Partial Taxonomy of Test Unreliability by Rich Trott
Publication date: 2019-08-19
Playlist: DinosaurJS 2019
Description: 
	DinosaurJS 2019: A Partial Taxonomy of Test Unreliability by Rich Trott
Captions: 
	00:00:01,550 --> 00:00:06,490
[Applause]

00:00:04,100 --> 00:00:08,880
[Music]

00:00:06,490 --> 00:00:10,230
[Applause]

00:00:08,880 --> 00:00:14,300
[Music]

00:00:10,230 --> 00:00:17,880
[Applause]

00:00:14,300 --> 00:00:20,940
all right so I am going to talk fast I

00:00:17,880 --> 00:00:24,540
will try not to and I will fail and I am

00:00:20,940 --> 00:00:26,820
sorry in advance this is a partial

00:00:24,540 --> 00:00:30,509
taxonomy of tests on reliability I

00:00:26,820 --> 00:00:32,550
really need a snappier title I work at

00:00:30,509 --> 00:00:34,890
the UCSF library that's the University

00:00:32,550 --> 00:00:37,970
of California in San Francisco we are

00:00:34,890 --> 00:00:40,770
not hiring technologists right now but

00:00:37,970 --> 00:00:42,989
you know if you want to come and be a

00:00:40,770 --> 00:00:45,540
data science librarian or something you

00:00:42,989 --> 00:00:49,500
should really come talk to me I do a lot

00:00:45,540 --> 00:00:51,390
of work on node core and I also been

00:00:49,500 --> 00:00:53,970
writing an ever expanding rock opera

00:00:51,390 --> 00:00:55,950
about a steak house for over a decade in

00:00:53,970 --> 00:01:00,270
fact when we were supposed to have

00:00:55,950 --> 00:01:03,150
walk-up music and and it got nixed

00:01:00,270 --> 00:01:04,860
because the you know there wasn't enough

00:01:03,150 --> 00:01:16,229
connections or something so I'm going to

00:01:04,860 --> 00:01:19,890
see if this works but unfortunately I

00:01:16,229 --> 00:01:23,189
didn't come up here to play excerpts of

00:01:19,890 --> 00:01:25,950
my rock opera I came up here mostly to

00:01:23,189 --> 00:01:27,630
talk about node a few disclaimers though

00:01:25,950 --> 00:01:29,819
they're gonna be pretty light speed

00:01:27,630 --> 00:01:31,649
first of all the views expressed are my

00:01:29,819 --> 00:01:32,969
own and not necessarily those of my

00:01:31,649 --> 00:01:34,710
employer everyone's heard that one

00:01:32,969 --> 00:01:36,990
before also the views expressed on my

00:01:34,710 --> 00:01:38,789
own and not necessarily those of node

00:01:36,990 --> 00:01:40,530
there's like a hundred some-odd

00:01:38,789 --> 00:01:42,329
other people besides me will have the

00:01:40,530 --> 00:01:44,639
commitment on the core repository and

00:01:42,329 --> 00:01:46,139
there's 18 other people well 17 right

00:01:44,639 --> 00:01:48,350
now soon to be eighteen other people on

00:01:46,139 --> 00:01:51,240
the technical steering committee and

00:01:48,350 --> 00:01:53,729
thankfully we all don't agree we all

00:01:51,240 --> 00:01:55,490
don't see everything the same way so

00:01:53,729 --> 00:01:58,649
with that out of the way back to node

00:01:55,490 --> 00:02:01,229
I've done a lot of work on the tests in

00:01:58,649 --> 00:02:03,539
node core over the last four ish years

00:02:01,229 --> 00:02:04,920
and a lot of work a lot of that work has

00:02:03,539 --> 00:02:07,679
been fixing what we have a project

00:02:04,920 --> 00:02:08,550
called flaky tests but a better word for

00:02:07,679 --> 00:02:10,530
them is unreliable

00:02:08,550 --> 00:02:12,420
unfortunately we started calling them

00:02:10,530 --> 00:02:14,370
flaky and probably never stopped but

00:02:12,420 --> 00:02:15,959
they're unreliable tests and what that

00:02:14,370 --> 00:02:19,050
means is these are these are tests that

00:02:15,959 --> 00:02:21,930
succeed like 99% of the time but then

00:02:19,050 --> 00:02:23,550
fail at unpredictable times and that's

00:02:21,930 --> 00:02:25,650
kind of I'm trying to capture that

00:02:23,550 --> 00:02:28,110
emotion with this picture of a test

00:02:25,650 --> 00:02:30,510
love tests but it's letting me down

00:02:28,110 --> 00:02:32,340
about 1% time so if you have like three

00:02:30,510 --> 00:02:35,459
tests in your test suite that fail about

00:02:32,340 --> 00:02:37,799
1% of the time and you have as no does

00:02:35,459 --> 00:02:40,650
the last time I counted 33 different

00:02:37,799 --> 00:02:42,689
platforms in your CI which Laurie

00:02:40,650 --> 00:02:46,379
wherever you are that's continuous

00:02:42,689 --> 00:02:47,480
integration in your CI server oh there

00:02:46,379 --> 00:02:52,079
you are Hey

00:02:47,480 --> 00:02:54,599
yeah then write the math 33 times yeah 3

00:02:52,079 --> 00:02:56,459
99% of the time so most of the time your

00:02:54,599 --> 00:02:58,440
test suite will fail if you have if you

00:02:56,459 --> 00:03:00,180
have that or at least that's you know

00:02:58,440 --> 00:03:02,370
what I'm going to say here so we just

00:03:00,180 --> 00:03:04,220
did a small amount of probability of you

00:03:02,370 --> 00:03:08,310
know and you've probably incorrect

00:03:04,220 --> 00:03:09,720
arithmetic and statistics so you know

00:03:08,310 --> 00:03:11,400
and there were some cute puppy faces so

00:03:09,720 --> 00:03:12,930
now let's just pretend that I've gone

00:03:11,400 --> 00:03:14,909
from that small bit of like I said

00:03:12,930 --> 00:03:16,680
probably incorrect arithmetic and

00:03:14,909 --> 00:03:19,709
statistics and I've done a smooth

00:03:16,680 --> 00:03:21,359
transition into science or for those of

00:03:19,709 --> 00:03:27,200
you who like me grew up in the 1980s

00:03:21,359 --> 00:03:30,419
science specifically biological taxonomy

00:03:27,200 --> 00:03:31,230
so just whoa hey pretend that that just

00:03:30,419 --> 00:03:34,199
blew your mind with that smooth

00:03:31,230 --> 00:03:36,720
transition biological taxonomy is as it

00:03:34,199 --> 00:03:39,090
says on the Wikipedia excerpt here the

00:03:36,720 --> 00:03:41,220
science of defining and naming groups of

00:03:39,090 --> 00:03:44,159
biological organisms on the basis of

00:03:41,220 --> 00:03:46,620
shared characteristics since we're at

00:03:44,159 --> 00:03:48,569
dinosaur j/s here's a taxonomy of

00:03:46,620 --> 00:03:51,000
dinosaurs that shows their evolutionary

00:03:48,569 --> 00:03:54,569
relationship roughly speaking that's

00:03:51,000 --> 00:03:56,250
what's called a phylogenetic taxonomy or

00:03:54,569 --> 00:03:59,280
maybe not don't I don't know what I'm

00:03:56,250 --> 00:04:00,959
talking about so just don't at me but

00:03:59,280 --> 00:04:03,449
the dominant system of biological

00:04:00,959 --> 00:04:05,669
taxonomy is called Linnaean taxonomy

00:04:03,449 --> 00:04:09,780
it's named for Swedish botanist Carl

00:04:05,669 --> 00:04:11,579
Linnaeus who who devised a lot of the

00:04:09,780 --> 00:04:13,290
things we still use to this day like the

00:04:11,579 --> 00:04:15,599
naming conventions that are used in

00:04:13,290 --> 00:04:17,400
taxonomy and then there's this person

00:04:15,599 --> 00:04:19,349
who has their own unique contribution to

00:04:17,400 --> 00:04:22,109
taxonomy raise your hand if you know who

00:04:19,349 --> 00:04:24,720
this person is yeah that's good

00:04:22,109 --> 00:04:27,510
his name is JD and he's responsible for

00:04:24,720 --> 00:04:29,970
literally everything that anyone knows

00:04:27,510 --> 00:04:33,120
at all about the taxonomy of aquaponics

00:04:29,970 --> 00:04:35,580
so like literally no other person on the

00:04:33,120 --> 00:04:37,289
planet knows anything at all about the

00:04:35,580 --> 00:04:38,970
taxonomy of aquaponics unless they

00:04:37,289 --> 00:04:40,410
learned it from him

00:04:38,970 --> 00:04:42,360
so it's super impressive although you

00:04:40,410 --> 00:04:45,870
were absolutely correct to be wondering

00:04:42,360 --> 00:04:48,120
what our aquaponics aqua panties are the

00:04:45,870 --> 00:04:53,370
name that he made up for those plastic

00:04:48,120 --> 00:04:57,900
things that seal bread bags he's done a

00:04:53,370 --> 00:05:00,060
whole taxonomy for them he's done a

00:04:57,900 --> 00:05:02,310
whole taxonomy for them and as you can

00:05:00,060 --> 00:05:06,530
see from this from this diagram of

00:05:02,310 --> 00:05:10,020
occupant Anatomy he did not come to play

00:05:06,530 --> 00:05:11,910
he's got like hundreds of species of

00:05:10,020 --> 00:05:15,449
these things or something like all

00:05:11,910 --> 00:05:17,520
catalog very carefully go to hor g.com

00:05:15,449 --> 00:05:19,610
to check out his work he's a it's

00:05:17,520 --> 00:05:22,050
actually cited in a medical paper

00:05:19,610 --> 00:05:23,520
because of a case study of someone who

00:05:22,050 --> 00:05:25,410
swallowed one of these things and the

00:05:23,520 --> 00:05:27,680
surgery they had to do to remove it and

00:05:25,410 --> 00:05:30,510
that's actually true honest to god

00:05:27,680 --> 00:05:32,220
anyway so I figured that if that can

00:05:30,510 --> 00:05:34,919
happen for like the little plastic

00:05:32,220 --> 00:05:36,690
things that seal bread bags and I've

00:05:34,919 --> 00:05:38,669
been doing all this work on flaky tests

00:05:36,690 --> 00:05:40,229
and node you know I should be able to

00:05:38,669 --> 00:05:42,240
come up with something you know for the

00:05:40,229 --> 00:05:45,210
taxonomy of flaky tests why not so here

00:05:42,240 --> 00:05:47,490
we go let me just do myself a little

00:05:45,210 --> 00:05:50,520
quick favor here because my eyesight is

00:05:47,490 --> 00:05:51,690
terrible there we go okay great so of

00:05:50,520 --> 00:05:53,669
course I'm not the first person ever

00:05:51,690 --> 00:05:56,220
classified software defects into a

00:05:53,669 --> 00:05:57,900
taxonomy but much to my surprise I think

00:05:56,220 --> 00:05:59,760
the specific idea is actually somewhat

00:05:57,900 --> 00:06:01,050
novel I did a literature search and I

00:05:59,760 --> 00:06:04,200
will remind you at this point that I

00:06:01,050 --> 00:06:06,330
work at an academic library and the bug

00:06:04,200 --> 00:06:07,979
taxonomy is I found all had different

00:06:06,330 --> 00:06:11,789
goals than this they include things like

00:06:07,979 --> 00:06:13,380
syntax errors and you know like that's

00:06:11,789 --> 00:06:15,210
not a cause of a test that's gonna fail

00:06:13,380 --> 00:06:16,680
once in a while that's like a defect

00:06:15,210 --> 00:06:18,300
that's gonna cause the test to fail all

00:06:16,680 --> 00:06:20,820
the time so of course you know there's

00:06:18,300 --> 00:06:22,349
there's some overlap between those the

00:06:20,820 --> 00:06:24,780
contents of those taxonomy z' that i

00:06:22,349 --> 00:06:27,330
found and the content contents of a

00:06:24,780 --> 00:06:29,610
taxonomy like this but I couldn't find a

00:06:27,330 --> 00:06:31,949
relevant existing taxonomy so if anyone

00:06:29,610 --> 00:06:33,180
knows of one I would be very grateful if

00:06:31,949 --> 00:06:35,940
you could tell me about it I couldn't

00:06:33,180 --> 00:06:38,340
find one so I'm also gonna wedge in one

00:06:35,940 --> 00:06:40,560
tiny piece of information potentially

00:06:38,340 --> 00:06:42,750
useful information before we continue so

00:06:40,560 --> 00:06:44,880
if you only take one thing from this

00:06:42,750 --> 00:06:46,409
talk let it be that you really should

00:06:44,880 --> 00:06:48,230
try to take more than one thing from a

00:06:46,409 --> 00:06:49,820
talk but it's

00:06:48,230 --> 00:06:52,910
if you only take two things from this

00:06:49,820 --> 00:06:54,970
talk let the second one be this to deal

00:06:52,910 --> 00:06:58,130
with these things get a job in your CI

00:06:54,970 --> 00:07:00,290
server that will run the test over and

00:06:58,130 --> 00:07:02,110
over and over again on any platform do

00:07:00,290 --> 00:07:05,240
it in parallel do it sequentially

00:07:02,110 --> 00:07:07,460
because the thing the situations that

00:07:05,240 --> 00:07:10,790
need to be created to cause these tests

00:07:07,460 --> 00:07:12,710
to fail vary a lot and you're gonna want

00:07:10,790 --> 00:07:14,270
to be able to reliably determine if

00:07:12,710 --> 00:07:16,100
you've actually solved these problems or

00:07:14,270 --> 00:07:18,950
not and it's maddening when the thing

00:07:16,100 --> 00:07:20,030
only fails one out of 10,000 runs you

00:07:18,950 --> 00:07:21,440
know how you're gonna determine if you

00:07:20,030 --> 00:07:23,330
actually solve the problem well if you

00:07:21,440 --> 00:07:25,040
can reliably reproduce it by like

00:07:23,330 --> 00:07:26,900
running 50 copies of them at the same

00:07:25,040 --> 00:07:28,490
time so resource starvation happens and

00:07:26,900 --> 00:07:29,990
oh that's the cause of your problem or

00:07:28,490 --> 00:07:32,000
maybe it's actually that there's the

00:07:29,990 --> 00:07:33,320
opposite of resource starvation and a

00:07:32,000 --> 00:07:34,700
race condition is triggered but only

00:07:33,320 --> 00:07:38,990
when there's a ton of memory available

00:07:34,700 --> 00:07:40,040
that kind of thing ok I'm done I've no

00:07:38,990 --> 00:07:42,020
idea if I said everything in my notes

00:07:40,040 --> 00:07:45,680
that's ok I probably skipped a few super

00:07:42,020 --> 00:07:48,770
golden jokes next time okay so let's get

00:07:45,680 --> 00:07:50,540
started race condition so this is a good

00:07:48,770 --> 00:07:51,410
old fashioned race condition it's just

00:07:50,540 --> 00:07:52,910
when you have two things that are

00:07:51,410 --> 00:07:54,560
stepping on each other's toes for

00:07:52,910 --> 00:07:55,760
example to test two things that are

00:07:54,560 --> 00:07:57,500
writing to the same file at the same

00:07:55,760 --> 00:07:59,600
time you don't know which ones going to

00:07:57,500 --> 00:08:02,690
finish first so you can't accurately you

00:07:59,600 --> 00:08:05,180
can't correctly 107 time determine what

00:08:02,690 --> 00:08:07,280
the contents of the file will be so

00:08:05,180 --> 00:08:09,110
what's wrong with this code we you know

00:08:07,280 --> 00:08:11,600
we write to a file then in the right

00:08:09,110 --> 00:08:13,460
file callback we read from the file then

00:08:11,600 --> 00:08:15,560
in the refile callback we expect to get

00:08:13,460 --> 00:08:16,490
the data that we wrote and the answer is

00:08:15,560 --> 00:08:18,620
that there's nothing wrong with this

00:08:16,490 --> 00:08:20,240
code it's totally fine but if you wrap

00:08:18,620 --> 00:08:22,520
it in a for loop like this and you have

00:08:20,240 --> 00:08:24,200
two problems the big one is that this

00:08:22,520 --> 00:08:25,760
code snippet now obscures my Twitter

00:08:24,200 --> 00:08:26,150
handle in the lower left hand corner of

00:08:25,760 --> 00:08:27,590
this slide

00:08:26,150 --> 00:08:29,300
lower right hand corner this slide

00:08:27,590 --> 00:08:30,890
that's a big firm but the smaller

00:08:29,300 --> 00:08:33,410
problem that's more relevant to the

00:08:30,890 --> 00:08:37,160
topic of this talk is that you know you

00:08:33,410 --> 00:08:38,540
now have a hundred things writing to you

00:08:37,160 --> 00:08:40,880
know do you know do a synchronous things

00:08:38,540 --> 00:08:43,400
all writing to the same file this this

00:08:40,880 --> 00:08:45,350
is gonna fail pretty much 100% of the

00:08:43,400 --> 00:08:48,350
time race conditions in the wild or you

00:08:45,350 --> 00:08:49,940
know more you know let it fail less

00:08:48,350 --> 00:08:52,700
frequently and therefore harder to find

00:08:49,940 --> 00:08:54,230
the solution is probably obvious just

00:08:52,700 --> 00:08:55,730
like we're writing different data every

00:08:54,230 --> 00:09:00,759
time you write to a different file every

00:08:55,730 --> 00:09:02,709
time okay so next up is the magic number

00:09:00,759 --> 00:09:04,930
so here's something based on an actual

00:09:02,709 --> 00:09:07,990
example from node core tests as are all

00:09:04,930 --> 00:09:10,059
of the examples in this talk so you do

00:09:07,990 --> 00:09:12,490
something asynchronous probably

00:09:10,059 --> 00:09:13,839
recursive as well and then you know

00:09:12,490 --> 00:09:16,779
after a little bit you check that things

00:09:13,839 --> 00:09:19,480
got garbage collected as expected the

00:09:16,779 --> 00:09:22,120
problem is that what is that 100 doing

00:09:19,480 --> 00:09:23,230
in that for loop like you know that kind

00:09:22,120 --> 00:09:24,850
of makes assumptions about the

00:09:23,230 --> 00:09:26,649
environment you're running in you know

00:09:24,850 --> 00:09:27,939
that you're not memory constrained or

00:09:26,649 --> 00:09:30,879
you are memory constrained or whatever

00:09:27,939 --> 00:09:32,620
and so maybe this test will work on some

00:09:30,879 --> 00:09:34,600
platforms under some situations and not

00:09:32,620 --> 00:09:36,699
on others that's not cool it'll be hard

00:09:34,600 --> 00:09:39,579
to debug those are both things that suck

00:09:36,699 --> 00:09:40,959
and so instead what you want to do is

00:09:39,579 --> 00:09:42,430
find a way to do the thing over and over

00:09:40,959 --> 00:09:44,079
again until the condition you're looking

00:09:42,430 --> 00:09:45,699
for happens hopefully it happens a lot

00:09:44,079 --> 00:09:47,829
sooner than after than 100 iterations

00:09:45,699 --> 00:09:49,389
but if it doesn't and it just keeps

00:09:47,829 --> 00:09:51,100
going and going and going you want the

00:09:49,389 --> 00:09:53,889
test to fail because the because the

00:09:51,100 --> 00:09:55,749
test runner times out that's a whole lot

00:09:53,889 --> 00:09:57,519
better than the magic number because if

00:09:55,749 --> 00:09:59,680
the test runners timing out a lot on a

00:09:57,519 --> 00:10:00,999
certain platform you can tweak the time

00:09:59,680 --> 00:10:02,980
out for the test runner and just give

00:10:00,999 --> 00:10:04,600
your tests more time to run if you have

00:10:02,980 --> 00:10:05,679
magic numbers sprinkled throughout your

00:10:04,600 --> 00:10:06,189
tests though that you know and they're

00:10:05,679 --> 00:10:09,009
all different

00:10:06,189 --> 00:10:12,129
you're kind of screwed so you're really

00:10:09,009 --> 00:10:14,170
clever audience I can tell and you might

00:10:12,129 --> 00:10:16,389
be thinking that this is a list and not

00:10:14,170 --> 00:10:19,660
a taxonomy you might also be thinking

00:10:16,389 --> 00:10:22,870
huh a magic number is actually like a

00:10:19,660 --> 00:10:24,670
special case of a race condition you

00:10:22,870 --> 00:10:26,529
know in many cases at least it's just a

00:10:24,670 --> 00:10:28,329
special case because you know you know

00:10:26,529 --> 00:10:30,970
like you're hoping that something

00:10:28,329 --> 00:10:33,879
happens before the magic number is up or

00:10:30,970 --> 00:10:35,319
whatever so really you know it's really

00:10:33,879 --> 00:10:39,339
like this and boom now we have a

00:10:35,319 --> 00:10:42,879
taxonomy so next up is the arbitrary

00:10:39,339 --> 00:10:44,230
usually long timeout so what's wrong

00:10:42,879 --> 00:10:46,259
with this code besides that there's a

00:10:44,230 --> 00:10:50,589
little piece of my cursor caught in the

00:10:46,259 --> 00:10:53,079
screenshot there just you know uh-uh not

00:10:50,589 --> 00:10:54,670
my best work okay so you don't know how

00:10:53,079 --> 00:10:56,829
busy or low resource or high resource

00:10:54,670 --> 00:10:59,079
the test machine will be so you know the

00:10:56,829 --> 00:11:00,879
set timeout after you know one second a

00:10:59,079 --> 00:11:02,439
thousand milliseconds you know this this

00:11:00,879 --> 00:11:04,629
test could totally fail when there's no

00:11:02,439 --> 00:11:06,819
bug at all and that's not what you

00:11:04,629 --> 00:11:08,230
wanted to test right so as with the

00:11:06,819 --> 00:11:09,850
previous example the solution is to use

00:11:08,230 --> 00:11:11,529
events or callbacks or something like

00:11:09,850 --> 00:11:12,140
that instead of what we have here which

00:11:11,529 --> 00:11:13,940
is the time

00:11:12,140 --> 00:11:15,920
and you may be thinking hey long time

00:11:13,940 --> 00:11:17,630
out it's just a special case of magic

00:11:15,920 --> 00:11:19,760
number a thousand milliseconds where a

00:11:17,630 --> 00:11:23,570
thousand is the magic number and that

00:11:19,760 --> 00:11:25,339
would be right so next no idea how I'm

00:11:23,570 --> 00:11:27,830
doing a time I forgot to start my timer

00:11:25,339 --> 00:11:31,250
but that's okay next let's talk about

00:11:27,830 --> 00:11:33,110
deadlocks so deadlocks actually aren't

00:11:31,250 --> 00:11:35,089
that common in JavaScript but they do

00:11:33,110 --> 00:11:38,120
happen especially if you're dealing with

00:11:35,089 --> 00:11:40,370
web workers like like Janice talk was or

00:11:38,120 --> 00:11:43,610
if you're dealing with worker threads

00:11:40,370 --> 00:11:46,760
and note so the way a deadlock basically

00:11:43,610 --> 00:11:50,660
works is you know process 1 or thread

00:11:46,760 --> 00:11:52,579
I'm sorry process a and so a at the top

00:11:50,660 --> 00:11:55,100
which represents a process or a thread

00:11:52,579 --> 00:11:57,680
or something it has resource 1 locked

00:11:55,100 --> 00:11:59,029
and it's trying to grab resource 2 so it

00:11:57,680 --> 00:12:01,490
can continue and it's waiting for that

00:11:59,029 --> 00:12:03,680
meanwhile process or thread or something

00:12:01,490 --> 00:12:06,079
B has resource two locked and it's

00:12:03,680 --> 00:12:07,820
trying to grab resource 1 so in in in a

00:12:06,079 --> 00:12:12,110
naive implementation they'll both just

00:12:07,820 --> 00:12:14,029
wait forever and that's not cool so back

00:12:12,110 --> 00:12:16,130
to our taxonomy a deadlock is also a

00:12:14,029 --> 00:12:18,770
race condition right if either A or B

00:12:16,130 --> 00:12:20,810
both you know gets both resources before

00:12:18,770 --> 00:12:22,160
the other then everything's cool but if

00:12:20,810 --> 00:12:24,079
one gets one resource and the other gets

00:12:22,160 --> 00:12:26,720
the other resource you're in trouble so

00:12:24,079 --> 00:12:29,959
let's put deadlock under race condition

00:12:26,720 --> 00:12:31,220
like this this next one I didn't know

00:12:29,959 --> 00:12:33,380
what to call so like you know I started

00:12:31,220 --> 00:12:35,630
with ones that like kind of have their

00:12:33,380 --> 00:12:37,459
obvious names or well establishing you

00:12:35,630 --> 00:12:39,079
know names your other taxonomy talks

00:12:37,459 --> 00:12:40,910
about talking about race conditions and

00:12:39,079 --> 00:12:42,649
deadlocks this next one I didn't know

00:12:40,910 --> 00:12:44,540
what to call so it's like too much stuff

00:12:42,649 --> 00:12:48,200
going on or something like that so well

00:12:44,540 --> 00:12:49,579
let's call it TMS Geo so let's say you

00:12:48,200 --> 00:12:52,670
have a test that looks like this and

00:12:49,579 --> 00:12:53,779
everything is fine cool then you had a

00:12:52,670 --> 00:12:56,779
feature you have to add a bunch more

00:12:53,779 --> 00:12:59,060
tests and someone does this ignore the

00:12:56,779 --> 00:13:01,520
red curly Q that's just something

00:12:59,060 --> 00:13:03,649
telling you telling us all that dot dot

00:13:01,520 --> 00:13:05,089
is not valid JavaScript maybe will be ok

00:13:03,649 --> 00:13:08,089
if I use the ellipsis character I don't

00:13:05,089 --> 00:13:09,709
know anyway so now our tests are timing

00:13:08,089 --> 00:13:11,120
out on some platforms but only sometimes

00:13:09,709 --> 00:13:14,720
because you're launching too many

00:13:11,120 --> 00:13:17,510
freaking processes so this is also a

00:13:14,720 --> 00:13:19,459
race condition right so ok this says

00:13:17,510 --> 00:13:20,810
click here to add speaker notes so I

00:13:19,459 --> 00:13:22,699
guess I forgot to add speaker notes for

00:13:20,810 --> 00:13:26,120
the slide but the point is yes yes

00:13:22,699 --> 00:13:29,840
indeed TMS geo is a race condition

00:13:26,120 --> 00:13:31,910
alright so in fact any slow test that

00:13:29,840 --> 00:13:35,090
times out is a more generalized form of

00:13:31,910 --> 00:13:37,430
a race condition alright so next up from

00:13:35,090 --> 00:13:40,850
the annals of works on my machine shrug

00:13:37,430 --> 00:13:42,260
is honey I tripped at the firewall which

00:13:40,850 --> 00:13:43,760
we're gonna that's too long so let's

00:13:42,260 --> 00:13:46,660
just call a firewall but that's too

00:13:43,760 --> 00:13:50,390
boring so let's add an exclamation point

00:13:46,660 --> 00:13:52,790
this is when you make like 500 HTTP

00:13:50,390 --> 00:13:54,920
requests in a row to a web server you've

00:13:52,790 --> 00:13:56,570
set up for testing and the operating

00:13:54,920 --> 00:13:59,090
system decides to throttle things

00:13:56,570 --> 00:14:00,590
causing your test to fail but of course

00:13:59,090 --> 00:14:02,930
only on machines with the firewall

00:14:00,590 --> 00:14:04,970
configured that way which doesn't happen

00:14:02,930 --> 00:14:06,080
to be your your developer machine what

00:14:04,970 --> 00:14:07,310
happens to be the next person's

00:14:06,080 --> 00:14:10,250
developer machine or whatever

00:14:07,310 --> 00:14:12,110
anyway often it's only sometimes it's

00:14:10,250 --> 00:14:13,400
totally maddening what's you know which

00:14:12,110 --> 00:14:17,210
is the whole point of going over these

00:14:13,400 --> 00:14:18,980
sources of test unreliability so not

00:14:17,210 --> 00:14:21,260
moving anything here just kind of

00:14:18,980 --> 00:14:23,150
changing the text size to make a little

00:14:21,260 --> 00:14:24,590
space if you sometimes tripping a

00:14:23,150 --> 00:14:26,720
firewall through networking decisions

00:14:24,590 --> 00:14:28,550
sometimes not that sure sounds like a

00:14:26,720 --> 00:14:30,260
race condition booyah

00:14:28,550 --> 00:14:31,850
that booyah had a silent neutral face

00:14:30,260 --> 00:14:37,310
emoji after it I don't know how to say

00:14:31,850 --> 00:14:39,470
that but we so next up we create a

00:14:37,310 --> 00:14:41,240
server and tell the operating system to

00:14:39,470 --> 00:14:43,130
give us any old port any old Network

00:14:41,240 --> 00:14:44,960
port and we retrieved them that's that's

00:14:43,130 --> 00:14:47,810
what the that's what the zero is and

00:14:44,960 --> 00:14:49,100
listen in note that says operating

00:14:47,810 --> 00:14:51,140
system please give me an available port

00:14:49,100 --> 00:14:52,880
I don't care what it is so we retrieved

00:14:51,140 --> 00:14:54,110
the port and then and then run some

00:14:52,880 --> 00:14:55,970
tests but we're increment to get

00:14:54,110 --> 00:14:57,650
additional ports and this is this is

00:14:55,970 --> 00:15:00,830
again this this happened and this

00:14:57,650 --> 00:15:02,510
happens in in in a bunch of places and

00:15:00,830 --> 00:15:04,100
no jet or used to happen Christ all

00:15:02,510 --> 00:15:06,320
those a bunch of places a node test

00:15:04,100 --> 00:15:09,320
because the cluster module that's how it

00:15:06,320 --> 00:15:12,410
works it increments ports as you add

00:15:09,320 --> 00:15:15,260
workers so anyway so the problem is that

00:15:12,410 --> 00:15:18,950
of course ports are finite once you get

00:15:15,260 --> 00:15:21,140
up to 65,000 whatever you're out of

00:15:18,950 --> 00:15:22,520
ports you're done it's over so if the

00:15:21,140 --> 00:15:24,320
operating system happens to assign you a

00:15:22,520 --> 00:15:26,030
high enough port number to start with

00:15:24,320 --> 00:15:27,800
you'll exceed the range of valid points

00:15:26,030 --> 00:15:29,180
ports and your test will fail so the

00:15:27,800 --> 00:15:31,520
real problem here is what to call this

00:15:29,180 --> 00:15:33,950
kind of problem is that a range error is

00:15:31,520 --> 00:15:35,840
it an overflow error is an off by one

00:15:33,950 --> 00:15:37,760
error even we're gonna go with range

00:15:35,840 --> 00:15:40,579
overflow by one error

00:15:37,760 --> 00:15:42,230
just kidding kind of range overflow is

00:15:40,579 --> 00:15:43,610
fine it doesn't have to be by one it can

00:15:42,230 --> 00:15:45,860
be by two or five it doesn't matter

00:15:43,610 --> 00:15:48,680
anyway this is obviously a race

00:15:45,860 --> 00:15:52,040
condition too right I mean no wrong it's

00:15:48,680 --> 00:15:53,630
not a race condition pay attention you

00:15:52,040 --> 00:15:55,850
know we're gonna put this one off to the

00:15:53,630 --> 00:15:58,100
side kind of by itself like bacteria and

00:15:55,850 --> 00:16:00,740
biological taxonomy and we're going to

00:15:58,100 --> 00:16:03,920
add a hypothetical common ancestor of a

00:16:00,740 --> 00:16:06,170
rat and flakiness so we haven't found

00:16:03,920 --> 00:16:08,029
the fossilized evidence of it you you

00:16:06,170 --> 00:16:10,820
you people working on paleontology chol

00:16:08,029 --> 00:16:12,829
data please get on that anyway so that's

00:16:10,820 --> 00:16:14,959
eight causes of unreliable test and one

00:16:12,829 --> 00:16:16,940
made-up thing at the top there so the

00:16:14,959 --> 00:16:18,649
original and much shorter version of

00:16:16,940 --> 00:16:21,079
this talk that I gave at Waffle J s in

00:16:18,649 --> 00:16:23,329
San Francisco had ten causes in the

00:16:21,079 --> 00:16:26,120
title and I got stuck here but

00:16:23,329 --> 00:16:28,519
fortunately Max who max Goodman who

00:16:26,120 --> 00:16:30,589
helps organize woful GS mentioned two

00:16:28,519 --> 00:16:32,540
more causes when I proposed my talk in

00:16:30,589 --> 00:16:35,449
the first place so I straight up stole

00:16:32,540 --> 00:16:37,370
his first there's there's tests that

00:16:35,449 --> 00:16:40,070
affect global state this is kind of side

00:16:37,370 --> 00:16:43,430
effect so global state shenanigans which

00:16:40,070 --> 00:16:45,290
kind of sounds like a basketball team

00:16:43,430 --> 00:16:46,850
I think they have a pretty good shot the

00:16:45,290 --> 00:16:47,960
championship this year to be honest as

00:16:46,850 --> 00:16:51,110
long as they can get past the fighting

00:16:47,960 --> 00:16:53,480
growl backs anyway yes be glottal state

00:16:51,110 --> 00:16:55,160
shenanigans so I'm glad that that worked

00:16:53,480 --> 00:16:56,750
I wasn't sure that you know I wasn't

00:16:55,160 --> 00:16:57,890
sure this is gonna work in Denver let's

00:16:56,750 --> 00:17:00,080
that's the logo for the Golden State

00:16:57,890 --> 00:17:01,520
Warriors and and of course you know I

00:17:00,080 --> 00:17:03,380
had to reconfigure the letters and

00:17:01,520 --> 00:17:05,059
there's no B in Golden State warrior so

00:17:03,380 --> 00:17:07,720
I'd be glottal state rather than global

00:17:05,059 --> 00:17:11,089
state anyway cool glad it worked anyway

00:17:07,720 --> 00:17:13,010
so next and and vision a global state

00:17:11,089 --> 00:17:14,930
shenanigans next there's tests that

00:17:13,010 --> 00:17:16,220
sometimes run concurrently even though

00:17:14,930 --> 00:17:19,730
they cannot successfully run

00:17:16,220 --> 00:17:21,980
concurrently we'll call that not

00:17:19,730 --> 00:17:24,230
currently because we are seriously

00:17:21,980 --> 00:17:25,850
running out of ideas anyway these are

00:17:24,230 --> 00:17:28,010
both clearly race conditions but a

00:17:25,850 --> 00:17:29,630
special kind of race condition it's kind

00:17:28,010 --> 00:17:31,670
of like babies having babies but it's

00:17:29,630 --> 00:17:33,530
more like tests affecting other tests

00:17:31,670 --> 00:17:36,110
it's really just side effects but I

00:17:33,530 --> 00:17:38,179
couldn't think of that last night so now

00:17:36,110 --> 00:17:40,760
we draw a wonky line because there's not

00:17:38,179 --> 00:17:42,290
enough space and by slide 76 we're kind

00:17:40,760 --> 00:17:44,030
of running out of enthusiasm to like

00:17:42,290 --> 00:17:45,290
make it neat and figure there's a really

00:17:44,030 --> 00:17:48,590
good chance we're gonna cut this slide

00:17:45,290 --> 00:17:51,860
anyway so let's talk about conclusions

00:17:48,590 --> 00:17:54,230
we can draw from this exercise first

00:17:51,860 --> 00:17:55,910
whatever kind of unreliable tests you

00:17:54,230 --> 00:18:00,559
have the cause is going to be a race

00:17:55,910 --> 00:18:02,870
condition probably second nothing really

00:18:00,559 --> 00:18:04,460
it's just that that last one I know the

00:18:02,870 --> 00:18:06,800
numbering was kind of misleading and I'm

00:18:04,460 --> 00:18:08,630
really sorry about that but a quick

00:18:06,800 --> 00:18:11,210
bonus thing I didn't really talk about

00:18:08,630 --> 00:18:12,770
but maybe maybe jasmine will ask me

00:18:11,210 --> 00:18:15,380
about in the Q&A so I can blather about

00:18:12,770 --> 00:18:18,770
it for a minute or two windows I'm not

00:18:15,380 --> 00:18:20,840
dissing windows here but if 90% of your

00:18:18,770 --> 00:18:24,140
contributors develop on mac books and

00:18:20,840 --> 00:18:25,670
linux but like 60% of your users are on

00:18:24,140 --> 00:18:26,900
windows and i don't know what the actual

00:18:25,670 --> 00:18:28,550
numbers are but i swear to you that's

00:18:26,900 --> 00:18:31,400
what it feels like on node it feels like

00:18:28,550 --> 00:18:33,710
everyone who builds node uses Linux and

00:18:31,400 --> 00:18:35,960
Mac OS except for like four people and

00:18:33,710 --> 00:18:37,100
like more than half of are like you know

00:18:35,960 --> 00:18:38,690
especially if you look at like global

00:18:37,100 --> 00:18:40,850
statistics like everybody's running note

00:18:38,690 --> 00:18:44,210
on Windows you know that might actually

00:18:40,850 --> 00:18:46,070
cause some issues so now imagine how

00:18:44,210 --> 00:18:47,510
long it takes to debug those issues when

00:18:46,070 --> 00:18:49,640
you don't you know when you either don't

00:18:47,510 --> 00:18:52,640
have a Windows system available

00:18:49,640 --> 00:18:54,380
conveniently or your incompetence use

00:18:52,640 --> 00:18:55,940
Windows which both of those those

00:18:54,380 --> 00:18:56,820
descriptions have applied to me at

00:18:55,940 --> 00:19:00,300
different times

00:18:56,820 --> 00:19:01,800
at the same time in fact so it takes a

00:19:00,300 --> 00:19:03,570
really really long time to debug this

00:19:01,800 --> 00:19:05,610
issue so so windows issues are

00:19:03,570 --> 00:19:07,650
particularly problematic for us and note

00:19:05,610 --> 00:19:09,660
which so I would like to invite windows

00:19:07,650 --> 00:19:12,300
developers to please get involved in

00:19:09,660 --> 00:19:15,420
node core I will do anything I can to

00:19:12,300 --> 00:19:17,700
make it easier for you within reason buy

00:19:15,420 --> 00:19:20,400
you a pizza buy you a coffee I don't

00:19:17,700 --> 00:19:23,520
know something I just yeah help us

00:19:20,400 --> 00:19:27,330
please because like I suck at Windows

00:19:23,520 --> 00:19:30,780
okay so all right back to the amazing

00:19:27,330 --> 00:19:34,020
tax out of me now I could look at this

00:19:30,780 --> 00:19:35,760
slide all day but if there's any mercy

00:19:34,020 --> 00:19:38,370
in the heavens my time must be nearly up

00:19:35,760 --> 00:19:40,050
or something and we can unplug my laptop

00:19:38,370 --> 00:19:41,910
so you don't have to look at at it just

00:19:40,050 --> 00:19:43,200
because I'm looking at it but anyway

00:19:41,910 --> 00:19:44,370
thanks for your time and attention it

00:19:43,200 --> 00:19:46,680
means a lot to me and you're all awesome

00:19:44,370 --> 00:19:48,000
I wish I could actually walk out there

00:19:46,680 --> 00:19:49,170
and thank each and every one of you and

00:19:48,000 --> 00:19:50,610
actually looks like maybe I'll have time

00:19:49,170 --> 00:19:51,780
to do that I can just like thank you

00:19:50,610 --> 00:19:54,180
then I thank you

00:19:51,780 --> 00:20:09,270
then they thank you and you get the idea

00:19:54,180 --> 00:20:10,230
but anyway thanks thanks thank you so

00:20:09,270 --> 00:20:16,260
much what tell us a little bit about

00:20:10,230 --> 00:20:22,770
Windows ok there's no there's no more no

00:20:16,260 --> 00:20:26,700
more detail or is that it I mean the the

00:20:22,770 --> 00:20:28,620
people who build nodejs window compared

00:20:26,700 --> 00:20:31,440
to the people who use no GS Windows is

00:20:28,620 --> 00:20:33,570
underrepresented and and and that is

00:20:31,440 --> 00:20:35,250
something I would like to fix mm-hmm fix

00:20:33,570 --> 00:20:37,380
some other way than becoming windows

00:20:35,250 --> 00:20:38,700
developer myself but I'm I definitely am

00:20:37,380 --> 00:20:41,630
i dead now because I don't like Windows

00:20:38,700 --> 00:20:44,370
just I'm comfortable where I am and

00:20:41,630 --> 00:20:46,710
gotcha yeah you work at Microsoft yeah I

00:20:44,370 --> 00:20:48,990
use Windows primarily I do have a

00:20:46,710 --> 00:20:54,000
MacBook right now but you know I am a

00:20:48,990 --> 00:20:56,010
Windows person so when do you know how

00:20:54,000 --> 00:21:02,160
you have a flaky test and not a real

00:20:56,010 --> 00:21:04,530
failure I mean so the way I know is you

00:21:02,160 --> 00:21:07,350
know somewhere often a pull request will

00:21:04,530 --> 00:21:09,970
run continue in will run continuous

00:21:07,350 --> 00:21:12,310
integration on pull request will

00:21:09,970 --> 00:21:13,600
one or more failures someone will come

00:21:12,310 --> 00:21:17,500
along and rerun continuous integration

00:21:13,600 --> 00:21:20,020
and everything passes sometimes the

00:21:17,500 --> 00:21:22,330
Prada yeah so so I kind of I kind of

00:21:20,020 --> 00:21:24,820
focused on problems with the tests

00:21:22,330 --> 00:21:26,590
themselves of course you know sometimes

00:21:24,820 --> 00:21:27,910
it is in fact a bug in the code you know

00:21:26,590 --> 00:21:29,200
the race condition doesn't have to be in

00:21:27,910 --> 00:21:32,080
the test the race condition can be in

00:21:29,200 --> 00:21:33,700
the code and also something I left out

00:21:32,080 --> 00:21:35,440
is a lot of times the problem is in CI

00:21:33,700 --> 00:21:40,900
you know like the just weird

00:21:35,440 --> 00:21:42,220
configuration issues or whatever and the

00:21:40,900 --> 00:21:44,560
vexing thing is you never really know

00:21:42,220 --> 00:21:46,510
until you start digging into it and and

00:21:44,560 --> 00:21:48,790
you can you can burn through a lot of

00:21:46,510 --> 00:21:50,590
time doing that but it's totally worth

00:21:48,790 --> 00:21:55,780
it once you solve the problem you this

00:21:50,590 --> 00:21:59,520
kindly so how much time can a project of

00:21:55,780 --> 00:22:01,810
nodejs a size lose to aratus freakiest I

00:21:59,520 --> 00:22:05,440
mean I'd say that I've lost the last

00:22:01,810 --> 00:22:07,540
four years and there's a couple other

00:22:05,440 --> 00:22:11,620
people who focus on the flaky test too I

00:22:07,540 --> 00:22:15,820
mean um I mean so so you know no you

00:22:11,620 --> 00:22:18,760
know when node you know was first being

00:22:15,820 --> 00:22:22,780
developed you know you know by Ryan Dahl

00:22:18,760 --> 00:22:25,450
and others you know there were tests but

00:22:22,780 --> 00:22:27,100
you know it wasn't it wasn't test-driven

00:22:25,450 --> 00:22:29,440
development by anybody I mean there

00:22:27,100 --> 00:22:30,850
certainly wasn't you know and and it was

00:22:29,440 --> 00:22:32,530
only like a couple you know a few years

00:22:30,850 --> 00:22:34,540
ago that we that we started getting

00:22:32,530 --> 00:22:36,160
nightly coverage reports so that we have

00:22:34,540 --> 00:22:39,670
an idea of what's covered and what's not

00:22:36,160 --> 00:22:41,470
covered and I forgot what's the question

00:22:39,670 --> 00:22:44,530
here how much time can we lose yeah

00:22:41,470 --> 00:22:47,670
so just like so when so I joined around

00:22:44,530 --> 00:22:51,040
the time of the IO J's fork which was

00:22:47,670 --> 00:22:53,200
you know there was a dispute over the

00:22:51,040 --> 00:22:57,610
governance of the node project a dispute

00:22:53,200 --> 00:23:00,130
between a lot of the prolific

00:22:57,610 --> 00:23:02,430
contributors at the time and the

00:23:00,130 --> 00:23:04,930
corporate steward of the project

00:23:02,430 --> 00:23:08,380
eventually that issue was resolved and

00:23:04,930 --> 00:23:11,560
an IO j s basically became no js' they

00:23:08,380 --> 00:23:13,780
merged back together but I joined around

00:23:11,560 --> 00:23:18,790
time the IAS fork which was in 2015 if I

00:23:13,780 --> 00:23:20,410
remember correctly and you know I you

00:23:18,790 --> 00:23:22,000
know like the message that like the fork

00:23:20,410 --> 00:23:23,309
was trying to send was we want more

00:23:22,000 --> 00:23:25,289
contributors come and help and I

00:23:23,309 --> 00:23:27,990
no Jess user and so yeah sure I'll take

00:23:25,289 --> 00:23:29,730
a look at that and so I I did some

00:23:27,990 --> 00:23:31,499
documentation fixes or self added some

00:23:29,730 --> 00:23:32,999
missing commas or whatever to some text

00:23:31,499 --> 00:23:34,679
which is you know a great way to just

00:23:32,999 --> 00:23:36,179
get started figure out the process if

00:23:34,679 --> 00:23:40,139
you're if you're if you're if you're a

00:23:36,179 --> 00:23:42,360
grammar nerd and and what became quickly

00:23:40,139 --> 00:23:47,190
apparent was that the tests were just a

00:23:42,360 --> 00:23:49,529
dumpster fire at the time and and so you

00:23:47,190 --> 00:23:51,330
know I I figured well I can like you

00:23:49,529 --> 00:23:52,529
know like I can go through and like

00:23:51,330 --> 00:23:54,749
figure out what's wrong with each test

00:23:52,529 --> 00:23:56,730
one by one that'll just be like super

00:23:54,749 --> 00:23:58,590
unbelievably tedious in the time

00:23:56,730 --> 00:24:01,139
sinkhole but its value I can add to the

00:23:58,590 --> 00:24:02,759
project and it was super tedious and a

00:24:01,139 --> 00:24:04,830
sink over time and it was super valuable

00:24:02,759 --> 00:24:08,580
and like kind of much to my surprise

00:24:04,830 --> 00:24:10,379
like not too long after like spending I

00:24:08,580 --> 00:24:12,629
don't know like probably eighteen months

00:24:10,379 --> 00:24:13,980
to get like the the continuous

00:24:12,629 --> 00:24:17,580
integration to like occasionally be

00:24:13,980 --> 00:24:19,049
green to occasionally be passing because

00:24:17,580 --> 00:24:21,179
it never pass when I joined the project

00:24:19,049 --> 00:24:22,409
never it was like it was red and you

00:24:21,179 --> 00:24:23,369
know it was failing every time and

00:24:22,409 --> 00:24:24,450
people would look at the fatter you say

00:24:23,369 --> 00:24:26,879
oh yeah those are failures that we know

00:24:24,450 --> 00:24:28,409
about you can use merge the code which

00:24:26,879 --> 00:24:32,009
which then just meant that more failures

00:24:28,409 --> 00:24:34,470
just piled up right because anyway yeah

00:24:32,009 --> 00:24:36,360
so so like after 18 months of just

00:24:34,470 --> 00:24:38,820
basically working on tests and like I

00:24:36,360 --> 00:24:41,820
did like you know one one or two things

00:24:38,820 --> 00:24:44,730
and in the in the in the you know in the

00:24:41,820 --> 00:24:47,669
actual executable but like not a whole

00:24:44,730 --> 00:24:48,509
lot you know I was like oh I got invited

00:24:47,669 --> 00:24:50,039
to be on the technical steering

00:24:48,509 --> 00:24:54,840
committee because which is like a nice a

00:24:50,039 --> 00:24:58,679
nice sort of you know way to express

00:24:54,840 --> 00:24:59,340
that they valued that the tests were not

00:24:58,679 --> 00:25:04,619
broken

00:24:59,340 --> 00:25:06,450
and actually when when when node 4 was

00:25:04,619 --> 00:25:08,850
released which is the which which the

00:25:06,450 --> 00:25:11,460
thing I remember most about node.js 4.0

00:25:08,850 --> 00:25:13,320
is is everybody saying what is wrong

00:25:11,460 --> 00:25:15,960
with you can't you count because what

00:25:13,320 --> 00:25:20,519
happened is we went from nodejs 0.12 to

00:25:15,960 --> 00:25:22,470
no Jess 4.0 and this who has no idea why

00:25:20,519 --> 00:25:25,049
that happened I mean I would hope a lot

00:25:22,470 --> 00:25:27,419
of people because why would you care but

00:25:25,049 --> 00:25:29,190
the answer is that the IHS fork happened

00:25:27,419 --> 00:25:31,830
and I OGS is like we're not releasing 0

00:25:29,190 --> 00:25:34,019
dot whatever we're releasing 1.0 and now

00:25:31,830 --> 00:25:35,399
we were listed 2.0 now we're releasing

00:25:34,019 --> 00:25:37,229
3.0 and

00:25:35,399 --> 00:25:38,849
so as here at least four dots so when

00:25:37,229 --> 00:25:41,070
4.0 came around we didn't want to go

00:25:38,849 --> 00:25:43,979
back to 1.0 because if you type know -

00:25:41,070 --> 00:25:45,599
vert - V and you get 1.0 you don't know

00:25:43,979 --> 00:25:46,979
if you're running i oj S or if you're

00:25:45,599 --> 00:25:49,649
running you know this other version OHSO

00:25:46,979 --> 00:25:50,969
so you know integers are free like

00:25:49,649 --> 00:25:53,759
there's you know we're not gonna run out

00:25:50,969 --> 00:25:58,469
of them so just use four but you know

00:25:53,759 --> 00:26:02,070
people got like anyway the other thing I

00:25:58,469 --> 00:26:04,019
remember about it is is that the sort of

00:26:02,070 --> 00:26:05,399
all like the San Francisco folks who

00:26:04,019 --> 00:26:07,529
were involved at the time because I live

00:26:05,399 --> 00:26:09,659
in San Francisco we had a party to

00:26:07,529 --> 00:26:11,099
celebrate the merger and and everything

00:26:09,659 --> 00:26:13,379
they were like maybe like eight or

00:26:11,099 --> 00:26:19,200
twelve of us tops anyway the party was

00:26:13,379 --> 00:26:22,499
in my basement my we my my wife has a

00:26:19,200 --> 00:26:23,399
tiki bar and and that's where the you

00:26:22,499 --> 00:26:27,029
know in the basement that's where the

00:26:23,399 --> 00:26:31,320
party was and I just and I just remember

00:26:27,029 --> 00:26:33,539
that like like the the the just the be

00:26:31,320 --> 00:26:35,999
palpable relief in the room that the

00:26:33,539 --> 00:26:37,950
tests were now like only like mostly

00:26:35,999 --> 00:26:42,599
unreliable instead of completely useless

00:26:37,950 --> 00:26:44,609
was just you know was was was a really

00:26:42,599 --> 00:26:46,619
really nice really really valid really

00:26:44,609 --> 00:26:49,049
nice validation so I'm just talking

00:26:46,619 --> 00:26:51,299
about how like cool it is to be to be

00:26:49,049 --> 00:26:55,289
you know validated which you know just

00:26:51,299 --> 00:26:58,139
shows like how insecure I really am my

00:26:55,289 --> 00:26:59,279
self-esteem issues clearly so one more

00:26:58,139 --> 00:27:01,259
one last question

00:26:59,279 --> 00:27:04,349
how did that diagram that you showed

00:27:01,259 --> 00:27:05,849
what's the most common thing that you've

00:27:04,349 --> 00:27:07,289
seen oh god I have to look at the

00:27:05,849 --> 00:27:08,639
diagram let me think about that for a

00:27:07,289 --> 00:27:10,589
second oh okay

00:27:08,639 --> 00:27:12,299
so in node the most common thing is the

00:27:10,589 --> 00:27:14,580
arbitrary long time out because like

00:27:12,299 --> 00:27:16,649
like everybody who writes a test for the

00:27:14,580 --> 00:27:18,059
first time and doesn't has not like with

00:27:16,649 --> 00:27:19,259
you know most of the people who are

00:27:18,059 --> 00:27:21,239
writing tests and Note have not gone

00:27:19,259 --> 00:27:23,159
back and like fixed other people's

00:27:21,239 --> 00:27:27,869
broken tests or their own broken tests

00:27:23,159 --> 00:27:29,940
and so so you know everybody thinks that

00:27:27,869 --> 00:27:32,010
like the thing to do is like oh well you

00:27:29,940 --> 00:27:33,960
know I have this event

00:27:32,010 --> 00:27:35,880
and I need to make sure that it happens

00:27:33,960 --> 00:27:37,679
but I don't know how far in the future

00:27:35,880 --> 00:27:39,419
it's gonna happen but if I give it three

00:27:37,679 --> 00:27:40,830
seconds and it doesn't happen then you

00:27:39,419 --> 00:27:43,169
know it'll be and and of course you know

00:27:40,830 --> 00:27:45,660
our consumers integration has like you

00:27:43,169 --> 00:27:48,840
know or had until recently anyway

00:27:45,660 --> 00:27:52,410
Raspberry Pi one devices pi zero devices

00:27:48,840 --> 00:27:54,059
in fact until until this year and those

00:27:52,410 --> 00:27:57,480
things are cutting our resource

00:27:54,059 --> 00:27:59,880
constrained you know by design and yeah

00:27:57,480 --> 00:28:02,250
and and you know like I would go in and

00:27:59,880 --> 00:28:04,410
I would like you know remove the the set

00:28:02,250 --> 00:28:06,570
timeout and change it to like you know

00:28:04,410 --> 00:28:08,580
let's just say the you know the easiest

00:28:06,570 --> 00:28:11,220
thing to do when it's when this works is

00:28:08,580 --> 00:28:15,750
tool it is - it's a use process dot on

00:28:11,220 --> 00:28:16,620
and listen for the exit listener so in

00:28:15,750 --> 00:28:18,990
cases where that happened and like

00:28:16,620 --> 00:28:21,240
people who like have been on the project

00:28:18,990 --> 00:28:22,679
forever would be like I don't know if it

00:28:21,240 --> 00:28:24,450
doesn't happen inside of three seconds

00:28:22,679 --> 00:28:26,250
then then you know there's probably

00:28:24,450 --> 00:28:29,040
something else going on that's a problem

00:28:26,250 --> 00:28:31,559
like yeah so you know you're running it

00:28:29,040 --> 00:28:35,700
on a PI zero the other thing is is one

00:28:31,559 --> 00:28:39,510
of our one of our one of our hosts in in

00:28:35,700 --> 00:28:41,490
in continuous integration has like 64

00:28:39,510 --> 00:28:44,490
logical cores or something and that's

00:28:41,490 --> 00:28:46,200
how the test that node that the tests

00:28:44,490 --> 00:28:46,650
that get run in parallel in the in the

00:28:46,200 --> 00:28:49,200
test suite

00:28:46,650 --> 00:28:50,850
that's how would you look it counts how

00:28:49,200 --> 00:28:52,080
many logical cores are there and then

00:28:50,850 --> 00:28:55,799
that's how many tests it runs at one

00:28:52,080 --> 00:28:58,890
time I don't know why that machine

00:28:55,799 --> 00:29:01,980
thinks it has all that CPU it doesn't

00:28:58,890 --> 00:29:04,860
and so you know it's just run tries from

00:29:01,980 --> 00:29:07,110
way too many tests but like you know the

00:29:04,860 --> 00:29:08,429
test should not you know fail when that

00:29:07,110 --> 00:29:10,860
happens they should the test runner

00:29:08,429 --> 00:29:13,650
should timeout you know as a mention in

00:29:10,860 --> 00:29:15,780
the talk and so uh yeah so set timeout

00:29:13,650 --> 00:29:18,690
like with like some magic number is

00:29:15,780 --> 00:29:22,230
totally the thing that that that is

00:29:18,690 --> 00:29:23,910
there everywhere all the time yeah so

00:29:22,230 --> 00:29:24,980
that was a really really long way to say

00:29:23,910 --> 00:29:28,500
long timeout

00:29:24,980 --> 00:29:30,570
okay all right any other and the other

00:29:28,500 --> 00:29:32,700
really really brief yes/no questions I

00:29:30,570 --> 00:29:39,320
can ask answer with like you know 40

00:29:32,700 --> 00:29:39,320
minutes of monologue I don't know sorry

00:29:39,730 --> 00:29:44,480
this artifact why do our Museum I do

00:29:42,950 --> 00:29:47,930
museums have all these old dinosaur

00:29:44,480 --> 00:29:50,200
bones because aren't those the most of

00:29:47,930 --> 00:29:54,170
the bones and most museums are not real

00:29:50,200 --> 00:29:56,060
I've cured me here will you wait so a

00:29:54,170 --> 00:29:58,010
question was why do museums have old

00:29:56,060 --> 00:30:01,540
dinosaur bones because they can't afford

00:29:58,010 --> 00:30:01,540
new ones thank you

00:30:02,480 --> 00:30:15,779

YouTube URL: https://www.youtube.com/watch?v=TKDMya4bznw


