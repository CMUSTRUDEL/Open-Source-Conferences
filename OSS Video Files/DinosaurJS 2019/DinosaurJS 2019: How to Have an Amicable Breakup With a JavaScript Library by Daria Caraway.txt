Title: DinosaurJS 2019: How to Have an Amicable Breakup With a JavaScript Library by Daria Caraway
Publication date: 2019-08-19
Playlist: DinosaurJS 2019
Description: 
	DinosaurJS 2019: How to Have an Amicable Breakup With a JavaScript Library by Daria Caraway
Captions: 
	00:00:01,550 --> 00:00:06,490
[Applause]

00:00:04,100 --> 00:00:08,880
[Music]

00:00:06,490 --> 00:00:10,230
[Applause]

00:00:08,880 --> 00:00:14,540
[Music]

00:00:10,230 --> 00:00:17,340
[Applause]

00:00:14,540 --> 00:00:20,790
hi this is really cool I forgot I

00:00:17,340 --> 00:00:22,050
submitted that bio so that's fun

00:00:20,790 --> 00:00:23,670
yeah today I'm gonna be talking about

00:00:22,050 --> 00:00:27,150
how to have an amicable breakup with the

00:00:23,670 --> 00:00:28,170
JavaScript library I forgot I submitted

00:00:27,150 --> 00:00:30,329
the bio so here's a little bit more

00:00:28,170 --> 00:00:32,310
about me I went to the University of

00:00:30,329 --> 00:00:34,530
Southern California in Los Angeles where

00:00:32,310 --> 00:00:37,290
I discovered my love for ramen and soup

00:00:34,530 --> 00:00:40,110
dumplings I currently work at workday I

00:00:37,290 --> 00:00:43,350
live in Boulder and that is my cat so

00:00:40,110 --> 00:00:45,180
you don't have to look on Twitter today

00:00:43,350 --> 00:00:47,580
we want to talk about something that we

00:00:45,180 --> 00:00:50,970
probably all experienced which is dating

00:00:47,580 --> 00:00:52,830
and JavaScript libraries so I find that

00:00:50,970 --> 00:00:54,480
choosing a JavaScript library is a lot

00:00:52,830 --> 00:00:56,160
like dating in that the longer you

00:00:54,480 --> 00:01:00,120
commit yourself the Messier it is when

00:00:56,160 --> 00:01:01,350
you decide to break up in my experience

00:01:00,120 --> 00:01:03,120
I've seen a lot of JavaScript

00:01:01,350 --> 00:01:05,909
relationships that look something like

00:01:03,120 --> 00:01:07,799
this so you first find that library and

00:01:05,909 --> 00:01:09,540
you fall in love and you enter the

00:01:07,799 --> 00:01:11,070
honeymoon stage and everything is going

00:01:09,540 --> 00:01:12,930
great and you see all the ways that this

00:01:11,070 --> 00:01:15,630
library is gonna make your code cleaner

00:01:12,930 --> 00:01:17,189
and faster and better and smarter and

00:01:15,630 --> 00:01:18,780
you begin to use it everywhere and you

00:01:17,189 --> 00:01:20,520
begin to use it so much that you're

00:01:18,780 --> 00:01:22,679
attached at the hip you're using it

00:01:20,520 --> 00:01:25,350
forever for everything you're importing

00:01:22,679 --> 00:01:26,939
it in hundreds of files maybe and before

00:01:25,350 --> 00:01:29,100
you know it you've basically opened up a

00:01:26,939 --> 00:01:32,100
joint banking account and whether you

00:01:29,100 --> 00:01:35,280
like it or not your library is so

00:01:32,100 --> 00:01:39,200
intertwined with your code that your

00:01:35,280 --> 00:01:43,280
life is completely dependent on it and

00:01:39,200 --> 00:01:43,280
that and then something happens

00:01:43,300 --> 00:01:48,290
right and the whole time you're thinking

00:01:46,070 --> 00:01:49,760
like what could possibly go wrong we're

00:01:48,290 --> 00:01:52,550
living in the future what did we do

00:01:49,760 --> 00:01:54,200
before this library but something

00:01:52,550 --> 00:01:55,430
happens and you end up having to drop it

00:01:54,200 --> 00:01:57,770
like a hot potato

00:01:55,430 --> 00:01:59,660
and raise your hand if you've ever had

00:01:57,770 --> 00:02:02,600
to just jump ship on a JavaScript

00:01:59,660 --> 00:02:04,460
library that you were using it's pretty

00:02:02,600 --> 00:02:06,320
common right and there are so many

00:02:04,460 --> 00:02:08,119
different reasons why you might have to

00:02:06,320 --> 00:02:09,560
do that so a lot of times your product

00:02:08,119 --> 00:02:11,690
needs change and the library you're

00:02:09,560 --> 00:02:14,000
using doesn't fit those needs or maybe

00:02:11,690 --> 00:02:15,590
the library dumps you and it's being

00:02:14,000 --> 00:02:17,180
deprecated and you have to figure out a

00:02:15,590 --> 00:02:22,430
new solution and you better do it

00:02:17,180 --> 00:02:24,350
quickly so what now I've observed a

00:02:22,430 --> 00:02:27,500
couple different behaviors to this

00:02:24,350 --> 00:02:29,000
problem the first one some teams will

00:02:27,500 --> 00:02:30,890
just try to completely move on they'll

00:02:29,000 --> 00:02:33,140
rip off the band-aid if you will and

00:02:30,890 --> 00:02:34,940
they'll take the hit right now to just

00:02:33,140 --> 00:02:37,070
remove all of the references from that

00:02:34,940 --> 00:02:38,870
library all at once and if you've been

00:02:37,070 --> 00:02:41,330
in a committed relationship with that

00:02:38,870 --> 00:02:43,190
library that can take a lot of time and

00:02:41,330 --> 00:02:44,870
you have to talk to your managers or

00:02:43,190 --> 00:02:46,520
your stakeholders or your product owners

00:02:44,870 --> 00:02:47,930
and get the investment right now to

00:02:46,520 --> 00:02:50,570
spend that time to get rid of the

00:02:47,930 --> 00:02:54,020
library all at once another behavior

00:02:50,570 --> 00:02:55,880
I've seen which is funnier is that some

00:02:54,020 --> 00:02:58,220
teams will just refuse to let go I've

00:02:55,880 --> 00:03:00,110
seen a team actually fork a library to

00:02:58,220 --> 00:03:04,100
make the customizations that they needed

00:03:00,110 --> 00:03:06,590
to do and it worked and it was quick but

00:03:04,100 --> 00:03:08,150
it you've kind of painted yourself into

00:03:06,590 --> 00:03:09,800
a corner you've locked yourself in to

00:03:08,150 --> 00:03:11,540
the current dependencies of the library

00:03:09,800 --> 00:03:14,030
you've locked yourself into the current

00:03:11,540 --> 00:03:17,060
bugs of the library and so it can be a

00:03:14,030 --> 00:03:19,640
slippery slope the next one is what I'm

00:03:17,060 --> 00:03:21,440
calling ghosting the library so this is

00:03:19,640 --> 00:03:22,640
when you say like it's over there the

00:03:21,440 --> 00:03:25,459
code it's working

00:03:22,640 --> 00:03:27,709
I'm just gonna leave it over there we're

00:03:25,459 --> 00:03:29,930
just not gonna touch it and it's fine

00:03:27,709 --> 00:03:33,410
and just forget that we were ever using

00:03:29,930 --> 00:03:34,700
it in the first place and again it might

00:03:33,410 --> 00:03:36,019
be quicker but you never know when your

00:03:34,700 --> 00:03:38,060
product owner is gonna come back to you

00:03:36,019 --> 00:03:40,130
and be like hey if we could just you

00:03:38,060 --> 00:03:42,290
know implement something like over there

00:03:40,130 --> 00:03:44,090
it would be really really great and that

00:03:42,290 --> 00:03:44,830
library comes back to haunt you all over

00:03:44,090 --> 00:03:47,680
again

00:03:44,830 --> 00:03:49,910
and then lastly and maybe more commonly

00:03:47,680 --> 00:03:52,370
I've seen teams that'll try to remain

00:03:49,910 --> 00:03:53,840
friends with the library so they'll say

00:03:52,370 --> 00:03:54,709
like we're gonna remove it piece by

00:03:53,840 --> 00:03:56,060
piece and

00:03:54,709 --> 00:03:57,680
if you're touching this piece of the

00:03:56,060 --> 00:03:59,629
code you're responsible for ripping out

00:03:57,680 --> 00:04:01,489
that instance of the library and they'll

00:03:59,629 --> 00:04:04,430
just slowly phase it out of their lives

00:04:01,489 --> 00:04:06,140
it's a good in-between of short-term and

00:04:04,430 --> 00:04:07,939
long-term solutions but it can also

00:04:06,140 --> 00:04:09,950
leave your code a little bit fragmented

00:04:07,939 --> 00:04:13,069
and newcomers that are coming into your

00:04:09,950 --> 00:04:14,810
codebase can't define like one single

00:04:13,069 --> 00:04:19,699
pattern and so it can be a little bit

00:04:14,810 --> 00:04:22,550
confusing so how can we better prepare

00:04:19,699 --> 00:04:24,169
for that inevitable future breakup for

00:04:22,550 --> 00:04:26,030
me that idea starts at the beginning

00:04:24,169 --> 00:04:28,820
with a concept that I like to call

00:04:26,030 --> 00:04:30,889
speed-dating so speed-dating is when you

00:04:28,820 --> 00:04:32,210
prototype out multiple libraries early

00:04:30,889 --> 00:04:34,039
in order to make a more educated

00:04:32,210 --> 00:04:38,300
decision before you enter into a

00:04:34,039 --> 00:04:40,160
JavaScript relationship but since

00:04:38,300 --> 00:04:41,419
breakups are inevitable I also want to

00:04:40,160 --> 00:04:43,580
walk through a technique that allows us

00:04:41,419 --> 00:04:45,560
to easily bail on bad relationships

00:04:43,580 --> 00:04:47,900
which to me means being able to quickly

00:04:45,560 --> 00:04:49,970
switch out libraries and dependencies

00:04:47,900 --> 00:04:53,000
without sacrificing code quality or

00:04:49,970 --> 00:04:55,669
maintainability and lastly I want to

00:04:53,000 --> 00:04:58,789
talk about testing so what does it look

00:04:55,669 --> 00:05:00,470
like to write useful tests that won't

00:04:58,789 --> 00:05:02,750
change when you change the underlying

00:05:00,470 --> 00:05:06,320
implementation in order to prevent

00:05:02,750 --> 00:05:07,370
future mistakes with your tests so I

00:05:06,320 --> 00:05:08,599
like to start out these new

00:05:07,370 --> 00:05:10,159
relationships with the idea of

00:05:08,599 --> 00:05:12,050
speed-dating and again speed-dating is

00:05:10,159 --> 00:05:14,539
the concept of prototyping out multiple

00:05:12,050 --> 00:05:16,370
potential libraries early and either an

00:05:14,539 --> 00:05:18,440
integrated or an isolated environment

00:05:16,370 --> 00:05:21,710
and I find that speed-dating gives us a

00:05:18,440 --> 00:05:23,389
couple of things so for one it allows us

00:05:21,710 --> 00:05:26,659
to get to know the library a little bit

00:05:23,389 --> 00:05:28,250
better things like what does the public

00:05:26,659 --> 00:05:30,199
API look like and you can get a feel for

00:05:28,250 --> 00:05:32,750
that if you're integrating it for this

00:05:30,199 --> 00:05:35,509
prototype how it sits in your current

00:05:32,750 --> 00:05:37,159
environment it's also a way for us to

00:05:35,509 --> 00:05:39,500
conduct a little bit of market research

00:05:37,159 --> 00:05:41,599
so a lot of times you might not realize

00:05:39,500 --> 00:05:43,070
what solutions are out there until you

00:05:41,599 --> 00:05:45,259
start to go on a couple of these

00:05:43,070 --> 00:05:47,060
speed-dating rounds and maybe you find a

00:05:45,259 --> 00:05:48,880
new UX solution that's becoming standard

00:05:47,060 --> 00:05:51,169
that you had never seen before and

00:05:48,880 --> 00:05:53,750
something that I really appreciate about

00:05:51,169 --> 00:05:56,570
speed dating is that you can take it as

00:05:53,750 --> 00:05:58,370
some time to just learn it's a really

00:05:56,570 --> 00:05:59,960
good way to look at the source code of

00:05:58,370 --> 00:06:01,880
these different libraries that you're

00:05:59,960 --> 00:06:03,909
kind of going on dates with and just

00:06:01,880 --> 00:06:05,930
learn how other developers are

00:06:03,909 --> 00:06:06,529
implementing different solutions to

00:06:05,930 --> 00:06:08,089
similar

00:06:06,529 --> 00:06:09,619
problems what kind of design patterns

00:06:08,089 --> 00:06:11,809
they're using what kind of code styles

00:06:09,619 --> 00:06:13,789
they like to use and figure out what of

00:06:11,809 --> 00:06:17,419
those do you want to incorporate in your

00:06:13,789 --> 00:06:18,619
own application the other half of

00:06:17,419 --> 00:06:21,499
speed-dating is that it's an opportunity

00:06:18,619 --> 00:06:22,939
for us to get to know ourselves so what

00:06:21,499 --> 00:06:24,589
our expectations for things around

00:06:22,939 --> 00:06:27,529
performance or maintainability or

00:06:24,589 --> 00:06:28,879
customization and while you're on those

00:06:27,529 --> 00:06:30,739
speed dates and you're finding out what

00:06:28,879 --> 00:06:32,809
all is out there what of those features

00:06:30,739 --> 00:06:35,539
is your app going to need now but also

00:06:32,809 --> 00:06:36,709
in the future and what's really really

00:06:35,539 --> 00:06:38,179
cool is that because you're building

00:06:36,709 --> 00:06:40,309
these prototypes you have something

00:06:38,179 --> 00:06:42,409
tangible to share with people so if you

00:06:40,309 --> 00:06:44,599
find a new design pattern or you find a

00:06:42,409 --> 00:06:45,949
new UX model that you had never seen

00:06:44,599 --> 00:06:47,659
before you can take it back to your

00:06:45,949 --> 00:06:49,849
product donors or your designers and

00:06:47,659 --> 00:06:52,549
show them and kind of propose a solution

00:06:49,849 --> 00:06:54,529
to add to bring value to your users and

00:06:52,549 --> 00:06:57,229
you can also take these prototypes back

00:06:54,529 --> 00:06:59,479
to your teams and create a more informed

00:06:57,229 --> 00:07:03,379
discussion about what libraries you want

00:06:59,479 --> 00:07:05,209
to be up taking in the future so after

00:07:03,379 --> 00:07:06,769
going on a variety of dates and trying

00:07:05,209 --> 00:07:10,309
out different libraries we can make that

00:07:06,769 --> 00:07:12,439
more informed decision and it'll

00:07:10,309 --> 00:07:14,659
hopefully allow us to get a longer shelf

00:07:12,439 --> 00:07:17,899
life out of these libraries it won't

00:07:14,659 --> 00:07:19,219
make the break-up any easier but

00:07:17,899 --> 00:07:23,659
hopefully it'll make it so we don't have

00:07:19,219 --> 00:07:26,299
to do it as often but like we said

00:07:23,659 --> 00:07:27,979
breakups are inevitable and we want to

00:07:26,299 --> 00:07:30,529
be able to swiftly bail on bad

00:07:27,979 --> 00:07:33,019
relationships so ideally we want to

00:07:30,529 --> 00:07:34,849
switch out libraries without sacrificing

00:07:33,019 --> 00:07:36,589
code clarity or maintainability like a

00:07:34,849 --> 00:07:39,049
lot of those behaviors that we discussed

00:07:36,589 --> 00:07:43,429
earlier and here's where I like to call

00:07:39,049 --> 00:07:44,389
wrapper components are gonna come in so

00:07:43,429 --> 00:07:46,429
you can think of these wrapper

00:07:44,389 --> 00:07:48,619
components like the prenuptial agreement

00:07:46,429 --> 00:07:51,649
between your code and the third-party

00:07:48,619 --> 00:07:53,449
library now that we know what our code

00:07:51,649 --> 00:07:55,699
needs we can create a contract to fit

00:07:53,449 --> 00:07:57,709
our application specific use cases and

00:07:55,699 --> 00:07:59,989
normalize that interface into a wrapper

00:07:57,709 --> 00:08:01,669
and this agreement is going to protect

00:07:59,989 --> 00:08:06,739
you in future breakups and I'll show you

00:08:01,669 --> 00:08:08,989
how so here's my demo application it

00:08:06,739 --> 00:08:10,369
allows you to discover cute pets thank

00:08:08,989 --> 00:08:12,469
you to everyone who responded to me on

00:08:10,369 --> 00:08:14,419
Twitter I built a Google cloud function

00:08:12,469 --> 00:08:18,529
that serves a random pet so hopefully

00:08:14,419 --> 00:08:19,580
you see them up here today as is my demo

00:08:18,529 --> 00:08:21,200
application is used

00:08:19,580 --> 00:08:23,870
the popular react component library

00:08:21,200 --> 00:08:25,580
called Gromit so grommet is on the

00:08:23,870 --> 00:08:26,750
lighter side of component libraries

00:08:25,580 --> 00:08:28,190
compared to a lot of the more

00:08:26,750 --> 00:08:30,590
full-featured solutions that are

00:08:28,190 --> 00:08:32,960
available in the marketplace and the app

00:08:30,590 --> 00:08:35,330
is also using the popular HTTP library

00:08:32,960 --> 00:08:38,390
called super agent to make HTTP calls to

00:08:35,330 --> 00:08:40,640
get a random pet and the functionality

00:08:38,390 --> 00:08:42,470
is really simple so on the left you have

00:08:40,640 --> 00:08:44,510
a button sidebar you can get a random

00:08:42,470 --> 00:08:46,010
pet from the google cloud function you

00:08:44,510 --> 00:08:47,990
can favorite that pet and it will show

00:08:46,010 --> 00:08:50,510
up in a card on the right side and then

00:08:47,990 --> 00:08:52,130
you can also clear your favorites it's

00:08:50,510 --> 00:08:53,990
worth noting that my demo and all my

00:08:52,130 --> 00:08:56,540
code snippets are in typescript and

00:08:53,990 --> 00:08:58,460
react but this pattern is completely

00:08:56,540 --> 00:09:00,440
language out agnostic it's completely

00:08:58,460 --> 00:09:05,870
framework agnostic it's for anyone who's

00:09:00,440 --> 00:09:07,940
using libraries so taking a closer look

00:09:05,870 --> 00:09:09,740
at the buttons on my page here I've

00:09:07,940 --> 00:09:13,580
written a button wrapper around the

00:09:09,740 --> 00:09:16,460
Gromit library button component at the

00:09:13,580 --> 00:09:18,830
top we have the interface that is that

00:09:16,460 --> 00:09:20,690
prenuptial agreement that contract

00:09:18,830 --> 00:09:22,490
between the rest of my application and

00:09:20,690 --> 00:09:23,900
this component and if you're not

00:09:22,490 --> 00:09:27,440
familiar with typescript this is a

00:09:23,900 --> 00:09:28,790
fairly binding contract so if you try to

00:09:27,440 --> 00:09:30,470
pass in something to this component

00:09:28,790 --> 00:09:32,600
that's not on this list you're gonna get

00:09:30,470 --> 00:09:34,310
an error if you don't pass something

00:09:32,600 --> 00:09:36,230
that is required on this list which in

00:09:34,310 --> 00:09:39,620
this case is the onclick handler you

00:09:36,230 --> 00:09:41,450
will also get an error underneath that I

00:09:39,620 --> 00:09:43,070
have my button class component and if

00:09:41,450 --> 00:09:44,720
you're familiar with react I know that

00:09:43,070 --> 00:09:47,780
this is not the hottest latest and

00:09:44,720 --> 00:09:49,280
greatest way to create components but I

00:09:47,780 --> 00:09:50,690
figured that the classes were a little

00:09:49,280 --> 00:09:54,350
bit more relatable to people without

00:09:50,690 --> 00:09:57,260
react experience and the class component

00:09:54,350 --> 00:09:58,850
is super simple so in react in the class

00:09:57,260 --> 00:10:00,140
components you have a public render

00:09:58,850 --> 00:10:02,390
function and all that render function

00:10:00,140 --> 00:10:04,730
does is return something that you want

00:10:02,390 --> 00:10:07,010
to render on the screen so in this case

00:10:04,730 --> 00:10:09,290
this component is just rendering that

00:10:07,010 --> 00:10:12,010
Gromit button with all of the inputs

00:10:09,290 --> 00:10:14,660
that we had taken from our contract and

00:10:12,010 --> 00:10:16,130
the gromit button is fairly customizable

00:10:14,660 --> 00:10:18,770
because it's built for such a wide

00:10:16,130 --> 00:10:21,380
audience of people it's meant for a wide

00:10:18,770 --> 00:10:23,270
variety of use cases but knowing myself

00:10:21,380 --> 00:10:25,310
I know that my application wants to have

00:10:23,270 --> 00:10:26,960
standardized buttons the buttons are

00:10:25,310 --> 00:10:31,850
either going to have an icon or a label

00:10:26,960 --> 00:10:33,250
or both and so I've put that here in my

00:10:31,850 --> 00:10:34,930
wrapper contract

00:10:33,250 --> 00:10:37,089
so I've isolated this rapper to be just

00:10:34,930 --> 00:10:39,189
exactly what my application needs and

00:10:37,089 --> 00:10:40,569
made it really obvious for developers in

00:10:39,189 --> 00:10:42,069
the future they don't have to go to the

00:10:40,569 --> 00:10:44,079
grommet documentation and figure out

00:10:42,069 --> 00:10:45,910
what all the inputs do they don't have

00:10:44,079 --> 00:10:47,079
to read all of the different things to

00:10:45,910 --> 00:10:49,360
make the button look like how you want

00:10:47,079 --> 00:10:51,339
it to look when in reality all they want

00:10:49,360 --> 00:10:52,720
is a button that looks and feels just

00:10:51,339 --> 00:10:56,079
like all the other buttons in your

00:10:52,720 --> 00:10:57,730
application and since I did some speed

00:10:56,079 --> 00:10:59,680
dating with various library buttons I

00:10:57,730 --> 00:11:01,569
also have a feel for what tends to

00:10:59,680 --> 00:11:04,060
differ between different libraries that

00:11:01,569 --> 00:11:05,230
have buttons and I can look at how

00:11:04,060 --> 00:11:07,600
different libraries have built their

00:11:05,230 --> 00:11:11,379
api's and decide which one is best for

00:11:07,600 --> 00:11:12,610
my application so for example while

00:11:11,379 --> 00:11:14,170
looking into different component

00:11:12,610 --> 00:11:17,740
libraries I noticed that there were kind

00:11:14,170 --> 00:11:20,560
of two main api's for buttons in react

00:11:17,740 --> 00:11:23,079
on the left is that same grommet wrapper

00:11:20,560 --> 00:11:25,660
and you'll notice that the icon and the

00:11:23,079 --> 00:11:27,490
label the label are being passed in as

00:11:25,660 --> 00:11:30,250
input props just like all of the other

00:11:27,490 --> 00:11:31,839
inputs to this button component on the

00:11:30,250 --> 00:11:34,689
right is a button wrapper around

00:11:31,839 --> 00:11:35,949
material UI material UI is a component

00:11:34,689 --> 00:11:38,769
library built on top of Google's

00:11:35,949 --> 00:11:40,600
material design material UI favors an

00:11:38,769 --> 00:11:42,339
API where you pass an icon and a label

00:11:40,600 --> 00:11:43,779
as children so if you're coming from an

00:11:42,339 --> 00:11:46,540
angular background this is similar to

00:11:43,779 --> 00:11:48,370
doing transclusion or content projection

00:11:46,540 --> 00:11:49,930
but basically all this is saying is that

00:11:48,370 --> 00:11:51,430
it doesn't care that it's an icon it

00:11:49,930 --> 00:11:53,290
doesn't care that it's a label it's

00:11:51,430 --> 00:11:55,149
gonna take whatever you passed into the

00:11:53,290 --> 00:11:57,189
child of this button and just render it

00:11:55,149 --> 00:12:01,139
in the button in the Dom so it's a

00:11:57,189 --> 00:12:04,750
little bit more it's a little bit more

00:12:01,139 --> 00:12:05,829
what's the right word generic you can

00:12:04,750 --> 00:12:08,559
pass in whatever you want it doesn't

00:12:05,829 --> 00:12:10,660
have to be an icon or a label and both

00:12:08,559 --> 00:12:11,559
styles are completely valid approaches

00:12:10,660 --> 00:12:13,629
so different people have different

00:12:11,559 --> 00:12:16,449
opinions on when they might use which

00:12:13,629 --> 00:12:18,550
one but one of the benefits of these

00:12:16,449 --> 00:12:20,709
wrappers is that you can decide which

00:12:18,550 --> 00:12:22,480
API you like you can decide which code

00:12:20,709 --> 00:12:25,420
style you want to interface with as a

00:12:22,480 --> 00:12:27,250
developer and we can standardize that

00:12:25,420 --> 00:12:29,639
across the application and the library

00:12:27,250 --> 00:12:33,699
doesn't have to dictate that code style

00:12:29,639 --> 00:12:35,470
so for you can notice that these are

00:12:33,699 --> 00:12:38,949
these are very slightly different in the

00:12:35,470 --> 00:12:40,839
actual button component but the contract

00:12:38,949 --> 00:12:42,459
between the two is exactly the same so

00:12:40,839 --> 00:12:44,139
the rest of the application doesn't need

00:12:42,459 --> 00:12:45,670
to care that this library preferred it

00:12:44,139 --> 00:12:46,320
this way and that library preferred it

00:12:45,670 --> 00:12:48,240
this way

00:12:46,320 --> 00:12:50,340
and in my demo application I preferred

00:12:48,240 --> 00:12:52,170
passing the inputs as props kind of like

00:12:50,340 --> 00:12:53,970
the grommet one because I want it to I

00:12:52,170 --> 00:12:57,750
wanted it to be more standardized across

00:12:53,970 --> 00:12:59,520
the application and this concept can

00:12:57,750 --> 00:13:01,290
also work for service library so it's

00:12:59,520 --> 00:13:02,850
not just four components here I've

00:13:01,290 --> 00:13:05,850
written an API wrapper on the popular

00:13:02,850 --> 00:13:08,430
HTTP library super agent and the wrapper

00:13:05,850 --> 00:13:10,620
contract is incredibly simple because

00:13:08,430 --> 00:13:12,630
rest is already incredibly standardized

00:13:10,620 --> 00:13:14,550
but this time I can consolidate the

00:13:12,630 --> 00:13:16,380
logic that I need that I know needs to

00:13:14,550 --> 00:13:18,350
happen with every HTTP call so things

00:13:16,380 --> 00:13:21,150
like JSON serialization deserialization

00:13:18,350 --> 00:13:22,620
or if you have complex authentication

00:13:21,150 --> 00:13:24,870
that has to go out with every call and

00:13:22,620 --> 00:13:26,730
now anyone in my app who needs to make

00:13:24,870 --> 00:13:28,050
an HTTP call only has to worry about the

00:13:26,730 --> 00:13:32,820
things that differ between the calls

00:13:28,050 --> 00:13:34,560
themselves and lastly sometimes after

00:13:32,820 --> 00:13:36,120
speed dating you know you're dating

00:13:34,560 --> 00:13:37,650
around a couple libraries and you

00:13:36,120 --> 00:13:39,420
realize that just no one is good enough

00:13:37,650 --> 00:13:42,200
for you so you decide to just build the

00:13:39,420 --> 00:13:44,400
thing yourself so in my application

00:13:42,200 --> 00:13:46,050
grommet didn't have a card that I was

00:13:44,400 --> 00:13:47,730
super happy with so I decided to just

00:13:46,050 --> 00:13:49,860
build one and it's really simple it's

00:13:47,730 --> 00:13:52,950
just this div has a box shadow so it's

00:13:49,860 --> 00:13:54,780
incredibly fancy and this component is

00:13:52,950 --> 00:13:58,830
gonna serve the exact same purpose as

00:13:54,780 --> 00:14:00,690
our wrappers the interface is gonna live

00:13:58,830 --> 00:14:02,040
as that contract between the rest of our

00:14:00,690 --> 00:14:04,320
application and this particular

00:14:02,040 --> 00:14:05,700
functionality as well as normalize the

00:14:04,320 --> 00:14:08,250
behavior that we know is standard across

00:14:05,700 --> 00:14:10,800
the application so in my app I want to

00:14:08,250 --> 00:14:12,660
standardize these cards to have an image

00:14:10,800 --> 00:14:14,190
on top and the text on the bottom and I

00:14:12,660 --> 00:14:14,940
want all the cards in this application

00:14:14,190 --> 00:14:17,040
to look the same

00:14:14,940 --> 00:14:20,130
so I've normalized that here to this

00:14:17,040 --> 00:14:22,410
wrapper and what's really cool is in the

00:14:20,130 --> 00:14:24,270
future if I ever you know continue to go

00:14:22,410 --> 00:14:26,190
on more speed dates and I find a library

00:14:24,270 --> 00:14:28,590
that I become really happy with all I

00:14:26,190 --> 00:14:30,210
have to do is render that library in

00:14:28,590 --> 00:14:31,880
this return function inside of this

00:14:30,210 --> 00:14:34,320
component as long as I don't touch that

00:14:31,880 --> 00:14:35,610
contract the rest of my application

00:14:34,320 --> 00:14:40,800
shouldn't have to care about the

00:14:35,610 --> 00:14:43,140
difference and what about test tests so

00:14:40,800 --> 00:14:44,520
one of the biggest pains I find when

00:14:43,140 --> 00:14:47,070
you're switching out different libraries

00:14:44,520 --> 00:14:49,140
is not only did you break all of your

00:14:47,070 --> 00:14:50,640
application not only do you have to go

00:14:49,140 --> 00:14:52,080
find and replace like hundreds of

00:14:50,640 --> 00:14:54,120
imports which if you've ever done that

00:14:52,080 --> 00:14:56,820
is the worst job anyone can ever ask you

00:14:54,120 --> 00:14:59,040
to do but maybe you also have hundreds

00:14:56,820 --> 00:15:00,780
of failing unit tests right and maybe on

00:14:59,040 --> 00:15:02,220
meet those failing unit tests you

00:15:00,780 --> 00:15:04,320
actually broke something in your

00:15:02,220 --> 00:15:06,240
application but while you're just kind

00:15:04,320 --> 00:15:08,400
of like mind-numbingly mind-numbing ly

00:15:06,240 --> 00:15:09,780
trying to fix all of these errors you

00:15:08,400 --> 00:15:12,720
might just glance over the fact that

00:15:09,780 --> 00:15:13,950
something was actually broken and so the

00:15:12,720 --> 00:15:15,540
key to writing tests that can survive

00:15:13,950 --> 00:15:17,220
the break-up is to really just make sure

00:15:15,540 --> 00:15:18,930
that we're not testing implementation

00:15:17,220 --> 00:15:20,790
details because at the end of the day

00:15:18,930 --> 00:15:22,860
the library that you use is just an

00:15:20,790 --> 00:15:24,360
implementation detail the users don't

00:15:22,860 --> 00:15:25,800
care what library you're using your

00:15:24,360 --> 00:15:27,750
application shouldn't care what library

00:15:25,800 --> 00:15:31,800
using and your tests definitely

00:15:27,750 --> 00:15:33,330
shouldn't either so looking at my button

00:15:31,800 --> 00:15:34,650
sidebar component we can see exactly

00:15:33,330 --> 00:15:36,540
what we want to test about this

00:15:34,650 --> 00:15:39,060
component all the render function does

00:15:36,540 --> 00:15:41,190
here is render three button wrappers

00:15:39,060 --> 00:15:45,030
onto the screen with varying on click

00:15:41,190 --> 00:15:47,010
handlers labels and icons and one really

00:15:45,030 --> 00:15:48,930
helpful pattern is to use test IDs as

00:15:47,010 --> 00:15:50,490
selectors so you'll notice that all of

00:15:48,930 --> 00:15:52,440
my implementations of this button

00:15:50,490 --> 00:15:55,230
component pass in a unique testing ID

00:15:52,440 --> 00:15:57,180
and that testing ID actually gets

00:15:55,230 --> 00:16:00,240
drilled down to the button in the Dom

00:15:57,180 --> 00:16:02,250
via a data attribute and this is because

00:16:00,240 --> 00:16:04,380
if you're using something like CSS class

00:16:02,250 --> 00:16:06,660
names or a particular Dom structure in

00:16:04,380 --> 00:16:07,860
order to test your application those

00:16:06,660 --> 00:16:09,390
things are going to be really tightly

00:16:07,860 --> 00:16:10,950
coupled with your library so when you

00:16:09,390 --> 00:16:15,420
switch out your library all of your

00:16:10,950 --> 00:16:16,740
tests are gonna break so in these tasks

00:16:15,420 --> 00:16:18,480
we can assert everything that we need

00:16:16,740 --> 00:16:19,980
you about the button sidebar without

00:16:18,480 --> 00:16:22,590
having to assume anything about the

00:16:19,980 --> 00:16:24,390
button itself we can use the custom test

00:16:22,590 --> 00:16:28,380
ID to assert on the Dom and trigger

00:16:24,390 --> 00:16:29,730
click events and it'll test everything

00:16:28,380 --> 00:16:31,230
that the user actually cares about

00:16:29,730 --> 00:16:33,000
because again the user doesn't care that

00:16:31,230 --> 00:16:34,470
I'm using a grommet button the user just

00:16:33,000 --> 00:16:38,880
cares that they can do whatever the

00:16:34,470 --> 00:16:40,410
button is trying to do now as my

00:16:38,880 --> 00:16:41,760
application grows because I know it's

00:16:40,410 --> 00:16:43,440
gonna be really hot because like

00:16:41,760 --> 00:16:45,690
everyone wants to discover cute pets

00:16:43,440 --> 00:16:48,060
right so I'm gonna move to a more

00:16:45,690 --> 00:16:50,610
full-featured component library and I've

00:16:48,060 --> 00:16:54,000
decided to go with material UI it has a

00:16:50,610 --> 00:16:56,460
lot more complex components that you can

00:16:54,000 --> 00:16:57,780
use and I've also decided that I tried

00:16:56,460 --> 00:16:59,880
out super-agent because just cuz I've

00:16:57,780 --> 00:17:01,380
never used it before but right now it's

00:16:59,880 --> 00:17:03,600
just taking up space in my bundle all

00:17:01,380 --> 00:17:04,829
I'm trying to do is make HTTP calls so

00:17:03,600 --> 00:17:07,680
I'm gonna go ahead and also dump

00:17:04,829 --> 00:17:10,220
super-agent and I'm gonna show you that

00:17:07,680 --> 00:17:10,220
break up live

00:17:10,320 --> 00:17:20,790
so that should go well so here's my

00:17:17,730 --> 00:17:23,190
application again you can get random

00:17:20,790 --> 00:17:24,660
pets from the Google cloud function it

00:17:23,190 --> 00:17:29,670
takes a little bit the first time this

00:17:24,660 --> 00:17:31,080
is Olly whoever all he belongs to you

00:17:29,670 --> 00:17:33,690
can save them on the right side you can

00:17:31,080 --> 00:17:35,670
get random pets you can clear out your

00:17:33,690 --> 00:17:37,320
favorites and I want to favorite Jack

00:17:35,670 --> 00:17:38,880
and my favorite feature of my

00:17:37,320 --> 00:17:40,860
application is that if you click this

00:17:38,880 --> 00:17:44,430
little cat takes you to the Boulder

00:17:40,860 --> 00:17:46,170
Humane Society adoption page and really

00:17:44,430 --> 00:17:49,500
coincidentally there's a cat for

00:17:46,170 --> 00:17:51,000
adoption that has my last name so this

00:17:49,500 --> 00:17:52,530
was meant to be in case you came to

00:17:51,000 --> 00:17:56,280
dinosaur rjs and you're trying to leave

00:17:52,530 --> 00:17:57,860
with a cat the Boulder Humane Society is

00:17:56,280 --> 00:17:59,790
here for you

00:17:57,860 --> 00:18:01,530
but drilling into the code a little

00:17:59,790 --> 00:18:03,330
deeper so I ran all my tests ahead of

00:18:01,530 --> 00:18:06,540
time just to prove to everyone that they

00:18:03,330 --> 00:18:07,980
pass here's my button component that

00:18:06,540 --> 00:18:11,010
same one that I had showed off earlier

00:18:07,980 --> 00:18:13,290
and right now it's using the grommet

00:18:11,010 --> 00:18:15,600
button so for the sake of time down

00:18:13,290 --> 00:18:17,790
below I have the implementation of the

00:18:15,600 --> 00:18:20,370
material UI button and I'm gonna throw

00:18:17,790 --> 00:18:22,620
it into my render function instead of

00:18:20,370 --> 00:18:25,980
using grommet I'm gonna use material UI

00:18:22,620 --> 00:18:27,780
and so again we did a compare and

00:18:25,980 --> 00:18:29,730
contrast the api's are ever so slightly

00:18:27,780 --> 00:18:31,500
different but you can imagine even the

00:18:29,730 --> 00:18:33,390
five buttons on the page if I had to go

00:18:31,500 --> 00:18:35,370
and change out this API for every single

00:18:33,390 --> 00:18:38,700
button that's already a job that I don't

00:18:35,370 --> 00:18:40,440
want to do but in this example I haven't

00:18:38,700 --> 00:18:42,330
touched that contract that prenuptial

00:18:40,440 --> 00:18:44,490
agreement it's solid right and so the

00:18:42,330 --> 00:18:47,390
rest of my application doesn't know that

00:18:44,490 --> 00:18:50,580
I've just changed out this button

00:18:47,390 --> 00:18:53,460
similarly this is my API utility that's

00:18:50,580 --> 00:18:55,590
using super agent down below I have an

00:18:53,460 --> 00:18:58,500
implementation just using the native

00:18:55,590 --> 00:19:00,570
JavaScript fetch so I'm gonna go ahead

00:18:58,500 --> 00:19:02,040
and just dump super agent and eventually

00:19:00,570 --> 00:19:04,920
I'll take it out of my package JSON I

00:19:02,040 --> 00:19:07,260
can get out of my bundle altogether but

00:19:04,920 --> 00:19:09,540
again the function should signatures

00:19:07,260 --> 00:19:11,790
haven't changed and it all they're all

00:19:09,540 --> 00:19:14,550
it's doing is making HTTP call so it's

00:19:11,790 --> 00:19:16,380
really simple right but the actual

00:19:14,550 --> 00:19:18,060
syntax for how you do that with fetch

00:19:16,380 --> 00:19:19,170
and super agent just very

00:19:18,060 --> 00:19:21,300
ever-so-slightly

00:19:19,170 --> 00:19:23,059
and if you were a developer again and

00:19:21,300 --> 00:19:24,409
you had to go and change every single

00:19:23,059 --> 00:19:30,759
should be call you're making like you

00:19:24,409 --> 00:19:33,440
might just walk out and then very lastly

00:19:30,759 --> 00:19:36,169
what's cool about material UI is they

00:19:33,440 --> 00:19:38,570
actually do have a card component that I

00:19:36,169 --> 00:19:39,740
like so for the sake of consistency I'm

00:19:38,570 --> 00:19:41,299
going to go ahead and get rid of the

00:19:39,740 --> 00:19:44,389
card component that I made even though

00:19:41,299 --> 00:19:46,759
it's beautiful with the Box shadow so

00:19:44,389 --> 00:19:48,320
down below I have the material UI

00:19:46,759 --> 00:19:52,059
implementation I'm going to get rid of

00:19:48,320 --> 00:19:56,450
my single div and I'm just gonna import

00:19:52,059 --> 00:19:58,999
know all the material UI things and so

00:19:56,450 --> 00:20:00,409
this implementation is wildly different

00:19:58,999 --> 00:20:03,740
from the one that I had before and this

00:20:00,409 --> 00:20:05,929
is because material UI has this this API

00:20:03,740 --> 00:20:09,110
where you can build up complex cards

00:20:05,929 --> 00:20:11,480
with other card building blocks so in

00:20:09,110 --> 00:20:13,519
this example I have my card parent I'm

00:20:11,480 --> 00:20:15,230
using the building blocks to build up my

00:20:13,519 --> 00:20:16,639
cards so this is the card media building

00:20:15,230 --> 00:20:19,249
block which is gonna display an image

00:20:16,639 --> 00:20:20,869
this is the card content building block

00:20:19,249 --> 00:20:23,869
which in my case is going to display my

00:20:20,869 --> 00:20:25,549
text and so even more like if you're

00:20:23,869 --> 00:20:27,529
developers were going around and dare I

00:20:25,549 --> 00:20:30,350
say copying and pasting that div all

00:20:27,529 --> 00:20:31,580
around your application to get cards to

00:20:30,350 --> 00:20:33,830
render in various pieces of your

00:20:31,580 --> 00:20:35,240
application now every single one of

00:20:33,830 --> 00:20:37,129
those developers would have to go and

00:20:35,240 --> 00:20:39,590
read the material UI documentation and

00:20:37,129 --> 00:20:42,080
figure out what is a card media what is

00:20:39,590 --> 00:20:43,820
a card content just to get rid of the

00:20:42,080 --> 00:20:48,139
one component that you had been using

00:20:43,820 --> 00:20:50,600
earlier and there's a pattern forming I

00:20:48,139 --> 00:20:52,369
haven't changed my contract right so my

00:20:50,600 --> 00:20:54,230
application doesn't know the difference

00:20:52,369 --> 00:20:57,409
between this vastly different

00:20:54,230 --> 00:20:59,119
implementation and react has been hot

00:20:57,409 --> 00:21:00,710
with hot loading in the background so

00:20:59,119 --> 00:21:02,929
I'll refresh it just for good measure

00:21:00,710 --> 00:21:06,409
but I've just changed everything about

00:21:02,929 --> 00:21:08,629
my application and everything still just

00:21:06,409 --> 00:21:11,090
works so it can make an HTTP call

00:21:08,629 --> 00:21:13,129
without using super agent all of the

00:21:11,090 --> 00:21:15,619
buttons are now material UI buttons

00:21:13,129 --> 00:21:16,999
instead of grommet buttons you can still

00:21:15,619 --> 00:21:19,039
get your random pet you can still

00:21:16,999 --> 00:21:21,769
favorite it I want to get more pets so

00:21:19,039 --> 00:21:23,570
more people can see their animals you

00:21:21,769 --> 00:21:25,639
can clear them out and then most

00:21:23,570 --> 00:21:26,720
importantly you can still get to the

00:21:25,639 --> 00:21:29,029
Humane Society

00:21:26,720 --> 00:21:34,639
this guy's gonna go adopt a cat after

00:21:29,029 --> 00:21:36,470
this I can tell and what's really really

00:21:34,639 --> 00:21:38,990
cool the application works so that's

00:21:36,470 --> 00:21:41,509
awesome but as a developer I think it's

00:21:38,990 --> 00:21:43,730
even cooler that my tests hopefully

00:21:41,509 --> 00:21:46,220
still just work so here the test for

00:21:43,730 --> 00:21:47,960
that button sidebar oh the button

00:21:46,220 --> 00:21:50,210
sidebar tasks that I had showed off

00:21:47,960 --> 00:21:51,500
earlier they expect the buttons to be

00:21:50,210 --> 00:21:53,480
rendered in the DOM and they make sure

00:21:51,500 --> 00:21:55,669
that all of the clicks actually do what

00:21:53,480 --> 00:21:57,470
the clicks need to do so I'm just gonna

00:21:55,669 --> 00:22:01,610
go ahead and run these tests really

00:21:57,470 --> 00:22:03,259
quickly and they just pass which is cool

00:22:01,610 --> 00:22:04,669
and the only import I had to change was

00:22:03,259 --> 00:22:07,429
the one that was actually importing the

00:22:04,669 --> 00:22:10,730
library which is a lifesaver and then I

00:22:07,429 --> 00:22:13,519
also have tests that test the actual

00:22:10,730 --> 00:22:16,159
card wrapper component so it's at a

00:22:13,519 --> 00:22:17,330
lower level and again all these tests

00:22:16,159 --> 00:22:19,039
you or make sure that it can render in

00:22:17,330 --> 00:22:20,690
the DOM and make sure that the text is

00:22:19,039 --> 00:22:22,009
that we expect to be there is there and

00:22:20,690 --> 00:22:24,440
that the image we expect to be there is

00:22:22,009 --> 00:22:26,059
there and we can go ahead and even

00:22:24,440 --> 00:22:28,639
though we just completely changed out

00:22:26,059 --> 00:22:33,580
the entire card these tests also just

00:22:28,639 --> 00:22:33,580
pass so that's pretty freakin cool

00:22:39,470 --> 00:22:46,100
so what does this mean for us well for

00:22:44,330 --> 00:22:47,870
one it means that breakups don't have to

00:22:46,100 --> 00:22:51,590
be messy the JavaScript open-source

00:22:47,870 --> 00:22:53,059
community is so crazy and fast and

00:22:51,590 --> 00:22:54,950
innovative that there's always new

00:22:53,059 --> 00:22:56,690
libraries that are coming out and maybe

00:22:54,950 --> 00:22:59,120
those libraries are actually a better

00:22:56,690 --> 00:23:00,860
fit for our users we want to be able to

00:22:59,120 --> 00:23:03,200
remain nimble in this ever-changing

00:23:00,860 --> 00:23:05,090
environment and not be nervous to take

00:23:03,200 --> 00:23:07,820
out an old implementation for fear of

00:23:05,090 --> 00:23:10,970
what what it might cost us and the other

00:23:07,820 --> 00:23:12,590
half that I appreciate is that library

00:23:10,970 --> 00:23:14,960
opinions don't have to affect your code

00:23:12,590 --> 00:23:17,120
decisions so if you've ever been in a

00:23:14,960 --> 00:23:18,350
conversation with a co-worker talking

00:23:17,120 --> 00:23:20,809
about which library you were going to

00:23:18,350 --> 00:23:22,279
use and maybe one of the arguments was

00:23:20,809 --> 00:23:24,889
that well I don't like how that library

00:23:22,279 --> 00:23:26,899
looks I don't like how we have to use

00:23:24,889 --> 00:23:29,600
that library I don't like what that API

00:23:26,899 --> 00:23:31,279
kind of makes our code feel like that

00:23:29,600 --> 00:23:32,960
doesn't have to be an argument anymore

00:23:31,279 --> 00:23:36,259
because you can just normalize that

00:23:32,960 --> 00:23:38,629
interface that exchange with the library

00:23:36,259 --> 00:23:40,370
into these wrappers and just design the

00:23:38,629 --> 00:23:42,740
interface for your wrappers the way that

00:23:40,370 --> 00:23:46,789
you as a developer as a team want to

00:23:42,740 --> 00:23:48,289
write your code so hopefully you'll

00:23:46,789 --> 00:23:49,759
think of this technique the next time

00:23:48,289 --> 00:23:51,769
you're implementing a third party

00:23:49,759 --> 00:23:53,330
library or even an internal library and

00:23:51,769 --> 00:23:54,679
see if it can help your code make it

00:23:53,330 --> 00:24:01,580
through some bad breakups like it has

00:23:54,679 --> 00:24:03,740
for me thank you so do you have any

00:24:01,580 --> 00:24:11,259
particularly bad JavaScript breakups

00:24:03,740 --> 00:24:14,090
that you'd like to talk about yes so I

00:24:11,259 --> 00:24:17,090
work on a code base right now that came

00:24:14,090 --> 00:24:21,200
from a start-up acquisition and so the

00:24:17,090 --> 00:24:23,389
code was very startup II and nothing was

00:24:21,200 --> 00:24:25,820
really componentized and there was a lot

00:24:23,389 --> 00:24:27,379
of just like we need something so we're

00:24:25,820 --> 00:24:28,580
just gonna make it or we need something

00:24:27,379 --> 00:24:31,610
so we're just gonna like use it over

00:24:28,580 --> 00:24:35,090
here and workday as a whole is getting

00:24:31,610 --> 00:24:36,620
more into the component driven libraries

00:24:35,090 --> 00:24:40,159
so we're building a couple of internal

00:24:36,620 --> 00:24:42,440
ones and as we figure that out the

00:24:40,159 --> 00:24:43,730
libraries also keep kind of changing

00:24:42,440 --> 00:24:45,409
because we're trying to figure out like

00:24:43,730 --> 00:24:46,820
the central place to keep them how

00:24:45,409 --> 00:24:49,429
everyone wants to interface with them

00:24:46,820 --> 00:24:51,000
and so pretty much every day I break up

00:24:49,429 --> 00:24:52,590
with a different library on

00:24:51,000 --> 00:24:54,750
Friday actually tried to switch out all

00:24:52,590 --> 00:24:56,970
of the buttons in my application and we

00:24:54,750 --> 00:24:58,620
didn't have a wrapper and I was doing

00:24:56,970 --> 00:25:00,030
the thing with the find and replacing on

00:24:58,620 --> 00:25:04,170
imports and it was the worst day of my

00:25:00,030 --> 00:25:07,260
life so we got a question from some of

00:25:04,170 --> 00:25:09,590
the audience from Colt how could someone

00:25:07,260 --> 00:25:12,300
define their contract without typescript

00:25:09,590 --> 00:25:13,980
yeah that's a really good question so I

00:25:12,300 --> 00:25:17,670
I had used hide script because it's a

00:25:13,980 --> 00:25:18,770
little bit easier to visualize I've

00:25:17,670 --> 00:25:22,110
actually never done it without

00:25:18,770 --> 00:25:23,250
typescript and so I'm not sure I think I

00:25:22,110 --> 00:25:27,390
would have to think about it

00:25:23,250 --> 00:25:29,910
I think jeaious Docs would be a really

00:25:27,390 --> 00:25:33,600
good way to do it and so you could use

00:25:29,910 --> 00:25:35,880
Jo stocks to annotate and define out the

00:25:33,600 --> 00:25:38,610
into like kind of build an interface

00:25:35,880 --> 00:25:41,220
that's not actually binding at compile

00:25:38,610 --> 00:25:42,960
time that way the interface is a little

00:25:41,220 --> 00:25:44,520
bit more obvious to developers who are

00:25:42,960 --> 00:25:46,050
using your application and they don't

00:25:44,520 --> 00:25:47,940
have to try to read it and understand

00:25:46,050 --> 00:25:49,800
like what each of the different inputs

00:25:47,940 --> 00:25:51,030
do so I think Jo stock would be a really

00:25:49,800 --> 00:25:52,860
good place to start and just make sure

00:25:51,030 --> 00:25:55,020
you have really solid annotations and

00:25:52,860 --> 00:25:57,780
comments mm-hmm

00:25:55,020 --> 00:25:59,820
okay so the question question here is

00:25:57,780 --> 00:26:02,610
what are some things you look for when

00:25:59,820 --> 00:26:04,410
you're first evaluating a library that's

00:26:02,610 --> 00:26:06,630
a really good question I think in that

00:26:04,410 --> 00:26:09,900
speed dating phase the getting to know

00:26:06,630 --> 00:26:12,120
each other is really important something

00:26:09,900 --> 00:26:13,530
I've done in in an angular environment

00:26:12,120 --> 00:26:15,810
in the past is we had to build out a

00:26:13,530 --> 00:26:17,730
grid for example or a table and it had

00:26:15,810 --> 00:26:18,960
to take a lot of data so one of the

00:26:17,730 --> 00:26:21,170
things that we realized was really

00:26:18,960 --> 00:26:23,070
important to us was performance and we

00:26:21,170 --> 00:26:25,230
speed-dated out a couple of these

00:26:23,070 --> 00:26:27,060
libraries and prototype them out and hit

00:26:25,230 --> 00:26:29,280
it with hundreds of thousands of rows of

00:26:27,060 --> 00:26:32,550
data and at some point a bunch of these

00:26:29,280 --> 00:26:34,590
grids just kind of fell over and so just

00:26:32,550 --> 00:26:36,390
understanding what is most important to

00:26:34,590 --> 00:26:37,380
your application and then testing those

00:26:36,390 --> 00:26:39,150
out while you're building those

00:26:37,380 --> 00:26:40,530
prototypes I think is the number one

00:26:39,150 --> 00:26:42,330
thing just making sure it's a good match

00:26:40,530 --> 00:26:44,580
all right cool

00:26:42,330 --> 00:26:47,010
all right so you have one more question

00:26:44,580 --> 00:26:49,160
here so do you have any thoughts about

00:26:47,010 --> 00:26:50,660
breaking up with an entire framework I

00:26:49,160 --> 00:26:53,880
do

00:26:50,660 --> 00:26:56,280
so I'm our application right now is in

00:26:53,880 --> 00:26:58,680
the process of moving from angular 1.5

00:26:56,280 --> 00:27:02,490
to react in the past I've also migrated

00:26:58,680 --> 00:27:04,440
an angular 1.5 application to angular 2

00:27:02,490 --> 00:27:07,049
I don't think that this pattern is going

00:27:04,440 --> 00:27:09,419
to help you there and I'm sorry it's too

00:27:07,049 --> 00:27:11,129
big of a lift to wrap all of reactor all

00:27:09,419 --> 00:27:14,070
of angular and I don't think you should

00:27:11,129 --> 00:27:15,539
do it but once you kind of do go towards

00:27:14,070 --> 00:27:17,220
that migration especially one that

00:27:15,539 --> 00:27:19,259
you're in the middle of the migration

00:27:17,220 --> 00:27:21,179
and things are in flux this pattern can

00:27:19,259 --> 00:27:23,519
really help you as you iterate and try

00:27:21,179 --> 00:27:25,470
to figure out what the new kind of

00:27:23,519 --> 00:27:28,289
incarceration of your application is

00:27:25,470 --> 00:27:32,030
going to look like mm-hmm cool all right

00:27:28,289 --> 00:27:34,970
thank you so so much time

00:27:32,030 --> 00:27:48,269
[Applause]

00:27:34,970 --> 00:27:48,269

YouTube URL: https://www.youtube.com/watch?v=T0r4r8_kC1M


