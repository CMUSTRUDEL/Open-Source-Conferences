Title: DinosaurJS 2019: Building JavaScript for JavaScripters by Cassidy Williams
Publication date: 2019-08-19
Playlist: DinosaurJS 2019
Description: 
	DinosaurJS 2019: Building JavaScript for JavaScripters by Cassidy Williams
Captions: 
	00:00:01,550 --> 00:00:06,490
[Applause]

00:00:04,100 --> 00:00:08,880
[Music]

00:00:06,490 --> 00:00:10,230
[Applause]

00:00:08,880 --> 00:00:14,160
[Music]

00:00:10,230 --> 00:00:16,380
[Applause]

00:00:14,160 --> 00:00:18,120
if you want me to change this to

00:00:16,380 --> 00:00:21,119
mechanical keyboard talk I can just

00:00:18,120 --> 00:00:23,490
swipe it so I'll be talking today about

00:00:21,119 --> 00:00:25,770
building a Babel 7 processor but I kind

00:00:23,490 --> 00:00:28,110
of also call this building JavaScript

00:00:25,770 --> 00:00:30,390
for JavaScript errs because that is what

00:00:28,110 --> 00:00:33,150
I do at code pen so once again I'm

00:00:30,390 --> 00:00:35,460
Cassidy my handle is at Casa do please

00:00:33,150 --> 00:00:36,750
talk to me I need friends and so if you

00:00:35,460 --> 00:00:39,960
ever want to tweet me questions about

00:00:36,750 --> 00:00:42,149
this talk later you can do that too so

00:00:39,960 --> 00:00:44,010
let's get right into it I work at a

00:00:42,149 --> 00:00:44,520
company called code pen who knows code

00:00:44,010 --> 00:00:49,050
pen

00:00:44,520 --> 00:00:51,210
most people oh yay ok great so I can

00:00:49,050 --> 00:00:53,040
kind of skip this slide but a quick

00:00:51,210 --> 00:00:54,900
blurb code pens an online code

00:00:53,040 --> 00:00:57,510
playground where you can write code

00:00:54,900 --> 00:00:59,160
online it was founded back in 2012 it's

00:00:57,510 --> 00:01:01,560
been around for a while now a lot of

00:00:59,160 --> 00:01:03,900
people use it to demo on prototype

00:01:01,560 --> 00:01:06,509
projects make a bunch of cool art with

00:01:03,900 --> 00:01:08,100
HTML CSS and JavaScript we've got

00:01:06,509 --> 00:01:12,509
millions and millions of pens on the

00:01:08,100 --> 00:01:13,950
site and there's also quick blurb you

00:01:12,509 --> 00:01:16,829
can get a pro account and then you can

00:01:13,950 --> 00:01:18,899
have private pens and team accounts and

00:01:16,829 --> 00:01:20,909
different modes for coding your pens and

00:01:18,899 --> 00:01:22,170
more so anyway that's what code pen is

00:01:20,909 --> 00:01:25,049
for those of you who don't know what it

00:01:22,170 --> 00:01:28,829
is but anyway the bread-and-butter of

00:01:25,049 --> 00:01:30,149
code pen is the pens and if you have

00:01:28,829 --> 00:01:32,490
been on the site before which it sounds

00:01:30,149 --> 00:01:34,170
like most of you have this is generally

00:01:32,490 --> 00:01:36,780
what you're used to seeing this is the

00:01:34,170 --> 00:01:39,630
pen editor and if I were to make a very

00:01:36,780 --> 00:01:42,499
simple pen with HTML and CSS you have

00:01:39,630 --> 00:01:47,340
this nice little simple pen right here

00:01:42,499 --> 00:01:50,039
but now we have this J's panel that has

00:01:47,340 --> 00:01:52,200
babel enabled and that enables you to

00:01:50,039 --> 00:01:54,600
write JavaScript with a nice little

00:01:52,200 --> 00:01:57,420
flavoring of some very modern JavaScript

00:01:54,600 --> 00:02:01,770
and if you can't see very well a zoomed

00:01:57,420 --> 00:02:03,420
in and you might be able to see that we

00:02:01,770 --> 00:02:06,359
have this funky line right here with

00:02:03,420 --> 00:02:08,069
pipeline operators and that is very

00:02:06,359 --> 00:02:09,690
recently available and that's that's the

00:02:08,069 --> 00:02:12,090
project I'm going to be talking about

00:02:09,690 --> 00:02:15,599
today being able to build really modern

00:02:12,090 --> 00:02:19,680
JavaScript in the pen editor so let's go

00:02:15,599 --> 00:02:22,560
back in time to before this happened we

00:02:19,680 --> 00:02:26,370
had babel as a processor at code pen

00:02:22,560 --> 00:02:27,290
before but it was very very basic babel

00:02:26,370 --> 00:02:29,540
it wasn't the most

00:02:27,290 --> 00:02:31,519
and stuff if you actually wanted to use

00:02:29,540 --> 00:02:33,950
things like a sink a weight or anything

00:02:31,519 --> 00:02:37,129
you needed to add Babel polyfill in

00:02:33,950 --> 00:02:40,159
addition to our existing a transpiler or

00:02:37,129 --> 00:02:41,959
processor and infinite loop detection

00:02:40,159 --> 00:02:44,239
wasn't fully working and so if you

00:02:41,959 --> 00:02:46,939
actually wrote an infinite loop on

00:02:44,239 --> 00:02:49,609
accident it would very slowly crash your

00:02:46,939 --> 00:02:52,189
pen and then if for example that pen was

00:02:49,609 --> 00:02:54,290
on your profile your profile would start

00:02:52,189 --> 00:02:56,359
to break and everything was just it

00:02:54,290 --> 00:02:58,400
would just stop it was it was not great

00:02:56,359 --> 00:02:59,629
and so we would have support tickets

00:02:58,400 --> 00:03:02,239
coming in and we would have to turn

00:02:59,629 --> 00:03:04,040
babble off then delete their pen or just

00:03:02,239 --> 00:03:05,329
remove the infinite loop and then have

00:03:04,040 --> 00:03:07,669
them go back to their profile and it was

00:03:05,329 --> 00:03:10,970
very tedious not great so we had to turn

00:03:07,669 --> 00:03:14,299
off that and add infinite loop detection

00:03:10,970 --> 00:03:17,060
and then extra plugins didn't fully work

00:03:14,299 --> 00:03:19,489
JSX kind of worked sometimes but

00:03:17,060 --> 00:03:21,439
sometimes it would just error out and it

00:03:19,489 --> 00:03:24,319
just it wasn't working the way we wanted

00:03:21,439 --> 00:03:26,480
to if well it wasn't the best so what we

00:03:24,319 --> 00:03:28,489
wanted was to fix all of these things so

00:03:26,480 --> 00:03:30,590
we wanted the most modern Babel

00:03:28,489 --> 00:03:32,209
available which was Babel seven we

00:03:30,590 --> 00:03:34,159
wanted access to all of the different

00:03:32,209 --> 00:03:35,449
plugins so you wouldn't have to check

00:03:34,159 --> 00:03:38,150
every single one that you wanted we

00:03:35,449 --> 00:03:39,709
wanted to just work we wanted it to be

00:03:38,150 --> 00:03:42,530
extensible so that way you could add

00:03:39,709 --> 00:03:44,329
things later which I can't fully talk

00:03:42,530 --> 00:03:46,430
about now but cool things coming to

00:03:44,329 --> 00:03:48,109
extend it and we also wanted to add that

00:03:46,430 --> 00:03:50,599
infinite loop detection so that way

00:03:48,109 --> 00:03:55,040
things wouldn't crash and burn if you

00:03:50,599 --> 00:03:57,799
accidentally wrote wild true so we found

00:03:55,040 --> 00:03:59,599
this great thing called Babel standalone

00:03:57,799 --> 00:04:01,010
and it looks like this would be the

00:03:59,599 --> 00:04:02,150
plug-in that we needed and it would

00:04:01,010 --> 00:04:05,090
solve all of our problems

00:04:02,150 --> 00:04:09,139
this is generally all of the presets and

00:04:05,090 --> 00:04:12,169
that it included and so it had the 2015

00:04:09,139 --> 00:04:13,970
preset it had all of the stages of all

00:04:12,169 --> 00:04:16,280
the different plugins that you might

00:04:13,970 --> 00:04:18,229
need it had react built-in and flow

00:04:16,280 --> 00:04:20,150
built in typescript built in it it

00:04:18,229 --> 00:04:21,979
seemed like it had everything but

00:04:20,150 --> 00:04:24,530
unfortunately it didn't have that

00:04:21,979 --> 00:04:26,570
extendable aspect that we really wanted

00:04:24,530 --> 00:04:28,400
and so we could have that in there but

00:04:26,570 --> 00:04:31,159
then in the future if we wanted to be

00:04:28,400 --> 00:04:32,960
able to add our own plugins and if we

00:04:31,159 --> 00:04:35,270
wanted to for example add this infinite

00:04:32,960 --> 00:04:38,479
loop detection as a plugin it wasn't

00:04:35,270 --> 00:04:40,189
working so we had to do it ourselves

00:04:38,479 --> 00:04:41,780
so I'm going to talk about all the

00:04:40,189 --> 00:04:44,270
plugins and presets that we had to do

00:04:41,780 --> 00:04:48,169
the first thing that we had to look at

00:04:44,270 --> 00:04:49,729
was browser support because it's you

00:04:48,169 --> 00:04:52,550
know something that we have to deal with

00:04:49,729 --> 00:04:54,500
as web developers everyday code pen

00:04:52,550 --> 00:04:56,240
actually stopped support supporting

00:04:54,500 --> 00:04:58,610
really old versions of Internet Explorer

00:04:56,240 --> 00:05:00,919
last summer we ended up checking the

00:04:58,610 --> 00:05:02,479
numbers to help decide which presets and

00:05:00,919 --> 00:05:05,150
things that we would want to include and

00:05:02,479 --> 00:05:07,340
of the multi million sessions at code

00:05:05,150 --> 00:05:11,150
pen in a given month about a thousand

00:05:07,340 --> 00:05:13,129
used internet explorer 11 I want you all

00:05:11,150 --> 00:05:15,710
to guess you can just shout out how many

00:05:13,129 --> 00:05:22,090
do you think used IE 10 or lower of the

00:05:15,710 --> 00:05:26,449
multi million sessions numbers twelve

00:05:22,090 --> 00:05:29,840
twelve people used it and so then very

00:05:26,449 --> 00:05:32,960
little less we destroyed all compilation

00:05:29,840 --> 00:05:34,879
to es 2015 people can use let and

00:05:32,960 --> 00:05:36,469
constant arrow functions and template

00:05:34,879 --> 00:05:38,990
strings and everything now natively in

00:05:36,469 --> 00:05:41,509
the browser and so we just figured let's

00:05:38,990 --> 00:05:44,060
let's not even bother compiling so we

00:05:41,509 --> 00:05:47,449
didn't need that 2015 preset we didn't

00:05:44,060 --> 00:05:49,580
need to convert a lot of old JavaScript

00:05:47,449 --> 00:05:52,370
anymore we could kind of move into the

00:05:49,580 --> 00:05:54,379
future and so we started to realize

00:05:52,370 --> 00:05:56,419
maybe we don't need to use presets at

00:05:54,379 --> 00:05:59,110
all we could use every single plugin we

00:05:56,419 --> 00:06:03,289
realized we had to be very explicit

00:05:59,110 --> 00:06:05,629
swearing no so we we wanted to be very

00:06:03,289 --> 00:06:08,289
explicit with all the plugins that we

00:06:05,629 --> 00:06:11,389
wanted to include so by not using just

00:06:08,289 --> 00:06:13,039
bundles of presets and plugins we could

00:06:11,389 --> 00:06:14,839
do bug easier so whenever there is an

00:06:13,039 --> 00:06:17,300
issue with a specific thing like

00:06:14,839 --> 00:06:19,610
optional chaining do expressions

00:06:17,300 --> 00:06:21,169
pipeline operators we would be able to

00:06:19,610 --> 00:06:22,460
figure out exactly where those problems

00:06:21,169 --> 00:06:26,240
were and it could be with a specific

00:06:22,460 --> 00:06:28,430
plugin and then if we have more control

00:06:26,240 --> 00:06:30,469
by doing it at the plug-in level rather

00:06:28,430 --> 00:06:33,379
at the rather than at the preset level

00:06:30,469 --> 00:06:35,449
with bundles of plugins we could just

00:06:33,379 --> 00:06:37,159
plop new plugins in and then it was as

00:06:35,449 --> 00:06:41,509
simple as adding it to an array and then

00:06:37,159 --> 00:06:43,969
adding whatever options that you might

00:06:41,509 --> 00:06:45,740
need for a given plugin and so it was

00:06:43,969 --> 00:06:47,719
nice and extensible by just being very

00:06:45,740 --> 00:06:50,030
explicit with this list and this list

00:06:47,719 --> 00:06:50,990
exists elsewhere on the Internet

00:06:50,030 --> 00:06:54,470
you don't need to memorize this but

00:06:50,990 --> 00:06:56,690
these are the plugins that we use we

00:06:54,470 --> 00:06:59,480
also ended up using some custom plugins

00:06:56,690 --> 00:07:01,310
and we built them ourselves and one of

00:06:59,480 --> 00:07:03,410
them is a visitor plug-in and the other

00:07:01,310 --> 00:07:05,720
one is an infinite loop plug-in and I

00:07:03,410 --> 00:07:08,660
won't get into the visitor plug-in much

00:07:05,720 --> 00:07:10,550
today but basically it takes the code

00:07:08,660 --> 00:07:12,710
and parses it and adds webpack

00:07:10,550 --> 00:07:14,690
statements an additional compilation

00:07:12,710 --> 00:07:16,460
that is needed to the codes so that way

00:07:14,690 --> 00:07:18,530
it can be integrated into the pen editor

00:07:16,460 --> 00:07:20,090
so that was one of them that we use but

00:07:18,530 --> 00:07:22,640
the infinite loop plug-in I did want to

00:07:20,090 --> 00:07:24,650
talk about so whenever you're making a

00:07:22,640 --> 00:07:26,570
plug-in for Babel you need to probably

00:07:24,650 --> 00:07:29,420
be able to navigate the abstract syntax

00:07:26,570 --> 00:07:31,940
tree or the ast and that's literally

00:07:29,420 --> 00:07:35,240
just the tree that is developed of your

00:07:31,940 --> 00:07:38,210
code and so what we did was we navigated

00:07:35,240 --> 00:07:39,830
it and detected all the loops that we

00:07:38,210 --> 00:07:42,650
needed to check for and then figure it

00:07:39,830 --> 00:07:45,470
out if those loops ended and so this is

00:07:42,650 --> 00:07:48,350
a snippet of of this infinite loop

00:07:45,470 --> 00:07:51,170
plug-in and so it goes through the code

00:07:48,350 --> 00:07:52,970
and if at the certain cursor there's a

00:07:51,170 --> 00:07:55,550
do-while statement a for statement a

00:07:52,970 --> 00:07:57,770
while statement then we have a loop

00:07:55,550 --> 00:08:00,230
watcher that basically runs the loop and

00:07:57,770 --> 00:08:02,270
looks for an exit statement if the exit

00:08:00,230 --> 00:08:05,030
didn't exist it would halt execution to

00:08:02,270 --> 00:08:07,520
save the page from breaking entirely and

00:08:05,030 --> 00:08:11,180
then if it did exist great the loop is

00:08:07,520 --> 00:08:12,890
allowed to exist and it's the kind of

00:08:11,180 --> 00:08:14,930
thing to where you could accidentally

00:08:12,890 --> 00:08:16,880
write an infinite loop but then you

00:08:14,930 --> 00:08:18,290
could fix it and the page wouldn't break

00:08:16,880 --> 00:08:20,630
because it would just stop the preview

00:08:18,290 --> 00:08:23,180
until you actually fixed the loop and so

00:08:20,630 --> 00:08:25,640
it made things a lot easier and so that

00:08:23,180 --> 00:08:28,130
was that was our nice custom plugin that

00:08:25,640 --> 00:08:30,440
was stuck in there and the next thing we

00:08:28,130 --> 00:08:32,330
had to work on was the babel config and

00:08:30,440 --> 00:08:34,550
so all of the different options and

00:08:32,330 --> 00:08:37,190
actually putting the plugins in for

00:08:34,550 --> 00:08:38,180
babel to consume and and send out into

00:08:37,190 --> 00:08:40,970
the world

00:08:38,180 --> 00:08:42,980
so the babel config determines what is

00:08:40,970 --> 00:08:44,930
actually returned by babel and so like i

00:08:42,980 --> 00:08:46,280
said all the plugins all the options

00:08:44,930 --> 00:08:49,640
that we might want to put in there

00:08:46,280 --> 00:08:51,200
there's docks for it this is a long link

00:08:49,640 --> 00:08:53,570
so you don't need to memorize that I can

00:08:51,200 --> 00:08:55,520
tweet that one out but the docks there

00:08:53,570 --> 00:08:57,650
have just a list of all the options that

00:08:55,520 --> 00:08:59,660
you can pass in and so here are some of

00:08:57,650 --> 00:09:01,490
the options that we included and we have

00:08:59,660 --> 00:09:01,950
a few other options that aren't really

00:09:01,490 --> 00:09:04,470
nests

00:09:01,950 --> 00:09:06,959
for this talk but code is true because

00:09:04,470 --> 00:09:07,980
you want to be able to have the code at

00:09:06,959 --> 00:09:09,420
the end of it

00:09:07,980 --> 00:09:11,940
that means you want the direct code

00:09:09,420 --> 00:09:13,170
result if you don't have code is true

00:09:11,940 --> 00:09:15,630
that usually means that you're taking

00:09:13,170 --> 00:09:18,089
the processed thing and you're going to

00:09:15,630 --> 00:09:20,310
pass it into some other transpiler and

00:09:18,089 --> 00:09:21,779
we didn't need to do that so code was

00:09:20,310 --> 00:09:24,060
true we also wanted the comments to be

00:09:21,779 --> 00:09:26,010
true so that way if you were to export

00:09:24,060 --> 00:09:28,019
your code and you could get the compiled

00:09:26,010 --> 00:09:29,880
version and the original version the

00:09:28,019 --> 00:09:31,350
comments would still be there otherwise

00:09:29,880 --> 00:09:34,079
babble would just cut out all the

00:09:31,350 --> 00:09:36,149
comments compact is false we didn't want

00:09:34,079 --> 00:09:38,550
to give someone a minified code when

00:09:36,149 --> 00:09:41,070
they got their code result plugins

00:09:38,550 --> 00:09:42,389
that's just we have our function of all

00:09:41,070 --> 00:09:44,480
of the plugins that we were returning

00:09:42,389 --> 00:09:46,709
from our array that I mentioned before

00:09:44,480 --> 00:09:48,480
retaining the lines that was very

00:09:46,709 --> 00:09:51,180
important too because of error detection

00:09:48,480 --> 00:09:53,760
we wanted to generally say ok there's a

00:09:51,180 --> 00:09:59,910
line on this error or an error on this

00:09:53,760 --> 00:10:03,290
line and as as as the code was changed

00:09:59,910 --> 00:10:05,610
we wanted to be able to have the error

00:10:03,290 --> 00:10:08,160
generally match up with the compiled

00:10:05,610 --> 00:10:09,839
JavaScript and the original JavaScript

00:10:08,160 --> 00:10:11,370
that you're writing in Babel so that way

00:10:09,839 --> 00:10:13,199
you could kind of figure out where it's

00:10:11,370 --> 00:10:16,769
happening both on the compiled side and

00:10:13,199 --> 00:10:18,720
the original side and then we don't need

00:10:16,769 --> 00:10:21,180
source Maps because it just loads

00:10:18,720 --> 00:10:23,730
straight into the pen as one file it

00:10:21,180 --> 00:10:25,079
just wasn't useful for us and and you

00:10:23,730 --> 00:10:26,279
get both the compiled and the

00:10:25,079 --> 00:10:28,560
uncompelled version when you're

00:10:26,279 --> 00:10:31,050
exporting it so we didn't need those but

00:10:28,560 --> 00:10:33,510
that was generally what our babel config

00:10:31,050 --> 00:10:35,880
to look like and then we had to pass

00:10:33,510 --> 00:10:36,959
that into the babel processor and this

00:10:35,880 --> 00:10:39,750
is the thing that kind of pulls

00:10:36,959 --> 00:10:42,630
everything together the different steps

00:10:39,750 --> 00:10:43,850
of that was actually building the config

00:10:42,630 --> 00:10:46,310
that i mentioned before

00:10:43,850 --> 00:10:49,319
processing the code with that config

00:10:46,310 --> 00:10:51,839
checking for all of the errors whether

00:10:49,319 --> 00:10:53,339
it be in the code itself or if you were

00:10:51,839 --> 00:10:55,140
importing something that you weren't

00:10:53,339 --> 00:10:57,690
able to import and then building a

00:10:55,140 --> 00:11:00,860
response with that transpiled code and

00:10:57,690 --> 00:11:03,660
any other metadata that we might need so

00:11:00,860 --> 00:11:05,670
processing that that part is just

00:11:03,660 --> 00:11:08,160
getting the Babel library building a

00:11:05,670 --> 00:11:11,550
valid instance of it and with our config

00:11:08,160 --> 00:11:12,680
and then transpiling with it and so we

00:11:11,550 --> 00:11:17,600
have this function

00:11:12,680 --> 00:11:19,819
we're valid config we take our options

00:11:17,600 --> 00:11:21,740
that I mentioned with the code is true

00:11:19,819 --> 00:11:24,559
source maps as false and stuff put that

00:11:21,740 --> 00:11:27,709
together and then we take the text input

00:11:24,559 --> 00:11:30,439
of the users code in the pen and use

00:11:27,709 --> 00:11:31,850
that with the valid config to transpile

00:11:30,439 --> 00:11:34,220
it all together with this babel

00:11:31,850 --> 00:11:36,189
transform sync and then we get our

00:11:34,220 --> 00:11:40,249
transpiled code and then we also get

00:11:36,189 --> 00:11:44,360
metadata from that and along with that

00:11:40,249 --> 00:11:46,220
we also had to handle errors so we have

00:11:44,360 --> 00:11:48,379
to validate that the imports in

00:11:46,220 --> 00:11:51,529
JavaScript are valid if you're requiring

00:11:48,379 --> 00:11:53,119
some kind of external library we need to

00:11:51,529 --> 00:11:55,129
find any missing dependencies that you

00:11:53,119 --> 00:11:57,050
might need so we can say hey just so you

00:11:55,129 --> 00:11:59,059
know you did this but you need to import

00:11:57,050 --> 00:12:00,529
this if you're going to use it and we

00:11:59,059 --> 00:12:04,309
also just need to make sure that the the

00:12:00,529 --> 00:12:07,009
code can run and so for that it's kind

00:12:04,309 --> 00:12:09,649
of simple we get that from the the

00:12:07,009 --> 00:12:13,819
transpiled thing that we get from the

00:12:09,649 --> 00:12:17,300
Babel processor and here we just get the

00:12:13,819 --> 00:12:18,949
the line it's it's kind of that line is

00:12:17,300 --> 00:12:20,870
kind of silly because the line of the

00:12:18,949 --> 00:12:23,779
error will almost always be one but if

00:12:20,870 --> 00:12:25,819
the if the error is not its it'll be

00:12:23,779 --> 00:12:28,459
that just because of how babel

00:12:25,819 --> 00:12:30,829
transformed it anyway we get the we get

00:12:28,459 --> 00:12:32,809
the line error and then if if the line

00:12:30,829 --> 00:12:36,379
error doesn't exist for whatever reason

00:12:32,809 --> 00:12:38,660
it returns one and then we use that line

00:12:36,379 --> 00:12:42,019
to be able to on the user interface side

00:12:38,660 --> 00:12:44,360
put the error somewhere in your code

00:12:42,019 --> 00:12:46,490
and then we get the error message saying

00:12:44,360 --> 00:12:49,279
like hey you've missed a semicolon or

00:12:46,490 --> 00:12:50,929
something like that and then as we put

00:12:49,279 --> 00:12:53,660
all that together we make we return this

00:12:50,929 --> 00:12:55,879
JSON that will compile into the ultimate

00:12:53,660 --> 00:12:58,970
response which I'll talk about now the

00:12:55,879 --> 00:13:00,709
client response so you get all of your

00:12:58,970 --> 00:13:04,220
errors with the messages and the line

00:13:00,709 --> 00:13:07,009
numbers where those should happen we get

00:13:04,220 --> 00:13:08,629
the processed code that has all the

00:13:07,009 --> 00:13:10,639
transpiled things that we need and then

00:13:08,629 --> 00:13:12,559
the responses that we could need which

00:13:10,639 --> 00:13:15,799
includes all the dependencies that you

00:13:12,559 --> 00:13:17,269
might have included that we get the code

00:13:15,799 --> 00:13:19,160
right there and then any errors we had

00:13:17,269 --> 00:13:21,439
just put this in a try-catch block where

00:13:19,160 --> 00:13:24,170
if it's great then we don't have any

00:13:21,439 --> 00:13:26,060
major errors we can just return the code

00:13:24,170 --> 00:13:27,649
and then otherwise if for whatever

00:13:26,060 --> 00:13:29,930
reason the processor doesn't work at all

00:13:27,649 --> 00:13:31,430
we can build a larger error response and

00:13:29,930 --> 00:13:37,070
then that would be more on our end

00:13:31,430 --> 00:13:39,760
rather than the users end tests so

00:13:37,070 --> 00:13:42,260
there's a lot of tests to do next so

00:13:39,760 --> 00:13:44,480
once once we actually were writing all

00:13:42,260 --> 00:13:46,970
this we had to actually write tests for

00:13:44,480 --> 00:13:49,010
every single plug-in we had to write

00:13:46,970 --> 00:13:51,290
tests for the actual babble part of it

00:13:49,010 --> 00:13:53,149
we had to write tests for the client end

00:13:51,290 --> 00:13:54,529
of actually putting the code in there

00:13:53,149 --> 00:13:58,279
and making sure that the client returns

00:13:54,529 --> 00:14:00,440
the right thing and more it was a lot of

00:13:58,279 --> 00:14:02,630
testing this is an example of one of the

00:14:00,440 --> 00:14:04,639
tests just for optional chaining we

00:14:02,630 --> 00:14:06,589
actually had this little blurb we had to

00:14:04,639 --> 00:14:07,790
compile it separately to make sure we

00:14:06,589 --> 00:14:10,880
knew what the response would look like

00:14:07,790 --> 00:14:14,000
it has an expected result and fun fact

00:14:10,880 --> 00:14:16,399
just is not very good at testing with

00:14:14,000 --> 00:14:19,010
whitespace and so I ended up writing a

00:14:16,399 --> 00:14:21,380
custom whitespace matcher so that way it

00:14:19,010 --> 00:14:23,060
would take the code and then ignore all

00:14:21,380 --> 00:14:25,279
whitespace and make sure that it still

00:14:23,060 --> 00:14:28,160
runs I put that somewhere open source so

00:14:25,279 --> 00:14:29,660
you can use it but anyway we had to

00:14:28,160 --> 00:14:31,339
write a test like this for every single

00:14:29,660 --> 00:14:33,230
one of the plugins to make sure that it

00:14:31,339 --> 00:14:35,209
worked in addition to combinations of

00:14:33,230 --> 00:14:37,399
the plugins in addition to code that had

00:14:35,209 --> 00:14:39,170
imports statements or require statements

00:14:37,399 --> 00:14:41,529
we had to write tests for the Babel

00:14:39,170 --> 00:14:43,640
level itself we had to write tests for

00:14:41,529 --> 00:14:45,980
integrating it with web pack and

00:14:43,640 --> 00:14:48,560
actually putting it into the client was

00:14:45,980 --> 00:14:51,130
a lot of tests but it really made us

00:14:48,560 --> 00:14:54,290
sure that it was a really robust system

00:14:51,130 --> 00:14:56,630
and then after all this it was finally

00:14:54,290 --> 00:14:59,240
time to hook it up to the client and I

00:14:56,630 --> 00:15:01,880
did not do this part but this this was

00:14:59,240 --> 00:15:04,519
just that's when I passed on the process

00:15:01,880 --> 00:15:06,350
or to another team it's it was kind of

00:15:04,519 --> 00:15:08,149
magical and I say another team code pin

00:15:06,350 --> 00:15:12,740
is eight people I pass it on to another

00:15:08,149 --> 00:15:14,959
person but anyway we hook it up to the

00:15:12,740 --> 00:15:17,300
client it was a matter of importing the

00:15:14,959 --> 00:15:20,029
Babel processor library as an external

00:15:17,300 --> 00:15:22,130
package so we would just install it in

00:15:20,029 --> 00:15:25,100
and it was in a separate repo and we we

00:15:22,130 --> 00:15:28,190
installed it into the into the pen

00:15:25,100 --> 00:15:31,010
package we set up a web worker to listen

00:15:28,190 --> 00:15:33,170
for code changes in in the panels and

00:15:31,010 --> 00:15:36,500
then every time a code change happened

00:15:33,170 --> 00:15:38,420
it would run the Babel processor and

00:15:36,500 --> 00:15:40,370
and produce the preview so that way was

00:15:38,420 --> 00:15:42,020
just kind of constantly listening for

00:15:40,370 --> 00:15:43,550
what was happening and listening if

00:15:42,020 --> 00:15:45,080
there needed to be something imported

00:15:43,550 --> 00:15:48,650
from an external library that sort of

00:15:45,080 --> 00:15:50,720
thing we also added a conditional in the

00:15:48,650 --> 00:15:52,070
babble processor that runs the infinite

00:15:50,720 --> 00:15:54,980
loop detection that we were looking for

00:15:52,070 --> 00:15:56,690
so even if babble is off we still have

00:15:54,980 --> 00:15:58,820
that infinite loop detection so we can

00:15:56,690 --> 00:16:01,250
still block things from from breaking

00:15:58,820 --> 00:16:02,840
entirely and then setting up the UI to

00:16:01,250 --> 00:16:05,420
respond and react to errors that was

00:16:02,840 --> 00:16:07,040
taking that error function setting up

00:16:05,420 --> 00:16:08,600
where the lines should go whether it be

00:16:07,040 --> 00:16:10,720
just at the top at that line one that I

00:16:08,600 --> 00:16:14,510
mentioned or somewhere else in the file

00:16:10,720 --> 00:16:18,110
and voila we finally had our babble

00:16:14,510 --> 00:16:21,050
processor and it included babble seven

00:16:18,110 --> 00:16:23,630
so it had the most modern addition of

00:16:21,050 --> 00:16:25,220
babble it had all of the plugins that we

00:16:23,630 --> 00:16:27,500
actually wanted without having to have

00:16:25,220 --> 00:16:29,540
the user import everything individually

00:16:27,500 --> 00:16:31,490
that they might need it was an

00:16:29,540 --> 00:16:33,740
extensible interface for future things

00:16:31,490 --> 00:16:35,660
and so in the future now that we have

00:16:33,740 --> 00:16:37,220
just this plugins array we can add

00:16:35,660 --> 00:16:38,990
whatever plugins that we want we can

00:16:37,220 --> 00:16:40,730
build our own custom plugins and we have

00:16:38,990 --> 00:16:42,260
a few things in the work that'll in the

00:16:40,730 --> 00:16:44,630
works that we'll be able to use this

00:16:42,260 --> 00:16:47,480
babble processor in the future and then

00:16:44,630 --> 00:16:49,310
think this the the our support lead was

00:16:47,480 --> 00:16:51,230
so happy we have infinite loop detection

00:16:49,310 --> 00:16:54,200
and so now people don't have to turn off

00:16:51,230 --> 00:16:57,560
JavaScript just to unbreak the site for

00:16:54,200 --> 00:16:59,540
themselves fix it and then go back so

00:16:57,560 --> 00:17:01,670
this process are kind of fit all of our

00:16:59,540 --> 00:17:04,160
needs and because of that we are able to

00:17:01,670 --> 00:17:05,840
have this results today where you can

00:17:04,160 --> 00:17:08,570
write whatever code you want use this

00:17:05,840 --> 00:17:10,790
modern JavaScript and have a response

00:17:08,570 --> 00:17:13,810
that you're looking for and that's about

00:17:10,790 --> 00:17:13,810
it thank you so much

00:17:15,300 --> 00:17:20,440
so why don't we just take a quick seat

00:17:18,610 --> 00:17:23,800
real quick and we'll just chat a little

00:17:20,440 --> 00:17:26,200
bit about just have a little Q&A between

00:17:23,800 --> 00:17:28,030
you and I or just the folks also do want

00:17:26,200 --> 00:17:30,130
to I want to hear a little bit about the

00:17:28,030 --> 00:17:33,160
her mechanical keyboard stuff oh yes

00:17:30,130 --> 00:17:36,460
okay that sounds like they want to hear

00:17:33,160 --> 00:17:37,810
about that so - so let's just talk let's

00:17:36,460 --> 00:17:40,870
talk about a little bit about your talk

00:17:37,810 --> 00:17:43,600
so when did you did this is your first

00:17:40,870 --> 00:17:45,760
time delivering this talk no no I've

00:17:43,600 --> 00:17:50,320
given a variation of this talk a few

00:17:45,760 --> 00:17:52,420
weeks ago in London but I shortened it

00:17:50,320 --> 00:17:53,680
for this one uh-huh kind of sped through

00:17:52,420 --> 00:17:57,220
it because that was a much longer

00:17:53,680 --> 00:17:59,680
version of the talk but I've I like to

00:17:57,220 --> 00:18:01,030
speak regularly this is I have lost

00:17:59,680 --> 00:18:02,320
track of the number of events I've

00:18:01,030 --> 00:18:03,550
spoken at but this is this has

00:18:02,320 --> 00:18:06,100
definitely been a really fun talk

00:18:03,550 --> 00:18:07,360
because it's one that it's a feature

00:18:06,100 --> 00:18:08,740
that I was really proud of and then I

00:18:07,360 --> 00:18:10,060
worked really hard on and so being able

00:18:08,740 --> 00:18:12,310
to share it with the world and being

00:18:10,060 --> 00:18:15,100
able to say you can use it now is very

00:18:12,310 --> 00:18:17,950
exciting yeah awesome so if you had time

00:18:15,100 --> 00:18:19,630
to expand your talk or you already have

00:18:17,950 --> 00:18:22,180
expansion of it what what else would you

00:18:19,630 --> 00:18:25,480
touch on so I would probably go into a

00:18:22,180 --> 00:18:28,600
deeper level of the actual navigating of

00:18:25,480 --> 00:18:30,070
the abstract syntax tree that was a huge

00:18:28,600 --> 00:18:31,900
learning curve for me but I think it's

00:18:30,070 --> 00:18:33,370
something that's very important to know

00:18:31,900 --> 00:18:36,730
that that's something that I didn't even

00:18:33,370 --> 00:18:38,800
fully realize your code is a tree and

00:18:36,730 --> 00:18:40,420
and you can navigate every single aspect

00:18:38,800 --> 00:18:42,250
of it where if this is a function

00:18:40,420 --> 00:18:44,650
declaration you can dig into what type

00:18:42,250 --> 00:18:47,200
of function it is and code in it at a

00:18:44,650 --> 00:18:48,520
very meta level and read JavaScript and

00:18:47,200 --> 00:18:49,960
it was really interesting and that's

00:18:48,520 --> 00:18:51,400
something that someday I'll probably

00:18:49,960 --> 00:18:53,080
give another talk on when I'll

00:18:51,400 --> 00:18:55,750
understand it more oh that's awesome how

00:18:53,080 --> 00:18:58,710
did you so how did you kind of start

00:18:55,750 --> 00:19:01,030
like learning about like the ast

00:18:58,710 --> 00:19:02,560
documentation documentation it was a lot

00:19:01,030 --> 00:19:04,450
of kind of going through the babble

00:19:02,560 --> 00:19:06,670
Doc's kind of figuring out what the heck

00:19:04,450 --> 00:19:09,130
I needed to know and luckily the babble

00:19:06,670 --> 00:19:11,530
team in general the the maintainer zuv

00:19:09,130 --> 00:19:14,380
it are so helpful Harry Roberts if

00:19:11,530 --> 00:19:15,880
you're out there hey he was super

00:19:14,380 --> 00:19:18,580
helpful in answering all the questions

00:19:15,880 --> 00:19:21,620
that I had and Twitter is helpful too

00:19:18,580 --> 00:19:24,080
and so asking around Stack Overflow and

00:19:21,620 --> 00:19:26,210
and documentation were actually really

00:19:24,080 --> 00:19:29,120
helpful the babel documentation is good

00:19:26,210 --> 00:19:30,620
and it also is improving a lot like just

00:19:29,120 --> 00:19:32,000
in the time that we were working on it

00:19:30,620 --> 00:19:34,190
there were a lot of things that were

00:19:32,000 --> 00:19:36,080
added which were helpful in it it's it's

00:19:34,190 --> 00:19:39,980
a testament to open-source okay

00:19:36,080 --> 00:19:42,470
wonderful okay so so in terms of your

00:19:39,980 --> 00:19:44,000
mechanical keyboards so is there any

00:19:42,470 --> 00:19:47,540
that you're building or working on right

00:19:44,000 --> 00:19:49,790
now so many okay it's it's unhealthy how

00:19:47,540 --> 00:19:52,220
many keyboards I have in my home but I

00:19:49,790 --> 00:19:55,070
love them and so for some background on

00:19:52,220 --> 00:19:57,740
the Hasbro thing I had a dream once that

00:19:55,070 --> 00:19:59,540
I was typing on a Scrabble like board

00:19:57,740 --> 00:20:02,660
like like the game and I was like what

00:19:59,540 --> 00:20:07,309
if I made that real and then I did and

00:20:02,660 --> 00:20:08,540
score so I sketched up I literally like

00:20:07,309 --> 00:20:10,130
woke up in the middle of the night and

00:20:08,540 --> 00:20:12,230
just sketched up what I would think a

00:20:10,130 --> 00:20:13,370
Scrabble key cap set could look like and

00:20:12,230 --> 00:20:14,900
then I was like okay I can make this a

00:20:13,370 --> 00:20:16,520
full keyboard that people could buy it

00:20:14,900 --> 00:20:18,230
would be so great then I realized that

00:20:16,520 --> 00:20:20,900
couldn't show anyone my designs unless I

00:20:18,230 --> 00:20:23,030
got permission and so that involved like

00:20:20,900 --> 00:20:25,580
months of just cold calling random

00:20:23,030 --> 00:20:27,080
people trying to get connections and I

00:20:25,580 --> 00:20:29,690
ended up getting a connection it has

00:20:27,080 --> 00:20:31,340
broke by posting in a Facebook group and

00:20:29,690 --> 00:20:33,559
a person like had a cousin that worked

00:20:31,340 --> 00:20:35,540
it has bro in the past and then she

00:20:33,559 --> 00:20:37,370
connected me to an account executive and

00:20:35,540 --> 00:20:38,840
then I was able to talk to him who

00:20:37,370 --> 00:20:42,530
referred me to someone else who got me

00:20:38,840 --> 00:20:45,380
the license it was nuts but super fun

00:20:42,530 --> 00:20:47,380
and then there's a website it used to be

00:20:45,380 --> 00:20:49,520
called mass drop Annette's drop comm and

00:20:47,380 --> 00:20:51,200
they were just like this sounds awesome

00:20:49,520 --> 00:20:53,179
and they they helped me with the

00:20:51,200 --> 00:20:55,280
manufacturing side of things and we sold

00:20:53,179 --> 00:20:57,290
over a thousand sets and a bunch of full

00:20:55,280 --> 00:20:58,030
keyboards with it as well wow that's so

00:20:57,290 --> 00:21:00,350
exciting

00:20:58,030 --> 00:21:01,670
awesome well that's all the time we have

00:21:00,350 --> 00:21:04,190
but if you have more questions for

00:21:01,670 --> 00:21:07,309
Cassidy you can add her at Casa do write

00:21:04,190 --> 00:21:10,370
on Twitter or you can find her amongst a

00:21:07,309 --> 00:21:12,020
crowd again no well actually it's just

00:21:10,370 --> 00:21:15,530
questions if you have questions okay

00:21:12,020 --> 00:21:16,620
alright so so so thank you so much just

00:21:15,530 --> 00:21:21,340
give her a round of applause

00:21:16,620 --> 00:21:34,499
[Applause]

00:21:21,340 --> 00:21:34,499

YouTube URL: https://www.youtube.com/watch?v=caB7na4VTYs


