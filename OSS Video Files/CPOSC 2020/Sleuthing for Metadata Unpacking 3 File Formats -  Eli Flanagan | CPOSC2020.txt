Title: Sleuthing for Metadata Unpacking 3 File Formats -  Eli Flanagan | CPOSC2020
Publication date: 2021-01-18
Playlist: CPOSC 2020 Recorded Sessions
Description: 
	Session Page: https://cposc.org/sessions/sleuthing-metadata-unpacking-3-file-formats/
Demo: https://github.com/efx/sleuthing_for_metadata
Chat Log: https://cposc.org/chat-log-sleuthing-metadata-unpacking-3-file-formats/

The Central Pennsylvania Open Source Conference (CPOSC) is a one-day technical conference for open source users and developers. Presentations and sessions cover all aspects of open source, with talks ranging from novice to expert skill levels and featuring case studies, best practices, code-alongs and more. Join us in 2021! https://cposc.org
Captions: 
	00:00:05,120 --> 00:00:09,440
i'm going to turn it over to eli

00:00:07,120 --> 00:00:10,719
he's the lead engineer at inovu and

00:00:09,440 --> 00:00:11,120
today he's going to be talking to you

00:00:10,719 --> 00:00:13,679
about

00:00:11,120 --> 00:00:15,040
sleuthing for metadata unpacking three

00:00:13,679 --> 00:00:18,240
file formats

00:00:15,040 --> 00:00:21,520
take away eli good morning everyone

00:00:18,240 --> 00:00:23,840
thank you for joining this talk and

00:00:21,520 --> 00:00:25,680
let's dive in so i'm gonna go ahead and

00:00:23,840 --> 00:00:30,160
share my screen

00:00:25,680 --> 00:00:33,520
let's do the entire screen alrighty

00:00:30,160 --> 00:00:36,559
just ignore that trip to infinity

00:00:33,520 --> 00:00:38,640
so and give a quick outline of

00:00:36,559 --> 00:00:39,600
what i'm going to talk about so you have

00:00:38,640 --> 00:00:42,719
an idea

00:00:39,600 --> 00:00:43,040
of what's ahead and the general contour

00:00:42,719 --> 00:00:44,640
so

00:00:43,040 --> 00:00:46,800
i'm going to do some just introduction

00:00:44,640 --> 00:00:50,719
bits a little bit more about myself

00:00:46,800 --> 00:00:53,280
and then i'm going to be using questions

00:00:50,719 --> 00:00:55,600
for these particular file formats and

00:00:53,280 --> 00:00:57,360
we're going to explore them

00:00:55,600 --> 00:00:59,600
using the command line more

00:00:57,360 --> 00:01:02,239
interactively and then

00:00:59,600 --> 00:01:04,000
the three documents document types are

00:01:02,239 --> 00:01:07,280
microsoft office documents

00:01:04,000 --> 00:01:08,720
pdfs images and then after

00:01:07,280 --> 00:01:11,040
going through each of those sections

00:01:08,720 --> 00:01:13,119
we'll have a

00:01:11,040 --> 00:01:14,479
kind of bit of reflection just what are

00:01:13,119 --> 00:01:15,680
other questions we could ask what are

00:01:14,479 --> 00:01:19,119
other things you could build

00:01:15,680 --> 00:01:19,759
or further details and then as well as a

00:01:19,119 --> 00:01:22,640
nice

00:01:19,759 --> 00:01:24,320
healthy buffer for questions so we can

00:01:22,640 --> 00:01:27,600
adapt the talk to

00:01:24,320 --> 00:01:29,840
our needs if you will so

00:01:27,600 --> 00:01:31,600
yeah who am i as court mentioned i work

00:01:29,840 --> 00:01:34,880
for a company called a novu

00:01:31,600 --> 00:01:38,320
we build a data analytics platform

00:01:34,880 --> 00:01:41,840
as a service and i'm the team lead and

00:01:38,320 --> 00:01:43,840
we yeah go on so those are kind of the

00:01:41,840 --> 00:01:46,240
basic details but

00:01:43,840 --> 00:01:47,840
this is a dumpster as you can tell

00:01:46,240 --> 00:01:48,799
growing up i lived in an apartment

00:01:47,840 --> 00:01:51,840
complex

00:01:48,799 --> 00:01:53,520
and my brothers and i would

00:01:51,840 --> 00:01:54,960
explore this apartment complex and we

00:01:53,520 --> 00:01:57,759
would often

00:01:54,960 --> 00:01:59,840
end up near these random sections with

00:01:57,759 --> 00:02:01,040
dumpsters and we would go exploring in

00:01:59,840 --> 00:02:03,200
the dumpsters

00:02:01,040 --> 00:02:04,479
and we would find various things we

00:02:03,200 --> 00:02:05,439
weren't looking for food but we were

00:02:04,479 --> 00:02:07,840
looking for

00:02:05,439 --> 00:02:09,840
gadgets and other things and a few times

00:02:07,840 --> 00:02:12,959
we found nice bags of toys that people

00:02:09,840 --> 00:02:15,360
to our shock had thrown away i

00:02:12,959 --> 00:02:16,400
like i liked doing that and maybe to a

00:02:15,360 --> 00:02:18,800
degree i

00:02:16,400 --> 00:02:20,800
haven't changed i still like doing this

00:02:18,800 --> 00:02:22,400
but i just do this in different ways

00:02:20,800 --> 00:02:24,480
and what i like to think of what we're

00:02:22,400 --> 00:02:27,680
doing today is

00:02:24,480 --> 00:02:29,760
we're digital dumpster diving i learned

00:02:27,680 --> 00:02:30,720
later in life that dumpster diving is an

00:02:29,760 --> 00:02:32,959
actual term

00:02:30,720 --> 00:02:34,720
it has a whole wikipedia page people do

00:02:32,959 --> 00:02:39,200
this professionally

00:02:34,720 --> 00:02:41,120
um so yeah why might you care

00:02:39,200 --> 00:02:42,800
sure you have your own reasons these are

00:02:41,120 --> 00:02:44,879
some of the

00:02:42,800 --> 00:02:46,400
pitch reasons i would give is i think

00:02:44,879 --> 00:02:48,640
this is a

00:02:46,400 --> 00:02:50,959
topic that has privacy and security

00:02:48,640 --> 00:02:52,720
implications so you may be publishing a

00:02:50,959 --> 00:02:53,840
document or using software to publish a

00:02:52,720 --> 00:02:57,120
document that

00:02:53,840 --> 00:02:58,879
potentially leaks your identity without

00:02:57,120 --> 00:02:59,599
making it clear that that's what it's

00:02:58,879 --> 00:03:03,200
doing

00:02:59,599 --> 00:03:06,879
as far as part of its helpful features

00:03:03,200 --> 00:03:10,480
secondly this is a great example of

00:03:06,879 --> 00:03:12,879
reverse engineering and any piece of

00:03:10,480 --> 00:03:16,159
software was created by people

00:03:12,879 --> 00:03:17,440
at least for now and then because of

00:03:16,159 --> 00:03:20,480
that we can

00:03:17,440 --> 00:03:23,519
look at it and understand

00:03:20,480 --> 00:03:25,280
aspects of it we can do engineering in

00:03:23,519 --> 00:03:26,959
the reverse or

00:03:25,280 --> 00:03:28,480
look at an artifact that a piece of

00:03:26,959 --> 00:03:30,879
software produced and

00:03:28,480 --> 00:03:32,560
look for clues or apply use other

00:03:30,879 --> 00:03:35,280
software to kind of

00:03:32,560 --> 00:03:36,640
step back maybe how it was uh created

00:03:35,280 --> 00:03:38,720
and then lastly

00:03:36,640 --> 00:03:40,480
we're going to explore some command line

00:03:38,720 --> 00:03:43,200
goodies these are tools that i

00:03:40,480 --> 00:03:45,120
found that are helpful for interactively

00:03:43,200 --> 00:03:46,000
exploring some of these file formats as

00:03:45,120 --> 00:03:48,959
well as

00:03:46,000 --> 00:03:49,280
the concepts or just general practices

00:03:48,959 --> 00:03:51,120
of

00:03:49,280 --> 00:03:52,799
maybe what you've heard is called unix

00:03:51,120 --> 00:03:55,680
programming the shell

00:03:52,799 --> 00:03:56,640
is incredibly powerful but like many

00:03:55,680 --> 00:03:58,720
power tools

00:03:56,640 --> 00:04:00,080
it can be overwhelming or there can be

00:03:58,720 --> 00:04:03,360
too much information

00:04:00,080 --> 00:04:06,720
at first which negates the usability

00:04:03,360 --> 00:04:09,280
or how much usefulness you'll find

00:04:06,720 --> 00:04:10,879
and so if you want to follow along or if

00:04:09,280 --> 00:04:13,840
you want to just grab the repo

00:04:10,879 --> 00:04:14,879
i posted the link in the chat this is

00:04:13,840 --> 00:04:18,880
also

00:04:14,879 --> 00:04:21,440
the just clone url for https um

00:04:18,880 --> 00:04:23,120
yeah let's dive in so the first kind of

00:04:21,440 --> 00:04:25,280
document i want to talk about is

00:04:23,120 --> 00:04:29,199
microsoft office documents

00:04:25,280 --> 00:04:32,720
and these are ubiquitous and

00:04:29,199 --> 00:04:35,840
what they are is an archive of

00:04:32,720 --> 00:04:39,120
xml files xml being

00:04:35,840 --> 00:04:41,520
a markup language that's

00:04:39,120 --> 00:04:42,560
maybe not as popular now but it's still

00:04:41,520 --> 00:04:45,040
everywhere

00:04:42,560 --> 00:04:46,880
and what's interesting with microsoft

00:04:45,040 --> 00:04:49,919
office documents is

00:04:46,880 --> 00:04:52,560
the modern standard has

00:04:49,919 --> 00:04:54,479
tons of xml files and all you need to do

00:04:52,560 --> 00:04:55,840
is unzip it and then you can start kind

00:04:54,479 --> 00:04:56,639
of exploring and so that's what we're

00:04:55,840 --> 00:05:00,160
going to do

00:04:56,639 --> 00:05:02,639
using two tools unzip which is a

00:05:00,160 --> 00:05:03,680
basic unix utility and then new shell

00:05:02,639 --> 00:05:06,880
which is a

00:05:03,680 --> 00:05:08,960
project newer project that has some of

00:05:06,880 --> 00:05:10,000
the best ideas from say powershell on

00:05:08,960 --> 00:05:13,199
windows but also

00:05:10,000 --> 00:05:16,240
the unix philosophy of pipes and i just

00:05:13,199 --> 00:05:19,759
found it really helpful for

00:05:16,240 --> 00:05:22,000
interacting with the uh the actual

00:05:19,759 --> 00:05:24,960
document without having to do

00:05:22,000 --> 00:05:25,759
you know custom programming if you will

00:05:24,960 --> 00:05:28,400
and so

00:05:25,759 --> 00:05:30,080
the first question i wanted to explore

00:05:28,400 --> 00:05:33,120
when it came to a document

00:05:30,080 --> 00:05:36,000
is who wrote this document

00:05:33,120 --> 00:05:38,080
um it's kind of a basic question

00:05:36,000 --> 00:05:39,440
oftentimes these documents are going to

00:05:38,080 --> 00:05:42,000
be

00:05:39,440 --> 00:05:43,440
published as with an author but in our

00:05:42,000 --> 00:05:46,240
case like let's just

00:05:43,440 --> 00:05:49,199
let's just start with this question so

00:05:46,240 --> 00:05:52,400
click over the item

00:05:49,199 --> 00:05:53,520
and so in the repo if you have it

00:05:52,400 --> 00:05:55,199
checked out or if you don't

00:05:53,520 --> 00:05:56,800
you're going to see there's a files

00:05:55,199 --> 00:06:00,000
directory and this is

00:05:56,800 --> 00:06:00,800
where i've kind of selected a few assets

00:06:00,000 --> 00:06:04,240
beforehand

00:06:00,800 --> 00:06:05,520
so what i'm going to do is create a

00:06:04,240 --> 00:06:09,600
directory

00:06:05,520 --> 00:06:09,600
that we can use to explore this

00:06:11,360 --> 00:06:15,199
i'm going to awkwardly stop talking

00:06:13,199 --> 00:06:15,600
because i cannot multitask when i do

00:06:15,199 --> 00:06:19,120
this

00:06:15,600 --> 00:06:21,360
so but the first step is i'm going to

00:06:19,120 --> 00:06:24,720
grab this file

00:06:21,360 --> 00:06:27,600
into another directory just for clarity

00:06:24,720 --> 00:06:28,400
so we can easily see kind of what's

00:06:27,600 --> 00:06:32,479
going on and

00:06:28,400 --> 00:06:35,520
and so the tool that i'm using is unzip

00:06:32,479 --> 00:06:36,720
but you'll notice um by itself it's

00:06:35,520 --> 00:06:39,440
telling me i can't

00:06:36,720 --> 00:06:40,880
actually grab that file even though i

00:06:39,440 --> 00:06:44,160
know it's there

00:06:40,880 --> 00:06:46,400
so what i end up doing is usually just

00:06:44,160 --> 00:06:49,039
a little work around because i know this

00:06:46,400 --> 00:06:52,080
is a zip archive if it's a valid

00:06:49,039 --> 00:06:53,520
word document and sure enough i can pass

00:06:52,080 --> 00:06:56,479
it to unzip and it

00:06:53,520 --> 00:06:57,599
just does that and unzip helpfully

00:06:56,479 --> 00:07:00,720
prints out a

00:06:57,599 --> 00:07:02,800
few of these pieces that

00:07:00,720 --> 00:07:04,639
are composing the document and there's a

00:07:02,800 --> 00:07:06,880
whole specification behind this but

00:07:04,639 --> 00:07:08,319
again like i'm not i'm not giving a

00:07:06,880 --> 00:07:11,440
lecture on the specification

00:07:08,319 --> 00:07:13,280
and don't worry because it's a document

00:07:11,440 --> 00:07:16,560
that's 9 000 pages long

00:07:13,280 --> 00:07:17,199
light reading instead let's check out

00:07:16,560 --> 00:07:20,479
some of the

00:07:17,199 --> 00:07:21,120
files in doc props so specifically let's

00:07:20,479 --> 00:07:24,400
check out

00:07:21,120 --> 00:07:27,759
core you can see it's

00:07:24,400 --> 00:07:30,960
pretty gnarly there's a lot of

00:07:27,759 --> 00:07:34,800
stuff there i'm not terribly interested

00:07:30,960 --> 00:07:36,319
in seeing what's in there and so i think

00:07:34,800 --> 00:07:38,240
what we're going to do now is just

00:07:36,319 --> 00:07:40,800
switch over to the the

00:07:38,240 --> 00:07:43,280
new shell and again this is just going

00:07:40,800 --> 00:07:46,720
to give us a little bit

00:07:43,280 --> 00:07:49,759
better way of exploring this

00:07:46,720 --> 00:07:51,599
this structure without having to do

00:07:49,759 --> 00:07:54,080
custom programming ourselves

00:07:51,599 --> 00:07:55,840
so you'll notice i'm opening it using so

00:07:54,080 --> 00:07:57,120
i've entered into the new shell from my

00:07:55,840 --> 00:07:59,280
other shell and i'm

00:07:57,120 --> 00:08:00,400
opening this up and it's giving me like

00:07:59,280 --> 00:08:03,680
some properties

00:08:00,400 --> 00:08:05,360
that i can actually um use to

00:08:03,680 --> 00:08:06,879
explore and so i'm just going to kind of

00:08:05,360 --> 00:08:08,560
interactively build you can see my

00:08:06,879 --> 00:08:10,720
shell's already auto-completing

00:08:08,560 --> 00:08:12,000
but i just kind of want to show this

00:08:10,720 --> 00:08:14,560
example of how

00:08:12,000 --> 00:08:16,479
you can kind of just start traversing

00:08:14,560 --> 00:08:19,680
the xml structure

00:08:16,479 --> 00:08:22,080
without necessarily um yeah having all

00:08:19,680 --> 00:08:25,440
these auxiliary tools and so

00:08:22,080 --> 00:08:28,479
inside of the doc props folder in

00:08:25,440 --> 00:08:32,240
a word document there's a core xml file

00:08:28,479 --> 00:08:34,399
and it has a tree of different

00:08:32,240 --> 00:08:35,839
keywords and so as you can tell like

00:08:34,399 --> 00:08:40,080
we're just grabbing

00:08:35,839 --> 00:08:42,000
this specific property and then we're

00:08:40,080 --> 00:08:43,919
looking at what's inside it and there is

00:08:42,000 --> 00:08:46,160
some kind of nesting structure

00:08:43,919 --> 00:08:48,880
and here these are pretty clear so we've

00:08:46,160 --> 00:08:51,839
got title subject keywords description

00:08:48,880 --> 00:08:53,040
created and so in this case uh let's

00:08:51,839 --> 00:08:57,120
let's check out

00:08:53,040 --> 00:09:00,320
the creator and the way you do that

00:08:57,120 --> 00:09:00,720
is just by using dot notation in this

00:09:00,320 --> 00:09:03,519
case

00:09:00,720 --> 00:09:04,320
yeah there's you can see there's a lot

00:09:03,519 --> 00:09:07,360
going on

00:09:04,320 --> 00:09:11,440
and so sure enough the creator

00:09:07,360 --> 00:09:14,480
is listed as me even though i

00:09:11,440 --> 00:09:15,279
created this document using microsoft

00:09:14,480 --> 00:09:18,480
office's

00:09:15,279 --> 00:09:20,240
online web application and it's not

00:09:18,480 --> 00:09:22,080
necessarily clear that it's actually

00:09:20,240 --> 00:09:24,000
encoding your

00:09:22,080 --> 00:09:25,200
username or actually it's not even your

00:09:24,000 --> 00:09:28,080
username it's your

00:09:25,200 --> 00:09:30,160
your name so it's not something i was

00:09:28,080 --> 00:09:32,080
interested in

00:09:30,160 --> 00:09:33,360
sharing necessarily especially if this

00:09:32,080 --> 00:09:35,760
was a manifesto

00:09:33,360 --> 00:09:37,440
meant to be anonymous you can also see

00:09:35,760 --> 00:09:38,160
there was another property called last

00:09:37,440 --> 00:09:41,279
modified

00:09:38,160 --> 00:09:44,240
and that's also divulging

00:09:41,279 --> 00:09:46,320
or encoding whoever last modified this

00:09:44,240 --> 00:09:50,240
document presumably

00:09:46,320 --> 00:09:53,600
and so this is a kind of rough example

00:09:50,240 --> 00:09:55,839
if you want to look at the

00:09:53,600 --> 00:09:58,080
the actual commands that i listed there

00:09:55,839 --> 00:10:00,320
there is a folder called snippets

00:09:58,080 --> 00:10:01,760
in the repositories so if i go i've

00:10:00,320 --> 00:10:04,959
checked this out to

00:10:01,760 --> 00:10:06,880
public solution for metadata and in here

00:10:04,959 --> 00:10:09,680
there's uh files that would be of

00:10:06,880 --> 00:10:13,120
interest would be our docx

00:10:09,680 --> 00:10:13,440
who and then we'll we'll also jump on to

00:10:13,120 --> 00:10:15,600
the

00:10:13,440 --> 00:10:17,519
the next thing looking at when this

00:10:15,600 --> 00:10:21,760
document was created so

00:10:17,519 --> 00:10:22,560
um next yeah so the next bit here is

00:10:21,760 --> 00:10:25,600
just kind of

00:10:22,560 --> 00:10:27,839
same idea so we looked at the creator

00:10:25,600 --> 00:10:29,680
last modified by and if we go back we

00:10:27,839 --> 00:10:33,279
can explore

00:10:29,680 --> 00:10:37,279
what are the other keywords

00:10:33,279 --> 00:10:38,640
and so in this case we can grab um

00:10:37,279 --> 00:10:40,399
i'm just going to do this because i'm

00:10:38,640 --> 00:10:43,279
tired of that tab completion

00:10:40,399 --> 00:10:45,200
let's do our created and i'm going to

00:10:43,279 --> 00:10:48,240
clear my terminal

00:10:45,200 --> 00:10:51,360
and created and modified as well

00:10:48,240 --> 00:10:51,360
so they also have

00:10:51,600 --> 00:10:56,720
all right so you can tell they were yeah

00:10:54,800 --> 00:10:58,000
i created it one day modified it the

00:10:56,720 --> 00:11:01,519
next i think i

00:10:58,000 --> 00:11:04,880
rewrote the text so lots there

00:11:01,519 --> 00:11:06,959
we can explore there's uh

00:11:04,880 --> 00:11:09,360
the content of the document but again

00:11:06,959 --> 00:11:13,040
we're we're exploring metadata

00:11:09,360 --> 00:11:16,320
and we're just concerned with what's

00:11:13,040 --> 00:11:18,000
the data about the data what's here

00:11:16,320 --> 00:11:20,000
and you might be familiar with

00:11:18,000 --> 00:11:23,760
libreoffice as well

00:11:20,000 --> 00:11:25,040
and both office documents and

00:11:23,760 --> 00:11:27,839
microsoft office documents and

00:11:25,040 --> 00:11:28,959
libreoffice documents are similar they

00:11:27,839 --> 00:11:32,480
they're an archive

00:11:28,959 --> 00:11:35,600
of xml files and the assets embedded

00:11:32,480 --> 00:11:37,360
that could be html or images or styles

00:11:35,600 --> 00:11:38,640
for how the fonts display or fonts

00:11:37,360 --> 00:11:40,720
themselves

00:11:38,640 --> 00:11:42,320
there's a competing specification for

00:11:40,720 --> 00:11:45,200
libreoffice documents but

00:11:42,320 --> 00:11:49,120
the same strategy we used here you could

00:11:45,200 --> 00:11:49,120
use with a libreoffice document

00:11:49,200 --> 00:11:53,839
so the next topic is pdfs or portable

00:11:53,200 --> 00:11:57,279
document

00:11:53,839 --> 00:12:01,200
formats i

00:11:57,279 --> 00:12:04,480
have used these a lot they're everywhere

00:12:01,200 --> 00:12:05,120
any kind of businessy software i feel

00:12:04,480 --> 00:12:07,200
like

00:12:05,120 --> 00:12:08,800
gives you some pdf because you have this

00:12:07,200 --> 00:12:10,000
guarantee that it's not going to change

00:12:08,800 --> 00:12:13,600
and that that's a relatively

00:12:10,000 --> 00:12:17,200
static format

00:12:13,600 --> 00:12:20,160
yet the specification

00:12:17,200 --> 00:12:21,040
created by adobe actually allows

00:12:20,160 --> 00:12:23,600
javascript

00:12:21,040 --> 00:12:24,079
which was pretty surprising to me

00:12:23,600 --> 00:12:26,480
because

00:12:24,079 --> 00:12:29,680
again i've always assumed that these

00:12:26,480 --> 00:12:29,680
documents are simply

00:12:30,399 --> 00:12:33,600
static and aren't going to do anything

00:12:32,160 --> 00:12:36,639
and i stumbled across

00:12:33,600 --> 00:12:39,200
this individual's blog didier stevens

00:12:36,639 --> 00:12:40,399
and he blogs a lot about malware

00:12:39,200 --> 00:12:42,320
analysis and so

00:12:40,399 --> 00:12:43,920
i'm gonna use a couple of his python

00:12:42,320 --> 00:12:46,959
tools because they're

00:12:43,920 --> 00:12:50,639
pretty simple or they're just prototypes

00:12:46,959 --> 00:12:52,480
um and they i think have uh

00:12:50,639 --> 00:12:54,560
an interesting like simple way of just

00:12:52,480 --> 00:12:56,639
kind of showing you maybe how to start

00:12:54,560 --> 00:12:59,279
peeking under the hood of an actual pdf

00:12:56,639 --> 00:13:01,600
document and so the first

00:12:59,279 --> 00:13:02,320
question that i have about a pdf

00:13:01,600 --> 00:13:05,519
document

00:13:02,320 --> 00:13:09,680
is what does it contain

00:13:05,519 --> 00:13:12,639
automatic behavior and

00:13:09,680 --> 00:13:13,519
javascript is scripting language

00:13:12,639 --> 00:13:15,279
programming

00:13:13,519 --> 00:13:17,360
and we'll get to that as a second

00:13:15,279 --> 00:13:20,560
question but what i learned

00:13:17,360 --> 00:13:24,560
investigating this for the talk is that

00:13:20,560 --> 00:13:27,360
part of how pdfs

00:13:24,560 --> 00:13:28,079
are malicious in some cases is they have

00:13:27,360 --> 00:13:30,560
automatic

00:13:28,079 --> 00:13:32,959
actions which are these instructions

00:13:30,560 --> 00:13:34,240
inside of a pdf that say open a web

00:13:32,959 --> 00:13:36,959
browser or

00:13:34,240 --> 00:13:37,600
do something whenev whenever the user

00:13:36,959 --> 00:13:40,480
you know

00:13:37,600 --> 00:13:41,839
saves it like these kind of things which

00:13:40,480 --> 00:13:45,120
you as the user

00:13:41,839 --> 00:13:47,199
may not realize and that maybe

00:13:45,120 --> 00:13:48,160
at one point somebody said hey wouldn't

00:13:47,199 --> 00:13:50,240
it be wonderful

00:13:48,160 --> 00:13:51,600
if we did this for the user to be

00:13:50,240 --> 00:13:54,160
helpful

00:13:51,600 --> 00:13:56,000
and yet people who don't want to be

00:13:54,160 --> 00:13:59,040
helpful are using those same

00:13:56,000 --> 00:14:01,680
things and so the

00:13:59,040 --> 00:14:03,600
the way we're going to look at that is

00:14:01,680 --> 00:14:07,040
we're going to grab

00:14:03,600 --> 00:14:10,079
and go back to public so

00:14:07,040 --> 00:14:14,959
i should note that the pdf

00:14:10,079 --> 00:14:17,199
tools are not versioned and so

00:14:14,959 --> 00:14:18,800
you'll need to if you're following along

00:14:17,199 --> 00:14:21,519
or if you uh follow along

00:14:18,800 --> 00:14:23,199
later you'll need to actually um grab

00:14:21,519 --> 00:14:26,720
those from that blog post

00:14:23,199 --> 00:14:28,160
um and this is in the how-to guides i'll

00:14:26,720 --> 00:14:31,360
just note this real quick

00:14:28,160 --> 00:14:32,079
in um the sleuthing for metadata how-to

00:14:31,360 --> 00:14:35,199
guides

00:14:32,079 --> 00:14:36,720
there's uh installing tools markdown and

00:14:35,199 --> 00:14:39,279
that that explains sort of

00:14:36,720 --> 00:14:40,639
a lot of the assumptions that uh the

00:14:39,279 --> 00:14:43,040
software tools that

00:14:40,639 --> 00:14:45,519
i expected you to have installed and

00:14:43,040 --> 00:14:48,959
whatnot so that has the link to the

00:14:45,519 --> 00:14:52,560
um pdf tools and so i

00:14:48,959 --> 00:14:56,399
in advance had created um

00:14:52,560 --> 00:15:00,880
another directory where i

00:14:56,399 --> 00:15:04,720
downloaded the zip file from dda's blog

00:15:00,880 --> 00:15:06,720
with his various uh pieces and so

00:15:04,720 --> 00:15:09,120
what i'm gonna do here is uh one of

00:15:06,720 --> 00:15:12,160
these tools is called pdf parser

00:15:09,120 --> 00:15:12,880
again it's just a standalone pdf or

00:15:12,160 --> 00:15:15,279
excuse me

00:15:12,880 --> 00:15:18,240
python script and you should know this

00:15:15,279 --> 00:15:20,399
is python 2.x so if you have python 3

00:15:18,240 --> 00:15:21,360
on your system i don't know if this

00:15:20,399 --> 00:15:23,279
would work

00:15:21,360 --> 00:15:25,199
um but nonetheless you can just follow

00:15:23,279 --> 00:15:28,720
along so what we're going to

00:15:25,199 --> 00:15:32,480
we're gonna check out is using this pdf

00:15:28,720 --> 00:15:36,000
uh parser to search for

00:15:32,480 --> 00:15:38,800
um an object

00:15:36,000 --> 00:15:39,440
and that's that's parlance for what

00:15:38,800 --> 00:15:42,399
kinds of

00:15:39,440 --> 00:15:44,160
instructions or how this document is

00:15:42,399 --> 00:15:47,120
composed and so without

00:15:44,160 --> 00:15:49,680
again jumping into adobe's pd

00:15:47,120 --> 00:15:51,600
specification for pdfs we also can use

00:15:49,680 --> 00:15:52,720
a tool like this to sort of inductively

00:15:51,600 --> 00:15:56,399
learn about

00:15:52,720 --> 00:15:59,199
what the structure is

00:15:56,399 --> 00:16:00,480
so we're going to do search actually i'm

00:15:59,199 --> 00:16:03,199
going to pull this up here

00:16:00,480 --> 00:16:07,519
search action and you'll notice we'll

00:16:03,199 --> 00:16:10,000
have to use this forward slash notation

00:16:07,519 --> 00:16:13,040
and we're going to go to publix solution

00:16:10,000 --> 00:16:15,680
for metadata files and i again created

00:16:13,040 --> 00:16:17,120
in advance in the files directory of our

00:16:15,680 --> 00:16:20,880
repository a

00:16:17,120 --> 00:16:23,279
file called hello pdf and so this is

00:16:20,880 --> 00:16:25,199
our canned example but what we're going

00:16:23,279 --> 00:16:28,639
to do is look for

00:16:25,199 --> 00:16:32,000
an action and sure enough there is an

00:16:28,639 --> 00:16:36,000
action and this tool kind of gives us a

00:16:32,000 --> 00:16:38,880
printout of the type

00:16:36,000 --> 00:16:40,399
and then javascript and so that kind of

00:16:38,880 --> 00:16:42,880
leads to the second question

00:16:40,399 --> 00:16:44,560
is well does it contain javascript and

00:16:42,880 --> 00:16:47,839
reading around

00:16:44,560 --> 00:16:48,959
most malicious pdf documents according

00:16:47,839 --> 00:16:52,720
to i think the author

00:16:48,959 --> 00:16:54,000
of a more advanced pdf and malware

00:16:52,720 --> 00:16:57,440
analysis tool

00:16:54,000 --> 00:17:00,320
said that it's going to have actions

00:16:57,440 --> 00:17:01,360
and javascript so they often travel

00:17:00,320 --> 00:17:04,000
together

00:17:01,360 --> 00:17:06,000
if you will when it comes to being

00:17:04,000 --> 00:17:07,760
malicious or trying to do something that

00:17:06,000 --> 00:17:11,679
you wouldn't want it to do

00:17:07,760 --> 00:17:15,520
and so similarly we can

00:17:11,679 --> 00:17:18,400
actually just search for javascript

00:17:15,520 --> 00:17:21,199
as the instruction so this is a kind of

00:17:18,400 --> 00:17:24,000
like a fuzzy search

00:17:21,199 --> 00:17:24,720
you can look for different pieces of

00:17:24,000 --> 00:17:27,679
this

00:17:24,720 --> 00:17:27,679
and so in this case

00:17:28,000 --> 00:17:34,960
i should also note that real pdfs

00:17:31,520 --> 00:17:38,080
that are malicious often

00:17:34,960 --> 00:17:42,080
encode the word javascript

00:17:38,080 --> 00:17:45,200
differently so this this example was

00:17:42,080 --> 00:17:46,480
contrived i just created this to make it

00:17:45,200 --> 00:17:48,400
easy and

00:17:46,480 --> 00:17:50,000
make me look like i know what i'm doing

00:17:48,400 --> 00:17:53,520
on this talk but

00:17:50,000 --> 00:17:56,080
in the wild there's other aspects of the

00:17:53,520 --> 00:17:59,200
specification for portable documents

00:17:56,080 --> 00:18:00,240
that allow you to encode parts of this

00:17:59,200 --> 00:18:02,240
document differently

00:18:00,240 --> 00:18:04,000
and remember that as the character

00:18:02,240 --> 00:18:06,240
encoding so

00:18:04,000 --> 00:18:08,080
you could actually have a pdf that has

00:18:06,240 --> 00:18:10,559
malicious javascript or has some kind of

00:18:08,080 --> 00:18:12,160
weird behavior but it doesn't say

00:18:10,559 --> 00:18:15,520
javascript it would say like

00:18:12,160 --> 00:18:17,919
j and then percent dollar something uh

00:18:15,520 --> 00:18:18,720
other encoding characters and that would

00:18:17,919 --> 00:18:22,320
that would be

00:18:18,720 --> 00:18:22,960
just as valid um and the the last bit i

00:18:22,320 --> 00:18:26,480
want to

00:18:22,960 --> 00:18:26,480
emphasize here is

00:18:26,640 --> 00:18:30,320
will this always execute so what i did

00:18:29,280 --> 00:18:33,440
is i created that

00:18:30,320 --> 00:18:36,000
and we can see it says js hello world um

00:18:33,440 --> 00:18:37,679
presumably that's going to say something

00:18:36,000 --> 00:18:41,360
like hello world but

00:18:37,679 --> 00:18:43,200
um if i open this file um

00:18:41,360 --> 00:18:45,200
so i'm going to quit out of my shell

00:18:43,200 --> 00:18:48,000
because i actually don't want to open it

00:18:45,200 --> 00:18:49,120
using the new shell i want to use a

00:18:48,000 --> 00:18:52,640
utility on mac

00:18:49,120 --> 00:18:55,039
called open which would delegate to

00:18:52,640 --> 00:18:56,640
the preview application on mac and so

00:18:55,039 --> 00:18:59,919
here

00:18:56,640 --> 00:19:02,960
unfortunately we don't get any pop-up

00:18:59,919 --> 00:19:05,520
that says hello world and that

00:19:02,960 --> 00:19:06,000
really brings me to the close of talking

00:19:05,520 --> 00:19:09,520
about

00:19:06,000 --> 00:19:11,360
the pdfs and their structure

00:19:09,520 --> 00:19:12,720
when it comes to say malicious behavior

00:19:11,360 --> 00:19:15,600
or javascript is that it's

00:19:12,720 --> 00:19:17,039
all dependent on the viewer on your

00:19:15,600 --> 00:19:19,600
client

00:19:17,039 --> 00:19:21,280
opening this file and so mac os has its

00:19:19,600 --> 00:19:22,960
own preview application which is

00:19:21,280 --> 00:19:26,000
implemented enough of the specification

00:19:22,960 --> 00:19:29,039
to be able to you know look through this

00:19:26,000 --> 00:19:32,400
that's great um i from what i

00:19:29,039 --> 00:19:35,360
read most examples of malicious

00:19:32,400 --> 00:19:37,600
behavior were actually in older versions

00:19:35,360 --> 00:19:38,000
of adobe acrobat so maybe typically on a

00:19:37,600 --> 00:19:40,480
windows

00:19:38,000 --> 00:19:42,240
environment so just something to know if

00:19:40,480 --> 00:19:45,360
you are curious about the

00:19:42,240 --> 00:19:47,280
malicious pdfs and how that actually

00:19:45,360 --> 00:19:48,720
works like how it would actually execute

00:19:47,280 --> 00:19:49,840
or what kinds of things you might be

00:19:48,720 --> 00:19:52,160
able to do

00:19:49,840 --> 00:19:53,919
if you encoded maybe not just a simple

00:19:52,160 --> 00:19:56,000
hello message but like an action open a

00:19:53,919 --> 00:19:59,039
web browser navigate to this

00:19:56,000 --> 00:20:01,200
this url that sort of thing

00:19:59,039 --> 00:20:03,039
and the last section that or the last

00:20:01,200 --> 00:20:06,320
kinds of documents that i wanted to

00:20:03,039 --> 00:20:07,360
explore on this talk were images so

00:20:06,320 --> 00:20:10,480
digital images

00:20:07,360 --> 00:20:11,280
and there's a fantastic utility which

00:20:10,480 --> 00:20:13,760
we're gonna

00:20:11,280 --> 00:20:15,120
kind of end our our discussion on which

00:20:13,760 --> 00:20:17,280
is exif tool

00:20:15,120 --> 00:20:19,120
uh and so i've linked to this again i

00:20:17,280 --> 00:20:20,240
i've already installed it on my system

00:20:19,120 --> 00:20:24,080
so i'll kind of cheat

00:20:20,240 --> 00:20:27,600
and be able to work ahead but it's a

00:20:24,080 --> 00:20:31,280
utility written in perl for

00:20:27,600 --> 00:20:35,200
extracting and

00:20:31,280 --> 00:20:38,400
modifying exif data

00:20:35,200 --> 00:20:41,440
or exit metadata rather and exif is

00:20:38,400 --> 00:20:44,799
uh another format that

00:20:41,440 --> 00:20:48,159
is xml and it encodes various

00:20:44,799 --> 00:20:51,120
details about images and

00:20:48,159 --> 00:20:52,159
and even other other documents and so

00:20:51,120 --> 00:20:55,039
with images

00:20:52,159 --> 00:20:57,280
uh it'll encode many of the details

00:20:55,039 --> 00:21:00,320
around what kind of camera

00:20:57,280 --> 00:21:03,200
what kind of uh

00:21:00,320 --> 00:21:04,400
shutter stop like those sorts of details

00:21:03,200 --> 00:21:05,440
that are pertinent if you're interested

00:21:04,400 --> 00:21:08,159
in photography or if you

00:21:05,440 --> 00:21:09,360
kind of want to analyze that and so what

00:21:08,159 --> 00:21:12,480
we're going to do again is

00:21:09,360 --> 00:21:12,960
just more inductively the one question i

00:21:12,480 --> 00:21:16,640
had is

00:21:12,960 --> 00:21:19,760
what device took this picture so

00:21:16,640 --> 00:21:21,280
there's a couple ways to like explore

00:21:19,760 --> 00:21:24,799
this i mean in our case

00:21:21,280 --> 00:21:28,400
again we'll jump back into our terminal

00:21:24,799 --> 00:21:30,960
and i'm going to go back into the public

00:21:28,400 --> 00:21:33,200
folder where i've cloned this repository

00:21:30,960 --> 00:21:38,320
and i'm going to

00:21:33,200 --> 00:21:38,320
look at one of the snippets

00:21:39,919 --> 00:21:44,159
and what we're going to do is look at a

00:21:42,960 --> 00:21:47,679
couple of these things

00:21:44,159 --> 00:21:49,200
combined and so

00:21:47,679 --> 00:21:50,799
this one's we're going to do this a

00:21:49,200 --> 00:21:54,159
little bit differently

00:21:50,799 --> 00:21:54,159
and i'll just go ahead and

00:21:55,679 --> 00:21:59,600
grab these first couple lines so this

00:21:58,159 --> 00:22:01,360
this one i thought was kind of fun so

00:21:59,600 --> 00:22:04,000
actually

00:22:01,360 --> 00:22:05,600
i submitted my headshot because i spoke

00:22:04,000 --> 00:22:08,320
last year but i was curious oh

00:22:05,600 --> 00:22:10,720
i didn't even think about maybe when i

00:22:08,320 --> 00:22:14,000
took that picture or what i took it with

00:22:10,720 --> 00:22:17,360
um and so what i'm going to do is just

00:22:14,000 --> 00:22:20,640
use that same photo

00:22:17,360 --> 00:22:22,559
and we're going to look at to see what

00:22:20,640 --> 00:22:24,480
we can find and so this is actually if

00:22:22,559 --> 00:22:27,200
you go to cposk's website

00:22:24,480 --> 00:22:28,720
this is the picture of myself um please

00:22:27,200 --> 00:22:29,200
don't just go to the sites look at that

00:22:28,720 --> 00:22:32,880
but

00:22:29,200 --> 00:22:36,159
just i chose this as inside because

00:22:32,880 --> 00:22:37,760
i don't uh i have consent

00:22:36,159 --> 00:22:39,039
i i don't care if you look at this photo

00:22:37,760 --> 00:22:40,799
and try to divine like what sort of

00:22:39,039 --> 00:22:42,559
metadata has

00:22:40,799 --> 00:22:44,000
whereas like other documents if people

00:22:42,559 --> 00:22:45,840
don't know you're

00:22:44,000 --> 00:22:47,440
digging in it and it is potentially

00:22:45,840 --> 00:22:48,240
divulging i think that's an ethical

00:22:47,440 --> 00:22:50,240
issue that

00:22:48,240 --> 00:22:51,360
you should um contact them and get

00:22:50,240 --> 00:22:55,200
consent before you do

00:22:51,360 --> 00:22:59,280
anything but anyways so the

00:22:55,200 --> 00:23:03,360
structure of exif tool is that we can uh

00:22:59,280 --> 00:23:06,880
point it at a file and then

00:23:03,360 --> 00:23:10,080
run it and it'll just print out a ton

00:23:06,880 --> 00:23:11,440
of different uh pieces of information as

00:23:10,080 --> 00:23:14,480
you can see like there is a

00:23:11,440 --> 00:23:16,640
lot here and so to to answer

00:23:14,480 --> 00:23:17,520
our question is what device took this

00:23:16,640 --> 00:23:20,880
picture

00:23:17,520 --> 00:23:23,840
i'm looking for these two fields

00:23:20,880 --> 00:23:26,559
um called make and models so if i do

00:23:23,840 --> 00:23:30,159
exif tool

00:23:26,559 --> 00:23:34,880
ash and then the name of a tag

00:23:30,159 --> 00:23:37,120
we can see what what it might have

00:23:34,880 --> 00:23:38,080
and so i think here to make and let's

00:23:37,120 --> 00:23:41,200
see model

00:23:38,080 --> 00:23:44,640
or if it was yeah so in this case

00:23:41,200 --> 00:23:45,919
this jpeg that i you know passed on to

00:23:44,640 --> 00:23:49,440
cposk's

00:23:45,919 --> 00:23:54,559
team at some point last year

00:23:49,440 --> 00:23:56,480
has this metadata

00:23:54,559 --> 00:23:57,840
by default and it has it by default

00:23:56,480 --> 00:23:59,520
because well okay

00:23:57,840 --> 00:24:01,600
what device took this picture it looks

00:23:59,520 --> 00:24:05,440
like a canon camera

00:24:01,600 --> 00:24:08,640
eos digital rebel so my camera

00:24:05,440 --> 00:24:11,120
actually encoded this information

00:24:08,640 --> 00:24:12,720
into the image because um i can tell you

00:24:11,120 --> 00:24:15,919
i took that picture myself

00:24:12,720 --> 00:24:16,400
and i didn't consider that oh there's

00:24:15,919 --> 00:24:19,120
all this

00:24:16,400 --> 00:24:20,159
other information that's being stored

00:24:19,120 --> 00:24:23,279
here

00:24:20,159 --> 00:24:24,000
and so um kind of with that like we can

00:24:23,279 --> 00:24:28,320
look at

00:24:24,000 --> 00:24:31,520
maybe when the picture was taken and so

00:24:28,320 --> 00:24:32,080
again if we do exif tool and just kind

00:24:31,520 --> 00:24:35,279
of

00:24:32,080 --> 00:24:37,600
grab the whole uh output

00:24:35,279 --> 00:24:39,679
let's maybe do look for something like

00:24:37,600 --> 00:24:43,279
created and i'm using

00:24:39,679 --> 00:24:45,279
uh a

00:24:43,279 --> 00:24:46,400
filter called rip graph it's like a

00:24:45,279 --> 00:24:49,279
version of grep

00:24:46,400 --> 00:24:50,559
just to simplify the output here so it

00:24:49,279 --> 00:24:51,120
looks like we could look at something

00:24:50,559 --> 00:24:53,919
like

00:24:51,120 --> 00:24:55,840
create create date um there's also a

00:24:53,919 --> 00:24:58,880
couple different fields so

00:24:55,840 --> 00:25:00,880
it looks like they split it out by

00:24:58,880 --> 00:25:02,000
a time stamp versus a create date so

00:25:00,880 --> 00:25:05,200
anyways

00:25:02,000 --> 00:25:07,600
let's just try grabbing that um

00:25:05,200 --> 00:25:10,159
and i think you want to use a sort of

00:25:07,600 --> 00:25:14,799
camel case notation for these

00:25:10,159 --> 00:25:18,400
um let me try it

00:25:14,799 --> 00:25:21,360
you don't have to but um the

00:25:18,400 --> 00:25:22,799
point here is you again similar yeah so

00:25:21,360 --> 00:25:25,840
it looks like you have to use

00:25:22,799 --> 00:25:26,880
um maybe a camel cased version axis man

00:25:25,840 --> 00:25:28,799
page slash

00:25:26,880 --> 00:25:30,720
the website has great documentation so

00:25:28,799 --> 00:25:31,679
you can definitely dig into that to see

00:25:30,720 --> 00:25:34,720
maybe more

00:25:31,679 --> 00:25:35,840
more of those details um and so we can

00:25:34,720 --> 00:25:37,600
tell that

00:25:35,840 --> 00:25:39,760
another tag we could see when it was

00:25:37,600 --> 00:25:44,720
created and uh

00:25:39,760 --> 00:25:44,720
lastly with these we can look at

00:25:45,039 --> 00:25:48,799
combining these questions and maybe

00:25:48,159 --> 00:25:51,760
telling

00:25:48,799 --> 00:25:53,760
a story so in this case in solution for

00:25:51,760 --> 00:25:57,200
metadata the snippets

00:25:53,760 --> 00:25:58,880
there's image story and it's just simple

00:25:57,200 --> 00:25:59,440
shell script that combines a couple of

00:25:58,880 --> 00:26:03,520
these

00:25:59,440 --> 00:26:03,520
and into a

00:26:03,760 --> 00:26:07,120
string and it just says on blank

00:26:05,840 --> 00:26:08,320
sometimes sam somebody took this

00:26:07,120 --> 00:26:11,360
photograph with a

00:26:08,320 --> 00:26:14,559
canon eos digital and again that

00:26:11,360 --> 00:26:17,279
that script it's in the repo

00:26:14,559 --> 00:26:18,640
but it uses another feature of exif tool

00:26:17,279 --> 00:26:20,799
that lets us

00:26:18,640 --> 00:26:21,760
create a template if you will and then

00:26:20,799 --> 00:26:25,279
substitute

00:26:21,760 --> 00:26:28,720
various of the xml

00:26:25,279 --> 00:26:32,480
tags that are the exif uh tags that are

00:26:28,720 --> 00:26:34,400
embedded in this image and so

00:26:32,480 --> 00:26:35,919
another another question we can kind of

00:26:34,400 --> 00:26:39,120
ask is

00:26:35,919 --> 00:26:42,080
with images is where was this

00:26:39,120 --> 00:26:42,960
picture taken and this is one i would

00:26:42,080 --> 00:26:46,960
encourage you

00:26:42,960 --> 00:26:50,320
to explore using a device that you have

00:26:46,960 --> 00:26:54,080
or if you have access to images that

00:26:50,320 --> 00:26:55,840
have gps encoded because i have

00:26:54,080 --> 00:26:57,840
all these privacy settings on my ios

00:26:55,840 --> 00:27:01,120
device so i couldn't actually see

00:26:57,840 --> 00:27:03,039
any of the um gps positioning

00:27:01,120 --> 00:27:04,799
uh which is which i guess is great

00:27:03,039 --> 00:27:08,400
because you can actually verify

00:27:04,799 --> 00:27:11,679
if it has that that data

00:27:08,400 --> 00:27:13,760
in it and so in this case

00:27:11,679 --> 00:27:15,919
i believe what we need to do if we want

00:27:13,760 --> 00:27:19,039
to look at

00:27:15,919 --> 00:27:22,159
whether or not this

00:27:19,039 --> 00:27:22,480
file has gps metadata is you can prefix

00:27:22,159 --> 00:27:25,919
the

00:27:22,480 --> 00:27:28,399
exif tool to search for um

00:27:25,919 --> 00:27:29,360
where this actually let's go files you

00:27:28,399 --> 00:27:32,320
could search for

00:27:29,360 --> 00:27:33,039
a class of tags and so in this case i

00:27:32,320 --> 00:27:37,120
believe the

00:27:33,039 --> 00:27:37,600
um gps uh filter might give us that so

00:27:37,120 --> 00:27:41,840
actually

00:27:37,600 --> 00:27:43,520
it looks like uh gps yeah so that is not

00:27:41,840 --> 00:27:44,720
the one that i was thinking of so we're

00:27:43,520 --> 00:27:49,279
just gonna

00:27:44,720 --> 00:27:49,279
pipe this to see if we can figure out

00:27:50,480 --> 00:27:54,000
yes it looks like this one

00:27:54,080 --> 00:27:58,799
okay this is the tag so actually

00:27:56,720 --> 00:28:01,360
slightly wrong there

00:27:58,799 --> 00:28:02,399
there's there's possibly a category that

00:28:01,360 --> 00:28:07,120
we could use

00:28:02,399 --> 00:28:11,520
but in this case this file has a single

00:28:07,120 --> 00:28:13,360
uh tag related to that which

00:28:11,520 --> 00:28:14,559
we can just remove the spaces it looks

00:28:13,360 --> 00:28:16,159
like and

00:28:14,559 --> 00:28:18,320
search for it so in this case it says

00:28:16,159 --> 00:28:19,600
it's unknown um and that's only the

00:28:18,320 --> 00:28:22,799
altitude reference

00:28:19,600 --> 00:28:25,679
so which presume would be like how

00:28:22,799 --> 00:28:26,880
high above sea level you are but anyways

00:28:25,679 --> 00:28:30,159
that's just something that

00:28:26,880 --> 00:28:31,919
you could further explore grabbing what

00:28:30,159 --> 00:28:33,840
tags are in an image and then seeing

00:28:31,919 --> 00:28:36,159
maybe which ones might divulge more

00:28:33,840 --> 00:28:40,159
information about where the

00:28:36,159 --> 00:28:43,200
photo was taken perhaps the coordinates

00:28:40,159 --> 00:28:44,399
and then as kind of a bonus you can use

00:28:43,200 --> 00:28:47,760
exif tool to

00:28:44,399 --> 00:28:51,360
uh parse pdfs as well the exif data or

00:28:47,760 --> 00:28:55,120
others um standard metadata which

00:28:51,360 --> 00:28:58,720
is another uh specification xmp

00:28:55,120 --> 00:29:02,159
so in this case i grabbed another

00:28:58,720 --> 00:29:03,679
format or another pdf so in files

00:29:02,159 --> 00:29:06,399
there's

00:29:03,679 --> 00:29:07,679
let's see here yeah it looks like

00:29:06,399 --> 00:29:12,000
there's another one

00:29:07,679 --> 00:29:13,679
and if we just do exif tool on here we

00:29:12,000 --> 00:29:16,320
can see there's a couple of

00:29:13,679 --> 00:29:16,880
uh other tags that might be of interest

00:29:16,320 --> 00:29:19,039
to us

00:29:16,880 --> 00:29:20,000
which are the creator and then the

00:29:19,039 --> 00:29:21,600
producer

00:29:20,000 --> 00:29:23,279
another thing like page couch might be

00:29:21,600 --> 00:29:26,559
kind of interesting but

00:29:23,279 --> 00:29:30,240
here again i just kind of combine this

00:29:26,559 --> 00:29:33,679
into let's look at maybe using that

00:29:30,240 --> 00:29:34,559
that template feature dash p and then a

00:29:33,679 --> 00:29:37,760
string to say

00:29:34,559 --> 00:29:39,600
hey on this time or date

00:29:37,760 --> 00:29:41,520
and time someone created this document

00:29:39,600 --> 00:29:45,840
with and then that's combining

00:29:41,520 --> 00:29:48,880
the producer and the creator

00:29:45,840 --> 00:29:51,520
fields which you can see here

00:29:48,880 --> 00:29:52,640
so those are yeah another couple

00:29:51,520 --> 00:29:54,960
examples

00:29:52,640 --> 00:29:55,840
again we can look at the author keyword

00:29:54,960 --> 00:29:59,760
as well

00:29:55,840 --> 00:30:02,480
um and in in this case

00:29:59,760 --> 00:30:04,240
these ones are uh i grabbed them from

00:30:02,480 --> 00:30:06,080
another open source repository so they

00:30:04,240 --> 00:30:08,880
aren't necessarily

00:30:06,080 --> 00:30:10,559
embedding this from an actual document

00:30:08,880 --> 00:30:13,039
producer but i did

00:30:10,559 --> 00:30:14,399
take a couple examples off files that i

00:30:13,039 --> 00:30:16,799
found on say

00:30:14,399 --> 00:30:18,080
a public government site where there's

00:30:16,799 --> 00:30:19,679
maybe

00:30:18,080 --> 00:30:22,000
departments publishing documents but

00:30:19,679 --> 00:30:24,960
they did actually like encode whoever's

00:30:22,000 --> 00:30:26,720
user um the user that created it which

00:30:24,960 --> 00:30:29,200
my guess is something like

00:30:26,720 --> 00:30:30,399
what we saw with our metadata manifesto

00:30:29,200 --> 00:30:32,799
at the beginning is that

00:30:30,399 --> 00:30:34,000
there's uh details that are maybe being

00:30:32,799 --> 00:30:37,600
encoded in there

00:30:34,000 --> 00:30:40,080
that i didn't expect um so again we

00:30:37,600 --> 00:30:41,760
kind of went through that but yeah

00:30:40,080 --> 00:30:44,799
otherwise

00:30:41,760 --> 00:30:47,919
the question here is well

00:30:44,799 --> 00:30:48,320
oh great you can explore you can extract

00:30:47,919 --> 00:30:51,039
but

00:30:48,320 --> 00:30:52,559
what's the point why might you care

00:30:51,039 --> 00:30:55,200
about this again

00:30:52,559 --> 00:30:56,559
what could we do with it and for me i

00:30:55,200 --> 00:30:59,600
think there's a couple of

00:30:56,559 --> 00:31:02,559
uh immediate takeaways is one you could

00:30:59,600 --> 00:31:04,080
uh use this scripting yourself if you

00:31:02,559 --> 00:31:06,480
like to

00:31:04,080 --> 00:31:07,919
do digital photography exif tool i'm

00:31:06,480 --> 00:31:10,240
sure you may have already heard of it

00:31:07,919 --> 00:31:13,039
but it's a wonderful tool for managing

00:31:10,240 --> 00:31:13,840
the metadata there another thing you

00:31:13,039 --> 00:31:17,039
could do is

00:31:13,840 --> 00:31:19,360
create privacy tools so

00:31:17,039 --> 00:31:20,880
again if there's obsession about data

00:31:19,360 --> 00:31:23,360
and about you know

00:31:20,880 --> 00:31:25,440
encoding everything but what about you

00:31:23,360 --> 00:31:26,640
know kind of pushing back against that

00:31:25,440 --> 00:31:29,519
tide why not

00:31:26,640 --> 00:31:31,360
create tools that actually purge this

00:31:29,519 --> 00:31:33,919
and so exif tool

00:31:31,360 --> 00:31:35,440
is a great way to do that you can

00:31:33,919 --> 00:31:40,000
actually

00:31:35,440 --> 00:31:43,760
overwrite i any of the exif data in

00:31:40,000 --> 00:31:45,600
an image by just doing dash all equals

00:31:43,760 --> 00:31:47,440
empty and then the file and so that's

00:31:45,600 --> 00:31:49,600
actually what i did for

00:31:47,440 --> 00:31:51,120
um another you know headshot that i

00:31:49,600 --> 00:31:52,320
uploaded to some other platform because

00:31:51,120 --> 00:31:55,039
i'm not sure

00:31:52,320 --> 00:31:56,480
or i don't want to necessarily allow

00:31:55,039 --> 00:31:58,880
other platforms to start

00:31:56,480 --> 00:32:02,320
now building models about my person

00:31:58,880 --> 00:32:04,640
based on whatever camera i used etc

00:32:02,320 --> 00:32:05,840
so yeah that's that's all i have so

00:32:04,640 --> 00:32:08,720
thank you for listening

00:32:05,840 --> 00:32:11,120
and uh sticking through i'm gonna stop

00:32:08,720 --> 00:32:13,120
my screen share so we don't

00:32:11,120 --> 00:32:15,840
descend into an infinite regress which

00:32:13,120 --> 00:32:19,039
it seems like it did

00:32:15,840 --> 00:32:20,880
and so here yeah we can take i'll take a

00:32:19,039 --> 00:32:22,799
couple questions

00:32:20,880 --> 00:32:24,640
to fill the timeout i think court was

00:32:22,799 --> 00:32:26,320
doing a wonderful job of keeping track

00:32:24,640 --> 00:32:27,519
because if i tried to keep track of

00:32:26,320 --> 00:32:29,840
those questions

00:32:27,519 --> 00:32:30,880
the talk would have gone even worse with

00:32:29,840 --> 00:32:33,200
every question

00:32:30,880 --> 00:32:34,559
eli it was it was great thanks and and

00:32:33,200 --> 00:32:35,919
honestly there wasn't a lot of there was

00:32:34,559 --> 00:32:37,440
a whole lot of chat but not a whole lot

00:32:35,919 --> 00:32:39,039
of questions being raised so

00:32:37,440 --> 00:32:41,519
great maybe people were saving them for

00:32:39,039 --> 00:32:44,559
the end most of the chat centered around

00:32:41,519 --> 00:32:47,840
um extracting or

00:32:44,559 --> 00:32:49,760
purging the the uh the data and like the

00:32:47,840 --> 00:32:50,480
implications of having all this metadata

00:32:49,760 --> 00:32:52,960
stored in

00:32:50,480 --> 00:32:53,840
social media sites and things like that

00:32:52,960 --> 00:32:55,200
um

00:32:53,840 --> 00:32:57,440
so you know thanks for touching on that

00:32:55,200 --> 00:33:00,480
at the end as well certainly

00:32:57,440 --> 00:33:01,840
so folks yeah uh if anyone does have any

00:33:00,480 --> 00:33:02,880
questions uh there are two different

00:33:01,840 --> 00:33:04,720
ways that you can ask

00:33:02,880 --> 00:33:06,000
one you could just drop a chat right in

00:33:04,720 --> 00:33:07,440
session uh

00:33:06,000 --> 00:33:09,440
sorry drop your message directly in the

00:33:07,440 --> 00:33:12,640
session chat uh and i will

00:33:09,440 --> 00:33:13,519
ask it for you um or you could dm me if

00:33:12,640 --> 00:33:16,240
you prefer

00:33:13,519 --> 00:33:16,960
um another option is just click the ask

00:33:16,240 --> 00:33:19,679
to share

00:33:16,960 --> 00:33:21,440
audio video link uh in the upper right

00:33:19,679 --> 00:33:22,799
and that will uh you know pop you up on

00:33:21,440 --> 00:33:24,000
this list and i can click it

00:33:22,799 --> 00:33:26,720
and you will be able to share and ask

00:33:24,000 --> 00:33:29,760
your question directly to eli

00:33:26,720 --> 00:33:32,240
so any questions

00:33:29,760 --> 00:33:33,279
and while we're queuing up questions so

00:33:32,240 --> 00:33:35,679
one of the snippets

00:33:33,279 --> 00:33:36,880
is purging the metadata and so again

00:33:35,679 --> 00:33:40,640
this is just a very

00:33:36,880 --> 00:33:41,519
trivial example of there's a unix shell

00:33:40,640 --> 00:33:43,120
script

00:33:41,519 --> 00:33:45,600
and here's how simple it is and that

00:33:43,120 --> 00:33:48,080
should work on any file so pdfs

00:33:45,600 --> 00:33:48,080
images

00:33:49,760 --> 00:33:53,279
because yeah that's that's kind of the

00:33:51,360 --> 00:33:53,919
first ah-ha for me was oh wait you can

00:33:53,279 --> 00:33:55,840
do this

00:33:53,919 --> 00:33:58,399
i'm going to remove all metadata from

00:33:55,840 --> 00:34:00,240
every file i ever produced and send

00:33:58,399 --> 00:34:01,840
now i just have to script it so that i

00:34:00,240 --> 00:34:03,840
don't have to remember

00:34:01,840 --> 00:34:06,559
to remove the metadata from every file

00:34:03,840 --> 00:34:08,560
that i'm sending

00:34:06,559 --> 00:34:09,919
yeah i have a question for you then uh

00:34:08,560 --> 00:34:12,960
do you know the

00:34:09,919 --> 00:34:14,720
um do you know offhand or have you

00:34:12,960 --> 00:34:15,839
looked into you know popular social

00:34:14,720 --> 00:34:17,200
media sites and all kinds of stuff and

00:34:15,839 --> 00:34:20,879
which ones actually purge

00:34:17,200 --> 00:34:25,280
this information from images you upload

00:34:20,879 --> 00:34:28,560
that's a great question i i'd be curious

00:34:25,280 --> 00:34:32,720
because i do see it as yeah

00:34:28,560 --> 00:34:34,800
leaking personal detail but

00:34:32,720 --> 00:34:36,720
part of me feels very cynical and i

00:34:34,800 --> 00:34:37,280
guess i i should suspend the cynicism

00:34:36,720 --> 00:34:39,679
right i

00:34:37,280 --> 00:34:41,280
i can't make a judgment or an assessment

00:34:39,679 --> 00:34:45,359
about the engineering efforts or

00:34:41,280 --> 00:34:46,159
intent to a platform like facebook um i

00:34:45,359 --> 00:34:49,200
do

00:34:46,159 --> 00:34:52,560
i have noticed the optimization and

00:34:49,200 --> 00:34:55,520
kind of resizing of images so

00:34:52,560 --> 00:34:56,960
a good example maybe would be gravatar

00:34:55,520 --> 00:34:57,359
and actually i might do that after this

00:34:56,960 --> 00:34:59,440
call

00:34:57,359 --> 00:35:00,960
is look at my gravatar image because i

00:34:59,440 --> 00:35:02,640
think it was also an earlier version of

00:35:00,960 --> 00:35:03,359
a headshot that i had using the same

00:35:02,640 --> 00:35:05,760
camera

00:35:03,359 --> 00:35:07,680
so i'm curious if maybe in the process

00:35:05,760 --> 00:35:09,040
of optimizing these images for web

00:35:07,680 --> 00:35:10,640
delivery they're actually

00:35:09,040 --> 00:35:13,119
doing the right thing by privacy which

00:35:10,640 --> 00:35:15,520
is stripping it of auxiliary data but

00:35:13,119 --> 00:35:16,800
i think it's a great question so if you

00:35:15,520 --> 00:35:20,000
all are on

00:35:16,800 --> 00:35:20,560
x social media go ahead and try it like

00:35:20,000 --> 00:35:23,680
take

00:35:20,560 --> 00:35:26,560
and i should note with exif tool you can

00:35:23,680 --> 00:35:27,200
you can embed your own metadata so you

00:35:26,560 --> 00:35:29,040
can write

00:35:27,200 --> 00:35:30,800
tags to it so you could write something

00:35:29,040 --> 00:35:34,240
like um

00:35:30,800 --> 00:35:35,920
my privacy feature you know

00:35:34,240 --> 00:35:37,280
so you could actually kind of test it

00:35:35,920 --> 00:35:39,920
yourself to see

00:35:37,280 --> 00:35:40,400
what sorts of things they or if we could

00:35:39,920 --> 00:35:42,720
find

00:35:40,400 --> 00:35:44,320
maybe are there some canonical fields or

00:35:42,720 --> 00:35:46,880
you could spoof the the

00:35:44,320 --> 00:35:48,240
geodata that that actually might be the

00:35:46,880 --> 00:35:51,680
best way to see

00:35:48,240 --> 00:35:53,920
how social medias use it so i saw um

00:35:51,680 --> 00:35:54,720
alex's comment about oh i know what

00:35:53,920 --> 00:35:56,960
camera you use

00:35:54,720 --> 00:35:59,920
i'm gonna sell you an sd card and you're

00:35:56,960 --> 00:36:02,560
right maybe spoofing geo data

00:35:59,920 --> 00:36:03,280
if you're in a store like spoof it to

00:36:02,560 --> 00:36:06,560
the

00:36:03,280 --> 00:36:09,200
location of say a rite aid and then

00:36:06,560 --> 00:36:10,880
then upload it and see if you get ads

00:36:09,200 --> 00:36:14,960
like for a rite aid or something

00:36:10,880 --> 00:36:18,000
um that that might be fun so

00:36:14,960 --> 00:36:19,359
cool thanks a question from chat uh what

00:36:18,000 --> 00:36:22,800
is the equivalent of stripping

00:36:19,359 --> 00:36:24,800
exif for the docx do we know what can be

00:36:22,800 --> 00:36:27,119
removed

00:36:24,800 --> 00:36:28,160
yeah that's a good question so my

00:36:27,119 --> 00:36:31,200
understanding

00:36:28,160 --> 00:36:34,880
of the office document formats is

00:36:31,200 --> 00:36:37,920
it actually doesn't use exif

00:36:34,880 --> 00:36:41,119
um for its uh

00:36:37,920 --> 00:36:44,160
metadata i think it has its own

00:36:41,119 --> 00:36:48,079
tagging notation so that that doc props

00:36:44,160 --> 00:36:51,599
core file we were exploring has

00:36:48,079 --> 00:36:54,640
a kind of other structure but

00:36:51,599 --> 00:36:57,680
some of the the keywords are

00:36:54,640 --> 00:37:01,520
significant um so

00:36:57,680 --> 00:37:04,560
there's overlap the word

00:37:01,520 --> 00:37:08,400
document will have things like keyword

00:37:04,560 --> 00:37:12,320
creator modified on created on and

00:37:08,400 --> 00:37:16,000
it will encode those in that xml file

00:37:12,320 --> 00:37:18,640
and it can be removed so what you can do

00:37:16,000 --> 00:37:20,400
is and i'll just jump back to sharing my

00:37:18,640 --> 00:37:23,520
screen here because it's

00:37:20,400 --> 00:37:24,240
a little easier if we just look at the

00:37:23,520 --> 00:37:27,520
actual

00:37:24,240 --> 00:37:30,400
file um so

00:37:27,520 --> 00:37:30,880
let's go so again if we do i'm just

00:37:30,400 --> 00:37:34,880
going to

00:37:30,880 --> 00:37:35,440
open so another tool that i was looking

00:37:34,880 --> 00:37:37,760
at

00:37:35,440 --> 00:37:39,040
to make this a little more readable is

00:37:37,760 --> 00:37:42,000
xml lint

00:37:39,040 --> 00:37:42,400
so we can see the structure all at once

00:37:42,000 --> 00:37:46,240
and

00:37:42,400 --> 00:37:46,480
creator modified by so if i set these to

00:37:46,240 --> 00:37:49,359
an

00:37:46,480 --> 00:37:50,880
empty string eli you're not a sharing

00:37:49,359 --> 00:37:54,320
screen at the moment

00:37:50,880 --> 00:37:58,480
oh alas that was that was quite lame so

00:37:54,320 --> 00:38:01,920
let's look uh it looks like i can't

00:37:58,480 --> 00:38:01,920
let's try this again all right

00:38:02,560 --> 00:38:07,040
there we go sorry about that um there's

00:38:04,960 --> 00:38:10,320
nothing like listening to someone talk

00:38:07,040 --> 00:38:12,160
into thin virtual air as they describe

00:38:10,320 --> 00:38:14,640
their screen

00:38:12,160 --> 00:38:16,960
so what i did jumped back into the temp

00:38:14,640 --> 00:38:18,880
directory where we unpacked that

00:38:16,960 --> 00:38:20,160
manifesto document and i use the tool

00:38:18,880 --> 00:38:22,640
called xml lint

00:38:20,160 --> 00:38:24,240
to format this or pretty print this

00:38:22,640 --> 00:38:26,160
which is kind of an alternative to what

00:38:24,240 --> 00:38:27,920
we're using with the new shell is just

00:38:26,160 --> 00:38:29,839
let's see all of this at once and so you

00:38:27,920 --> 00:38:33,359
can see there's the

00:38:29,839 --> 00:38:35,040
various terms and other keywords and so

00:38:33,359 --> 00:38:38,160
this uses

00:38:35,040 --> 00:38:38,800
another schema so it's similar to exif

00:38:38,160 --> 00:38:41,680
data

00:38:38,800 --> 00:38:42,560
and yes we can remove it so if i were to

00:38:41,680 --> 00:38:46,480
simply

00:38:42,560 --> 00:38:49,599
overwrite this value here which

00:38:46,480 --> 00:38:50,480
is the contents of the dc colon creator

00:38:49,599 --> 00:38:53,119
tag

00:38:50,480 --> 00:38:53,599
remove them save this file again and

00:38:53,119 --> 00:38:57,119
then

00:38:53,599 --> 00:38:58,320
zip back together you wouldn't have that

00:38:57,119 --> 00:39:00,480
data

00:38:58,320 --> 00:39:01,599
or that wouldn't be in your document

00:39:00,480 --> 00:39:04,640
anymore

00:39:01,599 --> 00:39:08,880
so yes you can certainly strip it uh

00:39:04,640 --> 00:39:11,680
i maybe exif tool does some of that

00:39:08,880 --> 00:39:12,320
not sure um that that might be another

00:39:11,680 --> 00:39:17,599
thing to

00:39:12,320 --> 00:39:17,599
explore in the actual documentation

00:39:20,000 --> 00:39:29,839

YouTube URL: https://www.youtube.com/watch?v=_glv58QHyIs


