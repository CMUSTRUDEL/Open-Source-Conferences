Title: Surfing the Radio Waves with PostgreSQL  - Tom Swartz | CPOSC2020
Publication date: 2021-01-18
Playlist: CPOSC 2020 Recorded Sessions
Description: 
	Session Page: https://cposc.org/sessions/surfing-radio-waves-postgresql/
Slides & demos: https://github.com/tomswartz07/CPOSC2020
Chat Log: https://cposc.org/chat-log-surfing-radio-waves-postgresql/

The Central Pennsylvania Open Source Conference (CPOSC) is a one-day technical conference for open source users and developers. Presentations and sessions cover all aspects of open source, with talks ranging from novice to expert skill levels and featuring case studies, best practices, code-alongs and more. Join us in 2021! https://cposc.org
Captions: 
	00:00:05,040 --> 00:00:07,759
okay so i'm going to drop

00:00:06,080 --> 00:00:09,840
off here let me introduce our speaker

00:00:07,759 --> 00:00:12,160
first so this is tom swartz

00:00:09,840 --> 00:00:13,120
tom is a long time presenter for cpas

00:00:12,160 --> 00:00:15,040
guys

00:00:13,120 --> 00:00:16,880
today's topic is surfing radio waves

00:00:15,040 --> 00:00:18,560
with postgresql which i'm

00:00:16,880 --> 00:00:19,920
very interested to see what he's talking

00:00:18,560 --> 00:00:21,840
about um

00:00:19,920 --> 00:00:23,439
tom's a developer support specialist for

00:00:21,840 --> 00:00:25,519
a company called crunchydata

00:00:23,439 --> 00:00:27,199
programming software for and around

00:00:25,519 --> 00:00:29,760
postgres databases

00:00:27,199 --> 00:00:31,359
and he's also an avid speaker like i

00:00:29,760 --> 00:00:33,440
said have been in many central

00:00:31,359 --> 00:00:35,280
pennsylvania open source conferences

00:00:33,440 --> 00:00:36,719
tech lancaster events and other events

00:00:35,280 --> 00:00:38,800
around central pa

00:00:36,719 --> 00:00:41,200
it's an avid tedious enthusiast of

00:00:38,800 --> 00:00:43,280
mechanical keyboards amateur radio

00:00:41,200 --> 00:00:45,039
and a passionate advocate for free and

00:00:43,280 --> 00:00:47,039
open source software

00:00:45,039 --> 00:00:48,079
so with that i'm going to bow out and

00:00:47,039 --> 00:00:51,520
tell them

00:00:48,079 --> 00:00:55,440
stage is yours thank you very much jay

00:00:51,520 --> 00:00:57,120
so uh ted i'm tom sports and today we're

00:00:55,440 --> 00:01:01,039
going to be talking about

00:00:57,120 --> 00:01:03,280
creating sample data sets for postgres

00:01:01,039 --> 00:01:04,320
for fun and profit and we're going to be

00:01:03,280 --> 00:01:05,439
kind of uh

00:01:04,320 --> 00:01:09,680
talking about all kinds of different

00:01:05,439 --> 00:01:09,680
methods for generating those data sets

00:01:10,159 --> 00:01:14,640
so uh i like to do a little bit of an

00:01:13,360 --> 00:01:15,759
introduction you know who is this

00:01:14,640 --> 00:01:16,640
handsome gentleman that's speaking

00:01:15,759 --> 00:01:20,560
before you

00:01:16,640 --> 00:01:23,520
um i have uh five years dba

00:01:20,560 --> 00:01:23,920
experience uh sport experience i work

00:01:23,520 --> 00:01:27,520
for

00:01:23,920 --> 00:01:29,200
a company called crunchydata um and this

00:01:27,520 --> 00:01:31,200
specific topic that we're going to be

00:01:29,200 --> 00:01:33,040
talking about today is kind of like the

00:01:31,200 --> 00:01:34,479
perfect intersection between what i do

00:01:33,040 --> 00:01:37,119
for a day job

00:01:34,479 --> 00:01:38,640
and kind of my hobbies on the side you

00:01:37,119 --> 00:01:41,520
know so a lot of my hobbies are

00:01:38,640 --> 00:01:42,720
rf communications generative things big

00:01:41,520 --> 00:01:47,280
data

00:01:42,720 --> 00:01:47,280
all kinds of really nerdy stuff and

00:01:47,360 --> 00:01:52,720
this topic

00:01:50,399 --> 00:01:54,000
kind of is the perfect intersection

00:01:52,720 --> 00:01:56,399
between all of those

00:01:54,000 --> 00:01:57,759
things and actually doing stuff with

00:01:56,399 --> 00:02:03,439
databases

00:01:57,759 --> 00:02:03,439
so hopefully you'll find it enjoyable

00:02:05,600 --> 00:02:09,920
so the first question you may have when

00:02:08,399 --> 00:02:13,520
you're when we're talking about

00:02:09,920 --> 00:02:15,520
creating uh sample data sets uh maybe

00:02:13,520 --> 00:02:16,800
why you know why would i be interested

00:02:15,520 --> 00:02:18,879
in

00:02:16,800 --> 00:02:20,080
setting up some sort of hardware

00:02:18,879 --> 00:02:23,200
software stack

00:02:20,080 --> 00:02:25,680
to generate all these um

00:02:23,200 --> 00:02:26,560
sample data sets when tools exist that

00:02:25,680 --> 00:02:29,920
can just

00:02:26,560 --> 00:02:33,040
generate it on demand and

00:02:29,920 --> 00:02:36,640
there are really four main reasons

00:02:33,040 --> 00:02:38,720
that i could think of uh that would uh

00:02:36,640 --> 00:02:41,280
give a very good reason for this uh the

00:02:38,720 --> 00:02:44,480
first is it's practical application

00:02:41,280 --> 00:02:45,200
for software that um you may be working

00:02:44,480 --> 00:02:47,840
with

00:02:45,200 --> 00:02:48,840
uh at work or you know working with with

00:02:47,840 --> 00:02:52,160
customers

00:02:48,840 --> 00:02:53,040
or giving like a real real world

00:02:52,160 --> 00:02:55,120
experience

00:02:53,040 --> 00:02:56,879
um trying to trying to work with

00:02:55,120 --> 00:02:58,879
something it's one thing to

00:02:56,879 --> 00:03:00,400
you know go in and look at a grafana

00:02:58,879 --> 00:03:01,200
instance that somebody's already set up

00:03:00,400 --> 00:03:04,239
and be like

00:03:01,200 --> 00:03:05,360
yes okay very interesting but um to

00:03:04,239 --> 00:03:08,400
actually go through

00:03:05,360 --> 00:03:10,239
and set that up yourself that's a whole

00:03:08,400 --> 00:03:12,000
different learning experience

00:03:10,239 --> 00:03:13,920
when i was a kid i would always take all

00:03:12,000 --> 00:03:14,560
my toys apart just to see how they would

00:03:13,920 --> 00:03:17,519
work and

00:03:14,560 --> 00:03:18,000
you know this is kind of the software

00:03:17,519 --> 00:03:19,440
version

00:03:18,000 --> 00:03:21,040
of that you know being able to stand

00:03:19,440 --> 00:03:23,599
everything up from scratch and figure

00:03:21,040 --> 00:03:25,200
out how it goes

00:03:23,599 --> 00:03:26,959
another reason that you would be

00:03:25,200 --> 00:03:28,720
interested in doing this is that it's a

00:03:26,959 --> 00:03:30,799
continuous source of free data for

00:03:28,720 --> 00:03:34,080
testing purposes

00:03:30,799 --> 00:03:36,239
and when i say continuous i mean um

00:03:34,080 --> 00:03:37,680
typically non-repetitive you know if

00:03:36,239 --> 00:03:40,799
some of the tools that generate

00:03:37,680 --> 00:03:42,319
sample data um

00:03:40,799 --> 00:03:44,400
they're kind of stateful you know you

00:03:42,319 --> 00:03:45,440
run it two three four times and you

00:03:44,400 --> 00:03:47,760
might have

00:03:45,440 --> 00:03:48,720
duplicate information you know there's

00:03:47,760 --> 00:03:52,560
only so many

00:03:48,720 --> 00:03:53,920
uh random uh things unless you get like

00:03:52,560 --> 00:03:56,159
a truly random

00:03:53,920 --> 00:03:57,680
data generator um you know there's only

00:03:56,159 --> 00:04:00,799
so many john smiths that you could

00:03:57,680 --> 00:04:03,920
generate in the data set

00:04:00,799 --> 00:04:06,959
however when you create

00:04:03,920 --> 00:04:07,920
a system like some of these applications

00:04:06,959 --> 00:04:09,920
that we're going to be talking about

00:04:07,920 --> 00:04:13,680
here today

00:04:09,920 --> 00:04:16,959
that information is continuously updated

00:04:13,680 --> 00:04:20,079
and generated on the fly so it's

00:04:16,959 --> 00:04:22,160
it's not something that you're

00:04:20,079 --> 00:04:24,560
probably going to come across multiple

00:04:22,160 --> 00:04:24,560
times

00:04:26,320 --> 00:04:29,440
again it could also provide uh value to

00:04:29,120 --> 00:04:31,199
you

00:04:29,440 --> 00:04:32,240
you know almost every single one of

00:04:31,199 --> 00:04:33,680
these topics that we're going to be

00:04:32,240 --> 00:04:36,720
talking about today

00:04:33,680 --> 00:04:39,040
um came about because i was trying to

00:04:36,720 --> 00:04:42,320
extract extra value out of

00:04:39,040 --> 00:04:45,520
um utilizing them uh trying to

00:04:42,320 --> 00:04:47,919
be able to you know get more information

00:04:45,520 --> 00:04:49,280
or present that information in a more

00:04:47,919 --> 00:04:51,280
valuable

00:04:49,280 --> 00:04:52,800
and consistent way that works better for

00:04:51,280 --> 00:04:55,199
me

00:04:52,800 --> 00:04:56,880
and finally you know it's a solid use

00:04:55,199 --> 00:04:58,160
case for home lab equipment you know

00:04:56,880 --> 00:05:00,240
maybe you have a home lab and you're

00:04:58,160 --> 00:05:02,960
trying to figure out a way to justify

00:05:00,240 --> 00:05:03,759
uh having all that equipment or maybe

00:05:02,960 --> 00:05:06,960
you're interested

00:05:03,759 --> 00:05:07,759
in trying to set up a home lab um all of

00:05:06,960 --> 00:05:08,880
the things that we're going to be

00:05:07,759 --> 00:05:11,600
talking about today

00:05:08,880 --> 00:05:11,919
can be done on very inexpensive hardware

00:05:11,600 --> 00:05:15,280
uh

00:05:11,919 --> 00:05:18,880
and done for very cheaply um

00:05:15,280 --> 00:05:21,759
and it kind of allows you to get a start

00:05:18,880 --> 00:05:24,240
with um you know standing up all kinds

00:05:21,759 --> 00:05:28,000
of uh

00:05:24,240 --> 00:05:28,000
hardware devices in your network

00:05:30,639 --> 00:05:33,440
so just a quick summary of the things

00:05:32,479 --> 00:05:35,280
that we're going to be talking about

00:05:33,440 --> 00:05:36,560
today

00:05:35,280 --> 00:05:38,720
we're going to be talking about three

00:05:36,560 --> 00:05:39,840
main topics and i hope we'll have time

00:05:38,720 --> 00:05:41,280
at the very end

00:05:39,840 --> 00:05:42,880
uh if we do we're going to be talking

00:05:41,280 --> 00:05:43,919
about a fourth one

00:05:42,880 --> 00:05:46,000
so we're going to be talking about

00:05:43,919 --> 00:05:48,000
weather sensors and airplane tracking

00:05:46,000 --> 00:05:50,400
both of those will have data that's

00:05:48,000 --> 00:05:53,039
generated wirelessly

00:05:50,400 --> 00:05:54,160
and pi statistics and pa coronavirus

00:05:53,039 --> 00:05:56,800
information

00:05:54,160 --> 00:05:57,680
um that information will be generated

00:05:56,800 --> 00:06:00,160
kind of not

00:05:57,680 --> 00:06:00,800
rf it'll be more of a tangible data

00:06:00,160 --> 00:06:03,520
source

00:06:00,800 --> 00:06:03,520
that we could look at

00:06:05,039 --> 00:06:10,080
so before we get into everything um i

00:06:08,000 --> 00:06:12,880
realize that not everyone here

00:06:10,080 --> 00:06:14,000
may be familiar with software defined

00:06:12,880 --> 00:06:16,160
radio so i'm going to give

00:06:14,000 --> 00:06:19,600
a very quick crash course in what

00:06:16,160 --> 00:06:22,080
exactly software defined radio is

00:06:19,600 --> 00:06:24,000
in a nutshell in its most basic

00:06:22,080 --> 00:06:27,520
distilled

00:06:24,000 --> 00:06:30,880
lives to children form

00:06:27,520 --> 00:06:32,240
there exists this little usb device

00:06:30,880 --> 00:06:35,680
that was originally made a number of

00:06:32,240 --> 00:06:38,880
years ago to allow people to

00:06:35,680 --> 00:06:41,280
plug into their computer and watch

00:06:38,880 --> 00:06:42,560
television over the air on their

00:06:41,280 --> 00:06:44,800
computer

00:06:42,560 --> 00:06:46,560
some crafty folks found that if they

00:06:44,800 --> 00:06:48,880
were to

00:06:46,560 --> 00:06:50,960
write some different driver software for

00:06:48,880 --> 00:06:53,440
these devices

00:06:50,960 --> 00:06:54,400
they could utilize the real tech chip

00:06:53,440 --> 00:06:57,599
that is on

00:06:54,400 --> 00:06:59,039
on the usb device and that will allow

00:06:57,599 --> 00:07:01,120
them to

00:06:59,039 --> 00:07:02,319
tune into any frequency not just

00:07:01,120 --> 00:07:06,400
television

00:07:02,319 --> 00:07:09,919
uh any frequency within a certain range

00:07:06,400 --> 00:07:11,840
and uh decode it as they see fit

00:07:09,919 --> 00:07:13,199
so what's really interesting about these

00:07:11,840 --> 00:07:15,440
devices are

00:07:13,199 --> 00:07:17,039
uh they're super inexpensive you can get

00:07:15,440 --> 00:07:17,840
them from amazon you keep them from

00:07:17,039 --> 00:07:20,960
china

00:07:17,840 --> 00:07:24,560
10 15 shipped right out the door

00:07:20,960 --> 00:07:25,840
and rather than using um complicated

00:07:24,560 --> 00:07:28,160
discrete transistors

00:07:25,840 --> 00:07:29,360
resistors inductors all kinds of fancy

00:07:28,160 --> 00:07:30,800
hardware that you would have in a

00:07:29,360 --> 00:07:33,840
traditional stereo

00:07:30,800 --> 00:07:35,759
or traditional radio

00:07:33,840 --> 00:07:37,680
all of the interpretation is done via

00:07:35,759 --> 00:07:39,520
software

00:07:37,680 --> 00:07:40,800
and kind of at the end of the day what

00:07:39,520 --> 00:07:44,400
this means is you can receive

00:07:40,800 --> 00:07:48,240
any signal between two

00:07:44,400 --> 00:07:50,560
uh or uh 24 megahertz and 2.1 gigahertz

00:07:48,240 --> 00:07:51,360
so there's a very wide range of uh

00:07:50,560 --> 00:07:53,919
frequencies

00:07:51,360 --> 00:07:55,199
you got to put that in perspective uh

00:07:53,919 --> 00:07:56,080
you're sitting in your car in your car

00:07:55,199 --> 00:07:57,919
stereo

00:07:56,080 --> 00:07:59,520
you know you tune tune the radio on your

00:07:57,919 --> 00:08:01,759
car stereo

00:07:59,520 --> 00:08:04,639
that range is anywhere from about 88

00:08:01,759 --> 00:08:06,639
megahertz to 108 megahertz

00:08:04,639 --> 00:08:08,800
um if you would imagine that your car

00:08:06,639 --> 00:08:11,759
stereo could tune higher and lower

00:08:08,800 --> 00:08:12,800
um there would be a lot more uh things

00:08:11,759 --> 00:08:14,639
that you could listen to you could

00:08:12,800 --> 00:08:17,680
listen to

00:08:14,639 --> 00:08:18,879
all sorts of other other devices the two

00:08:17,680 --> 00:08:19,919
things specifically that we're going to

00:08:18,879 --> 00:08:22,240
be talking about today

00:08:19,919 --> 00:08:25,759
wirelessly are the remote temperature

00:08:22,240 --> 00:08:26,639
sensors which operate on 433 megahertz

00:08:25,759 --> 00:08:28,479
and we're going to be talking about

00:08:26,639 --> 00:08:32,639
airplane tracking which is at 1090

00:08:28,479 --> 00:08:32,639
megahertz or 1.09 gigahertz

00:08:36,959 --> 00:08:41,839
display is zoomed in on the screen

00:08:45,760 --> 00:08:49,680
sorry jay i'm not not quite following

00:08:47,360 --> 00:08:52,640
with the what the issue is here

00:08:49,680 --> 00:08:55,839
um let me know if it looks if it's

00:08:52,640 --> 00:08:55,839
having a problem

00:08:57,440 --> 00:09:03,839
however the software defined radio

00:09:01,600 --> 00:09:06,000
can listen to practically anything

00:09:03,839 --> 00:09:08,320
you're only limited by

00:09:06,000 --> 00:09:09,279
what software you have to actually

00:09:08,320 --> 00:09:10,480
decode it

00:09:09,279 --> 00:09:12,560
you know the software-defined radio can

00:09:10,480 --> 00:09:16,240
decode morse code broadcast fm

00:09:12,560 --> 00:09:20,800
tire pressure sensors amateur radio

00:09:16,240 --> 00:09:24,160
um aircraft tracking locomotive tracking

00:09:20,800 --> 00:09:26,560
taxi dispatch or put another way planes

00:09:24,160 --> 00:09:30,720
trains automobiles

00:09:26,560 --> 00:09:32,000
um so on and so forth so um

00:09:30,720 --> 00:09:33,920
like i said you're only really limited

00:09:32,000 --> 00:09:36,240
by what type of software you use to

00:09:33,920 --> 00:09:39,519
actually decode the

00:09:36,240 --> 00:09:40,000
received radio frequencies specific to

00:09:39,519 --> 00:09:41,760
today

00:09:40,000 --> 00:09:43,360
what we're going to be talking about is

00:09:41,760 --> 00:09:47,040
a full open source

00:09:43,360 --> 00:09:49,600
software stack the programs

00:09:47,040 --> 00:09:50,959
specifically for decoding the radio

00:09:49,600 --> 00:09:53,279
signals we're going to be looking at a

00:09:50,959 --> 00:09:55,360
version of dump 1090 which i

00:09:53,279 --> 00:09:58,399
um which is an open source program that

00:09:55,360 --> 00:10:02,839
i've taken and modified for my own use

00:09:58,399 --> 00:10:06,000
there's another tool card called rtl433

00:10:02,839 --> 00:10:08,560
and um we're also going to be

00:10:06,000 --> 00:10:10,959
looking at this data using grafana which

00:10:08,560 --> 00:10:12,800
is an open source graphing program

00:10:10,959 --> 00:10:15,120
and we're going to be using postgis

00:10:12,800 --> 00:10:18,160
which is an open source

00:10:15,120 --> 00:10:21,600
database geospatial

00:10:18,160 --> 00:10:24,399
software and postgres itself is an open

00:10:21,600 --> 00:10:24,399
source database

00:10:24,720 --> 00:10:30,079
so um i think that covers most of the

00:10:28,720 --> 00:10:32,720
software side

00:10:30,079 --> 00:10:33,680
from the hardware side however uh pretty

00:10:32,720 --> 00:10:34,959
much everything that we're going to be

00:10:33,680 --> 00:10:38,160
looking at today

00:10:34,959 --> 00:10:41,920
is running on raspberry pi's i love

00:10:38,160 --> 00:10:42,959
raspberry pi's they're cheap around 35

00:10:41,920 --> 00:10:45,040
you know sometimes a little more

00:10:42,959 --> 00:10:49,040
sometimes a little less

00:10:45,040 --> 00:10:50,240
um they have adequate resources for

00:10:49,040 --> 00:10:53,200
the types of things that we're going to

00:10:50,240 --> 00:10:56,880
be looking at today they can handle

00:10:53,200 --> 00:11:00,720
databases of any size with no problem

00:10:56,880 --> 00:11:04,640
and since they're typically not all

00:11:00,720 --> 00:11:06,880
uh typically not all

00:11:04,640 --> 00:11:08,079
all software is packages packaged for

00:11:06,880 --> 00:11:11,120
raspberry pi's

00:11:08,079 --> 00:11:14,399
you can also get some good experience

00:11:11,120 --> 00:11:17,600
with um

00:11:14,399 --> 00:11:20,160
building software uh from open source

00:11:17,600 --> 00:11:21,279
and packaging it up for uh your your

00:11:20,160 --> 00:11:23,680
systems

00:11:21,279 --> 00:11:26,160
so um you know in in my case

00:11:23,680 --> 00:11:28,640
specifically i will build postgres from

00:11:26,160 --> 00:11:30,480
source on a raspberry pi yes it's as

00:11:28,640 --> 00:11:34,000
painful as you think it would be

00:11:30,480 --> 00:11:36,720
and uh deploy it to kind of my cluster

00:11:34,000 --> 00:11:37,440
uh in my data closet right over here i

00:11:36,720 --> 00:11:38,800
have

00:11:37,440 --> 00:11:40,959
these two raspberry pi's there's

00:11:38,800 --> 00:11:42,640
actually a whole bunch in there but um

00:11:40,959 --> 00:11:43,760
these two raspberry pies are the two

00:11:42,640 --> 00:11:44,480
systems that we're going to be looking

00:11:43,760 --> 00:11:47,200
at

00:11:44,480 --> 00:11:50,399
um yes that is a noctua fan on the giant

00:11:47,200 --> 00:11:50,399
sink on a raspberry pi

00:11:53,279 --> 00:11:57,600
so without further ado let's get into it

00:11:56,160 --> 00:12:01,440
and we'll talk about

00:11:57,600 --> 00:12:01,440
um weather sensors first

00:12:01,680 --> 00:12:07,120
so uh weather sensors uh for those are

00:12:05,040 --> 00:12:08,639
that are not familiar with uh with them

00:12:07,120 --> 00:12:10,639
there's a company called acurite

00:12:08,639 --> 00:12:11,920
they make they're probably one of the

00:12:10,639 --> 00:12:14,639
biggest uh

00:12:11,920 --> 00:12:16,480
vendors that provide these wireless

00:12:14,639 --> 00:12:19,680
temperature sensors

00:12:16,480 --> 00:12:21,200
um they're they

00:12:19,680 --> 00:12:22,959
vary in price you know some of the more

00:12:21,200 --> 00:12:25,040
generic ones are

00:12:22,959 --> 00:12:26,480
you know thirty dollars you know if you

00:12:25,040 --> 00:12:29,440
get a fancy

00:12:26,480 --> 00:12:29,920
uh fancy one for outside that does wind

00:12:29,440 --> 00:12:32,880
speed

00:12:29,920 --> 00:12:33,600
and rain gauge and wind wind direction

00:12:32,880 --> 00:12:36,839
and all that

00:12:33,600 --> 00:12:40,079
you know they run about 139 dollars

00:12:36,839 --> 00:12:43,519
however um the problem i had with these

00:12:40,079 --> 00:12:46,720
uh devices was they don't

00:12:43,519 --> 00:12:50,000
have very good historical

00:12:46,720 --> 00:12:51,279
um data retention you know when you get

00:12:50,000 --> 00:12:53,200
these devices you get

00:12:51,279 --> 00:12:54,639
a little base station i'm going to hold

00:12:53,200 --> 00:12:57,279
it up here let me

00:12:54,639 --> 00:12:58,320
switch to okay hopefully i'll get it

00:12:57,279 --> 00:13:00,320
without a glare

00:12:58,320 --> 00:13:01,839
but you'll see it just shows like the

00:13:00,320 --> 00:13:04,240
current wind speed

00:13:01,839 --> 00:13:06,480
and the peak in the past half hour you

00:13:04,240 --> 00:13:08,480
get like the current temperature

00:13:06,480 --> 00:13:10,399
but you know it just shows like trending

00:13:08,480 --> 00:13:13,440
up and down there's not

00:13:10,399 --> 00:13:15,600
like a really good

00:13:13,440 --> 00:13:18,560
display of kind of how that information

00:13:15,600 --> 00:13:18,560
has changed over time

00:13:18,959 --> 00:13:26,639
the the thing is however um

00:13:23,600 --> 00:13:28,240
when uh you know accuride is obviously a

00:13:26,639 --> 00:13:31,360
company that exists to make money

00:13:28,240 --> 00:13:33,279
so what they do is they will sell pretty

00:13:31,360 --> 00:13:35,120
much just a color swapped version of

00:13:33,279 --> 00:13:37,680
their device

00:13:35,120 --> 00:13:40,240
and give it internet connectivity and

00:13:37,680 --> 00:13:43,440
mark it up 100

00:13:40,240 --> 00:13:43,920
so you know in kind of true hacker

00:13:43,440 --> 00:13:46,959
spirit

00:13:43,920 --> 00:13:48,399
i was like well why would i pay an extra

00:13:46,959 --> 00:13:50,240
hundred dollars when all they're doing

00:13:48,399 --> 00:13:52,399
is just like a software change on the

00:13:50,240 --> 00:13:55,600
you know on the receiving side

00:13:52,399 --> 00:13:58,160
um i'll just make my own with blackjack

00:13:55,600 --> 00:13:58,959
and long-term reporting and so that's

00:13:58,160 --> 00:14:02,160
what i did

00:13:58,959 --> 00:14:03,279
so i wrote a program to receive all that

00:14:02,160 --> 00:14:04,800
information

00:14:03,279 --> 00:14:08,720
and store it in the database so that i

00:14:04,800 --> 00:14:10,240
could look at it as i see fit

00:14:08,720 --> 00:14:11,760
to kind of go through the the

00:14:10,240 --> 00:14:13,360
application data flow

00:14:11,760 --> 00:14:14,880
we have all these remote sensors all

00:14:13,360 --> 00:14:16,160
over the place like i said i have one in

00:14:14,880 --> 00:14:18,560
my data closet

00:14:16,160 --> 00:14:19,920
there's one outside in the yard i have

00:14:18,560 --> 00:14:21,519
one in the basement that measures the

00:14:19,920 --> 00:14:23,760
temperature of the freezer

00:14:21,519 --> 00:14:25,680
i have one in the garage all over the

00:14:23,760 --> 00:14:26,320
place so all these different remote

00:14:25,680 --> 00:14:29,600
sensors

00:14:26,320 --> 00:14:32,720
are sending out their readings and the

00:14:29,600 --> 00:14:32,720
rtl sdr

00:14:32,800 --> 00:14:39,360
will receive that data and it passes it

00:14:35,839 --> 00:14:42,720
off to a program called rtl 433

00:14:39,360 --> 00:14:45,120
this program is

00:14:42,720 --> 00:14:46,320
designed specifically for these types of

00:14:45,120 --> 00:14:48,160
devices

00:14:46,320 --> 00:14:51,279
and it will decode the information and

00:14:48,160 --> 00:14:53,680
pass it off as json

00:14:51,279 --> 00:14:54,720
um since this was you know many many

00:14:53,680 --> 00:14:56,720
years ago

00:14:54,720 --> 00:14:58,399
that i kind of stood up this application

00:14:56,720 --> 00:15:00,720
i wasn't really

00:14:58,399 --> 00:15:00,720
um

00:15:02,079 --> 00:15:05,680
it was kind of kind of like a proof of

00:15:03,920 --> 00:15:09,040
concept just to see if i could do it so

00:15:05,680 --> 00:15:12,399
i wrote a very quick a very simple

00:15:09,040 --> 00:15:15,279
python script to take that json data

00:15:12,399 --> 00:15:17,279
and store it directly into the database

00:15:15,279 --> 00:15:20,160
once it's in the database i could use

00:15:17,279 --> 00:15:21,440
a program called grafana to graph that

00:15:20,160 --> 00:15:24,639
information

00:15:21,440 --> 00:15:27,360
and view it over time so

00:15:24,639 --> 00:15:28,000
let's hop over to uh pg admin which is a

00:15:27,360 --> 00:15:29,600
program that

00:15:28,000 --> 00:15:31,440
allows us to have like a graphical

00:15:29,600 --> 00:15:33,600
interface on postgres

00:15:31,440 --> 00:15:35,120
and we'll kind of take a look at uh the

00:15:33,600 --> 00:15:37,759
actual database

00:15:35,120 --> 00:15:37,759
side of it

00:15:38,240 --> 00:15:41,839
so this is pg admin and what we're

00:15:40,240 --> 00:15:45,120
looking at here right now

00:15:41,839 --> 00:15:46,399
is my weather database um

00:15:45,120 --> 00:15:47,920
apologies if this is going to be a

00:15:46,399 --> 00:15:48,480
little small unfortunately i can't make

00:15:47,920 --> 00:15:50,880
the text

00:15:48,480 --> 00:15:53,360
any bigger because it kind of throws off

00:15:50,880 --> 00:15:57,360
the way that this application works

00:15:53,360 --> 00:16:00,480
um however this application or this

00:15:57,360 --> 00:16:04,000
database has uh three columns

00:16:00,480 --> 00:16:06,079
basically there's an id column

00:16:04,000 --> 00:16:08,320
that just automatically increments for

00:16:06,079 --> 00:16:10,480
each new item in the database

00:16:08,320 --> 00:16:11,600
there's an info column that allows me to

00:16:10,480 --> 00:16:14,720
store

00:16:11,600 --> 00:16:18,079
uh information about a particular

00:16:14,720 --> 00:16:20,800
reading or a particular time period

00:16:18,079 --> 00:16:22,320
if if i choose to and then finally i

00:16:20,800 --> 00:16:25,440
just have a json

00:16:22,320 --> 00:16:27,079
type column that stores all that json

00:16:25,440 --> 00:16:30,079
information that gets put out from

00:16:27,079 --> 00:16:30,079
rtl433

00:16:30,560 --> 00:16:34,880
uh what that actually looks like on the

00:16:33,680 --> 00:16:38,720
grafana side

00:16:34,880 --> 00:16:41,759
is this so we have

00:16:38,720 --> 00:16:45,120
uh kind of a view of the

00:16:41,759 --> 00:16:45,920
temperature over time which is notably

00:16:45,120 --> 00:16:48,959
different than

00:16:45,920 --> 00:16:50,800
just the individual unit that we we just

00:16:48,959 --> 00:16:52,880
got on the base station

00:16:50,800 --> 00:16:54,079
i also have broken out to show the

00:16:52,880 --> 00:16:55,839
individual units

00:16:54,079 --> 00:16:57,199
i could see the wind speed as it changes

00:16:55,839 --> 00:17:00,800
over time

00:16:57,199 --> 00:17:03,440
outdoor humidity indoor humidity

00:17:00,800 --> 00:17:04,400
and so on and so forth what's really

00:17:03,440 --> 00:17:07,280
interesting

00:17:04,400 --> 00:17:08,559
uh is this also provides additional

00:17:07,280 --> 00:17:11,919
information

00:17:08,559 --> 00:17:12,240
which i can't normally uh receive with

00:17:11,919 --> 00:17:15,439
the

00:17:12,240 --> 00:17:17,199
standard base stations so uh you know in

00:17:15,439 --> 00:17:18,319
particular here i'm talking about signal

00:17:17,199 --> 00:17:21,760
strength

00:17:18,319 --> 00:17:23,120
um i like to track the signal strength

00:17:21,760 --> 00:17:24,959
over time

00:17:23,120 --> 00:17:27,280
because there's a number of neighbors

00:17:24,959 --> 00:17:29,120
around here that have solar panels

00:17:27,280 --> 00:17:30,640
if you're not familiar solar panels when

00:17:29,120 --> 00:17:32,000
they're in the sun they tend to be a

00:17:30,640 --> 00:17:34,000
little bit noisy on the

00:17:32,000 --> 00:17:36,480
electromagnetic spectrum so they can

00:17:34,000 --> 00:17:39,520
cause interference with some certain

00:17:36,480 --> 00:17:41,280
rf devices and i could actually see when

00:17:39,520 --> 00:17:44,320
it gets sunny out i could actually

00:17:41,280 --> 00:17:46,559
note the changes in the signal strength

00:17:44,320 --> 00:17:47,760
and actually see the signal strength dip

00:17:46,559 --> 00:17:51,120
because it's getting interference

00:17:47,760 --> 00:17:54,240
between other

00:17:51,120 --> 00:17:55,919
other devices in the neighborhood

00:17:54,240 --> 00:17:57,600
it kind of also gives me a little bit of

00:17:55,919 --> 00:18:01,360
insight into you know

00:17:57,600 --> 00:18:04,000
position of the sensors you know up

00:18:01,360 --> 00:18:04,880
i had that sensor in the garage but

00:18:04,000 --> 00:18:06,720
since i put that

00:18:04,880 --> 00:18:08,400
metal box there now it's you know

00:18:06,720 --> 00:18:09,520
causing problems and i can't receive it

00:18:08,400 --> 00:18:11,039
as well

00:18:09,520 --> 00:18:14,160
so it's kind of a nice way to

00:18:11,039 --> 00:18:15,440
troubleshoot some issues

00:18:14,160 --> 00:18:18,000
another really interesting thing about

00:18:15,440 --> 00:18:22,320
this is that i can

00:18:18,000 --> 00:18:24,960
um generate reports monthly reports

00:18:22,320 --> 00:18:26,160
and you know uh i'll do that at the

00:18:24,960 --> 00:18:26,799
first of the month and just kind of

00:18:26,160 --> 00:18:29,280
punch out

00:18:26,799 --> 00:18:30,720
uh information about the weather that

00:18:29,280 --> 00:18:33,280
i've received in

00:18:30,720 --> 00:18:33,919
you know from all these sensors so just

00:18:33,280 --> 00:18:35,919
about

00:18:33,919 --> 00:18:38,080
five days ago i received this one for

00:18:35,919 --> 00:18:41,440
the month of november

00:18:38,080 --> 00:18:44,000
and you can see the outdoor statistics

00:18:41,440 --> 00:18:45,679
so i get kind of like a climatology uh

00:18:44,000 --> 00:18:48,880
report

00:18:45,679 --> 00:18:50,480
uh and i can see you know the max wind

00:18:48,880 --> 00:18:52,320
speed and the area

00:18:50,480 --> 00:18:53,600
the average temperature so on and so

00:18:52,320 --> 00:18:55,440
forth so it's

00:18:53,600 --> 00:18:56,960
really interesting and really insightful

00:18:55,440 --> 00:19:00,240
to see you know

00:18:56,960 --> 00:19:02,640
oh it's i had no idea that my garage

00:19:00,240 --> 00:19:03,520
hit uh almost 80 degrees in the month of

00:19:02,640 --> 00:19:05,919
november

00:19:03,520 --> 00:19:07,919
you know it's useful in the summer oh it

00:19:05,919 --> 00:19:09,280
was all it was over 100 in the garage

00:19:07,919 --> 00:19:11,440
maybe i shouldn't store my beer out

00:19:09,280 --> 00:19:12,480
there and so on and so forth so

00:19:11,440 --> 00:19:13,919
there's a lot of really useful

00:19:12,480 --> 00:19:14,720
information that you can kind of glean

00:19:13,919 --> 00:19:17,919
from

00:19:14,720 --> 00:19:20,880
this type of reporting and

00:19:17,919 --> 00:19:24,799
like i said it's a very simple uh very

00:19:20,880 --> 00:19:26,720
simple setup

00:19:24,799 --> 00:19:28,240
so what kind of lessons do i learn from

00:19:26,720 --> 00:19:29,919
trying to set this up

00:19:28,240 --> 00:19:32,320
uh like i said since this was one of the

00:19:29,919 --> 00:19:36,400
first projects that i really kind of did

00:19:32,320 --> 00:19:37,840
uh as kind of like a full project

00:19:36,400 --> 00:19:40,000
integrating with postgres and

00:19:37,840 --> 00:19:43,120
application side and all that stuff

00:19:40,000 --> 00:19:46,080
um it wasn't really a major thought

00:19:43,120 --> 00:19:48,160
in my mind to design the database

00:19:46,080 --> 00:19:49,520
effectively for long term use

00:19:48,160 --> 00:19:51,760
originally it was just meant to be like

00:19:49,520 --> 00:19:53,760
a proof of concept that i'd throw away

00:19:51,760 --> 00:19:55,440
but um you know i actually found out

00:19:53,760 --> 00:19:55,840
that it was really useful so i kind of

00:19:55,440 --> 00:19:58,960
just

00:19:55,840 --> 00:20:02,320
kept it going and unfortunately now

00:19:58,960 --> 00:20:05,360
the database is um trying to

00:20:02,320 --> 00:20:08,559
keep up with that poor original design

00:20:05,360 --> 00:20:09,520
so it's a really good lesson uh yes

00:20:08,559 --> 00:20:11,280
exactly brett

00:20:09,520 --> 00:20:12,720
it's it's absolutely one of the most

00:20:11,280 --> 00:20:15,039
important things uh

00:20:12,720 --> 00:20:18,000
to set forward especially you know if if

00:20:15,039 --> 00:20:21,520
you have the potential to keep using it

00:20:18,000 --> 00:20:24,080
um storing data in json is okay

00:20:21,520 --> 00:20:26,000
it's fine uh but it's not nearly as good

00:20:24,080 --> 00:20:28,960
as native tables in the database

00:20:26,000 --> 00:20:30,480
uh if you think about it uh looking here

00:20:28,960 --> 00:20:33,840
if i were to go back

00:20:30,480 --> 00:20:35,039
and this is an example of

00:20:33,840 --> 00:20:36,880
some of the data that's stored in the

00:20:35,039 --> 00:20:39,360
database so we have our

00:20:36,880 --> 00:20:41,360
id which is kind of just an incrementing

00:20:39,360 --> 00:20:43,520
number

00:20:41,360 --> 00:20:46,000
and all of this information you know all

00:20:43,520 --> 00:20:49,039
these tags for json data are duplicated

00:20:46,000 --> 00:20:52,400
so tags the curly brackets id

00:20:49,039 --> 00:20:54,640
mod frequency temperature f

00:20:52,400 --> 00:20:56,480
all of that's duplicated every single

00:20:54,640 --> 00:20:57,919
row but if it was stored as a native

00:20:56,480 --> 00:20:59,679
table in the database

00:20:57,919 --> 00:21:02,240
that would only be stored once and then

00:20:59,679 --> 00:21:07,360
the rest of the values would be stored

00:21:02,240 --> 00:21:07,360
as a slightly more compressible number

00:21:10,240 --> 00:21:13,440
again you need really good database

00:21:12,480 --> 00:21:15,760
design

00:21:13,440 --> 00:21:16,720
having indexes and doing performance

00:21:15,760 --> 00:21:20,559
tuning

00:21:16,720 --> 00:21:23,919
on the database is super helpful

00:21:20,559 --> 00:21:25,919
um and again since this was a throwaway

00:21:23,919 --> 00:21:30,480
project i didn't have a lot of interest

00:21:25,919 --> 00:21:33,520
in kind of validating data duplication

00:21:30,480 --> 00:21:36,720
when it became an ongoing project this

00:21:33,520 --> 00:21:36,720
is actually a really good

00:21:38,640 --> 00:21:43,440
data set that i could practice

00:21:40,880 --> 00:21:46,799
deduplicating information

00:21:43,440 --> 00:21:49,679
upon so um you know

00:21:46,799 --> 00:21:51,679
again it's another very useful uh use

00:21:49,679 --> 00:21:53,360
case for this data

00:21:51,679 --> 00:21:55,200
not every customer is going to have you

00:21:53,360 --> 00:21:58,559
know not every client that you work with

00:21:55,200 --> 00:22:00,400
that uses databases um we'll have the

00:21:58,559 --> 00:22:03,039
best practices set up

00:22:00,400 --> 00:22:03,520
so you know it's sometimes useful to

00:22:03,039 --> 00:22:06,320
have

00:22:03,520 --> 00:22:07,120
a really terrible database that you

00:22:06,320 --> 00:22:10,720
could

00:22:07,120 --> 00:22:13,600
um practice on and try to recover

00:22:10,720 --> 00:22:14,559
from you know dig yourself into a hole

00:22:13,600 --> 00:22:17,760
and

00:22:14,559 --> 00:22:17,760
try to climb back out of it

00:22:20,799 --> 00:22:26,559
so next let's go into airplane tracking

00:22:24,320 --> 00:22:28,320
this one is really interesting and it

00:22:26,559 --> 00:22:31,679
may surprise some folks to know

00:22:28,320 --> 00:22:34,880
that every airplane that flies overhead

00:22:31,679 --> 00:22:36,880
um is transmitting the location data

00:22:34,880 --> 00:22:38,080
uh it's my understanding that as of the

00:22:36,880 --> 00:22:41,280
beginning of this past

00:22:38,080 --> 00:22:41,919
year uh january 2020 the faa required

00:22:41,280 --> 00:22:44,159
that

00:22:41,919 --> 00:22:45,919
any aircraft flying in u.s airspace

00:22:44,159 --> 00:22:48,880
needs to have

00:22:45,919 --> 00:22:50,320
what they call an adsb transmitter which

00:22:48,880 --> 00:22:52,640
stands for automatic dependent

00:22:50,320 --> 00:22:55,679
surveillance broadcast

00:22:52,640 --> 00:22:58,720
more or less uh what this means is

00:22:55,679 --> 00:23:02,080
the airplanes will send out

00:22:58,720 --> 00:23:03,840
uh various messages over radio waves

00:23:02,080 --> 00:23:06,960
saying here's where i am here's my

00:23:03,840 --> 00:23:08,720
altitude here's my heading

00:23:06,960 --> 00:23:10,240
and other you know positional

00:23:08,720 --> 00:23:12,080
information

00:23:10,240 --> 00:23:13,600
and that allows like air traffic

00:23:12,080 --> 00:23:15,520
controllers

00:23:13,600 --> 00:23:17,360
and other airplanes in the area to kind

00:23:15,520 --> 00:23:19,440
of all have

00:23:17,360 --> 00:23:21,520
uh common knowledge about where everyone

00:23:19,440 --> 00:23:23,520
is so that it could help reduce

00:23:21,520 --> 00:23:25,039
you know mid-air collisions or track

00:23:23,520 --> 00:23:26,480
airplanes you know if

00:23:25,039 --> 00:23:28,320
heaven forbid something something

00:23:26,480 --> 00:23:31,280
happens to literally crash

00:23:28,320 --> 00:23:31,280
so on and so forth

00:23:31,919 --> 00:23:37,919
um however what may

00:23:35,360 --> 00:23:39,520
really surprise folks is the actual

00:23:37,919 --> 00:23:44,000
number of aircraft

00:23:39,520 --> 00:23:45,919
that are up in the sky at any given time

00:23:44,000 --> 00:23:48,720
i'm using a program here called adsb

00:23:45,919 --> 00:23:51,120
exchange which shows it's kind of like a

00:23:48,720 --> 00:23:55,520
common ingestion congestion site

00:23:51,120 --> 00:23:57,840
for aircraft i'm showing here you know a

00:23:55,520 --> 00:23:59,200
good portion of lancaster county and

00:23:57,840 --> 00:24:01,679
there are 11 aircraft

00:23:59,200 --> 00:24:03,440
currently flying try to zoom out here a

00:24:01,679 --> 00:24:06,000
little bit

00:24:03,440 --> 00:24:07,840
and just show the uh you know maybe

00:24:06,000 --> 00:24:10,400
tri-state area

00:24:07,840 --> 00:24:10,880
we're up to almost a thousand aircraft

00:24:10,400 --> 00:24:14,480
and

00:24:10,880 --> 00:24:16,880
it is almost two o'clock on a saturday

00:24:14,480 --> 00:24:18,080
there's an enormous amount of aircrafts

00:24:16,880 --> 00:24:21,679
that are up in the sky

00:24:18,080 --> 00:24:23,440
at any point so um

00:24:21,679 --> 00:24:25,440
you know this is a really good source

00:24:23,440 --> 00:24:27,600
for generating data that's very fast

00:24:25,440 --> 00:24:29,840
all these aircraft are broadcasting

00:24:27,600 --> 00:24:31,919
their location

00:24:29,840 --> 00:24:34,720
and what i could do is again use the rtl

00:24:31,919 --> 00:24:37,039
sdr to receive that data

00:24:34,720 --> 00:24:38,720
and use a program that i had taken and

00:24:37,039 --> 00:24:39,919
modified for my own uses called dump

00:24:38,720 --> 00:24:41,840
00:24:39,919 --> 00:24:43,520
that will decode that information and

00:24:41,840 --> 00:24:46,799
put it out as

00:24:43,520 --> 00:24:49,760
standard text messages

00:24:46,799 --> 00:24:50,880
over a udp socket again i wrote a

00:24:49,760 --> 00:24:52,640
postgres

00:24:50,880 --> 00:24:55,760
python adapter which will take that

00:24:52,640 --> 00:24:59,600
information dump it into the database

00:24:55,760 --> 00:25:02,559
and i could use that database

00:24:59,600 --> 00:25:03,520
to to view all that information what's

00:25:02,559 --> 00:25:06,960
really unique is

00:25:03,520 --> 00:25:08,799
because it's uh not only uh

00:25:06,960 --> 00:25:10,640
like number of messages and things like

00:25:08,799 --> 00:25:12,240
that there's also like location data

00:25:10,640 --> 00:25:15,600
that's associated with it

00:25:12,240 --> 00:25:19,919
i could use um geography software

00:25:15,600 --> 00:25:21,919
to visualize all of that uh information

00:25:19,919 --> 00:25:23,360
let's hop over to the database and we'll

00:25:21,919 --> 00:25:24,880
take a look at that

00:25:23,360 --> 00:25:27,200
and see what exactly what that means

00:25:24,880 --> 00:25:28,880
here so let me shrink this down here's

00:25:27,200 --> 00:25:32,480
adsb

00:25:28,880 --> 00:25:35,120
here's my adsb messages database

00:25:32,480 --> 00:25:36,400
and there are a number of columns here i

00:25:35,120 --> 00:25:37,840
kind of learned my lesson from the first

00:25:36,400 --> 00:25:40,159
go around

00:25:37,840 --> 00:25:42,720
i have everything broken out into their

00:25:40,159 --> 00:25:45,440
respective columns

00:25:42,720 --> 00:25:46,000
and uh kind of show what that looks like

00:25:45,440 --> 00:25:48,799
here

00:25:46,000 --> 00:25:50,400
we see you know a variety of different

00:25:48,799 --> 00:25:51,120
types of messages not all messages

00:25:50,400 --> 00:25:53,039
contain all

00:25:51,120 --> 00:25:54,640
all types of data this one just says

00:25:53,039 --> 00:25:57,840
that the airplane is not on the ground

00:25:54,640 --> 00:25:57,840
it's currently flying

00:25:57,919 --> 00:26:04,240
um you'll notice here that there's

00:26:01,520 --> 00:26:06,880
latitude and longitude

00:26:04,240 --> 00:26:07,840
what's really unique is i could use a

00:26:06,880 --> 00:26:11,520
query

00:26:07,840 --> 00:26:13,039
and formulate that with a program called

00:26:11,520 --> 00:26:15,840
post gis

00:26:13,039 --> 00:26:18,799
which is a geography software and i

00:26:15,840 --> 00:26:21,840
could query that information

00:26:18,799 --> 00:26:25,919
and it will return location

00:26:21,840 --> 00:26:29,120
objects so i could actually visualize

00:26:25,919 --> 00:26:30,960
all of the individual points that an

00:26:29,120 --> 00:26:34,080
aircraft has said

00:26:30,960 --> 00:26:34,080
that it was located

00:26:34,240 --> 00:26:41,360
if i were to do a little bit more

00:26:38,000 --> 00:26:44,480
uh it's sql trickery i could actually

00:26:41,360 --> 00:26:46,159
format a query in such a way that it

00:26:44,480 --> 00:26:49,279
will return

00:26:46,159 --> 00:26:52,320
the actual individual lines

00:26:49,279 --> 00:26:53,440
that a an aircraft has flown so i could

00:26:52,320 --> 00:26:55,120
actually see

00:26:53,440 --> 00:26:56,720
you know up this aircraft was flying

00:26:55,120 --> 00:26:58,640
over

00:26:56,720 --> 00:26:59,919
because of my unique location here i

00:26:58,640 --> 00:27:03,360
could actually see

00:26:59,919 --> 00:27:05,200
aircraft taking off from the airport

00:27:03,360 --> 00:27:09,039
here in lancaster

00:27:05,200 --> 00:27:11,679
taking off and flying out over um

00:27:09,039 --> 00:27:13,200
over lititz and and flying to wherever

00:27:11,679 --> 00:27:15,919
their destination is

00:27:13,200 --> 00:27:16,559
so there's a lot of really interesting

00:27:15,919 --> 00:27:19,360
uh

00:27:16,559 --> 00:27:21,840
data that's here that you could that you

00:27:19,360 --> 00:27:21,840
could look at

00:27:22,480 --> 00:27:25,919
uh one other thing i want to talk about

00:27:24,159 --> 00:27:29,360
really quickly here is

00:27:25,919 --> 00:27:34,799
about views views are a postgres or

00:27:29,360 --> 00:27:37,919
sql um generally sql standard uh

00:27:34,799 --> 00:27:39,440
ability that you create a pseudo table

00:27:37,919 --> 00:27:41,279
that will reconfigure the way that this

00:27:39,440 --> 00:27:43,600
data is presented

00:27:41,279 --> 00:27:44,640
um you know if you note here this this

00:27:43,600 --> 00:27:47,679
query is

00:27:44,640 --> 00:27:48,960
you know not bad but it's it can some of

00:27:47,679 --> 00:27:50,320
the some of the queries that you might

00:27:48,960 --> 00:27:53,440
use for this information

00:27:50,320 --> 00:27:54,399
gets a little um terrible what you can

00:27:53,440 --> 00:27:57,520
do is you can create

00:27:54,399 --> 00:27:58,080
views for your database that will allow

00:27:57,520 --> 00:28:00,000
you to

00:27:58,080 --> 00:28:02,320
kind of compress all of the various

00:28:00,000 --> 00:28:05,760
messages that the adsb

00:28:02,320 --> 00:28:09,279
transmitters will send out and

00:28:05,760 --> 00:28:11,760
view them very nicely so

00:28:09,279 --> 00:28:13,840
you know rather than having to figure

00:28:11,760 --> 00:28:15,200
out you know which columns specifically

00:28:13,840 --> 00:28:17,120
that i'm interested in

00:28:15,200 --> 00:28:18,640
you can create a view called adsb

00:28:17,120 --> 00:28:20,960
locations

00:28:18,640 --> 00:28:22,720
and just do select star on locations and

00:28:20,960 --> 00:28:26,000
it will print out all that data

00:28:22,720 --> 00:28:31,840
in fact that's what i'm using here for

00:28:26,000 --> 00:28:31,840
these queries

00:28:32,640 --> 00:28:36,320
so lessons learned from this uh this was

00:28:35,520 --> 00:28:39,360
this project

00:28:36,320 --> 00:28:41,360
i would call babies first big data um

00:28:39,360 --> 00:28:44,559
you know when we're looking at uh the

00:28:41,360 --> 00:28:47,120
information collected by

00:28:44,559 --> 00:28:48,559
these adsv transmitters you're receiving

00:28:47,120 --> 00:28:50,799
upwards of

00:28:48,559 --> 00:28:52,559
you know here's here's a peek here over

00:28:50,799 --> 00:28:55,120
800 messages a minute

00:28:52,559 --> 00:28:57,520
of just one particular type of adsb

00:28:55,120 --> 00:28:59,919
message

00:28:57,520 --> 00:29:02,000
an enormous amount of data here so you

00:28:59,919 --> 00:29:05,840
know it's a very good practice

00:29:02,000 --> 00:29:08,240
in how to handle rapid data processing

00:29:05,840 --> 00:29:09,279
um believe it or not yes raspberry pi

00:29:08,240 --> 00:29:11,600
will handle

00:29:09,279 --> 00:29:13,440
uh passing off 800 messages a minute to

00:29:11,600 --> 00:29:17,360
a database

00:29:13,440 --> 00:29:18,240
um you know it it gets a little dicey

00:29:17,360 --> 00:29:21,679
sometime

00:29:18,240 --> 00:29:23,440
but it certainly will handle it

00:29:21,679 --> 00:29:24,880
like i said about views you can very

00:29:23,440 --> 00:29:29,039
easily kind of combine

00:29:24,880 --> 00:29:32,320
um you know work on your

00:29:29,039 --> 00:29:34,960
sql um foo perhaps and

00:29:32,320 --> 00:29:36,159
kind of practice working with views and

00:29:34,960 --> 00:29:41,039
other kinds of

00:29:36,159 --> 00:29:43,200
uh unique uh database management tools

00:29:41,039 --> 00:29:44,559
and data analysis is this is a really

00:29:43,200 --> 00:29:47,200
good uh

00:29:44,559 --> 00:29:48,880
data set for data analysis uh what's

00:29:47,200 --> 00:29:51,679
really unique here is you know maybe

00:29:48,880 --> 00:29:54,240
since this database tracks the location

00:29:51,679 --> 00:29:56,320
you know it might be interesting to

00:29:54,240 --> 00:29:57,679
do a query on that location data and see

00:29:56,320 --> 00:29:58,559
if there are any airplanes that are

00:29:57,679 --> 00:30:01,279
circling

00:29:58,559 --> 00:30:03,120
and then you know figure out you know oh

00:30:01,279 --> 00:30:04,559
what kind of airplane is circling around

00:30:03,120 --> 00:30:06,240
lancaster right now

00:30:04,559 --> 00:30:08,320
is it a government spy drone or

00:30:06,240 --> 00:30:11,120
something like that who knows

00:30:08,320 --> 00:30:11,600
it's in the data you can pull it out but

00:30:11,120 --> 00:30:13,039
you know

00:30:11,600 --> 00:30:17,039
you have to collect it first and that's

00:30:13,039 --> 00:30:17,039
that's what's really unique about this

00:30:19,600 --> 00:30:23,200
so enough radio stuff you know maybe

00:30:21,520 --> 00:30:24,880
you're watching this and you're thinking

00:30:23,200 --> 00:30:26,880
i i wish i would talk about something

00:30:24,880 --> 00:30:30,320
more tangible

00:30:26,880 --> 00:30:30,720
let's let's go into that uh let's talk

00:30:30,320 --> 00:30:34,080
about

00:30:30,720 --> 00:30:35,039
pothole statistics um for those who are

00:30:34,080 --> 00:30:38,080
unaware

00:30:35,039 --> 00:30:38,960
pihole is a program that runs again on a

00:30:38,080 --> 00:30:41,679
raspberry pi

00:30:38,960 --> 00:30:42,640
there's a theme here running pihol is a

00:30:41,679 --> 00:30:44,720
program that runs on

00:30:42,640 --> 00:30:47,760
raspberry pi that will allow you to

00:30:44,720 --> 00:30:50,000
block ads across your network

00:30:47,760 --> 00:30:51,360
you might say well okay i have an ad

00:30:50,000 --> 00:30:54,159
blocker on my web browser

00:30:51,360 --> 00:30:56,080
but you don't have a blocker on your

00:30:54,159 --> 00:30:57,200
playstation you don't have a map blocker

00:30:56,080 --> 00:30:59,440
on your phone

00:30:57,200 --> 00:31:00,240
um this type of device and this type of

00:30:59,440 --> 00:31:02,640
software

00:31:00,240 --> 00:31:04,159
will allow you to block ads across every

00:31:02,640 --> 00:31:07,840
device on your network

00:31:04,159 --> 00:31:11,919
it's great it's awesome 100 recommended

00:31:07,840 --> 00:31:14,559
but i have some problems as a data nerd

00:31:11,919 --> 00:31:16,640
with the way that this data is presented

00:31:14,559 --> 00:31:18,799
um

00:31:16,640 --> 00:31:19,919
first and foremost the main dashboard

00:31:18,799 --> 00:31:23,039
here

00:31:19,919 --> 00:31:24,399
only shows the past 24 hours you know

00:31:23,039 --> 00:31:26,799
maybe i don't

00:31:24,399 --> 00:31:28,799
check this every day you know i might

00:31:26,799 --> 00:31:32,559
check it you know once or twice a week

00:31:28,799 --> 00:31:34,320
and see you know what the major hotspot

00:31:32,559 --> 00:31:37,120
times of the day were

00:31:34,320 --> 00:31:38,880
um but without kind of going in here and

00:31:37,120 --> 00:31:39,919
digging through the long-term data and

00:31:38,880 --> 00:31:42,320
generating

00:31:39,919 --> 00:31:43,600
uh extra queries and stuff like that to

00:31:42,320 --> 00:31:47,200
to view it

00:31:43,600 --> 00:31:50,240
it's kind of difficult so in

00:31:47,200 --> 00:31:52,720
uh hacker spirit again

00:31:50,240 --> 00:31:53,919
i wrote a script that will connect to

00:31:52,720 --> 00:31:56,960
the pie holes

00:31:53,919 --> 00:32:00,640
api and scrape all that data

00:31:56,960 --> 00:32:02,640
and again store it in the database

00:32:00,640 --> 00:32:04,640
and then from that database that i could

00:32:02,640 --> 00:32:06,960
create my own dashboards which will

00:32:04,640 --> 00:32:10,799
visualize that information

00:32:06,960 --> 00:32:14,960
so let's take a look at what that means

00:32:10,799 --> 00:32:16,559
so here very quickly swap this down here

00:32:14,960 --> 00:32:18,320
you see i'm actually looking at the last

00:32:16,559 --> 00:32:21,440
two days compared to

00:32:18,320 --> 00:32:22,399
the last 24 hours what's really unique

00:32:21,440 --> 00:32:25,200
about this is

00:32:22,399 --> 00:32:27,679
i have full control over how all this

00:32:25,200 --> 00:32:29,440
information is presented

00:32:27,679 --> 00:32:31,519
you'll notice here on the pie hole

00:32:29,440 --> 00:32:33,919
dashboard the domains on block list is

00:32:31,519 --> 00:32:36,399
only showed as a static number

00:32:33,919 --> 00:32:38,000
however since i'm scraping that data

00:32:36,399 --> 00:32:42,159
over time i could actually see

00:32:38,000 --> 00:32:44,880
how the block list changes um

00:32:42,159 --> 00:32:45,760
so i could actually see oh there's a lot

00:32:44,880 --> 00:32:47,760
of

00:32:45,760 --> 00:32:48,880
sites you know i'm seeing a lot of uh

00:32:47,760 --> 00:32:50,720
ads

00:32:48,880 --> 00:32:51,919
on on web pages today you know i'm

00:32:50,720 --> 00:32:54,080
curious what happened

00:32:51,919 --> 00:32:55,120
oh the actual block list had you know

00:32:54,080 --> 00:32:57,679
reduced by

00:32:55,120 --> 00:32:58,159
a couple thousand domains maybe that's

00:32:57,679 --> 00:33:01,120
why

00:32:58,159 --> 00:33:02,799
i'll go in and look at it that sort of

00:33:01,120 --> 00:33:03,279
information is tracked so you could

00:33:02,799 --> 00:33:06,320
actually

00:33:03,279 --> 00:33:10,880
determine you know root cause of all

00:33:06,320 --> 00:33:13,039
that information

00:33:10,880 --> 00:33:14,080
uh in terms of the database let's let's

00:33:13,039 --> 00:33:17,360
hop in and we'll

00:33:14,080 --> 00:33:18,080
look at that uh so i'm gonna shrink this

00:33:17,360 --> 00:33:21,279
down

00:33:18,080 --> 00:33:24,559
adsb let's look at uh

00:33:21,279 --> 00:33:27,039
python schemas

00:33:24,559 --> 00:33:27,039
pi hole

00:33:27,760 --> 00:33:33,039
tables i have two tables here

00:33:30,880 --> 00:33:35,200
one is called pi hole stats and that

00:33:33,039 --> 00:33:39,360
contains a number of columns

00:33:35,200 --> 00:33:43,039
that are specific to

00:33:39,360 --> 00:33:45,440
long-term data so this is stuff like

00:33:43,039 --> 00:33:46,080
the number of domains in the block list

00:33:45,440 --> 00:33:48,720
and

00:33:46,080 --> 00:33:48,720
stuff like that

00:33:49,200 --> 00:33:53,679
the other table however contains what i

00:33:51,760 --> 00:33:56,960
call short-term data

00:33:53,679 --> 00:33:58,559
uh this is uh more or less this

00:33:56,960 --> 00:34:00,399
information the stuff that's on a

00:33:58,559 --> 00:34:03,200
10-minute interval

00:34:00,399 --> 00:34:03,600
um you know i'm not always interested

00:34:03,200 --> 00:34:05,279
you know

00:34:03,600 --> 00:34:07,279
six months from now i don't care how

00:34:05,279 --> 00:34:10,399
many uh

00:34:07,279 --> 00:34:13,599
dns requests i had at

00:34:10,399 --> 00:34:16,240
uh 206 pm on december 5th

00:34:13,599 --> 00:34:18,240
you know what i'm curious about is how

00:34:16,240 --> 00:34:20,879
that has changed over time

00:34:18,240 --> 00:34:22,399
so having it in a different table with

00:34:20,879 --> 00:34:23,760
different rules and different triggers

00:34:22,399 --> 00:34:27,520
and all kinds of other

00:34:23,760 --> 00:34:29,440
uh database management systems

00:34:27,520 --> 00:34:30,639
i could actually expire that data and

00:34:29,440 --> 00:34:35,839
get rid of it

00:34:30,639 --> 00:34:35,839
when it's no longer useful for me

00:34:36,560 --> 00:34:43,119
so this was uh you know a really good uh

00:34:39,760 --> 00:34:45,359
data set for learning cross table cross

00:34:43,119 --> 00:34:46,320
schema data handling you know having all

00:34:45,359 --> 00:34:49,599
that stuff

00:34:46,320 --> 00:34:52,879
stored in different tables and

00:34:49,599 --> 00:34:54,639
the information that's gleaned from the

00:34:52,879 --> 00:34:57,119
pipeline api

00:34:54,639 --> 00:34:58,400
updates over time so when you're putting

00:34:57,119 --> 00:35:00,400
it into the database

00:34:58,400 --> 00:35:02,720
sometimes it's necessary to do a bulk

00:35:00,400 --> 00:35:05,280
upsert which is an insert and an update

00:35:02,720 --> 00:35:06,880
at the same time

00:35:05,280 --> 00:35:08,640
like i said before this is really good

00:35:06,880 --> 00:35:10,240
practice for data retention you know

00:35:08,640 --> 00:35:11,680
making sure that

00:35:10,240 --> 00:35:13,280
you know maybe i'm only interested in

00:35:11,680 --> 00:35:14,800
the past six months worth of dns

00:35:13,280 --> 00:35:17,599
requests

00:35:14,800 --> 00:35:18,400
expire everything after that if you're

00:35:17,599 --> 00:35:21,440
doing a lot of

00:35:18,400 --> 00:35:24,320
updating a lot of inserts uh

00:35:21,440 --> 00:35:25,920
your internal postgres tuning might

00:35:24,320 --> 00:35:29,680
might need some tweaking

00:35:25,920 --> 00:35:32,079
so uh seeing this live

00:35:29,680 --> 00:35:34,160
hands-on gives you an opportunity to

00:35:32,079 --> 00:35:37,119
figure out how to tune your database

00:35:34,160 --> 00:35:39,760
uh to work very performantly especially

00:35:37,119 --> 00:35:42,400
on a raspberry pi

00:35:39,760 --> 00:35:44,000
uh how are we doing on time here i think

00:35:42,400 --> 00:35:47,280
i think we have until

00:35:44,000 --> 00:35:51,599
quarter after is that right

00:35:47,280 --> 00:35:52,000
yes so uh we'll just very quickly hop

00:35:51,599 --> 00:35:54,079
into

00:35:52,000 --> 00:35:56,079
pie holes or uh chronovirus statistics

00:35:54,079 --> 00:35:59,839
go ahead jay

00:35:56,079 --> 00:35:59,839
we have we have time

00:36:01,599 --> 00:36:04,560
go ahead sorry sorry i did i just was

00:36:03,520 --> 00:36:08,160
going to answer your question about

00:36:04,560 --> 00:36:08,160
timing yes you have done quarter after

00:36:10,000 --> 00:36:16,320
okay very good okay so uh pa chronovirus

00:36:13,920 --> 00:36:17,760
information uh before we go into this i

00:36:16,320 --> 00:36:20,000
have to disclaim

00:36:17,760 --> 00:36:21,359
i'm not a doctor i'm a computer

00:36:20,000 --> 00:36:23,599
scientist

00:36:21,359 --> 00:36:24,800
uh i'm not qualified to kind of make any

00:36:23,599 --> 00:36:28,000
uh medical

00:36:24,800 --> 00:36:29,200
assertions based on this data this is

00:36:28,000 --> 00:36:32,720
just something that i

00:36:29,200 --> 00:36:37,839
had found useful to spend my

00:36:32,720 --> 00:36:37,839
quarantine walk down time working on

00:36:38,640 --> 00:36:43,119
for those who are probably unaware uh

00:36:41,359 --> 00:36:43,839
protovirus is obviously causing a lot of

00:36:43,119 --> 00:36:46,640
problems in

00:36:43,839 --> 00:36:48,880
in the uh world and you know

00:36:46,640 --> 00:36:51,280
particularly here in the united states

00:36:48,880 --> 00:36:52,000
um and there's a lot of information

00:36:51,280 --> 00:36:54,560
available

00:36:52,000 --> 00:36:55,839
for the united states as a whole but

00:36:54,560 --> 00:36:58,960
each individual state

00:36:55,839 --> 00:37:00,640
sometimes uh has some struggles with

00:36:58,960 --> 00:37:05,040
presenting data

00:37:00,640 --> 00:37:07,599
in a timely fashion and providing

00:37:05,040 --> 00:37:09,680
interpretations of that data you know uh

00:37:07,599 --> 00:37:13,040
how many new cases per day

00:37:09,680 --> 00:37:14,960
a lot of that's just kind of down to uh

00:37:13,040 --> 00:37:16,640
down like an exercise left for the

00:37:14,960 --> 00:37:18,320
reader

00:37:16,640 --> 00:37:20,079
looking here this is the pennsylvania

00:37:18,320 --> 00:37:23,359
coronavirus uh

00:37:20,079 --> 00:37:24,000
information dashboard um they're doing a

00:37:23,359 --> 00:37:26,720
very

00:37:24,000 --> 00:37:28,560
good job the very best they can with uh

00:37:26,720 --> 00:37:31,040
the resources that they have

00:37:28,560 --> 00:37:32,560
uh you know updating this page you know

00:37:31,040 --> 00:37:36,320
if i were to refresh here

00:37:32,560 --> 00:37:39,200
okay they actually did update it um

00:37:36,320 --> 00:37:41,839
very often they don't have the manpower

00:37:39,200 --> 00:37:44,400
uh you know the human resources to

00:37:41,839 --> 00:37:45,440
uh update this information in a timely

00:37:44,400 --> 00:37:48,320
fashion

00:37:45,440 --> 00:37:50,000
um you know for some it's not uncommon

00:37:48,320 --> 00:37:53,040
that this page will not have

00:37:50,000 --> 00:37:55,520
any updates for a day two days you know

00:37:53,040 --> 00:37:59,040
24 48 72 hours

00:37:55,520 --> 00:38:02,240
and you know as the pandemic continues

00:37:59,040 --> 00:38:03,760
it's sometimes important to make

00:38:02,240 --> 00:38:05,680
make that data available so that you can

00:38:03,760 --> 00:38:10,079
make an informed decision about

00:38:05,680 --> 00:38:12,640
uh about your life uh overall however

00:38:10,079 --> 00:38:13,520
the information they provide is in this

00:38:12,640 --> 00:38:15,760
arcgis

00:38:13,520 --> 00:38:19,200
dashboard which is kind of slow a little

00:38:15,760 --> 00:38:22,240
bit clunky a little bit difficult to use

00:38:19,200 --> 00:38:24,400
and throughout the day it's sometimes

00:38:22,240 --> 00:38:26,000
difficult to

00:38:24,400 --> 00:38:28,400
reach this page since there's a lot of

00:38:26,000 --> 00:38:32,000
folks that are kind of hitting f5 and

00:38:28,400 --> 00:38:35,200
hammering the server so

00:38:32,000 --> 00:38:36,800
i decided to kind of create a database

00:38:35,200 --> 00:38:37,839
where i store all that information

00:38:36,800 --> 00:38:39,680
myself

00:38:37,839 --> 00:38:41,359
and then i can kind of graph things out

00:38:39,680 --> 00:38:44,720
and view that

00:38:41,359 --> 00:38:47,520
myself so what i did was

00:38:44,720 --> 00:38:48,960
um again following the theme here i

00:38:47,520 --> 00:38:51,520
wrote uh

00:38:48,960 --> 00:38:52,800
some some scrapers i have a python

00:38:51,520 --> 00:38:54,560
script that will scrape the department

00:38:52,800 --> 00:38:56,720
of health web page

00:38:54,560 --> 00:38:58,640
and load it into the databanks and i'm

00:38:56,720 --> 00:39:00,320
also taking a data set that the new york

00:38:58,640 --> 00:39:03,520
times provides

00:39:00,320 --> 00:39:04,960
uh regarding per county cases

00:39:03,520 --> 00:39:06,560
and i'm also loading that into the

00:39:04,960 --> 00:39:07,440
database so that i can cross-reference

00:39:06,560 --> 00:39:09,440
everything

00:39:07,440 --> 00:39:11,599
you know trust but verify always always

00:39:09,440 --> 00:39:15,200
you know check your data sources

00:39:11,599 --> 00:39:16,720
so um once it's in the database i can do

00:39:15,200 --> 00:39:19,839
all sorts of

00:39:16,720 --> 00:39:21,839
data analysis on this i could print out

00:39:19,839 --> 00:39:24,960
the number of new cases and make a plot

00:39:21,839 --> 00:39:25,920
of the new cases over time i can connect

00:39:24,960 --> 00:39:29,200
with grafana

00:39:25,920 --> 00:39:32,480
and view all that information um

00:39:29,200 --> 00:39:33,040
across across the state so let's take a

00:39:32,480 --> 00:39:36,079
look at

00:39:33,040 --> 00:39:39,760
uh the database side again uh so

00:39:36,079 --> 00:39:44,720
i'm gonna switch here to copen19

00:39:39,760 --> 00:39:46,400
and schemas cover 19. i have

00:39:44,720 --> 00:39:49,920
three table or three tables in this

00:39:46,400 --> 00:39:52,079
database one is for the pa specific

00:39:49,920 --> 00:39:53,920
information and that just stores

00:39:52,079 --> 00:39:58,240
information that i'm able to view

00:39:53,920 --> 00:40:00,320
from the data here this is

00:39:58,240 --> 00:40:01,440
the date the number of confirmed cases

00:40:00,320 --> 00:40:04,560
the number of deaths

00:40:01,440 --> 00:40:06,079
and then i do some math to you know take

00:40:04,560 --> 00:40:07,440
today's confirmed subtract from

00:40:06,079 --> 00:40:08,880
yesterday's confirmed that's the number

00:40:07,440 --> 00:40:11,440
of new cases

00:40:08,880 --> 00:40:13,359
growth ratio is you know how how many

00:40:11,440 --> 00:40:16,720
cases that is divided by

00:40:13,359 --> 00:40:16,720
uh other information

00:40:16,800 --> 00:40:23,599
so on and so forth um i have

00:40:20,160 --> 00:40:25,599
a us wide

00:40:23,599 --> 00:40:27,599
table here and that is that information

00:40:25,599 --> 00:40:30,960
from the new york times database

00:40:27,599 --> 00:40:32,640
and then i also have a pa events uh

00:40:30,960 --> 00:40:34,160
table which is a separate table that

00:40:32,640 --> 00:40:36,960
just stores information

00:40:34,160 --> 00:40:36,960
text based

00:40:37,280 --> 00:40:43,920
regarding major events in the process of

00:40:41,359 --> 00:40:46,319
uh the pandemic you know when were uh

00:40:43,920 --> 00:40:48,560
stay-at-home orders issued when were

00:40:46,319 --> 00:40:49,680
you know major public events held things

00:40:48,560 --> 00:40:52,560
like that

00:40:49,680 --> 00:40:54,079
uh and the results being i could

00:40:52,560 --> 00:40:57,359
actually go in

00:40:54,079 --> 00:41:01,520
and view uh information in

00:40:57,359 --> 00:41:04,640
a very reasonable way compared to

00:41:01,520 --> 00:41:06,240
uh the arcgis dashboard you know so this

00:41:04,640 --> 00:41:09,520
is you get a little teeny tiny

00:41:06,240 --> 00:41:10,079
new cases per day graph here but um you

00:41:09,520 --> 00:41:11,599
know here

00:41:10,079 --> 00:41:14,160
what i could do is i could scroll down

00:41:11,599 --> 00:41:16,400
and i could see new cases per day

00:41:14,160 --> 00:41:18,839
as big as i want and i could actually

00:41:16,400 --> 00:41:22,079
select the

00:41:18,839 --> 00:41:23,599
um uh the the date range

00:41:22,079 --> 00:41:26,400
that i'm interested in so if i'm only

00:41:23,599 --> 00:41:27,200
interested in the past uh 31 days i

00:41:26,400 --> 00:41:30,079
could see that

00:41:27,200 --> 00:41:30,079
over over time

00:41:30,800 --> 00:41:35,280
uh what's really interesting about this

00:41:32,560 --> 00:41:36,480
is since you know statistics are kind of

00:41:35,280 --> 00:41:39,440
predictable

00:41:36,480 --> 00:41:40,560
um you could kind of you know math

00:41:39,440 --> 00:41:43,359
doesn't lie

00:41:40,560 --> 00:41:44,960
it could actually take the growth ratio

00:41:43,359 --> 00:41:46,079
the rate at which these cases are

00:41:44,960 --> 00:41:48,640
increasing

00:41:46,079 --> 00:41:49,760
and make an estimate for the next like

00:41:48,640 --> 00:41:51,680
for that day

00:41:49,760 --> 00:41:53,200
you know based on yesterday's number of

00:41:51,680 --> 00:41:55,680
cases and the

00:41:53,200 --> 00:41:57,440
rate at which the cases were increasing

00:41:55,680 --> 00:41:58,079
i estimate that the cases are going to

00:41:57,440 --> 00:42:01,280
be

00:41:58,079 --> 00:42:04,400
x or y uh overall

00:42:01,280 --> 00:42:07,520
and i could get very very very close

00:42:04,400 --> 00:42:10,960
in fact yesterday uh the fourth

00:42:07,520 --> 00:42:14,160
i was off by a grand total of ten cases

00:42:10,960 --> 00:42:17,920
out of uh how many

00:42:14,160 --> 00:42:22,560
confirmed pa cases 411 000

00:42:17,920 --> 00:42:23,839
so being off by 10 which is 0.0026

00:42:22,560 --> 00:42:26,000
percent error

00:42:23,839 --> 00:42:27,599
it's super impressive super impressive

00:42:26,000 --> 00:42:31,040
that you're able to kind of

00:42:27,599 --> 00:42:33,520
uh get this this type of granu granular

00:42:31,040 --> 00:42:36,960
uh information generated from here this

00:42:33,520 --> 00:42:36,960
is really useful information

00:42:39,920 --> 00:42:46,079
so lessons learned from this uh

00:42:43,119 --> 00:42:48,240
this project and uh data set was a

00:42:46,079 --> 00:42:49,359
really good lesson in kind of scripting

00:42:48,240 --> 00:42:51,119
updates

00:42:49,359 --> 00:42:52,480
uh the information provided by the new

00:42:51,119 --> 00:42:56,319
york times database is

00:42:52,480 --> 00:42:56,960
a gigantic csv file uh being able to

00:42:56,319 --> 00:42:59,119
create a

00:42:56,960 --> 00:43:00,960
sql script that will import it and do

00:42:59,119 --> 00:43:04,480
all the necessary tools to

00:43:00,960 --> 00:43:06,240
tune the database for that import

00:43:04,480 --> 00:43:07,920
is a really good project in and of

00:43:06,240 --> 00:43:09,680
itself

00:43:07,920 --> 00:43:12,079
you know you can do the data analysis

00:43:09,680 --> 00:43:14,720
like i said being able to predict

00:43:12,079 --> 00:43:15,520
the number of cases by you know only

00:43:14,720 --> 00:43:18,319
being off by

00:43:15,520 --> 00:43:18,640
10 is um pretty impressive and you know

00:43:18,319 --> 00:43:23,359
just

00:43:18,640 --> 00:43:24,800
something that's very easy to do um

00:43:23,359 --> 00:43:26,480
and like i said you know because these

00:43:24,800 --> 00:43:28,480
files tend to be huge

00:43:26,480 --> 00:43:30,319
from the new york times and other other

00:43:28,480 --> 00:43:32,880
data sources

00:43:30,319 --> 00:43:34,480
you get really good hard experience

00:43:32,880 --> 00:43:40,400
practicing how to import

00:43:34,480 --> 00:43:43,520
all that data in a timely fashion

00:43:40,400 --> 00:43:45,040
so uh just wrapping up here if there are

00:43:43,520 --> 00:43:46,400
two things that you take away from

00:43:45,040 --> 00:43:50,880
today's talk

00:43:46,400 --> 00:43:52,240
uh the first is i hope that um

00:43:50,880 --> 00:43:54,000
you learned that creating your own

00:43:52,240 --> 00:43:57,839
source of constantly refreshing data

00:43:54,000 --> 00:43:59,359
is super easy super inexpensive

00:43:57,839 --> 00:44:01,040
and it could provide a really good

00:43:59,359 --> 00:44:03,040
learning experience kind of getting into

00:44:01,040 --> 00:44:05,280
the nitty gritty details of

00:44:03,040 --> 00:44:07,760
database administration software

00:44:05,280 --> 00:44:09,119
administration application development

00:44:07,760 --> 00:44:12,560
um

00:44:09,119 --> 00:44:13,839
and so on and so forth and if nothing

00:44:12,560 --> 00:44:16,000
else

00:44:13,839 --> 00:44:18,000
it'll give you a reason to experiment

00:44:16,000 --> 00:44:19,599
with uh

00:44:18,000 --> 00:44:21,280
generating a variety of different data

00:44:19,599 --> 00:44:23,359
sources literally from

00:44:21,280 --> 00:44:24,640
the thin air in some cases like with the

00:44:23,359 --> 00:44:28,240
weather station and

00:44:24,640 --> 00:44:30,240
airplane tracking um so

00:44:28,240 --> 00:44:32,000
i would love to hear uh you know maybe

00:44:30,240 --> 00:44:35,520
cpas 2021

00:44:32,000 --> 00:44:36,800
a number of folks that were able to

00:44:35,520 --> 00:44:40,480
take what i've talked about today and

00:44:36,800 --> 00:44:40,480
maybe come up with a project of your own

00:44:41,280 --> 00:44:51,839
uh now i'll be open for any questions

00:44:44,480 --> 00:44:51,839
i'm not sure if we had any so far today

00:44:55,040 --> 00:44:59,200
while we're waiting for questions i'm

00:44:56,480 --> 00:45:00,720
going to post uh here are my references

00:44:59,200 --> 00:45:02,560
i know there were some questions about

00:45:00,720 --> 00:45:04,480
uh making sure that

00:45:02,560 --> 00:45:05,920
references and links were available so

00:45:04,480 --> 00:45:07,680
i'm going to post them here so they're

00:45:05,920 --> 00:45:09,599
i think i said earlier in the in the

00:45:07,680 --> 00:45:11,119
live in the chat

00:45:09,599 --> 00:45:12,640
all these sessions are being recorded

00:45:11,119 --> 00:45:13,680
we'll publish them after we do a little

00:45:12,640 --> 00:45:17,359
post processing

00:45:13,680 --> 00:45:19,839
and uh put them up there in the next

00:45:17,359 --> 00:45:19,839

YouTube URL: https://www.youtube.com/watch?v=HYInso_q85s


