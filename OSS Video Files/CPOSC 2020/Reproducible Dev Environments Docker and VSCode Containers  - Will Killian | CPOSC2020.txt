Title: Reproducible Dev Environments Docker and VSCode Containers  - Will Killian | CPOSC2020
Publication date: 2021-01-18
Playlist: CPOSC 2020 Recorded Sessions
Description: 
	Session Page: https://cposc.org/sessions/reproducible-development-environments-docker-visual-studio-code-devcontainers/
Chat Log: https://cposc.org/chat-log-reproducible-development-environments-docker-visual-studio-code-devcontainers/

The Central Pennsylvania Open Source Conference (CPOSC) is a one-day technical conference for open source users and developers. Presentations and sessions cover all aspects of open source, with talks ranging from novice to expert skill levels and featuring case studies, best practices, code-alongs and more. Join us in 2021! https://cposc.org
Captions: 
	00:00:04,960 --> 00:00:09,040
let's get this kicked off

00:00:06,560 --> 00:00:09,760
so this morning's session is from

00:00:09,040 --> 00:00:12,400
william

00:00:09,760 --> 00:00:14,080
killian and he will be talking about

00:00:12,400 --> 00:00:14,880
reproducible development environments

00:00:14,080 --> 00:00:17,680
with docker

00:00:14,880 --> 00:00:18,240
visual studio core and dev containers

00:00:17,680 --> 00:00:20,160
william

00:00:18,240 --> 00:00:22,320
is an assistant professor of computer

00:00:20,160 --> 00:00:23,279
science at millersville university my

00:00:22,320 --> 00:00:25,439
alma mater

00:00:23,279 --> 00:00:26,960
that's awesome his research area

00:00:25,439 --> 00:00:29,519
includes predictive modeling

00:00:26,960 --> 00:00:31,760
programming models program optimization

00:00:29,519 --> 00:00:33,360
in computer science education

00:00:31,760 --> 00:00:35,520
at millersville he teaches a wide

00:00:33,360 --> 00:00:38,719
variety of computer science courses

00:00:35,520 --> 00:00:40,399
he maintains the auto lab auto upgrading

00:00:38,719 --> 00:00:42,399
platform and supports development

00:00:40,399 --> 00:00:45,520
workflows for students

00:00:42,399 --> 00:00:47,520
prior to joining mu he worked at intel

00:00:45,520 --> 00:00:49,280
and lawrence livermore national

00:00:47,520 --> 00:00:51,680
laboratory where he focused on

00:00:49,280 --> 00:00:53,360
application fitness optimization

00:00:51,680 --> 00:00:55,680
performance modeling

00:00:53,360 --> 00:00:57,120
portability abstraction application

00:00:55,680 --> 00:00:59,039
tuning and

00:00:57,120 --> 00:01:00,640
accelerating multi-dimensional physics

00:00:59,039 --> 00:01:03,520
applications

00:01:00,640 --> 00:01:04,720
he continues to collaborate with llnl on

00:01:03,520 --> 00:01:07,760
the open source

00:01:04,720 --> 00:01:08,720
raga portability abstraction layer and

00:01:07,760 --> 00:01:10,720
camp libraries

00:01:08,720 --> 00:01:12,240
and he makes it easy for users to create

00:01:10,720 --> 00:01:15,200
scientific applications

00:01:12,240 --> 00:01:17,280
which run on super computing systems so

00:01:15,200 --> 00:01:18,080
with that introduction i turn it over to

00:01:17,280 --> 00:01:20,880
will

00:01:18,080 --> 00:01:21,680
to get us started for today thanks will

00:01:20,880 --> 00:01:24,840
thanks charlie

00:01:21,680 --> 00:01:27,360
thanks charlie um so

00:01:24,840 --> 00:01:28,640
um okay all right i just want to make

00:01:27,360 --> 00:01:31,040
sure there wasn't

00:01:28,640 --> 00:01:31,759
feedback there um thanks for coming to

00:01:31,040 --> 00:01:34,799
my talk

00:01:31,759 --> 00:01:36,320
um charlo as charlie uh said i'm will

00:01:34,799 --> 00:01:37,920
killian i teach at

00:01:36,320 --> 00:01:41,200
uh computer science at millersville

00:01:37,920 --> 00:01:44,880
university and the focus of my talk

00:01:41,200 --> 00:01:47,600
is on how we can

00:01:44,880 --> 00:01:49,119
have development environments that are

00:01:47,600 --> 00:01:53,119
pre-configured

00:01:49,119 --> 00:01:56,320
and already ready to go and set up to

00:01:53,119 --> 00:01:58,240
help um other new people learn

00:01:56,320 --> 00:02:00,479
how to use uh you know different

00:01:58,240 --> 00:02:02,880
languages without the need to

00:02:00,479 --> 00:02:03,600
know how to set up an entire development

00:02:02,880 --> 00:02:07,040
environment

00:02:03,600 --> 00:02:11,280
so um you know this is pretty cool stuff

00:02:07,040 --> 00:02:15,120
um at the foundation it does use docker

00:02:11,280 --> 00:02:19,200
um and i'll have a brief overview of

00:02:15,120 --> 00:02:22,080
what docker is as well so um

00:02:19,200 --> 00:02:24,560
all right next if i can advance the

00:02:22,080 --> 00:02:24,560
slide

00:02:26,640 --> 00:02:30,959
all right um so just some background and

00:02:29,680 --> 00:02:33,920
disclaimer

00:02:30,959 --> 00:02:34,560
um cpas central pennsylvania open source

00:02:33,920 --> 00:02:36,640
conference

00:02:34,560 --> 00:02:39,519
i grew up in lancaster i went to penn

00:02:36,640 --> 00:02:39,519
manor high school

00:02:39,760 --> 00:02:44,319
i got my undergrad at millersville went

00:02:42,160 --> 00:02:47,519
to delaware for my

00:02:44,319 --> 00:02:47,920
master's in phd charlie already covered

00:02:47,519 --> 00:02:51,360
my

00:02:47,920 --> 00:02:54,400
my research interests um i do have

00:02:51,360 --> 00:02:56,319
uh two disclaimers so any opinion that i

00:02:54,400 --> 00:02:58,959
state is my own personal one

00:02:56,319 --> 00:03:00,560
and um a lot of this information i

00:02:58,959 --> 00:03:03,280
generously sourced from open source

00:03:00,560 --> 00:03:07,040
repositories and documentation

00:03:03,280 --> 00:03:10,879
that i'll include at the end

00:03:07,040 --> 00:03:14,000
so um just a overview on

00:03:10,879 --> 00:03:15,920
you know the outline of this talk i'm

00:03:14,000 --> 00:03:18,959
going to provide justification as to

00:03:15,920 --> 00:03:20,800
why this might be a good idea i'll go

00:03:18,959 --> 00:03:24,239
over the basics of

00:03:20,800 --> 00:03:25,680
docker which will include how to build a

00:03:24,239 --> 00:03:29,440
container

00:03:25,680 --> 00:03:32,799
specifying the dockerfile syntax

00:03:29,440 --> 00:03:36,319
actually using and starting a container

00:03:32,799 --> 00:03:37,200
then i'll pivot over to using visual

00:03:36,319 --> 00:03:39,360
studio code

00:03:37,200 --> 00:03:41,120
and the dev containers extension that

00:03:39,360 --> 00:03:43,360
microsoft released

00:03:41,120 --> 00:03:44,879
so installing and configuring the

00:03:43,360 --> 00:03:47,280
extension to

00:03:44,879 --> 00:03:48,560
to use with any sort of code that you

00:03:47,280 --> 00:03:51,920
want

00:03:48,560 --> 00:03:52,720
um at the end i'll have a demo that

00:03:51,920 --> 00:03:55,920
hopefully will

00:03:52,720 --> 00:03:57,519
finally work i also encourage you that

00:03:55,920 --> 00:04:00,000
if you do have any questions

00:03:57,519 --> 00:04:00,640
you can either type in the chat um and

00:04:00,000 --> 00:04:02,640
i'll like

00:04:00,640 --> 00:04:04,159
survey the chat every so often so if you

00:04:02,640 --> 00:04:07,200
do questions you know

00:04:04,159 --> 00:04:10,319
please feel free to interrupt me um that

00:04:07,200 --> 00:04:10,319
is perfectly acceptable

00:04:11,360 --> 00:04:18,000
well as to why

00:04:14,400 --> 00:04:20,720
even use dev containers i must admit

00:04:18,000 --> 00:04:23,360
that this is sort of where i started

00:04:20,720 --> 00:04:24,160
is that i wanted to see if i could do it

00:04:23,360 --> 00:04:27,360
um

00:04:24,160 --> 00:04:28,400
and i really didn't stop to think should

00:04:27,360 --> 00:04:31,520
i

00:04:28,400 --> 00:04:35,759
and i started working on this uh

00:04:31,520 --> 00:04:38,960
in the spring before

00:04:35,759 --> 00:04:42,720
kovid even happened

00:04:38,960 --> 00:04:43,600
so i just had to include some sort of

00:04:42,720 --> 00:04:47,040
meme

00:04:43,600 --> 00:04:50,880
um but i continued to

00:04:47,040 --> 00:04:52,880
vet this out and um you know realize hey

00:04:50,880 --> 00:04:57,479
this would be a good idea

00:04:52,880 --> 00:04:59,600
uh given that we would have about

00:04:57,479 --> 00:05:02,080
260 270

00:04:59,600 --> 00:05:03,120
computer science majors who used to be

00:05:02,080 --> 00:05:06,880
able to work on

00:05:03,120 --> 00:05:10,320
assignments and um you know programs

00:05:06,880 --> 00:05:13,360
in the university um so

00:05:10,320 --> 00:05:15,199
we have two labs um

00:05:13,360 --> 00:05:16,639
and now students would be forced to

00:05:15,199 --> 00:05:21,280
learn remotely

00:05:16,639 --> 00:05:24,639
and some of the languages that we teach

00:05:21,280 --> 00:05:27,360
aren't necessarily the easiest to set up

00:05:24,639 --> 00:05:27,919
so students would be learning remotely

00:05:27,360 --> 00:05:31,039
not on

00:05:27,919 --> 00:05:34,560
campus so students can't access the

00:05:31,039 --> 00:05:37,280
computer labs easily and if they could

00:05:34,560 --> 00:05:40,960
remotely access the labs

00:05:37,280 --> 00:05:43,600
you know we have 27 machines that

00:05:40,960 --> 00:05:44,160
students can ssh into they'd be limited

00:05:43,600 --> 00:05:46,880
to

00:05:44,160 --> 00:05:48,560
a terminal and using whatever

00:05:46,880 --> 00:05:50,720
applications are available through the

00:05:48,560 --> 00:05:55,600
command line interface

00:05:50,720 --> 00:05:58,240
and if we had you know a decent subset

00:05:55,600 --> 00:05:59,440
um of the students that were relying on

00:05:58,240 --> 00:06:02,800
connecting to

00:05:59,440 --> 00:06:06,319
the computers we have about 200 students

00:06:02,800 --> 00:06:08,880
actively taking courses using 27

00:06:06,319 --> 00:06:09,840
machines 10 users per machine in the

00:06:08,880 --> 00:06:13,440
worst case

00:06:09,840 --> 00:06:16,460
is not necessarily a good idea

00:06:13,440 --> 00:06:17,520
um also if we wanted to provide

00:06:16,460 --> 00:06:20,400
[Music]

00:06:17,520 --> 00:06:21,360
you know setup instructions for students

00:06:20,400 --> 00:06:26,160
to get their own

00:06:21,360 --> 00:06:28,080
development environment um ready to go

00:06:26,160 --> 00:06:30,479
there's various operating system

00:06:28,080 --> 00:06:34,720
variances whether or not they're using

00:06:30,479 --> 00:06:40,080
windows 7 windows 8 windows 10

00:06:34,720 --> 00:06:42,160
mac os various linux distribution etc

00:06:40,080 --> 00:06:44,080
and then they could be working on their

00:06:42,160 --> 00:06:47,680
own computer

00:06:44,080 --> 00:06:49,599
and submit an assignment and then our

00:06:47,680 --> 00:06:51,120
grading platform could be different than

00:06:49,599 --> 00:06:51,919
what they're using and so they could

00:06:51,120 --> 00:06:54,560
have something that

00:06:51,919 --> 00:06:56,080
works just fine for them uh but when

00:06:54,560 --> 00:06:58,319
they submit it it doesn't work

00:06:56,080 --> 00:07:00,479
and so then it's it's more of an issue

00:06:58,319 --> 00:07:04,400
on us as educators to figure out well

00:07:00,479 --> 00:07:07,599
how can we fairly grade this so

00:07:04,400 --> 00:07:09,039
there's a huge motivation for actually

00:07:07,599 --> 00:07:13,199
wanting to

00:07:09,039 --> 00:07:16,240
ensure that hey students can

00:07:13,199 --> 00:07:19,120
have a same development environment for

00:07:16,240 --> 00:07:19,120
what they're trying to do

00:07:20,000 --> 00:07:26,000
the general goals of reproducibility

00:07:23,520 --> 00:07:26,720
or having reproducible development

00:07:26,000 --> 00:07:28,800
environments

00:07:26,720 --> 00:07:30,240
is first and foremost we want to

00:07:28,800 --> 00:07:32,880
minimize the pain points for

00:07:30,240 --> 00:07:32,880
troubleshooting

00:07:33,280 --> 00:07:38,880
if you have variances in

00:07:36,319 --> 00:07:40,560
operating systems variances and software

00:07:38,880 --> 00:07:43,360
and compilers and

00:07:40,560 --> 00:07:44,639
library versions and things like that it

00:07:43,360 --> 00:07:47,840
becomes a cross problem

00:07:44,639 --> 00:07:49,440
so multiplicative um now it's just a

00:07:47,840 --> 00:07:51,120
single configuration i just have to

00:07:49,440 --> 00:07:53,599
configure it once

00:07:51,120 --> 00:07:55,599
um and only provide directions on how to

00:07:53,599 --> 00:07:57,599
install docker

00:07:55,599 --> 00:08:00,639
on their computer and maybe install

00:07:57,599 --> 00:08:04,240
visual studio code in a single

00:08:00,639 --> 00:08:06,319
extension the other

00:08:04,240 --> 00:08:08,960
main goal here is that we can provide a

00:08:06,319 --> 00:08:10,240
usable environment for students

00:08:08,960 --> 00:08:12,319
if the students don't have to worry

00:08:10,240 --> 00:08:14,400
about configuring software

00:08:12,319 --> 00:08:16,479
they can focus and spend more of their

00:08:14,400 --> 00:08:18,160
time on

00:08:16,479 --> 00:08:20,080
you know meeting course learning

00:08:18,160 --> 00:08:23,440
objectives

00:08:20,080 --> 00:08:26,560
it's consistent for everyone and

00:08:23,440 --> 00:08:27,280
by maintaining this consistency it means

00:08:26,560 --> 00:08:30,479
that

00:08:27,280 --> 00:08:32,479
what they submit um or what they

00:08:30,479 --> 00:08:34,640
develop on is the exact same thing as

00:08:32,479 --> 00:08:37,440
what they're being evaluated

00:08:34,640 --> 00:08:38,880
so it ties into just having everything

00:08:37,440 --> 00:08:42,000
working which is

00:08:38,880 --> 00:08:45,279
pretty convenient but it's not

00:08:42,000 --> 00:08:47,600
necessarily something that is was easy

00:08:45,279 --> 00:08:50,720
to get going

00:08:47,600 --> 00:08:52,560
um for background with the

00:08:50,720 --> 00:08:54,320
department infrastructure that we we

00:08:52,560 --> 00:08:56,480
currently have

00:08:54,320 --> 00:08:57,360
we have a linux lab which is remotely

00:08:56,480 --> 00:09:00,480
accessible

00:08:57,360 --> 00:09:05,200
has 27 dell precision workstations

00:09:00,480 --> 00:09:05,200
with skylake processors 16 gigs of ram

00:09:05,519 --> 00:09:11,360
we use a linux distribution which is

00:09:09,600 --> 00:09:13,680
probably not the most popular for

00:09:11,360 --> 00:09:15,760
computer science education

00:09:13,680 --> 00:09:17,200
we use arch linux which is a rolling

00:09:15,760 --> 00:09:20,240
distribution

00:09:17,200 --> 00:09:21,600
that has latest kernel and packages the

00:09:20,240 --> 00:09:23,360
reason for this is

00:09:21,600 --> 00:09:24,880
you know it's nice to have the latest

00:09:23,360 --> 00:09:28,240
and greatest stuff

00:09:24,880 --> 00:09:29,920
um at the cost of you know maybe an

00:09:28,240 --> 00:09:34,160
upgrade every now and then

00:09:29,920 --> 00:09:36,480
doesn't go quite as well as planned and

00:09:34,160 --> 00:09:37,519
but you know we can really have a

00:09:36,480 --> 00:09:42,320
minimal

00:09:37,519 --> 00:09:44,880
lean um installation which is convenient

00:09:42,320 --> 00:09:46,320
um we also have an autolab server which

00:09:44,880 --> 00:09:49,519
is used for

00:09:46,320 --> 00:09:51,600
auto grading and that's deployed on a

00:09:49,519 --> 00:09:54,880
new virtualized infrastructure

00:09:51,600 --> 00:09:58,959
um where this particular

00:09:54,880 --> 00:10:01,839
um uh virtual machine

00:09:58,959 --> 00:10:02,160
has you know 16 gigs of ram allocated i

00:10:01,839 --> 00:10:05,279
think

00:10:02,160 --> 00:10:08,560
four cpu pores out of the 22

00:10:05,279 --> 00:10:10,880
for that intel xeon processor the host

00:10:08,560 --> 00:10:11,760
os is arch linux but what's nice is we

00:10:10,880 --> 00:10:15,839
can

00:10:11,760 --> 00:10:19,200
use any docker container for grading so

00:10:15,839 --> 00:10:22,959
essentially what we can do is provide a

00:10:19,200 --> 00:10:25,600
docker image that is representative

00:10:22,959 --> 00:10:27,839
of the linux lab and the software stack

00:10:25,600 --> 00:10:30,160
that we have installed on the linux lab

00:10:27,839 --> 00:10:33,040
and so when students work on assignments

00:10:30,160 --> 00:10:36,560
we guarantee that consistency

00:10:33,040 --> 00:10:37,839
so what we want to do is take this

00:10:36,560 --> 00:10:41,440
existing

00:10:37,839 --> 00:10:42,959
docker container and allow students to

00:10:41,440 --> 00:10:47,839
use that container

00:10:42,959 --> 00:10:47,839
for their assignments and their projects

00:10:48,480 --> 00:10:51,920
so we want to containerize all of the

00:10:51,200 --> 00:10:55,360
things

00:10:51,920 --> 00:10:58,000
now what types of things do we care

00:10:55,360 --> 00:10:58,000
about well

00:10:58,480 --> 00:11:01,760
for those of you who don't have any

00:11:00,000 --> 00:11:04,399
experience with docker

00:11:01,760 --> 00:11:05,200
or what a container is i just want to

00:11:04,399 --> 00:11:07,680
provide some

00:11:05,200 --> 00:11:09,200
some brief background it's basically

00:11:07,680 --> 00:11:12,320
bundling up

00:11:09,200 --> 00:11:12,320
an instance of

00:11:12,560 --> 00:11:16,160
an operating system that doesn't really

00:11:14,640 --> 00:11:19,519
include the kernel

00:11:16,160 --> 00:11:21,760
um it contains libraries uh system

00:11:19,519 --> 00:11:25,519
resources

00:11:21,760 --> 00:11:28,560
compilers language tool chains

00:11:25,519 --> 00:11:29,760
any files that you would want you could

00:11:28,560 --> 00:11:31,920
theoretically

00:11:29,760 --> 00:11:33,760
build an entire application and host it

00:11:31,920 --> 00:11:37,120
within a container

00:11:33,760 --> 00:11:38,959
you can have scalable components and

00:11:37,120 --> 00:11:41,680
running individually in containers and

00:11:38,959 --> 00:11:43,680
replicate those containers for fail-safe

00:11:41,680 --> 00:11:46,320
measures etc

00:11:43,680 --> 00:11:47,760
um but fundamentally what we're doing is

00:11:46,320 --> 00:11:49,680
we're bundling up

00:11:47,760 --> 00:11:50,800
all the software that we want students

00:11:49,680 --> 00:11:55,839
to have

00:11:50,800 --> 00:11:59,279
and making it easy to deploy to them

00:11:55,839 --> 00:12:01,519
um we can actually have this

00:11:59,279 --> 00:12:03,200
uniform development experience because

00:12:01,519 --> 00:12:05,519
we can have the

00:12:03,200 --> 00:12:07,760
operating system files the language tool

00:12:05,519 --> 00:12:11,839
chains and all the libraries and tools

00:12:07,760 --> 00:12:11,839
that they might use

00:12:12,959 --> 00:12:18,639
so what we want to do is

00:12:16,399 --> 00:12:20,320
define our own containers in some way

00:12:18,639 --> 00:12:22,320
and we can do this through

00:12:20,320 --> 00:12:24,720
the use of something known as a doctor

00:12:22,320 --> 00:12:29,360
file and a docker file

00:12:24,720 --> 00:12:31,120
is a recipe on how to build a container

00:12:29,360 --> 00:12:33,200
and the only thing that a dockerfile

00:12:31,120 --> 00:12:36,839
really contains is a list of commands

00:12:33,200 --> 00:12:38,160
and i have a subset of commands listed

00:12:36,839 --> 00:12:41,200
here

00:12:38,160 --> 00:12:44,240
all shouty and and capital lettered

00:12:41,200 --> 00:12:45,600
um so uh from um is the

00:12:44,240 --> 00:12:47,680
the command that's gonna be listed at

00:12:45,600 --> 00:12:50,639
the very top and

00:12:47,680 --> 00:12:52,240
uh what we're going to do is define a

00:12:50,639 --> 00:12:55,440
base container to build from

00:12:52,240 --> 00:12:55,839
so um there are folks that you know

00:12:55,440 --> 00:12:58,880
spent

00:12:55,839 --> 00:13:01,920
a lot of time on designing and building

00:12:58,880 --> 00:13:05,040
various docker images some are

00:13:01,920 --> 00:13:09,360
officially from companies like

00:13:05,040 --> 00:13:09,360
docker google nvidia

00:13:09,760 --> 00:13:14,160
a lot of software platform companies

00:13:12,959 --> 00:13:16,720
provide their own

00:13:14,160 --> 00:13:19,440
docker containers as well and images

00:13:16,720 --> 00:13:23,040
that you can use

00:13:19,440 --> 00:13:25,440
um you can also

00:13:23,040 --> 00:13:26,800
imagine that when you build a container

00:13:25,440 --> 00:13:30,079
you essentially

00:13:26,800 --> 00:13:32,079
are executing commands so uh

00:13:30,079 --> 00:13:33,120
various commands that you would normally

00:13:32,079 --> 00:13:36,560
enter into

00:13:33,120 --> 00:13:38,720
a command line um like

00:13:36,560 --> 00:13:41,279
setting an environment variable changing

00:13:38,720 --> 00:13:43,760
your working directory

00:13:41,279 --> 00:13:45,600
copying or adding a file in and then

00:13:43,760 --> 00:13:47,600
running an arbitrary command you should

00:13:45,600 --> 00:13:50,560
be able to do all of those things

00:13:47,600 --> 00:13:53,360
so we introduce additional commands that

00:13:50,560 --> 00:13:53,360
allow us to do that

00:13:58,639 --> 00:14:06,240
so this is a streamlined implementation

00:14:02,720 --> 00:14:09,279
of a docker file that

00:14:06,240 --> 00:14:10,800
the computer science department uses so

00:14:09,279 --> 00:14:14,639
at the top we'll have

00:14:10,800 --> 00:14:15,760
the base image so arch linux does have a

00:14:14,639 --> 00:14:17,920
base

00:14:15,760 --> 00:14:20,959
image so i don't have to worry about

00:14:17,920 --> 00:14:23,519
manually configuring a base arch linux

00:14:20,959 --> 00:14:23,519
installation

00:14:23,680 --> 00:14:30,959
and we have a few commands here

00:14:26,720 --> 00:14:34,240
so first uh we have this add command

00:14:30,959 --> 00:14:36,800
now add is going to take uh a file

00:14:34,240 --> 00:14:40,160
that's stored locally on your machine

00:14:36,800 --> 00:14:43,519
and uh copy it over to the

00:14:40,160 --> 00:14:45,279
um you know the container and so we have

00:14:43,519 --> 00:14:46,880
this autolab executable that we're going

00:14:45,279 --> 00:14:48,880
to copy over

00:14:46,880 --> 00:14:50,800
and then i have a script that's

00:14:48,880 --> 00:14:54,560
automatically going to add a user

00:14:50,800 --> 00:14:58,079
um and configure user permissions etc

00:14:54,560 --> 00:15:02,000
um so we'll add that script over and uh

00:14:58,079 --> 00:15:04,160
copy it over to temp and then we can

00:15:02,000 --> 00:15:05,199
run various commands so we can run this

00:15:04,160 --> 00:15:07,680
add user script

00:15:05,199 --> 00:15:08,399
where you know i want to add a user with

00:15:07,680 --> 00:15:10,720
the

00:15:08,399 --> 00:15:11,519
name of user and a default password or

00:15:10,720 --> 00:15:14,000
password

00:15:11,519 --> 00:15:15,680
not the most secure but we also don't

00:15:14,000 --> 00:15:17,519
want to have the container run

00:15:15,680 --> 00:15:20,160
as root by default that would not be a

00:15:17,519 --> 00:15:20,160
good idea

00:15:20,959 --> 00:15:25,040
then we're going to use a mirror that's

00:15:24,000 --> 00:15:26,800
closer

00:15:25,040 --> 00:15:28,240
so instead of you know going to some

00:15:26,800 --> 00:15:31,839
default we'll

00:15:28,240 --> 00:15:34,000
pull information from eruptor's mirror

00:15:31,839 --> 00:15:34,880
and then we're going to install our base

00:15:34,000 --> 00:15:38,399
packages

00:15:34,880 --> 00:15:41,040
so we have the ability to

00:15:38,399 --> 00:15:41,680
install any packages we want so being

00:15:41,040 --> 00:15:45,279
able to have

00:15:41,680 --> 00:15:49,360
rsync or ssh or git curl

00:15:45,279 --> 00:15:52,480
um command line uh editors like emacs

00:15:49,360 --> 00:15:52,480
vim nano

00:15:52,720 --> 00:15:56,000
et cetera so we'll do that and then

00:15:55,600 --> 00:15:58,560
we'll

00:15:56,000 --> 00:16:00,160
clean up all the cache files so we don't

00:15:58,560 --> 00:16:02,880
need any of them

00:16:00,160 --> 00:16:04,240
and then finally we can switch the user

00:16:02,880 --> 00:16:07,279
to be the

00:16:04,240 --> 00:16:08,160
user account that we created and set the

00:16:07,279 --> 00:16:11,600
working directory

00:16:08,160 --> 00:16:15,680
for that user so essentially um

00:16:11,600 --> 00:16:19,040
this provides a base arch lens

00:16:15,680 --> 00:16:22,480
distribution that also contains our

00:16:19,040 --> 00:16:26,079
auto lab command line utility

00:16:22,480 --> 00:16:28,720
and so we use this

00:16:26,079 --> 00:16:30,240
image as a base for all of our others

00:16:28,720 --> 00:16:30,639
now you'll notice this doesn't really

00:16:30,240 --> 00:16:34,399
have

00:16:30,639 --> 00:16:35,759
anything related to development yet

00:16:34,399 --> 00:16:38,079
nothing related to any language

00:16:35,759 --> 00:16:42,639
whatsoever so what we can do

00:16:38,079 --> 00:16:42,639
is build upon this docker file

00:16:42,880 --> 00:16:49,759
and say hey when we want to

00:16:46,720 --> 00:16:50,000
um you know develop in cnc plus there

00:16:49,759 --> 00:16:52,560
might

00:16:50,000 --> 00:16:53,680
be a bunch of compilers or libraries

00:16:52,560 --> 00:16:57,440
that we want to

00:16:53,680 --> 00:17:01,759
install so we can install you know gcc

00:16:57,440 --> 00:17:04,319
and clang and llvm cmake ninja

00:17:01,759 --> 00:17:06,319
boost libraries a couple unit testing

00:17:04,319 --> 00:17:10,160
libraries

00:17:06,319 --> 00:17:13,199
gdb you know debuggers

00:17:10,160 --> 00:17:16,640
val grind and maybe a couple other

00:17:13,199 --> 00:17:16,640
of small images as well

00:17:16,839 --> 00:17:22,000
um packages and

00:17:19,839 --> 00:17:23,839
what we also want to do is grab files

00:17:22,000 --> 00:17:25,039
from maybe other places as well so

00:17:23,839 --> 00:17:28,319
there's a

00:17:25,039 --> 00:17:31,679
user supported you know

00:17:28,319 --> 00:17:33,440
repository arts user repository and

00:17:31,679 --> 00:17:35,039
you know we might want to install

00:17:33,440 --> 00:17:38,160
additional packages from

00:17:35,039 --> 00:17:42,080
from there as well so do that too

00:17:38,160 --> 00:17:44,880
so um so for c and c plus this is what

00:17:42,080 --> 00:17:46,000
we're going to use and then at the end

00:17:44,880 --> 00:17:48,960
we specify this

00:17:46,000 --> 00:17:50,480
entry point which means that um at this

00:17:48,960 --> 00:17:54,320
point this container

00:17:50,480 --> 00:17:57,520
can be used by

00:17:54,320 --> 00:17:59,600
a student so if they could theoretically

00:17:57,520 --> 00:18:02,960
run and use this container and develop

00:17:59,600 --> 00:18:05,679
in c and c plus plus

00:18:02,960 --> 00:18:07,039
and so they would be dropped into a bash

00:18:05,679 --> 00:18:10,960
shell

00:18:07,039 --> 00:18:14,240
and go from there

00:18:10,960 --> 00:18:15,039
mark's mentioning image magic will never

00:18:14,240 --> 00:18:18,960
go away

00:18:15,039 --> 00:18:20,880
yeah we actually use it um for

00:18:18,960 --> 00:18:22,480
one interesting lab and it's just kind

00:18:20,880 --> 00:18:26,240
of nice to have those

00:18:22,480 --> 00:18:29,840
commands um christian yeah we

00:18:26,240 --> 00:18:33,840
we use gcc pretty much all the time

00:18:29,840 --> 00:18:36,400
so um but that's for the cnc

00:18:33,840 --> 00:18:38,960
plus plus development what about java

00:18:36,400 --> 00:18:40,840
well we can install the open jdk

00:18:38,960 --> 00:18:42,160
the associated source files and

00:18:40,840 --> 00:18:44,880
documentation

00:18:42,160 --> 00:18:45,520
and include uh build tools like ant

00:18:44,880 --> 00:18:48,559
maven

00:18:45,520 --> 00:18:49,520
gradle and the junit unit testing

00:18:48,559 --> 00:18:53,679
library

00:18:49,520 --> 00:18:57,840
so we can install all these files

00:18:53,679 --> 00:18:57,840
this this one's pretty short

00:18:57,919 --> 00:19:04,400
and then we can

00:19:01,039 --> 00:19:08,080
just again specify the entry point

00:19:04,400 --> 00:19:11,360
alex is asking what's my thought on

00:19:08,080 --> 00:19:12,400
using docker instead of something else

00:19:11,360 --> 00:19:16,160
like

00:19:12,400 --> 00:19:16,160
vagrant um

00:19:16,559 --> 00:19:19,760
honestly i don't really have an opinion

00:19:18,720 --> 00:19:23,360
on it

00:19:19,760 --> 00:19:23,360
um but i

00:19:23,600 --> 00:19:29,280
i do think that

00:19:26,880 --> 00:19:31,440
for us we wanted something that was more

00:19:29,280 --> 00:19:35,280
of less of a pain point

00:19:31,440 --> 00:19:37,919
and um this is supported

00:19:35,280 --> 00:19:39,440
with you know just by installing docker

00:19:37,919 --> 00:19:44,320
and having a single

00:19:39,440 --> 00:19:44,320
extension in vs code

00:19:44,640 --> 00:19:50,160
and it can run on student machines it

00:19:46,960 --> 00:19:50,160
can run on servers

00:19:51,440 --> 00:19:54,559
but we're not really even focused on

00:19:53,440 --> 00:19:57,760
networking here

00:19:54,559 --> 00:20:00,080
like we're not building services um

00:19:57,760 --> 00:20:01,760
we're building an environment as as a

00:20:00,080 --> 00:20:03,840
service it doesn't have to communicate

00:20:01,760 --> 00:20:07,440
to any other service

00:20:03,840 --> 00:20:09,679
so the advantage here is that um

00:20:07,440 --> 00:20:12,000
you know it's essentially a drop-in

00:20:09,679 --> 00:20:15,280
shelf it's more of an alternative to

00:20:12,000 --> 00:20:21,840
deploying a virtual machine so that's

00:20:15,280 --> 00:20:21,840
why we're using docker

00:20:23,360 --> 00:20:26,400
and then finally like if we want to use

00:20:25,919 --> 00:20:29,520
um

00:20:26,400 --> 00:20:32,480
something like python i could install

00:20:29,520 --> 00:20:34,240
the you know python packages uh in arch

00:20:32,480 --> 00:20:37,679
but really they're not the

00:20:34,240 --> 00:20:41,039
greatest so instead um i just pull down

00:20:37,679 --> 00:20:43,120
a version of mini conda install that

00:20:41,039 --> 00:20:44,960
and configure it and make sure that it

00:20:43,120 --> 00:20:48,640
runs so

00:20:44,960 --> 00:20:51,600
um so i'm just pulling down mini conda

00:20:48,640 --> 00:20:51,600
and solving that

00:20:53,280 --> 00:20:58,400
to give you an idea of the the types of

00:20:55,760 --> 00:21:02,480
containers and the hierarchy that

00:20:58,400 --> 00:21:06,320
we support we use the arch linux

00:21:02,480 --> 00:21:08,960
base image so that's up at the top

00:21:06,320 --> 00:21:10,799
and then from that we define our own

00:21:08,960 --> 00:21:12,640
base which was the first dockerfile

00:21:10,799 --> 00:21:15,440
image that i showed you

00:21:12,640 --> 00:21:16,000
and then from there what we'll do what

00:21:15,440 --> 00:21:19,360
we have

00:21:16,000 --> 00:21:22,320
are a bunch of other images um

00:21:19,360 --> 00:21:22,960
that focus on particular languages so

00:21:22,320 --> 00:21:25,280
for c

00:21:22,960 --> 00:21:26,559
c and c plus plus development for python

00:21:25,280 --> 00:21:29,919
for java

00:21:26,559 --> 00:21:32,559
um for other languages like ocam as well

00:21:29,919 --> 00:21:36,000
or javascript or the.net framework

00:21:32,559 --> 00:21:38,480
or other things like that so

00:21:36,000 --> 00:21:40,159
and what's nice is that for each one of

00:21:38,480 --> 00:21:43,280
these

00:21:40,159 --> 00:21:44,720
languages we're only installing the the

00:21:43,280 --> 00:21:47,919
packages

00:21:44,720 --> 00:21:49,360
that are necessary for development with

00:21:47,919 --> 00:21:52,559
that language so

00:21:49,360 --> 00:21:54,960
if a student is taking you know

00:21:52,559 --> 00:21:57,280
a course that uses c plus and then a

00:21:54,960 --> 00:22:00,559
course that also uses o camel

00:21:57,280 --> 00:22:02,159
um they both use the same base so they

00:22:00,559 --> 00:22:04,159
don't need two separate

00:22:02,159 --> 00:22:05,360
you know big files what they do is they

00:22:04,159 --> 00:22:08,240
have this shared

00:22:05,360 --> 00:22:09,039
base and then they're only gonna pull

00:22:08,240 --> 00:22:11,360
down

00:22:09,039 --> 00:22:13,600
the additional files like the additional

00:22:11,360 --> 00:22:16,720
um docker

00:22:13,600 --> 00:22:18,400
image for c plus plus development

00:22:16,720 --> 00:22:21,039
and then the additional docker image for

00:22:18,400 --> 00:22:23,120
ocam development so they don't need to

00:22:21,039 --> 00:22:24,240
pull down everything it's only the

00:22:23,120 --> 00:22:27,360
additional

00:22:24,240 --> 00:22:28,080
components so there's there's space

00:22:27,360 --> 00:22:32,400
saving

00:22:28,080 --> 00:22:35,360
happening with containerization as well

00:22:32,400 --> 00:22:37,760
beyond that if we want to uh extend a

00:22:35,360 --> 00:22:40,799
little further

00:22:37,760 --> 00:22:43,440
for students who are developing

00:22:40,799 --> 00:22:44,400
you know graphics applications you know

00:22:43,440 --> 00:22:48,320
installing

00:22:44,400 --> 00:22:51,280
opengl glm various libraries and tools

00:22:48,320 --> 00:22:52,960
and even for ai so being able to install

00:22:51,280 --> 00:22:56,159
and run tensorflow

00:22:52,960 --> 00:22:59,039
um with keras or

00:22:56,159 --> 00:23:00,559
doing theorem proving with z3 we can

00:22:59,039 --> 00:23:02,640
pull all of that down as well

00:23:00,559 --> 00:23:04,960
and have it already configured and ready

00:23:02,640 --> 00:23:04,960
to go

00:23:06,880 --> 00:23:10,320
in terms of running a container we have

00:23:08,880 --> 00:23:13,039
two real options

00:23:10,320 --> 00:23:14,480
um option one is just running it from

00:23:13,039 --> 00:23:17,679
the command line so as

00:23:14,480 --> 00:23:21,280
a student or you could say docker pull

00:23:17,679 --> 00:23:24,320
uh muc sci python and it will download

00:23:21,280 --> 00:23:27,919
all of the necessary images

00:23:24,320 --> 00:23:31,520
and then you can run it interactively so

00:23:27,919 --> 00:23:32,240
i the tac it essentially means hey i

00:23:31,520 --> 00:23:35,679
want to run an

00:23:32,240 --> 00:23:39,200
interactive uh session and uh use

00:23:35,679 --> 00:23:41,360
or emulate tty um and then

00:23:39,200 --> 00:23:42,559
you'll be able to execute that container

00:23:41,360 --> 00:23:44,400
and work on it

00:23:42,559 --> 00:23:46,080
and you'll be dropped into a command

00:23:44,400 --> 00:23:49,679
line and

00:23:46,080 --> 00:23:53,360
you'll be able to you know run

00:23:49,679 --> 00:23:55,840
python and edit files and run them

00:23:53,360 --> 00:23:57,679
the downside is is that you don't by

00:23:55,840 --> 00:23:58,240
default have access to your computer

00:23:57,679 --> 00:24:01,360
files

00:23:58,240 --> 00:24:02,880
you can um you can mount a local

00:24:01,360 --> 00:24:05,039
directory with docker but then that's

00:24:02,880 --> 00:24:07,279
another step that we would have to

00:24:05,039 --> 00:24:09,360
tell our students on how to do and

00:24:07,279 --> 00:24:10,640
that's that can be a little painful at

00:24:09,360 --> 00:24:14,159
times

00:24:10,640 --> 00:24:16,320
um so without being without mounting

00:24:14,159 --> 00:24:17,520
a local directory they're going to be

00:24:16,320 --> 00:24:21,600
limited to

00:24:17,520 --> 00:24:21,600
container local editors and programs

00:24:24,799 --> 00:24:28,159
we also want to have reproducible

00:24:26,640 --> 00:24:31,520
grading

00:24:28,159 --> 00:24:32,640
so i mentioned

00:24:31,520 --> 00:24:35,279
you know we want to build these

00:24:32,640 --> 00:24:36,799
containers every single semester what

00:24:35,279 --> 00:24:40,559
we're going to do

00:24:36,799 --> 00:24:43,360
is update all the linux lab packages

00:24:40,559 --> 00:24:44,799
rebuild all the containers push them up

00:24:43,360 --> 00:24:48,080
to docker hub

00:24:44,799 --> 00:24:49,039
and then we can share these development

00:24:48,080 --> 00:24:52,320
environments with

00:24:49,039 --> 00:24:54,799
our students so

00:24:52,320 --> 00:24:57,279
what they get graded on again is the

00:24:54,799 --> 00:25:01,120
same as what they're developing with

00:24:57,279 --> 00:25:04,720
and what resources the department has so

00:25:01,120 --> 00:25:07,679
we're really we really do have a unified

00:25:04,720 --> 00:25:07,679
architecture here

00:25:08,400 --> 00:25:14,799
so i'm going to give it the talk now to

00:25:12,000 --> 00:25:16,240
actually using visual studio code with

00:25:14,799 --> 00:25:20,159
the dev containers

00:25:16,240 --> 00:25:20,559
package um so if you download and

00:25:20,159 --> 00:25:23,520
install

00:25:20,559 --> 00:25:24,640
visual studio code you'll be able to

00:25:23,520 --> 00:25:27,760
click on

00:25:24,640 --> 00:25:28,320
the little extensions icon on the left

00:25:27,760 --> 00:25:29,840
and

00:25:28,320 --> 00:25:31,520
you can do a search for remote

00:25:29,840 --> 00:25:35,520
containers

00:25:31,520 --> 00:25:38,240
and uh install this extension

00:25:35,520 --> 00:25:42,080
and they have a very extensive readme

00:25:38,240 --> 00:25:44,080
here um

00:25:42,080 --> 00:25:45,360
i really didn't want to have my my

00:25:44,080 --> 00:25:47,360
students

00:25:45,360 --> 00:25:48,799
need to go through troubleshooting

00:25:47,360 --> 00:25:52,799
anything here

00:25:48,799 --> 00:25:56,480
um so what i've done is uh

00:25:52,799 --> 00:25:58,400
we we wanted to to provide these these

00:25:56,480 --> 00:26:02,159
dev container projects

00:25:58,400 --> 00:26:03,120
um so uh we do have an open source

00:26:02,159 --> 00:26:05,200
repository

00:26:03,120 --> 00:26:07,520
that contains all the dev containers

00:26:05,200 --> 00:26:10,720
that the department uses

00:26:07,520 --> 00:26:14,080
um and we have predefined projects

00:26:10,720 --> 00:26:18,600
configured for cnc plus java

00:26:14,080 --> 00:26:20,640
ocaml uh javascript and web development

00:26:18,600 --> 00:26:24,240
python.net

00:26:20,640 --> 00:26:27,600
swift and you know many other

00:26:24,240 --> 00:26:30,799
languages and tool chains as well

00:26:27,600 --> 00:26:31,440
um what's really nice about these dev

00:26:30,799 --> 00:26:34,960
container

00:26:31,440 --> 00:26:36,159
projects is that you can automatically

00:26:34,960 --> 00:26:40,159
have

00:26:36,159 --> 00:26:42,400
extensions be installed and configured

00:26:40,159 --> 00:26:43,840
you can automatically mount directories

00:26:42,400 --> 00:26:46,880
to your computer

00:26:43,840 --> 00:26:50,000
within the container and you can have it

00:26:46,880 --> 00:26:53,120
preserve all settings and changes

00:26:50,000 --> 00:26:56,000
by um writing

00:26:53,120 --> 00:26:58,240
everything that would have gone into a

00:26:56,000 --> 00:27:00,400
container

00:26:58,240 --> 00:27:02,159
into a local directory mount that will

00:27:00,400 --> 00:27:07,440
automatically get mounted

00:27:02,159 --> 00:27:10,799
upon the execution of the container

00:27:07,440 --> 00:27:13,039
so i have a short

00:27:10,799 --> 00:27:14,640
dev container project that you know when

00:27:13,039 --> 00:27:17,480
someone downloads it it really only

00:27:14,640 --> 00:27:21,440
contains three files

00:27:17,480 --> 00:27:22,960
hello.cpp a make file and a readme

00:27:21,440 --> 00:27:24,960
but then there are also a couple hidden

00:27:22,960 --> 00:27:28,240
files so specifically

00:27:24,960 --> 00:27:31,760
if we have a dot dev container folder

00:27:28,240 --> 00:27:35,159
which is hidden on unix systems

00:27:31,760 --> 00:27:37,039
inside of this folder is going to be a

00:27:35,159 --> 00:27:40,080
devcontainer.json

00:27:37,039 --> 00:27:43,279
and this devcontainer.json

00:27:40,080 --> 00:27:45,919
is what we package up and provide

00:27:43,279 --> 00:27:47,440
for students and it has a bunch of

00:27:45,919 --> 00:27:50,320
different things

00:27:47,440 --> 00:27:52,960
so at the top you have the ability to

00:27:50,320 --> 00:27:56,000
specify an image

00:27:52,960 --> 00:27:58,240
we could also specify a docker file but

00:27:56,000 --> 00:28:01,440
then that doesn't

00:27:58,240 --> 00:28:02,720
mean that students will always have the

00:28:01,440 --> 00:28:04,720
exact same version

00:28:02,720 --> 00:28:06,080
of the software if they're always

00:28:04,720 --> 00:28:09,200
pulling down

00:28:06,080 --> 00:28:10,159
um from docker hub then you know we

00:28:09,200 --> 00:28:14,159
control

00:28:10,159 --> 00:28:17,279
the the update um we also have

00:28:14,159 --> 00:28:19,440
um various workspace

00:28:17,279 --> 00:28:21,600
mounting and additional mounting to

00:28:19,440 --> 00:28:23,360
ensure that

00:28:21,600 --> 00:28:25,360
settings are preserved and that they are

00:28:23,360 --> 00:28:31,200
able to

00:28:25,360 --> 00:28:33,919
access files stored on their computer

00:28:31,200 --> 00:28:35,360
we also have the ability to specify a

00:28:33,919 --> 00:28:37,440
list of extensions

00:28:35,360 --> 00:28:38,399
which will automatically be installed

00:28:37,440 --> 00:28:40,559
when we

00:28:38,399 --> 00:28:42,399
enter this this dev container for the

00:28:40,559 --> 00:28:44,799
first time

00:28:42,399 --> 00:28:45,679
we can also specify any number of docker

00:28:44,799 --> 00:28:48,960
arguments

00:28:45,679 --> 00:28:50,080
so um in order to do debugging within a

00:28:48,960 --> 00:28:52,559
container you

00:28:50,080 --> 00:28:54,000
need you probably want to add a few

00:28:52,559 --> 00:28:57,440
extra commands

00:28:54,000 --> 00:28:58,080
um when you when you run the docker

00:28:57,440 --> 00:29:00,720
container

00:28:58,080 --> 00:29:02,480
so we do that automatically for our

00:29:00,720 --> 00:29:05,039
students

00:29:02,480 --> 00:29:06,640
we can also specify a container

00:29:05,039 --> 00:29:09,760
environment variables

00:29:06,640 --> 00:29:13,919
change them and then also provide

00:29:09,760 --> 00:29:17,279
settings for various

00:29:13,919 --> 00:29:20,399
extensions or you know

00:29:17,279 --> 00:29:22,000
disable you know phoning home to

00:29:20,399 --> 00:29:27,840
microsoft

00:29:22,000 --> 00:29:27,840
um you know we can do that by default

00:29:28,720 --> 00:29:35,279
so when you open up this folder

00:29:32,159 --> 00:29:36,960
in vs code once you have the extension

00:29:35,279 --> 00:29:39,520
installed it will actually prompt you

00:29:36,960 --> 00:29:40,080
it'll say hey this folder contains a dev

00:29:39,520 --> 00:29:43,360
container

00:29:40,080 --> 00:29:44,720
configuration file reopen the folder to

00:29:43,360 --> 00:29:47,760
develop in a container

00:29:44,720 --> 00:29:49,760
and so you just have to click this uh

00:29:47,760 --> 00:29:55,760
reopening container button

00:29:49,760 --> 00:29:57,360
and then you'll be dropped into this

00:29:55,760 --> 00:29:59,120
this development environment where all

00:29:57,360 --> 00:30:02,240
the files

00:29:59,120 --> 00:30:03,440
exist locally you can create them you

00:30:02,240 --> 00:30:07,039
can edit them

00:30:03,440 --> 00:30:08,320
they're being live updated uh on your

00:30:07,039 --> 00:30:11,039
file system

00:30:08,320 --> 00:30:13,039
so if you hit save then the original

00:30:11,039 --> 00:30:15,520
files that were on your computer

00:30:13,039 --> 00:30:17,520
uh have been changed but you're

00:30:15,520 --> 00:30:20,480
modifying them within

00:30:17,520 --> 00:30:21,039
this development environment so you

00:30:20,480 --> 00:30:24,000
could

00:30:21,039 --> 00:30:25,440
be using a computer um that has no

00:30:24,000 --> 00:30:28,640
compiler inside

00:30:25,440 --> 00:30:29,200
uh you could be using um this on windows

00:30:28,640 --> 00:30:32,640
mac

00:30:29,200 --> 00:30:36,080
or um or linux

00:30:32,640 --> 00:30:38,960
and you have access to you know gcc

00:30:36,080 --> 00:30:41,520
10 you have auto completion syntax

00:30:38,960 --> 00:30:41,520
highlighting

00:30:41,600 --> 00:30:45,679
all that stuff so it helps students as

00:30:44,880 --> 00:30:47,520
well because

00:30:45,679 --> 00:30:49,120
then again they don't have to worry

00:30:47,520 --> 00:30:52,799
about configuring

00:30:49,120 --> 00:30:56,240
an ide they just need to use this

00:30:52,799 --> 00:30:58,480
pre-configured setup we can also include

00:30:56,240 --> 00:31:00,240
additional files that aid with linting

00:30:58,480 --> 00:31:02,559
or code formatting

00:31:00,240 --> 00:31:05,840
or whatever else makes it easier to

00:31:02,559 --> 00:31:05,840
develop in these languages

00:31:07,279 --> 00:31:13,919
so we're going to try to do a demo

00:31:10,559 --> 00:31:14,480
here so let's see if this works i will

00:31:13,919 --> 00:31:17,039
just a

00:31:14,480 --> 00:31:18,720
quick update we have about 10 minutes

00:31:17,039 --> 00:31:20,159
remaining so i know you've been taking

00:31:18,720 --> 00:31:20,480
questions throughout and there's not a

00:31:20,159 --> 00:31:21,519
ton

00:31:20,480 --> 00:31:23,519
it doesn't look like there's any

00:31:21,519 --> 00:31:27,440
questions queued up uh

00:31:23,519 --> 00:31:27,440
just wanted to kick out the time there

00:31:27,600 --> 00:31:33,200
perfect yeah i i've been going at the

00:31:30,880 --> 00:31:36,480
pace that i've been expecting next time

00:31:33,200 --> 00:31:40,240
great thank you this is great

00:31:36,480 --> 00:31:42,720
um so i'm gonna open up the python one

00:31:40,240 --> 00:31:42,720
hopefully

00:31:42,799 --> 00:31:47,840
and hopefully this will work

00:31:48,720 --> 00:31:53,519
so again we get prompted here folder

00:31:51,760 --> 00:31:56,720
contains a dev container reopening

00:31:53,519 --> 00:31:56,720
container to develop

00:31:58,320 --> 00:32:01,840
so we'll click this

00:32:16,640 --> 00:32:18,960
okay

00:32:19,679 --> 00:32:25,360
and remember this is installing um

00:32:23,039 --> 00:32:26,720
you know visual studio code within the

00:32:25,360 --> 00:32:28,559
container as well

00:32:26,720 --> 00:32:30,640
it's going to be remotely connecting to

00:32:28,559 --> 00:32:30,640
it

00:32:31,679 --> 00:32:36,960
and so it's going through the setup

00:32:34,480 --> 00:32:36,960
process

00:32:38,320 --> 00:32:43,840
i was hoping it wouldn't take this long

00:32:55,120 --> 00:33:01,200
yeah christian i i'm really glad that we

00:32:58,559 --> 00:33:04,960
have this ability to actually use this

00:33:01,200 --> 00:33:07,519
um because it

00:33:04,960 --> 00:33:08,559
it really does make a huge difference on

00:33:07,519 --> 00:33:11,679
students to be able to

00:33:08,559 --> 00:33:16,159
to work on assignments um so

00:33:11,679 --> 00:33:19,440
what's nice is that um you know if

00:33:16,159 --> 00:33:21,679
i think this is still actually uh voting

00:33:19,440 --> 00:33:21,679
maybe

00:33:21,840 --> 00:33:25,840
let's see

00:33:26,960 --> 00:33:31,760
oh yeah it's still installing and

00:33:29,600 --> 00:33:34,000
configuring

00:33:31,760 --> 00:33:34,000
um

00:33:35,440 --> 00:33:39,360
yeah i kind of wish that that we had

00:33:37,600 --> 00:33:43,760
this when when i was

00:33:39,360 --> 00:33:44,090
in uh in school so

00:33:43,760 --> 00:33:47,039
um

00:33:44,090 --> 00:33:50,000
[Music]

00:33:47,039 --> 00:33:50,840
okay here we go so we're we're cooking

00:33:50,000 --> 00:33:54,159
with gas

00:33:50,840 --> 00:33:58,799
now um so we have this ability to

00:33:54,159 --> 00:33:58,799
just load a python file and i think

00:34:00,000 --> 00:34:03,919
i think we should get everything and

00:34:01,679 --> 00:34:07,279
then what's also nice here

00:34:03,919 --> 00:34:09,040
is that the extension

00:34:07,279 --> 00:34:11,599
okay so it's gonna prompt and install

00:34:09,040 --> 00:34:14,639
stuff so yeah we have to install

00:34:11,599 --> 00:34:17,520
python stuff but we also get um

00:34:14,639 --> 00:34:19,200
interactive jupyter new um jupiter

00:34:17,520 --> 00:34:22,480
notebooks within

00:34:19,200 --> 00:34:24,800
visual studio code which is pretty cool

00:34:22,480 --> 00:34:26,800
um so we have this ability to you know

00:34:24,800 --> 00:34:27,359
just open up a jupiter notebook and

00:34:26,800 --> 00:34:30,800
encode

00:34:27,359 --> 00:34:30,800
that and have it work

00:34:32,720 --> 00:34:36,320
greg's mentioning that docker desktop

00:34:34,399 --> 00:34:38,800
isn't available yet on apple

00:34:36,320 --> 00:34:40,879
m1 max that's true i believe they're

00:34:38,800 --> 00:34:43,919
still fighting with go

00:34:40,879 --> 00:34:47,359
right now uh which is a dependency for

00:34:43,919 --> 00:34:52,000
uh docker and everything like that

00:34:47,359 --> 00:34:52,960
um so um jay is asking visual studio is

00:34:52,000 --> 00:34:56,079
open source

00:34:52,960 --> 00:35:00,000
um visual studio code

00:34:56,079 --> 00:35:01,359
um is an uh has an open source

00:35:00,000 --> 00:35:04,960
repository on

00:35:01,359 --> 00:35:07,680
on github what you most likely install

00:35:04,960 --> 00:35:08,160
from microsoft does have some closed

00:35:07,680 --> 00:35:11,839
source

00:35:08,160 --> 00:35:15,680
components so

00:35:11,839 --> 00:35:17,280
for example their remote ssh extend is

00:35:15,680 --> 00:35:20,560
closed source

00:35:17,280 --> 00:35:22,880
um and the

00:35:20,560 --> 00:35:24,320
version of vs code that they run inside

00:35:22,880 --> 00:35:26,640
of this container

00:35:24,320 --> 00:35:29,280
is technically closed source but

00:35:26,640 --> 00:35:31,599
everything else is open source

00:35:29,280 --> 00:35:33,520
so all of the extensions that you can

00:35:31,599 --> 00:35:37,119
install

00:35:33,520 --> 00:35:37,119
you know they are open source

00:35:38,480 --> 00:35:42,320
students are primarily using

00:35:42,400 --> 00:35:48,160
eclipse when they use java um

00:35:45,440 --> 00:35:49,599
okay this is cute uh i'm just gonna open

00:35:48,160 --> 00:35:53,920
up a different one

00:35:49,599 --> 00:35:58,800
um and then when they move on to c

00:35:53,920 --> 00:36:02,240
plus and uh other languages we often

00:35:58,800 --> 00:36:03,200
try to pivot them to using visual studio

00:36:02,240 --> 00:36:06,400
code

00:36:03,200 --> 00:36:09,920
just out of the ability to be able to

00:36:06,400 --> 00:36:09,920
use this development environment

00:36:11,119 --> 00:36:15,359
yeah so i got a question about debugging

00:36:13,280 --> 00:36:18,880
i probably shouldn't have chosen

00:36:15,359 --> 00:36:22,079
the um the python one

00:36:18,880 --> 00:36:27,839
so let me um

00:36:22,079 --> 00:36:27,839
open up the c plus one instead

00:36:35,440 --> 00:36:38,560
two things that francis have found

00:36:37,599 --> 00:36:42,320
useful

00:36:38,560 --> 00:36:45,920
as to mount of volume for local ssh

00:36:42,320 --> 00:36:48,960
so you can easily push to remote okay

00:36:45,920 --> 00:36:52,160
and then he provided a link there

00:36:48,960 --> 00:36:52,160
to the file system boots

00:36:52,640 --> 00:36:56,400
yeah christian i'm actually going to

00:36:53,920 --> 00:37:00,160
show you a debugging example

00:36:56,400 --> 00:37:09,839
really quick assuming that this loads in

00:37:00,160 --> 00:37:09,839
some reasonable amount of time

00:37:14,240 --> 00:37:20,880
uh i in in the meantime i i do want to

00:37:17,680 --> 00:37:24,640
say a couple of uh

00:37:20,880 --> 00:37:27,839
addition i have like two more slides um

00:37:24,640 --> 00:37:30,320
in terms of statistics for like this

00:37:27,839 --> 00:37:34,480
actually being in use

00:37:30,320 --> 00:37:37,119
um for the for the fall um

00:37:34,480 --> 00:37:38,640
we had four classes that i know there

00:37:37,119 --> 00:37:41,280
were students who were using

00:37:38,640 --> 00:37:42,000
uh dev containers maybe not all of the

00:37:41,280 --> 00:37:45,119
students but

00:37:42,000 --> 00:37:48,640
a decent majority of them um

00:37:45,119 --> 00:37:51,920
so you know we had you know

00:37:48,640 --> 00:37:53,839
about 140. now some students were

00:37:51,920 --> 00:37:54,320
concurrently enrolled in more than one

00:37:53,839 --> 00:37:57,440
of these

00:37:54,320 --> 00:37:57,839
but at least in terms of impact you know

00:37:57,440 --> 00:38:01,599
we

00:37:57,839 --> 00:38:04,720
we had about 140 seats impacted

00:38:01,599 --> 00:38:07,359
um and then we were also using

00:38:04,720 --> 00:38:08,720
a lot of this infrastructure for auto

00:38:07,359 --> 00:38:11,280
grading

00:38:08,720 --> 00:38:14,640
so 75 students taking programming one

00:38:11,280 --> 00:38:17,599
about 50 students taking programming to

00:38:14,640 --> 00:38:18,560
45 students taking computer architecture

00:38:17,599 --> 00:38:21,599
i think

00:38:18,560 --> 00:38:23,440
there were 20 to 25 students in computer

00:38:21,599 --> 00:38:28,640
graphics so

00:38:23,440 --> 00:38:31,839
this has impacted you know over 300

00:38:28,640 --> 00:38:36,000
enrolled student seats

00:38:31,839 --> 00:38:38,320
for this so it's pretty valuable

00:38:36,000 --> 00:38:40,480
i also just want to shout out to

00:38:38,320 --> 00:38:43,599
colleagues contributors and users

00:38:40,480 --> 00:38:45,440
so other

00:38:43,599 --> 00:38:47,599
folks who have used it or used it for

00:38:45,440 --> 00:38:50,000
auto grading used it for

00:38:47,599 --> 00:38:50,880
um you know as a resource to their

00:38:50,000 --> 00:38:54,800
students

00:38:50,880 --> 00:38:58,400
so um stephanie schwartz um

00:38:54,800 --> 00:39:00,800
uh chad hogue gary zappedy chris kane j

00:38:58,400 --> 00:39:03,280
nancy

00:39:00,800 --> 00:39:05,280
they're all colleagues in the in the

00:39:03,280 --> 00:39:06,720
computer science department who

00:39:05,280 --> 00:39:09,280
are either using the auto grading

00:39:06,720 --> 00:39:12,640
platform or it helps me

00:39:09,280 --> 00:39:14,160
with debugging this cole is a student

00:39:12,640 --> 00:39:17,040
who's actually helped contribute

00:39:14,160 --> 00:39:18,480
a couple bug fixes ed schwartz is the

00:39:17,040 --> 00:39:21,839
person who really got

00:39:18,480 --> 00:39:22,400
everything started with auto lab along

00:39:21,839 --> 00:39:25,839
with

00:39:22,400 --> 00:39:29,520
stephanie and you know

00:39:25,839 --> 00:39:33,119
all of the computer sciences

00:39:29,520 --> 00:39:37,200
so if i come back over here

00:39:33,119 --> 00:39:43,839
and i set a breakpoint

00:39:37,200 --> 00:39:43,839
and i think i can run this

00:39:45,280 --> 00:39:50,160
and so we are debugging we're cooking

00:39:48,160 --> 00:39:53,920
with gas

00:39:50,160 --> 00:39:58,240
um now the way that

00:39:53,920 --> 00:40:01,839
gcc ends up representing

00:39:58,240 --> 00:40:01,839
some of these isn't great but

00:40:03,359 --> 00:40:09,119
you know we do get the v you know five

00:40:06,880 --> 00:40:10,640
four so you can step through i think you

00:40:09,119 --> 00:40:13,440
can also hover over

00:40:10,640 --> 00:40:15,119
it'll tell you the current value and

00:40:13,440 --> 00:40:17,119
this is for c plus plus

00:40:15,119 --> 00:40:18,800
so like this is arguably one of the

00:40:17,119 --> 00:40:20,000
languages where it sucks the most for

00:40:18,800 --> 00:40:22,240
debugging

00:40:20,000 --> 00:40:24,560
in comparison to you know other

00:40:22,240 --> 00:40:27,119
languages like java or python

00:40:24,560 --> 00:40:28,160
so yeah all of this is here you can set

00:40:27,119 --> 00:40:30,720
watch points

00:40:28,160 --> 00:40:32,720
you can see the call stack you can set

00:40:30,720 --> 00:40:36,079
additional breakpoints as well

00:40:32,720 --> 00:40:40,640
resume execution as needed

00:40:36,079 --> 00:40:44,960
come down here we have our vector um

00:40:40,640 --> 00:40:49,680
yeah so i think i'm about

00:40:44,960 --> 00:40:52,880
up with time um but if anyone has any

00:40:49,680 --> 00:40:57,440
additional questions you can

00:40:52,880 --> 00:41:01,839
always message me in in chat

00:40:57,440 --> 00:41:01,839
you can also email me my email is

00:41:03,390 --> 00:41:06,640
[Music]

00:41:04,839 --> 00:41:09,119
william.killian.edu

00:41:06,640 --> 00:41:09,920
great will thank you very much uh uh you

00:41:09,119 --> 00:41:12,400
know we it's

00:41:09,920 --> 00:41:13,839
it's always uh i i don't if you haven't

00:41:12,400 --> 00:41:15,760
given a talk before i don't know if

00:41:13,839 --> 00:41:17,359
folks realize just how time consuming it

00:41:15,760 --> 00:41:19,920
is to put together a great talk

00:41:17,359 --> 00:41:21,760
and uh we definitely want to thank you

00:41:19,920 --> 00:41:22,640
for putting together a great talk for us

00:41:21,760 --> 00:41:25,920
this morning that

00:41:22,640 --> 00:41:34,800
job well done so thank you all for

00:41:25,920 --> 00:41:34,800

YouTube URL: https://www.youtube.com/watch?v=U9xFuaBY3uI


