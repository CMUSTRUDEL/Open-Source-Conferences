Title: Ansible System Configuration as Code -  Alex Mayer | CPOSC 2020
Publication date: 2021-01-17
Playlist: CPOSC 2020 Recorded Sessions
Description: 
	Session Page: https://cposc.org/sessions/ansible-system-configuration-code/
Slides: https://cposc.org/wp-content/uploads/2021/01/Ansible.pdf
Demo: https://github.com/amayer5125/ansible-demo
Chat Log: https://cposc.org/chat-log-ansible-system-configuration-code/

The Central Pennsylvania Open Source Conference (CPOSC) is a one-day technical conference for open source users and developers. Presentations and sessions cover all aspects of open source, with talks ranging from novice to expert skill levels and featuring case studies, best practices, code-alongs and more. Join us in 2021! https://cposc.org
Captions: 
	00:00:05,040 --> 00:00:10,639
let me introduce our speaker now

00:00:07,520 --> 00:00:12,639
uh this is a session on ansible um so

00:00:10,639 --> 00:00:15,040
our speaker is alex mayer

00:00:12,639 --> 00:00:17,039
he uh contributes open source as often

00:00:15,040 --> 00:00:20,000
as he can he loves open source culture

00:00:17,039 --> 00:00:20,560
and the gnu linux operating system and

00:00:20,000 --> 00:00:21,680
he's

00:00:20,560 --> 00:00:24,080
got a background of the software

00:00:21,680 --> 00:00:25,519
developer and and in devops so i'm going

00:00:24,080 --> 00:00:31,840
to drop off here and

00:00:25,519 --> 00:00:31,840
alex take it away

00:00:32,399 --> 00:00:39,520
let me share my screen here

00:00:35,840 --> 00:00:41,360
awesome okay so as uh

00:00:39,520 --> 00:00:43,040
jay mentioned this is a talk on uh

00:00:41,360 --> 00:00:44,320
ansible system configuration is code

00:00:43,040 --> 00:00:45,760
he also kind of mentioned i like doing

00:00:44,320 --> 00:00:47,200
interactive uh talking so if you guys

00:00:45,760 --> 00:00:48,559
have questions feel free to type me on

00:00:47,200 --> 00:00:50,320
the chat and i'll try to catch them

00:00:48,559 --> 00:00:51,680
uh if not we can save them for the end

00:00:50,320 --> 00:00:52,960
but

00:00:51,680 --> 00:00:54,719
all right going to branch bolt system

00:00:52,960 --> 00:00:58,480
configuration is code if i get on the

00:00:54,719 --> 00:01:00,079
right screen here

00:00:58,480 --> 00:01:01,199
uh so kind of as uh jay mentioned like

00:01:00,079 --> 00:01:02,239
who is this guy i was like to start with

00:01:01,199 --> 00:01:03,359
a preface for this because you know

00:01:02,239 --> 00:01:05,119
anybody can

00:01:03,359 --> 00:01:06,799
the speakers are vetted but it's uh you

00:01:05,119 --> 00:01:08,400
know nice to go over vr so i've been

00:01:06,799 --> 00:01:09,439
doing uh i've been practicing devops for

00:01:08,400 --> 00:01:11,360
a little bit over

00:01:09,439 --> 00:01:12,880
uh five years i've been a software

00:01:11,360 --> 00:01:14,159
engineer for a little over a decade

00:01:12,880 --> 00:01:16,240
and as you mentioned i contribute to

00:01:14,159 --> 00:01:18,560
open source whenever i can i love the

00:01:16,240 --> 00:01:18,560
culture

00:01:19,200 --> 00:01:23,680
so kind of high level overview before we

00:01:21,680 --> 00:01:26,560
get into any kind of demo or anything

00:01:23,680 --> 00:01:28,159
what is ansible it's a set of tools and

00:01:26,560 --> 00:01:29,680
standards to age you in deploying and

00:01:28,159 --> 00:01:31,759
managing infrastructure

00:01:29,680 --> 00:01:33,520
and the services that run on it some

00:01:31,759 --> 00:01:36,880
people call this configuration as code

00:01:33,520 --> 00:01:38,960
because the configuration is uh you can

00:01:36,880 --> 00:01:42,320
version control it keep it in a repo

00:01:38,960 --> 00:01:43,680
and refer back to it it's not something

00:01:42,320 --> 00:01:45,280
floating off on a server like oh you

00:01:43,680 --> 00:01:47,360
want to make a new server let's copy the

00:01:45,280 --> 00:01:49,600
copy from there so

00:01:47,360 --> 00:01:50,560
it is enhanceable it's human readable

00:01:49,600 --> 00:01:54,960
it's in yaml

00:01:50,560 --> 00:01:58,079
that's also machine parcel um

00:01:54,960 --> 00:01:59,280
the client for ansible is agentless

00:01:58,079 --> 00:02:01,360
uh with an asterisk they call it

00:01:59,280 --> 00:02:01,920
agentless uh so there's not anything you

00:02:01,360 --> 00:02:03,600
have to

00:02:01,920 --> 00:02:05,360
that's required to and be installed on

00:02:03,600 --> 00:02:06,079
every machine similar to like a chef or

00:02:05,360 --> 00:02:07,680
a puppet

00:02:06,079 --> 00:02:08,879
those require an actual program to be

00:02:07,680 --> 00:02:10,560
installed on the machine before you can

00:02:08,879 --> 00:02:12,640
provision it

00:02:10,560 --> 00:02:14,480
with uh with ansible the only

00:02:12,640 --> 00:02:16,959
requirement is that you have python

00:02:14,480 --> 00:02:18,560
on the target machine uh a compatible

00:02:16,959 --> 00:02:21,040
version of python i'm not

00:02:18,560 --> 00:02:22,000
i forgot to look those up but the uh

00:02:21,040 --> 00:02:23,840
python 3 is

00:02:22,000 --> 00:02:25,920
generally what i prefer to have on the

00:02:23,840 --> 00:02:28,319
machines

00:02:25,920 --> 00:02:29,840
uh ansible is uh installed on the

00:02:28,319 --> 00:02:30,640
workstation so so yet again they kind of

00:02:29,840 --> 00:02:32,319
call agentless

00:02:30,640 --> 00:02:34,160
so there's no agent on the server itself

00:02:32,319 --> 00:02:35,280
or on the node

00:02:34,160 --> 00:02:37,840
you have to have ansible installed in

00:02:35,280 --> 00:02:37,840
your local machine

00:02:40,800 --> 00:02:44,080
meet one of his screens

00:02:47,040 --> 00:02:50,160
i'm not sure what that means christopher

00:02:49,280 --> 00:02:51,840
um

00:02:50,160 --> 00:02:53,200
so it uses a stage for uh server

00:02:51,840 --> 00:02:55,040
configuration or for

00:02:53,200 --> 00:02:57,120
pushing the configuration so it will run

00:02:55,040 --> 00:02:58,959
the python on the server over ssh so the

00:02:57,120 --> 00:03:04,000
only requirement to manage

00:02:58,959 --> 00:03:05,280
servers or devices is an ssh connection

00:03:04,000 --> 00:03:07,040
so why would you use ansible i kind of

00:03:05,280 --> 00:03:10,400
touched on this so reproducibility

00:03:07,040 --> 00:03:10,400
so think cattle not pets

00:03:10,720 --> 00:03:14,879
uh you don't want to have a pet some

00:03:13,760 --> 00:03:16,720
server or

00:03:14,879 --> 00:03:17,840
device that you kind of handcrafted and

00:03:16,720 --> 00:03:18,879
you're the only one that knows how it is

00:03:17,840 --> 00:03:19,920
and you have to take care of it every

00:03:18,879 --> 00:03:21,360
time there needs to be a change you're

00:03:19,920 --> 00:03:23,040
the only one that can take care of that

00:03:21,360 --> 00:03:24,799
and go and make this change

00:03:23,040 --> 00:03:26,400
if you make a configuration change an

00:03:24,799 --> 00:03:28,000
ansible anybody can go and read the

00:03:26,400 --> 00:03:28,319
ansible see kind of what is there and

00:03:28,000 --> 00:03:29,920
how

00:03:28,319 --> 00:03:31,519
they need to change it or add to it in

00:03:29,920 --> 00:03:35,040
order to

00:03:31,519 --> 00:03:36,560
um change what it needs to be changed

00:03:35,040 --> 00:03:37,840
also if you need another one you just

00:03:36,560 --> 00:03:39,120
spin up another one it's not a pet where

00:03:37,840 --> 00:03:41,040
you have to go and like

00:03:39,120 --> 00:03:42,239
oh what did i do here and go change it

00:03:41,040 --> 00:03:43,519
to the exact same thing on this new

00:03:42,239 --> 00:03:47,440
server because you're upgrading

00:03:43,519 --> 00:03:48,879
from centos 6 to centos 7 or something

00:03:47,440 --> 00:03:50,560
also scalability kind of touches on the

00:03:48,879 --> 00:03:51,599
same thing you know i need another

00:03:50,560 --> 00:03:54,640
server you just

00:03:51,599 --> 00:03:56,720
add it to the inventory and just go

00:03:54,640 --> 00:03:58,799
visibility your co-workers everybody can

00:03:56,720 --> 00:04:00,319
kind of see

00:03:58,799 --> 00:04:02,239
what is going on on every server as long

00:04:00,319 --> 00:04:04,400
as you don't as long as nobody is making

00:04:02,239 --> 00:04:08,000
manual changes to servers everybody can

00:04:04,400 --> 00:04:08,000
see what's going on on every server

00:04:08,319 --> 00:04:11,200
uh easy changes and additions as we'll

00:04:09,760 --> 00:04:12,480
get to kind of get into uh yaml is very

00:04:11,200 --> 00:04:13,840
easy to read i think it's a little bit

00:04:12,480 --> 00:04:15,040
harder to write for some people when

00:04:13,840 --> 00:04:17,280
they're starting out

00:04:15,040 --> 00:04:18,720
but i mean the documentation i feel is

00:04:17,280 --> 00:04:19,680
very great principle so easy changes in

00:04:18,720 --> 00:04:21,280
addition

00:04:19,680 --> 00:04:22,960
uh easy infrastructure-wide changes if

00:04:21,280 --> 00:04:24,240
you need to install a piece of software

00:04:22,960 --> 00:04:26,400
on like every server in your

00:04:24,240 --> 00:04:29,040
infrastructure ansible makes it

00:04:26,400 --> 00:04:30,560
very easy to do things like this also

00:04:29,040 --> 00:04:32,639
disaster recovery

00:04:30,560 --> 00:04:33,840
let's say server is just unrecoverable

00:04:32,639 --> 00:04:35,040
you can just make a new one

00:04:33,840 --> 00:04:36,960
kind of touching back on that think

00:04:35,040 --> 00:04:37,280
cattle not pets you know you don't want

00:04:36,960 --> 00:04:38,720
to

00:04:37,280 --> 00:04:40,400
you don't go in and fix the server

00:04:38,720 --> 00:04:40,800
unless it's not a trivial fix and that

00:04:40,400 --> 00:04:42,880
would be

00:04:40,800 --> 00:04:43,840
quicker but the uh you know you just

00:04:42,880 --> 00:04:45,280
spin up a new one take the

00:04:43,840 --> 00:04:46,960
old one on the load bouncer and you're

00:04:45,280 --> 00:04:49,680
golden so

00:04:46,960 --> 00:04:51,520
uh just a big note here uh this should

00:04:49,680 --> 00:04:53,040
not be your only method of debt of uh

00:04:51,520 --> 00:04:54,320
disaster recovery you should obviously

00:04:53,040 --> 00:04:56,560
have backups obviously you know if

00:04:54,320 --> 00:04:58,880
you're using vms take snapshots

00:04:56,560 --> 00:05:00,000
don't this is not i'm not advocating for

00:04:58,880 --> 00:05:01,120
oh yeah just put an answer in your

00:05:00,000 --> 00:05:02,560
golden

00:05:01,120 --> 00:05:04,800
this is just one method that could be

00:05:02,560 --> 00:05:04,800
used

00:05:05,120 --> 00:05:08,560
so who should use ansible this is not a

00:05:06,960 --> 00:05:09,759
comprehensive list

00:05:08,560 --> 00:05:11,759
but system administrators anybody

00:05:09,759 --> 00:05:12,560
administering server uh site reliability

00:05:11,759 --> 00:05:14,400
engineers

00:05:12,560 --> 00:05:15,600
uh network administrator so ansible can

00:05:14,400 --> 00:05:19,280
be used to configure uh

00:05:15,600 --> 00:05:20,960
network switches and um other

00:05:19,280 --> 00:05:22,160
i'm guessing sans and other things i

00:05:20,960 --> 00:05:23,759
don't i haven't touched that much on

00:05:22,160 --> 00:05:25,360
that end of it but the

00:05:23,759 --> 00:05:26,639
ansible can connect to a bunch of

00:05:25,360 --> 00:05:28,800
different devices not necessarily just

00:05:26,639 --> 00:05:30,320
servers or vms

00:05:28,800 --> 00:05:31,840
uh anyone that manages or shares

00:05:30,320 --> 00:05:34,240
responsibility for a server

00:05:31,840 --> 00:05:36,000
so if you work with someone else and you

00:05:34,240 --> 00:05:38,080
both need to manage that server

00:05:36,000 --> 00:05:39,520
something like ansible will give you the

00:05:38,080 --> 00:05:42,000
um

00:05:39,520 --> 00:05:43,440
like the kind of blanket on the word

00:05:42,000 --> 00:05:44,639
here but the peace of mind that's what

00:05:43,440 --> 00:05:46,160
it is so i'll give you the peace of mind

00:05:44,639 --> 00:05:47,600
to know like when this person makes a

00:05:46,160 --> 00:05:49,280
change i can see

00:05:47,600 --> 00:05:50,880
that change and i know what that's going

00:05:49,280 --> 00:05:51,199
to do and then the next time i need to

00:05:50,880 --> 00:05:52,960
go

00:05:51,199 --> 00:05:54,800
fix something there i know exactly

00:05:52,960 --> 00:05:56,400
what's on that server so if you share

00:05:54,800 --> 00:05:58,240
responsibility for any server

00:05:56,400 --> 00:06:00,080
in an organization on a personal project

00:05:58,240 --> 00:06:02,319
side project and you should definitely

00:06:00,080 --> 00:06:04,840
be using simple

00:06:02,319 --> 00:06:06,000
all right go over a couple of ansible

00:06:04,840 --> 00:06:09,039
concepts

00:06:06,000 --> 00:06:10,479
so inventory uh there's a list of hosts

00:06:09,039 --> 00:06:12,400
uh including details on how to connect

00:06:10,479 --> 00:06:12,800
to them and uh which groups they're part

00:06:12,400 --> 00:06:14,000
of

00:06:12,800 --> 00:06:16,479
i'll kind of go over those i want to get

00:06:14,000 --> 00:06:20,319
to the demo part of what a

00:06:16,479 --> 00:06:22,720
group is a playbook is just a group of

00:06:20,319 --> 00:06:25,919
plays this is ansible terminology

00:06:22,720 --> 00:06:29,039
and a play is it defines roles and tasks

00:06:25,919 --> 00:06:30,639
to be run against hosts so we're going

00:06:29,039 --> 00:06:33,759
to use a little bit more roles today but

00:06:30,639 --> 00:06:35,520
i'll go over tasks as well

00:06:33,759 --> 00:06:37,440
speaking of roles a role which is a

00:06:35,520 --> 00:06:39,759
group of tasks as well as any supporting

00:06:37,440 --> 00:06:39,759
files

00:06:41,039 --> 00:06:44,240
tasks use ansible modules to execute

00:06:42,880 --> 00:06:47,520
instructions on the server

00:06:44,240 --> 00:06:48,000
to achieve a desired state there's also

00:06:47,520 --> 00:06:51,199
a special

00:06:48,000 --> 00:06:52,639
kind of task called a handler task

00:06:51,199 --> 00:06:54,319
this special task is run at the end of

00:06:52,639 --> 00:06:55,280
the playbook if it's notified by another

00:06:54,319 --> 00:06:56,880
task

00:06:55,280 --> 00:06:59,120
let's say you have five tasks and they

00:06:56,880 --> 00:07:00,960
all notify to restart nginx

00:06:59,120 --> 00:07:03,039
the handler task will only be launched

00:07:00,960 --> 00:07:04,880
once this is very convenient

00:07:03,039 --> 00:07:08,000
if you have if you're making large

00:07:04,880 --> 00:07:09,360
changes to a nginx setup or

00:07:08,000 --> 00:07:10,960
something else that requires like you

00:07:09,360 --> 00:07:13,840
restart a service the service is only

00:07:10,960 --> 00:07:13,840
restarted once

00:07:14,800 --> 00:07:19,120
so variables are used to make roles

00:07:16,240 --> 00:07:21,120
dynamic they're defined per group or per

00:07:19,120 --> 00:07:22,479
host

00:07:21,120 --> 00:07:24,560
and there's a special kind of variable

00:07:22,479 --> 00:07:26,800
secret

00:07:24,560 --> 00:07:27,919
they're encrypted strings or files in

00:07:26,800 --> 00:07:29,599
your ansible project and they're

00:07:27,919 --> 00:07:32,560
decrypted at runtime with a password

00:07:29,599 --> 00:07:33,759
this is super helpful if you because

00:07:32,560 --> 00:07:36,880
that way you can

00:07:33,759 --> 00:07:39,599
put your ansible

00:07:36,880 --> 00:07:41,680
code into a git repository even a public

00:07:39,599 --> 00:07:43,360
repository which i don't recommend

00:07:41,680 --> 00:07:45,120
putting all of your code into a public

00:07:43,360 --> 00:07:47,280
repository uh if you work on an open

00:07:45,120 --> 00:07:49,360
source project i mean potentially but

00:07:47,280 --> 00:07:51,199
uh but secrets are encrypted strings so

00:07:49,360 --> 00:07:53,759
they use a symmetric cipher

00:07:51,199 --> 00:07:54,800
so it's not like the best encryption but

00:07:53,759 --> 00:07:57,520
the

00:07:54,800 --> 00:07:59,120
uh you do decrypt it with a password and

00:07:57,520 --> 00:07:59,680
it's decrypted at runtime so you can

00:07:59,120 --> 00:08:03,680
store

00:07:59,680 --> 00:08:04,560
secrets in a uh github or github get lab

00:08:03,680 --> 00:08:07,360
repo

00:08:04,560 --> 00:08:08,400
and then they're not easily found by

00:08:07,360 --> 00:08:10,720
somebody they have to

00:08:08,400 --> 00:08:13,280
do some work to get at them and i'll go

00:08:10,720 --> 00:08:14,560
over that as well

00:08:13,280 --> 00:08:17,280
so i'm going to go over some tooling

00:08:14,560 --> 00:08:17,280
around ansible

00:08:17,440 --> 00:08:20,800
so ansible galaxy is a hub where

00:08:19,199 --> 00:08:23,440
reusable roles are made

00:08:20,800 --> 00:08:24,720
uh and that are stored yeah cataloged

00:08:23,440 --> 00:08:26,639
and made searchable

00:08:24,720 --> 00:08:27,759
uh similar to like docker hub or the npm

00:08:26,639 --> 00:08:30,479
registry or

00:08:27,759 --> 00:08:34,000
um you know packages.org for the php

00:08:30,479 --> 00:08:34,000
like composer packages things like that

00:08:34,240 --> 00:08:37,440
and ansible tower and awx i'm sorry i

00:08:36,560 --> 00:08:39,120
forgot to mention we're gonna we're

00:08:37,440 --> 00:08:40,000
gonna go over animal galaxy today uh we

00:08:39,120 --> 00:08:42,240
won't be going over

00:08:40,000 --> 00:08:44,320
ansible tower today this is a little bit

00:08:42,240 --> 00:08:48,240
more of like an enterprise solution

00:08:44,320 --> 00:08:49,839
um so ansible tower or awx is

00:08:48,240 --> 00:08:52,320
a web-based user interface that has a

00:08:49,839 --> 00:08:53,440
rest api and a task engine that is built

00:08:52,320 --> 00:08:55,680
on top of ansible

00:08:53,440 --> 00:08:56,720
so this allows you to run playbooks on a

00:08:55,680 --> 00:08:58,640
schedule

00:08:56,720 --> 00:09:00,000
um give people access to running

00:08:58,640 --> 00:09:02,080
playbooks without them having to have

00:09:00,000 --> 00:09:03,839
ansible install on the machine

00:09:02,080 --> 00:09:05,440
excuse me as i kind of mentioned this is

00:09:03,839 --> 00:09:06,160
more of like an enterprise solution if

00:09:05,440 --> 00:09:07,440
you have like

00:09:06,160 --> 00:09:10,880
hundreds and hundreds of servers that

00:09:07,440 --> 00:09:14,000
you're trying to to manage

00:09:10,880 --> 00:09:15,360
all right so let's get to the demo so

00:09:14,000 --> 00:09:16,399
the first thing i was going to ask was

00:09:15,360 --> 00:09:17,760
if anybody's

00:09:16,399 --> 00:09:18,959
not familiar with the ammo but i found

00:09:17,760 --> 00:09:20,720
that when giving these talks a lot of

00:09:18,959 --> 00:09:22,000
people aren't familiar with yml so

00:09:20,720 --> 00:09:24,240
i'm going to kind of go over the syntax

00:09:22,000 --> 00:09:25,440
here i'm sure

00:09:24,240 --> 00:09:27,360
a lot of you have heard of chase honor

00:09:25,440 --> 00:09:30,399
seeing json so so this here is

00:09:27,360 --> 00:09:32,160
json and this is the yaml equivalent uh

00:09:30,399 --> 00:09:35,200
the funny thing is that

00:09:32,160 --> 00:09:37,279
json is a subset of yaml so this is also

00:09:35,200 --> 00:09:39,680
valid if you want to type out all of

00:09:37,279 --> 00:09:41,200
your playbooks and everything in json

00:09:39,680 --> 00:09:43,040
uh you could i don't recommend it games

00:09:41,200 --> 00:09:44,880
a little bit cleaner

00:09:43,040 --> 00:09:47,279
uh i think and a little easier to read

00:09:44,880 --> 00:09:49,200
than like some of the notation like this

00:09:47,279 --> 00:09:51,120
let's just go over this real quick so

00:09:49,200 --> 00:09:54,160
test4 is an object

00:09:51,120 --> 00:09:55,680
or a dictionary so it has keys and

00:09:54,160 --> 00:09:59,040
values

00:09:55,680 --> 00:10:03,120
this is all keys or strings and

00:09:59,040 --> 00:10:07,760
values can be a string an object a

00:10:03,120 --> 00:10:08,800
array a boolean um

00:10:07,760 --> 00:10:10,480
so i'm just going to go over this like

00:10:08,800 --> 00:10:11,040
this this is an example just a key with

00:10:10,480 --> 00:10:12,959
a string

00:10:11,040 --> 00:10:14,880
this is an array one two three down here

00:10:12,959 --> 00:10:17,440
this exact same thing an array

00:10:14,880 --> 00:10:18,399
with the dash and then the boolean is

00:10:17,440 --> 00:10:20,640
true

00:10:18,399 --> 00:10:21,839
uh in ansible uh ansible also respects

00:10:20,640 --> 00:10:23,120
things like yes

00:10:21,839 --> 00:10:24,880
uh which is kind of the convention that

00:10:23,120 --> 00:10:27,200
they've gone for so yes is true no is

00:10:24,880 --> 00:10:27,200
false

00:10:28,000 --> 00:10:30,839
so i'm going to be using yes today

00:10:29,680 --> 00:10:33,839
because that's what's in most of the

00:10:30,839 --> 00:10:33,839
documentation

00:10:35,040 --> 00:10:41,519
uh but you'll notice that this so

00:10:38,240 --> 00:10:41,839
json doesn't require any uh indentation

00:10:41,519 --> 00:10:43,760
the

00:10:41,839 --> 00:10:44,959
indentation i mean i can end it like

00:10:43,760 --> 00:10:46,000
this and then put this one in the middle

00:10:44,959 --> 00:10:47,120
here like imagine further and that

00:10:46,000 --> 00:10:48,640
doesn't matter

00:10:47,120 --> 00:10:50,640
for yaml it is very important

00:10:48,640 --> 00:10:51,440
indentation so since these are indented

00:10:50,640 --> 00:10:55,200
to this level

00:10:51,440 --> 00:10:56,720
they're part of the object above it and

00:10:55,200 --> 00:10:59,519
since these are indented they're part of

00:10:56,720 --> 00:11:00,720
this key

00:10:59,519 --> 00:11:02,640
so that's just a note you'll see some

00:11:00,720 --> 00:11:04,880
indentation there uh and that's

00:11:02,640 --> 00:11:06,480
important similar to how python

00:11:04,880 --> 00:11:09,680
does indentation the different levels of

00:11:06,480 --> 00:11:09,680
indentation mean different things

00:11:11,440 --> 00:11:16,640
so the next thing i want to go over is

00:11:12,880 --> 00:11:16,640
the directory structure of ansible

00:11:16,720 --> 00:11:19,200
so first we're going to go over like the

00:11:18,000 --> 00:11:21,279
inventory i'm going to kind of go over

00:11:19,200 --> 00:11:22,880
the same order i went in my slides

00:11:21,279 --> 00:11:24,399
so this is an example of an inventory

00:11:22,880 --> 00:11:25,360
file you'll see here that i have an

00:11:24,399 --> 00:11:27,519
alias

00:11:25,360 --> 00:11:29,760
for this server or a hostname this can

00:11:27,519 --> 00:11:32,640
be a fully qualified domain name

00:11:29,760 --> 00:11:32,640
absolutely tom

00:11:33,760 --> 00:11:36,160
i already bumped up the phone size like

00:11:34,959 --> 00:11:36,959
a lot because i have a 4k monitor and

00:11:36,160 --> 00:11:39,600
it's always hard doing these

00:11:36,959 --> 00:11:39,600
presentations

00:11:40,240 --> 00:11:44,480
so this is the host name and then this

00:11:42,880 --> 00:11:45,519
is a variable so you can put variables

00:11:44,480 --> 00:11:47,519
after the hostname

00:11:45,519 --> 00:11:49,519
um i recommend that you don't put too

00:11:47,519 --> 00:11:52,800
many variables in this file

00:11:49,519 --> 00:11:54,000
the these files can grow and get massive

00:11:52,800 --> 00:11:55,839
real quick

00:11:54,000 --> 00:11:57,120
and so i recommend just putting like the

00:11:55,839 --> 00:11:58,320
minimal amount of information like the

00:11:57,120 --> 00:11:59,519
host how do i connect to it since i'm

00:11:58,320 --> 00:12:01,040
using an ip address

00:11:59,519 --> 00:12:02,399
i usually use this one i give it a host

00:12:01,040 --> 00:12:03,600
name which doesn't actually have to be

00:12:02,399 --> 00:12:04,959
its host name it could be

00:12:03,600 --> 00:12:07,279
any name you want it's called web server

00:12:04,959 --> 00:12:08,639
zero one and an ansible host is the ip

00:12:07,279 --> 00:12:09,680
address connect to if you're using fully

00:12:08,639 --> 00:12:10,000
qualified domain names you don't have to

00:12:09,680 --> 00:12:12,519
have

00:12:10,000 --> 00:12:13,839
this here you could just have like uh

00:12:12,519 --> 00:12:16,399
webster01.example.com

00:12:13,839 --> 00:12:19,040
down here and that would be fine you

00:12:16,399 --> 00:12:22,079
wouldn't need this line up here

00:12:19,040 --> 00:12:23,279
uh just to note this is a this is a

00:12:22,079 --> 00:12:25,200
group anything in the square brackets

00:12:23,279 --> 00:12:27,839
this uses kind of an any style syntax

00:12:25,200 --> 00:12:29,040
there's also a um a yellow style syntax

00:12:27,839 --> 00:12:30,399
i don't like that as much i like dna

00:12:29,040 --> 00:12:31,839
style a little bit better

00:12:30,399 --> 00:12:33,040
uh but you can do some research on your

00:12:31,839 --> 00:12:35,120
own if you're implementing this and see

00:12:33,040 --> 00:12:36,800
if you like the the ammo version more

00:12:35,120 --> 00:12:37,839
but then here we don't have to specify

00:12:36,800 --> 00:12:39,200
how to connect again so we already

00:12:37,839 --> 00:12:40,560
specified it up here we can just list

00:12:39,200 --> 00:12:42,480
out the

00:12:40,560 --> 00:12:46,240
nodes that are in this group so web

00:12:42,480 --> 00:12:46,240
server 01 is in the web service group

00:12:47,839 --> 00:12:53,920
the next thing i'll go over playbook

00:12:51,279 --> 00:12:54,959
so this is a very simple uh version of a

00:12:53,920 --> 00:12:58,880
playbook so

00:12:54,959 --> 00:13:00,880
the playbooks are always an array of um

00:12:58,880 --> 00:13:02,160
plays that are called so this is the

00:13:00,880 --> 00:13:05,440
first play

00:13:02,160 --> 00:13:07,920
and this is a special or

00:13:05,440 --> 00:13:09,200
reserved keyword so all will run against

00:13:07,920 --> 00:13:11,600
all hosts

00:13:09,200 --> 00:13:14,560
so there's all you can do a group name

00:13:11,600 --> 00:13:16,399
here or you can do ungrouped

00:13:14,560 --> 00:13:17,920
and or you can specify an individual

00:13:16,399 --> 00:13:18,880
hostname we can put webserver01 right

00:13:17,920 --> 00:13:21,519
here and that would just run against

00:13:18,880 --> 00:13:24,959
that one host

00:13:21,519 --> 00:13:26,399
become is uh specifying that we want to

00:13:24,959 --> 00:13:28,160
be the root user so while we're managing

00:13:26,399 --> 00:13:30,480
the server

00:13:28,160 --> 00:13:31,519
most if not all of the tasks and tasks

00:13:30,480 --> 00:13:35,360
that i'm going to be running

00:13:31,519 --> 00:13:37,200
require you to be root so you definitely

00:13:35,360 --> 00:13:38,800
i specified at the top level here if

00:13:37,200 --> 00:13:40,160
you'd like to be a little bit more um

00:13:38,800 --> 00:13:41,279
security conscious or if you have like

00:13:40,160 --> 00:13:42,880
an enterprise role you're doing you

00:13:41,279 --> 00:13:44,079
might want to specify this on each task

00:13:42,880 --> 00:13:45,760
that you need to be rooted for and then

00:13:44,079 --> 00:13:46,959
the user itself

00:13:45,760 --> 00:13:48,880
can run the rest of the task so i'm

00:13:46,959 --> 00:13:49,360
going to be ssh in these servers as my

00:13:48,880 --> 00:13:51,279
user

00:13:49,360 --> 00:13:54,000
and i have sudo access but i don't want

00:13:51,279 --> 00:13:57,120
to have to put become on all of the

00:13:54,000 --> 00:13:59,040
uh roles so by default become uses uh

00:13:57,120 --> 00:14:00,560
sudo you can also make it specify to

00:13:59,040 --> 00:14:02,639
switch to a user

00:14:00,560 --> 00:14:03,920
i think it's a become underscored user

00:14:02,639 --> 00:14:04,959
and that will specify like you want to

00:14:03,920 --> 00:14:06,560
use the

00:14:04,959 --> 00:14:09,279
the switch user command to switch to

00:14:06,560 --> 00:14:10,480
that user and then run all the tasks

00:14:09,279 --> 00:14:12,240
then we're going to specify the roles we

00:14:10,480 --> 00:14:14,240
want to run so for this one i'm just

00:14:12,240 --> 00:14:15,519
running common

00:14:14,240 --> 00:14:17,360
uh you'll notice for the second play i

00:14:15,519 --> 00:14:19,440
have web servers again we're going to be

00:14:17,360 --> 00:14:21,519
become uh so we're using sudo for all

00:14:19,440 --> 00:14:22,880
these uh the roles

00:14:21,519 --> 00:14:24,480
uh we're going to run under the web

00:14:22,880 --> 00:14:27,519
server in the level role i'll go over

00:14:24,480 --> 00:14:27,519
those right now

00:14:28,639 --> 00:14:32,959
so inside the roles directory

00:14:31,680 --> 00:14:34,959
uh so these are all the roles that i

00:14:32,959 --> 00:14:36,240
have made locally so i have an a married

00:14:34,959 --> 00:14:37,279
role which is going to provision a user

00:14:36,240 --> 00:14:38,720
for myself

00:14:37,279 --> 00:14:41,360
uh the common rule is probably the first

00:14:38,720 --> 00:14:41,360
one going to run

00:14:41,680 --> 00:14:44,639
which you'll notice in the playbook the

00:14:43,120 --> 00:14:45,519
common role runs against all of the

00:14:44,639 --> 00:14:48,160
servers

00:14:45,519 --> 00:14:50,079
the web servers just run the web server

00:14:48,160 --> 00:14:51,279
role and the laravel role

00:14:50,079 --> 00:14:53,360
you notice there's a few extra roles

00:14:51,279 --> 00:14:57,040
here the nginx and the php

00:14:53,360 --> 00:14:58,320
so that is because inside the web server

00:14:57,040 --> 00:15:00,880
role

00:14:58,320 --> 00:15:03,360
we have a metadata or a meta file and

00:15:00,880 --> 00:15:05,519
the nginx and php roles are dependencies

00:15:03,360 --> 00:15:06,959
of this web server role

00:15:05,519 --> 00:15:08,000
so i wanted to include that because

00:15:06,959 --> 00:15:10,079
sometimes it's nice to have like a

00:15:08,000 --> 00:15:11,279
hierarchical

00:15:10,079 --> 00:15:12,560
role like you want to do web server so

00:15:11,279 --> 00:15:14,480
on some servers you could just install

00:15:12,560 --> 00:15:15,680
nginx but if you want both nginx and php

00:15:14,480 --> 00:15:17,519
and like a little bit of extra stuff you

00:15:15,680 --> 00:15:21,519
could do something like a web server

00:15:17,519 --> 00:15:21,519
uh role and then deploy it that way

00:15:21,680 --> 00:15:26,560
uh so i wanted to go over the nginx kind

00:15:24,079 --> 00:15:28,399
of has like the the largest uh

00:15:26,560 --> 00:15:29,680
or most stuff in it so the first thing i

00:15:28,399 --> 00:15:31,680
usually look at is a readme

00:15:29,680 --> 00:15:33,040
so i'm not sure if this is convention

00:15:31,680 --> 00:15:35,839
this is what i've always done

00:15:33,040 --> 00:15:36,480
so inside the nginx role i always put a

00:15:35,839 --> 00:15:37,519
read me so

00:15:36,480 --> 00:15:38,399
inside of all of my roles you know

00:15:37,519 --> 00:15:40,480
supposed to read me and this kind of

00:15:38,399 --> 00:15:41,839
defines like what is the role

00:15:40,480 --> 00:15:43,600
and and what are the variables that it

00:15:41,839 --> 00:15:44,880
will accept

00:15:43,600 --> 00:15:46,880
so i just kind of go over that the

00:15:44,880 --> 00:15:48,399
variables uh so you can specify the

00:15:46,880 --> 00:15:50,399
server name the engine server name

00:15:48,399 --> 00:15:52,079
you can specify the web route uh kind of

00:15:50,399 --> 00:15:55,600
give some details and like how you would

00:15:52,079 --> 00:15:57,600
put that or put that and then

00:15:55,600 --> 00:15:58,880
the next thing i look at is tasks the

00:15:57,600 --> 00:16:00,560
only file in this task folder that it

00:15:58,880 --> 00:16:02,000
will run is this main file

00:16:00,560 --> 00:16:03,680
but notice that this main file just

00:16:02,000 --> 00:16:05,600
imports the repo file

00:16:03,680 --> 00:16:07,040
imports the install file imports the

00:16:05,600 --> 00:16:08,320
config file which those sit right

00:16:07,040 --> 00:16:10,959
alongside it

00:16:08,320 --> 00:16:10,959
so the repo

00:16:11,839 --> 00:16:15,519
uh config and install so we'll just run

00:16:14,480 --> 00:16:16,880
through those uh

00:16:15,519 --> 00:16:18,800
literally so we'll do the repo in the

00:16:16,880 --> 00:16:20,399
install on the config

00:16:18,800 --> 00:16:21,440
i'll go over these a little bit more

00:16:20,399 --> 00:16:22,720
detail just kind of wanted to show you

00:16:21,440 --> 00:16:24,959
that going to the folder structure right

00:16:22,720 --> 00:16:24,959
now

00:16:26,000 --> 00:16:31,040
so the next thing we got variables so

00:16:28,800 --> 00:16:34,000
there is a folder here called host vars

00:16:31,040 --> 00:16:35,600
so these are individual specific files

00:16:34,000 --> 00:16:36,079
for a host you can also do group

00:16:35,600 --> 00:16:38,720
underscore

00:16:36,079 --> 00:16:39,199
bars and then have variables that are

00:16:38,720 --> 00:16:42,079
group

00:16:39,199 --> 00:16:43,440
wide since i'm only going to do a small

00:16:42,079 --> 00:16:45,360
presentation today i decided to do host

00:16:43,440 --> 00:16:48,240
bars

00:16:45,360 --> 00:16:49,279
the and i usually name these whatever

00:16:48,240 --> 00:16:50,639
the role is

00:16:49,279 --> 00:16:52,079
the variables inside of that will

00:16:50,639 --> 00:16:53,360
pertain to that role so you can see like

00:16:52,079 --> 00:16:56,399
i'm on the nginx

00:16:53,360 --> 00:16:57,759
variable file so these are variables

00:16:56,399 --> 00:16:58,240
just for that role if i go to the layer

00:16:57,759 --> 00:16:59,440
of l

00:16:58,240 --> 00:17:00,880
you know these are all prefixed with

00:16:59,440 --> 00:17:02,240
layer valve they all pertain to the

00:17:00,880 --> 00:17:03,519
layer of l

00:17:02,240 --> 00:17:06,799
and same thing with web server web

00:17:03,519 --> 00:17:06,799
server has like the writable files

00:17:08,319 --> 00:17:11,839
okay oh and secrets i kind of answer

00:17:10,880 --> 00:17:15,520
that

00:17:11,839 --> 00:17:15,520
so talk about secrets so this is a

00:17:16,160 --> 00:17:19,439
this is what a um seeker looks like an

00:17:18,400 --> 00:17:20,559
ansible so it uses something called

00:17:19,439 --> 00:17:23,120
ansible vault

00:17:20,559 --> 00:17:24,880
and you'll see here this is like aes 256

00:17:23,120 --> 00:17:26,319
encryption like i said it's a symmetric

00:17:24,880 --> 00:17:28,960
encryption so you can you have the same

00:17:26,319 --> 00:17:30,640
key to encrypt and decrypt

00:17:28,960 --> 00:17:32,400
uh but this is just gibberish like it

00:17:30,640 --> 00:17:34,160
would be very hard to take this and

00:17:32,400 --> 00:17:35,520
reverse engineer or even length i think

00:17:34,160 --> 00:17:36,240
that these two passwords here are

00:17:35,520 --> 00:17:37,919
different lengths

00:17:36,240 --> 00:17:39,760
and they look like they're the same

00:17:37,919 --> 00:17:41,440
length here so that another benefit of

00:17:39,760 --> 00:17:44,480
encryption is masking like how

00:17:41,440 --> 00:17:44,480
how big your payload is

00:17:45,520 --> 00:17:48,960
okay so next thing i'm going to do is

00:17:47,840 --> 00:17:52,000
review the

00:17:48,960 --> 00:17:53,120
the readme file on the entire repo uh so

00:17:52,000 --> 00:17:54,880
i'd like to have this here kind of like

00:17:53,120 --> 00:17:55,760
how to do your local development how to

00:17:54,880 --> 00:17:58,320
get your

00:17:55,760 --> 00:17:59,120
the first time run so i just provision

00:17:58,320 --> 00:18:01,280
these servers

00:17:59,120 --> 00:18:02,960
and actually just re-provision them

00:18:01,280 --> 00:18:05,440
somehow when they cooperate

00:18:02,960 --> 00:18:06,480
but in order to so the first time you

00:18:05,440 --> 00:18:08,960
connect to a server

00:18:06,480 --> 00:18:09,760
you'll need to add ssh fingerprint to

00:18:08,960 --> 00:18:11,840
your

00:18:09,760 --> 00:18:13,360
known hosts file a simple way to do this

00:18:11,840 --> 00:18:14,880
is with keyscan so since i said a

00:18:13,360 --> 00:18:17,760
mention had mentioned the

00:18:14,880 --> 00:18:19,520
ansible configures everything over ssh

00:18:17,760 --> 00:18:21,039
you have to accept the key file and

00:18:19,520 --> 00:18:23,360
ansible will not do that for you

00:18:21,039 --> 00:18:24,480
i guess it's kind of a security thing on

00:18:23,360 --> 00:18:25,760
there and they don't want to just like

00:18:24,480 --> 00:18:27,200
assume that you mean you want to connect

00:18:25,760 --> 00:18:29,360
to this host in case it's a malicious

00:18:27,200 --> 00:18:32,400
toast

00:18:29,360 --> 00:18:33,520
hold on this font size up as well

00:18:32,400 --> 00:18:36,000
so i'm actually going to go to my

00:18:33,520 --> 00:18:38,799
inventory file

00:18:36,000 --> 00:18:38,799
and grab

00:18:39,360 --> 00:18:43,840
this ip address so

00:18:42,400 --> 00:18:45,440
just for anyone something about you the

00:18:43,840 --> 00:18:47,520
key scan

00:18:45,440 --> 00:18:48,960
our ssh pcm will grab all the keys for

00:18:47,520 --> 00:18:50,880
all the fingerprints uh h

00:18:48,960 --> 00:18:52,559
is special by the host uh the double

00:18:50,880 --> 00:18:54,640
arrow here is to concatenate and i'm

00:18:52,559 --> 00:18:56,400
concatenating that's why no notice file

00:18:54,640 --> 00:18:58,160
so now i have all the fingerprints for

00:18:56,400 --> 00:19:01,200
that file so if i try to run

00:18:58,160 --> 00:19:03,600
any uh any commands it should just

00:19:01,200 --> 00:19:03,600
connect

00:19:04,480 --> 00:19:07,919
so since this so i set these up on

00:19:06,880 --> 00:19:09,280
digitalocean

00:19:07,919 --> 00:19:12,000
and with digital ocean you give a root

00:19:09,280 --> 00:19:15,120
password and since i don't want to

00:19:12,000 --> 00:19:16,320
or since ansible

00:19:15,120 --> 00:19:17,440
since we don't have any of this already

00:19:16,320 --> 00:19:18,559
configured and ansible i kind of the

00:19:17,440 --> 00:19:19,360
first time i connect i need to connect

00:19:18,559 --> 00:19:20,559
as root

00:19:19,360 --> 00:19:22,799
i'm going to run a playbook that creates

00:19:20,559 --> 00:19:24,240
a user for myself so that every time i

00:19:22,799 --> 00:19:25,520
run a playbook after this i'm running it

00:19:24,240 --> 00:19:27,600
as my user and then escalating my

00:19:25,520 --> 00:19:30,480
privileges is definitely a

00:19:27,600 --> 00:19:30,480
practice i recommend

00:19:32,080 --> 00:19:37,200
so we're going to run the the k

00:19:35,679 --> 00:19:38,799
is to ask for the password to use for

00:19:37,200 --> 00:19:40,960
the user is root i

00:19:38,799 --> 00:19:42,320
is for the inventory so we're running

00:19:40,960 --> 00:19:42,960
the host inventory which is one i showed

00:19:42,320 --> 00:19:44,320
you before

00:19:42,960 --> 00:19:45,200
we're going to limit this to just web

00:19:44,320 --> 00:19:46,720
server one i don't need to do that

00:19:45,200 --> 00:19:47,840
someone whatever inventory now

00:19:46,720 --> 00:19:48,880
and we're going to run the a mayor

00:19:47,840 --> 00:19:50,400
playbook which i guess i didn't show you

00:19:48,880 --> 00:19:53,760
guys i'll just show you real quick

00:19:50,400 --> 00:19:56,720
it's not really important so what um

00:19:53,760 --> 00:19:57,919
actually full screen so we're going to

00:19:56,720 --> 00:19:59,280
create a user and then include some

00:19:57,919 --> 00:19:59,760
stuff from my terminal i'll use alacrity

00:19:59,280 --> 00:20:01,280
so

00:19:59,760 --> 00:20:02,320
uh to make it behave nicely on the

00:20:01,280 --> 00:20:03,360
server we're just going to include some

00:20:02,320 --> 00:20:04,880
stuff there

00:20:03,360 --> 00:20:06,640
we're going to put me in a web admin or

00:20:04,880 --> 00:20:07,520
we're going to ensure a web admin group

00:20:06,640 --> 00:20:11,200
exists

00:20:07,520 --> 00:20:13,520
uh create my user with my password um

00:20:11,200 --> 00:20:15,120
add my ssh key so that i can just ssh in

00:20:13,520 --> 00:20:18,320
and then enable sudo list

00:20:15,120 --> 00:20:18,320
or passwordless sudo

00:20:18,559 --> 00:20:22,640
so when i run this ah playbook okay

00:20:21,039 --> 00:20:26,880
mayor could not be found

00:20:22,640 --> 00:20:30,480
oh uh

00:20:26,880 --> 00:20:34,320
document cposk ansible

00:20:30,480 --> 00:20:35,520
demo let's try that again so the first

00:20:34,320 --> 00:20:38,080
time it runs it's going to ask me for

00:20:35,520 --> 00:20:38,080
the password

00:20:42,799 --> 00:20:48,080
because i specified this lowercase k

00:20:46,240 --> 00:20:49,679
so what gathering facts here is doing is

00:20:48,080 --> 00:20:51,200
it's um

00:20:49,679 --> 00:20:52,480
so so just to be clear we are running a

00:20:51,200 --> 00:20:53,440
playbook here so ansible playbook is to

00:20:52,480 --> 00:20:56,720
run the playbook

00:20:53,440 --> 00:20:58,400
we're running the playbook a mayor uh to

00:20:56,720 --> 00:20:59,600
so gathering facts that i mentioned here

00:20:58,400 --> 00:21:00,960
is getting things from the operating

00:20:59,600 --> 00:21:01,679
system what operating system is running

00:21:00,960 --> 00:21:03,760
what just

00:21:01,679 --> 00:21:05,039
what network interfaces does it have

00:21:03,760 --> 00:21:08,799
things like that just

00:21:05,039 --> 00:21:10,000
running subsequent tasks it can

00:21:08,799 --> 00:21:12,159
it has that information available for

00:21:10,000 --> 00:21:15,440
you if you need to use it for something

00:21:12,159 --> 00:21:17,039
and you can see ensure the webmin exists

00:21:15,440 --> 00:21:18,080
uh add the user add the keys it's kind

00:21:17,039 --> 00:21:19,200
of the stuff that i went over and it

00:21:18,080 --> 00:21:20,640
does those all in order

00:21:19,200 --> 00:21:21,840
anything that's yellow means it changed

00:21:20,640 --> 00:21:22,880
anything that's green means it already

00:21:21,840 --> 00:21:23,760
existed so

00:21:22,880 --> 00:21:28,159
apparently they already have the

00:21:23,760 --> 00:21:28,159
alacrity file on the servers

00:21:29,440 --> 00:21:31,840
okay

00:21:36,400 --> 00:21:40,480
so let's get through my notes here so

00:21:39,520 --> 00:21:45,360
the next thing we're going to do is run

00:21:40,480 --> 00:21:47,440
comments i'm actually going to ssh

00:21:45,360 --> 00:21:50,320
[Music]

00:21:47,440 --> 00:21:51,919
so this is each of the server so in the

00:21:50,320 --> 00:21:54,320
common role which i'm going to go over

00:21:51,919 --> 00:21:56,320
now you'll notice is a very simple role

00:21:54,320 --> 00:21:57,520
so in main it just specifies

00:21:56,320 --> 00:21:59,200
we're going to do the install test and

00:21:57,520 --> 00:22:01,520
we're going to do the ssh tasks the

00:21:59,200 --> 00:22:03,120
inside the install

00:22:01,520 --> 00:22:06,880
we're going to install the apple repo

00:22:03,120 --> 00:22:09,200
which is required for i think it's h-top

00:22:06,880 --> 00:22:10,480
maybe it's t-mux um i forget but so this

00:22:09,200 --> 00:22:12,159
is just going to install the upper repo

00:22:10,480 --> 00:22:13,600
which is a centos thing and then it's

00:22:12,159 --> 00:22:16,400
going to install all these programs

00:22:13,600 --> 00:22:17,840
then under ssh it's going to disable ssh

00:22:16,400 --> 00:22:19,600
features so like password authentication

00:22:17,840 --> 00:22:21,200
we don't want to do that we put our ssh

00:22:19,600 --> 00:22:23,679
keys there already with the

00:22:21,200 --> 00:22:24,400
amer role and then we're not going to

00:22:23,679 --> 00:22:26,240
permit

00:22:24,400 --> 00:22:27,840
root login anymore so stopping on the

00:22:26,240 --> 00:22:28,960
bots just some kind of same defaults

00:22:27,840 --> 00:22:31,360
common i want to run these

00:22:28,960 --> 00:22:33,679
across all servers so again in the in

00:22:31,360 --> 00:22:35,120
the playbook.eml file

00:22:33,679 --> 00:22:38,159
we're running common on all of our hosts

00:22:35,120 --> 00:22:39,600
so it's going to disable ssh

00:22:38,159 --> 00:22:40,960
authentication or password

00:22:39,600 --> 00:22:42,000
authentication on all of those it's

00:22:40,960 --> 00:22:43,600
going to install all these kind of

00:22:42,000 --> 00:22:49,200
common like debugging tools

00:22:43,600 --> 00:22:49,200
on all of our hosts so you'll notice now

00:22:49,280 --> 00:22:56,000
age top so i don't have that tmux

00:22:52,400 --> 00:22:58,960
not installed not installed

00:22:56,000 --> 00:22:58,960
so now i will

00:23:00,720 --> 00:23:06,400
so i'm going to remove the k n the root

00:23:04,640 --> 00:23:07,840
because again i added my and we don't

00:23:06,400 --> 00:23:10,080
actually need this out here for limiting

00:23:07,840 --> 00:23:11,600
which hosts to run against

00:23:10,080 --> 00:23:13,120
so this is a very simple we're going to

00:23:11,600 --> 00:23:14,400
run the animal playbook we're going to

00:23:13,120 --> 00:23:15,679
specify the inventory we want we want

00:23:14,400 --> 00:23:18,000
the hosts inventory

00:23:15,679 --> 00:23:19,280
oh i kind of touched on that so since

00:23:18,000 --> 00:23:19,919
this repo is so small i'm just doing

00:23:19,280 --> 00:23:21,520
like a

00:23:19,919 --> 00:23:23,280
single file but you could have inventory

00:23:21,520 --> 00:23:24,400
for develop inventory for stage and

00:23:23,280 --> 00:23:26,400
majority for production

00:23:24,400 --> 00:23:27,679
and that way if you'd like to run common

00:23:26,400 --> 00:23:28,640
against your entire development

00:23:27,679 --> 00:23:30,000
infrastructure

00:23:28,640 --> 00:23:31,679
you can just specify the inventory of

00:23:30,000 --> 00:23:32,720
develop and it'll just do all that and

00:23:31,679 --> 00:23:34,799
then you test it

00:23:32,720 --> 00:23:36,080
and then promote stage promoted to

00:23:34,799 --> 00:23:38,000
production and that way you can kind of

00:23:36,080 --> 00:23:40,480
limit which set of hosts are potentially

00:23:38,000 --> 00:23:44,000
even being hit

00:23:40,480 --> 00:23:46,400
so we're going to run uh with the t flag

00:23:44,000 --> 00:23:47,679
so t is for tags and inside the common

00:23:46,400 --> 00:23:48,400
rule if you'll notice in this main file

00:23:47,679 --> 00:23:51,440
here

00:23:48,400 --> 00:23:52,480
we're specifying tags common so this is

00:23:51,440 --> 00:23:55,679
very convenient if you're

00:23:52,480 --> 00:23:57,279
working on a playbook uh we can just run

00:23:55,679 --> 00:23:58,559
that one playbook instead of running all

00:23:57,279 --> 00:23:59,919
of the

00:23:58,559 --> 00:24:05,360
plays that are defined against that and

00:23:59,919 --> 00:24:07,039
all the roles

00:24:05,360 --> 00:24:08,240
so here it's installing the apple repo

00:24:07,039 --> 00:24:10,960
it's installing the software which is

00:24:08,240 --> 00:24:10,960
t-mux vm

00:24:16,840 --> 00:24:19,840
etc

00:24:24,080 --> 00:24:27,520
uh here you can see that it disabled the

00:24:25,840 --> 00:24:29,200
password authentication disabled the

00:24:27,520 --> 00:24:31,520
permit root login

00:24:29,200 --> 00:24:33,200
it reloaded so this is a handler reload

00:24:31,520 --> 00:24:35,919
the ssh

00:24:33,200 --> 00:24:36,960
d daemon or ssh name i don't know how

00:24:35,919 --> 00:24:38,320
you say that

00:24:36,960 --> 00:24:40,000
uh and then you can see down here kind

00:24:38,320 --> 00:24:41,200
of the overall report if you're running

00:24:40,000 --> 00:24:42,880
this against multiple hosts you can see

00:24:41,200 --> 00:24:44,720
how many things changed on which host so

00:24:42,880 --> 00:24:46,960
six or six of these were already

00:24:44,720 --> 00:24:48,320
existing four of them changed and so

00:24:46,960 --> 00:24:49,440
this is kind of misleading so this

00:24:48,320 --> 00:24:51,120
handler ran

00:24:49,440 --> 00:24:54,159
it counts that as a change restarting

00:24:51,120 --> 00:24:55,520
ssh this is h name and so like these two

00:24:54,159 --> 00:24:58,640
were to change

00:24:55,520 --> 00:24:59,840
actually no sorry i misspoke

00:24:58,640 --> 00:25:00,720
they changed opposed to those things so

00:24:59,840 --> 00:25:02,159
maybe this doesn't count as a change

00:25:00,720 --> 00:25:04,000
doesn't matter change that's weird

00:25:02,159 --> 00:25:05,840
one two three four five that should i

00:25:04,000 --> 00:25:08,720
should be five not sure why that's

00:25:05,840 --> 00:25:10,000
the way it is but move on so now if we

00:25:08,720 --> 00:25:12,720
look

00:25:10,000 --> 00:25:12,720
we have h top

00:25:13,039 --> 00:25:19,919
we have tmox we have vim

00:25:18,080 --> 00:25:21,520
so every server that we run that against

00:25:19,919 --> 00:25:22,799
will have all those programs installed

00:25:21,520 --> 00:25:23,200
and we didn't have to manually do that

00:25:22,799 --> 00:25:24,640
at all

00:25:23,200 --> 00:25:26,480
it's just in configuration the first

00:25:24,640 --> 00:25:28,159
time you run the common uh

00:25:26,480 --> 00:25:31,039
playbook against them they will get all

00:25:28,159 --> 00:25:31,039
of those installed

00:25:33,760 --> 00:25:37,760
all right so now i'm going to go a

00:25:36,799 --> 00:25:40,080
little bit more depth

00:25:37,760 --> 00:25:41,360
into these roles uh just because we're

00:25:40,080 --> 00:25:42,559
going to run these i'm going to probably

00:25:41,360 --> 00:25:44,480
fly through these so if you guys have

00:25:42,559 --> 00:25:46,159
questions let me know

00:25:44,480 --> 00:25:47,760
so in the web developer or sorry web

00:25:46,159 --> 00:25:48,720
server role you'll notice yet again i

00:25:47,760 --> 00:25:50,799
said i had the

00:25:48,720 --> 00:25:52,480
dependencies here so this will run php

00:25:50,799 --> 00:25:56,080
first then nginx

00:25:52,480 --> 00:25:59,120
then this entire web server role

00:25:56,080 --> 00:25:59,679
so going over what this web server role

00:25:59,120 --> 00:26:01,919
does

00:25:59,679 --> 00:26:03,360
just ensures again the web admin group

00:26:01,919 --> 00:26:05,840
is present

00:26:03,360 --> 00:26:07,279
installs a directory where we can deploy

00:26:05,840 --> 00:26:09,279
things to

00:26:07,279 --> 00:26:11,279
it also installs some tools it needs to

00:26:09,279 --> 00:26:12,480
manage s8 linux this is kind of cool so

00:26:11,279 --> 00:26:14,000
boot trap since we already have python

00:26:12,480 --> 00:26:15,120
on the server we can kind of bootstrap

00:26:14,000 --> 00:26:17,279
all the things we need so i would like

00:26:15,120 --> 00:26:20,320
to manage se linux so i can install

00:26:17,279 --> 00:26:22,240
uh with the dnf module is

00:26:20,320 --> 00:26:23,919
since we're using centos dnf as the

00:26:22,240 --> 00:26:26,080
package manager there so i can install

00:26:23,919 --> 00:26:27,760
these two python

00:26:26,080 --> 00:26:29,840
libraries in order to use them to to

00:26:27,760 --> 00:26:32,080
manage se linux

00:26:29,840 --> 00:26:33,279
we allow our web services to access uh

00:26:32,080 --> 00:26:35,520
to the network this will kind of become

00:26:33,279 --> 00:26:39,840
important when we connect a database

00:26:35,520 --> 00:26:39,840
the state is present and the

00:26:41,360 --> 00:26:46,640
yeah so present and persistent i'm gonna

00:26:44,720 --> 00:26:48,240
add a default uh for the

00:26:46,640 --> 00:26:49,760
a default context for this not gonna go

00:26:48,240 --> 00:26:51,679
too far into se linux but

00:26:49,760 --> 00:26:53,279
and then we add a custom custom any

00:26:51,679 --> 00:26:54,320
custom context so if we need files to be

00:26:53,279 --> 00:26:55,520
writable this is kind of where the

00:26:54,320 --> 00:26:57,919
variable comes in

00:26:55,520 --> 00:27:00,159
so you'll notice this format here loop

00:26:57,919 --> 00:27:02,320
will loop over this entire

00:27:00,159 --> 00:27:03,520
variable so web server arrival files and

00:27:02,320 --> 00:27:05,600
then when you're looping over things

00:27:03,520 --> 00:27:07,360
they are put into an object called item

00:27:05,600 --> 00:27:10,080
if they have if it is a dictionary you

00:27:07,360 --> 00:27:11,840
can do item dot name or item dot

00:27:10,080 --> 00:27:13,679
ip address things like that but since we

00:27:11,840 --> 00:27:15,520
only have since this is just a list

00:27:13,679 --> 00:27:17,200
going back kind of though here since

00:27:15,520 --> 00:27:18,960
this is just a list of things

00:27:17,200 --> 00:27:20,240
the item is the string so that's what

00:27:18,960 --> 00:27:22,480
i'll come through

00:27:20,240 --> 00:27:23,520
we'll come through there and we'll kind

00:27:22,480 --> 00:27:26,320
of kind of go over this

00:27:23,520 --> 00:27:26,320
in a little bit as well

00:27:26,559 --> 00:27:31,760
okay so touching on like the nginx roll

00:27:30,320 --> 00:27:33,440
so we kind of went over this but we'll

00:27:31,760 --> 00:27:34,640
go over it again um

00:27:33,440 --> 00:27:35,679
the first thing i usually look at is the

00:27:34,640 --> 00:27:36,799
readme file what's going on in the

00:27:35,679 --> 00:27:38,159
readme

00:27:36,799 --> 00:27:40,000
uh so we'll see here we can specify a

00:27:38,159 --> 00:27:42,080
server name and a web route

00:27:40,000 --> 00:27:44,080
here we have uh we're gonna include a

00:27:42,080 --> 00:27:44,720
repository or sorry updater repository

00:27:44,080 --> 00:27:47,360
we're gonna

00:27:44,720 --> 00:27:48,960
install nginx and we can configure it so

00:27:47,360 --> 00:27:50,720
the repo we're going to use is on centos

00:27:48,960 --> 00:27:53,600
they have these things called modules

00:27:50,720 --> 00:27:54,080
so we're using the copy module here and

00:27:53,600 --> 00:27:56,640
on

00:27:54,080 --> 00:27:57,919
nginx so anything that uses copy uses

00:27:56,640 --> 00:27:59,279
this files directory

00:27:57,919 --> 00:28:00,480
and you'll see this is a plain text file

00:27:59,279 --> 00:28:02,080
there's no templating here this is

00:28:00,480 --> 00:28:05,679
exactly a file that we copied

00:28:02,080 --> 00:28:06,640
to the server i'm sorry i was in the uh

00:28:05,679 --> 00:28:08,320
repo

00:28:06,640 --> 00:28:10,720
so and that will copy it to this

00:28:08,320 --> 00:28:12,880
location which uh again dnf is the

00:28:10,720 --> 00:28:14,320
package software or package manager so

00:28:12,880 --> 00:28:15,760
it knows how to read that module file to

00:28:14,320 --> 00:28:16,960
get the one we want i'm just updating it

00:28:15,760 --> 00:28:19,440
to use the

00:28:16,960 --> 00:28:20,799
main line next i'm doing is install very

00:28:19,440 --> 00:28:23,679
simple dnf install

00:28:20,799 --> 00:28:24,240
nginx and we're going to template some

00:28:23,679 --> 00:28:26,840
things

00:28:24,240 --> 00:28:28,320
so the template is called

00:28:26,840 --> 00:28:30,240
default.conf.js

00:28:28,320 --> 00:28:32,320
this is where we're going to install it

00:28:30,240 --> 00:28:33,440
to and you'll notice kind of some of the

00:28:32,320 --> 00:28:34,640
things are quoted some of the things are

00:28:33,440 --> 00:28:36,799
not so anything that uses a variable

00:28:34,640 --> 00:28:38,960
name i always put quotes around

00:28:36,799 --> 00:28:40,640
because this is technically the start of

00:28:38,960 --> 00:28:42,240
an object in json so i don't want to

00:28:40,640 --> 00:28:43,279
confuse yaml so i just put quotes around

00:28:42,240 --> 00:28:45,039
anything that has

00:28:43,279 --> 00:28:47,279
a variable in it i don't put it around

00:28:45,039 --> 00:28:50,720
things like this this is still string

00:28:47,279 --> 00:28:53,919
um this this is an oct or

00:28:50,720 --> 00:28:55,200
octal number yeah

00:28:53,919 --> 00:28:56,559
and then this is the notify that we were

00:28:55,200 --> 00:28:58,159
talking about before so this notify will

00:28:56,559 --> 00:28:59,520
notify a handler so we want to reload

00:28:58,159 --> 00:29:00,880
nginx this is very helpful if we're

00:28:59,520 --> 00:29:01,760
going to template a bunch of websites or

00:29:00,880 --> 00:29:02,960
loop over this

00:29:01,760 --> 00:29:04,000
we're only going to restart engine x

00:29:02,960 --> 00:29:05,760
once we're not going to restart at the

00:29:04,000 --> 00:29:06,880
end of every loop

00:29:05,760 --> 00:29:08,720
and then we're going to ensure the nginx

00:29:06,880 --> 00:29:10,159
services started so we use systemd make

00:29:08,720 --> 00:29:11,679
sure engine x is started and enabled so

00:29:10,159 --> 00:29:13,679
if we reboot the server it'll come back

00:29:11,679 --> 00:29:16,640
online

00:29:13,679 --> 00:29:18,080
uh to touch on the template so this is

00:29:16,640 --> 00:29:19,440
just some notation that we want to put a

00:29:18,080 --> 00:29:20,559
comment at the top that it's ansible

00:29:19,440 --> 00:29:23,279
managed

00:29:20,559 --> 00:29:24,720
and this is a typical nginx

00:29:23,279 --> 00:29:26,240
configuration you'll notice here the

00:29:24,720 --> 00:29:27,840
variables are not quoted this is because

00:29:26,240 --> 00:29:29,919
this is not interpreted as uh

00:29:27,840 --> 00:29:31,279
as the ammo it's just straight it's just

00:29:29,919 --> 00:29:32,320
gonna template out anything that has

00:29:31,279 --> 00:29:33,520
double curly brackets so you don't need

00:29:32,320 --> 00:29:34,320
to put quotes around anything in here

00:29:33,520 --> 00:29:37,440
unless you want

00:29:34,320 --> 00:29:37,440
quotes in the end result

00:29:37,600 --> 00:29:40,880
so we put the nginx server name here and

00:29:39,520 --> 00:29:41,600
the webroot and those are both variables

00:29:40,880 --> 00:29:44,480
that we asked for

00:29:41,600 --> 00:29:48,000
in the are talked about in the readme

00:29:44,480 --> 00:29:50,159
and then the rest is kind of boilerplate

00:29:48,000 --> 00:29:51,760
speaking of variables there is a

00:29:50,159 --> 00:29:54,000
defaults

00:29:51,760 --> 00:29:56,000
folder here in the enginex panel the

00:29:54,000 --> 00:29:59,279
main

00:29:56,000 --> 00:30:00,000
uh yes lewis that is a or louis vuitton

00:29:59,279 --> 00:30:01,919
i'm saying that right

00:30:00,000 --> 00:30:03,600
uh yeah that was ginger too sorry i

00:30:01,919 --> 00:30:04,960
forgot to touch on that so the j2 here

00:30:03,600 --> 00:30:06,320
at the end this is yeah these are ginger

00:30:04,960 --> 00:30:07,840
templates so that's

00:30:06,320 --> 00:30:09,520
ginger two is a python templating

00:30:07,840 --> 00:30:10,880
language ansible

00:30:09,520 --> 00:30:13,760
is written in python so it just kind of

00:30:10,880 --> 00:30:13,760
takes advantage of that

00:30:13,840 --> 00:30:17,919
so the defaults the defaults folder

00:30:16,559 --> 00:30:19,520
inside the role

00:30:17,919 --> 00:30:20,799
goes over all the defaults we want to

00:30:19,520 --> 00:30:21,840
set for this so if the user does not

00:30:20,799 --> 00:30:23,520
specify

00:30:21,840 --> 00:30:24,880
a server name we'll just use local local

00:30:23,520 --> 00:30:25,600
host if they don't specify a web route

00:30:24,880 --> 00:30:28,720
we'll just use

00:30:25,600 --> 00:30:28,720
services http

00:30:30,799 --> 00:30:34,720
so kind of glancing over the php one is

00:30:33,039 --> 00:30:36,640
just a little bit of time

00:30:34,720 --> 00:30:37,600
around a little short here so the tasks

00:30:36,640 --> 00:30:38,799
we're going to kind of do the same thing

00:30:37,600 --> 00:30:41,120
we're going to install repo

00:30:38,799 --> 00:30:42,399
install the software and configure it so

00:30:41,120 --> 00:30:43,840
the repo we're going to use the remy's

00:30:42,399 --> 00:30:44,960
repo

00:30:43,840 --> 00:30:47,600
we're going to enable the module that's

00:30:44,960 --> 00:30:47,600
7.4

00:30:47,679 --> 00:30:52,960
again this is for dnf and the defaults

00:30:51,520 --> 00:30:53,919
so we're going to we're not going to

00:30:52,960 --> 00:30:55,200
specify any of these but these are all

00:30:53,919 --> 00:30:57,120
the php packages i guess

00:30:55,200 --> 00:30:58,559
whatever the readme so in the readme it

00:30:57,120 --> 00:30:59,840
tells you that you can override the php

00:30:58,559 --> 00:31:01,120
packages they're going to installed

00:30:59,840 --> 00:31:05,840
by default we're going to install all

00:31:01,120 --> 00:31:05,840
the packages required to run laravel

00:31:06,480 --> 00:31:10,320
and then touching so so that's all stuff

00:31:08,240 --> 00:31:11,279
for the the web server role and its

00:31:10,320 --> 00:31:14,799
dependencies

00:31:11,279 --> 00:31:16,320
the laravel repo is a little bit uh

00:31:14,799 --> 00:31:18,080
kind of important so we're gonna just

00:31:16,320 --> 00:31:19,440
include the configuration tasks and

00:31:18,080 --> 00:31:21,600
we're just going to template the env

00:31:19,440 --> 00:31:23,360
file which are familiar with laravel.env

00:31:21,600 --> 00:31:24,320
file

00:31:23,360 --> 00:31:26,880
and we're just going to put it in the

00:31:24,320 --> 00:31:27,919
laravel directory set the owner in the

00:31:26,880 --> 00:31:30,399
group

00:31:27,919 --> 00:31:32,640
and then again notify uh actually i

00:31:30,399 --> 00:31:35,600
don't know why i did that because it

00:31:32,640 --> 00:31:36,960
project isn't installed yet uh this is

00:31:35,600 --> 00:31:38,159
the env file so you'll notice we do

00:31:36,960 --> 00:31:40,880
conditionals like this

00:31:38,159 --> 00:31:42,480
percent if uh so if laravel.debug is

00:31:40,880 --> 00:31:46,159
defined and it is true

00:31:42,480 --> 00:31:47,440
we can output this true here and then

00:31:46,159 --> 00:31:49,120
the rest was just specifying we won't

00:31:47,440 --> 00:31:51,919
put our database connection in our app

00:31:49,120 --> 00:31:51,919
name things like that

00:31:53,120 --> 00:31:58,159
okay so let's actually run that

00:31:56,399 --> 00:32:00,000
oh sorry so i'm going to go over so i

00:31:58,159 --> 00:32:01,679
went over these uh variables

00:32:00,000 --> 00:32:02,960
so we can also so we don't know what

00:32:01,679 --> 00:32:04,159
this is but let's say we want to debug

00:32:02,960 --> 00:32:07,600
like something goes wrong we just want

00:32:04,159 --> 00:32:07,600
to like debug what is wrong with this

00:32:11,519 --> 00:32:14,720
so we can use the ansible command so

00:32:13,360 --> 00:32:16,799
this is not the ansible

00:32:14,720 --> 00:32:18,559
mclaren screen we can use the ansible

00:32:16,799 --> 00:32:20,320
command which is not ansible playbook

00:32:18,559 --> 00:32:21,840
this is just ansible proper then we do

00:32:20,320 --> 00:32:23,440
we could pass it an inventory we pass a

00:32:21,840 --> 00:32:24,799
module we run on so there's a

00:32:23,440 --> 00:32:26,880
module called debug which i'll put a

00:32:24,799 --> 00:32:28,720
variable or a message so

00:32:26,880 --> 00:32:30,399
these are specifying the parameters to

00:32:28,720 --> 00:32:31,840
pass to the module so we're just going

00:32:30,399 --> 00:32:33,039
to output the laravel app

00:32:31,840 --> 00:32:35,600
and we're going to ask for the vault

00:32:33,039 --> 00:32:36,640
password uh because it's encrypted we

00:32:35,600 --> 00:32:37,840
need the vault password so that's going

00:32:36,640 --> 00:32:39,600
to ask for the command line and we want

00:32:37,840 --> 00:32:40,799
to do it you have to specify a host here

00:32:39,600 --> 00:32:42,559
so it knows which host to get the

00:32:40,799 --> 00:32:44,000
variable for so if we do that it's going

00:32:42,559 --> 00:32:46,080
to ask for the password

00:32:44,000 --> 00:32:48,159
type in the password and it outputs the

00:32:46,080 --> 00:32:52,399
in json format

00:32:48,159 --> 00:32:53,600
that exact same so letterblock name env

00:32:52,399 --> 00:32:56,960
key

00:32:53,600 --> 00:33:00,159
name env key so all those are the same

00:32:56,960 --> 00:33:01,279
uh you know typical password safeness

00:33:00,159 --> 00:33:02,799
thing here if your hard drive is

00:33:01,279 --> 00:33:04,960
encrypted or you don't want to

00:33:02,799 --> 00:33:06,559
uh leak your passwords there is i'm

00:33:04,960 --> 00:33:09,679
gonna show i'm gonna use a

00:33:06,559 --> 00:33:11,440
tip here that is for time but speak to

00:33:09,679 --> 00:33:13,679
your system administrators before

00:33:11,440 --> 00:33:14,880
uh doing this so one thing that you can

00:33:13,679 --> 00:33:16,880
do is answerable we'll look for a

00:33:14,880 --> 00:33:20,000
variable called

00:33:16,880 --> 00:33:20,000
if i can double click here

00:33:21,279 --> 00:33:24,640
ansible vault password file and if it

00:33:23,360 --> 00:33:25,919
finds this file you don't have to

00:33:24,640 --> 00:33:27,120
specify the file it will just read that

00:33:25,919 --> 00:33:28,559
file and assume that that is a password

00:33:27,120 --> 00:33:29,760
for your ansible vaults so i'm going to

00:33:28,559 --> 00:33:31,120
point this on my home directory cpos

00:33:29,760 --> 00:33:38,080
cancel bolt

00:33:31,120 --> 00:33:39,760
and then i'm just going to

00:33:38,080 --> 00:33:42,320
uh i'll put my super secure password

00:33:39,760 --> 00:33:42,320
into that

00:33:44,159 --> 00:33:48,080
answer a vault file so now you'll notice

00:33:46,559 --> 00:33:49,200
if i run this ansible vault again our

00:33:48,080 --> 00:33:51,519
ansible

00:33:49,200 --> 00:33:52,720
ansible debug i don't have to specify

00:33:51,519 --> 00:33:54,080
that and it'll still output everything

00:33:52,720 --> 00:33:56,559
that's because it read that file in

00:33:54,080 --> 00:33:57,679
and that's outputting it again use your

00:33:56,559 --> 00:34:00,399
best judgment don't put passwords all

00:33:57,679 --> 00:34:00,399
over your hard drives

00:34:01,360 --> 00:34:04,799
okay so now since we specified that even

00:34:03,279 --> 00:34:06,320
on playbook runs so we're going to run

00:34:04,799 --> 00:34:07,840
this playbook uh we're gonna run the

00:34:06,320 --> 00:34:09,760
entire playbook on so all

00:34:07,840 --> 00:34:11,200
all the stuff on all our hosts are which

00:34:09,760 --> 00:34:11,679
is only one host but we're gonna run all

00:34:11,200 --> 00:34:14,480
the

00:34:11,679 --> 00:34:16,320
all the plays and i don't have to

00:34:14,480 --> 00:34:21,839
specify a password for the vault those

00:34:16,320 --> 00:34:21,839
will be automatically decrypted

00:34:22,159 --> 00:34:25,520
so actually just here so system this is

00:34:24,639 --> 00:34:28,800
on the server again

00:34:25,520 --> 00:34:31,119
system ctl status engine x so there's no

00:34:28,800 --> 00:34:35,839
nginx installed there's no

00:34:31,119 --> 00:34:35,839
like php fpm

00:34:36,159 --> 00:34:40,639
uh if we lssl srv like the http

00:34:39,280 --> 00:34:41,839
directory does not exist so it's gonna

00:34:40,639 --> 00:34:42,879
it's just gonna go through and create

00:34:41,839 --> 00:34:44,879
all of these

00:34:42,879 --> 00:34:46,000
so this is something you would normally

00:34:44,879 --> 00:34:49,040
have to remember to install if you're

00:34:46,000 --> 00:34:50,079
doing a custom build of a server you'd

00:34:49,040 --> 00:34:50,560
have to remember like oh yeah that needs

00:34:50,079 --> 00:34:53,520
nginx

00:34:50,560 --> 00:34:54,960
uh uh php fpm since the developers need

00:34:53,520 --> 00:34:57,680
to deploy we're gonna have to

00:34:54,960 --> 00:34:59,119
uh put the server http directory there

00:34:57,680 --> 00:35:00,560
oh yeah we need to template their config

00:34:59,119 --> 00:35:02,800
for them so it's secure and you know

00:35:00,560 --> 00:35:04,000
everything's locked out and ansible

00:35:02,800 --> 00:35:06,480
uh but this is just going to do it all

00:35:04,000 --> 00:35:08,240
for you so while that's kind of

00:35:06,480 --> 00:35:09,520
running in the background here which

00:35:08,240 --> 00:35:10,400
i'll make that a little bigger so maybe

00:35:09,520 --> 00:35:11,440
you can see

00:35:10,400 --> 00:35:13,920
we're going to go ahead and create a

00:35:11,440 --> 00:35:15,040
firewall roll so i'm

00:35:13,920 --> 00:35:17,200
probably going to blaze through this

00:35:15,040 --> 00:35:18,720
little quick just for for time

00:35:17,200 --> 00:35:20,320
so i'm going to create in the roles

00:35:18,720 --> 00:35:25,520
directory

00:35:20,320 --> 00:35:25,520
firewall tasks main.yml

00:35:25,839 --> 00:35:29,119
another new file readme

00:35:29,200 --> 00:35:35,680
so for the readme um

00:35:32,400 --> 00:35:35,680
actually just copy and paste this

00:35:38,640 --> 00:35:41,599
so we're going to create a firewall task

00:35:40,160 --> 00:35:42,800
installs firewalld and configures the

00:35:41,599 --> 00:35:44,000
open ports by default we're going to

00:35:42,800 --> 00:35:45,440
open up the ssh port because we don't

00:35:44,000 --> 00:35:48,560
want to lock ourselves out

00:35:45,440 --> 00:35:50,880
as far as variables go you can specify

00:35:48,560 --> 00:35:50,880
them

00:35:54,720 --> 00:35:58,160
you can specify any services you want to

00:35:56,240 --> 00:36:00,640
open so firewalld understands things

00:35:58,160 --> 00:36:04,640
like http is 480 https

00:36:00,640 --> 00:36:06,800
uh 443. uh

00:36:04,640 --> 00:36:08,079
why did this fail oh i'd ignored it so

00:36:06,800 --> 00:36:09,440
yeah we don't have any uh we don't have

00:36:08,079 --> 00:36:10,880
our level project deployed so this

00:36:09,440 --> 00:36:14,320
failed but i haven't set up to ignore

00:36:10,880 --> 00:36:16,320
any failures there but that's done

00:36:14,320 --> 00:36:20,079
running so now we can check things like

00:36:16,320 --> 00:36:21,040
nginx has started and php fpm has

00:36:20,079 --> 00:36:23,920
started

00:36:21,040 --> 00:36:26,320
and if we list out this uh that file

00:36:23,920 --> 00:36:28,880
does not exist oh no sorry http

00:36:26,320 --> 00:36:31,919
file exists and if we

00:36:28,880 --> 00:36:31,919
[Music]

00:36:32,960 --> 00:36:36,160
we can list out that file there and it

00:36:34,960 --> 00:36:38,400
exists and you can see

00:36:36,160 --> 00:36:39,280
all of our secrets were decrypted and

00:36:38,400 --> 00:36:41,839
put into

00:36:39,280 --> 00:36:41,839
the file

00:36:43,599 --> 00:36:46,800
so continuing on with creating this role

00:36:45,599 --> 00:36:49,520
so we have a main file

00:36:46,800 --> 00:36:52,400
i usually just copy another main file so

00:36:49,520 --> 00:36:52,400
tasks main

00:36:53,440 --> 00:36:56,240
because all we're doing is really is

00:36:54,720 --> 00:36:57,440
just importing all these things and i

00:36:56,240 --> 00:36:59,200
know that we're going to have an install

00:36:57,440 --> 00:37:01,920
step and a configuration step so let's

00:36:59,200 --> 00:37:05,520
create those now

00:37:01,920 --> 00:37:06,800
install and config

00:37:05,520 --> 00:37:08,400
so one of the reasons you break these

00:37:06,800 --> 00:37:10,240
out is because uh that makes it a little

00:37:08,400 --> 00:37:12,000
bit more expensive expand simple

00:37:10,240 --> 00:37:13,200
expandable there you go expandable and

00:37:12,000 --> 00:37:15,280
that way this file just doesn't become

00:37:13,200 --> 00:37:15,760
like a huge behemoth of uh just all the

00:37:15,280 --> 00:37:17,200
stuff

00:37:15,760 --> 00:37:18,480
is in this one file you can kind of see

00:37:17,200 --> 00:37:19,760
the steps like okay it's gonna install

00:37:18,480 --> 00:37:20,960
stuff it's gonna configure stuff oh i'm

00:37:19,760 --> 00:37:22,240
interested in configuration steps then

00:37:20,960 --> 00:37:24,320
you go to config file find out what it

00:37:22,240 --> 00:37:26,720
does

00:37:24,320 --> 00:37:28,079
so since we mentioned in our readme file

00:37:26,720 --> 00:37:29,280
we mentioned this we want to set up the

00:37:28,079 --> 00:37:31,920
defaults

00:37:29,280 --> 00:37:31,920
that goes here

00:37:33,040 --> 00:37:36,560
and the only file that's read out of

00:37:34,480 --> 00:37:38,240
defaults as main.yml if you have a main

00:37:36,560 --> 00:37:40,079
directory in the defaults file it will

00:37:38,240 --> 00:37:41,760
read all of the files inside of that but

00:37:40,079 --> 00:37:44,800
we just want one so

00:37:41,760 --> 00:37:46,640
and we specified a firewall

00:37:44,800 --> 00:37:48,839
services and we're going to make that an

00:37:46,640 --> 00:37:50,560
empty array so here we can use the json

00:37:48,839 --> 00:37:51,760
syntax

00:37:50,560 --> 00:37:53,040
because i think if you just do a column

00:37:51,760 --> 00:37:54,320
it's an empty object not an empty array

00:37:53,040 --> 00:37:57,119
so we're going to use the json syntax

00:37:54,320 --> 00:37:57,119
make that an empty

00:37:57,200 --> 00:38:02,240
empty array so

00:38:00,480 --> 00:38:05,839
next templating main templating all

00:38:02,240 --> 00:38:05,839
right so install

00:38:06,000 --> 00:38:10,079
the interest of time we're just going to

00:38:08,880 --> 00:38:12,960
install firewalld

00:38:10,079 --> 00:38:14,480
and then start that service with systemd

00:38:12,960 --> 00:38:15,599
so as far as configuration goes so i

00:38:14,480 --> 00:38:19,200
usually

00:38:15,599 --> 00:38:20,960
save that uh if i need to use something

00:38:19,200 --> 00:38:22,400
like a firewalld module just google

00:38:20,960 --> 00:38:26,800
ansible

00:38:22,400 --> 00:38:26,800
uh firewall d module

00:38:27,599 --> 00:38:30,880
and first thing comes up is the ansible

00:38:29,440 --> 00:38:33,040
posix

00:38:30,880 --> 00:38:34,800
firewall d module so this goes over all

00:38:33,040 --> 00:38:36,560
of the parameters that it takes

00:38:34,800 --> 00:38:38,240
uh any notes that it has and the bottom

00:38:36,560 --> 00:38:39,520
gives you some nice examples

00:38:38,240 --> 00:38:40,640
so this is super helpful their

00:38:39,520 --> 00:38:41,599
documentation as i think i mentioned

00:38:40,640 --> 00:38:43,119
before is awesome

00:38:41,599 --> 00:38:45,520
one thing to note is that this is in the

00:38:43,119 --> 00:38:46,560
ansible posix collection so in 2.10 they

00:38:45,520 --> 00:38:47,920
changed something up where they use

00:38:46,560 --> 00:38:50,000
collections now instead of just firewall

00:38:47,920 --> 00:38:51,520
d existing in like the global namespace

00:38:50,000 --> 00:38:53,200
so since we want to use this we

00:38:51,520 --> 00:38:59,680
definitely need to install it

00:38:53,200 --> 00:39:03,040
so touch requirements.ml

00:38:59,680 --> 00:39:03,040
so inside the requirements file

00:39:07,280 --> 00:39:10,880
and i'm just going to cover the name of

00:39:08,400 --> 00:39:10,880
the collection

00:39:12,400 --> 00:39:16,240
so including this in your uh repository

00:39:14,960 --> 00:39:17,359
is super helpful because then anybody

00:39:16,240 --> 00:39:20,560
else that wants to run things

00:39:17,359 --> 00:39:22,079
can uh just install them and use a

00:39:20,560 --> 00:39:23,839
galaxy command to install those so i

00:39:22,079 --> 00:39:25,119
didn't mention ansible galaxy before and

00:39:23,839 --> 00:39:26,160
i'll touch on that hopefully if we have

00:39:25,119 --> 00:39:27,040
a time but

00:39:26,160 --> 00:39:28,560
it's looking like we're getting a little

00:39:27,040 --> 00:39:30,079
close so we're going to use the galaxy

00:39:28,560 --> 00:39:31,760
to install

00:39:30,079 --> 00:39:33,680
and we're going to read the config from

00:39:31,760 --> 00:39:35,040
the requirements file

00:39:33,680 --> 00:39:43,839
and i already have it installed so it's

00:39:35,040 --> 00:39:43,839
going to time it's already installed

00:39:45,440 --> 00:39:50,800
so i will

00:39:49,280 --> 00:39:53,440
copy and paste this next one which is

00:39:50,800 --> 00:39:53,440
the config

00:39:53,680 --> 00:39:57,680
so we're going to use that ansible posix

00:39:55,520 --> 00:39:58,640
firewall d the service we want is ssh

00:39:57,680 --> 00:40:00,640
because as i mentioned before we're

00:39:58,640 --> 00:40:03,440
going to just enable ssh for everything

00:40:00,640 --> 00:40:03,440
states enabled

00:40:03,839 --> 00:40:06,240
and we're going to immediately enable

00:40:05,119 --> 00:40:07,599
that then we're going to loop over all

00:40:06,240 --> 00:40:09,839
of our services so we mentioned

00:40:07,599 --> 00:40:11,040
in our inner variable file up here which

00:40:09,839 --> 00:40:15,440
we will create net uh

00:40:11,040 --> 00:40:15,440
shortly we'll enable the http service

00:40:16,839 --> 00:40:19,839
firewall.

00:40:20,640 --> 00:40:25,839
um firewall

00:40:26,800 --> 00:40:30,720
so that'll enable http and so it's going

00:40:29,440 --> 00:40:31,520
to loop over all those so yet again this

00:40:30,720 --> 00:40:35,119
is called item

00:40:31,520 --> 00:40:37,280
and enable them make it permanent

00:40:35,119 --> 00:40:38,319
and the last thing we have to do is add

00:40:37,280 --> 00:40:40,720
this to the playbook

00:40:38,319 --> 00:40:42,240
so we go down here to our playbook we

00:40:40,720 --> 00:40:44,480
want to run the firewall service against

00:40:42,240 --> 00:40:45,760
all hosts

00:40:44,480 --> 00:40:49,920
so i'm just gonna add the firewall roll

00:40:45,760 --> 00:40:49,920
there to the all host block

00:40:50,560 --> 00:40:55,920
and then we are going to run

00:40:54,079 --> 00:40:57,680
just the firewall so again ansible

00:40:55,920 --> 00:40:59,359
playbook the inventory is our hosts file

00:40:57,680 --> 00:41:01,680
we just want to run the tags of firewall

00:40:59,359 --> 00:41:07,200
which i don't think i changed those

00:41:01,680 --> 00:41:08,800
well not there

00:41:07,200 --> 00:41:10,560
so we update our tags and our firewall

00:41:08,800 --> 00:41:12,560
role so that they all point to

00:41:10,560 --> 00:41:21,839
firewall or firewall config so we're

00:41:12,560 --> 00:41:21,839
gonna run the firewall tags

00:41:22,079 --> 00:41:25,839
and just before this gets running let's

00:41:24,640 --> 00:41:27,119
so you'll see the firewall command is

00:41:25,839 --> 00:41:28,400
not found

00:41:27,119 --> 00:41:29,520
uh but since running through is

00:41:28,400 --> 00:41:30,800
installing software starting the

00:41:29,520 --> 00:41:31,920
firewall allowing us to stage through

00:41:30,800 --> 00:41:34,160
and then allowing our services that

00:41:31,920 --> 00:41:36,800
allow the http and then finished so now

00:41:34,160 --> 00:41:36,800
if we listen

00:41:38,480 --> 00:41:49,839
did i do something wrong

00:41:50,800 --> 00:42:03,839
installed software

00:42:05,680 --> 00:42:10,079
oh i'm not sure why that definitely

00:42:07,440 --> 00:42:10,079
worked last night

00:42:12,720 --> 00:42:17,760
while it's running um so we're just

00:42:16,480 --> 00:42:19,520
going to trust that that's uh that's

00:42:17,760 --> 00:42:21,680
running so now if we visit our

00:42:19,520 --> 00:42:22,880
since we enabled all of that we can

00:42:21,680 --> 00:42:24,960
visit our

00:42:22,880 --> 00:42:26,480
ip address and we can see 404 not found

00:42:24,960 --> 00:42:28,800
so i'm going to upload some stuff real

00:42:26,480 --> 00:42:28,800
quick

00:42:28,880 --> 00:42:35,760
so i just have a uh or sorry

00:42:32,079 --> 00:42:39,760
a uh zip file with all of uh

00:42:35,760 --> 00:42:41,200
with a default laravel project there

00:42:39,760 --> 00:42:45,839
and jay how are we looking on time can i

00:42:41,200 --> 00:42:45,839
go a tiny bit longer

00:42:46,560 --> 00:42:49,920
you can you can go a little longer you

00:42:48,880 --> 00:42:53,520
want to make sure we

00:42:49,920 --> 00:42:54,880
we we bump out um

00:42:53,520 --> 00:42:57,280
a couple minutes before the end of the

00:42:54,880 --> 00:42:58,079
day absolutely sound about this familiar

00:42:57,280 --> 00:42:59,440
with laravel

00:42:58,079 --> 00:43:00,640
we'll see that this just means it cannot

00:42:59,440 --> 00:43:01,680
connect to a database obviously we

00:43:00,640 --> 00:43:02,880
haven't configured a database the

00:43:01,680 --> 00:43:04,160
database doesn't exist here so one of

00:43:02,880 --> 00:43:07,200
the things that i wanted to go over was

00:43:04,160 --> 00:43:07,200
cancel galaxy

00:43:09,599 --> 00:43:13,839
and we're going to configure a second

00:43:10,800 --> 00:43:13,839
server for

00:43:14,800 --> 00:43:18,240
mysql database so here if we search for

00:43:17,040 --> 00:43:18,960
so you can search for mysql that's

00:43:18,240 --> 00:43:22,079
similar to if you

00:43:18,960 --> 00:43:27,040
are familiar with the npm registry or

00:43:22,079 --> 00:43:30,319
anything else

00:43:27,040 --> 00:43:30,319
hopefully i spelled my skill right

00:43:30,800 --> 00:43:35,359
so here we can look up her roles and uh

00:43:33,839 --> 00:43:36,720
guillen guy has a ton of roles out there

00:43:35,359 --> 00:43:38,640
so i use his mysql

00:43:36,720 --> 00:43:40,079
role occasionally and he has all the

00:43:38,640 --> 00:43:41,599
documentation of all the variables

00:43:40,079 --> 00:43:43,119
he has but at the bottom he kind of

00:43:41,599 --> 00:43:44,400
lists out how you would

00:43:43,119 --> 00:43:46,160
implement this in the playbook and all

00:43:44,400 --> 00:43:54,800
the variables you need so we're going to

00:43:46,160 --> 00:43:55,760
add this to our playbook

00:43:54,800 --> 00:43:57,680
and i'm just going to clean up a little

00:43:55,760 --> 00:43:59,520
bit we don't need the variables uh our

00:43:57,680 --> 00:44:02,160
tv server is called tv server

00:43:59,520 --> 00:44:02,800
and this doesn't need that's all we're

00:44:02,160 --> 00:44:04,560
done so

00:44:02,800 --> 00:44:05,920
just cleaning that up tiny bit then the

00:44:04,560 --> 00:44:08,160
other thing he mentions is that we can

00:44:05,920 --> 00:44:10,480
template all of this out so let's

00:44:08,160 --> 00:44:12,240
in our host bars let's make a new a new

00:44:10,480 --> 00:44:16,240
file working on mysql

00:44:12,240 --> 00:44:22,560
my sql01 slash

00:44:16,240 --> 00:44:23,839
uh mysql.yaml so in here we're going to

00:44:22,560 --> 00:44:27,359
template all this out so we need like

00:44:23,839 --> 00:44:27,359
some kind of super secure password

00:44:28,400 --> 00:44:31,839
so i'm just going to generate a random

00:44:29,839 --> 00:44:34,960
password there

00:44:31,839 --> 00:44:36,319
which uh the tool that i'm using here is

00:44:34,960 --> 00:44:37,280
ansible fault it needs something called

00:44:36,319 --> 00:44:39,119
an encrypt string

00:44:37,280 --> 00:44:41,520
so i'm just typing in a random base64

00:44:39,119 --> 00:44:43,680
password truncating off the uh

00:44:41,520 --> 00:44:44,960
new line there and then typing that into

00:44:43,680 --> 00:44:46,560
ansible vault and string so that's

00:44:44,960 --> 00:44:50,240
how you will make encryptions and

00:44:46,560 --> 00:44:51,920
i'll put the exact thing copy and paste

00:44:50,240 --> 00:44:53,520
since i don't care what the password is

00:44:51,920 --> 00:44:55,040
i just make up a new one

00:44:53,520 --> 00:44:56,640
so now all these things need to match up

00:44:55,040 --> 00:44:58,079
what are we're in our level config so i

00:44:56,640 --> 00:45:02,880
know this is to do

00:44:58,079 --> 00:45:04,560
these don't matter the username is to do

00:45:02,880 --> 00:45:06,880
i'll copy the password here in a second

00:45:04,560 --> 00:45:08,319
but this also needs to be to do

00:45:06,880 --> 00:45:10,560
so i'm going to go to my layer about

00:45:08,319 --> 00:45:13,359
config and this is on the oh no we made

00:45:10,560 --> 00:45:19,839
this directory in the wrong spot

00:45:13,359 --> 00:45:19,839
i cannot move that

00:45:26,960 --> 00:45:33,839
sorry the mysql floor is in the

00:45:30,400 --> 00:45:33,839
web server folder

00:45:41,200 --> 00:45:44,720
oh i guess i don't need to remove that

00:45:42,720 --> 00:45:45,920
there we go

00:45:44,720 --> 00:45:47,599
okay so now if we look at our host bars

00:45:45,920 --> 00:45:48,880
it's mysql and that on several so i'm

00:45:47,599 --> 00:45:50,480
going to go into the laravel here

00:45:48,880 --> 00:45:51,440
and i'm going to copy this database

00:45:50,480 --> 00:45:53,040
password because they're going to be

00:45:51,440 --> 00:45:55,119
identical

00:45:53,040 --> 00:45:57,200
and put that into this role for this uh

00:45:55,119 --> 00:45:58,319
these variables as well

00:45:57,200 --> 00:46:01,119
so that's all the templating we really

00:45:58,319 --> 00:46:04,319
need to do

00:46:01,119 --> 00:46:06,240
and then sorry i kind of flew through my

00:46:04,319 --> 00:46:08,880
notes here i went through install galaxy

00:46:06,240 --> 00:46:10,640
oh we need to add that role to the uh

00:46:08,880 --> 00:46:12,160
requirements file

00:46:10,640 --> 00:46:13,440
so in the requirements file we add the

00:46:12,160 --> 00:46:14,800
roles here and we can list out the

00:46:13,440 --> 00:46:18,000
geeling guy mysql

00:46:14,800 --> 00:46:18,800
which we got from oh actually i guess

00:46:18,000 --> 00:46:20,560
it's in his role

00:46:18,800 --> 00:46:23,440
so he mentions the role name is killing

00:46:20,560 --> 00:46:25,520
mysql so we can just import that role

00:46:23,440 --> 00:46:27,119
so i'll save that yet again for time you

00:46:25,520 --> 00:46:30,400
would run the same

00:46:27,119 --> 00:46:31,680
ansible galaxy command install i already

00:46:30,400 --> 00:46:33,920
did it so i'm not going to run that

00:46:31,680 --> 00:46:33,920
again

00:46:34,800 --> 00:46:39,920
next we need to add our hosts

00:46:38,160 --> 00:46:42,079
so in our hosts file we just want to add

00:46:39,920 --> 00:46:44,400
these the mysql

00:46:42,079 --> 00:46:45,839
server we are going to put that in db

00:46:44,400 --> 00:46:48,800
service group

00:46:45,839 --> 00:46:51,200
uh which again in our playbook we did db

00:46:48,800 --> 00:46:52,880
server so that's gonna

00:46:51,200 --> 00:46:53,760
that's gonna be all the or the the group

00:46:52,880 --> 00:46:54,960
that we're running in so if we have

00:46:53,760 --> 00:46:56,400
multiple servers here and all

00:46:54,960 --> 00:46:59,359
we can pull them all on db service group

00:46:56,400 --> 00:46:59,359
they'll all get the same treatment

00:46:59,920 --> 00:47:04,560
uh we need to run the key scan again

00:47:01,520 --> 00:47:04,560
from the readme

00:47:08,079 --> 00:47:11,839
and we'll grab this ip address

00:47:16,800 --> 00:47:20,960
and then we need to run the amair role

00:47:18,960 --> 00:47:24,960
in order to

00:47:20,960 --> 00:47:26,640
create my user

00:47:24,960 --> 00:47:28,480
alex heads up we're gonna get we'll get

00:47:26,640 --> 00:47:29,839
booted out of here in a little bit

00:47:28,480 --> 00:47:31,520
so i just wanted to make sure you're

00:47:29,839 --> 00:47:33,280
aware um

00:47:31,520 --> 00:47:35,119
we did have one question came up maybe

00:47:33,280 --> 00:47:37,839
you're gonna answer on the fly here

00:47:35,119 --> 00:47:40,960
uh someone asked about is that a ginger

00:47:37,839 --> 00:47:42,880
template syntax

00:47:40,960 --> 00:47:45,440
yes it was i already answered answered

00:47:42,880 --> 00:47:47,680
that the the environment

00:47:45,440 --> 00:47:49,520
no it's fine yeah the env file was a

00:47:47,680 --> 00:47:54,160
ginger ginger to syntax which is a

00:47:49,520 --> 00:47:54,160
python templating language okay

00:47:58,079 --> 00:48:03,440
so this is uh not sure if you saw up

00:48:00,400 --> 00:48:03,440
here we're running

00:48:03,760 --> 00:48:08,160
uh just enabling password this is all

00:48:05,280 --> 00:48:09,440
the stuff that i've done before

00:48:08,160 --> 00:48:10,880
uh that i showed you guys before which

00:48:09,440 --> 00:48:13,680
is creating my user so the next thing

00:48:10,880 --> 00:48:15,040
that we are going to do

00:48:13,680 --> 00:48:16,720
uh is we need to actually since we're

00:48:15,040 --> 00:48:17,200
going to use the firewall role again we

00:48:16,720 --> 00:48:20,640
need to

00:48:17,200 --> 00:48:23,599
add a firewall and we're just going to

00:48:20,640 --> 00:48:24,960
enable the mysql service

00:48:23,599 --> 00:48:28,640
and i am right at the end of my notes

00:48:24,960 --> 00:48:30,000
here gi so hopefully this goes quickly

00:48:28,640 --> 00:48:31,839
so now we're going to run this entire

00:48:30,000 --> 00:48:33,119
playbook so the playbook we're running

00:48:31,839 --> 00:48:34,640
is with the hosts we're limiting it to

00:48:33,119 --> 00:48:35,920
just the mysql zero one so if you run

00:48:34,640 --> 00:48:37,280
the playbook without limiting the host

00:48:35,920 --> 00:48:38,240
it will run against all hosts so we'll

00:48:37,280 --> 00:48:40,960
also run it again

00:48:38,240 --> 00:48:42,400
against the web server zero one uh but

00:48:40,960 --> 00:48:43,119
we're just running the whole playbook so

00:48:42,400 --> 00:48:45,280
for the

00:48:43,119 --> 00:48:46,240
mysql host it will run all and then it

00:48:45,280 --> 00:48:47,440
is part of the db

00:48:46,240 --> 00:48:48,720
service group so run this so we're going

00:48:47,440 --> 00:48:50,000
to run common we're going to run the

00:48:48,720 --> 00:48:51,119
firewall then we're going to run this

00:48:50,000 --> 00:48:54,319
gearing guy

00:48:51,119 --> 00:48:54,319
mysql role

00:48:57,839 --> 00:49:01,200
and alex there's one more one more

00:48:59,599 --> 00:49:03,760
question came up here

00:49:01,200 --> 00:49:05,119
will you have notes or roles anything

00:49:03,760 --> 00:49:07,040
available like a github

00:49:05,119 --> 00:49:08,480
uh yeah sure i'll uh i can upload these

00:49:07,040 --> 00:49:12,240
to github i'll

00:49:08,480 --> 00:49:13,839
put the password for all the um

00:49:12,240 --> 00:49:17,040
all the encrypted stuff in the in the

00:49:13,839 --> 00:49:21,359
read me and i'll upload it to my github

00:49:17,040 --> 00:49:21,359
okay there you go

00:49:26,319 --> 00:49:29,359
and that's my github in case anybody

00:49:27,839 --> 00:49:31,200
wants to check that out i'll probably

00:49:29,359 --> 00:49:34,000
call this like cpos 2020

00:49:31,200 --> 00:49:35,040
ansible demo or something so you notice

00:49:34,000 --> 00:49:36,720
all these the task

00:49:35,040 --> 00:49:38,319
names the task that it's running so it's

00:49:36,720 --> 00:49:39,760
running from the gear the guy mysql

00:49:38,319 --> 00:49:40,160
verifying mysql so you can see like

00:49:39,760 --> 00:49:42,800
which

00:49:40,160 --> 00:49:43,760
role it's running from which is super

00:49:42,800 --> 00:49:45,280
helpful which is why

00:49:43,760 --> 00:49:48,160
for some things like uh installing

00:49:45,280 --> 00:49:50,319
software in some of these roles

00:49:48,160 --> 00:49:51,680
i just called it like install software

00:49:50,319 --> 00:49:53,280
because it will say firewall

00:49:51,680 --> 00:49:54,800
colon installing software and you kind

00:49:53,280 --> 00:49:56,160
of know what that what that is you don't

00:49:54,800 --> 00:49:57,359
want to say like installing firewall d

00:49:56,160 --> 00:49:58,319
unless you have a bunch of installing

00:49:57,359 --> 00:49:59,520
softwares in here

00:49:58,319 --> 00:50:01,680
which this is a list so you can install

00:49:59,520 --> 00:50:04,160
any software you want but i just kind of

00:50:01,680 --> 00:50:06,720
list it out

00:50:04,160 --> 00:50:08,000
um i just call it a little bit more

00:50:06,720 --> 00:50:08,960
generic things because it looks prettier

00:50:08,000 --> 00:50:12,079
here like it you know

00:50:08,960 --> 00:50:14,160
instead of saying what like i don't know

00:50:12,079 --> 00:50:15,760
configure your application uh you know

00:50:14,160 --> 00:50:17,599
you don't have to say like on mysql

00:50:15,760 --> 00:50:20,319
because it's obviously in a mysql role

00:50:17,599 --> 00:50:20,800
so you can see that that finished on the

00:50:20,319 --> 00:50:22,640
uh

00:50:20,800 --> 00:50:24,880
web server i'm going to see the database

00:50:22,640 --> 00:50:26,640
so it has some stuff

00:50:24,880 --> 00:50:29,440
and if we refresh this we can see hey we

00:50:26,640 --> 00:50:29,440
got the login prompts

00:50:29,680 --> 00:50:33,520
yeah like someone just asked what window

00:50:31,359 --> 00:50:36,480
manager are you using here

00:50:33,520 --> 00:50:37,040
uh display uh this is called i3 so i'm

00:50:36,480 --> 00:50:39,760
on

00:50:37,040 --> 00:50:42,720
linux and uh the window manager i'm

00:50:39,760 --> 00:50:42,720
using is called i3

00:50:48,559 --> 00:50:52,400
and so you can see that it puts things

00:50:50,079 --> 00:50:53,920
in database so if we need to create a

00:50:52,400 --> 00:50:54,640
whole new server that did all of this

00:50:53,920 --> 00:50:56,000
stuff

00:50:54,640 --> 00:50:58,480
we could just rerun these roles against

00:50:56,000 --> 00:51:00,400
a new set we could just insert new hosts

00:50:58,480 --> 00:51:02,079
in the host file rerunning is a whole

00:51:00,400 --> 00:51:04,720
new suite so if we wanted to make a

00:51:02,079 --> 00:51:05,680
dev test in production we just do that

00:51:04,720 --> 00:51:07,680
all again

00:51:05,680 --> 00:51:09,200
create a new host file called production

00:51:07,680 --> 00:51:10,800
put new hosts in it and just rerun all

00:51:09,200 --> 00:51:12,400
of these exact same playbooks obviously

00:51:10,800 --> 00:51:14,079
we need new variables

00:51:12,400 --> 00:51:14,960
uh but you make new variables for them

00:51:14,079 --> 00:51:16,240
and that's all you have to do going

00:51:14,960 --> 00:51:17,119
forward like these roles are super

00:51:16,240 --> 00:51:18,559
reusable

00:51:17,119 --> 00:51:19,520
so that's kind of the power of engine x

00:51:18,559 --> 00:51:20,640
i'm glad that i got here because i

00:51:19,520 --> 00:51:21,839
didn't want to have to be halfway

00:51:20,640 --> 00:51:23,040
through the demo and just be like oh

00:51:21,839 --> 00:51:31,119
we're done and you know i don't take a

00:51:23,040 --> 00:51:31,119

YouTube URL: https://www.youtube.com/watch?v=LwOlZvLYwQ4


