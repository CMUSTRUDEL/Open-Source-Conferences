Title: [OLF 2020] Delta Ansible: Keeping up with Changes and Deprecations
Publication date: 2020-12-08
Playlist: 2020 Videos
Description: 
	Speaker: Andrew Cziryak
Updated for 2020! Including: Demystifying Collections, Evaluating Bare Conditionals, and what to expect for Ansiblefest 2020!
Ansible is a very well known tool that is now owned and maintained by Red Hat 
that simplifies configuration management. In recent years,
 its development has been fast-paced and has frequent iterations and new feature releases. 


Despite the benefits that this brings, it has made it hard for sysadmins and devops teams to keep up with the latest best practices, deprecations, and the newest features. Starting from the 2.0 release, I will walk through select features that have undergone significant changes and deprecations from a sysadmin’s perspective with the intent of providing easy-to-implement upgrade strategies. Additionally, I will outline what is required for a minimal integration testing environment, mentioning the pitfalls and gotchas that I’ve run into on the way, in order to provide a path for ongoing upkeep and maintenance. All this, of course, always pointing back to the release notes.
Captions: 
	00:00:03,120 --> 00:00:05,520
yeah today i'm here to talk about

00:00:04,720 --> 00:00:06,799
ansible

00:00:05,520 --> 00:00:10,400
um so let me go ahead and share my

00:00:06,799 --> 00:00:10,400
screen and we'll get on with that

00:00:12,719 --> 00:00:16,800
yeah so today my talk is uh delta

00:00:14,799 --> 00:00:18,000
ansible keeping up with changes and

00:00:16,800 --> 00:00:19,760
deprecations

00:00:18,000 --> 00:00:22,320
as rafiq introduced me my name is andrew

00:00:19,760 --> 00:00:23,279
syriak i'm an infrastructure architect

00:00:22,320 --> 00:00:25,279
today i'm here representing

00:00:23,279 --> 00:00:27,199
compositional enterprises i also do work

00:00:25,279 --> 00:00:28,240
at oclc not representing them today

00:00:27,199 --> 00:00:30,080
though

00:00:28,240 --> 00:00:32,480
so this is not an introduction to

00:00:30,080 --> 00:00:34,719
ansible talk uh this is

00:00:32,480 --> 00:00:35,520
what you would need to know if you did

00:00:34,719 --> 00:00:37,680
your research

00:00:35,520 --> 00:00:38,640
at the big change over from ansible 1.9

00:00:37,680 --> 00:00:40,239
to 2.0

00:00:38,640 --> 00:00:43,040
and never really looked at the details

00:00:40,239 --> 00:00:43,520
again so let's let's go ahead and dive

00:00:43,040 --> 00:00:46,160
in

00:00:43,520 --> 00:00:48,239
um a bit of an overview here i'm going

00:00:46,160 --> 00:00:49,360
to touch on on three major sections

00:00:48,239 --> 00:00:51,520
first the

00:00:49,360 --> 00:00:53,600
velocity section then the currency and

00:00:51,520 --> 00:00:55,520
then the sustainability

00:00:53,600 --> 00:00:58,719
so the velocity section i want to go

00:00:55,520 --> 00:01:01,199
over what ansible provides for us

00:00:58,719 --> 00:01:02,960
where they they show us in what

00:01:01,199 --> 00:01:05,199
direction they're heading right and and

00:01:02,960 --> 00:01:07,760
the magnitude to which they are

00:01:05,199 --> 00:01:09,040
for currency i'm not talking about

00:01:07,760 --> 00:01:10,479
dollars or bitcoin here

00:01:09,040 --> 00:01:12,080
i'm talking about what does it take to

00:01:10,479 --> 00:01:14,159
get us up to

00:01:12,080 --> 00:01:15,200
where antsville is current right and how

00:01:14,159 --> 00:01:16,880
do we stay there

00:01:15,200 --> 00:01:18,240
and sustainability will really drive

00:01:16,880 --> 00:01:20,479
that home with what

00:01:18,240 --> 00:01:22,400
things can we implement in order to stay

00:01:20,479 --> 00:01:24,080
on top of the changes and deprecations

00:01:22,400 --> 00:01:25,920
in ansible

00:01:24,080 --> 00:01:27,840
so to kick that off uh let's start with

00:01:25,920 --> 00:01:28,560
velocity which as we all know is how

00:01:27,840 --> 00:01:30,560
quickly and

00:01:28,560 --> 00:01:33,280
which direction so let's let's go ahead

00:01:30,560 --> 00:01:35,280
and set our pace with that discussion

00:01:33,280 --> 00:01:36,960
um there are a couple things that

00:01:35,280 --> 00:01:39,520
ansible provides to us

00:01:36,960 --> 00:01:41,360
to keep up with what they're doing and

00:01:39,520 --> 00:01:44,799
to to be transparent

00:01:41,360 --> 00:01:47,600
um mainly what we need to be focused on

00:01:44,799 --> 00:01:48,159
we as as systems and administrators

00:01:47,600 --> 00:01:50,880
mainly

00:01:48,159 --> 00:01:53,119
right and and anyone really who else is

00:01:50,880 --> 00:01:55,040
is needing to to work with ansible

00:01:53,119 --> 00:01:56,719
it's going to be mainly minor versions

00:01:55,040 --> 00:01:59,439
that make the difference

00:01:56,719 --> 00:02:01,200
so they they are going to be introducing

00:01:59,439 --> 00:02:03,759
a lot of the the new fixes

00:02:01,200 --> 00:02:05,600
um into minor versions and and this does

00:02:03,759 --> 00:02:07,759
follow semantic versioning so

00:02:05,600 --> 00:02:09,679
2 dot x being two being the major

00:02:07,759 --> 00:02:11,360
version and x being the minor version

00:02:09,679 --> 00:02:14,400
so every time they increment that they

00:02:11,360 --> 00:02:16,400
will have release notes

00:02:14,400 --> 00:02:18,720
that that go along with all of those

00:02:16,400 --> 00:02:20,640
releases to give us information as to

00:02:18,720 --> 00:02:22,160
what is being provided to us in this new

00:02:20,640 --> 00:02:24,480
version of ansible

00:02:22,160 --> 00:02:26,720
and i'll get to that in a second here

00:02:24,480 --> 00:02:27,920
just to set the pace here the new stable

00:02:26,720 --> 00:02:30,080
version

00:02:27,920 --> 00:02:32,319
which would be that new minor version is

00:02:30,080 --> 00:02:32,800
released at a pace of about every six

00:02:32,319 --> 00:02:34,720
months

00:02:32,800 --> 00:02:35,920
now most recently with the release of

00:02:34,720 --> 00:02:37,840
2.10

00:02:35,920 --> 00:02:40,000
they did miss that goal i believe that's

00:02:37,840 --> 00:02:42,560
still in beta right now

00:02:40,000 --> 00:02:44,400
but they they do aim towards about every

00:02:42,560 --> 00:02:44,959
six months releasing a new stable

00:02:44,400 --> 00:02:47,519
version

00:02:44,959 --> 00:02:48,239
stable minor version of ansible and if

00:02:47,519 --> 00:02:50,480
we go

00:02:48,239 --> 00:02:51,440
through the the list here that i have up

00:02:50,480 --> 00:02:54,239
on the screen

00:02:51,440 --> 00:02:58,080
we can see exactly which minor versions

00:02:54,239 --> 00:03:00,560
get which support ansible actually only

00:02:58,080 --> 00:03:01,840
maintains the latest three stable

00:03:00,560 --> 00:03:04,879
versions so at this

00:03:01,840 --> 00:03:07,040
that this snapshot they were maintaining

00:03:04,879 --> 00:03:08,480
2.8 2.9 and 2.10

00:03:07,040 --> 00:03:10,720
so those were considered the stable

00:03:08,480 --> 00:03:13,040
versions 2.10

00:03:10,720 --> 00:03:16,159
obviously is is still in the the alpha

00:03:13,040 --> 00:03:18,560
beta phase and it's getting all the new

00:03:16,159 --> 00:03:19,360
new updates and and fixes and stuff so

00:03:18,560 --> 00:03:21,440
that would be

00:03:19,360 --> 00:03:24,319
that would be the most heaviest uh

00:03:21,440 --> 00:03:27,120
change uh the the most change heavy

00:03:24,319 --> 00:03:28,000
of all the the minor version releases

00:03:27,120 --> 00:03:29,840
2.9

00:03:28,000 --> 00:03:31,200
is getting a lot it's getting security

00:03:29,840 --> 00:03:33,200
and general bug fixes

00:03:31,200 --> 00:03:34,400
but any kind of new feature or any kind

00:03:33,200 --> 00:03:36,080
of feature tweak

00:03:34,400 --> 00:03:37,680
isn't necessarily getting into that

00:03:36,080 --> 00:03:39,200
minor version so you're still fairly

00:03:37,680 --> 00:03:42,159
stable and fairly

00:03:39,200 --> 00:03:43,680
supported on that version 2.8 being the

00:03:42,159 --> 00:03:46,159
third release back

00:03:43,680 --> 00:03:48,080
that is only getting security updates

00:03:46,159 --> 00:03:52,319
it's not getting any kind of bug fixes

00:03:48,080 --> 00:03:52,319
it's not get getting any kind of

00:03:53,519 --> 00:03:57,040
advantages there it's just getting the

00:03:55,760 --> 00:03:58,640
the security fixes

00:03:57,040 --> 00:04:00,480
and then everything else beyond that is

00:03:58,640 --> 00:04:02,480
actually end of life

00:04:00,480 --> 00:04:04,879
so if you're running any of those older

00:04:02,480 --> 00:04:07,040
versions as you go forward

00:04:04,879 --> 00:04:08,480
those will be unmaintained if there's

00:04:07,040 --> 00:04:10,480
anything that's on earth or

00:04:08,480 --> 00:04:12,000
or any security vulnerability that comes

00:04:10,480 --> 00:04:13,200
into play there you're gonna have to

00:04:12,000 --> 00:04:15,040
bump up to the latest

00:04:13,200 --> 00:04:17,439
supported version in order to get those

00:04:15,040 --> 00:04:17,439
fixes

00:04:18,079 --> 00:04:21,280
another thing that ansible provides us

00:04:19,759 --> 00:04:23,440
are the road maps

00:04:21,280 --> 00:04:24,400
uh the roadmaps show us you know what's

00:04:23,440 --> 00:04:26,560
what's ahead of us

00:04:24,400 --> 00:04:28,400
you know and ansible kind of kind of

00:04:26,560 --> 00:04:31,840
tries to fit everything in there

00:04:28,400 --> 00:04:34,160
since uh since 2.10 though

00:04:31,840 --> 00:04:35,759
road maps have actually been broken into

00:04:34,160 --> 00:04:40,240
ansible core

00:04:35,759 --> 00:04:43,280
and ansible uh the the

00:04:40,240 --> 00:04:45,360
engine itself so we will go into talking

00:04:43,280 --> 00:04:48,160
about collections in a second here and

00:04:45,360 --> 00:04:49,759
and the change that that introduced but

00:04:48,160 --> 00:04:50,880
there are road maps that show us kind of

00:04:49,759 --> 00:04:53,280
what's coming up next

00:04:50,880 --> 00:04:54,000
it's grouped into each minor version

00:04:53,280 --> 00:04:55,600
release

00:04:54,000 --> 00:04:57,360
as we talked about the minor versions

00:04:55,600 --> 00:04:58,720
are really where all the big changes are

00:04:57,360 --> 00:05:02,240
going to be happening

00:04:58,720 --> 00:05:05,039
um the releases get get dated and and

00:05:02,240 --> 00:05:06,160
categorized um and and these go back all

00:05:05,039 --> 00:05:09,039
the way to the 2.

00:05:06,160 --> 00:05:09,680
2.0 release so if you want a historical

00:05:09,039 --> 00:05:12,240
view

00:05:09,680 --> 00:05:13,600
of what's been changed or say you have

00:05:12,240 --> 00:05:14,400
an implementation where you're kind of

00:05:13,600 --> 00:05:15,840
stuck on

00:05:14,400 --> 00:05:17,680
running an older version you want to get

00:05:15,840 --> 00:05:18,080
it up to date you'll have all those road

00:05:17,680 --> 00:05:19,199
maps

00:05:18,080 --> 00:05:21,199
that will show you what's been

00:05:19,199 --> 00:05:22,000
implemented in the previous version so

00:05:21,199 --> 00:05:25,199
you can almost step

00:05:22,000 --> 00:05:27,600
through those updates if you will

00:05:25,199 --> 00:05:29,120
so and and you know taking it straight

00:05:27,600 --> 00:05:32,000
from their documentation

00:05:29,120 --> 00:05:34,160
each roadmap offers a best guess based

00:05:32,000 --> 00:05:36,160
on the ansible team's experience

00:05:34,160 --> 00:05:38,320
and on requests and feedback from the

00:05:36,160 --> 00:05:39,360
community of what will be included in a

00:05:38,320 --> 00:05:40,960
given release

00:05:39,360 --> 00:05:43,280
so they they are continually it's a

00:05:40,960 --> 00:05:45,039
living document they're continually

00:05:43,280 --> 00:05:47,680
changing these and updating them making

00:05:45,039 --> 00:05:49,840
sure they're up to date

00:05:47,680 --> 00:05:51,840
the next and i would say most important

00:05:49,840 --> 00:05:53,280
thing here are the porting guides so we

00:05:51,840 --> 00:05:55,280
talked about the road maps and

00:05:53,280 --> 00:05:56,319
what features would be included the

00:05:55,280 --> 00:05:59,280
porting guides

00:05:56,319 --> 00:06:00,720
are for us for the community for how to

00:05:59,280 --> 00:06:03,039
implement these features

00:06:00,720 --> 00:06:04,639
right they show us how to remediate as

00:06:03,039 --> 00:06:06,000
well as take advantage of new

00:06:04,639 --> 00:06:08,160
functionality of playbooks

00:06:06,000 --> 00:06:10,479
right it personally it's how i stay up

00:06:08,160 --> 00:06:11,360
to date on what the latest way to do

00:06:10,479 --> 00:06:13,600
something is

00:06:11,360 --> 00:06:15,680
right so there there are a couple

00:06:13,600 --> 00:06:19,120
sections that they'll typically include

00:06:15,680 --> 00:06:21,039
one is going to be the the the playbook

00:06:19,120 --> 00:06:22,960
changes any changes that were made to

00:06:21,039 --> 00:06:26,080
the command line client

00:06:22,960 --> 00:06:29,520
any kind of deprecations module changes

00:06:26,080 --> 00:06:30,720
additions any any plugins and and custom

00:06:29,520 --> 00:06:33,680
scripts so even

00:06:30,720 --> 00:06:34,720
even i they don't guarantee their their

00:06:33,680 --> 00:06:36,479
uh

00:06:34,720 --> 00:06:38,240
internal code to be consistent right

00:06:36,479 --> 00:06:38,800
they they kind of mold it as they need

00:06:38,240 --> 00:06:41,120
to

00:06:38,800 --> 00:06:43,280
but anything uh big like callback

00:06:41,120 --> 00:06:44,000
scripts or or any other kind of plugins

00:06:43,280 --> 00:06:45,680
that would

00:06:44,000 --> 00:06:47,280
be necessary they'll give you a little

00:06:45,680 --> 00:06:48,319
hint as to if something really big

00:06:47,280 --> 00:06:50,319
changed so

00:06:48,319 --> 00:06:52,240
they're pretty good about doing that and

00:06:50,319 --> 00:06:54,240
they really learned that from the 1.9 to

00:06:52,240 --> 00:06:54,720
2.0 release if anyone was back in that

00:06:54,240 --> 00:06:57,199
time

00:06:54,720 --> 00:06:58,479
there was a really really huge jump in

00:06:57,199 --> 00:07:01,520
functionality

00:06:58,479 --> 00:07:02,080
that broke just a lot of things so at

00:07:01,520 --> 00:07:03,520
this point

00:07:02,080 --> 00:07:05,120
they're they're really covering their

00:07:03,520 --> 00:07:07,599
tails here and making sure

00:07:05,120 --> 00:07:08,800
that they they be as transparent as they

00:07:07,599 --> 00:07:10,560
possibly can so

00:07:08,800 --> 00:07:12,639
so the porting guides are just an

00:07:10,560 --> 00:07:15,280
excellent uh opportunity to take

00:07:12,639 --> 00:07:17,039
advantage of that transparency right

00:07:15,280 --> 00:07:18,720
deprecations are very important in

00:07:17,039 --> 00:07:19,520
ansible because if something is

00:07:18,720 --> 00:07:21,120
deprecated

00:07:19,520 --> 00:07:23,199
it obviously it's not going to be

00:07:21,120 --> 00:07:25,440
available but let's walk through

00:07:23,199 --> 00:07:27,520
how they deprecate something so the

00:07:25,440 --> 00:07:29,199
first thing that happens

00:07:27,520 --> 00:07:31,039
uh if they're going to deprecate

00:07:29,199 --> 00:07:32,319
something is that a feature is marked as

00:07:31,039 --> 00:07:34,319
deprecated

00:07:32,319 --> 00:07:36,160
accompanied by warnings to the user when

00:07:34,319 --> 00:07:39,280
you're actually running ansible

00:07:36,160 --> 00:07:39,919
any alternatives to switch to and a

00:07:39,280 --> 00:07:41,759
release

00:07:39,919 --> 00:07:43,680
when the feature will be removed

00:07:41,759 --> 00:07:44,560
indefinitely so they'll give you plenty

00:07:43,680 --> 00:07:46,720
of heads up

00:07:44,560 --> 00:07:48,800
and they'll give you plenty of resources

00:07:46,720 --> 00:07:52,240
in order to

00:07:48,800 --> 00:07:53,840
remediate that and and when the feature

00:07:52,240 --> 00:07:56,080
will be removed indefinitely

00:07:53,840 --> 00:07:58,319
is in the fourth feature release so the

00:07:56,080 --> 00:08:00,160
fourth minor version release after the

00:07:58,319 --> 00:08:01,840
deprecation was posted

00:08:00,160 --> 00:08:03,919
they will actually remove that version

00:08:01,840 --> 00:08:05,440
so if you consider that a minor version

00:08:03,919 --> 00:08:08,639
comes out every six months

00:08:05,440 --> 00:08:11,039
you'll have more or less two years

00:08:08,639 --> 00:08:12,479
before you will need to remediate that

00:08:11,039 --> 00:08:14,879
deprecation which is

00:08:12,479 --> 00:08:16,319
not a not a bad time frame right it's

00:08:14,879 --> 00:08:18,400
something you know obviously if you get

00:08:16,319 --> 00:08:19,840
comfortable with with the functionality

00:08:18,400 --> 00:08:21,919
you're not looking at it you're not

00:08:19,840 --> 00:08:23,440
monitoring these deprecations you may be

00:08:21,919 --> 00:08:24,560
surprised by it but if you're able to

00:08:23,440 --> 00:08:26,400
stay on top of it

00:08:24,560 --> 00:08:27,599
they do give you enough time to address

00:08:26,400 --> 00:08:30,080
it

00:08:27,599 --> 00:08:31,919
for example you know something in in 2.5

00:08:30,080 --> 00:08:32,479
something that's separated in 2.5 will

00:08:31,919 --> 00:08:35,680
be

00:08:32,479 --> 00:08:38,479
removed in 2.9

00:08:35,680 --> 00:08:39,200
so let me touch on a couple of major

00:08:38,479 --> 00:08:42,000
changes

00:08:39,200 --> 00:08:43,519
that have made a difference in my life

00:08:42,000 --> 00:08:44,720
working with ansible

00:08:43,519 --> 00:08:46,640
and i'm just going to run through these

00:08:44,720 --> 00:08:48,480
really quick it'd be easier if i had

00:08:46,640 --> 00:08:49,680
like demo code and could show you what

00:08:48,480 --> 00:08:52,640
the difference is here but we're not

00:08:49,680 --> 00:08:55,120
going to go into that depth today

00:08:52,640 --> 00:08:57,040
just a couple things to touch on here uh

00:08:55,120 --> 00:08:59,519
the fact that blocks could have names in

00:08:57,040 --> 00:09:01,040
uh 2.3 right that was big because

00:08:59,519 --> 00:09:02,640
in ansible you want to name everything

00:09:01,040 --> 00:09:03,920
it's it's like their internal comment

00:09:02,640 --> 00:09:05,200
system if you don't comment something

00:09:03,920 --> 00:09:06,880
you don't know what it does

00:09:05,200 --> 00:09:09,360
so if you can't name something that's

00:09:06,880 --> 00:09:12,800
that's going to be a huge disability so

00:09:09,360 --> 00:09:14,399
uh being able to name blocks was was a

00:09:12,800 --> 00:09:17,120
good step forward there

00:09:14,399 --> 00:09:18,480
um the next one was two dots python 2.6

00:09:17,120 --> 00:09:20,800
was actually required on

00:09:18,480 --> 00:09:22,000
on the targets servers if you're just

00:09:20,800 --> 00:09:25,279
talking about regular linux

00:09:22,000 --> 00:09:27,120
servers starting at 2.4 and beyond

00:09:25,279 --> 00:09:28,720
um this broke backwards compatibility

00:09:27,120 --> 00:09:31,839
when you're talking about working with

00:09:28,720 --> 00:09:33,600
centos 5 and and older

00:09:31,839 --> 00:09:35,519
that's been end of life for several

00:09:33,600 --> 00:09:36,000
years now so why you're still working

00:09:35,519 --> 00:09:38,080
with that

00:09:36,000 --> 00:09:39,920
i mean it's it needs to start being a

00:09:38,080 --> 00:09:41,600
business decision at that point

00:09:39,920 --> 00:09:43,519
but ansible is going to force the issue

00:09:41,600 --> 00:09:46,399
as well and make that also a

00:09:43,519 --> 00:09:47,440
a tooling discussion because ansible is

00:09:46,399 --> 00:09:52,000
not supporting

00:09:47,440 --> 00:09:55,200
those with older python versions only

00:09:52,000 --> 00:09:55,600
migrating from with x to loop so if

00:09:55,200 --> 00:09:56,880
you're

00:09:55,600 --> 00:09:58,880
if you need to loop over something

00:09:56,880 --> 00:09:59,760
enanciable the old way to do it prior to

00:09:58,880 --> 00:10:02,160
2.4

00:09:59,760 --> 00:10:03,040
was with items basically and they

00:10:02,160 --> 00:10:05,760
migrated that

00:10:03,040 --> 00:10:06,560
to using loops which was which was nice

00:10:05,760 --> 00:10:08,560
and to get into

00:10:06,560 --> 00:10:10,880
internal baseball here they wanted to

00:10:08,560 --> 00:10:13,519
use more of the ginger filters

00:10:10,880 --> 00:10:13,920
when it came to looping over stuff so

00:10:13,519 --> 00:10:16,079
loop

00:10:13,920 --> 00:10:17,519
actually implements that that

00:10:16,079 --> 00:10:20,399
interpolation

00:10:17,519 --> 00:10:22,079
within the loop so so you can you can

00:10:20,399 --> 00:10:22,560
loop through something and you can pass

00:10:22,079 --> 00:10:24,880
a

00:10:22,560 --> 00:10:26,480
variable into a ginger filter and that

00:10:24,880 --> 00:10:29,200
will perform

00:10:26,480 --> 00:10:30,160
what the with items or with sub elements

00:10:29,200 --> 00:10:31,839
or whatever

00:10:30,160 --> 00:10:34,240
one of the the with commands did

00:10:31,839 --> 00:10:37,040
previously

00:10:34,240 --> 00:10:37,680
uh and then skipping skipping the rest

00:10:37,040 --> 00:10:40,399
of these

00:10:37,680 --> 00:10:42,240
the the most major one to come out

00:10:40,399 --> 00:10:43,920
recently was ansible collections now

00:10:42,240 --> 00:10:46,959
this was actually released

00:10:43,920 --> 00:10:48,800
in 2.9 so this is available

00:10:46,959 --> 00:10:50,959
as a minor release already and has been

00:10:48,800 --> 00:10:53,360
for the past couple of months

00:10:50,959 --> 00:10:55,040
ansible collections splits up the

00:10:53,360 --> 00:10:57,519
modules from the actual

00:10:55,040 --> 00:10:58,399
core engine of the program what actually

00:10:57,519 --> 00:11:01,680
runs the

00:10:58,399 --> 00:11:04,399
the code on the remotes so

00:11:01,680 --> 00:11:07,040
the the the collections if i could just

00:11:04,399 --> 00:11:10,000
stop and touch on that for a bit

00:11:07,040 --> 00:11:11,600
benefits the broader community in that

00:11:10,000 --> 00:11:14,320
anyone can write

00:11:11,600 --> 00:11:15,519
their own custom modules and not have to

00:11:14,320 --> 00:11:17,920
have them included

00:11:15,519 --> 00:11:18,800
in the ansible core team's release of

00:11:17,920 --> 00:11:20,800
ansible right

00:11:18,800 --> 00:11:22,720
the ansible core team's really spansable

00:11:20,800 --> 00:11:24,959
is now just the engine part of it

00:11:22,720 --> 00:11:26,800
any kind of module or custom python code

00:11:24,959 --> 00:11:27,600
or anything else that can be run on the

00:11:26,800 --> 00:11:29,360
remote

00:11:27,600 --> 00:11:31,680
that can be written separately and

00:11:29,360 --> 00:11:32,560
brought in via the connect collection

00:11:31,680 --> 00:11:34,480
system

00:11:32,560 --> 00:11:36,640
to any intel implementation that you're

00:11:34,480 --> 00:11:38,240
running that's that's really great if

00:11:36,640 --> 00:11:40,560
you want to write custom modules

00:11:38,240 --> 00:11:42,399
it's really bad if you need to

00:11:40,560 --> 00:11:44,560
transition into 2.10 which is where the

00:11:42,399 --> 00:11:48,000
majority of the community is now

00:11:44,560 --> 00:11:49,200
for the typical the file module the line

00:11:48,000 --> 00:11:51,440
and file module

00:11:49,200 --> 00:11:52,560
the shell module all of that that's not

00:11:51,440 --> 00:11:56,240
going to require any

00:11:52,560 --> 00:11:58,480
rewriting however the the

00:11:56,240 --> 00:12:00,720
third-party supplied modules like if

00:11:58,480 --> 00:12:02,160
you're doing network stuff with f5

00:12:00,720 --> 00:12:04,959
right or you're doing stuff with

00:12:02,160 --> 00:12:07,920
digitalocean those are going to be now

00:12:04,959 --> 00:12:10,079
third-party curated collections that

00:12:07,920 --> 00:12:12,720
you're going to need to import

00:12:10,079 --> 00:12:15,120
now a raw install of ansible will import

00:12:12,720 --> 00:12:16,959
those all initially for you

00:12:15,120 --> 00:12:19,040
but you're going to want to take a look

00:12:16,959 --> 00:12:21,839
at your code to see if you need to

00:12:19,040 --> 00:12:24,160
update them and i'm i'm not going to go

00:12:21,839 --> 00:12:25,920
deep into collections today but

00:12:24,160 --> 00:12:27,920
while it does allow third-party

00:12:25,920 --> 00:12:30,240
developers to have a lot easier way to

00:12:27,920 --> 00:12:32,880
to bring in their stuff

00:12:30,240 --> 00:12:35,279
it may require some updating code and

00:12:32,880 --> 00:12:38,800
module naming conventions

00:12:35,279 --> 00:12:40,880
in order to to make sure that that still

00:12:38,800 --> 00:12:42,800
works going into 210 and beyond so

00:12:40,880 --> 00:12:44,320
so keep an eye out for that i might dive

00:12:42,800 --> 00:12:45,920
into that later even

00:12:44,320 --> 00:12:48,560
either later this year if i give another

00:12:45,920 --> 00:12:50,639
talk uh or maybe even next year i

00:12:48,560 --> 00:12:52,560
i bet i could fill up a entire talk

00:12:50,639 --> 00:12:53,760
about collections so i'm gonna leave it

00:12:52,560 --> 00:12:56,639
at that for the time being

00:12:53,760 --> 00:12:57,200
and we're gonna transition into currency

00:12:56,639 --> 00:12:59,120
which is

00:12:57,200 --> 00:13:00,720
how to catch up right if if you're on an

00:12:59,120 --> 00:13:02,720
older version of ansible

00:13:00,720 --> 00:13:04,560
what would be required in order to get

00:13:02,720 --> 00:13:07,519
you to be current

00:13:04,560 --> 00:13:08,320
right so i i love this picture i found

00:13:07,519 --> 00:13:09,600
this picture

00:13:08,320 --> 00:13:11,279
a while ago and i think it just

00:13:09,600 --> 00:13:12,720
illustrates the point perfectly so so if

00:13:11,279 --> 00:13:14,639
we take a look at this guy

00:13:12,720 --> 00:13:15,920
right he's he's obviously driving an old

00:13:14,639 --> 00:13:19,279
whatever model t

00:13:15,920 --> 00:13:21,279
to work and he you know

00:13:19,279 --> 00:13:22,639
it's a vast improvement over what he had

00:13:21,279 --> 00:13:24,320
available to him

00:13:22,639 --> 00:13:25,600
otherwise you know it'd either be you

00:13:24,320 --> 00:13:26,480
know some other form of transportation

00:13:25,600 --> 00:13:28,320
so like a

00:13:26,480 --> 00:13:29,760
horse or something or you know just just

00:13:28,320 --> 00:13:32,079
walking to work right so

00:13:29,760 --> 00:13:34,320
it's it's definitely an improvement over

00:13:32,079 --> 00:13:36,160
his alternatives at the time but there

00:13:34,320 --> 00:13:36,720
was a lot of room for additional

00:13:36,160 --> 00:13:39,040
improvement

00:13:36,720 --> 00:13:40,399
right so like if you'll note the the

00:13:39,040 --> 00:13:43,120
distinct lack

00:13:40,399 --> 00:13:44,560
of seat belts or or doors or an

00:13:43,120 --> 00:13:47,040
automatic transmission

00:13:44,560 --> 00:13:48,240
right so there's there's a lot that you

00:13:47,040 --> 00:13:50,720
can improve but

00:13:48,240 --> 00:13:52,399
someone had said you know what you know

00:13:50,720 --> 00:13:54,000
i could probably stop

00:13:52,399 --> 00:13:55,519
all of the bugs from getting in my face

00:13:54,000 --> 00:13:56,800
if i put up a windshield

00:13:55,519 --> 00:13:58,560
right so so they made that little

00:13:56,800 --> 00:14:00,560
improvement they're like okay okay let's

00:13:58,560 --> 00:14:01,920
let's add a windshield first and then

00:14:00,560 --> 00:14:02,639
get to all the other things down the

00:14:01,920 --> 00:14:04,079
road

00:14:02,639 --> 00:14:05,839
uh and that's that's kind of where the

00:14:04,079 --> 00:14:09,040
broader ecosystem

00:14:05,839 --> 00:14:09,519
was at 1.9 like they had they had a

00:14:09,040 --> 00:14:11,440
working

00:14:09,519 --> 00:14:13,199
engine right and and they had a

00:14:11,440 --> 00:14:14,320
windshield to kind of protect them from

00:14:13,199 --> 00:14:16,560
from the biggest

00:14:14,320 --> 00:14:18,240
issues right but there was a lot a lot

00:14:16,560 --> 00:14:20,240
of improvement to do

00:14:18,240 --> 00:14:21,519
you know they certainly weren't driving

00:14:20,240 --> 00:14:24,560
a tesla right i

00:14:21,519 --> 00:14:26,959
i can always tell you that so

00:14:24,560 --> 00:14:27,600
so what what did ansel need to do well

00:14:26,959 --> 00:14:29,120
they had to

00:14:27,600 --> 00:14:31,040
they had to go up against all the other

00:14:29,120 --> 00:14:32,079
tools that were that were on the market

00:14:31,040 --> 00:14:34,000
and and start

00:14:32,079 --> 00:14:35,680
implementing the stuff that these other

00:14:34,000 --> 00:14:37,680
tools had as well

00:14:35,680 --> 00:14:39,120
right so they they had a lot of hurdles

00:14:37,680 --> 00:14:43,440
across on the road to

00:14:39,120 --> 00:14:43,440
to adopting or getting into

00:14:43,519 --> 00:14:47,199
environments that had existing

00:14:45,680 --> 00:14:50,320
technology stacks in them

00:14:47,199 --> 00:14:52,639
right and you know

00:14:50,320 --> 00:14:54,399
whether you know the the newfangled

00:14:52,639 --> 00:14:56,800
stuff like multi-cloud or

00:14:54,399 --> 00:14:57,519
whatever ends up actually being nothing

00:14:56,800 --> 00:14:59,760
right

00:14:57,519 --> 00:15:00,959
we have reliably proven time and time

00:14:59,760 --> 00:15:04,160
again right

00:15:00,959 --> 00:15:05,760
that the right tool for the right job is

00:15:04,160 --> 00:15:07,440
always going to be the right answer

00:15:05,760 --> 00:15:09,199
right it's it's never going to be one

00:15:07,440 --> 00:15:10,639
overarching tool so how does ansible

00:15:09,199 --> 00:15:13,760
kind of fit into this

00:15:10,639 --> 00:15:16,959
right so there there are times and

00:15:13,760 --> 00:15:17,440
and processes and and even culture right

00:15:16,959 --> 00:15:20,000
where the

00:15:17,440 --> 00:15:20,560
where that's built around existing

00:15:20,000 --> 00:15:22,800
tooling

00:15:20,560 --> 00:15:23,920
right if if we go back to devops mantra

00:15:22,800 --> 00:15:26,480
of of people

00:15:23,920 --> 00:15:28,079
and processes and tools right it's it's

00:15:26,480 --> 00:15:29,680
not just the tools part of it there's

00:15:28,079 --> 00:15:30,560
people and processes as well so we have

00:15:29,680 --> 00:15:32,480
to think about that

00:15:30,560 --> 00:15:34,160
whenever think about all right how do we

00:15:32,480 --> 00:15:34,880
how do we make sure ansible can stay up

00:15:34,160 --> 00:15:37,279
to date

00:15:34,880 --> 00:15:38,160
in this type of ecosystem right you

00:15:37,279 --> 00:15:40,000
can't just

00:15:38,160 --> 00:15:41,680
you know pull out the rug from

00:15:40,000 --> 00:15:44,160
additional tooling

00:15:41,680 --> 00:15:46,000
you you can't just you know and expect

00:15:44,160 --> 00:15:47,279
all the the people and processes to be

00:15:46,000 --> 00:15:49,600
fined in them right

00:15:47,279 --> 00:15:50,560
it you know it is something that you

00:15:49,600 --> 00:15:52,959
know um

00:15:50,560 --> 00:15:55,040
orchestrator right if you're in a vmware

00:15:52,959 --> 00:15:58,160
environment can play a

00:15:55,040 --> 00:15:59,680
crucial role in the overall flow of

00:15:58,160 --> 00:16:01,440
things right it could be integral to the

00:15:59,680 --> 00:16:03,759
workflow and and even really the

00:16:01,440 --> 00:16:06,000
cohesity of the team itself

00:16:03,759 --> 00:16:06,800
right so then then we we start to talk

00:16:06,000 --> 00:16:10,000
about well what

00:16:06,800 --> 00:16:11,600
what's the process is then right so we

00:16:10,000 --> 00:16:12,480
we take a look and and i have a picture

00:16:11,600 --> 00:16:14,880
of the old

00:16:12,480 --> 00:16:15,519
smith brothers hardware company uh

00:16:14,880 --> 00:16:18,800
building

00:16:15,519 --> 00:16:20,800
uh in columbus up there that

00:16:18,800 --> 00:16:22,079
you know that building has has bones and

00:16:20,800 --> 00:16:22,800
and you could just tell kind of by

00:16:22,079 --> 00:16:24,720
looking at it's

00:16:22,800 --> 00:16:26,240
it's cool looking building you know it's

00:16:24,720 --> 00:16:27,120
it's got the facade it's got the

00:16:26,240 --> 00:16:28,959
framework

00:16:27,120 --> 00:16:30,399
you know it's got all the internal stuff

00:16:28,959 --> 00:16:31,600
and you know that the foundation is

00:16:30,399 --> 00:16:34,399
solid too right so

00:16:31,600 --> 00:16:35,360
so none of those things are bad but they

00:16:34,399 --> 00:16:37,759
could be viewed as

00:16:35,360 --> 00:16:38,639
as legacy right or something to work

00:16:37,759 --> 00:16:40,720
around

00:16:38,639 --> 00:16:42,639
right so if you if you look inside the

00:16:40,720 --> 00:16:44,560
building i mean it's it's beautiful in

00:16:42,639 --> 00:16:45,279
there it's it's gorgeous and it and it's

00:16:44,560 --> 00:16:48,959
modern too

00:16:45,279 --> 00:16:50,240
right but there there had to be creative

00:16:48,959 --> 00:16:53,920
ways that were found

00:16:50,240 --> 00:16:55,519
to work around what needed to stay there

00:16:53,920 --> 00:16:57,040
or what even could stay there if you

00:16:55,519 --> 00:16:58,160
look at a little slideshow down at the

00:16:57,040 --> 00:16:59,360
bottom left i mean that's

00:16:58,160 --> 00:17:00,800
that's a pretty cool feature you're not

00:16:59,360 --> 00:17:01,920
going to find that anywhere in silicon

00:17:00,800 --> 00:17:03,360
valley because

00:17:01,920 --> 00:17:05,039
they didn't have that it's it's an

00:17:03,360 --> 00:17:07,679
homage almost to

00:17:05,039 --> 00:17:09,360
to the legacy of this building right

00:17:07,679 --> 00:17:11,039
having a having a green field

00:17:09,360 --> 00:17:12,160
environment like even if you see on the

00:17:11,039 --> 00:17:14,079
right-hand side it's

00:17:12,160 --> 00:17:14,880
that's almost an impossibility right

00:17:14,079 --> 00:17:16,319
you're still going to have the

00:17:14,880 --> 00:17:17,839
environment around it and

00:17:16,319 --> 00:17:19,360
and you know everyone kind of brings

00:17:17,839 --> 00:17:19,919
their own baggage to the table whether

00:17:19,360 --> 00:17:21,760
that's

00:17:19,919 --> 00:17:24,559
you know previous experience with other

00:17:21,760 --> 00:17:26,799
tools or or other sorts of biases

00:17:24,559 --> 00:17:28,640
right so so there's there's there's no

00:17:26,799 --> 00:17:31,520
real idea of a green field

00:17:28,640 --> 00:17:32,080
you're going to have to grow up ansible

00:17:31,520 --> 00:17:33,679
around

00:17:32,080 --> 00:17:35,360
these these other tools and these people

00:17:33,679 --> 00:17:37,200
in these processes right

00:17:35,360 --> 00:17:38,559
so and and even you know kind of

00:17:37,200 --> 00:17:40,400
bringing it back to ansible

00:17:38,559 --> 00:17:41,919
what what does that mean well that could

00:17:40,400 --> 00:17:42,880
be you know if someone has their own

00:17:41,919 --> 00:17:44,720
favorite module

00:17:42,880 --> 00:17:46,240
right maybe it's been deprecated but

00:17:44,720 --> 00:17:48,480
they're clinging on to it for

00:17:46,240 --> 00:17:49,760
dear life right or or you know they have

00:17:48,480 --> 00:17:52,559
hard-coded

00:17:49,760 --> 00:17:53,840
ips or host names in their playbooks or

00:17:52,559 --> 00:17:55,760
you know they're using the old key

00:17:53,840 --> 00:17:57,840
equals value formatting right

00:17:55,760 --> 00:17:58,799
so so how do you start addressing those

00:17:57,840 --> 00:18:00,559
things without

00:17:58,799 --> 00:18:02,559
being overbearing and how do you how do

00:18:00,559 --> 00:18:06,160
you work ansible up to the point

00:18:02,559 --> 00:18:09,440
that it needs to be well there's

00:18:06,160 --> 00:18:11,919
there's a couple of things here and and

00:18:09,440 --> 00:18:14,320
it's the the best way to get legacy

00:18:11,919 --> 00:18:16,640
mindset into the open is

00:18:14,320 --> 00:18:18,160
to be open and and and to share stuff

00:18:16,640 --> 00:18:20,720
with people which is scary

00:18:18,160 --> 00:18:23,039
right um the best place to start doing

00:18:20,720 --> 00:18:26,320
that is going to be within the code

00:18:23,039 --> 00:18:27,840
and to to all the people who just had

00:18:26,320 --> 00:18:29,679
who had the idea of flashing their heads

00:18:27,840 --> 00:18:31,360
that ansible's not code i i promise you

00:18:29,679 --> 00:18:33,679
answer this code ansible

00:18:31,360 --> 00:18:35,120
code as much as kubernetes code is code

00:18:33,679 --> 00:18:37,280
right uh

00:18:35,120 --> 00:18:39,039
you know yaml can be understood to be

00:18:37,280 --> 00:18:40,960
configuration but

00:18:39,039 --> 00:18:43,200
you know in in my world it's it's the

00:18:40,960 --> 00:18:44,640
code that actually runs my life

00:18:43,200 --> 00:18:46,240
so don't don't let anyone tell you

00:18:44,640 --> 00:18:49,280
anything different at least not without

00:18:46,240 --> 00:18:52,400
really diving into it

00:18:49,280 --> 00:18:54,160
so with that in mind we have to treat

00:18:52,400 --> 00:18:55,360
our code like code we have to review it

00:18:54,160 --> 00:18:56,320
and we have to test it we have to

00:18:55,360 --> 00:18:58,240
version it

00:18:56,320 --> 00:18:59,840
right we we have to have those things in

00:18:58,240 --> 00:19:01,520
order to get our code up to the point

00:18:59,840 --> 00:19:04,080
where it's it's production and that

00:19:01,520 --> 00:19:06,880
we all kind of have an understanding of

00:19:04,080 --> 00:19:08,559
what our environment looks like

00:19:06,880 --> 00:19:10,160
now best practices are going to be a

00:19:08,559 --> 00:19:12,640
step forward in that

00:19:10,160 --> 00:19:14,480
almost as a result of of doing that if

00:19:12,640 --> 00:19:16,720
we if we're reviewing code

00:19:14,480 --> 00:19:17,760
and i see someone's ignoring an error

00:19:16,720 --> 00:19:20,160
right i can now

00:19:17,760 --> 00:19:21,840
start to address that i can say i can i

00:19:20,160 --> 00:19:24,960
can bring up those situations and

00:19:21,840 --> 00:19:26,960
and scrutinize some of the the

00:19:24,960 --> 00:19:28,559
ideas or the the decisions that have

00:19:26,960 --> 00:19:30,799
been made previously

00:19:28,559 --> 00:19:32,320
um you know if you have you know those

00:19:30,799 --> 00:19:35,440
those key equals value

00:19:32,320 --> 00:19:37,039
uh formats within within ansel i mean

00:19:35,440 --> 00:19:38,880
that's that's legacy it still works

00:19:37,039 --> 00:19:41,200
don't get me wrong it still works but

00:19:38,880 --> 00:19:43,440
it's legacy you know what

00:19:41,200 --> 00:19:45,120
what is your your priority to get that

00:19:43,440 --> 00:19:46,320
current to get that to the currently

00:19:45,120 --> 00:19:49,120
supported version of

00:19:46,320 --> 00:19:50,000
of what kind of the broader ecosystem

00:19:49,120 --> 00:19:52,080
can

00:19:50,000 --> 00:19:53,520
can tolera or well is is is moving

00:19:52,080 --> 00:19:55,039
towards right

00:19:53,520 --> 00:19:56,960
and lasting this is this is more of a

00:19:55,039 --> 00:19:58,480
personal pet peeve of mine so i'm gonna

00:19:56,960 --> 00:20:00,160
spend a little bit talking about this

00:19:58,480 --> 00:20:01,679
clutter

00:20:00,160 --> 00:20:03,120
if you version control something and

00:20:01,679 --> 00:20:05,120
this is once again going back to the

00:20:03,120 --> 00:20:07,520
result of if we treat code like code

00:20:05,120 --> 00:20:09,679
we reap the benefits of doing so right

00:20:07,520 --> 00:20:11,760
one of it is cleaning out the clutter

00:20:09,679 --> 00:20:13,200
and the clutter you know we we don't

00:20:11,760 --> 00:20:16,400
need scripts

00:20:13,200 --> 00:20:16,400
that that have

00:20:16,640 --> 00:20:20,960
extensions of omg do not use on it right

00:20:19,760 --> 00:20:23,840
we don't need these

00:20:20,960 --> 00:20:24,720
these sixteen hundred playbooks uh you

00:20:23,840 --> 00:20:26,960
know

00:20:24,720 --> 00:20:28,240
sixteen fifty i don't need that many

00:20:26,960 --> 00:20:30,320
playbooks to do what i do i

00:20:28,240 --> 00:20:32,080
i promise you i don't and if you do

00:20:30,320 --> 00:20:34,400
start looking into roles it's gonna be a

00:20:32,080 --> 00:20:35,760
much better option for you

00:20:34,400 --> 00:20:37,520
but we can we can get rid of that

00:20:35,760 --> 00:20:38,080
clutter if we start version controlling

00:20:37,520 --> 00:20:39,679
it if we

00:20:38,080 --> 00:20:41,440
the minute we start version controlling

00:20:39,679 --> 00:20:42,960
it that clutter gets gone right

00:20:41,440 --> 00:20:44,720
i understand keeping it around for

00:20:42,960 --> 00:20:46,799
historical purposes right but that's

00:20:44,720 --> 00:20:48,320
what version control allows us to do it

00:20:46,799 --> 00:20:49,919
allows us to put it to the side and say

00:20:48,320 --> 00:20:50,559
okay if we need to historically go back

00:20:49,919 --> 00:20:52,400
and see

00:20:50,559 --> 00:20:54,159
what this was actually doing we have it

00:20:52,400 --> 00:20:57,360
in our history we can absolutely

00:20:54,159 --> 00:20:57,360
continue to access it

00:20:57,600 --> 00:21:02,159
so treating treating code like code the

00:21:00,720 --> 00:21:04,080
top point there is is

00:21:02,159 --> 00:21:05,280
going to going to reap us the benefits

00:21:04,080 --> 00:21:08,880
of of

00:21:05,280 --> 00:21:11,039
you know improving this and

00:21:08,880 --> 00:21:13,039
and and getting us to the point where we

00:21:11,039 --> 00:21:15,520
can we can start

00:21:13,039 --> 00:21:17,200
getting better at things so so there are

00:21:15,520 --> 00:21:18,960
a lot of ongoing opportunities

00:21:17,200 --> 00:21:20,559
that i've observed personally and

00:21:18,960 --> 00:21:23,039
professionally right

00:21:20,559 --> 00:21:24,240
one of them is tech debt tech dad is

00:21:23,039 --> 00:21:27,200
very hard to address

00:21:24,240 --> 00:21:27,840
um and and it's very easy to accrue

00:21:27,200 --> 00:21:31,360
right so

00:21:27,840 --> 00:21:32,080
so how how do you start tackling tech

00:21:31,360 --> 00:21:35,120
debt

00:21:32,080 --> 00:21:36,400
well if we treat code like code then we

00:21:35,120 --> 00:21:40,080
can say okay if we're

00:21:36,400 --> 00:21:42,320
reviewing the new uh

00:21:40,080 --> 00:21:43,360
if if we're reviewing the new stuff

00:21:42,320 --> 00:21:46,799
that's going in there

00:21:43,360 --> 00:21:48,880
right we can see if if we're ignoring

00:21:46,799 --> 00:21:51,200
stuff that we don't need to be ignoring

00:21:48,880 --> 00:21:52,880
or if there's there's an exception in

00:21:51,200 --> 00:21:55,679
our environment that maybe we

00:21:52,880 --> 00:21:57,280
need to remediate first there are things

00:21:55,679 --> 00:21:59,679
that we can we can address

00:21:57,280 --> 00:22:01,440
as we go through the review process as

00:21:59,679 --> 00:22:03,520
we're treating code like code

00:22:01,440 --> 00:22:06,159
you know it whether it's not working or

00:22:03,520 --> 00:22:08,159
or there's deprecation warnings or

00:22:06,159 --> 00:22:10,559
formatting warnings right we can we can

00:22:08,159 --> 00:22:11,679
take a look and we can revisit that code

00:22:10,559 --> 00:22:13,280
you know sometimes you just want to

00:22:11,679 --> 00:22:15,039
revisit code just for the heck of it

00:22:13,280 --> 00:22:17,679
just to say you know

00:22:15,039 --> 00:22:18,480
when i was thinking you know six months

00:22:17,679 --> 00:22:20,640
ago

00:22:18,480 --> 00:22:22,240
a year ago when i was thinking about

00:22:20,640 --> 00:22:24,000
implementing this did i do it in the

00:22:22,240 --> 00:22:25,280
correct way i mean is it still relevant

00:22:24,000 --> 00:22:29,200
today

00:22:25,280 --> 00:22:32,159
for instance there is a part in my

00:22:29,200 --> 00:22:32,880
uh my one of my playbooks where i reboot

00:22:32,159 --> 00:22:34,960
a server

00:22:32,880 --> 00:22:36,880
using a shell command and then a wait

00:22:34,960 --> 00:22:39,120
for right and i implemented that before

00:22:36,880 --> 00:22:41,280
the reboot module came along

00:22:39,120 --> 00:22:43,360
and now i can go back and revisit it and

00:22:41,280 --> 00:22:45,760
say hey there's a way for me to do this

00:22:43,360 --> 00:22:47,440
better right why wouldn't i do it well

00:22:45,760 --> 00:22:49,120
yeah it's stuck that it's it's going

00:22:47,440 --> 00:22:50,960
back and revisiting code and

00:22:49,120 --> 00:22:52,320
you know having those eyes on the code

00:22:50,960 --> 00:22:53,919
though treating code like code being

00:22:52,320 --> 00:22:54,559
able to review it and have people look

00:22:53,919 --> 00:22:55,919
at it

00:22:54,559 --> 00:22:58,159
right that's going to start coming to

00:22:55,919 --> 00:23:00,640
the forefront right

00:22:58,159 --> 00:23:02,480
um and another way to do that is is

00:23:00,640 --> 00:23:04,559
updating standards right so if we

00:23:02,480 --> 00:23:06,240
if we have a standard of how to do

00:23:04,559 --> 00:23:07,760
something then we can say hey this

00:23:06,240 --> 00:23:08,080
doesn't mean our standard let's go ahead

00:23:07,760 --> 00:23:11,200
and

00:23:08,080 --> 00:23:13,120
tweak it right um and and my favorite

00:23:11,200 --> 00:23:14,000
way to do that is to curate skeletons

00:23:13,120 --> 00:23:15,919
and say hey

00:23:14,000 --> 00:23:17,840
this is how we do a loop and just have a

00:23:15,919 --> 00:23:19,919
little snippet just a little file in a

00:23:17,840 --> 00:23:21,600
skeleton's directory and say hey

00:23:19,919 --> 00:23:23,280
this is how we loop over something we

00:23:21,600 --> 00:23:24,480
use the loop command we use ginger

00:23:23,280 --> 00:23:26,880
filters you know this

00:23:24,480 --> 00:23:29,200
given examples right or or in order to

00:23:26,880 --> 00:23:29,600
access a variable in a json format you

00:23:29,200 --> 00:23:32,720
know how

00:23:29,600 --> 00:23:34,400
how do you do that you know and and i'm

00:23:32,720 --> 00:23:36,000
i'm fairly good at ansible just because

00:23:34,400 --> 00:23:37,280
i've had the experience

00:23:36,000 --> 00:23:38,960
that i've gone through this time and

00:23:37,280 --> 00:23:40,559
time and time again right people who

00:23:38,960 --> 00:23:42,720
don't necessarily have that aren't

00:23:40,559 --> 00:23:44,720
necessarily as familiar

00:23:42,720 --> 00:23:45,760
and can benefit from having a reference

00:23:44,720 --> 00:23:48,880
point of view

00:23:45,760 --> 00:23:49,200
as i can every now and then and say this

00:23:48,880 --> 00:23:51,120
is

00:23:49,200 --> 00:23:52,960
you know i i know i solved this problem

00:23:51,120 --> 00:23:54,640
once right i've had

00:23:52,960 --> 00:23:56,799
i know i've solved this problem once let

00:23:54,640 --> 00:23:59,360
me go back and and see how i did it so

00:23:56,799 --> 00:23:59,919
curating skeletons will will kind of get

00:23:59,360 --> 00:24:02,159
us

00:23:59,919 --> 00:24:02,960
to the point where where standards are

00:24:02,159 --> 00:24:05,600
maintained

00:24:02,960 --> 00:24:07,360
right and and then you know as we're

00:24:05,600 --> 00:24:09,039
revisiting code we can make those call

00:24:07,360 --> 00:24:11,200
outs and say hey this is not how we do a

00:24:09,039 --> 00:24:12,960
loop right or this is not how we access

00:24:11,200 --> 00:24:14,720
a variable right we have we have

00:24:12,960 --> 00:24:18,400
standards we have skeletons here to

00:24:14,720 --> 00:24:20,960
to demonstrate that standard um

00:24:18,400 --> 00:24:22,400
one of the or a couple a couple of the

00:24:20,960 --> 00:24:24,559
cool things that i've seen around the

00:24:22,400 --> 00:24:28,240
ansible community that has made all that

00:24:24,559 --> 00:24:31,039
very easy for me is that

00:24:28,240 --> 00:24:32,240
for the most part new versions of

00:24:31,039 --> 00:24:34,720
ansible just

00:24:32,240 --> 00:24:35,760
work and and that has really made all

00:24:34,720 --> 00:24:38,000
the difference it's

00:24:35,760 --> 00:24:39,679
it's obviously way more of a testament

00:24:38,000 --> 00:24:40,960
to to the team

00:24:39,679 --> 00:24:43,120
than than anything i've ever

00:24:40,960 --> 00:24:45,279
accomplished and if you look in the the

00:24:43,120 --> 00:24:49,039
slide i do have a

00:24:45,279 --> 00:24:51,760
screenshot of the contributors

00:24:49,039 --> 00:24:53,760
based on lines of code added to the

00:24:51,760 --> 00:24:57,200
ansible core engine so these guys are

00:24:53,760 --> 00:24:57,200
the the real mvps here

00:24:57,440 --> 00:25:01,360
their standards as well have been ever

00:24:59,760 --> 00:25:03,360
evolving and

00:25:01,360 --> 00:25:05,279
via the the porting guides for instance

00:25:03,360 --> 00:25:08,320
when when i was talking about

00:25:05,279 --> 00:25:08,799
they had defined the way to use the loop

00:25:08,320 --> 00:25:10,640
command

00:25:08,799 --> 00:25:12,240
instead of with items that was them

00:25:10,640 --> 00:25:14,159
updating the internal standards and they

00:25:12,240 --> 00:25:16,960
make sure to have that

00:25:14,159 --> 00:25:17,440
that decent documentation in order to to

00:25:16,960 --> 00:25:20,799
keep

00:25:17,440 --> 00:25:24,480
us as a community up to date right um

00:25:20,799 --> 00:25:24,720
code review is is yet another great way

00:25:24,480 --> 00:25:27,200
and

00:25:24,720 --> 00:25:28,240
and you know i i feel like i'm kind of

00:25:27,200 --> 00:25:30,159
hammering this

00:25:28,240 --> 00:25:32,080
a little bit and and i promise you i am

00:25:30,159 --> 00:25:33,600
for a reason right because code review

00:25:32,080 --> 00:25:35,039
is going to be the thing that gets other

00:25:33,600 --> 00:25:38,559
people's eyes on your code

00:25:35,039 --> 00:25:40,080
and that gets you more knowledge base

00:25:38,559 --> 00:25:41,600
around not only the environment by

00:25:40,080 --> 00:25:43,760
having other people's feedback

00:25:41,600 --> 00:25:45,679
right but other people's uh point of

00:25:43,760 --> 00:25:46,880
view into the code itself if they have a

00:25:45,679 --> 00:25:48,400
better way to do it or

00:25:46,880 --> 00:25:50,000
or even if they have questions for

00:25:48,400 --> 00:25:50,799
clarification that's always going to be

00:25:50,000 --> 00:25:53,360
something that

00:25:50,799 --> 00:25:55,279
has the ability to trigger a thought so

00:25:53,360 --> 00:25:56,080
so getting other people's eyes on your

00:25:55,279 --> 00:25:57,760
code

00:25:56,080 --> 00:26:00,000
is one of the most important things you

00:25:57,760 --> 00:26:03,279
can do and i will continue to hammer it

00:26:00,000 --> 00:26:05,200
for for the rest of as as i'm in the

00:26:03,279 --> 00:26:08,880
industry

00:26:05,200 --> 00:26:09,600
so let's let's go to sustainability so

00:26:08,880 --> 00:26:11,360
say

00:26:09,600 --> 00:26:13,760
say we've we've got all these processes

00:26:11,360 --> 00:26:14,559
in place right how do we keep on top of

00:26:13,760 --> 00:26:16,880
things

00:26:14,559 --> 00:26:18,480
given that things keep changing now if i

00:26:16,880 --> 00:26:20,000
had my way we would just

00:26:18,480 --> 00:26:21,600
not change like that would that would be

00:26:20,000 --> 00:26:23,679
fine if i could just i could just stop

00:26:21,600 --> 00:26:26,640
it right there that'd be great but

00:26:23,679 --> 00:26:28,480
things continue to change so how do we

00:26:26,640 --> 00:26:31,760
keep up with that

00:26:28,480 --> 00:26:34,640
well we have to start

00:26:31,760 --> 00:26:37,200
testing and i i might have lost half of

00:26:34,640 --> 00:26:39,919
us here but but hear me out here so

00:26:37,200 --> 00:26:41,919
so testing in a sense that there's

00:26:39,919 --> 00:26:44,080
there's a way to do testing that's

00:26:41,919 --> 00:26:45,120
fully implemented like this where we

00:26:44,080 --> 00:26:47,120
have you know

00:26:45,120 --> 00:26:48,960
a beautiful front end and we have a

00:26:47,120 --> 00:26:52,159
dedicated test cluster

00:26:48,960 --> 00:26:55,679
and you know we have reporting results

00:26:52,159 --> 00:26:58,480
that are for the majority green right

00:26:55,679 --> 00:26:59,679
um usually stuff doesn't end up like

00:26:58,480 --> 00:27:01,679
this this is this is

00:26:59,679 --> 00:27:03,840
more akin to what i'm using in

00:27:01,679 --> 00:27:04,640
production where i manually kick off

00:27:03,840 --> 00:27:06,799
jobs

00:27:04,640 --> 00:27:08,559
and i hack together java front end held

00:27:06,799 --> 00:27:10,480
together by python code

00:27:08,559 --> 00:27:11,679
which runs on servers that are probably

00:27:10,480 --> 00:27:13,919
not production

00:27:11,679 --> 00:27:16,320
and stores its results to an apache

00:27:13,919 --> 00:27:20,000
server that generates excel reports

00:27:16,320 --> 00:27:23,039
that are mostly red it's not

00:27:20,000 --> 00:27:25,279
it's not the greatest most pure setup

00:27:23,039 --> 00:27:26,720
but it works right it it still does work

00:27:25,279 --> 00:27:28,159
i'm still able to get the results and

00:27:26,720 --> 00:27:29,120
i'm still able to start

00:27:28,159 --> 00:27:32,080
seeing all right where are my

00:27:29,120 --> 00:27:35,039
deprecations right where are my warnings

00:27:32,080 --> 00:27:36,880
where are my actual failures right uh

00:27:35,039 --> 00:27:38,960
you know i don't ever think i've

00:27:36,880 --> 00:27:40,799
used the word glamorous to describe it

00:27:38,960 --> 00:27:41,360
but it's a step in the right direction

00:27:40,799 --> 00:27:43,520
so

00:27:41,360 --> 00:27:45,120
so what what do we need for testing

00:27:43,520 --> 00:27:45,520
right how do we how do we analyze the

00:27:45,120 --> 00:27:48,240
test

00:27:45,520 --> 00:27:49,600
you know and and i am i'm incredibly

00:27:48,240 --> 00:27:51,600
lazy right so i'm probably

00:27:49,600 --> 00:27:52,799
not hitting all the the bullet points

00:27:51,600 --> 00:27:55,279
here but i wanted to

00:27:52,799 --> 00:27:56,559
to take a step back and kind of divvy

00:27:55,279 --> 00:28:00,159
this up

00:27:56,559 --> 00:28:02,559
to say what kind of testing do we need

00:28:00,159 --> 00:28:03,200
to determine how to stay current with

00:28:02,559 --> 00:28:05,919
ansible

00:28:03,200 --> 00:28:06,799
well the first question is did it run

00:28:05,919 --> 00:28:09,600
successfully

00:28:06,799 --> 00:28:10,960
if if if we can't answer yes to that the

00:28:09,600 --> 00:28:12,799
rest of the questions are moved

00:28:10,960 --> 00:28:14,480
right so let's start our testing there

00:28:12,799 --> 00:28:17,360
did it run successfully

00:28:14,480 --> 00:28:18,880
and then if it did run successfully did

00:28:17,360 --> 00:28:21,760
it run successfully again

00:28:18,880 --> 00:28:23,600
right ansible as a program is is written

00:28:21,760 --> 00:28:26,399
in order to be item potent

00:28:23,600 --> 00:28:27,520
right so if it can't run again item

00:28:26,399 --> 00:28:29,120
potently

00:28:27,520 --> 00:28:30,720
right then we have to address all right

00:28:29,120 --> 00:28:33,520
is is that a problem

00:28:30,720 --> 00:28:35,760
right and it may not be right it it it

00:28:33,520 --> 00:28:37,919
may not be which is why i put this

00:28:35,760 --> 00:28:39,840
question second because it may not be a

00:28:37,919 --> 00:28:41,840
problem if it didn't run successfully

00:28:39,840 --> 00:28:43,279
like the second time but if it didn't if

00:28:41,840 --> 00:28:44,000
it didn't run successfully the first

00:28:43,279 --> 00:28:45,600
time

00:28:44,000 --> 00:28:47,039
that's a that's a big red problem we

00:28:45,600 --> 00:28:50,080
need to address that now

00:28:47,039 --> 00:28:51,600
okay say all that got analyzed and we

00:28:50,080 --> 00:28:54,640
say

00:28:51,600 --> 00:28:55,840
what do we move on to now say say we we

00:28:54,640 --> 00:28:58,880
can run our playbook

00:28:55,840 --> 00:29:01,440
successfully now what well

00:28:58,880 --> 00:29:02,080
we we go into the integration testing

00:29:01,440 --> 00:29:05,840
part of it

00:29:02,080 --> 00:29:08,000
right which is basically us looking for

00:29:05,840 --> 00:29:09,840
any anomalies here so so did it throw

00:29:08,000 --> 00:29:12,799
any errors or any warnings

00:29:09,840 --> 00:29:14,559
right and this isn't hard this is just a

00:29:12,799 --> 00:29:18,159
a slight step above

00:29:14,559 --> 00:29:20,640
did it actually run right if we're using

00:29:18,159 --> 00:29:22,399
you know failed when you're if we're if

00:29:20,640 --> 00:29:23,120
we're using those statements to ignore

00:29:22,399 --> 00:29:25,120
errors

00:29:23,120 --> 00:29:26,640
right why are we ignoring them right is

00:29:25,120 --> 00:29:28,320
there a better way to do something is

00:29:26,640 --> 00:29:29,440
there a more built-in way to do

00:29:28,320 --> 00:29:31,360
something if we're running

00:29:29,440 --> 00:29:32,799
you know raw said commands is there a

00:29:31,360 --> 00:29:33,600
way that because that will give a

00:29:32,799 --> 00:29:36,000
warning right

00:29:33,600 --> 00:29:37,440
is there a way to use a line-in file

00:29:36,000 --> 00:29:39,600
rather than said

00:29:37,440 --> 00:29:41,360
right so so did it throw any warnings or

00:29:39,600 --> 00:29:43,279
were there any errors that we ignored

00:29:41,360 --> 00:29:44,240
that we might want to readdress going

00:29:43,279 --> 00:29:46,159
forward

00:29:44,240 --> 00:29:48,240
so those are those are two big things

00:29:46,159 --> 00:29:50,320
those are where the vast majority of our

00:29:48,240 --> 00:29:52,240
improvements are going to be made

00:29:50,320 --> 00:29:53,440
if you think about deprecation warnings

00:29:52,240 --> 00:29:55,200
right and

00:29:53,440 --> 00:29:56,640
formatting warnings you know stuff that

00:29:55,200 --> 00:29:58,799
is continually changing

00:29:56,640 --> 00:30:00,480
will be caught in this step so if you if

00:29:58,799 --> 00:30:01,440
you stop there you're pretty much where

00:30:00,480 --> 00:30:03,360
you need to be

00:30:01,440 --> 00:30:04,559
right the next step being you know did

00:30:03,360 --> 00:30:06,000
we end up with a server

00:30:04,559 --> 00:30:07,760
that does what we need and then we

00:30:06,000 --> 00:30:08,399
started talking about testing framework

00:30:07,760 --> 00:30:11,440
like

00:30:08,399 --> 00:30:13,200
like pie test or test kitchen or

00:30:11,440 --> 00:30:14,880
or or any of those other frameworks

00:30:13,200 --> 00:30:19,039
where you can implement a a

00:30:14,880 --> 00:30:23,039
big suite about you know how to

00:30:19,039 --> 00:30:28,640
to to work with that um

00:30:23,039 --> 00:30:28,640
and let's see did i just crash

00:30:34,320 --> 00:30:39,200
andrew you are fine okay cool thanks

00:30:37,039 --> 00:30:41,440
sorry about that

00:30:39,200 --> 00:30:42,880
all right so uh acceptance testing right

00:30:41,440 --> 00:30:44,399
so that's gonna be the

00:30:42,880 --> 00:30:46,159
the big part that we really probably

00:30:44,399 --> 00:30:46,880
don't need so integration testing is

00:30:46,159 --> 00:30:49,360
going to be

00:30:46,880 --> 00:30:50,000
what we're looking for mainly um so if

00:30:49,360 --> 00:30:53,600
if

00:30:50,000 --> 00:30:56,799
we get there we'll be pretty good so

00:30:53,600 --> 00:30:57,840
how do we get there well the remediation

00:30:56,799 --> 00:31:00,000
comes with

00:30:57,840 --> 00:31:01,039
with code reviews and and reading the

00:31:00,000 --> 00:31:04,159
documentation

00:31:01,039 --> 00:31:05,840
right and you know i i told you it feels

00:31:04,159 --> 00:31:07,519
like i'm harping on code reviews and

00:31:05,840 --> 00:31:09,279
and you know i i really am you know if

00:31:07,519 --> 00:31:11,519
someone brings you a problem

00:31:09,279 --> 00:31:13,120
and you know they they say that they ran

00:31:11,519 --> 00:31:14,159
into a problem you can't just tell them

00:31:13,120 --> 00:31:15,919
no you're wrong

00:31:14,159 --> 00:31:17,519
right that's not a problem and if it's

00:31:15,919 --> 00:31:18,960
not a code problem you know

00:31:17,519 --> 00:31:21,840
let's take a look at the the people and

00:31:18,960 --> 00:31:23,279
processes and see if the problem lies in

00:31:21,840 --> 00:31:26,159
in one of those two

00:31:23,279 --> 00:31:27,519
i bet i bet that it does so so if we

00:31:26,159 --> 00:31:28,399
start taking those problems look at

00:31:27,519 --> 00:31:29,919
those problems

00:31:28,399 --> 00:31:32,480
if we start diving into code review

00:31:29,919 --> 00:31:34,640
getting other more more people involved

00:31:32,480 --> 00:31:36,399
right you know the most effective way to

00:31:34,640 --> 00:31:37,279
get them talking is to get them to look

00:31:36,399 --> 00:31:39,200
at what you change

00:31:37,279 --> 00:31:40,960
and get them to look at what you added

00:31:39,200 --> 00:31:41,360
if something's working right the impetus

00:31:40,960 --> 00:31:43,679
to

00:31:41,360 --> 00:31:45,679
review it is very very low you know

00:31:43,679 --> 00:31:47,440
unless in my case it's it's bugging me

00:31:45,679 --> 00:31:49,039
in the back of my head and saying hey

00:31:47,440 --> 00:31:50,720
you need to go change that module right

00:31:49,039 --> 00:31:52,960
the emphasis to actually take a look and

00:31:50,720 --> 00:31:55,200
review something that's actually working

00:31:52,960 --> 00:31:56,640
is is very very low so if you can get

00:31:55,200 --> 00:31:57,679
people to look at what you changed and

00:31:56,640 --> 00:31:59,519
what you added

00:31:57,679 --> 00:32:01,200
that's going to be easiest way to get

00:31:59,519 --> 00:32:02,320
people interested in looking into the

00:32:01,200 --> 00:32:04,000
code right

00:32:02,320 --> 00:32:05,440
you're going to they they get exposure

00:32:04,000 --> 00:32:06,720
to what you're doing what you're adding

00:32:05,440 --> 00:32:07,760
you know kind of the framework you're

00:32:06,720 --> 00:32:10,240
working within

00:32:07,760 --> 00:32:12,000
uh and and and you get another set of

00:32:10,240 --> 00:32:13,039
eyeballs about you know what's going on

00:32:12,000 --> 00:32:16,000
your code and

00:32:13,039 --> 00:32:17,120
everybody wins in that case uh and and

00:32:16,000 --> 00:32:18,720
like i said before the

00:32:17,120 --> 00:32:20,960
the porting guides and the release notes

00:32:18,720 --> 00:32:22,799
are going to be your your first go-to

00:32:20,960 --> 00:32:24,159
to say you know what what change you

00:32:22,799 --> 00:32:25,360
know how do we get stuff up today what

00:32:24,159 --> 00:32:26,880
is best practices

00:32:25,360 --> 00:32:29,440
they're going to be all pretty much

00:32:26,880 --> 00:32:31,760
outlined there

00:32:29,440 --> 00:32:33,840
so lastly here and it's it's funny i've

00:32:31,760 --> 00:32:35,600
been in the chat today talking about

00:32:33,840 --> 00:32:38,559
business decisions and

00:32:35,600 --> 00:32:40,399
you know when do we actually get time to

00:32:38,559 --> 00:32:42,240
do this code you know what

00:32:40,399 --> 00:32:44,000
when are we going to be able to to

00:32:42,240 --> 00:32:45,519
address these things right

00:32:44,000 --> 00:32:47,279
and if you don't get buy-in from the

00:32:45,519 --> 00:32:49,120
business you know your your team is

00:32:47,279 --> 00:32:49,919
never going to get time to conduct code

00:32:49,120 --> 00:32:51,840
reviews

00:32:49,919 --> 00:32:53,760
they're never going to get resources to

00:32:51,840 --> 00:32:56,080
spin up automation front ends or

00:32:53,760 --> 00:32:57,440
or support for for testing those the

00:32:56,080 --> 00:33:00,000
safety checks or the

00:32:57,440 --> 00:33:01,120
automated testing anything even close to

00:33:00,000 --> 00:33:02,399
that right

00:33:01,120 --> 00:33:04,559
so you're gonna have to convince people

00:33:02,399 --> 00:33:07,519
that it's worth it right

00:33:04,559 --> 00:33:09,120
um so there are three points to to touch

00:33:07,519 --> 00:33:12,480
on here the first one is

00:33:09,120 --> 00:33:14,720
the the first major major problem you'll

00:33:12,480 --> 00:33:17,600
run into is well if it ain't broke

00:33:14,720 --> 00:33:18,080
don't fix it right well let's take a

00:33:17,600 --> 00:33:21,600
look at

00:33:18,080 --> 00:33:22,880
look at brook why what is broke you know

00:33:21,600 --> 00:33:24,720
how do we define broken

00:33:22,880 --> 00:33:26,720
right what is it broken when a playbook

00:33:24,720 --> 00:33:28,720
only works a third of the time

00:33:26,720 --> 00:33:30,480
um is it broken when it only works less

00:33:28,720 --> 00:33:33,600
than 100 of the time you know

00:33:30,480 --> 00:33:35,679
what in between there is acceptable um

00:33:33,600 --> 00:33:37,679
is it broken if we're only using a

00:33:35,679 --> 00:33:39,120
supported insecure version

00:33:37,679 --> 00:33:40,480
um or if it takes an hour to do

00:33:39,120 --> 00:33:41,519
something that really should only take

00:33:40,480 --> 00:33:43,919
five minutes

00:33:41,519 --> 00:33:45,519
is that broken right if you start

00:33:43,919 --> 00:33:47,200
redefining broke it

00:33:45,519 --> 00:33:49,279
from you know there's you're gonna have

00:33:47,200 --> 00:33:50,159
a myriad of reasons why keeping up is

00:33:49,279 --> 00:33:53,200
necessary

00:33:50,159 --> 00:33:55,519
right um and and the way to figu

00:33:53,200 --> 00:33:57,039
figure those out is testing testing can

00:33:55,519 --> 00:34:00,320
reveal just how broken things

00:33:57,039 --> 00:34:03,279
actually are um complexity

00:34:00,320 --> 00:34:05,679
ma'am the the only way to get

00:34:03,279 --> 00:34:07,120
reliability for your team

00:34:05,679 --> 00:34:08,800
or readability at least for your team

00:34:07,120 --> 00:34:13,359
reliability for the business

00:34:08,800 --> 00:34:16,320
and security for the security audit team

00:34:13,359 --> 00:34:18,800
is to limit your complexity right you

00:34:16,320 --> 00:34:20,480
need to step back and reevaluate to to

00:34:18,800 --> 00:34:21,839
figure out you know do i actually need

00:34:20,480 --> 00:34:24,720
all this in my code

00:34:21,839 --> 00:34:25,599
uh and that will that will reduce your

00:34:24,720 --> 00:34:28,480
bus factor

00:34:25,599 --> 00:34:29,119
right and and it'll get you goodwill

00:34:28,480 --> 00:34:31,200
with your team

00:34:29,119 --> 00:34:32,720
like i can't afford to be the guy that

00:34:31,200 --> 00:34:34,560
introduces complexity

00:34:32,720 --> 00:34:36,320
because if i'm out in the bahamas you

00:34:34,560 --> 00:34:38,480
know which would be

00:34:36,320 --> 00:34:39,760
cool not really but if say i'm out in

00:34:38,480 --> 00:34:41,440
the bahamas i don't want to get called

00:34:39,760 --> 00:34:42,079
because i'm the only one who can fix

00:34:41,440 --> 00:34:43,599
code

00:34:42,079 --> 00:34:45,200
and that brings us to the first thing

00:34:43,599 --> 00:34:46,800
too if it's if it's broken

00:34:45,200 --> 00:34:50,079
is it broken if i'm the only one who can

00:34:46,800 --> 00:34:52,480
fix the code i would say absolutely yes

00:34:50,079 --> 00:34:53,919
absolutely yes so that brings this last

00:34:52,480 --> 00:34:54,879
one i mean that's that's us staying

00:34:53,919 --> 00:34:56,960
within support

00:34:54,879 --> 00:34:59,359
if if i don't know what the broader

00:34:56,960 --> 00:35:01,839
community is saying about their

00:34:59,359 --> 00:35:03,839
their support right if i you know i'm

00:35:01,839 --> 00:35:05,200
still using people's values pairs and

00:35:03,839 --> 00:35:07,359
i'd try to post that in

00:35:05,200 --> 00:35:09,680
in irc or in mailing lists or something

00:35:07,359 --> 00:35:11,200
or i'm using an old unsupported version

00:35:09,680 --> 00:35:13,440
the first thing i'm going to get told is

00:35:11,200 --> 00:35:15,040
hey you know looks like you're having a

00:35:13,440 --> 00:35:15,839
problem but you're not even using a

00:35:15,040 --> 00:35:17,119
supportive version

00:35:15,839 --> 00:35:18,720
i can't really you know there's there's

00:35:17,119 --> 00:35:19,119
nothing at this point that i can do if

00:35:18,720 --> 00:35:20,800
you

00:35:19,119 --> 00:35:22,079
if you were to upgrade it you know maybe

00:35:20,800 --> 00:35:23,520
we can start trying to figure out your

00:35:22,079 --> 00:35:25,839
issue here or maybe that

00:35:23,520 --> 00:35:26,960
could solve it so the first thing you

00:35:25,839 --> 00:35:28,800
want to do before you

00:35:26,960 --> 00:35:30,880
you reach out to someone is to make sure

00:35:28,800 --> 00:35:32,480
to stay within support and you always

00:35:30,880 --> 00:35:34,000
want to have that lifeline you

00:35:32,480 --> 00:35:35,280
always want to have that lifeline you

00:35:34,000 --> 00:35:36,000
never want to be the guy to go in and

00:35:35,280 --> 00:35:38,640
say well

00:35:36,000 --> 00:35:40,720
i'm the last line of defense here that's

00:35:38,640 --> 00:35:42,800
that's almost never going to work so

00:35:40,720 --> 00:35:44,160
in order to stay within support well in

00:35:42,800 --> 00:35:46,160
order to to

00:35:44,160 --> 00:35:47,599
you know push your code as a business

00:35:46,160 --> 00:35:49,119
decision make sure you stay within

00:35:47,599 --> 00:35:50,000
support to have someone else to fall

00:35:49,119 --> 00:35:53,119
back on

00:35:50,000 --> 00:35:54,880
so let's let's sum it up today um

00:35:53,119 --> 00:35:56,400
you know we we went through a lot of

00:35:54,880 --> 00:35:57,920
things today um

00:35:56,400 --> 00:35:59,839
and you know what what do we expect to

00:35:57,920 --> 00:36:03,040
have at the end of the day right

00:35:59,839 --> 00:36:04,480
and is it worth it right um i would say

00:36:03,040 --> 00:36:05,599
it's absolutely worth it right it's

00:36:04,480 --> 00:36:08,160
worth it in money

00:36:05,599 --> 00:36:10,000
and time and energy right so it's it's

00:36:08,160 --> 00:36:12,720
worth it in money in the sense that

00:36:10,000 --> 00:36:13,520
i'm right now doing the job of three

00:36:12,720 --> 00:36:16,240
ftes

00:36:13,520 --> 00:36:16,640
right and and getting compensated for it

00:36:16,240 --> 00:36:18,880
right

00:36:16,640 --> 00:36:20,560
it's worth it in time because you know

00:36:18,880 --> 00:36:22,640
i'm doing what used to take

00:36:20,560 --> 00:36:23,680
two to three ftes to do and i'm doing it

00:36:22,640 --> 00:36:26,160
in an automated

00:36:23,680 --> 00:36:27,760
repeatable manner i can i can depend on

00:36:26,160 --> 00:36:29,839
that to be repeatable

00:36:27,760 --> 00:36:31,920
right and it's worth it in energy

00:36:29,839 --> 00:36:34,880
because i'm not just pouring my energy

00:36:31,920 --> 00:36:36,079
into these systems into this environment

00:36:34,880 --> 00:36:38,079
it's going into

00:36:36,079 --> 00:36:39,680
learning better practices right it's

00:36:38,079 --> 00:36:40,480
going into communicating better with my

00:36:39,680 --> 00:36:43,040
team

00:36:40,480 --> 00:36:44,800
and it's going into sharing my knowledge

00:36:43,040 --> 00:36:47,040
with other people

00:36:44,800 --> 00:36:48,960
that's the best thing that i can do with

00:36:47,040 --> 00:36:50,800
my time and my energy

00:36:48,960 --> 00:36:52,000
at that point the money becomes a side

00:36:50,800 --> 00:36:54,480
effect right

00:36:52,000 --> 00:36:56,560
so i firmly believe that there's nothing

00:36:54,480 --> 00:36:58,480
better that i could be doing

00:36:56,560 --> 00:37:02,000
than be keeping up with the changes in

00:36:58,480 --> 00:37:04,720
deprecations in ansible

00:37:02,000 --> 00:37:04,720
thank you very much

00:37:07,280 --> 00:37:12,880
very good uh thanks andrew um obviously

00:37:10,400 --> 00:37:17,760
you covered a lot of stuff

00:37:12,880 --> 00:37:20,079
and uh i am like others probably

00:37:17,760 --> 00:37:20,960
uh just catching up on everything but i

00:37:20,079 --> 00:37:24,000
do see uh

00:37:20,960 --> 00:37:27,280
one question in the qa window

00:37:24,000 --> 00:37:31,200
which is basically chris is asking

00:37:27,280 --> 00:37:33,440
that how would you counter organizations

00:37:31,200 --> 00:37:34,400
you know there are sometimes

00:37:33,440 --> 00:37:38,079
organizations

00:37:34,400 --> 00:37:39,680
are resistant to change and

00:37:38,079 --> 00:37:41,280
they want to just continue doing what

00:37:39,680 --> 00:37:44,480
they are doing and they may

00:37:41,280 --> 00:37:45,520
view ansible as adding another layer of

00:37:44,480 --> 00:37:47,359
complexity

00:37:45,520 --> 00:37:49,119
so how would you how would you counter

00:37:47,359 --> 00:37:51,119
that argument

00:37:49,119 --> 00:37:52,560
yeah since i have a a minute or so here

00:37:51,119 --> 00:37:54,720
i'm going to go ahead and

00:37:52,560 --> 00:37:56,560
read the question itself from chris here

00:37:54,720 --> 00:37:57,680
so how are you counting organizational

00:37:56,560 --> 00:37:59,760
trends that resist

00:37:57,680 --> 00:38:00,800
standardization and might view the use

00:37:59,760 --> 00:38:03,119
of ansible as

00:38:00,800 --> 00:38:03,839
adding another layer of complexity

00:38:03,119 --> 00:38:06,800
before they've

00:38:03,839 --> 00:38:08,320
upskilled i.e when they're starting out

00:38:06,800 --> 00:38:09,680
they will be able to do things much

00:38:08,320 --> 00:38:11,280
faster natively

00:38:09,680 --> 00:38:14,079
than if they used ansible as an

00:38:11,280 --> 00:38:18,720
abstraction on what they're doing

00:38:14,079 --> 00:38:20,079
that is that is that is the automation

00:38:18,720 --> 00:38:24,160
question though isn't it

00:38:20,079 --> 00:38:24,160
uh so i i would say

00:38:24,880 --> 00:38:28,160
i would say well well back to the

00:38:27,119 --> 00:38:31,920
business decision

00:38:28,160 --> 00:38:32,560
right and you know are we are we able to

00:38:31,920 --> 00:38:36,000
to make

00:38:32,560 --> 00:38:37,119
a a business decision on this right are

00:38:36,000 --> 00:38:39,599
we able to say

00:38:37,119 --> 00:38:41,280
you know it our processes are broke

00:38:39,599 --> 00:38:42,800
right in the sense that

00:38:41,280 --> 00:38:45,200
you know i have a co-worker getting up

00:38:42,800 --> 00:38:47,520
at 2 a.m three times a week

00:38:45,200 --> 00:38:49,200
in order to fix the backup procedures

00:38:47,520 --> 00:38:51,040
right is that something we're

00:38:49,200 --> 00:38:53,760
considering broken right are we putting

00:38:51,040 --> 00:38:56,560
in 70 hours a week because we're doing

00:38:53,760 --> 00:38:59,040
manual native efforts right uh is this

00:38:56,560 --> 00:39:01,760
leading to more complexity is this

00:38:59,040 --> 00:39:03,359
is this a bus factor for us right and we

00:39:01,760 --> 00:39:05,599
have to put that in terms of business

00:39:03,359 --> 00:39:06,320
decisions we can't make a persuasive

00:39:05,599 --> 00:39:08,240
argument

00:39:06,320 --> 00:39:09,680
unless we can either put money or man

00:39:08,240 --> 00:39:12,160
hours behind it

00:39:09,680 --> 00:39:12,880
if you can start making if you can start

00:39:12,160 --> 00:39:16,480
making

00:39:12,880 --> 00:39:17,760
that argument there there will be some

00:39:16,480 --> 00:39:20,000
forward progress

00:39:17,760 --> 00:39:22,800
towards implementing automation uh

00:39:20,000 --> 00:39:22,800
systematically

00:39:22,960 --> 00:39:29,839
very good thank you we are right on the

00:39:24,960 --> 00:39:29,839

YouTube URL: https://www.youtube.com/watch?v=dHGZOdUUy3I


