Title: [OLF 2020] SSH Tunnels and More
Publication date: 2020-12-08
Playlist: 2020 Videos
Description: 
	Speaker:  Der Hans
Slides: https://www.lufthans.com/Akten/Presentations/2020/OLF/OLF.SSH_Tunnels_and_More.2020Nov06.html

SSH is the go to tool for sysadmins and developers for interactive connections to remote machines. It creates secure, encrypted connections between computers, even across hostile networks. Unless you accept keys without verification (DONâ€™T DO THAT!!!).

SSH can also create tunnels for encapsulating other connections, including other protocols and data. Sysadmins can bridge protocols across networks for ease of access such as a one-off data sync. Devs can present the dev database on their desktop to ease use of graphical development tools.

After attending this session, audience members will be able to create a local tunnel from client to server, a remote tunnel from server to client, and do simple analysis of local vs remote evaluation of a command. Attendees will be able to use tunnels for SSH or sample other protocols (MySQL and HTTP), and tunneling via a third party system. They will also be familiar with dynamic SOCKS proxies and using SSH to tunnel graphical applications. Finally, attendees will also learn SSH configuration and command line tips for convenience of use, including using forced command to restrict an SSH key to one purpose.

Topics:

* Local Tunnels
* Remote Tunnels
* Tunnels via 3rd-party Hosts
* Dynamic Tunnels
* FoxyProxy
* X11 Tunneling
* Service Tunnel Examples
* Configuration Tips
* Command Line Tips
* Tools That Use SSH
* SSH Home Game
Captions: 
	00:00:03,120 --> 00:00:06,000
okay

00:00:03,679 --> 00:00:06,960
so you can see i'm masked up because it

00:00:06,000 --> 00:00:08,639
is covered right

00:00:06,960 --> 00:00:09,760
right now right but we're all remote so

00:00:08,639 --> 00:00:10,480
we should be fine so i'll go ahead and

00:00:09,760 --> 00:00:12,400
take this off

00:00:10,480 --> 00:00:13,920
this was from a conference i i was at a

00:00:12,400 --> 00:00:17,199
couple of weeks ago

00:00:13,920 --> 00:00:20,320
um we did some uh uh

00:00:17,199 --> 00:00:21,680
career advice with that um for shel khan

00:00:20,320 --> 00:00:24,240
and it was a really good experience help

00:00:21,680 --> 00:00:26,640
people with reviewing their resumes and

00:00:24,240 --> 00:00:29,519
and also general career advice we're

00:00:26,640 --> 00:00:31,599
thinking about adding that next week for

00:00:29,519 --> 00:00:32,559
sigel so if you're interested next

00:00:31,599 --> 00:00:34,079
friday and saturday

00:00:32,559 --> 00:00:35,920
at siegel i'll be speaking on the

00:00:34,079 --> 00:00:37,520
organizers if you get any

00:00:35,920 --> 00:00:39,440
have any questions about that please let

00:00:37,520 --> 00:00:42,000
me know now things that i

00:00:39,440 --> 00:00:43,440
am or have done i've been a system in

00:00:42,000 --> 00:00:46,160
i've been a developer dba

00:00:43,440 --> 00:00:46,960
data janitor a lot of data janitor uh i

00:00:46,160 --> 00:00:49,600
have done

00:00:46,960 --> 00:00:50,640
all kinds of things in technology uh and

00:00:49,600 --> 00:00:52,480
ssh

00:00:50,640 --> 00:00:53,680
and ssh tunnels have been really

00:00:52,480 --> 00:00:55,360
important

00:00:53,680 --> 00:00:57,199
this presentation actually comes out of

00:00:55,360 --> 00:00:59,280
a linux journal article i did many years

00:00:57,199 --> 00:00:59,920
ago where i was talking to some other

00:00:59,280 --> 00:01:02,239
system

00:00:59,920 --> 00:01:03,520
systems that i actually thought had more

00:01:02,239 --> 00:01:05,119
experience than i do

00:01:03,520 --> 00:01:06,720
uh and they didn't understand ssh

00:01:05,119 --> 00:01:08,400
tunnels yet so it's like okay

00:01:06,720 --> 00:01:10,000
this is a fundamental thing for what

00:01:08,400 --> 00:01:11,840
we're doing um

00:01:10,000 --> 00:01:13,200
and so i wrote an article and they they

00:01:11,840 --> 00:01:15,280
accepted it thankfully and i've done

00:01:13,200 --> 00:01:18,880
this presentation then many many times

00:01:15,280 --> 00:01:21,040
or very varieties of it uh since then

00:01:18,880 --> 00:01:22,159
uh i'm currently working as a cde doing

00:01:21,040 --> 00:01:24,960
database stuff for

00:01:22,159 --> 00:01:26,720
object rocket uh and yes we're hiring

00:01:24,960 --> 00:01:27,680
hey that's awesome uh rackspace is

00:01:26,720 --> 00:01:29,360
hiring as well

00:01:27,680 --> 00:01:30,880
uh if you're interested in either of

00:01:29,360 --> 00:01:34,320
those please let us know

00:01:30,880 --> 00:01:34,880
um and on fact uh we just found out that

00:01:34,320 --> 00:01:36,720
they're

00:01:34,880 --> 00:01:38,560
they closed our office in austin so

00:01:36,720 --> 00:01:40,640
basically every job in austin is now a

00:01:38,560 --> 00:01:43,280
remote job so those of you that are not

00:01:40,640 --> 00:01:44,079
uh local to rackspace or where we have

00:01:43,280 --> 00:01:45,680
an office

00:01:44,079 --> 00:01:46,960
we've got even more openings that are

00:01:45,680 --> 00:01:48,240
available which is awesome and i'm

00:01:46,960 --> 00:01:52,000
working remote for them

00:01:48,240 --> 00:01:53,600
i've worked remote for uh a while

00:01:52,000 --> 00:01:56,159
and therefore ssh tunnels have been

00:01:53,600 --> 00:01:57,759
really really important for me

00:01:56,159 --> 00:01:59,920
all right i have some presumed knowledge

00:01:57,759 --> 00:02:01,439
coming into this presentation basic ssh

00:01:59,920 --> 00:02:03,520
in the usage i'm not going to go through

00:02:01,439 --> 00:02:04,799
i'm going to get cover the basic basic

00:02:03,520 --> 00:02:06,479
of it real fast

00:02:04,799 --> 00:02:07,680
uh you understand the file system

00:02:06,479 --> 00:02:09,679
permissions and all those other things

00:02:07,680 --> 00:02:11,599
in order to get ssh running

00:02:09,679 --> 00:02:12,800
and you also understand ssh key and

00:02:11,599 --> 00:02:14,319
fingerprint usage

00:02:12,800 --> 00:02:16,239
uh one of the key things with that is

00:02:14,319 --> 00:02:18,239
don't just randomly accept keys

00:02:16,239 --> 00:02:20,080
verify your keys before you you allow

00:02:18,239 --> 00:02:22,800
them that'll be really important for the

00:02:20,080 --> 00:02:25,760
tunnels that i'm talking about today

00:02:22,800 --> 00:02:26,879
all right uh ssh secure shell again you

00:02:25,760 --> 00:02:29,840
should already know that

00:02:26,879 --> 00:02:30,959
uh open ssh the one that we're most all

00:02:29,840 --> 00:02:33,760
of us are using is

00:02:30,959 --> 00:02:35,440
an open bsd project so i want to thank

00:02:33,760 --> 00:02:36,080
the openbsd project for doing that they

00:02:35,440 --> 00:02:38,400
they

00:02:36,080 --> 00:02:39,360
forked the original ssh and have been

00:02:38,400 --> 00:02:41,760
maintaining it for

00:02:39,360 --> 00:02:43,040
a long long time i really appreciate the

00:02:41,760 --> 00:02:45,599
work that they're putting in

00:02:43,040 --> 00:02:47,120
uh to to keeping this tool that where

00:02:45,599 --> 00:02:49,360
you that we depend on

00:02:47,120 --> 00:02:50,319
in good shape for us in fact i have kind

00:02:49,360 --> 00:02:52,560
of news for them

00:02:50,319 --> 00:02:54,239
that i learned last night um it is an

00:02:52,560 --> 00:02:56,640
essential tool for system in

00:02:54,239 --> 00:02:58,959
devops all kinds of things use ssh or

00:02:56,640 --> 00:03:01,680
use ssh under the hood

00:02:58,959 --> 00:03:03,920
uh it creates secure authenticated

00:03:01,680 --> 00:03:05,440
encrypted connections between computers

00:03:03,920 --> 00:03:06,480
right so this is important we want to

00:03:05,440 --> 00:03:08,319
make sure that they're

00:03:06,480 --> 00:03:10,159
secure and encrypted but also that you

00:03:08,319 --> 00:03:12,959
can authenticate so you can verify

00:03:10,159 --> 00:03:14,720
who it is and allows passing data across

00:03:12,959 --> 00:03:16,959
encrypted tcp connections we're doing

00:03:14,720 --> 00:03:19,200
tcp and we're not doing udp

00:03:16,959 --> 00:03:20,560
and it does require an account on the

00:03:19,200 --> 00:03:22,159
remote machine again for everybody

00:03:20,560 --> 00:03:23,519
familiar with it that should not be a

00:03:22,159 --> 00:03:26,720
surprise

00:03:23,519 --> 00:03:28,239
all right now here's a basic example now

00:03:26,720 --> 00:03:29,920
everybody here should understand that

00:03:28,239 --> 00:03:30,400
there's actually extra information in

00:03:29,920 --> 00:03:33,200
here

00:03:30,400 --> 00:03:33,680
i did added the dash p and specified the

00:03:33,200 --> 00:03:36,879
port

00:03:33,680 --> 00:03:38,480
to 22. that is the default port for ssh

00:03:36,879 --> 00:03:40,000
so i could leave that out

00:03:38,480 --> 00:03:42,480
but i like to put it in there just in

00:03:40,000 --> 00:03:44,159
case somebody is uh completely new or

00:03:42,480 --> 00:03:45,519
they just don't realize what port it is

00:03:44,159 --> 00:03:46,080
but that's an it's important thing to

00:03:45,519 --> 00:03:48,959
know

00:03:46,080 --> 00:03:50,000
uh that port 22 is your normal port i

00:03:48,959 --> 00:03:52,319
will be using it a lot in this

00:03:50,000 --> 00:03:55,360
presentation

00:03:52,319 --> 00:03:57,920
uh now here is a basic tunnel now let me

00:03:55,360 --> 00:03:58,480
uh back up a little bit i forgot to to

00:03:57,920 --> 00:04:01,920
bring in

00:03:58,480 --> 00:04:03,840
a couple of my my props so

00:04:01,920 --> 00:04:05,599
i mentioned encryption and that

00:04:03,840 --> 00:04:09,280
encryption is important

00:04:05,599 --> 00:04:10,879
um but what does that mean right so

00:04:09,280 --> 00:04:12,879
this is an example it's not a perfect

00:04:10,879 --> 00:04:14,480
example but here's an example i have

00:04:12,879 --> 00:04:16,400
uh let's say that i am sending a

00:04:14,480 --> 00:04:18,639
postcard through the mail

00:04:16,400 --> 00:04:20,320
that is unencrypted anybody that sees

00:04:18,639 --> 00:04:21,600
that postcard including all the machines

00:04:20,320 --> 00:04:23,840
that take pictures of it

00:04:21,600 --> 00:04:25,280
can make copies of that postcard and see

00:04:23,840 --> 00:04:27,440
all the content that is on there

00:04:25,280 --> 00:04:28,320
so if i send this magnet through the

00:04:27,440 --> 00:04:31,120
mail

00:04:28,320 --> 00:04:32,320
and i send it as a postcard then anybody

00:04:31,120 --> 00:04:33,440
that happens to see it as it goes

00:04:32,320 --> 00:04:34,639
through will be able to see that i'm

00:04:33,440 --> 00:04:37,680
sending a gnu

00:04:34,639 --> 00:04:38,320
um and uh i don't know what the post is

00:04:37,680 --> 00:04:40,160
just for

00:04:38,320 --> 00:04:41,360
for mailing a gnu but you know whatever

00:04:40,160 --> 00:04:44,240
right so

00:04:41,360 --> 00:04:45,040
that's unencrypted encrypted in the mail

00:04:44,240 --> 00:04:48,160
example

00:04:45,040 --> 00:04:50,880
is where i take a nice envelope i put

00:04:48,160 --> 00:04:50,880
the content

00:04:51,120 --> 00:04:55,120
oops i'm not i'm doing it off screen

00:04:52,960 --> 00:04:56,960
here i put the content

00:04:55,120 --> 00:04:58,000
inside the envelope before showing it to

00:04:56,960 --> 00:04:58,880
you right that's the important part

00:04:58,000 --> 00:04:59,919
don't show it to people when you're

00:04:58,880 --> 00:05:01,520
doing it

00:04:59,919 --> 00:05:03,280
and now i should send the envelope

00:05:01,520 --> 00:05:03,919
through now they might be able to weigh

00:05:03,280 --> 00:05:06,320
it

00:05:03,919 --> 00:05:08,320
and do other things to find out what you

00:05:06,320 --> 00:05:10,400
know how much content i'm sending

00:05:08,320 --> 00:05:11,680
but if i've got a truly secure envelope

00:05:10,400 --> 00:05:12,080
which this is not because you can see

00:05:11,680 --> 00:05:14,000
through it

00:05:12,080 --> 00:05:15,919
but if i have a truly secure envelope

00:05:14,000 --> 00:05:16,479
then you can't see what the content is

00:05:15,919 --> 00:05:19,120
in there

00:05:16,479 --> 00:05:19,840
right and that is what encrypting is

00:05:19,120 --> 00:05:22,560
encrypting is

00:05:19,840 --> 00:05:23,840
is going through and obscuring the

00:05:22,560 --> 00:05:26,800
contents

00:05:23,840 --> 00:05:28,240
mathematically on your side so that as

00:05:26,800 --> 00:05:29,440
they ship from what your computer to the

00:05:28,240 --> 00:05:31,120
other computer

00:05:29,440 --> 00:05:32,639
all that can be seen is the encrypted

00:05:31,120 --> 00:05:35,120
version of it that cannot

00:05:32,639 --> 00:05:37,199
be decrypted is the theory right uh and

00:05:35,120 --> 00:05:38,880
our and we're in good shape for that

00:05:37,199 --> 00:05:40,560
and then it gets decrypted on the remote

00:05:38,880 --> 00:05:43,360
side

00:05:40,560 --> 00:05:44,560
so creating a tunnel is not really

00:05:43,360 --> 00:05:46,160
creating a tunnel though because you

00:05:44,560 --> 00:05:47,600
feel like a tunnel you get this pipe

00:05:46,160 --> 00:05:48,240
right and you're sending stuff down the

00:05:47,600 --> 00:05:50,240
pipe

00:05:48,240 --> 00:05:52,000
and things are going through but really

00:05:50,240 --> 00:05:55,680
what's happening is every single

00:05:52,000 --> 00:05:57,199
packet whether it be the gnu or my plug

00:05:55,680 --> 00:05:59,520
magnet we're going through and

00:05:57,199 --> 00:06:01,039
encrypting that data

00:05:59,520 --> 00:06:03,280
as a whole and then we're still sending

00:06:01,039 --> 00:06:05,360
packets so it's more like rail cars

00:06:03,280 --> 00:06:06,479
right where we have you have the content

00:06:05,360 --> 00:06:08,800
inside the rail car

00:06:06,479 --> 00:06:10,160
inside the the container you can't see

00:06:08,800 --> 00:06:11,039
what's inside the container you can just

00:06:10,160 --> 00:06:12,400
see the container

00:06:11,039 --> 00:06:14,080
you can still see information about the

00:06:12,400 --> 00:06:15,600
container you can see who owns it

00:06:14,080 --> 00:06:17,600
where it's going where it's coming from

00:06:15,600 --> 00:06:19,919
things like that right and that

00:06:17,600 --> 00:06:21,039
we still have a lot of that in our tcp

00:06:19,919 --> 00:06:22,240
packets there's still a lot of

00:06:21,039 --> 00:06:24,880
information there

00:06:22,240 --> 00:06:25,360
about where it's going to and from but

00:06:24,880 --> 00:06:27,120
the key

00:06:25,360 --> 00:06:28,960
the goal is that everything inside the

00:06:27,120 --> 00:06:29,840
container is is locked down so that

00:06:28,960 --> 00:06:31,919
people can't

00:06:29,840 --> 00:06:34,240
can't figure out what it is by observing

00:06:31,919 --> 00:06:35,520
uh they can't take a copy of it

00:06:34,240 --> 00:06:37,440
and find out what it is because all they

00:06:35,520 --> 00:06:40,479
get is a copy of that that is

00:06:37,440 --> 00:06:41,600
of the encrypted information right so

00:06:40,479 --> 00:06:43,039
that's what we're really doing we're not

00:06:41,600 --> 00:06:43,759
building a tunnel so much as we're

00:06:43,039 --> 00:06:47,280
building

00:06:43,759 --> 00:06:49,759
a rail line with encrypted uh rail car

00:06:47,280 --> 00:06:51,599
content in the rail cars all right now

00:06:49,759 --> 00:06:54,240
in order to build that tunnel though

00:06:51,599 --> 00:06:56,080
uh this command will will do that uh the

00:06:54,240 --> 00:06:57,840
dash capital l says create a local

00:06:56,080 --> 00:07:00,240
tunnel we'll talk about what local and

00:06:57,840 --> 00:07:03,280
uh it means versus remote in a second

00:07:00,240 --> 00:07:06,319
and i'm saying from that first port

00:07:03,280 --> 00:07:08,319
the 2222 i want to build a tunnel from

00:07:06,319 --> 00:07:09,599
that port on my machine on my local

00:07:08,319 --> 00:07:12,639
machine

00:07:09,599 --> 00:07:14,560
to firewall.example.com and then to port

00:07:12,639 --> 00:07:17,759
22 on that machine

00:07:14,560 --> 00:07:19,599
uh so the the ssh port on that machine

00:07:17,759 --> 00:07:22,080
and i'm going to do that i'm going to

00:07:19,599 --> 00:07:25,120
connect to firewall.example.com

00:07:22,080 --> 00:07:27,280
so the the second half i can

00:07:25,120 --> 00:07:28,840
cool if we can see mice here there we go

00:07:27,280 --> 00:07:31,759
so i'm actually connecting there

00:07:28,840 --> 00:07:33,599
oops to firewall.example.com and it's

00:07:31,759 --> 00:07:37,000
saying create that tunnel

00:07:33,599 --> 00:07:38,759
now those are the same machine name so

00:07:37,000 --> 00:07:40,560
firewall.example.com says hey who's

00:07:38,759 --> 00:07:43,360
firewall.example.com oh that's me

00:07:40,560 --> 00:07:44,639
i'll make it to my to my port 22. and

00:07:43,360 --> 00:07:46,720
one of the keys there is i'm now

00:07:44,639 --> 00:07:48,400
making that port that connection on

00:07:46,720 --> 00:07:52,479
localhost

00:07:48,400 --> 00:07:56,400
so the tunnel is from 2222

00:07:52,479 --> 00:08:00,319
localhost so 127.0001

00:07:56,400 --> 00:08:03,160
on my machine to port 22

00:08:00,319 --> 00:08:04,479
local host on the firewall machine so

00:08:03,160 --> 00:08:07,840
00:08:04,479 --> 00:08:10,560
from firewall's perspective so then i

00:08:07,840 --> 00:08:10,560
can enter that

00:08:10,840 --> 00:08:13,840
tunnel

00:08:13,919 --> 00:08:17,599
using an ssh connection again i'm

00:08:15,759 --> 00:08:19,280
specifying the port like i did in that

00:08:17,599 --> 00:08:22,080
very first example but this time i'm

00:08:19,280 --> 00:08:24,240
specifying port 2222

00:08:22,080 --> 00:08:26,319
and again i'm talking to localhost on my

00:08:24,240 --> 00:08:28,080
machine now what happens when i make

00:08:26,319 --> 00:08:30,800
this ssh connection

00:08:28,080 --> 00:08:31,759
is that ssh says okay i'm going to talk

00:08:30,800 --> 00:08:34,560
to my machine

00:08:31,759 --> 00:08:35,440
me and i'm going to talk to port 2222 on

00:08:34,560 --> 00:08:36,479
my machine

00:08:35,440 --> 00:08:38,719
and that's where i'm going to make the

00:08:36,479 --> 00:08:41,760
connection but then it follows up

00:08:38,719 --> 00:08:42,560
that tunnel and it actually talks to the

00:08:41,760 --> 00:08:45,240
ssh

00:08:42,560 --> 00:08:46,560
daemon the ssh server on

00:08:45,240 --> 00:08:50,160
firewall.example.com

00:08:46,560 --> 00:08:52,240
over firewalls localhost so this tunnel

00:08:50,160 --> 00:08:53,600
is not talking to an external interface

00:08:52,240 --> 00:08:55,920
on either side

00:08:53,600 --> 00:08:58,399
it is talking to local host on both

00:08:55,920 --> 00:09:01,040
machines

00:08:58,399 --> 00:09:04,000
now here's a a basic diagram of what's

00:09:01,040 --> 00:09:04,000
going on with that

00:09:04,480 --> 00:09:08,160
oh i've got to change one side all right

00:09:07,040 --> 00:09:10,480
so anyway so here we go

00:09:08,160 --> 00:09:11,760
have a basic machine this dash

00:09:10,480 --> 00:09:14,720
connection is your

00:09:11,760 --> 00:09:15,600
ssh tunnel that's the original ssh

00:09:14,720 --> 00:09:19,000
connection

00:09:15,600 --> 00:09:21,279
um that is going from my machine to

00:09:19,000 --> 00:09:24,720
firewall.example.com

00:09:21,279 --> 00:09:28,320
and then the green part is the tunneled

00:09:24,720 --> 00:09:31,360
connection that the dash l is making

00:09:28,320 --> 00:09:32,320
the dash capital l and then finally with

00:09:31,360 --> 00:09:35,120
the ssh

00:09:32,320 --> 00:09:35,680
p where i'm specifying localhost that's

00:09:35,120 --> 00:09:37,440
the the

00:09:35,680 --> 00:09:39,839
blue connection inside the tunnel that

00:09:37,440 --> 00:09:43,519
is making that ssh connection

00:09:39,839 --> 00:09:44,720
all right all right so then we can also

00:09:43,519 --> 00:09:47,760
do that reverse

00:09:44,720 --> 00:09:48,720
so l is local and and r is remote or

00:09:47,760 --> 00:09:51,839
reverse

00:09:48,720 --> 00:09:52,880
whichever way helps you keep track of it

00:09:51,839 --> 00:09:55,600
or

00:09:52,880 --> 00:09:56,720
visualize what's going on and for this

00:09:55,600 --> 00:09:59,839
connection

00:09:56,720 --> 00:10:02,240
i'm actually making a connection from

00:09:59,839 --> 00:10:03,120
that remote host a tunnel from that

00:10:02,240 --> 00:10:07,120
remote host

00:10:03,120 --> 00:10:09,920
back to my local host so now

00:10:07,120 --> 00:10:12,160
anybody on that remote host would be

00:10:09,920 --> 00:10:13,279
able to connect to port 2222 on the

00:10:12,160 --> 00:10:16,560
local host

00:10:13,279 --> 00:10:21,120
and be able to then connect back to my

00:10:16,560 --> 00:10:21,120
ssh server on my client machine

00:10:21,519 --> 00:10:27,040
so they it's still localhost versus

00:10:28,399 --> 00:10:35,360
still local host 2 is still interpreted

00:10:32,240 --> 00:10:36,800
the whole portion

00:10:35,360 --> 00:10:38,640
the remote machine that i'm connecting

00:10:36,800 --> 00:10:40,959
to

00:10:38,640 --> 00:10:42,640
and then on host 2 you can see the

00:10:40,959 --> 00:10:45,279
prompts i've got host 1 and host 2

00:10:42,640 --> 00:10:47,360
on host 2 again i can connect up to port

00:10:45,279 --> 00:10:50,959
222 on localhost

00:10:47,360 --> 00:10:54,240
and connect back to my ssh

00:10:50,959 --> 00:10:56,240
daemon on my client machine on host one

00:10:54,240 --> 00:10:58,160
now an important part of this is that

00:10:56,240 --> 00:10:59,360
you need to know what those keys are the

00:10:58,160 --> 00:11:01,680
fingerprints for

00:10:59,360 --> 00:11:02,720
the ssh demons you're talking to don't

00:11:01,680 --> 00:11:04,800
have time to go into

00:11:02,720 --> 00:11:06,160
this in this talk in fact that could be

00:11:04,800 --> 00:11:08,000
several three-hour talks

00:11:06,160 --> 00:11:09,920
ssh key management can be and

00:11:08,000 --> 00:11:12,720
verification can be uh

00:11:09,920 --> 00:11:14,480
detailed um so you need to make sure you

00:11:12,720 --> 00:11:16,079
know that ahead of time before making

00:11:14,480 --> 00:11:16,720
this connection please don't just accept

00:11:16,079 --> 00:11:18,720
it

00:11:16,720 --> 00:11:20,240
um because that opens you up to man in

00:11:18,720 --> 00:11:21,440
the middle especially when we get to the

00:11:20,240 --> 00:11:24,880
point where i talk about

00:11:21,440 --> 00:11:26,959
you can't trust that remote machine um

00:11:24,880 --> 00:11:28,480
where we're throwing tunnels and stuff

00:11:26,959 --> 00:11:31,839
um and

00:11:28,480 --> 00:11:33,120
uh verify that but you also then need to

00:11:31,839 --> 00:11:34,480
go through and make sure there's a

00:11:33,120 --> 00:11:37,519
there's an entry

00:11:34,480 --> 00:11:40,160
for uh localhost and that port

00:11:37,519 --> 00:11:40,800
for that particular fingerprint slash

00:11:40,160 --> 00:11:43,839
key

00:11:40,800 --> 00:11:46,959
uh that you're going to talk talk to

00:11:43,839 --> 00:11:49,120
all right uh now here is

00:11:46,959 --> 00:11:51,040
an example where i'm i'm simplifying

00:11:49,120 --> 00:11:51,920
this by getting rid of the extra host

00:11:51,040 --> 00:11:54,320
too

00:11:51,920 --> 00:11:56,399
because we're we're really talking about

00:11:54,320 --> 00:11:58,399
who does

00:11:56,399 --> 00:12:00,079
that remote machine think it's talking

00:11:58,399 --> 00:12:00,560
to in this case i want to talk to local

00:12:00,079 --> 00:12:02,720
host

00:12:00,560 --> 00:12:04,240
so instead of saying hey fred talk to

00:12:02,720 --> 00:12:06,560
fred i can say hey fred

00:12:04,240 --> 00:12:07,680
talk to self local hosts is a way of

00:12:06,560 --> 00:12:09,040
saying talk to self

00:12:07,680 --> 00:12:11,120
makes it a little bit easier to

00:12:09,040 --> 00:12:13,760
understand i think

00:12:11,120 --> 00:12:14,399
uh and it also makes it a lot shorter uh

00:12:13,760 --> 00:12:16,720
and everything

00:12:14,399 --> 00:12:17,760
but i like to to give the full example

00:12:16,720 --> 00:12:19,040
with the host names

00:12:17,760 --> 00:12:21,680
because that's actually an important

00:12:19,040 --> 00:12:23,680
difference it just

00:12:21,680 --> 00:12:25,279
if you give it itself it will then talk

00:12:23,680 --> 00:12:26,880
to itself

00:12:25,279 --> 00:12:28,000
all right now throwing a connection this

00:12:26,880 --> 00:12:29,040
is kind of what i was talking about a

00:12:28,000 --> 00:12:30,639
second ago

00:12:29,040 --> 00:12:31,920
uh we need a couple of extra we don't

00:12:30,639 --> 00:12:33,279
need a couple of extra options but i

00:12:31,920 --> 00:12:34,959
threw a couple extra options in here

00:12:33,279 --> 00:12:37,360
we'll talk about those

00:12:34,959 --> 00:12:38,320
uh at some point uh so in this case

00:12:37,360 --> 00:12:40,160
though uh

00:12:38,320 --> 00:12:42,079
this is uh by the way the same time

00:12:40,160 --> 00:12:42,800
tomorrow uh dave stokes i think is

00:12:42,079 --> 00:12:46,000
talking about

00:12:42,800 --> 00:12:49,120
mysql this is uh sort of going in here

00:12:46,000 --> 00:12:52,639
all right so uh going to the database uh

00:12:49,120 --> 00:12:55,920
i'm saying firewall.example.com

00:12:52,639 --> 00:13:00,079
instead of port of

00:12:55,920 --> 00:13:02,079
of uh tunneling port 22 for ssh

00:13:00,079 --> 00:13:04,000
i want to port i want to tunnel to the

00:13:02,079 --> 00:13:06,959
database instead

00:13:04,000 --> 00:13:08,480
and i want to tunnel to the database on

00:13:06,959 --> 00:13:12,079
a different machine

00:13:08,480 --> 00:13:15,360
on db.example.com right

00:13:12,079 --> 00:13:17,279
a second so now

00:13:15,360 --> 00:13:19,519
what i'm doing is on my local host where

00:13:17,279 --> 00:13:24,000
my client is i'm making a connection

00:13:19,519 --> 00:13:26,959
from 3306 across firewall.example.com

00:13:24,000 --> 00:13:27,839
to port 3306 the external portion of it

00:13:26,959 --> 00:13:30,079
though because

00:13:27,839 --> 00:13:32,399
firewall is talking to the external port

00:13:30,079 --> 00:13:34,320
of db.example.com

00:13:32,399 --> 00:13:35,600
now an important part of this is the

00:13:34,320 --> 00:13:38,560
part that is thrown

00:13:35,600 --> 00:13:40,480
the connection from firewall.example.com

00:13:38,560 --> 00:13:43,279
over to db.example.com

00:13:40,480 --> 00:13:43,760
is not encrypted ssh is not encrypting

00:13:43,279 --> 00:13:45,839
that

00:13:43,760 --> 00:13:48,079
there's no client connection there it's

00:13:45,839 --> 00:13:51,600
just throwing tcp packets across the

00:13:48,079 --> 00:13:52,959
wire right so uh keep that in mind when

00:13:51,600 --> 00:13:55,519
you throw a connection

00:13:52,959 --> 00:13:56,720
the ssh tunnel is not protecting that

00:13:55,519 --> 00:13:59,199
portion of the connection

00:13:56,720 --> 00:14:00,399
the part up until then from my client to

00:13:59,199 --> 00:14:02,959
firewall that example

00:14:00,399 --> 00:14:03,600
is still encrypted but from firewalled

00:14:02,959 --> 00:14:05,360
example

00:14:03,600 --> 00:14:08,000
to the database that is not being

00:14:05,360 --> 00:14:10,639
encrypted by ssh

00:14:08,000 --> 00:14:13,920
so as i mentioned dave is doing a my

00:14:10,639 --> 00:14:16,160
school presentation tomorrow that's 3306

00:14:13,920 --> 00:14:17,440
etsy services is a great file to find

00:14:16,160 --> 00:14:19,519
place to find out

00:14:17,440 --> 00:14:20,959
what services are typically run on

00:14:19,519 --> 00:14:22,240
particular ports if you're not familiar

00:14:20,959 --> 00:14:25,519
with it

00:14:22,240 --> 00:14:26,560
all right so let's move this down a

00:14:25,519 --> 00:14:30,399
little bit

00:14:26,560 --> 00:14:32,800
there we are okay so back to my ssh

00:14:30,399 --> 00:14:34,560
tunnel diagram the first part from my

00:14:32,800 --> 00:14:36,079
machine to the gateway is still the same

00:14:34,560 --> 00:14:37,680
we haven't changed that we still got we

00:14:36,079 --> 00:14:39,920
got the original connection

00:14:37,680 --> 00:14:41,600
tunnel connection uh and the ssh

00:14:39,920 --> 00:14:44,639
connection coming across it

00:14:41,600 --> 00:14:48,240
but then from gateway to

00:14:44,639 --> 00:14:48,959
machine 2 we have the forwarded

00:14:48,240 --> 00:14:50,880
connection

00:14:48,959 --> 00:14:52,639
and again that is nodding that is not

00:14:50,880 --> 00:14:53,600
encrypted the forwarded portion of it is

00:14:52,639 --> 00:14:55,519
not encrypted

00:14:53,600 --> 00:14:57,120
now if i make a client connection across

00:14:55,519 --> 00:14:59,920
that to a server on that other machine

00:14:57,120 --> 00:15:01,519
where the client connection to that to

00:14:59,920 --> 00:15:02,800
the new server is encrypted then i get

00:15:01,519 --> 00:15:04,959
encryption that way

00:15:02,800 --> 00:15:07,600
in this example i'm using ssh to do that

00:15:04,959 --> 00:15:10,800
so it would still be encrypted

00:15:07,600 --> 00:15:12,240
so we get the examples here where i'm

00:15:10,800 --> 00:15:13,760
going through and doing stuff the things

00:15:12,240 --> 00:15:16,800
with the equal signs are encrypted

00:15:13,760 --> 00:15:20,560
the things with the dashes are not

00:15:16,800 --> 00:15:24,079
and those typographers got to me

00:15:20,560 --> 00:15:27,360
all right i don't know what it just did

00:15:24,079 --> 00:15:30,880
uh i returned to slideshow

00:15:27,360 --> 00:15:33,600
cool remind me not to do that again

00:15:30,880 --> 00:15:34,480
all right now we can also make a dynamic

00:15:33,600 --> 00:15:37,120
tunnel

00:15:34,480 --> 00:15:37,600
that's the dash capital d and what that

00:15:37,120 --> 00:15:40,480
allows

00:15:37,600 --> 00:15:41,680
me to do is say anything that's using

00:15:40,480 --> 00:15:43,279
it's a socks proxy

00:15:41,680 --> 00:15:45,440
anything that then connects this socks

00:15:43,279 --> 00:15:46,560
proxy will appear to come from the

00:15:45,440 --> 00:15:48,720
remote machine

00:15:46,560 --> 00:15:51,040
so if i make a dynamic tunnel to

00:15:48,720 --> 00:15:53,920
firewall that example.com from my

00:15:51,040 --> 00:15:55,920
from my clients so that now i have a

00:15:53,920 --> 00:15:58,480
connection inside the network right

00:15:55,920 --> 00:15:59,360
at example.com the mythical corporation

00:15:58,480 --> 00:16:01,680
that we all

00:15:59,360 --> 00:16:03,759
know and love right so if i make that

00:16:01,680 --> 00:16:06,000
connection in there i now have

00:16:03,759 --> 00:16:07,680
a connection inside the network i can

00:16:06,000 --> 00:16:08,000
get to resources that are only available

00:16:07,680 --> 00:16:11,199
inside

00:16:08,000 --> 00:16:12,160
the network if i use foxy proxy for

00:16:11,199 --> 00:16:15,120
instance or

00:16:12,160 --> 00:16:17,600
many other sox proxies i can then make

00:16:15,120 --> 00:16:19,440
client connections on my local machine

00:16:17,600 --> 00:16:21,120
that appear to be coming from the from

00:16:19,440 --> 00:16:23,040
the internal network so as long as it's

00:16:21,120 --> 00:16:23,600
firewall the example.com has access to

00:16:23,040 --> 00:16:26,279
them

00:16:23,600 --> 00:16:27,519
so for instance if there's a

00:16:26,279 --> 00:16:29,440
www.internal.example.com

00:16:27,519 --> 00:16:31,680
that is only available from inside the

00:16:29,440 --> 00:16:34,240
example.com corporate network

00:16:31,680 --> 00:16:35,839
then i will be able to get to that even

00:16:34,240 --> 00:16:38,320
though my machine isn't on

00:16:35,839 --> 00:16:40,880
in the local network and the connection

00:16:38,320 --> 00:16:42,880
from my machine to firewall.example.com

00:16:40,880 --> 00:16:44,959
is still encrypted by ssh

00:16:42,880 --> 00:16:46,000
right now the part that i'm throwing

00:16:44,959 --> 00:16:47,120
that's going from firewall to

00:16:46,000 --> 00:16:49,120
example.com

00:16:47,120 --> 00:16:51,360
to the internal web server is not

00:16:49,120 --> 00:16:53,600
encrypted by ssh

00:16:51,360 --> 00:16:55,040
so make sure you've got https set up

00:16:53,600 --> 00:16:56,880
properly on that web server

00:16:55,040 --> 00:16:58,160
if you want to make sure things that are

00:16:56,880 --> 00:16:59,680
on the server are encrypted

00:16:58,160 --> 00:17:02,160
and that should always be the case at

00:16:59,680 --> 00:17:04,319
this point all right

00:17:02,160 --> 00:17:05,280
i can also do a double reverse so what

00:17:04,319 --> 00:17:07,120
happens if

00:17:05,280 --> 00:17:08,959
i'm on an internal network that you

00:17:07,120 --> 00:17:10,400
can't a machine you can't get to

00:17:08,959 --> 00:17:12,000
and they need to talk to another machine

00:17:10,400 --> 00:17:14,559
that's also on an internal network

00:17:12,000 --> 00:17:15,120
so they can't ssh to each other directly

00:17:14,559 --> 00:17:17,919
i need

00:17:15,120 --> 00:17:18,319
some way to get in in between so i can

00:17:17,919 --> 00:17:21,360
use

00:17:18,319 --> 00:17:23,280
a a

00:17:21,360 --> 00:17:24,319
trusted or untrusted and this is where i

00:17:23,280 --> 00:17:25,039
was talking about where you don't trust

00:17:24,319 --> 00:17:27,919
things

00:17:25,039 --> 00:17:29,919
um machine in the middle that both of

00:17:27,919 --> 00:17:30,640
them can connect to and build encrypted

00:17:29,919 --> 00:17:33,919
tunnels

00:17:30,640 --> 00:17:34,720
both ways off of that machine so in the

00:17:33,919 --> 00:17:38,000
first

00:17:34,720 --> 00:17:40,880
first one i'm creating a tunnel from my

00:17:38,000 --> 00:17:44,880
local host port 3333

00:17:40,880 --> 00:17:47,360
to port 3333 on that firewall

00:17:44,880 --> 00:17:48,799
but also from that firewall back from

00:17:47,360 --> 00:17:51,280
port 2222

00:17:48,799 --> 00:17:52,640
to my ssh server so now the anybody on

00:17:51,280 --> 00:17:55,919
that asset on that firewall

00:17:52,640 --> 00:17:59,520
can ssh to my ssh server on my client

00:17:55,919 --> 00:18:00,320
right they still have to have an account

00:17:59,520 --> 00:18:01,600
they still have to be able to

00:18:00,320 --> 00:18:02,480
authenticate hopefully you've locked

00:18:01,600 --> 00:18:03,760
down your ssh

00:18:02,480 --> 00:18:05,440
server you're not just saying i'll let

00:18:03,760 --> 00:18:06,240
anybody connect with any random keys

00:18:05,440 --> 00:18:07,520
right you know

00:18:06,240 --> 00:18:09,919
i'm not even certain you could set that

00:18:07,520 --> 00:18:12,320
up in ssh i've never wanted to find out

00:18:09,919 --> 00:18:15,039
ever wanted to try it then on the other

00:18:12,320 --> 00:18:15,840
host on host 2 i do a similar type of

00:18:15,039 --> 00:18:19,520
thing

00:18:15,840 --> 00:18:23,280
but now i'm creating that that tunnel

00:18:19,520 --> 00:18:24,080
from 2222 on localhost to 2222 on the

00:18:23,280 --> 00:18:26,240
firewall

00:18:24,080 --> 00:18:27,280
but when i connect to 2222 on the

00:18:26,240 --> 00:18:29,440
firewall

00:18:27,280 --> 00:18:32,240
i'm actually connecting to that reverse

00:18:29,440 --> 00:18:34,880
tunnel from host one

00:18:32,240 --> 00:18:36,400
and i create a reverse tunnel from 3333

00:18:34,880 --> 00:18:39,520
on the firewall back to

00:18:36,400 --> 00:18:41,679
host 2. so now that forward

00:18:39,520 --> 00:18:43,520
that local forward from host 1 is

00:18:41,679 --> 00:18:45,280
actually connecting to the tunnel that's

00:18:43,520 --> 00:18:47,840
coming back to host two

00:18:45,280 --> 00:18:49,280
so now when i go through and i think

00:18:47,840 --> 00:18:51,840
i've got this in here

00:18:49,280 --> 00:18:53,360
oh i've simplified it with uh localhost

00:18:51,840 --> 00:18:54,640
so it's a little bit easier to read and

00:18:53,360 --> 00:18:56,320
fits all in one line

00:18:54,640 --> 00:18:58,160
oops and i did me leave out the client

00:18:56,320 --> 00:19:01,600
connections but on the

00:18:58,160 --> 00:19:04,960
on host one now if i ssh to port

00:19:01,600 --> 00:19:06,720
3333 on localhost i'm actually talking

00:19:04,960 --> 00:19:10,080
to the ssh server on host

00:19:06,720 --> 00:19:12,720
2. i'm going across the firewall

00:19:10,080 --> 00:19:14,880
but i'm my client connection is to the

00:19:12,720 --> 00:19:17,520
ssh server on on host 2

00:19:14,880 --> 00:19:19,120
and i will get the fingerprint for the

00:19:17,520 --> 00:19:21,600
ssh server on host 2.

00:19:19,120 --> 00:19:22,799
if i'm not i'm being made in the middle

00:19:21,600 --> 00:19:24,480
plain and simple

00:19:22,799 --> 00:19:27,120
i'm getting the connect i'm getting the

00:19:24,480 --> 00:19:28,640
ssh server on host 2

00:19:27,120 --> 00:19:30,720
through that tunnel even though i'm

00:19:28,640 --> 00:19:33,320
going over another machine

00:19:30,720 --> 00:19:34,640
in fact somebody on that machine on

00:19:33,320 --> 00:19:37,039
firewall.example.com

00:19:34,640 --> 00:19:39,360
could be looking at that connection

00:19:37,039 --> 00:19:40,880
right so they have root they could have

00:19:39,360 --> 00:19:41,919
gone through and done something with the

00:19:40,880 --> 00:19:43,280
ssh daemon

00:19:41,919 --> 00:19:45,600
there's a bunch of things they could do

00:19:43,280 --> 00:19:48,160
to go through and and and

00:19:45,600 --> 00:19:50,400
compromise that tunnel where they could

00:19:48,160 --> 00:19:52,720
review data this is why i say

00:19:50,400 --> 00:19:54,720
whether that you can whether that

00:19:52,720 --> 00:19:56,880
machine is trusted or untrusted

00:19:54,720 --> 00:19:58,320
in fact let's say that it's untrusted

00:19:56,880 --> 00:20:01,600
let's say that that uh

00:19:58,320 --> 00:20:04,480
uh last week your team played the

00:20:01,600 --> 00:20:04,880
the the network security team in uh and

00:20:04,480 --> 00:20:06,720
uh

00:20:04,880 --> 00:20:08,159
uh softball because that's a safe thing

00:20:06,720 --> 00:20:10,080
to do right now right

00:20:08,159 --> 00:20:11,440
and you kick their butts and they're

00:20:10,080 --> 00:20:13,760
pissed off at you and they want to take

00:20:11,440 --> 00:20:15,200
revenge for whatever reason right

00:20:13,760 --> 00:20:16,960
well they've got ways of messing with

00:20:15,200 --> 00:20:19,600
you on this but

00:20:16,960 --> 00:20:21,280
if you verify that connection that is

00:20:19,600 --> 00:20:21,919
that is a secure connection from your

00:20:21,280 --> 00:20:25,120
client

00:20:21,919 --> 00:20:25,919
to that server on on host 2 and they

00:20:25,120 --> 00:20:28,240
can't

00:20:25,919 --> 00:20:29,600
look at it they can they can kill it

00:20:28,240 --> 00:20:30,640
they can prevent you from making the

00:20:29,600 --> 00:20:32,159
connection

00:20:30,640 --> 00:20:34,159
but they can't intercept it they can't

00:20:32,159 --> 00:20:35,600
read it they can't decrypt it even

00:20:34,159 --> 00:20:37,280
though you're going across their ssh

00:20:35,600 --> 00:20:38,159
demon because you're making a client

00:20:37,280 --> 00:20:41,039
connection

00:20:38,159 --> 00:20:42,320
from your client to to the server from

00:20:41,039 --> 00:20:44,400
the client on host one

00:20:42,320 --> 00:20:45,919
to the server on host two or vice versa

00:20:44,400 --> 00:20:48,480
from the client on host two

00:20:45,919 --> 00:20:49,840
back to the the server on host one and

00:20:48,480 --> 00:20:52,080
as long as you verify your

00:20:49,840 --> 00:20:52,880
your keys properly then you're making

00:20:52,080 --> 00:20:55,200
connection

00:20:52,880 --> 00:20:57,039
and i've had people say oh that's not

00:20:55,200 --> 00:20:57,840
true if the machine is compromised it's

00:20:57,039 --> 00:21:00,480
complement

00:20:57,840 --> 00:21:03,200
yes because if that's not true ssh

00:21:00,480 --> 00:21:03,919
doesn't work every time you make an ssh

00:21:03,200 --> 00:21:05,760
connection because

00:21:03,919 --> 00:21:07,120
somebody else's switch across somebody

00:21:05,760 --> 00:21:07,840
else's router across somebody else's

00:21:07,120 --> 00:21:09,280
firewall

00:21:07,840 --> 00:21:10,880
every time you're doing that you're

00:21:09,280 --> 00:21:14,000
making an ssh connection

00:21:10,880 --> 00:21:17,520
across untrusted

00:21:14,000 --> 00:21:18,720
equipment any if ssh isn't secure from

00:21:17,520 --> 00:21:21,760
that client to that

00:21:18,720 --> 00:21:24,720
to that server across

00:21:21,760 --> 00:21:26,159
the this tunnel then it's not it's not

00:21:24,720 --> 00:21:29,679
encrypted it's not safe

00:21:26,159 --> 00:21:31,600
to make across the internet plain simple

00:21:29,679 --> 00:21:33,280
so you gotta but you've got to verify

00:21:31,600 --> 00:21:35,679
those keys and make sure you're not

00:21:33,280 --> 00:21:38,400
getting man in the middle

00:21:35,679 --> 00:21:41,039
all right we can also do graphical stuff

00:21:38,400 --> 00:21:42,720
so you can use ssh dash capital y

00:21:41,039 --> 00:21:44,640
and if you do that you can allow you can

00:21:42,720 --> 00:21:45,919
shoot x terms and other graphical

00:21:44,640 --> 00:21:48,640
clients back in

00:21:45,919 --> 00:21:49,440
uh so one of the things i do for this is

00:21:48,640 --> 00:21:52,400
uh

00:21:49,440 --> 00:21:53,679
i will go through and create uh

00:21:52,400 --> 00:21:56,000
containers

00:21:53,679 --> 00:21:57,280
that are one use type of things or

00:21:56,000 --> 00:21:59,200
something where i want to keep something

00:21:57,280 --> 00:22:00,960
isolated so create create a container

00:21:59,200 --> 00:22:03,280
for my banking stuff

00:22:00,960 --> 00:22:04,000
and then i can ssh dash y into my

00:22:03,280 --> 00:22:07,360
container

00:22:04,000 --> 00:22:09,120
and i can shoot the firefox display

00:22:07,360 --> 00:22:11,039
back to my desktop so it's convenient to

00:22:09,120 --> 00:22:13,840
use um but i've

00:22:11,039 --> 00:22:14,320
i'm keeping it isolated uh and all that

00:22:13,840 --> 00:22:16,559
all the

00:22:14,320 --> 00:22:18,000
the access it has isolated to just

00:22:16,559 --> 00:22:19,760
within that container

00:22:18,000 --> 00:22:21,919
to the extent the containers are secure

00:22:19,760 --> 00:22:25,200
and all that blah blah blah right

00:22:21,919 --> 00:22:26,480
uh and then uh you do need a dash new

00:22:25,200 --> 00:22:29,520
dash instance

00:22:26,480 --> 00:22:31,360
uh and i suggest uh calling up profile

00:22:29,520 --> 00:22:33,039
manager as well just makes it easier

00:22:31,360 --> 00:22:34,640
uh in order to get that because

00:22:33,039 --> 00:22:36,080
otherwise firefox is helpful

00:22:34,640 --> 00:22:38,159
and tries to open it up on your local

00:22:36,080 --> 00:22:41,840
machine which is um

00:22:38,159 --> 00:22:41,840
inconvenient as heck

00:22:43,919 --> 00:22:50,400
all right okay sandboxing vm same type

00:22:48,400 --> 00:22:52,480
of thing

00:22:50,400 --> 00:22:55,600
yeah oh so far i named it there

00:22:52,480 --> 00:22:59,120
javascript is dangerous all right

00:22:55,600 --> 00:23:02,480
so keys you can generate a key

00:22:59,120 --> 00:23:04,880
all the examples say id dot

00:23:02,480 --> 00:23:06,559
and the key type give it a real name so

00:23:04,880 --> 00:23:09,200
you know what you're talking to

00:23:06,559 --> 00:23:10,480
if you as a system man or developer if

00:23:09,200 --> 00:23:11,760
you don't have a bunch of different keys

00:23:10,480 --> 00:23:14,720
on your system

00:23:11,760 --> 00:23:16,000
you should plain and simple uh and you

00:23:14,720 --> 00:23:18,720
can put authorized keys

00:23:16,000 --> 00:23:19,520
again you should know that um and then a

00:23:18,720 --> 00:23:22,080
convenience

00:23:19,520 --> 00:23:23,760
wrapper script is nice it's called uh

00:23:22,080 --> 00:23:26,320
ssh copy id

00:23:23,760 --> 00:23:27,600
and that will copy your key over for you

00:23:26,320 --> 00:23:28,720
and make sure the permissions are

00:23:27,600 --> 00:23:30,799
correct and everything like that so

00:23:28,720 --> 00:23:31,919
that's actually really convenient

00:23:30,799 --> 00:23:33,200
i don't actually use it because i always

00:23:31,919 --> 00:23:34,240
forget about it until after i put the

00:23:33,200 --> 00:23:35,760
key in place

00:23:34,240 --> 00:23:38,320
but the times i remembered it does save

00:23:35,760 --> 00:23:40,559
me several steps

00:23:38,320 --> 00:23:41,520
uh service example so i gave this kind

00:23:40,559 --> 00:23:44,960
of earlier with the

00:23:41,520 --> 00:23:48,960
mysql uh so again we're doing the uh

00:23:44,960 --> 00:23:50,159
the local tunnel uh that goes across

00:23:48,960 --> 00:23:52,559
dot com firewall.example.com the

00:23:50,159 --> 00:23:54,240
database uh

00:23:52,559 --> 00:23:55,760
re-emphasize again the part going from

00:23:54,240 --> 00:23:59,200
the firewall thrown

00:23:55,760 --> 00:24:02,080
to the database is not encrypted by ssh

00:23:59,200 --> 00:24:03,679
now when i connect over from mysql to

00:24:02,080 --> 00:24:05,440
localhost

00:24:03,679 --> 00:24:07,760
i actually have to do something new for

00:24:05,440 --> 00:24:08,559
that by sql connection i just can't just

00:24:07,760 --> 00:24:11,600
say

00:24:08,559 --> 00:24:13,600
local host local host import 3306

00:24:11,600 --> 00:24:15,679
i need to tell it what protocol to use i

00:24:13,600 --> 00:24:17,600
needed you tell it to use tcp

00:24:15,679 --> 00:24:18,880
the reason is a little mysql quirk that

00:24:17,600 --> 00:24:19,520
i didn't discover until i've been giving

00:24:18,880 --> 00:24:21,520
this example

00:24:19,520 --> 00:24:22,880
this this presentation a bunch of times

00:24:21,520 --> 00:24:25,520
um but

00:24:22,880 --> 00:24:26,240
when you use localhost mysql tries to

00:24:25,520 --> 00:24:29,880
use udp

00:24:26,240 --> 00:24:33,520
sock instead so you can just say

00:24:29,880 --> 00:24:37,279
127.001 and then it'll it'll default to

00:24:33,520 --> 00:24:39,200
that port and using tcp or you can use

00:24:37,279 --> 00:24:41,600
you can specify the protocol whichever

00:24:39,200 --> 00:24:42,799
works easier for you

00:24:41,600 --> 00:24:44,320
now if you want to make sure that that

00:24:42,799 --> 00:24:45,279
mysql connection that database

00:24:44,320 --> 00:24:46,880
connection is secure

00:24:45,279 --> 00:24:49,120
make sure you've got a secure ssl

00:24:46,880 --> 00:24:50,000
connection from your mysql client and

00:24:49,120 --> 00:24:53,679
your local box

00:24:50,000 --> 00:24:57,039
to the to the mysql server itself

00:24:53,679 --> 00:25:00,640
service examples so here i'm tossing

00:24:57,039 --> 00:25:04,240
143 and 993 for imap i'm also

00:25:00,640 --> 00:25:05,679
tossing 25 for smtp uh so you can build

00:25:04,240 --> 00:25:07,520
those up and then your mail client and

00:25:05,679 --> 00:25:09,760
everything could talk to localhost

00:25:07,520 --> 00:25:11,279
across ssh in order to do stuff that's

00:25:09,760 --> 00:25:13,360
actually what i do i

00:25:11,279 --> 00:25:14,880
i set up ssh tunnels to my mail server

00:25:13,360 --> 00:25:16,400
and uh

00:25:14,880 --> 00:25:18,400
do it this way and that way i know i've

00:25:16,400 --> 00:25:20,159
got a secure connection

00:25:18,400 --> 00:25:22,159
and everything is going across that one

00:25:20,159 --> 00:25:23,840
single secure connection

00:25:22,159 --> 00:25:26,400
it reduces the number of things i need

00:25:23,840 --> 00:25:26,400
to open up

00:25:27,039 --> 00:25:32,640
then uh web example

00:25:30,240 --> 00:25:33,520
so here we're going to use a local host

00:25:32,640 --> 00:25:37,120
or localhost

00:25:33,520 --> 00:25:38,799
local port 8080 to talk to the

00:25:37,120 --> 00:25:41,600
web server as i mentioned i should call

00:25:38,799 --> 00:25:43,919
it www.internal just to

00:25:41,600 --> 00:25:45,440
make it a little bit easier when you do

00:25:43,919 --> 00:25:48,080
that though in modern world we

00:25:45,440 --> 00:25:49,600
we have multiple uh web servers the

00:25:48,080 --> 00:25:50,720
modern world being you know the last 30

00:25:49,600 --> 00:25:53,039
years

00:25:50,720 --> 00:25:55,200
we have multiple web servers running on

00:25:53,039 --> 00:25:55,200
a

00:25:55,360 --> 00:26:00,240
different domains running on a web

00:25:56,960 --> 00:26:03,360
server using virtual servers etc

00:26:00,240 --> 00:26:05,440
so you can use uh with different tools

00:26:03,360 --> 00:26:06,480
the example i give here is links you can

00:26:05,440 --> 00:26:08,240
tell it

00:26:06,480 --> 00:26:10,400
an extra header to say hey this is the

00:26:08,240 --> 00:26:13,120
host i was trying to talk to so

00:26:10,400 --> 00:26:14,520
instead of trying to it you know coming

00:26:13,120 --> 00:26:16,400
across as localhost or

00:26:14,520 --> 00:26:18,240
firewall.example.com we'll give it the

00:26:16,400 --> 00:26:21,120
hostname that i want to talk to

00:26:18,240 --> 00:26:22,960
uh and so that simplifies things uh i've

00:26:21,120 --> 00:26:24,799
got a dynamic firewall example given

00:26:22,960 --> 00:26:27,440
again

00:26:24,799 --> 00:26:29,039
oops mentioned fire foxy proxy uh i've

00:26:27,440 --> 00:26:31,039
taken that out of the presentation so go

00:26:29,039 --> 00:26:31,760
learn it on your own but fox epoxy is a

00:26:31,039 --> 00:26:36,159
great

00:26:31,760 --> 00:26:37,600
uh add-on for fire for uh firefox

00:26:36,159 --> 00:26:39,440
i think it's available forever browsers

00:26:37,600 --> 00:26:41,600
as well i just don't check

00:26:39,440 --> 00:26:43,600
um but it allows you to specify

00:26:41,600 --> 00:26:45,120
different things uh at a previous job

00:26:43,600 --> 00:26:46,640
when i first wrote this i was working at

00:26:45,120 --> 00:26:48,159
a place where i needed to

00:26:46,640 --> 00:26:50,240
get on three different corporate

00:26:48,159 --> 00:26:52,720
networks all at the same time

00:26:50,240 --> 00:26:53,520
so i had three different tunnels set up

00:26:52,720 --> 00:26:57,200
with

00:26:53,520 --> 00:26:59,120
uh um pro sox proxies and then i went

00:26:57,200 --> 00:27:00,159
through and used foxy proxy to set up

00:26:59,120 --> 00:27:02,880
rules so when i said

00:27:00,159 --> 00:27:04,320
when i'm talking to corp a domains it

00:27:02,880 --> 00:27:05,760
goes across this proxy when i'm talking

00:27:04,320 --> 00:27:06,960
to core b donor mains it goes across

00:27:05,760 --> 00:27:08,720
this foxy proxy

00:27:06,960 --> 00:27:10,960
and then corp see i wasn't even domains

00:27:08,720 --> 00:27:12,480
i just had to say okay these three boxes

00:27:10,960 --> 00:27:14,480
if i'm talking to either these things

00:27:12,480 --> 00:27:16,000
things they go across that other proxy

00:27:14,480 --> 00:27:18,159
um and that way i was able to keep it

00:27:16,000 --> 00:27:19,840
all straight and none of my

00:27:18,159 --> 00:27:21,440
content then was going across the net so

00:27:19,840 --> 00:27:23,039
if i was sitting at a cafe

00:27:21,440 --> 00:27:25,200
or something like that i didn't have to

00:27:23,039 --> 00:27:28,320
worry about it

00:27:25,200 --> 00:27:31,760
ascii puffy so puffy is the

00:27:28,320 --> 00:27:31,760
mascot for ssh

00:27:32,880 --> 00:27:40,080
i've got something i've had for a while

00:27:36,000 --> 00:27:40,080
and then also this guy

00:27:40,559 --> 00:27:46,320
so um uh anyway i just i like puffy

00:27:43,679 --> 00:27:49,039
it's fun uh someday i'll get a really

00:27:46,320 --> 00:27:51,760
awesome puffy shirt

00:27:49,039 --> 00:27:53,120
okay we got some time still so i can go

00:27:51,760 --> 00:27:57,520
through the uh

00:27:53,120 --> 00:27:57,520
configuration tips as well hold on a

00:28:00,840 --> 00:28:04,720
second

00:28:02,399 --> 00:28:06,480
so you can specify multiple known host

00:28:04,720 --> 00:28:09,600
files in ssh config

00:28:06,480 --> 00:28:12,880
in a newer ssd uh

00:28:09,600 --> 00:28:14,000
uh ssh client uh newer being the last

00:28:12,880 --> 00:28:14,640
three or four years or something like

00:28:14,000 --> 00:28:18,480
that

00:28:14,640 --> 00:28:20,720
um but uh at a place i was working not

00:28:18,480 --> 00:28:22,080
too terribly long ago we had an ssh on

00:28:20,720 --> 00:28:24,960
the distro we were using

00:28:22,080 --> 00:28:26,159
that was too old to have this which is

00:28:24,960 --> 00:28:28,159
where i discovered because i really

00:28:26,159 --> 00:28:30,559
needed it

00:28:28,159 --> 00:28:31,520
so but most most systems should have

00:28:30,559 --> 00:28:33,679
that nowadays

00:28:31,520 --> 00:28:36,399
um so one of the reasons i was using or

00:28:33,679 --> 00:28:38,559
the reason i was wanting to use this

00:28:36,399 --> 00:28:40,240
was because we were using puppet for our

00:28:38,559 --> 00:28:41,679
uh deployment there

00:28:40,240 --> 00:28:44,640
we were actually using multiple puppets

00:28:41,679 --> 00:28:47,279
it was it was uh fun and exciting um

00:28:44,640 --> 00:28:48,640
and i would then grab all of the ssh

00:28:47,279 --> 00:28:51,600
keys

00:28:48,640 --> 00:28:52,880
from the puppet information and throw

00:28:51,600 --> 00:28:55,600
that into a

00:28:52,880 --> 00:28:57,200
known host file because we were doing

00:28:55,600 --> 00:28:59,679
dynamic creation of host

00:28:57,200 --> 00:29:01,279
it wasn't that much turnover but still a

00:28:59,679 --> 00:29:02,720
decent amount of turnover

00:29:01,279 --> 00:29:04,640
and because the way we were doing things

00:29:02,720 --> 00:29:06,080
there i still needed to ssh to boxes on

00:29:04,640 --> 00:29:07,520
a regular basis

00:29:06,080 --> 00:29:09,200
they changed their infrastructure so

00:29:07,520 --> 00:29:09,919
that was no longer the case but at the

00:29:09,200 --> 00:29:11,520
time

00:29:09,919 --> 00:29:14,159
i was still maintaining the older

00:29:11,520 --> 00:29:17,520
infrastructure um and i didn't like

00:29:14,159 --> 00:29:18,960
all of those random hosts uh um

00:29:17,520 --> 00:29:21,279
going through and polluting my known

00:29:18,960 --> 00:29:22,399
host file but i also wanted to make sure

00:29:21,279 --> 00:29:23,760
i was verifying the key

00:29:22,399 --> 00:29:25,600
right i didn't want to go through in

00:29:23,760 --> 00:29:28,320
fact it was a good thing i did

00:29:25,600 --> 00:29:28,960
because at some point um let's just say

00:29:28,320 --> 00:29:30,720
that the

00:29:28,960 --> 00:29:32,240
the place i was working for had an sh in

00:29:30,720 --> 00:29:36,720
their in their uh

00:29:32,240 --> 00:29:38,320
uh name and if you left that off

00:29:36,720 --> 00:29:40,000
suddenly i was getting connections to

00:29:38,320 --> 00:29:42,799
china um

00:29:40,000 --> 00:29:44,320
so that was a bad discovery but luckily

00:29:42,799 --> 00:29:46,159
i was checking hosts and i was not

00:29:44,320 --> 00:29:48,960
sending any data across

00:29:46,159 --> 00:29:50,159
to them because i came it came up and

00:29:48,960 --> 00:29:52,480
gave me a warning

00:29:50,159 --> 00:29:53,360
that i was connecting to a host with a

00:29:52,480 --> 00:29:55,600
new that had

00:29:53,360 --> 00:29:57,120
where the key had changed uh and i was

00:29:55,600 --> 00:30:00,399
able to catch my typo

00:29:57,120 --> 00:30:03,600
and notify infosec that we had an issue

00:30:00,399 --> 00:30:04,399
all right uh you can specify key per key

00:30:03,600 --> 00:30:06,640
restrictions

00:30:04,399 --> 00:30:07,600
in authorized key entries this is really

00:30:06,640 --> 00:30:10,559
awesome

00:30:07,600 --> 00:30:11,120
so when when you authorize a key to say

00:30:10,559 --> 00:30:13,200
okay i

00:30:11,120 --> 00:30:14,480
this key is allowed to talk to my host

00:30:13,200 --> 00:30:16,240
wherever that host is

00:30:14,480 --> 00:30:17,679
you can go through and do things so for

00:30:16,240 --> 00:30:18,559
instance if you're setting up an

00:30:17,679 --> 00:30:21,600
automated

00:30:18,559 --> 00:30:23,279
uh task to go through and do backups

00:30:21,600 --> 00:30:25,039
uh you probably don't need x11

00:30:23,279 --> 00:30:25,520
forwarding for that right hopefully you

00:30:25,039 --> 00:30:28,000
don't

00:30:25,520 --> 00:30:29,520
if you do i don't want to know i really

00:30:28,000 --> 00:30:31,520
don't

00:30:29,520 --> 00:30:32,720
but for an automated connection you

00:30:31,520 --> 00:30:33,840
don't need any of these things you

00:30:32,720 --> 00:30:35,600
probably don't need for

00:30:33,840 --> 00:30:36,960
port forwarding you might need that i

00:30:35,600 --> 00:30:38,320
actually get i do some weird things

00:30:36,960 --> 00:30:40,480
where that could be possible

00:30:38,320 --> 00:30:41,679
uh no agent forwarding you probably

00:30:40,480 --> 00:30:43,760
don't need that

00:30:41,679 --> 00:30:45,120
if you do there's other ways to fix that

00:30:43,760 --> 00:30:47,840
hopefully right

00:30:45,120 --> 00:30:49,679
so turn that off for those connections

00:30:47,840 --> 00:30:50,799
so that if somebody compromises the

00:30:49,679 --> 00:30:53,279
machine

00:30:50,799 --> 00:30:54,320
that's making the backups they can't use

00:30:53,279 --> 00:30:56,720
that to get

00:30:54,320 --> 00:30:58,240
extra uh extra access to the machine

00:30:56,720 --> 00:31:01,120
you're backing up

00:30:58,240 --> 00:31:02,159
right you can also force a per key

00:31:01,120 --> 00:31:04,640
specific command

00:31:02,159 --> 00:31:06,799
now this is this is important per key so

00:31:04,640 --> 00:31:08,880
if you have three different backups you

00:31:06,799 --> 00:31:11,120
do of a remote machine

00:31:08,880 --> 00:31:12,159
and they all use different commands or

00:31:11,120 --> 00:31:13,519
you connect to for

00:31:12,159 --> 00:31:15,360
for there's three different reasons one

00:31:13,519 --> 00:31:16,880
for backups one to kick off some

00:31:15,360 --> 00:31:19,600
some interesting crons where you need to

00:31:16,880 --> 00:31:21,440
ship data over uh and one

00:31:19,600 --> 00:31:23,039
just because it's it's tuesdays and

00:31:21,440 --> 00:31:25,120
that's what you do right

00:31:23,039 --> 00:31:27,679
you'll need three different keys for

00:31:25,120 --> 00:31:29,279
each one for each of those connections

00:31:27,679 --> 00:31:30,799
but you can then specify the host name

00:31:29,279 --> 00:31:34,000
and then it doesn't matter what

00:31:30,799 --> 00:31:35,519
what command is run from that remote

00:31:34,000 --> 00:31:37,120
machine it will always run

00:31:35,519 --> 00:31:38,799
the command that's specified in the

00:31:37,120 --> 00:31:42,240
authorized key file

00:31:38,799 --> 00:31:43,600
um now uh

00:31:42,240 --> 00:31:46,960
i think i skipped over something we'll

00:31:43,600 --> 00:31:49,120
get to rsync in a second here

00:31:46,960 --> 00:31:50,559
and then you can also do per key network

00:31:49,120 --> 00:31:53,200
restrictions on that as well so you can

00:31:50,559 --> 00:31:54,720
restrict where it's coming from

00:31:53,200 --> 00:31:56,559
i mentioned earlier i'd get to the dash

00:31:54,720 --> 00:31:58,320
capital n and the dash f

00:31:56,559 --> 00:31:59,519
the dash capital n says no remote

00:31:58,320 --> 00:32:01,760
command i'm not going to run something

00:31:59,519 --> 00:32:03,120
by default when you ssh to machine

00:32:01,760 --> 00:32:05,840
it gives you a shell gives you whatever

00:32:03,120 --> 00:32:07,360
the default shell for that account on

00:32:05,840 --> 00:32:09,360
that remote sheet machine is

00:32:07,360 --> 00:32:10,880
so if your default shell there is bash

00:32:09,360 --> 00:32:12,399
then you get bash if your default shell

00:32:10,880 --> 00:32:14,399
is esh you get zsh

00:32:12,399 --> 00:32:15,919
if your default shell is been false you

00:32:14,399 --> 00:32:18,720
don't get all you don't get a log in

00:32:15,919 --> 00:32:19,760
right but dash n says don't run a remote

00:32:18,720 --> 00:32:23,679
command

00:32:19,760 --> 00:32:26,240
dash uh f uh says to background

00:32:23,679 --> 00:32:28,000
after authentication so you still get

00:32:26,240 --> 00:32:29,679
prompted for authentication if you need

00:32:28,000 --> 00:32:31,200
to to be able to type in a password or

00:32:29,679 --> 00:32:32,640
key or something like that

00:32:31,200 --> 00:32:34,480
but then it'll go into background after

00:32:32,640 --> 00:32:37,360
that

00:32:34,480 --> 00:32:38,240
uh a cool thing with ssh if you're

00:32:37,360 --> 00:32:39,919
having trouble

00:32:38,240 --> 00:32:41,120
with the connection it's not working out

00:32:39,919 --> 00:32:41,760
you can't figure out why it's not

00:32:41,120 --> 00:32:44,240
working

00:32:41,760 --> 00:32:45,200
you can use a dash v to give you more

00:32:44,240 --> 00:32:46,799
verbosity

00:32:45,200 --> 00:32:48,799
and you get you can do up to three of

00:32:46,799 --> 00:32:49,600
those and it can get pretty prolific at

00:32:48,799 --> 00:32:52,559
that point

00:32:49,600 --> 00:32:54,320
um so you can do those uh dash g i

00:32:52,559 --> 00:32:56,399
discovered recently capital g

00:32:54,320 --> 00:32:57,519
shows what configuration would be used

00:32:56,399 --> 00:32:59,440
for the connection

00:32:57,519 --> 00:33:01,279
oh that is also really awesome for

00:32:59,440 --> 00:33:03,519
debugging when things are going wrong

00:33:01,279 --> 00:33:04,720
uh or just to verify that you're getting

00:33:03,519 --> 00:33:05,919
the connection you want

00:33:04,720 --> 00:33:07,440
just because it's working doesn't mean

00:33:05,919 --> 00:33:08,880
you're getting the one you wanted so you

00:33:07,440 --> 00:33:11,440
can check that

00:33:08,880 --> 00:33:12,720
um and the dash lowercase t for those of

00:33:11,440 --> 00:33:14,720
us that are system ins

00:33:12,720 --> 00:33:16,720
uh especially across sketchy networks

00:33:14,720 --> 00:33:19,679
networks um

00:33:16,720 --> 00:33:20,960
that says to force a pseudo terminal

00:33:19,679 --> 00:33:22,320
even if you were connecting up to

00:33:20,960 --> 00:33:24,720
something that doesn't so if you go

00:33:22,320 --> 00:33:27,120
through and automatically launch screen

00:33:24,720 --> 00:33:28,480
you'll want to use that in order to get

00:33:27,120 --> 00:33:30,399
the connection

00:33:28,480 --> 00:33:31,519
and i left the t out of the actual

00:33:30,399 --> 00:33:34,000
example wow

00:33:31,519 --> 00:33:35,440
all right uh and then dash over you can

00:33:34,000 --> 00:33:39,120
specify a bunch of different

00:33:35,440 --> 00:33:40,480
uh command line options shell variables

00:33:39,120 --> 00:33:44,080
these are important for

00:33:40,480 --> 00:33:45,279
uh again for system inside um ps1 on

00:33:44,080 --> 00:33:46,640
your remote machine

00:33:45,279 --> 00:33:48,000
make sure it's got a prompt that has

00:33:46,640 --> 00:33:48,480
enough information to work to the place

00:33:48,000 --> 00:33:51,840
where

00:33:48,480 --> 00:33:52,720
rename the machines the same on every

00:33:51,840 --> 00:33:55,120
network on

00:33:52,720 --> 00:33:56,240
every data center so i had box one box

00:33:55,120 --> 00:33:57,919
two box three

00:33:56,240 --> 00:33:59,279
in each data center so when i connected

00:33:57,919 --> 00:34:01,039
up it just said box one i didn't know

00:33:59,279 --> 00:34:03,679
where in the world i was talking to

00:34:01,039 --> 00:34:04,080
so i set up ps1 to also include the the

00:34:03,679 --> 00:34:07,360
the

00:34:04,080 --> 00:34:08,480
dc in there uh you know show me the pop

00:34:07,360 --> 00:34:11,200
so i could know

00:34:08,480 --> 00:34:12,720
what country i was in right um and then

00:34:11,200 --> 00:34:15,919
ssh authsoc

00:34:12,720 --> 00:34:18,480
is uh used by the ssh

00:34:15,919 --> 00:34:20,159
agent so you can connect to that ssh jaw

00:34:18,480 --> 00:34:22,079
sock in order to reuse

00:34:20,159 --> 00:34:24,720
connections for an agent from a

00:34:22,079 --> 00:34:28,000
different shell

00:34:24,720 --> 00:34:30,960
tools i mentioned ssh copy id

00:34:28,000 --> 00:34:31,919
sshfs allows you to mount a file system

00:34:30,960 --> 00:34:34,480
over ssh

00:34:31,919 --> 00:34:35,119
it's not the fastest way to do that but

00:34:34,480 --> 00:34:38,159
it works

00:34:35,119 --> 00:34:40,639
and i use that occasionally mostly

00:34:38,159 --> 00:34:41,520
uh just use rsync to copy data back and

00:34:40,639 --> 00:34:42,960
forth

00:34:41,520 --> 00:34:45,599
and this is the part i was just saying

00:34:42,960 --> 00:34:47,599
an update so uh

00:34:45,599 --> 00:34:49,280
lwn posted an article i don't know when

00:34:47,599 --> 00:34:51,520
they posted but i saw it last night

00:34:49,280 --> 00:34:52,399
saying that scp is now considered

00:34:51,520 --> 00:34:54,639
dangerous

00:34:52,399 --> 00:34:56,320
um and they give some examples of some

00:34:54,639 --> 00:34:58,320
places where it can be compromised

00:34:56,320 --> 00:34:59,839
if you own the client and you own the

00:34:58,320 --> 00:35:00,960
the server and you know what you're

00:34:59,839 --> 00:35:02,079
doing

00:35:00,960 --> 00:35:04,960
from what i could see it looks like

00:35:02,079 --> 00:35:07,760
you'd be fine however it might be a good

00:35:04,960 --> 00:35:08,160
good uh to just right now start getting

00:35:07,760 --> 00:35:10,160
in the

00:35:08,160 --> 00:35:11,680
into the habit of using rsync instead of

00:35:10,160 --> 00:35:14,480
sap

00:35:11,680 --> 00:35:16,079
somebody is working on an scp

00:35:14,480 --> 00:35:16,800
re-implementation that won't have those

00:35:16,079 --> 00:35:20,000
problems

00:35:16,800 --> 00:35:22,320
uh basically doing scp over sftp instead

00:35:20,000 --> 00:35:23,119
um but hey rsync's there and it works

00:35:22,320 --> 00:35:26,320
great

00:35:23,119 --> 00:35:28,800
uh so use that um sftp

00:35:26,320 --> 00:35:30,320
i don't like ftp so you know i'm glad to

00:35:28,800 --> 00:35:31,760
not use it but for those of you that

00:35:30,320 --> 00:35:34,560
that works go ahead

00:35:31,760 --> 00:35:35,520
um auto ssh is for automatically

00:35:34,560 --> 00:35:37,359
building connections

00:35:35,520 --> 00:35:40,000
so from machine reboots or if your

00:35:37,359 --> 00:35:41,920
connection goes down auto ssh will re

00:35:40,000 --> 00:35:43,520
rebuild it you need automated

00:35:41,920 --> 00:35:44,480
authentication so you need a key that

00:35:43,520 --> 00:35:47,680
can you can use

00:35:44,480 --> 00:35:50,079
without interaction but you can do that

00:35:47,680 --> 00:35:51,839
but do not use ssh key scan it looks

00:35:50,079 --> 00:35:53,359
like a really cool tool

00:35:51,839 --> 00:35:55,040
it doesn't verify the keys all it does

00:35:53,359 --> 00:35:57,599
is go and say what's the public key

00:35:55,040 --> 00:36:00,320
it's great for auditing right is that

00:35:57,599 --> 00:36:01,920
machine still a machine i think it is

00:36:00,320 --> 00:36:04,160
go through and make sure that the key

00:36:01,920 --> 00:36:05,760
hasn't changed um but don't use that to

00:36:04,160 --> 00:36:08,000
grab the key for the first connection

00:36:05,760 --> 00:36:09,599
all it does is connect to the ssh server

00:36:08,000 --> 00:36:12,720
and and grab the key and the

00:36:09,599 --> 00:36:15,440
fingerprint off of it and and note that

00:36:12,720 --> 00:36:16,960
um so it is it's not actually doing any

00:36:15,440 --> 00:36:19,200
verification whatsoever

00:36:16,960 --> 00:36:21,520
you need to verify that out of band a

00:36:19,200 --> 00:36:24,720
different way

00:36:21,520 --> 00:36:28,240
all right um some extra stuff uh you can

00:36:24,720 --> 00:36:31,520
copy data across so here i'm

00:36:28,240 --> 00:36:34,079
i'm ssh into firewall.example.com

00:36:31,520 --> 00:36:35,200
on firewall.example.com i'm running

00:36:34,079 --> 00:36:38,400
pseudo tar

00:36:35,200 --> 00:36:40,240
to back up etsy and then i just throw

00:36:38,400 --> 00:36:41,680
the data into a pipe

00:36:40,240 --> 00:36:44,560
right it's just a whole bunch of zeros

00:36:41,680 --> 00:36:47,040
and ones going across right

00:36:44,560 --> 00:36:48,800
and then on the on this side of the pipe

00:36:47,040 --> 00:36:50,640
i'm running tar again

00:36:48,800 --> 00:36:52,560
to go through and extract the data out

00:36:50,640 --> 00:36:55,359
of there so i'm basically

00:36:52,560 --> 00:36:59,520
tar to tar piping it but i'm using an

00:36:55,359 --> 00:36:59,520
ssh connection to create that pipe

00:36:59,839 --> 00:37:04,000
uh and then uh an example that i don't

00:37:02,640 --> 00:37:04,720
need to use very much anymore because

00:37:04,000 --> 00:37:07,040
we've gotten much

00:37:04,720 --> 00:37:08,000
better but it used to be that we would

00:37:07,040 --> 00:37:10,079
run out of resources

00:37:08,000 --> 00:37:12,000
on remote machines it doesn't happen so

00:37:10,079 --> 00:37:13,599
much anymore because we've got better

00:37:12,000 --> 00:37:15,119
process management and stuff like that

00:37:13,599 --> 00:37:18,320
that dimension machines are just

00:37:15,119 --> 00:37:19,359
so much bigger but you could you could

00:37:18,320 --> 00:37:20,640
get to where you couldn't

00:37:19,359 --> 00:37:22,880
you couldn't create a shell on the

00:37:20,640 --> 00:37:24,240
remote machine but you could still ssh

00:37:22,880 --> 00:37:26,800
in and run commands

00:37:24,240 --> 00:37:28,560
so i would ssh that remote machine run a

00:37:26,800 --> 00:37:31,280
process table

00:37:28,560 --> 00:37:31,920
and then pipe that back to my local box

00:37:31,280 --> 00:37:34,160
use t

00:37:31,920 --> 00:37:36,000
so i capture it one right don't look at

00:37:34,160 --> 00:37:37,280
it once and then lose all that data

00:37:36,000 --> 00:37:38,560
because you might not be able to run it

00:37:37,280 --> 00:37:40,079
again or you might need to be very

00:37:38,560 --> 00:37:42,880
specific

00:37:40,079 --> 00:37:44,079
throw it into a file on my local machine

00:37:42,880 --> 00:37:45,359
and then i can go through and look at it

00:37:44,079 --> 00:37:45,680
with lasso or go through and look at

00:37:45,359 --> 00:37:48,640
that

00:37:45,680 --> 00:37:49,680
that file specifically so even if you

00:37:48,640 --> 00:37:51,760
can't get a shell

00:37:49,680 --> 00:37:53,520
you might be able to run other commands

00:37:51,760 --> 00:37:54,560
and find out what is using all of your

00:37:53,520 --> 00:37:56,400
processes

00:37:54,560 --> 00:37:59,280
by looking at that process list and then

00:37:56,400 --> 00:38:01,040
ssh in and do a kill on that process id

00:37:59,280 --> 00:38:02,320
i have saved a lot of machines doing

00:38:01,040 --> 00:38:03,760
that again

00:38:02,320 --> 00:38:06,160
not in the last five or six years

00:38:03,760 --> 00:38:09,040
thankfully because we're better shaped

00:38:06,160 --> 00:38:11,040
rsync i mentioned you might need to

00:38:09,040 --> 00:38:13,040
specify to use ssh as the connection for

00:38:11,040 --> 00:38:17,760
rsync

00:38:13,040 --> 00:38:20,320
and then go forth securely

00:38:17,760 --> 00:38:21,280
and play the home game all right or the

00:38:20,320 --> 00:38:24,320
office game as it

00:38:21,280 --> 00:38:28,720
might be do we have

00:38:24,320 --> 00:38:31,839
any questions comments corrections

00:38:28,720 --> 00:38:33,599
hey hans thank you very much a very good

00:38:31,839 --> 00:38:34,400
discussion yeah we have actually a lot

00:38:33,599 --> 00:38:36,960
of questions

00:38:34,400 --> 00:38:39,040
in the q a window so maybe you want to

00:38:36,960 --> 00:38:40,720
go through these questions one by one

00:38:39,040 --> 00:38:43,520
some of these you already answered but

00:38:40,720 --> 00:38:46,880
there are others that i think

00:38:43,520 --> 00:38:48,320
need some answer from you

00:38:46,880 --> 00:38:51,119
all right let's see if i can get to the

00:38:48,320 --> 00:38:54,560
qa question thing

00:38:51,119 --> 00:38:54,560
is that it no that's not it

00:38:56,400 --> 00:39:01,040
oh i gotta stop sharing screen in order

00:38:58,880 --> 00:39:03,839
to do that i think

00:39:01,040 --> 00:39:06,079
i i can read it for you if you like okay

00:39:03,839 --> 00:39:09,440
i got a couple here we go

00:39:06,079 --> 00:39:11,520
uh suggestions for on managing

00:39:09,440 --> 00:39:14,800
persistence with connections

00:39:11,520 --> 00:39:18,560
uh and throwing

00:39:14,800 --> 00:39:20,880
um so i don't do anything with system d

00:39:18,560 --> 00:39:22,640
um but as far as managing persistence i

00:39:20,880 --> 00:39:25,200
use auto ssh for that

00:39:22,640 --> 00:39:26,800
uh i don't do very much with persistent

00:39:25,200 --> 00:39:29,920
ssh connections

00:39:26,800 --> 00:39:32,240
um but uh

00:39:29,920 --> 00:39:33,839
uh i do use it for a couple of uh

00:39:32,240 --> 00:39:36,079
specific situations

00:39:33,839 --> 00:39:37,440
um specifically i have it set up for

00:39:36,079 --> 00:39:39,920
those reverse tunnels

00:39:37,440 --> 00:39:42,560
for people that i help that are behind a

00:39:39,920 --> 00:39:44,880
you know a an isp firewall

00:39:42,560 --> 00:39:45,920
so that their client when they reboot

00:39:44,880 --> 00:39:47,920
their machine

00:39:45,920 --> 00:39:50,160
auto builds a connection back into my

00:39:47,920 --> 00:39:51,920
machine uh that i can then connect

00:39:50,160 --> 00:39:55,119
so that the reverse tunnel i was talking

00:39:51,920 --> 00:39:56,960
about that allows me to get past their

00:39:55,119 --> 00:39:58,400
firewall by talking to a local part

00:39:56,960 --> 00:40:01,280
online and i use ss

00:39:58,400 --> 00:40:02,720
auto ssh to build those uh in fact i got

00:40:01,280 --> 00:40:05,440
enough paranoid about it

00:40:02,720 --> 00:40:07,359
that i i build auto ssh in at least two

00:40:05,440 --> 00:40:08,960
if not three different ways

00:40:07,359 --> 00:40:10,240
on those remote machines in case

00:40:08,960 --> 00:40:11,359
something goes wrong with one of the

00:40:10,240 --> 00:40:13,440
other ones

00:40:11,359 --> 00:40:14,480
so redundancy to make sure i've got

00:40:13,440 --> 00:40:16,400
access

00:40:14,480 --> 00:40:17,760
so that i don't have to drive somewhere

00:40:16,400 --> 00:40:20,560
or hop on a plane as the

00:40:17,760 --> 00:40:20,560
as the case may be

00:40:22,960 --> 00:40:27,680
for the dash why which side uh process

00:40:25,920 --> 00:40:31,200
of the graphics

00:40:27,680 --> 00:40:34,319
i have no idea actually i really don't

00:40:31,200 --> 00:40:36,160
um i

00:40:34,319 --> 00:40:38,079
so some of it i'm pretty certain depends

00:40:36,160 --> 00:40:41,119
on how it's done

00:40:38,079 --> 00:40:43,520
so i've noticed a couple of tools uh

00:40:41,119 --> 00:40:44,319
go through an automatic they kind of

00:40:43,520 --> 00:40:47,280
build

00:40:44,319 --> 00:40:47,599
a moving graphic if they do that through

00:40:47,280 --> 00:40:50,880
a

00:40:47,599 --> 00:40:53,280
just constant update on the server side

00:40:50,880 --> 00:40:54,720
the ssh connection gets killed it could

00:40:53,280 --> 00:40:55,520
actually lock up your desktop to some

00:40:54,720 --> 00:40:58,720
extent

00:40:55,520 --> 00:41:02,240
uh waiting for all that to process

00:40:58,720 --> 00:41:03,440
if they do it within html and css and

00:41:02,240 --> 00:41:05,839
all that

00:41:03,440 --> 00:41:07,359
then it works pretty good so i'm pretty

00:41:05,839 --> 00:41:07,760
certain that that rendering is taking

00:41:07,359 --> 00:41:11,680
place

00:41:07,760 --> 00:41:12,480
on the client x's weird client server i

00:41:11,680 --> 00:41:13,920
don't even i

00:41:12,480 --> 00:41:15,599
can't even think well enough to say

00:41:13,920 --> 00:41:17,280
which on the desktop that's

00:41:15,599 --> 00:41:19,200
that's showing it is where it's being

00:41:17,280 --> 00:41:21,760
rendered i think

00:41:19,200 --> 00:41:22,720
um but i don't know for for certain um

00:41:21,760 --> 00:41:24,800
and if you're if

00:41:22,720 --> 00:41:25,760
if that performance is important look at

00:41:24,800 --> 00:41:28,400
x2go

00:41:25,760 --> 00:41:29,599
um i didn't add it into my presentation

00:41:28,400 --> 00:41:32,960
but it uh

00:41:29,599 --> 00:41:33,760
does a better connection for graphical

00:41:32,960 --> 00:41:35,520
stuff

00:41:33,760 --> 00:41:36,960
i just use the dash y for the most part

00:41:35,520 --> 00:41:41,119
because it works fairly well

00:41:36,960 --> 00:41:42,880
x2go will also allow you to throw audio

00:41:41,119 --> 00:41:44,880
so if you need to watch a video on a

00:41:42,880 --> 00:41:47,359
remote machine you can actually then

00:41:44,880 --> 00:41:48,960
pipe that back to your local box in fact

00:41:47,359 --> 00:41:51,040
that's how i use zoom most of the time

00:41:48,960 --> 00:41:52,400
i ssh into the box that has the one

00:41:51,040 --> 00:41:54,560
place i've got zoom installed

00:41:52,400 --> 00:41:55,520
and i throw it back to my desktop i

00:41:54,560 --> 00:41:57,920
didn't do it here

00:41:55,520 --> 00:41:58,560
because i didn't want to risk displays

00:41:57,920 --> 00:42:02,160
also or

00:41:58,560 --> 00:42:05,599
risk delays and stuff like that also uh

00:42:02,160 --> 00:42:06,160
my my uh regular desktop is a 60-inch

00:42:05,599 --> 00:42:07,359
monitor

00:42:06,160 --> 00:42:09,599
i didn't want to share that entire

00:42:07,359 --> 00:42:09,599
screen

00:42:10,319 --> 00:42:17,760
using copy id i have to

00:42:14,160 --> 00:42:19,680
oops we oh there we go uh i have to pay

00:42:17,760 --> 00:42:22,640
an

00:42:19,680 --> 00:42:22,640
ssh first

00:42:24,079 --> 00:42:31,839
you have to pay an ssh i'm presuming you

00:42:27,920 --> 00:42:34,640
need indeed doing run in the ssh ad

00:42:31,839 --> 00:42:36,319
well ssh ad is adding the key to your

00:42:34,640 --> 00:42:40,160
agent

00:42:36,319 --> 00:42:42,400
and before you run ssh copy id

00:42:40,160 --> 00:42:43,599
you haven't copied the key over to that

00:42:42,400 --> 00:42:45,760
remote machine

00:42:43,599 --> 00:42:47,599
so you'll need to authenticate using a

00:42:45,760 --> 00:42:49,200
normal mechanism first

00:42:47,599 --> 00:42:50,960
once you've authenticated use some

00:42:49,200 --> 00:42:53,200
password key whatever it is that you

00:42:50,960 --> 00:42:54,640
you have well actually key one because

00:42:53,200 --> 00:42:56,880
you're using that key

00:42:54,640 --> 00:42:58,880
unless actually i do this because like i

00:42:56,880 --> 00:43:01,680
was talking about where i'm uh

00:42:58,880 --> 00:43:03,520
setting up keys for specific tasks so

00:43:01,680 --> 00:43:06,000
i've already got a key into the other

00:43:03,520 --> 00:43:06,640
into the remote machine and i use that

00:43:06,000 --> 00:43:09,200
original

00:43:06,640 --> 00:43:10,560
ssh connection to play over the new key

00:43:09,200 --> 00:43:13,760
for the for the sing

00:43:10,560 --> 00:43:14,560
the one off task type of thing but you

00:43:13,760 --> 00:43:18,319
need to connect

00:43:14,560 --> 00:43:20,079
you for ssh copy id connects over ssh

00:43:18,319 --> 00:43:20,480
through some other mechanism to begin

00:43:20,079 --> 00:43:22,800
with

00:43:20,480 --> 00:43:23,920
and then it'll copy your id now that the

00:43:22,800 --> 00:43:26,000
idea you're copying

00:43:23,920 --> 00:43:27,359
id that you're copying over will then

00:43:26,000 --> 00:43:30,720
become your

00:43:27,359 --> 00:43:32,720
uh primary mechanism uh then

00:43:30,720 --> 00:43:33,839
that'll put it in place for you and i

00:43:32,720 --> 00:43:36,960
think we just hit

00:43:33,839 --> 00:43:38,960
time yeah yeah

00:43:36,960 --> 00:43:41,119
unfortunately we still have number of

00:43:38,960 --> 00:43:42,240
questions that probably we are going to

00:43:41,119 --> 00:43:45,520
answer

00:43:42,240 --> 00:43:47,359
on slack channel we get the time can you

00:43:45,520 --> 00:43:50,960
grab a copy of those before we drop

00:43:47,359 --> 00:43:52,240
out or ask me in general and i'm i'm i'm

00:43:50,960 --> 00:43:54,319
glad to ask it answer

00:43:52,240 --> 00:43:55,440
and i'll be here all weekend right so

00:43:54,319 --> 00:43:56,800
you know please

00:43:55,440 --> 00:43:58,800
remember to tip your weight staff and

00:43:56,800 --> 00:44:00,000
thank you the volunteers and organizers

00:43:58,800 --> 00:44:01,760
are putting this on

00:44:00,000 --> 00:44:03,200
but i'll be here all this all weekend

00:44:01,760 --> 00:44:05,040
and now that my presentation's done i

00:44:03,200 --> 00:44:06,800
can pay attention to general

00:44:05,040 --> 00:44:08,480
very good yeah we will make a copy of

00:44:06,800 --> 00:44:08,880
the questions thank you so much once

00:44:08,480 --> 00:44:11,800
again

00:44:08,880 --> 00:44:14,800
hans thanks a lot see you for the

00:44:11,800 --> 00:44:14,800

YouTube URL: https://www.youtube.com/watch?v=mKmDYEei5-s


