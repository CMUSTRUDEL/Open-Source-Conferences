Title: [OLF 2020] Exploring trade-offs in S3 file systems
Publication date: 2020-12-14
Playlist: 2020 Videos
Description: 
	Speaker: Andrew Gaul
Many Linux user-space file systems (FUSE) layer on top of S3 (Amazon Simple Storage Service) to allow existing applications to use scalable storage without rewriting. These work well for many applications but for others compare unfavorably to NFS. Performance of some operations can differ an order of magnitude while other operations cannot be implemented at all. In this talk, we explore the trade-offs between s3fs, goofys, and s3ql including performance, interoperability, and POSIX compatibility.
Captions: 
	00:00:02,879 --> 00:00:05,600
uh so uh

00:00:04,160 --> 00:00:07,440
i'm gonna talk about s3 file system

00:00:05,600 --> 00:00:09,040
setting and trade-offs and if the

00:00:07,440 --> 00:00:11,280
um the photo here gives you any

00:00:09,040 --> 00:00:12,080
impression uh fitting a square peg into

00:00:11,280 --> 00:00:15,040
a round hole

00:00:12,080 --> 00:00:17,359
is it involves some difficult choices

00:00:15,040 --> 00:00:18,640
and i hope i can kind of inform you

00:00:17,359 --> 00:00:20,640
about how you can choose between the

00:00:18,640 --> 00:00:23,039
many options available

00:00:20,640 --> 00:00:24,160
i i did hear that there are some issues

00:00:23,039 --> 00:00:26,320
with

00:00:24,160 --> 00:00:27,599
fuzzy slides or low resolution slides

00:00:26,320 --> 00:00:31,359
and so these are all available

00:00:27,599 --> 00:00:33,920
at call.org talks

00:00:31,359 --> 00:00:35,440
a little bit about me uh i contributed

00:00:33,920 --> 00:00:39,280
to a number of different

00:00:35,440 --> 00:00:41,280
free software file systems

00:00:39,280 --> 00:00:42,719
network-based file systems so i'm a

00:00:41,280 --> 00:00:44,079
committer to s3fs

00:00:42,719 --> 00:00:45,920
one of the three systems talked about

00:00:44,079 --> 00:00:47,440
today and i've contributed a little bit

00:00:45,920 --> 00:00:48,800
to goofy's

00:00:47,440 --> 00:00:50,960
kind of a comparison point we'll talk

00:00:48,800 --> 00:00:52,719
about later um

00:00:50,960 --> 00:00:54,160
i i've done a bunch of cross-cloud

00:00:52,719 --> 00:00:56,239
things as well

00:00:54,160 --> 00:00:57,600
for apache jclouds it's a java based

00:00:56,239 --> 00:01:01,039
multi-cloud toolkit

00:00:57,600 --> 00:01:03,199
and then i wrote kind of a interesting

00:01:01,039 --> 00:01:04,640
or sometimes useful testing tool called

00:01:03,199 --> 00:01:07,680
s3 proxy which lets you

00:01:04,640 --> 00:01:10,000
interoperate with any object store

00:01:07,680 --> 00:01:11,600
via the s3 protocol and do some testing

00:01:10,000 --> 00:01:13,119
and that sort of thing

00:01:11,600 --> 00:01:15,280
i do live in tokyo so if you see me

00:01:13,119 --> 00:01:15,840
swinging on my coffee during this i'm

00:01:15,280 --> 00:01:19,680
trying to

00:01:15,840 --> 00:01:21,040
to fight off the early morning here

00:01:19,680 --> 00:01:23,360
there's a couple ways to get in touch

00:01:21,040 --> 00:01:24,640
with me if you're a civilized person

00:01:23,360 --> 00:01:26,720
there's

00:01:24,640 --> 00:01:29,439
some old school ways on my website

00:01:26,720 --> 00:01:30,720
otherwise you can uncivilize

00:01:29,439 --> 00:01:33,040
talk to me in that civilized way on

00:01:30,720 --> 00:01:33,040
twitter

00:01:33,360 --> 00:01:36,560
okay so let's let's define what we're

00:01:34,720 --> 00:01:37,520
talking about here so what is the s3

00:01:36,560 --> 00:01:40,079
file system

00:01:37,520 --> 00:01:41,600
so uh usually people um want to use

00:01:40,079 --> 00:01:44,799
these when they need some degree

00:01:41,600 --> 00:01:47,360
of posix or linux

00:01:44,799 --> 00:01:49,119
application compatibility uh oftentimes

00:01:47,360 --> 00:01:51,520
people are actually using

00:01:49,119 --> 00:01:53,520
a native s3 application maybe hadoop or

00:01:51,520 --> 00:01:54,799
something else and s3fs or some other s3

00:01:53,520 --> 00:01:57,040
processing as well to

00:01:54,799 --> 00:01:58,159
get multiple views into the same data

00:01:57,040 --> 00:01:59,920
people um

00:01:58,159 --> 00:02:02,079
often do kind of maintenance work or

00:01:59,920 --> 00:02:05,520
something with a s3 file system or

00:02:02,079 --> 00:02:08,000
and their main application is using

00:02:05,520 --> 00:02:10,080
s3 protocol directly and the reason you

00:02:08,000 --> 00:02:11,599
use s3 specifically is

00:02:10,080 --> 00:02:13,200
uh there's it tends to break down into

00:02:11,599 --> 00:02:14,879
two use cases um

00:02:13,200 --> 00:02:16,879
sometimes people are storing lots of

00:02:14,879 --> 00:02:18,000
data they think about terabytes or even

00:02:16,879 --> 00:02:19,520
petabytes of data

00:02:18,000 --> 00:02:21,200
and this is one of the cheapest ways to

00:02:19,520 --> 00:02:23,280
do it while retaining good

00:02:21,200 --> 00:02:24,800
performance um and the reason it's

00:02:23,280 --> 00:02:27,440
cheaper is because

00:02:24,800 --> 00:02:28,480
s3 tends to be a distributed system uh

00:02:27,440 --> 00:02:30,319
there's many different implementations

00:02:28,480 --> 00:02:32,800
of s3 that we'll talk about in a moment

00:02:30,319 --> 00:02:34,640
but uh some of them um it can just kind

00:02:32,800 --> 00:02:36,400
of scale out and keep adding nodes and

00:02:34,640 --> 00:02:40,640
so it's easy to

00:02:36,400 --> 00:02:42,160
expand then store lots of data

00:02:40,640 --> 00:02:44,080
those workloads tend to be kind of like

00:02:42,160 --> 00:02:46,000
archival or analytics

00:02:44,080 --> 00:02:47,680
machine learning's kind of a new one and

00:02:46,000 --> 00:02:48,400
the second use case that is more

00:02:47,680 --> 00:02:50,319
relevant to

00:02:48,400 --> 00:02:52,400
to me and maybe even if the audience

00:02:50,319 --> 00:02:53,440
here is a kind of a lightweight network

00:02:52,400 --> 00:02:56,239
file system

00:02:53,440 --> 00:02:58,239
so i use it on my my laptop to to store

00:02:56,239 --> 00:03:01,519
bulk data that doesn't fit onto my

00:02:58,239 --> 00:03:03,120
ssd uh there's also a wide variety of

00:03:01,519 --> 00:03:04,720
raspberry pi users who are

00:03:03,120 --> 00:03:06,560
the similar problem with their tiny

00:03:04,720 --> 00:03:10,720
compact flash they want to store

00:03:06,560 --> 00:03:12,879
data um on a bigger device

00:03:10,720 --> 00:03:14,800
uh so the kind of thesis of this talk is

00:03:12,879 --> 00:03:16,959
that there are trade-offs involved and

00:03:14,800 --> 00:03:18,239
the systems don't present and you can't

00:03:16,959 --> 00:03:20,159
have everything you want

00:03:18,239 --> 00:03:22,000
you can't have posix or linux

00:03:20,159 --> 00:03:24,000
compatibility you can't have a

00:03:22,000 --> 00:03:25,599
native object access where other

00:03:24,000 --> 00:03:26,879
applications that don't use that file

00:03:25,599 --> 00:03:28,640
system can access it

00:03:26,879 --> 00:03:30,159
and you can't have speed so it's a

00:03:28,640 --> 00:03:33,840
classic kind of engineering tradeoff

00:03:30,159 --> 00:03:33,840
uh pick two

00:03:34,480 --> 00:03:38,239
so just to give us some background on

00:03:36,560 --> 00:03:39,440
what we're talking about uh these s3

00:03:38,239 --> 00:03:41,840
file systems are

00:03:39,440 --> 00:03:42,640
written in fuse uh written on top of

00:03:41,840 --> 00:03:44,400
these rather

00:03:42,640 --> 00:03:47,440
and so they're actually not in the

00:03:44,400 --> 00:03:48,640
kernel like ext4 or xfs or traditional

00:03:47,440 --> 00:03:52,080
file system

00:03:48,640 --> 00:03:54,959
um these are user space programs that

00:03:52,080 --> 00:03:57,040
you can run and kill and held s9 or

00:03:54,959 --> 00:03:59,760
whatever you want debug with gdp

00:03:57,040 --> 00:04:00,560
which kind of allows maybe a little more

00:03:59,760 --> 00:04:02,799
complexity

00:04:00,560 --> 00:04:04,640
and things that you might not normally

00:04:02,799 --> 00:04:07,200
do in the kernel

00:04:04,640 --> 00:04:08,000
um and so the fuse itself it takes these

00:04:07,200 --> 00:04:10,879
system calls

00:04:08,000 --> 00:04:12,159
and so right um this is called it just

00:04:10,879 --> 00:04:13,840
takes a buffer and

00:04:12,159 --> 00:04:15,280
emits it to a file descriptor is a

00:04:13,840 --> 00:04:15,840
pretty good example of this and there's

00:04:15,280 --> 00:04:18,160
a pretty

00:04:15,840 --> 00:04:19,600
one-to-one mapping of these system calls

00:04:18,160 --> 00:04:22,079
to fuse operations

00:04:19,600 --> 00:04:22,960
some extra metadata that's not important

00:04:22,079 --> 00:04:24,800
here

00:04:22,960 --> 00:04:26,639
fuse is very mature it's been around for

00:04:24,800 --> 00:04:27,600
over 10 years there's a ton of different

00:04:26,639 --> 00:04:30,080
kinds of files and

00:04:27,600 --> 00:04:31,520
file systems not just s3 there's a

00:04:30,080 --> 00:04:32,000
bittorrent file system which is kind of

00:04:31,520 --> 00:04:34,400
fun

00:04:32,000 --> 00:04:35,680
uh there's a dropbox file system to get

00:04:34,400 --> 00:04:38,960
a view into the

00:04:35,680 --> 00:04:40,160
dropbox's service uh sshfs is probably

00:04:38,960 --> 00:04:41,040
the most popular one that people are

00:04:40,160 --> 00:04:43,360
familiar with

00:04:41,040 --> 00:04:45,440
where you can take a remote machine and

00:04:43,360 --> 00:04:48,160
mount any path of its via

00:04:45,440 --> 00:04:48,479
ssh and has some overlapping use cases

00:04:48,160 --> 00:04:51,040
with

00:04:48,479 --> 00:04:52,560
some of the s3 file systems there are

00:04:51,040 --> 00:04:52,960
literally hundreds of these things they

00:04:52,560 --> 00:04:55,440
do

00:04:52,960 --> 00:04:58,080
almost everything hundreds might be a

00:04:55,440 --> 00:04:58,080
little estimate

00:04:59,040 --> 00:05:03,280
so what is s3 uh so this was introduced

00:05:01,600 --> 00:05:06,160
by amazon uh

00:05:03,280 --> 00:05:06,800
point the simple storage service name

00:05:06,160 --> 00:05:09,440
and this

00:05:06,800 --> 00:05:11,360
is um there's two ways to look at this

00:05:09,440 --> 00:05:12,160
there's an implementation that amazon

00:05:11,360 --> 00:05:14,479
provides

00:05:12,160 --> 00:05:15,680
uh and there's also kind of uh the

00:05:14,479 --> 00:05:16,639
protocol itself that has been

00:05:15,680 --> 00:05:18,000
re-implemented

00:05:16,639 --> 00:05:19,919
many times and it's a pretty simple

00:05:18,000 --> 00:05:23,120
protocol i i have implemented it

00:05:19,919 --> 00:05:24,960
in s3 proxy uh it's a little bit xml

00:05:23,120 --> 00:05:28,479
heavy but it's it's pretty

00:05:24,960 --> 00:05:31,360
uh narrow and it's easy to um

00:05:28,479 --> 00:05:31,759
implement so again object storage offers

00:05:31,360 --> 00:05:35,199
um

00:05:31,759 --> 00:05:35,199
kind of scale out or or

00:05:36,240 --> 00:05:40,560
fast performance while retaining low

00:05:38,320 --> 00:05:42,479
cost compared to other kind of network

00:05:40,560 --> 00:05:44,560
traditional network file systems like

00:05:42,479 --> 00:05:46,080
nfs uh there are many

00:05:44,560 --> 00:05:47,919
implementations there's the kind of

00:05:46,080 --> 00:05:50,479
hosted ones amazon

00:05:47,919 --> 00:05:52,240
backlase and google cloud storage but

00:05:50,479 --> 00:05:52,960
there's also a number of free software

00:05:52,240 --> 00:05:56,400
ones uh

00:05:52,960 --> 00:05:58,000
ceph uh mineo and openstack swift so

00:05:56,400 --> 00:05:59,919
you really can kind of bring your

00:05:58,000 --> 00:06:00,639
application to it to whatever uh back

00:05:59,919 --> 00:06:02,639
end

00:06:00,639 --> 00:06:04,319
that you want and there's just this is a

00:06:02,639 --> 00:06:06,319
really mature ecosystem there's

00:06:04,319 --> 00:06:07,680
a lot of applications now have native

00:06:06,319 --> 00:06:08,960
street compatibility and

00:06:07,680 --> 00:06:11,360
there's a bunch of sdks for every

00:06:08,960 --> 00:06:11,360
language

00:06:11,520 --> 00:06:14,960
i just want to give an example of what

00:06:13,360 --> 00:06:18,240
s3 looks like it's

00:06:14,960 --> 00:06:21,440
it's not magic it's just http underneath

00:06:18,240 --> 00:06:23,280
you can put a key into a bucket

00:06:21,440 --> 00:06:25,039
this is going to create an object in

00:06:23,280 --> 00:06:26,080
this case it's only 14 bytes saying

00:06:25,039 --> 00:06:28,080
hello world

00:06:26,080 --> 00:06:29,120
uh kind of the important thing here is

00:06:28,080 --> 00:06:32,720
that there's um

00:06:29,120 --> 00:06:35,120
these x uh dash amz meta this is where

00:06:32,720 --> 00:06:37,199
metadata is stored it's how um some of

00:06:35,120 --> 00:06:37,520
the upcoming file systems store things

00:06:37,199 --> 00:06:42,000
like

00:06:37,520 --> 00:06:44,240
um mode bits or um uh permissions of the

00:06:42,000 --> 00:06:45,280
owner's information that sort of thing

00:06:44,240 --> 00:06:46,639
uh there

00:06:45,280 --> 00:06:48,800
there is a separate set of permissions

00:06:46,639 --> 00:06:51,199
uh the x-amz accol

00:06:48,800 --> 00:06:52,400
that is public or private read sometimes

00:06:51,199 --> 00:06:54,880
this gets a little bit

00:06:52,400 --> 00:06:58,000
confusing having two layers of packles

00:06:54,880 --> 00:06:58,000
one of two systems is

00:06:58,639 --> 00:07:04,400
enforcing uh

00:07:02,080 --> 00:07:06,080
so let's just look at what the

00:07:04,400 --> 00:07:07,919
difference between posix or the linux

00:07:06,080 --> 00:07:10,639
apis and the s3 api's look like

00:07:07,919 --> 00:07:11,919
um so there's there's some similarities

00:07:10,639 --> 00:07:14,319
here where you can think of

00:07:11,919 --> 00:07:15,039
the read system call mapping onto to get

00:07:14,319 --> 00:07:17,599
object

00:07:15,039 --> 00:07:19,280
um right kind of maps on to put object

00:07:17,599 --> 00:07:22,400
and unlink delete uh

00:07:19,280 --> 00:07:24,160
readers we'll explore reader later but

00:07:22,400 --> 00:07:25,840
it's it's kind of incomplete from

00:07:24,160 --> 00:07:27,840
uh or list object is incomplete from the

00:07:25,840 --> 00:07:29,599
reader on your view

00:07:27,840 --> 00:07:31,199
but there's a bunch of operations that

00:07:29,599 --> 00:07:34,240
they're different um

00:07:31,199 --> 00:07:37,280
so you can't rename things in s3

00:07:34,240 --> 00:07:38,080
uh you can copy them and then um delete

00:07:37,280 --> 00:07:40,240
an object

00:07:38,080 --> 00:07:41,759
but that's not atomic and it doesn't

00:07:40,240 --> 00:07:43,919
work on directories because there's no

00:07:41,759 --> 00:07:45,360
notion of directories in history uh

00:07:43,919 --> 00:07:47,440
similarly you can't change mod

00:07:45,360 --> 00:07:48,479
uh an object but you you can copy an

00:07:47,440 --> 00:07:51,840
object to itself

00:07:48,479 --> 00:07:53,759
which is pretty expensive but um

00:07:51,840 --> 00:07:55,280
it's a server-side copy so the the

00:07:53,759 --> 00:07:58,400
zerometer program doesn't see it

00:07:55,280 --> 00:08:00,639
but the important thing is you lack some

00:07:58,400 --> 00:08:03,199
system calls specifically open and lseq

00:08:00,639 --> 00:08:04,639
this is because posix posix is stateful

00:08:03,199 --> 00:08:06,160
where you can open a file and then

00:08:04,639 --> 00:08:09,280
interact with that file descriptor

00:08:06,160 --> 00:08:09,759
but s3 only works on the the key or the

00:08:09,280 --> 00:08:11,440
path

00:08:09,759 --> 00:08:12,960
and so you there's no notion of like

00:08:11,440 --> 00:08:14,319
seeking to an offset you could just read

00:08:12,960 --> 00:08:17,120
at that particular offset

00:08:14,319 --> 00:08:18,639
but um let's say if you were to unlink a

00:08:17,120 --> 00:08:20,560
a file there's

00:08:18,639 --> 00:08:22,319
i guess read continues to work but so

00:08:20,560 --> 00:08:24,000
there's a tension here between

00:08:22,319 --> 00:08:25,039
the system calls that that exists and

00:08:24,000 --> 00:08:25,360
the ones that don't the ones that are

00:08:25,039 --> 00:08:27,039
kind of

00:08:25,360 --> 00:08:29,840
different that we will explore in the

00:08:27,039 --> 00:08:29,840
next couple slides

00:08:30,160 --> 00:08:35,599
uh so let me introduce s3fs this is

00:08:33,360 --> 00:08:37,440
the one i'm most familiar with i am not

00:08:35,599 --> 00:08:38,399
the creator of this i joined much later

00:08:37,440 --> 00:08:40,080
there have been several different

00:08:38,399 --> 00:08:42,080
maintainers but it's one of the earliest

00:08:40,080 --> 00:08:45,120
s3 file systems it's probably um

00:08:42,080 --> 00:08:48,399
came out in 2007 i want to say

00:08:45,120 --> 00:08:50,959
and so it had a focus on on native

00:08:48,399 --> 00:08:51,920
s3 object interoperability and to define

00:08:50,959 --> 00:08:54,000
that again that's

00:08:51,920 --> 00:08:56,480
you know you can access the same objects

00:08:54,000 --> 00:08:59,279
through safs as you could from any other

00:08:56,480 --> 00:08:59,920
um ester application including the adres

00:08:59,279 --> 00:09:02,800
cli or

00:08:59,920 --> 00:09:04,000
rclone or hadoop or something like that

00:09:02,800 --> 00:09:06,240
and the second focus is on

00:09:04,000 --> 00:09:09,120
posix compatibility so it tries to give

00:09:06,240 --> 00:09:11,360
the highest fidelity

00:09:09,120 --> 00:09:13,519
posix implementation that it can given

00:09:11,360 --> 00:09:15,440
that it wants to access the objects

00:09:13,519 --> 00:09:17,279
we keep the keep the files in the native

00:09:15,440 --> 00:09:19,120
s3 object format

00:09:17,279 --> 00:09:21,040
so this means that there's no atomic

00:09:19,120 --> 00:09:23,040
renames again there's no

00:09:21,040 --> 00:09:25,040
s3 rename api there's only copy and

00:09:23,040 --> 00:09:26,800
delete and you can't really implement

00:09:25,040 --> 00:09:27,279
hard links either there's not a concept

00:09:26,800 --> 00:09:29,839
like that

00:09:27,279 --> 00:09:30,720
in s3 but most of everything else works

00:09:29,839 --> 00:09:32,959
uh you know

00:09:30,720 --> 00:09:33,839
all the see time and read write

00:09:32,959 --> 00:09:36,240
everything

00:09:33,839 --> 00:09:38,720
works the way you'd expect um and this

00:09:36,240 --> 00:09:42,240
this does allow you to mount a bucket

00:09:38,720 --> 00:09:43,120
um uh from with multiple multiple uh

00:09:42,240 --> 00:09:44,720
clients come up

00:09:43,120 --> 00:09:46,160
simultaneously although there's a bunch

00:09:44,720 --> 00:09:47,600
of caches in a surface that we'll talk

00:09:46,160 --> 00:09:50,160
about in a couple slides that

00:09:47,600 --> 00:09:50,880
may give you unexpected results this is

00:09:50,160 --> 00:09:52,720
this is not

00:09:50,880 --> 00:09:54,399
like nfs where there's a delegation that

00:09:52,720 --> 00:09:56,160
there's a strong semantics about what

00:09:54,399 --> 00:09:57,600
happens when two

00:09:56,160 --> 00:09:59,920
two clients modify something at the same

00:09:57,600 --> 00:10:02,560
time uh scfs

00:09:59,920 --> 00:10:04,959
is very complicated um it has tons of

00:10:02,560 --> 00:10:06,399
configuration knobs uh probably too many

00:10:04,959 --> 00:10:09,040
uh that allow you to get

00:10:06,399 --> 00:10:09,920
to trade off performance for for other

00:10:09,040 --> 00:10:11,920
considerations

00:10:09,920 --> 00:10:13,680
um it's a lot of backward compatibility

00:10:11,920 --> 00:10:15,760
things you can turn on and off as well

00:10:13,680 --> 00:10:16,720
uh we are trying to rationalize that but

00:10:15,760 --> 00:10:19,839
uh there's still

00:10:16,720 --> 00:10:21,360
it's still really complicated uh chances

00:10:19,839 --> 00:10:22,720
are you can just um

00:10:21,360 --> 00:10:24,399
apt-get install this on your your

00:10:22,720 --> 00:10:26,560
distribution of choice it exists

00:10:24,399 --> 00:10:27,839
almost everywhere debbie and red hat up

00:10:26,560 --> 00:10:30,320
onto freebsd

00:10:27,839 --> 00:10:31,680
even mac os um trying to get this on

00:10:30,320 --> 00:10:33,600
windows but there's not a lot of free

00:10:31,680 --> 00:10:36,000
software windows hackers for obvious

00:10:33,600 --> 00:10:36,000
reasons

00:10:36,800 --> 00:10:41,279
uh the usage of s3fs is pretty simple

00:10:39,680 --> 00:10:44,079
again this is a user mode

00:10:41,279 --> 00:10:45,200
program so you just run the s3fs binary

00:10:44,079 --> 00:10:47,519
you take the bucket

00:10:45,200 --> 00:10:49,200
and give it a mount pass and then you

00:10:47,519 --> 00:10:50,560
can interact with that path as if it's a

00:10:49,200 --> 00:10:52,720
local file system

00:10:50,560 --> 00:10:54,000
so for example you can echo foo into

00:10:52,720 --> 00:10:55,360
mount fu

00:10:54,000 --> 00:10:57,519
and then you can retrieve that file and

00:10:55,360 --> 00:10:58,560
if it says foo similarly all the

00:10:57,519 --> 00:11:00,800
metadata

00:10:58,560 --> 00:11:01,760
exists there when you do a last shell

00:11:00,800 --> 00:11:03,839
and you can actually

00:11:01,760 --> 00:11:05,839
kind of round trip this through the aws

00:11:03,839 --> 00:11:07,519
claw and so this is just the the tool

00:11:05,839 --> 00:11:10,560
that amazon provides for

00:11:07,519 --> 00:11:12,959
interacting with buckets that's um and

00:11:10,560 --> 00:11:14,720
here it's the commands sound similar but

00:11:12,959 --> 00:11:16,480
it's really issuing the

00:11:14,720 --> 00:11:18,880
uh get object and list objects and that

00:11:16,480 --> 00:11:18,880
kind of thing

00:11:19,839 --> 00:11:23,040
uh let me just talk about uh read this

00:11:22,160 --> 00:11:25,360
is this is where

00:11:23,040 --> 00:11:26,560
um s3 fast actually does pretty well the

00:11:25,360 --> 00:11:29,600
performance is

00:11:26,560 --> 00:11:31,760
good uh so when an application asks for

00:11:29,600 --> 00:11:34,800
a data at a given offset maybe a

00:11:31,760 --> 00:11:37,519
128 kilobytes um s3fs

00:11:34,800 --> 00:11:37,839
will issue a bunch of parallel requests

00:11:37,519 --> 00:11:39,839
and

00:11:37,839 --> 00:11:41,680
try to grab as much data as possible and

00:11:39,839 --> 00:11:44,880
stuff it into a cache

00:11:41,680 --> 00:11:47,519
so after it gets all that data

00:11:44,880 --> 00:11:49,040
it will return the the amount that the

00:11:47,519 --> 00:11:50,240
user requested

00:11:49,040 --> 00:11:52,959
and then it will cache that data for the

00:11:50,240 --> 00:11:54,880
feature and so performance is actually

00:11:52,959 --> 00:11:56,000
really good here mostly because of

00:11:54,880 --> 00:11:57,920
caching uh

00:11:56,000 --> 00:12:00,399
and so when users are doing read heavy

00:11:57,920 --> 00:12:02,079
workloads they tend to be pretty happy

00:12:00,399 --> 00:12:04,639
uh but as we'll explore in some slides

00:12:02,079 --> 00:12:07,519
uh not everything is so easy

00:12:04,639 --> 00:12:09,200
uh so as three of us uh writing when you

00:12:07,519 --> 00:12:10,800
just create a new file

00:12:09,200 --> 00:12:13,200
performance is actually pretty good as

00:12:10,800 --> 00:12:16,160
well so when an application calls right

00:12:13,200 --> 00:12:16,720
uh s refers doesn't write that to the to

00:12:16,160 --> 00:12:20,320
s3

00:12:16,720 --> 00:12:20,320
it actually writes it to the local disk

00:12:21,600 --> 00:12:25,360
and then one of um when a couple

00:12:23,519 --> 00:12:27,519
different conditions happen when

00:12:25,360 --> 00:12:29,360
the file is closed or the user f syncs

00:12:27,519 --> 00:12:30,000
it or when more than a configurable

00:12:29,360 --> 00:12:31,839
amount of

00:12:30,000 --> 00:12:33,519
data is written it will actually kick

00:12:31,839 --> 00:12:35,519
off that process to

00:12:33,519 --> 00:12:37,040
synchronize that and block the close

00:12:35,519 --> 00:12:38,560
call for example

00:12:37,040 --> 00:12:40,240
and so we don't need to think about this

00:12:38,560 --> 00:12:41,040
too much except that there's a

00:12:40,240 --> 00:12:44,160
multi-part

00:12:41,040 --> 00:12:45,920
process to upload data

00:12:44,160 --> 00:12:48,240
you you say i'm i want to create an

00:12:45,920 --> 00:12:50,480
object i want to create a large object

00:12:48,240 --> 00:12:52,480
and then you say upload these parts of

00:12:50,480 --> 00:12:53,760
data and then issue a complete

00:12:52,480 --> 00:12:55,680
multi-part upload saying this is now

00:12:53,760 --> 00:12:56,880
complete and expose this object to the

00:12:55,680 --> 00:12:58,720
system

00:12:56,880 --> 00:13:00,240
uh performance is pretty good here

00:12:58,720 --> 00:13:00,959
writing to local disk does have its

00:13:00,240 --> 00:13:04,880
drawbacks

00:13:00,959 --> 00:13:06,480
as people who create very large files

00:13:04,880 --> 00:13:08,079
tend to be concerned about how much

00:13:06,480 --> 00:13:11,360
local space they're using

00:13:08,079 --> 00:13:11,360
but performance is good

00:13:12,240 --> 00:13:16,320
so writing to an existing file is not so

00:13:15,279 --> 00:13:18,399
good

00:13:16,320 --> 00:13:19,440
and so people who are trying to run some

00:13:18,399 --> 00:13:22,639
database or something

00:13:19,440 --> 00:13:23,519
usually or some other kind of mutating

00:13:22,639 --> 00:13:26,399
process

00:13:23,519 --> 00:13:26,800
are not very happy with s3s and probably

00:13:26,399 --> 00:13:29,360
should

00:13:26,800 --> 00:13:30,480
should not be using this because there's

00:13:29,360 --> 00:13:32,079
just a complicated

00:13:30,480 --> 00:13:34,240
process here i don't know how much

00:13:32,079 --> 00:13:35,920
detail i'm going to get into but

00:13:34,240 --> 00:13:37,519
for the day that the data that doesn't

00:13:35,920 --> 00:13:39,440
exist locally it has to do kind of a

00:13:37,519 --> 00:13:43,120
re-modify right to satisfy

00:13:39,440 --> 00:13:46,160
a minimum object size condition of

00:13:43,120 --> 00:13:48,399
s3 then it can

00:13:46,160 --> 00:13:49,600
kick off the multi-part process we

00:13:48,399 --> 00:13:51,199
talked about earlier

00:13:49,600 --> 00:13:53,680
uh the important thing here is that it

00:13:51,199 --> 00:13:54,959
will use a server-side copy for the

00:13:53,680 --> 00:13:58,639
unmodified data

00:13:54,959 --> 00:14:00,160
and so um that that's pretty good from

00:13:58,639 --> 00:14:02,480
your husband's point of view but it's

00:14:00,160 --> 00:14:05,199
actually doing a lot of work on the

00:14:02,480 --> 00:14:06,959
s3 side so if you were to write a one

00:14:05,199 --> 00:14:07,519
byte uh sequence maybe to the end of a

00:14:06,959 --> 00:14:11,600
file

00:14:07,519 --> 00:14:14,560
um it turns into at least three rpcs

00:14:11,600 --> 00:14:15,120
and uh it will do with four rpgs and

00:14:14,560 --> 00:14:17,920
we'll do

00:14:15,120 --> 00:14:19,040
like big o of file size server side iho

00:14:17,920 --> 00:14:22,880
so that's

00:14:19,040 --> 00:14:22,880
it's pretty expensive and pretty bad

00:14:23,199 --> 00:14:26,079
it really can't be helped though given

00:14:24,639 --> 00:14:29,519
the conditions that um even the

00:14:26,079 --> 00:14:31,920
restrictions s3 imposes on us

00:14:29,519 --> 00:14:33,040
uh and the last example from s3afs is is

00:14:31,920 --> 00:14:35,839
actually even worse

00:14:33,040 --> 00:14:37,839
um so this is a user's first experience

00:14:35,839 --> 00:14:40,720
oftentimes they try to list a bucket

00:14:37,839 --> 00:14:41,839
that has many objects in it uh s3fs will

00:14:40,720 --> 00:14:45,199
call the obvious

00:14:41,839 --> 00:14:46,720
list objects rpc

00:14:45,199 --> 00:14:49,199
list objects return some basic

00:14:46,720 --> 00:14:52,800
information like the file name

00:14:49,199 --> 00:14:55,839
the size the modified time

00:14:52,800 --> 00:14:57,920
but to get the full posix richness

00:14:55,839 --> 00:15:00,320
spfs needs to issue a bunch of head

00:14:57,920 --> 00:15:02,959
objects and so this will get

00:15:00,320 --> 00:15:03,680
extended information permissions owner

00:15:02,959 --> 00:15:07,360
some a time

00:15:03,680 --> 00:15:10,639
t time so

00:15:07,360 --> 00:15:12,880
this this is actually really terrible um

00:15:10,639 --> 00:15:15,360
so if you have a thousand files in your

00:15:12,880 --> 00:15:18,160
directory it will do a thousand rpcs

00:15:15,360 --> 00:15:19,839
uh this this really can't be avoided

00:15:18,160 --> 00:15:24,000
when we want to give the the full

00:15:19,839 --> 00:15:24,000
compatibility of posix and so uh

00:15:24,240 --> 00:15:29,600
there is a solution to this um sjfs does

00:15:27,360 --> 00:15:30,959
cache many things uh this this can

00:15:29,600 --> 00:15:32,240
address a lot of the performance issues

00:15:30,959 --> 00:15:35,839
that users have

00:15:32,240 --> 00:15:37,120
um there are three caches the stack hash

00:15:35,839 --> 00:15:40,480
is probably the most important one

00:15:37,120 --> 00:15:42,079
it holds the file metadata that uh the

00:15:40,480 --> 00:15:44,480
kind of ls-l information that you're

00:15:42,079 --> 00:15:46,240
used to caches a hundred thousand

00:15:44,480 --> 00:15:47,600
entries by default um holds onto those

00:15:46,240 --> 00:15:49,680
for 15 minutes

00:15:47,600 --> 00:15:52,399
uh that means that your data can be

00:15:49,680 --> 00:15:54,560
stale for for 15 minutes of someone else

00:15:52,399 --> 00:15:55,440
maybe another s3 s3fss process updates

00:15:54,560 --> 00:15:57,040
it

00:15:55,440 --> 00:15:59,120
uh there are some other caches that are

00:15:57,040 --> 00:16:01,680
not on by default uh some reason

00:15:59,120 --> 00:16:02,959
some for legacy reasons some for kind of

00:16:01,680 --> 00:16:05,279
user experience

00:16:02,959 --> 00:16:06,240
uh the no object cache is kind of a

00:16:05,279 --> 00:16:09,360
negative cache

00:16:06,240 --> 00:16:11,920
where um surprisingly common

00:16:09,360 --> 00:16:13,120
operation that uh file applications do

00:16:11,920 --> 00:16:14,639
is they check for the presence of

00:16:13,120 --> 00:16:17,279
objects that don't exist

00:16:14,639 --> 00:16:20,160
and so enabling that will help a lot of

00:16:17,279 --> 00:16:23,440
build workloads and that sort of thing

00:16:20,160 --> 00:16:24,240
the data cache srfs does cache a certain

00:16:23,440 --> 00:16:26,720
amount of data but

00:16:24,240 --> 00:16:27,759
you can instruct it to cache more uh

00:16:26,720 --> 00:16:30,720
it's a configurable

00:16:27,759 --> 00:16:32,320
amount um what's kind of surprising

00:16:30,720 --> 00:16:34,399
users is that

00:16:32,320 --> 00:16:35,920
the right cache and recache are separate

00:16:34,399 --> 00:16:38,639
things

00:16:35,920 --> 00:16:39,600
the the temporary space is not

00:16:38,639 --> 00:16:41,680
considered a cache

00:16:39,600 --> 00:16:42,639
and when you write a file it doesn't

00:16:41,680 --> 00:16:44,399
have

00:16:42,639 --> 00:16:46,000
uh it doesn't it doesn't keep that the

00:16:44,399 --> 00:16:46,880
read cache as well so it's kind of a

00:16:46,000 --> 00:16:49,120
flaw in the

00:16:46,880 --> 00:16:52,000
um this request only one of these is

00:16:49,120 --> 00:16:54,560
enabled by default

00:16:52,000 --> 00:16:55,199
so um surface is a very complicated

00:16:54,560 --> 00:16:57,199
system

00:16:55,199 --> 00:16:58,720
so a colleague of mine uh wrote

00:16:57,199 --> 00:17:02,240
something called goofy's

00:16:58,720 --> 00:17:05,839
which is similar to sjfs but has kind of

00:17:02,240 --> 00:17:09,120
stronger opinions about what um

00:17:05,839 --> 00:17:11,919
uh what a file system should do

00:17:09,120 --> 00:17:13,679
um so so this has a focus on performance

00:17:11,919 --> 00:17:14,959
and specifically on large files that are

00:17:13,679 --> 00:17:17,039
often found in more

00:17:14,959 --> 00:17:18,880
analytics and kind of machine machine

00:17:17,039 --> 00:17:21,439
learning workloads

00:17:18,880 --> 00:17:23,199
uh it's it's a very simple mapping from

00:17:21,439 --> 00:17:24,880
posix to s3

00:17:23,199 --> 00:17:26,559
it doesn't try to do things that are

00:17:24,880 --> 00:17:29,360
very complicated these heroic

00:17:26,559 --> 00:17:30,640
multi-rpc operations um and so it

00:17:29,360 --> 00:17:33,360
doesn't support

00:17:30,640 --> 00:17:34,000
even more of posix than estradiol atomic

00:17:33,360 --> 00:17:36,400
renames

00:17:34,000 --> 00:17:37,120
um or hard legs like a straightfast it

00:17:36,400 --> 00:17:38,799
doesn't support

00:17:37,120 --> 00:17:40,880
but it also doesn't support random

00:17:38,799 --> 00:17:43,520
rights which tends to be

00:17:40,880 --> 00:17:44,320
important to some people um kind of an

00:17:43,520 --> 00:17:46,160
easy

00:17:44,320 --> 00:17:48,160
way to think about this is that you can

00:17:46,160 --> 00:17:49,919
create a par file with goofies but you

00:17:48,160 --> 00:17:51,840
can't create a zip file

00:17:49,919 --> 00:17:53,600
because of the way um zip files are

00:17:51,840 --> 00:17:55,120
created it has a table of contents in

00:17:53,600 --> 00:17:58,320
the beginning of it

00:17:55,120 --> 00:18:01,280
that is mutable and goofies cannot um

00:17:58,320 --> 00:18:03,200
cannot support that uh similarly fsync

00:18:01,280 --> 00:18:04,320
is not supported um if you want to sync

00:18:03,200 --> 00:18:07,760
the file you just

00:18:04,320 --> 00:18:09,679
write and close it um it's

00:18:07,760 --> 00:18:12,480
it doesn't make the the guarantees about

00:18:09,679 --> 00:18:14,559
uh sync that other other possible

00:18:12,480 --> 00:18:16,400
um it has to fake uh some of the

00:18:14,559 --> 00:18:18,160
metadata to achieve its performance

00:18:16,400 --> 00:18:20,480
uh so it doesn't have something we

00:18:18,160 --> 00:18:22,880
talked about earlier about uids gids

00:18:20,480 --> 00:18:24,720
permissions and some of the timings it

00:18:22,880 --> 00:18:27,919
does support m time because

00:18:24,720 --> 00:18:29,520
s3 gives you up for free um it doesn't

00:18:27,919 --> 00:18:32,320
have the aggressive caches

00:18:29,520 --> 00:18:33,919
that uh s3 plus does uh it does have an

00:18:32,320 --> 00:18:37,039
external

00:18:33,919 --> 00:18:37,840
companion file called catafest that you

00:18:37,039 --> 00:18:40,840
kind of stack

00:18:37,840 --> 00:18:43,440
on there and provide some some amount of

00:18:40,840 --> 00:18:45,200
caching uh but goofy tends to be a lot

00:18:43,440 --> 00:18:46,320
easier to use because it's it's not it

00:18:45,200 --> 00:18:48,559
doesn't have the legacy

00:18:46,320 --> 00:18:50,000
um that srfs says it was created more

00:18:48,559 --> 00:18:50,960
recently it doesn't support some of the

00:18:50,000 --> 00:18:54,720
old-school

00:18:50,960 --> 00:18:56,720
um s35s uh sorry s3 pseudo directories

00:18:54,720 --> 00:18:59,200
and stuff like that uh it doesn't have

00:18:56,720 --> 00:19:00,320
so many knobs to tune things it's it's

00:18:59,200 --> 00:19:01,919
opinion is to

00:19:00,320 --> 00:19:04,080
that goofies will make the right choice

00:19:01,919 --> 00:19:05,679
for you and oftentimes it does have

00:19:04,080 --> 00:19:07,360
better defaults on a box

00:19:05,679 --> 00:19:09,039
uh but when it doesn't you can't tune it

00:19:07,360 --> 00:19:11,440
as much which does upset

00:19:09,039 --> 00:19:12,559
some users i'd just like to walk through

00:19:11,440 --> 00:19:15,679
a couple examples of

00:19:12,559 --> 00:19:18,960
where uh goofy's shines so

00:19:15,679 --> 00:19:19,760
you can just compare these the smaller

00:19:18,960 --> 00:19:23,200
bars are better

00:19:19,760 --> 00:19:24,960
in these graphs but writing tends to be

00:19:23,200 --> 00:19:26,240
uh twice as fast for goofy's it's

00:19:24,960 --> 00:19:29,919
avoiding the uh

00:19:26,240 --> 00:19:32,400
spooling to disc um specifically

00:19:29,919 --> 00:19:34,320
and it has twice as good to create

00:19:32,400 --> 00:19:37,840
performance for

00:19:34,320 --> 00:19:38,559
reasons that are kind of strange within

00:19:37,840 --> 00:19:39,760
srafs

00:19:38,559 --> 00:19:42,240
it actually when you create a file and

00:19:39,760 --> 00:19:43,360
service it creates a zero by object with

00:19:42,240 --> 00:19:45,360
all the metadata

00:19:43,360 --> 00:19:46,559
um and then it'll overwrite that so it's

00:19:45,360 --> 00:19:49,600
doing twice as much work

00:19:46,559 --> 00:19:51,039
as goofy's in this case and so this is

00:19:49,600 --> 00:19:53,039
unfortunately hard to

00:19:51,039 --> 00:19:54,799
uh see because uh it's only listing a

00:19:53,039 --> 00:19:56,640
thousand files but you can see that to

00:19:54,799 --> 00:19:57,440
list a thousand files in s3fs might take

00:19:56,640 --> 00:20:00,240
a thousand

00:19:57,440 --> 00:20:00,799
uh sorry one second to list a thousand

00:20:00,240 --> 00:20:02,880
files

00:20:00,799 --> 00:20:04,159
where it takes uh maybe 200 milliseconds

00:20:02,880 --> 00:20:07,039
for

00:20:04,159 --> 00:20:07,280
goofies these tests were performed uh on

00:20:07,039 --> 00:20:09,840
a

00:20:07,280 --> 00:20:11,840
on a lan um not over like uh the

00:20:09,840 --> 00:20:15,600
internet with a hundred milliseconds

00:20:11,840 --> 00:20:16,880
uh latency so you um you you may be more

00:20:15,600 --> 00:20:18,000
disappointed with the listing

00:20:16,880 --> 00:20:21,280
performance if you're

00:20:18,000 --> 00:20:23,120
running uh remotely

00:20:21,280 --> 00:20:27,120
let's walk through some of the examples

00:20:23,120 --> 00:20:27,120
here where performance differs

00:20:27,760 --> 00:20:31,520
for writing again goofy's has a better

00:20:30,159 --> 00:20:34,640
writing performance

00:20:31,520 --> 00:20:36,720
it doesn't it doesn't spool to disk it

00:20:34,640 --> 00:20:38,000
actually just buffers parts in memory

00:20:36,720 --> 00:20:39,520
and it's it's actually a little more

00:20:38,000 --> 00:20:40,480
clever than that because as soon as it

00:20:39,520 --> 00:20:42,880
receives

00:20:40,480 --> 00:20:44,240
a certain amount of data it uh it

00:20:42,880 --> 00:20:47,440
immediately flushes that

00:20:44,240 --> 00:20:48,400
to s3 and so it can asynchronously

00:20:47,440 --> 00:20:51,200
upload

00:20:48,400 --> 00:20:51,919
while um while the the user is

00:20:51,200 --> 00:20:54,080
continuing to

00:20:51,919 --> 00:20:55,280
to append to the file and when it calls

00:20:54,080 --> 00:20:57,280
close um

00:20:55,280 --> 00:20:59,200
it will issue that last upload part and

00:20:57,280 --> 00:20:59,840
it'll issue a complete multiple upload

00:20:59,200 --> 00:21:01,919
completed

00:20:59,840 --> 00:21:03,760
but almost all the work was already done

00:21:01,919 --> 00:21:06,480
before these are called closed

00:21:03,760 --> 00:21:07,360
versus an s3fs it does all the work uh

00:21:06,480 --> 00:21:09,760
at close or

00:21:07,360 --> 00:21:10,720
or actually and so performance is

00:21:09,760 --> 00:21:12,720
actually really great here

00:21:10,720 --> 00:21:14,320
um especially with larger files and it's

00:21:12,720 --> 00:21:18,159
usually just network limited

00:21:14,320 --> 00:21:20,640
um you're really running a line speed

00:21:18,159 --> 00:21:22,159
uh similarly um reader is also a good

00:21:20,640 --> 00:21:24,720
example uh so

00:21:22,159 --> 00:21:25,919
when the application calls reader or

00:21:24,720 --> 00:21:28,480
durance um

00:21:25,919 --> 00:21:30,000
goofy's just issues list objects uh it

00:21:28,480 --> 00:21:32,000
gets the basic information

00:21:30,000 --> 00:21:33,120
and it returns the basic information it

00:21:32,000 --> 00:21:35,840
doesn't interrogate

00:21:33,120 --> 00:21:36,799
um each object uh to get the permissions

00:21:35,840 --> 00:21:38,799
of that sort of thing

00:21:36,799 --> 00:21:40,400
and so this is really good performance

00:21:38,799 --> 00:21:41,360
and so the reason that goofy's can kind

00:21:40,400 --> 00:21:44,559
of get away with this

00:21:41,360 --> 00:21:45,760
is that um there's there's uh s3 has its

00:21:44,559 --> 00:21:47,679
own permission structure

00:21:45,760 --> 00:21:49,919
and so users are usually more interested

00:21:47,679 --> 00:21:51,840
in that um not always but usually

00:21:49,919 --> 00:21:53,840
and so some of these extended metadata

00:21:51,840 --> 00:21:56,080
just aren't important to some users

00:21:53,840 --> 00:21:57,840
um modified time tends to be more

00:21:56,080 --> 00:22:00,320
important than access time for example

00:21:57,840 --> 00:22:03,120
uh access time is kind of a troublesome

00:22:00,320 --> 00:22:04,000
implement for users for files and not

00:22:03,120 --> 00:22:06,159
owners

00:22:04,000 --> 00:22:08,000
uh but a single single system call only

00:22:06,159 --> 00:22:10,320
issues a single http request so this

00:22:08,000 --> 00:22:12,640
this is good

00:22:10,320 --> 00:22:15,360
uh and i'd like to talk about uh the

00:22:12,640 --> 00:22:16,960
last of the three file systems uh s3ql

00:22:15,360 --> 00:22:19,039
and this is the most different from the

00:22:16,960 --> 00:22:21,039
two before and so this one has

00:22:19,039 --> 00:22:23,440
a different set of focuses uh first one

00:22:21,039 --> 00:22:26,080
performance and on posix compatibility

00:22:23,440 --> 00:22:26,559
and it gives up uh native object access

00:22:26,080 --> 00:22:29,200
so

00:22:26,559 --> 00:22:30,320
uh objects created via s3ql and foster

00:22:29,200 --> 00:22:32,320
via s3ql

00:22:30,320 --> 00:22:34,640
cannot be read by the amazon client or

00:22:32,320 --> 00:22:37,679
hadoop or something like that

00:22:34,640 --> 00:22:40,720
it has very fast metadata access because

00:22:37,679 --> 00:22:43,280
it stores the entire file system view in

00:22:40,720 --> 00:22:45,200
a local sql like database

00:22:43,280 --> 00:22:47,200
for durability reasons it syncs back to

00:22:45,200 --> 00:22:50,480
s3 every every day

00:22:47,200 --> 00:22:54,000
but it can it can service all of those

00:22:50,480 --> 00:22:54,880
locally and so it's philosophy is quite

00:22:54,000 --> 00:22:56,960
different here

00:22:54,880 --> 00:22:58,559
where it treats the object store like a

00:22:56,960 --> 00:22:58,960
block device like a traditional hard

00:22:58,559 --> 00:23:01,679
drive

00:22:58,960 --> 00:23:02,080
um it's hard drive notion in the senses

00:23:01,679 --> 00:23:05,919
uh

00:23:02,080 --> 00:23:07,919
ones with 10 megabyte um sectors but the

00:23:05,919 --> 00:23:10,000
it's like an opaque format just like uh

00:23:07,919 --> 00:23:12,559
let's say the ext format

00:23:10,000 --> 00:23:13,440
is opaque to exit fs right you can't

00:23:12,559 --> 00:23:15,039
read um

00:23:13,440 --> 00:23:16,960
you can't use express to read exe for

00:23:15,039 --> 00:23:19,280
data and vice versa

00:23:16,960 --> 00:23:21,039
uh so because it it has made these

00:23:19,280 --> 00:23:23,120
choices it actually supports the entire

00:23:21,039 --> 00:23:25,039
range of posix including atomic renames

00:23:23,120 --> 00:23:27,200
and hard links

00:23:25,039 --> 00:23:28,080
because it controls the the data format

00:23:27,200 --> 00:23:31,120
it has kind of

00:23:28,080 --> 00:23:32,799
uh what we think of as advanced um

00:23:31,120 --> 00:23:34,240
possible features that you normally get

00:23:32,799 --> 00:23:36,559
from like butter fs where you can

00:23:34,240 --> 00:23:39,200
duplicate data or do snapshots so you

00:23:36,559 --> 00:23:41,360
can go back in time

00:23:39,200 --> 00:23:43,279
does have some some drawbacks only one

00:23:41,360 --> 00:23:44,559
client can mount a bucket at a time so

00:23:43,279 --> 00:23:45,760
there's not really a sharing

00:23:44,559 --> 00:23:48,240
if you want to share data that's stored

00:23:45,760 --> 00:23:51,440
in s3 coil you need to run

00:23:48,240 --> 00:23:54,080
maybe nfs or something on top of s3ql or

00:23:51,440 --> 00:23:56,240
or somebody or something like that

00:23:54,080 --> 00:23:58,080
um the usage is a little bit different

00:23:56,240 --> 00:23:59,600
than estrogen or goofies

00:23:58,080 --> 00:24:02,320
because you actually have to make a file

00:23:59,600 --> 00:24:04,000
system you can't use existing objects

00:24:02,320 --> 00:24:06,320
so you just call it make a best type s3

00:24:04,000 --> 00:24:08,480
coil um here i'm not using encryption

00:24:06,320 --> 00:24:11,679
and turning off all the

00:24:08,480 --> 00:24:13,840
debug output but when you mount uh the

00:24:11,679 --> 00:24:15,919
the bucket and you use an external tool

00:24:13,840 --> 00:24:17,120
to introspect on the bucket you see that

00:24:15,919 --> 00:24:20,159
s recoil is putting

00:24:17,120 --> 00:24:22,000
its own metadata in there and so when

00:24:20,159 --> 00:24:25,039
you create a file via echo

00:24:22,000 --> 00:24:28,080
and then unmount it

00:24:25,039 --> 00:24:31,279
so that it flushes you can look via

00:24:28,080 --> 00:24:33,440
aws s3 ls

00:24:31,279 --> 00:24:34,400
and you can see that it wrote not just

00:24:33,440 --> 00:24:36,400
the four bytes

00:24:34,400 --> 00:24:38,240
into a file named foo it actually put

00:24:36,400 --> 00:24:41,600
stuff them into an opaque object called

00:24:38,240 --> 00:24:43,600
s3 google data one and and so

00:24:41,600 --> 00:24:45,679
your data foo is stored in that thing

00:24:43,600 --> 00:24:47,919
but in that object but it's not

00:24:45,679 --> 00:24:49,200
accessible to other programs

00:24:47,919 --> 00:24:50,720
there are some other metadata in here

00:24:49,200 --> 00:24:52,720
that aren't particularly relevant except

00:24:50,720 --> 00:24:56,000
that the metadata is a

00:24:52,720 --> 00:24:58,400
sqlite database uh let's

00:24:56,000 --> 00:24:59,279
look at the um the two operations from

00:24:58,400 --> 00:25:02,159
before

00:24:59,279 --> 00:25:03,360
uh so when svql writes a file uh sphere

00:25:02,159 --> 00:25:04,559
code writes it to the sorry an

00:25:03,360 --> 00:25:07,120
application writes a file

00:25:04,559 --> 00:25:08,480
a sql alerts it to the local disk and

00:25:07,120 --> 00:25:09,200
then when the application closes or

00:25:08,480 --> 00:25:11,600
fsync

00:25:09,200 --> 00:25:13,360
uh s3 call can asynchronously write that

00:25:11,600 --> 00:25:13,679
to s3 so it can actually write it after

00:25:13,360 --> 00:25:15,760
the

00:25:13,679 --> 00:25:17,039
after the close and so performance is

00:25:15,760 --> 00:25:18,960
actually um

00:25:17,039 --> 00:25:20,720
great here at least for small files

00:25:18,960 --> 00:25:22,799
where you're not network limited

00:25:20,720 --> 00:25:26,000
um for for very large files if you're

00:25:22,799 --> 00:25:27,360
trying to write a couple terabytes um

00:25:26,000 --> 00:25:29,679
you would actually prefer the goofy's

00:25:27,360 --> 00:25:32,400
approach which is the streaming data

00:25:29,679 --> 00:25:34,159
uh but usually for for maybe a

00:25:32,400 --> 00:25:35,120
lightweight network file system use case

00:25:34,159 --> 00:25:39,760
this this is really

00:25:35,120 --> 00:25:43,279
a great um a great way to write data

00:25:39,760 --> 00:25:45,520
reader doesn't require any rbcs uh you

00:25:43,279 --> 00:25:50,000
can esrico can satisfy that locally

00:25:45,520 --> 00:25:50,000
from the um just from this database

00:25:50,960 --> 00:25:54,559
so i want to go back to the tradeoffs we

00:25:52,320 --> 00:25:55,200
talked about earlier and so we can kind

00:25:54,559 --> 00:25:57,039
of see that

00:25:55,200 --> 00:25:58,320
the three systems map onto two of the

00:25:57,039 --> 00:25:59,679
three properties and there's

00:25:58,320 --> 00:26:00,960
there's nothing that can sit in the

00:25:59,679 --> 00:26:02,080
middle of the three end and satisfy

00:26:00,960 --> 00:26:04,480
everything

00:26:02,080 --> 00:26:05,279
um so it really it depends on your use

00:26:04,480 --> 00:26:08,480
case but which

00:26:05,279 --> 00:26:08,480
which system you should prefer

00:26:08,880 --> 00:26:12,320
uh there's a little more detail about

00:26:10,559 --> 00:26:14,320
the the interoperability and

00:26:12,320 --> 00:26:15,679
compatibility um so you can kind of

00:26:14,320 --> 00:26:17,679
compare them here and the two

00:26:15,679 --> 00:26:19,120
interesting examples here are goofies

00:26:17,679 --> 00:26:21,039
versus s3 coil

00:26:19,120 --> 00:26:22,799
and you can kind of see the things that

00:26:21,039 --> 00:26:23,679
one supports are not supported by the

00:26:22,799 --> 00:26:26,559
other

00:26:23,679 --> 00:26:27,120
so native object access and multiple uh

00:26:26,559 --> 00:26:28,400
buckets

00:26:27,120 --> 00:26:29,679
uh multiple clients mounting a bucket

00:26:28,400 --> 00:26:30,720
are sported by goofy's not supportive

00:26:29,679 --> 00:26:34,080
and three call

00:26:30,720 --> 00:26:34,080
kind of the extended posix

00:26:34,159 --> 00:26:37,360
operations are not supported by goofies

00:26:36,320 --> 00:26:40,400
and you can see how

00:26:37,360 --> 00:26:41,760
s3fest kind of straddles uh straddles

00:26:40,400 --> 00:26:45,760
that and tries to offer

00:26:41,760 --> 00:26:49,679
uh both and that kind of explains um

00:26:45,760 --> 00:26:49,679
why it has slower performance

00:26:50,240 --> 00:26:53,520
uh similarly we can kind of we can look

00:26:51,919 --> 00:26:55,840
at the performance here and

00:26:53,520 --> 00:26:56,880
uh we can go from right to left uh s

00:26:55,840 --> 00:27:00,320
recoil

00:26:56,880 --> 00:27:02,080
doesn't need to do rpcs for most of um

00:27:00,320 --> 00:27:04,000
most of its operations or it can delay

00:27:02,080 --> 00:27:07,279
them until um

00:27:04,000 --> 00:27:07,840
uh until after um when it's doing right

00:27:07,279 --> 00:27:11,360
behind

00:27:07,840 --> 00:27:12,799
um flushing uh goofy's doesn't need as

00:27:11,360 --> 00:27:15,200
many rpcs and can

00:27:12,799 --> 00:27:17,520
stream uploads which is a good feature

00:27:15,200 --> 00:27:21,200
but s3fs um

00:27:17,520 --> 00:27:23,520
uh to support uh it's um

00:27:21,200 --> 00:27:26,000
for its trade-offs uh it has to do a lot

00:27:23,520 --> 00:27:27,679
more rpcs and specifically redirect is

00:27:26,000 --> 00:27:29,120
it's pretty bad uh writing to an

00:27:27,679 --> 00:27:29,840
existing file requires a server-side

00:27:29,120 --> 00:27:32,720
copy

00:27:29,840 --> 00:27:33,120
um this this tends to be disappointing

00:27:32,720 --> 00:27:35,840
uh

00:27:33,120 --> 00:27:37,600
especially if you're not local if you're

00:27:35,840 --> 00:27:40,159
let's say your your object store is

00:27:37,600 --> 00:27:40,159
far away

00:27:41,200 --> 00:27:44,320
um just to conclude here uh so before

00:27:43,840 --> 00:27:46,399
you

00:27:44,320 --> 00:27:48,640
um before you choose a possum just

00:27:46,399 --> 00:27:50,559
consider the trade-offs uh that your

00:27:48,640 --> 00:27:51,840
application can tolerate um you know do

00:27:50,559 --> 00:27:53,360
you want something that's

00:27:51,840 --> 00:27:55,440
uh faster or do you want something more

00:27:53,360 --> 00:27:58,559
compatible or do you need to operate

00:27:55,440 --> 00:28:00,080
and so each one of these can can address

00:27:58,559 --> 00:28:02,159
some of these cases and hopefully some

00:28:00,080 --> 00:28:03,919
of yours uh and just like a

00:28:02,159 --> 00:28:05,679
warning here please please use the

00:28:03,919 --> 00:28:06,559
native s3 application when available

00:28:05,679 --> 00:28:09,200
don't use

00:28:06,559 --> 00:28:11,360
for example s3fs and rsync on top of it

00:28:09,200 --> 00:28:12,640
there are replacements like rclone or

00:28:11,360 --> 00:28:16,240
even the aws client

00:28:12,640 --> 00:28:17,679
can do a rsync like operation and so

00:28:16,240 --> 00:28:21,120
don't don't use a file system if you

00:28:17,679 --> 00:28:21,120
don't have to be my advice

00:28:21,520 --> 00:28:24,799
uh and so i don't know if you have any

00:28:23,840 --> 00:28:27,919
questions

00:28:24,799 --> 00:28:29,039
uh i don't see anything yeah we do have

00:28:27,919 --> 00:28:33,039
a couple of questions

00:28:29,039 --> 00:28:37,279
andrew okay okay in cuba window

00:28:33,039 --> 00:28:40,640
uh sorry i don't see them in zoom

00:28:37,279 --> 00:28:45,120
not in zoom in the in the zoom qa

00:28:40,640 --> 00:28:47,279
window so if you go on bottom side

00:28:45,120 --> 00:28:49,039
okay uh new projects the best ones these

00:28:47,279 --> 00:28:50,720
hospitals

00:28:49,039 --> 00:28:53,200
i think that's from before uh is there

00:28:50,720 --> 00:28:54,559
an api ref like swagger ui or something

00:28:53,200 --> 00:28:57,679
for these requests

00:28:54,559 --> 00:29:01,360
uh yes so there's um

00:28:57,679 --> 00:29:04,480
amazon has a rest api

00:29:01,360 --> 00:29:06,559
documentation that um that is is pretty

00:29:04,480 --> 00:29:10,399
good the api is relatively small

00:29:06,559 --> 00:29:13,120
so um i i'd recommend uh just going to

00:29:10,399 --> 00:29:15,520
amazon for that uh there are some

00:29:13,120 --> 00:29:16,960
undocumented apis uh that i have a

00:29:15,520 --> 00:29:19,840
github repository

00:29:16,960 --> 00:29:20,559
that um documents that uh there's some

00:29:19,840 --> 00:29:23,760
extended

00:29:20,559 --> 00:29:26,320
operations that maybe ceph supports that

00:29:23,760 --> 00:29:27,679
amazon doesn't support or sometimes vice

00:29:26,320 --> 00:29:30,320
versa amazon has some

00:29:27,679 --> 00:29:31,840
undocumented apis that exist to get some

00:29:30,320 --> 00:29:35,120
more richness out of the system

00:29:31,840 --> 00:29:38,159
and so if you go to github.com

00:29:35,120 --> 00:29:40,559
you can find those uh

00:29:38,159 --> 00:29:42,000
the second question is are user user

00:29:40,559 --> 00:29:43,760
space file systems like this suitable

00:29:42,000 --> 00:29:46,080
for production interfaces to s3

00:29:43,760 --> 00:29:48,000
this is more for manual intervention s

00:29:46,080 --> 00:29:50,720
resources and local contents

00:29:48,000 --> 00:29:51,520
uh people use s3 file systems in

00:29:50,720 --> 00:29:54,960
production

00:29:51,520 --> 00:29:57,840
definitely uh i see the bug reports um

00:29:54,960 --> 00:29:58,480
i i think that your mileage may vary

00:29:57,840 --> 00:30:02,399
with these

00:29:58,480 --> 00:30:06,000
um certainly uh there are

00:30:02,399 --> 00:30:09,039
some lts um distributions have

00:30:06,000 --> 00:30:11,679
older versions of s3fs for example and

00:30:09,039 --> 00:30:12,480
so there are bugs in ubuntu 1604 there

00:30:11,679 --> 00:30:14,480
are long fixed

00:30:12,480 --> 00:30:16,000
that um people show up with bug reports

00:30:14,480 --> 00:30:18,080
for i

00:30:16,000 --> 00:30:20,240
strongly discourage using very old

00:30:18,080 --> 00:30:22,880
versions of s3fs the new versions uh

00:30:20,240 --> 00:30:23,679
fixed a lot of performance and even data

00:30:22,880 --> 00:30:26,399
loss issues

00:30:23,679 --> 00:30:28,159
uh so i if you're using the lcs

00:30:26,399 --> 00:30:29,039
distribution i would recommend compiling

00:30:28,159 --> 00:30:32,480
from source

00:30:29,039 --> 00:30:35,120
but the um ubuntu 2020 uh

00:30:32,480 --> 00:30:36,799
before is good all the red hat

00:30:35,120 --> 00:30:39,600
enterprise packages are good they're the

00:30:36,799 --> 00:30:39,600
latest packages

00:30:40,080 --> 00:30:44,559
um the next question is are other cloud

00:30:42,559 --> 00:30:47,279
file system solutions generally using

00:30:44,559 --> 00:30:49,200
the s3 file system or is this unique to

00:30:47,279 --> 00:30:52,640
amazon

00:30:49,200 --> 00:30:56,640
um i

00:30:52,640 --> 00:30:59,519
i'm sorry jared wants to ask this live

00:30:56,640 --> 00:31:00,799
i don't i don't understand that piece of

00:30:59,519 --> 00:31:04,080
matter today there

00:31:00,799 --> 00:31:04,720
um so these aren't these aren't specific

00:31:04,080 --> 00:31:05,679
to amazon

00:31:04,720 --> 00:31:07,519
there's many different s3

00:31:05,679 --> 00:31:08,159
implementations including ones from

00:31:07,519 --> 00:31:10,640
google

00:31:08,159 --> 00:31:12,880
and uh backlash and then there's a bunch

00:31:10,640 --> 00:31:14,960
of free software implementations like uh

00:31:12,880 --> 00:31:16,000
openstack swift or video that you can

00:31:14,960 --> 00:31:17,760
run yourself

00:31:16,000 --> 00:31:20,720
uh so i would not say this is unique to

00:31:17,760 --> 00:31:20,720
amazon in any way

00:31:24,080 --> 00:31:28,880
very good so i guess uh that's it as far

00:31:26,960 --> 00:31:31,360
as qa is concerned

00:31:28,880 --> 00:31:32,320
um once again andrew thank you so much

00:31:31,360 --> 00:31:35,120
for

00:31:32,320 --> 00:31:37,200
waking up early what is time in tokyo by

00:31:35,120 --> 00:31:40,320
the way right now is it like 7 00 yeah

00:31:37,200 --> 00:31:41,919
7 am i do become 5 a.m

00:31:40,320 --> 00:31:44,399
well thank you and uh here's here's the

00:31:41,919 --> 00:31:48,159
slides again and um i will be available

00:31:44,399 --> 00:31:51,360
the rest of the day on a chat and

00:31:48,159 --> 00:31:51,679
hopefully during the game night very

00:31:51,360 --> 00:31:53,039
good

00:31:51,679 --> 00:31:54,720
well the good thing is that it's

00:31:53,039 --> 00:31:58,840
saturday for you now so

00:31:54,720 --> 00:32:00,240
you don't have to go anywhere do work or

00:31:58,840 --> 00:32:04,480
something

00:32:00,240 --> 00:32:04,480

YouTube URL: https://www.youtube.com/watch?v=zqksYmExju4


