Title: OLF 2018 Keynote - Open Source and the Revolution of Software Testing
Publication date: 2018-10-21
Playlist: 2018 Videos
Description: 
	Software testing used to be a fairly static ordeal handled by a quality assurance team at a company. Reports were delivered to software engineers after the analysis was complete. During this time, most open source software also often relied upon companies to do internal testing and security analysis instead of running their own systems. Over the past five years we’ve seen a rise in the popularity of Continous Integration (CI) which has sparked a tremendous amount of innovation around on-demand testing triggered by developers themselves. Open source projects like Jenkins, Spinnaker, Artifactory, GitLab and more have risen to meet that demand.

These new software testing methods have also taken hold in open source projects. Many are now doing their own CI, whether they run their own Jenkins infrastructure like the OpenStack project or are using integrations now available in the GitHub for popular proprietary CI systems like Travis CI and CircleCI. Major projects like Kubernetes are opening their conferences with calls for improved code coverage in testing and stressing the importance of CI.

In this talk we’ll explore this new ecosystem of software testing and the impact it has had on open source software development. We’ll also dive into some of the options available for integrating CI into an open source project you’re involved with, including the cultural and practical risks around the use of a fully open source platform you host yourself versus the proprietary hosted offerings.

Speaker: Elizabeth K. Joseph
Videographer: Ernest Parke
Captions: 
	00:00:00,030 --> 00:00:06,450
hi everyone so thank you for staying I

00:00:02,970 --> 00:00:08,069
know it's six o'clock on a Saturday so I

00:00:06,450 --> 00:00:10,440
wanted to come here to talk to you all

00:00:08,069 --> 00:00:11,969
about open source and what I'm sort of

00:00:10,440 --> 00:00:16,199
calling this revolution of software

00:00:11,969 --> 00:00:21,270
testing a little bit about background I

00:00:16,199 --> 00:00:23,460
was here a couple years ago 2016 last

00:00:21,270 --> 00:00:25,170
time I was here I took a little bit of

00:00:23,460 --> 00:00:26,430
time extra to like sort of visit

00:00:25,170 --> 00:00:29,130
Columbus because I'd never been to Ohio

00:00:26,430 --> 00:00:31,800
before Columbus has like one of the best

00:00:29,130 --> 00:00:33,870
zoos in the world I've been to many zoos

00:00:31,800 --> 00:00:35,399
like I went to the one in Tokyo and to

00:00:33,870 --> 00:00:38,460
the one in Berlin and like zoos all over

00:00:35,399 --> 00:00:39,809
the place Columbus it's amazing so if

00:00:38,460 --> 00:00:41,670
you haven't been there you should go if

00:00:39,809 --> 00:00:45,110
you haven't been lately like it's a

00:00:41,670 --> 00:00:45,110
really amazing zoo they have manatees

00:00:45,469 --> 00:00:51,780
but a more pertinent to this talk I've

00:00:50,129 --> 00:00:54,059
been working for about 15 years or in

00:00:51,780 --> 00:00:55,260
and around open source communities and I

00:00:54,059 --> 00:00:56,850
started digging into that it's actually

00:00:55,260 --> 00:00:58,199
been a bit longer than that because I I

00:00:56,850 --> 00:00:59,910
didn't really know about open source

00:00:58,199 --> 00:01:02,609
when I first got online so I did things

00:00:59,910 --> 00:01:05,070
like I put installation instructions for

00:01:02,609 --> 00:01:08,010
mplayer on Debian and my website in like

00:01:05,070 --> 00:01:09,510
2002 this was back when it was really

00:01:08,010 --> 00:01:11,100
hard to get all the codecs is installed

00:01:09,510 --> 00:01:12,810
to actually watch anything because there

00:01:11,100 --> 00:01:15,240
were codecs is all over the places and

00:01:12,810 --> 00:01:16,580
it was really a big mess so I ended up

00:01:15,240 --> 00:01:18,810
having people email me like

00:01:16,580 --> 00:01:21,509
recommendations additional codecs isn't

00:01:18,810 --> 00:01:24,090
like looking back that was a very open

00:01:21,509 --> 00:01:24,840
source II thing that I did without even

00:01:24,090 --> 00:01:26,400
realizing it

00:01:24,840 --> 00:01:27,990
so it wasn't till like 2004 that I

00:01:26,400 --> 00:01:30,869
actually had my name and a readme and

00:01:27,990 --> 00:01:33,210
like a you know like a change log for a

00:01:30,869 --> 00:01:34,590
software project but I've sort of been

00:01:33,210 --> 00:01:37,049
sort of in the spirit of open source

00:01:34,590 --> 00:01:40,710
enos since I got online really at the

00:01:37,049 --> 00:01:44,220
end of the 90s I sort of got into Linux

00:01:40,710 --> 00:01:47,509
early 2000s I joined a Linux users group

00:01:44,220 --> 00:01:50,280
out in Philadelphia and sort of got into

00:01:47,509 --> 00:01:51,570
Linux systems administration because I

00:01:50,280 --> 00:01:53,670
didn't really know what I want to do

00:01:51,570 --> 00:01:56,130
career-wise and the guy who ran the log

00:01:53,670 --> 00:01:57,450
had a small company and he's like won't

00:01:56,130 --> 00:01:58,380
you come out and rack servers I'm like

00:01:57,450 --> 00:02:02,210
that sounds like fun

00:01:58,380 --> 00:02:02,210
he's like for money like yes

00:02:04,920 --> 00:02:10,050
more recently I spent about four years

00:02:06,930 --> 00:02:11,670
working for HP where I was kind of a

00:02:10,050 --> 00:02:14,010
donation to the OpenStack project I

00:02:11,670 --> 00:02:16,050
helped run their CI CD system which is

00:02:14,010 --> 00:02:18,410
actually where a lot of the insight from

00:02:16,050 --> 00:02:21,030
this talk comes from is my work there

00:02:18,410 --> 00:02:22,620
I've also worked on a couple of books I

00:02:21,030 --> 00:02:25,260
worked on the eighth and ninth edition

00:02:22,620 --> 00:02:28,380
of the official Ubuntu book and then

00:02:25,260 --> 00:02:31,050
while I was working on OpenStack in 2016

00:02:28,380 --> 00:02:32,819
I wrote common OpenStack deployments

00:02:31,050 --> 00:02:35,310
which is using puppet to deploy

00:02:32,819 --> 00:02:36,810
OpenStack and it in case you've seen me

00:02:35,310 --> 00:02:38,760
waddling around I am like five and a

00:02:36,810 --> 00:02:41,330
half months pregnant - so you get two

00:02:38,760 --> 00:02:43,440
keynote speakers for the price of one

00:02:41,330 --> 00:02:47,160
but he didn't help with the slides

00:02:43,440 --> 00:02:52,650
mostly he kicks me he probably hates

00:02:47,160 --> 00:02:55,200
Linux so to get started so I was reading

00:02:52,650 --> 00:02:58,080
a book recently has who has read this or

00:02:55,200 --> 00:03:00,810
familiar with the mythical man-month so

00:02:58,080 --> 00:03:05,250
this is a collection of essays by

00:03:00,810 --> 00:03:08,070
Frederick P Brooks he has been working

00:03:05,250 --> 00:03:10,739
in software for a long time he's much

00:03:08,070 --> 00:03:12,510
older than me so he has stories going

00:03:10,739 --> 00:03:14,549
back into the 1960s in software

00:03:12,510 --> 00:03:15,660
development and engineering and one of

00:03:14,549 --> 00:03:17,610
the things I realized when I was reading

00:03:15,660 --> 00:03:20,280
this book was that in a lot of his

00:03:17,610 --> 00:03:22,709
essays software testing is a topic that

00:03:20,280 --> 00:03:23,850
comes up incidentally he doesn't really

00:03:22,709 --> 00:03:25,920
think about it he just happens to

00:03:23,850 --> 00:03:27,570
mention the QA team or some sort of

00:03:25,920 --> 00:03:30,000
software testing that is done in the

00:03:27,570 --> 00:03:32,970
course of his discussion of software

00:03:30,000 --> 00:03:34,739
engineering principles and being someone

00:03:32,970 --> 00:03:38,610
who's been working on open-source I mean

00:03:34,739 --> 00:03:40,019
I'm a sysadmin by trade but I love open

00:03:38,610 --> 00:03:41,850
source and I usually tend to like

00:03:40,019 --> 00:03:43,910
gravitate towards open source projects

00:03:41,850 --> 00:03:46,620
where my sis admin skills can be used

00:03:43,910 --> 00:03:49,560
but I wasn't seeing a lot of software

00:03:46,620 --> 00:03:50,880
testing and open source so and I had I

00:03:49,560 --> 00:03:53,549
wasn't doing it professionally as my day

00:03:50,880 --> 00:03:55,709
job so I was interested to read that

00:03:53,549 --> 00:03:57,180
like software testing is so big inside

00:03:55,709 --> 00:04:00,630
of companies and traditional software

00:03:57,180 --> 00:04:01,920
development and just to sort of step

00:04:00,630 --> 00:04:03,780
back to sort of say what we're gonna

00:04:01,920 --> 00:04:05,910
define is software testing this is the

00:04:03,780 --> 00:04:09,090
super vague distant description from

00:04:05,910 --> 00:04:10,709
Wikipedia it's really just any sort of

00:04:09,090 --> 00:04:12,660
test that's done to give shareholders

00:04:10,709 --> 00:04:14,560
some sort of answer about the quality of

00:04:12,660 --> 00:04:18,850
software

00:04:14,560 --> 00:04:20,380
whether or not that's true I mean it

00:04:18,850 --> 00:04:22,480
definitely depends on the quality of the

00:04:20,380 --> 00:04:24,670
tests but sort of broadly speaking it's

00:04:22,480 --> 00:04:26,650
test you do on your code to see at least

00:04:24,670 --> 00:04:29,020
attempt to see if their software quality

00:04:26,650 --> 00:04:30,490
and there's also been this term that's

00:04:29,020 --> 00:04:33,610
been floating around a lot lately called

00:04:30,490 --> 00:04:36,070
continuous integration continuous

00:04:33,610 --> 00:04:38,620
integration is not software testing into

00:04:36,070 --> 00:04:40,810
itself continuous integration itself is

00:04:38,620 --> 00:04:43,750
just making sure you're committing code

00:04:40,810 --> 00:04:47,260
very frequently so this can be every

00:04:43,750 --> 00:04:48,820
single day or multiple times a week but

00:04:47,260 --> 00:04:50,890
the idea is you don't just go off and

00:04:48,820 --> 00:04:52,900
have a meeting with your little cabal of

00:04:50,890 --> 00:04:54,520
colleagues and write everything into a

00:04:52,900 --> 00:04:57,040
branch that only you have access to and

00:04:54,520 --> 00:04:58,960
then finally push you know fifteen

00:04:57,040 --> 00:05:02,470
thousand lines of code when you're ready

00:04:58,960 --> 00:05:03,700
to come in and this is something that I

00:05:02,470 --> 00:05:06,340
first experienced when I started working

00:05:03,700 --> 00:05:09,250
on OpenStack six years ago and it was

00:05:06,340 --> 00:05:11,610
because the OpenStack project is

00:05:09,250 --> 00:05:15,400
distributed across the whole world

00:05:11,610 --> 00:05:17,260
across hundreds of companies and so the

00:05:15,400 --> 00:05:19,720
only way to do software development in

00:05:17,260 --> 00:05:21,600
that sort of model is by slowly working

00:05:19,720 --> 00:05:23,860
on features and pushing your code often

00:05:21,600 --> 00:05:26,800
the project also has a very strong

00:05:23,860 --> 00:05:29,620
culture of code review and there have

00:05:26,800 --> 00:05:31,840
been studies it shows about 300 lines is

00:05:29,620 --> 00:05:33,729
about the biggest commit you can do and

00:05:31,840 --> 00:05:36,430
have people still reasonably review it

00:05:33,729 --> 00:05:38,830
and speaking from experience even 300

00:05:36,430 --> 00:05:41,590
lines you better have a really good

00:05:38,830 --> 00:05:44,500
friend who's reviewing that code because

00:05:41,590 --> 00:05:46,210
that's huge even that much so I was

00:05:44,500 --> 00:05:47,500
working at HP you know on the open

00:05:46,210 --> 00:05:49,240
source project but they'd also have me

00:05:47,500 --> 00:05:52,050
consult internally about open source

00:05:49,240 --> 00:05:56,140
processes for software engineering and

00:05:52,050 --> 00:05:57,520
one of the meetings I went into they

00:05:56,140 --> 00:06:00,960
were like how can I land a feature in

00:05:57,520 --> 00:06:03,130
300 lines and I'm like aha you can't

00:06:00,960 --> 00:06:04,780
part of this software engineering of

00:06:03,130 --> 00:06:06,570
continuous integration is breaking up

00:06:04,780 --> 00:06:09,940
your features into multiple changes

00:06:06,570 --> 00:06:11,560
describing in time like what what each

00:06:09,940 --> 00:06:13,630
one of these is going to do to impact

00:06:11,560 --> 00:06:15,310
the code it may do nothing right now but

00:06:13,630 --> 00:06:17,950
you're setting the base work for other

00:06:15,310 --> 00:06:19,720
code that's coming soon so that's really

00:06:17,950 --> 00:06:23,050
what continuous integration is it's

00:06:19,720 --> 00:06:25,030
making sure there's transparency and

00:06:23,050 --> 00:06:27,670
your team and putting in all that work

00:06:25,030 --> 00:06:31,300
to make sure everyone is following along

00:06:27,670 --> 00:06:34,380
as you do the software development now

00:06:31,300 --> 00:06:37,090
testing does come into this so in

00:06:34,380 --> 00:06:40,330
continuous integration first you commit

00:06:37,090 --> 00:06:42,370
code to a repository then it typically

00:06:40,330 --> 00:06:45,010
is built in some way so this is if it's

00:06:42,370 --> 00:06:48,250
compiled code you might be compiled it

00:06:45,010 --> 00:06:51,760
may be built into a package it may be

00:06:48,250 --> 00:06:54,310
just dumped into a tarball may be built

00:06:51,760 --> 00:06:56,260
into a container and then in that form

00:06:54,310 --> 00:06:57,880
it is then tested so if it's built into

00:06:56,260 --> 00:07:00,100
a debian package as it may be unpacked

00:06:57,880 --> 00:07:01,540
and then installed on a debian box to

00:07:00,100 --> 00:07:02,770
make sure it works and then some tests

00:07:01,540 --> 00:07:08,380
run in it to make sure everything goes

00:07:02,770 --> 00:07:11,470
well and then you also have the CD part

00:07:08,380 --> 00:07:12,940
of this like CI CD and continuous

00:07:11,470 --> 00:07:15,040
deployment or delivery depending on

00:07:12,940 --> 00:07:17,470
whether you're shipping software to a

00:07:15,040 --> 00:07:18,790
web browser or an app or something or if

00:07:17,470 --> 00:07:20,230
you're just shipping something that's

00:07:18,790 --> 00:07:22,180
gonna go into a box and they shipped out

00:07:20,230 --> 00:07:23,410
to customers this idea of continuous

00:07:22,180 --> 00:07:25,660
delivery or deployment is where you're

00:07:23,410 --> 00:07:27,310
releasing your software very often to

00:07:25,660 --> 00:07:29,440
close the feedback loop between you and

00:07:27,310 --> 00:07:30,970
your customers to make sure that your

00:07:29,440 --> 00:07:33,010
customers are getting the latest

00:07:30,970 --> 00:07:34,270
features really quick and when they run

00:07:33,010 --> 00:07:39,040
into bugs your developers actually

00:07:34,270 --> 00:07:40,840
remember what they wrote so testing does

00:07:39,040 --> 00:07:44,080
end up getting into the CI so this is

00:07:40,840 --> 00:07:45,460
sort of like in traditional software

00:07:44,080 --> 00:07:47,890
development this is all coming together

00:07:45,460 --> 00:07:50,050
in these past few years when I actually

00:07:47,890 --> 00:07:53,080
started working on the OpenStack team I

00:07:50,050 --> 00:07:55,150
didn't know what CI meant they hired me

00:07:53,080 --> 00:07:56,950
and they were like you're gonna be on

00:07:55,150 --> 00:07:58,060
the CI team and I was excited I was

00:07:56,950 --> 00:07:59,380
gonna work on an open source project

00:07:58,060 --> 00:08:00,790
directly doing operations

00:07:59,380 --> 00:08:02,320
you know I passed all the interviews I

00:08:00,790 --> 00:08:05,590
know what I'm doing but they're like CI

00:08:02,320 --> 00:08:07,660
and so like a month and I'm like so it

00:08:05,590 --> 00:08:11,170
is our team continuous integration or

00:08:07,660 --> 00:08:13,690
core infrastructure yes like alright

00:08:11,170 --> 00:08:15,700
that works so this is six years ago

00:08:13,690 --> 00:08:19,450
barely knew what CI was and now like CI

00:08:15,700 --> 00:08:21,400
CD is all over the place so when you

00:08:19,450 --> 00:08:24,880
look at this from a testing framework

00:08:21,400 --> 00:08:28,920
like standpoint what I was seeing inside

00:08:24,880 --> 00:08:32,710
of HP and and what I you know read in

00:08:28,920 --> 00:08:35,200
Frederick pre P Brooks's book was that

00:08:32,710 --> 00:08:37,690
there's software that gets completed and

00:08:35,200 --> 00:08:39,870
then by the developers and then it's

00:08:37,690 --> 00:08:42,839
sent off to the QA team

00:08:39,870 --> 00:08:44,700
these seams were heavily siloed they

00:08:42,839 --> 00:08:46,560
don't really like each other because all

00:08:44,700 --> 00:08:48,300
developers do is write broken stuff and

00:08:46,560 --> 00:08:51,360
all the QA stuff that people do is yell

00:08:48,300 --> 00:08:52,770
at them so these weren't really teams

00:08:51,360 --> 00:08:54,839
they don't really know each other they

00:08:52,770 --> 00:08:57,330
may be working in different offices and

00:08:54,839 --> 00:08:58,830
all they get to communicate is like

00:08:57,330 --> 00:09:00,529
sending code and sending meeting reports

00:08:58,830 --> 00:09:03,420
back saying everything's broken

00:09:00,529 --> 00:09:05,190
so you end up with this opaque report

00:09:03,420 --> 00:09:07,320
that may come like days or weeks after

00:09:05,190 --> 00:09:08,760
you send the code to the QA team by then

00:09:07,320 --> 00:09:09,990
you're trying to move on but now you

00:09:08,760 --> 00:09:11,580
have to go back and fix everything

00:09:09,990 --> 00:09:15,420
because you have all these reports that

00:09:11,580 --> 00:09:19,830
are saying tests failed and you need to

00:09:15,420 --> 00:09:21,150
go back so teams are very isolated what

00:09:19,830 --> 00:09:23,250
I found when I started working in a

00:09:21,150 --> 00:09:26,570
continuous integration environment was

00:09:23,250 --> 00:09:28,920
that this was very much changed so

00:09:26,570 --> 00:09:32,400
because there's small bits of code

00:09:28,920 --> 00:09:35,070
tested and every single commit has the

00:09:32,400 --> 00:09:36,720
code tested you end up with a very very

00:09:35,070 --> 00:09:38,610
small Delta and very few things to

00:09:36,720 --> 00:09:40,800
change so you don't get a report back

00:09:38,610 --> 00:09:43,260
after two weeks you get a report back

00:09:40,800 --> 00:09:44,390
after 45 minutes and then you can go

00:09:43,260 --> 00:09:46,860
ahead and fix your code right there

00:09:44,390 --> 00:09:49,380
while it's still the change is still

00:09:46,860 --> 00:09:51,810
really small so you get this immediate

00:09:49,380 --> 00:09:54,720
feedback of whether you're passing tests

00:09:51,810 --> 00:09:57,660
and developers end up working much more

00:09:54,720 --> 00:09:59,400
closely with the QA team so I was on the

00:09:57,660 --> 00:10:01,339
infrastructure side so all I was doing

00:09:59,400 --> 00:10:03,690
is making sure Jenkins was running right

00:10:01,339 --> 00:10:05,279
but I sort of I was able to see all of

00:10:03,690 --> 00:10:07,470
this because I see developers committing

00:10:05,279 --> 00:10:08,850
code I see the QA team coming in and

00:10:07,470 --> 00:10:10,800
working with the developers as their

00:10:08,850 --> 00:10:13,980
tests are failing so people would come

00:10:10,800 --> 00:10:15,390
in to our IRC Channel and say my test

00:10:13,980 --> 00:10:17,880
failed and I'm like I don't know why it

00:10:15,390 --> 00:10:20,100
failed I mean over time it turns out I

00:10:17,880 --> 00:10:23,370
got really good at Python debugging yes

00:10:20,100 --> 00:10:24,810
I try to help them but it would

00:10:23,370 --> 00:10:26,880
inevitably be someone from the QA team

00:10:24,810 --> 00:10:28,440
who on the tricky problems they would

00:10:26,880 --> 00:10:29,810
come in and interact with the developer

00:10:28,440 --> 00:10:32,250
and say this is why your test failed

00:10:29,810 --> 00:10:36,209
here you know the logs coming from our

00:10:32,250 --> 00:10:39,000
CICS system so it really changed the

00:10:36,209 --> 00:10:40,920
dynamic developers and QA actually

00:10:39,000 --> 00:10:42,209
started becoming much more tightly

00:10:40,920 --> 00:10:44,940
integrated and more friendly with each

00:10:42,209 --> 00:10:47,070
other and the QA people would sometimes

00:10:44,940 --> 00:10:48,990
come in review code and they would

00:10:47,070 --> 00:10:50,880
comment on on code coverage for testing

00:10:48,990 --> 00:10:52,420
and they'd say hey you know you need you

00:10:50,880 --> 00:10:53,529
need tests on this change

00:10:52,420 --> 00:10:55,450
and so they would work more closely

00:10:53,529 --> 00:10:57,519
together so it seems like to me that

00:10:55,450 --> 00:11:03,040
continuous integration was a really good

00:10:57,519 --> 00:11:06,130
system so OpenStack is a great example

00:11:03,040 --> 00:11:08,079
of a project that does testing but when

00:11:06,130 --> 00:11:11,230
I look back at my sort of history in

00:11:08,079 --> 00:11:13,600
working in open source projects how many

00:11:11,230 --> 00:11:16,600
people had saw there were public tests

00:11:13,600 --> 00:11:22,720
running on your open source project and

00:11:16,600 --> 00:11:23,860
say 2005 yeah that is no-one so open

00:11:22,720 --> 00:11:25,540
source has done these really great

00:11:23,860 --> 00:11:27,399
things around software engineering that

00:11:25,540 --> 00:11:29,140
have made it better so much so that some

00:11:27,399 --> 00:11:30,760
companies are doing these inner sourcing

00:11:29,140 --> 00:11:33,100
workshops where they're taking open

00:11:30,760 --> 00:11:34,480
source principles and teaching them to

00:11:33,100 --> 00:11:37,930
their software engineers inside of

00:11:34,480 --> 00:11:39,640
companies so open source pioneered

00:11:37,930 --> 00:11:41,019
things like distributed collaboration

00:11:39,640 --> 00:11:43,149
because there are contributors from all

00:11:41,019 --> 00:11:44,200
over the world they pioneered small

00:11:43,149 --> 00:11:46,209
commits because you have people

00:11:44,200 --> 00:11:48,160
reviewing the code and I know from

00:11:46,209 --> 00:11:49,480
experience if you submit a giant patch

00:11:48,160 --> 00:11:51,279
and you've never met the maintainer

00:11:49,480 --> 00:11:52,630
before they're either never gonna look

00:11:51,279 --> 00:11:53,980
at that patch or it's gonna take them a

00:11:52,630 --> 00:11:56,680
really long time to get around to it

00:11:53,980 --> 00:11:59,769
until they have time and then also

00:11:56,680 --> 00:12:02,079
descriptive commit messages by which I

00:11:59,769 --> 00:12:04,480
mean when you do a commit you don't just

00:12:02,079 --> 00:12:06,190
say what the commit is what the change

00:12:04,480 --> 00:12:08,709
is because you can see that by reading

00:12:06,190 --> 00:12:10,570
the code you explain why you're making

00:12:08,709 --> 00:12:12,550
that change which is something that

00:12:10,570 --> 00:12:14,170
since a lot of open source projects are

00:12:12,550 --> 00:12:17,310
distributed it's really important to

00:12:14,170 --> 00:12:20,670
tell people why you're making a change

00:12:17,310 --> 00:12:25,350
so the open source lots of great things

00:12:20,670 --> 00:12:28,630
software testing not one of them

00:12:25,350 --> 00:12:30,339
so as we look back you know there's

00:12:28,630 --> 00:12:31,750
software testing and QA these things

00:12:30,339 --> 00:12:32,800
going back decades pretty much as long

00:12:31,750 --> 00:12:35,769
as I've been software there's been

00:12:32,800 --> 00:12:37,570
testing for it but open source projects

00:12:35,769 --> 00:12:41,829
just a lot of them didn't have testing

00:12:37,570 --> 00:12:43,750
at all or testing was done inside of a

00:12:41,829 --> 00:12:46,240
company that happened to be using the

00:12:43,750 --> 00:12:48,670
software and how this typically

00:12:46,240 --> 00:12:50,470
manifested was that a maintainer of a

00:12:48,670 --> 00:12:53,709
software project would start getting

00:12:50,470 --> 00:12:55,930
random patches from this one company I'd

00:12:53,709 --> 00:12:57,970
be like where are these patches coming

00:12:55,930 --> 00:12:59,290
from who are these people and it would

00:12:57,970 --> 00:13:01,899
turn out that the company had started

00:12:59,290 --> 00:13:03,430
running some internal tests of the code

00:13:01,899 --> 00:13:04,720
and then every time they found a problem

00:13:03,430 --> 00:13:05,750
they'd start submitting patches to the

00:13:04,720 --> 00:13:07,000
project

00:13:05,750 --> 00:13:08,930
and this is the best case scenario

00:13:07,000 --> 00:13:10,490
because most of the time they wouldn't

00:13:08,930 --> 00:13:12,320
bother submitting patches to the project

00:13:10,490 --> 00:13:15,310
at all and they just patch it internally

00:13:12,320 --> 00:13:18,200
and move on that's not good for anyone

00:13:15,310 --> 00:13:19,640
and I did speak to a few open-source

00:13:18,200 --> 00:13:21,650
projects in preparation for this

00:13:19,640 --> 00:13:23,570
presentation and another thing that I

00:13:21,650 --> 00:13:25,160
noticed when I was talking to them like

00:13:23,570 --> 00:13:26,930
these were a few projects one of them

00:13:25,160 --> 00:13:28,670
was pretty big that didn't have software

00:13:26,930 --> 00:13:30,320
testing a couple medium size and a

00:13:28,670 --> 00:13:32,150
couple like what I like to call egg

00:13:30,320 --> 00:13:33,620
timer projects which are very small

00:13:32,150 --> 00:13:37,880
personal projects with like one

00:13:33,620 --> 00:13:40,160
maintainer and they some of them have

00:13:37,880 --> 00:13:41,510
this they have a bunch of like bash

00:13:40,160 --> 00:13:43,340
scripts and stuff so they test it

00:13:41,510 --> 00:13:45,380
locally so they want to review a patch

00:13:43,340 --> 00:13:47,060
they run a bunch of tests on their

00:13:45,380 --> 00:13:49,940
laptop that are not integrated at all

00:13:47,060 --> 00:13:51,680
with their open source project and they

00:13:49,940 --> 00:13:53,030
say yeah this code looks good it passed

00:13:51,680 --> 00:13:55,880
all my tests that I'd run on my laptop

00:13:53,030 --> 00:13:57,830
and that's like their CI system or their

00:13:55,880 --> 00:13:59,240
testing system is just a bunch of

00:13:57,830 --> 00:14:03,440
scripts that no one has access to and

00:13:59,240 --> 00:14:06,230
doesn't know the contents of but like

00:14:03,440 --> 00:14:07,580
all of these from no testing to testing

00:14:06,230 --> 00:14:09,800
companies they're not integrated into

00:14:07,580 --> 00:14:11,300
the open-source process so when you

00:14:09,800 --> 00:14:13,010
submit code you have no idea what the

00:14:11,300 --> 00:14:14,750
criteria is really there may be a readme

00:14:13,010 --> 00:14:16,940
about how to contribute code or

00:14:14,750 --> 00:14:19,790
something to try to help them guide

00:14:16,940 --> 00:14:21,770
their way but it's really opaque process

00:14:19,790 --> 00:14:25,400
and sadly this is something we've gotten

00:14:21,770 --> 00:14:27,110
very used to we just submit code and

00:14:25,400 --> 00:14:31,790
hope it goes well the maintainer accepts

00:14:27,110 --> 00:14:35,180
it but it turns out we really need

00:14:31,790 --> 00:14:37,610
public software testing one of the

00:14:35,180 --> 00:14:40,580
things that I saw recently I was at a

00:14:37,610 --> 00:14:42,380
cube con in Copenhagen no that's not

00:14:40,580 --> 00:14:46,880
where I was no I was at the open source

00:14:42,380 --> 00:14:50,180
summit Thank You ver I do a lot of

00:14:46,880 --> 00:14:52,880
conferences and one of the things that

00:14:50,180 --> 00:14:55,580
Google committed to is Google is is

00:14:52,880 --> 00:14:57,110
where kubernetes came from they released

00:14:55,580 --> 00:14:58,880
as open source and it's now part of the

00:14:57,110 --> 00:15:00,350
cloud native foundation but Google was

00:14:58,880 --> 00:15:02,990
still running all of their testing

00:15:00,350 --> 00:15:05,360
infrastructure so they have committed

00:15:02,990 --> 00:15:07,940
it's like five or eight million dollars

00:15:05,360 --> 00:15:10,220
over the next three years to help bring

00:15:07,940 --> 00:15:12,440
that software testing thing into the

00:15:10,220 --> 00:15:14,810
community so we're talking real money

00:15:12,440 --> 00:15:16,880
from a huge company that understands the

00:15:14,810 --> 00:15:19,110
value of making sure software testing is

00:15:16,880 --> 00:15:21,870
public and controlled by the community

00:15:19,110 --> 00:15:24,660
and that spoke volumes to me I was like

00:15:21,870 --> 00:15:25,860
this is really something because you

00:15:24,660 --> 00:15:27,810
know we're not just going to rely upon

00:15:25,860 --> 00:15:29,490
the big company who's been funding a lot

00:15:27,810 --> 00:15:31,350
of things anymore we want to bring

00:15:29,490 --> 00:15:35,640
software testing into the public realm

00:15:31,350 --> 00:15:38,760
here and so there are few free reasons

00:15:35,640 --> 00:15:42,450
why we want this so first as I say like

00:15:38,760 --> 00:15:45,690
a clarity of process so when you commit

00:15:42,450 --> 00:15:47,940
code to a project you can see the actual

00:15:45,690 --> 00:15:49,980
tests that need to pass in order for

00:15:47,940 --> 00:15:52,920
your code to come into the the project

00:15:49,980 --> 00:15:54,270
and that means you're not I mean maybe

00:15:52,920 --> 00:15:57,000
the first time you contribute something

00:15:54,270 --> 00:15:58,890
and all the tests fail that's how you

00:15:57,000 --> 00:16:01,080
figure out what the process is but at

00:15:58,890 --> 00:16:03,510
least you have that sort of feedback you

00:16:01,080 --> 00:16:05,190
may have the exact log files the exact

00:16:03,510 --> 00:16:06,600
job that ran but you're getting

00:16:05,190 --> 00:16:08,550
immediate feedback as to what you need

00:16:06,600 --> 00:16:11,940
to improve to make your patch ready for

00:16:08,550 --> 00:16:13,140
someone to actually review it you can

00:16:11,940 --> 00:16:17,400
also do things like enforcement of

00:16:13,140 --> 00:16:21,480
coding standards so python has pet eight

00:16:17,400 --> 00:16:23,820
which a lot of projects go adhere to and

00:16:21,480 --> 00:16:25,530
in a big huge project like OpenStack

00:16:23,820 --> 00:16:27,330
especially where there's over a thousand

00:16:25,530 --> 00:16:29,850
developers each cycle from you know

00:16:27,330 --> 00:16:33,480
hundreds of companies having coding

00:16:29,850 --> 00:16:35,360
standards makes a big difference because

00:16:33,480 --> 00:16:41,700
everyone knows sort of what to expect

00:16:35,360 --> 00:16:42,930
styling wise and they're able to adjust

00:16:41,700 --> 00:16:44,010
their coding standards they know what

00:16:42,930 --> 00:16:46,680
they're gonna look at when they open up

00:16:44,010 --> 00:16:48,720
a new file and this is something that

00:16:46,680 --> 00:16:51,870
computers are really good at and we're

00:16:48,720 --> 00:16:53,610
really bad at so if you tell your CI

00:16:51,870 --> 00:16:55,710
system just to start doing linting or

00:16:53,610 --> 00:16:59,510
run pepp eight or something on your code

00:16:55,710 --> 00:17:02,190
they can find out where the problems are

00:16:59,510 --> 00:17:04,440
another thing that is hugely important

00:17:02,190 --> 00:17:08,400
is integration testing integration

00:17:04,440 --> 00:17:11,190
testing can take the form of how a

00:17:08,400 --> 00:17:12,750
certain patch interacts with other

00:17:11,190 --> 00:17:15,209
things that are close by it in a

00:17:12,750 --> 00:17:17,459
software but also in projects that are

00:17:15,209 --> 00:17:19,709
more modular how it impacts the

00:17:17,459 --> 00:17:21,870
environment that it's in so again like

00:17:19,709 --> 00:17:24,060
project like OpenStack has lots of

00:17:21,870 --> 00:17:26,910
different pieces so you're working on

00:17:24,060 --> 00:17:29,490
the compute button your compute piece

00:17:26,910 --> 00:17:31,590
may impact networking it may impact

00:17:29,490 --> 00:17:32,310
storage and since you're really focused

00:17:31,590 --> 00:17:35,490
on the computer

00:17:32,310 --> 00:17:37,340
you might not realize how your change is

00:17:35,490 --> 00:17:40,320
impacting other parts of the project

00:17:37,340 --> 00:17:42,420
this is also good for testing different

00:17:40,320 --> 00:17:43,620
types of use cases because you might not

00:17:42,420 --> 00:17:45,330
realize that your change actually

00:17:43,620 --> 00:17:47,340
impacts all these pieces all the way

00:17:45,330 --> 00:17:49,430
over here that you've never used so you

00:17:47,340 --> 00:17:52,860
never bothered testing on your laptop

00:17:49,430 --> 00:17:55,070
but it does make it easy for the system

00:17:52,860 --> 00:17:58,080
to run it automatically and catch things

00:17:55,070 --> 00:18:00,180
and I'll talk about in a couple minutes

00:17:58,080 --> 00:18:02,040
but there's also this initiative to do

00:18:00,180 --> 00:18:05,310
cross project testing

00:18:02,040 --> 00:18:08,010
so there's several big sort of cloud

00:18:05,310 --> 00:18:09,510
native projects that have gotten

00:18:08,010 --> 00:18:11,610
together and they actually test against

00:18:09,510 --> 00:18:14,820
each other's patches so there's like the

00:18:11,610 --> 00:18:17,280
open daylight project now sometimes runs

00:18:14,820 --> 00:18:19,200
tests against changes to OpenStack so

00:18:17,280 --> 00:18:21,390
they know that they brake on with

00:18:19,200 --> 00:18:22,890
OpenStack changes or vice versa you get

00:18:21,390 --> 00:18:25,260
some sort of feedback about that and

00:18:22,890 --> 00:18:27,000
this is really exciting for me because I

00:18:25,260 --> 00:18:30,150
happen to love software testing it turns

00:18:27,000 --> 00:18:31,710
out and it's really interesting to see

00:18:30,150 --> 00:18:34,860
more projects working together across

00:18:31,710 --> 00:18:36,930
even project lines and this is like

00:18:34,860 --> 00:18:38,340
going even way beyond like what you'd

00:18:36,930 --> 00:18:40,110
normally think of integration testing

00:18:38,340 --> 00:18:43,200
and beyond what most companies end up

00:18:40,110 --> 00:18:46,230
doing another thing that computers are

00:18:43,200 --> 00:18:48,480
really good at looking for security

00:18:46,230 --> 00:18:50,670
vulnerabilities so there are certain

00:18:48,480 --> 00:18:52,620
patterns in your in your source code

00:18:50,670 --> 00:18:55,440
that could leads us to security

00:18:52,620 --> 00:18:57,540
vulnerabilities obviously this is

00:18:55,440 --> 00:19:00,120
something computers can do really well

00:18:57,540 --> 00:19:02,190
up to a point but that point is the

00:19:00,120 --> 00:19:03,810
really boring stuff when you're

00:19:02,190 --> 00:19:05,190
reviewing code you don't want to be

00:19:03,810 --> 00:19:08,370
looking for the boring stuff you want to

00:19:05,190 --> 00:19:09,900
be using your human brain and finding

00:19:08,370 --> 00:19:11,700
all the interesting things that are

00:19:09,900 --> 00:19:14,730
wrong with the code not looking for

00:19:11,700 --> 00:19:16,920
really simple problems so you can do

00:19:14,730 --> 00:19:20,100
security vulnerability test detection of

00:19:16,920 --> 00:19:22,080
like different different snippets of

00:19:20,100 --> 00:19:24,210
code or looking for known

00:19:22,080 --> 00:19:26,130
vulnerabilities another thing that's

00:19:24,210 --> 00:19:28,110
somewhat related to this there are some

00:19:26,130 --> 00:19:30,540
scanning things that can detect code

00:19:28,110 --> 00:19:34,560
that's been copied and it does that by

00:19:30,540 --> 00:19:37,230
you know comparing it to known code

00:19:34,560 --> 00:19:39,600
bases that are in that similar space so

00:19:37,230 --> 00:19:43,470
you can catch licensing changes our

00:19:39,600 --> 00:19:44,970
licensing non-compliance issues and

00:19:43,470 --> 00:19:45,750
things and this is really important

00:19:44,970 --> 00:19:47,430
inside of company

00:19:45,750 --> 00:19:50,460
it is an important site of open-source

00:19:47,430 --> 00:19:51,960
projects too because we you know some

00:19:50,460 --> 00:19:54,060
open-source projects have had to pull

00:19:51,960 --> 00:19:55,260
code in the past because someone copied

00:19:54,060 --> 00:19:58,080
it from somewhere else and did not

00:19:55,260 --> 00:19:59,490
disclose the licensing and usually it's

00:19:58,080 --> 00:20:01,500
it's really innocent like they just

00:19:59,490 --> 00:20:03,540
don't understand software licensing and

00:20:01,500 --> 00:20:05,130
he said hey I found it on the internet

00:20:03,540 --> 00:20:09,260
they must be open source I can just take

00:20:05,130 --> 00:20:13,140
it and you know we know that that's not

00:20:09,260 --> 00:20:16,410
necessarily the case but especially as

00:20:13,140 --> 00:20:18,000
open-source grows i've been seeing a lot

00:20:16,410 --> 00:20:19,410
of software developers that I've been

00:20:18,000 --> 00:20:25,080
working with don't necessarily know a

00:20:19,410 --> 00:20:27,300
lot about open source so open source

00:20:25,080 --> 00:20:29,940
didn't have a lot of tooling but now

00:20:27,300 --> 00:20:31,680
there is actually a lot out there just

00:20:29,940 --> 00:20:33,450
in the past six years since I started

00:20:31,680 --> 00:20:35,490
playing around to the software testing

00:20:33,450 --> 00:20:37,260
in the OpenStack project we've seen a

00:20:35,490 --> 00:20:40,500
huge shift so in the beginning

00:20:37,260 --> 00:20:43,470
I'd say we're talking you know more than

00:20:40,500 --> 00:20:45,690
six years ago we had this tool called

00:20:43,470 --> 00:20:47,310
Hudson which was forked into Jenkins and

00:20:45,690 --> 00:20:49,740
that was kind of the only game in town

00:20:47,310 --> 00:20:52,020
for a while the only thing you could use

00:20:49,740 --> 00:20:54,420
was Jenkins for open source testing

00:20:52,020 --> 00:20:56,910
because that was the software that

00:20:54,420 --> 00:20:58,470
existed but slowly you had other other

00:20:56,910 --> 00:21:03,030
ones being brought around there's a

00:20:58,470 --> 00:21:05,280
mozilla developer there's gitlab which

00:21:03,030 --> 00:21:07,170
now is like a whole CIA CD portion in it

00:21:05,280 --> 00:21:09,240
and then there's also things that are

00:21:07,170 --> 00:21:10,530
sort of more focused around deployment

00:21:09,240 --> 00:21:12,420
but they sort of are similar in the

00:21:10,530 --> 00:21:15,270
pipeline you have spinnaker which was

00:21:12,420 --> 00:21:17,010
released by Netflix you also need

00:21:15,270 --> 00:21:18,810
somewhere to put all the logs and the

00:21:17,010 --> 00:21:20,760
container images and like other stuff

00:21:18,810 --> 00:21:21,930
that comes out of a build and so there's

00:21:20,760 --> 00:21:23,730
tools like artifactory

00:21:21,930 --> 00:21:27,420
which holds all of your testing

00:21:23,730 --> 00:21:28,200
artifacts as an open source project one

00:21:27,420 --> 00:21:31,730
of the things that came out of the

00:21:28,200 --> 00:21:34,290
OpenStack project because sort of that

00:21:31,730 --> 00:21:36,810
when I left the project a couple years

00:21:34,290 --> 00:21:40,410
ago we were running about 2,000 tests an

00:21:36,810 --> 00:21:43,710
hour and this is for everything from

00:21:40,410 --> 00:21:47,310
like doing simple Python tech checks to

00:21:43,710 --> 00:21:49,020
launching an entire instance of

00:21:47,310 --> 00:21:51,630
OpenStack and running integration tests

00:21:49,020 --> 00:21:54,000
on them so about 2000 an hour that's

00:21:51,630 --> 00:21:56,510
like 2,000 VMs or more than that because

00:21:54,000 --> 00:21:59,190
you can run the Python test really quick

00:21:56,510 --> 00:22:01,920
this is like a huge fleet

00:21:59,190 --> 00:22:03,960
of machines and if you're doing 2,000

00:22:01,920 --> 00:22:05,340
changes an hour that's a lot of changes

00:22:03,960 --> 00:22:08,640
so you want to make sure they're all

00:22:05,340 --> 00:22:10,800
tested against each other and that's

00:22:08,640 --> 00:22:13,710
somewhat unusual that's a very very

00:22:10,800 --> 00:22:15,360
fast-paced open-source project so they

00:22:13,710 --> 00:22:17,100
develop Zul to make sure everything was

00:22:15,360 --> 00:22:19,260
properly tested against each other and

00:22:17,100 --> 00:22:21,330
the creation of Zul they actually end up

00:22:19,260 --> 00:22:23,760
getting rid of Jenkins entirely because

00:22:21,330 --> 00:22:26,190
they were talking directly the OpenStack

00:22:23,760 --> 00:22:30,180
cloud providers without the need of sort

00:22:26,190 --> 00:22:33,990
any sort of intermediary so Zul CI

00:22:30,180 --> 00:22:35,190
they released version 3 a little while

00:22:33,990 --> 00:22:37,410
back so it's worth checking out if

00:22:35,190 --> 00:22:38,880
you're interested

00:22:37,410 --> 00:22:41,760
but proprietary companies have stepped

00:22:38,880 --> 00:22:44,370
up to the plate - if you've worked on a

00:22:41,760 --> 00:22:46,110
github project lately you may have

00:22:44,370 --> 00:22:48,180
noticed there are now integrations that

00:22:46,110 --> 00:22:49,890
some like things that say like would you

00:22:48,180 --> 00:22:52,170
like to integrate this like with the

00:22:49,890 --> 00:22:54,210
testing platform and a lot of these

00:22:52,170 --> 00:22:55,980
tools like Travis and circle CI team

00:22:54,210 --> 00:22:59,580
City they will all integrate into your

00:22:55,980 --> 00:23:00,930
github repo and there's even in like the

00:22:59,580 --> 00:23:03,090
github marketplace you can look around

00:23:00,930 --> 00:23:06,090
for software testing and integrate these

00:23:03,090 --> 00:23:08,730
things really closely with your project

00:23:06,090 --> 00:23:11,550
a lot of them have like free versions

00:23:08,730 --> 00:23:12,810
for open-source projects but I will talk

00:23:11,550 --> 00:23:17,460
about these things a bit more but

00:23:12,810 --> 00:23:19,590
there's a lot of them out there now and

00:23:17,460 --> 00:23:21,170
if you look how well you can see that it

00:23:19,590 --> 00:23:23,160
doesn't really matter a whole lot but

00:23:21,170 --> 00:23:25,260
the pipeline's for these these

00:23:23,160 --> 00:23:27,120
continuous integration systems are gonna

00:23:25,260 --> 00:23:29,790
be pretty similar so over here you've

00:23:27,120 --> 00:23:32,040
got a jenkins file jenkins open source

00:23:29,790 --> 00:23:34,650
and you have like stages you you check

00:23:32,040 --> 00:23:37,230
out your code repository you do some

00:23:34,650 --> 00:23:39,990
sort of build you may be published

00:23:37,230 --> 00:23:43,230
whatever comes out of that circle CI

00:23:39,990 --> 00:23:45,120
it's a slightly different config file

00:23:43,230 --> 00:23:47,850
but again you have a check out you have

00:23:45,120 --> 00:23:49,110
a run you have a storing of artifacts so

00:23:47,850 --> 00:23:51,990
a lot of these pipelines look very

00:23:49,110 --> 00:23:53,610
similar and all of these tools allow you

00:23:51,990 --> 00:23:55,670
to configure it through the GUI but I

00:23:53,610 --> 00:23:57,690
hate doing that and you probably do too

00:23:55,670 --> 00:23:59,700
I'll show you the config file that's

00:23:57,690 --> 00:24:01,530
much more fun plus the config file can

00:23:59,700 --> 00:24:04,380
be stored in revision control which is

00:24:01,530 --> 00:24:05,040
like the best because I was working on

00:24:04,380 --> 00:24:06,900
sister

00:24:05,040 --> 00:24:09,030
and open-source project and we want to

00:24:06,900 --> 00:24:11,760
know the history of how a project has

00:24:09,030 --> 00:24:13,470
been changed but pretty much these

00:24:11,760 --> 00:24:14,850
configuration files are very similar

00:24:13,470 --> 00:24:18,060
across platforms where they're using an

00:24:14,850 --> 00:24:18,960
open-source one or a proprietary one and

00:24:18,060 --> 00:24:21,120
then you end up with something like a

00:24:18,960 --> 00:24:23,310
pipeline so this is Jenkins in their

00:24:21,120 --> 00:24:26,190
stage view so I said there's a checkout

00:24:23,310 --> 00:24:29,610
build in this case I'm publishing a

00:24:26,190 --> 00:24:32,130
docker image to a local repository on

00:24:29,610 --> 00:24:34,710
get lab and then running a test against

00:24:32,130 --> 00:24:37,050
that container image once the tests pass

00:24:34,710 --> 00:24:39,260
I deploy the website so I have a demo

00:24:37,050 --> 00:24:41,940
that I that I've done before

00:24:39,260 --> 00:24:46,530
we're actually do this on stage and it

00:24:41,940 --> 00:24:47,730
almost always works but yeah this is

00:24:46,530 --> 00:24:51,900
kind of what it looks like just have

00:24:47,730 --> 00:24:53,820
your code go through the process a lot

00:24:51,900 --> 00:24:56,040
of these tools also have test reporting

00:24:53,820 --> 00:24:56,730
built-ins so as I said you're a software

00:24:56,040 --> 00:24:58,760
developer

00:24:56,730 --> 00:25:01,410
you want to know if the tests past

00:24:58,760 --> 00:25:03,960
Garrett has this little section in it

00:25:01,410 --> 00:25:07,110
where you can type in results in this

00:25:03,960 --> 00:25:10,020
case this is building the the ansible

00:25:07,110 --> 00:25:11,340
tooling for OpenStack so you can see so

00:25:10,020 --> 00:25:13,920
the first time you commit something you

00:25:11,340 --> 00:25:15,150
know all these fail right but then as

00:25:13,920 --> 00:25:17,490
you get better at it and sort of learn

00:25:15,150 --> 00:25:18,450
the policies of the project you can see

00:25:17,490 --> 00:25:21,360
like they're they're building

00:25:18,450 --> 00:25:22,830
documentation they're doing an ansible

00:25:21,360 --> 00:25:24,990
linter which is just checking like your

00:25:22,830 --> 00:25:27,480
coding styles and then they're testing

00:25:24,990 --> 00:25:29,190
the ansible modules against CentOS open

00:25:27,480 --> 00:25:31,260
SUSE a and a couple versions of Ubuntu

00:25:29,190 --> 00:25:34,200
and when you click on each one of these

00:25:31,260 --> 00:25:35,820
it brings you to the log files so

00:25:34,200 --> 00:25:37,260
Gerrits the code review tool and that's

00:25:35,820 --> 00:25:39,390
pretty much what you interact with the

00:25:37,260 --> 00:25:41,190
entire time so all of your test results

00:25:39,390 --> 00:25:42,780
come into there and then once all the

00:25:41,190 --> 00:25:44,460
tests pass that's when the humans come

00:25:42,780 --> 00:25:45,930
in and actually review the code because

00:25:44,460 --> 00:25:48,530
they're like alright it's good enough

00:25:45,930 --> 00:25:51,320
for a regular person to come by now

00:25:48,530 --> 00:25:53,160
github has has very similar integration

00:25:51,320 --> 00:25:54,750
you might have seen this if you're

00:25:53,160 --> 00:25:59,730
working on any open source project that

00:25:54,750 --> 00:26:01,080
has testing in it this is really cool

00:25:59,730 --> 00:26:03,540
for me because I worked on Gerrit and

00:26:01,080 --> 00:26:05,640
OpenStack first and I only started

00:26:03,540 --> 00:26:07,470
working with github like directly two

00:26:05,640 --> 00:26:09,990
years ago in any serious way from my job

00:26:07,470 --> 00:26:11,010
so yeah github has like an integration

00:26:09,990 --> 00:26:12,780
too and if you click on the details

00:26:11,010 --> 00:26:15,750
it'll send you to the Jenkins server

00:26:12,780 --> 00:26:17,860
that ran that job in this case it's a

00:26:15,750 --> 00:26:19,809
change to a website

00:26:17,860 --> 00:26:21,730
that we were hosting publicly or had the

00:26:19,809 --> 00:26:23,080
source code was public so we did a test

00:26:21,730 --> 00:26:25,030
build to make sure that the websites

00:26:23,080 --> 00:26:26,590
still built and then it would validate

00:26:25,030 --> 00:26:28,929
the links on the website there's just a

00:26:26,590 --> 00:26:32,820
simple test that was run so test

00:26:28,929 --> 00:26:35,530
reporting integrated into this process

00:26:32,820 --> 00:26:39,929
has been I mean leaps and bounds based

00:26:35,530 --> 00:26:39,929
on like what I saw seven years ago even

00:26:40,440 --> 00:26:44,320
so this brings us to the question of how

00:26:42,730 --> 00:26:45,730
you would do this for your project so

00:26:44,320 --> 00:26:46,929
I'm gonna ask you now how many of you

00:26:45,730 --> 00:26:54,190
are working on projects that have

00:26:46,929 --> 00:26:55,540
testing in them that is not enough how

00:26:54,190 --> 00:26:58,480
many of you want to have testing but

00:26:55,540 --> 00:27:02,559
don't yet all right this is a pretty

00:26:58,480 --> 00:27:03,549
decent number so as I said like I talked

00:27:02,559 --> 00:27:06,160
to a bunch of open-source maintainer

00:27:03,549 --> 00:27:07,900
while putting together this talk and

00:27:06,160 --> 00:27:09,760
uniformly every single one of them I

00:27:07,900 --> 00:27:12,520
talked to said that they really wished

00:27:09,760 --> 00:27:14,440
they could do software testing because

00:27:12,520 --> 00:27:15,850
either it was locked up inside of a

00:27:14,440 --> 00:27:17,380
company that they happen to know was

00:27:15,850 --> 00:27:18,640
doing software count testing or was

00:27:17,380 --> 00:27:22,330
their company and they just weren't

00:27:18,640 --> 00:27:23,980
making it public or they had that pile

00:27:22,330 --> 00:27:26,440
of scripts on their laptop that they run

00:27:23,980 --> 00:27:27,790
before merging any code that no one

00:27:26,440 --> 00:27:29,020
could see and they're like well I'm not

00:27:27,790 --> 00:27:33,190
going to open source this cuz it's

00:27:29,020 --> 00:27:35,500
terrible but they all like like blacks

00:27:33,190 --> 00:27:38,290
like one or more of these things it was

00:27:35,500 --> 00:27:40,750
either time especially on the smaller

00:27:38,290 --> 00:27:43,240
projects the maintainer --zz were so

00:27:40,750 --> 00:27:45,790
focused on making sure that their code

00:27:43,240 --> 00:27:47,350
actually got written they were like I

00:27:45,790 --> 00:27:49,360
don't have time for software testing

00:27:47,350 --> 00:27:50,830
like I just brought I'd read this in my

00:27:49,360 --> 00:27:52,600
free time and I don't have time to set

00:27:50,830 --> 00:27:57,100
up a whole testing infrastructure for my

00:27:52,600 --> 00:27:59,440
little like recipe manager some of them

00:27:57,100 --> 00:28:01,510
also lack the expertise and this is

00:27:59,440 --> 00:28:02,919
related to time of course they just

00:28:01,510 --> 00:28:05,890
didn't want to take the time to learn

00:28:02,919 --> 00:28:07,059
how to run sort of a system because

00:28:05,890 --> 00:28:09,010
again like most people who are

00:28:07,059 --> 00:28:11,590
maintainer open-source projects are

00:28:09,010 --> 00:28:13,120
developers not operations people and so

00:28:11,590 --> 00:28:17,530
they're like I don't know how to build a

00:28:13,120 --> 00:28:19,750
CI pipeline or or they're missing other

00:28:17,530 --> 00:28:21,250
resources this could be infrastructure

00:28:19,750 --> 00:28:24,400
because you actually need somewhere to

00:28:21,250 --> 00:28:26,440
run your tests and that's not free for

00:28:24,400 --> 00:28:27,910
the most part you do have to go the

00:28:26,440 --> 00:28:30,120
steps to actually get a place to run

00:28:27,910 --> 00:28:31,559
your to software tests

00:28:30,120 --> 00:28:33,630
and this sort of where the money comes

00:28:31,559 --> 00:28:35,190
into it - because you're using a hosted

00:28:33,630 --> 00:28:38,370
platform you probably have to pay for it

00:28:35,190 --> 00:28:39,390
if you're running your tests on a bunch

00:28:38,370 --> 00:28:41,910
of virtual machines you have to pay for

00:28:39,390 --> 00:28:43,620
those too so the question is like where

00:28:41,910 --> 00:28:45,210
would you begin if you were a small

00:28:43,620 --> 00:28:46,350
project or a medium-sized project or

00:28:45,210 --> 00:28:47,790
you're trying to convince your boss that

00:28:46,350 --> 00:28:51,300
we really need software testing in this

00:28:47,790 --> 00:28:54,870
open source project so there's a couple

00:28:51,300 --> 00:28:58,950
of routes we can go here the first is

00:28:54,870 --> 00:29:01,980
going the proprietary route and this is

00:28:58,950 --> 00:29:03,840
one not what I'm gonna recommend but I

00:29:01,980 --> 00:29:05,370
will say there are a lot of reasons

00:29:03,840 --> 00:29:08,220
people go the proprietary around it's

00:29:05,370 --> 00:29:10,320
it's totally valid actually one of the

00:29:08,220 --> 00:29:13,410
things these services try really hard to

00:29:10,320 --> 00:29:16,140
do is they like the value that they

00:29:13,410 --> 00:29:18,450
bring to the ecosystem is by making it

00:29:16,140 --> 00:29:20,940
really easy for open source projects and

00:29:18,450 --> 00:29:22,980
other people to get started so I have

00:29:20,940 --> 00:29:24,870
some friends over who work at circle CI

00:29:22,980 --> 00:29:26,400
they have developer advocates who go to

00:29:24,870 --> 00:29:28,530
open source conferences and give talks

00:29:26,400 --> 00:29:30,240
give tutorials and they're working

00:29:28,530 --> 00:29:32,610
really hard to make it super easy for

00:29:30,240 --> 00:29:34,050
anyone to use circle CI and then they

00:29:32,610 --> 00:29:36,390
give it away for free to open source

00:29:34,050 --> 00:29:39,030
projects so people get familiar with the

00:29:36,390 --> 00:29:41,010
tooling and it makes it easier for them

00:29:39,030 --> 00:29:42,540
to use and then eventually they want to

00:29:41,010 --> 00:29:45,870
sell it you know to their employers or

00:29:42,540 --> 00:29:48,390
whatnot so they make it really easy to

00:29:45,870 --> 00:29:50,700
get things going and I will say not just

00:29:48,390 --> 00:29:52,080
because Jason's in the audience but get

00:29:50,700 --> 00:29:54,510
lab actually does a really good job of

00:29:52,080 --> 00:29:56,100
this too and get labs open source so you

00:29:54,510 --> 00:29:58,230
guys all come to open-source conferences

00:29:56,100 --> 00:30:00,300
too and you give great demos and like

00:29:58,230 --> 00:30:01,860
we'll make it easy as well so it's not

00:30:00,300 --> 00:30:03,330
just the full realm with the proprietary

00:30:01,860 --> 00:30:05,370
systems but they that is where they

00:30:03,330 --> 00:30:07,679
focus a lot of time and energy make it

00:30:05,370 --> 00:30:09,420
easy as possible they want to make it

00:30:07,679 --> 00:30:12,210
easy to configure they want to make it

00:30:09,420 --> 00:30:14,220
easy to integrate with github and pretty

00:30:12,210 --> 00:30:15,960
much everything they can do to make it

00:30:14,220 --> 00:30:20,160
super easy for anyone to add testing to

00:30:15,960 --> 00:30:22,280
their project it often includes like all

00:30:20,160 --> 00:30:24,840
the infrastructure site maintenance so

00:30:22,280 --> 00:30:26,580
you don't even know where in the world

00:30:24,840 --> 00:30:27,150
your job is running because you don't

00:30:26,580 --> 00:30:29,340
have to

00:30:27,150 --> 00:30:33,870
you are just configuring a job to run

00:30:29,340 --> 00:30:35,400
Python tests and not knowing where it's

00:30:33,870 --> 00:30:38,430
running anywhere in the world can be

00:30:35,400 --> 00:30:42,010
probably a bad thing too

00:30:38,430 --> 00:30:43,630
but the idea is that like the host is

00:30:42,010 --> 00:30:45,160
this proprietary companies handle all

00:30:43,630 --> 00:30:47,940
that for you you don't need to worry

00:30:45,160 --> 00:30:50,620
about upgrading Linux that Linux

00:30:47,940 --> 00:30:52,960
distributions server runs on this is all

00:30:50,620 --> 00:30:54,940
abstracted out from under you and the

00:30:52,960 --> 00:30:56,980
initial costs of this is often low as I

00:30:54,940 --> 00:30:58,360
said a lot of these give things away or

00:30:56,980 --> 00:31:01,800
at least a certain number of tests per

00:30:58,360 --> 00:31:03,940
month or whatnot to open-source projects

00:31:01,800 --> 00:31:07,030
but there's a lot of considerations here

00:31:03,940 --> 00:31:10,330
like we're all open-source people right

00:31:07,030 --> 00:31:14,530
so we know the pitfalls of proprietary

00:31:10,330 --> 00:31:17,260
software the first one is asking

00:31:14,530 --> 00:31:20,020
yourself whether the service that you're

00:31:17,260 --> 00:31:23,230
using has sort of some sort of open

00:31:20,020 --> 00:31:24,760
standard or are they locking you in with

00:31:23,230 --> 00:31:29,260
some of these services if you want to

00:31:24,760 --> 00:31:31,690
say run some golang testing you need to

00:31:29,260 --> 00:31:34,270
write your software testing into their

00:31:31,690 --> 00:31:36,520
framework so if you ever leave that

00:31:34,270 --> 00:31:40,060
service you have to rewrite all of your

00:31:36,520 --> 00:31:41,590
tests that's not good

00:31:40,060 --> 00:31:43,150
that really locks you in to the

00:31:41,590 --> 00:31:45,400
infrastructure that they're using and

00:31:43,150 --> 00:31:48,760
means it's gonna be less likely that

00:31:45,400 --> 00:31:50,740
you'll ever leave and I would slow that

00:31:48,760 --> 00:31:52,420
we'll say that like even across open

00:31:50,740 --> 00:31:53,590
source and proprietary all the config

00:31:52,420 --> 00:31:56,290
files for these things are gonna be

00:31:53,590 --> 00:31:59,350
different so that's not put there's not

00:31:56,290 --> 00:32:02,830
really an open standard for continuous

00:31:59,350 --> 00:32:05,980
integration testing but more about like

00:32:02,830 --> 00:32:08,710
how you write your tests another thing

00:32:05,980 --> 00:32:11,920
to ask is whether the vendor has history

00:32:08,710 --> 00:32:14,560
of communicating with their community

00:32:11,920 --> 00:32:17,200
it's worth asking other companies and

00:32:14,560 --> 00:32:19,450
organizations and software projects in

00:32:17,200 --> 00:32:21,520
that space we're using them like do you

00:32:19,450 --> 00:32:23,410
have outages or as an open source

00:32:21,520 --> 00:32:26,560
project do you find you have more

00:32:23,410 --> 00:32:28,060
downtime than you'd like one of the

00:32:26,560 --> 00:32:30,490
things I actually really like about

00:32:28,060 --> 00:32:32,440
get-get lab is they did they've done

00:32:30,490 --> 00:32:34,120
public post mortems before where they

00:32:32,440 --> 00:32:35,830
would say a report give out a report for

00:32:34,120 --> 00:32:37,530
their hosted service and say this is

00:32:35,830 --> 00:32:39,640
what happened we screwed up and

00:32:37,530 --> 00:32:41,500
sometimes they really screwed up

00:32:39,640 --> 00:32:43,060
but we knew about it and they were

00:32:41,500 --> 00:32:44,890
honest about it and they communicated

00:32:43,060 --> 00:32:47,380
that in a way that brought confidence to

00:32:44,890 --> 00:32:48,460
people who were using their service so

00:32:47,380 --> 00:32:52,180
that's something you want to be looking

00:32:48,460 --> 00:32:55,480
for another one is how flexible their

00:32:52,180 --> 00:32:58,450
infrastructure is if you can't run the

00:32:55,480 --> 00:33:00,790
test you want to run or you're like

00:32:58,450 --> 00:33:02,470
somehow sacrificing the types of tests

00:33:00,790 --> 00:33:03,970
you're running just so you can shoehorn

00:33:02,470 --> 00:33:07,120
it into their testing infrastructure

00:33:03,970 --> 00:33:09,130
that's not very good because you end up

00:33:07,120 --> 00:33:13,530
either testing things that are not real

00:33:09,130 --> 00:33:15,580
tests and/or you forego a lot of the

00:33:13,530 --> 00:33:18,430
flexibility that you could get if you're

00:33:15,580 --> 00:33:21,180
running the tests yourself somehow and

00:33:18,430 --> 00:33:23,920
if they don't have the features you need

00:33:21,180 --> 00:33:25,690
do they respond to feature requests and

00:33:23,920 --> 00:33:27,130
bug requests is there even a mechanism

00:33:25,690 --> 00:33:30,010
for talking to them at all

00:33:27,130 --> 00:33:31,720
to say you know I want to do this type

00:33:30,010 --> 00:33:33,160
of testing but you only support that and

00:33:31,720 --> 00:33:35,500
as an open source project are you guys

00:33:33,160 --> 00:33:39,760
gonna listen to me or are you focused on

00:33:35,500 --> 00:33:42,310
your paying customers something that

00:33:39,760 --> 00:33:44,350
maybe be less worrisome for an open

00:33:42,310 --> 00:33:46,810
source project but also asking how

00:33:44,350 --> 00:33:48,880
they're using their data your data

00:33:46,810 --> 00:33:50,290
really so an open source project you're

00:33:48,880 --> 00:33:53,830
probably putting all the logs out there

00:33:50,290 --> 00:33:55,510
for developers to review but there have

00:33:53,830 --> 00:33:57,220
been instances of companies taking log

00:33:55,510 --> 00:34:00,850
files and taking open source project

00:33:57,220 --> 00:34:01,810
data and using that in I mean it's sort

00:34:00,850 --> 00:34:03,730
of the case that you know if you're not

00:34:01,810 --> 00:34:05,170
paying you are the product so they're

00:34:03,730 --> 00:34:06,280
taking the product of all your jobs and

00:34:05,170 --> 00:34:08,200
aggregating it in a certain way

00:34:06,280 --> 00:34:11,080
and you have to make sure that you are

00:34:08,200 --> 00:34:13,090
not running afoul of laws that are now

00:34:11,080 --> 00:34:17,050
put in place about data that is being

00:34:13,090 --> 00:34:18,850
generated based on your developers but

00:34:17,050 --> 00:34:21,220
also the vendor is not running any

00:34:18,850 --> 00:34:23,350
running into any process anything that's

00:34:21,220 --> 00:34:25,030
gonna be causing problems again less

00:34:23,350 --> 00:34:26,500
less of a problem in open source because

00:34:25,030 --> 00:34:27,790
you probably made this all public anyway

00:34:26,500 --> 00:34:29,500
but something to consider

00:34:27,790 --> 00:34:31,149
like what are you doing with all those

00:34:29,500 --> 00:34:35,470
log files that I upload with to you

00:34:31,149 --> 00:34:37,270
every day and again like the initial

00:34:35,470 --> 00:34:39,610
costs may be zero or they may be really

00:34:37,270 --> 00:34:43,060
low but do you have a plan in place for

00:34:39,610 --> 00:34:44,860
when they are no longer zero like you

00:34:43,060 --> 00:34:47,200
had to put a credit card in on online to

00:34:44,860 --> 00:34:49,090
like run your tests and now someone

00:34:47,200 --> 00:34:50,320
drives by and spans your project a ton

00:34:49,090 --> 00:34:51,570
and now suddenly you have a thousand

00:34:50,320 --> 00:34:53,190
dollar bill because some

00:34:51,570 --> 00:34:54,900
one is running tests automatically in

00:34:53,190 --> 00:34:58,740
your infrastructure do you have a plan

00:34:54,900 --> 00:35:01,140
to deal with that so or you know if your

00:34:58,740 --> 00:35:02,790
project became really popular and you

00:35:01,140 --> 00:35:04,350
are still just a single maintainer who's

00:35:02,790 --> 00:35:06,750
like ah this was just a thing I do on

00:35:04,350 --> 00:35:08,250
weekends and suddenly lots of people are

00:35:06,750 --> 00:35:10,050
committing to it it's a great problem to

00:35:08,250 --> 00:35:14,040
have but suddenly your CI system may not

00:35:10,050 --> 00:35:19,170
be able to keep up so of course I love

00:35:14,040 --> 00:35:22,170
open source and I'd rather see projects

00:35:19,170 --> 00:35:23,220
go the open-source route and so you get

00:35:22,170 --> 00:35:25,170
all the stuff that comes with having

00:35:23,220 --> 00:35:27,920
open source so like all the bad things

00:35:25,170 --> 00:35:30,300
about using the proprietary software

00:35:27,920 --> 00:35:32,970
using open source software it gives you

00:35:30,300 --> 00:35:34,950
like full control over everything if you

00:35:32,970 --> 00:35:37,440
want to run multi node testing you can

00:35:34,950 --> 00:35:39,360
if you want to test on 17 different

00:35:37,440 --> 00:35:41,100
versions of Python you can do that

00:35:39,360 --> 00:35:42,930
because you don't have to be beholden to

00:35:41,100 --> 00:35:46,950
what this the CI system is gonna be

00:35:42,930 --> 00:35:50,310
offering you and one of the things that

00:35:46,950 --> 00:35:52,290
I think is is often ignored as like an

00:35:50,310 --> 00:35:55,170
Operations person looking into software

00:35:52,290 --> 00:35:57,180
engineering is that some people say they

00:35:55,170 --> 00:35:59,040
don't have a time or interest but there

00:35:57,180 --> 00:36:01,590
are so many jobs and it's continuous

00:35:59,040 --> 00:36:04,980
integration right now like like way a

00:36:01,590 --> 00:36:06,570
lot so building up your expertise in the

00:36:04,980 --> 00:36:08,070
field of software testing and continuous

00:36:06,570 --> 00:36:09,750
integration can be a huge boon to your

00:36:08,070 --> 00:36:11,100
career whether you're a developer or

00:36:09,750 --> 00:36:15,630
someone working in systems

00:36:11,100 --> 00:36:18,660
administration and so what I what I

00:36:15,630 --> 00:36:21,030
suggest - open source projects who are

00:36:18,660 --> 00:36:22,770
looking to go down this route is the

00:36:21,030 --> 00:36:24,900
first thing they do maybe they don't

00:36:22,770 --> 00:36:27,030
want to do the work themselves they're

00:36:24,900 --> 00:36:28,440
saying I'm software developer I have no

00:36:27,030 --> 00:36:30,600
interest in running this whole testing

00:36:28,440 --> 00:36:32,700
infrastructure thing so you should reach

00:36:30,600 --> 00:36:34,230
out to your community and see if there

00:36:32,700 --> 00:36:35,010
are any systems administrators in their

00:36:34,230 --> 00:36:37,050
community who can help

00:36:35,010 --> 00:36:38,970
who here is a sysadmin in an open-source

00:36:37,050 --> 00:36:40,500
community who could help or be

00:36:38,970 --> 00:36:42,840
interested in helping who has the

00:36:40,500 --> 00:36:45,090
expertise to like help yeah there are

00:36:42,840 --> 00:36:47,280
some people out there that's really how

00:36:45,090 --> 00:36:48,960
I engage with open-source like I'm a

00:36:47,280 --> 00:36:50,250
systems person I run servers for a bunch

00:36:48,960 --> 00:36:52,230
of open-source projects I'm involved

00:36:50,250 --> 00:36:54,570
with and they are so happy to have me

00:36:52,230 --> 00:36:55,680
because I'm helping them out and I feel

00:36:54,570 --> 00:36:59,790
good because I can give something back

00:36:55,680 --> 00:37:00,840
to an open source project so being

00:36:59,790 --> 00:37:02,130
present in those projects and then

00:37:00,840 --> 00:37:04,640
reaching out to your community to ask if

00:37:02,130 --> 00:37:06,440
anyone can help

00:37:04,640 --> 00:37:08,450
and then whether you're a software

00:37:06,440 --> 00:37:10,369
maintainer or a systems person familiar

00:37:08,450 --> 00:37:12,290
self familiarize yourself with the

00:37:10,369 --> 00:37:13,849
ecosystem that's out there both of our

00:37:12,290 --> 00:37:16,400
praia Terry tools and the open-source

00:37:13,849 --> 00:37:18,020
tools depending on your project one

00:37:16,400 --> 00:37:20,569
testing infrastructure may work much

00:37:18,020 --> 00:37:24,050
better for you if you're just gonna do

00:37:20,569 --> 00:37:26,839
sort of unit testing on your code very

00:37:24,050 --> 00:37:28,760
simple things you may want a very simple

00:37:26,839 --> 00:37:30,829
CI system if you're working on something

00:37:28,760 --> 00:37:32,990
that's a bigger infrastructure project

00:37:30,829 --> 00:37:36,530
you may need more advanced tests and you

00:37:32,990 --> 00:37:37,700
may need a lot more flexibility there's

00:37:36,530 --> 00:37:39,530
also a couple initiatives out there

00:37:37,700 --> 00:37:41,960
right now so there's open source and

00:37:39,530 --> 00:37:44,750
free org which is a website that I host

00:37:41,960 --> 00:37:46,339
and the source codes all on git lab but

00:37:44,750 --> 00:37:49,490
it's where open source projects can come

00:37:46,339 --> 00:37:52,099
and add their infrastructure to our list

00:37:49,490 --> 00:37:55,490
of open infrastructure projects so we

00:37:52,099 --> 00:37:57,260
have projects from course OpenStack and

00:37:55,490 --> 00:37:59,809
the Apache Software Foundation Mozilla

00:37:57,260 --> 00:38:01,579
and other organizations in there who run

00:37:59,809 --> 00:38:03,770
open infrastructures at least in some

00:38:01,579 --> 00:38:04,730
way and this is not necessarily CI

00:38:03,770 --> 00:38:06,890
cd-based

00:38:04,730 --> 00:38:07,849
this could just be they open sourced all

00:38:06,890 --> 00:38:09,589
their puppet configs

00:38:07,849 --> 00:38:11,839
and you can go to their website or their

00:38:09,589 --> 00:38:13,250
wiki and see them and so you can see

00:38:11,839 --> 00:38:15,230
what other open-source projects are

00:38:13,250 --> 00:38:17,869
doing with their open-source tooling

00:38:15,230 --> 00:38:20,540
because they've made them public there's

00:38:17,869 --> 00:38:22,400
also the initiative called open CI IO

00:38:20,540 --> 00:38:25,369
and that's the one I referenced earlier

00:38:22,400 --> 00:38:27,380
we're open daylight and OpenStack and

00:38:25,369 --> 00:38:30,020
several other of these large mostly

00:38:27,380 --> 00:38:31,880
networking related projects are actually

00:38:30,020 --> 00:38:34,040
starting to test their changes against

00:38:31,880 --> 00:38:36,250
each other's projects they have a

00:38:34,040 --> 00:38:39,559
mailing list they do monthly meetings

00:38:36,250 --> 00:38:43,579
we've done a few get togethers in person

00:38:39,559 --> 00:38:45,740
we did one was at the OpenStack summit

00:38:43,579 --> 00:38:47,960
in Vancouver a few months ago where we

00:38:45,740 --> 00:38:49,910
had a whole talk now it's whole two days

00:38:47,960 --> 00:38:51,920
or so where we all got together and

00:38:49,910 --> 00:38:53,390
talked about integrating continuous

00:38:51,920 --> 00:38:55,490
integration and things across

00:38:53,390 --> 00:38:56,690
open-source projects but that's a great

00:38:55,490 --> 00:38:58,670
resource to see what other people are

00:38:56,690 --> 00:39:01,190
doing in this space especially big

00:38:58,670 --> 00:39:05,809
projects who like have employees and are

00:39:01,190 --> 00:39:08,030
being really serious about it if you're

00:39:05,809 --> 00:39:10,880
worried about money there are free

00:39:08,030 --> 00:39:12,470
resources out there so first is that you

00:39:10,880 --> 00:39:15,440
can approach the cloud providers a lot

00:39:12,470 --> 00:39:16,760
of them have trial accounts a lot of

00:39:15,440 --> 00:39:19,099
them also will give

00:39:16,760 --> 00:39:20,930
certain allocations to nonprofits and

00:39:19,099 --> 00:39:23,240
things so one of the things that I've

00:39:20,930 --> 00:39:26,060
seen open-source projects do is Bill

00:39:23,240 --> 00:39:28,609
affiliate themselves with an open with

00:39:26,060 --> 00:39:31,220
with a non-profit in an official

00:39:28,609 --> 00:39:32,930
capacity so the software is now in that

00:39:31,220 --> 00:39:35,320
in that nonprofit and this could be a

00:39:32,930 --> 00:39:39,290
nonprofit that's in their industry or

00:39:35,320 --> 00:39:42,440
some sort of it could be even a you know

00:39:39,290 --> 00:39:44,180
501 C 6 professional organization that

00:39:42,440 --> 00:39:46,330
has an umbrella for software projects

00:39:44,180 --> 00:39:51,140
and then you could like sort of sneak in

00:39:46,330 --> 00:39:52,520
into their their resources but like

00:39:51,140 --> 00:39:54,440
partnering with with people who do have

00:39:52,520 --> 00:39:58,010
the resources is something that a lot of

00:39:54,440 --> 00:39:59,330
projects can do but on the free level

00:39:58,010 --> 00:40:04,490
like there's there's a lot you can do

00:39:59,330 --> 00:40:06,440
already so that is kind of where I come

00:40:04,490 --> 00:40:08,780
to conclusion here so welcome to the

00:40:06,440 --> 00:40:11,320
software revolution of testing and I

00:40:08,780 --> 00:40:19,150
hope you all can be part of it

00:40:11,320 --> 00:40:19,150
[Applause]

00:40:20,480 --> 00:40:28,980
so we have time for questions I will be

00:40:26,820 --> 00:40:31,800
the mic runner who would like to ask a

00:40:28,980 --> 00:40:39,060
question raise your hand please wait for

00:40:31,800 --> 00:40:40,560
the mic since you've been doing like

00:40:39,060 --> 00:40:43,050
open source development for a while now

00:40:40,560 --> 00:40:48,420
I was curious on your thoughts over how

00:40:43,050 --> 00:40:50,790
to start a project with the idea of

00:40:48,420 --> 00:40:52,770
using continuous integration continuous

00:40:50,790 --> 00:40:55,830
development in mind so for instance

00:40:52,770 --> 00:40:58,830
would you commit the test to the

00:40:55,830 --> 00:41:02,670
repository first or only commit code

00:40:58,830 --> 00:41:05,280
once you have a working test and if and

00:41:02,670 --> 00:41:06,540
also like what would your initial

00:41:05,280 --> 00:41:08,700
configuration should be to make

00:41:06,540 --> 00:41:10,530
everything easier to automate further

00:41:08,700 --> 00:41:12,990
down the line yeah that's a really good

00:41:10,530 --> 00:41:14,700
question so one of the things that I've

00:41:12,990 --> 00:41:16,860
seen some software projects do and this

00:41:14,700 --> 00:41:18,900
is this is both in open source and in

00:41:16,860 --> 00:41:20,610
proprietary software is that part of the

00:41:18,900 --> 00:41:24,000
review process and part of writing code

00:41:20,610 --> 00:41:26,520
is writing tests so when your code is

00:41:24,000 --> 00:41:27,960
reviewed by your fellow developers one

00:41:26,520 --> 00:41:30,450
of the questions on their list should be

00:41:27,960 --> 00:41:32,160
did you write tests for this and if they

00:41:30,450 --> 00:41:33,720
don't write tests then you have to go

00:41:32,160 --> 00:41:36,510
back and you know rewrite your you know

00:41:33,720 --> 00:41:39,060
write the tests and I'm a very strong

00:41:36,510 --> 00:41:40,410
believer in that because it never works

00:41:39,060 --> 00:41:41,970
when you write tests later cuz you're

00:41:40,410 --> 00:41:46,560
like I'll do that later and we know how

00:41:41,970 --> 00:41:47,610
that works so integrating that as part

00:41:46,560 --> 00:41:51,150
of your process I think is really

00:41:47,610 --> 00:41:52,410
important and then I you know I if I was

00:41:51,150 --> 00:41:54,630
gonna start an open-source project today

00:41:52,410 --> 00:41:56,130
I would definitely bootstrap like the

00:41:54,630 --> 00:41:58,290
whole testing infrastructure right then

00:41:56,130 --> 00:42:03,180
like I launched the project with the CI

00:41:58,290 --> 00:42:03,930
from like the first commit and just you

00:42:03,180 --> 00:42:05,490
know one of the things that was really

00:42:03,930 --> 00:42:08,190
successful inside of OpenStack is we

00:42:05,490 --> 00:42:10,830
have a very strong community and and

00:42:08,190 --> 00:42:13,290
culture of doing software testing so

00:42:10,830 --> 00:42:14,820
like the whole OpenStack system of

00:42:13,290 --> 00:42:17,220
reviewing is based around a review

00:42:14,820 --> 00:42:19,410
system all the test results come into

00:42:17,220 --> 00:42:21,960
that review system and really like

00:42:19,410 --> 00:42:24,570
there's no one necessarily who's a

00:42:21,960 --> 00:42:25,920
project maintainer the people who have

00:42:24,570 --> 00:42:27,540
influence inside of the OpenStack

00:42:25,920 --> 00:42:30,109
project are people who do a lot of code

00:42:27,540 --> 00:42:32,569
review and then they get the privileges

00:42:30,109 --> 00:42:35,180
to merge the code so turning that and

00:42:32,569 --> 00:42:36,980
sort of sort of this like thing that you

00:42:35,180 --> 00:42:39,289
can work up to and the way you work up

00:42:36,980 --> 00:42:40,489
to it is by reviewing code and being a

00:42:39,289 --> 00:42:42,289
good reviewer who's trust in the

00:42:40,489 --> 00:42:43,940
community and part of that is by making

00:42:42,289 --> 00:42:45,380
sure that commits have software testing

00:42:43,940 --> 00:42:48,410
and that you have good code coverage

00:42:45,380 --> 00:42:59,329
testing wise hopefully answers a

00:42:48,410 --> 00:43:02,059
question don't be shy on the continuous

00:42:59,329 --> 00:43:04,460
proving on the software testing do you

00:43:02,059 --> 00:43:08,329
do you find that there is a speed

00:43:04,460 --> 00:43:11,680
reduction from you know you know doing

00:43:08,329 --> 00:43:16,640
individual private versus open source

00:43:11,680 --> 00:43:17,869
maybe clarify that a little for example

00:43:16,640 --> 00:43:21,529
let's say you were gonna piece of

00:43:17,869 --> 00:43:24,200
software and the full time from the

00:43:21,529 --> 00:43:26,450
actual coding to development as 12 or 12

00:43:24,200 --> 00:43:28,279
months if you did it in a private

00:43:26,450 --> 00:43:30,499
setting versus open source where you do

00:43:28,279 --> 00:43:33,380
Koen development would be maybe six

00:43:30,499 --> 00:43:35,269
months yeah so I don't have like actual

00:43:33,380 --> 00:43:37,099
statistics on this but the place to look

00:43:35,269 --> 00:43:39,220
for that is like the devops world

00:43:37,099 --> 00:43:41,630
because in devops

00:43:39,220 --> 00:43:43,400
continuous integration and like see ICD

00:43:41,630 --> 00:43:45,259
is like one of their main tenants like

00:43:43,400 --> 00:43:46,460
that is a huge part of what you'll see

00:43:45,259 --> 00:43:49,009
in like open source events so I think

00:43:46,460 --> 00:43:50,900
some of the reports that have come out

00:43:49,009 --> 00:43:52,970
of like the devops world will include

00:43:50,900 --> 00:43:54,769
statistics about how much faster teams

00:43:52,970 --> 00:43:59,599
can can deliver on products when they're

00:43:54,769 --> 00:44:02,150
doing things like doing small commits

00:43:59,599 --> 00:44:04,009
and making small goals and then like

00:44:02,150 --> 00:44:07,400
releasing continuously and doing testing

00:44:04,009 --> 00:44:09,859
along the way but I know there are

00:44:07,400 --> 00:44:18,650
graphs and things and that data that

00:44:09,859 --> 00:44:26,539
show that it is better everyone just

00:44:18,650 --> 00:44:31,329
wants cupcakes all right I'll be around

00:44:26,539 --> 00:44:31,329

YouTube URL: https://www.youtube.com/watch?v=g0mUpd_pLaE


