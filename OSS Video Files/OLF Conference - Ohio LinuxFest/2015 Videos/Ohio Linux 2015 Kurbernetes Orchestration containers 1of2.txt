Title: Ohio Linux 2015 Kurbernetes Orchestration containers 1of2
Publication date: 2015-10-13
Playlist: 2015 Videos
Description: 
	Ohio Linux 2015 Kurbernetes Orchestration containers 1of2
Captions: 
	00:00:00,140 --> 00:00:18,869
cool like you're my own personal Ohio

00:00:03,990 --> 00:00:20,550
Linux okay cool alright so we're running

00:00:18,869 --> 00:00:22,650
up so we're running a minute late go

00:00:20,550 --> 00:00:24,930
ahead you started my name is Kelsey so

00:00:22,650 --> 00:00:27,920
I'm here to talk to you about the thing

00:00:24,930 --> 00:00:30,689
that I've dedicated probably the last

00:00:27,920 --> 00:00:33,360
year or so in my life to figuring out

00:00:30,689 --> 00:00:37,260
and it's how to do containers properly

00:00:33,360 --> 00:00:40,710
and I mean a quite a few containers so a

00:00:37,260 --> 00:00:42,540
little bit about my background I work in

00:00:40,710 --> 00:00:49,140
the morgantown west virginia office of

00:00:42,540 --> 00:00:54,510
realtor.com that's a thing Morgantown

00:00:49,140 --> 00:00:56,489
West Virginia sorry ok so one of the

00:00:54,510 --> 00:00:57,899
things that one of the things on one of

00:00:56,489 --> 00:01:01,410
the challenges that right into another

00:00:57,899 --> 00:01:04,229
com or particularly by we is that we

00:01:01,410 --> 00:01:07,140
syndicate data from a lot of places a

00:01:04,229 --> 00:01:09,600
lot of places from regional mls systems

00:01:07,140 --> 00:01:11,520
all around the country we have a lot of

00:01:09,600 --> 00:01:13,680
processes need to run and we need to go

00:01:11,520 --> 00:01:16,200
to feed a good way to organize them we

00:01:13,680 --> 00:01:18,540
came to dr. containers and docker

00:01:16,200 --> 00:01:20,909
containers are really handy until you

00:01:18,540 --> 00:01:23,009
had a bunch of them and you had them

00:01:20,909 --> 00:01:28,140
across multiple boxes and the things got

00:01:23,009 --> 00:01:30,450
a little bit at times so we started down

00:01:28,140 --> 00:01:33,479
this path that we need a way to do this

00:01:30,450 --> 00:01:35,970
well and we try some things they didn't

00:01:33,479 --> 00:01:38,009
work out and then I loved one day I saw

00:01:35,970 --> 00:01:41,189
impromptu pernetti's they changed my

00:01:38,009 --> 00:01:42,840
life I don't say that lightly the guys

00:01:41,189 --> 00:01:44,820
at work call me Calvin Eddie's it's

00:01:42,840 --> 00:01:48,120
really weird

00:01:44,820 --> 00:01:49,680
I got retweeted by their Twitter one day

00:01:48,120 --> 00:01:54,320
and it was amazing best day of my life

00:01:49,680 --> 00:01:54,320
I'm kidding i got married that's on tape

00:01:54,410 --> 00:01:59,760
alright so let's move on so what exactly

00:01:58,110 --> 00:02:01,229
is this thing I'm up you're talking

00:01:59,760 --> 00:02:03,450
about stumbling around like you do

00:02:01,229 --> 00:02:05,880
goober well cure pernetti's is a

00:02:03,450 --> 00:02:09,060
container orchestration toolkit that was

00:02:05,880 --> 00:02:12,990
originated at Google now Google created

00:02:09,060 --> 00:02:15,480
this as the lessons learned that came

00:02:12,990 --> 00:02:18,090
from google Borg and that's their that

00:02:15,480 --> 00:02:19,470
is their internal container system that

00:02:18,090 --> 00:02:22,440
they had developed over the course of a

00:02:19,470 --> 00:02:24,690
decade or so bored had a lot of really

00:02:22,440 --> 00:02:26,420
great things in it but there were a lot

00:02:24,690 --> 00:02:28,680
of things that didn't work out so well

00:02:26,420 --> 00:02:30,780
Cooper Nettie's was that thing that they

00:02:28,680 --> 00:02:33,930
created to try to get that information

00:02:30,780 --> 00:02:35,430
out into the world whenever Cooper

00:02:33,930 --> 00:02:37,860
Davies became stable earlier this year

00:02:35,430 --> 00:02:39,989
Google graciously donated thank you

00:02:37,860 --> 00:02:42,000
google to the cloud native computing

00:02:39,989 --> 00:02:46,019
foundation which is a linux foundation

00:02:42,000 --> 00:02:48,030
collaborative project this donation puts

00:02:46,019 --> 00:02:50,989
cooper Nettie's out into the world for

00:02:48,030 --> 00:02:54,510
us to use and us take advantage of and

00:02:50,989 --> 00:02:56,519
as an example of that tons of commercial

00:02:54,510 --> 00:02:58,620
no but source projects are being built

00:02:56,519 --> 00:03:00,870
on top of the cupboard headings number

00:02:58,620 --> 00:03:03,450
one if you know core OS they're

00:03:00,870 --> 00:03:06,239
introducing a container a container

00:03:03,450 --> 00:03:08,880
service that's based on AWS and uses

00:03:06,239 --> 00:03:11,130
cooper daddy's in the background in fact

00:03:08,880 --> 00:03:14,610
the other day if there are any aid of us

00:03:11,130 --> 00:03:16,560
engineers in here yeah yeah all right my

00:03:14,610 --> 00:03:20,579
people oh I work with you I know you

00:03:16,560 --> 00:03:22,110
know it so they introduced a script to

00:03:20,579 --> 00:03:25,200
get you up and running Cooper Nettie's

00:03:22,110 --> 00:03:27,390
very easily called cube AWS I'll put

00:03:25,200 --> 00:03:29,820
this later so if you want to follow me

00:03:27,390 --> 00:03:32,010
at the end I'll tweet it out another

00:03:29,820 --> 00:03:34,829
project is meteor galaxy which is the

00:03:32,010 --> 00:03:37,290
backend for the meter j/s library so hos

00:03:34,829 --> 00:03:38,670
it to pay a hosted service the other

00:03:37,290 --> 00:03:40,980
interesting thing that I think is

00:03:38,670 --> 00:03:43,500
amazing about given at ease is it goober

00:03:40,980 --> 00:03:46,739
Nettie's is being built at the bottom as

00:03:43,500 --> 00:03:49,470
a foundation layer into some other open

00:03:46,739 --> 00:03:51,220
source projects for example openshift

00:03:49,470 --> 00:03:53,620
three from red hat is

00:03:51,220 --> 00:03:55,750
is uses kuber Nettie's at the bottom

00:03:53,620 --> 00:03:57,730
layer for scheduling and day is from

00:03:55,750 --> 00:04:02,440
engine yard which intends to be a 12

00:03:57,730 --> 00:04:04,300
factor app abstraction we'll call it has

00:04:02,440 --> 00:04:06,250
a technical preview of a coup brunetti

00:04:04,300 --> 00:04:08,410
scheduler to replace the default fleeman

00:04:06,250 --> 00:04:10,660
scheduler which makes the scheduling

00:04:08,410 --> 00:04:13,630
more intelligent throughout multiple

00:04:10,660 --> 00:04:16,180
multiple servers cooper Nettie's is

00:04:13,630 --> 00:04:19,030
taking the world by wildfire and we

00:04:16,180 --> 00:04:23,160
often get part of it so why exactly

00:04:19,030 --> 00:04:26,110
Cooper Nettie's well as i said before

00:04:23,160 --> 00:04:30,460
deploying one single container out is

00:04:26,110 --> 00:04:33,130
really easy dr. Poole padamu run that's

00:04:30,460 --> 00:04:35,140
pretty straightforward but then we get

00:04:33,130 --> 00:04:37,540
into a situation where we have more

00:04:35,140 --> 00:04:40,990
complex applications than that for

00:04:37,540 --> 00:04:43,210
example doctor and doctor you can um you

00:04:40,990 --> 00:04:45,550
can link containers what happens when

00:04:43,210 --> 00:04:47,770
you have multiple containers on a box

00:04:45,550 --> 00:04:50,169
and you have to keep updated that you

00:04:47,770 --> 00:04:51,910
want to keep updated what happens is

00:04:50,169 --> 00:04:54,270
when you want high availability and you

00:04:51,910 --> 00:04:56,860
want replicas of controllers and then

00:04:54,270 --> 00:04:58,960
docker for Chris what do you do for dr.

00:04:56,860 --> 00:05:01,030
persistent storage we need some kind of

00:04:58,960 --> 00:05:03,040
data volume support and being able to

00:05:01,030 --> 00:05:04,990
track that across multiple boxes that

00:05:03,040 --> 00:05:08,860
you may deploy to that gets difficult

00:05:04,990 --> 00:05:11,710
and that's a single app we have a lot of

00:05:08,860 --> 00:05:13,150
apps how many people are deploying more

00:05:11,710 --> 00:05:15,190
than one application whether it's

00:05:13,150 --> 00:05:18,340
interpret internal use or anything else

00:05:15,190 --> 00:05:20,229
there's quite a few hands going up that

00:05:18,340 --> 00:05:25,090
can be difficult to pernetti's is going

00:05:20,229 --> 00:05:27,250
to help so among the features of cooper

00:05:25,090 --> 00:05:29,650
Nettie's that it totes its container

00:05:27,250 --> 00:05:32,880
spec agnostic you can use docker you can

00:05:29,650 --> 00:05:35,110
use rocket and you can do it right now

00:05:32,880 --> 00:05:36,700
that's a that's a goal of the project

00:05:35,110 --> 00:05:39,490
and that's going to be a thing for

00:05:36,700 --> 00:05:41,919
long-term resource based scheduling

00:05:39,490 --> 00:05:43,960
turbonetics is smart enough to go out

00:05:41,919 --> 00:05:45,820
look at the look at the servers that is

00:05:43,960 --> 00:05:49,120
watching over and it can look at this

00:05:45,820 --> 00:05:50,720
cpu it can look at memory usage and it

00:05:49,120 --> 00:05:52,370
can look at the number of things that

00:05:50,720 --> 00:05:54,200
schedule to that box to begin with to

00:05:52,370 --> 00:05:57,350
make sure that it's not over burning

00:05:54,200 --> 00:05:59,930
your boxes this scheduler is getting

00:05:57,350 --> 00:06:02,000
smarter all the time where it was a year

00:05:59,930 --> 00:06:05,480
ago and where it is now are not date

00:06:02,000 --> 00:06:07,790
different amazing services for load

00:06:05,480 --> 00:06:10,100
balancing because once you get your

00:06:07,790 --> 00:06:11,600
containers inside of a cluster if you

00:06:10,100 --> 00:06:15,530
have two containers that are somewhere

00:06:11,600 --> 00:06:17,240
in a cluster of 14 or so boxes where

00:06:15,530 --> 00:06:19,010
those containers at Cooper Nettie's

00:06:17,240 --> 00:06:20,990
gives you an abstraction to help you get

00:06:19,010 --> 00:06:23,380
your traffic where it needs to go and

00:06:20,990 --> 00:06:26,660
i'll do a demonstration will see that a

00:06:23,380 --> 00:06:28,340
robust api is also important to this

00:06:26,660 --> 00:06:31,460
because we want to be able to deploy our

00:06:28,340 --> 00:06:34,070
apps with minimal headache this guy is

00:06:31,460 --> 00:06:36,260
so robust that several components of

00:06:34,070 --> 00:06:39,260
super Nettie's actually operates

00:06:36,260 --> 00:06:41,150
entirely through the API so the same API

00:06:39,260 --> 00:06:44,000
that the scheduler works through you

00:06:41,150 --> 00:06:48,169
work for it that's pretty awesome in my

00:06:44,000 --> 00:06:51,860
opinion and grace CLI tooling by a

00:06:48,169 --> 00:06:53,780
fantastic tool called cube CTL and we'll

00:06:51,860 --> 00:06:55,400
see during the demonstration the cool

00:06:53,780 --> 00:06:57,470
things that you can do with cube CT

00:06:55,400 --> 00:06:59,650
Alfred pulling from the plane containers

00:06:57,470 --> 00:07:02,330
or doing something bugging stuff

00:06:59,650 --> 00:07:06,590
services all that jazz it's gonna be

00:07:02,330 --> 00:07:07,940
great watch for it so what is it so what

00:07:06,590 --> 00:07:11,990
is a simple Cooper Nettie's clustered

00:07:07,940 --> 00:07:14,030
look like well we have a master exam

00:07:11,990 --> 00:07:15,530
some of the verb nodes the master is

00:07:14,030 --> 00:07:17,960
typically where your administration is

00:07:15,530 --> 00:07:20,500
going to go your API servers live going

00:07:17,960 --> 00:07:22,669
to live there if you have a docker catch

00:07:20,500 --> 00:07:24,140
dr. image cache or something to that

00:07:22,669 --> 00:07:26,800
effect it will usually live on the

00:07:24,140 --> 00:07:29,750
master and then you have the nose and

00:07:26,800 --> 00:07:32,300
then Cooper Nettie's definition of the

00:07:29,750 --> 00:07:35,260
node is a physical or virtual machine

00:07:32,300 --> 00:07:37,430
how much containers can be scheduled

00:07:35,260 --> 00:07:42,560
there's nothing else to it it doesn't

00:07:37,430 --> 00:07:44,150
work so then the question is in Coober

00:07:42,560 --> 00:07:46,040
Nettie's in the cupboard Amy's land we

00:07:44,150 --> 00:07:49,280
want to get the things that we want to

00:07:46,040 --> 00:07:52,100
run to our node what do we call the unit

00:07:49,280 --> 00:07:54,110
that we do that we deploy if you say the

00:07:52,100 --> 00:07:55,040
container you're close but keep in mind

00:07:54,110 --> 00:07:57,080
we may have

00:07:55,040 --> 00:07:58,700
multiple containers or we may have data

00:07:57,080 --> 00:08:00,830
volumes that we want to go across that

00:07:58,700 --> 00:08:04,070
we want to go with it when we deploy it

00:08:00,830 --> 00:08:06,740
so that we needed unit to describe to

00:08:04,070 --> 00:08:09,140
describe what that is impunity

00:08:06,740 --> 00:08:12,430
techniques ago that's called a pod and

00:08:09,140 --> 00:08:14,600
they define a pod as a co-located set of

00:08:12,430 --> 00:08:17,210
application containers and shared data

00:08:14,600 --> 00:08:18,800
volumes this is the smallest unit that

00:08:17,210 --> 00:08:22,700
can be scheduled inside of the Cooper

00:08:18,800 --> 00:08:24,350
90s let's take a look at the so let's

00:08:22,700 --> 00:08:27,320
take a little bit closer look at what we

00:08:24,350 --> 00:08:30,530
can do figure our pods for one thing I

00:08:27,320 --> 00:08:32,419
said that containers that pods can have

00:08:30,530 --> 00:08:34,400
more than one container so if you're

00:08:32,419 --> 00:08:36,500
linking containers this is how you're

00:08:34,400 --> 00:08:38,180
going to do it your heads land but I

00:08:36,500 --> 00:08:40,640
also mentioned that it can do data

00:08:38,180 --> 00:08:44,840
volumes and the data volume support is

00:08:40,640 --> 00:08:46,940
awesome no question among the data

00:08:44,840 --> 00:08:48,890
volumes Cooper data supports it can do

00:08:46,940 --> 00:08:51,460
amazon web services elastic block

00:08:48,890 --> 00:08:54,560
storage volumes google cloud engine

00:08:51,460 --> 00:08:56,150
persistent disk volumes in FS shares and

00:08:54,560 --> 00:08:58,100
i'm not even making this up you can

00:08:56,150 --> 00:09:00,350
point it to a git repository and check

00:08:58,100 --> 00:09:03,110
out a particular check out to stick

00:09:00,350 --> 00:09:04,640
inside for a container that sounds

00:09:03,110 --> 00:09:06,590
completely crazy but if you're storing

00:09:04,640 --> 00:09:08,450
configuration and study it and you want

00:09:06,590 --> 00:09:11,570
to pull that inside of your container

00:09:08,450 --> 00:09:14,450
that's handy and I'm not even and I'm

00:09:11,570 --> 00:09:16,040
not even touching this like I'm not

00:09:14,450 --> 00:09:18,500
barely scratching the surface of what it

00:09:16,040 --> 00:09:21,230
has there's more there's bluster FS

00:09:18,500 --> 00:09:22,910
there's a secret API the KU brunetti is

00:09:21,230 --> 00:09:24,440
introduced and if you guys are like us

00:09:22,910 --> 00:09:26,810
that's one thing that we've been talking

00:09:24,440 --> 00:09:29,330
a lot about how do we share secrets with

00:09:26,810 --> 00:09:34,340
our containers when they're out of

00:09:29,330 --> 00:09:36,860
production I beg you go look at the data

00:09:34,340 --> 00:09:38,740
volumes in the communities documentation

00:09:36,860 --> 00:09:41,320
there's tons of

00:09:38,740 --> 00:09:44,950
prams and if not tell me about it on

00:09:41,320 --> 00:09:46,779
Twitter so how can we organize pods if

00:09:44,950 --> 00:09:49,810
we have a lot of if we have a lot of

00:09:46,779 --> 00:09:51,910
pods and for example in my cluster that

00:09:49,810 --> 00:09:56,170
I personally maintain I formateur pods

00:09:51,910 --> 00:09:57,490
as a walk how do I organize those pods

00:09:56,170 --> 00:10:00,459
or for that matter any other Cooper

00:09:57,490 --> 00:10:02,200
Nettie's resource and the resources

00:10:00,459 --> 00:10:06,310
Internet as we've seen so far our pods

00:10:02,200 --> 00:10:09,010
and notes so happy we're eon sees well

00:10:06,310 --> 00:10:11,290
in goober Teddy's we call that a label

00:10:09,010 --> 00:10:14,800
and they define the label is a key pair

00:10:11,290 --> 00:10:18,880
of aviator he valued here you that we

00:10:14,800 --> 00:10:20,200
use the organized resources so the

00:10:18,880 --> 00:10:23,709
second let's look an example of this

00:10:20,200 --> 00:10:25,560
let's say we have a pod and here's the

00:10:23,709 --> 00:10:27,970
reprimand here's a really ugly

00:10:25,560 --> 00:10:31,029
representation of our pot I'm not good

00:10:27,970 --> 00:10:33,130
with graphics we call so we've lovingly

00:10:31,029 --> 00:10:35,290
named bear claw important microservice

00:10:33,130 --> 00:10:37,120
because it's super important here's our

00:10:35,290 --> 00:10:39,190
docker image and you'll notice that I'm

00:10:37,120 --> 00:10:41,380
using the latest doctor I'm using the

00:10:39,190 --> 00:10:45,160
latest docker image this is probably the

00:10:41,380 --> 00:10:47,200
head of my production right I've given

00:10:45,160 --> 00:10:49,899
it to labels one of them one of my

00:10:47,200 --> 00:10:52,209
labels represents the environment that I

00:10:49,899 --> 00:10:54,700
that this pod is operating in and our

00:10:52,209 --> 00:10:56,920
column production this is probably this

00:10:54,700 --> 00:10:59,160
is probably where my production traffic

00:10:56,920 --> 00:11:02,709
is going and it's using server in

00:10:59,160 --> 00:11:06,550
genetics I don't know why I label that I

00:11:02,709 --> 00:11:08,680
did the interesting thing about labels

00:11:06,550 --> 00:11:10,870
is that you can then differentiate

00:11:08,680 --> 00:11:13,540
between pods that are operating in a

00:11:10,870 --> 00:11:16,600
production capacity and a pond that's

00:11:13,540 --> 00:11:18,100
operating in a QA capacity or any other

00:11:16,600 --> 00:11:21,430
kind of testing that you might like to

00:11:18,100 --> 00:11:23,680
do so if you look here I have a second

00:11:21,430 --> 00:11:26,950
pod that I've deployed a feature branch

00:11:23,680 --> 00:11:29,680
to in my feature branch I've said the

00:11:26,950 --> 00:11:32,920
environment to QA so i can very quickly

00:11:29,680 --> 00:11:36,010
filter between these two pods using cube

00:11:32,920 --> 00:11:37,610
CTL i can tell the difference and people

00:11:36,010 --> 00:11:40,100
that want to test something into

00:11:37,610 --> 00:11:43,160
to a environment that's a lot like what

00:11:40,100 --> 00:11:47,060
they're going to get when they when they

00:11:43,160 --> 00:11:48,470
deployed to production the other magic

00:11:47,060 --> 00:11:51,440
too is that if I want to search for

00:11:48,470 --> 00:11:57,529
things that are engine X thank you for

00:11:51,440 --> 00:12:00,079
the following us following I don't know

00:11:57,529 --> 00:12:02,079
why I did that the deal if I want to

00:12:00,079 --> 00:12:05,149
filter out if I want to filter out

00:12:02,079 --> 00:12:06,950
servers I can simply search for server

00:12:05,149 --> 00:12:10,190
engine X and both of those will pop up

00:12:06,950 --> 00:12:11,930
and that's useful in maybe I maybe

00:12:10,190 --> 00:12:14,899
there's a maybe I need to quickly figure

00:12:11,930 --> 00:12:16,310
out what what a docker image is I'm

00:12:14,899 --> 00:12:19,250
going to need to update because oh no

00:12:16,310 --> 00:12:22,310
security thing happened the cool thing

00:12:19,250 --> 00:12:25,910
about this you can do it with nodes to

00:12:22,310 --> 00:12:29,360
so here's an example that I hope please

00:12:25,910 --> 00:12:32,750
to the sensibilities of this room I have

00:12:29,360 --> 00:12:35,360
free nodes in a physical data center

00:12:32,750 --> 00:12:38,269
that i have and i have named and i have

00:12:35,360 --> 00:12:41,480
two of these nodes live on a rack called

00:12:38,269 --> 00:12:43,930
Tatooine II one of these nodes live on a

00:12:41,480 --> 00:12:46,510
rack that I've lovingly called alder and

00:12:43,930 --> 00:12:49,970
let's say that a system administrator

00:12:46,510 --> 00:12:57,709
decides to do the equivalent of a laser

00:12:49,970 --> 00:13:00,019
beam and destroyer a call during yes we

00:12:57,709 --> 00:13:04,010
can very quickly figure out what Cooper

00:13:00,019 --> 00:13:07,250
Nettie's nodes are would be affected by

00:13:04,010 --> 00:13:09,019
autumn and being destroyed in a in

00:13:07,250 --> 00:13:13,699
something that would let the Jedi know

00:13:09,019 --> 00:13:15,470
that something is amiss that's really

00:13:13,699 --> 00:13:19,240
cool and thank you for laughing at that

00:13:15,470 --> 00:13:19,240
I worked hard on that

00:13:19,910 --> 00:13:29,370
okay does everybody is everybody with me

00:13:23,610 --> 00:13:33,180
so far I take silence as okay so now we

00:13:29,370 --> 00:13:36,630
have pods we have labels to represent to

00:13:33,180 --> 00:13:38,730
the lettuce filter down to pause and now

00:13:36,630 --> 00:13:41,790
the question is if we want to have

00:13:38,730 --> 00:13:44,580
replicas for high availability what do

00:13:41,790 --> 00:13:47,040
we what do we want to use as my subtitle

00:13:44,580 --> 00:13:49,470
says there's a humanities resource for

00:13:47,040 --> 00:13:52,190
that we call that a replication

00:13:49,470 --> 00:13:56,280
controller and a replication controller

00:13:52,190 --> 00:13:58,620
and replication controller helps us

00:13:56,280 --> 00:14:02,640
manage the life cycle taught by ensuring

00:13:58,620 --> 00:14:05,340
a desired number of positive here's

00:14:02,640 --> 00:14:06,840
here's an example here we have a

00:14:05,340 --> 00:14:09,300
replication controller that was

00:14:06,840 --> 00:14:12,600
specified and we've said that we want to

00:14:09,300 --> 00:14:16,260
reference now here's the key so here's

00:14:12,600 --> 00:14:20,280
the kicker about how here's the kicker

00:14:16,260 --> 00:14:22,110
about how replication controllers work

00:14:20,280 --> 00:14:24,240
in Coober Nettie's replication

00:14:22,110 --> 00:14:28,080
controllers have something called a

00:14:24,240 --> 00:14:31,620
selector the selector watches labels for

00:14:28,080 --> 00:14:34,470
pods that match that selected so you can

00:14:31,620 --> 00:14:36,780
see here that I have a selector and it's

00:14:34,470 --> 00:14:40,680
a label that's a prequel user service to

00:14:36,780 --> 00:14:43,500
any pot that has a label app equals user

00:14:40,680 --> 00:14:46,680
service is going to be watched over by

00:14:43,500 --> 00:14:48,660
the replication controller now this is

00:14:46,680 --> 00:14:52,050
simplified you're probably going to have

00:14:48,660 --> 00:14:56,670
more labels but it's a simple it's a

00:14:52,050 --> 00:14:58,650
simple so let's say that we have a

00:14:56,670 --> 00:15:01,050
replication controller that desires to

00:14:58,650 --> 00:15:03,270
have two relatives and we have two pods

00:15:01,050 --> 00:15:05,490
that reputation over to awesome because

00:15:03,270 --> 00:15:08,520
our selectors match our labels for our

00:15:05,490 --> 00:15:12,960
pot let's say that my team has a bad day

00:15:08,520 --> 00:15:15,120
I have no idea why but it's dead that

00:15:12,960 --> 00:15:18,870
happens and that's the face we make

00:15:15,120 --> 00:15:23,420
every time it happens T man I have no

00:15:18,870 --> 00:15:23,420
idea why that that's too bad but

00:15:23,540 --> 00:15:27,259
given a tease is ready for that

00:15:25,149 --> 00:15:30,769
specifically the controller managers

00:15:27,259 --> 00:15:33,410
rate for that everybody starts up a new

00:15:30,769 --> 00:15:34,910
pod forest and it watches that pod

00:15:33,410 --> 00:15:37,279
through a help check that it does

00:15:34,910 --> 00:15:39,170
through the doctor demon alternatively

00:15:37,279 --> 00:15:42,920
you can configuration to be health

00:15:39,170 --> 00:15:45,560
checks and that pod has come back to

00:15:42,920 --> 00:15:49,009
life and that replication controller has

00:15:45,560 --> 00:15:59,449
done its job it's happy and then we make

00:15:49,009 --> 00:16:04,880
that face because it's alive okay so now

00:15:59,449 --> 00:16:06,350
we have so now we have so now we've now

00:16:04,880 --> 00:16:08,120
we have a replication controller with

00:16:06,350 --> 00:16:12,110
multiple with multiple replicas that

00:16:08,120 --> 00:16:14,509
we're ready to serve traffic to but we

00:16:12,110 --> 00:16:16,899
may have two containers inside of our

00:16:14,509 --> 00:16:20,269
inside of each 12 node clusters or more

00:16:16,899 --> 00:16:22,759
how do you get traffic how do you get

00:16:20,269 --> 00:16:25,459
traffic to this guy gerber daisies

00:16:22,759 --> 00:16:29,120
provides an abstract provides a thing

00:16:25,459 --> 00:16:31,699
called service to resource by definition

00:16:29,120 --> 00:16:34,940
a service provides a safety single skin

00:16:31,699 --> 00:16:37,370
endpoint for set of pots you can think

00:16:34,940 --> 00:16:39,350
of this I was really aggressive on sat

00:16:37,370 --> 00:16:42,740
you sorry you can think of it like a

00:16:39,350 --> 00:16:44,630
round-robin load balancer here's here's

00:16:42,740 --> 00:16:47,480
an example I'll touch on this a little

00:16:44,630 --> 00:16:50,449
bit but this is a general idea we have a

00:16:47,480 --> 00:16:52,970
client the client hits the client gets

00:16:50,449 --> 00:16:55,790
the service we've named our service user

00:16:52,970 --> 00:16:57,019
microservice and governesses picta and

00:16:55,790 --> 00:16:59,389
cooper Nettie's when we create the

00:16:57,019 --> 00:17:02,810
service will pick a high number port on

00:16:59,389 --> 00:17:05,299
which to surveil on notice we have a

00:17:02,810 --> 00:17:09,709
selector here this selector tells us

00:17:05,299 --> 00:17:11,750
what pause to pull retractor to sew in a

00:17:09,709 --> 00:17:14,390
round-robin fashion that service is

00:17:11,750 --> 00:17:16,819
going to forward that traffic to those

00:17:14,390 --> 00:17:20,720
pods with those matching with those

00:17:16,819 --> 00:17:23,569
matching labels this is fantastically

00:17:20,720 --> 00:17:24,919
this is fantastically handy and I'm

00:17:23,569 --> 00:17:28,510
going to demonstrate that for you live

00:17:24,919 --> 00:17:31,549
here on stage and hope oto melara myself

00:17:28,510 --> 00:17:34,400
ok so we're so a lot of people in here

00:17:31,549 --> 00:17:35,750
are probably system guys one of the

00:17:34,400 --> 00:17:38,210
things that I care a lot about Cuban

00:17:35,750 --> 00:17:40,220
eddie's is that it's complex in that

00:17:38,210 --> 00:17:43,040
there are a lot of things that you have

00:17:40,220 --> 00:17:45,770
to have to get up and running there's a

00:17:43,040 --> 00:17:47,990
lot of part there are a lot of processes

00:17:45,770 --> 00:17:50,630
that have to be running I'm going to

00:17:47,990 --> 00:17:52,460
step through those right now I'm not

00:17:50,630 --> 00:17:54,559
going to show you systemd units or

00:17:52,460 --> 00:17:58,280
anything like that however if you look

00:17:54,559 --> 00:18:01,820
at my slides later I do have a I do have

00:17:58,280 --> 00:18:05,990
a link to a repository that will set up

00:18:01,820 --> 00:18:08,419
a core OS clustered using vagrant on

00:18:05,990 --> 00:18:10,250
your local box which is what i'm going

00:18:08,419 --> 00:18:12,140
to do my demos from so you can play with

00:18:10,250 --> 00:18:14,510
this you can look at their system their

00:18:12,140 --> 00:18:18,500
cloud configs and you can check that out

00:18:14,510 --> 00:18:20,360
yourself so what components make up

00:18:18,500 --> 00:18:23,330
Cooper Nettie's well on the master

00:18:20,360 --> 00:18:28,040
obviously we have the API server the API

00:18:23,330 --> 00:18:30,260
server serves requests we have two other

00:18:28,040 --> 00:18:33,320
processes we have the huge scheduler and

00:18:30,260 --> 00:18:35,690
we have the controller manager on the

00:18:33,320 --> 00:18:38,929
node we have a thing called couplet and

00:18:35,690 --> 00:18:40,070
then we have Q proxy we're going to step

00:18:38,929 --> 00:18:43,100
through each one of those starting at

00:18:40,070 --> 00:18:45,500
the master the queue API server as I

00:18:43,100 --> 00:18:48,020
said services rest operations as I

00:18:45,500 --> 00:18:49,790
mentioned before most things in Coober

00:18:48,020 --> 00:18:52,190
Nattie's operate through the API server

00:18:49,790 --> 00:18:53,780
and it provides that it provides the

00:18:52,190 --> 00:18:56,630
binding it holds that puts everything

00:18:53,780 --> 00:18:58,820
together it also validates and sets data

00:18:56,630 --> 00:19:00,470
for the resources so if you pass it on

00:18:58,820 --> 00:19:03,830
sense the API server is going to be the

00:19:00,470 --> 00:19:06,200
component that tells you know the second

00:19:03,830 --> 00:19:08,000
is the huge scheduler and the scheduler

00:19:06,200 --> 00:19:10,580
performs scheduling of the pods it

00:19:08,000 --> 00:19:12,250
considers a lot of things whenever it's

00:19:10,580 --> 00:19:15,590
trying to determine where to schedule

00:19:12,250 --> 00:19:17,680
among that research requirements cpu

00:19:15,590 --> 00:19:19,780
utilization memory utilization

00:19:17,680 --> 00:19:21,610
and then just an arbitrary check to make

00:19:19,780 --> 00:19:24,790
sure you don't deploy too many pods to a

00:19:21,610 --> 00:19:27,100
box the APA scheduler is going to take

00:19:24,790 --> 00:19:29,320
that in consideration data locality and

00:19:27,100 --> 00:19:31,750
as I understand this as I understand

00:19:29,320 --> 00:19:33,190
this it's going to try to mute it's

00:19:31,750 --> 00:19:35,350
going to try to mount things that have

00:19:33,190 --> 00:19:36,880
external data volumes if multiple things

00:19:35,350 --> 00:19:39,520
needed it's going to try to put those

00:19:36,880 --> 00:19:42,100
together for you process affinity and

00:19:39,520 --> 00:19:44,860
anti infinity if we have replication

00:19:42,100 --> 00:19:46,960
controllers putting two container two

00:19:44,860 --> 00:19:50,290
pods on the same blocks that make any

00:19:46,960 --> 00:19:52,150
sense so we have so we have those

00:19:50,290 --> 00:19:54,190
considerations to make sure that our

00:19:52,150 --> 00:19:59,050
pods go to different boxes among other

00:19:54,190 --> 00:20:00,790
things the cube controller manager this

00:19:59,050 --> 00:20:02,860
is the guy that's actually watching

00:20:00,790 --> 00:20:07,690
Cooper Nettie's and making sure and

00:20:02,860 --> 00:20:10,870
making sure that making sure that the

00:20:07,690 --> 00:20:13,540
replication controllers are satisfied as

00:20:10,870 --> 00:20:15,400
they put it it makes changes to make the

00:20:13,540 --> 00:20:17,560
actual state pods match the desired

00:20:15,400 --> 00:20:19,060
state of pods so if you have a reference

00:20:17,560 --> 00:20:20,440
if you have a pot that goes down and a

00:20:19,060 --> 00:20:22,450
replication controller needs to take

00:20:20,440 --> 00:20:26,970
care of it the controller managers going

00:20:22,450 --> 00:20:29,950
to be the thing that helps you out okay

00:20:26,970 --> 00:20:33,040
now let's go on to the node q plet is

00:20:29,950 --> 00:20:34,480
cumulative both of the things that are

00:20:33,040 --> 00:20:36,160
running on the note are very interesting

00:20:34,480 --> 00:20:38,830
to Q bullet I for some reasons my

00:20:36,160 --> 00:20:40,000
favorite I've no idea why people it is

00:20:38,830 --> 00:20:42,010
what ensures that the pause

00:20:40,000 --> 00:20:43,630
specifications are met on a node meaning

00:20:42,010 --> 00:20:47,320
if you have multiple if you have

00:20:43,630 --> 00:20:49,180
multiple pods with containers you need

00:20:47,320 --> 00:20:51,790
to be running Hewlett is what's going to

00:20:49,180 --> 00:20:53,440
ensure that this that these are all

00:20:51,790 --> 00:20:56,230
running it's also going to ensure that

00:20:53,440 --> 00:20:57,760
data volumes are mounted properly it

00:20:56,230 --> 00:20:59,680
also ensures the containers are healthy

00:20:57,760 --> 00:21:02,440
as I mentioned before Cooper Danny's can

00:20:59,680 --> 00:21:04,150
you checks for the doctor demon through

00:21:02,440 --> 00:21:08,050
HTTP checks and by this point probably

00:21:04,150 --> 00:21:09,460
more cube would also does this really

00:21:08,050 --> 00:21:11,620
anything where it does garbage

00:21:09,460 --> 00:21:14,650
collection on containers and images on

00:21:11,620 --> 00:21:15,860
your nodes because when you fill up disk

00:21:14,650 --> 00:21:19,549
space that's generally

00:21:15,860 --> 00:21:21,710
that day so Hewlett's going to keep an

00:21:19,549 --> 00:21:23,690
eye on that cube lit by default what it

00:21:21,710 --> 00:21:25,460
will do is it'll wait until you get to

00:21:23,690 --> 00:21:27,260
some percentage disk utilization and

00:21:25,460 --> 00:21:29,720
then it will clean out images to get

00:21:27,260 --> 00:21:32,059
back to some utilization this is a

00:21:29,720 --> 00:21:33,470
pretty handy thing because if you have

00:21:32,059 --> 00:21:35,150
because if you have something that

00:21:33,470 --> 00:21:36,350
really isn't considering that isn't

00:21:35,150 --> 00:21:38,809
really considering what it's throwing

00:21:36,350 --> 00:21:41,480
away you potentially if you have to do a

00:21:38,809 --> 00:21:45,590
roll back in the event that we deploy a

00:21:41,480 --> 00:21:46,940
bad code if you have to roll back you

00:21:45,590 --> 00:21:48,830
don't want to have the way for a docker

00:21:46,940 --> 00:21:51,380
image to pull you want to be able to get

00:21:48,830 --> 00:21:52,700
it deployed as fast as possible so

00:21:51,380 --> 00:21:57,830
that's a pretty cool that's a pretty

00:21:52,700 --> 00:22:00,290
cool thing you want think you proxy what

00:21:57,830 --> 00:22:03,380
cute proxy actually does if you recall I

00:22:00,290 --> 00:22:06,740
said that a service will forward traffic

00:22:03,380 --> 00:22:09,950
to the room to the proper pod Hugh proxy

00:22:06,740 --> 00:22:12,350
in queue proxy is one of the things that

00:22:09,950 --> 00:22:14,990
helps you do that if you proxy runs on

00:22:12,350 --> 00:22:17,690
all the nodes and when it sets off when

00:22:14,990 --> 00:22:20,360
a service is creative get it just how to

00:22:17,690 --> 00:22:22,640
use as iptables currently to adjust

00:22:20,360 --> 00:22:24,320
routing such that traffic to a

00:22:22,640 --> 00:22:27,049
particular port that's open gets

00:22:24,320 --> 00:22:32,929
forwarded to one of the pods inside of

00:22:27,049 --> 00:22:35,179
the cluster this Q proxy can forward TCP

00:22:32,929 --> 00:22:37,340
and UDP streams or it can do you DP just

00:22:35,179 --> 00:22:40,460
step straight packet forwarding it's

00:22:37,340 --> 00:22:43,580
configured as I said by a group in any

00:22:40,460 --> 00:22:45,919
service so we're going to go back to the

00:22:43,580 --> 00:22:50,330
imagery of we're going to go back to the

00:22:45,919 --> 00:22:52,100
imagery of the service queue proxy is

00:22:50,330 --> 00:22:56,000
the thing that's pushing is pushing that

00:22:52,100 --> 00:22:58,640
along I'm deliberately being a little

00:22:56,000 --> 00:23:01,250
simple here if networking and Cooper

00:22:58,640 --> 00:23:04,160
Nettie's can be a little daunting it

00:23:01,250 --> 00:23:06,650
could be a little tough but I have 40

00:23:04,160 --> 00:23:08,750
minutes to consider 40 or 45 minutes to

00:23:06,650 --> 00:23:11,240
convince you to go try it and if I hit

00:23:08,750 --> 00:23:14,500
overlay networking we're going to be

00:23:11,240 --> 00:23:17,650
here until past that

00:23:14,500 --> 00:23:20,650
and so I'm simplifying this a little bit

00:23:17,650 --> 00:23:23,830
however if you look at that if you look

00:23:20,650 --> 00:23:25,330
at the if you look at the contain if you

00:23:23,830 --> 00:23:27,220
look at the repository in my slides

00:23:25,330 --> 00:23:30,010
later it will set up an overlay

00:23:27,220 --> 00:23:31,750
networking for you and you can get going

00:23:30,010 --> 00:23:37,600
and you can break off the details of

00:23:31,750 --> 00:23:40,780
that later oh all right now it's time

00:23:37,600 --> 00:23:45,120
for fun just to prove that I'm not full

00:23:40,780 --> 00:23:49,180
of garbage this okay so before I go on

00:23:45,120 --> 00:23:53,140
that that's fun here's the here's that

00:23:49,180 --> 00:23:55,180
github repository or a simple q Burnett

00:23:53,140 --> 00:23:56,610
ease banger setup it uses core OS this

00:23:55,180 --> 00:23:59,500
is what I'm using for my demonstration

00:23:56,610 --> 00:24:01,720
in my slides I've got all of the

00:23:59,500 --> 00:24:04,120
examples and I'm going to do you can

00:24:01,720 --> 00:24:06,160
follow along later on so don't worry

00:24:04,120 --> 00:24:08,380
about taking notes right now let's just

00:24:06,160 --> 00:24:16,240
have a good time and hope this thing

00:24:08,380 --> 00:24:17,620
works oh man okay so the first thing

00:24:16,240 --> 00:24:20,020
we're going to do so the first thing we

00:24:17,620 --> 00:24:23,410
want to do is we want to rekal them we

00:24:20,020 --> 00:24:25,900
want a replication controller in the

00:24:23,410 --> 00:24:27,820
Cooper ninnies so when we're Cooper

00:24:25,900 --> 00:24:30,580
Nettie's in either use JSON or gamble

00:24:27,820 --> 00:24:32,110
for configuration okay what we're

00:24:30,580 --> 00:24:33,820
looking at here is a replication

00:24:32,110 --> 00:24:37,360
controller configuration that will

00:24:33,820 --> 00:24:39,520
launch my that will watch my west- of my

00:24:37,360 --> 00:24:43,980
blog inside of a doctor container

00:24:39,520 --> 00:24:48,850
running in genetics the best demo ever

00:24:43,980 --> 00:24:50,830
so looking at this we see the API

00:24:48,850 --> 00:24:53,620
version this is generally going to be b1

00:24:50,830 --> 00:24:55,779
and there's been beta versions of the

00:24:53,620 --> 00:24:57,849
API and that's just the convention

00:24:55,779 --> 00:24:59,979
we see we're defining a replication

00:24:57,849 --> 00:25:07,509
controller type and then we hit a sexual

00:24:59,979 --> 00:25:12,519
identity yes sorry about that guys don't

00:25:07,509 --> 00:25:16,649
think this we've been picking me up the

00:25:12,519 --> 00:25:20,710
whole time I seem louder now so anyway

00:25:16,649 --> 00:25:26,590
anyway um man that just really

00:25:20,710 --> 00:25:36,039
interrupted my flow yes it's like I'm

00:25:26,590 --> 00:25:38,589
done okay so so the present data so this

00:25:36,039 --> 00:25:41,229
metadata is just information about our

00:25:38,589 --> 00:25:42,909
controller this doesn't this is just

00:25:41,229 --> 00:25:44,759
information to help us out so we have a

00:25:42,909 --> 00:25:48,210
name and then we have labels and the

00:25:44,759 --> 00:25:50,950
labels just help us filter filter things

00:25:48,210 --> 00:25:53,109
filter things filter things and we'll

00:25:50,950 --> 00:25:55,179
see an example that later and then we

00:25:53,109 --> 00:25:56,919
have the spec and the spec is actually

00:25:55,179 --> 00:26:00,460
what's telling us information about this

00:25:56,919 --> 00:26:01,809
about this on replication controller so

00:26:00,460 --> 00:26:04,389
you see here we have two replicas and

00:26:01,809 --> 00:26:05,859
then we have the selector which tells us

00:26:04,389 --> 00:26:10,149
the labels of the pods that we want to

00:26:05,859 --> 00:26:12,190
have monitored as simple as that it's as

00:26:10,149 --> 00:26:16,119
simple as that is after that we have a

00:26:12,190 --> 00:26:17,889
template that we're going to use that

00:26:16,119 --> 00:26:19,059
we're going that the replication

00:26:17,889 --> 00:26:21,190
controller is going to use when it's

00:26:19,059 --> 00:26:24,190
starting we pause and so we have a

00:26:21,190 --> 00:26:25,929
metadata just for that that we're late

00:26:24,190 --> 00:26:28,839
that we're labeling our pods with name

00:26:25,929 --> 00:26:31,299
blog pod and then we have a

00:26:28,839 --> 00:26:32,769
specification for that and the

00:26:31,299 --> 00:26:35,499
specification for that we see that we

00:26:32,769 --> 00:26:37,749
have a single container named block

00:26:35,499 --> 00:26:41,080
container we have an image and then we

00:26:37,749 --> 00:26:43,690
have the container port which is

00:26:41,080 --> 00:26:46,509
specifying the port this in use inside

00:26:43,690 --> 00:26:49,210
of our docker container you know doctors

00:26:46,509 --> 00:26:51,279
we have a port outside of we have a port

00:26:49,210 --> 00:26:52,929
that doctor is serving on to the rest of

00:26:51,279 --> 00:26:55,690
the world and then we have the port

00:26:52,929 --> 00:26:57,020
inside the container that docker the

00:26:55,690 --> 00:27:00,290
doctor is listening on for the

00:26:57,020 --> 00:27:06,140
location this container port represents

00:27:00,290 --> 00:27:09,140
that internal port okay moment of truth

00:27:06,140 --> 00:27:10,790
right here so now we're going to create

00:27:09,140 --> 00:27:17,260
so now we're going to spoiler alert

00:27:10,790 --> 00:27:20,030
we're going to create that blog okay so

00:27:17,260 --> 00:27:22,940
at this point this is gonna be the most

00:27:20,030 --> 00:27:29,600
amazing thing you see all day actually

00:27:22,940 --> 00:27:33,650
that is surprising that is really

00:27:29,600 --> 00:27:42,560
unfortunate um I swear I've done this

00:27:33,650 --> 00:27:43,970
like six times today well so somebody it

00:27:42,560 --> 00:27:46,130
would be Jeff hold on after in the

00:27:43,970 --> 00:27:48,770
audience told me yesterday that I kind

00:27:46,130 --> 00:27:53,540
of probably do myself when I said my

00:27:48,770 --> 00:27:54,830
demo is not applying these back there

00:27:53,540 --> 00:27:57,800
somewhere comp no dude knock on

00:27:54,830 --> 00:28:01,640
something box did you do that never goes

00:27:57,800 --> 00:28:03,710
for me if I could if you could help me

00:28:01,640 --> 00:28:07,940
with that this demo would be a lot less

00:28:03,710 --> 00:28:13,850
awful I can't believe that I just say

00:28:07,940 --> 00:28:19,010
well my network at the house oh ok let's

00:28:13,850 --> 00:28:21,460
be handed out what's the UM I really

00:28:19,010 --> 00:28:21,460
appreciate it

00:28:22,679 --> 00:28:26,340
you are a wonderful person

00:28:34,330 --> 00:28:39,350
like you should i'm just going to change

00:28:36,350 --> 00:28:47,270
the password of them done guys control

00:28:39,350 --> 00:28:53,060
over all give up here so we'll see if

00:28:47,270 --> 00:28:57,670
this ah there we go we got it i will

00:28:53,060 --> 00:29:03,050
have a discussion with you later mr. oh

00:28:57,670 --> 00:29:05,780
man so at this point controller are paja

00:29:03,050 --> 00:29:09,320
running at this point we're at the mercy

00:29:05,780 --> 00:29:10,790
they're they're working on it um so what

00:29:09,320 --> 00:29:13,700
you see here so what you see here is um

00:29:10,790 --> 00:29:16,940
cube CTL has another verb in addition to

00:29:13,700 --> 00:29:20,420
create called get get is a it will give

00:29:16,940 --> 00:29:23,540
us a list of information about about our

00:29:20,420 --> 00:29:24,710
own about are the things that are the

00:29:23,540 --> 00:29:27,320
resources that are running inside of

00:29:24,710 --> 00:29:29,570
your 90s so you see here that we have to

00:29:27,320 --> 00:29:32,150
pause running we have a ready state here

00:29:29,570 --> 00:29:35,800
we see that one of the water containers

00:29:32,150 --> 00:29:39,440
are running the status is money and it's

00:29:35,800 --> 00:29:41,560
seven hours old okay Cooper Nettie's

00:29:39,440 --> 00:29:45,950
you're just upsetting me right now

00:29:41,560 --> 00:29:48,040
that's weird okay fine so we can do the

00:29:45,950 --> 00:29:51,650
same thing with replication controllers

00:29:48,040 --> 00:29:54,170
and we have see you know we can use

00:29:51,650 --> 00:29:55,910
guitar see it's a shorthand replication

00:29:54,170 --> 00:30:00,920
controllers and that's the replication

00:29:55,910 --> 00:30:03,290
control that we created okay so like I

00:30:00,920 --> 00:30:05,060
said we can do get pods we can see that

00:30:03,290 --> 00:30:07,340
the Cure bananas lets us go a step

00:30:05,060 --> 00:30:11,300
further with the described with the

00:30:07,340 --> 00:30:13,580
described verb and so we can say we can

00:30:11,300 --> 00:30:18,760
say keep CTL described and we give it a

00:30:13,580 --> 00:30:18,760

YouTube URL: https://www.youtube.com/watch?v=q1VPRsf_Qa4


