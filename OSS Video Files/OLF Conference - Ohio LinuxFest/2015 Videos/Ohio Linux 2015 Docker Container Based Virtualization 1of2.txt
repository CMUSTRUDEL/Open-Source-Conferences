Title: Ohio Linux 2015 Docker Container Based Virtualization 1of2
Publication date: 2015-10-13
Playlist: 2015 Videos
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:06,420
yeah thanks to each other now one of the

00:00:03,750 --> 00:00:10,590
things whether quick good payback supply

00:00:06,420 --> 00:00:13,170
provide business cpu usage can be shared

00:00:10,590 --> 00:00:15,360
because you have one set of CPUs but

00:00:13,170 --> 00:00:18,570
their main share multiple virtual

00:00:15,360 --> 00:00:21,390
machines and so there's more efficient

00:00:18,570 --> 00:00:23,490
usage of CPUs and that's probably one of

00:00:21,390 --> 00:00:26,939
the reasons why people went to hydrolyze

00:00:23,490 --> 00:00:30,929
in the early days keeping that in mind

00:00:26,939 --> 00:00:35,370
let's look at potato virtualization now

00:00:30,929 --> 00:00:38,219
in many senses it is similar in that

00:00:35,370 --> 00:00:40,829
you're running multiple workloads the

00:00:38,219 --> 00:00:43,350
difference here is running multiple

00:00:40,829 --> 00:00:45,899
workloads under single instance of an OS

00:00:43,350 --> 00:00:49,800
in the hypervisor scenario we looked at

00:00:45,899 --> 00:00:51,690
there was each virtual machine had its

00:00:49,800 --> 00:00:54,180
own OS so there were multiple incidents

00:00:51,690 --> 00:00:57,000
of us perhaps there was a there was a

00:00:54,180 --> 00:00:59,489
guest I mean a host operating system OS

00:00:57,000 --> 00:01:02,329
to it not okay here we just have a

00:00:59,489 --> 00:01:07,580
string of instances of the OS which is

00:01:02,329 --> 00:01:11,100
hosting a container engine and that that

00:01:07,580 --> 00:01:13,770
instance is being multiplexed across all

00:01:11,100 --> 00:01:17,549
the containers so the can each container

00:01:13,770 --> 00:01:18,900
here now sees his own OS which is

00:01:17,549 --> 00:01:22,229
different from what we talked about

00:01:18,900 --> 00:01:27,780
earlier where each VM was seeing its own

00:01:22,229 --> 00:01:32,700
hardware so now there there are controls

00:01:27,780 --> 00:01:35,340
a typical containers that that isolate

00:01:32,700 --> 00:01:37,619
the containers from each other they're

00:01:35,340 --> 00:01:40,200
probably not quite as robust as a vm

00:01:37,619 --> 00:01:43,049
scenario there are also features

00:01:40,200 --> 00:01:45,180
typically entertainers to allocate

00:01:43,049 --> 00:01:47,689
resources and dynamically move them

00:01:45,180 --> 00:01:50,310
between the various containers as needed

00:01:47,689 --> 00:01:52,590
in order to make container

00:01:50,310 --> 00:01:54,420
virtualization happen there's certain

00:01:52,590 --> 00:01:57,360
colonel modifications required we look

00:01:54,420 --> 00:02:00,350
at them and containers themselves are

00:01:57,360 --> 00:02:02,680
not new they've been around for a while

00:02:00,350 --> 00:02:05,880
probably those of you coming from

00:02:02,680 --> 00:02:10,149
next world have probably seen forms of

00:02:05,880 --> 00:02:15,130
containers in solaris hp-ux in the linux

00:02:10,149 --> 00:02:18,190
world we have alexei which is then in

00:02:15,130 --> 00:02:20,709
the standard Linux kernel for since I

00:02:18,190 --> 00:02:23,140
think 2006 so it's been there almost 10

00:02:20,709 --> 00:02:25,959
years and then there are various

00:02:23,140 --> 00:02:29,410
third-party products from parallels

00:02:25,959 --> 00:02:32,770
which provide container technology and

00:02:29,410 --> 00:02:34,959
there's google has done containers for a

00:02:32,770 --> 00:02:39,310
long time in their technologies called

00:02:34,959 --> 00:02:42,540
Ellen cpf by that's a real cute name and

00:02:39,310 --> 00:02:42,540
I'll tell you what that means in there

00:02:44,040 --> 00:02:51,070
so I to depict pictorially what I just

00:02:48,160 --> 00:02:53,530
said here we have the hardware at the

00:02:51,070 --> 00:02:56,770
bottom then we have the operating system

00:02:53,530 --> 00:02:58,510
and a container injured now in some

00:02:56,770 --> 00:03:00,220
cases the container inch in the

00:02:58,510 --> 00:03:02,830
operating system could be squished into

00:03:00,220 --> 00:03:05,560
one but logically they're choosing to

00:03:02,830 --> 00:03:08,440
pieces here and then I've depicted three

00:03:05,560 --> 00:03:10,989
containers and notice there's only a

00:03:08,440 --> 00:03:14,380
single instance of the OS on the in this

00:03:10,989 --> 00:03:16,450
configuration here what what you need to

00:03:14,380 --> 00:03:21,070
hear is even though there's a single

00:03:16,450 --> 00:03:23,860
instance of the hoe ass the the file

00:03:21,070 --> 00:03:26,950
systems the user database the the

00:03:23,860 --> 00:03:29,140
networking and the process tree is

00:03:26,950 --> 00:03:31,299
unique for each container so each

00:03:29,140 --> 00:03:33,519
container is you know if you want to

00:03:31,299 --> 00:03:35,860
look at process number 10 on container

00:03:33,519 --> 00:03:37,360
one will be different from it'll be a

00:03:35,860 --> 00:03:40,150
different process that if there is a

00:03:37,360 --> 00:03:42,070
process number 10 or 15 or two then ate

00:03:40,150 --> 00:03:44,080
that the name spaces are separated

00:03:42,070 --> 00:03:47,110
across the containers such containers

00:03:44,080 --> 00:03:50,320
are efficient for memory usage mainly

00:03:47,110 --> 00:03:53,170
because now we've gotten rid of having

00:03:50,320 --> 00:03:54,850
an operating system / workload like we

00:03:53,170 --> 00:03:57,489
had in the virtual what's your memory

00:03:54,850 --> 00:04:00,850
scenario in apps are in a virtualization

00:03:57,489 --> 00:04:02,560
sinner and so there's only a single

00:04:00,850 --> 00:04:05,560
instance of our existence all the

00:04:02,560 --> 00:04:07,600
resources the OS are consuming are now

00:04:05,560 --> 00:04:12,790
available for food or clothes to

00:04:07,600 --> 00:04:14,859
actually use so they'll be number

00:04:12,790 --> 00:04:15,170
underlying Linux technologies that have

00:04:14,859 --> 00:04:18,160
been

00:04:15,170 --> 00:04:23,750
there for a long time that are that have

00:04:18,160 --> 00:04:26,720
powered containers and so much of these

00:04:23,750 --> 00:04:28,550
are aggregated to various extents in

00:04:26,720 --> 00:04:31,280
different implementations of container

00:04:28,550 --> 00:04:33,050
technology we've already talked some

00:04:31,280 --> 00:04:36,200
about games based isolation of the

00:04:33,050 --> 00:04:40,490
things listed over there of course this

00:04:36,200 --> 00:04:43,520
file system isolation do so that / NC /

00:04:40,490 --> 00:04:46,340
hosts on one container this is not same

00:04:43,520 --> 00:04:49,490
as / can see posts on on any other

00:04:46,340 --> 00:04:51,200
container or on the coastal flats all of

00:04:49,490 --> 00:04:53,060
them are different we look at the

00:04:51,200 --> 00:04:57,410
example of that in the demonstration

00:04:53,060 --> 00:04:59,780
here and then the next time already has

00:04:57,410 --> 00:05:02,380
had for a while the concept of see

00:04:59,780 --> 00:05:06,320
groups which essentially allows you to

00:05:02,380 --> 00:05:10,970
budget resources control resources such

00:05:06,320 --> 00:05:13,400
as memory CPU devices etc and allocate

00:05:10,970 --> 00:05:16,520
them according to the needs of each

00:05:13,400 --> 00:05:18,470
workload to to specific containers so

00:05:16,520 --> 00:05:21,890
that technology has been around a little

00:05:18,470 --> 00:05:24,490
together some implementation of

00:05:21,890 --> 00:05:27,260
container technologies specifically dr.

00:05:24,490 --> 00:05:30,140
relies on something called a copier

00:05:27,260 --> 00:05:32,120
right file system so that if there are

00:05:30,140 --> 00:05:34,400
two cup if there are two containers that

00:05:32,120 --> 00:05:37,400
perhaps are sharing the same file system

00:05:34,400 --> 00:05:39,350
or let's say the host OS and the

00:05:37,400 --> 00:05:40,970
container sharing the file system there

00:05:39,350 --> 00:05:44,720
aren't two copies of that file system

00:05:40,970 --> 00:05:49,310
there's one whatever and 11 is changed

00:05:44,720 --> 00:05:51,410
the the the one that's changed yes only

00:05:49,310 --> 00:05:53,750
the files again change are kept in the

00:05:51,410 --> 00:05:56,960
copy and write file system so spaces use

00:05:53,750 --> 00:06:02,330
spaces process of spaces efficiently

00:05:56,960 --> 00:06:03,710
okay so let's numb ER eyes what's the

00:06:02,330 --> 00:06:06,500
difference between two failures at

00:06:03,710 --> 00:06:08,840
virtual machines containers a very

00:06:06,500 --> 00:06:11,690
lightweight there is no operating system

00:06:08,840 --> 00:06:14,419
per container the resources consumed nur

00:06:11,690 --> 00:06:18,820
and much less so as a result you can

00:06:14,419 --> 00:06:20,890
support your workloads basically that

00:06:18,820 --> 00:06:23,890
virtual machine environment because you

00:06:20,890 --> 00:06:26,800
have fewer resources the good time is

00:06:23,890 --> 00:06:29,170
just phenomenally better typical virtual

00:06:26,800 --> 00:06:32,140
machine boosts if tens of seconds a

00:06:29,170 --> 00:06:37,270
typical container starts up in tens of

00:06:32,140 --> 00:06:39,520
many cycles so factor 10 to the 3 the

00:06:37,270 --> 00:06:43,270
performances in most cases very near

00:06:39,520 --> 00:06:48,340
heart raw hardware performance in terms

00:06:43,270 --> 00:06:49,840
of you know CPU memory etc and because

00:06:48,340 --> 00:06:52,090
you have only one instance of the West

00:06:49,840 --> 00:06:54,370
it's easier to manage that's a blessing

00:06:52,090 --> 00:06:56,740
and that's it yours too and the first

00:06:54,370 --> 00:07:02,170
said it is because you have one instance

00:06:56,740 --> 00:07:04,630
of the OS if you know if if you need to

00:07:02,170 --> 00:07:06,820
do any radical surgery of the hoe ass

00:07:04,630 --> 00:07:08,980
all the containers have to come down if

00:07:06,820 --> 00:07:11,230
you need to reboot your wish your true

00:07:08,980 --> 00:07:14,380
reboot you got to take all you can't

00:07:11,230 --> 00:07:17,890
understand and then the fact that

00:07:14,380 --> 00:07:21,880
there's only one underlying OS means you

00:07:17,890 --> 00:07:24,310
can only run containers that speak that

00:07:21,880 --> 00:07:27,460
general flavor of OS when I say general

00:07:24,310 --> 00:07:29,050
flavor OS mean the container can if it's

00:07:27,460 --> 00:07:31,420
an unexplained or any Linux flavor

00:07:29,050 --> 00:07:33,610
pretty much you can run a nice container

00:07:31,420 --> 00:07:36,100
on it but you can't run a windows

00:07:33,610 --> 00:07:38,290
container they don't exist yet but

00:07:36,100 --> 00:07:40,630
someday they will do nothing you don't

00:07:38,290 --> 00:07:42,850
exist you can't run a windows retainer

00:07:40,630 --> 00:07:46,090
monolithic system or vice versa if you

00:07:42,850 --> 00:07:47,890
one day one day windows will have a

00:07:46,090 --> 00:07:52,450
container engine and you won't be able

00:07:47,890 --> 00:07:55,720
to progress on that so had these

00:07:52,450 --> 00:07:58,450
containers and yours play together while

00:07:55,720 --> 00:08:01,120
they cook they could coexist real well I

00:07:58,450 --> 00:08:02,950
think depending on what you're doing one

00:08:01,120 --> 00:08:05,860
or the other of both may be the right

00:08:02,950 --> 00:08:09,400
answer be aware for example has as

00:08:05,860 --> 00:08:10,860
readily pushing something forget the

00:08:09,400 --> 00:08:13,370
name of their cartridge it comes

00:08:10,860 --> 00:08:16,439
slide where they're actually building

00:08:13,370 --> 00:08:22,409
dr. containers inside of VMware BM

00:08:16,439 --> 00:08:24,389
senescence and our audience so I talked

00:08:22,409 --> 00:08:27,030
about containers in general let's talk

00:08:24,389 --> 00:08:29,129
about what's different about dr. as I

00:08:27,030 --> 00:08:31,469
said it's a specialized kind of

00:08:29,129 --> 00:08:35,190
container and the focus here basically

00:08:31,469 --> 00:08:38,969
shifts whereas the containers in general

00:08:35,190 --> 00:08:41,669
tend to be associated with giving you

00:08:38,969 --> 00:08:44,640
almost an entire operating system image

00:08:41,669 --> 00:08:47,100
so the container would have you can log

00:08:44,640 --> 00:08:49,649
into it and you can't tell that it isn't

00:08:47,100 --> 00:08:52,230
a full-fledged operating system running

00:08:49,649 --> 00:08:54,390
on native harder and are on the vm you

00:08:52,230 --> 00:08:58,170
know all the demons that you typically

00:08:54,390 --> 00:09:03,019
see will be running etc the difference

00:08:58,170 --> 00:09:06,019
here in dr. is the goal is to provide an

00:09:03,019 --> 00:09:08,790
application centric view of containers

00:09:06,019 --> 00:09:11,550
goal is to make it easy to develop

00:09:08,790 --> 00:09:16,079
applications move them from development

00:09:11,550 --> 00:09:18,240
to QA to production etc without having

00:09:16,079 --> 00:09:20,640
to change too many things containing all

00:09:18,240 --> 00:09:23,279
the dependencies that the application

00:09:20,640 --> 00:09:25,140
needs and only those things that the

00:09:23,279 --> 00:09:32,100
application needs inside of the

00:09:25,140 --> 00:09:34,560
container and so the whole focus is

00:09:32,100 --> 00:09:37,699
getting applications into production

00:09:34,560 --> 00:09:43,160
quigley modifying applications and

00:09:37,699 --> 00:09:46,860
whereas the virtual machines tended to

00:09:43,160 --> 00:09:48,630
tend to run or even even Linux context

00:09:46,860 --> 00:09:52,100
the containers tend to run for long

00:09:48,630 --> 00:09:55,040
periods of time these lightning

00:09:52,100 --> 00:09:58,589
application-centric contain is not dr.

00:09:55,040 --> 00:10:00,930
may run from milliseconds and startup do

00:09:58,589 --> 00:10:02,970
estas Texan and then startup do it

00:10:00,930 --> 00:10:05,550
started do its eggs so it's not

00:10:02,970 --> 00:10:08,519
consuming any resources but it isn't

00:10:05,550 --> 00:10:11,040
doing work allowing you to think of REE

00:10:08,519 --> 00:10:12,839
are connecting your application in a way

00:10:11,040 --> 00:10:14,560
that it consists of all these micro

00:10:12,839 --> 00:10:16,930
services which is the director

00:10:14,560 --> 00:10:19,120
we're hearing and a lot of talks here

00:10:16,930 --> 00:10:25,060
today using micro services to put

00:10:19,120 --> 00:10:27,750
applications together now just to help

00:10:25,060 --> 00:10:31,480
you understand the problem that it's

00:10:27,750 --> 00:10:33,370
containers of solving it and you look at

00:10:31,480 --> 00:10:37,800
on the left here we have an array of

00:10:33,370 --> 00:10:41,529
applications and these applications

00:10:37,800 --> 00:10:44,320
typically perform various functions may

00:10:41,529 --> 00:10:51,580
work together with each other in a

00:10:44,320 --> 00:10:53,910
typical shop the horizontal axis has the

00:10:51,580 --> 00:10:58,800
places where these applications made one

00:10:53,910 --> 00:11:02,320
they run on a workstation of a developer

00:10:58,800 --> 00:11:05,230
and that developer may may hand off a

00:11:02,320 --> 00:11:07,690
piece of that to the other to his friend

00:11:05,230 --> 00:11:10,029
across the the office there who's going

00:11:07,690 --> 00:11:12,370
to do another piece of that so his

00:11:10,029 --> 00:11:14,980
environment in his workstation or

00:11:12,370 --> 00:11:17,260
everyone station and then eventually

00:11:14,980 --> 00:11:19,540
when they got it all figured out it'll

00:11:17,260 --> 00:11:22,060
go into QA so it could moves it to a QAM

00:11:19,540 --> 00:11:24,790
arm and then from there may be moved

00:11:22,060 --> 00:11:26,290
into production or there may be number

00:11:24,790 --> 00:11:29,920
of intermediate steps and that served

00:11:26,290 --> 00:11:35,350
with the horizontal axis is indicating

00:11:29,920 --> 00:11:37,960
here well you know how often have you

00:11:35,350 --> 00:11:40,780
heard it works in my environment but it

00:11:37,960 --> 00:11:42,880
won't somebody else's it doesn't work if

00:11:40,780 --> 00:11:45,160
there's but you just move the coat over

00:11:42,880 --> 00:11:46,510
well what are the types of things that

00:11:45,160 --> 00:11:47,980
break there are lots of things that

00:11:46,510 --> 00:11:50,230
could break could be the version of

00:11:47,980 --> 00:11:52,540
libraries that are that are present

00:11:50,230 --> 00:11:54,190
circus and utilities improves our

00:11:52,540 --> 00:11:55,960
present one place not presently in a

00:11:54,190 --> 00:11:58,480
place that there may be certain

00:11:55,960 --> 00:12:00,670
configuration files that are set up one

00:11:58,480 --> 00:12:03,430
way here and not a different way there

00:12:00,670 --> 00:12:05,730
there may be environment variable center

00:12:03,430 --> 00:12:08,320
that are set one way or not set and

00:12:05,730 --> 00:12:10,420
differently in the others lots of other

00:12:08,320 --> 00:12:13,089
things like that that could cause things

00:12:10,420 --> 00:12:14,709
to say it to work one place but when you

00:12:13,089 --> 00:12:18,160
pick up the coded traffic somewhere else

00:12:14,709 --> 00:12:20,110
it does nor so that's that's the problem

00:12:18,160 --> 00:12:21,420
we're trying to solve allow you to move

00:12:20,110 --> 00:12:25,620
all these things in

00:12:21,420 --> 00:12:28,320
yet have it work and do it in a real

00:12:25,620 --> 00:12:31,460
concise manner just taking just what you

00:12:28,320 --> 00:12:35,550
need for that application and no more

00:12:31,460 --> 00:12:37,140
over loop from one develop one execution

00:12:35,550 --> 00:12:41,010
environment to another execution in the

00:12:37,140 --> 00:12:42,600
bar so the problem is computer

00:12:41,010 --> 00:12:44,700
scientists would call this little square

00:12:42,600 --> 00:12:47,580
problem basically trying to figure out

00:12:44,700 --> 00:12:49,380
if I if I move this application to this

00:12:47,580 --> 00:12:51,840
mr then you go to groovy these things

00:12:49,380 --> 00:12:55,520
moving to that an arm I go to the BG

00:12:51,840 --> 00:12:58,050
stick so you have essentially s squared

00:12:55,520 --> 00:13:00,390
formula list of things tasks that have

00:12:58,050 --> 00:13:02,760
to perform depending on which piece of

00:13:00,390 --> 00:13:07,770
software it's going to wear that's not

00:13:02,760 --> 00:13:09,480
very easy to manage now this this

00:13:07,770 --> 00:13:11,790
problem is not unique to a computer

00:13:09,480 --> 00:13:13,530
world english your industry this

00:13:11,790 --> 00:13:16,740
actually many years ago this was the

00:13:13,530 --> 00:13:20,250
same issue you had on the one hand you

00:13:16,740 --> 00:13:23,460
know perhaps the a bunch of an atom pink

00:13:20,250 --> 00:13:25,740
shirt and then their hand yet what about

00:13:23,460 --> 00:13:27,240
who's being shipped and depending on

00:13:25,740 --> 00:13:29,220
where they were what was the motor

00:13:27,240 --> 00:13:32,010
transportation there were different

00:13:29,220 --> 00:13:34,650
instructions on how you pack them and

00:13:32,010 --> 00:13:36,540
made their super flat back make them

00:13:34,650 --> 00:13:39,030
ready to be transported by the medium of

00:13:36,540 --> 00:13:41,910
transportation of that size so when you

00:13:39,030 --> 00:13:43,830
move change between one please one motor

00:13:41,910 --> 00:13:45,960
transportation to another they have to

00:13:43,830 --> 00:13:48,000
remove move things around and repackaged

00:13:45,960 --> 00:13:50,700
it and having the transportation

00:13:48,000 --> 00:13:53,820
industry solve this they came up with a

00:13:50,700 --> 00:13:57,230
concept of physical containers and

00:13:53,820 --> 00:14:01,320
basically what this did was it allowed

00:13:57,230 --> 00:14:03,630
those who are shipping something to only

00:14:01,320 --> 00:14:05,970
worrying about getting whatever they're

00:14:03,630 --> 00:14:08,160
shipping into the container and packed

00:14:05,970 --> 00:14:11,580
properly they don't have to worry about

00:14:08,160 --> 00:14:14,550
what else is shipping so that's the only

00:14:11,580 --> 00:14:15,960
task that they have whereas the people

00:14:14,550 --> 00:14:18,570
who are in the transportation industry

00:14:15,960 --> 00:14:21,180
that are moving the stuff now the only

00:14:18,570 --> 00:14:24,600
thing they have to worry about is here's

00:14:21,180 --> 00:14:26,610
the standardized container how do i take

00:14:24,600 --> 00:14:27,070
it move it from here to there and they

00:14:26,610 --> 00:14:30,550
don't have

00:14:27,070 --> 00:14:33,550
repack things are worrying about you

00:14:30,550 --> 00:14:36,280
know the automobile crushing the bananas

00:14:33,550 --> 00:14:39,300
you know entrancing agenda these conveys

00:14:36,280 --> 00:14:43,350
with eg stacked on top of each other and

00:14:39,300 --> 00:14:45,820
essentially take away that problem so

00:14:43,350 --> 00:14:49,440
darker in a sense that's the same thing

00:14:45,820 --> 00:14:52,680
it eliminates this matrix from hell

00:14:49,440 --> 00:14:55,630
bye-bye essentially acquiring the

00:14:52,680 --> 00:14:58,150
developer of the obligation to ensure

00:14:55,630 --> 00:15:00,130
that all the bits and pieces that are

00:14:58,150 --> 00:15:03,280
needed for the application a stuck

00:15:00,130 --> 00:15:05,160
inside the doctor container and and he

00:15:03,280 --> 00:15:08,440
doesn't have to worry about how that

00:15:05,160 --> 00:15:11,380
application yes moved between one place

00:15:08,440 --> 00:15:13,510
i've installed on production system fury

00:15:11,380 --> 00:15:18,040
system developer one sister developer

00:15:13,510 --> 00:15:20,680
two systems whatever whereas the society

00:15:18,040 --> 00:15:22,870
now doesn't have to worry about these

00:15:20,680 --> 00:15:24,280
long lists of this application flowing

00:15:22,870 --> 00:15:27,610
in this environment you need to do this

00:15:24,280 --> 00:15:29,920
business all he has to do is I'm getting

00:15:27,610 --> 00:15:32,650
a standard container I have a container

00:15:29,920 --> 00:15:34,570
engine how to run the this tablet

00:15:32,650 --> 00:15:36,490
container on my container engine that's

00:15:34,570 --> 00:15:40,110
all the answers no basically so it

00:15:36,490 --> 00:15:45,850
simplifies that this task of managing

00:15:40,110 --> 00:15:47,560
application deployments wait so talked

00:15:45,850 --> 00:15:50,850
about dr. I thought part that actually

00:15:47,560 --> 00:15:54,280
container so what's the just to remember

00:15:50,850 --> 00:15:56,860
remind me remind us what did put the

00:15:54,280 --> 00:16:00,430
highlight where my doctor specializes

00:15:56,860 --> 00:16:02,590
compared to LSC containers the focus is

00:16:00,430 --> 00:16:04,330
the important thing whereas one is

00:16:02,590 --> 00:16:07,840
focused on providing a full operating

00:16:04,330 --> 00:16:08,570
system image kind of thing the doctor is

00:16:07,840 --> 00:16:12,230
now

00:16:08,570 --> 00:16:15,140
single application running within one

00:16:12,230 --> 00:16:16,700
container and just the libraries just

00:16:15,140 --> 00:16:21,200
diseases that are needed for that

00:16:16,700 --> 00:16:23,210
application so the boys template needed

00:16:21,200 --> 00:16:26,300
for that within the container is pared

00:16:23,210 --> 00:16:29,150
down there there there typically will

00:16:26,300 --> 00:16:31,580
not be things such as you know the inner

00:16:29,150 --> 00:16:32,930
demons running syslog chronic cetera

00:16:31,580 --> 00:16:34,430
unless they're needed by that

00:16:32,930 --> 00:16:38,720
application there's no need to have

00:16:34,430 --> 00:16:41,510
those things run inside it up and as I

00:16:38,720 --> 00:16:45,140
mentioned earlier containers could be

00:16:41,510 --> 00:16:48,620
long-lasting but very typically in this

00:16:45,140 --> 00:16:52,280
view of the world as being serviced by

00:16:48,620 --> 00:16:54,560
micros microservices is really typically

00:16:52,280 --> 00:16:57,260
short-lasting you know maybe off the

00:16:54,560 --> 00:17:01,070
owner of seconds typically before the

00:16:57,260 --> 00:17:05,180
containers you know task is done to the

00:17:01,070 --> 00:17:08,720
container is goes away again we talked

00:17:05,180 --> 00:17:13,820
about a portability one other thing that

00:17:08,720 --> 00:17:17,360
dr. hat provides is a like a depository

00:17:13,820 --> 00:17:20,020
and i think they call it a registry work

00:17:17,360 --> 00:17:23,390
where they where they stick save all

00:17:20,020 --> 00:17:26,959
when they make available images that can

00:17:23,390 --> 00:17:29,360
be used to start containers so you might

00:17:26,959 --> 00:17:33,350
have an image which had which has a

00:17:29,360 --> 00:17:35,920
saver 12 14 darko for Thea's vuarnet and

00:17:33,350 --> 00:17:38,510
just just this a skinny version of that

00:17:35,920 --> 00:17:41,840
you might have an image which has just

00:17:38,510 --> 00:17:46,040
enough lyrics to run engine acts as a

00:17:41,840 --> 00:17:50,060
web server etc etc and so once you have

00:17:46,040 --> 00:17:52,940
built these these specialized images

00:17:50,060 --> 00:17:54,710
they could be shared either in within

00:17:52,940 --> 00:17:57,320
your organization and have a local

00:17:54,710 --> 00:17:59,720
repository or are they on the worldwide

00:17:57,320 --> 00:18:01,680
internet where there you know lots and

00:17:59,720 --> 00:18:03,620
lots of images of

00:18:01,680 --> 00:18:06,480
available of course you have to trust

00:18:03,620 --> 00:18:08,130
the question of who's who they were just

00:18:06,480 --> 00:18:12,600
getting truck they'll take that Yuri

00:18:08,130 --> 00:18:14,520
will give to worry about okay so the

00:18:12,600 --> 00:18:18,690
doctor architecture is actually quite

00:18:14,520 --> 00:18:21,930
simple there is typically a host where

00:18:18,690 --> 00:18:25,520
all the doctor containers are running

00:18:21,930 --> 00:18:30,480
and that post has a doctor demon honor

00:18:25,520 --> 00:18:33,690
the function of that dr. Damon is

00:18:30,480 --> 00:18:36,780
actually to execute commands that are

00:18:33,690 --> 00:18:38,550
given to operate on the containers it

00:18:36,780 --> 00:18:42,810
could be start up a container stop a

00:18:38,550 --> 00:18:45,930
container it's entertainment so how does

00:18:42,810 --> 00:18:48,390
one issue these commands how does one

00:18:45,930 --> 00:18:50,910
interact with with the doctor with the

00:18:48,390 --> 00:18:54,870
doctor host there's something on the

00:18:50,910 --> 00:18:57,300
doctor time and and that could be either

00:18:54,870 --> 00:18:59,310
running on the same machine as a doctor

00:18:57,300 --> 00:19:01,920
host or could be running on another

00:18:59,310 --> 00:19:04,290
machine on the network typically when

00:19:01,920 --> 00:19:06,810
it's running on the same machine there's

00:19:04,290 --> 00:19:11,100
a CLI and i'll be demonstrating the CLI

00:19:06,810 --> 00:19:15,770
commands shorty dr. pol dr. Ron dr. PS

00:19:11,100 --> 00:19:18,780
etc etc to cause the doctor and docker

00:19:15,770 --> 00:19:22,020
demon or the doctor engine to do the

00:19:18,780 --> 00:19:24,270
right things that you want done in the

00:19:22,020 --> 00:19:26,550
case of remote access this there's

00:19:24,270 --> 00:19:29,310
restful api is available essentially to

00:19:26,550 --> 00:19:33,600
do the same thing and i believe even the

00:19:29,310 --> 00:19:35,940
local access essentially fixed these CLI

00:19:33,600 --> 00:19:37,650
commands and pose them down restful api

00:19:35,940 --> 00:19:39,600
so that makes the call back to the dr

00:19:37,650 --> 00:19:42,870
diamond with you don't have to worry

00:19:39,600 --> 00:19:44,670
about writing to those aps and then on

00:19:42,870 --> 00:19:47,070
the side as i mentioned there is a

00:19:44,670 --> 00:19:50,190
registry a registry is basically a

00:19:47,070 --> 00:19:52,830
collection of images of useful things

00:19:50,190 --> 00:19:56,630
that people have done that you may want

00:19:52,830 --> 00:19:59,360
to reuse and so the main thing the one

00:19:56,630 --> 00:20:01,640
things in the doctor world is you don't

00:19:59,360 --> 00:20:04,010
often start from scratch you start with

00:20:01,640 --> 00:20:06,590
something some image that doesn't eighty

00:20:04,010 --> 00:20:09,740
percent about you would you need done

00:20:06,590 --> 00:20:11,510
and then you drop the code to do the

00:20:09,740 --> 00:20:14,330
remaining twenty percent and how to

00:20:11,510 --> 00:20:16,070
document generate another image which

00:20:14,330 --> 00:20:18,110
can you share with others who may then

00:20:16,070 --> 00:20:20,600
take that and enhance it to their

00:20:18,110 --> 00:20:22,850
specific needs so that there's an image

00:20:20,600 --> 00:20:28,910
repository which doctor files and

00:20:22,850 --> 00:20:30,890
registry so what's the doctor ecosystem

00:20:28,910 --> 00:20:35,750
look like this is just a very simple

00:20:30,890 --> 00:20:37,220
thing at the top you have on the start

00:20:35,750 --> 00:20:40,460
of the body at the bottom you have all

00:20:37,220 --> 00:20:42,700
the places where dr. can run and it can

00:20:40,460 --> 00:20:45,310
run in physical machines can run on

00:20:42,700 --> 00:20:52,640
virtual machines and can run on clouds

00:20:45,310 --> 00:20:55,580
and there are various providers of which

00:20:52,640 --> 00:20:57,370
you know the cloud that the support

00:20:55,580 --> 00:21:00,500
doctor so if they were listed here and

00:20:57,370 --> 00:21:03,350
there are various operating systems in

00:21:00,500 --> 00:21:06,610
the this community which have dr. built

00:21:03,350 --> 00:21:11,560
into it but it to them and they can

00:21:06,610 --> 00:21:15,290
enable you to run run dr on the the

00:21:11,560 --> 00:21:19,960
application side the top half of this

00:21:15,290 --> 00:21:22,820
slide are a lot of utilities and proves

00:21:19,960 --> 00:21:24,800
some of which are available inside of

00:21:22,820 --> 00:21:27,770
docker containers and some of which are

00:21:24,800 --> 00:21:29,660
used to manipulate docker containers so

00:21:27,770 --> 00:21:31,580
a lot of the you may notice the number

00:21:29,660 --> 00:21:33,860
of the configuration management tools

00:21:31,580 --> 00:21:38,000
like chef and

00:21:33,860 --> 00:21:44,090
decibel are integrated into the doctor

00:21:38,000 --> 00:21:46,490
ecosystem so if you where do you want if

00:21:44,090 --> 00:21:50,090
you want to run dr where where will you

00:21:46,490 --> 00:21:52,070
go well get hold of a fairly recent

00:21:50,090 --> 00:21:54,170
linux distribution and i have some

00:21:52,070 --> 00:21:57,049
listed there and they have dr. bill

00:21:54,170 --> 00:21:58,970
Tipton so there's almost nothing you

00:21:57,049 --> 00:22:02,030
have to do justice to all those things

00:21:58,970 --> 00:22:04,940
if doctor at dr. IO is typically the

00:22:02,030 --> 00:22:07,580
name of the package at least on the hood

00:22:04,940 --> 00:22:10,070
to family of systems you may need to do

00:22:07,580 --> 00:22:14,780
afghan installed a fornaio maybe maybe

00:22:10,070 --> 00:22:17,950
your distribution already has that now

00:22:14,780 --> 00:22:22,880
you now there are people who are saying

00:22:17,950 --> 00:22:25,160
just like we ever took what used to be a

00:22:22,880 --> 00:22:28,790
host Jennifer was host operating system

00:22:25,160 --> 00:22:31,610
with their web hypervisor sitting on top

00:22:28,790 --> 00:22:34,730
and smoosh that put put a specialized

00:22:31,610 --> 00:22:38,330
operating system good for hypervisor

00:22:34,730 --> 00:22:40,100
functionality and call it ESX why not do

00:22:38,330 --> 00:22:42,380
the same thing the doctor work till

00:22:40,100 --> 00:22:45,710
something that loot a row row hardware

00:22:42,380 --> 00:22:47,840
that can whose only function is not to

00:22:45,710 --> 00:22:49,730
support Jennifer's application with

00:22:47,840 --> 00:22:53,419
support containers and container

00:22:49,730 --> 00:22:56,120
management fees and in that plane there

00:22:53,419 --> 00:22:58,450
there's a company for Korres that is

00:22:56,120 --> 00:23:02,809
doing the signatory my work producing a

00:22:58,450 --> 00:23:04,970
product in that line Red Hat is working

00:23:02,809 --> 00:23:07,040
on something about project atomic which

00:23:04,970 --> 00:23:10,460
is again in the same way releasing a

00:23:07,040 --> 00:23:13,460
slim the next like OS on which doctors

00:23:10,460 --> 00:23:17,480
can run and then we aware as tough as

00:23:13,460 --> 00:23:20,549
something I'll photon which is again

00:23:17,480 --> 00:23:24,210
now what about not a linux OS is a

00:23:20,549 --> 00:23:27,029
wedding as I said today dr. is very good

00:23:24,210 --> 00:23:30,299
eccentric if you want to run a linux

00:23:27,029 --> 00:23:33,299
docker container on a Mac OS system or a

00:23:30,299 --> 00:23:35,460
window system well essentially you can

00:23:33,299 --> 00:23:38,759
use tools like something like dr.

00:23:35,460 --> 00:23:42,899
toolbox what that essentially does it

00:23:38,759 --> 00:23:46,049
gives you a vm and I think it uses a

00:23:42,899 --> 00:23:48,899
virtual box so it gives you a we m which

00:23:46,049 --> 00:23:51,210
is actually running a skin down version

00:23:48,899 --> 00:23:54,149
of an OS that knows how to map managed

00:23:51,210 --> 00:23:57,119
containers so you will be then working

00:23:54,149 --> 00:23:59,399
inside this then its skin down linux OS

00:23:57,119 --> 00:24:01,830
which is booted to this vm onto your

00:23:59,399 --> 00:24:04,529
windows box or your mac OS box and then

00:24:01,830 --> 00:24:06,749
you can have dr like functionality will

00:24:04,529 --> 00:24:11,220
talk about native functionality for the

00:24:06,749 --> 00:24:14,129
middle layer then the clouds are

00:24:11,220 --> 00:24:17,249
multiple cloud providers mr. there that

00:24:14,129 --> 00:24:20,399
already have all the mechanics needed to

00:24:17,249 --> 00:24:23,759
support containers OpenStack which is

00:24:20,399 --> 00:24:26,909
which is again a cloud hypervisor

00:24:23,759 --> 00:24:30,720
solution from the from the open source

00:24:26,909 --> 00:24:34,139
community also as of almost 18 months

00:24:30,720 --> 00:24:37,249
ago at dr. integrated into it so on or

00:24:34,139 --> 00:24:39,359
released and the level of integration is

00:24:37,249 --> 00:24:43,080
increasing every six months a

00:24:39,359 --> 00:24:46,559
technologically releases will talk about

00:24:43,080 --> 00:24:50,759
Windows Server there there is almost

00:24:46,559 --> 00:24:56,580
ours now so what what's happening here

00:24:50,759 --> 00:25:02,249
is sure today you can go to Microsoft's

00:24:56,580 --> 00:25:04,440
cloud and you get on Linux VMS on which

00:25:02,249 --> 00:25:08,340
you can run docker containers that's

00:25:04,440 --> 00:25:10,759
available today now in the future where

00:25:08,340 --> 00:25:15,210
Microsoft is committed to going is

00:25:10,759 --> 00:25:17,279
building in a container technology in

00:25:15,210 --> 00:25:18,869
general all those things understood that

00:25:17,279 --> 00:25:22,289
were needed to support containers that

00:25:18,869 --> 00:25:25,190
have been in Linux for you know six to

00:25:22,289 --> 00:25:27,530
ten years all that functionality has to

00:25:25,190 --> 00:25:29,890
window in the windows world not their

00:25:27,530 --> 00:25:32,210
working of that some future at least

00:25:29,890 --> 00:25:35,150
they will do it have essentially a

00:25:32,210 --> 00:25:37,190
darker engine that runs on on windows

00:25:35,150 --> 00:25:41,090
server which will then be able to run

00:25:37,190 --> 00:25:43,520
Windows docker containers with on that

00:25:41,090 --> 00:25:47,420
docker windows engine that will not be

00:25:43,520 --> 00:25:50,600
able to run the windows containers run

00:25:47,420 --> 00:25:53,330
on windows dr. engine excavators the

00:25:50,600 --> 00:25:57,290
next car engine now if this is a

00:25:53,330 --> 00:26:00,290
particularly challenging task for

00:25:57,290 --> 00:26:02,210
Microsoft because it might be in support

00:26:00,290 --> 00:26:05,300
design decisions they made in how they

00:26:02,210 --> 00:26:09,080
filled windows this is awful think all

00:26:05,300 --> 00:26:16,340
the registry is nightmare tryna get that

00:26:09,080 --> 00:26:17,840
figured out for someone okay are there a

00:26:16,340 --> 00:26:22,060
number of tools showing up from third

00:26:17,840 --> 00:26:24,530
parties in in terms of graphical

00:26:22,060 --> 00:26:28,220
manipulation all I'm you demonstrating

00:26:24,530 --> 00:26:30,830
today's command line but there's also

00:26:28,220 --> 00:26:32,930
orchestrated tools which are getting

00:26:30,830 --> 00:26:34,730
rich with mates all i'll be showing you

00:26:32,930 --> 00:26:37,010
starting a single container when you

00:26:34,730 --> 00:26:38,990
have a whole host of containers working

00:26:37,010 --> 00:26:41,090
together talking over the network with

00:26:38,990 --> 00:26:43,490
each other to solve some issue you need

00:26:41,090 --> 00:26:46,280
some tools to manage all that Cooper net

00:26:43,490 --> 00:26:48,770
is is a very good tool that is maturing

00:26:46,280 --> 00:26:51,200
in that area in fact I just came out the

00:26:48,770 --> 00:26:55,580
previous our phone talk on coo brunei

00:26:51,200 --> 00:26:58,580
days so if you missed that try and get

00:26:55,580 --> 00:27:00,610
the slides it's a really useful to it is

00:26:58,580 --> 00:27:03,940
done by Google and it's being

00:27:00,610 --> 00:27:07,850
contributed to the open source world

00:27:03,940 --> 00:27:10,790
where's dr. being used well I'm from HP

00:27:07,850 --> 00:27:13,340
and i can tell you an eight within our

00:27:10,790 --> 00:27:16,760
own corporate ID world we have people

00:27:13,340 --> 00:27:20,480
developing lots of apps using did dr. it

00:27:16,760 --> 00:27:22,119
is is still in the development phase our

00:27:20,480 --> 00:27:26,259
corporate ID has

00:27:22,119 --> 00:27:29,169
as provided us at registry wherever I

00:27:26,259 --> 00:27:31,029
developers can tick containers that may

00:27:29,169 --> 00:27:32,859
be useful to others and make them

00:27:31,029 --> 00:27:34,689
available in that registry so they can

00:27:32,859 --> 00:27:38,709
be shared within the corporation so it

00:27:34,689 --> 00:27:40,419
is a progress one of the abscess being

00:27:38,709 --> 00:27:42,669
moved over is the internal that we have

00:27:40,419 --> 00:27:44,829
an interim directory operate can find

00:27:42,669 --> 00:27:46,569
out information about people who work

00:27:44,829 --> 00:27:50,649
where they work and blew their boxes and

00:27:46,569 --> 00:27:54,399
all as well now many many other players

00:27:50,649 --> 00:27:58,539
like eBay Spotify are primarily using

00:27:54,399 --> 00:28:02,769
docker in the role of making it easy to

00:27:58,539 --> 00:28:05,439
move applications from the development

00:28:02,769 --> 00:28:06,969
world into a world of the test world and

00:28:05,439 --> 00:28:10,829
solving the problems we've been talking

00:28:06,969 --> 00:28:14,079
about and they're in various stages of

00:28:10,829 --> 00:28:15,969
testing and deployment of dr. indecent

00:28:14,079 --> 00:28:19,389
worlds now talk a little bit about

00:28:15,969 --> 00:28:22,209
Google Cubs CTF I now strictly speaking

00:28:19,389 --> 00:28:24,519
this is a talker but it is Google's

00:28:22,209 --> 00:28:28,239
version of equivalent functionality

00:28:24,519 --> 00:28:30,369
which they have done long before dr.

00:28:28,239 --> 00:28:33,189
existed so they've been doing this for

00:28:30,369 --> 00:28:35,559
years but it isn't strictly doctor but

00:28:33,189 --> 00:28:38,529
it is close enough that you can learn

00:28:35,559 --> 00:28:44,679
some things for it what is it lmgtfy

00:28:38,529 --> 00:28:46,989
stand for them you know okay you hear

00:28:44,679 --> 00:28:49,419
that it says let me container eyes that

00:28:46,989 --> 00:28:53,139
for you there their whole worldview is

00:28:49,419 --> 00:28:55,809
moving as much as possible to the

00:28:53,139 --> 00:28:59,229
Container role and then be quite

00:28:55,809 --> 00:29:01,869
successful in that they say now that all

00:28:59,229 --> 00:29:05,769
the services they provide today are not

00:29:01,869 --> 00:29:09,129
beer containers title search includes

00:29:05,769 --> 00:29:11,259
mail that include the google docs etc

00:29:09,129 --> 00:29:13,270
all that and they better we use those

00:29:11,259 --> 00:29:17,770
you're using containers in

00:29:13,270 --> 00:29:19,420
back in there they say that they started

00:29:17,770 --> 00:29:21,790
over three thousand containers every

00:29:19,420 --> 00:29:24,190
second betweens over two billion to

00:29:21,790 --> 00:29:26,920
faders a week that obviously these are

00:29:24,190 --> 00:29:29,590
probably very not short-lived containers

00:29:26,920 --> 00:29:31,690
you know it wouldn't surprise me if the

00:29:29,590 --> 00:29:34,120
architectures you know every time you

00:29:31,690 --> 00:29:36,040
issue that Google search there's a new

00:29:34,120 --> 00:29:38,170
container fired off to service that one

00:29:36,040 --> 00:29:39,970
search and then one is done it's gone

00:29:38,170 --> 00:29:41,380
and the next time you issue a search and

00:29:39,970 --> 00:29:43,780
you could date a fire sign so the

00:29:41,380 --> 00:29:48,180
lifetime of the container maybe seconds

00:29:43,780 --> 00:29:51,460
or so that's my guess but I don't know

00:29:48,180 --> 00:29:55,200
so if you want to learn doctor where do

00:29:51,460 --> 00:29:57,340
you go well dr. just have a really nice

00:29:55,200 --> 00:29:58,990
website where you could go on the web

00:29:57,340 --> 00:30:03,010
without installing any software and a

00:29:58,990 --> 00:30:04,990
machine that later dr. fortune a 99 and

00:30:03,010 --> 00:30:08,620
I've talked about in previous places i

00:30:04,990 --> 00:30:10,750
played with it a lot I had it on my

00:30:08,620 --> 00:30:12,760
slide custard in two days ago and it's

00:30:10,750 --> 00:30:14,920
gone that's website is go don't ask me

00:30:12,760 --> 00:30:18,220
why so you're not even installing some

00:30:14,920 --> 00:30:20,320
time if you've gotta get a linux OS that

00:30:18,220 --> 00:30:22,830
has the dr package is not are you going

00:30:20,320 --> 00:30:22,830

YouTube URL: https://www.youtube.com/watch?v=ZxGAftiblhs


