Title: LinuxFest - How to Build a CD Pipeline for Your Systems
Publication date: 2017-10-18
Playlist: 2017 Videos
Description: 
	This talk is part of the Ohio LinuxFest development track. It was held in Franklin C at 2PM. The speaker is Garrett Honeycutt.
Captions: 
	00:00:01,010 --> 00:00:09,330
so before we get into why who here works

00:00:05,940 --> 00:00:15,330
in a place where other teams have CD

00:00:09,330 --> 00:00:16,710
pipelines such as developers oh I wanted

00:00:15,330 --> 00:00:20,699
to give this talk because I feel that

00:00:16,710 --> 00:00:23,310
many people managing systems have heard

00:00:20,699 --> 00:00:26,279
of CD pipelines but think it's for

00:00:23,310 --> 00:00:27,480
developers or it's too hard or they're

00:00:26,279 --> 00:00:29,760
wondering where to start

00:00:27,480 --> 00:00:32,189
and I hope this encourages encourages

00:00:29,760 --> 00:00:37,140
you to build a pipeline and automate

00:00:32,189 --> 00:00:41,579
more of your systems so the the first

00:00:37,140 --> 00:00:43,140
why is to be able to fail fast when you

00:00:41,579 --> 00:00:45,020
make a change how long do you know

00:00:43,140 --> 00:00:47,760
before it worked

00:00:45,020 --> 00:00:50,550
whoo-hoo here it's it's weeks before

00:00:47,760 --> 00:00:54,170
that the point goes like yeah and can

00:00:50,550 --> 00:00:54,170
you remember what you were doing ago

00:00:54,210 --> 00:01:03,829
how about days before like you make a

00:00:57,719 --> 00:01:03,829
change and see it deployed no one hours

00:01:03,949 --> 00:01:11,790
instantly because they're doing it on

00:01:06,090 --> 00:01:15,270
production so let's let's fail fast

00:01:11,790 --> 00:01:17,670
privately in pre-production and feeling

00:01:15,270 --> 00:01:19,920
fast gives us that feedback while we

00:01:17,670 --> 00:01:22,290
still understand the change and allows

00:01:19,920 --> 00:01:24,659
us to code faster and not while you

00:01:22,290 --> 00:01:27,000
still understand the change is key

00:01:24,659 --> 00:01:29,820
because you're making that's not a

00:01:27,000 --> 00:01:32,280
changes like managing lots of different

00:01:29,820 --> 00:01:34,020
systems to go back like two weeks ago

00:01:32,280 --> 00:01:35,579
and say like why did you do that exact

00:01:34,020 --> 00:01:39,689
thing it's probably going to be

00:01:35,579 --> 00:01:41,130
difficult and being a consultant I get

00:01:39,689 --> 00:01:44,250
to work with lots of different like

00:01:41,130 --> 00:01:46,950
companies and so I see your your get

00:01:44,250 --> 00:01:51,990
commit messages or not get it it's the

00:01:46,950 --> 00:01:57,030
light those those are something right so

00:01:51,990 --> 00:01:59,460
this is an idea of increasing pain as we

00:01:57,030 --> 00:02:02,340
go through the development lifecycle so

00:01:59,460 --> 00:02:05,520
where do we want to find the error right

00:02:02,340 --> 00:02:10,800
like probably not in production with my

00:02:05,520 --> 00:02:13,410
customers and so the faster that we can

00:02:10,800 --> 00:02:14,120
find that you know like that I find the

00:02:13,410 --> 00:02:17,030
error

00:02:14,120 --> 00:02:18,980
but just be just 19 right like that's

00:02:17,030 --> 00:02:22,400
what we want to find it and not because

00:02:18,980 --> 00:02:24,680
all of a sudden the switchboard for the

00:02:22,400 --> 00:02:27,140
call center light lights up and you

00:02:24,680 --> 00:02:31,159
notice it's really exciting the call

00:02:27,140 --> 00:02:37,670
center next door because you drop the

00:02:31,159 --> 00:02:43,370
production database so boring boring

00:02:37,670 --> 00:02:49,120
deployments when you do a deploy are you

00:02:43,370 --> 00:02:49,120
braced for impact is there yeah

00:02:49,420 --> 00:02:55,579
when you do something enough the task

00:02:51,709 --> 00:02:58,190
becomes routine and as far less prone to

00:02:55,579 --> 00:03:00,560
problems we want to strive to fully

00:02:58,190 --> 00:03:06,260
automate abuse tasks and having

00:03:00,560 --> 00:03:08,359
confidence in that automation so once

00:03:06,260 --> 00:03:16,220
once once make these deployments boring

00:03:08,359 --> 00:03:18,919
and not come here has aims whenever they

00:03:16,220 --> 00:03:24,139
deploy something this could go either

00:03:18,919 --> 00:03:28,389
way right yeah who here has that feeling

00:03:24,139 --> 00:03:28,389
and then still does deploys on my Friday

00:03:28,780 --> 00:03:37,669
okay so like putting out fires

00:03:35,590 --> 00:03:41,660
who here spends most of their time

00:03:37,669 --> 00:03:44,930
responding to problems you've got like a

00:03:41,660 --> 00:03:47,120
ticketing system it just keeps growing

00:03:44,930 --> 00:03:49,000
and you spend your time going around

00:03:47,120 --> 00:03:53,989
putting out the fires

00:03:49,000 --> 00:03:56,810
nobody folks who'd rather spend time

00:03:53,989 --> 00:04:00,169
being proactive I would write here all

00:03:56,810 --> 00:04:03,829
day long being proactive is cheaper for

00:04:00,169 --> 00:04:07,660
your business and I would use that to

00:04:03,829 --> 00:04:11,389
get management to invest in automation I

00:04:07,660 --> 00:04:14,989
used to work at an ISP and Seattle

00:04:11,389 --> 00:04:18,260
called speakeasy and I was on team of

00:04:14,989 --> 00:04:21,280
seven systems engineers and we just

00:04:18,260 --> 00:04:25,760
spend all of our time putting out fires

00:04:21,280 --> 00:04:27,160
so we never got to reduce those three

00:04:25,760 --> 00:04:30,190
LDAP systems to they

00:04:27,160 --> 00:04:32,740
- we never got to put in the new like

00:04:30,190 --> 00:04:34,390
monitoring right like we never got to do

00:04:32,740 --> 00:04:36,340
the things that we knew would make life

00:04:34,390 --> 00:04:39,430
easier because we just spent all our

00:04:36,340 --> 00:04:40,950
time like putting out fires like does

00:04:39,430 --> 00:04:45,940
that sound familiar

00:04:40,950 --> 00:04:49,750
yeah and so what we did was we took one

00:04:45,940 --> 00:04:52,180
person me and we made my top priority to

00:04:49,750 --> 00:04:55,090
automate all the things and so I stopped

00:04:52,180 --> 00:04:58,900
looking at tickets I'm sorry guys it

00:04:55,090 --> 00:05:01,450
took a while but after a while we

00:04:58,900 --> 00:05:04,600
weren't just being reactive we were

00:05:01,450 --> 00:05:08,410
being like proactive and we actually

00:05:04,600 --> 00:05:16,300
we're able to start creating products as

00:05:08,410 --> 00:05:18,030
opposed to just a call center and who's

00:05:16,300 --> 00:05:22,060
sort of MTTR

00:05:18,030 --> 00:05:28,360
at CPF if oh so mean time to repair and

00:05:22,060 --> 00:05:30,810
bean sign between failures we talked

00:05:28,360 --> 00:05:33,640
about these two different metrics

00:05:30,810 --> 00:05:37,990
obviously mean mean time to repair is

00:05:33,640 --> 00:05:42,310
what's important as the person that's

00:05:37,990 --> 00:05:43,720
responding to the problem like you know

00:05:42,310 --> 00:05:46,330
that it doesn't matter how long those

00:05:43,720 --> 00:05:48,520
systems were up before then like once

00:05:46,330 --> 00:05:52,960
they're down that's like the iterate and

00:05:48,520 --> 00:05:55,660
so and M TTR by automating your

00:05:52,960 --> 00:05:59,680
deployments with the CD pipeline you can

00:05:55,660 --> 00:06:01,570
drastically decrease MTTR by always

00:05:59,680 --> 00:06:07,270
having the ability to deploy your

00:06:01,570 --> 00:06:09,220
working system right so like you deploy

00:06:07,270 --> 00:06:12,990
something it's broke I can always deploy

00:06:09,220 --> 00:06:12,990
the thing before that that worked

00:06:14,040 --> 00:06:23,740
talking about agility is your department

00:06:19,450 --> 00:06:27,520
the Department of no we can't do that

00:06:23,740 --> 00:06:31,810
that's impossible sure but it will take

00:06:27,520 --> 00:06:36,490
ages who sir these things before right

00:06:31,810 --> 00:06:39,789
you may have even setup we want to be

00:06:36,490 --> 00:06:40,660
there to enable our business and so if

00:06:39,789 --> 00:06:42,730
you can't respond

00:06:40,660 --> 00:06:46,150
quickly to the needs of your business

00:06:42,730 --> 00:06:48,340
you're dragging it down right your

00:06:46,150 --> 00:06:50,770
competitive advantage may hinge on to

00:06:48,340 --> 00:06:53,290
the market and who wants to be seen as

00:06:50,770 --> 00:06:54,670
the bottleneck right like nobody here

00:06:53,290 --> 00:06:56,680
like speak that they work with the

00:06:54,670 --> 00:06:58,900
Department of no like we want to help

00:06:56,680 --> 00:07:02,830
people that's like why we do that work

00:06:58,900 --> 00:07:05,320
that that we do but we're not always

00:07:02,830 --> 00:07:08,620
able to help people and the time that

00:07:05,320 --> 00:07:12,490
they need it and so by automating these

00:07:08,620 --> 00:07:15,880
processes and our CD pipelines we can

00:07:12,490 --> 00:07:17,980
actually get ahead and instead of just

00:07:15,880 --> 00:07:19,720
being reactive actually being able to

00:07:17,980 --> 00:07:22,030
help people when they need help

00:07:19,720 --> 00:07:27,520
instead of saying like yeah that's great

00:07:22,030 --> 00:07:30,220
throwing on that cue of things so

00:07:27,520 --> 00:07:35,370
debugging who here works in an agile

00:07:30,220 --> 00:07:38,590
environment yeah one-week sprints

00:07:35,370 --> 00:07:43,750
two-week Sprint's longer than two weeks

00:07:38,590 --> 00:07:48,370
prints yeah you're probably not spraying

00:07:43,750 --> 00:07:50,920
but okay if you deploy at the end of the

00:07:48,370 --> 00:07:53,500
two weeks sprint you have two weeks of

00:07:50,920 --> 00:07:54,070
changes like queued up so there's a

00:07:53,500 --> 00:07:56,530
problem

00:07:54,070 --> 00:08:01,720
now I'm debugging two weeks worth of

00:07:56,530 --> 00:08:04,780
work right and then if there's the

00:08:01,720 --> 00:08:07,270
problem keeps like going on I might have

00:08:04,780 --> 00:08:10,300
to roll back that two weeks worth of

00:08:07,270 --> 00:08:12,460
work right and now my next spring is

00:08:10,300 --> 00:08:13,270
impacted because I'm still getting the

00:08:12,460 --> 00:08:16,650
last spring

00:08:13,270 --> 00:08:23,710
so I actually deploy who's been there I

00:08:16,650 --> 00:08:27,630
think if you've been doing agile about

00:08:23,710 --> 00:08:29,950
this problem only only Bob can deploy

00:08:27,630 --> 00:08:31,840
like we have to wait for Bob to get back

00:08:29,950 --> 00:08:34,300
from vacation he's the only one here

00:08:31,840 --> 00:08:36,820
that knows how to run the testing or hit

00:08:34,300 --> 00:08:39,460
the deploy it only works from his

00:08:36,820 --> 00:08:42,190
workstation

00:08:39,460 --> 00:08:49,089
who here has maybe worked at a place

00:08:42,190 --> 00:08:51,640
like that who here's been Bob so if

00:08:49,089 --> 00:08:53,690
you're Bob let's let's let's fix that

00:08:51,640 --> 00:08:56,840
today like I hope this

00:08:53,690 --> 00:08:59,870
urges you to go out and build a system

00:08:56,840 --> 00:09:03,590
where anyone can press the button to do

00:08:59,870 --> 00:09:08,810
a test at the ploy that's not just on

00:09:03,590 --> 00:09:14,270
you so let's go over some of the key

00:09:08,810 --> 00:09:18,440
concepts associated with first is a

00:09:14,270 --> 00:09:20,840
pipeline a pipeline is a series of steps

00:09:18,440 --> 00:09:26,170
that we're going to tie together these

00:09:20,840 --> 00:09:26,170
steps can also be referred to as as jobs

00:09:27,760 --> 00:09:34,400
you can link them together and so if one

00:09:32,390 --> 00:09:36,440
passes then the next one runs if it

00:09:34,400 --> 00:09:39,260
passes then the next and you can keep

00:09:36,440 --> 00:09:41,780
that go on so here in our example

00:09:39,260 --> 00:09:44,900
pipeline I put a bunch of pieces

00:09:41,780 --> 00:09:47,210
together I test them at employ them

00:09:44,900 --> 00:09:52,580
maybe different kinds of testing I

00:09:47,210 --> 00:09:59,440
didn't point somewhere else because this

00:09:52,580 --> 00:10:01,580
guy yeah who's seen his like devil face

00:09:59,440 --> 00:10:07,430
if you talk to him long enough you'll

00:10:01,580 --> 00:10:11,330
see it so Jenkins basically monitors

00:10:07,430 --> 00:10:15,050
version control repositories and what

00:10:11,330 --> 00:10:17,870
these changed it runs tests and it just

00:10:15,050 --> 00:10:22,360
adds all these tests together so like

00:10:17,870 --> 00:10:24,740
very simply it's it's a framework to

00:10:22,360 --> 00:10:27,230
initiate and watch for things that

00:10:24,740 --> 00:10:29,570
change and then just want a bunch of

00:10:27,230 --> 00:10:32,240
commands and add them together if the X

00:10:29,570 --> 00:10:36,440
of zero doesn't like life is good to get

00:10:32,240 --> 00:10:39,760
one to the next step there's other tools

00:10:36,440 --> 00:10:43,730
out there such as circle CI bamboo

00:10:39,760 --> 00:10:45,980
teamcity I'm a big fan of like get loud

00:10:43,730 --> 00:10:52,970
they're like you laugh learner stuff is

00:10:45,980 --> 00:10:55,190
really nice determinism right same input

00:10:52,970 --> 00:10:57,710
same output I've got repeatable results

00:10:55,190 --> 00:11:01,040
if I have a system where I can always

00:10:57,710 --> 00:11:04,330
push a node working thing to prod right

00:11:01,040 --> 00:11:04,330
it has to be deterministic

00:11:04,970 --> 00:11:11,460
other key concept is that artifact the

00:11:09,180 --> 00:11:14,160
artifact is all things necessary to

00:11:11,460 --> 00:11:16,050
configure a system so this could be as

00:11:14,160 --> 00:11:18,690
simple as a tarball of your

00:11:16,050 --> 00:11:20,760
configuration code and data but that's

00:11:18,690 --> 00:11:25,170
it's all the things that you need to

00:11:20,760 --> 00:11:29,280
configure that system the artifact must

00:11:25,170 --> 00:11:32,160
be immutable right it never changes once

00:11:29,280 --> 00:11:33,540
you've created that thing we're then

00:11:32,160 --> 00:11:36,240
going to move it through the pipeline

00:11:33,540 --> 00:11:41,070
and so it can't change as it goes

00:11:36,240 --> 00:11:44,000
through recommend recording a hash of

00:11:41,070 --> 00:11:50,670
the artifact within your job so you know

00:11:44,000 --> 00:11:53,820
it's verifiable hasn't changed once you

00:11:50,670 --> 00:11:56,280
start creating these things you have to

00:11:53,820 --> 00:11:58,560
have a place to put them so an artifact

00:11:56,280 --> 00:12:01,560
store this could be as simple as a file

00:11:58,560 --> 00:12:02,160
system with a web front could be s3

00:12:01,560 --> 00:12:04,650
buckets

00:12:02,160 --> 00:12:10,320
it could be specialized software such as

00:12:04,650 --> 00:12:17,100
Nexus or artifactory I've had a lot of

00:12:10,320 --> 00:12:18,750
luck with artifactory it can be a little

00:12:17,100 --> 00:12:21,540
problematic with some things at times

00:12:18,750 --> 00:12:24,300
but overall it's added a lot of great

00:12:21,540 --> 00:12:27,120
functionality for me it supports a ton

00:12:24,300 --> 00:12:31,430
of different types of repositories

00:12:27,120 --> 00:12:33,540
including rpms and PMS Ruby doc earth

00:12:31,430 --> 00:12:37,050
scour restful api

00:12:33,540 --> 00:12:38,460
it can also act as a caching proxy who

00:12:37,050 --> 00:12:41,420
here works in an environment where

00:12:38,460 --> 00:12:44,250
talking to the internet is laughable

00:12:41,420 --> 00:12:46,860
yeah and so if you work in that kind of

00:12:44,250 --> 00:12:51,270
regulated environment having a caching

00:12:46,860 --> 00:12:55,010
proxy for the things I really asked so

00:12:51,270 --> 00:12:57,690
the artifact moves through the pipeline

00:12:55,010 --> 00:13:00,900
individual jobs in your pipeline should

00:12:57,690 --> 00:13:03,270
not check out code and data right so

00:13:00,900 --> 00:13:05,730
every step isn't doing another like git

00:13:03,270 --> 00:13:07,950
pull or something every step is going to

00:13:05,730 --> 00:13:11,730
get that part of fact from the previous

00:13:07,950 --> 00:13:14,340
step and move it through the pipeline we

00:13:11,730 --> 00:13:17,150
do this to ensure that the the same code

00:13:14,340 --> 00:13:18,740
and data goes through the entire process

00:13:17,150 --> 00:13:21,890
you can't short-circuit the process

00:13:18,740 --> 00:13:23,330
right so I've got this pipeline and I

00:13:21,890 --> 00:13:25,520
made a change that it goes through the

00:13:23,330 --> 00:13:27,590
pipeline as opposed to a kind of ghost

00:13:25,520 --> 00:13:29,990
in the pipeline and that i intercepted

00:13:27,590 --> 00:13:38,500
over here and you with it right applied

00:13:29,990 --> 00:13:41,980
to change so now a few tips for your

00:13:38,500 --> 00:13:46,520
config management tooling and focus -

00:13:41,980 --> 00:13:51,050
who here is using it right on here is

00:13:46,520 --> 00:14:07,400
using chef we're using ansible who is

00:13:51,050 --> 00:14:09,200
using our sink guitar so my backgrounds

00:14:07,400 --> 00:14:12,710
with puppets so I'm going to frame this

00:14:09,200 --> 00:14:15,730
in terms of that although these concepts

00:14:12,710 --> 00:14:19,340
hold true for the other CM tools

00:14:15,730 --> 00:14:22,550
absolutely and so that's this concept of

00:14:19,340 --> 00:14:26,990
a control repository that's gonna hold a

00:14:22,550 --> 00:14:29,180
list of all of your modules or code to

00:14:26,990 --> 00:14:32,200
configure the system as well as I like

00:14:29,180 --> 00:14:35,330
your data involved in that system

00:14:32,200 --> 00:14:38,620
there's so it has a file called the

00:14:35,330 --> 00:14:40,850
puppet file that lists all the modules

00:14:38,620 --> 00:14:43,310
ansible has the same thing with

00:14:40,850 --> 00:14:45,350
librarian danceable chef has the same

00:14:43,310 --> 00:14:48,710
thing with Birk shell for policy file

00:14:45,350 --> 00:14:50,870
right so we've got this idea there's a

00:14:48,710 --> 00:14:54,730
place where we list all the things that

00:14:50,870 --> 00:14:57,860
we use as well as all the data necessary

00:14:54,730 --> 00:15:02,600
so whether that's IRA or data bags or

00:14:57,860 --> 00:15:08,320
something like ammo files all that was

00:15:02,600 --> 00:15:12,200
needed to configure our system so let's

00:15:08,320 --> 00:15:16,760
look at what a pipeline actually look

00:15:12,200 --> 00:15:19,010
like first this is to start small so

00:15:16,760 --> 00:15:22,390
start with simple tests and work your

00:15:19,010 --> 00:15:25,520
way toward automating deployments to

00:15:22,390 --> 00:15:27,440
production only deploy to the next

00:15:25,520 --> 00:15:28,810
environment when you're confident in

00:15:27,440 --> 00:15:30,580
your test

00:15:28,810 --> 00:15:33,430
it's it's definitely okay to have a

00:15:30,580 --> 00:15:36,670
manual trigger between maybe deploying

00:15:33,430 --> 00:15:39,370
to dev before you do more tests to

00:15:36,670 --> 00:15:41,380
deploy the staging works up test to the

00:15:39,370 --> 00:15:43,330
ploy to prod right like if you're just

00:15:41,380 --> 00:15:46,270
starting off you probably don't want

00:15:43,330 --> 00:15:48,250
every change to just go to product so

00:15:46,270 --> 00:15:49,960
it's it's it's totally cool of the

00:15:48,250 --> 00:15:54,700
manual something else to press a button

00:15:49,960 --> 00:15:56,980
and work your way into having enough

00:15:54,700 --> 00:15:58,630
trust in your system that your testing

00:15:56,980 --> 00:16:01,030
is good enough that you don't need that

00:15:58,630 --> 00:16:03,820
manual button and you know all those

00:16:01,030 --> 00:16:08,860
tests ran things are good just let it go

00:16:03,820 --> 00:16:11,950
to the next environment as we go through

00:16:08,860 --> 00:16:16,090
the pipeline cost and time to tests will

00:16:11,950 --> 00:16:17,440
rise with every step the amount of time

00:16:16,090 --> 00:16:19,540
it takes to run a test and the

00:16:17,440 --> 00:16:21,850
associated computing costs are going to

00:16:19,540 --> 00:16:24,370
go up with each environment as we get

00:16:21,850 --> 00:16:26,950
toward production and we want to start

00:16:24,370 --> 00:16:28,870
with very simple fast and cheap tests

00:16:26,950 --> 00:16:33,490
right like there's no sense of building

00:16:28,870 --> 00:16:36,310
out some of the flight VMs to say make

00:16:33,490 --> 00:16:42,400
my whole environment before I've done

00:16:36,310 --> 00:16:45,190
simple file like validation right so

00:16:42,400 --> 00:16:47,710
first we're going to create and artifact

00:16:45,190 --> 00:16:49,630
and so we're going to process our list

00:16:47,710 --> 00:16:52,720
of modules we're going to download them

00:16:49,630 --> 00:16:56,170
and all the data create a tarball or

00:16:52,720 --> 00:16:59,860
something similar that makes sense for

00:16:56,170 --> 00:17:03,400
you then we're going to do static

00:16:59,860 --> 00:17:06,600
analysis which is fast so this is things

00:17:03,400 --> 00:17:10,360
like syntax validation style validation

00:17:06,600 --> 00:17:12,310
right those Thurs like to build out

00:17:10,360 --> 00:17:15,370
systems like these are all things that

00:17:12,310 --> 00:17:18,430
can be done faster than sheep-like

00:17:15,370 --> 00:17:20,590
again we're not going to start running

00:17:18,430 --> 00:17:29,680
functional tests against our system to

00:17:20,590 --> 00:17:33,070
find out that after we've done that that

00:17:29,680 --> 00:17:35,050
simple fast like testing we want to save

00:17:33,070 --> 00:17:38,290
the artifacts and upload it to the

00:17:35,050 --> 00:17:40,150
artefact store so just adding the build

00:17:38,290 --> 00:17:42,760
number they like to the name

00:17:40,150 --> 00:17:45,960
so tools like jinkins and other chilling

00:17:42,760 --> 00:17:47,800
will have some ID for the build

00:17:45,960 --> 00:17:52,960
suggesting that in the name of your

00:17:47,800 --> 00:17:56,110
artifacts you can reference it and don't

00:17:52,960 --> 00:17:59,350
forget start testing our config

00:17:56,110 --> 00:18:03,010
management so tools such as r-spec

00:17:59,350 --> 00:18:05,410
puppet and chef spec to ensure that the

00:18:03,010 --> 00:18:08,290
config management code bolt is compile

00:18:05,410 --> 00:18:11,350
for each node and produce the expected

00:18:08,290 --> 00:18:13,180
outcome so for our spec puppet this

00:18:11,350 --> 00:18:16,090
would test that the classes have been a

00:18:13,180 --> 00:18:21,010
catalog for each role and the catalog

00:18:16,090 --> 00:18:25,780
can be compiled so I'm testing here that

00:18:21,010 --> 00:18:29,590
my ability to configure the state of the

00:18:25,780 --> 00:18:33,610
system is going to work after that I

00:18:29,590 --> 00:18:36,370
might be functional testing per roll so

00:18:33,610 --> 00:18:37,750
I might have many web servers app

00:18:36,370 --> 00:18:40,120
servers and databases

00:18:37,750 --> 00:18:44,110
I don't they have three goals web app

00:18:40,120 --> 00:18:48,540
and DB and so for every role I want to

00:18:44,110 --> 00:18:48,540
build a system and verify its State

00:18:49,350 --> 00:18:56,230
there are multiple technologies for this

00:18:52,540 --> 00:18:58,780
I use whatever technology you actually

00:18:56,230 --> 00:19:00,730
use in production so whether that's VMs

00:18:58,780 --> 00:19:03,670
or bare metal or containers or cloud

00:19:00,730 --> 00:19:12,180
services you know do the thing that

00:19:03,670 --> 00:19:12,180
you're gonna use in production and use a

00:19:13,230 --> 00:19:21,400
tool that can help with this is bigger

00:19:16,450 --> 00:19:25,470
I use paper for local development but it

00:19:21,400 --> 00:19:25,470
also works like you asked

00:19:26,220 --> 00:19:36,780
today awesome anyone using terraform ok

00:19:33,460 --> 00:19:40,500
so folks this is another great tool by

00:19:36,780 --> 00:19:43,570
Kashi Corp it allows you to express

00:19:40,500 --> 00:19:46,480
infrastructure as code using a simple

00:19:43,570 --> 00:19:51,010
DSL that has a dependency graph it's a

00:19:46,480 --> 00:19:53,679
build like notes load balancers DNS it

00:19:51,010 --> 00:19:57,130
also works with many api's

00:19:53,679 --> 00:19:59,320
I use it to define my github repos and

00:19:57,130 --> 00:20:03,750
who has access to on them there with

00:19:59,320 --> 00:20:05,980
books it's very useful as you need to

00:20:03,750 --> 00:20:09,250
functionally test your systems you have

00:20:05,980 --> 00:20:11,710
to have a way to break those systems to

00:20:09,250 --> 00:20:14,440
life and so terraform can be a way to

00:20:11,710 --> 00:20:16,480
defy here's the networks and systems

00:20:14,440 --> 00:20:21,880
that need to be brought up so that I can

00:20:16,480 --> 00:20:25,799
run testing on we want to build a system

00:20:21,880 --> 00:20:30,820
and then verify its state and so we've

00:20:25,799 --> 00:20:33,070
built out some some systems maybe build

00:20:30,820 --> 00:20:34,750
out the web app and TV systems and how

00:20:33,070 --> 00:20:38,500
we gotta verify it they're actually done

00:20:34,750 --> 00:20:42,279
correctly it's all bit of my recommend

00:20:38,500 --> 00:20:44,500
for that it's server spec it's great for

00:20:42,279 --> 00:20:47,139
this kind of like functional testing you

00:20:44,500 --> 00:20:48,669
can test against systems remotely so you

00:20:47,139 --> 00:20:51,159
don't have to have any special software

00:20:48,669 --> 00:20:57,250
on the don't being tested it just

00:20:51,159 --> 00:20:59,440
connects using SSH or a test that the

00:20:57,250 --> 00:21:01,299
system is configured correctly and it's

00:20:59,440 --> 00:21:03,220
like nah stick to how the system was

00:21:01,299 --> 00:21:05,559
configured so it doesn't matter if

00:21:03,220 --> 00:21:08,590
you're using like what's the angel you

00:21:05,559 --> 00:21:11,889
have or if it's shell scripts or like

00:21:08,590 --> 00:21:16,210
what do you got going on goosal system

00:21:11,889 --> 00:21:22,000
it just verifies that it's it's state it

00:21:16,210 --> 00:21:31,240
uses would be our spec matchers who here

00:21:22,000 --> 00:21:33,429
has never seen service so here's here's

00:21:31,240 --> 00:21:37,120
some example code should all simple it

00:21:33,429 --> 00:21:40,750
is right so here I'm saying package

00:21:37,120 --> 00:21:42,880
httpd it should be installed right the

00:21:40,750 --> 00:21:46,570
service should be running it should be

00:21:42,880 --> 00:21:49,960
set to start at good time and Poirier

00:21:46,570 --> 00:21:52,840
should be listening right and so here i

00:21:49,960 --> 00:22:00,100
can i I can describe what the system I

00:21:52,840 --> 00:22:01,539
should do and be able to verify it can

00:22:00,100 --> 00:22:03,909
also do things that are more in-depth

00:22:01,539 --> 00:22:06,170
such as project smashing of config files

00:22:03,909 --> 00:22:09,050
kernel settings firewall

00:22:06,170 --> 00:22:11,180
etc but it's a way for me to verify the

00:22:09,050 --> 00:22:13,250
state on my system and again this is

00:22:11,180 --> 00:22:20,450
totally agnostic to how the system was

00:22:13,250 --> 00:22:23,390
built then we'll move on to functional

00:22:20,450 --> 00:22:26,300
testing multiple nodes and so we've

00:22:23,390 --> 00:22:30,080
tested a system in isolation so I can

00:22:26,300 --> 00:22:32,210
test save my app server in isolation but

00:22:30,080 --> 00:22:33,710
that doesn't tell me I'm not the

00:22:32,210 --> 00:22:34,910
business of making app servers that

00:22:33,710 --> 00:22:36,950
might be in the business of making like

00:22:34,910 --> 00:22:39,200
a website networks right and so I have

00:22:36,950 --> 00:22:45,440
to test my whole stack together to see

00:22:39,200 --> 00:22:47,360
that the service works when you do this

00:22:45,440 --> 00:22:48,830
type of functional testing we always

00:22:47,360 --> 00:22:51,740
want to test from the point of view of

00:22:48,830 --> 00:22:54,320
the consumer right so if you sell things

00:22:51,740 --> 00:22:56,150
online your test should show that you

00:22:54,320 --> 00:22:58,940
can put something into a cart and make a

00:22:56,150 --> 00:23:02,480
purchase right like you some things

00:22:58,940 --> 00:23:04,790
online the test isn't it's boring like

00:23:02,480 --> 00:23:08,540
listening that's that's cool to know

00:23:04,790 --> 00:23:10,970
that your web server does what it's

00:23:08,540 --> 00:23:13,250
supposed to do like before I go to

00:23:10,970 --> 00:23:15,860
production I want to test is the service

00:23:13,250 --> 00:23:19,070
I'm running working for the point of

00:23:15,860 --> 00:23:22,310
view of where he uses my service so

00:23:19,070 --> 00:23:24,680
another example of that is my friends

00:23:22,310 --> 00:23:27,560
company has a product that does logging

00:23:24,680 --> 00:23:29,900
for security compliance so they want to

00:23:27,560 --> 00:23:32,090
log something and then see that the log

00:23:29,900 --> 00:23:34,520
shows up on their log server within a

00:23:32,090 --> 00:23:36,170
certain time frame right like yes that's

00:23:34,520 --> 00:23:39,020
their business so that's what they test

00:23:36,170 --> 00:23:41,720
right so you have to figure out what is

00:23:39,020 --> 00:23:43,250
the service I'm providing what does it

00:23:41,720 --> 00:23:44,960
do from that point of view of the

00:23:43,250 --> 00:23:50,330
consumer and I've already test that

00:23:44,960 --> 00:23:53,600
exercise that there's tons of tools

00:23:50,330 --> 00:23:58,070
available some examples of things like

00:23:53,600 --> 00:24:00,920
selenium and cucumber shell scripts

00:23:58,070 --> 00:24:04,460
custom code you know work work with you

00:24:00,920 --> 00:24:06,230
is developing your code it doesn't

00:24:04,460 --> 00:24:08,510
really matter which which tool we could

00:24:06,230 --> 00:24:10,490
use here so don't spend a lot of time

00:24:08,510 --> 00:24:12,950
like picking the one you're gonna write

00:24:10,490 --> 00:24:15,230
all your tests like shell scripts think

00:24:12,950 --> 00:24:18,780
that one curl that's awesome just just

00:24:15,230 --> 00:24:20,490
write the test what's important is the

00:24:18,780 --> 00:24:28,380
focus on testing your out as it's used

00:24:20,490 --> 00:24:31,410
by your customers so monitoring this is

00:24:28,380 --> 00:24:35,550
how we test things in production right

00:24:31,410 --> 00:24:39,630
so if who's who's monitoring things in

00:24:35,550 --> 00:24:43,800
Russian good who has the same monitoring

00:24:39,630 --> 00:24:47,220
going in pre-production a lot of folks

00:24:43,800 --> 00:24:49,260
so we we definitely want to do that we

00:24:47,220 --> 00:24:50,910
don't want to make a change that goes

00:24:49,260 --> 00:24:53,100
through our pipeline and as soon as it's

00:24:50,910 --> 00:24:55,260
deployed just like lights up the

00:24:53,100 --> 00:24:56,130
monitoring system right and like others

00:24:55,260 --> 00:25:00,960
everybody

00:24:56,130 --> 00:25:02,250
so absolutely monitor the same

00:25:00,960 --> 00:25:03,740
monitoring you're doing in production

00:25:02,250 --> 00:25:06,360
should be done in pre-production

00:25:03,740 --> 00:25:10,650
obviously those alerts shouldn't should

00:25:06,360 --> 00:25:19,980
should be different start up some based

00:25:10,650 --> 00:25:24,000
on other types of testing to consider

00:25:19,980 --> 00:25:27,360
his performance testing right does

00:25:24,000 --> 00:25:31,170
anyone do performance testing a couple

00:25:27,360 --> 00:25:33,630
folks this environment could potentially

00:25:31,170 --> 00:25:35,640
be costly as you want to mirror your

00:25:33,630 --> 00:25:37,400
production environment as closely as

00:25:35,640 --> 00:25:42,180
possible

00:25:37,400 --> 00:25:45,240
who here has essays on performance a few

00:25:42,180 --> 00:25:48,750
folks so this might be I provide a

00:25:45,240 --> 00:25:50,370
website okay and then other folks go the

00:25:48,750 --> 00:25:52,650
extra step and say I provide a website

00:25:50,370 --> 00:25:59,850
and it will load in your browser or this

00:25:52,650 --> 00:26:04,050
many seconds right so that's like I used

00:25:59,850 --> 00:26:06,180
to work for a company that made hardware

00:26:04,050 --> 00:26:09,240
store systems so they had a standing

00:26:06,180 --> 00:26:13,290
role no release can make the system

00:26:09,240 --> 00:26:15,540
slower right and so of course we're

00:26:13,290 --> 00:26:18,680
going to do performance testing when

00:26:15,540 --> 00:26:21,990
you're doing that you can do things like

00:26:18,680 --> 00:26:25,410
have like a threshold for certain

00:26:21,990 --> 00:26:28,500
metrics so whether that's how long it

00:26:25,410 --> 00:26:30,870
takes for the page to load or you know

00:26:28,500 --> 00:26:31,779
for your where you go through like

00:26:30,870 --> 00:26:34,809
whatever those metrics

00:26:31,779 --> 00:26:37,090
are you can set thresholds and if your

00:26:34,809 --> 00:26:40,149
systems hit that that we're going to

00:26:37,090 --> 00:26:43,179
call that job has failed so even though

00:26:40,149 --> 00:26:45,369
you brought up your application stack

00:26:43,179 --> 00:26:52,960
and everything works it's not hitting

00:26:45,369 --> 00:26:55,330
that threshold also security testing

00:26:52,960 --> 00:26:57,279
right like when something is already in

00:26:55,330 --> 00:26:59,769
production isn't the time we should find

00:26:57,279 --> 00:27:04,149
out I'm probably old software this

00:26:59,769 --> 00:27:08,739
should be pageantry suggest using tools

00:27:04,149 --> 00:27:13,570
such as messes a wast and open scout or

00:27:08,739 --> 00:27:21,789
s cap who here works in a regulated

00:27:13,570 --> 00:27:27,129
environment PCI Sox Giza all you have to

00:27:21,789 --> 00:27:34,259
protect PII have like some sort towards

00:27:27,129 --> 00:27:36,940
an environment with no compliance great

00:27:34,259 --> 00:27:40,019
you still want to know what's what's

00:27:36,940 --> 00:27:42,519
going on with your system is for sure a

00:27:40,019 --> 00:27:47,229
tool that I really like for this is

00:27:42,519 --> 00:27:49,169
inspect by chef it looks just like the

00:27:47,229 --> 00:27:55,749
server spec code I should have before

00:27:49,169 --> 00:27:59,469
allows you to also group things by

00:27:55,749 --> 00:28:03,879
compliance and so this can be to help

00:27:59,469 --> 00:28:06,629
you take that security policy like stack

00:28:03,879 --> 00:28:10,419
of like documents and turn them into

00:28:06,629 --> 00:28:12,519
actionable testable code right so

00:28:10,419 --> 00:28:14,499
instead of security saying that doesn't

00:28:12,519 --> 00:28:17,409
comply with you know this thing that's

00:28:14,499 --> 00:28:21,839
in a PDF over here now I get testable

00:28:17,409 --> 00:28:21,839
code that just says my system complies

00:28:24,570 --> 00:28:30,929
so let's talk about what to the point so

00:28:27,609 --> 00:28:33,190
code and dick and data to maintain state

00:28:30,929 --> 00:28:35,109
we're likely to employ in configuration

00:28:33,190 --> 00:28:38,159
management code and then that data and

00:28:35,109 --> 00:28:43,529
we're getting your state applause system

00:28:38,159 --> 00:28:43,529
we can also just deploy entire systems

00:28:43,980 --> 00:28:50,320
ideally we would never catch a system or

00:28:47,110 --> 00:28:52,180
type a command into it we were just

00:28:50,320 --> 00:28:57,910
building new systems and swap them out

00:28:52,180 --> 00:29:01,390
for the bullets so how does how does the

00:28:57,910 --> 00:29:05,190
pipeline start we can watch the control

00:29:01,390 --> 00:29:07,810
repo for changes or any of our

00:29:05,190 --> 00:29:10,450
configuration management code those

00:29:07,810 --> 00:29:16,510
repos change and we can use that to

00:29:10,450 --> 00:29:18,550
trigger our build pipeline so let's

00:29:16,510 --> 00:29:20,830
let's switch gears here for a moment and

00:29:18,550 --> 00:29:23,380
talk about module development and so

00:29:20,830 --> 00:29:25,780
this is this isn't talked about

00:29:23,380 --> 00:29:30,970
developing individual modules or

00:29:25,780 --> 00:29:32,500
cookbooks or play bugs that's news so

00:29:30,970 --> 00:29:35,380
let's talk about what to test in an

00:29:32,500 --> 00:29:38,700
individual module your module should

00:29:35,380 --> 00:29:42,340
test syntax validation

00:29:38,700 --> 00:29:45,850
style unit tests such as I respect

00:29:42,340 --> 00:29:49,420
puppet or suspect and functional tests

00:29:45,850 --> 00:29:51,850
so things like the inspect or server

00:29:49,420 --> 00:29:55,270
spec or your shell scripts however you

00:29:51,850 --> 00:29:58,870
test that system functionally who here

00:29:55,270 --> 00:30:02,050
writes individual modules or cookbooks

00:29:58,870 --> 00:30:04,330
cetera for their sampling right

00:30:02,050 --> 00:30:06,340
how many people like let's like keep the

00:30:04,330 --> 00:30:12,130
hands up and give you a syntax

00:30:06,340 --> 00:30:15,640
foundation about style units us that you

00:30:12,130 --> 00:30:19,980
do functional testing alright so for

00:30:15,640 --> 00:30:22,570
lots of poses it's just that last piece

00:30:19,980 --> 00:30:25,510
someone that maintains a ton of these

00:30:22,570 --> 00:30:31,620
type of modules having that will really

00:30:25,510 --> 00:30:31,620
help you get that confidence to change

00:30:31,920 --> 00:30:37,810
so how do we test those individual

00:30:34,780 --> 00:30:40,870
modules or cookbooks well we could reuse

00:30:37,810 --> 00:30:43,750
or CD tool links such as my chicken into

00:30:40,870 --> 00:30:46,630
it lab there's other tools out there

00:30:43,750 --> 00:30:53,050
like Travis CI because they never talked

00:30:46,630 --> 00:30:54,640
to Travis before I'm a big fan of it if

00:30:53,050 --> 00:30:55,399
you're testing for Windows there's a

00:30:54,640 --> 00:31:01,869
note

00:30:55,399 --> 00:31:05,239
out there who who here runs in like a

00:31:01,869 --> 00:31:15,379
multi-platform environment so if you're

00:31:05,239 --> 00:31:18,129
putting like with with these types of

00:31:15,379 --> 00:31:22,159
tools that they allow for matrix testing

00:31:18,129 --> 00:31:25,549
so like a puppet

00:31:22,159 --> 00:31:27,649
perspective my models run against

00:31:25,549 --> 00:31:29,779
multiple versions of a puppet as well as

00:31:27,649 --> 00:31:32,089
different versions of Rudy and so I have

00:31:29,779 --> 00:31:34,609
to create a matrix to test all those

00:31:32,089 --> 00:31:35,690
possible combinations all right so if

00:31:34,609 --> 00:31:37,489
you're doing a visual audible

00:31:35,690 --> 00:31:40,669
development you probably have something

00:31:37,489 --> 00:31:42,499
similar even if it's just I want to test

00:31:40,669 --> 00:31:45,529
the thing I've on and the thing I know

00:31:42,499 --> 00:31:53,839
I'm gonna upgrade to like later and make

00:31:45,529 --> 00:31:58,279
sure that we want our CD tooling to

00:31:53,839 --> 00:32:02,989
report back into that's going get used

00:31:58,279 --> 00:32:06,619
to use for light change so if you're

00:32:02,989 --> 00:32:11,440
using github or gitlab or bitbucket or

00:32:06,619 --> 00:32:15,739
some tool for your your control

00:32:11,440 --> 00:32:17,979
repositories we want our CD to link to

00:32:15,739 --> 00:32:22,339
tie it in to that so this is an example

00:32:17,979 --> 00:32:25,219
of github and they're talking to Travis

00:32:22,339 --> 00:32:26,089
like CI so here's somebody sent me a

00:32:25,219 --> 00:32:28,669
pull request

00:32:26,089 --> 00:32:31,249
Travis automatically ran and tested the

00:32:28,669 --> 00:32:33,919
whole matrix of things I care about and

00:32:31,249 --> 00:32:36,129
it came back green so there could be

00:32:33,919 --> 00:32:38,989
lots of reasons why I don't merge this

00:32:36,129 --> 00:32:41,210
like MIT like maybe all the tests pass

00:32:38,989 --> 00:32:44,359
they did not documentation or something

00:32:41,210 --> 00:32:46,759
like I feel a lot better about this then

00:32:44,359 --> 00:32:50,359
I get a pull request to make a change

00:32:46,759 --> 00:32:54,139
and failed the test rate and so this can

00:32:50,359 --> 00:32:59,929
be a way to quickly iterate over a

00:32:54,139 --> 00:33:02,119
problem while working who here like uses

00:32:59,929 --> 00:33:04,779
github or or a similar tool with this

00:33:02,119 --> 00:33:04,779
functionality

00:33:06,030 --> 00:33:12,870
who like makes a change and that they I

00:33:09,800 --> 00:33:15,210
like pump their head over their cubicle

00:33:12,870 --> 00:33:18,600
like hey I'm doing this thing or like

00:33:15,210 --> 00:33:23,190
you or worse you're like it watching my

00:33:18,600 --> 00:33:24,480
pants like that right yeah so like these

00:33:23,190 --> 00:33:32,180
type of troubles without my help you

00:33:24,480 --> 00:33:34,890
know so so in our control repository

00:33:32,180 --> 00:33:38,090
again this is a model of a puppet file

00:33:34,890 --> 00:33:41,610
but if you're using library and ansible

00:33:38,090 --> 00:33:44,640
or shelf policy file they'll basically

00:33:41,610 --> 00:33:47,280
look like this I got some file where and

00:33:44,640 --> 00:33:51,570
I list all of my modules I say where to

00:33:47,280 --> 00:33:53,790
get them at what version for upstream

00:33:51,570 --> 00:33:58,860
modules so these are modules that you

00:33:53,790 --> 00:34:02,630
know own suggest like tagging that so

00:33:58,860 --> 00:34:07,230
you're pinning a tag so this is a

00:34:02,630 --> 00:34:10,110
release of that that software if the

00:34:07,230 --> 00:34:11,820
people aren't Dallas semantic version

00:34:10,110 --> 00:34:14,190
are you attacking you might have this

00:34:11,820 --> 00:34:15,950
like I get Commission the flight this is

00:34:14,190 --> 00:34:19,590
that point in time but I want my code

00:34:15,950 --> 00:34:22,290
for your internal modules though I would

00:34:19,590 --> 00:34:24,270
suggest to always work off the master

00:34:22,290 --> 00:34:27,210
and that way you don't have to do a lot

00:34:24,270 --> 00:34:30,750
of releases for your like private

00:34:27,210 --> 00:34:33,270
modules this this works because be able

00:34:30,750 --> 00:34:35,820
to artifact that's immutable so we're

00:34:33,270 --> 00:34:39,420
only going to compile and download all

00:34:35,820 --> 00:34:41,190
these modules once put them into an

00:34:39,420 --> 00:34:43,500
artifact and then move that artifact

00:34:41,190 --> 00:34:45,870
through the pipeline and so that's why

00:34:43,500 --> 00:34:47,880
we get out and master because not every

00:34:45,870 --> 00:34:50,220
piece of the pipeline is doing a good

00:34:47,880 --> 00:34:52,920
pull and getting potentially a different

00:34:50,220 --> 00:34:57,930
data right like I can I can pile all

00:34:52,920 --> 00:35:00,330
that data once by having master here

00:34:57,930 --> 00:35:02,450
you'll just save yourself having a lot

00:35:00,330 --> 00:35:02,450
of

00:35:08,339 --> 00:35:24,480
in terms of artifacts so that'll be I'm

00:35:20,560 --> 00:35:28,180
speaking in terms of having a CD system

00:35:24,480 --> 00:35:30,790
for or managing systems and so a lot of

00:35:28,180 --> 00:35:32,140
that will just come down to what type of

00:35:30,790 --> 00:35:35,020
assistance you have and what your

00:35:32,140 --> 00:35:37,780
familiarity is so it's something like

00:35:35,020 --> 00:35:40,750
exploiting a tarball the best way for

00:35:37,780 --> 00:35:45,819
you or it's using like an RPM better

00:35:40,750 --> 00:35:48,369
right and so both both ways work like

00:35:45,819 --> 00:35:50,079
just fine it's it's pick the one that

00:35:48,369 --> 00:35:53,170
you're keen it was like comfortable with

00:35:50,079 --> 00:35:55,030
I will say that how that word effect

00:35:53,170 --> 00:35:58,300
gets made obviously has to be in the

00:35:55,030 --> 00:36:01,720
code and a tool that can help you if you

00:35:58,300 --> 00:36:03,970
decide to package as fpm fpm can take a

00:36:01,720 --> 00:36:12,339
directory structure and turn that into

00:36:03,970 --> 00:36:15,190
many different so we talked about where

00:36:12,339 --> 00:36:18,430
the pipeline starts so where to put the

00:36:15,190 --> 00:36:20,829
testing scripts and so this testing that

00:36:18,430 --> 00:36:24,400
we like we want to keep close to the

00:36:20,829 --> 00:36:26,260
code so in the control repo the pipeline

00:36:24,400 --> 00:36:28,630
tools like Jenkins you just want to

00:36:26,260 --> 00:36:31,540
script and that skirt should be kept in

00:36:28,630 --> 00:36:34,599
your control we hope that way we're not

00:36:31,540 --> 00:36:36,790
modifying things in Jenkins it's just

00:36:34,599 --> 00:36:39,190
like running way that the scripts are in

00:36:36,790 --> 00:36:41,440
our code it's really easy with tools

00:36:39,190 --> 00:36:44,589
like Jenkins to put a bunch of things in

00:36:41,440 --> 00:36:46,800
them that doesn't live in their code and

00:36:44,589 --> 00:36:49,540
then if that changes nobody really knows

00:36:46,800 --> 00:36:51,930
tools like git lab or really my great

00:36:49,540 --> 00:36:55,780
about this because they force you to put

00:36:51,930 --> 00:36:58,750
all that configuration of your pipeline

00:36:55,780 --> 00:37:02,230
in code and that's why I like those

00:36:58,750 --> 00:37:05,290
tools those are the roots of the term

00:37:02,230 --> 00:37:07,349
information radiator right so we want to

00:37:05,290 --> 00:37:12,490
radiate information and let people know

00:37:07,349 --> 00:37:15,099
what's happening tools like Jenkins are

00:37:12,490 --> 00:37:17,380
really any tools going to help you with

00:37:15,099 --> 00:37:20,740
a pipeline of generally has of you that

00:37:17,380 --> 00:37:21,680
visualizes that pipeline and lets you

00:37:20,740 --> 00:37:24,710
know if

00:37:21,680 --> 00:37:26,210
something failed so here's here's an

00:37:24,710 --> 00:37:29,809
example of that

00:37:26,210 --> 00:37:35,210
like I suggest you put this on like a

00:37:29,809 --> 00:37:37,550
big TV in your team's spot or like by

00:37:35,210 --> 00:37:40,040
the coffee machine is good I like let

00:37:37,550 --> 00:37:43,309
let people know you know here's the

00:37:40,040 --> 00:37:50,690
bills that we're doing and everyone can

00:37:43,309 --> 00:37:53,000
see like when they break this is this is

00:37:50,690 --> 00:37:56,200
from against this is what about plugins

00:37:53,000 --> 00:37:59,390
for tickets but all the tools will have

00:37:56,200 --> 00:38:02,300
differently some kind of you can like

00:37:59,390 --> 00:38:04,430
put the important thing here is that it

00:38:02,300 --> 00:38:07,190
doesn't just live as like a link that

00:38:04,430 --> 00:38:09,290
you can go to but actually like put a

00:38:07,190 --> 00:38:12,859
screen somewhere where everyone can see

00:38:09,290 --> 00:38:17,720
this something else you sort of like

00:38:12,859 --> 00:38:20,930
chops yeah just doing that not not not

00:38:17,720 --> 00:38:24,079
something folks here so we want our seed

00:38:20,930 --> 00:38:27,470
to links such as chickens to tie in

00:38:24,079 --> 00:38:31,400
George actually so things like telegram

00:38:27,470 --> 00:38:34,130
or slack or IRC right like when

00:38:31,400 --> 00:38:36,410
something happens I could send an email

00:38:34,130 --> 00:38:39,079
out to maybe you still like do that but

00:38:36,410 --> 00:38:42,609
let's put it into chat so everybody can

00:38:39,079 --> 00:38:44,990
see something just broke or something

00:38:42,609 --> 00:38:49,270
succeeded but like we don't know about

00:38:44,990 --> 00:38:49,270
it it's like a right where we're working

00:38:50,319 --> 00:38:54,470
lots of folks are just like these days

00:38:52,579 --> 00:38:56,930
I'm not excited about the proprietary

00:38:54,470 --> 00:38:59,990
technology but does let you integrate

00:38:56,930 --> 00:39:04,250
with other services although you know

00:38:59,990 --> 00:39:09,380
IRC works too well take talk a bit about

00:39:04,250 --> 00:39:11,450
culture breaking the build is okay the

00:39:09,380 --> 00:39:14,180
whole reason we build the CD pipeline

00:39:11,450 --> 00:39:16,849
was so that we could break the build and

00:39:14,180 --> 00:39:21,140
not break production that's why it is

00:39:16,849 --> 00:39:25,900
this I was once working a company and

00:39:21,140 --> 00:39:28,430
they had a huge mounted like game fish

00:39:25,900 --> 00:39:30,799
as massive thing that was like the size

00:39:28,430 --> 00:39:34,110
of the cubicle and what you broke the

00:39:30,799 --> 00:39:37,830
build someone would put this large fish

00:39:34,110 --> 00:39:41,700
in your cube it was used to shame the

00:39:37,830 --> 00:39:43,320
person that had done that it's me nuts

00:39:41,700 --> 00:39:46,140
that's that's that's an example of

00:39:43,320 --> 00:39:48,930
broken culture and like bad culture like

00:39:46,140 --> 00:39:51,720
again we we build these systems because

00:39:48,930 --> 00:39:53,430
we want to find the failures and people

00:39:51,720 --> 00:39:55,800
want to be able to make changes quickly

00:39:53,430 --> 00:39:58,590
and know is that change like bitter bad

00:39:55,800 --> 00:40:01,530
before it goes to production so when

00:39:58,590 --> 00:40:03,060
somebody breaks the bills we want

00:40:01,530 --> 00:40:05,700
everybody to stop what they're doing and

00:40:03,060 --> 00:40:07,350
help get that bill to working again

00:40:05,700 --> 00:40:09,390
so whether it's just revert the last

00:40:07,350 --> 00:40:12,090
change or it's working through the

00:40:09,390 --> 00:40:14,130
problem but we don't want cultures where

00:40:12,090 --> 00:40:16,700
you only point at the person that grows

00:40:14,130 --> 00:40:16,700
the building

00:40:18,860 --> 00:40:26,310
they only need production this is going

00:40:23,130 --> 00:40:29,100
to happen we write tests we get

00:40:26,310 --> 00:40:31,380
confidence in those tests things are

00:40:29,100 --> 00:40:34,140
still going to break just like they do

00:40:31,380 --> 00:40:36,360
today without the CD pipeline right but

00:40:34,140 --> 00:40:37,140
the thing here to take away is you're

00:40:36,360 --> 00:40:39,720
not done

00:40:37,140 --> 00:40:41,940
and so when you've written a test right

00:40:39,720 --> 00:40:43,470
so maybe something's broken you better

00:40:41,940 --> 00:40:46,110
go in and like fire fight it and make

00:40:43,470 --> 00:40:48,240
the thing work like that's great like

00:40:46,110 --> 00:40:51,060
you're not really done so we've added

00:40:48,240 --> 00:40:52,710
another test that now runs as part of

00:40:51,060 --> 00:40:55,530
our pipeline to ensure that it doesn't

00:40:52,710 --> 00:40:58,170
happen again all right like if you fix

00:40:55,530 --> 00:40:59,610
something you're not writing a test like

00:40:58,170 --> 00:41:02,490
you're just asking for that thing to

00:40:59,610 --> 00:41:04,020
happen again and that the next time it

00:41:02,490 --> 00:41:05,940
happens it's probably not going to be

00:41:04,020 --> 00:41:07,610
you it's going to be somebody else that

00:41:05,940 --> 00:41:10,920
has to fix it right

00:41:07,610 --> 00:41:16,140
so what let's make sure we always have

00:41:10,920 --> 00:41:19,410
those tests we want to rely on the

00:41:16,140 --> 00:41:21,780
pipeline so in an ideal environment we

00:41:19,410 --> 00:41:23,580
never touch a production system right

00:41:21,780 --> 00:41:25,980
everything goes in the pipeline because

00:41:23,580 --> 00:41:29,040
then every change is pathetic

00:41:25,980 --> 00:41:32,490
we know why changes happen if we're

00:41:29,040 --> 00:41:34,470
getting good like commit messages we

00:41:32,490 --> 00:41:36,510
know what change hasn't like jumped over

00:41:34,470 --> 00:41:38,619
some level of like testings or

00:41:36,510 --> 00:41:42,940
Association systems

00:41:38,619 --> 00:41:50,890
and who here has his ages into a

00:41:42,940 --> 00:41:53,440
production system to do a deploy one

00:41:50,890 --> 00:41:57,969
time I associated into a production

00:41:53,440 --> 00:42:02,729
system and I type LS and website went

00:41:57,969 --> 00:42:05,170
down that's a true story we had tens

00:42:02,729 --> 00:42:07,479
tens of thousands of files in the

00:42:05,170 --> 00:42:10,359
directory and the system never like

00:42:07,479 --> 00:42:12,519
responded to tell s so like a great this

00:42:10,359 --> 00:42:14,739
is change LS right

00:42:12,519 --> 00:42:17,109
there's hopefully your systems are not

00:42:14,739 --> 00:42:20,819
as brutal as that but there's there's

00:42:17,109 --> 00:42:24,369
lots of things that can happen whenever

00:42:20,819 --> 00:42:26,710
type the command and the wrong the wrong

00:42:24,369 --> 00:42:28,869
window right oh that was problem not

00:42:26,710 --> 00:42:32,859
death every once in might just went up

00:42:28,869 --> 00:42:35,739
right and so if I have a tool that's

00:42:32,859 --> 00:42:38,289
going and doing that for me right like I

00:42:35,739 --> 00:42:40,210
can have confidence that it's doing the

00:42:38,289 --> 00:42:42,670
right things it seemed to do anything

00:42:40,210 --> 00:42:46,690
less like ten times was probably just do

00:42:42,670 --> 00:42:49,059
the same thing right and so in this

00:42:46,690 --> 00:42:51,400
ideal world we're not connecting the

00:42:49,059 --> 00:42:53,739
production systems the only time we're

00:42:51,400 --> 00:42:55,119
actually connecting to a system is

00:42:53,739 --> 00:42:58,930
because it's broken

00:42:55,119 --> 00:43:04,900
and I like to figure out how we broke it

00:42:58,930 --> 00:43:09,359
so fix it so let's start small so I've

00:43:04,900 --> 00:43:14,380
had a different type of like testing

00:43:09,359 --> 00:43:15,670
let's write tests and then repeat all

00:43:14,380 --> 00:43:17,410
right so this might be starting out

00:43:15,670 --> 00:43:20,440
small and doing those simple file

00:43:17,410 --> 00:43:25,960
validation tests you know syntax when

00:43:20,440 --> 00:43:28,150
things like that the right test you how

00:43:25,960 --> 00:43:30,329
can you add a different type of testing

00:43:28,150 --> 00:43:33,670
like this is testing an individual

00:43:30,329 --> 00:43:38,680
system so like using a tool like server

00:43:33,670 --> 00:43:41,920
spec then I invest in the testing I get

00:43:38,680 --> 00:43:44,019
confidence now but that's done I feel a

00:43:41,920 --> 00:43:47,049
little better about deploying a system

00:43:44,019 --> 00:43:49,569
right different testing labels test the

00:43:47,049 --> 00:43:52,390
entire service let's do the performance

00:43:49,569 --> 00:43:59,259
testing right so start small

00:43:52,390 --> 00:44:02,710
one test if you use a pipeline it forces

00:43:59,259 --> 00:44:04,569
you to automate these things remember

00:44:02,710 --> 00:44:06,309
once you automate that task it means you

00:44:04,569 --> 00:44:08,200
don't have to keep continuing ladies

00:44:06,309 --> 00:44:11,819
like doing it I get to go work out more

00:44:08,200 --> 00:44:16,180
fun things it's going to decrease your

00:44:11,819 --> 00:44:17,710
mean any time to recovery right because

00:44:16,180 --> 00:44:21,119
you can always just employ that working

00:44:17,710 --> 00:44:23,170
system and it's an increased service

00:44:21,119 --> 00:44:31,089
responsiveness to the needs of the

00:44:23,170 --> 00:44:32,769
organization the bigger reason why I use

00:44:31,089 --> 00:44:37,210
CD pipelines is that it gives me

00:44:32,769 --> 00:44:39,759
confidence and when they process my

00:44:37,210 --> 00:44:41,980
pipeline might not be perfect but it's

00:44:39,759 --> 00:44:49,989
always getting better because every time

00:44:41,980 --> 00:44:55,049
we find the problem is so it's gradual

00:44:49,989 --> 00:44:55,049
the continual improvement on the process

00:44:55,799 --> 00:45:02,380
yeah thanks thanks for having me we've

00:44:59,859 --> 00:45:09,130
got a few minutes here so like open it

00:45:02,380 --> 00:45:11,950
up for questions how do you get around

00:45:09,130 --> 00:45:17,289
problems where different environments

00:45:11,950 --> 00:45:19,269
require different settings ie like sure

00:45:17,289 --> 00:45:20,259
so the question was if I'm to point to

00:45:19,269 --> 00:45:24,069
different environments

00:45:20,259 --> 00:45:25,749
I don't like it around the umpires by

00:45:24,069 --> 00:45:28,420
eating different data such as which

00:45:25,749 --> 00:45:30,579
database to use so hopefully you're

00:45:28,420 --> 00:45:33,249
doing that within your life cm tooling

00:45:30,579 --> 00:45:36,549
and it has a concept that allows you to

00:45:33,249 --> 00:45:40,509
do that whether it be conditional by

00:45:36,549 --> 00:45:43,390
logic or data about the system but that

00:45:40,509 --> 00:45:45,759
would be coded in your sample to the

00:45:43,390 --> 00:45:48,150
fondant city whatever questions about

00:45:45,759 --> 00:45:48,150
that once

00:46:12,970 --> 00:46:20,150
so the question is what test to our

00:46:18,109 --> 00:46:22,130
right here and I'm like why do I even do

00:46:20,150 --> 00:46:23,089
it because my cm tools already like

00:46:22,130 --> 00:46:26,269
doing this for me

00:46:23,089 --> 00:46:26,750
right so assignment aside from your cm

00:46:26,269 --> 00:46:28,849
tool

00:46:26,750 --> 00:46:31,009
you're probably like you've got some

00:46:28,849 --> 00:46:34,940
provisioning process so whether that's

00:46:31,009 --> 00:46:38,059
using and AMI or it's using kids sperm

00:46:34,940 --> 00:46:40,190
or like something there's other aspects

00:46:38,059 --> 00:46:43,579
of the system that aren't necessarily

00:46:40,190 --> 00:46:48,349
directly tied into your cm tool this

00:46:43,579 --> 00:46:50,720
also is agnostic to the CM tool so at

00:46:48,349 --> 00:46:53,720
any point in time I could run this test

00:46:50,720 --> 00:46:56,150
against the Linux system and know it's

00:46:53,720 --> 00:46:59,869
built the way it should be built I

00:46:56,150 --> 00:47:02,329
actually use this a lot to do behavior

00:46:59,869 --> 00:47:05,450
driven development and so alright these

00:47:02,329 --> 00:47:08,720
tests and then I'll write my cm code

00:47:05,450 --> 00:47:16,490
that goes and fulfills it and so that's

00:47:08,720 --> 00:47:19,190
that's the approach that yes they will

00:47:16,490 --> 00:47:22,029
be online I will sweep them out it'll be

00:47:19,190 --> 00:47:22,029
on SlideShare

00:47:40,110 --> 00:47:47,830
getting our questions right on my thinks

00:47:45,100 --> 00:47:49,870
everybody and feel free to reach out if

00:47:47,830 --> 00:47:57,380
you have questions later

00:47:49,870 --> 00:47:57,380

YouTube URL: https://www.youtube.com/watch?v=NknU2c6ru44


