Title: [OLF 2019] Practical Software Freedom with GNU Guix
Publication date: 2019-12-28
Playlist: 2019 Videos
Description: 
	Speaker: Jack Hill
Slides: https://jackhill.us/talks/guix-software-freedom/guix-software-freedom.pdf
Videographer: Ernest Parke

Software freedom gives us the ability to run, study, modify, and distribute software as we wish. Unfortunately, there are many practical obstacles that discourage us from making use of these freedoms. GNU Guix, a functional package manager and GNU/Linux distribution, removes many of these obstacles. Guix makes it easy to take advantage of these freedoms by making the everyday package management tools the same ones that are used for development, presenting a Guile Scheme API to all aspects of the system, allowing users to easily extend the system, and much more. We will tour Guix with an eye as to how its unique features can enhance your software freedom.
Captions: 
	00:00:01,530 --> 00:00:08,850
okay let's go ahead and get started hi

00:00:04,859 --> 00:00:10,740
welcome to my tour of of canoe geeks I'm

00:00:08,850 --> 00:00:16,650
Jack and I'll talk at you for the next

00:00:10,740 --> 00:00:17,789
half hour or so first things first what

00:00:16,650 --> 00:00:19,380
is this thing I'm going to be talking

00:00:17,789 --> 00:00:23,100
about let's start with the pronunciation

00:00:19,380 --> 00:00:25,769
is pronounced geeks like the English

00:00:23,100 --> 00:00:26,490
word geeks I'm going to be saying it a

00:00:25,769 --> 00:00:30,180
lot

00:00:26,490 --> 00:00:32,250
- listen comfortable with that is large

00:00:30,180 --> 00:00:35,910
community in Europe and I think that's

00:00:32,250 --> 00:00:38,190
where the the the name originated and so

00:00:35,910 --> 00:00:39,500
perhaps I've run into a lot of English

00:00:38,190 --> 00:00:42,559
speakers who that's not the first

00:00:39,500 --> 00:00:44,760
pronunciation they come up with that

00:00:42,559 --> 00:00:48,450
explanation for perhaps why that is or

00:00:44,760 --> 00:00:51,300
perhaps not explanation but interesting

00:00:48,450 --> 00:00:55,020
fact nonetheless but what is it it's

00:00:51,300 --> 00:00:58,739
it's a member of the GNU project and as

00:00:55,020 --> 00:01:01,289
this Linux distribution and package

00:00:58,739 --> 00:01:03,300
manager what does it what does it mean

00:01:01,289 --> 00:01:08,220
to be part of the GNU project I expect

00:01:03,300 --> 00:01:11,130
many of you here know but one of the

00:01:08,220 --> 00:01:13,590
first free software projects at the time

00:01:11,130 --> 00:01:15,900
to write a complete operating system

00:01:13,590 --> 00:01:19,049
that would be free of proprietary

00:01:15,900 --> 00:01:20,939
restrictions since then the world has

00:01:19,049 --> 00:01:25,770
changed a little bit in some ways canoe

00:01:20,939 --> 00:01:27,330
has been a wild success but thinking

00:01:25,770 --> 00:01:29,460
about what I want to do is software for

00:01:27,330 --> 00:01:32,400
you now perhaps there's still a ways to

00:01:29,460 --> 00:01:35,400
go I think we have a keynote sometime at

00:01:32,400 --> 00:01:37,170
this conference also about that but

00:01:35,400 --> 00:01:38,490
there's perhaps more free and

00:01:37,170 --> 00:01:44,610
open-source software now than there ever

00:01:38,490 --> 00:01:45,899
was but still I struggle with actually

00:01:44,610 --> 00:01:49,560
being able to use software freedom

00:01:45,899 --> 00:01:51,360
everywhere I'd like to so

00:01:49,560 --> 00:01:53,820
geeks is happening in this in this

00:01:51,360 --> 00:01:57,869
context of what it means for the GNU

00:01:53,820 --> 00:01:59,040
project now and one of the things that

00:01:57,869 --> 00:02:00,780
means to be part of the commute is

00:01:59,040 --> 00:02:02,759
opposed to a distribution that is

00:02:00,780 --> 00:02:05,670
separate is that it can work in harmony

00:02:02,759 --> 00:02:09,179
with other aspects other other software

00:02:05,670 --> 00:02:10,709
projects that are part of canoe the the

00:02:09,179 --> 00:02:13,020
one that's most closely associated with

00:02:10,709 --> 00:02:15,360
is guille good news ubiquitous

00:02:13,020 --> 00:02:19,380
intelligent language for extensions

00:02:15,360 --> 00:02:24,330
scheme dialect that's what geeks is

00:02:19,380 --> 00:02:25,950
implemented in and what a lot of my

00:02:24,330 --> 00:02:28,050
interactions with it are through the

00:02:25,950 --> 00:02:31,560
programming interface which is also in

00:02:28,050 --> 00:02:35,670
guile but it integrates with good news

00:02:31,560 --> 00:02:38,670
init system Shepard their cron package

00:02:35,670 --> 00:02:39,720
and also ganoub mez we'll talk about a

00:02:38,670 --> 00:02:41,490
little bit later it's a bootstrapping

00:02:39,720 --> 00:02:45,570
project and of course the standard

00:02:41,490 --> 00:02:47,430
things the compiler the C library but

00:02:45,570 --> 00:02:52,050
for geeks to be part of canoe in this

00:02:47,430 --> 00:02:55,860
context it's can work in harmony to

00:02:52,050 --> 00:02:59,370
build a better canoe but also to advance

00:02:55,860 --> 00:03:00,900
some social goals about bringing

00:02:59,370 --> 00:03:06,000
software freedom to people instead of

00:03:00,900 --> 00:03:08,970
just for the developers so now I've said

00:03:06,000 --> 00:03:11,220
software freedom alright so this is

00:03:08,970 --> 00:03:14,880
perhaps in slightly different words the

00:03:11,220 --> 00:03:20,910
the official four freedoms that the

00:03:14,880 --> 00:03:24,269
f-f-f-f-f-f-f says the problem I have

00:03:20,910 --> 00:03:26,580
with this is that they're true but a

00:03:24,269 --> 00:03:30,420
little bit vague it doesn't tell me what

00:03:26,580 --> 00:03:32,340
I need to know when I'm writing software

00:03:30,420 --> 00:03:35,340
I'm using software yes I'd like to be

00:03:32,340 --> 00:03:37,140
able to run it as I wish but what does

00:03:35,340 --> 00:03:38,340
that mean how do i how do I go about

00:03:37,140 --> 00:03:40,260
that

00:03:38,340 --> 00:03:43,200
you know distributing software is great

00:03:40,260 --> 00:03:45,810
there are lots of ways to do it how can

00:03:43,200 --> 00:03:49,799
I do it best to advance software freedom

00:03:45,810 --> 00:03:51,600
and not just get the job done and part

00:03:49,799 --> 00:03:55,890
of the problem is software is

00:03:51,600 --> 00:03:57,360
complicated this is a quotation from

00:03:55,890 --> 00:04:00,180
Bradley Coons blog post where he's

00:03:57,360 --> 00:04:03,480
reflecting on how important Debian was

00:04:00,180 --> 00:04:05,790
to him he woke up and saw Debbie and

00:04:03,480 --> 00:04:07,920
running on his his laptop and the nice

00:04:05,790 --> 00:04:12,000
lockscreen and thought I really had a

00:04:07,920 --> 00:04:16,260
positive experience with Debian and that

00:04:12,000 --> 00:04:19,229
is debian has provided him who can't be

00:04:16,260 --> 00:04:22,530
an expert in everything and different

00:04:19,229 --> 00:04:25,860
different programming languages parts of

00:04:22,530 --> 00:04:28,260
the system that interact with with

00:04:25,860 --> 00:04:29,270
expert expertise so in some ways this is

00:04:28,260 --> 00:04:38,230
argument for the valley

00:04:29,270 --> 00:04:38,230
you of distributions but so debian is

00:04:38,710 --> 00:04:47,690
great but it suffers from some things as

00:04:44,900 --> 00:04:49,610
a user if I wanted to to exercise some

00:04:47,690 --> 00:04:52,130
software freedom perhaps running

00:04:49,610 --> 00:04:55,040
software's I wish maybe I need maybe I

00:04:52,130 --> 00:04:58,120
need to to change it for that to happen

00:04:55,040 --> 00:05:02,540
well the process in traditional

00:04:58,120 --> 00:05:05,570
distributions like debian fedora I to

00:05:02,540 --> 00:05:07,850
build a new package I either use some

00:05:05,570 --> 00:05:09,980
the the official build infrastructure or

00:05:07,850 --> 00:05:13,550
something like PPAs which is this entire

00:05:09,980 --> 00:05:18,050
software stack set up to build me deploy

00:05:13,550 --> 00:05:19,820
packages or I build it locally using P

00:05:18,050 --> 00:05:23,060
builder or some again some additional

00:05:19,820 --> 00:05:25,250
software I have to set up and the and

00:05:23,060 --> 00:05:28,850
these large projects also have a lot of

00:05:25,250 --> 00:05:31,220
social programs for how to get people to

00:05:28,850 --> 00:05:35,960
work together in a coordinated way so we

00:05:31,220 --> 00:05:38,990
don't break the distribution there's

00:05:35,960 --> 00:05:40,940
there's a reason that we've developed

00:05:38,990 --> 00:05:47,930
these complex solutions to this problem

00:05:40,940 --> 00:05:49,940
and I claim that it is state one of the

00:05:47,930 --> 00:05:51,290
other things that I have liked to do in

00:05:49,940 --> 00:05:54,140
the past is do some Haskell programming

00:05:51,290 --> 00:05:57,800
and spending this time in a functional

00:05:54,140 --> 00:05:59,720
programming community probably has to do

00:05:57,800 --> 00:06:02,000
with why why this message about state

00:05:59,720 --> 00:06:04,400
resonates so much with me but that state

00:06:02,000 --> 00:06:09,230
is hard to reason about it makes things

00:06:04,400 --> 00:06:10,880
fragile I think this is the same same

00:06:09,230 --> 00:06:14,300
problem that containers are solving and

00:06:10,880 --> 00:06:21,410
that it's breaking up the global state

00:06:14,300 --> 00:06:24,740
into smaller pieces another another

00:06:21,410 --> 00:06:26,600
practical problem is these single

00:06:24,740 --> 00:06:29,740
language package managers or just works

00:06:26,600 --> 00:06:34,430
things like Pip and anaconda and NPM and

00:06:29,740 --> 00:06:37,100
bundler and ruby gems that's great and

00:06:34,430 --> 00:06:41,630
they and they work in their little part

00:06:37,100 --> 00:06:42,530
of the world for their language but what

00:06:41,630 --> 00:06:44,570
would I have to go

00:06:42,530 --> 00:06:49,180
side that so at work at Duke University

00:06:44,570 --> 00:06:53,870
Libraries one of our projects is a

00:06:49,180 --> 00:06:56,920
online app for archiving 3d samples so

00:06:53,870 --> 00:07:00,110
instead of going to museum to look at

00:06:56,920 --> 00:07:01,910
fossilized primate skeletons you might

00:07:00,110 --> 00:07:05,600
instead go online and download image

00:07:01,910 --> 00:07:08,540
through the image wood which saves you a

00:07:05,600 --> 00:07:12,920
trip also these are fragile but so this

00:07:08,540 --> 00:07:14,900
involves our standard repository web app

00:07:12,920 --> 00:07:18,320
which is a ruby on rails app but also

00:07:14,900 --> 00:07:24,919
involves C++ software for dealing with

00:07:18,320 --> 00:07:27,050
with 3d images something new for us we

00:07:24,919 --> 00:07:30,290
couldn't do this all with with the Ruby

00:07:27,050 --> 00:07:33,230
just works take this file and give me my

00:07:30,290 --> 00:07:35,540
Ruby dependencies thing so so in that

00:07:33,230 --> 00:07:37,820
way it's not bridging bridging the gap

00:07:35,540 --> 00:07:45,830
between the different different parts of

00:07:37,820 --> 00:07:47,240
the of the of the world okay so I claim

00:07:45,830 --> 00:07:51,050
that geeks help solve some of these

00:07:47,240 --> 00:07:53,870
problems but how is that so what what

00:07:51,050 --> 00:07:56,210
makes Keeks different allows it attack

00:07:53,870 --> 00:07:57,380
the state problem that a traditional

00:07:56,210 --> 00:07:59,270
distribution wouldn't so in a

00:07:57,380 --> 00:08:01,850
traditional distribution that falls the

00:07:59,270 --> 00:08:04,310
filesystem hierarchy standard you get

00:08:01,850 --> 00:08:05,960
one global namespace you install all

00:08:04,310 --> 00:08:07,700
your programs and they write to the same

00:08:05,960 --> 00:08:09,460
global directory it's the executables go

00:08:07,700 --> 00:08:14,000
and bin the libraries go and lib

00:08:09,460 --> 00:08:18,710
configuration goes in Etsy geeks doesn't

00:08:14,000 --> 00:08:20,530
do that it everything that geeks manages

00:08:18,710 --> 00:08:24,530
goes in one location called the store

00:08:20,530 --> 00:08:27,050
but inside that it manages it in such a

00:08:24,530 --> 00:08:28,940
way so that packages each end up with

00:08:27,050 --> 00:08:33,260
their own namespace so let's take a look

00:08:28,940 --> 00:08:37,339
at this but first every the store is

00:08:33,260 --> 00:08:38,630
managed by the geeks daemon so the way

00:08:37,339 --> 00:08:41,089
you interact with the system is you send

00:08:38,630 --> 00:08:45,560
a send a derivation to the geeks image

00:08:41,089 --> 00:08:47,660
so the on line three we see amongst this

00:08:45,560 --> 00:08:49,430
this is a sampling of items I had my

00:08:47,660 --> 00:08:52,670
store when I was preparing this

00:08:49,430 --> 00:08:54,650
presentation so by faults located a new

00:08:52,670 --> 00:08:56,480
directory on the system the new store

00:08:54,650 --> 00:08:58,820
and live three is

00:08:56,480 --> 00:09:02,300
DRV file that's the derivation so this

00:08:58,820 --> 00:09:04,100
was a build instruction that I have sent

00:09:02,300 --> 00:09:05,779
to the store to the geeks demon which

00:09:04,100 --> 00:09:07,940
put in the store and then operate on it

00:09:05,779 --> 00:09:09,320
and so follow the instructions in the

00:09:07,940 --> 00:09:11,930
derivation to create something else it

00:09:09,320 --> 00:09:14,269
could have been the Emacs package which

00:09:11,930 --> 00:09:17,089
has its own namespace or the PW gen

00:09:14,269 --> 00:09:19,310
package but it's not just package the nm

00:09:17,089 --> 00:09:23,089
store anything the Geats geeks operates

00:09:19,310 --> 00:09:26,480
on so single files this patch file which

00:09:23,089 --> 00:09:30,380
is part of the the source used to build

00:09:26,480 --> 00:09:32,120
something else a cron job all ends up in

00:09:30,380 --> 00:09:34,820
this place that allow geeks to operate

00:09:32,120 --> 00:09:37,100
on programmatically so let's take a look

00:09:34,820 --> 00:09:40,519
inside one of these store items so this

00:09:37,100 --> 00:09:42,920
is a view inside the the Emacs package

00:09:40,519 --> 00:09:45,079
somewhat abridged but it has what you

00:09:42,920 --> 00:09:47,899
expect has a bin directory with six

00:09:45,079 --> 00:09:52,160
execute executables Emacs client Emacs

00:09:47,899 --> 00:09:54,740
server etags Emacs itself also the

00:09:52,160 --> 00:09:57,949
libraries Emacs ships with the system D

00:09:54,740 --> 00:10:00,620
unit for starting the Emacs server on on

00:09:57,949 --> 00:10:08,690
distributions that use system D so

00:10:00,620 --> 00:10:11,630
that's in there so that's great but now

00:10:08,690 --> 00:10:14,350
I have this one it seems like it's still

00:10:11,630 --> 00:10:17,180
a global namespace it's not mixing

00:10:14,350 --> 00:10:19,250
everything in bin and Etsy but I have

00:10:17,180 --> 00:10:22,819
this global namespace which is good new

00:10:19,250 --> 00:10:27,670
geeks how does that help I'm going to

00:10:22,819 --> 00:10:30,980
create slices into it so I can instruct

00:10:27,670 --> 00:10:33,589
geeks that I like a slice into this

00:10:30,980 --> 00:10:36,410
global namespace and the only part of it

00:10:33,589 --> 00:10:38,660
I want to see is the the packages hello

00:10:36,410 --> 00:10:40,670
which is a good news example package for

00:10:38,660 --> 00:10:43,490
how to use up do stand of things like

00:10:40,670 --> 00:10:45,949
use Auto tools and print out hello it's

00:10:43,490 --> 00:10:47,899
great for examples the Emacs package

00:10:45,949 --> 00:10:50,720
that we just talked about and this neat

00:10:47,899 --> 00:10:53,860
little game make everyone happy cows a

00:10:50,720 --> 00:10:56,720
print out your text full ASCII art cow

00:10:53,860 --> 00:10:59,990
so I've asked eeks to do that and what

00:10:56,720 --> 00:11:05,930
has it given me it's given me the

00:10:59,990 --> 00:11:08,750
symlink farm which which just has what I

00:11:05,930 --> 00:11:10,190
need in it so I look at this well so far

00:11:08,750 --> 00:11:12,500
the only thing I see

00:11:10,190 --> 00:11:14,870
is symlinks for Emacs what about those

00:11:12,500 --> 00:11:18,560
other two packages it turns out that

00:11:14,870 --> 00:11:20,449
include in lib exec are only provided by

00:11:18,560 --> 00:11:22,730
the Emacs package and if we do a deeper

00:11:20,449 --> 00:11:25,790
dive into the bin directory there are

00:11:22,730 --> 00:11:27,439
those other packages so geeks has

00:11:25,790 --> 00:11:33,050
created me this little slice which in

00:11:27,439 --> 00:11:36,199
this case I put in temp into the store

00:11:33,050 --> 00:11:40,129
so here I have restricted my global

00:11:36,199 --> 00:11:42,589
state to just the package as I want so I

00:11:40,129 --> 00:11:45,680
can do this for for any number of things

00:11:42,589 --> 00:11:48,110
each user can have their own slice into

00:11:45,680 --> 00:11:54,740
the store each user get multiple slices

00:11:48,110 --> 00:12:00,980
into the store etc so there have been a

00:11:54,740 --> 00:12:02,199
lot of ellipses in these slides what am

00:12:00,980 --> 00:12:04,629
i hiding

00:12:02,199 --> 00:12:11,389
well I'm hiding another feature of geeks

00:12:04,629 --> 00:12:12,589
and the Richer which are these hashes it

00:12:11,389 --> 00:12:16,069
prevents a little bit of printing

00:12:12,589 --> 00:12:18,079
problem in the screen but also this

00:12:16,069 --> 00:12:22,189
additional complexity means something

00:12:18,079 --> 00:12:25,579
else every every store item in geeks has

00:12:22,189 --> 00:12:28,480
its dependencies tracked so when I built

00:12:25,579 --> 00:12:33,860
the the new hello package it depended on

00:12:28,480 --> 00:12:38,750
my C library my C compiler my auto tool

00:12:33,860 --> 00:12:39,410
setup and also the build recipes for for

00:12:38,750 --> 00:12:44,149
that package

00:12:39,410 --> 00:12:46,880
amongst other things all those are

00:12:44,149 --> 00:12:49,850
hashed and and so they're stored in the

00:12:46,880 --> 00:12:52,459
store prefix with their hash what this

00:12:49,850 --> 00:12:56,269
means is that I can multiple copies of

00:12:52,459 --> 00:12:58,399
the of the same thing but that that vary

00:12:56,269 --> 00:13:00,439
in different way maybe the dependency

00:12:58,399 --> 00:13:04,610
changed maybe I've changed the build

00:13:00,439 --> 00:13:06,350
instruction to suit my needs I don't

00:13:04,610 --> 00:13:07,550
have to choose between the old version

00:13:06,350 --> 00:13:09,680
the new version I can have both

00:13:07,550 --> 00:13:11,029
president on my system and call them up

00:13:09,680 --> 00:13:14,720
in different views in the store as I

00:13:11,029 --> 00:13:16,009
want so this in this example we look at

00:13:14,720 --> 00:13:18,920
another something else that's not a

00:13:16,009 --> 00:13:22,699
package the grub configuration for

00:13:18,920 --> 00:13:24,020
booting the system and why why do I have

00:13:22,699 --> 00:13:31,640
multiple ones of these

00:13:24,020 --> 00:13:33,500
well it's not just for these views into

00:13:31,640 --> 00:13:36,080
the store not just things I create when

00:13:33,500 --> 00:13:38,410
I want to everything is is described in

00:13:36,080 --> 00:13:41,690
terms of these so what I my system my

00:13:38,410 --> 00:13:45,230
boot configuration and my Linux command

00:13:41,690 --> 00:13:47,839
line tell it to to load the the set of

00:13:45,230 --> 00:13:51,620
packages it has available system-wide as

00:13:47,839 --> 00:13:54,020
a view into the store so when I upgrade

00:13:51,620 --> 00:13:55,790
the system and reconfigure it I get a

00:13:54,020 --> 00:13:58,700
new grub configuration that points to

00:13:55,790 --> 00:14:00,380
that new view if I wanted to at the grub

00:13:58,700 --> 00:14:02,480
menu the old ones are present I could go

00:14:00,380 --> 00:14:06,589
back into my old configuration if I

00:14:02,480 --> 00:14:12,170
broke something or if I wanted liked it

00:14:06,589 --> 00:14:17,770
better for for whatever reason so how do

00:14:12,170 --> 00:14:20,149
I create these things in the store

00:14:17,770 --> 00:14:22,100
there's there's the guy'll programming

00:14:20,149 --> 00:14:24,020
interface that we talked about so let's

00:14:22,100 --> 00:14:25,910
let's look at perhaps the most common

00:14:24,020 --> 00:14:28,520
one of that and that's defining a

00:14:25,910 --> 00:14:32,779
package it's not it's not the only only

00:14:28,520 --> 00:14:36,740
one but in everyday life it it's one of

00:14:32,779 --> 00:14:38,300
the ones that's most useful so the

00:14:36,740 --> 00:14:40,190
example I'm using is something that's

00:14:38,300 --> 00:14:41,660
not president geeks because it's only

00:14:40,190 --> 00:14:44,750
important to my local environment it's a

00:14:41,660 --> 00:14:46,579
little wrapper script for SCP that I use

00:14:44,750 --> 00:14:51,560
at work to do some of our extra

00:14:46,579 --> 00:14:53,180
multi-factor stuff for me if you're not

00:14:51,560 --> 00:14:55,190
familiar with scheme it's a dynamic

00:14:53,180 --> 00:14:59,360
dynamically typed programming language

00:14:55,190 --> 00:15:01,430
supports multiple paradigms in geeks

00:14:59,360 --> 00:15:02,300
they try to use it in a mostly

00:15:01,430 --> 00:15:05,360
functional style

00:15:02,300 --> 00:15:09,079
it's lexically scoped in this first part

00:15:05,360 --> 00:15:12,380
of the package definition it's a scheme

00:15:09,079 --> 00:15:15,290
record the key value key value mapping

00:15:12,380 --> 00:15:20,990
so we have the name the version of the

00:15:15,290 --> 00:15:22,640
package the the the actual SCP wrapper

00:15:20,990 --> 00:15:25,660
is not that long so I've put it up just

00:15:22,640 --> 00:15:28,100
as a snippet on our code hosting site

00:15:25,660 --> 00:15:30,380
perhaps I should have put it in

00:15:28,100 --> 00:15:32,660
something that would track its versions

00:15:30,380 --> 00:15:36,140
better but this was a quick hack that I

00:15:32,660 --> 00:15:38,180
was doing fortunately geeks will will

00:15:36,140 --> 00:15:41,420
track the the checksum of

00:15:38,180 --> 00:15:44,089
that and will yell at me if it changes

00:15:41,420 --> 00:15:47,440
and then I know to fix it so it won't

00:15:44,089 --> 00:15:50,620
won't suddenly fail okay

00:15:47,440 --> 00:15:54,440
we're where's the build instructions

00:15:50,620 --> 00:15:55,850
geeks has a library of different build

00:15:54,440 --> 00:15:57,380
systems in this case I've used the

00:15:55,850 --> 00:15:59,180
trivial build system which does nothing

00:15:57,380 --> 00:16:00,620
for you and most of the package you'll

00:15:59,180 --> 00:16:02,899
find in geeks they'll use one of the

00:16:00,620 --> 00:16:06,320
prepackaged build systems and so it will

00:16:02,899 --> 00:16:08,390
be less verbose but this allows us to

00:16:06,320 --> 00:16:10,910
see a little bit more of the steps so

00:16:08,390 --> 00:16:13,040
the build system is a guy'll scheme

00:16:10,910 --> 00:16:15,410
program that gets past the demon that

00:16:13,040 --> 00:16:18,080
runs the library abstraction has

00:16:15,410 --> 00:16:23,930
different stages for stage unpack

00:16:18,080 --> 00:16:26,750
configure build test install in my case

00:16:23,930 --> 00:16:30,410
I don't need to do too much but there's

00:16:26,750 --> 00:16:33,500
some setup to do as I said before geeks

00:16:30,410 --> 00:16:36,140
tracks the inputs they're used to build

00:16:33,500 --> 00:16:38,839
the store items so in this case in in

00:16:36,140 --> 00:16:42,920
the LAT on line 7 essentially what I'm

00:16:38,839 --> 00:16:44,900
doing is binding names to values so so

00:16:42,920 --> 00:16:47,600
the source location is some path in the

00:16:44,900 --> 00:16:48,890
store I'm doing this programmatically

00:16:47,600 --> 00:16:50,990
because I don't know why I'm where I in

00:16:48,890 --> 00:16:52,850
the package what the hash is it's based

00:16:50,990 --> 00:16:55,190
on the downloader and the checksum of

00:16:52,850 --> 00:16:57,800
the file but I can take that name and

00:16:55,190 --> 00:16:59,870
bind it to the source this is an SCP

00:16:57,800 --> 00:17:06,470
wrapper written in bash so I also need

00:16:59,870 --> 00:17:13,370
SSH and bash so this is how I build my

00:17:06,470 --> 00:17:16,250
script and and how I avoid depending on

00:17:13,370 --> 00:17:19,550
a global namespace if I were to run this

00:17:16,250 --> 00:17:22,520
script on a Debian box I probably just

00:17:19,550 --> 00:17:27,050
shell out to SSH and let the shell

00:17:22,520 --> 00:17:30,080
figure out which SSH I want that depends

00:17:27,050 --> 00:17:33,520
on SSH being visible in that global

00:17:30,080 --> 00:17:33,520
environment with the scripts running

00:17:34,090 --> 00:17:43,760
what if I had modified SSH in a made-up

00:17:38,900 --> 00:17:45,860
example in my global in the environment

00:17:43,760 --> 00:17:48,290
where I typing commands to do other

00:17:45,860 --> 00:17:49,580
stuff I'd like but I don't want this

00:17:48,290 --> 00:17:52,130
script to pick up that one because it

00:17:49,580 --> 00:17:55,309
doesn't work as the modification I made

00:17:52,130 --> 00:17:58,970
was was not not something this author

00:17:55,309 --> 00:18:04,039
anticipated so instead I'm replacing the

00:17:58,970 --> 00:18:06,620
references to SCP with with the one from

00:18:04,039 --> 00:18:08,120
the name I bound to this to the location

00:18:06,620 --> 00:18:11,299
the store so it goes directly to the

00:18:08,120 --> 00:18:15,620
right SSH in the store using using the

00:18:11,299 --> 00:18:17,630
the hashed path and then I stopped going

00:18:15,620 --> 00:18:22,130
to install the file and we can see the

00:18:17,630 --> 00:18:25,480
listing of the inputs here and finally

00:18:22,130 --> 00:18:27,980
we close with with some more metadata

00:18:25,480 --> 00:18:30,230
the synopsis and description are

00:18:27,980 --> 00:18:35,179
surfaced by the geeks interface to help

00:18:30,230 --> 00:18:37,429
users find the package when looking so

00:18:35,179 --> 00:18:39,169
this is this is one of many different

00:18:37,429 --> 00:18:41,330
programming interfaces there's an

00:18:39,169 --> 00:18:45,049
interface for defining system services

00:18:41,330 --> 00:18:50,059
that use some of the primitives of GUI

00:18:45,049 --> 00:18:53,690
Shepard or the cron daemon and so forth

00:18:50,059 --> 00:18:55,730
also for doing batch operations on these

00:18:53,690 --> 00:18:58,970
use in the store creating profiles

00:18:55,730 --> 00:19:02,029
automatically creating one-off

00:18:58,970 --> 00:19:05,240
development environments so if I ship a

00:19:02,029 --> 00:19:12,830
package I can define what development

00:19:05,240 --> 00:19:18,830
tools I need but how does this help me

00:19:12,830 --> 00:19:24,529
understand the the freedoms better how

00:19:18,830 --> 00:19:28,779
does it help me realize them well the

00:19:24,529 --> 00:19:33,320
the first way is is not technical at all

00:19:28,779 --> 00:19:37,190
it's by having it as a stated goal of

00:19:33,320 --> 00:19:38,690
the distribution to advance users

00:19:37,190 --> 00:19:41,000
freedom and so this this goes in the

00:19:38,690 --> 00:19:45,080
mindset trying to not just think about

00:19:41,000 --> 00:19:48,200
me as a developer but think about what

00:19:45,080 --> 00:19:49,640
what things users might like to do both

00:19:48,200 --> 00:19:53,000
so the system works for them more or

00:19:49,640 --> 00:19:54,740
less out of the box so that we and

00:19:53,000 --> 00:19:57,049
thinking about how to chart the path of

00:19:54,740 --> 00:20:01,490
the new project to better meet that but

00:19:57,049 --> 00:20:04,370
also when when I haven't done it right

00:20:01,490 --> 00:20:05,600
to to set them up to do better but also

00:20:04,370 --> 00:20:07,520
to work collaborative

00:20:05,600 --> 00:20:13,820
so there are there are some things that

00:20:07,520 --> 00:20:16,850
that geeks avoids or helps users avoid

00:20:13,820 --> 00:20:19,630
potential problems that that might be

00:20:16,850 --> 00:20:22,520
difficult for them to do on their own

00:20:19,630 --> 00:20:24,010
and by creating this community space for

00:20:22,520 --> 00:20:26,990
people to work together on solving these

00:20:24,010 --> 00:20:29,750
so two things that that might be

00:20:26,990 --> 00:20:32,270
difficult is running software I wish in

00:20:29,750 --> 00:20:34,910
the context of web browsers there is

00:20:32,270 --> 00:20:36,620
software in general is very complex web

00:20:34,910 --> 00:20:41,510
browsers are almost just as complex as

00:20:36,620 --> 00:20:43,760
the rest of it but in this case there's

00:20:41,510 --> 00:20:47,570
an example of a the ungoogleable

00:20:43,760 --> 00:20:49,790
in canoe geeks say I want to run

00:20:47,570 --> 00:20:52,190
software I wish and I did and I wanted

00:20:49,790 --> 00:21:01,030
to use this free software browser but

00:20:52,190 --> 00:21:03,890
not send telemetry to Google the the

00:21:01,030 --> 00:21:05,780
chromium package and Debian doesn't go

00:21:03,890 --> 00:21:10,580
to this length but there is a Google

00:21:05,780 --> 00:21:13,400
chromium separate project a script to to

00:21:10,580 --> 00:21:15,020
modify the chromium package but it still

00:21:13,400 --> 00:21:16,340
takes them here to do checking to make

00:21:15,020 --> 00:21:19,760
sure that works and it's the default

00:21:16,340 --> 00:21:21,500
chromium provided by geeks does that now

00:21:19,760 --> 00:21:23,000
it might be up to the users maybe you

00:21:21,500 --> 00:21:27,170
maybe you want those features maybe you

00:21:23,000 --> 00:21:29,390
don't but this this makes it possible to

00:21:27,170 --> 00:21:30,650
go in and do that they also have a good

00:21:29,390 --> 00:21:35,740
news fork of Firefox

00:21:30,650 --> 00:21:35,740
eiscat with with similar modifications

00:21:36,040 --> 00:21:40,460
another example is the case of

00:21:38,240 --> 00:21:44,150
bootstrapping so this is in the context

00:21:40,460 --> 00:21:47,270
of Ken Thompson's trusting trust how do

00:21:44,150 --> 00:21:50,420
I build a language up without a

00:21:47,270 --> 00:21:52,010
pre-existing built version of the

00:21:50,420 --> 00:21:58,100
compiler for that language whether it be

00:21:52,010 --> 00:21:59,930
C or Haskell or various schemes this is

00:21:58,100 --> 00:22:03,560
sort of an extension of the of the

00:21:59,930 --> 00:22:06,560
tracking dependencies eventually be

00:22:03,560 --> 00:22:09,800
trying to depends he's back will get we

00:22:06,560 --> 00:22:14,960
need a binary GCC a binary GAMC binary

00:22:09,800 --> 00:22:17,960
tarbash Auto tools and that that adds up

00:22:14,960 --> 00:22:18,770
it can prior to recent working good new

00:22:17,960 --> 00:22:21,710
geeks that bind

00:22:18,770 --> 00:22:22,370
I needed to build a system where 250

00:22:21,710 --> 00:22:25,550
megabytes

00:22:22,370 --> 00:22:27,470
that's not audible and can't really

00:22:25,550 --> 00:22:28,900
answer the question is the software

00:22:27,470 --> 00:22:33,430
doing what I want

00:22:28,900 --> 00:22:36,380
also if for some reason I wanted to do

00:22:33,430 --> 00:22:39,820
port it to a new architecture or rebuild

00:22:36,380 --> 00:22:42,590
only from source for whatever reason

00:22:39,820 --> 00:22:44,270
depending having to hopefully find some

00:22:42,590 --> 00:22:48,860
binary that starts with doing what I

00:22:44,270 --> 00:22:52,360
want enough is not is not great I might

00:22:48,860 --> 00:22:57,070
not be able to find that but so Geeks

00:22:52,360 --> 00:22:57,070
incorporates the work of bootstrap Abul

00:22:57,220 --> 00:23:04,940
builds such that the brief travel of

00:23:00,950 --> 00:23:08,900
people working on a self hosting scheme

00:23:04,940 --> 00:23:15,440
and c compiler that can be initially run

00:23:08,900 --> 00:23:16,820
from an audible assembly seed that's a

00:23:15,440 --> 00:23:18,440
nice project but it helps to have it

00:23:16,820 --> 00:23:20,840
part of the distribution so the official

00:23:18,440 --> 00:23:24,770
build of the distribution is now built

00:23:20,840 --> 00:23:28,480
using so this is that self hosting C and

00:23:24,770 --> 00:23:31,760
scheme compiler is good new mez and

00:23:28,480 --> 00:23:34,100
because of recent work now the bootstrap

00:23:31,760 --> 00:23:35,810
binaries and Geeks incorporate that and

00:23:34,100 --> 00:23:38,090
has reduced the size of the binary

00:23:35,810 --> 00:23:39,860
bootstrap in half so there continue to

00:23:38,090 --> 00:23:41,810
work so now it's about 150 megabytes so

00:23:39,860 --> 00:23:42,860
they're continuing to work on that

00:23:41,810 --> 00:23:44,360
but it's nice to have part of the

00:23:42,860 --> 00:23:49,280
distribution alright that's something

00:23:44,360 --> 00:23:50,720
that that ships on every system and it's

00:23:49,280 --> 00:23:52,910
not the shell script that might be

00:23:50,720 --> 00:23:54,770
fragile it uses all the geeks primitives

00:23:52,910 --> 00:23:57,470
for interacting with the store and

00:23:54,770 --> 00:24:02,570
building it in the isolated build

00:23:57,470 --> 00:24:06,020
environments so it's easy to to improve

00:24:02,570 --> 00:24:08,560
the the bootstrapping chain while you're

00:24:06,020 --> 00:24:12,280
improving the rest of your distribution

00:24:08,560 --> 00:24:12,280
how else does it help me

00:24:14,960 --> 00:24:20,120
I think it's a it's having being able to

00:24:18,830 --> 00:24:23,300
create a new environment gives me a

00:24:20,120 --> 00:24:27,620
place to play to try something out when

00:24:23,300 --> 00:24:29,840
I get called on from my family for a

00:24:27,620 --> 00:24:32,690
computer help a lot of times I don't

00:24:29,840 --> 00:24:34,640
think it's something that is actually

00:24:32,690 --> 00:24:39,380
wrong with their system but they're just

00:24:34,640 --> 00:24:41,210
not sure what to do and and that's

00:24:39,380 --> 00:24:43,970
because they think it might break

00:24:41,210 --> 00:24:45,920
something or or do something bad this

00:24:43,970 --> 00:24:48,170
happens to me too it just happens with

00:24:45,920 --> 00:24:53,030
my family that happens a lot sooner but

00:24:48,170 --> 00:24:54,410
eventually I get to someplace where I I

00:24:53,030 --> 00:24:57,230
don't I don't really want to do that

00:24:54,410 --> 00:24:58,700
because it it will either affect the

00:24:57,230 --> 00:25:01,070
rest of my system because of the one

00:24:58,700 --> 00:25:02,960
global state and I don't want that or I

00:25:01,070 --> 00:25:04,700
just not sure how it will turn out well

00:25:02,960 --> 00:25:06,140
I don't really want to download all that

00:25:04,700 --> 00:25:10,580
stuff and put it in my home directory

00:25:06,140 --> 00:25:13,220
and change my dot files I sort of liked

00:25:10,580 --> 00:25:15,050
how they work but the two lien geeks

00:25:13,220 --> 00:25:18,590
with the isolated environments allows me

00:25:15,050 --> 00:25:22,190
to try out the new stuff and then either

00:25:18,590 --> 00:25:26,210
roll back or just switch to to a

00:25:22,190 --> 00:25:31,060
different view into that store and this

00:25:26,210 --> 00:25:34,160
for me is a major win another thing is

00:25:31,060 --> 00:25:37,970
that the dev tooling in geeks is the

00:25:34,160 --> 00:25:40,640
same as the everyday tooling so to build

00:25:37,970 --> 00:25:41,930
a package I build this instructions for

00:25:40,640 --> 00:25:44,870
the geeks team and send it away and it

00:25:41,930 --> 00:25:46,850
happens to build myself a new little

00:25:44,870 --> 00:25:49,490
view into the store I build perhaps

00:25:46,850 --> 00:25:50,990
simpler instructions send it using the

00:25:49,490 --> 00:25:53,300
geeks tools send it to the build demon

00:25:50,990 --> 00:25:55,450
the geeks team in and get my view into

00:25:53,300 --> 00:25:58,160
the store

00:25:55,450 --> 00:26:00,020
it means modifying a package and Geeks

00:25:58,160 --> 00:26:02,840
is seven lines

00:26:00,020 --> 00:26:05,000
two of them were comments so this was

00:26:02,840 --> 00:26:06,320
the first a free and open-source

00:26:05,000 --> 00:26:09,950
software project that I have contributed

00:26:06,320 --> 00:26:13,990
to in a major way and I think the making

00:26:09,950 --> 00:26:16,490
it easy to to develop for myself and

00:26:13,990 --> 00:26:22,700
then to jump into developing for other

00:26:16,490 --> 00:26:24,680
people's made that happen what about

00:26:22,700 --> 00:26:26,540
that those those two points about

00:26:24,680 --> 00:26:28,660
distributing software modified and

00:26:26,540 --> 00:26:28,660
unmodified

00:26:30,670 --> 00:26:36,770
the geeks primitives also make that easy

00:26:33,620 --> 00:26:39,080
geeks is in principle a source based

00:26:36,770 --> 00:26:43,670
distribution like you might be familiar

00:26:39,080 --> 00:26:47,030
with from gen 2 but also has first-class

00:26:43,670 --> 00:26:50,350
support for what geeks call substitute

00:26:47,030 --> 00:26:50,350
so instance and

00:26:50,390 --> 00:26:57,770
in building that locally on my anemic

00:26:54,110 --> 00:27:00,650
laptop the community can run build farm

00:26:57,770 --> 00:27:02,060
so there's there's one community build

00:27:00,650 --> 00:27:04,510
farm currently but in principle there

00:27:02,060 --> 00:27:04,510
could be more

00:27:04,690 --> 00:27:08,840
but because the source and the build

00:27:07,370 --> 00:27:10,220
instructions are store items there's no

00:27:08,840 --> 00:27:12,530
reason that the tooling needs to treat

00:27:10,220 --> 00:27:16,160
them any differently than than the

00:27:12,530 --> 00:27:18,320
binary so I decided from a little magic

00:27:16,160 --> 00:27:19,910
that oh I should get the binary result

00:27:18,320 --> 00:27:22,040
instead of instead of the source and the

00:27:19,910 --> 00:27:24,320
build instructions but it's also nice

00:27:22,040 --> 00:27:26,270
for I built some software on one machine

00:27:24,320 --> 00:27:29,750
and I'd like to move it around to

00:27:26,270 --> 00:27:31,880
somewhere else because there's this

00:27:29,750 --> 00:27:34,220
well-known scheme of how to stall

00:27:31,880 --> 00:27:35,530
software in the store I can copy store

00:27:34,220 --> 00:27:38,030
items from one computer to another

00:27:35,530 --> 00:27:39,640
there's some more details like they're

00:27:38,030 --> 00:27:42,260
all signed so you can only install

00:27:39,640 --> 00:27:44,390
trustworthy binaries from from a a

00:27:42,260 --> 00:27:47,390
entity that you trust to sign them with

00:27:44,390 --> 00:27:49,310
their key I can also export software for

00:27:47,390 --> 00:27:51,410
use outside of geeks so geeks pack

00:27:49,310 --> 00:27:56,750
support several formats I've choosen to

00:27:51,410 --> 00:27:59,570
to show a popular one here but I can

00:27:56,750 --> 00:28:01,450
create tar balls to run software that I

00:27:59,570 --> 00:28:05,020
have built with geeks on other systems

00:28:01,450 --> 00:28:07,610
should note also that because geeks

00:28:05,020 --> 00:28:11,690
lives in its own namespace in the new

00:28:07,610 --> 00:28:12,980
store in addition to like I I'm using on

00:28:11,690 --> 00:28:15,260
this computer using geeks to manage the

00:28:12,980 --> 00:28:17,960
whole system including the kernel on the

00:28:15,260 --> 00:28:20,930
RAM FS and that grub can fake you can

00:28:17,960 --> 00:28:23,270
also install it as a user space package

00:28:20,930 --> 00:28:27,230
manager on top of another another

00:28:23,270 --> 00:28:33,490
distribution and what about that neo W

00:28:27,230 --> 00:28:35,960
an archive tooling and and publishing

00:28:33,490 --> 00:28:37,760
devran repositories to the world they

00:28:35,960 --> 00:28:42,110
required this whole different software

00:28:37,760 --> 00:28:44,330
stack in geeks every installation ships

00:28:42,110 --> 00:28:47,650
with the tooling to do that because

00:28:44,330 --> 00:28:51,410
that's geeks publish and allows

00:28:47,650 --> 00:28:53,030
downloading of store items from one

00:28:51,410 --> 00:28:55,750
computer so if I have a build farm that

00:28:53,030 --> 00:28:58,490
builds stuff and stores it in the store

00:28:55,750 --> 00:29:00,560
using the regular geeks tooling I can go

00:28:58,490 --> 00:29:02,750
ahead and and publish that to the web in

00:29:00,560 --> 00:29:04,870
a way that geeks understands how to pull

00:29:02,750 --> 00:29:04,870
it down

00:29:05,649 --> 00:29:10,159
we'll have a little another taste of

00:29:07,610 --> 00:29:11,809
scheme and that's right so I have these

00:29:10,159 --> 00:29:13,820
primitives for building building

00:29:11,809 --> 00:29:18,259
software on one computer and moving into

00:29:13,820 --> 00:29:20,509
it two different one and I don't want to

00:29:18,259 --> 00:29:24,169
build stuff on my laptop because it it

00:29:20,509 --> 00:29:26,120
sort of anemic instead I have a more

00:29:24,169 --> 00:29:30,710
powerful computer somewhere else and

00:29:26,120 --> 00:29:33,590
have told geeks via the script this is

00:29:30,710 --> 00:29:34,610
this is the result of evaluating this is

00:29:33,590 --> 00:29:36,230
a list of machines that should

00:29:34,610 --> 00:29:39,620
automatically build stuff on and pull

00:29:36,230 --> 00:29:43,700
them back in this case I have one

00:29:39,620 --> 00:29:46,789
machine so I just list it I this this

00:29:43,700 --> 00:29:49,009
could do arbitrary work it could for

00:29:46,789 --> 00:29:53,320
instance match on the package name and

00:29:49,009 --> 00:29:56,539
only offload really expensive packages

00:29:53,320 --> 00:29:59,269
for instance you know if I have one one

00:29:56,539 --> 00:30:03,679
machine with a lot of lot of memory only

00:29:59,269 --> 00:30:06,950
off load package the chromium Firefox to

00:30:03,679 --> 00:30:09,610
that one and perhaps even spin it up

00:30:06,950 --> 00:30:09,610
beforehand

00:30:11,690 --> 00:30:19,030
this is why why I think he school but I

00:30:16,250 --> 00:30:19,030
don't

00:30:19,490 --> 00:30:27,140
things have been built on top of these

00:30:22,010 --> 00:30:30,850
primitives some of them some of the

00:30:27,140 --> 00:30:38,470
funding for geeks comes from a European

00:30:30,850 --> 00:30:42,350
scientific computing place organization

00:30:38,470 --> 00:30:45,740
but they're working and so if you look

00:30:42,350 --> 00:30:48,290
up geeks HPC you can find more more

00:30:45,740 --> 00:30:50,390
information about about there and about

00:30:48,290 --> 00:30:52,790
their endeavors but one of those

00:30:50,390 --> 00:30:55,250
projects is in scientific computing it's

00:30:52,790 --> 00:30:57,200
common to need to run on some

00:30:55,250 --> 00:31:00,500
transformation some computing awesome

00:30:57,200 --> 00:31:03,760
data take the output of that run it

00:31:00,500 --> 00:31:06,410
again on something else a workflow and

00:31:03,760 --> 00:31:10,670
so they're working on a language to use

00:31:06,410 --> 00:31:12,700
the geeks primitives in a both both in

00:31:10,670 --> 00:31:17,480
the executable way I've executed my

00:31:12,700 --> 00:31:21,620
geeks workflow but also in a this is a

00:31:17,480 --> 00:31:25,309
way that we've written it down in a way

00:31:21,620 --> 00:31:29,120
that can be reproduced later I can use

00:31:25,309 --> 00:31:30,890
the geeks tooling to not only build the

00:31:29,120 --> 00:31:32,570
current software but but build software

00:31:30,890 --> 00:31:35,480
from a previous release of geek so I can

00:31:32,570 --> 00:31:38,440
encode that in there and the geeks

00:31:35,480 --> 00:31:41,090
tubular kernel is the same same way I

00:31:38,440 --> 00:31:43,100
have a Jupiter notebook where at the

00:31:41,090 --> 00:31:45,110
beginning I described the computing

00:31:43,100 --> 00:31:48,260
environment I need to run the rest of

00:31:45,110 --> 00:31:50,770
the notebook and Geeks deploy was this

00:31:48,260 --> 00:31:53,809
summer's google Summer of Code project

00:31:50,770 --> 00:31:55,880
to instead of using the geeks commands

00:31:53,809 --> 00:31:59,120
locally to manipulate my local store I

00:31:55,880 --> 00:32:01,880
can build up systems that I need and

00:31:59,120 --> 00:32:04,760
send them and deploy them to remote

00:32:01,880 --> 00:32:08,570
systems so rat rather than that complex

00:32:04,760 --> 00:32:11,150
container it's in that same space as

00:32:08,570 --> 00:32:13,970
kubernetes but instead of a whole

00:32:11,150 --> 00:32:18,610
separate software stack I've been able

00:32:13,970 --> 00:32:21,620
to I I have named two one one one

00:32:18,610 --> 00:32:23,840
motivated mentor and rule summer host

00:32:21,620 --> 00:32:27,980
who was able to use the geeks primitives

00:32:23,840 --> 00:32:29,390
to build up a something that is in the

00:32:27,980 --> 00:32:32,070
same space and answers those questions

00:32:29,390 --> 00:32:35,850
in a different way

00:32:32,070 --> 00:32:40,409
so thank you there's there's much more

00:32:35,850 --> 00:32:42,899
to geeks but that's that's how it has

00:32:40,409 --> 00:33:09,649
improved my life and I wanted to share

00:32:42,899 --> 00:33:15,470
with you I'll take questions oh yeah so

00:33:09,649 --> 00:33:15,470
you're thinking like four and any like

00:33:19,220 --> 00:33:26,609
right so so for most of the softest

00:33:23,729 --> 00:33:29,039
package of geeks is live somewhere else

00:33:26,609 --> 00:33:32,009
and so that's what what goes in the

00:33:29,039 --> 00:33:34,950
package definitions so many things are

00:33:32,009 --> 00:33:37,190
available like veil will be a Samara

00:33:34,950 --> 00:33:39,269
Network and that's a coding geeks I

00:33:37,190 --> 00:33:43,889
mentioned that geeks has this community

00:33:39,269 --> 00:33:47,070
build farm so when that build farm

00:33:43,889 --> 00:33:49,499
fetches the code to build it locally it

00:33:47,070 --> 00:33:52,499
also fetches the source and it's running

00:33:49,499 --> 00:33:53,820
that geeks publish service and so most

00:33:52,499 --> 00:33:55,830
of the time when I download source

00:33:53,820 --> 00:33:59,249
either to build locally or because I

00:33:55,830 --> 00:34:02,609
want to explore it on my machine it's

00:33:59,249 --> 00:34:04,470
pulling from the the store items that

00:34:02,609 --> 00:34:07,409
represent the original source of the

00:34:04,470 --> 00:34:12,000
build forum pulled down front from that

00:34:07,409 --> 00:34:18,089
from this geek CI mirror server is that

00:34:12,000 --> 00:34:21,200
does that answer the question right it's

00:34:18,089 --> 00:34:21,200
almost like a cache

00:34:29,020 --> 00:34:33,830
yeah

00:34:30,230 --> 00:34:35,060
so so right so yes you can do any

00:34:33,830 --> 00:34:37,450
manipulation in the source in fact

00:34:35,060 --> 00:34:40,610
that's how the eiscat source works

00:34:37,450 --> 00:34:42,370
instead of instead of having someone run

00:34:40,610 --> 00:34:44,390
a script on the computer to generate the

00:34:42,370 --> 00:34:47,230
the icecap source which is a

00:34:44,390 --> 00:34:49,940
transformation of the firefox source

00:34:47,230 --> 00:34:53,300
it's encoded in the package definition

00:34:49,940 --> 00:34:57,740
and the output of that has has a hash

00:34:53,300 --> 00:35:01,840
that's not not based on the the content

00:34:57,740 --> 00:35:04,220
of the output but it's known known at

00:35:01,840 --> 00:35:05,720
evaluation time when when the

00:35:04,220 --> 00:35:08,840
instructions are read based on the

00:35:05,720 --> 00:35:11,630
inputs and what the instructions are so

00:35:08,840 --> 00:35:13,160
my geeks can look at what the inputs are

00:35:11,630 --> 00:35:16,790
and the instructions for forgetting the

00:35:13,160 --> 00:35:24,950
source and know which store item to ask

00:35:16,790 --> 00:35:26,690
for from the from the CI server right

00:35:24,950 --> 00:35:28,670
and there's some fallback if it's if

00:35:26,690 --> 00:35:32,420
it's cache it gets it if not then then

00:35:28,670 --> 00:35:35,300
it looks at the looks at the URL in

00:35:32,420 --> 00:35:37,060
there and pulls it down Geeks has a

00:35:35,300 --> 00:35:41,630
partnership also with software heritage

00:35:37,060 --> 00:35:53,000
which is a project to create an archive

00:35:41,630 --> 00:35:54,920
of available source right because

00:35:53,000 --> 00:35:58,610
because it's been added because it's

00:35:54,920 --> 00:36:03,440
been added to it but so that one is that

00:35:58,610 --> 00:36:05,540
is is what's in official geeks so the

00:36:03,440 --> 00:36:07,520
there's a geeks repository that both

00:36:05,540 --> 00:36:09,590
contains the code for geeks itself and

00:36:07,520 --> 00:36:10,640
all the package definitions and when I

00:36:09,590 --> 00:36:12,290
when I upgrade geeks

00:36:10,640 --> 00:36:14,570
I just get a new version of geek who's

00:36:12,290 --> 00:36:17,870
just the new geeks code and the new

00:36:14,570 --> 00:36:19,250
package definitions there's unlike after

00:36:17,870 --> 00:36:22,550
yum there's not a separate package

00:36:19,250 --> 00:36:26,020
definition list so so this this one CI

00:36:22,550 --> 00:36:28,700
Keeks dot get new org the official one

00:36:26,020 --> 00:36:31,670
has the packages for that if if you had

00:36:28,700 --> 00:36:34,790
your own right if you added your own

00:36:31,670 --> 00:36:37,610
packages in your own geeks has has

00:36:34,790 --> 00:36:39,170
language for pulling in extra packages

00:36:37,610 --> 00:36:41,539
and extra services

00:36:39,170 --> 00:36:46,549
via a channel mechanism essentially

00:36:41,539 --> 00:36:50,690
adding more scheme library names to

00:36:46,549 --> 00:36:52,849
there you can find packages in and those

00:36:50,690 --> 00:36:56,599
would not be present you'd have to run

00:36:52,849 --> 00:36:58,849
your own geeks publish instance which if

00:36:56,599 --> 00:37:00,349
you evaluated your packages regularly

00:36:58,849 --> 00:37:07,359
would pull them the source and make them

00:37:00,349 --> 00:37:07,359
available if you had that mechanism yes

00:37:10,630 --> 00:37:16,249
yes yep

00:37:13,789 --> 00:37:21,739
there's a there's a geek sub-command

00:37:16,249 --> 00:37:32,569
geeks challenge yeah I saw one in the

00:37:21,739 --> 00:37:37,999
back it occurs to me that should repeat

00:37:32,569 --> 00:37:42,170
the questions so the question was how do

00:37:37,999 --> 00:37:44,230
does geeks deal with modify packages

00:37:42,170 --> 00:37:50,239
with different prefix or different

00:37:44,230 --> 00:37:54,859
configuration flags right right now nah

00:37:50,239 --> 00:37:56,539
it's a you gotta separate it gets a

00:37:54,859 --> 00:38:00,529
separate store location with a separate

00:37:56,539 --> 00:38:02,329
hash there's no out of the box there's

00:38:00,529 --> 00:38:04,759
no parametrized packages like you might

00:38:02,329 --> 00:38:07,190
see or you slags in in Gen 2 I think in

00:38:04,759 --> 00:38:10,749
geeks the the discussion on the mailing

00:38:07,190 --> 00:38:10,749
list calls them parameterize packages

00:38:13,660 --> 00:38:21,319
the the experience isn't that great it

00:38:17,900 --> 00:38:23,420
depends if it's a leaf package well in

00:38:21,319 --> 00:38:26,809
my package definition instead of

00:38:23,420 --> 00:38:29,480
repeating everything I can use scheme

00:38:26,809 --> 00:38:33,799
just to manipulate and change the values

00:38:29,480 --> 00:38:36,109
I want and there's some command-line UI

00:38:33,799 --> 00:38:38,569
for if I wanted to change an input for a

00:38:36,109 --> 00:38:39,920
package but the problem with this with

00:38:38,569 --> 00:38:43,989
the with the tracking all the

00:38:39,920 --> 00:38:43,989
dependencies if it's not a leaf package

00:38:44,170 --> 00:38:49,700
then everything that use that its input

00:38:47,869 --> 00:38:52,660
would have changed and will have to be

00:38:49,700 --> 00:38:56,510
rebuilt so that's

00:38:52,660 --> 00:39:00,110
you know it trades that flexibility for

00:38:56,510 --> 00:39:02,540
increased computation and and and time

00:39:00,110 --> 00:39:05,380
now you can build the whole geeks not

00:39:02,540 --> 00:39:08,990
use can you store to use a different

00:39:05,380 --> 00:39:10,100
location but then you can't use any of

00:39:08,990 --> 00:39:11,360
the community built packages because

00:39:10,100 --> 00:39:32,020
they all have all the paths coded in

00:39:11,360 --> 00:39:36,710
them sure it depends on the application

00:39:32,020 --> 00:39:38,600
so we'll start with the drawback the the

00:39:36,710 --> 00:39:41,570
problem with geeks but I think any

00:39:38,600 --> 00:39:43,400
system like this is that neat you need

00:39:41,570 --> 00:39:46,040
to encode the world those are the

00:39:43,400 --> 00:39:48,890
question was would you use this for

00:39:46,040 --> 00:39:50,990
managing an application the the top

00:39:48,890 --> 00:39:53,660
layer of your your software instead the

00:39:50,990 --> 00:39:55,220
bottom layer system dependencies but the

00:39:53,660 --> 00:39:56,570
so the problem with geeks are any system

00:39:55,220 --> 00:39:59,180
like this is you have to encode the

00:39:56,570 --> 00:40:05,360
world in geeks so they can manipulate it

00:39:59,180 --> 00:40:07,610
with what the geeks features in the case

00:40:05,360 --> 00:40:10,880
of our Ruby apps at work we can't

00:40:07,610 --> 00:40:17,300
there's the the dependencies are too

00:40:10,880 --> 00:40:20,330
numerous I have used it for for giving

00:40:17,300 --> 00:40:23,210
me just works like functionality for the

00:40:20,330 --> 00:40:25,580
parts that NPM or Ruby gems wouldn't

00:40:23,210 --> 00:40:27,440
handle well so so that 3d modeling

00:40:25,580 --> 00:40:28,700
application I mentioned uses blender to

00:40:27,440 --> 00:40:33,080
do some of the transformations along

00:40:28,700 --> 00:40:34,460
with a Python plugin yeah and and it's

00:40:33,080 --> 00:40:35,960
really nice to be able to use geeks as a

00:40:34,460 --> 00:40:38,960
user space package manager' top of my

00:40:35,960 --> 00:40:41,720
thing there's so weeks is not the only

00:40:38,960 --> 00:40:43,430
distribution that uses this model of the

00:40:41,720 --> 00:40:48,730
store and tracking dependencies the

00:40:43,430 --> 00:40:48,730
other one is Nix and IX Nick sauce org

00:40:49,510 --> 00:40:55,580
they I talked about that the free

00:40:53,750 --> 00:40:58,970
software principles and geeks wants to

00:40:55,580 --> 00:41:00,830
build everything from source a Nix has a

00:40:58,970 --> 00:41:01,760
different community aspect to it so a

00:41:00,830 --> 00:41:03,200
lot of the same things but they have a

00:41:01,760 --> 00:41:04,520
different language that's not a

00:41:03,200 --> 00:41:06,110
general-purpose programming language is

00:41:04,520 --> 00:41:06,620
specific to that but one the other

00:41:06,110 --> 00:41:11,830
things

00:41:06,620 --> 00:41:16,370
it's different is there more willing to

00:41:11,830 --> 00:41:18,320
to add binary seeds so these has

00:41:16,370 --> 00:41:20,570
essentially no JavaScript packages

00:41:18,320 --> 00:41:23,620
because the JavaScript the base of the

00:41:20,570 --> 00:41:26,420
JavaScript build tooling is not

00:41:23,620 --> 00:41:29,120
buildable from source especially all the

00:41:26,420 --> 00:41:31,610
dev dependencies and test but Nix is

00:41:29,120 --> 00:41:35,960
willing to import the binaries and so as

00:41:31,610 --> 00:41:38,510
much better coverage of npm a lot of the

00:41:35,960 --> 00:41:41,030
packages is a separate thing that might

00:41:38,510 --> 00:41:47,260
make encoding software and Geeks easier

00:41:41,030 --> 00:41:49,880
is that most packages don't require

00:41:47,260 --> 00:41:51,260
custom fixes to get them to build and so

00:41:49,880 --> 00:41:53,840
the build recipes can be produced

00:41:51,260 --> 00:41:58,250
automatically so both geeks and Nix have

00:41:53,840 --> 00:42:00,140
quote importers and so I if I get if I'm

00:41:58,250 --> 00:42:03,610
able to have the basis dependencies in

00:42:00,140 --> 00:42:05,660
point an importer at NPM or pi PI and

00:42:03,610 --> 00:42:08,300
automatically create package definitions

00:42:05,660 --> 00:42:09,500
which you know I'm probably not up to

00:42:08,300 --> 00:42:15,260
the quality of distributing a part of

00:42:09,500 --> 00:42:16,610
the distribution but for a local local

00:42:15,260 --> 00:42:18,190
software that I know it has this list

00:42:16,610 --> 00:42:20,750
dependencies and I want to manage it

00:42:18,190 --> 00:42:23,230
with geeks who Nix for whatever reason I

00:42:20,750 --> 00:42:23,230
could do that

00:42:31,740 --> 00:42:36,930
okay is there anything else anything

00:42:33,780 --> 00:42:39,869
you'd like to see we can tempt the demo

00:42:36,930 --> 00:42:42,000
I I didn't I don't have a demo plan but

00:42:39,869 --> 00:42:44,339
I do obviously I have a Xiao LAN this on

00:42:42,000 --> 00:42:58,349
the system so this link diffent you want

00:42:44,339 --> 00:43:04,820
to see I could show it well I will I

00:42:58,349 --> 00:43:11,460
will remember how to use my computer so

00:43:04,820 --> 00:43:14,280
what i'm going i will show the i'll show

00:43:11,460 --> 00:43:17,099
the the recipe or the instructions i

00:43:14,280 --> 00:43:20,970
have for geeks for producing my little

00:43:17,099 --> 00:43:23,970
view of the world that that I use for my

00:43:20,970 --> 00:43:25,380
daily software it may not actually

00:43:23,970 --> 00:43:38,310
conform to the best practice and we'll

00:43:25,380 --> 00:43:40,680
talk about that in a minute so here I'm

00:43:38,310 --> 00:43:48,240
using the geek system distribution so so

00:43:40,680 --> 00:43:54,060
the whole thing I'll make this bigger in

00:43:48,240 --> 00:43:56,240
a second so of course I've I've captured

00:43:54,060 --> 00:44:06,410
all the the whole operating system

00:43:56,240 --> 00:44:10,589
configurations and my my user space

00:44:06,410 --> 00:44:13,080
thing you know in a git repository it

00:44:10,589 --> 00:44:16,770
says some boilerplate I'm going to be an

00:44:13,080 --> 00:44:20,180
inflating some modules and so I've have

00:44:16,770 --> 00:44:20,180
to have to import them all

00:44:22,950 --> 00:44:30,390
so so here I'm just creating a list a

00:44:26,579 --> 00:44:32,160
list of strings that that correspond to

00:44:30,390 --> 00:44:35,880
package names I wanted my view of the

00:44:32,160 --> 00:44:38,190
world and you know I have some some

00:44:35,880 --> 00:44:40,829
scheme for doing this so this may not be

00:44:38,190 --> 00:44:42,299
the best practice anymore there depends

00:44:40,829 --> 00:44:44,339
on give me my best practice but but

00:44:42,299 --> 00:44:45,410
there's been some recent work by by some

00:44:44,339 --> 00:44:49,710
people and Geeks

00:44:45,410 --> 00:44:52,680
to support not this is great but this is

00:44:49,710 --> 00:44:57,210
not a game in back into that one

00:44:52,680 --> 00:44:59,609
one big view but to to encourage users

00:44:57,210 --> 00:45:02,069
and help users to instead slice up their

00:44:59,609 --> 00:45:05,730
view for different tasks that they do

00:45:02,069 --> 00:45:07,650
and only load some of them on demand it

00:45:05,730 --> 00:45:09,630
makes it quicker to build building that

00:45:07,650 --> 00:45:12,059
profile on my laptop is actually quite

00:45:09,630 --> 00:45:14,069
slow because it has to go through and

00:45:12,059 --> 00:45:17,730
figure out the symlinks the disk in here

00:45:14,069 --> 00:45:19,319
is really slow but you know if I don't

00:45:17,730 --> 00:45:24,630
need if I don't need all this sound

00:45:19,319 --> 00:45:26,450
stuff but once a month why I had that

00:45:24,630 --> 00:45:35,280
polluting my environment all the time

00:45:26,450 --> 00:45:37,559
but it's a long list so so in in scheme

00:45:35,280 --> 00:45:40,130
and other lists semicolon is a comment

00:45:37,559 --> 00:45:44,130
character and the triple semicolon was

00:45:40,130 --> 00:45:46,950
so it is more that the extra ones are

00:45:44,130 --> 00:45:50,640
for users not for the computer so it's

00:45:46,950 --> 00:45:51,869
from for me because I wasn't sure about

00:45:50,640 --> 00:45:54,390
that stuff and I wanted to find it again

00:45:51,869 --> 00:45:56,400
and perhaps take it out and just remind

00:45:54,390 --> 00:45:59,910
myself of like yeah I should clean this

00:45:56,400 --> 00:46:05,510
up so I had that I had this big long

00:45:59,910 --> 00:46:08,369
list and then they had this thing so I

00:46:05,510 --> 00:46:12,780
was doing some graphics work at some

00:46:08,369 --> 00:46:14,910
point and I got tired of faulting in the

00:46:12,780 --> 00:46:16,140
font I wanted to to use what I just

00:46:14,910 --> 00:46:17,400
wanted to be able to look at them all

00:46:16,140 --> 00:46:19,589
and like flip through them and say like

00:46:17,400 --> 00:46:21,210
which one do I like the best here so I

00:46:19,589 --> 00:46:23,579
decided well I have plenty of disk space

00:46:21,210 --> 00:46:26,790
why don't I just install all the font

00:46:23,579 --> 00:46:30,839
packages and Geeks rather than

00:46:26,790 --> 00:46:32,940
statically create this list I'm using

00:46:30,839 --> 00:46:34,859
the programming interface to to do a

00:46:32,940 --> 00:46:37,140
regular expression match against the

00:46:34,859 --> 00:46:42,029
package names which

00:46:37,140 --> 00:46:43,979
by convention start font - and and get

00:46:42,029 --> 00:46:49,469
them also when a new font is added to

00:46:43,979 --> 00:46:51,630
geeks and I tell it that I want my my

00:46:49,469 --> 00:46:55,319
view of the world built again using

00:46:51,630 --> 00:46:59,219
using the new geeks I will add that so

00:46:55,319 --> 00:47:00,359
my font list never go stale the the

00:46:59,219 --> 00:47:04,909
other the other thing I'm doing in here

00:47:00,359 --> 00:47:04,909
is I've I've put a package definition

00:47:11,480 --> 00:47:17,930
in this file why have I done this there

00:47:14,240 --> 00:47:19,520
was a bug in the and then the newer

00:47:17,930 --> 00:47:26,630
version of Alpine that crashed you might

00:47:19,520 --> 00:47:28,150
talk to my works SMTP server but I mean

00:47:26,630 --> 00:47:31,340
it'll hold just this one package back

00:47:28,150 --> 00:47:38,240
and it still gets built against the

00:47:31,340 --> 00:47:41,180
newer SSL libraries so so that's nice so

00:47:38,240 --> 00:47:43,160
so here I I have just pulled in the

00:47:41,180 --> 00:47:43,850
whole whole package definition wholesale

00:47:43,160 --> 00:47:50,000
and that's why there's so many

00:47:43,850 --> 00:47:51,830
dependencies and then and then my this

00:47:50,000 --> 00:47:54,770
so so how this thing works

00:47:51,830 --> 00:47:56,750
is it it returns a manifest object and

00:47:54,770 --> 00:47:59,080
that's that's a language for that view

00:47:56,750 --> 00:48:02,480
into the store when I did in the demo

00:47:59,080 --> 00:48:06,830
the the view that had Emacs cows a and

00:48:02,480 --> 00:48:11,270
hello it created a manifest and then and

00:48:06,830 --> 00:48:12,740
built built that so the way a lot of

00:48:11,270 --> 00:48:15,290
these program phrases work is just the

00:48:12,740 --> 00:48:16,820
last thing it returns geek expects a

00:48:15,290 --> 00:48:19,040
certain type of object so I can do

00:48:16,820 --> 00:48:21,500
arbitrary scheme work as long as the

00:48:19,040 --> 00:48:23,420
last statement returns that and so this

00:48:21,500 --> 00:48:26,330
last thing returns a manifest

00:48:23,420 --> 00:48:29,600
that's based on that's based on the

00:48:26,330 --> 00:48:32,720
specs and that font and this and alpine

00:48:29,600 --> 00:48:39,250
that I created in here the the other

00:48:32,720 --> 00:48:39,250
thing that that is interesting to them

00:48:42,580 --> 00:48:48,380
so so this is this is the the scheme

00:48:46,090 --> 00:48:50,720
thing that defines what my operating

00:48:48,380 --> 00:48:54,550
system config is so in the same way I

00:48:50,720 --> 00:48:57,410
just need to at the end return and

00:48:54,550 --> 00:49:02,000
operating system objects so the rest of

00:48:57,410 --> 00:49:07,220
this builds operating system object with

00:49:02,000 --> 00:49:09,440
hostname and bootloader can fake have my

00:49:07,220 --> 00:49:12,050
my disk scheme in there

00:49:09,440 --> 00:49:14,200
user accounts or managed in there and so

00:49:12,050 --> 00:49:18,560
extra packages

00:49:14,200 --> 00:49:21,950
you know services I want running I've

00:49:18,560 --> 00:49:25,339
created this custom service for adding

00:49:21,950 --> 00:49:28,729
you dev rules because the you dev rules

00:49:25,339 --> 00:49:32,509
or my second factor token or not present

00:49:28,729 --> 00:49:33,920
also for my scanners but I can just pick

00:49:32,509 --> 00:49:37,279
extra packages and so rather than how

00:49:33,920 --> 00:49:40,309
the distribution have to ship everything

00:49:37,279 --> 00:49:43,969
under the world that might cause

00:49:40,309 --> 00:49:52,940
problems under some circumstances you

00:49:43,969 --> 00:49:54,619
know so I saw those oops there's a

00:49:52,940 --> 00:49:56,239
default list of services but in my case

00:49:54,619 --> 00:49:58,819
that wasn't appropriate for my machines

00:49:56,239 --> 00:50:00,650
I've added some you can you can filter

00:49:58,819 --> 00:50:03,109
so this is just a scheme list so you can

00:50:00,650 --> 00:50:19,759
filter and remove them Exeter so that's

00:50:03,109 --> 00:50:21,140
the that's the demo sure I not not that

00:50:19,759 --> 00:50:25,549
I not that I know of

00:50:21,140 --> 00:50:28,549
so the NIT the next one is is in their

00:50:25,549 --> 00:50:30,469
own language so NYX is very popular with

00:50:28,549 --> 00:50:32,269
Haskell errs and there's there's a real

00:50:30,469 --> 00:50:36,019
imitation of the NYX language which is

00:50:32,269 --> 00:50:38,539
Perl and shell spaghetti in Haskell

00:50:36,019 --> 00:50:40,099
which is sort of interesting

00:50:38,539 --> 00:50:42,680
this doesn't answer your question about

00:50:40,099 --> 00:50:45,440
if someone is going to rewrite geeks and

00:50:42,680 --> 00:50:48,219
Python but in some ways scheme isn't

00:50:45,440 --> 00:50:55,190
that far from Python in some ways it is

00:50:48,219 --> 00:50:57,229
but the various core components I think

00:50:55,190 --> 00:51:00,079
GL obscene latest versions depends on

00:50:57,229 --> 00:51:06,079
Python for some of the build tooling or

00:51:00,079 --> 00:51:07,910
at least the tests but ad for guile the

00:51:06,079 --> 00:51:10,670
scheme language is not the only language

00:51:07,910 --> 00:51:14,749
the the guy'll system supports it also

00:51:10,670 --> 00:51:18,229
supports Emacs Lisp maybe JavaScript but

00:51:14,749 --> 00:51:19,900
but also there are people working on at

00:51:18,229 --> 00:51:23,839
least running enough Python to build

00:51:19,900 --> 00:51:25,190
build the G Lipsy tests on top of a guy

00:51:23,839 --> 00:51:26,450
I also want your bootstrap guile then

00:51:25,190 --> 00:51:30,259
then you have to worry about

00:51:26,450 --> 00:51:34,509
bootstrapping GFC so that you can build

00:51:30,259 --> 00:51:34,509
Python to build G Lipsy

00:51:35,980 --> 00:51:40,490
all right so I think I'm at time but

00:51:38,900 --> 00:51:45,640
sorry

00:51:40,490 --> 00:51:53,610
but it'd all be around thank you

00:51:45,640 --> 00:51:53,610

YouTube URL: https://www.youtube.com/watch?v=YDc7wXe5o98


