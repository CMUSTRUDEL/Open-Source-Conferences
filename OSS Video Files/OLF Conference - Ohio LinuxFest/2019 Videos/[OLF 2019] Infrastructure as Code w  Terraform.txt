Title: [OLF 2019] Infrastructure as Code w  Terraform
Publication date: 2019-12-28
Playlist: 2019 Videos
Description: 
	Speaker: Greg Greenlee
Slides: https://ohiolinux.org/wp-content/uploads/2019/11/2019-Infrastructure_as_Code_with_Terraform.pdf
Videographer: Ernest Parke

In this presentation I will introduce the practice of Infrastructure as Code. I will present to the audience what IaC is, why itâ€™s needed and then proceed to showing how you can practice IaC using Hashicorpâ€™s Terraform. I will walk the audience through the Terraform language (variables, data structures, iterations, conditionals) and how to use Terraform to begin building infrastructure in AWS. The presentation will end with a short demo of Terraform.
Captions: 
	00:00:02,300 --> 00:00:08,630
good morning everyone welcome to my talk

00:00:05,399 --> 00:00:12,540
infrastructure as code with terraform

00:00:08,630 --> 00:00:14,670
anybody using terraform right now okay

00:00:12,540 --> 00:00:16,950
fair amount of good amount of people

00:00:14,670 --> 00:00:20,990
anybody familiar with infrastructure is

00:00:16,950 --> 00:00:24,570
cold besides the people who raise them

00:00:20,990 --> 00:00:27,900
excellent excellent so to some of you

00:00:24,570 --> 00:00:30,720
this is new this is not a very super

00:00:27,900 --> 00:00:32,790
in-depth talk about terraform I'll give

00:00:30,720 --> 00:00:34,950
you an overview because it'll take a lot

00:00:32,790 --> 00:00:36,570
longer to go through all the nooks and

00:00:34,950 --> 00:00:39,090
crannies of terraform so I'll give you a

00:00:36,570 --> 00:00:42,079
pretty good overview of it what it's

00:00:39,090 --> 00:00:52,350
capable of and how you use it

00:00:42,079 --> 00:00:57,120
so Who am I okay it's yeah so Greg

00:00:52,350 --> 00:01:01,500
Greenlee I am a DevOps engineer for

00:00:57,120 --> 00:01:03,390
insight insight I have talking points

00:01:01,500 --> 00:01:07,260
here I have two we're a digital

00:01:03,390 --> 00:01:10,200
innovation company we do cloud

00:01:07,260 --> 00:01:12,930
enablement data and AI DevOps digital

00:01:10,200 --> 00:01:15,060
strategy intelligent applications IOT

00:01:12,930 --> 00:01:18,180
and smart edge transformation services

00:01:15,060 --> 00:01:20,820
so we pretty much run the gamut of of IT

00:01:18,180 --> 00:01:22,790
solutions we are hiring for DevOps

00:01:20,820 --> 00:01:27,180
engineers so if anyone is interested in

00:01:22,790 --> 00:01:29,369
site.com I'm also the organizer and

00:01:27,180 --> 00:01:32,040
founder of the blocks and Technology

00:01:29,369 --> 00:01:33,450
organisation where organization focused

00:01:32,040 --> 00:01:35,790
on increasing the participation and

00:01:33,450 --> 00:01:38,880
representation of black women and men in

00:01:35,790 --> 00:01:42,380
tech from born and raised in Cincinnati

00:01:38,880 --> 00:01:46,140
certified Jedi Knight I trained at a

00:01:42,380 --> 00:01:48,479
dagger bar system 19 all right Linux

00:01:46,140 --> 00:01:53,060
enthusiasts comic book enthusiasts as

00:01:48,479 --> 00:01:53,060
well husband and father

00:01:53,210 --> 00:01:59,369
so our agenda for today is what is IAC

00:01:57,119 --> 00:02:00,119
or infrastructure Isco what are some of

00:01:59,369 --> 00:02:01,860
the benefits

00:02:00,119 --> 00:02:04,829
what is terraform why don't we need

00:02:01,860 --> 00:02:07,799
terraform how do we use Sara form we'll

00:02:04,829 --> 00:02:09,660
go through some of the terrifying

00:02:07,799 --> 00:02:11,760
objects such as providers resources

00:02:09,660 --> 00:02:14,680
variables all that good stuff and then

00:02:11,760 --> 00:02:17,109
how do I get started

00:02:14,680 --> 00:02:19,150
is gonna do a demo but the the laptop

00:02:17,109 --> 00:02:21,000
that had the demo stuff went kaput so

00:02:19,150 --> 00:02:23,709
I'm not gonna demo today

00:02:21,000 --> 00:02:26,769
all right what is infrastructure it's

00:02:23,709 --> 00:02:28,540
cold basically it's the ability to

00:02:26,769 --> 00:02:30,099
describe and define your infrastructure

00:02:28,540 --> 00:02:33,129
and application or source code

00:02:30,099 --> 00:02:35,859
right and tear form you use what's

00:02:33,129 --> 00:02:38,769
called a terraform manifest you just you

00:02:35,859 --> 00:02:41,560
declare what you want the resources that

00:02:38,769 --> 00:02:44,469
you want how they connect and then it

00:02:41,560 --> 00:02:46,000
pretty much goes out and to any of the

00:02:44,469 --> 00:02:49,150
cloud providers or any provider that you

00:02:46,000 --> 00:02:53,109
specify and it builds the resources that

00:02:49,150 --> 00:02:54,189
you declare and there's other tools that

00:02:53,109 --> 00:02:59,079
do this as well

00:02:54,189 --> 00:03:00,750
AWS CloudFormation as ur has arm

00:02:59,079 --> 00:03:03,480
templates

00:03:00,750 --> 00:03:07,569
google has wizardry or magic

00:03:03,480 --> 00:03:09,969
so there's a few of them out there that

00:03:07,569 --> 00:03:14,530
do this type of thing some of the

00:03:09,969 --> 00:03:16,540
benefits of infrastructure is cold now

00:03:14,530 --> 00:03:19,840
since your your infrastructure is

00:03:16,540 --> 00:03:22,239
declare and describe in software right

00:03:19,840 --> 00:03:24,129
you can pretty much use software

00:03:22,239 --> 00:03:26,799
methodologies tools and practices in

00:03:24,129 --> 00:03:30,220
order to kind of govern how you would

00:03:26,799 --> 00:03:32,530
how you use it so code reviews automated

00:03:30,220 --> 00:03:34,720
testing linting all those now apply

00:03:32,530 --> 00:03:37,780
because your infrastructure is now

00:03:34,720 --> 00:03:39,299
described in cold there's other benefits

00:03:37,780 --> 00:03:42,639
as well

00:03:39,299 --> 00:03:45,069
automation right now that your

00:03:42,639 --> 00:03:47,049
infrastructure is described in code now

00:03:45,069 --> 00:03:49,449
you can put that code in a pipeline and

00:03:47,049 --> 00:03:56,099
you can automate the building of your

00:03:49,449 --> 00:03:58,419
infrastructure version control right

00:03:56,099 --> 00:04:02,699
what's version do you like right do you

00:03:58,419 --> 00:04:05,530
now that now that you're using your your

00:04:02,699 --> 00:04:07,229
infrastructure is described in code now

00:04:05,530 --> 00:04:12,489
you converge your controller now you can

00:04:07,229 --> 00:04:14,979
commit it to a git repo and you can tag

00:04:12,489 --> 00:04:16,539
it and so now you can add features you

00:04:14,979 --> 00:04:18,280
can work on it the same way you would do

00:04:16,539 --> 00:04:21,669
with software collaboratively with your

00:04:18,280 --> 00:04:23,500
team they can check out branches but

00:04:21,669 --> 00:04:26,680
create branches they can commit code

00:04:23,500 --> 00:04:28,260
backup to master and now you can choose

00:04:26,680 --> 00:04:30,870
now it gives you the ability to

00:04:28,260 --> 00:04:32,880
hey I'm working on this feature I'm

00:04:30,870 --> 00:04:35,010
going to commit this now I'm going to

00:04:32,880 --> 00:04:38,010
tag it and now we're running with

00:04:35,010 --> 00:04:40,340
feature 1.1 and if something happens

00:04:38,010 --> 00:04:43,020
dude your automated testing it and fine

00:04:40,340 --> 00:04:47,280
then you can roll it back right now you

00:04:43,020 --> 00:04:49,380
can go back to 1.0 and so you can either

00:04:47,280 --> 00:04:53,070
use the Christian Bale version or you

00:04:49,380 --> 00:04:59,250
can use Ben Affleck version or you can

00:04:53,070 --> 00:05:01,530
use Adam West's version so that's that's

00:04:59,250 --> 00:05:03,840
you know a real a really good and

00:05:01,530 --> 00:05:05,460
powerful way of dealing with your

00:05:03,840 --> 00:05:09,170
infrastructures cause now that isn't

00:05:05,460 --> 00:05:14,130
software you can version control

00:05:09,170 --> 00:05:16,710
rollbacks right now you can describe

00:05:14,130 --> 00:05:18,330
earlier you can go backwards now if you

00:05:16,710 --> 00:05:20,070
deploy something in master and you

00:05:18,330 --> 00:05:24,210
deploy that out to production something

00:05:20,070 --> 00:05:26,550
breaks that you didn't participate right

00:05:24,210 --> 00:05:29,580
now you can roll that back all it takes

00:05:26,550 --> 00:05:32,940
is a change in a tag in your pipeline

00:05:29,580 --> 00:05:36,030
which version you want to which version

00:05:32,940 --> 00:05:39,600
you want to use announce announce easily

00:05:36,030 --> 00:05:45,270
wrote back from Thor $1.00 to Thor one

00:05:39,600 --> 00:05:46,350
dot no documentation did I skip one I

00:05:45,270 --> 00:05:50,220
don't think so

00:05:46,350 --> 00:05:53,880
let's see yeah I didn't documentation

00:05:50,220 --> 00:05:56,520
right your software is or your

00:05:53,880 --> 00:05:58,890
infrastructure is now in coal so that

00:05:56,520 --> 00:06:01,320
automatically gives you the ability or

00:05:58,890 --> 00:06:03,450
gives you documentation everything is

00:06:01,320 --> 00:06:06,810
described in your and your

00:06:03,450 --> 00:06:09,630
infrastructure is cold manifests so for

00:06:06,810 --> 00:06:12,060
instance you bring on a new DevOps

00:06:09,630 --> 00:06:14,250
engineer or and they want to know how

00:06:12,060 --> 00:06:16,560
things are connected what resources are

00:06:14,250 --> 00:06:18,840
out there in your clout now all you have

00:06:16,560 --> 00:06:20,730
to do is show them a source code right

00:06:18,840 --> 00:06:24,690
and that's that gives you automatic

00:06:20,730 --> 00:06:26,990
documentation also there's correlation

00:06:24,690 --> 00:06:30,000
there's visibility there's traceability

00:06:26,990 --> 00:06:33,900
this to be gained by infrastructure as

00:06:30,000 --> 00:06:36,360
code alright so we're going to move into

00:06:33,900 --> 00:06:38,070
what is terraform we already talked

00:06:36,360 --> 00:06:39,720
about infrastructure is cold so that's

00:06:38,070 --> 00:06:40,680
what it is it's a management tool that

00:06:39,720 --> 00:06:42,030
you

00:06:40,680 --> 00:06:44,759
is a declarative language to build

00:06:42,030 --> 00:06:48,930
infrastructure so written and go you can

00:06:44,759 --> 00:06:50,160
check it out in terraformed IO and you

00:06:48,930 --> 00:06:53,340
pretty much to write your infrastructure

00:06:50,160 --> 00:06:56,070
you plant it there is a command called

00:06:53,340 --> 00:06:57,930
terraform plan and it allows you to see

00:06:56,070 --> 00:07:00,840
the changes you're going to make before

00:06:57,930 --> 00:07:03,410
you actually make them and then there's

00:07:00,840 --> 00:07:06,660
a terraform apply and that allows you to

00:07:03,410 --> 00:07:09,270
create that infrastructure that you just

00:07:06,660 --> 00:07:11,009
specified or just declare and the cool

00:07:09,270 --> 00:07:14,580
thing about this is it's reproducible

00:07:11,009 --> 00:07:17,220
you do it once and it may take some time

00:07:14,580 --> 00:07:19,590
for you to actually describe our your

00:07:17,220 --> 00:07:23,449
infrastructure in code but you do it

00:07:19,590 --> 00:07:26,039
once and now you have that template for

00:07:23,449 --> 00:07:28,050
various different environments so you

00:07:26,039 --> 00:07:30,840
might have one for a product might you

00:07:28,050 --> 00:07:32,669
can use that same template for dev and

00:07:30,840 --> 00:07:35,400
you can use that same template for tests

00:07:32,669 --> 00:07:38,880
or whatever environments that you have

00:07:35,400 --> 00:07:40,740
and terraform will allow you to be able

00:07:38,880 --> 00:07:42,150
to kind of switch in and out variables

00:07:40,740 --> 00:07:46,139
for different environments and I'll show

00:07:42,150 --> 00:07:48,300
you that a little bit here so because of

00:07:46,139 --> 00:07:49,440
course like if you have your Prada mint

00:07:48,300 --> 00:07:51,720
you know what you might not want the

00:07:49,440 --> 00:07:56,940
same let's just say instance size for

00:07:51,720 --> 00:07:59,630
for death or for for testing all right

00:07:56,940 --> 00:08:02,699
imperative versus declarative right

00:07:59,630 --> 00:08:04,740
imperative is the how if you want to

00:08:02,699 --> 00:08:07,620
make a chocolate cake you list all the

00:08:04,740 --> 00:08:09,750
steps in order your body cake makes you

00:08:07,620 --> 00:08:12,780
open a cake mix box bla bla bla bla bla

00:08:09,750 --> 00:08:13,860
you need bake at 350 and hopefully you

00:08:12,780 --> 00:08:16,169
have a cake at the end

00:08:13,860 --> 00:08:17,789
declarative is I need a chocolate cake

00:08:16,169 --> 00:08:20,039
big enough to feed 20 people

00:08:17,789 --> 00:08:21,930
that's what terraform gives you it has

00:08:20,039 --> 00:08:23,880
that power where you could just declare

00:08:21,930 --> 00:08:27,030
what you want declare the resources and

00:08:23,880 --> 00:08:28,770
then you actually go out hit terraform

00:08:27,030 --> 00:08:30,990
plan terraform apply and it goes out to

00:08:28,770 --> 00:08:37,110
whatever provider do you specify and it

00:08:30,990 --> 00:08:41,370
builds this infrastructure so why do we

00:08:37,110 --> 00:08:44,670
need terraform infrastructure is hard

00:08:41,370 --> 00:08:47,730
right all those dependencies all those

00:08:44,670 --> 00:08:49,890
connections stuff is hard and you want

00:08:47,730 --> 00:08:51,360
to and sometimes you don't want to you

00:08:49,890 --> 00:08:54,270
want to concentrate on like what the

00:08:51,360 --> 00:08:56,580
business outcome is instead of having to

00:08:54,270 --> 00:09:01,770
muck around with a bunch of

00:08:56,580 --> 00:09:03,570
infrastructure right and this is not the

00:09:01,770 --> 00:09:05,310
face that you want to have while you're

00:09:03,570 --> 00:09:06,480
looking at your infrastructure you don't

00:09:05,310 --> 00:09:07,890
want to look at your infrastructure and

00:09:06,480 --> 00:09:10,080
groan every morning you want to know

00:09:07,890 --> 00:09:12,210
that it's in a stable State you want to

00:09:10,080 --> 00:09:16,490
know that exactly what you specified in

00:09:12,210 --> 00:09:21,440
your code is out there in the cloud and

00:09:16,490 --> 00:09:26,370
so terraform gives you that ability

00:09:21,440 --> 00:09:29,760
abstraction right terraform is a layer

00:09:26,370 --> 00:09:32,910
above let's just say you know the api's

00:09:29,760 --> 00:09:35,130
it exactly does that it communicates

00:09:32,910 --> 00:09:37,770
with the cloud providers or whoever's

00:09:35,130 --> 00:09:41,940
API and it builds an infrastructure that

00:09:37,770 --> 00:09:43,620
way and so it allows it uses HCl which

00:09:41,940 --> 00:09:47,490
is hashey corpse configuration language

00:09:43,620 --> 00:09:49,860
and it actually reaches out to the api's

00:09:47,490 --> 00:09:55,770
makes these API calls and it builds out

00:09:49,860 --> 00:09:58,770
your infrastructure and a big word of

00:09:55,770 --> 00:10:06,450
today big word alert big word alert big

00:09:58,770 --> 00:10:11,190
work and yeah it is idempotent

00:10:06,450 --> 00:10:14,340
yes you're smart I had to look up how to

00:10:11,190 --> 00:10:16,890
pronounce this word a couple of times so

00:10:14,340 --> 00:10:18,450
what that means is you run it once and

00:10:16,890 --> 00:10:19,710
you get the same results right you can

00:10:18,450 --> 00:10:22,860
run terraform because of this

00:10:19,710 --> 00:10:25,260
declarative nature you run it once and

00:10:22,860 --> 00:10:27,810
you declare for instance I want one VM

00:10:25,260 --> 00:10:29,610
out in AWS no matter how many times

00:10:27,810 --> 00:10:31,050
you're on terraform you're only going to

00:10:29,610 --> 00:10:33,300
get that one instance unless of course

00:10:31,050 --> 00:10:35,610
you say I want two instances but it's

00:10:33,300 --> 00:10:42,060
never going to have more than what you

00:10:35,610 --> 00:10:47,820
specify in your code cloud it gnostic

00:10:42,060 --> 00:10:50,370
sort of sorry it's sort of cloud

00:10:47,820 --> 00:10:53,760
agnostic you can't just write terraform

00:10:50,370 --> 00:10:56,900
code for AWS and expect that same code

00:10:53,760 --> 00:10:56,900
to work in Google

00:11:03,070 --> 00:11:05,130
you

00:11:27,110 --> 00:11:33,140
PR and Azure so everything to syntax how

00:11:31,700 --> 00:11:35,860
you declare resources how you declare

00:11:33,140 --> 00:11:35,860
variable

00:11:40,899 --> 00:11:42,959
you

00:11:48,800 --> 00:12:01,800
terraform operates on any file with the

00:11:52,500 --> 00:12:15,930
extension of dot TF come on man what's

00:12:01,800 --> 00:12:20,670
going on all right it's back oh it's

00:12:15,930 --> 00:12:24,260
gone it's back let's see all right just

00:12:20,670 --> 00:12:24,260
what in the heck

00:12:25,700 --> 00:12:31,590
PSA V mm-hmm got some words for you all

00:12:29,730 --> 00:12:34,200
right let's try to continue with this

00:12:31,590 --> 00:12:40,380
for before it gets out of whack so you

00:12:34,200 --> 00:12:43,470
you're right you're your Yoko and you

00:12:40,380 --> 00:12:45,540
give it a dot TF extension you'll also

00:12:43,470 --> 00:12:48,810
pass in variables to that code because

00:12:45,540 --> 00:12:52,020
you want it to be reusable right it's

00:12:48,810 --> 00:12:54,330
and it's Tara forms way of dry which is

00:12:52,020 --> 00:12:56,610
do not repeat yourself so you use

00:12:54,330 --> 00:12:58,680
variables and of course you know that's

00:12:56,610 --> 00:12:59,880
just good coding practices as well to

00:12:58,680 --> 00:13:04,940
use variables instead of hard-coding

00:12:59,880 --> 00:13:08,550
stuff right terraform then goes out to

00:13:04,940 --> 00:13:11,160
the cloud provider communicates with

00:13:08,550 --> 00:13:13,440
this API does other stuff magically

00:13:11,160 --> 00:13:15,930
behind this thing and it creates your

00:13:13,440 --> 00:13:19,620
resources creates everything from your

00:13:15,930 --> 00:13:22,170
VPC Amazon ec2 instances load balancers

00:13:19,620 --> 00:13:24,360
all that stuff and once this apply and

00:13:22,170 --> 00:13:28,050
it's in a stable state it actually

00:13:24,360 --> 00:13:31,710
writes out what's in your infrastructure

00:13:28,050 --> 00:13:33,780
to a terraform RTF state or a state file

00:13:31,710 --> 00:13:37,710
right and that state file is what's

00:13:33,780 --> 00:13:43,220
mapping all of your resources to what

00:13:37,710 --> 00:13:43,220
you declare in your terraform manifest

00:13:44,240 --> 00:13:50,520
and so if you expand on this idea right

00:13:47,520 --> 00:13:55,470
now you can pass in different variables

00:13:50,520 --> 00:13:57,690
to four different environments and this

00:13:55,470 --> 00:13:59,160
is exact not exactly how but this is

00:13:57,690 --> 00:14:01,829
gives you a general over

00:13:59,160 --> 00:14:03,930
view of how you would do this we do this

00:14:01,829 --> 00:14:06,029
an insight we do this some pipeline so

00:14:03,930 --> 00:14:08,850
we have a pipeline for dev we have a

00:14:06,029 --> 00:14:12,230
pipeline for tests we have a pipeline

00:14:08,850 --> 00:14:15,420
for staging a pipeline for pride and the

00:14:12,230 --> 00:14:19,589
dependent upon which pipeline is ran it

00:14:15,420 --> 00:14:23,550
will exchange or pass in variables to

00:14:19,589 --> 00:14:25,709
that that terraform hole so we we

00:14:23,550 --> 00:14:27,240
declare a variable so for instance our

00:14:25,709 --> 00:14:30,360
variable is called cluster ID

00:14:27,240 --> 00:14:33,149
we are preparing that to the resources

00:14:30,360 --> 00:14:35,459
when we name them and when it goes to

00:14:33,149 --> 00:14:37,800
the pipeline it actually says ok because

00:14:35,459 --> 00:14:39,569
on this cluster ID you're running this

00:14:37,800 --> 00:14:42,199
and if I'm now I'm going to prepay in

00:14:39,569 --> 00:14:46,410
dev to each one of your resources and

00:14:42,199 --> 00:14:49,980
then because of that you get a terraform

00:14:46,410 --> 00:14:51,959
state for each one of your each one of

00:14:49,980 --> 00:14:55,620
your environments with school because

00:14:51,959 --> 00:14:58,290
now that's separated and if at any given

00:14:55,620 --> 00:15:00,779
time and we back up our state as we

00:14:58,290 --> 00:15:02,850
wrote you when if you do it at home if

00:15:00,779 --> 00:15:07,439
you install a terraform download the

00:15:02,850 --> 00:15:09,600
binary on your laptop and you run it

00:15:07,439 --> 00:15:13,050
you'll have a local copy of the TF state

00:15:09,600 --> 00:15:16,680
right but having a local copy is not

00:15:13,050 --> 00:15:18,269
good when you're working in a group and

00:15:16,680 --> 00:15:20,370
so we use what's called a remote state

00:15:18,269 --> 00:15:23,160
and that allows us to be able to pour

00:15:20,370 --> 00:15:25,290
down a remote state work on it and then

00:15:23,160 --> 00:15:27,120
come in those changes are then been made

00:15:25,290 --> 00:15:31,380
so every change that gets made the group

00:15:27,120 --> 00:15:33,689
knows about it right and so you get a

00:15:31,380 --> 00:15:38,699
state file for each one of the

00:15:33,689 --> 00:15:40,800
environments so how do we use it and

00:15:38,699 --> 00:15:44,180
installs is a single binary which is

00:15:40,800 --> 00:15:49,110
cool because they you can run it on

00:15:44,180 --> 00:15:51,209
variety operating systems and the usage

00:15:49,110 --> 00:15:55,050
of it hope hope people can see it out in

00:15:51,209 --> 00:15:56,550
the back terraforming it right that's

00:15:55,050 --> 00:15:58,680
probably the first command that you're

00:15:56,550 --> 00:16:01,110
going to run and then initializes your

00:15:58,680 --> 00:16:04,259
terraform directory pulls in all the

00:16:01,110 --> 00:16:05,819
plug-ins for the provider and we'll talk

00:16:04,259 --> 00:16:08,160
a little bit about the provider here in

00:16:05,819 --> 00:16:10,559
a second and it pulls in modules we will

00:16:08,160 --> 00:16:12,630
talk about what modules here or here in

00:16:10,559 --> 00:16:15,820
a second as well

00:16:12,630 --> 00:16:19,420
so you initialize your your terraform

00:16:15,820 --> 00:16:23,260
directory you write your code and then

00:16:19,420 --> 00:16:26,860
you do a terraform format which kind of

00:16:23,260 --> 00:16:28,839
beautifies the code it makes things a

00:16:26,860 --> 00:16:33,310
little more readable and a canonical

00:16:28,839 --> 00:16:36,070
format style you do a terraform validate

00:16:33,310 --> 00:16:40,630
with chefs the syntax of your terraform

00:16:36,070 --> 00:16:43,510
code you do a plan and that gives you a

00:16:40,630 --> 00:16:45,699
preview of what changes will be made you

00:16:43,510 --> 00:16:47,620
do an apply and that applies the changes

00:16:45,699 --> 00:16:49,570
and then that is what is going to create

00:16:47,620 --> 00:16:54,670
your state find out after the apply is

00:16:49,570 --> 00:16:56,680
done right then if you want to blow away

00:16:54,670 --> 00:16:57,880
all your changes you just do a terraform

00:16:56,680 --> 00:17:01,240
destroy and they'll go out and it'll

00:16:57,880 --> 00:17:02,800
destroy all those changes terraform show

00:17:01,240 --> 00:17:07,569
will show you all the resources from

00:17:02,800 --> 00:17:08,980
your state file so if you are onboarding

00:17:07,569 --> 00:17:11,919
somebody new or you just want to see

00:17:08,980 --> 00:17:13,630
what's in your environment right you can

00:17:11,919 --> 00:17:17,620
do a terraform show and it will give you

00:17:13,630 --> 00:17:22,319
a JSON formatted representation of

00:17:17,620 --> 00:17:25,630
what's out there in your environment so

00:17:22,319 --> 00:17:28,679
providers so telephone providers are the

00:17:25,630 --> 00:17:30,669
way that terraform interacts with

00:17:28,679 --> 00:17:32,770
they're different and there's a ton of

00:17:30,669 --> 00:17:35,770
and this is just some of them but

00:17:32,770 --> 00:17:37,450
there's a bunch more out there terraform

00:17:35,770 --> 00:17:41,679
I mean they they're adding providers all

00:17:37,450 --> 00:17:44,860
the time and so this is what tells

00:17:41,679 --> 00:17:46,809
terraform which api to use it pulls it

00:17:44,860 --> 00:17:50,230
down and it says ok all the modules

00:17:46,809 --> 00:17:53,320
everything that's that's for this

00:17:50,230 --> 00:17:55,809
provider right this is this is how we're

00:17:53,320 --> 00:17:58,090
going to connect with that cloud

00:17:55,809 --> 00:18:03,790
provider and build build our

00:17:58,090 --> 00:18:06,549
infrastructure so this is kind of height

00:18:03,790 --> 00:18:10,809
and after each one of these I'll just

00:18:06,549 --> 00:18:13,360
kind of show you a code example this is

00:18:10,809 --> 00:18:16,720
how you declare your provider it's

00:18:13,360 --> 00:18:21,580
pretty simple right you give it the name

00:18:16,720 --> 00:18:23,140
of the provider you specify which region

00:18:21,580 --> 00:18:25,750
you want to build your infrastructure in

00:18:23,140 --> 00:18:29,170
and then also you would

00:18:25,750 --> 00:18:31,210
you could pass in authorization keys

00:18:29,170 --> 00:18:33,430
right you you don't want to do that

00:18:31,210 --> 00:18:35,980
indirectly in code of course right you

00:18:33,430 --> 00:18:38,680
don't want to get a 40,000 dollar bill

00:18:35,980 --> 00:18:41,710
like I did one time about putting your

00:18:38,680 --> 00:18:43,210
your off keys in in your code if you

00:18:41,710 --> 00:18:45,820
even if you're playing around right

00:18:43,210 --> 00:18:48,100
because that can I actually did that one

00:18:45,820 --> 00:18:50,800
time and forgot to take it out and

00:18:48,100 --> 00:18:52,870
commit it my code to github and got a

00:18:50,800 --> 00:18:55,480
bill from AWS for forty three thousand

00:18:52,870 --> 00:18:58,150
dollars because somebody took my keys

00:18:55,480 --> 00:19:01,350
and they had tons of instances running

00:18:58,150 --> 00:19:04,450
in every single region and AWS

00:19:01,350 --> 00:19:08,500
luckily they wiped it out and I didn't

00:19:04,450 --> 00:19:14,620
have to file bankruptcy so I was cool my

00:19:08,500 --> 00:19:18,130
kids had Christmas so I was able to stay

00:19:14,620 --> 00:19:21,970
in the house so yeah that's how you

00:19:18,130 --> 00:19:26,140
specify a provider resources are the

00:19:21,970 --> 00:19:28,480
bread and butter of terraform these are

00:19:26,140 --> 00:19:30,130
the infrastructure components that you

00:19:28,480 --> 00:19:31,810
want to manage so everything from

00:19:30,130 --> 00:19:34,180
virtual machines the load balancers

00:19:31,810 --> 00:19:36,730
anything in any of these providers I

00:19:34,180 --> 00:19:40,900
would shouldn't say anything most things

00:19:36,730 --> 00:19:44,010
and these providers are in tare form and

00:19:40,900 --> 00:19:46,690
if they're not some you know you can

00:19:44,010 --> 00:19:48,880
reach out to terraform and see you know

00:19:46,690 --> 00:19:50,980
what's on the upcoming list babe they're

00:19:48,880 --> 00:19:52,120
doing you know upgrades all the time so

00:19:50,980 --> 00:19:54,430
they're putting new versions out

00:19:52,120 --> 00:19:56,140
terraform out so sometimes this is all

00:19:54,430 --> 00:19:59,350
about just kind of checking back and

00:19:56,140 --> 00:20:05,190
seeing if that specific resource is now

00:19:59,350 --> 00:20:10,840
being offered so this is an example of

00:20:05,190 --> 00:20:14,650
some code so this is basically saying

00:20:10,840 --> 00:20:17,140
I'm going to declare a resource for an

00:20:14,650 --> 00:20:19,360
AWS instance I'm going to give it the

00:20:17,140 --> 00:20:22,840
name web and in your terraform code this

00:20:19,360 --> 00:20:25,210
has to be unique this is how terraform

00:20:22,840 --> 00:20:28,090
maps it to the actual resource in the

00:20:25,210 --> 00:20:30,220
state file right so when you when you

00:20:28,090 --> 00:20:32,920
build out an AWS instance it gets an

00:20:30,220 --> 00:20:35,920
instance ID that is what's in the state

00:20:32,920 --> 00:20:38,700
file that is what maps it to what you

00:20:35,920 --> 00:20:44,010
declare here in the code and

00:20:38,700 --> 00:20:46,410
then you you're given an ami or so you

00:20:44,010 --> 00:20:50,100
have a Amaya exercise these are resource

00:20:46,410 --> 00:20:52,020
attributes right and so with each one of

00:20:50,100 --> 00:20:55,800
the resources that you specify there's

00:20:52,020 --> 00:20:58,290
going to be attributes that tells you

00:20:55,800 --> 00:21:01,170
like what type of resource you want to

00:20:58,290 --> 00:21:02,790
you want to build or what attributes you

00:21:01,170 --> 00:21:08,160
want your your resource to have I should

00:21:02,790 --> 00:21:13,830
say so I'm sorry uh Amazon machine image

00:21:08,160 --> 00:21:15,630
so it's just a an image right and this

00:21:13,830 --> 00:21:20,580
one here you have to you have to specify

00:21:15,630 --> 00:21:24,900
an ID or a my ID and so this this piece

00:21:20,580 --> 00:21:27,630
of code here is actually saying data is

00:21:24,900 --> 00:21:29,820
a read-only representation of data that

00:21:27,630 --> 00:21:32,460
gets pulled from AWS right or whatever

00:21:29,820 --> 00:21:37,560
comm provider and it's saying I want the

00:21:32,460 --> 00:21:40,740
ID right of the AWS ami a boon to image

00:21:37,560 --> 00:21:45,300
right and then it just this is called

00:21:40,740 --> 00:21:48,780
interpolation and this is how terraform

00:21:45,300 --> 00:21:51,750
does interpolation the dollar sign and

00:21:48,780 --> 00:21:54,740
then the brackets and then so it just it

00:21:51,750 --> 00:21:57,870
goes out to AWS and it grabs the ID

00:21:54,740 --> 00:22:01,020
turpan interpolate sit here and gives

00:21:57,870 --> 00:22:03,000
you that ami ID there the instance type

00:22:01,020 --> 00:22:07,560
right this is just the size of the

00:22:03,000 --> 00:22:09,390
actual AWS instance and in in practice

00:22:07,560 --> 00:22:12,540
you'll you'll substitute this stuff out

00:22:09,390 --> 00:22:14,970
with variables instead because like I

00:22:12,540 --> 00:22:19,200
said you might want a different instance

00:22:14,970 --> 00:22:22,830
type depending on your environment this

00:22:19,200 --> 00:22:24,300
might be fine for for development but

00:22:22,830 --> 00:22:25,860
it's not going to be fine for production

00:22:24,300 --> 00:22:28,530
you don't want to teach you micro run

00:22:25,860 --> 00:22:32,910
into production right and then you can

00:22:28,530 --> 00:22:35,420
give it tags as well and here pretty

00:22:32,910 --> 00:22:38,400
much the same this is specifying at AWS

00:22:35,420 --> 00:22:41,640
ELB which is which is an elastic load

00:22:38,400 --> 00:22:46,410
balancer you give it a name because in

00:22:41,640 --> 00:22:49,110
in AWS your your resource or actually

00:22:46,410 --> 00:22:50,910
have a name associated with it you give

00:22:49,110 --> 00:22:51,960
it the availability zones you want the

00:22:50,910 --> 00:22:56,519
ELB

00:22:51,960 --> 00:22:58,769
to be in then you specify the AWS

00:22:56,519 --> 00:23:00,600
instances that you want to be did you

00:22:58,769 --> 00:23:05,220
want to have attached to that load

00:23:00,600 --> 00:23:08,639
balancer right so this is doing some

00:23:05,220 --> 00:23:11,309
interpolation here it's getting and this

00:23:08,639 --> 00:23:15,600
is cool this actually shows you so this

00:23:11,309 --> 00:23:17,669
is how terraform will grab the ID of

00:23:15,600 --> 00:23:19,049
this instance that you just created so

00:23:17,669 --> 00:23:23,669
you can see here this interpolation

00:23:19,049 --> 00:23:27,269
value here says AWS instance which is

00:23:23,669 --> 00:23:29,519
here the name web which is here the ID

00:23:27,269 --> 00:23:33,139
it's basically saying give me a ID and

00:23:29,519 --> 00:23:38,669
this also creates what's called an

00:23:33,139 --> 00:23:41,149
implicit dependency right so terraform

00:23:38,669 --> 00:23:43,889
knows how to in which order to create

00:23:41,149 --> 00:23:45,690
resources it does that using the

00:23:43,889 --> 00:23:49,529
dependency graph then it does behind the

00:23:45,690 --> 00:23:52,529
scenes but when you specify say for

00:23:49,529 --> 00:23:54,899
instance Peter instance are a resource

00:23:52,529 --> 00:23:57,059
that depends on another resource it will

00:23:54,899 --> 00:23:59,399
actually create this resource before it

00:23:57,059 --> 00:24:02,070
creates this resource is that implicit

00:23:59,399 --> 00:24:05,129
but you can do this explicitly well as

00:24:02,070 --> 00:24:06,929
well you can do it depends on if those

00:24:05,129 --> 00:24:08,779
things aren't linked in some way you can

00:24:06,929 --> 00:24:12,299
do a depends on and it actually

00:24:08,779 --> 00:24:16,039
explicitly the link that to the resource

00:24:12,299 --> 00:24:16,039
and create that resource beforehand

00:24:16,999 --> 00:24:24,629
variables all right this is tear forms

00:24:21,360 --> 00:24:25,889
way of dealing with you know values that

00:24:24,629 --> 00:24:29,220
might change from environment to

00:24:25,889 --> 00:24:33,539
environment or just keeping your code as

00:24:29,220 --> 00:24:37,549
dry as possible right so variables are

00:24:33,539 --> 00:24:42,080
declared either in a few ways you can

00:24:37,549 --> 00:24:42,080
specify the variables directly in your

00:24:42,529 --> 00:24:47,999
terraform code you can use environment

00:24:46,499 --> 00:24:51,929
variables which I would would not

00:24:47,999 --> 00:24:54,090
recommend sometimes it's you could wash

00:24:51,929 --> 00:24:57,029
it and say that you can use your

00:24:54,090 --> 00:24:59,369
environment variables environment

00:24:57,029 --> 00:25:01,440
variables in certain instances we do it

00:24:59,369 --> 00:25:05,070
in our pipeline so we actually pass

00:25:01,440 --> 00:25:05,640
pipeline variables into the terraform

00:25:05,070 --> 00:25:08,309
container

00:25:05,640 --> 00:25:10,740
that builds our terraform coat and when

00:25:08,309 --> 00:25:13,559
they get passed into the container they

00:25:10,740 --> 00:25:17,820
actually become environment variables

00:25:13,559 --> 00:25:19,740
and so hmm you pre pen all your

00:25:17,820 --> 00:25:22,620
invariable your variable names with TF

00:25:19,740 --> 00:25:24,510
underscore VAR underscore right and then

00:25:22,620 --> 00:25:27,240
you give it some the variable name which

00:25:24,510 --> 00:25:28,650
is some variable and then you you can

00:25:27,240 --> 00:25:31,340
give us this is just the way you can do

00:25:28,650 --> 00:25:33,450
it right at the command line the export

00:25:31,340 --> 00:25:35,040
there are input variables these are

00:25:33,450 --> 00:25:36,540
variables that you pass into your

00:25:35,040 --> 00:25:38,970
terraform code and I'll show you that

00:25:36,540 --> 00:25:41,520
here output variables are variables that

00:25:38,970 --> 00:25:43,980
you get out of the modules that you

00:25:41,520 --> 00:25:45,840
build in tear form right and I'll talk

00:25:43,980 --> 00:25:50,790
about modules here in a second and in

00:25:45,840 --> 00:25:53,520
their use and then the data structures

00:25:50,790 --> 00:25:56,520
for the variables so terraform has

00:25:53,520 --> 00:25:58,770
strings it has data structures like it's

00:25:56,520 --> 00:26:03,990
like some for most programming languages

00:25:58,770 --> 00:26:06,120
not all strings arrays Maps so you can

00:26:03,990 --> 00:26:09,809
operate on those specific data

00:26:06,120 --> 00:26:13,010
structures so here's an example of some

00:26:09,809 --> 00:26:15,590
cult some variable code this is

00:26:13,010 --> 00:26:18,809
declaring a variable called image ID

00:26:15,590 --> 00:26:21,780
you're giving it the type which is a

00:26:18,809 --> 00:26:23,460
string and then you're giving it a

00:26:21,780 --> 00:26:27,000
default value and these can be

00:26:23,460 --> 00:26:31,679
overwritten right your input your input

00:26:27,000 --> 00:26:35,040
values in terraform or usually your what

00:26:31,679 --> 00:26:37,350
you would go as as defaults and then in

00:26:35,040 --> 00:26:41,250
your terraform code itself if you want

00:26:37,350 --> 00:26:44,880
it to overwrite those you can gives you

00:26:41,250 --> 00:26:46,530
some flexibility on like I said specific

00:26:44,880 --> 00:26:49,740
environments that you want different

00:26:46,530 --> 00:26:52,140
variables or different resource values

00:26:49,740 --> 00:26:55,410
for different things so you give it a

00:26:52,140 --> 00:26:57,480
default am i - abc123

00:26:55,410 --> 00:27:00,360
and then you just declare that but you

00:26:57,480 --> 00:27:05,070
stick that variable and your resource so

00:27:00,360 --> 00:27:09,290
before we had the actual image ID now we

00:27:05,070 --> 00:27:09,290
can just replace that with a variable

00:27:10,130 --> 00:27:14,100
terraform has conditionals so you can do

00:27:12,840 --> 00:27:15,450
if statements you can do if else

00:27:14,100 --> 00:27:18,860
statements you can do some boolean

00:27:15,450 --> 00:27:18,860
operations as well right

00:27:19,380 --> 00:27:28,270
so here's an example of using count

00:27:23,680 --> 00:27:30,760
which count actually if if you want to

00:27:28,270 --> 00:27:36,100
create more than one resource you can

00:27:30,760 --> 00:27:38,950
use the count attribute so here what's

00:27:36,100 --> 00:27:42,130
going on is you declare our resource AWS

00:27:38,950 --> 00:27:44,890
and since you call it VPN and then what

00:27:42,130 --> 00:27:48,280
this is saying is this is the condition

00:27:44,890 --> 00:27:54,340
the VAR dot something and this is if

00:27:48,280 --> 00:27:56,290
that variable exists then this is a true

00:27:54,340 --> 00:28:01,300
value and this is a false value so you

00:27:56,290 --> 00:28:03,760
can you can use this to to do outside

00:28:01,300 --> 00:28:05,770
types of things but mostly you know for

00:28:03,760 --> 00:28:09,370
what we use it for is we usually usually

00:28:05,770 --> 00:28:12,520
use it for something like this to for

00:28:09,370 --> 00:28:16,200
count to create a specific resource so

00:28:12,520 --> 00:28:20,530
you say if this variable exists then

00:28:16,200 --> 00:28:22,270
give me one one instance of this if not

00:28:20,530 --> 00:28:25,630
then don't create this instance at all

00:28:22,270 --> 00:28:27,550
and there's different ways to use now

00:28:25,630 --> 00:28:32,350
conditionals and this is just one of the

00:28:27,550 --> 00:28:36,450
ways that you can use it terraform does

00:28:32,350 --> 00:28:40,930
do iteration as well I think terraform

00:28:36,450 --> 00:28:42,310
what is it twelve dot twelve or

00:28:40,930 --> 00:28:46,900
something I can't think of the version

00:28:42,310 --> 00:28:51,340
but they now have four loops and in in

00:28:46,900 --> 00:28:56,170
Sarah form before in order to do you

00:28:51,340 --> 00:28:58,390
know to cycle through like a list you

00:28:56,170 --> 00:28:59,850
had you kind of had to use count you

00:28:58,390 --> 00:29:02,620
have to take the length of that list

00:28:59,850 --> 00:29:04,840
right and then you have to do this count

00:29:02,620 --> 00:29:08,200
dot index in order to kind of iterate

00:29:04,840 --> 00:29:13,900
through that list and so this would if

00:29:08,200 --> 00:29:17,760
you had a for instance unless the user

00:29:13,900 --> 00:29:20,430
names I would declare it as a variable

00:29:17,760 --> 00:29:23,560
pass it passing the names of the users

00:29:20,430 --> 00:29:25,930
right declare it as a list and then this

00:29:23,560 --> 00:29:29,200
will go and it would say alright at user

00:29:25,930 --> 00:29:31,090
name zero right and that's the first

00:29:29,200 --> 00:29:32,260
item in the list and it will iterate

00:29:31,090 --> 00:29:33,760
through that but now you don't

00:29:32,260 --> 00:29:36,430
have to do it like this now to have four

00:29:33,760 --> 00:29:41,740
loops makes it much easier to iterate

00:29:36,430 --> 00:29:46,030
through lists modules modules are tear

00:29:41,740 --> 00:29:48,580
forms way of being able to reuse the

00:29:46,030 --> 00:29:51,910
code of course you can anything that is

00:29:48,580 --> 00:29:56,980
in the terraform directory is considered

00:29:51,910 --> 00:29:59,410
a module right so but people will create

00:29:56,980 --> 00:30:01,150
modules specifically so that you don't

00:29:59,410 --> 00:30:02,440
have to keep creating the same thing

00:30:01,150 --> 00:30:04,720
it's similar they're kind of like

00:30:02,440 --> 00:30:07,650
functions right you you you write your

00:30:04,720 --> 00:30:10,150
code once you want to use that in

00:30:07,650 --> 00:30:12,040
different instances and so all you do is

00:30:10,150 --> 00:30:14,010
you kind of call that module and then

00:30:12,040 --> 00:30:17,590
you can pass in variables to that module

00:30:14,010 --> 00:30:20,140
right so that you can get the specified

00:30:17,590 --> 00:30:22,210
resource that you want so it's just a

00:30:20,140 --> 00:30:24,190
collection of resources conforms to draw

00:30:22,210 --> 00:30:26,110
don't repeat yourself methodology and

00:30:24,190 --> 00:30:29,680
I'll give you an example of how that is

00:30:26,110 --> 00:30:40,750
used that might be kind of small let me

00:30:29,680 --> 00:30:44,560
see if I can increase that size I'm

00:30:40,750 --> 00:31:11,440
sorry what was that command plus thank

00:30:44,560 --> 00:31:12,720
you Oh what the hell what see this is

00:31:11,440 --> 00:31:28,210
not working

00:31:12,720 --> 00:31:31,300
all right let's go back to I'm not sure

00:31:28,210 --> 00:31:37,980
this is going to allow me to do it let's

00:31:31,300 --> 00:31:37,980
see no it's not sorry

00:31:38,080 --> 00:31:54,650
yeah yeah sorry really how you pretty

00:31:50,030 --> 00:31:58,100
much you what the hell get it right you

00:31:54,650 --> 00:32:00,560
declare your resources and in the

00:31:58,100 --> 00:32:02,390
manifest file dot TF file right here

00:32:00,560 --> 00:32:04,190
we're declaring a sequel server in a

00:32:02,390 --> 00:32:06,470
sequel database that's what this cold

00:32:04,190 --> 00:32:08,480
over here is doing you're giving it the

00:32:06,470 --> 00:32:10,670
name you're passing you're giving it

00:32:08,480 --> 00:32:14,900
variables as opposed to higher coding

00:32:10,670 --> 00:32:15,980
anything so you have a piece of code

00:32:14,900 --> 00:32:17,960
here just going to create a sequel

00:32:15,980 --> 00:32:20,150
server piece of code here it's going to

00:32:17,960 --> 00:32:23,150
actually create the database inside that

00:32:20,150 --> 00:32:25,220
sequel server and then this code here is

00:32:23,150 --> 00:32:28,130
where you is Stan she ate the module

00:32:25,220 --> 00:32:30,730
right you give it a source here you can

00:32:28,130 --> 00:32:35,210
have your modules remote have them local

00:32:30,730 --> 00:32:37,910
if it's local then it's relative to the

00:32:35,210 --> 00:32:39,800
file that you the the dot TF file that

00:32:37,910 --> 00:32:45,440
you're working on if it's remote you can

00:32:39,800 --> 00:32:47,270
pass in a get URL and then here you can

00:32:45,440 --> 00:32:48,950
actually specify a version so you can

00:32:47,270 --> 00:32:50,750
build it and that's the cool thing too

00:32:48,950 --> 00:32:53,240
about infrastructures Co now you

00:32:50,750 --> 00:32:55,340
conversion control these modules that

00:32:53,240 --> 00:32:58,040
you build so you build a module you add

00:32:55,340 --> 00:33:01,280
a feature right you tag that as one dot

00:32:58,040 --> 00:33:02,900
whatever and then you could and then you

00:33:01,280 --> 00:33:04,700
commit that right and then maybe you add

00:33:02,900 --> 00:33:07,880
a new feature but you might not want

00:33:04,700 --> 00:33:10,310
that feature and you might not want that

00:33:07,880 --> 00:33:11,630
specific feature and whatever resource

00:33:10,310 --> 00:33:14,480
that you're building based on that

00:33:11,630 --> 00:33:18,910
module right so then you just give it

00:33:14,480 --> 00:33:24,380
reference 1 Dec 7 which is the tag and

00:33:18,910 --> 00:33:27,290
then you just pass in so here you can

00:33:24,380 --> 00:33:29,210
see here we're declaring variables here

00:33:27,290 --> 00:33:33,440
and then here we're given those

00:33:29,210 --> 00:33:36,920
variables values directly inside in the

00:33:33,440 --> 00:33:39,560
module block right so you can declare

00:33:36,920 --> 00:33:41,930
you can have defaults for these but then

00:33:39,560 --> 00:33:44,330
in the module that you instantiate you

00:33:41,930 --> 00:33:48,470
can actually override those vary those

00:33:44,330 --> 00:33:51,490
variable defaults with your own values

00:33:48,470 --> 00:33:53,860
and it gives you the bill

00:33:51,490 --> 00:33:56,230
so like I said reuse this code in a

00:33:53,860 --> 00:33:59,080
number of different in different

00:33:56,230 --> 00:34:04,050
environments in different different ways

00:33:59,080 --> 00:34:07,270
so so tear form actually has functions

00:34:04,050 --> 00:34:08,980
you can do streaming a manipulation or a

00:34:07,270 --> 00:34:10,810
numeric function collection functions

00:34:08,980 --> 00:34:13,630
date and time and just here are some

00:34:10,810 --> 00:34:15,970
examples of each one I kind of have and

00:34:13,630 --> 00:34:19,660
this is directly on the command line so

00:34:15,970 --> 00:34:22,360
you can do a tear form just on the

00:34:19,660 --> 00:34:25,260
command line type terraform and it'll

00:34:22,360 --> 00:34:30,100
drop you into this kind of like this

00:34:25,260 --> 00:34:32,290
shell but then you can also use these

00:34:30,100 --> 00:34:34,360
and inside your terraform code as well

00:34:32,290 --> 00:34:38,200
this is just giving you quick examples

00:34:34,360 --> 00:34:41,470
so you can do things like Max and or

00:34:38,200 --> 00:34:43,600
joins you can do a timestamp which is

00:34:41,470 --> 00:34:46,120
useful if you're you know doing things

00:34:43,600 --> 00:34:48,820
that need a timestamp you know prepended

00:34:46,120 --> 00:34:50,410
or append it to it right side or host

00:34:48,820 --> 00:34:53,350
which is so you can do networking stuff

00:34:50,410 --> 00:34:55,630
as well concatenation this is just

00:34:53,350 --> 00:34:58,870
giving you an example how you have to

00:34:55,630 --> 00:35:02,140
list a and then a space a and then B and

00:34:58,870 --> 00:35:08,430
C and then you concatenate those you get

00:35:02,140 --> 00:35:13,620
the into you get a new list so state

00:35:08,430 --> 00:35:18,070
state is the big one state is it stores

00:35:13,620 --> 00:35:21,250
your your resources your configurations

00:35:18,070 --> 00:35:23,530
that you declare so the stores it stores

00:35:21,250 --> 00:35:25,660
a state of your managed infrastructure

00:35:23,530 --> 00:35:28,600
or auto configuration and it's just used

00:35:25,660 --> 00:35:31,180
to map your resources to your actual

00:35:28,600 --> 00:35:35,080
terraform code it keeps track some

00:35:31,180 --> 00:35:37,180
metadata and it's stored locally by

00:35:35,080 --> 00:35:39,100
default in the terraformed ITF state

00:35:37,180 --> 00:35:41,650
file right you can actually open that

00:35:39,100 --> 00:35:44,230
file up it's a JSON representation of

00:35:41,650 --> 00:35:47,470
your code or your your all your

00:35:44,230 --> 00:35:49,150
resources out in the cloud and that's

00:35:47,470 --> 00:35:53,350
what it use this to create plans make

00:35:49,150 --> 00:35:54,820
changes to your structure what I have

00:35:53,350 --> 00:35:56,590
some recommendations at the end but I

00:35:54,820 --> 00:35:58,030
always recommend using remote state

00:35:56,590 --> 00:35:59,500
unless you're just playing around trying

00:35:58,030 --> 00:36:00,700
to learn terraformed and local state is

00:35:59,500 --> 00:36:03,100
fine but when you're working in the

00:36:00,700 --> 00:36:03,860
collaborative group definitely use

00:36:03,100 --> 00:36:10,320
remote

00:36:03,860 --> 00:36:13,110
remote state so we talked about we've

00:36:10,320 --> 00:36:18,750
been talking about state all right and I

00:36:13,110 --> 00:36:21,210
think it's so this might be the current

00:36:18,750 --> 00:36:23,250
state so when we talk about state and we

00:36:21,210 --> 00:36:25,590
talk about what we want our state to be

00:36:23,250 --> 00:36:27,060
our say our current state of our

00:36:25,590 --> 00:36:29,580
environment might look like this

00:36:27,060 --> 00:36:32,340
right because terraform is a desire to

00:36:29,580 --> 00:36:34,880
state configuration tool all right you

00:36:32,340 --> 00:36:37,410
declare what you want what you desire

00:36:34,880 --> 00:36:42,390
your your infrastructure to look like

00:36:37,410 --> 00:36:43,770
and that's what it does so no matter how

00:36:42,390 --> 00:36:46,740
many times you run it we talked about it

00:36:43,770 --> 00:36:51,300
being idempotent right it's always going

00:36:46,740 --> 00:36:53,580
to give you that state so even if for

00:36:51,300 --> 00:36:57,780
instance say you have terraform go out

00:36:53,580 --> 00:37:00,000
and build and a VMware or not a VMware

00:36:57,780 --> 00:37:01,770
but a virtual machine instance and it's

00:37:00,000 --> 00:37:04,020
a t2 microbe then you go in there and

00:37:01,770 --> 00:37:07,230
you say oh manually I'm going to change

00:37:04,020 --> 00:37:08,730
this to a larger instant size one stair

00:37:07,230 --> 00:37:10,640
form runs again it's going to say hey

00:37:08,730 --> 00:37:13,290
hey it's going to refresh its state and

00:37:10,640 --> 00:37:14,040
look at that resource to say oh hold on

00:37:13,290 --> 00:37:18,500
for a second

00:37:14,040 --> 00:37:21,330
this resource with this ID maps to this

00:37:18,500 --> 00:37:24,030
resource in our configuration it's not

00:37:21,330 --> 00:37:26,280
the same I need to change that because

00:37:24,030 --> 00:37:29,730
what you declare what your desired state

00:37:26,280 --> 00:37:31,140
is is this and it's not like this so I'm

00:37:29,730 --> 00:37:33,960
going to go in and it will update it

00:37:31,140 --> 00:37:38,820
it'll change that that image back to a

00:37:33,960 --> 00:37:41,640
t2 very instance to a t2 micro so that's

00:37:38,820 --> 00:37:47,580
the desired state right at least that's

00:37:41,640 --> 00:37:50,070
what the empire's wants so how do I get

00:37:47,580 --> 00:37:52,350
started with terraform understand the

00:37:50,070 --> 00:37:56,280
resources of the provider makes it much

00:37:52,350 --> 00:37:58,800
more much easier to build stuff with

00:37:56,280 --> 00:38:00,990
terraform terraform has great

00:37:58,800 --> 00:38:03,510
documentation though so if you don't

00:38:00,990 --> 00:38:05,690
know I got started working at a new

00:38:03,510 --> 00:38:09,090
company at the beginning of last year

00:38:05,690 --> 00:38:13,170
and they use Azure and I had no idea how

00:38:09,090 --> 00:38:14,610
that was all a ws before that so to add

00:38:13,170 --> 00:38:16,530
switch Thatcher and but their

00:38:14,610 --> 00:38:17,140
documentation is like I said once you

00:38:16,530 --> 00:38:20,500
build

00:38:17,140 --> 00:38:22,839
for for one cloud provider it's all

00:38:20,500 --> 00:38:24,760
about what resources are available for a

00:38:22,839 --> 00:38:27,250
specific cloud provider and the syntax

00:38:24,760 --> 00:38:29,500
everything like that is the same so once

00:38:27,250 --> 00:38:31,240
you learn but understanding the

00:38:29,500 --> 00:38:33,490
resources and how they connect is it's

00:38:31,240 --> 00:38:34,210
pretty important but tariffs on house

00:38:33,490 --> 00:38:36,670
are out with that with their

00:38:34,210 --> 00:38:38,400
documentation get a free tier account

00:38:36,670 --> 00:38:40,599
most of these cloud providers and

00:38:38,400 --> 00:38:43,779
terraform doesn't operate on just cloud

00:38:40,599 --> 00:38:46,569
providers they operate on on you know

00:38:43,779 --> 00:38:48,490
SAS providers they can operate on on

00:38:46,569 --> 00:38:53,650
physical hardware as well

00:38:48,490 --> 00:38:55,359
VM VMware resources as well but get a

00:38:53,650 --> 00:38:57,160
free tier account if you can and just

00:38:55,359 --> 00:38:59,410
play around with it and once you're done

00:38:57,160 --> 00:39:01,720
just destroy it right it may may cost

00:38:59,410 --> 00:39:05,309
you a couple of dollars probably not

00:39:01,720 --> 00:39:10,539
even that but it's easy

00:39:05,309 --> 00:39:16,480
hopefully not $43,000 don't commit your

00:39:10,539 --> 00:39:17,799
secrets again so download the binary you

00:39:16,480 --> 00:39:20,890
know kind of read through the docs and

00:39:17,799 --> 00:39:22,539
you just just use it right tear form has

00:39:20,890 --> 00:39:25,509
great documentation on getting started

00:39:22,539 --> 00:39:29,440
with terraform so so some of the

00:39:25,509 --> 00:39:32,259
recommendations that I have use the

00:39:29,440 --> 00:39:34,690
terraform plan output right so that's

00:39:32,259 --> 00:39:37,690
its Hera form plant output the output is

00:39:34,690 --> 00:39:42,029
a flag for terraform plan and what it

00:39:37,690 --> 00:39:45,279
does is it allows you to incrementally

00:39:42,029 --> 00:39:47,799
apply changes to your to your

00:39:45,279 --> 00:39:50,549
environment so say for instance you make

00:39:47,799 --> 00:39:53,319
a bunch of changes you commit those

00:39:50,549 --> 00:39:55,470
changes right instead of terraform

00:39:53,319 --> 00:39:58,779
taking all of the changes as a whole in

00:39:55,470 --> 00:40:00,609
one plan file and committee knows which

00:39:58,779 --> 00:40:02,200
then you have to look through a bunch of

00:40:00,609 --> 00:40:05,049
different changes to see what's what's

00:40:02,200 --> 00:40:07,750
uh what's going to be updated you can do

00:40:05,049 --> 00:40:09,640
a terraform plan output and it'll only

00:40:07,750 --> 00:40:12,579
take the changes that say for instance

00:40:09,640 --> 00:40:14,380
you made and then you can operate you

00:40:12,579 --> 00:40:16,930
can use terraform apply to only operate

00:40:14,380 --> 00:40:18,849
on that output file and then so now

00:40:16,930 --> 00:40:21,009
you're doing this in an incremental

00:40:18,849 --> 00:40:22,480
fashion as opposed to everyone

00:40:21,009 --> 00:40:25,089
committing their changes and then having

00:40:22,480 --> 00:40:27,130
one huge plan file and then opera or

00:40:25,089 --> 00:40:29,380
output file and operating on that one

00:40:27,130 --> 00:40:31,310
then you've got tons of changes going on

00:40:29,380 --> 00:40:33,140
it's just hard to keep track

00:40:31,310 --> 00:40:35,150
there's it's more prone to you know

00:40:33,140 --> 00:40:36,920
missing things that may blow up stuff

00:40:35,150 --> 00:40:40,010
because you can't blow up a lot of stuff

00:40:36,920 --> 00:40:41,630
and terraform usually most state I think

00:40:40,010 --> 00:40:43,520
I talked about that but back up your

00:40:41,630 --> 00:40:46,250
state file because that is your source

00:40:43,520 --> 00:40:47,060
of truth your state file is and if that

00:40:46,250 --> 00:40:51,280
goes away

00:40:47,060 --> 00:40:53,840
now you can rebuild it there's a

00:40:51,280 --> 00:40:56,480
operation called terraform import you

00:40:53,840 --> 00:41:01,490
can take existing resources and you can

00:40:56,480 --> 00:41:02,990
import those and to terraform but if you

00:41:01,490 --> 00:41:05,390
don't have that state file i mean there

00:41:02,990 --> 00:41:07,460
goes your your environment so you want

00:41:05,390 --> 00:41:12,380
to back that state follow up an insight

00:41:07,460 --> 00:41:13,490
we use we use Azure storage or storage

00:41:12,380 --> 00:41:18,290
containers or whatever they call uh

00:41:13,490 --> 00:41:21,680
stuff and we we store our state file and

00:41:18,290 --> 00:41:24,530
blobs inside storage containers and then

00:41:21,680 --> 00:41:30,380
we back those up regularly review the

00:41:24,530 --> 00:41:31,670
plans right it's very easy to get a plan

00:41:30,380 --> 00:41:34,880
where a lot of changes have been made

00:41:31,670 --> 00:41:35,630
and maybe one will impact because when

00:41:34,880 --> 00:41:37,790
you're working in a collaborative

00:41:35,630 --> 00:41:39,260
environment and you're working like an

00:41:37,790 --> 00:41:41,840
inside of different branches sometimes

00:41:39,260 --> 00:41:44,060
somebody's change can undo your change

00:41:41,840 --> 00:41:48,260
so it's good to kind of have two sets of

00:41:44,060 --> 00:41:50,600
eyes on on your review plans we in our

00:41:48,260 --> 00:41:53,240
pipeline there's always a step that

00:41:50,600 --> 00:41:55,730
allows us to review the plan before we

00:41:53,240 --> 00:41:57,260
actually apply it so our you know our

00:41:55,730 --> 00:42:01,220
pipeline is automated it builds to

00:41:57,260 --> 00:42:02,840
terraform code it does the the plan and

00:42:01,220 --> 00:42:04,730
it gives us an output of what that plan

00:42:02,840 --> 00:42:06,590
is going to look like and then we can

00:42:04,730 --> 00:42:08,360
approve it and once you once it's

00:42:06,590 --> 00:42:12,710
approved that goes through and does the

00:42:08,360 --> 00:42:14,900
apply use secret management this is this

00:42:12,710 --> 00:42:18,080
was huge I don't know how many times

00:42:14,900 --> 00:42:20,960
we've walked into a client site in there

00:42:18,080 --> 00:42:22,640
storing all their passwords and

00:42:20,960 --> 00:42:25,430
connection strings and all that stuff

00:42:22,640 --> 00:42:29,210
directly in the code or directly in

00:42:25,430 --> 00:42:32,420
terraform that is a no-no yeah you're

00:42:29,210 --> 00:42:36,500
shaking yes there's well reputable

00:42:32,420 --> 00:42:39,050
companies do do that type stuff we use

00:42:36,500 --> 00:42:41,930
seeker management we use Kiva as risky

00:42:39,050 --> 00:42:44,080
vault which pretty much just doesn't

00:42:41,930 --> 00:42:47,060
kind of replace you

00:42:44,080 --> 00:42:49,400
in terraform you'll say like hey I want

00:42:47,060 --> 00:42:52,550
to create this secret and he would say I

00:42:49,400 --> 00:42:55,610
want to store that in Kibo and then you

00:42:52,550 --> 00:42:57,530
reference that inside I don't think I

00:42:55,610 --> 00:43:00,860
put an example would have been cool and

00:42:57,530 --> 00:43:04,090
then you reference that in the Tara

00:43:00,860 --> 00:43:07,100
furniture building so you say you know a

00:43:04,090 --> 00:43:09,800
jerky vault dot whatever the name of the

00:43:07,100 --> 00:43:11,240
key vault that you gave it and it's

00:43:09,800 --> 00:43:13,540
basically telling it to go out to the

00:43:11,240 --> 00:43:16,700
Kibo and pull that in and we do that it

00:43:13,540 --> 00:43:19,010
built time we don't do that any other

00:43:16,700 --> 00:43:21,500
time so it built time he goes out pulls

00:43:19,010 --> 00:43:23,600
that in replaces that and you never see

00:43:21,500 --> 00:43:25,850
it right you have no idea of what that

00:43:23,600 --> 00:43:28,940
secret is of course unless you go into a

00:43:25,850 --> 00:43:32,630
jerky ball and look but it's just a good

00:43:28,940 --> 00:43:37,700
way to not get oh right and then plan

00:43:32,630 --> 00:43:40,220
your structure I mean you can you can go

00:43:37,700 --> 00:43:42,590
willy-nilly of course you can it's

00:43:40,220 --> 00:43:45,140
better to just kind of plan out you know

00:43:42,590 --> 00:43:47,780
your different environments how you want

00:43:45,140 --> 00:43:51,260
terraform to to be structured because

00:43:47,780 --> 00:43:52,460
you can you can do it either per

00:43:51,260 --> 00:43:56,090
environment you can do it per

00:43:52,460 --> 00:44:00,650
application right and what I mean is you

00:43:56,090 --> 00:44:02,480
can build out your terraform so like you

00:44:00,650 --> 00:44:04,370
tear from directories for instance you

00:44:02,480 --> 00:44:07,730
can have like a dev you can have a pride

00:44:04,370 --> 00:44:10,610
you can do a terraform plan and apply on

00:44:07,730 --> 00:44:13,970
on that specific directory or you can do

00:44:10,610 --> 00:44:16,040
it by service like whatever service that

00:44:13,970 --> 00:44:18,650
you're you're rolling out you can do it

00:44:16,040 --> 00:44:20,360
like that and I think that's the way we

00:44:18,650 --> 00:44:23,510
do it in this site is we have like our

00:44:20,360 --> 00:44:26,390
core which builds the core

00:44:23,510 --> 00:44:29,060
infrastructure so it goes out and it

00:44:26,390 --> 00:44:33,830
builds all of our networking and builds

00:44:29,060 --> 00:44:35,360
our kubernetes clusters it builds builds

00:44:33,830 --> 00:44:37,250
like a lot of the core services that we

00:44:35,360 --> 00:44:39,530
use and then we have terraform that

00:44:37,250 --> 00:44:44,300
actually operates and goes out and

00:44:39,530 --> 00:44:46,490
deploys deploys our applications right

00:44:44,300 --> 00:44:48,140
so you can it's just good to kind of

00:44:46,490 --> 00:44:51,290
plan that out and how you want it to

00:44:48,140 --> 00:44:54,110
look because this once you get so far in

00:44:51,290 --> 00:44:55,970
it's it's it's not impossible but it's

00:44:54,110 --> 00:44:57,969
more difficult to go back and try to

00:44:55,970 --> 00:45:01,609
restructure things

00:44:57,969 --> 00:45:03,559
all right so resources terraformed io of

00:45:01,609 --> 00:45:05,150
course that's the website the terraform

00:45:03,559 --> 00:45:07,819
book which is really good by James

00:45:05,150 --> 00:45:09,529
Turnbull tariffs are up and running it's

00:45:07,819 --> 00:45:12,769
really good and then you can reach out

00:45:09,529 --> 00:45:14,660
to me at Greg brilliant insight calm or

00:45:12,769 --> 00:45:19,699
my twitter handle which is bit

00:45:14,660 --> 00:45:23,839
underscore grade bring Lee and that's it

00:45:19,699 --> 00:45:44,599
any questions yes I don't know

00:45:23,839 --> 00:45:46,459
I'm scared yes yes right you're right

00:45:44,599 --> 00:45:49,670
right and so what are you saying is is

00:45:46,459 --> 00:45:51,469
that using tagging is really really

00:45:49,670 --> 00:45:54,199
important because then you can tag your

00:45:51,469 --> 00:45:57,799
resources based on the environment and

00:45:54,199 --> 00:45:58,969
then you can get a report one you know

00:45:57,799 --> 00:46:01,249
what's running in what specific

00:45:58,969 --> 00:46:04,239
environment you can tell like how much

00:46:01,249 --> 00:46:07,579
how much you're spending per environment

00:46:04,239 --> 00:46:09,739
yeah so we we use it for that as well as

00:46:07,579 --> 00:46:13,009
well as you know other other faiths

00:46:09,739 --> 00:46:30,549
other yeah so good point thank you yes

00:46:13,009 --> 00:46:32,569
sir you can yes you can do both so what

00:46:30,549 --> 00:46:35,329
you can do if logic

00:46:32,569 --> 00:46:37,489
I wouldn't recommend having different

00:46:35,329 --> 00:46:39,319
because you want the the purpose of it

00:46:37,489 --> 00:46:42,529
is to be able to write it once and reuse

00:46:39,319 --> 00:46:44,779
it in different environments so what we

00:46:42,529 --> 00:46:48,890
do is we just pass different variables

00:46:44,779 --> 00:46:51,019
into in to terraform so based on the

00:46:48,890 --> 00:46:53,809
environment in our pipeline so we have

00:46:51,019 --> 00:46:56,509
we rewrite it once say for instance like

00:46:53,809 --> 00:46:59,180
the sequel thing right you might want a

00:46:56,509 --> 00:47:02,869
different sequel instant size right so

00:46:59,180 --> 00:47:06,529
in the pipeline so that variable might

00:47:02,869 --> 00:47:09,319
be environment like var dot environment

00:47:06,529 --> 00:47:10,950
for and based on that and your pipeline

00:47:09,319 --> 00:47:13,980
you can say if it's this

00:47:10,950 --> 00:47:16,079
then passing and these are and and this

00:47:13,980 --> 00:47:18,380
specific value fits that and so I will

00:47:16,079 --> 00:47:21,030
recommend just writing it wants and then

00:47:18,380 --> 00:47:39,770
passing in whatever variables you need

00:47:21,030 --> 00:47:39,770
based on your environment yes sir okay

00:47:41,089 --> 00:47:56,339
right they know you you can write and

00:47:52,589 --> 00:48:02,059
you can you can read in values from the

00:47:56,339 --> 00:48:04,680
state file inside a terraform you

00:48:02,059 --> 00:48:07,170
it's a I think you use a data structure

00:48:04,680 --> 00:48:11,760
or data resource to do it and it

00:48:07,170 --> 00:48:14,490
basically you can pull in pull yeah

00:48:11,760 --> 00:48:16,619
right you can reference what you you

00:48:14,490 --> 00:48:20,280
know whatever is in that other state

00:48:16,619 --> 00:48:22,380
file in order to do it but what was the

00:48:20,280 --> 00:48:24,569
first part of course I'm sorry that was

00:48:22,380 --> 00:48:27,390
it yeah so they don't have they don't

00:48:24,569 --> 00:48:29,369
have direct awareness of each other you

00:48:27,390 --> 00:48:38,160
kind of have to you know represent

00:48:29,369 --> 00:48:41,040
yourself yeah so we we have that we have

00:48:38,160 --> 00:48:42,510
that in our environment where you know

00:48:41,040 --> 00:48:43,950
with so we're the core infrastructure

00:48:42,510 --> 00:48:45,329
team so we build out all the core

00:48:43,950 --> 00:48:46,770
infrastructure and there may be an

00:48:45,329 --> 00:48:49,200
applications team there may be using

00:48:46,770 --> 00:48:52,109
terraform and there may be values and

00:48:49,200 --> 00:48:53,880
that they use that we need to utilize in

00:48:52,109 --> 00:48:56,609
our in our infrastructure for whatever

00:48:53,880 --> 00:48:59,880
reason and so we just kind of reference

00:48:56,609 --> 00:49:03,410
that state file in our ter form and we

00:48:59,880 --> 00:49:07,559
can pull in values that that way so

00:49:03,410 --> 00:49:12,710
there are questions excellent thank you

00:49:07,559 --> 00:49:12,710

YouTube URL: https://www.youtube.com/watch?v=ZN0akl3a1L8


