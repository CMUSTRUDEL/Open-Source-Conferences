Title: DevOpsDays Philadelphia 2019- Ignites - The Test Automation Pyramid by Alan S Koch
Publication date: 2019-11-03
Playlist: DevOpsDays Philadelphia 2019
Description: 
	DevOpsDays Philadelphia 2019- Ignites - The Test Automation Pyramid by Alan S Koch

“Automate Everything You Can” has special meaning when it comes to testing. We’ve been automating testing for decades, and the lessons we’ve learned are nicely capsulized in the Test Automation Pyramid. In 5 minutes, we will walk thru the lessons that make Test Automation accessible & achievable.
Captions: 
	00:00:00,410 --> 00:00:11,839
[Music]

00:00:14,250 --> 00:00:18,939
so back in the first millennium we

00:00:17,140 --> 00:00:20,110
learned how to program computers it

00:00:18,939 --> 00:00:22,419
didn't take us long to figure out that

00:00:20,110 --> 00:00:24,939
we needed some tools like test

00:00:22,419 --> 00:00:27,189
automation but it was actually the agile

00:00:24,939 --> 00:00:28,630
community and this millennium that

00:00:27,189 --> 00:00:31,059
taught us about the test automation

00:00:28,630 --> 00:00:33,309
pyramid as they recognized how important

00:00:31,059 --> 00:00:35,050
test automation was so the test

00:00:33,309 --> 00:00:37,420
automation pyramid is essentially an

00:00:35,050 --> 00:00:39,219
architecture for understanding the

00:00:37,420 --> 00:00:41,800
different kinds of testing that we can

00:00:39,219 --> 00:00:43,870
do and how they fit together the idea of

00:00:41,800 --> 00:00:45,700
a foundation and building on that

00:00:43,870 --> 00:00:49,030
foundation so this foundational kind of

00:00:45,700 --> 00:00:50,739
tests like unit testing yeah that's the

00:00:49,030 --> 00:00:52,810
most foundational kind of testing we

00:00:50,739 --> 00:00:56,800
should be automating our unit testing

00:00:52,810 --> 00:01:00,310
but what does that mean well remember

00:00:56,800 --> 00:01:02,079
the word unit by itself so the idea of

00:01:00,310 --> 00:01:03,820
unit testing is we test things by

00:01:02,079 --> 00:01:06,640
themselves before we build it into an

00:01:03,820 --> 00:01:09,790
application who does that right not very

00:01:06,640 --> 00:01:12,399
many of us but what it takes to do it is

00:01:09,790 --> 00:01:14,590
to actually write tests where so that we

00:01:12,399 --> 00:01:17,229
can actually test individual pieces by

00:01:14,590 --> 00:01:19,810
themselves this is a radical idea that

00:01:17,229 --> 00:01:22,600
we're finally coming back - I didn't way

00:01:19,810 --> 00:01:24,250
back when writing stubs writing

00:01:22,600 --> 00:01:26,080
harnesses writing whatever tests where

00:01:24,250 --> 00:01:28,150
we need in order to really get that

00:01:26,080 --> 00:01:30,580
hundred percent test coverage but when

00:01:28,150 --> 00:01:33,670
we do that that then allows us to lay

00:01:30,580 --> 00:01:36,760
that foundation of good solid code that

00:01:33,670 --> 00:01:39,400
does precisely what we expected it to do

00:01:36,760 --> 00:01:41,409
and what we planned for it to do 100%

00:01:39,400 --> 00:01:44,560
code coverage does that for us

00:01:41,409 --> 00:01:46,750
what are we build on that foundation so

00:01:44,560 --> 00:01:49,720
the next layer up of the of the pyramid

00:01:46,750 --> 00:01:51,460
then is our interface testing testing

00:01:49,720 --> 00:01:53,170
the actual interfaces themselves I don't

00:01:51,460 --> 00:01:54,610
mean slam it all together run a

00:01:53,170 --> 00:01:56,229
functional test and hey if it worked

00:01:54,610 --> 00:01:59,770
they must have worked right I mean

00:01:56,229 --> 00:02:01,750
focused testing of interfaces like unit

00:01:59,770 --> 00:02:04,210
testing that takes a specialized

00:02:01,750 --> 00:02:05,890
approach and generally it means we're

00:02:04,210 --> 00:02:09,009
gonna have to write tests where again

00:02:05,890 --> 00:02:10,179
yeah test read again we're gonna have to

00:02:09,009 --> 00:02:11,709
write stubs we're gonna have to block

00:02:10,179 --> 00:02:14,140
things out right if we're using somebody

00:02:11,709 --> 00:02:16,030
else's interface mock it out whatever we

00:02:14,140 --> 00:02:17,950
have to write tests where in order to do

00:02:16,030 --> 00:02:20,080
a good job of actually testing to be

00:02:17,950 --> 00:02:22,599
sure the interface meets the interface

00:02:20,080 --> 00:02:23,980
contract but when we do now we have

00:02:22,599 --> 00:02:25,959
clean code and

00:02:23,980 --> 00:02:28,799
clean interfaces and that sets us up for

00:02:25,959 --> 00:02:32,319
the next layer of the pyramid which is

00:02:28,799 --> 00:02:34,090
functional testing right we finally get

00:02:32,319 --> 00:02:35,830
around to doing functional testing but

00:02:34,090 --> 00:02:38,230
unlike the way we normally think about

00:02:35,830 --> 00:02:40,900
doing automated functional testing don't

00:02:38,230 --> 00:02:43,319
go through the GUI what we want to do is

00:02:40,900 --> 00:02:46,209
expose all the functionality through

00:02:43,319 --> 00:02:48,040
api's so that we can do all of the

00:02:46,209 --> 00:02:49,599
functional testing we can automate all

00:02:48,040 --> 00:02:51,610
the functional testing without the

00:02:49,599 --> 00:02:55,569
messiness of trying to do it through the

00:02:51,610 --> 00:02:57,099
GUI then we have this idea of okay now

00:02:55,569 --> 00:02:59,799
we know the functionality is working

00:02:57,099 --> 00:03:02,920
what do we build on top of that now we

00:02:59,799 --> 00:03:05,410
can actually test the GUI itself and now

00:03:02,920 --> 00:03:07,030
we're not actually just using the GUI to

00:03:05,410 --> 00:03:08,530
get to the functionality we've already

00:03:07,030 --> 00:03:11,530
tested the functionality we know it

00:03:08,530 --> 00:03:13,750
works so now we can focus in on actually

00:03:11,530 --> 00:03:16,269
testing the GUI make sure every button

00:03:13,750 --> 00:03:18,910
every field every widget does precisely

00:03:16,269 --> 00:03:20,739
what we intended for it to do and now we

00:03:18,910 --> 00:03:23,620
have a foundation of a fully tested

00:03:20,739 --> 00:03:27,849
application for what do you build on

00:03:23,620 --> 00:03:30,970
that that's what we actually use as our

00:03:27,849 --> 00:03:33,130
basis for doing manual testing now

00:03:30,970 --> 00:03:34,930
manual testing is often going to be

00:03:33,130 --> 00:03:37,599
necessary there are certain things that

00:03:34,930 --> 00:03:41,049
people's eyes need to look at and can't

00:03:37,599 --> 00:03:43,780
automate every kind of test but we want

00:03:41,049 --> 00:03:45,760
to build this foundation of fully Oly

00:03:43,780 --> 00:03:48,130
tested application through automation

00:03:45,760 --> 00:03:49,810
and then do the manual testing of the

00:03:48,130 --> 00:03:53,769
things that person needs to look like on

00:03:49,810 --> 00:03:55,870
that now the horizontal axis of the

00:03:53,769 --> 00:03:58,569
pyramid is also speaking volumes to it

00:03:55,870 --> 00:04:00,250
it's basically telling us how many test

00:03:58,569 --> 00:04:02,470
cases do we expect to see at each of

00:04:00,250 --> 00:04:04,630
these layers of the foundation you can

00:04:02,470 --> 00:04:06,160
see unit testing is the biggest one if

00:04:04,630 --> 00:04:08,220
you're gonna get to 100% code coverage

00:04:06,160 --> 00:04:10,870
that's gonna take a lot of tests

00:04:08,220 --> 00:04:12,669
interface testing of course well it

00:04:10,870 --> 00:04:14,919
depends on how complex your interfaces

00:04:12,669 --> 00:04:17,590
are probably a lot the functional

00:04:14,919 --> 00:04:18,910
testing probably less but depends on the

00:04:17,590 --> 00:04:21,010
functionality of your application but we

00:04:18,910 --> 00:04:23,380
expect it to be less GUI testing

00:04:21,010 --> 00:04:26,050
probably a lot less and of course we

00:04:23,380 --> 00:04:28,000
want the manual testing to represent the

00:04:26,050 --> 00:04:31,479
smallest number of test cases just

00:04:28,000 --> 00:04:33,280
because it's so labor-intensive so

00:04:31,479 --> 00:04:35,409
that's kind of what we expect from a

00:04:33,280 --> 00:04:36,490
number of test cases standpoint but that

00:04:35,409 --> 00:04:37,480
goes hand in hand with the other

00:04:36,490 --> 00:04:40,210
vertical

00:04:37,480 --> 00:04:42,100
axis which is as we are now near the

00:04:40,210 --> 00:04:44,080
bottom of the pyramid we are talking

00:04:42,100 --> 00:04:46,630
about test cases that are relatively

00:04:44,080 --> 00:04:48,160
simple straightforward which means that

00:04:46,630 --> 00:04:49,870
are easy to write they're easy to

00:04:48,160 --> 00:04:51,880
maintain they're less likely to be

00:04:49,870 --> 00:04:54,130
brittle or to break when minor things

00:04:51,880 --> 00:04:56,920
change and it actually tend to run

00:04:54,130 --> 00:04:59,170
faster as well as you move up the

00:04:56,920 --> 00:05:01,570
pyramid the tests become increasingly

00:04:59,170 --> 00:05:04,540
more complex which means they're harder

00:05:01,570 --> 00:05:06,970
to write harder to maintain they become

00:05:04,540 --> 00:05:10,060
more brittle they take longer to run and

00:05:06,970 --> 00:05:11,350
yeah false negatives where the test

00:05:10,060 --> 00:05:13,750
doesn't find a problem that there

00:05:11,350 --> 00:05:15,730
actually is a problem and that's the

00:05:13,750 --> 00:05:17,620
main reason why we want to have as much

00:05:15,730 --> 00:05:20,710
of the testing down at the bottom of the

00:05:17,620 --> 00:05:23,970
pyramid as we can

00:05:20,710 --> 00:05:37,269
[Applause]

00:05:23,970 --> 00:05:37,269

YouTube URL: https://www.youtube.com/watch?v=M2zCkKEyXF0


