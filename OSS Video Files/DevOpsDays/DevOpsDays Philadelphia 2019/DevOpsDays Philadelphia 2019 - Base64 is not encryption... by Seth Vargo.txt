Title: DevOpsDays Philadelphia 2019 - Base64 is not encryption... by Seth Vargo
Publication date: 2019-11-03
Playlist: DevOpsDays Philadelphia 2019
Description: 
	DevOpsDays Philadelphia 2019 - Base64 is not encryption - a better story for Kubernetes Secrets by Seth Vargo

Secrets are a key pillar of Kubernetes’ security model, used internally (e.g. service accounts) and by users (e.g. API keys), but did you know they are stored in plaintext? That’s right, by default all Kubernetes secrets are base64 encoded and stored as plaintext in etcd. Anyone with access to the etcd cluster has access to all your Kubernetes secrets.

Thankfully there are better ways. This lecture provides an overview of different techniques for more securely managing secrets in Kubernetes including secrets encryption, KMS plugins, and tools like HashiCorp Vault. Attendees will learn the tradeoffs of each approach to make better decisions on how to secure their Kubernetes clusters.
Captions: 
	00:00:00,410 --> 00:00:11,839
[Music]

00:00:14,170 --> 00:00:19,670
all right cool thank you all so much for

00:00:17,600 --> 00:00:21,050
coming I know I stand between you and

00:00:19,670 --> 00:00:24,710
Bridget so I'll go as quickly as

00:00:21,050 --> 00:00:26,210
possible today's talk is like fun and

00:00:24,710 --> 00:00:28,579
light-hearted I'm gonna make fun of

00:00:26,210 --> 00:00:30,140
kubernetes a lot so just bear with me

00:00:28,579 --> 00:00:31,309
please laugh at my jokes even if you

00:00:30,140 --> 00:00:34,520
don't think they're funny it's for my

00:00:31,309 --> 00:00:37,309
own personal self-esteem cool how many

00:00:34,520 --> 00:00:39,700
people have heard of the kubernetes how

00:00:37,309 --> 00:00:43,640
many people are running it in production

00:00:39,700 --> 00:00:45,559
okay that was a lot less hands how many

00:00:43,640 --> 00:00:47,329
people are running their own kubernetes

00:00:45,559 --> 00:00:50,269
in production meaning not like a cloud

00:00:47,329 --> 00:00:53,839
provider or a managed version cool so

00:00:50,269 --> 00:00:57,199
this talk is really for all of you so

00:00:53,839 --> 00:00:58,249
the rest of you can just hang out but I

00:00:57,199 --> 00:01:01,100
promise I'll make it fun and

00:00:58,249 --> 00:01:02,719
entertaining this talk is about how

00:01:01,100 --> 00:01:04,040
encoding and encryption or not the same

00:01:02,719 --> 00:01:05,000
thing but there's some background that I

00:01:04,040 --> 00:01:07,880
have to go through first

00:01:05,000 --> 00:01:09,229
my name is Steph I work at Google I've

00:01:07,880 --> 00:01:10,970
been at Google about two years prior to

00:01:09,229 --> 00:01:12,800
that I worked at Hoshi Corp I was there

00:01:10,970 --> 00:01:14,560
for four and a half years so Rosemary's

00:01:12,800 --> 00:01:16,760
talk resonated really well with me

00:01:14,560 --> 00:01:19,310
that's my twitter handle on my Google

00:01:16,760 --> 00:01:21,260
email my LinkedIn my facebook my

00:01:19,310 --> 00:01:21,650
profound numbers that's not my phone

00:01:21,260 --> 00:01:23,390
number

00:01:21,650 --> 00:01:25,250
but feel free to tweet at me my DMS are

00:01:23,390 --> 00:01:27,440
open if you have questions you don't

00:01:25,250 --> 00:01:29,810
feel comfortable asking here on the

00:01:27,440 --> 00:01:31,700
microphone later or on public internet

00:01:29,810 --> 00:01:36,830
you can always DM me or email me at

00:01:31,700 --> 00:01:39,340
Google calm cool so let's start with the

00:01:36,830 --> 00:01:43,370
question in the room what is a secret

00:01:39,340 --> 00:01:45,290
and I I did this talk a while ago and I

00:01:43,370 --> 00:01:46,610
found that I have to set this level base

00:01:45,290 --> 00:01:47,810
ground because people come in with these

00:01:46,610 --> 00:01:50,300
assumptions of what I'm talking about

00:01:47,810 --> 00:01:52,550
when I say a secret so for the purposes

00:01:50,300 --> 00:01:55,250
of this talk a secret is a credential a

00:01:52,550 --> 00:01:57,590
configuration an API key or some type of

00:01:55,250 --> 00:01:59,240
information that an application or

00:01:57,590 --> 00:02:01,580
service needs at build time or runtime

00:01:59,240 --> 00:02:04,040
so think like a Twilio api key in order

00:02:01,580 --> 00:02:07,070
to talk to some to send a text message

00:02:04,040 --> 00:02:08,899
or mailgun api key in order to send some

00:02:07,070 --> 00:02:11,750
email for example or a service account

00:02:08,899 --> 00:02:12,980
to talk to a cloud provider specifically

00:02:11,750 --> 00:02:14,660
we're not really talking about like

00:02:12,980 --> 00:02:16,700
credit cards or social security numbers

00:02:14,660 --> 00:02:17,840
although they could apply here we're

00:02:16,700 --> 00:02:21,739
really talking about like application

00:02:17,840 --> 00:02:23,510
level secrets so given that why do we

00:02:21,739 --> 00:02:25,190
protect secrets to put it another way

00:02:23,510 --> 00:02:27,770
why is Twitter not our

00:02:25,190 --> 00:02:31,940
secrets management solution right

00:02:27,770 --> 00:02:34,430
there's an API there versioned they're

00:02:31,940 --> 00:02:36,800
immutable you can't edit them so there's

00:02:34,430 --> 00:02:38,390
you know why not just publicly store

00:02:36,800 --> 00:02:39,860
secrets well there's three main reasons

00:02:38,390 --> 00:02:41,800
the first is that secrets are an

00:02:39,860 --> 00:02:45,140
incredibly attractive target for hackers

00:02:41,800 --> 00:02:47,990
but why well the reason is that they are

00:02:45,140 --> 00:02:51,020
often leaked or accidentally included in

00:02:47,990 --> 00:02:52,250
repositories or storage buckets if we

00:02:51,020 --> 00:02:53,450
look at a lot of like the recent

00:02:52,250 --> 00:02:56,000
security incidents they've been a result

00:02:53,450 --> 00:02:57,350
of like an s3 bucket that wasn't

00:02:56,000 --> 00:02:58,520
properly secured that included a

00:02:57,350 --> 00:03:00,050
credential that could then be used to

00:02:58,520 --> 00:03:02,450
elevate access to github to gain access

00:03:00,050 --> 00:03:05,210
to source control or customer data and

00:03:02,450 --> 00:03:07,130
I'm not like talking down on s3 or

00:03:05,210 --> 00:03:08,120
github right this is a security into but

00:03:07,130 --> 00:03:09,160
these are the ones that we're seeing

00:03:08,120 --> 00:03:11,540
more frequently

00:03:09,160 --> 00:03:15,470
the reason this tends to happen though

00:03:11,540 --> 00:03:17,090
is that secrets often include overly

00:03:15,470 --> 00:03:19,190
broad permissions how many people here

00:03:17,090 --> 00:03:22,760
work at or have worked at a thing that

00:03:19,190 --> 00:03:24,500
was called a startup right when you work

00:03:22,760 --> 00:03:25,970
at those these things called startups

00:03:24,500 --> 00:03:27,620
right you have this thing called VC

00:03:25,970 --> 00:03:32,060
money which is like monopoly money but

00:03:27,620 --> 00:03:34,550
real and they tell you like make this

00:03:32,060 --> 00:03:36,200
product right and make it fast because I

00:03:34,550 --> 00:03:39,350
want like a 10x return on my money in

00:03:36,200 --> 00:03:40,880
the next three days so oftentimes when

00:03:39,350 --> 00:03:42,830
you're in a start-up and I've been there

00:03:40,880 --> 00:03:45,140
I've been in quite a few of them there

00:03:42,830 --> 00:03:47,000
is no like principle of least privilege

00:03:45,140 --> 00:03:48,800
right it's like Oh a new employee here

00:03:47,000 --> 00:03:52,820
is root on all systems please let us

00:03:48,800 --> 00:03:55,610
know if you need more right and and it's

00:03:52,820 --> 00:03:56,540
like the like the old xkcd comment which

00:03:55,610 --> 00:03:57,890
is like make me a sandwich

00:03:56,540 --> 00:03:59,480
no soo don't make me a sandwich right

00:03:57,890 --> 00:04:03,080
it's like that but for everything the HR

00:03:59,480 --> 00:04:05,000
system the spreadsheets prod and then

00:04:03,080 --> 00:04:06,560
like six years later when you're a real

00:04:05,000 --> 00:04:08,420
company servicing enterprises you're

00:04:06,560 --> 00:04:09,920
wondering like well how did we get

00:04:08,420 --> 00:04:11,330
hacked I don't understand all of our

00:04:09,920 --> 00:04:13,040
employees had root access shouldn't they

00:04:11,330 --> 00:04:16,669
have been like stop this from happening

00:04:13,040 --> 00:04:18,350
so this is why we care about protecting

00:04:16,669 --> 00:04:21,109
secrets they often include overly broad

00:04:18,350 --> 00:04:22,550
permissions they're easily leaked even

00:04:21,109 --> 00:04:24,580
with like them the best security

00:04:22,550 --> 00:04:26,720
practices it's very easy to leak these

00:04:24,580 --> 00:04:28,010
for context like I've worked in the

00:04:26,720 --> 00:04:30,980
security industry and the DevOps

00:04:28,010 --> 00:04:35,060
industry for quite some time about like

00:04:30,980 --> 00:04:36,440
two years ago I pushed my dot files up

00:04:35,060 --> 00:04:37,990
into a public repo and I was like hey

00:04:36,440 --> 00:04:39,340
everyone check out my dot files like

00:04:37,990 --> 00:04:41,560
this really cool terminal theme you all

00:04:39,340 --> 00:04:44,440
should use it and I accidentally pushed

00:04:41,560 --> 00:04:46,480
up my dot Heroku folder which includes

00:04:44,440 --> 00:04:48,370
my Heroku credentials and then everyone

00:04:46,480 --> 00:04:50,470
was able to like access all of the apps

00:04:48,370 --> 00:04:51,820
that I had access to in Heroku and that

00:04:50,470 --> 00:04:53,020
was just like an accident right even

00:04:51,820 --> 00:04:56,410
people who think about this all the time

00:04:53,020 --> 00:04:57,910
make mistakes so given that we have to

00:04:56,410 --> 00:04:59,940
protect secrets and there's four key

00:04:57,910 --> 00:05:02,620
ways in which you protect secrets

00:04:59,940 --> 00:05:04,120
the first is encryption I know that

00:05:02,620 --> 00:05:05,980
that's not the first on the slide the

00:05:04,120 --> 00:05:08,290
first is encryption we want to encrypt

00:05:05,980 --> 00:05:11,290
secrets in transit and at rest the

00:05:08,290 --> 00:05:12,940
second is rotation if we assume that at

00:05:11,290 --> 00:05:14,410
some point a credential is going to be

00:05:12,940 --> 00:05:16,840
leaked whether that's on purpose or

00:05:14,410 --> 00:05:18,760
accidentally we have to have a process

00:05:16,840 --> 00:05:20,860
in place for rotation and this can't be

00:05:18,760 --> 00:05:22,660
like a yearly process that causes six

00:05:20,860 --> 00:05:23,920
months of downtime to your app this has

00:05:22,660 --> 00:05:25,410
to be something that you can do on a

00:05:23,920 --> 00:05:27,550
regular basis like weekly or monthly

00:05:25,410 --> 00:05:30,670
something that happens in process with

00:05:27,550 --> 00:05:31,810
zero or very little downtime the third

00:05:30,670 --> 00:05:34,060
thing we have to do to protect secrets

00:05:31,810 --> 00:05:36,040
is we have to isolate them we want our

00:05:34,060 --> 00:05:37,990
secrets to be stored separately from

00:05:36,040 --> 00:05:39,400
where they're accessed basically we want

00:05:37,990 --> 00:05:41,500
to make it as hard as possible for an

00:05:39,400 --> 00:05:43,060
attacker to gain access to the secrets

00:05:41,500 --> 00:05:44,710
so the easiest way to do that or one of

00:05:43,060 --> 00:05:47,080
the easiest ways to do that is to store

00:05:44,710 --> 00:05:49,330
them separately and then the fourth way

00:05:47,080 --> 00:05:51,540
in which we protect secrets is by

00:05:49,330 --> 00:05:53,620
assuming that we're going to be hacked

00:05:51,540 --> 00:05:55,090
assuming that someone is going to make a

00:05:53,620 --> 00:05:57,940
mistake again intentionally or

00:05:55,090 --> 00:06:00,010
unintentionally and building rich and

00:05:57,940 --> 00:06:02,680
verbose audit logging into our system so

00:06:00,010 --> 00:06:04,510
if we just do all of the three right

00:06:02,680 --> 00:06:06,400
it's like building a giant castle that's

00:06:04,510 --> 00:06:08,590
super fortified and then you assume that

00:06:06,400 --> 00:06:10,600
like you're secure so that whenever the

00:06:08,590 --> 00:06:13,120
enemy penetrates your castle you're like

00:06:10,600 --> 00:06:15,430
oh I don't know what to do now I don't

00:06:13,120 --> 00:06:16,660
plan for that or you have no visibility

00:06:15,430 --> 00:06:18,190
into it right it happens in the middle

00:06:16,660 --> 00:06:19,990
of the night you assume that your castle

00:06:18,190 --> 00:06:21,670
walls are impenetrable so that when

00:06:19,990 --> 00:06:23,440
someone penetrates them you have no idea

00:06:21,670 --> 00:06:24,850
what to do and this is where the fourth

00:06:23,440 --> 00:06:26,980
part of protecting secrets comes in

00:06:24,850 --> 00:06:28,720
which is just assume that your secrets

00:06:26,980 --> 00:06:30,250
are going to be compromised so make sure

00:06:28,720 --> 00:06:31,630
that you have visibility into when that

00:06:30,250 --> 00:06:34,870
happens and make sure you have a plan to

00:06:31,630 --> 00:06:37,090
recover this talk is going to focus on

00:06:34,870 --> 00:06:39,070
encryption specifically with respect to

00:06:37,090 --> 00:06:40,600
kubernetes now it's important to note

00:06:39,070 --> 00:06:42,610
that the other three are not less

00:06:40,600 --> 00:06:45,190
important they are all equally important

00:06:42,610 --> 00:06:46,960
but I only have like 30 minutes so we're

00:06:45,190 --> 00:06:48,370
going to talk about encryption also the

00:06:46,960 --> 00:06:51,169
other three don't lend themselves to

00:06:48,370 --> 00:06:53,599
quite as many jokes so we're gonna

00:06:51,169 --> 00:06:54,860
we're gonna stick with encryption just

00:06:53,599 --> 00:06:56,479
like there's multiple ways to protect

00:06:54,860 --> 00:06:58,639
secrets there's multiple ways to do

00:06:56,479 --> 00:07:00,110
encryption so some of you are probably

00:06:58,639 --> 00:07:01,610
familiar with like machine level

00:07:00,110 --> 00:07:04,400
encryption or file system encryption

00:07:01,610 --> 00:07:06,259
this is like apples file vault or like

00:07:04,400 --> 00:07:09,439
the secure Enclave on your iPhone or iOS

00:07:06,259 --> 00:07:11,389
device and then like as we move further

00:07:09,439 --> 00:07:13,999
up the stack right or I think it's

00:07:11,389 --> 00:07:15,680
BitLocker on windows there's like one

00:07:13,999 --> 00:07:17,300
key or a keyring that encrypts the

00:07:15,680 --> 00:07:18,710
entire device right and if an attacker

00:07:17,300 --> 00:07:20,569
is able to like brute force that key

00:07:18,710 --> 00:07:23,689
they effectively decrypt all of the data

00:07:20,569 --> 00:07:25,339
on the device if we go higher up the

00:07:23,689 --> 00:07:26,900
stack though we get towards things like

00:07:25,339 --> 00:07:28,849
service level encryption and application

00:07:26,900 --> 00:07:30,949
layer encryption which is instead of the

00:07:28,849 --> 00:07:33,379
disk being encrypted with like a string

00:07:30,949 --> 00:07:35,089
some high entropy string instead we're

00:07:33,379 --> 00:07:36,529
going to encrypt every file with its own

00:07:35,089 --> 00:07:39,099
unique key and we're gonna centrally

00:07:36,529 --> 00:07:41,419
manage those in some external system and

00:07:39,099 --> 00:07:43,249
generally we want multiple layers of

00:07:41,419 --> 00:07:45,139
encryption right we want to encrypt

00:07:43,249 --> 00:07:46,729
things at the file level but then also

00:07:45,139 --> 00:07:49,009
at the operating system level or at the

00:07:46,729 --> 00:07:53,029
disk level so usually you want two or

00:07:49,009 --> 00:07:54,139
more layers of encryption this talk is

00:07:53,029 --> 00:07:55,699
specifically going to talk about

00:07:54,139 --> 00:07:57,889
application layer encryption or a player

00:07:55,699 --> 00:08:00,080
encryption so a player encryption is

00:07:57,889 --> 00:08:02,449
applied at the earliest possible step

00:08:00,080 --> 00:08:04,819
basically with a player encryption you

00:08:02,449 --> 00:08:07,339
define a contract that says any secret

00:08:04,819 --> 00:08:09,560
in my application only ever exists in

00:08:07,339 --> 00:08:11,960
plain text within the balance of my

00:08:09,560 --> 00:08:14,000
application so if someone gives me a

00:08:11,960 --> 00:08:16,399
secret or if I'm storing a secret that

00:08:14,000 --> 00:08:18,169
secret is only ever in plaintext in my

00:08:16,399 --> 00:08:19,879
application in memory and if it ever

00:08:18,169 --> 00:08:22,520
leaves my application such as like an

00:08:19,879 --> 00:08:26,689
outbound API response or some type of

00:08:22,520 --> 00:08:29,089
external API call it is encrypted this

00:08:26,689 --> 00:08:31,279
provides a very granular protection

00:08:29,089 --> 00:08:32,659
level because every secret or every

00:08:31,279 --> 00:08:34,130
secret for every version of your

00:08:32,659 --> 00:08:36,140
application could be encrypted with a

00:08:34,130 --> 00:08:38,360
different string so that if an attacker

00:08:36,140 --> 00:08:40,610
is able to say brute force or gain

00:08:38,360 --> 00:08:42,440
access to that key they can't decrypt

00:08:40,610 --> 00:08:43,849
everything else right it's like a unique

00:08:42,440 --> 00:08:46,970
encryption key for every secret that you

00:08:43,849 --> 00:08:48,920
have this also protects your data as it

00:08:46,970 --> 00:08:51,350
moves throughout the system so we always

00:08:48,920 --> 00:08:53,690
want to encrypt secrets via TLS in

00:08:51,350 --> 00:08:55,310
transit and we want to encrypt them when

00:08:53,690 --> 00:08:57,110
they're at rest as well but with

00:08:55,310 --> 00:08:58,910
application layer encryption you encrypt

00:08:57,110 --> 00:09:00,380
the secret before it leaves your

00:08:58,910 --> 00:09:03,260
application and then you encrypt it

00:09:00,380 --> 00:09:06,290
again in transit with like TLS or some

00:09:03,260 --> 00:09:07,490
type of like SSL type thing so even if

00:09:06,290 --> 00:09:10,040
you have a developer who makes a

00:09:07,490 --> 00:09:12,140
terrible mistake and makes like an

00:09:10,040 --> 00:09:14,029
insecure HTTP call right they're not

00:09:12,140 --> 00:09:15,680
using HTTPS your secret is still

00:09:14,029 --> 00:09:18,440
protected because it's never transmitted

00:09:15,680 --> 00:09:21,709
in plain text even if the request itself

00:09:18,440 --> 00:09:22,970
is in plain text okay so that was a lot

00:09:21,709 --> 00:09:24,110
of stuff what does any of this have to

00:09:22,970 --> 00:09:25,519
do with kubernetes you all were like

00:09:24,110 --> 00:09:26,930
there was kubernetes in the title and

00:09:25,519 --> 00:09:30,050
he's talking about secrets I don't

00:09:26,930 --> 00:09:32,990
understand well it turns out that

00:09:30,050 --> 00:09:35,000
kubernetes has defaults with respect to

00:09:32,990 --> 00:09:36,529
how it handles secrets and as you can

00:09:35,000 --> 00:09:42,529
see by the four masks on the screen

00:09:36,529 --> 00:09:44,000
they're not very good so I'll preface

00:09:42,529 --> 00:09:46,550
this by saying like I'm not trying to

00:09:44,000 --> 00:09:49,040
scare anyone but like kubernetes is

00:09:46,550 --> 00:09:51,199
insecure by default particularly with

00:09:49,040 --> 00:09:52,699
respect to how it handles secrets in

00:09:51,199 --> 00:09:54,680
kubernetes when you were on cocoa to

00:09:52,699 --> 00:09:58,490
create secret or The Associated API call

00:09:54,680 --> 00:10:00,500
your secrets are created they are basics

00:09:58,490 --> 00:10:02,779
before encoded and then they are stored

00:10:00,500 --> 00:10:04,100
in plain text in ED CD if you're not

00:10:02,779 --> 00:10:05,930
super familiar with the internals of

00:10:04,100 --> 00:10:07,459
communities that's fine at CD is kind of

00:10:05,930 --> 00:10:09,740
like the file system or kubernetes

00:10:07,459 --> 00:10:11,029
stores all of its data it's not actually

00:10:09,740 --> 00:10:13,519
a file system but you can think of it

00:10:11,029 --> 00:10:16,339
that way so this is basically like me

00:10:13,519 --> 00:10:17,720
telling you a secret you writing that

00:10:16,339 --> 00:10:19,640
secret on a post-it note and putting it

00:10:17,720 --> 00:10:21,199
in your pocket and then any time someone

00:10:19,640 --> 00:10:22,699
comes to you directly and says what's

00:10:21,199 --> 00:10:24,140
the secret you're like no you don't have

00:10:22,699 --> 00:10:25,970
authorization I need to see your our

00:10:24,140 --> 00:10:27,560
back policy but someone could just get

00:10:25,970 --> 00:10:29,689
the note out of your pocket directly and

00:10:27,560 --> 00:10:32,149
never even talk to you and this is

00:10:29,689 --> 00:10:33,949
anyone who has access to NCD has access

00:10:32,149 --> 00:10:36,110
to all of your secrets in plaintext it

00:10:33,949 --> 00:10:37,760
doesn't matter your are back permissions

00:10:36,110 --> 00:10:39,110
it doesn't matter your network policy it

00:10:37,760 --> 00:10:40,610
doesn't matter your upon security

00:10:39,110 --> 00:10:43,160
policies like none of that matters

00:10:40,610 --> 00:10:44,990
because at the end of the day once you

00:10:43,160 --> 00:10:47,689
have access to at CD you have access to

00:10:44,990 --> 00:10:49,790
all of this data in plain text now I

00:10:47,689 --> 00:10:52,939
will also say that if you're running a

00:10:49,790 --> 00:10:54,740
cloud provider managed kubernetes this

00:10:52,939 --> 00:10:55,910
behavior might be changed and we'll talk

00:10:54,740 --> 00:10:58,010
about ways in which you can change this

00:10:55,910 --> 00:10:59,899
yourself and and some of the defaults

00:10:58,010 --> 00:11:01,220
that exist in some cloud providers but

00:10:59,899 --> 00:11:02,660
if you're running like a straight-up

00:11:01,220 --> 00:11:04,250
kubernetes cluster today like you run

00:11:02,660 --> 00:11:06,110
Kubb admin you spin up a cluster and

00:11:04,250 --> 00:11:09,110
create a secret that's secrets in plain

00:11:06,110 --> 00:11:10,399
text it's basic ste foreign coded but

00:11:09,110 --> 00:11:12,709
not encrypted and we'll talk about that

00:11:10,399 --> 00:11:14,620
in a second so I have really pretty

00:11:12,709 --> 00:11:16,910
animations because security is hard

00:11:14,620 --> 00:11:19,160
we're gonna look at like

00:11:16,910 --> 00:11:21,560
this architecture diagram a few times so

00:11:19,160 --> 00:11:22,820
the credit card is the secret I know I

00:11:21,560 --> 00:11:24,440
told you that we weren't talking about

00:11:22,820 --> 00:11:26,630
credit cards but that was like the best

00:11:24,440 --> 00:11:28,160
picture that I could find we have the

00:11:26,630 --> 00:11:30,200
kubernetes api server which is like

00:11:28,160 --> 00:11:31,760
making the API call and then Etsy D and

00:11:30,200 --> 00:11:33,830
then those are surrounded by the the

00:11:31,760 --> 00:11:37,550
master node or the VM that's running the

00:11:33,830 --> 00:11:39,350
docker containers here so when you run

00:11:37,550 --> 00:11:41,510
cocoa to create secret you give that

00:11:39,350 --> 00:11:43,190
secret to the kubernetes api server the

00:11:41,510 --> 00:11:44,720
kubernetes api server will always see

00:11:43,190 --> 00:11:47,120
your secret in plain text so it's kind

00:11:44,720 --> 00:11:49,370
of like the API contract the kubernetes

00:11:47,120 --> 00:11:51,530
api server will then base64 encode that

00:11:49,370 --> 00:11:56,770
data and put it into NCD how many people

00:11:51,530 --> 00:12:00,320
get my joke okay I thought it was funny

00:11:56,770 --> 00:12:02,720
that there's two equal sides come on and

00:12:00,320 --> 00:12:04,280
then we're going to see my favorite

00:12:02,720 --> 00:12:06,230
character in this entire charade which

00:12:04,280 --> 00:12:08,240
is the red raccoon and the red raccoon

00:12:06,230 --> 00:12:10,100
represents an attacker and in this

00:12:08,240 --> 00:12:11,720
example if an attacker has access to n

00:12:10,100 --> 00:12:13,610
CD they have access to all of your

00:12:11,720 --> 00:12:15,110
secrets in plain text doesn't matter

00:12:13,610 --> 00:12:17,000
what policies or permissions you've set

00:12:15,110 --> 00:12:19,580
on set up on kubernetes because they've

00:12:17,000 --> 00:12:22,550
just straight-up bypassed that and if

00:12:19,580 --> 00:12:25,190
you confuse encryption and encoding

00:12:22,550 --> 00:12:27,980
because base64 is encoding like utf-8 or

00:12:25,190 --> 00:12:29,600
ASCII an encryption if you confuse those

00:12:27,980 --> 00:12:32,590
two things you get this thing that I

00:12:29,600 --> 00:12:32,590
like to call encryption

00:12:33,390 --> 00:12:38,020
every time people I love it it's the

00:12:35,980 --> 00:12:39,820
best thing and crouch in is what happens

00:12:38,020 --> 00:12:41,140
when you confuse encryption and encoding

00:12:39,820 --> 00:12:44,880
now you're probably thinking to yourself

00:12:41,140 --> 00:12:44,880
well maybe we would ever do this right

00:12:45,510 --> 00:12:50,770
hypothetically there are websites out

00:12:48,010 --> 00:12:52,750
there that are kind of like like net

00:12:50,770 --> 00:12:55,240
scan for the internet shodhan is one of

00:12:52,750 --> 00:12:58,510
them and you can go on show it in and

00:12:55,240 --> 00:13:00,490
find publicly exposed at CD servers now

00:12:58,510 --> 00:13:02,620
it's worth noting that like sed has uses

00:13:00,490 --> 00:13:05,710
outside of kubernetes but you would be

00:13:02,620 --> 00:13:07,090
surprised the 286,000 publicly exposed

00:13:05,710 --> 00:13:09,370
SED servers out there that have

00:13:07,090 --> 00:13:11,530
kubernetes secrets in plain text someone

00:13:09,370 --> 00:13:13,920
told me that I definitely did not look

00:13:11,530 --> 00:13:17,020
that out myself right before this talk

00:13:13,920 --> 00:13:20,020
my point is that some of this stuff is

00:13:17,020 --> 00:13:22,720
really hard but worse it's really easy

00:13:20,020 --> 00:13:24,280
to mess up it's really really easy to

00:13:22,720 --> 00:13:25,960
make a very simple mistake and

00:13:24,280 --> 00:13:27,010
accidentally expose all your secrets to

00:13:25,960 --> 00:13:30,330
the world with this default

00:13:27,010 --> 00:13:36,250
configuration so let me show you this

00:13:30,330 --> 00:13:40,270
who's excited just just YouTube that's

00:13:36,250 --> 00:13:43,660
cool all right so we got a mirror or

00:13:40,270 --> 00:13:45,010
built in thing here alright so what I

00:13:43,660 --> 00:13:47,620
have here is I have kubernetes running

00:13:45,010 --> 00:13:49,060
in a virtual machine it's straight up

00:13:47,620 --> 00:13:51,130
covering IDs there's no multi node but I

00:13:49,060 --> 00:13:52,390
spun it up with coop admin didn't

00:13:51,130 --> 00:13:55,660
configure anything else these are like

00:13:52,390 --> 00:13:58,450
the base configuration base defaults so

00:13:55,660 --> 00:13:59,590
I'm going to pull up my cheat sheet I'm

00:13:58,450 --> 00:14:05,440
cool

00:13:59,590 --> 00:14:06,820
so coop cuddle get pod there's a slight

00:14:05,440 --> 00:14:08,320
delay and it's really messing with me

00:14:06,820 --> 00:14:09,940
all right so there's no resources

00:14:08,320 --> 00:14:12,670
there's nothing nothing running in this

00:14:09,940 --> 00:14:14,770
particular kubernetes cluster yet but

00:14:12,670 --> 00:14:18,910
let me go ahead and create a secret so

00:14:14,770 --> 00:14:23,200
I'm gonna run create secret generic will

00:14:18,910 --> 00:14:26,860
name this demo from literal let's see

00:14:23,200 --> 00:14:30,860
username equals what should our username

00:14:26,860 --> 00:14:34,730
be what

00:14:30,860 --> 00:14:39,740
DevOps okay from literal equal once to

00:14:34,730 --> 00:14:43,130
our password be 0 0 1 1 2 2 3 3 4 4 5

00:14:39,740 --> 00:14:44,810
that right yeah cool so we've created

00:14:43,130 --> 00:14:45,940
this secret right how many people feel

00:14:44,810 --> 00:14:50,390
more secure

00:14:45,940 --> 00:14:51,590
I'm always insecure it's fine and then

00:14:50,390 --> 00:14:52,970
what I'm gonna do here is I'm going to

00:14:51,590 --> 00:14:55,250
use a command line tool called HUD

00:14:52,970 --> 00:14:56,780
cuddle similar to Kubb cuddle it's

00:14:55,250 --> 00:15:01,130
pronounced cuddle if you say it any

00:14:56,780 --> 00:15:03,290
other way you're incorrect and what this

00:15:01,130 --> 00:15:05,600
is doing is it's it's making an API call

00:15:03,290 --> 00:15:06,770
under the hood so when I run sed cuddle

00:15:05,600 --> 00:15:09,800
you could actually replace this with

00:15:06,770 --> 00:15:11,090
curl - - many other flags to specify CA

00:15:09,800 --> 00:15:13,460
certificates and a bunch of stuff and

00:15:11,090 --> 00:15:15,920
then localhost because I'm just querying

00:15:13,460 --> 00:15:21,980
the local sed server and I give it a

00:15:15,920 --> 00:15:23,330
path which is registry secrets default

00:15:21,980 --> 00:15:29,120
which is the names piece that we're in

00:15:23,330 --> 00:15:31,640
and I named this demo so this is running

00:15:29,120 --> 00:15:35,030
and we get back this thing now you'll

00:15:31,640 --> 00:15:36,680
notice that there are some what I like

00:15:35,030 --> 00:15:40,460
to call super kart super mario kart item

00:15:36,680 --> 00:15:42,170
boxes which represents security for this

00:15:40,460 --> 00:15:45,760
talk anytime you see Super Mario Kart

00:15:42,170 --> 00:15:49,120
item boxes that's secure more is better

00:15:45,760 --> 00:15:51,410
but you'll notice in here that our

00:15:49,120 --> 00:15:53,420
password is like just straight-up in

00:15:51,410 --> 00:15:54,650
plain text right there and this is if I

00:15:53,420 --> 00:15:56,000
you like pipe this text dump you'll see

00:15:54,650 --> 00:15:57,800
there's like some binary characters in

00:15:56,000 --> 00:15:59,750
here but the password is in plain text

00:15:57,800 --> 00:16:03,410
and the username is also in plain text

00:15:59,750 --> 00:16:06,050
right there so even if I shut down

00:16:03,410 --> 00:16:08,240
kubernetes right now all of this data is

00:16:06,050 --> 00:16:10,400
in plain text in NCD worse it's also in

00:16:08,240 --> 00:16:12,320
etsy DS right ahead log which is how it

00:16:10,400 --> 00:16:14,810
maintains consensus and if I back up

00:16:12,320 --> 00:16:18,290
this file system for example if I make a

00:16:14,810 --> 00:16:20,540
backup of the volume that this is on it

00:16:18,290 --> 00:16:23,450
will also be included in that backup of

00:16:20,540 --> 00:16:26,320
that file system volume cool so

00:16:23,450 --> 00:16:28,370
hopefully everyone is super paranoid now

00:16:26,320 --> 00:16:29,840
now we need to talk about this thing

00:16:28,370 --> 00:16:30,800
called envelope encryption so I'm gonna

00:16:29,840 --> 00:16:32,000
doing one of those things where I'm

00:16:30,800 --> 00:16:32,870
gonna like talk about something for a

00:16:32,000 --> 00:16:34,100
little bit and you're gonna be like I

00:16:32,870 --> 00:16:36,620
still don't understand how this has to

00:16:34,100 --> 00:16:38,930
do with kubernetes I promise it comes

00:16:36,620 --> 00:16:41,420
back also there's some really dope

00:16:38,930 --> 00:16:43,850
animations to just be ready for that

00:16:41,420 --> 00:16:45,440
so envelope encryption is this

00:16:43,850 --> 00:16:47,360
this really cool thing that involves

00:16:45,440 --> 00:16:49,330
three pieces of information the data

00:16:47,360 --> 00:16:51,530
which will represent a blue credit card

00:16:49,330 --> 00:16:53,570
the data encryption key which will

00:16:51,530 --> 00:16:55,040
represent via a red key and the key

00:16:53,570 --> 00:16:57,050
encryption key which will represent via

00:16:55,040 --> 00:17:01,300
a green key I tried to pick colorblind

00:16:57,050 --> 00:17:03,740
friendly colors so blue red and green

00:17:01,300 --> 00:17:07,580
that was the first animation feel free

00:17:03,740 --> 00:17:09,890
to like ooh and AW as these happen with

00:17:07,580 --> 00:17:12,040
date with envelope encryption you

00:17:09,890 --> 00:17:14,450
basically take your piece of data you

00:17:12,040 --> 00:17:16,610
generate a key encryption key and you

00:17:14,450 --> 00:17:18,410
encrypt the data then you have some

00:17:16,610 --> 00:17:20,060
centrally managed key which is your data

00:17:18,410 --> 00:17:21,860
encryption key and you encrypt your key

00:17:20,060 --> 00:17:23,090
encryption key with that and then you

00:17:21,860 --> 00:17:24,710
put those two pieces of data together

00:17:23,090 --> 00:17:26,330
and you put them in like the file system

00:17:24,710 --> 00:17:28,190
or at CD or whatever and you store them

00:17:26,330 --> 00:17:30,020
together and then when you want to

00:17:28,190 --> 00:17:32,180
reverse that process you split them

00:17:30,020 --> 00:17:34,160
apart you use your data encryption key

00:17:32,180 --> 00:17:35,720
to decrypt the key part and get back

00:17:34,160 --> 00:17:37,520
your plaintext key encryption key and

00:17:35,720 --> 00:17:40,190
then you decrypt your key encryption key

00:17:37,520 --> 00:17:42,860
to get back your plaintext data and then

00:17:40,190 --> 00:17:44,720
you rotate your data encryption keys

00:17:42,860 --> 00:17:46,400
frequently and you generate a new key

00:17:44,720 --> 00:17:49,610
encryption key every time you write new

00:17:46,400 --> 00:17:51,590
data so all the locum envelope

00:17:49,610 --> 00:17:53,720
encryption kind of like summarize in

00:17:51,590 --> 00:17:55,370
text form and you generate a new data

00:17:53,720 --> 00:17:57,230
encryption key for each new data entry

00:17:55,370 --> 00:17:59,090
you can crypto shredding because you

00:17:57,230 --> 00:18:00,590
can't revoke your key encryption key at

00:17:59,090 --> 00:18:03,320
any time and then all of your data

00:18:00,590 --> 00:18:04,520
encryption keys are effectively or you

00:18:03,320 --> 00:18:06,020
can revoke the key encryption key or the

00:18:04,520 --> 00:18:08,030
data encryption key and they're both

00:18:06,020 --> 00:18:09,410
gone at any time and you can easily

00:18:08,030 --> 00:18:11,540
version and rotate right because your

00:18:09,410 --> 00:18:14,630
key encryption key is managed separately

00:18:11,540 --> 00:18:15,500
from your data encryption key okay so

00:18:14,630 --> 00:18:18,560
what does any of that have to do with

00:18:15,500 --> 00:18:19,880
kubernetes well in kubernetes 1.7 we

00:18:18,560 --> 00:18:21,650
actually introduced the concept of

00:18:19,880 --> 00:18:23,150
envelope encryption into kubernetes core

00:18:21,650 --> 00:18:25,700
it's not the default but you can

00:18:23,150 --> 00:18:26,660
configure kubernetes like this yeah

00:18:25,700 --> 00:18:28,220
thought you weren't going to see yeah

00:18:26,660 --> 00:18:32,360
mall there was kubernetes in the title

00:18:28,220 --> 00:18:34,550
come on so this is an encryption

00:18:32,360 --> 00:18:37,280
configuration or an encryption provider

00:18:34,550 --> 00:18:39,380
configuration that defines how

00:18:37,280 --> 00:18:40,460
kubernetes should encrypt resources it's

00:18:39,380 --> 00:18:42,140
also worth noting that I'm only

00:18:40,460 --> 00:18:44,420
encrypting secrets but you can encrypt

00:18:42,140 --> 00:18:46,970
other things like config maps if you

00:18:44,420 --> 00:18:48,710
wanted to but I'm choosing to encrypt

00:18:46,970 --> 00:18:51,590
secrets and then I put my encryption

00:18:48,710 --> 00:18:52,790
keys in here so my key Wan key to those

00:18:51,590 --> 00:18:55,550
are the encryption keys that I want to

00:18:52,790 --> 00:18:57,410
use and then the the parent field

00:18:55,550 --> 00:18:57,820
they're like AES CBC and secret box

00:18:57,410 --> 00:18:59,020
those are

00:18:57,820 --> 00:19:01,540
algorithms that I want to use for

00:18:59,020 --> 00:19:03,340
encryption then when I start off my

00:19:01,540 --> 00:19:05,050
kubernetes api server I pass in this

00:19:03,340 --> 00:19:06,970
encryption provider config flag to that

00:19:05,050 --> 00:19:09,880
yellow file and moving forward

00:19:06,970 --> 00:19:12,490
kubernetes will do this so now there's a

00:19:09,880 --> 00:19:13,990
new actor in our model we're gonna put

00:19:12,490 --> 00:19:15,580
our data into the kubernetes api server

00:19:13,990 --> 00:19:17,140
the kubernetes api server is going to

00:19:15,580 --> 00:19:19,090
delegate to that encryption provider

00:19:17,140 --> 00:19:20,350
configuration file that encryption

00:19:19,090 --> 00:19:23,010
configuration is then going to encrypt

00:19:20,350 --> 00:19:25,990
the data and store it an sed encrypt it

00:19:23,010 --> 00:19:29,110
sounds pretty great so if an attacker

00:19:25,990 --> 00:19:30,790
again the red raccoon is on our NCD node

00:19:29,110 --> 00:19:32,980
say we have a publicly exposed at CD

00:19:30,790 --> 00:19:34,180
server or they they somehow gain access

00:19:32,980 --> 00:19:36,310
to our @ cg data file

00:19:34,180 --> 00:19:39,760
none of that data is available to them

00:19:36,310 --> 00:19:41,980
it's all encrypted well what if the red

00:19:39,760 --> 00:19:43,840
raccoon has access to the master VM or

00:19:41,980 --> 00:19:47,220
like a backup of the file system of the

00:19:43,840 --> 00:19:50,590
master via so a few disadvantages here

00:19:47,220 --> 00:19:52,240
so first you have to generate those keys

00:19:50,590 --> 00:19:54,460
yourself and that yellow file you have

00:19:52,240 --> 00:19:56,650
to run like the crazy open ssl command

00:19:54,460 --> 00:19:59,560
to generate a 32 bit random entropy key

00:19:56,650 --> 00:20:00,820
you have to be 64 encoded key management

00:19:59,560 --> 00:20:03,610
is your responsibility

00:20:00,820 --> 00:20:04,780
anytime you edit that file the

00:20:03,610 --> 00:20:06,160
kubernetes api server has to be

00:20:04,780 --> 00:20:07,630
restarted which could cause a little bit

00:20:06,160 --> 00:20:09,280
of downtime if you mess it up it won't

00:20:07,630 --> 00:20:12,190
come back online and then you have an

00:20:09,280 --> 00:20:13,320
Operations outage so rotation is a

00:20:12,190 --> 00:20:15,610
little bit tedious

00:20:13,320 --> 00:20:17,440
there's no HSM integration so if you

00:20:15,610 --> 00:20:19,210
work in a highly regulated industry like

00:20:17,440 --> 00:20:20,560
health care or finance or government

00:20:19,210 --> 00:20:23,170
where you have hardware security modules

00:20:20,560 --> 00:20:25,600
you can't connect yamo to an HSM I've

00:20:23,170 --> 00:20:27,910
tried it doesn't work but there's like a

00:20:25,600 --> 00:20:29,710
really big drawback here which is that

00:20:27,910 --> 00:20:32,020
the underlying encryption key is still

00:20:29,710 --> 00:20:33,490
stored in the same system that the data

00:20:32,020 --> 00:20:34,540
stored in if we went back to like the

00:20:33,490 --> 00:20:36,790
earlier slide where we talked about

00:20:34,540 --> 00:20:38,860
isolation this is why isolation is so

00:20:36,790 --> 00:20:40,870
important because all you've done here

00:20:38,860 --> 00:20:42,880
is you've given an attacker a really

00:20:40,870 --> 00:20:44,440
really good laugh they're like huh they

00:20:42,880 --> 00:20:45,370
tried so hard to encrypt it and then

00:20:44,440 --> 00:20:47,440
gave me the keys

00:20:45,370 --> 00:20:49,060
this is the equivalent of like locking

00:20:47,440 --> 00:20:51,850
your front door but then leaving the

00:20:49,060 --> 00:20:52,300
lock in the door right or like oh it's

00:20:51,850 --> 00:20:54,670
locked

00:20:52,300 --> 00:20:56,140
I could never possibly get inside even

00:20:54,670 --> 00:20:58,450
though the key is literally sitting

00:20:56,140 --> 00:20:59,860
inside the door so there's a huge

00:20:58,450 --> 00:21:01,360
drawback here which is that from a

00:20:59,860 --> 00:21:02,770
security modeling or a threat modeling

00:21:01,360 --> 00:21:04,870
perspective you haven't actually

00:21:02,770 --> 00:21:06,640
improved your security posture you might

00:21:04,870 --> 00:21:08,110
have checked a box right you might have

00:21:06,640 --> 00:21:10,180
checked some security and compliance box

00:21:08,110 --> 00:21:11,230
for your privacy organization but you

00:21:10,180 --> 00:21:14,799
haven't improved your ax

00:21:11,230 --> 00:21:16,480
security posture so kubernetes 1.10 came

00:21:14,799 --> 00:21:18,910
along and introduced this concept called

00:21:16,480 --> 00:21:20,440
a KMS encryption provider still part of

00:21:18,910 --> 00:21:23,049
that provider configuration introduced

00:21:20,440 --> 00:21:25,390
in 1.7 but this allows us to delegate to

00:21:23,049 --> 00:21:27,250
external plugins and these plugins can

00:21:25,390 --> 00:21:29,679
do anything as long as they satisfy an

00:21:27,250 --> 00:21:31,540
API contract so notice that there's no

00:21:29,679 --> 00:21:33,460
encryption key in here anywhere instead

00:21:31,540 --> 00:21:37,240
I'm delegating to like a UNIX socket or

00:21:33,460 --> 00:21:40,150
an API so what does this look like well

00:21:37,240 --> 00:21:42,309
we take our secret data we give it to

00:21:40,150 --> 00:21:43,900
the kubernetes api server the kubernetes

00:21:42,309 --> 00:21:45,760
api server then goes to the encryption

00:21:43,900 --> 00:21:47,919
configuration the encryption

00:21:45,760 --> 00:21:49,570
configuration though doesn't really know

00:21:47,919 --> 00:21:52,780
anything it's kind of like a dumb proxy

00:21:49,570 --> 00:21:54,580
it goes to the kms service and this

00:21:52,780 --> 00:21:56,200
could be like a cloud provided KMS or

00:21:54,580 --> 00:21:57,520
something like hashtag or vault or

00:21:56,200 --> 00:21:59,679
cyber-ark some type of key management

00:21:57,520 --> 00:22:01,210
service that you're operating you get

00:21:59,679 --> 00:22:03,760
back with ciphertext which gets stored a

00:22:01,210 --> 00:22:06,340
net CD and when you reverse the process

00:22:03,760 --> 00:22:08,650
it's the exact opposite the kubernetes

00:22:06,340 --> 00:22:10,210
api server requests the ciphertext the

00:22:08,650 --> 00:22:12,370
encryption config goes out to the KMS

00:22:10,210 --> 00:22:13,570
service to decrypt it to get the

00:22:12,370 --> 00:22:17,400
plaintext back and the plaintext goes

00:22:13,570 --> 00:22:19,750
back to the user so if a red raccoon

00:22:17,400 --> 00:22:22,360
happens to gain access to our master vm

00:22:19,750 --> 00:22:24,660
we have protected against like three of

00:22:22,360 --> 00:22:27,429
the four possible mitigations so a

00:22:24,660 --> 00:22:29,410
publicly exposed NCD server is protected

00:22:27,429 --> 00:22:31,299
because the data is exposed or the data

00:22:29,410 --> 00:22:33,520
is encrypted inside the sed server a

00:22:31,299 --> 00:22:35,020
backup of the filesystem is protected

00:22:33,520 --> 00:22:38,260
because the keys are not stored on the

00:22:35,020 --> 00:22:40,000
filesystem and a backup of the HDD data

00:22:38,260 --> 00:22:41,740
file is also not accessible because the

00:22:40,000 --> 00:22:43,990
data is encrypted but what if an

00:22:41,740 --> 00:22:46,270
attacker gets access to a live virtual

00:22:43,990 --> 00:22:47,740
machine that is currently running

00:22:46,270 --> 00:22:50,020
we haven't mitigated that and that's

00:22:47,740 --> 00:22:52,120
actually really hard to mitigate we can

00:22:50,020 --> 00:22:54,490
protect against offline attacks but our

00:22:52,120 --> 00:22:56,320
master VMs need the ability to talk to

00:22:54,490 --> 00:22:57,549
the key management server so this is

00:22:56,320 --> 00:23:00,220
where we jump into like the auditing

00:22:57,549 --> 00:23:01,750
side of things which is if all of a

00:23:00,220 --> 00:23:03,669
sudden we start seeing like 10,000

00:23:01,750 --> 00:23:04,990
requests to decrypt all of our secrets

00:23:03,669 --> 00:23:06,460
we should probably should throw some

00:23:04,990 --> 00:23:07,990
type of alert and say like hey there's

00:23:06,460 --> 00:23:09,850
probably someone who has unauthorized

00:23:07,990 --> 00:23:11,500
access to do this we can also introduce

00:23:09,850 --> 00:23:13,450
like rate limiting and quotas and

00:23:11,500 --> 00:23:15,850
potentially even use like AI or ml to

00:23:13,450 --> 00:23:18,250
detect what normal use looks like and

00:23:15,850 --> 00:23:20,740
flag any abnormal use so we can mitigate

00:23:18,250 --> 00:23:22,630
very easily mitigate three of the four

00:23:20,740 --> 00:23:24,700
attack vectors and then we can also

00:23:22,630 --> 00:23:25,309
mitigate access by creating like private

00:23:24,700 --> 00:23:26,749
kerbin IDs

00:23:25,309 --> 00:23:28,999
stores that don't have publicly exposed

00:23:26,749 --> 00:23:30,379
IP addresses make sure like we're you

00:23:28,999 --> 00:23:34,190
know not allowing anyone in the company

00:23:30,379 --> 00:23:38,299
to just SSH and randomly so you might be

00:23:34,190 --> 00:23:39,710
thinking yourself this sounds hard how

00:23:38,299 --> 00:23:41,990
am I gonna do this I don't want to build

00:23:39,710 --> 00:23:43,759
a plug-in you can write plugins in any

00:23:41,990 --> 00:23:45,679
language it's easiest and go because you

00:23:43,759 --> 00:23:47,600
can share the same structures but you

00:23:45,679 --> 00:23:49,700
can write them in any language every

00:23:47,600 --> 00:23:51,620
major cloud provider either has one that

00:23:49,700 --> 00:23:55,340
they have built or a community version

00:23:51,620 --> 00:23:57,080
of that so Google as your AWS and then

00:23:55,340 --> 00:24:00,919
Oracle has one that works with hash your

00:23:57,080 --> 00:24:02,269
court bolt like mandatory vendor pitch

00:24:00,919 --> 00:24:04,159
for a minute if you do this one gke

00:24:02,269 --> 00:24:05,450
there's like three flags and we do all

00:24:04,159 --> 00:24:09,259
of it for you you don't have to install

00:24:05,450 --> 00:24:10,850
anything there's one final thing i want

00:24:09,259 --> 00:24:14,419
to talk about which is like the initial

00:24:10,850 --> 00:24:16,580
secret problem how do you authenticate

00:24:14,419 --> 00:24:18,139
your master vm to talk to KMS well this

00:24:16,580 --> 00:24:19,690
is where you trust like identity and

00:24:18,139 --> 00:24:22,009
access management on your cloud provider

00:24:19,690 --> 00:24:23,779
so you delegate privilege and access

00:24:22,009 --> 00:24:25,460
management to your cloud providers I am

00:24:23,779 --> 00:24:27,559
system that gives you like that initial

00:24:25,460 --> 00:24:29,299
route of trust and then from there you

00:24:27,559 --> 00:24:32,600
can separate concerns right at CD nodes

00:24:29,299 --> 00:24:33,499
don't need permission to talk to kms so

00:24:32,600 --> 00:24:35,029
I'm going to show you like a really

00:24:33,499 --> 00:24:37,789
quick demo but I'm running short on time

00:24:35,029 --> 00:24:40,519
we started like 2 minutes late so can i

00:24:37,789 --> 00:24:47,029
I'm gonna have two more minutes they're

00:24:40,519 --> 00:24:49,100
not saying no so we're just ok cool over

00:24:47,029 --> 00:24:53,259
here so what I'm gonna do is I'm going

00:24:49,100 --> 00:24:57,730
to edit this manifest file kubernetes

00:24:53,259 --> 00:25:03,190
manifests and it's the coop API server

00:24:57,730 --> 00:25:06,950
cool got up got to go to startup mode

00:25:03,190 --> 00:25:12,679
alright and then I have to face IDE

00:25:06,950 --> 00:25:14,929
because security cool so in here in here

00:25:12,679 --> 00:25:18,679
I have the encryption provider

00:25:14,929 --> 00:25:19,759
configurations for both kms and local we

00:25:18,679 --> 00:25:21,259
already talked about local being

00:25:19,759 --> 00:25:24,710
terrible so we're not going to do that

00:25:21,259 --> 00:25:26,960
one I'm just gonna uncomment this and

00:25:24,710 --> 00:25:28,279
I'm gonna save this file kubernetes is

00:25:26,960 --> 00:25:29,059
really nice and that if you make a

00:25:28,279 --> 00:25:30,889
mistake

00:25:29,059 --> 00:25:34,039
in this file it automatically restarts

00:25:30,889 --> 00:25:35,809
the kubernetes api server for you so

00:25:34,039 --> 00:25:38,240
that like if you make a typo you in card

00:25:35,809 --> 00:25:39,980
downtime it's really great

00:25:38,240 --> 00:25:42,320
but I don't have to restart the coop API

00:25:39,980 --> 00:25:47,900
server in the meantime we will look at

00:25:42,320 --> 00:25:49,300
the actual config which I don't remember

00:25:47,900 --> 00:25:56,360
where I put it

00:25:49,300 --> 00:25:57,920
it's an PKI encryption campus so this is

00:25:56,360 --> 00:25:59,450
almost identical to what you saw on the

00:25:57,920 --> 00:26:02,770
slide it's a different UNIX socket path

00:25:59,450 --> 00:26:06,100
but other than that it's identical and

00:26:02,770 --> 00:26:12,670
hopefully this is restarted now if we do

00:26:06,100 --> 00:26:12,670
coop cuddle get Pio - all namespaces

00:26:13,810 --> 00:26:19,580
cool everything's happy so if we run

00:26:16,910 --> 00:26:21,830
coop cuddle delete secret what do we

00:26:19,580 --> 00:26:24,980
call it login or demo or something demo

00:26:21,830 --> 00:26:26,570
ok deleting the old secret that way we

00:26:24,980 --> 00:26:27,710
get rid of that plaintext and then I'm

00:26:26,570 --> 00:26:29,360
just gonna hit the up arrow a couple

00:26:27,710 --> 00:26:31,910
times just to prove to you that it is

00:26:29,360 --> 00:26:33,440
completely the same command I'm gonna

00:26:31,910 --> 00:26:35,450
run the same command notice as an

00:26:33,440 --> 00:26:37,040
operator or like a developer interacting

00:26:35,450 --> 00:26:38,120
with kubernetes is my experience and

00:26:37,040 --> 00:26:39,980
remains unchanged

00:26:38,120 --> 00:26:44,570
same exact command as proof by bash

00:26:39,980 --> 00:26:47,060
history I'm gonna run a TD cuddle get

00:26:44,570 --> 00:26:48,740
again same command so many Super Mario

00:26:47,060 --> 00:26:52,520
Kart item boxes there's at least one

00:26:48,740 --> 00:26:54,320
star in there but in reality there is

00:26:52,520 --> 00:26:55,610
some plaintext data in here for example

00:26:54,320 --> 00:26:57,080
like the name of the plug-in and the

00:26:55,610 --> 00:26:58,520
version of the key that we used we

00:26:57,080 --> 00:27:00,710
consider that to be metadata and not

00:26:58,520 --> 00:27:02,300
actually the secret data but the actual

00:27:00,710 --> 00:27:04,310
like login username and password are

00:27:02,300 --> 00:27:07,010
obviously encrypted as indicated by this

00:27:04,310 --> 00:27:10,040
Super Mario Kart item boxes also there's

00:27:07,010 --> 00:27:13,790
just like an N here that's like outlined

00:27:10,040 --> 00:27:15,200
it's pretty cool anyway so let me jump

00:27:13,790 --> 00:27:19,280
back to the slides really quick and then

00:27:15,200 --> 00:27:22,490
I promise I'll and so you can also do

00:27:19,280 --> 00:27:24,380
this with volt it's or like any on

00:27:22,490 --> 00:27:27,320
premise secrets management solution it's

00:27:24,380 --> 00:27:29,960
identical except you replace KMS with

00:27:27,320 --> 00:27:32,210
volts transit back in which i was also

00:27:29,960 --> 00:27:35,080
going to demo i have time they're not

00:27:32,210 --> 00:27:35,080
gonna kick me off the stage

00:27:38,130 --> 00:27:42,870
so I have this lovely script that

00:27:40,200 --> 00:27:45,600
creates a secret involved it's a little

00:27:42,870 --> 00:27:47,070
bit bigger I created a secret and then I

00:27:45,600 --> 00:27:50,580
have this script that accesses the

00:27:47,070 --> 00:27:52,620
secret envelope and you can see that

00:27:50,580 --> 00:27:55,080
it's basically the same it's obviously a

00:27:52,620 --> 00:27:56,100
different payload but in here you'll

00:27:55,080 --> 00:27:57,570
notice like there's a little bit more

00:27:56,100 --> 00:27:59,400
metadata vault needs a little bit more

00:27:57,570 --> 00:28:00,600
metadata to know what key and what

00:27:59,400 --> 00:28:02,580
version of the key as well as where the

00:28:00,600 --> 00:28:04,380
transit back-end is mounted but it's

00:28:02,580 --> 00:28:05,700
identical so you can run this on Prem or

00:28:04,380 --> 00:28:08,120
you can use a cloud provider manage

00:28:05,700 --> 00:28:08,120
canvas

00:28:08,659 --> 00:28:15,270
so in summary so you like that it's a

00:28:12,090 --> 00:28:17,039
sad face that moves to a happy face so

00:28:15,270 --> 00:28:19,169
in summary you should use at least two

00:28:17,039 --> 00:28:20,850
layers of encryption always rotate your

00:28:19,169 --> 00:28:22,830
keys and rotate your secrets regularly

00:28:20,850 --> 00:28:24,330
use envelope encryption it's an

00:28:22,830 --> 00:28:25,950
incredibly scalable way to actually do

00:28:24,330 --> 00:28:27,990
encryption and you should definitely

00:28:25,950 --> 00:28:29,400
protect kubernetes secrets using an

00:28:27,990 --> 00:28:31,049
external key management service provider

00:28:29,400 --> 00:28:32,580
or check with your cloud provider and

00:28:31,049 --> 00:28:35,070
see if they have options to enable this

00:28:32,580 --> 00:28:36,179
by default thanks that's my Twitter

00:28:35,070 --> 00:28:38,280
handle I don't think I have time for

00:28:36,179 --> 00:28:39,790
questions but I'll be around the rest of

00:28:38,280 --> 00:28:42,470
the day thanks

00:28:39,790 --> 00:28:51,049
[Applause]

00:28:42,470 --> 00:28:51,049
[Music]

00:28:52,220 --> 00:28:54,280

YouTube URL: https://www.youtube.com/watch?v=UkOzcRRE5TY


