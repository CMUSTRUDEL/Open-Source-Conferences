Title: devopsdaysNYC 2020 - Day 1 Christine Yen - Observability for Devs: How to Get From Here to There
Publication date: 2020-03-30
Playlist: DevOpsDays NYC 2020
Description: 
	There’s been a lot of talk about software ownership—but what does “owning code in production” really mean for developers, day to day? Many development teams still reach for logs in production as the most familiar way to bridge the development environment with production.

This talk will make the case that observability—and the skills to craft the right graphs and read them—benefits developers more than it does operators by examining several instances where well-informed devs can supercharge their development process:

Data-driven product decisions (or how to know more about what needs to be done than your PM)
Rewrites and migrations
Feature flags and “testing in production”
Fine-grained performance analysis
Then, we’ll lay out a series of steps to get your team from grepping unstructured text logs to outputting and analyzing well-structured traces. Instrumentation and observability aren’t all-or-nothing endeavors, and attendees should leave with an idea of “the next step” they can take to improve their ability to understand their production systems.
Captions: 
	00:00:14,690 --> 00:00:22,340
hello good morning in a way you can

00:00:19,009 --> 00:00:25,009
think of this talk as a zoomed in

00:00:22,340 --> 00:00:28,820
portion of a team that doesn't that is

00:00:25,009 --> 00:00:31,450
not production ready and talks about a

00:00:28,820 --> 00:00:35,300
very specific part of Yanis checklist

00:00:31,450 --> 00:00:36,980
but first some background first half of

00:00:35,300 --> 00:00:39,920
this talk will be about observability

00:00:36,980 --> 00:00:41,510
why it matters to developers the second

00:00:39,920 --> 00:00:43,789
half will be focused on observe

00:00:41,510 --> 00:00:45,559
abilities counterpart instrumentation

00:00:43,789 --> 00:00:50,449
how to think about capturing that data

00:00:45,559 --> 00:00:53,929
and how to get there but who am I and

00:00:50,449 --> 00:00:58,489
why am I on stage I'm Christine and I

00:00:53,929 --> 00:00:59,870
identify as a developer can I get a show

00:00:58,489 --> 00:01:01,659
this is Thomas this is the only

00:00:59,870 --> 00:01:04,070
interactive part of this at presentation

00:01:01,659 --> 00:01:06,020
can I get a show of hands who and the

00:01:04,070 --> 00:01:10,909
audience primarily identifies as a

00:01:06,020 --> 00:01:14,240
developer awesome ok this talk is for

00:01:10,909 --> 00:01:16,460
you I'll be speaking from your

00:01:14,240 --> 00:01:18,290
perspective for everyone else in the

00:01:16,460 --> 00:01:20,450
audience this talk is also for you

00:01:18,290 --> 00:01:24,500
because ultimately we're all working

00:01:20,450 --> 00:01:26,090
with developers right we're all this is

00:01:24,500 --> 00:01:29,000
all about getting excited about the

00:01:26,090 --> 00:01:30,440
possibilities of observability and and

00:01:29,000 --> 00:01:31,910
maybe if you're not a developer you can

00:01:30,440 --> 00:01:34,880
take this back and show the folks on

00:01:31,910 --> 00:01:36,770
your team the ones who aren't here to

00:01:34,880 --> 00:01:40,670
show them how observability can matter

00:01:36,770 --> 00:01:42,730
to them - ok so why is this talk

00:01:40,670 --> 00:01:45,580
important to me I'm gonna take you back

00:01:42,730 --> 00:01:49,010
many years ago when I was a bright-eyed

00:01:45,580 --> 00:01:51,020
bushy-tailed developer one of the things

00:01:49,010 --> 00:01:54,980
I was very proud of was that I was fast

00:01:51,020 --> 00:01:57,020
I could go from a spec to a test to

00:01:54,980 --> 00:02:01,370
commit I could do it over and over and

00:01:57,020 --> 00:02:02,750
over again and I was like awesome and

00:02:01,370 --> 00:02:04,670
surprisingly I made it through a few

00:02:02,750 --> 00:02:08,899
jobs before I interacted with my first

00:02:04,670 --> 00:02:11,709
real ops person and I met her because I

00:02:08,899 --> 00:02:14,239
was working on a component that was new

00:02:11,709 --> 00:02:16,430
and this nice little development cycle

00:02:14,239 --> 00:02:20,959
I'd gotten into started to look a little

00:02:16,430 --> 00:02:23,750
bit more like this and I learned some

00:02:20,959 --> 00:02:25,670
important lessons about why certain

00:02:23,750 --> 00:02:28,210
unflattering stereotypes around

00:02:25,670 --> 00:02:31,690
different roles exist

00:02:28,210 --> 00:02:36,500
because she would say things like this

00:02:31,690 --> 00:02:38,360
I'd be like whoa whoa fine on my machine

00:02:36,500 --> 00:02:42,470
I must see your your things maybe any of

00:02:38,360 --> 00:02:45,530
us that are misbehaving I so remember

00:02:42,470 --> 00:02:48,410
net incident early on when she came to

00:02:45,530 --> 00:02:50,330
me super frustrated yelling about CPU

00:02:48,410 --> 00:02:52,280
utilization on the Cassandra nodes and

00:02:50,330 --> 00:02:54,320
what did I do and I was like oh my god I

00:02:52,280 --> 00:02:55,730
don't know you can be looking through

00:02:54,320 --> 00:02:57,380
dashboards let me also frantically look

00:02:55,730 --> 00:02:59,360
through dashboards and look for graphs

00:02:57,380 --> 00:03:00,080
that do this I had no idea what I was

00:02:59,360 --> 00:03:02,180
looking for

00:03:00,080 --> 00:03:05,630
remember your utilization I don't know

00:03:02,180 --> 00:03:07,550
it's like we eventually got better at

00:03:05,630 --> 00:03:09,770
working together but the biggest

00:03:07,550 --> 00:03:13,340
improvement especially in that story

00:03:09,770 --> 00:03:17,360
came when we shifted how we talked about

00:03:13,340 --> 00:03:19,910
production instead of CPU utilization

00:03:17,360 --> 00:03:24,110
and nodes when we started to be able to

00:03:19,910 --> 00:03:26,360
talk about endpoints app IDs request

00:03:24,110 --> 00:03:28,640
latency these were things that started

00:03:26,360 --> 00:03:31,790
to make sense to me the developer I

00:03:28,640 --> 00:03:34,670
could apply to my tests I could look at

00:03:31,790 --> 00:03:36,920
it understand the code paths and start

00:03:34,670 --> 00:03:38,810
to become an active participant in the

00:03:36,920 --> 00:03:43,010
why is the house falling down Christine

00:03:38,810 --> 00:03:45,770
what did you do by starting to speak

00:03:43,010 --> 00:03:49,310
that same language by blurring that line

00:03:45,770 --> 00:03:51,560
between works on my machine and works

00:03:49,310 --> 00:03:54,140
out there in the wild we were eventually

00:03:51,560 --> 00:03:56,920
able to come together and set the see

00:03:54,140 --> 00:04:00,610
the system from both of our perspectives

00:03:56,920 --> 00:04:03,470
because if the first wave of DevOps is

00:04:00,610 --> 00:04:06,950
infra is cod and getting ops to automate

00:04:03,470 --> 00:04:09,080
their work then the second wave has to

00:04:06,950 --> 00:04:11,180
be teaching developers to own their code

00:04:09,080 --> 00:04:14,420
in production and really understand what

00:04:11,180 --> 00:04:19,010
happens when works on my machine meets

00:04:14,420 --> 00:04:20,840
the outside world in the end it's about

00:04:19,010 --> 00:04:23,900
recognizing that we're here to deliver

00:04:20,840 --> 00:04:26,060
an experience to the end user and that

00:04:23,900 --> 00:04:30,800
software ownership has to be shared by

00:04:26,060 --> 00:04:32,810
the whole spectrum from dev to us and

00:04:30,800 --> 00:04:36,229
I'm here to say that starts with

00:04:32,810 --> 00:04:38,490
observability and as a note I'm not

00:04:36,229 --> 00:04:41,580
using the three pillars definition

00:04:38,490 --> 00:04:43,110
to me observability is an ability it's

00:04:41,580 --> 00:04:45,690
it's what you can do it's about

00:04:43,110 --> 00:04:48,900
understanding your system by asking

00:04:45,690 --> 00:04:51,479
questions and that means not just

00:04:48,900 --> 00:04:53,970
adopting a tool or having types of data

00:04:51,479 --> 00:04:55,440
it's about using those tools to

00:04:53,970 --> 00:04:58,770
influence the people and the processes

00:04:55,440 --> 00:05:02,310
in your team and forming a nice little

00:04:58,770 --> 00:05:04,229
virtuous feedback cycle where the

00:05:02,310 --> 00:05:07,050
capabilities the tools enable your

00:05:04,229 --> 00:05:12,090
processes and good processes allow you

00:05:07,050 --> 00:05:13,650
to get the most out of your tools so why

00:05:12,090 --> 00:05:17,340
am i speaking from the perspective of a

00:05:13,650 --> 00:05:19,050
developer besides being one well this

00:05:17,340 --> 00:05:20,820
isn't just about sharing a

00:05:19,050 --> 00:05:21,990
responsibility right yes that's

00:05:20,820 --> 00:05:24,960
important we should transfer knowledge

00:05:21,990 --> 00:05:28,919
we should have these agreed-upon

00:05:24,960 --> 00:05:31,380
production readiness standards but I

00:05:28,919 --> 00:05:36,270
think that observability is actually

00:05:31,380 --> 00:05:37,680
more valuable to developers as part of

00:05:36,270 --> 00:05:40,319
the development process rather than

00:05:37,680 --> 00:05:43,259
outside of it by getting comfortable

00:05:40,319 --> 00:05:45,650
with prod it will make developers able

00:05:43,259 --> 00:05:49,530
to write better code in the first place

00:05:45,650 --> 00:05:52,919
think about it so if we look at modern

00:05:49,530 --> 00:05:54,690
software development process so many of

00:05:52,919 --> 00:05:56,969
the right instincts for catching

00:05:54,690 --> 00:06:00,180
problems in production are already in

00:05:56,969 --> 00:06:02,849
place it's already so full of curiosity

00:06:00,180 --> 00:06:06,030
look at how many times we test already

00:06:02,849 --> 00:06:08,610
right we're comparing the code that we

00:06:06,030 --> 00:06:12,840
think we wrote to how to actually behave

00:06:08,610 --> 00:06:17,449
and we do it multiple times as the code

00:06:12,840 --> 00:06:20,610
gets closer and closer to production

00:06:17,449 --> 00:06:23,370
even this last step over here this thing

00:06:20,610 --> 00:06:25,409
observed code in production usually ops

00:06:23,370 --> 00:06:27,539
work as a developer I just need to worry

00:06:25,409 --> 00:06:32,219
about when you know my exception tracker

00:06:27,539 --> 00:06:33,449
tells me something goes wrong but it's a

00:06:32,219 --> 00:06:36,750
whole lot like what we're doing

00:06:33,449 --> 00:06:38,729
pre-production right if you look at a

00:06:36,750 --> 00:06:41,009
pre-production tests writing good

00:06:38,729 --> 00:06:43,669
pre-production tests is all about

00:06:41,009 --> 00:06:45,750
thinking through these various scenarios

00:06:43,669 --> 00:06:49,589
describing how our code should behave

00:06:45,750 --> 00:06:51,870
and then when actual deviates from

00:06:49,589 --> 00:06:55,650
expected investigating

00:06:51,870 --> 00:06:58,680
why trying to understand why debugging

00:06:55,650 --> 00:07:01,920
it and bringing reality back in with

00:06:58,680 --> 00:07:04,620
expectations when you're looking at

00:07:01,920 --> 00:07:05,940
graphs in production expecting a certain

00:07:04,620 --> 00:07:12,180
pattern you're basically doing the same

00:07:05,940 --> 00:07:15,080
thing right what if instead of this

00:07:12,180 --> 00:07:19,080
pattern going over and over again and

00:07:15,080 --> 00:07:21,180
widening that rift we took the lessons

00:07:19,080 --> 00:07:22,950
that we learn from test-driven

00:07:21,180 --> 00:07:25,380
development where we have these short

00:07:22,950 --> 00:07:28,200
little feedback loops where we examine

00:07:25,380 --> 00:07:32,250
our expectations where we use that to

00:07:28,200 --> 00:07:33,900
write better code and extend that to

00:07:32,250 --> 00:07:35,760
looking at what things don't have what's

00:07:33,900 --> 00:07:37,890
happening in production by observing

00:07:35,760 --> 00:07:40,700
production and you think those lessons

00:07:37,890 --> 00:07:44,340
to improve our development process

00:07:40,700 --> 00:07:48,390
that's how we build that up sensibility

00:07:44,340 --> 00:07:53,730
that's how we start to develop that

00:07:48,390 --> 00:07:56,580
shared sense a software ownership so

00:07:53,730 --> 00:07:57,840
what does this actually look like we

00:07:56,580 --> 00:08:00,200
look at this process I'm going to tell

00:07:57,840 --> 00:08:03,360
three stories from three of our friends

00:08:00,200 --> 00:08:05,610
at different points in this process

00:08:03,360 --> 00:08:09,900
first when you're like oh man what do I

00:08:05,610 --> 00:08:13,680
even do what do I even begin second

00:08:09,900 --> 00:08:15,600
thing our second story will be okay I

00:08:13,680 --> 00:08:16,860
know what I want to do how do I do it

00:08:15,600 --> 00:08:19,050
what's the baseline what are the

00:08:16,860 --> 00:08:23,490
parameters what define is what good is

00:08:19,050 --> 00:08:25,140
and this last story will be about did

00:08:23,490 --> 00:08:27,600
the code that I wrote actually do what I

00:08:25,140 --> 00:08:31,340
think is it continuing to do what I

00:08:27,600 --> 00:08:34,140
think once it's out there in production

00:08:31,340 --> 00:08:39,350
so this first stories from our friend CJ

00:08:34,140 --> 00:08:42,360
at ease and they were in a state where

00:08:39,350 --> 00:08:46,770
their code could have been described as

00:08:42,360 --> 00:08:50,250
a haunted graveyard this is a quote from

00:08:46,770 --> 00:08:52,110
Liz our developer advocate there's

00:08:50,250 --> 00:08:54,000
described as haunted graveyard because

00:08:52,110 --> 00:08:56,340
it's a legacy monolith written by a team

00:08:54,000 --> 00:08:58,110
that had since left and no one really

00:08:56,340 --> 00:09:00,360
understood what was going on and they

00:08:58,110 --> 00:09:01,590
knew things were broken I was like

00:09:00,360 --> 00:09:03,420
you're walking around there's gremlins

00:09:01,590 --> 00:09:05,820
there and people were terrified of

00:09:03,420 --> 00:09:10,080
touching the code of making changes

00:09:05,820 --> 00:09:11,880
because no one really understood it they

00:09:10,080 --> 00:09:15,120
underwent an observability initiative

00:09:11,880 --> 00:09:17,820
did a bunch of imitation and were able

00:09:15,120 --> 00:09:21,090
to begin quantifying what a bad

00:09:17,820 --> 00:09:24,810
experience meant to their users they

00:09:21,090 --> 00:09:27,300
were able to describe what good was what

00:09:24,810 --> 00:09:29,850
bad was the users perspective and then

00:09:27,300 --> 00:09:34,290
use that to prioritize where their

00:09:29,850 --> 00:09:35,910
engineering teams network this

00:09:34,290 --> 00:09:37,980
spreadsheet this tweet is referring to

00:09:35,910 --> 00:09:41,220
was something that ranked all their

00:09:37,980 --> 00:09:43,470
endpoints by pane and allowed them to

00:09:41,220 --> 00:09:46,200
take the engineering resources they had

00:09:43,470 --> 00:09:49,230
and point it where would have the most

00:09:46,200 --> 00:09:51,420
impact and this is right this isn't

00:09:49,230 --> 00:09:54,000
operating on product manager intuition

00:09:51,420 --> 00:09:55,650
sorry to any PMS in the room this isn't

00:09:54,000 --> 00:10:00,120
operating on like volume of support

00:09:55,650 --> 00:10:03,090
tickets this is quantified pain based on

00:10:00,120 --> 00:10:06,000
what's happening in production right

00:10:03,090 --> 00:10:07,890
then right at that point in time that's

00:10:06,000 --> 00:10:10,800
really powerful right that's what lets

00:10:07,890 --> 00:10:13,140
us see what happens in the real world

00:10:10,800 --> 00:10:17,810
messy your production workload that we

00:10:13,140 --> 00:10:17,810
can't simulate in our test environments

00:10:18,170 --> 00:10:24,900
what about once we know what we want to

00:10:21,240 --> 00:10:29,070
do the story comes from our friend Matt

00:10:24,900 --> 00:10:31,560
at Geckoboard so the question I like to

00:10:29,070 --> 00:10:34,920
have in my mind for the step is how bad

00:10:31,560 --> 00:10:36,330
is it really let's say you're doing any

00:10:34,920 --> 00:10:38,430
sort of performance optimization work

00:10:36,330 --> 00:10:40,560
right you can't really know what you're

00:10:38,430 --> 00:10:43,170
doing is worthwhile until you know where

00:10:40,560 --> 00:10:45,600
that baseline is until you know what

00:10:43,170 --> 00:10:47,270
normal is right now and the conditions

00:10:45,600 --> 00:10:50,460
under which your software misbehaves and

00:10:47,270 --> 00:10:53,280
so he being a very data-driven graph

00:10:50,460 --> 00:10:57,000
oriented person wanted to visualize in

00:10:53,280 --> 00:10:59,360
this case uptime of its apps to figure

00:10:57,000 --> 00:11:05,850
out how often they were really crashing

00:10:59,360 --> 00:11:08,430
got this beautiful hashtag chart and was

00:11:05,850 --> 00:11:10,890
able to immediately see like how bad it

00:11:08,430 --> 00:11:14,180
really was and what what he was trying

00:11:10,890 --> 00:11:14,180
to mitigate going forward

00:11:14,510 --> 00:11:20,060
this last story about deciding whether

00:11:18,680 --> 00:11:23,389
to cut where the code works is

00:11:20,060 --> 00:11:24,709
especially interesting to me not only

00:11:23,389 --> 00:11:29,899
because the testing and production joke

00:11:24,709 --> 00:11:33,110
from earlier complex systems today have

00:11:29,899 --> 00:11:35,990
an almost infinitely long list of black

00:11:33,110 --> 00:11:37,850
swan' failure scenarios right something

00:11:35,990 --> 00:11:39,860
went something went wrong for this class

00:11:37,850 --> 00:11:42,079
of user plus there were gamma rays on

00:11:39,860 --> 00:11:43,339
Thursday and so there's a solar flare on

00:11:42,079 --> 00:11:45,199
Thursday and so this thing went wrong

00:11:43,339 --> 00:11:49,579
you can't predict it ahead of time you

00:11:45,199 --> 00:11:51,199
can't simulate and enumerate all

00:11:49,579 --> 00:11:53,720
potential test cases you might care

00:11:51,199 --> 00:11:55,639
about and so you've got to test in

00:11:53,720 --> 00:11:57,320
production you've got to be able to have

00:11:55,639 --> 00:12:00,470
code running a production experiment

00:11:57,320 --> 00:12:04,190
check hypotheses this story comes from

00:12:00,470 --> 00:12:07,100
our friend Pedro a car while he was

00:12:04,190 --> 00:12:10,070
investigating some use some like reports

00:12:07,100 --> 00:12:15,019
of user unhappiness tracked it down to

00:12:10,070 --> 00:12:17,029
the database came up with a theory he

00:12:15,019 --> 00:12:18,490
rolled out a small change to test his

00:12:17,029 --> 00:12:22,639
hypothesis something that improved

00:12:18,490 --> 00:12:25,670
database index times rolled it out saw a

00:12:22,639 --> 00:12:28,760
small impact spent some time slicing and

00:12:25,670 --> 00:12:31,220
dicing to make sure that a hypothesis

00:12:28,760 --> 00:12:33,170
that he'd come up with did actually have

00:12:31,220 --> 00:12:37,160
did actually impact that and it wasn't

00:12:33,170 --> 00:12:38,839
some other some other cause and

00:12:37,160 --> 00:12:41,600
eventually was able to roll out his fix

00:12:38,839 --> 00:12:46,220
and send this out and and improve the

00:12:41,600 --> 00:12:48,470
experience for customers and this this

00:12:46,220 --> 00:12:50,930
sort of fine-grained being able to try

00:12:48,470 --> 00:12:52,490
something feature Flags work really well

00:12:50,930 --> 00:12:53,870
with this if you have a tool that that's

00:12:52,490 --> 00:12:58,010
able to flex with your feature flags

00:12:53,870 --> 00:13:00,699
imagine having some almost there but not

00:12:58,010 --> 00:13:02,899
totally ready code behind a feature flag

00:13:00,699 --> 00:13:05,630
flagging like tiny percentage of your

00:13:02,899 --> 00:13:07,430
users and then you're you you're able to

00:13:05,630 --> 00:13:11,019
watch that tiny percentage of your users

00:13:07,430 --> 00:13:14,269
or that traffic how your code behaves

00:13:11,019 --> 00:13:16,040
comparing top-line metrics for that tiny

00:13:14,269 --> 00:13:18,589
set of flagged end users against the

00:13:16,040 --> 00:13:22,069
rest and flipping it on entirely when

00:13:18,589 --> 00:13:24,170
you're ready this this this question of

00:13:22,069 --> 00:13:26,439
did the code that I pushed out there

00:13:24,170 --> 00:13:28,700
that worked in all the other test cases

00:13:26,439 --> 00:13:31,010
does it actually work in

00:13:28,700 --> 00:13:33,470
could be super powerful super fast and

00:13:31,010 --> 00:13:41,060
give you that confidence that you need

00:13:33,470 --> 00:13:42,470
to be able to release more reliably this

00:13:41,060 --> 00:13:44,000
is hard right these are new muscles

00:13:42,470 --> 00:13:46,490
especially for developers who are

00:13:44,000 --> 00:13:48,620
accustomed to thinking about just the

00:13:46,490 --> 00:13:51,529
development environment production isn't

00:13:48,620 --> 00:13:53,930
an environment we're used to sometimes

00:13:51,529 --> 00:13:57,860
trying to interpret graphs can feel like

00:13:53,930 --> 00:14:01,220
learning a whole new language I promise

00:13:57,860 --> 00:14:03,950
it's not impossible there's one thing

00:14:01,220 --> 00:14:05,690
you take away from this talk shame on me

00:14:03,950 --> 00:14:07,460
for not having this at the end just one

00:14:05,690 --> 00:14:08,000
thing you don't have to do everything at

00:14:07,460 --> 00:14:10,460
once

00:14:08,000 --> 00:14:12,140
a lot of people would be like oh

00:14:10,460 --> 00:14:14,810
instrumentation seems like a lot of work

00:14:12,140 --> 00:14:17,000
I have to do all of this how do I get to

00:14:14,810 --> 00:14:19,550
that beautiful graph that Christina

00:14:17,000 --> 00:14:22,850
showed on stage too much trouble not

00:14:19,550 --> 00:14:24,770
gonna bother no there's always a little

00:14:22,850 --> 00:14:26,960
there's always a small improvement you

00:14:24,770 --> 00:14:29,690
can make somewhere that'll make your

00:14:26,960 --> 00:14:31,880
life better that will justify continued

00:14:29,690 --> 00:14:34,790
investment in instrumentation in

00:14:31,880 --> 00:14:38,900
observability I'll show you some

00:14:34,790 --> 00:14:40,370
examples the thing to keep in mind when

00:14:38,900 --> 00:14:42,710
you're when you're instrumenting a

00:14:40,370 --> 00:14:46,130
service or system that already exists

00:14:42,710 --> 00:14:49,610
look for the intersection of will get a

00:14:46,130 --> 00:14:52,550
broad view of what's happening and it's

00:14:49,610 --> 00:14:53,930
easy to get started with and this is

00:14:52,550 --> 00:14:56,180
where personas come into play

00:14:53,930 --> 00:14:57,500
right if you're a developer for me I'm

00:14:56,180 --> 00:14:59,360
much more likely to go instrument

00:14:57,500 --> 00:15:02,510
something in the code itself than to

00:14:59,360 --> 00:15:05,860
mess with my TLB logs for an ops person

00:15:02,510 --> 00:15:09,140
might be the opposite so take the next

00:15:05,860 --> 00:15:11,000
chunk of information based on they are

00:15:09,140 --> 00:15:16,490
thinking through what's easy and

00:15:11,000 --> 00:15:17,750
reasonable for me to access this is

00:15:16,490 --> 00:15:20,660
really just an excuse to quit this photo

00:15:17,750 --> 00:15:23,000
I love this photo how do we go about

00:15:20,660 --> 00:15:28,910
making production feel more familiar to

00:15:23,000 --> 00:15:30,110
our debts one step at a time I always

00:15:28,910 --> 00:15:33,320
like to talk about starting from the

00:15:30,110 --> 00:15:35,500
edge this is the edge of your system the

00:15:33,320 --> 00:15:37,760
edge between you and your external users

00:15:35,500 --> 00:15:39,740
identify some unit of work that's

00:15:37,760 --> 00:15:41,070
happening at some bottleneck that will

00:15:39,740 --> 00:15:43,110
give you an

00:15:41,070 --> 00:15:44,940
for all of you of your system again as

00:15:43,110 --> 00:15:47,670
not super sentai described like maybe

00:15:44,940 --> 00:15:48,960
these are your lb logs dump them in they

00:15:47,670 --> 00:15:50,490
just give you a sense of like what's

00:15:48,960 --> 00:15:52,590
happening this is your map of that

00:15:50,490 --> 00:15:55,170
haunted graveyard if you're a developer

00:15:52,590 --> 00:15:56,850
maybe this is your HTTP handler of a web

00:15:55,170 --> 00:15:58,950
app this is the thing that everything

00:15:56,850 --> 00:16:01,200
goes through maybe the data is kind of

00:15:58,950 --> 00:16:04,020
generic at first but if it's lightweight

00:16:01,200 --> 00:16:06,620
and it's broad awesome this is a great

00:16:04,020 --> 00:16:06,620
place to start

00:16:06,650 --> 00:16:15,960
the next thing go deep but go deep in a

00:16:12,150 --> 00:16:18,420
narrow section equivalent here for web

00:16:15,960 --> 00:16:20,460
app is instrument one endpoint right but

00:16:18,420 --> 00:16:22,200
focus on the pain find something that

00:16:20,460 --> 00:16:24,720
will actually make a difference to your

00:16:22,200 --> 00:16:26,220
team don't try to go instrumental all

00:16:24,720 --> 00:16:28,710
you endpoints at once don't try to go

00:16:26,220 --> 00:16:30,300
you know again boiling the ocean you're

00:16:28,710 --> 00:16:32,970
looking for that one endpoint that like

00:16:30,300 --> 00:16:36,290
something always goes wrong in or like

00:16:32,970 --> 00:16:38,850
super complicated and a pain to debug

00:16:36,290 --> 00:16:41,070
this is the one that will get you the

00:16:38,850 --> 00:16:43,110
most bang for your buck for doing a

00:16:41,070 --> 00:16:44,970
little bit of instrumentation around and

00:16:43,110 --> 00:16:48,330
will will enable you to justify

00:16:44,970 --> 00:16:49,800
continued investment in okay now let's

00:16:48,330 --> 00:16:51,690
get that second most painful endpoint

00:16:49,800 --> 00:16:57,630
now let's get that now let's get that

00:16:51,690 --> 00:17:01,110
third most painful endpoint instrument

00:16:57,630 --> 00:17:02,490
from where you can control so I'm going

00:17:01,110 --> 00:17:05,030
to walk you through an example again

00:17:02,490 --> 00:17:07,980
we're using the standard web app example

00:17:05,030 --> 00:17:10,140
by instrumenting our application we can

00:17:07,980 --> 00:17:12,480
pretty straightforwardly capture the

00:17:10,140 --> 00:17:15,329
arguments that are passed it on any

00:17:12,480 --> 00:17:17,760
given HTTP request some metadata about

00:17:15,329 --> 00:17:25,410
the how the app was running and what was

00:17:17,760 --> 00:17:27,630
returned what about this database about

00:17:25,410 --> 00:17:29,760
this database it's black box that the

00:17:27,630 --> 00:17:31,350
app depends on this can be your my

00:17:29,760 --> 00:17:33,330
sequel instance this can be some

00:17:31,350 --> 00:17:35,930
third-party service every once in a

00:17:33,330 --> 00:17:38,040
while feel like AHA telling me to go

00:17:35,930 --> 00:17:39,960
instrument my my sequel database I don't

00:17:38,040 --> 00:17:43,560
want to do that that seems painful great

00:17:39,960 --> 00:17:45,960
don't do it because from the perspective

00:17:43,560 --> 00:17:48,000
of your app from the place wherever

00:17:45,960 --> 00:17:51,450
you're comfortable you already know a

00:17:48,000 --> 00:17:54,060
little bit about how your app is talking

00:17:51,450 --> 00:17:54,809
to this black box what the black box is

00:17:54,060 --> 00:17:57,480
saying a return

00:17:54,809 --> 00:18:00,480
and by capturing these signals you're

00:17:57,480 --> 00:18:02,879
then able to already get a pretty solid

00:18:00,480 --> 00:18:07,080
model of what that black box is doing

00:18:02,879 --> 00:18:09,179
relative to your app and how your

00:18:07,080 --> 00:18:14,730
application impacts how the assistant

00:18:09,179 --> 00:18:16,980
overall behaves this last piece is

00:18:14,730 --> 00:18:20,570
capture what actually matters to you

00:18:16,980 --> 00:18:23,490
there are lots and lots of ways to get

00:18:20,570 --> 00:18:25,440
kind of baseline metadata out of the box

00:18:23,490 --> 00:18:26,970
right lots of APM tools would be like

00:18:25,440 --> 00:18:31,259
here we've got everything for you

00:18:26,970 --> 00:18:34,080
cool now add the stuff that matters to

00:18:31,259 --> 00:18:37,919
you your business whatever is unique to

00:18:34,080 --> 00:18:43,499
you that will help you when things go

00:18:37,919 --> 00:18:44,610
sideways so we're looking at the

00:18:43,499 --> 00:18:46,799
spectrum of all the stuff that we can't

00:18:44,610 --> 00:18:48,690
capture right in front this is what

00:18:46,799 --> 00:18:53,279
tends to come standard hostname machine

00:18:48,690 --> 00:18:55,139
type awesome baseline now this is where

00:18:53,279 --> 00:18:56,909
it starts to get interesting right what

00:18:55,139 --> 00:18:59,940
code is actually what version of code is

00:18:56,909 --> 00:19:01,529
actually getting hit what future flags

00:18:59,940 --> 00:19:04,110
are turned on these are the things that

00:19:01,529 --> 00:19:06,210
are going to start to let you sift out

00:19:04,110 --> 00:19:07,799
signal from noise oh do I need to care

00:19:06,210 --> 00:19:09,570
not these these alert are all running on

00:19:07,799 --> 00:19:11,549
an old version of the code is all

00:19:09,570 --> 00:19:16,230
getting phased out tomorrow maybe just

00:19:11,549 --> 00:19:17,570
matter I don't know next layer one of

00:19:16,230 --> 00:19:22,200
the things that matter to your business

00:19:17,570 --> 00:19:24,179
right if your Zappos probably care a lot

00:19:22,200 --> 00:19:28,470
more about customer ID shopping cart ID

00:19:24,179 --> 00:19:30,119
SKU all of those things a whole lot more

00:19:28,470 --> 00:19:36,179
than what machine the code is running on

00:19:30,119 --> 00:19:38,669
or what version the code is running and

00:19:36,179 --> 00:19:40,590
then the layer on top of that is for

00:19:38,669 --> 00:19:43,799
that customer and that shopping cart ID

00:19:40,590 --> 00:19:45,509
and on that version of the build on that

00:19:43,799 --> 00:19:48,929
machine what's special about this

00:19:45,509 --> 00:19:50,429
execution of it all of these things are

00:19:48,929 --> 00:19:54,629
going to be bits that are going to be

00:19:50,429 --> 00:19:56,820
helpful for you to really understand why

00:19:54,629 --> 00:19:58,440
my code is misbehaving today when it was

00:19:56,820 --> 00:20:01,799
running fine yesterday it didn't seem

00:19:58,440 --> 00:20:02,759
like I made any changes this is the

00:20:01,799 --> 00:20:05,460
stuff that's going to help you

00:20:02,759 --> 00:20:07,409
differentiate between oh well everything

00:20:05,460 --> 00:20:08,420
is going wrong versus there's one

00:20:07,409 --> 00:20:10,950
customer

00:20:08,420 --> 00:20:12,690
it's doing something crazy that didn't

00:20:10,950 --> 00:20:18,360
expect we can blacklist some and it'll

00:20:12,690 --> 00:20:20,190
be fine if you're waiting for this to be

00:20:18,360 --> 00:20:23,810
unobscured to take a photo of it

00:20:20,190 --> 00:20:23,810
I'll pods you can take a photo of this

00:20:24,020 --> 00:20:29,700
cyfle via online also later a few useful

00:20:27,810 --> 00:20:32,970
tactics to keep in mind as you're going

00:20:29,700 --> 00:20:36,330
through those steps instrument with a

00:20:32,970 --> 00:20:38,390
plan to visualize unstructured text logs

00:20:36,330 --> 00:20:40,940
are great we all start there

00:20:38,390 --> 00:20:43,740
those are intended for humans to read

00:20:40,940 --> 00:20:44,760
we're not in a world anymore where logs

00:20:43,740 --> 00:20:46,800
are human scale

00:20:44,760 --> 00:20:50,640
logs are not machines scale make those

00:20:46,800 --> 00:20:52,650
logs machine readable and plan to look

00:20:50,640 --> 00:20:54,750
at them from a high-level view right

00:20:52,650 --> 00:20:56,070
when you're you're handling tens

00:20:54,750 --> 00:20:57,990
hundreds thousands of requests per

00:20:56,070 --> 00:20:59,040
second you're not gonna be sifting

00:20:57,990 --> 00:21:00,270
through individual log lines anymore

00:20:59,040 --> 00:21:01,640
you're gonna be looking for trends

00:21:00,270 --> 00:21:03,710
you're gonna be looking for patterns

00:21:01,640 --> 00:21:05,730
make it easy on yourself

00:21:03,710 --> 00:21:08,070
don't make your don't make your

00:21:05,730 --> 00:21:11,450
whoever's reading those logs parse out

00:21:08,070 --> 00:21:14,880
numbers based on regular expressions

00:21:11,450 --> 00:21:17,250
sorry this is neither here nor there or

00:21:14,880 --> 00:21:21,360
a little deeper than I met to go name

00:21:17,250 --> 00:21:23,190
consistently seems really obvious we all

00:21:21,360 --> 00:21:25,290
have stories where the same concept is

00:21:23,190 --> 00:21:28,500
represented three different times snake

00:21:25,290 --> 00:21:30,990
case camel case something else crazy

00:21:28,500 --> 00:21:32,340
that someone came up with name

00:21:30,990 --> 00:21:36,120
consistently said that future you

00:21:32,340 --> 00:21:37,470
doesn't hate past you quite so much so

00:21:36,120 --> 00:21:41,940
you can make your data as predictable as

00:21:37,470 --> 00:21:45,480
possible and finally feel free to

00:21:41,940 --> 00:21:47,040
experiment please play around at

00:21:45,480 --> 00:21:48,870
temporary fields when you're running an

00:21:47,040 --> 00:21:51,420
experiment or investigating something

00:21:48,870 --> 00:21:53,910
new get rid of those fields after you're

00:21:51,420 --> 00:21:55,590
done if you want to if you don't have to

00:21:53,910 --> 00:21:59,250
keep them around maybe they'll be useful

00:21:55,590 --> 00:22:00,600
next week next month next year but feel

00:21:59,250 --> 00:22:04,110
free like don't don't be locked in right

00:22:00,600 --> 00:22:07,650
the the the easier it can be for your

00:22:04,110 --> 00:22:10,080
developers to be like ah I wonder what

00:22:07,650 --> 00:22:12,120
will happen let me add a feel to capture

00:22:10,080 --> 00:22:15,870
it the more you'll be incentivizing them

00:22:12,120 --> 00:22:17,310
to go and and see and and to see how

00:22:15,870 --> 00:22:18,450
their experiment ran it look at

00:22:17,310 --> 00:22:21,119
production

00:22:18,450 --> 00:22:22,549
and then either you make that the more

00:22:21,119 --> 00:22:24,779
you're building up this muscle of

00:22:22,549 --> 00:22:26,999
reaching and looking at production as

00:22:24,779 --> 00:22:31,350
they're writing their code as we're

00:22:26,999 --> 00:22:35,059
writing our code and a few kind of

00:22:31,350 --> 00:22:37,169
zoomed out top-level principles again

00:22:35,059 --> 00:22:39,379
production tools should state my

00:22:37,169 --> 00:22:44,190
language

00:22:39,379 --> 00:22:45,929
these are tool these are nouns that all

00:22:44,190 --> 00:22:48,779
these tools seem to assume I care about

00:22:45,929 --> 00:22:50,789
as a developer I care about these nouns

00:22:48,779 --> 00:22:53,100
I care about the things that are going

00:22:50,789 --> 00:22:55,980
to help me map it to my code map it to

00:22:53,100 --> 00:22:59,039
my tests so that when someone comes

00:22:55,980 --> 00:23:02,519
running to me they can talk about this

00:22:59,039 --> 00:23:04,859
end point is slow since this build which

00:23:02,519 --> 00:23:06,149
contains my change and it's impacting

00:23:04,859 --> 00:23:08,850
this customer great

00:23:06,149 --> 00:23:09,960
I can go repro and fix that you're not

00:23:08,850 --> 00:23:12,389
going to get that if you come yelling at

00:23:09,960 --> 00:23:17,519
me about CPU utilization and Cassandra

00:23:12,389 --> 00:23:19,139
hosts I throw this example up there I

00:23:17,519 --> 00:23:20,759
love people talking about distributed

00:23:19,139 --> 00:23:22,649
tracing your strip your tracing is great

00:23:20,759 --> 00:23:24,950
they're all like Oh micro-services and

00:23:22,649 --> 00:23:26,909
distributed tracing it's super cool

00:23:24,950 --> 00:23:28,980
developers in your room are sending

00:23:26,909 --> 00:23:30,570
they're being like oh this looks a lot

00:23:28,980 --> 00:23:33,600
like what Chrome developer tools have

00:23:30,570 --> 00:23:35,609
been able to do for years it's true

00:23:33,600 --> 00:23:38,279
right it's great like I don't mean to

00:23:35,609 --> 00:23:40,950
crap on anyone I'm just saying like when

00:23:38,279 --> 00:23:41,970
you make these patterns feel like

00:23:40,950 --> 00:23:43,499
something that developers are

00:23:41,970 --> 00:23:44,970
comfortable with they're gonna be a

00:23:43,499 --> 00:23:47,549
whole lot more excited about interacting

00:23:44,970 --> 00:23:49,320
with it it's just that much smaller of a

00:23:47,549 --> 00:23:51,749
cognitive leap for them to be like oh oh

00:23:49,320 --> 00:23:54,809
yeah I can see how this maps to my code

00:23:51,749 --> 00:23:57,179
I can understand how this thing in my

00:23:54,809 --> 00:24:03,359
IDE maps to this thing in production

00:23:57,179 --> 00:24:07,950
cool and remember and change is

00:24:03,359 --> 00:24:11,129
incremental iterative don't try to do

00:24:07,950 --> 00:24:15,059
everything at once to hammer that point

00:24:11,129 --> 00:24:16,739
in I've got an example showing what it

00:24:15,059 --> 00:24:18,419
could look like to go from unstructured

00:24:16,739 --> 00:24:22,379
text logs to something that can really

00:24:18,419 --> 00:24:24,960
support this you know very flexible very

00:24:22,379 --> 00:24:30,119
high-level observability these

00:24:24,960 --> 00:24:32,540
observability graphs I've shown here a

00:24:30,119 --> 00:24:35,210
bunch of text logs I apologize there

00:24:32,540 --> 00:24:36,320
probably not easy to read look at my

00:24:35,210 --> 00:24:37,669
slides later you can get the gruesome

00:24:36,320 --> 00:24:41,480
detail I'll highlight what's actually

00:24:37,669 --> 00:24:45,500
important here's one here's one log line

00:24:41,480 --> 00:24:48,470
tasks timed out after 6.1 seconds the

00:24:45,500 --> 00:24:50,900
items in blue are me starting to extract

00:24:48,470 --> 00:24:53,330
out these business identifiers that I

00:24:50,900 --> 00:24:55,610
care about these things that will start

00:24:53,330 --> 00:24:57,470
to let me categorize and pattern and

00:24:55,610 --> 00:25:00,440
sift and and do that slicing and dicing

00:24:57,470 --> 00:25:01,880
people talk about all the time it's our

00:25:00,440 --> 00:25:03,799
first step towards that common set of

00:25:01,880 --> 00:25:05,870
nouns and it's in a way that's not

00:25:03,799 --> 00:25:08,570
destructive right if anyone is relying

00:25:05,870 --> 00:25:10,010
on the unstructured text they can keep

00:25:08,570 --> 00:25:12,140
grepping they keep doing their thing

00:25:10,010 --> 00:25:15,049
I've just got I'm just starting to add

00:25:12,140 --> 00:25:16,549
these pieces that are you gonna be

00:25:15,049 --> 00:25:25,400
useful for me that are going to be

00:25:16,549 --> 00:25:26,690
useful for analysis then I can start to

00:25:25,400 --> 00:25:29,870
introduce some structure into the logs

00:25:26,690 --> 00:25:32,419
moving us away from just unstructured

00:25:29,870 --> 00:25:35,390
text into something that is more easily

00:25:32,419 --> 00:25:36,950
machine readable and again you can you

00:25:35,390 --> 00:25:39,190
can do this in a non-destructive way

00:25:36,950 --> 00:25:42,320
right if people are used to grabbing for

00:25:39,190 --> 00:25:44,240
tasks timed out you can include it in a

00:25:42,320 --> 00:25:46,610
field in a way that allows them to

00:25:44,240 --> 00:25:48,320
continue grabbing for it but that lets

00:25:46,610 --> 00:25:49,850
you start to introduce some structure

00:25:48,320 --> 00:25:52,610
and should be able to take advantage of

00:25:49,850 --> 00:26:01,250
some more advanced data structures and

00:25:52,610 --> 00:26:03,100
data stores and finally build up context

00:26:01,250 --> 00:26:06,290
instead of outputting disjoint log lines

00:26:03,100 --> 00:26:09,169
right I got a lot of questions from

00:26:06,290 --> 00:26:10,610
folks who are like okay but how do I do

00:26:09,169 --> 00:26:12,470
that thing where I correlate between

00:26:10,610 --> 00:26:16,100
multiple log lines that are emitted at

00:26:12,470 --> 00:26:18,169
different points in time if you're a

00:26:16,100 --> 00:26:21,200
data scientist the answer there might be

00:26:18,169 --> 00:26:25,340
some super cool mapreduces and self

00:26:21,200 --> 00:26:28,910
joins as a developer the easiest answer

00:26:25,340 --> 00:26:30,620
is going to be maybe don't see what you

00:26:28,910 --> 00:26:32,210
can do to not omit them in different

00:26:30,620 --> 00:26:35,390
places and then have to tie them back

00:26:32,210 --> 00:26:38,559
together see what you can do to instead

00:26:35,390 --> 00:26:41,290
lump it together and omit it all at

00:26:38,559 --> 00:26:43,610
success or a failure or at timeout

00:26:41,290 --> 00:26:46,110
because this is what will give you that

00:26:43,610 --> 00:26:47,730
complete picture this is where

00:26:46,110 --> 00:26:49,409
this is this is an example of you as the

00:26:47,730 --> 00:26:52,529
developer making life easier for

00:26:49,409 --> 00:26:58,860
yourself in the future when you need to

00:26:52,529 --> 00:26:59,909
use this data to debug something yes you

00:26:58,860 --> 00:27:01,529
might have to pass a little more data

00:26:59,909 --> 00:27:04,169
around every structure every language

00:27:01,529 --> 00:27:07,200
every framework has it has support for

00:27:04,169 --> 00:27:10,169
this in a way getting my timer all right

00:27:07,200 --> 00:27:11,399
at the end of this remember we're all

00:27:10,169 --> 00:27:17,549
doing this because we're trying to move

00:27:11,399 --> 00:27:20,519
from this to this cheap shots cute

00:27:17,549 --> 00:27:21,779
animal votes the things that we deal

00:27:20,519 --> 00:27:23,730
with day to day may be different

00:27:21,779 --> 00:27:26,190
depending on which end of the spectrum

00:27:23,730 --> 00:27:28,049
we fall on but at the end the gulf

00:27:26,190 --> 00:27:31,950
between dev and ops is shrinking as

00:27:28,049 --> 00:27:34,470
evidenced by events like this and so for

00:27:31,950 --> 00:27:38,519
devs instrumentation is something we can

00:27:34,470 --> 00:27:40,710
ease into both by area and impact but we

00:27:38,519 --> 00:27:43,320
should own it because we have the most

00:27:40,710 --> 00:27:44,880
to gain we have there's this a huge

00:27:43,320 --> 00:27:47,149
untapped potential for how much more

00:27:44,880 --> 00:27:50,159
awesome it can make us writing our code

00:27:47,149 --> 00:27:51,510
when we were granted in production and

00:27:50,159 --> 00:27:53,940
by capturing stuff when it's lightweight

00:27:51,510 --> 00:27:57,720
we can just make better choices and

00:27:53,940 --> 00:27:59,850
deliver better experiences by learning

00:27:57,720 --> 00:28:03,000
to ask questions in production and ship

00:27:59,850 --> 00:28:04,320
more confidently for those of you in the

00:28:03,000 --> 00:28:05,610
room that feel like they were excluded

00:28:04,320 --> 00:28:08,970
because you're not a developer don't I

00:28:05,610 --> 00:28:12,149
hope because remember most of the tools

00:28:08,970 --> 00:28:15,179
can be can be taught to speak dev they

00:28:12,149 --> 00:28:16,470
can they can be taught a vocabulary and

00:28:15,179 --> 00:28:20,820
we have a shared goal of enabling

00:28:16,470 --> 00:28:22,679
developers to own code and production by

00:28:20,820 --> 00:28:24,720
making and by making observability

00:28:22,679 --> 00:28:27,210
accessible flexible and use the data

00:28:24,720 --> 00:28:31,289
that we want we can incentivize everyone

00:28:27,210 --> 00:28:32,909
on the team to jump in thank you if you

00:28:31,289 --> 00:28:35,370
want to know more I'll be around we have

00:28:32,909 --> 00:28:35,760
a booth please come and say hi thank you

00:28:35,370 --> 00:28:38,610
so much

00:28:35,760 --> 00:28:51,900
[Applause]

00:28:38,610 --> 00:28:51,900

YouTube URL: https://www.youtube.com/watch?v=FvVzYopbgog


