Title: DevOpsDays Chicago 2019 - Martez Reed - Ignite: Using Terraform Safely
Publication date: 2019-09-09
Playlist: DevOpsDays Chicago 2019
Description: 
	Martez Reed - Ignite: Using Terraform Safely

Terraform is a widely popular Infrastructure as Code (IaC) tool that allows infrastructure resources to be provisioned in minutes using code. That popularity poses a risk for those new to Terraform. This talk walks through some common security risks when using Terraform.

The goal of the presentation is to look at the risks of using Terraform in an unsafe manner and how to use it in a secure manner. The talk will walk through some of the following areas.

The dangers of consuming public modules
Sensitive data in Terraform
Securely storing Terraform state files
At the conclusion of the session attendees should walk away with a better understanding of how to use Terraform in a safe manner.
Captions: 
	00:00:14,279 --> 00:00:24,890
Martez Reed -- Using Terraform safely >>Martez Reed: Good morning, I'm Martez Reed,

00:00:24,890 --> 00:00:34,300
I -- (speaker far from mic) -- you can find me on LinkedIn, Twitter, GitHub.

00:00:34,300 --> 00:00:40,210
I did this talk in Indianapolis not too long ago, and I have not checked my GitHub to make

00:00:40,210 --> 00:00:46,539
sure that terraform is used safely.

00:00:46,539 --> 00:00:52,379
It is infrastructure as code, and declaring infrastructure through code, or the resources

00:00:52,379 --> 00:00:53,379
themselves.

00:00:53,379 --> 00:00:58,769
There's a number of popular tools out there, some are specific to a public cloud, some

00:00:58,769 --> 00:01:07,920
are not, it is written in Go lang with the hcl language, and the resources are pretty

00:01:07,920 --> 00:01:11,960
declarative as you can see on the screen in terms of what they do.

00:01:11,960 --> 00:01:17,610
So I wanted to make sure that you level set, the terraform modules themselves, it is a

00:01:17,610 --> 00:01:25,530
collection of libraries and resources that are grouped together, you use it to provide

00:01:25,530 --> 00:01:28,110
a higher level of abstraction.

00:01:28,110 --> 00:01:43,039
In terms of terraform modules, there are 4,300 modules on GitHub, this sets the context as

00:01:43,039 --> 00:01:48,610
it relates to terraform modules.

00:01:48,610 --> 00:01:55,390
People pull them down to provide the speed, the challenge is that it conflicts with security,

00:01:55,390 --> 00:01:58,850
as we will see that this is something that is created by the public.

00:01:58,850 --> 00:02:04,079
This is an example of a vault module that is available on the terraform registry, not

00:02:04,079 --> 00:02:10,229
to disparage the module itself, but it is in such a manner that is easy to consume but

00:02:10,229 --> 00:02:16,260
has issues of the security with it in terms of allowing access to SSH and other things

00:02:16,260 --> 00:02:19,989
via public -- to the world readable.

00:02:19,989 --> 00:02:26,370
And then you can imagine this, when you start to integrate with Jenkins or Elk or Memcache,

00:02:26,370 --> 00:02:30,950
pulling down the modular objects for regular consumption can create issues.

00:02:30,950 --> 00:02:38,200
So I propose a vetting process, in the external library, to develop a formal process, understand

00:02:38,200 --> 00:02:42,290
the technology is kind of the biggest one for me, and also keep up with changes to the

00:02:42,290 --> 00:02:46,879
module itself so you are not pulling in something that doesn't actually make sense.

00:02:46,879 --> 00:02:51,959
Now as we step into how it handles secrets, the isthis is something that people realize

00:02:51,959 --> 00:02:54,390
when they get started.

00:02:54,390 --> 00:03:00,390
So you see a resource that creates a private key with terraform.

00:03:00,390 --> 00:03:07,180
When you read the fine print, it doesn't do a good job of handling sensitive information.

00:03:07,180 --> 00:03:11,340
But you can create the resources, but you need to be careful.

00:03:11,340 --> 00:03:14,840
So this is one of the first gotchas that people run into.

00:03:14,840 --> 00:03:21,180
This is the example of the actual output when I create the terraform, it spits out my private

00:03:21,180 --> 00:03:22,180
key.

00:03:22,180 --> 00:03:27,580
If you have used terraform for a while, this is what we expect and what it is going to

00:03:27,580 --> 00:03:30,800
do, it does not have a great job of handling that.

00:03:30,800 --> 00:03:37,569
But you get issues like this, where somebody that is new to terraform says the private

00:03:37,569 --> 00:03:43,579
key is in the state file, what's up with that, but that is how it works.

00:03:43,579 --> 00:03:47,379
So kind of as you walk through this flow, this is where some of the challenge becomes,

00:03:47,379 --> 00:03:50,650
people often use a tool like Jenkins to deploy their infrastructure.

00:03:50,650 --> 00:03:56,349
So you want to make sure that your state file is encrypted in some sort of manner.

00:03:56,349 --> 00:03:59,140
The state file is encrypted, we are ready to go.

00:03:59,140 --> 00:04:04,799
But what about the Jenkins console output, is the private key in the console output,

00:04:04,799 --> 00:04:06,720
is that something that we need to protect?

00:04:06,720 --> 00:04:07,720
Yes.

00:04:07,720 --> 00:04:11,700
So how do we go about addressing that and making sure it is not in the console output?

00:04:11,700 --> 00:04:16,709
And then additionally, you step out of the console output, in the case of Jenkins, it

00:04:16,709 --> 00:04:27,251
is set to a splunt tool and it is redacted, so you go down an endless cycle if you are

00:04:27,251 --> 00:04:29,440
not aware how it works.

00:04:29,440 --> 00:04:34,100
And there's a number of open source projects out there that aim to address this issue.

00:04:34,100 --> 00:04:38,520
I have not tested any of these myself, these are just here for your information purposes,

00:04:38,520 --> 00:04:42,900
but it is an issue that the community is trying to address in some sort of manner.

00:04:42,900 --> 00:04:46,800
But the thing becomes, there is really no perfect solution, some people will leverage

00:04:46,800 --> 00:04:48,180
a placement.

00:04:48,180 --> 00:04:53,930
But I would argue that knowledge is power and knowing is half the battle, go Joe.

00:04:53,930 --> 00:04:56,130
Now you have this information as part of this if you are new to terraform.

00:04:56,130 --> 00:04:57,130
My name is Martez Reed, there's a lot of ways to find me, hope this was helpful.

00:04:57,130 --> 00:04:58,130
Thank you.

00:04:58,130 --> 00:04:59,130
[ Applause ]. >> Coming up next: 10 things The Princess

00:04:59,130 --> 00:05:00,130
Bride teaches us about DevOps by Joshua Zimmerman.

00:05:00,130 --> 00:05:01,130
>>Joshua Zimmerman: DevOps.

00:05:01,130 --> 00:05:02,130
DevOps is what brings us together.

00:05:02,130 --> 00:05:03,130
DevOps, that blessed arrangement, that dream within a dream [pope voice from the princess

00:05:03,130 --> 00:05:04,130
voice].

00:05:04,130 --> 00:05:05,130
DevOps is great, except for an MLT, where the mutton is lean and the tomato is ripe.

00:05:05,130 --> 00:05:06,130
If you have not seen The Princess Bride, you have homework now, and I promise it is more

00:05:06,130 --> 00:05:07,130
fun than Aaron's.

00:05:07,130 --> 00:05:08,130
This teaches you the most essential of the DevOps lessons, that we need to work with

00:05:08,130 --> 00:05:09,130
people at different skill sets and backgrounds to achieve goals.

00:05:09,130 --> 00:05:10,130
At the movie's climax, we need brains, brawn, and sword skills for storming the castle.

00:05:10,130 --> 00:05:11,130
And they can meet all of the separate goals by collaborating and working together.

00:05:11,130 --> 00:05:12,130
And we also learn that people are not always enough.

00:05:12,130 --> 00:05:13,130
We do often need tools and technologies to assist us.

00:05:13,130 --> 00:05:14,130
But it is just like them, it is important to know precisely what you need.

00:05:14,130 --> 00:05:15,130
Wesley does not bemoan having a Kubernetes, I mean, a catapult to storm the castle?

00:05:15,130 --> 00:05:16,130
They want a cloak and a wheel barrow, so instead of attacking, they can scare the guards away

00:05:16,130 --> 00:05:17,130
and sneak in.

00:05:17,130 --> 00:05:18,130
We can learn from their mistakes.

00:05:18,130 --> 00:05:19,130
After using for strength, wesley and indigo ditch him to accomplish their goals separately.

00:05:19,130 --> 00:05:20,130
However, they forget to plan their mistake.

00:05:20,130 --> 00:05:21,130
And the man with strength handles it for him, and he finds four white horses, doing what

00:05:21,130 --> 00:05:22,130
everyone underestimates him for, his brain.

00:05:22,130 --> 00:05:23,130
When you underestimate your colleagues, they do not pick up the slack where you need them

00:05:23,130 --> 00:05:24,130
to pick up something.

00:05:24,130 --> 00:05:25,130
Our organizations pay us to solve difficult problems, for that reason.

00:05:25,130 --> 00:05:26,130
No vendor, no tool, is go to take away the tool or the challenges from running your applications

00:05:26,130 --> 00:05:27,130
at scale.

00:05:27,130 --> 00:05:28,130
That is just how it works.

00:05:28,130 --> 00:05:29,130
Indigo lives his life, reacting to the instant of his father murdered.

00:05:29,130 --> 00:05:30,130
When he meets them, he asked if they have six fingers on their right hand, asking systems

00:05:30,130 --> 00:05:31,130
questions to determine what the steps he need to take, observability, and this teaches us

00:05:31,130 --> 00:05:32,130
in many occasions, this is a different set of questions than if you want to know if a

00:05:32,130 --> 00:05:33,130
glass has poison in it and you will die if you drink it.

00:05:33,130 --> 00:05:34,130
Systems can lie to us, Indigo says, I fell over and I'm fine, but he doesn't look so

00:05:34,130 --> 00:05:35,130
good.

00:05:35,130 --> 00:05:36,130
Our systems lie to us.

00:05:36,130 --> 00:05:37,130
When Indigo and Wesley meet, they talk before Indigo tells him he has to kill him.

00:05:37,130 --> 00:05:38,130
It is like having cattle instead of pets for servers.

00:05:38,130 --> 00:05:39,130
To do our jobs well, we need to discard the work that ourselves and our colleagues have

00:05:39,130 --> 00:05:40,130
done previously, we need to respect it, as Indigo and respect each other, but you cannot

00:05:40,130 --> 00:05:41,130
claim to it.

00:05:41,130 --> 00:05:42,130
You should not kill someone with our skills, please don't.

00:05:42,130 --> 00:05:43,130
And the movie shows us to be ethical, too.

00:05:43,130 --> 00:05:44,130
The strong man and Indigo says what they are doing with Fisiney is wrong and they go against

00:05:44,130 --> 00:05:45,130
him, they are rescuing someone, stopping a war.

00:05:45,130 --> 00:05:46,130
And Indigo gets a cushy gig as a pirate captain.

00:05:46,130 --> 00:05:47,130
Don't do something unethical because someone is paying you.

00:05:47,130 --> 00:05:48,130
Indigo is telling Fisiney that he is going to dual left-handed, his off hand, and Fisiney

00:05:48,130 --> 00:05:49,130
decides to wrestle him.

00:05:49,130 --> 00:05:50,130
If you don't give people structure of how they express their skills, they will do it

00:05:50,130 --> 00:05:51,130
how they want to, which is a good way to figure out tools you want yoloed into production.

00:05:51,130 --> 00:05:52,130
Give people structure before they flex skills.

00:05:52,130 --> 00:05:53,130
And Visiney treats of great blunders, your organization will not succeed in a land war

00:05:53,130 --> 00:05:54,130
in Asia.

00:05:54,130 --> 00:05:55,130
But he teaches that only slightly less well known is go against a Sicilian when death

00:05:55,130 --> 00:05:56,130
is on the line!

00:05:56,130 --> 00:05:56,141

YouTube URL: https://www.youtube.com/watch?v=kETSBXbqmJk


