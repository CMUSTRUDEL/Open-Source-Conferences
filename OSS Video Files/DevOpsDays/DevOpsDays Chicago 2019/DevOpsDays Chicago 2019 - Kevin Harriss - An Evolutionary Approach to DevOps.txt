Title: DevOpsDays Chicago 2019 - Kevin Harriss - An Evolutionary Approach to DevOps
Publication date: 2019-09-09
Playlist: DevOpsDays Chicago 2019
Description: 
	Kevin Harriss - An Evolutionary Approach to DevOps

The story of how a Chicago finance company avoided a radical shift and took a more evolutionary approach to its DevOps transformation. I will share the lessons we learned along the way to hopefully ease your DevOps transformation.

A lot of the talks about DevOps transformations take a “big bang” approach requiring a radical culture change. This talk will tell the story of how a local financial company has taken an evolutionary approach to its DevOps transformation. There were lots of trials, tribulations, false starts and successes along our journey. I will share examples of actions that worked well for us as well as actions that didn’t work so well. Hopefully these stories will help ease your DevOps transformation.
Captions: 
	00:00:13,500 --> 00:00:14,500
Kevin Harriss -- an evolutionary Approach to DevOps

00:00:14,500 --> 00:00:15,500
>> Our program is beginning in main hall C, please make your way back to main hall C.

00:00:15,500 --> 00:00:16,500
>>MATT STRATTON: Welcome back from your break.

00:00:16,500 --> 00:00:17,500
I still need amplification.

00:00:17,500 --> 00:00:18,500
This is something that we've always had as a feature of DevOpsDays Chicago, and it is

00:00:18,500 --> 00:00:19,500
important to us.

00:00:19,500 --> 00:00:20,500
I want you to look at your name tag, and what does it say at the bottom?

00:00:20,500 --> 00:00:21,500
Participate.

00:00:21,500 --> 00:00:22,500
Everybody says this, nobody has a name tag that says speaker, sponsor, organizer, or

00:00:22,500 --> 00:00:23,500
VIP, or Matt's own special name tag, because he is rad!

00:00:23,500 --> 00:00:24,500
They say participant, and everybody who is part of this conference, whether you are here

00:00:24,500 --> 00:00:25,500
as part of a sponsorship, a speaker, an organizer, or anything of those things that we all -- this

00:00:25,500 --> 00:00:26,500
is a participant's conference.

00:00:26,500 --> 00:00:27,500
So this is something that is really important to us, to feature.

00:00:27,500 --> 00:00:28,500
And, speaking about featuring, ready to go into the next talk of the morning.

00:00:28,500 --> 00:00:29,500
It is my pleasure to introduce to you Kevin Harriss!

00:00:29,500 --> 00:00:30,500
>>Kevin Harriss: So, first off, thanks everyone for coming.

00:00:30,500 --> 00:00:31,500
As Matt said, my name is Kevin Harriss.

00:00:31,500 --> 00:00:32,500
And I'm going to talk you through how the company I work for at Nova, we did an evolutionary

00:00:32,500 --> 00:00:33,500
approach to DevOps.

00:00:33,500 --> 00:00:34,500
So a background about myself, I'm a current system engineer team lead.

00:00:34,500 --> 00:00:36,809
I have been doing systems it for for over 10 years now, long enough too when we were

00:00:36,809 --> 00:00:39,699
called sys admins.

00:00:39,699 --> 00:00:48,710
I get applications and technology out the door for business need.

00:00:48,710 --> 00:00:59,030
I have done all DevOps from non-existing, to rapid changes, to back and forth directed

00:00:59,030 --> 00:01:00,030
changes.

00:01:00,030 --> 00:01:07,539
So, a little bit about Enova, we are an online lending company that is publicly-traded.

00:01:07,539 --> 00:01:11,789
All that goes to say is that we are highly regulated and we have a lot of compliances

00:01:11,789 --> 00:01:12,910
we have to deal with.

00:01:12,910 --> 00:01:19,610
And we also have 1,200 employees, 300 are technology and analytics engineers with six

00:01:19,610 --> 00:01:20,610
products.

00:01:20,610 --> 00:01:21,610
We offer.

00:01:21,610 --> 00:01:30,180
We have hosted in AWS and our own data centers, written in Ruby and Go and the company is

00:01:30,180 --> 00:01:31,800
15 years old.

00:01:31,800 --> 00:01:42,750
I tell you this so you know how we made a slow-freight evolutionary approach to DevOps

00:01:42,750 --> 00:01:45,260
transformation.

00:01:45,260 --> 00:01:53,380
So what is a slow-freight evolutionary change to DevOps?

00:01:53,380 --> 00:02:01,280
Any company has change, it had been fast, rapid, or slow-faced and frustrated and hair-pulling

00:02:01,280 --> 00:02:05,720
when you cannot see the iteration or the rate they are wanting to go.

00:02:05,720 --> 00:02:12,030
So really, what we had to look at is, as we wanted to involve and emplace more of these

00:02:12,030 --> 00:02:18,760
DevOps features, technologies, principles, how can we evolve those into our company and

00:02:18,760 --> 00:02:23,420
make our company faster to deliver products to our customers?

00:02:23,420 --> 00:02:28,460
So we really wanted to focus on improving our ease to launch technologies and services

00:02:28,460 --> 00:02:30,230
and new ideas.

00:02:30,230 --> 00:02:35,520
And also, at the same time, we will improve the happiness at the engineers that are building

00:02:35,520 --> 00:02:41,450
the new technologies, and the engineers that work with me on my team that have to support

00:02:41,450 --> 00:02:46,269
and help get those out the door and make sure the infrastructure is stable and running.

00:02:46,269 --> 00:02:50,341
So it is a combination of both making sure that things can get out the door fast, but

00:02:50,341 --> 00:02:55,629
also stable and in a scalable fashion.

00:02:55,629 --> 00:03:02,340
At the same time, we want to minimize risk to both our customers, our developers and

00:03:02,340 --> 00:03:06,890
engineers inside, and make sure that we are doing things to keep us compliant and we are

00:03:06,890 --> 00:03:13,191
not having any regulatory issues, while also disrupting the impact we have on the engineers

00:03:13,191 --> 00:03:15,170
while they are doing day-to-day things.

00:03:15,170 --> 00:03:21,670
Sometimes they have hard deadlines, we need to meet a compliance regulation by this date.

00:03:21,670 --> 00:03:24,230
If we cannot, we cannot do business.

00:03:24,230 --> 00:03:30,159
So we have to balance risk and disruption while making changes.

00:03:30,159 --> 00:03:36,511
That's why we did a more methological targeted approach as we are going out the door, instead

00:03:36,511 --> 00:03:42,520
of the big bang approach where a C-level from top down sends a memo and says, hey, we are

00:03:42,520 --> 00:03:45,660
doing this today, if you don't agree, the door is over there.

00:03:45,660 --> 00:03:51,260
We survey the landscape, what is over there, how can we fix that?

00:03:51,260 --> 00:03:55,769
And as we are going along this journey, we failed lots of times.

00:03:55,769 --> 00:04:02,100
I will not tell you that our journey is going to be perfect, nobody's is, the key is learning

00:04:02,100 --> 00:04:05,360
from them and understanding what we can do better.

00:04:05,360 --> 00:04:12,110
I'm here to share five key lessons we learned through failures on our journey, so hopefully

00:04:12,110 --> 00:04:15,160
you don't run into the same failures.

00:04:15,160 --> 00:04:18,340
So, lesson one.

00:04:18,340 --> 00:04:23,810
The first lesson revolves around how we actually figured out who is going to spearhead this

00:04:23,810 --> 00:04:25,610
first wave of our DevOps transformation.

00:04:25,610 --> 00:04:30,570
That resolves around what kind of teams and who is going to do that.

00:04:30,570 --> 00:04:35,360
And we started with what a lot of people do, they have the DevOps team, they are going

00:04:35,360 --> 00:04:37,419
to come up and do the DevOps!

00:04:37,419 --> 00:04:41,009
They are going to DevOps all the things.

00:04:41,009 --> 00:04:43,430
It didn't work out so well.

00:04:43,430 --> 00:04:49,340
It ended up being a catch-all for engineers that didn't fit on other teams, or scopes

00:04:49,340 --> 00:04:52,360
or projects -- oh, that's not a feature!

00:04:52,360 --> 00:04:55,940
That is something that you need to do to get on ops, or make the deployments easier.

00:04:55,940 --> 00:04:57,500
That is also the DevOps team!

00:04:57,500 --> 00:04:59,970
The DevOps team can do that.

00:04:59,970 --> 00:05:05,090
So we quickly started seeing the team scope start creeping larger and larger, as well

00:05:05,090 --> 00:05:10,680
as the engineer's team size growing larger and larger, it was too large for a manager

00:05:10,680 --> 00:05:16,180
to maintain and nobody could keep up what everybody else was working on as a team.

00:05:16,180 --> 00:05:24,400
So we looked at it and decided how can we serve the demands and achieve the change we

00:05:24,400 --> 00:05:26,460
wanted to go?

00:05:26,460 --> 00:05:35,560
Instead of a DevOps team, we build platform teams, each team has a defined scope to deliver

00:05:35,560 --> 00:05:37,300
product to our customers.

00:05:37,300 --> 00:05:43,990
And that was known to deliver functionality, internal to the customers they needed.

00:05:43,990 --> 00:05:48,419
So how did we align and decide how we needed a platform?

00:05:48,419 --> 00:05:50,620
We aligned by internal products.

00:05:50,620 --> 00:05:55,870
I don't mean an AWS team, I mean a team that was supporting a platform that our applications

00:05:55,870 --> 00:06:02,229
services ran on, or a team that does our CI/CD that builds out of platform that pushes your

00:06:02,229 --> 00:06:08,430
code from an idea to production, build out an observability platform team that builds

00:06:08,430 --> 00:06:14,580
out the toolbox for here is how we do metrics and all of the observability tools that you

00:06:14,580 --> 00:06:17,270
need so you know what is working in prod.

00:06:17,270 --> 00:06:22,520
By having the products that are driven by internal customer and users around the services

00:06:22,520 --> 00:06:27,889
required to build that, you can build out the core platform teams to help start solving

00:06:27,889 --> 00:06:30,229
those real problems.

00:06:30,229 --> 00:06:35,230
How do we handle the scale and the engineer creep on those teams?

00:06:35,230 --> 00:06:43,160
We made sure by not any mandate, but the efficiency of the team, it is a two-pizza team size.

00:06:43,160 --> 00:06:47,449
We have engineers that are 7 to 8 people per team.

00:06:47,449 --> 00:06:51,449
Large enough if you had a team lunch, everyone can sit at the table and have a conversation.

00:06:51,449 --> 00:06:59,550
It was not through mandate, we found through workflows and as teams are too large, things

00:06:59,550 --> 00:07:03,980
fall through the cracks.

00:07:03,980 --> 00:07:08,830
So by having smaller teams, we can better know what each other are doing on the teams

00:07:08,830 --> 00:07:14,470
and stay on top of the work that is coming in.

00:07:14,470 --> 00:07:19,289
So, to re cap, we first solved the problems of who is going to do the work instead of

00:07:19,289 --> 00:07:25,770
one bucket team doing the DevOps, we will focus on specific platform teams with defined

00:07:25,770 --> 00:07:33,170
criteria and small-scope engineers to keep those running.

00:07:33,170 --> 00:07:41,169
And now that we know that we have teams that are dedicated and doing the work, how do people

00:07:41,169 --> 00:07:42,819
know what they are doing?

00:07:42,819 --> 00:07:49,950
That's a key problem, how do customers and engineers know and leadership know what you

00:07:49,950 --> 00:07:50,990
are doing?

00:07:50,990 --> 00:07:55,400
If you don't have a C-level that is coming out of the mandate that says, we're doing

00:07:55,400 --> 00:08:00,611
this, your teams need to be the ones that are trying to get the C-level and the engineers

00:08:00,611 --> 00:08:02,960
to go, yeah, I want to follow you down the path.

00:08:02,960 --> 00:08:04,990
That is really exciting.

00:08:04,990 --> 00:08:06,750
How do you do that?

00:08:06,750 --> 00:08:12,349
Those teams had the internal vision before, they talked to the engineers, we were smaller

00:08:12,349 --> 00:08:13,490
at the time we started.

00:08:13,490 --> 00:08:17,080
We knew the problem space that we needed to solve.

00:08:17,080 --> 00:08:21,030
The problem was the vision stayed internal to those teams.

00:08:21,030 --> 00:08:25,639
We needed to create an external vision for those teams.

00:08:25,639 --> 00:08:30,550
By external vision, I mean, take what is in your head and make sure that it is available

00:08:30,550 --> 00:08:36,010
to everyone else that might be a new engineer coming to your team, or a new engineer joining

00:08:36,010 --> 00:08:41,580
your company or, even better, the C-level CTO who you might need to convince, hey!

00:08:41,580 --> 00:08:45,860
This need, we are not getting traction, this is important and showing them why this is

00:08:45,860 --> 00:08:46,860
important.

00:08:46,860 --> 00:08:50,970
So how do we transfer the internal vision to an external vision?

00:08:50,970 --> 00:08:56,630
First off, we set up team charters and we drill down on public documentation.

00:08:56,630 --> 00:09:01,280
What was the scope of the team, how the team communicated, and how you needed work and

00:09:01,280 --> 00:09:05,850
if you wanted to interact with the team, how you go about that, and what the team didn't

00:09:05,850 --> 00:09:07,260
do.

00:09:07,260 --> 00:09:12,480
That gives us a point in time to tell people, oh, if you need help with your deployments,

00:09:12,480 --> 00:09:16,950
or observability, or whatever other platform, you can point them to that specific platform

00:09:16,950 --> 00:09:17,950
team.

00:09:17,950 --> 00:09:22,980
That got us out of that catch-all, one team, where everyone goes and goes, oh!

00:09:22,980 --> 00:09:26,380
You're the DevOps team, so I will come to you and get my DevOps.

00:09:26,380 --> 00:09:29,040
Where we can say, no, we are glad to help you.

00:09:29,040 --> 00:09:32,600
We need to talk to these people over here.

00:09:32,600 --> 00:09:37,240
The other thing was, as we started building out projects and work that we're going to

00:09:37,240 --> 00:09:41,390
do to solve these problems, we need people to know what the projects are, what they are

00:09:41,390 --> 00:09:45,800
going to deliver, and what we can expect to see in result.

00:09:45,800 --> 00:09:50,550
To do that, we need to have public project plans, project manifestoes, documents, whatever

00:09:50,550 --> 00:09:57,279
you want to call them, but we need a public, written-down form that says, we're going to

00:09:57,279 --> 00:10:03,140
solve this problem, here is how we're planning on doing this, what we need to do to be able

00:10:03,140 --> 00:10:06,450
to do this and what the result looks like.

00:10:06,450 --> 00:10:11,110
We will do this as you are talking to your users of solving those problems.

00:10:11,110 --> 00:10:15,660
That way, you have a collaborative document, you don't want it that people don't know what

00:10:15,660 --> 00:10:22,540
you are working on, or worse, you build something out and they disagree with how you are solving

00:10:22,540 --> 00:10:23,670
the problem.

00:10:23,670 --> 00:10:30,420
And the final thing is, those of you that use AWS and some of the services, they making

00:10:30,420 --> 00:10:33,680
the road master services team public on GitHub.

00:10:33,680 --> 00:10:40,710
It is great, it lets you know what is coming up in the services that you use.

00:10:40,710 --> 00:10:50,480
We have that for teams, road maps that scale up for years, or quarters, or backlogs.

00:10:50,480 --> 00:10:56,210
It says that we're committed to doing what we said one and a half years ago.

00:10:56,210 --> 00:11:01,140
The customers and landscape and the way you do business could change.

00:11:01,140 --> 00:11:11,380
So if you have it chunked up that you can do in realtime help you deliver projects to

00:11:11,380 --> 00:11:21,300
customers, so they know what is going to come, while giving the big picture management that

00:11:21,300 --> 00:11:26,050
C-levels need so they can get on board.

00:11:26,050 --> 00:11:31,320
So once we have the team doing the work, we need the people that know what they are looking

00:11:31,320 --> 00:11:33,720
to do what they do and how they are doing that.

00:11:33,720 --> 00:11:41,029
So we have the teams create public, external visions of what they are currently doing,

00:11:41,029 --> 00:11:47,900
what they are looking to do, and what is the scope of their team.

00:11:47,900 --> 00:11:53,920
So lesson three was, once we had those project plans and those roadmaps, how do we fill them

00:11:53,920 --> 00:12:00,529
out?

00:12:00,529 --> 00:12:05,480
As we start to fill them out, early on, hey, there's a problem we had.

00:12:05,480 --> 00:12:09,951
Kubernetes could solve that, or AWS could solve that, or the latest, shiny, new tech

00:12:09,951 --> 00:12:13,320
could solve every problem we wanted to have.

00:12:13,320 --> 00:12:15,490
So we started chasing down shiny, new tech.

00:12:15,490 --> 00:12:19,700
Hey, it is going to solve all of our problems.

00:12:19,700 --> 00:12:24,240
Wait, we have to do XYZ to be able to use that?

00:12:24,240 --> 00:12:26,850
Well, that might not work.

00:12:26,850 --> 00:12:28,310
What about this over here?

00:12:28,310 --> 00:12:30,650
Oh, we have to do that?

00:12:30,650 --> 00:12:31,920
Okay.

00:12:31,920 --> 00:12:35,550
So we were starting in a problem where we are jumping and chasing a bunch of shiny,

00:12:35,550 --> 00:12:37,339
new tech.

00:12:37,339 --> 00:12:42,480
What we needed to focus on is making sure we are using the right new tech.

00:12:42,480 --> 00:12:44,300
What do we mean by the right new tech?

00:12:44,300 --> 00:12:49,590
The tech that more importantly actually solves the problems that those platform teams are

00:12:49,590 --> 00:12:50,760
looking to solve.

00:12:50,760 --> 00:12:56,760
Lots of problems can still be solved by batch and Jenkins.

00:12:56,760 --> 00:13:05,519
It might not need to be solved by the most complicated Kubernetes structure out there,

00:13:05,519 --> 00:13:10,990
sometimes it is important to know what the right tech for your situation is.

00:13:10,990 --> 00:13:14,690
How do you know what the right tech actually is?

00:13:14,690 --> 00:13:19,519
First off, context rules everything around me.

00:13:19,519 --> 00:13:21,580
How do you know the right tech?

00:13:21,580 --> 00:13:22,580
Context.

00:13:22,580 --> 00:13:25,760
Without that contextual information, you don't know the right tool.

00:13:25,760 --> 00:13:27,810
What is that information?

00:13:27,810 --> 00:13:35,019
It is how much time engineer wise you had to dedicate to a project, maybe it is how

00:13:35,019 --> 00:13:38,370
much work it is going to take to get to that point.

00:13:38,370 --> 00:13:44,490
Do we have the skill necessary, or can we get the skills necessary to achieve that project

00:13:44,490 --> 00:13:45,829
on board?

00:13:45,829 --> 00:13:51,300
Or does it solve the problems we are looking to solve, or does it just make a shiny new

00:13:51,300 --> 00:13:53,670
blog post for conference talks?

00:13:53,670 --> 00:14:00,240
Without that contextual information, you cannot determine if it is just shiny, new tech, or

00:14:00,240 --> 00:14:03,089
the right shiny, new tech.

00:14:03,089 --> 00:14:10,160
And you need to choose things that are helping you solve new problems, or just giving you

00:14:10,160 --> 00:14:13,300
hype and street cred.

00:14:13,300 --> 00:14:19,340
So we made the mistake where we chased hype, shiny new projects and we were not solving

00:14:19,340 --> 00:14:21,740
what we needed to solve.

00:14:21,740 --> 00:14:29,290
We needed to figure out what problems we are solving and if this tool is solving those.

00:14:29,290 --> 00:14:34,339
At the same time, when I'm talking about making sure you are using the right new tech, it

00:14:34,339 --> 00:14:37,990
might be the tech you are using today, but it might not be.

00:14:37,990 --> 00:14:44,520
Don't fear the sunk cost of the technology you have, if the contextual information tells

00:14:44,520 --> 00:14:48,110
you it is a better choice to move to something else.

00:14:48,110 --> 00:14:53,550
Change is going to happen, so make sure you change at the appropriate time with the appropriate

00:14:53,550 --> 00:14:55,380
tools.

00:14:55,380 --> 00:15:02,720
Don't fear having new change because you have a tool that solves the problem, kind of.

00:15:02,720 --> 00:15:07,060
So, to re-cap, context is king.

00:15:07,060 --> 00:15:08,060
Context is everything.

00:15:08,060 --> 00:15:12,910
Without context, and how the company works, the problem space you work in, and how the

00:15:12,910 --> 00:15:18,230
engineers solve problems, you cannot pick the right technology to solve your problems.

00:15:18,230 --> 00:15:23,380
If you choose just based upon blog posts, conference talks, or whatever is getting the

00:15:23,380 --> 00:15:28,210
most traction on Twitter or GitHub stars, you will be choosing technologies constantly

00:15:28,210 --> 00:15:29,380
and jumping around.

00:15:29,380 --> 00:15:33,930
And that is not usually going to make fun for anyone.

00:15:33,930 --> 00:15:39,570
So, the fourth lesson we ran into, as we are going around this, is now that we kind of

00:15:39,570 --> 00:15:43,730
had an idea of the right technology that we need to ship to our engineers to solve these

00:15:43,730 --> 00:15:51,209
problems, what do we actually do and how do we get it so they can use those problems and

00:15:51,209 --> 00:15:54,610
get those products, solve those problems?

00:15:54,610 --> 00:16:00,540
So the first way we started out is how a lot of people traditionally ship software.

00:16:00,540 --> 00:16:05,560
We went away, did our thing, talked to them early on, did our requirements, talked about

00:16:05,560 --> 00:16:14,520
the systems they needed to get fixed, we built it, got back to them, a couple sprints later,

00:16:14,520 --> 00:16:19,580
months off or a year later, we built you a Kubernetes cluster.

00:16:19,580 --> 00:16:25,740
And then they came back and said, oh, we don't need containers today anymore.

00:16:25,740 --> 00:16:28,290
We have bigger problems we need to worry about.

00:16:28,290 --> 00:16:34,649
So you spent a year building the stuff that is not solving a problem, or maybe it was

00:16:34,649 --> 00:16:41,110
you went and you were like, oh, yeah, that problem with all those users getting bad unicode

00:16:41,110 --> 00:16:42,190
in the user names?

00:16:42,190 --> 00:16:44,940
We fixed that bug on this problem a month ago.

00:16:44,940 --> 00:16:48,000
Oh, all the work you spent fixing it there?

00:16:48,000 --> 00:16:52,610
We sanitized it on the UI on the front end, it was a two-point story to get it out the

00:16:52,610 --> 00:16:53,829
door.

00:16:53,829 --> 00:16:59,630
So by going away, building it, coming back, we ended up solving problems that are not

00:16:59,630 --> 00:17:05,280
the problems of today, but the problems of yesterday, and causing us to do a lot of extra

00:17:05,280 --> 00:17:06,740
work.

00:17:06,740 --> 00:17:11,449
So essentially, once we came back and built it, the engineers essentially just went, cool.

00:17:11,449 --> 00:17:16,120
You did some work, maybe we might use that in the future, but really what they're telling

00:17:16,120 --> 00:17:22,689
is, one, what value are you actually giving us, as your team, and are you doing anything

00:17:22,689 --> 00:17:27,760
that is making my day better and making it so I can achieve my goal faster?

00:17:27,760 --> 00:17:32,610
So how do we get it so that we're actually making it where we're solving today's problems

00:17:32,610 --> 00:17:35,060
instead of chasing yesterday's problems?

00:17:35,060 --> 00:17:40,080
First off, that came off from realizing that we always need to be shipping.

00:17:40,080 --> 00:17:45,020
Always be shipping, going through and making sure that we're delivering value to those

00:17:45,020 --> 00:17:50,919
teams means building an iterative product and platform, making sure we can add features

00:17:50,919 --> 00:17:54,920
to, work on, without breaking everything else.

00:17:54,920 --> 00:18:00,740
That means getting out of the mindset of, I get my requirements, go to my engineers,

00:18:00,740 --> 00:18:02,970
we work for six months and come back.

00:18:02,970 --> 00:18:10,280
It means, hey, here is an idea we're trying to solve, build the prototype and say, hey,

00:18:10,280 --> 00:18:13,780
here is the prototype, give me feedback.

00:18:13,780 --> 00:18:18,830
How are the inputs looking, is that what you are needing to do, do the results match up

00:18:18,830 --> 00:18:20,740
with what you need to do?

00:18:20,740 --> 00:18:26,299
So iterate on the products and making sure you are giving constant communication with

00:18:26,299 --> 00:18:29,789
your customers and users about the problems you are solving.

00:18:29,789 --> 00:18:37,160
I know my team, as infraengineers, we need to solve all the problems of the company.

00:18:37,160 --> 00:18:39,460
But unfortunately, we don't always know all the problems.

00:18:39,460 --> 00:18:44,440
We need to talk to the software engineers, the analysts, the analytics folks that are

00:18:44,440 --> 00:18:49,200
trying to solve the same problems of the business, talk to them, and go, how can we make your

00:18:49,200 --> 00:18:54,450
job easier today and work with them to make sure that's the case.

00:18:54,450 --> 00:19:00,490
We need to get out of the mindset of perfection, and quit chasing perfection.

00:19:00,490 --> 00:19:03,410
As is mentioned earlier, code is never going to be perfect.

00:19:03,410 --> 00:19:04,880
There are issues with code.

00:19:04,880 --> 00:19:12,190
It is more important to focus on serving 80, 85, 90 percent of the problems, or that your

00:19:12,190 --> 00:19:18,230
engineers are currently expecting, rather than pulling away for extra weeks, months,

00:19:18,230 --> 00:19:21,210
never, to get it where it is 100 percent perfect.

00:19:21,210 --> 00:19:26,190
It is much better to iterate, ship something practical that is solving today's problems,

00:19:26,190 --> 00:19:32,460
rather than perfect, and you are sitting there always waiting.

00:19:32,460 --> 00:19:38,169
So as we went around this and figured out how we can solve those problems, what we needed

00:19:38,169 --> 00:19:44,200
to do was is still listen to a little bit of very simple run book of how we actually

00:19:44,200 --> 00:19:45,200
solve this.

00:19:45,200 --> 00:19:48,090
First off, find those excited users.

00:19:48,090 --> 00:19:51,500
They might be excited, or angry, those are your users.

00:19:51,500 --> 00:19:57,230
Find a problem that you can fix, you need to fix, and that is available and ready for

00:19:57,230 --> 00:19:58,740
you to work with.

00:19:58,740 --> 00:20:04,210
Give them a solution, a product, a service, a tool, whatever, that might solve the initial

00:20:04,210 --> 00:20:05,520
part of that problem.

00:20:05,520 --> 00:20:09,440
Listen to them complain about it, because it is not going to be perfect, and they will

00:20:09,440 --> 00:20:12,130
have lots of complaints.

00:20:12,130 --> 00:20:15,400
Fix those complaints, repeat as necessary.

00:20:15,400 --> 00:20:19,850
So keep running through that, and that is how you will be able to solve today's problems

00:20:19,850 --> 00:20:22,780
as we do instead of chasing the problems of yesterday.

00:20:22,780 --> 00:20:30,420
So, to re-cap: The biggest thing you need to focus on as your teams, we know what to

00:20:30,420 --> 00:20:34,260
work on and we know what is available, we have to make sure that you are solving the

00:20:34,260 --> 00:20:40,550
problems of today by delivering an iterative product and talking to customers, without

00:20:40,550 --> 00:20:48,360
the constant communication and constant deliverable, we would not have been able to achieve the

00:20:48,360 --> 00:20:50,230
pace that we can solve today's problems.

00:20:50,230 --> 00:20:55,340
We are constantly fighting fires in combination of delivering yesterday's products and solving

00:20:55,340 --> 00:20:59,410
yesterday's problems.

00:20:59,410 --> 00:21:06,480
The 5th and final lesson for today that we ran into was: How do we get this system that

00:21:06,480 --> 00:21:09,960
we built out to scale up and to the right?

00:21:09,960 --> 00:21:14,000
We have it working for these internal platform teams.

00:21:14,000 --> 00:21:20,960
As I said, we want to improve the happiness of not only the engineers shipping new technology

00:21:20,960 --> 00:21:27,200
and services, we want to improve the happiness of the engineers on the platform teams.

00:21:27,200 --> 00:21:32,870
We don't want to flood them and toil, they are constantly taking request tickets, human

00:21:32,870 --> 00:21:35,070
chat ops, or anything like that.

00:21:35,070 --> 00:21:41,410
How do we scale this so actual engineers can service themselves?

00:21:41,410 --> 00:21:47,410
So we started off with a problem of how can we do this but, as most people do, we wrote

00:21:47,410 --> 00:21:48,780
a bunch of batch.

00:21:48,780 --> 00:21:56,520
We took a bunch of random batch scripts, some are SSHed into boxes, and we wrapped a shiny

00:21:56,520 --> 00:21:58,560
new layer on it.

00:21:58,560 --> 00:22:03,730
This is the one interface to build everything you need.

00:22:03,730 --> 00:22:09,110
And it would work once out of every 10 times, or five if you are lucky.

00:22:09,110 --> 00:22:14,780
So we had a problem of shoving square pegs into round holes.

00:22:14,780 --> 00:22:48,139
And we were like, how can this be better?

00:22:48,139 --> 00:22:58,309
>> Maybe we can build out a terra form, or instead of building a batch script on the

00:22:58,309 --> 00:23:06,320
laptop, they have an API service with interfaces for a chat box, curl, or whatever they wanted

00:23:06,320 --> 00:23:07,780
to do to interact with it.

00:23:07,780 --> 00:23:14,130
So we built out common interfaces to the problem so that way, it was easier for engineers to

00:23:14,130 --> 00:23:22,110
self-service, and we can build out error handling and better integrate the various bits.

00:23:22,110 --> 00:23:29,351
So, as we built out the common interfaces, what we also were able to achieve is, under

00:23:29,351 --> 00:23:34,840
the hood, this is everyone's least favorite thing, standard practices.

00:23:34,840 --> 00:23:41,230
We implemented naming standards, tagging standards, you want your database to be called something

00:23:41,230 --> 00:23:45,450
like this?

00:23:45,450 --> 00:23:53,120
Based on the information passed, how the internals of the system that you shouldn't care about,

00:23:53,120 --> 00:23:56,900
work because they are provided by the system.

00:23:56,900 --> 00:24:05,730
We extracted out the questions of, what do I call my database user, or this, what port

00:24:05,730 --> 00:24:06,970
do I run this on?

00:24:06,970 --> 00:24:12,650
We abstracted all that out by building the common interfaces so you are passing in four

00:24:12,650 --> 00:24:18,990
attributes, and then we infer the rest of the system.

00:24:18,990 --> 00:24:26,620
We also build out better practices around how we actually build out tools and what observebility

00:24:26,620 --> 00:24:31,520
tools you get out of the box by having these, because you are able to add features to it

00:24:31,520 --> 00:24:35,080
under the hood without engineers having to change their interface.

00:24:35,080 --> 00:24:40,190
So they can be using a platform, signed up, when I need a new service, I made a new call,

00:24:40,190 --> 00:24:44,370
the JSON or YAML file, or whatever.

00:24:44,370 --> 00:24:50,309
And under the hood they get all the observability tools we offer for a new service with the

00:24:50,309 --> 00:24:56,510
information pre-populated, they get the new configs automatically set up for them.

00:24:56,510 --> 00:24:59,730
The other key thing we had to do was documentation.

00:24:59,730 --> 00:25:04,701
And not documentation after the fact, where you just kind of throw a blurb up there, why

00:25:04,701 --> 00:25:08,630
your tool has a funny name that nobody is going to understand, or a picture that goes

00:25:08,630 --> 00:25:09,630
along with it.

00:25:09,630 --> 00:25:15,120
But documentation of why this actually works, how it works, the problem it is trying to

00:25:15,120 --> 00:25:21,130
solve, how to get help when it doesn't work, and how to contribute.

00:25:21,130 --> 00:25:26,320
The biggest thing that we needed with documentation was, dev set-ups and how to contribute.

00:25:26,320 --> 00:25:31,010
Because that then made engineers feel like, oh, I need a new feature for this.

00:25:31,010 --> 00:25:35,230
It tells me how to set up a dev environment and add the feature I need?

00:25:35,230 --> 00:25:41,500
We get pull request, and people coming to us, rather than taking it to add the feature

00:25:41,500 --> 00:25:42,500
here.

00:25:42,500 --> 00:25:45,440
People made pull requests to add their functionality.

00:25:45,440 --> 00:25:51,080
So then it became a community effort that we ran to grow the systems so we can scale

00:25:51,080 --> 00:25:53,590
them out.

00:25:53,590 --> 00:25:58,799
We also needed to focus on reducing the number of hand-offs and transactions that were going

00:25:58,799 --> 00:26:04,070
in between getting something out, getting something deployed, or anything that we wanted

00:26:04,070 --> 00:26:07,010
to reduce as much human interaction as possible.

00:26:07,010 --> 00:26:11,510
So we wanted to build automated checks, automated compliance requests.

00:26:11,510 --> 00:26:15,880
If you have a pull request, it is green, the unit test passes.

00:26:15,880 --> 00:26:22,060
Things like that, we can accept it and say, we did a code review, it is good, it is out

00:26:22,060 --> 00:26:27,570
the door, instead of saying, all right, I code reviewed that, now I will kick off the

00:26:27,570 --> 00:26:30,570
staging test, I will wait for this to run.

00:26:30,570 --> 00:26:35,360
All right, I need to manually run the linter, now I need to manually do other steps.

00:26:35,360 --> 00:26:41,190
Make them automated checks on the PR so someone can look at it and say, it is green, now I

00:26:41,190 --> 00:26:46,430
need to review the functionality and what this is actually doing, rather than you didn't

00:26:46,430 --> 00:26:52,240
put a new line there, or the braces didn't line up.

00:26:52,240 --> 00:26:53,240
Humans don't want to do that.

00:26:53,240 --> 00:26:55,940
Computers are great for that.

00:26:55,940 --> 00:27:01,710
The other thing we did to get people to understand what these platforms were provided, but also

00:27:01,710 --> 00:27:08,620
to get people interested, is to set up the notion of office hours.

00:27:08,620 --> 00:27:15,240
Teams go and sit in the public kitchen, or set up a meeting room, and they make either

00:27:15,240 --> 00:27:18,980
one or two representatives from their team available for anyone to kind of walk in and

00:27:18,980 --> 00:27:21,090
ask questions off the street.

00:27:21,090 --> 00:27:26,789
The idea is that it is a customer-driven interaction.

00:27:26,789 --> 00:27:30,590
So the customer can come in and say, I am experiencing this problem today.

00:27:30,590 --> 00:27:33,390
Can you help me fix this, I need to get this fixed.

00:27:33,390 --> 00:27:41,149
Or the customer can say, that is slick what you added, how do you add that, and talk through.

00:27:41,149 --> 00:27:46,100
They are weekly, not set up daily.

00:27:46,100 --> 00:27:48,200
Weekly works well for us.

00:27:48,200 --> 00:27:53,700
We also have a set-up that we did where we called in our solutions office hours, it is

00:27:53,700 --> 00:28:00,659
our architect and our principal software engineer and a handful of people from our various observability

00:28:00,659 --> 00:28:05,039
team, technical operations teams and myself that can sit there as consultants.

00:28:05,039 --> 00:28:12,150
If you have a new idea, this is helpful to solve this problem, they can come there early

00:28:12,150 --> 00:28:19,610
on and run the idea by the group of internal consultants and get feedback and say, hey,

00:28:19,610 --> 00:28:20,610
that's a good idea.

00:28:20,610 --> 00:28:24,970
Have you thought about this, or that's a good idea, can we also use it for this?

00:28:24,970 --> 00:28:29,920
So by doing those office hours, we are able to grow that community interaction.

00:28:29,920 --> 00:28:35,380
So to re-cap, we scaled by building standard self-service interfaces and reaching out to

00:28:35,380 --> 00:28:39,360
the community via documentation and those open office hours.

00:28:39,360 --> 00:28:43,899
And, by doing that, that allowed us to get out of the day-to-day toil out of a lot of

00:28:43,899 --> 00:28:49,809
platforms and made it so engineers can solve their on problems.

00:28:49,809 --> 00:28:54,809
So to re-cap, I went over five key lessons that Anova learned as we are going over this

00:28:54,809 --> 00:28:56,580
journey.

00:28:56,580 --> 00:29:01,500
And we started out by making sure that we are building the correct teams to solve these

00:29:01,500 --> 00:29:07,830
problems by making sure they deliver a consistent and thorough platform to customers.

00:29:07,830 --> 00:29:13,240
We made sure that the visions of the teams were publicly documented and publicly shared

00:29:13,240 --> 00:29:16,320
and, more importantly, known throughout the company.

00:29:16,320 --> 00:29:22,770
We focused on context, without context, you don't know what is going on.

00:29:22,770 --> 00:29:28,140
We also made sure to constantly deliver product and value to our customers, without that,

00:29:28,140 --> 00:29:32,900
we are chasing the problems of yesterday instead of solving the problems of today.

00:29:32,900 --> 00:29:39,750
We scaled and made this a process that anyone can do by ensuring we have correct documentation,

00:29:39,750 --> 00:29:45,010
self-service interfaces, and reducing the amount of humans in the process.

00:29:45,010 --> 00:29:46,010
Thank you.

00:29:46,010 --> 00:29:47,600
That's all the slides I have.

00:29:47,600 --> 00:29:48,600
I'm Kevin Harriss, if you have any questions, I'll be outside.

00:29:48,600 --> 00:29:49,600
[ Applause ]. >>SASHA ROSENBAUM: Thank you so much, Kevin.

00:29:49,600 --> 00:29:50,600
I wanted to remind you that we have open spaces after lunch.

00:29:50,600 --> 00:29:51,600
So if any of you want to talk about how these people are doing things, like how do you ship

00:29:51,600 --> 00:29:52,600
feature flags, or how does Enova do this, you can get in touch with the speakers and

00:29:52,600 --> 00:29:53,600
whoever else is interested in it.

00:29:53,600 --> 00:29:54,600
Now we have another sponsor break to thank our sponsors who are making this conference

00:29:54,600 --> 00:29:55,600
possible.

00:29:55,600 --> 00:29:56,600
So the first sponsor is Chef.

00:29:56,600 --> 00:29:57,600
>> Hello.

00:29:57,600 --> 00:29:58,600
Hi, everybody.

00:29:58,600 --> 00:29:59,600
As mentioned, by my t-shirt, I work for Chef software.

00:29:59,600 --> 00:30:00,600
We did re-branding with the company.

00:30:00,600 --> 00:30:01,600
You may be familiar with our infrastructure product, but now we have Chef inspec interest

00:30:01,600 --> 00:30:02,600
internal compliance.

00:30:02,600 --> 00:30:03,600
When you change automation, you need to make sure it follows security requirements.

00:30:03,600 --> 00:30:04,600
The one thing you are probably less familiar with is called Habitat.

00:30:04,600 --> 00:30:05,600
Any people in the room that touch code?

00:30:05,600 --> 00:30:06,600
We have a couple people that raised hands.

00:30:06,600 --> 00:30:07,600
That makes your app habitable, no matter the app it runs in.

00:30:07,600 --> 00:30:08,600
We no longer do bad food puns, but environment jokes.

00:30:08,600 --> 00:30:09,600
And now we codify the app's live cycle.

00:30:09,600 --> 00:30:10,600
If you have your hand raised, maybe you have a wrong version of a binary, plus a top cap.

00:30:10,600 --> 00:30:11,600
If you say that we don't use that version anymore, what Habitat does is codify's your

00:30:11,600 --> 00:30:12,600
app's requirements.

00:30:12,600 --> 00:30:13,600
You can ship through the application now, no longer the guesswork.

00:30:13,600 --> 00:30:14,600
We can help you deploy and manage.

00:30:14,600 --> 00:30:15,600
Come by to the booth, we are part of the automation stack and will give you more information.

00:30:15,600 --> 00:30:16,600
>>SASHA ROSENBAUM: Thank you.

00:30:16,600 --> 00:30:17,600
The next sponsor is aXe matters.

00:30:17,600 --> 00:30:18,600
>> I'm Adam, we are a digital service availability platform.

00:30:18,600 --> 00:30:19,600
But what we actually do is on-call notifications, targeted notifications with actionable responses.

00:30:19,600 --> 00:30:20,600
What that means is we have a brand-new thing, faux designer, a codeless platform to drag

00:30:20,600 --> 00:30:21,600
and drop workflow.

00:30:21,600 --> 00:30:22,600
We send right notifications at the right time, and we send context with that notification

00:30:22,600 --> 00:30:23,600
and give you the ability to take a response, whether that is clicking a button and running

00:30:23,600 --> 00:30:24,600
automated workflow that can open up a ticket and post to Slack and open up a Jira and zen

00:30:24,600 --> 00:30:25,600
desk ticket and post it to a status page, it gives you the ability to work in the tools

00:30:25,600 --> 00:30:26,600
you choose to work out of and target the right person at the right time.

00:30:26,600 --> 00:30:27,600
Thank you.

00:30:27,600 --> 00:30:28,600
>>SASHA ROSENBAUM: Thank you!

00:30:28,600 --> 00:30:29,600
And the next sponsor is Solar Winds.

00:30:29,600 --> 00:30:30,600
>> I'm Pete Stephano, you may have heard of solar winds, but you wonder, what are they

00:30:30,600 --> 00:30:31,600
doing?

00:30:31,600 --> 00:30:32,600
They do on prem network and systems management.

00:30:32,600 --> 00:30:33,600
That's not why we are here.

00:30:33,600 --> 00:30:34,600
Six years ago, we evolved the purpose for DevOps products.

00:30:34,600 --> 00:30:35,600
That's what we are sharing, whether on the client side, or the server side, down to the

00:30:35,600 --> 00:30:36,600
line of code.

00:30:36,600 --> 00:30:37,600
I would love you to come over to table 10 and learn more about solar winds app optics.

00:30:37,600 --> 00:30:38,600
They are all purpose-built for DevOps for monitoring your metrics, your traces, logs,

00:30:38,600 --> 00:30:39,600
including your digital user experience.

00:30:39,600 --> 00:30:40,600
So if you are familiar with solar winds, there is one part of the model that is insane: Products

00:30:40,600 --> 00:30:41,600
solve a different part of the problem.

00:30:41,600 --> 00:30:42,600
And one gentlemen came to us and said, the products work.

00:30:42,600 --> 00:30:43,600
That model is true and cost-effective.

00:30:43,600 --> 00:30:44,600
Come to table 10.

00:30:44,600 --> 00:30:45,600
>>SASHA ROSENBAUM: Thank you.

00:30:45,600 --> 00:30:46,600
And lastly is Vector Ops!

00:30:46,600 --> 00:30:47,600
>> Hi, Dennis from Vector Ops.

00:30:47,600 --> 00:30:48,600
We make on call suck less.

00:30:48,600 --> 00:30:49,600
We are giving away a Nintendo switch.

00:30:49,600 --> 00:30:50,600
If you would love to talk about our product, we would love to do that.

00:30:50,600 --> 00:30:51,600
I want to thank everybody who organized the event, they did a fantastic job, great venue,

00:30:51,600 --> 00:30:52,600
let's give them a round of applause, and I will see you at booth 12.

00:30:52,600 --> 00:30:53,600
>>SASHA ROSENBAUM: Thank you.

00:30:53,600 --> 00:30:53,613

YouTube URL: https://www.youtube.com/watch?v=YbEkHiG2718


