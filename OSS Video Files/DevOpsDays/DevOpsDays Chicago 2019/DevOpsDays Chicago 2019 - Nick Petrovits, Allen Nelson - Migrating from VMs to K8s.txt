Title: DevOpsDays Chicago 2019 - Nick Petrovits, Allen Nelson - Migrating from VMs to K8s
Publication date: 2019-09-09
Playlist: DevOpsDays Chicago 2019
Description: 
	Nick Petrovits, Allen Nelson - Migrating from VMs to K8s

Join us as we describe our migration from a limiting cloud deployment on long-running VMs with shared infrastructure to a streamlined immutable infrastructure built on top of Docker and K8s. We’ll also discuss techniques to support local development during this transition.

Many teams wish they could reap the widely known benefits of Kubernetes (K8s), but most struggle to migrate to a new infrastructure while simultaneously supporting two deployment models and avoiding impacts to the velocity of software development. In this talk, we describe the particular challenges we faced during our incremental migration from multiple long-running singleton EC2 instances to a containerized solution.

We’ll highlight:

What challenges motivated us to transition to K8s?
Approaching an infrastructure migration incrementally to minimize impacts to local development and production deployments
Developing a solution to provide the same abstraction for local development that exists in production
Concurrently supporting multiple deployment models to reduce risk and simplify migration
Strategy variations for synchronous and asynchronous services
Networking challenges with Vagrant and Docker
Integrating K8s with a CI/CD pipeline
Tuning the environment
Captions: 
	00:00:12,990 --> 00:00:16,890
everyone thanks for coming to our talk

00:00:15,300 --> 00:00:18,870
it's the last talk of the day the last

00:00:16,890 --> 00:00:20,220
talk of the conference so you know

00:00:18,870 --> 00:00:22,920
appreciate you sticking around and

00:00:20,220 --> 00:00:26,340
listening to us talk about migrating VMs

00:00:22,920 --> 00:00:28,470
or from VM so kubernetes and kind of the

00:00:26,340 --> 00:00:30,600
message of the talk that we want to pass

00:00:28,470 --> 00:00:32,970
along to everyone is we did it and so

00:00:30,600 --> 00:00:34,590
can you I know a lot of times when we

00:00:32,970 --> 00:00:36,210
start talking about technology

00:00:34,590 --> 00:00:37,800
migrations people get scared and we're

00:00:36,210 --> 00:00:39,480
here to show you some things you can do

00:00:37,800 --> 00:00:43,050
to mitigate risk and how you can be

00:00:39,480 --> 00:00:45,060
successful at it yeah cool so I'll just

00:00:43,050 --> 00:00:47,010
start by introducing myself my name is

00:00:45,060 --> 00:00:49,079
Alan Nelson I'm a full-stack developer

00:00:47,010 --> 00:00:51,600
at knowledge hound

00:00:49,079 --> 00:00:54,570
I was prior to that mostly on the back

00:00:51,600 --> 00:00:56,760
end I did some DevOps stuff and some

00:00:54,570 --> 00:00:58,350
server development and now I'm just kind

00:00:56,760 --> 00:01:01,079
of all over the place with the

00:00:58,350 --> 00:01:03,120
background I had I had a big role in

00:01:01,079 --> 00:01:05,240
what we've done so far in knowledge town

00:01:03,120 --> 00:01:08,759
migrating over to kubernetes

00:01:05,240 --> 00:01:12,320
and in addition to that I do a lot of

00:01:08,759 --> 00:01:15,240
front-end development JavaScript and

00:01:12,320 --> 00:01:18,810
back-end development in Python so just

00:01:15,240 --> 00:01:20,909
kind of a generalist and yeah that's me

00:01:18,810 --> 00:01:23,190
yeah I'm Nick part of it so I'm not that

00:01:20,909 --> 00:01:25,470
different from Alan my title is VP of

00:01:23,190 --> 00:01:27,570
engineering just means I get a code a

00:01:25,470 --> 00:01:29,490
little less but I'm also a full sack

00:01:27,570 --> 00:01:30,420
developer I've done a lot of web

00:01:29,490 --> 00:01:32,400
development a lot of back-end

00:01:30,420 --> 00:01:34,439
development lately a lot of data

00:01:32,400 --> 00:01:36,780
development because my previous role was

00:01:34,439 --> 00:01:40,229
at a company dealing with a lot of big

00:01:36,780 --> 00:01:41,549
data and working on their data like I've

00:01:40,229 --> 00:01:44,100
done all sorts of stuff I've been a

00:01:41,549 --> 00:01:45,390
product owner for a little while so I've

00:01:44,100 --> 00:01:49,890
tried all sorts of different roles in

00:01:45,390 --> 00:01:51,869
the tech space so where does our

00:01:49,890 --> 00:01:53,130
adventure start and why do we want to

00:01:51,869 --> 00:01:57,150
come here and talk to you about this

00:01:53,130 --> 00:01:58,380
today again I know a lot of us see

00:01:57,150 --> 00:02:01,409
things that we want to try out and

00:01:58,380 --> 00:02:03,299
oftentimes don't know where to start and

00:02:01,409 --> 00:02:05,040
this is kind of a simplified version of

00:02:03,299 --> 00:02:06,869
our architecture we've ripped out things

00:02:05,040 --> 00:02:08,610
like web application firewalls and

00:02:06,869 --> 00:02:11,040
whatnot just to try to make the picture

00:02:08,610 --> 00:02:13,519
look simple but to give you a really

00:02:11,040 --> 00:02:15,470
over hila overview of our architecture

00:02:13,519 --> 00:02:17,670
we have an app that's a

00:02:15,470 --> 00:02:20,519
software-as-a-service application it

00:02:17,670 --> 00:02:23,100
does helps market researchers do some

00:02:20,519 --> 00:02:25,079
research and you know we have a load

00:02:23,100 --> 00:02:26,790
balance that's a load balancer that sits

00:02:25,079 --> 00:02:28,890
in front of some ec2 instances

00:02:26,790 --> 00:02:30,930
we serve our all of our web content in

00:02:28,890 --> 00:02:32,040
s3 front of iCloud front and there's

00:02:30,930 --> 00:02:34,680
some other caching layers that are

00:02:32,040 --> 00:02:36,569
hidden in there our Web Apps talked to

00:02:34,680 --> 00:02:38,340
elasticsearch you know the typical

00:02:36,569 --> 00:02:40,319
kind of things most of our applications

00:02:38,340 --> 00:02:42,900
talk to in our talk today we're gonna

00:02:40,319 --> 00:02:44,900
focus only on the stuff that's in ec2

00:02:42,900 --> 00:02:47,700
and how to migrate that to kubernetes

00:02:44,900 --> 00:02:49,080
yeah elasticsearch is hosted for us on

00:02:47,700 --> 00:02:52,620
ec2 as well we're not going to talk

00:02:49,080 --> 00:02:54,120
about that there's other talks and

00:02:52,620 --> 00:02:56,280
things out there on the internet already

00:02:54,120 --> 00:02:59,579
that give you kind of how-to guides of

00:02:56,280 --> 00:03:01,019
how to migrate other tools out there one

00:02:59,579 --> 00:03:03,750
other thing I want to mention is our

00:03:01,019 --> 00:03:06,359
services are built in Python using

00:03:03,750 --> 00:03:07,920
Django our web apps mostly react we have

00:03:06,359 --> 00:03:09,720
some are things like angular 2 and

00:03:07,920 --> 00:03:14,040
there's legacy in our system as well

00:03:09,720 --> 00:03:19,500
such as little PHP I don't want to talk

00:03:14,040 --> 00:03:21,450
about that so a lot of us kind of feel

00:03:19,500 --> 00:03:24,299
like yeah containers that's cool we

00:03:21,450 --> 00:03:25,709
could try containers you know but

00:03:24,299 --> 00:03:27,510
everything already works so I hear

00:03:25,709 --> 00:03:30,200
kubernetes is really hard and there's

00:03:27,510 --> 00:03:32,549
all these different things I do eks ECS

00:03:30,200 --> 00:03:35,910
some of these tools in Amazon or Google

00:03:32,549 --> 00:03:38,430
and Microsoft I don't really know where

00:03:35,910 --> 00:03:40,440
to start if you're like us there's six

00:03:38,430 --> 00:03:42,630
engineers and our development team and

00:03:40,440 --> 00:03:44,609
our startup and none of us are actually

00:03:42,630 --> 00:03:46,200
DevOps people our primary role is

00:03:44,609 --> 00:03:49,650
writing in our application that our

00:03:46,200 --> 00:03:51,209
customers use the business is never

00:03:49,650 --> 00:03:52,709
going to approve us just stopping

00:03:51,209 --> 00:03:54,419
everything we're doing and migrating to

00:03:52,709 --> 00:03:57,959
kubernetes so we're not going to be able

00:03:54,419 --> 00:04:00,030
to do that and like I said again we're a

00:03:57,959 --> 00:04:01,980
small startup we're cash-strapped like

00:04:00,030 --> 00:04:04,590
every every moment a dev time really

00:04:01,980 --> 00:04:07,769
matters so I can't stop working to

00:04:04,590 --> 00:04:10,919
invest in this and you know there was

00:04:07,769 --> 00:04:13,639
Murphy's Law that exists maybe one user

00:04:10,919 --> 00:04:16,109
one day brought down our whole website

00:04:13,639 --> 00:04:19,169
there was one service that ran in our

00:04:16,109 --> 00:04:20,700
ec2 instances and you know first they

00:04:19,169 --> 00:04:22,620
crashed on one node by gaining its

00:04:20,700 --> 00:04:24,690
analytics processes to use too much

00:04:22,620 --> 00:04:26,370
memory and they didn't press a5 a bunch

00:04:24,690 --> 00:04:29,310
of times and caused that to happen again

00:04:26,370 --> 00:04:30,900
so you know Murphy never strikes twice I

00:04:29,310 --> 00:04:32,580
don't really need to worry about that we

00:04:30,900 --> 00:04:34,410
changed some Apache saying so in theory

00:04:32,580 --> 00:04:36,510
it shouldn't happen again and I had it

00:04:34,410 --> 00:04:38,310
for a while so yeah we should just say

00:04:36,510 --> 00:04:39,390
on our platform and I move to containers

00:04:38,310 --> 00:04:41,970
right and we can make this

00:04:39,390 --> 00:04:44,790
early and you can all go home no all

00:04:41,970 --> 00:04:48,180
right so yeah we ultimately decided that

00:04:44,790 --> 00:04:50,100
we should still go server this and one

00:04:48,180 --> 00:04:52,200
of the cool things that it does for us

00:04:50,100 --> 00:04:54,300
is it allows us to replicate our

00:04:52,200 --> 00:04:55,440
services and scale easier as well which

00:04:54,300 --> 00:04:57,480
is one of the things we haven't figured

00:04:55,440 --> 00:05:00,810
out the way we were datapoint ec2 was

00:04:57,480 --> 00:05:02,850
really complicated and prevented us from

00:05:00,810 --> 00:05:04,440
being able to easily do auto scaling and

00:05:02,850 --> 00:05:06,630
manage our deployments and the way we

00:05:04,440 --> 00:05:08,970
were doing deployments it improved our

00:05:06,630 --> 00:05:10,950
capacity a lot in our resiliency because

00:05:08,970 --> 00:05:12,630
hey now we can do auto scaling because

00:05:10,950 --> 00:05:15,270
it cuber neighs actually made that a lot

00:05:12,630 --> 00:05:16,710
easier for us it allowed us to put a lot

00:05:15,270 --> 00:05:18,630
more control in than memory limits

00:05:16,710 --> 00:05:21,810
between our applications because the way

00:05:18,630 --> 00:05:23,610
our infrastructure worked we had two ec2

00:05:21,810 --> 00:05:27,000
instances at all of our applications

00:05:23,610 --> 00:05:28,470
were deployed to in Apache and Apache

00:05:27,000 --> 00:05:30,420
doesn't give you a lot as much

00:05:28,470 --> 00:05:32,010
fine-grained control as we needed across

00:05:30,420 --> 00:05:33,510
our applications and to allow them to

00:05:32,010 --> 00:05:36,300
scale at times when load was higher on

00:05:33,510 --> 00:05:38,580
certain areas of our app and the circuit

00:05:36,300 --> 00:05:40,590
picker pattern within kubernetes is

00:05:38,580 --> 00:05:42,300
pretty powerful to help prevent some of

00:05:40,590 --> 00:05:43,680
the failures that keep happening again

00:05:42,300 --> 00:05:45,260
and again and again and to start

00:05:43,680 --> 00:05:49,890
throttling some of that so we don't

00:05:45,260 --> 00:05:51,900
don't thrash on as much so yes we were

00:05:49,890 --> 00:05:54,420
able to migrate to kubernetes despite

00:05:51,900 --> 00:05:57,330
all the limitations and you can do it

00:05:54,420 --> 00:06:01,140
too and don't think that we were able to

00:05:57,330 --> 00:06:03,420
do it only because we're a small team

00:06:01,140 --> 00:06:05,070
and we can do whatever we want and I run

00:06:03,420 --> 00:06:06,990
the engineering team and decide the

00:06:05,070 --> 00:06:09,450
prioritization no that's not true

00:06:06,990 --> 00:06:11,700
prior to this company I was actually at

00:06:09,450 --> 00:06:13,200
a much larger company and I know at

00:06:11,700 --> 00:06:15,230
least one person in the audience was out

00:06:13,200 --> 00:06:17,970
there with me and they were a big big

00:06:15,230 --> 00:06:20,220
organization and really didn't like to

00:06:17,970 --> 00:06:22,680
make change and we were able to also get

00:06:20,220 --> 00:06:24,570
our application deployed in kubernetes

00:06:22,680 --> 00:06:26,040
out there very different solution than

00:06:24,570 --> 00:06:28,830
what we're going to talk to you about

00:06:26,040 --> 00:06:31,380
today but no matter what the size of the

00:06:28,830 --> 00:06:33,090
organization is you can definitely get

00:06:31,380 --> 00:06:34,980
your applications migrated on to

00:06:33,090 --> 00:06:36,300
kubernetes there's a piecemeal way to do

00:06:34,980 --> 00:06:38,220
it and we're gonna give you some tools

00:06:36,300 --> 00:06:40,380
and methodologies to help you figure out

00:06:38,220 --> 00:06:42,780
how to decompose that and break it down

00:06:40,380 --> 00:06:44,670
and one more thing again just to remind

00:06:42,780 --> 00:06:47,520
you and I think we said this before is

00:06:44,670 --> 00:06:50,070
neither Alan or I are formally trained

00:06:47,520 --> 00:06:51,720
in any infrastop any DevOps work we've

00:06:50,070 --> 00:06:52,889
done has just been because someone had

00:06:51,720 --> 00:06:55,439
to do it

00:06:52,889 --> 00:06:58,590
and yeah we've kind of picked it up on

00:06:55,439 --> 00:07:00,930
the fly and we're using a wek s alright

00:06:58,590 --> 00:07:02,580
sorry AWS ki KS because it does make

00:07:00,930 --> 00:07:06,599
kubernetes a little bit easier for us

00:07:02,580 --> 00:07:09,719
and yeah it's been fun so far you know

00:07:06,599 --> 00:07:12,960
if you're like us you can use a KS goop

00:07:09,719 --> 00:07:15,479
gke or you know many other products so

00:07:12,960 --> 00:07:17,669
with that I know I think I've one more

00:07:15,479 --> 00:07:20,039
slide before I turn it over so let's

00:07:17,669 --> 00:07:21,960
take a deeper look at our our

00:07:20,039 --> 00:07:23,699
application what's there as I said we

00:07:21,960 --> 00:07:25,949
had a whole bunch of services running in

00:07:23,699 --> 00:07:28,110
ec2 containers that were load balanced

00:07:25,949 --> 00:07:29,639
and they all run in Apache so

00:07:28,110 --> 00:07:31,919
unfortunately the number one way to

00:07:29,639 --> 00:07:34,080
bring down our website is this little

00:07:31,919 --> 00:07:35,639
thing that's the second box from the

00:07:34,080 --> 00:07:37,889
left on the bottom there called the

00:07:35,639 --> 00:07:40,139
analytic service and that thing can

00:07:37,889 --> 00:07:42,180
really use a ton of memory and it can

00:07:40,139 --> 00:07:44,340
use it up really fast if a lot of people

00:07:42,180 --> 00:07:46,529
are interested in the same type of data

00:07:44,340 --> 00:07:50,009
and it does on the fly stats

00:07:46,529 --> 00:07:51,509
calculations significant significance

00:07:50,009 --> 00:07:54,029
all sorts of things that are really cool

00:07:51,509 --> 00:07:55,889
and powerful for our customers and our

00:07:54,029 --> 00:07:59,310
differentiators and our product but it

00:07:55,889 --> 00:08:01,589
has a potential of really using a lot of

00:07:59,310 --> 00:08:03,240
resources in our environment and when we

00:08:01,589 --> 00:08:05,190
have a couple shared servers or a bit

00:08:03,240 --> 00:08:08,069
over provisioned and they try to help us

00:08:05,190 --> 00:08:11,430
manage through those times but at times

00:08:08,069 --> 00:08:13,770
we can hit those memory limits so it

00:08:11,430 --> 00:08:15,539
really also became hard to automate an

00:08:13,770 --> 00:08:17,789
auto scaling group when we're in this

00:08:15,539 --> 00:08:19,589
situation because we'd have to bring in

00:08:17,789 --> 00:08:21,089
IBM automate our deployment and

00:08:19,589 --> 00:08:22,919
everything else just in time and that

00:08:21,089 --> 00:08:24,960
really wasn't how we had set up our

00:08:22,919 --> 00:08:28,139
infrastructure we did use terraform to

00:08:24,960 --> 00:08:29,939
build everything a lot of the other

00:08:28,139 --> 00:08:33,419
dependencies are brought into the system

00:08:29,939 --> 00:08:34,769
with chef but our CI system is what's

00:08:33,419 --> 00:08:36,390
pushing all the code out to the

00:08:34,769 --> 00:08:39,899
environment and that's usually done for

00:08:36,390 --> 00:08:41,849
us through circle CI and or some

00:08:39,899 --> 00:08:43,589
automated scripts that get started from

00:08:41,849 --> 00:08:46,050
the shell and then run things out on the

00:08:43,589 --> 00:08:48,269
machines and cause them to pull code but

00:08:46,050 --> 00:08:50,339
with that it makes it hard to auto scale

00:08:48,269 --> 00:08:53,089
and that's one of the benefits of us

00:08:50,339 --> 00:08:55,440
actually publishing images now to docker

00:08:53,089 --> 00:09:00,810
we'll be able to solve some of these

00:08:55,440 --> 00:09:02,970
problems so there's a lot of options for

00:09:00,810 --> 00:09:05,310
us to decide how to start this migration

00:09:02,970 --> 00:09:06,690
and ultimately we decide that the best

00:09:05,310 --> 00:09:08,010
way to go forward with this

00:09:06,690 --> 00:09:10,170
would be to do something small and

00:09:08,010 --> 00:09:13,110
simple let us test the waters make sure

00:09:10,170 --> 00:09:15,570
kubernetes really was for us find

00:09:13,110 --> 00:09:17,130
something that was low risk that if it

00:09:15,570 --> 00:09:18,510
went down because I'd probably go down

00:09:17,130 --> 00:09:20,700
because none of us know what we're doing

00:09:18,510 --> 00:09:24,060
at least that was the assumption we went

00:09:20,700 --> 00:09:25,980
with being humble and figured it might

00:09:24,060 --> 00:09:29,310
go down let's pick a walrus service that

00:09:25,980 --> 00:09:31,620
gets the least amount of use it it

00:09:29,310 --> 00:09:34,710
really allowed us to weigh the pros and

00:09:31,620 --> 00:09:36,330
cons of kubernetes and start to get some

00:09:34,710 --> 00:09:38,670
real learnings that we would hope would

00:09:36,330 --> 00:09:40,800
build momentum later into our project

00:09:38,670 --> 00:09:43,320
that would allow us to move more and

00:09:40,800 --> 00:09:46,350
more services later and feel more

00:09:43,320 --> 00:09:48,480
confident as we went forward and be

00:09:46,350 --> 00:09:50,760
successful because if we failed on this

00:09:48,480 --> 00:09:52,410
very first migration we get a lot of

00:09:50,760 --> 00:09:54,330
pressure from the rest of the company

00:09:52,410 --> 00:09:57,660
small we all sit in one room there's

00:09:54,330 --> 00:10:00,270
like 25 of us not to keep investing in

00:09:57,660 --> 00:10:04,170
this so with that I'm going to turn it

00:10:00,270 --> 00:10:05,610
over to Allen all right cool so I'm

00:10:04,170 --> 00:10:06,960
gonna talk a little in a little bit more

00:10:05,610 --> 00:10:09,600
detail about some of the criteria that

00:10:06,960 --> 00:10:12,630
you might use to decide how to start

00:10:09,600 --> 00:10:13,740
your transition what like you know what

00:10:12,630 --> 00:10:15,510
what approach you should take what

00:10:13,740 --> 00:10:18,480
service or what type of service you

00:10:15,510 --> 00:10:21,030
might want to start with so let's talk a

00:10:18,480 --> 00:10:23,100
little bit about like SOA so kubernetes

00:10:21,030 --> 00:10:25,440
is really going to be helpful to you if

00:10:23,100 --> 00:10:27,510
you have a service-oriented architecture

00:10:25,440 --> 00:10:30,000
now it can be like any degree of micro

00:10:27,510 --> 00:10:32,370
services or you know just individualized

00:10:30,000 --> 00:10:34,980
services but the goal is to have

00:10:32,370 --> 00:10:37,050
something which is more or less loosely

00:10:34,980 --> 00:10:39,570
coupled does not make a whole bunch of

00:10:37,050 --> 00:10:42,000
assumptions about state if you are

00:10:39,570 --> 00:10:44,310
trying to migrate a like a single giant

00:10:42,000 --> 00:10:45,960
monolith app you're probably not going

00:10:44,310 --> 00:10:47,610
to want to start off by trying to

00:10:45,960 --> 00:10:49,890
migrate that into kubernetes you're

00:10:47,610 --> 00:10:51,570
going to run into a whole bunch of

00:10:49,890 --> 00:10:54,210
difficulties because of the complexity

00:10:51,570 --> 00:10:56,880
of the app and you want to also provide

00:10:54,210 --> 00:10:58,320
yourself with an opportunity to really

00:10:56,880 --> 00:11:00,480
kind of take advantage of what

00:10:58,320 --> 00:11:01,710
kubernetes offers and if you're and if

00:11:00,480 --> 00:11:03,660
you're doing that with say like a big

00:11:01,710 --> 00:11:05,220
monolithic service and you're gonna make

00:11:03,660 --> 00:11:06,780
the process difficult and you also might

00:11:05,220 --> 00:11:08,070
just not see that much benefit from it

00:11:06,780 --> 00:11:12,660
cuz it's not gonna be independently

00:11:08,070 --> 00:11:14,700
scalable etc so another thing to talk

00:11:12,660 --> 00:11:18,450
about is especially the first time that

00:11:14,700 --> 00:11:19,890
you start using kubernetes you're going

00:11:18,450 --> 00:11:20,320
to run into a lot of difficulties you

00:11:19,890 --> 00:11:21,970
know you're

00:11:20,320 --> 00:11:23,800
miss certain steps so you didn't realize

00:11:21,970 --> 00:11:25,720
we're necessary you're gonna run into

00:11:23,800 --> 00:11:27,490
issues setting environment variables or

00:11:25,720 --> 00:11:29,920
getting configuration in there there's

00:11:27,490 --> 00:11:32,050
gonna be networks which you can't reach

00:11:29,920 --> 00:11:35,260
because you forgot that you had to setup

00:11:32,050 --> 00:11:37,240
some some kind of route and that's one

00:11:35,260 --> 00:11:39,820
of the reasons why you want to start off

00:11:37,240 --> 00:11:41,620
with a an app which is like the first

00:11:39,820 --> 00:11:43,960
criteria I think that to talk about is

00:11:41,620 --> 00:11:46,630
that the app should be small it should

00:11:43,960 --> 00:11:48,640
have relatively few ways the few things

00:11:46,630 --> 00:11:49,780
that it does it shouldn't be like too

00:11:48,640 --> 00:11:53,050
complicated you should be able to

00:11:49,780 --> 00:11:55,480
understand its operation more or less in

00:11:53,050 --> 00:11:57,460
a vacuum it should be able to you know

00:11:55,480 --> 00:12:00,070
maybe it's a it's an HTTP server that's

00:11:57,460 --> 00:12:03,430
able to make and respond to a few a few

00:12:00,070 --> 00:12:05,200
requests and it's it's behavior is more

00:12:03,430 --> 00:12:07,270
or less easy to digest that's gonna

00:12:05,200 --> 00:12:08,800
allow you to separate like difficulties

00:12:07,270 --> 00:12:10,210
with kubernetes from difficulties with

00:12:08,800 --> 00:12:12,760
the app that you're trying to convert

00:12:10,210 --> 00:12:14,980
over the next thing is that it shouldn't

00:12:12,760 --> 00:12:16,570
be critical like this kind of goes

00:12:14,980 --> 00:12:19,420
without saying but you don't want to try

00:12:16,570 --> 00:12:21,400
and start off by converting your

00:12:19,420 --> 00:12:23,260
authentication service that everything

00:12:21,400 --> 00:12:25,240
that everything talks to you because if

00:12:23,260 --> 00:12:27,010
that goes down then suddenly your entire

00:12:25,240 --> 00:12:29,110
site's inaccessible or you might have

00:12:27,010 --> 00:12:32,020
some other major outage you want to pick

00:12:29,110 --> 00:12:35,770
something which is not going to be the

00:12:32,020 --> 00:12:37,150
linchpin of your of your site the next

00:12:35,770 --> 00:12:39,250
thing is is that it should be stateless

00:12:37,150 --> 00:12:40,360
so stateless doesn't just include like

00:12:39,250 --> 00:12:43,420
whether or not it reads the local

00:12:40,360 --> 00:12:44,800
filesystem or you know something like

00:12:43,420 --> 00:12:46,720
that which is obviously very important

00:12:44,800 --> 00:12:48,550
it also includes like you know does it

00:12:46,720 --> 00:12:50,950
do a lot of database migrations when it

00:12:48,550 --> 00:12:52,840
gets deployed does it need to have a

00:12:50,950 --> 00:12:55,630
certain site up and running before it

00:12:52,840 --> 00:12:57,490
can start up does it is it going to be

00:12:55,630 --> 00:12:59,680
reading off of a queue and potentially

00:12:57,490 --> 00:13:03,010
causing problems if it if its behavior

00:12:59,680 --> 00:13:05,740
is is executing and you don't realize it

00:13:03,010 --> 00:13:08,110
so the if your the the more stateless

00:13:05,740 --> 00:13:10,360
your app is the easier it'll be to go

00:13:08,110 --> 00:13:12,910
through this process and again a simple

00:13:10,360 --> 00:13:16,990
rest server is is a kind of ideal for

00:13:12,910 --> 00:13:18,970
that whoops the next thing is being new

00:13:16,990 --> 00:13:20,560
so this is court of just like an easy

00:13:18,970 --> 00:13:22,120
way to encapsulate some of the other

00:13:20,560 --> 00:13:23,920
criteria it's gonna be small because

00:13:22,120 --> 00:13:26,680
it's new it's gonna be non-critical

00:13:23,920 --> 00:13:28,060
because it doesn't exist yet it's going

00:13:26,680 --> 00:13:29,830
to be stateless because since it's new

00:13:28,060 --> 00:13:32,320
you have the opportunity to make it as

00:13:29,830 --> 00:13:33,939
stateless as possible so if you start

00:13:32,320 --> 00:13:35,619
off with a new app then your

00:13:33,939 --> 00:13:37,539
going to just save yourself a lot of

00:13:35,619 --> 00:13:38,709
headaches but you don't have to like you

00:13:37,539 --> 00:13:40,389
can certainly start off with something

00:13:38,709 --> 00:13:43,239
that already exists it's just a new

00:13:40,389 --> 00:13:45,939
thing is is gonna provide a lot of that

00:13:43,239 --> 00:13:48,189
out of the gate the next thing is just

00:13:45,939 --> 00:13:50,229
having it be representative so you don't

00:13:48,189 --> 00:13:52,569
want to deploy an app which is the very

00:13:50,229 --> 00:13:55,449
first time you're using nodejs and

00:13:52,569 --> 00:13:57,519
you've only done Python so far or deploy

00:13:55,449 --> 00:13:59,349
an app which adopts an entirely new

00:13:57,519 --> 00:14:01,239
paradigm kubernetes gives you that

00:13:59,349 --> 00:14:03,489
ability and that's certainly an end goal

00:14:01,239 --> 00:14:05,079
of using kubernetes is that flexibility

00:14:03,489 --> 00:14:06,759
but in the beginning you want something

00:14:05,079 --> 00:14:09,009
which is gonna pay the path forward for

00:14:06,759 --> 00:14:10,959
other apps so you want it to just not

00:14:09,009 --> 00:14:14,949
differ too much from other apps that

00:14:10,959 --> 00:14:18,009
you're going to follow up with all right

00:14:14,949 --> 00:14:19,329
so one of the big goals that we one of

00:14:18,009 --> 00:14:20,649
the values that we have at knowledge

00:14:19,329 --> 00:14:22,599
town we actually have a whole bunch of

00:14:20,649 --> 00:14:23,829
these flags up in a room but I assumed

00:14:22,599 --> 00:14:26,289
in I'm one of them because it's very

00:14:23,829 --> 00:14:29,470
relevant to what we wanted to do which

00:14:26,289 --> 00:14:32,439
is being team first so when we when you

00:14:29,470 --> 00:14:34,359
are deploying code that is something

00:14:32,439 --> 00:14:36,099
that everybody has to be involved with

00:14:34,359 --> 00:14:38,439
to some degree or another so you want to

00:14:36,099 --> 00:14:40,539
make sure that your developers are happy

00:14:38,439 --> 00:14:41,739
in our case like we are all developers

00:14:40,539 --> 00:14:45,699
and we're all using this at the same

00:14:41,739 --> 00:14:47,829
time and either way if you are if you

00:14:45,699 --> 00:14:50,349
are using this or if you are affected by

00:14:47,829 --> 00:14:52,119
it you want to be you want your life to

00:14:50,349 --> 00:14:55,659
be just minimally disrupted as a

00:14:52,119 --> 00:14:56,559
developer you also want to know how the

00:14:55,659 --> 00:14:58,179
thing works

00:14:56,559 --> 00:15:00,249
you don't necessarily need to be an

00:14:58,179 --> 00:15:01,119
expert but you want to be on top of

00:15:00,249 --> 00:15:03,669
things

00:15:01,119 --> 00:15:05,589
so having scripts is very helpful for

00:15:03,669 --> 00:15:08,139
that you just tell people run these

00:15:05,589 --> 00:15:09,339
scripts and that automates a lot of

00:15:08,139 --> 00:15:12,639
things they don't have to learn a whole

00:15:09,339 --> 00:15:14,559
lot you want to be able to deploy things

00:15:12,639 --> 00:15:16,509
darkly so that you can make sure that

00:15:14,559 --> 00:15:19,749
they're up and running before they start

00:15:16,509 --> 00:15:21,220
to impact other services which might

00:15:19,749 --> 00:15:23,470
cause trouble for the rest of your team

00:15:21,220 --> 00:15:26,049
you want to make sure that you don't

00:15:23,470 --> 00:15:27,609
have a big long-running isolated branch

00:15:26,049 --> 00:15:30,099
which has a ton of development on it

00:15:27,609 --> 00:15:32,319
that nobody really knows about and needs

00:15:30,099 --> 00:15:35,079
to be like could potentially conflict

00:15:32,319 --> 00:15:36,939
with other things or grows to a large

00:15:35,079 --> 00:15:38,649
degree of complexity that only like

00:15:36,939 --> 00:15:40,389
maybe one or two developers are aware of

00:15:38,649 --> 00:15:42,129
how it works and then suddenly it needs

00:15:40,389 --> 00:15:44,409
to be communicated back to everybody and

00:15:42,129 --> 00:15:45,759
there's this giant information dump to

00:15:44,409 --> 00:15:47,830
the extent possible you want to make

00:15:45,759 --> 00:15:49,840
sure that you know merging and rebase

00:15:47,830 --> 00:15:51,340
and both in the get sense and in the

00:15:49,840 --> 00:15:56,470
sense of like the knowledge that you

00:15:51,340 --> 00:15:58,750
gain is is a constant process and some

00:15:56,470 --> 00:16:00,310
of these specific goals that we had with

00:15:58,750 --> 00:16:02,650
the project that we wanted to achieve is

00:16:00,310 --> 00:16:04,870
that we wanted to make it easy to flip

00:16:02,650 --> 00:16:06,790
between versions we wanted to make it so

00:16:04,870 --> 00:16:09,220
that this was actually solving problems

00:16:06,790 --> 00:16:12,220
rather than creating new problems and

00:16:09,220 --> 00:16:16,510
making it so that the the the the dev

00:16:12,220 --> 00:16:18,880
team was all on board with everything so

00:16:16,510 --> 00:16:21,490
I mentioned briefly here documentation

00:16:18,880 --> 00:16:24,070
I'm gonna go into that more specifically

00:16:21,490 --> 00:16:26,020
now so the big thing with documentation

00:16:24,070 --> 00:16:27,880
I think that you can obviously write

00:16:26,020 --> 00:16:29,500
whole books on documentation there is

00:16:27,880 --> 00:16:31,630
there's been great talks on

00:16:29,500 --> 00:16:33,640
documentation so far we had a fairly

00:16:31,630 --> 00:16:34,690
straightforward principle when we when

00:16:33,640 --> 00:16:37,780
we said about how to do our

00:16:34,690 --> 00:16:39,790
documentation and the the main thing was

00:16:37,780 --> 00:16:42,850
there are two types of documentation

00:16:39,790 --> 00:16:44,830
that we wanted one was very low level it

00:16:42,850 --> 00:16:47,500
explained all of the detailed

00:16:44,830 --> 00:16:49,360
step-by-step like here's the decisions

00:16:47,500 --> 00:16:51,370
that we made here's how we are setting

00:16:49,360 --> 00:16:54,340
up our kubernetes cluster here's how you

00:16:51,370 --> 00:16:56,860
configure eks here's how like you know

00:16:54,340 --> 00:16:58,480
networking is going to work so that you

00:16:56,860 --> 00:17:00,210
can you know the whole thing went down

00:16:58,480 --> 00:17:02,320
and needed to be redone from scratch

00:17:00,210 --> 00:17:04,570
another developer could go through this

00:17:02,320 --> 00:17:05,860
document and at least have what what

00:17:04,570 --> 00:17:08,199
they need the bare minimum of what they

00:17:05,860 --> 00:17:09,699
need to to go on but then there's

00:17:08,199 --> 00:17:12,190
another kind of documentation which is

00:17:09,699 --> 00:17:14,290
just kind of Cliff's Notes tile that's

00:17:12,190 --> 00:17:15,040
I'm a developer I want to deploy my code

00:17:14,290 --> 00:17:17,920
how do I do that

00:17:15,040 --> 00:17:19,900
I am like something is wrong in

00:17:17,920 --> 00:17:21,850
production how do I look at logs or how

00:17:19,900 --> 00:17:24,580
do I SSH onto it if that's something

00:17:21,850 --> 00:17:26,110
that you want to support just like quick

00:17:24,580 --> 00:17:27,820
hits that a developer is gonna want to

00:17:26,110 --> 00:17:30,070
know I think that both of these types of

00:17:27,820 --> 00:17:32,950
documentation or are very important

00:17:30,070 --> 00:17:34,570
because they serve different use cases

00:17:32,950 --> 00:17:36,250
and so don't think that there's like

00:17:34,570 --> 00:17:37,750
just one set of documentation that

00:17:36,250 --> 00:17:40,030
you're gonna have that covers everything

00:17:37,750 --> 00:17:41,590
think about like who is reading the

00:17:40,030 --> 00:17:46,810
documentation and what kind of problems

00:17:41,590 --> 00:17:48,070
are they trying to solve with it so I'm

00:17:46,810 --> 00:17:52,270
going to talk a little bit about how we

00:17:48,070 --> 00:17:54,750
develop right now they what we do right

00:17:52,270 --> 00:18:00,010
now is a hybrid between vagrant and

00:17:54,750 --> 00:18:01,630
docker for local development so we used

00:18:00,010 --> 00:18:03,700
to exclusively use vagrant

00:18:01,630 --> 00:18:05,620
and as we introduced the concept of

00:18:03,700 --> 00:18:07,120
containers and and kubernetes into

00:18:05,620 --> 00:18:10,570
production for local development our

00:18:07,120 --> 00:18:12,220
approach was docker compose and there

00:18:10,570 --> 00:18:14,590
are some pitfalls with docker compose

00:18:12,220 --> 00:18:15,430
because it's different than kubernetes

00:18:14,590 --> 00:18:18,690
you have a different set of

00:18:15,430 --> 00:18:20,920
configuration files in our specific case

00:18:18,690 --> 00:18:22,420
the amount of configuration that we

00:18:20,920 --> 00:18:25,060
needed for kubernetes was not

00:18:22,420 --> 00:18:26,440
particularly complicated we basically

00:18:25,060 --> 00:18:29,830
just needed to set some environment

00:18:26,440 --> 00:18:32,200
variables and maybe a few other things

00:18:29,830 --> 00:18:34,240
and accomplishing that in docker compose

00:18:32,200 --> 00:18:36,040
was not particularly difficult so you

00:18:34,240 --> 00:18:37,780
might actually find that this approach

00:18:36,040 --> 00:18:40,900
works for you okay

00:18:37,780 --> 00:18:44,320
but of course your mileage may vary

00:18:40,900 --> 00:18:45,970
the just a few other notes we have each

00:18:44,320 --> 00:18:47,440
of our services run in different repos

00:18:45,970 --> 00:18:49,720
which means that we need to sort of

00:18:47,440 --> 00:18:51,790
split configuration across like the app

00:18:49,720 --> 00:18:53,500
specific configuration which lives in

00:18:51,790 --> 00:18:56,200
its repo and a sort of general

00:18:53,500 --> 00:18:59,380
configuration which lives in our DevOps

00:18:56,200 --> 00:19:01,120
repo each developer is responsible for

00:18:59,380 --> 00:19:03,070
starting up and tearing down services

00:19:01,120 --> 00:19:05,260
manually so that's that applies to your

00:19:03,070 --> 00:19:08,260
virtual machine as well as to docker

00:19:05,260 --> 00:19:10,500
compose so we that there are solutions

00:19:08,260 --> 00:19:13,590
where you run your service in a cloud

00:19:10,500 --> 00:19:16,030
you know you can even have a miniature

00:19:13,590 --> 00:19:19,780
kubernetes or you can run mini cube on

00:19:16,030 --> 00:19:21,430
on this on a host or on your local

00:19:19,780 --> 00:19:23,410
workstation there's all these different

00:19:21,430 --> 00:19:24,820
approaches but we went with something

00:19:23,410 --> 00:19:26,770
which was very straightforward which is

00:19:24,820 --> 00:19:28,450
that a developer types in a command to

00:19:26,770 --> 00:19:31,990
start up their docker containers types

00:19:28,450 --> 00:19:33,880
doctor compose essentially and they are

00:19:31,990 --> 00:19:35,530
responsible for running all of that so

00:19:33,880 --> 00:19:38,560
we didn't want to over automate because

00:19:35,530 --> 00:19:44,080
the developers can can take care of a

00:19:38,560 --> 00:19:46,090
lot of that themselves ok so if we look

00:19:44,080 --> 00:19:49,390
at the two different sort of approaches

00:19:46,090 --> 00:19:54,100
here on the Left you have you have a

00:19:49,390 --> 00:19:56,860
Tesla Tesla dashboard right it is super

00:19:54,100 --> 00:19:59,830
super minimal there is a steering wheel

00:19:56,860 --> 00:20:00,430
and a touchscreen and some pedals and

00:19:59,830 --> 00:20:03,280
that's about it

00:20:00,430 --> 00:20:05,410
and on the right you have a jet cockpit

00:20:03,280 --> 00:20:08,680
which has a million switches and dials

00:20:05,410 --> 00:20:10,390
and knobs and they all like do very

00:20:08,680 --> 00:20:12,670
important things but if you're not

00:20:10,390 --> 00:20:14,770
trained in this then you're going to

00:20:12,670 --> 00:20:15,490
have no idea what you're doing

00:20:14,770 --> 00:20:18,670
so kuben

00:20:15,490 --> 00:20:20,559
is kind of the same way it can be it can

00:20:18,670 --> 00:20:23,770
be very very daunting it can look a lot

00:20:20,559 --> 00:20:26,230
like the cockpit on the right but as a

00:20:23,770 --> 00:20:27,700
developer what's most useful to you is

00:20:26,230 --> 00:20:29,950
to have something like that on the left

00:20:27,700 --> 00:20:31,420
like you can already kind of figure out

00:20:29,950 --> 00:20:33,670
how to use it even if you don't

00:20:31,420 --> 00:20:35,290
necessarily know all the complexity

00:20:33,670 --> 00:20:36,870
that's hiding behind that touchscreen or

00:20:35,290 --> 00:20:40,110
under the hood of that car

00:20:36,870 --> 00:20:43,840
so what we wanted to do is provide

00:20:40,110 --> 00:20:45,550
enough knowledge and tooling to the

00:20:43,840 --> 00:20:48,040
developer to be able to accomplish what

00:20:45,550 --> 00:20:50,620
they what they need to know how to do

00:20:48,040 --> 00:20:54,340
and provide a simple interface to do

00:20:50,620 --> 00:20:56,559
that without necessarily going into like

00:20:54,340 --> 00:20:59,110
every single possible use case of

00:20:56,559 --> 00:21:01,059
kubernetes and all the different things

00:20:59,110 --> 00:21:03,670
that we could potentially do we want to

00:21:01,059 --> 00:21:06,309
just try to stay simple and stay with

00:21:03,670 --> 00:21:11,860
specific goals I want to be able to do X

00:21:06,309 --> 00:21:14,280
how do I do X all right so I'm going to

00:21:11,860 --> 00:21:16,809
talk a little bit about DevOps scripts

00:21:14,280 --> 00:21:19,929
another thing that you could have you

00:21:16,809 --> 00:21:22,480
know a whole conference on probably but

00:21:19,929 --> 00:21:25,150
what extent do you do scripting how do

00:21:22,480 --> 00:21:29,590
you approach it and what are some of the

00:21:25,150 --> 00:21:31,330
kind of pitfalls so I think that scripts

00:21:29,590 --> 00:21:33,880
should be as simple as possible as a

00:21:31,330 --> 00:21:35,679
general rule like when you are scripting

00:21:33,880 --> 00:21:37,570
something for your organization you're

00:21:35,679 --> 00:21:40,800
not building up a general purpose

00:21:37,570 --> 00:21:45,640
product to be you know made into

00:21:40,800 --> 00:21:47,950
open-source software or to a tool that

00:21:45,640 --> 00:21:49,960
you want to sell to people maybe you are

00:21:47,950 --> 00:21:52,000
in which case that's fine more power to

00:21:49,960 --> 00:21:53,650
you but you probably aren't you probably

00:21:52,000 --> 00:21:57,130
are going to benefit more from having a

00:21:53,650 --> 00:21:59,020
small script with a simple interface the

00:21:57,130 --> 00:22:01,690
the goals of the script should be pretty

00:21:59,020 --> 00:22:04,330
clear like we have a deploy script which

00:22:01,690 --> 00:22:07,270
executes the steps required to deploy

00:22:04,330 --> 00:22:09,700
something we have a pod script which

00:22:07,270 --> 00:22:12,550
basically executes like how do I SSH

00:22:09,700 --> 00:22:14,110
onto something when and then some things

00:22:12,550 --> 00:22:16,240
we didn't actually write ourselves so

00:22:14,110 --> 00:22:19,630
cube tail for example is a fantastic

00:22:16,240 --> 00:22:21,220
tool that somebody else wrote all we had

00:22:19,630 --> 00:22:25,030
to do was say like hey there's this cool

00:22:21,220 --> 00:22:26,559
tool you can go and use it so the the

00:22:25,030 --> 00:22:28,030
most common things that you that a

00:22:26,559 --> 00:22:29,200
developer is gonna do you want to have

00:22:28,030 --> 00:22:30,610
scripts around but

00:22:29,200 --> 00:22:35,260
you don't need to be scripts that you

00:22:30,610 --> 00:22:37,480
wrote yourself so the the most important

00:22:35,260 --> 00:22:39,340
thing with a script is to if there's a

00:22:37,480 --> 00:22:41,140
sequence of operations that is

00:22:39,340 --> 00:22:43,510
complicated and needs to be done right

00:22:41,140 --> 00:22:46,450
you want to have those things scripted

00:22:43,510 --> 00:22:48,250
out but if it gets too complicated then

00:22:46,450 --> 00:22:51,340
suddenly it becomes really really hard

00:22:48,250 --> 00:22:53,680
to manage so like I'm sure that a lot of

00:22:51,340 --> 00:22:57,700
people have seen something like this

00:22:53,680 --> 00:22:59,530
where you have this like big script that

00:22:57,700 --> 00:23:01,570
is very very complicated and nobody

00:22:59,530 --> 00:23:02,980
really knows how it works and every once

00:23:01,570 --> 00:23:04,990
in a while somebody adds some new

00:23:02,980 --> 00:23:07,390
feature to it and it just gets really

00:23:04,990 --> 00:23:09,610
complicated and when it when it breaks

00:23:07,390 --> 00:23:11,710
like you know you have no idea why this

00:23:09,610 --> 00:23:13,690
thing happened because it's doing so

00:23:11,710 --> 00:23:15,670
many different things and it's trying to

00:23:13,690 --> 00:23:18,730
do everything and it just kind of fails

00:23:15,670 --> 00:23:20,440
so the one cly to rule them all kind of

00:23:18,730 --> 00:23:22,270
thing I think is a very dangerous

00:23:20,440 --> 00:23:23,740
pattern it's really easy to do because I

00:23:22,270 --> 00:23:25,630
was like oh I've already got this like

00:23:23,740 --> 00:23:27,340
cly I'm just gonna add some more things

00:23:25,630 --> 00:23:29,770
to it because I realized I want to be

00:23:27,340 --> 00:23:31,180
able to like you know scrape the logs

00:23:29,770 --> 00:23:34,690
off of something so I'll just add that

00:23:31,180 --> 00:23:36,370
to my Clyde and it's it's just getting

00:23:34,690 --> 00:23:39,340
really really complicated and it's

00:23:36,370 --> 00:23:41,260
behavior is difficult to predict and

00:23:39,340 --> 00:23:44,650
also nobody wants to work on it because

00:23:41,260 --> 00:23:48,160
it's so big and so complicated and when

00:23:44,650 --> 00:23:51,520
it fails it's a giant mess so if we're

00:23:48,160 --> 00:23:53,350
not around we have like basically our

00:23:51,520 --> 00:23:54,760
average script size we have a directory

00:23:53,350 --> 00:23:57,670
full of these things our average script

00:23:54,760 --> 00:24:00,250
size is 47 lines long including comments

00:23:57,670 --> 00:24:02,020
in white space that's of course a

00:24:00,250 --> 00:24:03,160
completely arbitrary in a lot of ways it

00:24:02,020 --> 00:24:05,380
depends on the language that you're

00:24:03,160 --> 00:24:07,270
using the we primarily use Python and

00:24:05,380 --> 00:24:09,040
bash for this but you just want to keep

00:24:07,270 --> 00:24:10,510
things relatively straightforward so if

00:24:09,040 --> 00:24:12,310
somebody can open it see what it's doing

00:24:10,510 --> 00:24:15,060
and if it doesn't work for them they

00:24:12,310 --> 00:24:18,070
might be able to fix it like momentarily

00:24:15,060 --> 00:24:20,530
and then as I mentioned before don't

00:24:18,070 --> 00:24:22,780
like invent everything so if you make a

00:24:20,530 --> 00:24:24,370
command like tail my service and all it

00:24:22,780 --> 00:24:26,470
does is call in the cube tail on my

00:24:24,370 --> 00:24:28,540
service well now you've created a new

00:24:26,470 --> 00:24:30,190
command that people have to know when

00:24:28,540 --> 00:24:32,020
instead they could just use this awesome

00:24:30,190 --> 00:24:34,270
tool which already exists that you don't

00:24:32,020 --> 00:24:36,070
have to write yourself and you don't

00:24:34,270 --> 00:24:37,870
have to provide an opinionated way on

00:24:36,070 --> 00:24:40,270
how to use it you can just say like hey

00:24:37,870 --> 00:24:42,010
there's some documentation out there go

00:24:40,270 --> 00:24:42,759
and look at how you might use that and

00:24:42,010 --> 00:24:44,109
provide that

00:24:42,759 --> 00:24:50,399
guidance rather than providing the

00:24:44,109 --> 00:24:53,859
tooling okay so another comparison here

00:24:50,399 --> 00:24:57,699
telephone systems have evolved a whole

00:24:53,859 --> 00:24:59,919
lot over the years on the left you have

00:24:57,699 --> 00:25:00,820
a switchboard and on the right you have

00:24:59,919 --> 00:25:03,099
a cell phone

00:25:00,820 --> 00:25:06,459
they both do basically the same thing

00:25:03,099 --> 00:25:08,199
though for a for somebody who wants to

00:25:06,459 --> 00:25:10,209
make a call you pick up your phone you

00:25:08,199 --> 00:25:11,979
call a number it doesn't really matter

00:25:10,209 --> 00:25:14,579
how the nuts and bolts work under the

00:25:11,979 --> 00:25:16,989
hood you just want to be able to talk to

00:25:14,579 --> 00:25:20,259
the other person on the other end now

00:25:16,989 --> 00:25:23,049
apps are the same in a lot of ways you

00:25:20,259 --> 00:25:25,719
are going to your ear app is going to be

00:25:23,049 --> 00:25:29,019
a lot simpler than the less assumptions

00:25:25,719 --> 00:25:31,059
it needs to make about how how its

00:25:29,019 --> 00:25:32,739
communication works this is especially

00:25:31,059 --> 00:25:34,690
important when you're doing something

00:25:32,739 --> 00:25:36,819
like transitioning to kubernetes because

00:25:34,690 --> 00:25:38,889
the way that your apps are talking to

00:25:36,819 --> 00:25:42,639
each other is going to impact how easy

00:25:38,889 --> 00:25:44,139
this transition is so for example if you

00:25:42,639 --> 00:25:47,349
can do all of your applications

00:25:44,139 --> 00:25:50,559
communication over just HTTP that goes

00:25:47,349 --> 00:25:52,809
through DNS if you change the DNS entry

00:25:50,559 --> 00:25:55,089
that people are that your service is

00:25:52,809 --> 00:25:58,509
talking to you suddenly deployed a new

00:25:55,089 --> 00:26:00,009
service and it can be that simple so the

00:25:58,509 --> 00:26:02,619
more that you can make your application

00:26:00,009 --> 00:26:05,829
agnostic the easier it's going to be to

00:26:02,619 --> 00:26:07,539
facilitate a transition like this and

00:26:05,829 --> 00:26:09,339
again that's one of the reasons why I

00:26:07,539 --> 00:26:11,559
was talking about restful services

00:26:09,339 --> 00:26:14,559
because they are just really good at

00:26:11,559 --> 00:26:17,699
maintaining a sort of zero state very

00:26:14,559 --> 00:26:20,259
abstract interface for communication and

00:26:17,699 --> 00:26:22,779
that's that the decision to go that

00:26:20,259 --> 00:26:25,329
route made it so that our process of

00:26:22,779 --> 00:26:28,419
switching over was a whole lot easier

00:26:25,329 --> 00:26:30,639
we basically spun up a DNS cluster spun

00:26:28,419 --> 00:26:32,199
up a kubernetes cluster we when we were

00:26:30,639 --> 00:26:34,209
when we were confident that it worked

00:26:32,199 --> 00:26:36,489
the way that we thought we changed our

00:26:34,209 --> 00:26:38,349
we use terraform to create a new DNS

00:26:36,489 --> 00:26:40,269
entry that routed traffic from the old

00:26:38,349 --> 00:26:41,769
address to the new one and now all the

00:26:40,269 --> 00:26:45,099
sudden the new apps are receiving

00:26:41,769 --> 00:26:47,229
traffic and it's all very you know it's

00:26:45,099 --> 00:26:50,199
not that there weren't problems but it

00:26:47,229 --> 00:26:52,929
certainly made things a lot easier

00:26:50,199 --> 00:26:56,060
so there's a few gotchas with this that

00:26:52,929 --> 00:26:59,600
are worth mentioning one is

00:26:56,060 --> 00:27:01,700
DNS caching so if your apps you're using

00:26:59,600 --> 00:27:03,710
DNS to communicate and they have a stale

00:27:01,700 --> 00:27:06,920
address then there might be a period of

00:27:03,710 --> 00:27:09,380
time in which you send traffic to the

00:27:06,920 --> 00:27:13,250
wrong address so be aware of what the

00:27:09,380 --> 00:27:15,350
the TTL is on your on your DNS and just

00:27:13,250 --> 00:27:18,430
you know another another approach that

00:27:15,350 --> 00:27:21,770
you can do to solve that is by making a

00:27:18,430 --> 00:27:22,580
route on the machine that they used to

00:27:21,770 --> 00:27:24,770
be talked to

00:27:22,580 --> 00:27:26,060
which proxies traffic to the new service

00:27:24,770 --> 00:27:27,500
and this is actually one of the things

00:27:26,060 --> 00:27:30,260
that we did as just sort of a fail-safe

00:27:27,500 --> 00:27:31,640
is that we have a whole bunch of virtual

00:27:30,260 --> 00:27:33,950
host files that look like this and

00:27:31,640 --> 00:27:36,800
basically all they do is say I'm gonna

00:27:33,950 --> 00:27:39,200
listen on port 1 2 3 4 any traffic I

00:27:36,800 --> 00:27:40,970
receive is going to proxy 2 in this case

00:27:39,200 --> 00:27:43,070
the local host because if you ever use

00:27:40,970 --> 00:27:44,660
VMware that IP address points back to

00:27:43,070 --> 00:27:47,330
the local host and it's going to go to

00:27:44,660 --> 00:27:49,070
local host and then the port that my

00:27:47,330 --> 00:27:50,690
docker container is listening on and we

00:27:49,070 --> 00:27:53,810
have similar things in production and

00:27:50,690 --> 00:27:56,510
and other environments where if if we

00:27:53,810 --> 00:27:58,490
didn't if we didn't catch something then

00:27:56,510 --> 00:27:59,930
this will catch it and if the traffic is

00:27:58,490 --> 00:28:01,760
being sent to the wrong place then it

00:27:59,930 --> 00:28:04,070
will get forwarded through so this

00:28:01,760 --> 00:28:05,600
something as simple as a tiny little

00:28:04,070 --> 00:28:08,900
virtual host like this can can really

00:28:05,600 --> 00:28:13,070
save you and I recommend looking into

00:28:08,900 --> 00:28:15,490
that alright so I'm gonna hand it back

00:28:13,070 --> 00:28:21,530
to Nick now and he's gonna talk about

00:28:15,490 --> 00:28:23,840
what's next yeah so as Alan talked about

00:28:21,530 --> 00:28:25,490
we got that low risk service migrated

00:28:23,840 --> 00:28:27,560
over into kubernetes and that was really

00:28:25,490 --> 00:28:28,160
awesome the whole team felt excited

00:28:27,560 --> 00:28:30,350
about it

00:28:28,160 --> 00:28:32,990
the service was this low risk service

00:28:30,350 --> 00:28:34,610
that manages the ability to connect

00:28:32,990 --> 00:28:36,950
other media and stuff it's not even

00:28:34,610 --> 00:28:38,180
hosts sooner and are in our own platform

00:28:36,950 --> 00:28:40,070
so it's really this third-party

00:28:38,180 --> 00:28:42,350
interconnection service it was really

00:28:40,070 --> 00:28:44,210
low risk if it went down for a while and

00:28:42,350 --> 00:28:46,220
no one would I care but hey we were out

00:28:44,210 --> 00:28:48,920
there now it's successful and we had a

00:28:46,220 --> 00:28:51,590
cup or two along the way but cool it

00:28:48,920 --> 00:28:53,300
works so the whole team's happy and now

00:28:51,590 --> 00:28:55,220
they're all like so what are we gonna do

00:28:53,300 --> 00:28:57,710
the rest we gotta get everything in Akoo

00:28:55,220 --> 00:28:59,660
burn Eddie's now and the same problem

00:28:57,710 --> 00:29:01,760
comes up of oh yeah we can't just stop

00:28:59,660 --> 00:29:03,020
all the work we're doing and migrate

00:29:01,760 --> 00:29:04,820
everything we'll have to find time

00:29:03,020 --> 00:29:07,420
between projects out to migrate the rest

00:29:04,820 --> 00:29:09,650
of this stuff but we started looking at

00:29:07,420 --> 00:29:09,980
well we did something easy now what's

00:29:09,650 --> 00:29:13,220
and

00:29:09,980 --> 00:29:15,410
horton to migrate over and you know I

00:29:13,220 --> 00:29:17,390
mentioned earlier that ya Murphy's Law

00:29:15,410 --> 00:29:18,770
we can ignore that right because the

00:29:17,390 --> 00:29:19,730
person who crashed our website they

00:29:18,770 --> 00:29:21,679
can't do that again

00:29:19,730 --> 00:29:23,840
well yeah they probably could so that

00:29:21,679 --> 00:29:26,630
was our logical next step this analytic

00:29:23,840 --> 00:29:30,049
service that was seen in Apache still

00:29:26,630 --> 00:29:32,600
and our application gateway also seen in

00:29:30,049 --> 00:29:34,730
Apache on the same instances and the

00:29:32,600 --> 00:29:36,260
same you see two nodes meant that it was

00:29:34,730 --> 00:29:38,510
still possible for someone pretty easily

00:29:36,260 --> 00:29:40,160
to mistakenly bring down our whole or

00:29:38,510 --> 00:29:41,960
bring down a whole ec2 instance and

00:29:40,160 --> 00:29:43,790
obviously once they did that maybe like

00:29:41,960 --> 00:29:45,590
now my webpage won't reload hit refresh

00:29:43,790 --> 00:29:47,210
a bunch of times and then they'd bring

00:29:45,590 --> 00:29:49,040
that down the rest of them before the

00:29:47,210 --> 00:29:51,020
first one would come back which is

00:29:49,040 --> 00:29:52,910
something we didn't like so we wanted to

00:29:51,020 --> 00:29:54,679
remove the ability of users to do that

00:29:52,910 --> 00:29:56,630
and we decided that we'd start moving

00:29:54,679 --> 00:29:57,919
that high-risk service that had the

00:29:56,630 --> 00:30:01,910
ability to crash the rest of our

00:29:57,919 --> 00:30:03,620
infrastructure into eks and we did that

00:30:01,910 --> 00:30:05,500
it went really smooth because we learned

00:30:03,620 --> 00:30:08,419
a lot from the first time we did it and

00:30:05,500 --> 00:30:10,669
we started to build more momentum after

00:30:08,419 --> 00:30:12,559
we did that team was like okay cool that

00:30:10,669 --> 00:30:14,419
service actually has a lot of state it

00:30:12,559 --> 00:30:16,640
connects to some of the more complicated

00:30:14,419 --> 00:30:18,710
resources it uses a lot of memory if

00:30:16,640 --> 00:30:19,940
that thing can run in kubernetes we

00:30:18,710 --> 00:30:22,370
should be able to get everything in

00:30:19,940 --> 00:30:23,990
Decorah days some of the benefits that

00:30:22,370 --> 00:30:28,070
we did by getting nothing in there as

00:30:23,990 --> 00:30:29,330
well is now we have four pods running on

00:30:28,070 --> 00:30:31,760
this thing before we only had two

00:30:29,330 --> 00:30:33,919
instances of it the pods recover a lot

00:30:31,760 --> 00:30:36,770
faster than a whole ec2 instance does

00:30:33,919 --> 00:30:38,660
and because we have more instances of

00:30:36,770 --> 00:30:41,150
the service when someone runs a really

00:30:38,660 --> 00:30:43,280
big query or two or three or four of our

00:30:41,150 --> 00:30:44,960
users or hundreds of our users do it all

00:30:43,280 --> 00:30:47,360
at the same time that load gets spread

00:30:44,960 --> 00:30:48,890
between more machines the memories a lot

00:30:47,360 --> 00:30:50,450
more managed and we can set higher

00:30:48,890 --> 00:30:52,580
limits on it and not have to worry about

00:30:50,450 --> 00:30:55,600
it bringing down the entire shared

00:30:52,580 --> 00:30:57,919
Apache instance because that's gone and

00:30:55,600 --> 00:30:59,750
when someone does crash it like I said

00:30:57,919 --> 00:31:01,130
it comes back quicker we have more

00:30:59,750 --> 00:31:03,980
instances it's a lot less likely to

00:31:01,130 --> 00:31:05,780
happen so that's really cool then our

00:31:03,980 --> 00:31:07,910
authentication service was another thing

00:31:05,780 --> 00:31:09,890
that shared those same problems so you

00:31:07,910 --> 00:31:11,750
know that's a single point of service

00:31:09,890 --> 00:31:14,240
every service basically in our platform

00:31:11,750 --> 00:31:17,240
uses that so we migrated that over there

00:31:14,240 --> 00:31:19,580
now to one of the things that I probably

00:31:17,240 --> 00:31:20,659
forgot to mention or I realize I did

00:31:19,580 --> 00:31:22,980
forget to mention when I went through

00:31:20,659 --> 00:31:25,799
our slides earlier was

00:31:22,980 --> 00:31:28,679
our world in the ec2 instances all the

00:31:25,799 --> 00:31:31,830
services talk to each other kind of

00:31:28,679 --> 00:31:32,789
directly after they are I'm sorry they

00:31:31,830 --> 00:31:34,230
talk to each other through the

00:31:32,789 --> 00:31:35,970
application gateway which was really

00:31:34,230 --> 00:31:37,710
inefficient and was something we were

00:31:35,970 --> 00:31:39,570
looking to resolve and because of the

00:31:37,710 --> 00:31:42,750
load balancer and eks it made us a lot

00:31:39,570 --> 00:31:45,149
easier for us to have the services just

00:31:42,750 --> 00:31:46,320
talk through eks to each other and not

00:31:45,149 --> 00:31:47,820
have to keep her lied on that

00:31:46,320 --> 00:31:51,510
application gateway as we move them over

00:31:47,820 --> 00:31:52,769
so what we were able to do is you'll see

00:31:51,510 --> 00:31:54,720
like there's a search service in that

00:31:52,769 --> 00:31:56,220
diagram that thing if it has to talk to

00:31:54,720 --> 00:31:58,139
anything in eks will still go through

00:31:56,220 --> 00:31:59,880
the application gateway which will do

00:31:58,139 --> 00:32:02,370
the communication with eks and route all

00:31:59,880 --> 00:32:04,710
the services and because we did that we

00:32:02,370 --> 00:32:06,330
didn't have to retouch or rework any of

00:32:04,710 --> 00:32:08,760
the services that were already deployed

00:32:06,330 --> 00:32:11,399
and our ec2 instances and have to worry

00:32:08,760 --> 00:32:13,529
about a plan to modify things and touch

00:32:11,399 --> 00:32:15,389
multiple locations as we migrated a

00:32:13,529 --> 00:32:17,309
single service and that allowed us to

00:32:15,389 --> 00:32:18,750
really minimize the risk and minimize

00:32:17,309 --> 00:32:21,090
the impacts other parts of our

00:32:18,750 --> 00:32:22,860
application as things migrated over

00:32:21,090 --> 00:32:25,980
which was really pretty cool and that

00:32:22,860 --> 00:32:28,200
was a another part of why we host have

00:32:25,980 --> 00:32:30,059
those virtual hosts and that are running

00:32:28,200 --> 00:32:33,630
there to help make sure the traffic gets

00:32:30,059 --> 00:32:35,940
migrated it doesn't use a DNS entry I

00:32:33,630 --> 00:32:40,139
think if anything else so I cover on the

00:32:35,940 --> 00:32:40,679
side they don't so what do we have to do

00:32:40,139 --> 00:32:42,630
next

00:32:40,679 --> 00:32:44,610
our whole infrastructure isn't in

00:32:42,630 --> 00:32:47,070
kubernetes yet we're still working on

00:32:44,610 --> 00:32:50,730
that probably the highest priority for

00:32:47,070 --> 00:32:53,100
me is to get the application gateway out

00:32:50,730 --> 00:32:55,110
of the ec2 container that's our last

00:32:53,100 --> 00:32:57,750
single point of failure that exists in

00:32:55,110 --> 00:32:59,639
ec2 and once we do that it'll also

00:32:57,750 --> 00:33:01,320
greatly simplify our networking and the

00:32:59,639 --> 00:33:02,730
communication across our applications

00:33:01,320 --> 00:33:04,889
because there's technically a second

00:33:02,730 --> 00:33:06,480
internal hop that happens over that work

00:33:04,889 --> 00:33:08,010
that we'll be able to get back you know

00:33:06,480 --> 00:33:13,320
a little bit of time from on every

00:33:08,010 --> 00:33:15,360
request and that'll be really cool and I

00:33:13,320 --> 00:33:20,909
think with that I'm passing it back to

00:33:15,360 --> 00:33:23,190
Alan okay cool so just gonna kind of

00:33:20,909 --> 00:33:25,200
talk about a few of the I mean there's a

00:33:23,190 --> 00:33:28,980
whole bunch of topics within kubernetes

00:33:25,200 --> 00:33:30,389
and within that there's a whole bunch

00:33:28,980 --> 00:33:32,519
that you could talk about specifically

00:33:30,389 --> 00:33:34,769
as regards you resource usage and

00:33:32,519 --> 00:33:36,650
stability but I'm just going to give a

00:33:34,769 --> 00:33:38,510
few quick hits of what we had

00:33:36,650 --> 00:33:41,570
one of the big problems that we are

00:33:38,510 --> 00:33:43,760
trying to solve with with kubernetes as

00:33:41,570 --> 00:33:45,530
Nick talked about earlier was that we

00:33:43,760 --> 00:33:47,630
had these memory spikes where the

00:33:45,530 --> 00:33:50,270
application would get really large in

00:33:47,630 --> 00:33:52,550
terms of resource usage and other

00:33:50,270 --> 00:33:54,320
applications did not do that and we

00:33:52,550 --> 00:33:56,840
wanted to be able to manage like on a

00:33:54,320 --> 00:33:58,309
per application basis what is the

00:33:56,840 --> 00:34:00,350
expected use of memory what's the

00:33:58,309 --> 00:34:02,390
minimum memory what's the maximum memory

00:34:00,350 --> 00:34:04,400
that we should expect to use and and

00:34:02,390 --> 00:34:06,530
obviously kubernetes that's a big win

00:34:04,400 --> 00:34:08,270
with kubernetes is that you can set why

00:34:06,530 --> 00:34:10,580
they're called requests meaning what the

00:34:08,270 --> 00:34:13,520
app needs at a minimum and limits

00:34:10,580 --> 00:34:15,169
meaning the the most the most resources

00:34:13,520 --> 00:34:19,370
that an app is allowed to consume before

00:34:15,169 --> 00:34:21,020
it gets killed and one what i recommend

00:34:19,370 --> 00:34:23,450
with that is that you don't need to be

00:34:21,020 --> 00:34:26,990
exact in your initial measurements you

00:34:23,450 --> 00:34:29,929
should start from some kind of metrics

00:34:26,990 --> 00:34:32,300
collection that you've you've used over

00:34:29,929 --> 00:34:34,490
time like didn't get a sense of what the

00:34:32,300 --> 00:34:38,800
maximum is that your application has

00:34:34,490 --> 00:34:41,389
ever used under normal or allowed loads

00:34:38,800 --> 00:34:43,940
get a get a sense of what its resting

00:34:41,389 --> 00:34:45,530
rate is and then just kind of be be a

00:34:43,940 --> 00:34:47,629
little bit conservative and fuzzy with

00:34:45,530 --> 00:34:50,060
that and pick numbers that are just that

00:34:47,629 --> 00:34:52,520
just kind of makes sense with that and

00:34:50,060 --> 00:34:53,990
then make sure that you have a once it's

00:34:52,520 --> 00:34:56,990
once it's deployed make sure that you

00:34:53,990 --> 00:34:58,640
have monitoring on those metrics so you

00:34:56,990 --> 00:35:03,200
can just see does it fall within what I

00:34:58,640 --> 00:35:05,330
expect is this still the the or do these

00:35:03,200 --> 00:35:07,250
numbers still make sense with a new

00:35:05,330 --> 00:35:08,900
deployment model you know could be that

00:35:07,250 --> 00:35:11,270
the the instance you're running it on or

00:35:08,900 --> 00:35:13,640
the the load balancing that kubernetes

00:35:11,270 --> 00:35:16,610
offers or some other thing changes those

00:35:13,640 --> 00:35:18,230
so you just want to be aware that things

00:35:16,610 --> 00:35:20,930
might be different either better or

00:35:18,230 --> 00:35:23,900
worse than you expected and just be able

00:35:20,930 --> 00:35:25,970
to respond to those but in our

00:35:23,900 --> 00:35:28,280
experience so far we haven't found that

00:35:25,970 --> 00:35:30,380
there's been a huge amount of tuning

00:35:28,280 --> 00:35:32,270
required on these you can kind of just

00:35:30,380 --> 00:35:34,070
set some initial defaults and it'll

00:35:32,270 --> 00:35:38,330
probably work for you or at least it did

00:35:34,070 --> 00:35:40,250
for us but certainly just use the use

00:35:38,330 --> 00:35:43,700
the past behavior of your app as a guide

00:35:40,250 --> 00:35:45,290
there so one of the things that

00:35:43,700 --> 00:35:47,780
kubernetes makes really easy is

00:35:45,290 --> 00:35:50,750
replication you can just say I want to

00:35:47,780 --> 00:35:54,740
run this many replicas of this service

00:35:50,750 --> 00:35:56,990
you can have it scale easily just make

00:35:54,740 --> 00:35:59,150
sure that you use that like a lot of

00:35:56,990 --> 00:36:00,680
times the at least if you're if you're

00:35:59,150 --> 00:36:02,270
coming from the deployment model that we

00:36:00,680 --> 00:36:05,750
had like we pretty much only ran one

00:36:02,270 --> 00:36:07,520
copy of things per instance and we rely

00:36:05,750 --> 00:36:09,650
on Apache to scale those out and all

00:36:07,520 --> 00:36:12,650
that but once they become containers

00:36:09,650 --> 00:36:14,120
they're like full units that where you

00:36:12,650 --> 00:36:17,030
can you can replicate the actual

00:36:14,120 --> 00:36:19,610
container itself in kubernetes and get a

00:36:17,030 --> 00:36:21,470
lot of redundancy that way and you can

00:36:19,610 --> 00:36:24,620
get some really low hanging fruit wins

00:36:21,470 --> 00:36:27,710
of making your app more more resistant

00:36:24,620 --> 00:36:29,180
to failure so it's a very general advice

00:36:27,710 --> 00:36:32,600
but I would just say make sure that you

00:36:29,180 --> 00:36:34,970
use it so as just an example of what we

00:36:32,600 --> 00:36:38,210
kind of have in our in our starting

00:36:34,970 --> 00:36:40,820
point kubernetes config is that we we

00:36:38,210 --> 00:36:43,100
have a two instance eks cluster at this

00:36:40,820 --> 00:36:44,750
point so we have two ec2 s that the that

00:36:43,100 --> 00:36:47,150
the pods are spread across that will

00:36:44,750 --> 00:36:48,890
probably grow in the future well we

00:36:47,150 --> 00:36:50,690
start off with is four replicas per

00:36:48,890 --> 00:36:54,470
deployment so that would be two per

00:36:50,690 --> 00:36:55,880
instance and when we do an update we

00:36:54,470 --> 00:36:57,620
specify that it's a rolling update

00:36:55,880 --> 00:37:00,320
meaning that it will sort of teardown

00:36:57,620 --> 00:37:02,000
one add a new one in teardown another

00:37:00,320 --> 00:37:05,270
one add a new one in so that you always

00:37:02,000 --> 00:37:08,240
have listeners on it and we say that we

00:37:05,270 --> 00:37:10,580
give it that it can have a maximum of

00:37:08,240 --> 00:37:12,680
50% unavailable which means that you'll

00:37:10,580 --> 00:37:15,110
have always at least two pods up and

00:37:12,680 --> 00:37:17,330
running at any given point in time so

00:37:15,110 --> 00:37:19,670
barring like you know some crazy

00:37:17,330 --> 00:37:21,680
stampeding herd of elephants hitting our

00:37:19,670 --> 00:37:23,000
servers we can be pretty confident that

00:37:21,680 --> 00:37:26,240
things are going to stay up and running

00:37:23,000 --> 00:37:27,890
and that's one of the big reasons why we

00:37:26,240 --> 00:37:31,130
wanted to go with kubernetes and it's

00:37:27,890 --> 00:37:33,740
worked out well for us so if if that's

00:37:31,130 --> 00:37:35,420
something that that you're experiencing

00:37:33,740 --> 00:37:37,880
then I'd recommend just making sure that

00:37:35,420 --> 00:37:40,240
you use as many replicas as makes sense

00:37:37,880 --> 00:37:41,900
because they're cheaper than you think

00:37:40,240 --> 00:37:44,420
so

00:37:41,900 --> 00:37:49,550
one one note I want to talk about CI CD

00:37:44,420 --> 00:37:51,920
so this is another giant topic but CI CD

00:37:49,550 --> 00:37:54,350
is going to be very important in how

00:37:51,920 --> 00:37:56,960
your deployment process works

00:37:54,350 --> 00:37:59,990
there's like whether you're on circle CI

00:37:56,960 --> 00:38:02,150
Jenkins or whatever you can have this

00:37:59,990 --> 00:38:03,290
managed or your how you build your

00:38:02,150 --> 00:38:04,610
containers how you deploy your

00:38:03,290 --> 00:38:06,950
containers

00:38:04,610 --> 00:38:09,680
you can have a completely automated

00:38:06,950 --> 00:38:13,090
system that is entirely in Jenkins or

00:38:09,680 --> 00:38:15,440
circle CI or whatever or you can have

00:38:13,090 --> 00:38:18,410
individual commands that developers run

00:38:15,440 --> 00:38:21,470
on their workstations there's advantages

00:38:18,410 --> 00:38:22,640
and disadvantages to each one when

00:38:21,470 --> 00:38:24,050
you're developing and when you're

00:38:22,640 --> 00:38:25,970
playing around with this at in the

00:38:24,050 --> 00:38:28,460
beginning it's trying to set it up all

00:38:25,970 --> 00:38:31,070
through docker or through through circle

00:38:28,460 --> 00:38:34,940
or Jenkins or Travis or whatever might

00:38:31,070 --> 00:38:36,680
be a giant pain and it's you there's

00:38:34,940 --> 00:38:38,510
gonna be a lot of things that you don't

00:38:36,680 --> 00:38:40,130
realize when you're initially setting

00:38:38,510 --> 00:38:42,050
these things up that are probably just

00:38:40,130 --> 00:38:45,440
gonna be easier to handle when you are

00:38:42,050 --> 00:38:46,490
working on your locally and going back

00:38:45,440 --> 00:38:47,240
to the scripts that we were talking

00:38:46,490 --> 00:38:49,970
about before

00:38:47,240 --> 00:38:51,860
if those scripts that you develop as you

00:38:49,970 --> 00:38:53,960
are figuring out how to do kubernetes

00:38:51,860 --> 00:38:56,990
for your team if those scripts are

00:38:53,960 --> 00:38:58,730
general enough and provide the correct

00:38:56,990 --> 00:39:01,550
tooling then it should be fairly

00:38:58,730 --> 00:39:05,090
straightforward to port those over to

00:39:01,550 --> 00:39:06,740
run in in your CI system so I would say

00:39:05,090 --> 00:39:08,750
don't think that from the get-go you

00:39:06,740 --> 00:39:11,990
need to do everything through CI but it

00:39:08,750 --> 00:39:13,550
absolutely is like the it's it's the the

00:39:11,990 --> 00:39:16,310
goal that you should be approaching in

00:39:13,550 --> 00:39:19,900
in our opinion because it allows you to

00:39:16,310 --> 00:39:23,690
lock down the process and to have a

00:39:19,900 --> 00:39:27,290
series of and have a reproducible

00:39:23,690 --> 00:39:29,470
environment for builds to occur in so

00:39:27,290 --> 00:39:31,730
just be aware of the trade-offs there

00:39:29,470 --> 00:39:33,320
certainly setting up the actual docker

00:39:31,730 --> 00:39:36,350
infrastructure can be a challenge like

00:39:33,320 --> 00:39:38,570
how do I get that you know a docker to

00:39:36,350 --> 00:39:41,900
run in such a way that I can set up all

00:39:38,570 --> 00:39:44,600
my secrets and have like do be able to

00:39:41,900 --> 00:39:46,820
execute all the commands I need do I

00:39:44,600 --> 00:39:48,500
have to set up an account in AWS or

00:39:46,820 --> 00:39:50,990
whatever that that's locked down that

00:39:48,500 --> 00:39:54,170
can run these things it introduces a

00:39:50,990 --> 00:39:55,250
whole lot of potential difficulties

00:39:54,170 --> 00:39:57,170
which is one of the reasons I would

00:39:55,250 --> 00:39:59,360
maybe suggest in the beginning that you

00:39:57,170 --> 00:40:02,360
don't worry about it but certainly it's

00:39:59,360 --> 00:40:08,090
it's where that you should be aiming to

00:40:02,360 --> 00:40:10,460
go as an organization let's see so I

00:40:08,090 --> 00:40:13,270
guess I'm gonna pass it back to Nick to

00:40:10,460 --> 00:40:17,960
talk about our sort of future work and

00:40:13,270 --> 00:40:19,880
what we've learned so far yeah so for us

00:40:17,960 --> 00:40:21,319
we're aiming to get to a victory point

00:40:19,880 --> 00:40:24,470
which would be everything's in

00:40:21,319 --> 00:40:26,809
kubernetes and we kill off the at least

00:40:24,470 --> 00:40:29,059
for our application services that are or

00:40:26,809 --> 00:40:31,730
the code we wrote we kill off all of our

00:40:29,059 --> 00:40:33,410
ec2 instances obviously we could do

00:40:31,730 --> 00:40:35,690
things with like elasticsearch there's a

00:40:33,410 --> 00:40:36,890
weird reason why we can't use a host of

00:40:35,690 --> 00:40:39,050
elastics

00:40:36,890 --> 00:40:40,490
solution for that and we can migrate

00:40:39,050 --> 00:40:42,500
things like that to cover days as well

00:40:40,490 --> 00:40:46,130
but I don't want to talk about that as

00:40:42,500 --> 00:40:48,099
much today but are really the goal is to

00:40:46,130 --> 00:40:50,480
get all those services migrate into

00:40:48,099 --> 00:40:52,579
jakku Bernays and keep using that

00:40:50,480 --> 00:40:54,650
momentum we've built up with the past

00:40:52,579 --> 00:40:56,780
migrations we've done to roll that stuff

00:40:54,650 --> 00:40:58,790
forward and as I said you know we're a

00:40:56,780 --> 00:41:00,890
small team there's just a few of us and

00:40:58,790 --> 00:41:03,380
we're gonna do it you know probably one

00:41:00,890 --> 00:41:05,630
a month hopefully and that's gonna be

00:41:03,380 --> 00:41:07,970
the pace we move at yeah it's a lot

00:41:05,630 --> 00:41:09,650
longer timeframe than all of us on the

00:41:07,970 --> 00:41:11,780
team would want to move in but it's a

00:41:09,650 --> 00:41:13,220
time frame where we can absorb it we are

00:41:11,780 --> 00:41:14,780
continuing to ship our product

00:41:13,220 --> 00:41:16,609
continuing to innovate and bring value

00:41:14,780 --> 00:41:18,260
to our customers and at the same time

00:41:16,609 --> 00:41:20,569
we're bringing value to the dev team

00:41:18,260 --> 00:41:23,150
that's gonna save us time in the future

00:41:20,569 --> 00:41:24,980
both on operational support and our

00:41:23,150 --> 00:41:27,829
ability to move a little faster as we

00:41:24,980 --> 00:41:30,319
code and make changes and unlock other

00:41:27,829 --> 00:41:32,270
problems we've had for instance if we

00:41:30,319 --> 00:41:35,809
want to upgrade our version of Python on

00:41:32,270 --> 00:41:37,490
our on our ec2 instance that's a little

00:41:35,809 --> 00:41:39,859
challenging whenever it's a shared

00:41:37,490 --> 00:41:41,059
machine so being able to manage our

00:41:39,859 --> 00:41:42,859
dependencies a little bit more

00:41:41,059 --> 00:41:45,230
separately and make changes that are a

00:41:42,859 --> 00:41:47,089
little bit bigger and more more

00:41:45,230 --> 00:41:49,130
important and more strategic to our

00:41:47,089 --> 00:41:50,960
individual applications is really going

00:41:49,130 --> 00:41:52,790
to be nice for us because today we're

00:41:50,960 --> 00:41:54,319
often slowed down by well we'd like to

00:41:52,790 --> 00:41:57,920
do this but it's gonna break this other

00:41:54,319 --> 00:42:01,040
application and alright we don't really

00:41:57,920 --> 00:42:02,900
care to touch that right now so it'll

00:42:01,040 --> 00:42:04,220
really provide a lot of value as more

00:42:02,900 --> 00:42:06,140
things migrate over and who knows maybe

00:42:04,220 --> 00:42:08,000
we'll leave a couple things in ec2 for

00:42:06,140 --> 00:42:09,740
awhile and shrink the Machine sizes down

00:42:08,000 --> 00:42:11,720
even further and just not care about

00:42:09,740 --> 00:42:14,420
them because they work and if they do

00:42:11,720 --> 00:42:16,250
break we won't care but ideally it will

00:42:14,420 --> 00:42:17,930
be nice to unify and I think it's as

00:42:16,250 --> 00:42:20,270
much as we can we should try to unify

00:42:17,930 --> 00:42:22,549
our infrastructures and our technologies

00:42:20,270 --> 00:42:24,589
tool sets and minimize the number of

00:42:22,549 --> 00:42:26,240
unique things we have because it it

00:42:24,589 --> 00:42:27,500
really shrinks down what our teams you

00:42:26,240 --> 00:42:29,540
know what we need to be familiar with

00:42:27,500 --> 00:42:30,480
earlier in the talk for instance I

00:42:29,540 --> 00:42:33,750
mentioned we have

00:42:30,480 --> 00:42:35,490
mm PHP and you know we're also trying to

00:42:33,750 --> 00:42:37,050
eliminate that from our sec and almost

00:42:35,490 --> 00:42:40,770
all that's gone there's only one more

00:42:37,050 --> 00:42:42,630
thing really left to to resolve so that

00:42:40,770 --> 00:42:43,920
whole mentality of reducing the

00:42:42,630 --> 00:42:46,200
footprint that's out there and making

00:42:43,920 --> 00:42:48,690
less tools for us to support is really

00:42:46,200 --> 00:42:50,460
important and there's a couple things we

00:42:48,690 --> 00:42:52,260
didn't discuss here today one of the

00:42:50,460 --> 00:42:54,930
things that's really important that we

00:42:52,260 --> 00:42:57,210
get discusses database migrations we're

00:42:54,930 --> 00:42:58,619
lucky that we use Django and Django has

00:42:57,210 --> 00:43:01,050
some powerful tools that allow us to

00:42:58,619 --> 00:43:03,920
automate our database of migration so we

00:43:01,050 --> 00:43:06,359
were doing them and we do spin up a

00:43:03,920 --> 00:43:08,640
ephemeral pod that will run the

00:43:06,359 --> 00:43:10,530
migration in just a one time job as the

00:43:08,640 --> 00:43:12,240
deployment happens and that's really

00:43:10,530 --> 00:43:14,579
powerful unfortunately there wasn't

00:43:12,240 --> 00:43:15,650
enough time to go into that hosted

00:43:14,579 --> 00:43:18,359
databases

00:43:15,650 --> 00:43:21,300
you know we're using RDS right now

00:43:18,359 --> 00:43:23,010
because it makes it easy if we want to

00:43:21,300 --> 00:43:24,450
move our elasticsearch into the

00:43:23,010 --> 00:43:26,160
kubernetes cluster there's a lot of

00:43:24,450 --> 00:43:27,960
additional challenges there because it

00:43:26,160 --> 00:43:29,970
does have persistent storage and the way

00:43:27,960 --> 00:43:32,099
our kubernetes infrastructure step right

00:43:29,970 --> 00:43:34,440
now is everything's ephemeral and if it

00:43:32,099 --> 00:43:36,000
goes away we don't really care but when

00:43:34,440 --> 00:43:37,410
you start to move a database into

00:43:36,000 --> 00:43:39,150
kubernetes it's a lot more complicated

00:43:37,410 --> 00:43:40,500
because you have to think about all

00:43:39,150 --> 00:43:42,450
right I'm going to be using some sort of

00:43:40,500 --> 00:43:43,859
block storage and how is that going to

00:43:42,450 --> 00:43:45,930
be managed what's the latency going to

00:43:43,859 --> 00:43:47,640
be there's gonna be some potential

00:43:45,930 --> 00:43:49,530
performance implications to that and

00:43:47,640 --> 00:43:51,810
then configuration management is a

00:43:49,530 --> 00:43:54,450
really complicated topic we didn't get

00:43:51,810 --> 00:43:55,800
into and you know one thing within that

00:43:54,450 --> 00:43:57,510
that maybe we've heard at some of the

00:43:55,800 --> 00:44:00,750
talks today is just thinking about the

00:43:57,510 --> 00:44:02,339
consequences of terraform and security

00:44:00,750 --> 00:44:03,780
and how everything gets written out to

00:44:02,339 --> 00:44:05,339
the logs and you don't want to

00:44:03,780 --> 00:44:07,740
accidentally make any security mistakes

00:44:05,339 --> 00:44:09,359
there so you know we kind of glanced

00:44:07,740 --> 00:44:11,579
over that at the talk we saw that at the

00:44:09,359 --> 00:44:13,410
beginning but just be sure to read some

00:44:11,579 --> 00:44:15,990
best practices as you go and make sure

00:44:13,410 --> 00:44:19,410
that you're following following them as

00:44:15,990 --> 00:44:21,540
best you can so thanks again for

00:44:19,410 --> 00:44:24,000
listening to us in our story about how

00:44:21,540 --> 00:44:25,170
we migrated knowledge hounds or began

00:44:24,000 --> 00:44:29,190
migrating knowledge hounds of a

00:44:25,170 --> 00:44:31,200
structure from ec2 into kubernetes it's

00:44:29,190 --> 00:44:33,000
really helped us deliver a more stable

00:44:31,200 --> 00:44:35,940
software as a service platform for our

00:44:33,000 --> 00:44:38,190
clients and help them you know get the

00:44:35,940 --> 00:44:40,349
experience they want from us we are

00:44:38,190 --> 00:44:41,790
cloud first organization all we're lucky

00:44:40,349 --> 00:44:43,559
because we don't have any on Prem

00:44:41,790 --> 00:44:46,439
infrastructure everything is in

00:44:43,559 --> 00:44:49,199
cloud it's all in AWS for the most part

00:44:46,439 --> 00:44:51,390
and you know we've been able to continue

00:44:49,199 --> 00:44:54,089
to build tools that help our clients

00:44:51,390 --> 00:44:55,559
automate their work and it's really also

00:44:54,089 --> 00:44:58,229
going to do a lot for us in the future

00:44:55,559 --> 00:44:59,759
to being kubernetes now it's gonna

00:44:58,229 --> 00:45:01,259
reduce some of the pain points for us

00:44:59,759 --> 00:45:03,959
this may have new infrastructure again

00:45:01,259 --> 00:45:06,150
we don't have a DevOps team so it wasn't

00:45:03,959 --> 00:45:08,249
possible or it was very hard for us to

00:45:06,150 --> 00:45:11,219
figure out terraform spin up new ec2

00:45:08,249 --> 00:45:15,539
instances to do other things so we want

00:45:11,219 --> 00:45:17,400
to make a spark cluster and you know AWS

00:45:15,539 --> 00:45:18,719
yeah you can do that and we'd have to

00:45:17,400 --> 00:45:20,549
learn a whole bunch of new tooling but

00:45:18,719 --> 00:45:21,930
now there's a lot of recipes and whatnot

00:45:20,549 --> 00:45:23,519
available for us to reuse within

00:45:21,930 --> 00:45:25,739
kubernetes so it's gonna help us as we

00:45:23,519 --> 00:45:29,130
start doing more ml driven search

00:45:25,739 --> 00:45:31,799
automation it's gonna help us as we do

00:45:29,130 --> 00:45:32,880
more data ops automation and as we start

00:45:31,799 --> 00:45:34,859
to try to do some really cool things

00:45:32,880 --> 00:45:38,099
with data like build normative models

00:45:34,859 --> 00:45:39,869
across survey research so that's what

00:45:38,099 --> 00:45:42,630
we're after that's why we undertook

00:45:39,869 --> 00:45:44,309
kubernetes it was more than just its

00:45:42,630 --> 00:45:46,109
cool and we really think it's gonna

00:45:44,309 --> 00:45:48,570
unlock doors for awesome it gives us new

00:45:46,109 --> 00:45:53,209
tools Thanks

00:45:48,570 --> 00:45:53,209
[Applause]

00:46:00,120 --> 00:46:02,180

YouTube URL: https://www.youtube.com/watch?v=sJds82t6Xzk


