Title: DevOpsDays Chicago 2019 - Michael Stahnke - Ignite: Devops Behavioral Economics: Displayed...
Publication date: 2019-09-09
Playlist: DevOpsDays Chicago 2019
Description: 
	Michael Stahnke - Devops Behavioral Economics: Displayed behavior as compared to reported behavior

What can you learn about devops and software delivery practices by looking at data from a platform with more than 300,000 developers, 25,000 organizations and 25+ million builds per month? As I recently joined CircleCI, I was interested in this new data set from a large SaaS developer platform and the kinds of questions that it could answer: What trends and patterns pop out from the data? Are they different than what is seen through surveys where responders opt-in to participating as compared to being aggregated through platform usage?

I wanted to use this data set in a behavioral economics methodology to see what reported behaviors are when compared actual behaviors across a large data set. In this talk, I’ll cover a view into anonymized team data from millions of builds to share insights, behaviors, and metrics that help teams build better software faster, and look into characteristics of success that we can measure through data. Finally, I’ll cover what we can infer from team behavior, callout a few tools, start a language war, and provide take-aways for you to benchmark with your own software delivery teams.
Captions: 
	00:00:13,309 --> 00:00:19,630
Michael Stahnke - Devops Behavioral Economics: Displayed behavior as compared to reported

00:00:19,630 --> 00:00:21,140
behavior Coming up next: DevOps behavioral economics

00:00:21,140 --> 00:00:23,310
displayed behavior as compared to reported behavior, by Michael Stahnke.

00:00:23,310 --> 00:00:26,590
>>Michael Stahnke: I'm Michael Stahnke, I used to talk about organizational something

00:00:26,590 --> 00:00:33,190
or other because I'm in leadership, but I find humans more interesting, I like bigdata

00:00:33,190 --> 00:00:34,510
and I cannot lie.

00:00:34,510 --> 00:00:39,570
I was at circle CI and the reason I changed jobs to here is there's a new data set and

00:00:39,570 --> 00:00:42,510
I could not cover what people are doing.

00:00:42,510 --> 00:00:45,840
1.5 million jobs a day and 10s of thousands of orgs.

00:00:45,840 --> 00:00:52,979
The hard-hitting stats, the average repository name is 17.6 characters.

00:00:52,979 --> 00:01:01,260
The most common project name is API. .01 percent of branches have swear words in them.

00:01:01,260 --> 00:01:06,260
So we are in Chicago, and one of my favorite things about Chicago is the school of economics

00:01:06,260 --> 00:01:14,630
at the university of Chicago, I'm a huge freakonomics fan, you have a Nobel-prize winning economist

00:01:14,630 --> 00:01:21,689
there, so I have worked on DevOps surveys before, that's what people say they do, and

00:01:21,689 --> 00:01:24,409
I have big data that tells people what they are actually doing.

00:01:24,409 --> 00:01:29,969
I can say observe versus report preference, you are liars when you fill out surveys, I

00:01:29,969 --> 00:01:32,890
knew it and I had to prove it.

00:01:32,890 --> 00:01:33,890
How to map these things?

00:01:33,890 --> 00:01:43,020
I wanted to map four metrics from surveys to what circle CI has as a construct, we have

00:01:43,020 --> 00:01:46,670
federation, deployment pretty, and frequency, how long are we running these?

00:01:46,670 --> 00:01:50,579
So we will get into this, fastest recovery time, one second.

00:01:50,579 --> 00:01:52,460
How do you recover that?

00:01:52,460 --> 00:01:55,070
One worked, one didn't.

00:01:55,070 --> 00:02:00,399
Worst recovery, 30 days, you shipped, fuck it, you don't care.

00:02:00,399 --> 00:02:03,429
And mean is 17 hours.

00:02:03,429 --> 00:02:10,679
That is basically -- this is broken, looks hard, I'm going home and will look at it tomorrow.

00:02:10,679 --> 00:02:13,130
That's what the average person does with their build!

00:02:13,130 --> 00:02:18,560
And you might say, that doesn't sound like the things I hear in the DevOps continuous

00:02:18,560 --> 00:02:19,560
delivery books.

00:02:19,560 --> 00:02:21,430
If they are red, that's what you do it.

00:02:21,430 --> 00:02:28,340
They are cherry picking, they are asking for the primary application or service you are

00:02:28,340 --> 00:02:33,000
on, maybe you are good at that and not everything else, but I see it all.

00:02:33,000 --> 00:02:38,470
We will talk about the lead time here, how long do the builds take and how long to ship

00:02:38,470 --> 00:02:39,470
it out?

00:02:39,470 --> 00:02:41,990
The 95th percentile is 28 minutes.

00:02:41,990 --> 00:02:50,099
For some places, that is amazing to get through validation and testing and shipping, for other

00:02:50,099 --> 00:02:52,510
places, you are crying.

00:02:52,510 --> 00:02:54,599
It depends on what you are doing.

00:02:54,599 --> 00:02:55,680
Some people take 3.3 days.

00:02:55,680 --> 00:02:57,340
Don't do it, it is bad.

00:02:57,340 --> 00:03:03,810
And then you can also see how often are these projects running.

00:03:03,810 --> 00:03:07,439
And the hand-drawn charts I did, some of them are too dirty when I drew them.

00:03:07,439 --> 00:03:10,890
I had to put up real slides, it is terrible.

00:03:10,890 --> 00:03:14,840
They build once or twice a day, or 2,000 times a day.

00:03:14,840 --> 00:03:15,840
What is that?

00:03:15,840 --> 00:03:16,840
Monitoring.

00:03:16,840 --> 00:03:18,560
We will not build systems anymore at that point.

00:03:18,560 --> 00:03:20,829
It is interesting to to think about.

00:03:20,829 --> 00:03:22,500
How often are people running?

00:03:22,500 --> 00:03:34,500
We have 85 per day per org, a lot of orgs doing a lot of builds, and then on master,

00:03:34,500 --> 00:03:35,620
they doing a little bit different.

00:03:35,620 --> 00:03:39,280
A little bit different numbers, because most of the time you are doing topic branches,

00:03:39,280 --> 00:03:43,100
pull requests, and testing before main line, or whatever.

00:03:43,100 --> 00:03:48,709
And the thing that I found interesting is somebody is running 2,443 builds a day, that

00:03:48,709 --> 00:03:50,659
is a little weird.

00:03:50,659 --> 00:03:54,319
Overall in the global data set, these are different samples and times, usually about

00:03:54,319 --> 00:03:56,720
a week, different times, to verify things.

00:03:56,720 --> 00:04:01,050
And 20 percent overall is roughly the failure rate for the jobs of the circle CI.

00:04:01,050 --> 00:04:02,260
I don't think that is crazy.

00:04:02,260 --> 00:04:08,510
It is higher for topic branches, lower for master, you get approvals, the is interesting

00:04:08,510 --> 00:04:09,579
to me.

00:04:09,579 --> 00:04:12,290
The 50th percentile happened in minutes.

00:04:12,290 --> 00:04:15,409
I would not have guessed it was that fast.

00:04:15,409 --> 00:04:21,141
The failure rate is 3 percent on a job with manual approval, versus 20 percent of the

00:04:21,141 --> 00:04:22,210
manual sample set.

00:04:22,210 --> 00:04:29,440
If you have a manual approval, it takes 28 minutes versus 3 minutes on others.

00:04:29,440 --> 00:04:32,940
Some have one minute, I don't know what that is but they do.

00:04:32,940 --> 00:04:37,650
And this chart says you should be writing everything in PHP.

00:04:37,650 --> 00:04:42,460
[ Laughter ]. Because it is lower on error rates and failure

00:04:42,460 --> 00:04:48,060
rates, and it could be because they exit zero and don't do tests faster, I don't know.

00:04:48,060 --> 00:04:54,710
The other thing it tells you, for the users, if you square it, you get the branches in

00:04:54,710 --> 00:04:59,710
play, which is interesting and that Ruby people collaborate more.

00:04:59,710 --> 00:05:03,900
And anyway, basically I wanted to talk about data sets.

00:05:03,900 --> 00:05:09,199
I have 5 minutes, I wanted to pitch an open space for a DevOps metrics and measurements,

00:05:09,199 --> 00:05:12,530
and since they are up next, I will stick this on the board somewhere.

00:05:12,530 --> 00:05:19,830
Thanks for having me.

00:05:19,830 --> 00:05:26,409

YouTube URL: https://www.youtube.com/watch?v=emEAPGlluII


