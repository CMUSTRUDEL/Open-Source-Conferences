Title: DevOpsDays Chicago 2019 - Heidi Waterhouse - All The World’s A Staging Server
Publication date: 2019-09-09
Playlist: DevOpsDays Chicago 2019
Description: 
	Heidi Waterhouse - All The World’s A Staging Server

I have sad news - staging is a lie and will never be identical to production, because production is unknowable. Trying to replicate it is often prohibitively expensive.

But I also have good news - production can contain multitudes, including features you aren’t ready to turn on or activate yet. You can hide in the dark and do integration testing at the same time.

It’s simplistic to say that you should just kill the idea of a staging server and do everything in production. There are obviously problems with that - you need to do unit testing, you need to avoid things that will take down a service, you may need to do essential cutovers. But it’s worth examining what benefit you’re getting from staging and whether you could re-allocate that effort.

Join me for an exploration of the ways that you might be able to kill staging and perform better.

What is the actual value of a staging environment?
What are some questions to ask about why we have staging?
How can I re-engineer releases to save costs?
Captions: 
	00:00:13,429 --> 00:00:14,429
Heidi Waterhouse - All The World’s A Staging Server

00:00:14,429 --> 00:00:15,429
>>Heidi Waterhouse: Morning!

00:00:15,429 --> 00:00:16,429
Are we having fun yet?

00:00:16,429 --> 00:00:17,429
[ Applause ]. Yes, I'm not going to talk to you about ethics,

00:00:17,429 --> 00:00:18,429
I will talk to you about technology, and wherever I put my dongle that I had three seconds ago.

00:00:18,429 --> 00:00:19,429
This is the problem about being efficient.

00:00:19,429 --> 00:00:20,429
I will talk to you about fun things I get to do with scaring people, because pretty

00:00:20,429 --> 00:00:24,140
much all of my talks are things that I'm angry about, or things that I want to frighten you

00:00:24,140 --> 00:00:30,500
about, if you drill down deep enough.

00:00:30,500 --> 00:00:37,530
So this one is called All the World's A Staging Server.

00:00:37,530 --> 00:00:41,570
There are four elements of software that move in relation to each other.

00:00:41,570 --> 00:00:44,800
If you transform one, you need to pull the others with it.

00:00:44,800 --> 00:00:48,160
Because halfway is bullshit.

00:00:48,160 --> 00:00:52,460
And doing only part of this transformation is not going to work out for you.

00:00:52,460 --> 00:00:54,720
So I think of this as the post-agile world.

00:00:54,720 --> 00:00:58,790
I'm moving toward calling it the blended software environment.

00:00:58,790 --> 00:01:05,219
About 2/3 of all the software that we're using that we call our product is not something

00:01:05,219 --> 00:01:06,719
that we built.

00:01:06,719 --> 00:01:09,850
It is something that we integrated, it is something that we rolled in, something we

00:01:09,850 --> 00:01:13,040
consume, and that's fine.

00:01:13,040 --> 00:01:17,610
But we need to think about the fact that we are not only designing as if it were true.

00:01:17,610 --> 00:01:22,580
The four elements, or pillars, that I'm talking about are development style.

00:01:22,580 --> 00:01:24,890
What is the definition?

00:01:24,890 --> 00:01:35,220
This is Waterfall, agile, how do you know what you are supposed to write and what it

00:01:35,220 --> 00:01:36,220
means?

00:01:36,220 --> 00:01:39,100
Given that, how do you store your code?

00:01:39,100 --> 00:01:45,119
Who here has started in technology since the year 2000?

00:01:45,119 --> 00:01:46,119
Yeah.

00:01:46,119 --> 00:01:48,509
Who here has started since 2010?

00:01:48,509 --> 00:01:52,220
Ah, I love this audience.

00:01:52,220 --> 00:01:55,790
Crusty, like me.

00:01:55,790 --> 00:02:02,079
Who here has used source control that isn't Git-based, right?

00:02:02,079 --> 00:02:04,640
You remember this, we used to have to, like, lock things.

00:02:04,640 --> 00:02:10,429
You check something out, it is yours forever, if you are hit by a bus, we have to try to

00:02:10,429 --> 00:02:11,599
pick your log, terrible.

00:02:11,599 --> 00:02:13,530
So source control.

00:02:13,530 --> 00:02:18,019
Testing, what is testing?

00:02:18,019 --> 00:02:24,489
What do we do testing for, what is it meant for, besides not yelling at us?

00:02:24,489 --> 00:02:32,439
And deployment, how do you get your magnificent opus from your computer, to the user, and

00:02:32,439 --> 00:02:34,299
what steps does that entail?

00:02:34,299 --> 00:02:39,650
If you do one of those without the others, you have an unstable base.

00:02:39,650 --> 00:02:48,180
You can do water fall and SaaS, but it does not work super well.

00:02:48,180 --> 00:02:56,879
When I think about this, I think of a project called Wintergaten, complex moving mechanisms

00:02:56,879 --> 00:03:03,620
and gears that drop ball bearings on other things.

00:03:03,620 --> 00:03:11,609
And it doesn't work in isolation, you can't test, like, any single part of it, it has

00:03:11,609 --> 00:03:12,689
to work together.

00:03:12,689 --> 00:03:18,279
Sure, you can do something with -- does the screw lift work, but you don't know if that

00:03:18,279 --> 00:03:22,249
is going to make music until you put it all together.

00:03:22,249 --> 00:03:25,809
So this is one of four talks in this series.

00:03:25,809 --> 00:03:31,510
The first one is called tinker toys and microservices, and I depress everyone by telling them they

00:03:31,510 --> 00:03:34,090
are testing wrong.

00:03:34,090 --> 00:03:39,709
Full testing isn't possible, anyone who tells you they have full test coverage is probably

00:03:39,709 --> 00:03:45,719
lying, or spending so much money that you cannot keep up with them.

00:03:45,719 --> 00:03:52,529
You need to be able to decouple of your understanding of what is going on.

00:03:52,529 --> 00:03:57,499
We call this microservice architecture, it is really about loose coupling.

00:03:57,499 --> 00:04:02,089
So the accelerate state of DevOps report dropped on Thursday.

00:04:02,089 --> 00:04:04,809
Who read it?

00:04:04,809 --> 00:04:06,450
Get on it, people.

00:04:06,450 --> 00:04:10,199
Nicole and her team, full of brilliance.

00:04:10,199 --> 00:04:12,680
Accelerate is a book you should have read.

00:04:12,680 --> 00:04:20,170
This report is a million percent, like, hey, when we wrote this book, we were right.

00:04:20,170 --> 00:04:22,430
We are moving this direction.

00:04:22,430 --> 00:04:26,490
It is about loose coupling and moving faster.

00:04:26,490 --> 00:04:32,909
And then the last thing, for toys and microservices, because you cannot test everything, you need

00:04:32,909 --> 00:04:38,770
to test end points and behavior-driven development, and what the user experiences.

00:04:38,770 --> 00:04:45,449
Because, like Charity Major said, nines don't matter if your users aren't happy.

00:04:45,449 --> 00:04:47,470
They don't.

00:04:47,470 --> 00:04:52,050
And so what we need to be testing is what our users experience, and not what we think

00:04:52,050 --> 00:04:54,650
ought to happen.

00:04:54,650 --> 00:05:01,830
The next is every star a story, this has to do with my trauma of cutting myself with a

00:05:01,830 --> 00:05:02,949
plastic knife.

00:05:02,949 --> 00:05:05,849
It is about source control.

00:05:05,849 --> 00:05:13,310
I think that, after 20 years of get, we are coming to the end of the effective usefulness.

00:05:13,310 --> 00:05:17,969
Not immediately, but I will set of your world on fire a little bit.

00:05:17,969 --> 00:05:23,020
If we are going to keep using Git, it needs to be a million times better about how we

00:05:23,020 --> 00:05:28,939
ingest dependencies, we do not understand them.

00:05:28,939 --> 00:05:34,979
And we have dependencies put in, we have a bunch of hacks that work, until a vendor or

00:05:34,979 --> 00:05:41,539
provider or partner puts something crappy in, we release it, and we don't know it is

00:05:41,539 --> 00:05:43,970
not in our source control.

00:05:43,970 --> 00:05:45,419
Yeah?

00:05:45,419 --> 00:05:48,330
You've had that moment.

00:05:48,330 --> 00:05:51,659
Branching is a habit, and not a mandate.

00:05:51,659 --> 00:05:56,610
What is the first thing you do when you are going to write some code?

00:05:56,610 --> 00:05:59,789
You, no.

00:05:59,789 --> 00:06:03,159
The first thing most people do, and the people we have been teaching people to do things

00:06:03,159 --> 00:06:06,180
for 20 years is to create a branch.

00:06:06,180 --> 00:06:11,210
And when we do that, we're saying, here's something that's going to live outside of

00:06:11,210 --> 00:06:14,270
the run of code until I'm ready to commit it.

00:06:14,270 --> 00:06:18,949
By living outside that run of code, we've hidden it and made it impossible for other

00:06:18,949 --> 00:06:22,229
people to see it and affect it.

00:06:22,229 --> 00:06:27,419
And every time we pull a branch off, the longer it lives, the worse it is, we're saying, I

00:06:27,419 --> 00:06:31,530
commit to having a merge conflict in the future.

00:06:31,530 --> 00:06:36,139
This is what a branch is, it is a promise to have a merge conflict.

00:06:36,139 --> 00:06:40,770
Because that's what's going to happen when you try to put it back in to master.

00:06:40,770 --> 00:06:47,129
So question your assumptions about what it is you actually need from your source control.

00:06:47,129 --> 00:06:50,780
This one, I'm going to get into more, because obviously it is this talk.

00:06:50,780 --> 00:06:57,300
I'm going to talk to you about killing staging, testing in production, launching darkly, and

00:06:57,300 --> 00:06:59,610
going faster, being safer.

00:06:59,610 --> 00:07:04,749
I'm excited about the way we are moving towards going faster and being safer.

00:07:04,749 --> 00:07:11,770
I think that's what we are doing with agile, we are caught up in tradition and ritual because

00:07:11,770 --> 00:07:14,469
humans love religion.

00:07:14,469 --> 00:07:17,620
That's what we are doing when we are saying, I'm doing agile.

00:07:17,620 --> 00:07:23,169
How many of you have written a story on a 3 by 5 card?

00:07:23,169 --> 00:07:27,150
I was talking to someone, we do agile.

00:07:27,150 --> 00:07:31,000
As a developer, I need a Kubernetes server to do this.

00:07:31,000 --> 00:07:35,120
It is not a story.

00:07:35,120 --> 00:07:37,200
We all need some remedial reading in what agile is.

00:07:37,200 --> 00:07:42,539
It is working for us, we get stuff done and faster than we used it.

00:07:42,539 --> 00:07:46,969
But we are following all of these procedures without really understanding why we were trying

00:07:46,969 --> 00:07:49,039
to change this in the first place.

00:07:49,039 --> 00:07:52,810
And the last one is called everything's a little bit broken.

00:07:52,810 --> 00:07:57,349
And it is about the fact that, although we can have semantic impression of what we're

00:07:57,349 --> 00:08:02,389
doing, we can't do anything about the fact that there is a finite amount of effort that

00:08:02,389 --> 00:08:04,430
has to be expended in the world.

00:08:04,430 --> 00:08:10,220
Like, every time we do something labor-saving, it is because they did a bunch of labor and

00:08:10,220 --> 00:08:16,360
are building on top of it, or they are displacing what they cannot see.

00:08:16,360 --> 00:08:22,360
I introduce you to the myth of American exceptionalism built on slavery.

00:08:22,360 --> 00:08:29,860
We are not that good at things, we used a bunch of labor and didn't acknowledge it.

00:08:29,860 --> 00:08:35,570
When things are broken, we need to accept that there are more going on in the system

00:08:35,570 --> 00:08:41,590
that we don't know about, and development is not perfect and will never be.

00:08:41,590 --> 00:08:47,550
We can strive for perfect, it is good to aim, but we are not there yet, and never will be.

00:08:47,550 --> 00:08:50,690
And, yes, everything is broken.

00:08:50,690 --> 00:08:54,940
You can only anticipate failure and mitigate it.

00:08:54,940 --> 00:08:58,500
You cannot say, this is never going to fail, it is perfect.

00:08:58,500 --> 00:09:01,450
It is going to fail, parts are going to break.

00:09:01,450 --> 00:09:05,750
Every plane you have gotten on has broken parts, I guarantee you.

00:09:05,750 --> 00:09:10,510
There is no perfect plane in the world, and yet, they stay up in the air.

00:09:10,510 --> 00:09:15,149
So let's make our software something that can stay up in the air.

00:09:15,149 --> 00:09:20,250
So here is the staging server part.

00:09:20,250 --> 00:09:22,209
Deployment is not release.

00:09:22,209 --> 00:09:27,920
Deployment is the act of putting your code on the deployment server, production server.

00:09:27,920 --> 00:09:32,240
It is getting your code to where it could be visible to the world.

00:09:32,240 --> 00:09:37,190
Release is a business decision, deployment is a technical decision, release is a business

00:09:37,190 --> 00:09:38,190
decision.

00:09:38,190 --> 00:09:40,829
Release is where you get the value.

00:09:40,829 --> 00:09:42,750
And you don't have to do these together.

00:09:42,750 --> 00:09:44,340
For a long time, we've done this together.

00:09:44,340 --> 00:09:47,870
We have done -- deployment and release were interchangeable words.

00:09:47,870 --> 00:09:49,530
When is the big release?

00:09:49,530 --> 00:09:51,871
We will stay up until midnight to do that.

00:09:51,871 --> 00:09:58,600
Not that you could, but really, what if you deployed and nobody could see it?

00:09:58,600 --> 00:10:05,720
And then you can release it on, like, Monday at 10:00AM when you are smart.

00:10:05,720 --> 00:10:12,760
Here's the thing, here's the truth: We are all testing in production.

00:10:12,760 --> 00:10:15,029
Some of us admit it out loud.

00:10:15,029 --> 00:10:21,360
But, no matter how much testing you've done ahead of time, you're testing in production.

00:10:21,360 --> 00:10:24,839
Because there is something that is going to go wrong.

00:10:24,839 --> 00:10:30,740
This is a quote from aforementioned amazing state of DevOps report.

00:10:30,740 --> 00:10:36,620
The testing in production systems are done by interactions between components that are

00:10:36,620 --> 00:10:44,780
operating in apairmently normal parameters that may not be encountered in test environments.

00:10:44,780 --> 00:10:50,540
You've had that break, outage, that moment where you are like, nothing is broken, what

00:10:50,540 --> 00:10:52,180
made you work?

00:10:52,180 --> 00:10:55,029
That's what God gave us Honeycomb for.

00:10:55,029 --> 00:11:01,940
But because production is too complicated for us to simulate effectively.

00:11:01,940 --> 00:11:08,670
When I ask someone to set up a full production system, can you set up a full duplicate of

00:11:08,670 --> 00:11:09,910
production?

00:11:09,910 --> 00:11:12,370
Yeah, no.

00:11:12,370 --> 00:11:17,029
Sometimes there is AWS people who are in the audience who are like, yeah.

00:11:17,029 --> 00:11:18,579
What about the user data?

00:11:18,579 --> 00:11:21,050
Are you using that in test?

00:11:21,050 --> 00:11:23,620
I'm unhappy.

00:11:23,620 --> 00:11:28,529
Even if you can have a full duplicate of the technical stuff, you need a full duplicate

00:11:28,529 --> 00:11:36,320
of all of the vast weirdness that is people, that is one letter last names, or no last

00:11:36,320 --> 00:11:37,320
names.

00:11:37,320 --> 00:11:41,340
I'm really enjoying the fact that I have been giving this talk and saying, you need to be

00:11:41,340 --> 00:11:42,519
prepared for the future.

00:11:42,519 --> 00:11:47,110
And when people name their children with emojis.

00:11:47,110 --> 00:11:49,690
They laughed when I said this.

00:11:49,690 --> 00:12:03,139
I got a bug on Friday and said we cannot delete a flag, it is named with an emoji.

00:12:03,139 --> 00:12:07,420
So when you are thinking about this, you are not going to be able to test the weird-ass

00:12:07,420 --> 00:12:10,199
things that humans do to computers.

00:12:10,199 --> 00:12:15,490
You know how computers work, and you don't do terrible things to them -- you don't, but

00:12:15,490 --> 00:12:16,670
predictably terrible.

00:12:16,670 --> 00:12:21,000
Unpredictably terrible things, that's the realm of the user.

00:12:21,000 --> 00:12:27,930
We can sit around and talk about sad stories, we deployed to staging, it was meant to be

00:12:27,930 --> 00:12:35,871
fine, and then to production and we are missing underlying dependencies for tools, because

00:12:35,871 --> 00:12:40,360
it is an internal tool, it is not updated, and that's a different team.

00:12:40,360 --> 00:12:45,589
And by the time we discovered it, the person who had written it had left.

00:12:45,589 --> 00:12:46,589
And -- yeah.

00:12:46,589 --> 00:12:49,220
You've had that day.

00:12:49,220 --> 00:12:52,110
In the cloud native world, staging is a lie.

00:12:52,110 --> 00:12:57,329
It is not like this person is actually flying.

00:12:57,329 --> 00:13:03,279
We have enormous difficulty replicating the complexity of production, the weirdness.

00:13:03,279 --> 00:13:05,540
If you did that, you have to have more licenses.

00:13:05,540 --> 00:13:09,380
Are you going to authorize against third party APIs the same way?

00:13:09,380 --> 00:13:17,050
Are you paying for and testing auto scaling?

00:13:17,050 --> 00:13:18,769
Eh.

00:13:18,769 --> 00:13:25,370
So I found so many places that I could find this code.

00:13:25,370 --> 00:13:29,290
This code is working fine in staging, but not in live.

00:13:29,290 --> 00:13:35,760
And I'm like, sorry, Stack Overflow friend, you and everyone else, including me, I cannot

00:13:35,760 --> 00:13:39,490
figure out why it should work and isn't.

00:13:39,490 --> 00:13:40,580
It is a lie.

00:13:40,580 --> 00:13:46,070
It is a lie we tell ourselves and find comfort in that we have tested in staging and we should

00:13:46,070 --> 00:13:47,690
be okay.

00:13:47,690 --> 00:13:55,760
I'm not saying don't have staging, some people don't, we still do for a few minutes.

00:13:55,760 --> 00:14:02,610
But mostly, I say you have to accept that staging is a part of testing and not an actual

00:14:02,610 --> 00:14:04,950
approval.

00:14:04,950 --> 00:14:06,279
Green is expensive, I said this.

00:14:06,279 --> 00:14:13,450
It is expensive to stand up a full, duplicate system and fade over.

00:14:13,450 --> 00:14:16,019
Production is unknowable.

00:14:16,019 --> 00:14:20,101
This is an image of an organ in your body that we didn't know we had five years ago.

00:14:20,101 --> 00:14:28,339
It is called the intersticia, it is tubes filled with pressurized fluid that run through

00:14:28,339 --> 00:14:29,339
the body.

00:14:29,339 --> 00:14:31,170
Like the limb system, but we didn't know it.

00:14:31,170 --> 00:14:38,230
And the reason we didn't know about it, if you cut into a pressurized tube, what happens?

00:14:38,230 --> 00:14:41,529
It collapses.

00:14:41,529 --> 00:14:47,420
So the thing that we're seeing is, until we had good enough imaging to not cut into the

00:14:47,420 --> 00:14:50,209
tube, we didn't go it was there.

00:14:50,209 --> 00:14:54,980
Production is the same way, until we have real data, flowing through the real pipes

00:14:54,980 --> 00:14:59,079
under real circumstances, we're not going to see it.

00:14:59,079 --> 00:15:05,180
And the imaging is not good enough yet to test or predict that.

00:15:05,180 --> 00:15:09,589
And now that I have made you depressed about the fact that we don't know everything and

00:15:09,589 --> 00:15:16,339
cannot control everything, let me talk about how we can make this a little better.

00:15:16,339 --> 00:15:18,800
Production can contain super position.

00:15:18,800 --> 00:15:22,759
I love physics, in an amateur way.

00:15:22,759 --> 00:15:27,829
Production can contain superposition, it can contain more than one thing at a time.

00:15:27,829 --> 00:15:37,769
It can contain Schrodinger's code, on and off at the same time, it is amazing, and so

00:15:37,769 --> 00:15:38,959
cool.

00:15:38,959 --> 00:15:46,709
I think about this when we do traffic routing and shaping, personalized delivery.

00:15:46,709 --> 00:15:57,300
I have a weird, futurist hat where I do not name this mark-up language, but if we use

00:15:57,300 --> 00:16:05,050
flag identity to give people a persistent identifier on all the websites they visit,

00:16:05,050 --> 00:16:08,860
imagine what that does for accessibility.

00:16:08,860 --> 00:16:18,930
So when I think about a person's experience of their software, because it is not our software

00:16:18,930 --> 00:16:21,300
once they have it, their software.

00:16:21,300 --> 00:16:28,480
I want that to be as perfect and attuned to them as possible.

00:16:28,480 --> 00:16:33,139
You can use feature flag for targeting to change your production environment to deploy

00:16:33,139 --> 00:16:35,879
without showing your progress to everyone.

00:16:35,879 --> 00:16:42,500
In fact, to do continuous integration and deployment, you must be able to deploy broken

00:16:42,500 --> 00:16:44,200
code.

00:16:44,200 --> 00:16:53,230
You have to be able to put broken code on production, or you are not really doing CI/CD.

00:16:53,230 --> 00:16:55,839
Yeah.

00:16:55,839 --> 00:17:00,079
And every time I say this, all the testers in the audience get a cold chill down their

00:17:00,079 --> 00:17:01,899
spine.

00:17:01,899 --> 00:17:06,010
Because we've told them forever that their job is to prevent bad things from getting

00:17:06,010 --> 00:17:08,030
on to production.

00:17:08,030 --> 00:17:11,189
That's a misunderstanding of what testing is about.

00:17:11,189 --> 00:17:13,370
Testing engineers are amazingly smart people.

00:17:13,370 --> 00:17:15,210
They are very cool.

00:17:15,210 --> 00:17:21,200
And the thing that they are here to do is to prevent bad things from happening to users.

00:17:21,200 --> 00:17:25,400
That is different than it happening in production.

00:17:25,400 --> 00:17:31,470
I can see how they can frame things, especially when production was a gold master that you

00:17:31,470 --> 00:17:36,350
have to print and ship, but now it is not.

00:17:36,350 --> 00:17:41,560
Now we're saying, the thing that we want testers to do is to make sure we have a consistent,

00:17:41,560 --> 00:17:48,830
reliable, and safe experience, and they can do that by testing in production.

00:17:48,830 --> 00:17:52,780
They can only do it by seeing how production responds.

00:17:52,780 --> 00:17:56,540
So when I'm saying test in production, I'm not saying stop testing.

00:17:56,540 --> 00:18:01,130
I'm saying, give people more tools.

00:18:01,130 --> 00:18:08,280
You can hide in the dark, you can do all sorts of things in the dark, on production, without

00:18:08,280 --> 00:18:09,280
sharing with everyone.

00:18:09,280 --> 00:18:11,140
This is what feature flags are for.

00:18:11,140 --> 00:18:14,930
This is why trump-based development is going to works.

00:18:14,930 --> 00:18:19,940
If you have trunk-based development, everything is live all the time.

00:18:19,940 --> 00:18:22,010
But it is not visible.

00:18:22,010 --> 00:18:28,020
It is not there for everyone to see, even though it is in effect.

00:18:28,020 --> 00:18:29,710
I think that's so cool.

00:18:29,710 --> 00:18:33,840
I'm so excited about this.

00:18:33,840 --> 00:18:40,790
The idea of dark launching has been around for a long time, sometimes it is a new audience,

00:18:40,790 --> 00:18:47,450
splitting as a service, or opening with no fan fare.

00:18:47,450 --> 00:18:53,400
When a restaurant opens, they don't say we're opening on Monday and we would like everybody

00:18:53,400 --> 00:18:56,150
and their brother to show up and order all the things at once.

00:18:56,150 --> 00:18:57,540
It would be very famous.

00:18:57,540 --> 00:19:05,430
No, they say, Tuesday morning, they go, oh, yeah, we're open, no advertising.

00:19:05,430 --> 00:19:08,110
If you wander in, we might give you food.

00:19:08,110 --> 00:19:15,050
Because it turns out that testing your systems and your processes at full capacity, right

00:19:15,050 --> 00:19:19,890
away, is not great for restaurants any more than it is for us.

00:19:19,890 --> 00:19:26,220
We want to say, we will get the processes worked out, figure out how to do tickets,

00:19:26,220 --> 00:19:32,050
figure out when everybody's smoke breaks are and understand this before we add a lot of

00:19:32,050 --> 00:19:34,180
load to it.

00:19:34,180 --> 00:19:37,220
If restaurants can do that, I don't know why we can't.

00:19:37,220 --> 00:19:42,530
We will say, let's figure out how it works before we add a lot of load.

00:19:42,530 --> 00:19:49,880
It is easier and cheaper to fix a problem that is for a few people, than to do fixes

00:19:49,880 --> 00:19:54,250
anda for a lot affected.

00:19:54,250 --> 00:20:01,930
Testing for a small audience is safer than all at once.

00:20:01,930 --> 00:20:04,200
When I think about this problem, I think about Best Buy.

00:20:04,200 --> 00:20:07,940
I'm from Minnesota and we get a lot of newspaper ads for them.

00:20:07,940 --> 00:20:14,180
They have a quirk, they don't like paying their competitors a lot of money, so they

00:20:14,180 --> 00:20:15,710
are not on AWS.

00:20:15,710 --> 00:20:27,000
We have what is called data centers, heh, which is like AWS, or GCE, or Azure.

00:20:27,000 --> 00:20:29,820
But you pay for if yourself, and you cannot scale it.

00:20:29,820 --> 00:20:31,930
You got what you got.

00:20:31,930 --> 00:20:36,240
And what happened was, for reasons unknown, we can go into them.

00:20:36,240 --> 00:20:42,900
But for reasons, on Black Friday, the Best Buy site went down.

00:20:42,900 --> 00:20:45,040
Okay, that's bad.

00:20:45,040 --> 00:20:46,930
We're going to stand it back up.

00:20:46,930 --> 00:20:50,620
We stand it back up, thundering herd.

00:20:50,620 --> 00:20:54,600
Everybody is trying to hit the site simultaneously, and the site is huge.

00:20:54,600 --> 00:21:07,990
It has a stopping cart, animated pictures, and it blinks in a suave way, but it still

00:21:07,990 --> 00:21:08,990
blinks.

00:21:08,990 --> 00:21:16,280
It is so huge that, even if they had the capacity to manage sustaining people at that page size

00:21:16,280 --> 00:21:20,600
and, like, a normal level of turnover, they didn't have it the the capacity to load it

00:21:20,600 --> 00:21:22,720
all at once.

00:21:22,720 --> 00:21:31,930
That's what the thundering herd is about, give me the page, give me the page, or I'm

00:21:31,930 --> 00:21:33,480
on Amazon.

00:21:33,480 --> 00:21:38,510
So they finally ended up doing traffic shaping so they were only letting in a few percent

00:21:38,510 --> 00:21:43,320
of people at a time until the page was loaded, let in another few percent, and they stood

00:21:43,320 --> 00:21:44,320
it back up.

00:21:44,320 --> 00:21:52,470
It took hours to figure out how to do it because it kept falling under load.

00:21:52,470 --> 00:21:57,630
Being able to choose who gets into the site would have made all the difference in the

00:21:57,630 --> 00:22:02,840
world, for getting back up faster.

00:22:02,840 --> 00:22:04,970
Integration testing takes a lot of work.

00:22:04,970 --> 00:22:09,530
When we think about integration testing, we think about automated testing, testing plans,

00:22:09,530 --> 00:22:11,230
and sometimes stress test.

00:22:11,230 --> 00:22:16,520
But it is difficult to do full testing in a microservice world because they are not

00:22:16,520 --> 00:22:18,890
all your microservices.

00:22:18,890 --> 00:22:25,340
Every new microservice adds a node of complexity, and that means that your math stops being

00:22:25,340 --> 00:22:36,020
additive and becomes multi -- I lost the word --communitory.

00:22:36,020 --> 00:22:46,100
All of these nodes, it might be Dynatrace, you can see the nodes live, and you are like,

00:22:46,100 --> 00:22:48,220
do you really have 400 microservices?

00:22:48,220 --> 00:22:50,420
That's a lot.

00:22:50,420 --> 00:22:56,630
Some people do, and you Apollo's cannot test what each of them does, all the way through,

00:22:56,630 --> 00:22:58,460
with all the variations.

00:22:58,460 --> 00:23:05,370
So everything that we're doing needs to be about the end path.

00:23:05,370 --> 00:23:10,140
Not every variant, but the paths that are most likely to happen, the things that are

00:23:10,140 --> 00:23:12,990
most likely to be true.

00:23:12,990 --> 00:23:17,000
Integration testing is where you need to start thinking about behavior-driven testing.

00:23:17,000 --> 00:23:20,730
Does the software behave predictably in the way that we expect it to?

00:23:20,730 --> 00:23:24,550
I don't care if it executes the way that you expect it to.

00:23:24,550 --> 00:23:29,810
It can be a bunch of chained-together black boxes with tiny nodes, shipping out 1s and

00:23:29,810 --> 00:23:30,950
0s for all I care.

00:23:30,950 --> 00:23:36,350
As long as I have a predictable input and output, that's fine.

00:23:36,350 --> 00:23:43,160
What we need to know is whether that output is going to be predictable.

00:23:43,160 --> 00:23:50,220
This is one of the last pictures from the Opportunity Rover, which stopped transmitting

00:23:50,220 --> 00:23:52,980
in June of last year.

00:23:52,980 --> 00:23:58,280
Both opportunity and its twin, Spirit, were designed to last ninety days on the Martian

00:23:58,280 --> 00:24:06,710
surface, with the expectation that winters and dust storms would cut it short.

00:24:06,710 --> 00:24:12,440
It lasted 15 years, and sent us science that whole time.

00:24:12,440 --> 00:24:14,500
That is amazing.

00:24:14,500 --> 00:24:19,450
Somebody asked the JPL engineers how it happened, how did they make something that was designed

00:24:19,450 --> 00:24:23,770
for 90-day operational life last 15 years?

00:24:23,770 --> 00:24:27,660
The answer is, it is decoupled.

00:24:27,660 --> 00:24:33,170
If the rock feeler did not feel great, it does not mean that you cannot use the electromagnetic

00:24:33,170 --> 00:24:36,990
spectrum thing, they had more than one radio on.

00:24:36,990 --> 00:24:42,820
The whole system was designed to talk to each other, but not rely on each other.

00:24:42,820 --> 00:24:49,730
It was decoupled and loosely tethered together, the only thing that happened in the end is

00:24:49,730 --> 00:24:54,420
that the solar panels were covered by dust, and there is nobody there to clear the dust

00:24:54,420 --> 00:24:55,910
on the Rover.

00:24:55,910 --> 00:25:04,120
It is possible in the future that it will be blown off and talk to us again, even though

00:25:04,120 --> 00:25:08,190
it is dormant for over a year, they are still listening.

00:25:08,190 --> 00:25:16,280
It is a great metaphor for how to design software, we should be listening for it, building it

00:25:16,280 --> 00:25:21,030
with resilience and the understanding that some parts are going to break, but not everything

00:25:21,030 --> 00:25:24,130
is going to break.

00:25:24,130 --> 00:25:30,290
So, I know that when I say all the world's a staging server and you should kill staging,

00:25:30,290 --> 00:25:32,280
I get a lot of arguments.

00:25:32,280 --> 00:25:36,400
So you cannot just wholesale staging.

00:25:36,400 --> 00:25:40,260
Like we discussed, we need a way to make sure that these things are going to work in production.

00:25:40,260 --> 00:25:44,250
But you need to stop thinking about it as a separate server or environment.

00:25:44,250 --> 00:25:53,050
I know that you have some objections brewing in your soul, so I will settle a few of these.

00:25:53,050 --> 00:25:57,670
You need to have automated testing as part of your code hygiene and best practices.

00:25:57,670 --> 00:26:02,060
What if you cannot check in unless you have done your unit tests?

00:26:02,060 --> 00:26:07,830
I saw a great tweet, as a tester, 95 percent of things I find should have been found by

00:26:07,830 --> 00:26:16,370
unit testing.

00:26:16,370 --> 00:26:19,502
That is discouraging but predictable.

00:26:19,502 --> 00:26:21,650
We need a firm foundation.

00:26:21,650 --> 00:26:29,830
This is what I took a photo of, it is a Roman fort that is 2,000 years old.

00:26:29,830 --> 00:26:34,600
If you wanted to build it again, it is easy.

00:26:34,600 --> 00:26:37,590
New technology will not save us from new fundamentals.

00:26:37,590 --> 00:26:41,940
If we build on an unstable surface, it is bad for us.

00:26:41,940 --> 00:26:47,820
So I'm not saying get rid of testing, but do more testing.

00:26:47,820 --> 00:26:49,310
What about unit testing?

00:26:49,310 --> 00:26:56,090
I will say it again, you do it the same time you always do, before you commit the code

00:26:56,090 --> 00:26:57,680
to the trunk.

00:26:57,680 --> 00:27:03,380
If you don't require a passing test to commit code to trunk, what are you doing with your

00:27:03,380 --> 00:27:04,380
lives?

00:27:04,380 --> 00:27:07,510
That is just -- that is just basic!

00:27:07,510 --> 00:27:10,840
If you want somebody to do something, you either have to reward them for it, or punishing

00:27:10,840 --> 00:27:11,840
them for not doing it.

00:27:11,840 --> 00:27:16,200
It is not even human psychology, it is like animal psychology.

00:27:16,200 --> 00:27:21,000
Give them a reward, or a punishment, that's how it works.

00:27:21,000 --> 00:27:26,210
Because otherwise, if you cannot test before you get something into production, you end

00:27:26,210 --> 00:27:34,010
up with the Hubble telescope, which they machined precisely, micromillimeter precision, except

00:27:34,010 --> 00:27:36,610
they had some numbers wrong.

00:27:36,610 --> 00:27:41,160
They needed to figure out how to launch a pair of glasses into space and attach it to

00:27:41,160 --> 00:27:44,240
a telescope.

00:27:44,240 --> 00:27:50,330
Better unit tests may have helped us with the second launch problem.

00:27:50,330 --> 00:27:55,710
What about bad ideas, are we using staging to test bad ideas?

00:27:55,710 --> 00:27:59,480
Well, yes.

00:27:59,480 --> 00:28:06,720
But if production is not robust enough to run experiments on, what if you made it stronger

00:28:06,720 --> 00:28:09,100
instead of coddling it's fragility?

00:28:09,100 --> 00:28:15,620
What if you said that it is important to me to ensure that crappy code does not enter

00:28:15,620 --> 00:28:22,130
the orbit, or you don't know that it is a bad idea because you put it on staging.

00:28:22,130 --> 00:28:27,540
Maybe it is a false confidence, or a comforting lie.

00:28:27,540 --> 00:28:35,270
What about cutovers, and things you have to do in the moment, like changing from one database

00:28:35,270 --> 00:28:36,270
to the other?

00:28:36,270 --> 00:28:41,120
We will talk about teal transitions, blue/green is so five years ago.

00:28:41,120 --> 00:28:42,620
I'm over it.

00:28:42,620 --> 00:28:49,250
We used to do database migrations in a blue/green pattern, you can do two variants in the same

00:28:49,250 --> 00:28:55,100
place with less risk by writing messages to both places and then gradually moving them

00:28:55,100 --> 00:28:57,340
over, instead of an abrupt cut over.

00:28:57,340 --> 00:29:01,710
That makes sure that you test what you think you are writing.

00:29:01,710 --> 00:29:08,070
So here's what I want you to go out in the world and do: Instead of using staging, or

00:29:08,070 --> 00:29:12,980
in addition, launch new features in production and keep them concealed.

00:29:12,980 --> 00:29:18,470
Keeping your environment consistent and well-tuned allows you to reduce overhead while increasing

00:29:18,470 --> 00:29:20,920
your confidence.

00:29:20,920 --> 00:29:22,740
Branch by instruction.

00:29:22,740 --> 00:29:25,310
Branching is a mental artifact.

00:29:25,310 --> 00:29:28,610
It is how we think about adding new behavior to code.

00:29:28,610 --> 00:29:32,730
It is a pattern created by source code repositories.

00:29:32,730 --> 00:29:37,130
It is not real any more than any other kind of code is real.

00:29:37,130 --> 00:29:39,320
It is a mental model.

00:29:39,320 --> 00:29:45,080
Think about what other mental models get you to where you want to be safely.

00:29:45,080 --> 00:29:46,760
Test in production.

00:29:46,760 --> 00:29:49,630
Because it is the only thing that is real.

00:29:49,630 --> 00:29:54,170
Admit that you are testing in production, because if you have a failure, it is going

00:29:54,170 --> 00:29:56,710
in production.

00:29:56,710 --> 00:30:01,620
If this talk was too long and you read Twitter instead, I will leave you with this.

00:30:01,620 --> 00:30:08,100
Kill staging because it is a plausible lie, test in production.

00:30:08,100 --> 00:30:11,321
If you want a t-shirt, visit this url and we will send you one.

00:30:11,321 --> 00:30:12,321
And you can stop by our booth and get stickers.

00:30:12,321 --> 00:30:13,321
Thank you!

00:30:13,321 --> 00:30:14,321
[ Applause ]. Live captioning by Lindsay @stoker_lindsay

00:30:14,321 --> 00:30:15,321
at White Coat Captioning @whitecoatcapxg.

00:30:15,321 --> 00:30:16,321
>>SASHA ROSENBAUM: Thank you very much, Heidi!

00:30:16,321 --> 00:30:17,321
All right.

00:30:17,321 --> 00:30:18,321
So now we have a much-needed break!

00:30:18,321 --> 00:30:19,321
So you can visit restrooms, mother's rooms, and whatever other facilities you need to

00:30:19,321 --> 00:30:20,321
use.

00:30:20,321 --> 00:30:21,321
And we will meet back here at 10:40.

00:30:21,321 --> 00:30:32,270

YouTube URL: https://www.youtube.com/watch?v=pvW3Aa8nZgs


