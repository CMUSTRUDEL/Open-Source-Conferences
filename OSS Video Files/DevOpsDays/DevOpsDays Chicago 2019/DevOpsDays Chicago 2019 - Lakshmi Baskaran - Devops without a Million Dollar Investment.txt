Title: DevOpsDays Chicago 2019 - Lakshmi Baskaran - Devops without a Million Dollar Investment
Publication date: 2019-09-09
Playlist: DevOpsDays Chicago 2019
Description: 
	Lakshmi Baskaran - Devops without a Million Dollar Investment

Do you want to hear about how I terribly failed in leading my first devops transformation? I donâ€™t intend to give you a process handbook or a blueprint for a successful devops adoption. But I aim to walk you through a perfect narration of my journey that will prepare you for the unknown in devops.

Five years ago, when I was working for one of the big corporates, I had access to ample budget. Around the same time is when the devops movement was gaining popularity and most organizations - big and small were introducing devops for software development. I was learning about devops through conferences, meet ups and in every other professional catch ups. I was sold that devops is the next big thing after agile which is believed to increase efficiency in software delivery.

Soon enough, I was leading a devops transformation in my organization.

Here are the list of things that resulted in my first unsuccessful attempt in devops transformation:

1. Waited forever for an approval on a million dollar budget to kick off devops transformation - not realizing transformation of culture doesn't need money, it only needs changing people's mindset towards software development and delivery. 
2. Created devops transformation roadmap. Little did I realize that devops transformation is not a project that has a start and end date. It is a journey. A journey where we iteratively Adopt - Test - Learn devops principles that are suitable for the organization and team.
3. Hired expensive consultants to promote and execute devops.  I failed to identify devops influencers within my teams and train them in devops promotion and execution. 

Having failed once and learnt what it means to promote a positive devops culture, here is what I did in my future devops transformations which resulted in a positive outcome

1. Initiated devops transformation with limited budget. The budget was mostly used for tooling and automation and less on fostering culture. 
2. Devops is best run agile. We did not step into a devops transformation with a blueprint or a process handbook. We created, adopted and documented devops principles based on what resonated with each of our teams. 
3. The first and foremost milestone in devops adoption is to promote cultural transformation. Tooling and automation will follow suit.
Captions: 
	00:00:13,400 --> 00:00:14,400
Lakshmi Baskaran - Enterprise DevOps without a Million Dollars

00:00:14,400 --> 00:00:15,400
>> Our final talk of the morning is Lakshmi Baskaran!

00:00:15,400 --> 00:00:16,400
>>Lakshmi Baskaran: Good morning, DevOps Chicago!

00:00:16,400 --> 00:00:20,750
I know we are all hungry, and ready for a great lunch.

00:00:20,750 --> 00:00:24,039
Let's keep this fun and engaging.

00:00:24,039 --> 00:00:26,940
How many of you like freebies?

00:00:26,940 --> 00:00:30,500
I do, too.

00:00:30,500 --> 00:00:36,890
In fact, I go to Costco every single weekend, not to buy the huge boxes of cereal, but to

00:00:36,890 --> 00:00:39,500
munch on the freebies.

00:00:39,500 --> 00:00:46,900
How nice would it be if we could make a DevOps transformation without spending a million-dollar

00:00:46,900 --> 00:00:49,520
investment?

00:00:49,520 --> 00:01:00,689
So, roughly six years ago, my boss who attends the enterprise summit in Las Vegas summons

00:01:00,689 --> 00:01:03,500
me to his office one fine morning.

00:01:03,500 --> 00:01:10,979
And this is exactly what he says, Lakshmi, I want you to disregard every single goal

00:01:10,979 --> 00:01:14,170
I set for you this financial year.

00:01:14,170 --> 00:01:21,300
Transnorm the end-to-end engineering organization to run the DevOps way.

00:01:21,300 --> 00:01:26,640
How many of you have bosses who thinks a transformation can be done over night?

00:01:26,640 --> 00:01:31,890
I'm sure there are several of us.

00:01:31,890 --> 00:01:38,440
And I was like, well, I'm part of a DevOps in tech forecast, and I have read about DevOps

00:01:38,440 --> 00:01:40,820
in tech articles.

00:01:40,820 --> 00:01:47,480
But what does it mean to convert the entire organization to operate the DevOps way?

00:01:47,480 --> 00:01:54,390
And this was me on my way back home, I borrowed a bunch of books on DevOps and sifted through

00:01:54,390 --> 00:02:05,840
them, trying to understand if there's a perfect recipe that can make a perfected ops implementation.

00:02:05,840 --> 00:02:13,849
Six years later, I'm glad my knowledge on DevOps has doubled, not from the books I have

00:02:13,849 --> 00:02:19,820
read, but from my experiences, failures, and the lessons learned from my failures.

00:02:19,820 --> 00:02:29,269
I'm glad to be sharing them today, but here is a caveat: The experiences that I'm going

00:02:29,269 --> 00:02:35,749
to share with you today is what worked for my team and for my organization.

00:02:35,749 --> 00:02:38,880
And that is not a blueprint for every other organization.

00:02:38,880 --> 00:02:48,719
Take the perspectives of today's conversation, and tune in to what best suits for you and

00:02:48,719 --> 00:02:56,860
your team, and that alone will make a perfect DevOps implementation.

00:02:56,860 --> 00:03:02,340
How many of you in the audience are working in teams that deliver software in waterfall

00:03:02,340 --> 00:03:03,340
model?

00:03:03,340 --> 00:03:12,599
Wow, we don't have them attending DevOps?

00:03:12,599 --> 00:03:23,640
So I am going to talk about transforming organization to work the DevOps way, I still had a team

00:03:23,640 --> 00:03:30,319
delivering software on a water fall model.

00:03:30,319 --> 00:03:38,080
I spent a half million dollars to convert all of my water fall to agile teams, with

00:03:38,080 --> 00:03:44,609
the hope that once they run the agile way, DevOps implementation is going to be a cake

00:03:44,609 --> 00:03:45,609
walk.

00:03:45,609 --> 00:03:51,659
And, to this day, that is one of the biggest moments of my career.

00:03:51,659 --> 00:03:58,249
DevOps and agile, of course, they are closely related.

00:03:58,249 --> 00:04:05,489
DevOps enables agile teams to deliver product to the market faster.

00:04:05,489 --> 00:04:11,970
Integration and testing automation is a huge boon to the agile teams, you can take your

00:04:11,970 --> 00:04:15,959
products to the market as quickly as possible to start seeking feedback.

00:04:15,959 --> 00:04:24,330
But that alone does not mean that DevOps is a good fit for your agile teams.

00:04:24,330 --> 00:04:34,150
DevOps is a cultural movement, a movement that is separated from waterfall and agile.

00:04:34,150 --> 00:04:43,740
The code concepts are culture, process, and truths in DevOps is useful, regardless of

00:04:43,740 --> 00:04:46,990
the software delivering model you use.

00:04:46,990 --> 00:04:52,620
That can be waterfall, agile, or tandem.

00:04:52,620 --> 00:05:01,180
In my experience, waterfall teams have been extremely efficient by using the DevOps model.

00:05:01,180 --> 00:05:08,240
The automation and continuous integration of DevOps compresses the development cycle

00:05:08,240 --> 00:05:16,389
of waterfall teams, and they are able to deliver your software faster.

00:05:16,389 --> 00:05:21,550
So what data do we have to prove this hypothesis?

00:05:21,550 --> 00:05:28,449
In the last six years of implementing DevOps across huge enterprises, medium-sized enterprises,

00:05:28,449 --> 00:05:35,030
and start-ups, our teams have been gathering data as to what it means to actually improve

00:05:35,030 --> 00:05:36,810
DevOps in organizations.

00:05:36,810 --> 00:05:44,569
And we looked at two factors that most organizations try to understand when they are stepping into

00:05:44,569 --> 00:05:45,939
the DevOps world.

00:05:45,939 --> 00:05:49,970
And the graph on the left is the time to adapt DevOps.

00:05:49,970 --> 00:05:57,729
As you can see in the graph, the waterfall teams take around 30 percent more than the

00:05:57,729 --> 00:06:02,680
agile teams to adopt DevOps.

00:06:02,680 --> 00:06:09,389
Here is the reason why: The waterfall teams, they start everything from ground zero, and

00:06:09,389 --> 00:06:16,650
like the agile teams that are able to leverage from the agile mindset that they have already

00:06:16,650 --> 00:06:18,610
developed within their teams.

00:06:18,610 --> 00:06:24,409
So when you are starting the DevOps way, if your team is waterfall, they are going to

00:06:24,409 --> 00:06:27,490
be slow when compared to their agile teams in terms of DevOps adoption.

00:06:27,490 --> 00:06:38,610
The graph to the right shows the efficiency of the waterfall and agile teams in DevOps.

00:06:38,610 --> 00:06:46,819
The waterfall teams are 30 percent more efficient, and the agile teams are 38 percent more efficient,

00:06:46,819 --> 00:06:50,770
before and after DevOps adoption.

00:06:50,770 --> 00:06:55,009
How did we measure this efficiency?

00:06:55,009 --> 00:06:59,879
The efficiency was measured in terms of the throughput of the teams.

00:06:59,879 --> 00:07:07,819
How much the team was able to deliver, observe and after DevOps adoption, and the waterfall

00:07:07,819 --> 00:07:13,879
teams, the same team structure before and after DevOps, they were able to deliver 30

00:07:13,879 --> 00:07:17,469
percent more in terms of the volume of work.

00:07:17,469 --> 00:07:24,150
And the agile teams, prior and post-DevOps adoption, they were able to deliver 38 percent

00:07:24,150 --> 00:07:25,150
more.

00:07:25,150 --> 00:07:31,849
And this data was collected from enterprises of different demands, enterprises of different

00:07:31,849 --> 00:07:37,030
teams with DevOps adoption.

00:07:37,030 --> 00:07:41,960
So we all understand that DevOps is a good fit, regardless of the delivery model that

00:07:41,960 --> 00:07:42,960
you use.

00:07:42,960 --> 00:07:50,060
How do you introduce DevOps to your organization and teams?

00:07:50,060 --> 00:07:57,939
Here is what I did when I first started in the journey of DevOps implementation.

00:07:57,939 --> 00:08:01,270
So I created this huge project plan.

00:08:01,270 --> 00:08:08,250
I identified various phases in the project, and said these are the objectives of each

00:08:08,250 --> 00:08:10,389
phase.

00:08:10,389 --> 00:08:12,080
And I didn't stop there.

00:08:12,080 --> 00:08:19,880
I went on board and hired project managers who would manage each phase of these DevOps

00:08:19,880 --> 00:08:20,919
implementation.

00:08:20,919 --> 00:08:26,590
And we also brought some DevOps consultants, with the hope that they are going to foster

00:08:26,590 --> 00:08:32,469
and help us implement DevOps in a fast-track way.

00:08:32,469 --> 00:08:37,360
In spite of doing all this, it went terribly.

00:08:37,360 --> 00:08:45,210
We decided to pause and retrospect why we failed.

00:08:45,210 --> 00:08:51,920
What we realized was, like most organizations, we looked at DevOps from the eyes of the project

00:08:51,920 --> 00:08:53,280
management.

00:08:53,280 --> 00:09:03,070
And, to this day, I see that as one of the biggest blunders of my DevOps career.

00:09:03,070 --> 00:09:14,200
To not plan to DevOps by setting a start and end term -- it is about a cultural framework,

00:09:14,200 --> 00:09:20,280
it is about how people come together, work together, and deliver software.

00:09:20,280 --> 00:09:25,720
Why do you want to put a start and end date to it?

00:09:25,720 --> 00:09:34,340
Would you not want to be more scalable, sustainable, and long-term that stays with your organization?

00:09:34,340 --> 00:09:36,960
So what better to do it?

00:09:36,960 --> 00:09:42,210
You don't want the project plan, your DevOps implementation, and you don't want your project

00:09:42,210 --> 00:09:44,850
managers overseeing the DevOps.

00:09:44,850 --> 00:09:47,510
So how do you bring some structure to it?

00:09:47,510 --> 00:09:52,520
We will create something called the DevOps roadmap.

00:09:52,520 --> 00:09:59,960
Within DevOps roadmap, we will identify various milestones within the roadmap.

00:09:59,960 --> 00:10:06,880
For each milestone, I identified what capabilities you wanted teams to achieve.

00:10:06,880 --> 00:10:13,560
It can be as simple as the first milestone, you implement 10 percent of the test cases.

00:10:13,560 --> 00:10:22,220
For the second milestone, you automate part of the deployment process.

00:10:22,220 --> 00:10:29,470
So as your teams go through separate milestones, as they iterate, they try to identify what

00:10:29,470 --> 00:10:34,020
works for them, what works for teams, and what works for the organization.

00:10:34,020 --> 00:10:44,560
Allow teams to iterate as much as possible, as quickly as possible.

00:10:44,560 --> 00:10:51,850
DevOps is best done through iteration.

00:10:51,850 --> 00:10:55,150
So how do you run a DevOps transformation?

00:10:55,150 --> 00:11:04,890
We all agree that DevOps is a best fit for waterfall and agile, and the best way to encourage

00:11:04,890 --> 00:11:10,640
teams to go the DevOps team is to allow them to iterate.

00:11:10,640 --> 00:11:18,910
But what happens in most organizations is that your boss organizes a DevOps town hall,

00:11:18,910 --> 00:11:27,180
and he says, hey, we are building building the DevOps way, we will do that.

00:11:27,180 --> 00:11:32,620
How many of you are in organizations where DevOps is driven from top down?

00:11:32,620 --> 00:11:36,350
There we go.

00:11:36,350 --> 00:11:45,490
So when this transformation comes from top-down, there's a natural resistance within your team

00:11:45,490 --> 00:11:49,000
and developers to adopt it.

00:11:49,000 --> 00:11:57,120
The best way to do a transformation is to have a concrete and organic thread within

00:11:57,120 --> 00:12:06,380
your team, and by doing it through trial and error, we have three steps that are useful,

00:12:06,380 --> 00:12:10,170
regardless of where I implement DevOps.

00:12:10,170 --> 00:12:17,390
Step one, start with identifying your DevOps inferences in the team.

00:12:17,390 --> 00:12:25,310
Your development inferences and your ops inferences, who would come together, work in a team, and

00:12:25,310 --> 00:12:29,380
who would be able to put forth DevOps initiatives?

00:12:29,380 --> 00:12:39,160
And, once you do that, mentor your inferences, give them some ground-zero truths on what

00:12:39,160 --> 00:12:42,880
you want them to do, or what you want them to achieve.

00:12:42,880 --> 00:12:47,810
And, in a while, we will speak about what those ground-zero truths could be.

00:12:47,810 --> 00:12:54,500
And, number three: Why do you think your DevOps inferences would work on your behalf and make

00:12:54,500 --> 00:13:03,700
your DevOps initiatives a huge success, unless they have some sort of incentives for it?

00:13:03,700 --> 00:13:08,670
You would be the better person to know what would incentivize your team -- better compensation,

00:13:08,670 --> 00:13:09,850
a bonus?

00:13:09,850 --> 00:13:17,940
How about this: When you go to insentiveize your team, try something that is more win-win:

00:13:17,940 --> 00:13:24,480
A win for the organization, and the win for your DevOps inferences.

00:13:24,480 --> 00:13:30,380
So what I always do is, I try to motivate my DevOps inferences to attend the meet-ups

00:13:30,380 --> 00:13:31,610
and conferences.

00:13:31,610 --> 00:13:40,200
Who wants to go to a DevOps in Vegas or Florida and take a family holiday as part of that?

00:13:40,200 --> 00:13:47,670
And part of that, encourage them to present their papers and approaches in those conferences.

00:13:47,670 --> 00:13:56,730
By doing this, you are incentivizing them to help elevate their career, and they would

00:13:56,730 --> 00:14:02,770
bring on board some of the best practices that they would learn from the conferences.

00:14:02,770 --> 00:14:09,810
So these three tips make for any substantive DevOps transformation, whether you want to

00:14:09,810 --> 00:14:16,410
do it across your teams in your organization, or you want to start with one team and learn

00:14:16,410 --> 00:14:20,930
from that and have it succeed with the other teams as well.

00:14:20,930 --> 00:14:32,270
How many of you Googled DevOps, and you came across this diagram?

00:14:32,270 --> 00:14:38,570
The three pillars of culture, process, and tools, and the first intersection between

00:14:38,570 --> 00:14:41,190
each of those circles.

00:14:41,190 --> 00:14:48,560
Possible in theory, but in practice, this is not achievable.

00:14:48,560 --> 00:14:54,721
Most companies, when they go the DevOps way, this is what they ask.

00:14:54,721 --> 00:14:58,570
Where do I put my investment or my resources in?

00:14:58,570 --> 00:15:04,880
Do I put it on the cultural transformation, or do I do it on the process transformation,

00:15:04,880 --> 00:15:09,490
or do I do it on the tools transformation?

00:15:09,490 --> 00:15:15,730
And there are some companies that ask, should I give an equal share of the pie between the

00:15:15,730 --> 00:15:17,760
culture, processes, and tools?

00:15:17,760 --> 00:15:22,060
Should I have a set number of resources on culture, the name on process and the same

00:15:22,060 --> 00:15:24,710
number on tools?

00:15:24,710 --> 00:15:27,700
It is actually a million-dollar question.

00:15:27,700 --> 00:15:32,010
Let's talk about the human analogy to this.

00:15:32,010 --> 00:15:41,770
How about we walk out of this room and we win the lottery for $200?

00:15:41,770 --> 00:15:45,060
I'm sure we would all be excited.

00:15:45,060 --> 00:15:51,280
So, with that winning, we will assume that if we wanted to invest in a long-term or a

00:15:51,280 --> 00:15:53,250
short-term plan, we have two options.

00:15:53,250 --> 00:15:59,610
We initiate the short-term plan, and in two years, the half a million grows to a million.

00:15:59,610 --> 00:16:07,340
And the long-term investment option is, in 10 years, the half million grows to 10 million.

00:16:07,340 --> 00:16:17,890
What do we choose, the long term or the short term?

00:16:17,890 --> 00:16:21,770
Where are you spending our money?

00:16:21,770 --> 00:16:27,350
>>SASHA ROSENBAUM: Anybody wants to answer this?

00:16:27,350 --> 00:16:31,190
We have a mic.

00:16:31,190 --> 00:16:35,810
>> I would go the long-term way.

00:16:35,810 --> 00:16:41,780
I would rather have the $10 million in 10 years, rather than $2 million in two years.

00:16:41,780 --> 00:16:44,490
I want a good retirement.

00:16:44,490 --> 00:16:51,370
So any transformation, we will draw an analogy.

00:16:51,370 --> 00:16:57,100
If I wanted to invest in a transformation, I wanted the transformation to be long-term,

00:16:57,100 --> 00:17:02,090
sustainable, and scalable, right?

00:17:02,090 --> 00:17:09,699
I want to put my investment in a bucket where it stays with my organization forever.

00:17:09,699 --> 00:17:11,620
And that is the culture transformation.

00:17:11,620 --> 00:17:18,839
Because, with the culture transformation, you are transforming the mindset of the people:

00:17:18,839 --> 00:17:24,270
How they want to work, how they want to work with their peers and colleagues, where they

00:17:24,270 --> 00:17:28,850
want to work, and what they are doing to the greater betterment of the organization.

00:17:28,850 --> 00:17:36,451
And, trust me, this culture transformation goes deep-root in your organization, and it

00:17:36,451 --> 00:17:39,690
stays forever for years and years.

00:17:39,690 --> 00:17:45,790
So if you are going through the DevOps transformation route, or you are in the process of the DevOps

00:17:45,790 --> 00:17:53,730
transformation route, put your resource, money, and time in the culture of transformation,

00:17:53,730 --> 00:17:59,040
and follow it by the process transformation and then the tool transformation.

00:17:59,040 --> 00:18:07,730
The culture should embody the process, and the process should embody the tools.

00:18:07,730 --> 00:18:13,850
So we spoke about the culture initiatives, and the type of initiatives that could make

00:18:13,850 --> 00:18:18,690
a DevOps team a successful team.

00:18:18,690 --> 00:18:26,260
If you read about DevOps goals, most books recommend more than a handful of culture initiatives.

00:18:26,260 --> 00:18:33,200
And obviously, no Googles and Facebooks in the world have the time and money to invest

00:18:33,200 --> 00:18:40,370
in initiateing all of these initiatives, let alone the small enterprises.

00:18:40,370 --> 00:18:46,880
What are the top initiatives that makes a great DevOps?

00:18:46,880 --> 00:18:50,900
Initiatives and shared goals.

00:18:50,900 --> 00:19:00,070
Before we talk about tech, a great culture initiative has to come from top down.

00:19:00,070 --> 00:19:08,861
The lead users of your teams and organizations should practice and exhibit the culture before

00:19:08,861 --> 00:19:12,030
you see the teams adopting it.

00:19:12,030 --> 00:19:17,970
Blamenessless: Attack the problem and not the person.

00:19:17,970 --> 00:19:19,600
We don't do that often.

00:19:19,600 --> 00:19:26,420
Devs attack ops, and ops attack devs, regardless of them being part of a DevOps team.

00:19:26,420 --> 00:19:34,600
Start that, and whenever you have a problem in a software, try to look at what caused

00:19:34,600 --> 00:19:35,600
the problem.

00:19:35,600 --> 00:19:40,260
It could either by the process, a system, or a workflow.

00:19:40,260 --> 00:19:46,160
And mitigate that part of the process system of workflow so that you would prevent it from

00:19:46,160 --> 00:19:48,910
re-occurring again.

00:19:48,910 --> 00:19:54,590
Ownership: Something else that happens a lot, regardless of the organization that implements

00:19:54,590 --> 00:19:59,670
DevOps, is that people do not want to own things.

00:19:59,670 --> 00:20:02,670
What is the motivating factor for them to own an outcome?

00:20:02,670 --> 00:20:05,060
This is what happens.

00:20:05,060 --> 00:20:13,100
Whenever someone owns an outcome, delivers it, regardless of whether it is successful

00:20:13,100 --> 00:20:15,160
or fails, celebrate it.

00:20:15,160 --> 00:20:19,920
Note: Even if it is a failure, celebrate it.

00:20:19,920 --> 00:20:25,730
Because failures are the steps stones, failures are the opportunities to learn what works

00:20:25,730 --> 00:20:27,760
and what doesn't work.

00:20:27,760 --> 00:20:35,140
So once your teams understand that your leadership is celebrating both successes and failures,

00:20:35,140 --> 00:20:41,040
people will organically come together and they will be more motivated to try new things,

00:20:41,040 --> 00:20:46,010
because they are not going to be suspended if they are failing.

00:20:46,010 --> 00:20:47,010
Share goals.

00:20:47,010 --> 00:20:53,970
Traditionally, devs or not, we are used to setting up the -- (off-mic comments).

00:20:53,970 --> 00:20:58,620
We think there will be the third world war.

00:20:58,620 --> 00:21:05,070
We try to resist as much as possible, you sit in one corner, I will sit in the other,

00:21:05,070 --> 00:21:08,960
if you want something to be done, send it in Slack.

00:21:08,960 --> 00:21:19,050
We are talking about bringing dev and ops into the same team, how do you get them to

00:21:19,050 --> 00:21:20,050
work together?

00:21:20,050 --> 00:21:24,400
Give them shared objectives, set shared goals for them.

00:21:24,400 --> 00:21:31,470
So if your devs and ops have the common set of objectives, and if their bonuses are based

00:21:31,470 --> 00:21:37,580
on achieving those objectives, then find a way to get it done, regardless of whether

00:21:37,580 --> 00:21:42,780
they are sitting in the same room, or opposite ends of the building, they will make sure

00:21:42,780 --> 00:21:43,990
it gets done.

00:21:43,990 --> 00:21:50,780
And that creates the culture of them coming together and working together for the greater

00:21:50,780 --> 00:21:55,300
benefit of your engineering teams.

00:21:55,300 --> 00:21:59,810
So we spoke about the biggest share of the pie, which is the culture.

00:21:59,810 --> 00:22:05,780
The second part of the pie is process.

00:22:05,780 --> 00:22:12,290
And folks who are in the room today, you would work in organizations where there are hundreds

00:22:12,290 --> 00:22:16,530
of processes, and sometimes we don't go why they exist in the first placeism.

00:22:16,530 --> 00:22:20,380
So how did I start with the process transformation?

00:22:20,380 --> 00:22:22,820
I don't want to transform every single process.

00:22:22,820 --> 00:22:29,320
We don't have the time, money, and resources to transform all the processes that we are

00:22:29,320 --> 00:22:30,320
working on.

00:22:30,320 --> 00:22:38,630
So start with the process that is performed very often by your teams, the type of processes

00:22:38,630 --> 00:22:45,690
that have existed forever as in, like, nobody even knows why it exists, and also the type

00:22:45,690 --> 00:22:49,510
of processes that people always complain about.

00:22:49,510 --> 00:22:54,510
These are the three types of processes that you want to transform.

00:22:54,510 --> 00:23:01,220
I recently came across a process transformation technique called value stream mapping.

00:23:01,220 --> 00:23:09,790
And, with the organization that I am currently leading, you view this with value stream mapping.

00:23:09,790 --> 00:23:18,440
It helps you understand the latency of tasks between the processes, why there are four

00:23:18,440 --> 00:23:22,670
days between task A and task B of the process.

00:23:22,670 --> 00:23:28,290
It also helps us understand why a task takes so long to complete.

00:23:28,290 --> 00:23:35,490
And the biggest thing it helped us uncover is some tasks are so risky because it is just

00:23:35,490 --> 00:23:45,230
relating on one to complete the task.

00:23:45,230 --> 00:23:51,160
Subject the processes to the techniques so you understand the risks that the processes

00:23:51,160 --> 00:23:59,250
go through, and re-evaluate and refactor your processes, and do it through your DevOps teams.

00:23:59,250 --> 00:24:08,110
Have someone coach you through the value stream modeling, but don't have them tell them what

00:24:08,110 --> 00:24:13,710
to do, encourage your teams to come up with it.

00:24:13,710 --> 00:24:22,450
Last, but not least, the tool transformation.

00:24:22,450 --> 00:24:27,559
Most organizations, when they go the DevOps way, the first and foremost thing they would

00:24:27,559 --> 00:24:30,890
like to do is automate manual tasks.

00:24:30,890 --> 00:24:35,370
And they go and spend their money on all the license tool and subscription tools.

00:24:35,370 --> 00:24:45,559
When an organization, or when a team, is stepping into the DevOps world, start with exploring

00:24:45,559 --> 00:24:47,790
all the open source tools in the market.

00:24:47,790 --> 00:24:57,110
I'll bet you there is more than one open source tool for every single thing you want to automate

00:24:57,110 --> 00:24:59,620
in the live cycle.

00:24:59,620 --> 00:25:07,429
Encourage your teams to explore the open source tools allows them to iterate and find out

00:25:07,429 --> 00:25:12,790
what works for them in the tool and what doesn't work for them, and there will be a point in

00:25:12,790 --> 00:25:18,450
the journey where your team says, hey, I want this feature in order to automate this task

00:25:18,450 --> 00:25:21,470
and the open source tool doesn't give them the capability.

00:25:21,470 --> 00:25:28,760
That's your time to invest your money on license software and license tools.

00:25:28,760 --> 00:25:31,450
You don't want to be seen as this.

00:25:31,450 --> 00:25:35,130
No offense to the tool vendors here in the room.

00:25:35,130 --> 00:25:42,330
We all want to start right, we all want to invest in the right thing.

00:25:42,330 --> 00:25:50,740
We have a lot of tools, licensed tools, that do a great job in what they do.

00:25:50,740 --> 00:25:57,870
But before you find out what your niche tool is, go open source, explore on open source

00:25:57,870 --> 00:26:02,230
and you will be at that point in the journey where you are like, hey, I want this license

00:26:02,230 --> 00:26:03,230
tool.

00:26:03,230 --> 00:26:09,100
And that is the time to step up from open source to licensed tools.

00:26:09,100 --> 00:26:15,820
To re-cap, agile or waterfall, go DevOps.

00:26:15,820 --> 00:26:19,350
Trust your teams to manage DevOps roadmap.

00:26:19,350 --> 00:26:26,809
Culture over process over tools, put your money in the right thing that is long-term

00:26:26,809 --> 00:26:27,809
and sustainable.

00:26:27,809 --> 00:26:33,030
$10 million in 10 years, versus 2 million in two years.

00:26:33,030 --> 00:26:40,990
Culture transformation causes nothing, it just needs the right mindset and leadership

00:26:40,990 --> 00:26:47,250
team to exhibit and practice the culture that they want the teams to follow.

00:26:47,250 --> 00:26:50,220
Go open source.

00:26:50,220 --> 00:26:55,910
DevOps is a journey, not a destination.

00:26:55,910 --> 00:26:59,590
If you don't mind, I would like to invite my daughter to the stage.

00:26:59,590 --> 00:27:15,750
She joined with me Toronto, flew with me down to Chicago to see me speak.

00:27:15,750 --> 00:27:22,240
[ Applause ]. >> I would like to close the presentation

00:27:22,240 --> 00:27:27,960
by highlighting a conversation between me and my daughter six months ago.

00:27:27,960 --> 00:27:32,790
I came home from a conference in Toronto where I spoke about DevOps.

00:27:32,790 --> 00:27:37,340
And it was late that night, and she was right in the doorstep, waiting for me.

00:27:37,340 --> 00:27:41,750
This is what she said, Mommy, you said you are going totalk about DevOps.

00:27:41,750 --> 00:27:44,309
But what actually is DevOps?

00:27:44,309 --> 00:27:50,550
[ Laughter ]. And, trust me, I was talking about the new

00:27:50,550 --> 00:27:57,291
answers of DevOps that day, and here I am, able to deconstruct what a DevOps is to a

00:27:57,291 --> 00:27:58,291
five-year-old.

00:27:58,291 --> 00:28:07,360
After mulling it over for a while, here is what I came up with: DevOps is about working

00:28:07,360 --> 00:28:08,610
smart.

00:28:08,610 --> 00:28:15,260
DevOps is team work, and team work with the kids who you love to work with, and team work

00:28:15,260 --> 00:28:17,350
with those that you don't love to work it, it is about coming together, making it work,

00:28:17,350 --> 00:28:18,350
and your successes.

00:28:18,350 --> 00:28:19,350
Thank you.

00:28:19,350 --> 00:28:20,350
[ Applause ]. Live captioning by Lindsay @stoker_lindsay

00:28:20,350 --> 00:28:21,350
at White Coat Captioning @whitecoatcapxg.

00:28:21,350 --> 00:28:22,350
>>SASHA ROSENBAUM: Thank you Lakshmi!

00:28:22,350 --> 00:28:23,350
That was the best definition of DevOps for a five-year-old.

00:28:23,350 --> 00:28:24,350
Do we have a sponsor?

00:28:24,350 --> 00:28:25,350
Yeah.

00:28:25,350 --> 00:28:26,350
Okay, so we have one last sponsor pitch before lunch.

00:28:26,350 --> 00:28:27,350
And that is Discover: >> Hello, everybody.

00:28:27,350 --> 00:28:28,350
It is always a really difficult position to be in, to be the last speaker before lunch,

00:28:28,350 --> 00:28:29,350
particularly when you are freezing to death and you are hungry.

00:28:29,350 --> 00:28:30,350
So I'm going to keep it brief and say we are so happy, as America's favorite credit card

00:28:30,350 --> 00:28:31,350
for customer service, to be sponsoring lunch for DevOpsDays Chicago.

00:28:31,350 --> 00:28:32,350
We have a booth, if you are a practitioner looking to work for a really cool company,

00:28:32,350 --> 00:28:33,350
and you know it always pays to Discover, come and see us!

00:28:33,350 --> 00:28:34,350
[ Applause ]. >>SASHA ROSENBAUM: Thank you!

00:28:34,350 --> 00:28:35,350
And the lunch is in the next room, and if you have some time left over, then stop by

00:28:35,350 --> 00:28:36,350
the sponsors.

00:28:36,350 --> 00:28:37,350
>>MATT STRATTON: Okay!

00:28:37,350 --> 00:28:38,350
Please be mindful of the vegetarian and vegan options, please only take those if you have

00:28:38,350 --> 00:28:39,350
that dietary restriction.

00:28:39,350 --> 00:28:40,350
If you are looking for a vegetarian or vegan option and you don't see it, ask the caterers,

00:28:40,350 --> 00:28:41,350
they might have some tucked away in back.

00:28:41,350 --> 00:28:42,350
Other than that, we will see you here at 1:00.

00:28:42,350 --> 00:28:42,359

YouTube URL: https://www.youtube.com/watch?v=oBz9m3WSziU


