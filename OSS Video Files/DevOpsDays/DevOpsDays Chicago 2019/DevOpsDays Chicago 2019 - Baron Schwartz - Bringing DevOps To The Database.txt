Title: DevOpsDays Chicago 2019 - Baron Schwartz - Bringing DevOps To The Database
Publication date: 2019-09-09
Playlist: DevOpsDays Chicago 2019
Description: 
	Baron Schwartz - Bringing DevOps To The Database

Most teams find it hard to “do DevOps” in the DB for several reasons. This talk summarizes what I’ve learned over the last decade, studying teams that succeeded as well as those that tried. I’ve distilled it all into concrete, practical steps you can take to improve.

Databases are special because they’re stateful, and DevOps reflects this: in practice, databases are a lot harder to “DevOps” (as a verb) than other parts of the stack. In this talk you’ll learn why Databases are “hard to DevOps,” but also why it’s valuable enough to keep trying‚ and smarter ways to try. There’s some theory/discussion, but not much; there’s more focus on case studies, commonalities between lots of teams/companies, and common approaches that I’ve seen work really well. In more detail,

What research shows about DevOps, databases, and company performance

Current and emerging trends in how we build/manage data tiers, and implications

Elevation of the traditional dedicated DBA role and what’s happening as a result

Driving cultural change towards distributed database competency and responsibility

Why some teams succeed in this transformation, while others fail

How to improve your chances of succeeding (or avoiding pitfalls others have already found)
Captions: 
	00:00:13,210 --> 00:00:14,210
>> Coming up next: Bringing DevOps to the Database by Baron Schwartz!

00:00:14,210 --> 00:00:15,210
>> You must be present to win for the give-aways, if you are not present within a few seconds

00:00:15,210 --> 00:00:16,210
of me calling your name, too bad.

00:00:16,210 --> 00:00:17,210
We are giving away some books, and you get to come up.

00:00:17,210 --> 00:00:18,210
If I choose your name, you can come up and pick.

00:00:18,210 --> 00:00:19,210
The earlier that you are chosen, the more choice you get.

00:00:19,210 --> 00:00:20,210
The books we are giving away include Accelerate, the SRE Book, the SRE Workbook, High Performance

00:00:20,210 --> 00:00:21,210
MySQL by the next speaker, DevOps For Dummies, and that's it -- oh, The Phoenix Project!

00:00:21,210 --> 00:00:22,210
Because, of course.

00:00:22,210 --> 00:00:23,210
So I'm going to draw from the passports.

00:00:23,210 --> 00:00:24,210
If you didn't get your passport yet, that is okay, we will do more later, too.

00:00:24,210 --> 00:00:25,210
First winner is Michael Renteria.

00:00:25,210 --> 00:00:26,210
Go and choose a book.

00:00:26,210 --> 00:00:27,210
A couple of authors or editors of these books are here, it is up to you to find them in

00:00:27,210 --> 00:00:28,210
Slack if you want to get an autograph.

00:00:28,210 --> 00:00:29,210
Emily Freeman, desk Ops For Dummies, you might be able to find her, or Barron Schwartz.

00:00:29,210 --> 00:00:30,210
The next person is Sanquil Rivat.

00:00:30,210 --> 00:00:31,210
The next is Matt Stratton -- no.

00:00:31,210 --> 00:00:32,210
Next, Jeff Weidman.

00:00:32,210 --> 00:00:33,210
Jeff?

00:00:33,210 --> 00:00:34,210
Is he here?

00:00:34,210 --> 00:00:35,210
Get yourself a book.

00:00:35,210 --> 00:00:36,210
I will introduce the next speaker, I will talk slowly because there's a couple people

00:00:36,210 --> 00:00:37,210
still walking in.

00:00:37,210 --> 00:00:38,210
We have two more talks this morning, and then we are off to lunch, and then back in here

00:00:38,210 --> 00:00:39,210
for ignits.

00:00:39,210 --> 00:00:40,210
I think that I have killed enough time, I can introduce the next speaker who is Barron

00:00:40,210 --> 00:00:41,210
Schwartz!

00:00:41,210 --> 00:00:42,210
Thank you, Baron.

00:00:42,210 --> 00:00:43,210
>>Baron Schwartz: Thank you, it is great to be here, it is great to participate in a conference.

00:00:43,210 --> 00:00:44,210
I'm normally rushing around if I'm not speaking, or at the booth, I'm on a call, or running

00:00:44,210 --> 00:00:45,210
out to see a customer, or something like that.

00:00:45,210 --> 00:00:46,210
For me, this is not just an opportunity to come and speak, but to re-connect with people

00:00:46,210 --> 00:00:47,210
and you areal really re-charging my batteries.

00:00:47,210 --> 00:00:48,210
So thanks for letting me be here.

00:00:48,210 --> 00:00:50,879
A couple of logistics things, the first being the clicker.

00:00:50,879 --> 00:00:58,249
I am glad that I'm at a DevOps conference, I don't have to tell you what it is.

00:00:58,249 --> 00:01:02,270
And common questions, the slide is going to be posted.

00:01:02,270 --> 00:01:07,920
There's a QR code in the end that you can scan, and the url is pasted in the Slack channel

00:01:07,920 --> 00:01:10,870
for this talk, if you want to do that.

00:01:10,870 --> 00:01:16,690
And there's a lot of Linux references in the materials that I included in the end.

00:01:16,690 --> 00:01:23,550
I love hearing from you, so reach out to me, however you prefer.

00:01:23,550 --> 00:01:31,880
To begin with a story, in 2010, I was a database consultant, I was interested in databases

00:01:31,880 --> 00:01:36,430
early in my career and that led me to a job that was really rewarding.

00:01:36,430 --> 00:01:41,829
I worked with people that had troubles with database performance for a while, almost 5

00:01:41,829 --> 00:01:42,829
years.

00:01:42,829 --> 00:01:48,329
And in 2010, there was a company that was doing flash sales.

00:01:48,329 --> 00:01:53,470
They will get inventory of popular clothing, accessories, and things like that.

00:01:53,470 --> 00:01:59,170
They would make those available to everybody all at once, and thousands of people would

00:01:59,170 --> 00:02:04,640
rush to the site and try to get bags at discount, or whatever.

00:02:04,640 --> 00:02:08,869
And they had typical architecture.

00:02:08,869 --> 00:02:18,630
In those days, it was two master servers, one in active mode, one in passive mode, in

00:02:18,630 --> 00:02:20,430
the core database.

00:02:20,430 --> 00:02:26,450
And they had traffic going to those and one in idle mode.

00:02:26,450 --> 00:02:39,160
It was for disaster recovery, and if they had a schema change, they would stop from

00:02:39,160 --> 00:02:48,770
idle to the active one, do the schema change to what was offline, and then re-start replication

00:02:48,770 --> 00:02:51,810
and swap the roles of the servers.

00:02:51,810 --> 00:02:55,730
This is a common thing to do with these databases back then.

00:02:55,730 --> 00:03:06,160
And this works well, but there are consistency problems and raised conditions.

00:03:06,160 --> 00:03:16,630
And replication, this was a set of MySQL servers, and replication can continue working even

00:03:16,630 --> 00:03:22,990
when the data drifted on the two servers, so replication is working, you think that

00:03:22,990 --> 00:03:26,080
the servers have the same data, but they no longer do.

00:03:26,080 --> 00:03:33,500
And this scheme had been in use for many years, and slowly, but by bit, through these changeovers,

00:03:33,500 --> 00:03:41,550
the data had drifted far apart in small places because of the timing synchronization problems

00:03:41,550 --> 00:03:43,330
between the switches.

00:03:43,330 --> 00:03:48,400
And what would happen was identifiers would get re-used, because they were auto committing

00:03:48,400 --> 00:03:49,400
identifiers.

00:03:49,400 --> 00:03:55,170
So for a small minority of customers, they can log in and see someone's history, or shopping

00:03:55,170 --> 00:04:02,950
cart, or saved items, or whatever, or lose their order history or whatever the case may

00:04:02,950 --> 00:04:03,950
be.

00:04:03,950 --> 00:04:09,920
I wrote a bunch of software, I was originally doing this stuff by hand, and I figured out

00:04:09,920 --> 00:04:17,120
that it can be automated and I wrote a bunch of software, called the Percona toolkit, but

00:04:17,120 --> 00:04:23,040
in those days I was the main user because I was doing gnarly reconciliation and how

00:04:23,040 --> 00:04:25,490
to get it back together.

00:04:25,490 --> 00:04:31,330
I automated it together so I can do it effectively and with higher confidence.

00:04:31,330 --> 00:04:38,300
One day, I was working as a consultant, I was far away, the team is in New York and

00:04:38,300 --> 00:04:39,730
I'm in Virginia.

00:04:39,730 --> 00:04:47,669
And my job is to bring back into synchronization another portion of the data that we were doing

00:04:47,669 --> 00:04:49,639
a nibbal at a time.

00:04:49,639 --> 00:04:55,699
I made a mistake, I didn't stop replication and ran the command on the wrong server, took

00:04:55,699 --> 00:04:58,479
every down, and it during a flash sale.

00:04:58,479 --> 00:05:04,770
I immediately realized what I had done, I had a very physical reaction to this, I found

00:05:04,770 --> 00:05:10,600
myself starting to get tunnel vision, the world started to get distant.

00:05:10,600 --> 00:05:15,590
I broke out in cold chills, and recognized that I was about to pass out.

00:05:15,590 --> 00:05:22,840
So I slid off of my chair, put my feet up, breathed for a couple of seconds.

00:05:22,840 --> 00:05:30,970
And then I got back up, got on -- in those days, we were still using Skype.

00:05:30,970 --> 00:05:37,470
And I got on with the operations team that I was consulting with, and I said, this is

00:05:37,470 --> 00:05:38,759
what just happened.

00:05:38,759 --> 00:05:45,360
They did a couple of pick checks and confirmed this is the site, the flash sale, and we will

00:05:45,360 --> 00:05:48,289
have an under construction page.

00:05:48,289 --> 00:05:53,800
And we started triaging, and we brought on the developers.

00:05:53,800 --> 00:06:00,340
I worked closely with the database team for a while, and I'm still friends and in touch

00:06:00,340 --> 00:06:03,009
with them.

00:06:03,009 --> 00:06:06,400
But I had not worked much with the development team.

00:06:06,400 --> 00:06:11,370
When they brought in some of the senior developers to help figure out what was wrong, what was

00:06:11,370 --> 00:06:19,180
impacted, and a safe way to recover things, I was really impressed.

00:06:19,180 --> 00:06:25,139
It didn't occur to me until then that a lot of the database folks didn't really understand

00:06:25,139 --> 00:06:30,669
the database, what was in it, safe to do, and what was unsafe, as well as the developer

00:06:30,669 --> 00:06:31,669
did.

00:06:31,669 --> 00:06:40,341
And the developer knows where the skeletons in the closets are, and we were able to figure

00:06:40,341 --> 00:06:43,669
out what was impacted and to recover.

00:06:43,669 --> 00:06:50,659
And that morning we were back online, and after everything was done, I called the VP

00:06:50,659 --> 00:06:54,719
of engineering and said, you know that there's an outage.

00:06:54,719 --> 00:06:56,990
And he said, yeah.

00:06:56,990 --> 00:06:58,789
And he did something that I did not expect.

00:06:58,789 --> 00:07:05,289
He said, I don't want to criticize you on this call, that is not productive.

00:07:05,289 --> 00:07:11,400
How can we learn from this, and how can we take the learnings and use them to prevent

00:07:11,400 --> 00:07:17,469
these things from happening, or to have them recover a little bit, or more quickly in the

00:07:17,469 --> 00:07:18,469
future?

00:07:18,469 --> 00:07:27,479
That is not how I had been managed before, I had been blamed for a lot in my career,

00:07:27,479 --> 00:07:37,939
even when I was in a factory and cut my finger quite badly, I was escalateed to a senior

00:07:37,939 --> 00:07:44,860
manager, was told that's a dumb shit move and if I did it again, I would be fired.

00:07:44,860 --> 00:07:48,189
The devices were never fixed as a result of that.

00:07:48,189 --> 00:07:53,530
This was the first time I was treated with compassion and took a learning approach to

00:07:53,530 --> 00:07:54,530
it.

00:07:54,530 --> 00:08:00,509
It was a day of a lot of learning, it was the early days of DevOps.

00:08:00,509 --> 00:08:02,949
I don't know how much that team had heard of it.

00:08:02,949 --> 00:08:08,180
But looking back, with the benefit of hind sight, I can see what I didn't see at the

00:08:08,180 --> 00:08:09,180
time.

00:08:09,180 --> 00:08:12,460
I can see that a lot of seeds were starting to sprout in our industry.

00:08:12,460 --> 00:08:18,139
And, you know, there were a lot of things that you can see the early beginnings of that

00:08:18,139 --> 00:08:28,789
are widely accepted, and it has been amazing to see those kinds of things turn into DevOps,

00:08:28,789 --> 00:08:34,930
Agile, Design Thinking, service delivery, all of those things over the years.

00:08:34,930 --> 00:08:43,610
And now nobody argues those are mainstream trends, there's a lot of stuff that DevOps

00:08:43,610 --> 00:08:48,110
should do or overlap with is driven by drives.

00:08:48,110 --> 00:08:52,100
I wrote a lot of buzzwords on the screen.

00:08:52,100 --> 00:09:02,120
And the big, general theme, the take-away from this is DevOps is essentially a way to

00:09:02,120 --> 00:09:08,200
innovate in a way that is better for the business and more just for the humans involved.

00:09:08,200 --> 00:09:10,050
And I think that is really important.

00:09:10,050 --> 00:09:16,320
And I think it is notable that other ways of innovating that have not been just for

00:09:16,320 --> 00:09:20,420
the humans involved have not turned out that well.

00:09:20,420 --> 00:09:23,200
It is not accidental.

00:09:23,200 --> 00:09:28,590
If you want to innovate and do great work, people are doing that work.

00:09:28,590 --> 00:09:29,920
People and teams are doing that work.

00:09:29,920 --> 00:09:32,900
So the justice is an important part of it.

00:09:32,900 --> 00:09:38,010
And otherwise, we will go back to Pete Cheslock's talk, you will lose your best people and not

00:09:38,010 --> 00:09:41,440
innovate, among other things.

00:09:41,440 --> 00:09:47,750
Some of these buzzwords are more trendier than others, like containers and microservices,

00:09:47,750 --> 00:09:57,040
but all of them are making a big transformation in building systems, teams, and how the company

00:09:57,040 --> 00:09:58,040
is run.

00:09:58,040 --> 00:10:08,070
For example, software as a service, largely driven by and co-occurring with the rise of

00:10:08,070 --> 00:10:09,780
cloud.

00:10:09,780 --> 00:10:15,310
I founded a software as a service company, and it is not just a different way of building

00:10:15,310 --> 00:10:18,020
a product, but a company.

00:10:18,020 --> 00:10:24,030
The business metrics, the levers, the finances, all of those operate completely differently

00:10:24,030 --> 00:10:26,760
than companies did 20 years ago.

00:10:26,760 --> 00:10:30,740
We are in a new world now.

00:10:30,740 --> 00:10:38,900
But we are doing things differently in the database, even though there's a lot of buy

00:10:38,900 --> 00:10:46,370
in in DevOps, there's a hold out or two, and the database is one of the places where DevOps

00:10:46,370 --> 00:10:48,700
does not reach as quickly.

00:10:48,700 --> 00:10:54,370
And I will talk a lit bit about why that is, but first, to note that there are two ways

00:10:54,370 --> 00:11:00,210
that DevOps is applied to the database.

00:11:00,210 --> 00:11:07,120
And I'm borrowing from Charity Majors, who uses the phrase the first age of DevOps and

00:11:07,120 --> 00:11:08,970
the second phase of Devops.

00:11:08,970 --> 00:11:23,700
The first is Puppet -- I was an SSH administrator, and the first stage of DevOps was, stop doing

00:11:23,700 --> 00:11:26,110
that and start writing software.

00:11:26,110 --> 00:11:32,100
Operations is accomplished through development, and our work is software that configures and

00:11:32,100 --> 00:11:34,660
manages our systems.

00:11:34,660 --> 00:11:39,000
So that's the first and logical place to start.

00:11:39,000 --> 00:11:42,300
It is true in the database as well.

00:11:42,300 --> 00:11:47,520
Database servers got this applied to them a little bit later than others.

00:11:47,520 --> 00:11:53,480
You would Chef and recycle these machines, but never recycle the database server and

00:11:53,480 --> 00:11:58,840
bring it under Chef , because it was important.

00:11:58,840 --> 00:12:04,600
So you can just completely replace all of your web servers, and they would come up under

00:12:04,600 --> 00:12:10,360
a nice, clean, configuration management control, but the database was often left behind in

00:12:10,360 --> 00:12:11,360
that.

00:12:11,360 --> 00:12:16,921
And then the second age of DevOps is when developers start doing operations, and I'm

00:12:16,921 --> 00:12:23,670
really grateful to Holly Allen and her talk just before this about service ownership at

00:12:23,670 --> 00:12:24,670
Slack.

00:12:24,670 --> 00:12:29,580
It is a set of stories you can study and see that common themes are arising in.

00:12:29,580 --> 00:12:38,120
Everything from Netflix to Zelando, there's lots and lots of stories of how this works.

00:12:38,120 --> 00:12:44,410
And this service ownership of teams, as opposed to the centralized operations teams, and centralized

00:12:44,410 --> 00:12:48,010
database administration team, is an important theme here.

00:12:48,010 --> 00:12:52,610
I don't think that it is a coincidence that companies who work this way, in my personal

00:12:52,610 --> 00:12:57,250
experience, do better at learning and moving quickly.

00:12:57,250 --> 00:13:02,620
So in order for developers to own database operations, own the production behavior, performance,

00:13:02,620 --> 00:13:08,270
availability, equality of service, of their databases, you need a handful of things there,

00:13:08,270 --> 00:13:09,270
as well.

00:13:09,270 --> 00:13:14,000
So schema as code and automated migrations, and there are certainly areas where you can

00:13:14,000 --> 00:13:15,000
see this being done.

00:13:15,000 --> 00:13:19,790
But there are also, just as in other -- anywhere in DevOps, you can see that there are things

00:13:19,790 --> 00:13:22,120
that it is harder to do this with.

00:13:22,120 --> 00:13:26,790
So if you are doing, you know, a Ruby app on Heroku, it is easier to do schema migrations

00:13:26,790 --> 00:13:33,320
than to retrofit that into a legacy model, or something like that.

00:13:33,320 --> 00:13:37,630
So that's kind of the broad brush, what is DevOps for the database?

00:13:37,630 --> 00:13:42,320
It is the same thing as DevOps for everywhere, there are developers doing operations, and

00:13:42,320 --> 00:13:47,170
there are operations doing developers, and maybe some are not so much or either of those,

00:13:47,170 --> 00:13:50,550
but only in a database-specific context.

00:13:50,550 --> 00:13:55,560
And that is partly because databases are hard to DevOps, and here, I use DevOps as a verb.

00:13:55,560 --> 00:13:59,670
Throw your tomatoes now, it's okay.

00:13:59,670 --> 00:14:03,519
And databases are hard to DevOps because they are different.

00:14:03,519 --> 00:14:08,270
They are different and especially in a special in a number of ways and we made it that way.

00:14:08,270 --> 00:14:16,180
In some cases, we do it differently, but it takes time to evolve and mature.

00:14:16,180 --> 00:14:20,720
First of all, we make everything in our apps as stateless as much as possible.

00:14:20,720 --> 00:14:27,800
If a web server is on an EC2 instance that starts to go bad, we can replace it.

00:14:27,800 --> 00:14:32,130
We didn't lose anything, because anything that is of value that we wanted to keep, the

00:14:32,130 --> 00:14:35,750
statefulness, that is delegated and pushed over to the database.

00:14:35,750 --> 00:14:42,750
So the web apps are stateless and you can replace and auto scale as much as you want.

00:14:42,750 --> 00:14:48,860
That makes the web apps easier to operate, configure, manage, and all of those things,

00:14:48,860 --> 00:14:52,340
but the databases do the hard work.

00:14:52,340 --> 00:15:02,150
The database is legacy technology, even Postgres and my SQL and newer stuff than that is legacy

00:15:02,150 --> 00:15:09,410
because it takes a while to mature before you trust the crown jewels to them.

00:15:09,410 --> 00:15:14,380
And it takes at least 5 years to mature.

00:15:14,380 --> 00:15:18,330
And in today's day, 5 years is legacy technology.

00:15:18,330 --> 00:15:26,090
And all of these were designed well before configuration management, they don't have

00:15:26,090 --> 00:15:33,980
the appropriate control planes and lift and move handles that a lot of other systems do.

00:15:33,980 --> 00:15:38,410
So configuration management systems have a hard time with them, and also configuration

00:15:38,410 --> 00:15:44,900
management systems weren't designed for databases, or for complex, stateful services that are

00:15:44,900 --> 00:15:51,330
distributed with consistency requirements from server to server.

00:15:51,330 --> 00:15:55,790
You know, they are not -- they are not designed to coordinate across servers, for example,

00:15:55,790 --> 00:15:57,820
or hosts.

00:15:57,820 --> 00:16:02,060
And that's not always true, this is not categorically true.

00:16:02,060 --> 00:16:06,320
But generally, the -- there is some truth in all of these things.

00:16:06,320 --> 00:16:11,000
And then the last thing, if the databases are doing hard work that is critical, it has

00:16:11,000 --> 00:16:12,000
high performance tolerances.

00:16:12,000 --> 00:16:21,660
That is increasingly so as the world is more connected, your application depends on Twilio,

00:16:21,660 --> 00:16:29,610
and that is a part of it, and if Twilio is slow, your app is slow, and all of these things

00:16:29,610 --> 00:16:31,790
are dependencies of each other.

00:16:31,790 --> 00:16:37,450
So Twilio's databases have to run really fast.

00:16:37,450 --> 00:16:46,000
So folks often think, or regard themselves, as doing DevOps pretty well, even maybe in

00:16:46,000 --> 00:16:47,220
the database.

00:16:47,220 --> 00:16:53,870
But I often see there are signs for improvement and maybe opportunity.

00:16:53,870 --> 00:16:56,740
This is not intended to be a blame game.

00:16:56,740 --> 00:17:01,860
If you can score yourself against these things, and maybe you have opportunity for improvement.

00:17:01,860 --> 00:17:07,000
And rather than looking at the databases themselves, look at the artifacts of the culture and work

00:17:07,000 --> 00:17:11,819
processes to tell you whether you can do better or not.

00:17:11,819 --> 00:17:18,759
So my favorite thing is the disfunction that is caused when responsibility and authority

00:17:18,759 --> 00:17:21,069
are not co-located and tightly aligned.

00:17:21,069 --> 00:17:31,940
When somebody when the database has query performance and the developer is writing the

00:17:31,940 --> 00:17:35,940
query, you have a problem.

00:17:35,940 --> 00:17:40,559
And when developers are not responsible for that, they don't feel pain, and they are not

00:17:40,559 --> 00:17:45,840
paged when a query they wrote is slow or the size is causing a pile-up or something like

00:17:45,840 --> 00:17:48,450
that, that's an issue.

00:17:48,450 --> 00:17:56,059
And these things point to deeper, underlying types of problems and opportunities.

00:17:56,059 --> 00:18:03,409
If developers can't self-service, if they cannot provision, change, if they cannot observe

00:18:03,409 --> 00:18:09,539
in production, how the service is -- the queries coming from those services are performing,

00:18:09,539 --> 00:18:15,529
then again, that's not only an inefficiency and a bottleneck, but a real problem for the

00:18:15,529 --> 00:18:16,529
org.

00:18:16,529 --> 00:18:23,100
So one of the clear ways to see this is people are afraid of changing the database schema.

00:18:23,100 --> 00:18:26,230
And schema migrations exist even if you have a schemaless database.

00:18:26,230 --> 00:18:31,710
There is still schema, it is a question of whether it lives only in the application,

00:18:31,710 --> 00:18:34,490
or both the application and the database.

00:18:34,490 --> 00:18:40,450
And if people are shipping a new version of the application that treats the data differently,

00:18:40,450 --> 00:18:41,910
that is schema.

00:18:41,910 --> 00:18:48,390
And if that's a scary thing, and if it is done less frequently because it is scary,

00:18:48,390 --> 00:18:54,210
that's a form of disfunction.

00:18:54,210 --> 00:18:58,549
To address these things, there's a handful of things that I think of as being really

00:18:58,549 --> 00:18:59,549
important.

00:18:59,549 --> 00:19:04,529
And one of those is tooling, because automation is good and important.

00:19:04,529 --> 00:19:13,899
I took down the flash sale site with automation, and also with fat fingering, and a mistake.

00:19:13,899 --> 00:19:21,399
But that automation was making possible something that previously was not possible at all.

00:19:21,399 --> 00:19:26,909
And the automation was responsible for, not the automation that I wrote, but what the

00:19:26,909 --> 00:19:32,029
company wrote for doing their fail-overs, is also responsible for the data drifted over

00:19:32,029 --> 00:19:33,629
time.

00:19:33,629 --> 00:19:38,220
The data drifted over time, that's a bug, but the automation was there fundamentally

00:19:38,220 --> 00:19:39,799
and that was important.

00:19:39,799 --> 00:19:46,230
So schema change, automation, deployment automation, continuous delivery, and monitoring tools,

00:19:46,230 --> 00:19:48,690
these are all really important sets of tools.

00:19:48,690 --> 00:19:55,330
I happen to come from a monitoring tool vendor, I have a fondness for monitoring and observability.

00:19:55,330 --> 00:19:59,399
But that doesn't make it more or less important than these other things.

00:19:59,399 --> 00:20:02,950
So good tooling is really important, I will talk a little bit later about bad tooling.

00:20:02,950 --> 00:20:06,610
Actually, I have a whole bunch, haven't I?

00:20:06,610 --> 00:20:08,710
Good tooling is really important.

00:20:08,710 --> 00:20:15,480
And the next thing is databases are complicated, they have murky inner workings that only a

00:20:15,480 --> 00:20:17,990
few people understand well.

00:20:17,990 --> 00:20:21,669
So it helps to have a framework of how to approach these.

00:20:21,669 --> 00:20:28,580
The frameworks that work well for databases, like defining what quality of service looks

00:20:28,580 --> 00:20:34,700
like for the database is very similar to what it looks like for any other service.

00:20:34,700 --> 00:20:41,100
I have introduced an acronym here, the KELT and UKE acronym, those are defined in other

00:20:41,100 --> 00:20:45,450
talks I have given that have links to at the end.

00:20:45,450 --> 00:20:52,869
So databases as a whole and workload as a whole is characterizable, and you can quantify

00:20:52,869 --> 00:21:00,159
and describe the quality of service both globally and at the level of individual queries.

00:21:00,159 --> 00:21:04,629
And that is important when you are trying to figure out what and how has changed in

00:21:04,629 --> 00:21:09,960
the databases to look at what useful work it's doing for its customers, the applications

00:21:09,960 --> 00:21:14,500
that depend on it, and when and how, at a fine-grain level, that is performing.

00:21:14,500 --> 00:21:22,279
And there's a monitoring philosophy that solves the complicated problem of what should I monitor

00:21:22,279 --> 00:21:23,679
and how.

00:21:23,679 --> 00:21:31,350
There's 350 status counters in MySQL, which of those matter, which of those should I put

00:21:31,350 --> 00:21:36,480
on a chart, to increase or decrease a setting?

00:21:36,480 --> 00:21:41,299
That's a complicated problem, but it can be broken down into something that is manageable.

00:21:41,299 --> 00:21:44,850
So that philosophy is also in the slideshow I linked later.

00:21:44,850 --> 00:21:51,549
So that is helpful for people to gain a sense of confidence that can do the database operations

00:21:51,549 --> 00:21:54,879
well.

00:21:54,879 --> 00:22:00,490
Another important thing for moving forward is figuring out where you are standing now,

00:22:00,490 --> 00:22:08,450
with capability maturity level, from level 1-5, and you are trying to move from 3-4,

00:22:08,450 --> 00:22:12,110
and brag about it to your vendors and suppliers and things like that.

00:22:12,110 --> 00:22:16,049
The maturity models are pretty problematic.

00:22:16,049 --> 00:22:21,250
There are good parts of them if you are aware of the problematic parts, and you can stay

00:22:21,250 --> 00:22:25,740
in the good parts and not get trapped by the problems.

00:22:25,740 --> 00:22:31,720
The best way to do this is to read the book, Accelerate, and look at the annual state of

00:22:31,720 --> 00:22:36,419
DevOps reports, and not just the latest years, but I encourage you to go back a couple years

00:22:36,419 --> 00:22:45,700
ago and focus on the switch from this year to next.

00:22:45,700 --> 00:22:49,400
This year, there are new capabilities mentioned, and so forth and so on.

00:22:49,400 --> 00:22:54,940
So Accelerate will help you understand how capability maturity models are broken, and

00:22:54,940 --> 00:22:57,919
what's a better way to look at it.

00:22:57,919 --> 00:23:02,559
And the Accelerate state of DevOps report will help you understand what capabilities

00:23:02,559 --> 00:23:08,590
in general are predictive of, or influence, DevOps importance.

00:23:08,590 --> 00:23:14,230
There's Hierarchy of Reliability that you can find in the SRE book, it is basically

00:23:14,230 --> 00:23:16,919
a pyramid of needs.

00:23:16,919 --> 00:23:20,860
Monitoring is at the bottom, for a really important reason, you cannot build on top

00:23:20,860 --> 00:23:25,499
of that until you can see what things are doing in production.

00:23:25,499 --> 00:23:31,320
And the database-specific context I have outlined a bunch of these database specific-types of

00:23:31,320 --> 00:23:37,379
things in a book that I wrote and there's a QR code you can scan later to grab that.

00:23:37,379 --> 00:23:41,399
A few of the ways that things can go wrong as well.

00:23:41,399 --> 00:23:47,340
So first of all, the tooling that I have been talking about a handful of times so far can

00:23:47,340 --> 00:23:49,900
be very, very dangerous.

00:23:49,900 --> 00:24:03,299
Naīve tooling, written by vendors, that you double click to open, causes a ton of problems.

00:24:03,299 --> 00:24:08,850
And a lot of the performance consulting years, during that period of my career, a lot of

00:24:08,850 --> 00:24:13,659
times we solved performance problems by turning off badly-designed monitoring tools.

00:24:13,659 --> 00:24:20,020
And these can really cause a lot of damage.

00:24:20,020 --> 00:24:25,140
As a vendor, I have been in the position multiple times of people saying things like, I really

00:24:25,140 --> 00:24:31,490
want to get cortex in here, and we want to see the benefits of it, but we need a culture

00:24:31,490 --> 00:24:32,490
change.

00:24:32,490 --> 00:24:36,130
And we think we will drive that by buying your product.

00:24:36,130 --> 00:24:39,750
I don't want that customer, heh.

00:24:39,750 --> 00:24:45,700
That's going to be more bods bodies on the street at the end of the day, careers broken,

00:24:45,700 --> 00:24:50,440
and trust and faith broken.

00:24:50,440 --> 00:24:55,139
You don't get culture change from a vendor, a tool, or a product.

00:24:55,139 --> 00:24:57,620
You do the hard work from inside.

00:24:57,620 --> 00:25:02,610
You will also, more than likely, have some amount of internal resistance.

00:25:02,610 --> 00:25:08,650
And there are people who really want to keep doing that they see as career security.

00:25:08,650 --> 00:25:13,600
And sometimes that means that they resist other people having involvement, or ownership

00:25:13,600 --> 00:25:16,019
of what they have previously been involved in.

00:25:16,019 --> 00:25:18,610
I will name the elephant in the room.

00:25:18,610 --> 00:25:20,019
Some DBAs want to keep DBAing.

00:25:20,019 --> 00:25:23,630
But they want to know how to do that.

00:25:23,630 --> 00:25:32,380
And unrealtistic plans, I see a lot of folks -- without getting the best minds in the room,

00:25:32,380 --> 00:25:39,559
and getting buy-in from everybody, and I think Holly laid out the high-trust environment

00:25:39,559 --> 00:25:43,179
and the commitment to learning at the executive level.

00:25:43,179 --> 00:25:49,639
If those things are not present, then not only do things, like internal resistance and

00:25:49,639 --> 00:25:54,880
so forth become a problem, then you don't have good plans because people are not committed

00:25:54,880 --> 00:25:58,529
with their shoulder to the wheel.

00:25:58,529 --> 00:26:04,679
So the way that I advise getting started is small and carefully.

00:26:04,679 --> 00:26:07,019
And that doesn't always have to be the case.

00:26:07,019 --> 00:26:12,499
And Holly made an eloquent argument for why sometimes you need to take the leap and plunge

00:26:12,499 --> 00:26:13,590
in.

00:26:13,590 --> 00:26:18,860
I think that when you are dealing with people's careers and you are really solving some political

00:26:18,860 --> 00:26:24,669
and cultural problems, it helps a lot to show success in a small area.

00:26:24,669 --> 00:26:29,389
The accelerate state of DevOps report talks about different patterns of adoption, what

00:26:29,389 --> 00:26:31,649
works, and what doesn't.

00:26:31,649 --> 00:26:33,889
That is good reading as well.

00:26:33,889 --> 00:26:39,760
I want people to start with something that doesn't end their career.

00:26:39,760 --> 00:26:44,750
I punched a hole below the water line in the flash sale website.

00:26:44,750 --> 00:26:48,059
I try not to do that when I can.

00:26:48,059 --> 00:26:51,779
Chaos engineering is not actually about crashing things.

00:26:51,779 --> 00:26:57,010
If you know it is going to crash something, cause an outage, it is not chaos engineering,

00:26:57,010 --> 00:27:00,059
read the chaos engineering book.

00:27:00,059 --> 00:27:05,000
And it helps to start with a new thing that is not yet in production, that is not yet

00:27:05,000 --> 00:27:07,119
business critical, the stakes are smaller.

00:27:07,119 --> 00:27:14,269
And then you can have a pattern of what good looks like, and then try and replicate tha

00:27:14,269 --> 00:27:19,119
Culture is a funny thing, it is emergent, you cannot operate on culture, you cannot

00:27:19,119 --> 00:27:21,009
say that we are going to change culture.

00:27:21,009 --> 00:27:25,200
Instead you have to come in the side door.

00:27:25,200 --> 00:27:31,279
You have to start changing something that drives culture, like who is on call, or things

00:27:31,279 --> 00:27:33,450
like that.

00:27:33,450 --> 00:27:36,909
And culture change is an outcome of that.

00:27:36,909 --> 00:27:42,259
In the ebook that I wrote about DevOps for the database, I referenced Ryn Daniel's writing,

00:27:42,259 --> 00:27:50,660
there's good writing in there about designable surfaces is the phrase they use, and the way

00:27:50,660 --> 00:27:55,019
to influence culture through things you can actually change that will have consequences

00:27:55,019 --> 00:27:58,249
for the culture.

00:27:58,249 --> 00:28:04,659
It is important to break down the large amounts of things you can focus on and pick where

00:28:04,659 --> 00:28:07,629
to start with.

00:28:07,629 --> 00:28:15,519
When I have a database, can I measure at a fine-grain, can you quantify the performance

00:28:15,519 --> 00:28:23,100
of a query, or set of queries, like add to shopping cart, and can you track it, baseline

00:28:23,100 --> 00:28:30,840
it, know if it is better or worse, do you know what changes happened in the database

00:28:30,840 --> 00:28:32,419
workload.

00:28:32,419 --> 00:28:36,210
If there's an outage and you are wondering whether to point your finger at the database

00:28:36,210 --> 00:28:42,499
or not, the database, there was no outage two years ago, can we look at the difference

00:28:42,499 --> 00:28:48,769
between now and two hours ago at a granular level and understand what changed?

00:28:48,769 --> 00:28:57,639
Can you ship a new version of your code and have that code against an old version of the

00:28:57,639 --> 00:28:58,649
database schema?

00:28:58,649 --> 00:29:04,081
Or can you change the database schema without breaking the code, without a re-deploy of

00:29:04,081 --> 00:29:05,081
the code.

00:29:05,081 --> 00:29:09,619
Can you change these things, without having to change them in lockstep.

00:29:09,619 --> 00:29:13,650
If you have to tightly synchronize those changes, it will go wrong.

00:29:13,650 --> 00:29:22,299
And the more they are decoupled, the less flexibility you have in releasing and innovating,

00:29:22,299 --> 00:29:28,559
then that is less ability to turn off things in production.

00:29:28,559 --> 00:29:33,320
So that's a quick way to solve a lot of outages, there are a lot of outages that are not going

00:29:33,320 --> 00:29:40,029
to be solved by turning off a feature flag, but a lot of them can be.

00:29:40,029 --> 00:29:44,759
And I'm not going to talk about the service alignment, but for those of you that are watching

00:29:44,759 --> 00:29:52,630
this video later, please look at a recording of Holly Allen, Slack and their journey to

00:29:52,630 --> 00:29:54,309
service ownership.

00:29:54,309 --> 00:30:01,850
I talked about internal resistance and that that might be coming from database administrators

00:30:01,850 --> 00:30:06,499
that see their roles things they are uncomfortable with.

00:30:06,499 --> 00:30:12,600
I think everyone should be comfortable with their role changing because it is better when

00:30:12,600 --> 00:30:18,299
you are not the human automation around the database, or you don't have exclusive control

00:30:18,299 --> 00:30:22,730
and responsibility over something, that you actually don't have control over because,

00:30:22,730 --> 00:30:27,019
guess what, those developers can release things that influence the database in ways you cannot

00:30:27,019 --> 00:30:28,019
control.

00:30:28,019 --> 00:30:32,950
When you go into the new world of database reliability engineering, life is better.

00:30:32,950 --> 00:30:39,909
You become a subject matter expert for something that a lot of people value, which is how do

00:30:39,909 --> 00:30:47,600
databases work, how does indexing work, how do queries work, how do I become more proficient

00:30:47,600 --> 00:30:53,259
in these thing as, let's say, an engineer who is a few years into their career and doesn't

00:30:53,259 --> 00:31:03,669
understand databases and can make themselves more valuable and a greater impact on what

00:31:03,669 --> 00:31:05,799
they are shipping.

00:31:05,799 --> 00:31:13,580
As database engineer, you have expertise on these things, you can change your role from

00:31:13,580 --> 00:31:20,879
gate keeping around the database and spreading this knowledge, coaching a lot of people,

00:31:20,879 --> 00:31:25,100
into something that is going to be rewarding for them.

00:31:25,100 --> 00:31:35,340
I will get a little closer here, or if you can advance, thank you.

00:31:35,340 --> 00:31:37,409
Can you go back one?

00:31:37,409 --> 00:31:41,859
These are hot linked from the slides.

00:31:41,859 --> 00:31:43,850
You can click through to any of these.

00:31:43,850 --> 00:31:50,700
And this one is a QR that you can scan right now if you want to download.

00:31:50,700 --> 00:31:59,159
This goes to my company's website, and it is a form fill, a PDF, it is 65 pages of everything.

00:31:59,159 --> 00:32:03,379
There are so many stories that I was able to find, so most of this is not, like, my

00:32:03,379 --> 00:32:04,379
writing.

00:32:04,379 --> 00:32:06,500
Most of it is compiling other people's stories.

00:32:06,500 --> 00:32:10,700
For example, there's a lot of people who have figured out how to ship their application

00:32:10,700 --> 00:32:13,580
and their schema in very decoupled ways.

00:32:13,580 --> 00:32:22,230
So there is probably, like, 12 or 15 very in-depth stories I found in recorded conference

00:32:22,230 --> 00:32:29,249
talks, slide shows, blog posts, and even books, ACNQ articles, things like that.

00:32:29,249 --> 00:32:35,570
Things linked in there that makes a huge difference.

00:32:35,570 --> 00:32:41,840
And all the slides are in the Slack channel, this is the QR code for the slides themselves.

00:32:41,840 --> 00:32:48,799
I would love to hear from you, thank you for the privilege of talking with you.

00:32:48,799 --> 00:32:54,590
[ Applause ]. Live captioning by Lindsay @stoker_lindsay

00:32:54,590 --> 00:32:59,409

YouTube URL: https://www.youtube.com/watch?v=lcb5x7Sd950


