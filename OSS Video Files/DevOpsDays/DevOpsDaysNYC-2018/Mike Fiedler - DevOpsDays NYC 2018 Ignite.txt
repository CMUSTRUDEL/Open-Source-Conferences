Title: Mike Fiedler - DevOpsDays NYC 2018 Ignite
Publication date: 2018-02-01
Playlist: DevOpsDaysNYC-2018
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:19,199
[Music]

00:00:16,039 --> 00:00:24,890
first up give a big thank you to all of

00:00:19,199 --> 00:00:24,890
our sponsors organizers volunteers for

00:00:28,670 --> 00:00:34,200
I'm very glad I can be here in front of

00:00:31,289 --> 00:00:36,630
you today how often have you bought the

00:00:34,200 --> 00:00:39,090
product used a service from a vendor and

00:00:36,630 --> 00:00:41,280
said you know what this does almost

00:00:39,090 --> 00:00:43,379
everything I needed to do but there's

00:00:41,280 --> 00:00:45,750
still that little leftover remainder

00:00:43,379 --> 00:00:48,660
aspect that just isn't there and I

00:00:45,750 --> 00:00:51,030
really want it so my name is Mike

00:00:48,660 --> 00:00:54,840
Fiedler I've been working with

00:00:51,030 --> 00:00:58,739
technology for over 25 years now and I

00:00:54,840 --> 00:01:01,050
really like it I continue to do it which

00:00:58,739 --> 00:01:02,520
is great I do a bunch of different

00:01:01,050 --> 00:01:05,040
things I need to do a few different

00:01:02,520 --> 00:01:06,840
teams but the team I'm working with now

00:01:05,040 --> 00:01:09,330
we we have this vision of the cloud the

00:01:06,840 --> 00:01:12,510
cloud is this wonderful place you can do

00:01:09,330 --> 00:01:15,930
anything and the the opportunities are

00:01:12,510 --> 00:01:17,909
limitless and that comes with a kind of

00:01:15,930 --> 00:01:20,189
cost because every single tool that you

00:01:17,909 --> 00:01:22,799
use there has its own sharp edges and

00:01:20,189 --> 00:01:26,549
will cut you in new and exciting ways

00:01:22,799 --> 00:01:29,640
so are we expected to become experts in

00:01:26,549 --> 00:01:31,890
every single tool and it's it's really

00:01:29,640 --> 00:01:33,450
hard to kind of pack all that on and

00:01:31,890 --> 00:01:35,750
this wouldn't be a DevOps tazed talk

00:01:33,450 --> 00:01:39,600
without referencing containers obviously

00:01:35,750 --> 00:01:41,400
so the mini pretty secret about

00:01:39,600 --> 00:01:43,740
containers is that they aren't all

00:01:41,400 --> 00:01:45,689
identical they don't all offer the same

00:01:43,740 --> 00:01:48,180
shape they may have some similar

00:01:45,689 --> 00:01:50,700
interfaces but truly what's inside each

00:01:48,180 --> 00:01:53,280
container is vastly different can be

00:01:50,700 --> 00:01:55,799
vastly different so we run a very

00:01:53,280 --> 00:01:57,890
container oriented application

00:01:55,799 --> 00:02:01,040
architecture using Amazon's

00:01:57,890 --> 00:02:04,070
CS and this offloads a whole lot of

00:02:01,040 --> 00:02:05,750
complexity from us having to manage that

00:02:04,070 --> 00:02:07,430
nuts and bolts it's not as fancy as

00:02:05,750 --> 00:02:09,319
kubernetes but then we don't have to

00:02:07,430 --> 00:02:11,270
manage to burn Eddie's so that's great

00:02:09,319 --> 00:02:14,209
but it comes with this aspect of having

00:02:11,270 --> 00:02:17,690
tasks bundled into a service as a

00:02:14,209 --> 00:02:20,240
deployment model and when you want to

00:02:17,690 --> 00:02:22,670
add a sidecar feature such as a locking

00:02:20,240 --> 00:02:24,980
container or monitoring container in the

00:02:22,670 --> 00:02:27,140
easiest traditional model you would run

00:02:24,980 --> 00:02:29,000
that with as another task with your

00:02:27,140 --> 00:02:31,550
service so if you're running five

00:02:29,000 --> 00:02:33,410
services been packing on one host you

00:02:31,550 --> 00:02:35,870
end up multiplying all of those could

00:02:33,410 --> 00:02:38,420
sidecar containers so to a point that we

00:02:35,870 --> 00:02:41,209
wanted to merge and converge a bunch of

00:02:38,420 --> 00:02:44,269
them to run one per host so that way we

00:02:41,209 --> 00:02:47,180
can leverage some sort of economy at

00:02:44,269 --> 00:02:49,160
scale so we don't have to run hundreds

00:02:47,180 --> 00:02:50,720
of instances and a bunch of the other

00:02:49,160 --> 00:02:53,900
different frameworks offer this

00:02:50,720 --> 00:02:57,140
functionality and they not made it into

00:02:53,900 --> 00:02:58,820
ECS yet well someday it might in the

00:02:57,140 --> 00:03:01,010
future it might but it's not there today

00:02:58,820 --> 00:03:03,320
so then we're gonna get that feature of

00:03:01,010 --> 00:03:06,829
running one per host I want those

00:03:03,320 --> 00:03:09,230
advantages so that way I couldn't run it

00:03:06,829 --> 00:03:11,269
at boot time and then if the service

00:03:09,230 --> 00:03:13,579
changes I have to reboot or reprovision

00:03:11,269 --> 00:03:15,829
hosts there are other methods and blog

00:03:13,579 --> 00:03:18,980
posts on how to do this but nothing

00:03:15,829 --> 00:03:21,320
really gives me that managed service so

00:03:18,980 --> 00:03:23,030
in order to find a method to do that we

00:03:21,320 --> 00:03:26,120
wanted to figure out what could we use

00:03:23,030 --> 00:03:29,720
inside of the AWS architecture so using

00:03:26,120 --> 00:03:32,060
cloud watch events as a bus where all

00:03:29,720 --> 00:03:35,150
events that change in your architecture

00:03:32,060 --> 00:03:38,480
can then trigger another behavior so

00:03:35,150 --> 00:03:41,930
using an example of a filter to pull

00:03:38,480 --> 00:03:45,079
events around ECS changing and then

00:03:41,930 --> 00:03:47,780
kicking off a downstream flow to figure

00:03:45,079 --> 00:03:50,750
out what do we do next and I'm showing

00:03:47,780 --> 00:03:54,049
some snippets of poorly written Python

00:03:50,750 --> 00:03:57,950
all the error handling has been yanked

00:03:54,049 --> 00:04:01,519
out for brevity but basically we receive

00:03:57,950 --> 00:04:04,070
an event and then react so by taking a

00:04:01,519 --> 00:04:07,520
cluster change whether it auto scales up

00:04:04,070 --> 00:04:10,100
or down we can then take

00:04:07,520 --> 00:04:13,010
make another API call find out what size

00:04:10,100 --> 00:04:15,950
the cluster is now and adapt our service

00:04:13,010 --> 00:04:17,920
to be that same size this gives us the

00:04:15,950 --> 00:04:20,480
benefit of a managed service

00:04:17,920 --> 00:04:22,550
understanding the different flows so

00:04:20,480 --> 00:04:24,470
that way we can redeploy those sidecar

00:04:22,550 --> 00:04:26,420
services instead of having to

00:04:24,470 --> 00:04:30,590
reprovision hosts in order to get the

00:04:26,420 --> 00:04:35,690
same impact so this allows us by using

00:04:30,590 --> 00:04:38,870
both how much events and lambda2 extend

00:04:35,690 --> 00:04:41,600
AWS in a manner that AWS isn't there yet

00:04:38,870 --> 00:04:43,610
in the future they may be but it cost us

00:04:41,600 --> 00:04:46,520
so little and we don't have to maintain

00:04:43,610 --> 00:04:49,520
complex architectures it's a couple

00:04:46,520 --> 00:04:51,980
things of primitive tooling that exists

00:04:49,520 --> 00:04:54,290
already in order for us to extend it for

00:04:51,980 --> 00:04:56,210
our purposes well the future change

00:04:54,290 --> 00:04:58,490
hopefully and then we won't have to do

00:04:56,210 --> 00:05:01,790
that anymore but that that's a little

00:04:58,490 --> 00:05:03,860
bit of how we can extend AWS with AWS

00:05:01,790 --> 00:05:06,260
and you can do it too

00:05:03,860 --> 00:05:08,300
any idea that you can figure out there's

00:05:06,260 --> 00:05:11,300
publishers to watch events there's

00:05:08,300 --> 00:05:13,520
consumers on land us you can extend a

00:05:11,300 --> 00:05:15,940
vendors environment with your own

00:05:13,520 --> 00:05:23,910
concepts thank you very much

00:05:15,940 --> 00:05:23,910

YouTube URL: https://www.youtube.com/watch?v=2Txy9J3S1DY


