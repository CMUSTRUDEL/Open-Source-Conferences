Title: DevOpsDays Boston 2019 - Let's Get Ready for Chaotic Engineering by Suzan Mahboob
Publication date: 2019-10-11
Playlist: DevOpsDays Boston 2019
Description: 
	Let's Get Ready for Chaotic Engineering by Suzan Mahboob

It’s important to recognize not everyone can take on chaotic engineering, there are multiple factors that we have to take into consideration. production is extremely complex and we don’t always know how to untangle it. This talk will walk you through getting to a steady state, it will show attendees how to process map and prioritize systems issues as a team and then develop them into stand alone projects to get your environment to a steady state that can properly handle chaotic engineering. The talk focuses on what I term as pre- chaotic engineering and a larger focus on resilience engineering, building resilient systems that can withstand more experiments. it also walks through containment and blast radius, the importance of post mortars and incident reviews. It states that chaotic engineering is not cowboy engineering and you determine the risk you can handle the better you untangle your environment

#DevOpsDays #DevOpsDaysBoston
Captions: 
	00:00:01,550 --> 00:00:28,470
I had to change my talk to let's get ready because we want to be positive when we deal

00:00:28,470 --> 00:00:29,689
with prod.

00:00:29,689 --> 00:00:30,689
Right?

00:00:30,689 --> 00:00:31,689
Okay.

00:00:31,689 --> 00:00:33,120
So my talk is on chaos engineering.

00:00:33,120 --> 00:00:41,320
A few years ago I interviewed for a job for a company that was facing loss of incidents

00:00:41,320 --> 00:00:45,469
and stability issues I thought, sure, how bad can it be.

00:00:45,469 --> 00:00:51,289
All I probably need to do is update the latest version, slap some monitoring together, what's

00:00:51,289 --> 00:00:54,290
happening, maybe worst case refactor some code.

00:00:54,290 --> 00:00:56,739
I was wrong.

00:00:56,739 --> 00:01:01,159
Once inside I realized there was constant nightly incidents, siloed teams, lots of red

00:01:01,159 --> 00:01:05,870
tape and the support team that was tasked to stabilize the environment weren't the ones

00:01:05,870 --> 00:01:10,210
who built it or architected infrastructure.

00:01:10,210 --> 00:01:14,800
When we think of -- we think our systems look like this.

00:01:14,800 --> 00:01:20,400
Sometimes we overcommit because we're unaware of how tang willed it is.

00:01:20,400 --> 00:01:22,800
This is what we usually end up facing.

00:01:22,800 --> 00:01:24,780
Fires everywhere.

00:01:24,780 --> 00:01:29,290
I quickly learned the production environment was way more flex than I could have ever imagined

00:01:29,290 --> 00:01:31,620
and almost impossible to untangle.

00:01:31,620 --> 00:01:34,630
But a difficult prod is nothing new.

00:01:34,630 --> 00:01:42,610
We know networks fail, applications are dead, there are firewall issues and making the reason

00:01:42,610 --> 00:01:46,780
for my avengeable death, application owners code.

00:01:46,780 --> 00:01:53,410
If that wasn't scary enough I also didn't know where to begin to start poking with all

00:01:53,410 --> 00:01:55,680
the fear that I might break everything down.

00:01:55,680 --> 00:02:00,820
It made me realize that it is our job to ensure that the systems we're building is reliable

00:02:00,820 --> 00:02:01,820
and safe.

00:02:01,820 --> 00:02:07,580
But when we pull back the curtain what we see is a lot of complexities an we see chaos.

00:02:07,580 --> 00:02:09,830
Each of these boxes is a server or a host.

00:02:09,830 --> 00:02:13,641
These lines can showcase the system that are supposed to communicate to one another, but

00:02:13,641 --> 00:02:16,810
they don't.

00:02:16,810 --> 00:02:20,760
On top of all of that our systems today are the most complicated they've ever been.

00:02:20,760 --> 00:02:25,250
Before we were able to map things out and see what possibly could go wrong.

00:02:25,250 --> 00:02:27,990
We would ship out code once a month.

00:02:27,990 --> 00:02:29,090
Today it's different.

00:02:29,090 --> 00:02:34,400
Our focus is more on innovation and there's a pressure to execute with speed.

00:02:34,400 --> 00:02:36,010
Which means we're moving way faster.

00:02:36,010 --> 00:02:39,870
We're going from weeks to days to hours to minutes.

00:02:39,870 --> 00:02:47,280
The systems we tested yesterday are not the systems we're operating on today.

00:02:47,280 --> 00:02:50,690
Sometimes we know things are broken but we don't know how to fix it.

00:02:50,690 --> 00:02:51,690
There's a culture of fear.

00:02:51,690 --> 00:02:56,150
We fear we're going to take down our whole infrastructure if we start poking around.

00:02:56,150 --> 00:02:58,970
If I touch A will I break B?

00:02:58,970 --> 00:03:03,430
If we take a look at the basic premise of chaotic engineering, we may be able to start

00:03:03,430 --> 00:03:07,470
addressing some of these issues and maybe get to a starting point where we can stabilize

00:03:07,470 --> 00:03:10,820
prod.

00:03:10,820 --> 00:03:12,819
What is chaotic engineering?

00:03:12,819 --> 00:03:16,840
And what does that have to do with stability?

00:03:16,840 --> 00:03:23,060
Chaotic engineering is when you take a systems-based approach at scale and build confidence in

00:03:23,060 --> 00:03:26,840
the ability for these to with stand realistic everyday conditions.

00:03:26,840 --> 00:03:34,210
We learn best about the behavior by observing it during a controlled experiment.

00:03:34,210 --> 00:03:37,790
The more we build confidence in our systems, the more it can with stand.

00:03:37,790 --> 00:03:43,310
The more it can with stand, the more we can poke, the more it can with stand chaos.

00:03:43,310 --> 00:03:45,980
Planned and unplanned.

00:03:45,980 --> 00:03:47,250
That sounds like a great idea.

00:03:47,250 --> 00:03:51,860
Who wouldn't want to see how our systems behave with real-world event.

00:03:51,860 --> 00:03:56,970
How do you know what your system can handle and how it will react?

00:03:56,970 --> 00:04:05,420
Especially if you have a finicky prod environment.

00:04:05,420 --> 00:04:08,900
I would be too scared but that's what I was tasked with.

00:04:08,900 --> 00:04:12,000
I was tasked too stabilize an environment.

00:04:12,000 --> 00:04:17,180
How can I fix something if I have no insight into what my changes will impact?

00:04:17,180 --> 00:04:20,329
And if I'm too scared of the failures it will cause.

00:04:20,329 --> 00:04:25,870
We can take a look at the principles of chaotic engineering to get started.

00:04:25,870 --> 00:04:29,120
First and foremost we want to learn about what our vulnerabilities are and where they

00:04:29,120 --> 00:04:31,169
exist in our environment.

00:04:31,169 --> 00:04:34,490
Really how finicky is our prod environment.

00:04:34,490 --> 00:04:37,009
We don't want to wait for a fire to tell us what's wrong.

00:04:37,009 --> 00:04:42,330
If we take this approach and the principles of chaotic engineering throughout this talk,

00:04:42,330 --> 00:04:47,030
we can take a look and determine these factors.

00:04:47,030 --> 00:04:53,980
We will talk about what steady state is and what it is best utilized without putting our

00:04:53,980 --> 00:04:58,370
systems at risk for total failure and irreversible damage.

00:04:58,370 --> 00:05:02,430
We will continue the conversation by reviewing principles of chaotic engineering and how

00:05:02,430 --> 00:05:08,780
it can benefit any environment, no matter how fragile.

00:05:08,780 --> 00:05:12,430
To begin, you need to understand what is your steady state.

00:05:12,430 --> 00:05:17,229
No matter what if you want to practice chaotic engineering or not, I highly remedy fine your

00:05:17,229 --> 00:05:18,229
steady state.

00:05:18,229 --> 00:05:21,919
It is a good overall business practice.

00:05:21,919 --> 00:05:23,629
What defines a steady state?

00:05:23,629 --> 00:05:27,250
What if you think your environment is steady and you start to jump into experiments with

00:05:27,250 --> 00:05:31,249
chaotic engineering only to find cascading failures all over your system.

00:05:31,249 --> 00:05:37,039
A quick way to know if you have a steady state is to ask yourself is your system resilient

00:05:37,039 --> 00:05:40,229
to real-world events such as network failures.

00:05:40,229 --> 00:05:44,529
Go through your laws.

00:05:44,529 --> 00:05:47,810
If you know the answer is no, then you have some work to ado you before applying the principles

00:05:47,810 --> 00:05:49,319
of chaotic engineering.

00:05:49,319 --> 00:05:55,849
Defining your steady state is also being able to define what your system normal is.

00:05:55,849 --> 00:05:58,719
What is your normal.

00:05:58,719 --> 00:06:02,139
Your normal state and your steady state are two different things.

00:06:02,139 --> 00:06:05,449
If you're constantly putting out fires you're not in a steady state and your definition

00:06:05,449 --> 00:06:09,319
of normal is one where the environment is unstable.

00:06:09,319 --> 00:06:16,400
Getting to a healthy normal state is what I consider prechaotic engineering.

00:06:16,400 --> 00:06:22,139
You have to begin by knowing what is working and what is not.

00:06:22,139 --> 00:06:25,669
Weaknesses in your production environment, but if you're starting that chaotic engineering

00:06:25,669 --> 00:06:32,159
experiment will lead to a within your system there's no sense in running that experiment.

00:06:32,159 --> 00:06:36,009
Your normal state is not steady and you'll have to fix those weaknesses first.

00:06:36,009 --> 00:06:40,330
If your environment is always broken you'll have to harden your system to get to a steady

00:06:40,330 --> 00:06:41,330
state.

00:06:41,330 --> 00:06:44,900
Thus changing your idea of what normal is.

00:06:44,900 --> 00:06:46,050
Our goal is not to break anything.

00:06:46,050 --> 00:06:47,300
It is the opposite.

00:06:47,300 --> 00:06:51,949
We want systems running that are resilient that can stay up even when it's hacked.

00:06:51,949 --> 00:06:55,520
You need to know how that system fails, put that effort into hardening your system and

00:06:55,520 --> 00:06:58,619
elevate your normal to be one that is resilient.

00:06:58,619 --> 00:07:04,439
You have to get to a state where your normal condition can with stand chaotic engineering.

00:07:04,439 --> 00:07:07,710
Once you have a resilient working normal then you can define your steady state.

00:07:07,710 --> 00:07:13,629
Your steady state and your normal should be on par.

00:07:13,629 --> 00:07:16,199
What level of your environment is.

00:07:16,199 --> 00:07:17,990
There are different levels.

00:07:17,990 --> 00:07:22,689
Before setting up any experiments it's a good idea to evaluate your system and try to see

00:07:22,689 --> 00:07:27,389
which of the following your buckets your organization falls into.

00:07:27,389 --> 00:07:30,210
If you were to inject what would happen.

00:07:30,210 --> 00:07:33,930
Is your environment what I would consider fragile.

00:07:33,930 --> 00:07:39,449
Which of the four are you.

00:07:39,449 --> 00:07:46,719
There is resilient, able to take damage, avoid total failure and has the ability to recover.

00:07:46,719 --> 00:07:50,899
This is what we usually see in a candidate for chaotic engineering.

00:07:50,899 --> 00:07:52,870
Then there's robust.

00:07:52,870 --> 00:08:00,259
Your systems are stronger, it absorbs uncertainty and effectively manages damage or avoids it

00:08:00,259 --> 00:08:01,259
altogether.

00:08:01,259 --> 00:08:03,490
Antifragile is the most stable state.

00:08:03,490 --> 00:08:10,479
It is able to respond to stress, contain its health and is adaptable to any real-life problems.

00:08:10,479 --> 00:08:14,650
Knowing which level steady you are will help you plan your experiments and will help you

00:08:14,650 --> 00:08:18,550
understand what your system can with stand.

00:08:18,550 --> 00:08:19,651
So how fragile are you?

00:08:19,651 --> 00:08:27,490
There are a few ways to quickly understand if you are fragile or if you are resistant.

00:08:27,490 --> 00:08:31,289
Some quick questions you can ask yourself are you constantly putting out fires.

00:08:31,289 --> 00:08:38,960
Do you generally behave more reactively than proactively?

00:08:38,960 --> 00:08:41,940
Understanding how you and your systems will react when chaos occurs will help you better

00:08:41,940 --> 00:08:44,819
understand and prepare for it.

00:08:44,819 --> 00:08:48,170
Understanding which bucket your steady state falls into will help you.

00:08:48,170 --> 00:08:55,610
Obviously the more robust and antifragile your environment, the more you're able to

00:08:55,610 --> 00:08:59,519
push your experiment and poke your environment for gaps.

00:08:59,519 --> 00:09:03,470
To get an better idea for which bucket you fall into, it's a good idea to hypothesize

00:09:03,470 --> 00:09:08,700
how your system will react.

00:09:08,700 --> 00:09:13,080
If you were to inject failures, how will your system behave.

00:09:13,080 --> 00:09:17,690
This is a great learning experience.

00:09:17,690 --> 00:09:20,830
Hypothesizing will help you gain knowledge on your system and explore the possibilities

00:09:20,830 --> 00:09:22,399
of what can happen.

00:09:22,399 --> 00:09:26,560
Clearly defining your hypothesis will help you determine if you're ready.

00:09:26,560 --> 00:09:31,490
It gauges how confident you are about your systems.

00:09:31,490 --> 00:09:35,310
We should take a facts-based approach when defining our hypothesis.

00:09:35,310 --> 00:09:37,860
It's important we don't make any assumptions.

00:09:37,860 --> 00:09:42,880
We should base it on documentation, past failures and our personal experiences with our systems.

00:09:42,880 --> 00:09:48,079
We tend to know our systems best.

00:09:48,079 --> 00:09:51,380
We can also take a look at the quality of our current testing practices to predict how

00:09:51,380 --> 00:09:53,680
our systems would react.

00:09:53,680 --> 00:09:59,700
Chaotic engineering and testing go hand in hand.

00:09:59,700 --> 00:10:04,569
To get to the highest level of availability and resiliency you will have to have unit,

00:10:04,569 --> 00:10:09,950
regression, integration testing as well as chaotic engineering practices.

00:10:09,950 --> 00:10:14,440
Testing will help give you insight into your environment where chaotic engineering will

00:10:14,440 --> 00:10:23,779
help you -- I like to think testing tells you how your system behaves and chaotic engineering

00:10:23,779 --> 00:10:26,540
is designed to field weaknesses in your environment.

00:10:26,540 --> 00:10:33,770
Either way, this isn't about running experiments blindly and hoping things go well.

00:10:33,770 --> 00:10:39,240
Understanding practices also helps you get a good idea how to deal with chaotic engineering.

00:10:39,240 --> 00:10:44,060
Just like understanding your normal, it's important to ask yourself, are we doing a

00:10:44,060 --> 00:10:45,960
good job at testing.

00:10:45,960 --> 00:10:51,550
I'm not a tester and this was probably the biggest lesson I learned.

00:10:51,550 --> 00:10:55,130
With chaotic engineering we don't go into system without thoughtful, robust plans and

00:10:55,130 --> 00:10:59,389
a large piece of chaotic engineering is planned experiments.

00:10:59,389 --> 00:11:00,850
We start with initial planning.

00:11:00,850 --> 00:11:05,829
We start with one host, one container, one server and then scale up.

00:11:05,829 --> 00:11:09,750
We also don't start experiments in production.

00:11:09,750 --> 00:11:13,510
As we get to see how successful experiments are, we expand our radius.

00:11:13,510 --> 00:11:18,029
We minimize our risk, we ensure there is a comfort level with experiments starting in

00:11:18,029 --> 00:11:22,720
a testing environment and later going to chaos and run to production.

00:11:22,720 --> 00:11:26,880
I know, testing environments are not the same as prod.

00:11:26,880 --> 00:11:30,930
And if yourself is, I really, really want to meet you.

00:11:30,930 --> 00:11:32,579
It's important to start testing.

00:11:32,579 --> 00:11:37,769
So if you start to build your confidence there and establish a baseline before moving to

00:11:37,769 --> 00:11:41,139
prod, it will help you long-term.

00:11:41,139 --> 00:11:45,800
They will help better prepare you for the chaos you're about to incur.

00:11:45,800 --> 00:11:47,670
All right.

00:11:47,670 --> 00:11:52,920
So testing how much chaos an environment can handle and chaotic engineering identifies

00:11:52,920 --> 00:11:54,610
where our vulnerabilities are.

00:11:54,610 --> 00:12:00,339
But how do we know which systems are being impacted with our tests and experiments?

00:12:00,339 --> 00:12:04,260
Our hypothesis can only help us predict so much.

00:12:04,260 --> 00:12:07,990
Monitoring is a crucial piece of chaotic engineering.

00:12:07,990 --> 00:12:11,939
Just as you have to evaluate what your testing capabilities are, you also have to review

00:12:11,939 --> 00:12:19,590
your monitoring abilities inside your organization before taking on chaotic engineering.

00:12:19,590 --> 00:12:23,850
You have to review your monitoring abilities meaningful observability.

00:12:23,850 --> 00:12:29,149
With the current monitoring you have in your place, you can you see what your users are

00:12:29,149 --> 00:12:34,100
reporting or what your latency looks like or more importantly can you see your glass

00:12:34,100 --> 00:12:35,100
radius.

00:12:35,100 --> 00:12:40,959
If one of your experience are now having a larger impact than what you were expecting,

00:12:40,959 --> 00:12:45,510
are you able to see into that insight clearly?

00:12:45,510 --> 00:12:51,230
It's okay that testing didn't go as expected, but to truly succeed you need insight so you

00:12:51,230 --> 00:12:56,319
can tackle these issues that your experiment didn't account for.

00:12:56,319 --> 00:13:00,480
If you're just rolling out experiments and only accounting for gaps and you hypothesize,

00:13:00,480 --> 00:13:04,540
you're missing an opportunity to stabilize your environment.

00:13:04,540 --> 00:13:11,959
Instead of getting meaningless alerts trying to make sense of it all, it should be able

00:13:11,959 --> 00:13:16,750
to tell you where the impact was, who faulted the most and most importantly when to hit

00:13:16,750 --> 00:13:20,120
the big red stop button.

00:13:20,120 --> 00:13:24,449
You want to wonder what your blast radius is and what your failure systems are facing.

00:13:24,449 --> 00:13:29,970
I would also like to mention that any monitoring tool can be used with chaotic engineering.

00:13:29,970 --> 00:13:34,139
I know there are monitoring tools specifically build to work with chaotic engineering but

00:13:34,139 --> 00:13:38,879
when you're starting off I don't think you have to rebuild your monitoring practices,

00:13:38,879 --> 00:13:44,360
but you want key components to monitor and it can start with looking at your page alerts

00:13:44,360 --> 00:13:51,860
or your logs to get an idea of how to set up your monitoring and put your chaotic engineering

00:13:51,860 --> 00:13:54,649
testing to tie to it.

00:13:54,649 --> 00:14:01,360
Monitoring also plays a crucial role in cascading failures.

00:14:01,360 --> 00:14:04,450
Cascading failures are failures that often lie dormant for a long time until they are

00:14:04,450 --> 00:14:07,850
triggered by an unusual set of circumstances.

00:14:07,850 --> 00:14:13,820
Abundant revealed this offer was making some kind of assumption.

00:14:13,820 --> 00:14:16,040
Causing errors across the environment.

00:14:16,040 --> 00:14:18,730
This is a big issue with chaotic engineering.

00:14:18,730 --> 00:14:21,750
So hence why monitoring is so important.

00:14:21,750 --> 00:14:26,379
If your system is resilient it might be able to absorb the damage, but without monitoring

00:14:26,379 --> 00:14:30,860
you want to show others how they can be impacted.

00:14:30,860 --> 00:14:34,790
You need to be aware of all the damage happening in your infrastructure including the errors

00:14:34,790 --> 00:14:39,060
that are accounted for and it's important to mention that failures that occurred because

00:14:39,060 --> 00:14:44,259
of your experiment is not because chaotic engineering does not work or that it broke

00:14:44,259 --> 00:14:45,410
your system.

00:14:45,410 --> 00:14:46,670
That's incorrect.

00:14:46,670 --> 00:14:53,191
The culture has -- there was a bug, that could have been triggered at any point, but with

00:14:53,191 --> 00:14:57,829
chaotic engineering we were able to identify it, contain the blast radius, monitor and

00:14:57,829 --> 00:15:01,860
identify the potential impact and now we can go ahead and engineer the fix for it.

00:15:01,860 --> 00:15:06,420
The bug is going to come out no matter what.

00:15:06,420 --> 00:15:09,660
Without chaotic engineering we couldn't have been aware of the bug until a fire was caused

00:15:09,660 --> 00:15:11,269
bringing it to our attention.

00:15:11,269 --> 00:15:13,180
This is a very reactive mentality.

00:15:13,180 --> 00:15:16,220
We want to avoid perpetuating that kind of culture.

00:15:16,220 --> 00:15:19,810
That brings me to my next point, culture.

00:15:19,810 --> 00:15:27,350
Which I believe is a crucial piece in chaotic engineering to see if it's a good fit for

00:15:27,350 --> 00:15:29,860
your organization.

00:15:29,860 --> 00:15:33,870
Chaotic engineering has become a buzz word.

00:15:33,870 --> 00:15:42,569
I see blogs, we break prod, we test in prod and my favorite is we break things on purpose.

00:15:42,569 --> 00:15:45,950
When chaotic engineering has a reputation and emphasis on breaking things, it worries

00:15:45,950 --> 00:15:46,950
me.

00:15:46,950 --> 00:15:52,060
It worries me because it's impossible to sell failure as a service to your stakeholders.

00:15:52,060 --> 00:15:55,499
Chaotic engineering is not cowboy engineering.

00:15:55,499 --> 00:16:00,089
Our goal is to see what's vulnerable and how to fix it.

00:16:00,089 --> 00:16:05,860
It's crucial your organization the foundation of chaotic engineering is not to break anything

00:16:05,860 --> 00:16:11,149
but to act as a partner in helping build systems.

00:16:11,149 --> 00:16:16,019
How your organization views chaos will determine if they're ready for chaotic engineering.

00:16:16,019 --> 00:16:20,879
Do you have a culture that will embrace it.

00:16:20,879 --> 00:16:27,990
At least understand if your organization can be open to it ask yourself are we proactively

00:16:27,990 --> 00:16:29,200
embracing failure?

00:16:29,200 --> 00:16:32,019
Do we have a culture of no problem?

00:16:32,019 --> 00:16:38,620
Are we reviewing architectural designs and where the gaps are and where things can fail?

00:16:38,620 --> 00:16:42,120
If you're not currently reviewing your current state, then you likely aren't prioritizing

00:16:42,120 --> 00:16:51,470
your band width on stability, you might have to account for resources somewhere else.

00:16:51,470 --> 00:16:54,470
You can also look at your most incident reviews as an indicator.

00:16:54,470 --> 00:17:01,329
Do you plan action items.

00:17:01,329 --> 00:17:05,990
These questions can help determine how well your company will embrace chaotic engineering

00:17:05,990 --> 00:17:11,720
many you may also not want to call chaotic engineering.

00:17:11,720 --> 00:17:13,770
I like resilience engineering.

00:17:13,770 --> 00:17:15,290
Fragile system engineering.

00:17:15,290 --> 00:17:21,140
It's a lot easier to sell an idea without the word chaos in it.

00:17:21,140 --> 00:17:28,990
I never push chaotic engineering but I try to approach teams who are looking to opt it.

00:17:28,990 --> 00:17:33,790
As you work with them, identify successes and show them the value of chaotic engineering.

00:17:33,790 --> 00:17:40,180
The ideas that chaotic engineering is going to be planned out, we start small, we're not

00:17:40,180 --> 00:17:44,350
going to start off our first experiment on their largest deployment.

00:17:44,350 --> 00:17:49,410
We want them to understand that the failure is likely to occur inevitably but with chaotic

00:17:49,410 --> 00:17:53,430
engineering we can help better manage that failure with them.

00:17:53,430 --> 00:17:56,200
We want to per pet out a culture where failure is okay.

00:17:56,200 --> 00:18:01,520
An inclusive culture that embraces failure and understands why failures helps build better

00:18:01,520 --> 00:18:02,520
systems.

00:18:02,520 --> 00:18:08,260
If you have a steady state defined, you know what your normal is.

00:18:08,260 --> 00:18:10,830
And your normal is resilient and stable.

00:18:10,830 --> 00:18:12,750
You have adequate testing practices.

00:18:12,750 --> 00:18:15,620
You have monitoring.

00:18:15,620 --> 00:18:17,640
To manage the blast radius.

00:18:17,640 --> 00:18:22,110
And you're submitted to start small and your work culture embraces chaotic engineering

00:18:22,110 --> 00:18:27,820
you would think you're ready for chaotic engineering, no.

00:18:27,820 --> 00:18:29,250
Communication and documentation.

00:18:29,250 --> 00:18:36,310
It's a crucial piece you have to have in place prior to taking on chaotic engineering.

00:18:36,310 --> 00:18:42,560
You need strong architectural designs.

00:18:42,560 --> 00:18:46,060
Communication is key as well because chaotic engineering is a collaborative approach and

00:18:46,060 --> 00:18:47,060
you need by buy-in.

00:18:47,060 --> 00:18:50,460
All you need to know the experiment is running.

00:18:50,460 --> 00:18:54,180
If you don't communicate what you're doing, people will learn your name very quickly and

00:18:54,180 --> 00:18:56,520
for the wrong reasons.

00:18:56,520 --> 00:19:00,220
I believe it's really important to advertise your experiments.

00:19:00,220 --> 00:19:03,610
Although there is a school of thought that may disagree with this, says you can't really

00:19:03,610 --> 00:19:09,300
practice chaotic engineering if you know it's coming, and that could be its own talk in

00:19:09,300 --> 00:19:10,300
itself.

00:19:10,300 --> 00:19:13,380
But they are wrong and I am right.

00:19:13,380 --> 00:19:14,442
[ Laughter ] I'm just joking.

00:19:14,442 --> 00:19:17,600
It's just another school of thought and this is a good time to explore how you want to

00:19:17,600 --> 00:19:23,960
run your chaos practices depending on your own organization.

00:19:23,960 --> 00:19:28,740
With strong testing a culture that embraces failure, communication, documentation and

00:19:28,740 --> 00:19:37,120
monitoring you should see more stability in your environment.

00:19:37,120 --> 00:19:41,180
Understand and untangle your prod, get to a steady state and harden your environment

00:19:41,180 --> 00:19:43,360
to always with stand fires.

00:19:43,360 --> 00:19:48,030
You should slowly start to move from a fragile environment to a resilient one to robust to

00:19:48,030 --> 00:19:52,540
eventually an antifragile environment where an environment responds to stress by automatically

00:19:52,540 --> 00:20:00,510
mutating, it's able to maintain its strength and adapt change without failure.

00:20:00,510 --> 00:20:05,240
If you don't have a foundational piece as mentioned, then you're not ready for chaotic

00:20:05,240 --> 00:20:06,240
engineering.

00:20:06,240 --> 00:20:08,660
I know that's a hard pill to swallow.

00:20:08,660 --> 00:20:11,000
All these cool companies are doing it.

00:20:11,000 --> 00:20:16,200
But not everything that these companies push out are great ideas for you.

00:20:16,200 --> 00:20:17,890
For example, Google Glasses.

00:20:17,890 --> 00:20:22,700
We don't always have to buy the shiny new object.

00:20:22,700 --> 00:20:28,830
Sometimes it's better to define our normal and develop practices that work for us.

00:20:28,830 --> 00:20:32,910
But if you're uncomfortable with practicing chaotic engineering, go ahead and inject failures

00:20:32,910 --> 00:20:34,570
into system.

00:20:34,570 --> 00:20:40,250
It's not a blocker and it is there to help get your releases and better your environment.

00:20:40,250 --> 00:20:45,511
So we're getting more comfortable with chaotic engineering, what kinds of experiments do

00:20:45,511 --> 00:20:47,200
you want to start with?

00:20:47,200 --> 00:20:57,830
With chaos monkey you can virtual machine instances, submit fail requests between services,

00:20:57,830 --> 00:21:01,110
make a small region, which is backed up unavailable.

00:21:01,110 --> 00:21:02,760
Just to see what happens.

00:21:02,760 --> 00:21:07,180
These are all great examples of starting with chaos monkey, you about the most crucial part

00:21:07,180 --> 00:21:08,990
is starting small.

00:21:08,990 --> 00:21:13,640
It's important to track your lessons learned, take a systematic approach to chaos testing.

00:21:13,640 --> 00:21:18,930
Don't wait too long to start load testing and test your system constantly so you feel

00:21:18,930 --> 00:21:23,770
confident it can withstand full chaos engineering.

00:21:23,770 --> 00:21:29,540
Your system can withstand these failures.

00:21:29,540 --> 00:21:34,430
You are ready to start planning more complicated experiments.

00:21:34,430 --> 00:21:41,410
You can change firewall rules, review recent disrupts and recreate them.

00:21:41,410 --> 00:21:43,660
You're able to go bigger.

00:21:43,660 --> 00:21:47,420
This will showcase your organization's growing appetite.

00:21:47,420 --> 00:21:51,950
This will test your documentation as well as your company's ability to communicate.

00:21:51,950 --> 00:21:56,350
It will challenge your testing practices you have in place and it will test your organization's

00:21:56,350 --> 00:21:58,380
culture.

00:21:58,380 --> 00:22:04,490
I remember one time like I was running chaos monkey and one of my line of businesses asked

00:22:04,490 --> 00:22:06,920
me to turn it off for a large deployment.

00:22:06,920 --> 00:22:10,420
So it shows they weren't ready, to scale at such a level.

00:22:10,420 --> 00:22:14,770
It continued to get a little bigger each time.

00:22:14,770 --> 00:22:18,110
Set up experiments in dev and make your work way your to prod.

00:22:18,110 --> 00:22:24,620
You can create things that already happened, just ensure you have a roll-back plan.

00:22:24,620 --> 00:22:31,990
As you get familiar with chaos monkey, you can move to latency monkey, janitor monkey

00:22:31,990 --> 00:22:34,250
and so on.

00:22:34,250 --> 00:22:40,460
But no matter how antifragile your environment becomes, I want to stress the significance

00:22:40,460 --> 00:22:44,160
of containment and blast radius.

00:22:44,160 --> 00:22:50,070
You must follow best practices.

00:22:50,070 --> 00:22:52,540
Communication, communication.

00:22:52,540 --> 00:22:54,050
Start small to disprove your hypothesis.

00:22:54,050 --> 00:23:04,020
SMEs are available, where you can avoid important dates and also have a role-back plan.

00:23:04,020 --> 00:23:09,060
Reduce any unnecessary risk and shake that chaotic engineering is too risky.

00:23:09,060 --> 00:23:16,000
Involve your team and stakeholders as to why their system gaps and permanently fix them.

00:23:16,000 --> 00:23:21,300
Also get familiar with the different rules that chaotic engineering offers.

00:23:21,300 --> 00:23:24,620
And no matter what, you have to recognize failures are inevitable.

00:23:24,620 --> 00:23:27,230
No matter how resilient your environment.

00:23:27,230 --> 00:23:32,480
You need to take calculated risks and if you plan accordingly, we should end up with better

00:23:32,480 --> 00:23:33,480
systems.

00:23:33,480 --> 00:23:35,600
We want to have confidence that our systems can with stand fires.

00:23:35,600 --> 00:23:39,900
Over time the more we test, the more we poke, the more we fix our environment and the more

00:23:39,900 --> 00:23:41,940
our systems become more resilient.

00:23:41,940 --> 00:23:44,870
What doesn't kill you makes you stronger.

00:23:44,870 --> 00:23:45,870
Except for bears.

00:23:45,870 --> 00:23:47,150
Bears will kill you.

00:23:47,150 --> 00:23:53,520
So manage your risk.

00:23:53,520 --> 00:24:00,420
That's disproving your hypothesis.

00:24:00,420 --> 00:24:02,910
If your steady state was impacted by an experiment.

00:24:02,910 --> 00:24:06,011
If you found something, this would be the time to go ahead and fix it.

00:24:06,011 --> 00:24:10,160
It is important that you prioritize this work.

00:24:10,160 --> 00:24:14,960
It's important to work in an organization where you're encouraged to take ownership

00:24:14,960 --> 00:24:16,500
in bettering your system.

00:24:16,500 --> 00:24:23,870
If we are using chaos engineering to identify system issues, it's important to fix the issues.

00:24:23,870 --> 00:24:27,160
This is great because you're bettering your systems and your systems will be in a better

00:24:27,160 --> 00:24:33,130
state each and every time with to with stand more chaos.

00:24:33,130 --> 00:24:35,260
The more antifragile your system becomes.

00:24:35,260 --> 00:24:41,120
My name is Suzan Mahoob and the slides will be available on my LinkedIn and I will share

00:24:41,120 --> 00:24:42,340
it with the organizers as well.

00:24:42,340 --> 00:24:44,169
And I thank you for coming to my talk.

00:24:44,169 --> 00:24:44,370

YouTube URL: https://www.youtube.com/watch?v=9gU9pzBpwwI


