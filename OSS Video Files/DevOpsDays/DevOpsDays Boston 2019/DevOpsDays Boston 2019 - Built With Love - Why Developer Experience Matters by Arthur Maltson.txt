Title: DevOpsDays Boston 2019 - Built With Love - Why Developer Experience Matters by Arthur Maltson
Publication date: 2019-10-11
Playlist: DevOpsDays Boston 2019
Description: 
	Built With ❤️ - Why Developer Experience Matters by Arthur Maltson

One evening you’re browsing Twitter and you stumble on a really cool new Open Source tool. The README is intuitive, the installation is seamless and you’re up and running in no time. When using the tool, error messages are clear and how to fix the issues obvious. Before you know it, you’ve achieved what you wanted and you feel like a superstar! But the experience is very different the next day at work. You just spent a couple weeks fiddling to get a project running locally but now you have to jump through hoops to get the application built and deployed with that dreadful internal tool. Why can’t our day time experiences look like our weekend passion projects? It can!

In this session you’ll be introduced to the concept of Developer Experience and why it matters. You’ll then embark on a journey to build a new tool with Developer Experience as a core focus. You’ll learn how certain targeted approaches can improve the Developer Experience through the entire Experience Lifecycle. At the end of the talk you will be equipped with ways to improve the Developer Experience in your work; whether you’re building tools for developers, collaborating with other developers on a business project, or just building a side project one your own.

#DevOpsDays #DevOpsDaysBoston
Captions: 
	00:00:01,490 --> 00:00:03,830
Awesome.

00:00:03,830 --> 00:00:20,929
I didn't know there would be a stage there like this, otherwise I would have done everything

00:00:20,929 --> 00:00:22,340
in song and dance form.

00:00:22,340 --> 00:00:26,780
We'll have to settle for just a talk.

00:00:26,780 --> 00:00:27,900
Awesome.

00:00:27,900 --> 00:00:32,850
As Laura said, I'm Arthur Maltson and I'm here to talk to you about built with love

00:00:32,850 --> 00:00:35,320
why developer experience matters.

00:00:35,320 --> 00:00:39,950
When I say developer, I don't just mean developer, I mean operators, designers.

00:00:39,950 --> 00:00:43,460
Basically any technical tool user.

00:00:43,460 --> 00:00:46,340
So I'm just using developer as a shorthand.

00:00:46,340 --> 00:00:50,150
And before we start talking about developer experience, I want to start with something

00:00:50,150 --> 00:00:56,080
that's probably closer and more familiar, and that's user experience.

00:00:56,080 --> 00:01:02,980
And if we boil down and over simplify user experience, the idea is to take an customer

00:01:02,980 --> 00:01:10,810
and apply functionality, aesthetics, design and turn them into happy.

00:01:10,810 --> 00:01:19,649
So if we look back really not even that long ago, to 2005, the web used to look like this.

00:01:19,649 --> 00:01:20,649
Right?

00:01:20,649 --> 00:01:28,280
And sense then something like MapQuest looks like this in the modern day and it's of course

00:01:28,280 --> 00:01:33,060
mobile friendly and scales and so forth.

00:01:33,060 --> 00:01:35,250
But how did we get there?

00:01:35,250 --> 00:01:40,159
Did we just sprinkle a bunch of magic pixie dust on the website and turn it into this

00:01:40,159 --> 00:01:41,939
awesome experience?

00:01:41,939 --> 00:01:42,939
No.

00:01:42,939 --> 00:01:44,219
Of course not.

00:01:44,219 --> 00:01:54,609
We did a bunch of research, which was then in knowledge that people later took their

00:01:54,609 --> 00:02:01,159
design and creative skills, combined with engineering prowess to get to build these

00:02:01,159 --> 00:02:03,819
awesome experiences.

00:02:03,819 --> 00:02:09,399
But if you think about it, has the web fundamentally changed since 2005?

00:02:09,399 --> 00:02:20,700
I mean, we still have Javascript and TSS is more fancy, but fundamentally the web of 2005

00:02:20,700 --> 00:02:25,040
still had many of the same building blocks we have today.

00:02:25,040 --> 00:02:31,830
What it took was a perspective change that user experience is important and that we should

00:02:31,830 --> 00:02:33,260
invest in it.

00:02:33,260 --> 00:02:38,450
And you'll note, I put up MapQuest and people are like who the hell cares about MapQuest.

00:02:38,450 --> 00:02:46,370
But if you look in 2005 when Google maps launched, it wasn't that drastic of a difference.

00:02:46,370 --> 00:02:48,950
It didn't have traffic and so forth.

00:02:48,950 --> 00:02:55,570
But the thing is, Google had made the perspective change that user experience is important and

00:02:55,570 --> 00:03:01,530
building on the same core technologies that MapQuest was using, they're able to build

00:03:01,530 --> 00:03:04,870
a much better experience.

00:03:04,870 --> 00:03:06,780
The question is why did this change?

00:03:06,780 --> 00:03:10,640
What was the drastic change since then and now.

00:03:10,640 --> 00:03:17,300
Companies found with a little bit of investment they saw a huge increase in usage which then

00:03:17,300 --> 00:03:20,730
led to return on investment.

00:03:20,730 --> 00:03:25,520
A company that saw this early on before the dawn of the Internet was Apple with their

00:03:25,520 --> 00:03:30,170
famous presentation.

00:03:30,170 --> 00:03:35,230
They looked across the industry and saw all those beige, boring, PC boxes and said we

00:03:35,230 --> 00:03:37,390
need to do something different.

00:03:37,390 --> 00:03:44,340
We need to have something that's not only more aesthetically pleasing but more functional.

00:03:44,340 --> 00:03:51,030
Steve Jobs talked about it's not just aesthetics, it's also the functionality.

00:03:51,030 --> 00:03:53,210
It's not just Apple.

00:03:53,210 --> 00:04:00,690
Google talks about how in the first 50miliseconds a customer will get a gut feel for your website

00:04:00,690 --> 00:04:02,890
and whether to trust it or not.

00:04:02,890 --> 00:04:11,720
And in my favorite quote they talk about how with every dollar invested in ease in use,

00:04:11,720 --> 00:04:16,530
they saw a 10 or $100 return on investment.

00:04:16,530 --> 00:04:18,209
So that's user experience.

00:04:18,209 --> 00:04:24,090
Looking back a bit more than a decade we see all of the value we kind of left at the table

00:04:24,090 --> 00:04:27,039
by not investing in user experience.

00:04:27,039 --> 00:04:34,970
The question is, what are we missing out on today by not investing in developer experience.

00:04:34,970 --> 00:04:38,620
Before we get there, you might be wondering what is developer experience.

00:04:38,620 --> 00:04:44,600
If we boil it down, it's taking an angry develop ever who's not happy with the tool that they're

00:04:44,600 --> 00:04:49,530
using, applying a bunch of techniques, some of which we'll talk about here, and talking

00:04:49,530 --> 00:04:53,380
them into happy users.

00:04:53,380 --> 00:05:08,110
And someone who saw this early on -- So what are we missing out on by not focusing

00:05:08,110 --> 00:05:10,300
on developer experience today?

00:05:10,300 --> 00:05:13,479
I'm going to argue we're missing out on three key things.

00:05:13,479 --> 00:05:21,960
The first is fiscal, the next is mental energy, and the last is developer morale or decrease

00:05:21,960 --> 00:05:25,960
in morale.

00:05:25,960 --> 00:05:35,020
Developers in this field, I'm using developers in shorthand, make pretty good money.

00:05:35,020 --> 00:05:38,499
All things considered, this is a good field to be in.

00:05:38,499 --> 00:05:41,180
Obviously a team of developers cost a lot of money.

00:05:41,180 --> 00:05:49,099
And if you have a team of developers spending most of their time, two weeks, for example,

00:05:49,099 --> 00:05:54,439
configuring their work station, that's a huge investment in not working on the product and

00:05:54,439 --> 00:05:56,969
adding new features.

00:05:56,969 --> 00:05:58,539
That's the fiscal side.

00:05:58,539 --> 00:06:00,999
Let's look at the mental energy.

00:06:00,999 --> 00:06:07,099
There's a really good analogy out there about representing everybody's mental energy in

00:06:07,099 --> 00:06:08,340
the form of coins.

00:06:08,340 --> 00:06:13,809
And every day, depending how you're feeling, you wake up with a different set of coins

00:06:13,809 --> 00:06:17,229
that you can spend on decisions and actions.

00:06:17,229 --> 00:06:21,909
For many of you here in the U.S. you may be wondering what the heck are those.

00:06:21,909 --> 00:06:26,500
Those are the dollar coin in Canada.

00:06:26,500 --> 00:06:29,199
They're called loonies because they have a loon on them.

00:06:29,199 --> 00:06:32,180
They might also be loony, I'm not sure.

00:06:32,180 --> 00:06:34,430
Fun fact, we also have toonies.

00:06:34,430 --> 00:06:40,120
But I digress.

00:06:40,120 --> 00:06:45,469
Every time you make a decision or get frustrated by something and have to get distracted and

00:06:45,469 --> 00:06:48,680
diverted, you're spending a coin.

00:06:48,680 --> 00:06:55,009
And somebody who saw early on the importance of this, and optimizing your decision-making

00:06:55,009 --> 00:06:56,409
is Steve Jobs.

00:06:56,409 --> 00:07:01,589
One of the things that he talked about in his biography is he wore the black turtleneck

00:07:01,589 --> 00:07:09,479
and jeans every day, that was all he had, so he didn't have to spend decision energy

00:07:09,479 --> 00:07:12,190
on what he's going to wear that day.

00:07:12,190 --> 00:07:17,000
So next time you run into an error and you have to Google it on stack overflow, that's

00:07:17,000 --> 00:07:18,460
a coin.

00:07:18,460 --> 00:07:26,370
Maybe you bang your head against a missing semi-colon for three hours and you spend coins.

00:07:26,370 --> 00:07:33,569
Having that core developer experience makes you spend a lot of mental energy.

00:07:33,569 --> 00:07:37,370
And the last one is morale, right?

00:07:37,370 --> 00:07:42,220
Every time we started a new company or on a new project, we're often really excited.

00:07:42,220 --> 00:07:46,439
Some new and build something exciting.

00:07:46,439 --> 00:07:52,991
And as the poor developer experience of the tools we use continues to grind on us, we're

00:07:52,991 --> 00:08:02,620
just ready to -- that's kind of a morale aspect.

00:08:02,620 --> 00:08:09,839
So again, not investing in developer experience today is costing us, at least from my perspective,

00:08:09,839 --> 00:08:14,610
fiscal mental energy and morale.

00:08:14,610 --> 00:08:17,419
But what do we do about it?

00:08:17,419 --> 00:08:20,770
That sounds great, but what do we do in there's a lot we can do.

00:08:20,770 --> 00:08:25,050
Before we start looking at what we can do, we need to break down developer experience

00:08:25,050 --> 00:08:27,689
into two main categories.

00:08:27,689 --> 00:08:33,560
The first category is developer experience of you as a tool author building tools for

00:08:33,560 --> 00:08:36,599
other developers to use it.

00:08:36,599 --> 00:08:42,430
And the second, and a major facet is working with other developers on a project.

00:08:42,430 --> 00:08:45,490
So the developer experience is working on a project together.

00:08:45,490 --> 00:08:49,560
And the reason I split this into two main categories will become more evident as we

00:08:49,560 --> 00:08:55,339
look at the specific implementation and improvements.

00:08:55,339 --> 00:09:00,490
And if we look at how do we improve it, we need to look at the experience lifecycle.

00:09:00,490 --> 00:09:05,500
And what I mean by that is from the start of using a project or starting to work on

00:09:05,500 --> 00:09:11,940
a project with somebody else to maybe making that first commit or making that first change,

00:09:11,940 --> 00:09:17,690
to your day-to-day interactions on the tool, and finally, to the retirement.

00:09:17,690 --> 00:09:20,519
Because everything kind of comes to an end.

00:09:20,519 --> 00:09:23,990
And we often don't talk about that.

00:09:23,990 --> 00:09:30,340
So everything we're going to talk about today, all the concepts are going to be translatable,

00:09:30,340 --> 00:09:36,649
whether you're a front-end developer, a back-end developer or working on DevOps tooling, the

00:09:36,649 --> 00:09:42,110
specific implementation is going to be different, obviously depending on the tool, but the concept

00:09:42,110 --> 00:09:44,620
should be translatable.

00:09:44,620 --> 00:09:49,959
And finally, the lens that we need to take every time we're trying to improve developer

00:09:49,959 --> 00:09:52,490
experience, is one of empathy.

00:09:52,490 --> 00:09:59,370
I really love this graphic from this comic from grammarly that kind of distinguishes

00:09:59,370 --> 00:10:01,139
sympathy and empathy.

00:10:01,139 --> 00:10:04,819
We don't want to say that sucks and leave it at that.

00:10:04,819 --> 00:10:08,680
We want to say yeah, that sucks and let's work together to improve it.

00:10:08,680 --> 00:10:15,279
That's the heart of developer experience is bringing empathy to our customers and to ourselves

00:10:15,279 --> 00:10:16,279
as well.

00:10:16,279 --> 00:10:17,279
All right.

00:10:17,279 --> 00:10:18,410
Let's get concrete.

00:10:18,410 --> 00:10:23,529
Let's put on our steel-toed boots, let's talk about a specific problem that we're going

00:10:23,529 --> 00:10:26,660
to solve developer.

00:10:26,660 --> 00:10:33,110
That problem is pair programming.

00:10:33,110 --> 00:10:38,740
As you probably know one of the big problems with pair programming is getting that proper

00:10:38,740 --> 00:10:39,870
attribution.

00:10:39,870 --> 00:10:42,920
Those sweet GitHub squares.

00:10:42,920 --> 00:10:48,870
How do you get attributed for the pairing that you're doing.

00:10:48,870 --> 00:10:52,611
There's a lot of tools out there today and one of them is called Pair Up.

00:10:52,611 --> 00:10:58,420
Pair Up has been around for a while.

00:10:58,420 --> 00:11:08,319
It changes its git author name and author email name to the different people that are

00:11:08,319 --> 00:11:09,319
pairing.

00:11:09,319 --> 00:11:13,820
Now as you can probably tell, one of the problems with that is going to be you can only pair.

00:11:13,820 --> 00:11:19,090
Because there's only two switches there in git.

00:11:19,090 --> 00:11:23,850
It doesn't accurately represent how the work is being done.

00:11:23,850 --> 00:11:28,080
It's not saying two people authored it.

00:11:28,080 --> 00:11:38,569
Fortunately, about a year and a half ago, GitHub released a feature that's considered

00:11:38,569 --> 00:11:45,910
a standard in the git community where you add this common trailer that said co-authored

00:11:45,910 --> 00:11:51,100
by, and that attributes the commit to multiple authors.

00:11:51,100 --> 00:11:57,149
And the best part of that is that you can actually do as many author commits as you

00:11:57,149 --> 00:11:58,660
want.

00:11:58,660 --> 00:12:02,510
Up to 12, 14 people and it works beautifully.

00:12:02,510 --> 00:12:07,750
But the challenge is, Pair Up doesn't support this.

00:12:07,750 --> 00:12:13,970
What we're going to do together, and again, I'm just using this as an example, as a scaffold

00:12:13,970 --> 00:12:17,310
to show you how to improve developer experience.

00:12:17,310 --> 00:12:24,839
We're going to build a new tool that replaces Pair Up and uses this coauthored by concepts.

00:12:24,839 --> 00:12:32,550
Now the first thing we need to build a new tool is a snazzy name.

00:12:32,550 --> 00:12:34,890
What can we call it?

00:12:34,890 --> 00:12:38,170
Let's go with Mob Up.

00:12:38,170 --> 00:12:40,100
Let's keep it simple.

00:12:40,100 --> 00:12:46,779
So we're going to talk about improving or building Mob Up together and looking at how

00:12:46,779 --> 00:12:52,220
do we improve the developer experience throughout the experience lifecycle and we're going to

00:12:52,220 --> 00:12:55,329
start working together.

00:12:55,329 --> 00:13:01,940
So when we get started, one of the first things we feel when we open up a new code base and

00:13:01,940 --> 00:13:07,100
we're working together on something like mob up is like where the hell am I.

00:13:07,100 --> 00:13:13,920
It's a new code base, how does data flow through the system, this is often a big problem.

00:13:13,920 --> 00:13:16,650
How do we improve this developer experience?

00:13:16,650 --> 00:13:20,040
Well, we can use sequence diagrams.

00:13:20,040 --> 00:13:23,090
I know, a little old school.

00:13:23,090 --> 00:13:31,870
But with a light touch, we could model something like pair-up like this, where we can model

00:13:31,870 --> 00:13:37,879
the interaction and the collaboration of classes or objects or whatever you want to call them

00:13:37,879 --> 00:13:41,410
across the data going through the system.

00:13:41,410 --> 00:13:46,879
And you might bemoan that I have to open up MS Paint and start drawing it.

00:13:46,879 --> 00:13:54,860
Fear not you can model all of this as code using a tool.

00:13:54,860 --> 00:14:03,939
And my favorite part is pledge has a VS plug-in that automatically renders the sequence diagram.

00:14:03,939 --> 00:14:14,129
Awesome develop experience would be to have data flow diagram showing you how data flows

00:14:14,129 --> 00:14:17,130
through the system and how the classes interact.

00:14:17,130 --> 00:14:23,600
We're ready to make our first commit and our first pull request.

00:14:23,600 --> 00:14:31,220
Even if we have the builds all working locally, this is still kind of a nervous action to

00:14:31,220 --> 00:14:32,500
make that first pull request.

00:14:32,500 --> 00:14:37,990
You're not sure did I miss anything.

00:14:37,990 --> 00:14:43,139
This is where a really cool feature in GitHub and GitLab and also a bunch of others have

00:14:43,139 --> 00:14:50,680
it called pull request templates and using that to model a checklist that looks like

00:14:50,680 --> 00:14:51,680
this.

00:14:51,680 --> 00:14:56,189
As humans, filling of checklist is super gratifying.

00:14:56,189 --> 00:15:03,509
We can help guide not only new contributors but also old hats to remind you of what things

00:15:03,509 --> 00:15:08,879
you might have missed.

00:15:08,879 --> 00:15:11,910
Consider adding a pull request check.

00:15:11,910 --> 00:15:18,579
Moving on to our day-to-day interactions, working together on a tool like Mob Up.

00:15:18,579 --> 00:15:20,410
What does that look like?

00:15:20,410 --> 00:15:27,670
Well, one of the first things to kind of help improve working together, once you have a

00:15:27,670 --> 00:15:32,600
team that's larger than a couple of people, it's really hard to keep track of what's happening,

00:15:32,600 --> 00:15:35,699
what's been changing.

00:15:35,699 --> 00:15:43,029
And one of the things that has helped people a lot over the years is writing a change log.

00:15:43,029 --> 00:15:45,649
Writing change logs are frustrating.

00:15:45,649 --> 00:15:51,860
Please don't take out that frustration when you write the change log.

00:15:51,860 --> 00:15:55,769
But one of the things that's frustrated with writing a change log is the same thing that's

00:15:55,769 --> 00:16:00,620
frustrating you have a blank sheet of paper.

00:16:00,620 --> 00:16:02,430
What do you do with it.

00:16:02,430 --> 00:16:05,189
It's not actually paper, but you know what I mean.

00:16:05,189 --> 00:16:10,760
So fortunately there's a lot of really good guides out there, my favorite is keep a change

00:16:10,760 --> 00:16:11,760
log.

00:16:11,760 --> 00:16:18,370
And once you have some structure, it's actually pretty easy to start to fill out what's been

00:16:18,370 --> 00:16:19,620
changing.

00:16:19,620 --> 00:16:28,550
And for a tool like mob up isn't only helpful for people like us, but it also helps our

00:16:28,550 --> 00:16:31,699
users to know what's happening and what's changing.

00:16:31,699 --> 00:16:33,779
All right.

00:16:33,779 --> 00:16:39,529
Having an awesome day-to-day experience, keep a change log.

00:16:39,529 --> 00:16:42,370
So last part.

00:16:42,370 --> 00:16:46,139
No matter how much we work on something at some point, it's going to be retired.

00:16:46,139 --> 00:16:50,330
I know this isn't something we often think about.

00:16:50,330 --> 00:16:56,249
But one of the big things with retirement code base is even if we're kind of disappointed

00:16:56,249 --> 00:17:03,880
and sad that it's changing, if we just leave the project as is, in the future somebody

00:17:03,880 --> 00:17:10,230
might stumble on it and think, hm, this is an interesting chest of information and they

00:17:10,230 --> 00:17:15,809
may open it up and say look at all this code that I can start using and they're getting

00:17:15,809 --> 00:17:16,809
excited.

00:17:16,809 --> 00:17:21,370
They may be making a pull request to it and nobody is responding.

00:17:21,370 --> 00:17:26,890
So how do we tie up our project and retire it in a nice, clean fashion.

00:17:26,890 --> 00:17:32,310
Well, the first thing is aside from marking it as deprecated, one of the things that I

00:17:32,310 --> 00:17:41,500
think is valuable to do, is make sure to close off all the issues that shows that the project

00:17:41,500 --> 00:17:43,930
isn't active.

00:17:43,930 --> 00:17:46,210
People can get confused.

00:17:46,210 --> 00:17:51,720
But the other aspect of doing that is to keep the code in a clean state.

00:17:51,720 --> 00:17:55,670
Not only because you might come back to it in years from the future.

00:17:55,670 --> 00:18:02,510
Maybe Mob Up will become popular again and we'll want to add to it, but also because

00:18:02,510 --> 00:18:06,570
as developers we often go back and copy-paste our old code.

00:18:06,570 --> 00:18:11,669
And if we keep that old code in a good working state, that makes it easier for us.

00:18:11,669 --> 00:18:17,350
And it makes it obvious to other people that it's not in use.

00:18:17,350 --> 00:18:20,820
And the other big one is archive the project.

00:18:20,820 --> 00:18:25,659
Many of today's source control systems have this feature.

00:18:25,659 --> 00:18:28,049
Archive it and mark it as read only.

00:18:28,049 --> 00:18:34,279
So having an awesome developer experience, retiring the project.

00:18:34,279 --> 00:18:40,400
We want to leave the code in a good working state, and you want to archive it.

00:18:40,400 --> 00:18:47,730
So let's look over how do we have an awesome developer experience working on a tool like

00:18:47,730 --> 00:18:48,940
mobup?

00:18:48,940 --> 00:19:02,060
First we have a data sequence program, a check log and a code state.

00:19:02,060 --> 00:19:06,570
Let's move on to the next aspect.

00:19:06,570 --> 00:19:12,860
And that is improving the experience working as a tool author for the people who are working

00:19:12,860 --> 00:19:14,690
on our tool.

00:19:14,690 --> 00:19:17,840
Before we do that we're going to have to do a tangent.

00:19:17,840 --> 00:19:19,650
Bear with me.

00:19:19,650 --> 00:19:24,460
We need a tangent to determine what kind of tool we're going to build.

00:19:24,460 --> 00:19:29,539
And my argument is we should build tools that meet developers where they're at.

00:19:29,539 --> 00:19:31,370
In their mother's basement?

00:19:31,370 --> 00:19:32,370
No.

00:19:32,370 --> 00:19:34,090
I mean at a start-up conference?

00:19:34,090 --> 00:19:35,260
No no.

00:19:35,260 --> 00:19:36,669
You can find developers there.

00:19:36,669 --> 00:19:42,530
But what I really mean is meeting developers where they're at in terms of the tools they're

00:19:42,530 --> 00:19:43,530
using.

00:19:43,530 --> 00:19:49,900
And that's day-to-day, they're in the text editor or IDE of choice and they're running

00:19:49,900 --> 00:19:53,679
or testing their application in their terminal of choice.

00:19:53,679 --> 00:20:00,722
If we think long and hard if we're building a new tool for developers, do we start the

00:20:00,722 --> 00:20:03,220
GUI first or do we start CLI first?

00:20:03,220 --> 00:20:09,300
So if we're going to meet developers where they're at, my argument is we start CLI first.

00:20:09,300 --> 00:20:16,299
My arguments is starting with CLI first does not preclude building a UI later, but starting

00:20:16,299 --> 00:20:22,430
with a UI first often precludes building a CLI afterwards.

00:20:22,430 --> 00:20:27,809
And as developers, we're probably working on web apps most of the time, so we feel more

00:20:27,809 --> 00:20:29,760
comfortable in that realm.

00:20:29,760 --> 00:20:33,700
But when we use tools, think about it the tools you're using to build those web apps

00:20:33,700 --> 00:20:35,880
are usually CLI tools.

00:20:35,880 --> 00:20:42,010
So let's have that empathy and meet developers where they're at.

00:20:42,010 --> 00:20:47,149
The best part is we can have developers start using it right away, right?

00:20:47,149 --> 00:20:53,000
And if we build that CLI on a well-factored code base, we may have another developer who

00:20:53,000 --> 00:20:58,841
joins who's really interested in the internals of mob up and she might build a web app for

00:20:58,841 --> 00:21:00,970
a business user to use.

00:21:00,970 --> 00:21:03,330
A business user who wants to see who's mobbing.

00:21:03,330 --> 00:21:07,590
And how long they're mobbing for.

00:21:07,590 --> 00:21:14,780
Later you might build an IDE plugin or whatever that's built on top of the CLI which brings

00:21:14,780 --> 00:21:21,970
in a whole bunch of other developers.

00:21:21,970 --> 00:21:28,240
The point is, starting CLI first kind of gives you the best of both worlds.

00:21:28,240 --> 00:21:33,149
Because you can start to meet developers where they're at, but it does not preclude you from

00:21:33,149 --> 00:21:34,920
building it later on.

00:21:34,920 --> 00:21:39,740
So with that tangent out of the way, let's look at how do weigh improve the developer

00:21:39,740 --> 00:21:44,110
experience as a tool author for other people using our tool.

00:21:44,110 --> 00:21:50,520
So getting started with a new tool is often a frustrating experience, because we're looking

00:21:50,520 --> 00:21:53,090
to figure out how to install the tool.

00:21:53,090 --> 00:21:55,230
That's our first interaction.

00:21:55,230 --> 00:22:01,260
And if you provide your developer with a big checklist of install this programming language,

00:22:01,260 --> 00:22:05,280
these dependencies, et cetera, guess what?

00:22:05,280 --> 00:22:07,230
They're not going to be very happy.

00:22:07,230 --> 00:22:12,430
So again, we're bringing empathy, we're trying to meet developers where they're add and that

00:22:12,430 --> 00:22:17,440
means providing a tool where developers are familiar with.

00:22:17,440 --> 00:22:28,799
Something like a whole new package, a native package, or 

00:22:28,799 --> 00:22:33,700
the devil's tool.

00:22:33,700 --> 00:22:38,960
If you're not sure why, it's.

00:22:38,960 --> 00:22:41,159
. . Anyway.

00:22:41,159 --> 00:22:48,399
All of those are really great if your tool fits into a nice binary package that's easy

00:22:48,399 --> 00:22:56,720
to install across OS's and usually if you've built a tool.

00:22:56,720 --> 00:23:01,740
If you've built a tool on something else, lake many tools are built, the installation

00:23:01,740 --> 00:23:06,170
process might be a bit more with terrible.

00:23:06,170 --> 00:23:07,221
How do we solve that?

00:23:07,221 --> 00:23:12,040
How do we make that really awesome developer experience regardless of the tool you build

00:23:12,040 --> 00:23:13,380
it in?

00:23:13,380 --> 00:23:18,220
Well, it wouldn't be a DevOps conference if I didn't bring up docker.

00:23:18,220 --> 00:23:25,039
We take our tool and package it into another tool.

00:23:25,039 --> 00:23:31,270
If we throw a little shell script on top of our image, all of a sudden we can provide

00:23:31,270 --> 00:23:38,559
this shell script as the executable, and it feels and behaves just like a CLI, but under

00:23:38,559 --> 00:23:41,539
the hood it's running an image.

00:23:41,539 --> 00:23:50,950
And we found this super valuable especially if you need OS's that are difficult to install.

00:23:50,950 --> 00:23:58,059
This is a great way to package your tool and it's cross platform and works the same way.

00:23:58,059 --> 00:24:04,549
So that's how we make an awesome getting started experience with their tool.

00:24:04,549 --> 00:24:10,750
So package it in or meet developers where they're at with a one-liner install, and if

00:24:10,750 --> 00:24:14,690
it's not easy to install.

00:24:14,690 --> 00:24:18,940
Moving on, to that first experience of using the tool.

00:24:18,940 --> 00:24:22,720
So when we use the tool, I like to think of that tool as first contact.

00:24:22,720 --> 00:24:24,840
That's our first interaction.

00:24:24,840 --> 00:24:30,490
And just the first commit, first contact is often I don't know, is this going to work

00:24:30,490 --> 00:24:31,490
or not.

00:24:31,490 --> 00:24:38,659
So what we need to do is we need to take the nervous part out of that by helping guide

00:24:38,659 --> 00:24:41,500
the user with that initial interaction.

00:24:41,500 --> 00:24:48,570
So if instead of the way Pair Up works today, we ask the user for all of the details for

00:24:48,570 --> 00:24:54,970
how to configure and pair with somebody, what if instead as an awesome developer experience,

00:24:54,970 --> 00:25:01,200
we do the work on the users we have, and we go and we talk to say GitHub API offer whatever

00:25:01,200 --> 00:25:04,110
internal API and get their full name and email.

00:25:04,110 --> 00:25:10,679
Until even we're taking the nervous part out of it, we're driving the users, making it

00:25:10,679 --> 00:25:14,100
a much nicer and cleaner experience.

00:25:14,100 --> 00:25:22,290
That's how weigh make an awesome developer experience for that first commit.

00:25:22,290 --> 00:25:23,740
Moving on to the day-to-day.

00:25:23,740 --> 00:25:28,410
So what is the best way to make developers frustrated in their day-to-day interaction

00:25:28,410 --> 00:25:30,049
with your tool?

00:25:30,049 --> 00:25:32,320
It's by having bad error messages.

00:25:32,320 --> 00:25:35,340
Those don't help guide you.

00:25:35,340 --> 00:25:41,330
Many of you have probably seen these kind of error messages, and if you wonder not only

00:25:41,330 --> 00:25:47,260
is it telling me what's wrong, but it also tells me what to do, can I actually do that

00:25:47,260 --> 00:25:48,260
myself?

00:25:48,260 --> 00:25:49,750
The answer is yes.

00:25:49,750 --> 00:25:54,419
And the way we do that, and I'm not sure this is the way GitHub has implemented it.

00:25:54,419 --> 00:26:01,890
But the way that we can do that is using something called Levenshtein which is something not

00:26:01,890 --> 00:26:07,760
so simple mathematical formula, before you throw me off the stage, let's look at an example.

00:26:07,760 --> 00:26:14,100
So a Levenshtein distance formula, what it does, it takes two words and you plug it into

00:26:14,100 --> 00:26:17,520
this algorithm and out pops a number.

00:26:17,520 --> 00:26:23,540
So in this example, we start with the word kitten and we see what the leverage and distance

00:26:23,540 --> 00:26:24,590
is to sitting.

00:26:24,590 --> 00:26:25,970
And it's 3.

00:26:25,970 --> 00:26:32,200
We changed three characters and it becomes sitting.

00:26:32,200 --> 00:26:35,039
You might be wondering do I have to implement this myself?

00:26:35,039 --> 00:26:36,440
No you don't.

00:26:36,440 --> 00:26:41,929
Many programming languages if you look it up, Levenshtein is implemented.

00:26:41,929 --> 00:26:51,390
So we can pull a tool off the Internet and we can use it in a -- we can use it in our

00:26:51,390 --> 00:26:53,910
CLI to do something like this.

00:26:53,910 --> 00:27:00,660
For example, configurations are often fraught with typos and other errors.

00:27:00,660 --> 00:27:04,590
And most tools just explode and say oh, something is wrong.

00:27:04,590 --> 00:27:10,330
So instead of just exploding and saying something is wrong, we can actually take -- we know

00:27:10,330 --> 00:27:15,549
what the key words are for our configuration.

00:27:15,549 --> 00:27:17,559
We need name, email, timeouts, whatever.

00:27:17,559 --> 00:27:22,200
There's a finite set of words.

00:27:22,200 --> 00:27:26,080
We run a Levenshtein distance against each of those keywords.

00:27:26,080 --> 00:27:29,610
Whichever is closest we say use this one.

00:27:29,610 --> 00:27:34,360
We have useful messages how to guide you.

00:27:34,360 --> 00:27:40,510
We can do that with mob up and make that awesome developer experience in that day-to-day interaction

00:27:40,510 --> 00:27:44,760
catching errors and guiding users how to improve it.

00:27:44,760 --> 00:27:46,480
Remember, empathy.

00:27:46,480 --> 00:27:51,860
Finally, regardless of the blood, sweat and tears we put into our tool, at some point

00:27:51,860 --> 00:27:53,230
it's going to be retired.

00:27:53,230 --> 00:27:58,830
So how do we include the retirement of our tools for other users.

00:27:58,830 --> 00:28:05,890
Often times tools are retired because there are another tool that's replacing it.

00:28:05,890 --> 00:28:16,350
Our role, what we need to do for our users, is to provide that bridge for that next tool.

00:28:16,350 --> 00:28:21,549
You might look, there's three other tools that replace the tool that we're using, make

00:28:21,549 --> 00:28:27,840
the evaluation, find the one you think is best for your users, and clearly communicate

00:28:27,840 --> 00:28:30,070
the best tool to go to.

00:28:30,070 --> 00:28:35,299
But to take it up a notch, we should do the migration for the user.

00:28:35,299 --> 00:28:45,840
If we deprecate something like mob up, can't read this blog post online, we've identified

00:28:45,840 --> 00:28:56,399
this as the replacement and do you want me to do the migration for you and guide the

00:28:56,399 --> 00:28:59,580
user to the next step of getting started.

00:28:59,580 --> 00:29:07,539
That's how we make a graceful retirement as a tool author.

00:29:07,539 --> 00:29:13,090
Clear migration off of the tool.

00:29:13,090 --> 00:29:16,230
How do we make an awesome developer experience.

00:29:16,230 --> 00:29:32,110
You provide one-line installs, we do the work on the users we have, we Levenshtein distance

00:29:32,110 --> 00:29:36,190
and finally a clear migration path.

00:29:36,190 --> 00:29:41,450
That was a lot to cover.

00:29:41,450 --> 00:29:45,470
Let's do a quick replay of what we just did.

00:29:45,470 --> 00:29:51,550
So we started off with user experience, in talking about how over the last decade we've

00:29:51,550 --> 00:29:57,110
missed out on a lot by not focusing on user experience.

00:29:57,110 --> 00:30:03,440
We then discussed what are the various aspects that we're missing out on.

00:30:03,440 --> 00:30:08,279
Monetary, mental energy and morale.

00:30:08,279 --> 00:30:15,510
We saw some tactical, specific ways to address developer experience working together, and

00:30:15,510 --> 00:30:16,620
working on the tool.

00:30:16,620 --> 00:30:19,490
So other developers are using it.

00:30:19,490 --> 00:30:26,100
So really I ask you, what are you waiting for to improve developer experience today?

00:30:26,100 --> 00:30:32,850
Take one or two of these tips, apply them, and turn your angry developers into happy

00:30:32,850 --> 00:30:35,030
developers.

00:30:35,030 --> 00:30:36,320
I'm Arthur Maltson.

00:30:36,320 --> 00:30:40,460
I work at Capital One.

00:30:40,460 --> 00:30:47,070
And thank you.

00:30:47,070 --> 00:30:55,370
[ Applause ] We are hiring, we're opening a Boston office.

00:30:55,370 --> 00:30:57,179
I'm going to quickly plug that.

00:30:57,179 --> 00:31:03,730
I will post this version of the slides there on the slide share.

00:31:03,730 --> 00:31:08,389
Other links, Mob Up is empty rate now.

00:31:08,389 --> 00:31:09,779
Maybe at some point I'll work on it.

00:31:09,779 --> 00:31:10,779
Any questions?

00:31:10,779 --> 00:31:11,779
>> You have like two minutes.

00:31:11,779 --> 00:31:12,779
ARTHUR: Questions?

00:31:12,779 --> 00:31:13,779
>> Audience: I had a question for you.

00:31:13,779 --> 00:31:17,450
When you talk about building on the CLI tools, is there a platform you go to for the some

00:31:17,450 --> 00:31:19,019
of the base CLI functionality?

00:31:19,019 --> 00:31:24,640
Do you know libraries or -- what's your tool chain for that.

00:31:24,640 --> 00:31:28,080
ARTHUR: So personally we use a lot of python.

00:31:28,080 --> 00:31:31,010
Click is a really awesome CLI library.

00:31:31,010 --> 00:31:36,790
I know for go language we hope to go to later as cobra which is really great.

00:31:36,790 --> 00:31:42,500
I do think if you're starting out super small start with what's built in.

00:31:42,500 --> 00:31:49,380
As soon as you start to get into a more complex library, I highly recommend using -- more

00:31:49,380 --> 00:31:51,990
complex CLI, I highly recommend using a library for that.

00:31:51,990 --> 00:31:52,990
>> Just a reminder, if you could please talk into the microphone, not only can everyone

00:31:52,990 --> 00:31:53,990
can hear but also our lovely recording folks can record this.

00:31:53,990 --> 00:31:54,990
ARTHUR: The question was what library does the person recommend for building CLIs.

00:31:54,990 --> 00:31:55,990
Any other questions?

00:31:55,990 --> 00:31:56,990
All right.

00:31:56,990 --> 00:31:57,990
Well, thank you everybody.

00:31:57,990 --> 00:31:58,990
Really appreciate it.

00:31:58,990 --> 00:31:59,990
As I said I'll post the slides.

00:31:59,990 --> 00:32:03,210
Feel free to come and talk to me after the talk.

00:32:03,210 --> 00:32:04,930
Thank you so much.

00:32:04,930 --> 00:32:05,360

YouTube URL: https://www.youtube.com/watch?v=mLh6p7l2tDk


