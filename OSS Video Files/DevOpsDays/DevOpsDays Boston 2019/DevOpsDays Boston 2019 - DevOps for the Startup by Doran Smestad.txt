Title: DevOpsDays Boston 2019 - DevOps for the Startup by Doran Smestad
Publication date: 2019-10-11
Playlist: DevOpsDays Boston 2019
Description: 
	DevOps for the Startup: how to efficiently find market fit. by Doran Smestad

Most conversations around DevOps and Site Reliability Engineering (SRE) focus on medium to large business. Where there are sufficient funds and enough sprawling infrastructure that a team dedicated to upkeep is required; the SRE/Ops team. But, what about startups? Enabling rapid development, high reliability, and consistent infrastructure is just as vital to survival as it in in larger companies, if not more. Yes, there are startups who have already found market fit and need to rapidly scale - but what about the startups like us that are still looking for the right fit?

Instead of dismissing DevOps/SRE as “not yet needed” we took a different approach: embracing DevOps principals and culture from day one. Our infrastructure is managed by terraform, our code is built and tested on every commit, and our master branch is synonymous with production.

Over the course of this talk, I’ll describe why we adopted DevOps and why we place engineer efficiency as our highest priority, even higher than consistency and reliability. We’ll walk through our path from using manually-built artifacts and deployment, all the way to automated build pipelines and version management, and through to our goal of master-branch triggered deployments. We’ll share the lessons we learned from choosing carefully what to automate and when, and how we continue to deliver code faster and faster despite a constant team size. We’ll also share our vision on the future of DevOps and SRE in small and scaling companies: operationalizing production, Security, and IT functions together.

#DevOpsDays #DevOpsDaysBoston
Captions: 
	00:00:00,680 --> 00:00:17,090
Hello, everyone.

00:00:17,090 --> 00:00:23,930
My name is Doran Smestad, I'm a site reliability engineer at a small fin tech startup in Boston.

00:00:23,930 --> 00:00:27,320
I'm interested to hear how people got to where they are today.

00:00:27,320 --> 00:00:31,970
My background, I have a formal education from WPI.

00:00:31,970 --> 00:00:37,370
And even though I walked out of that with a full developer education, I've always found

00:00:37,370 --> 00:00:40,540
I've been more interested in the systems networking side of the house.

00:00:40,540 --> 00:00:43,240
This is back a while.

00:00:43,240 --> 00:00:48,070
Who here remembers back before the Internet was as powerful as it is, the local listen

00:00:48,070 --> 00:00:49,070
only?

00:00:49,070 --> 00:00:52,870
I know I'm dating myself.

00:00:52,870 --> 00:00:54,300
I loved playing those games.

00:00:54,300 --> 00:01:01,420
But I loved set ughthe networks and the systems and the wire wall to keep things secure.

00:01:01,420 --> 00:01:06,220
And I came to an important realize realization at that time that when people came in to use

00:01:06,220 --> 00:01:10,420
those systems, they did not care about the system or the network or the firewall rules

00:01:10,420 --> 00:01:13,780
or the things I had to do to make things work, they wanted to play the video game.

00:01:13,780 --> 00:01:18,080
And at that point, I slowly began the process to become a site reliability engineer.

00:01:18,080 --> 00:01:23,200
And now a couple of definitions.

00:01:23,200 --> 00:01:26,360
When I say DevOps, I'm referring to the philosophy.

00:01:26,360 --> 00:01:30,920
Where developers own their code in production, receive alerts on it and can ship whatever

00:01:30,920 --> 00:01:32,500
nay need to.

00:01:32,500 --> 00:01:35,560
And it's a two way street.

00:01:35,560 --> 00:01:39,900
The site reliability engineers, those are applying software engineering practices and

00:01:39,900 --> 00:01:42,890
that's how I got into the role I have today.

00:01:42,890 --> 00:01:47,920
My role is to operationalize these DevOps principles and enable development teams to

00:01:47,920 --> 00:01:53,100
add features and add the value to the business and to our customers.

00:01:53,100 --> 00:01:55,420
So, startups.

00:01:55,420 --> 00:01:58,670
If up to look the most things that we would talk about, either in the conference here

00:01:58,670 --> 00:02:03,060
or in the news, you would think that a startup is a new build, you skill, and then boom,

00:02:03,060 --> 00:02:04,060
you have product.

00:02:04,060 --> 00:02:07,299
Unfortunately, it's not at all that simple.

00:02:07,299 --> 00:02:09,019
Who has been in a startup before?

00:02:09,019 --> 00:02:10,019
Okay.

00:02:10,019 --> 00:02:11,019
Awesome.

00:02:11,019 --> 00:02:12,019
Working with the right crowd.

00:02:12,019 --> 00:02:16,290
So, as you know, then, a startup process looks more like this.

00:02:16,290 --> 00:02:17,930
Than any kind of streamlined thing.

00:02:17,930 --> 00:02:20,079
You kind of go all over the place in the beginning.

00:02:20,079 --> 00:02:21,290
You don't know what you're doing.

00:02:21,290 --> 00:02:24,230
You're trying to find customers that will buy what you're looking for.

00:02:24,230 --> 00:02:29,409
And it's a great job with the diagram that explains what a startup is like at the beginning.

00:02:29,409 --> 00:02:34,189
Eventually you can come down and iron out your process and get customers and become

00:02:34,189 --> 00:02:35,189
a company.

00:02:35,189 --> 00:02:40,999
And to help conceptualize it, I break down the evolution of a startup into three phases.

00:02:40,999 --> 00:02:43,000
First is your market fit mode.

00:02:43,000 --> 00:02:47,540
That's where you have a concept, a prototype, maybe, and you don't have customers yet.

00:02:47,540 --> 00:02:52,359
It's about doing the minimally viable thing to get your product out there and start moving

00:02:52,359 --> 00:02:53,540
that ball forward.

00:02:53,540 --> 00:02:58,230
That could be getting a customer on board, could be getting a feature in front of customers

00:02:58,230 --> 00:03:01,790
to get feedback or perhaps getting invites to conferences where you can talk about your

00:03:01,790 --> 00:03:04,409
company a little bit more.

00:03:04,409 --> 00:03:06,049
Next is the scale mode.

00:03:06,049 --> 00:03:11,629
This is more traditional startups, scaling 100% month over month.

00:03:11,629 --> 00:03:16,849
You need to put servers in production, or serverless if that's the approach.

00:03:16,849 --> 00:03:23,139
Keep them running and at the same time you're scaling your production, you're scaling the

00:03:23,139 --> 00:03:24,139
organization.

00:03:24,139 --> 00:03:27,799
You're bringing on temp members and do team based breakdowns.

00:03:27,799 --> 00:03:34,989
That's difference than before when you have a single person responsible for a set of services.

00:03:34,989 --> 00:03:36,999
And the you've made it mode.

00:03:36,999 --> 00:03:40,909
You have scaled successfully and have a healthy customer base.

00:03:40,909 --> 00:03:44,159
You need to do somewhere fine tunings on your offering.

00:03:44,159 --> 00:03:50,420
I say scaling is more Manageable with 50% month over month rather than 1,000% month

00:03:50,420 --> 00:03:51,859
over month.

00:03:51,859 --> 00:03:59,489
You have observability, standardizing on top and things along those lines that you're more

00:03:59,489 --> 00:04:02,329
familiar with for enterprise type companies.

00:04:02,329 --> 00:04:06,079
I think of this like a spectrum.

00:04:06,079 --> 00:04:12,239
But it's more accurate to break it down in three phases where the phases or types of

00:04:12,239 --> 00:04:16,100
startups really care about the very different things in the life cycle.

00:04:16,100 --> 00:04:19,741
In the beginning, market fit, in the middle scaling, at the enddifferent goals.

00:04:19,741 --> 00:04:30,800
And you have enterprise scale customers with different demands than the small ones.

00:04:30,800 --> 00:04:32,270
Let's talk about my story.

00:04:32,270 --> 00:04:36,980
I joined an early stage startup about a year ago.

00:04:36,980 --> 00:04:42,439
So, I before worked for an enterprise scale company.

00:04:42,439 --> 00:04:48,080
Or a startup that made it, successful IPO, and later bought.

00:04:48,080 --> 00:04:50,740
True enterprise at the top end of the scale.

00:04:50,740 --> 00:04:53,120
I joined as the tenth employee.

00:04:53,120 --> 00:04:56,850
There was a code and a prototype.

00:04:56,850 --> 00:04:58,600
And it had native OS.

00:04:58,600 --> 00:05:00,000
That was a spell.

00:05:00,000 --> 00:05:04,270
And coming from the enterprise environment, hi a couple things in mind that I would like

00:05:04,270 --> 00:05:06,660
to employee to the situation.

00:05:06,660 --> 00:05:10,000
And the question became, what projects should I start with?

00:05:10,000 --> 00:05:16,310
If you were here yesterday for the mentoring DevOpsers, it's a good idea to have an onboarding

00:05:16,310 --> 00:05:17,310
process.

00:05:17,310 --> 00:05:18,310
And we were a small company.

00:05:18,310 --> 00:05:20,270
There was no onboarding process.

00:05:20,270 --> 00:05:23,780
Welcome aboard, what do you think you should work on?

00:05:23,780 --> 00:05:24,780
Always a good question.

00:05:24,780 --> 00:05:29,939
So, I startedout by saying, well, thing they learned from my previous experience,

00:05:29,939 --> 00:05:34,290
in order to be secure in the fin tech space, our financial customers expect security.

00:05:34,290 --> 00:05:36,780
We segment out by AWS account.

00:05:36,780 --> 00:05:42,620
A prod account, a staging account and a Dev account and a fourth account for human users

00:05:42,620 --> 00:05:46,169
to log into and cross account role assumption.

00:05:46,169 --> 00:05:47,210
We started down this path.

00:05:47,210 --> 00:05:52,500
I was scratching my head one morning and, you know, I don't think this matters.

00:05:52,500 --> 00:05:55,120
It was a weird realization for me.

00:05:55,120 --> 00:05:58,460
Especially coming from a security background.

00:05:58,460 --> 00:06:02,800
That at the moment, we had five employees that were doing development work including

00:06:02,800 --> 00:06:03,819
myself.

00:06:03,819 --> 00:06:07,919
Even if I did all of this cool segmentation, even would have to be global anyway because

00:06:07,919 --> 00:06:10,680
we're all on call for the infrastructure and system issues.

00:06:10,680 --> 00:06:12,270
Scrap that idea.

00:06:12,270 --> 00:06:13,870
That wasn't great.

00:06:13,870 --> 00:06:14,930
Another one.

00:06:14,930 --> 00:06:21,719
Another traditional DevOps approach or SRE mentality is get monitoring in, trace the

00:06:21,719 --> 00:06:26,410
calls, do performance monitoring and start down that approach.

00:06:26,410 --> 00:06:31,970
We looked at Datadog, and another phenomenal platform for doing this work.

00:06:31,970 --> 00:06:32,970
Implemented it into our systems.

00:06:32,970 --> 00:06:37,539
And it was quite expensive, especially for startups.

00:06:37,539 --> 00:06:43,000
And secondly, it wasn't a good fit either because at that time when you use application

00:06:43,000 --> 00:06:48,659
performance tools, you're looking to diagnose hard to find performance problems in your

00:06:48,659 --> 00:06:50,159
code.

00:06:50,159 --> 00:06:54,029
Our performance problems were more like, hey, bud, did you remember to cache that?

00:06:54,029 --> 00:06:55,199
Fix that.

00:06:55,199 --> 00:06:57,169
And look at that, the application is faster.

00:06:57,169 --> 00:06:58,919
Don't need a tool to help.

00:06:58,919 --> 00:06:59,919
Same thing with tracing.

00:06:59,919 --> 00:07:02,199
When you're hunting down a challenging bug.

00:07:02,199 --> 00:07:06,289
But our bug classes were really more, oops, we broke the API specification.

00:07:06,289 --> 00:07:07,569
That's not going to work.

00:07:07,569 --> 00:07:13,169
Or to be with, we have had syntax issues in the code that slipped bit linter.

00:07:13,169 --> 00:07:14,169
Fix that.

00:07:14,169 --> 00:07:17,370
We don't need these fancy tools.

00:07:17,370 --> 00:07:19,960
We almost fell into the trap of overengineering.

00:07:19,960 --> 00:07:21,310
Or in other words, in stack.

00:07:21,310 --> 00:07:29,979
This stack it a better fit for us because why use an overengineered tool or a very powerful

00:07:29,979 --> 00:07:33,690
platform when you can have something much, much, much more simple.

00:07:33,690 --> 00:07:37,499
And this raises the question, what is important?

00:07:37,499 --> 00:07:40,860
What is valuable to a startup of about ten people?

00:07:40,860 --> 00:07:42,340
Thousand you bring in that value?

00:07:42,340 --> 00:07:47,680
Especially for me has a DevOps person who is not talking to customers, how do I add

00:07:47,680 --> 00:07:51,270
value to make it faster.

00:07:51,270 --> 00:07:54,569
For us, you need to find market fit.

00:07:54,569 --> 00:07:59,039
The only way you can succeed as a company is by finding market fit and get dollars in

00:07:59,039 --> 00:08:00,039
the door.

00:08:00,039 --> 00:08:03,610
Otherwise you don't have the money and that's the end of your startup.

00:08:03,610 --> 00:08:07,100
And you don't need to replicate what later stage companies are doing.

00:08:07,100 --> 00:08:11,449
Yes, APM tooling is awesome, there's cool analysis with it.

00:08:11,449 --> 00:08:13,629
But you don't need it at the beginning.

00:08:13,629 --> 00:08:16,069
What's more important is to get your product out there.

00:08:16,069 --> 00:08:17,870
You are not Google.

00:08:17,870 --> 00:08:19,810
Unless you work for Google, awesome.

00:08:19,810 --> 00:08:22,190
But for us, we're not Google or Netflix or Amazon.

00:08:22,190 --> 00:08:28,819
But the companies in the you've made it mode don't apply to the beginning.

00:08:28,819 --> 00:08:34,260
And I want to emphasize that because you have to always remember where and when to use a

00:08:34,260 --> 00:08:35,260
tool.

00:08:35,260 --> 00:08:39,169
Because sometimes it's a great tool, but maybe not the right time for that tool.

00:08:39,169 --> 00:08:45,060
So, we chose to focus on reducing iteration time and improving our developer's efficiency.

00:08:45,060 --> 00:08:50,100
And for us, iteration time is the distance or duration between code is complete and code

00:08:50,100 --> 00:08:55,790
is available in production and then developer efficiently where we finish a feature specification

00:08:55,790 --> 00:08:57,190
and it's realized in code.

00:08:57,190 --> 00:09:02,020
And by keeping track of this whole process from feature ideation to completion out to

00:09:02,020 --> 00:09:07,190
production, by minimizing that, that's how we can hit the value proposition getting the

00:09:07,190 --> 00:09:09,910
features to customers and moving forward.

00:09:09,910 --> 00:09:13,709
But unfortunately, there's also constraints that we need to consider.

00:09:13,709 --> 00:09:18,529
We can't just throw spaghetti code on the wall and ship and hope it works.

00:09:18,529 --> 00:09:23,199
For our industry, security is the major constraint.

00:09:23,199 --> 00:09:27,750
We can ship as many features as we want, but one security incident, the startup is done.

00:09:27,750 --> 00:09:31,209
At that point you have lost any reputation you might have gained with your financial

00:09:31,209 --> 00:09:33,260
customers.

00:09:33,260 --> 00:09:34,260
We are certified.

00:09:34,260 --> 00:09:35,260
SOC2 compliant.

00:09:35,260 --> 00:09:36,350
That was an adventure.

00:09:36,350 --> 00:09:39,310
Talk about that with me afterwards.

00:09:39,310 --> 00:09:46,550
We needed to provide provable encryption and support keys, something that financial institutions

00:09:46,550 --> 00:09:48,500
request during the sales process.

00:09:48,500 --> 00:09:53,250
And level AWS brand recognition in sales to the financial institutions.

00:09:53,250 --> 00:09:57,500
We couldn't use Heroku.

00:09:57,500 --> 00:10:01,529
That was a constraint placed upon us.

00:10:01,529 --> 00:10:02,769
We couldn't go super simple.

00:10:02,769 --> 00:10:04,230
But we wanted to find that pain.

00:10:04,230 --> 00:10:05,839
What did we do?

00:10:05,839 --> 00:10:07,800
We found a pain point.

00:10:07,800 --> 00:10:09,750
For uswith it was the build process.

00:10:09,750 --> 00:10:14,830
We're DevOps people, obviously we want to automate the build process.

00:10:14,830 --> 00:10:20,760
But, yes, for the people who have completely automated the build process, I ask you to

00:10:20,760 --> 00:10:24,570
remember how often effort that takes and you have to convince your developers to be on

00:10:24,570 --> 00:10:28,380
board with that and shift the workflow to something that's more automated in nature.

00:10:28,380 --> 00:10:30,010
Usually, yeah, this is cool.

00:10:30,010 --> 00:10:33,339
But you have to make it better than what they were doing before.

00:10:33,339 --> 00:10:38,220
Before us when I joined our build process and I put in the error codes for sure, was

00:10:38,220 --> 00:10:42,930
a bash script run on local developer machines and compiled the code and shipped it up.

00:10:42,930 --> 00:10:46,470
I will give credit where credit was do, it was automated.

00:10:46,470 --> 00:10:48,980
Not what you would say when you have a CI system.

00:10:48,980 --> 00:10:55,800
Instead, re leveraged Bitbucket cloud's systems to build, lint and test our cold.

00:10:55,800 --> 00:10:58,079
This was a screenshot from a couple weeks ago.

00:10:58,079 --> 00:11:02,560
And this was our unit tests.

00:11:02,560 --> 00:11:04,160
We have about 90% coverage.

00:11:04,160 --> 00:11:07,149
That was another decision we made internally.

00:11:07,149 --> 00:11:11,550
By having high coverage, it gives us high what's the word?

00:11:11,550 --> 00:11:15,300
It gives us a lot of confidence, there we go, that the code we're shipping will continue

00:11:15,300 --> 00:11:17,370
to work even with the features.

00:11:17,370 --> 00:11:19,860
It will move faster.

00:11:19,860 --> 00:11:24,740
But we stopped before automating the deployment process.

00:11:24,740 --> 00:11:25,959
It wasn't a pain point.

00:11:25,959 --> 00:11:28,150
And we didn't want to fall into this trap.

00:11:28,150 --> 00:11:34,630
For you not familiar, xkcd is an awesome comic.

00:11:34,630 --> 00:11:37,740
Sometimes when you think about automating something, it's great.

00:11:37,740 --> 00:11:42,870
But there's the downside, when you automate, you have yet another software project to maintain.

00:11:42,870 --> 00:11:48,260
And you don't want the work of the deployment automation until we needed it.

00:11:48,260 --> 00:11:51,319
And at the time we were deploying maybe once or twice a day.

00:11:51,319 --> 00:11:52,509
Wasn't too much of a problem.

00:11:52,509 --> 00:11:54,130
We used Terraform.

00:11:54,130 --> 00:11:55,220
It was taken care of.

00:11:55,220 --> 00:11:57,730
And the rest wasn't that much effort.

00:11:57,730 --> 00:12:05,260
Fast forward a few months and I will take a drink of water as we do.

00:12:05,260 --> 00:12:09,130
At that point, we got a new office, which was exciting.

00:12:09,130 --> 00:12:10,920
New engineers and some customers on board.

00:12:10,920 --> 00:12:13,579
Which was very exciting.

00:12:13,579 --> 00:12:20,459
Unfortunately, our AWS credits were starting to run out at this point.

00:12:20,459 --> 00:12:21,459
Yay.

00:12:21,459 --> 00:12:23,770
It was time for us to think about costs.

00:12:23,770 --> 00:12:27,850
And what was interesting is as we sat down to look at the infrastructure and what was

00:12:27,850 --> 00:12:31,060
there, our costs our spend was not too high.

00:12:31,060 --> 00:12:34,510
But we wanted to ask the question, especially considering what happened to my first two

00:12:34,510 --> 00:12:39,149
projects and I started them, is cost actually important to us?

00:12:39,149 --> 00:12:42,600
Does it help improve our developer's efficiency or decrease iteration time?

00:12:42,600 --> 00:12:43,600
No.

00:12:43,600 --> 00:12:44,600
It doesn't.

00:12:44,600 --> 00:12:47,000
We came to the point that costs were not important.

00:12:47,000 --> 00:12:52,140
Especially as a startup, we were not concerned about costs.

00:12:52,140 --> 00:12:57,899
But for us, the tradeoff of optimizing our AWS bin was significantly higher than just

00:12:57,899 --> 00:13:00,949
paying the bill and moving forward.

00:13:00,949 --> 00:13:03,949
We county completely throw it out the window.

00:13:03,949 --> 00:13:06,870
We checked the box to enable billing.

00:13:06,870 --> 00:13:13,180
Wrote a Python script, tossed it into a Lambda function, and bam it's in the metrics platform

00:13:13,180 --> 00:13:20,070
and we can break it down by author and environment and down to the resource level.

00:13:20,070 --> 00:13:25,070
We can look to see where the problem came from, but other than that, you know what?

00:13:25,070 --> 00:13:27,350
We'll spend whatever we need to get our market fit.

00:13:27,350 --> 00:13:34,149
And after we scale, we will figure out where the costs are going and how to optimize that.

00:13:34,149 --> 00:13:38,860
Instead, the next pain point, related to the build process.

00:13:38,860 --> 00:13:40,860
But this time on version management.

00:13:40,860 --> 00:13:46,360
In the beginning in the beginning we had our versions managed by a version file.

00:13:46,360 --> 00:13:48,162
Those who were familiar with Angular, it was the AngularJSON file.

00:13:48,162 --> 00:13:56,740
You put your semantic file in there and they would have to remember to update the file.

00:13:56,740 --> 00:13:58,899
Not a problem when you're shipping once or twice a day.

00:13:58,899 --> 00:14:01,310
We were shipping ten times a day.

00:14:01,310 --> 00:14:07,860
A developer would pull request, get it approved, and merge, and someone beat them to it.

00:14:07,860 --> 00:14:09,839
Repeat, seven times a day.

00:14:09,839 --> 00:14:13,580
You can hear the complaints I was getting with that approach.

00:14:13,580 --> 00:14:21,250
Went with the minimal viable solution, included a script in the pipeline and parse the commit

00:14:21,250 --> 00:14:23,940
message since we use conventional commits.

00:14:23,940 --> 00:14:33,440
If it was a feature or major change, increment the version number, back to the pipeline and

00:14:33,440 --> 00:14:35,050
no more worrying about the version management.

00:14:35,050 --> 00:14:37,740
But we get the benefits of tracking that.

00:14:37,740 --> 00:14:42,220
Another benefit was we chose conventional commits specifically because it gives us this

00:14:42,220 --> 00:14:43,220
ability.

00:14:43,220 --> 00:14:48,209
But now when we want to, we can go back and automate the change log without extra effort.

00:14:48,209 --> 00:14:54,519
Developers can say, oh, what was changed in the last three versions, I got a bug report.

00:14:54,519 --> 00:14:58,240
This is the commit and the version number associated with it.

00:14:58,240 --> 00:15:02,780
Around the same time, we when a discussion around reliability.

00:15:02,780 --> 00:15:08,050
And after some internal discussions, we came to the realization that reliability wasn't

00:15:08,050 --> 00:15:09,050
important to us.

00:15:09,050 --> 00:15:11,319
And this is another strange thing to say.

00:15:11,319 --> 00:15:14,850
We chose to de prioritize reliability, within reason.

00:15:14,850 --> 00:15:19,699
And the reason we could get away with that is off hour downtime is not a problem for

00:15:19,699 --> 00:15:20,699
us.

00:15:20,699 --> 00:15:24,519
One of the benefits of being a business to business company is our users are very well

00:15:24,519 --> 00:15:25,519
behaved.

00:15:25,519 --> 00:15:28,089
They're on the platform between 9 a.m. and 5 p.m.

00:15:28,089 --> 00:15:30,569
Outside of those hours, they're not using it.

00:15:30,569 --> 00:15:35,040
That gives us flexibility to say you need a long running database migration.

00:15:35,040 --> 00:15:39,089
Maybe takes 10 minutes, I don't know why, okay.

00:15:39,089 --> 00:15:40,089
Fine.

00:15:40,089 --> 00:15:43,260
Ship it outside of hours and we don't matter.

00:15:43,260 --> 00:15:44,260
We still matter.

00:15:44,260 --> 00:15:46,759
it does not matter.

00:15:46,759 --> 00:15:51,720
It's like the old adage, if production falls over but no user notices, did you have an

00:15:51,720 --> 00:15:52,720
outage?

00:15:52,720 --> 00:15:55,420
It did.

00:15:55,420 --> 00:15:58,569
Nobody noticed and didn't have an effect on your bottom line.

00:15:58,569 --> 00:16:00,070
Continue to move forward.

00:16:00,070 --> 00:16:04,420
We chose to look at reliability in the build ship process.

00:16:04,420 --> 00:16:07,829
And getting code into production.

00:16:07,829 --> 00:16:12,879
As long as we can make that reliable, we will continue to succeed.

00:16:12,879 --> 00:16:14,250
That brings us to where we are today.

00:16:14,250 --> 00:16:16,970
And I wanted to briefly touch on what's next for us.

00:16:16,970 --> 00:16:22,379
First, we plan to implement the production, the paradigm, and go through and automate

00:16:22,379 --> 00:16:23,470
our deployments to production.

00:16:23,470 --> 00:16:27,699
As soon as the developer merges into the master branch, starts the process.

00:16:27,699 --> 00:16:31,839
We will have a manual intervention step to be sure it's going through and people are

00:16:31,839 --> 00:16:33,420
happy with how that's working.

00:16:33,420 --> 00:16:35,060
But that's the next step.

00:16:35,060 --> 00:16:37,139
Automating that part.

00:16:37,139 --> 00:16:41,160
Hopefully we will land our market facility and begin to scale.

00:16:41,160 --> 00:16:45,430
And everything I talked about goes back on to the table if for revision.

00:16:45,430 --> 00:16:47,329
We care about costs.

00:16:47,329 --> 00:16:52,420
Maybe we will have people in different time zones or people who want to work outside of

00:16:52,420 --> 00:16:54,910
hours.

00:16:54,910 --> 00:17:01,279
As we put things back under the light, look at the typical DevOps mentalities and approaches

00:17:01,279 --> 00:17:02,690
to things and apply those in.

00:17:02,690 --> 00:17:04,640
Maybe adopt APM, traces stuff in place.

00:17:04,640 --> 00:17:10,410
That will come back in as we shift phases in the company life cycle.

00:17:10,410 --> 00:17:13,690
New goals, new processes.

00:17:13,690 --> 00:17:16,550
In conclusion, go things.

00:17:16,550 --> 00:17:19,250
One, DevOps is a process.

00:17:19,250 --> 00:17:23,530
It needs to align with the goals of your business.

00:17:23,530 --> 00:17:28,040
When you're a startup trying to find market fit, you have a certain set of goals.

00:17:28,040 --> 00:17:31,740
And as you would go through that life cycle as a company, your goals shift.

00:17:31,740 --> 00:17:35,520
And headache sure you change your DevOps processes to align with those.

00:17:35,520 --> 00:17:41,630
And sec, always ensure not just the right fit for the tool, but the right time.

00:17:41,630 --> 00:17:43,330
We have had conversations internally.

00:17:43,330 --> 00:17:44,450
Kubernetes is awesome.

00:17:44,450 --> 00:17:46,350
That's a true statement.

00:17:46,350 --> 00:17:47,810
I love Kubernetes.

00:17:47,810 --> 00:17:52,910
However, in order to do Kubernetes correctly, you need to have expertise in house to manage

00:17:52,910 --> 00:17:55,340
it fully and implement it correctly.

00:17:55,340 --> 00:18:00,340
As well as take the time to change any of your existing systems to fit that mentality

00:18:00,340 --> 00:18:01,530
better.

00:18:01,530 --> 00:18:04,030
While eventually we'll probable adopt it, we have not yet.

00:18:04,030 --> 00:18:06,050
We are in the monolith mode.

00:18:06,050 --> 00:18:08,260
That's what's efficient to us.

00:18:08,260 --> 00:18:12,860
We write code to split to services should that time arise.

00:18:12,860 --> 00:18:14,030
Hopefully it will.

00:18:14,030 --> 00:18:16,140
But at the moment, that's what we're optimizing for.

00:18:16,140 --> 00:18:20,350
So, thank you very much.

00:18:20,350 --> 00:18:27,690
[ Applause ] >> That was awesome.

00:18:27,690 --> 00:18:29,630
>> Thank you.

00:18:29,630 --> 00:18:31,820
>> So, first thing, questions.

00:18:31,820 --> 00:18:34,020
Anybody have any questions or Doran?

00:18:34,020 --> 00:18:35,920
We've got mics.

00:18:35,920 --> 00:18:37,530
All right.

00:18:37,530 --> 00:18:39,940
I'll start out.

00:18:39,940 --> 00:18:41,700
Really tactical.

00:18:41,700 --> 00:18:46,050
Personally, when do you decide that a commit is a commit?

00:18:46,050 --> 00:18:50,850
Like, you've changed the line of code, you've changed the character.

00:18:50,850 --> 00:18:53,911
What makes you go, I got to commit it.

00:18:53,911 --> 00:18:54,911
>> Commit it to the codebase?

00:18:54,911 --> 00:18:56,830
>> Yeah, not like a merge.

00:18:56,830 --> 00:18:58,560
Not lake a pull request.

00:18:58,560 --> 00:18:59,680
But just a local connection.

00:18:59,680 --> 00:19:01,510
DORAN: I'm sorry, can you repeat that?

00:19:01,510 --> 00:19:03,060
I'm not understanding.

00:19:03,060 --> 00:19:07,310
>> What is your indicator to do a local connect.

00:19:07,310 --> 00:19:09,320
Sounds simple, right?

00:19:09,320 --> 00:19:11,510
DORAN: We don't make too much of a distinction.

00:19:11,510 --> 00:19:13,280
That's why I was confused.

00:19:13,280 --> 00:19:20,670
Whenever you can make a change and do it locally, we encourage them to push that out.

00:19:20,670 --> 00:19:24,670
We have this in that to do the lint and the testing for you.

00:19:24,670 --> 00:19:29,710
I have used it myself to not run the linter and tester locally.

00:19:29,710 --> 00:19:33,080
Just make the changes, make a couple changes, ship it.

00:19:33,080 --> 00:19:37,280
And next time I look, ah ha, go back and change this and it's resolved.

00:19:37,280 --> 00:19:42,510
>> Yeah, considering how important it is in terms of the audit log and just being able

00:19:42,510 --> 00:19:47,490
to check afterwards, I find that various different teams have different appetites.

00:19:47,490 --> 00:19:53,480
Obviously people who are new or larger batches, they batch up a lot of stuff.

00:19:53,480 --> 00:19:55,480
And that gets dangerous.

00:19:55,480 --> 00:20:01,330
And then some people micromanage that and there's more overcommunication than other

00:20:01,330 --> 00:20:02,440
people have.

00:20:02,440 --> 00:20:05,780
Where is that balance for you?

00:20:05,780 --> 00:20:06,900
DORAN: Yes.

00:20:06,900 --> 00:20:10,780
So, I've glossed over it just because I'm so used to it at this point.

00:20:10,780 --> 00:20:14,630
But we encourage everybody to have as many commits as they want in their feature branch.

00:20:14,630 --> 00:20:20,870
But before they merge to master, that's a squash.

00:20:20,870 --> 00:20:22,640
When they go to commit, that's a single commit.

00:20:22,640 --> 00:20:24,390
That's where you see one commit, version.

00:20:24,390 --> 00:20:25,390
>> Anyone?

00:20:25,390 --> 00:20:28,700
One up here and one here.

00:20:28,700 --> 00:20:32,470
I'm going to start here.

00:20:32,470 --> 00:20:36,250
AUDIENCE: Just a quick one.

00:20:36,250 --> 00:20:37,250
>> Sorry.

00:20:37,250 --> 00:20:38,510
My fault.

00:20:38,510 --> 00:20:41,720
There's a little switch right here.

00:20:41,720 --> 00:20:44,380
AUDIENCE: Quick question.

00:20:44,380 --> 00:20:46,960
What is your current build cycle time?

00:20:46,960 --> 00:20:49,290
Because you seem like you don't run it locally.

00:20:49,290 --> 00:20:51,070
So, obviously there's some lead time.

00:20:51,070 --> 00:20:55,500
As well as what is your ideal cycle time?

00:20:55,500 --> 00:20:58,730
At which point does it become a nuisance more than

00:20:58,730 --> 00:21:04,670
DORAN: I'm very glad you asked that question because I actually have a slide on it.

00:21:04,670 --> 00:21:08,030
This is a graph I created based on exactly how long it takes to do our builds.

00:21:08,030 --> 00:21:09,280
It changes over time.

00:21:09,280 --> 00:21:13,380
When I first put the build in place, it was 10 minutes long.

00:21:13,380 --> 00:21:14,420
It was long.

00:21:14,420 --> 00:21:15,530
But it worked.

00:21:15,530 --> 00:21:16,680
This was great.

00:21:16,680 --> 00:21:17,810
And took a couple months.

00:21:17,810 --> 00:21:19,620
Okay, this is time it fix it.

00:21:19,620 --> 00:21:23,540
We're starting to use it more iteratively and brought it down to four minutes.

00:21:23,540 --> 00:21:24,980
That's our happy spot.

00:21:24,980 --> 00:21:29,960
We want our build times to be under five minutes no matter what we're running and we achieve

00:21:29,960 --> 00:21:30,960
a lot of things in parallel at this point.

00:21:30,960 --> 00:21:40,653
AUDIENCE: At which point would you consider it to be too for whereright know now?

00:21:40,653 --> 00:21:41,653
DORAN: The build time too high?

00:21:41,653 --> 00:21:42,653
7 or 8 minutes.

00:21:42,653 --> 00:21:48,000
That would be time to bring it back down.

00:21:48,000 --> 00:21:52,800
Otherwise people will do the whole, my code is compiling and I will do go to do this instead.

00:21:52,800 --> 00:21:56,350
We have broken that workflow.

00:21:56,350 --> 00:21:59,140
Five minutes is my happy spot, any higher than 8 I stop what I'm doing.

00:21:59,140 --> 00:22:11,360
AUDIENCE: I can speak, to what degree do you not care about data loss costs?

00:22:11,360 --> 00:22:14,950
DORAN: Our cost is sub five figures.

00:22:14,950 --> 00:22:18,150
It's small enough we're in the too concerned.

00:22:18,150 --> 00:22:23,170
There was an instance a few months ago at this point where our costs doubled all of

00:22:23,170 --> 00:22:24,170
a sudden.

00:22:24,170 --> 00:22:25,170
That's when we cared.

00:22:25,170 --> 00:22:26,660
And we're like, okay.

00:22:26,660 --> 00:22:27,660
We went I don't know.

00:22:27,660 --> 00:22:28,660
I'll make up numbers.

00:22:28,660 --> 00:22:31,950
Say we went from 7,000, it went up to 14.

00:22:31,950 --> 00:22:33,900
We didn't ship something new and massive.

00:22:33,900 --> 00:22:36,330
So, something just happened here that we're concerned about.

00:22:36,330 --> 00:22:37,530
That's where we care.

00:22:37,530 --> 00:22:39,580
Other than that, we're not too concerned.

00:22:39,580 --> 00:22:44,130
I don't know if you're looking for a hard number or not, at least for us, internally,

00:22:44,130 --> 00:22:50,840
my own brain, if I see a number higher than 10,000, we're not large enough to warrant

00:22:50,840 --> 00:22:51,840
that kind of a cost.

00:22:51,840 --> 00:22:53,210
AUDIENCE: As a follow up, have you made architecture choices to keep costs low?

00:22:53,210 --> 00:22:54,210
Lambda or EC2?

00:22:54,210 --> 00:22:55,210
Whatever your needs were? DORAN: Good question.

00:22:55,210 --> 00:22:56,210
No, not yet.

00:22:56,210 --> 00:22:57,300
We're optimized where optimizations seem reasonable.

00:22:57,300 --> 00:23:01,470
Our databases that we run, using RDS from Amazon.

00:23:01,470 --> 00:23:06,030
They are half the size as in production.

00:23:06,030 --> 00:23:08,080
We don't need as much power in Dev.

00:23:08,080 --> 00:23:14,270
But when we need more power, we scale it up.

00:23:14,270 --> 00:23:17,960
>> Maybe one last question.

00:23:17,960 --> 00:23:30,360
AUDIENCE: So, when you decide to like incorporate when you decide to like incorporate access

00:23:30,360 --> 00:23:37,570
control, tighten up security of the CI/CD pipeline and like runtime security and a startup

00:23:37,570 --> 00:23:38,570
life cycle?

00:23:38,570 --> 00:23:40,210
DORAN: That's a great question.

00:23:40,210 --> 00:23:46,950
One of the hats I'm fortunate,: to wear is security.

00:23:46,950 --> 00:23:52,650
We need to have the bare bones in place to hit the SOC2 requirements.

00:23:52,650 --> 00:23:57,111
We need to have the roles for everything in the job.

00:23:57,111 --> 00:23:58,780
That second part is critical.

00:23:58,780 --> 00:24:04,300
We will take a more strict or harder look on how to do the access controls.

00:24:04,300 --> 00:24:08,380
Once we're to the point people no longer need the accesses.

00:24:08,380 --> 00:24:12,740
At the moment, everyone in the engineering team has access to the AWS account because

00:24:12,740 --> 00:24:14,770
we need it.

00:24:14,770 --> 00:24:19,120
And we're at the size where everyone maintains and everyone is on call for it.

00:24:19,120 --> 00:24:20,120
Access is required.

00:24:20,120 --> 00:24:23,680
Where we get to the point where we don't need that anymore, we will revisit it.

00:24:23,680 --> 00:24:26,610
At the scale phase, we will.

00:24:26,610 --> 00:24:31,440
Don't muscular pain understand me, we have a lot of security practices in place.

00:24:31,440 --> 00:24:32,910
Just not the one I outlined earlier.

00:24:32,910 --> 00:24:34,700
>> Thank you so much, Doran.

00:24:34,700 --> 00:24:38,700
Are you going to be around for the rest of the day?

00:24:38,700 --> 00:24:39,710
DORAN: I will.

00:24:39,710 --> 00:24:40,710
>> Okay.

00:24:40,710 --> 00:24:41,710
There he is.

00:24:41,710 --> 00:24:41,711

YouTube URL: https://www.youtube.com/watch?v=Xpf7zMKQCKE


