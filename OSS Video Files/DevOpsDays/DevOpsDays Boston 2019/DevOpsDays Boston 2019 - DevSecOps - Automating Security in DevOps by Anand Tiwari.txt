Title: DevOpsDays Boston 2019 - DevSecOps - Automating Security in DevOps by Anand Tiwari
Publication date: 2019-10-11
Playlist: DevOpsDays Boston 2019
Description: 
	DevSecOps - Automating Security in DevOps by Anand Tiwari

As part of this workshop attendees will receive a state-of-the-art DevSecOps tool-chest comprising of various open-source tools and scripts to help the DevOps engineers in automating security within the CI/CD pipeline. While the workshop uses Java/J2EE framework, the workshop is language agnostic and similar tools can be used against other application development frameworks.

Security is often added towards the end, in a typical DevOps cycle through a manual/automated review. However, in DevSecOps, security can be injected at every stage of a DevOps pipeline in an automated fashion. Having a DevSecOps pipeline enables an organization to

Create a security culture amongst the already integrated “DevOps” team.
Find and fix security bugs as early as possible in the SDLC.
Promote the philosophy “security is everyone’s problem” by creating Security champions within the organization.
Integrate all security software centrally and utilize the results more effectively.
Measure and shrink the attack surface.
In this workshop, we shall focus on how a DevOps pipeline can easily be metamorphosed into a DevSecOps and the benefits which can be achieved with this. The workshop will discuss a number of open-source tools and also the cultural changes needed to implement DevSecOps. The workshop will also present various case studies on how critical bugs and security breaches affecting popular software and applications could have been prevented using a simple DevSecOps approach.

#DevOpsDays #DevOpsDaysBoston
Captions: 
	00:00:24,109 --> 00:00:28,189
My name is Anand Tiwari and I'm information security professional.

00:00:28,189 --> 00:00:33,800
I have 6 plus experience in information security.

00:00:33,800 --> 00:00:38,370
I do a lot mobile network.

00:00:38,370 --> 00:00:48,780
I'm working with not so secure and I'm author of open source tool which is a management

00:00:48,780 --> 00:00:50,219
tool.

00:00:50,219 --> 00:01:02,420
So you can find me on all social platforms A quick introduction about my company.

00:01:02,420 --> 00:01:08,560
Providing IT security, and training.

00:01:08,560 --> 00:01:19,640
So we are providing testing on penetration testing and also training on these listed.

00:01:19,640 --> 00:01:22,580
Let's dive into the actual topic in hand.

00:01:22,580 --> 00:01:30,960
So the agenda for today is start with what is DevSecOps, why do we need DevSecOps?

00:01:30,960 --> 00:01:34,440
How do we actually go about starting with DevSecOps?

00:01:34,440 --> 00:01:41,000
What kinds of tools would be used there are some kinds of set-up that we get to start

00:01:41,000 --> 00:01:50,030
with it, and some sample implementation or case study around it.

00:01:50,030 --> 00:01:52,580
So a disclaimer.

00:01:52,580 --> 00:01:57,000
I will be listing a lot of tools, but it's not an exhaustive list.

00:01:57,000 --> 00:02:04,439
What I mean to say is that I do not or we do not endorse or recommend any specific tool

00:02:04,439 --> 00:02:05,439
or vendor.

00:02:05,439 --> 00:02:11,200
Your choice of tool totally depends on your involvement.

00:02:11,200 --> 00:02:17,440
So my recommendation would be to test and validate before implementation, any idea in

00:02:17,440 --> 00:02:22,650
your environment.

00:02:22,650 --> 00:02:32,150
So before we begin, I wanted you guys to just go and register so that I can just distribute

00:02:32,150 --> 00:02:37,980
DevSecOps lab VM to everyone who is joining this workshop.

00:02:37,980 --> 00:02:47,590
Because this lab is more than 13GB and I think it's not based where you can just go and download

00:02:47,590 --> 00:02:48,590
it.

00:02:48,590 --> 00:02:56,050
I will distribute through email so you can just go at your own and just download and

00:02:56,050 --> 00:02:57,090
start practicing.

00:02:57,090 --> 00:03:04,120
So here what I'm going to cover, I will talk all about and give the all practical implementation

00:03:04,120 --> 00:03:10,610
of DevSecOps, how do we go about it and how we can automate things.

00:03:10,610 --> 00:03:13,280
Everything included inside our lab.

00:03:13,280 --> 00:03:22,290
So when you go back to at home you can download this lab and you can start practicing on this

00:03:22,290 --> 00:03:23,860
lab.

00:03:23,860 --> 00:03:33,530
So you can quickly just take a snap or just save this URL and just register on this URL

00:03:33,530 --> 00:03:42,110
so that we can distribute our lab.

00:03:42,110 --> 00:03:45,110
Now what is DevSecOps, right?

00:03:45,110 --> 00:03:53,170
So DevSecOps basically a process or an effort where you're trying to be security by default.

00:03:53,170 --> 00:03:57,470
How do you achieve a secure by default state?

00:03:57,470 --> 00:04:03,310
You can start with integrating security via tools, or you can start with creating security

00:04:03,310 --> 00:04:08,629
as a code culture and you need to start promoting cross skilling.

00:04:08,629 --> 00:04:18,120
So instead of having doing three different jobs, like dev, Sec, ops, you need one unified

00:04:18,120 --> 00:04:23,040
team which will basically take care of all these three components.

00:04:23,040 --> 00:04:34,090
That's what we have for DevSecOps.

00:04:34,090 --> 00:04:36,370
Now why do we need DevSecOps?

00:04:36,370 --> 00:04:44,509
DevOps, which comes up with dev and operation, examining together performing rapid development

00:04:44,509 --> 00:04:45,629
deployment.

00:04:45,629 --> 00:04:53,020
So the problem with that is the security in traditional form cannot keep up.

00:04:53,020 --> 00:04:55,300
So let's take an example of pen tester.

00:04:55,300 --> 00:05:01,669
It require three or four days to complete.

00:05:01,669 --> 00:05:08,830
So it's like when you are doing development, deployment and maybe you are deploying your

00:05:08,830 --> 00:05:16,270
application more than like 20 times, so you can't wait for Penn testing like three or

00:05:16,270 --> 00:05:17,270
four days.

00:05:17,270 --> 00:05:24,669
And you cannot afford to have three days and four days times two to wait for the pen test.

00:05:24,669 --> 00:05:30,139
You need to get those things done at a rapid pace and that's where DevSecOps comes into

00:05:30,139 --> 00:05:31,139
the picture.

00:05:31,139 --> 00:05:37,659
So it's make it easier for you have the security as part of year process, a part of your pipeline

00:05:37,659 --> 00:05:40,819
and that's only way going forward.

00:05:40,819 --> 00:05:48,159
So if you want to keep pace with rapid development, you need to have security as part of your

00:05:48,159 --> 00:05:51,559
process.

00:05:51,559 --> 00:05:57,289
So this is how normal DevOps cycle looks like.

00:05:57,289 --> 00:06:05,879
So start with the developer orchestration, developer code inside the source code repository

00:06:05,879 --> 00:06:12,960
and then they are building using CI/CD server and they are deploying on staging or production

00:06:12,960 --> 00:06:16,229
server and then they are doing monitoring.

00:06:16,229 --> 00:06:24,199
So at the end of the stage, people realize they need security testing done on their application.

00:06:24,199 --> 00:06:30,039
And they did security testing and they found multiple vulnerabilities.

00:06:30,039 --> 00:06:33,789
And those vulnerabilities goes back to the actual developer.

00:06:33,789 --> 00:06:42,469
And, like, the problem here is, maybe developer started working on different environment,

00:06:42,469 --> 00:06:44,979
started working on different project.

00:06:44,979 --> 00:06:52,580
So you can imagine the time required to get back into the root code of the code block

00:06:52,580 --> 00:06:58,229
work together mitigating the issue and moving forward with it.

00:06:58,229 --> 00:07:02,240
That's a long time you investing on it.

00:07:02,240 --> 00:07:09,429
Whereas, if you shift it slightly, let's say around the build state.

00:07:09,429 --> 00:07:14,969
You do automated source code review and you found SQL index.

00:07:14,969 --> 00:07:22,249
So as that found, this is something that happened very close to the developer.

00:07:22,249 --> 00:07:27,749
So as a soon as a developer committed the code it goes to the build process and automated

00:07:27,749 --> 00:07:35,199
code review happens, you found a bug got reported and sort of waste -- instead of wasting time

00:07:35,199 --> 00:07:37,770
in other processes.

00:07:37,770 --> 00:07:44,379
You immediately started toward mitigating.

00:07:44,379 --> 00:07:49,490
There is a safety feature that's come up because there is an error.

00:07:49,490 --> 00:07:54,979
So the build did not proceed and there was know deployment that happens.

00:07:54,979 --> 00:08:01,520
So you are safe the bug getting exposed to the public.

00:08:01,520 --> 00:08:07,520
Now, how do we go about doing DevSecOps?

00:08:07,520 --> 00:08:14,009
So I'm going to talk about lots of tool automation but automation is one part of the process.

00:08:14,009 --> 00:08:22,879
So you cannot have DevSecOps unless you accept it as a culture and make it a reality in your

00:08:22,879 --> 00:08:24,499
organization.

00:08:24,499 --> 00:08:27,589
So I will talk about culture some time.

00:08:27,589 --> 00:08:37,440
Initially I'm going to talk about how do we go injecting security in your DevOps pipeline.

00:08:37,440 --> 00:08:44,910
So I have taken a sample of same pipeline that we had and I have added a security component

00:08:44,910 --> 00:08:46,480
on it.

00:08:46,480 --> 00:09:01,230
So we start with the right from the developer, we have like precommit hooks it's basic bugs

00:09:01,230 --> 00:09:10,800
where you can do the performing and other stages to the QA staging and production.

00:09:10,800 --> 00:09:19,850
So all the data getting together in this place management.

00:09:19,850 --> 00:09:26,810
So I'm going talk about each and every section quickly, and then we will move forward where

00:09:26,810 --> 00:09:29,910
we will see these in action.

00:09:29,910 --> 00:09:36,490
So as you can see on the top, there is a DevOps pipeline and in the bottom this is DevSecOps

00:09:36,490 --> 00:09:44,870
pipeline which is taken from the Jenkin pipeline.

00:09:44,870 --> 00:09:47,500
So start with the pre-commit hooks.

00:09:47,500 --> 00:09:53,779
So pre-commit hooks helps you not the credentials.

00:09:53,779 --> 00:10:03,170
I have seen many times developers commit the access key on the public repository.

00:10:03,170 --> 00:10:10,110
And the precommit developer orchestration and the developer can bypass and break the

00:10:10,110 --> 00:10:11,110
chain.

00:10:11,110 --> 00:10:16,050
So you can't consider it as a foolproof safety.

00:10:16,050 --> 00:10:24,149
It work on a regular expiration and you can write your own, and it's not a final solution.

00:10:24,149 --> 00:10:27,850
So you need to still have looked for other things.

00:10:27,850 --> 00:10:37,740
But you can get like the initial warning and people get an idea accidental will not happen.

00:10:37,740 --> 00:10:40,910
Now IDE security plugins.

00:10:40,910 --> 00:10:46,640
You can have plugins preinstalled in your IDE environment.

00:10:46,640 --> 00:10:54,720
Provide you to support very basic mistake and not able to support a complex issues.

00:10:54,720 --> 00:11:03,220
So it's useful to stop using in secure code or like using algorithm.

00:11:03,220 --> 00:11:10,550
Let's suppose a developer started using the MD5 algorithm, the IDE plugin going to alert

00:11:10,550 --> 00:11:18,640
the developer you are using an algorithm that is outdated and breakable.

00:11:18,640 --> 00:11:26,639
The idea is to not find all bugs, but rather assist the developers not making mistakes.

00:11:26,639 --> 00:11:32,500
So things that could be easily encountered and you can get the idea and move on with

00:11:32,500 --> 00:11:35,220
it.

00:11:35,220 --> 00:11:37,889
Now the secret management.

00:11:37,889 --> 00:11:45,110
So I have seen like credentials often used to store configuration files in writing the

00:11:45,110 --> 00:11:46,110
code.

00:11:46,110 --> 00:11:50,980
So I talked about how developers committed their keys and credentials while posting the

00:11:50,980 --> 00:11:53,360
code inside the repository, right?

00:11:53,360 --> 00:11:57,980
So the question is where do we need to keep the secrets?

00:11:57,980 --> 00:12:05,290
So we need to have some secret management interface, hopefully with all our DevOps environment

00:12:05,290 --> 00:12:11,360
we have already having some secret management, secret managers.

00:12:11,360 --> 00:12:24,680
Or we can use the secret management solution to store our secrets and we have to also ensure

00:12:24,680 --> 00:12:31,130
that keep using entire code base.

00:12:31,130 --> 00:12:38,189
Now it's interesting aspect is software composition analysis.

00:12:38,189 --> 00:12:44,819
All of us talk about that we develop software.

00:12:44,819 --> 00:12:50,209
So effectively we write maybe 10% and 20% of the software.

00:12:50,209 --> 00:12:56,980
And all other part basically import reference and other modules that we have used.

00:12:56,980 --> 00:13:02,560
So these are all our third party code that we are using and that's generally become a

00:13:02,560 --> 00:13:04,829
major factor of attacks.

00:13:04,829 --> 00:13:08,379
And major factor of vulnerabilities.

00:13:08,379 --> 00:13:16,339
So you can imagine if you are using open source libraries in your software and that libraries

00:13:16,339 --> 00:13:23,410
are outdated and like you need to have some change so that you can figure out the old

00:13:23,410 --> 00:13:30,990
version of your libraries and you can eliminate the vulnerabilities.

00:13:30,990 --> 00:13:38,829
There are major languages which are using the packages so you need to have those placed

00:13:38,829 --> 00:13:45,589
so you can eliminate the vulnerabilities.

00:13:45,589 --> 00:13:49,899
So we looked at our source composition analysis.

00:13:49,899 --> 00:13:54,720
Now let's look into our written code.

00:13:54,720 --> 00:13:58,430
It's called static analysis or we call like SAST.

00:13:58,430 --> 00:14:09,360
So this is basically where you go about and run auto mated code review tool which will

00:14:09,360 --> 00:14:14,720
be able to pick out easy or simple vulnerabilities.

00:14:14,720 --> 00:14:22,639
Let's suppose cross-site scripting, you have written the logic in your code and that logic

00:14:22,639 --> 00:14:31,480
is not properly -- something is not properly using the code which is reflecting on your

00:14:31,480 --> 00:14:33,320
page.

00:14:33,320 --> 00:14:41,720
So these tool again will be messy painful to use, and you are using them for the first

00:14:41,720 --> 00:14:42,720
time.

00:14:42,720 --> 00:14:50,180
So I have seen like source code review tools digging out maybe like 500 or 900 pages of

00:14:50,180 --> 00:14:53,040
report when you run the first time.

00:14:53,040 --> 00:15:01,660
So but the important part of this static code review is you need to train them, like if

00:15:01,660 --> 00:15:09,610
you are running source code analysis and you are running the static analysis on your code,

00:15:09,610 --> 00:15:18,189
you need to have like train them and you need to have like run the multiple time on your

00:15:18,189 --> 00:15:19,329
code.

00:15:19,329 --> 00:15:27,220
So you can find the vulnerabilities and you have to eliminate the vulnerabilities by running

00:15:27,220 --> 00:15:33,089
the multiple time on your code.

00:15:33,089 --> 00:15:35,360
So they are generic in nature.

00:15:35,360 --> 00:15:39,230
They don't have a context around your application.

00:15:39,230 --> 00:15:49,170
You need to -- identify what they are picking as a false positive and then you can go back

00:15:49,170 --> 00:15:58,579
to the actual developer who developed these static tools and you can ask them to remove

00:15:58,579 --> 00:16:06,660
defaults they are finding.

00:16:06,660 --> 00:16:18,410
Now once you have looked at these static components, there are still place where you cannot be

00:16:18,410 --> 00:16:21,600
found these static components.

00:16:21,600 --> 00:16:28,259
Like they are like when you're deploying your application, applications are like dynamically

00:16:28,259 --> 00:16:35,889
deployed, and you need to have find vulnerabilities running by dynamic scans.

00:16:35,889 --> 00:16:44,690
So depending on your environment there might be different issue that can crop up.

00:16:44,690 --> 00:16:50,689
So secondly, you can also use the DAST state to develop the SAST states.

00:16:50,689 --> 00:16:59,529
Let's suppose SAST found these vulnerabilities and you are not comfortable with those vulnerabilities.

00:16:59,529 --> 00:17:02,089
Maybe they are false positive.

00:17:02,089 --> 00:17:11,510
But if you run the DAST stage and the dynamic analysis scan, you find the same vulnerabilities.

00:17:11,510 --> 00:17:20,410
You can match with this SAST and DAST and you can confirm they actually exist in your

00:17:20,410 --> 00:17:22,220
code.

00:17:22,220 --> 00:17:32,480
So this way you can just utilize SAST and DAST together in your pipeline.

00:17:32,480 --> 00:17:39,070
So next is infrastructure scan.

00:17:39,070 --> 00:17:47,390
So as a code like you have deploy your whole infrastructure.

00:17:47,390 --> 00:17:57,200
So you might be using Docker, Kubernetes or solutions which have amazed where application

00:17:57,200 --> 00:17:59,090
can be deployed.

00:17:59,090 --> 00:18:03,190
So that container is your base image.

00:18:03,190 --> 00:18:11,100
So you need to check, you need to have scan where you can just scan the base image or

00:18:11,100 --> 00:18:12,659
base container.

00:18:12,659 --> 00:18:26,570
So I have seen like in the Docker hub many are the like vulnerable images are uploaded

00:18:26,570 --> 00:18:31,850
and they are maybe malicious images inside the hub.

00:18:31,850 --> 00:18:39,720
So before deploying your application on the top of the container, you need to have checked

00:18:39,720 --> 00:18:46,880
where you can go about and scan whole your base image.

00:18:46,880 --> 00:18:55,200
So that's where we are, need to be have security in infrastructure as code.

00:18:55,200 --> 00:19:03,130
Now, some of the organization have followed compliance, some of the organization don't

00:19:03,130 --> 00:19:05,659
have a specific compliance.

00:19:05,659 --> 00:19:11,450
But then we have one follow 13 compliance, benchmarks.

00:19:11,450 --> 00:19:17,230
So in that scenario again, we can have compliance built as a code.

00:19:17,230 --> 00:19:19,169
We can write the script.

00:19:19,169 --> 00:19:26,600
We have multiple tools allow to write those scripts, and we can embed your compliance

00:19:26,600 --> 00:19:32,000
as a structure with the code, and then we can keep it within repository.

00:19:32,000 --> 00:19:39,130
And manage it and whenever new compliance check are required, those can be tested again

00:19:39,130 --> 00:19:43,090
and again.

00:19:43,090 --> 00:19:49,180
So I talk about a bunch of different stages and all these stages are going to generate

00:19:49,180 --> 00:19:50,180
reports.

00:19:50,180 --> 00:19:55,059
You have integrated multiple tools in every stage.

00:19:55,059 --> 00:20:01,960
So you need one central place where you can dump all your data, all your vulnerability

00:20:01,960 --> 00:20:06,930
data, where you can go and do the vulnerability management.

00:20:06,930 --> 00:20:15,309
So I have seen like DevOps team or security team never likes to clear the reports and

00:20:15,309 --> 00:20:19,250
never likes to go about and managing the reports, right?

00:20:19,250 --> 00:20:25,659
So we need vulnerability management place in our process, our DevOps process, where

00:20:25,659 --> 00:20:37,510
we can dump all the generated data from the multiple tools.

00:20:37,510 --> 00:20:43,770
Now once we have environment deployed and we are running everything in pipeline, so

00:20:43,770 --> 00:20:46,929
it's feel like our job is done, right?

00:20:46,929 --> 00:20:50,590
So but that's where our job actually started.

00:20:50,590 --> 00:20:56,360
So once we have deployed our pipeline for the first time, we need feedback.

00:20:56,360 --> 00:20:59,140
So we have done a bunch of steps.

00:20:59,140 --> 00:21:07,460
Now how do we know about, how do we know this actually works and how do we validate these

00:21:07,460 --> 00:21:08,460
things.

00:21:08,460 --> 00:21:13,179
So that's where alerting and monitoring will come into the picture.

00:21:13,179 --> 00:21:19,549
We can keep monitoring our environment, see if an attack is happening or something trying

00:21:19,549 --> 00:21:21,280
an attack.

00:21:21,280 --> 00:21:27,770
If someone trying to attack, we can easily catch those attack and we can respond those

00:21:27,770 --> 00:21:29,919
attack.

00:21:29,919 --> 00:21:38,700
If they are not getting -- if the attacker trying to attack and they are getting success,

00:21:38,700 --> 00:21:48,309
we have succeeded deploy some safety precaution in our whole level of process.

00:21:48,309 --> 00:21:54,980
Now another point of which I like I wanted to point out, and like people are forgetting

00:21:54,980 --> 00:21:58,799
about to this asset monitoring.

00:21:58,799 --> 00:22:07,650
The assets, when we talk about assets, we generally talk about we have these many servers

00:22:07,650 --> 00:22:11,409
and that's about people listing it.

00:22:11,409 --> 00:22:21,340
But when we talk about assets or your GitHub or whatever the public value your assets are,

00:22:21,340 --> 00:22:28,159
your assets and you need to have like monitor on your assets.

00:22:28,159 --> 00:22:37,850
So maybe they disclose the vulnerabilities or using your public repo or maybe if you

00:22:37,850 --> 00:22:44,809
like have Facebook pages, so maybe disclose some of the information of your organization.

00:22:44,809 --> 00:22:47,179
So all these are your assets.

00:22:47,179 --> 00:22:56,659
So you have to like -- you need to be monitor these assets.

00:22:56,659 --> 00:23:05,669
So this is a sample implementation of Java where like these are the tools implemented

00:23:05,669 --> 00:23:17,070
and using the Jenkins pipeline, I have integrated on every stage of the security tools and every

00:23:17,070 --> 00:23:19,500
stage of integrating security tools.

00:23:19,500 --> 00:23:34,820
So I just wanted to go through the video and then I will show in the VM how does it work.

00:23:34,820 --> 00:23:45,100
So it start with the first stage, which is a SAST dynamic, this is dependency check and

00:23:45,100 --> 00:23:56,140
find sec bug where we are finding this software composition analysis and where we are doing

00:23:56,140 --> 00:24:02,110
the static analysis.

00:24:02,110 --> 00:24:09,460
Next stage is DAST, next stage is scan and then we deploy.

00:24:09,460 --> 00:24:15,750
This is how it looks like we have the top of the DevOps pipeline, we start with the

00:24:15,750 --> 00:24:29,950
build, then we have our artifactory and then we are deploying our staging and then our

00:24:29,950 --> 00:24:37,730
application on staging and then doing the UAT test and then we provisioning our production.

00:24:37,730 --> 00:24:39,919
And this is how DevOps process looks like.

00:24:39,919 --> 00:24:45,340
And at bottom we have security on every stage.

00:24:45,340 --> 00:24:54,139
So you can see after the artifactory deployed, we have integrated SAST, then we have DAST,

00:24:54,139 --> 00:25:06,360
then infrastructure scan, compliance scan and then we are deploying as a WAF.

00:25:06,360 --> 00:25:10,450
So first I talk about pre-commit hook.

00:25:10,450 --> 00:25:18,580
So developers mistakenly committing their access key or credentials over the public

00:25:18,580 --> 00:25:19,580
repository.

00:25:19,580 --> 00:25:29,210
So how we can alert them, how we cannot allow to not commit their secrets and all those

00:25:29,210 --> 00:25:30,210
things, right?

00:25:30,210 --> 00:25:42,080
So we have implemented where we are just figuring out by doing, by searching all over the code.

00:25:42,080 --> 00:25:53,201
As you can see, if the talisman found the AWS key or any secrets in your codes, it's

00:25:53,201 --> 00:25:57,000
going to alert them to your developer.

00:25:57,000 --> 00:26:03,630
So developer can get to know in our code, the secrets are going to be -- so they can

00:26:03,630 --> 00:26:08,889
remove and commit the code.

00:26:08,889 --> 00:26:13,970
So next is software composition analysis, where we are implementing WASP dependency

00:26:13,970 --> 00:26:15,590
check.

00:26:15,590 --> 00:26:24,320
Where we are going to search about open source libraries and we are not using open source

00:26:24,320 --> 00:26:27,559
valuable library in our software.

00:26:27,559 --> 00:26:32,100
So we are doing the scanning using our dependency check.

00:26:32,100 --> 00:26:40,840
So in your pipeline as you can see, we have given the rule, if more than like 10 high

00:26:40,840 --> 00:26:47,679
vulnerability, your pipeline not going to proceed further.

00:26:47,679 --> 00:26:49,720
It's going to be stopped.

00:26:49,720 --> 00:26:57,040
So this way developers can get the feedback in their software.

00:26:57,040 --> 00:26:59,370
These are the vulnerability, these numbers are vulnerability.

00:26:59,370 --> 00:27:05,740
They need to have fixed and then go forward.

00:27:05,740 --> 00:27:07,809
So let's fix the issue.

00:27:07,809 --> 00:27:16,809
Like we are using a vulnerability version so just remove and then we committed the code.

00:27:16,809 --> 00:27:17,809
And then, yeah.

00:27:17,809 --> 00:27:21,690
The vulnerability has like written down.

00:27:21,690 --> 00:27:29,889
That's why intentionally left five high risk how this pipeline looks like.

00:27:29,889 --> 00:27:35,760
Now SAST using the find bug integrated.

00:27:35,760 --> 00:27:39,850
As you can see we have given the rule.

00:27:39,850 --> 00:27:47,740
There should not be any high vulnerability in your code.

00:27:47,740 --> 00:27:53,200
So it's found the vulnerability and we got the feedback and then we removed the code

00:27:53,200 --> 00:28:07,659
and just to fix the vulnerabilities and then we committed the code.

00:28:07,659 --> 00:28:13,850
Now DAST using the WASP ZAP.

00:28:13,850 --> 00:28:28,149
This is integrated with the dynamic scan on our staging environment.

00:28:28,149 --> 00:28:34,600
So we have integrated with the mail system where you can get the email.

00:28:34,600 --> 00:28:40,830
So DAST takes more than like sometimes it takes like one day or two day or three days.

00:28:40,830 --> 00:28:46,380
So in your pipeline if you are running more than 15 minute or 20 minute, so it wouldn't

00:28:46,380 --> 00:28:47,380
work.

00:28:47,380 --> 00:28:53,980
So what we have did, we have integrated the dynamic scanning.

00:28:53,980 --> 00:28:55,590
We are not waiting for that.

00:28:55,590 --> 00:29:03,501
We have integrating with mail system and we like we going forward it, and when the scan

00:29:03,501 --> 00:29:10,549
has completed we got the stats of these dynamic scan and according to that, we take the decision

00:29:10,549 --> 00:29:23,670
whether we deploy our application on server or not.

00:29:23,670 --> 00:29:32,610
So next thing is in our in this lab we are using lots of container, docker containers.

00:29:32,610 --> 00:29:39,190
So we need to have like find out vulnerable containers we are not using in our staging

00:29:39,190 --> 00:29:40,190
or production server.

00:29:40,190 --> 00:29:53,250
So we are using clear, we are using open vast.

00:29:53,250 --> 00:30:01,020
Open VAS also started this scan.

00:30:01,020 --> 00:30:13,400
And you can get the notification once the scan has completed.

00:30:13,400 --> 00:30:19,009
Now we are using inspect for doing the compliance as a code.

00:30:19,009 --> 00:30:31,850
So you need, we are doing like we are complying our Tomcat server.

00:30:31,850 --> 00:30:41,840
Once everything is fine we are going to leave the approval to deploy our application on

00:30:41,840 --> 00:30:42,890
production.

00:30:42,890 --> 00:30:45,380
Now we have a deploy the WAF.

00:30:45,380 --> 00:30:47,910
This is how the application looks like.

00:30:47,910 --> 00:30:54,190
An let's suppose attacker was to do the SQL injection or something attack on your application,

00:30:54,190 --> 00:31:04,720
you get the alert about the from where attack happening and what types of attack going on.

00:31:04,720 --> 00:31:06,990
And also it's not going to allow.

00:31:06,990 --> 00:31:10,409
I talk about vulnerability management.

00:31:10,409 --> 00:31:15,389
We are using Archery to do the vulnerability management.

00:31:15,389 --> 00:31:25,799
So whatever you run the scan in your pipeline, all these tools generate data and those data

00:31:25,799 --> 00:31:28,370
inside the archery.

00:31:28,370 --> 00:31:40,299
So as you can see, the old data is placed in the central place and where consolidated

00:31:40,299 --> 00:31:46,429
and you can manage and you can market it, you can do tons of things.

00:31:46,429 --> 00:31:53,299
And you can prioritize the vulnerabilities in your organization if you are doing the

00:31:53,299 --> 00:31:59,440
development, you can go and check what types of project having, what types of vulnerabilities.

00:31:59,440 --> 00:32:06,630
Let me go quickly to the VM, what I am going to distribute to all.

00:32:06,630 --> 00:32:14,769
You can go and just take all the scripts, all the tools already integrated and all the

00:32:14,769 --> 00:32:17,740
setup we have already done.

00:32:17,740 --> 00:32:27,500
So you can go and check this VM to do practice from yourself in your home.

00:32:27,500 --> 00:32:30,720
So this is how our application looks like.

00:32:30,720 --> 00:32:42,610
This is a vulnerable application we created, where we are doing like the DevOps process

00:32:42,610 --> 00:32:51,100
and then we integrated security in DevOps process so that we can eliminate vulnerabilities.

00:32:51,100 --> 00:32:57,870
We can make as a secure application.

00:32:57,870 --> 00:33:00,190
This is how Jenkins looks like.

00:33:00,190 --> 00:33:05,820
So all the tools we have, like we're using the Vault.

00:33:05,820 --> 00:33:16,659
We are using weave scope which are going to monitor your containers.

00:33:16,659 --> 00:33:22,840
We are using mail catcher to get the notifications.

00:33:22,840 --> 00:33:43,840
We are using Archery to do the vulnerability management.

00:33:43,840 --> 00:33:52,630
And then this is how that's what it looks like.

00:33:52,630 --> 00:34:04,529
So like you are running DevOps -- like DevOps or DevSecOps pipeline, CI/CD pipeline and

00:34:04,529 --> 00:34:06,700
you have integrated multiple tools.

00:34:06,700 --> 00:34:10,810
So all the tools listed here.

00:34:10,810 --> 00:34:21,760
And here is our production server.

00:34:21,760 --> 00:34:30,570
Let me go inside the Jenkins.

00:34:30,570 --> 00:34:38,150
Okay so I have already created the CI/CD pipeline for multiple stages.

00:34:38,150 --> 00:34:41,410
So before that I wanted to go with the code.

00:34:41,410 --> 00:34:46,880
So the code is using the item ID.

00:34:46,880 --> 00:34:59,440
The code is, all the code written in Java so in the pipeline folder we have like for

00:34:59,440 --> 00:35:07,020
the Jenkins you need one Jenkins file and you need a Jenkins script to create a whole

00:35:07,020 --> 00:35:08,320
CI/CD pipeline.

00:35:08,320 --> 00:35:16,540
So there are like stages DevOps so you can go and just copy and paste in Jenkins file

00:35:16,540 --> 00:35:23,730
and then commit the code inside the -- we are integrated the git.

00:35:23,730 --> 00:35:30,100
So once you committed our pipeline will be start.

00:35:30,100 --> 00:35:42,320
So here Jenkins pipeline, I have first started, it was like blank so it's not giving any stages.

00:35:42,320 --> 00:35:48,650
So as you can see, this is the blank.

00:35:48,650 --> 00:35:57,680
So let's go about other stages where I just integrated the like dependency check.

00:35:57,680 --> 00:36:00,400
So first we integrated DevOps process.

00:36:00,400 --> 00:36:10,710
So here you can see using the Maven package, we are generating the package, and then uploading

00:36:10,710 --> 00:36:12,490
package on artifactory.

00:36:12,490 --> 00:36:18,320
As you can see Artifactory we have already integrated.

00:36:18,320 --> 00:36:22,110
So using the API.

00:36:22,110 --> 00:36:30,560
We are uploading inside the artifactory.

00:36:30,560 --> 00:36:42,880
And then we are application on staging environment and doing the UAT test.

00:36:42,880 --> 00:36:52,100
So as you can see, our whole process works very smoothly.

00:36:52,100 --> 00:37:04,500
And then after, once we have a DevOps pipeline, we need to integrate the security on every

00:37:04,500 --> 00:37:05,530
stages.

00:37:05,530 --> 00:37:12,340
So first start with the dependency check where we are doing software composition analysis.

00:37:12,340 --> 00:37:19,490
So we are using dependency check to find our vulnerable libraries and vulnerabilities.

00:37:19,490 --> 00:37:24,360
And those vulnerabilities are inside Archery.

00:37:24,360 --> 00:37:31,300
So if you go inside the dependency check, you can see it's using the project commit

00:37:31,300 --> 00:37:37,790
ID because it's a unique ID for every pipeline.

00:37:37,790 --> 00:37:47,730
As you can see one vulnerabilities, it comes to 31.

00:37:47,730 --> 00:37:55,510
So using archery you can go and explore the vulnerabilities or you can mark as a false

00:37:55,510 --> 00:38:07,050
positive, or if you are integrated with your JIRA ticketing system, you can raise the vulnerability

00:38:07,050 --> 00:38:13,180
ticket using the JIRA.

00:38:13,180 --> 00:38:23,310
So once we have integrated everything, like all the scripts and all the things available

00:38:23,310 --> 00:38:30,150
on this code, so you can at your home you can try yourself, because we have created

00:38:30,150 --> 00:38:31,540
this lab.

00:38:31,540 --> 00:38:39,910
And we are giving this workshop for full day, but here we are getting less time, like one

00:38:39,910 --> 00:38:41,430
and a half hours.

00:38:41,430 --> 00:38:45,450
So we are not able to give you as a hands-on session.

00:38:45,450 --> 00:38:51,030
But you can try at your home.

00:38:51,030 --> 00:39:00,790
So all the Jenkins pipeline, you know there are multiple stages where you need to get

00:39:00,790 --> 00:39:18,420
the instructions to run the commands or to run the scripts.

00:39:18,420 --> 00:39:28,150
Once you deploy your application on the WAF, let's suppose someone trying to attack on

00:39:28,150 --> 00:39:30,510
your application.

00:39:30,510 --> 00:39:35,860
So we have already integrated the WAF.

00:39:35,860 --> 00:39:43,940
So let's suppose I'm trying to provide deep access payload.

00:39:43,940 --> 00:39:53,970
This gives 403 because it's not allowed on those payload.

00:39:53,970 --> 00:40:01,680
And also you will get notification.

00:40:01,680 --> 00:40:05,840
On your mail.

00:40:05,840 --> 00:40:10,190
So I recommend you to go and try yourself at home.

00:40:10,190 --> 00:40:14,450
I hope you guys have written the URL or you just go and register.

00:40:14,450 --> 00:40:23,090
I will distribute using your email, I will distribute the link of this VM, and I hope

00:40:23,090 --> 00:40:27,290
you guys do more stuff in this VM.

00:40:27,290 --> 00:40:29,180
This comes to our presentation.

00:40:29,180 --> 00:40:30,180
Okay.

00:40:30,180 --> 00:40:35,690
So the tools of trade, I have listed these tools.

00:40:35,690 --> 00:40:44,420
So my goal was to create like workshop using all open source tools.

00:40:44,420 --> 00:40:52,710
So how about starting your DevSecOps using all open source tools without spending any

00:40:52,710 --> 00:40:55,510
extra money.

00:40:55,510 --> 00:41:03,360
So my resource, I resource lots of open source tools and optimize those tools then give to

00:41:03,360 --> 00:41:11,480
the client or someone, or ask how to start the DevSecOps in their DevOps process.

00:41:11,480 --> 00:41:22,920
So what I come up with these tools and still I'm not endorsing or I'm not like I'm not

00:41:22,920 --> 00:41:27,130
recommending anything, but this is all available open source.

00:41:27,130 --> 00:41:41,060
So you can try yourself and implement and test before going to implement it.

00:41:41,060 --> 00:41:50,820
These are vulnerability management.

00:41:50,820 --> 00:41:59,840
So let's suppose how about if you wanted to select a tool for your DevOps pipeline or

00:41:59,840 --> 00:42:01,550
DevSecOps pipeline, right?

00:42:01,550 --> 00:42:04,730
So you need to keep in mind these things.

00:42:04,730 --> 00:42:11,150
The tools have API and command line access so it can be scriptable.

00:42:11,150 --> 00:42:17,830
The tools should be computing within a maximum time we like 15 minutes.

00:42:17,830 --> 00:42:23,690
Like to be honest, everyone keeps saying 15 minutes or 20 minutes.

00:42:23,690 --> 00:42:28,170
There is no standard or there is no rule.

00:42:28,170 --> 00:42:35,020
All that matters is the pipelines are finished as early as possible.

00:42:35,020 --> 00:42:42,760
The ideal state would be for the tool does not take even a minute or second, just add

00:42:42,760 --> 00:42:46,160
it in pipeline without any change required.

00:42:46,160 --> 00:42:48,930
But that's not going to happen, right?

00:42:48,930 --> 00:42:51,100
So in the real world.

00:42:51,100 --> 00:42:58,290
So what we are going to looking for that tool can finish the scan in a smaller time amount

00:42:58,290 --> 00:43:00,660
as possible.

00:43:00,660 --> 00:43:12,590
Also the output should be in the JSON format and XML format so you can parse the tool data.

00:43:12,590 --> 00:43:18,380
So let's talk about how we go and optimize our pipeline.

00:43:18,380 --> 00:43:25,710
So we are adding bunch of tools, and we will end up with situation where pipeline taking

00:43:25,710 --> 00:43:27,240
lots of time.

00:43:27,240 --> 00:43:32,210
So now we want to tweak them around and wanted to optimize the pipeline.

00:43:32,210 --> 00:43:39,320
So what we can do is, we can multiple panel pipeline, we can have one pipeline which runs

00:43:39,320 --> 00:43:47,900
on every commit and we can have another pipeline which can runs once a day.

00:43:47,900 --> 00:43:58,390
Like there is one more way, like another pipeline which runs on measure, commit you can create

00:43:58,390 --> 00:44:06,900
branches so that you can specify what branch need to be have run.

00:44:06,900 --> 00:44:15,430
So let's suppose you have modified your template or your whole website UI.

00:44:15,430 --> 00:44:23,760
So for that you don't need to run the software composition analysis or static analysis.

00:44:23,760 --> 00:44:31,190
Because you have only modified the CSS so you don't have to run whole those tools.

00:44:31,190 --> 00:44:39,440
So this way you can optimize your pipeline and only run for these specific things.

00:44:39,440 --> 00:44:49,650
Another that it's very important to run the full pipeline.

00:44:49,650 --> 00:44:54,270
So question is does programming language matters?

00:44:54,270 --> 00:44:56,550
Depends on different language.

00:44:56,550 --> 00:45:01,870
All that matter is to change your tool of choice different things.

00:45:01,870 --> 00:45:05,240
Software composition analysis and static scan.

00:45:05,240 --> 00:45:08,640
And everything else is the same.

00:45:08,640 --> 00:45:10,760
So let's see here.

00:45:10,760 --> 00:45:19,750
For Java software analysis and all these code analysis, all these open source tools available.

00:45:19,750 --> 00:45:31,460
So for Java, PHP, Python, I listed out all the very popular programming language.

00:45:31,460 --> 00:45:36,060
So this is how our whole pipeline looks like.

00:45:36,060 --> 00:45:51,380
So for Ruby we have only modify like our sat and SCA bundle and for PHP we're using like

00:45:51,380 --> 00:46:05,660
we have modified with SC software composition analysis and SAST.

00:46:05,660 --> 00:46:14,590
For Python we're using bandit and you can see everything else is same in the pipeline

00:46:14,590 --> 00:46:24,210
but only we are modifying the SAST in our whole pipeline.

00:46:24,210 --> 00:46:28,180
CI/CD pipeline.

00:46:28,180 --> 00:46:30,170
Right?

00:46:30,170 --> 00:46:35,470
So that's bring me the next level part, which is cloud.

00:46:35,470 --> 00:46:45,250
So when you have a cloud, beside your usual attacks, you have like three more areas to

00:46:45,250 --> 00:46:46,250
worry about.

00:46:46,250 --> 00:46:50,520
So first is like identify and access management.

00:46:50,520 --> 00:47:01,590
Frankly speaking, the 1 ADR which is no cloud window went to take care of and that's your

00:47:01,590 --> 00:47:03,080
responsibility.

00:47:03,080 --> 00:47:05,070
You need to manage that.

00:47:05,070 --> 00:47:14,260
And then area of like asset inventory and then the third is like billing.

00:47:14,260 --> 00:47:17,660
So most of the attack happen on the billing.

00:47:17,660 --> 00:47:22,030
So you need to more care about your billing.

00:47:22,030 --> 00:47:28,750
So you need to have alert and all those things placed in your cloud.

00:47:28,750 --> 00:47:34,691
Now if you have infrastructure as code, it allow you to perform a quick audit and you

00:47:34,691 --> 00:47:42,720
can focus a specific area like security group, permission where your resource has running

00:47:42,720 --> 00:47:49,470
on and how you can give the permissions and all those stuff.

00:47:49,470 --> 00:47:55,610
So I'm dealing with one of my clients, and the client do not have on-prem and they are

00:47:55,610 --> 00:47:59,520
using all the cloud Netiverse services.

00:47:59,520 --> 00:48:08,460
So we have come up with the solution of whatever they're using, cloud services where we need

00:48:08,460 --> 00:48:15,360
to have injector security in audit DevOps cloud services.

00:48:15,360 --> 00:48:21,020
So the key things we need to keep in mind, no vendors are providing analysis on static

00:48:21,020 --> 00:48:27,460
code analysis tool, dynamic code analysis and vulnerability analysis.

00:48:27,460 --> 00:48:40,430
This is how AWS cloud native DevSecOps pipeline looks like and like start with the developer.

00:48:40,430 --> 00:48:50,670
Developers are using the AWS cloud 9ID and they are using, they're replacing with GitHub

00:48:50,670 --> 00:49:00,570
or any like online repository using the AWS code commit.

00:49:00,570 --> 00:49:08,320
And then they're using AWS code and we have come up with two things in the S3-bucket.

00:49:08,320 --> 00:49:17,150
First thing of where they are uploading their boundaries by using the S3-bucket.

00:49:17,150 --> 00:49:23,180
Second thing we have to store all the open source tool in the S3-bucket.

00:49:23,180 --> 00:49:30,560
And whenever we run the pipeline, it's not going to be download the whole binary of the

00:49:30,560 --> 00:49:32,350
open source tools.

00:49:32,350 --> 00:49:44,280
We go use our SD bucket and use all the open source tools in our pipeline.

00:49:44,280 --> 00:49:51,600
So we have integrated SCA stages using the wheel.

00:49:51,600 --> 00:50:02,800
And then they're using -- and then they have AWS WAF and those are all written in the file

00:50:02,800 --> 00:50:11,740
and for the deployment they're using the app tech file

00:50:11,740 --> 00:50:15,970
I have to go through with the on-prem.

00:50:15,970 --> 00:50:21,470
Now this video is for who are using cloud.

00:50:21,470 --> 00:50:28,280
So maybe they are using AWS or maybe they're using the Google Cloud.

00:50:28,280 --> 00:50:36,170
Everything is same, all the scripts, all the code works it is similar how the on-prem implemented.

00:50:36,170 --> 00:50:43,220
So let's play this video.

00:50:43,220 --> 00:50:46,750
The same image.

00:50:46,750 --> 00:50:59,870
And this is the service -- these are the services where we are using.

00:50:59,870 --> 00:51:16,750
On the left side all the DevOps services, on the right side, all the like security services.

00:51:16,750 --> 00:51:27,030
So the stage, second, third the first three stages pre-commit hook using the talisman

00:51:27,030 --> 00:51:35,210
where developer wants to commit their access key or by mistake committing the credentials.

00:51:35,210 --> 00:51:46,300
So going to be like give alerts and then using the code build, building our code and storing

00:51:46,300 --> 00:51:52,500
it inside the S3-bucket.

00:51:52,500 --> 00:52:03,090
Now stage 2 is to do the software composition analysis using the dependency check.

00:52:03,090 --> 00:52:12,040
You can see the similar we are given the rule where no more than like 10 high vulnerabilities

00:52:12,040 --> 00:52:18,930
and let's fix the vulnerabilities and then we move forward and we remove the vulnerabilities

00:52:18,930 --> 00:52:24,540
and then move forward with the SAST and again we have found like one vulnerability so let's

00:52:24,540 --> 00:52:28,470
remove that one vulnerability.

00:52:28,470 --> 00:52:31,250
And we then run our pipeline.

00:52:31,250 --> 00:52:37,330
We found zero vulnerability we move forward with the next stage where we are running the

00:52:37,330 --> 00:52:49,210
dynamic scan and using the WASP we are using dynamic scan, then we are using vulnerability

00:52:49,210 --> 00:52:50,210
assessment.

00:52:50,210 --> 00:52:58,140
Using Amazon Inspector where we are running a scan on our production, staging environment

00:52:58,140 --> 00:53:00,880
using these instances.

00:53:00,880 --> 00:53:05,150
So Inspector is one of the Amazon services.

00:53:05,150 --> 00:53:18,550
It allow you to do the like do the vulnerability assessment and compliance on your instances.

00:53:18,550 --> 00:53:23,960
So already we are using that.

00:53:23,960 --> 00:53:28,571
So next this is like we need to do the compliance on our server.

00:53:28,571 --> 00:53:33,350
So we have use it Inspect.

00:53:33,350 --> 00:53:42,200
So one scenario in the cloud, suppose attacker compromise your EC2 instance using brute force.

00:53:42,200 --> 00:53:48,470
How you go about and figure out those things?

00:53:48,470 --> 00:53:53,730
We are using Amazon Guard Duty to do the alerting.

00:53:53,730 --> 00:53:56,740
So let's see how it works.

00:53:56,740 --> 00:54:03,480
So we can get the notification of the using guard duty.

00:54:03,480 --> 00:54:16,100
We can get notification if something happened or if some attack happened on our EC2 instances.

00:54:16,100 --> 00:54:17,560
So let's investigate.

00:54:17,560 --> 00:54:22,320
Like the important part is to why this happened.

00:54:22,320 --> 00:54:27,810
Who have done this attack or who are doing this attack.

00:54:27,810 --> 00:54:35,270
So you need to have eliminate those things so you have to investigate using their logs.

00:54:35,270 --> 00:54:42,270
So we have like -- we are searching whether it's successfully attacker, were to compromise

00:54:42,270 --> 00:54:52,090
our EC2 instance or not.

00:54:52,090 --> 00:55:00,090
Sorry.

00:55:00,090 --> 00:55:11,630
We are figuring out the instance.

00:55:11,630 --> 00:55:14,480
Actually being compromised or not.

00:55:14,480 --> 00:55:17,810
So we found the alert.

00:55:17,810 --> 00:55:24,820
Now we need to check whether our EC2 instance has enabled or not.

00:55:24,820 --> 00:55:34,110
We are running the Inspector and whether they give an alert to us or not.

00:55:34,110 --> 00:55:43,980
So we had find the instance ID of password is enabled.

00:55:43,980 --> 00:55:51,330
So let's investigate whether the attacker was able to log in to ECD instance using Amazon

00:55:51,330 --> 00:55:56,330
Cloud Watch logs.

00:55:56,330 --> 00:56:05,650
And we can automate things so that we can get the actual scenario where we can see whether

00:56:05,650 --> 00:56:11,440
they can able to attack or not.

00:56:11,440 --> 00:56:19,220
So as you can see, here in the log, attempts happen.

00:56:19,220 --> 00:56:36,260
Attacker have user name password and they're trying to brute force.

00:56:36,260 --> 00:56:41,250
And you can see the attacker get valid attempts.

00:56:41,250 --> 00:56:49,490
This way we can also get this user has compromised on this our instance.

00:56:49,490 --> 00:57:00,970
So we can just go and block those user or we can eliminate those users.

00:57:00,970 --> 00:57:07,520
There are many things you can do with that.

00:57:07,520 --> 00:57:09,360
Like using it.

00:57:09,360 --> 00:57:10,360
Okay.

00:57:10,360 --> 00:57:18,100
So many time you heard about by mistakenly S3-bucket publicly disclosed and sensitive

00:57:18,100 --> 00:57:20,030
data disclosed.

00:57:20,030 --> 00:57:23,710
How to monitor those S3 buckets.

00:57:23,710 --> 00:57:30,740
They have services like mice.

00:57:30,740 --> 00:57:33,010
Mice gives you alert about it.

00:57:33,010 --> 00:57:40,270
And you have like instances, you can get notification on that.

00:57:40,270 --> 00:57:47,360
And you can see this S3-bucket have publicly disclosed.

00:57:47,360 --> 00:57:49,930
So this is how mice looks like.

00:57:49,930 --> 00:57:57,480
And there are many more alerts where you can just do things.

00:57:57,480 --> 00:58:02,690
And Archery is running serverless.

00:58:02,690 --> 00:58:12,060
It's treated the data inside the Archery.

00:58:12,060 --> 00:58:24,290
The old data So this is whole art tech tour looks like

00:58:24,290 --> 00:58:37,360
once you have deployed your secure CI/CD pipeline using AWS cloud natives.

00:58:37,360 --> 00:58:46,570
So this is how I listed all the cloud native services for different cloud service provider,

00:58:46,570 --> 00:58:57,920
AWS, Azure, you can go and check their native services and you can implement in your DevOps

00:58:57,920 --> 00:58:59,820
pipeline.

00:58:59,820 --> 00:59:01,730
Okay.

00:59:01,730 --> 00:59:10,300
That brings me to the next aspect, that is cultural aspect.

00:59:10,300 --> 00:59:17,800
So I have taken like too much time around like DevOps and injecting security tools.

00:59:17,800 --> 00:59:20,330
That was my primary focus.

00:59:20,330 --> 00:59:27,620
Like within open source space also we can deploy lots of security checks.

00:59:27,620 --> 00:59:33,050
Like however, just by deploying security check not work with it.

00:59:33,050 --> 00:59:43,230
So the role of the security team in DevOps is to eliminate the native dedicated security

00:59:43,230 --> 00:59:44,230
team.

00:59:44,230 --> 00:59:52,150
So you should not have a security team if you are running successful DevSecOps.

00:59:52,150 --> 00:59:58,080
And you should have people who are specialized in security, but those people should also

00:59:58,080 --> 01:00:01,290
be part of your unified team.

01:00:01,290 --> 01:00:09,270
So you need to encourage mind set across this space, you need to cross-train everyone.

01:00:09,270 --> 01:00:18,160
You need to build allies or build security champions.

01:00:18,160 --> 01:00:24,580
Security champions is the bridge between your dev, sec and operation team.

01:00:24,580 --> 01:00:30,400
Where they are a single person, so you can choose from the multiple teams and you can

01:00:30,400 --> 01:00:35,400
train them with like maybe some of the devs, some of the operation.

01:00:35,400 --> 01:00:49,080
So it's very important to get them understand and get them know about all this developments,

01:00:49,080 --> 01:00:50,260
security and operation.

01:00:50,260 --> 01:00:57,320
Because they are going to understand what's going on.

01:00:57,320 --> 01:01:09,820
So also you can incentivize to your internal team, by doing bug bounties and you can sponsor

01:01:09,820 --> 01:01:17,100
parties if your DevSecOps is going on.

01:01:17,100 --> 01:01:25,070
And you can send them multiple conferences and then you can ask them to do the cross-skilling

01:01:25,070 --> 01:01:37,380
and do the trainings so that they can get the more knowledge from the different areas.

01:01:37,380 --> 01:01:41,320
So people, how to enable the security.

01:01:41,320 --> 01:01:46,100
So people process technology, different aspect, different things.

01:01:46,100 --> 01:01:53,310
In short, you need to have a good relationship between people, your process should be automated

01:01:53,310 --> 01:02:00,520
as possible, focus on priority on fixing, not intending to fix everything.

01:02:00,520 --> 01:02:10,220
And your technology should flexible enough that you can move ahead and play around with

01:02:10,220 --> 01:02:11,530
things.

01:02:11,530 --> 01:02:15,270
So this is one generic case studies.

01:02:15,270 --> 01:02:25,380
Let's suppose you're doing DevOps and let's suppose there is a vulnerability found in

01:02:25,380 --> 01:02:37,750
your open source library and it's found and you are doing this in the middle of June and

01:02:37,750 --> 01:02:38,750
July.

01:02:38,750 --> 01:02:51,130
So as you can imagine, your application contains this JIRA vulnerability at this two month

01:02:51,130 --> 01:02:52,770
or three month, right?

01:02:52,770 --> 01:03:02,020
So when you are doing the DevSecOps, you run the pipeline and you immediately find vulnerabilities

01:03:02,020 --> 01:03:08,520
and you get the feedback immediately when developers committed the code.

01:03:08,520 --> 01:03:14,320
And you fixed the vulnerability within 24-hour or within a day.

01:03:14,320 --> 01:03:24,850
So you can imagine how this DevSecOps useful in your DevOps process.

01:03:24,850 --> 01:03:34,280
So I have taken like all these case studies from some of the companies who have already

01:03:34,280 --> 01:03:36,480
doing the DevSecOps.

01:03:36,480 --> 01:03:46,450
One of the Fannie Mae is one of the like very popular company who is doing the DevSecOps.

01:03:46,450 --> 01:03:55,580
And all the case studies and all things included in this talk.

01:03:55,580 --> 01:03:59,900
And you can go and read about how they are doing things.

01:03:59,900 --> 01:04:07,620
And one more company is ABN Amro who is also doing the DevSecOps and all the case studies

01:04:07,620 --> 01:04:13,870
and everything is stated in this workshop.

01:04:13,870 --> 01:04:22,330
So if you are integrated security in your cloud, there are misconfiguration happening

01:04:22,330 --> 01:04:28,830
on your cloud and you can disclosing your sensitive data over the Internet, right?

01:04:28,830 --> 01:04:37,230
So if you have doing continuously monitoring and living your cloud assets and configuration,

01:04:37,230 --> 01:04:42,690
this cannot be happen.

01:04:42,690 --> 01:04:43,830
So this is not enough.

01:04:43,830 --> 01:04:50,780
You still need to follow usual bug bounty and pen testing policies.

01:04:50,780 --> 01:04:54,710
Because those would be your feedback loops.

01:04:54,710 --> 01:05:02,390
So they will help you and understand what is going wrong and where do you go about fixing

01:05:02,390 --> 01:05:03,880
things.

01:05:03,880 --> 01:05:12,680
I have five listed and below are the five vendors who have claimed that they have the

01:05:12,680 --> 01:05:14,330
best DevSecOps practices.

01:05:14,330 --> 01:05:18,900
But they're still running bug bounties.

01:05:18,900 --> 01:05:27,390
The idea is to get feedback as much as possible.

01:05:27,390 --> 01:05:35,520
So when you are deploying security tools, you are deploying the pieces of code.

01:05:35,520 --> 01:05:37,220
So what's the watcher?

01:05:37,220 --> 01:05:44,390
So you need to have configure your security tool very securely in your environment.

01:05:44,390 --> 01:05:53,150
If you are using admin for your vulnerability management tool, it's never work around anyone.

01:05:53,150 --> 01:06:05,040
So you need to have good policies and you need to have configure very securely.

01:06:05,040 --> 01:06:13,480
So these are reference I have taken from and I created this workshop.

01:06:13,480 --> 01:06:21,040
So key takeaway is security is everyone's responsibility.

01:06:21,040 --> 01:06:24,560
Embrace security as a part of your process.

01:06:24,560 --> 01:06:27,390
Use feedback to improve the process.

01:06:27,390 --> 01:06:36,240
And you cannot take someone else DevSecOps and just personalize and implement on.

01:06:36,240 --> 01:06:41,330
You have to do your own experiment in your organization.

01:06:41,330 --> 01:06:52,210
So the old saying, mileage will vary, in DevSecOps your mileage will most develop vary.

01:06:52,210 --> 01:07:01,241
This is all about the DevSecOps process, and you can contact me on the Twitter and you

01:07:01,241 --> 01:07:06,310
can just drop me a mail if you have any question, anything.

01:07:06,310 --> 01:07:12,770
So I think you guys have already registered, right.

01:07:12,770 --> 01:07:19,220
I will get the email ID or whoever joining today's workshop.

01:07:19,220 --> 01:07:30,120
So within a 48 hour you will get the link and all the contents and you can check everything

01:07:30,120 --> 01:07:37,590
inside the VM and you can practice on that VM and maybe you can take the reference from

01:07:37,590 --> 01:07:47,470
that scripts and all the things, whatever implement in the VM and you can utilize and

01:07:47,470 --> 01:07:53,080
you can do DevSecOps in your organization.

01:07:53,080 --> 01:07:55,290
Thank you.

01:07:55,290 --> 01:08:04,000
So let's have if you have questions, to please ask.

01:08:04,000 --> 01:08:07,010
>> First a round for Anand Tiwari.

01:08:07,010 --> 01:08:16,150
[ Applause ] Anand came all the way from India.

01:08:16,150 --> 01:08:20,170
So we have a few minutes for questions.

01:08:20,170 --> 01:08:28,900
We've got two mic stands up on the balcony.

01:08:28,900 --> 01:08:30,680
So any questions from the audience?

01:08:30,680 --> 01:08:37,109
I guess you have the unfortunate privilege of being the only thing standing between these

01:08:37,109 --> 01:08:41,830
people and a rather nice reception down the street.

01:08:41,830 --> 01:08:44,880
So don't feel badly if everybody gets up and leaves.

01:08:44,880 --> 01:08:46,759
Let's have a question or two.

01:08:46,759 --> 01:08:48,759
Was this all perfectly clear?

01:08:48,759 --> 01:08:54,969
I didn't understand any of it.

01:08:54,969 --> 01:08:57,460
AUDIENCE: So first thank you.

01:08:57,460 --> 01:08:59,650
It's been very informative.

01:08:59,650 --> 01:09:03,569
First, can we see the slide again for registering the URL?

01:09:03,569 --> 01:09:06,049
It went by really fast.

01:09:06,049 --> 01:09:14,769
The second thing is, you mentioned periodical scanning of dependencies.

01:09:14,769 --> 01:09:22,380
Doesn't it make sense to have a tool that gets informed about CVs, about vulnerability

01:09:22,380 --> 01:09:32,650
zero day and then it's easier to bomb your applications dependencies and then scan them,

01:09:32,650 --> 01:09:39,299
because zero day, if you wait until you're scheduled that you scan all your source codes,

01:09:39,299 --> 01:09:43,170
that's going to take quite a bit and you can get hit by that point.

01:09:43,170 --> 01:09:48,889
So having something that gets notification about a new zero day and scans active your

01:09:48,889 --> 01:09:53,730
source code, that kind of wouldn't that make sense?

01:09:53,730 --> 01:10:02,119
ANAND: The question is how do we get the JIRA notification as soon as possible and then

01:10:02,119 --> 01:10:09,699
we can go about and run the scans all over the code, right?

01:10:09,699 --> 01:10:18,150
My past experience with my companies, we are written a script where we are monitoring all

01:10:18,150 --> 01:10:19,570
the Twitter handles.

01:10:19,570 --> 01:10:24,650
All the Twitter like timelines.

01:10:24,650 --> 01:10:33,690
And we are monitoring the things, whoever Tweet about any new attack, we will get the

01:10:33,690 --> 01:10:35,369
notification on that.

01:10:35,369 --> 01:10:39,000
Then we will start working on that, how to do like eliminate those vulnerabilities from

01:10:39,000 --> 01:10:40,000
our code.

01:10:40,000 --> 01:10:41,000
This make sense?

01:10:41,000 --> 01:10:43,070
AUDIENCE: Is it automated that you get notification.

01:10:43,070 --> 01:10:46,800
It automatically triggers CI scans?

01:10:46,800 --> 01:10:48,360
>> It's not like that.

01:10:48,360 --> 01:10:52,340
First we need to have like prioritize things.

01:10:52,340 --> 01:10:56,090
We need to understand what types of vulnerability is that.

01:10:56,090 --> 01:11:00,920
Maybe that JIRA vulnerability does not exist in your code.

01:11:00,920 --> 01:11:09,170
You have to understand what types of vulnerability is raised in your like whether that vulnerability

01:11:09,170 --> 01:11:12,940
really exist in your code.

01:11:12,940 --> 01:11:20,340
Let's suppose the latest version has some JIRA vulnerability.

01:11:20,340 --> 01:11:24,070
But your application is not using Java.

01:11:24,070 --> 01:11:27,909
So no need to use that JIRA vulnerability.

01:11:27,909 --> 01:11:32,849
So you have to very specifically understand what types of JIRA vulnerability coming.

01:11:32,849 --> 01:11:34,909
Does this make sense?

01:11:34,909 --> 01:11:35,949
That's great.

01:11:35,949 --> 01:11:39,560
If you have more question, let me know.

01:11:39,560 --> 01:11:40,560
So any other questions?

01:11:40,560 --> 01:11:41,560
Go ahead, sir.

01:11:41,560 --> 01:11:43,559
AUDIENCE: So how do you ensure that you have, for compliance's code specifically, how do

01:11:43,559 --> 01:11:47,710
you ensure that you have coverage across your entire application base without needing some

01:11:47,710 --> 01:11:55,860
type of manual process, either grooming or something to identify that a specific set

01:11:55,860 --> 01:12:01,440
of compliance requirements applies to the app that you're working on?

01:12:01,440 --> 01:12:03,079
>> ANAND: Okay.

01:12:03,079 --> 01:12:11,260
In that case, you need to have a very like -- you need to have first understand how your

01:12:11,260 --> 01:12:12,489
requirement is, right?

01:12:12,489 --> 01:12:16,310
So for compliance, as you asked for compliance, right?

01:12:16,310 --> 01:12:23,929
So maybe like many companies are doing the HIPAA and some of the benchmarks to compliance.

01:12:23,929 --> 01:12:31,179
So you need to have first goal what you're going to do the compliance, which server or

01:12:31,179 --> 01:12:33,619
which network things.

01:12:33,619 --> 01:12:36,690
And network infrastructure, right?

01:12:36,690 --> 01:12:40,880
So let's suppose in our workshop we did compliance on Tomcat.

01:12:40,880 --> 01:12:48,989
We are using the Tomcat benchmark or whatever we have, benchmark.

01:12:48,989 --> 01:12:57,840
We've taken the list of that benchmark and we have ran the compliance so that our pulls

01:12:57,840 --> 01:13:09,340
and those like benchmarks would be matched with what we are using in our production server.

01:13:09,340 --> 01:13:21,489
So if you are doing this compliance as a code in your automation you need to go and check

01:13:21,489 --> 01:13:23,940
how they are doing manual way.

01:13:23,940 --> 01:13:31,739
So what are their policies, and you need to go through their policies according to the

01:13:31,739 --> 01:13:38,619
policies, and then using the inspector any automated tools and you need to write the

01:13:38,619 --> 01:13:41,770
rules for that policy.

01:13:41,770 --> 01:13:44,980
And then you can embed with your code.

01:13:44,980 --> 01:13:53,329
Whenever the code runs inside the pipeline, go through all the policies and whatever given

01:13:53,329 --> 01:13:54,329
the rules.

01:13:54,329 --> 01:14:01,159
And this way you can combine your server or maybe your application, whatever you're learning.

01:14:01,159 --> 01:14:03,860
So let's suppose the CI/CD.

01:14:03,860 --> 01:14:14,849
We need to have very specific things like our payment gate way should be compliant properly.

01:14:14,849 --> 01:14:18,579
So you already have all the policy listed down.

01:14:18,579 --> 01:14:19,889
You need to have only write the rules.

01:14:19,889 --> 01:14:21,119
Does this make sense?

01:14:21,119 --> 01:14:22,119
That's good.

01:14:22,119 --> 01:14:23,119
>> Going once, going twice.

01:14:23,119 --> 01:14:24,119
AUDIENCE: Hi.

01:14:24,119 --> 01:14:25,119
Great presentation.

01:14:25,119 --> 01:14:26,119
Quick question.

01:14:26,119 --> 01:14:29,790
You showed a few slides where the language that you were scanning made the pipeline change,

01:14:29,790 --> 01:14:33,350
whether you were scanning Python, Java, your pipeline changed.

01:14:33,350 --> 01:14:38,510
Have you found an automatic way to create the pipeline so you don't have to configure

01:14:38,510 --> 01:14:41,249
for the language you're scanning?

01:14:41,249 --> 01:14:51,980
>> ANAND: As such we don't have right now like tool or any open source project, but

01:14:51,980 --> 01:14:56,230
you can create your own framework.

01:14:56,230 --> 01:14:59,559
You need to be very specific with your code.

01:14:59,559 --> 01:15:07,500
Let's suppose developer has returned code on the PHP or they're written on Ruby, so

01:15:07,500 --> 01:15:15,530
you have multiple pipelines where you are running multiple scanners or open source tools

01:15:15,530 --> 01:15:16,530
for that pipeline.

01:15:16,530 --> 01:15:23,070
So you need to have change only to things software composition analysis and static scans.

01:15:23,070 --> 01:15:31,280
So once you get listed down, what programming language your developer is going to be used,

01:15:31,280 --> 01:15:34,500
you have created the pipeline for that.

01:15:34,500 --> 01:15:40,309
So whenever they start programming on that specific language, that pipeline going to

01:15:40,309 --> 01:15:41,309
be run.

01:15:41,309 --> 01:15:43,590
And this way you can solve it.

01:15:43,590 --> 01:15:49,000
AUDIENCE: But if some engineer later on adds some Java and my pipeline was configured for

01:15:49,000 --> 01:15:53,179
Python, we're not going to scan that Java.

01:15:53,179 --> 01:15:58,869
Without modifying the pipeline that is static at this point.

01:15:58,869 --> 01:15:59,869
>> ANAND: Okay.

01:15:59,869 --> 01:16:02,949
You can create a separate project.

01:16:02,949 --> 01:16:09,380
So whatever you work on, all the script, all the automation tools.

01:16:09,380 --> 01:16:16,250
So you need to work on only two things for like Python programming.

01:16:16,250 --> 01:16:21,019
You have change the safety and also you can do the plugins.

01:16:21,019 --> 01:16:25,480
Where you have a plug with multiple tools.

01:16:25,480 --> 01:16:31,900
Let's suppose you have given the rule or you have given the statement.

01:16:31,900 --> 01:16:41,199
If developers using the Python goes to your pipeline and their pipeline, if it's found

01:16:41,199 --> 01:16:46,199
it's Python, then it's going use this tool instead of using that tool.

01:16:46,199 --> 01:16:47,199
AUDIENCE: Great.

01:16:47,199 --> 01:16:49,010
That's what I was looking for.

01:16:49,010 --> 01:16:50,420
I'll ping you offline.

01:16:50,420 --> 01:16:51,420
>> Yeah sure.

01:16:51,420 --> 01:16:53,199
We can do this offline.

01:16:53,199 --> 01:17:01,320
Because when I was giving a solution to one of my clients, they wanted the same way.

01:17:01,320 --> 01:17:05,230
They wanted an implementation in their organization.

01:17:05,230 --> 01:17:12,570
Because developers are often use the multiple programming language.

01:17:12,570 --> 01:17:17,369
Any more questions?

01:17:17,369 --> 01:17:23,499
I hope you guys go back to your home and try this VM.

01:17:23,499 --> 01:17:25,989
So in this VM, I did a lot of things.

01:17:25,989 --> 01:17:35,639
I've written a lot of scripts and those scripts are very useful for you, because it's going

01:17:35,639 --> 01:17:41,030
to give you a picture, or you can take it as a reference to implement your organization.

01:17:41,030 --> 01:17:42,030
>> All right.

01:17:42,030 --> 01:17:43,030
Thanks, Anand.

01:17:43,030 --> 01:17:44,210
Thank you everyone and that's our program for today.

01:17:44,210 --> 01:17:47,249
So big round for Anand Tiwari.

01:17:47,249 --> 01:17:47,760

YouTube URL: https://www.youtube.com/watch?v=1JUCoTVsID0


