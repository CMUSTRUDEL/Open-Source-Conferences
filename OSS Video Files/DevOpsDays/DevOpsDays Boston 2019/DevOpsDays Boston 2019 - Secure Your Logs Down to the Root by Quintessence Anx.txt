Title: DevOpsDays Boston 2019 - Secure Your Logs Down to the Root by Quintessence Anx
Publication date: 2019-10-11
Playlist: DevOpsDays Boston 2019
Description: 
	Secure Your Logs Down to the Root by Quintessence Anx

It’s usually assumed that when a user says “but I have a secure password” that they don’t; however, a lack of security isn’t always due to lack of knowledge. With increasingly large and complex IT environments, it’s becoming more and more difficult to keep up with securing all the components. Of particular interest, what about ensuring that your logs and audit trails themselves are secure? This is what I will be focusing on, in particular how to:

-secure / restrict access to logs prior to shipment
-a secure environment for storing logs
-secure shipment methods
-an audit trail
-not writing sensitive data to logs
-notifications can catch interruptions in log shipment and/or storage

As with all things, part of the “recovery” in “disaster recovery” involves a healthy dose of humor to learn and move past mistakes. As I cover the central requirements for secure logging, I’ll also use experience to show how to handle changes in security requirements iteratively.

#DevOpsDays #DevOpsDaysBoston
Captions: 
	00:00:01,370 --> 00:00:06,460
>> Hello, everyone.

00:00:06,460 --> 00:00:19,200
How are you all doing?

00:00:19,200 --> 00:00:21,900
How's the post lunch food coma?

00:00:21,900 --> 00:00:23,340
Doing good?

00:00:23,340 --> 00:00:24,340
Excellent.

00:00:24,340 --> 00:00:28,300
Before we get started because I'm turning on my row meet here to connect, I'm going

00:00:28,300 --> 00:00:32,340
to have everyone do something I like to do which is a nice stretch to release tension

00:00:32,340 --> 00:00:37,399
because we're about to talk about security and I feel like it's necessary.

00:00:37,399 --> 00:00:40,120
So if you guys could actually just stand up.

00:00:40,120 --> 00:00:42,010
Stretch it out.

00:00:42,010 --> 00:00:44,640
Not kidding.

00:00:44,640 --> 00:00:47,929
If you have the body room for it, sideways is always a benefit.

00:00:47,929 --> 00:00:52,730
But you almost never realize how much stress you hold in your shoulders especially when

00:00:52,730 --> 00:00:58,710
you're hunched over a security incident why is this happening to me it's from and somebody

00:00:58,710 --> 00:00:59,940
pushed production.

00:00:59,940 --> 00:01:02,170
Just kidding.

00:01:02,170 --> 00:01:07,250
So before I get started, and you all can sit down if you're good with your stretching.

00:01:07,250 --> 00:01:10,570
Warning, there are some text-heavy slides.

00:01:10,570 --> 00:01:14,990
But don't panic, because I have all the slides up online and I'll be providing a link to

00:01:14,990 --> 00:01:19,080
that, including all of the links that I used as resources and all the links for additional

00:01:19,080 --> 00:01:20,080
reading.

00:01:20,080 --> 00:01:23,020
So it's going to be a hefty page, but everything will be there.

00:01:23,020 --> 00:01:25,410
So let's get started.

00:01:25,410 --> 00:01:29,560
One thing I wanted to start with is just a quick top-level overview of a few terms and

00:01:29,560 --> 00:01:31,220
some security objectives.

00:01:31,220 --> 00:01:35,750
Because it's really easy to conflate things because I want to make sure we're all understanding

00:01:35,750 --> 00:01:40,040
at least what I hope we're understanding as we go through the log management cycle and

00:01:40,040 --> 00:01:41,040
security.

00:01:41,040 --> 00:01:47,420
First up hash, it's when you obscure data in a way that you don't need to recover it.

00:01:47,420 --> 00:01:51,380
Sometimes you'll salt your hash, which means that you're either pre-pending or pending

00:01:51,380 --> 00:01:53,430
a string to that string value.

00:01:53,430 --> 00:01:58,210
So that when you're hashing it it's not exploitable using a rainbow table when somebody takes

00:01:58,210 --> 00:02:02,520
common dictionary attacks and hashes them for you.

00:02:02,520 --> 00:02:08,420
The third one I wanted to make sure we're all aware of is encryption which is when you're

00:02:08,420 --> 00:02:12,950
obscuring data in a reversible way so you can recover what the original information

00:02:12,950 --> 00:02:13,950
is.

00:02:13,950 --> 00:02:16,040
This is highly relevant for logs in particular.

00:02:16,040 --> 00:02:19,579
You hash a password but you encrypt a log.

00:02:19,579 --> 00:02:20,730
Right?

00:02:20,730 --> 00:02:25,170
Also this is very helpful for you for anything you do after you leave here today for the

00:02:25,170 --> 00:02:26,170
future of your career.

00:02:26,170 --> 00:02:30,329
It's important not to bloat the word security because it means a lot of different things,

00:02:30,329 --> 00:02:33,640
it has a lot of objectives and it has a lot of context.

00:02:33,640 --> 00:02:39,170
This is not an exhaustive list to help you think about more granularity to your queries.

00:02:39,170 --> 00:02:52,409
If you Google how do I if what you care about is oh, I want to make

00:02:52,409 --> 00:02:58,409
sure that the log that's received by the aggregation server matches log that's been sent by the

00:02:58,409 --> 00:03:00,129
shipper, you're caring about integrity.

00:03:00,129 --> 00:03:04,430
If you want to make sure that only the person who you want to see can see logs, can see

00:03:04,430 --> 00:03:06,069
logs, you care about authorization.

00:03:06,069 --> 00:03:07,069
Et cetera.

00:03:07,069 --> 00:03:11,590
So if you're always aware of your objectives, you will get better search results in general

00:03:11,590 --> 00:03:15,079
and that will help you beyond the scope of this talk.

00:03:15,079 --> 00:03:20,129
Also, and this is the biggest trap that I think everyone falls into.

00:03:20,129 --> 00:03:23,370
What do I not mean by security.

00:03:23,370 --> 00:03:26,049
Security please don't do that.

00:03:26,049 --> 00:03:27,049
Ever.

00:03:27,049 --> 00:03:28,599
Don't do it.

00:03:28,599 --> 00:03:31,969
And the reason we don't do it is because there are consequences.

00:03:31,969 --> 00:03:34,590
For example, quick consequence number one.

00:03:34,590 --> 00:03:35,739
But they don't know where it is.

00:03:35,739 --> 00:03:37,870
So that's fine.

00:03:37,870 --> 00:03:39,459
It's fine.

00:03:39,459 --> 00:03:43,639
But it's not fine, because the second that you've separated how much power it takes to

00:03:43,639 --> 00:03:48,540
build the exploit versus to play the exploit it becomes a trivial issue.

00:03:48,540 --> 00:03:53,739
Once they've figured out the thing they thought they were unaware it doesn't matter because

00:03:53,739 --> 00:03:58,629
computers are fast and they'll just deploy it all over the place and you're stuck.

00:03:58,629 --> 00:04:01,409
Also not your roommate, don't share your keys.

00:04:01,409 --> 00:04:05,370
You want to make sure you're being aware of key management.

00:04:05,370 --> 00:04:06,849
You don't want to share them.

00:04:06,849 --> 00:04:09,599
Part of this is because of your audit trial.

00:04:09,599 --> 00:04:14,109
If you're not making sure that the keys are associated with certain users or services,

00:04:14,109 --> 00:04:20,239
then when you try and check out what's happening later, everybody is an EC2 user.

00:04:20,239 --> 00:04:21,239
Yay.

00:04:21,239 --> 00:04:22,239
Right?

00:04:22,239 --> 00:04:23,239
I could keep going.

00:04:23,239 --> 00:04:27,960
I could probably build a whole presentation on this alone, but I'm not going to.

00:04:27,960 --> 00:04:29,419
So you get me.

00:04:29,419 --> 00:04:33,740
And now we're going to try and figure out how this applies to log management.

00:04:33,740 --> 00:04:34,740
First up.

00:04:34,740 --> 00:04:36,349
What does the log lifecycle look like?

00:04:36,349 --> 00:04:37,910
It looks something like this.

00:04:37,910 --> 00:04:43,990
You have a service or an app and it's creating a log, that writes to disk, it's consumed

00:04:43,990 --> 00:04:52,360
somewhere, it's consumed or convert and conversion makes it hierarchical order like JSON something

00:04:52,360 --> 00:04:55,410
that's useable by you.

00:04:55,410 --> 00:05:02,300
At some point you'll need to destroy the data and you'll need to do that safely as well.

00:05:02,300 --> 00:05:05,949
I'm going to be focusing pretty heavily on this create junction.

00:05:05,949 --> 00:05:06,979
Why?

00:05:06,979 --> 00:05:11,220
Because if you don't create it, they can't take it from you.

00:05:11,220 --> 00:05:14,319
So don't.

00:05:14,319 --> 00:05:16,930
What do I mean by sensitive data, though?

00:05:16,930 --> 00:05:22,319
Another non-exhaustive list but yet text-heavy slide, there are lights of things that we

00:05:22,319 --> 00:05:25,380
might want to use as sensitive data.

00:05:25,380 --> 00:05:32,240
Social security numbers is half a joke, but considering how many breaches we've had lately,

00:05:32,240 --> 00:05:34,610
not really a joke.

00:05:34,610 --> 00:05:38,540
And you have things like financial information or patient data.

00:05:38,540 --> 00:05:41,030
And some of those are more obvious and pretty broad.

00:05:41,030 --> 00:05:43,380
If you're working in finance, you probably know not to do that.

00:05:43,380 --> 00:05:46,000
If you're working in health care, you probably know not do that.

00:05:46,000 --> 00:05:50,940
But some of the things that might be less obvious, is for example a pass/fail or a percent

00:05:50,940 --> 00:05:51,940
pass/fail.

00:05:51,940 --> 00:05:58,259
With somebody figures out if they only need a 75% pass on that fingerprint scan they can

00:05:58,259 --> 00:06:08,030
get to 75% and pass and they will know how much closer they are every time they try.

00:06:08,030 --> 00:06:09,210
Same with database queries.

00:06:09,210 --> 00:06:10,720
You might need to know that the query failed.

00:06:10,720 --> 00:06:13,129
You probably don't need to know its full syntax.

00:06:13,129 --> 00:06:19,780
Or if you do, you need to protect it in such a way that if someone gets access, that they

00:06:19,780 --> 00:06:23,740
can't use that as a malicious query later.

00:06:23,740 --> 00:06:29,150
This list goes on but it is to help you think about the types of things you want to protect

00:06:29,150 --> 00:06:32,210
on the creation side.

00:06:32,210 --> 00:06:36,850
The best rule of thumb is only log what you need.

00:06:36,850 --> 00:06:42,450
If you know your data and say I know my infrastructure and I know my data and I know I need this

00:06:42,450 --> 00:06:46,490
much information and I troubleshoot a problem with the service and nothing else, trim the

00:06:46,490 --> 00:06:50,900
rest out and you can analyze what's on the inside and say I know this is sensitive and

00:06:50,900 --> 00:06:56,000
I will hash, encrypt, whatever and ship it out accordingly.

00:06:56,000 --> 00:07:02,539
But sometimes you still ask yourself, self, I really want to write sensitive data.

00:07:02,539 --> 00:07:07,169
I really would like to expose IP addresses in my logs so that someone can reverse engineer

00:07:07,169 --> 00:07:08,169
my infrastructure.

00:07:08,169 --> 00:07:10,539
Okay, maybe you don't say it quite like that.

00:07:10,539 --> 00:07:16,210
But you might say it similarly and just so you know, this is number 532 that people say

00:07:16,210 --> 00:07:21,599
it to themselves often enough that it's in a database for security professionals to search.

00:07:21,599 --> 00:07:23,540
So it comes up.

00:07:23,540 --> 00:07:28,770
So my advice around it is instead of shipping it directly, you ship around it.

00:07:28,770 --> 00:07:34,270
This goes back to what I was talking about before, about hashing and encrypting.

00:07:34,270 --> 00:07:38,680
But you can also redact or tokenize.

00:07:38,680 --> 00:07:40,160
Odds are you don't need it in your log.

00:07:40,160 --> 00:07:42,620
You need to know to look it up from somewhere else.

00:07:42,620 --> 00:07:48,370
If for some bizarre reason you do need social security numbers, you don't need them in your

00:07:48,370 --> 00:07:54,180
log, you need a reference point to say look it up in the text of the log.

00:07:54,180 --> 00:07:56,960
And that will protect the social security number and help however has to troubleshoot

00:07:56,960 --> 00:07:58,650
whatever is going on.

00:07:58,650 --> 00:08:02,070
Whatever you're doing, make sure you're keeping track of whatever regulation requirements

00:08:02,070 --> 00:08:03,629
you may or may not have.

00:08:03,629 --> 00:08:08,040
PCI, HIPAA, I'm sure there's some for aviation as well.

00:08:08,040 --> 00:08:12,259
If you're in a regulated industry there's probably guidelines you should be following

00:08:12,259 --> 00:08:21,680
to make sure you're only writing and shipping out data that is safe and redacted.

00:08:21,680 --> 00:08:25,350
Once you've gotten this far, we need to worry about the next step, which is of course writing

00:08:25,350 --> 00:08:27,340
the actual file.

00:08:27,340 --> 00:08:33,510
So when the log is written to file, odds are you don't need to go into the volume or wherever

00:08:33,510 --> 00:08:36,279
physical disk that is storing the log file.

00:08:36,279 --> 00:08:39,099
So you can lock this right down.

00:08:39,099 --> 00:08:43,560
Whoever is accessing it is probably on the micro service that's right into the log.

00:08:43,560 --> 00:08:45,750
Logs should be append only.

00:08:45,750 --> 00:08:49,970
Because you don't want to retro actively say oh, this event wasn't real.

00:08:49,970 --> 00:08:52,170
It was real.

00:08:52,170 --> 00:08:54,209
We need to accept it.

00:08:54,209 --> 00:08:55,690
As part of our logs.

00:08:55,690 --> 00:09:00,200
So if you care about an intrusion into the disk for whatever reason, you can also encrypt

00:09:00,200 --> 00:09:02,320
log file itself.

00:09:02,320 --> 00:09:06,330
And when you do that, you can use something called forward secure sealing.

00:09:06,330 --> 00:09:11,160
Which is well beyond the scope of 20 minutes that I have.

00:09:11,160 --> 00:09:15,709
But forward secure sealing is using different keys for different points at time.

00:09:15,709 --> 00:09:22,889
If I as an intruder get access to your encryption key I can't cover the past with the past data

00:09:22,889 --> 00:09:27,820
because I don't have those keys and that can help you against forms of attack.

00:09:27,820 --> 00:09:32,130
Also of course rotate your logs because the logs aren't there and all I have access to

00:09:32,130 --> 00:09:36,120
is the volume housing the files, then I don't have access to whatever is physically not

00:09:36,120 --> 00:09:40,360
in front of me.

00:09:40,360 --> 00:09:46,740
Once you have done all that, we've got to ship it so we can actually ship it.

00:09:46,740 --> 00:09:50,769
If you're using a third-party solution, make sure that you're using secure shipping.

00:09:50,769 --> 00:09:54,040
That might go without saying but if you're using an on-prem solution, not only should

00:09:54,040 --> 00:09:57,880
you be shipping it securely, you can also guard your network.

00:09:57,880 --> 00:10:03,579
You can certainly protect your own network and if you make sure that you're not, for

00:10:03,579 --> 00:10:08,600
example, leaving the network and coming back in to ship your log to wherever the server

00:10:08,600 --> 00:10:12,320
is that can protect you a lot.

00:10:12,320 --> 00:10:18,610
And the commonly known exploits that pop up in this case.

00:10:18,610 --> 00:10:22,860
You want to make sure you're limited key access to the centralized logging server so that

00:10:22,860 --> 00:10:25,240
is the only thin that decrypt the logs.

00:10:25,240 --> 00:10:29,840
At this stage we've taken the log, it was in memory we wrote it to disk and we're shipping

00:10:29,840 --> 00:10:32,829
it out.

00:10:32,829 --> 00:10:35,930
This is not how I access the log.

00:10:35,930 --> 00:10:40,209
Unless something goes wrong, I'm not touching any of these things.

00:10:40,209 --> 00:10:42,410
I don't need to decrypt them either.

00:10:42,410 --> 00:10:47,110
What I do need to do is get into this phase.

00:10:47,110 --> 00:10:53,370
Once the logging aggregation has logged, it can decrypt it and put it into a useable format.

00:10:53,370 --> 00:10:56,300
The common concern here is access controls.

00:10:56,300 --> 00:11:01,260
Whether or not you're using your own hosted solution or a third-party solution you need

00:11:01,260 --> 00:11:05,440
access controls and you need a way to logically separate your data too.

00:11:05,440 --> 00:11:08,870
This might go without saying, but interns, they're great.

00:11:08,870 --> 00:11:10,820
They do a lot of labor for us.

00:11:10,820 --> 00:11:15,600
But maybe you don't want them to access production on accident just in case, because learning

00:11:15,600 --> 00:11:16,600
is hard.

00:11:16,600 --> 00:11:20,779
And if you don't have an ability -- if you have all of your logs going to an aggregation

00:11:20,779 --> 00:11:25,360
server and you do not have the ability to separate them out to whatever makes sense

00:11:25,360 --> 00:11:30,339
for your solution, they can actually trip up on things they don't mean to.

00:11:30,339 --> 00:11:33,160
So it's your responsibility to protect that information.

00:11:33,160 --> 00:11:36,310
But also as your engineering team grows, needs change.

00:11:36,310 --> 00:11:41,149
Your initial solution might be for a 7-team engineering start-up that expands to a 100-team

00:11:41,149 --> 00:11:48,220
very heavily siloed skilled engineering squad, separate people for the web development, separate

00:11:48,220 --> 00:11:54,170
people for apps and so forth and you want to make sure everyone has access to everything

00:11:54,170 --> 00:11:58,480
they need, but not much more than that.

00:11:58,480 --> 00:12:01,709
You also, going back to something I mentioned earlier, want to make sure you're denying

00:12:01,709 --> 00:12:05,649
or limiting use of malformed or intentionally malicious queries.

00:12:05,649 --> 00:12:10,399
A nice blog post in 2014 that can help you think about.

00:12:10,399 --> 00:12:16,480
It's not common for people to write a blog post this is how you topple our stack but

00:12:16,480 --> 00:12:19,779
they did it a long time ago when it was no longer the current version of their stack

00:12:19,779 --> 00:12:22,320
and they fixed it.

00:12:22,320 --> 00:12:28,490
It can help you think about things even if I'm not using elastic, maybe I'm using an

00:12:28,490 --> 00:12:30,440
APM.

00:12:30,440 --> 00:12:31,899
Maybe I'm using somebody else.

00:12:31,899 --> 00:12:36,589
Maybe I'm using a different service or a type or I'm using my own on-prem or whatever, I

00:12:36,589 --> 00:12:40,420
need to actually think about what breaks the solution and how do I make sure that people

00:12:40,420 --> 00:12:41,990
can't accidentally break it.

00:12:41,990 --> 00:12:46,660
Because mostly, and I say that with a little asterisk, but most commonly you're going to

00:12:46,660 --> 00:12:56,500
run into people unintentionally, a malformed query.

00:12:56,500 --> 00:12:58,560
It's not usually a malicious attack.

00:12:58,560 --> 00:13:02,329
Again, asterisks in general.

00:13:02,329 --> 00:13:05,950
Moving on to destruction.

00:13:05,950 --> 00:13:09,700
You need to secure your own destruction.

00:13:09,700 --> 00:13:10,700
Also comes up often.

00:13:10,700 --> 00:13:13,660
Quite a bit more often than the other one.

00:13:13,660 --> 00:13:16,070
Number 117.

00:13:16,070 --> 00:13:20,550
Secure destruction is hard and it depends again a lot on what you've chosen to implement

00:13:20,550 --> 00:13:22,339
in your logging solution.

00:13:22,339 --> 00:13:27,829
Some differences between on-prem versus SaaS versus regulated versus nonregulated.

00:13:27,829 --> 00:13:32,070
A common example would be HIPAA.

00:13:32,070 --> 00:13:36,170
You might be required to physically shred your drives.

00:13:36,170 --> 00:13:37,610
That might be a thing.

00:13:37,610 --> 00:13:41,319
If you're doing an on-prem solution for something like an e-commerce app, it's less about the

00:13:41,319 --> 00:13:46,060
shredding and more about making sure that people can't scrape around for different queries

00:13:46,060 --> 00:13:49,210
for -- transactions, not queries.

00:13:49,210 --> 00:13:54,089
So people can't pull things out of your resulting information that maybe has been sitting and

00:13:54,089 --> 00:13:57,270
ignored because it's a month or two or five years old.

00:13:57,270 --> 00:14:01,670
If you're keeping up with regulation requirements, some of this is documented for you, you need

00:14:01,670 --> 00:14:04,480
to make sure that you know the difference between a delete and a wipe.

00:14:04,480 --> 00:14:08,520
One is saying this space is available, one is actually writing over that space so it

00:14:08,520 --> 00:14:12,870
can't be recovered by certain tools that are designed to do exactly that.

00:14:12,870 --> 00:14:17,069
If you're doing certain types of delete, you might be entrusted in a cryptic graphic race

00:14:17,069 --> 00:14:23,660
when you delete the key that encrypts the data.

00:14:23,660 --> 00:14:28,020
It becomes impossible to recover the data even if the data is physically found.

00:14:28,020 --> 00:14:34,440
All of these things might be helpful to you as you go forth and delete your information.

00:14:34,440 --> 00:14:39,000
And now for some closing thoughts.

00:14:39,000 --> 00:14:41,100
Closing thought number one.

00:14:41,100 --> 00:14:42,100
Know your data.

00:14:42,100 --> 00:14:46,800
I've said it a few times, but there are a certain things that you apply to how you designed

00:14:46,800 --> 00:14:49,100
your application, your infrastructure and everything else.

00:14:49,100 --> 00:14:52,980
If you don't know your data beyond what's blatantly obvious, you won't be able to know

00:14:52,980 --> 00:14:58,480
if you're accidentally writing something that can give someone insight into your sliiltion.

00:14:58,480 --> 00:15:02,830
Relatedly, know your infrastructure.

00:15:02,830 --> 00:15:11,090
I made that quip earlier about making IP addresses so someone can reverse.

00:15:11,090 --> 00:15:15,430
There's also API, there are lots of things people can do to reverse engineer your solution

00:15:15,430 --> 00:15:18,959
that you probably don't want appearing in your logs.

00:15:18,959 --> 00:15:22,480
Once you've figured out what that is, you need to assess the risk.

00:15:22,480 --> 00:15:27,670
You need to be mindful if someone has this information, what damage can they do with

00:15:27,670 --> 00:15:28,670
it.

00:15:28,670 --> 00:15:33,389
It's not physically feasible to have an engineering team pretty much of almost any size to actually

00:15:33,389 --> 00:15:38,589
successfully secure every security objective on every application service and everything

00:15:38,589 --> 00:15:39,589
down its full stack.

00:15:39,589 --> 00:15:41,740
We don't have enough human time.

00:15:41,740 --> 00:15:45,350
But we can priorities and say this is the highest risk and we're going to secure it

00:15:45,350 --> 00:15:46,889
force and go down the list.

00:15:46,889 --> 00:15:52,100
And we can't go down the list in a mindful way if we don't assess it.

00:15:52,100 --> 00:15:55,171
Again, without saying, don't apply anything that's not relevant to you.

00:15:55,171 --> 00:16:01,850
You see a lot of information about HIPAA and PCI, but if you're not any of those things,

00:16:01,850 --> 00:16:03,480
it's limitedly helpful.

00:16:03,480 --> 00:16:07,779
It can help you learn some ideas that you weren't previously aware of, but it doesn't

00:16:07,779 --> 00:16:10,330
immediately apply to your web server.

00:16:10,330 --> 00:16:14,449
So when you're searching things out, make sure that you're keeping it in scope for whatever

00:16:14,449 --> 00:16:18,360
objectives or concerns that you have currently.

00:16:18,360 --> 00:16:22,480
Trust and verify your tools and frameworks because we all have things that make our lives

00:16:22,480 --> 00:16:26,292
earlier, and we trust them not to hemorrhage our data and make sure they're not.

00:16:26,292 --> 00:16:30,519
That would be a horrible thing to find out and sometimes people do.

00:16:30,519 --> 00:16:34,660
You'll be using your framework for a period of time you're not realizing it's taking a

00:16:34,660 --> 00:16:41,790
shortcut that you would prefer it not to take because you know your data better than this

00:16:41,790 --> 00:16:43,130
does.

00:16:43,130 --> 00:16:47,600
Make good use of your metrics because if someone does intrude on your system, in all likelihood

00:16:47,600 --> 00:16:50,710
you'll notice a metric spike.

00:16:50,710 --> 00:16:57,829
Someone is able to pop a crypto miner you'll notice a spike in CPU memory.

00:16:57,829 --> 00:17:01,920
You'll know it's not directly relevant to what should be happening at that time you

00:17:01,920 --> 00:17:06,589
can hopefully find what's happened.

00:17:06,589 --> 00:17:10,230
To that end, make sure that you're using your audit trail because you can't tell who popped

00:17:10,230 --> 00:17:14,540
that crypt tow miner on there if everyone is an EC2 user.

00:17:14,540 --> 00:17:16,610
That's only half a joke.

00:17:16,610 --> 00:17:21,420
How many people have been in a situation where maybe there weren't as specific accounts as

00:17:21,420 --> 00:17:22,750
there ought be?

00:17:22,750 --> 00:17:29,260
A couple of nervous hands because you don't know if I'm actually polling you not.

00:17:29,260 --> 00:17:37,030
If you can't tell if it was an external or internal user and you need to be able to tell

00:17:37,030 --> 00:17:41,100
that information to be able to recover or know where it is coming from, or block it

00:17:41,100 --> 00:17:44,850
as the case may be.

00:17:44,850 --> 00:17:50,110
I will say this, using alerts judicially, but I will say it with an asterisk because

00:17:50,110 --> 00:17:52,750
it's very hard to pattern-match on unknowns.

00:17:52,750 --> 00:17:58,510
There are a lot of programs that help with this, but in general flipping back to know

00:17:58,510 --> 00:18:02,720
your data, if you know that social security numbers are a risk, those are an easy pattern

00:18:02,720 --> 00:18:09,350
match, you can make an alert, if anything matches a log file with this source or alert

00:18:09,350 --> 00:18:10,350
me.

00:18:10,350 --> 00:18:17,039
IP addresses are another known grabbable thing.

00:18:17,039 --> 00:18:21,190
Use this with caution and use it where applicable and use it for the most sensitive thing because

00:18:21,190 --> 00:18:25,900
you don't want to be woken up at unreasonable times for things that could be involved during

00:18:25,900 --> 00:18:28,120
the business day.

00:18:28,120 --> 00:18:30,039
Also, make sure you get help when you need it.

00:18:30,039 --> 00:18:31,679
You're not expected to be DevSecOps.

00:18:31,679 --> 00:18:40,960
We're not going to keep shoving things in until we can't make it a word anymore and

00:18:40,960 --> 00:18:46,120
nobody should expect you to be an expert in everything simultaneously.

00:18:46,120 --> 00:18:48,300
That's why we leverage each other for support.

00:18:48,300 --> 00:18:53,140
With that said you can bring external help for things even if it's just for questions,

00:18:53,140 --> 00:18:57,900
but you can have someone run pen testing or social engineering testing on your app and

00:18:57,900 --> 00:19:04,429
they might find that shipping labels are not considered a high priority so I'm going to

00:19:04,429 --> 00:19:09,630
not pay attention to them and all of a sudden the security consultancy has ripped out my

00:19:09,630 --> 00:19:11,720
client list for my shipping labels.

00:19:11,720 --> 00:19:12,720
Whoops.

00:19:12,720 --> 00:19:16,700
But I wouldn't have known to look for that, but they did.

00:19:16,700 --> 00:19:20,470
And that's why you make sure to leverage the help that you need.

00:19:20,470 --> 00:19:24,450
Tip 10, prevention is important.

00:19:24,450 --> 00:19:31,830
There is a difference between I wish you didn't have this log file and I really needed you

00:19:31,830 --> 00:19:34,170
to not have this log file.

00:19:34,170 --> 00:19:38,820
And I see something about that, I feel like you know in your soul this is true.

00:19:38,820 --> 00:19:43,440
So it's very important to protect everything going into the file before it's shipped anywhere,

00:19:43,440 --> 00:19:45,610
before it's even written to a file.

00:19:45,610 --> 00:19:50,220
At that generation stage and that can save you a lot of heartache later.

00:19:50,220 --> 00:19:54,640
And this is the slide to take a photo of.

00:19:54,640 --> 00:19:58,100
If that is your interest to do.

00:19:58,100 --> 00:20:00,370
I have lots of extra reading on there too.

00:20:00,370 --> 00:20:04,240
So be prepared for that.

00:20:04,240 --> 00:20:14,880
As well as a book or two.

00:20:14,880 --> 00:20:19,440
That is the beginnings of securing over the log management cycle.

00:20:19,440 --> 00:20:20,600
My name is Quintessance.

00:20:20,600 --> 00:20:23,529
I am a new techie advantage list for App Dynamics.

00:20:23,529 --> 00:20:32,019
Find me at the booth or walking around in this lovely blue shirt.

00:20:32,019 --> 00:20:38,570
[ Applause ] Apparently there's time to take questions

00:20:38,570 --> 00:20:39,570
if anyone wants to do that.

00:20:39,570 --> 00:20:40,570
AUDIENCE: I don't know if there is a mic.

00:20:40,570 --> 00:20:43,600
>> I can just repeat it.

00:20:43,600 --> 00:20:45,580
AUDIENCE: You talk about knowing your data, one thing I've seen come up when you have

00:20:45,580 --> 00:20:46,580
large organizations and people move around, team's inherent projects and don't know their

00:20:46,580 --> 00:20:47,580
data.

00:20:47,580 --> 00:20:48,580
So how do you encourage a culture of people who care about this or what are some tips

00:20:48,580 --> 00:20:49,580
you maybe may have to get people to care.

00:20:49,580 --> 00:20:50,610
>> Quintessance: The biggest tip I would have is to encourage a culture that has explicit

00:20:50,610 --> 00:20:54,460
onboarding.

00:20:54,460 --> 00:20:56,830
When you're onboarding new employees you teach them what to care about.

00:20:56,830 --> 00:21:01,290
But once you start doing explicit onboarding you can do explicit onboarding for team changes

00:21:01,290 --> 00:21:02,970
as well.

00:21:02,970 --> 00:21:06,679
As part of that process you would say the people who have that knowledge can pass on

00:21:06,679 --> 00:21:11,810
that knowledge and the people who don't can start to iteratively add on to say I didn't

00:21:11,810 --> 00:21:18,010
know to ask this and we've figured it out and every time it's more complete.

00:21:18,010 --> 00:21:21,410
Because communication is going to be the biggest inhibitor there.

00:21:21,410 --> 00:21:23,030
AUDIENCE: You talked about tokenizing PII in the log.

00:21:23,030 --> 00:21:24,830
Where do you put it, the token points to what?

00:21:24,830 --> 00:21:28,140
>> To repeat that, I talked about tokenizing, what is the token point to.

00:21:28,140 --> 00:21:30,039
It depends where you've stored it.

00:21:30,039 --> 00:21:34,409
You might be tokenizing something that's a reference data that you might be -- you tokenize

00:21:34,409 --> 00:21:36,980
that and you find where it is pointing.

00:21:36,980 --> 00:21:41,010
It might be as simple as pointing to a database and in my experience that's going to be the

00:21:41,010 --> 00:21:49,140
most common because you've stored the data you're pointing to usually 

00:21:49,140 --> 00:21:54,570
in a database or something of that nature.

00:21:54,570 --> 00:21:56,679
Any other questions?

00:21:56,679 --> 00:22:01,529
AUDIENCE: So I'm on an engineering team and one of our goals recently has been to shift

00:22:01,529 --> 00:22:20,430
left on security and an audit as son as possible.

00:22:20,430 --> 00:22:24,130
>> Do you know if you're having them test black box or not.

00:22:24,130 --> 00:22:31,110
There are two ways that I know of off the top of my head.

00:22:31,110 --> 00:22:35,350
One is you do with without.

00:22:35,350 --> 00:22:45,231
It's two different tests and there are benefits to both and I'm not going to advocate one

00:22:45,231 --> 00:22:47,070
from the other.

00:22:47,070 --> 00:22:50,490
If they think they're supposed to be getting access to something they don't have or vice

00:22:50,490 --> 00:22:52,679
versa, that could be a problem.

00:22:52,679 --> 00:22:56,909
Usually with penetration, it's pretty well documented and I had a prior company where

00:22:56,909 --> 00:23:00,210
we did similar but with an external consultancy.

00:23:00,210 --> 00:23:05,909
I downloaded a checklist for penetration testing and I made sure we were on the same page for

00:23:05,909 --> 00:23:09,440
all of those items and anything else they thought to bring to the table.

00:23:09,440 --> 00:23:13,450
It's important to leverage their expertise too because the reason you're bringing them

00:23:13,450 --> 00:23:18,159
in is because they know to ask certain questions that you don't yet.

00:23:18,159 --> 00:23:21,890
So once you compile your list of things that you know to care about, make sure you say

00:23:21,890 --> 00:23:26,840
hey, is there anything you would like to contribute and make sure they're being treated as equal

00:23:26,840 --> 00:23:28,270
contributors.

00:23:28,270 --> 00:23:33,490
It's not a top-down scenario where someone is viewed as higher above them that can start

00:23:33,490 --> 00:23:35,950
that process.

00:23:35,950 --> 00:23:43,110
AUDIENCE: Thank you.

00:23:43,110 --> 00:23:46,360
>> Quintessance: Anybody else?

00:23:46,360 --> 00:23:49,960
AUDIENCE: [ Off microphone ] >> Quintessance: You're asking about how to

00:23:49,960 --> 00:23:54,899
secure data that's going into the SMTP server?

00:23:54,899 --> 00:23:58,140
SFTP, okay.

00:23:58,140 --> 00:24:07,110
In that case, I mean it's generally still going to be a matter of encrypting or hashing

00:24:07,110 --> 00:24:08,870
or just redacting.

00:24:08,870 --> 00:24:15,169
How much control do you have over it?

00:24:15,169 --> 00:24:16,809
It's all in-house.

00:24:16,809 --> 00:24:21,260
You can redact the irrelevant bits out of anything that's getting logged, right?

00:24:21,260 --> 00:24:24,220
When you're having it write whatever events that it's transacting.

00:24:24,220 --> 00:24:29,790
So make sure you're doing a lot of heavy redaction, is what I would say off the top of my head,

00:24:29,790 --> 00:24:31,370
not knowing your specific implementation.

00:24:31,370 --> 00:24:36,659
If there's anything you need to recover, just encrypt, rather than just overloading your

00:24:36,659 --> 00:24:37,659
log.

00:24:37,659 --> 00:24:39,010
Encrypt the whole thing and ship it encrypted.

00:24:39,010 --> 00:24:40,010
Anybody else?

00:24:40,010 --> 00:24:41,010
I think I'm close to time.

00:24:41,010 --> 00:24:42,010
All right.

00:24:42,010 --> 00:24:43,970

YouTube URL: https://www.youtube.com/watch?v=fPmofzk7Hfs


