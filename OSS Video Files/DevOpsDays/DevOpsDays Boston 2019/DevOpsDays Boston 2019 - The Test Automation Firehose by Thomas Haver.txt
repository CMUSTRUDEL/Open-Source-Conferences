Title: DevOpsDays Boston 2019 - The Test Automation Firehose by Thomas Haver
Publication date: 2019-10-11
Playlist: DevOpsDays Boston 2019
Description: 
	The Test Automation Firehose: Be Strategic and Tactical by Thomas Haver

The widespread adoption of test automation has led to numerous challenges that range from development lifecycle integration to simple scripting strategy. Just because a scenario CAN be automated does not mean it SHOULD be automated. Teams that adopt automation often rush to automate everything they can â€“ the automation firehose. For those scenarios that should automated, every team must adopt an implementation plan to ensure value is derived from reliable automated test execution. In this session, the audience will learn how to automate both strategically and tactically to maximize the benefits of automation. Entry criteria will be demonstrated for automation in the development lifecycle along with a set of checks to determine automation feasibility & ROI.

#DevOpsDays #DevOpsDaysBoston
Captions: 
	00:00:16,949 --> 00:00:18,489
Thank you all for attending my talk today.

00:00:18,489 --> 00:00:22,249
You're probably wondering why is Thanos hovering up and down.

00:00:22,249 --> 00:00:29,550
This is a theme presentation, you will get bespoke, artisanal, locally sourced handcrafted

00:00:29,550 --> 00:00:31,289
images to do with the Avengers.

00:00:31,289 --> 00:00:35,760
The reason why it's the Avengers, every year in Columbus they have a conference held at

00:00:35,760 --> 00:00:38,840
a movie theater with the release of a movie.

00:00:38,840 --> 00:00:42,130
And I like to play to the audience.

00:00:42,130 --> 00:00:45,629
And for the movie, it was the Avengers the last two years.

00:00:45,629 --> 00:00:47,399
And I used an avengers themed presentation.

00:00:47,399 --> 00:00:54,710
This is an opportunity to see a hand crafted PowerPoint.

00:00:54,710 --> 00:01:00,050
Today we will be talking about how to automate strategically and tactically from a test automation

00:01:00,050 --> 00:01:01,050
perspective.

00:01:01,050 --> 00:01:03,009
This ties in nicely with the last presentation.

00:01:03,009 --> 00:01:07,869
It was focused on the tactic of delivering on your CI/CD pipeline.

00:01:07,869 --> 00:01:14,921
We will talk about in depth what can you look at strategic wise, as well as examples and

00:01:14,921 --> 00:01:19,630
tactics that doesn't say one area or path is the best one.

00:01:19,630 --> 00:01:25,200
We will talk about framework and teems you can use, the challenges commonly associated

00:01:25,200 --> 00:01:26,859
with test automation.

00:01:26,859 --> 00:01:30,090
How can you schedule them, what are metrics you can follow?

00:01:30,090 --> 00:01:34,950
That's in the end in the appendix because no one likes math.

00:01:34,950 --> 00:01:37,259
I work at designer brands.

00:01:37,259 --> 00:01:42,729
Previous that, I worked at Huntington National bank.

00:01:42,729 --> 00:01:47,179
For a decade I was a research scientists traveling around to universities giving them massive

00:01:47,179 --> 00:01:48,329
amounts of money.

00:01:48,329 --> 00:01:53,950
Eventually they gave me a piece of paper and I went into IT.

00:01:53,950 --> 00:01:55,619
I own over 2,000 board games.

00:01:55,619 --> 00:01:57,079
My favorite is diplomacy.

00:01:57,079 --> 00:01:59,539
I travel around the world to play it.

00:01:59,539 --> 00:02:04,279
It is known as the destroyer of friendships.

00:02:04,279 --> 00:02:07,569
That's the reason I have to travel around the world to play it.

00:02:07,569 --> 00:02:09,910
I'm an evangelist for Ruby cucumber.

00:02:09,910 --> 00:02:15,319
The automation toolset of choice in the Columbus, Ohio area.

00:02:15,319 --> 00:02:18,620
It's one that I like, a domain specific language.

00:02:18,620 --> 00:02:21,819
And it's something I'm going to show you in a few examples today.

00:02:21,819 --> 00:02:23,490
But not say this is really the answer.

00:02:23,490 --> 00:02:25,819
I have an adorable cartoon family.

00:02:25,819 --> 00:02:27,099
They are real.

00:02:27,099 --> 00:02:30,230
This is just the cartoon formats for me.

00:02:30,230 --> 00:02:31,560
A wife and two kids.

00:02:31,560 --> 00:02:36,569
They take up the majority of my time now as opposed to board games or science or IT.

00:02:36,569 --> 00:02:38,879
A little bit of background.

00:02:38,879 --> 00:02:42,970
Just level set, a couple of definitions.

00:02:42,970 --> 00:02:44,959
Start with strategy and tactics.

00:02:44,959 --> 00:02:47,090
What do we mean be I that?

00:02:47,090 --> 00:02:52,739
For strategy, that's a plan of action or a policy that we have to achieve an overall

00:02:52,739 --> 00:02:53,879
goal.

00:02:53,879 --> 00:02:59,540
Whereas the tactics are the actual art of implementing it, achieving some end with whatever

00:02:59,540 --> 00:03:01,090
you have available to you.

00:03:01,090 --> 00:03:06,099
For example, Star Lord, we had an excellent strategy for defeating Thanos, but his own

00:03:06,099 --> 00:03:09,300
emotional tactics cost the team the win.

00:03:09,300 --> 00:03:14,629
And Thanos ended up snapping half the galaxy.

00:03:14,629 --> 00:03:18,300
To go to where we are now, let's start and look back in the past.

00:03:18,300 --> 00:03:22,040
Oftentimes we have a habit of thinking about our problems as being something that's brand

00:03:22,040 --> 00:03:23,040
new.

00:03:23,040 --> 00:03:27,700
This is something that how do we automate strategically or tactically or how to use

00:03:27,700 --> 00:03:28,700
testing efforts.

00:03:28,700 --> 00:03:31,510
It's been around for decades.

00:03:31,510 --> 00:03:38,239
Internet explorer 6, for those of you in your early 20s, never had to develop or test around

00:03:38,239 --> 00:03:41,760
Internet explorer 6, you are lucky.

00:03:41,760 --> 00:03:43,120
It sucked.

00:03:43,120 --> 00:03:44,120
Microsoft.

00:03:44,120 --> 00:03:49,530
They had a great challenge in that nay had many different variations of Internet browsers

00:03:49,530 --> 00:03:52,790
and operating systems with which to support.

00:03:52,790 --> 00:03:56,830
You compound that by 26 different language binaries.

00:03:56,830 --> 00:04:03,189
Compound that with the different services for companies for compatibility.

00:04:03,189 --> 00:04:07,920
This is their testing matrix from 2004.

00:04:07,920 --> 00:04:13,780
Way, way, way too many combinations for someone to reasonably test or to have a team testing

00:04:13,780 --> 00:04:17,489
even though they are probably the most company in the world at the time.

00:04:17,489 --> 00:04:18,709
So, what did they do?

00:04:18,709 --> 00:04:19,850
How did they solve this problem?

00:04:19,850 --> 00:04:27,140
Even if you're going to use automation to test these situations, they identified different

00:04:27,140 --> 00:04:28,140
buckets.

00:04:28,140 --> 00:04:32,620
So called personas what we would call them to today of what common customers looked like

00:04:32,620 --> 00:04:39,670
and tested them according to the personas and tested they want with the combination.

00:04:39,670 --> 00:04:41,600
We reasonably expected this to work.

00:04:41,600 --> 00:04:46,530
For Internet Explorer, didn't work, but that was the browser itself.

00:04:46,530 --> 00:04:53,220
And the challenges with the combinations apply to today.

00:04:53,220 --> 00:04:55,340
We worry about browser esque combinations.

00:04:55,340 --> 00:05:01,820
And if we're testing mobile applications because the market is so fractured.

00:05:01,820 --> 00:05:06,850
But overall across decades of using test automation, it's always promised the same thing.

00:05:06,850 --> 00:05:10,760
We're going to save time and lower costs while raising quality.

00:05:10,760 --> 00:05:12,880
Seemingly something that is impossible.

00:05:12,880 --> 00:05:15,320
Oftentimes something that is not delivered.

00:05:15,320 --> 00:05:20,570
How do we actually implement test automation, associate it with our test stack and processes

00:05:20,570 --> 00:05:24,670
and people and make it something that is successful?

00:05:24,670 --> 00:05:25,920
We are all encountering challenges.

00:05:25,920 --> 00:05:28,290
I will ask the audience for feedback.

00:05:28,290 --> 00:05:32,970
I will provide one, I like to get things off my chest of trouble we've had.

00:05:32,970 --> 00:05:40,140
Recently with we had an issue where the outside vendor was delaying.

00:05:40,140 --> 00:05:42,750
What did we end up doing or cutting?

00:05:42,750 --> 00:05:46,940
We don't have to have unit test for them to deliver it.

00:05:46,940 --> 00:05:47,940
What about you?

00:05:47,940 --> 00:05:49,460
Anything else someone wants to share?

00:05:49,460 --> 00:05:52,400
You can speak up out loud so we don't have to use the microphone.

00:05:52,400 --> 00:05:54,970
Of an issue you've had with test automation?

00:05:54,970 --> 00:05:58,010
We're all friends here.

00:05:58,010 --> 00:06:01,050
Feel free to share.

00:06:01,050 --> 00:06:03,330
>> What was that?

00:06:03,330 --> 00:06:06,370
AUDIENCE: Undocumented return codes.

00:06:06,370 --> 00:06:10,000
THOMAS: Great for testing, great for looking down through and trying to figure out what

00:06:10,000 --> 00:06:12,350
the problem is.

00:06:12,350 --> 00:06:16,790
Oftentimes I see some of the common challenges associated with automation relate to actually

00:06:16,790 --> 00:06:18,620
like the implementation thereof.

00:06:18,620 --> 00:06:22,780
If we don't make it something that's part of the life cycle or just decide to choose

00:06:22,780 --> 00:06:24,810
the toolset.

00:06:24,810 --> 00:06:28,930
Determined by a prior manager or management structure that people are forced to use because

00:06:28,930 --> 00:06:30,780
of they have signed a contract.

00:06:30,780 --> 00:06:32,210
These are common issues.

00:06:32,210 --> 00:06:37,030
But the overall goal in terms of what automation promises is important.

00:06:37,030 --> 00:06:45,570
At some point it becomes so large that you don't have the amount of time to test it appropriately

00:06:45,570 --> 00:06:47,020
and quality drops.

00:06:47,020 --> 00:06:51,681
And if you bring about some form of automation at a certain point in time, then great, you

00:06:51,681 --> 00:06:56,900
actually end up saving that time because you have greater test coverage, you have a quicker

00:06:56,900 --> 00:07:00,370
feedback loop and you would be able to figure out where your problems are and address them

00:07:00,370 --> 00:07:01,370
more quickly.

00:07:01,370 --> 00:07:08,130
You can move to what we have today with CI/CD type lines with unit tests, security scans,

00:07:08,130 --> 00:07:12,940
perf testing, testing before you deploy to production.

00:07:12,940 --> 00:07:17,720
But in production, this is much more difficult than set up and pressing play.

00:07:17,720 --> 00:07:23,150
In terms of automation strategy, what do we mean when we say overall automation strategy?

00:07:23,150 --> 00:07:27,990
You need to think about this and document for your organization rather than just saying

00:07:27,990 --> 00:07:28,990
we're buying a tool.

00:07:28,990 --> 00:07:30,320
Go ahead and automate everything.

00:07:30,320 --> 00:07:32,850
You need to consider what the scope of your testing is.

00:07:32,850 --> 00:07:38,030
What are the objectives for a project, for company?

00:07:38,030 --> 00:07:41,820
What is the approach you're going to take to deliver it within the teams?

00:07:41,820 --> 00:07:44,290
What are the framework and tooling you're going to select?

00:07:44,290 --> 00:07:48,260
What sort of environment you have to actually work in terms of the people?

00:07:48,260 --> 00:07:53,350
And in terms of scheduling, like how does it actually fit into execute for your expectations

00:07:53,350 --> 00:07:55,530
for, say, we want to have deployment in three to four minutes.

00:07:55,530 --> 00:08:00,260
Or we want to have deployment every single sprint or quarterly deployment.

00:08:00,260 --> 00:08:03,410
Let's start off with the approach.

00:08:03,410 --> 00:08:09,910
What I find to be most reasonable is to prep people with a common set of questions or checklists.

00:08:09,910 --> 00:08:14,560
So, this was pulled from one of the checklists I use for people who are explicitly on the

00:08:14,560 --> 00:08:15,560
team.

00:08:15,560 --> 00:08:19,370
So, this is just to get them in the habilitate of making consideration of is this something

00:08:19,370 --> 00:08:21,500
that we should automate?

00:08:21,500 --> 00:08:23,320
Is this something that's highly repeatable?

00:08:23,320 --> 00:08:24,500
Is it a repetitive task?

00:08:24,500 --> 00:08:25,850
Is it prone to human error?

00:08:25,850 --> 00:08:29,770
Is this something where we can have control of our data and environment?

00:08:29,770 --> 00:08:33,279
So, having this sort of checks list that you can prom people with.

00:08:33,279 --> 00:08:38,390
Make sure everyone is making a similar decision regardless of what team they are on.

00:08:38,390 --> 00:08:43,269
At my prior company, I had a team of eight and we support 73 different applications.

00:08:43,269 --> 00:08:46,620
407 were web, but desktop, database, mainframe.

00:08:46,620 --> 00:08:51,290
How to set up to have a universal set of standards across the enterprise.

00:08:51,290 --> 00:08:57,080
Using checklists like this will get the idea of we can't automate this.

00:08:57,080 --> 00:08:58,610
This is a good candidate.

00:08:58,610 --> 00:09:02,420
It's something I recommend you use as well.

00:09:02,420 --> 00:09:05,730
But one of the things that's not considered about in term of how we're going to implement

00:09:05,730 --> 00:09:09,620
automation is are the costs associated with it.

00:09:09,620 --> 00:09:13,040
Development code and automation code are both code.

00:09:13,040 --> 00:09:20,470
So, every time you exit to writing tests scripts, a unit test, automation or functional test,

00:09:20,470 --> 00:09:24,120
you are committing to maintaining that code.

00:09:24,120 --> 00:09:26,530
So, that is the risk which you're taking.

00:09:26,530 --> 00:09:27,680
You have to automate wisely.

00:09:27,680 --> 00:09:29,630
You just can't try to automate everything.

00:09:29,630 --> 00:09:32,550
The so called automation firehose.

00:09:32,550 --> 00:09:34,420
Take into account the maintenance costs.

00:09:34,420 --> 00:09:40,120
As well as costs of updating documentation, the training and onboarding, OS and language

00:09:40,120 --> 00:09:41,120
upgrades.

00:09:41,120 --> 00:09:44,720
This is an additional codebase that you have to support.

00:09:44,720 --> 00:09:50,040
It doesn't matter whether your saying have the developers do it or your test automation

00:09:50,040 --> 00:09:54,120
developers do it or people you've converted over and brought over to help out with automation.

00:09:54,120 --> 00:09:58,040
You are committing to supporting that code as soon as you write it.

00:09:58,040 --> 00:10:01,360
When you're writing that test automation, you better be sure that it's going to be something

00:10:01,360 --> 00:10:04,120
that's valuable and going to provide good return on investment.

00:10:04,120 --> 00:10:10,180
This cost needs to be baked into your overall cost for any automation effort.

00:10:10,180 --> 00:10:13,490
You have additional constraints from an organizational perspective.

00:10:13,490 --> 00:10:17,950
I've seen this on a single team, I've seen it in supporting an entire enterprise.

00:10:17,950 --> 00:10:18,950
They want the world.

00:10:18,950 --> 00:10:22,140
We want everything in our regression automated.

00:10:22,140 --> 00:10:25,440
Say we have 15,000 test cases, automate it all.

00:10:25,440 --> 00:10:27,820
That's not actually the way you can approach things.

00:10:27,820 --> 00:10:29,950
They're not going to stop all work to do that.

00:10:29,950 --> 00:10:34,740
No, we have to consider what sort of the restrictions we have in terms of project delivery.

00:10:34,740 --> 00:10:37,150
What project budget do we have available?

00:10:37,150 --> 00:10:40,960
What's the technical skill set of the people in our organization?

00:10:40,960 --> 00:10:45,210
Twice now at a couple companies I have done to, zero test automation.

00:10:45,210 --> 00:10:48,330
All their testers, quality people were manual.

00:10:48,330 --> 00:10:50,110
They needed to be trained how to code.

00:10:50,110 --> 00:10:55,340
Which is difficult to do when they're also expected to deliver their project level work.

00:10:55,340 --> 00:10:57,510
That's a concern you have to make that's up front.

00:10:57,510 --> 00:11:03,110
You have to focus instead of automating everything specifically on things that have hey chance

00:11:03,110 --> 00:11:04,210
of failure.

00:11:04,210 --> 00:11:06,760
Critical, legal issues.

00:11:06,760 --> 00:11:10,779
Something that will cost your company a great deal if you did not have the test automation

00:11:10,779 --> 00:11:12,320
coverage around it.

00:11:12,320 --> 00:11:14,570
That's the approach you have to take.

00:11:14,570 --> 00:11:18,690
Realizing within your organization what do we do with this constraint?

00:11:18,690 --> 00:11:22,890
So called guardrails that you have to identify and work with?

00:11:22,890 --> 00:11:24,660
You can't expect the world.

00:11:24,660 --> 00:11:28,420
You can expect to make that sort of iterative incremental improvement, though.

00:11:28,420 --> 00:11:34,200
One of the ways in which I try to help direct my teams to support in what should they automate

00:11:34,200 --> 00:11:37,120
is to use a value ranking system.

00:11:37,120 --> 00:11:39,600
And here I've taken out the values and put in checked box.

00:11:39,600 --> 00:11:44,600
Instead for a set of features we're going to ideally have for a project or story cards

00:11:44,600 --> 00:11:51,180
pulled down, we want to have a series of items, what's the criticality of it, legal concerns,

00:11:51,180 --> 00:11:53,660
do we have control over data and environment?

00:11:53,660 --> 00:11:54,660
Highly reusable.

00:11:54,660 --> 00:11:59,870
In this case, I want to create a ranking system for potential automation scripts from zero

00:11:59,870 --> 00:12:01,160
to 100.

00:12:01,160 --> 00:12:08,760
That way, given the time given, we can start at the highly rated, those closest to 100.

00:12:08,760 --> 00:12:15,000
What we have missed baa us we ran out of time or are limited in the people available, that

00:12:15,000 --> 00:12:20,170
can become technical debt from an automation perspective.

00:12:20,170 --> 00:12:23,600
This way we automate the most valuable items first.

00:12:23,600 --> 00:12:27,910
Your set that you want to use in terms of criteria should be based upon your own company's

00:12:27,910 --> 00:12:28,910
profile.

00:12:28,910 --> 00:12:32,400
Me working for a big bank, we cared about ADA compliance.

00:12:32,400 --> 00:12:35,610
We could be sued.

00:12:35,610 --> 00:12:42,410
Those were higher ranking in providing points than reuse or is it on the critical path.

00:12:42,410 --> 00:12:45,010
So, these were the things that we care about.

00:12:45,010 --> 00:12:49,240
And these are the things that you should as well in creating your own automation score

00:12:49,240 --> 00:12:51,390
cord that you can use.

00:12:51,390 --> 00:12:57,660
I should also mention, when you're taking concern from an organizational perspective,

00:12:57,660 --> 00:13:01,130
oftentimes upper management will take the look of, how can we cut people?

00:13:01,130 --> 00:13:06,360
Cut staff something I have seen that numerous times.

00:13:06,360 --> 00:13:08,630
How to reduce the number of people working for them.

00:13:08,630 --> 00:13:11,480
That's not the point of automation.

00:13:11,480 --> 00:13:16,540
Good automation is enhancing testing as a tool.

00:13:16,540 --> 00:13:22,750
It's not to replace the testing, it helps it is it.

00:13:22,750 --> 00:13:25,690
Good test automation is valuable.

00:13:25,690 --> 00:13:31,470
When you receive a report, you have confidence that something is wrong rather than just flakey

00:13:31,470 --> 00:13:32,920
tests that execute.

00:13:32,920 --> 00:13:35,930
You want to have a good high signal to noise ratio.

00:13:35,930 --> 00:13:40,279
If you get alerts and they don't mean anything.

00:13:40,279 --> 00:13:43,180
One day it can be good, another day, bad because of the environment.

00:13:43,180 --> 00:13:45,750
People stop caring about the automation.

00:13:45,750 --> 00:13:51,530
Good test automation is reliable and informative for your stakeholders.

00:13:51,530 --> 00:13:54,400
What sort of framework and tools should you use?

00:13:54,400 --> 00:13:57,880
There is no one set of framework or tools you could use.

00:13:57,880 --> 00:14:00,320
It's really based on your organization.

00:14:00,320 --> 00:14:06,160
What I have use the in the past and use now with another set of tools has been Ruby Cucumber.

00:14:06,160 --> 00:14:13,010
That's used with web applications and of test application, people are focused on web and

00:14:13,010 --> 00:14:14,310
mobile space.

00:14:14,310 --> 00:14:18,279
But you want to have a framework and tool that's flexible enough to handle your entire

00:14:18,279 --> 00:14:20,520
text stack.

00:14:20,520 --> 00:14:28,030
Support web, mobile, desktop, database, web, so the entire gamut of applications.

00:14:28,030 --> 00:14:31,860
You want a tool that fits in with the company's profile.

00:14:31,860 --> 00:14:37,480
I liked Ruby Cucumber that's shared for the entire team.

00:14:37,480 --> 00:14:41,020
A shared understanding and in a language they can understand.

00:14:41,020 --> 00:14:43,710
Whether they're technical or not.

00:14:43,710 --> 00:14:47,250
Using the top layer as plain English is one way to accomplish that.

00:14:47,250 --> 00:14:51,210
But selecting your tool, one way is look and go open source.

00:14:51,210 --> 00:14:53,380
Here is an example.

00:14:53,380 --> 00:14:57,580
Selenium, by far the most popular tool used for web automation.

00:14:57,580 --> 00:15:00,110
used with a number of different implementations.

00:15:00,110 --> 00:15:03,060
Java being the primary one.

00:15:03,060 --> 00:15:04,910
This goes into my actual recommendation.

00:15:04,910 --> 00:15:09,700
As close as possible, what you want to do is try to align your test automation, talking

00:15:09,700 --> 00:15:18,050
about functional tests in this case, with your codebase reduce your tech stack to that

00:15:18,050 --> 00:15:21,040
your developers can and should be writing this code.

00:15:21,040 --> 00:15:23,820
They can live potentially within the same codebase.

00:15:23,820 --> 00:15:28,291
If this makes it easier for people to transition to make test automation part of their day

00:15:28,291 --> 00:15:30,860
to day.

00:15:30,860 --> 00:15:34,340
And makes it clear if you have failures how to fix it.

00:15:34,340 --> 00:15:38,250
And reduces the amount of time you have to take in training people.

00:15:38,250 --> 00:15:42,890
Any time you can try to align any test automation tools with your current tech stack.

00:15:42,890 --> 00:15:44,700
You should do so.

00:15:44,700 --> 00:15:48,730
In terms what have you should do in terms of writing your test automation.

00:15:48,730 --> 00:15:52,089
The goal should not be to really maintain the automation.

00:15:52,089 --> 00:15:56,990
Instead of devoting too much time in automation, what you want to do is things as reusable

00:15:56,990 --> 00:15:57,990
as possible.

00:15:57,990 --> 00:16:03,390
This is simple development practices for 20 plus years.

00:16:03,390 --> 00:16:08,060
Do not repeat yourself, or KISS, keep it simple, stupid.

00:16:08,060 --> 00:16:12,300
The challenge is I have seen people who are not originally developers, they are in the

00:16:12,300 --> 00:16:17,690
testing space learning to develop, they don't have that sort of knowledge base.

00:16:17,690 --> 00:16:20,529
They don't know that perspective for how they take it.

00:16:20,529 --> 00:16:24,990
They'll get in the habit of just writing as many scripts adds possible and not using good

00:16:24,990 --> 00:16:29,130
developer practices of, hey, using something like modules or reusable code that we can

00:16:29,130 --> 00:16:30,130
have.

00:16:30,130 --> 00:16:36,610
In terms of Ruby Cucumber that I gave an example of, we make the steps as reusable as possible.

00:16:36,610 --> 00:16:38,820
The user clicks insert name here.

00:16:38,820 --> 00:16:40,780
And click any only on the page.

00:16:40,780 --> 00:16:48,339
And you can click tab for mobile and click and tab on any object or a mobile device.

00:16:48,339 --> 00:16:52,890
You reduce the amount of time they have to spend building up this infrastructure code.

00:16:52,890 --> 00:16:57,830
And what that naturally leads to, once you have these sort of code LEGOs in place, these

00:16:57,830 --> 00:17:03,920
imperative steps that are UI driven, you can encapsulate those into declarative statements

00:17:03,920 --> 00:17:06,089
about what the user's name is.

00:17:06,089 --> 00:17:09,970
I don't want to go through step steps to describe how the user is logging into the application.

00:17:09,970 --> 00:17:13,020
I want to convert.

00:17:13,020 --> 00:17:15,689
I can instead wrap the ten steps into a single step.

00:17:15,689 --> 00:17:22,029
Give the user is logged into the application as insert here user.

00:17:22,029 --> 00:17:26,919
Focus on testing activities rather than writing that support code.

00:17:26,919 --> 00:17:32,659
In terms of integration testing as well as unit testing, this is an absolute requirement.

00:17:32,659 --> 00:17:35,220
This is more important than those functional tests you have.

00:17:35,220 --> 00:17:39,009
One, because they provide quicker feedback for you.

00:17:39,009 --> 00:17:41,759
Two, they integrate in with your existing.

00:17:41,759 --> 00:17:44,369
And three, added to any build time.

00:17:44,369 --> 00:17:47,230
You should leverage unit integration tests.

00:17:47,230 --> 00:17:49,519
If you have a priority, unit tests number one.

00:17:49,519 --> 00:17:54,210
The fastest feedback and most reliable.

00:17:54,210 --> 00:17:59,210
You have a host of frameworks that you can leverage regardless of your codebase.

00:17:59,210 --> 00:18:02,789
It should be an upfront of a deliverable something that is required.

00:18:02,789 --> 00:18:07,419
And push back if people say we don't have time to unit test.

00:18:07,419 --> 00:18:08,720
Show them why.

00:18:08,720 --> 00:18:11,770
Attach defects that have been escaped to production.

00:18:11,770 --> 00:18:14,190
If we had a unit test here, we would have caught it.

00:18:14,190 --> 00:18:18,840
That way if you provide that kind of financial incentive, it cost this much to fix it.

00:18:18,840 --> 00:18:21,960
You can show them it's important as an upfront concern.

00:18:21,960 --> 00:18:27,230
There's a lot of challenges and many ways toot test automation wrong.

00:18:27,230 --> 00:18:30,750
Or to do it right for that time.

00:18:30,750 --> 00:18:35,529
One of the challenges I have seen when I helped train them at other companies, when they get

00:18:35,529 --> 00:18:38,919
a hold of a tool, they want to use it everything.

00:18:38,919 --> 00:18:41,312
Everything looks like a nail and you're the hammer.

00:18:41,312 --> 00:18:42,312
That's the approach.

00:18:42,312 --> 00:18:49,049
Just because you can automate something doesn't mean that you should automate it.

00:18:49,049 --> 00:18:50,850
Use this automation score cord.

00:18:50,850 --> 00:18:53,410
Use those checklists for feasibility that you have.

00:18:53,410 --> 00:18:57,049
To make sure that people are only automating things that are most valuable and things on

00:18:57,049 --> 00:18:58,259
the critical path.

00:18:58,259 --> 00:19:02,220
The things that going to cause legal trouble if you don't have good test coverage in that

00:19:02,220 --> 00:19:03,220
place.

00:19:03,220 --> 00:19:06,539
Avoid that automation firehose.

00:19:06,539 --> 00:19:12,580
Another concern people have is they'll write it and the test will pass for that environment.

00:19:12,580 --> 00:19:14,640
Or before a refresh occurs.

00:19:14,640 --> 00:19:16,619
And then it will fair thereafter.

00:19:16,619 --> 00:19:23,460
You should be writing automation that is worthwhile across all environments and has control over

00:19:23,460 --> 00:19:24,460
data.

00:19:24,460 --> 00:19:28,340
If you lose control over either one of those thing, you have a lot of flakey failures and

00:19:28,340 --> 00:19:30,289
you have to do more work.

00:19:30,289 --> 00:19:34,009
And people lose belief in your tests.

00:19:34,009 --> 00:19:39,850
They failed here and did a refresh and it doesn't work anymore.

00:19:39,850 --> 00:19:44,400
They're waiting for one clean run.

00:19:44,400 --> 00:19:48,900
Make sure every run is clean by controlling your data and your environment.

00:19:48,900 --> 00:19:50,461
Another space where you have it is this flickering tests.

00:19:50,461 --> 00:19:55,019
So, you have tests that pass, run it again, fail, run it again, pass.

00:19:55,019 --> 00:19:57,929
Off and on, off and an, flickering.

00:19:57,929 --> 00:20:02,950
This is defeating the purpose of automation and having something reliable and informative.

00:20:02,950 --> 00:20:06,220
What you want to do is remove the flickering tests.

00:20:06,220 --> 00:20:07,870
Take them out.

00:20:07,870 --> 00:20:11,409
That is automation technical debt.

00:20:11,409 --> 00:20:15,980
Do a failure test, is it because of the afore exposed environment?

00:20:15,980 --> 00:20:17,980
A crappy application?

00:20:17,980 --> 00:20:19,590
The test code.

00:20:19,590 --> 00:20:24,629
Far be it from me so day you have written par code.

00:20:24,629 --> 00:20:32,280
That should be something to inform your stakeholders about the state of the application.

00:20:32,280 --> 00:20:38,230
If it informs you that your automation is having trouble, then you've missed your purpose.

00:20:38,230 --> 00:20:42,049
Pull the flickering tests out, solve them or remove them all together.

00:20:42,049 --> 00:20:46,710
It could be the case that shouldn't be an automated test.

00:20:46,710 --> 00:20:48,859
What else do you have that's a problem?

00:20:48,859 --> 00:20:51,769
Well, long tests.

00:20:51,769 --> 00:20:56,500
Especially I see with a lot of people who are using gherkin based test automation.

00:20:56,500 --> 00:20:59,590
The tests are 300 lines long.

00:20:59,590 --> 00:21:03,549
At some point your eyes glaze over and you have no idea what the actual purpose of the

00:21:03,549 --> 00:21:04,549
test is.

00:21:04,549 --> 00:21:10,259
Just a functional test, an integration test should be testing one thing.

00:21:10,259 --> 00:21:15,210
One thing you're focused on and as short and readable as possible.

00:21:15,210 --> 00:21:20,279
So, take away and pull out the extra validations that could occur.

00:21:20,279 --> 00:21:25,100
Wrap up all those user path and clicking in, selecting that can occur.

00:21:25,100 --> 00:21:29,580
Make it as short and simple as possible, focused on a single outcome.

00:21:29,580 --> 00:21:33,460
That way the users understand when they get to see, all right, this is the results of

00:21:33,460 --> 00:21:38,350
my test when you send if off to the development team or your business stakeholders, they understand

00:21:38,350 --> 00:21:45,049
why it failed and then they have confidence in that.

00:21:45,049 --> 00:21:48,119
Take away the long tests.

00:21:48,119 --> 00:21:50,110
Another is shaky foundations.

00:21:50,110 --> 00:21:55,970
They get a new tool or working with a legacy application.

00:21:55,970 --> 00:22:00,960
They are not making concerns for people two, four, five years down the line.

00:22:00,960 --> 00:22:02,929
And get it done today.

00:22:02,929 --> 00:22:05,480
That we delivered this card today.

00:22:05,480 --> 00:22:09,600
That often leads to you throwing all away your automation suite after a few years.

00:22:09,600 --> 00:22:12,720
At my first company, it was on a massive scale.

00:22:12,720 --> 00:22:14,890
Tens of thousands of people working there.

00:22:14,890 --> 00:22:17,210
Hundreds of automation suites.

00:22:17,210 --> 00:22:19,169
None lasted.

00:22:19,169 --> 00:22:21,009
Because every team did it their own way.

00:22:21,009 --> 00:22:27,080
They never made design concerns that would be something that was extensible or maintainable.

00:22:27,080 --> 00:22:29,870
And eventually every single one of the suite was thrown away for something new.

00:22:29,870 --> 00:22:35,639
And now switched off entirely from the toolset to another one because they didn't have good

00:22:35,639 --> 00:22:40,080
feedback in terms of does this actually provide value for us in terms of the state of the

00:22:40,080 --> 00:22:41,080
application.

00:22:41,080 --> 00:22:44,610
So, make good design decisions as an up front.

00:22:44,610 --> 00:22:50,929
The same with design decisions for the actual application under test.

00:22:50,929 --> 00:22:56,580
So, another one of those is actually following up and keeping up with development.

00:22:56,580 --> 00:23:00,499
Your test automation should be concurrent with your development.

00:23:00,499 --> 00:23:03,239
So, that means fundamentally changes your SDLC.

00:23:03,239 --> 00:23:06,909
So, it should be something you're writing as you're writing the development code.

00:23:06,909 --> 00:23:08,660
Or ideally before you do.

00:23:08,660 --> 00:23:13,740
If you have the development and test automation code in one, talking about tests here, it

00:23:13,740 --> 00:23:18,779
should be living in the development suite and writing those first so you slowly deliver

00:23:18,779 --> 00:23:21,029
on those acceptance criteria.

00:23:21,029 --> 00:23:26,799
You use that automation feasibility to determine we're impacted for this card or implement

00:23:26,799 --> 00:23:31,889
it if you're waterfall and not have the delay.

00:23:31,889 --> 00:23:37,539
But do implement it and put it in the schedule?

00:23:37,539 --> 00:23:39,980
Getting people to change habits, that's difficult.

00:23:39,980 --> 00:23:45,679
Getting budget, okay, we can do nap but getting people to change the way work is the challenge.

00:23:45,679 --> 00:23:49,900
One way is bringing in example mapping.

00:23:49,900 --> 00:23:57,070
This was designed by Matt Wynn as a BDD for discovery, formulation and automation of those

00:23:57,070 --> 00:23:58,070
requirements.

00:23:58,070 --> 00:23:59,070
How do you do that.

00:23:59,070 --> 00:24:02,210
You start with a story or a requirement.

00:24:02,210 --> 00:24:03,590
You have representatives of the team.

00:24:03,590 --> 00:24:06,869
Similar to a three amigos or a specification workshop.

00:24:06,869 --> 00:24:10,369
Business analyst, developer, tester, product owner.

00:24:10,369 --> 00:24:16,850
For the story, define on the blue cards, acceptance criteria.

00:24:16,850 --> 00:24:19,860
This is the business logic the developers are going to take.

00:24:19,860 --> 00:24:23,779
For each piece of business logic, you want to have at least one scenario.

00:24:23,779 --> 00:24:29,049
This is the functional test that the tester is going to take with them and implement.

00:24:29,049 --> 00:24:34,330
And for every question that those folks in the room cannot answer, write it down on the

00:24:34,330 --> 00:24:35,919
red cards.

00:24:35,919 --> 00:24:40,269
At the very end of the session, you will have a good idea of whether you're ready to begin

00:24:40,269 --> 00:24:44,580
working on that story or not as well as a shared understanding.

00:24:44,580 --> 00:24:47,440
Those examples become those automation scenarios.

00:24:47,440 --> 00:24:53,720
Those business rules are your integration and unit tests depending how finite you make

00:24:53,720 --> 00:24:54,720
the business rules.

00:24:54,720 --> 00:25:00,009
And the red cards are the flexibility, we are not going to begin work until we answer

00:25:00,009 --> 00:25:01,009
the questions.

00:25:01,009 --> 00:25:03,119
They help the team understand the coverage.

00:25:03,119 --> 00:25:08,279
A that you have good coverage and you have implemented the business rules that fit the

00:25:08,279 --> 00:25:09,279
story.

00:25:09,279 --> 00:25:12,519
And there's a lot of mnemonics to drive the session.

00:25:12,519 --> 00:25:15,179
Too many development cards.

00:25:15,179 --> 00:25:16,729
Development work is not ready.

00:25:16,729 --> 00:25:20,149
I reject the story until we have the answers.

00:25:20,149 --> 00:25:24,659
Too many business rules, way too dense.

00:25:24,659 --> 00:25:29,690
Split it apart into two or more stories so it's easier for the developers to implement.

00:25:29,690 --> 00:25:33,970
Too many answers under a business rule, way too dense.

00:25:33,970 --> 00:25:40,499
Break that apart into two or more rule ./x16/x08/x00 so we can understand the functionality.

00:25:40,499 --> 00:25:42,480
That's why they use color coding.

00:25:42,480 --> 00:25:50,909
And empower the team to give a simple thumbs up, thumbs down whether they're ready or not.

00:25:50,909 --> 00:25:54,279
Whether or not we begin work, that you put it in place.

00:25:54,279 --> 00:25:58,379
Here is an example of an example map where I get very meta.

00:25:58,379 --> 00:26:03,229
It's an example map about scheduling a workshop about example mapping.

00:26:03,229 --> 00:26:05,359
Where you have requirements you're expecting.

00:26:05,359 --> 00:26:08,629
It has to be during normal business hours is my business rule.

00:26:08,629 --> 00:26:11,570
But what are normal business hours?

00:26:11,570 --> 00:26:13,049
I have an example of that.

00:26:13,049 --> 00:26:19,720
9 a.m. to 5 p.m. I have requirements of, well, it has to be attended for you to host that

00:26:19,720 --> 00:26:20,720
workshop.

00:26:20,720 --> 00:26:23,549
Well, I want to see some examples of where I need to hold it.

00:26:23,549 --> 00:26:26,169
If it's four or more people, do that in the lobby.

00:26:26,169 --> 00:26:28,830
More than that, be in a big room.

00:26:28,830 --> 00:26:32,869
And other important questions, is catering required for every workshop?

00:26:32,869 --> 00:26:33,869
Yes.

00:26:33,869 --> 00:26:36,850
[ Laughter ] All right.

00:26:36,850 --> 00:26:38,999
The last section I talk about here is standards.

00:26:38,999 --> 00:26:44,600
So, if we've implemented it and we have if scheduled into our daily work, how do we maintain

00:26:44,600 --> 00:26:45,600
those standards?

00:26:45,600 --> 00:26:47,529
Well, there's a couple different activities.

00:26:47,529 --> 00:26:50,080
Ceremonies, if you will, that you use to make this real.

00:26:50,080 --> 00:26:52,070
One is a regression review.

00:26:52,070 --> 00:26:56,679
Where of all that automation you've written one you want the team to understand and be

00:26:56,679 --> 00:27:00,899
in agreement that this reflects the current state of the application.

00:27:00,899 --> 00:27:03,869
The way you do that it bring together the stakeholders in the team.

00:27:03,869 --> 00:27:08,330
Whether it's your application manager, members of your development, quality staff and people

00:27:08,330 --> 00:27:10,419
working prod support, people in operations.

00:27:10,419 --> 00:27:15,399
And have them review all the tests added.

00:27:15,399 --> 00:27:18,450
Prod support is going to add data to you.

00:27:18,450 --> 00:27:21,259
This is based upon evidence, not feelings.

00:27:21,259 --> 00:27:22,799
Where did we have the most) issues?

00:27:22,799 --> 00:27:27,600
Because I want to focus or not where we're having the problems.

00:27:27,600 --> 00:27:34,909
Yet the business analysts come in and provide feedback on what is driving revenue for us.

00:27:34,909 --> 00:27:40,340
And get together and decide for the given release, working on sprints or quarterly.

00:27:40,340 --> 00:27:45,429
Even daily, gather up the stories that you pushed to production.

00:27:45,429 --> 00:27:50,120
And have in common agreement for that regression review, yes, these are the current state of

00:27:50,120 --> 00:27:57,220
the application and should be in the core re-impression run daily, nightly, and these

00:27:57,220 --> 00:28:01,239
shouldn't be built.

00:28:01,239 --> 00:28:05,249
And it's delivered.

00:28:05,249 --> 00:28:10,480
And you can add in the rigor to make your test automation more viable.

00:28:10,480 --> 00:28:12,320
This is Mark Fowler as a superhero.

00:28:12,320 --> 00:28:13,720
He's my superhero.

00:28:13,720 --> 00:28:17,349
I'm not a great programmer, I'm a program we are great habits.

00:28:17,349 --> 00:28:26,119
So, code review and refactoring, it's the same as development code, require code reviews.

00:28:26,119 --> 00:28:33,409
Every test we commit, unit, integration, functional test should be code reviewed by a peer.

00:28:33,409 --> 00:28:35,369
Do it in larger groups.

00:28:35,369 --> 00:28:36,769
This is when I recommend.

00:28:36,769 --> 00:28:40,409
This will help expand little knowledge of the team.

00:28:40,409 --> 00:28:45,869
Sharing that, yes, every candidate that we said we would do for this given feature is

00:28:45,869 --> 00:28:47,470
actually delivered.

00:28:47,470 --> 00:28:49,710
That it's understandable by the team.

00:28:49,710 --> 00:28:52,940
That even people that didn't work on that story could come in off the street and understand

00:28:52,940 --> 00:28:54,820
what you're actually doing here.

00:28:54,820 --> 00:29:00,479
That you met all the standards that you had for definition up to that given point.

00:29:00,479 --> 00:29:04,899
Everyone is on board, understands and you spread that knowledge, that code reviews for

00:29:04,899 --> 00:29:09,109
test automation matters just the same for code reviews for your development code.

00:29:09,109 --> 00:29:12,059
Do the same thing with refactoring sessions.

00:29:12,059 --> 00:29:15,749
But make them real by making them regular.

00:29:15,749 --> 00:29:18,399
And giving responsibilities to specific people.

00:29:18,399 --> 00:29:20,419
This is how you implement it.

00:29:20,419 --> 00:29:24,470
Identify for a given sprint or quarter, someone who is going to be your team leader.

00:29:24,470 --> 00:29:29,779
That's the person responsible for scheduling or a weekly basis.

00:29:29,779 --> 00:29:33,460
They're going to determine what the focus area could be.

00:29:33,460 --> 00:29:37,950
They're the one that's going to come up and bring that data for the team to use.

00:29:37,950 --> 00:29:40,120
You want to have an outside automation guide.

00:29:40,120 --> 00:29:44,929
Someone not on the team, someone to provide an outside perspective.

00:29:44,929 --> 00:29:49,970
Someone to keep track of the session notes they have and provide feedback and overcome

00:29:49,970 --> 00:29:52,610
on tack stacks if the team is struggling.

00:29:52,610 --> 00:30:05,240
If could be a code metric, a feature worked on were or a project release or reports from

00:30:05,240 --> 00:30:07,729
Jenkins or logs we have had.

00:30:07,729 --> 00:30:12,739
Something we're focused on that actually directly reflects the team such that we can report

00:30:12,739 --> 00:30:18,399
that the quality of the automation is moving up even though we're adding more features.

00:30:18,399 --> 00:30:23,990
So, in summary, if you're going to, automate.

00:30:23,990 --> 00:30:31,940
Your focus should be unit test first followed by service level followed by UI follows by

00:30:31,940 --> 00:30:33,679
the end to end.

00:30:33,679 --> 00:30:35,519
Unit tests are the most important.

00:30:35,519 --> 00:30:42,200
You want to build your automation based upon what the actual like criticality of the pack

00:30:42,200 --> 00:30:46,889
your following, the likelihood of failure, the impact on business, complexity.

00:30:46,889 --> 00:30:52,379
Any time you can pull away the highly redundant tasks prone to human error, you are going

00:30:52,379 --> 00:30:55,399
to be providing value.

00:30:55,399 --> 00:31:00,940
It's important to also remember that budget, schedule and technical skill set within your

00:31:00,940 --> 00:31:04,210
organization are always going to be a constraint for you.

00:31:04,210 --> 00:31:10,229
If you need to convert people over, then you want to use a tool that they can actually

00:31:10,229 --> 00:31:14,080
benefit from rather than a tool you're going to have to fire a whole bunch of people or

00:31:14,080 --> 00:31:16,559
let them go and hire on new people.

00:31:16,559 --> 00:31:22,969
Automation should be reliable, valuable and provides that consistent feedback to your

00:31:22,969 --> 00:31:23,969
stakeholders.

00:31:23,969 --> 00:31:26,230
And most importantly, to the team.

00:31:26,230 --> 00:31:29,820
So, that way they see value in engaging in those activities.

00:31:29,820 --> 00:31:34,179
So, thank you all very much for your time.

00:31:34,179 --> 00:31:41,680
[ Applause ] >> So, it is lunchtime.

00:31:41,680 --> 00:31:44,320
And lunch is well on its way.

00:31:44,320 --> 00:31:46,009
Going on in the other room.

00:31:46,009 --> 00:31:53,789
However, if you do want to stay for Q&A for a couple minutes, it's up to you.

00:31:53,789 --> 00:31:54,789
Food for thought?

00:31:54,789 --> 00:31:56,009
And food for body.

00:31:56,009 --> 00:31:59,279
You can get the food for your body later too.

00:31:59,279 --> 00:32:01,239
And, Tom, you'll be around.

00:32:01,239 --> 00:32:02,239
THOMAS: I will be around.

00:32:02,239 --> 00:32:03,690
>> For the rest of the afternoon.

00:32:03,690 --> 00:32:04,690
Okay.

00:32:04,690 --> 00:32:06,879
Are there any questions?

00:32:06,879 --> 00:32:10,080
AUDIENCE: I've got one here.

00:32:10,080 --> 00:32:17,609
So, in regards to the role of QA engineer or people with automated or functional tests,

00:32:17,609 --> 00:32:24,879
have you seen sort of a trend change in the recent sort of years as more automation, more

00:32:24,879 --> 00:32:33,219
CI/CD, the speed and delivery of code is so fast that if you want to develop functional

00:32:33,219 --> 00:32:42,580
tests alongside the code that the developer is basically becoming the QA person?

00:32:42,580 --> 00:32:50,609
Because otherwise the QA person, the waterfall method, he wasn't engaged after the fact.

00:32:50,609 --> 00:32:53,580
And now we has to be right alongside.

00:32:53,580 --> 00:32:56,070
Is that is that role changing?

00:32:56,070 --> 00:32:57,070
THOMAS: Yeah.

00:32:57,070 --> 00:33:01,619
I would say in general from me I attend many different conferences.

00:33:01,619 --> 00:33:06,149
And I've helped out a number of Fortune 500 companies.

00:33:06,149 --> 00:33:09,549
That their goal is cutting down the on the number of people.

00:33:09,549 --> 00:33:17,229
Any time they have others on the team polyskill, they will.

00:33:17,229 --> 00:33:23,499
Limited time, the end of the line.

00:33:23,499 --> 00:33:25,960
My preference is where are the areas outside of automation?

00:33:25,960 --> 00:33:32,249
Testing is still valuable in terms of whether it's ADA testing, exploratory testing.

00:33:32,249 --> 00:33:36,119
That you want to find those areas where you need that human intervention.

00:33:36,119 --> 00:33:40,039
But you want to have it be a common skill set that can be shared amongst many people

00:33:40,039 --> 00:33:44,369
in the team so that way you don't have any quote, unquote, bottlenecks.

00:33:44,369 --> 00:33:49,859
I've trained people from the business side, actual traditional developers, people with

00:33:49,859 --> 00:33:50,979
zero coding experience.

00:33:50,979 --> 00:33:57,860
And for all of those individuals I would say the ones with the easiest pickup is development

00:33:57,860 --> 00:33:58,860
side.

00:33:58,860 --> 00:33:59,879
Because they already know.

00:33:59,879 --> 00:34:03,179
Programming language is just really for them shifting syntax.

00:34:03,179 --> 00:34:07,809
But the ones who have been most successful are those who had zero coding Spencer to begin

00:34:07,809 --> 00:34:10,389
with who were given that as an upfront concern.

00:34:10,389 --> 00:34:13,320
And that is because they have the standards in place.

00:34:13,320 --> 00:34:15,580
And you gave them as sort of a blank slate.

00:34:15,580 --> 00:34:18,720
Here are the standards you're going to follow and they will.

00:34:18,720 --> 00:34:22,030
The expectation, though, is because of deliver fast, deliver fast.

00:34:22,030 --> 00:34:26,099
We want you to deploy a card and three minutes later go to production.

00:34:26,099 --> 00:34:28,970
You have to make quality and up front concern.

00:34:28,970 --> 00:34:29,970
And identify it.

00:34:29,970 --> 00:34:33,679
If you're not able to get it done by the time it's deployed, identify it as technical debt.

00:34:33,679 --> 00:34:38,450
Otherwise it's completely lost and loses that value.

00:34:38,450 --> 00:34:44,039
You have to show debt mix portion is left at the very end on here.

00:34:44,039 --> 00:34:49,629
If you have to show for the escape defects that this is causing a considerable cost in

00:34:49,629 --> 00:34:50,629
production.

00:34:50,629 --> 00:34:53,520
In terms of down time, you have lost revenue.

00:34:53,520 --> 00:34:58,650
That necessitates you taking this up front concern of involving quality from the gunning.

00:34:58,650 --> 00:35:01,359
I have to be very cynical about this.

00:35:01,359 --> 00:35:04,900
But that's the only way you can switch management's mind.

00:35:04,900 --> 00:35:09,220
They're going to lose money unless they take a different approach.

00:35:09,220 --> 00:35:10,450
>> What else?

00:35:10,450 --> 00:35:16,620
AUDIENCE: , this I understood, was mostly around application testing, right?

00:35:16,620 --> 00:35:18,950
What are your thoughts about infrastructure testing?

00:35:18,950 --> 00:35:23,660
Which is we lay down like how do you go over testing it?

00:35:23,660 --> 00:35:25,270
What other strategies, right?

00:35:25,270 --> 00:35:26,349
THOMAS: Yeah.

00:35:26,349 --> 00:35:31,119
That's one for the sake of time that I have to make certain cuts down.

00:35:31,119 --> 00:35:36,920
In any current role I have our DevOps team, everyone who is quality and everyone who is

00:35:36,920 --> 00:35:38,359
in production support.

00:35:38,359 --> 00:35:39,770
And so, similar things.

00:35:39,770 --> 00:35:44,359
In terms of whether it's an execution report that you're gonna get for functional tests

00:35:44,359 --> 00:35:48,050
or we're talking about AppDynamics alerts that come through.

00:35:48,050 --> 00:35:49,480
It's a signal to noise ratio.

00:35:49,480 --> 00:35:56,390
Getting the alerts every day, multiple times per day, you're going to stop caring.

00:35:56,390 --> 00:35:58,810
This is just an expected state.

00:35:58,810 --> 00:36:03,030
When you do receive an alert, it should be something that actually matters.

00:36:03,030 --> 00:36:08,289
In terms of infrastructure testing, yes, I like to take an automation first approach.

00:36:08,289 --> 00:36:14,700
But I like to limit the feedback that is provided to the other members of the development team.

00:36:14,700 --> 00:36:17,420
When they see something, it truly matters.

00:36:17,420 --> 00:36:23,630
In this case, it's just a suite of tools used as well to support the infrastructure.

00:36:23,630 --> 00:36:25,200
That's like the high level I know.

00:36:25,200 --> 00:36:27,569
It's sort of like a answer to go into specifics.

00:36:27,569 --> 00:36:33,010
But I can provide one additional example is I'm monitoring every day through a number

00:36:33,010 --> 00:36:35,589
of applications how many orders we have on those applications.

00:36:35,589 --> 00:36:38,359
And that's sent out hourly to everyone in IT.

00:36:38,359 --> 00:36:42,450
What do you think the end result has been of that?

00:36:42,450 --> 00:36:46,279
We have an email role that sends it to a folder so this you can have the 10,000 emails.

00:36:46,279 --> 00:36:48,700
And you don't see what's going on.

00:36:48,700 --> 00:36:54,750
Versus the one email that's sent during the day that summarizes what everyone would check

00:36:54,750 --> 00:36:55,750
out.

00:36:55,750 --> 00:36:57,180
It's valuable.

00:36:57,180 --> 00:37:01,650
Similar thing with testing infrastructure is take that automation first approach.

00:37:01,650 --> 00:37:06,140
You have to have validations that each stage of your CI/CD pipeline.

00:37:06,140 --> 00:37:09,789
If you don't, then you are exposing yourself to risk.

00:37:09,789 --> 00:37:15,349
>> And if I heard correctly to, the output, the result, the feedback has to be consumed

00:37:15,349 --> 00:37:16,500
easily.

00:37:16,500 --> 00:37:20,490
Like one email when there's issues, okay?

00:37:20,490 --> 00:37:22,460
Or maybe the rollup.

00:37:22,460 --> 00:37:26,109
Something people can get to.

00:37:26,109 --> 00:37:28,309
One more question.

00:37:28,309 --> 00:37:31,569
All right.

00:37:31,569 --> 00:37:39,250
AUDIENCE: My question is about code reviews.

00:37:39,250 --> 00:37:49,380
Are there any strategies to prevent code reviewer's eyes just glazing over and rubber stamping

00:37:49,380 --> 00:37:55,820
something just to prevent any kind of burn out when doing code reviews?

00:37:55,820 --> 00:37:59,400
Especially if a code review is particularly long or complicated?

00:37:59,400 --> 00:38:00,400
THOMAS: Yeah.

00:38:00,400 --> 00:38:08,619
I would say I faced this exact issue in that we require people through DevOps to go through

00:38:08,619 --> 00:38:11,780
code review as part of this push request.

00:38:11,780 --> 00:38:16,250
And what I was seeing from the results were, some of these push requests were approved

00:38:16,250 --> 00:38:17,460
within 30 seconds.

00:38:17,460 --> 00:38:22,390
Now, I've not met a single developer who can do a code review in 30 seconds.

00:38:22,390 --> 00:38:24,660
Outside of just white space.

00:38:24,660 --> 00:38:29,220
We added that second layer and required a second reviewer.

00:38:29,220 --> 00:38:33,200
And we sent off the logs of the review time.

00:38:33,200 --> 00:38:40,170
And this is just, hey, little cop on the highway thing of we're not going to pull you over

00:38:40,170 --> 00:38:41,170
for speeding.

00:38:41,170 --> 00:38:42,890
But we will check that.

00:38:42,890 --> 00:38:47,720
And the other way is require more than one other person to be there.

00:38:47,720 --> 00:38:51,840
All right, you have other people watching you sort of agreement that we're going to

00:38:51,840 --> 00:38:53,760
be here to help each other out.

00:38:53,760 --> 00:38:55,900
Like, it's really for them to watch each other.

00:38:55,900 --> 00:38:58,859
But the way in which it's us to share knowledge.

00:38:58,859 --> 00:39:00,410
And did does share knowledge.

00:39:00,410 --> 00:39:04,869
But I want to make sure that they maintain the rigor instead of yep, code review.

00:39:04,869 --> 00:39:07,730
Roll the share over and go back to what I was doing.

00:39:07,730 --> 00:39:08,869
make it part of the ceremony that it's value.

00:39:08,869 --> 00:39:09,869
>> One last one.

00:39:09,869 --> 00:39:10,869
AUDIENCE: I just apt copy of the slides.

00:39:10,869 --> 00:39:11,869
THOMAS: Yes.

00:39:11,869 --> 00:39:12,869
I do not have it there are versions of this online.

00:39:12,869 --> 00:39:13,869
I would say connect with me on LinkedIn.

00:39:13,869 --> 00:39:14,869
Thomas Haver.

00:39:14,869 --> 00:39:15,869
And I will send you the slides and any other background documentation if you want.

00:39:15,869 --> 00:39:16,869
>> I'll make sure he gets the slides or somebody gets the slides into our Slack channel.

00:39:16,869 --> 00:39:17,869
And if you're in the connected to that, definitely find me and we'll do that.

00:39:17,869 --> 00:39:18,869
THOMAS: And the connection to both modify Twitter and LinkedIn are on the DevOpsDays

00:39:18,869 --> 00:39:19,869
Boston website.

00:39:19,869 --> 00:39:20,869
>> Thank you.

00:39:20,869 --> 00:39:21,869
One more time.

00:39:21,869 --> 00:39:21,870

YouTube URL: https://www.youtube.com/watch?v=-qlLbVueoQI


