Title: DevOpsDays Boston 2019 -Building a full CI CD deployment pipeline by Richard Boyd
Publication date: 2019-10-11
Playlist: DevOpsDays Boston 2019
Description: 
	Building a full CI/CD deployment pipeline for your serverless application by Richard Boyd

Starting with an empty code repository, we will build an entire CI/CD pipeline that builds, tests, deploys, tests, reverts (hopefully not), and tests your code in production. During this workshop we will incrementally build this infrastructure utilizing cloudformation and attendees will walk away with a set of templates they can take to their friends to show them the light that devops provides. Once the pipeline is set up, a developer needs only to commit their changes and the aws-managed services will handle building, testing, deploying, and monitoring the change.
Captions: 
	00:00:00,680 --> 00:00:01,680
>> Okay.

00:00:01,680 --> 00:00:02,680
Here we are.

00:00:02,680 --> 00:00:03,680
The last session on the day of DevOpsDays Boston 2019.

00:00:03,680 --> 00:00:04,680
Thank you all for sticking around this long.

00:00:04,680 --> 00:00:05,680
This is the hard tour, huh?

00:00:05,680 --> 00:00:08,099
So, disappearing all of your RFID chips behind your ears at the exits so we know who to call

00:00:08,099 --> 00:00:09,099
on.

00:00:09,099 --> 00:00:10,099
We have a workshop now.

00:00:10,099 --> 00:00:11,730
These are always something to behold because all of us are engineers of one sort or another.

00:00:11,730 --> 00:00:13,940
It's great to steal somebody else's ideas and maybe improve upon it, maybe not.

00:00:13,940 --> 00:00:15,210
Richard Boyd is a data engineer at iRobot.

00:00:15,210 --> 00:00:16,640
Must be a pretty cool company, right?

00:00:16,640 --> 00:00:17,640
What do you guys make?

00:00:17,640 --> 00:00:18,640
Like vacuum cleaners or something?

00:00:18,640 --> 00:00:19,640
Roombas.

00:00:19,640 --> 00:00:20,640
Do you have anything else?

00:00:20,640 --> 00:00:21,640
Yeah.

00:00:21,640 --> 00:00:22,640
So, you're basically a Hoover for the digital age, right.

00:00:22,640 --> 00:00:23,640
That's all you got?

00:00:23,640 --> 00:00:24,640
Okay.

00:00:24,640 --> 00:00:25,640
You can all.

00:00:25,640 --> 00:00:26,640
You can talk about Hoovers.

00:00:26,640 --> 00:00:27,640
I've known Richard for a while in the digital world.

00:00:27,640 --> 00:00:28,640
It's good to finally put his framehis name.

00:00:28,640 --> 00:00:29,640
He looks although infrastructure and making APIs that make his partner roll their eyes.

00:00:29,640 --> 00:00:30,640
He's known in some circles as an accomplished pastry chef.

00:00:30,640 --> 00:00:31,640
Probably the most accomplished between Cambridge and South Andover.

00:00:31,640 --> 00:00:32,640
He disease a mean Bolognese.

00:00:32,640 --> 00:00:33,640
And place an upright bass.

00:00:33,640 --> 00:00:34,640
The upper bow come up to my ear.

00:00:34,640 --> 00:00:35,640
Give a warm welcome to Mr. Richard Boyd.

00:00:35,640 --> 00:00:36,640
>> We're going talk about the way we deploy code at iRobot, specifically on our cloud

00:00:36,640 --> 00:00:37,640
side.

00:00:37,640 --> 00:00:38,640
It's broken into two main parts, the code that we have for the robots, it's through

00:00:38,640 --> 00:00:39,640
a process, and we are over the air and deploying them out to millions of robots out of people's

00:00:39,640 --> 00:00:40,640
homes.

00:00:40,640 --> 00:00:41,640
There's the risk calculation that's a little bit different.

00:00:41,640 --> 00:00:42,640
If you make a mistake doing that, it's very expensive to fix.

00:00:42,640 --> 00:00:46,340
Whereas whether you deploy stuff to the cloud, to this group I probably don't have to preach

00:00:46,340 --> 00:00:48,090
the benefits of the cloud.

00:00:48,090 --> 00:00:50,040
You can easily roll back a change.

00:00:50,040 --> 00:00:52,940
Or worse case, do an instance and start over again.

00:00:52,940 --> 00:01:01,680
It's hard to do that with Roomba.

00:01:01,680 --> 00:01:04,870
Slowly moving our mobile applications to roughly the same process.

00:01:04,870 --> 00:01:09,190
And creating a CI/CD pipeline that's going to look similar to this.

00:01:09,190 --> 00:01:14,780
And also create like a sample app which could like represent whatever app it is that you're

00:01:14,780 --> 00:01:18,970
building or that you're responsible for in your company.

00:01:18,970 --> 00:01:21,890
It's a trivial toy app.

00:01:21,890 --> 00:01:23,729
Something we can put through the pipeline.

00:01:23,729 --> 00:01:28,299
The real meat of this presentation is the actual pipeline itself.

00:01:28,299 --> 00:01:34,210
So, the contents of this presentation are on GitHub.

00:01:34,210 --> 00:01:36,710
And probably nobody can read that.

00:01:36,710 --> 00:01:38,920
Make this bigger.

00:01:38,920 --> 00:01:42,770
Of course, Analytic make the URL any big.

00:01:42,770 --> 00:01:46,390
So, that was useless.

00:01:46,390 --> 00:01:49,119
[ Laughter ] All right.

00:01:49,119 --> 00:01:50,979
Is that easier to read?

00:01:50,979 --> 00:01:55,590
GitHub, rhboyd, and DevOpsDays Boston.

00:01:55,590 --> 00:01:58,920
I'm not sure if GitHub is case sensitive or not.

00:01:58,920 --> 00:02:04,120
I'll give everybody a minute to jot that down.

00:02:04,120 --> 00:02:07,380
And everything we go over today is on GitHub.

00:02:07,380 --> 00:02:09,509
Some stuff isn't on there yet.

00:02:09,509 --> 00:02:11,900
Just because I haven't pushed the commit with the updated to it yet.

00:02:11,900 --> 00:02:13,719
But it will be up there tonight.

00:02:13,719 --> 00:02:17,499
It's slightly more advanced topics if we get to them.

00:02:17,499 --> 00:02:19,060
Either way they will be up there.

00:02:19,060 --> 00:02:24,629
Just a matter of if we get to them today.

00:02:24,629 --> 00:02:30,829
When we go through today's demo, the blue window will be on a no show application.

00:02:30,829 --> 00:02:36,790
You deploy your infrastructure, and you have the information separately from one atom.

00:02:36,790 --> 00:02:42,809
There are people who and folder structure.

00:02:42,809 --> 00:02:46,099
And the monorepo.

00:02:46,099 --> 00:02:47,849
And the application.

00:02:47,849 --> 00:02:52,329
Some people have use cases that are preferred.

00:02:52,329 --> 00:02:57,199
But this pink window will be our pipeline.

00:02:57,199 --> 00:03:01,199
This is where we're doing most of our work today and most of the interesting work.

00:03:01,199 --> 00:03:07,579
And switching back and forth with the GitHub as we walk through that.

00:03:07,579 --> 00:03:11,159
And then the application that we're actually deploying just looks like this.

00:03:11,159 --> 00:03:13,409
It's just the API gateway and Lambda function.

00:03:13,409 --> 00:03:17,249
I hope, could be possibly much more sophisticated.

00:03:17,249 --> 00:03:18,939
And many functions, many APIs.

00:03:18,939 --> 00:03:20,180
And the microservice.

00:03:20,180 --> 00:03:28,751
But for almost everything we go over today, apply

00:03:28,751 --> 00:03:30,589
to this application that we have here.

00:03:30,589 --> 00:03:34,299
And the same way it would apply to a much more application.

00:03:34,299 --> 00:03:38,629
I believe that is most of the introductory material.

00:03:38,629 --> 00:03:42,089
So, some prerequisites to do this.

00:03:42,089 --> 00:03:45,489
The theater format for this is kind of difficult.

00:03:45,489 --> 00:03:49,349
Someone gets stuck, can't come to your seat and help you get unstuck because I have to

00:03:49,349 --> 00:03:50,900
climb over a bunch of people.

00:03:50,900 --> 00:03:54,010
Which is funny the first time, not funny the second time.

00:03:54,010 --> 00:03:59,819
So, what I was planning on doing today is just like going through this tutorial and

00:03:59,819 --> 00:04:04,469
if people are brave enough to keep up, I'm not going incredibly fast.

00:04:04,469 --> 00:04:05,909
I'll be everything I do.

00:04:05,909 --> 00:04:08,110
If you want to keep up, you can.

00:04:08,110 --> 00:04:15,139
And I will be at the workshop if you are stuck and we can talk about it one on one.

00:04:15,139 --> 00:04:20,810
But all the materials here that you could go back to your hotel or back to your home

00:04:20,810 --> 00:04:23,840
or office.

00:04:23,840 --> 00:04:29,740
And I know it's the last session of the last day.

00:04:29,740 --> 00:04:33,819
A lot of people want to get out of here quickly.

00:04:33,819 --> 00:04:35,199
We're using all AWS tools.

00:04:35,199 --> 00:04:49,480
All the concepts on the cloud provider, source control, controlled deployments, gradual release.

00:04:49,480 --> 00:04:58,530
Specific proper noun is for so, since we're using AWS, we're gonna use an IAM user.

00:04:58,530 --> 00:05:02,870
Inside of a corporation you may use a SAML provideror some kind of an identity provider

00:05:02,870 --> 00:05:06,630
that provides you as a developer with the IM roll to use.

00:05:06,630 --> 00:05:14,060
And for the demo purpose, it's easier to use an IM with credentials.

00:05:14,060 --> 00:05:15,930
This is inside Python 3.

00:05:15,930 --> 00:05:25,349
It's just the sample application we're creating is the serverless application model application.

00:05:25,349 --> 00:05:26,539
It's one I wrote in Python.

00:05:26,539 --> 00:05:30,080
You can write it in Node or any language.

00:05:30,080 --> 00:05:31,680
It's a modal application.

00:05:31,680 --> 00:05:36,780
You'll need the SAMCLI which depends on Python 3, I believe.

00:05:36,780 --> 00:05:39,020
It depends on Python.

00:05:39,020 --> 00:05:42,400
I'm not sure of the version.

00:05:42,400 --> 00:05:44,340
It's getting a little bit easier.

00:05:44,340 --> 00:05:48,750
It and then for testing the API in our application, postman is a nice tool.

00:05:48,750 --> 00:05:53,539
But you can use curl or another application if you didn't want to use Postman.

00:05:53,539 --> 00:05:57,110
I'm going to make sure I have this set up correctly.

00:05:57,110 --> 00:06:05,419
So, you can run SAM version just to make sure we have a version of SAM, that's great.

00:06:05,419 --> 00:06:06,419
Python version.

00:06:06,419 --> 00:06:07,419
Make sure we have Python.

00:06:07,419 --> 00:06:09,110
That's not good.

00:06:09,110 --> 00:06:12,229
[ Laughter ] Better.

00:06:12,229 --> 00:06:13,789
Right.

00:06:13,789 --> 00:06:18,370
So, Apple is talking about they're not going to include Python anymore by default which

00:06:18,370 --> 00:06:22,159
is great because then I don't have to worry about this Python 2, Python 3 problem.

00:06:22,159 --> 00:06:23,620
I can just use Python 3.

00:06:23,620 --> 00:06:27,310
If you just try to use Python 2, everything breaks.

00:06:27,310 --> 00:06:29,470
That was a tangent.

00:06:29,470 --> 00:06:35,629
We're going to cover code commit, CodeBuild, code pipeline, and code deploy and cloud formation.

00:06:35,629 --> 00:06:41,120
I used to refer to this set of tools adds a code star suite, the regX.

00:06:41,120 --> 00:06:46,669
But then they launched Code Star.

00:06:46,669 --> 00:06:51,389
It build agency nice hello world application.

00:06:51,389 --> 00:06:53,560
But it makes me have to use a new application.

00:06:53,560 --> 00:06:58,419
This is generally for the code suite, which includes code Star.

00:06:58,419 --> 00:07:06,539
And then because we're using AWS's serverless application model, infrastructure at code.

00:07:06,539 --> 00:07:13,009
We will use that for managing our pipeline infrastructure and for managing our application

00:07:13,009 --> 00:07:15,430
infrastructure as well.

00:07:15,430 --> 00:07:16,699
And then this is outdated.

00:07:16,699 --> 00:07:18,009
This is no DynamoDB.

00:07:18,009 --> 00:07:22,070
When I put together this workshop, I was going to have this crazy application.

00:07:22,070 --> 00:07:27,749
It's gonna be all kinds of direct service integrations.

00:07:27,749 --> 00:07:29,650
And then I realized nobody cares about that.

00:07:29,650 --> 00:07:31,470
They just care about the pipeline.

00:07:31,470 --> 00:07:32,479
That's why you're here today.

00:07:32,479 --> 00:07:35,620
It's just API gateway and Lambda.

00:07:35,620 --> 00:07:39,710
And it's a place holder for whatever your application is.

00:07:39,710 --> 00:07:43,279
So, we're gonna create two folders.

00:07:43,279 --> 00:07:47,059
And the reason I'm using two separate windows is because logically there's two separate

00:07:47,059 --> 00:07:48,059
things we're doing.

00:07:48,059 --> 00:07:53,080
We're creating the pipeline in our infrastructure and creating our application that will be

00:07:53,080 --> 00:07:54,460
deployed through that infrastructure.

00:07:54,460 --> 00:07:59,320
So, it makes it easier with the color difference, I'm going to use two separate folders to make

00:07:59,320 --> 00:08:00,939
it easier.

00:08:00,939 --> 00:08:04,669
And of course, no one can read it, but it says application at the top.

00:08:04,669 --> 00:08:07,710
The blue one is our application, and the P is our pipeline.

00:08:07,710 --> 00:08:11,169
P for pink in pipeline should help.

00:08:11,169 --> 00:08:13,770
We will start by making a folder to hold this stuff.

00:08:13,770 --> 00:08:14,770
So, mkdir pipelinefolder.

00:08:14,770 --> 00:08:22,850
I probably shouldn't be trying to live code.

00:08:22,850 --> 00:08:25,610
Should have recorded all of this.

00:08:25,610 --> 00:08:27,669
CD into this there.

00:08:27,669 --> 00:08:28,669
Okay.

00:08:28,669 --> 00:08:29,720
Lost my mouse.

00:08:29,720 --> 00:08:30,720
Sorry.

00:08:30,720 --> 00:08:31,720
Mkdr.

00:08:31,720 --> 00:08:35,289
What are we going to name our application folder?

00:08:35,289 --> 00:08:38,829
My DevOpsDays app.

00:08:38,829 --> 00:08:45,050
And just real quick, you'll see that we have these two, the pipeline folder I created in

00:08:45,050 --> 00:08:47,660
the other window, and the other one is going to CDN into here.

00:08:47,660 --> 00:08:58,949
We have these set up and we have to create an empty YAML file for the cloud formation.

00:08:58,949 --> 00:09:06,079
So, we'll say touch pipeline.yaml.

00:09:06,079 --> 00:09:07,430
I'm going to paste this in here.

00:09:07,430 --> 00:09:12,310
It's not a good workshop if I sorry.

00:09:12,310 --> 00:09:14,490
Vim, pipeline.

00:09:14,490 --> 00:09:22,079
If I just paste this in here and say we're done, wouldn't be a good workshop.

00:09:22,079 --> 00:09:28,960
For anyone who hasn't used CloudFormation before, the top line is optional.

00:09:28,960 --> 00:09:29,960
Scrolled up.

00:09:29,960 --> 00:09:35,820
It's the template formation, but if you supply it, it's the version.

00:09:35,820 --> 00:09:37,400
It's the only value that it accepts.

00:09:37,400 --> 00:09:40,630
It makes no sense to me, that's the spec.

00:09:40,630 --> 00:09:43,530
It's a description for it.

00:09:43,530 --> 00:09:46,730
Looking throughout file, you don't know what they're meant to do with this.

00:09:46,730 --> 00:09:49,360
Parameters are what you use to deploy.

00:09:49,360 --> 00:09:53,550
You can pass in parameters that change behavior.

00:09:53,550 --> 00:09:59,750
If you want to parameterize, maybe you deploy applications for other teams and the only

00:09:59,750 --> 00:10:07,720
real difference is maybe the AWS Lambda runtime you use, you can pass in a thing for Java

00:10:07,720 --> 00:10:11,660
or Python or Go or Node.js and then you can switch on that.

00:10:11,660 --> 00:10:14,000
We won't be doing anything like that in this workshop.

00:10:14,000 --> 00:10:16,350
This is an example of a parameter.

00:10:16,350 --> 00:10:18,540
Because we're giving it a default value, it is not required.

00:10:18,540 --> 00:10:21,790
Because it will just pick up the default value.

00:10:21,790 --> 00:10:23,481
This is where we get into the resource stuff.

00:10:23,481 --> 00:10:27,410
The resources is where all of the fun happens.

00:10:27,410 --> 00:10:28,720
This is a code commit repository.

00:10:28,720 --> 00:10:32,089
So, code commit is AWS's managed get service.

00:10:32,089 --> 00:10:39,801
You can work with a get client, get commands, get push force, get merge force so that you

00:10:39,801 --> 00:10:44,590
don't have to do code reviews and things like that.

00:10:44,590 --> 00:10:50,910
We're going to name the repository after the project just to keep it simple.

00:10:50,910 --> 00:10:55,149
Escape out of this.

00:10:55,149 --> 00:10:59,560
And now I'm going to deploy just this stack by itself.

00:10:59,560 --> 00:11:02,450
Just to make sure that everything kind of works.

00:11:02,450 --> 00:11:04,750
And then we'll like slowly add features to this.

00:11:04,750 --> 00:11:10,440
I should probably before I do that go back to my description here and talk about what

00:11:10,440 --> 00:11:11,440
we're actually building.

00:11:11,440 --> 00:11:14,980
So, what we'll do is we'll check in our code to code commit, which is like a managed get

00:11:14,980 --> 00:11:16,380
service.

00:11:16,380 --> 00:11:19,860
And when the code is checked in, that will cause an event to cause the pipeline to pick

00:11:19,860 --> 00:11:28,839
up a new commit and it will pass that commit off to code build which is a managed built

00:11:28,839 --> 00:11:29,839
service.

00:11:29,839 --> 00:11:31,830
They use a Docker container and it will build the application for you.

00:11:31,830 --> 00:11:35,360
This is what you typically use in something like a Jenkins server.

00:11:35,360 --> 00:11:39,470
But it's completely managed for you so you don't have to worry about patching it or updating

00:11:39,470 --> 00:11:40,470
the version of Jenkins.

00:11:40,470 --> 00:11:43,410
You just supply a Docker version.

00:11:43,410 --> 00:11:47,600
These are the steps I want to run, these red light base images.

00:11:47,600 --> 00:11:53,790
Amazon has a lot of pre packaged ones for you that you can use as your favorite dependency.

00:11:53,790 --> 00:12:00,170
So, if you're building a Lambda application based on Python, you can pick with the Python

00:12:00,170 --> 00:12:04,889
version of this and it will come with PythonPIP and all of your favorite Python dependencies.

00:12:04,889 --> 00:12:09,899
Likewise with Java and Node.js and Go and things like that.

00:12:09,899 --> 00:12:13,350
Once that build is successful, assuming it is successful, I have had many unsuccessful

00:12:13,350 --> 00:12:20,500
builds in my time, it will pass it on to the pipeline to use cloud formation to deploy

00:12:20,500 --> 00:12:21,660
the code.

00:12:21,660 --> 00:12:28,380
For the first part of the workshop, we will only be using the code formation.

00:12:28,380 --> 00:12:31,649
Then later on, we will use deploy.

00:12:31,649 --> 00:12:35,410
Just this rectangle here is what you will start with.

00:12:35,410 --> 00:12:38,170
So, we're gonna do.

00:12:38,170 --> 00:12:42,310
I'm gonna cheat a little bit.

00:12:42,310 --> 00:12:45,750
And it's not in here.

00:12:45,750 --> 00:12:47,820
Maybe it's in.

00:12:47,820 --> 00:12:49,199
All right.

00:12:49,199 --> 00:12:51,120
I'm gonna try to wing it.

00:12:51,120 --> 00:12:52,790
I never remember these commands.

00:12:52,790 --> 00:12:54,890
Let's try it.

00:12:54,890 --> 00:12:57,700
AWS cloud formation, deploy.

00:12:57,700 --> 00:13:00,339
So, we're deploy, we're using the AWSCLI.

00:13:00,339 --> 00:13:01,339
CloudFormation.

00:13:01,339 --> 00:13:02,339
We want to deploy.

00:13:02,339 --> 00:13:03,339
Template is cloud/pipeline, profile.

00:13:03,339 --> 00:13:08,529
I forgot what my profile was.

00:13:08,529 --> 00:13:12,100
DevOps demo.

00:13:12,100 --> 00:13:19,230
See if that works.

00:13:19,230 --> 00:13:21,019
Okay.

00:13:21,019 --> 00:13:25,100
I have to disconnect the HDMI for just a moment because I have to look at my password file

00:13:25,100 --> 00:13:26,100
and I don't want you all to see it.

00:13:26,100 --> 00:13:27,100
What's that?

00:13:27,100 --> 00:13:28,100
I'm gonna mess that up.

00:13:28,100 --> 00:13:29,100
I'm totally gonna mess that up.

00:13:29,100 --> 00:13:30,100
So, one second.

00:13:30,100 --> 00:13:31,100
Mike said he would come out here and make balloon animals while I was working on this.

00:13:31,100 --> 00:13:32,100
You guys should hold him to that.

00:13:32,100 --> 00:13:33,100
Okay.

00:13:33,100 --> 00:13:34,100
I'm back.

00:13:34,100 --> 00:13:35,100
I think it was just a spelling problem which is what all of my problems are.

00:13:35,100 --> 00:13:36,100
Oh, Devop demo.

00:13:36,100 --> 00:13:37,100
It was supposed to be DevOps demo.

00:13:37,100 --> 00:13:38,100
There we go.

00:13:38,100 --> 00:13:39,100
Cool.

00:13:39,100 --> 00:13:40,100
I messed it up.

00:13:40,100 --> 00:13:41,100
Invalid subcommand.

00:13:41,100 --> 00:13:42,600
Did I misspell something else?

00:13:42,600 --> 00:13:45,120
It's okay.

00:13:45,120 --> 00:13:49,540
If you're having this problem, what you can do is just copy and paste this.

00:13:49,540 --> 00:13:52,720
Oh, I didn't give it a stack name.

00:13:52,720 --> 00:14:01,110
But that doesn't explain why none of the rest of the stuff worked.

00:14:01,110 --> 00:14:02,110
Let's try this again.

00:14:02,110 --> 00:14:03,110
Okay.

00:14:03,110 --> 00:14:04,120
So, quickly what this saying confirmation deploy.

00:14:04,120 --> 00:14:07,949
We have to give it a template, which is the pipe Lin we just created.you have to name

00:14:07,949 --> 00:14:11,129
the stack, when it's deployed to the cloud formation, you have to give it a name to is

00:14:11,129 --> 00:14:12,130
knows how to track it.

00:14:12,130 --> 00:14:16,269
And I'm using I took that off.

00:14:16,269 --> 00:14:27,259
I'm using profiles to control what credentials it so it knows what I AM accounts to use.

00:14:27,259 --> 00:14:28,579
I have many accounts.

00:14:28,579 --> 00:14:35,920
But if you are doing a thing, like an IAM user is sufficient.

00:14:35,920 --> 00:14:38,730
And now we wait.

00:14:38,730 --> 00:14:40,730
It should go fairly quickly it should be three minutes orso.

00:14:40,730 --> 00:14:43,520
It hasn't thrown an error yet.

00:14:43,520 --> 00:14:45,930
Usually means I'm on the right track.

00:14:45,930 --> 00:14:48,420
While that's doing that, I will log into the account.

00:14:48,420 --> 00:14:50,759
It moved.

00:14:50,759 --> 00:14:51,940
Waiting.

00:14:51,940 --> 00:14:54,170
It will create a changeset.

00:14:54,170 --> 00:14:56,139
This is just some CloudFormation basics.

00:14:56,139 --> 00:15:00,060
It will create a changeset and here are the new things that will be created if I execute

00:15:00,060 --> 00:15:02,339
this changeset.

00:15:02,339 --> 00:15:07,000
And because of the way the command line I told it just do a deploy.

00:15:07,000 --> 00:15:09,959
There's ways of saying create changeset and deploy changeset if you want to break things

00:15:09,959 --> 00:15:12,620
up which we will see later in the pipeline.

00:15:12,620 --> 00:15:17,920
And then apply that changeset to actually create the new resources for you.

00:15:17,920 --> 00:15:23,290
So, by splitting that up into two steps you can have a manual intervention process.

00:15:23,290 --> 00:15:26,079
Anyone can push the main line.

00:15:26,079 --> 00:15:29,529
The code will go out and get built and create a changeset.

00:15:29,529 --> 00:15:30,529
Here is the diff.

00:15:30,529 --> 00:15:32,189
Yeah, that's appropriate and click yes.

00:15:32,189 --> 00:15:33,189
And continue on.

00:15:33,189 --> 00:15:35,980
We aren't going to do that in the workshop today, but I will show you where you would

00:15:35,980 --> 00:15:37,689
insert something like that.

00:15:37,689 --> 00:15:38,689
Failed.

00:15:38,689 --> 00:15:41,660
That's not good.

00:15:41,660 --> 00:15:46,730
One trick I just do is give it a different name.

00:15:46,730 --> 00:15:48,350
Sometimes there's a name collision.

00:15:48,350 --> 00:15:51,470
See what happened.

00:15:51,470 --> 00:15:53,540
Oh, no.

00:15:53,540 --> 00:15:59,769
This should... oh, there it is.

00:15:59,769 --> 00:16:07,129
I probably shouldn't have been on like the attendee wireless.

00:16:07,129 --> 00:16:08,129
It seems slower.

00:16:08,129 --> 00:16:12,509
Maybe I'm sharing it with all the rest of you.

00:16:12,509 --> 00:16:13,509
Beautiful.

00:16:13,509 --> 00:16:16,269
What's it saying?

00:16:16,269 --> 00:16:18,149
Failed again.

00:16:18,149 --> 00:16:25,670
Let's go into the cloud formation bless you!

00:16:25,670 --> 00:16:26,670
CloudFormation.

00:16:26,670 --> 00:16:28,079
Being this zoomed in makes it hard.

00:16:28,079 --> 00:16:29,980
But we will see why it failed.

00:16:29,980 --> 00:16:39,310
Oh, I need to switch to DevOps demo.

00:16:39,310 --> 00:16:40,310
It says my account number.

00:16:40,310 --> 00:16:43,520
I don't think there's any security implications with seeing my account number.

00:16:43,520 --> 00:16:48,040
But don't hack me, please.

00:16:48,040 --> 00:16:54,529
This is the fun of CloudFormation templates is that go back.

00:16:54,529 --> 00:16:59,100
I'm gonna make this smaller for a second so I can read it and then make it bigger once

00:16:59,100 --> 00:17:02,320
I figure out oh, that's right.

00:17:02,320 --> 00:17:03,320
Okay.

00:17:03,320 --> 00:17:04,470
That's too small.

00:17:04,470 --> 00:17:10,920
So, what happened was, I was testing it this morning, rehearsing my talk, and I already

00:17:10,920 --> 00:17:14,000
made one that like worked.

00:17:14,000 --> 00:17:17,150
And when I tried to make a new one, there was a name collision because I manually named

00:17:17,150 --> 00:17:19,280
that code commit repository.

00:17:19,280 --> 00:17:22,340
So, in general for resources you don't to want manually name them.

00:17:22,340 --> 00:17:23,700
You will run into issues like this.

00:17:23,700 --> 00:17:27,230
If you're creating something several times, intending to have different resources, but

00:17:27,230 --> 00:17:31,820
they collide and everything is broken.

00:17:31,820 --> 00:17:35,910
Code commit is slightly different because the name is the only field that's required.

00:17:35,910 --> 00:17:37,520
Which is why it throws me off.

00:17:37,520 --> 00:17:42,240
Let me just delete these.

00:17:42,240 --> 00:17:45,200
I'll probably bet throttled for deleting stuff too fast.

00:17:45,200 --> 00:17:56,200
So, what I'm gonna do is I'm gonna change the name of the repo so we don't have to wait

00:17:56,200 --> 00:17:58,570
for that delete to finish.

00:17:58,570 --> 00:18:00,250
That works.

00:18:00,250 --> 00:18:03,220
I'll totally jinx this.

00:18:03,220 --> 00:18:12,220
And then give it a working.

00:18:12,220 --> 00:18:14,720
Fingers crossed it works this time.

00:18:14,720 --> 00:18:19,300
That's usually why I do this very early in the process to work out some of these smallkinks

00:18:19,300 --> 00:18:24,920
in the workflow when there's very few resources going on, being created.

00:18:24,920 --> 00:18:27,990
Because cloud formation is notoriously slow to create some resources

00:18:27,990 --> 00:18:32,300
You do it for an hour and it cease an error and makes an hour to roll it back.

00:18:32,300 --> 00:18:33,300
Success.

00:18:33,300 --> 00:18:34,300
We're on the right track.

00:18:34,300 --> 00:18:36,180
This is great, right?

00:18:36,180 --> 00:18:38,200
Only took us, what?

00:18:38,200 --> 00:18:39,960
What time is it?

00:18:39,960 --> 00:18:45,530
Like half an hour to add a repo which is like three clicks in the console.

00:18:45,530 --> 00:18:51,000
I don't have to tell you all of you about the benefits of infrastructure as code.

00:18:51,000 --> 00:18:53,630
This is what your manager cease.

00:18:53,630 --> 00:18:56,870
Why did it take you all afternoon to create the repo?

00:18:56,870 --> 00:18:58,260
You don't understand, the names.

00:18:58,260 --> 00:19:00,250
The names aren't right.

00:19:00,250 --> 00:19:05,160
[ Laughter ] So, I get it.

00:19:05,160 --> 00:19:09,190
Manager yells although you, come tell them to yell at me.

00:19:09,190 --> 00:19:10,190
Cool.

00:19:10,190 --> 00:19:11,850
So, now we'll add a bucket to this.

00:19:11,850 --> 00:19:12,950
An S3 bucket.

00:19:12,950 --> 00:19:14,780
You have heard of them.

00:19:14,780 --> 00:19:20,690
The reason we're using an Sbucket is we're going to put artifacts from the build process

00:19:20,690 --> 00:19:21,690
into there.

00:19:21,690 --> 00:19:27,450
There is a bucket code pipeline creates for storing pipeline specific artifacts.

00:19:27,450 --> 00:19:29,370
I prefer a separate one.

00:19:29,370 --> 00:19:34,250
I have more control over the access control to the bucket and I don't use the automatically

00:19:34,250 --> 00:19:35,340
generated one.

00:19:35,340 --> 00:19:41,410
And I'm going to stop using Vim to edit this thing because I hate using Vim.

00:19:41,410 --> 00:19:46,730
Not that I hate Vim, it's just hard to do and I'm not good at it.

00:19:46,730 --> 00:19:49,720
It makes it even harder.

00:19:49,720 --> 00:19:52,720
I'm going to open follower.

00:19:52,720 --> 00:19:53,720
Which one?

00:19:53,720 --> 00:19:54,790
Oh, 24 of September.

00:19:54,790 --> 00:19:55,790
Pipeline folder.

00:19:55,790 --> 00:19:59,780
And then hopefully this will be a bit easier.

00:19:59,780 --> 00:20:00,780
No.

00:20:00,780 --> 00:20:01,780
Go away.

00:20:01,780 --> 00:20:02,800
People are already leaving.

00:20:02,800 --> 00:20:04,350
I see how it is.

00:20:04,350 --> 00:20:05,900
[ Laughter ] No, I'm just kidding.

00:20:05,900 --> 00:20:06,900
If you want to leave, you can leave.

00:20:06,900 --> 00:20:08,920
I won't hold it against you for too long.

00:20:08,920 --> 00:20:10,900
All right.

00:20:10,900 --> 00:20:14,440
So, we had this is YAML.

00:20:14,440 --> 00:20:18,550
If anyone hasn't worked with it before.

00:20:18,550 --> 00:20:21,070
It's like a better version of JSON.

00:20:21,070 --> 00:20:24,780
But it's still like that's a low bar to cross.

00:20:24,780 --> 00:20:29,290
And like Python, it's like sensitive to whitespace.

00:20:29,290 --> 00:20:32,310
So, these two things are next to each other, they're peer objects.

00:20:32,310 --> 00:20:35,790
If you had done something like this, it would loses it mind.

00:20:35,790 --> 00:20:37,930
I don't know what's going on here.

00:20:37,930 --> 00:20:39,170
Whitespace is hard.

00:20:39,170 --> 00:20:40,590
All right.

00:20:40,590 --> 00:20:44,510
So, I made like a small change and I just rerun the same command and it will deploy

00:20:44,510 --> 00:20:46,100
the bucket.

00:20:46,100 --> 00:20:47,100
Hopefully this will work.

00:20:47,100 --> 00:20:48,100
Should work.

00:20:48,100 --> 00:20:50,730
Shouldn't be any reason why it shouldn't work.

00:20:50,730 --> 00:20:54,390
So, while it's deploying, it should only take a minute.

00:20:54,390 --> 00:20:56,640
Anyone have questions about anything that's unclear?

00:20:56,640 --> 00:20:58,570
Have I been speaking too fast?

00:20:58,570 --> 00:21:01,860
Probably people from like wildly different experience with AWS technology.

00:21:01,860 --> 00:21:07,260
Probably stuff people aren't familiar with or are.

00:21:07,260 --> 00:21:10,210
Come talk to me afterwards if you are shy.

00:21:10,210 --> 00:21:12,780
I'll only make fun of you a little bit.

00:21:12,780 --> 00:21:14,260
So, we have the bucket.

00:21:14,260 --> 00:21:17,250
This is going to hold our resources during the build process.

00:21:17,250 --> 00:21:20,650
We're going to stick them in there when we're done so we can pass them around.

00:21:20,650 --> 00:21:27,490
This is common with a multi account product when you're building and deploying your resources

00:21:27,490 --> 00:21:29,450
out to other accounts.

00:21:29,450 --> 00:21:34,710
You might have a Dev account, an integration account, a production account for the US,

00:21:34,710 --> 00:21:38,880
a production account for Europe, a production account for South America.

00:21:38,880 --> 00:21:44,920
Whatever your account structure is, if you're using a multi account structure in AWS, the

00:21:44,920 --> 00:21:49,180
preferred way of architecting these things, having a separate distinct bucket for these

00:21:49,180 --> 00:21:53,410
things instead of the bucket works for me.

00:21:53,410 --> 00:22:00,320
I can control the key applied to it and the individual policies and hook up Lambdas.

00:22:00,320 --> 00:22:02,981
Which I think you can do with the other one, but you have to wait until after the code

00:22:02,981 --> 00:22:04,450
pipeline creates it.

00:22:04,450 --> 00:22:09,880
But it's tied to the code pipeline which I don't really like.

00:22:09,880 --> 00:22:15,620
AUDIENCE: You just want it to be the stack name.

00:22:15,620 --> 00:22:18,300
RICHARD: I hate naming anything.

00:22:18,300 --> 00:22:21,250
I struggled to name the folders I was using.

00:22:21,250 --> 00:22:25,090
I'm not a creative person.

00:22:25,090 --> 00:22:30,690
When you manual lie name something with CloudFormation, if you make a name change that requires replacement,

00:22:30,690 --> 00:22:32,910
that will fail.

00:22:32,910 --> 00:22:34,990
It first creates the new item.

00:22:34,990 --> 00:22:38,710
And once that's successfully done, it does a stack cleanup operation and deletes the

00:22:38,710 --> 00:22:39,770
old ones.

00:22:39,770 --> 00:22:44,370
But since buckets have to be globally unique.

00:22:44,370 --> 00:22:47,940
You have to rename it, which essentially just destroys the resource.

00:22:47,940 --> 00:22:52,760
If I can get away with it, messed up on the code commit repository.

00:22:52,760 --> 00:22:55,470
I don't rename things manually.

00:22:55,470 --> 00:22:59,390
And his question was, why didn't I name the bucket specifically?

00:22:59,390 --> 00:23:02,402
It's one of the few properties that most people gift to the bucket.

00:23:02,402 --> 00:23:03,402
That's why I didn't manually name it.

00:23:03,402 --> 00:23:04,402
AUDIENCE: I have a question related to deployments.

00:23:04,402 --> 00:23:05,402
I'm not sure if you're taking that right now.

00:23:05,402 --> 00:23:06,402
So, how do you manage various deployments with different applications across different

00:23:06,402 --> 00:23:07,402
technologies?

00:23:07,402 --> 00:23:08,402
Should they be a centered team doing all the deployments?

00:23:08,402 --> 00:23:13,280
Because there are varying projects with different technologies, you know, three or four projects

00:23:13,280 --> 00:23:21,190
all doing different stuff.

00:23:21,190 --> 00:23:35,020
Should there be teams doing all that?

00:23:35,020 --> 00:23:38,560
RICHARD: I'm sorry, I didn't mean to cut you off.

00:23:38,560 --> 00:23:45,970
So, her question is, is there a rule of thumb to use if you're deploying many applications

00:23:45,970 --> 00:23:48,230
across many stacks using various technologies.

00:23:48,230 --> 00:23:51,510
Some might be using a simple LAMP stack.

00:23:51,510 --> 00:23:55,690
Might have React with an API gateway in the background.

00:23:55,690 --> 00:24:00,020
We could have a deploy days Boston and spend three days arguing about different ways of

00:24:00,020 --> 00:24:01,320
doing that.

00:24:01,320 --> 00:24:06,330
I think the people who own the individual services would decide what deployment strategy

00:24:06,330 --> 00:24:07,720
works best for them.

00:24:07,720 --> 00:24:10,521
I try to like we do microservices at iRobot.

00:24:10,521 --> 00:24:15,470
And I try to the things that we build and deploy as like a bounded context.

00:24:15,470 --> 00:24:20,330
Everything that makes sense to change together we put together into its own pipeline.

00:24:20,330 --> 00:24:24,760
You tend to have problems with people who have built monoliths their entire career.

00:24:24,760 --> 00:24:30,860
Okay, now you're making microservices and they make a monolith out of motorcycle services

00:24:30,860 --> 00:24:35,430
and try to deploy all of it at the same time and it fails.

00:24:35,430 --> 00:24:40,790
I would it's usually a good sign in an organization to be able if one service

00:24:40,790 --> 00:24:44,670
could deploy by itself without affecting a bunch of other services, you have done a good

00:24:44,670 --> 00:24:46,250
job of decoupling that.

00:24:46,250 --> 00:24:52,710
Which by itself doesn't mean it's necessarily architected very well, but it's a good sign.

00:24:52,710 --> 00:24:55,050
Does that answer your question?

00:24:55,050 --> 00:24:59,430
I'll talk about deployments more later as we get into it.

00:24:59,430 --> 00:25:01,420
So, I'm gonna move forward.

00:25:01,420 --> 00:25:03,050
Just make sure that cool.

00:25:03,050 --> 00:25:04,050
So, that works.

00:25:04,050 --> 00:25:09,570
I'm not going to switch back and forth and have of that it actually deployed each time.

00:25:09,570 --> 00:25:13,410
Hopefully you can trust me and I will only lie to you a little bit.

00:25:13,410 --> 00:25:16,790
The next step is the fairly boring part.

00:25:16,790 --> 00:25:20,660
So, we need to create a role for CodeBuild to use.

00:25:20,660 --> 00:25:24,330
We're going to use CodeBuild to run our application.

00:25:24,330 --> 00:25:29,720
Run things like SAM build or bunch dependencies and get it ready for deployment.

00:25:29,720 --> 00:25:34,240
Also when you would run some of your integration or unit tests.

00:25:34,240 --> 00:25:36,740
Definitely your integration tests, maybe unit tests.

00:25:36,740 --> 00:25:39,320
This is verifying that the code will run.

00:25:39,320 --> 00:25:48,810
If people push code into a bundled artifact, you have to take it at the word that it works.

00:25:48,810 --> 00:25:54,200
This will only work if you go through the build test with the test in it.

00:25:54,200 --> 00:25:59,600
And this is the role that AWS has for controlling resources.

00:25:59,600 --> 00:26:05,670
And allow CodeBuild to do the resources.

00:26:05,670 --> 00:26:09,710
It gives it a specific name which I just said I don't like doing.

00:26:09,710 --> 00:26:16,480
This is an artifact, with a multi account structure, it creates a cyclical dependency

00:26:16,480 --> 00:26:20,110
between your central build account and your other accounts.

00:26:20,110 --> 00:26:23,570
CodeBuild is not necessarily that way.

00:26:23,570 --> 00:26:26,570
But some of the other rules we use and I want it to be consistent.

00:26:26,570 --> 00:26:35,160
That your the pipeline, the code pipeline role needs permissions to do things in other

00:26:35,160 --> 00:26:39,110
accounts to do things in thoseaccounts and the other accounts need to be able to

00:26:39,110 --> 00:26:41,350
trust the pipeline role.

00:26:41,350 --> 00:26:47,030
If you don't explicitly name the role, neither knows what the other is doing.

00:26:47,030 --> 00:26:49,170
You're creating a cyclical dependency.

00:26:49,170 --> 00:26:51,450
One depends on the other depends on the other.

00:26:51,450 --> 00:26:55,960
Even though I hate down it, it's the only option for now.

00:26:55,960 --> 00:27:06,980
Are you stretching or question?

00:27:06,980 --> 00:27:12,160
It's fun in a way that not being able to solve a Rubik's cube is fun.

00:27:12,160 --> 00:27:15,090
This is like the actual policy.

00:27:15,090 --> 00:27:18,730
This says what the role can actually do.

00:27:18,730 --> 00:27:20,910
It can get and put files from S3.

00:27:20,910 --> 00:27:25,410
That's where it's going to be putting the built artifacts.

00:27:25,410 --> 00:27:30,640
And then in the bucket that we created earlier further up in the document.

00:27:30,640 --> 00:27:33,500
And some of this is just like the reference syntax.

00:27:33,500 --> 00:27:35,820
There's other ways of representing this which are a little bit cleaner.

00:27:35,820 --> 00:27:38,550
But I just copied it from our production code.

00:27:38,550 --> 00:27:43,740
And there's logging information that we like CodeBuild to be able to log this to keep an

00:27:43,740 --> 00:27:45,510
eye on how long builds are taking.

00:27:45,510 --> 00:27:48,720
What are some other ones?

00:27:48,720 --> 00:27:52,310
Logging built failures and trying to figure out root cause stuff.

00:27:52,310 --> 00:27:56,760
Automated, this person's commit bloke it to send an angry email.

00:27:56,760 --> 00:28:00,470
Wait until we know they have left for the day and send an angry email so they come back.

00:28:00,470 --> 00:28:01,750
I don't do that.

00:28:01,750 --> 00:28:03,290
Just kidding.

00:28:03,290 --> 00:28:06,380
We say this policy is now attached to that role.

00:28:06,380 --> 00:28:09,250
So, I'm going to copy all of this.

00:28:09,250 --> 00:28:16,200
Oh, when I said all of this, I didn't mean [ Laughter ]

00:28:16,200 --> 00:28:17,500
The story of my life.

00:28:17,500 --> 00:28:29,400
I try to be like, clever, and then I shoot my foot off.

00:28:29,400 --> 00:28:30,660
Cool.

00:28:30,660 --> 00:28:34,510
AUDIENCE: That's in the resource block?

00:28:34,510 --> 00:28:36,380
RICHARD: It's in theresource blocking.

00:28:36,380 --> 00:28:39,510
Anything that's indented is in the resource block.

00:28:39,510 --> 00:28:42,370
There's a couple later that are in the resource block.

00:28:42,370 --> 00:28:47,500
Following along on the GitHub page?

00:28:47,500 --> 00:28:53,010
Underneath each one of the code things, it says this complete template can be found here.

00:28:53,010 --> 00:28:58,990
I'm just adding the diff in each one of the documents just to save space.

00:28:58,990 --> 00:29:00,650
But go in this folder.

00:29:00,650 --> 00:29:07,070
I will go back real quick.

00:29:07,070 --> 00:29:08,140
Nope.

00:29:08,140 --> 00:29:11,350
That's not it.

00:29:11,350 --> 00:29:13,922
I hope I committed it.

00:29:13,922 --> 00:29:14,922
Oh, my god.

00:29:14,922 --> 00:29:16,280
I I did not commit that, I'm sorry.

00:29:16,280 --> 00:29:21,310
It will be up there as soon as I'm off the stage.

00:29:21,310 --> 00:29:22,310
Crap.

00:29:22,310 --> 00:29:24,090
What am I doing?

00:29:24,090 --> 00:29:25,090
Yeah.

00:29:25,090 --> 00:29:26,920
I put them all in a folder in the local working copy.

00:29:26,920 --> 00:29:30,300
I committed, just forgot to push it.

00:29:30,300 --> 00:29:32,720
The full template will be in there.

00:29:32,720 --> 00:29:35,030
I'll tell you specifically when we're doing something outside of the resource block.

00:29:35,030 --> 00:29:36,410
Everything else will be inside the resources block of the template.

00:29:36,410 --> 00:29:38,030
Back to where we were.

00:29:38,030 --> 00:29:41,320
I think I just pasted this.

00:29:41,320 --> 00:29:42,320
Yes.

00:29:42,320 --> 00:29:45,720
We will deploy that.

00:29:45,720 --> 00:29:52,350
And then we'll go back to talking.

00:29:52,350 --> 00:29:56,820
All right.

00:29:56,820 --> 00:30:01,560
So, now we have a role for the code build project to use.

00:30:01,560 --> 00:30:04,810
But we need an actual code built project to actually build stuff.

00:30:04,810 --> 00:30:07,700
This is where you define that.

00:30:07,700 --> 00:30:11,580
I manually name things here.

00:30:11,580 --> 00:30:15,710
We use a centralized build account and I want to know which builds go with which teams.

00:30:15,710 --> 00:30:21,260
Naming them after the service it's on heavens with the traceability.

00:30:21,260 --> 00:30:25,080
I think you cannot name it, and it will pick it.

00:30:25,080 --> 00:30:29,440
There's a reason we chose to name them.

00:30:29,440 --> 00:30:31,270
And then, you know, you tell what role to use.

00:30:31,270 --> 00:30:36,870
This role we just definedthis artifacts is how this will be invoked.

00:30:36,870 --> 00:30:43,150
In the next section, we'll have code pipeline and actually invoke this code build to tell

00:30:43,150 --> 00:30:44,150
it to run.

00:30:44,150 --> 00:30:45,640
There's other ways of having code build start.

00:30:45,640 --> 00:30:52,200
So, you can have like a Lambda function which is what people do if you do feature based

00:30:52,200 --> 00:30:53,660
development.

00:30:53,660 --> 00:30:59,380
Where everything that's on mainline, master, whatever you call your main trunk, will always

00:30:59,380 --> 00:31:01,360
be built and then deployed.

00:31:01,360 --> 00:31:06,000
People need to be able to commit to feature branches and you want to do builds on that.

00:31:06,000 --> 00:31:10,610
One example that people tend to do is they will say any time someone commits to a branch,

00:31:10,610 --> 00:31:14,650
no matter what it is, it will trigger this Lambda function.

00:31:14,650 --> 00:31:18,690
If it's on master or main, it won't do anything.

00:31:18,690 --> 00:31:20,390
The pipeline will take care of it.

00:31:20,390 --> 00:31:28,340
On the other branches, it tells Lambda, send this and the artifacts and the output of the

00:31:28,340 --> 00:31:34,060
process to whatever developer build that as a build report to say this last report will

00:31:34,060 --> 00:31:36,440
not buildhad you committed to mainline.

00:31:36,440 --> 00:31:40,900
And this is where we develop the environment.

00:31:40,900 --> 00:31:44,340
It's a container based build system.

00:31:44,340 --> 00:31:47,920
We're using like the pre oh, sorry the pre built image.

00:31:47,920 --> 00:31:50,220
It has most of the stuff we need.

00:31:50,220 --> 00:31:51,710
Specifically Python 3.7.

00:31:51,710 --> 00:31:55,560
It does support especially with 2.0 polyglot builds.

00:31:55,560 --> 00:32:03,410
If you have use the AWSCDK, it needs Node, TypeScript.

00:32:03,410 --> 00:32:06,190
But most I build are in Python.

00:32:06,190 --> 00:32:09,830
You need Node and Python support to build it correctly.

00:32:09,830 --> 00:32:15,880
You can list all of the runtimes you want and this comes by default in the standard

00:32:15,880 --> 00:32:17,110
2.0 CodeBuild.

00:32:17,110 --> 00:32:22,670
If you have requirements for regulatory images you can only use specific images for building

00:32:22,670 --> 00:32:25,330
your code for like security concerns.

00:32:25,330 --> 00:32:30,960
You can say use that image and you can point this to ECR, the Elastic container registry,

00:32:30,960 --> 00:32:35,380
or ECS I believe it's called, and it will pull in one instead.

00:32:35,380 --> 00:32:41,010
And I'm just saying use the standard one.

00:32:41,010 --> 00:32:44,200
Privilege mode allows me to build Docker containers inside of Docker containers.

00:32:44,200 --> 00:32:49,890
Like a Dockerception.

00:32:49,890 --> 00:32:54,700
If you're using sand build and telling it to use the CodeBuild, this is not true.

00:32:54,700 --> 00:33:00,150
But if you need essentially root permissions on the image, then you don't need privilege

00:33:00,150 --> 00:33:01,150
mode.

00:33:01,150 --> 00:33:05,440
You might have a security guideline saying don't use privilege mode for whatever reason.

00:33:05,440 --> 00:33:08,250
Maybe pulling in third party guidelines.

00:33:08,250 --> 00:33:12,640
And we can pass in environment variables.

00:33:12,640 --> 00:33:17,530
On your local build service, you might create environment variables.

00:33:17,530 --> 00:33:22,090
This is the home, the AWS credentials, other values.

00:33:22,090 --> 00:33:25,720
We don't have to pass in AWS credentials here.

00:33:25,720 --> 00:33:29,860
It gets them from the standard build image.

00:33:29,860 --> 00:33:33,020
This is the bucket we created earlier.

00:33:33,020 --> 00:33:36,190
And then we tell the source what's pat pipeline.

00:33:36,190 --> 00:33:39,220
And this is where all of the magic happens in the build spec.

00:33:39,220 --> 00:33:42,060
So, the build spec is fairly well defined.

00:33:42,060 --> 00:33:46,330
I don't think it's an Amazon specific thing.

00:33:46,330 --> 00:33:51,100
But this has like several steps in the phases where there's install and build are the only

00:33:51,100 --> 00:33:52,100
ones I'm using.

00:33:52,100 --> 00:33:55,390
But there's like pre build, post build, post install, I think.

00:33:55,390 --> 00:34:03,280
There's about five or six stages so you can break up your build process into several logical

00:34:03,280 --> 00:34:04,280
stages.

00:34:04,280 --> 00:34:05,440
You want to do all of your install stuff together.

00:34:05,440 --> 00:34:10,720
One thing to keep in mind is that commands that are run in one of these phases, they

00:34:10,720 --> 00:34:15,849
are exited in the shell and exit out and start a new one.

00:34:15,849 --> 00:34:17,589
Aliasing doesn't work across stages.

00:34:17,589 --> 00:34:18,909
But exportsdo.

00:34:18,909 --> 00:34:23,960
If you're exporting in Bash, you can use another thing.

00:34:23,960 --> 00:34:26,829
But just using alias, it's blown away.

00:34:26,829 --> 00:34:30,789
It's an edge case that you don't think it would be an edge case until it bites you and

00:34:30,789 --> 00:34:36,950
you think, why would they do that and I do this LS command to show that it's running

00:34:36,950 --> 00:34:39,539
to help debug it.

00:34:39,539 --> 00:34:46,030
And this is the stuff that I need to build and test and package out my application.

00:34:46,030 --> 00:34:48,389
This would vary depending on what your application is.

00:34:48,389 --> 00:34:52,750
So, I'm installing the AWS SAMCLI, testing infrastructure.

00:34:52,750 --> 00:34:55,619
I'm setting an alias.

00:34:55,619 --> 00:34:58,930
Assigning a variable to this.

00:34:58,930 --> 00:35:01,839
So, yeah, the base path.

00:35:01,839 --> 00:35:02,839
Exporting it.

00:35:02,839 --> 00:35:05,470
And here I'm running tests.

00:35:05,470 --> 00:35:11,269
And assuming it passes, I build it and do AWS cloud formation package which packages

00:35:11,269 --> 00:35:16,579
it up and puts it in the external S3 bucket.

00:35:16,579 --> 00:35:22,210
The actual zipped up files which substitutes my actual Lambda function is put into that

00:35:22,210 --> 00:35:23,450
S3 bucket.

00:35:23,450 --> 00:35:29,089
And what the build step actually outputs is the template itself.

00:35:29,089 --> 00:35:34,900
Template has a pointer, but we minimize the number of files flowing around inside of the

00:35:34,900 --> 00:35:35,990
pipeline.

00:35:35,990 --> 00:35:41,490
We manually move those to the S3 bucket ourselves And then the time out.

00:35:41,490 --> 00:35:45,520
With code Build, it's by the instance side minus the number of minutes.

00:35:45,520 --> 00:35:51,799
It's like a 1 second or 1 minute increment.

00:35:51,799 --> 00:35:57,470
If you have a step to wait for something, you don't want it to wait for 6 or 7 years.

00:35:57,470 --> 00:35:58,891
You will be paying for the instance.

00:35:58,891 --> 00:36:05,240
Put an instance and say the build failed and protect your wallet.

00:36:05,240 --> 00:36:07,829
If you work for a big company, you don't have to worry about that maybe.

00:36:07,829 --> 00:36:08,970
I personally worry about that.

00:36:08,970 --> 00:36:11,589
Keep the build down to 10 minutes.

00:36:11,589 --> 00:36:15,359
I'm going to paste this in here.

00:36:15,359 --> 00:36:28,950
As usual, I didn't I'm used to using PyCharm.

00:36:28,950 --> 00:36:33,119
I know the Jetbrains save.

00:36:33,119 --> 00:36:34,539
There's nothing deploy.

00:36:34,539 --> 00:36:40,019
This is a problem that we would expect.

00:36:40,019 --> 00:36:46,800
If you created an IAM role or policy, you have to tell it I'm creating something that

00:36:46,800 --> 00:36:50,789
has permission to do things and you have to be explicit that you're allowing that to happen

00:36:50,789 --> 00:36:52,510
as security guardrail.

00:36:52,510 --> 00:36:57,750
You just add this flag that says, capabilities.

00:36:57,750 --> 00:37:01,859
I never get this to work on the first try.

00:37:01,859 --> 00:37:03,859
But we'll see.

00:37:03,859 --> 00:37:06,519
Where is my mouse?

00:37:06,519 --> 00:37:11,329
I misspell capabilities or I misspell the all caps version.

00:37:11,329 --> 00:37:16,440
And we're saying, yes, I'm giving this template permission to create IAM resources.

00:37:16,440 --> 00:37:20,950
And this, you know, this will take a minute because it's creating a few resources.

00:37:20,950 --> 00:37:22,890
We'll go back to the workshop.

00:37:22,890 --> 00:37:26,930
And so all right.

00:37:26,930 --> 00:37:31,040
So, now we have a code commit repository and a build project.

00:37:31,040 --> 00:37:32,560
But they're not connected in any way.

00:37:32,560 --> 00:37:35,400
They're both just kind of exist in the either and floating around.

00:37:35,400 --> 00:37:38,099
And a pipeline which is going tie them together.

00:37:38,099 --> 00:37:40,440
Back to the diagram.

00:37:40,440 --> 00:37:44,079
There's a CodeBuild and the CodeCommit.

00:37:44,079 --> 00:37:47,079
We need the pipeline to tie them together.

00:37:47,079 --> 00:37:50,250
List make this pipeline.

00:37:50,250 --> 00:37:52,470
Before I copy and paste this in.

00:37:52,470 --> 00:37:57,390
I'm not going over the pipeline role again, it's similar to the CodeBuild role.

00:37:57,390 --> 00:37:59,180
Assume role.

00:37:59,180 --> 00:38:05,180
The policy, we give it we have to give it quite a few CloudFormation privileges because

00:38:05,180 --> 00:38:10,740
it needs to deploy CloudFormation stacks to this account or other accounts.

00:38:10,740 --> 00:38:13,720
Some people might do something like this.

00:38:13,720 --> 00:38:14,829
You should yell at them.

00:38:14,829 --> 00:38:18,170
Don't yell at me.

00:38:18,170 --> 00:38:22,089
This took me three hours to figure out the individual privileges.

00:38:22,089 --> 00:38:23,769
But this is true least privileged.

00:38:23,769 --> 00:38:27,859
This is only the permissions it needs to do its job and nothing more.

00:38:27,859 --> 00:38:31,559
This could in some way delete the code commit repository.

00:38:31,559 --> 00:38:34,180
Where which there goes all my version control.

00:38:34,180 --> 00:38:35,210
Everything is just gone.

00:38:35,210 --> 00:38:38,000
This is why you shouldn't do things like these.

00:38:38,000 --> 00:38:43,190
Some teem describe the asterisks as a spider waiting to bite you.

00:38:43,190 --> 00:38:46,640
This is more of what you should be aiming for.

00:38:46,640 --> 00:38:55,369
This is an example of do as I say, not what you see me do.

00:38:55,369 --> 00:38:58,710
You need the pipeline to be able to start a build.

00:38:58,710 --> 00:38:59,710
Passing the role.

00:38:59,710 --> 00:39:02,990
We'll get to in a moment.

00:39:02,990 --> 00:39:07,089
Oh, get to it right here, actually.

00:39:07,089 --> 00:39:09,280
So, there's a role that we use for CodeBuilds.

00:39:09,280 --> 00:39:11,580
CodeBuild uses this role to do this stuff.

00:39:11,580 --> 00:39:17,000
There's a role that pipeline uses to interact with CodeBuild and CloudFormation.

00:39:17,000 --> 00:39:23,220
And there's a second role that CloudFormation uses to execute a changeset.

00:39:23,220 --> 00:39:26,200
Some people say the mega role and give it all the permissions.

00:39:26,200 --> 00:39:29,329
And it does my DevOps stuff.

00:39:29,329 --> 00:39:34,000
That means it could clobber something else because it has permissions to.

00:39:34,000 --> 00:39:39,049
It has no way of knowing it's being used in the CloudFormation context and not in the

00:39:39,049 --> 00:39:40,160
pipeline context.

00:39:40,160 --> 00:39:47,380
Even know it is a bit difficult and it seems tedious, I would separate these roles out

00:39:47,380 --> 00:39:48,650
into separate roles.

00:39:48,650 --> 00:39:50,990
Especially this CloudFormation deployer role.

00:39:50,990 --> 00:39:53,589
Because it essentially needs administer access in order to run.

00:39:53,589 --> 00:39:59,109
Because you want to be able to give your developers to deploy anything they want.

00:39:59,109 --> 00:40:07,859
Might create a Lambda or a database EC instance or EC2 instances.

00:40:07,859 --> 00:40:11,900
You have no way of predicting thanand if you just said, you have full control for Lambda

00:40:11,900 --> 00:40:16,549
and API gateway, that was in the diagram, it can change.

00:40:16,549 --> 00:40:23,609
This is a powerful role, and you want only CloudFormation to assume it.

00:40:23,609 --> 00:40:27,480
And it's locked down in terms of what people should be doing with this role.

00:40:27,480 --> 00:40:28,550
People shouldn't be doing anything with this.

00:40:28,550 --> 00:40:32,630
It should just be CloudFormation doing this when it deploys.

00:40:32,630 --> 00:40:36,049
That's kind of a detour.

00:40:36,049 --> 00:40:37,109
But that's very important.

00:40:37,109 --> 00:40:42,069
Administer access, if those get leaked, it could be very painful.

00:40:42,069 --> 00:40:44,369
There's no way to understate that.

00:40:44,369 --> 00:40:46,349
That is very bad.

00:40:46,349 --> 00:40:50,349
And the actual I'm gonna copy this real quick and then we'll get into the pipeline.

00:40:50,349 --> 00:40:51,349
My legs are getting stiff.

00:40:51,349 --> 00:40:55,140
I'm going to try to talk faster so we can go get something to drink.

00:40:55,140 --> 00:40:59,369
Let me check on this.

00:40:59,369 --> 00:41:00,369
Okay.

00:41:00,369 --> 00:41:02,750
That was successful.

00:41:02,750 --> 00:41:03,750
Okay.

00:41:03,750 --> 00:41:08,289
So, now this is the actual pipeline itself.

00:41:08,289 --> 00:41:09,349
Pipeline policy.

00:41:09,349 --> 00:41:11,990
Why did I do that?

00:41:11,990 --> 00:41:13,039
Oh, right.

00:41:13,039 --> 00:41:16,300
This is light a depends on statement here.

00:41:16,300 --> 00:41:20,670
That just says, as we're going through this, it makes sense that this would be created

00:41:20,670 --> 00:41:21,670
afterwards.

00:41:21,670 --> 00:41:24,609
But when it's all in one big CloudFormation template, CloudFormation doesn't enforce that

00:41:24,609 --> 00:41:26,450
things be done in order.

00:41:26,450 --> 00:41:30,099
You can have all the things you need built first at the very bottom.

00:41:30,099 --> 00:41:33,039
And then all the things it depends on above it.

00:41:33,039 --> 00:41:38,170
It will create the dependency graph and figure out what depends on what based on your references.

00:41:38,170 --> 00:41:43,020
And it's possible that in this specific contest, we say use this role.

00:41:43,020 --> 00:41:47,779
But as we saw earlier, created the role, we created a policy and assigned to that policy

00:41:47,779 --> 00:41:49,200
to the role.

00:41:49,200 --> 00:41:55,089
But we also say that this pipeline is implicitly depending on the role as well.

00:41:55,089 --> 00:41:59,410
What could happen is you get a race condition where the role finishes and the pipeline tries

00:41:59,410 --> 00:42:04,970
building before the policy tries building that's attached to and it fails.

00:42:04,970 --> 00:42:05,970
No idea what happened.

00:42:05,970 --> 00:42:07,920
You click retry and it fails.

00:42:07,920 --> 00:42:12,609
You click retry, and then they click it and it passes.

00:42:12,609 --> 00:42:15,299
This person doesn't know what they're doing.

00:42:15,299 --> 00:42:19,450
They don't know how to click a mouse.

00:42:19,450 --> 00:42:21,529
It's how it works.

00:42:21,529 --> 00:42:24,299
Commenting out code and then leaving it in there, that's also a great practice that you

00:42:24,299 --> 00:42:26,250
should not copy from me.

00:42:26,250 --> 00:42:32,309
So, we say this is where the artifacts are stored that you use after each stage when

00:42:32,309 --> 00:42:34,020
it emits artifacts.

00:42:34,020 --> 00:42:35,839
Put them in the artifacts store.

00:42:35,839 --> 00:42:39,940
And & when you're starting a new stage, give artifacts from the new store.

00:42:39,940 --> 00:42:42,560
It's like the central repository for this.

00:42:42,560 --> 00:42:46,950
And then this is a fun part.

00:42:46,950 --> 00:42:51,230
So, these are all of these stages of the build which correspond to here.

00:42:51,230 --> 00:42:52,880
We've got a build.

00:42:52,880 --> 00:42:56,240
There's technically a source stage which is kind of like many if this thing here see

00:42:56,240 --> 00:42:57,240
how to make this big.

00:42:57,240 --> 00:42:58,240
There it is.

00:42:58,240 --> 00:43:01,839
If that were technically down here it would be more accurate.

00:43:01,839 --> 00:43:04,490
Like the three changes.

00:43:04,490 --> 00:43:07,940
There's the source stage, which is code commit with this name.

00:43:07,940 --> 00:43:09,900
And then the branch.

00:43:09,900 --> 00:43:14,109
Some people use develop as a common term people use like the branch they always use.

00:43:14,109 --> 00:43:17,200
And very rarely, merge into master or mainline.

00:43:17,200 --> 00:43:18,650
You can pick whatever branch you want.

00:43:18,650 --> 00:43:21,490
As you study in a moment, they will fail.

00:43:21,490 --> 00:43:25,930
When you create a new repository, there is no master branch.

00:43:25,930 --> 00:43:26,930
I don't know what's going on.

00:43:26,930 --> 00:43:28,240
First time it will fail, that's okay.

00:43:28,240 --> 00:43:32,950
This is just the name for the artifacts to use when it pulls it from this source.

00:43:32,950 --> 00:43:35,200
Which you can name it whatever you want.

00:43:35,200 --> 00:43:37,210
And what role to use for this.

00:43:37,210 --> 00:43:41,130
So, you can say that the pipeline itself has a role, which is up here.

00:43:41,130 --> 00:43:45,880
And then you could also individually say that for this stage, use this specific role.

00:43:45,880 --> 00:43:51,260
And in this context, it doesn't make much sense that they would be different.

00:43:51,260 --> 00:43:52,260
Pipeline needs to do this.

00:43:52,260 --> 00:43:55,390
And then in the stage, okay, the pine of pipeline can do this.

00:43:55,390 --> 00:44:00,140
This helps deploying things across many accounts because the pipeline needs to assume a role

00:44:00,140 --> 00:44:03,700
in the other account in order to deploy it that account.

00:44:03,700 --> 00:44:07,550
What I want the pipeline to do, when it's doing things locally in the account like CodeBuild

00:44:07,550 --> 00:44:11,090
or fetching the source, use its own role.

00:44:11,090 --> 00:44:14,029
And deploying out to other accounts, use those roles.

00:44:14,029 --> 00:44:16,380
So, it give use the granularity, but you don't need them.

00:44:16,380 --> 00:44:22,180
I can strip this all out in one account and it will still work.

00:44:22,180 --> 00:44:27,220
And the build step, referencing the build project that we createdand for these, you

00:44:27,220 --> 00:44:28,700
give them a run order.

00:44:28,700 --> 00:44:32,960
Inside of a stage, which we'll see graphically in a moment, you can specify run orders inside

00:44:32,960 --> 00:44:34,549
that stage.

00:44:34,549 --> 00:44:40,600
All these things need to run and they're not dependent on one another like explicitly.

00:44:40,600 --> 00:44:42,329
But I got to want them in the specific order.

00:44:42,329 --> 00:44:46,869
This is where I'll have one CloudFormation stack that will actually, we'll see it

00:44:46,869 --> 00:44:48,329
with the changesets.

00:44:48,329 --> 00:44:53,089
But you want to export from one stack and import from another.

00:44:53,089 --> 00:44:58,299
Use the run order to make sure that finishes before the next one starts.

00:44:58,299 --> 00:45:01,859
And then the next stage is what we're going to call deploy to test.

00:45:01,859 --> 00:45:05,369
We're going to deploy locally inside that account.

00:45:05,369 --> 00:45:08,200
And this is where we create a changeset.

00:45:08,200 --> 00:45:09,619
It's called changeset replace.

00:45:09,619 --> 00:45:14,710
But actually this one just creates the changeset., so it takes the CloudFormation template.

00:45:14,710 --> 00:45:17,740
Does a dry run deploy almost.

00:45:17,740 --> 00:45:20,450
Here's your diff and then just stops there.

00:45:20,450 --> 00:45:24,240
And then in the next step, we have deploy changeset, changeset execute.

00:45:24,240 --> 00:45:25,779
Yep, that was fine.

00:45:25,779 --> 00:45:32,020
I put these both inside of same stage on here.

00:45:32,020 --> 00:45:36,329
If you wanted to make that like a manual process which will show on the console in a moment,

00:45:36,329 --> 00:45:41,480
in between these two it where you would say, okay, this is a new stage, not just a few

00:45:41,480 --> 00:45:45,849
part of the same stage where you would add a manual approval process.

00:45:45,849 --> 00:45:57,359
The good news is, once we paste this in, we will be done with me talking about pipelines

00:45:57,359 --> 00:45:58,359
and we can see how it actually works.

00:45:58,359 --> 00:45:59,359
Oh, wait.

00:45:59,359 --> 00:46:00,359
Oh, I didn't save that one.

00:46:00,359 --> 00:46:01,359
It will be fine.

00:46:01,359 --> 00:46:04,860
So, we'll give this a moment.

00:46:04,860 --> 00:46:10,869
We'll hop into the console just to see what's created so far.

00:46:10,869 --> 00:46:24,400
It's warm up here with all these lights.

00:46:24,400 --> 00:46:27,779
Update complete.

00:46:27,779 --> 00:46:29,480
Oh.

00:46:29,480 --> 00:46:34,460
So, this is another thing you'll see is that it will say update complete because the console

00:46:34,460 --> 00:46:35,460
hasn't updated.

00:46:35,460 --> 00:46:37,779
But this is still saying it's acquitting to be updated.

00:46:37,779 --> 00:46:39,779
You're not sure who to trust.

00:46:39,779 --> 00:46:41,700
My recommendation is don't trust either one and wait another five minutes.

00:46:41,700 --> 00:46:44,610
Sometimes you trust one and the other one is right.

00:46:44,610 --> 00:46:50,700
Sometimes you trust the other one and the first run is right.

00:46:50,700 --> 00:46:52,940
So, services.

00:46:52,940 --> 00:46:57,440
Go into code pipeline.

00:46:57,440 --> 00:47:08,810
We'll see if this creates so, this is what we're creating in this changeset that we're

00:47:08,810 --> 00:47:11,970
deploying.

00:47:11,970 --> 00:47:13,650
This gets like a little bit meta, right?

00:47:13,650 --> 00:47:20,259
Because we're we have a CloudFormation template to create the entire CI/CD pipeline.

00:47:20,259 --> 00:47:23,680
But that's not controlled via its own CI/CD pipeline.

00:47:23,680 --> 00:47:26,309
It's just me running a command on my desktop.

00:47:26,309 --> 00:47:29,840
Why not just make a pipeline for that?

00:47:29,840 --> 00:47:33,210
But then the thing that makes that pipeline doesn't have a pipeline of itself.

00:47:33,210 --> 00:47:34,680
It's pipelines all the way down.

00:47:34,680 --> 00:47:40,170
At some point someone has to doing in manually unless you have a weird meta inference to

00:47:40,170 --> 00:47:41,349
figure out how to do that.

00:47:41,349 --> 00:47:47,119
I'm going to deploy the first one myself and keep that checked in like a central repository.

00:47:47,119 --> 00:47:51,200
So, this is just taking a couple more minutes.

00:47:51,200 --> 00:47:53,900
Any questions while we're waiting for this?

00:47:53,900 --> 00:48:00,079
Any questions at all like my favorite Pokemon or anything?

00:48:00,079 --> 00:48:04,670
It's Charmander.

00:48:04,670 --> 00:48:06,190
My URL for the thing?

00:48:06,190 --> 00:48:07,190
Yeah.

00:48:07,190 --> 00:48:10,239
So it is GitHub, rhboyd.

00:48:10,239 --> 00:48:11,529
Richard Henry Boyd.

00:48:11,529 --> 00:48:13,109
That's me.

00:48:13,109 --> 00:48:17,349
And then DevOpsDays Boston with the proper nouns capitalized.

00:48:17,349 --> 00:48:18,559
AUDIENCE: Thank you.

00:48:18,559 --> 00:48:20,170
RICHARD: Or just DODB.

00:48:20,170 --> 00:48:22,589
Because they're not actually proper nouns.

00:48:22,589 --> 00:48:30,200
And CloudFormation is notoriously slow.

00:48:30,200 --> 00:48:32,569
CloudFormation with Cloud fronts is even slower.

00:48:32,569 --> 00:48:33,569
A question.

00:48:33,569 --> 00:48:38,390
AUDIENCE: Might be more of a comment than a question.

00:48:38,390 --> 00:48:42,440
Talking about the admin access >> CloudFormation formation control.

00:48:42,440 --> 00:48:50,359
>> Theoretically, if I was a terrible person, I could throw a CloudFormation template through

00:48:50,359 --> 00:48:57,870
a pipeline that does bad stuff given a sufficiently malicious template.: Yes, his question was

00:48:57,870 --> 00:49:00,869
is we gave the CloudFormation role administer access.

00:49:00,869 --> 00:49:03,759
Allows you to do whatever.

00:49:03,759 --> 00:49:09,710
If he didn't get the performance review he was expecting and created a malicious CloudFormation

00:49:09,710 --> 00:49:18,690
template with EC2 instances to pine Bitcoins, it would totally work.

00:49:18,690 --> 00:49:23,970
If you drink enough of the serverless Kool Aid, you could put a deny EC2 star on there

00:49:23,970 --> 00:49:25,040
too.

00:49:25,040 --> 00:49:28,299
Because you have an explicit denial and not let someone do something like that.

00:49:28,299 --> 00:49:34,749
That's trick you because Lambda needs EC2 to create ENI permission in it's inside of

00:49:34,749 --> 00:49:36,230
EPC.

00:49:36,230 --> 00:49:37,779
It's not that cut and dry.

00:49:37,779 --> 00:49:40,859
Just like all of the IAM stuff.

00:49:40,859 --> 00:49:45,080
If you know like if you have a good idea of like how you expect your developers to

00:49:45,080 --> 00:49:48,510
write applications, you can scope that permission down.

00:49:48,510 --> 00:49:52,380
I just give it administer access for this demo just to make it easier.

00:49:52,380 --> 00:49:56,259
I do it also at work because I trust myself.

00:49:56,259 --> 00:49:57,940
The people I work with.

00:49:57,940 --> 00:50:00,859
In order to do that, it has to get into the pipeline.

00:50:00,859 --> 00:50:05,869
Which means they have to be able to commit to the repository and use like a code review

00:50:05,869 --> 00:50:06,869
system.

00:50:06,869 --> 00:50:09,180
They would have to get it past another person.

00:50:09,180 --> 00:50:12,800
They need at least one coconspirator.

00:50:12,800 --> 00:50:17,640
If someone else had a bad review too.

00:50:17,640 --> 00:50:18,640
Yes?

00:50:18,640 --> 00:50:21,529
AUDIENCE: [ Away from microphone ] >> Yes and no.

00:50:21,529 --> 00:50:23,200
They have a G UI interface.

00:50:23,200 --> 00:50:29,069
His question is, is there a GUI or console experience to build all this and then you

00:50:29,069 --> 00:50:30,131
can export the template?

00:50:30,131 --> 00:50:32,119
AWS doesn't offer that natively today.

00:50:32,119 --> 00:50:39,119
There is a guy I'll open up my Twitter and be totally professional.

00:50:39,119 --> 00:50:41,940
Someone made a thing that's very specific.

00:50:41,940 --> 00:50:43,720
This might take a minute.

00:50:43,720 --> 00:50:51,430
So, his Twitter name is Ian0036.

00:50:51,430 --> 00:50:52,960
Sound like a Russian troll booth.

00:50:52,960 --> 00:50:54,720
But he's very nice.

00:50:54,720 --> 00:50:59,579
He made a console recorder.

00:50:59,579 --> 00:51:05,910
You click around and it will tell you that it does emit the CloudFormation template and

00:51:05,910 --> 00:51:07,490
gets most of the way there.

00:51:07,490 --> 00:51:09,431
Then you get the fun stuff of cleaning up the sharp edges.

00:51:09,431 --> 00:51:13,109
AWS doesn't make that, but it is a thing that does exist.

00:51:13,109 --> 00:51:18,849
I found it it's easier to copy and paste.

00:51:18,849 --> 00:51:23,599
Here is my CloudFormation, I copy it.

00:51:23,599 --> 00:51:28,390
But since I don't trust people recording my console actions.

00:51:28,390 --> 00:51:30,369
Oh, cool.

00:51:30,369 --> 00:51:35,680
It's here, it failed which we expected because there's no branch master.

00:51:35,680 --> 00:51:38,309
Now we create our simple application.

00:51:38,309 --> 00:51:41,750
This is very quick and not related to the actual pipeline stuff.

00:51:41,750 --> 00:51:44,049
If you're here just for the pipelines, you can leave.

00:51:44,049 --> 00:51:48,079
If you want to see it actually work, you can stay.

00:51:48,079 --> 00:51:52,529
And go over to the blue screen.

00:51:52,529 --> 00:51:56,970
Do Sam init, runtime Python 3.7 name.

00:51:56,970 --> 00:52:06,980
What are we gonna name this?

00:52:06,980 --> 00:52:09,880
MaliciousApp.

00:52:09,880 --> 00:52:14,730
So, now this is just like an app that exists locally.

00:52:14,730 --> 00:52:16,999
We need to put it into that code commit repo somehow.

00:52:16,999 --> 00:52:20,289
I do get init, which initializes a repo.

00:52:20,289 --> 00:52:22,950
I keep losing my mouse.

00:52:22,950 --> 00:52:28,319
I've made this so big that I lose my mouse in the middle of it and I don't know where

00:52:28,319 --> 00:52:29,319
I'm at.

00:52:29,319 --> 00:52:32,310
You guys probably don't care about that.

00:52:32,310 --> 00:52:37,720
So, this is an empty repository that we just created.

00:52:37,720 --> 00:52:41,160
There's probably people who use Git enough to know how to do all of these things without

00:52:41,160 --> 00:52:46,529
having to check all of this stuff.

00:52:46,529 --> 00:52:50,390
I'll show you what I mean by that in one second.

00:52:50,390 --> 00:52:51,640
So, I'm gonna do Git, remote, add origin.

00:52:51,640 --> 00:52:53,309
And then the URL.

00:52:53,309 --> 00:52:55,940
That worked.

00:52:55,940 --> 00:52:58,569
Git add.

00:52:58,569 --> 00:53:07,400
Anybody else do this where every time you run a Git command you do Git status afterwards

00:53:07,400 --> 00:53:08,400
to see if it worked?

00:53:08,400 --> 00:53:09,400
Every command?

00:53:09,400 --> 00:53:10,400
Every command.

00:53:10,400 --> 00:53:15,039
I do the same thing.

00:53:15,039 --> 00:53:17,519
Very detailed Git message.

00:53:17,519 --> 00:53:19,130
First, Git push.

00:53:19,130 --> 00:53:20,130
This is gonna fail.

00:53:20,130 --> 00:53:24,109
But I like it because it tells me like what I'm the keynote, right?

00:53:24,109 --> 00:53:27,810
When he talked about I did Git push, but that command didn't work.

00:53:27,810 --> 00:53:30,549
Normally in other services they say, it didn't work.

00:53:30,549 --> 00:53:32,799
Go to StackOverflow and leave me alone.

00:53:32,799 --> 00:53:34,240
This says you probably meant this.

00:53:34,240 --> 00:53:36,240
That's exactly what I meant.

00:53:36,240 --> 00:53:37,380
Thank you.

00:53:37,380 --> 00:53:41,009
And that will push that to my repo, maybe.

00:53:41,009 --> 00:53:42,420
Cool.

00:53:42,420 --> 00:53:46,890
So, this we expected because I'm using like an IAM user.

00:53:46,890 --> 00:53:52,390
So, what I need to do is this isn't being livestreamed, right?

00:53:52,390 --> 00:53:59,099
I don't care if you guys see these because you won't be able to copy it fast enough to

00:53:59,099 --> 00:54:02,099
do anything.

00:54:02,099 --> 00:54:03,349
I'm going to delete them after the thing.

00:54:03,349 --> 00:54:05,580
I made them this morning.

00:54:05,580 --> 00:54:08,550
Hey, put your camera down.

00:54:08,550 --> 00:54:09,740
You people.

00:54:09,740 --> 00:54:10,930
[ Laughter ] Password.

00:54:10,930 --> 00:54:18,019
And like the resolution is so small you probably can't see it anyways.

00:54:18,019 --> 00:54:20,680
>> Is that a username >> No.

00:54:20,680 --> 00:54:22,079
In AWS, I didn't create it.

00:54:22,079 --> 00:54:24,009
I'll show you.

00:54:24,009 --> 00:54:27,739
So, this is gonna start the his question was, was that a username and password that

00:54:27,739 --> 00:54:28,739
I created in AWS?

00:54:28,739 --> 00:54:32,829
It was an IAM user they created, but AWS created the username and password.

00:54:32,829 --> 00:54:33,829
I'll show that.

00:54:33,829 --> 00:54:34,829
The build process is going to take about ten minutes or so.

00:54:34,829 --> 00:54:35,829
Aisle show you how I did that.

00:54:35,829 --> 00:54:37,339
What I did in the background.

00:54:37,339 --> 00:54:38,819
The Internet is a bit slow.

00:54:38,819 --> 00:54:41,589
So, we will in parallel check on both of these pipelines.

00:54:41,589 --> 00:54:43,210
This is very slow.

00:54:43,210 --> 00:54:44,210
Okay.

00:54:44,210 --> 00:54:47,559
While we wait for that.

00:54:47,559 --> 00:54:53,019
Oh, no.

00:54:53,019 --> 00:55:03,940
What did that do?

00:55:03,940 --> 00:55:09,400
Oh, cool.

00:55:09,400 --> 00:55:13,640
So, it was able to pick it up, right?

00:55:13,640 --> 00:55:16,599
It saw it was on the master which is the default branch.

00:55:16,599 --> 00:55:19,190
And then it's doing the build process now.

00:55:19,190 --> 00:55:23,079
We'll let this run because it takes a while to set it up the first time.

00:55:23,079 --> 00:55:28,650
But I will go into IAM.

00:55:28,650 --> 00:55:32,999
And I'm going to go over an example of when I said like the prerequisites for the workshop.

00:55:32,999 --> 00:55:34,990
You need to create an IAM user with these Git credentials.

00:55:34,990 --> 00:55:37,880
All the way up here at the top.

00:55:37,880 --> 00:55:40,099
Just real quickly walk through how that's done.

00:55:40,099 --> 00:55:44,220
If you're doing this at work, you probably wouldn't do something like this.

00:55:44,220 --> 00:55:47,589
Maybe the company has a policy, maybe the person who creates the policy for how this

00:55:47,589 --> 00:55:51,990
stuff is gone If you are that person, don't make the company do this.

00:55:51,990 --> 00:55:55,359
See me and I will show you how to do this in production for real.

00:55:55,359 --> 00:56:01,970
If this is a hobby, this is the easiest way to do it.

00:56:01,970 --> 00:56:07,049
You can create a user in CloudFormation if you want to and some of your base tags.

00:56:07,049 --> 00:56:09,460
Add a user.

00:56:09,460 --> 00:56:11,869
My malicious user.

00:56:11,869 --> 00:56:21,150
I don't know why it's still saying it's required.

00:56:21,150 --> 00:56:24,180
Programmatic access.

00:56:24,180 --> 00:56:25,180
This is strange.

00:56:25,180 --> 00:56:26,779
That shouldn't happen.

00:56:26,779 --> 00:56:28,710
Maybe you can't name it malicious user.

00:56:28,710 --> 00:56:29,989
I don't know.

00:56:29,989 --> 00:56:31,309
[ Laughter ] It wouldn't surprise me.

00:56:31,309 --> 00:56:34,069
I was in the AWS forums a few weeks ago.

00:56:34,069 --> 00:56:38,190
And, you know, Google just created the .dev domain names.

00:56:38,190 --> 00:56:41,329
I got one obviously because everyone who is cool gets one.

00:56:41,329 --> 00:56:43,970
Someone did the Richard one.

00:56:43,970 --> 00:56:50,180
They did the pricing where it was like a thousand dollars, I waited for it to get really cheap

00:56:50,180 --> 00:56:51,180
and bought it.

00:56:51,180 --> 00:56:53,450
But someone who was willing to spend more bought my name.

00:56:53,450 --> 00:57:02,279
But I use the .dev for my email.

00:57:02,279 --> 00:57:04,180
Richard@rboyd.dev.

00:57:04,180 --> 00:57:07,970
I have an AWS account with that.

00:57:07,970 --> 00:57:14,489
But I did totally not WernerVogels@Amazon.com and it totally worked.

00:57:14,489 --> 00:57:20,130
So, their naming preferences are hit and miss, I guess.

00:57:20,130 --> 00:57:23,319
I want to attach a policy is CodeCommit.

00:57:23,319 --> 00:57:25,279
Full access.

00:57:25,279 --> 00:57:28,339
I think power user might work too.

00:57:28,339 --> 00:57:31,229
But create user.

00:57:31,229 --> 00:57:38,630
Normally you would add tags, like finance and tracking and stuff like that.

00:57:38,630 --> 00:57:40,999
But just for demo, don't do that.

00:57:40,999 --> 00:57:42,920
Check on the pipeline.

00:57:42,920 --> 00:57:45,569
This will probably have failed for some random nope.

00:57:45,569 --> 00:57:48,849
It's still running.

00:57:48,849 --> 00:57:57,690
So, these are like the regular, like, access key secret keys which we're not going to do

00:57:57,690 --> 00:57:59,730
anything with right now.

00:57:59,730 --> 00:58:04,650
Normally you need those to do like programmatic access.

00:58:04,650 --> 00:58:06,460
For this you go into security credentials.

00:58:06,460 --> 00:58:10,269
And at the bottom, generate Git credentials.

00:58:10,269 --> 00:58:13,619
And then it will create this username and the password.

00:58:13,619 --> 00:58:16,579
I mean, you can see it.

00:58:16,579 --> 00:58:19,910
Worst case someone pushing something to this repo during the demo and it breaks and I'm

00:58:19,910 --> 00:58:22,769
very upset with you and you have disappointed me a lot.

00:58:22,769 --> 00:58:24,420
This is what I copy and pasted in.

00:58:24,420 --> 00:58:28,339
But I just did the download credentials and close this.

00:58:28,339 --> 00:58:34,010
And this is the IAM user they used for this demo if you wanted to produce that.

00:58:34,010 --> 00:58:35,010
It succeeded.

00:58:35,010 --> 00:58:38,339
it's like the build output you expect.

00:58:38,339 --> 00:58:44,599
This is the in CodeBuild, this is the command that you had listed and the output.

00:58:44,599 --> 00:58:48,970
We see prebuild, build, PIP install.

00:58:48,970 --> 00:58:57,190
I'm sorry if I'm make you nauseous by scrolling really fast.

00:58:57,190 --> 00:58:59,420
I ran a test, it passed.

00:58:59,420 --> 00:59:03,769
The test that came with it, asserts that the default template work.

00:59:03,769 --> 00:59:06,470
Inserts the container.

00:59:06,470 --> 00:59:10,619
To do the build, updated it.

00:59:10,619 --> 00:59:15,190
And go back to our pipeline.

00:59:15,190 --> 00:59:17,040
Oh, no, someone disabled this.

00:59:17,040 --> 00:59:22,499
No, no, that's just so, we're thinking of like when the Internet is slow, it doesn't

00:59:22,499 --> 00:59:24,819
update as quickly.

00:59:24,819 --> 00:59:28,299
So, here is where it created a changeset.

00:59:28,299 --> 00:59:29,930
And that succeeded.

00:59:29,930 --> 00:59:31,769
And now it's deploying the changeset.

00:59:31,769 --> 00:59:34,120
Which we can open this up.

00:59:34,120 --> 00:59:38,319
This is the part I was talking about where you would create a new stage, right?

00:59:38,319 --> 00:59:41,579
Like each of these big blue blocks here is like a stage.

00:59:41,579 --> 00:59:45,710
And you would separate these into separate stages with a manual approval step in the

00:59:45,710 --> 00:59:46,710
middle.

00:59:46,710 --> 00:59:50,180
You could deploy to here.

00:59:50,180 --> 00:59:55,650
It does a dry run of the deploy and a person has to go in and manually proof it.

00:59:55,650 --> 01:00:01,210
This might prevent your malicious attacker scenario where somebody from security or Ops

01:00:01,210 --> 01:00:08,049
has to approve it so you need a third co conspirator to help get this through.

01:00:08,049 --> 01:00:11,989
pipeline.

01:00:11,989 --> 01:00:20,032
My app, this is a big update.

01:00:20,032 --> 01:00:22,559
So, this is actually done, but it's still spinning.

01:00:22,559 --> 01:00:25,359
And this is our actual application.

01:00:25,359 --> 01:00:32,130
Because I'm zoomed in so far, it's a bit hard to read.

01:00:32,130 --> 01:00:35,510
But we have A API Gateway.

01:00:35,510 --> 01:00:37,611
So, the application I said like the initial.

01:00:37,611 --> 01:00:40,869
The initial template we created is just a Lambda function.

01:00:40,869 --> 01:00:41,869
And it's created.

01:00:41,869 --> 01:00:43,671
And we can test it.

01:00:43,671 --> 01:00:47,450
it should just say hello world.

01:00:47,450 --> 01:00:50,470
Maybe.

01:00:50,470 --> 01:00:52,249
It's really fast.

01:00:52,249 --> 01:00:55,259
I swear.

01:00:55,259 --> 01:00:57,140
And it succeeded.

01:00:57,140 --> 01:01:03,700
You can go in and make the code changes you would normally do and whatever the development

01:01:03,700 --> 01:01:08,039
cycle it and Git push and it will deploy it.

01:01:08,039 --> 01:01:13,050
You have like a full CI/CD process from every time they push, it builds.

01:01:13,050 --> 01:01:16,519
There's no more of this manually moving files around.

01:01:16,519 --> 01:01:19,400
And we're at like 4:40.

01:01:19,400 --> 01:01:22,450
An hour, hour and ten minutes.

01:01:22,450 --> 01:01:26,960
I loved your suit yet yesterday.

01:01:26,960 --> 01:01:32,230
I think this one's good today too.

01:01:32,230 --> 01:01:33,789
But you might have a question.

01:01:33,789 --> 01:01:34,789
But I had a comment.

01:01:34,789 --> 01:01:36,019
Someone over here started to raise their hand.

01:01:36,019 --> 01:01:37,700
You did, yes.

01:01:37,700 --> 01:01:45,849
AUDIENCE: It seems like this process is [ Away from microphone ]

01:01:45,849 --> 01:01:49,369
>> So, the actual like when they check in it, goes through the build process, it can

01:01:49,369 --> 01:01:50,369
be a bit slow.

01:01:50,369 --> 01:01:51,440
10 minutes or so.

01:01:51,440 --> 01:01:56,069
9 minutes and 58 seconds longer than a developer's attention span.

01:01:56,069 --> 01:01:59,529
There are tools for like developing locally.

01:01:59,529 --> 01:02:01,619
You can mock out most of this stuff.

01:02:01,619 --> 01:02:08,099
If it was just a Lambda function, API Gateway, the serverless application model allows a

01:02:08,099 --> 01:02:09,729
local API Gateway.

01:02:09,729 --> 01:02:17,289
To do Git push when you're ready for a code review to push it to the developer branch

01:02:17,289 --> 01:02:19,410
and go home for the night.

01:02:19,410 --> 01:02:23,220
Or create the code review to submit it.

01:02:23,220 --> 01:02:25,589
And then it would do the build as part of your code review process.

01:02:25,589 --> 01:02:31,640
AUDIENCE: You have to parallel things like >> Yeah.

01:02:31,640 --> 01:02:34,759
That's something you could add in like the build step.

01:02:34,759 --> 01:02:35,759
If you wanted that.

01:02:35,759 --> 01:02:36,759
Just to ensure.

01:02:36,759 --> 01:02:38,989
They're in the build spec file that I had.

01:02:38,989 --> 01:02:40,369
Oh, sorry.

01:02:40,369 --> 01:02:41,369
Okay.

01:02:41,369 --> 01:02:42,369
Yeah.

01:02:42,369 --> 01:02:45,200
I said I was done.

01:02:45,200 --> 01:02:46,279
And he came over here.

01:02:46,279 --> 01:02:47,279
And I was just kidding.

01:02:47,279 --> 01:02:48,279
I'm not done.

01:02:48,279 --> 01:02:49,279
Now he's mad at me.

01:02:49,279 --> 01:02:54,509
I won't be invited back next year.

01:02:54,509 --> 01:02:58,489
You would do that right around the build or the pre build stage.

01:02:58,489 --> 01:03:02,549
You would have like a static code analysis thing done there.

01:03:02,549 --> 01:03:05,880
What I described earlier where on main line there's the build that happens.

01:03:05,880 --> 01:03:10,460
And then if someone commits to like a feature branch, you can specify a different build

01:03:10,460 --> 01:03:11,460
specuse.

01:03:11,460 --> 01:03:14,849
You're not going to do static analysis on every test build that you do.

01:03:14,849 --> 01:03:20,430
So, you could have like your own version of like the build spec that you would use for

01:03:20,430 --> 01:03:21,920
your like rapid iteration process.

01:03:21,920 --> 01:03:25,140
And you can pull this container locally like in the CodeBuild documentation.

01:03:25,140 --> 01:03:32,839
It show use how to pull most of the CodeBuild service locally and you can run it in Docker.

01:03:32,839 --> 01:03:36,989
If it passes on your machine, it will pass in CodeBuild.

01:03:36,989 --> 01:03:37,989
That's real quick.

01:03:37,989 --> 01:03:40,279
That's a Docker image on your machine.

01:03:40,279 --> 01:03:45,039
The question was, I should have repeated it earlier, I apologize.

01:03:45,039 --> 01:03:48,989
How do you this process is a bit slow to get through the entire pipeline.

01:03:48,989 --> 01:03:49,989
Takes 10 minutes.

01:03:49,989 --> 01:03:55,900
The ones I use in production are about an hour to get from commit to prod.

01:03:55,900 --> 01:03:58,769
Developers aren't going to wait an hour to see if something breaks.

01:03:58,769 --> 01:04:02,650
There are tools for that.

01:04:02,650 --> 01:04:06,170
Once they are done with their local development, whatever that entails and they're ready to

01:04:06,170 --> 01:04:10,890
push it and we can ensure that everything is done correctly.

01:04:10,890 --> 01:04:14,200
One last question and then I got to go.

01:04:14,200 --> 01:04:18,749
AUDIENCE: Is there >> Can you repeat the question too?

01:04:18,749 --> 01:04:19,749
>> Yes.

01:04:19,749 --> 01:04:21,740
Is there a framework for testing Lambda locally?

01:04:21,740 --> 01:04:27,900
There is depending on your test strategy, there's SAM local invoke.

01:04:27,900 --> 01:04:33,079
Which allows you to test you can specify an event object and pass that in as if it

01:04:33,079 --> 01:04:37,599
were the service, API Gateway or events.

01:04:37,599 --> 01:04:40,910
Do assertions on that.

01:04:40,910 --> 01:04:44,589
Because it's written in Python, I use pytest.

01:04:44,589 --> 01:04:48,619
And they can use jest.

01:04:48,619 --> 01:04:53,640
Any they would test another JavaScript or Lambda application.

01:04:53,640 --> 01:04:59,380

YouTube URL: https://www.youtube.com/watch?v=HTWQZoyAa38


