Title: DevOpsDays Boston 2019 - Containerizing legacy applications by Andrew Kirkpatrick
Publication date: 2019-10-11
Playlist: DevOpsDays Boston 2019
Description: 
	Containerizing legacy applications with dynamic file-based configurations and secrets by Andrew Kirkpatrick

Most applications nowadays are designed with containers in mind, or older projects are updated to be run within them. But what if you donâ€™t have the time, resources or the authority to modify your applications?

Additionally, with service discovery, secure secrets management and dynamic secrets rotation now becoming commonplace, what is the easiest way to utilize these in an application without modifying how it handles configuration or polls for changes?

There are a few ways to facilitate this, from simple ConfigMaps to cross-container volume mounts with config-watchers to using Consul Template with Consul and Vault. It depends how quickly you want to get started and how complex your use-case is!

#DevOpsDays #DevOpsDaysBoston
Captions: 
	00:00:16,900 --> 00:00:17,900
Hello.

00:00:17,900 --> 00:00:19,270
Can everyone hear me?

00:00:19,270 --> 00:00:20,270
Okay.

00:00:20,270 --> 00:00:21,700
So, just to get everything started.

00:00:21,700 --> 00:00:25,680
How many people here have what they consider to be a legacy application at their place

00:00:25,680 --> 00:00:26,680
of work?

00:00:26,680 --> 00:00:28,200
That's why we're all here, right?

00:00:28,200 --> 00:00:31,570
That's our day job, to keep all of this stuff running.

00:00:31,570 --> 00:00:37,440
So, for all those people who have got these evil nasty legacy applications to look after,

00:00:37,440 --> 00:00:42,880
how many people don't have the original authors of that code still employed at their workplace?

00:00:42,880 --> 00:00:43,880
All right.

00:00:43,880 --> 00:00:49,470
And the worst one of all, out of those applications which nobody in your company really understands

00:00:49,470 --> 00:00:55,330
how they work, do you actually have the automation or provisioning tooling to rebuild the infrastructure

00:00:55,330 --> 00:00:56,850
that it's on?

00:00:56,850 --> 00:00:58,090
Okay.

00:00:58,090 --> 00:01:02,820
So, hopefully everyone is in not too bad of a state.

00:01:02,820 --> 00:01:03,820
We have at least a couple.

00:01:03,820 --> 00:01:06,650
If they went down, maybe won't be out of a job.

00:01:06,650 --> 00:01:13,080
So, why would anyone want to migrate their application into containers without rewriting

00:01:13,080 --> 00:01:14,689
the code itself?

00:01:14,689 --> 00:01:19,720
A lot of people try to take approach of, well, we have tens, hundreds of thousands of engineers.

00:01:19,720 --> 00:01:23,910
Let's just throw them at the problem, get this containerized.

00:01:23,910 --> 00:01:28,820
And start rewriting core pieces of our code that then people start to question whether

00:01:28,820 --> 00:01:32,330
that was a valid thing to do, safe thing to do.

00:01:32,330 --> 00:01:34,630
There's a lot of reasons why you wouldn't want to do it, right?

00:01:34,630 --> 00:01:36,070
There's a lot of risk in it.

00:01:36,070 --> 00:01:38,960
Engineers always look for the new, shiny thing.

00:01:38,960 --> 00:01:43,170
Let's jump on microservices, employee all the newest technology that everyone forgets

00:01:43,170 --> 00:01:45,990
about and becomes legacy in a couple of years.

00:01:45,990 --> 00:01:52,820
This repeats and you have a bunch of codebases that people are a little cautious about touching,

00:01:52,820 --> 00:01:56,680
how it's configured, how it's set up, how it runs.

00:01:56,680 --> 00:01:59,140
So, a lot of people want to touch that.

00:01:59,140 --> 00:02:02,950
And you get this I'm just gonna leave it because it's going to work.

00:02:02,950 --> 00:02:09,420
And it's going to bite someone in the ass, right if and they don't to want invest in

00:02:09,420 --> 00:02:15,069
legacy because of the often high cost, how do we figure out how we're getting this wrong

00:02:15,069 --> 00:02:18,390
to the magical wonderland of, say, Kubernetes.

00:02:18,390 --> 00:02:25,659
So, if I want to go on a really pretty fast tour, of let's find an application, run through

00:02:25,659 --> 00:02:28,670
it step by step and how to containerize it.

00:02:28,670 --> 00:02:36,840
What I will focus on primarily is how to handle configuration, and the styles of configuration,

00:02:36,840 --> 00:02:37,840
file configuration.

00:02:37,840 --> 00:02:40,150
There's things you need to address with legacy application.

00:02:40,150 --> 00:02:41,150
This is just one of them.

00:02:41,150 --> 00:02:44,450
This is by no means an exhaustive thing.

00:02:44,450 --> 00:02:50,189
But it's a step through saying we as a DevOps community have invested a lot of time and

00:02:50,189 --> 00:02:55,519
we are good at sharing how we can develop tools and techniques to get around certain

00:02:55,519 --> 00:02:57,669
problems in a fairly basic way.

00:02:57,669 --> 00:03:03,060
I want to illustrate with this talk, we can use a combination of the wonderful things

00:03:03,060 --> 00:03:06,629
that we use and take for granted on a day to day basis to make our lives better across

00:03:06,629 --> 00:03:09,590
the board, not just new approaches.

00:03:09,590 --> 00:03:10,690
And highlight a couple things at the end.

00:03:10,690 --> 00:03:13,459
One of the things that's going to go wrong in the live demo, almost certain.

00:03:13,459 --> 00:03:23,379
And one of the things that caught me out on the plane when I didn't have connectivity.

00:03:23,379 --> 00:03:25,299
Let's find a legacy application.

00:03:25,299 --> 00:03:28,720
I started my career as a PHP developer.

00:03:28,720 --> 00:03:30,639
Something very close to my heart.

00:03:30,639 --> 00:03:35,930
Actually, that's not true, I was a cold fusion developer and then a Flash developer.

00:03:35,930 --> 00:03:37,489
So, you get it.

00:03:37,489 --> 00:03:42,849
And we need something that's pre containerization.

00:03:42,849 --> 00:03:47,469
Where you would put it on a single server in most cases.

00:03:47,469 --> 00:03:52,319
Most don't assume of shared services, multiple web servers.

00:03:52,319 --> 00:04:03,579
And a lot of them rely on files from filesystem configuration, when they were not safe or

00:04:03,579 --> 00:04:05,620
controllable.

00:04:05,620 --> 00:04:13,060
And hopefully if I can find one, no container organization.

00:04:13,060 --> 00:04:16,870
There are a lot of applications that have had them.

00:04:16,870 --> 00:04:18,579
So, WordPress.

00:04:18,579 --> 00:04:21,989
Everyone loves WordPress, right?

00:04:21,989 --> 00:04:28,620
The favorite thing people quote on the development PHP.

00:04:28,620 --> 00:04:30,080
That's been done.

00:04:30,080 --> 00:04:33,389
I want to pick something a little older.

00:04:33,389 --> 00:04:35,300
So, phpBB.

00:04:35,300 --> 00:04:40,889
One of the softwares, Internet, stuff on the Internet.

00:04:40,889 --> 00:04:42,150
But that's been done.

00:04:42,150 --> 00:04:48,919
So, I went to look for a mitt more of an obscure software that's largely untouched.

00:04:48,919 --> 00:04:51,930
Relies on a couple configuration files.

00:04:51,930 --> 00:04:58,960
This is an example of how I have configuration how it connects to fundamental services like

00:04:58,960 --> 00:05:00,900
the database, and runtime.

00:05:00,900 --> 00:05:03,889
And I will touch on that.

00:05:03,889 --> 00:05:05,930
This is what I'm talking about.

00:05:05,930 --> 00:05:08,590
Applications where people didn't you went what file implementations.

00:05:08,590 --> 00:05:10,560
That was when I started my career.

00:05:10,560 --> 00:05:13,090
I had no idea what these three numbers meant.

00:05:13,090 --> 00:05:16,240
Nor do a lot of people who have written applications.

00:05:16,240 --> 00:05:21,069
But we need to understand what we're dealing with her.

00:05:21,069 --> 00:05:25,580
Another key thing to bear in mind is a lot of these applications are still in use.

00:05:25,580 --> 00:05:31,410
Just because the codebase is old, doesn't mean people aren't using and maintaining them.

00:05:31,410 --> 00:05:38,320
It was easy to forget when people talking like Angular and React frontends and the latest

00:05:38,320 --> 00:05:41,199
Go, Python, Rust backends.

00:05:41,199 --> 00:05:44,500
But a lot of them were developed 10, 15, 20 years ago.

00:05:44,500 --> 00:05:51,699
You get the point, there's a lot of applications

00:05:51,699 --> 00:06:00,900
that were written in the hot thing at a time, but this is to deploy.

00:06:00,900 --> 00:06:06,080
This codebase is essentially 14 years old.

00:06:06,080 --> 00:06:08,949
And still in use by a lot of popular forums.

00:06:08,949 --> 00:06:12,120
Ford versus Chevy forum is I believe one of the oldest.

00:06:12,120 --> 00:06:16,939
Founded in 1999 on Ultimate Bulletin Board.

00:06:16,939 --> 00:06:19,870
Might be at some point in the mid 2000s.

00:06:19,870 --> 00:06:21,490
Posting about American cars.

00:06:21,490 --> 00:06:22,969
I'm European, half Asian.

00:06:22,969 --> 00:06:27,479
What are we going to do?

00:06:27,479 --> 00:06:31,170
And the majority of the configurations are in two files.

00:06:31,170 --> 00:06:36,389
Config.PHP is set up in the configuration wizard or by the developer in screens that

00:06:36,389 --> 00:06:40,469
don't change in the runtime of the application.

00:06:40,469 --> 00:06:45,620
Settings.PHP is an application which is expected to run on a serve we are a single file system

00:06:45,620 --> 00:06:50,270
so, it will write changes back to the file and expect them to read them directory back.

00:06:50,270 --> 00:06:56,050
Which we knows as a load balancer, has implications.

00:06:56,050 --> 00:06:59,620
This is not JSON or I mean, YAML or XML.

00:06:59,620 --> 00:07:04,860
We need to run configurations.

00:07:04,860 --> 00:07:10,749
Back then, it was quicker to write configuration as PHP, PHP data structure.

00:07:10,749 --> 00:07:12,210
Which causes issues for some tooling.

00:07:12,210 --> 00:07:16,770
But there's plenty of ways around this stuff.

00:07:16,770 --> 00:07:19,409
In this one, we have database configuration strings.

00:07:19,409 --> 00:07:22,270
Where is the admin directory?

00:07:22,270 --> 00:07:25,620
Administers, things like that.

00:07:25,620 --> 00:07:26,620
Basic settings.

00:07:26,620 --> 00:07:28,620
When the application comes up, where do I post and read from?

00:07:28,620 --> 00:07:29,620
Where is this?

00:07:29,620 --> 00:07:30,620
Where is that?

00:07:30,620 --> 00:07:37,860
Without it, application is and the settings.PHP, which is more of a problem because this is

00:07:37,860 --> 00:07:42,189
stuff that can and will change based on settings that the app may change.

00:07:42,189 --> 00:07:43,910
If it's in maintenance mode or not.

00:07:43,910 --> 00:07:46,210
Things that happened pre bootstrap.

00:07:46,210 --> 00:07:53,550
A lot of things in the bath days, but a lot of things read out of the file.

00:07:53,550 --> 00:07:59,990
But if you make the changes, which in a container, I suppose is problematic.

00:07:59,990 --> 00:08:03,069
So, let's just see what this thing looks like.

00:08:03,069 --> 00:08:07,020
Is it as awful as I am making it out to be?

00:08:07,020 --> 00:08:08,020
Probably.

00:08:08,020 --> 00:08:11,099
As a lot of software had, has a wizard how to configure it.

00:08:11,099 --> 00:08:14,909
I'm running with a web server.

00:08:14,909 --> 00:08:17,650
Using a database for simplicity.

00:08:17,650 --> 00:08:23,949
And configuring my user name, what it's called, what the board is called.

00:08:23,949 --> 00:08:29,449
Generates off of PHP settings.PHP, and you have a bulletin board.

00:08:29,449 --> 00:08:30,530
What are we proving here?

00:08:30,530 --> 00:08:31,530
Nothing.

00:08:31,530 --> 00:08:34,140
I've proven this work on my laptop.

00:08:34,140 --> 00:08:38,779
It's the demo that people show at conferences like this sometimes.

00:08:38,779 --> 00:08:41,279
Let's go a bit deeper.

00:08:41,279 --> 00:08:46,260
So, I'm gonna run an application in a container.

00:08:46,260 --> 00:08:49,710
Let's start making some steps, right?

00:08:49,710 --> 00:08:54,070
So, a lot of tutorials will make basic assumptions about what you're trying to do.

00:08:54,070 --> 00:08:56,450
IE, the most bare basic minimum.

00:08:56,450 --> 00:09:00,660
For a lot of us, it's not applicable to the applications that we need to maintain and

00:09:00,660 --> 00:09:01,900
run actually work.

00:09:01,900 --> 00:09:05,620
So, I would say configure this and it doesn't have Memcache support.

00:09:05,620 --> 00:09:11,290
A lot of people don't care about it anymore, which isn't really true.

00:09:11,290 --> 00:09:17,070
The actual container image that I'm building this off has a mechanism to install certain

00:09:17,070 --> 00:09:18,070
extensions.

00:09:18,070 --> 00:09:26,920
Installing MySQL support, and I'm going to have to custom compile for Memcache.

00:09:26,920 --> 00:09:30,200
And this can be messy and convoluted.

00:09:30,200 --> 00:09:39,310
You end up with a big Docker file and start introducing a lot of layers.

00:09:39,310 --> 00:09:41,230
One way it is to use multi stage bakes.

00:09:41,230 --> 00:09:48,590
You have a base image and add additional on top of that.

00:09:48,590 --> 00:09:51,520
Why not just use community images?

00:09:51,520 --> 00:09:53,790
There's a lot of reasons.

00:09:53,790 --> 00:09:54,870
I hate Alpine.

00:09:54,870 --> 00:09:59,440
[ Laughter ] People, why do you hate Alpine.

00:09:59,440 --> 00:10:01,390
I don't know.

00:10:01,390 --> 00:10:04,850
Eventually news came out that you know.

00:10:04,850 --> 00:10:06,610
There's a lot of issues also.

00:10:06,610 --> 00:10:10,170
We used Oracle's Java images at our work.

00:10:10,170 --> 00:10:13,530
Which magically disappeared one day because of licensing disagreements.

00:10:13,530 --> 00:10:20,610
So, yeah, had to switch to open JDK ones.

00:10:20,610 --> 00:10:24,190
And if you rely on community based containers and container images, you don't necessarily

00:10:24,190 --> 00:10:26,010
know if they're going to be there or not.

00:10:26,010 --> 00:10:29,230
They can go away at any time.

00:10:29,230 --> 00:10:33,340
Assuming you're using a lot of provisional tools, there are a lot of container images

00:10:33,340 --> 00:10:38,420
that you have with basic caveats.

00:10:38,420 --> 00:10:43,650
We used Ansible, identical, like or like images in Docker.

00:10:43,650 --> 00:10:49,030
And there's a lot of different things, depend on what you're trying to do.

00:10:49,030 --> 00:10:54,510
So, another theming to consider with some of the stuff is additional environment configurations.

00:10:54,510 --> 00:10:58,940
So, a lot of modern stuff is expected to run a single process that relies on a single set

00:10:58,940 --> 00:11:06,760
of configuration for a single thing.

00:11:06,760 --> 00:11:09,000
And others from elsewhere.

00:11:09,000 --> 00:11:14,250
Python developers, photo, what you're trying to talk to in AWS land, potentially from different

00:11:14,250 --> 00:11:18,641
places and you may be caught out where it sits in the image, where it's expecting it

00:11:18,641 --> 00:11:20,130
to come from.

00:11:20,130 --> 00:11:24,110
There's things like that you have to consider.

00:11:24,110 --> 00:11:26,310
So, enough talk.

00:11:26,310 --> 00:11:27,730
Let's run in a container.

00:11:27,730 --> 00:11:33,520
So, by and large, this looks like exactly what I just showed you, okay?

00:11:33,520 --> 00:11:34,920
Not really anything particularly exciting.

00:11:34,920 --> 00:11:38,090
It's just running the same thing using a PHP image.

00:11:38,090 --> 00:11:40,730
They were using a few basic things.

00:11:40,730 --> 00:11:43,170
So, what have we done this time?

00:11:43,170 --> 00:11:44,430
It's a single container.

00:11:44,430 --> 00:11:52,240
It's doing it in the SQLite database, and I'm baking into the image which is terrible

00:11:52,240 --> 00:11:54,460
for a bunch of reasons.

00:11:54,460 --> 00:12:00,140
And any changes to the PHP while it's running is going to be lost.

00:12:00,140 --> 00:12:05,290
I need to retain administration changes to that while it's up.

00:12:05,290 --> 00:12:09,170
So, one solution to that is start looking into solutions like Docker Compose.

00:12:09,170 --> 00:12:12,500
Run on multiple containers.

00:12:12,500 --> 00:12:16,750
Let's use that to run, say, a database.

00:12:16,750 --> 00:12:19,440
So, if we bring this up.

00:12:19,440 --> 00:12:26,010
And I'm gonna have one instance, and the container has PHP in it, & a MySQL container.

00:12:26,010 --> 00:12:28,040
Pretty good workflow.

00:12:28,040 --> 00:12:32,790
Try to edit as quickly as possible.

00:12:32,790 --> 00:12:34,830
Hopefully that worked.

00:12:34,830 --> 00:12:36,210
And there you go.

00:12:36,210 --> 00:12:38,360
You can see logs coming from a couple containers.

00:12:38,360 --> 00:12:42,740
Some from a MySQL container, some from the MyBB container.

00:12:42,740 --> 00:12:43,930
Still works.

00:12:43,930 --> 00:12:44,930
Still good.

00:12:44,930 --> 00:12:50,690
Now I have proper separation in the database, assuming you're not running MySQL in the container.

00:12:50,690 --> 00:12:54,120
You have it on the backend.

00:12:54,120 --> 00:12:55,700
So, steps.

00:12:55,700 --> 00:12:59,550
That's more representative what have you have when using Cloud SQL, IDS, something like

00:12:59,550 --> 00:13:00,650
that.

00:13:00,650 --> 00:13:07,930
I'm volume mounting directly into the container and linking it back into other places.

00:13:07,930 --> 00:13:12,100
In theory, I've got configuration emphasis, but this is still limited to my laptop.

00:13:12,100 --> 00:13:15,820
It is limited to the host, which is problematic.

00:13:15,820 --> 00:13:18,670
And I have only one instance of MyBB.

00:13:18,670 --> 00:13:20,740
If that falls down, it goes down.

00:13:20,740 --> 00:13:23,830
It's a terrible situation on the Internet.

00:13:23,830 --> 00:13:26,790
Terrible situation.

00:13:26,790 --> 00:13:28,500
Need to load balance it.

00:13:28,500 --> 00:13:31,710
I need more than one replica of that container running at a time.

00:13:31,710 --> 00:13:35,070
So, it always has it on the Internet.

00:13:35,070 --> 00:13:39,490
So, there's a bunch of different container orchestrators.

00:13:39,490 --> 00:13:42,430
Docker Swarm is what I'm going to next.

00:13:42,430 --> 00:13:45,740
Kubernetes is one of the standards.

00:13:45,740 --> 00:13:48,880
We use Hashicorp Nomad in my work place.

00:13:48,880 --> 00:13:55,090
There's a lot of times to help us depending on your workflow.

00:13:55,090 --> 00:13:59,970
So, Docker Compose to multiple machines.

00:13:59,970 --> 00:14:09,170
Let's do than we're going to run that and bring up three replicas out of MyBB, and one

00:14:09,170 --> 00:14:10,860
MySQL instance which is populated.

00:14:10,860 --> 00:14:19,370
And eventually, MySQL come up, and bulletin board.

00:14:19,370 --> 00:14:23,460
Looking better, right if we're getting closer to what we're looking at.

00:14:23,460 --> 00:14:26,200
It works in the fundamental state.

00:14:26,200 --> 00:14:30,700
Theoretically I could add nodes to the swarm and I would have this running across multiple

00:14:30,700 --> 00:14:31,700
machines.

00:14:31,700 --> 00:14:34,450
But we still have problems.

00:14:34,450 --> 00:14:36,200
Still isn't going to work.

00:14:36,200 --> 00:14:39,420
I'm injecting configuration via swarm.

00:14:39,420 --> 00:14:41,960
But what's going to happen to settings.PHP.

00:14:41,960 --> 00:14:45,180
I don't have something shared across multiple nodes.

00:14:45,180 --> 00:14:47,500
It's still tied to the host.

00:14:47,500 --> 00:14:50,160
I need some kind of network storage.

00:14:50,160 --> 00:14:55,250
I can specify CPU network limits so I don't overload anything on the node.

00:14:55,250 --> 00:14:57,490
I have more control what's happening.

00:14:57,490 --> 00:15:01,720
I can run this on multiple applications on swarm.

00:15:01,720 --> 00:15:04,200
But there's issues like network, segregation, things like that.

00:15:04,200 --> 00:15:05,290
I need something more advanced.

00:15:05,290 --> 00:15:09,530
A little more battle tested.

00:15:09,530 --> 00:15:14,090
So, let's try to deploy something using templated configuration.

00:15:14,090 --> 00:15:21,370
At the moment, what I have done, here is the configuration file with the file in it, and

00:15:21,370 --> 00:15:23,910
I can get it to one place only.

00:15:23,910 --> 00:15:26,660
I need someplace to help me do that.

00:15:26,660 --> 00:15:32,250
Dev, production, I need different credentials, different hosts, say where the database is,

00:15:32,250 --> 00:15:35,620
things like that.

00:15:35,620 --> 00:15:39,450
A lot of guys overlook how you handle the con fission ration.

00:15:39,450 --> 00:15:44,990
But a lot of the orchestrators have a tried and tested way to do this.

00:15:44,990 --> 00:15:46,960
The example is Kubernetes.

00:15:46,960 --> 00:15:49,600
Everyone has heard of.

00:15:49,600 --> 00:15:50,600
Ah.

00:15:50,600 --> 00:15:51,600
So, ConfigMaps.

00:15:51,600 --> 00:15:54,230
Probably the simplest way.

00:15:54,230 --> 00:15:56,000
Inject in a file based format.

00:15:56,000 --> 00:16:01,390
In this case, I'm passing it in as a data structure in manifest.

00:16:01,390 --> 00:16:02,680
You can link them as files.

00:16:02,680 --> 00:16:03,830
But it looks something like this.

00:16:03,830 --> 00:16:07,340
It looks kind of familiar to what we're doing.

00:16:07,340 --> 00:16:09,930
So, let's deploy this in Kubernetes.

00:16:09,930 --> 00:16:13,760
Essentially, we're doing like for like at this moment.

00:16:13,760 --> 00:16:15,970
Three replicas of MyBB, the database.

00:16:15,970 --> 00:16:22,940
And we have the control, and you can see multiple colors, which obviously proves that these

00:16:22,940 --> 00:16:25,300
are multiple things, right?

00:16:25,300 --> 00:16:26,300
Looks fancy.

00:16:26,300 --> 00:16:28,540
This guy must know what he's talking about.

00:16:28,540 --> 00:16:29,540
Hopefully.

00:16:29,540 --> 00:16:30,900
It all works, it's all functional.

00:16:30,900 --> 00:16:33,540
You can see things tailing in from different places.

00:16:33,540 --> 00:16:36,970
So, we're kind of getting somewhere.

00:16:36,970 --> 00:16:40,400
It's the same as Docker swarm.

00:16:40,400 --> 00:16:43,010
Using volumes to handle stuff.

00:16:43,010 --> 00:16:44,290
So, yeah.

00:16:44,290 --> 00:16:47,480
I forget where I am.

00:16:47,480 --> 00:16:48,480
Templating.

00:16:48,480 --> 00:16:54,780
As I kind of touched on at the moment, injecting for the values.

00:16:54,780 --> 00:16:59,810
But I need the values to change when I essentially apply the manifest to Kubernetes.

00:16:59,810 --> 00:17:04,470
I need to render them out using something beforehand to change the values on the fly.

00:17:04,470 --> 00:17:06,839
Lots of different ways to do this.

00:17:06,839 --> 00:17:08,940
A lot of people use custom tooling to do this.

00:17:08,940 --> 00:17:15,650
There are a bunch of different things like, for example, helm, customize, Capitan, JSON,

00:17:15,650 --> 00:17:17,949
comprehending on your orchestrator.

00:17:17,949 --> 00:17:23,150
There's different ways depending on your setup.

00:17:23,150 --> 00:17:28,990
A lot of things to make your life easier, and JSON, we use that in the current place.

00:17:28,990 --> 00:17:30,240
It's pretty flexible.

00:17:30,240 --> 00:17:33,700
It's as generic as you can get.

00:17:33,700 --> 00:17:36,030
Helm is probably one of the most well known ones.

00:17:36,030 --> 00:17:39,500
Has a lot of drawbacks, it's for Kubernetes.

00:17:39,500 --> 00:17:41,340
And typically works as a model.

00:17:41,340 --> 00:17:43,730
But you can render it.

00:17:43,730 --> 00:17:47,560
You can use it as a render step in the pipeline.

00:17:47,560 --> 00:17:51,790
Don't need tiller installed necessarily.

00:17:51,790 --> 00:17:55,640
It's best suited for the community, but you can use it for your own purposes.

00:17:55,640 --> 00:18:01,750
Alternatively, as I said with settings.PHP, this is at runtime.

00:18:01,750 --> 00:18:04,660
I need to assist the changes so they're across replicas.

00:18:04,660 --> 00:18:12,310
The easiest way is to use some kind of I use Kubernetes volumes for this.

00:18:12,310 --> 00:18:19,970
And I store it in there and it will be essentially read and written to at runtime.

00:18:19,970 --> 00:18:22,000
So, let's do that.

00:18:22,000 --> 00:18:26,690
For all intents and purposes, this is going to look pretty similar to what we've done.

00:18:26,690 --> 00:18:31,860
But the difference is here so, instead of using caching which is problematic, we're

00:18:31,860 --> 00:18:34,520
going to use Memcache.

00:18:34,520 --> 00:18:39,390
And use MySQL, Memcache, and community based stuff.

00:18:39,390 --> 00:18:40,990
You can and can't do.

00:18:40,990 --> 00:18:45,670
Realistically, you'll use services through your cloud provider to do this.

00:18:45,670 --> 00:18:46,850
For different stuff.

00:18:46,850 --> 00:18:50,370
And you see that it looks largely quite familiar.

00:18:50,370 --> 00:18:52,540
Eventually this will reload.

00:18:52,540 --> 00:18:54,160
There we go.

00:18:54,160 --> 00:18:57,390
So, same kind of thing, same kind of containers running.

00:18:57,390 --> 00:19:01,640
Templated configuration, I can now deploy this to more than one place.

00:19:01,640 --> 00:19:05,180
With relative ease, just by using template overrides in Helm.

00:19:05,180 --> 00:19:10,640
You can see the configuration.

00:19:10,640 --> 00:19:14,310
Instead of two files, I'm putting in a volume in one file.

00:19:14,310 --> 00:19:16,070
That is then shared.

00:19:16,070 --> 00:19:21,020
And if it finds it missing at runtime, some of your applications won't.

00:19:21,020 --> 00:19:25,880
You need to look into containers or a way to pre populate that if it's expected to be

00:19:25,880 --> 00:19:26,960
there.

00:19:26,960 --> 00:19:29,850
It depends on the application.

00:19:29,850 --> 00:19:31,490
And config.PHP does not change.

00:19:31,490 --> 00:19:43,680
But the key thing here is you can see is I'm using values in the Helm template to pro populate

00:19:43,680 --> 00:19:51,110
where is the database.

00:19:51,110 --> 00:19:55,080
In theory, I can replicate what I have shown you across multiple pages.

00:19:55,080 --> 00:20:00,520
Which is, again, getting closer to getting the state that we want.

00:20:00,520 --> 00:20:04,350
And to get the system volume claim, you have the shared storage.

00:20:04,350 --> 00:20:10,280
As I indicated later on, this has its own drawbacks because some orchestrators don't

00:20:10,280 --> 00:20:13,340
work the same on all the paths.

00:20:13,340 --> 00:20:17,900
Also nothing is keep in mind.

00:20:17,900 --> 00:20:23,130
So, what everyone I'm hoping actually came here to see, after this long ramble that I

00:20:23,130 --> 00:20:28,920
got around to, let's generate some stuff that changes on the fly.

00:20:28,920 --> 00:20:33,170
One of the biggest problems with ConfigMaps and you don't update consistently when you

00:20:33,170 --> 00:20:35,030
make changes to them.

00:20:35,030 --> 00:20:40,809
You can make changes, and apply back to the cluster and change when Kubernetes cease fit.

00:20:40,809 --> 00:20:45,760
Usually when you expect, not always.

00:20:45,760 --> 00:20:49,290
This pull request has been open for a long time now.

00:20:49,290 --> 00:20:50,810
Three and a half years.

00:20:50,810 --> 00:20:54,730
But they believe it is essentially in your interest, the operator or the developer to

00:20:54,730 --> 00:20:56,150
figure out how to handle this.

00:20:56,150 --> 00:20:59,450
They don't believe it is Kubernetes' responsibility to handle this.

00:20:59,450 --> 00:21:03,730
Which is fine for the most part, but be aware Which other operations do we have for generating

00:21:03,730 --> 00:21:08,970
configurations on the fly?

00:21:08,970 --> 00:21:13,710
Console template is one I'm going to touch on.

00:21:13,710 --> 00:21:18,800
Service mesh, it has a key value store in the same way that Vault has a key value store.

00:21:18,800 --> 00:21:22,080
And you can pre populate in a template.

00:21:22,080 --> 00:21:26,290
Instead of at deploy time, it's at runtime.

00:21:26,290 --> 00:21:31,170
I can talk to Consul and Vault and pull values into the templated on changes there.

00:21:31,170 --> 00:21:41,059
And it will have a change there, watch the changes, and restart the process, reload configuration,

00:21:41,059 --> 00:21:44,770
depending on which what signal you want to send on the fly.

00:21:44,770 --> 00:21:52,410
It's built in for Consul, run it as an entry point, as a side car.

00:21:52,410 --> 00:21:58,370
There's a lot of ways you can use it depending on your server.

00:21:58,370 --> 00:22:05,830
Run it there, and alongside deploying MySQL and Memcache, use the community charts.

00:22:05,830 --> 00:22:12,250
I'm going to get single node Consul cluster and single node Vault cluster.

00:22:12,250 --> 00:22:18,340
And the only different is instead of the values injected into the Helm template which renders

00:22:18,340 --> 00:22:25,610
the Kubernetes manifest which I apply to run MyBB, I'm going to use Consul template and

00:22:25,610 --> 00:22:29,140
say, okay, I want you to run in exec.

00:22:29,140 --> 00:22:32,290
I want you to run Apache after you have run the template.

00:22:32,290 --> 00:22:37,640
I want you to restart Apache in the way they told you to if you detect any changes to the

00:22:37,640 --> 00:22:42,000
key value pairs in the template I'm trying to render.

00:22:42,000 --> 00:22:49,950
For example, if I change Apache settings, any settings specific to MyBB, it will be

00:22:49,950 --> 00:22:51,190
restarted on the fly.

00:22:51,190 --> 00:22:56,470
I will show you in what might be a disastrous live demo in a second.

00:22:56,470 --> 00:23:02,610
But we have jumped from you read a point when you want to see configuration changes to anyone

00:23:02,610 --> 00:23:04,690
updating on the fly.

00:23:04,690 --> 00:23:12,640
For example, if you want to do the promotion, from A to B. Scenarios where you want to do

00:23:12,640 --> 00:23:14,840
canary deployments in traffic.

00:23:14,840 --> 00:23:17,800
And changing is dangerous.

00:23:17,800 --> 00:23:21,170
You get to the point you can do that for an application that's otherwise not ready to

00:23:21,170 --> 00:23:22,860
do it in the first place.

00:23:22,860 --> 00:23:28,030
It's expecting someone to SSH on to the server, and hack around.

00:23:28,030 --> 00:23:31,940
You can kind of replicate that process using the tools to do that.

00:23:31,940 --> 00:23:35,370
So, you'll see here, this is how Consul looks.

00:23:35,370 --> 00:23:38,120
And how the scroll looks.

00:23:38,120 --> 00:23:43,060
And you can see some of the values in the Helm template are in here.

00:23:43,060 --> 00:23:51,170
Like, that is the accordion, or Q name for cache as deployed by the chart.

00:23:51,170 --> 00:23:53,820
And Vault is where I'm storing the database password.

00:23:53,820 --> 00:23:59,640
So, secrets, I'll touch on in a second.

00:23:59,640 --> 00:24:01,950
And using nothing is store the secrets.

00:24:01,950 --> 00:24:06,520
I don't want them to be in the container.

00:24:06,520 --> 00:24:08,910
You'll see here, my super secure password.

00:24:08,910 --> 00:24:14,260
But I'm storing it there in a way that it's encrypted.

00:24:14,260 --> 00:24:18,810
Need it in a container to talk to Vault to say, I am this application.

00:24:18,810 --> 00:24:19,820
I would like this database.

00:24:19,820 --> 00:24:20,820
Okay.

00:24:20,820 --> 00:24:21,820
I trust you.

00:24:21,820 --> 00:24:23,320
I have been told to trust you.

00:24:23,320 --> 00:24:24,320
Let's go get it.

00:24:24,320 --> 00:24:27,630
So, what are the things here?

00:24:27,630 --> 00:24:34,520
So, you can see on the right, Consul Template is essentially just replacing those values.

00:24:34,520 --> 00:24:36,200
Different terminology, but essentially the same.

00:24:36,200 --> 00:24:39,270
Just fetching them from a different place.

00:24:39,270 --> 00:24:43,600
Looks like this, definitely familiar for anyone that's used a kd.ui.

00:24:43,600 --> 00:24:46,840
And secrets management is a bunch of solution.

00:24:46,840 --> 00:24:48,920
I'm going to touch on Vault.

00:24:48,920 --> 00:24:50,420
That's what I'm most familiar with.

00:24:50,420 --> 00:24:56,530
The secrets are not particularly secret.

00:24:56,530 --> 00:24:57,530
Trouble.

00:24:57,530 --> 00:24:59,100
So, let's use Vault.

00:24:59,100 --> 00:25:02,809
Let's use something that's fairly safe in the enterprise.

00:25:02,809 --> 00:25:04,670
Has its own issues.

00:25:04,670 --> 00:25:08,030
But what I want to show you is the database secrets engine.

00:25:08,030 --> 00:25:14,429
If you can get into that, you can get the password.

00:25:14,429 --> 00:25:19,300
Why not rotate that on the fly?

00:25:19,300 --> 00:25:24,830
The database secrets in Vault was use a master set of credentials.

00:25:24,830 --> 00:25:31,570
There's upcoming changes to, and create short lived lease credentials.

00:25:31,570 --> 00:25:37,410
So... jeez.

00:25:37,410 --> 00:25:40,330
Good.

00:25:40,330 --> 00:25:54,950
[ Laughter ] I hate my life.

00:25:54,950 --> 00:25:59,470
I knew it.

00:25:59,470 --> 00:26:01,980
I know what's happening here.

00:26:01,980 --> 00:26:03,970
And it's something I'll talk about in a bit.

00:26:03,970 --> 00:26:06,450
But let's try to show you something that works.

00:26:06,450 --> 00:26:11,520
So, instead of actually throwing the secrets in there, I'm using the secrets engine will

00:26:11,520 --> 00:26:16,600
essentially lease for two to three minutes a set of credentials that they will use to

00:26:16,600 --> 00:26:18,390
access the database.

00:26:18,390 --> 00:26:25,140
At which point they determine that the secrets need to be rotated.

00:26:25,140 --> 00:26:30,090
If they are at 2.5 minutes, I need to get more.

00:26:30,090 --> 00:26:32,350
And that's one way to use the mechanism.

00:26:32,350 --> 00:26:36,160
And, no, it's compromised, don't need it anymore.

00:26:36,160 --> 00:26:41,220
And try to communicate to the vault and the vault says to more.

00:26:41,220 --> 00:26:47,980
And if anyone gets a hold of the considerables, you have a limited time window.

00:26:47,980 --> 00:26:51,270
You can run it on a code replica basis.

00:26:51,270 --> 00:26:56,760
And so, you can really associate what considerables to use, where they were used and exactly what

00:26:56,760 --> 00:26:59,100
point in time.

00:26:59,100 --> 00:27:05,480
Hopefully this is started back up.

00:27:05,480 --> 00:27:06,550
Nope.

00:27:06,550 --> 00:27:07,610
Anyway.

00:27:07,610 --> 00:27:11,460
So, it should look something like this.

00:27:11,460 --> 00:27:17,230
So, essentially instead of using MyBB as the default selection in the wizard, it will lease

00:27:17,230 --> 00:27:26,380
you a credentials that specific to Kubernetes, specific to that.

00:27:26,380 --> 00:27:31,010
And to that pod for a short amount of time.

00:27:31,010 --> 00:27:34,890
You have an application that was never, ever designed to have that happen.

00:27:34,890 --> 00:27:39,450
You know, if you set a password, that's it for life, make that happen.

00:27:39,450 --> 00:27:42,540
And you can change it in a year.

00:27:42,540 --> 00:27:47,660
Now you have credentials that rotate automatically for an application without environment variables,

00:27:47,660 --> 00:27:50,230
was never containerized, never written to be.

00:27:50,230 --> 00:27:53,010
But it's now reasonably secure and best practice.

00:27:53,010 --> 00:27:58,450
And the Consul template is the glue that holds that together.

00:27:58,450 --> 00:28:08,890
Depending on the setup, you might be so, this is kind of demonstrating what I want to show

00:28:08,890 --> 00:28:09,890
you.

00:28:09,890 --> 00:28:10,890
Those credentials will change over time.

00:28:10,890 --> 00:28:13,770
And if you try to get into the database, it will change.

00:28:13,770 --> 00:28:23,090
Oh, quickly, super quickly, go over the things to catch you up.

00:28:23,090 --> 00:28:26,510
If we have containerized Java, experimental JVM options, the amount of memory allocates

00:28:26,510 --> 00:28:28,679
to the heap.

00:28:28,679 --> 00:28:32,790
It's more than available, so, it will crash.

00:28:32,790 --> 00:28:37,860
You have to think that some applications are built to assume they're running on a VM.

00:28:37,860 --> 00:28:41,580
And if they're running in a container, may not behave as you expect.

00:28:41,580 --> 00:28:46,320
Process ID forking may not work as you expect.

00:28:46,320 --> 00:28:48,030
It looks for the entry point by default.

00:28:48,030 --> 00:28:51,030
If your application forks a lot, how is that cleaned up?

00:28:51,030 --> 00:28:55,030
Will you have zombies in the container and will it not terminate because of this?

00:28:55,030 --> 00:28:56,280
Possible.

00:28:56,280 --> 00:29:01,380
And restart splay, pretty that's what crashed the demo.

00:29:01,380 --> 00:29:10,810
If you have 10 seconds to restart, there's a fair chance they will all restart at the

00:29:10,810 --> 00:29:13,810
same time.

00:29:13,810 --> 00:29:20,600
Or if we have going to trigger the restart, that needs to be longer that the probability

00:29:20,600 --> 00:29:24,730
of all containers restarting at the same time is not the same.

00:29:24,730 --> 00:29:28,880
And storage inconsistencies, with some of these things, assuming that it's a hard drive

00:29:28,880 --> 00:29:35,580
bolted into the server or NFS, whatever, bear in mind that some of these storage things

00:29:35,580 --> 00:29:37,600
cannot work as expected.

00:29:37,600 --> 00:29:39,370
May not work as expected.

00:29:39,370 --> 00:29:42,130
Just some of these thing those bear in mind that you may run into issues if you have a

00:29:42,130 --> 00:29:45,679
lot of disk IO, for example.

00:29:45,679 --> 00:29:51,950
So, a leg say application, ran it in a container, redeployed using a stat you can configuration

00:29:51,950 --> 00:29:54,190
and got it to run in dynamic configuration.

00:29:54,190 --> 00:29:57,710
And a few top tips.

00:29:57,710 --> 00:29:59,430
Hopefully that wasn't too fast.

00:29:59,430 --> 00:30:01,300
Hopefully I don't speak too fast.

00:30:01,300 --> 00:30:02,300
But that's it.

00:30:02,300 --> 00:30:04,790

YouTube URL: https://www.youtube.com/watch?v=SRfQCVaJWm8


