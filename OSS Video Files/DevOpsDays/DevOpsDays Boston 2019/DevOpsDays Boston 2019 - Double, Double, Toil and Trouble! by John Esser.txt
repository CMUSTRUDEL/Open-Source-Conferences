Title: DevOpsDays Boston 2019 - Double, Double, Toil and Trouble! by John Esser
Publication date: 2019-10-11
Playlist: DevOpsDays Boston 2019
Description: 
	Double, Double, Toil and Trouble! Top SRE Practices for DevOps by John Esser

Site Reliability Engineering (SRE) originated at Google as a discipline and set of practices to operationalize and scale its services. An SRE values, skills, and approaches does not reflect the typical SysAdmin role so making the shift to SRE is a challenge and a transformation in and of itself. Having built an SRE organization from the ground up, I will outline how to morph an existing operations group to an SRE discipline, the typical challenges of doing so, explain the top SRE practices (e.g. eliminate toil) teams can and should adopt to scale their services, and the mindset needed to effectively work with the developers in the organization. SRE is not operations as usual!

#DevOpsDays #DevOpsDaysBoston
Captions: 
	00:00:21,660 --> 00:00:34,650
This 

00:00:34,650 --> 00:01:04,600
is if I Ministers DevOpsDays Boston.

00:01:04,600 --> 00:01:10,170
But as was mentioned, I was able to attend the first DevOpsDays in Santa Clara in the

00:01:10,170 --> 00:01:11,720
US.

00:01:11,720 --> 00:01:18,460
The first one was held in Ghent wherever Belgium, yes, thank you.

00:01:18,460 --> 00:01:22,460
But, you know, it's just amazing.

00:01:22,460 --> 00:01:27,660
Every time I speak, I say what, you know, is this your first time at an event like this?

00:01:27,660 --> 00:01:31,660
DevOpsDays, DevOpsDays Enterprise Summit, whatever it is.

00:01:31,660 --> 00:01:37,770
And, you know, consistently at least 50% of the hands go up.

00:01:37,770 --> 00:01:41,300
And we're we're ten years into this.

00:01:41,300 --> 00:01:45,330
You know, from that first DevOpsDays conference, I'm going a little off track here, but from

00:01:45,330 --> 00:01:51,770
that first conference, we're about ten years in and it's just amazing how this continues

00:01:51,770 --> 00:01:52,770
to grow.

00:01:52,770 --> 00:01:56,750
A lot of times I think for folks like me that have been in this a long time, we feel like

00:01:56,750 --> 00:01:58,880
this is getting kind of old.

00:01:58,880 --> 00:02:02,470
We feel like maybe we're in an echo chamber sometimes.

00:02:02,470 --> 00:02:09,890
But really we're really just kind of still what I'd call the early majority, right?

00:02:09,890 --> 00:02:11,030
In this whole movement.

00:02:11,030 --> 00:02:14,320
And it continues to change the organizations.

00:02:14,320 --> 00:02:21,000
So, today I'm gonna talk about really probably one of the kind of one of the next early

00:02:21,000 --> 00:02:24,170
kind of adoption within the DevOps community.

00:02:24,170 --> 00:02:27,970
Twos about SRE or site reliability engineering.

00:02:27,970 --> 00:02:31,070
And just a word about my company.

00:02:31,070 --> 00:02:34,470
Veracity Solutions, we're a tech consulting firm.

00:02:34,470 --> 00:02:38,540
Companies come us to when they're transforming, when they want to change.

00:02:38,540 --> 00:02:39,900
Visual transforming.

00:02:39,900 --> 00:02:42,560
That's the buzzword today.

00:02:42,560 --> 00:02:47,570
We help with high speed application development.

00:02:47,570 --> 00:02:53,670
All those things that are going to help a company really what we call abridge this fourth

00:02:53,670 --> 00:02:59,420
industrial revolution that we are currently experiencing.

00:02:59,420 --> 00:03:02,780
You know, just I alluded to my DevOps journey.

00:03:02,780 --> 00:03:09,170
This is just some of the things that over the years I have been involved with.

00:03:09,170 --> 00:03:20,600
I became involved really with continuous delivery.I listened to Jez Humble speak about continuous

00:03:20,600 --> 00:03:21,600
delivery.

00:03:21,600 --> 00:03:23,160
The book was not published yet.

00:03:23,160 --> 00:03:28,410
But that's what I need at the time I worked for Ancestry.com.

00:03:28,410 --> 00:03:33,010
And we began a rapid adoption of continuous delivery.

00:03:33,010 --> 00:03:40,470
Then DevOps came around and, you know, a lot of cool things, you know, from that.

00:03:40,470 --> 00:03:46,900
One of the most within my career and on this journey is I was able to start a conference

00:03:46,900 --> 00:03:51,280
with Jez, with Gene Kim and others called Flow Con.

00:03:51,280 --> 00:03:57,900
That was two years, and absorbed into the DevOps Enterprise Summit that's a month and

00:03:57,900 --> 00:03:59,140
a half in Vegas.

00:03:59,140 --> 00:04:02,670
Hope to see some of you there.

00:04:02,670 --> 00:04:06,110
Just an awesome experience over the years.

00:04:06,110 --> 00:04:11,870
And DevOps, I've seen it change organizations.

00:04:11,870 --> 00:04:22,240
I've seen it, right, change not only the organization itself, but the people, the satisfaction

00:04:22,240 --> 00:04:24,210
the satisfaction with work.

00:04:24,210 --> 00:04:25,210
What they're producing.

00:04:25,210 --> 00:04:28,020
And so, it's really an amazing thing.

00:04:28,020 --> 00:04:29,020
Okay?

00:04:29,020 --> 00:04:31,020
So, let's get on to the SRE.

00:04:31,020 --> 00:04:32,350
Just a little bit of history.

00:04:32,350 --> 00:04:41,220
Real quick, how many of you are maybe SREs or trying to do SRE or this is, you know,

00:04:41,220 --> 00:04:43,430
just some real practical okay.

00:04:43,430 --> 00:04:44,530
Just really a few.

00:04:44,530 --> 00:04:47,280
So, that's pretty consistent.

00:04:47,280 --> 00:04:50,730
And really SRE has been around a long time.

00:04:50,730 --> 00:04:56,790
It's just that we're kind of starting to become aware of it really through a lot through the

00:04:56,790 --> 00:04:57,790
DevOps.

00:04:57,790 --> 00:04:59,700
But it was really created in 2003.

00:04:59,700 --> 00:05:06,160
Much, much before DevOps by a guy named Ben Treynor at Google.

00:05:06,160 --> 00:05:11,410
He was tasked with managing the Google site.

00:05:11,410 --> 00:05:12,720
And his job was, right?

00:05:12,720 --> 00:05:14,920
Make this make the Google site run.

00:05:14,920 --> 00:05:15,920
Make it scale.

00:05:15,920 --> 00:05:18,120
You know, all of that.

00:05:18,120 --> 00:05:19,600
Make it reliable.

00:05:19,600 --> 00:05:24,470
And so, over time they put together a lot of practices that they ended up calling site

00:05:24,470 --> 00:05:26,190
reliability engineering.

00:05:26,190 --> 00:05:32,120
What I think was kind of a seminal time in this movement was in this period of about

00:05:32,120 --> 00:05:38,730
2007 to 2015 a gentleman tamed Tom Limoncelli wrote a couple of books.

00:05:38,730 --> 00:05:44,970
But really the one that I find really representative of site reliability engineering concepts and

00:05:44,970 --> 00:05:50,330
practices is this called practice of cloud system administration.

00:05:50,330 --> 00:05:58,370
And I, you know, in my 10 years as a leader of data center operations, cloud operations,

00:05:58,370 --> 00:06:05,230
et cetera, this is the book they hand my Ops folks is, please read this, please understand

00:06:05,230 --> 00:06:06,230
this.

00:06:06,230 --> 00:06:09,090
It's a foundational text.

00:06:09,090 --> 00:06:15,949
But as far as the public awareness about SRE, it really came through Netflix, okay?

00:06:15,949 --> 00:06:21,550
It was at Netflix began to come out with its rapid release, its, you know, open source

00:06:21,550 --> 00:06:23,639
projects, et cetera.

00:06:23,639 --> 00:06:29,669
Is really where we started to hear a lot about site reliability engineering as far as in

00:06:29,669 --> 00:06:30,760
the public space.

00:06:30,760 --> 00:06:34,210
They would, you know, start to talk about it at conferences, et cetera.

00:06:34,210 --> 00:06:36,180
So, that's kind of the history.

00:06:36,180 --> 00:06:38,560
So, it's been around a long time.

00:06:38,560 --> 00:06:44,830
But as you see, very few people are doing it yet.

00:06:44,830 --> 00:06:49,300
The standard text I mentioned, if you want to really, you know, kind of this is what

00:06:49,300 --> 00:06:55,550
I call like the canonical SRE, you know, set, the practice of cloud system administration,

00:06:55,550 --> 00:06:57,070
the Phoenix Project, right?

00:06:57,070 --> 00:07:00,250
Hopefully everybody in this room has read that.

00:07:00,250 --> 00:07:04,870
If not, you really need to change your behavior, right?

00:07:04,870 --> 00:07:08,729
[ Laughter ] No, I mean, the Phoenix Project is such a

00:07:08,729 --> 00:07:15,120
great, you know, business fable, right?

00:07:15,120 --> 00:07:17,100
It illustrates a lot of the concepts.

00:07:17,100 --> 00:07:21,970
But, you know, that we go through in come to this function and things.

00:07:21,970 --> 00:07:26,920
And then also, additionally, site reliability engineering and the site reliability notebook.

00:07:26,920 --> 00:07:27,920
Newer texts.

00:07:27,920 --> 00:07:33,530
In fact, you can get the SRE book online for free at this URL.

00:07:33,530 --> 00:07:35,170
Okay.

00:07:35,170 --> 00:07:40,640
First, what I really want to talk about here really is principles.

00:07:40,640 --> 00:07:42,180
Okay?

00:07:42,180 --> 00:07:48,780
And the first thing I'll say is, if we think that we're going to implement site reliability

00:07:48,780 --> 00:07:56,090
engineering like Google does, or even like Netflix, you know, that's that's probably

00:07:56,090 --> 00:07:57,670
not going to happen, okay?

00:07:57,670 --> 00:08:04,790
So, really what I've tried to do here is distill the SRE practice down to some key principles.

00:08:04,790 --> 00:08:11,180
Because I feel if we you said the principles, then we can adapt and implement those as it

00:08:11,180 --> 00:08:14,030
makes sense within our own organizations.

00:08:14,030 --> 00:08:18,009
We're not going to have the same resources and the same ability, right?

00:08:18,009 --> 00:08:22,990
To do things as those companies, you know, in our organization.

00:08:22,990 --> 00:08:24,600
That was certainly the case in mine.

00:08:24,600 --> 00:08:30,979
But by understanding these key principles, we can make them work.

00:08:30,979 --> 00:08:33,039
In our own organizations.

00:08:33,039 --> 00:08:37,139
This is what I call the canonical or the standard SRE model.

00:08:37,139 --> 00:08:42,810
And the reason that I think this is important is there was a whole philosophy behind, you

00:08:42,810 --> 00:08:44,490
know, the SRE mindset.

00:08:44,490 --> 00:08:50,520
And it wasn't just about, oh, let's call them site reliability it wasn't just a naming

00:08:50,520 --> 00:08:51,550
thing.

00:08:51,550 --> 00:08:55,100
Let's take Ops people and call them SREs, right?

00:08:55,100 --> 00:09:00,619
No, it was about scalability, all those things.

00:09:00,619 --> 00:09:08,459
But the real thing was a mindset that Google had.

00:09:08,459 --> 00:09:18,430
And also Netflix had which said the SRE really is about taking operational ownership of a

00:09:18,430 --> 00:09:20,850
product or a service, okay?

00:09:20,850 --> 00:09:24,589
And taking that ownership under certain conditions.

00:09:24,589 --> 00:09:27,670
And those conditions were conditions of quality.

00:09:27,670 --> 00:09:32,759
So, what they said was, we will manage the service.

00:09:32,759 --> 00:09:36,249
We will take care of it in operations.

00:09:36,249 --> 00:09:41,019
Under the condition that development, that you will give us quality code.

00:09:41,019 --> 00:09:44,720
That you will give us quality service to manage.

00:09:44,720 --> 00:09:48,019
And if you do that, then we'll take that burden from you.

00:09:48,019 --> 00:09:49,019
Okay?

00:09:49,019 --> 00:09:54,970
So, they interfaced, if you will, between that classical operation and the development

00:09:54,970 --> 00:09:55,970
group, right?

00:09:55,970 --> 00:09:59,480
Took buffer, if you will, the development team from operational task.

00:09:59,480 --> 00:10:02,040
But under certain conditions.

00:10:02,040 --> 00:10:07,300
And you'll see that a little later when I talk about what's called the operational handback.

00:10:07,300 --> 00:10:09,560
Or the production readiness review.

00:10:09,560 --> 00:10:11,889
You'll see kind of what's going on there.

00:10:11,889 --> 00:10:16,559
But it's a key point because many times how many of you in operations have felt the

00:10:16,559 --> 00:10:22,490
victim of what development is producing and you're just forced to take it?

00:10:22,490 --> 00:10:23,490
Right?

00:10:23,490 --> 00:10:24,490
Yes.

00:10:24,490 --> 00:10:27,370
I think, you know, it's a very common thing.

00:10:27,370 --> 00:10:30,889
But that wasn't at least that wasn't the ideal, right?

00:10:30,889 --> 00:10:34,429
Within the Google and Netflix implementations.

00:10:34,429 --> 00:10:35,429
Okay.

00:10:35,429 --> 00:10:37,779
So, let's go on.

00:10:37,779 --> 00:10:43,800
So, practice or principle number one, one of the fundamental is you've really got to

00:10:43,800 --> 00:10:46,290
re orient towards a software engineering mindset.

00:10:46,290 --> 00:10:54,410
SREs, they don't necessarily I mean, at Google, honestly, or at Netflix, they hired

00:10:54,410 --> 00:10:55,999
software developers.

00:10:55,999 --> 00:10:57,139
That was their criteria.

00:10:57,139 --> 00:11:03,509
They would not, you know, that was just an SRE was the developer.

00:11:03,509 --> 00:11:05,279
That's not completely practical.

00:11:05,279 --> 00:11:08,470
That's not practical for where I have been working.

00:11:08,470 --> 00:11:13,660
Even at Ancestry.com which is a pretty sizable organization, not really practical.

00:11:13,660 --> 00:11:17,970
However, it does set a principle in that there is a skill.

00:11:17,970 --> 00:11:21,309
There is a mindset that needs to be developed, right?

00:11:21,309 --> 00:11:30,110
What we try to do is mix some software development skill in with classical, you know, sys admin

00:11:30,110 --> 00:11:32,209
operational abilities.

00:11:32,209 --> 00:11:38,839
But the point here is that you need to begin to speak the language of the developer in

00:11:38,839 --> 00:11:44,209
order to get really a good understanding of what's going on in the system.

00:11:44,209 --> 00:11:46,499
You're not gonna code that, they're not going to expect you code that.

00:11:46,499 --> 00:11:52,399
But just what is going on, typical architectural patterns, right?

00:11:52,399 --> 00:11:54,459
Are very important.

00:11:54,459 --> 00:11:58,689
So that creating that skill and that awareness.

00:11:58,689 --> 00:12:05,079
Secondly, and this is kind of what my talk the title of my talk keyed off of was this

00:12:05,079 --> 00:12:06,689
idea of toil.

00:12:06,689 --> 00:12:12,069
And, you know, toil is this, you know, it's just this drudgery, right?

00:12:12,069 --> 00:12:16,179
It's this work that you do over and over, repetitive, no real value add.

00:12:16,179 --> 00:12:25,170
I mean, it's value add, but it's just the idea is that it's repetitive and really what

00:12:25,170 --> 00:12:31,949
you're looking for is you need to eliminate that what's called toil through automation.

00:12:31,949 --> 00:12:36,639
And so, this is where the engineering, if you will, skill comes in is how do we take

00:12:36,639 --> 00:12:45,519
this toil and then transform it into put automation around it and build automation

00:12:45,519 --> 00:12:49,680
and reduce that repetitive work, right?

00:12:49,680 --> 00:12:58,619
So, the reason that's so important is because one of the fundamental ideas of SRE is to

00:12:58,619 --> 00:13:02,509
limit what's called the operational load or the toil load to 50%.

00:13:02,509 --> 00:13:09,249
So, if you've got an SRE engineer, only half of his time should be spent doing, you know,

00:13:09,249 --> 00:13:16,429
that kind of manual work that, you know, managing systems and that.

00:13:16,429 --> 00:13:21,360
The other half of their time needs to be spent eliminating toil.

00:13:21,360 --> 00:13:24,240
Which means automating.

00:13:24,240 --> 00:13:31,480
Writing code and doing that type of work.

00:13:31,480 --> 00:13:38,660
The key idea within SRE is that if that toil load gets over that 50% threshold, you are

00:13:38,660 --> 00:13:46,259
now in what's called this kind of engineering bankruptcy you're on the way to kind of

00:13:46,259 --> 00:13:50,239
a bankrupt state where you really can't keep up.

00:13:50,239 --> 00:13:59,249
The idea, too, is that with SRE practices that you will be able to scale sub linearly.

00:13:59,249 --> 00:14:05,160
In other words, that as your the number of your servers and your infrastructure and

00:14:05,160 --> 00:14:12,859
your application grows, that you won't have to scale your people linearly, right?

00:14:12,859 --> 00:14:16,410
Like if I double my servers, do I have to double the number of people?

00:14:16,410 --> 00:14:20,449
That would be considered a failure from an SRE mindset.

00:14:20,449 --> 00:14:23,230
I want to be able to scale 10x, right?

00:14:23,230 --> 00:14:27,620
With just an incremental growth in people.

00:14:27,620 --> 00:14:37,230
So, you have to keep the toil manageable so that you have capacity to continue to improve.

00:14:37,230 --> 00:14:39,040
Okay.

00:14:39,040 --> 00:14:45,790
The other one which this was something that I didn't, you know, understand until really

00:14:45,790 --> 00:14:51,079
later in some SRE implementations, but it's to really understand the difference between

00:14:51,079 --> 00:14:54,860
SLIs, SLOs and SLAs.

00:14:54,860 --> 00:14:59,410
Oh, I was just used to SLAs.

00:14:59,410 --> 00:15:07,680
But within the SRE mindset and principles, there's initially they divided really down

00:15:07,680 --> 00:15:08,720
into these three areas.

00:15:08,720 --> 00:15:13,319
First of all, service level indicator, meaning some kind of measurement, or an indicator

00:15:13,319 --> 00:15:17,879
about what it is that I'm monitoring.

00:15:17,879 --> 00:15:23,569
And then those SLIs that I'm measuring will inform what I call what we call a service

00:15:23,569 --> 00:15:24,889
level objective.

00:15:24,889 --> 00:15:29,899
In other words, what is the threshold that we will allow for this particular indicator?

00:15:29,899 --> 00:15:36,050
It could be an up time metric, a throughput or a performance metric.

00:15:36,050 --> 00:15:47,079
But then the SLOs really is what's being focused on or targeted within the engineering organization.

00:15:47,079 --> 00:15:56,319
And then those SLOs inform service level agreements which are then business level agreements.

00:15:56,319 --> 00:16:00,050
They're agreements that are made between customer and business, okay?

00:16:00,050 --> 00:16:02,839
So, a very key distinction.

00:16:02,839 --> 00:16:07,990
Your SLE may not be as rigorous as the SLO, for instance.

00:16:07,990 --> 00:16:11,739
So, a key distinction between those three.

00:16:11,739 --> 00:16:20,569
So, you know, asmentioned, SLIs drive the SLOs which then inform SLAs.

00:16:20,569 --> 00:16:22,730
Okay.

00:16:22,730 --> 00:16:24,089
Number five.

00:16:24,089 --> 00:16:27,160
Use and adapt to error budgets.

00:16:27,160 --> 00:16:34,579
This is a very clever, I think, construct within the SRE discipline.

00:16:34,579 --> 00:16:39,199
The there's always this tension, right?

00:16:39,199 --> 00:16:47,129
Between, I guess, failure, perfection, but also moving quickly, right?

00:16:47,129 --> 00:16:52,679
You also you'll see this a lot of times within, you know, what do we do about quality?

00:16:52,679 --> 00:16:55,800
Do question sacrifice on quality to go faster?

00:16:55,800 --> 00:16:56,800
You know?

00:16:56,800 --> 00:17:03,129
And what what the idea was here with error budgets was that, number one, the recognition

00:17:03,129 --> 00:17:07,370
that really 100% perfection is not possible.

00:17:07,370 --> 00:17:11,140
You have to acknowledge that there will be some failure.

00:17:11,140 --> 00:17:17,059
Secondly, acknowledge that there will be some failure, what do you do?

00:17:17,059 --> 00:17:18,829
How do you use that to your advantage?

00:17:18,829 --> 00:17:23,120
So, what was developed was that there's a certain tolerance.

00:17:23,120 --> 00:17:24,980
You have this error budget.

00:17:24,980 --> 00:17:31,250
Maybe I can afford 1% or a .5 or a .1% type failure.

00:17:31,250 --> 00:17:37,450
Well, if the team, if the development team that's responsible for this service is shipping

00:17:37,450 --> 00:17:43,260
this, and they're doing very well, then maybe they can afford to go a little faster.

00:17:43,260 --> 00:17:49,270
And sacrifice a little bit of that budget toward moving more quickly.

00:17:49,270 --> 00:17:52,030
Maybe sacrificing a little bit of quality.

00:17:52,030 --> 00:17:58,420
However, if things aren't going so well, then it's incumbent upon the team to slow down

00:17:58,420 --> 00:18:02,070
and get back within that error budget.

00:18:02,070 --> 00:18:07,020
And so, this gives the team the flexibility as long as they're within this error budget

00:18:07,020 --> 00:18:10,680
that they can move more quickly.

00:18:10,680 --> 00:18:13,150
Maybe sacrifice a little bit of quality, right?

00:18:13,150 --> 00:18:16,070
As long as they stay within these bounds.

00:18:16,070 --> 00:18:20,850
This is a very difficult team thing for teams sometimes to really and it to

00:18:20,850 --> 00:18:21,850
accept.

00:18:21,850 --> 00:18:27,610
And it also takes a mature organization to really be okay with letting somebody actually

00:18:27,610 --> 00:18:31,870
incur, you know, some failure.

00:18:31,870 --> 00:18:34,980
Maybe even intentionally, if you will.

00:18:34,980 --> 00:18:42,890
So, kind of this is one of the more mature, I think, practices within an SRE implementation.

00:18:42,890 --> 00:18:44,940
Something that probably would come a little later, right?

00:18:44,940 --> 00:18:49,150
In an implementation.

00:18:49,150 --> 00:18:50,240
Practice number six.

00:18:50,240 --> 00:18:52,180
I mentioned this earlier.

00:18:52,180 --> 00:18:59,500
I think, personally, this is probably one of the most useful and powerful techniques

00:18:59,500 --> 00:19:02,070
within the SRE discipline.

00:19:02,070 --> 00:19:05,860
And I mentioned earlier, it really revolves around the quality.

00:19:05,860 --> 00:19:10,900
It was designed, again, that the SRE teams, look, development team.

00:19:10,900 --> 00:19:15,840
We know that you don't want to get burdened and bogged down in operational details.

00:19:15,840 --> 00:19:19,270
We will relieve you from those details, right?

00:19:19,270 --> 00:19:24,560
A lot of people think that DevOps means that means developers doing operations.

00:19:24,560 --> 00:19:26,790
That's not right what it means.

00:19:26,790 --> 00:19:31,510
It means, really, that both of those groups work together.

00:19:31,510 --> 00:19:33,960
That's the core of DevOps, what it means.

00:19:33,960 --> 00:19:41,040
But some people say I don't need operations people, I can just do that myself.

00:19:41,040 --> 00:19:47,750
And really what the SRE said was we'll do it because there are a lot of things and there

00:19:47,750 --> 00:19:52,110
are a lot of specialty there that we can take from you.

00:19:52,110 --> 00:19:59,830
But we have to be able to know that what you're giving us, that we can operate effectively.

00:19:59,830 --> 00:20:05,870
And so, what they do, then, is at a certain point when it's perhaps gonna go into production

00:20:05,870 --> 00:20:08,820
they'll do what's called a production readiness review.

00:20:08,820 --> 00:20:15,320
And they'll say, analyze is it, you know, what's the quality, you know, bugs, other

00:20:15,320 --> 00:20:18,660
issues, how long is it been under test?

00:20:18,660 --> 00:20:23,090
Have you been running it in kind of a dark environment for a while?

00:20:23,090 --> 00:20:24,550
Whatever the process is, right?

00:20:24,550 --> 00:20:30,720
To make sure that there's a confidence in the quality and that when it's handed over

00:20:30,720 --> 00:20:34,390
into the SRE group, that they can actually run it.

00:20:34,390 --> 00:20:41,320
And they're not going to get inundated with pages or well, that's old, right?

00:20:41,320 --> 00:20:44,000
Alerts or, you know, alarms, okay?

00:20:44,000 --> 00:20:48,200
And so, they go through that process now.

00:20:48,200 --> 00:20:55,390
If at some point in the life cycle of the service things begin to go bad, what happens?

00:20:55,390 --> 00:20:56,390
Are you stuck with it?

00:20:56,390 --> 00:20:58,180
The SREs just have to deal with it?

00:20:58,180 --> 00:21:00,640
They beg please, please, please?

00:21:00,640 --> 00:21:05,230
No, what they can do is what's called an operational handback, right?

00:21:05,230 --> 00:21:11,480
Where they actually, and when I was at my last company, one of the first things I did

00:21:11,480 --> 00:21:14,800
with my operations group was we instituted this.

00:21:14,800 --> 00:21:23,040
And there was the single thing that drove quality that accelerated adoption of quality.

00:21:23,040 --> 00:21:26,250
The team was fighting against operational issues.

00:21:26,250 --> 00:21:29,670
Development was really lax on fix them, right?

00:21:29,670 --> 00:21:31,600
It took time.

00:21:31,600 --> 00:21:32,980
And I just said, okay.

00:21:32,980 --> 00:21:34,760
We're going to begin doing operational handback.

00:21:34,760 --> 00:21:39,740
I would pull in the development leads and say we're gonna we're gonna work together

00:21:39,740 --> 00:21:40,740
on this, right?

00:21:40,740 --> 00:21:47,400
And you need to stop producing new features while we get this under control.

00:21:47,400 --> 00:21:51,240
Wasn't quite that simple, but, you know, it's a little took some political finesse, I

00:21:51,240 --> 00:21:55,690
guess to get that working.

00:21:55,690 --> 00:22:01,350
But it began to drive the importance of that operational quality up within the organization.

00:22:01,350 --> 00:22:04,370
A very effective technique.

00:22:04,370 --> 00:22:08,100
Number seven, blameless pose incident reviews.

00:22:08,100 --> 00:22:12,270
I think we all understand the value of a post incident review, going through what happened

00:22:12,270 --> 00:22:15,810
after something, you know, didn't go right.

00:22:15,810 --> 00:22:18,100
The learnings that come from that.

00:22:18,100 --> 00:22:21,010
The key here is really the blameless part.

00:22:21,010 --> 00:22:27,000
And that is, you conduct your review where you don't your mind or the organization

00:22:27,000 --> 00:22:33,010
doesn't immediately go and say, oh, it was that person's fault.

00:22:33,010 --> 00:22:34,600
We all do it.

00:22:34,600 --> 00:22:38,440
We all look for that it was a person.

00:22:38,440 --> 00:22:45,800
The problem with that is if the organization knows that's where people's minds are, people

00:22:45,800 --> 00:22:47,650
aren't downing to be forthcoming.

00:22:47,650 --> 00:22:51,820
They're not going really be open about what's working what's not organize.

00:22:51,820 --> 00:22:54,590
Or what happened.

00:22:54,590 --> 00:22:57,910
This took some time to really build into the culture.

00:22:57,910 --> 00:23:01,980
And it really took some explicit, you know, rules about when we went into postmortems

00:23:01,980 --> 00:23:07,010
about we're not going to, you know, point fingers, we're not going mention names.

00:23:07,010 --> 00:23:12,030
It had to be pretty extreme, right?

00:23:12,030 --> 00:23:14,640
If you will, on one side to kind of get this going.

00:23:14,640 --> 00:23:19,000
But what happened eventually, I thought was amazing.

00:23:19,000 --> 00:23:24,750
And that is, once people felt safe, you actually saw people say you know what?

00:23:24,750 --> 00:23:26,130
I could have done better.

00:23:26,130 --> 00:23:28,650
I missed that.

00:23:28,650 --> 00:23:33,780
I should have checked that before I did, you know, X.

00:23:33,780 --> 00:23:38,410
And that, you thought, was the greatest thing that came out of it was we didn't have to

00:23:38,410 --> 00:23:39,620
point fingers.

00:23:39,620 --> 00:23:44,770
People were taking responsible and accepting accountability for the things that they knew

00:23:44,770 --> 00:23:47,670
they should have done, but don't didn't do.

00:23:47,670 --> 00:23:53,730
A very powerful, again, construct.

00:23:53,730 --> 00:24:01,070
This in organizing SRE, a lot of people ask me, how do I organize this within my company?

00:24:01,070 --> 00:24:06,720
And I found that this is probably the best organizational is to have like a core SRE

00:24:06,720 --> 00:24:08,520
team.

00:24:08,520 --> 00:24:13,650
That kind of that governs the standards and the, you know, how things work within

00:24:13,650 --> 00:24:17,660
the SRE, you know, how do we automate, what do we use to automate?

00:24:17,660 --> 00:24:20,470
Just it kind of centralize all that into one group.

00:24:20,470 --> 00:24:27,150
But then taking individual SREs and then embedding them out into the organization, into development

00:24:27,150 --> 00:24:28,300
teams.

00:24:28,300 --> 00:24:33,180
Maybe one, two, three, teams they may have responsible for, you know, it just kind of

00:24:33,180 --> 00:24:39,240
depends on the team, maybe the size of the team or the importance within the organization

00:24:39,240 --> 00:24:40,270
of that product.

00:24:40,270 --> 00:24:48,120
But having this core that centralizes certain things and then having embedded SREs out into

00:24:48,120 --> 00:24:53,920
the organization helping engineering and development teams.

00:24:53,920 --> 00:24:57,490
Lastly, and I hope you I mentioned this at the beginning.

00:24:57,490 --> 00:25:02,140
But really is you've got to make the SRE discipline your own.

00:25:02,140 --> 00:25:06,370
You can't create a Google SRE, you can't create a Netflix SRE.

00:25:06,370 --> 00:25:10,110
You have to create your company's version of an SRE.

00:25:10,110 --> 00:25:15,300
But you also need to take into account some of these key principles and facts.

00:25:15,300 --> 00:25:19,150
Or else you kind of don't really have the idea of SRE either.

00:25:19,150 --> 00:25:25,440
So, it's an implementation where you take these key concepts and principles and then

00:25:25,440 --> 00:25:32,531
adapt it into your organization to full, really, whey find is an exceptional benefit to the

00:25:32,531 --> 00:25:35,840
organization is that is site reliabilities engineering.

00:25:35,840 --> 00:25:36,840
Thank you.

00:25:36,840 --> 00:25:36,880

YouTube URL: https://www.youtube.com/watch?v=SBs883dE62Y


