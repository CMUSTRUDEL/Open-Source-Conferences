Title: DevOpsDays Boston 2019 - Applying the Serverless Mindset to Any Tech Stack by Ben Kehoe
Publication date: 2019-10-11
Playlist: DevOpsDays Boston 2019
Description: 
	Applying the Serverless Mindset to Any Tech Stack by Ben Kehoe

Debates about what technologies are or aren’t serverless are endless and tiresome. The term is now applied to products that require the operator to run their own clusters or manage installations of FaaS platforms. The buzzwordy nature of the term and its overuse obscures a deeper truth: serverless has never been about technologies. Instead, it’s an approach to development that focuses on delivering business value and minimizing total cost of ownership. When taken to its logical conclusion, it results in the technologies we call “serverless”, such as AWS Lambda. But the approach itself is not limited to these technologies: a person or team can apply this approach within the constraints imposed by their organization. The serverless mindset can serve as a compass to guide decision-making even in organizations that are entirely on-prem, leading to faster, more responsive development and lower TCO.

#DevOpsDays #DevOpsDaysBoston
Captions: 
	00:00:01,540 --> 00:00:17,590
Yeah.

00:00:17,590 --> 00:00:20,020
As you mentioned, we are a sponsor.

00:00:20,020 --> 00:00:21,400
Come by our booth, talk to us.

00:00:21,400 --> 00:00:25,040
Hear about the cool technology things that underlie Roomba.

00:00:25,040 --> 00:00:28,410
So, we're a serverless company.

00:00:28,410 --> 00:00:30,550
And serverless is a buzzword now.

00:00:30,550 --> 00:00:33,750
You know, more meaningless now even perhaps than cloud.

00:00:33,750 --> 00:00:35,770
They compete with each other.

00:00:35,770 --> 00:00:40,750
But what I want to convince you of today is at heart the notion of serverless is not about

00:00:40,750 --> 00:00:44,920
the technology of serverless, but a mindset of choosing technology.

00:00:44,920 --> 00:00:51,470
And I want to convince you that this mindset can be adopted whatever your tech stack is.

00:00:51,470 --> 00:00:55,040
And so, the purpose of it is to deliver value to your commerce.

00:00:55,040 --> 00:00:58,530
And you can do that in any situation.

00:00:58,530 --> 00:01:05,790
It does require re-contextualizing your role in a technology deliver process.

00:01:05,790 --> 00:01:08,580
And that goes for anybody who is involved in that process.

00:01:08,580 --> 00:01:11,970
Engineers, operations, security, QA.

00:01:11,970 --> 00:01:14,210
So, I want to tell you about Roomba.

00:01:14,210 --> 00:01:16,960
So, at iRobot, we're fully serverless in construction.

00:01:16,960 --> 00:01:23,460
We have no VMs or containers for our robots.

00:01:23,460 --> 00:01:26,980
It's Lambda and about 30 other AWS services.

00:01:26,980 --> 00:01:29,560
And we sell millions of robots a year.

00:01:29,560 --> 00:01:32,260
We're now connected through the full Roomba line.

00:01:32,260 --> 00:01:36,560
We have a high scale problem, right?

00:01:36,560 --> 00:01:38,530
And being serverless is incredibly power.

00:01:38,530 --> 00:01:41,360
And I want to tell you a story about Christmas day.

00:01:41,360 --> 00:01:49,531
Christmas is not only the biggest selling season for iRobot, like most companies, but

00:01:49,531 --> 00:01:59,420
additionally, unlike the other selling points, all of the robots that get sold between Black

00:01:59,420 --> 00:02:04,850
Friday and Christmas come online in about a four hour window on Christmas morning.

00:02:04,850 --> 00:02:08,820
[ Laughter ] And it is it is a massive wave of traffic.

00:02:08,820 --> 00:02:12,439
It's about 100x the baseline.

00:02:12,439 --> 00:02:18,180
And on Christmas Day 2018 you can imagine that is a very large event in technological

00:02:18,180 --> 00:02:19,900
terms.

00:02:19,900 --> 00:02:24,659
In process terms, on Christmas Day 2018, we have a couple of people who do monitoring

00:02:24,659 --> 00:02:25,859
for us.

00:02:25,859 --> 00:02:30,200
And one employee who is tasked with taking any action.

00:02:30,200 --> 00:02:38,940
The only thing that person had to do is increase the shards on the stream that filled the data

00:02:38,940 --> 00:02:39,940
lake.

00:02:39,940 --> 00:02:41,209
Even that is an automatable process.

00:02:41,209 --> 00:02:45,200
We could have done that and it would have been completely off hands keyboard.

00:02:45,200 --> 00:02:49,090
It's hard to understate how huge that is, right?

00:02:49,090 --> 00:02:51,859
That we can handle this as a non event.

00:02:51,859 --> 00:02:55,849
That our engineers are home with their families on Christmas Day.

00:02:55,849 --> 00:02:59,459
They're on Slack because they're interested in seeing what the numbers are because that's

00:02:59,459 --> 00:03:00,459
fun.

00:03:00,459 --> 00:03:04,989
They spent the entirety of December not doing game days, not prepping for operations on

00:03:04,989 --> 00:03:06,079
Christmas.

00:03:06,079 --> 00:03:09,189
But building features to ship in January.

00:03:09,189 --> 00:03:13,249
And to, that's what serverless has given iRobot and that has required us to be, you know,

00:03:13,249 --> 00:03:15,079
completely serverless native.

00:03:15,079 --> 00:03:17,640
And the mindset there is the most important thing.

00:03:17,640 --> 00:03:25,209
When we approach a problem, we think about the technology ownership involved.

00:03:25,209 --> 00:03:28,900
Because we use a lot of Lambda, but functions are not the point.

00:03:28,900 --> 00:03:29,900
Right?

00:03:29,900 --> 00:03:35,040
A lot of people talk about serverless as if functions as a service is the gist of it.

00:03:35,040 --> 00:03:40,749
And functions are great, scale transparency, run the event time for you within run with

00:03:40,749 --> 00:03:42,409
act architectures.

00:03:42,409 --> 00:03:45,730
And they're good properties.

00:03:45,730 --> 00:03:47,470
But they're a small part of the solution.

00:03:47,470 --> 00:03:52,799
They're the auto glue between your managed services that are doing the bulk of the heavy

00:03:52,799 --> 00:03:57,959
lifting that's needed in any application scenario.

00:03:57,959 --> 00:03:59,969
Managed services are not the point, right?

00:03:59,969 --> 00:04:01,269
They're also great.

00:04:01,269 --> 00:04:03,260
They give you the functionality you need with less hassle.

00:04:03,260 --> 00:04:10,099
And we're fortunate to have them for so many different uses that we have.

00:04:10,099 --> 00:04:13,150
Databases, message queues, identity and access management.

00:04:13,150 --> 00:04:17,600
Of all the things I don't want to own, OAuth is never one.

00:04:17,600 --> 00:04:19,700
We have it for machine learning, we have it for analytics.

00:04:19,700 --> 00:04:22,120
All of these things we can do.

00:04:22,120 --> 00:04:23,940
You're not patching the servers they run on.

00:04:23,940 --> 00:04:31,260
You're not figuring out how to scale if for the traffic that you need without over provisioning.

00:04:31,260 --> 00:04:34,870
And all of this lowers your operational burden significantly, right?

00:04:34,870 --> 00:04:39,810
That we run all of this with just a few people.

00:04:39,810 --> 00:04:42,590
But that lowered operations burden is not the point.

00:04:42,590 --> 00:04:43,590
Right?

00:04:43,590 --> 00:04:46,660
It's great to know that you can apply fewer operations resources, right?

00:04:46,660 --> 00:04:52,560
And out of that pool of people that you had, you can apply them more directly towards creating

00:04:52,560 --> 00:04:57,280
new things rather than running existing things.

00:04:57,280 --> 00:05:01,360
And it scales mostly, the operations scales mostly with the features that you ship with

00:05:01,360 --> 00:05:04,620
the complexity of the system rather than the traffic through it.

00:05:04,620 --> 00:05:10,120
And we add we double the number of Roombas, we haven't even doubled the number of people.

00:05:10,120 --> 00:05:14,690
We haven't even add at another person to that team.

00:05:14,690 --> 00:05:19,800
On occasion, you will hear it as NoOps, but that's untrue.

00:05:19,800 --> 00:05:27,320
If they're practicing serverless, a lot of what you do with the traditional system goes

00:05:27,320 --> 00:05:28,320
away.

00:05:28,320 --> 00:05:30,660
It's being managed by a provider.

00:05:30,660 --> 00:05:34,170
But there's also new work you have to do with monitoring your provider.

00:05:34,170 --> 00:05:42,460
And there's standard existing things for around the code that you still own.

00:05:42,460 --> 00:05:47,650
And that save use money, but cost is not the point.

00:05:47,650 --> 00:05:53,370
Sometimes just sometimes like the entirety of what you're being asked to do is reduce

00:05:53,370 --> 00:05:55,370
the cloud build.

00:05:55,370 --> 00:05:57,840
And serverless can often help you do that.

00:05:57,840 --> 00:06:01,530
Not every time, but most of the time.

00:06:01,530 --> 00:06:07,140
But in general your cloud build is only one part of your overall cloud cost of which,

00:06:07,140 --> 00:06:11,250
you know, the amount of time that people are spending on operations is another big cost

00:06:11,250 --> 00:06:13,480
driver.

00:06:13,480 --> 00:06:15,720
Right?

00:06:15,720 --> 00:06:21,690
And while all of these are important, and important aspects of serverless, they're not

00:06:21,690 --> 00:06:22,690
the point.

00:06:22,690 --> 00:06:25,830
Because technology itself is not the point.

00:06:25,830 --> 00:06:26,830
Right?

00:06:26,830 --> 00:06:30,780
The reason that we're doing all of this, any of the things that we're doing is in service

00:06:30,780 --> 00:06:32,740
of some business goal.

00:06:32,740 --> 00:06:33,740
Right?

00:06:33,740 --> 00:06:38,270
Some customer value that you're trying to create is the point.

00:06:38,270 --> 00:06:42,140
And sometimes what you're selling is literally technology.

00:06:42,140 --> 00:06:47,390
But even if the product is technology, the value that you're creating for your customer

00:06:47,390 --> 00:06:49,550
is usually not technology.

00:06:49,550 --> 00:06:50,550
Right?

00:06:50,550 --> 00:06:55,190
There's an old adage that people don't buy drills, they buy holes, right?

00:06:55,190 --> 00:07:01,460
That the evaluation of what they're getting is around how it helps them solve their problem.

00:07:01,460 --> 00:07:05,630
And you think about iRobot, well, we make robots.

00:07:05,630 --> 00:07:07,200
What we sell is not robots.

00:07:07,200 --> 00:07:09,320
It's not even vacuums.

00:07:09,320 --> 00:07:11,080
It's clean moments right?

00:07:11,080 --> 00:07:16,860
Roomba gives you time back in your day to do the things that matter to you.

00:07:16,860 --> 00:07:18,630
And serverless is analogous, right?

00:07:18,630 --> 00:07:23,580
The whole point of it is giving you and your organization time back to focus on the value

00:07:23,580 --> 00:07:25,600
that you're creating for your customers.

00:07:25,600 --> 00:07:31,710
So, if the technology is not the point, how does it factor in?

00:07:31,710 --> 00:07:32,710
Right?

00:07:32,710 --> 00:07:34,240
The point of serverless is focus.

00:07:34,240 --> 00:07:35,240
Right?

00:07:35,240 --> 00:07:37,130
Serverless is a way to focus on customer value.

00:07:37,130 --> 00:07:41,030
And so, the technology is in service of that.

00:07:41,030 --> 00:07:45,830
Functions let you focus on writing your business logic, not on coding the supporting infrastructure

00:07:45,830 --> 00:07:48,280
that delivers your business logic.

00:07:48,280 --> 00:07:51,240
Managed services lets you focus on writing your functions.

00:07:51,240 --> 00:07:54,940
Not on how you're setting up the database that you're using.

00:07:54,940 --> 00:07:56,210
Right?

00:07:56,210 --> 00:08:02,880
Lower operations frees up people's time to focus more directly in creation of that customer

00:08:02,880 --> 00:08:03,880
value.

00:08:03,880 --> 00:08:04,980
Things like observability, right?

00:08:04,980 --> 00:08:10,550
We talk about reducing or making better the directions I always get confused about meantime

00:08:10,550 --> 00:08:12,520
to resolution and failure.

00:08:12,520 --> 00:08:15,970
We want them both to get better.

00:08:15,970 --> 00:08:19,020
They're both measures of how often your customers arbitrary getting value.

00:08:19,020 --> 00:08:20,020
Right?

00:08:20,020 --> 00:08:24,450
When your system is down, your customers aren't getting that value and you want that to happen

00:08:24,450 --> 00:08:28,700
less often and shorter time when is it happens.

00:08:28,700 --> 00:08:32,240
And so, this focus is the why of serverless.

00:08:32,240 --> 00:08:33,240
Right?

00:08:33,240 --> 00:08:38,379
You should want to go serverless because you want to focus on creating customer value.

00:08:38,379 --> 00:08:43,639
And at your company, you're charged with applying technologies to the creation of that value.

00:08:43,639 --> 00:08:46,160
So, if we go back to the cost, right?

00:08:46,160 --> 00:08:52,129
Earlier this year Lyft's $100 million a year AWS bill was in the news.

00:08:52,129 --> 00:08:54,560
A lot of people chimed in to say, I could do that cheaper.

00:08:54,560 --> 00:08:56,929
First of all, no, you couldn't.

00:08:56,929 --> 00:09:02,529
[ Laughter ] But everyone if you could, right?

00:09:02,529 --> 00:09:09,990
Would Lyft's bill and their ability to focus be better if they went completely serverless?

00:09:09,990 --> 00:09:12,700
Well, at the end of that process, sure.

00:09:12,700 --> 00:09:19,009
It would probably be cheaper and there would be it would go down and all of those things.

00:09:19,009 --> 00:09:22,110
But what happens in the time that they're re architecting?

00:09:22,110 --> 00:09:24,569
At that point they're losing focus, right?

00:09:24,569 --> 00:09:30,420
And so, that's where at the point they are at their journey, executing with their current

00:09:30,420 --> 00:09:36,519
processes is more important than re architecting to save costs.

00:09:36,519 --> 00:09:39,459
And so, that's the serverless choice for where they are.

00:09:39,459 --> 00:09:43,600
So, what I'm telling you is that serverless has never really been about the technology

00:09:43,600 --> 00:09:45,000
that we call serverless.

00:09:45,000 --> 00:09:48,360
So, where does that technology come in?

00:09:48,360 --> 00:09:50,240
It's a consequence of this focus, right?

00:09:50,240 --> 00:09:55,680
If you take that focus and say, I'm gonna take it to its logical conclusion, what is

00:09:55,680 --> 00:09:57,819
my technology going to look like?

00:09:57,819 --> 00:09:58,819
Right?

00:09:58,819 --> 00:10:00,529
As an analogy, right?

00:10:00,529 --> 00:10:06,149
Dev and Ops teams have traditionally been separated with the notion that they have different

00:10:06,149 --> 00:10:07,610
focuses, right?

00:10:07,610 --> 00:10:10,350
And the whole DevOps thing is that that's changing.

00:10:10,350 --> 00:10:12,760
That the traditional model put the focus on technology.

00:10:12,760 --> 00:10:18,149
It said, well, the things that operations people do and the things that developers do

00:10:18,149 --> 00:10:20,920
are different so they should be on different teams.

00:10:20,920 --> 00:10:25,910
But we now recognize, oh, well, they're both creating they're part of creating some value

00:10:25,910 --> 00:10:26,910
for the customer.

00:10:26,910 --> 00:10:31,160
We should bring them together and focus them on the features that they're creating and

00:10:31,160 --> 00:10:34,230
build the teams that way, right?

00:10:34,230 --> 00:10:39,670
And so, with serverless, when you want to focus on value, you want to write functions.

00:10:39,670 --> 00:10:41,720
That function needs state, you need a database.

00:10:41,720 --> 00:10:44,420
You're going to find database as a service.

00:10:44,420 --> 00:10:49,629
And you want to choose between those options based on how well it lets you focus.

00:10:49,629 --> 00:10:50,749
Right?

00:10:50,749 --> 00:10:54,009
And when you're choosing these services, some of them maybe even be user facing.

00:10:54,009 --> 00:10:57,720
So, social is going to not build an auth system.

00:10:57,720 --> 00:11:05,550
I'm not going to choose an auth provider and own my own accounts.

00:11:05,550 --> 00:11:11,380
I'm going to delegate to Facebook or Google or GitHub.

00:11:11,380 --> 00:11:16,259
Now, of course, in all of this, for everything you're outsourcing, you're still accountable

00:11:16,259 --> 00:11:19,029
to your commerce, right?

00:11:19,029 --> 00:11:24,769
If your system is down because of a third party outage, that's still your problem to

00:11:24,769 --> 00:11:27,540
your users and you need to own that.

00:11:27,540 --> 00:11:28,540
Right?

00:11:28,540 --> 00:11:32,170
And you can do that while still accepting that you don't fully control your own destiny.

00:11:32,170 --> 00:11:34,699
And this is really important.

00:11:34,699 --> 00:11:35,699
You know?

00:11:35,699 --> 00:11:40,369
You can so, with these things, you can't win points.

00:11:40,369 --> 00:11:41,369
You know?

00:11:41,369 --> 00:11:44,350
Nobody chooses something because it has a great login experience.

00:11:44,350 --> 00:11:48,490
But people avoid things because they have bad login experiences.

00:11:48,490 --> 00:11:51,790
You need to recognize what good looks like.

00:11:51,790 --> 00:11:56,350
And this is part of, you know, you can outsource the implementation, but you can't outsource

00:11:56,350 --> 00:11:58,699
the product ownership.

00:11:58,699 --> 00:12:02,990
So, you need to know what quality looks like for your users.

00:12:02,990 --> 00:12:07,339
Even in those areas where you don't you don't know how to build what you're delivering there,

00:12:07,339 --> 00:12:08,339
right?

00:12:08,339 --> 00:12:11,680
But you do need to know what your users to want see.

00:12:11,680 --> 00:12:14,040
In this way, serverless is a trait.

00:12:14,040 --> 00:12:16,389
It's a trait of companies.

00:12:16,389 --> 00:12:21,670
If a company chooses that it doesn't want to own technologies that aren't core to the

00:12:21,670 --> 00:12:25,509
value that it's delivering to their commerce, it's a serverless company.

00:12:25,509 --> 00:12:29,009
And few companies are truly serverless across the board.

00:12:29,009 --> 00:12:32,050
But that doesn't mean parts of the organization can't be serverless, right?

00:12:32,050 --> 00:12:37,199
If a team decides that it's going to work only own a technology that's core to what

00:12:37,199 --> 00:12:41,430
it's delivering to whatever it is customers are, whether those are end users or other

00:12:41,430 --> 00:12:44,550
teams within the organization.

00:12:44,550 --> 00:12:50,410
And the way that it outsources the technologies that aren't core is ideally to outside the

00:12:50,410 --> 00:12:51,410
organization.

00:12:51,410 --> 00:12:52,709
But that's not always possible, right?

00:12:52,709 --> 00:12:55,089
The constraints can say, well, that has to stay inside.

00:12:55,089 --> 00:12:57,339
But it's another team inside the company.

00:12:57,339 --> 00:13:00,329
That's, again, in a serverless direction.

00:13:00,329 --> 00:13:04,230
And if you're a big enough company, it may cease to matter.

00:13:04,230 --> 00:13:13,579
When Amazon.com uses AWS Lambda, that's serverless even though in some sense it's on prem, right?

00:13:13,579 --> 00:13:19,399
And so, but what if it's, you know, not even possible for a team?

00:13:19,399 --> 00:13:24,100
You've come here today and you're buying what I'm saying, but you feel completely alone

00:13:24,100 --> 00:13:25,899
in this at your company, right?

00:13:25,899 --> 00:13:32,019
What if you're patching servers for a team that serves a team that's creating user facing

00:13:32,019 --> 00:13:33,019
content?

00:13:33,019 --> 00:13:38,250
So, what I want to convince you of is that you can go serverless yourself today in whatever

00:13:38,250 --> 00:13:39,990
situation you're in.

00:13:39,990 --> 00:13:43,459
And this is sorts of where my talk turns into like motivational speech.

00:13:43,459 --> 00:13:47,459
Because serverless is a direction, not a destination.

00:13:47,459 --> 00:13:50,319
I like to think of serverless now as a ladder.

00:13:50,319 --> 00:13:56,689
I used to call it a spectrum because there isn't a fine bright line dividing something

00:13:56,689 --> 00:13:59,350
that is serverless from something that is not serverless.

00:13:59,350 --> 00:14:03,779
But what I like about the ladder is that it implies movement.

00:14:03,779 --> 00:14:10,149
You're climbing to some nirvana to deliver pure business value with no overhead.

00:14:10,149 --> 00:14:13,779
But every rung on this ladder is a valid serverless step.

00:14:13,779 --> 00:14:20,910
If you move from on prem into a public cloud, that's a rung on the serverless lady.

00:14:20,910 --> 00:14:24,980
VMs to containers, that's a rung.

00:14:24,980 --> 00:14:33,220
No orchestration to orchestration to Kubernetes, that's a rung on the serverless ladder.

00:14:33,220 --> 00:14:39,089
But there's always a rung above you and you should always keep climbing.

00:14:39,089 --> 00:14:43,259
One thing that ladder doesn't convey that's not linear.

00:14:43,259 --> 00:14:44,910
There often isn't a better.

00:14:44,910 --> 00:14:47,420
Not like there's one step above the other.

00:14:47,420 --> 00:14:50,100
If you're on prem and Vs, what's better?

00:14:50,100 --> 00:14:54,189
Moving to public cloud VMs or containers on prem?

00:14:54,189 --> 00:14:57,869
Those are both the right direction to go.

00:14:57,869 --> 00:15:02,449
And one of them is not, you know, explicitly better than the other.

00:15:02,449 --> 00:15:06,779
And so, I sort of thoughts, you know, many paths leading up a mountain.

00:15:06,779 --> 00:15:08,759
But what I like about the ladder is that it's infinite.

00:15:08,759 --> 00:15:09,899
There's no top.

00:15:09,899 --> 00:15:14,290
There's no mountain top, no end goal that you reach to.

00:15:14,290 --> 00:15:17,550
Being fully serverless, we use a lot of AWS Lambda.

00:15:17,550 --> 00:15:22,190
But we're always looking for ways that we can better deliver code with less overhead

00:15:22,190 --> 00:15:23,999
that helps us focus better.

00:15:23,999 --> 00:15:28,339
For us this is, you know, we built some orchestration things in Lambda.

00:15:28,339 --> 00:15:30,329
And then AWS step functions came out.

00:15:30,329 --> 00:15:35,459
That helps us do that with even less code and more focus, right?

00:15:35,459 --> 00:15:38,480
So, serverless is a state of mind, right?

00:15:38,480 --> 00:15:43,230
It's not it's about how you make decisions, not what your choices are.

00:15:43,230 --> 00:15:45,339
Every decision is made with constraints.

00:15:45,339 --> 00:15:52,299
But if you know the right direction, you can choose among the available options the one

00:15:52,299 --> 00:15:57,639
that most closely aligns with the direction you want to go.

00:15:57,639 --> 00:16:01,809
And then when you're making those choices, you're moving up another rung in your time.

00:16:01,809 --> 00:16:02,980
How do you adopt this mindset?

00:16:02,980 --> 00:16:03,990
How do you make serverless choices?

00:16:03,990 --> 00:16:10,209
To so, to starts, as Ryan Holiday says, you go as the enemy.

00:16:10,209 --> 00:16:15,139
Truly embracing the serverless mindset is a change in how we operate, as engineers,

00:16:15,139 --> 00:16:17,399
as technology builders.

00:16:17,399 --> 00:16:24,549
Depending how we construct our ability, working what we produce or what we're used to, this

00:16:24,549 --> 00:16:25,809
might be difficult.

00:16:25,809 --> 00:16:31,389
It is to a large degree an acceptance of a lack of control.

00:16:31,389 --> 00:16:35,480
And that requires us to be humble.

00:16:35,480 --> 00:16:39,309
Because tool selection should not be driven by people, it should be driven by value.

00:16:39,309 --> 00:16:41,889
And this is important because you're not the tool.

00:16:41,889 --> 00:16:42,889
Right?

00:16:42,889 --> 00:16:47,750
Any tool or technology that you're using is an enabler for you.

00:16:47,750 --> 00:16:53,170
But it's time that we, you know, we split the tool creator and the tool user, right?

00:16:53,170 --> 00:16:58,801
So, that the tool user can focus on using the tool to deliver value upstream and then

00:16:58,801 --> 00:17:05,360
a tool creator can spend their time focusing on how to make that tool better to enable

00:17:05,360 --> 00:17:06,520
the tool user.

00:17:06,520 --> 00:17:07,520
Right?

00:17:07,520 --> 00:17:09,829
And this is things like making builds self service.

00:17:09,829 --> 00:17:15,240
So, that instead of a building, you know, the team that ounce build infrastructure,

00:17:15,240 --> 00:17:20,010
instead of delivering the builds themselves, delivering self service infrastructure to

00:17:20,010 --> 00:17:25,750
create builds so that the teams themselves are responsible for delivering the builds.

00:17:25,750 --> 00:17:32,910
And so, jumping into serverless.

00:17:32,910 --> 00:17:38,310
The decisions to make about what you're choosing, right?

00:17:38,310 --> 00:17:41,740
When you think about, okay, I want to learn serverless.

00:17:41,740 --> 00:17:52,660
You bring a lot of your existing experiences to to the situation

00:17:52,660 --> 00:17:57,200
And you end up choosing things like, oh, there's a framework where I can run existing frameworks

00:17:57,200 --> 00:17:59,170
that I have built inside of Lambda.

00:17:59,170 --> 00:18:03,630
And the problem with that is, sure that helps us get off the ground, but it's not helping

00:18:03,630 --> 00:18:05,790
you build things overall.

00:18:05,790 --> 00:18:12,420
What you want to remember is that code is a liability.

00:18:12,420 --> 00:18:20,420
That code can at best do exactly what you intend it to do.

00:18:20,420 --> 00:18:21,420
Right?

00:18:21,420 --> 00:18:22,500
Which is never true.

00:18:22,500 --> 00:18:23,500
There are always bugs.

00:18:23,500 --> 00:18:24,500
Right?

00:18:24,500 --> 00:18:26,510
So, you can only lose points through coding.

00:18:26,510 --> 00:18:29,910
So, you want to do it as little as possible to accomplish your goal.

00:18:29,910 --> 00:18:34,640
The more code you own, the more opportunities you're giving yourself for departing from

00:18:34,640 --> 00:18:37,920
your intended value.

00:18:37,920 --> 00:18:45,010
And so, because technology is the point, we should ask instead how can we best deliver

00:18:45,010 --> 00:18:46,090
value?

00:18:46,090 --> 00:18:50,420
And the answer may not be directly what's easiest or most fun for us.

00:18:50,420 --> 00:18:54,550
Just because something is harder, doesn't mean it's not more effectively accomplishing

00:18:54,550 --> 00:18:55,630
our goals.

00:18:55,630 --> 00:19:01,840
There's actually a recent study about education where active learning, which is a much more

00:19:01,840 --> 00:19:07,830
sort of engaging the student method of teaching, was rated by students.

00:19:07,830 --> 00:19:12,790
They liked it less and they judged themselves to be learning less even though they were

00:19:12,790 --> 00:19:14,900
learning more.

00:19:14,900 --> 00:19:23,490
And so, introspection is key on this because the way you feel about it may not be the actual

00:19:23,490 --> 00:19:33,830
way that that it's working out when you zoom out and so, you want to ask what biases, attachments

00:19:33,830 --> 00:19:39,180
and beliefs that you built up that may be getting in the way of better delivering value.

00:19:39,180 --> 00:19:40,710
The serverless is about minimalism, right?

00:19:40,710 --> 00:19:44,410
Letting go, removing distractions, owning less technology, right?

00:19:44,410 --> 00:19:46,810
Marie Kondo, big no.

00:19:46,810 --> 00:19:53,040
And it's the same advice, find the components of your stack that don't stark joy.

00:19:53,040 --> 00:19:58,550
But it's not about joy for you, it's about joy for your organization.

00:19:58,550 --> 00:20:00,450
And part of this is that constraints are good.

00:20:00,450 --> 00:20:01,450
Right?

00:20:01,450 --> 00:20:03,170
We're moving options can help you focus.

00:20:03,170 --> 00:20:08,320
Obviously not all constraints are good, but in general the ability to do anything comes

00:20:08,320 --> 00:20:12,120
at the cost of it taking longer to do one thing in particular.

00:20:12,120 --> 00:20:14,650
So, like guardrails, right?

00:20:14,650 --> 00:20:21,780
May be annoying, but you can go faster than if you always had to watch the edge.

00:20:21,780 --> 00:20:25,860
You may not feel as good if you're bowling with bumpers, but you can get more pins down.

00:20:25,860 --> 00:20:31,360
And so, I like this, be afraid of the enormity of the possible.

00:20:31,360 --> 00:20:34,170
Because possibilities carry with them this kind of complexity.

00:20:34,170 --> 00:20:38,870
Because when I'm evaluating a technology, one of the primary metrics that I choose from

00:20:38,870 --> 00:20:44,190
is how much capability is that is to just beyond what I'm applying it to.

00:20:44,190 --> 00:20:49,780
Because whether there's a lot of extra space, there's unnecessary things that I have to

00:20:49,780 --> 00:20:52,210
learn about and be concerned with.

00:20:52,210 --> 00:20:53,210
Right?

00:20:53,210 --> 00:20:58,140
So, Kubernetes is a tool that people tout as one thing that will accomplish all of your

00:20:58,140 --> 00:20:59,700
cloud needs.

00:20:59,700 --> 00:21:06,310
And while that's true, it's capable of doing that, the key is that for any given task,

00:21:06,310 --> 00:21:10,660
Kubernetes can go wrong because you haven't accounted for ways in which it acts that are

00:21:10,660 --> 00:21:14,620
unrelated to that task.

00:21:14,620 --> 00:21:19,620
And the other thing is when you choose between a service, a managed service, that's on your

00:21:19,620 --> 00:21:25,660
main provider, like within the ecosystem that you're already working and a new provider

00:21:25,660 --> 00:21:30,930
that maybe has that accomplishes more of what you want, there are new complexities in that.

00:21:30,930 --> 00:21:31,930
What does the auth look like?

00:21:31,930 --> 00:21:33,840
What does the operations look like?

00:21:33,840 --> 00:21:36,300
Now, it may be justified.

00:21:36,300 --> 00:21:41,230
But you want to think about all the different fact theirs come into bring that new provider

00:21:41,230 --> 00:21:45,740
in and trade that off against the features that you're getting.

00:21:45,740 --> 00:21:47,640
Remember that the best fly wheels are not the lightest once.

00:21:47,640 --> 00:21:50,250
They're not the heaviest ones.

00:21:50,250 --> 00:21:57,400
But hello world for any technology is almost never indicative of how effective the technology

00:21:57,400 --> 00:22:00,250
is in the long run.

00:22:00,250 --> 00:22:02,570
So, in serverless we have a lot of infrastructure.

00:22:02,570 --> 00:22:05,610
Because we have a lot of managed services.

00:22:05,610 --> 00:22:11,480
And our applications are defined not by execution graphs inside our code, but by our application

00:22:11,480 --> 00:22:15,200
graph in our infrastructure.

00:22:15,200 --> 00:22:20,260
And a lot of that is merely connecting managed services to each other.

00:22:20,260 --> 00:22:23,450
Now, some places in there you have to bring functions in.

00:22:23,450 --> 00:22:29,450
And hopefully the places that you bring functions in are places where you need business logic.

00:22:29,450 --> 00:22:33,480
Where something there isn't a service that's provided to do it because nobody does it except

00:22:33,480 --> 00:22:34,480
you.

00:22:34,480 --> 00:22:38,720
And because it's not a perfect world, you need functions that glue things that don't

00:22:38,720 --> 00:22:40,700
operate well together.

00:22:40,700 --> 00:22:44,010
But look for ways to remove functions.

00:22:44,010 --> 00:22:52,740
In AWS, it can communicate directly with services, and instead of mapping directly in the code

00:22:52,740 --> 00:22:56,760
you're working with, you learn velocity templates, which is annoying.

00:22:56,760 --> 00:23:04,810
But once you do that, it's no customer code you've brought in, just configuration.

00:23:04,810 --> 00:23:12,580
And this gets to infrastructure as code is good, but what does code exactly mean?

00:23:12,580 --> 00:23:18,320
Because we talk about configuration as being this different from infrastructure as code.

00:23:18,320 --> 00:23:24,300
But I think that often gets confusing as there's configuration where you've gone into, you

00:23:24,300 --> 00:23:29,910
know, manually gone into a system through a console and configured things that are not

00:23:29,910 --> 00:23:33,000
repeatable.

00:23:33,000 --> 00:23:34,830
But YAML is code.

00:23:34,830 --> 00:23:40,470
YAML is a syntax for domain specific languages.

00:23:40,470 --> 00:23:46,560
Whether it's Kubernetes or cloud formation.

00:23:46,560 --> 00:23:51,760
And so, it's important to remember that understanding your deployed infrastructure is critical in

00:23:51,760 --> 00:23:53,230
the long run.

00:23:53,230 --> 00:23:54,230
Right?

00:23:54,230 --> 00:23:58,110
I like this Tweet here which is how do you evaluate a technology?

00:23:58,110 --> 00:23:59,110
Right?

00:23:59,110 --> 00:24:00,490
This is annoying.

00:24:00,490 --> 00:24:02,160
It's a new thing to learn.

00:24:02,160 --> 00:24:05,530
It may not hit, you know you feel in the zone when I'm using it.

00:24:05,530 --> 00:24:12,140
But it saves my organization time and money, so it's useful.

00:24:12,140 --> 00:24:20,260
And once we're open to new things, serverless providers can enable better managed experiences.

00:24:20,260 --> 00:24:25,450
And this is where sorts of, I think, thinking of containers as the right solution ties us

00:24:25,450 --> 00:24:28,640
to owning a lot of things that are inside of that container.

00:24:28,640 --> 00:24:31,350
The language run time.

00:24:31,350 --> 00:24:32,590
Code from third parties.

00:24:32,590 --> 00:24:37,600
All of those, if you look at some of the models on some providers like Lambda, have ways of

00:24:37,600 --> 00:24:41,540
doing that where it's happening at the service level, not at the build level.

00:24:41,540 --> 00:24:49,150
And I think that's a powerful way that we can enable better managed systems in the future.

00:24:49,150 --> 00:24:54,370
So, it's important to accept the discomfort of not owning your own destiny.

00:24:54,370 --> 00:24:58,440
When you're using a managed provider, outages are stressful because there's nothing you

00:24:58,440 --> 00:24:59,500
can do to fix it.

00:24:59,500 --> 00:25:04,040
You still have work to do to make sure that your system is responding as best it can to

00:25:04,040 --> 00:25:06,390
that outage is awful.

00:25:06,390 --> 00:25:15,800
If I was running a Kafka, instead of kinetics, I could fix it.

00:25:15,800 --> 00:25:21,690
But it's a distraction, and you would almost certainly be worse at it because it's not

00:25:21,690 --> 00:25:24,200
what you do as your primary goal.

00:25:24,200 --> 00:25:30,650
It's a side business at that point and that's a hard thing to do, but it's super critical

00:25:30,650 --> 00:25:32,690
to moving into serverless.

00:25:32,690 --> 00:25:38,460
So, Jared Short provided this for technology.

00:25:38,460 --> 00:25:41,050
If you're on the platform, stay within the ecosystem.

00:25:41,050 --> 00:25:43,530
You remove so many different possibilities that way.

00:25:43,530 --> 00:25:48,490
If you can't get what you need on the platform, buy it from somewhere else.

00:25:48,490 --> 00:25:53,890
But the really important thing, if you can reconsider your requirements to accomplish

00:25:53,890 --> 00:25:57,760
something that you can buy, do that first.

00:25:57,760 --> 00:26:01,810
Because what you're thinking about shipping, you're not sure that it's the right thing

00:26:01,810 --> 00:26:02,810
yet.

00:26:02,810 --> 00:26:08,710
So, it's better to ship something close it using fully managed services quicker than

00:26:08,710 --> 00:26:12,840
to spend a bunch of time building it that then you have to own it afterwards and it

00:26:12,840 --> 00:26:14,480
may not even be the right thing.

00:26:14,480 --> 00:26:17,600
Now, maybe you find that you do need to build something.

00:26:17,600 --> 00:26:21,940
Well, first, this is a funny diagram.

00:26:21,940 --> 00:26:25,900
But the point of, you know, looking for tradeoffs in your requirements that you can build it

00:26:25,900 --> 00:26:29,690
faster is always something that you should do.

00:26:29,690 --> 00:26:31,120
But if you do build it, own it.

00:26:31,120 --> 00:26:36,770
So, if it's something that you could not have built or you could not have bought in a perfect

00:26:36,770 --> 00:26:41,660
serverless world, Greenfield implementation, then it's a differentiator.

00:26:41,660 --> 00:26:43,990
Because no one else has it.

00:26:43,990 --> 00:26:48,630
So, fundamentally, you want to find your part of the business value, right?

00:26:48,630 --> 00:26:50,860
What is your technology working in the service from?

00:26:50,860 --> 00:26:53,320
And you may be far remove from the customer facing product.

00:26:53,320 --> 00:26:57,430
You may only be contributing a small slice that have value.

00:26:57,430 --> 00:27:01,540
But it's there, and you can find it and focus on it.

00:27:01,540 --> 00:27:06,590
You can start with the value that you're immediately providing to other teams in the organization.

00:27:06,590 --> 00:27:08,490
Start to trace the value from there.

00:27:08,490 --> 00:27:13,320
And then make sure all the decisions you're making are oriented around that value.

00:27:13,320 --> 00:27:15,230
That's making serverless choices.

00:27:15,230 --> 00:27:19,270
And so, remembering that you're not the tool.

00:27:19,270 --> 00:27:23,530
Automate the creation of value that you're doing so that you can move on to new and other

00:27:23,530 --> 00:27:24,530
value.

00:27:24,530 --> 00:27:25,530
Right?

00:27:25,530 --> 00:27:26,530
I like this quote.

00:27:26,530 --> 00:27:27,530
But you can turn it around too.

00:27:27,530 --> 00:27:31,720
Automate yourself out of a job and then just keep demanding new jobs.

00:27:31,720 --> 00:27:38,050
So, to sum up, serverless is about focus.

00:27:38,050 --> 00:27:39,130
Right?

00:27:39,130 --> 00:27:42,220
Technology is not the point of what we're doing.

00:27:42,220 --> 00:27:44,400
The nature of development is changing, right?

00:27:44,400 --> 00:27:48,850
That we're tied less to the technologies that we're using and that we can move up the chain

00:27:48,850 --> 00:27:53,660
in value towards what the business needs.

00:27:53,660 --> 00:27:56,350
Find your part of that business value.

00:27:56,350 --> 00:27:57,490
And make serverless choices.

00:27:57,490 --> 00:27:59,040
So, thank you.

00:27:59,040 --> 00:28:01,100
We've got ohm reqs.

00:28:01,100 --> 00:28:02,740
Please come see us at our booth.

00:28:02,740 --> 00:28:05,990
We're out there near the screen.

00:28:05,990 --> 00:28:07,610
And, yeah.

00:28:07,610 --> 00:28:10,299
I think we're out of time.

00:28:10,299 --> 00:28:11,530
>> Sure.

00:28:11,530 --> 00:28:12,760

YouTube URL: https://www.youtube.com/watch?v=gVz0Qb3_DxY


