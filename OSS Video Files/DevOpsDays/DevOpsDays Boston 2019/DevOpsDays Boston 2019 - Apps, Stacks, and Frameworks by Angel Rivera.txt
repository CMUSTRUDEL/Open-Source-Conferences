Title: DevOpsDays Boston 2019 - Apps, Stacks, and Frameworks by Angel Rivera
Publication date: 2019-10-11
Playlist: DevOpsDays Boston 2019
Description: 
	Apps, Stacks, and Frameworks: Avoiding “Shiny Object” Syndrome by Angel Rivera

Technology is fast moving, and devops tools pop up like wildfire. Teams are desperate to solve their problems & often make implementation decisions based on word of mouth, “kick the tires” syndrome or superficial evaluations. In some cases we justify our stack decisions based on project/sprint deadlines, the product’s marketing materials, occasionally, the README files. Really scary stuff!

In this talk I’ll explore how & why teams are easily lulled into believing that shiny objects will independently solve their stack deficiencies. I’ll discuss my experiences with “Shiny Object” frameworks/tools and the true impact they had in actually solving problems. I’ll also discuss some strategies that can help teams make better choices when properly vetting potential solutions based on my experience in the federal government evaluating vendor proposals and homegrown solutions, as the sole DevOps engineer at a startup and other technical teams throughout my career.

#DevOpsDays #DevOpsDaysBoston
Captions: 
	00:00:01,370 --> 00:00:10,200
>> Hello, everyone.

00:00:10,200 --> 00:00:20,720
Welcome to the talk.

00:00:20,720 --> 00:00:24,940
So I'm from south jersey, Philadelphia area.

00:00:24,940 --> 00:00:28,910
So this is a good opportunity to change the topic a little bit.

00:00:28,910 --> 00:00:37,230
So today I want to talk about how Philadelphia whooped the Patriots' butt in Super Bowl -- just

00:00:37,230 --> 00:00:38,230
kidding.

00:00:38,230 --> 00:00:39,230
At the Super Bowl.

00:00:39,230 --> 00:00:43,179
All jokes aside, I'm here to talk about shiny object syndrome.

00:00:43,179 --> 00:00:48,510
That was an opportunity I couldn't pass up.

00:00:48,510 --> 00:00:51,190
I was expecting more of a rough crowd.

00:00:51,190 --> 00:00:53,780
You guys are losing your rep.

00:00:53,780 --> 00:00:57,579
So today we're talking about shiny object syndrome.

00:00:57,579 --> 00:01:03,890
So how many of us have ever like been in a rut and we had to quickly figure something

00:01:03,890 --> 00:01:09,650
out on the technical level and we start going through the Internet and doing searches and

00:01:09,650 --> 00:01:13,540
we find this one thing that like was mindblowing.

00:01:13,540 --> 00:01:16,720
Yet this is the thing that's going to save my butt, right?

00:01:16,720 --> 00:01:18,340
Raise your hand if you've ever been there.

00:01:18,340 --> 00:01:21,860
I've done it multiple times.

00:01:21,860 --> 00:01:24,630
So today I'm going to focus a little bit on that.

00:01:24,630 --> 00:01:28,640
And how to kind of avoid that and keep your teams in check.

00:01:28,640 --> 00:01:32,470
When you're under those kind of situations.

00:01:32,470 --> 00:01:33,890
So my name is Angel Rivera.

00:01:33,890 --> 00:01:39,130
I'm a developer advocate for Circle CI as Michael stated.

00:01:39,130 --> 00:01:44,420
And my job is to basically come out and speak to developers at a grassroots level and learn

00:01:44,420 --> 00:01:47,250
how you all are using technology.

00:01:47,250 --> 00:01:51,110
And then how we can better our products at Circle CI.

00:01:51,110 --> 00:01:58,310
I started my career off in the '90s, and I started off programming professionally at

00:01:58,310 --> 00:01:59,420
the United States Air Force.

00:01:59,420 --> 00:02:01,540
I was working for air force space command.

00:02:01,540 --> 00:02:07,430
At that time we were actually launching rockets, people into space in the shuttle program and

00:02:07,430 --> 00:02:11,999
I was working in that program for most of my enlistment.

00:02:11,999 --> 00:02:17,859
And back then developing software was quite difficult.

00:02:17,859 --> 00:02:19,090
It wasn't like it is today.

00:02:19,090 --> 00:02:24,400
We didn't have all the awesome tools and modernization innovation that we have today.

00:02:24,400 --> 00:02:31,209
I remember when I was a young developer, I was writing code in isolation.

00:02:31,209 --> 00:02:33,310
There was no real version control or anything.

00:02:33,310 --> 00:02:34,680
It was the save as button.

00:02:34,680 --> 00:02:40,139
Save as new and you had multiple files with the date and the time and yeah.

00:02:40,139 --> 00:02:44,230
If I made a mistake I would go back and retrieve that.

00:02:44,230 --> 00:02:45,689
But I always cared about my code.

00:02:45,689 --> 00:02:48,370
Spent a lot of time on it, as we all do.

00:02:48,370 --> 00:02:52,920
I'm sure most developers, they really care about how they develop their code.

00:02:52,920 --> 00:02:59,269
But the problem was I had this code developed and packaged, I would put it on a CD or a

00:02:59,269 --> 00:03:03,049
floppy or some network share, and it would be gone.

00:03:03,049 --> 00:03:07,900
I didn't know what happened to my code.

00:03:07,900 --> 00:03:13,889
Otherwise, when I actually released the code, the operations teams, the only time you would

00:03:13,889 --> 00:03:18,469
hear about it it didn't work, it didn't deploy right, there was something wrong.

00:03:18,469 --> 00:03:21,040
And that was a big problem for me.

00:03:21,040 --> 00:03:25,739
Because like I said I was very curious and I wanted to know how this stuff was -- what

00:03:25,739 --> 00:03:28,250
happened to the code after I wrote it.

00:03:28,250 --> 00:03:32,060
And I started convenience touring down to -- venturing down to the data center which

00:03:32,060 --> 00:03:33,719
was a few doors down the hall.

00:03:33,719 --> 00:03:40,150
I worked in a secure facility after knocking on the door a few times they were like what

00:03:40,150 --> 00:03:43,829
do you want, you're a developer you shouldn't be here.

00:03:43,829 --> 00:03:48,519
I just want to know how my code is run, show me.

00:03:48,519 --> 00:03:50,819
They were like no, close the door, walk away.

00:03:50,819 --> 00:03:54,059
Wrote some more code, put it up on the network share.

00:03:54,059 --> 00:03:59,900
I started walking it down to them on a floppy so that they would open the door.

00:03:59,900 --> 00:04:03,719
And once they let me in, they started realizing I was going to be persistent, I was going

00:04:03,719 --> 00:04:04,760
to be a problem.

00:04:04,760 --> 00:04:09,200
So I was consistent in that and they were like okay, let him in.

00:04:09,200 --> 00:04:12,340
So they started showing me how they were deploying the code.

00:04:12,340 --> 00:04:17,639
I was sitting there live with them, watching the errors come up, if there were any.

00:04:17,639 --> 00:04:19,530
Every time there was always a problem.

00:04:19,530 --> 00:04:21,509
And we were debugging together.

00:04:21,509 --> 00:04:22,889
At the same time.

00:04:22,889 --> 00:04:27,840
And I think when I did that, they started realizing this person really cares.

00:04:27,840 --> 00:04:33,330
He just cares about -- I'm not here to be a mole or whatever for the developer team

00:04:33,330 --> 00:04:36,370
and figure out what's going on behind the doors.

00:04:36,370 --> 00:04:42,430
But again, I consider myself a developer with operational tendencies at this point.

00:04:42,430 --> 00:04:48,460
So I've always, ever since then I've always worked as a developer, but always in the operation

00:04:48,460 --> 00:04:49,460
shops.

00:04:49,460 --> 00:04:55,020
So I maybe would last a month and then they would see a problem they had never seen before

00:04:55,020 --> 00:04:58,340
on the development team and then go we don't know how to fix it.

00:04:58,340 --> 00:05:03,000
Well that's a server issue and I would know how to maneuver and get that fixed.

00:05:03,000 --> 00:05:07,530
And of course the operations teams were like yeah, we want that guy to be our liaison.

00:05:07,530 --> 00:05:10,490
So I've always worked as a liaison.

00:05:10,490 --> 00:05:14,190
And again, probably doing DevOps before DevOps was a thing.

00:05:14,190 --> 00:05:18,419
And I'm sure there's a few in the crowd that also had that experience.

00:05:18,419 --> 00:05:26,020
So I have a story for you about when I was at a company on a really strong DevOps team.

00:05:26,020 --> 00:05:31,690
So again, this was a little bit before DevOps kind of became what it is today.

00:05:31,690 --> 00:05:36,949
But we had a strong team where developers were really, really good at what they did

00:05:36,949 --> 00:05:39,750
and also the operations team and we had really good communication lines.

00:05:39,750 --> 00:05:41,280
There were no egos.

00:05:41,280 --> 00:05:47,580
I think that was attributed to folks being more mature than the general.

00:05:47,580 --> 00:05:52,470
We had more senior-type operators and programmers on the team.

00:05:52,470 --> 00:05:54,669
Which obviously if you have that kind of level of experience.

00:05:54,669 --> 00:06:02,189
And a lot of times the egos are like tampered down quite a bit, because we're a little older.

00:06:02,189 --> 00:06:07,560
So I was working on this team and we were told to create these new features that were

00:06:07,560 --> 00:06:10,290
being requested by customers.

00:06:10,290 --> 00:06:17,180
The issue was that we had the previous -- or the product that we were upgrading had more

00:06:17,180 --> 00:06:18,620
relational data structures.

00:06:18,620 --> 00:06:21,599
So it was flat, 2-D kind of model.

00:06:21,599 --> 00:06:27,340
It was great to start up grading some of the technology.

00:06:27,340 --> 00:06:36,449
We were working with hierarchical model, like JSON.

00:06:36,449 --> 00:06:41,310
Which our team was not really familiar with at the time.

00:06:41,310 --> 00:06:44,500
So we were building this new feature.

00:06:44,500 --> 00:06:51,940
And we were super frustrated because we were still trying to create the features that required

00:06:51,940 --> 00:06:59,080
this hierarchical data model and using the 2D system, which is the relational databases

00:06:59,080 --> 00:07:01,490
that we were using, or the data structures.

00:07:01,490 --> 00:07:02,490
And yeah.

00:07:02,490 --> 00:07:03,490
It was really frustrating.

00:07:03,490 --> 00:07:07,449
So the stuff we came up with was hackie at best.

00:07:07,449 --> 00:07:08,449
It was underperforming.

00:07:08,449 --> 00:07:14,729
It got to the point where we were at our wit's end.

00:07:14,729 --> 00:07:16,860
We couldn't figure this out.

00:07:16,860 --> 00:07:22,349
We brought in a couple of consultants and they were like there's a book you should read,

00:07:22,349 --> 00:07:26,259
we read that book and we still couldn't figure this out.

00:07:26,259 --> 00:07:31,660
At least to make it work efficient enough to deploy.

00:07:31,660 --> 00:07:37,750
So I had been working with MongoDB in some personal projects and it was still very new,

00:07:37,750 --> 00:07:40,229
but it definitely solved our problem.

00:07:40,229 --> 00:07:43,189
I pitched it to the team.

00:07:43,189 --> 00:07:48,590
I said look, with Mongo the data will lie in the same structure that we need it.

00:07:48,590 --> 00:07:52,060
There's not a lot of processing to go back and forth, we don't have to implement all

00:07:52,060 --> 00:07:57,330
these weird hacks that we were looking at and it seemed like the perfect fit.

00:07:57,330 --> 00:08:02,939
The problem was that no one really had experience, except for myself on the team.

00:08:02,939 --> 00:08:05,810
So this was a really new technology.

00:08:05,810 --> 00:08:10,259
But like again, we were so desperate to solve this, we were like yes, the team is like this

00:08:10,259 --> 00:08:11,340
is great.

00:08:11,340 --> 00:08:12,340
This is working.

00:08:12,340 --> 00:08:16,950
We installed it, everybody had a little copy on their local boxes.

00:08:16,950 --> 00:08:18,039
And then right.

00:08:18,039 --> 00:08:21,259
We deployed, we started deploying it locally, starting developing on it.

00:08:21,259 --> 00:08:30,219
And sure enough I became the de facto MongoDB expert whatever that means on the team.

00:08:30,219 --> 00:08:36,039
Literally I only read this little pamphlet they gave me at a meet-up.

00:08:36,039 --> 00:08:38,050
Yeah, it was interesting.

00:08:38,050 --> 00:08:43,090
But most people on the team managers were like yes, this solves it.

00:08:43,090 --> 00:08:45,589
We had spent all this time and money.

00:08:45,589 --> 00:08:50,560
So we started building out and MongoDB infrastructure.

00:08:50,560 --> 00:08:57,540
We did reach out to Mongo for support and they told us you need to deploy 5 nodes in

00:08:57,540 --> 00:09:01,510
your cluster and all the usual stuff that goes on with that.

00:09:01,510 --> 00:09:07,279
We did that, that worked, the operations team was happy, this was easy to do.

00:09:07,279 --> 00:09:12,660
We got them up and running, they're all talking and replicating data and it's all good.

00:09:12,660 --> 00:09:15,770
But again, zero MongoDB experience.

00:09:15,770 --> 00:09:17,870
Like, I was it.

00:09:17,870 --> 00:09:19,839
And I was comfortable with it for some reason.

00:09:19,839 --> 00:09:22,860
Normally I would be nervous and wow, this is not good.

00:09:22,860 --> 00:09:24,430
But I was confident.

00:09:24,430 --> 00:09:27,260
I can handle this.

00:09:27,260 --> 00:09:29,150
So we deployed.

00:09:29,150 --> 00:09:37,180
The app was built on Mongo, we packaged it up, we got a nice release and we deployed

00:09:37,180 --> 00:09:39,470
it.

00:09:39,470 --> 00:09:44,670
The operations team did a great job putting together the nodes, the cluster that we needed.

00:09:44,670 --> 00:09:46,610
And yeah, everything was working well.

00:09:46,610 --> 00:09:48,490
But it was a quick deploy.

00:09:48,490 --> 00:09:52,300
We did this really, really quickly because we had chewed up a lot of our time trying

00:09:52,300 --> 00:09:58,750
to get this application designed and then deployed.

00:09:58,750 --> 00:10:03,279
So once we deployed it, project goals were met, management was happy.

00:10:03,279 --> 00:10:04,279
We were happy.

00:10:04,279 --> 00:10:06,769
We were patting ourselves on the back.

00:10:06,769 --> 00:10:07,769
We were like yes.

00:10:07,769 --> 00:10:09,380
We're the "A" team we did it.

00:10:09,380 --> 00:10:13,360
Customers started using the app right away.

00:10:13,360 --> 00:10:17,050
It was what they were asking for for a while.

00:10:17,050 --> 00:10:18,050
Life was good.

00:10:18,050 --> 00:10:23,870
We were moving on to the next project and kicking ass and taking names.

00:10:23,870 --> 00:10:28,889
Until, bum bum bum, fast forward 90 days.

00:10:28,889 --> 00:10:29,990
Alerts from Mongo.

00:10:29,990 --> 00:10:34,790
The CPUs are pegged 100%.

00:10:34,790 --> 00:10:37,160
We just had severe disk thrashing.

00:10:37,160 --> 00:10:40,730
Something is wrong.

00:10:40,730 --> 00:10:43,080
We got alerted.

00:10:43,080 --> 00:10:44,080
Performance declined.

00:10:44,080 --> 00:10:48,690
Our customers were telling us hey, we're timing it out, blah blah blah.

00:10:48,690 --> 00:10:53,199
Right away we jump into troubleshooting mode, as the great team that we were.

00:10:53,199 --> 00:10:54,560
Very experienced.

00:10:54,560 --> 00:10:59,740
People just rolled up their sleeves and started digging in, looking at logs, looking at performance,

00:10:59,740 --> 00:11:02,090
all that good stuff.

00:11:02,090 --> 00:11:08,769
And then as we were looking through and doing our troubleshooting, we discovered that our

00:11:08,769 --> 00:11:14,090
users had generated over 15 million documents or records in MongoDB.

00:11:14,090 --> 00:11:15,670
This is nothing.

00:11:15,670 --> 00:11:20,930
This should be something that database should chew up, no problem.

00:11:20,930 --> 00:11:26,380
But of course, once we started digging deeper down into the problem, yeah, my queries were

00:11:26,380 --> 00:11:27,380
crap, right?

00:11:27,380 --> 00:11:29,370
They were just total garbage.

00:11:29,370 --> 00:11:33,950
I was indexing on the wrong keys, you know.

00:11:33,950 --> 00:11:35,440
Everything was wrong with it.

00:11:35,440 --> 00:11:37,550
The schema was definitely inept.

00:11:37,550 --> 00:11:43,971
So I don't know if you ever tried to take a non-relational -- or a relational database

00:11:43,971 --> 00:11:47,930
and create it in a relational system like MongoDB.

00:11:47,930 --> 00:11:49,820
Don't do that.

00:11:49,820 --> 00:11:51,990
Nonrelational means not relational don't try to create.

00:11:51,990 --> 00:11:55,390
It slowed the system down.

00:11:55,390 --> 00:11:57,160
It was terrible.

00:11:57,160 --> 00:12:02,029
So we quickly came up with -- we did some simple math and said all right, we know that

00:12:02,029 --> 00:12:07,070
after so many records were in the database, we decided to triage it by moving the older

00:12:07,070 --> 00:12:12,760
records into temporary storage while the system recovered itself, which it did, really quickly.

00:12:12,760 --> 00:12:14,680
No problem.

00:12:14,680 --> 00:12:15,959
But the damage had been done.

00:12:15,959 --> 00:12:19,899
Our customers suffered a bad experience.

00:12:19,899 --> 00:12:23,180
Our organizations and our customers lost time and money.

00:12:23,180 --> 00:12:26,130
Which is never a good thing.

00:12:26,130 --> 00:12:30,570
And then this was most impactful for me was our street cred was gone.

00:12:30,570 --> 00:12:35,190
The team was decimated like our confidence levels and such.

00:12:35,190 --> 00:12:41,790
Like how the hell did this happen.

00:12:41,790 --> 00:12:47,670
As good teams did we performed the hot wash or the post mortem digging deep to see the

00:12:47,670 --> 00:12:52,089
real reasons why this happened.

00:12:52,089 --> 00:12:58,200
Some develop ever had some bad inefficient programming, that's common.

00:12:58,200 --> 00:13:00,360
Those are easy fixes.

00:13:00,360 --> 00:13:05,250
We also discovered that yeah, we didn't run any of our SOPs and our tests.

00:13:05,250 --> 00:13:07,010
The coverage was just garbage.

00:13:07,010 --> 00:13:11,920
We were so desperate to deploy this thing and get it done.

00:13:11,920 --> 00:13:19,709
We neglected almost everything that we so always helped or firmly believed our SOPs,

00:13:19,709 --> 00:13:24,209
all that good stuff, integration testing, was pretty much out the window.

00:13:24,209 --> 00:13:27,589
We didn't do any load testing, nothing.

00:13:27,589 --> 00:13:30,120
That was a big problem.

00:13:30,120 --> 00:13:33,449
And this was also something that we discovered.

00:13:33,449 --> 00:13:40,050
We didn't understand, not only the technology, but we didn't understand how the philosophies

00:13:40,050 --> 00:13:42,080
behind the technology.

00:13:42,080 --> 00:13:44,790
So non-relational versus relational.

00:13:44,790 --> 00:13:49,390
I didn't know like anything about that and neither did anyone on the team.

00:13:49,390 --> 00:13:54,019
So there was a lot of points of failure that we kind of discovered.

00:13:54,019 --> 00:13:58,519
And we were disappointed in ourselves, severely disappointed, because that shouldn't have

00:13:58,519 --> 00:13:59,850
happened.

00:13:59,850 --> 00:14:02,550
So avoiding shiny object syndrome.

00:14:02,550 --> 00:14:07,279
So after we discovered all this stuff, I'm going to go through a few things here to help

00:14:07,279 --> 00:14:08,800
you all with your teams.

00:14:08,800 --> 00:14:15,310
And avoiding what happened to myself and other folks, I'm sure in this room.

00:14:15,310 --> 00:14:18,540
So first thing is don't believe the hype.

00:14:18,540 --> 00:14:24,980
The marketing documents or even the documentation for the product itself.

00:14:24,980 --> 00:14:30,300
A lot of times you've got to understand, especially with MongoDB they were a start-up at the time,

00:14:30,300 --> 00:14:32,630
sometimes we fake it until we make it as a start-up.

00:14:32,630 --> 00:14:39,210
One of the things I learned from this was definitely understanding the whole reason

00:14:39,210 --> 00:14:46,670
why these products exist and what the specific problems are trying to solve.

00:14:46,670 --> 00:14:47,670
Is it viable.

00:14:47,670 --> 00:14:51,870
What they're saying, is this really viable.

00:14:51,870 --> 00:14:55,380
Can this be achieved with this product.

00:14:55,380 --> 00:15:01,570
We were looking at Mongo as kind of the all-in-one, one-stop solution to help us move on.

00:15:01,570 --> 00:15:07,130
We were even talking about deploying, converting the rest of the stack over to this thing.

00:15:07,130 --> 00:15:13,170
That quickly -- we put the brakes on that real quick once we discovered this problem.

00:15:13,170 --> 00:15:17,420
Because again we didn't really fully understand the capabilities of the technology.

00:15:17,420 --> 00:15:20,319
Which is the biggest takeaway here.

00:15:20,319 --> 00:15:23,750
Understand the capabilities of this technology.

00:15:23,750 --> 00:15:25,630
And also don't believe your own hype.

00:15:25,630 --> 00:15:32,199
So again, we were really confident, almost cocky, arrogant.

00:15:32,199 --> 00:15:40,670
We got grounded real quick when we experienced this and we figured out that we were not operating

00:15:40,670 --> 00:15:43,459
as well as we thought we were.

00:15:43,459 --> 00:15:48,199
So obviously you want to thoroughly vet your new technologies.

00:15:48,199 --> 00:15:54,630
Some of this stuff -- well it's important to vet it, but again I think for us at that

00:15:54,630 --> 00:16:02,910
point in time, we were so desperate that we kind of ignored the warning signs.

00:16:02,910 --> 00:16:07,009
Some of the stuff that I experienced when I was deploying this, I was the only person

00:16:07,009 --> 00:16:10,560
who understood the querying language, how to index things.

00:16:10,560 --> 00:16:20,019
Obviously I didn't understand it really well and I vetted it throughout my team and they

00:16:20,019 --> 00:16:23,899
were like yeah, that looks good to me.

00:16:23,899 --> 00:16:26,009
Just go with that key.

00:16:26,009 --> 00:16:27,180
We'll take a look at it.

00:16:27,180 --> 00:16:28,800
It will work.

00:16:28,800 --> 00:16:33,230
And again, when you're vetting this technology, understand that because you run it on your

00:16:33,230 --> 00:16:37,509
laptop or on some server that's sitting under somebody's desk, it's not going to perform

00:16:37,509 --> 00:16:40,170
the same way when you deploy it into production.

00:16:40,170 --> 00:16:44,079
These are common sense things but I think it needs to be said when you're playing with

00:16:44,079 --> 00:16:49,949
new technology because we always get bit by those differences.

00:16:49,949 --> 00:16:51,730
Obviously don't break protocol.

00:16:51,730 --> 00:16:56,910
If you have SOPs, if you have procedures, if you have -- 5 minutes?

00:16:56,910 --> 00:16:58,870
Really, okay.

00:16:58,870 --> 00:17:01,870
So don't break protocol.

00:17:01,870 --> 00:17:04,670
If you don't have protocols or standard operating procedures, make some.

00:17:04,670 --> 00:17:11,130
A lot of times I work with teams, like start-ups, they don't have SOPs in place.

00:17:11,130 --> 00:17:18,780
These are great guidelines for like consistency as well as enabling people to be knowledgeable

00:17:18,780 --> 00:17:23,419
about your systems and the way you do things at your company.

00:17:23,419 --> 00:17:26,209
Avoid the set it and forget it mentality.

00:17:26,209 --> 00:17:31,150
We fall into that a lot when we're standing up new things and it's functioning.

00:17:31,150 --> 00:17:35,990
Luckily we had a system set up.

00:17:35,990 --> 00:17:38,840
So technology is about people, right?

00:17:38,840 --> 00:17:44,730
And when you have people involved in technology or involved period, period equals culture.

00:17:44,730 --> 00:17:51,100
And cultures set our goals and our standards amongst ourselves.

00:17:51,100 --> 00:17:54,210
So right now I want to take a little bit of time to talk about -- I'm from New Jersey,

00:17:54,210 --> 00:17:55,210
by the way.

00:17:55,210 --> 00:17:57,250
I had to include Tony in there.

00:17:57,250 --> 00:18:04,410
But I want to talk about how we can just some advice on cultures and teams.

00:18:04,410 --> 00:18:07,270
So since I got a few minutes left I'm going to breeze through these quick.

00:18:07,270 --> 00:18:08,679
I want to talk about managers.

00:18:08,679 --> 00:18:09,679
I manage teams.

00:18:09,679 --> 00:18:12,340
I'm sure some of you folks have managed teams in here as well.

00:18:12,340 --> 00:18:16,539
To go through some of the things I've experienced in my life and I would like to share with

00:18:16,539 --> 00:18:17,539
you.

00:18:17,539 --> 00:18:21,030
I have a management style that I call sudo management.

00:18:21,030 --> 00:18:26,360
What I mean by that is when I work with teams and I'm managing teams, I like to tell my

00:18:26,360 --> 00:18:31,210
teams I'm a peer, I'm a resource to you, I will work with you in the trenches side by

00:18:31,210 --> 00:18:37,750
side, when I have to do managerial tasks, I suit up and do the tasks and go gracefully

00:18:37,750 --> 00:18:43,280
back down to the team.

00:18:43,280 --> 00:18:46,570
It diminishes those what you call it, the -- sorry.

00:18:46,570 --> 00:18:55,400
Anyway, just diminishes those barriers -- I'm looking for a word here -- that will empower

00:18:55,400 --> 00:18:57,620
people to be able to do things they do.

00:18:57,620 --> 00:19:00,020
Make decisions without having to really ask.

00:19:00,020 --> 00:19:05,789
And I think that forms more of a leadership kind of culture, at least from my experience.

00:19:05,789 --> 00:19:07,530
Again, empower your people.

00:19:07,530 --> 00:19:09,580
Let them make choices.

00:19:09,580 --> 00:19:12,660
And let them make mistakes as well.

00:19:12,660 --> 00:19:16,820
Obviously I'm sure this has been a common theme, embrace the failure.

00:19:16,820 --> 00:19:23,559
I actually like to reward failures in some cases, especially when I work at a CI/CD company,

00:19:23,559 --> 00:19:28,130
we want people to fail so you understand what's going on with your software and be able to

00:19:28,130 --> 00:19:31,429
fix the things that need to be fixed.

00:19:31,429 --> 00:19:32,770
Mentoring is really important.

00:19:32,770 --> 00:19:35,309
So be a good mentor to your people.

00:19:35,309 --> 00:19:40,700
Make sure that you're giving them as much time as possible.

00:19:40,700 --> 00:19:44,570
Also fostering an environment where they can learn and grow.

00:19:44,570 --> 00:19:50,850
It's really important for people to understand as far as mentors go, not only do you have

00:19:50,850 --> 00:19:57,950
to be there to answer any of their questions, you kind of lead by example as well.

00:19:57,950 --> 00:20:00,039
Definitely as a manager, make those hard choices.

00:20:00,039 --> 00:20:03,060
Don't sustain untenable situations.

00:20:03,060 --> 00:20:08,440
If something is not working for you and it's impacting the whole team, you've got to take

00:20:08,440 --> 00:20:15,320
care of that before it starts matriculating through and becoming a toxic environment.

00:20:15,320 --> 00:20:16,409
So let's talk about individuals.

00:20:16,409 --> 00:20:20,380
I think this will encompass all of us here.

00:20:20,380 --> 00:20:26,110
I'm not a big fan of people that say I'm not a manager or that's not my responsibility.

00:20:26,110 --> 00:20:29,740
I think if you're a part of a team, it's definitely your responsibility.

00:20:29,740 --> 00:20:35,690
Especially if you want to put food on your table and work in an environment where you're

00:20:35,690 --> 00:20:37,010
respected.

00:20:37,010 --> 00:20:41,510
A lot of folks that have this attitude don't last very long on my team.

00:20:41,510 --> 00:20:43,530
I just can't have it.

00:20:43,530 --> 00:20:48,480
It doesn't produce a lot of good will within the team.

00:20:48,480 --> 00:20:53,429
If something is broke, this is one that irritates me a lot.

00:20:53,429 --> 00:20:58,760
I see developers sometimes, they know what's wrong with the code, they look at the version

00:20:58,760 --> 00:21:04,490
control system, GitHub or GitLab, whatever, they can easily fix it, they can submit a

00:21:04,490 --> 00:21:05,490
PR.

00:21:05,490 --> 00:21:06,490
They don't.

00:21:06,490 --> 00:21:10,850
They just call out hey, this is broken and they don't even, this is not going to work

00:21:10,850 --> 00:21:11,909
and there's no reason why.

00:21:11,909 --> 00:21:13,530
Don't be that person.

00:21:13,530 --> 00:21:19,620
Either fix it or submit a PR or give some detail on how someone else can fix it or mentor

00:21:19,620 --> 00:21:20,680
someone.

00:21:20,680 --> 00:21:21,980
That's really important.

00:21:21,980 --> 00:21:27,440
It's a nice way to level up, as an individual, as a teammate.

00:21:27,440 --> 00:21:30,730
If your mentee, definitely learn how to learn.

00:21:30,730 --> 00:21:34,770
I think in technology, you definitely have to be a learner.

00:21:34,770 --> 00:21:36,440
And be passionate about it.

00:21:36,440 --> 00:21:45,280
I used to get tons of folks querying me about things that I know were in like an SOP or

00:21:45,280 --> 00:21:46,280
something.

00:21:46,280 --> 00:21:49,799
Then they would get a let me Google that for you.

00:21:49,799 --> 00:21:50,820
So be cognizant.

00:21:50,820 --> 00:21:51,820
And don't overdo it either.

00:21:51,820 --> 00:21:57,070
I've seen people overdo it where they're trying to -- I'm done.

00:21:57,070 --> 00:21:59,419
I'm going to keep going.

00:21:59,419 --> 00:22:02,380
I have a few more slides.

00:22:02,380 --> 00:22:04,810
[ Laughter ] But anyway.

00:22:04,810 --> 00:22:05,810
Disobey.

00:22:05,810 --> 00:22:07,529
A little rogue.

00:22:07,529 --> 00:22:11,190
So just do the research and don't spend too much time on it.

00:22:11,190 --> 00:22:12,600
I would say 20 minutes at most.

00:22:12,600 --> 00:22:19,680
If you can't figure something out in 20 minutes; hit your teammates up and figure this out.

00:22:19,680 --> 00:22:20,680
Listening.

00:22:20,680 --> 00:22:23,430
I find this hard because I'm a talker.

00:22:23,430 --> 00:22:29,300
If you're hearing someone's opinion, take a moment, you breathe, let them speak and

00:22:29,300 --> 00:22:30,300
then respond.

00:22:30,300 --> 00:22:32,320
It's just a common courtesy, I know.

00:22:32,320 --> 00:22:35,289
But we're in a high-pressure job, a lot of us.

00:22:35,289 --> 00:22:38,190
And sometimes we don't have that time.

00:22:38,190 --> 00:22:42,669
And I'm from New Jersey so we definitely have to speak over you.

00:22:42,669 --> 00:22:44,400
But again, I find it difficult.

00:22:44,400 --> 00:22:46,570
Just a little reminder.

00:22:46,570 --> 00:22:48,000
Just quiet.

00:22:48,000 --> 00:22:49,000
Communication.

00:22:49,000 --> 00:22:52,030
I think communication is -- I know it's different from listening.

00:22:52,030 --> 00:22:53,030
Because it requires both.

00:22:53,030 --> 00:22:58,400
But one of the things I wanted to mention here is there is a lot of forms of communications.

00:22:58,400 --> 00:22:59,400
Try to understand.

00:22:59,400 --> 00:23:01,460
Be empathetic to some of your coworkers.

00:23:01,460 --> 00:23:05,890
Maybe they don't communicate the same way you do.

00:23:05,890 --> 00:23:07,850
Level up on your writing skills.

00:23:07,850 --> 00:23:12,860
That's another one that I see a lot of folks not necessarily grammar or anything, it's

00:23:12,860 --> 00:23:17,000
just like hey I read a text and taking away some sort of emotion.

00:23:17,000 --> 00:23:18,000
Don't do that.

00:23:18,000 --> 00:23:22,830
If you feel like you're having bad feelings after reading someone's texts, invite them

00:23:22,830 --> 00:23:29,059
to coffee, have a drink, I promise you that didn't intend what I thought.

00:23:29,059 --> 00:23:33,080
We have these things in your head that probably aren't there.

00:23:33,080 --> 00:23:34,080
Communicate.

00:23:34,080 --> 00:23:38,669
And especially in this world today, the way society is today, I think communication, we

00:23:38,669 --> 00:23:42,260
have to be more empathetic, more compassionate.

00:23:42,260 --> 00:23:45,100
So in closing, tech problems are not tech problems.

00:23:45,100 --> 00:23:47,450
I think it's more like people problems.

00:23:47,450 --> 00:23:50,179
And these are easy things to solve.

00:23:50,179 --> 00:23:56,010
And again, let's move forward from today on, and build better cultures with our teams.

00:23:56,010 --> 00:23:58,390
Hopefully this talk has inspired you a little bit.

00:23:58,390 --> 00:24:00,590
I know I went over, I'm sorry.

00:24:00,590 --> 00:24:03,280
If you want to reach me, Twitter is great.

00:24:03,280 --> 00:24:05,809
And thank you all for sitting here and listening to me.

00:24:05,809 --> 00:24:06,809
Appreciate it.

00:24:06,809 --> 00:24:06,810

YouTube URL: https://www.youtube.com/watch?v=bzgKIVpxn-w


