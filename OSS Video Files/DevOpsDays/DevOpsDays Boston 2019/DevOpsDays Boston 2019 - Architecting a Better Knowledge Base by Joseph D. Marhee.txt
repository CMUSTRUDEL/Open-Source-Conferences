Title: DevOpsDays Boston 2019 - Architecting a Better Knowledge Base by Joseph D. Marhee
Publication date: 2019-10-11
Playlist: DevOpsDays Boston 2019
Description: 
	Architecting a Better Knowledge Base: Pragmatic Solutions Engineering by Joseph D. Marhee

The desire to try and implement every new and exciting technology is sometimes insatiable (how many times have you heard “We tried Kubernetes, but…” or “TensorFlow seems great, but…” or “What even is Lambda and how do we get started?”, “host it ourselves, or put it on X?”), but how do you assess your needs, define your problem, refine a solution, and the hardest part of all, select the tools to implement that solution when the volume is turned up to 11 on every new part of the mythical cloud stack?

What underlies one set of answers to these questions is a process that is guided by a hierarchy of cognitive process that has three concepts:

1. Data
2. Knowledge
3. Wisdom
In practice, it has 3 analogous parts: Discovery, Iteration, and Delivery.

How this process impacts your environment can mean the difference between a well-executed grasp at immutability in your infrastructure, and an over-engineered, under-planned deployment, into production. This talk will, swiftly, introduce you to this problem-solving process.

#DevOpsDays #DevOpsDaysBoston
Captions: 
	00:00:01,370 --> 00:00:18,120
>> Hi.

00:00:18,120 --> 00:00:20,770
Like he said, I'm Joseph Marhee.

00:00:20,770 --> 00:00:23,130
Ecosystem engineer.

00:00:23,130 --> 00:00:30,020
So what I'm going to talk about is partly the story of how I developed a process to

00:00:30,020 --> 00:00:34,270
create a better knowledge base for my solution engineering teams and I follow this process

00:00:34,270 --> 00:00:40,280
again and again as I move between companies, orgs facing different challenges and I come

00:00:40,280 --> 00:00:48,989
to realize this is a process that usually exists in some form or another between engineering

00:00:48,989 --> 00:00:52,680
organizations, sales engineering teams, customer success times, whatever.

00:00:52,680 --> 00:01:00,559
And I found that codifying in this way has been productive.

00:01:00,559 --> 00:01:01,969
We talked about my background a little bit.

00:01:01,969 --> 00:01:04,790
These are the companies where I've done this sort of thing.

00:01:04,790 --> 00:01:09,550
And the goal, the goal for a lot of this, especially if you're an infrastructure in

00:01:09,550 --> 00:01:15,040
service or your product is hard to describe as customers, making a better customer experience,

00:01:15,040 --> 00:01:19,660
the customer does president have to be your paying customers, it can be engineers in your

00:01:19,660 --> 00:01:26,160
organization, it can be whomever you're servicing.

00:01:26,160 --> 00:01:29,180
Someone talked about this yesterday too, the difference between that.

00:01:29,180 --> 00:01:36,280
But I think you can extend it to say that anybody who relies on your work stands to

00:01:36,280 --> 00:01:38,440
benefit from this.

00:01:38,440 --> 00:01:43,530
It's mostly about making the platform accessible to whoever is using it on whatever level they're

00:01:43,530 --> 00:01:44,650
using it.

00:01:44,650 --> 00:01:49,460
So who am I to tell you that your knowledge base is terrible?

00:01:49,460 --> 00:01:51,270
That's not necessarily the case that it is terrible.

00:01:51,270 --> 00:01:55,940
But sometimes they're not treated as living documents in the case of documentation for

00:01:55,940 --> 00:01:57,020
example.

00:01:57,020 --> 00:02:01,340
In this case what I'm talking about is your team's collective knowledge, how you access

00:02:01,340 --> 00:02:06,240
that collective knowledge, how it gets used, how it gets applied.

00:02:06,240 --> 00:02:11,620
Needing a better one is how you service that knowledge base, how you service the index

00:02:11,620 --> 00:02:18,269
of things how you on board people in such a way that you know what they know and you

00:02:18,269 --> 00:02:23,749
can work in this collectivized way which is super important when you're doing things like

00:02:23,749 --> 00:02:29,430
solutions architecture, doing things like DevOps planning, capacity planning, whatever

00:02:29,430 --> 00:02:33,989
that function inside your organization might be.

00:02:33,989 --> 00:02:41,220
In our case, the solutions at the provider in which I worked, when I developed this process

00:02:41,220 --> 00:02:45,549
that is, the issue we faced was we were constantly responding reactively.

00:02:45,549 --> 00:02:50,420
We were responding to pages, we were responding to customer outages, performance issues, trouble

00:02:50,420 --> 00:02:53,120
tickets, what have you.

00:02:53,120 --> 00:02:57,099
All the things that require troubleshooting and being on the defensive so you have to

00:02:57,099 --> 00:02:59,660
kind of manage those expectations.

00:02:59,660 --> 00:03:04,150
And the company at the time was facing problems of scale, problems of perception.

00:03:04,150 --> 00:03:09,810
So we were a very small team dealing with very large customers spending tons of money

00:03:09,810 --> 00:03:14,879
building big environments that they kind of built on their own.

00:03:14,879 --> 00:03:21,349
And couldn't be -- couldn't be the best it could be on top of the platform.

00:03:21,349 --> 00:03:26,560
They weren't leveraging things to the best advantage which is a failure on our part as

00:03:26,560 --> 00:03:29,069
product designers, as engineers, whatever.

00:03:29,069 --> 00:03:36,980
And the problem of perception I'm talking about is this product had a reputation for

00:03:36,980 --> 00:03:39,900
being good for testing, versus production.

00:03:39,900 --> 00:03:45,269
And you know, and that's a civility issue, that's an SRE issue.

00:03:45,269 --> 00:03:52,560
And that was something that we wanted work collaboratively with customers, between teams,

00:03:52,560 --> 00:04:00,069
take feedback to our engineering teams, and we found that we had to start asking the difficult

00:04:00,069 --> 00:04:03,909
questions about what we were doing.

00:04:03,909 --> 00:04:09,159
Our team was three people, for example, servicing a customer base of thousands.

00:04:09,159 --> 00:04:15,389
And is there a way for a small team to service a large cohort.

00:04:15,389 --> 00:04:17,910
And how do we make these customer interactions pro active.

00:04:17,910 --> 00:04:21,590
And by proactive I mean reaching out when there's not something wrong.

00:04:21,590 --> 00:04:28,000
Even if it's as simple as e-mailing to check in, or having some kind of active community

00:04:28,000 --> 00:04:35,470
where you can share demos and things like that.

00:04:35,470 --> 00:04:40,889
And when you are heavily resourced constrained, those things sound great but are hard to implement,

00:04:40,889 --> 00:04:48,480
so that's where a new framework or formalizing the things that folks often say to do to address

00:04:48,480 --> 00:04:53,030
these problems came in to play.

00:04:53,030 --> 00:05:00,370
So I think that having a good knowledge base, having the ability to say our team contains

00:05:00,370 --> 00:05:04,819
these factors, these skills, these pieces of knowledge, this experience.

00:05:04,819 --> 00:05:08,509
Our team, for example, was made up of a systems engineer, me.

00:05:08,509 --> 00:05:14,590
A security engineer of database people, distributive people, network engineers, whatever.

00:05:14,590 --> 00:05:20,990
And often times when you're working with cloud services, these solutions are complex, they're

00:05:20,990 --> 00:05:28,610
multidisciplined, they might be vendor-specific if they're running multiple providers.

00:05:28,610 --> 00:05:33,259
So the way we address this, we realized we had gaps in our understanding of each other

00:05:33,259 --> 00:05:36,430
and what the needs of our customers were, what our customers know how to do, what they

00:05:36,430 --> 00:05:37,639
need help with.

00:05:37,639 --> 00:05:40,410
So we created a framework that I'm going to discuss in a second.

00:05:40,410 --> 00:05:47,729
I'm sorry, I know I keep talking about it, but the idea was that we would use this to

00:05:47,729 --> 00:05:54,180
smooth the friction you're feeling with frustrated customers who may be questioning why they

00:05:54,180 --> 00:05:55,810
even chose you in the first place.

00:05:55,810 --> 00:05:59,689
Because if it really was about your competitors being better, they would be using those competitors.

00:05:59,689 --> 00:06:03,620
There's a reason they were using you and understanding those reasons is important.

00:06:03,620 --> 00:06:11,580
And the ability to interface with these customers is what is going to drive the sustainability

00:06:11,580 --> 00:06:14,320
of your platform through these customer relationships.

00:06:14,320 --> 00:06:22,139
So I created the theory behind all this was that data, knowledge and then wisdom were

00:06:22,139 --> 00:06:25,990
the key concepts of what needed to underlie this process, what needed to underlie every

00:06:25,990 --> 00:06:31,150
interaction we have and they're going to advance through these concepts as stages and the stages

00:06:31,150 --> 00:06:35,470
they map to are discovery, iteration and deliverability.

00:06:35,470 --> 00:06:41,370
The idea is when we're having these interactions, like a piece of sales literature I came across

00:06:41,370 --> 00:06:44,720
once, introduced me to the phrase leaving a trail of trust behind.

00:06:44,720 --> 00:06:48,870
Even if you don't make the sale, even if you don't solve the problem to 100% satisfaction,

00:06:48,870 --> 00:06:54,080
when you have that kind of productive relationship, the effort counts for a lot.

00:06:54,080 --> 00:06:57,531
Which is why being proactive about reaching out gives them opportunities to trust you,

00:06:57,531 --> 00:06:58,919
gives you confidence in your team's ability.

00:06:58,919 --> 00:07:06,560
They're more likely to trust you if you say you can't do something and be open to other

00:07:06,560 --> 00:07:10,590
paths forward.

00:07:10,590 --> 00:07:15,130
When we talk about data, we're talking about the data collection of just all interactions.

00:07:15,130 --> 00:07:16,220
What's their software stack.

00:07:16,220 --> 00:07:26,169
What are they trying to solve, what are they this -- this is all just raw data in the discovery

00:07:26,169 --> 00:07:29,849
process you're collecting the data, you're not analyzing it.

00:07:29,849 --> 00:07:34,539
You do not want to try to contextualize it.

00:07:34,539 --> 00:07:39,610
You risk introducing biases acting on assumptions.

00:07:39,610 --> 00:07:41,879
And that's all it is at this stage.

00:07:41,879 --> 00:07:43,970
You're just aggregating the information.

00:07:43,970 --> 00:07:47,250
You're keeping a record of contacts, everything.

00:07:47,250 --> 00:07:52,319
And this can and should be done by everybody in the organization.

00:07:52,319 --> 00:07:57,400
So whatever CRM you're using in our case we built a tool specifically for this which I'm

00:07:57,400 --> 00:07:58,719
going to talk about as well.

00:07:58,719 --> 00:08:08,150
But having some way to create a database of these metrics and what kind of interactions

00:08:08,150 --> 00:08:12,460
they've had with your technology, what kind of issues they've run into is going to be

00:08:12,460 --> 00:08:15,979
heavily clarifying.

00:08:15,979 --> 00:08:21,610
So when you're ready to iterate this data and try to -- and you're going to repeat this

00:08:21,610 --> 00:08:24,449
process for every interaction.

00:08:24,449 --> 00:08:27,889
You're not -- this is not a one and done process.

00:08:27,889 --> 00:08:32,380
They might come to you once for, I'm experiencing this issue on Kubernetes on your platform

00:08:32,380 --> 00:08:39,030
with this CI provider or this plugin or whatever, and you would run this problem through this

00:08:39,030 --> 00:08:40,310
formula.

00:08:40,310 --> 00:08:46,400
So an iteration is probably going to happen more than once.

00:08:46,400 --> 00:08:51,529
And so basically what this process is, is you're eliminating what's irrelevant.

00:08:51,529 --> 00:08:52,529
What's noise.

00:08:52,529 --> 00:08:56,010
You're trying to look at the signal in all of their communications with you.

00:08:56,010 --> 00:08:59,570
And through this process you develop these new skills.

00:08:59,570 --> 00:09:05,160
Each of you on your team is a chard in a huge knowledge database.

00:09:05,160 --> 00:09:08,870
You develop a certain amount of overlap so you get better and faster at this as you iterate

00:09:08,870 --> 00:09:12,529
over things for a variety of customers.

00:09:12,529 --> 00:09:20,339
In this case you're cultivating new knowledge based on the context of your customers.

00:09:20,339 --> 00:09:25,081
So the last stage is delivery, which is when you're actually sitting down with the customer

00:09:25,081 --> 00:09:27,600
and saying these are our proposals for you.

00:09:27,600 --> 00:09:29,400
Let's talk about it.

00:09:29,400 --> 00:09:32,260
Let's talk about the issues that you've experienced.

00:09:32,260 --> 00:09:34,080
Here are our conclusions about it.

00:09:34,080 --> 00:09:38,730
Is this something that you feel is an accurate representation of the issues you're experiencing

00:09:38,730 --> 00:09:40,029
on the platform.

00:09:40,029 --> 00:09:43,540
And again, these can be your paying customers or if you're on a DevOps team, this could

00:09:43,540 --> 00:09:49,970
be your developers, this could be your community advocates, your Devro people, whatever the

00:09:49,970 --> 00:09:54,350
issue may be, whatever the interface may be.

00:09:54,350 --> 00:09:59,800
It's a way to introduce into the conversation that you've thought about this carefully.

00:09:59,800 --> 00:10:01,930
And it's a chance for you to align.

00:10:01,930 --> 00:10:08,170
Recalibrate, rather, I should say with the goals and intentions of the people using your

00:10:08,170 --> 00:10:10,649
services.

00:10:10,649 --> 00:10:14,890
And like I note at the end, this is not the end of the job, but the lifecycle of one component

00:10:14,890 --> 00:10:16,990
in this pipeline.

00:10:16,990 --> 00:10:24,810
They're either going to accept it and you have to get on the work with creating a Terraform

00:10:24,810 --> 00:10:27,839
playbook or whatever the utility may be.

00:10:27,839 --> 00:10:33,199
You need to move on helping with implementation and running through subsequent issues in this

00:10:33,199 --> 00:10:37,460
process, or you back up, you think it back over again.

00:10:37,460 --> 00:10:40,490
You maybe tap in different people this time.

00:10:40,490 --> 00:10:46,760
You evaluate where maybe you lost a thread of what their concern really was.

00:10:46,760 --> 00:10:54,779
And I found that in a situation where we're dealing with a massive developer community,

00:10:54,779 --> 00:11:01,630
a massive internal team of engineers, a massive just customer base, having some way to track

00:11:01,630 --> 00:11:14,579
all of this in tinier, manageable pieces was an effective way to manage these breadcrumbs

00:11:14,579 --> 00:11:23,410
of issues that are along the trail of their journey with your company.

00:11:23,410 --> 00:11:30,380
And that's really all that underlies the process here.

00:11:30,380 --> 00:11:35,940
So like I said, it builds into a process, it builds into tooling, it builds into functional

00:11:35,940 --> 00:11:37,770
roles for people.

00:11:37,770 --> 00:11:42,949
And when you enable a process like this, you're going to see people gravitate towards certain

00:11:42,949 --> 00:11:44,610
parts of the process.

00:11:44,610 --> 00:11:47,930
In our implementation of this, we had administrators and orchestrators.

00:11:47,930 --> 00:11:51,170
Administrators were the people who interact with the company day to day.

00:11:51,170 --> 00:11:56,360
This could be the TAM, someone in sales who talks to them often, it could be one of your

00:11:56,360 --> 00:11:58,880
people who is working with a big customer.

00:11:58,880 --> 00:12:02,860
Whoever knows their environment best.

00:12:02,860 --> 00:12:11,420
Who is going to be this interface for understanding or translating or provide additional context,

00:12:11,420 --> 00:12:16,889
not just the raw data that we talked about earlier, the stuff that you can dig up yourself.

00:12:16,889 --> 00:12:20,600
And it's just the person who's going to be the conduit in and out of your team to this

00:12:20,600 --> 00:12:21,600
customer.

00:12:21,600 --> 00:12:26,040
And we introduce the concept of an orchestrator and this is usually a solutions engineering

00:12:26,040 --> 00:12:32,990
tech lead who will basically -- we were rotating in such a way that we were signing off on

00:12:32,990 --> 00:12:39,589
each other's solutions before any communication went out to say this is what we think you

00:12:39,589 --> 00:12:40,589
should do.

00:12:40,589 --> 00:12:45,079
We would not do that without some kind of buy-in from the rest of the team, that it

00:12:45,079 --> 00:12:49,600
made sense, that it was not going to cause problems for our DevOps engineers, not going

00:12:49,600 --> 00:12:56,350
to create issues for whatever other service internally was going to start.

00:12:56,350 --> 00:12:58,430
But the most important part was that we did document everything.

00:12:58,430 --> 00:13:04,630
We kept everything we ever wrote for customers, scripts, code, whatever.

00:13:04,630 --> 00:13:08,440
And all of that was kept because you want to be able to build on this knowledge.

00:13:08,440 --> 00:13:11,399
You want to be able to reapply it as necessary.

00:13:11,399 --> 00:13:16,259
And especially in infrastructure, which was the space we were in.

00:13:16,259 --> 00:13:18,110
A lot of this stuff is going to be repeatable.

00:13:18,110 --> 00:13:24,110
So if they're saying they need a managed database and you don't have one but AWS does, what

00:13:24,110 --> 00:13:25,550
was the reason they came to you.

00:13:25,550 --> 00:13:30,940
So building something like that on top of a public cloud is somewhat trivial, but building

00:13:30,940 --> 00:13:40,170
it performantally in such a way that it can handle RDS-level behavior, that's probably

00:13:40,170 --> 00:13:41,170
worth sharing.

00:13:41,170 --> 00:13:43,860
Probably not a unique problem to your user base.

00:13:43,860 --> 00:13:50,759
You'll see a screen shot of our tool that we built to track a lot of this.

00:13:50,759 --> 00:13:52,680
And like I said, we documented everything.

00:13:52,680 --> 00:13:58,529
We kept track of how many users crossed a threshold into a new spending tier, this only

00:13:58,529 --> 00:14:01,160
tracked users who came into the process.

00:14:01,160 --> 00:14:07,221
And we kept track of things like projection rates, completion rates, how many of these

00:14:07,221 --> 00:14:11,329
users were already high-spending users and how many were users that we grew into being

00:14:11,329 --> 00:14:13,339
high-spenders.

00:14:13,339 --> 00:14:18,610
In this screen shot, I'll give you additional context.

00:14:18,610 --> 00:14:21,980
We had two tears of user at the time, VIP and non-VIP.

00:14:21,980 --> 00:14:30,509
VIPs were organizations who of any size deciding to deploy us.

00:14:30,509 --> 00:14:36,410
So it didn't affect the type of service they received, but it was a way for us to know

00:14:36,410 --> 00:14:42,160
are we wasting our time and theirs by trying to pitch to them, or are there people who

00:14:42,160 --> 00:14:47,329
are trying to run on our platform that could be helped by this process and that we can

00:14:47,329 --> 00:14:49,089
forge these relationships with.

00:14:49,089 --> 00:14:54,410
The company I worked at at the time had an excellent developer relations team, so these

00:14:54,410 --> 00:14:58,790
individual contributors were very highly looped into the ecosystem and we very much valued

00:14:58,790 --> 00:15:04,079
their feedback but it left a void with these customers who were the bread and butter of

00:15:04,079 --> 00:15:05,079
the business.

00:15:05,079 --> 00:15:12,649
And so being able to track just various levels of their roll-out on our platform was valuable

00:15:12,649 --> 00:15:18,440
insight into how the people scaling the most were working.

00:15:18,440 --> 00:15:27,570
Now I know I've suggested a lot of things here, and there were a couple of ways that

00:15:27,570 --> 00:15:30,110
we could tell if this was working or not.

00:15:30,110 --> 00:15:35,879
We did a lot of things that initially were based on bad assumptions or perhaps we had

00:15:35,879 --> 00:15:41,029
a bias that made us think something was foundational, when really it was a highly biased way of

00:15:41,029 --> 00:15:42,850
approaching a problem.

00:15:42,850 --> 00:15:50,540
And so when the formula that worked for us, we went with the conventional wisdom of tracking

00:15:50,540 --> 00:15:58,850
touches, noting how it went, call notes of everything, we did visualization of task status,

00:15:58,850 --> 00:16:04,959
and I use this last one, health score, as an example of where we went wildly wrong.

00:16:04,959 --> 00:16:10,470
And the idea of the health score was that we could put users into an algorithm basically

00:16:10,470 --> 00:16:13,519
to tell how well their account was doing.

00:16:13,519 --> 00:16:20,620
And we thought we could be completely -- we thought we could find a way to objectively

00:16:20,620 --> 00:16:26,139
evaluate how well things were going.

00:16:26,139 --> 00:16:28,580
Maybe we thought things were going well but maybe they weren't going well at all.

00:16:28,580 --> 00:16:42,690
We were doing wacky stuff like we contracted a third party sent them analysis.

00:16:42,690 --> 00:16:47,009
And it sounds obnoxious, and it really is.

00:16:47,009 --> 00:16:52,810
But it did make us realize one important thing, that our perception is going to be everything.

00:16:52,810 --> 00:16:56,329
We needed a lot of input to validate what we were seeing.

00:16:56,329 --> 00:17:01,850
And a big thing that turned out to be a big deal for us, because we wanted our work with

00:17:01,850 --> 00:17:05,370
these big customers to be a part of the experience.

00:17:05,370 --> 00:17:12,289
We repackaged every solution we created and put it on to the GitHub separate from the

00:17:12,289 --> 00:17:19,030
organization's GitHub so this was a lot less noisy for the people maintaining the GitHub

00:17:19,030 --> 00:17:28,069
and we were able to point people to these solutions

00:17:28,069 --> 00:17:32,119
that we had built in the past.

00:17:32,119 --> 00:17:38,090
So the outcome we wanted is satisfying not merely correct solutions.

00:17:38,090 --> 00:17:40,870
And if you've ever done technical support you might be familiar with this concept.

00:17:40,870 --> 00:17:46,220
Where you can find off the exact right answer and if you feel like they felt it was trivial,

00:17:46,220 --> 00:17:47,830
it won't matter that you were right.

00:17:47,830 --> 00:17:54,010
You have to make them trust that you're invested in this process.

00:17:54,010 --> 00:17:57,200
They have to feel invested, like they're part of the process.

00:17:57,200 --> 00:17:59,760
They have to feel actively engaged.

00:17:59,760 --> 00:18:02,340
They can be as involved or uninvolved as they want.

00:18:02,340 --> 00:18:06,470
They don't have to be doing the work for you.

00:18:06,470 --> 00:18:14,850
I've found even nontechnical stakeholders value being part of that discussion.

00:18:14,850 --> 00:18:20,710
It gives the impression, I'm sure we all work terribly hard, but sometimes that doesn't

00:18:20,710 --> 00:18:22,630
come across when you're working with customers.

00:18:22,630 --> 00:18:29,250
And you have to -- I won't say perform it, but you do have to -- you do have to know.

00:18:29,250 --> 00:18:32,850
When they're looking for something specific and they're looking for you to look like you

00:18:32,850 --> 00:18:33,850
care.

00:18:33,850 --> 00:18:35,600
And more often that, you really do.

00:18:35,600 --> 00:18:44,460
You are invested and that's really the core of what I would like my customers to see when

00:18:44,460 --> 00:18:51,980
I give them a solution, even if it's something that they ultimately reject.

00:18:51,980 --> 00:18:55,490
And when they do reject it, that is a good opportunity to reflect.

00:18:55,490 --> 00:19:01,510
You examine your biases, you collectivize so you can input on what your customer might

00:19:01,510 --> 00:19:08,679
have said to you and that's what I mean when I say this is an ongoing, living process.

00:19:08,679 --> 00:19:14,910
So we talked about this process a little bit, the principles that the process is built on,

00:19:14,910 --> 00:19:22,760
data, knowledge and wisdom, and this is successive, repeatable, and the outcome, should you try

00:19:22,760 --> 00:19:27,380
to implement something like this, is you do see your teams start to reflect some kind

00:19:27,380 --> 00:19:31,090
of distributed database of this knowledge, we call it a knowledge base.

00:19:31,090 --> 00:19:34,090
And it's not unlike a knowledge base for a software product.

00:19:34,090 --> 00:19:39,030
We have this index of all topics and keys, tags, everything.

00:19:39,030 --> 00:19:43,940
And it's just a faster, potentially faster way.

00:19:43,940 --> 00:19:46,840
It's not right for every organization but if you find yourselves over tax the it might

00:19:46,840 --> 00:19:49,840
be one way to think about things being more efficient.

00:19:49,840 --> 00:19:55,730
And the last thing I want to throw in there is that you might be the customer-facing reliability

00:19:55,730 --> 00:19:57,520
engineer, but your other teams might not be.

00:19:57,520 --> 00:20:01,409
It's an opportunity for other teams to chime in with this and interface with customers

00:20:01,409 --> 00:20:08,169
at least indirectly and learn from biases that they might have, maybe customer hostile

00:20:08,169 --> 00:20:10,279
once it's rolled out.

00:20:10,279 --> 00:20:15,750
So I found that this helped cross-functionality as well, which is always a good thing.

00:20:15,750 --> 00:20:18,940
So I will leave you all with that thought.

00:20:18,940 --> 00:20:23,240
We have some time for questions.

00:20:23,240 --> 00:20:30,630
If you don't want to ask me a question out here, you can feel free to reach out on Twitter

00:20:30,630 --> 00:20:34,830
or LinkedIn or I'll be in the hall.

00:20:34,830 --> 00:20:40,570
Any questions?

00:20:40,570 --> 00:20:46,059
Okay.

00:20:46,059 --> 00:20:52,100
I will just proceed to thank you all for listening to all this.

00:20:52,100 --> 00:20:52,480

YouTube URL: https://www.youtube.com/watch?v=j6VbW2nG9ck


