Title: DevOpsDays Boston 2019 - Automating Stateful Apps with Kubernetes Operators by Jan Kleinert
Publication date: 2019-10-11
Playlist: DevOpsDays Boston 2019
Description: 
	Automating Stateful Apps with Kubernetes Operators by Jan Kleinert

Kubernetes scales and manages stateless applications quite easily, but stateful applications can require more work. Databases, caching systems, and file stores are harder to dynamically manage with data intact, and sometimes come with their own notion of clustering. Operators are Kubernetes agents that know how to deploy, scale, manage, backup, and even upgrade complex, stateful applications.

This talk provides an overview of the Operator pattern introduced by CoreOS, adopted by many community projects like Rook, Prometheus, and others, and supported by the release of the Operator Framework by Red Hat. With an understanding of Operators in place, the session will go on to detail the Operator Framework and its main components, the Operator SDK and the Lifecycle management backplane.

#DevOpsDays #DevOpsDaysBoston
Captions: 
	00:00:17,070 --> 00:00:18,970
Thanks for coming after lunch.

00:00:18,970 --> 00:00:20,780
This is exciting.

00:00:20,780 --> 00:00:24,420
As you know we're going to be talking about automating stateful applications with Kubernetes

00:00:24,420 --> 00:00:26,430
-- I kicked my water over.

00:00:26,430 --> 00:00:29,740
That's a good start.

00:00:29,740 --> 00:00:33,680
What that is going to entail is basically an overview of why do you care about operators

00:00:33,680 --> 00:00:40,300
in the first place, what problems are they solving, how they work and then we'll transition

00:00:40,300 --> 00:00:45,020
a little bit into things like the operator framework and the SDK, if you're in a situation

00:00:45,020 --> 00:00:49,400
where maybe it makes sense to build operators yourself or use them to solve some of your

00:00:49,400 --> 00:00:50,400
problems.

00:00:50,400 --> 00:00:53,690
So to make sure that we stay on track, I'm going to jump right into it.

00:00:53,690 --> 00:00:56,640
I'm Jan Kleinert as you know.

00:00:56,640 --> 00:01:00,399
And open shift is one of the things I work on, which of course is a distribution of Kubernetes

00:01:00,399 --> 00:01:01,399
if you're not familiar.

00:01:01,399 --> 00:01:07,430
Now I suspect with this audience, how many of you are at least familiar with Kubernetes?

00:01:07,430 --> 00:01:09,150
So that's a whole lot.

00:01:09,150 --> 00:01:12,380
So I'm not going to get into the weeds of what's Kubernetes.

00:01:12,380 --> 00:01:18,000
Though it is important to have that foundational knowledge for operators to make any sense.

00:01:18,000 --> 00:01:23,409
So you're probably pretty familiar with the fact that Kubernetes is a container orchestration

00:01:23,409 --> 00:01:28,670
platform, helps you manage applications at scale and a lot of stuff you would normally

00:01:28,670 --> 00:01:31,170
have to do yourself.

00:01:31,170 --> 00:01:35,590
We will skip this completely because you probably know what it helps you do.

00:01:35,590 --> 00:01:41,600
Just to hit home, there's a bunch of native, primitive types in Kubernetes, pods, services,

00:01:41,600 --> 00:01:42,600
deployments.

00:01:42,600 --> 00:01:44,470
Kubernetes knows what those are.

00:01:44,470 --> 00:01:49,460
You can say get pods I know what a pod is.

00:01:49,460 --> 00:01:50,920
And that's important for later.

00:01:50,920 --> 00:01:55,850
So you can manage your Kubernetes cluster using the Kubernetes API or through command

00:01:55,850 --> 00:01:59,080
line tools and things like that every, of course.

00:01:59,080 --> 00:02:01,299
An object definition looks something like this.

00:02:01,299 --> 00:02:08,299
This is part of what setting up a pod would look like.

00:02:08,299 --> 00:02:14,810
You can see it's got a type, some metadata, in this case a container spec and we talked

00:02:14,810 --> 00:02:18,360
about Kubernetes there for about two minutes but that's not what we're here to talk about.

00:02:18,360 --> 00:02:20,140
We're here to talk about operators.

00:02:20,140 --> 00:02:25,330
So why should you care about them in the first place?

00:02:25,330 --> 00:02:29,299
Scaling stateless applications on Kubernetes is actually pretty easy.

00:02:29,299 --> 00:02:34,200
There is built-in types like replica set that do a lot of this for you.

00:02:34,200 --> 00:02:39,570
So you can run a command like this, tell it what you want to scale and how many replicas

00:02:39,570 --> 00:02:42,919
you want and it will just take care of that for you.

00:02:42,919 --> 00:02:44,670
So that looks something like this.

00:02:44,670 --> 00:02:49,860
So you can see here we're issuing our scale command.

00:02:49,860 --> 00:02:53,600
And one of the cool things that I think is kind of unique about Kubernetes is that it's

00:02:53,600 --> 00:02:54,600
so declarative.

00:02:54,600 --> 00:02:58,720
You've got year desired state, how you want the world to look, and you've got your actual

00:02:58,720 --> 00:02:59,720
state.

00:02:59,720 --> 00:03:03,730
You can see we're telling it our desired state is we want three replicas.

00:03:03,730 --> 00:03:05,890
Our current state is we only have one.

00:03:05,890 --> 00:03:11,690
When we issue that scale command, Kubernetes is going to do whatever needs to be done to

00:03:11,690 --> 00:03:16,440
bring us up to have our actual state more in line with the desired state so we have

00:03:16,440 --> 00:03:17,900
three pods running.

00:03:17,900 --> 00:03:20,840
Nothing too new there.

00:03:20,840 --> 00:03:22,079
So that's easy.

00:03:22,079 --> 00:03:26,630
Scaling up stateless applications you do things like this and you're all set.

00:03:26,630 --> 00:03:29,169
What about applications that store data?

00:03:29,169 --> 00:03:32,949
Or what about applications that have their own notion of a cluster in so for example

00:03:32,949 --> 00:03:38,440
if you are running some kind of database that had master's and worker notes and then you're

00:03:38,440 --> 00:03:43,720
trying to run that on Kubernetes, and you need to be able to handle things like failures

00:03:43,720 --> 00:03:46,760
and up grades and patching and things like that.

00:03:46,760 --> 00:03:48,560
It becomes more complex.

00:03:48,560 --> 00:03:54,220
Now again, creating a database on Kubernetes is also easy.

00:03:54,220 --> 00:03:58,700
You can run something like this, basically tell it what image you want to run and you've

00:03:58,700 --> 00:04:00,479
got your database.

00:04:00,479 --> 00:04:03,230
This is a made-up database.

00:04:03,230 --> 00:04:05,139
It can be whatever it is you want.

00:04:05,139 --> 00:04:07,480
It's easy to get it up and running.

00:04:07,480 --> 00:04:09,580
The running it overtime is harder.

00:04:09,580 --> 00:04:17,150
Some of those actions patches and upgrades, handling, failure, healing, that's much more

00:04:17,150 --> 00:04:19,259
complex.

00:04:19,259 --> 00:04:23,040
So any time you've got these stateful applications, it doesn't have to be a database, it's just

00:04:23,040 --> 00:04:27,669
an easy example that's a go-to, you're going to have to deal with these types of complications.

00:04:27,669 --> 00:04:34,940
Resize, upgrade, reconfigure, backup and particularly with a notion of their own cluster, that can

00:04:34,940 --> 00:04:35,940
be complicated.

00:04:35,940 --> 00:04:39,970
There could be a lot of actions that have to take place before you can complete whatever

00:04:39,970 --> 00:04:44,812
it is you're trying to do and it may not be just the particular application that you're

00:04:44,812 --> 00:04:46,170
working with that has to change.

00:04:46,170 --> 00:04:53,800
There may be other resources in your cluster that need to be dealt with as well.

00:04:53,800 --> 00:04:55,230
So this is true.

00:04:55,230 --> 00:04:59,010
Any application on any platform might only have to be installed once, but it's going

00:04:59,010 --> 00:05:03,790
to need to be configured, managed and upgraded over time over the course of the time you're

00:05:03,790 --> 00:05:05,530
running that application.

00:05:05,530 --> 00:05:09,770
Upgrading, patching, things like that of course are critical to security and running secure

00:05:09,770 --> 00:05:13,790
apps is critical to your business.

00:05:13,790 --> 00:05:17,400
And when it comes down to it, anything that's not automated is slowing you down.

00:05:17,400 --> 00:05:23,620
So whenever you've got to have people taking manual actions to do whatever it is in your

00:05:23,620 --> 00:05:29,070
system, that requires the resources from them that they could be spending on other things,

00:05:29,070 --> 00:05:33,070
it is just going to make things go slower.

00:05:33,070 --> 00:05:34,920
So if only Kubernetes knew.

00:05:34,920 --> 00:05:37,030
What am I trying to talk about here?

00:05:37,030 --> 00:05:42,350
Basically what if Kubernetes knew all of the things that, let's say your best database

00:05:42,350 --> 00:05:47,550
administrator knows about how to actually run this, we're going to call it production-ready

00:05:47,550 --> 00:05:52,900
database, run this production-ready database on Kubernetes?

00:05:52,900 --> 00:05:54,100
So this is John.

00:05:54,100 --> 00:05:57,260
He's been working at your company for let's say four years.

00:05:57,260 --> 00:05:58,450
And he does have all of that knowledge.

00:05:58,450 --> 00:06:01,800
He's got this figured out for your environment.

00:06:01,800 --> 00:06:05,180
He knows what is needed to get that database installed.

00:06:05,180 --> 00:06:09,720
He knows how all the steps that are needed to kind of manage it in a production-ready

00:06:09,720 --> 00:06:10,720
way.

00:06:10,720 --> 00:06:12,790
He can handle backing up and all that stuff.

00:06:12,790 --> 00:06:15,220
But there is only one of him.

00:06:15,220 --> 00:06:16,810
And his time is limited.

00:06:16,810 --> 00:06:20,660
And any time someone in your company needs these resources, they need some of his time.

00:06:20,660 --> 00:06:25,040
And some companies, some organizations aren't even going to have somebody like John.

00:06:25,040 --> 00:06:29,530
So there may just be too much of a barrier to being able to run these types of stateful

00:06:29,530 --> 00:06:34,210
applications on Kubernetes if you don't have somebody or some resource with the knowledge

00:06:34,210 --> 00:06:38,010
of how to actually do that in a reasonable, safe way over time.

00:06:38,010 --> 00:06:41,520
So what if we could take all of his object racial -- operational knowledge and kind of

00:06:41,520 --> 00:06:50,840
package it up, turn it into basically put it into code and put it in a box, what I'm

00:06:50,840 --> 00:06:51,840
trying to show you here.

00:06:51,840 --> 00:06:55,900
What if you can take all that knowledge and pack it up.

00:06:55,900 --> 00:07:00,260
And then you can take that knowledge that's all packaged up and you can install that on

00:07:00,260 --> 00:07:06,639
any Kubernetes cluster running in any enterprise on any cloud, and have that production-ready

00:07:06,639 --> 00:07:12,110
database or whatever your stateful software is, able to run on any cluster.

00:07:12,110 --> 00:07:16,710
And it would have that knowledge embedded with it of what to do when it needs to be

00:07:16,710 --> 00:07:20,300
installed, configured, backed up, all of that.

00:07:20,300 --> 00:07:23,450
So that's really what we're talking about -- that red is a little hard to see.

00:07:23,450 --> 00:07:24,450
Sorry about that.

00:07:24,450 --> 00:07:28,020
That's what we're talking about when we talk about the operator pattern.

00:07:28,020 --> 00:07:32,500
We're talking about automated software managers that handle the installation and lifecycle

00:07:32,500 --> 00:07:33,680
of Kubernetes applications.

00:07:33,680 --> 00:07:39,270
What I mean by Kubernetes applications is applications that run on Kubernetes and also

00:07:39,270 --> 00:07:42,460
kind of interact with certain parts of the API or the system itself.

00:07:42,460 --> 00:07:47,400
So kind of Kubernetes native applications.

00:07:47,400 --> 00:07:48,560
And so how does it work?

00:07:48,560 --> 00:07:53,240
So there's already ways of extending Kubernetes through the API.

00:07:53,240 --> 00:07:57,520
So this not anything new or specific to operators.

00:07:57,520 --> 00:08:00,270
But we use custom controllers.

00:08:00,270 --> 00:08:02,520
And custom resource definitions.

00:08:02,520 --> 00:08:06,889
So the way that these kind of work together, if you're not familiar, is so the custom controller

00:08:06,889 --> 00:08:11,460
is going to know about your particular resource type or application.

00:08:11,460 --> 00:08:17,640
And it's going to be watching for changes, for different events that it needs to take

00:08:17,640 --> 00:08:18,760
action on.

00:08:18,760 --> 00:08:22,370
It's going to look at the state of the system and say am I in the state I need to be, and

00:08:22,370 --> 00:08:27,440
if not, the knowledge of what to do in the if not case, is going to be built in to that

00:08:27,440 --> 00:08:28,440
controller.

00:08:28,440 --> 00:08:33,880
So if the if not is oh, I'm supposed to have three instances of whatever this is and I

00:08:33,880 --> 00:08:38,199
only have two, it's going to know what needs to happen, all the things that need to happen

00:08:38,199 --> 00:08:40,890
to bring that into the right state.

00:08:40,890 --> 00:08:46,540
And the custom resource definition is what lets your cluster know what a production-ready

00:08:46,540 --> 00:08:50,050
database type is in Kubernetes.

00:08:50,050 --> 00:08:55,150
So that that custom controller can watch and interact with it.

00:08:55,150 --> 00:09:00,270
And to look at that in a more visual way, the dotted line, big square, that's your controller

00:09:00,270 --> 00:09:07,230
that's watching and running a reconciliation loop and you've got your custom resource that

00:09:07,230 --> 00:09:10,890
interacts with it.

00:09:10,890 --> 00:09:15,370
So here we have the blue kind of rounded rectangle is your cluster.

00:09:15,370 --> 00:09:18,230
I'm a very good artist.

00:09:18,230 --> 00:09:23,910
And we have our controller down here on the bottom that's just sitting and watching and

00:09:23,910 --> 00:09:24,910
waiting.

00:09:24,910 --> 00:09:28,250
Here's our custom resource definition for our production-ready database.

00:09:28,250 --> 00:09:33,800
It's got a name in the metadata that's not very excited but in our spec you can see we

00:09:33,800 --> 00:09:39,050
want a cluster size of 3, two replicas and a particular version to be running.

00:09:39,050 --> 00:09:46,420
When that's applied to the system, the controller is going to see that, and do the arrow with

00:09:46,420 --> 00:09:48,710
the dots and the circle is whatever it takes.

00:09:48,710 --> 00:09:51,520
I don't have to know whatever it takes as a user.

00:09:51,520 --> 00:09:56,060
Whoever wrote the operator knows that, so I get the benefit of that knowledge.

00:09:56,060 --> 00:10:00,180
The controller is going to do whatever needs to be done to bring up those three replicas

00:10:00,180 --> 00:10:02,180
that I want on the system.

00:10:02,180 --> 00:10:07,100
So that is a very simplified version of how that works.

00:10:07,100 --> 00:10:09,700
So I don't like talking about things in an abstract way.

00:10:09,700 --> 00:10:12,740
So let's look at a simple example of an operator.

00:10:12,740 --> 00:10:15,940
This is the etcd operator.

00:10:15,940 --> 00:10:24,110
It's a distributive value store that Kubernetes uses for storing cluster state.

00:10:24,110 --> 00:10:29,090
And here's an example of what our custom resource might look like for an etcd cluster.

00:10:29,090 --> 00:10:34,740
You can see that kind is etcd cluster and we have our spec which says we wanted it to

00:10:34,740 --> 00:10:37,890
be a size 3 and we want version 3.1.0.

00:10:37,890 --> 00:10:42,100
Remember that for the next slide.

00:10:42,100 --> 00:10:45,800
So with that in mind, we have this loop going on here.

00:10:45,800 --> 00:10:47,610
So in the observe state, I can't read that.

00:10:47,610 --> 00:10:50,330
So I'm going to read it from over here.

00:10:50,330 --> 00:10:56,040
Our etcd has got two running pods right now, we know we want three, and one is running

00:10:56,040 --> 00:10:59,560
version 3.0.9 and the other is running 3.1.0.

00:10:59,560 --> 00:11:04,570
We're going to need to say what's different from what we want.

00:11:04,570 --> 00:11:08,040
We wanted them all to be 3.1.0 and we wanted three of them.

00:11:08,040 --> 00:11:12,550
So the action the controller is going to take is whatever needs to happen to get us to that

00:11:12,550 --> 00:11:14,470
desired application.

00:11:14,470 --> 00:11:24,140
But there's probably a lot more to each of those steps than what's listed on the screen.

00:11:24,140 --> 00:11:32,940
So instead of trying to play this from the presentation, I'm going to do it this way.

00:11:32,940 --> 00:11:35,550
So this is something that you can do yourself.

00:11:35,550 --> 00:11:45,270
I have done a screen grab, a screen capture of going through one of the tutorials on learn.openshift.com.

00:11:45,270 --> 00:11:49,020
So if you want to try this yourself it's always available.

00:11:49,020 --> 00:11:50,050
Let's see what that looks like.

00:11:50,050 --> 00:11:53,470
This is shortened version here.

00:11:53,470 --> 00:11:58,690
First we're going create the CRD for the operator.

00:11:58,690 --> 00:11:59,899
Hopefully you all can read that.

00:11:59,899 --> 00:12:02,980
It looks not too, too small.

00:12:02,980 --> 00:12:08,420
We already have these yaml files created.

00:12:08,420 --> 00:12:11,540
There's some r back stuff that has to happen.

00:12:11,540 --> 00:12:16,090
Every operate has its own requirements we need a service account, we need a role and

00:12:16,090 --> 00:12:27,750
a role binding so we're doing that now to get that all set up.

00:12:27,750 --> 00:12:32,089
I feel like I'm a fast typer until I watch my typing go on the screen and I'm like man,

00:12:32,089 --> 00:12:35,230
it's not as fast as I thought.

00:12:35,230 --> 00:12:37,230
[ Laughter ] So now we have all of that set up.

00:12:37,230 --> 00:12:43,170
The next thing we're going to do is create the deployment that has container image.

00:12:43,170 --> 00:12:49,830
So we've got another yaml file for that.

00:12:49,830 --> 00:12:52,560
So now we have that operator has been created.

00:12:52,560 --> 00:12:56,510
We're going to check and make sure that deployment was actually created.

00:12:56,510 --> 00:13:01,670
We can see the deployment there called etcd operator and we can see we've got a pod running

00:13:01,670 --> 00:13:02,700
as well.

00:13:02,700 --> 00:13:06,560
So now we can actually define an etcd cluster by referring to that custom resource.

00:13:06,560 --> 00:13:11,940
So now the Kubernetes cluster is actually going to know what an etcd cluster is.

00:13:11,940 --> 00:13:17,330
I have to pause it here so we can look.

00:13:17,330 --> 00:13:22,600
So when we, what we're doing here is looking at that yaml for the etcd operator CR.

00:13:22,600 --> 00:13:26,750
You can see here we've got the kind of etcd cluster and we're specifying what we want,

00:13:26,750 --> 00:13:31,080
the same, I think, almost the same as what we showed in the original example.

00:13:31,080 --> 00:13:32,370
Size of 3 and version 3.1.10.

00:13:32,370 --> 00:13:44,350
That's what we're going to run on create on here in just a sec.

00:13:44,350 --> 00:13:47,709
Okay.

00:13:47,709 --> 00:13:52,370
So now that we've done that, we can make sure that that cluster object was created.

00:13:52,370 --> 00:13:55,420
Because now Kubernetes knows what etcd clusters are.

00:13:55,420 --> 00:13:58,500
Before if you had run that, it would have been like I don't know what that resource

00:13:58,500 --> 00:13:59,500
is.

00:13:59,500 --> 00:14:00,529
But now it knows.

00:14:00,529 --> 00:14:06,350
And what we see here, we're trying to get all the pods that have this label, all the

00:14:06,350 --> 00:14:09,710
pods that are these etcd cluster pods.

00:14:09,710 --> 00:14:12,120
And what we should see is we asked for three.

00:14:12,120 --> 00:14:15,269
So we should see three eventually come up and running.

00:14:15,269 --> 00:14:17,339
They're coming.

00:14:17,339 --> 00:14:22,550
I went too fast there.

00:14:22,550 --> 00:14:24,000
So those are up and running now.

00:14:24,000 --> 00:14:29,089
There's a tiny bit of hand waving here because I couldn't show two side by side.

00:14:29,089 --> 00:14:37,839
Now we have connected to our etcd cluster and we're just using the etcd command line

00:14:37,839 --> 00:14:42,300
tool to actually put and retrieve something from the data store to make sure it actually

00:14:42,300 --> 00:14:44,839
works.

00:14:44,839 --> 00:14:54,380
So kind of just proving to ourselves that this did actually create a useable etcd cluster.

00:14:54,380 --> 00:15:03,590
So we put it back out, and at that point we'll be satisfied that it worked and we can go

00:15:03,590 --> 00:15:06,640
back.

00:15:06,640 --> 00:15:07,640
Back to our original terminal.

00:15:07,640 --> 00:15:11,360
Now we can look at some of the things that you can do with operators.

00:15:11,360 --> 00:15:17,180
For example, we're going to scale up our etcd cluster from 3 to 5 members.

00:15:17,180 --> 00:15:22,570
We're going to do that by running a patch command to basically change it in spec.

00:15:22,570 --> 00:15:24,450
Change the 3 to a 5.

00:15:24,450 --> 00:15:28,740
As soon as we do that, I'll pause so you can see what I'm talking about.

00:15:28,740 --> 00:15:36,290
So we just are changing the spec size to 5 where it was a 3 before.

00:15:36,290 --> 00:15:41,370
And now we should be able to watch those two new pods get created as soon as that's done.

00:15:41,370 --> 00:15:44,080
You can see they're starting to come up here.

00:15:44,080 --> 00:15:52,330
And we'll have one up and running and the other will come up and running shortly after

00:15:52,330 --> 00:15:53,330
that.

00:15:53,330 --> 00:15:57,790
This is a simple example of the types of things operators can do for you.

00:15:57,790 --> 00:16:03,040
We could have asked it to change the version and seeing what happened in that case, but

00:16:03,040 --> 00:16:07,200
in the interest of time and not making you guys watch a really long video, that is just

00:16:07,200 --> 00:16:11,769
kind of a quick overview of how you would install and use an operator like etcd which

00:16:11,769 --> 00:16:13,500
is a pretty simple example.

00:16:13,500 --> 00:16:17,860
Hopefully that makes it a little more concrete.

00:16:17,860 --> 00:16:28,110
As I mentioned before you can try this and other hands-on tutorials yourself.

00:16:28,110 --> 00:16:32,570
I think there's maybe between 6 and 9 of them now.

00:16:32,570 --> 00:16:37,560
There's also a refresher of the Kubernetes API if you need that before you do some of

00:16:37,560 --> 00:16:39,279
these other things.

00:16:39,279 --> 00:16:43,570
But there are some good tutorials there that help you kind of get some of this experience

00:16:43,570 --> 00:16:47,670
yourself and they're always available.

00:16:47,670 --> 00:16:50,339
And you can use operators.

00:16:50,339 --> 00:17:01,180
Operatorhub.io is a website where they have been created by the community and instructions.

00:17:01,180 --> 00:17:07,549
There's even more operators listed in I want to say it's in the operator framework GitHub

00:17:07,549 --> 00:17:16,209
organization under a repo called awesome operators.

00:17:16,209 --> 00:17:22,079
There's an even more exhaustive list created by the community there.

00:17:22,079 --> 00:17:24,549
That's changing and being added to all the time.

00:17:24,549 --> 00:17:28,630
This is not to be -- well, sort of to be confused.

00:17:28,630 --> 00:17:34,809
Similar to, within open shift 4 there is an operator hub within there as well, which is

00:17:34,809 --> 00:17:41,740
kind of a subset of what is in operator hub.io to simplify the process and install these

00:17:41,740 --> 00:17:45,720
operators on your cluster if you're an admin.

00:17:45,720 --> 00:17:50,299
So if you are, for some reason, creating an operator that would be of use to other people,

00:17:50,299 --> 00:17:53,539
you can also have this added here as well.

00:17:53,539 --> 00:17:57,350
A lot of what you'll see, and I think a lot of what is often the use case for creating

00:17:57,350 --> 00:18:07,129
an operator, is services like databases that, you know, maybe retis has an enterprise operator

00:18:07,129 --> 00:18:12,070
they worked with the community to create and that way the community can take advantage

00:18:12,070 --> 00:18:18,039
of that and we're not all out trying to write our own operator because that's not the most

00:18:18,039 --> 00:18:20,320
efficient use of all of our time.

00:18:20,320 --> 00:18:23,489
You can take advantage of the fact that somebody has built these for you if they're solving

00:18:23,489 --> 00:18:26,419
a problem you need to solve.

00:18:26,419 --> 00:18:33,210
But there might be some cases where you are interested in creating one yourself for some

00:18:33,210 --> 00:18:37,049
specific problem that you need to solve in your organization.

00:18:37,049 --> 00:18:39,520
And there is the operator framework that I'll tell you about now.

00:18:39,520 --> 00:18:46,529
So this kind of an umbrella over several different projects, including the operator lifecycle

00:18:46,529 --> 00:18:50,149
manager which you can think of an operator for operators.

00:18:50,149 --> 00:18:56,879
So where operators handle the installation, configuration, of the application, the lifecycle

00:18:56,879 --> 00:19:00,320
manager does all of that for your operators.

00:19:00,320 --> 00:19:07,580
There's also operator metering, which is going to handle, I mean basically gathering metrics

00:19:07,580 --> 00:19:10,350
over time, things like that.

00:19:10,350 --> 00:19:11,350
And then the SDK.

00:19:11,350 --> 00:19:15,409
So if you are in a situation where it makes sense or you want to explore what it would

00:19:15,409 --> 00:19:20,640
be like to create an operator, the SDK you don't have to use it, but you can use it and

00:19:20,640 --> 00:19:26,730
it will give you some kind of shortcuts and scaffolding to create operators yourself.

00:19:26,730 --> 00:19:31,149
I didn't have a slide for this so let me tell you about it.

00:19:31,149 --> 00:19:37,409
The SDK currently supports creating operators with helm, ansible or go.

00:19:37,409 --> 00:19:42,279
And you can choose.

00:19:42,279 --> 00:19:48,109
And it's going to have scaffolding so that you can hook no common events or features

00:19:48,109 --> 00:19:53,009
that an operator might need to have and add in your custom logic and not have to write

00:19:53,009 --> 00:19:54,249
the whole thing from scratch.

00:19:54,249 --> 00:20:01,940
It's also going to have hooks from the Kubernetes API that you might commonly need.

00:20:01,940 --> 00:20:06,409
You can build an operator let's say you might want to create one in Java for whatever reason,

00:20:06,409 --> 00:20:11,130
you can certainly do that we just don't have the SDK support available so you would have

00:20:11,130 --> 00:20:15,109
to do a little bit more work.

00:20:15,109 --> 00:20:19,340
And kind of a final note here on operator maturity model.

00:20:19,340 --> 00:20:22,679
Not all operators are created equally.

00:20:22,679 --> 00:20:24,399
Sometimes that's by design.

00:20:24,399 --> 00:20:30,430
There's kind of this five-phase maturity model, think of it as a complexity model of what

00:20:30,430 --> 00:20:31,700
operators support.

00:20:31,700 --> 00:20:38,380
So phase 1 is kind of the simplest where it handles installation and it progresses through

00:20:38,380 --> 00:20:41,840
where it handles upgrades or the whole lifecycle.

00:20:41,840 --> 00:20:46,759
Phase 4 is including metrics and logging and all of that metering stuff.

00:20:46,759 --> 00:20:52,429
And phase 5 kind handles just about everything.

00:20:52,429 --> 00:20:56,590
That's something to keep in mind and I believe if I'm not mistaken, if you look on operator

00:20:56,590 --> 00:21:01,869
hub they will list what phase most of the operators support.

00:21:01,869 --> 00:21:07,940
So you know what you're getting in that operator.

00:21:07,940 --> 00:21:12,899
So a bunch of resources here and I don't actually have the awesome operators on there.

00:21:12,899 --> 00:21:18,340
But you would find it underneath operator-framework on GitHub you would find it as one of the

00:21:18,340 --> 00:21:19,340
repos there.

00:21:19,340 --> 00:21:25,669
It's a cool list with lots and lots of options.

00:21:25,669 --> 00:21:28,889
If you're looking for something that's high level that's not super technical to share

00:21:28,889 --> 00:21:34,470
with somebody on your team to introduce them to what are operators, this second thing is

00:21:34,470 --> 00:21:36,789
good for that.

00:21:36,789 --> 00:21:43,620
A blog post that kind of introduces the framework and then again those resources, the tutorials

00:21:43,620 --> 00:21:44,810
on learn.openshift.com if you want to try them out.

00:21:44,810 --> 00:21:45,810
And I think we're actually okay on time.

00:21:45,810 --> 00:21:46,810
So thank you.

00:21:46,810 --> 00:21:47,810
Do you have any questions?

00:21:47,810 --> 00:21:48,810
[ Applause ] >> If we could get a microphone, or to repeat

00:21:48,810 --> 00:21:49,810
the question.

00:21:49,810 --> 00:21:50,810
Just so that we can capture that and make sure everybody can hear.

00:21:50,810 --> 00:21:51,810
AUDIENCE: I'll speak it loudly.

00:21:51,810 --> 00:21:52,810
So we've been trying to have operators on the clusters and one of the questions that

00:21:52,810 --> 00:21:53,810
I've heard -- is like why would it be to a specific name space or not.

00:21:53,810 --> 00:21:55,740
That was actually a question that I didn't have a great answer for.

00:21:55,740 --> 00:21:59,200
JAN: The question was they've been trying out some operators on their own clusters and

00:21:59,200 --> 00:22:05,850
some operators will be cluster wide when you install them and sometimes they'll be installed

00:22:05,850 --> 00:22:09,620
with a particular name space just a particular name space.

00:22:09,620 --> 00:22:15,710
And he's asking why is that -- that is a super question.

00:22:15,710 --> 00:22:24,610
It is a fact that that's the case.

00:22:24,610 --> 00:22:28,730
I want to give you a good answer, and not an off-the-top-of-my-head answer.

00:22:28,730 --> 00:22:34,200
If you don't mind, I can find you later and get your contact info or give you my card.

00:22:34,200 --> 00:22:40,379
I know that we -- a lot of things -- let's say for example, that you wanted people to

00:22:40,379 --> 00:22:43,909
use, and I'm using an open shift example because this is something I've actually done in my

00:22:43,909 --> 00:22:46,879
work, it's a use case I've done.

00:22:46,879 --> 00:22:51,830
If I want everyone that's using the cluster that I'm making available to have access to

00:22:51,830 --> 00:22:55,350
open shift pipelines, for example, we install that via an operator.

00:22:55,350 --> 00:23:00,779
I want that available in every project, not just a particular project or set of projects.

00:23:00,779 --> 00:23:07,649
That operator I would want to install or have the admin on my cluster install at cluster-wide

00:23:07,649 --> 00:23:08,809
scope.

00:23:08,809 --> 00:23:14,409
There may be things particularly if you have a bunch of different teams, like development

00:23:14,409 --> 00:23:19,499
teams, other times doing stuff on a cluster and certain operators, certain things may

00:23:19,499 --> 00:23:21,559
not be relevant to everybody.

00:23:21,559 --> 00:23:28,309
We have workshops that we install with operators it's certainly not something we would want

00:23:28,309 --> 00:23:33,999
available to every single name space or project or cluster there's some of that, but I feel

00:23:33,999 --> 00:23:37,729
like there's a better answer I can give you if I poke around and think harder.

00:23:37,729 --> 00:23:38,729
Anyone else?

00:23:38,729 --> 00:23:39,729
All right.

00:23:39,729 --> 00:23:42,139
I will be around this afternoon and also tomorrow.

00:23:42,139 --> 00:23:43,490
And I'm planning to go to the event tonight.

00:23:43,490 --> 00:23:46,590
So if you have any other questions or things you want to chat about, I'll be around.

00:23:46,590 --> 00:23:47,590
Thank you so much.

00:23:47,590 --> 00:23:47,840

YouTube URL: https://www.youtube.com/watch?v=0V0fsZZ5DzM


