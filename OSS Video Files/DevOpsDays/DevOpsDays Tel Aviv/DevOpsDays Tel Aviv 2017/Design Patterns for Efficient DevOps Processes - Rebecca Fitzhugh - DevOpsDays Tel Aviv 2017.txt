Title: Design Patterns for Efficient DevOps Processes - Rebecca Fitzhugh - DevOpsDays Tel Aviv 2017
Publication date: 2017-11-28
Playlist: DevOpsDays Tel Aviv 2017
Description: 
	Are you tired of having DevOps initiatives blow up as if implemented by Wile E. Coyote? Stop prioritizing technology over process! Business problems will not be magically solved by simply selecting and purchasing new tooling. Effective processes are the foundation for real change and enterprise-wide adoption of DevOps culture. Specific processes vary by organization but the underlying patterns remain consistent. We will demonstrate the patterns that are used to build successful processes that will help you meet your business needs. This session will cover design patterns for the following processes: - Value stream mapping - Release engineering - Test automation - Change management The use of these design patterns will enable you to make more effective change in your organization. No one specific tool will solve your problems, instead be like Road Runner and use efficient design patterns to be the agent of change in your organization.
Captions: 
	00:00:01,980 --> 00:00:09,150
[Music]

00:00:06,170 --> 00:00:10,200
all right good morning everybody today

00:00:09,150 --> 00:00:12,540
we're going to talk about design

00:00:10,200 --> 00:00:14,880
patterns for efficient DevOps processes

00:00:12,540 --> 00:00:16,859
so for those of you who do not know me

00:00:14,880 --> 00:00:19,470
my name is Rebecca Fitzhugh and if you

00:00:16,859 --> 00:00:24,000
could not tell by my very American

00:00:19,470 --> 00:00:26,279
accent I live in Los Angeles this is not

00:00:24,000 --> 00:00:28,710
my first DevOps days in Israel though

00:00:26,279 --> 00:00:30,720
nor my first time in Israel I'm lucky to

00:00:28,710 --> 00:00:31,230
have worked in Israel for about three

00:00:30,720 --> 00:00:34,170
years

00:00:31,230 --> 00:00:39,780
so I commuted back and forth from Los

00:00:34,170 --> 00:00:42,329
Angeles to Tel Aviv about 10 to 12 times

00:00:39,780 --> 00:00:46,230
a year for three years so I'm very

00:00:42,329 --> 00:00:48,870
familiar with the airport security they

00:00:46,230 --> 00:00:51,329
very much love me then you see that

00:00:48,870 --> 00:00:54,030
magic like I've powers I guess from

00:00:51,329 --> 00:00:55,530
flying to Israel so much so I work for a

00:00:54,030 --> 00:00:57,899
company out of Silicon Valley called

00:00:55,530 --> 00:01:02,219
rubric so I'm going to try and keep this

00:00:57,899 --> 00:01:03,480
as high-level and not specific to my

00:01:02,219 --> 00:01:04,949
company as possible but there are a

00:01:03,480 --> 00:01:06,830
couple of things that I want to point

00:01:04,949 --> 00:01:09,360
out that we're doing that I've learned

00:01:06,830 --> 00:01:15,360
that have made our process is a little

00:01:09,360 --> 00:01:17,909
bit more efficient so first thing we're

00:01:15,360 --> 00:01:19,409
focusing on patterns but a lot of times

00:01:17,909 --> 00:01:20,700
when you see presentations about DevOps

00:01:19,409 --> 00:01:22,740
you're at least the ones that I see in

00:01:20,700 --> 00:01:26,640
the u.s. they a lot of times focus on

00:01:22,740 --> 00:01:27,240
anti patterns I'm not about that all

00:01:26,640 --> 00:01:28,439
right

00:01:27,240 --> 00:01:29,939
because when we talk about patterns

00:01:28,439 --> 00:01:31,380
these are good things these are good

00:01:29,939 --> 00:01:33,240
practices that we should be doing that

00:01:31,380 --> 00:01:34,500
we want to be doing and then anti

00:01:33,240 --> 00:01:35,460
patterns or like please don't do this

00:01:34,500 --> 00:01:38,549
it's a really bad idea

00:01:35,460 --> 00:01:40,860
so instead of having a 20 40 however

00:01:38,549 --> 00:01:43,049
long minute presentation where we talk

00:01:40,860 --> 00:01:45,600
about all the really bad how about

00:01:43,049 --> 00:01:47,909
we focus on the good stuff yeah this is

00:01:45,600 --> 00:01:49,170
gonna be divided into four parts so

00:01:47,909 --> 00:01:51,329
we're gonna look at value stream mapping

00:01:49,170 --> 00:01:54,600
they're going to look at release

00:01:51,329 --> 00:01:56,000
engineering test automation and change

00:01:54,600 --> 00:01:59,670
management everybody's favorite topic

00:01:56,000 --> 00:02:02,520
right so who in here is familiars value

00:01:59,670 --> 00:02:03,990
stream mapping a couple of people who

00:02:02,520 --> 00:02:05,740
and you're actually practice value

00:02:03,990 --> 00:02:11,150
stream mapping

00:02:05,740 --> 00:02:13,640
all right couple of people so at a very

00:02:11,150 --> 00:02:17,090
basic level value stream mapping is a

00:02:13,640 --> 00:02:19,310
tool to help you eliminate waste right

00:02:17,090 --> 00:02:21,830
so the goal is for you to map out what

00:02:19,310 --> 00:02:23,060
everything looks like right now from a

00:02:21,830 --> 00:02:25,280
product standpoint in terms of

00:02:23,060 --> 00:02:27,890
engineering and then figure out where

00:02:25,280 --> 00:02:29,300
your bottlenecks are and then that gives

00:02:27,890 --> 00:02:30,890
you an opportunity to then figure out

00:02:29,300 --> 00:02:32,060
how you can alleviate those bottlenecks

00:02:30,890 --> 00:02:35,750
and make a more efficient process

00:02:32,060 --> 00:02:37,730
overall this is not something that we

00:02:35,750 --> 00:02:38,930
magically came up with as a part of

00:02:37,730 --> 00:02:41,000
DevOps this is something that's been

00:02:38,930 --> 00:02:42,280
around for actually a very long time but

00:02:41,000 --> 00:02:44,660
it was always a part of manufacturing

00:02:42,280 --> 00:02:47,090
all right so does anybody heard of

00:02:44,660 --> 00:02:50,269
things like Toyota kata like how Toyota

00:02:47,090 --> 00:02:53,239
right so this isn't new right this is

00:02:50,269 --> 00:02:54,950
something actually when I did a similar

00:02:53,239 --> 00:02:57,530
presentation to this in Detroit Michigan

00:02:54,950 --> 00:02:59,900
in the US and in Detroit this is where

00:02:57,530 --> 00:03:02,569
they manufacture a vast majority of

00:02:59,900 --> 00:03:04,430
American cars and when I talked about

00:03:02,569 --> 00:03:07,010
lluÃ­s engineering and I talked about

00:03:04,430 --> 00:03:08,060
test automation stuff like but I was

00:03:07,010 --> 00:03:09,590
talking about value stream mapping they

00:03:08,060 --> 00:03:12,620
like we actually know this right because

00:03:09,590 --> 00:03:15,769
it was all about manufacturing so if for

00:03:12,620 --> 00:03:17,650
example in the very first line the very

00:03:15,769 --> 00:03:19,730
first process takes a minute to do and

00:03:17,650 --> 00:03:21,980
then the second process takes a minute

00:03:19,730 --> 00:03:24,109
to do that we can do effectively one

00:03:21,980 --> 00:03:25,670
thing per minute but the problem is is

00:03:24,109 --> 00:03:28,970
like for the second example if we're

00:03:25,670 --> 00:03:30,829
doing four things in one minute and then

00:03:28,970 --> 00:03:33,230
the next process that happens after that

00:03:30,829 --> 00:03:35,150
can only do one thing per minute we now

00:03:33,230 --> 00:03:36,470
have a bottleneck right because things

00:03:35,150 --> 00:03:38,510
are going to stack up because things are

00:03:36,470 --> 00:03:40,860
now hitting point number two faster than

00:03:38,510 --> 00:03:43,650
point number two can process them

00:03:40,860 --> 00:03:45,330
so what do we do well either we need to

00:03:43,650 --> 00:03:46,920
be able to do four things per minute on

00:03:45,330 --> 00:03:48,720
both sides or we need to be able to do

00:03:46,920 --> 00:03:51,420
one thing per minute for both steps

00:03:48,720 --> 00:03:53,690
right so what does this look like from a

00:03:51,420 --> 00:03:57,960
software engineer engineering standpoint

00:03:53,690 --> 00:03:58,830
so this is a before there's some things

00:03:57,960 --> 00:04:00,720
in there that you're probably familiar

00:03:58,830 --> 00:04:04,050
with we all use JIRA right

00:04:00,720 --> 00:04:06,540
yeah JIRA confluence right so shout out

00:04:04,050 --> 00:04:07,620
I guess to Atlassian a little bit but

00:04:06,540 --> 00:04:09,360
the first thing is is like what are we

00:04:07,620 --> 00:04:12,450
trying to develop what is the use case

00:04:09,360 --> 00:04:14,880
what is the story all the way to the end

00:04:12,450 --> 00:04:16,380
of is this a qualified build yes or no

00:04:14,880 --> 00:04:18,359
all right so this walks through the

00:04:16,380 --> 00:04:21,420
process here of doing analysis doing

00:04:18,359 --> 00:04:22,470
exploratory research on what we're going

00:04:21,420 --> 00:04:24,300
to be engineering what we're going to be

00:04:22,470 --> 00:04:26,070
developing what are the requirements for

00:04:24,300 --> 00:04:29,310
me to write this integration of my

00:04:26,070 --> 00:04:31,230
product to say Amazon s3 what do I need

00:04:29,310 --> 00:04:33,000
to do all right I need to gather that

00:04:31,230 --> 00:04:34,560
information and figure out from a

00:04:33,000 --> 00:04:36,510
software standpoint at that point where

00:04:34,560 --> 00:04:39,240
I'm going to be doing we move into test

00:04:36,510 --> 00:04:41,250
repository gap analysis feature test

00:04:39,240 --> 00:04:43,140
case development we start getting into

00:04:41,250 --> 00:04:44,700
testing we can do unit testing

00:04:43,140 --> 00:04:46,740
functional testing into end testing

00:04:44,700 --> 00:04:48,900
right and we just keep moving along what

00:04:46,740 --> 00:04:52,640
happens if we find a bug you fire your

00:04:48,900 --> 00:04:55,110
ticket and then what we fix the bug oh

00:04:52,640 --> 00:04:56,580
so I didn't see a lot of hands and hear

00:04:55,110 --> 00:04:58,740
that say that you use value stream

00:04:56,580 --> 00:05:00,419
mapping that's okay that's actually a

00:04:58,740 --> 00:05:02,220
good thing I think in a way because

00:05:00,419 --> 00:05:04,610
people who are very very familiar value

00:05:02,220 --> 00:05:07,090
stream mapping they focus very much on

00:05:04,610 --> 00:05:11,320
the symbols

00:05:07,090 --> 00:05:12,280
I don't care right about the symbols it

00:05:11,320 --> 00:05:14,350
doesn't have to be the most perfect

00:05:12,280 --> 00:05:15,940
value stream map it uses all the exact

00:05:14,350 --> 00:05:18,340
symbols and all the right things so what

00:05:15,940 --> 00:05:20,710
does a triangle mean what does map out

00:05:18,340 --> 00:05:22,449
your process first and then figure out

00:05:20,710 --> 00:05:24,550
how long it takes to do each of these

00:05:22,449 --> 00:05:26,260
things and you're going to find that

00:05:24,550 --> 00:05:28,030
there will be certain processes like for

00:05:26,260 --> 00:05:29,800
example functional testing where you

00:05:28,030 --> 00:05:33,130
might go it's it's a functional testing

00:05:29,800 --> 00:05:34,780
state for four weeks that's a problem

00:05:33,130 --> 00:05:36,669
that's a problem for is that for example

00:05:34,780 --> 00:05:39,370
the company I work for when we're

00:05:36,669 --> 00:05:42,130
pushing out releases monthly and major

00:05:39,370 --> 00:05:44,080
releases every quarter all right so we

00:05:42,130 --> 00:05:46,090
can't sit there in a functional testing

00:05:44,080 --> 00:05:47,229
state for four weeks so we need to

00:05:46,090 --> 00:05:49,660
figure out how to fix that

00:05:47,229 --> 00:05:51,520
right and so for the example this

00:05:49,660 --> 00:05:52,870
particular example we eliminated all of

00:05:51,520 --> 00:05:53,620
the things that have the triangles next

00:05:52,870 --> 00:05:55,300
to them because that's where we

00:05:53,620 --> 00:05:58,330
identified that there was a bottleneck

00:05:55,300 --> 00:06:00,070
so this is actually the end state now

00:05:58,330 --> 00:06:01,900
this is not the most clean simple

00:06:00,070 --> 00:06:04,240
example but this is a realistic example

00:06:01,900 --> 00:06:06,550
right so notice that the main line here

00:06:04,240 --> 00:06:08,289
we cut it through so we've dropped a lot

00:06:06,550 --> 00:06:10,270
of that additional testing and came up

00:06:08,289 --> 00:06:14,979
with a more automated and sophisticated

00:06:10,270 --> 00:06:16,539
testing process and so then from there

00:06:14,979 --> 00:06:18,370
hey if we do actually run into a problem

00:06:16,539 --> 00:06:20,260
during the testing process then we're

00:06:18,370 --> 00:06:22,419
going to shoot down and start doing some

00:06:20,260 --> 00:06:24,729
of these sub steps rather than requiring

00:06:22,419 --> 00:06:26,889
these steps in the first place when the

00:06:24,729 --> 00:06:28,960
vast majority of our testing doesn't

00:06:26,889 --> 00:06:31,150
require that why go through that process

00:06:28,960 --> 00:06:32,410
right that's not very efficient so we

00:06:31,150 --> 00:06:33,880
cut that out and made that optional

00:06:32,410 --> 00:06:35,740
right so that's what you're seeing down

00:06:33,880 --> 00:06:38,770
at the bottom as hopefully like for

00:06:35,740 --> 00:06:41,889
example fixing a bug hopefully bugs are

00:06:38,770 --> 00:06:43,990
not in every single release right or

00:06:41,889 --> 00:06:45,550
thousands of bugs hopefully that's a

00:06:43,990 --> 00:06:48,880
kind of an anomaly but we know that

00:06:45,550 --> 00:06:51,160
that's not always true so when we talk

00:06:48,880 --> 00:06:53,289
about value stream mapping how can we

00:06:51,160 --> 00:06:54,510
make them more efficient so for me one

00:06:53,289 --> 00:06:56,830
of the things that I have found to be

00:06:54,510 --> 00:06:58,570
very very beneficial is to actually

00:06:56,830 --> 00:07:00,970
start at the end and then work my way

00:06:58,570 --> 00:07:03,669
back to beginning I find that when I

00:07:00,970 --> 00:07:05,500
work from beginning to end that I get

00:07:03,669 --> 00:07:06,940
very lost sometimes all of the sub steps

00:07:05,500 --> 00:07:08,740
and some of the who here's what we could

00:07:06,940 --> 00:07:11,380
do and I lose track of actually going

00:07:08,740 --> 00:07:12,880
from start to finish so by me starting

00:07:11,380 --> 00:07:14,950
at the very end I go okay great we have

00:07:12,880 --> 00:07:16,810
a qualified product whoa how do we

00:07:14,950 --> 00:07:18,520
determine who's qualified what kind of

00:07:16,810 --> 00:07:20,749
test did we do

00:07:18,520 --> 00:07:22,639
what about the release engineering piece

00:07:20,749 --> 00:07:24,469
of that what came before that you

00:07:22,639 --> 00:07:26,539
wouldn't do any research how do we even

00:07:24,469 --> 00:07:28,879
that this was a use case so if I work

00:07:26,539 --> 00:07:31,219
backwards I'm able to more adequately

00:07:28,879 --> 00:07:33,919
put together an accurate value stream

00:07:31,219 --> 00:07:37,389
map the other thing is is d'Or rely on

00:07:33,919 --> 00:07:40,009
information gathered by somebody else I

00:07:37,389 --> 00:07:42,319
know that sounds very like I don't trust

00:07:40,009 --> 00:07:45,259
other people but that actually skews a

00:07:42,319 --> 00:07:48,439
lot of times information but we say well

00:07:45,259 --> 00:07:51,379
on average for this type of engineering

00:07:48,439 --> 00:07:54,289
or this type of product it takes oh wait

00:07:51,379 --> 00:07:55,879
I don't want to work with an average I

00:07:54,289 --> 00:07:59,539
don't want to work at the very accurate

00:07:55,879 --> 00:08:00,590
number so you have major releases you've

00:07:59,539 --> 00:08:03,229
got minor releases you have everything

00:08:00,590 --> 00:08:05,599
in between create a value stream map for

00:08:03,229 --> 00:08:08,779
each right measure what it takes for

00:08:05,599 --> 00:08:11,750
each of those different options and then

00:08:08,779 --> 00:08:13,550
of course make sure you are going door

00:08:11,750 --> 00:08:16,310
to door make sure you are then measuring

00:08:13,550 --> 00:08:18,020
between each thing how long it takes so

00:08:16,310 --> 00:08:18,529
now that I'm finished and I move it over

00:08:18,020 --> 00:08:20,389
to there

00:08:18,529 --> 00:08:23,419
it takes me five minutes to do this

00:08:20,389 --> 00:08:25,729
process but then it goes to the next

00:08:23,419 --> 00:08:27,710
person and it takes them five minutes to

00:08:25,729 --> 00:08:30,439
do the next process but in between it's

00:08:27,710 --> 00:08:31,610
just there for 24 hours 48 hours we want

00:08:30,439 --> 00:08:33,649
to measure not only how long does the

00:08:31,610 --> 00:08:35,180
process take but how long does it take

00:08:33,649 --> 00:08:37,449
in between those processes actually

00:08:35,180 --> 00:08:37,449
occurring

00:08:37,899 --> 00:08:43,130
so the next thing release engineering

00:08:41,169 --> 00:08:46,550
anybody in here already doing some

00:08:43,130 --> 00:08:49,940
release engineering no measure just like

00:08:46,550 --> 00:08:52,339
talk faster at lunch got it all right so

00:08:49,940 --> 00:08:55,370
the goal is to accelerate the path from

00:08:52,339 --> 00:08:57,079
DevOps and vice-versa right and of

00:08:55,370 --> 00:09:00,560
course ops to dev that's our goal here

00:08:57,079 --> 00:09:02,600
with release engineering so this is the

00:09:00,560 --> 00:09:05,120
process right we all agree that this is

00:09:02,600 --> 00:09:07,160
the process very simplified check out

00:09:05,120 --> 00:09:14,630
code compile test release that sounds

00:09:07,160 --> 00:09:17,120
right yeah is it realistic nope okay

00:09:14,630 --> 00:09:19,449
what about this a little bit more

00:09:17,120 --> 00:09:19,449
realistic

00:09:20,670 --> 00:09:25,420
closer

00:09:22,029 --> 00:09:29,560
all right fine that look a little bit

00:09:25,420 --> 00:09:32,080
better all right so we have a process in

00:09:29,560 --> 00:09:39,670
place what do you guys think is the most

00:09:32,080 --> 00:09:40,690
important part of this feel like most

00:09:39,670 --> 00:09:43,630
people here would probably argue

00:09:40,690 --> 00:09:47,709
deployment now is that we you guys think

00:09:43,630 --> 00:09:49,839
deployment and alert monitoring you know

00:09:47,709 --> 00:09:52,029
anytime I ask that question I say what's

00:09:49,839 --> 00:09:54,850
the most important piece I'm always

00:09:52,029 --> 00:09:56,380
going to if alert monitoring is a step

00:09:54,850 --> 00:09:58,540
I'm always gonna say that that's the

00:09:56,380 --> 00:10:01,089
most important in my perspective right

00:09:58,540 --> 00:10:04,120
because how do I know that it's actually

00:10:01,089 --> 00:10:06,190
ready for deployment somebody can tell

00:10:04,120 --> 00:10:07,360
me but how do I know that all of these

00:10:06,190 --> 00:10:10,510
steps have actually been gone through

00:10:07,360 --> 00:10:13,420
and worked right so I'm always going to

00:10:10,510 --> 00:10:15,820
vote alerts monitoring so we know that

00:10:13,420 --> 00:10:19,060
this is a little bit more realistic it's

00:10:15,820 --> 00:10:21,100
not beautiful it's not very efficient

00:10:19,060 --> 00:10:24,190
compared to say the very beginning but

00:10:21,100 --> 00:10:25,529
it's fairly accurate now the thing that

00:10:24,190 --> 00:10:27,850
I want to point out when we talk about

00:10:25,529 --> 00:10:29,500
release engineering is something called

00:10:27,850 --> 00:10:32,440
the sin ofin framework has anybody ever

00:10:29,500 --> 00:10:34,300
heard of this sniffing framework okay so

00:10:32,440 --> 00:10:35,560
it's again not something brand new not

00:10:34,300 --> 00:10:38,079
something that's just came out because

00:10:35,560 --> 00:10:41,500
of DevOps but the thing the point that

00:10:38,079 --> 00:10:45,190
we want to always make is that we need

00:10:41,500 --> 00:10:47,320
to address human factors and if we make

00:10:45,190 --> 00:10:49,480
an overly complex system or an overly

00:10:47,320 --> 00:10:52,029
complex process that's going to make it

00:10:49,480 --> 00:10:54,310
harder for us to manage and harder for

00:10:52,029 --> 00:10:56,770
us to actually execute thereby making

00:10:54,310 --> 00:11:00,610
the human factor even more of an element

00:10:56,770 --> 00:11:02,800
that could go wrong right so we're

00:11:00,610 --> 00:11:05,260
talking about patterns we equate

00:11:02,800 --> 00:11:06,670
patterns to effectively best practice so

00:11:05,260 --> 00:11:09,430
the best thing that we can do for any

00:11:06,670 --> 00:11:12,339
process is always going to be make it as

00:11:09,430 --> 00:11:15,610
simple as possible so ideally if we can

00:11:12,339 --> 00:11:17,290
simplify we should because when it comes

00:11:15,610 --> 00:11:19,480
to architecture whether that be software

00:11:17,290 --> 00:11:20,829
or infrastructure so this I would say

00:11:19,480 --> 00:11:24,339
applies whether you're on the dev side

00:11:20,829 --> 00:11:26,500
or the ops side or just the DevOps that

00:11:24,339 --> 00:11:28,750
it's all about simplicity because

00:11:26,500 --> 00:11:31,209
complexity is going to make it harder

00:11:28,750 --> 00:11:31,690
for it to be reliable if you have a very

00:11:31,209 --> 00:11:34,120
calm

00:11:31,690 --> 00:11:36,460
process you following it to a tee

00:11:34,120 --> 00:11:37,720
becomes nearly impossible so you always

00:11:36,460 --> 00:11:39,940
want to make sure that it is as simple

00:11:37,720 --> 00:11:42,820
as possible so if we can get back to

00:11:39,940 --> 00:11:44,290
this that's what we want to do all right

00:11:42,820 --> 00:11:46,870
so if we can roll up in those those

00:11:44,290 --> 00:11:48,640
steps into sub steps to one thing and

00:11:46,870 --> 00:11:51,720
make it more iterative that would be

00:11:48,640 --> 00:11:54,760
better than having 55 huge steps right

00:11:51,720 --> 00:12:00,250
so where does this all come in when we

00:11:54,760 --> 00:12:01,900
talk about DevOps CIC D right CIC D so

00:12:00,250 --> 00:12:04,300
if you're not talking about and thinking

00:12:01,900 --> 00:12:05,290
about using continuous improvement if

00:12:04,300 --> 00:12:09,220
you're not talking about thinking about

00:12:05,290 --> 00:12:12,820
doing continuous delivery I'd be a

00:12:09,220 --> 00:12:15,700
little bit worried I recently gave a

00:12:12,820 --> 00:12:17,440
keynote speech at a conference in the US

00:12:15,700 --> 00:12:19,810
that was very infrastructure focused and

00:12:17,440 --> 00:12:21,160
I stood up there for 60 minutes and I

00:12:19,810 --> 00:12:23,410
told infrastructure guys that they were

00:12:21,160 --> 00:12:27,790
doing everything wrong they didn't like

00:12:23,410 --> 00:12:30,070
that as you can imagine because they

00:12:27,790 --> 00:12:31,420
don't think about things like this we've

00:12:30,070 --> 00:12:33,010
talked about infrastructures code we go

00:12:31,420 --> 00:12:34,060
yeah that makes sense but then people

00:12:33,010 --> 00:12:35,950
who are living and breathing and they

00:12:34,060 --> 00:12:37,690
only do storage for a living or they

00:12:35,950 --> 00:12:41,110
only do networking for a living we start

00:12:37,690 --> 00:12:43,120
talking about codifying that and using

00:12:41,110 --> 00:12:44,110
pipelines and using workflows they're

00:12:43,120 --> 00:12:47,680
like

00:12:44,110 --> 00:12:49,300
1 right so we need to do this on both

00:12:47,680 --> 00:12:50,740
sides of the fence and we absolutely

00:12:49,300 --> 00:12:53,610
need to be doing it so this shouldn't be

00:12:50,740 --> 00:12:53,610
something that is a surprise

00:12:53,940 --> 00:13:02,380
canary does something we're all familiar

00:12:56,350 --> 00:13:03,910
with a little bit Hey so back in the

00:13:02,380 --> 00:13:05,680
good old days just kidding

00:13:03,910 --> 00:13:08,770
so the Industrial Revolution that was a

00:13:05,680 --> 00:13:11,560
thing and so when we talk about coal

00:13:08,770 --> 00:13:12,970
mining what used to happen in the 1800's

00:13:11,560 --> 00:13:16,150
and early 1900s as they would actually

00:13:12,970 --> 00:13:17,950
drop birds into coal mines and if those

00:13:16,150 --> 00:13:20,260
birds came back up they were like okay

00:13:17,950 --> 00:13:21,790
we can go down there as humans if the

00:13:20,260 --> 00:13:23,620
birds didn't come back they're like they

00:13:21,790 --> 00:13:27,460
must be dead we shouldn't go down there

00:13:23,620 --> 00:13:28,900
right so we talked about Canaries we

00:13:27,460 --> 00:13:31,330
actually can do this with software as

00:13:28,900 --> 00:13:33,160
well so the idea here is that we

00:13:31,330 --> 00:13:35,410
effectively roll out updates and

00:13:33,160 --> 00:13:38,320
releases to instead of everybody at once

00:13:35,410 --> 00:13:39,730
to a small number of users that way we

00:13:38,320 --> 00:13:41,380
can catch certain problems because

00:13:39,730 --> 00:13:43,630
realistically does the next thing we

00:13:41,380 --> 00:13:45,700
talk about test automation and we're

00:13:43,630 --> 00:13:48,040
going to with test automation try and

00:13:45,700 --> 00:13:49,210
accommodate every single factor every

00:13:48,040 --> 00:13:52,390
single operating system every single

00:13:49,210 --> 00:13:54,460
version we might miss one we might miss

00:13:52,390 --> 00:13:58,090
something that's the realistic stance

00:13:54,460 --> 00:14:02,740
here so by taking a small group of

00:13:58,090 --> 00:14:04,660
customers right say five percent push

00:14:02,740 --> 00:14:07,450
them the new version let them play with

00:14:04,660 --> 00:14:09,160
it in production and then see what

00:14:07,450 --> 00:14:11,230
happens it sounds a little bit scary

00:14:09,160 --> 00:14:12,760
that's a lot better than potentially

00:14:11,230 --> 00:14:14,710
pushing this out to everybody after

00:14:12,760 --> 00:14:17,500
running all of your tests and going it's

00:14:14,710 --> 00:14:20,080
good still go through your tests please

00:14:17,500 --> 00:14:21,400
all right but then once you validate and

00:14:20,080 --> 00:14:23,230
say I think that it's ready for

00:14:21,400 --> 00:14:25,240
primetime I think it's ready for

00:14:23,230 --> 00:14:26,740
everybody don't actually give it to

00:14:25,240 --> 00:14:28,630
everybody all right so this is something

00:14:26,740 --> 00:14:30,970
that we do at my company we actually

00:14:28,630 --> 00:14:34,300
when we announce a release we then go

00:14:30,970 --> 00:14:36,700
into EA right early access and we choose

00:14:34,300 --> 00:14:40,000
about five to ten customers that have

00:14:36,700 --> 00:14:41,110
applicable infrastructure for whatever

00:14:40,000 --> 00:14:43,150
it is that we're just into engineered

00:14:41,110 --> 00:14:44,860
for okay so for example we just released

00:14:43,150 --> 00:14:46,300
integration with Google cloud so we had

00:14:44,860 --> 00:14:48,400
several customers I've been asking about

00:14:46,300 --> 00:14:50,470
Google cloud so we pushed the release of

00:14:48,400 --> 00:14:52,210
them first and then we did da where we

00:14:50,470 --> 00:14:53,830
widen that scope a little bit more to

00:14:52,210 --> 00:14:55,240
people who didn't have that specific use

00:14:53,830 --> 00:14:56,980
case just to make sure that everything

00:14:55,240 --> 00:14:57,939
played well with each other and then

00:14:56,980 --> 00:15:00,939
eventually we go

00:14:57,939 --> 00:15:02,289
to GA which is everybody right but we've

00:15:00,939 --> 00:15:03,999
definitely smart start with a very small

00:15:02,289 --> 00:15:06,069
percentage because that way we can catch

00:15:03,999 --> 00:15:09,879
it and go back and fix things that our

00:15:06,069 --> 00:15:10,720
tests may have missed so realistically

00:15:09,879 --> 00:15:12,849
when we talked about released

00:15:10,720 --> 00:15:15,789
engineering who and years doing this

00:15:12,849 --> 00:15:17,079
actively right now I expect like I'm in

00:15:15,789 --> 00:15:18,999
Israel so I expect pretty much every

00:15:17,079 --> 00:15:20,049
hand go up cuz I know working here for

00:15:18,999 --> 00:15:22,539
three years you guys are far more

00:15:20,049 --> 00:15:23,979
advanced than in the u.s. because when I

00:15:22,539 --> 00:15:28,169
ask this question the u.s. like there's

00:15:23,979 --> 00:15:30,129
a one person that's like everyone so

00:15:28,169 --> 00:15:31,659
realistically this is something that's

00:15:30,129 --> 00:15:34,329
relatively new in the scheme of things

00:15:31,659 --> 00:15:36,669
is somebody whose job is to engineer

00:15:34,329 --> 00:15:39,099
Alicia's right or a team who's javis and

00:15:36,669 --> 00:15:40,509
releases so my first bit of advice for

00:15:39,099 --> 00:15:42,909
making this more efficient as honest to

00:15:40,509 --> 00:15:44,079
be patient it's evolving it's changing

00:15:42,909 --> 00:15:46,929
this is still relatively new in the

00:15:44,079 --> 00:15:48,639
scheme of things but the most important

00:15:46,929 --> 00:15:51,039
thing I think here is don't make it an

00:15:48,639 --> 00:15:52,329
afterthought if you think that having

00:15:51,039 --> 00:15:55,089
released engineering is a good idea

00:15:52,329 --> 00:15:57,779
start adding that into your process now

00:15:55,089 --> 00:16:03,579
start adding that into the workflow for

00:15:57,779 --> 00:16:05,799
idea to end product okay secondly the

00:16:03,579 --> 00:16:07,269
goal of this is to have and the goal of

00:16:05,799 --> 00:16:09,759
DevOps and general is to have people

00:16:07,269 --> 00:16:12,220
like the devs the release engineers the

00:16:09,759 --> 00:16:14,559
sres everybody work together what we

00:16:12,220 --> 00:16:17,319
should not be doing is creating a code

00:16:14,559 --> 00:16:20,559
and then throwing it to the release

00:16:17,319 --> 00:16:22,659
engineer and go hey go but that's what

00:16:20,559 --> 00:16:24,939
happens a lot of time guilty of that

00:16:22,659 --> 00:16:26,259
happening at my company so the goal is

00:16:24,939 --> 00:16:28,689
not to just build things and throw it

00:16:26,259 --> 00:16:30,699
over the goal is to actually sit down

00:16:28,689 --> 00:16:31,779
and show them with intent how it should

00:16:30,699 --> 00:16:35,169
be building how it should be deployed

00:16:31,779 --> 00:16:37,449
right that way we can have this happened

00:16:35,169 --> 00:16:39,939
more efficiently error-prone steps

00:16:37,449 --> 00:16:41,529
automates whether my opinion shopping or

00:16:39,939 --> 00:16:44,079
anything because I don't want to

00:16:41,529 --> 00:16:46,319
actually work all right I want to chill

00:16:44,079 --> 00:16:49,059
for eight hours in danger paycheck calm

00:16:46,319 --> 00:16:51,669
but maybe that's just me

00:16:49,059 --> 00:16:53,349
and then source control use it that

00:16:51,669 --> 00:16:54,809
should be kind of a duh statement you

00:16:53,349 --> 00:17:00,879
should go yep that makes sense

00:16:54,809 --> 00:17:03,639
so test automation when I was a kid my

00:17:00,879 --> 00:17:04,779
sister I think I have the best sister in

00:17:03,639 --> 00:17:07,600
the world cuz she always bought me the

00:17:04,779 --> 00:17:09,970
coolest gift smells it mom dad yes

00:17:07,600 --> 00:17:11,980
she's the best right she got me the

00:17:09,970 --> 00:17:15,759
coolest bicycle on the block she gave me

00:17:11,980 --> 00:17:18,519
a Polaroid camera over 600 this exact

00:17:15,759 --> 00:17:22,240
one green I thought I was the coolest

00:17:18,519 --> 00:17:24,100
kid in New Orleans I take a couple of

00:17:22,240 --> 00:17:28,179
pictures so I made sure the camera

00:17:24,100 --> 00:17:34,179
worked and I went have a great idea I'm

00:17:28,179 --> 00:17:35,440
gonna take it apart and I did but gÃ¼ell

00:17:34,179 --> 00:17:37,659
of course was to get it back together

00:17:35,440 --> 00:17:39,610
because I was convinced that if I could

00:17:37,659 --> 00:17:41,649
take apart this camera and I knew what

00:17:39,610 --> 00:17:44,169
every piece did but that would make me a

00:17:41,649 --> 00:17:47,830
better photographer for a Polaroid

00:17:44,169 --> 00:17:49,210
camera okay turns out when you're 10 you

00:17:47,830 --> 00:17:51,279
cannot get a pollard camera back

00:17:49,210 --> 00:17:53,679
together but that's not the moral of the

00:17:51,279 --> 00:17:55,899
story right the moral of the story is we

00:17:53,679 --> 00:17:58,179
think about unit testing and in testing

00:17:55,899 --> 00:17:59,350
it doesn't have to be either/or I've

00:17:58,179 --> 00:18:00,970
worked in organizations where the

00:17:59,350 --> 00:18:02,769
adjusted unit testing organizations are

00:18:00,970 --> 00:18:06,129
they just didn't end it can be both

00:18:02,769 --> 00:18:08,289
right so you can test the individual

00:18:06,129 --> 00:18:10,240
components put it back together that's

00:18:08,289 --> 00:18:12,250
the whole thing right and that's what we

00:18:10,240 --> 00:18:13,480
want to do so we want to test each part

00:18:12,250 --> 00:18:15,159
thoroughly but then test that this

00:18:13,480 --> 00:18:16,570
camera actually works and can take

00:18:15,159 --> 00:18:18,700
pictures rather than just making sure

00:18:16,570 --> 00:18:23,049
that the spring is nice and bouncy right

00:18:18,700 --> 00:18:24,789
other mirror reflects okay so what else

00:18:23,049 --> 00:18:27,009
there's also things that you can't see

00:18:24,789 --> 00:18:30,549
that you need to be testing as well so

00:18:27,009 --> 00:18:33,070
third-party integrations and also

00:18:30,549 --> 00:18:34,809
anything that's non-functional and I

00:18:33,070 --> 00:18:36,429
think that we should be testing very

00:18:34,809 --> 00:18:37,870
early okay

00:18:36,429 --> 00:18:41,190
so there's always the Silicon Valley

00:18:37,870 --> 00:18:45,669
philosophy that's fail fast and often

00:18:41,190 --> 00:18:48,460
failing sucks but there is a point to

00:18:45,669 --> 00:18:50,019
that I would much rather no I would much

00:18:48,460 --> 00:18:52,360
rather know very early in on the process

00:18:50,019 --> 00:18:54,490
that something isn't working then build

00:18:52,360 --> 00:18:57,490
everything right millions of lines of

00:18:54,490 --> 00:18:58,659
code and then go oh shoot something's

00:18:57,490 --> 00:19:02,289
not working now I have to do both and

00:18:58,659 --> 00:19:06,039
figure out where that is right so as an

00:19:02,289 --> 00:19:09,549
example I fly far too often I primarily

00:19:06,039 --> 00:19:12,789
lived in LAX terminal 7 rather than in

00:19:09,549 --> 00:19:14,780
Los Angeles and so I frequently used

00:19:12,789 --> 00:19:17,630
this website

00:19:14,780 --> 00:19:19,650
to book flights manage flights to

00:19:17,630 --> 00:19:22,410
request an upgrade and then get really

00:19:19,650 --> 00:19:24,450
upset when I don't get an upgrade and so

00:19:22,410 --> 00:19:26,660
when we think about booking a flight the

00:19:24,450 --> 00:19:29,520
process begins with searching right

00:19:26,660 --> 00:19:31,380
getting results back expanding those

00:19:29,520 --> 00:19:33,330
results getting more information because

00:19:31,380 --> 00:19:35,670
the first thing I do is go that flight

00:19:33,330 --> 00:19:37,950
time looks great what seats are

00:19:35,670 --> 00:19:40,320
available because I'm not sitting in the

00:19:37,950 --> 00:19:42,900
middle right so I have to get all my

00:19:40,320 --> 00:19:46,410
information and then I go okay this one

00:19:42,900 --> 00:19:49,550
looks good enter my information hey make

00:19:46,410 --> 00:19:52,020
sure that it's hopefully securely

00:19:49,550 --> 00:19:53,700
transmitted and then I get a

00:19:52,020 --> 00:19:55,440
confirmation maybe they say yep here's

00:19:53,700 --> 00:19:57,480
your confirmation number and that also

00:19:55,440 --> 00:19:59,880
triggers an email to get set all right

00:19:57,480 --> 00:20:02,040
but realistically all these things tie

00:19:59,880 --> 00:20:04,500
back to some kind of application server

00:20:02,040 --> 00:20:05,840
which goes back to some kind of database

00:20:04,500 --> 00:20:10,650
where it's storing all this information

00:20:05,840 --> 00:20:12,510
so how do we test that I love when you

00:20:10,650 --> 00:20:13,890
create something a PowerPoint and then

00:20:12,510 --> 00:20:16,470
you put it in Google slides and it looks

00:20:13,890 --> 00:20:20,250
like weird on the sides I do it all the

00:20:16,470 --> 00:20:23,190
time for working on one point so have

00:20:20,250 --> 00:20:24,210
you seen the upside down pyramid my ice

00:20:23,190 --> 00:20:25,560
cream cone type thing

00:20:24,210 --> 00:20:27,570
this is ideally how we want to do we

00:20:25,560 --> 00:20:31,560
want to start the individual unit so for

00:20:27,570 --> 00:20:33,870
example can I actually search do I get

00:20:31,560 --> 00:20:36,030
results back that's probably very

00:20:33,870 --> 00:20:37,770
important to test before I go can I pay

00:20:36,030 --> 00:20:39,420
all right so walk through this process

00:20:37,770 --> 00:20:41,940
and make sure that each of these things

00:20:39,420 --> 00:20:43,140
works individually right move up to your

00:20:41,940 --> 00:20:45,570
component move up the integration to

00:20:43,140 --> 00:20:48,210
view a lot of times who's worked in a

00:20:45,570 --> 00:20:50,070
with Ain application I was going to name

00:20:48,210 --> 00:20:51,270
names but then somebody speaking earlier

00:20:50,070 --> 00:20:56,330
said that they worked for this company

00:20:51,270 --> 00:20:58,590
so I'm not gonna say it okay um who's

00:20:56,330 --> 00:21:02,130
logged in and looked at him in like this

00:20:58,590 --> 00:21:05,310
UI is piece of crap right for me

00:21:02,130 --> 00:21:07,020
SharePoint I don't care

00:21:05,310 --> 00:21:08,340
you're the best sharepoint developer out

00:21:07,020 --> 00:21:11,700
there you create the most custome wise

00:21:08,340 --> 00:21:13,980
you just ice to log in let go so first

00:21:11,700 --> 00:21:16,290
because a lot of times as technologists

00:21:13,980 --> 00:21:18,270
we focus at the backend we focus in the

00:21:16,290 --> 00:21:20,220
actual technology rather than worrying

00:21:18,270 --> 00:21:21,240
about the user experience all right so

00:21:20,220 --> 00:21:23,550
that's something that we also need to

00:21:21,240 --> 00:21:24,930
going through because you don't want to

00:21:23,550 --> 00:21:27,660
see what the united website look like

00:21:24,930 --> 00:21:28,789
before this this is a huge tremendous

00:21:27,660 --> 00:21:31,499
improved

00:21:28,789 --> 00:21:34,200
but I think in my opinion that it's more

00:21:31,499 --> 00:21:36,480
than just this because one of the things

00:21:34,200 --> 00:21:38,159
that would I see a lot of times I come

00:21:36,480 --> 00:21:40,470
from probably similar as most of you I

00:21:38,159 --> 00:21:42,360
come from a military background and a

00:21:40,470 --> 00:21:44,639
lot of times we develop applications in

00:21:42,360 --> 00:21:47,220
the military we go oh yeah

00:21:44,639 --> 00:21:49,139
remember security huh Department of

00:21:47,220 --> 00:21:51,960
Defense should be pretty secure right so

00:21:49,139 --> 00:21:53,820
let's go back and harden it now that all

00:21:51,960 --> 00:21:55,139
everything's written and then we try and

00:21:53,820 --> 00:21:57,360
test it again but oh great now it

00:21:55,139 --> 00:21:59,100
doesn't work okay they should be a part

00:21:57,360 --> 00:22:01,409
of the entire process security

00:21:59,100 --> 00:22:03,330
accessibility availability right

00:22:01,409 --> 00:22:04,440
recoverability performance we should be

00:22:03,330 --> 00:22:06,149
as we're going through this entire

00:22:04,440 --> 00:22:07,950
process testing each individual

00:22:06,149 --> 00:22:10,409
component as well as testing the whole

00:22:07,950 --> 00:22:13,200
are they performing are they secured

00:22:10,409 --> 00:22:15,869
right so this is actually the test

00:22:13,200 --> 00:22:17,850
framework that we use at where I work so

00:22:15,869 --> 00:22:19,679
the first thing begins with unit testing

00:22:17,850 --> 00:22:21,360
and then we get into smoke tests and we

00:22:19,679 --> 00:22:23,519
actually do smoke tests every single

00:22:21,360 --> 00:22:24,960
night in an automated fashion and so

00:22:23,519 --> 00:22:27,659
this generates a report and Prasanna

00:22:24,960 --> 00:22:29,009
that we look at we go cool everything

00:22:27,659 --> 00:22:31,710
worked and then we move into our

00:22:29,009 --> 00:22:34,049
functional tests and we also the

00:22:31,710 --> 00:22:36,330
application that I worked for how I

00:22:34,049 --> 00:22:38,039
should say helped engineer for the

00:22:36,330 --> 00:22:41,340
company that I worked for it's an API

00:22:38,039 --> 00:22:44,009
first platform and so we just wrote a

00:22:41,340 --> 00:22:45,749
jillion scripts and we run these scripts

00:22:44,009 --> 00:22:47,519
in a semi automated fashion to ensure

00:22:45,749 --> 00:22:49,440
that certain things happen was it able

00:22:47,519 --> 00:22:51,210
to live mount wasn't able to create

00:22:49,440 --> 00:22:53,009
wasn't able to end us was able to do

00:22:51,210 --> 00:22:56,369
these things and then we go through the

00:22:53,009 --> 00:22:57,570
UI in a manual fashion going to DUI in

00:22:56,369 --> 00:22:59,879
the manual fashion that's the only

00:22:57,570 --> 00:23:02,190
manual step in our process for the

00:22:59,879 --> 00:23:04,889
company I worked for but one of the

00:23:02,190 --> 00:23:06,720
things that we are all about where I

00:23:04,889 --> 00:23:09,539
work is but I go you have been nicest

00:23:06,720 --> 00:23:12,899
easiest to use user interface it will

00:23:09,539 --> 00:23:18,960
actually make you care about backups so

00:23:12,899 --> 00:23:21,360
what backup company ok backups don't

00:23:18,960 --> 00:23:24,179
tell my player but we have a very nice

00:23:21,360 --> 00:23:25,230
UI that's easy to use right and so we

00:23:24,179 --> 00:23:26,850
actually go through and make sure that

00:23:25,230 --> 00:23:28,889
everything is usable make sure that

00:23:26,850 --> 00:23:32,009
everything looks right and that's the

00:23:28,889 --> 00:23:35,490
one stuff that is manual before we call

00:23:32,009 --> 00:23:37,019
the release qualified so criteria when

00:23:35,490 --> 00:23:40,039
you talk about a test framework what

00:23:37,019 --> 00:23:41,869
should you be looking for big thing is

00:23:40,039 --> 00:23:44,840
you want to be looking to make sure that

00:23:41,869 --> 00:23:46,999
you have a lot of options right that you

00:23:44,840 --> 00:23:48,559
can customize as needed rather than

00:23:46,999 --> 00:23:50,210
having to write and create an entire new

00:23:48,559 --> 00:23:52,249
framework every single time you want to

00:23:50,210 --> 00:23:53,989
run a custom test it's better to have a

00:23:52,249 --> 00:23:57,529
simplified framework that can be

00:23:53,989 --> 00:23:59,899
modified okay but in my opinion always

00:23:57,529 --> 00:24:01,489
it's going to be reports and metrics I

00:23:59,899 --> 00:24:03,019
think that's the most important piece

00:24:01,489 --> 00:24:04,669
how do I know that any of these tests

00:24:03,019 --> 00:24:07,850
actually work if I don't have some kind

00:24:04,669 --> 00:24:10,039
of metric to validate that it did so

00:24:07,850 --> 00:24:11,869
uniform reporting is what I'm going to

00:24:10,039 --> 00:24:14,059
say is very important when it comes to

00:24:11,869 --> 00:24:16,309
the efficiency of test automation and of

00:24:14,059 --> 00:24:17,960
course having something that can be

00:24:16,309 --> 00:24:21,799
developed once then used everywhere

00:24:17,960 --> 00:24:25,580
right so customized on-the-go change

00:24:21,799 --> 00:24:28,190
management who loves change management

00:24:25,580 --> 00:24:30,979
if anybody's hand goes up I'm good

00:24:28,190 --> 00:24:32,239
you're obviously an executive you're not

00:24:30,979 --> 00:24:34,159
you're not you don't work in tech

00:24:32,239 --> 00:24:35,629
anymore you're just a boss change

00:24:34,159 --> 00:24:41,929
management sucks because it only looks

00:24:35,629 --> 00:24:44,389
like this right I submit a million

00:24:41,929 --> 00:24:48,289
change requests and they never get

00:24:44,389 --> 00:24:50,330
approved thanks boss so the good thing I

00:24:48,289 --> 00:24:52,399
think I read a bunch of blogs a while

00:24:50,330 --> 00:24:55,609
back where they are talking about DevOps

00:24:52,399 --> 00:24:57,500
is going to make change management

00:24:55,609 --> 00:24:59,000
irrelevant

00:24:57,500 --> 00:25:00,049
and I don't think it's going in my

00:24:59,000 --> 00:25:00,740
opinion telling it's gonna get

00:25:00,049 --> 00:25:02,720
irrelevant

00:25:00,740 --> 00:25:04,789
I think it's just going to become one

00:25:02,720 --> 00:25:05,900
thing so when you talk about release

00:25:04,789 --> 00:25:06,980
management you talk about change

00:25:05,900 --> 00:25:08,539
management I think that this could

00:25:06,980 --> 00:25:11,750
become one all right

00:25:08,539 --> 00:25:13,700
so ideally what should we should I be

00:25:11,750 --> 00:25:16,549
looking at in the future is have that

00:25:13,700 --> 00:25:18,409
change management become a part of your

00:25:16,549 --> 00:25:19,940
feedback loop a part of your actual

00:25:18,409 --> 00:25:20,600
pipeline so every single thing that

00:25:19,940 --> 00:25:22,940
you're doing

00:25:20,600 --> 00:25:24,919
ideally nota mated fashion reports back

00:25:22,940 --> 00:25:26,539
and it builds us rapport so by the time

00:25:24,919 --> 00:25:27,559
we're ready to deploy to production by

00:25:26,539 --> 00:25:29,690
the time we're ready to call it a

00:25:27,559 --> 00:25:32,630
qualified release we can no joke go and

00:25:29,690 --> 00:25:37,970
say here's all the things we did here's

00:25:32,630 --> 00:25:38,710
their success approve all right and then

00:25:37,970 --> 00:25:41,299
ideally

00:25:38,710 --> 00:25:42,890
this is a conversation that gentleman

00:25:41,299 --> 00:25:44,510
and I were having earlier we said

00:25:42,890 --> 00:25:45,980
ideally it's one person that does the

00:25:44,510 --> 00:25:48,559
approval I agree

00:25:45,980 --> 00:25:50,090
wouldn't that be so much simpler but the

00:25:48,559 --> 00:25:51,740
reality is a lot of times we still live

00:25:50,090 --> 00:25:53,059
in silos so it's one person from each

00:25:51,740 --> 00:25:56,360
group which means just maybe that one

00:25:53,059 --> 00:25:58,610
guy that's like no right but we go in

00:25:56,360 --> 00:25:59,480
there we just say yes because we've

00:25:58,610 --> 00:26:02,299
already have all the information

00:25:59,480 --> 00:26:05,240
collected via automation during our

00:26:02,299 --> 00:26:07,850
pipeline so we're talking about how do

00:26:05,240 --> 00:26:09,110
we do more efficient change management I

00:26:07,850 --> 00:26:11,210
think the big thing is to make it a

00:26:09,110 --> 00:26:12,460
priority which is something I never

00:26:11,210 --> 00:26:14,390
thought I would say 10 years ago

00:26:12,460 --> 00:26:17,240
normally I'm like oh a change management

00:26:14,390 --> 00:26:18,830
but the only way to make it blend into

00:26:17,240 --> 00:26:21,320
our workflow to make it a part of our

00:26:18,830 --> 00:26:23,270
pipeline is to prioritize it right and

00:26:21,320 --> 00:26:24,799
then to automate the reporting to it so

00:26:23,270 --> 00:26:27,080
ideally we'd have a single source of

00:26:24,799 --> 00:26:28,610
truth for every change and then of

00:26:27,080 --> 00:26:30,740
course integrate it into your pipeline

00:26:28,610 --> 00:26:33,770
and then streamline processes so if you

00:26:30,740 --> 00:26:35,780
are still using I to adapt that to the

00:26:33,770 --> 00:26:37,130
modern methodology right ITIL still very

00:26:35,780 --> 00:26:39,020
relevant so you can look like standard

00:26:37,130 --> 00:26:41,120
changes priority changes but how does

00:26:39,020 --> 00:26:47,350
that relate to what you're doing today

00:26:41,120 --> 00:26:47,350
right so lunch thank you very much

00:26:47,820 --> 00:26:51,390

YouTube URL: https://www.youtube.com/watch?v=lEUDRA_Wq0s


