Title: Building high scale system using serverless architecture - Jonathann Zenou - DevOpsDaysTLV 2017
Publication date: 2017-11-28
Playlist: DevOpsDays Tel Aviv 2017
Description: 
	Building high scale system using serverless architecture for a burning man event

Midburn is the israeli extension of the Burning Man festival. Last year, 11,000 lucky people participated in the event. Because the event is in high demand, there are only two dates during the year one can purchase tickets. Twice a year ~25000 people are trying to access the same web service at exactly the same time. After four years with several failures and a lot of unhappy people unable to buy their tickets, we decided to redesign the whole architecture using only serverless components and to ensure no one will be left behind. This talk will cover the process weâ€™ve been through, which technologies we decided to go with and why we chose those technologies. We will talk about how we tested the new architecture and what happened in real-time.
Captions: 
	00:00:05,600 --> 00:00:11,400
so before I start I have a little

00:00:08,700 --> 00:00:14,730
disclaimer for you guys this is not a

00:00:11,400 --> 00:00:17,160
service introduction I don't intend to

00:00:14,730 --> 00:00:18,750
explain to you what is ever less and why

00:00:17,160 --> 00:00:22,260
you guys should or should not use ever

00:00:18,750 --> 00:00:25,619
less this is a story about replacing we

00:00:22,260 --> 00:00:27,689
had a specific use case that was like a

00:00:25,619 --> 00:00:30,630
regular use case from you know every

00:00:27,689 --> 00:00:34,500
DevOps people and we discovered that

00:00:30,630 --> 00:00:37,590
maybe we could replace our very simple

00:00:34,500 --> 00:00:41,430
back end uses only several s components

00:00:37,590 --> 00:00:43,860
and this is not a complicated solution

00:00:41,430 --> 00:00:46,260
we were able to create the whole

00:00:43,860 --> 00:00:46,860
solution without writing one single line

00:00:46,260 --> 00:00:49,039
of code

00:00:46,860 --> 00:00:52,980
with using some very default

00:00:49,039 --> 00:00:56,370
configuration so if this is not the kind

00:00:52,980 --> 00:01:00,270
of talk that you want to hear about if

00:00:56,370 --> 00:01:03,239
not let's begin so hi everyone my name

00:01:00,270 --> 00:01:06,689
is Jonathan Zeno I live in Tel Aviv but

00:01:03,239 --> 00:01:08,490
I am originally from France and I am

00:01:06,689 --> 00:01:11,700
working as a DevOps engineer at Oracle

00:01:08,490 --> 00:01:13,920
and during my spare time I am

00:01:11,700 --> 00:01:16,920
volunteering in the tech department of

00:01:13,920 --> 00:01:20,460
the midburn Association so what is

00:01:16,920 --> 00:01:24,540
midburn midburn is the Israeli branch of

00:01:20,460 --> 00:01:26,520
the Burning Man festival but above the

00:01:24,540 --> 00:01:29,100
fact that it is a festival with banished

00:01:26,520 --> 00:01:29,670
the community made by people for the

00:01:29,100 --> 00:01:32,579
people

00:01:29,670 --> 00:01:36,450
it is a yearly event that happened once

00:01:32,579 --> 00:01:39,540
a year during spring in the Negev in

00:01:36,450 --> 00:01:43,500
this Dibakar region it's a nonprofit

00:01:39,540 --> 00:01:46,950
organization with only volunteers it is

00:01:43,500 --> 00:01:50,790
a social experiment and it is a blank

00:01:46,950 --> 00:01:52,680
canvas well self-expression is king but

00:01:50,790 --> 00:01:55,200
it is a lot of thing at the same time

00:01:52,680 --> 00:01:57,210
it's very personal it's very hard to

00:01:55,200 --> 00:02:00,960
explain what is midburn because each and

00:01:57,210 --> 00:02:02,790
every one experience it's its own way so

00:02:00,960 --> 00:02:04,770
if I made you you know curious about

00:02:02,790 --> 00:02:07,680
this you should enter a midburn the dog

00:02:04,770 --> 00:02:11,190
check what it is maybe you find yourself

00:02:07,680 --> 00:02:12,330
maybe you want it's up to you a few

00:02:11,190 --> 00:02:12,930
numbers about midburn

00:02:12,330 --> 00:02:16,859
it exists

00:02:12,930 --> 00:02:21,359
since 2014 it is the third biggest event

00:02:16,859 --> 00:02:25,790
of its kind last year we had 11 thousand

00:02:21,359 --> 00:02:28,739
participants with 2500 volunteers and

00:02:25,790 --> 00:02:31,560
all those volunteers are dispatching 30

00:02:28,739 --> 00:02:31,859
departments one of these departments is

00:02:31,560 --> 00:02:34,349
a

00:02:31,859 --> 00:02:37,969
midburn tech department it's the biggest

00:02:34,349 --> 00:02:40,530
one we have 50 yearly volunteers and

00:02:37,969 --> 00:02:42,810
being a nonprofit organization we have a

00:02:40,530 --> 00:02:44,939
lot of perks like we can use a lot of

00:02:42,810 --> 00:02:47,489
systems that are free for us like we're

00:02:44,939 --> 00:02:50,939
nudging for a zero license we're

00:02:47,489 --> 00:02:52,859
receiving a lot of AWS credits all the

00:02:50,939 --> 00:02:55,799
project that we are working on open

00:02:52,859 --> 00:02:58,530
source and like a lot of big

00:02:55,799 --> 00:03:01,590
organization the tech department is a

00:02:58,530 --> 00:03:05,189
crucial department for the whole

00:03:01,590 --> 00:03:07,560
organization about our technology all

00:03:05,189 --> 00:03:11,969
our production and R&D environment are

00:03:07,560 --> 00:03:13,769
in AWS our code is located in github and

00:03:11,969 --> 00:03:17,540
as I said is open source so if you are

00:03:13,769 --> 00:03:19,530
entering github at the midburn

00:03:17,540 --> 00:03:21,900
organization you will see all of our

00:03:19,530 --> 00:03:25,799
products and our technology is composed

00:03:21,900 --> 00:03:28,709
of Rubino GS and Java as we said we are

00:03:25,799 --> 00:03:31,620
developing a lot of system in aus like a

00:03:28,709 --> 00:03:34,859
volunteer system the profile system so

00:03:31,620 --> 00:03:36,989
all the users can you know manage the

00:03:34,859 --> 00:03:39,030
staff the gate system when people are

00:03:36,989 --> 00:03:42,419
arriving at the event to check that our

00:03:39,030 --> 00:03:44,189
ticket our will ticket ok and the one

00:03:42,419 --> 00:03:46,280
that we will talk about today is a

00:03:44,189 --> 00:03:49,739
ticket saying queue system

00:03:46,280 --> 00:03:52,949
so let's present a problematic all

00:03:49,739 --> 00:03:55,560
midburn events are sold out they are

00:03:52,949 --> 00:03:57,569
always a lot more people that want to be

00:03:55,560 --> 00:03:59,400
part of the event that the possible

00:03:57,569 --> 00:04:04,169
places for the event a little bit like

00:03:59,400 --> 00:04:06,569
DevOps days and those setting event has

00:04:04,169 --> 00:04:09,209
their in very high demand in a very

00:04:06,569 --> 00:04:11,669
short time during some time we thought

00:04:09,209 --> 00:04:12,870
about doing it as a lottery but the

00:04:11,669 --> 00:04:15,239
problem with that is that a lot of

00:04:12,870 --> 00:04:17,459
people can create fake accounts and then

00:04:15,239 --> 00:04:20,450
at the end we want it to be fair for

00:04:17,459 --> 00:04:23,370
each and every one so we decided for

00:04:20,450 --> 00:04:25,980
selling ticket for the public to do to

00:04:23,370 --> 00:04:28,140
flash even during the year and

00:04:25,980 --> 00:04:30,330
for this event the first one that

00:04:28,140 --> 00:04:34,230
arrived and can take a ticket is the one

00:04:30,330 --> 00:04:38,430
that will get it so we started with the

00:04:34,230 --> 00:04:40,800
first midburn event in 2014 what we had

00:04:38,430 --> 00:04:44,400
then was a Drupal server with PHP and

00:04:40,800 --> 00:04:45,660
MySQL and we decided ok maybe we can do

00:04:44,400 --> 00:04:48,150
the whole management of the whole

00:04:45,660 --> 00:04:52,500
process people arriving and buy their

00:04:48,150 --> 00:04:55,890
ticket directly from Drupal but this is

00:04:52,500 --> 00:04:58,500
what happens a lot of people arrived at

00:04:55,890 --> 00:05:02,220
the same time trying to buy their

00:04:58,500 --> 00:05:05,220
tickets and we're our first outage we

00:05:02,220 --> 00:05:07,170
had 5,000 current concurrent users all

00:05:05,220 --> 00:05:10,050
user were opening something like around

00:05:07,170 --> 00:05:13,680
20 certian by user andrew pal and my

00:05:10,050 --> 00:05:15,870
sequel cannot withstand this load this

00:05:13,680 --> 00:05:19,110
is what we had for those of you you know

00:05:15,870 --> 00:05:22,980
Drupal this is a usual MySQL error the

00:05:19,110 --> 00:05:26,580
log down from SQL on Drupal so we

00:05:22,980 --> 00:05:32,220
decided to remodel the whole process not

00:05:26,580 --> 00:05:35,070
by doing karate but by splitting it so

00:05:32,220 --> 00:05:37,110
we said ok maybe if we can do one system

00:05:35,070 --> 00:05:39,060
for one system only for queuing the

00:05:37,110 --> 00:05:41,550
people that are writing and after that

00:05:39,060 --> 00:05:43,950
another system to sell the ticket to the

00:05:41,550 --> 00:05:49,410
one who succeeded to have a place maybe

00:05:43,950 --> 00:05:52,440
that can work so in 2015 we decided to

00:05:49,410 --> 00:05:55,770
do another iteration system we said ok

00:05:52,440 --> 00:05:59,100
we will use a back-end real back-end

00:05:55,770 --> 00:06:02,490
that will run on Oroku that you will be

00:05:59,100 --> 00:06:05,460
linked to a Redis machine and the whole

00:06:02,490 --> 00:06:07,680
code will be written in Ruby and for the

00:06:05,460 --> 00:06:09,780
front-end because we are on AWS and you

00:06:07,680 --> 00:06:12,750
wanted it to be able to withstand big

00:06:09,780 --> 00:06:17,250
load we said ok let's put a JavaScript

00:06:12,750 --> 00:06:20,070
web page in a static s3 bucket and that

00:06:17,250 --> 00:06:22,980
should work this is how it look like

00:06:20,070 --> 00:06:24,990
people are arriving from the front end

00:06:22,980 --> 00:06:26,400
the front end we direct them to the

00:06:24,990 --> 00:06:28,350
backend in a recruit the era crew

00:06:26,400 --> 00:06:31,020
back-end is rating the data in the

00:06:28,350 --> 00:06:33,840
radius and after that we will pull out

00:06:31,020 --> 00:06:36,570
data in a CSV files industry that will

00:06:33,840 --> 00:06:39,300
be able to it afterwards to decide which

00:06:36,570 --> 00:06:41,740
people can have a ticket or not

00:06:39,300 --> 00:06:43,840
this is how we look like people were

00:06:41,740 --> 00:06:45,699
arriving to the page and there are

00:06:43,840 --> 00:06:48,069
telling them okay at seven o'clock in

00:06:45,699 --> 00:06:51,639
the evening the queue will be open and

00:06:48,069 --> 00:06:53,860
you'll be able to enter your email after

00:06:51,639 --> 00:06:56,409
that the first eats people that will

00:06:53,860 --> 00:07:00,430
enter the email will receive a

00:06:56,409 --> 00:07:02,319
notification you have you are one of the

00:07:00,430 --> 00:07:04,840
first you can buy your ticket buy your

00:07:02,319 --> 00:07:06,370
ticket and that's it and after that when

00:07:04,840 --> 00:07:08,710
we see that we have enough people in the

00:07:06,370 --> 00:07:12,819
queue we are just closing it and the

00:07:08,710 --> 00:07:16,330
service over in 2015 it was a great

00:07:12,819 --> 00:07:19,990
success like we had almost nobody that

00:07:16,330 --> 00:07:22,240
was left out and we said okay in 2016

00:07:19,990 --> 00:07:24,610
then we're good we have no further and

00:07:22,240 --> 00:07:27,400
do it again and you know what maybe we

00:07:24,610 --> 00:07:31,360
use the same technology so we thought

00:07:27,400 --> 00:07:35,050
we'll be all cool and good but it wasn't

00:07:31,360 --> 00:07:38,379
the case whereas our Ghana outage we had

00:07:35,050 --> 00:07:40,539
even more people arriving and what we

00:07:38,379 --> 00:07:44,589
discovered that we had a multi threading

00:07:40,539 --> 00:07:49,210
problem how many people here us worked

00:07:44,589 --> 00:07:52,659
with a Baku okay very few and I

00:07:49,210 --> 00:07:54,399
understand why so farthings a recruit

00:07:52,659 --> 00:07:56,289
that when you want it to be able to

00:07:54,399 --> 00:08:00,339
withstand a huge load you have to

00:07:56,289 --> 00:08:02,770
configure worker on it and if you don't

00:08:00,339 --> 00:08:06,550
configure worker it just will not

00:08:02,770 --> 00:08:09,129
withstand the load and what we had we

00:08:06,550 --> 00:08:12,219
had a domino effect what was happening

00:08:09,129 --> 00:08:15,099
people were arriving to the page enter

00:08:12,219 --> 00:08:17,770
the email press and continue and the

00:08:15,099 --> 00:08:21,009
page was loading loading loading with no

00:08:17,770 --> 00:08:23,229
response so what people usually do they

00:08:21,009 --> 00:08:26,889
eat refresh and they do it again and

00:08:23,229 --> 00:08:28,449
again and again and what happened we had

00:08:26,889 --> 00:08:31,330
initially a lot of people that were

00:08:28,449 --> 00:08:33,550
entering the system of course the

00:08:31,330 --> 00:08:35,829
backend was ramped and people like ok

00:08:33,550 --> 00:08:39,669
let's hit refresh and it was making the

00:08:35,829 --> 00:08:41,979
backend even more swamped so what we

00:08:39,669 --> 00:08:43,810
understood from it we understood from it

00:08:41,979 --> 00:08:45,940
that we cannot know in advance what will

00:08:43,810 --> 00:08:50,290
be the size of the queue how many people

00:08:45,940 --> 00:08:52,570
will arrive ok and on the other hand

00:08:50,290 --> 00:08:54,730
after checking our logs file

00:08:52,570 --> 00:08:57,279
would we discover that a lot of people

00:08:54,730 --> 00:09:01,300
were using script I were like okay maybe

00:08:57,279 --> 00:09:04,389
if i refresh my page a lot more it will

00:09:01,300 --> 00:09:09,639
L so we discover that we cannot assume

00:09:04,389 --> 00:09:12,779
anything on our user behavior so we

00:09:09,639 --> 00:09:16,300
entered a new phase of remodel English

00:09:12,779 --> 00:09:19,769
we said okay now we have our sales in

00:09:16,300 --> 00:09:22,690
2017 for the front-end we will still use

00:09:19,769 --> 00:09:25,540
JavaScript in history because it just

00:09:22,690 --> 00:09:28,149
works but for the backend we said okay

00:09:25,540 --> 00:09:30,370
if you don't have any server we don't

00:09:28,149 --> 00:09:35,290
have anything to configure maybe it will

00:09:30,370 --> 00:09:39,880
be easier so we found this document from

00:09:35,290 --> 00:09:43,509
the AWS web page that is helping us to

00:09:39,880 --> 00:09:47,110
by combining the combination of an API

00:09:43,509 --> 00:09:50,290
gateway and Amazon connects Kinesis we

00:09:47,110 --> 00:09:52,509
can create a proxy of kinases for us

00:09:50,290 --> 00:09:57,010
using an api gateway and this is what we

00:09:52,509 --> 00:09:58,569
decided to use so the Amazon products

00:09:57,010 --> 00:10:00,069
that we use in our solution is first of

00:09:58,569 --> 00:10:01,630
all an Amazon CloudFront

00:10:00,069 --> 00:10:05,170
for those of you who don't know it it's

00:10:01,630 --> 00:10:07,449
great CDN really doesn't doesn't go it

00:10:05,170 --> 00:10:10,360
doesn't cost a lot and it's very

00:10:07,449 --> 00:10:12,459
effective and easy to use after that we

00:10:10,360 --> 00:10:15,459
decided to use Amazon API gateway

00:10:12,459 --> 00:10:17,589
because it's a fully managed service it

00:10:15,459 --> 00:10:20,459
lets you create an API really easily

00:10:17,589 --> 00:10:24,339
with great monitoring on top of it and

00:10:20,459 --> 00:10:26,350
it can withstand huge scale and the

00:10:24,339 --> 00:10:30,220
third product that we decided to use was

00:10:26,350 --> 00:10:32,410
Amazon kinases fire hose okay it's tool

00:10:30,220 --> 00:10:33,610
that lets you manage streaming data and

00:10:32,410 --> 00:10:37,720
load framing data

00:10:33,610 --> 00:10:42,189
it's nearly real-time and it can

00:10:37,720 --> 00:10:45,360
withstand huge loads also so this is how

00:10:42,189 --> 00:10:50,259
the solution looks like the user arrived

00:10:45,360 --> 00:10:52,750
we have a static website in s3 that is

00:10:50,259 --> 00:10:55,209
receiving the request from the users

00:10:52,750 --> 00:10:58,240
then the requests are being passed as

00:10:55,209 --> 00:11:01,029
opposed to the API gateway the API

00:10:58,240 --> 00:11:04,449
gateway will receive the post and throw

00:11:01,029 --> 00:11:04,960
it directly to kinases firehose and

00:11:04,449 --> 00:11:06,550
after

00:11:04,960 --> 00:11:08,860
that penis is for your holes will

00:11:06,550 --> 00:11:11,170
receive the data every minute or every

00:11:08,860 --> 00:11:13,720
time that he will receive one mega data

00:11:11,170 --> 00:11:17,470
you will receive a CSV file and put it

00:11:13,720 --> 00:11:20,860
back in history so with the solution

00:11:17,470 --> 00:11:24,700
when we decide to start to run the

00:11:20,860 --> 00:11:26,170
wholesale event we just have to look how

00:11:24,700 --> 00:11:28,210
many files do we have in our nest tree

00:11:26,170 --> 00:11:31,120
and as soon as we discover that we have

00:11:28,210 --> 00:11:34,720
enough file enough CSV file industry

00:11:31,120 --> 00:11:36,250
that's it we can close we can close the

00:11:34,720 --> 00:11:41,050
setting system and that's it our queue

00:11:36,250 --> 00:11:44,110
is full this is how we look like people

00:11:41,050 --> 00:11:46,450
are arriving to this page but then we

00:11:44,110 --> 00:11:51,940
decided to make a little twist in our

00:11:46,450 --> 00:11:53,530
static s3 website we'll say ok the

00:11:51,940 --> 00:11:55,360
website that people the landing page

00:11:53,530 --> 00:11:57,460
that people will arrive to the first

00:11:55,360 --> 00:11:59,740
thing that we will check is ok is the

00:11:57,460 --> 00:12:01,600
queue is open is the other page that we

00:11:59,740 --> 00:12:05,290
is responsible of people are entering

00:12:01,600 --> 00:12:08,530
the email is open if it is we pass to it

00:12:05,290 --> 00:12:10,960
if it's not let's wait 5 second and with

00:12:08,530 --> 00:12:15,610
all the page you will understand later

00:12:10,960 --> 00:12:19,360
what it is important so people arrive

00:12:15,610 --> 00:12:21,280
they put their email inside and they

00:12:19,360 --> 00:12:24,190
receive the notification that that's it

00:12:21,280 --> 00:12:29,110
you Emily in you in the queue you will

00:12:24,190 --> 00:12:31,090
be 7 notification and good luck so now

00:12:29,110 --> 00:12:35,710
that everything was ready we decided to

00:12:31,090 --> 00:12:39,130
test it we took a big very big machine

00:12:35,710 --> 00:12:43,360
and we send something like ten millions

00:12:39,130 --> 00:12:45,400
requests receive no error so I think we

00:12:43,360 --> 00:12:48,790
were already the only thing that we need

00:12:45,400 --> 00:12:50,980
to do was to cross our fingers and for

00:12:48,790 --> 00:12:54,610
the second cell of the obvious year of

00:12:50,980 --> 00:13:00,610
last year we got ready we put everything

00:12:54,610 --> 00:13:03,760
up we put a countdown and we started it

00:13:00,610 --> 00:13:07,180
on time and this are the graph from the

00:13:03,760 --> 00:13:09,280
actual cell that we had last year what

00:13:07,180 --> 00:13:13,300
you can see is first of all people

00:13:09,280 --> 00:13:15,850
started to be on the page since 6:30 in

00:13:13,300 --> 00:13:18,080
the evening even if we said them that

00:13:15,850 --> 00:13:21,500
the cell will open at 8:00

00:13:18,080 --> 00:13:23,890
and what you can see is that due to the

00:13:21,500 --> 00:13:28,100
fact that we were all the time checking

00:13:23,890 --> 00:13:30,620
that the queue webpage was open it gives

00:13:28,100 --> 00:13:33,290
the opportunity to the API gateway to

00:13:30,620 --> 00:13:35,090
some kind of wall map so when the real

00:13:33,290 --> 00:13:38,170
time when the real thing happened the

00:13:35,090 --> 00:13:40,640
API gateway was already up was already

00:13:38,170 --> 00:13:43,400
behaving like we needed to behave and

00:13:40,640 --> 00:13:46,850
during the whole stay we arrived to

00:13:43,400 --> 00:13:49,490
three million requests from the sale and

00:13:46,850 --> 00:13:51,500
what you can see from the time to that

00:13:49,490 --> 00:13:53,630
at the time that we started the cell to

00:13:51,500 --> 00:13:57,680
the tambour disk we decided to close it

00:13:53,630 --> 00:14:00,800
a very little time has passed and why is

00:13:57,680 --> 00:14:04,910
that because the whole sale itself took

00:14:00,800 --> 00:14:08,900
15 minutes like how when we decided to

00:14:04,910 --> 00:14:12,680
be up until the end we had 3,000 users

00:14:08,900 --> 00:14:16,430
that tried to enter the queue from these

00:14:12,680 --> 00:14:19,340
3,000 we had 300 lucky that received a

00:14:16,430 --> 00:14:21,860
ticket the time that it took for these

00:14:19,340 --> 00:14:26,720
300 people to enter the queue was 4

00:14:21,860 --> 00:14:29,720
seconds so info tokens at it we had as I

00:14:26,720 --> 00:14:31,930
said earlier 3 million requests and for

00:14:29,720 --> 00:14:35,380
those 2 million we get we had 0 error

00:14:31,930 --> 00:14:41,150
like the API was withstanding the load

00:14:35,380 --> 00:14:42,830
perfectly and when we asked the non tech

00:14:41,150 --> 00:14:44,750
people have been burned what they

00:14:42,830 --> 00:14:47,050
thought about it they were like guys

00:14:44,750 --> 00:14:50,780
what you made was pretty amazing because

00:14:47,050 --> 00:14:52,520
people will always be angry and

00:14:50,780 --> 00:14:55,360
frustrated to the fact that it can have

00:14:52,520 --> 00:14:57,470
a ticket but at least with this solution

00:14:55,360 --> 00:14:59,780
they are sure that it's not a

00:14:57,470 --> 00:15:02,420
technological problem it's just a luck

00:14:59,780 --> 00:15:05,450
they didn't arrive in time and tip over

00:15:02,420 --> 00:15:07,490
there before stuff like that but you

00:15:05,450 --> 00:15:09,680
have to understand that every time that

00:15:07,490 --> 00:15:12,590
we were having this kind of outage

00:15:09,680 --> 00:15:15,650
people were very hungry and people were

00:15:12,590 --> 00:15:19,160
frustrated and if you were then entering

00:15:15,650 --> 00:15:21,200
the Facebook page of midburn you could

00:15:19,160 --> 00:15:24,650
see a lot of you know insult and stuff

00:15:21,200 --> 00:15:27,290
like that but at the end for us it was a

00:15:24,650 --> 00:15:30,600
good way to you know to get new people

00:15:27,290 --> 00:15:32,100
in the team because it was like ok

00:15:30,600 --> 00:15:35,910
you think that you can have a better

00:15:32,100 --> 00:15:40,889
solution for this problem come to us l /

00:15:35,910 --> 00:15:43,170
stitches so if you think that maybe you

00:15:40,889 --> 00:15:44,670
after take this solution you think you

00:15:43,170 --> 00:15:47,519
can do something better make it you know

00:15:44,670 --> 00:15:50,759
working better so you can send an email

00:15:47,519 --> 00:15:54,959
to take at pin pen dot org or enter the

00:15:50,759 --> 00:15:57,500
midbrain tech Facebook page and we'll

00:15:54,959 --> 00:15:58,040
welcome you guys okay thank you

00:15:57,500 --> 00:16:01,540
[Music]

00:15:58,040 --> 00:16:01,540

YouTube URL: https://www.youtube.com/watch?v=pub4HAuYLFY


