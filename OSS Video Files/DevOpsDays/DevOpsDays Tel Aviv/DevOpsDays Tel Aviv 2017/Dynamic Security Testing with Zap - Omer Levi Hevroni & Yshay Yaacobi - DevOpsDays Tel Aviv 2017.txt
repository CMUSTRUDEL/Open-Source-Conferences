Title: Dynamic Security Testing with Zap - Omer Levi Hevroni & Yshay Yaacobi - DevOpsDays Tel Aviv 2017
Publication date: 2017-11-28
Playlist: DevOpsDays Tel Aviv 2017
Description: 
	Running security tests as a part of your CI pipeline allows you to provide better and more relevant feedback to developers as quickly as possible (also known as the “Shift Left paradigm”/”DevSecOps” methodology).

But how do you start? Security testing seems so complex and expensive!

In this session, I will show you how to use Zap as a part of your CI pipeline to create automated security testing for your Web App or REST API.

Zap is a free and open source security tool, developed by the OWASP foundation.

I will discuss and demo 3 approaches on how to integrate Zap into your CI environment: * Zap with existing UI automation tests: Zap will proxy the traffic to your web app, looking for security issues. * Zap with existing tests for your REST API: similar to the one above, but this time without the web application. Ideal for testing APIs that are not consumed by a web app. * Zap with OpenAPI: Zap can load an OpenAPI definition of a REST API, and then run various tests against it. Ideal for cases when your API is already supporting OpenAPI specification. If not, the previous approach is easier.

Join me in this session to learn how to build each of these solutions, and how we added them to one of our open source project - Tweek. The entire solution I’ll demo is running on top of Docker ― meaning you can easily run it in your environment (if you’re not familiar with Docker, don’t worry, I’ll explain what it is).
Captions: 
	00:00:05,450 --> 00:00:12,300
so first thank you for the organizers

00:00:08,069 --> 00:00:14,309
for having us it's a big it's a big

00:00:12,300 --> 00:00:14,849
honor to be here standing in it today so

00:00:14,309 --> 00:00:17,789
thank you

00:00:14,849 --> 00:00:21,150
hey I'm ml this is H I was sitting down

00:00:17,789 --> 00:00:24,210
and today we want to talk about a

00:00:21,150 --> 00:00:27,119
dynamic security testing how to enter

00:00:24,210 --> 00:00:30,060
the CI what does it mean and call it be

00:00:27,119 --> 00:00:30,599
easy and simple and I want to start with

00:00:30,060 --> 00:00:34,350
a story

00:00:30,599 --> 00:00:36,660
and like any good security session the

00:00:34,350 --> 00:00:39,510
story about the Equifax hey how many of

00:00:36,660 --> 00:00:41,640
you have heard about Equifax not

00:00:39,510 --> 00:00:43,140
surprising so I'm not going to ask who

00:00:41,640 --> 00:00:45,719
yelled about Equifax which because I

00:00:43,140 --> 00:00:46,559
guess it's all the paper but in case you

00:00:45,719 --> 00:00:50,010
didn't hear it

00:00:46,559 --> 00:00:55,140
so Equifax which was pretty minor bridge

00:00:50,010 --> 00:00:57,600
you can say only 143 million US

00:00:55,140 --> 00:01:00,750
customers affected you know not so big

00:00:57,600 --> 00:01:04,110
one not big effect and I can equal

00:01:00,750 --> 00:01:07,229
bridge it contains first name last name

00:01:04,110 --> 00:01:11,369
a lot of information the breach happened

00:01:07,229 --> 00:01:13,979
in July and only disclosed except MO and

00:01:11,369 --> 00:01:18,689
you can guess that it has some effect on

00:01:13,979 --> 00:01:22,560
Equifax which yeah you can see this nice

00:01:18,689 --> 00:01:25,530
toward Hill now you might be thinking

00:01:22,560 --> 00:01:29,270
that this which happened because of some

00:01:25,530 --> 00:01:32,040
sophisticated zero-day but actually no

00:01:29,270 --> 00:01:32,729
it happened because of the very simple

00:01:32,040 --> 00:01:35,729
reason

00:01:32,729 --> 00:01:38,100
Equifax use the record struts and this

00:01:35,729 --> 00:01:40,890
eyeball has known vulnerability and they

00:01:38,100 --> 00:01:43,229
didn't patch it so the hacker exploited

00:01:40,890 --> 00:01:46,380
this LaValley and were able to hack into

00:01:43,229 --> 00:01:48,899
Equifax and if we take a deeper look

00:01:46,380 --> 00:01:51,630
into this vulnerability so this is the

00:01:48,899 --> 00:01:53,549
details of the vulnerability and the

00:01:51,630 --> 00:01:57,030
interesting thing to notice the face the

00:01:53,549 --> 00:01:59,909
first is the severity 10 out 10 out of

00:01:57,030 --> 00:02:02,310
10 which should indicate how serious it

00:01:59,909 --> 00:02:06,149
is and the second is the date it

00:02:02,310 --> 00:02:08,970
disclosed at melt and the breach was

00:02:06,149 --> 00:02:12,810
that you lie they had for four months to

00:02:08,970 --> 00:02:13,810
patch this level and they didn't now why

00:02:12,810 --> 00:02:17,170
I'm telling you this story

00:02:13,810 --> 00:02:19,959
what what is my point here I don't want

00:02:17,170 --> 00:02:22,540
to blame Equifax so do some shaming to

00:02:19,959 --> 00:02:24,400
them it really doesn't help for ranking

00:02:22,540 --> 00:02:27,550
what we should take from this story is

00:02:24,400 --> 00:02:29,830
ask ourself can we be the next Equifax

00:02:27,550 --> 00:02:32,769
is this something that could happen to

00:02:29,830 --> 00:02:35,860
us who here thinks the company called me

00:02:32,769 --> 00:02:38,260
the next Equifax okay go to hear that

00:02:35,860 --> 00:02:40,690
it's not only us and this is basically

00:02:38,260 --> 00:02:42,849
what is your take from this story this

00:02:40,690 --> 00:02:46,420
is something that could happen to anyone

00:02:42,849 --> 00:02:49,690
and we should all ask what can we do

00:02:46,420 --> 00:02:52,630
which activities we could adopt into our

00:02:49,690 --> 00:02:55,750
development lifecycle in order not to be

00:02:52,630 --> 00:02:57,850
the next Equifax and I'm saying that

00:02:55,750 --> 00:03:00,910
because this is basically what I'm doing

00:02:57,850 --> 00:03:04,959
at my walk as the security department at

00:03:00,910 --> 00:03:07,660
Soto and I'm doing it for the last three

00:03:04,959 --> 00:03:10,989
years so there are many things that you

00:03:07,660 --> 00:03:13,420
can do like threat modeling design or

00:03:10,989 --> 00:03:16,540
code of your bug bounties and of course

00:03:13,420 --> 00:03:18,760
security testing so this is what we are

00:03:16,540 --> 00:03:20,470
going to focus about today how we can

00:03:18,760 --> 00:03:23,260
build security test and how we can write

00:03:20,470 --> 00:03:24,970
in the CI and how we can get security

00:03:23,260 --> 00:03:29,049
plans that give us a really high value

00:03:24,970 --> 00:03:31,180
that are simple to integrate and way so

00:03:29,049 --> 00:03:34,239
this is what I was going to say and we

00:03:31,180 --> 00:03:36,250
saw that security test if I got a test

00:03:34,239 --> 00:03:39,220
IQ NATO integration going to check your

00:03:36,250 --> 00:03:41,290
code for bugs so security tests will

00:03:39,220 --> 00:03:43,930
test your code for non whatever it is

00:03:41,290 --> 00:03:45,730
this is the high level idea and now I

00:03:43,930 --> 00:03:48,670
want to invite each eye to talk about

00:03:45,730 --> 00:03:50,500
one of Sirota projects why it's so

00:03:48,670 --> 00:03:54,609
critical and how we other a secure

00:03:50,500 --> 00:03:57,340
destroyed so is a good so i wish i I'm

00:03:54,609 --> 00:03:59,560
tackling absolute oh and I'm walking on

00:03:57,340 --> 00:04:00,970
a infrastructure beckon project and I'm

00:03:59,560 --> 00:04:04,660
going to share how we added security

00:04:00,970 --> 00:04:08,319
test one of our most critical a project

00:04:04,660 --> 00:04:10,359
which is called a tweak and I'm going to

00:04:08,319 --> 00:04:12,519
describe twitch Oh shortly for your you

00:04:10,359 --> 00:04:15,700
have the right ear contacts so tweak is

00:04:12,519 --> 00:04:18,120
the solution and for those of you are

00:04:15,700 --> 00:04:20,350
wondering what switch amendment

00:04:18,120 --> 00:04:22,090
basically a future management solution

00:04:20,350 --> 00:04:23,680
allow us to control the behavior of the

00:04:22,090 --> 00:04:28,330
feature remote

00:04:23,680 --> 00:04:30,850
and so it showed by example let's say we

00:04:28,330 --> 00:04:33,520
have an e-commerce a stand-up and we

00:04:30,850 --> 00:04:38,200
have an item listing page and we want to

00:04:33,520 --> 00:04:40,330
create a new design for the app per see

00:04:38,200 --> 00:04:42,250
if it thought was better in game inform

00:04:40,330 --> 00:04:45,130
our users so we create an additional

00:04:42,250 --> 00:04:47,890
version which is light and with

00:04:45,130 --> 00:04:49,450
different color scheme and right now

00:04:47,890 --> 00:04:51,580
what we are going to do is provide a

00:04:49,450 --> 00:04:56,410
level of a user with their first version

00:04:51,580 --> 00:04:58,300
and the other user with the and for that

00:04:56,410 --> 00:05:01,270
too it can help us because we can use a

00:04:58,300 --> 00:05:05,020
tweak to refine that a 50% of the user

00:05:01,270 --> 00:05:07,480
will get their I entered in 50% get the

00:05:05,020 --> 00:05:09,940
light valiant and the app acrylic week

00:05:07,480 --> 00:05:12,940
whenever use a get into the app to

00:05:09,940 --> 00:05:15,160
restore up and get the right valiant the

00:05:12,940 --> 00:05:16,810
another use case we use it for future

00:05:15,160 --> 00:05:20,110
flags let's say we have a feature new

00:05:16,810 --> 00:05:22,270
feature like the writing and we want to

00:05:20,110 --> 00:05:25,030
open it a gradually only to subset of

00:05:22,270 --> 00:05:27,310
our users so we can use tweak to define

00:05:25,030 --> 00:05:29,980
let's open it to further pop out of the

00:05:27,310 --> 00:05:31,780
other the Tiffany them and that pretty

00:05:29,980 --> 00:05:35,740
much it that we had it all and we have

00:05:31,780 --> 00:05:37,690
API for that in the reason we decided to

00:05:35,740 --> 00:05:39,700
do security testing in quick it's

00:05:37,690 --> 00:05:41,980
because quick is very very critical for

00:05:39,700 --> 00:05:45,820
us we use it everywhere every new

00:05:41,980 --> 00:05:49,150
service youthquake and every new app and

00:05:45,820 --> 00:05:51,520
create every time so it super mission

00:05:49,150 --> 00:05:54,580
critical for us and we must keep it

00:05:51,520 --> 00:05:58,090
secure another reason is the tweak is an

00:05:54,580 --> 00:05:59,830
open source solution and in open source

00:05:58,090 --> 00:06:01,810
solution security can be more

00:05:59,830 --> 00:06:08,230
challenging because all the code of

00:06:01,810 --> 00:06:10,060
tweak on the internet and we need to

00:06:08,230 --> 00:06:12,490
make sure that the no vulnerability we

00:06:10,060 --> 00:06:16,210
can't a obscure our security in quick

00:06:12,490 --> 00:06:18,480
and also it affect only not only us but

00:06:16,210 --> 00:06:22,060
other companies that use tweak as well

00:06:18,480 --> 00:06:24,880
so that that I mean that make it more

00:06:22,060 --> 00:06:28,510
challenging another reason is that in an

00:06:24,880 --> 00:06:31,150
open source project we can have a code

00:06:28,510 --> 00:06:33,190
changes formats our contributors so how

00:06:31,150 --> 00:06:36,400
do we protect our master by a bungee

00:06:33,190 --> 00:06:36,860
tweak we use a get up flow I'm sure many

00:06:36,400 --> 00:06:39,889
of you

00:06:36,860 --> 00:06:43,580
was that I mean pretty common and our

00:06:39,889 --> 00:06:45,740
main master but he is protected and if

00:06:43,580 --> 00:06:47,509
you want to add new code to tweak you

00:06:45,740 --> 00:06:51,259
have to do it to you using a pull

00:06:47,509 --> 00:06:54,319
request and pull request approval

00:06:51,259 --> 00:06:56,300
mechanism is requiring a manual manual

00:06:54,319 --> 00:06:58,759
code review from one of eight weekly

00:06:56,300 --> 00:07:01,219
tangled and a bunch of automation check

00:06:58,759 --> 00:07:04,550
the first automated check is a pretty

00:07:01,219 --> 00:07:08,479
common it just the integration tells it

00:07:04,550 --> 00:07:12,379
what we say we fare with codfish the

00:07:08,479 --> 00:07:15,919
second set of stairs check the quality

00:07:12,379 --> 00:07:19,879
of our product and not any bugs and

00:07:15,919 --> 00:07:21,279
stuff like that and the second check is

00:07:19,879 --> 00:07:24,319
version I which is rather interesting

00:07:21,279 --> 00:07:26,900
that's actually the first secure tool we

00:07:24,319 --> 00:07:28,969
integrated in into our CI and you

00:07:26,900 --> 00:07:31,129
checked the Toro defensive up to date

00:07:28,969 --> 00:07:32,539
and they does not have a security

00:07:31,129 --> 00:07:36,860
vulnerability or say a security

00:07:32,539 --> 00:07:39,050
vulnerability really nice project and I

00:07:36,860 --> 00:07:41,089
mean that can help us prevent an issue

00:07:39,050 --> 00:07:43,849
like we saw like on a show before we say

00:07:41,089 --> 00:07:45,919
Equifax so it's really useful but it's

00:07:43,849 --> 00:07:49,039
not enough because it's only check for

00:07:45,919 --> 00:07:52,550
third-party issues in third-party

00:07:49,039 --> 00:07:55,639
packages away or libraries but it does

00:07:52,550 --> 00:07:58,279
not prevail as a security guarantee

00:07:55,639 --> 00:08:01,789
against the new code actually code

00:07:58,279 --> 00:08:03,080
changes in DPR so with that part of mind

00:08:01,789 --> 00:08:05,210
that we need to add additional security

00:08:03,080 --> 00:08:07,039
level I went to the secure our security

00:08:05,210 --> 00:08:09,289
department which is basically oh man

00:08:07,039 --> 00:08:13,610
and asked him well how can we had

00:08:09,289 --> 00:08:16,900
security checks to tweak oh oh oh thank

00:08:13,610 --> 00:08:19,520
you shine so basically I said to enjoy

00:08:16,900 --> 00:08:22,849
there is a thing and I'm pretty sure all

00:08:19,520 --> 00:08:26,509
of you are familiar with that saying the

00:08:22,849 --> 00:08:29,449
best defense is a good offense and we

00:08:26,509 --> 00:08:32,060
can apply the same thing to testing to

00:08:29,449 --> 00:08:34,190
security testing if we could just take a

00:08:32,060 --> 00:08:36,320
knockin a hacking tool and I ain't in

00:08:34,190 --> 00:08:38,000
the CI it will give us the best

00:08:36,320 --> 00:08:40,219
protection in the world because we call

00:08:38,000 --> 00:08:43,789
take real world hacking tour that

00:08:40,219 --> 00:08:46,610
hackers use to hack our system tweak and

00:08:43,789 --> 00:08:48,140
run it on each new commit and by that we

00:08:46,610 --> 00:08:50,660
could make sure that

00:08:48,140 --> 00:08:53,750
your code we are adding is secure and

00:08:50,660 --> 00:08:55,550
continue to be secure so let's put our

00:08:53,750 --> 00:08:57,410
whole design I'm going to now show how

00:08:55,550 --> 00:09:00,650
we can use this hacking tool to Hartwick

00:08:57,410 --> 00:09:02,870
and then I will show how we can take

00:09:00,650 --> 00:09:06,170
this hacking tool a night in the CI so

00:09:02,870 --> 00:09:09,440
let's start hacking distort called OS

00:09:06,170 --> 00:09:11,240
that or just up it's a tool developed

00:09:09,440 --> 00:09:12,740
and maintained by our scope and web

00:09:11,240 --> 00:09:15,140
application security project if you're

00:09:12,740 --> 00:09:17,600
not familiar with it's a nonprofit

00:09:15,140 --> 00:09:19,840
organization you try to improve the

00:09:17,600 --> 00:09:22,640
overall security of software development

00:09:19,840 --> 00:09:25,250
this is a bit high level overview of

00:09:22,640 --> 00:09:27,650
that for my open hub you can see a lot

00:09:25,250 --> 00:09:29,750
of information here the main things of

00:09:27,650 --> 00:09:32,680
tech for me is that zap is free and open

00:09:29,750 --> 00:09:36,770
source highly active highly maintained

00:09:32,680 --> 00:09:38,570
highly popular and now I'm going to

00:09:36,770 --> 00:09:40,730
explain what does it mean that it's in a

00:09:38,570 --> 00:09:42,130
hug it's hacking tool how you can use it

00:09:40,730 --> 00:09:44,990
to hack things

00:09:42,130 --> 00:09:46,610
this is how's that do I look like when

00:09:44,990 --> 00:09:48,530
you open it you can see that we have big

00:09:46,610 --> 00:09:53,210
attack button which is what you would

00:09:48,530 --> 00:09:55,430
expect from an a hacking tool and the F

00:09:53,210 --> 00:09:57,860
has two modes you can use zapping -

00:09:55,430 --> 00:10:00,140
modes - Huck thinks the passive and the

00:09:57,860 --> 00:10:02,720
active mode so now we are going to go to

00:10:00,140 --> 00:10:04,520
each one of them so let's start a quick

00:10:02,720 --> 00:10:06,140
and before we start we need to do a

00:10:04,520 --> 00:10:08,330
quick overview of what we are going to

00:10:06,140 --> 00:10:10,250
walk so this is a high-level overview of

00:10:08,330 --> 00:10:13,400
the architecture issue I'd already show

00:10:10,250 --> 00:10:16,670
parts of the editor but we cursor as IPI

00:10:13,400 --> 00:10:19,730
that application of services can use to

00:10:16,670 --> 00:10:22,400
query and get the relevant value for

00:10:19,730 --> 00:10:24,170
feature and it has some internal things

00:10:22,400 --> 00:10:26,360
like database and get and other micro

00:10:24,170 --> 00:10:28,640
services today we are going to focus

00:10:26,360 --> 00:10:31,820
about the API in the editor hug them and

00:10:28,640 --> 00:10:33,800
then protect them in the CI so now let's

00:10:31,820 --> 00:10:36,380
actually start and we're going to start

00:10:33,800 --> 00:10:40,670
with the passive mode in the passive

00:10:36,380 --> 00:10:42,470
mode is a fact as a proxy web box a web

00:10:40,670 --> 00:10:43,820
Fox is something that you put between

00:10:42,470 --> 00:10:46,910
the client and the server for example

00:10:43,820 --> 00:10:49,760
between your browser and your server

00:10:46,910 --> 00:10:52,280
serving the web page and when they're

00:10:49,760 --> 00:10:53,780
parked as the reverse as a web proxy it

00:10:52,280 --> 00:10:56,600
can inspect all the requests and

00:10:53,780 --> 00:10:58,400
response form your client to a server

00:10:56,600 --> 00:11:01,100
he can take a look at each one of them

00:10:58,400 --> 00:11:01,910
and run passive scan world passes

00:11:01,100 --> 00:11:04,430
control

00:11:01,910 --> 00:11:07,460
is is a cod they try to look on the

00:11:04,430 --> 00:11:09,860
questo and response and looks for issues

00:11:07,460 --> 00:11:12,170
for example headers that indicate

00:11:09,860 --> 00:11:14,600
security issues or missing headers that

00:11:12,170 --> 00:11:17,180
indicate the issues and its really

00:11:14,600 --> 00:11:18,530
simple to writer you write one passive

00:11:17,180 --> 00:11:20,660
scan also know that it's simple and

00:11:18,530 --> 00:11:22,610
there are already many existing you can

00:11:20,660 --> 00:11:25,790
take out the full list later but I just

00:11:22,610 --> 00:11:29,780
named a few to give filling out what it

00:11:25,790 --> 00:11:31,610
already able to check so I will stuff

00:11:29,780 --> 00:11:34,760
two questions in a few more slides if

00:11:31,610 --> 00:11:36,260
you have any so the first thing we need

00:11:34,760 --> 00:11:38,570
to do if I want to attacked work in the

00:11:36,260 --> 00:11:40,700
passive mode is to set up my computer to

00:11:38,570 --> 00:11:42,710
send all the traffic close up in a proxy

00:11:40,700 --> 00:11:45,050
mode this is how you can do it on Mac

00:11:42,710 --> 00:11:47,150
but it's really really common you can do

00:11:45,050 --> 00:11:49,280
it on adding any OS in a similar manner

00:11:47,150 --> 00:11:51,200
and then we can move to man or

00:11:49,280 --> 00:11:53,720
assessment the step of manual assessment

00:11:51,200 --> 00:11:56,450
is you need to try and cover as much

00:11:53,720 --> 00:11:58,820
spaces of the after web application all

00:11:56,450 --> 00:12:00,830
of the API with call or any other thing

00:11:58,820 --> 00:12:03,050
this is basically to accredit oh I

00:12:00,830 --> 00:12:06,590
showed this spot but this is how the

00:12:03,050 --> 00:12:08,420
manual or look like so in this step we

00:12:06,590 --> 00:12:11,480
need to cover as much as possible so

00:12:08,420 --> 00:12:13,520
stuff will have good assessment and when

00:12:11,480 --> 00:12:16,340
I when I decided that I cover enough

00:12:13,520 --> 00:12:18,650
from the application I can go to sup and

00:12:16,340 --> 00:12:20,630
look on the results on the virus alerts

00:12:18,650 --> 00:12:23,480
and you can see that we have many things

00:12:20,630 --> 00:12:25,700
here that indicate potential security

00:12:23,480 --> 00:12:27,530
vulnerabilities so now we need to go and

00:12:25,700 --> 00:12:29,330
check each one of them and decide if

00:12:27,530 --> 00:12:31,940
it's really issue that we need to fix or

00:12:29,330 --> 00:12:34,640
if it is some false positive because

00:12:31,940 --> 00:12:36,040
like any other automated tool it has

00:12:34,640 --> 00:12:40,250
some false positive

00:12:36,040 --> 00:12:43,910
so not let's talk about let's talk look

00:12:40,250 --> 00:12:45,020
at this one so this is the response and

00:12:43,910 --> 00:12:48,170
zaftig

00:12:45,020 --> 00:12:49,610
there is an issue with this hello so you

00:12:48,170 --> 00:12:52,430
might think okay why there was an Israel

00:12:49,610 --> 00:12:54,950
and you can try think about it white it

00:12:52,430 --> 00:12:56,750
could be indicating at all but actually

00:12:54,950 --> 00:12:59,660
we don't need to think the Afghan tell

00:12:56,750 --> 00:13:01,550
us why it's an issue the server leak

00:12:59,660 --> 00:13:03,110
some information - or the sada about the

00:13:01,550 --> 00:13:04,520
stock we are using we have data

00:13:03,110 --> 00:13:06,560
description here we haven't have a

00:13:04,520 --> 00:13:09,440
solution that can tell us how to fix it

00:13:06,560 --> 00:13:11,240
and we have some references to blog post

00:13:09,440 --> 00:13:13,520
or other pages you can go and look to

00:13:11,240 --> 00:13:15,050
learn white and problem and this is what

00:13:13,520 --> 00:13:17,630
a cool feature of the app No

00:13:15,050 --> 00:13:20,330
always exhibit is that not only tell you

00:13:17,630 --> 00:13:23,300
what the problem is it can also help you

00:13:20,330 --> 00:13:25,040
fix it so this is something that is not

00:13:23,300 --> 00:13:27,440
so common with security tour so the

00:13:25,040 --> 00:13:28,880
security community at all I don't know

00:13:27,440 --> 00:13:31,190
how many of you had interaction with

00:13:28,880 --> 00:13:33,140
security guys but they petty good at

00:13:31,190 --> 00:13:35,209
finding issues but we're not always

00:13:33,140 --> 00:13:37,670
guide you on how to fix it and then

00:13:35,209 --> 00:13:39,380
either you will not fix it well or you

00:13:37,670 --> 00:13:42,050
will not fix it at all because you will

00:13:39,380 --> 00:13:44,660
not know how so this was the passive

00:13:42,050 --> 00:13:47,890
mode now let's talk a bit about active

00:13:44,660 --> 00:13:50,240
mode which is a bit more interesting in

00:13:47,890 --> 00:13:52,100
the active mode we need to start when

00:13:50,240 --> 00:13:55,940
the app already know all the relevant

00:13:52,100 --> 00:13:58,070
URL so endpoints in our application or

00:13:55,940 --> 00:13:59,750
API so we can do it with a manual

00:13:58,070 --> 00:14:02,450
assessment like I did before in any

00:13:59,750 --> 00:14:05,000
other way and then we can tell us up to

00:14:02,450 --> 00:14:06,380
one active scan mode active scan role is

00:14:05,000 --> 00:14:08,120
a bit different from the passive one

00:14:06,380 --> 00:14:09,529
because it's actually going to change

00:14:08,120 --> 00:14:11,570
the request and create malicious

00:14:09,529 --> 00:14:15,440
requests from the original request that

00:14:11,570 --> 00:14:17,959
has already list of existing many many

00:14:15,440 --> 00:14:20,029
known attacks and like before there are

00:14:17,959 --> 00:14:22,190
many more than the one I listed here and

00:14:20,029 --> 00:14:25,100
he can take your original question

00:14:22,190 --> 00:14:28,339
create attacks like the one described

00:14:25,100 --> 00:14:31,220
here to check if your server a protect

00:14:28,339 --> 00:14:34,100
itself from those attacks so this is an

00:14:31,220 --> 00:14:35,750
underactive scan walk and now I said

00:14:34,100 --> 00:14:37,910
that the first part is to get all the

00:14:35,750 --> 00:14:40,040
relevant endpoints we have nice trick

00:14:37,910 --> 00:14:42,980
for api's there is something called open

00:14:40,040 --> 00:14:44,959
it now swagger which I guess you already

00:14:42,980 --> 00:14:47,450
heard about it's a way to describe in

00:14:44,959 --> 00:14:48,709
JSON or the end point in your API you

00:14:47,450 --> 00:14:50,540
can see that we have the end point here

00:14:48,709 --> 00:14:53,690
and the parameters and the type of each

00:14:50,540 --> 00:14:55,940
parameter here it is gifted and we can

00:14:53,690 --> 00:14:57,620
give it to that by giving to that you

00:14:55,940 --> 00:15:00,709
can see that nose up known or the

00:14:57,620 --> 00:15:02,510
relevant end point in our API and it

00:15:00,709 --> 00:15:06,230
also know the parameters like this

00:15:02,510 --> 00:15:09,260
carbon in the swagger so now we can do

00:15:06,230 --> 00:15:12,709
the nice click on the next button if we

00:15:09,260 --> 00:15:15,440
attack this one he'll and off we start

00:15:12,709 --> 00:15:17,570
attacking our API so let's do it let's

00:15:15,440 --> 00:15:19,070
press this red button when you do it in

00:15:17,570 --> 00:15:21,529
reward it's going to take some time

00:15:19,070 --> 00:15:23,209
between 5 to 10 minutes so it's usually

00:15:21,529 --> 00:15:24,640
a good time to take some coffee by

00:15:23,209 --> 00:15:27,190
co-star that

00:15:24,640 --> 00:15:28,720
but when zap will finish the first thing

00:15:27,190 --> 00:15:32,430
you can notice I'm not sure frequency

00:15:28,720 --> 00:15:35,140
but it's the number of the request for

00:15:32,430 --> 00:15:37,269
40,000 requests which is a lot of a

00:15:35,140 --> 00:15:40,209
quest and this is why I took so much

00:15:37,269 --> 00:15:43,050
time and like before we can do the same

00:15:40,209 --> 00:15:45,430
thing we can go over all the alerts and

00:15:43,050 --> 00:15:48,070
check each one decide if it's false

00:15:45,430 --> 00:15:50,079
positive or not see the data it's really

00:15:48,070 --> 00:15:51,480
the same skin for me fo but this time

00:15:50,079 --> 00:15:54,370
from the artists can

00:15:51,480 --> 00:15:57,160
what's nice to locate the is they're all

00:15:54,370 --> 00:16:00,640
AF was able to create a quest that Kraus

00:15:57,160 --> 00:16:02,890
arrow on twit that was not handled by

00:16:00,640 --> 00:16:04,660
the API so this is something to take

00:16:02,890 --> 00:16:06,790
into consideration when using the active

00:16:04,660 --> 00:16:07,959
mode don't run it and production unless

00:16:06,790 --> 00:16:12,310
you really know what you're doing it

00:16:07,959 --> 00:16:15,339
called cows off so this was the active

00:16:12,310 --> 00:16:18,279
mode now you might thinking that it's

00:16:15,339 --> 00:16:20,980
really cool but will that be able to

00:16:18,279 --> 00:16:24,250
potaka protect us from real-world issues

00:16:20,980 --> 00:16:26,350
from vulnerabilities that other that

00:16:24,250 --> 00:16:28,750
were used in real world I guess what

00:16:26,350 --> 00:16:31,300
application and to answer this question

00:16:28,750 --> 00:16:33,550
I want to show you this table this is a

00:16:31,300 --> 00:16:36,279
report from hacker one hacker one is a

00:16:33,550 --> 00:16:39,100
bug bounty it's basically a place where

00:16:36,279 --> 00:16:40,870
you can pay two attackers or security

00:16:39,100 --> 00:16:44,310
researchers to find vulnerabilities in

00:16:40,870 --> 00:16:47,170
your application like uber but focus and

00:16:44,310 --> 00:16:51,310
they had generate reports this is a pot

00:16:47,170 --> 00:16:52,899
for 2017 and this is based on the

00:16:51,310 --> 00:16:55,630
statistic from the vulnerabilities

00:16:52,899 --> 00:16:57,699
reported we are a hacker one and it's

00:16:55,630 --> 00:17:01,899
divided by industry

00:16:57,699 --> 00:17:03,990
if this reso and by type and then put in

00:17:01,899 --> 00:17:06,280
say because I marked or the

00:17:03,990 --> 00:17:08,770
vulnerabilities that SAP is able to find

00:17:06,280 --> 00:17:11,770
so you can see that most of the big one

00:17:08,770 --> 00:17:13,959
are detected actually by that and some

00:17:11,770 --> 00:17:16,449
of the things that I did not mark also

00:17:13,959 --> 00:17:18,880
could be detected by SAP but it needs

00:17:16,449 --> 00:17:21,100
some more configuration so to answer

00:17:18,880 --> 00:17:23,290
this question yes that can find the real

00:17:21,100 --> 00:17:28,150
what the issues that other applications

00:17:23,290 --> 00:17:30,340
were hacked oh so this is was how we can

00:17:28,150 --> 00:17:32,290
use zap to Hartwick any questions about

00:17:30,340 --> 00:17:35,500
the hacking

00:17:32,290 --> 00:17:39,490
so that's running on on a diverse

00:17:35,500 --> 00:17:42,430
staging environment with your database

00:17:39,490 --> 00:17:44,290
and everything else also yeah so yes you

00:17:42,430 --> 00:17:46,930
can you can usually it's better to run

00:17:44,290 --> 00:17:48,640
as up against devastating not good idea

00:17:46,930 --> 00:17:52,810
to ion production because it might cause

00:17:48,640 --> 00:17:54,850
side effects yeah

00:17:52,810 --> 00:18:03,340
the passive the passive doesn't do

00:17:54,850 --> 00:18:05,260
anything activate this is the next part

00:18:03,340 --> 00:18:06,430
of how we can use it in the API this is

00:18:05,260 --> 00:18:16,240
what each are going to show just a

00:18:06,430 --> 00:18:17,980
minute yeah so are the vulnerabilities

00:18:16,240 --> 00:18:20,350
are the active or the passive scanners

00:18:17,980 --> 00:18:21,790
and you can contribute your own scanners

00:18:20,350 --> 00:18:23,500
if you need something that already not

00:18:21,790 --> 00:18:25,810
cover the again I did it so now it's

00:18:23,500 --> 00:18:31,510
pretty simple and it's getting updated

00:18:25,810 --> 00:18:42,040
yeah yeah as a mechanism a mechanism I

00:18:31,510 --> 00:18:43,510
can show it later last question so for

00:18:42,040 --> 00:18:44,980
the active one for the active scan you

00:18:43,510 --> 00:18:47,260
are scanning yeah for the active scan

00:18:44,980 --> 00:18:49,480
you need to have all the OS you can do

00:18:47,260 --> 00:18:52,240
it either with swagger or toliman or

00:18:49,480 --> 00:18:54,040
assessment like I did the the passive is

00:18:52,240 --> 00:18:57,540
based on manual assessment he look on

00:18:54,040 --> 00:18:59,980
the request you are doing and look for

00:18:57,540 --> 00:19:01,810
yeah you can do the manual before the

00:18:59,980 --> 00:19:05,080
activities you can do that or either use

00:19:01,810 --> 00:19:06,430
the swagger one okay so now let's move

00:19:05,080 --> 00:19:08,500
to the second part which take this

00:19:06,430 --> 00:19:12,550
hacking tool and right in the CI so

00:19:08,500 --> 00:19:16,480
which I so almost showed us how to act

00:19:12,550 --> 00:19:19,360
weak but obviously then it a manually we

00:19:16,480 --> 00:19:23,470
saved up UI and we're going to do the

00:19:19,360 --> 00:19:26,530
same thing just automatically so let's

00:19:23,470 --> 00:19:28,450
see how we can do it the first thing I

00:19:26,530 --> 00:19:30,490
mentioned that is two modes passive

00:19:28,450 --> 00:19:32,830
inactive so which we are going to do

00:19:30,490 --> 00:19:36,520
each one separately I'll start with the

00:19:32,830 --> 00:19:40,960
passive mode so that tricky architecture

00:19:36,520 --> 00:19:43,540
was they only mentioned before and when

00:19:40,960 --> 00:19:45,370
normal act weak using passive mode he

00:19:43,540 --> 00:19:47,260
went to the edit oh and

00:19:45,370 --> 00:19:49,570
do have common a user scenarios and

00:19:47,260 --> 00:19:52,090
assemble with the API just use Carroll

00:19:49,570 --> 00:19:53,320
or postman or something like that so we

00:19:52,090 --> 00:19:55,710
the first thing we need to do is

00:19:53,320 --> 00:19:57,940
generate some traffic to epoxy Falls up

00:19:55,710 --> 00:20:00,550
luckily for us we're already doing it

00:19:57,940 --> 00:20:02,590
because we have an automation test we

00:20:00,550 --> 00:20:04,180
have a UI automation test the check our

00:20:02,590 --> 00:20:05,800
edit off all the comments scenarios

00:20:04,180 --> 00:20:07,570
assuming I will coverage is good enough

00:20:05,800 --> 00:20:09,070
and the same go for the API we have

00:20:07,570 --> 00:20:12,220
integration tests that check that the

00:20:09,070 --> 00:20:14,320
API ok properly so basically the only

00:20:12,220 --> 00:20:16,780
thing we need to do is just put the app

00:20:14,320 --> 00:20:20,530
in the middle of an epoxy between our

00:20:16,780 --> 00:20:23,440
test and the actual services so how are

00:20:20,530 --> 00:20:25,120
we going to do this set up in our CI we

00:20:23,440 --> 00:20:25,720
are going to use doc hello I'm pretty

00:20:25,120 --> 00:20:28,030
sure did

00:20:25,720 --> 00:20:31,600
this is developers left so probably you

00:20:28,030 --> 00:20:34,720
quite a lot so quick ISM is designed as

00:20:31,600 --> 00:20:36,970
a multi container up each miko service

00:20:34,720 --> 00:20:38,710
oft week and a couple of other Miko

00:20:36,970 --> 00:20:42,520
services that only available in the

00:20:38,710 --> 00:20:44,620
backend have official docker image and I

00:20:42,520 --> 00:20:48,840
will see is completely a token it--if

00:20:44,620 --> 00:20:52,780
just on docker del and also test suit

00:20:48,840 --> 00:20:55,120
dr+ so it's really it's really easy and

00:20:52,780 --> 00:20:57,610
the good thing about that is that it has

00:20:55,120 --> 00:21:00,010
an official docker image so we can just

00:20:57,610 --> 00:21:02,230
use the document yourself we don't care

00:21:00,010 --> 00:21:06,580
we don't care if it's written in Java or

00:21:02,230 --> 00:21:09,940
whatever it just ok so everything is

00:21:06,580 --> 00:21:12,340
containerized and can we set up this we

00:21:09,940 --> 00:21:14,890
are going to use docker compose docker

00:21:12,340 --> 00:21:18,250
compose is a ml format for describing a

00:21:14,890 --> 00:21:21,010
multiple services we can use it to one

00:21:18,250 --> 00:21:24,370
doctor locally all these services in

00:21:21,010 --> 00:21:27,910
itself is a cost punto container and you

00:21:24,370 --> 00:21:30,190
can see that we have a service

00:21:27,910 --> 00:21:33,010
definition for the UI tests and service

00:21:30,190 --> 00:21:35,470
definition for the editor and what I am

00:21:33,010 --> 00:21:37,360
going to do is just add a new service

00:21:35,470 --> 00:21:43,360
definition Falls up based on the app

00:21:37,360 --> 00:21:46,600
image and I add an HTTP proxy for the UI

00:21:43,360 --> 00:21:49,750
test assuming our UI test technologies

00:21:46,600 --> 00:21:53,620
with proxy that all the work we need to

00:21:49,750 --> 00:21:57,460
do to epoxy our a session data pulls up

00:21:53,620 --> 00:21:58,810
and all of that if I run with docker

00:21:57,460 --> 00:22:00,970
compose up really simple

00:21:58,810 --> 00:22:03,160
and the nice thing about the compose

00:22:00,970 --> 00:22:05,560
that it really can learn anyway you can

00:22:03,160 --> 00:22:07,720
learn it on a developer machine whether

00:22:05,560 --> 00:22:09,610
with Windows or Mac you can act in a

00:22:07,720 --> 00:22:12,270
valley a safe yeah I and even in

00:22:09,610 --> 00:22:14,980
production you can run it on your

00:22:12,270 --> 00:22:17,440
favourite Oki Sato in the future you can

00:22:14,980 --> 00:22:21,970
even run it on a kubernetes so real easy

00:22:17,440 --> 00:22:24,040
and we we are now worrying if you are

00:22:21,970 --> 00:22:27,700
using docker compose we have this test

00:22:24,040 --> 00:22:29,140
at out boxes who flows up and the only

00:22:27,700 --> 00:22:31,990
thing we need to do is they extract the

00:22:29,140 --> 00:22:35,110
result for that we are going to use a

00:22:31,990 --> 00:22:37,750
plastic rest API for that and you can

00:22:35,110 --> 00:22:41,170
see that we get a pretty JSON version of

00:22:37,750 --> 00:22:43,420
the same UI that was shown before if an

00:22:41,170 --> 00:22:45,720
alert and we have the description risk

00:22:43,420 --> 00:22:50,620
level solution reference and all of that

00:22:45,720 --> 00:22:52,480
really simple and we can use curl which

00:22:50,620 --> 00:22:55,750
is my favorite way to do it

00:22:52,480 --> 00:22:57,640
but also the CLI and various SDK because

00:22:55,750 --> 00:23:00,940
that is really popular you can use this

00:22:57,640 --> 00:23:02,640
decay for PHP no java.net whatever you

00:23:00,940 --> 00:23:05,490
wish

00:23:02,640 --> 00:23:08,800
okay so we have this a security that

00:23:05,490 --> 00:23:12,100
test and we can extract this data but

00:23:08,800 --> 00:23:15,840
the problem that we have many false

00:23:12,100 --> 00:23:18,160
positives as any automation tool and

00:23:15,840 --> 00:23:20,920
probably security automation tool as

00:23:18,160 --> 00:23:23,560
well we have a lot of issues that we

00:23:20,920 --> 00:23:25,270
need to ignore so how can we do it

00:23:23,560 --> 00:23:27,580
and we are going to use additional layer

00:23:25,270 --> 00:23:29,950
or stool that is called glue and glue

00:23:27,580 --> 00:23:33,370
like if name implies implied it is

00:23:29,950 --> 00:23:36,370
designed to add to glue security tools

00:23:33,370 --> 00:23:44,020
to FBI it's supposed to various security

00:23:36,370 --> 00:23:47,680
tools and you see but support additional

00:23:44,020 --> 00:23:50,020
metals and it provides us with a uniform

00:23:47,680 --> 00:23:51,880
way to filter all the issues and alert

00:23:50,020 --> 00:23:54,040
from the various security tools and

00:23:51,880 --> 00:23:56,530
there's also a mechanism for reporting

00:23:54,040 --> 00:23:59,560
so we can say that a issue that if

00:23:56,530 --> 00:24:02,470
critical will be reported to our Jia

00:23:59,560 --> 00:24:05,020
tracker or get happy show whatever

00:24:02,470 --> 00:24:08,200
whatever we want to if we want to add a

00:24:05,020 --> 00:24:10,150
integration 12-team city or whatever sky

00:24:08,200 --> 00:24:11,920
tool and they will think about it is

00:24:10,150 --> 00:24:13,750
free and open source we can extend

00:24:11,920 --> 00:24:15,940
we can add our custom filter the

00:24:13,750 --> 00:24:18,910
customer portal and it's really really

00:24:15,940 --> 00:24:23,920
nice so we're going to add some glue to

00:24:18,910 --> 00:24:25,420
all the eye and that the only thing we

00:24:23,920 --> 00:24:28,260
need to do we are going to run it with

00:24:25,420 --> 00:24:31,120
using will be the task gives up and

00:24:28,260 --> 00:24:34,210
notice here that we provided with a glue

00:24:31,120 --> 00:24:35,980
JSON file that the configuration that in

00:24:34,210 --> 00:24:39,100
this file we can define what the filters

00:24:35,980 --> 00:24:42,610
that we want to run on on the result of

00:24:39,100 --> 00:24:44,440
that so let's look at a tweak finding we

00:24:42,610 --> 00:24:47,530
found out fools app that we have

00:24:44,440 --> 00:24:48,520
insecure cookies we have and we fix it

00:24:47,530 --> 00:24:50,980
because it's a real issue

00:24:48,520 --> 00:24:53,350
we have missing security ADA which also

00:24:50,980 --> 00:24:55,600
issue and we fix it and we have insecure

00:24:53,350 --> 00:24:58,120
ash but it's not really an issue we are

00:24:55,600 --> 00:25:00,520
using sha-1 but we are not using it in

00:24:58,120 --> 00:25:02,530
in an area that we effective our

00:25:00,520 --> 00:25:05,260
security so we just need to ignore it

00:25:02,530 --> 00:25:08,110
and for that we are going to define it

00:25:05,260 --> 00:25:09,940
in our glue JSON format that I showed

00:25:08,110 --> 00:25:13,180
before and you can see that we have the

00:25:09,940 --> 00:25:14,410
tool the URL that we found the issue and

00:25:13,180 --> 00:25:16,450
the name of the issue and we are going

00:25:14,410 --> 00:25:18,400
to ignore it the nice thing about it is

00:25:16,450 --> 00:25:21,400
that we cannot just ignore it we can

00:25:18,400 --> 00:25:23,260
also postpone issues for example we have

00:25:21,400 --> 00:25:24,940
an issue that it's not really critical

00:25:23,260 --> 00:25:27,160
but we don't want it to be ignored

00:25:24,940 --> 00:25:29,050
forever so we can say we are going to

00:25:27,160 --> 00:25:31,630
postpone it for a couple of month or

00:25:29,050 --> 00:25:35,370
whatever and fix it later

00:25:31,630 --> 00:25:38,560
so really really flexible and easy and

00:25:35,370 --> 00:25:41,410
that's basically the passive mode the

00:25:38,560 --> 00:25:44,380
active mode is even it's much easier

00:25:41,410 --> 00:25:47,530
because as I'm sure before we just took

00:25:44,380 --> 00:25:49,720
a swagger file and clicked on big attack

00:25:47,530 --> 00:25:54,640
button naturally the same click of a

00:25:49,720 --> 00:25:56,410
button we can do with CLI so imager says

00:25:54,640 --> 00:25:59,350
that we provide with the write a swagger

00:25:56,410 --> 00:26:01,510
file and we attacked week and it's going

00:25:59,350 --> 00:26:06,190
to nuke our API with ten thousands of

00:26:01,510 --> 00:26:09,220
requests and we can apply afterward the

00:26:06,190 --> 00:26:12,160
same a glue a mechanism to filter our

00:26:09,220 --> 00:26:14,350
active scan result so probably the first

00:26:12,160 --> 00:26:17,650
question we do need to ask is whether it

00:26:14,350 --> 00:26:20,290
actually works so let's see for example

00:26:17,650 --> 00:26:23,380
we have a pull request that is done by

00:26:20,290 --> 00:26:25,420
OMA to tweak regarding the our your

00:26:23,380 --> 00:26:28,840
experience it's not the prettiest

00:26:25,420 --> 00:26:30,970
filling in tweak they login UI and Donal

00:26:28,840 --> 00:26:34,600
suggested to add some color to it so it

00:26:30,970 --> 00:26:36,880
won't be that ugly so that's a normal PR

00:26:34,600 --> 00:26:40,270
I did some changes that we can see at

00:26:36,880 --> 00:26:40,710
the color red and I think I'm going to

00:26:40,270 --> 00:26:44,190
approve it

00:26:40,710 --> 00:26:50,710
anyone who think I shouldn't approve it

00:26:44,190 --> 00:26:53,110
okay so yeah let's continue and also

00:26:50,710 --> 00:26:57,880
complement ami only the great choice of

00:26:53,110 --> 00:27:00,760
colors and we can see that I approved

00:26:57,880 --> 00:27:03,220
the change but our tests failed and why

00:27:00,760 --> 00:27:05,320
should our tests have fell for something

00:27:03,220 --> 00:27:08,770
so simple as changing new color

00:27:05,320 --> 00:27:11,680
let's check the codfish output and we

00:27:08,770 --> 00:27:14,920
can see that we have alerts from that Oh

00:27:11,680 --> 00:27:18,220
Mel did it change the configuration of

00:27:14,920 --> 00:27:22,560
the cookie so that found new issues you

00:27:18,220 --> 00:27:26,040
can say till and well nice try OMA but

00:27:22,560 --> 00:27:33,010
yeah well protection actually works so

00:27:26,040 --> 00:27:35,440
that's great and invited okay so thank

00:27:33,010 --> 00:27:36,360
you shy I guess I should try harder next

00:27:35,440 --> 00:27:39,150
time

00:27:36,360 --> 00:27:41,890
so to conclude what we show today

00:27:39,150 --> 00:27:43,870
basically we saw a way to integrate it

00:27:41,890 --> 00:27:46,270
up into the CI the passive and the

00:27:43,870 --> 00:27:47,230
active mode and they both were pretty

00:27:46,270 --> 00:27:50,050
simple to integrate

00:27:47,230 --> 00:27:53,170
thanks to local and also they both give

00:27:50,050 --> 00:27:55,360
us wide coverage of our existing

00:27:53,170 --> 00:27:56,980
application but there are some

00:27:55,360 --> 00:27:58,570
differences between them the first

00:27:56,980 --> 00:28:01,090
difference is that the passive was

00:27:58,570 --> 00:28:02,770
pretty fast it noted ending any

00:28:01,090 --> 00:28:06,130
significant time to our CI

00:28:02,770 --> 00:28:07,570
well the active was pretty slow as I

00:28:06,130 --> 00:28:09,940
showed when I talked about how we can

00:28:07,570 --> 00:28:12,340
hack with wick with it the second

00:28:09,940 --> 00:28:14,920
difference is that they active the

00:28:12,340 --> 00:28:16,960
passive mix two type of tests you

00:28:14,920 --> 00:28:19,120
probably noticed it when I talked about

00:28:16,960 --> 00:28:21,460
the malicious commit that he had to go

00:28:19,120 --> 00:28:23,620
into the bed log to understand if it

00:28:21,460 --> 00:28:26,200
failed because of the integration test

00:28:23,620 --> 00:28:28,390
or because of the security test the

00:28:26,200 --> 00:28:30,400
active was only dedicated it was

00:28:28,390 --> 00:28:33,280
dedicated type of test because it didn't

00:28:30,400 --> 00:28:35,440
rely upon the existing test for tweak we

00:28:33,280 --> 00:28:37,509
decided to use only the passive for now

00:28:35,440 --> 00:28:40,240
because of the performance issue we

00:28:37,509 --> 00:28:42,700
didn't want to affect the build time but

00:28:40,240 --> 00:28:44,950
we still think about what we can do with

00:28:42,700 --> 00:28:46,929
active because the active is highly

00:28:44,950 --> 00:28:48,370
valuable maybe we'll run it once in the

00:28:46,929 --> 00:28:52,809
night or something like that we still

00:28:48,370 --> 00:28:54,549
talking about that and if I go back now

00:28:52,809 --> 00:28:57,639
to how we started this session with the

00:28:54,549 --> 00:29:00,039
Equifax I do hope that now you can see

00:28:57,639 --> 00:29:02,710
how you can add security test to your CI

00:29:00,039 --> 00:29:05,620
that give you a really high value that

00:29:02,710 --> 00:29:08,289
are simple to integrate and what is also

00:29:05,620 --> 00:29:11,740
very important that our fee not cost you

00:29:08,289 --> 00:29:13,240
any money just to us it and in case

00:29:11,740 --> 00:29:14,799
you're thinking that all the things we

00:29:13,240 --> 00:29:16,720
show you today are relevant only if it

00:29:14,799 --> 00:29:19,450
wasn't get up if using open source and

00:29:16,720 --> 00:29:21,309
get a flow so know it doesn't matter

00:29:19,450 --> 00:29:25,269
what is your CI whether it's github

00:29:21,309 --> 00:29:27,789
bitbucket of subversion TFS whatever it

00:29:25,269 --> 00:29:29,200
was called beyond PMO on the cloud and

00:29:27,789 --> 00:29:31,929
it doesn't matter what is your CI

00:29:29,200 --> 00:29:34,149
whether it's team city Jenkins or Travis

00:29:31,929 --> 00:29:36,789
so again any other CI you can use it

00:29:34,149 --> 00:29:39,220
anywhere the only thing you need is

00:29:36,789 --> 00:29:41,830
local and dhaka is quite common today

00:29:39,220 --> 00:29:44,620
so it's make it platform agnostic and

00:29:41,830 --> 00:29:46,690
thanks to glue you can also tailor the

00:29:44,620 --> 00:29:49,960
reports to what you need you can create

00:29:46,690 --> 00:29:51,610
issues on your track or on Microsoft

00:29:49,960 --> 00:29:54,549
team so again whatever you need it's

00:29:51,610 --> 00:29:57,070
really flexible so I do hope you ask

00:29:54,549 --> 00:29:59,649
yourself how can you use it how can you

00:29:57,070 --> 00:30:02,080
add that mean to your CI and there are

00:29:59,649 --> 00:30:04,509
some reference thing that we created for

00:30:02,080 --> 00:30:06,159
you except from the host ID and the

00:30:04,509 --> 00:30:08,049
first thing is the polar quest at Twix

00:30:06,159 --> 00:30:10,330
this is my poly quest of adding this

00:30:08,049 --> 00:30:11,799
rota to this solution to tweak so you

00:30:10,330 --> 00:30:14,080
can check out the commitments see what

00:30:11,799 --> 00:30:16,600
we did oh there is also the malicious

00:30:14,080 --> 00:30:19,059
poly quest the one that I shall show so

00:30:16,600 --> 00:30:22,120
you can feel how the output forms up

00:30:19,059 --> 00:30:24,269
look like and there is also sample app

00:30:22,120 --> 00:30:28,809
or data created in this sample for use

00:30:24,269 --> 00:30:31,450
vulnerable app called Yoshio and I added

00:30:28,809 --> 00:30:32,830
this solution to do this up so it's

00:30:31,450 --> 00:30:34,840
easier to learn from it because it's a

00:30:32,830 --> 00:30:36,610
lot more simpler than twit and there is

00:30:34,840 --> 00:30:39,190
also a blog post describing all the

00:30:36,610 --> 00:30:41,080
technical details required to get it so

00:30:39,190 --> 00:30:42,669
you can find all on my Twitter account I

00:30:41,080 --> 00:30:44,440
had some technical issue that I try to

00:30:42,669 --> 00:30:47,210
resolve but I put it on my Twitter

00:30:44,440 --> 00:30:50,360
account right after the session

00:30:47,210 --> 00:30:52,550
so thank you you invited to come to talk

00:30:50,360 --> 00:30:54,620
with each one of us or we can continue

00:30:52,550 --> 00:30:57,170
the discussion now at the open space we

00:30:54,620 --> 00:30:59,390
would love to help you set it up so feel

00:30:57,170 --> 00:30:59,810
free to come to talk with us so do it to

00:30:59,390 --> 00:31:02,360
us

00:30:59,810 --> 00:31:05,060
we reserved the schedule to help you set

00:31:02,360 --> 00:31:06,710
it up I really enjoy doing it I think if

00:31:05,060 --> 00:31:07,250
you enjoy it so thank you again for

00:31:06,710 --> 00:31:13,099
listening

00:31:07,250 --> 00:31:13,099

YouTube URL: https://www.youtube.com/watch?v=-xWqdxOK-Ao


