Title: 1 cloud, 2 clouds, 3 clouds, tons - Nati Shalom - DevOpsDays Tel Aviv 2017
Publication date: 2017-11-28
Playlist: DevOpsDays Tel Aviv 2017
Description: 
	https://www.devopsdays.org/events/2017-tel-aviv/
Captions: 
	00:00:05,390 --> 00:00:11,759
okay so the purpose of the call that the

00:00:08,760 --> 00:00:15,360
talk is really to talk about multi-cloud

00:00:11,759 --> 00:00:18,750
strategy basically and what I wanted is

00:00:15,360 --> 00:00:22,650
really to go actually to the end very

00:00:18,750 --> 00:00:24,320
quickly is to show the reality of what

00:00:22,650 --> 00:00:26,670
we're facing which is you know there is

00:00:24,320 --> 00:00:28,830
different environments and cloud being

00:00:26,670 --> 00:00:30,920
an environment that not just a cloud and

00:00:28,830 --> 00:00:34,829
also talked about multi stack which is

00:00:30,920 --> 00:00:37,530
if you like the the close brother of

00:00:34,829 --> 00:00:39,570
multi cloud which is a cloud in its in

00:00:37,530 --> 00:00:40,739
itself is an environment a data center

00:00:39,570 --> 00:00:43,200
environment and it could be multiple

00:00:40,739 --> 00:00:44,430
environments for ka4 development there

00:00:43,200 --> 00:00:45,780
might be in different clouds they might

00:00:44,430 --> 00:00:47,070
not be in different clouds that might be

00:00:45,780 --> 00:00:49,050
in different platforms like kubernetes

00:00:47,070 --> 00:00:51,030
and others you'll see that the strategy

00:00:49,050 --> 00:00:52,710
of doing multi stack was multi-cloud is

00:00:51,030 --> 00:00:54,270
not that different at the end of the day

00:00:52,710 --> 00:00:56,789
we do need a way to harmonize those

00:00:54,270 --> 00:01:01,020
environments so that's kind of how I'm

00:00:56,789 --> 00:01:04,140
gonna run that so I'll start with a

00:01:01,020 --> 00:01:06,150
reality check okay so start with a quick

00:01:04,140 --> 00:01:07,979
definition of what is hybrid cloud and

00:01:06,150 --> 00:01:10,260
what we mean by that again very quickly

00:01:07,979 --> 00:01:13,140
so usually when we people think about

00:01:10,260 --> 00:01:17,000
multi-cloud they have a certain set of

00:01:13,140 --> 00:01:19,590
expectation in mind normally not what is

00:01:17,000 --> 00:01:23,310
presented here so the most common use

00:01:19,590 --> 00:01:25,590
case is actually future proofing future

00:01:23,310 --> 00:01:27,750
proofing means that I want to be able to

00:01:25,590 --> 00:01:29,689
run on different clouds but I'm not

00:01:27,750 --> 00:01:32,640
necessarily gonna practice it today I

00:01:29,689 --> 00:01:35,189
want to be able to be agnostic because I

00:01:32,640 --> 00:01:36,750
want I have the idea that in some day in

00:01:35,189 --> 00:01:38,490
the future if I want to do that I want

00:01:36,750 --> 00:01:40,799
to be able to do that and that's future

00:01:38,490 --> 00:01:42,479
proofing which is it not less important

00:01:40,799 --> 00:01:44,700
assuming that it's not that complex

00:01:42,479 --> 00:01:46,860
actually most people would want

00:01:44,700 --> 00:01:49,560
something like that the other one is

00:01:46,860 --> 00:01:51,780
cloud portability usually dates that

00:01:49,560 --> 00:01:54,329
fits to vendors so I'm selling a product

00:01:51,780 --> 00:01:56,610
that for enterprises for example and

00:01:54,329 --> 00:01:58,350
those enterprises may leave energy or

00:01:56,610 --> 00:02:00,299
might live somewhere else and I want my

00:01:58,350 --> 00:02:02,070
software to run on those different

00:02:00,299 --> 00:02:04,740
environments in this case the cloud

00:02:02,070 --> 00:02:06,930
happens to be a market very much like

00:02:04,740 --> 00:02:09,330
operating system if we be previously

00:02:06,930 --> 00:02:12,180
ported our application to Windows and to

00:02:09,330 --> 00:02:15,010
Mac and Mac is a market

00:02:12,180 --> 00:02:16,900
Linux is a market and we one run our

00:02:15,010 --> 00:02:17,800
software to be available on all those so

00:02:16,900 --> 00:02:20,010
for ice fees

00:02:17,800 --> 00:02:23,380
this type of portability is important

00:02:20,010 --> 00:02:25,210
another use case is multi cloud in a

00:02:23,380 --> 00:02:26,770
case where we have the same service of

00:02:25,210 --> 00:02:28,900
the same application spreaded across

00:02:26,770 --> 00:02:31,570
multiple cloud environment this is more

00:02:28,900 --> 00:02:33,850
if you'd like a case in which you'll run

00:02:31,570 --> 00:02:35,470
data services in Google and the compute

00:02:33,850 --> 00:02:37,900
services in Amazon that's something that

00:02:35,470 --> 00:02:39,640
a lot of stuff stopped doing today but

00:02:37,900 --> 00:02:41,710
it could be any different environments

00:02:39,640 --> 00:02:44,050
where you could have different private

00:02:41,710 --> 00:02:46,090
clouds you're actually running on VMware

00:02:44,050 --> 00:02:47,560
right now and big cloud and you want to

00:02:46,090 --> 00:02:49,270
move to a public cloud but you might

00:02:47,560 --> 00:02:50,890
also have an open stack environment

00:02:49,270 --> 00:02:53,080
talking to your VMware environment so

00:02:50,890 --> 00:02:55,900
any type of two environments could be

00:02:53,080 --> 00:02:57,310
that type of use case and actually I

00:02:55,900 --> 00:02:59,410
mentioned the last one is the cloud

00:02:57,310 --> 00:03:00,790
burst II in which I wanna I'm running on

00:02:59,410 --> 00:03:02,440
a certain environment and I wanna brawl

00:03:00,790 --> 00:03:04,270
resources from another environment and

00:03:02,440 --> 00:03:06,010
how do you do that in an on-demand

00:03:04,270 --> 00:03:08,170
fashion that's what cloud bursting mates

00:03:06,010 --> 00:03:10,630
so the bottom line of that is really

00:03:08,170 --> 00:03:13,060
it's multiple use cases of Toad

00:03:10,630 --> 00:03:15,130
environments and how I interact with

00:03:13,060 --> 00:03:17,050
those environments and I listed a couple

00:03:15,130 --> 00:03:19,000
of them but actually there is even more

00:03:17,050 --> 00:03:21,040
than that but for the sake of the

00:03:19,000 --> 00:03:24,040
discovery discussion I don't think that

00:03:21,040 --> 00:03:25,900
we need to go even further than that how

00:03:24,040 --> 00:03:27,400
many people are using multi cloud or

00:03:25,900 --> 00:03:30,100
running on multi cloud as I mentioned

00:03:27,400 --> 00:03:32,680
the statistics show that it's not easy

00:03:30,100 --> 00:03:34,450
Turek actually there is more and more

00:03:32,680 --> 00:03:35,890
people that don't even know at that

00:03:34,450 --> 00:03:37,420
organization level not in individual

00:03:35,890 --> 00:03:39,190
levels so if I'll ask an individual

00:03:37,420 --> 00:03:41,920
you'll probably run on a seventh cloud

00:03:39,190 --> 00:03:43,209
but if I go into organization the

00:03:41,920 --> 00:03:45,100
organization itself has multiple

00:03:43,209 --> 00:03:48,010
business units multiple applications and

00:03:45,100 --> 00:03:50,560
those tends to be running on different

00:03:48,010 --> 00:03:52,810
environments so for its organization

00:03:50,560 --> 00:03:55,239
level you will find that the use of

00:03:52,810 --> 00:03:57,880
multiple cloud is even more commonly

00:03:55,239 --> 00:03:59,709
used than it is on an individual basis

00:03:57,880 --> 00:04:01,330
and that's why that question was

00:03:59,709 --> 00:04:03,280
answered in the way it was answered and

00:04:01,330 --> 00:04:05,500
this was actually a survey that we did

00:04:03,280 --> 00:04:07,660
in clarify recently and you could see

00:04:05,500 --> 00:04:09,910
the stats here it was a bit even

00:04:07,660 --> 00:04:12,160
surprising for us in the sense that we

00:04:09,910 --> 00:04:14,440
do see clouds that we didn't expect to

00:04:12,160 --> 00:04:17,470
have that level of adoption actually

00:04:14,440 --> 00:04:20,350
getting that also when we looked at

00:04:17,470 --> 00:04:24,700
other analysis by other if you like

00:04:20,350 --> 00:04:26,020
markets clearly Amazon is a very top at

00:04:24,700 --> 00:04:28,750
the market right now

00:04:26,020 --> 00:04:31,060
but there is many steal new clouds

00:04:28,750 --> 00:04:33,819
coming into the market Alibaba for

00:04:31,060 --> 00:04:35,259
example in China we also got Orca with

00:04:33,819 --> 00:04:37,000
bare-metal so they're running a lot of

00:04:35,259 --> 00:04:38,860
their database in they going to their

00:04:37,000 --> 00:04:41,409
own customers to do that they bought

00:04:38,860 --> 00:04:43,690
Ravello which is an Israeli company to

00:04:41,409 --> 00:04:46,150
run some of that stuff and Salesforce is

00:04:43,690 --> 00:04:49,030
doing the initial out marketing cloud

00:04:46,150 --> 00:04:50,710
all those sort of things so when we look

00:04:49,030 --> 00:04:53,289
at that you can understand that multi

00:04:50,710 --> 00:04:55,620
cloud is more of an interesting kind of

00:04:53,289 --> 00:04:57,879
space right now

00:04:55,620 --> 00:05:00,250
also when we talk about private cloud

00:04:57,879 --> 00:05:02,949
usually we think about our old data

00:05:00,250 --> 00:05:04,330
center this is no longer that case why

00:05:02,949 --> 00:05:07,030
it's no longer the case I think it's

00:05:04,330 --> 00:05:09,630
pretty obvious cloud became to the point

00:05:07,030 --> 00:05:12,099
get go to the point where it's actually

00:05:09,630 --> 00:05:13,990
enough that I can actually do a lot of

00:05:12,099 --> 00:05:16,720
the things that previously I could do

00:05:13,990 --> 00:05:18,969
only on my private data center but let's

00:05:16,720 --> 00:05:20,740
not look at the case I can actually do

00:05:18,969 --> 00:05:22,690
almost everything in a public

00:05:20,740 --> 00:05:26,169
environment and it becomes private cloud

00:05:22,690 --> 00:05:29,319
really becomes more of a who control the

00:05:26,169 --> 00:05:31,210
cloud do I control those resources who

00:05:29,319 --> 00:05:33,880
control the data do I control the data

00:05:31,210 --> 00:05:36,370
where does that sit becomes less

00:05:33,880 --> 00:05:38,199
important not from a geographical

00:05:36,370 --> 00:05:40,599
perspective but the operator that runs

00:05:38,199 --> 00:05:41,259
it could be Amazon but it could still be

00:05:40,599 --> 00:05:43,960
private

00:05:41,259 --> 00:05:46,569
I own the data meaning that it's private

00:05:43,960 --> 00:05:48,940
and therefore what you could see is that

00:05:46,569 --> 00:05:52,000
there is concept that are evolving from

00:05:48,940 --> 00:05:53,889
that even further so Amazon is doing

00:05:52,000 --> 00:05:56,529
something that is called PPC which is

00:05:53,889 --> 00:05:58,000
the ability to extend your private cloud

00:05:56,529 --> 00:05:59,469
data sent into public cloud and

00:05:58,000 --> 00:06:01,539
basically have the resources on the

00:05:59,469 --> 00:06:03,789
private and the public cloud act as if

00:06:01,539 --> 00:06:05,650
there are another node in your current

00:06:03,789 --> 00:06:07,180
data center by the fact that they create

00:06:05,650 --> 00:06:09,219
this network overlay that allows you to

00:06:07,180 --> 00:06:11,319
do that Ashur actually came with Azure

00:06:09,219 --> 00:06:13,120
stack recently and that's also changing

00:06:11,319 --> 00:06:14,560
the market they have a rack kind of

00:06:13,120 --> 00:06:16,719
machines that they can install in your

00:06:14,560 --> 00:06:19,210
data center and that where I can talk to

00:06:16,719 --> 00:06:21,759
other and all the control plane is still

00:06:19,210 --> 00:06:24,159
a service but the actual data could live

00:06:21,759 --> 00:06:25,779
in your own data center and that allows

00:06:24,159 --> 00:06:27,190
you that level of flexibility so even

00:06:25,779 --> 00:06:30,699
when we talk about private cloud or

00:06:27,190 --> 00:06:35,529
hybrid cloud that world is very evolving

00:06:30,699 --> 00:06:38,020
right now and changing private cloud to

00:06:35,529 --> 00:06:40,350
continue on that line private cloud come

00:06:38,020 --> 00:06:43,780
it used to be very very private cloud

00:06:40,350 --> 00:06:45,310
Nokia Cisco all those guys they've

00:06:43,780 --> 00:06:48,130
recently and what I'm saying recently

00:06:45,310 --> 00:06:51,340
it's really the past few weeks past few

00:06:48,130 --> 00:06:53,349
month a announced partnership with

00:06:51,340 --> 00:06:56,800
public cloud because they also realized

00:06:53,349 --> 00:06:59,889
that what matters to them is not to own

00:06:56,800 --> 00:07:02,800
the data center it's to own the data its

00:06:59,889 --> 00:07:05,349
to on the application and if Amazon can

00:07:02,800 --> 00:07:08,740
provide the actual data center at a low

00:07:05,349 --> 00:07:11,199
cost they would use that and they strike

00:07:08,740 --> 00:07:13,479
partnership deals different type of

00:07:11,199 --> 00:07:15,699
partnerships to actually do that so even

00:07:13,479 --> 00:07:18,280
when we're talking today on Cisco even

00:07:15,699 --> 00:07:21,880
boomer boomer itself as a partnership on

00:07:18,280 --> 00:07:23,470
Amazon they operate it they run it but

00:07:21,880 --> 00:07:25,930
they take the data center from Amazon

00:07:23,470 --> 00:07:27,820
everything else is a VMware kind of

00:07:25,930 --> 00:07:29,800
cloud similarly we're seeing the same

00:07:27,820 --> 00:07:32,289
thing with Nokia and Cisco and that's

00:07:29,800 --> 00:07:34,150
also changing there is an important

00:07:32,289 --> 00:07:36,900
aspect to that which actually simplify

00:07:34,150 --> 00:07:39,009
how we deal with her bid cloud because

00:07:36,900 --> 00:07:41,380
what we're starting to see is that they

00:07:39,009 --> 00:07:43,630
all starting to look the same they're

00:07:41,380 --> 00:07:45,490
all starting to behave the same they're

00:07:43,630 --> 00:07:48,190
all starting to even be on the same

00:07:45,490 --> 00:07:49,479
locations as opposed to you know a very

00:07:48,190 --> 00:07:52,270
different private cloud that we had

00:07:49,479 --> 00:07:54,580
today and to a very different public lab

00:07:52,270 --> 00:07:56,259
that we had before so now private and

00:07:54,580 --> 00:07:58,060
public becomes very similar it's even

00:07:56,259 --> 00:07:59,680
running on the same data center they've

00:07:58,060 --> 00:08:01,960
been operated by the same if you'd like

00:07:59,680 --> 00:08:04,240
operator and it becomes more of an

00:08:01,960 --> 00:08:06,130
integration of two concept then

00:08:04,240 --> 00:08:08,650
integration of completely different

00:08:06,130 --> 00:08:10,830
environments and that's kind of the the

00:08:08,650 --> 00:08:13,180
other point that I wanted to make here

00:08:10,830 --> 00:08:17,620
so things becomes even more interesting

00:08:13,180 --> 00:08:19,120
as we go to the edge now I usually when

00:08:17,620 --> 00:08:20,349
we talk about edge people don't think

00:08:19,120 --> 00:08:22,419
about cloud when you talk to the edge

00:08:20,349 --> 00:08:23,919
and I see people here from the army I

00:08:22,419 --> 00:08:25,479
think you'll probably understand what

00:08:23,919 --> 00:08:29,110
I'm talking about right now but edge

00:08:25,479 --> 00:08:32,079
devices even your iPhone is now becoming

00:08:29,110 --> 00:08:34,209
a mini cloud of itself right it runs an

00:08:32,079 --> 00:08:36,539
operating system you could even run

00:08:34,209 --> 00:08:38,649
containers within those devices and

00:08:36,539 --> 00:08:41,950
which means that it's just another

00:08:38,649 --> 00:08:43,839
meeting cloud and therefore it just a

00:08:41,950 --> 00:08:46,180
version of the same cloud that we have

00:08:43,839 --> 00:08:48,610
seen but very very distributed like

00:08:46,180 --> 00:08:51,790
millions of devices and stuff like that

00:08:48,610 --> 00:08:52,750
and we want to be able to treat them as

00:08:51,790 --> 00:08:54,490
if they were running on the central

00:08:52,750 --> 00:08:57,700
cloud from a management perspective and

00:08:54,490 --> 00:08:59,500
other things but the idea is that this

00:08:57,700 --> 00:09:00,970
type of heterogeneous type of

00:08:59,500 --> 00:09:03,310
environment multi cloud type of

00:09:00,970 --> 00:09:06,160
environment becomes even more common as

00:09:03,310 --> 00:09:10,900
we moved to an IOT use cases connected

00:09:06,160 --> 00:09:12,760
cars and so forth and so forth so what

00:09:10,900 --> 00:09:16,480
the I think the reasons why we're seeing

00:09:12,760 --> 00:09:18,220
a lot of that is because of this and

00:09:16,480 --> 00:09:20,080
this is something that I'm using a lot a

00:09:18,220 --> 00:09:22,210
grecian presentation it's basically

00:09:20,080 --> 00:09:23,500
saying that the speed of innovation far

00:09:22,210 --> 00:09:24,850
exceed the speed of adoption the speed

00:09:23,500 --> 00:09:26,530
of adoption this is kind of the MU law

00:09:24,850 --> 00:09:29,740
not sure if you're familiar with that

00:09:26,530 --> 00:09:31,570
but the adoption cycle of adopting a

00:09:29,740 --> 00:09:36,250
technology haven't changed much over the

00:09:31,570 --> 00:09:39,010
past 20 40 years even but the speed in

00:09:36,250 --> 00:09:41,410
which new technologies are evolving have

00:09:39,010 --> 00:09:44,380
changed to a point where you could see

00:09:41,410 --> 00:09:46,540
that it's really exploding and what that

00:09:44,380 --> 00:09:47,770
really leads us to a point in which

00:09:46,540 --> 00:09:51,130
organization especially large

00:09:47,770 --> 00:09:53,170
organization adopting technologies but

00:09:51,130 --> 00:09:55,840
they don't really replace one the

00:09:53,170 --> 00:09:58,740
previous ones so all of a sudden what we

00:09:55,840 --> 00:10:01,120
end up with is something like this where

00:09:58,740 --> 00:10:03,610
we are starting to see more and more

00:10:01,120 --> 00:10:05,980
silos in our environment where each

00:10:03,610 --> 00:10:07,930
environment becomes a silo and in our

00:10:05,980 --> 00:10:09,400
case of the presentation an environment

00:10:07,930 --> 00:10:11,290
would be a cloud so the way I would

00:10:09,400 --> 00:10:13,390
manage a sure would be different than

00:10:11,290 --> 00:10:14,770
the way I would manage AWS and the way I

00:10:13,390 --> 00:10:16,390
would manage my private data center

00:10:14,770 --> 00:10:18,310
would be very different than any other

00:10:16,390 --> 00:10:20,320
data center and if I extend it to a

00:10:18,310 --> 00:10:21,880
platform kubernetes versus non-compete

00:10:20,320 --> 00:10:24,760
in this environment that would be the

00:10:21,880 --> 00:10:26,350
same thing so the silo becomes a problem

00:10:24,760 --> 00:10:28,600
why is that the problem because simple

00:10:26,350 --> 00:10:32,080
questions cannot be answered even how

00:10:28,600 --> 00:10:34,450
much it cost me to operate my cloud do I

00:10:32,080 --> 00:10:36,130
have access capacity do I have resources

00:10:34,450 --> 00:10:38,140
are not well utilized and I can pour

00:10:36,130 --> 00:10:40,090
them for other applications those thing

00:10:38,140 --> 00:10:41,920
cannot be done in silos and there are

00:10:40,090 --> 00:10:44,080
many many things security and so forth

00:10:41,920 --> 00:10:47,050
that becomes very complex the more I

00:10:44,080 --> 00:10:48,070
have those silos and because of the

00:10:47,050 --> 00:10:49,720
difference between the speed of

00:10:48,070 --> 00:10:52,240
innovation the speed of adoption that

00:10:49,720 --> 00:10:53,950
reality is going to be more and more

00:10:52,240 --> 00:10:55,450
severe and that's why we see an

00:10:53,950 --> 00:10:56,860
organization that previously could say

00:10:55,450 --> 00:10:59,080
I'm an Oracle shop on my VM I show up

00:10:56,860 --> 00:11:01,840
and I beer shop this doesn't work

00:10:59,080 --> 00:11:03,550
anymore and that's something that really

00:11:01,840 --> 00:11:04,160
forced us to look into that differently

00:11:03,550 --> 00:11:05,790
so

00:11:04,160 --> 00:11:08,670
what are the approaches that

00:11:05,790 --> 00:11:12,180
organizations do or use to solve that

00:11:08,670 --> 00:11:14,279
problem I kind of put three categories

00:11:12,180 --> 00:11:16,079
there is more but I think those

00:11:14,279 --> 00:11:18,390
represents that main you the main

00:11:16,079 --> 00:11:21,690
solution of the main approaches how we

00:11:18,390 --> 00:11:22,769
do that so one of them is the classic if

00:11:21,690 --> 00:11:24,959
you'd like cloud management platform

00:11:22,769 --> 00:11:27,600
when I'm saying classic it's really a

00:11:24,959 --> 00:11:31,019
way to view the infrastructure in a

00:11:27,600 --> 00:11:33,209
glorified way which means that I can

00:11:31,019 --> 00:11:35,070
actually see the resources from Amazon

00:11:33,209 --> 00:11:36,660
and the resources from Azure on the same

00:11:35,070 --> 00:11:39,089
dashboard it's kind of a single pane of

00:11:36,660 --> 00:11:40,709
glass model have the same way to do

00:11:39,089 --> 00:11:42,660
chargebacks and all those sort of things

00:11:40,709 --> 00:11:44,279
and there is advantage and disadvantages

00:11:42,660 --> 00:11:47,370
I'll talk more about it but it really

00:11:44,279 --> 00:11:49,950
touches that layer then we have the

00:11:47,370 --> 00:11:51,420
platform's today I could say that all of

00:11:49,950 --> 00:11:53,880
the platform of the past platform

00:11:51,420 --> 00:11:56,130
running on kubernetes so it's no longer

00:11:53,880 --> 00:11:57,750
kubernetes as a micro services type of

00:11:56,130 --> 00:11:58,829
approach versus pass which is doing

00:11:57,750 --> 00:12:01,320
something different it's actually the

00:11:58,829 --> 00:12:04,320
same thing and pass becoming an

00:12:01,320 --> 00:12:05,399
abstraction on top of kubernetes and we

00:12:04,320 --> 00:12:07,290
also have an automation and

00:12:05,399 --> 00:12:09,839
orchestration approach which is really

00:12:07,290 --> 00:12:11,610
don't change your environment let's talk

00:12:09,839 --> 00:12:13,410
about automation how we all met the

00:12:11,610 --> 00:12:16,350
processes across those different

00:12:13,410 --> 00:12:18,449
environment and I think you'll see how

00:12:16,350 --> 00:12:21,089
those things are combined so a couple of

00:12:18,449 --> 00:12:23,519
things about the platform is they seem

00:12:21,089 --> 00:12:26,010
peers they called the cloud management

00:12:23,519 --> 00:12:28,320
platforms again the main thing that is a

00:12:26,010 --> 00:12:29,670
benefit for them is the cost and the

00:12:28,320 --> 00:12:31,140
single pane of glass you get one

00:12:29,670 --> 00:12:33,630
dashboard you see all the clouds as if

00:12:31,140 --> 00:12:36,209
it was one big cloud the disadvantage is

00:12:33,630 --> 00:12:37,890
that it's very limited to management of

00:12:36,209 --> 00:12:39,899
infrastructure so it has no application

00:12:37,890 --> 00:12:41,670
awareness or very little application

00:12:39,899 --> 00:12:44,820
awareness meaning that if you need to do

00:12:41,670 --> 00:12:46,620
DevOps cycles and other processes then

00:12:44,820 --> 00:12:49,290
things becomes a little bit more complex

00:12:46,620 --> 00:12:51,870
if you want to use cloud services like

00:12:49,290 --> 00:12:54,449
iam RDS and others that are part of any

00:12:51,870 --> 00:12:55,980
clouds it's not that trivial to use them

00:12:54,449 --> 00:12:58,470
under the credential because in many

00:12:55,980 --> 00:13:01,350
cases that would run on the cloud under

00:12:58,470 --> 00:13:03,209
their own credential and therefore your

00:13:01,350 --> 00:13:05,070
the credential of using those platforms

00:13:03,209 --> 00:13:06,810
is very different than the credential

00:13:05,070 --> 00:13:08,370
that you're gonna use when you access

00:13:06,810 --> 00:13:10,769
the cloud and usually you wouldn't have

00:13:08,370 --> 00:13:14,100
even the access to view those instances

00:13:10,769 --> 00:13:15,390
that are running by those platforms so

00:13:14,100 --> 00:13:16,920
those I would say some of the

00:13:15,390 --> 00:13:17,820
limitations that you would see there so

00:13:16,920 --> 00:13:19,920
there is some value

00:13:17,820 --> 00:13:22,710
here there is a big promise here but I

00:13:19,920 --> 00:13:26,700
personally believe that that the value

00:13:22,710 --> 00:13:29,160
is is very limited the other that

00:13:26,700 --> 00:13:31,380
becomes more popular is using containers

00:13:29,160 --> 00:13:33,030
and platform-as-a-service which is very

00:13:31,380 --> 00:13:35,670
application centric on the other it's

00:13:33,030 --> 00:13:37,620
it's almost the hundred eighty percent

00:13:35,670 --> 00:13:39,270
of what I described earlier it's really

00:13:37,620 --> 00:13:40,470
focusing on the application and making

00:13:39,270 --> 00:13:42,660
the application portable across

00:13:40,470 --> 00:13:44,550
different clouds not trying to view that

00:13:42,660 --> 00:13:46,740
the MS the VM itself you could still go

00:13:44,550 --> 00:13:48,750
to those clouds and see the VMS as if

00:13:46,740 --> 00:13:50,640
you're running it yourself the the part

00:13:48,750 --> 00:13:52,410
of really abstract how you operate the

00:13:50,640 --> 00:13:54,180
application and so you deploy the

00:13:52,410 --> 00:13:55,500
application and because many of the

00:13:54,180 --> 00:13:57,930
clouds are protocol Burnett is today in

00:13:55,500 --> 00:14:00,480
containers it actually makes the

00:13:57,930 --> 00:14:02,850
portability of this type of application

00:14:00,480 --> 00:14:04,560
and workload something that is much more

00:14:02,850 --> 00:14:07,290
manageable and easier than it used to be

00:14:04,560 --> 00:14:08,580
before so that's something that is

00:14:07,290 --> 00:14:10,440
becoming that's why it's becoming very

00:14:08,580 --> 00:14:12,030
very popular because it's not just a

00:14:10,440 --> 00:14:14,250
single pane of glass it's actually

00:14:12,030 --> 00:14:15,660
supported but if in clouds and now all

00:14:14,250 --> 00:14:18,090
the clouds have the same if you like

00:14:15,660 --> 00:14:19,950
code base of that platform and therefore

00:14:18,090 --> 00:14:21,180
you could expect that the behavior

00:14:19,950 --> 00:14:25,350
between those clouds would be more

00:14:21,180 --> 00:14:27,300
similar the other if you like solutions

00:14:25,350 --> 00:14:29,340
is the automation layers the automation

00:14:27,300 --> 00:14:32,160
really doesn't really abstract the

00:14:29,340 --> 00:14:34,170
clouds it's abstract in a way but what

00:14:32,160 --> 00:14:37,230
it tries to do is really provide you

00:14:34,170 --> 00:14:38,700
that single control plane not single

00:14:37,230 --> 00:14:40,110
pane of glass single control plane

00:14:38,700 --> 00:14:42,780
meaning that you could have resources

00:14:40,110 --> 00:14:44,970
from different kinds Network kubernetes

00:14:42,780 --> 00:14:46,530
and other things and you could automate

00:14:44,970 --> 00:14:49,620
the process of how you run it in one

00:14:46,530 --> 00:14:51,410
cloud and use certain language to

00:14:49,620 --> 00:14:53,760
abstract that so that the automation

00:14:51,410 --> 00:14:56,070
would work pretty much in the same way

00:14:53,760 --> 00:14:57,600
on another cloud but the actual

00:14:56,070 --> 00:15:00,720
resources that it's going to touch and

00:14:57,600 --> 00:15:01,680
the actual if you'd like infrastructure

00:15:00,720 --> 00:15:03,630
it's going to touch can be very

00:15:01,680 --> 00:15:05,810
different so that gives you a higher

00:15:03,630 --> 00:15:07,800
degree of abstraction as opposed to CMP

00:15:05,810 --> 00:15:09,990
meaning that the abstraction is really

00:15:07,800 --> 00:15:13,500
on the demand how you define what you

00:15:09,990 --> 00:15:15,480
want what you need to run versus how you

00:15:13,500 --> 00:15:16,500
gonna run that and how you gonna run

00:15:15,480 --> 00:15:18,330
that that's something that is gonna

00:15:16,500 --> 00:15:22,950
happen more in run time and I'll talk to

00:15:18,330 --> 00:15:26,250
you about it in just one second so by

00:15:22,950 --> 00:15:28,620
now you need to be very confused as most

00:15:26,250 --> 00:15:31,130
people are most organization are because

00:15:28,620 --> 00:15:33,680
there are many solutions and as a man

00:15:31,130 --> 00:15:36,740
in the speed of adoption versus speed of

00:15:33,680 --> 00:15:38,390
innovation every day every conference

00:15:36,740 --> 00:15:40,430
you're gonna hear about the next thing

00:15:38,390 --> 00:15:42,290
that is gonna solve that problem and

00:15:40,430 --> 00:15:45,470
gonna be better than the previous one

00:15:42,290 --> 00:15:47,570
and because you're not able to adopt at

00:15:45,470 --> 00:15:49,760
that speed where those solutions are

00:15:47,570 --> 00:15:52,060
coming to market you're going to look at

00:15:49,760 --> 00:15:54,380
that and basically take a position

00:15:52,060 --> 00:15:56,360
standing basically position of not

00:15:54,380 --> 00:15:58,190
taking a decision and looking around

00:15:56,360 --> 00:15:59,930
saying okay if I don't take a decision

00:15:58,190 --> 00:16:01,250
probably I'm gonna get the next solution

00:15:59,930 --> 00:16:03,700
that is gonna be better than this one so

00:16:01,250 --> 00:16:06,820
I'll probably wait like most people do

00:16:03,700 --> 00:16:10,430
but that's also a problem as we probably

00:16:06,820 --> 00:16:13,580
assumed and therefore and that's kind of

00:16:10,430 --> 00:16:16,280
outside the main point of my

00:16:13,580 --> 00:16:18,020
presentation how do we operate in this

00:16:16,280 --> 00:16:19,700
type of environment so the first thing

00:16:18,020 --> 00:16:21,500
is the only constant is change you could

00:16:19,700 --> 00:16:23,600
see that my shirt that's something that

00:16:21,500 --> 00:16:25,850
we believe strongly is that you need to

00:16:23,600 --> 00:16:27,800
build a solution and a strategy that is

00:16:25,850 --> 00:16:31,010
not bounded to a cloud or a platform or

00:16:27,800 --> 00:16:33,620
a stack you need to build it in a way

00:16:31,010 --> 00:16:35,180
that you assume that the next thing that

00:16:33,620 --> 00:16:37,010
you're gonna deploy is not something

00:16:35,180 --> 00:16:38,390
that you know today it's gonna be

00:16:37,010 --> 00:16:40,280
something different so it needs to be

00:16:38,390 --> 00:16:41,720
flexible enough and you need to have

00:16:40,280 --> 00:16:44,540
that flexibility in mind applicability

00:16:41,720 --> 00:16:47,330
in mind to adopt to new things that you

00:16:44,540 --> 00:16:49,010
don't know that exist yet how does that

00:16:47,330 --> 00:16:51,170
work well I'll talk to you in a second

00:16:49,010 --> 00:16:53,060
but that's a very important concept on

00:16:51,170 --> 00:16:54,920
how you design anything in this type of

00:16:53,060 --> 00:16:56,480
environment because if you if your

00:16:54,920 --> 00:16:58,760
strategy like many others are saying

00:16:56,480 --> 00:17:00,980
okay a lecture on kubernetes guess what

00:16:58,760 --> 00:17:03,440
two years ago it was Cloud Foundry and

00:17:00,980 --> 00:17:05,600
that changed and three years ago it was

00:17:03,440 --> 00:17:09,350
something else and after that change so

00:17:05,600 --> 00:17:13,850
that is not sustainable the next thing

00:17:09,350 --> 00:17:14,930
is really the keep your option open I'll

00:17:13,850 --> 00:17:17,150
talk more about it it sounds like a

00:17:14,930 --> 00:17:18,920
buzzword but but I'll show you how you

00:17:17,150 --> 00:17:22,730
can actually do that practically without

00:17:18,920 --> 00:17:25,069
too much cost so what we kind of look

00:17:22,730 --> 00:17:27,230
into that is is the way to abstract

00:17:25,069 --> 00:17:28,670
between the demand and the supply the

00:17:27,230 --> 00:17:30,740
demand being the application this is

00:17:28,670 --> 00:17:33,110
what you describe in your script in your

00:17:30,740 --> 00:17:35,750
blueprint you describe how the

00:17:33,110 --> 00:17:37,460
application is comprised while the

00:17:35,750 --> 00:17:39,530
component that needs to be and then you

00:17:37,460 --> 00:17:41,510
expect you know the the platform or the

00:17:39,530 --> 00:17:44,210
environment itself to do the matchmaking

00:17:41,510 --> 00:17:46,100
between the demand and the supply itself

00:17:44,210 --> 00:17:48,679
and that gives you a lot of flexibility

00:17:46,100 --> 00:17:50,179
because I'm not tying the demand to a

00:17:48,679 --> 00:17:52,340
specific band to get to a specific

00:17:50,179 --> 00:17:54,230
platinum and at any point of time I

00:17:52,340 --> 00:17:57,350
could say that same demand can be served

00:17:54,230 --> 00:17:59,659
by Asher by OpenStack by Google but

00:17:57,350 --> 00:18:03,049
something else but that definition of

00:17:59,659 --> 00:18:04,730
that demand doesn't have to change in

00:18:03,049 --> 00:18:07,369
many cases it will be the same because

00:18:04,730 --> 00:18:08,990
most of it touches my application not

00:18:07,369 --> 00:18:11,240
the underlined resources that serve that

00:18:08,990 --> 00:18:13,429
application so that's gives me a much

00:18:11,240 --> 00:18:15,619
greater degree of flexibility and that's

00:18:13,429 --> 00:18:19,100
something that I think is important in

00:18:15,619 --> 00:18:22,940
that context the other thing to note

00:18:19,100 --> 00:18:26,299
about it is that the plug ability really

00:18:22,940 --> 00:18:28,220
allows you to plug the resources that

00:18:26,299 --> 00:18:31,279
you wanna plug into that environment as

00:18:28,220 --> 00:18:33,799
a plug-in so I can extend the resources

00:18:31,279 --> 00:18:36,649
that I want to have very easily I can

00:18:33,799 --> 00:18:38,450
have a 0 or I can have OpenStack but I

00:18:36,649 --> 00:18:41,029
can have different services with another

00:18:38,450 --> 00:18:42,710
basically API every API endpoint it

00:18:41,029 --> 00:18:45,470
doesn't limit you to the infrastructure

00:18:42,710 --> 00:18:48,230
there I can expose anything that has an

00:18:45,470 --> 00:18:50,899
API as a pluggable resource that I live

00:18:48,230 --> 00:18:52,759
I can script and talk to and have it as

00:18:50,899 --> 00:18:55,909
part of my resource I'll show you later

00:18:52,759 --> 00:18:59,299
I'll have time how that looks like to

00:18:55,909 --> 00:19:00,499
make it real what I used is a example of

00:18:59,299 --> 00:19:02,389
an application a very complex

00:19:00,499 --> 00:19:04,039
application I call it an application

00:19:02,389 --> 00:19:06,440
even though it's an infrastructure in

00:19:04,039 --> 00:19:08,240
itself it's called on up it's a very big

00:19:06,440 --> 00:19:09,679
project in Linux Foundation I'm not

00:19:08,240 --> 00:19:12,529
going to go into the details of what is

00:19:09,679 --> 00:19:14,269
gone up because it's not the point the

00:19:12,529 --> 00:19:17,929
point is really to take an application

00:19:14,269 --> 00:19:19,669
that is relatively new and it's very

00:19:17,929 --> 00:19:21,950
complex as you can see it has dozens of

00:19:19,669 --> 00:19:25,039
micro services and most of it is running

00:19:21,950 --> 00:19:27,259
at kubernetes so the first thing was to

00:19:25,039 --> 00:19:29,749
use kubernetes as a strategy to do this

00:19:27,259 --> 00:19:31,460
multi cloud that's fine ok we can if we

00:19:29,749 --> 00:19:35,059
can run on kubernetes kubernetes gives

00:19:31,460 --> 00:19:36,860
us that portability and at least 50% of

00:19:35,059 --> 00:19:39,950
our problems goes away just by doing

00:19:36,860 --> 00:19:42,710
that and really as you can see there

00:19:39,950 --> 00:19:44,960
this is kind of the approach that we've

00:19:42,710 --> 00:19:46,730
taken there the second point is that we

00:19:44,960 --> 00:19:49,309
want to be able to run kubernetes in

00:19:46,730 --> 00:19:51,889
different environments whether it's our

00:19:49,309 --> 00:19:54,529
cloud or different clouds and therefore

00:19:51,889 --> 00:19:56,659
we needed that same blueprint that I

00:19:54,529 --> 00:19:57,799
mentioned earlier as a way to describe

00:19:56,659 --> 00:20:00,019
the canary since

00:19:57,799 --> 00:20:02,960
and if I can describe it in a way that

00:20:00,019 --> 00:20:05,179
it could run on Azure on OpenStack on

00:20:02,960 --> 00:20:07,309
any environment in the way that I wanted

00:20:05,179 --> 00:20:08,659
to run then I can get a very easy

00:20:07,309 --> 00:20:13,070
portability of the kubernetes cluster

00:20:08,659 --> 00:20:15,440
itself I can also say run on an existing

00:20:13,070 --> 00:20:17,899
instance of kubernetes and at the end

00:20:15,440 --> 00:20:21,860
that's where we plug in another layer of

00:20:17,899 --> 00:20:26,869
that so in that case what I'm doing is

00:20:21,860 --> 00:20:28,340
I'm automating the services by talking

00:20:26,869 --> 00:20:30,320
to kubernetes itself so I'm taking a

00:20:28,340 --> 00:20:31,909
bunch of micro services and I'm template

00:20:30,320 --> 00:20:34,999
icing them and now I'm talking to

00:20:31,909 --> 00:20:36,769
kubernetes as if it was the end cloud as

00:20:34,999 --> 00:20:38,809
if it was the actual target cloud that

00:20:36,769 --> 00:20:40,429
I'm talking to the only difference is

00:20:38,809 --> 00:20:43,489
that now the API that I'm going to talk

00:20:40,429 --> 00:20:45,470
about is micro services API and not a VM

00:20:43,489 --> 00:20:47,989
API and I'm going to deploy micro

00:20:45,470 --> 00:20:49,730
services and not VM but from an

00:20:47,989 --> 00:20:51,379
orchestration perspective it's gonna be

00:20:49,730 --> 00:20:52,999
pretty much the same I'm basically

00:20:51,379 --> 00:20:55,249
automating a deployment of application

00:20:52,999 --> 00:20:56,840
I'm taking processes and resources in

00:20:55,249 --> 00:20:59,059
this case those resources happens to be

00:20:56,840 --> 00:21:00,980
micro services and pods and now I'm

00:20:59,059 --> 00:21:02,899
comprising them together automating that

00:21:00,980 --> 00:21:06,619
process and the endpoint that I'm going

00:21:02,899 --> 00:21:09,080
to talk to is kubernetes so far so good

00:21:06,619 --> 00:21:12,109
and that gives me the ability to take

00:21:09,080 --> 00:21:13,850
that gigantic list of micro services and

00:21:12,109 --> 00:21:16,519
automate the process template icing it

00:21:13,850 --> 00:21:18,200
and deploy it on kubernetes itself and I

00:21:16,519 --> 00:21:18,619
get a multiple instances of that and so

00:21:18,200 --> 00:21:20,779
forth

00:21:18,619 --> 00:21:22,279
I can have discovery between them and

00:21:20,779 --> 00:21:24,169
all those things so orchestration and

00:21:22,279 --> 00:21:27,379
kubernetes actually works hand-in-hand

00:21:24,169 --> 00:21:28,159
so I actually took two buckets of things

00:21:27,379 --> 00:21:30,019
that we mentioned

00:21:28,159 --> 00:21:31,730
and I'm actually combining them together

00:21:30,019 --> 00:21:34,249
and together they give me a very

00:21:31,730 --> 00:21:36,820
flexible solution the other thing that

00:21:34,249 --> 00:21:39,499
it gives me is not just orchestrating of

00:21:36,820 --> 00:21:41,389
services on kubernetes because there are

00:21:39,499 --> 00:21:43,399
question there that I described earlier

00:21:41,389 --> 00:21:46,909
in the previous slide can manage

00:21:43,399 --> 00:21:49,429
artifacts on kubernetes but it's not

00:21:46,909 --> 00:21:51,230
bounded to kubernetes its generic enough

00:21:49,429 --> 00:21:53,389
so that I can actually point it to any

00:21:51,230 --> 00:21:55,759
resource I can have a hybrid stack

00:21:53,389 --> 00:21:58,429
solution in which some of the resources

00:21:55,759 --> 00:22:00,019
would run in kubernetes and will talk to

00:21:58,429 --> 00:22:03,169
other resources that runs outside of

00:22:00,019 --> 00:22:05,450
kubernetes and reality is such that in

00:22:03,169 --> 00:22:07,100
many cases that's going to be your

00:22:05,450 --> 00:22:08,960
reality your database is going to be

00:22:07,100 --> 00:22:10,549
something that it's not that easy

00:22:08,960 --> 00:22:11,450
to convert it into a communities

00:22:10,549 --> 00:22:13,639
instance if

00:22:11,450 --> 00:22:15,980
though technically you could do that but

00:22:13,639 --> 00:22:17,269
sometimes it's not easy to do that not

00:22:15,980 --> 00:22:19,010
even the right thing to do from an

00:22:17,269 --> 00:22:21,649
effort versus value perspective and

00:22:19,010 --> 00:22:22,760
therefore what you want is still an end

00:22:21,649 --> 00:22:25,250
to an automation where you could

00:22:22,760 --> 00:22:27,799
actually deploy the entire thing in one

00:22:25,250 --> 00:22:28,279
click and be able to run it so how does

00:22:27,799 --> 00:22:29,929
it work

00:22:28,279 --> 00:22:32,450
it really works in the sense that if I

00:22:29,929 --> 00:22:34,490
have the orchestration layer on top that

00:22:32,450 --> 00:22:35,870
is agnostic to the platform I can have

00:22:34,490 --> 00:22:38,929
that flexibility and if you remember the

00:22:35,870 --> 00:22:40,610
previous book that I mention that you

00:22:38,929 --> 00:22:42,679
want to be able to use those platforms

00:22:40,610 --> 00:22:44,330
but in a way that doesn't lock you to

00:22:42,679 --> 00:22:45,649
those platforms that layer of

00:22:44,330 --> 00:22:48,080
orchestration really gives me that

00:22:45,649 --> 00:22:49,789
flexibility I can work with kubernetes I

00:22:48,080 --> 00:22:51,950
can use everything in kubernetes but I'm

00:22:49,789 --> 00:22:53,720
not bounded to kubernetes I can still

00:22:51,950 --> 00:22:56,149
combine it with other things and that's

00:22:53,720 --> 00:22:57,980
a much more robust strategy to allow me

00:22:56,149 --> 00:23:00,679
to do this type of habit stack and a bit

00:22:57,980 --> 00:23:03,549
cloud type of environment now if I

00:23:00,679 --> 00:23:06,049
stretch it to multiple environments then

00:23:03,549 --> 00:23:08,059
what we could see is that even when I'm

00:23:06,049 --> 00:23:09,679
using kubernetes again I can run quit at

00:23:08,059 --> 00:23:12,889
least in different environments that

00:23:09,679 --> 00:23:15,620
could be public private bare metal non

00:23:12,889 --> 00:23:18,639
bare metal that could be QA production

00:23:15,620 --> 00:23:21,350
multiple sites multiple geography

00:23:18,639 --> 00:23:23,779
multiple clouds although start with

00:23:21,350 --> 00:23:24,919
environment so if I abstract how I run

00:23:23,779 --> 00:23:27,289
kubernetes through this type of

00:23:24,919 --> 00:23:29,360
orchestration there I can then point

00:23:27,289 --> 00:23:31,370
that type of environment and be flexible

00:23:29,360 --> 00:23:34,250
on the instance of a kubernetes that I

00:23:31,370 --> 00:23:37,789
want to run in different ways and I can

00:23:34,250 --> 00:23:40,909
say for development run kubernetes in a

00:23:37,789 --> 00:23:43,070
relatively low cost setup which is not

00:23:40,909 --> 00:23:44,659
highly available and not necessarily the

00:23:43,070 --> 00:23:46,820
high end machines and so forth and so

00:23:44,659 --> 00:23:48,980
forth for the production environment to

00:23:46,820 --> 00:23:50,690
take the high end type of resource pools

00:23:48,980 --> 00:23:52,970
and use them to do those type of things

00:23:50,690 --> 00:23:54,559
and I want to do that in a way that I

00:23:52,970 --> 00:23:57,080
can actually even create the environment

00:23:54,559 --> 00:23:59,510
run it kill it and recreate it in an

00:23:57,080 --> 00:24:02,480
easy way and that's kind of the point

00:23:59,510 --> 00:24:04,970
that I'm making the same idea is on

00:24:02,480 --> 00:24:08,659
multiple sites the same idea would apply

00:24:04,970 --> 00:24:11,179
to also bare metal and non bare metal

00:24:08,659 --> 00:24:13,130
type of environment and edge device or

00:24:11,179 --> 00:24:15,919
knowledge device as I mentioned I think

00:24:13,130 --> 00:24:17,299
earlier because I don't have a lot of

00:24:15,919 --> 00:24:23,040
time I actually going to show you that

00:24:17,299 --> 00:24:25,990
snippet very quickly here to show it

00:24:23,040 --> 00:24:29,920
therefore so what you could see is that

00:24:25,990 --> 00:24:31,090
I'm spawning kubernetes and then after

00:24:29,920 --> 00:24:33,100
I'll spawn kubernetes the important

00:24:31,090 --> 00:24:36,340
thing would be how I can describe a

00:24:33,100 --> 00:24:37,810
micro service on that blueprint service

00:24:36,340 --> 00:24:40,870
that will talk to that kubernetes

00:24:37,810 --> 00:24:42,430
instance ok so in this case what you

00:24:40,870 --> 00:24:45,970
could see is a it's a young male file

00:24:42,430 --> 00:24:47,950
the model itself is called Tosca -

00:24:45,970 --> 00:24:50,170
standard language for this type of

00:24:47,950 --> 00:24:52,510
blueprint and what I'm adding is another

00:24:50,170 --> 00:24:55,030
blueprint another micro service that

00:24:52,510 --> 00:24:56,320
macro service is going to be able to in

00:24:55,030 --> 00:24:57,760
this case it's called an owner

00:24:56,320 --> 00:25:00,610
application but it's just an application

00:24:57,760 --> 00:25:02,170
a service and I'm going to say that it

00:25:00,610 --> 00:25:04,540
needs to run on a certain it's a

00:25:02,170 --> 00:25:06,820
community's application and now I'm

00:25:04,540 --> 00:25:09,580
putting references that says run on this

00:25:06,820 --> 00:25:11,050
kubernetes master and obviously I'm

00:25:09,580 --> 00:25:12,130
providing some other context information

00:25:11,050 --> 00:25:14,320
to do that

00:25:12,130 --> 00:25:16,690
there is another node that already have

00:25:14,320 --> 00:25:19,480
reference to a kubernetes master so it

00:25:16,690 --> 00:25:19,990
already knows the location and and those

00:25:19,480 --> 00:25:22,960
type of things

00:25:19,990 --> 00:25:24,880
this allows me to provide that level of

00:25:22,960 --> 00:25:26,830
abstraction that that same blueprint

00:25:24,880 --> 00:25:28,180
would run on any kubernetes instance

00:25:26,830 --> 00:25:30,130
because there is nothing there that

00:25:28,180 --> 00:25:31,300
points to a specific instance it's

00:25:30,130 --> 00:25:33,190
actually derive a lot of that

00:25:31,300 --> 00:25:34,900
information on run time and therefore

00:25:33,190 --> 00:25:36,880
the blue range itself is fairly

00:25:34,900 --> 00:25:38,950
abstracted from the actual runtime

00:25:36,880 --> 00:25:40,270
environment and that gives me the

00:25:38,950 --> 00:25:42,190
flexibility so what you could see is

00:25:40,270 --> 00:25:45,250
that I could actually point that and say

00:25:42,190 --> 00:25:47,080
use that service template the community

00:25:45,250 --> 00:25:49,480
service template to actually run that

00:25:47,080 --> 00:25:52,180
service and it will talk to the

00:25:49,480 --> 00:25:55,570
communities API and in this case I can

00:25:52,180 --> 00:25:58,030
actually say have that service even

00:25:55,570 --> 00:26:01,480
contained in a certain node or certain

00:25:58,030 --> 00:26:03,250
pod to actually run it but they general

00:26:01,480 --> 00:26:05,110
idea is that when I have that scripting

00:26:03,250 --> 00:26:07,210
layer on top I can actually have that

00:26:05,110 --> 00:26:09,310
flexibility and because as I mentioned

00:26:07,210 --> 00:26:12,040
earlier if that scripting language can

00:26:09,310 --> 00:26:14,260
be something that can be abstracted from

00:26:12,040 --> 00:26:16,180
kubernetes itself I can also do the same

00:26:14,260 --> 00:26:18,700
thing not just with kubernetes services

00:26:16,180 --> 00:26:20,830
I can actually attach services there are

00:26:18,700 --> 00:26:22,480
not kubernetes services on the same

00:26:20,830 --> 00:26:25,030
control plane so that same blueprint can

00:26:22,480 --> 00:26:27,070
have Maria DB running outside open areas

00:26:25,030 --> 00:26:29,020
and imarco service running on kubernetes

00:26:27,070 --> 00:26:30,610
and connect them together and that's how

00:26:29,020 --> 00:26:31,380
I get that flexibility that I mentioned

00:26:30,610 --> 00:26:34,690
earlier

00:26:31,380 --> 00:26:36,419
so what am I saying here so you could

00:26:34,690 --> 00:26:37,769
see that the application the

00:26:36,419 --> 00:26:40,200
is actually all the micro-service that I

00:26:37,769 --> 00:26:43,649
created and those micro-services are now

00:26:40,200 --> 00:26:46,139
running again oh so the bottom line of

00:26:43,649 --> 00:26:47,730
all that is that if we recall the

00:26:46,139 --> 00:26:49,980
principle that I mentioned earlier and

00:26:47,730 --> 00:26:53,009
how you do a hybrid cloud I mentioned

00:26:49,980 --> 00:26:54,539
three buckets one of them was CMP which

00:26:53,009 --> 00:26:56,639
gives me the single pane of glass I

00:26:54,539 --> 00:26:59,220
mentioned containers which is kubernetes

00:26:56,639 --> 00:27:01,230
which gives me this portable workload

00:26:59,220 --> 00:27:02,580
that I can run in multiple clouds and I

00:27:01,230 --> 00:27:05,100
mention orchestration which is really

00:27:02,580 --> 00:27:06,480
taking the automation first approach so

00:27:05,100 --> 00:27:08,129
it's infrastructure first approach

00:27:06,480 --> 00:27:10,559
application first approach and

00:27:08,129 --> 00:27:11,789
automation first approach the solution

00:27:10,559 --> 00:27:14,340
that we've taken in this specific

00:27:11,789 --> 00:27:16,499
example was to combine two elements the

00:27:14,340 --> 00:27:18,090
orchestration first approach plus the

00:27:16,499 --> 00:27:20,399
application first approach which means

00:27:18,090 --> 00:27:22,289
I'm taking kubernetes to abstract the

00:27:20,399 --> 00:27:23,820
way I deploy the application and I'm

00:27:22,289 --> 00:27:26,070
taking orchestration layer to do this

00:27:23,820 --> 00:27:27,600
across multiple clouds and across

00:27:26,070 --> 00:27:29,730
multiple stacks where I can connect

00:27:27,600 --> 00:27:31,320
services that doesn't run in kubernetes

00:27:29,730 --> 00:27:33,629
and connect them to kubernetes in this

00:27:31,320 --> 00:27:35,549
case I can actually extend on what I'm

00:27:33,629 --> 00:27:37,169
already getting from kubernetes and the

00:27:35,549 --> 00:27:39,179
things that are more practical because

00:27:37,169 --> 00:27:41,039
many organization would have a problem

00:27:39,179 --> 00:27:43,859
to achieve all the benefit that I get

00:27:41,039 --> 00:27:45,179
from kubernetes where the first step is

00:27:43,859 --> 00:27:47,340
really move everything to kubernetes

00:27:45,179 --> 00:27:49,320
it's gonna be much harder task for a lot

00:27:47,340 --> 00:27:51,359
of organization to say hey kubernetes

00:27:49,320 --> 00:27:52,980
gives you all of that but in order to

00:27:51,359 --> 00:27:54,809
benefit from that forget all the things

00:27:52,980 --> 00:27:57,090
that you have and now move everything to

00:27:54,809 --> 00:27:58,259
here it's gonna take a long time and in

00:27:57,090 --> 00:27:59,909
some cases it doesn't even make sense

00:27:58,259 --> 00:28:01,980
because some of those services mentioned

00:27:59,909 --> 00:28:03,539
data services and other things are not

00:28:01,980 --> 00:28:05,279
necessarily things that are worthwhile

00:28:03,539 --> 00:28:07,980
the effort to actually move them they

00:28:05,279 --> 00:28:09,690
might even be at some point in

00:28:07,980 --> 00:28:11,309
the process so with that type of

00:28:09,690 --> 00:28:14,029
approach we have the flexibility now

00:28:11,309 --> 00:28:17,369
more importantly as I mentioned earlier

00:28:14,029 --> 00:28:19,499
it's also future-proof future-proof in

00:28:17,369 --> 00:28:20,909
the sense that there is also services

00:28:19,499 --> 00:28:22,619
that will run component is not because

00:28:20,909 --> 00:28:25,019
there are legacy or data services

00:28:22,619 --> 00:28:27,149
because their service and because

00:28:25,019 --> 00:28:30,509
they're the next thing that we don't

00:28:27,149 --> 00:28:34,320
necessarily even know but we'll be there

00:28:30,509 --> 00:28:37,109
very soon and that allows me to be ready

00:28:34,320 --> 00:28:39,090
to accept that and don't change it again

00:28:37,109 --> 00:28:42,470
and again and again and move everything

00:28:39,090 --> 00:28:45,149
to the next thing and find myself really

00:28:42,470 --> 00:28:47,340
doing this lift and shift type of

00:28:45,149 --> 00:28:48,929
processes all the time and continuously

00:28:47,340 --> 00:28:49,670
and never get to the point where every

00:28:48,929 --> 00:28:51,860
knee

00:28:49,670 --> 00:28:53,360
a stable version that I can work with so

00:28:51,860 --> 00:28:55,160
this gives me the ability to do that in

00:28:53,360 --> 00:28:57,710
a more evolvable way and it's something

00:28:55,160 --> 00:29:00,380
that I can do gradually and extend my

00:28:57,710 --> 00:29:02,630
system and extend my application over

00:29:00,380 --> 00:29:05,660
time and use those new services but also

00:29:02,630 --> 00:29:08,210
connect to my other services and still

00:29:05,660 --> 00:29:10,780
benefit from things like kubernetes in

00:29:08,210 --> 00:29:13,280
this type of context so that's kind of

00:29:10,780 --> 00:29:15,560
the main point that I wanted to mention

00:29:13,280 --> 00:29:21,329
here okay thank you

00:29:15,560 --> 00:29:21,329

YouTube URL: https://www.youtube.com/watch?v=7CXMVRWRrwE


