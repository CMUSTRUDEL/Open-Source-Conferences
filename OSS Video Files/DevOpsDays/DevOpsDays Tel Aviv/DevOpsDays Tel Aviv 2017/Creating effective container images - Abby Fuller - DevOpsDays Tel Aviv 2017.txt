Title: Creating effective container images - Abby Fuller - DevOpsDays Tel Aviv 2017
Publication date: 2017-11-28
Playlist: DevOpsDays Tel Aviv 2017
Description: 
	Sick of getting paged at 2am and wondering “where did all my disk space go?” This has actually happened to me, and you can learn from my mistakes! New Docker users often start with a stock image in order to get up and running quickly, but that isn’t always the right answer. Creating efficient images is often overlooked, but important. Beyond saving resources, using minimal images also delivers important security benefits: include only what you need and not a whole runtime that might have security vulnerabilities. In this session, I’ll talk about how to create effective images and lessons I’ve learned from running containers in production at a number of startups. I’ll also cover topics like “how do layers work?” and some things you should think about when creating your images, such as; choosing or creating the right base image; the importance of caching; using RUN statements conservatively; cleaning up as you go. I’ll also address best practices; both at a high level with multi-stage builds; and some language-specific best practices, for example, tips and tricks for creating containers for Node.js vs Go. To illustrate these points, we’ll cover: How layers work?, Choosing a base image vs. creating your own, The basics of building minimal images and the importance of choosing a base image vs. creating your own, The importance of caching, High level best practices for Linux containers (in general, and some language specific examples), High level best practices for Windows container images, New and improved: multi-stage builds, Good vs. not so good Dockerfile examples, Docker Image Scanning, and other friends, and looking to the future for more optimization.
Captions: 
	00:00:05,540 --> 00:00:11,400
had a lot of WS semi shoutouts in the in

00:00:09,809 --> 00:00:13,380
the first keynote this morning so well

00:00:11,400 --> 00:00:17,430
we'll see we'll see it we'll see how it

00:00:13,380 --> 00:00:19,439
goes great intro from from Queenie Pig

00:00:17,430 --> 00:00:22,500
saying that all other talks are wrong

00:00:19,439 --> 00:00:24,330
hopefully that's true we're going to

00:00:22,500 --> 00:00:26,939
talk about about creating effective

00:00:24,330 --> 00:00:29,189
docker images now that I've gotten my

00:00:26,939 --> 00:00:31,980
not clever clicker to work so what are

00:00:29,189 --> 00:00:33,510
we talking about so a little bit of

00:00:31,980 --> 00:00:34,829
level setting we're gonna cover how to

00:00:33,510 --> 00:00:36,270
layers work we're going to talk about

00:00:34,829 --> 00:00:38,850
some basics we'll do high-level

00:00:36,270 --> 00:00:41,070
practices for Windows we'll go through

00:00:38,850 --> 00:00:42,780
some docker files we'll go through some

00:00:41,070 --> 00:00:44,399
language specific tips we'll talk about

00:00:42,780 --> 00:00:46,800
tools and then we'll talk about looking

00:00:44,399 --> 00:00:50,460
forward to the future so this is

00:00:46,800 --> 00:00:53,699
intended to be if not intro at least at

00:00:50,460 --> 00:00:54,840
least pretty the goal is that I want

00:00:53,699 --> 00:00:56,309
people to be able to leave with tools

00:00:54,840 --> 00:00:57,960
that they could use in production right

00:00:56,309 --> 00:00:59,699
now so not something that it takes a

00:00:57,960 --> 00:01:02,070
couple weeks to research and implement

00:00:59,699 --> 00:01:03,480
but hopefully regardless of what kind of

00:01:02,070 --> 00:01:05,939
level your container infrastructure

00:01:03,480 --> 00:01:07,260
might be at that you have you leave with

00:01:05,939 --> 00:01:09,659
something that you could that you could

00:01:07,260 --> 00:01:11,640
put into practice so should be something

00:01:09,659 --> 00:01:13,200
out there for everyone but we'll start

00:01:11,640 --> 00:01:16,530
off with some of the with some of the

00:01:13,200 --> 00:01:19,590
basics and so to start it off what our

00:01:16,530 --> 00:01:21,360
container layers so docker containers

00:01:19,590 --> 00:01:24,270
are are built as stacks right so you

00:01:21,360 --> 00:01:26,280
have the the beginning which is the

00:01:24,270 --> 00:01:29,189
stack of read-only base layers so that's

00:01:26,280 --> 00:01:30,780
your base image obviously read-only you

00:01:29,189 --> 00:01:32,970
can't really do anything about it on top

00:01:30,780 --> 00:01:35,040
of that you get a really thin read/write

00:01:32,970 --> 00:01:36,299
layer so that's where everything that

00:01:35,040 --> 00:01:37,890
you commit when you're running your

00:01:36,299 --> 00:01:40,560
container everything happens there and

00:01:37,890 --> 00:01:42,930
then how many what you do and that thin

00:01:40,560 --> 00:01:45,420
read/write layer adds up to your final

00:01:42,930 --> 00:01:47,070
image size so your your base stack plus

00:01:45,420 --> 00:01:48,689
what you've committed and you're in your

00:01:47,070 --> 00:01:52,560
read/write layer is the final size of

00:01:48,689 --> 00:01:54,329
your limit your image but why do I

00:01:52,560 --> 00:01:56,369
actually care about how many layers I

00:01:54,329 --> 00:01:57,990
have so I used to deploy a monolith and

00:01:56,369 --> 00:01:59,790
obviously that could be pretty big so

00:01:57,990 --> 00:02:02,640
why do I care about all these tiny

00:01:59,790 --> 00:02:05,159
container layers anyway more layers a

00:02:02,640 --> 00:02:06,450
larger image so it used to be that if

00:02:05,159 --> 00:02:09,000
you were building a monolith you

00:02:06,450 --> 00:02:11,099
deployed if you are lucky maybe once a

00:02:09,000 --> 00:02:12,060
week or you had a giant stage release

00:02:11,099 --> 00:02:14,490
and it happened

00:02:12,060 --> 00:02:16,319
every couple weeks every month but if

00:02:14,490 --> 00:02:20,160
you're deploying containers and with

00:02:16,319 --> 00:02:22,260
that probably microservices that adds up

00:02:20,160 --> 00:02:23,850
really quickly so your two gigabyte

00:02:22,260 --> 00:02:26,130
image that sounded really good when you

00:02:23,850 --> 00:02:27,870
read a blog about it on medium it's

00:02:26,130 --> 00:02:29,520
probably not so great when you have

00:02:27,870 --> 00:02:32,670
hundreds of them and you're trying to

00:02:29,520 --> 00:02:35,130
deploy them every couple of hours so it

00:02:32,670 --> 00:02:36,720
adds up really quickly both to build the

00:02:35,130 --> 00:02:38,340
actual image and then how to push and

00:02:36,720 --> 00:02:42,390
pull it from a registry so how to get it

00:02:38,340 --> 00:02:43,800
onto an actual server and also means so

00:02:42,390 --> 00:02:45,450
usually I give this talk to an audience

00:02:43,800 --> 00:02:46,590
of mostly developers and you can see

00:02:45,450 --> 00:02:48,959
some of them sitting there thinking like

00:02:46,590 --> 00:02:51,090
well this doesn't sound like my problem

00:02:48,959 --> 00:02:52,620
this sounds like an ops problem my

00:02:51,090 --> 00:02:55,620
problem is just my application but this

00:02:52,620 --> 00:02:56,880
is DevOps days so we can think about

00:02:55,620 --> 00:02:59,430
stuff what everyone should think about

00:02:56,880 --> 00:03:01,860
it because everyone is a DevOps person

00:02:59,430 --> 00:03:04,350
now but if you're one of those people

00:03:01,860 --> 00:03:05,970
then think about the security also so

00:03:04,350 --> 00:03:08,040
the larger the image the larger the

00:03:05,970 --> 00:03:09,690
attack vector so the smaller image so

00:03:08,040 --> 00:03:11,940
the less packages you have on that image

00:03:09,690 --> 00:03:15,420
the less things there are for someone

00:03:11,940 --> 00:03:19,640
that is less well-intentioned than me to

00:03:15,420 --> 00:03:24,720
attack so safety first smaller or safer

00:03:19,640 --> 00:03:26,220
but also faster so this sounds great so

00:03:24,720 --> 00:03:29,430
how can I reduce the number of lares

00:03:26,220 --> 00:03:31,560
that I have keynote and PowerPoint

00:03:29,430 --> 00:03:33,060
apparently really hate my gifts so it

00:03:31,560 --> 00:03:35,850
was funnier when those this was a gift

00:03:33,060 --> 00:03:37,230
so just imagine in your head that this

00:03:35,850 --> 00:03:39,600
was a gif

00:03:37,230 --> 00:03:41,040
so the lares for these docker images

00:03:39,600 --> 00:03:43,109
they're a lot like preschool right so

00:03:41,040 --> 00:03:43,620
what do we learn in preschool so sharing

00:03:43,109 --> 00:03:46,260
is caring

00:03:43,620 --> 00:03:47,760
so if I have a block I can share it with

00:03:46,260 --> 00:03:49,859
the other kid that also wants to play

00:03:47,760 --> 00:03:51,600
with the block so use these shared base

00:03:49,859 --> 00:03:54,209
images wherever possible so that means

00:03:51,600 --> 00:03:55,890
if I have to node.js containers and they

00:03:54,209 --> 00:03:58,290
both have a lot of similar requirements

00:03:55,890 --> 00:04:01,590
they can use a shared base image so that

00:03:58,290 --> 00:04:02,790
it saves me space on the host itself and

00:04:01,590 --> 00:04:04,859
that they can build a little faster

00:04:02,790 --> 00:04:07,230
obviously limit the data that I write to

00:04:04,859 --> 00:04:09,570
that read/write layer chain my run

00:04:07,230 --> 00:04:11,250
statements and then prevent my cache

00:04:09,570 --> 00:04:14,609
misses for as long as possible and we'll

00:04:11,250 --> 00:04:17,100
dig into all of these in depth so

00:04:14,609 --> 00:04:18,660
hopefully if you're sitting here you

00:04:17,100 --> 00:04:20,340
know what a docker file is but you would

00:04:18,660 --> 00:04:22,260
be surprised at how many people have

00:04:20,340 --> 00:04:23,430
skipped the whole intro tart chapter and

00:04:22,260 --> 00:04:25,720
says I don't need to know any of this

00:04:23,430 --> 00:04:28,240
let's get straight to building

00:04:25,720 --> 00:04:29,800
so instead because it's mandatory I will

00:04:28,240 --> 00:04:31,570
cover all the basics for you

00:04:29,800 --> 00:04:33,460
so a dockerfile is a series of

00:04:31,570 --> 00:04:37,360
instructions for building an image so

00:04:33,460 --> 00:04:39,670
pretty common format you get it in the

00:04:37,360 --> 00:04:41,800
it's a so like argument or instruction

00:04:39,670 --> 00:04:48,550
and then what you're actually doing so

00:04:41,800 --> 00:04:51,280
run X add X copy X so I stole this from

00:04:48,550 --> 00:04:53,770
wu-tang and I actually like this joke so

00:04:51,280 --> 00:04:55,810
much that I bought the wu-tang fun

00:04:53,770 --> 00:04:58,810
I did not expense that that was a

00:04:55,810 --> 00:05:01,420
personal expense so this is the this is

00:04:58,810 --> 00:05:03,550
divert the actual wu-tang album fun so

00:05:01,420 --> 00:05:06,640
I've stepped up my I've stepped up my

00:05:03,550 --> 00:05:09,370
Photoshop game why do you care about my

00:05:06,640 --> 00:05:11,830
joke so casual is everything around me

00:05:09,370 --> 00:05:13,210
so for for docker containers it's all

00:05:11,830 --> 00:05:15,460
about how long I can use the cache

00:05:13,210 --> 00:05:20,050
docker has some funny caching behaviors

00:05:15,460 --> 00:05:21,670
so basically everything that's the same

00:05:20,050 --> 00:05:24,580
up until something that's either

00:05:21,670 --> 00:05:26,470
different or as a run statement you can

00:05:24,580 --> 00:05:29,350
use the cache for but there are some

00:05:26,470 --> 00:05:31,840
things where the command the command is

00:05:29,350 --> 00:05:35,020
the same but the result is intentionally

00:05:31,840 --> 00:05:37,720
different so an example might be pulling

00:05:35,020 --> 00:05:39,700
from a git repository that that actual

00:05:37,720 --> 00:05:40,990
command is never going to change but I

00:05:39,700 --> 00:05:42,190
want the result to be different so

00:05:40,990 --> 00:05:45,730
sometimes I'll need to break the cache

00:05:42,190 --> 00:05:47,590
myself but in general I want to hold off

00:05:45,730 --> 00:05:49,240
breaking my cache for as long as

00:05:47,590 --> 00:05:51,460
possible if I want my builds to be

00:05:49,240 --> 00:05:54,220
faster so we'll look at some tips for

00:05:51,460 --> 00:05:56,110
how you can do this but I can use my I

00:05:54,220 --> 00:05:58,750
can write the order of my statements

00:05:56,110 --> 00:06:00,160
differently I can chain them together on

00:05:58,750 --> 00:06:03,370
the name of getting me a little bit of

00:06:00,160 --> 00:06:04,840
disk space and why do I care about desk

00:06:03,370 --> 00:06:06,760
space so I'm starting to think that

00:06:04,840 --> 00:06:08,170
maybe I should filter people out for

00:06:06,760 --> 00:06:09,610
whether they'll actually enjoy the talk

00:06:08,170 --> 00:06:12,220
or not by saying I'm just going to talk

00:06:09,610 --> 00:06:14,530
about disk space and why do you care

00:06:12,220 --> 00:06:16,000
about it so in real life

00:06:14,530 --> 00:06:18,130
this base is saying it's not it's not

00:06:16,000 --> 00:06:20,050
super glamorous but it has far-reaching

00:06:18,130 --> 00:06:23,320
and unintended consequences when you

00:06:20,050 --> 00:06:26,740
ignore it so for example if some of you

00:06:23,320 --> 00:06:29,800
have possibly been on call I was on call

00:06:26,740 --> 00:06:32,560
right up until I went to to Amazon and

00:06:29,800 --> 00:06:34,360
in in real life when you've maybe

00:06:32,560 --> 00:06:35,460
definitely talking about a frontier and

00:06:34,360 --> 00:06:37,900
definitely not me

00:06:35,460 --> 00:06:38,770
so you move over your monolith to

00:06:37,900 --> 00:06:41,169
containers

00:06:38,770 --> 00:06:41,889
and you're really proud of it you did a

00:06:41,169 --> 00:06:43,270
great job

00:06:41,889 --> 00:06:46,780
you definitely read all the

00:06:43,270 --> 00:06:48,759
documentation and then two o'clock in

00:06:46,780 --> 00:06:50,560
the morning your pager duty starts

00:06:48,759 --> 00:06:53,199
freaking out and then you're like oh god

00:06:50,560 --> 00:06:54,759
what is this so Pedro dude is freaking

00:06:53,199 --> 00:06:56,349
out it's sending me all these messages

00:06:54,759 --> 00:06:58,569
and then I look at it and it's like well

00:06:56,349 --> 00:07:01,750
all of your cluster hosts are out of

00:06:58,569 --> 00:07:03,009
disk space then I'm like all of them and

00:07:01,750 --> 00:07:04,599
then you go on and then you realize that

00:07:03,009 --> 00:07:06,849
all of these beautifully handcrafted

00:07:04,599 --> 00:07:09,039
artisanal container images that I spent

00:07:06,849 --> 00:07:11,560
so much time working on are actually

00:07:09,039 --> 00:07:13,690
quite large and all of those container

00:07:11,560 --> 00:07:15,699
images and my beauty of continuous

00:07:13,690 --> 00:07:17,470
deployment have added up to taking up

00:07:15,699 --> 00:07:19,990
all of the disk space across all of my

00:07:17,470 --> 00:07:21,720
cluster hosts so don't be me or my

00:07:19,990 --> 00:07:23,919
friend or whoever we're talking about

00:07:21,720 --> 00:07:25,840
but this is something that it doesn't

00:07:23,919 --> 00:07:27,580
sound super exciting so what's more

00:07:25,840 --> 00:07:29,650
exciting is building a cool application

00:07:27,580 --> 00:07:31,900
but stuff like this really adds up and

00:07:29,650 --> 00:07:33,430
it adds up to how fast your deploys are

00:07:31,900 --> 00:07:36,520
how quickly you can ship features to

00:07:33,430 --> 00:07:37,840
customers but also in how you can not

00:07:36,520 --> 00:07:40,720
get paged at two o'clock in the morning

00:07:37,840 --> 00:07:42,550
which is important to me so first step

00:07:40,720 --> 00:07:45,159
so let's walk through some example so

00:07:42,550 --> 00:07:47,590
let's start with the docker file so this

00:07:45,159 --> 00:07:51,520
is by the way it is fine you can run it

00:07:47,590 --> 00:07:53,199
it actually works there's some reasons

00:07:51,520 --> 00:07:54,969
why it's not good though and this is

00:07:53,199 --> 00:07:58,240
exactly where I would have started when

00:07:54,969 --> 00:08:00,039
I first when I first started working

00:07:58,240 --> 00:08:02,830
with micro services this is exactly what

00:08:00,039 --> 00:08:05,110
I would have started with it's fine' it

00:08:02,830 --> 00:08:06,940
runs and I know that my thoughts would

00:08:05,110 --> 00:08:08,380
have been like this is this is great but

00:08:06,940 --> 00:08:11,800
there are some ways that this is not

00:08:08,380 --> 00:08:13,389
great so the first one I can make this a

00:08:11,800 --> 00:08:15,190
little bit smaller by choosing a

00:08:13,389 --> 00:08:18,789
different base image so in the previous

00:08:15,190 --> 00:08:20,830
slide I did what I knew so my monolith

00:08:18,789 --> 00:08:23,469
was maybe running on some Ubuntu servers

00:08:20,830 --> 00:08:25,300
so I said great here's a docker image

00:08:23,469 --> 00:08:27,520
for exactly the operating system that

00:08:25,300 --> 00:08:29,800
I've been using this seems friendly I'll

00:08:27,520 --> 00:08:32,680
do this but there are better options out

00:08:29,800 --> 00:08:35,770
there so my first step this is how long

00:08:32,680 --> 00:08:39,070
this is how large my my stock Ubuntu

00:08:35,770 --> 00:08:41,469
image was so 458 Meg's if I picked you

00:08:39,070 --> 00:08:44,020
saw that my example built in Python if I

00:08:41,469 --> 00:08:48,339
pulled an image that was maybe built for

00:08:44,020 --> 00:08:49,600
Python it's 80 6.8 Meg's and the people

00:08:48,339 --> 00:08:51,300
at Alpine are a little crazy and I'm

00:08:49,600 --> 00:08:53,519
sure they've made this like 20

00:08:51,300 --> 00:08:55,440
by now but at the time we're high where

00:08:53,519 --> 00:08:59,010
I pulled this for my example I was 86

00:08:55,440 --> 00:09:00,930
but I saved a bunch of space just by

00:08:59,010 --> 00:09:02,970
changing my space image I didn't really

00:09:00,930 --> 00:09:03,330
have to change anything else so that's

00:09:02,970 --> 00:09:05,190
it

00:09:03,330 --> 00:09:06,930
and then that image then built a little

00:09:05,190 --> 00:09:09,529
bit faster ships a little bit faster

00:09:06,930 --> 00:09:12,140
takes up a little less space in my hosts

00:09:09,529 --> 00:09:13,920
there are tons of options out there for

00:09:12,140 --> 00:09:15,480
pretty much anything that you're

00:09:13,920 --> 00:09:17,790
building right and all of them will have

00:09:15,480 --> 00:09:20,040
a space trade-offs well we'll talk about

00:09:17,790 --> 00:09:21,630
why maybe you don't necessarily always

00:09:20,040 --> 00:09:24,120
want to use one of the more minimal

00:09:21,630 --> 00:09:25,320
images but if you know you're doing if

00:09:24,120 --> 00:09:26,940
you know your packages if you can

00:09:25,320 --> 00:09:28,440
install them correctly there's an option

00:09:26,940 --> 00:09:30,750
out there to help you build and chip

00:09:28,440 --> 00:09:34,079
that feature faster so when do I

00:09:30,750 --> 00:09:35,910
actually want a full base OS so all my

00:09:34,079 --> 00:09:39,269
slow examples for picking on Ubuntu and

00:09:35,910 --> 00:09:41,209
I actually do really like Ubuntu when do

00:09:39,269 --> 00:09:43,829
I actually when do I want the full thing

00:09:41,209 --> 00:09:45,810
security is one of them so I'm not just

00:09:43,829 --> 00:09:50,010
downloading a strange operating system I

00:09:45,810 --> 00:09:51,959
found on the internet safety first to

00:09:50,010 --> 00:09:55,320
his compliance so not everyone works at

00:09:51,959 --> 00:09:57,180
a start-up and in a lot of cases you you

00:09:55,320 --> 00:09:59,070
only have a prescribed set of rules you

00:09:57,180 --> 00:10:00,899
have to follow for your development so

00:09:59,070 --> 00:10:02,790
maybe you work at a bank maybe you work

00:10:00,899 --> 00:10:04,440
at a company that just not a not a tiny

00:10:02,790 --> 00:10:06,810
start-up and you have to follow the

00:10:04,440 --> 00:10:08,399
rules of corporate IT and then the final

00:10:06,810 --> 00:10:10,260
one and we'll look at this in depth with

00:10:08,399 --> 00:10:13,440
a ruby example in just a little bit but

00:10:10,260 --> 00:10:16,110
ease of development so some of these

00:10:13,440 --> 00:10:17,790
minimal minimal images they had to get

00:10:16,110 --> 00:10:20,370
rid of something in order to become

00:10:17,790 --> 00:10:22,560
smaller than a full operating system so

00:10:20,370 --> 00:10:25,709
in the case of some of those images I

00:10:22,560 --> 00:10:28,470
sacrificed a package manager and some of

00:10:25,709 --> 00:10:30,720
the other ones I sacrifice Oh Ruby

00:10:28,470 --> 00:10:32,670
builds with many many many supporting

00:10:30,720 --> 00:10:35,160
gems to make your process as easy as

00:10:32,670 --> 00:10:36,959
possible to get a minimal Ruby image I

00:10:35,160 --> 00:10:38,730
sacrificed those extra gems and I

00:10:36,959 --> 00:10:40,110
install only what I need so this is

00:10:38,730 --> 00:10:41,820
great but it requires a little bit more

00:10:40,110 --> 00:10:43,680
work so if you're just getting started

00:10:41,820 --> 00:10:46,649
maybe sometimes easier to start with the

00:10:43,680 --> 00:10:48,360
stock example so here's my original

00:10:46,649 --> 00:10:50,880
docker file with my original docker

00:10:48,360 --> 00:10:52,560
image this is probably literally almost

00:10:50,880 --> 00:10:57,449
word-for-word what I would have started

00:10:52,560 --> 00:10:58,529
with and still fine here's my change

00:10:57,449 --> 00:11:00,420
though and you'll notice that by

00:10:58,529 --> 00:11:02,459
changing my base image I got a second

00:11:00,420 --> 00:11:03,410
supporting change also so I changed my

00:11:02,459 --> 00:11:05,180
base but

00:11:03,410 --> 00:11:08,060
then one of my lines disappeared and

00:11:05,180 --> 00:11:10,160
that was my apt-get line that was

00:11:08,060 --> 00:11:11,779
installing all of my extra packages I

00:11:10,160 --> 00:11:13,519
don't need them anymore because those

00:11:11,779 --> 00:11:15,800
packages were setting up my boon to

00:11:13,519 --> 00:11:17,959
image for a Python application and by

00:11:15,800 --> 00:11:20,149
using a base image that was written for

00:11:17,959 --> 00:11:21,889
our Python applications I already had

00:11:20,149 --> 00:11:24,740
those installed so all I need to do is

00:11:21,889 --> 00:11:27,350
install my actual app requirements

00:11:24,740 --> 00:11:28,639
same with cache and validations so the

00:11:27,350 --> 00:11:30,170
the least number of times that I can

00:11:28,639 --> 00:11:32,180
invalidate the cache the smaller my

00:11:30,170 --> 00:11:35,300
image will be once I have invalidated it

00:11:32,180 --> 00:11:36,769
there is no going back so if I know that

00:11:35,300 --> 00:11:38,899
nothing has changed up until that point

00:11:36,769 --> 00:11:41,779
let's hang on to my cache as long as

00:11:38,899 --> 00:11:43,970
possible so here I saved myself an extra

00:11:41,779 --> 00:11:46,970
step I copied over my requirements first

00:11:43,970 --> 00:11:48,620
before I built so I can do that for so

00:11:46,970 --> 00:11:52,009
that I only rebuild if my requirements

00:11:48,620 --> 00:11:54,290
have changed a little recap of our

00:11:52,009 --> 00:11:56,779
progress so far right so layers file

00:11:54,290 --> 00:11:59,360
system differences they add up really

00:11:56,779 --> 00:12:02,120
quickly so the more layers that I have

00:11:59,360 --> 00:12:05,329
the bigger my final image will be we're

00:12:02,120 --> 00:12:06,410
gonna cover windows really fast we're

00:12:05,329 --> 00:12:07,910
basically getting to a point where

00:12:06,410 --> 00:12:12,470
everything is pretty much supported

00:12:07,910 --> 00:12:14,660
equally a lot of people don't have a the

00:12:12,470 --> 00:12:16,130
can can't use a green field to kind of

00:12:14,660 --> 00:12:18,199
start for their containers workloads

00:12:16,130 --> 00:12:19,579
right that you you came from an area

00:12:18,199 --> 00:12:21,259
where you either had a monolith that you

00:12:19,579 --> 00:12:24,170
had to that you had to break down or

00:12:21,259 --> 00:12:25,670
maybe you didn't have Linux maybe you

00:12:24,170 --> 00:12:26,899
are running your workloads on Windows

00:12:25,670 --> 00:12:28,490
and we're moving to a place where those

00:12:26,899 --> 00:12:31,220
are all kind of supported in the same

00:12:28,490 --> 00:12:32,899
beautiful a happy family so there are

00:12:31,220 --> 00:12:35,689
some tools out there to help you convert

00:12:32,899 --> 00:12:37,569
your existing Windows images it is very

00:12:35,689 --> 00:12:40,459
cleverly called convert to docker file

00:12:37,569 --> 00:12:42,519
but then it lets you run it the same way

00:12:40,459 --> 00:12:44,660
that you would a Linux container and

00:12:42,519 --> 00:12:46,579
we'll talk about the implications of

00:12:44,660 --> 00:12:49,040
that but this ultimately means that I

00:12:46,579 --> 00:12:50,779
can run and build my containers exactly

00:12:49,040 --> 00:12:52,399
the same way so once i've converted it

00:12:50,779 --> 00:12:54,829
over from windows

00:12:52,399 --> 00:12:57,230
it is a docker file like any other and i

00:12:54,829 --> 00:12:59,750
can build it and run it just the same as

00:12:57,230 --> 00:13:04,490
I would a linux image and some gotchas

00:12:59,750 --> 00:13:06,529
for windows watch the path you build so

00:13:04,490 --> 00:13:08,000
when the windows will work a little bit

00:13:06,529 --> 00:13:09,529
differently when you're converting it so

00:13:08,000 --> 00:13:12,970
if you build those direct those paths

00:13:09,529 --> 00:13:14,350
your image will be unusable large

00:13:12,970 --> 00:13:15,639
I'm actually even not sure it will

00:13:14,350 --> 00:13:17,110
finish at this point I know that there's

00:13:15,639 --> 00:13:18,970
pull requests open hopefully some of

00:13:17,110 --> 00:13:20,560
them have been merged around preventing

00:13:18,970 --> 00:13:23,110
you explicitly from building some of

00:13:20,560 --> 00:13:25,209
those paths but be very careful what you

00:13:23,110 --> 00:13:28,509
build with Windows but you also have to

00:13:25,209 --> 00:13:30,370
be careful and how you install them so

00:13:28,509 --> 00:13:32,019
you have msi installations on windows

00:13:30,370 --> 00:13:34,540
that which helps you install an

00:13:32,019 --> 00:13:36,550
application and then on windows you also

00:13:34,540 --> 00:13:37,779
get a really way that when you you know

00:13:36,550 --> 00:13:39,490
how when you click it you can just

00:13:37,779 --> 00:13:41,850
uninstall it so there's like the

00:13:39,490 --> 00:13:44,019
installer on the uninstaller all at once

00:13:41,850 --> 00:13:45,339
this will come back to haunt you a

00:13:44,019 --> 00:13:46,629
little bit if you're installing them in

00:13:45,339 --> 00:13:49,990
container so if you install them with

00:13:46,629 --> 00:13:51,250
msi windows will save those files for

00:13:49,990 --> 00:13:53,410
instance for uninstalls

00:13:51,250 --> 00:13:55,360
which is how the magical uninstaller

00:13:53,410 --> 00:13:57,430
works which is great from a desktop not

00:13:55,360 --> 00:13:59,589
great in a container so we'll look at

00:13:57,430 --> 00:14:03,730
the at the trick in a second for for

00:13:59,589 --> 00:14:06,220
linux but in linux i can use the same

00:14:03,730 --> 00:14:08,319
step and have those those that those

00:14:06,220 --> 00:14:10,990
layers basically not committed so if I

00:14:08,319 --> 00:14:13,779
if I use if I install use and then

00:14:10,990 --> 00:14:16,930
remove a package on the same all in the

00:14:13,779 --> 00:14:18,790
same step at the package that I used and

00:14:16,930 --> 00:14:21,939
removed is not added to my final image

00:14:18,790 --> 00:14:24,430
size that trick does not work for MSI

00:14:21,939 --> 00:14:26,079
installations windows will hang on to

00:14:24,430 --> 00:14:29,680
the files we just sadface for everyone

00:14:26,079 --> 00:14:31,649
so not space-efficient so avoid them if

00:14:29,680 --> 00:14:34,930
you possibly can

00:14:31,649 --> 00:14:36,459
coming up soon and there are I forgot to

00:14:34,930 --> 00:14:38,050
link to them but there are many blog

00:14:36,459 --> 00:14:41,379
posts out there that are way better than

00:14:38,050 --> 00:14:43,569
my take on Windows I included one of

00:14:41,379 --> 00:14:45,879
them at the end but Arun Gopi uh speaks

00:14:43,569 --> 00:14:47,980
a lot about Java and windows and then

00:14:45,879 --> 00:14:51,850
Elton Stoneman who now works at docker

00:14:47,980 --> 00:14:54,490
came from Microsoft literally wrote the

00:14:51,850 --> 00:14:56,139
book which was a funny joke actually he

00:14:54,490 --> 00:14:58,839
actually wrote the book on on Windows

00:14:56,139 --> 00:15:00,129
containers on docker so if you're if

00:14:58,839 --> 00:15:01,600
you're moving you're wint your your

00:15:00,129 --> 00:15:03,699
Windows workloads over or if you're

00:15:01,600 --> 00:15:06,040
looking for some tips on and how to work

00:15:03,699 --> 00:15:09,189
with windows in docker maybe check out

00:15:06,040 --> 00:15:11,110
the book on it also so what's magical

00:15:09,189 --> 00:15:13,600
about running Windows containers as is

00:15:11,110 --> 00:15:15,879
on a Windows server so you build and run

00:15:13,600 --> 00:15:18,279
everything exactly the same regardless

00:15:15,879 --> 00:15:19,629
of the OS so it doesn't matter what your

00:15:18,279 --> 00:15:21,819
tools are it doesn't matter how you

00:15:19,629 --> 00:15:23,949
built it it's just docker build & docker

00:15:21,819 --> 00:15:25,209
run this is another gift that's not so

00:15:23,949 --> 00:15:26,320
magical in PowerPoint

00:15:25,209 --> 00:15:28,390
thanks PowerPoint

00:15:26,320 --> 00:15:32,080
anyone works in the PowerPoint team I

00:15:28,390 --> 00:15:33,340
have questions for you so this is he's

00:15:32,080 --> 00:15:35,860
usually saying magic

00:15:33,340 --> 00:15:37,660
so please envision this gif also in your

00:15:35,860 --> 00:15:40,780
head this is imagination hour with that

00:15:37,660 --> 00:15:42,310
before this is actually really powerful

00:15:40,780 --> 00:15:44,080
so it sounds kind of like well why is

00:15:42,310 --> 00:15:46,150
this person rattling on about Windows

00:15:44,080 --> 00:15:48,100
and Linux being the same this means that

00:15:46,150 --> 00:15:49,210
regardless of how I built it regardless

00:15:48,100 --> 00:15:51,520
of what language it's using what

00:15:49,210 --> 00:15:53,110
operating systems it's using what tools

00:15:51,520 --> 00:15:55,750
the guy sitting next to me wanted to use

00:15:53,110 --> 00:15:57,460
I can ship those little boxes exactly

00:15:55,750 --> 00:15:59,200
the same so from a DevOps point of view

00:15:57,460 --> 00:16:01,390
from an Operations point of view all I

00:15:59,200 --> 00:16:03,100
care about is those little boxes and how

00:16:01,390 --> 00:16:06,460
I can deploy them I don't have to care

00:16:03,100 --> 00:16:08,590
about whether team a wants to use

00:16:06,460 --> 00:16:10,240
Windows and team B wants to use Linux I

00:16:08,590 --> 00:16:13,480
can use the same tools to build and

00:16:10,240 --> 00:16:15,960
deploy those on my infrastructure so

00:16:13,480 --> 00:16:18,790
let's look at some more docker files

00:16:15,960 --> 00:16:21,490
this is the well this is not the biggest

00:16:18,790 --> 00:16:23,290
I could have made it for for the for my

00:16:21,490 --> 00:16:25,300
example purposes this is pretty big

00:16:23,290 --> 00:16:26,980
right and you can see why I'd write it

00:16:25,300 --> 00:16:28,600
this way so if I was just getting

00:16:26,980 --> 00:16:32,620
started or if I hadn't put much thought

00:16:28,600 --> 00:16:36,580
into optimizing this would have been

00:16:32,620 --> 00:16:39,580
fine so this builds by the way I ran my

00:16:36,580 --> 00:16:42,040
updates and then I installed I copied my

00:16:39,580 --> 00:16:44,530
app over I did some requirements I

00:16:42,040 --> 00:16:47,410
exposed my port and I ran my app so it

00:16:44,530 --> 00:16:48,790
is fine why is that not fine so I have

00:16:47,410 --> 00:16:51,280
two different run statements

00:16:48,790 --> 00:16:54,670
so once I've once I've hit run right

00:16:51,280 --> 00:16:57,970
Ivan validated my cache how could I make

00:16:54,670 --> 00:17:00,130
that just a little bit better so I'm

00:16:57,970 --> 00:17:03,220
chaining my run statements together so I

00:17:00,130 --> 00:17:05,079
update my packages I install them all in

00:17:03,220 --> 00:17:07,420
the same line so that means that my

00:17:05,079 --> 00:17:09,040
updates my installations they're all in

00:17:07,420 --> 00:17:12,250
the same place and then I added another

00:17:09,040 --> 00:17:14,050
flag so I always had people that come

00:17:12,250 --> 00:17:16,030
out up after me by the way to these that

00:17:14,050 --> 00:17:17,530
say did you know and then they list six

00:17:16,030 --> 00:17:19,480
more flags I know that there are other

00:17:17,530 --> 00:17:21,640
Flags I know that I did not include all

00:17:19,480 --> 00:17:22,930
of them I'm going to start submitting a

00:17:21,640 --> 00:17:24,579
talk just for those people and it's

00:17:22,930 --> 00:17:25,780
going to be one hour of command line

00:17:24,579 --> 00:17:27,490
flags and that's all we're gonna do

00:17:25,780 --> 00:17:29,350
we're just going to exhaustively talk

00:17:27,490 --> 00:17:31,120
about every cool command line flag that

00:17:29,350 --> 00:17:33,130
I can think of so I know that there are

00:17:31,120 --> 00:17:35,410
more and I know that other package

00:17:33,130 --> 00:17:38,410
managers also have a version of no

00:17:35,410 --> 00:17:39,880
install recommends thank you for letting

00:17:38,410 --> 00:17:41,020
me know feel free to tweet it

00:17:39,880 --> 00:17:44,470
to me if you think that I've forgotten

00:17:41,020 --> 00:17:46,150
one so nan saw recommend so for those of

00:17:44,470 --> 00:17:48,730
you that hasn't seen it means that when

00:17:46,150 --> 00:17:51,340
many cases your package manager will

00:17:48,730 --> 00:17:54,130
recommend extras for you that you

00:17:51,340 --> 00:17:55,840
think's you might need based on the

00:17:54,130 --> 00:17:57,970
package that you're installing so this

00:17:55,840 --> 00:17:59,650
is the pretty much the package Minh or

00:17:57,970 --> 00:18:01,600
manager equivalent that if I go to

00:17:59,650 --> 00:18:03,340
amazon.com and I buy a book it

00:18:01,600 --> 00:18:05,380
recommends me a million other books that

00:18:03,340 --> 00:18:07,780
I also might like and in a lot of cases

00:18:05,380 --> 00:18:09,730
I do like that but that's not space

00:18:07,780 --> 00:18:11,200
sufficient for my iPad either and it is

00:18:09,730 --> 00:18:14,410
not efficient for my docker containers

00:18:11,200 --> 00:18:16,090
so if I just to install the packages

00:18:14,410 --> 00:18:18,550
that I want it's now install recommends

00:18:16,090 --> 00:18:20,350
and by moving it to one line I saved

00:18:18,550 --> 00:18:24,010
myself a little bit of space in my final

00:18:20,350 --> 00:18:25,840
my final image this is the same one that

00:18:24,010 --> 00:18:28,840
we looked at before I can change my base

00:18:25,840 --> 00:18:30,640
and I can remove the the operating

00:18:28,840 --> 00:18:33,310
system kind of set up lines prepping it

00:18:30,640 --> 00:18:35,620
to run a Python application but I can

00:18:33,310 --> 00:18:37,330
make this better so I can write a custom

00:18:35,620 --> 00:18:41,020
based container so in real and a real

00:18:37,330 --> 00:18:42,400
production life not fake demo land this

00:18:41,020 --> 00:18:45,160
is probably what I'd want to do in a lot

00:18:42,400 --> 00:18:47,110
of cases so I built a custom base image

00:18:45,160 --> 00:18:49,120
maybe from a full operating system maybe

00:18:47,110 --> 00:18:51,310
from one of the minimal ones I installed

00:18:49,120 --> 00:18:52,660
a lot of the packages that I needed and

00:18:51,310 --> 00:18:54,550
now I don't need any other set up

00:18:52,660 --> 00:18:56,380
because I've done all this set up in my

00:18:54,550 --> 00:18:58,090
base image and you can go one step

00:18:56,380 --> 00:19:00,010
further and I could make this a shared

00:18:58,090 --> 00:19:01,480
base image so I could have several

00:19:00,010 --> 00:19:03,490
different containers build from that

00:19:01,480 --> 00:19:05,290
same base container so I would be a

00:19:03,490 --> 00:19:07,330
saving space and the final host as well

00:19:05,290 --> 00:19:09,100
because it has everything that I needed

00:19:07,330 --> 00:19:11,320
and I can just run the separate

00:19:09,100 --> 00:19:14,320
applications on top of that shared base

00:19:11,320 --> 00:19:16,150
container here's a more exaggerated

00:19:14,320 --> 00:19:19,360
example of using my run statements

00:19:16,150 --> 00:19:21,640
effectively but I can do everything plus

00:19:19,360 --> 00:19:23,350
the cleanup all in one statement that

00:19:21,640 --> 00:19:25,630
means that I'm pinning my versions as

00:19:23,350 --> 00:19:27,070
well also right so if I don't need a

00:19:25,630 --> 00:19:28,600
different version other than that I can

00:19:27,070 --> 00:19:30,460
pin it so it doesn't check for new one

00:19:28,600 --> 00:19:33,430
and I don't need to install the new one

00:19:30,460 --> 00:19:35,560
if the old one works which is fine or if

00:19:33,430 --> 00:19:38,140
the new one has a security vulnerability

00:19:35,560 --> 00:19:40,870
in it I can do that all in one line

00:19:38,140 --> 00:19:43,930
though to save space there are some

00:19:40,870 --> 00:19:47,830
unintended things that also will add

00:19:43,930 --> 00:19:51,059
layers to your final image so maybe less

00:19:47,830 --> 00:19:53,429
well-known one is user so we'll look

00:19:51,059 --> 00:19:55,740
it was nodejs but some languages will

00:19:53,429 --> 00:19:58,169
ship with that user for you already but

00:19:55,740 --> 00:19:59,460
in a lot of cases or most cases you

00:19:58,169 --> 00:20:01,289
don't necessarily although you might

00:19:59,460 --> 00:20:02,519
need to install things as route you

00:20:01,289 --> 00:20:03,600
don't actually want to run your

00:20:02,519 --> 00:20:07,559
application as rude

00:20:03,600 --> 00:20:08,639
that's if there was a DevOps school or

00:20:07,559 --> 00:20:11,940
something I'm sure that we would talk

00:20:08,639 --> 00:20:14,820
about that but everyone everyone finds

00:20:11,940 --> 00:20:16,440
it out at work the old-fashioned way but

00:20:14,820 --> 00:20:18,149
mostly you don't want to run your actual

00:20:16,440 --> 00:20:20,159
application is route so if you're

00:20:18,149 --> 00:20:23,159
switching operations between different

00:20:20,159 --> 00:20:24,809
users this commits a layer to the final

00:20:23,159 --> 00:20:27,259
layer so every time you switch that user

00:20:24,809 --> 00:20:29,970
it adds another layer to your stack so

00:20:27,259 --> 00:20:31,470
in real life what you'd want to do is

00:20:29,970 --> 00:20:34,350
anything that you need to do is route

00:20:31,470 --> 00:20:35,999
you do first and then you don't you only

00:20:34,350 --> 00:20:38,639
have to switch once so you don't have to

00:20:35,999 --> 00:20:39,779
switch from root to user to root make

00:20:38,639 --> 00:20:41,100
sure that you're installing things in

00:20:39,779 --> 00:20:43,679
the right order so that everything is

00:20:41,100 --> 00:20:46,110
grouped together by not only the right

00:20:43,679 --> 00:20:48,210
order but in with the by the user that

00:20:46,110 --> 00:20:49,169
you want to run the operation s so if

00:20:48,210 --> 00:20:52,409
it's something like nodejs

00:20:49,169 --> 00:20:54,929
use the node user that comes with that

00:20:52,409 --> 00:20:57,450
official image but you can just switch

00:20:54,929 --> 00:21:00,360
and then leave it once you've once you

00:20:57,450 --> 00:21:02,639
need it to switch the same goes for for

00:21:00,360 --> 00:21:06,499
adding for adding large files right so

00:21:02,639 --> 00:21:10,830
this is a really dramatic bad example

00:21:06,499 --> 00:21:13,559
nothing if not dramatic so I added my

00:21:10,830 --> 00:21:16,259
big file I ran some install stuff and

00:21:13,559 --> 00:21:19,889
then I ran make do not try that at home

00:21:16,259 --> 00:21:21,149
that will take forever what could be a

00:21:19,889 --> 00:21:22,350
little bit better than this well that's

00:21:21,149 --> 00:21:24,299
not a real file so I want to actually

00:21:22,350 --> 00:21:26,460
take forever but this is like the least

00:21:24,299 --> 00:21:27,899
efficient way to do it I could do it a

00:21:26,460 --> 00:21:32,070
little bit better and I could do

00:21:27,899 --> 00:21:35,039
everything all in one line but it's not

00:21:32,070 --> 00:21:37,320
the best now I can do everything in one

00:21:35,039 --> 00:21:39,029
line but also I'm removing the zipped

00:21:37,320 --> 00:21:40,950
version that I downloaded so we know

00:21:39,029 --> 00:21:43,379
that when we download a via a file and I

00:21:40,950 --> 00:21:45,690
unzip it I keep the original compressed

00:21:43,379 --> 00:21:47,639
FERS compressed version and then also

00:21:45,690 --> 00:21:50,429
the second unzipped directory which is

00:21:47,639 --> 00:21:52,590
the contents of that zipped file I can

00:21:50,429 --> 00:21:54,269
remove that zipped version so the

00:21:52,590 --> 00:21:56,190
charred version I can remove that in the

00:21:54,269 --> 00:21:58,080
same line and then I'm not committing

00:21:56,190 --> 00:22:00,400
that zipped file that I don't even need

00:21:58,080 --> 00:22:02,320
anymore to the final size of my image

00:22:00,400 --> 00:22:04,990
so we'll talk about garbage collection

00:22:02,320 --> 00:22:06,789
in a little bit but clean up your mess

00:22:04,990 --> 00:22:08,320
so if you're downloading a file and

00:22:06,789 --> 00:22:09,820
you're using that file get rid of it

00:22:08,320 --> 00:22:12,039
if you're downloading a file and then

00:22:09,820 --> 00:22:14,440
using it to populate something else get

00:22:12,039 --> 00:22:15,760
rid of the file but you can do

00:22:14,440 --> 00:22:17,049
everything all in one line so that it

00:22:15,760 --> 00:22:20,770
doesn't commit back to the final image

00:22:17,049 --> 00:22:24,250
size a couple of really lightning

00:22:20,770 --> 00:22:26,650
language examples so if you stop paying

00:22:24,250 --> 00:22:28,570
attention right now here is the TLDR

00:22:26,650 --> 00:22:30,370
what we're talking about right so use

00:22:28,570 --> 00:22:32,320
the right tool so not every language

00:22:30,370 --> 00:22:34,450
will build the same way so just because

00:22:32,320 --> 00:22:36,520
I built something one way and Boas is

00:22:34,450 --> 00:22:38,020
using a different language he does not

00:22:36,520 --> 00:22:39,400
have to build it the same way right we

00:22:38,020 --> 00:22:41,080
talked about why that's cool because I

00:22:39,400 --> 00:22:43,210
can just drop those little boxes and

00:22:41,080 --> 00:22:45,220
deploy them the same way I use the right

00:22:43,210 --> 00:22:48,010
tools because it ultimately once you've

00:22:45,220 --> 00:22:49,780
built it it doesn't matter we'll look at

00:22:48,010 --> 00:22:52,030
more examples but where possible I can

00:22:49,780 --> 00:22:53,890
use two base images well two images so

00:22:52,030 --> 00:22:56,200
one to build the artifact and then a

00:22:53,890 --> 00:22:58,690
really lightweight one just to run just

00:22:56,200 --> 00:23:00,510
to run it and then official languages

00:22:58,690 --> 00:23:03,610
can be really big for good reasons

00:23:00,510 --> 00:23:06,190
so more spec a space effective but

00:23:03,610 --> 00:23:08,080
possibly less time effective to use a

00:23:06,190 --> 00:23:09,970
smaller image and then do a little extra

00:23:08,080 --> 00:23:13,419
work to get it up to where you need it

00:23:09,970 --> 00:23:16,630
to be so there are some very small

00:23:13,419 --> 00:23:18,130
examples here for everyone this does not

00:23:16,630 --> 00:23:19,390
constitute a real-world production

00:23:18,130 --> 00:23:21,130
experience by the way these are just

00:23:19,390 --> 00:23:23,980
examples so if you're actually doing

00:23:21,130 --> 00:23:25,450
this at work these are some tips that

00:23:23,980 --> 00:23:29,559
might help you but they are not an

00:23:25,450 --> 00:23:31,390
exhaustive resource so for every example

00:23:29,559 --> 00:23:33,130
that I've done there's a blog post or

00:23:31,390 --> 00:23:35,080
something out there by someone that runs

00:23:33,130 --> 00:23:36,610
this language in production so

00:23:35,080 --> 00:23:39,669
definitely do a little bit more reading

00:23:36,610 --> 00:23:41,530
on it also for goaline though I can I

00:23:39,669 --> 00:23:44,350
can run this in two steps right so I can

00:23:41,530 --> 00:23:47,650
do my my go build step and I can build

00:23:44,350 --> 00:23:49,600
my final my file from that and then I

00:23:47,650 --> 00:23:53,140
can run just that art that the binary

00:23:49,600 --> 00:23:55,510
that artifact and another really we'll

00:23:53,140 --> 00:23:58,090
talk about what scratches but in a very

00:23:55,510 --> 00:23:59,230
lightweight image so all I need to do

00:23:58,090 --> 00:24:00,909
doesn't need a tool chain right because

00:23:59,230 --> 00:24:02,530
it's not building I've already built the

00:24:00,909 --> 00:24:02,799
artifact now I can just run it somewhere

00:24:02,530 --> 00:24:05,110
else

00:24:02,799 --> 00:24:07,830
also I couldn't leave out go line

00:24:05,110 --> 00:24:11,310
because the Gophers are really cute

00:24:07,830 --> 00:24:12,630
if you've never but yep if you've never

00:24:11,310 --> 00:24:14,850
worked with scratch before it's a

00:24:12,630 --> 00:24:16,140
special empty docker file included a

00:24:14,850 --> 00:24:16,770
link to learn about it it's actually

00:24:16,140 --> 00:24:18,540
really cool

00:24:16,770 --> 00:24:20,640
it has nothing in it it's basically a

00:24:18,540 --> 00:24:23,580
special command that says I'm empty and

00:24:20,640 --> 00:24:27,000
you can use it is either a minimal image

00:24:23,580 --> 00:24:29,190
or just to run a binary it's actually

00:24:27,000 --> 00:24:31,200
really interesting so definitely check

00:24:29,190 --> 00:24:33,540
into it if you want to run binaries that

00:24:31,200 --> 00:24:35,310
you've built in other ones we already

00:24:33,540 --> 00:24:37,980
talked about Ruby so this is the same

00:24:35,310 --> 00:24:39,390
this is just an example of it they're

00:24:37,980 --> 00:24:41,640
really huge because all the extra gems

00:24:39,390 --> 00:24:43,440
you can use a minimal image but you'll

00:24:41,640 --> 00:24:45,690
have to install all the supporting gems

00:24:43,440 --> 00:24:46,950
that you need which in Ruby world means

00:24:45,690 --> 00:24:48,240
that I'll have to keep trying to build

00:24:46,950 --> 00:24:50,010
it over and over and over again and

00:24:48,240 --> 00:24:52,110
looking at the gem ear until I figure

00:24:50,010 --> 00:24:55,920
out what magical missing mystery gem it

00:24:52,110 --> 00:24:59,430
is we already talked about the the user

00:24:55,920 --> 00:25:01,290
part of the official node images but you

00:24:59,430 --> 00:25:04,350
can also dock or ignore things just like

00:25:01,290 --> 00:25:06,360
you can get ignore so you can ignore

00:25:04,350 --> 00:25:08,910
your NPM debug log which will turn out

00:25:06,360 --> 00:25:11,190
to be secretly really large and wasting

00:25:08,910 --> 00:25:12,780
you a lot of time in space but you can

00:25:11,190 --> 00:25:15,360
also cache or know much mote node

00:25:12,780 --> 00:25:17,100
modules so the same way that we could

00:25:15,360 --> 00:25:19,980
cache our requirements in the Python app

00:25:17,100 --> 00:25:21,840
I can copy over my package out json

00:25:19,980 --> 00:25:25,500
first so that i only run it if the

00:25:21,840 --> 00:25:27,690
contents of that file have changed so

00:25:25,500 --> 00:25:30,420
java this one in the next slide are both

00:25:27,690 --> 00:25:32,730
on multi stage builds so i can run these

00:25:30,420 --> 00:25:35,220
in two different pieces so i can do i

00:25:32,730 --> 00:25:37,320
can build my artifact in one step and

00:25:35,220 --> 00:25:39,870
then run only the binary in the second

00:25:37,320 --> 00:25:42,000
stage so it makes a more minimal image

00:25:39,870 --> 00:25:43,620
because i've moved all of my build steps

00:25:42,000 --> 00:25:45,420
all of my tool chain steps out to the

00:25:43,620 --> 00:25:47,640
first one so that's extra great for

00:25:45,420 --> 00:25:50,010
things like java you usually build with

00:25:47,640 --> 00:25:52,110
like a spring or a maven those are very

00:25:50,010 --> 00:25:54,290
large but i can move all that to the

00:25:52,110 --> 00:25:57,090
first part and then just run the result

00:25:54,290 --> 00:25:58,800
more on multi stage builds you can i

00:25:57,090 --> 00:26:01,440
included some links at the end by the

00:25:58,800 --> 00:26:02,700
way to the whatever we've covered in

00:26:01,440 --> 00:26:04,920
here that you'd like to research some

00:26:02,700 --> 00:26:08,060
more about multi stage builds can be

00:26:04,920 --> 00:26:12,900
really great for things like java Rogow

00:26:08,060 --> 00:26:14,910
my last thing up we're on tools so how

00:26:12,900 --> 00:26:16,020
can you but mostly me do less work which

00:26:14,910 --> 00:26:18,130
i'm pretty sure is called thought

00:26:16,020 --> 00:26:19,630
leadership so

00:26:18,130 --> 00:26:22,290
this is not an actual tweet by the way I

00:26:19,630 --> 00:26:25,090
think this but it is thought leadership

00:26:22,290 --> 00:26:26,770
but how can you do less work and the

00:26:25,090 --> 00:26:28,750
answer and a lot of cases tools and I

00:26:26,770 --> 00:26:30,880
know that there are a lot of tools so

00:26:28,750 --> 00:26:33,550
it's really a case of picking the right

00:26:30,880 --> 00:26:35,440
tools so you have something called

00:26:33,550 --> 00:26:37,480
docker security scan which will skin

00:26:35,440 --> 00:26:39,310
images up on docker hub you can use this

00:26:37,480 --> 00:26:41,920
privately but it also works for official

00:26:39,310 --> 00:26:43,420
ones where you can basically check and

00:26:41,920 --> 00:26:46,420
see if the image that you're using has

00:26:43,420 --> 00:26:49,180
vulnerabilities so spoiler alert a lot

00:26:46,420 --> 00:26:50,230
of them do so use responsibly download

00:26:49,180 --> 00:26:54,700
strange things from the Internet

00:26:50,230 --> 00:26:57,100
responsibly imaging system prune image

00:26:54,700 --> 00:27:00,730
will remove unused images system prune

00:26:57,100 --> 00:27:03,310
will also remove unused volumes so clean

00:27:00,730 --> 00:27:07,570
up after yourself but that also includes

00:27:03,310 --> 00:27:08,980
garbage collection so beyond image and

00:27:07,570 --> 00:27:10,630
system prune there are tools that you

00:27:08,980 --> 00:27:12,400
can run to help make sure that all of

00:27:10,630 --> 00:27:14,620
your unused images aren't just sitting

00:27:12,400 --> 00:27:16,540
along after all of your builds taking up

00:27:14,620 --> 00:27:18,160
all of your hosts and there's some good

00:27:16,540 --> 00:27:20,590
third-party ones out there too so

00:27:18,160 --> 00:27:23,230
Spotify GC is one of them if you're from

00:27:20,590 --> 00:27:26,590
Spotify and you wrote Spotify GC you're

00:27:23,230 --> 00:27:30,690
awesome so looking forward to the future

00:27:26,590 --> 00:27:33,820
there's always more people people do

00:27:30,690 --> 00:27:35,830
make lots of people like talking about

00:27:33,820 --> 00:27:37,060
this is so there's lots of blog posts

00:27:35,830 --> 00:27:39,520
out there people are making their

00:27:37,060 --> 00:27:42,940
minimal images even more minimal all the

00:27:39,520 --> 00:27:45,310
time so what did we learn here right so

00:27:42,940 --> 00:27:47,160
if you have one takeaway it's less

00:27:45,310 --> 00:27:50,920
nervous more so share them or you can

00:27:47,160 --> 00:27:52,000
choose and build it wisely build all of

00:27:50,920 --> 00:27:54,880
your languages the way that they should

00:27:52,000 --> 00:27:57,340
be built and not just the same way keep

00:27:54,880 --> 00:27:59,800
it simple and then some tools but only

00:27:57,340 --> 00:28:02,770
the right ones are here to help as

00:27:59,800 --> 00:28:04,210
promised we are out of time I've

00:28:02,770 --> 00:28:06,010
included the useful links so when the

00:28:04,210 --> 00:28:08,980
deck goes up either through dev ops days

00:28:06,010 --> 00:28:12,960
tel-aviv or through me you can read at

00:28:08,980 --> 00:28:12,960
your leisure and thank you for listening

00:28:13,720 --> 00:28:17,279
you

00:28:14,180 --> 00:28:17,279

YouTube URL: https://www.youtube.com/watch?v=wnyljiZ1LNw


