Title: Hold my beer while I try to DevOps with DICOM, HIPAA and Hospitals - Gil Bahat - DevOpsDays Tel Aviv
Publication date: 2017-11-28
Playlist: DevOpsDays Tel Aviv 2017
Description: 
	Doing Devops in a regulated, old-protocol and cloud-opposed mindset DevOps is taking the world by storm. or most of it. but can you apply its principals to environments which stake the odds as much as possible against it? This talk will be about trying to do DevOps in environments which are: * Regulated - how to maintain compliance in the face of rapid changes. we’re going to discuss which regulation hurts the most, in what way, and what is the best way to handle the situation. * Old protocols - how do you manage when you don’t have nearly as much ready-made tooling. what’s important to build yourself, what you can adapt and reuse and how to best identify and fill the gaps. * Cloud-opposed mindset - how do you make the cloud appear friendly and familiar to those who shun it. how to alleviate concerns of security and performance from a service.
Captions: 
	00:00:05,450 --> 00:00:12,330
okay so first a little bit about me so

00:00:08,840 --> 00:00:15,150
my tagline is that I like to solve hard

00:00:12,330 --> 00:00:16,800
problems let's hold my beer these are my

00:00:15,150 --> 00:00:19,140
social links and I'm currently working

00:00:16,800 --> 00:00:21,650
as an independent DevOps consultant so

00:00:19,140 --> 00:00:25,080
you can find me like random places No

00:00:21,650 --> 00:00:27,779
and okay the disclaimer a quick

00:00:25,080 --> 00:00:30,800
disclaimer that you know DevOps is like

00:00:27,779 --> 00:00:33,300
loaded term everybody's trying to

00:00:30,800 --> 00:00:35,329
utilize it for their own ends

00:00:33,300 --> 00:00:38,610
we're generally going to sidestep that

00:00:35,329 --> 00:00:41,010
we have a complex task to deal with

00:00:38,610 --> 00:00:43,770
anyway so we're not going to be nitpicky

00:00:41,010 --> 00:00:47,250
about this is DevOps this isn't DevOps

00:00:43,770 --> 00:00:49,710
and so forth we have a beast to tame so

00:00:47,250 --> 00:00:52,949
to speak so we're gonna have a two part

00:00:49,710 --> 00:00:54,210
lecture if time permits so the first

00:00:52,949 --> 00:00:58,170
thing we're going to talk about is a

00:00:54,210 --> 00:01:01,050
protocol called daikon so it's one of

00:00:58,170 --> 00:01:03,960
the two major healthcare protocols the

00:01:01,050 --> 00:01:06,390
other one is called hl7 and the

00:01:03,960 --> 00:01:08,400
interesting thing about that daikon is

00:01:06,390 --> 00:01:11,400
well you're not going to deal with DICOM

00:01:08,400 --> 00:01:13,290
less you're in the very small healthcare

00:01:11,400 --> 00:01:15,869
market you're never gonna see DICOM at

00:01:13,290 --> 00:01:18,420
least I never heard of it until I

00:01:15,869 --> 00:01:21,150
started doing healthcare but it serves

00:01:18,420 --> 00:01:23,700
like a great example of onboarding a new

00:01:21,150 --> 00:01:25,259
protocol you suddenly got into a company

00:01:23,700 --> 00:01:27,689
and then they're doing things somewhat

00:01:25,259 --> 00:01:32,909
differently so how do you handle such a

00:01:27,689 --> 00:01:34,170
a bomb being left at your desk and the

00:01:32,909 --> 00:01:36,150
other thing we're going to talk about is

00:01:34,170 --> 00:01:38,450
regulations regulations are the other

00:01:36,150 --> 00:01:41,930
bomb that they're leaving next to your

00:01:38,450 --> 00:01:45,000
desk is how to deal with all these

00:01:41,930 --> 00:01:46,979
papers that are being lumped on your

00:01:45,000 --> 00:01:49,229
table and by the way that also works for

00:01:46,979 --> 00:01:52,290
DICOM because the standard is over a

00:01:49,229 --> 00:01:54,180
thousand pages it's designed by

00:01:52,290 --> 00:01:56,009
committee it's pretty much horrible but

00:01:54,180 --> 00:01:58,320
again even if you're not doing HIPAA or

00:01:56,009 --> 00:02:00,540
other respective regulations as long as

00:01:58,320 --> 00:02:04,810
you're in a regulatory environment that

00:02:00,540 --> 00:02:09,890
might be you know interesting for you

00:02:04,810 --> 00:02:11,630
no most definitely not gene okay so like

00:02:09,890 --> 00:02:13,820
I said the motivation of doing something

00:02:11,630 --> 00:02:17,480
like DICOM is learning how to handle a

00:02:13,820 --> 00:02:21,800
non HTTP protocol and you know the more

00:02:17,480 --> 00:02:23,690
like the the new neuro Age HTTP is used

00:02:21,800 --> 00:02:26,120
for everything the Internet used to be

00:02:23,690 --> 00:02:28,640
full of random protocols from a protocol

00:02:26,120 --> 00:02:30,200
for character generation and just tell

00:02:28,640 --> 00:02:32,560
it into a part is wrong random

00:02:30,200 --> 00:02:34,640
characters at you we're kind of

00:02:32,560 --> 00:02:37,580
consolidated into a few leading

00:02:34,640 --> 00:02:40,040
protocols you know it is less rich in

00:02:37,580 --> 00:02:42,500
that sense at least from what it used to

00:02:40,040 --> 00:02:44,780
be so here's our game plan first we're

00:02:42,500 --> 00:02:47,210
going to understand what is this daikon

00:02:44,780 --> 00:02:49,550
thing once it's used for why does it

00:02:47,210 --> 00:02:52,130
exist at all maybe even understand some

00:02:49,550 --> 00:02:54,020
of its philosophy a bit of the basics on

00:02:52,130 --> 00:02:55,700
its philosophy next thing we're gonna do

00:02:54,020 --> 00:02:58,160
we're gonna scope its usage in the

00:02:55,700 --> 00:03:00,110
system it's probably not going to be or

00:02:58,160 --> 00:03:02,570
at least if we can make it as pervasive

00:03:00,110 --> 00:03:05,060
or totally inclusive or see where

00:03:02,570 --> 00:03:08,570
exactly it fits and trying to stick with

00:03:05,060 --> 00:03:10,310
that as much as possible and now after

00:03:08,570 --> 00:03:14,030
we've done that we're gonna analyze some

00:03:10,310 --> 00:03:15,800
of its key features and see how they how

00:03:14,030 --> 00:03:18,050
they're if they're useful for us if they

00:03:15,800 --> 00:03:20,900
hamper our goals and so forth and then

00:03:18,050 --> 00:03:22,959
see how we can realize them okay let's

00:03:20,900 --> 00:03:25,280
get started so daikon stands for digital

00:03:22,959 --> 00:03:27,590
imaging and communication in medicine

00:03:25,280 --> 00:03:29,570
it's not just a wire protocol by the way

00:03:27,590 --> 00:03:30,890
it's also a serialization standards you

00:03:29,570 --> 00:03:33,260
have daikon files

00:03:30,890 --> 00:03:35,690
it sets exactly what's written in the

00:03:33,260 --> 00:03:39,380
file and it's designed by a body called

00:03:35,690 --> 00:03:41,090
NEMA which is a national something of

00:03:39,380 --> 00:03:42,890
the electronics manufacturer not

00:03:41,090 --> 00:03:44,750
electronics manufacturers Association

00:03:42,890 --> 00:03:47,390
the committee that designed this

00:03:44,750 --> 00:03:49,670
protocol they're doing embedded machines

00:03:47,390 --> 00:03:51,980
they're doing the cities the x-rays the

00:03:49,670 --> 00:03:53,150
ultrasounds is also there there's the

00:03:51,980 --> 00:03:56,209
industry term for that it's called a

00:03:53,150 --> 00:03:58,280
modality and they have a design

00:03:56,209 --> 00:04:00,410
philosophy which says be conservative

00:03:58,280 --> 00:04:02,600
with what you send and liberal with what

00:04:00,410 --> 00:04:04,880
you accept that's basically that's

00:04:02,600 --> 00:04:07,600
that's Anna dodge from the old times of

00:04:04,880 --> 00:04:09,800
the internet which helped foster

00:04:07,600 --> 00:04:12,380
interworking because unless you have

00:04:09,800 --> 00:04:14,269
that design philosophy it's very hard

00:04:12,380 --> 00:04:16,609
for devices to end to work together with

00:04:14,269 --> 00:04:18,020
each other and even so you get lots and

00:04:16,609 --> 00:04:20,310
lots of

00:04:18,020 --> 00:04:22,770
things that don't work together as

00:04:20,310 --> 00:04:25,080
they're expected so that was trying to

00:04:22,770 --> 00:04:27,000
save the day and let's say that it

00:04:25,080 --> 00:04:29,400
helped it would have been much worse

00:04:27,000 --> 00:04:32,160
without it but it's not a silver bullet

00:04:29,400 --> 00:04:34,110
by far so and like I said it's also

00:04:32,160 --> 00:04:37,290
since it's a very specialized protocol

00:04:34,110 --> 00:04:39,480
you don't see many implementations if in

00:04:37,290 --> 00:04:43,710
the keynote we saw this like huge

00:04:39,480 --> 00:04:46,680
roadmap of the all the software that you

00:04:43,710 --> 00:04:49,080
can use in DICOM I think when it comes

00:04:46,680 --> 00:04:53,100
to SDKs you have a grand total of maybe

00:04:49,080 --> 00:04:56,070
seven or eight useful active projects

00:04:53,100 --> 00:04:59,820
and maybe one or two demons so it's a

00:04:56,070 --> 00:05:01,680
problem yeah that's what the slide is

00:04:59,820 --> 00:05:03,930
about few implementation means trouble

00:05:01,680 --> 00:05:06,390
because when I have a challenge I have a

00:05:03,930 --> 00:05:08,970
lot a lot less stuff to pick from and

00:05:06,390 --> 00:05:11,100
I'm going to have to make choices that I

00:05:08,970 --> 00:05:13,590
don't like and see if I can work around

00:05:11,100 --> 00:05:15,810
them or at least that's what seems like

00:05:13,590 --> 00:05:17,970
and otherwise would also have to

00:05:15,810 --> 00:05:20,130
reinvent the wheel which is something

00:05:17,970 --> 00:05:21,900
everybody hates especially when it comes

00:05:20,130 --> 00:05:24,210
to the DevOps culture you don't reinvent

00:05:21,900 --> 00:05:26,520
the wheel you don't deploy your own

00:05:24,210 --> 00:05:30,030
hardware if you don't have to you go to

00:05:26,520 --> 00:05:32,310
the cloud you don't create your own tool

00:05:30,030 --> 00:05:34,410
chain from scratch UCI servers and so

00:05:32,310 --> 00:05:37,770
forth we're gonna have to do some things

00:05:34,410 --> 00:05:40,350
or hopefully not from scratch at all but

00:05:37,770 --> 00:05:43,530
at least we'll have to do some legwork

00:05:40,350 --> 00:05:45,150
and also it comes when it comes to that

00:05:43,530 --> 00:05:46,560
the auxilary components that were used

00:05:45,150 --> 00:05:50,250
to are generally missing as well

00:05:46,560 --> 00:05:53,040
there's no balancing monitoring utility

00:05:50,250 --> 00:05:56,550
scripts it's mostly all missing from it

00:05:53,040 --> 00:06:00,930
from our environment again for the exact

00:05:56,550 --> 00:06:02,670
same reasons okay so scoping what are we

00:06:00,930 --> 00:06:05,880
going to do with this daikon daikon is

00:06:02,670 --> 00:06:08,610
the protocol that the city is using so

00:06:05,880 --> 00:06:10,560
hopefully or what we plan to do is just

00:06:08,610 --> 00:06:14,550
use this diagram to ship it into our

00:06:10,560 --> 00:06:17,430
cloud and then not see the daikon wire

00:06:14,550 --> 00:06:19,560
protocol hopefully because we we don't

00:06:17,430 --> 00:06:22,170
like it once we've stored the daikon

00:06:19,560 --> 00:06:25,260
files in s3 we're probably start to use

00:06:22,170 --> 00:06:27,660
more sane protocols as permits but when

00:06:25,260 --> 00:06:29,880
it comes to the serialization format

00:06:27,660 --> 00:06:30,840
we're actually bound by two equally bad

00:06:29,880 --> 00:06:32,910
choices

00:06:30,840 --> 00:06:34,680
either weekend deserialized icon and

00:06:32,910 --> 00:06:37,560
then the errors would propagate through

00:06:34,680 --> 00:06:39,300
our stack or we can deceive or we can

00:06:37,560 --> 00:06:41,400
deserialize every time we need it you

00:06:39,300 --> 00:06:42,720
save the DICOM serialized format and

00:06:41,400 --> 00:06:45,090
then still errors would propagate

00:06:42,720 --> 00:06:48,870
through our stack but in a different way

00:06:45,090 --> 00:06:51,389
so it's we're stuck with that it's a

00:06:48,870 --> 00:06:53,280
complex protocol and even with we be

00:06:51,389 --> 00:06:55,290
serialize it it's probably not going to

00:06:53,280 --> 00:06:59,520
help us much okay

00:06:55,290 --> 00:07:00,930
the protocol is binary it's actually

00:06:59,520 --> 00:07:03,630
it's more like a semi binary you can

00:07:00,930 --> 00:07:06,990
find some text in it and it often is the

00:07:03,630 --> 00:07:08,700
full o si model over tcp/ip now if any

00:07:06,990 --> 00:07:10,710
of you remember studied computer theory

00:07:08,700 --> 00:07:13,229
all sides like the full seven layer

00:07:10,710 --> 00:07:14,820
model with a presentation there now in

00:07:13,229 --> 00:07:17,340
biology there's a nice term for that

00:07:14,820 --> 00:07:19,530
they call it a living fossil it's

00:07:17,340 --> 00:07:21,900
something that's whose only neighbors

00:07:19,530 --> 00:07:24,330
are identified as fossils

00:07:21,900 --> 00:07:26,550
now this protocol says I'm compliant

00:07:24,330 --> 00:07:29,400
with our side but all the other OSI

00:07:26,550 --> 00:07:32,250
protocol just totally gone so it's kind

00:07:29,400 --> 00:07:35,460
of stupid to have that compliance

00:07:32,250 --> 00:07:37,680
statement by now so like I said it's

00:07:35,460 --> 00:07:41,400
more like a fossil and it's strictly

00:07:37,680 --> 00:07:44,070
regulated also there are in do meringue

00:07:41,400 --> 00:07:45,539
they are reserved you have to set them

00:07:44,070 --> 00:07:50,039
you have to set them in very specific

00:07:45,539 --> 00:07:52,139
ways pretty annoying but we are at least

00:07:50,039 --> 00:07:54,530
seemingly we don't have to care much for

00:07:52,139 --> 00:07:56,789
that because well from the DevOps

00:07:54,530 --> 00:08:00,419
perspective we need to make it scalable

00:07:56,789 --> 00:08:05,700
we need to make it secure and we need to

00:08:00,419 --> 00:08:09,080
make it work so maybe we can forego much

00:08:05,700 --> 00:08:11,340
of that and have stuff work so let's see

00:08:09,080 --> 00:08:13,440
features that we care about now this

00:08:11,340 --> 00:08:15,840
these four slot next four slides are

00:08:13,440 --> 00:08:19,410
going to be a distillation of hundreds

00:08:15,840 --> 00:08:22,169
of pages so even though it's a bit might

00:08:19,410 --> 00:08:23,910
be a bit hard to keep up with that's the

00:08:22,169 --> 00:08:25,740
best I could do I guess okay the

00:08:23,910 --> 00:08:27,330
terminology for client and server

00:08:25,740 --> 00:08:28,919
there's one called scu which is

00:08:27,330 --> 00:08:31,050
basically the current and SCP is the

00:08:28,919 --> 00:08:33,209
server and the client controls the

00:08:31,050 --> 00:08:34,919
connection the client is the one making

00:08:33,209 --> 00:08:38,130
the requests and the server

00:08:34,919 --> 00:08:41,039
answers so it's like a unix in that for

00:08:38,130 --> 00:08:43,320
the server can't initiate requests on

00:08:41,039 --> 00:08:47,310
its own behalf only in certain can

00:08:43,320 --> 00:08:50,190
which are not part of our scenario

00:08:47,310 --> 00:08:52,980
basically and the commands can be made a

00:08:50,190 --> 00:08:54,930
synchronous there is support in the Perl

00:08:52,980 --> 00:08:57,030
for a single suffering a synchronous

00:08:54,930 --> 00:08:59,070
operations which is important because we

00:08:57,030 --> 00:09:02,090
don't want to do to have to do all the

00:08:59,070 --> 00:09:04,290
ping pong again you send the request

00:09:02,090 --> 00:09:07,880
hopefully you can still send another

00:09:04,290 --> 00:09:10,350
while you're waiting for the reply and

00:09:07,880 --> 00:09:12,350
but it's option it's optional is it

00:09:10,350 --> 00:09:14,670
negotiated during the connection

00:09:12,350 --> 00:09:18,170
creation that's what the standard says

00:09:14,670 --> 00:09:21,210
and okay the commands the command set is

00:09:18,170 --> 00:09:22,590
trying to maybe rush to that we're going

00:09:21,210 --> 00:09:25,080
to we're not going to use the end

00:09:22,590 --> 00:09:27,030
commands there these are the commands

00:09:25,080 --> 00:09:29,340
there's associate release the

00:09:27,030 --> 00:09:30,780
Association abort the Association which

00:09:29,340 --> 00:09:34,710
is the only way only commanded the

00:09:30,780 --> 00:09:37,380
servants still issue and let's say the

00:09:34,710 --> 00:09:39,930
vocabulary is very simple you can send a

00:09:37,380 --> 00:09:42,810
store command I want to store a slice or

00:09:39,930 --> 00:09:44,280
single image I want to find an image I

00:09:42,810 --> 00:09:47,040
want to move an image between two

00:09:44,280 --> 00:09:48,660
devices that's it I want to get an image

00:09:47,040 --> 00:09:51,690
and there's an echo there's still a

00:09:48,660 --> 00:09:54,600
built-in echo service and the data may

00:09:51,690 --> 00:09:56,520
be fragmented over messages and all

00:09:54,600 --> 00:09:58,170
messages have unique IDs and are all

00:09:56,520 --> 00:09:59,760
acknowledged even if it's a synchronous

00:09:58,170 --> 00:10:02,670
there must still be acknowledgment

00:09:59,760 --> 00:10:06,450
there's no multiple acknowledgments it's

00:10:02,670 --> 00:10:09,990
doesn't look as so efficient but being a

00:10:06,450 --> 00:10:12,240
synchronous it might still be good we

00:10:09,990 --> 00:10:18,740
can pipeline when multiplexing if

00:10:12,240 --> 00:10:20,820
negotiated during the connection so and

00:10:18,740 --> 00:10:22,860
since we're dealing with okay we're

00:10:20,820 --> 00:10:25,500
dealing with something called studies

00:10:22,860 --> 00:10:27,630
that is we're dealing with series of

00:10:25,500 --> 00:10:29,910
images you don't just send a single CT

00:10:27,630 --> 00:10:33,330
image you usually send the series of

00:10:29,910 --> 00:10:36,420
them they don't come as single images

00:10:33,330 --> 00:10:38,730
for the most part you want to see

00:10:36,420 --> 00:10:40,530
something from another angle the CT

00:10:38,730 --> 00:10:42,540
machine goes like this and then just

00:10:40,530 --> 00:10:44,970
give slice slice slice slice slice and

00:10:42,540 --> 00:10:48,330
then you get a good view of what's

00:10:44,970 --> 00:10:49,860
happening and another observation is

00:10:48,330 --> 00:10:52,110
that if we keep the long term

00:10:49,860 --> 00:10:54,120
established connections we have to plan

00:10:52,110 --> 00:10:56,639
our load balancing more carefully we

00:10:54,120 --> 00:10:58,679
have to look at the connections as the

00:10:56,639 --> 00:11:01,170
as they build up because when there's an

00:10:58,679 --> 00:11:04,079
active connection if we still go with

00:11:01,170 --> 00:11:09,269
this way it might just burst in to start

00:11:04,079 --> 00:11:12,929
sending us thousands of images so but

00:11:09,269 --> 00:11:21,779
that all leads us to very talking

00:11:12,929 --> 00:11:23,999
actually actually that leads us to leans

00:11:21,779 --> 00:11:25,769
us towards connection managed load

00:11:23,999 --> 00:11:27,779
balancing we're going to keep connection

00:11:25,769 --> 00:11:31,470
counts and hopefully that would help us

00:11:27,779 --> 00:11:32,699
balance the load if we share if the load

00:11:31,470 --> 00:11:34,829
balancing use number of connections

00:11:32,699 --> 00:11:39,029
we're probably not going to bless

00:11:34,829 --> 00:11:41,939
servers in an uneven way or at least

00:11:39,029 --> 00:11:44,279
hopefully that's the best we can do and

00:11:41,939 --> 00:11:47,399
another observation is that connection

00:11:44,279 --> 00:11:49,350
establishment takes a much longer time

00:11:47,399 --> 00:11:51,869
now because you have to establish a TCP

00:11:49,350 --> 00:11:54,660
connection and then there's another OSI

00:11:51,869 --> 00:11:56,939
layer that makes another round trip it

00:11:54,660 --> 00:11:59,670
says I associate and then a associate

00:11:56,939 --> 00:12:03,149
except we don't like this connection

00:11:59,670 --> 00:12:05,309
creation it's slow and especially if

00:12:03,149 --> 00:12:07,919
you're we're going to do to go to the

00:12:05,309 --> 00:12:09,839
cloud it might be even slower so we try

00:12:07,919 --> 00:12:11,459
to avoid that but luckily we have this

00:12:09,839 --> 00:12:13,169
sea echo thing so we can keep a

00:12:11,459 --> 00:12:15,899
connection alive for as much as we want

00:12:13,169 --> 00:12:18,209
to another thing that we can't do is if

00:12:15,899 --> 00:12:20,160
a node asks for another ACC name

00:12:18,209 --> 00:12:21,029
actually we have the whole set of new

00:12:20,160 --> 00:12:23,999
namings

00:12:21,029 --> 00:12:26,730
that there from the OSI presentation

00:12:23,999 --> 00:12:28,110
layer so we can't multiplex that on a

00:12:26,730 --> 00:12:30,179
single connection we have to create a

00:12:28,110 --> 00:12:33,569
new connection whenever anyone asks for

00:12:30,179 --> 00:12:35,489
a different node and there's a lot of

00:12:33,569 --> 00:12:37,889
it's it's a bit hard to follow but you

00:12:35,489 --> 00:12:41,249
know I'll try to ping us back to where

00:12:37,889 --> 00:12:43,259
these are become relevant just a quick

00:12:41,249 --> 00:12:45,209
recap about what we need the load

00:12:43,259 --> 00:12:46,919
balancer to do for us that's something

00:12:45,209 --> 00:12:49,139
that you know we take for granted with

00:12:46,919 --> 00:12:51,089
HTTP but now we have to make a tally of

00:12:49,139 --> 00:12:53,939
it and see if we can fulfill it somehow

00:12:51,089 --> 00:12:55,949
so first and obviously we need to

00:12:53,939 --> 00:12:59,399
balance the load we want to have several

00:12:55,949 --> 00:13:03,709
front ends and not have excess load hit

00:12:59,399 --> 00:13:03,709
one and while the other one goes idle

00:13:04,570 --> 00:13:09,470
the client is the modality is the CT

00:13:07,550 --> 00:13:11,540
machine hopefully in this design what

00:13:09,470 --> 00:13:13,460
we're trying to do is that the CT

00:13:11,540 --> 00:13:16,190
scanner is going to ship the images

00:13:13,460 --> 00:13:17,480
directly to our cloud and let's see if

00:13:16,190 --> 00:13:20,240
we can do that let's see if the proko

00:13:17,480 --> 00:13:23,480
protocol even alarms to that to be done

00:13:20,240 --> 00:13:26,110
in an efficient way and we're gonna have

00:13:23,480 --> 00:13:28,640
to do some load balancing obviously and

00:13:26,110 --> 00:13:30,500
another thing that load balancer does is

00:13:28,640 --> 00:13:33,260
that has to detect instance failure

00:13:30,500 --> 00:13:36,920
which is you know trivial with HTTP they

00:13:33,260 --> 00:13:38,420
are error codes and so forth but no load

00:13:36,920 --> 00:13:40,910
balancer currently understands the

00:13:38,420 --> 00:13:43,090
darkroom Evo situations so we're gonna

00:13:40,910 --> 00:13:45,560
have to retrofit that somehow

00:13:43,090 --> 00:13:48,740
another thing that load balancer should

00:13:45,560 --> 00:13:51,710
do and maybe it's somewhat more optional

00:13:48,740 --> 00:13:53,690
with HTTP it's good citizenry but in our

00:13:51,710 --> 00:13:56,000
system it's a bit more than that and we

00:13:53,690 --> 00:13:59,390
have to reflect a safe air condition if

00:13:56,000 --> 00:14:02,990
all the nodes are out we're gonna want

00:13:59,390 --> 00:14:05,420
to have a same reply that's that the

00:14:02,990 --> 00:14:08,210
other side of the system the client can

00:14:05,420 --> 00:14:09,920
efficiently reflect to the operator if

00:14:08,210 --> 00:14:11,420
something's going wrong in a medical

00:14:09,920 --> 00:14:14,089
process we need to be a lot more

00:14:11,420 --> 00:14:16,280
vigilant about it then you know just

00:14:14,089 --> 00:14:17,240
leave the connection hanging and that's

00:14:16,280 --> 00:14:19,130
another thing that we're going to

00:14:17,240 --> 00:14:21,140
retrofit now most load balancers because

00:14:19,130 --> 00:14:23,660
just going to throw with HTTP they're

00:14:21,140 --> 00:14:26,990
gonna throw a 504 and it's pretty good

00:14:23,660 --> 00:14:29,330
and even if they don't it's not so bad

00:14:26,990 --> 00:14:31,190
at least for user-facing but even for IP

00:14:29,330 --> 00:14:33,230
eyes yeah we want we want them to throw

00:14:31,190 --> 00:14:35,600
a safe and provision so we have to do

00:14:33,230 --> 00:14:38,089
that too and another thing that we do

00:14:35,600 --> 00:14:41,540
with load balancers occasion is that we

00:14:38,089 --> 00:14:43,400
kind of more the behavior of the client

00:14:41,540 --> 00:14:45,140
if the client is not behaving like we

00:14:43,400 --> 00:14:47,839
want maybe you can add more headers

00:14:45,140 --> 00:14:49,850
modify the headers keep connections

00:14:47,839 --> 00:14:52,400
alive and so forth we're gonna hopefully

00:14:49,850 --> 00:14:55,310
want to do some of that but our load

00:14:52,400 --> 00:14:57,380
balancer and also another thing is that

00:14:55,310 --> 00:15:00,740
we want to handle or offload encryption

00:14:57,380 --> 00:15:02,570
and authentication preferably in even

00:15:00,740 --> 00:15:04,910
more so when it comes to our service

00:15:02,570 --> 00:15:07,100
because we don't know how the DICOM

00:15:04,910 --> 00:15:09,140
daemon is going to handle it and we're

00:15:07,100 --> 00:15:12,290
more well-versed with load balancers

00:15:09,140 --> 00:15:14,540
than this daikon demon or so so that

00:15:12,290 --> 00:15:17,210
would be very nice for us and let's see

00:15:14,540 --> 00:15:19,310
if we can realize all of that

00:15:17,210 --> 00:15:22,370
now that we've mentioned security let's

00:15:19,310 --> 00:15:24,830
talk about how we can secure daikon so

00:15:22,370 --> 00:15:27,770
Darko actually has some TLS support in

00:15:24,830 --> 00:15:30,500
its standard now some people don't use

00:15:27,770 --> 00:15:33,110
TLS and they use IPSec VPNs and will

00:15:30,500 --> 00:15:35,870
dedicate a slide for that unfortunately

00:15:33,110 --> 00:15:37,970
and there's actually authentication

00:15:35,870 --> 00:15:41,090
built into the protocol supports user

00:15:37,970 --> 00:15:43,010
password model canvas and Sam oh that's

00:15:41,090 --> 00:15:45,320
nice and there's even support for

00:15:43,010 --> 00:15:47,300
digital signatures that's pretty much of

00:15:45,320 --> 00:15:51,170
them that seems useful we can build

00:15:47,300 --> 00:15:53,450
something with that and okay but when it

00:15:51,170 --> 00:15:55,930
comes to TLS as part of the DICOM

00:15:53,450 --> 00:15:59,120
standard it's specified in a

00:15:55,930 --> 00:16:01,580
brain-damaged way you get to pick from

00:15:59,120 --> 00:16:03,710
three profiles one which has no

00:16:01,580 --> 00:16:05,930
encryption one of the Triple DES

00:16:03,710 --> 00:16:07,670
encryption one that has a yes encryption

00:16:05,930 --> 00:16:10,850
so that's a bit dated

00:16:07,670 --> 00:16:13,250
and a bit brain-damaged but still viable

00:16:10,850 --> 00:16:16,130
by modern standards I mean Triple DES is

00:16:13,250 --> 00:16:18,470
still considered mostly safe and TLS one

00:16:16,130 --> 00:16:20,570
with AES is considered safe there's just

00:16:18,470 --> 00:16:22,700
a thing that says there entity

00:16:20,570 --> 00:16:25,820
authentication is optional that doesn't

00:16:22,700 --> 00:16:28,910
seem so secure that's that's starting to

00:16:25,820 --> 00:16:31,900
give us a bit of a shiver but we're

00:16:28,910 --> 00:16:35,840
still good I think we're still good it's

00:16:31,900 --> 00:16:38,810
ok here we go let's we selected the

00:16:35,840 --> 00:16:41,540
least connections load balancer we are

00:16:38,810 --> 00:16:44,060
detecting failed instances with the C

00:16:41,540 --> 00:16:47,810
echo if it doesn't return a C echo we're

00:16:44,060 --> 00:16:51,050
probably good and we can even do an

00:16:47,810 --> 00:16:52,520
associate projection as part of the

00:16:51,050 --> 00:16:55,340
Association attempt and it's our

00:16:52,520 --> 00:16:57,440
equivalent of a 504 and we can do the

00:16:55,340 --> 00:16:59,990
TLS termination and identification with

00:16:57,440 --> 00:17:02,510
certificates and this is pretty much

00:16:59,990 --> 00:17:04,490
where we can get without re-implementing

00:17:02,510 --> 00:17:09,560
DICOM or bolting it into something like

00:17:04,490 --> 00:17:12,320
n V or C code for a J proxy it looks

00:17:09,560 --> 00:17:13,940
good we are things are looking good for

00:17:12,320 --> 00:17:17,210
us it looks like we can achieve our

00:17:13,940 --> 00:17:18,740
stated goals and if you can go if you go

00:17:17,210 --> 00:17:21,860
to github there's still there's

00:17:18,740 --> 00:17:24,830
something I whipped out quickly with a J

00:17:21,860 --> 00:17:30,300
proxy and Lua and it's working it does

00:17:24,830 --> 00:17:32,790
all that I've talked about it ACS is

00:17:30,300 --> 00:17:36,030
enough to keep it saying with lure

00:17:32,790 --> 00:17:38,670
without risk security risks buffaloes

00:17:36,030 --> 00:17:39,530
but awful flows and it looks like we're

00:17:38,670 --> 00:17:44,160
good

00:17:39,530 --> 00:17:46,650
but here comes me but like I'm in the

00:17:44,160 --> 00:17:49,530
Wild West so the first thing when you

00:17:46,650 --> 00:17:51,300
try to deploy such a thing is that turns

00:17:49,530 --> 00:17:54,030
out the mortality is just don't support

00:17:51,300 --> 00:17:56,760
any othe methods they just don't support

00:17:54,030 --> 00:17:58,500
it today's magic sentence when it comes

00:17:56,760 --> 00:18:01,140
to the DICOM conformance of all these

00:17:58,500 --> 00:18:03,330
modalities this product does not conform

00:18:01,140 --> 00:18:05,280
to any defines vacuum security profiles

00:18:03,330 --> 00:18:08,190
it is assumed that the product is used

00:18:05,280 --> 00:18:10,050
within a secure environment that's a

00:18:08,190 --> 00:18:13,740
shame that's a shame so we have to do

00:18:10,050 --> 00:18:15,300
all this security in another way so it

00:18:13,740 --> 00:18:17,610
turns out it's not too strong with

00:18:15,300 --> 00:18:21,390
security but hey that means

00:18:17,610 --> 00:18:23,310
unfortunately that none of the TLS

00:18:21,390 --> 00:18:25,860
profiles are supported by the modalities

00:18:23,310 --> 00:18:28,410
this is much much worse for us and

00:18:25,860 --> 00:18:30,390
today's magic sentence is flow this

00:18:28,410 --> 00:18:33,650
product does not conform to any known

00:18:30,390 --> 00:18:35,940
that I come security for profiles we are

00:18:33,650 --> 00:18:38,730
somewhat screwed here because we have to

00:18:35,940 --> 00:18:44,430
revert to a IPSec VPNs

00:18:38,730 --> 00:18:47,310
if yeh that's yeah offside why IPSec VPN

00:18:44,430 --> 00:18:48,210
is a bad idea it's not a bad idea it's a

00:18:47,310 --> 00:18:51,930
horrible idea

00:18:48,210 --> 00:18:53,940
now IPSec unless yours if you're

00:18:51,930 --> 00:18:56,490
familiar with that gonna be doing a

00:18:53,940 --> 00:18:58,530
familiar crime it's cumbersome protocol

00:18:56,490 --> 00:19:01,380
with lots of options

00:18:58,530 --> 00:19:03,660
aka rope to hang yourself with you do

00:19:01,380 --> 00:19:05,730
face one negotiation and after face by

00:19:03,660 --> 00:19:08,190
negotiation you're addressing changes

00:19:05,730 --> 00:19:11,580
and then you do a face to negotiation

00:19:08,190 --> 00:19:13,740
and if it doesn't match you get a random

00:19:11,580 --> 00:19:16,760
error that's probably cryptic because I

00:19:13,740 --> 00:19:19,980
couldn't decrypt for whatever reason and

00:19:16,760 --> 00:19:21,810
it's pretty bad like I said expect long

00:19:19,980 --> 00:19:23,910
about the sessions and stuff your

00:19:21,810 --> 00:19:26,280
support accordingly now what's even

00:19:23,910 --> 00:19:28,140
worse with its scenario it's not just

00:19:26,280 --> 00:19:30,840
IPSec it's the fact that we have to

00:19:28,140 --> 00:19:32,700
support arbitrary IPSec devices one

00:19:30,840 --> 00:19:34,260
hospital is gonna have checkpoints the

00:19:32,700 --> 00:19:36,930
other is gonna have 14 it the others

00:19:34,260 --> 00:19:41,100
gonna have god knows what is cisco that

00:19:36,930 --> 00:19:43,950
does not look good for us at all but if

00:19:41,100 --> 00:19:44,669
we have to chew we're gonna have to bite

00:19:43,950 --> 00:19:47,909
it

00:19:44,669 --> 00:19:52,259
and it's also not so good for failover

00:19:47,909 --> 00:19:53,100
to add insult to injury so but yeah

00:19:52,259 --> 00:19:55,639
that's okay

00:19:53,100 --> 00:20:00,239
we know we still know what we're doing

00:19:55,639 --> 00:20:02,460
sort of turns out that the modality

00:20:00,239 --> 00:20:04,710
tends to drop images as part of the

00:20:02,460 --> 00:20:05,809
series some of them it just doesn't send

00:20:04,710 --> 00:20:09,809
at all

00:20:05,809 --> 00:20:13,169
that sucks and it's something that the

00:20:09,809 --> 00:20:15,330
industry knows and it's learn to somehow

00:20:13,169 --> 00:20:18,210
cope and if you remember is the see fine

00:20:15,330 --> 00:20:21,059
command so basically what you usually do

00:20:18,210 --> 00:20:24,029
is if you detect the lost frame the new

00:20:21,059 --> 00:20:25,850
issue is see find to fetch it from

00:20:24,029 --> 00:20:30,090
whatever it is

00:20:25,850 --> 00:20:34,619
hopefully that's very bad for our design

00:20:30,090 --> 00:20:36,600
it means that actually yeah we are front

00:20:34,619 --> 00:20:39,450
aunts are now going to have to issue

00:20:36,600 --> 00:20:41,190
commands through the modality or to the

00:20:39,450 --> 00:20:43,460
parcel then another component which

00:20:41,190 --> 00:20:47,999
stores images for reference

00:20:43,460 --> 00:20:50,850
it's totally through our redesign of off

00:20:47,999 --> 00:20:53,639
the course and we're gonna have to now

00:20:50,850 --> 00:20:56,399
devised a network topology where the

00:20:53,639 --> 00:20:58,649
front end can make an issue request into

00:20:56,399 --> 00:21:01,259
the hospital so that's gonna be

00:20:58,649 --> 00:21:02,909
challenging but now actually it's not

00:21:01,259 --> 00:21:06,450
going to be challenging at all you know

00:21:02,909 --> 00:21:08,070
why because see fine means that we have

00:21:06,450 --> 00:21:11,070
to initiate a connection from our side

00:21:08,070 --> 00:21:13,590
but it's impossible due to security

00:21:11,070 --> 00:21:16,080
considerations no hospital is ever going

00:21:13,590 --> 00:21:19,109
to let you issue DICOM commands into

00:21:16,080 --> 00:21:20,909
their infrastructure so what that means

00:21:19,109 --> 00:21:25,320
is that we now have to design an

00:21:20,909 --> 00:21:28,259
improvised equipment it's maybe not so

00:21:25,320 --> 00:21:31,710
bad but to be honest why didn't we opt

00:21:28,259 --> 00:21:34,169
for now not yet we're gonna have a slide

00:21:31,710 --> 00:21:36,929
about why we didn't let's say

00:21:34,169 --> 00:21:40,679
intuitively we tried not to have an

00:21:36,929 --> 00:21:42,929
impress box in the hospital and it's a

00:21:40,679 --> 00:21:45,269
we're gonna have a slide about that and

00:21:42,929 --> 00:21:47,850
it's tempting to start jumping around it

00:21:45,269 --> 00:21:50,279
but yeah so and here's the thing now

00:21:47,850 --> 00:21:52,259
that we're designing this imprimis box

00:21:50,279 --> 00:21:54,049
it turns out that our favorite open

00:21:52,259 --> 00:21:57,539
source daikon browser does not support

00:21:54,049 --> 00:21:58,419
multiplexing which is very very very bad

00:21:57,539 --> 00:22:00,129
for perform

00:21:58,419 --> 00:22:02,320
we're not going to hit our performance

00:22:00,129 --> 00:22:04,629
mark this way as you remember

00:22:02,320 --> 00:22:06,940
multiplexing was an optional feature and

00:22:04,629 --> 00:22:09,759
the daikon browser that we have to to

00:22:06,940 --> 00:22:11,710
make a selection off and both exhibit

00:22:09,759 --> 00:22:14,019
this behavior they do not multiplex

00:22:11,710 --> 00:22:16,149
actually there is a good reason why they

00:22:14,019 --> 00:22:19,210
don't because they can change the ACC

00:22:16,149 --> 00:22:22,450
names during their routers they need to

00:22:19,210 --> 00:22:25,419
change the ACC names so it's somewhat

00:22:22,450 --> 00:22:27,879
silly to try to hold a connection pool

00:22:25,419 --> 00:22:30,039
when your name can vary arbitrarily you

00:22:27,879 --> 00:22:32,379
can hold thousands of possibly thousands

00:22:30,039 --> 00:22:35,200
of connections for no good reason but

00:22:32,379 --> 00:22:37,450
what it does allow us to do is have

00:22:35,200 --> 00:22:38,409
multiple connections I'm sending one

00:22:37,450 --> 00:22:41,200
chunk at a time

00:22:38,409 --> 00:22:44,590
yeah but I'm gonna do it sixty or thirty

00:22:41,200 --> 00:22:47,590
two connections attempts in parallel

00:22:44,590 --> 00:22:50,200
which is very which is sort of fun it

00:22:47,590 --> 00:22:52,299
would have been fine but the problem is

00:22:50,200 --> 00:22:54,909
that if you put too little of them your

00:22:52,299 --> 00:22:56,259
performance suffers really bad again

00:22:54,909 --> 00:22:58,090
remember the connection establishment

00:22:56,259 --> 00:23:01,720
now connection establishment comes to

00:22:58,090 --> 00:23:03,489
bite us and if you put too much then

00:23:01,720 --> 00:23:05,169
connection stall and then you get a

00:23:03,489 --> 00:23:06,850
timeout and then you have to recover

00:23:05,169 --> 00:23:10,960
from a timeout which the router

00:23:06,850 --> 00:23:15,909
apparently doesn't do so efficiently ok

00:23:10,960 --> 00:23:18,399
and what already Wow okay I'm gonna have

00:23:15,909 --> 00:23:21,489
to wrap up with DICOM so that's and the

00:23:18,399 --> 00:23:22,929
last insult to injury is that we can't

00:23:21,489 --> 00:23:26,799
use client-side certificates in the

00:23:22,929 --> 00:23:29,080
hospital they have DLP protection which

00:23:26,799 --> 00:23:32,320
which does man in the middle against

00:23:29,080 --> 00:23:33,820
your or their TLS connections so we

00:23:32,320 --> 00:23:37,210
can't even deploy that so we don't even

00:23:33,820 --> 00:23:43,359
have a good way to authenticate and so

00:23:37,210 --> 00:23:46,450
Wow ok and just another thing is that

00:23:43,359 --> 00:23:48,700
HTTP would have done quite a bit a bit

00:23:46,450 --> 00:23:50,109
little to avoid to help us avoid with

00:23:48,700 --> 00:23:52,960
the problems that we'd have to still

00:23:50,109 --> 00:23:56,169
have the on-site presence because of the

00:23:52,960 --> 00:24:00,159
unreliability of the devices but I don't

00:23:56,169 --> 00:24:02,019
have to rush a bit sorry about that we

00:24:00,159 --> 00:24:03,340
talked about why intuitively a zero

00:24:02,019 --> 00:24:06,279
footprint installation would have been

00:24:03,340 --> 00:24:08,049
so much better because it's well now

00:24:06,279 --> 00:24:11,109
that you've gotten to realize how bad

00:24:08,049 --> 00:24:12,190
hospitals are it's gonna be a management

00:24:11,109 --> 00:24:14,649
hell they're not going to

00:24:12,190 --> 00:24:16,929
access to anything and so forth I'm

00:24:14,649 --> 00:24:19,149
sorry for rushing it so but basically

00:24:16,929 --> 00:24:21,009
the thing is that now our DevOps

00:24:19,149 --> 00:24:22,840
transformation is more of a people's

00:24:21,009 --> 00:24:27,159
problem we need to see what the hospital

00:24:22,840 --> 00:24:30,429
can give us ways to manage this atrocity

00:24:27,159 --> 00:24:34,000
somehow and to match our deployment

00:24:30,429 --> 00:24:36,549
insides and get some manageability into

00:24:34,000 --> 00:24:38,169
it and this is extremely hard to genera

00:24:36,549 --> 00:24:39,759
size because every hospital is going to

00:24:38,169 --> 00:24:42,070
be different and you have to stick with

00:24:39,759 --> 00:24:45,490
the product guys or the professional

00:24:42,070 --> 00:24:49,330
sales Engagement guys to make sure that

00:24:45,490 --> 00:24:52,330
you get what is needed to have a same

00:24:49,330 --> 00:24:53,970
architecture and have a say in it and do

00:24:52,330 --> 00:24:57,789
it

00:24:53,970 --> 00:24:59,470
IPSec rules happy SEC is a problem

00:24:57,789 --> 00:25:01,090
actually now that we have a few minutes

00:24:59,470 --> 00:25:03,639
I'm going to just gonna say something

00:25:01,090 --> 00:25:05,350
real quick about that one because that I

00:25:03,639 --> 00:25:07,480
did actually find in one of the

00:25:05,350 --> 00:25:10,389
specification that the modality did

00:25:07,480 --> 00:25:13,029
support TLS was like a discovery of the

00:25:10,389 --> 00:25:14,500
year there is TLS support and then I

00:25:13,029 --> 00:25:16,299
said okay but it was a specific

00:25:14,500 --> 00:25:18,820
framework so I sent an email to the

00:25:16,299 --> 00:25:20,529
vendor said hey why does that femur have

00:25:18,820 --> 00:25:22,899
TLS and none of the other Famers have

00:25:20,529 --> 00:25:26,320
TLS and that the reply was very nice

00:25:22,899 --> 00:25:28,269
said thank you for your inquiry we

00:25:26,320 --> 00:25:32,019
didn't even realize we had the TLS

00:25:28,269 --> 00:25:34,419
supporting filmer this was due to some

00:25:32,019 --> 00:25:36,580
government agency that insisted on it

00:25:34,419 --> 00:25:39,429
and it's never going to see the light of

00:25:36,580 --> 00:25:42,730
day in any other place by the way if

00:25:39,429 --> 00:25:46,659
that makes you feel more safe regards to

00:25:42,730 --> 00:25:50,559
your Hospital data that's pretty much

00:25:46,659 --> 00:25:52,690
the point maybe if now hopefully yeah in

00:25:50,559 --> 00:25:54,580
our ideal architecture the device would

00:25:52,690 --> 00:25:57,759
have been able to talk securely and

00:25:54,580 --> 00:26:00,669
efficiently to the cloud or just so far

00:25:57,759 --> 00:26:02,590
from there and the resolution at least

00:26:00,669 --> 00:26:05,110
currently is not even technological it's

00:26:02,590 --> 00:26:05,980
about people it's about procedures it's

00:26:05,110 --> 00:26:08,289
about access

00:26:05,980 --> 00:26:11,649
I mean technologically we could see the

00:26:08,289 --> 00:26:14,049
DICOM suffice it was a mess but it was

00:26:11,649 --> 00:26:17,470
sufficient but the problem comes from

00:26:14,049 --> 00:26:20,080
another area entirely and that's again

00:26:17,470 --> 00:26:24,540
what to talk about culture and people

00:26:20,080 --> 00:26:28,580
that's where resolution of such issues

00:26:24,540 --> 00:26:28,580

YouTube URL: https://www.youtube.com/watch?v=0kUIhglph5w


