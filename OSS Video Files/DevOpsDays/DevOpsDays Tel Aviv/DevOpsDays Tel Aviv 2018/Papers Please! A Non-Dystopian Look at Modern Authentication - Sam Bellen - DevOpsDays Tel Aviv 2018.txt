Title: Papers Please! A Non-Dystopian Look at Modern Authentication - Sam Bellen - DevOpsDays Tel Aviv 2018
Publication date: 2019-01-03
Playlist: DevOpsDays Tel Aviv 2018
Description: 
	From web apps to APIs, desktop to mobile apps, it has never been a better time to write code. But when it comes to securing these apps you may be wondering what the right approach is. JWT, OpenID, Auth Flows, Oh My! In this talk, weâ€™ll demystify common security patterns for modern app architectures.
Captions: 
	00:00:01,980 --> 00:00:08,670
[Music]

00:00:06,779 --> 00:00:11,580
quick warning I'm really bad and holding

00:00:08,670 --> 00:00:12,840
microphone so if I start to do this just

00:00:11,580 --> 00:00:14,309
to warn me that you're not hearing me

00:00:12,840 --> 00:00:16,470
clearly and I will try to put the mic

00:00:14,309 --> 00:00:19,680
back up so let's have a look at modern

00:00:16,470 --> 00:00:22,109
authentication first off my name is Sam

00:00:19,680 --> 00:00:24,019
Bell I'm from Belgium and I'm a

00:00:22,109 --> 00:00:27,689
developer evangelist at earth zero

00:00:24,019 --> 00:00:29,250
anybody heard of author zero before few

00:00:27,689 --> 00:00:30,750
people for those of you who haven't

00:00:29,250 --> 00:00:32,369
heard about zero we're basically an

00:00:30,750 --> 00:00:34,140
identity as a service provider which

00:00:32,369 --> 00:00:36,300
means that we try to make it as easy as

00:00:34,140 --> 00:00:39,090
possible for anybody to implement a

00:00:36,300 --> 00:00:42,420
secure authentication flow in any app or

00:00:39,090 --> 00:00:44,340
service that's what we do and you can

00:00:42,420 --> 00:00:48,079
find me on the Internet as some bayo

00:00:44,340 --> 00:00:51,120
almost any website some mail so

00:00:48,079 --> 00:00:52,800
authentication used to be easy not

00:00:51,120 --> 00:00:54,530
really but it used to be a bit more

00:00:52,800 --> 00:00:57,629
straightforward than it is these days

00:00:54,530 --> 00:00:59,850
let's let's have an example like you

00:00:57,629 --> 00:01:01,530
request a webpage what do you have what

00:00:59,850 --> 00:01:03,750
you would have lost yet a browser you

00:01:01,530 --> 00:01:05,850
get a server and that browser would just

00:01:03,750 --> 00:01:08,640
say to the server a server I want this

00:01:05,850 --> 00:01:11,790
page and a server would say is your page

00:01:08,640 --> 00:01:13,080
go ahead and display this now if you

00:01:11,790 --> 00:01:14,850
would want to authenticate on our

00:01:13,080 --> 00:01:17,280
website you would do something like this

00:01:14,850 --> 00:01:18,930
you have a browser it would send

00:01:17,280 --> 00:01:20,580
username and password to that server and

00:01:18,930 --> 00:01:22,409
that server would start to check the

00:01:20,580 --> 00:01:24,780
username and password against the

00:01:22,409 --> 00:01:26,790
database or something like this and when

00:01:24,780 --> 00:01:29,909
it found that these this data is valid

00:01:26,790 --> 00:01:31,799
it would just send a session cookie to

00:01:29,909 --> 00:01:34,140
the browser at which this cookie would

00:01:31,799 --> 00:01:37,829
prove that there's a valid session going

00:01:34,140 --> 00:01:39,810
on and the next time you would want to

00:01:37,829 --> 00:01:41,610
request a web page for which you need to

00:01:39,810 --> 00:01:44,430
be authenticated you just pass along

00:01:41,610 --> 00:01:47,189
that session cookie and you get your

00:01:44,430 --> 00:01:48,899
HTML back it used to be as simple as

00:01:47,189 --> 00:01:51,360
this of course the sort of caches and

00:01:48,899 --> 00:01:53,490
and and and other necessarily can happen

00:01:51,360 --> 00:01:57,740
but the basics used to be as simple as

00:01:53,490 --> 00:02:02,219
this modern authentication even is even

00:01:57,740 --> 00:02:03,390
it's a bit more complex so there's a lot

00:02:02,219 --> 00:02:07,009
of things going on with modern

00:02:03,390 --> 00:02:08,860
authentication grain types of flows

00:02:07,009 --> 00:02:10,540
platforms

00:02:08,860 --> 00:02:12,040
there's a lot of different types of

00:02:10,540 --> 00:02:14,710
types of authentication and we're going

00:02:12,040 --> 00:02:17,080
to see four types of them the first one

00:02:14,710 --> 00:02:20,380
is authentication from Web Apps these

00:02:17,080 --> 00:02:21,700
are web apps on just standard or school

00:02:20,380 --> 00:02:24,210
web websites not single page

00:02:21,700 --> 00:02:29,290
applications web applications which are

00:02:24,210 --> 00:02:32,860
created on a server so that's one next

00:02:29,290 --> 00:02:34,150
one is ap is single page applications

00:02:32,860 --> 00:02:38,110
because they behave a bit differently

00:02:34,150 --> 00:02:40,960
than the regular web apps and native

00:02:38,110 --> 00:02:41,560
apps desktop apps mobile apps anything

00:02:40,960 --> 00:02:43,480
like this

00:02:41,560 --> 00:02:45,550
they all do authentication a little bit

00:02:43,480 --> 00:02:50,260
different so going to see how to handle

00:02:45,550 --> 00:02:51,610
them in all of these instances and we're

00:02:50,260 --> 00:02:55,750
going to see how to do this with OAuth

00:02:51,610 --> 00:02:58,150
2.0 anybody heard of off I think

00:02:55,750 --> 00:03:01,810
everybody almost everybody has heard of

00:02:58,150 --> 00:03:03,820
earth this is earth an open standard for

00:03:01,810 --> 00:03:05,080
access delegation can we use as a way

00:03:03,820 --> 00:03:06,700
for interactive is to grant websites

00:03:05,080 --> 00:03:07,930
application access to information and

00:03:06,700 --> 00:03:09,940
other websites but without giving them

00:03:07,930 --> 00:03:11,530
passwords and this is what important

00:03:09,940 --> 00:03:13,630
it's an open standard for access

00:03:11,530 --> 00:03:16,120
delegation which means it helps us

00:03:13,630 --> 00:03:19,630
delegate access to protected resources

00:03:16,120 --> 00:03:22,959
or protected pages and it's really good

00:03:19,630 --> 00:03:23,709
at that and it's a few rules when

00:03:22,959 --> 00:03:26,470
working with the OAuth

00:03:23,709 --> 00:03:27,880
the first one is a resource owner the

00:03:26,470 --> 00:03:30,010
entity that can grant access to a

00:03:27,880 --> 00:03:32,950
protected resource typically this is the

00:03:30,010 --> 00:03:35,650
end user this is a user you me user who

00:03:32,950 --> 00:03:39,670
visits your website users who uses your

00:03:35,650 --> 00:03:41,500
mobile app your desktop app second it's

00:03:39,670 --> 00:03:43,510
a resource server it's a server hosting

00:03:41,500 --> 00:03:44,500
the protected resource this is your API

00:03:43,510 --> 00:03:47,830
your back-end

00:03:44,500 --> 00:03:50,350
this is the server which builds your web

00:03:47,830 --> 00:03:54,010
pages or serves your data to you go a

00:03:50,350 --> 00:03:56,170
mobile app or your single page app the

00:03:54,010 --> 00:03:59,019
second the third one is your client your

00:03:56,170 --> 00:04:00,760
mobile app you're a single page app your

00:03:59,019 --> 00:04:03,489
web app whatever you want

00:04:00,760 --> 00:04:05,470
and lastly we have the author ID

00:04:03,489 --> 00:04:07,330
authorization server the server that

00:04:05,470 --> 00:04:09,790
authenticates the resource owner and

00:04:07,330 --> 00:04:12,040
issues tokens so basically this is the

00:04:09,790 --> 00:04:14,739
server is going to decide if a user is

00:04:12,040 --> 00:04:19,359
authenticated and which counted it can

00:04:14,739 --> 00:04:20,280
view or which actions it can take all

00:04:19,359 --> 00:04:25,530
right

00:04:20,280 --> 00:04:27,510
next up earth 2.0 and points there's two

00:04:25,530 --> 00:04:29,490
the first one is of the authorization

00:04:27,510 --> 00:04:31,500
endpoint it's used to interact with the

00:04:29,490 --> 00:04:33,990
resource owner to get authorization and

00:04:31,500 --> 00:04:36,150
to access a protected resource basically

00:04:33,990 --> 00:04:37,320
when you start to do the authorization

00:04:36,150 --> 00:04:39,830
process you're going to hit up this

00:04:37,320 --> 00:04:42,240
endpoint and you'll get a code back and

00:04:39,830 --> 00:04:44,700
using this code you can access tokens

00:04:42,240 --> 00:04:45,420
and this can be an access token or a

00:04:44,700 --> 00:04:48,170
refresh token

00:04:45,420 --> 00:04:50,490
we'll see what these are in a minute but

00:04:48,170 --> 00:04:52,380
you can get them from this endpoint and

00:04:50,490 --> 00:04:56,100
it's not used any Pleasant flow which

00:04:52,380 --> 00:04:58,169
we'll also see in a minute so an

00:04:56,100 --> 00:05:02,700
authorization code visit access access

00:04:58,169 --> 00:05:05,669
token vs a refresh token yes an ID token

00:05:02,700 --> 00:05:06,960
these are all kind similar things they

00:05:05,669 --> 00:05:09,990
don't do the same thing but they're all

00:05:06,960 --> 00:05:14,190
just a string of text or a token or

00:05:09,990 --> 00:05:16,080
something you use to do something so

00:05:14,190 --> 00:05:18,150
what's a lot rotation code and opaque

00:05:16,080 --> 00:05:20,520
string meant to be exchanged with an

00:05:18,150 --> 00:05:21,870
access token at the token endpoints so

00:05:20,520 --> 00:05:24,090
you're going to hit up your

00:05:21,870 --> 00:05:25,650
authorization endpoint you get back or

00:05:24,090 --> 00:05:28,860
you prove you prove your identity and

00:05:25,650 --> 00:05:30,300
you get back in autorotation code and

00:05:28,860 --> 00:05:34,860
you're going to exchange that code for a

00:05:30,300 --> 00:05:37,110
token at the token endpoints an access

00:05:34,860 --> 00:05:38,790
token is an opaque string or JSON web

00:05:37,110 --> 00:05:41,010
token that you know to us authorized

00:05:38,790 --> 00:05:43,020
which permissions to which application

00:05:41,010 --> 00:05:45,360
basically this token is going to tell

00:05:43,020 --> 00:05:47,490
your application or your API or your

00:05:45,360 --> 00:05:49,590
back-end this user is authenticated and

00:05:47,490 --> 00:05:52,200
it has a rights to do this action to see

00:05:49,590 --> 00:05:55,229
this content to do this to do this thing

00:05:52,200 --> 00:05:59,220
so that's what you use an access token

00:05:55,229 --> 00:06:03,810
for the next one is the Refresh token

00:05:59,220 --> 00:06:05,850
access tokens usually are they don't

00:06:03,810 --> 00:06:07,800
last very long they are limited in time

00:06:05,850 --> 00:06:11,190
at which you can use them so if they

00:06:07,800 --> 00:06:15,810
expire you can use a refresh token to

00:06:11,190 --> 00:06:18,479
get a new access token and an ID token

00:06:15,810 --> 00:06:21,600
they're not really part of the OAuth

00:06:18,479 --> 00:06:24,000
spec they're part of the open ID copa90

00:06:21,600 --> 00:06:27,060
Connect spec but open ad Connect is just

00:06:24,000 --> 00:06:29,970
a layer on top of Earth which as ID

00:06:27,060 --> 00:06:32,430
tokens and ID tokens they contain a bit

00:06:29,970 --> 00:06:33,160
of data about the authenticated user

00:06:32,430 --> 00:06:35,650
there

00:06:33,160 --> 00:06:38,200
email address the username whatever is

00:06:35,650 --> 00:06:41,080
important to you and these are always a

00:06:38,200 --> 00:06:43,780
JSON web token so the auth spec does not

00:06:41,080 --> 00:06:46,300
specify in which format a token should

00:06:43,780 --> 00:06:48,400
be created this can be a string

00:06:46,300 --> 00:06:50,440
this can be JSON web token doesn't

00:06:48,400 --> 00:06:53,290
really matter the open IDs back though

00:06:50,440 --> 00:06:58,270
it specifies as it has to be a JSON web

00:06:53,290 --> 00:07:01,690
token let's look at a few of the earth

00:06:58,270 --> 00:07:04,720
flows you have the authorization code

00:07:01,690 --> 00:07:08,650
flow the author authorization code with

00:07:04,720 --> 00:07:11,650
proof key for code exchange pgc flow the

00:07:08,650 --> 00:07:15,340
implicit flow and the client credentials

00:07:11,650 --> 00:07:16,810
flow so let's look at traditional web

00:07:15,340 --> 00:07:18,640
apps these are the web apps which are

00:07:16,810 --> 00:07:19,120
generated on the server server just

00:07:18,640 --> 00:07:20,740
returns

00:07:19,120 --> 00:07:23,440
HTML all the logic is in the backend

00:07:20,740 --> 00:07:26,320
it's done on the server all the

00:07:23,440 --> 00:07:28,600
authorizations also done on the server

00:07:26,320 --> 00:07:32,400
and this one uses the author

00:07:28,600 --> 00:07:37,500
authorization code flow so the baseline

00:07:32,400 --> 00:07:37,500
you have a browser and give a server and

00:07:37,830 --> 00:07:44,050
when you want to display a web page you

00:07:42,370 --> 00:07:46,930
ask the server hey can I get a web page

00:07:44,050 --> 00:07:50,680
and a surfer gives you HTML simple as

00:07:46,930 --> 00:07:53,050
this the authentication we have a

00:07:50,680 --> 00:07:55,419
separate other authorization server here

00:07:53,050 --> 00:07:57,490
but it happens a bit like this your

00:07:55,419 --> 00:08:00,280
browser will send the credentials to

00:07:57,490 --> 00:08:02,680
that authorization server that server is

00:08:00,280 --> 00:08:04,660
going to check if these are correct if

00:08:02,680 --> 00:08:06,550
so it will give you a call back code

00:08:04,660 --> 00:08:09,940
which is an author authorization code

00:08:06,550 --> 00:08:11,950
and then you use that code we send that

00:08:09,940 --> 00:08:14,110
to your server which is then going to

00:08:11,950 --> 00:08:16,510
post that to your authorization server

00:08:14,110 --> 00:08:18,520
that code you get back and it will get

00:08:16,510 --> 00:08:20,910
back your tokens your access token or

00:08:18,520 --> 00:08:23,770
your ID token or whatever you want and

00:08:20,910 --> 00:08:25,750
then it will create a cookie session

00:08:23,770 --> 00:08:29,590
cookie and send this back to the browser

00:08:25,750 --> 00:08:32,410
so when you're authenticated you're just

00:08:29,590 --> 00:08:34,900
going to send a browser to your arm to

00:08:32,410 --> 00:08:36,940
your server and it's notice that you

00:08:34,900 --> 00:08:41,680
have a valid session so it will return

00:08:36,940 --> 00:08:44,500
any data you want simple as this when

00:08:41,680 --> 00:08:46,060
user changes you send that cookie you

00:08:44,500 --> 00:08:46,870
send the change password or user or

00:08:46,060 --> 00:08:48,490
whatever

00:08:46,870 --> 00:08:50,710
authorization servers together with that

00:08:48,490 --> 00:08:53,290
access token which you got back in the

00:08:50,710 --> 00:08:57,220
previous step and it will just give you

00:08:53,290 --> 00:09:00,970
an OK and then you can say yay we

00:08:57,220 --> 00:09:04,390
changed our user or whatever the second

00:09:00,970 --> 00:09:06,610
one is how to do authentication with

00:09:04,390 --> 00:09:10,089
api's or Beckett's using the client

00:09:06,610 --> 00:09:12,880
credential grant flow and it basically

00:09:10,089 --> 00:09:15,430
basically goes like this if one API

00:09:12,880 --> 00:09:17,650
you've a second API it sends some JSON

00:09:15,430 --> 00:09:19,960
to the other one at response okay

00:09:17,650 --> 00:09:22,990
alright return some Jason straight

00:09:19,960 --> 00:09:25,660
forward between you need some

00:09:22,990 --> 00:09:28,240
authentication going on you use your

00:09:25,660 --> 00:09:30,940
saturation of authorization server again

00:09:28,240 --> 00:09:34,860
so you send a client ID and client

00:09:30,940 --> 00:09:38,050
secret usually to that donut server

00:09:34,860 --> 00:09:40,900
gives you back an access token and then

00:09:38,050 --> 00:09:42,070
when you want to request some data you

00:09:40,900 --> 00:09:44,380
just send along that access token

00:09:42,070 --> 00:09:46,480
together with your request this can be

00:09:44,380 --> 00:09:48,400
done because these servers have this

00:09:46,480 --> 00:09:50,830
client ID and client secret storts

00:09:48,400 --> 00:09:54,100
safely you cannot do this in a browser

00:09:50,830 --> 00:09:55,600
but if you have two servers and they

00:09:54,100 --> 00:09:57,880
don't get hacked which we all assume

00:09:55,600 --> 00:10:00,370
this not happened they can store these

00:09:57,880 --> 00:10:06,160
credentials like a secret in the ID

00:10:00,370 --> 00:10:08,020
safely and then it returns to Jason you

00:10:06,160 --> 00:10:09,820
can also request refresh tokens I

00:10:08,020 --> 00:10:11,800
mentioned them before they're just to

00:10:09,820 --> 00:10:15,459
request a new access token when yours is

00:10:11,800 --> 00:10:18,100
expired and you just pass along your key

00:10:15,459 --> 00:10:20,200
your secret and your ID again and you

00:10:18,100 --> 00:10:23,860
get a refresh token and an access token

00:10:20,200 --> 00:10:26,110
if you want them and then if you want a

00:10:23,860 --> 00:10:27,940
new access token you pass along your

00:10:26,110 --> 00:10:31,360
refresh token to your authorization

00:10:27,940 --> 00:10:34,150
server and it gives you a new access

00:10:31,360 --> 00:10:36,700
token that's all quite quite

00:10:34,150 --> 00:10:38,620
straightforward and then of course you

00:10:36,700 --> 00:10:40,510
can use your access token your new

00:10:38,620 --> 00:10:42,400
access token to communicate with your

00:10:40,510 --> 00:10:47,490
other API or server or back-end whatever

00:10:42,400 --> 00:10:49,660
you want and you get a response

00:10:47,490 --> 00:10:54,790
the third one is a single page

00:10:49,660 --> 00:10:57,940
application and it uses the implicit

00:10:54,790 --> 00:11:00,130
grant flow in this example you might

00:10:57,940 --> 00:11:01,690
have heard there's some issues going on

00:11:00,130 --> 00:11:03,730
with the implicit grant flow I'll talk a

00:11:01,690 --> 00:11:06,639
bit about that later for means of

00:11:03,730 --> 00:11:08,290
demonstration let's talk about the

00:11:06,639 --> 00:11:10,660
implicit grant flow because it's an

00:11:08,290 --> 00:11:15,310
often-used flow especially with single

00:11:10,660 --> 00:11:17,769
page applications these days so baseline

00:11:15,310 --> 00:11:20,649
again single page application want to

00:11:17,769 --> 00:11:22,860
ask some data from an API it sends a

00:11:20,649 --> 00:11:26,589
request and the API returns chasing

00:11:22,860 --> 00:11:30,329
that's how it works but when you need to

00:11:26,589 --> 00:11:33,459
authenticate you just ask your

00:11:30,329 --> 00:11:34,810
authorization server hey here is a user

00:11:33,459 --> 00:11:37,750
password whatever you want

00:11:34,810 --> 00:11:40,420
give me some tokens it will return you

00:11:37,750 --> 00:11:43,389
an access token and an ID token which

00:11:40,420 --> 00:11:45,639
you then can use to request some data

00:11:43,389 --> 00:11:48,850
from your API you just send along the

00:11:45,639 --> 00:11:50,139
access token so we didn't have the the

00:11:48,850 --> 00:11:52,870
step we had with your Thunder

00:11:50,139 --> 00:11:55,630
authentication flow code that we first

00:11:52,870 --> 00:11:57,370
access key codes get a code back serve

00:11:55,630 --> 00:11:59,170
it to our server or API and then the PI

00:11:57,370 --> 00:12:00,970
is going to request tokens we're going

00:11:59,170 --> 00:12:04,180
to request the tokens straight from the

00:12:00,970 --> 00:12:08,709
authorization server and then we get

00:12:04,180 --> 00:12:10,089
some JSON back and there's also a thing

00:12:08,709 --> 00:12:12,009
called silent authentication which you

00:12:10,089 --> 00:12:13,689
can do with the implicit flow because

00:12:12,009 --> 00:12:15,639
you don't want your user to login every

00:12:13,689 --> 00:12:17,350
every time it faces your single page

00:12:15,639 --> 00:12:18,970
application but you don't really want to

00:12:17,350 --> 00:12:21,339
save these tokens in the front end

00:12:18,970 --> 00:12:23,980
because that's local storage or a cookie

00:12:21,339 --> 00:12:27,370
or an exhibit in a web browser they can

00:12:23,980 --> 00:12:29,339
also be accessed by by JavaScript and

00:12:27,370 --> 00:12:33,519
you don't want your tokens to be strong

00:12:29,339 --> 00:12:35,589
so to do this basically we're going to

00:12:33,519 --> 00:12:37,779
send a credential store authentication

00:12:35,589 --> 00:12:41,350
server it's going to create a session

00:12:37,779 --> 00:12:42,939
and store a cookie for that and send you

00:12:41,350 --> 00:12:44,110
your tokens which you can use and store

00:12:42,939 --> 00:12:47,589
them in memory but don't store them

00:12:44,110 --> 00:12:49,449
somewhere persistently and then you use

00:12:47,589 --> 00:12:52,839
those tokens for the remainder of your

00:12:49,449 --> 00:12:54,699
whatever you're doing but the next time

00:12:52,839 --> 00:12:56,529
the user visits it doesn't want to

00:12:54,699 --> 00:12:57,760
authenticate again because it is before

00:12:56,529 --> 00:12:59,360
every you don't want to enter your

00:12:57,760 --> 00:13:02,119
credentials again and again again it

00:12:59,360 --> 00:13:05,449
it's annoying so you do a sound request

00:13:02,119 --> 00:13:07,279
in an iframe and you just request in the

00:13:05,449 --> 00:13:09,350
new tokens but because this cookie has

00:13:07,279 --> 00:13:11,269
been set to dit from this domain and

00:13:09,350 --> 00:13:15,799
saved in the browser okay should

00:13:11,269 --> 00:13:17,929
actually be at the bottom right it can

00:13:15,799 --> 00:13:20,089
just send you your tokens because it

00:13:17,929 --> 00:13:22,549
knows that because of this cookie you

00:13:20,089 --> 00:13:25,309
have been able to authenticate before so

00:13:22,549 --> 00:13:27,649
it's a valid session cookie and then you

00:13:25,309 --> 00:13:29,689
can use your tokens to access or to

00:13:27,649 --> 00:13:33,709
request the data you want or do the

00:13:29,689 --> 00:13:38,809
actions you want to do and you get back

00:13:33,709 --> 00:13:40,970
Jason but note that the ietf the

00:13:38,809 --> 00:13:42,649
internet engineering task force is not

00:13:40,970 --> 00:13:45,920
recommended to use of this implicit flow

00:13:42,649 --> 00:13:48,529
anymore since a month or two there has

00:13:45,920 --> 00:13:50,319
been a few papers written to not use

00:13:48,529 --> 00:13:53,119
this flow anymore because there's some

00:13:50,319 --> 00:13:56,389
security vulnerabilities vulnerabilities

00:13:53,119 --> 00:13:59,420
which can cause attackers to steal your

00:13:56,389 --> 00:14:02,089
tokens and you don't want that so

00:13:59,420 --> 00:14:05,059
yesterday night I think they finalized

00:14:02,089 --> 00:14:07,970
their recommendation to not use this if

00:14:05,059 --> 00:14:09,889
you don't need to but they don't say to

00:14:07,970 --> 00:14:12,829
just start changing all your

00:14:09,889 --> 00:14:14,779
applications now if you just consider

00:14:12,829 --> 00:14:17,559
the security risks risks you're still

00:14:14,779 --> 00:14:21,139
okay which is for future applications

00:14:17,559 --> 00:14:22,399
try not to use this one where

00:14:21,139 --> 00:14:24,739
everybody's there the whole working

00:14:22,399 --> 00:14:26,660
group so I'm going on trying to figure

00:14:24,739 --> 00:14:29,169
out how to do it more security they're

00:14:26,660 --> 00:14:31,819
going to start writing paper about this

00:14:29,169 --> 00:14:36,199
there's no real guidelines yet except

00:14:31,819 --> 00:14:37,249
that try to do it as safe as possible so

00:14:36,199 --> 00:14:40,519
yeah there's something you should know

00:14:37,249 --> 00:14:42,559
about implicit flow and the last one is

00:14:40,519 --> 00:14:44,629
native mobile desktop which uses the

00:14:42,559 --> 00:14:47,660
authorization code to the PGCE grant

00:14:44,629 --> 00:14:49,610
flow which looks a bit like this your

00:14:47,660 --> 00:14:53,089
mobile app wants data you give it data

00:14:49,610 --> 00:14:55,220
same as any other flow but when when you

00:14:53,089 --> 00:14:56,869
want to authenticate your app is going

00:14:55,220 --> 00:14:58,910
to send a code challenge which is

00:14:56,869 --> 00:15:01,839
usually a hash of a secret stored inside

00:14:58,910 --> 00:15:05,959
the app to your authorization server and

00:15:01,839 --> 00:15:08,269
gets back a code then you send that code

00:15:05,959 --> 00:15:10,699
together with your secret again to the

00:15:08,269 --> 00:15:12,000
third authorization server and if all of

00:15:10,699 --> 00:15:14,270
these matches and

00:15:12,000 --> 00:15:17,040
it determines that it's you who

00:15:14,270 --> 00:15:21,240
initiated to flow it will send bat

00:15:17,040 --> 00:15:24,090
tokens and you can use those tokens to

00:15:21,240 --> 00:15:25,800
get data from the API this is a bit more

00:15:24,090 --> 00:15:27,390
secure but you need to be able to store

00:15:25,800 --> 00:15:29,550
your secret and your ID

00:15:27,390 --> 00:15:31,920
especially your secret somewhere safely

00:15:29,550 --> 00:15:35,160
and a mobile app can do this a server

00:15:31,920 --> 00:15:37,530
can do this a desktop a a web app cannot

00:15:35,160 --> 00:15:40,440
really do this so we cannot use this

00:15:37,530 --> 00:15:42,300
flow with a single page applications but

00:15:40,440 --> 00:15:43,470
we're working on a way to kindly do

00:15:42,300 --> 00:15:47,240
something like this because it's the

00:15:43,470 --> 00:15:50,640
most secure flow and you get back data

00:15:47,240 --> 00:15:53,400
so in summary mother application is

00:15:50,640 --> 00:15:56,520
complex because there's a lot of flows

00:15:53,400 --> 00:15:58,410
there's a lot of rules this grants and

00:15:56,520 --> 00:16:01,980
stuff so you have to kinda know which

00:15:58,410 --> 00:16:04,530
flow fits in which scenario and if you

00:16:01,980 --> 00:16:06,360
know this you can kind of just implement

00:16:04,530 --> 00:16:07,560
it in a safe and secure way and as

00:16:06,360 --> 00:16:09,900
you're using the implicit flower then

00:16:07,560 --> 00:16:13,590
you have to check some other stuff or

00:16:09,900 --> 00:16:16,170
not use it anymore all the to offer

00:16:13,590 --> 00:16:18,450
solutions flows for most use cases like

00:16:16,170 --> 00:16:20,880
I said it doesn't mean that I just

00:16:18,450 --> 00:16:22,050
you chose a use case with it with a

00:16:20,880 --> 00:16:23,910
certain flower that you cannot use

00:16:22,050 --> 00:16:28,170
another flow but these are some common

00:16:23,910 --> 00:16:30,960
patterns to use there's a bunch of

00:16:28,170 --> 00:16:33,810
platforms like web Maps API single page

00:16:30,960 --> 00:16:37,370
and native apps so try to use the best

00:16:33,810 --> 00:16:39,720
flow possible for your project and

00:16:37,370 --> 00:16:41,760
implementing earth-2 can provide a

00:16:39,720 --> 00:16:43,800
competitive advantage because it's based

00:16:41,760 --> 00:16:45,480
on standards there's also more people

00:16:43,800 --> 00:16:47,910
who think about these standards when

00:16:45,480 --> 00:16:49,140
there's issues coming awareness issues

00:16:47,910 --> 00:16:51,120
being found with these standards like

00:16:49,140 --> 00:16:53,790
the implicit flow they try to figure out

00:16:51,120 --> 00:16:57,240
a better way to implement authentication

00:16:53,790 --> 00:16:58,980
based on these standards here's a bunch

00:16:57,240 --> 00:16:59,310
of resources if you're interested in

00:16:58,980 --> 00:17:06,350
auth

00:16:59,310 --> 00:17:06,350
- thank you are there questions yeah

00:17:06,359 --> 00:17:18,780
[Music]

00:17:10,520 --> 00:17:20,400
we saw yes so you send your excess

00:17:18,780 --> 00:17:21,870
tokens usually to your to your resource

00:17:20,400 --> 00:17:23,670
server and usually there's some

00:17:21,870 --> 00:17:26,160
middleware going on which checks those

00:17:23,670 --> 00:17:27,959
tokens if they're valid or not and if

00:17:26,160 --> 00:17:30,510
they're valid it shows you the data but

00:17:27,959 --> 00:17:32,670
it doesn't really have to go and through

00:17:30,510 --> 00:17:33,930
the process of checking your user name

00:17:32,670 --> 00:17:35,790
and password or whatever at the

00:17:33,930 --> 00:17:45,840
authentication method you use because it

00:17:35,790 --> 00:17:47,850
can validate those tokens well there's a

00:17:45,840 --> 00:17:49,740
bunch of different ways that you can do

00:17:47,850 --> 00:17:51,630
this if you use something like JSON web

00:17:49,740 --> 00:17:53,790
tokens they contain a bunch of data

00:17:51,630 --> 00:17:55,230
inside of them and they're signs so if

00:17:53,790 --> 00:17:57,090
you have a shared secret or a shared

00:17:55,230 --> 00:17:58,560
public key and private key between the

00:17:57,090 --> 00:18:00,960
authorization server and the resource

00:17:58,560 --> 00:18:04,050
server they can validate that this is a

00:18:00,960 --> 00:18:05,160
site still valid access token and they

00:18:04,050 --> 00:18:06,540
don't really need to contact the

00:18:05,160 --> 00:18:08,250
authorization server other

00:18:06,540 --> 00:18:11,190
implementations require you to still

00:18:08,250 --> 00:18:12,450
check that code at the authorization

00:18:11,190 --> 00:18:15,530
server so it depends on your

00:18:12,450 --> 00:18:19,100
implementation any other questions

00:18:15,530 --> 00:18:21,920
let's get lunch then

00:18:19,100 --> 00:18:27,049
[Applause]

00:18:21,920 --> 00:18:27,049

YouTube URL: https://www.youtube.com/watch?v=TJ9auVKA1mM


