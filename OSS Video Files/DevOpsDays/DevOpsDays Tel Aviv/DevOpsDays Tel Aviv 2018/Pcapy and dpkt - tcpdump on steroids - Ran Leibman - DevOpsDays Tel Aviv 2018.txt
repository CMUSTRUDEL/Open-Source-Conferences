Title: Pcapy and dpkt - tcpdump on steroids - Ran Leibman - DevOpsDays Tel Aviv 2018
Publication date: 2019-01-03
Playlist: DevOpsDays Tel Aviv 2018
Description: 
	Tcpdump is awesome for debugging issues on the network layer. But sometime you want to do a bit more, like look into the application layers or do some aggregation. In this talk Iâ€™m going to show you how to use python together with the pcapy and dpkt modules to take tcpdump to the next level.
Captions: 
	00:00:01,980 --> 00:00:09,030
[Music]

00:00:06,210 --> 00:00:12,929
first of all sorry about my voice this

00:00:09,030 --> 00:00:14,549
is what I have now my name is Ron and

00:00:12,929 --> 00:00:16,980
the production engineer in Facebook and

00:00:14,549 --> 00:00:19,609
I'm going to talk about how to create

00:00:16,980 --> 00:00:22,260
your own network troubleshooting tools

00:00:19,609 --> 00:00:25,470
so before we do that let's talk about

00:00:22,260 --> 00:00:27,570
what tools we have today everybody I

00:00:25,470 --> 00:00:30,330
think knows TCP dump you can see in

00:00:27,570 --> 00:00:32,610
network packets using the CLI you can

00:00:30,330 --> 00:00:35,070
setup your own pick up filter to target

00:00:32,610 --> 00:00:36,570
what kind of traffic that you want and

00:00:35,070 --> 00:00:39,300
then you can just see the packets in

00:00:36,570 --> 00:00:42,660
line additionally we have Wireshark to

00:00:39,300 --> 00:00:46,559
have the UI version of TCP dump which

00:00:42,660 --> 00:00:50,719
does basically the same disappeared um

00:00:46,559 --> 00:00:54,660
actually uses lip pickup which is a C++

00:00:50,719 --> 00:00:56,460
C++ library that reading the packets

00:00:54,660 --> 00:00:59,460
from the kernel without interrupting

00:00:56,460 --> 00:01:01,710
user traffic and TCP dump is using that

00:00:59,460 --> 00:01:05,939
and while shack using that in order to

00:01:01,710 --> 00:01:08,250
do what it does so what the CDP dump is

00:01:05,939 --> 00:01:10,290
not good for so it's really hard to

00:01:08,250 --> 00:01:12,270
integrate TCP dump or network sniffing

00:01:10,290 --> 00:01:16,080
into other systems so think about like

00:01:12,270 --> 00:01:19,110
doing TCP dump pipe pass this nasty

00:01:16,080 --> 00:01:21,060
output by do I don't know send it to a

00:01:19,110 --> 00:01:25,220
database or something like that super

00:01:21,060 --> 00:01:28,020
hard super nasty also it's very hard to

00:01:25,220 --> 00:01:30,780
get visibility or filtering based on the

00:01:28,020 --> 00:01:33,390
application layer so think about like I

00:01:30,780 --> 00:01:36,540
want to filter all the HTTP requests

00:01:33,390 --> 00:01:39,299
that has this method from the network

00:01:36,540 --> 00:01:41,400
stack it's very hard because we TCP dump

00:01:39,299 --> 00:01:44,340
is only a well to the the raw packets

00:01:41,400 --> 00:01:47,570
themselves and also do like any other of

00:01:44,340 --> 00:01:49,560
kind of applications extremely hard so

00:01:47,570 --> 00:01:52,290
what I'm going to talk about today is be

00:01:49,560 --> 00:01:54,930
copy the copy is a Python module and

00:01:52,290 --> 00:01:57,570
Python is awesome and Python is better

00:01:54,930 --> 00:01:58,920
than hobby I was supposed I further

00:01:57,570 --> 00:02:03,799
might tell me not to say that so I'm

00:01:58,920 --> 00:02:03,799
saying that just saying

00:02:04,120 --> 00:02:09,220
it's pick a filter compatible and it's

00:02:06,640 --> 00:02:10,990
super easy to use and it's actually

00:02:09,220 --> 00:02:13,000
using lip pickup behind behind the

00:02:10,990 --> 00:02:16,990
scenes so let's see some examples

00:02:13,000 --> 00:02:18,850
this speed-up in Python done this is

00:02:16,990 --> 00:02:20,980
just a code that you can take copy paste

00:02:18,850 --> 00:02:22,600
and run it on your laptop the main thing

00:02:20,980 --> 00:02:25,690
to see here is that we are listening to

00:02:22,600 --> 00:02:30,130
it here zero and again setting up the

00:02:25,690 --> 00:02:32,440
filter then we configure the copy to use

00:02:30,130 --> 00:02:34,660
the callback function to for each packet

00:02:32,440 --> 00:02:37,570
to do something and this is now just

00:02:34,660 --> 00:02:38,950
print the raw packets to the terminal so

00:02:37,570 --> 00:02:41,260
it's not really disappear done because

00:02:38,950 --> 00:02:43,600
you just see the blob of the packet and

00:02:41,260 --> 00:02:45,240
you won't see anything interesting in

00:02:43,600 --> 00:02:47,650
order to solve that you can use

00:02:45,240 --> 00:02:49,450
difficulty which is another model that

00:02:47,650 --> 00:02:52,630
allows you to pass the actual packets

00:02:49,450 --> 00:02:56,770
into meaningful protocols such as DNS

00:02:52,630 --> 00:03:01,390
TCP UDP HTTP whatever even samba

00:02:56,770 --> 00:03:03,340
apparently another example DNS 2 dB so

00:03:01,390 --> 00:03:05,470
let's take all of the DNS queries from

00:03:03,340 --> 00:03:07,810
the network and send them to a database

00:03:05,470 --> 00:03:11,080
and then do something with it pretty

00:03:07,810 --> 00:03:13,300
easy the same thing only the things

00:03:11,080 --> 00:03:16,420
difference here is that instead of

00:03:13,300 --> 00:03:20,140
targeting port 22 I'm targeting UDP and

00:03:16,420 --> 00:03:23,190
destination port 53 and I'm using here

00:03:20,140 --> 00:03:25,390
the duplicate module in order to get the

00:03:23,190 --> 00:03:27,670
hostname that I'm trying to resolve and

00:03:25,390 --> 00:03:29,910
the type of query that I'm doing so if

00:03:27,670 --> 00:03:31,959
it's a cname of an a record or whatever

00:03:29,910 --> 00:03:34,930
and then I'm just logging into my

00:03:31,959 --> 00:03:36,880
database whatever it is and then I can

00:03:34,930 --> 00:03:38,950
do something like this I can see the top

00:03:36,880 --> 00:03:40,930
seven DNS queries on my network if I run

00:03:38,950 --> 00:03:43,030
this on like the servers that I want or

00:03:40,930 --> 00:03:46,780
the laptops that I want or you know

00:03:43,030 --> 00:03:50,520
whatever you you try to - so in summary

00:03:46,780 --> 00:03:53,680
we have lip pickup TCP dump uses uses

00:03:50,520 --> 00:03:54,550
only pickup but it's not as good so we

00:03:53,680 --> 00:03:56,860
can use P copy

00:03:54,550 --> 00:03:57,890
in order to write your own tools that's

00:03:56,860 --> 00:04:02,700
it

00:03:57,890 --> 00:04:08,210
[Applause]

00:04:02,700 --> 00:04:08,210

YouTube URL: https://www.youtube.com/watch?v=9DUMM8V9Qh4


