Title: Want to do the DevOps? Change Everything - Ken Mugrage - DevOpsDays Tel Aviv 2018
Publication date: 2019-01-03
Playlist: DevOpsDays Tel Aviv 2018
Description: 
	Implementing DevOps can sound relatively simple. You just get the latest configuration management tool, implement the latest container orchestration or move to the cloud, right?

The truth is that a successful adoption means a series of intertwined changes, all of which are required.
Captions: 
	00:00:05,420 --> 00:00:12,960
so folks may have seen this quote Werner

00:00:09,030 --> 00:00:16,260
Vogel's CTO of Amazon gave this quote in

00:00:12,960 --> 00:00:19,050
an interview in 2006 so it's been what

00:00:16,260 --> 00:00:20,640
12 years ago now says you build it you

00:00:19,050 --> 00:00:21,750
run it you saw a little bit about it

00:00:20,640 --> 00:00:24,449
this morning you know the two pizza

00:00:21,750 --> 00:00:26,039
teams etc we're the same people that

00:00:24,449 --> 00:00:27,539
build the software at Amazon are

00:00:26,039 --> 00:00:31,289
expected actually to run that same

00:00:27,539 --> 00:00:33,450
software in production same year in 2006

00:00:31,289 --> 00:00:35,820
three folks who used to work for us at

00:00:33,450 --> 00:00:38,239
the time did a white paper in abyssal

00:00:35,820 --> 00:00:40,890
2006 called the software production line

00:00:38,239 --> 00:00:42,600
which then became the continuous

00:00:40,890 --> 00:00:45,780
delivery books that was just humble and

00:00:42,600 --> 00:00:48,809
Chris Reid and Dan North that book came

00:00:45,780 --> 00:00:49,980
out I think in about 2010 DevOps days

00:00:48,809 --> 00:00:51,600
started in 2009

00:00:49,980 --> 00:00:53,430
I think everybody's heard several times

00:00:51,600 --> 00:00:56,039
by now it's where the term DevOps came

00:00:53,430 --> 00:00:57,329
from and you know we look at these

00:00:56,039 --> 00:01:00,719
things all these things that happen and

00:00:57,329 --> 00:01:01,559
we're like why what was the driver you

00:01:00,719 --> 00:01:02,940
know I can tell you that it thought

00:01:01,559 --> 00:01:06,240
works with continuous delivery at least

00:01:02,940 --> 00:01:08,070
we saw this as the last mile of agile we

00:01:06,240 --> 00:01:08,880
thought of fulfilling the agile promise

00:01:08,070 --> 00:01:10,560
that's actually where the term

00:01:08,880 --> 00:01:14,189
continuous delivery came from from the

00:01:10,560 --> 00:01:16,259
agile manifesto and a lot of people then

00:01:14,189 --> 00:01:17,729
said oh okay so DevOps means I don't

00:01:16,259 --> 00:01:20,369
have to have operations people anymore I

00:01:17,729 --> 00:01:22,080
don't have to have you know systems

00:01:20,369 --> 00:01:25,229
anymore and we're doing is gonna be

00:01:22,080 --> 00:01:26,610
magic what's funny though is if you look

00:01:25,229 --> 00:01:28,650
at the entire article and I'm not going

00:01:26,610 --> 00:01:31,950
to show you the whole thing the entire

00:01:28,650 --> 00:01:33,840
article from Werner's quote the reason

00:01:31,950 --> 00:01:35,460
that they did this is because they

00:01:33,840 --> 00:01:38,369
wanted to bring the development teams

00:01:35,460 --> 00:01:40,710
into closer contact with the end user

00:01:38,369 --> 00:01:42,240
customer it's the reason we did a lot of

00:01:40,710 --> 00:01:45,000
our early continuous delivery work as

00:01:42,240 --> 00:01:46,020
well things like the a/b testing that

00:01:45,000 --> 00:01:47,610
you heard about this morning and

00:01:46,020 --> 00:01:49,320
measuring the effectiveness of software

00:01:47,610 --> 00:01:51,600
and getting prototypes out into the

00:01:49,320 --> 00:01:54,780
hands of users and things like that

00:01:51,600 --> 00:01:56,040
that's why we have you build it you run

00:01:54,780 --> 00:01:57,229
it that's why we want continuous

00:01:56,040 --> 00:01:59,880
delivery that's why we want fast

00:01:57,229 --> 00:02:02,159
response and so forth it's actually not

00:01:59,880 --> 00:02:04,590
about cost savings or not having

00:02:02,159 --> 00:02:07,079
operations or you know using the cloud

00:02:04,590 --> 00:02:09,380
or all the other magic things so there's

00:02:07,079 --> 00:02:12,110
a lot that goes into it

00:02:09,380 --> 00:02:13,880
so the longer title that it's in your

00:02:12,110 --> 00:02:15,380
agenda of this talk is actually you only

00:02:13,880 --> 00:02:17,360
have to change one thing to do the

00:02:15,380 --> 00:02:19,160
DevOps because I see people all the time

00:02:17,360 --> 00:02:22,040
that like okay I'm gonna take everything

00:02:19,160 --> 00:02:23,480
I have in automating or I'm not gonna

00:02:22,040 --> 00:02:25,640
change anything about my architecture

00:02:23,480 --> 00:02:27,860
but I'm gonna you know come up with new

00:02:25,640 --> 00:02:29,240
words or what have you so yeah you only

00:02:27,860 --> 00:02:32,720
have to change one thing but the catch

00:02:29,240 --> 00:02:34,520
is it's everything okay because this

00:02:32,720 --> 00:02:36,260
really is it has to be a holistic thing

00:02:34,520 --> 00:02:38,240
it you can't just change one part and

00:02:36,260 --> 00:02:40,610
operate everything else the way it's

00:02:38,240 --> 00:02:42,140
supposed to be or was and expect massive

00:02:40,610 --> 00:02:46,190
change sometimes you'd have to be

00:02:42,140 --> 00:02:47,690
disruptive in this world so the good old

00:02:46,190 --> 00:02:49,100
spoiler slide that we're sending gonna

00:02:47,690 --> 00:02:50,150
go through here some of it some of the

00:02:49,100 --> 00:02:52,250
changes I'm going to try to encourage

00:02:50,150 --> 00:02:54,110
you to do is first make sure you're

00:02:52,250 --> 00:02:56,000
defining these terms so that you agree

00:02:54,110 --> 00:02:59,180
it's at least inside your organization

00:02:56,000 --> 00:03:01,610
what these different things mean it

00:02:59,180 --> 00:03:04,040
might be organizational change you know

00:03:01,610 --> 00:03:05,420
the to pizza team type thing you may

00:03:04,040 --> 00:03:08,930
need to really tech some of your

00:03:05,420 --> 00:03:11,120
software and the point of continuous

00:03:08,930 --> 00:03:12,980
delivery isn't actually just to get

00:03:11,120 --> 00:03:14,750
stuff out there faster is to get out

00:03:12,980 --> 00:03:18,680
there safely so we're gonna talk a

00:03:14,750 --> 00:03:19,790
little bit about that so if anyone saw

00:03:18,680 --> 00:03:21,830
their little lightning talk yesterday

00:03:19,790 --> 00:03:24,530
yard you know this part I work for

00:03:21,830 --> 00:03:26,270
thought works I'm from Seattle nice just

00:03:24,530 --> 00:03:27,680
short trip here

00:03:26,270 --> 00:03:29,930
I teach continues delivery dev officer

00:03:27,680 --> 00:03:32,690
that works been about 10 years one of

00:03:29,930 --> 00:03:34,280
the devastates court organizers there's

00:03:32,690 --> 00:03:38,240
one of your three Twitter people if you

00:03:34,280 --> 00:03:42,200
want to reach out okay so when I talk

00:03:38,240 --> 00:03:43,610
about defining words now I'm going to go

00:03:42,200 --> 00:03:44,540
through this and I want to say I'm gonna

00:03:43,610 --> 00:03:45,950
I'm gonna show you some things that I

00:03:44,540 --> 00:03:48,170
don't think DevOps is a material things

00:03:45,950 --> 00:03:50,780
I think DevOps isn't it is and etcetera

00:03:48,170 --> 00:03:53,030
it's not important that you agree with

00:03:50,780 --> 00:03:54,980
me it's important that you know what I

00:03:53,030 --> 00:03:56,660
mean when I say the words for the rest

00:03:54,980 --> 00:03:59,180
of this presentation so that you

00:03:56,660 --> 00:04:00,500
understand the context otherwise the

00:03:59,180 --> 00:04:02,570
whole thing gets misconstrued right and

00:04:00,500 --> 00:04:04,640
I think the same thing is true inside

00:04:02,570 --> 00:04:06,470
your organization I'm going to show you

00:04:04,640 --> 00:04:08,000
my definition of DevOps because the

00:04:06,470 --> 00:04:10,400
original founders Stephen and Patrick

00:04:08,000 --> 00:04:11,450
and etc didn't define it on purpose

00:04:10,400 --> 00:04:13,880
because they want you to have your own

00:04:11,450 --> 00:04:15,410
I'm going to show you my definition come

00:04:13,880 --> 00:04:17,020
up with your own if you'd like but put

00:04:15,410 --> 00:04:19,609
it on the wall so that in your team's

00:04:17,020 --> 00:04:21,530
that when you say the words people mean

00:04:19,609 --> 00:04:22,610
the same thing you know if you want to

00:04:21,530 --> 00:04:24,229
call it a DevOps pipeline

00:04:22,610 --> 00:04:26,000
please don't do it in front of me but

00:04:24,229 --> 00:04:28,490
that's okay is people know what you're

00:04:26,000 --> 00:04:33,740
doing to do it okay so first off what is

00:04:28,490 --> 00:04:36,080
in DevOps it's not a toolset okay so if

00:04:33,740 --> 00:04:37,370
you need better monitoring by all means

00:04:36,080 --> 00:04:38,870
get a better monitoring tool if you need

00:04:37,370 --> 00:04:39,740
better continuous delivery pipelines get

00:04:38,870 --> 00:04:42,560
a pipeline tool

00:04:39,740 --> 00:04:45,620
there's no DevOps tool okay these are

00:04:42,560 --> 00:04:47,689
it's it's it's still logging okay the

00:04:45,620 --> 00:04:49,189
cloud is still computers get the thing

00:04:47,689 --> 00:04:52,699
you need and don't be caught up in there

00:04:49,189 --> 00:04:54,229
too much apologies to those with the

00:04:52,699 --> 00:04:57,680
title of DevOps engineer but it's also

00:04:54,229 --> 00:04:59,180
not supposed to be a role now this is

00:04:57,680 --> 00:05:00,830
reality though if I want to hire a

00:04:59,180 --> 00:05:02,689
person with a certain skill set or if

00:05:00,830 --> 00:05:04,550
I'm that person and I want to find a job

00:05:02,689 --> 00:05:06,800
what you're going to Google for is

00:05:04,550 --> 00:05:09,020
DevOps engineer that's the reality but

00:05:06,800 --> 00:05:10,129
in the implementation please don't think

00:05:09,020 --> 00:05:13,129
of it as an individual that's

00:05:10,129 --> 00:05:15,199
responsible for doing the DevOps and

00:05:13,129 --> 00:05:17,300
I'll get a lot more into this one I also

00:05:15,199 --> 00:05:20,419
don't think it's a team not a big fan of

00:05:17,300 --> 00:05:22,699
the whole idea of a DevOps team one

00:05:20,419 --> 00:05:24,650
thing that helps me in this is don't

00:05:22,699 --> 00:05:27,740
think of DevOps as developers and

00:05:24,650 --> 00:05:30,080
operators the nouns because what about

00:05:27,740 --> 00:05:31,759
UX and marketing and sales and thinking

00:05:30,080 --> 00:05:35,029
okay think about it as the verbs

00:05:31,759 --> 00:05:37,759
developing and operating so it's the

00:05:35,029 --> 00:05:40,729
people that are involved in developing

00:05:37,759 --> 00:05:42,110
and operating software systems etc so

00:05:40,729 --> 00:05:44,270
that means it is security it is

00:05:42,110 --> 00:05:48,560
compliance it is UX it is all the kinds

00:05:44,270 --> 00:05:50,180
of testing you know etc one of the older

00:05:48,560 --> 00:05:52,099
things that came out for defining DevOps

00:05:50,180 --> 00:05:53,419
was this thing Cam's John Willis was

00:05:52,099 --> 00:05:55,069
another one of the 50 people at the

00:05:53,419 --> 00:05:56,449
first one he's the one that brought it

00:05:55,069 --> 00:05:58,449
back to the US by DevOps dates back to

00:05:56,449 --> 00:06:01,250
the US and he came up with anachronism

00:05:58,449 --> 00:06:04,460
acronym that's very commonly used I like

00:06:01,250 --> 00:06:07,009
it a lot culture automation measurement

00:06:04,460 --> 00:06:09,500
and sharing the blog entry is there it's

00:06:07,009 --> 00:06:11,719
from 2010 please do go ahead and read it

00:06:09,500 --> 00:06:15,199
most people will only think of only the

00:06:11,719 --> 00:06:17,300
automation okay but measurement the a/b

00:06:15,199 --> 00:06:19,550
testing is what we're deploying actually

00:06:17,300 --> 00:06:21,849
effective you know sharing coming to

00:06:19,550 --> 00:06:23,750
here and how do you do the kubernetes

00:06:21,849 --> 00:06:25,699
that kind of thing is also very

00:06:23,750 --> 00:06:28,279
important to it

00:06:25,699 --> 00:06:29,810
Jess Humble who wrote coordinately

00:06:28,279 --> 00:06:32,209
enterprise continuous delivery likes to

00:06:29,810 --> 00:06:33,830
stick lean in the middle I will tell you

00:06:32,209 --> 00:06:35,980
that most organizations I see that do

00:06:33,830 --> 00:06:37,990
effective continuous delivery meaning

00:06:35,980 --> 00:06:39,730
deploy on-demand and that kind of thing

00:06:37,990 --> 00:06:42,070
are not using iterative development

00:06:39,730 --> 00:06:46,960
they're using more things like lean flow

00:06:42,070 --> 00:06:52,330
and work-in-progress etc okay this is my

00:06:46,960 --> 00:06:53,350
definition of DevOps now again notice

00:06:52,330 --> 00:06:55,150
that it says culture there

00:06:53,350 --> 00:06:56,650
it doesn't say automation you know I

00:06:55,150 --> 00:06:57,910
work for a consulting company that makes

00:06:56,650 --> 00:07:00,400
a canoeist delivery tool it doesn't say

00:06:57,910 --> 00:07:03,520
misdelivery it's a culture of people

00:07:00,400 --> 00:07:04,930
working together okay so that's what's

00:07:03,520 --> 00:07:07,690
important to have all the have all the

00:07:04,930 --> 00:07:08,680
viewpoints and so forth again on the

00:07:07,690 --> 00:07:10,840
blog there there's a detailed

00:07:08,680 --> 00:07:16,270
description of what that means but this

00:07:10,840 --> 00:07:18,520
is what I mean when I say it so often to

00:07:16,270 --> 00:07:20,230
get to this plane does mean changing

00:07:18,520 --> 00:07:21,520
your organization I just said it's a

00:07:20,230 --> 00:07:23,470
team of people that are you know it's

00:07:21,520 --> 00:07:26,170
cross platform or across talent whatever

00:07:23,470 --> 00:07:28,120
you want to call it so a lot of times

00:07:26,170 --> 00:07:29,920
this means organizational change in fact

00:07:28,120 --> 00:07:31,900
if you really only did change one thing

00:07:29,920 --> 00:07:34,060
it's probably your org it's probably not

00:07:31,900 --> 00:07:36,730
your software it's definitely not your

00:07:34,060 --> 00:07:38,950
tools so what we want to do is look at

00:07:36,730 --> 00:07:40,900
the traditional model if anyone's ever

00:07:38,950 --> 00:07:43,270
taken agile 101 training some of this is

00:07:40,900 --> 00:07:45,880
from courses that we were doing us old

00:07:43,270 --> 00:07:47,590
people like 15 20 years ago

00:07:45,880 --> 00:07:49,090
you have your development teams then you

00:07:47,590 --> 00:07:50,470
have your testing team and that could be

00:07:49,090 --> 00:07:52,720
compliance could be security call it

00:07:50,470 --> 00:07:54,220
whatever you want and the operations

00:07:52,720 --> 00:07:56,620
team and in between them there are the

00:07:54,220 --> 00:07:58,240
walls and these are really a

00:07:56,620 --> 00:07:59,380
communication buffers we want to make

00:07:58,240 --> 00:08:00,550
sure that we don't understand each other

00:07:59,380 --> 00:08:01,240
because that would be bad you know we

00:08:00,550 --> 00:08:04,300
would want to know what's actually

00:08:01,240 --> 00:08:06,010
happening and you know and they don't

00:08:04,300 --> 00:08:07,330
talk to each other they don't know why I

00:08:06,010 --> 00:08:08,710
loved that some of the talks this

00:08:07,330 --> 00:08:11,710
morning yesterday both talked about the

00:08:08,710 --> 00:08:16,300
why why are we doing this thing what is

00:08:11,710 --> 00:08:17,590
the goal you know etc I can't believe I

00:08:16,300 --> 00:08:19,120
think I think I'm actually the first one

00:08:17,590 --> 00:08:22,900
at this DevOps days which is really rare

00:08:19,120 --> 00:08:25,360
on day two to use Conway's law which is

00:08:22,900 --> 00:08:27,070
this basically it's saying that your

00:08:25,360 --> 00:08:29,320
systems going to end up mirroring your

00:08:27,070 --> 00:08:32,650
organizational structure this paper was

00:08:29,320 --> 00:08:34,419
originally written 50 years ago so it

00:08:32,650 --> 00:08:37,000
won't really Mel wasn't really talking

00:08:34,419 --> 00:08:39,190
about software systems they were talking

00:08:37,000 --> 00:08:41,169
about infrastructure and so forth but it

00:08:39,190 --> 00:08:43,780
is true if you have an organization

00:08:41,169 --> 00:08:44,710
inside you're like you know a team

00:08:43,780 --> 00:08:46,120
inside your organization it's

00:08:44,710 --> 00:08:47,820
responsible credit cards you're going to

00:08:46,120 --> 00:08:50,670
have a module that does credit cards

00:08:47,820 --> 00:08:53,550
moment or service or what have you and

00:08:50,670 --> 00:08:56,100
so we go back to our traditional model

00:08:53,550 --> 00:08:58,730
here now only you're gonna be a very

00:08:56,100 --> 00:09:01,560
slight change on the slide renaming

00:08:58,730 --> 00:09:03,870
operations team to DevOps team does not

00:09:01,560 --> 00:09:07,620
solve the problem okay

00:09:03,870 --> 00:09:08,760
sorry now I know there's different skill

00:09:07,620 --> 00:09:11,610
sets we're gonna you know know Amazon

00:09:08,760 --> 00:09:13,020
and Google cloud etc but it's really not

00:09:11,610 --> 00:09:16,950
just the same thing with a different

00:09:13,020 --> 00:09:19,590
name that's not the goal by the same

00:09:16,950 --> 00:09:20,940
token there gonna be toward the end of

00:09:19,590 --> 00:09:22,920
the talk talking about platforms which

00:09:20,940 --> 00:09:25,230
is an exception to this but I'm also not

00:09:22,920 --> 00:09:27,050
a fan of the DevOps team that creates

00:09:25,230 --> 00:09:29,370
the automation that everybody else uses

00:09:27,050 --> 00:09:32,790
because what is this do this solves the

00:09:29,370 --> 00:09:34,380
a in cams or calms the automation but it

00:09:32,790 --> 00:09:36,360
doesn't solve culture measurement

00:09:34,380 --> 00:09:37,440
sharing etc the operations people who

00:09:36,360 --> 00:09:39,510
are getting paged at 3:00 in the morning

00:09:37,440 --> 00:09:42,390
cuz the system's down still don't know

00:09:39,510 --> 00:09:43,740
why the system's tried to do that ok the

00:09:42,390 --> 00:09:44,820
people that are doing the testing don't

00:09:43,740 --> 00:09:45,870
know exactly what's going on the

00:09:44,820 --> 00:09:48,150
compliance people don't know what

00:09:45,870 --> 00:09:49,650
systems you touched you know etc so it

00:09:48,150 --> 00:09:52,050
doesn't solve any of the communication

00:09:49,650 --> 00:09:56,160
gaps it might solve the automation but

00:09:52,050 --> 00:09:57,180
it won't solve the communication and so

00:09:56,160 --> 00:09:59,820
this is where we start encouraging

00:09:57,180 --> 00:10:02,220
product teams so this is the Amazon

00:09:59,820 --> 00:10:03,840
through Pizza team and American pizzas

00:10:02,220 --> 00:10:08,160
are really big so I don't know how big

00:10:03,840 --> 00:10:10,410
these pizzas are but but this the idea

00:10:08,160 --> 00:10:12,600
here is products over projects and

00:10:10,410 --> 00:10:13,950
you'll see that everywhere there's this

00:10:12,600 --> 00:10:16,800
thing on our chief scientist Martin

00:10:13,950 --> 00:10:18,990
Fowler has a big blog on it the founder

00:10:16,800 --> 00:10:21,500
at a stop just wrote a book on it etc

00:10:18,990 --> 00:10:24,180
it's the idea of having a product team

00:10:21,500 --> 00:10:26,610
that is a long-running thing it's not a

00:10:24,180 --> 00:10:28,770
project with a start and end date they

00:10:26,610 --> 00:10:32,070
own the thing and I'll get into more of

00:10:28,770 --> 00:10:34,290
what that means as we go along because

00:10:32,070 --> 00:10:37,320
what this enables is modern

00:10:34,290 --> 00:10:38,730
architectures and technologies one of

00:10:37,320 --> 00:10:39,690
the biggest things that we hear at least

00:10:38,730 --> 00:10:41,640
a thought works in our continuous

00:10:39,690 --> 00:10:43,290
delivery work is well you know that's

00:10:41,640 --> 00:10:44,670
great if you're a startup and you're you

00:10:43,290 --> 00:10:47,700
know doing micro services or whatever

00:10:44,670 --> 00:10:49,500
but you know we're got this big thing

00:10:47,700 --> 00:10:51,390
and we're you know etc well

00:10:49,500 --> 00:10:55,260
hewlett-packard did continuous delivery

00:10:51,390 --> 00:10:56,580
on their printers they've managed to

00:10:55,260 --> 00:10:58,050
find a way we're instead of having to

00:10:56,580 --> 00:11:01,830
physically test each one they could do

00:10:58,050 --> 00:11:04,140
CD on printer firmware they didn't do

00:11:01,830 --> 00:11:05,910
by developing a better pipeline they did

00:11:04,140 --> 00:11:08,520
it by rewriting the software that ran on

00:11:05,910 --> 00:11:09,960
the firmware took advantage of the fact

00:11:08,520 --> 00:11:11,610
that technology has changed and so forth

00:11:09,960 --> 00:11:13,980
so they actually had to change their

00:11:11,610 --> 00:11:15,180
product in order to do this but it went

00:11:13,980 --> 00:11:16,440
from where they were spending the vast

00:11:15,180 --> 00:11:17,910
majority of their time doing maintenance

00:11:16,440 --> 00:11:19,980
to spending the majority of their time

00:11:17,910 --> 00:11:21,450
doing new product features because now

00:11:19,980 --> 00:11:24,660
they could deliver faster and tests and

00:11:21,450 --> 00:11:27,120
so forth and so if you do have a big

00:11:24,660 --> 00:11:28,440
legacy monolith yeah just putting a

00:11:27,120 --> 00:11:29,880
pipeline on it you know putting Jenkins

00:11:28,440 --> 00:11:33,240
underneath it probably isn't gonna work

00:11:29,880 --> 00:11:35,490
they can be hard so a customer we had x'

00:11:33,240 --> 00:11:37,590
a travel company and you know typical

00:11:35,490 --> 00:11:40,260
monolith all functionalities in one

00:11:37,590 --> 00:11:42,330
process they were fairly early in a web

00:11:40,260 --> 00:11:44,220
based travel company late 90s was when

00:11:42,330 --> 00:11:46,620
they first started and so they had this

00:11:44,220 --> 00:11:47,970
massive monolith and when we first got

00:11:46,620 --> 00:11:50,580
there we're saying okay so what's your

00:11:47,970 --> 00:11:53,940
deployment schedule now we deploy once a

00:11:50,580 --> 00:11:55,440
week and well that's incredibly good for

00:11:53,940 --> 00:11:57,600
what you are and where you end this was

00:11:55,440 --> 00:11:59,480
a few years ago etc like yeah but it's

00:11:57,600 --> 00:12:02,550
the build that was done six months ago

00:11:59,480 --> 00:12:04,440
it's like oh okay nevermind so their

00:12:02,550 --> 00:12:06,210
time to market they might take three

00:12:04,440 --> 00:12:08,850
hours to change the feature but it was

00:12:06,210 --> 00:12:11,040
six months plus a week to actually get

00:12:08,850 --> 00:12:14,280
it to customers so they were very very

00:12:11,040 --> 00:12:16,590
very slow to respond the same token when

00:12:14,280 --> 00:12:18,180
they had to scale things they had to

00:12:16,590 --> 00:12:22,080
scale the entire application

00:12:18,180 --> 00:12:23,370
so like rental cars is a that's a really

00:12:22,080 --> 00:12:25,980
big thing in the United States we have

00:12:23,370 --> 00:12:27,690
horrible public transit it's a very

00:12:25,980 --> 00:12:29,370
large country people rent a car and they

00:12:27,690 --> 00:12:31,440
drive three hours instead of using other

00:12:29,370 --> 00:12:33,540
methods other countries rental cars

00:12:31,440 --> 00:12:36,630
aren't a big deal but if I wanted to

00:12:33,540 --> 00:12:39,150
make more rental car availability for

00:12:36,630 --> 00:12:40,680
Seattle where I live I also had to scale

00:12:39,150 --> 00:12:43,320
rental car availability for London where

00:12:40,680 --> 00:12:44,610
nobody hires a car okay so they're

00:12:43,320 --> 00:12:46,740
paying for infrastructure they're not

00:12:44,610 --> 00:12:48,690
using so it's not only time to market

00:12:46,740 --> 00:12:51,990
but also just scaling of the application

00:12:48,690 --> 00:12:54,660
itself and so buzzword time that's why

00:12:51,990 --> 00:12:57,540
they switched over to micro services so

00:12:54,660 --> 00:12:59,100
in this case what they're trying to do

00:12:57,540 --> 00:13:00,660
is solve this distinct problem so Sam

00:12:59,100 --> 00:13:02,490
Newman wrote a book called building

00:13:00,660 --> 00:13:05,040
micro services and he even he says

00:13:02,490 --> 00:13:06,420
Greenfield is actually not where you

00:13:05,040 --> 00:13:08,550
start so we're not I'm not saying

00:13:06,420 --> 00:13:10,320
Microsoft first because you don't know

00:13:08,550 --> 00:13:12,000
your business boundaries yet necessarily

00:13:10,320 --> 00:13:13,440
so so I'm not saying this is the end-all

00:13:12,000 --> 00:13:15,150
but in this case they know their

00:13:13,440 --> 00:13:15,329
business boundaries really well and they

00:13:15,150 --> 00:13:17,309
have

00:13:15,329 --> 00:13:18,869
particular pain and so what they want to

00:13:17,309 --> 00:13:20,189
do is bring out each element of

00:13:18,869 --> 00:13:22,649
functionality into a separate service

00:13:20,189 --> 00:13:24,269
but they started with the one where they

00:13:22,649 --> 00:13:25,439
were having the most problem the one

00:13:24,269 --> 00:13:28,769
that they needed to scale that they

00:13:25,439 --> 00:13:30,600
couldn't scale because okay etc in this

00:13:28,769 --> 00:13:32,699
case it was hotel pricing because

00:13:30,600 --> 00:13:34,410
there's always say sales and ads coming

00:13:32,699 --> 00:13:35,999
up and there's weather in this country

00:13:34,410 --> 00:13:37,619
so this country changes I mean it's

00:13:35,999 --> 00:13:40,199
amazing how often these things change so

00:13:37,619 --> 00:13:41,069
they didn't decompose the entire model

00:13:40,199 --> 00:13:44,189
if they didn't rewrite the whole thing

00:13:41,069 --> 00:13:47,489
they created a new micro service only

00:13:44,189 --> 00:13:48,959
for that and when it got to an MVP or

00:13:47,489 --> 00:13:50,399
Minimum Viable process they went to the

00:13:48,959 --> 00:13:53,369
monolith they changed the calls over to

00:13:50,399 --> 00:13:55,410
the service now that service could be

00:13:53,369 --> 00:13:57,420
deployed on its own as fast as they need

00:13:55,410 --> 00:13:58,589
it to they could do a/b testing I was

00:13:57,420 --> 00:14:00,720
funny to hear the stories because it

00:13:58,589 --> 00:14:02,999
really the color of the button the hue

00:14:00,720 --> 00:14:04,470
of the color makes a difference so they

00:14:02,999 --> 00:14:07,829
would a be test of this hue of green

00:14:04,470 --> 00:14:09,299
versus that hue of green and see which

00:14:07,829 --> 00:14:11,939
one made reservations go up and see

00:14:09,299 --> 00:14:15,179
which one resurrections go down this

00:14:11,939 --> 00:14:16,649
company no longer does now I mean this

00:14:15,179 --> 00:14:19,919
is years ago now most of its decomposed

00:14:16,649 --> 00:14:22,679
they no longer do really detailed

00:14:19,919 --> 00:14:25,079
feature analysis the team's one owner

00:14:22,679 --> 00:14:26,790
just like the like I'm sorry I cried his

00:14:25,079 --> 00:14:28,589
name from from twitch talking about they

00:14:26,790 --> 00:14:30,809
have a product owner on each on each of

00:14:28,589 --> 00:14:33,569
these teams they come up with a theory

00:14:30,809 --> 00:14:35,189
they write code to test the theory they

00:14:33,569 --> 00:14:37,860
deploy the code to test the theory and

00:14:35,189 --> 00:14:39,149
if the reservations go up they roll it

00:14:37,860 --> 00:14:42,660
out if they go down they take it back

00:14:39,149 --> 00:14:43,980
they a B test everything and they can

00:14:42,660 --> 00:14:45,839
only do that by changing the

00:14:43,980 --> 00:14:47,100
architecture they there's no way with

00:14:45,839 --> 00:14:49,110
their existing architecture they could

00:14:47,100 --> 00:14:52,259
have gone through and reached these

00:14:49,110 --> 00:14:53,970
goals and so we go back to our product

00:14:52,259 --> 00:14:56,160
teams and this is what they come up with

00:14:53,970 --> 00:14:57,779
so there's a team that owns rental cars

00:14:56,160 --> 00:14:59,459
there's a team that owns hotels you know

00:14:57,779 --> 00:15:00,929
etc and of course there's a lot more

00:14:59,459 --> 00:15:03,449
than this and so forth and they own more

00:15:00,929 --> 00:15:05,579
than one you know there's a life there's

00:15:03,449 --> 00:15:08,069
a life cycle involved here but the idea

00:15:05,579 --> 00:15:10,410
is that they know their business really

00:15:08,069 --> 00:15:12,629
well and so they were able to hire line

00:15:10,410 --> 00:15:15,059
of business managers for like the rental

00:15:12,629 --> 00:15:16,439
car team that knows about the rental car

00:15:15,059 --> 00:15:17,489
market and they know which countries are

00:15:16,439 --> 00:15:20,040
in it which specialties are going to

00:15:17,489 --> 00:15:23,299
work and you know etc so really allowed

00:15:20,040 --> 00:15:26,129
them to do really good things

00:15:23,299 --> 00:15:28,890
now homework because in a 30 or 40

00:15:26,129 --> 00:15:30,780
minute talk can't do it then

00:15:28,890 --> 00:15:32,280
full disclosure well I think all of the

00:15:30,780 --> 00:15:34,530
books if not all are written by current

00:15:32,280 --> 00:15:36,750
or former thought works people so bias

00:15:34,530 --> 00:15:38,100
but building the evolutionary

00:15:36,750 --> 00:15:38,820
architectures is actually not about

00:15:38,100 --> 00:15:40,680
microservices

00:15:38,820 --> 00:15:42,840
it's about building your software in a

00:15:40,680 --> 00:15:44,610
way that you can do what's next year but

00:15:42,840 --> 00:15:46,620
that we don't know yet so building it so

00:15:44,610 --> 00:15:51,540
it can evolve and then of course

00:15:46,620 --> 00:15:52,740
building micro-services by sam newman we

00:15:51,540 --> 00:15:56,160
still have to deploy somewhere it's

00:15:52,740 --> 00:15:57,810
actually not magic okay and this is

00:15:56,160 --> 00:16:00,780
where the whole platform thing is gonna

00:15:57,810 --> 00:16:02,220
start coming in so first off i want to

00:16:00,780 --> 00:16:03,540
try to differentiate this is probably

00:16:02,220 --> 00:16:05,520
gonna be old-school because it's the

00:16:03,540 --> 00:16:07,530
slides a few years old now everybody

00:16:05,520 --> 00:16:08,490
here might be aware of this but still as

00:16:07,530 --> 00:16:10,530
i mentioned earlier i think it's

00:16:08,490 --> 00:16:11,730
important that we agree on terms or at

00:16:10,530 --> 00:16:13,770
least you understand what i'm saying

00:16:11,730 --> 00:16:16,470
so when i talk about the different

00:16:13,770 --> 00:16:18,930
levels of service okay on premises you

00:16:16,470 --> 00:16:20,130
know download the software run it on so

00:16:18,930 --> 00:16:22,830
you're the same as buying a car

00:16:20,130 --> 00:16:24,420
basically you know at least in the way

00:16:22,830 --> 00:16:26,130
that finance stuff works in the u.s.

00:16:24,420 --> 00:16:28,800
every part of that car is now my

00:16:26,130 --> 00:16:30,120
responsibility if it gets destroyed i

00:16:28,800 --> 00:16:31,500
have to have insurance forward or I just

00:16:30,120 --> 00:16:34,980
lose I have to do all the maintenance

00:16:31,500 --> 00:16:36,780
etc infrastructure as a service we have

00:16:34,980 --> 00:16:38,940
a concept on Kevin here called leasing a

00:16:36,780 --> 00:16:42,810
car where it's basically like a

00:16:38,940 --> 00:16:44,100
long-term rental okay so the car and the

00:16:42,810 --> 00:16:45,660
finance and the appreciation are taken

00:16:44,100 --> 00:16:47,580
over by the leasing company I bought an

00:16:45,660 --> 00:16:49,080
electric car for at least to go electric

00:16:47,580 --> 00:16:50,420
car a few years ago because I didn't

00:16:49,080 --> 00:16:53,700
want to take the depreciation on a lease

00:16:50,420 --> 00:16:55,740
on an electric car and when I turned it

00:16:53,700 --> 00:16:57,450
back into the bank about a year ago it

00:16:55,740 --> 00:16:58,830
was worth half of what it would have

00:16:57,450 --> 00:17:01,130
been I would have been able to sell it

00:16:58,830 --> 00:17:04,410
for and so that was good for me

00:17:01,130 --> 00:17:06,839
platform-as-a-service is basically like

00:17:04,410 --> 00:17:09,180
if you hire car hire or rental car so I

00:17:06,839 --> 00:17:11,220
go to Hertz or whatever and I rent a car

00:17:09,180 --> 00:17:13,140
I'm responsible for the fuel and I have

00:17:11,220 --> 00:17:14,730
to drive it in the road tolls but for

00:17:13,140 --> 00:17:15,690
the most part the rental company is

00:17:14,730 --> 00:17:17,220
going to take care of everything else

00:17:15,690 --> 00:17:19,230
they're hopefully going to make sure

00:17:17,220 --> 00:17:20,730
it's in good working order they're gonna

00:17:19,230 --> 00:17:22,920
their problem if you depreciate it's

00:17:20,730 --> 00:17:24,930
their problem to replace the tires in

00:17:22,920 --> 00:17:26,430
most cases if you rent a sports car and

00:17:24,930 --> 00:17:29,220
tear them up they I find out they charge

00:17:26,430 --> 00:17:30,990
you for that but anyway and then of

00:17:29,220 --> 00:17:34,410
course software-as-a-service is the taxi

00:17:30,990 --> 00:17:35,490
yet I just get in the car and go so what

00:17:34,410 --> 00:17:38,220
I want to talk about today is

00:17:35,490 --> 00:17:42,270
platform-as-a-service III believe this

00:17:38,220 --> 00:17:44,760
is an incredibly enabling concept so

00:17:42,270 --> 00:17:45,840
example I'm going to use because there's

00:17:44,760 --> 00:17:48,930
a joke what do you call someone who only

00:17:45,840 --> 00:17:51,930
speaks one language an American all my

00:17:48,930 --> 00:17:53,460
examples are also American but the

00:17:51,930 --> 00:17:56,850
example I'm going to use is an

00:17:53,460 --> 00:17:57,990
organization called cloud gov now in the

00:17:56,850 --> 00:18:00,390
United States if you're a government

00:17:57,990 --> 00:18:01,800
agency and you want to run software on

00:18:00,390 --> 00:18:04,560
the public cloud so if you want to run

00:18:01,800 --> 00:18:06,600
it on Azure Amazon or you know name your

00:18:04,560 --> 00:18:09,470
company there's a whole bunch of

00:18:06,600 --> 00:18:13,140
regulations that you have to comply with

00:18:09,470 --> 00:18:15,930
security checks etc and it's very very

00:18:13,140 --> 00:18:19,350
hard and so some folks got together and

00:18:15,930 --> 00:18:20,790
created cloud gov now cloud gov is

00:18:19,350 --> 00:18:24,270
actually an official service of the US

00:18:20,790 --> 00:18:28,470
government so there's 325 security

00:18:24,270 --> 00:18:31,650
controls 269 of them are handled by

00:18:28,470 --> 00:18:34,440
cloud gov so as DNS properly configured

00:18:31,650 --> 00:18:37,320
are our routing tables you know not

00:18:34,440 --> 00:18:39,420
writable or security patches for the

00:18:37,320 --> 00:18:41,490
operating system all of those kinds of

00:18:39,420 --> 00:18:44,370
things now become the responsibility of

00:18:41,490 --> 00:18:46,050
cloud gov so if I'm that government

00:18:44,370 --> 00:18:48,900
organization and I want to build an

00:18:46,050 --> 00:18:52,260
application I now have 15 that are

00:18:48,900 --> 00:18:54,690
solely my responsibility password

00:18:52,260 --> 00:18:56,670
policies stuff like that forty-one that

00:18:54,690 --> 00:18:57,870
are shared so there's 41 of them where

00:18:56,670 --> 00:19:00,360
my application is going to change the

00:18:57,870 --> 00:19:02,900
way their thing works etc but my ability

00:19:00,360 --> 00:19:05,910
to deploy to the public cloud just got

00:19:02,900 --> 00:19:09,090
substantially easier and on my product

00:19:05,910 --> 00:19:11,040
team I no longer have to have someone

00:19:09,090 --> 00:19:12,540
who knows the deep internals of the

00:19:11,040 --> 00:19:16,050
operating system because cloud gov has

00:19:12,540 --> 00:19:20,390
them okay so it shifts some of that

00:19:16,050 --> 00:19:25,710
responsibility out now that said

00:19:20,390 --> 00:19:28,050
surprise server list has servers okay it

00:19:25,710 --> 00:19:29,760
is just somebody else's computer and so

00:19:28,050 --> 00:19:31,350
that's what I mean there is still

00:19:29,760 --> 00:19:32,910
somebody that has to know how to do that

00:19:31,350 --> 00:19:38,250
it might be some of your pain it might

00:19:32,910 --> 00:19:39,510
be cloud cover as your or whoever so we

00:19:38,250 --> 00:19:40,830
go back to our product teams a lot of

00:19:39,510 --> 00:19:43,020
times when I start this presentation

00:19:40,830 --> 00:19:45,270
especially if I'm in an Operations heavy

00:19:43,020 --> 00:19:46,680
conference people see this where they're

00:19:45,270 --> 00:19:48,090
going to get put on a product team some

00:19:46,680 --> 00:19:50,250
of the folks that I'm hold school

00:19:48,090 --> 00:19:52,290
operations I mean I am literally old

00:19:50,250 --> 00:19:55,170
school right racked you know

00:19:52,290 --> 00:19:56,670
workstations has sparked five we was

00:19:55,170 --> 00:19:58,200
talking about that earlier

00:19:56,670 --> 00:19:59,310
they're like I don't want to do that I

00:19:58,200 --> 00:20:01,700
don't want to be on a product team

00:19:59,310 --> 00:20:05,210
that's that's not what I signed up for

00:20:01,700 --> 00:20:09,510
you don't necessarily have to be

00:20:05,210 --> 00:20:12,630
somebody has to run that platform okay

00:20:09,510 --> 00:20:15,090
our product teams that are deploying to

00:20:12,630 --> 00:20:16,830
things like kubernetes know something

00:20:15,090 --> 00:20:20,250
about kubernetes but they're not experts

00:20:16,830 --> 00:20:23,190
the people on the platform team are so

00:20:20,250 --> 00:20:27,390
the platform team is also a product team

00:20:23,190 --> 00:20:29,820
their product is the platform so the

00:20:27,390 --> 00:20:31,980
development teams are like I need to be

00:20:29,820 --> 00:20:33,020
able to run on Google Cloud okay we're

00:20:31,980 --> 00:20:36,600
going to provide that as a platform

00:20:33,020 --> 00:20:37,680
because what okay or I need an internal

00:20:36,600 --> 00:20:39,570
I need to open chef any you know

00:20:37,680 --> 00:20:41,100
whatever it have they become a product

00:20:39,570 --> 00:20:44,070
team and their customer is the

00:20:41,100 --> 00:20:47,490
development team now that platform team

00:20:44,070 --> 00:20:51,300
is responsible for those 269 things in

00:20:47,490 --> 00:20:53,370
the case of cloud gov I don't want to

00:20:51,300 --> 00:20:55,290
assume that this is public cloud like I

00:20:53,370 --> 00:20:58,080
said so this might still be internal

00:20:55,290 --> 00:21:00,450
this might be VMware and this could be

00:20:58,080 --> 00:21:02,460
physical Hardware whatever it is but you

00:21:00,450 --> 00:21:03,870
come up with a standard that says we

00:21:02,460 --> 00:21:05,940
will support your application if you

00:21:03,870 --> 00:21:10,680
meet these things and you make that

00:21:05,940 --> 00:21:12,090
available to folks I wish we could but

00:21:10,680 --> 00:21:13,410
compliance people on every team well I

00:21:12,090 --> 00:21:17,550
kind of tuned it kind of don't because

00:21:13,410 --> 00:21:18,990
auditors are interesting yeah but you

00:21:17,550 --> 00:21:22,440
can't so they're still gonna be there

00:21:18,990 --> 00:21:25,770
and please security test your stuff as a

00:21:22,440 --> 00:21:27,300
credit card holder please okay so there

00:21:25,770 --> 00:21:29,130
still are other teams that you're not

00:21:27,300 --> 00:21:30,870
gonna really get I mean security is

00:21:29,130 --> 00:21:32,730
everybody's job for example but there

00:21:30,870 --> 00:21:35,880
are still gonna be I have a good friend

00:21:32,730 --> 00:21:37,860
who is a you know white hat hacker who I

00:21:35,880 --> 00:21:40,050
need I want him sitting in a dark room

00:21:37,860 --> 00:21:41,340
trying to hack my stuff because I'm not

00:21:40,050 --> 00:21:45,210
gonna think about it and not everything

00:21:41,340 --> 00:21:47,070
here can be automated etc okay so if I

00:21:45,210 --> 00:21:48,570
have this kind of org structure where

00:21:47,070 --> 00:21:50,730
does this come in so continuous delivery

00:21:48,570 --> 00:21:54,540
is why I mean by change everything this

00:21:50,730 --> 00:21:55,950
is all intertwined so just Hummel and

00:21:54,540 --> 00:21:57,030
Dave Farley both they wrote a book

00:21:55,950 --> 00:21:59,070
called continuous delivery

00:21:57,030 --> 00:22:04,140
that's Jess's definition of continuous

00:21:59,070 --> 00:22:07,530
delivery so a couple key things here to

00:22:04,140 --> 00:22:09,600
me is as its changes of all types so it

00:22:07,530 --> 00:22:09,929
is new features configuration read up on

00:22:09,600 --> 00:22:11,759
00:22:09,929 --> 00:22:14,039
affect your apps that kind of thing bug

00:22:11,759 --> 00:22:17,159
fixes experiments the a/b tests the

00:22:14,039 --> 00:22:18,990
different colors of green etc and so all

00:22:17,159 --> 00:22:23,159
of those changes into production or the

00:22:18,990 --> 00:22:25,009
hand of users safely and quickly in a

00:22:23,159 --> 00:22:28,379
sustainable way

00:22:25,009 --> 00:22:29,759
so he doesn't say cheaper okay he does

00:22:28,379 --> 00:22:32,309
say quickly but doesn't necessarily fat

00:22:29,759 --> 00:22:34,409
and say faster but it is more about

00:22:32,309 --> 00:22:35,720
deploy on demand now it's funny because

00:22:34,409 --> 00:22:38,549
when they were trying to write the book

00:22:35,720 --> 00:22:40,289
if you're if you caught the price say at

00:22:38,549 --> 00:22:41,549
the beginning the white paper that read

00:22:40,289 --> 00:22:43,440
to the book was called the software

00:22:41,549 --> 00:22:44,610
production line but when they were

00:22:43,440 --> 00:22:45,899
coming up with a title for the book

00:22:44,610 --> 00:22:47,519
they're like okay what's it going to be

00:22:45,899 --> 00:22:49,470
so everybody for me with the agile

00:22:47,519 --> 00:22:52,230
manifesto we value this over that okay

00:22:49,470 --> 00:22:54,330
there's a page to that is the principles

00:22:52,230 --> 00:22:56,129
behind the agile manifesto and the first

00:22:54,330 --> 00:22:58,039
one is the early and continuous delivery

00:22:56,129 --> 00:23:00,029
of valuable software to our users so

00:22:58,039 --> 00:23:01,529
that's where the term canoes delivery

00:23:00,029 --> 00:23:03,179
came from is it's the fulfillment of

00:23:01,529 --> 00:23:05,249
agile of delivering software to the

00:23:03,179 --> 00:23:09,629
users as opposed to of to the product

00:23:05,249 --> 00:23:11,159
manager and that is the book one of the

00:23:09,629 --> 00:23:12,779
ways I like to think of it as CD is what

00:23:11,159 --> 00:23:14,669
you do that's part of a developed

00:23:12,779 --> 00:23:16,259
culture so when I say there's no such

00:23:14,669 --> 00:23:16,950
thing as a deploy as a DevOps pipeline I

00:23:16,259 --> 00:23:18,929
think it's a continuous delivery

00:23:16,950 --> 00:23:25,169
pipeline you can do continuous delivery

00:23:18,929 --> 00:23:27,509
you can't do give ops like many things

00:23:25,169 --> 00:23:28,830
there is a prerequisite continuous

00:23:27,509 --> 00:23:30,659
integration and knievel livery are not

00:23:28,830 --> 00:23:33,059
the same thing

00:23:30,659 --> 00:23:36,389
it is a superset it's open space we want

00:23:33,059 --> 00:23:37,440
to go into it but we have a thing that

00:23:36,389 --> 00:23:39,269
we do a thought works called the

00:23:37,440 --> 00:23:40,440
TechRadar where we put out learnings

00:23:39,269 --> 00:23:42,090
we're about 5,000 people globally

00:23:40,440 --> 00:23:44,730
different things that we've learned on

00:23:42,090 --> 00:23:46,139
different projects and so forth and one

00:23:44,730 --> 00:23:49,429
of the things that we see a lot is this

00:23:46,139 --> 00:23:52,110
anti-pattern that we call CI theater so

00:23:49,429 --> 00:23:55,710
you know I say I'm doing CI but I'm not

00:23:52,110 --> 00:23:58,200
really okay so you know I actually

00:23:55,710 --> 00:24:00,690
there's one here wait for there we go

00:23:58,200 --> 00:24:03,360
this was my I don't know favorite at

00:24:00,690 --> 00:24:06,869
least favorite can't decide we did a

00:24:03,360 --> 00:24:08,340
study followed it up yeah 90% of the

00:24:06,869 --> 00:24:10,379
people thought that downloading Jenkins

00:24:08,340 --> 00:24:12,929
was the same as doing continuous

00:24:10,379 --> 00:24:14,309
integration or go CD I mean I'll use my

00:24:12,929 --> 00:24:17,249
own shouldn't okay not just pick on

00:24:14,309 --> 00:24:18,570
cloud peas you please feel free it's

00:24:17,249 --> 00:24:19,980
open source download go CD have fun

00:24:18,570 --> 00:24:21,960
that's not the same as doing the thing

00:24:19,980 --> 00:24:24,730
okay that's the tool that's the hammer

00:24:21,960 --> 00:24:26,650
you still have to do the practices

00:24:24,730 --> 00:24:27,880
Jezz and martin fellow our chief

00:24:26,650 --> 00:24:31,960
scientists wrote this continuous

00:24:27,880 --> 00:24:33,370
integration certification test so every

00:24:31,960 --> 00:24:35,050
developer committing to a shared main

00:24:33,370 --> 00:24:37,270
line call it trunk call it master

00:24:35,050 --> 00:24:40,210
whatever you want we believe that if

00:24:37,270 --> 00:24:41,350
you're doing along the future branches

00:24:40,210 --> 00:24:45,370
that you're not doing cinders

00:24:41,350 --> 00:24:46,540
integration . you might be doing really

00:24:45,370 --> 00:24:49,630
good automated building task but it's

00:24:46,540 --> 00:24:52,000
not CI every commit triggers that

00:24:49,630 --> 00:24:53,350
automated building test and if the

00:24:52,000 --> 00:24:54,180
building test fails its repaired within

00:24:53,350 --> 00:24:56,920
ten minutes

00:24:54,180 --> 00:24:59,020
so again you have a small team somebody

00:24:56,920 --> 00:25:01,900
did a push if every builds running on

00:24:59,020 --> 00:25:05,860
every push it fails hey stop why did it

00:25:01,900 --> 00:25:08,170
fail let's fix it it's absolutely okay

00:25:05,860 --> 00:25:09,880
to break the bill please don't do the

00:25:08,170 --> 00:25:11,770
dunce cap thing or whatever when people

00:25:09,880 --> 00:25:13,500
break the bill that's the job of the

00:25:11,770 --> 00:25:15,610
continuous integration so every server

00:25:13,500 --> 00:25:18,370
okay but you have to fix it right away

00:25:15,610 --> 00:25:19,630
don't leave it red flaky tests to me or

00:25:18,370 --> 00:25:20,860
worse than no test because I don't

00:25:19,630 --> 00:25:27,190
really know when I have an actual

00:25:20,860 --> 00:25:29,320
failure so that's the flow if you will

00:25:27,190 --> 00:25:31,570
so I checked some code in it runs some

00:25:29,320 --> 00:25:33,160
fast tests that's labeled building unit

00:25:31,570 --> 00:25:36,730
but really the point is that the fastest

00:25:33,160 --> 00:25:37,690
ones if they fail the team fixes it now

00:25:36,730 --> 00:25:39,030
it goes a little bit further and a

00:25:37,690 --> 00:25:41,500
little bit further a little bit further

00:25:39,030 --> 00:25:42,880
I don't think I have a slide for this

00:25:41,500 --> 00:25:44,410
but I like to say let's down here what

00:25:42,880 --> 00:25:46,179
says like the user acceptance what have

00:25:44,410 --> 00:25:48,309
you that's like a product manager saying

00:25:46,179 --> 00:25:49,750
yep it's ready I want to differentiate

00:25:48,309 --> 00:25:52,900
between contains delivery and continuous

00:25:49,750 --> 00:25:56,070
deployment continuous delivery is that

00:25:52,900 --> 00:25:59,140
you can deploy any time you want

00:25:56,070 --> 00:26:01,660
so they continuous delivery is the

00:25:59,140 --> 00:26:04,090
ability to deploy at any time somebody

00:26:01,660 --> 00:26:06,340
makes a decision to click a button that

00:26:04,090 --> 00:26:09,190
does the deployment continuous

00:26:06,340 --> 00:26:11,429
deployment is fully automated if all the

00:26:09,190 --> 00:26:13,420
tests pass then it gets into production

00:26:11,429 --> 00:26:14,950
I'm kind of like the story that we heard

00:26:13,420 --> 00:26:16,420
in one of the keynotes they're sending

00:26:14,950 --> 00:26:18,760
out a new version of slack every week to

00:26:16,420 --> 00:26:20,860
on-site enterprise users go CD is

00:26:18,760 --> 00:26:22,660
on-premises software we do several

00:26:20,860 --> 00:26:25,210
builds a day but we don't thank you very

00:26:22,660 --> 00:26:27,730
much we do several builds a day but we

00:26:25,210 --> 00:26:28,990
don't ship them all because if you

00:26:27,730 --> 00:26:30,400
wouldn't want or you wouldn't to update

00:26:28,990 --> 00:26:32,290
your continuous delivery server several

00:26:30,400 --> 00:26:34,270
times a day right so we do continuous

00:26:32,290 --> 00:26:36,340
delivery we deploy to production roughly

00:26:34,270 --> 00:26:36,690
once a month but you can log into the

00:26:36,340 --> 00:26:39,660
build sir

00:26:36,690 --> 00:26:42,740
and get anyone you want our SAS products

00:26:39,660 --> 00:26:45,050
though will deploy several times a day

00:26:42,740 --> 00:26:48,360
so thoughts when we turned in that

00:26:45,050 --> 00:26:53,970
things got a little bit off but sorry

00:26:48,360 --> 00:26:55,350
this is my snide part there is more to

00:26:53,970 --> 00:26:56,640
it and I'm gonna go into some of that I

00:26:55,350 --> 00:27:00,750
already went through this I did have the

00:26:56,640 --> 00:27:03,480
slide for CD versus CD okay so back to

00:27:00,750 --> 00:27:05,070
our teams so we have product team

00:27:03,480 --> 00:27:08,100
security teams compliance teams what are

00:27:05,070 --> 00:27:12,290
their roles in all of this I really

00:27:08,100 --> 00:27:15,540
strongly want to give the product teams

00:27:12,290 --> 00:27:17,730
access to production I want them to be

00:27:15,540 --> 00:27:20,010
able to make a change and if that change

00:27:17,730 --> 00:27:23,070
passes all the tests to show up in

00:27:20,010 --> 00:27:24,540
production automatically so that they

00:27:23,070 --> 00:27:25,950
can get that fast feedback and they can

00:27:24,540 --> 00:27:28,200
note was that the right shade of green

00:27:25,950 --> 00:27:30,050
okay that's really important but it

00:27:28,200 --> 00:27:32,090
rightfully scares the heck out of people

00:27:30,050 --> 00:27:36,090
because there's some things that are bad

00:27:32,090 --> 00:27:37,440
the point in secure software is bad okay

00:27:36,090 --> 00:27:39,480
non performance software is actually

00:27:37,440 --> 00:27:41,280
really bad in today's world you know if

00:27:39,480 --> 00:27:46,290
your websites slower than somebody

00:27:41,280 --> 00:27:48,510
else's they're gone non-compliance these

00:27:46,290 --> 00:27:50,040
days I mean at least in the u.s. you can

00:27:48,510 --> 00:27:53,000
go to jail over this stuff if you're

00:27:50,040 --> 00:27:56,670
doing things overtly out of compliance

00:27:53,000 --> 00:27:58,260
but as was mentioned earlier ineffective

00:27:56,670 --> 00:27:59,700
software deploying something where it

00:27:58,260 --> 00:28:01,110
that makes our sales get worse I want to

00:27:59,700 --> 00:28:03,390
know about that before I spend a lot of

00:28:01,110 --> 00:28:04,650
time on the feature so I don't want to

00:28:03,390 --> 00:28:07,710
do any of these things and it's the job

00:28:04,650 --> 00:28:10,590
of the pipeline just protect me from

00:28:07,710 --> 00:28:12,810
that this is my safety net okay so the

00:28:10,590 --> 00:28:16,910
purpose of a CD pipeline is to kill a

00:28:12,810 --> 00:28:16,910
release candidate it is its only purpose

00:28:17,240 --> 00:28:22,680
every time I commit to a change that is

00:28:20,550 --> 00:28:24,180
a release candidate it's the pipeline's

00:28:22,680 --> 00:28:26,250
job to prove it's not good enough I

00:28:24,180 --> 00:28:27,810
can't prove something's good I can make

00:28:26,250 --> 00:28:30,090
it green all the time just not running

00:28:27,810 --> 00:28:32,460
any tests okay but I can prove

00:28:30,090 --> 00:28:34,320
something's bad I can know that I have

00:28:32,460 --> 00:28:35,850
something that has a security bulletin

00:28:34,320 --> 00:28:37,470
posted against it I can't know that it's

00:28:35,850 --> 00:28:39,720
secure but I can definitely know that

00:28:37,470 --> 00:28:42,150
it's insecure okay and that's the

00:28:39,720 --> 00:28:43,680
pipeline's job and so this is where

00:28:42,150 --> 00:28:46,740
continuous delivery starts to separate

00:28:43,680 --> 00:28:49,140
itself between us integration it's very

00:28:46,740 --> 00:28:50,340
easy to run things in parallel on a CI

00:28:49,140 --> 00:28:52,169
server this is Carl

00:28:50,340 --> 00:28:56,909
and this is Firefox and this is I guess

00:28:52,169 --> 00:28:58,529
you'll have to do edge anymore yeah but

00:28:56,909 --> 00:28:59,549
what about entirely different kind of

00:28:58,529 --> 00:29:01,799
things that have entirely different

00:28:59,549 --> 00:29:04,049
lengths of runtime and exact highly

00:29:01,799 --> 00:29:05,520
different expertise etc so what I want

00:29:04,049 --> 00:29:06,900
to encourage you to do and every tool

00:29:05,520 --> 00:29:09,270
out this is not a tool thing every tool

00:29:06,900 --> 00:29:10,529
out there can do this is you know let's

00:29:09,270 --> 00:29:12,870
say I'm to have a Java project and I

00:29:10,529 --> 00:29:14,850
build a jar when that jar is available

00:29:12,870 --> 00:29:16,350
yes let the development team run it

00:29:14,850 --> 00:29:17,700
through their pipeline run their

00:29:16,350 --> 00:29:20,100
functional tests deploy to a staging

00:29:17,700 --> 00:29:22,049
environment whatever that pattern is but

00:29:20,100 --> 00:29:23,880
at the same time let's pull that jar out

00:29:22,049 --> 00:29:26,309
and run it through a bunch of security

00:29:23,880 --> 00:29:28,500
tests let's make sure that it's not

00:29:26,309 --> 00:29:30,990
using things that there's no involve is

00:29:28,500 --> 00:29:32,940
let's make sure that it's not exposing a

00:29:30,990 --> 00:29:36,840
port it's not supposed to let's do all

00:29:32,940 --> 00:29:38,399
that compliance tests you know let's run

00:29:36,840 --> 00:29:41,909
server spec against it let's run inspect

00:29:38,399 --> 00:29:44,190
against it etc notice I'm not putting

00:29:41,909 --> 00:29:45,659
these in linear fashion if you ask the

00:29:44,190 --> 00:29:48,480
authors of the CD book they say their

00:29:45,659 --> 00:29:50,549
number one mistake was putting the

00:29:48,480 --> 00:29:52,169
diagrams of CD pipelines very linear I

00:29:50,549 --> 00:29:54,659
want to do these in parallel so I'm not

00:29:52,169 --> 00:29:56,820
gonna slow down the development team but

00:29:54,659 --> 00:29:58,559
I am gonna gate them the arrows here are

00:29:56,820 --> 00:30:00,990
not just there for no reason they're

00:29:58,559 --> 00:30:02,850
there on purpose I can get all the way

00:30:00,990 --> 00:30:06,360
to staging without those bottom two

00:30:02,850 --> 00:30:07,799
finishing or passing or wherever makes

00:30:06,360 --> 00:30:09,149
the right point view if your staging is

00:30:07,799 --> 00:30:12,360
on your production network then don't do

00:30:09,149 --> 00:30:13,710
this ok but I want the development team

00:30:12,360 --> 00:30:15,929
to get feedback from their unit tests

00:30:13,710 --> 00:30:18,750
and their functional tests as often as

00:30:15,929 --> 00:30:22,770
possible in this diagram the purpose of

00:30:18,750 --> 00:30:25,200
the staging department stage is to test

00:30:22,770 --> 00:30:26,640
the deployment so staging looks like

00:30:25,200 --> 00:30:29,159
production maybe not the same number of

00:30:26,640 --> 00:30:30,840
servers but same kind of setup I want to

00:30:29,159 --> 00:30:32,850
test deployment to a production like

00:30:30,840 --> 00:30:35,010
environment as often as possible and so

00:30:32,850 --> 00:30:36,510
I'm gonna let that all happen but I'm

00:30:35,010 --> 00:30:38,909
not going to let it go to production if

00:30:36,510 --> 00:30:41,130
any of the security tests fail so that's

00:30:38,909 --> 00:30:42,929
where that dependency comes in and again

00:30:41,130 --> 00:30:44,159
a lot of times these folks have

00:30:42,929 --> 00:30:46,620
different expertise security is

00:30:44,159 --> 00:30:48,929
everybody's job but they may be running

00:30:46,620 --> 00:30:50,010
things that just you can't put on every

00:30:48,929 --> 00:30:51,480
team I mean that is the reality

00:30:50,010 --> 00:30:53,070
unfortunately of the world

00:30:51,480 --> 00:30:54,960
you can't put these people on every team

00:30:53,070 --> 00:30:57,210
and also there's a thing called

00:30:54,960 --> 00:31:00,360
unconscious bias I don't necessarily

00:30:57,210 --> 00:31:02,850
want the dev team to know everything

00:31:00,360 --> 00:31:03,779
that I'm gonna check ok now I'm not

00:31:02,850 --> 00:31:04,679
saying

00:31:03,779 --> 00:31:07,469
escaped things for the sake of

00:31:04,679 --> 00:31:09,059
obfuscation but you know these are

00:31:07,469 --> 00:31:10,409
different things I need to be able to go

00:31:09,059 --> 00:31:12,210
back to them and show them hey I did

00:31:10,409 --> 00:31:13,440
this a wasp report using these things

00:31:12,210 --> 00:31:15,119
these are the vulnerabilities that came

00:31:13,440 --> 00:31:18,330
out let's talk about the wrist you know

00:31:15,119 --> 00:31:20,580
etc okay but that's your pipelines job

00:31:18,330 --> 00:31:25,799
is to prove these things aren't good

00:31:20,580 --> 00:31:28,109
enough okay sorry no silver bullet so I

00:31:25,799 --> 00:31:29,609
mean that's kind of the the thing is is

00:31:28,109 --> 00:31:32,129
after you know 10 years of thought works

00:31:29,609 --> 00:31:33,539
like I said I've seen people and not

00:31:32,129 --> 00:31:35,279
just our product with other CI CD

00:31:33,539 --> 00:31:36,509
servers whatever they get an automation

00:31:35,279 --> 00:31:38,940
thing or they get chef or they get

00:31:36,509 --> 00:31:41,700
puppet or they get you know a tool of

00:31:38,940 --> 00:31:42,809
some sort or they change just something

00:31:41,700 --> 00:31:43,979
about their architecture but they don't

00:31:42,809 --> 00:31:47,009
change the way the organization works

00:31:43,979 --> 00:31:49,139
you know etc and most of the time they

00:31:47,009 --> 00:31:50,969
fail you know like yeah DevOps doesn't

00:31:49,139 --> 00:31:52,859
work just like we say agile didn't work

00:31:50,969 --> 00:31:54,809
we stood up for our meetings but it

00:31:52,859 --> 00:31:57,690
didn't work okay there's actually a

00:31:54,809 --> 00:31:59,489
little more to it than that but we would

00:31:57,690 --> 00:32:04,289
often see that so there's not a silver

00:31:59,489 --> 00:32:06,629
bullet but these are solved problems for

00:32:04,289 --> 00:32:09,419
the most part so a couple books that I

00:32:06,629 --> 00:32:12,509
like to recommend DevOps handbook is a

00:32:09,419 --> 00:32:13,769
bunch of stories accelerate is actually

00:32:12,509 --> 00:32:16,559
the science behind the state of DevOps

00:32:13,769 --> 00:32:17,820
report if you haven't read that I really

00:32:16,559 --> 00:32:19,799
like the Phoenix project if you haven't

00:32:17,820 --> 00:32:21,539
read that that's it's fictional but it's

00:32:19,799 --> 00:32:23,809
a it's a couple hour read it's real easy

00:32:21,539 --> 00:32:26,899
and it goes through some of these things

00:32:23,809 --> 00:32:28,830
and then with all due respect to the

00:32:26,899 --> 00:32:29,729
lightning talk yesterday there's a

00:32:28,830 --> 00:32:32,549
co-worker wrote a book called

00:32:29,729 --> 00:32:33,989
infrastructures code but it does help

00:32:32,549 --> 00:32:39,869
out I made some of these deployments and

00:32:33,989 --> 00:32:41,309
so forth and so the summary here is you

00:32:39,869 --> 00:32:42,330
need to have good definitions of what

00:32:41,309 --> 00:32:44,369
these things mean inside your

00:32:42,330 --> 00:32:45,330
organization again it's not important

00:32:44,369 --> 00:32:46,349
that you agree with mine it's not

00:32:45,330 --> 00:32:48,899
important you agree with each other's

00:32:46,349 --> 00:32:51,119
okay but inside your organization if

00:32:48,899 --> 00:32:53,609
somebody says did you do the functional

00:32:51,119 --> 00:32:56,729
testing you need to know what that meant

00:32:53,609 --> 00:32:58,229
okay if they say did you create the

00:32:56,729 --> 00:32:59,719
pipeline if you do have a template you

00:32:58,229 --> 00:33:02,039
know you didn't know what that means

00:32:59,719 --> 00:33:04,859
org change if you did only have changed

00:33:02,039 --> 00:33:06,299
one thing is most likely the modern

00:33:04,859 --> 00:33:07,739
architectures and technologies please

00:33:06,299 --> 00:33:11,099
don't just go rewrite all your software

00:33:07,739 --> 00:33:12,389
because mic receivers are cool there's a

00:33:11,099 --> 00:33:14,129
charity majors I think came out with a

00:33:12,389 --> 00:33:16,379
thing it's like I decompose my monolith

00:33:14,129 --> 00:33:17,779
into micro services and now every outage

00:33:16,379 --> 00:33:20,429
is a murder

00:33:17,779 --> 00:33:21,570
okay they are harder to check you know

00:33:20,429 --> 00:33:23,190
distributed applications are hard

00:33:21,570 --> 00:33:25,529
somebody says they're really good at

00:33:23,190 --> 00:33:27,359
distributed applications is lying okay

00:33:25,529 --> 00:33:28,559
so don't do it just to do it but do it

00:33:27,359 --> 00:33:32,099
where are you going to get some benefit

00:33:28,559 --> 00:33:34,409
from it and again use your CD pipeline

00:33:32,099 --> 00:33:35,580
to give you that safety net this is

00:33:34,409 --> 00:33:39,320
where your tests are this is when you

00:33:35,580 --> 00:33:39,320
prove the software's not good enough

00:33:39,349 --> 00:33:41,669
thank you

00:33:40,679 --> 00:33:43,289
I guess we have a couple minutes if

00:33:41,669 --> 00:33:44,340
there's any questions this is where I

00:33:43,289 --> 00:33:47,039
get to stand up here and go oh gosh I

00:33:44,340 --> 00:33:49,619
hope they're doing that whether you're

00:33:47,039 --> 00:33:50,849
just waving to him or equipment he just

00:33:49,619 --> 00:33:51,419
bid he just bought it so five dollars

00:33:50,849 --> 00:34:08,280
going once

00:33:51,419 --> 00:34:10,139
yeah yeah and that's why I said when I

00:34:08,280 --> 00:34:12,149
said seems the anti pad I said well I'm

00:34:10,139 --> 00:34:12,899
gonna talk later about platforms if you

00:34:12,149 --> 00:34:14,899
want to do a continuous integration

00:34:12,899 --> 00:34:18,149
server cancel every server as a platform

00:34:14,899 --> 00:34:20,849
so CI CD as a service to your to your

00:34:18,149 --> 00:34:23,579
dev teams by all means okay but please

00:34:20,849 --> 00:34:24,750
let them control their pipeline that's

00:34:23,579 --> 00:34:26,730
the other advantage of running other

00:34:24,750 --> 00:34:28,649
pipelines in parallel is you can say

00:34:26,730 --> 00:34:30,450
look mobile apps have different

00:34:28,649 --> 00:34:32,220
requirements than a CRM app which has

00:34:30,450 --> 00:34:33,839
different requirements then no windows

00:34:32,220 --> 00:34:36,329
app and so you could describe your

00:34:33,839 --> 00:34:37,859
pipeline but know that after your first

00:34:36,329 --> 00:34:39,869
after soon as you get a build artifact

00:34:37,859 --> 00:34:42,000
I'm gonna suck it out into my pipelines

00:34:39,869 --> 00:34:45,389
and run it through compliance and you

00:34:42,000 --> 00:34:46,919
know etc but I want them to know how it

00:34:45,389 --> 00:34:49,200
got to production and why it got to

00:34:46,919 --> 00:34:50,609
production and know and I want them to

00:34:49,200 --> 00:34:52,770
get the phone call when it goes down I

00:34:50,609 --> 00:34:54,599
don't want the DevOps team to get the

00:34:52,770 --> 00:34:57,029
phone call when it goes down and so yeah

00:34:54,599 --> 00:34:59,339
if you want to provide the server as a

00:34:57,029 --> 00:35:01,710
platform cool but don't create their

00:34:59,339 --> 00:35:04,049
pipelines where they just now don't know

00:35:01,710 --> 00:35:05,849
what's going on and so they still don't

00:35:04,049 --> 00:35:08,039
really understand what the when I change

00:35:05,849 --> 00:35:09,539
something if I look if you go to the

00:35:08,039 --> 00:35:12,150
blog entry on my definition of DevOps

00:35:09,539 --> 00:35:14,579
the story I tell is one where flowers

00:35:12,150 --> 00:35:16,529
project 10 or 11 years ago that failed

00:35:14,579 --> 00:35:17,430
miserably because the team writing the

00:35:16,529 --> 00:35:18,869
software didn't know anything about

00:35:17,430 --> 00:35:21,000
Solaris and they did something that

00:35:18,869 --> 00:35:23,160
wouldn't work on NFS you know if they

00:35:21,000 --> 00:35:26,540
had the Solaris admin they're just a

00:35:23,160 --> 00:35:35,630
member of the team never would happen

00:35:26,540 --> 00:35:39,560
yep yeah definition of an ideal team

00:35:35,630 --> 00:35:40,940
structure no I cannot I mean really it's

00:35:39,560 --> 00:35:43,220
because it's highly dependent on

00:35:40,940 --> 00:35:47,090
architecture and things like that okay

00:35:43,220 --> 00:35:49,370
but let's say in that joy that I I that

00:35:47,090 --> 00:35:51,200
Java project they were running a Java

00:35:49,370 --> 00:35:53,210
project the deployment target was gonna

00:35:51,200 --> 00:35:54,560
be Solaris they knew that up front but

00:35:53,210 --> 00:35:57,590
the machines they were issued with

00:35:54,560 --> 00:35:59,030
Windows laptops Huzhou 506 we all know

00:35:57,590 --> 00:36:00,710
Java runs exactly the same everywhere

00:35:59,030 --> 00:36:03,140
and so they're like oh yeah that'll be

00:36:00,710 --> 00:36:05,300
no problem they should have had a

00:36:03,140 --> 00:36:06,710
Solaris admin but if the deployment

00:36:05,300 --> 00:36:09,080
target had been Windows and no big deal

00:36:06,710 --> 00:36:10,340
okay so you want to have at least some

00:36:09,080 --> 00:36:12,500
knowledge about the different things

00:36:10,340 --> 00:36:13,820
there's the idea of a t-shaped engineer

00:36:12,500 --> 00:36:16,100
someone knows a little bit about things

00:36:13,820 --> 00:36:17,450
and then a lot about so forth you really

00:36:16,100 --> 00:36:20,090
want to have some knowledge on the team

00:36:17,450 --> 00:36:21,800
that is you know how your architecture

00:36:20,090 --> 00:36:24,290
works what your deployment targets are

00:36:21,800 --> 00:36:27,620
why you're doing those things are what

00:36:24,290 --> 00:36:28,850
your risk points are so you're your

00:36:27,620 --> 00:36:30,830
compliance is gonna be a lot easier if

00:36:28,850 --> 00:36:32,110
you can explain to the auditors these

00:36:30,830 --> 00:36:34,460
are the internal systems we're touching

00:36:32,110 --> 00:36:36,860
this is the kind of customer data we're

00:36:34,460 --> 00:36:37,910
gathering yo cetera oh okay then I only

00:36:36,860 --> 00:36:39,620
have to audit these twelve points

00:36:37,910 --> 00:36:40,730
instead of these 400 so a good

00:36:39,620 --> 00:36:43,910
understanding of that is pretty

00:36:40,730 --> 00:36:46,570
important but it varies wildly okay

00:36:43,910 --> 00:36:46,570
thank you very much

00:36:48,740 --> 00:36:53,870

YouTube URL: https://www.youtube.com/watch?v=UQNU9GfWv4I


