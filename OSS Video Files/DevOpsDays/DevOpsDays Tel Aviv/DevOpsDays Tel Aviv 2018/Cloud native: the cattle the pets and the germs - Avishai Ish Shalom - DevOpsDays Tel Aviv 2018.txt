Title: Cloud native: the cattle the pets and the germs - Avishai Ish Shalom - DevOpsDays Tel Aviv 2018
Publication date: 2019-01-03
Playlist: DevOpsDays Tel Aviv 2018
Description: 
	10 years ago, we promoted the move from pet systems to faceless hordes of electronic cattle grazing on commodity infrastructure. But as the evolution of the cloud progresses we find that the cattle methodology is no longer sufficient and that cloud native systems resemble some other biological entityâ€¦
Captions: 
	00:00:05,569 --> 00:00:08,940
so if you have a chance to leave the

00:00:08,040 --> 00:00:11,670
room if you want

00:00:08,940 --> 00:00:12,990
but that's on you if you stay because

00:00:11,670 --> 00:00:15,179
I'm going to talk about whatever I want

00:00:12,990 --> 00:00:17,699
and what I want to talk about today is

00:00:15,179 --> 00:00:20,010
cloud native and the reason I won't talk

00:00:17,699 --> 00:00:23,189
about cloud cloud native is that about a

00:00:20,010 --> 00:00:25,529
month ago another speaker was ill and I

00:00:23,189 --> 00:00:28,650
got called to talk at another conference

00:00:25,529 --> 00:00:32,189
which was called a cognitive day so I

00:00:28,650 --> 00:00:34,950
had to write a talk this one kind of I

00:00:32,189 --> 00:00:36,660
changed it and I didn't give it again

00:00:34,950 --> 00:00:38,550
because when I got to the venue the

00:00:36,660 --> 00:00:40,309
original speaker also came in so it was

00:00:38,550 --> 00:00:42,239
like okay fine

00:00:40,309 --> 00:00:45,570
awesome now I've got to talk and I've

00:00:42,239 --> 00:00:47,309
got no nowhere to talk so yeah so you're

00:00:45,570 --> 00:00:50,010
screwed basically so this is a talk

00:00:47,309 --> 00:00:52,590
about the mood that we had from the past

00:00:50,010 --> 00:00:55,140
model to the cloud native model of today

00:00:52,590 --> 00:00:56,969
and I'm gonna run through the he short

00:00:55,140 --> 00:01:00,899
history and what what happened last like

00:00:56,969 --> 00:01:02,850
10 or 15 years once again thanks um and

00:01:00,899 --> 00:01:04,710
just you know try to keep up try to

00:01:02,850 --> 00:01:05,900
follow it's gonna be weird it's gonna be

00:01:04,710 --> 00:01:08,430
funny it's gonna be awesome

00:01:05,900 --> 00:01:10,680
feel free to interrupt or shout or

00:01:08,430 --> 00:01:11,939
whatever so you know when you get to

00:01:10,680 --> 00:01:14,369
talk about something like cloud native

00:01:11,939 --> 00:01:15,900
which is kind of a buzzword so the first

00:01:14,369 --> 00:01:17,310
thing that you do is you go to Wikipedia

00:01:15,900 --> 00:01:19,320
and you check what the hell's called

00:01:17,310 --> 00:01:21,479
native right what is it

00:01:19,320 --> 00:01:23,280
so I went to Wikipedia and like okay

00:01:21,479 --> 00:01:24,479
native cloud applications blah blah blah

00:01:23,280 --> 00:01:26,250
first this type of computer software

00:01:24,479 --> 00:01:29,250
that's native blah blah blah blah it

00:01:26,250 --> 00:01:30,840
vague little bit vague but this

00:01:29,250 --> 00:01:33,450
definition doesn't actually tell me what

00:01:30,840 --> 00:01:37,320
cloud native is enough anyone knows what

00:01:33,450 --> 00:01:39,000
it is I'm suddenly I don't so ok

00:01:37,320 --> 00:01:40,710
like if the source of human knowledge

00:01:39,000 --> 00:01:42,750
which is Wikipedia doesn't know what to

00:01:40,710 --> 00:01:45,090
tell you about cloud native but this is

00:01:42,750 --> 00:01:47,189
really bizarre and you have it's one of

00:01:45,090 --> 00:01:49,290
those two sitting in situations either

00:01:47,189 --> 00:01:51,270
everyone who knows everybody knows what

00:01:49,290 --> 00:01:53,549
it is it's like too obvious to explain

00:01:51,270 --> 00:01:55,140
so you don't need to explain it

00:01:53,549 --> 00:01:57,180
oh it's something that no one actually

00:01:55,140 --> 00:01:58,979
knows what it means and at this point

00:01:57,180 --> 00:02:01,890
they're like too afraid to ask cause

00:01:58,979 --> 00:02:03,570
it's really kind of weird to get your

00:02:01,890 --> 00:02:05,520
comfort that his name cloud natives and

00:02:03,570 --> 00:02:09,869
go to people and ask like what what is

00:02:05,520 --> 00:02:11,430
this so yeah so I totally there's a

00:02:09,869 --> 00:02:11,680
cloud native foundation I don't know if

00:02:11,430 --> 00:02:14,170
you

00:02:11,680 --> 00:02:16,060
about it and they have a website a lot

00:02:14,170 --> 00:02:20,099
of awesome companies like Google or

00:02:16,060 --> 00:02:22,390
members of it so we went to the website

00:02:20,099 --> 00:02:24,310
it's like sure if they have an

00:02:22,390 --> 00:02:26,530
explanation of what cloud native is they

00:02:24,310 --> 00:02:29,019
have a github repository with you know

00:02:26,530 --> 00:02:30,639
specs and such so I went to the github

00:02:29,019 --> 00:02:35,500
repository and I went to the cloud

00:02:30,639 --> 00:02:38,650
native definition version 1 and yeah

00:02:35,500 --> 00:02:40,780
this is excerpts from from that spec

00:02:38,650 --> 00:02:43,030
skeletal application in a modern dynamic

00:02:40,780 --> 00:02:45,040
environment such as public private and

00:02:43,030 --> 00:02:46,739
hybrid cloud which is awesome but

00:02:45,040 --> 00:02:50,159
doesn't tell me what cloud native is

00:02:46,739 --> 00:02:52,000
still I don't know so I live forever and

00:02:50,159 --> 00:02:54,609
somewhere in the middle I find this

00:02:52,000 --> 00:02:56,379
container service mashes micro services

00:02:54,609 --> 00:02:59,700
immutable infrastructure and the close

00:02:56,379 --> 00:03:02,319
of api's is it exemplify this approach

00:02:59,700 --> 00:03:04,299
these techniques enable loosely coupled

00:03:02,319 --> 00:03:05,950
systems that are resilient manageable

00:03:04,299 --> 00:03:09,040
and observable so how do I to do

00:03:05,950 --> 00:03:12,069
important words so now we get kind of a

00:03:09,040 --> 00:03:14,769
sense what characterizes cloud native

00:03:12,069 --> 00:03:16,900
systems but it's still a bit weird first

00:03:14,769 --> 00:03:18,579
of all because manageable like I've

00:03:16,900 --> 00:03:21,879
never heard of assistance in that you

00:03:18,579 --> 00:03:25,329
know claimed to be unmanageable right so

00:03:21,879 --> 00:03:27,099
it's kind of self weird but yeah let's

00:03:25,329 --> 00:03:29,199
just go with it we've got some hints

00:03:27,099 --> 00:03:34,689
here let's go with it and see where we

00:03:29,199 --> 00:03:37,569
go this so going back to the translation

00:03:34,689 --> 00:03:39,549
and story if one go through the history

00:03:37,569 --> 00:03:40,959
of you know the cloud native evolution

00:03:39,549 --> 00:03:43,090
and how we got to those types of systems

00:03:40,959 --> 00:03:45,220
and understand what cloud native is we

00:03:43,090 --> 00:03:48,400
probably want to start fifteen years ago

00:03:45,220 --> 00:03:50,319
with the systems we had what we call the

00:03:48,400 --> 00:03:52,540
pets and if you don't know the pets

00:03:50,319 --> 00:03:54,370
versus caring versus cattle model

00:03:52,540 --> 00:03:58,299
basically the idea was that the system's

00:03:54,370 --> 00:04:01,479
we had were had systems that we killed

00:03:58,299 --> 00:04:03,280
for and we tended to them and ever every

00:04:01,479 --> 00:04:05,650
system had a name every server had a

00:04:03,280 --> 00:04:07,479
name and if that server had a problem

00:04:05,650 --> 00:04:09,939
you know we would go to that server

00:04:07,479 --> 00:04:11,949
would fix it and we would you know fit

00:04:09,939 --> 00:04:14,560
it and care for it and be very nice to

00:04:11,949 --> 00:04:17,590
it and then we transition transition to

00:04:14,560 --> 00:04:19,269
this model where we have cattle lots of

00:04:17,590 --> 00:04:20,620
servers and if one of them is sick we

00:04:19,269 --> 00:04:22,870
just stripped it in the head and replace

00:04:20,620 --> 00:04:24,700
it with another and if you don't even

00:04:22,870 --> 00:04:27,730
people here I'm sorry I didn't

00:04:24,700 --> 00:04:29,650
made up this analogy yeah so that that

00:04:27,730 --> 00:04:32,380
was the theory at least so the system

00:04:29,650 --> 00:04:33,160
that we had 15 years ago looks something

00:04:32,380 --> 00:04:35,200
like that

00:04:33,160 --> 00:04:37,690
we had a bunch of servers physical

00:04:35,200 --> 00:04:39,820
server usually stealing the data center

00:04:37,690 --> 00:04:41,290
somewhere and connected through a switch

00:04:39,820 --> 00:04:43,240
top of the rack switch or whatever in

00:04:41,290 --> 00:04:44,830
the network network router and a

00:04:43,240 --> 00:04:47,230
firewall and the end was connected to

00:04:44,830 --> 00:04:50,230
the Internet and on those servers we

00:04:47,230 --> 00:04:52,750
deployed some code awesome and we had

00:04:50,230 --> 00:04:56,400
database that stored data and to go fine

00:04:52,750 --> 00:05:00,340
great and worked perfectly kind of and

00:04:56,400 --> 00:05:02,740
this kind of system has a lot of merit

00:05:00,340 --> 00:05:04,990
to it it has a lot of advantages it is

00:05:02,740 --> 00:05:07,180
manageable it's very easy to manage such

00:05:04,990 --> 00:05:09,070
as such a system and the way it was

00:05:07,180 --> 00:05:10,900
manageable the reason it was manageable

00:05:09,070 --> 00:05:13,800
it was because it was tightly coupled

00:05:10,900 --> 00:05:16,900
tight coupling means that everything

00:05:13,800 --> 00:05:19,300
affected the other parts of the systems

00:05:16,900 --> 00:05:22,030
almost instantaneously so it was very

00:05:19,300 --> 00:05:25,360
easy to understand cause and effect in

00:05:22,030 --> 00:05:26,800
such a system and the downside of tight

00:05:25,360 --> 00:05:29,620
coupling is that if you have a problem

00:05:26,800 --> 00:05:31,660
if you have something breaks the other

00:05:29,620 --> 00:05:34,570
parts of the system also break very very

00:05:31,660 --> 00:05:36,160
fast which is also kind of an advantage

00:05:34,570 --> 00:05:38,590
because everything is very predictable

00:05:36,160 --> 00:05:41,740
in such a system but the way you handle

00:05:38,590 --> 00:05:43,660
the liability of such a system is by

00:05:41,740 --> 00:05:45,640
making the part of that system very

00:05:43,660 --> 00:05:50,620
reliable so that they don't break very

00:05:45,640 --> 00:05:53,050
often so the way we achieved reliability

00:05:50,620 --> 00:05:55,300
in that kind of system is by having a

00:05:53,050 --> 00:05:57,730
stable environment and remember this was

00:05:55,300 --> 00:05:59,980
a physical infrastructure so it was very

00:05:57,730 --> 00:06:02,380
easy to achieve say stable environment

00:05:59,980 --> 00:06:05,110
he had your own network which usually

00:06:02,380 --> 00:06:07,450
was pretty reliable and you didn't have

00:06:05,110 --> 00:06:08,590
to share it with anyone so you know you

00:06:07,450 --> 00:06:12,220
knew that you're getting the full

00:06:08,590 --> 00:06:15,430
bandwidth and everything no noise and

00:06:12,220 --> 00:06:17,020
you knew that the disks you know you had

00:06:15,430 --> 00:06:19,300
all the i/o ops because no one else was

00:06:17,020 --> 00:06:22,120
using them and so on so on and so on so

00:06:19,300 --> 00:06:24,340
the way that we got stable environment

00:06:22,120 --> 00:06:25,990
is because we had control over the

00:06:24,340 --> 00:06:27,700
infrastructure we had control over the

00:06:25,990 --> 00:06:29,590
data center we had control over the

00:06:27,700 --> 00:06:33,030
network we had control over the power

00:06:29,590 --> 00:06:34,830
lines we had control over the hardware

00:06:33,030 --> 00:06:37,200
but this will work down when we went to

00:06:34,830 --> 00:06:38,850
the cloud right in the cloud we still

00:06:37,200 --> 00:06:40,860
had the same architecture same high

00:06:38,850 --> 00:06:43,470
level logical architecture but the

00:06:40,860 --> 00:06:47,310
servers were now all virtualized in the

00:06:43,470 --> 00:06:49,740
network who was virtualized and in this

00:06:47,310 --> 00:06:51,810
type of environment a lot of the

00:06:49,740 --> 00:06:54,060
assumptions underlying this architecture

00:06:51,810 --> 00:06:56,970
was violated because we no longer had

00:06:54,060 --> 00:07:00,240
control of the network and no we shared

00:06:56,970 --> 00:07:01,890
the resources with other companies so a

00:07:00,240 --> 00:07:06,750
lot of noisy neighbors and that kind of

00:07:01,890 --> 00:07:08,400
stuff um during that time we still had

00:07:06,750 --> 00:07:10,290
if you look at the host names of servers

00:07:08,400 --> 00:07:12,420
you'd see something like that like you

00:07:10,290 --> 00:07:15,120
would necessary in 2000 you say you'd be

00:07:12,420 --> 00:07:17,100
on application server whatever because

00:07:15,120 --> 00:07:19,640
normally you only had one application

00:07:17,100 --> 00:07:24,020
server it was on monolith at that time

00:07:19,640 --> 00:07:25,710
and of course the thing that changed was

00:07:24,020 --> 00:07:27,690
something on the cloud you had

00:07:25,710 --> 00:07:29,190
unreliable networks you have noisy

00:07:27,690 --> 00:07:32,130
neighbors and so on and so on and so on

00:07:29,190 --> 00:07:35,250
the environment was no longer stable and

00:07:32,130 --> 00:07:36,810
we had to somehow cope with that so we

00:07:35,250 --> 00:07:41,010
had to change the architecture we had to

00:07:36,810 --> 00:07:43,440
adapt and this led led to a slight

00:07:41,010 --> 00:07:45,480
vision similar but also a little bit

00:07:43,440 --> 00:07:46,980
different architecture we started having

00:07:45,480 --> 00:07:49,050
multiple components of each component

00:07:46,980 --> 00:07:51,180
suddenly instead of having one

00:07:49,050 --> 00:07:55,020
virtualized server we had a few maybe

00:07:51,180 --> 00:07:57,570
not scan group so maybe had three out of

00:07:55,020 --> 00:07:59,550
application servers to databases for

00:07:57,570 --> 00:08:01,500
reliability and master and slave and so

00:07:59,550 --> 00:08:03,390
on and so on and so on and if you look

00:08:01,500 --> 00:08:05,970
at the host names this is the time when

00:08:03,390 --> 00:08:08,690
we started seeing server names like this

00:08:05,970 --> 00:08:12,900
it was like application server number

00:08:08,690 --> 00:08:17,130
142 presumably there were like 140 other

00:08:12,900 --> 00:08:19,890
servers yeah and this is why so yeah

00:08:17,130 --> 00:08:21,630
this worked and at some point people

00:08:19,890 --> 00:08:23,460
started you know using auto scaling

00:08:21,630 --> 00:08:26,610
group so the number of servers will no

00:08:23,460 --> 00:08:29,430
longer constant sometimes it was 20

00:08:26,610 --> 00:08:33,650
sometimes it was 5 you get the idea and

00:08:29,430 --> 00:08:37,230
this went on for quite a bit of time and

00:08:33,650 --> 00:08:39,180
also it had consequences so think about

00:08:37,230 --> 00:08:43,050
this when the number of servers start to

00:08:39,180 --> 00:08:45,000
change also the IP addresses change so

00:08:43,050 --> 00:08:46,860
it no longer made sense to put IP

00:08:45,000 --> 00:08:49,020
addresses and configuration files so we

00:08:46,860 --> 00:08:51,150
needed stuff like service discovery and

00:08:49,020 --> 00:08:53,040
DNS and because the eurasian management

00:08:51,150 --> 00:08:55,350
and so on and so on so on but also

00:08:53,040 --> 00:08:58,380
network topology started to change

00:08:55,350 --> 00:09:00,630
now if you go back to that diagram was

00:08:58,380 --> 00:09:03,150
still routers and switches but they're

00:09:00,630 --> 00:09:06,600
all virtual now what does it virtual

00:09:03,150 --> 00:09:09,090
subnet or a virtual segment mean because

00:09:06,600 --> 00:09:10,800
from a network topology standpoint do

00:09:09,090 --> 00:09:13,320
you actually care about some nuts if

00:09:10,800 --> 00:09:16,380
everything is virtualized not obvious

00:09:13,320 --> 00:09:17,910
anymore and of course we had data

00:09:16,380 --> 00:09:20,160
conflicts because we had multiple

00:09:17,910 --> 00:09:22,110
databases now so we started to deal with

00:09:20,160 --> 00:09:24,990
the distributed systems which made

00:09:22,110 --> 00:09:28,470
everything a lot harder so what did we

00:09:24,990 --> 00:09:32,010
do of course we went to the age of Carol

00:09:28,470 --> 00:09:33,870
and you know that we changed to the age

00:09:32,010 --> 00:09:35,850
of Carol because the host names right

00:09:33,870 --> 00:09:37,380
now you have more than one application

00:09:35,850 --> 00:09:41,280
server and you can kill it if it's

00:09:37,380 --> 00:09:42,720
misbehaving so this is the time where

00:09:41,280 --> 00:09:44,700
mentality started to change

00:09:42,720 --> 00:09:46,830
we started changing the way we do stuff

00:09:44,700 --> 00:09:52,260
to learn the way manager clusters our

00:09:46,830 --> 00:09:53,790
services next thing that happened was we

00:09:52,260 --> 00:09:56,760
started putting code in multiple places

00:09:53,790 --> 00:09:58,110
we no longer had monolith because once

00:09:56,760 --> 00:09:59,970
you go to dinner once you have a

00:09:58,110 --> 00:10:02,010
distributed system anyway and you have

00:09:59,970 --> 00:10:04,230
data conflicts it's made make sense to

00:10:02,010 --> 00:10:06,690
split the code as well it allows for

00:10:04,230 --> 00:10:08,250
scaling your developers having multiple

00:10:06,690 --> 00:10:11,490
teams work on different services and

00:10:08,250 --> 00:10:13,320
integrate them you know in the network

00:10:11,490 --> 00:10:15,780
your system is already Network heavy

00:10:13,320 --> 00:10:17,790
anyway it made sense to split the data

00:10:15,780 --> 00:10:19,350
to the multiple databases and so on so

00:10:17,790 --> 00:10:21,090
we started seeing systems where you have

00:10:19,350 --> 00:10:23,640
your code deployed on multiple clusters

00:10:21,090 --> 00:10:25,730
of multiple services and the host names

00:10:23,640 --> 00:10:28,050
reflected that as well it was no longer

00:10:25,730 --> 00:10:30,570
application 23 because you only had one

00:10:28,050 --> 00:10:32,520
application I had like happy ma P or

00:10:30,570 --> 00:10:34,740
whatever because you have like 10

00:10:32,520 --> 00:10:38,940
applications or can services or even

00:10:34,740 --> 00:10:40,950
more so micro services yay it was great

00:10:38,940 --> 00:10:44,580
idea and it had no problem whatsoever

00:10:40,950 --> 00:10:46,920
right yeah a couple of problems for

00:10:44,580 --> 00:10:47,610
example this diagram also known as the

00:10:46,920 --> 00:10:51,029
deficit

00:10:47,610 --> 00:10:52,440
diagram of micro-services the problem

00:10:51,029 --> 00:10:54,959
when you have a lot of microservices

00:10:52,440 --> 00:10:58,230
it's very very complex you don't know

00:10:54,959 --> 00:11:00,209
what he's talking to who and what told

00:10:58,230 --> 00:11:02,130
you know everything shifts it's very

00:11:00,209 --> 00:11:04,380
hard very complicated to track if you've

00:11:02,130 --> 00:11:06,450
got let's say like Wix 700

00:11:04,380 --> 00:11:08,880
micro-services and all talk to each

00:11:06,450 --> 00:11:11,300
other it's just the number of possible

00:11:08,880 --> 00:11:14,519
passes is insane and if you have

00:11:11,300 --> 00:11:17,339
thousands or hundreds of thousands of

00:11:14,519 --> 00:11:19,560
server services you can't even calculate

00:11:17,339 --> 00:11:23,040
that number it's too big really

00:11:19,560 --> 00:11:26,310
ridiculous so yeah new problems that we

00:11:23,040 --> 00:11:28,200
had to deal with very annoying so they

00:11:26,310 --> 00:11:30,779
did micro services the idea was that we

00:11:28,200 --> 00:11:32,220
would have semi-autonomous components

00:11:30,779 --> 00:11:35,880
that are usable that we could you know

00:11:32,220 --> 00:11:37,980
just connect and rewire it will very

00:11:35,880 --> 00:11:40,079
very easy so loosely coupled meaning

00:11:37,980 --> 00:11:41,579
that if you have a problem what service

00:11:40,079 --> 00:11:44,310
doesn't necessarily affect immediately

00:11:41,579 --> 00:11:47,010
the rest of the system on the downside

00:11:44,310 --> 00:11:49,380
it made problems a lot harder to detect

00:11:47,010 --> 00:11:52,529
and deal with so monitoring became quite

00:11:49,380 --> 00:11:55,320
a challenge and from standpoint from the

00:11:52,529 --> 00:11:57,089
point of view of one micro service other

00:11:55,320 --> 00:11:59,490
micro services are a black box you only

00:11:57,089 --> 00:12:00,930
talk to the API that micro service you

00:11:59,490 --> 00:12:02,760
don't you you're not allowed to know

00:12:00,930 --> 00:12:05,070
what's going on inside the database or

00:12:02,760 --> 00:12:07,529
the data store you're not supposed to

00:12:05,070 --> 00:12:13,699
look just have to cooperate without the

00:12:07,529 --> 00:12:16,920
micro services so driven by api's and so

00:12:13,699 --> 00:12:19,079
we continue to evolve and at this point

00:12:16,920 --> 00:12:20,820
another interesting thing happened

00:12:19,079 --> 00:12:23,610
actually doing the interesting things

00:12:20,820 --> 00:12:25,709
happened first of all look at the host

00:12:23,610 --> 00:12:27,600
names again this is when you started

00:12:25,709 --> 00:12:31,680
seeing the transition from host names

00:12:27,600 --> 00:12:34,589
like this one at whatever 23 the host

00:12:31,680 --> 00:12:36,779
names that helped instance IDs now this

00:12:34,589 --> 00:12:38,579
seems like a very subtle change but it's

00:12:36,779 --> 00:12:41,699
actually very very interesting why

00:12:38,579 --> 00:12:43,980
because app 23 means that at least

00:12:41,699 --> 00:12:46,980
conceptually you think there are 23

00:12:43,980 --> 00:12:50,610
servers or at least 23 servers how many

00:12:46,980 --> 00:12:52,140
servers do you have of this you have no

00:12:50,610 --> 00:12:54,750
idea which means that you don't want to

00:12:52,140 --> 00:12:55,990
know we stopped caring about the number

00:12:54,750 --> 00:12:58,300
of instances that we have

00:12:55,990 --> 00:13:00,220
and this is fundamental this is when we

00:12:58,300 --> 00:13:02,410
started transitioning from kettles to

00:13:00,220 --> 00:13:04,690
something else another interesting thing

00:13:02,410 --> 00:13:07,450
happened we've studied the point code

00:13:04,690 --> 00:13:08,620
everywhere so if you don't like you mean

00:13:07,450 --> 00:13:12,160
like me and you're using a lot of

00:13:08,620 --> 00:13:14,709
services you start to think about the

00:13:12,160 --> 00:13:16,470
fact that Google drive's can run code

00:13:14,709 --> 00:13:19,029
they have something called a script

00:13:16,470 --> 00:13:20,830
which is somewhat similar to JavaScript

00:13:19,029 --> 00:13:24,339
but is not and that's a whole different

00:13:20,830 --> 00:13:26,200
story but you can run code on you know

00:13:24,339 --> 00:13:28,330
Google spreadsheet so Google Docs or

00:13:26,200 --> 00:13:29,860
whatever you can also run code on Trulia

00:13:28,330 --> 00:13:32,709
or Salesforce or whatever

00:13:29,860 --> 00:13:35,920
Zacky oh so you end up in in this widget

00:13:32,709 --> 00:13:38,230
situation where you have code everywhere

00:13:35,920 --> 00:13:40,089
not necessarily on Amazon or you know

00:13:38,230 --> 00:13:42,399
Google or do whatever cloud you're using

00:13:40,089 --> 00:13:44,050
but just everywhere and it talks to you

00:13:42,399 --> 00:13:47,740
know a bunch of other clouds and a bunch

00:13:44,050 --> 00:13:49,839
of other services using HTTP and what we

00:13:47,740 --> 00:13:51,160
get is the Internet and it's very

00:13:49,839 --> 00:13:53,560
interesting because suddenly you have

00:13:51,160 --> 00:13:55,770
code deployed everywhere not just inside

00:13:53,560 --> 00:13:57,910
your data center on your micro services

00:13:55,770 --> 00:14:00,100
ok that's interesting

00:13:57,910 --> 00:14:02,620
you also notice that people stuck

00:14:00,100 --> 00:14:05,080
stopped caring about the network most

00:14:02,620 --> 00:14:07,089
systems that I see today they have if

00:14:05,080 --> 00:14:09,250
they have VPC they have like one or two

00:14:07,089 --> 00:14:10,990
subnets one like the private subnet and

00:14:09,250 --> 00:14:12,190
the other one is like the public subnet

00:14:10,990 --> 00:14:14,500
and maybe there are a few private

00:14:12,190 --> 00:14:17,410
subnets because Amazon forces you to

00:14:14,500 --> 00:14:19,450
have one subnet for every availability

00:14:17,410 --> 00:14:21,310
zone but that's about it you don't care

00:14:19,450 --> 00:14:23,350
about some nets on you know why because

00:14:21,310 --> 00:14:25,390
network topology that is completely

00:14:23,350 --> 00:14:28,750
virtual and doesn't reflect any physical

00:14:25,390 --> 00:14:30,510
structure is only interesting for access

00:14:28,750 --> 00:14:32,980
control rules right

00:14:30,510 --> 00:14:35,110
but access control rules when you have

00:14:32,980 --> 00:14:35,500
700 micro services that talk to each

00:14:35,110 --> 00:14:38,230
other

00:14:35,500 --> 00:14:41,380
you just can't manage that you would

00:14:38,230 --> 00:14:44,620
have 10 or 20,000 rules in your firewall

00:14:41,380 --> 00:14:46,560
it's completely unmanageable ok so we

00:14:44,620 --> 00:14:51,250
don't care about that anymore and

00:14:46,560 --> 00:14:52,560
apparently not about slides either one

00:14:51,250 --> 00:14:55,480
second ok cool

00:14:52,560 --> 00:14:58,060
so ok now we have a bunch of code that's

00:14:55,480 --> 00:15:00,850
running outside of our cloud on a bunch

00:14:58,060 --> 00:15:02,480
of sass this is the age of sass that we

00:15:00,850 --> 00:15:06,200
live in today

00:15:02,480 --> 00:15:10,100
and yeah the hostname changed to reflect

00:15:06,200 --> 00:15:12,320
that so you take a look at the

00:15:10,100 --> 00:15:14,510
production systems of companies big

00:15:12,320 --> 00:15:16,400
companies working a scam like wigs from

00:15:14,510 --> 00:15:19,190
Israel and maybe Amazon not from Israel

00:15:16,400 --> 00:15:20,600
and you find that production changes

00:15:19,190 --> 00:15:22,550
rapidly all the time

00:15:20,600 --> 00:15:26,000
for example Twix production changed

00:15:22,550 --> 00:15:27,710
every 30 minutes on average and if

00:15:26,000 --> 00:15:31,130
you're talking about Amazon they deploy

00:15:27,710 --> 00:15:34,700
code on average about every seven

00:15:31,130 --> 00:15:36,020
seconds so what does that mean when

00:15:34,700 --> 00:15:38,660
you're talking about your production

00:15:36,020 --> 00:15:39,770
environment like production which

00:15:38,660 --> 00:15:42,200
production environment what are you

00:15:39,770 --> 00:15:43,490
talking about right because it changes

00:15:42,200 --> 00:15:45,500
all the time you can't talk about the

00:15:43,490 --> 00:15:47,090
production environment in a meaningful

00:15:45,500 --> 00:15:48,590
way on staging environment and

00:15:47,090 --> 00:15:51,890
meaningful whaling changes all the time

00:15:48,590 --> 00:15:53,210
and that's not bad enough you find that

00:15:51,890 --> 00:15:55,190
that you don't actually have a

00:15:53,210 --> 00:15:56,540
production environment not independent

00:15:55,190 --> 00:15:59,510
in the sense that we use to talk about

00:15:56,540 --> 00:16:02,300
it because there is no one production

00:15:59,510 --> 00:16:04,160
environment right for example think

00:16:02,300 --> 00:16:06,230
about the fact that every client talks

00:16:04,160 --> 00:16:07,790
to potentially different data center and

00:16:06,230 --> 00:16:10,310
it could be that you have one main

00:16:07,790 --> 00:16:13,640
webpage that is executing multiple

00:16:10,310 --> 00:16:15,260
objects calls to a back-end and every

00:16:13,640 --> 00:16:17,630
component in the page talks to

00:16:15,260 --> 00:16:19,490
potentially a different service on a

00:16:17,630 --> 00:16:20,660
different data center that uses

00:16:19,490 --> 00:16:24,290
different machines and different

00:16:20,660 --> 00:16:28,130
versions so you can't really talk about

00:16:24,290 --> 00:16:28,970
okay about bugs and recreating bugs in a

00:16:28,130 --> 00:16:31,550
meaningful way

00:16:28,970 --> 00:16:33,890
when every single transaction uses

00:16:31,550 --> 00:16:36,800
different code potentially now if you

00:16:33,890 --> 00:16:38,900
think about maybe testing for example it

00:16:36,800 --> 00:16:42,410
works we had at any given point more

00:16:38,900 --> 00:16:44,780
than 200 active experiments and an

00:16:42,410 --> 00:16:46,700
experiment experiment means that

00:16:44,780 --> 00:16:48,620
potentially use a different code code

00:16:46,700 --> 00:16:52,130
path or potentially different service

00:16:48,620 --> 00:16:55,390
even for the same transaction so the

00:16:52,130 --> 00:16:59,480
exact configuration of the specific

00:16:55,390 --> 00:17:01,340
transaction depends on which experiments

00:16:59,480 --> 00:17:03,560
you're participating in so if you have

00:17:01,340 --> 00:17:05,750
to undo the experiments the number of

00:17:03,560 --> 00:17:08,120
possibilities is basically the Cartesian

00:17:05,750 --> 00:17:09,920
product of those possibilities which

00:17:08,120 --> 00:17:12,410
means that are talking about about for

00:17:09,920 --> 00:17:13,530
forty thousand possibilities when you

00:17:12,410 --> 00:17:16,050
have 200

00:17:13,530 --> 00:17:18,990
experiments so nothing in this in a

00:17:16,050 --> 00:17:21,710
sense you have 40,000 production

00:17:18,990 --> 00:17:24,360
environments not one when you have

00:17:21,710 --> 00:17:26,700
experiments and I haven't even talked

00:17:24,360 --> 00:17:28,230
about personalization personalization by

00:17:26,700 --> 00:17:31,890
definition means that every transaction

00:17:28,230 --> 00:17:33,600
is unique right so once you understand

00:17:31,890 --> 00:17:34,740
this you realize that you don't have a

00:17:33,600 --> 00:17:37,770
production environment you have

00:17:34,740 --> 00:17:40,530
production environments plural and lots

00:17:37,770 --> 00:17:42,450
of them every times action is such a

00:17:40,530 --> 00:17:45,810
system is unique and unrepeatable

00:17:42,450 --> 00:17:47,910
there's living no way to to reproduce

00:17:45,810 --> 00:17:49,680
that transaction because it depends on

00:17:47,910 --> 00:17:52,560
the state that constantly changes very

00:17:49,680 --> 00:17:55,260
very fast and actually exists only for

00:17:52,560 --> 00:17:57,630
that single transaction and and this is

00:17:55,260 --> 00:17:59,910
where you yourself to go like ok ok now

00:17:57,630 --> 00:18:02,250
I have a problem because none of my

00:17:59,910 --> 00:18:04,550
monitoring tools reflect this they just

00:18:02,250 --> 00:18:06,660
tell me that everything is green or red

00:18:04,550 --> 00:18:08,640
what does that mean when you're talking

00:18:06,660 --> 00:18:10,620
about millions of transactions that have

00:18:08,640 --> 00:18:13,830
different behaviors and actually use

00:18:10,620 --> 00:18:17,790
different code not obvious not really

00:18:13,830 --> 00:18:20,160
obvious ok this also means that staging

00:18:17,790 --> 00:18:23,580
environments are worthless because they

00:18:20,160 --> 00:18:26,750
can't you know they can't be useful to

00:18:23,580 --> 00:18:30,990
reproduce something that is by nature in

00:18:26,750 --> 00:18:33,930
no not repeatable so it works for

00:18:30,990 --> 00:18:37,080
example almost no one used the staging

00:18:33,930 --> 00:18:39,150
environments and it made sense so Boyan

00:18:37,080 --> 00:18:41,640
going back to the diagram we have a

00:18:39,150 --> 00:18:45,260
bunch of servers watching running a

00:18:41,640 --> 00:18:48,060
bunch of code and then something

00:18:45,260 --> 00:18:51,030
something else happens the database

00:18:48,060 --> 00:18:53,700
itself became cloud service so it might

00:18:51,030 --> 00:18:56,310
be you know all yes just putting my

00:18:53,700 --> 00:18:58,800
sequel or Postgres on on the cloud and

00:18:56,310 --> 00:19:00,930
then you know making it manageable but

00:18:58,800 --> 00:19:03,720
might also be something more fundamental

00:19:00,930 --> 00:19:05,940
like dynamodb a database that is

00:19:03,720 --> 00:19:08,550
completely hosted by Amazon and talks to

00:19:05,940 --> 00:19:10,830
you by HTTP and that's very very

00:19:08,550 --> 00:19:12,780
different because it's essentially

00:19:10,830 --> 00:19:15,210
public utility service it's not your

00:19:12,780 --> 00:19:17,340
database in any sense everyone uses

00:19:15,210 --> 00:19:20,340
dynamodb the same Dinobot need me that

00:19:17,340 --> 00:19:21,140
you're using so your data is also it's

00:19:20,340 --> 00:19:24,270
not shared

00:19:21,140 --> 00:19:26,010
but it's only logically separated it

00:19:24,270 --> 00:19:28,670
sits on the same physical Hardware

00:19:26,010 --> 00:19:34,620
there's really no difference

00:19:28,670 --> 00:19:38,790
okay that's cool and the next obvious

00:19:34,620 --> 00:19:41,600
step would be of course if the database

00:19:38,790 --> 00:19:43,770
is a cloud service

00:19:41,600 --> 00:19:45,870
maybe the compute nodes should be cloud

00:19:43,770 --> 00:19:47,430
service as well so you move your code

00:19:45,870 --> 00:19:48,990
from servers that you used to manage

00:19:47,430 --> 00:19:50,970
your containers that used to manage to

00:19:48,990 --> 00:19:53,310
maybe a CSO kubernetes in the cloud

00:19:50,970 --> 00:19:55,050
or maybe even lambda so your code

00:19:53,310 --> 00:19:58,200
suddenly runs on this you know

00:19:55,050 --> 00:19:59,940
completely abstracted cloud so you no

00:19:58,200 --> 00:20:01,650
longer have a compute nodes you don't

00:19:59,940 --> 00:20:04,110
even care about server names anymore

00:20:01,650 --> 00:20:06,030
right even if they had IDs all you have

00:20:04,110 --> 00:20:08,430
now is a transaction ID this is mapped

00:20:06,030 --> 00:20:09,660
to some anonymous container somewhere in

00:20:08,430 --> 00:20:12,390
the cloud that you don't even care about

00:20:09,660 --> 00:20:14,310
and it comes and goes in my live for a

00:20:12,390 --> 00:20:16,560
few seconds might live for a few minutes

00:20:14,310 --> 00:20:19,800
and this point you don't even kill the

00:20:16,560 --> 00:20:21,360
cattle anymore dies anyway so that the

00:20:19,800 --> 00:20:25,500
knowledge completely breaks down at this

00:20:21,360 --> 00:20:27,150
point and one day you find out after you

00:20:25,500 --> 00:20:29,310
you know in completed your journey that

00:20:27,150 --> 00:20:31,050
all the trees remain that remained is a

00:20:29,310 --> 00:20:33,120
bunch of clouds running a bunch of code

00:20:31,050 --> 00:20:35,880
and has a bunch of data might be on

00:20:33,120 --> 00:20:37,650
dynamodb might be on s3 might be on a

00:20:35,880 --> 00:20:40,590
different cloud storage it also speaks

00:20:37,650 --> 00:20:43,740
HTTP which even in essence the entire

00:20:40,590 --> 00:20:46,650
network the entire internet but that

00:20:43,740 --> 00:20:48,030
file still remained until it so it's

00:20:46,650 --> 00:20:50,970
strange because if you look at this

00:20:48,030 --> 00:20:52,830
diagram now know the network we don't

00:20:50,970 --> 00:20:56,760
care about you know the virtual switches

00:20:52,830 --> 00:20:58,620
and everything runs on public utility

00:20:56,760 --> 00:21:01,620
services the talk to HTTP like lambda

00:20:58,620 --> 00:21:04,680
and and DynamoDB so what is that

00:21:01,620 --> 00:21:07,110
firewall protecting even like is there

00:21:04,680 --> 00:21:10,410
difference between in and out I don't

00:21:07,110 --> 00:21:14,160
see it so maybe we don't need the

00:21:10,410 --> 00:21:17,150
firewall because the cloud is inherently

00:21:14,160 --> 00:21:19,050
public think about this if you have V PC

00:21:17,150 --> 00:21:20,970
you think that you have a private

00:21:19,050 --> 00:21:23,790
network it's a virtual part of a private

00:21:20,970 --> 00:21:28,710
cloud right but worth the management

00:21:23,790 --> 00:21:31,360
interface for the BBC what is it hosted

00:21:28,710 --> 00:21:35,010
yeah exactly on amazon.com and it's

00:21:31,360 --> 00:21:37,480
public and will always be public so

00:21:35,010 --> 00:21:40,120
every notion of privacy that you have

00:21:37,480 --> 00:21:41,910
depends on one API call from the public

00:21:40,120 --> 00:21:45,970
Internet

00:21:41,910 --> 00:21:48,060
so the cloud is inherently public the PC

00:21:45,970 --> 00:21:50,890
doesn't mean anything anymore it's just

00:21:48,060 --> 00:21:53,170
the vika see from a technology

00:21:50,890 --> 00:21:56,160
perspective is a tunnel

00:21:53,170 --> 00:22:00,070
it's a network tunnel on top of a public

00:21:56,160 --> 00:22:02,350
cloud on top of a public network and you

00:22:00,070 --> 00:22:06,820
know what else is a tunnel on top of a

00:22:02,350 --> 00:22:08,230
public network HTTPS so essentially when

00:22:06,820 --> 00:22:10,060
you think about this you're good and you

00:22:08,230 --> 00:22:11,590
reached the conclusion that HTTPS over

00:22:10,060 --> 00:22:14,890
the public Internet is actually more

00:22:11,590 --> 00:22:18,070
secure than V PC because V PC is not

00:22:14,890 --> 00:22:19,570
encrypted okay that's interesting so you

00:22:18,070 --> 00:22:21,490
end up in an architecture like this

00:22:19,570 --> 00:22:24,100
where you have just a bunch of clouds

00:22:21,490 --> 00:22:25,710
and a bunch of data stores talking to

00:22:24,100 --> 00:22:28,300
each other of the public Internet and

00:22:25,710 --> 00:22:30,730
this is basically the cloud native

00:22:28,300 --> 00:22:33,990
architecture that we arrive to after 15

00:22:30,730 --> 00:22:36,670
years of evolution and it has a lot of

00:22:33,990 --> 00:22:39,370
consequences because this system is very

00:22:36,670 --> 00:22:41,680
complex it has a lot of moving parts

00:22:39,370 --> 00:22:44,530
that is hosted over a public network

00:22:41,680 --> 00:22:48,040
that you have no control over and might

00:22:44,530 --> 00:22:49,570
be even hostile from succeed security

00:22:48,040 --> 00:22:51,880
standpoint and reliability standpoint

00:22:49,570 --> 00:22:54,580
and as well and social dynamic changes

00:22:51,880 --> 00:22:56,560
everywhere because once you don't have

00:22:54,580 --> 00:22:58,180
control over the infrastructure I have

00:22:56,560 --> 00:23:00,460
no idea when Amazon is going to make

00:22:58,180 --> 00:23:04,360
some deployment on dynamodb or lambda or

00:23:00,460 --> 00:23:06,160
whatever so I take it as granted that

00:23:04,360 --> 00:23:07,780
everything will change and be dynamic

00:23:06,160 --> 00:23:10,000
all the time even if I myself don't

00:23:07,780 --> 00:23:11,350
change it the network is changing no

00:23:10,000 --> 00:23:15,790
then the internet is changing all the

00:23:11,350 --> 00:23:17,560
time and this is the age of germs this

00:23:15,790 --> 00:23:20,980
is where we move to a new analogy of how

00:23:17,560 --> 00:23:24,780
manager servers it's not cattle managers

00:23:20,980 --> 00:23:26,830
just a bunch of cells like in biology so

00:23:24,780 --> 00:23:28,810
we turn to biology and biological

00:23:26,830 --> 00:23:30,910
systems to try and learn something about

00:23:28,810 --> 00:23:34,050
how we manage this new world that we

00:23:30,910 --> 00:23:37,120
don't that that we evolve to and

00:23:34,050 --> 00:23:38,680
basically when you look at your body you

00:23:37,120 --> 00:23:41,540
see a bunch of autonomous cells semi

00:23:38,680 --> 00:23:44,750
autonomous cells are cooperating

00:23:41,540 --> 00:23:46,419
and your life it's worse so yeah that

00:23:44,750 --> 00:23:48,260
must be good those cells are

00:23:46,419 --> 00:23:49,850
self-organizing if you put those bunch

00:23:48,260 --> 00:23:53,059
of cells they will immediately start

00:23:49,850 --> 00:23:55,970
creating structures that can do useful

00:23:53,059 --> 00:23:58,100
stuff like breathing and they are

00:23:55,970 --> 00:24:00,950
surviving in an uncontrollable and

00:23:58,100 --> 00:24:02,720
sometimes hostile environment and the

00:24:00,950 --> 00:24:07,190
fact that they do that is because the

00:24:02,720 --> 00:24:08,809
we're standing here and talking and one

00:24:07,190 --> 00:24:11,030
of the interesting things about cells is

00:24:08,809 --> 00:24:13,610
that they constantly die and they

00:24:11,030 --> 00:24:16,570
reproduce constantly I'm still

00:24:13,610 --> 00:24:20,600
statistically speaking every one of us

00:24:16,570 --> 00:24:23,150
has replaced the other cells probably

00:24:20,600 --> 00:24:25,160
four to five times from the time you

00:24:23,150 --> 00:24:27,320
were born you don't have even single one

00:24:25,160 --> 00:24:30,230
of the original cells in your body but

00:24:27,320 --> 00:24:33,710
still the structure remains you're still

00:24:30,230 --> 00:24:37,190
alive so basically this is the kind of

00:24:33,710 --> 00:24:40,280
systems that we want today and with

00:24:37,190 --> 00:24:43,429
Ketel and now you kill the sea cow but

00:24:40,280 --> 00:24:45,020
when you're talking about germs we don't

00:24:43,429 --> 00:24:46,610
even understand what sick means because

00:24:45,020 --> 00:24:48,049
there's no clear definition when you're

00:24:46,610 --> 00:24:49,400
talking about the system where every

00:24:48,049 --> 00:24:51,500
transaction is unique and have a

00:24:49,400 --> 00:24:54,530
slightly different behavior you cannot

00:24:51,500 --> 00:24:56,299
even define what the sick cell is it's

00:24:54,530 --> 00:24:58,010
very very complicated everything

00:24:56,299 --> 00:24:59,480
everything that you talked about in

00:24:58,010 --> 00:25:01,669
monitoring when you're talking about

00:24:59,480 --> 00:25:03,590
such a system is statistical we only

00:25:01,669 --> 00:25:07,340
care about statistical macro level

00:25:03,590 --> 00:25:09,200
stability anyway and by the time you

00:25:07,340 --> 00:25:10,520
check one of the cells it's probably

00:25:09,200 --> 00:25:13,330
good to be dead and be replaced by

00:25:10,520 --> 00:25:15,530
another one and only enough in lambda

00:25:13,330 --> 00:25:17,660
you would find that there's no metric

00:25:15,530 --> 00:25:20,570
that tells you how many instances of

00:25:17,660 --> 00:25:22,520
lambda existed in 21-point at any given

00:25:20,570 --> 00:25:24,950
time because you don't care anymore

00:25:22,520 --> 00:25:26,919
and the pricing will also reflect that

00:25:24,950 --> 00:25:29,510
you don't pay for controls in Amazon and

00:25:26,919 --> 00:25:31,400
neither do you pay that in any of the

00:25:29,510 --> 00:25:33,860
other cloud providers because presumably

00:25:31,400 --> 00:25:35,990
don't care how many concurrent instances

00:25:33,860 --> 00:25:37,820
you have and there's no way to catch a

00:25:35,990 --> 00:25:41,929
specific instance of lambda and debug it

00:25:37,820 --> 00:25:45,470
because it just dies after it's done so

00:25:41,929 --> 00:25:47,419
everything changes and the way to manage

00:25:45,470 --> 00:25:49,070
that is to turn to a different model and

00:25:47,419 --> 00:25:51,760
we have those kind of models so-called

00:25:49,070 --> 00:25:53,830
complex adaptive systems

00:25:51,760 --> 00:25:55,240
and complex of that adaptive system in

00:25:53,830 --> 00:25:56,950
the system in which a perfect

00:25:55,240 --> 00:25:58,810
understanding of the individual thoughts

00:25:56,950 --> 00:26:00,220
does not automatically convert perfect

00:25:58,810 --> 00:26:02,860
understanding of the whole system

00:26:00,220 --> 00:26:05,230
behavior and this is very important

00:26:02,860 --> 00:26:07,510
because if until now we imagine that if

00:26:05,230 --> 00:26:09,880
we understand how servers and services

00:26:07,510 --> 00:26:12,550
in our code operate we can understand

00:26:09,880 --> 00:26:15,460
how the system in general operates this

00:26:12,550 --> 00:26:17,290
is longer true first of all there's no

00:26:15,460 --> 00:26:20,170
way to understand you know how the

00:26:17,290 --> 00:26:22,150
public utility clouds work because we're

00:26:20,170 --> 00:26:25,090
not exposed to the internal workings of

00:26:22,150 --> 00:26:28,090
those clouds but even if we did in a

00:26:25,090 --> 00:26:30,340
complex adaptive system even if you knew

00:26:28,090 --> 00:26:32,320
exactly how all the parts behave you

00:26:30,340 --> 00:26:34,360
could not understand the system as a

00:26:32,320 --> 00:26:36,520
whole so we just need to give up on that

00:26:34,360 --> 00:26:38,470
concept and that means that we have to

00:26:36,520 --> 00:26:41,260
change the way that we look about on

00:26:38,470 --> 00:26:44,620
system management and monitoring and all

00:26:41,260 --> 00:26:46,180
those stuff novel related it's a

00:26:44,620 --> 00:26:48,310
frightening world that we have to adapt

00:26:46,180 --> 00:26:50,290
to and by the way this is known as the

00:26:48,310 --> 00:26:53,260
hand of God cloud it was taken over

00:26:50,290 --> 00:26:56,020
medieval Spain in January 12 2016 look

00:26:53,260 --> 00:27:00,640
it up really amazing pictures yeah

00:26:56,020 --> 00:27:02,890
clouds so we have new challenges we need

00:27:00,640 --> 00:27:04,840
to learn how to observe and do

00:27:02,890 --> 00:27:08,380
monitoring you know in the world that

00:27:04,840 --> 00:27:10,840
has you know dynamic the dynamic will

00:27:08,380 --> 00:27:13,390
keep changing all the time and it has a

00:27:10,840 --> 00:27:15,400
lot of information if every transaction

00:27:13,390 --> 00:27:19,240
is you know unique and individual we

00:27:15,400 --> 00:27:21,610
have to now gather and and now analyze

00:27:19,240 --> 00:27:23,680
data about every single transaction this

00:27:21,610 --> 00:27:25,660
is a lot of data this is why monitoring

00:27:23,680 --> 00:27:28,870
is becoming such a big problem why it

00:27:25,660 --> 00:27:31,480
becomes a big data problem we need to

00:27:28,870 --> 00:27:33,300
manage numerous semi-autonomous

00:27:31,480 --> 00:27:36,550
components sometimes in the millions

00:27:33,300 --> 00:27:38,410
that's a lot of processes we to

00:27:36,550 --> 00:27:40,930
understand loosely coupled system which

00:27:38,410 --> 00:27:43,000
is very very hard we need to learn how

00:27:40,930 --> 00:27:47,200
to control a system that nonlinear and

00:27:43,000 --> 00:27:49,270
chaotic and everyone who had no a system

00:27:47,200 --> 00:27:51,310
of this breakdown can tell you that it

00:27:49,270 --> 00:27:54,190
doesn't break in expected ways it breaks

00:27:51,310 --> 00:27:57,160
in available in very weird ways that you

00:27:54,190 --> 00:27:58,600
cannot predict how do you do security

00:27:57,160 --> 00:28:00,340
when you're talking about the system

00:27:58,600 --> 00:28:02,080
that is inherently public all the time

00:28:00,340 --> 00:28:03,850
all of its parts are inherently public

00:28:02,080 --> 00:28:04,780
in a hostile environment because the

00:28:03,850 --> 00:28:07,000
internet is you know

00:28:04,780 --> 00:28:08,260
was not a very nice place and every time

00:28:07,000 --> 00:28:11,370
you put something on the internet it's

00:28:08,260 --> 00:28:14,290
immediately ddosed so yeah that's will

00:28:11,370 --> 00:28:16,750
but the concept of resilience the

00:28:14,290 --> 00:28:18,280
concept of you know having a reliable

00:28:16,750 --> 00:28:20,830
system that changes as well because all

00:28:18,280 --> 00:28:22,810
the pots die all the time and they're

00:28:20,830 --> 00:28:24,280
being regenerated all the time so it

00:28:22,810 --> 00:28:26,710
only makes sense now to talk about

00:28:24,280 --> 00:28:28,600
resilience and reliability when you're

00:28:26,710 --> 00:28:30,130
talking about the macro when you're

00:28:28,600 --> 00:28:32,770
talking about the overall system and

00:28:30,130 --> 00:28:34,240
again this in the monitoring systems

00:28:32,770 --> 00:28:36,640
that we have that tell you that this

00:28:34,240 --> 00:28:38,920
service is either green or red a NOLA

00:28:36,640 --> 00:28:39,940
don't no longer make sense because when

00:28:38,920 --> 00:28:42,370
you're talking about the system like

00:28:39,940 --> 00:28:44,200
quicks you only knew always have no

00:28:42,370 --> 00:28:46,930
matter when you look at least one

00:28:44,200 --> 00:28:48,280
percent of ills and it's no more it's

00:28:46,930 --> 00:28:51,910
normal to have that and there's nowhere

00:28:48,280 --> 00:28:53,530
around that so the definition of good

00:28:51,910 --> 00:28:59,170
now becomes something completely

00:28:53,530 --> 00:29:01,540
different so it's it's very fortunate

00:28:59,170 --> 00:29:02,920
for us that a lot of people a lot of

00:29:01,540 --> 00:29:05,980
smart people thought about those

00:29:02,920 --> 00:29:08,380
problems very very long time ago so this

00:29:05,980 --> 00:29:10,240
is not Borges and mal Borges is the

00:29:08,380 --> 00:29:11,890
father of compromise theory but also

00:29:10,240 --> 00:29:15,610
configure of modern configuration

00:29:11,890 --> 00:29:18,370
management in 1998 he wrote an article

00:29:15,610 --> 00:29:21,160
called computer terminology which was

00:29:18,370 --> 00:29:22,630
the basis of cfengine which was the

00:29:21,160 --> 00:29:25,120
original configuration management tool

00:29:22,630 --> 00:29:27,970
which no one uses anymore

00:29:25,120 --> 00:29:30,190
and he talked back then about macro

00:29:27,970 --> 00:29:32,380
level stability and convergence meaning

00:29:30,190 --> 00:29:34,710
processes that work to converge to a

00:29:32,380 --> 00:29:37,330
specific state that you define and

00:29:34,710 --> 00:29:39,340
you're the programmer or you as a system

00:29:37,330 --> 00:29:41,110
administrator would define a state and

00:29:39,340 --> 00:29:43,510
write the code that converges to order

00:29:41,110 --> 00:29:45,880
state and this time you get macro level

00:29:43,510 --> 00:29:48,370
stability but this requires continuous

00:29:45,880 --> 00:29:50,800
active maintenance meaning the constant

00:29:48,370 --> 00:29:53,050
we provisioning or the constant cleaning

00:29:50,800 --> 00:29:55,450
and fixing of all those components of

00:29:53,050 --> 00:29:58,510
run and it's a very interesting topic

00:29:55,450 --> 00:30:01,030
and I highly suggest that you read about

00:29:58,510 --> 00:30:02,410
it because if you think about those

00:30:01,030 --> 00:30:05,650
systems of the ground having a future

00:30:02,410 --> 00:30:08,070
without those types of ideas it's going

00:30:05,650 --> 00:30:10,090
to be very very hard to build them

00:30:08,070 --> 00:30:11,940
luckily nizzle we have a lot of

00:30:10,090 --> 00:30:15,670
companies that try to help those problem

00:30:11,940 --> 00:30:17,290
some of those companies are being

00:30:15,670 --> 00:30:20,230
supported by others a lot of those

00:30:17,290 --> 00:30:22,300
companies are not I just put a dump of

00:30:20,230 --> 00:30:24,370
those companies here on the sand those

00:30:22,300 --> 00:30:26,020
companies here on board though a lot of

00:30:24,370 --> 00:30:30,450
other companies as well to try to help

00:30:26,020 --> 00:30:33,010
those things and with a left try to help

00:30:30,450 --> 00:30:36,430
companies and organizations to

00:30:33,010 --> 00:30:38,590
transition to this new world so thank

00:30:36,430 --> 00:30:40,560
you very much and by the way if you're

00:30:38,590 --> 00:30:43,210
looking for a job we have a website that

00:30:40,560 --> 00:30:44,680
you know have a jobs from all about

00:30:43,210 --> 00:30:45,540
those four companies so thank you very

00:30:44,680 --> 00:30:49,700
much

00:30:45,540 --> 00:30:54,829
[Applause]

00:30:49,700 --> 00:30:54,829

YouTube URL: https://www.youtube.com/watch?v=vCprNzwvM4s


