Title: Observability - the practical approach - Anton Drukh - DevOpsDays Tel Aviv 2018
Publication date: 2019-01-03
Playlist: DevOpsDays Tel Aviv 2018
Description: 
	Observability is the buzz these days. Everybody wants their code to explain to them what the issue is and how to fix it. But how do you get it right for your architecture, team structure and product maturity? Iâ€™ll share the path to observability at Snyk.io from day one to a team of 20 today.
Captions: 
	00:00:01,980 --> 00:00:08,610
[Music]

00:00:06,390 --> 00:00:10,620
welcome my name is Anton I'm going to

00:00:08,610 --> 00:00:13,650
talk a bit about observability I think

00:00:10,620 --> 00:00:15,960
I'm a bit late to the trend I think the

00:00:13,650 --> 00:00:17,130
buzz is kind of dying out a bit but

00:00:15,960 --> 00:00:19,650
that's actually a good thing because

00:00:17,130 --> 00:00:21,539
then observability can become this

00:00:19,650 --> 00:00:25,560
boring thing that is easy to understand

00:00:21,539 --> 00:00:28,529
and not as buzzy as it was a year or two

00:00:25,560 --> 00:00:30,810
ago before I introduce myself in my

00:00:28,529 --> 00:00:33,719
approach to this just a quick poll to

00:00:30,810 --> 00:00:36,899
understand the blend of audience that is

00:00:33,719 --> 00:00:40,160
attending today a few general questions

00:00:36,899 --> 00:00:42,329
so how many of you feel comfortable with

00:00:40,160 --> 00:00:45,329
differences between monitoring and

00:00:42,329 --> 00:00:48,809
observability instrumentation all these

00:00:45,329 --> 00:00:50,789
all these words okay good so you're in

00:00:48,809 --> 00:00:53,699
the right place I hope to to clear the

00:00:50,789 --> 00:00:56,430
fog on this a bit another question how

00:00:53,699 --> 00:00:58,590
many people here would identify

00:00:56,430 --> 00:01:03,199
themselves as working on a SAS offering

00:00:58,590 --> 00:01:06,210
rather than an on-prem solution okay so

00:01:03,199 --> 00:01:10,350
not not too many okay that's interesting

00:01:06,210 --> 00:01:12,510
and one last question would be maybe the

00:01:10,350 --> 00:01:15,900
operational stack how many people here

00:01:12,510 --> 00:01:19,020
identify more with micro services

00:01:15,900 --> 00:01:20,909
architectures and spend their time their

00:01:19,020 --> 00:01:23,460
work time with that versus a monolith

00:01:20,909 --> 00:01:26,820
application okay more hands in the air

00:01:23,460 --> 00:01:29,610
thank you thanks very much okay my name

00:01:26,820 --> 00:01:32,070
is Anton I'm the VP engineering of sneek

00:01:29,610 --> 00:01:34,530
we'll talk a bit about the company

00:01:32,070 --> 00:01:36,299
my slides are going to be mainly a

00:01:34,530 --> 00:01:38,360
reminder for me nothing much for you to

00:01:36,299 --> 00:01:41,329
read didn't invest in the you know

00:01:38,360 --> 00:01:44,159
emojis or means or all that stuff so

00:01:41,329 --> 00:01:47,070
like I said boring is good it's going to

00:01:44,159 --> 00:01:48,720
be a bit boring I actually have one or

00:01:47,070 --> 00:01:51,930
two slides with code on them

00:01:48,720 --> 00:01:53,939
so six or five lines but we'll walk

00:01:51,930 --> 00:01:56,490
through that the most interesting part

00:01:53,939 --> 00:01:57,960
awaits those who will be patient enough

00:01:56,490 --> 00:01:59,670
and we'll wait until the end of the

00:01:57,960 --> 00:02:03,270
presentation where I will actually do

00:01:59,670 --> 00:02:05,340
some live demos on how we employ our

00:02:03,270 --> 00:02:08,640
solution for observability and what we

00:02:05,340 --> 00:02:10,619
can get from it the first thing is some

00:02:08,640 --> 00:02:12,720
context what I'm going to to share here

00:02:10,619 --> 00:02:13,710
is based a lot on our personal personal

00:02:12,720 --> 00:02:16,350
experiences it

00:02:13,710 --> 00:02:18,990
at sneak and is not easily copy/paste

00:02:16,350 --> 00:02:20,940
able to any other organization so just a

00:02:18,990 --> 00:02:23,970
few buzzwords about what is it that we

00:02:20,940 --> 00:02:25,980
do and how we do it we're we're a young

00:02:23,970 --> 00:02:27,420
company we're a dev tooling company

00:02:25,980 --> 00:02:30,870
operating in the security and

00:02:27,420 --> 00:02:33,180
open-source space which makes which

00:02:30,870 --> 00:02:34,980
makes it very easy for us to adopt

00:02:33,180 --> 00:02:36,630
relevant technologies because our

00:02:34,980 --> 00:02:40,200
business domain is very is very

00:02:36,630 --> 00:02:44,150
technological we're building a SAS

00:02:40,200 --> 00:02:47,490
offering it is based on a kubernetes

00:02:44,150 --> 00:02:50,010
cluster nodejs and python are the main

00:02:47,490 --> 00:02:52,709
languages in the micro services stack

00:02:50,010 --> 00:02:54,330
okay so whenever you see something

00:02:52,709 --> 00:02:56,370
here's something and you say hey how

00:02:54,330 --> 00:03:00,170
come it works for them maybe it wouldn't

00:02:56,370 --> 00:03:03,150
work for us at the company you work at

00:03:00,170 --> 00:03:05,820
try to ask yourself whether this is your

00:03:03,150 --> 00:03:07,230
reality or not I would like to assume

00:03:05,820 --> 00:03:10,260
that what I'm going to share is

00:03:07,230 --> 00:03:13,470
applicable to wider audiences then then

00:03:10,260 --> 00:03:16,110
the operation we run but I really urge

00:03:13,470 --> 00:03:19,680
you to ask questions interrupt me like

00:03:16,110 --> 00:03:23,519
halfway through if if anything is

00:03:19,680 --> 00:03:25,650
unclear this is the most graphical slide

00:03:23,519 --> 00:03:30,540
you'll see on my on my presentation and

00:03:25,650 --> 00:03:32,160
I want to see a few hands who get warm

00:03:30,540 --> 00:03:34,110
and fuzzy associations seeing this

00:03:32,160 --> 00:03:37,560
picture okay very good so the audience

00:03:34,110 --> 00:03:41,940
is is right and they want to for those

00:03:37,560 --> 00:03:44,580
born like later this is a very old game

00:03:41,940 --> 00:03:46,320
called lemmings and I'm going to use

00:03:44,580 --> 00:03:50,340
this as an analogy for what

00:03:46,320 --> 00:03:51,510
observability means to me in this game

00:03:50,340 --> 00:03:55,410
this is by the way the first stage the

00:03:51,510 --> 00:03:57,450
easiest stage you need to set up this

00:03:55,410 --> 00:04:00,330
maze in a way that will allow the

00:03:57,450 --> 00:04:03,540
lemmings as they pour into the into the

00:04:00,330 --> 00:04:05,970
scene through this opening to get to the

00:04:03,540 --> 00:04:07,530
exit and the lemmings are quite silly

00:04:05,970 --> 00:04:09,959
they only do what you tell them to do

00:04:07,530 --> 00:04:11,250
and another thing about them is that

00:04:09,959 --> 00:04:13,769
they're always moving they're not

00:04:11,250 --> 00:04:16,590
waiting for you to order they begin

00:04:13,769 --> 00:04:19,769
walking the thing here is that you need

00:04:16,590 --> 00:04:21,570
to choose the bigger role and assign it

00:04:19,769 --> 00:04:23,940
to one lemming so that they dig a hole

00:04:21,570 --> 00:04:27,070
through and then all the lemmings end up

00:04:23,940 --> 00:04:28,480
in the right place shoot some lemmings

00:04:27,070 --> 00:04:30,130
walk in the wrong direction they will

00:04:28,480 --> 00:04:32,470
walk all the way left here there's a

00:04:30,130 --> 00:04:35,860
wall here and they will walk back in and

00:04:32,470 --> 00:04:40,780
and exit the stage your goal on in this

00:04:35,860 --> 00:04:44,290
game is to get as many as many lemmings

00:04:40,780 --> 00:04:46,210
as you can safely from the entrance to

00:04:44,290 --> 00:04:47,980
the exit what does this have to do with

00:04:46,210 --> 00:04:49,870
anything right it's a it's a very nice

00:04:47,980 --> 00:04:52,480
game with very complex stages down the

00:04:49,870 --> 00:04:55,930
road but it is very relevant because

00:04:52,480 --> 00:04:58,990
each such stage is basically an

00:04:55,930 --> 00:05:02,110
application and those lemmings can be

00:04:58,990 --> 00:05:04,300
requests coming in and your code is

00:05:02,110 --> 00:05:07,660
going to run and handle these requests

00:05:04,300 --> 00:05:09,910
as it as they go but you don't control

00:05:07,660 --> 00:05:12,100
how many requests you get and you want

00:05:09,910 --> 00:05:13,840
to get more right you're growing and you

00:05:12,100 --> 00:05:15,760
want to have proper responses to your

00:05:13,840 --> 00:05:17,890
requests you want each request to be

00:05:15,760 --> 00:05:21,790
handled properly throughout the stage

00:05:17,890 --> 00:05:23,500
you've set the code and HTTP 200 that's

00:05:21,790 --> 00:05:25,540
that's the exit gate right you want to

00:05:23,500 --> 00:05:29,910
send the send the response that was

00:05:25,540 --> 00:05:33,090
expected and to me observability is

00:05:29,910 --> 00:05:35,110
designing to the stability in production

00:05:33,090 --> 00:05:37,650
understanding what is really going to

00:05:35,110 --> 00:05:39,970
happen outside of your dev environment

00:05:37,650 --> 00:05:41,530
take care of all the lemmings

00:05:39,970 --> 00:05:44,320
you need to build a service and feel

00:05:41,530 --> 00:05:47,590
safe about its ability to withstand the

00:05:44,320 --> 00:05:50,020
load and complexity and whatnot but also

00:05:47,590 --> 00:05:51,820
care for the individual lemming because

00:05:50,020 --> 00:05:53,590
that customer who is not going to get

00:05:51,820 --> 00:05:55,360
what they wanted from your service is

00:05:53,590 --> 00:05:58,180
going to open a support ticket and say

00:05:55,360 --> 00:06:00,580
at this approximate date and time I

00:05:58,180 --> 00:06:03,550
click that button and everything crashed

00:06:00,580 --> 00:06:05,950
and you would really want to know what

00:06:03,550 --> 00:06:08,050
happened with their specific request to

00:06:05,950 --> 00:06:10,840
those familiar with the game there is

00:06:08,050 --> 00:06:16,780
this explosion icon here sometimes

00:06:10,840 --> 00:06:18,730
requests we just explode so what you

00:06:16,780 --> 00:06:20,620
gain when you have proper observability

00:06:18,730 --> 00:06:24,280
and this is like the best definition I

00:06:20,620 --> 00:06:27,280
can give is proper fast troubleshooting

00:06:24,280 --> 00:06:29,350
no more there's this support case that

00:06:27,280 --> 00:06:32,050
has been going around the team for weeks

00:06:29,350 --> 00:06:33,460
no one knows what to do with it but we

00:06:32,050 --> 00:06:36,370
cannot just go back to the customer and

00:06:33,460 --> 00:06:40,220
say we don't yet know taking the pain

00:06:36,370 --> 00:06:42,710
and cooling off this hot potato

00:06:40,220 --> 00:06:45,380
the data you have on your system becomes

00:06:42,710 --> 00:06:48,230
very trustworthy and serves as a single

00:06:45,380 --> 00:06:50,660
source of truth no more I'm seeing these

00:06:48,230 --> 00:06:52,610
numbers okay but I'm seeing numbers that

00:06:50,660 --> 00:06:55,760
completely contradict what you're seeing

00:06:52,610 --> 00:06:58,580
we have a problem somewhere and the last

00:06:55,760 --> 00:07:00,800
and most important part is a scientific

00:06:58,580 --> 00:07:02,480
approach to changes we are making

00:07:00,800 --> 00:07:05,890
changes in our system all the time we're

00:07:02,480 --> 00:07:07,810
deploying features we are fixing bugs

00:07:05,890 --> 00:07:10,160
observability is the difference between

00:07:07,810 --> 00:07:10,930
shipping it out there to see what

00:07:10,160 --> 00:07:14,450
happens

00:07:10,930 --> 00:07:16,700
versus knowing what to expect once the

00:07:14,450 --> 00:07:21,410
change gets shipped and that's a very

00:07:16,700 --> 00:07:22,610
very important change so I'm I'm I think

00:07:21,410 --> 00:07:26,300
I'm doing quite a good job explaining

00:07:22,610 --> 00:07:28,580
why this is the heaven we all want so

00:07:26,300 --> 00:07:30,380
why aren't we there already like if it

00:07:28,580 --> 00:07:34,550
all makes sense why didn't we just build

00:07:30,380 --> 00:07:36,410
it I see a few problems okay when you're

00:07:34,550 --> 00:07:38,630
just starting out the last thing you

00:07:36,410 --> 00:07:40,340
want to take care of is something that

00:07:38,630 --> 00:07:42,500
is not a new feature right you have this

00:07:40,340 --> 00:07:44,990
project which is two or three days old

00:07:42,500 --> 00:07:46,790
and you have so much ideas around what

00:07:44,990 --> 00:07:49,280
it can do the last thing you're going to

00:07:46,790 --> 00:07:50,780
invest in is teaching it how to talk

00:07:49,280 --> 00:07:52,370
back to you and provide you with these

00:07:50,780 --> 00:07:55,780
insights you just want to ship out

00:07:52,370 --> 00:08:00,410
features and and they in the end scope

00:07:55,780 --> 00:08:02,420
but time goes by you take a look back

00:08:00,410 --> 00:08:04,460
and you say oh no what have I created

00:08:02,420 --> 00:08:07,040
this unmanageable piece of code that

00:08:04,460 --> 00:08:09,560
does a lot of things only I remember

00:08:07,040 --> 00:08:12,260
roughly how requests are being handled

00:08:09,560 --> 00:08:14,990
and what their flow is now is a very bad

00:08:12,260 --> 00:08:18,670
time to start introducing something that

00:08:14,990 --> 00:08:21,320
will allow that level of visibility for

00:08:18,670 --> 00:08:25,400
reliable data and the source of truth

00:08:21,320 --> 00:08:28,160
and and all that I mentioned and this is

00:08:25,400 --> 00:08:30,350
I think the main reason why sometimes we

00:08:28,160 --> 00:08:32,870
feel this is simply too good to be true

00:08:30,350 --> 00:08:34,880
and it cannot happen it's either too

00:08:32,870 --> 00:08:36,890
soon or too late what's the right time

00:08:34,880 --> 00:08:39,910
to do it what tools exist that can

00:08:36,890 --> 00:08:42,710
actually help me it's all a blur and

00:08:39,910 --> 00:08:46,340
this is where I get to the technical

00:08:42,710 --> 00:08:48,170
part so my solution to observability and

00:08:46,340 --> 00:08:50,060
there are plenty of amazing tools out

00:08:48,170 --> 00:08:53,480
there but my solution is very very

00:08:50,060 --> 00:08:57,620
simple it is based on logs logs

00:08:53,480 --> 00:09:00,769
not have very good karma and we usually

00:08:57,620 --> 00:09:02,690
think about them when we say I couldn't

00:09:00,769 --> 00:09:04,430
reproduce the issue I will just add more

00:09:02,690 --> 00:09:07,040
logs and push them to production and see

00:09:04,430 --> 00:09:10,010
what that gets me okay they tend to

00:09:07,040 --> 00:09:13,010
become meaningful only to the person who

00:09:10,010 --> 00:09:14,750
wrote them they tend to become outdated

00:09:13,010 --> 00:09:16,730
two days after they've been written and

00:09:14,750 --> 00:09:20,269
used for the troubleshooting case they

00:09:16,730 --> 00:09:23,420
were introduced for and it becomes a

00:09:20,269 --> 00:09:26,410
pile of junk okay a quote I saw on some

00:09:23,420 --> 00:09:29,389
blog is something along the lines of

00:09:26,410 --> 00:09:32,540
logs is where strings is where data goes

00:09:29,389 --> 00:09:34,639
to die okay nothing like ever comes out

00:09:32,540 --> 00:09:37,670
of there so I'm suggesting a different

00:09:34,639 --> 00:09:41,060
approach to this and I'm going to list

00:09:37,670 --> 00:09:44,300
six or seven steps that we've taken over

00:09:41,060 --> 00:09:46,790
the last three years in our company that

00:09:44,300 --> 00:09:49,430
have brought us to what I think is a

00:09:46,790 --> 00:09:52,070
very good place we should all strive to

00:09:49,430 --> 00:09:54,380
be in we used logs to do this and I'll

00:09:52,070 --> 00:09:57,769
make some references to to the technical

00:09:54,380 --> 00:10:00,079
sides of of what it meant for us but the

00:09:57,769 --> 00:10:02,389
first step and this is not just like a

00:10:00,079 --> 00:10:04,639
programmers joke with step zero this is

00:10:02,389 --> 00:10:06,920
prior to the first step you need to

00:10:04,639 --> 00:10:09,170
understand that this is a mindset okay

00:10:06,920 --> 00:10:11,870
it is not a single person's job to just

00:10:09,170 --> 00:10:14,360
say hey I did this thing only I know how

00:10:11,870 --> 00:10:16,010
it was done no one needs to understand

00:10:14,360 --> 00:10:18,769
it it will just work for the rest of us

00:10:16,010 --> 00:10:21,500
it needs to be a team effort make sure

00:10:18,769 --> 00:10:24,110
that if you feel energized after this

00:10:21,500 --> 00:10:27,110
talk and you feel this future is within

00:10:24,110 --> 00:10:29,810
reach do talk to your team about it and

00:10:27,110 --> 00:10:31,790
make sure that you are all committed to

00:10:29,810 --> 00:10:34,430
this process because it's a process it's

00:10:31,790 --> 00:10:37,550
not a 2-minute work or two days of work

00:10:34,430 --> 00:10:39,589
and and everything's done our take on

00:10:37,550 --> 00:10:42,620
this and this will repeat on all the

00:10:39,589 --> 00:10:45,560
slides as I want to make as much

00:10:42,620 --> 00:10:47,750
references to to our internal experience

00:10:45,560 --> 00:10:50,149
with this is that we invest in this a

00:10:47,750 --> 00:10:52,639
lot okay our training on boiling new

00:10:50,149 --> 00:10:56,180
hires to the team has a very long

00:10:52,639 --> 00:10:58,490
chapter on on how we do logging and how

00:10:56,180 --> 00:11:01,490
it helps us code reviews would sometimes

00:10:58,490 --> 00:11:03,800
go like comment after comment on but are

00:11:01,490 --> 00:11:06,709
we logging this specific case in the

00:11:03,800 --> 00:11:07,440
right way to help us so that once

00:11:06,709 --> 00:11:09,900
something does

00:11:07,440 --> 00:11:11,970
happen in production we will not say oh

00:11:09,900 --> 00:11:14,430
we wish we have had these logs we will

00:11:11,970 --> 00:11:17,460
already have them in place and on-call

00:11:14,430 --> 00:11:19,460
on-call is a on-call rotation we run on

00:11:17,460 --> 00:11:22,830
the team every developer participates

00:11:19,460 --> 00:11:25,800
our logging is a number is the number

00:11:22,830 --> 00:11:28,170
one tool we we use when we want to

00:11:25,800 --> 00:11:31,050
troubleshoot something and even if you

00:11:28,170 --> 00:11:33,600
don't contribute much to logging in your

00:11:31,050 --> 00:11:35,520
new code base you will get familiar with

00:11:33,600 --> 00:11:41,070
the power of logging the way it's being

00:11:35,520 --> 00:11:42,840
used the moment you go on code the first

00:11:41,070 --> 00:11:45,120
step is to decide where to keep them ok

00:11:42,840 --> 00:11:47,400
we're thinking about the end end game

00:11:45,120 --> 00:11:51,060
here and not ok I will just start

00:11:47,400 --> 00:11:52,920
logging things in the way I do now but

00:11:51,060 --> 00:11:54,960
if you can and build it if you must is

00:11:52,920 --> 00:11:57,420
is a very important philosophy for a lot

00:11:54,960 --> 00:12:00,390
of things here included logging is a

00:11:57,420 --> 00:12:03,750
generic need it's a problem you have

00:12:00,390 --> 00:12:05,610
very little uniqueness about ok it's

00:12:03,750 --> 00:12:07,800
been solved by many other people for

00:12:05,610 --> 00:12:10,410
many other use cases try to find

00:12:07,800 --> 00:12:13,440
something that fits your size it is very

00:12:10,410 --> 00:12:15,360
tempting to run your own ALK stack or i

00:12:13,440 --> 00:12:17,970
don't know what don't do it you've been

00:12:15,360 --> 00:12:20,010
hired to move your company forward and

00:12:17,970 --> 00:12:22,710
this is a tool that will help you this

00:12:20,010 --> 00:12:24,960
may this must not become the product

00:12:22,710 --> 00:12:28,170
itself if you end up having one or two

00:12:24,960 --> 00:12:30,390
people on a team of 10 or 20 constantly

00:12:28,170 --> 00:12:33,060
worrying about the usability of this

00:12:30,390 --> 00:12:35,280
infrastructure you took a wrong turn ok

00:12:33,060 --> 00:12:38,610
and this is this is something very dear

00:12:35,280 --> 00:12:40,560
to me the end goal is for developers to

00:12:38,610 --> 00:12:42,840
be very efficient with their time if it

00:12:40,560 --> 00:12:44,240
costs you one or two developers for the

00:12:42,840 --> 00:12:48,510
rest to be efficient with their time

00:12:44,240 --> 00:12:49,320
efficiency is in question big shout out

00:12:48,510 --> 00:12:50,910
to Axio

00:12:49,320 --> 00:12:54,120
we are very happy customers they're

00:12:50,910 --> 00:12:56,850
sponsoring this event we're using them

00:12:54,120 --> 00:12:59,070
as a as a managed service as they manage

00:12:56,850 --> 00:13:01,470
the elkay not to care about all the

00:12:59,070 --> 00:13:03,690
complexities of running our own we're

00:13:01,470 --> 00:13:06,510
pushing about 15 gigabytes of text of

00:13:03,690 --> 00:13:10,140
logs daily we've grown from nothing to

00:13:06,510 --> 00:13:11,580
15 we're not the largest I'm sorry we're

00:13:10,140 --> 00:13:14,730
not the largest customers of logs i/o

00:13:11,580 --> 00:13:16,470
this is our experience we find the

00:13:14,730 --> 00:13:18,690
headache being taken care of by someone

00:13:16,470 --> 00:13:21,250
else very refreshing allowing us to

00:13:18,690 --> 00:13:23,899
focus on what's important

00:13:21,250 --> 00:13:25,699
the second step is okay now you have

00:13:23,899 --> 00:13:27,740
this thing working for you let's start

00:13:25,699 --> 00:13:29,899
shipping gloves somewhere okay how do we

00:13:27,740 --> 00:13:33,170
do this how many of you are familiar

00:13:29,899 --> 00:13:35,209
with the 12 factors thing like okay very

00:13:33,170 --> 00:13:38,259
good so it's a set of architectural

00:13:35,209 --> 00:13:42,019
rules for what makes a good application

00:13:38,259 --> 00:13:44,660
remember number 11 out of these 12 out

00:13:42,019 --> 00:13:47,420
of these 12 talks about logs and it

00:13:44,660 --> 00:13:50,389
basically says logging is is a big thing

00:13:47,420 --> 00:13:53,509
your application needs to do very little

00:13:50,389 --> 00:13:55,029
about it pour them to STD out and let

00:13:53,509 --> 00:13:57,769
something else take care of this

00:13:55,029 --> 00:14:01,880
rotating files formatting your logs

00:13:57,769 --> 00:14:06,670
buffering all of that it it quickly

00:14:01,880 --> 00:14:10,639
become becomes a very big complex task

00:14:06,670 --> 00:14:13,370
don't be caught by surprise if you

00:14:10,639 --> 00:14:15,139
choose to take care of this yourself all

00:14:13,370 --> 00:14:17,980
our micro services are dumping their

00:14:15,139 --> 00:14:21,319
logs to STD out and we have other things

00:14:17,980 --> 00:14:24,920
letting us control them I'll get to that

00:14:21,319 --> 00:14:27,500
in a second just a logging library okay

00:14:24,920 --> 00:14:30,110
the tons of those exist the bunion is

00:14:27,500 --> 00:14:32,660
our choice there's a it's a JavaScript

00:14:30,110 --> 00:14:36,110
clone it also exists for Python it is

00:14:32,660 --> 00:14:37,880
very efficient it uses single line

00:14:36,110 --> 00:14:42,230
Jason's which are bad for humans very

00:14:37,880 --> 00:14:45,290
good for machines so we use that and we

00:14:42,230 --> 00:14:47,870
use fluently demons on our kubernetes

00:14:45,290 --> 00:14:50,420
cluster to push the logs so the part

00:14:47,870 --> 00:14:52,939
taking care of what happens after the

00:14:50,420 --> 00:14:55,100
log has been printed is very thin very

00:14:52,939 --> 00:14:57,649
tailor-made to the indexing service that

00:14:55,100 --> 00:14:59,569
we use Jason's work well being parsed

00:14:57,649 --> 00:15:01,519
and elasticsearch I don't need to sell

00:14:59,569 --> 00:15:03,199
sell you on this this is our choice

00:15:01,519 --> 00:15:05,300
there are many other solutions you can

00:15:03,199 --> 00:15:06,819
use Splunk you can use locally or

00:15:05,300 --> 00:15:09,319
whatnot

00:15:06,819 --> 00:15:10,670
make your choice but these are really

00:15:09,319 --> 00:15:13,250
the building blocks and the technical

00:15:10,670 --> 00:15:15,649
decisions you need to make once you've

00:15:13,250 --> 00:15:17,810
made the external technical decisions of

00:15:15,649 --> 00:15:20,569
where is it that I'm pushing my logs and

00:15:17,810 --> 00:15:22,339
what library I chose to do it comes the

00:15:20,569 --> 00:15:24,410
hard part and this is really the hard

00:15:22,339 --> 00:15:28,490
part okay you need to have your log

00:15:24,410 --> 00:15:32,180
structured no more very long strings

00:15:28,490 --> 00:15:34,700
with very various replacements you know

00:15:32,180 --> 00:15:36,800
percent as for this percentage for that

00:15:34,700 --> 00:15:39,170
this is a very quick way of making sure

00:15:36,800 --> 00:15:40,760
the logs will be relevant only to the

00:15:39,170 --> 00:15:43,310
person who wrote them in the first place

00:15:40,760 --> 00:15:45,649
if you want logs that can help you

00:15:43,310 --> 00:15:48,320
answer questions that you don't even

00:15:45,649 --> 00:15:50,899
know how to ask right now you're you

00:15:48,320 --> 00:15:52,880
won't be able to foresee the next like

00:15:50,899 --> 00:15:55,130
production outage or some functional

00:15:52,880 --> 00:15:58,519
problem you need to structure your logs

00:15:55,130 --> 00:16:01,610
coming back to step 0 this is the way

00:15:58,519 --> 00:16:04,430
the the point in time where the team

00:16:01,610 --> 00:16:06,769
commitment to working this way is now

00:16:04,430 --> 00:16:08,870
being applied by everyone for everyone

00:16:06,769 --> 00:16:11,120
all the logs needs need to be structured

00:16:08,870 --> 00:16:13,610
what does it mean it basically means

00:16:11,120 --> 00:16:16,100
that you need to push context objects

00:16:13,610 --> 00:16:18,740
and not strings that encapsulate a lot

00:16:16,100 --> 00:16:21,079
of a lot of data in them I will show

00:16:18,740 --> 00:16:24,620
that on one of the next slides with with

00:16:21,079 --> 00:16:27,410
some code the logging level right you

00:16:24,620 --> 00:16:30,589
sometimes see like code calling out to

00:16:27,410 --> 00:16:32,990
info and fatal and error and trace and

00:16:30,589 --> 00:16:35,329
debug and you're like who needs that

00:16:32,990 --> 00:16:37,279
like there is there is there is a signal

00:16:35,329 --> 00:16:39,529
being sent here someone chose to use the

00:16:37,279 --> 00:16:41,600
debug level and not the info level what

00:16:39,529 --> 00:16:44,270
did they mean this is all part of the

00:16:41,600 --> 00:16:47,270
context you need to choose very precise

00:16:44,270 --> 00:16:50,529
rules and make very few decisions limit

00:16:47,270 --> 00:16:54,500
the the choices that you make so that

00:16:50,529 --> 00:16:56,690
the signals you send are very sensible

00:16:54,500 --> 00:16:58,610
to someone who has never written a line

00:16:56,690 --> 00:16:59,899
of code and this microservice but he's

00:16:58,610 --> 00:17:02,230
now debugging it because they are on

00:16:59,899 --> 00:17:04,459
call and something went wrong

00:17:02,230 --> 00:17:07,819
special treatment prayers maybe will way

00:17:04,459 --> 00:17:10,309
we'll get to this later so as I promised

00:17:07,819 --> 00:17:12,439
the first example of code right

00:17:10,309 --> 00:17:15,260
this is JavaScript if you're not

00:17:12,439 --> 00:17:17,540
familiar I think it's still easy to read

00:17:15,260 --> 00:17:19,579
so the first thing we do we say let's

00:17:17,540 --> 00:17:21,439
log this at the info level ok the choice

00:17:19,579 --> 00:17:24,260
of the log level is an important signal

00:17:21,439 --> 00:17:26,419
we use info to indicate that things are

00:17:24,260 --> 00:17:29,960
happening as planned ok that would be

00:17:26,419 --> 00:17:32,090
that lemming falling down a shaft you

00:17:29,960 --> 00:17:32,630
just dug out because you intended for

00:17:32,090 --> 00:17:34,460
that to happen

00:17:32,630 --> 00:17:36,590
and you will in the dilemma dilemma will

00:17:34,460 --> 00:17:38,780
just say I'm now falling down the shaft

00:17:36,590 --> 00:17:40,790
that was just dug out and I measured

00:17:38,780 --> 00:17:44,270
some temperature along the way it took

00:17:40,790 --> 00:17:47,400
me this much milliseconds to do so I'm

00:17:44,270 --> 00:17:50,340
carrying these parameters on my request

00:17:47,400 --> 00:17:52,620
that's about it okay so the object you

00:17:50,340 --> 00:17:54,630
see here with these three keys is the

00:17:52,620 --> 00:17:56,790
context that is always going to change

00:17:54,630 --> 00:17:59,010
different lemmings are going to fall at

00:17:56,790 --> 00:18:00,600
different times different speeds going

00:17:59,010 --> 00:18:03,630
to measure different temperatures I

00:18:00,600 --> 00:18:05,930
don't know what but this second argument

00:18:03,630 --> 00:18:10,950
here is going to be a constant string

00:18:05,930 --> 00:18:13,980
avoid using varying values in this

00:18:10,950 --> 00:18:16,740
string okay this is a poor man's

00:18:13,980 --> 00:18:19,110
solution to having your code not

00:18:16,740 --> 00:18:21,840
instrumented to the point of stopping

00:18:19,110 --> 00:18:24,330
but at the same time being able to just

00:18:21,840 --> 00:18:26,640
find a line of log in your logging and

00:18:24,330 --> 00:18:28,620
say hey where does this come from in the

00:18:26,640 --> 00:18:31,350
code and just search it in your code

00:18:28,620 --> 00:18:33,510
base this is human readable this has

00:18:31,350 --> 00:18:35,820
like high entropy if you will

00:18:33,510 --> 00:18:38,430
unique enough not to repeat too often

00:18:35,820 --> 00:18:42,750
and basically describes what operation

00:18:38,430 --> 00:18:45,930
took place and what values key value

00:18:42,750 --> 00:18:48,720
pairs basically were collected during

00:18:45,930 --> 00:18:50,820
this operation looks easy enough right

00:18:48,720 --> 00:18:53,400
so use this on step zero and say hey

00:18:50,820 --> 00:18:57,330
we're not we're not going anywhere far

00:18:53,400 --> 00:19:01,110
this is going to be easy our take on

00:18:57,330 --> 00:19:03,240
this so we use standard logged keys to

00:19:01,110 --> 00:19:05,250
match common objects so all of us have

00:19:03,240 --> 00:19:07,890
the user objects in our system all of us

00:19:05,250 --> 00:19:10,200
have the purchase object subscription

00:19:07,890 --> 00:19:11,940
object I don't know what it really draws

00:19:10,200 --> 00:19:14,340
a very coherent line across your

00:19:11,940 --> 00:19:16,140
microservices a user in one micro

00:19:14,340 --> 00:19:18,180
service and the user is another are

00:19:16,140 --> 00:19:20,850
usually the same thing it makes a lot of

00:19:18,180 --> 00:19:23,250
sense logging at specific checkpoints

00:19:20,850 --> 00:19:26,850
and on response a very slim micro

00:19:23,250 --> 00:19:28,290
service would only log on response to

00:19:26,850 --> 00:19:32,220
just indicate that it has completed

00:19:28,290 --> 00:19:34,110
handling a single request and this is

00:19:32,220 --> 00:19:36,090
all the metadata all the key value pairs

00:19:34,110 --> 00:19:38,160
that were collected throughout the

00:19:36,090 --> 00:19:40,590
handling of this request more complex

00:19:38,160 --> 00:19:42,660
monolithic microservices will introduce

00:19:40,590 --> 00:19:44,640
several checkpoints and say I want to do

00:19:42,660 --> 00:19:47,160
this here I want to tell about an event

00:19:44,640 --> 00:19:49,140
that is now happening here the logging

00:19:47,160 --> 00:19:51,990
level matches HTTP status codes our

00:19:49,140 --> 00:19:55,170
micro services are very HTTP oriented we

00:19:51,990 --> 00:19:57,480
always count the HTTP to hundreds 400

00:19:55,170 --> 00:20:00,150
and 500 and we correlate them to log

00:19:57,480 --> 00:20:00,809
levels so if I'm going to respond with

00:20:00,150 --> 00:20:03,200
the

00:20:00,809 --> 00:20:06,539
what you asked for here is the response

00:20:03,200 --> 00:20:08,460
HTTP status code will be 200 and the log

00:20:06,539 --> 00:20:10,950
level will be info if I'm encountering

00:20:08,460 --> 00:20:13,289
an error which I believe to be on my

00:20:10,950 --> 00:20:16,139
side because on the server side I failed

00:20:13,289 --> 00:20:18,360
to do something the HTTP status code

00:20:16,139 --> 00:20:20,580
will be 500 and the log level will be

00:20:18,360 --> 00:20:23,039
error okay and this is something that

00:20:20,580 --> 00:20:24,330
once observed clearly in logs becomes

00:20:23,039 --> 00:20:27,509
very very helpful

00:20:24,330 --> 00:20:29,700
I mentioned the reverse lookup so the

00:20:27,509 --> 00:20:31,919
ability to copy a line from from your

00:20:29,700 --> 00:20:34,289
logs and immediately understand the line

00:20:31,919 --> 00:20:38,159
of code that generated it is really

00:20:34,289 --> 00:20:40,110
really helpful and one last thing about

00:20:38,159 --> 00:20:42,539
error messages so sometimes your error

00:20:40,110 --> 00:20:45,360
object would have a message saying I

00:20:42,539 --> 00:20:46,950
just exploded at something like I made a

00:20:45,360 --> 00:20:49,379
request to an external service but it

00:20:46,950 --> 00:20:52,649
timed out and you would also want to

00:20:49,379 --> 00:20:55,769
indicate on the log what kind of user

00:20:52,649 --> 00:20:58,860
operation has failed because of this

00:20:55,769 --> 00:21:01,980
specific timeout so there are there is

00:20:58,860 --> 00:21:04,200
room for two to string messages in terms

00:21:01,980 --> 00:21:08,909
of errors do not do not make the mistake

00:21:04,200 --> 00:21:10,350
of combining them in a single one I'm

00:21:08,909 --> 00:21:12,769
going to speed up a bit because I really

00:21:10,350 --> 00:21:14,279
want to get to the technical part

00:21:12,769 --> 00:21:19,619
protecting your logs

00:21:14,279 --> 00:21:21,600
okay so GDP are stuff like that once

00:21:19,619 --> 00:21:24,059
your logs are structured it becomes much

00:21:21,600 --> 00:21:26,940
easier to sanitize them okay and we

00:21:24,059 --> 00:21:28,590
employ some basic sanitation inside our

00:21:26,940 --> 00:21:33,210
logging library which is a wrapper

00:21:28,590 --> 00:21:35,249
around Bunyon we are masking out what we

00:21:33,210 --> 00:21:37,499
believe to be authentication tokens

00:21:35,249 --> 00:21:39,720
because users grant us with

00:21:37,499 --> 00:21:42,960
authentication tokens to other services

00:21:39,720 --> 00:21:45,480
we need to connect to on their behalf as

00:21:42,960 --> 00:21:47,369
well as email addresses so emails are

00:21:45,480 --> 00:21:50,039
not really important but are really

00:21:47,369 --> 00:21:53,389
sensitive especially in your logs that's

00:21:50,039 --> 00:21:57,539
a good way to to avoid having them leak

00:21:53,389 --> 00:22:00,299
we did experience some major problems

00:21:57,539 --> 00:22:02,279
once we begin logging huge objects

00:22:00,299 --> 00:22:04,799
without realizing we're doing that okay

00:22:02,279 --> 00:22:07,049
so dumping an object into your log and

00:22:04,799 --> 00:22:10,639
only then realizing it was an RM object

00:22:07,049 --> 00:22:13,169
and with many related objects and some

00:22:10,639 --> 00:22:15,460
database connection string data which

00:22:13,169 --> 00:22:18,160
needed to be sent

00:22:15,460 --> 00:22:21,850
can really halt services with the amount

00:22:18,160 --> 00:22:25,180
of i/o used to just pump data to to STD

00:22:21,850 --> 00:22:28,810
out a proper logging library makes it

00:22:25,180 --> 00:22:31,120
very easy to trim long fields in one

00:22:28,810 --> 00:22:34,870
specific place and not go on a

00:22:31,120 --> 00:22:39,340
never-ending hunt of each each line that

00:22:34,870 --> 00:22:42,850
is being logged make logging easy okay

00:22:39,340 --> 00:22:44,440
so the steps up until now are more about

00:22:42,850 --> 00:22:46,030
the introduction of we don't do it

00:22:44,440 --> 00:22:49,120
properly but let's try it this way so

00:22:46,030 --> 00:22:51,700
four steps so far this is the step that

00:22:49,120 --> 00:22:55,300
becomes relevant a year into the making

00:22:51,700 --> 00:22:57,610
of this which makes it very very easy

00:22:55,300 --> 00:23:00,580
for new people to just use logging as a

00:22:57,610 --> 00:23:02,560
framework in your code one log per

00:23:00,580 --> 00:23:05,260
request is a is a great place to start

00:23:02,560 --> 00:23:07,270
it okay but you want to log everything

00:23:05,260 --> 00:23:09,280
okay and this is a change in in

00:23:07,270 --> 00:23:11,110
perception I think usually people would

00:23:09,280 --> 00:23:13,930
say I will just log an exception in my

00:23:11,110 --> 00:23:15,610
catch block or I don't know what but

00:23:13,930 --> 00:23:18,700
logging each and every request really

00:23:15,610 --> 00:23:20,620
allows a lot of visibility into what's

00:23:18,700 --> 00:23:23,050
what's really happening so if I'm

00:23:20,620 --> 00:23:25,240
logging just once per request what do I

00:23:23,050 --> 00:23:27,130
do along the handling of this request

00:23:25,240 --> 00:23:29,710
just collect the bread Brit the

00:23:27,130 --> 00:23:32,830
breadcrumbs okay carry with you this log

00:23:29,710 --> 00:23:34,810
context object that you add keys to it

00:23:32,830 --> 00:23:37,090
each time you encounter an important

00:23:34,810 --> 00:23:41,140
event in the processing of your request

00:23:37,090 --> 00:23:47,590
and then push it to STD out upon

00:23:41,140 --> 00:23:50,550
response please remember this like the

00:23:47,590 --> 00:23:55,630
link it's a very like standalone

00:23:50,550 --> 00:23:57,760
implementation of of how logging is used

00:23:55,630 --> 00:24:00,340
in our boilerplate code as an

00:23:57,760 --> 00:24:02,050
infrastructure and this is the second

00:24:00,340 --> 00:24:05,680
code slide which is actually an excerpt

00:24:02,050 --> 00:24:10,480
that the core of of that repository you

00:24:05,680 --> 00:24:12,670
can look at so again JavaScript Express

00:24:10,480 --> 00:24:14,380
this this time so if you don't know what

00:24:12,670 --> 00:24:17,170
a wait next is I'll get to it in a

00:24:14,380 --> 00:24:20,140
second we're beginning with declaring a

00:24:17,170 --> 00:24:21,940
logging function which we initialize to

00:24:20,140 --> 00:24:25,270
the info level because we expect things

00:24:21,940 --> 00:24:28,029
to go smoothly right we also can capture

00:24:25,270 --> 00:24:30,789
the timestamp of beginning the handling

00:24:28,029 --> 00:24:33,009
of the request this try and catch this

00:24:30,789 --> 00:24:35,440
try block is actually saying I'm just a

00:24:33,009 --> 00:24:37,359
middleware that is meant to do this and

00:24:35,440 --> 00:24:40,029
this and the actual handling of the

00:24:37,359 --> 00:24:43,059
request happens elsewhere so let's just

00:24:40,029 --> 00:24:46,149
handle the request okay a Python example

00:24:43,059 --> 00:24:47,559
would say do work okay so this is the

00:24:46,149 --> 00:24:51,099
area where the request actually gets

00:24:47,559 --> 00:24:52,359
handled all its breadcrumbs events are

00:24:51,099 --> 00:24:55,239
getting collected whatnot

00:24:52,359 --> 00:24:57,849
if an exception occurs during the handle

00:24:55,239 --> 00:25:00,399
handling of the event we internally in

00:24:57,849 --> 00:25:03,940
our systems have a standard where each

00:25:00,399 --> 00:25:05,919
error carries a code key which is

00:25:03,940 --> 00:25:08,830
basically the HTTP status code that

00:25:05,919 --> 00:25:10,839
needs to be returned for example basic

00:25:08,830 --> 00:25:12,729
input validation will detect that we

00:25:10,839 --> 00:25:14,649
were expecting a JSON payload but we got

00:25:12,729 --> 00:25:16,539
something which is unpossible so that

00:25:14,649 --> 00:25:18,190
will be 400 error right because the

00:25:16,539 --> 00:25:20,619
client sent us something we don't

00:25:18,190 --> 00:25:22,899
understand but if we tripped over a

00:25:20,619 --> 00:25:24,759
nullpointerexception or tried to access

00:25:22,899 --> 00:25:26,469
and define something then it would be

00:25:24,759 --> 00:25:29,889
our error and the response code would be

00:25:26,469 --> 00:25:32,349
500 the logging function now changes and

00:25:29,889 --> 00:25:36,639
it will be warning or error depending on

00:25:32,349 --> 00:25:38,950
the value of the return code since an

00:25:36,639 --> 00:25:41,499
error happened I wanted to capture it in

00:25:38,950 --> 00:25:43,419
my log context object it is pinned on

00:25:41,499 --> 00:25:46,330
the request which means it is fully

00:25:43,419 --> 00:25:48,999
usable by whatever handling actually

00:25:46,330 --> 00:25:53,979
took place but I'm carrying it with me

00:25:48,999 --> 00:25:56,259
now and finally either nothing bad

00:25:53,979 --> 00:25:59,289
happened or an exception happened I'm

00:25:56,259 --> 00:26:01,599
going to add the duration as yet another

00:25:59,289 --> 00:26:04,479
key because I know when I started and

00:26:01,599 --> 00:26:06,249
I'm about to send a response and I'm

00:26:04,479 --> 00:26:09,009
going to use whatever log function was

00:26:06,249 --> 00:26:11,019
decided on to log the context and saying

00:26:09,009 --> 00:26:13,629
I'm sending the reply a reply to a

00:26:11,019 --> 00:26:15,399
request what happened on this request I

00:26:13,629 --> 00:26:18,639
don't know let's look at the log at the

00:26:15,399 --> 00:26:20,799
log context object okay so this is a

00:26:18,639 --> 00:26:25,059
quick walk walk through of what took us

00:26:20,799 --> 00:26:26,979
a few good iterations to focus on it's

00:26:25,059 --> 00:26:31,089
not the only way to do logging but it's

00:26:26,979 --> 00:26:33,070
our way okay so the question is what do

00:26:31,089 --> 00:26:35,799
we do when during the handling of a

00:26:33,070 --> 00:26:37,929
request we lose track of the request

00:26:35,799 --> 00:26:40,570
object so we cannot populate the log

00:26:37,929 --> 00:26:41,500
context and we have something important

00:26:40,570 --> 00:26:44,860
to note

00:26:41,500 --> 00:26:47,260
it's a pain point it's the pain point is

00:26:44,860 --> 00:26:49,960
close to that of proper traceability

00:26:47,260 --> 00:26:51,760
when the same request gets handled by

00:26:49,960 --> 00:26:53,470
different microservices and you want to

00:26:51,760 --> 00:26:57,880
correlate them all to the same request

00:26:53,470 --> 00:27:00,400
ID or what not I don't have a good

00:26:57,880 --> 00:27:02,380
answer to this I will just say that you

00:27:00,400 --> 00:27:05,830
need to keep track of the law context

00:27:02,380 --> 00:27:08,230
object as deep as it makes sense you

00:27:05,830 --> 00:27:10,600
don't need to push it down your stack to

00:27:08,230 --> 00:27:13,630
each and every library and function but

00:27:10,600 --> 00:27:15,429
a lot of if you expect a library -

00:27:13,630 --> 00:27:18,070
sometimes succeed and sometimes fail

00:27:15,429 --> 00:27:21,190
then the point in time where you call

00:27:18,070 --> 00:27:23,020
out to this library needs to either have

00:27:21,190 --> 00:27:25,840
the slog context available so you can

00:27:23,020 --> 00:27:28,179
keep track of what happened or you can

00:27:25,840 --> 00:27:30,159
just throw an exception in an in in a

00:27:28,179 --> 00:27:34,360
case of failure and then this exception

00:27:30,159 --> 00:27:36,190
or error will be added here so this kind

00:27:34,360 --> 00:27:39,990
of solves 80% of the problem for us

00:27:36,190 --> 00:27:42,309
right now but it really is a problem

00:27:39,990 --> 00:27:45,640
okay we're getting close to the end I

00:27:42,309 --> 00:27:49,350
will just mention that one major

00:27:45,640 --> 00:27:51,789
drawback of this approach is scale okay

00:27:49,350 --> 00:27:54,460
logging a single line which can be quite

00:27:51,789 --> 00:27:57,190
long think about the size of this JSON

00:27:54,460 --> 00:27:58,960
object per request is going to be big

00:27:57,190 --> 00:28:03,610
okay and this is how we get to 15

00:27:58,960 --> 00:28:05,380
gigabytes per day today what we we are

00:28:03,610 --> 00:28:09,360
currently at this level we're employing

00:28:05,380 --> 00:28:12,309
skipping so when a very boring service

00:28:09,360 --> 00:28:14,950
has 99% success rate on its calls we

00:28:12,309 --> 00:28:19,270
simply don't log the HTTP 200 we only

00:28:14,950 --> 00:28:21,549
log the problems and that helps handle

00:28:19,270 --> 00:28:25,330
scale the next step which we're not at

00:28:21,549 --> 00:28:27,610
yet is to sample logs and generate a log

00:28:25,330 --> 00:28:32,740
for every X requests and it can be for

00:28:27,610 --> 00:28:36,059
every 100 HTTP 200 I'm going to log once

00:28:32,740 --> 00:28:39,669
for every 20 client errors for every 20

00:28:36,059 --> 00:28:42,100
HTTP 400 I'm going to log once and for

00:28:39,669 --> 00:28:45,400
every HTTP 500 I'm going to log once

00:28:42,100 --> 00:28:47,380
because I'm weighted towards towards my

00:28:45,400 --> 00:28:49,210
errors that's like a basic sampling

00:28:47,380 --> 00:28:50,680
approach that can really help deal with

00:28:49,210 --> 00:28:53,680
scale

00:28:50,680 --> 00:28:56,440
scale is not just a technical issue as

00:28:53,680 --> 00:28:59,920
was pointed out earlier today and

00:28:56,440 --> 00:29:01,720
keynote and it really requires constant

00:28:59,920 --> 00:29:04,180
oversight as your code base grows

00:29:01,720 --> 00:29:06,340
numerical services get created a good

00:29:04,180 --> 00:29:08,800
approach is to plant the right seeds

00:29:06,340 --> 00:29:13,150
with your boilerplate make sure that

00:29:08,800 --> 00:29:15,130
logging is easy to use but also focus on

00:29:13,150 --> 00:29:17,080
this in reviews suddenly logging becomes

00:29:15,130 --> 00:29:19,300
a very important functional thing for

00:29:17,080 --> 00:29:21,220
the team and it's not like I just logged

00:29:19,300 --> 00:29:22,780
it this way it's for me like why are you

00:29:21,220 --> 00:29:26,740
even commenting on this let's let's

00:29:22,780 --> 00:29:30,850
review the logic code is logic logging

00:29:26,740 --> 00:29:33,880
is logic customer success in cells

00:29:30,850 --> 00:29:36,070
engineering in our organization are very

00:29:33,880 --> 00:29:38,590
good users external users too are

00:29:36,070 --> 00:29:40,780
logging as it is a source of truth for

00:29:38,590 --> 00:29:43,120
the organization we have a lot of

00:29:40,780 --> 00:29:44,920
analytic solutions and all of that it

00:29:43,120 --> 00:29:47,380
has a lot of I don't want to say we

00:29:44,920 --> 00:29:50,080
don't need that but the fact we can talk

00:29:47,380 --> 00:29:52,300
about the same thing and say if it's if

00:29:50,080 --> 00:29:55,690
it happened it will be logged it's a

00:29:52,300 --> 00:29:58,060
very very strong strong assumption for

00:29:55,690 --> 00:30:00,820
for a mutual work outside of the

00:29:58,060 --> 00:30:04,000
engineering organization a quick summary

00:30:00,820 --> 00:30:06,190
of the stages do not forget this do not

00:30:04,000 --> 00:30:08,200
skip this if you're extremely motivated

00:30:06,190 --> 00:30:11,740
by what I said and tomorrow morning

00:30:08,200 --> 00:30:13,810
you're going to dump your sprint plan

00:30:11,740 --> 00:30:16,620
and introduce logging you're doing it

00:30:13,810 --> 00:30:20,020
wrong talk to your team first

00:30:16,620 --> 00:30:22,750
structuring your logs is the busiest

00:30:20,020 --> 00:30:26,410
part is the one that is most ongoing and

00:30:22,750 --> 00:30:28,300
requires constant constant upkeep but it

00:30:26,410 --> 00:30:29,740
is really really worth it eventually

00:30:28,300 --> 00:30:31,560
your team will operate in a different

00:30:29,740 --> 00:30:37,540
way

00:30:31,560 --> 00:30:40,630
ok I'm almost on time so now I would

00:30:37,540 --> 00:30:47,110
like to show you a few a few dashboards

00:30:40,630 --> 00:30:48,940
and ok so a really quick overview this

00:30:47,110 --> 00:30:51,100
is a view of things that are being

00:30:48,940 --> 00:30:53,020
logged I'm now querying for all the logs

00:30:51,100 --> 00:30:55,990
sent by a specific micro service in our

00:30:53,020 --> 00:30:57,010
stack production data ok so I'm not

00:30:55,990 --> 00:30:58,210
going to increase the funds because

00:30:57,010 --> 00:31:01,300
you're not supposed to see the numbers

00:30:58,210 --> 00:31:03,730
but I will say that here I'm seeing a

00:31:01,300 --> 00:31:08,040
line of log per requests being served

00:31:03,730 --> 00:31:12,250
and as you saw before prior I'm so about

00:31:08,040 --> 00:31:15,250
43,000 hits in the past 24 hours and I'm

00:31:12,250 --> 00:31:17,890
now going to see just the slow responses

00:31:15,250 --> 00:31:21,850
so whenever the duration is above 3

00:31:17,890 --> 00:31:27,640
seconds this view immediately shows me

00:31:21,850 --> 00:31:31,270
that out of the 43,000 requests served

00:31:27,640 --> 00:31:34,030
in the past 24 hours only 560 took over

00:31:31,270 --> 00:31:35,560
3 seconds and maybe this is important

00:31:34,030 --> 00:31:37,690
information and maybe it's meaningless

00:31:35,560 --> 00:31:39,940
today and it will be extremely important

00:31:37,690 --> 00:31:42,580
tomorrow we always go back in time and

00:31:39,940 --> 00:31:45,160
check for it some more graphical stuff

00:31:42,580 --> 00:31:47,880
logging this duration allows us to

00:31:45,160 --> 00:31:50,380
transcend to the to the area of

00:31:47,880 --> 00:31:53,230
percentiles and let go of the

00:31:50,380 --> 00:31:56,880
problematic averages so this would be a

00:31:53,230 --> 00:31:59,350
graph of the 99th 95th and median

00:31:56,880 --> 00:32:02,470
percentiles of how long did it take us

00:31:59,350 --> 00:32:06,670
to respond to requests on this service

00:32:02,470 --> 00:32:08,650
at any given slot in time if things are

00:32:06,670 --> 00:32:10,270
becoming slow you will see it event you

00:32:08,650 --> 00:32:12,730
will see it immediately remember my

00:32:10,270 --> 00:32:15,130
reference to scientifically making

00:32:12,730 --> 00:32:16,300
changes to your to your code so if

00:32:15,130 --> 00:32:18,370
you're working on a performance

00:32:16,300 --> 00:32:21,130
improvement and you don't have this

00:32:18,370 --> 00:32:23,140
graph to start with stop working on the

00:32:21,130 --> 00:32:25,030
improvement you would not know what

00:32:23,140 --> 00:32:26,220
impact it made you need to measure this

00:32:25,030 --> 00:32:29,400
upfront

00:32:26,220 --> 00:32:32,410
another quick view ok this time is

00:32:29,400 --> 00:32:35,710
counting the responses by the log level

00:32:32,410 --> 00:32:38,260
remember info is HTTP 200 warning is 400

00:32:35,710 --> 00:32:41,170
and the error is 500 so you will see

00:32:38,260 --> 00:32:44,140
that the majority are 200 and everyone's

00:32:41,170 --> 00:32:49,600
happy but here we had a spike of purple

00:32:44,140 --> 00:32:52,630
and these are 535 requests that got the

00:32:49,600 --> 00:32:54,970
response of 403 this time 403 okay an

00:32:52,630 --> 00:33:01,180
authentication issue so that can really

00:32:54,970 --> 00:33:03,700
help in troubleshooting this is a repo

00:33:01,180 --> 00:33:05,920
form of an analytics solution ok and

00:33:03,700 --> 00:33:08,680
allows us to see for example that node

00:33:05,920 --> 00:33:11,890
v8 is the most popular platform on which

00:33:08,680 --> 00:33:14,320
our CLI is currently running and Linux

00:33:11,890 --> 00:33:15,790
takes about a third but Windows 10 is on

00:33:14,320 --> 00:33:17,590
the rise ok so maybe we want to

00:33:15,790 --> 00:33:20,529
prioritize Windows testing

00:33:17,590 --> 00:33:22,779
for our new features last but not least

00:33:20,529 --> 00:33:24,399
I will jump straight to this one this is

00:33:22,779 --> 00:33:26,350
the number one dashboard we use it

00:33:24,399 --> 00:33:28,690
collects errors happening in our system

00:33:26,350 --> 00:33:30,399
errors happen all the time if errors are

00:33:28,690 --> 00:33:31,659
not happening for you it's only because

00:33:30,399 --> 00:33:36,070
you're not looking in the right places

00:33:31,659 --> 00:33:38,679
so last four hours we experienced 332

00:33:36,070 --> 00:33:41,950
errors in the system and they are broken

00:33:38,679 --> 00:33:44,610
down by which kubernetes pod or node

00:33:41,950 --> 00:33:47,380
they originated on allowing us to find

00:33:44,610 --> 00:33:49,990
problematic like physical platform

00:33:47,380 --> 00:33:53,110
problems as well as identify what's on

00:33:49,990 --> 00:33:56,139
the rise what's changing tracked success

00:33:53,110 --> 00:33:57,570
of our deployments that's me I hope this

00:33:56,139 --> 00:34:01,620
was helpful

00:33:57,570 --> 00:34:06,750
[Applause]

00:34:01,620 --> 00:34:06,750

YouTube URL: https://www.youtube.com/watch?v=6KReTdSjVTA


