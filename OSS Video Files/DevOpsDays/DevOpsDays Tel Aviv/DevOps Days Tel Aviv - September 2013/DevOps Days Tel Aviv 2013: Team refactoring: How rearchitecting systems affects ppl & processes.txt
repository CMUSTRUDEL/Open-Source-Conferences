Title: DevOps Days Tel Aviv 2013: Team refactoring: How rearchitecting systems affects ppl & processes
Publication date: 2013-10-24
Playlist: DevOps Days Tel Aviv - September 2013
Description: 
	Not so long ago Kenshoo had a very simple system. A server and a database. When they needed to scale the system to support more customers they simply created a new pair of servers. This was very easy to operate and manage in production. The release process was very simple in this "shared-nothing" architecture since there were hardly any dependencies. Test and deployment automation was easy as well. Over time, silos between Dev/QA/IT/Ops formed. Each with their own independent tools and methodologies.

But what happens when this architecture failed to meet the scale demands? The system needed to be broken into pieces, each with it's own domain of responsibilities. Suddenly there were tens of different services in production, each with its own dependencies, release cycle, technologies.

How do teams adjust? What dev / test / release / ops processes need to change? What about tools? Tal will cover these and more in this talk.

Speaker:

Tal Salmona, Kenshoo

Tal serves as a chief architect at Kenshoo and leads the plaforms group. Prior to that Tal led the Spring Insight project at VMware, worked at HP and founded a startup that dealt with social media analytics. He grows vegetables in his garden and enjoy riding his mountain bikes
Captions: 
	00:00:09,070 --> 00:00:17,510
so hi I'm tile from can show and as Ron

00:00:15,650 --> 00:00:22,460
said I'm going to do the two talks

00:00:17,510 --> 00:00:25,609
combined team refactoring in a bit

00:00:22,460 --> 00:00:33,440
selling a bit about can show its

00:00:25,609 --> 00:00:36,140
sponsors so Tim refactoring is about how

00:00:33,440 --> 00:00:38,350
the changes that we've been making to

00:00:36,140 --> 00:00:43,399
the country architecture over the past

00:00:38,350 --> 00:00:47,449
year year and a half has affected the

00:00:43,399 --> 00:00:52,640
people and the team the people and the

00:00:47,449 --> 00:00:58,179
team and the processes that that we used

00:00:52,640 --> 00:00:58,179
and that also changed during this time

00:00:58,600 --> 00:01:10,909
so you all know these guys and this is

00:01:04,670 --> 00:01:13,130
how Hollywood refactor the 18 but in our

00:01:10,909 --> 00:01:16,640
case of course we didn't change the

00:01:13,130 --> 00:01:20,979
people it was more about how we take the

00:01:16,640 --> 00:01:27,680
existing team and and make the changes

00:01:20,979 --> 00:01:31,689
with the existing people so now back to

00:01:27,680 --> 00:01:36,770
the five minutes sponsors talk so

00:01:31,689 --> 00:01:40,070
Kenshoo provides a platform for online

00:01:36,770 --> 00:01:45,020
marketers mainly in search engines in

00:01:40,070 --> 00:01:47,780
and social media to manage their online

00:01:45,020 --> 00:01:52,810
campaigns and to optimize their online

00:01:47,780 --> 00:01:52,810
campaigns and to give you one minute

00:01:53,740 --> 00:02:01,450
explanation of online marketing works

00:01:57,070 --> 00:02:06,109
usually there is some real estate that

00:02:01,450 --> 00:02:08,300
the website sells to to to marketers to

00:02:06,109 --> 00:02:10,250
advertise usually you know this from

00:02:08,300 --> 00:02:15,090
google when if you don't have an ad

00:02:10,250 --> 00:02:17,599
blocker you will see the ad

00:02:15,090 --> 00:02:23,910
on the right hand side and on top and

00:02:17,599 --> 00:02:26,190
the way that works is that when an

00:02:23,910 --> 00:02:28,140
advertiser want to advertise something

00:02:26,190 --> 00:02:29,640
thats related to their business for

00:02:28,140 --> 00:02:33,569
instance insurance company they would

00:02:29,640 --> 00:02:36,480
buy or bid on a keyboard and then there

00:02:33,569 --> 00:02:38,879
is an auction and more or less there are

00:02:36,480 --> 00:02:41,099
other factors in play but more or less

00:02:38,879 --> 00:02:44,280
if you pay more you have a better chance

00:02:41,099 --> 00:02:49,230
of appearing in a good spot on the

00:02:44,280 --> 00:02:52,910
search results so what people use can

00:02:49,230 --> 00:02:56,790
show for they they use our service to

00:02:52,910 --> 00:03:00,569
manage and create their campaigns the

00:02:56,790 --> 00:03:03,110
ads the decide which keywords they want

00:03:00,569 --> 00:03:08,670
to be done on how much and what budget

00:03:03,110 --> 00:03:10,590
do you want to spend and we sink this

00:03:08,670 --> 00:03:12,150
into the search engines and then we

00:03:10,590 --> 00:03:15,299
start tracking the performance of the

00:03:12,150 --> 00:03:19,200
campaign which are how many clicks so

00:03:15,299 --> 00:03:24,329
many conversions what what's the revenue

00:03:19,200 --> 00:03:27,120
driven by the advertising and then there

00:03:24,329 --> 00:03:29,730
is an algorithm a bunch of algorithms

00:03:27,120 --> 00:03:32,849
that use this information to make

00:03:29,730 --> 00:03:34,349
decision about the future bits so we

00:03:32,849 --> 00:03:41,760
automatically change the bids and

00:03:34,349 --> 00:03:47,340
optimize their campaign we have quite

00:03:41,760 --> 00:03:50,010
large advertisers that manage tens and

00:03:47,340 --> 00:03:53,010
hundreds of millions of keywords and ads

00:03:50,010 --> 00:03:59,400
through our system aggregate of about

00:03:53,010 --> 00:04:03,359
four billion ads and keywords so it's

00:03:59,400 --> 00:04:07,169
it's a complex system especially

00:04:03,359 --> 00:04:11,310
tracking all this all the performance of

00:04:07,169 --> 00:04:14,110
all these ads we're located here in

00:04:11,310 --> 00:04:17,200
Israel in Tel Aviv

00:04:14,110 --> 00:04:19,950
that are indeed the college group that

00:04:17,200 --> 00:04:26,020
I'll be talking about in a minute

00:04:19,950 --> 00:04:32,770
consists of about 120 developers that's

00:04:26,020 --> 00:04:37,470
it that's can show so back to the to the

00:04:32,770 --> 00:04:45,040
change that we've been doing in the past

00:04:37,470 --> 00:04:48,040
year year and a half so can show as I

00:04:45,040 --> 00:04:50,590
guess there's a lot of companies that

00:04:48,040 --> 00:04:55,870
just started started with a very simple

00:04:50,590 --> 00:04:58,780
architecture where there was a tomcat

00:04:55,870 --> 00:05:03,220
server running the application using my

00:04:58,780 --> 00:05:08,190
sequel as database and all the different

00:05:03,220 --> 00:05:11,770
workloads were using the same this same

00:05:08,190 --> 00:05:15,640
architecture so you I and bad processes

00:05:11,770 --> 00:05:19,750
and algorithms using the same setup and

00:05:15,640 --> 00:05:23,919
as the company grew and we own boarded

00:05:19,750 --> 00:05:26,700
more and more customers the scaling of

00:05:23,919 --> 00:05:32,979
the system was by adding more of these

00:05:26,700 --> 00:05:37,030
servers which worked out pretty well up

00:05:32,979 --> 00:05:40,840
until a point where workloads became so

00:05:37,030 --> 00:05:46,050
big that they can't fit in in this into

00:05:40,840 --> 00:05:49,419
this setup you I probably works well but

00:05:46,050 --> 00:05:51,970
batch processes and algorithms and stuff

00:05:49,419 --> 00:05:55,780
like this can't can no longer be scaled

00:05:51,970 --> 00:05:59,310
inside the in this way so we need to

00:05:55,780 --> 00:06:02,110
start breaking down the system into

00:05:59,310 --> 00:06:06,750
different services and components and

00:06:02,110 --> 00:06:08,890
allow them to be scaled independently

00:06:06,750 --> 00:06:13,930
another thing when we use this

00:06:08,890 --> 00:06:15,479
opportunity to also reduce some of the

00:06:13,930 --> 00:06:20,820
friction between the different

00:06:15,479 --> 00:06:23,410
development teams and groups because you

00:06:20,820 --> 00:06:26,860
for those who work with a single source

00:06:23,410 --> 00:06:30,610
base source base know that

00:06:26,860 --> 00:06:33,310
sometimes it becomes hard to have 120

00:06:30,610 --> 00:06:35,590
people committing into the same source

00:06:33,310 --> 00:06:44,020
base and we decided that we want to

00:06:35,590 --> 00:06:47,259
split this into different services of

00:06:44,020 --> 00:06:52,389
course this introduces complexity it

00:06:47,259 --> 00:06:58,030
introduces complexity in and a few few

00:06:52,389 --> 00:07:01,090
layers first and most basic one is for

00:06:58,030 --> 00:07:05,639
developers now they have to sometimes

00:07:01,090 --> 00:07:10,060
you would need to write to a few

00:07:05,639 --> 00:07:12,759
different services you would need to use

00:07:10,060 --> 00:07:16,449
a few source code repositories in

00:07:12,759 --> 00:07:17,979
parallel and you need to understand the

00:07:16,449 --> 00:07:21,219
service dependency you need to

00:07:17,979 --> 00:07:24,819
understand the service dependency in in

00:07:21,219 --> 00:07:29,319
compile time and in runtime and it's not

00:07:24,819 --> 00:07:34,270
always easy another thing with the

00:07:29,319 --> 00:07:38,949
monolithic system that we had before it

00:07:34,270 --> 00:07:40,900
was very it was sort of a common

00:07:38,949 --> 00:07:44,949
knowledge for IT and operation how the

00:07:40,900 --> 00:07:47,560
system is built so a lot of the IT

00:07:44,949 --> 00:07:52,150
infrastructure and the tools that were

00:07:47,560 --> 00:07:56,439
built around this system had deep

00:07:52,150 --> 00:08:00,550
understanding of the of the architecture

00:07:56,439 --> 00:08:05,860
and of the system and tools sort of

00:08:00,550 --> 00:08:09,310
hacked into the into the application to

00:08:05,860 --> 00:08:12,550
extract data they needed and made all

00:08:09,310 --> 00:08:16,439
sorts of assumptions and of course the

00:08:12,550 --> 00:08:22,210
IT infrastructure also was built to this

00:08:16,439 --> 00:08:26,050
monolithic deployment so now when we

00:08:22,210 --> 00:08:30,330
have all these new services we need to

00:08:26,050 --> 00:08:30,330
find a way to abstract that way from

00:08:30,449 --> 00:08:38,260
from the IT and the operations they need

00:08:35,649 --> 00:08:39,779
it's something that's predictable and

00:08:38,260 --> 00:08:43,740
that they won't have to

00:08:39,779 --> 00:08:49,170
to start hacking into to be able to

00:08:43,740 --> 00:08:54,899
manage it's sort of like the process wed

00:08:49,170 --> 00:08:57,420
before was very similar to build build

00:08:54,899 --> 00:08:59,370
the application burn it on the cd-rom

00:08:57,420 --> 00:09:02,370
ship it over to the other side of the

00:08:59,370 --> 00:09:07,259
floor and if someone else install it

00:09:02,370 --> 00:09:09,629
operated monitor it and that's that can

00:09:07,259 --> 00:09:17,550
be the case with with the with this new

00:09:09,629 --> 00:09:19,769
architecture so the first thing that we

00:09:17,550 --> 00:09:21,269
found is really we started being all

00:09:19,769 --> 00:09:25,529
these tools and then we found it really

00:09:21,269 --> 00:09:28,829
it's not it's not about the tools we

00:09:25,529 --> 00:09:35,779
like building the tools the work great

00:09:28,829 --> 00:09:39,899
but the thing was how do we educate

00:09:35,779 --> 00:09:45,809
developers out we educate operations and

00:09:39,899 --> 00:09:47,639
IT to deal with with the implications of

00:09:45,809 --> 00:09:56,839
having all these different services in

00:09:47,639 --> 00:09:59,819
production so the first thing we we

00:09:56,839 --> 00:10:03,600
tackled is the delivery how do we

00:09:59,819 --> 00:10:08,009
deliver a service in a way that's easy

00:10:03,600 --> 00:10:12,809
for someone else to to take it on and

00:10:08,009 --> 00:10:18,300
and manage it in production and to do

00:10:12,809 --> 00:10:21,029
that apart from all the tools we need to

00:10:18,300 --> 00:10:23,670
change the way that people think and to

00:10:21,029 --> 00:10:27,660
educate people to think in a different

00:10:23,670 --> 00:10:32,389
way and here are a few examples of

00:10:27,660 --> 00:10:36,990
things that you may have you may hear a

00:10:32,389 --> 00:10:42,149
developer think that in operations or IT

00:10:36,990 --> 00:10:47,959
person can do in production so you can't

00:10:42,149 --> 00:10:51,389
expect someone to restart a service

00:10:47,959 --> 00:10:51,930
because you are upgrading your service

00:10:51,389 --> 00:10:55,070
right

00:10:51,930 --> 00:10:57,620
you have to your services has to be

00:10:55,070 --> 00:11:00,120
backward and forward compatible and

00:10:57,620 --> 00:11:02,940
there isn't really such a thing as

00:11:00,120 --> 00:11:05,580
restarting a service if especially if

00:11:02,940 --> 00:11:07,770
there's many instances you can't it's

00:11:05,580 --> 00:11:12,630
not like a transaction you can do it in

00:11:07,770 --> 00:11:14,700
one go so this is something that the

00:11:12,630 --> 00:11:20,190
service needs to be to be built in a way

00:11:14,700 --> 00:11:24,770
that it can operate when its

00:11:20,190 --> 00:11:29,310
dependencies are upgraded or changed

00:11:24,770 --> 00:11:32,850
another thing is a wiki's or manual

00:11:29,310 --> 00:11:34,830
steps to install stuff so I guess you

00:11:32,850 --> 00:11:38,040
know maybe with the old monolithic

00:11:34,830 --> 00:11:40,920
service maybe it one time it was like

00:11:38,040 --> 00:11:44,910
this but then since it's only was only

00:11:40,920 --> 00:11:47,520
one service someone in IT could write a

00:11:44,910 --> 00:11:52,050
script around it and automate the this

00:11:47,520 --> 00:11:56,839
wiki and of course now this is to be

00:11:52,050 --> 00:12:00,779
part of the delivery the it's it's the

00:11:56,839 --> 00:12:05,940
developers responsibility to create this

00:12:00,779 --> 00:12:09,120
one click install for the service so in

00:12:05,940 --> 00:12:12,920
our case the the the service owner the

00:12:09,120 --> 00:12:17,820
developers also need to write the puppet

00:12:12,920 --> 00:12:22,529
code that would install the service in

00:12:17,820 --> 00:12:25,380
production and this is of course the

00:12:22,529 --> 00:12:27,300
skill set that people need to pick up

00:12:25,380 --> 00:12:35,450
and to learn to understand how to use

00:12:27,300 --> 00:12:35,450
these tools so another thing is a

00:12:35,660 --> 00:12:42,480
dependencies at runtime sort of like the

00:12:39,450 --> 00:12:48,209
first point but in this case things can

00:12:42,480 --> 00:12:50,940
break cues can get deleted because for

00:12:48,209 --> 00:12:55,070
instance this is a really example from a

00:12:50,940 --> 00:12:58,350
few days ago upgrading rabid EMU cluster

00:12:55,070 --> 00:13:03,620
cues get deleted services need to be

00:12:58,350 --> 00:13:07,500
able to recreate the environment

00:13:03,620 --> 00:13:11,580
services need to be able to run the

00:13:07,500 --> 00:13:13,950
liquid based scripts to to create the

00:13:11,580 --> 00:13:17,520
databases that they need or the schema

00:13:13,950 --> 00:13:20,400
that they need and this is something

00:13:17,520 --> 00:13:23,910
that before was sometimes there's a

00:13:20,400 --> 00:13:27,290
responsibility of someone else so this

00:13:23,910 --> 00:13:31,070
is something that the skills that

00:13:27,290 --> 00:13:37,070
developers need to develop that before

00:13:31,070 --> 00:13:37,070
we're not Eden one last thing is

00:13:37,160 --> 00:13:46,680
monitoring who's who's responsible for

00:13:41,370 --> 00:13:50,550
creating the metrics for monitoring the

00:13:46,680 --> 00:13:56,570
system for understanding if the system

00:13:50,550 --> 00:14:00,630
is running as it should so when you have

00:13:56,570 --> 00:14:06,180
one service IT and operations over time

00:14:00,630 --> 00:14:08,250
can learn and understand what is the

00:14:06,180 --> 00:14:11,070
expected behavior of the system but when

00:14:08,250 --> 00:14:17,340
you have many services that's that's

00:14:11,070 --> 00:14:21,600
very hard to do the ability for sharing

00:14:17,340 --> 00:14:24,030
the knowledge of what's an expected

00:14:21,600 --> 00:14:27,720
behavior and what is the cause what is

00:14:24,030 --> 00:14:30,090
the root cause for four problems is very

00:14:27,720 --> 00:14:34,380
hard and it has to be the responsibility

00:14:30,090 --> 00:14:43,820
of the of the developers of the service

00:14:34,380 --> 00:14:51,890
owners I think for IT these changes even

00:14:43,820 --> 00:14:59,640
more profound because things like

00:14:51,890 --> 00:15:04,620
changing the network infrastructure or

00:14:59,640 --> 00:15:07,500
changing the storage arrays or all these

00:15:04,620 --> 00:15:11,190
things that as developers we don't

00:15:07,500 --> 00:15:14,820
really care about much right we we don't

00:15:11,190 --> 00:15:16,529
really have this as part of our

00:15:14,820 --> 00:15:23,060
considerations when designing

00:15:16,529 --> 00:15:26,029
service maybe we want to know about the

00:15:23,060 --> 00:15:28,470
capacity of the storage or the

00:15:26,029 --> 00:15:32,180
throughput that I'm expected to get in

00:15:28,470 --> 00:15:37,709
production but we don't really care

00:15:32,180 --> 00:15:43,519
about the underlying infrastructure it

00:15:37,709 --> 00:15:47,730
just works right but for for data

00:15:43,519 --> 00:15:52,350
infrastructure that's not no no no

00:15:47,730 --> 00:15:57,180
longer the case right it's hard so when

00:15:52,350 --> 00:15:59,999
I t changes or upgrades my sequel or

00:15:57,180 --> 00:16:09,110
upgrades Cassandra it needs to be done

00:15:59,999 --> 00:16:11,610
in in with developers and with rd

00:16:09,110 --> 00:16:13,769
because otherwise things just won't work

00:16:11,610 --> 00:16:19,079
we need to figure out how to test these

00:16:13,769 --> 00:16:21,000
things and so we are trying to test this

00:16:19,079 --> 00:16:26,430
as much as possible i think a lot of

00:16:21,000 --> 00:16:30,660
these are still sort of vague for us we

00:16:26,430 --> 00:16:32,879
are testing upgrades of the data

00:16:30,660 --> 00:16:37,970
infrastructure but we haven't found a

00:16:32,879 --> 00:16:44,129
good way to test upgrades to hardware

00:16:37,970 --> 00:16:50,699
infrastructures yet anyway in a way i

00:16:44,129 --> 00:16:54,029
think also for IT in operations they

00:16:50,699 --> 00:16:56,160
need to become much more of developers

00:16:54,029 --> 00:17:01,379
than the nightie it's not enough to be a

00:16:56,160 --> 00:17:03,629
sis a Linux is admin anymore you can't

00:17:01,379 --> 00:17:06,120
have all these shell scripts lying

00:17:03,629 --> 00:17:13,140
around in some shared folder and expect

00:17:06,120 --> 00:17:17,039
that this will work with a diverse

00:17:13,140 --> 00:17:22,370
system so what we try to do is to have

00:17:17,039 --> 00:17:29,209
all the everything in in source control

00:17:22,370 --> 00:17:29,209
and I'll talk about this in a bit more

00:17:29,260 --> 00:17:42,380
and also the tools right I think they

00:17:35,060 --> 00:17:45,730
are the more higher-level languages now

00:17:42,380 --> 00:17:51,020
that they can be used in production for

00:17:45,730 --> 00:17:57,050
the cold IT stuff that are not shell

00:17:51,020 --> 00:18:02,960
scripts and that allows writing tests

00:17:57,050 --> 00:18:05,840
for things that that right up until now

00:18:02,960 --> 00:18:07,850
we're not tested I think just run the

00:18:05,840 --> 00:18:12,410
shell scripting production either it

00:18:07,850 --> 00:18:15,040
works or it doesn't if you use a Ruby or

00:18:12,410 --> 00:18:18,410
Python to do the same tasks you can

00:18:15,040 --> 00:18:21,650
actually test a lot of these things and

00:18:18,410 --> 00:18:27,160
this is a skill set that we need to find

00:18:21,650 --> 00:18:34,420
a way to improve for our Tea for our

00:18:27,160 --> 00:18:39,590
operations another thing is a

00:18:34,420 --> 00:18:42,010
responsibility and and especially I

00:18:39,590 --> 00:18:46,010
think there's a big shift in

00:18:42,010 --> 00:18:48,800
responsibility and the first question is

00:18:46,010 --> 00:18:52,420
how do you define the boundaries and

00:18:48,800 --> 00:19:00,380
where where the boundaries go between

00:18:52,420 --> 00:19:04,420
developers and an IT so again if I go

00:19:00,380 --> 00:19:13,330
back to the networking and storage

00:19:04,420 --> 00:19:18,050
infrastructures and cpu the I think the

00:19:13,330 --> 00:19:21,520
it's the boundaries are very clear it's

00:19:18,050 --> 00:19:26,060
very clear that I t are responsible for

00:19:21,520 --> 00:19:28,090
for operating these systems and again as

00:19:26,060 --> 00:19:32,450
developers we don't really worry about

00:19:28,090 --> 00:19:38,390
how it works we just care that it works

00:19:32,450 --> 00:19:40,650
and 44 databases for relational database

00:19:38,390 --> 00:19:43,860
especially

00:19:40,650 --> 00:19:49,800
I think their maturity is in a state

00:19:43,860 --> 00:19:57,210
that we have dba's we have this role

00:19:49,800 --> 00:19:59,550
probably in every company and it's it's

00:19:57,210 --> 00:20:03,870
the responsibility of what a DBA needs

00:19:59,550 --> 00:20:08,610
to do is is clear but when we go to the

00:20:03,870 --> 00:20:12,450
newer data storage the data services

00:20:08,610 --> 00:20:17,070
like a sandra and RabbitMQ for messaging

00:20:12,450 --> 00:20:20,640
and a dupe I don't think we've come up

00:20:17,070 --> 00:20:23,370
with a good clear line of who's

00:20:20,640 --> 00:20:26,700
responsible for what like we don't have

00:20:23,370 --> 00:20:31,830
a DBA for our Cassandra it's a joint

00:20:26,700 --> 00:20:34,650
venture by IT and didn't dev to operate

00:20:31,830 --> 00:20:37,920
these systems and I think it's really a

00:20:34,650 --> 00:20:41,250
matter of maturity it's not like there

00:20:37,920 --> 00:20:44,520
aren't services in the cloud that gives

00:20:41,250 --> 00:20:48,420
you a sunrise service DynamoDB or

00:20:44,520 --> 00:20:50,640
whatever but it's only a matter of

00:20:48,420 --> 00:20:54,590
maturity and I hope that at some point

00:20:50,640 --> 00:20:58,860
when we have better tooling and better

00:20:54,590 --> 00:21:04,530
understanding of these systems will get

00:20:58,860 --> 00:21:08,580
to the same level of clear border

00:21:04,530 --> 00:21:12,060
between developers and IT and who's

00:21:08,580 --> 00:21:15,030
responsible for what but until then this

00:21:12,060 --> 00:21:23,130
is something that will remain shared

00:21:15,030 --> 00:21:28,080
responsibility also the role of QA is

00:21:23,130 --> 00:21:30,570
changing and if you look at the at the

00:21:28,080 --> 00:21:33,840
Kanban boards the classic Kanban boards

00:21:30,570 --> 00:21:39,870
there is all the the design and the dev

00:21:33,840 --> 00:21:45,450
and QA and production stages it's sort

00:21:39,870 --> 00:21:51,060
of states that the QA is some sort of a

00:21:45,450 --> 00:21:54,210
gatekeeper before production and here to

00:21:51,060 --> 00:21:59,670
that that can longer be the case

00:21:54,210 --> 00:22:03,390
because it's almost impossible for for

00:21:59,670 --> 00:22:06,960
someone to to be able to test the

00:22:03,390 --> 00:22:10,680
dependencies between services there can

00:22:06,960 --> 00:22:13,230
be so many dependencies that it's hardly

00:22:10,680 --> 00:22:17,790
possible and you'll have to stop the

00:22:13,230 --> 00:22:21,230
world to be able to to have QA say yeah

00:22:17,790 --> 00:22:23,880
this can go to production and of course

00:22:21,230 --> 00:22:27,840
even with all the automation it's very

00:22:23,880 --> 00:22:32,310
hard to simulate production like

00:22:27,840 --> 00:22:35,820
environment in in QA labs and to be able

00:22:32,310 --> 00:22:38,730
to really test all the the upgrade pass

00:22:35,820 --> 00:22:45,030
the possible upgrade pass so it means

00:22:38,730 --> 00:22:47,700
that QA can still help developers assure

00:22:45,030 --> 00:22:50,310
the quality of the service but as a

00:22:47,700 --> 00:22:55,830
standalone server sent and can hardly

00:22:50,310 --> 00:22:58,610
ever test the dependencies and we

00:22:55,830 --> 00:23:02,580
actually finding it hard to also test it

00:22:58,610 --> 00:23:04,290
automatically how do you test the how do

00:23:02,580 --> 00:23:06,060
you automatically test all the

00:23:04,290 --> 00:23:10,260
dependencies and all the upgrade paths

00:23:06,060 --> 00:23:13,620
possible for all these services so a lot

00:23:10,260 --> 00:23:16,100
of these tests are done in production if

00:23:13,620 --> 00:23:19,440
you can roll back then then that's okay

00:23:16,100 --> 00:23:22,110
but it also means that again the

00:23:19,440 --> 00:23:25,470
responsibility of the service owner is

00:23:22,110 --> 00:23:32,280
to be there when there is a deployment

00:23:25,470 --> 00:23:35,370
and to be able to resolve issues last

00:23:32,280 --> 00:23:39,480
thing that I think will lead to change

00:23:35,370 --> 00:23:41,670
we really haven't done this yet but in

00:23:39,480 --> 00:23:49,680
some way I T needs to be part of feature

00:23:41,670 --> 00:23:54,360
team same way that we have QA in in

00:23:49,680 --> 00:23:57,900
future teams some features that need a

00:23:54,360 --> 00:24:02,310
great deal of change in production to be

00:23:57,900 --> 00:24:07,260
able to support a new workload need I

00:24:02,310 --> 00:24:07,680
teen put Dana deity in InDesign of this

00:24:07,260 --> 00:24:13,830
new

00:24:07,680 --> 00:24:17,780
future is anyone here as I teen in

00:24:13,830 --> 00:24:17,780
feature teams in the design processes

00:24:21,260 --> 00:24:33,050
and last thing is I try to summarize in

00:24:25,710 --> 00:24:33,050
retrospect what what works for us and

00:24:34,760 --> 00:24:41,040
first is a service interface and when I

00:24:39,030 --> 00:24:44,460
talk about service interface it's not

00:24:41,040 --> 00:24:49,070
about the API is the service exposes

00:24:44,460 --> 00:24:52,410
it's more about how our service is

00:24:49,070 --> 00:24:55,950
delivered to production with all the

00:24:52,410 --> 00:25:00,110
tooling around it for operations to be

00:24:55,950 --> 00:25:04,020
able to run it without having to learn

00:25:00,110 --> 00:25:07,680
and use new thing every time we develop

00:25:04,020 --> 00:25:10,350
a new service and it basically means

00:25:07,680 --> 00:25:13,530
that service needs to be packaged in a

00:25:10,350 --> 00:25:17,880
certain way it needs to have its a

00:25:13,530 --> 00:25:20,970
puppet automation and it needs to be to

00:25:17,880 --> 00:25:25,590
have a single install it needs to be

00:25:20,970 --> 00:25:27,510
extremely to expose certain metrics some

00:25:25,590 --> 00:25:30,000
are standard somewhere maybe specific to

00:25:27,510 --> 00:25:32,910
the service it needs to have clear

00:25:30,000 --> 00:25:34,680
definitions of what's what sort of

00:25:32,910 --> 00:25:41,490
alerts we want to get on the service

00:25:34,680 --> 00:25:47,340
when when metrics change and this really

00:25:41,490 --> 00:25:49,530
allows the confidence of IT and

00:25:47,340 --> 00:25:52,850
operations that when they get a new

00:25:49,530 --> 00:25:55,440
service they'll be able to operate it

00:25:52,850 --> 00:25:59,400
it's not new if I tell them hey it's

00:25:55,440 --> 00:26:02,850
just like the thing I we deployed last

00:25:59,400 --> 00:26:05,730
week just a new service but it's just to

00:26:02,850 --> 00:26:12,000
see for you then it's easier for him for

00:26:05,730 --> 00:26:14,100
them to digest it another thing is we

00:26:12,000 --> 00:26:17,120
try to similar production as much as

00:26:14,100 --> 00:26:20,510
possible and as early as possible so we

00:26:17,120 --> 00:26:25,170
can have developers run

00:26:20,510 --> 00:26:29,130
puppet inside vagrant on their under

00:26:25,170 --> 00:26:32,010
developer machines to set up service

00:26:29,130 --> 00:26:34,950
that they need to work on to develop

00:26:32,010 --> 00:26:38,700
their puppet code as if it's going to be

00:26:34,950 --> 00:26:41,220
running on production and if they are

00:26:38,700 --> 00:26:45,030
dependent on another service it's easy

00:26:41,220 --> 00:26:50,250
for them to set up that service locally

00:26:45,030 --> 00:26:53,550
and test against it another thing is of

00:26:50,250 --> 00:26:58,950
course in QA labs the ability to run and

00:26:53,550 --> 00:27:03,600
to easily set up new services services

00:26:58,950 --> 00:27:08,480
of any version for any kind quite easily

00:27:03,600 --> 00:27:13,350
without having to do any manual work so

00:27:08,480 --> 00:27:16,350
and the last thing is we have a pretty

00:27:13,350 --> 00:27:20,040
good staging environment where we can

00:27:16,350 --> 00:27:22,350
test things that are more hard hardware

00:27:20,040 --> 00:27:25,650
related that we can test it in any place

00:27:22,350 --> 00:27:30,470
else so if we need to run some benchmark

00:27:25,650 --> 00:27:33,000
and see how a change in storage

00:27:30,470 --> 00:27:35,130
technology affects a system this is

00:27:33,000 --> 00:27:38,400
pretty much the only place where we can

00:27:35,130 --> 00:27:42,110
test it again it's limited there's no

00:27:38,400 --> 00:27:49,580
way to simulate the entire production

00:27:42,110 --> 00:27:49,580
environment putting everything in get so

00:27:49,970 --> 00:27:58,130
course code is in in source control but

00:27:52,710 --> 00:27:58,130
what about all the puppet and

00:27:58,340 --> 00:28:05,730
configurations and system configuration

00:28:00,900 --> 00:28:10,290
and all the DBA scripts and all these

00:28:05,730 --> 00:28:14,660
tools so we make sure it's all in in

00:28:10,290 --> 00:28:18,330
source control that allows first for us

00:28:14,660 --> 00:28:19,920
for other people to just see what's

00:28:18,330 --> 00:28:25,350
going on and what what are the changes

00:28:19,920 --> 00:28:28,930
that are and what tools are used by by

00:28:25,350 --> 00:28:32,590
in production by operations nit

00:28:28,930 --> 00:28:39,190
and another thing we do is for instance

00:28:32,590 --> 00:28:41,230
when we change some configurations we

00:28:39,190 --> 00:28:45,100
use puppet there is higher that's where

00:28:41,230 --> 00:28:47,110
the the environment definitions are

00:28:45,100 --> 00:28:50,800
stored there's also in source control

00:28:47,110 --> 00:28:54,160
and that allows IT and operations

00:28:50,800 --> 00:28:56,380
through to code review the changes and

00:28:54,160 --> 00:28:58,090
make sure that the changes are

00:28:56,380 --> 00:29:07,120
compatible with with what we have in

00:28:58,090 --> 00:29:13,800
production talk we try to talk we have a

00:29:07,120 --> 00:29:17,260
few meetings where service owners and IT

00:29:13,800 --> 00:29:20,020
meet up and discuss water the changes

00:29:17,260 --> 00:29:26,040
are going to be introduced to production

00:29:20,020 --> 00:29:31,210
in the coming week or two both

00:29:26,040 --> 00:29:36,250
application change and IT infrastructure

00:29:31,210 --> 00:29:42,880
work that way we're in sync and now we

00:29:36,250 --> 00:29:46,510
try to minimize surprises one last thing

00:29:42,880 --> 00:29:51,000
that's you're happy that this is the way

00:29:46,510 --> 00:29:55,480
the organization is built but we have

00:29:51,000 --> 00:30:02,380
all the technology group in one under

00:29:55,480 --> 00:30:06,490
one person so develop the development

00:30:02,380 --> 00:30:10,690
teams and groups our leaders our peers

00:30:06,490 --> 00:30:12,730
of the IT and operations and you know if

00:30:10,690 --> 00:30:15,970
from some reason we can't reach an

00:30:12,730 --> 00:30:20,500
agreement on something it's that there

00:30:15,970 --> 00:30:24,460
is someone who can always make us

00:30:20,500 --> 00:30:27,970
understand where we wrong and and and we

00:30:24,460 --> 00:30:31,810
can make a decision that that's best for

00:30:27,970 --> 00:30:37,470
for both this is something that's been

00:30:31,810 --> 00:30:40,650
very helpful I know that and that's it

00:30:37,470 --> 00:30:40,650

YouTube URL: https://www.youtube.com/watch?v=JSUr_4wQEx8


