Title: DevOps Days Tel Aviv 2013: Real world strategies in continuous delivery - Aviran Mordo
Publication date: 2013-10-24
Playlist: DevOps Days Tel Aviv - September 2013
Description: 
	Continuous delivery entails many concerns that you need to take care of; from changing the company culture to development methodologies. You have to follow Test Driven Development, perform A/B tests on every new feature you deploy to production; The product managers' is feature centric with feature toggles to turn features on and off; You have to perform gradual deployments, and more.

In this talk Aviran will discuss some of the strategies we use at Wix to address these concerns, letting Wix to deploy hundreds of times every month.

You will get a behind the scene look of how Wix manages A/B tests, how they changed their development methodology and the impact it had on their company culture. You will also learn what are feature toggles and how they use them to solve real life problems, and of course how they manage to do hundreds of deployments and evolve their system with no downtime.

Speaker:

Aviran Mordo, Wix

Aviran Mordo leads Wix's back-end group. He has over 20 years of experience in the software industry and has filled many engineering roles and leading positions, from designing and building the US national Electronic Records Archives (http://www.archives.gov/era/) to building the infrastructure that powers indeed.com, the leading job search engine in the world. Aviran is a tech-savvy and a technology blogger since 2000, with vast knowledge of internet technologies, software development and continuous delivery.

Twitter: @aviranm LinkedIn: http://www.linkedin.com/in/aviran Blog: http://www.aviransplace.com"
Captions: 
	00:00:09,100 --> 00:00:14,030
okay so my name is aviron modo I'm the

00:00:12,500 --> 00:00:17,210
head of pack and engineering at wicks

00:00:14,030 --> 00:00:20,329
and today I'm gonna tell you about how

00:00:17,210 --> 00:00:23,449
we do continuous delivery twix how many

00:00:20,329 --> 00:00:26,169
of you are doing contains delivery right

00:00:23,449 --> 00:00:28,640
off hand not too many how many of you

00:00:26,169 --> 00:00:35,720
heard about continues today I know what

00:00:28,640 --> 00:00:38,390
that is good so plenty o ok so you have

00:00:35,720 --> 00:00:40,700
already spoke about week so I'm I won't

00:00:38,390 --> 00:00:46,490
tell you what we do web publishing

00:00:40,700 --> 00:00:50,660
platforms so when usually when we speak

00:00:46,490 --> 00:00:54,080
about continuous delivery it says we

00:00:50,660 --> 00:00:57,230
deploy many times a day like 10 times a

00:00:54,080 --> 00:01:00,770
day 20 times a day and people ask me wow

00:00:57,230 --> 00:01:03,800
that's really brave review it takes caps

00:01:00,770 --> 00:01:07,580
how can you do it you don't break

00:01:03,800 --> 00:01:13,090
production and it actually it's not that

00:01:07,580 --> 00:01:16,460
brave of us when you put all all the

00:01:13,090 --> 00:01:19,400
protections and safeguards in place it's

00:01:16,460 --> 00:01:22,130
actually it's not that hard you do have

00:01:19,400 --> 00:01:27,229
to invest a lot in putting those in

00:01:22,130 --> 00:01:28,760
place but it's not that hard so I'm

00:01:27,229 --> 00:01:31,880
going to tell you about some of the

00:01:28,760 --> 00:01:36,049
things that we do that allows us to

00:01:31,880 --> 00:01:40,490
deploy 10 times a day but before that I

00:01:36,049 --> 00:01:42,470
want to show you these numbers I just

00:01:40,490 --> 00:01:46,520
pulled these numbers like from the past

00:01:42,470 --> 00:01:49,159
six months and what those are are the

00:01:46,520 --> 00:01:51,850
things that we did in the first half of

00:01:49,159 --> 00:01:56,630
the year so we did 1,500 deployment

00:01:51,850 --> 00:02:03,650
we're in 470 AP tests and we had around

00:01:56,630 --> 00:02:06,430
200 feature toggles key points about

00:02:03,650 --> 00:02:09,110
continuous delivery what that is

00:02:06,430 --> 00:02:11,060
basically you abandoned the versioning

00:02:09,110 --> 00:02:11,550
there is there is no such notion as a

00:02:11,060 --> 00:02:13,770
version

00:02:11,550 --> 00:02:16,350
you go to a future centric development

00:02:13,770 --> 00:02:19,500
you develop a feature once the feature

00:02:16,350 --> 00:02:22,920
is ready you push it and deploy to

00:02:19,500 --> 00:02:25,920
production you automate everything you

00:02:22,920 --> 00:02:29,490
move to test driven development which is

00:02:25,920 --> 00:02:31,650
highly critical when you deploy many

00:02:29,490 --> 00:02:35,130
times day everything has to be automated

00:02:31,650 --> 00:02:40,440
you cannot rely on qaq manual click QA

00:02:35,130 --> 00:02:42,450
is slow and you measure everything you

00:02:40,440 --> 00:02:44,880
run a be test you run feature toggles

00:02:42,450 --> 00:02:48,120
you define your KPIs and the business

00:02:44,880 --> 00:02:50,250
kpi's it's not hard worker PX you define

00:02:48,120 --> 00:02:56,580
what is good for your business what does

00:02:50,250 --> 00:02:59,730
it mean that i perform good so

00:02:56,580 --> 00:03:04,920
test-driven development that's the first

00:02:59,730 --> 00:03:08,190
thing that that has to be done on your

00:03:04,920 --> 00:03:10,680
code is being pushed to get is fully

00:03:08,190 --> 00:03:12,720
tested there is no code that is being

00:03:10,680 --> 00:03:15,030
pushed without its test and that

00:03:12,720 --> 00:03:18,330
includes unit tests and integration

00:03:15,030 --> 00:03:23,790
tests right now we have around 10,000

00:03:18,330 --> 00:03:27,209
tests in our build environment and we at

00:03:23,790 --> 00:03:29,940
the back end at least we have no key way

00:03:27,209 --> 00:03:32,580
at all the developers are the one that

00:03:29,940 --> 00:03:37,020
are writing the test with the code or

00:03:32,580 --> 00:03:39,450
before the code but it's highly crucial

00:03:37,020 --> 00:03:46,620
no no crew she's been no code is being

00:03:39,450 --> 00:03:49,680
pushed without its test when the rare

00:03:46,620 --> 00:03:54,030
occasion where we find a bug doesn't

00:03:49,680 --> 00:03:56,400
happen too often the process is before

00:03:54,030 --> 00:03:58,920
you actually fix a bug the first thing

00:03:56,400 --> 00:04:04,470
you do is you write an automated test to

00:03:58,920 --> 00:04:07,739
reproduce the bug and once you wrote the

00:04:04,470 --> 00:04:10,140
test and test naturally failed because

00:04:07,739 --> 00:04:14,130
you have a bug you fix the bug and the

00:04:10,140 --> 00:04:16,830
test passes and that ensures that there

00:04:14,130 --> 00:04:21,750
will no there will not be any regression

00:04:16,830 --> 00:04:24,450
for that back for legacy systems I know

00:04:21,750 --> 00:04:25,949
not everybody has a luxury of writing

00:04:24,450 --> 00:04:30,220
new code

00:04:25,949 --> 00:04:35,020
we're tweaks replaced basically all our

00:04:30,220 --> 00:04:37,900
legacy code but before that we had

00:04:35,020 --> 00:04:39,729
legacy systems so with like a system you

00:04:37,900 --> 00:04:42,669
can't write like the unit tests that are

00:04:39,729 --> 00:04:45,759
there was a big blob of spaghetti code

00:04:42,669 --> 00:04:47,530
and it's really hard to write unit tests

00:04:45,759 --> 00:04:49,919
for code that you probably don't know

00:04:47,530 --> 00:04:52,300
the people who wrote it already left but

00:04:49,919 --> 00:04:56,080
you covered with integration tests

00:04:52,300 --> 00:05:01,870
integration tests are doing end-to-end

00:04:56,080 --> 00:05:07,120
flows but it gets you to the place that

00:05:01,870 --> 00:05:11,259
you feel comfortable in the quality of

00:05:07,120 --> 00:05:12,789
the legacy systems it takes time to

00:05:11,259 --> 00:05:14,710
write those destined you don't write

00:05:12,789 --> 00:05:17,110
them at first but every time you have

00:05:14,710 --> 00:05:19,870
new change you need to change something

00:05:17,110 --> 00:05:21,759
in the legacy system system first you

00:05:19,870 --> 00:05:23,590
write the integration tests you see okay

00:05:21,759 --> 00:05:25,840
this is how it works I'm going to change

00:05:23,590 --> 00:05:32,289
it and I'll know what I will not break

00:05:25,840 --> 00:05:37,150
the code when you do test-driven

00:05:32,289 --> 00:05:40,839
development I talk to a lot of

00:05:37,150 --> 00:05:44,830
developers and they said well testing is

00:05:40,839 --> 00:05:48,969
hard and when you do TDD it takes longer

00:05:44,830 --> 00:05:51,639
to write the code and why do you even

00:05:48,969 --> 00:05:55,270
writing it right testing well we write

00:05:51,639 --> 00:05:58,900
without bucks right so it's not entirely

00:05:55,270 --> 00:06:02,860
true from our experience once we switch

00:05:58,900 --> 00:06:06,879
to ddd we found it we develop much

00:06:02,860 --> 00:06:09,669
faster we remove the fear of change it

00:06:06,879 --> 00:06:12,279
means when we are working in a

00:06:09,669 --> 00:06:16,000
service-oriented architecture so if I

00:06:12,279 --> 00:06:20,650
write a service and I need a new API

00:06:16,000 --> 00:06:24,219
from a different service which I don't

00:06:20,650 --> 00:06:27,940
own man I will not write that code for

00:06:24,219 --> 00:06:30,370
the new API up sorry the owner of the

00:06:27,940 --> 00:06:33,699
other service will not write the code i

00:06:30,370 --> 00:06:37,240
will write the code because I pretty

00:06:33,699 --> 00:06:39,220
sure that the service is covered with

00:06:37,240 --> 00:06:41,890
test I can go to the

00:06:39,220 --> 00:06:43,900
service even without knowing it I can

00:06:41,890 --> 00:06:45,940
write the code and be pretty sure that I

00:06:43,900 --> 00:06:47,380
will not break anything of course I do

00:06:45,940 --> 00:06:50,200
it with a review on with the owner of

00:06:47,380 --> 00:06:53,980
the service but it removed the sphere of

00:06:50,200 --> 00:06:56,350
changes that the statement is it works

00:06:53,980 --> 00:06:58,630
don't touch it it doesn't exist anymore

00:06:56,350 --> 00:07:00,610
because you're not afraid of breaking

00:06:58,630 --> 00:07:02,710
anything if you'll break something then

00:07:00,610 --> 00:07:06,060
the test will break and you can fix it

00:07:02,710 --> 00:07:06,060
and you'll have an immediate

00:07:06,180 --> 00:07:10,410
notification that something bad went

00:07:12,780 --> 00:07:19,960
like I said a drill need QA well on the

00:07:17,080 --> 00:07:22,930
service side we have no queue at all

00:07:19,960 --> 00:07:25,090
everything is automated everything all

00:07:22,930 --> 00:07:28,540
the testing are being written by the

00:07:25,090 --> 00:07:33,130
developers on the front end side which

00:07:28,540 --> 00:07:38,470
is HTML Javascript 2d we do have QA and

00:07:33,130 --> 00:07:41,470
that's because of the way they work ddd

00:07:38,470 --> 00:07:43,930
actually make us reach to production

00:07:41,470 --> 00:07:46,120
although it takes longer to write the

00:07:43,930 --> 00:07:49,780
code because you have to write the test

00:07:46,120 --> 00:07:52,419
and a lot of the times writing the test

00:07:49,780 --> 00:07:58,930
is more difficult to actually writing

00:07:52,419 --> 00:08:01,930
the code so you write the feature slower

00:07:58,930 --> 00:08:04,630
but it gets to production much faster

00:08:01,930 --> 00:08:09,010
because the quality of the code that

00:08:04,630 --> 00:08:11,440
we're writing is much higher so it

00:08:09,010 --> 00:08:13,479
allows us to deploy a lot faster you

00:08:11,440 --> 00:08:15,610
don't have to spend time in writing the

00:08:13,479 --> 00:08:17,680
code pushing it to QA then they'll find

00:08:15,610 --> 00:08:19,950
bugs and bring it back to the developer

00:08:17,680 --> 00:08:22,570
fixes the cottage go back the key and

00:08:19,950 --> 00:08:24,760
then goes to production and you find the

00:08:22,570 --> 00:08:28,390
bugs in production and you roll back so

00:08:24,760 --> 00:08:31,540
this allows us to get features to

00:08:28,390 --> 00:08:38,650
production much much faster than then we

00:08:31,540 --> 00:08:43,060
ever had before and if you'll ask the

00:08:38,650 --> 00:08:46,030
the developers at weeks work before we

00:08:43,060 --> 00:08:49,900
switch to ddd and after a while when

00:08:46,030 --> 00:08:52,850
they understand what ddd means and and

00:08:49,900 --> 00:08:55,670
the benefits of test-driven development

00:08:52,850 --> 00:09:00,589
and they will tell you there is no other

00:08:55,670 --> 00:09:02,779
way of working although it and I repeat

00:09:00,589 --> 00:09:04,610
that it's hard doing TDD is hard it's a

00:09:02,779 --> 00:09:06,440
craftsmanship it's like writing any

00:09:04,610 --> 00:09:08,360
other software it's like learning a new

00:09:06,440 --> 00:09:11,899
language you have to know how to write

00:09:08,360 --> 00:09:14,420
tests but that's the only way that you

00:09:11,899 --> 00:09:22,360
can actually produce a better quality of

00:09:14,420 --> 00:09:24,740
cold so we wrote the test and we now

00:09:22,360 --> 00:09:26,839
okay when I want to deliver it to

00:09:24,740 --> 00:09:30,829
production so we need to put some

00:09:26,839 --> 00:09:32,630
safeguards and one of the safeguards

00:09:30,829 --> 00:09:36,889
that we put in the code is feature

00:09:32,630 --> 00:09:41,199
toggles so before I speak about feeder

00:09:36,889 --> 00:09:44,149
chuckles I'll tell you about how we

00:09:41,199 --> 00:09:47,959
write the code so when we write codes

00:09:44,149 --> 00:09:49,579
everybody right pushes to the trunk okay

00:09:47,959 --> 00:09:52,910
there there is no feature branches

00:09:49,579 --> 00:09:57,459
there's nothing once you write the code

00:09:52,910 --> 00:09:59,569
you do push it goes to the trunk and

00:09:57,459 --> 00:10:02,959
since we're doing continuous delivery

00:09:59,569 --> 00:10:06,670
this code can reach production anytime

00:10:02,959 --> 00:10:09,259
by anyone ever everyone in the indie rd

00:10:06,670 --> 00:10:10,519
pushing a co2 production is basically

00:10:09,259 --> 00:10:11,990
pressing a button we have a web

00:10:10,519 --> 00:10:15,079
interface we press the button and its

00:10:11,990 --> 00:10:17,449
own production so the developer who

00:10:15,079 --> 00:10:21,380
pushes the code have no control of when

00:10:17,449 --> 00:10:23,209
this code will reach production so if i

00:10:21,380 --> 00:10:26,779
push the code that it's not ready i need

00:10:23,209 --> 00:10:29,209
to safeguard from being rich to

00:10:26,779 --> 00:10:31,939
production and that's being then by

00:10:29,209 --> 00:10:37,130
future targets so future toggle is

00:10:31,939 --> 00:10:40,100
basically a code branch so this is the

00:10:37,130 --> 00:10:41,720
normal flow of your application and

00:10:40,100 --> 00:10:43,970
there is a feature talk it's basically

00:10:41,720 --> 00:10:46,220
and if in the code and if the future

00:10:43,970 --> 00:10:50,089
target is open then we run the new code

00:10:46,220 --> 00:10:52,399
and if not then we run the old code the

00:10:50,089 --> 00:10:54,019
new code doesn't have to be ready if the

00:10:52,399 --> 00:10:57,620
future target is closed its not being

00:10:54,019 --> 00:11:01,480
run so I'm safe there's no fear of

00:10:57,620 --> 00:11:05,180
pushing unfinished code to production

00:11:01,480 --> 00:11:06,639
this is an actual screen shot from of a

00:11:05,180 --> 00:11:09,709
feature dog that we have

00:11:06,639 --> 00:11:11,749
it's basically an if in the code see if

00:11:09,709 --> 00:11:13,519
future toggle we have a future toggle

00:11:11,749 --> 00:11:17,929
manager that manages all our future

00:11:13,519 --> 00:11:19,909
toggles if it's a new feature toggle is

00:11:17,929 --> 00:11:28,129
active and do the new code if not that

00:11:19,909 --> 00:11:31,249
then go to the to the old code so in

00:11:28,129 --> 00:11:33,889
continuous delivery we also deploy

00:11:31,249 --> 00:11:35,989
without downtime so it's nice to have

00:11:33,889 --> 00:11:38,779
feature tall girls and everything when

00:11:35,989 --> 00:11:41,689
you deploy a new code but what happens

00:11:38,779 --> 00:11:48,579
if you need to do database changes you

00:11:41,689 --> 00:11:51,859
need to change the schema so what we do

00:11:48,579 --> 00:11:55,729
there are several use cases if you need

00:11:51,859 --> 00:11:57,829
to add a column to the database when

00:11:55,729 --> 00:12:01,489
we're working with millions of record in

00:11:57,829 --> 00:12:03,259
the database doing an alter table is out

00:12:01,489 --> 00:12:06,019
of the question all the table locks the

00:12:03,259 --> 00:12:08,869
whole database for from minutes to hours

00:12:06,019 --> 00:12:11,959
depending on the side of the database so

00:12:08,869 --> 00:12:16,039
we can't really do that so if we need to

00:12:11,959 --> 00:12:18,769
add a column we just put in a different

00:12:16,039 --> 00:12:23,059
table on the side and with primary key

00:12:18,769 --> 00:12:27,769
link to the new table another thing that

00:12:23,059 --> 00:12:30,019
we do is we try to add for every table

00:12:27,769 --> 00:12:34,519
that we use a relational table not

00:12:30,019 --> 00:12:38,749
talking about Noel we have a column

00:12:34,519 --> 00:12:40,970
which contains a blob so because you

00:12:38,749 --> 00:12:43,899
cannot really predict a system or

00:12:40,970 --> 00:12:46,970
evolving and you cannot really predict

00:12:43,899 --> 00:12:49,789
what are the future needs so we we try

00:12:46,970 --> 00:12:53,329
to add a blob column which is stored in

00:12:49,789 --> 00:12:55,970
a JSON format and as long as you don't

00:12:53,329 --> 00:12:58,069
have to index it and search but just a

00:12:55,970 --> 00:13:00,979
data that you need to retrieve by a

00:12:58,069 --> 00:13:06,139
different key there's no problem you can

00:13:00,979 --> 00:13:08,809
just add more fields to that blob it's a

00:13:06,139 --> 00:13:10,789
JSON you read it read the row you have

00:13:08,809 --> 00:13:14,059
the JSON you parse it and you get

00:13:10,789 --> 00:13:16,069
whatever you want to it if you want to

00:13:14,059 --> 00:13:18,420
remove a column we just don't do

00:13:16,069 --> 00:13:21,800
anything i just don't use it

00:13:18,420 --> 00:13:24,630
leave it there it doesn't bother anyone

00:13:21,800 --> 00:13:28,620
but that's the easy case okay now what

00:13:24,630 --> 00:13:31,500
happens if we want to actually migrate

00:13:28,620 --> 00:13:37,070
databases ok move from one database to

00:13:31,500 --> 00:13:39,540
another or do a complete schema change

00:13:37,070 --> 00:13:44,970
so this is again where feature tell

00:13:39,540 --> 00:13:47,880
girls come to to our aid so what we do

00:13:44,970 --> 00:13:49,560
is we have two databases okay we have

00:13:47,880 --> 00:13:50,970
the all database and we have the new

00:13:49,560 --> 00:13:55,680
database remember we have to do it

00:13:50,970 --> 00:13:58,800
without any downtime so we got the gray

00:13:55,680 --> 00:14:01,889
fish and goldfish and they need to

00:13:58,800 --> 00:14:04,529
migrate from one database tirana so

00:14:01,889 --> 00:14:08,100
first we put the new database in place

00:14:04,529 --> 00:14:11,430
and we have a future toggle in the code

00:14:08,100 --> 00:14:14,699
where we actually use the database so

00:14:11,430 --> 00:14:17,130
and the future toggle has States so the

00:14:14,699 --> 00:14:18,630
first date is just write it all database

00:14:17,130 --> 00:14:21,600
read from the oil database nothing

00:14:18,630 --> 00:14:26,699
changes everything works as before and

00:14:21,600 --> 00:14:29,699
now we study the migration we start

00:14:26,699 --> 00:14:31,829
populating the new the new schema so

00:14:29,699 --> 00:14:35,220
every time we do a right we're out to

00:14:31,829 --> 00:14:37,730
both databases but still reading from

00:14:35,220 --> 00:14:41,279
the old one it has the old schema and

00:14:37,730 --> 00:14:46,440
we're doing that in order to protect us

00:14:41,279 --> 00:14:50,070
from unknown circumstances where we hold

00:14:46,440 --> 00:14:55,019
a big blobs in memory and writing to the

00:14:50,070 --> 00:14:57,589
new database might be slow and if that

00:14:55,019 --> 00:15:00,120
doesn't work and we see problems we just

00:14:57,589 --> 00:15:02,310
turn the notch on the future toggle go

00:15:00,120 --> 00:15:03,720
back to the old schema reading and

00:15:02,310 --> 00:15:08,399
writing from the old database nothing

00:15:03,720 --> 00:15:12,440
happens we let that run for a while for

00:15:08,399 --> 00:15:15,870
about a week or two and even a month and

00:15:12,440 --> 00:15:18,209
once we feel comfortable when we doing

00:15:15,870 --> 00:15:20,160
the rights to both database and the

00:15:18,209 --> 00:15:23,370
system is healthy and nothing happens

00:15:20,160 --> 00:15:26,490
then we start reading from both from

00:15:23,370 --> 00:15:30,660
both databases what does it mean because

00:15:26,490 --> 00:15:31,760
we populated the new database are with

00:15:30,660 --> 00:15:33,890
data

00:15:31,760 --> 00:15:36,140
let it run for a few weeks then we start

00:15:33,890 --> 00:15:38,180
writing reading from the new database

00:15:36,140 --> 00:15:40,010
and for records we can find we just fall

00:15:38,180 --> 00:15:43,370
back to the old one remember we're still

00:15:40,010 --> 00:15:45,650
writing to build databases this is

00:15:43,370 --> 00:15:47,540
reversible to something happened during

00:15:45,650 --> 00:15:50,270
this process we can always switch back

00:15:47,540 --> 00:15:53,840
to feature toggle to freeze or state nor

00:15:50,270 --> 00:15:56,720
the first state go go back now we let

00:15:53,840 --> 00:16:01,880
that run for about a week or two or a

00:15:56,720 --> 00:16:05,330
month and now it's time okay now we're

00:16:01,880 --> 00:16:09,350
gonna do the Unruh versatile the point

00:16:05,330 --> 00:16:12,710
of no return is this fourth state when

00:16:09,350 --> 00:16:15,920
we stop writing to the old database and

00:16:12,710 --> 00:16:18,410
we read from both so we're real real we

00:16:15,920 --> 00:16:21,350
write everything to the new database we

00:16:18,410 --> 00:16:23,510
try to read from the new database and if

00:16:21,350 --> 00:16:30,440
the record doesn't exist there we just

00:16:23,510 --> 00:16:33,140
fall back to the old one so this gives

00:16:30,440 --> 00:16:36,470
us a time to do the eager migration so

00:16:33,140 --> 00:16:39,980
the system works and behave no downtime

00:16:36,470 --> 00:16:43,640
and then during our own free time during

00:16:39,980 --> 00:16:45,530
off-peak hours we just do the eager

00:16:43,640 --> 00:16:48,980
migration from the old database to the

00:16:45,530 --> 00:16:51,110
new and eventually we just write from

00:16:48,980 --> 00:16:53,030
the new everything is on the new

00:16:51,110 --> 00:16:56,750
database and we close the future toggle

00:16:53,030 --> 00:17:01,790
and we're all happy and we need to do it

00:16:56,750 --> 00:17:06,740
again we're actually this process of

00:17:01,790 --> 00:17:08,709
database migration happens like about

00:17:06,740 --> 00:17:16,540
two or three times in the last year and

00:17:08,709 --> 00:17:20,990
with no downtimes so feature toggles are

00:17:16,540 --> 00:17:28,100
are not just on off or our state we can

00:17:20,990 --> 00:17:30,320
all we can it used for gradual exposures

00:17:28,100 --> 00:17:33,350
of new features not everything gets the

00:17:30,320 --> 00:17:36,620
new feature and they're being used as a

00:17:33,350 --> 00:17:40,040
technical feature toggles so first we

00:17:36,620 --> 00:17:41,900
open the future toggle for like the

00:17:40,040 --> 00:17:45,290
company employees we have several

00:17:41,900 --> 00:17:48,440
strategies of exposing new features

00:17:45,290 --> 00:17:52,240
so first of these company employees or

00:17:48,440 --> 00:17:55,070
specific users or by geolocation

00:17:52,240 --> 00:17:58,700
geolocation is a great tool if you want

00:17:55,070 --> 00:18:02,300
to expose client-side code so let's say

00:17:58,700 --> 00:18:04,370
we have a new JavaScript code so and we

00:18:02,300 --> 00:18:06,770
don't want the whole world you to be

00:18:04,370 --> 00:18:08,990
effect at all all our users to be

00:18:06,770 --> 00:18:12,770
affected by this code so what we do is

00:18:08,990 --> 00:18:16,250
we use feature toggle to give light sale

00:18:12,770 --> 00:18:17,960
by geolocation likes like just users in

00:18:16,250 --> 00:18:19,700
Germany will get the new JavaScript

00:18:17,960 --> 00:18:21,830
everyone else will get the old one and

00:18:19,700 --> 00:18:24,080
we test that and we look at the

00:18:21,830 --> 00:18:26,510
monitoring see no no errors then we just

00:18:24,080 --> 00:18:30,560
increase it two more geo locations and

00:18:26,510 --> 00:18:32,960
eventually we open it to to everyone you

00:18:30,560 --> 00:18:35,720
can use whatever strategies you know

00:18:32,960 --> 00:18:40,270
where a web company so these are based

00:18:35,720 --> 00:18:43,370
on web prefixes so user agent Gail

00:18:40,270 --> 00:18:47,390
language or if you have poor file base

00:18:43,370 --> 00:18:50,950
you can use it by any profile or any

00:18:47,390 --> 00:18:50,950
context that you have in your systems

00:18:52,180 --> 00:19:00,410
now this is not enough when we do in

00:18:58,700 --> 00:19:03,410
technological future targets like

00:19:00,410 --> 00:19:06,140
writing in database or using an old code

00:19:03,410 --> 00:19:08,210
so we deploy to the cluster of servers

00:19:06,140 --> 00:19:12,560
it's never just one server so it's at

00:19:08,210 --> 00:19:17,030
least two or more service so let's say I

00:19:12,560 --> 00:19:20,120
wrote a new algorithm that I don't know

00:19:17,030 --> 00:19:23,900
how it will perform if it were from bad

00:19:20,120 --> 00:19:26,810
and the several will have like shoot cpu

00:19:23,900 --> 00:19:32,090
load because i can't really test it on

00:19:26,810 --> 00:19:36,260
real production traffic on staging so we

00:19:32,090 --> 00:19:39,020
use feature tall girls also to start to

00:19:36,260 --> 00:19:41,210
run new code but not on all the service

00:19:39,020 --> 00:19:45,680
so let's say I have a cluster of five

00:19:41,210 --> 00:19:48,650
servers off of specific service so i

00:19:45,680 --> 00:19:50,630
opened the features toggle based on just

00:19:48,650 --> 00:19:52,820
one server so one server will run the

00:19:50,630 --> 00:19:54,770
new code the rest of them will run the

00:19:52,820 --> 00:19:57,200
old code I'll monitor that and see

00:19:54,770 --> 00:19:58,470
everything is good then I'll just open

00:19:57,200 --> 00:20:02,409
it to the rest of this

00:19:58,470 --> 00:20:05,470
this is another safeguard that we put in

00:20:02,409 --> 00:20:08,200
place so we will not crush the whole

00:20:05,470 --> 00:20:10,929
cluster at worst the worst case is one

00:20:08,200 --> 00:20:17,049
server went down we have four mowers

00:20:10,929 --> 00:20:19,779
that running the application database

00:20:17,049 --> 00:20:22,840
migration and refactoring that affect

00:20:19,779 --> 00:20:25,720
performance those are used by those are

00:20:22,840 --> 00:20:27,929
use cases where we use we open the

00:20:25,720 --> 00:20:30,340
features toggle on a specific server

00:20:27,929 --> 00:20:35,859
another way to override the future

00:20:30,340 --> 00:20:39,519
toggles is by URL parameter so we use

00:20:35,859 --> 00:20:42,549
that for internal testing so when we

00:20:39,519 --> 00:20:44,619
upload a new feature it's in production

00:20:42,549 --> 00:20:46,929
it's closed nobody can see it but we

00:20:44,619 --> 00:20:51,039
want to test it before we expose it to

00:20:46,929 --> 00:20:53,619
to our customers so we can have special

00:20:51,039 --> 00:20:58,299
URL parameters we send email to your

00:20:53,619 --> 00:21:00,669
internal people in the company and say

00:20:58,299 --> 00:21:04,929
well use this URL and see this feature

00:21:00,669 --> 00:21:11,169
on and test it for us on production on

00:21:04,929 --> 00:21:13,090
your real user and they do that and we

00:21:11,169 --> 00:21:16,409
decide well this is good then we start

00:21:13,090 --> 00:21:21,460
opening by Gil wherever any other

00:21:16,409 --> 00:21:24,249
parameter and another thing another

00:21:21,460 --> 00:21:27,369
important thing we have customers all

00:21:24,249 --> 00:21:30,429
over the world and we have have

00:21:27,369 --> 00:21:32,619
literally dozens of feature tokens an

00:21:30,429 --> 00:21:36,850
a/b testing production at any given

00:21:32,619 --> 00:21:39,669
point so if if I have a future toggle

00:21:36,850 --> 00:21:43,600
that is open let's say for United States

00:21:39,669 --> 00:21:45,909
and some customer calls or support and

00:21:43,600 --> 00:21:49,450
says well this new feature doesn't work

00:21:45,909 --> 00:21:52,210
for us but our support people are here

00:21:49,450 --> 00:21:57,340
in Israel and so they can't see what the

00:21:52,210 --> 00:21:59,649
user sees right so we is also feature

00:21:57,340 --> 00:22:01,179
toggle over right so they can put a URL

00:21:59,649 --> 00:22:04,809
parameter to actually fake the gear

00:22:01,179 --> 00:22:07,720
location of the support so they can

00:22:04,809 --> 00:22:09,429
experience exactly what our users in the

00:22:07,720 --> 00:22:11,920
United States are experiencing and they

00:22:09,429 --> 00:22:15,210
can help them

00:22:11,920 --> 00:22:21,360
but this is all good when you have a

00:22:15,210 --> 00:22:24,640
request request response or web right so

00:22:21,360 --> 00:22:26,920
but what happens if we're a web

00:22:24,640 --> 00:22:29,530
application right so it's everything's

00:22:26,920 --> 00:22:34,720
done with Ajax and you can't really send

00:22:29,530 --> 00:22:39,280
URL parameters this is why we have

00:22:34,720 --> 00:22:42,400
another override mechanism is the is the

00:22:39,280 --> 00:22:44,920
cookie you can set a special cookie so

00:22:42,400 --> 00:22:47,290
when your web application sends a JAX

00:22:44,920 --> 00:22:48,580
requests its means and with the cookies

00:22:47,290 --> 00:22:53,310
and the cook is actually override

00:22:48,580 --> 00:22:53,310
whatever feature target is open or not

00:22:55,020 --> 00:23:00,880
this is our console to manage future

00:22:58,120 --> 00:23:04,600
togas everybody can go and edit feature

00:23:00,880 --> 00:23:07,300
toggles and open and change them any

00:23:04,600 --> 00:23:16,150
change will actually send an email and

00:23:07,300 --> 00:23:19,150
will be locked another mechanism that we

00:23:16,150 --> 00:23:24,700
have is a/b testing everybody knows what

00:23:19,150 --> 00:23:29,920
everything right everything is similar

00:23:24,700 --> 00:23:34,450
but slightly different than then feature

00:23:29,920 --> 00:23:38,410
toggles while future toggles we protect

00:23:34,450 --> 00:23:43,420
ourselves against software glitches and

00:23:38,410 --> 00:23:46,510
technical issues in AP tests we measure

00:23:43,420 --> 00:23:49,420
new features okay we measure how good

00:23:46,510 --> 00:23:51,720
that is for a customer everything is

00:23:49,420 --> 00:23:54,580
tested there is nothing that's being

00:23:51,720 --> 00:23:57,400
pushed to production a new feature

00:23:54,580 --> 00:24:02,380
without being a be tested even the

00:23:57,400 --> 00:24:04,660
slightest things I have a funny story to

00:24:02,380 --> 00:24:08,230
tell about that so one of our product

00:24:04,660 --> 00:24:11,470
manager decided okay we we sell

00:24:08,230 --> 00:24:14,950
subscriptions so we have anybody can can

00:24:11,470 --> 00:24:17,020
create a free website and we try to push

00:24:14,950 --> 00:24:20,290
them work a upgrade and purchase this

00:24:17,020 --> 00:24:23,020
premium package right so one of our

00:24:20,290 --> 00:24:25,890
product managers decided well how about

00:24:23,020 --> 00:24:29,640
I'll put a link inside da

00:24:25,890 --> 00:24:31,290
HTML editor to the purchase page some

00:24:29,640 --> 00:24:35,850
reasonable right well we want to push

00:24:31,290 --> 00:24:37,860
them to purchase Premium Package so we

00:24:35,850 --> 00:24:39,450
did up without doing any IV testing so

00:24:37,860 --> 00:24:41,550
well I'm just putting out just put a

00:24:39,450 --> 00:24:44,100
link on just a small link on the bottom

00:24:41,550 --> 00:24:49,100
of the editor date akin to let me put

00:24:44,100 --> 00:24:51,330
the leg and we didn't really notice that

00:24:49,100 --> 00:24:53,070
two weeks later we'll look at the

00:24:51,330 --> 00:24:57,030
reports and we see like a drop in

00:24:53,070 --> 00:25:00,420
conversion and something well what did

00:24:57,030 --> 00:25:04,380
we do all the tests are looking fine we

00:25:00,420 --> 00:25:07,940
didn't do anything that is special that

00:25:04,380 --> 00:25:10,920
you change the user behavior and

00:25:07,940 --> 00:25:13,110
suddenly the deuce product manager well

00:25:10,920 --> 00:25:15,240
I did put the link of over there in the

00:25:13,110 --> 00:25:17,040
editor I didn't think well it should

00:25:15,240 --> 00:25:19,430
improve conversions because I'm pushing

00:25:17,040 --> 00:25:23,340
them to the purchase based faster right

00:25:19,430 --> 00:25:25,320
well turns out it's wrong because the

00:25:23,340 --> 00:25:26,820
intent of the user wasn't to purchase

00:25:25,320 --> 00:25:30,120
the intent of the user inside the editor

00:25:26,820 --> 00:25:31,530
was to build a website once he's happy

00:25:30,120 --> 00:25:33,930
with the website Danny can go and

00:25:31,530 --> 00:25:36,540
purchase the fact that that he put the

00:25:33,930 --> 00:25:38,160
link to just just moved users to the

00:25:36,540 --> 00:25:40,470
purchase worth to the purchase page

00:25:38,160 --> 00:25:42,660
without any intent which caused the drop

00:25:40,470 --> 00:25:46,020
and conversion well he didn't do that in

00:25:42,660 --> 00:25:49,080
a be test because if he if he would have

00:25:46,020 --> 00:25:52,350
done it in and tested that we would have

00:25:49,080 --> 00:25:54,330
seen that the user that saw the link and

00:25:52,350 --> 00:25:56,460
press the link would have a much lower

00:25:54,330 --> 00:26:04,440
conversion conversion rate than the user

00:25:56,460 --> 00:26:06,710
hood and soderling so in any AP test we

00:26:04,440 --> 00:26:09,690
define a KPI what are we measuring

00:26:06,710 --> 00:26:12,170
measuring conversion ago measuring an

00:26:09,690 --> 00:26:15,720
open rate of editors we need to measure

00:26:12,170 --> 00:26:22,620
business kpi's what is interested what

00:26:15,720 --> 00:26:24,630
are we interested to test it's an

00:26:22,620 --> 00:26:27,540
interesting effect on the product or

00:26:24,630 --> 00:26:30,420
product manager are so accustomed to do

00:26:27,540 --> 00:26:33,990
a/b testing that every new feature has

00:26:30,420 --> 00:26:35,850
to be tested there's no no features are

00:26:33,990 --> 00:26:38,790
being pushed to break regardless how

00:26:35,850 --> 00:26:39,149
small it is you added by the new change

00:26:38,790 --> 00:26:41,820
in

00:26:39,149 --> 00:26:46,950
I can you change the color everything is

00:26:41,820 --> 00:26:50,580
tested and if it's good we keep it if

00:26:46,950 --> 00:26:58,349
it's bad we just improve and change or

00:26:50,580 --> 00:27:00,599
just throw it away now when doing every

00:26:58,349 --> 00:27:02,729
test especially on the web you got two

00:27:00,599 --> 00:27:05,159
kinds of users you got the anonymous

00:27:02,729 --> 00:27:07,769
users who you actually don't know

00:27:05,159 --> 00:27:09,539
anything about and you got to register

00:27:07,769 --> 00:27:14,789
his own anonymous users are the one that

00:27:09,539 --> 00:27:17,190
goes to the to the homepage and you

00:27:14,789 --> 00:27:20,070
actually want to convert them let's say

00:27:17,190 --> 00:27:23,399
from an anonymous user to register you

00:27:20,070 --> 00:27:25,739
want to make them register right so you

00:27:23,399 --> 00:27:28,249
create a test for anonymous users the

00:27:25,739 --> 00:27:31,669
problem with testing anonymous users is

00:27:28,249 --> 00:27:36,659
if you change something on the screen

00:27:31,669 --> 00:27:38,639
you can't really guarantee the same user

00:27:36,659 --> 00:27:42,299
experience if they switch to another

00:27:38,639 --> 00:27:45,960
browser so anyone happens when it goes

00:27:42,299 --> 00:27:48,779
to jail to google page and so a link and

00:27:45,960 --> 00:27:53,729
then switch a different browser and you

00:27:48,779 --> 00:27:55,679
didn't get the link happens to me but

00:27:53,729 --> 00:27:58,589
this this is exactly the problem the

00:27:55,679 --> 00:28:00,239
problem is that you because you don't

00:27:58,589 --> 00:28:01,559
know anything about the user to user is

00:28:00,239 --> 00:28:03,119
not authenticated when you switch

00:28:01,559 --> 00:28:05,879
browser you cannot keep the user

00:28:03,119 --> 00:28:07,769
experience the way to keep user

00:28:05,879 --> 00:28:11,580
experience on the same browser is by

00:28:07,769 --> 00:28:14,389
putting a cookie on the browser for

00:28:11,580 --> 00:28:19,609
registered users the it's much easier

00:28:14,389 --> 00:28:22,109
because you have the user ID you know

00:28:19,609 --> 00:28:23,759
what user is and you can keep the

00:28:22,109 --> 00:28:28,219
experience even if the user changes

00:28:23,759 --> 00:28:32,690
browsers you can still give it the same

00:28:28,219 --> 00:28:32,690
experience because you know who that is

00:28:33,080 --> 00:28:40,710
again with a be test we have the same

00:28:38,359 --> 00:28:43,639
filters we can do a bit is by

00:28:40,710 --> 00:28:48,629
geolocation user agent operating system

00:28:43,639 --> 00:28:50,879
whatever things you have don't mix

00:28:48,629 --> 00:28:53,150
anonymous not testing with registers

00:28:50,879 --> 00:28:57,600
testing

00:28:53,150 --> 00:29:00,660
and again with a be test we can do the

00:28:57,600 --> 00:29:02,940
the overriding so our support can

00:29:00,660 --> 00:29:07,820
experience exactly what our users are

00:29:02,940 --> 00:29:11,100
experiencing testing can be stopped

00:29:07,820 --> 00:29:15,900
started and post what pause means is

00:29:11,100 --> 00:29:19,410
whoever got the Deacon the toast in the

00:29:15,900 --> 00:29:22,580
in the test will keep his user

00:29:19,410 --> 00:29:26,880
experience but no new new users will get

00:29:22,580 --> 00:29:29,210
tested one more thing about very

00:29:26,880 --> 00:29:32,700
important things about if you're doing a

00:29:29,210 --> 00:29:36,270
testing on especially on the web is that

00:29:32,700 --> 00:29:40,290
but they're not a player in the game but

00:29:36,270 --> 00:29:42,210
will always get whatever experience the

00:29:40,290 --> 00:29:43,980
old experience whatever it is everybody

00:29:42,210 --> 00:29:45,900
else if you'd close the test this is the

00:29:43,980 --> 00:29:48,780
experience that BOTS will get you don't

00:29:45,900 --> 00:29:51,150
want to confuse BOTS with sometimes

00:29:48,780 --> 00:29:54,000
google it's what are mostly anonymous

00:29:51,150 --> 00:29:56,850
right so sometimes but Google but we'll

00:29:54,000 --> 00:29:58,559
see one version of the homepage the

00:29:56,850 --> 00:30:00,059
second times it comes with scroll and

00:29:58,559 --> 00:30:01,950
see another version of the armpit you

00:30:00,059 --> 00:30:06,480
don't want to confuse the pot so what's

00:30:01,950 --> 00:30:15,809
our out of the game again manager a/b

00:30:06,480 --> 00:30:17,070
testing another safeguard self test when

00:30:15,809 --> 00:30:20,510
you don't continuous deployment you

00:30:17,070 --> 00:30:24,030
deploy 10 times a day 15 times a day and

00:30:20,510 --> 00:30:28,080
you need to be sure that the deployment

00:30:24,030 --> 00:30:29,760
went correctly without any problems so

00:30:28,080 --> 00:30:31,710
you don't deploy the whole or the whole

00:30:29,760 --> 00:30:33,960
cluster at once you do gradual deploy

00:30:31,710 --> 00:30:37,640
deploy one server and if that goes

00:30:33,960 --> 00:30:42,090
through the new flute or the next server

00:30:37,640 --> 00:30:45,540
now for after every deployment what we

00:30:42,090 --> 00:30:49,290
do is the server self-checks itself it

00:30:45,540 --> 00:30:51,419
takes that the configuration that Chef

00:30:49,290 --> 00:30:53,700
configure basically when we deploy chef

00:30:51,419 --> 00:30:56,490
does the kinda deployment and configure

00:30:53,700 --> 00:30:59,100
whatever configurations that in it so

00:30:56,490 --> 00:31:01,830
after before chef continues to deployed

00:30:59,100 --> 00:31:04,500
to the next server the server actually

00:31:01,830 --> 00:31:05,220
self test itself so it's a checks that

00:31:04,500 --> 00:31:07,559
if hazard

00:31:05,220 --> 00:31:08,789
the base connection goes and look at the

00:31:07,559 --> 00:31:11,280
database and see that it has a

00:31:08,789 --> 00:31:12,870
connection if it has an arrest or RPC

00:31:11,280 --> 00:31:14,340
endpoints configure it goes and check

00:31:12,870 --> 00:31:16,919
that they're alive and everything is

00:31:14,340 --> 00:31:18,870
configured correctly if everything is

00:31:16,919 --> 00:31:21,150
configured correctly then the deployment

00:31:18,870 --> 00:31:28,230
continues and if it's not then

00:31:21,150 --> 00:31:32,610
everything stopped and roll back we go

00:31:28,230 --> 00:31:35,220
can go and see if yourself test failed

00:31:32,610 --> 00:31:39,179
we we have an immediate view of what

00:31:35,220 --> 00:31:44,460
failed in the test and I'm almost done

00:31:39,179 --> 00:31:47,070
so where are we today since we moved to

00:31:44,460 --> 00:31:49,230
continuous delivery we rewrote our

00:31:47,070 --> 00:31:53,299
entire infrastructure entire product

00:31:49,230 --> 00:31:58,020
from flash to html5 in just four months

00:31:53,299 --> 00:32:00,870
we put developer API is for third-party

00:31:58,020 --> 00:32:04,049
development in six weeks and this is the

00:32:00,870 --> 00:32:08,370
graph of deployments per day that you

00:32:04,049 --> 00:32:10,799
can see that's it if you want to read

00:32:08,370 --> 00:32:12,750
more about weeks experience in

00:32:10,799 --> 00:32:15,780
continuous delivery I wrote a series of

00:32:12,750 --> 00:32:18,960
blog posts over here and you can

00:32:15,780 --> 00:32:21,200
download this presentation thank you

00:32:18,960 --> 00:32:21,200

YouTube URL: https://www.youtube.com/watch?v=cTi9dFRwbt8


