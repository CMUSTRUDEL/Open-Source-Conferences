Title: Terrible Ideas in Git - Corey Quinn
Publication date: 2015-11-01
Playlist: DevOps Days Tel Aviv 2015
Description: 
	http://www.devopsdays.org/events/2015-telaviv/

Adapted from his class "The Screaming Horrors of Git," Corey takes us on a magical tour through the (mis)use of Git to do things its creators never intended. In this humorously delivered exploration of one of the open source community's more ubiquitous tools, Corey demonstrates that a finely crafted wrench makes a barely acceptable hammer if you hold it wrong.

About the speaker - Corey Quinn

Corey has a long and storied history as a consultant -- long, in that every year he did it felt like three years, and storied, in that he's got a few. Prior to his current role as Director of DevOps at FutureAdvisor, he spent the past two years at Taos, where he served as a systems architect, ad-hoc recruiter, advocate for driving transformational change throughout organizations, and (due to a misunderstanding around what a "standup meeting" really was) an improvisational comic. One of the early developers behind Saltstack, Corey also has a rich history of contributing to various open source projects.

Corey's hobbies include motorcycles, wearing suits, and drinking whiskey-- it's a shame that they all don't work well together. He lives in San Francisco with his wife and two rodents of unusual size masquerading as dogs.
Captions: 
	00:00:11,129 --> 00:00:19,810
is Queen from future advisor from I came

00:00:16,360 --> 00:00:21,699
here from San Francisco right he's one

00:00:19,810 --> 00:00:25,240
of the early developers behind saltstack

00:00:21,699 --> 00:00:27,550
and spent five years helping to run the

00:00:25,240 --> 00:00:30,970
free node IRC network for those of you

00:00:27,550 --> 00:00:32,950
old enough to know what I see is and his

00:00:30,970 --> 00:00:34,780
help here chamber and is here to

00:00:32,950 --> 00:00:37,150
embarrass himself talking about get

00:00:34,780 --> 00:00:37,570
because nobody completely understands

00:00:37,150 --> 00:00:46,900
good

00:00:37,570 --> 00:00:49,750
so please welcome Cory no thank you this

00:00:46,900 --> 00:00:51,820
talk was adapted from a class that I

00:00:49,750 --> 00:00:53,890
gave a while back called the screaming

00:00:51,820 --> 00:00:56,410
horrors of get get for systems

00:00:53,890 --> 00:00:58,240
administrators as was mentioned I did

00:00:56,410 --> 00:01:00,700
some work on the open source side for

00:00:58,240 --> 00:01:02,140
salt stack for free node but I was also

00:01:00,700 --> 00:01:04,479
traveling consultant in a lot of places

00:01:02,140 --> 00:01:06,429
I was a traveling trainer for last

00:01:04,479 --> 00:01:08,020
summer at puppet labs I did some

00:01:06,429 --> 00:01:09,789
architecture work at Intel Nike

00:01:08,020 --> 00:01:12,070
Pinterest so I've seen a lot of

00:01:09,789 --> 00:01:14,229
interesting things and broken them along

00:01:12,070 --> 00:01:16,420
the way at the moment though I head up

00:01:14,229 --> 00:01:18,340
the ops group at future advisor in San

00:01:16,420 --> 00:01:20,079
Francisco if you are interested in

00:01:18,340 --> 00:01:22,630
working in San Francisco please let me

00:01:20,079 --> 00:01:24,249
know we sponsor visas and people who

00:01:22,630 --> 00:01:26,880
speak at conferences about things that

00:01:24,249 --> 00:01:29,289
barely understand

00:01:26,880 --> 00:01:31,030
so we have a lot to discuss please

00:01:29,289 --> 00:01:33,460
notice that my twitter handle is on the

00:01:31,030 --> 00:01:34,899
slide feel free to tweet at me ah does

00:01:33,460 --> 00:01:41,170
anyone have any questions before we dive

00:01:34,899 --> 00:01:43,539
in awesome let's do this okay I'm gonna

00:01:41,170 --> 00:01:45,759
start with a promise that everyone here

00:01:43,539 --> 00:01:47,319
is going to learn something today and I

00:01:45,759 --> 00:01:49,329
don't really care who you are I'm

00:01:47,319 --> 00:01:51,579
standing by it if you're one of the git

00:01:49,329 --> 00:01:54,189
authors you're going to learn if nothing

00:01:51,579 --> 00:01:56,799
else how I've mistreated your baby so

00:01:54,189 --> 00:01:58,390
this should be entertaining one move

00:01:56,799 --> 00:02:01,869
that I think I just want to call out

00:01:58,390 --> 00:02:04,119
first is I'm making fun of a lot of

00:02:01,869 --> 00:02:06,130
boneheaded moves in this talk but

00:02:04,119 --> 00:02:07,989
everything I'm about to make fun of

00:02:06,130 --> 00:02:10,239
people for doing are things that I know

00:02:07,989 --> 00:02:12,160
doesn't work specifically because I've

00:02:10,239 --> 00:02:16,540
done them myself you you learn by

00:02:12,160 --> 00:02:19,200
screwing up spectacularly so let's start

00:02:16,540 --> 00:02:22,090
at the very beginning who here uses git

00:02:19,200 --> 00:02:25,030
that's a lot of hands who here wishes

00:02:22,090 --> 00:02:27,250
they uses git they used get okay a

00:02:25,030 --> 00:02:28,450
couple hands who's raising their hands

00:02:27,250 --> 00:02:29,500
because they're just paying attention to

00:02:28,450 --> 00:02:34,389
their phone and hoping they're looking

00:02:29,500 --> 00:02:37,389
engaged there we go there we go okay so

00:02:34,389 --> 00:02:40,329
what git does is it tracks changes to

00:02:37,389 --> 00:02:42,069
files and directories over time it lets

00:02:40,329 --> 00:02:44,530
us collaborate and share those changes

00:02:42,069 --> 00:02:47,230
with each other and it's very very

00:02:44,530 --> 00:02:48,430
simple at its heart which is invariably

00:02:47,230 --> 00:02:50,700
why the next slide and all these

00:02:48,430 --> 00:02:54,329
presentations always looks like this

00:02:50,700 --> 00:02:56,290
it's not exactly straightforward and

00:02:54,329 --> 00:02:57,819
there's always an elephant in the room

00:02:56,290 --> 00:02:59,470
and these conversations now for those

00:02:57,819 --> 00:03:01,329
are unaware elephant in the room is an

00:02:59,470 --> 00:03:03,010
English idiom that means an awkward

00:03:01,329 --> 00:03:04,720
thing that people don't want to

00:03:03,010 --> 00:03:06,639
acknowledge but everyone knows it's

00:03:04,720 --> 00:03:06,849
there so when there's an elephant in the

00:03:06,639 --> 00:03:09,790
room

00:03:06,849 --> 00:03:12,190
I believe in introducing it specifically

00:03:09,790 --> 00:03:14,590
that it does make you feel dumb no

00:03:12,190 --> 00:03:16,450
matter who you are at some point you're

00:03:14,590 --> 00:03:18,459
going to get an error thrown by git at

00:03:16,450 --> 00:03:20,410
which point we all go scrambling to look

00:03:18,459 --> 00:03:23,200
for Stack Overflow and figure out how do

00:03:20,410 --> 00:03:25,540
I get out of this mess the only question

00:03:23,200 --> 00:03:28,480
that remains is how far down that rabbit

00:03:25,540 --> 00:03:31,359
hole do you go before you tap out and go

00:03:28,480 --> 00:03:33,040
looking for assistance so it's worth at

00:03:31,359 --> 00:03:37,269
least addressing or at least wondering

00:03:33,040 --> 00:03:38,859
why git is this complex so a people of

00:03:37,269 --> 00:03:39,480
noting git was written by Linnaeus

00:03:38,859 --> 00:03:41,459
torval

00:03:39,480 --> 00:03:44,129
who is famous for three things

00:03:41,459 --> 00:03:45,870
specifically the first most relevant up

00:03:44,129 --> 00:03:48,450
to the talk today is he is the original

00:03:45,870 --> 00:03:50,489
author of get the second thing he's

00:03:48,450 --> 00:03:52,709
familiar is bendable ball known for is

00:03:50,489 --> 00:03:54,150
writing Linux which is the reason that

00:03:52,709 --> 00:03:56,880
most of the people in this room have a

00:03:54,150 --> 00:03:58,650
job today he's also famous for tearing

00:03:56,880 --> 00:04:03,750
people to pieces on the mailing lists

00:03:58,650 --> 00:04:05,459
which is it he's an interesting guy but

00:04:03,750 --> 00:04:06,750
very powerful tools it's just it's

00:04:05,459 --> 00:04:07,140
assumed that you know what you're doing

00:04:06,750 --> 00:04:10,890
with it

00:04:07,140 --> 00:04:13,910
so despite its complexity it does let

00:04:10,890 --> 00:04:15,930
you do some very very powerful things

00:04:13,910 --> 00:04:19,200
powerful in this course is a polite

00:04:15,930 --> 00:04:20,850
euphemism for stupid again I have done

00:04:19,200 --> 00:04:25,290
all of these things that I'm about to

00:04:20,850 --> 00:04:27,720
demonstrate here now you can do

00:04:25,290 --> 00:04:30,450
interesting things like committing large

00:04:27,720 --> 00:04:32,880
binaries to get you can commit

00:04:30,450 --> 00:04:37,340
atrocities in get and it's kind of

00:04:32,880 --> 00:04:37,340
Awesome let's give a demo on this one oh

00:04:39,590 --> 00:04:44,669
hey there we are we build a gift

00:04:42,840 --> 00:04:48,270
repository and we add the contents now

00:04:44,669 --> 00:04:50,160
note the pause when I did that local

00:04:48,270 --> 00:04:52,470
operations in git are designed to be

00:04:50,160 --> 00:04:54,990
fast and lightweight so if you see get

00:04:52,470 --> 00:04:56,970
hanging on a local operation there's a

00:04:54,990 --> 00:05:07,669
fair-to-middling chance you're doing

00:04:56,970 --> 00:05:07,669
something dumb okay

00:05:08,389 --> 00:05:14,340
now I've just added an ISO a giant large

00:05:12,090 --> 00:05:18,300
binary file in to get and things are

00:05:14,340 --> 00:05:21,889
great however if we take a look here

00:05:18,300 --> 00:05:21,889
we've now built about getting directory

00:05:22,550 --> 00:05:26,639
which is now 69 megabytes

00:05:24,930 --> 00:05:29,340
I used one of the smaller ISOs for this

00:05:26,639 --> 00:05:31,260
demo Hotel Wireless it's awesome okay so

00:05:29,340 --> 00:05:33,240
I've done something stupid now I've

00:05:31,260 --> 00:05:36,080
added that binary to get we can go ahead

00:05:33,240 --> 00:05:36,080
and fix that though

00:05:45,140 --> 00:05:54,060
there if I do a git status it's not

00:05:49,440 --> 00:05:55,680
tracking that file anymore but the

00:05:54,060 --> 00:05:57,720
repository is still huge

00:05:55,680 --> 00:06:00,930
remember that git retains its entire

00:05:57,720 --> 00:06:03,300
history as you go so now if I want to

00:06:00,930 --> 00:06:08,370
pull that out I've got some work ahead

00:06:03,300 --> 00:06:10,230
of me the way that you generally tend to

00:06:08,370 --> 00:06:11,820
remove those things when you wind up in

00:06:10,230 --> 00:06:14,100
those situations is either an esoteric

00:06:11,820 --> 00:06:16,530
command called called git filter branch

00:06:14,100 --> 00:06:18,600
or you can run something called The BFG

00:06:16,530 --> 00:06:22,470
which comes down when you install it as

00:06:18,600 --> 00:06:24,210
a giant Java file it's not really well

00:06:22,470 --> 00:06:25,440
advised it's a problem and you're

00:06:24,210 --> 00:06:27,180
effectively performing repository

00:06:25,440 --> 00:06:29,400
surgery on these things as well as if

00:06:27,180 --> 00:06:31,740
you've pushed this you now get to wind

00:06:29,400 --> 00:06:33,030
up effectively rewriting history for

00:06:31,740 --> 00:06:36,840
everyone else which we'll get to in a

00:06:33,030 --> 00:06:38,820
bit if you really want to store large

00:06:36,840 --> 00:06:40,920
binaries and get there are two tools

00:06:38,820 --> 00:06:43,890
that are written specifically for that

00:06:40,920 --> 00:06:45,930
purpose gian annex was written by Joey

00:06:43,890 --> 00:06:48,270
Hess who is a former Debian developer

00:06:45,930 --> 00:06:50,190
and getting LFS which was recently

00:06:48,270 --> 00:06:52,260
released for production use by github

00:06:50,190 --> 00:06:54,420
both of them attempt to solve this

00:06:52,260 --> 00:06:55,710
problem in slightly different ways feel

00:06:54,420 --> 00:06:57,150
free to research them if you look to get

00:06:55,710 --> 00:07:01,440
more into it we have other things to

00:06:57,150 --> 00:07:03,540
talk about now most of us I assume

00:07:01,440 --> 00:07:05,610
aren't committing binaries to get as a

00:07:03,540 --> 00:07:06,930
general rule at least after the first

00:07:05,610 --> 00:07:09,900
time that we do it we run into a

00:07:06,930 --> 00:07:12,060
situation like that but we do often wind

00:07:09,900 --> 00:07:14,730
up committing things that we shouldn't

00:07:12,060 --> 00:07:17,280
be like secrets for example a future

00:07:14,730 --> 00:07:20,430
adviser we use git to store secrets the

00:07:17,280 --> 00:07:22,500
difference is is that we are encrypting

00:07:20,430 --> 00:07:24,450
them first that tends to make it to

00:07:22,500 --> 00:07:26,940
sanitize the past security policy and

00:07:24,450 --> 00:07:28,410
things move on it's a better approach to

00:07:26,940 --> 00:07:30,690
store these things somewhere that they

00:07:28,410 --> 00:07:32,010
need to live in encrypted form because

00:07:30,690 --> 00:07:33,510
we're just going to copy up the

00:07:32,010 --> 00:07:35,880
credentials from some random developers

00:07:33,510 --> 00:07:38,010
laptop every time we need them is the

00:07:35,880 --> 00:07:41,570
second worst idea that I've heard of the

00:07:38,010 --> 00:07:44,940
first of course is get sub modules

00:07:41,570 --> 00:07:46,320
this isn't just a hypothetical case

00:07:44,940 --> 00:07:49,140
there have been a number of exploits

00:07:46,320 --> 00:07:51,300
that people have demonstrated by just

00:07:49,140 --> 00:07:54,180
searching github or Google code back

00:07:51,300 --> 00:07:56,310
when they cared about that for AMI keys

00:07:54,180 --> 00:07:59,130
private certificates all kinds of things

00:07:56,310 --> 00:08:00,750
and these are not theoretical situations

00:07:59,130 --> 00:08:02,700
you can spend thousands of dollars on an

00:08:00,750 --> 00:08:04,350
Amazon account in a ridiculously short

00:08:02,700 --> 00:08:05,910
period of time so I'd like to thank

00:08:04,350 --> 00:08:10,890
whoever it is that helped me make all

00:08:05,910 --> 00:08:13,980
those Bitcoin Minds work it was great so

00:08:10,890 --> 00:08:15,300
let's move on to another terrible idea

00:08:13,980 --> 00:08:18,710
and yet I don't even really know what to

00:08:15,300 --> 00:08:25,140
call this so we're gonna go with it

00:08:18,710 --> 00:08:26,340
there we are okay there's nothing in

00:08:25,140 --> 00:08:30,420
here right I want to create a git

00:08:26,340 --> 00:08:35,910
repository now there's been there's now

00:08:30,420 --> 00:08:37,200
a dot git repo here and if we take a

00:08:35,910 --> 00:08:39,210
look at the contents of a git repository

00:08:37,200 --> 00:08:41,220
these things are relatively to self

00:08:39,210 --> 00:08:42,660
descriptive there's very is a config

00:08:41,220 --> 00:08:44,070
file that lives in there there are

00:08:42,660 --> 00:08:46,560
various places a directory to store

00:08:44,070 --> 00:08:48,990
hooks you basically all of your objects

00:08:46,560 --> 00:08:52,440
in a git repository are stored on disk

00:08:48,990 --> 00:08:54,540
as files and it's awesome and it keeps

00:08:52,440 --> 00:08:58,410
track of these things but these are

00:08:54,540 --> 00:09:00,630
files on disk I like them I want to take

00:08:58,410 --> 00:09:08,460
care of them so I'm gonna add them to

00:09:00,630 --> 00:09:09,990
get you can just keep on going and down

00:09:08,460 --> 00:09:12,870
down and the funny thing is is this

00:09:09,990 --> 00:09:19,130
actually works it serves absolutely no

00:09:12,870 --> 00:09:21,480
purpose either way but it you can do it

00:09:19,130 --> 00:09:26,640
ok one more demo before we switch back

00:09:21,480 --> 00:09:28,530
to the slide deck here how often have

00:09:26,640 --> 00:09:30,360
you been doing something like this you

00:09:28,530 --> 00:09:31,860
want to run a git command but then you

00:09:30,360 --> 00:09:34,530
have to tab over to something else maybe

00:09:31,860 --> 00:09:36,480
to copy a string like a git clone

00:09:34,530 --> 00:09:40,100
argument and then you come back and you

00:09:36,480 --> 00:09:40,100
don't paying quite enough attention and

00:09:40,160 --> 00:09:46,710
you try and run git git status and it

00:09:43,020 --> 00:09:48,950
doesn't work well there are ways to fix

00:09:46,710 --> 00:09:48,950
that

00:09:53,500 --> 00:10:04,910
now with that simple one-liner it fits

00:09:56,390 --> 00:10:15,470
in a tweet ah and it works in fact you

00:10:04,910 --> 00:10:19,670
can take it way too far it's Turtles all

00:10:15,470 --> 00:10:21,260
the way down I firmly believe that

00:10:19,670 --> 00:10:23,330
something very similar to that script

00:10:21,260 --> 00:10:32,750
could be used to make docker docker

00:10:23,330 --> 00:10:35,720
docker a reality three slides give you a

00:10:32,750 --> 00:10:37,790
minute yeah so for those who are aware

00:10:35,720 --> 00:10:39,980
git does have its own alias support so

00:10:37,790 --> 00:10:42,380
instead of get status typing that out

00:10:39,980 --> 00:10:45,530
you can create a git alias and write get

00:10:42,380 --> 00:10:48,170
st instead and it works but it always

00:10:45,530 --> 00:10:50,270
tends to start with the word git which

00:10:48,170 --> 00:10:51,740
doesn't always work if you want to get a

00:10:50,270 --> 00:10:54,440
little bit further down the road than

00:10:51,740 --> 00:10:57,050
that you can back out into the shell

00:10:54,440 --> 00:11:01,160
itself and do something like this in

00:10:57,050 --> 00:11:02,980
your bash or as SH config now why in the

00:11:01,160 --> 00:11:06,190
world would I do something like this

00:11:02,980 --> 00:11:06,190
good question

00:11:19,529 --> 00:11:30,519
comedy's seen one of those in your ad

00:11:21,459 --> 00:11:32,230
your in your commit messages I would

00:11:30,519 --> 00:11:34,390
like to take this opportunity to point

00:11:32,230 --> 00:11:38,700
out that you invited me to speak here

00:11:34,390 --> 00:11:38,700
this wasn't me forcing myself on you

00:11:41,070 --> 00:11:44,200
okay

00:11:42,250 --> 00:11:46,029
I feel like this is a line that could

00:11:44,200 --> 00:11:47,560
really be used on the get marketing page

00:11:46,029 --> 00:11:50,320
they can have this I'm licensing it

00:11:47,560 --> 00:11:52,420
under Creative Commons as a slogan but

00:11:50,320 --> 00:11:53,860
we've all heard about the rebasing

00:11:52,420 --> 00:11:55,450
master and then pushing it in other

00:11:53,860 --> 00:11:57,700
words what you've just done is change

00:11:55,450 --> 00:11:59,500
history so everyone who's doing commits

00:11:57,700 --> 00:12:02,019
aren't committing against what they

00:11:59,500 --> 00:12:04,750
thought that they were so it's awesome

00:12:02,019 --> 00:12:07,089
in English if you have a group of whales

00:12:04,750 --> 00:12:09,279
it's called a pod if you have a group of

00:12:07,089 --> 00:12:10,930
crows it's called a murder if you have a

00:12:09,279 --> 00:12:13,870
group of developers it's called a merge

00:12:10,930 --> 00:12:15,940
conflict that's where this comes from

00:12:13,870 --> 00:12:18,540
I don't have time for that try this it's

00:12:15,940 --> 00:12:18,540
a lot simpler

00:12:20,630 --> 00:12:25,440
this is the joy of working in operations

00:12:23,190 --> 00:12:30,240
sometimes we get to regress into being

00:12:25,440 --> 00:12:33,120
the department of dough so we've

00:12:30,240 --> 00:12:35,660
demonstrated so far that git is really

00:12:33,120 --> 00:12:39,030
really good at making us feel stupid

00:12:35,660 --> 00:12:41,970
let's help get make us feel a little bit

00:12:39,030 --> 00:12:45,200
smarter for a minute for example how

00:12:41,970 --> 00:12:45,200
often have you done something like this

00:12:50,810 --> 00:12:55,590
where you wind up typoing the response

00:12:53,640 --> 00:12:58,770
and it tells you did you mean status oh

00:12:55,590 --> 00:13:00,660
you think there's a command that you can

00:12:58,770 --> 00:13:03,900
run and I will put this up on a slide in

00:13:00,660 --> 00:13:11,010
a minute or two here and take you

00:13:03,900 --> 00:13:12,270
through it so once you run that once you

00:13:11,010 --> 00:13:13,800
want to set in the auto correct and I'll

00:13:12,270 --> 00:13:17,250
go through exactly what that does you

00:13:13,800 --> 00:13:18,870
can run this it tells you how long it's

00:13:17,250 --> 00:13:21,840
going to think this is what you're

00:13:18,870 --> 00:13:23,580
trying to do but I'm gonna give you

00:13:21,840 --> 00:13:34,800
enough time to control see out of it if

00:13:23,580 --> 00:13:36,630
I'm about to do something disastrous now

00:13:34,800 --> 00:13:38,340
just a few things about this first off

00:13:36,630 --> 00:13:40,380
with config there are three places it

00:13:38,340 --> 00:13:43,200
can store stuff one is in the system

00:13:40,380 --> 00:13:45,240
level and Etsy get config the second is

00:13:43,200 --> 00:13:47,100
in by default is in the repository

00:13:45,240 --> 00:13:49,230
itself if you don't give it a flag and

00:13:47,100 --> 00:13:51,180
the third where you put in global it's

00:13:49,230 --> 00:13:53,040
in the git can in the dot git config

00:13:51,180 --> 00:13:55,650
file in your home directory so this

00:13:53,040 --> 00:13:58,410
would now apply to every repository here

00:13:55,650 --> 00:13:59,850
and this is awesome it winds up helping

00:13:58,410 --> 00:14:02,010
with the Oh with the autocorrect the

00:13:59,850 --> 00:14:04,860
number eight is tenths of a second it

00:14:02,010 --> 00:14:06,900
will wait you view that as the pause of

00:14:04,860 --> 00:14:09,510
you screwed up typing something so now

00:14:06,900 --> 00:14:12,390
you have to sit there and spin and this

00:14:09,510 --> 00:14:15,540
is great to a point but it doesn't work

00:14:12,390 --> 00:14:17,190
on everything for example it only a few

00:14:15,540 --> 00:14:18,930
autocorrect and autocomplete if there's

00:14:17,190 --> 00:14:21,330
a single unambiguous thing that it

00:14:18,930 --> 00:14:23,250
thinks you are if I do get C it's not

00:14:21,330 --> 00:14:25,290
gonna work do I mean get commit do I

00:14:23,250 --> 00:14:27,410
mean get cloned do I mean get something

00:14:25,290 --> 00:14:27,410
else

00:14:36,300 --> 00:14:47,110
okay how many times you seen this one so

00:14:45,070 --> 00:14:50,410
you're in a repository you add a remote

00:14:47,110 --> 00:14:52,720
and then you get push right and it

00:14:50,410 --> 00:14:56,530
always drops this back and it pisses you

00:14:52,720 --> 00:15:05,020
off to the point you're just ah and

00:14:56,530 --> 00:15:13,420
then it works and it's not just get

00:15:05,020 --> 00:15:15,280
specific this started life as basically

00:15:13,420 --> 00:15:17,530
a groaning a pseudo on the command you

00:15:15,280 --> 00:15:20,260
just ran now this is the number one

00:15:17,530 --> 00:15:22,950
result on Google if you search for the

00:15:20,260 --> 00:15:25,270
term the

00:15:22,950 --> 00:15:36,100
more than anything they've done

00:15:25,270 --> 00:15:38,890
technically that is impressive so humor

00:15:36,100 --> 00:15:40,780
aside I do have three legitimately

00:15:38,890 --> 00:15:43,240
useful tools that I want to present that

00:15:40,780 --> 00:15:46,960
I hear and they tend to play very nicely

00:15:43,240 --> 00:15:48,940
with each other so who here tends to

00:15:46,960 --> 00:15:50,920
perceive management as running around

00:15:48,940 --> 00:15:54,700
like a moderately intelligent squirrel

00:15:50,920 --> 00:15:56,050
looking for something halfway shiny no I

00:15:54,700 --> 00:15:57,520
am management now which is kind of

00:15:56,050 --> 00:16:00,520
horrifying they gave me a team but yeah

00:15:57,520 --> 00:16:03,100
I tend to agree with this this wound up

00:16:00,520 --> 00:16:05,500
happening at my current job there was a

00:16:03,100 --> 00:16:08,050
monitor next to my desk that used to

00:16:05,500 --> 00:16:10,330
display some some stats the monitoring

00:16:08,050 --> 00:16:12,580
system was let's be gentle and say in a

00:16:10,330 --> 00:16:14,200
state of flux at this time so it would

00:16:12,580 --> 00:16:16,660
we really didn't bear any relation to

00:16:14,200 --> 00:16:19,390
reality however sometimes giving people

00:16:16,660 --> 00:16:24,550
something shiny to look at is a better

00:16:19,390 --> 00:16:29,260
approach toward things so there's a tool

00:16:24,550 --> 00:16:32,050
I wanted to talk about here I'm running

00:16:29,260 --> 00:16:33,850
this incidentally in the in the report

00:16:32,050 --> 00:16:37,960
of repository for salt stack that exists

00:16:33,850 --> 00:16:42,840
publicly it's a tool called gorse if you

00:16:37,960 --> 00:16:42,840
run it what it does there we are

00:16:44,070 --> 00:16:51,339
there we are there sorry the lineup

00:16:50,019 --> 00:16:54,010
doesn't quite work the way I hope that

00:16:51,339 --> 00:16:56,620
would but at this point what you have

00:16:54,010 --> 00:16:58,630
what you'll see here is it replays

00:16:56,620 --> 00:17:00,910
commits it looks at the developer who's

00:16:58,630 --> 00:17:03,370
working on things and the changes they

00:17:00,910 --> 00:17:05,559
make to files over time you can throw it

00:17:03,370 --> 00:17:07,179
in a loop and I just left this running

00:17:05,559 --> 00:17:09,010
on the desk next to me to the point

00:17:07,179 --> 00:17:11,429
where once we fixed the monitoring

00:17:09,010 --> 00:17:14,439
system people came up to me and actually

00:17:11,429 --> 00:17:16,030
complained that we weren't they didn't

00:17:14,439 --> 00:17:18,250
have this showing running anymore and

00:17:16,030 --> 00:17:20,439
now we have a second monitor that just

00:17:18,250 --> 00:17:23,559
shows on a loop the entire history of

00:17:20,439 --> 00:17:25,540
our monolithic code repository it's kind

00:17:23,559 --> 00:17:26,799
of an interesting approach whenever you

00:17:25,540 --> 00:17:27,939
need something in a hurry like ten

00:17:26,799 --> 00:17:40,929
minutes I need something fun to

00:17:27,939 --> 00:17:42,940
visualize there you go so audience

00:17:40,929 --> 00:17:43,600
participation time let's start with a

00:17:42,940 --> 00:17:45,790
poll here

00:17:43,600 --> 00:17:48,429
who cares about more than one git

00:17:45,790 --> 00:17:49,990
repository in their lives yeah the only

00:17:48,429 --> 00:17:54,240
people whose hands I expect not to see

00:17:49,990 --> 00:17:56,650
up or people who work at Facebook and

00:17:54,240 --> 00:17:58,809
the problem with doing this is that when

00:17:56,650 --> 00:18:01,570
you get on a plane like on a trip to

00:17:58,809 --> 00:18:04,090
Israel for example and you realize you

00:18:01,570 --> 00:18:06,429
forgot to update the one repository you

00:18:04,090 --> 00:18:10,690
really really need the latest version of

00:18:06,429 --> 00:18:12,549
it sucks now Marc Atwood heads up the

00:18:10,690 --> 00:18:15,580
open-source projects or saw community

00:18:12,549 --> 00:18:19,120
who stuff over at HP and he tweeted this

00:18:15,580 --> 00:18:21,130
back in August and it works pretty well

00:18:19,120 --> 00:18:22,750
for this it's decent fix you what you're

00:18:21,130 --> 00:18:25,210
doing for those who aren't conversant in

00:18:22,750 --> 00:18:27,790
shell is you punch a fine command into a

00:18:25,210 --> 00:18:30,700
for loop and you tell it to find git

00:18:27,790 --> 00:18:32,830
repos from there you iterate over the

00:18:30,700 --> 00:18:35,049
results of that loop and you fetch the

00:18:32,830 --> 00:18:37,540
latest changes in every repositories

00:18:35,049 --> 00:18:39,669
parent and now half the audience is

00:18:37,540 --> 00:18:42,070
sleeping because they started tuning out

00:18:39,669 --> 00:18:44,620
when I talked about iterating and it's

00:18:42,070 --> 00:18:46,929
so this is really awesome except for the

00:18:44,620 --> 00:18:48,640
part where it's shitty so I'll run

00:18:46,929 --> 00:18:50,860
something like this once but every time

00:18:48,640 --> 00:18:54,280
I need to update my stuff I'm not gonna

00:18:50,860 --> 00:18:56,440
go through this so I to did back at him

00:18:54,280 --> 00:18:56,920
I took his stupid loop but instead of

00:18:56,440 --> 00:19:03,010
just running

00:18:56,920 --> 00:19:04,210
get fetch iran mr register instead and

00:19:03,010 --> 00:19:06,850
i'll get into a second and what that

00:19:04,210 --> 00:19:08,380
does and he responded back remember this

00:19:06,850 --> 00:19:10,150
is someone who has forgotten more about

00:19:08,380 --> 00:19:11,950
software than i've ever known

00:19:10,150 --> 00:19:14,650
and he said this is awesome thank you

00:19:11,950 --> 00:19:17,170
for the find and there's a lesson here

00:19:14,650 --> 00:19:18,850
in that we're always learning and no

00:19:17,170 --> 00:19:20,800
matter how what problem it is that we're

00:19:18,850 --> 00:19:22,930
solving and I feel like as people who

00:19:20,800 --> 00:19:25,930
are developmentally oriented we tend to

00:19:22,930 --> 00:19:29,020
forget this sometimes but everything

00:19:25,930 --> 00:19:32,650
that we do is very rarely a problem that

00:19:29,020 --> 00:19:34,930
is unique to our role managing multiple

00:19:32,650 --> 00:19:36,640
git repositories configuration

00:19:34,930 --> 00:19:38,530
management provisioning servers

00:19:36,640 --> 00:19:41,410
monitoring these are all problems that

00:19:38,530 --> 00:19:44,140
every company cares about so why do we

00:19:41,410 --> 00:19:45,850
insist on reinventing the wheel so if

00:19:44,140 --> 00:19:47,440
you run into a problem like this ask

00:19:45,850 --> 00:19:49,570
people okay

00:19:47,440 --> 00:19:51,700
cultural detour aside let's talk about

00:19:49,570 --> 00:19:53,050
my repos a bit this originally was

00:19:51,700 --> 00:19:56,440
started as a project called

00:19:53,050 --> 00:19:58,390
M R and then they renamed it to my repos

00:19:56,440 --> 00:19:59,710
to make it easier to Google for cuz as

00:19:58,390 --> 00:20:01,240
we know it's not allowed to have an

00:19:59,710 --> 00:20:03,820
open-source project that's easy to

00:20:01,240 --> 00:20:05,770
Google forever for whatever reason so

00:20:03,820 --> 00:20:07,150
it's great now that just what they've

00:20:05,770 --> 00:20:08,800
managed to do by renaming this is

00:20:07,150 --> 00:20:10,450
they've confused everyone they've taken

00:20:08,800 --> 00:20:12,640
the old computer science problem of

00:20:10,450 --> 00:20:16,090
naming things and made it worse good

00:20:12,640 --> 00:20:18,970
work but the way that it works is it's

00:20:16,090 --> 00:20:21,370
simple step one you run the Mr register

00:20:18,970 --> 00:20:23,650
command inside of a repository that you

00:20:21,370 --> 00:20:25,750
care about and you can automate it like

00:20:23,650 --> 00:20:27,430
I did with that loop or run it by hand

00:20:25,750 --> 00:20:29,200
it doesn't really matter that much

00:20:27,430 --> 00:20:31,720
because you've only got to run it once

00:20:29,200 --> 00:20:34,720
and what that command does is it other

00:20:31,720 --> 00:20:38,370
builds or app ends to a file called dot

00:20:34,720 --> 00:20:38,370
mr config in your home directory

00:20:38,700 --> 00:20:44,800
step two you then can run mr update and

00:20:42,640 --> 00:20:47,860
watch as it updates all of your

00:20:44,800 --> 00:20:50,370
repositories in series and I'll give a

00:20:47,860 --> 00:20:50,370
demo of that

00:20:57,530 --> 00:21:02,400
if I tell it Mr list it tells me right

00:21:00,300 --> 00:21:04,950
now it iterates through all of them I'm

00:21:02,400 --> 00:21:07,110
now tracking 24 repositories that I care

00:21:04,950 --> 00:21:08,580
about I promise I'm not gonna CD into

00:21:07,110 --> 00:21:10,290
each one of those and update them by

00:21:08,580 --> 00:21:15,000
hand so being able to automate this

00:21:10,290 --> 00:21:17,190
makes a lot of sense and the file is

00:21:15,000 --> 00:21:19,710
relatively straightforward note that

00:21:17,190 --> 00:21:22,160
this does not in fact wind up going

00:21:19,710 --> 00:21:25,680
through a list of thing that's annoying

00:21:22,160 --> 00:21:27,840
there note that this does not in fact

00:21:25,680 --> 00:21:30,300
wind up including all of those different

00:21:27,840 --> 00:21:32,460
repositories this is not a 20 this does

00:21:30,300 --> 00:21:34,890
not list all of those what it does do

00:21:32,460 --> 00:21:36,390
instead is up at the top it winds up

00:21:34,890 --> 00:21:39,000
doing it include is the third line

00:21:36,390 --> 00:21:40,410
fourth line down because I can wind up

00:21:39,000 --> 00:21:42,210
stuffing a bunch of things in other

00:21:40,410 --> 00:21:43,890
directories for example I can have one

00:21:42,210 --> 00:21:47,400
file that's just my work oriented

00:21:43,890 --> 00:21:49,110
repositories I can give it specific

00:21:47,400 --> 00:21:53,640
commands on what a check out looks like

00:21:49,110 --> 00:21:56,670
in each one of these and more

00:21:53,640 --> 00:21:57,990
interesting this isn't gonna work too

00:21:56,670 --> 00:21:59,640
well because the wireless here is kind

00:21:57,990 --> 00:22:01,470
of awesome you can tell it to run an

00:21:59,640 --> 00:22:08,580
update and it will now do all of these

00:22:01,470 --> 00:22:10,560
in series but that can be crappy it also

00:22:08,580 --> 00:22:12,330
takes J Flags just like makes that you

00:22:10,560 --> 00:22:14,640
can paralyze it now it'll do eight of

00:22:12,330 --> 00:22:16,680
them concurrently with the J eight up as

00:22:14,640 --> 00:22:19,980
it continues stepping through all of

00:22:16,680 --> 00:22:21,090
those I'm not gonna sit here and

00:22:19,980 --> 00:22:22,500
actually make you watch me update my

00:22:21,090 --> 00:22:24,830
stuff I can do that on my own time and

00:22:22,500 --> 00:22:24,830
not yours

00:22:29,070 --> 00:22:35,550
so just as an interesting side note it

00:22:32,760 --> 00:22:37,530
is not just supporting it it supports a

00:22:35,550 --> 00:22:39,120
number of other version control systems

00:22:37,530 --> 00:22:41,460
including some that I've never heard of

00:22:39,120 --> 00:22:44,970
the only notable one that is not on the

00:22:41,460 --> 00:22:47,190
list is perforce which nobody likes but

00:22:44,970 --> 00:22:49,260
Paul was walking around earlier today

00:22:47,190 --> 00:22:51,570
with a mug I swear it was just a troll

00:22:49,260 --> 00:22:53,520
me that says perforce on it so thanks

00:22:51,570 --> 00:22:55,550
for the spite but again patches are

00:22:53,520 --> 00:22:58,350
welcome

00:22:55,550 --> 00:23:00,150
you can also wind up limiting operations

00:22:58,350 --> 00:23:00,900
via directory structures it does not

00:23:00,150 --> 00:23:03,900
have an inbuilt

00:23:00,900 --> 00:23:09,840
sense of what a group of repositories

00:23:03,900 --> 00:23:13,920
are but as a for instance I've here in

00:23:09,840 --> 00:23:15,960
my home directory I obviously show 24 I

00:23:13,920 --> 00:23:19,500
go to the workspace that I use for my

00:23:15,960 --> 00:23:21,240
for work stuff run em our list again it

00:23:19,500 --> 00:23:25,290
only talks about the ones that are below

00:23:21,240 --> 00:23:27,480
this so I find that managing discrete

00:23:25,290 --> 00:23:29,580
groups of these things via directories

00:23:27,480 --> 00:23:31,050
or siblings into directories tends to be

00:23:29,580 --> 00:23:33,060
a relatively sane way of doing this at

00:23:31,050 --> 00:23:34,470
the moment last time I gave a talk that

00:23:33,060 --> 00:23:36,660
touched on this product someone

00:23:34,470 --> 00:23:38,190
suggested the idea of managing groups so

00:23:36,660 --> 00:23:39,330
we're now having a discussion around

00:23:38,190 --> 00:23:40,770
whether or not that's something we're

00:23:39,330 --> 00:23:42,990
going to support and if so what that

00:23:40,770 --> 00:23:44,280
looks like but that's sort of a minor

00:23:42,990 --> 00:23:50,250
feature request with all things

00:23:44,280 --> 00:23:52,500
considered so I the only reason I know

00:23:50,250 --> 00:23:54,150
about this tool is that a stodgy German

00:23:52,500 --> 00:23:55,950
friend of mine told me about this

00:23:54,150 --> 00:23:58,080
otherwise I would never have known that

00:23:55,950 --> 00:24:00,600
it existed and part of the next step is

00:23:58,080 --> 00:24:03,360
to pass it on it's like the inverse of

00:24:00,600 --> 00:24:04,920
Fight Club the first rule of docker is

00:24:03,360 --> 00:24:07,220
that you never shut the up about

00:24:04,920 --> 00:24:07,220
docker

00:24:07,730 --> 00:24:13,320
and he told me about this in conjunction

00:24:10,890 --> 00:24:15,750
with another tool that he had written

00:24:13,320 --> 00:24:17,789
when I give this talk internally in

00:24:15,750 --> 00:24:19,409
preparation for this someone in the

00:24:17,789 --> 00:24:20,880
front row chimed in hey that's a

00:24:19,409 --> 00:24:23,190
short-term corporate bond fund by

00:24:20,880 --> 00:24:24,120
Vanguard isn't it it's Wow I can tell I

00:24:23,190 --> 00:24:27,600
work in finance

00:24:24,120 --> 00:24:30,210
no but it's a version control system for

00:24:27,600 --> 00:24:32,940
your home directories another show of

00:24:30,210 --> 00:24:34,890
hands who is a global dot files

00:24:32,940 --> 00:24:37,830
repository where you stash things like

00:24:34,890 --> 00:24:40,139
your vim RC your SSH config ok I'm

00:24:37,830 --> 00:24:42,480
seeing a few scattered hands good it

00:24:40,139 --> 00:24:44,760
usually looks like this where this is

00:24:42,480 --> 00:24:46,889
Paul Irish one of the jQuery folks he's

00:24:44,760 --> 00:24:49,529
got his uh he's got his aliases some

00:24:46,889 --> 00:24:50,850
bash stuff some zsh config in there you

00:24:49,529 --> 00:24:53,549
just keep scrolling down on this you'll

00:24:50,850 --> 00:24:57,299
see his vim stuff and it looks a lot

00:24:53,549 --> 00:25:00,029
like this but it's crappy and the reason

00:24:57,299 --> 00:25:02,340
it's crappy is there are things on

00:25:00,029 --> 00:25:04,710
multiple machines that I don't always

00:25:02,340 --> 00:25:07,230
want first off there are things in my

00:25:04,710 --> 00:25:09,450
dot files I may not want on github but

00:25:07,230 --> 00:25:12,059
that doesn't mean I shouldn't share my

00:25:09,450 --> 00:25:13,500
vin config for example I also have

00:25:12,059 --> 00:25:15,389
things I have in my personal machine

00:25:13,500 --> 00:25:18,149
like my AWS credentials for my side

00:25:15,389 --> 00:25:20,630
projects that I really really really

00:25:18,149 --> 00:25:23,010
don't want livin on a corporate laptop

00:25:20,630 --> 00:25:24,330
and I know I know you do encrypt those

00:25:23,010 --> 00:25:25,590
credentials before stuffing them at a

00:25:24,330 --> 00:25:27,960
git we covered that like eight slides

00:25:25,590 --> 00:25:35,639
ago it's fine but I wanted to give an

00:25:27,960 --> 00:25:41,070
example of this this is where VC SH

00:25:35,639 --> 00:25:43,139
comes into play so what it does is it

00:25:41,070 --> 00:25:45,690
launches a sub shell when you run VC SH

00:25:43,139 --> 00:25:49,019
in the name of the repository now I'm

00:25:45,690 --> 00:25:53,039
working in vim it is tracking a my

00:25:49,019 --> 00:25:54,750
master branch and in fact there's even a

00:25:53,039 --> 00:25:58,110
diff pending at the moment and if I do a

00:25:54,750 --> 00:26:07,919
git status it will tell me that it did

00:25:58,110 --> 00:26:09,510
in fact modify my MRC but and it has a

00:26:07,919 --> 00:26:12,419
special it has I ever per server that I

00:26:09,510 --> 00:26:16,380
wind up out keeping all this stuff on so

00:26:12,419 --> 00:26:20,330
that's great same thing with ICS H

00:26:16,380 --> 00:26:20,330
directory same story

00:26:26,659 --> 00:26:30,539
if I take a look at my zsh file and I

00:26:29,639 --> 00:26:32,850
see SH config

00:26:30,539 --> 00:26:34,139
it winds up spitting out here just the

00:26:32,850 --> 00:26:36,299
files that are tracked by this

00:26:34,139 --> 00:26:38,940
repository and what the way this works

00:26:36,299 --> 00:26:41,940
under the hood is it winds up using a

00:26:38,940 --> 00:26:44,220
remote get route so that only the files

00:26:41,940 --> 00:26:46,590
in a directory that I care about as a

00:26:44,220 --> 00:26:53,159
part of that directory wind up getting

00:26:46,590 --> 00:26:55,409
tracked to do that though hey I'll tell

00:26:53,159 --> 00:26:58,500
you what the right place doesn't it I do

00:26:55,409 --> 00:27:00,240
echo the wild car splat into my git

00:26:58,500 --> 00:27:01,139
ignore and I add that to all of my

00:27:00,240 --> 00:27:03,240
repositories

00:27:01,139 --> 00:27:05,100
the idea being event for the things that

00:27:03,240 --> 00:27:07,740
I care about the first time I add the

00:27:05,100 --> 00:27:10,110
file I do have to use the dash F flag to

00:27:07,740 --> 00:27:11,789
get add but as a result this helps keep

00:27:10,110 --> 00:27:15,990
all of the files that I care about

00:27:11,789 --> 00:27:17,639
logically distinct I have some for my

00:27:15,990 --> 00:27:20,220
bin directory I have one for my git

00:27:17,639 --> 00:27:22,529
config mr obviously has something there

00:27:20,220 --> 00:27:24,000
my CSH config but I can break these out

00:27:22,529 --> 00:27:26,279
logically and I can pick and choose

00:27:24,000 --> 00:27:32,250
between them as far as which ones I want

00:27:26,279 --> 00:27:34,760
on a different system and the way that

00:27:32,250 --> 00:27:37,350
this winds up working under the hood is

00:27:34,760 --> 00:27:40,230
you have your a dot config directory

00:27:37,350 --> 00:27:43,320
which is a Debian ism you then wind up

00:27:40,230 --> 00:27:44,970
sim linking things into config D for

00:27:43,320 --> 00:27:47,130
things that you want on your local

00:27:44,970 --> 00:27:48,659
system if the sim link doesn't exist

00:27:47,130 --> 00:27:51,029
here your box never goes out and

00:27:48,659 --> 00:27:52,559
downloads it so if something winds up

00:27:51,029 --> 00:27:54,360
compromising your machine but doesn't

00:27:52,559 --> 00:27:56,880
have access to your keys it's not going

00:27:54,360 --> 00:27:59,250
to have access to those things the

00:27:56,880 --> 00:28:01,679
repositories themselves live under VCS H

00:27:59,250 --> 00:28:12,330
with repo dot d and when I'm running it

00:28:01,679 --> 00:28:14,460
that is what's being managed ok I have

00:28:12,330 --> 00:28:16,049
one last trick that I do want to show

00:28:14,460 --> 00:28:17,730
you it's been on the screen but people

00:28:16,049 --> 00:28:19,529
haven't really maybe noticed this yet

00:28:17,730 --> 00:28:20,880
it's one of the more useful things that

00:28:19,529 --> 00:28:22,860
I've come up with that I've encountered

00:28:20,880 --> 00:28:24,690
that I figured again while I'm up here

00:28:22,860 --> 00:28:26,809
talking about git I may as well pass it

00:28:24,690 --> 00:28:26,809
on

00:28:30,470 --> 00:28:35,220
if we take a look here note that it

00:28:33,810 --> 00:28:36,540
tells me that another time in a git

00:28:35,220 --> 00:28:38,910
repository it tells me that I'm on

00:28:36,540 --> 00:28:43,440
master and there's a one with a red dot

00:28:38,910 --> 00:28:55,620
next to it if I run a get status it

00:28:43,440 --> 00:28:55,890
tells me that there's a modified file ok

00:28:55,620 --> 00:29:01,140
so

00:28:55,890 --> 00:29:02,940
ready to be committed you know as you go

00:29:01,140 --> 00:29:04,430
through these Thea get the commit

00:29:02,940 --> 00:29:07,290
messages become less and less

00:29:04,430 --> 00:29:09,450
informative and more and more boring but

00:29:07,290 --> 00:29:13,910
that's fine now it noticed that it tells

00:29:09,450 --> 00:29:16,920
me here that I have a green check box

00:29:13,910 --> 00:29:18,870
everything's right but I am one commit

00:29:16,920 --> 00:29:24,270
behind my remote and if I do a git

00:29:18,870 --> 00:29:28,710
status it reflects that so now if I do a

00:29:24,270 --> 00:29:29,940
git push I'm back to having a normal

00:29:28,710 --> 00:29:32,430
wear tells me I'm on a branch and that

00:29:29,940 --> 00:29:35,130
my local will checked out copy is kosher

00:29:32,430 --> 00:29:36,600
everything was where it needs to be the

00:29:35,130 --> 00:29:39,540
idea behind this is that I don't

00:29:36,600 --> 00:29:40,950
constantly have to run git status to

00:29:39,540 --> 00:29:44,730
know what's going on it's a subtle

00:29:40,950 --> 00:29:47,220
visual reminder that helps enforce good

00:29:44,730 --> 00:29:50,490
behavior and good patterns with respect

00:29:47,220 --> 00:29:52,080
to what it is I'm working on and letting

00:29:50,490 --> 00:29:54,120
me know in the event of a merge conflict

00:29:52,080 --> 00:29:55,560
if veterans are a big angry red X due to

00:29:54,120 --> 00:29:57,390
a mail order murder conviction I know

00:29:55,560 --> 00:29:59,400
something horrific has happened and I

00:29:57,390 --> 00:30:01,260
need to figure out what's going on it

00:29:59,400 --> 00:30:09,720
also ensures I'm on the branch I think

00:30:01,260 --> 00:30:11,430
I'm on so here's a link to those four

00:30:09,720 --> 00:30:14,370
tools that I wound up mentioning today

00:30:11,430 --> 00:30:18,750
I'm gonna leave that up well I answer

00:30:14,370 --> 00:30:20,250
any questions that people have I see a

00:30:18,750 --> 00:30:32,010
few does leave some with a microphone

00:30:20,250 --> 00:30:33,780
that we can there we go good work you

00:30:32,010 --> 00:30:41,730
just goes back to the comment you made

00:30:33,780 --> 00:30:43,530
about sub modules yes the VC Sh yes this

00:30:41,730 --> 00:30:46,190
is gonna be a weird question can I use

00:30:43,530 --> 00:30:50,100
that as a substitute for dealing with

00:30:46,190 --> 00:30:51,810
subsections of files sub modules sub

00:30:50,100 --> 00:30:54,510
sections of files no but as far as sub

00:30:51,810 --> 00:30:56,520
modules yes depending upon what you're

00:30:54,510 --> 00:30:58,380
doing by default it operates on your

00:30:56,520 --> 00:31:00,150
home directory whatever a dollar home is

00:30:58,380 --> 00:31:01,950
set to but it does take specific

00:31:00,150 --> 00:31:04,230
arguments in its config to get around

00:31:01,950 --> 00:31:06,360
that so when I you have these different

00:31:04,230 --> 00:31:08,190
subsets of files hmm not what you had

00:31:06,360 --> 00:31:09,900
with the dot files yes rock it out into

00:31:08,190 --> 00:31:12,150
sections exactly

00:31:09,900 --> 00:31:14,220
really no yes you absolutely can't do

00:31:12,150 --> 00:31:16,110
that that is that is its core use case

00:31:14,220 --> 00:31:17,790
originally this was started just for

00:31:16,110 --> 00:31:19,500
managing home directories but I am

00:31:17,790 --> 00:31:21,630
starting to see it used in applications

00:31:19,500 --> 00:31:23,130
beyond that where well I have this one

00:31:21,630 --> 00:31:24,450
file that sort of a share the one

00:31:23,130 --> 00:31:26,610
directory the shared resource and

00:31:24,450 --> 00:31:28,230
multiple teams need to put files into it

00:31:26,610 --> 00:31:30,180
how do I sane Lee do that

00:31:28,230 --> 00:31:31,860
there are arguably better options there

00:31:30,180 --> 00:31:33,630
as far as merge strategies go but there

00:31:31,860 --> 00:31:37,800
are edge cases where something like this

00:31:33,630 --> 00:31:48,710
makes a lot of sense thank you other

00:31:37,800 --> 00:31:48,710
questions okay well thank you very much

00:31:53,090 --> 00:31:57,260
I am in town until Tuesday if people

00:31:55,610 --> 00:31:58,850
want to talk about git or whiskey

00:31:57,260 --> 00:32:01,090
drinking at some point between now and

00:31:58,850 --> 00:32:01,090

YouTube URL: https://www.youtube.com/watch?v=1wbmCixso6E


