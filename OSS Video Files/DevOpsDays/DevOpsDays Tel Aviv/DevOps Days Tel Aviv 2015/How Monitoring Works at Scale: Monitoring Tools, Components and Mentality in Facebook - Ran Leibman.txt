Title: How Monitoring Works at Scale: Monitoring Tools, Components and Mentality in Facebook - Ran Leibman
Publication date: 2015-11-01
Playlist: DevOps Days Tel Aviv 2015
Description: 
	http://www.devopsdays.org/events/2015-telaviv/

With enough scale - everything is a problem, with Facebook scale everything requires extremely accurate design in order to meet the enormous production needs.

In this talk I'll try and cover how Facebook handles one of it's biggest challenges - monitoring a huge scale environment.

What tools & systems are at play
How we leverage our monitoring infra to solve production issues
How developers and devops share oncall rotation
How we treat monitoring as data
What we choose to be paged and what not
Compare Facebook infrastructure to other open source tools out there
About the speaker - Ran Leibman

My name is Ran and I'm a Production Engineer in the Facebook Tel-Aviv office. I'm working on multiple projects in world scale, including: Internet.org, Onavo, Messenger, and more...

In the past I've worked as:

DevOps Engineer at Watchdox
Linux system administrator at Altair-Semiconductor
System Admin at IDF
Captions: 
	00:00:10,780 --> 00:00:19,519
so my name is Ron is not wrong Lieberman

00:00:14,420 --> 00:00:22,400
it's run live man but that's a common

00:00:19,519 --> 00:00:24,949
mistake that's a current mistake because

00:00:22,400 --> 00:00:26,509
I don't know people autocomplete the art

00:00:24,949 --> 00:00:31,460
there's no are in my in my name but

00:00:26,509 --> 00:00:34,460
never mind that so yeah so my name is

00:00:31,460 --> 00:00:38,900
Ron Liebman and I walk today in facebook

00:00:34,460 --> 00:00:43,250
and I came from startup companies as you

00:00:38,900 --> 00:00:46,130
mentioned and i think that the like the

00:00:43,250 --> 00:00:48,650
thing that I I can bring to you for my

00:00:46,130 --> 00:00:51,740
experience is how things are different

00:00:48,650 --> 00:00:56,480
between Facebook and what we do in

00:00:51,740 --> 00:00:58,720
startups today so I hope you enjoyed so

00:00:56,480 --> 00:01:01,730
on the agenda I will talk about problems

00:00:58,720 --> 00:01:04,189
in from again from my perspective and

00:01:01,730 --> 00:01:08,659
how we deal with them in facebook today

00:01:04,189 --> 00:01:11,780
and how Facebook solve them and I will

00:01:08,659 --> 00:01:13,880
dive into each component that we have in

00:01:11,780 --> 00:01:17,690
order we in order to monitoring Facebook

00:01:13,880 --> 00:01:23,030
scale and show some Sam you to use cases

00:01:17,690 --> 00:01:29,299
and hopefully we leave time for Q&A so

00:01:23,030 --> 00:01:32,720
just as he as before we begin we we have

00:01:29,299 --> 00:01:35,240
to we we had a one day that we had or a

00:01:32,720 --> 00:01:38,000
couple of days that we had 1 billion

00:01:35,240 --> 00:01:41,570
active users daily active users and one

00:01:38,000 --> 00:01:45,560
and we are pretty stable on 1.4 billion

00:01:41,570 --> 00:01:48,409
active users which is a lot so edge

00:01:45,560 --> 00:01:51,440
cases are also a problem in facebook

00:01:48,409 --> 00:01:53,840
scale because you know one percent of

00:01:51,440 --> 00:01:56,420
your traffic is 10 million people it

00:01:53,840 --> 00:01:58,460
it's a lot so you need to think about

00:01:56,420 --> 00:01:59,869
every every edge case every chronic as

00:01:58,460 --> 00:02:04,960
did you think you're going to encounter

00:01:59,869 --> 00:02:08,179
it's going to be in high scale so

00:02:04,960 --> 00:02:09,800
problems that we have today is all tools

00:02:08,179 --> 00:02:12,260
that are not a custom that what we need

00:02:09,800 --> 00:02:13,790
to do so for example like years which i

00:02:12,260 --> 00:02:17,510
personally like

00:02:13,790 --> 00:02:21,349
I love Nagas I admit but it's only good

00:02:17,510 --> 00:02:24,439
for point in time monitoring it's really

00:02:21,349 --> 00:02:27,829
difficult to do what happened in the

00:02:24,439 --> 00:02:30,170
last two hours in the fraction of fifty

00:02:27,829 --> 00:02:31,700
percent with our api's it's really

00:02:30,170 --> 00:02:33,950
difficult to do that you can install

00:02:31,700 --> 00:02:37,010
plugins and intention but it's not that

00:02:33,950 --> 00:02:40,189
easy and it doesn't scale another

00:02:37,010 --> 00:02:42,650
problem that we have is Miss usage of

00:02:40,189 --> 00:02:45,349
tools creating a less from corn scripts

00:02:42,650 --> 00:02:48,439
it's not a really good idea think about

00:02:45,349 --> 00:02:50,299
what happens when you have a tier or a

00:02:48,439 --> 00:02:54,919
cluster or a data center that you want

00:02:50,299 --> 00:02:58,159
to shut down for maintenance you go on

00:02:54,919 --> 00:03:01,010
and you stop grown do you go ahead an

00:02:58,159 --> 00:03:02,989
ssh into each machine and comment out or

00:03:01,010 --> 00:03:05,810
comment it out in chef for this specific

00:03:02,989 --> 00:03:09,079
cluster I don't know not a really good

00:03:05,810 --> 00:03:11,269
use case and also if you see for in this

00:03:09,079 --> 00:03:13,069
example it's really hard to know if

00:03:11,269 --> 00:03:15,109
something is wrong in the middle of the

00:03:13,069 --> 00:03:17,450
script you need to check each bike to

00:03:15,109 --> 00:03:21,079
see if something failed not the best

00:03:17,450 --> 00:03:24,379
case another point that we have today is

00:03:21,079 --> 00:03:27,169
uh we are not treating metrics as

00:03:24,379 --> 00:03:30,799
first-class citizen when what I mean by

00:03:27,169 --> 00:03:32,180
that is that today when we develop you

00:03:30,799 --> 00:03:34,400
know a lot of there are a lot of people

00:03:32,180 --> 00:03:35,989
here from startups companies and when

00:03:34,400 --> 00:03:38,180
you studied your startup you thought

00:03:35,989 --> 00:03:40,549
about okay i have this application that

00:03:38,180 --> 00:03:43,340
i need to store and i want to query it

00:03:40,549 --> 00:03:45,169
in a specific way and store it in a

00:03:43,340 --> 00:03:48,260
specific way with a specific engine and

00:03:45,169 --> 00:03:51,470
you really thought about that and as you

00:03:48,260 --> 00:03:54,079
go on and monitoring came as a need you

00:03:51,470 --> 00:03:56,569
probably didn't think about okay how

00:03:54,079 --> 00:03:58,760
would I store my metrics what kind of

00:03:56,569 --> 00:04:01,819
metrics do I have is that numbers is it

00:03:58,760 --> 00:04:05,209
logs is something else so this is

00:04:01,819 --> 00:04:08,359
another problem and I think in my in my

00:04:05,209 --> 00:04:12,319
opinion the worst problem is the ops

00:04:08,359 --> 00:04:15,079
ownership monitoring your application is

00:04:12,319 --> 00:04:17,509
not the ownership it does not suppose to

00:04:15,079 --> 00:04:20,560
be owned by the ops teams developers

00:04:17,509 --> 00:04:25,130
should have incentive to monitor their

00:04:20,560 --> 00:04:26,930
application I think that as a developer

00:04:25,130 --> 00:04:27,590
if you write code and you push it to

00:04:26,930 --> 00:04:29,990
production

00:04:27,590 --> 00:04:32,960
and you don't get that feedback of your

00:04:29,990 --> 00:04:35,780
impact of your code that you've done you

00:04:32,960 --> 00:04:38,120
wrote some code you it took maybe a week

00:04:35,780 --> 00:04:40,790
maybe a month maybe a year and you push

00:04:38,120 --> 00:04:42,320
it to production and and that's it and

00:04:40,790 --> 00:04:45,290
you forget about it and you move on to

00:04:42,320 --> 00:04:47,240
the next task and so you feel kind of

00:04:45,290 --> 00:04:49,130
like a state machine with with no state

00:04:47,240 --> 00:04:51,290
like a stateless machine when you always

00:04:49,130 --> 00:04:57,889
write encoding you don't get feedback

00:04:51,290 --> 00:05:01,520
off from your work yeah so I would like

00:04:57,889 --> 00:05:03,680
to talk about our infrastructure and how

00:05:01,520 --> 00:05:07,700
we use monitoring and try to touch these

00:05:03,680 --> 00:05:10,250
points so what you see here it's a bunch

00:05:07,700 --> 00:05:12,590
of names which are meaningless to you so

00:05:10,250 --> 00:05:16,580
I'll try to give some context so the

00:05:12,590 --> 00:05:18,740
orange or yellowish squares are where we

00:05:16,580 --> 00:05:23,210
store mode of most of our alerts or

00:05:18,740 --> 00:05:25,430
counters or logs are another system that

00:05:23,210 --> 00:05:31,010
are in place but because of time I

00:05:25,430 --> 00:05:35,139
didn't put everything in the red squares

00:05:31,010 --> 00:05:40,160
are a component that react on alert or

00:05:35,139 --> 00:05:43,310
create metrics or create alerts the blue

00:05:40,160 --> 00:05:45,200
one at the top left is the you is that

00:05:43,310 --> 00:05:47,750
we have and the green one is the

00:05:45,200 --> 00:05:50,120
application itself which we want to

00:05:47,750 --> 00:05:53,810
actually monitor so let's start by

00:05:50,120 --> 00:05:57,919
talking about metrics about ods so

00:05:53,810 --> 00:06:00,950
audience is a operational data store its

00:05:57,919 --> 00:06:03,169
sole purpose is to store counters it's

00:06:00,950 --> 00:06:06,020
only only purpose one couldn't think

00:06:03,169 --> 00:06:09,729
about something similar like in flux DB

00:06:06,020 --> 00:06:15,349
or maybe open TS DB or a graphite sorry

00:06:09,729 --> 00:06:18,320
I apologize so in facebook we have for

00:06:15,349 --> 00:06:20,840
each entity in our infrastructure which

00:06:18,320 --> 00:06:23,539
could be the data center itself the

00:06:20,840 --> 00:06:26,030
cluster the dirac where the physical

00:06:23,539 --> 00:06:28,700
server is located at port in a switch

00:06:26,030 --> 00:06:30,770
and application everything has an entity

00:06:28,700 --> 00:06:32,840
and for each entity you can store key

00:06:30,770 --> 00:06:35,330
value pairs of the counter that you want

00:06:32,840 --> 00:06:38,150
to monitor and its value which will be a

00:06:35,330 --> 00:06:41,310
numerical one so think about it that you

00:06:38,150 --> 00:06:48,090
can have counters for poles in a switch

00:06:41,310 --> 00:06:49,860
or very exotic entities in my day to day

00:06:48,090 --> 00:06:53,310
use as a production engineering facebook

00:06:49,860 --> 00:06:56,160
most of the time I am looking at data

00:06:53,310 --> 00:07:00,080
which is relevant in current like form

00:06:56,160 --> 00:07:02,820
the last 24 hours and because of that we

00:07:00,080 --> 00:07:05,160
we store most of our relevant data in

00:07:02,820 --> 00:07:09,000
memory and all the other data we store

00:07:05,160 --> 00:07:13,350
in HBase on on disks and not in memory

00:07:09,000 --> 00:07:17,160
in order to gain speed so how do we add

00:07:13,350 --> 00:07:19,380
data so we can you can add data from any

00:07:17,160 --> 00:07:22,550
way you'd like you there is an API for

00:07:19,380 --> 00:07:26,550
every imaginable language out there but

00:07:22,550 --> 00:07:29,640
what we try to do is that each service

00:07:26,550 --> 00:07:32,460
HD service own inside Facebook can

00:07:29,640 --> 00:07:35,850
implement a very simple class or object

00:07:32,460 --> 00:07:39,360
depending on the language and it can

00:07:35,850 --> 00:07:40,980
export these metrics via some kind of an

00:07:39,360 --> 00:07:44,280
endpoint which we call FB three or three

00:07:40,980 --> 00:07:47,220
counters and what that gives us is the

00:07:44,280 --> 00:07:49,530
opportunity to give the developers a way

00:07:47,220 --> 00:07:51,780
to export the counters but not

00:07:49,530 --> 00:07:56,880
necessarily monitor them so later on we

00:07:51,780 --> 00:08:00,450
can decide what we want to monitor on so

00:07:56,880 --> 00:08:02,430
eventually as time goes by developers

00:08:00,450 --> 00:08:04,500
and production engineers are standing to

00:08:02,430 --> 00:08:07,590
creating metrics and eventually this

00:08:04,500 --> 00:08:10,590
becomes a lot of data sometimes too much

00:08:07,590 --> 00:08:14,550
and what we do in order to fix that is

00:08:10,590 --> 00:08:17,790
with the retention so just to give you a

00:08:14,550 --> 00:08:20,070
bit of context so for example after two

00:08:17,790 --> 00:08:23,270
weeks the following two weeks will be a

00:08:20,070 --> 00:08:27,690
one minute granularity for each counter

00:08:23,270 --> 00:08:29,730
so if you store just any other metric it

00:08:27,690 --> 00:08:32,070
will be at the average of that metric

00:08:29,730 --> 00:08:35,520
and if it's an aggregated one for

00:08:32,070 --> 00:08:39,270
example / central 99 or I don't know

00:08:35,520 --> 00:08:42,270
main max top top n it will be the same

00:08:39,270 --> 00:08:44,280
function again but this is really sad

00:08:42,270 --> 00:08:46,200
because we want to have this data

00:08:44,280 --> 00:08:50,490
eventually I mean we are monitoring but

00:08:46,200 --> 00:08:54,870
we are logging it so we do when when we

00:08:50,490 --> 00:08:55,560
when we need to keep a specific behavior

00:08:54,870 --> 00:08:59,520
of the

00:08:55,560 --> 00:09:00,990
we are doing an aggregate of it so for

00:08:59,520 --> 00:09:03,300
example if you want to if you have a

00:09:00,990 --> 00:09:07,200
really important KPI or or a metric that

00:09:03,300 --> 00:09:10,740
you want to store you can do an

00:09:07,200 --> 00:09:12,480
aggregation of the p 99 or p 90 or the

00:09:10,740 --> 00:09:16,080
maximum of it or whatever you feel like

00:09:12,480 --> 00:09:19,820
and do an aggregation with the operation

00:09:16,080 --> 00:09:22,980
by cluster by the data center by the

00:09:19,820 --> 00:09:26,940
costume but something that you want as a

00:09:22,980 --> 00:09:29,940
developer as an aggregation as a

00:09:26,940 --> 00:09:31,650
trade-off if you want to have more

00:09:29,940 --> 00:09:34,220
granularity than one do what you are

00:09:31,650 --> 00:09:36,900
monitoring right now you can physically

00:09:34,220 --> 00:09:39,690
we have some kind of a FB three or three

00:09:36,900 --> 00:09:41,940
top applications you can just point into

00:09:39,690 --> 00:09:45,180
one server and debug it on the fly and

00:09:41,940 --> 00:09:47,550
have the granularity that the service is

00:09:45,180 --> 00:09:54,870
actually counting itself which is pretty

00:09:47,550 --> 00:09:56,670
nice okay so this is odious but

00:09:54,870 --> 00:09:57,930
eventually when something happened when

00:09:56,670 --> 00:10:00,060
you look at the graph and you see like a

00:09:57,930 --> 00:10:03,140
spike or you see an anomaly that looks

00:10:00,060 --> 00:10:05,990
strange to you you want to dive in and

00:10:03,140 --> 00:10:08,280
we do that by looking at logs we see

00:10:05,990 --> 00:10:13,650
application logs like access logs for

00:10:08,280 --> 00:10:17,520
genetics or tomcat log4j stuff or any

00:10:13,650 --> 00:10:19,230
other logging that you do and you want

00:10:17,520 --> 00:10:21,780
to get these data really really fast and

00:10:19,230 --> 00:10:24,690
you want the data to be relevant so a

00:10:21,780 --> 00:10:28,020
lot of systems today can show you data

00:10:24,690 --> 00:10:30,570
before like a couple of days ago or 1

00:10:28,020 --> 00:10:33,480
day ago or couple of hours ago which is

00:10:30,570 --> 00:10:37,050
also not too good so for that we

00:10:33,480 --> 00:10:41,040
introduced scuba so think about Cuba as

00:10:37,050 --> 00:10:44,760
an in-memory kilometer style data store

00:10:41,040 --> 00:10:48,660
with an SQL API and the thing about this

00:10:44,760 --> 00:10:50,100
is that it is in memory so all the data

00:10:48,660 --> 00:10:53,190
that you are logging from your

00:10:50,100 --> 00:10:55,860
application will go into in memory of

00:10:53,190 --> 00:10:58,890
one of these servers so you're probably

00:10:55,860 --> 00:11:00,360
thinking about yeah yeah okay he's like

00:10:58,890 --> 00:11:02,550
okay they first book they have a lot of

00:11:00,360 --> 00:11:08,030
servers no problem right you just go on

00:11:02,550 --> 00:11:12,080
and scale as much as you like but no we

00:11:08,030 --> 00:11:16,770
we have really strict policy on the size

00:11:12,080 --> 00:11:19,350
and how long you can keep it and in

00:11:16,770 --> 00:11:21,600
order to fix that we are using sampling

00:11:19,350 --> 00:11:25,350
from the application itself and the

00:11:21,600 --> 00:11:28,110
client themselves so if you are doing

00:11:25,350 --> 00:11:30,330
your sampling in a in an efficient

00:11:28,110 --> 00:11:32,940
manner and you keep the overall behavior

00:11:30,330 --> 00:11:35,840
or world behavior of your service you

00:11:32,940 --> 00:11:38,310
can find your trends along the way and

00:11:35,840 --> 00:11:42,930
and get the data that you want

00:11:38,310 --> 00:11:45,480
eventually so for example 1 del Valle

00:11:42,930 --> 00:11:47,670
that we can see from school pies I don't

00:11:45,480 --> 00:11:49,800
know the last thing we cannot see here

00:11:47,670 --> 00:11:53,700
really good but you can slice and dice

00:11:49,800 --> 00:11:55,770
the data as like any other SQL engine

00:11:53,700 --> 00:12:00,510
over there you can see here that this is

00:11:55,770 --> 00:12:02,460
a this is a week of a rig of metrics

00:12:00,510 --> 00:12:05,310
that are being created from the clients

00:12:02,460 --> 00:12:07,410
when they load facebook and you can see

00:12:05,310 --> 00:12:09,140
that when you look at week-over-week of

00:12:07,410 --> 00:12:12,030
your long as you can see easily that

00:12:09,140 --> 00:12:13,530
something has happened maybe it's a good

00:12:12,030 --> 00:12:15,690
thing maybe it's not a good thing but

00:12:13,530 --> 00:12:20,190
it's really visible to see that that

00:12:15,690 --> 00:12:22,200
something is wrong another I don't think

00:12:20,190 --> 00:12:25,140
I want to show is that this is for

00:12:22,200 --> 00:12:29,340
example the top 10 pages of Facebook for

00:12:25,140 --> 00:12:31,500
the last day and the thing about this is

00:12:29,340 --> 00:12:33,780
that i don't know if you can see this

00:12:31,500 --> 00:12:37,920
from here but it's 63 milliseconds to

00:12:33,780 --> 00:12:40,110
get this this graph even if you plot it

00:12:37,920 --> 00:12:42,300
on on a different time series or

00:12:40,110 --> 00:12:45,000
whatever or something else 63

00:12:42,300 --> 00:12:49,080
milliseconds is really really fast for

00:12:45,000 --> 00:12:51,660
current data today i am another way to

00:12:49,080 --> 00:12:55,200
look at your data is by geographical

00:12:51,660 --> 00:12:57,930
location so if you create your your log

00:12:55,200 --> 00:13:00,060
and you have the country code from where

00:12:57,930 --> 00:13:02,160
the service is running and from where

00:13:00,060 --> 00:13:04,290
the clients are coming you can know the

00:13:02,160 --> 00:13:08,640
geographical location and display it and

00:13:04,290 --> 00:13:12,960
over here you can see this is bugs

00:13:08,640 --> 00:13:16,260
reported about photos over the last day

00:13:12,960 --> 00:13:17,580
comparing to next week so in the red

00:13:16,260 --> 00:13:20,010
zones you can see that people are really

00:13:17,580 --> 00:13:21,110
really angry and I think we were angry

00:13:20,010 --> 00:13:23,810
as well

00:13:21,110 --> 00:13:24,950
you can see it correctly and in the US

00:13:23,810 --> 00:13:27,800
for example people are more satisfied

00:13:24,950 --> 00:13:30,260
and you can the thing here is that this

00:13:27,800 --> 00:13:32,510
is not like a stab to look at you can

00:13:30,260 --> 00:13:36,920
click on on a country and dive into that

00:13:32,510 --> 00:13:41,149
country and just group by every

00:13:36,920 --> 00:13:46,700
everything that you like so this is

00:13:41,149 --> 00:13:49,010
awesome so which one should i use so you

00:13:46,700 --> 00:13:53,450
should use both and it really depends on

00:13:49,010 --> 00:13:55,970
on what you want to use I I'm trying to

00:13:53,450 --> 00:13:59,180
think about this as if I want to know

00:13:55,970 --> 00:14:03,680
how much or how good the service is

00:13:59,180 --> 00:14:05,450
doing I would report it to ods and if I

00:14:03,680 --> 00:14:08,320
want to see what exactly is going on

00:14:05,450 --> 00:14:14,630
right now I would log it into scuba as a

00:14:08,320 --> 00:14:16,490
informative log so that was scuba now I

00:14:14,630 --> 00:14:19,190
want to try to talk a bit about the

00:14:16,490 --> 00:14:23,149
alarms themselves that we recreate so I

00:14:19,190 --> 00:14:26,149
think that everybody I'm absolutely sure

00:14:23,149 --> 00:14:30,230
that everybody in this in this house is

00:14:26,149 --> 00:14:32,899
has this idea of has this a scenario in

00:14:30,230 --> 00:14:34,010
you know you're coding you're really

00:14:32,899 --> 00:14:35,660
productive you're working on a

00:14:34,010 --> 00:14:38,060
production issue whatever and then

00:14:35,660 --> 00:14:40,970
somebody comes along and says oh my god

00:14:38,060 --> 00:14:44,029
fix the site everything is broken you

00:14:40,970 --> 00:14:45,290
know and all hell breaks loose and the

00:14:44,029 --> 00:14:48,820
first thing that you want to know is

00:14:45,290 --> 00:14:51,649
what is going on where is the service

00:14:48,820 --> 00:14:52,940
where's the service is located how do

00:14:51,649 --> 00:14:55,070
you came up to this conclusion that

00:14:52,940 --> 00:14:57,800
something is wrong and you need

00:14:55,070 --> 00:15:01,579
information and for that we create

00:14:57,800 --> 00:15:04,459
alarms so allowance as an object in the

00:15:01,579 --> 00:15:07,670
system is not pagerduty it's not an

00:15:04,459 --> 00:15:12,050
email it's not an IRC it's not a slack

00:15:07,670 --> 00:15:14,240
post it's just an event an event in

00:15:12,050 --> 00:15:18,829
stating that something has happened in

00:15:14,240 --> 00:15:21,110
the infrastructure and we try to make

00:15:18,829 --> 00:15:23,510
the alerts as much as much as

00:15:21,110 --> 00:15:26,149
informative as possible so for example

00:15:23,510 --> 00:15:28,610
you can see here that we have a land

00:15:26,149 --> 00:15:32,630
documentation in the alarm itself so you

00:15:28,610 --> 00:15:34,560
can say if this alarms went off you

00:15:32,630 --> 00:15:37,110
might suck it coding

00:15:34,560 --> 00:15:41,640
but you might done something really

00:15:37,110 --> 00:15:45,090
really bad and you should fix it so this

00:15:41,640 --> 00:15:47,760
is the alarm structure so how do we

00:15:45,090 --> 00:15:51,450
create alert so all of our

00:15:47,760 --> 00:15:53,550
configurations are I think large portion

00:15:51,450 --> 00:15:56,550
of our configuration our Python scripts

00:15:53,550 --> 00:15:58,290
that are compiled into Jason's in as

00:15:56,550 --> 00:16:01,350
other systems that called configurator

00:15:58,290 --> 00:16:05,250
if you heard of it so over here you can

00:16:01,350 --> 00:16:07,410
see that at the top over there we are

00:16:05,250 --> 00:16:11,040
taking the modification file of the chef

00:16:07,410 --> 00:16:14,190
from that Chef is writing to that file

00:16:11,040 --> 00:16:19,170
after each run and we are reporting that

00:16:14,190 --> 00:16:22,050
to audios and from the bottom we are

00:16:19,170 --> 00:16:24,710
creating a detector upon on this on this

00:16:22,050 --> 00:16:28,200
metric and we are saying take this

00:16:24,710 --> 00:16:31,070
metric and for each minute do the

00:16:28,200 --> 00:16:34,020
difference between the last minute so

00:16:31,070 --> 00:16:38,430
this is actually meaning that if chef

00:16:34,020 --> 00:16:41,130
didn't run for two hours for 120 checks

00:16:38,430 --> 00:16:44,490
then something is wrong and notice that

00:16:41,130 --> 00:16:46,770
it doesn't say who gets this alone or if

00:16:44,490 --> 00:16:48,690
Sean if somebody will get this or not it

00:16:46,770 --> 00:16:51,030
just means that it will be created so

00:16:48,690 --> 00:16:54,120
for example if i compare this to a

00:16:51,030 --> 00:16:56,100
nuggets check which will be look at look

00:16:54,120 --> 00:16:58,589
at the far right now if something has

00:16:56,100 --> 00:17:00,060
happened then send an alert and you

00:16:58,589 --> 00:17:01,710
cannot do this with nagios easily

00:17:00,060 --> 00:17:04,230
because you need to save the state of

00:17:01,710 --> 00:17:08,120
what was the previous round of the file

00:17:04,230 --> 00:17:11,280
and compare it so this is one example

00:17:08,120 --> 00:17:13,260
the other example is using FB three or

00:17:11,280 --> 00:17:19,500
three counters so as I mentioned before

00:17:13,260 --> 00:17:22,230
FB 33 is and a way to externalize your

00:17:19,500 --> 00:17:25,910
counters and what we do here is we take

00:17:22,230 --> 00:17:31,020
all of these summaries and all of the

00:17:25,910 --> 00:17:33,200
p50 of our service in a one-minute a

00:17:31,020 --> 00:17:35,790
granularity and we report this to audios

00:17:33,200 --> 00:17:40,290
and we create a detector really easily

00:17:35,790 --> 00:17:43,740
that we can say that if our percentage

00:17:40,290 --> 00:17:46,590
of the exceptions are greater than ten

00:17:43,740 --> 00:17:48,809
percent we can a alert

00:17:46,590 --> 00:17:51,000
to create an alert upon that and again

00:17:48,809 --> 00:17:52,980
this is this doesn't mean that somebody

00:17:51,000 --> 00:17:57,809
will get this ordered it might be

00:17:52,980 --> 00:18:00,990
overlooked so what I like here is that

00:17:57,809 --> 00:18:03,750
there is a really good d couple of how

00:18:00,990 --> 00:18:06,029
we create and how we store the the

00:18:03,750 --> 00:18:13,710
counters and how we generate alerts and

00:18:06,029 --> 00:18:15,390
act upon them another example is not for

00:18:13,710 --> 00:18:18,840
a specific house but something really

00:18:15,390 --> 00:18:22,370
like from a high level perspective so as

00:18:18,840 --> 00:18:25,169
a context we have in facebook a set of a

00:18:22,370 --> 00:18:27,510
set of machines that are not inside

00:18:25,169 --> 00:18:30,539
Facebook and monitoring Facebook

00:18:27,510 --> 00:18:34,200
externally you can think about pingdom

00:18:30,539 --> 00:18:36,210
on steroids that we manage and all of

00:18:34,200 --> 00:18:39,510
these holes are reporting the data into

00:18:36,210 --> 00:18:41,610
scuba and we can query and create a

00:18:39,510 --> 00:18:44,100
letter on that so for example here we

00:18:41,610 --> 00:18:45,960
are taking all of the hosts that we have

00:18:44,100 --> 00:18:49,620
externally and we are grouping and

00:18:45,960 --> 00:18:52,140
grouping them by the region and for each

00:18:49,620 --> 00:18:54,240
region we are taking we are applying an

00:18:52,140 --> 00:18:55,770
anomaly detection function and the

00:18:54,240 --> 00:18:58,620
anomaly detection function take the

00:18:55,770 --> 00:19:01,100
metric and transform it into a metric

00:18:58,620 --> 00:19:03,330
that we can that is some kind of a

00:19:01,100 --> 00:19:05,360
threshold some kind of a metric that

00:19:03,330 --> 00:19:09,870
says how much the service is behaving

00:19:05,360 --> 00:19:11,820
irregular irregularly and on that query

00:19:09,870 --> 00:19:15,659
we can we can do some checking so we

00:19:11,820 --> 00:19:18,750
check if it's below or above a specific

00:19:15,659 --> 00:19:22,020
metric we we are let upon this so notice

00:19:18,750 --> 00:19:24,600
that this is a threshold check but it's

00:19:22,020 --> 00:19:28,049
a trick on anomaly detection so it's

00:19:24,600 --> 00:19:31,590
pretty nice I don't think I want to show

00:19:28,049 --> 00:19:33,990
you is that there is the description of

00:19:31,590 --> 00:19:36,840
the alarm inside of where the alarms is

00:19:33,990 --> 00:19:38,820
generated so you can have the

00:19:36,840 --> 00:19:42,690
description and how to recover from this

00:19:38,820 --> 00:19:44,490
alarm and if there are any other uncles

00:19:42,690 --> 00:19:46,409
that are related maybe you should ping

00:19:44,490 --> 00:19:48,260
them and if you will get this alarm

00:19:46,409 --> 00:19:50,880
eventually to your phone or to your

00:19:48,260 --> 00:19:53,090
email or whatever you will have all the

00:19:50,880 --> 00:19:56,490
necessary information to do something

00:19:53,090 --> 00:19:59,580
this saves a lot of time and one other

00:19:56,490 --> 00:20:02,160
notice i want to say is that

00:19:59,580 --> 00:20:05,190
is Python code developers should not

00:20:02,160 --> 00:20:07,500
have any excuse about saying I don't

00:20:05,190 --> 00:20:09,720
know not use and I won't touch it this

00:20:07,500 --> 00:20:12,210
is Python code and if you cannot code

00:20:09,720 --> 00:20:20,270
Python code then maybe you should not be

00:20:12,210 --> 00:20:24,710
a developer so awesome we have we have

00:20:20,270 --> 00:20:24,710
counters we have logs and we have allows

00:20:24,770 --> 00:20:30,750
so what do we do now we don't

00:20:28,710 --> 00:20:34,470
necessarily want to get paged on them

00:20:30,750 --> 00:20:35,790
right maybe we can automate this I'm

00:20:34,470 --> 00:20:38,910
guessing that a lot of folks here are

00:20:35,790 --> 00:20:41,100
waking up at night getting paged and

00:20:38,910 --> 00:20:43,350
saying oh yeah I need to go as a setting

00:20:41,100 --> 00:20:47,100
to that server restarted take a look at

00:20:43,350 --> 00:20:50,160
the logs this space is liz is full where

00:20:47,100 --> 00:20:53,190
are the logs yada yada yada for that we

00:20:50,160 --> 00:20:56,130
have f bar f bar is Facebook auto

00:20:53,190 --> 00:20:58,920
remediation system and personally I

00:20:56,130 --> 00:21:01,620
suggest all of you that when you go back

00:20:58,920 --> 00:21:03,480
home try to think about how you can

00:21:01,620 --> 00:21:06,840
automate all of your stuff that you do

00:21:03,480 --> 00:21:09,390
day to day and the reason i do that i

00:21:06,840 --> 00:21:16,130
say that is because using fo we are

00:21:09,390 --> 00:21:21,300
saving a 136,000 human hours per day

00:21:16,130 --> 00:21:26,430
which is a lot even for facebook it's a

00:21:21,300 --> 00:21:29,310
lot and if you divided 443 rotation of

00:21:26,430 --> 00:21:33,690
Engineers a day it will be seventeen

00:21:29,310 --> 00:21:35,880
thousand engineers per day and if you

00:21:33,690 --> 00:21:38,160
think about it the next day those 17

00:21:35,880 --> 00:21:41,460
thousand engineers won't come to work so

00:21:38,160 --> 00:21:45,690
maybe you should double that number yeah

00:21:41,460 --> 00:21:47,970
so efforts is pretty cool so ever is in

00:21:45,690 --> 00:21:50,820
facebook we have api for absolutely

00:21:47,970 --> 00:21:53,610
everything we have api for monitoring we

00:21:50,820 --> 00:21:58,160
have api for controlling the a data

00:21:53,610 --> 00:22:03,330
center components the the switches the

00:21:58,160 --> 00:22:05,310
the cluster I offs that stays in to in

00:22:03,330 --> 00:22:07,380
the data center itself and replaces the

00:22:05,310 --> 00:22:09,510
disks and stuff like that and we have a

00:22:07,380 --> 00:22:12,720
PF all that and

00:22:09,510 --> 00:22:14,670
our what is what is effort job is to get

00:22:12,720 --> 00:22:19,230
all of these api's into one generic

00:22:14,670 --> 00:22:23,670
location and exported via a plug-in API

00:22:19,230 --> 00:22:26,550
which you can write and also you can do

00:22:23,670 --> 00:22:29,010
more difficult things and not only all

00:22:26,550 --> 00:22:31,860
the services down then restart you can

00:22:29,010 --> 00:22:34,080
do more complex scenarios so a good a

00:22:31,860 --> 00:22:36,360
good general that we done is Colonel

00:22:34,080 --> 00:22:38,550
upgrades so if you think about it

00:22:36,360 --> 00:22:40,740
colonel upgrades is it's a trivial task

00:22:38,550 --> 00:22:42,930
you go you install you restart boom

00:22:40,740 --> 00:22:45,870
you're done but another production

00:22:42,930 --> 00:22:47,310
system because you need to take down to

00:22:45,870 --> 00:22:49,800
drain the server to take all of the

00:22:47,310 --> 00:22:51,870
containers all of the services down you

00:22:49,800 --> 00:22:55,170
need to make sure you won't get page on

00:22:51,870 --> 00:22:58,230
this server then you need to ship the

00:22:55,170 --> 00:23:01,500
RPM to install it restart wait for the

00:22:58,230 --> 00:23:03,600
restart wait for the restart I wait for

00:23:01,500 --> 00:23:06,600
the restart maybe something is wrong

00:23:03,600 --> 00:23:10,080
okay so i'll go ahead and cure it and

00:23:06,600 --> 00:23:12,990
create an on-call 40 for the data center

00:23:10,080 --> 00:23:15,090
team so complex things like that could

00:23:12,990 --> 00:23:16,770
also be automated in f bar and i think

00:23:15,090 --> 00:23:20,190
that this is saving a lot of time for us

00:23:16,770 --> 00:23:24,720
as well so this is a can you guys see

00:23:20,190 --> 00:23:28,290
that yeah okay so this is again Python

00:23:24,720 --> 00:23:31,350
code not something too fancy but if you

00:23:28,290 --> 00:23:33,630
can see the remediate the remediate

00:23:31,350 --> 00:23:36,060
function you can see that this is the

00:23:33,630 --> 00:23:39,090
algorithm do you use when you wake up

00:23:36,060 --> 00:23:41,970
right you do okay I'll check the service

00:23:39,090 --> 00:23:44,930
if everything ok veggie duty off good

00:23:41,970 --> 00:23:47,640
night if not ok I'll try to restart it

00:23:44,930 --> 00:23:49,950
ok maybe it's really stuck in the server

00:23:47,640 --> 00:23:52,680
is not running so I'll escalate and I do

00:23:49,950 --> 00:23:54,930
something else if everything if we start

00:23:52,680 --> 00:23:59,970
walked maybe the service is back baby

00:23:54,930 --> 00:24:02,850
the service is not this piece of code

00:23:59,970 --> 00:24:04,860
can save all of you a lot of time if if

00:24:02,850 --> 00:24:06,390
you implement it right now if you open

00:24:04,860 --> 00:24:08,840
your laptop and you do that you will

00:24:06,390 --> 00:24:13,590
save yourself a lot of time to do that

00:24:08,840 --> 00:24:16,320
yeah so f bar is pretty cool so we

00:24:13,590 --> 00:24:21,600
automated we created alarms we have a

00:24:16,320 --> 00:24:23,080
LDS and scuba metrics and now we might

00:24:21,600 --> 00:24:28,720
need to get accident

00:24:23,080 --> 00:24:31,960
asian but should we monitor in and get

00:24:28,720 --> 00:24:35,169
notified about everything because the

00:24:31,960 --> 00:24:37,419
rationale here is that ok I if I cannot

00:24:35,169 --> 00:24:40,990
automate this this is a problem and I

00:24:37,419 --> 00:24:45,039
need to and I need to treat it right so

00:24:40,990 --> 00:24:47,409
no not everything there are a lot sort

00:24:45,039 --> 00:24:49,809
of not really that action number for you

00:24:47,409 --> 00:24:52,720
and you don't need to fix them right so

00:24:49,809 --> 00:24:56,710
if you have one server that dies out of

00:24:52,720 --> 00:24:58,889
thousands then or even up for from a 100

00:24:56,710 --> 00:25:04,720
service you don't really need to do that

00:24:58,889 --> 00:25:06,730
so alarmed that goes into your inbox

00:25:04,720 --> 00:25:09,370
into your pager into your whatever

00:25:06,730 --> 00:25:11,289
should be actionable around if you get

00:25:09,370 --> 00:25:13,029
an alert that you don't have something

00:25:11,289 --> 00:25:15,850
to do with that you should not get it

00:25:13,029 --> 00:25:20,320
ever this is a mistake please do not do

00:25:15,850 --> 00:25:22,539
that you will burn out your people and

00:25:20,320 --> 00:25:24,880
that should be impactful maybe an alert

00:25:22,539 --> 00:25:26,620
is actionable but you don't want to get

00:25:24,880 --> 00:25:28,809
paid on that because it's not that if

00:25:26,620 --> 00:25:30,850
it's not that important you can do it

00:25:28,809 --> 00:25:32,500
later or create an alert in a way that

00:25:30,850 --> 00:25:35,049
you won't notice it in the middle of the

00:25:32,500 --> 00:25:37,360
night so personally when I create an

00:25:35,049 --> 00:25:40,600
alert I think I ask myself the question

00:25:37,360 --> 00:25:43,510
is well first of all can I fix this if

00:25:40,600 --> 00:25:45,340
so then great if not let's automate this

00:25:43,510 --> 00:25:48,250
because I don't want to get paid on that

00:25:45,340 --> 00:25:53,710
and if I cannot automate this is dis

00:25:48,250 --> 00:25:55,149
actionable and of course should I wake

00:25:53,710 --> 00:25:59,409
somebody up in the middle of the night

00:25:55,149 --> 00:26:01,090
because of this as just as a personal

00:25:59,409 --> 00:26:03,700
story for me when I came to Facebook and

00:26:01,090 --> 00:26:06,909
I've been told that we are not getting

00:26:03,700 --> 00:26:12,370
paged on a single host failures and I

00:26:06,909 --> 00:26:14,230
was like yeah right but I mean if one

00:26:12,370 --> 00:26:16,720
host goes down it doesn't mean you need

00:26:14,230 --> 00:26:18,399
to treat it but I mean if you do you

00:26:16,720 --> 00:26:22,000
have another different problem in your

00:26:18,399 --> 00:26:23,740
organization and the way we fix that is

00:26:22,000 --> 00:26:25,990
we do create alerts but we are not

00:26:23,740 --> 00:26:28,779
getting a page of duty or a phone or an

00:26:25,990 --> 00:26:30,250
SMS we create task in our systems or if

00:26:28,779 --> 00:26:32,770
you have a slack channel create a

00:26:30,250 --> 00:26:34,770
slacker that the server is down please

00:26:32,770 --> 00:26:38,370
someone pick it up later when we have

00:26:34,770 --> 00:26:41,180
time so we do want to do something with

00:26:38,370 --> 00:26:45,660
that but not right now there is a way to

00:26:41,180 --> 00:26:47,400
to handle this kind of alerts and also

00:26:45,660 --> 00:26:50,910
creating a lot is not a difficult again

00:26:47,400 --> 00:26:52,740
Python code if you can create an object

00:26:50,910 --> 00:26:56,040
in Python you can create subscriptions

00:26:52,740 --> 00:27:01,590
that's that's pretty easy the nice thing

00:26:56,040 --> 00:27:04,380
here is that you can you can express

00:27:01,590 --> 00:27:06,600
exactly what kind of unless you want to

00:27:04,380 --> 00:27:11,700
be notified about I need a lot of tools

00:27:06,600 --> 00:27:14,790
today this is not that easy for example

00:27:11,700 --> 00:27:16,710
a nag you sir Nagas for example you need

00:27:14,790 --> 00:27:19,080
to understand the whole hierarchy of the

00:27:16,710 --> 00:27:21,510
object inheritance if you do that in

00:27:19,080 --> 00:27:24,180
zabbix you need to understand all of the

00:27:21,510 --> 00:27:26,430
rules that go by when you are creating a

00:27:24,180 --> 00:27:31,740
lot it's not that good experience for

00:27:26,430 --> 00:27:34,260
even foreign ops in my opinion again so

00:27:31,740 --> 00:27:36,420
i want you i want to ask this question

00:27:34,260 --> 00:27:38,760
is if you can raise your hand if you

00:27:36,420 --> 00:27:41,460
think you can write douglas code without

00:27:38,760 --> 00:27:44,730
any bugs in it make sure that it goes to

00:27:41,460 --> 00:27:47,690
production everything is good nobody

00:27:44,730 --> 00:27:51,510
yeah all right so this one is for you

00:27:47,690 --> 00:27:53,520
okay you cannot do that it's not humanly

00:27:51,510 --> 00:27:55,920
possible and we know we have bugs today

00:27:53,520 --> 00:27:59,370
we it's a part of the system and we

00:27:55,920 --> 00:28:02,570
should treat it as such so because of we

00:27:59,370 --> 00:28:06,030
know that we cannot do we cannot create

00:28:02,570 --> 00:28:08,880
code without bugs we probably cannot

00:28:06,030 --> 00:28:11,640
create alarms for everything that we

00:28:08,880 --> 00:28:14,760
want to so if we cannot create a limbs

00:28:11,640 --> 00:28:17,400
for everything that we want how do we do

00:28:14,760 --> 00:28:20,910
that how do we treat those problems and

00:28:17,400 --> 00:28:23,190
by that we use dashboard that morning is

00:28:20,910 --> 00:28:25,800
really really good tool to pick up on

00:28:23,190 --> 00:28:28,350
stuff that you don't even know existed

00:28:25,800 --> 00:28:32,640
and everybody has these problems today

00:28:28,350 --> 00:28:35,070
in their organization everybody so

00:28:32,640 --> 00:28:37,260
that's what are good for that to raise

00:28:35,070 --> 00:28:40,080
awareness for started you are not

00:28:37,260 --> 00:28:42,930
thinking about them it's good for making

00:28:40,080 --> 00:28:45,810
a case you know data winners wins

00:28:42,930 --> 00:28:47,430
arguments we say if you somebody's angry

00:28:45,810 --> 00:28:49,200
about something and you present

00:28:47,430 --> 00:28:51,900
dashboard and says look at this drop

00:28:49,200 --> 00:28:53,820
this is up and the other the

00:28:51,900 --> 00:28:56,280
other guy can cannot say anything about

00:28:53,820 --> 00:28:59,970
this right because this is under in

00:28:56,280 --> 00:29:04,740
front of the space so one of the tools

00:28:59,970 --> 00:29:07,320
that we use is cubism so this is look

00:29:04,740 --> 00:29:12,570
like something like really off but i'll

00:29:07,320 --> 00:29:15,920
try to explain so each row here is a web

00:29:12,570 --> 00:29:20,280
tier that we have in facebook and the

00:29:15,920 --> 00:29:23,790
x-axis is e is time and why is the

00:29:20,280 --> 00:29:27,180
metric itself did the counter but for

00:29:23,790 --> 00:29:30,500
you can see that for each row every time

00:29:27,180 --> 00:29:34,260
that the counter goes to the to the

00:29:30,500 --> 00:29:37,470
upper bound it got it got three rotated

00:29:34,260 --> 00:29:40,740
from the bottom but with a darker color

00:29:37,470 --> 00:29:42,510
so you can see that is this this working

00:29:40,740 --> 00:29:43,890
yet so you can see that over here in

00:29:42,510 --> 00:29:46,140
this part there's a lot of traffic

00:29:43,890 --> 00:29:48,270
probably daytime for real these servers

00:29:46,140 --> 00:29:52,730
are and you can see that over time data

00:29:48,270 --> 00:29:56,970
goes goes on and on and the color gets

00:29:52,730 --> 00:29:59,400
lighter during the night and if you can

00:29:56,970 --> 00:30:03,120
I think it's you can you can see it over

00:29:59,400 --> 00:30:04,940
here that there is a problem in all of

00:30:03,120 --> 00:30:08,070
these tears something has happened and

00:30:04,940 --> 00:30:10,470
its correlates with everything and alarm

00:30:08,070 --> 00:30:13,080
might not pick that because this is some

00:30:10,470 --> 00:30:16,650
anomaly that you don't thought about

00:30:13,080 --> 00:30:20,880
because we're humans so this is a really

00:30:16,650 --> 00:30:24,930
good way to to surface stuff that we

00:30:20,880 --> 00:30:29,040
didn't think about another look at

00:30:24,930 --> 00:30:31,110
cubism is that by look by geographical

00:30:29,040 --> 00:30:33,570
location so you can see that in the US

00:30:31,110 --> 00:30:35,970
there's a lot of traffic and in Asia

00:30:33,570 --> 00:30:40,560
there are less and in Europe there's

00:30:35,970 --> 00:30:42,210
like ish between them and you can see

00:30:40,560 --> 00:30:44,910
also the difference in the time zones

00:30:42,210 --> 00:30:46,740
right because us time in Europe type is

00:30:44,910 --> 00:30:50,040
not the same time so you won't get the

00:30:46,740 --> 00:30:51,630
same one traffic and also here you can

00:30:50,040 --> 00:30:53,640
see that something is wrong I think that

00:30:51,630 --> 00:30:55,530
everybody can see that there is

00:30:53,640 --> 00:30:58,080
something wrong with Europe there is

00:30:55,530 --> 00:30:59,140
there are some kind of a problem over

00:30:58,080 --> 00:31:01,780
here there's like a

00:30:59,140 --> 00:31:05,020
good job and then another one and then a

00:31:01,780 --> 00:31:07,420
traffic shift right so even if you're

00:31:05,020 --> 00:31:10,120
another PE a production engineer or the

00:31:07,420 --> 00:31:12,190
or or operational oriented you can

00:31:10,120 --> 00:31:15,150
clearly see that something is wrong in

00:31:12,190 --> 00:31:18,370
Europe and for example this is the

00:31:15,150 --> 00:31:25,840
traffic shift from one region in Europe

00:31:18,370 --> 00:31:27,750
to the other yeah another graph this

00:31:25,840 --> 00:31:30,580
this way if I want to illustrate is that

00:31:27,750 --> 00:31:32,800
when we report data to OTS this is an

00:31:30,580 --> 00:31:36,790
odious graph of a response time for

00:31:32,800 --> 00:31:39,520
specific service you can see that we can

00:31:36,790 --> 00:31:42,520
do aggregation and we can add counters

00:31:39,520 --> 00:31:45,610
and stuff in 20 years but you can do on

00:31:42,520 --> 00:31:48,700
the fly a mathematical equation on these

00:31:45,610 --> 00:31:50,710
data in time so even if you didn't think

00:31:48,700 --> 00:31:54,190
that oh I'll need this p99 of this

00:31:50,710 --> 00:31:55,830
service you can do that here and for

00:31:54,190 --> 00:31:58,570
example in this graph you can see that

00:31:55,830 --> 00:32:01,120
what is interesting is that the average

00:31:58,570 --> 00:32:04,900
is like really really high above the

00:32:01,120 --> 00:32:08,650
chart and the p50 is like very very

00:32:04,900 --> 00:32:11,590
stable and p 95 is below the average so

00:32:08,650 --> 00:32:13,930
this probably is like okay so p 95 is

00:32:11,590 --> 00:32:17,740
below the average then maybe something

00:32:13,930 --> 00:32:21,820
is wrong in the p 99 and one thing that

00:32:17,740 --> 00:32:25,030
i will do next is ok i will go ahead and

00:32:21,820 --> 00:32:27,880
take this pin 99 value and go into scuba

00:32:25,030 --> 00:32:30,460
and see what exactly is going on so this

00:32:27,880 --> 00:32:38,200
is like the flow of how i would like to

00:32:30,460 --> 00:32:39,430
trouble stuff in facebook so every time

00:32:38,200 --> 00:32:41,350
you look at the graph and you see

00:32:39,430 --> 00:32:43,060
something that something is wrong you

00:32:41,350 --> 00:32:45,340
always what like the first thing you do

00:32:43,060 --> 00:32:47,980
is you ask your peers did you just

00:32:45,340 --> 00:32:50,290
restart this service did you just do

00:32:47,980 --> 00:32:52,090
this code push this chef changes or

00:32:50,290 --> 00:32:54,580
whatever you always try to blame

00:32:52,090 --> 00:32:58,360
somebody maybe or maybe get information

00:32:54,580 --> 00:33:00,220
like okay is this really relevant we

00:32:58,360 --> 00:33:03,070
have a system that calls upstream

00:33:00,220 --> 00:33:06,580
operational stream which is very very

00:33:03,070 --> 00:33:09,820
nice think about it is that you can

00:33:06,580 --> 00:33:12,730
create events that are not really a

00:33:09,820 --> 00:33:15,840
failure but more of our ops related so

00:33:12,730 --> 00:33:18,610
a deployment of a service maintenance

00:33:15,840 --> 00:33:22,090
experiment experience experiment in

00:33:18,610 --> 00:33:25,299
Google all right they don't have

00:33:22,090 --> 00:33:28,419
experiment but maybe pushing your apk to

00:33:25,299 --> 00:33:33,190
more percentage in Google store Play

00:33:28,419 --> 00:33:35,100
Store and this could be automated via an

00:33:33,190 --> 00:33:38,590
API and you can create them

00:33:35,100 --> 00:33:41,110
automatically and then create annotation

00:33:38,590 --> 00:33:43,059
on dashboard to see what happens and if

00:33:41,110 --> 00:33:45,669
this was an actual browser I could hover

00:33:43,059 --> 00:33:47,500
on this line over there and see what

00:33:45,669 --> 00:33:48,790
actually happened and who created this

00:33:47,500 --> 00:33:55,799
alert and maybe get more information

00:33:48,790 --> 00:34:00,960
from them really useful so my Allen oh

00:33:55,799 --> 00:34:04,809
let's sum it up so one thing I want to

00:34:00,960 --> 00:34:07,630
do to deliver one messages treat your

00:34:04,809 --> 00:34:09,429
data wisely I think about how you want

00:34:07,630 --> 00:34:11,530
to store it and what you want to store

00:34:09,429 --> 00:34:13,570
maybe you should not store everything

00:34:11,530 --> 00:34:16,510
because you're not capable and if you do

00:34:13,570 --> 00:34:19,359
store as much as you can but think about

00:34:16,510 --> 00:34:21,820
what good storage engines will be good

00:34:19,359 --> 00:34:23,619
for your metrics and for your logs don't

00:34:21,820 --> 00:34:26,850
just default to the to the next best

00:34:23,619 --> 00:34:30,460
thing out there it might not suit you

00:34:26,850 --> 00:34:33,760
before you alert think about it think

00:34:30,460 --> 00:34:35,560
about is this maybe you can fix it in

00:34:33,760 --> 00:34:36,970
you don't need to fix the alert maybe

00:34:35,560 --> 00:34:38,560
the time that you create the alert will

00:34:36,970 --> 00:34:40,810
be the time that you need to fix the

00:34:38,560 --> 00:34:44,379
problem itself maybe you can automate

00:34:40,810 --> 00:34:46,389
this how can you do that is it

00:34:44,379 --> 00:34:47,830
actionable do you need to do some can

00:34:46,389 --> 00:34:49,960
you do something about that and if not

00:34:47,830 --> 00:34:53,429
how do you serve the problem in another

00:34:49,960 --> 00:34:56,080
manner a not with an SMS or pagerduty

00:34:53,429 --> 00:34:59,140
and eventually when you do decide to a

00:34:56,080 --> 00:35:05,050
to alert should you wake somebody up

00:34:59,140 --> 00:35:09,340
because you do that think about this so

00:35:05,050 --> 00:35:12,240
we are humans and we cannot figure out

00:35:09,340 --> 00:35:15,640
all possibilities we know that right now

00:35:12,240 --> 00:35:18,609
use dashboards in order to see beyond

00:35:15,640 --> 00:35:21,760
yourself and understand things that you

00:35:18,609 --> 00:35:24,349
didn't see before that and gain more

00:35:21,760 --> 00:35:26,960
insight from dashboards

00:35:24,349 --> 00:35:30,170
as I said data wins argument is really

00:35:26,960 --> 00:35:32,559
stuck in my head and the last thought I

00:35:30,170 --> 00:35:37,099
want to leave you guys with is

00:35:32,559 --> 00:35:39,979
monitoring is not an op shop we can fix

00:35:37,099 --> 00:35:42,680
this I think this is one of the reasons

00:35:39,979 --> 00:35:45,190
that we change form s Ariz or

00:35:42,680 --> 00:35:49,069
operational to production engineers

00:35:45,190 --> 00:35:52,160
because when you go to a dev ops team or

00:35:49,069 --> 00:35:54,400
an operation team as a developer you

00:35:52,160 --> 00:35:56,690
automatically assume you have this bias

00:35:54,400 --> 00:35:59,900
unconscious one or maybe conscious one

00:35:56,690 --> 00:36:01,309
that oh there are the operations they do

00:35:59,900 --> 00:36:03,349
this and I don't need to worry

00:36:01,309 --> 00:36:06,739
about that and this is wrong and we can

00:36:03,349 --> 00:36:08,779
fix this by producing better tools for

00:36:06,739 --> 00:36:10,309
developers working with developers and

00:36:08,779 --> 00:36:13,700
try to convince them why they should

00:36:10,309 --> 00:36:18,049
care about this and again I want to go

00:36:13,700 --> 00:36:20,509
back to the point from earlier that as a

00:36:18,049 --> 00:36:22,759
developer if I'm not getting a feedback

00:36:20,509 --> 00:36:24,200
from what I am doing from the code that

00:36:22,759 --> 00:36:26,059
I'm pushing from the changes that I'm

00:36:24,200 --> 00:36:29,049
doing and I'm not getting that feedback

00:36:26,059 --> 00:36:31,160
I will be burned out immediately and

00:36:29,049 --> 00:36:33,769
probably after or near I will lead the

00:36:31,160 --> 00:36:35,630
company about some someplace else and

00:36:33,769 --> 00:36:37,489
the problem is not in the company the

00:36:35,630 --> 00:36:39,859
company the problem is did with this

00:36:37,489 --> 00:36:44,650
relationship with with the production

00:36:39,859 --> 00:36:47,979
system so please keep this in mind I

00:36:44,650 --> 00:36:47,979
think that's

00:36:53,089 --> 00:36:57,380
just got a page of duty by the way yes

00:36:57,589 --> 00:37:04,440
so there's a little bit of time for

00:36:59,579 --> 00:37:05,460
question if somebody wants yeah I have a

00:37:04,440 --> 00:37:08,460
lot of questions but let's start with

00:37:05,460 --> 00:37:11,400
the first one so you mentioned the

00:37:08,460 --> 00:37:15,900
plug-ins for fr yeah and applying

00:37:11,400 --> 00:37:17,609
certain remediation policies yeah if

00:37:15,900 --> 00:37:20,970
every developer can write their own

00:37:17,609 --> 00:37:22,500
policy how do you make sure policies

00:37:20,970 --> 00:37:25,349
don't conflict or don't interfere with

00:37:22,500 --> 00:37:28,730
one another that's actually a good

00:37:25,349 --> 00:37:31,440
question i think that people don't write

00:37:28,730 --> 00:37:35,520
policies for services that they don't

00:37:31,440 --> 00:37:37,410
own them because usually the uncles team

00:37:35,520 --> 00:37:40,049
their uncles that do the uncle on team

00:37:37,410 --> 00:37:41,339
and the engineer the netting will care

00:37:40,049 --> 00:37:42,450
more about other people from that

00:37:41,339 --> 00:37:47,490
service and they will create these

00:37:42,450 --> 00:37:50,040
alarms I guess that you can that by

00:37:47,490 --> 00:37:52,020
doing a proper code reviews on your code

00:37:50,040 --> 00:37:55,760
you can do that but I don't think we

00:37:52,020 --> 00:37:55,760
have kind of a system in place right now

00:37:57,170 --> 00:38:03,480
so at some point you showed that you

00:38:00,740 --> 00:38:08,000
restart a service or a server yeah

00:38:03,480 --> 00:38:11,309
automatically that abstracts problems

00:38:08,000 --> 00:38:12,869
that's in general I mean obviously it

00:38:11,309 --> 00:38:16,170
might be a solution because restart

00:38:12,869 --> 00:38:20,640
solves everything but I'm wondering if

00:38:16,170 --> 00:38:22,890
you have 17,000 developers restarting

00:38:20,640 --> 00:38:26,040
services all over the place how do you

00:38:22,890 --> 00:38:29,790
monitor that so that you don't create

00:38:26,040 --> 00:38:32,130
more that's a really good question so we

00:38:29,790 --> 00:38:35,790
have odious contours and scuba longs for

00:38:32,130 --> 00:38:38,520
f bar itself as well and you can what

00:38:35,790 --> 00:38:40,589
actually people do is they monitor how

00:38:38,520 --> 00:38:45,569
Facebook is performing on their service

00:38:40,589 --> 00:38:48,180
so if f bar can is restarting a half of

00:38:45,569 --> 00:38:50,250
the tier that you own right now there is

00:38:48,180 --> 00:38:52,410
probably a problem without more than

00:38:50,250 --> 00:38:54,869
their results itself so you can get page

00:38:52,410 --> 00:38:57,930
on that and we also introducing rate

00:38:54,869 --> 00:39:01,079
limiting on specific how specific tears

00:38:57,930 --> 00:39:05,599
specific data centers so f bar one go ai

00:39:01,079 --> 00:39:05,599
and you know take the whole side down

00:39:05,690 --> 00:39:14,760
just last one you talked about a lot

00:39:12,360 --> 00:39:18,360
about events yes well do you keep all

00:39:14,760 --> 00:39:20,700
those event and what now you haven't you

00:39:18,360 --> 00:39:23,730
have event but and filtering and

00:39:20,700 --> 00:39:28,830
everything so we have the alarm system

00:39:23,730 --> 00:39:32,250
I'll try to browse real quick at the

00:39:28,830 --> 00:39:36,570
time yeah so this one over here yeah you

00:39:32,250 --> 00:39:39,750
don't see anything this one all of the

00:39:36,570 --> 00:39:42,180
alerts are over here so every alert that

00:39:39,750 --> 00:39:45,110
you create that I've shown over here is

00:39:42,180 --> 00:39:49,590
created in a specific database database

00:39:45,110 --> 00:39:52,380
for d alert itself and other components

00:39:49,590 --> 00:39:54,740
can react upon that for example f bar or

00:39:52,380 --> 00:39:58,350
any other subscription for creating

00:39:54,740 --> 00:40:06,030
alarms in veggie duty in email in IRC or

00:39:58,350 --> 00:40:10,730
whatever so thank you very much thank

00:40:06,030 --> 00:40:10,730

YouTube URL: https://www.youtube.com/watch?v=zf-0WOvJaQc


