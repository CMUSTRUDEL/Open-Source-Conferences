Title: Security Tests as part of Continuous Integration process - Nir Koren
Publication date: 2015-11-01
Playlist: DevOps Days Tel Aviv 2015
Description: 
	http://www.devopsdays.org/events/2015-telaviv/

Continuous Integration (CI) is a key agile software engineering practice where members of a team, or teams in a project, integrate their work frequently. In order to achieve Usable Software each Sprint a CI process has to be clearly defined and implemented. The problem today is the lake of frequency of scanning static code (using tools like HP Fortify, Checkmarx) and dynamic scan (using tools like IBM AppSCan, HP WebInspect). Therefore It's not connected to CI processes often. The reasons are:

Complicity - requires someone who has experience and time.
Time - The scan takes long and requires extra attention.
Stability of those processes.
This leads to the following symptoms:

Security issues are being discovered once in a release or more.
The developers need to reproduce the issues that created too long ago.
Security issues are being part of the code.
Difficulty to fix issues since sometime additional post developments are based on this code
Unable to track of trends.
How did we implemented it?

Build of latest code.
Deploy to a reference system
Scan the Java code statically (HP Fortify)
Scan the JS code statically (CheckMarx)
Scan the deployed system dynamically (HP WebInspect)
Analysis and report generation of API to the CI notifications.
HTML mail report sends to the relevant people.
About the speaker - Nir Koren

I'm Nir Koren, DevOps Lead in SAP Labs Israel, Cloud Experience group. Responsible and experienced with Maven, Deployment, DevOps processes, static code analysis and for implementation of Jenkins all over the world.
Captions: 
	00:00:00,520 --> 00:00:18,130
I would like to talk about security test

00:00:14,379 --> 00:00:19,900
both scans for static and dynamic for

00:00:18,130 --> 00:00:22,300
continuous integration and now do we

00:00:19,900 --> 00:00:26,470
connect it to the CI processes that we

00:00:22,300 --> 00:00:29,170
have so I'm Annie Loren from s AP I'm a

00:00:26,470 --> 00:00:33,040
tech lead DevOps tech leader responsible

00:00:29,170 --> 00:00:35,800
for the entire process of the CI and we

00:00:33,040 --> 00:00:38,860
are developing cloud computing cloud

00:00:35,800 --> 00:00:41,079
computing portal that exposed your

00:00:38,860 --> 00:00:45,489
back-end data how many of you familiar

00:00:41,079 --> 00:00:49,210
with this slide okay so it should it

00:00:45,489 --> 00:00:51,760
should say it shows exactly how how

00:00:49,210 --> 00:00:55,989
caused the bug when you fix it on the

00:00:51,760 --> 00:01:00,820
development phase and sorry and normally

00:00:55,989 --> 00:01:03,820
we run static static air scans and our

00:01:00,820 --> 00:01:05,740
code on milestone release and dynamic a

00:01:03,820 --> 00:01:08,740
we do it once in a while because it's

00:01:05,740 --> 00:01:10,810
quite expensive step so in fact we need

00:01:08,740 --> 00:01:14,709
to have a fast feedback on their

00:01:10,810 --> 00:01:16,779
security scans we have to be agile to be

00:01:14,709 --> 00:01:20,859
aligned with the lint processes and we

00:01:16,779 --> 00:01:23,319
have to be frequent scans in our code so

00:01:20,859 --> 00:01:25,990
in this case we provide full automation

00:01:23,319 --> 00:01:29,009
on the scans and I will explain it later

00:01:25,990 --> 00:01:32,319
a reports and notification are being

00:01:29,009 --> 00:01:34,689
sent automatically and transparency to

00:01:32,319 --> 00:01:38,649
an entire team both product and

00:01:34,689 --> 00:01:41,349
implementation team so the first step we

00:01:38,649 --> 00:01:43,599
need to identify the one identified

00:01:41,349 --> 00:01:46,179
their exact areas that we want to focus

00:01:43,599 --> 00:01:48,520
on them we need to define exactly the

00:01:46,179 --> 00:01:51,219
important stuff that we want to scan and

00:01:48,520 --> 00:01:53,469
we want to be focused on the second step

00:01:51,219 --> 00:01:55,689
is transparency in the continuous

00:01:53,469 --> 00:01:58,239
integration means that if you have an

00:01:55,689 --> 00:02:00,939
email that's sent from the CI system we

00:01:58,239 --> 00:02:04,739
want to put the scans of the security

00:02:00,939 --> 00:02:07,270
inside the man and I will show it later

00:02:04,739 --> 00:02:09,460
the first step is the automated

00:02:07,270 --> 00:02:11,590
processes we have to find a way to

00:02:09,460 --> 00:02:14,640
automate everything we can in the scans

00:02:11,590 --> 00:02:17,460
means that we have no manual steps while

00:02:14,640 --> 00:02:20,700
both dynamic and Static old and the

00:02:17,460 --> 00:02:22,709
fourth step is actually automate

00:02:20,700 --> 00:02:23,819
reporting and notification this is very

00:02:22,709 --> 00:02:26,459
important step

00:02:23,819 --> 00:02:29,280
while we colored the reports with green

00:02:26,459 --> 00:02:32,760
and red their statuses and provide an

00:02:29,280 --> 00:02:37,440
HTML of fancy HTML report during the

00:02:32,760 --> 00:02:40,320
email so our key players is for the

00:02:37,440 --> 00:02:42,510
static code we use the check marks in

00:02:40,320 --> 00:02:45,090
the 45 and for the dynamic code we use

00:02:42,510 --> 00:02:47,670
their HP web inspect we just moved from

00:02:45,090 --> 00:02:52,320
the IBM a up scan if you know those

00:02:47,670 --> 00:02:54,390
tools and the main steps is basically on

00:02:52,320 --> 00:02:57,450
nightly basis we scan the stuff from the

00:02:54,390 --> 00:02:59,850
git repository and we run all tests both

00:02:57,450 --> 00:03:02,220
dynamic and Static we actually install

00:02:59,850 --> 00:03:05,220
the system and finally we analyze all

00:03:02,220 --> 00:03:07,560
data and expose it into an XML file how

00:03:05,220 --> 00:03:10,560
did we implement the IBM up stank I

00:03:07,560 --> 00:03:15,510
should be more fast actually so actually

00:03:10,560 --> 00:03:18,000
we record steps we go and create a basic

00:03:15,510 --> 00:03:20,459
suite for the test and we run it

00:03:18,000 --> 00:03:22,709
automatically same for the fortify we

00:03:20,459 --> 00:03:25,019
are creating a new scan we scan the code

00:03:22,709 --> 00:03:27,390
the static code analysis and we upload

00:03:25,019 --> 00:03:29,489
it to the main a fortify server and then

00:03:27,390 --> 00:03:33,299
we can download the report board both

00:03:29,489 --> 00:03:35,579
XML and PDF reports and for checkmarks

00:03:33,299 --> 00:03:38,730
it's quite the same we also create a

00:03:35,579 --> 00:03:40,890
scan running using the Jenkins plug-in

00:03:38,730 --> 00:03:42,959
the scan into the check marks main

00:03:40,890 --> 00:03:46,610
server and we download the reports both

00:03:42,959 --> 00:03:49,880
XML and PDF reports and finally we

00:03:46,610 --> 00:03:52,530
aggregate all data into an XML

00:03:49,880 --> 00:03:54,840
information we put it on the web inside

00:03:52,530 --> 00:03:57,239
our organization and the entire

00:03:54,840 --> 00:04:00,570
processes that we have whatever we have

00:03:57,239 --> 00:04:03,750
dashboards the I mails nightly statuses

00:04:00,570 --> 00:04:07,560
are being exposed during this XML using

00:04:03,750 --> 00:04:09,690
XSLT to provide such a fancy HTML report

00:04:07,560 --> 00:04:12,150
that sends automatically using the mail

00:04:09,690 --> 00:04:14,220
both for CI processes and for the

00:04:12,150 --> 00:04:17,280
nightly in order to provide transparency

00:04:14,220 --> 00:04:20,340
to the product team so we can see that

00:04:17,280 --> 00:04:22,890
the scans provide this is an internal

00:04:20,340 --> 00:04:26,729
code that we develop it's actually

00:04:22,890 --> 00:04:27,990
provide the statuses of all steps for

00:04:26,729 --> 00:04:30,090
all scans

00:04:27,990 --> 00:04:32,250
we can see a clear status of the entire

00:04:30,090 --> 00:04:35,370
process and also we can connect this

00:04:32,250 --> 00:04:37,979
exact it's report exactly to the CI ml

00:04:35,370 --> 00:04:42,080
means that we keep all developers inside

00:04:37,979 --> 00:04:42,080
the entire security scans loop

00:04:42,620 --> 00:04:50,639
everything it's actually provide

00:04:47,880 --> 00:04:53,250
transparency everything it's fixed

00:04:50,639 --> 00:04:57,060
immediately and we can we never wasting

00:04:53,250 --> 00:04:59,669
time on securities and fixes because we

00:04:57,060 --> 00:05:02,569
are discover eight on the spot

00:04:59,669 --> 00:05:02,569

YouTube URL: https://www.youtube.com/watch?v=hDDOcXNaT7g


