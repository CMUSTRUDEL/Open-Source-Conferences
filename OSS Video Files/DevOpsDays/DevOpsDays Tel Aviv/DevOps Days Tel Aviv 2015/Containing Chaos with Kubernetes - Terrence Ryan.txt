Title: Containing Chaos with Kubernetes - Terrence Ryan
Publication date: 2015-11-01
Playlist: DevOps Days Tel Aviv 2015
Description: 
	http://www.devopsdays.org/events/2015-telaviv/

This session will begin with a level set. If people don't know Docker, I'll catch them up. If they know Docker, I'll move on to making connected Docker container work together to begin with. Then I'll show how to do the same with Kubernetes. I'll then show off the Replication Controller which is the special sauce of Kubernetes which makes sure that if you say you need 5 containers running the web image, and one goes down another one will spin up. All of that should take a good 45 minutes to show with Q/A

About the speaker - Terrence Ryan

Terry Ryan is a Developer Advocate for the Google Cloud Platform team. He has 15 years of experience working with the web - both front end and back. He is passionate about web standards and wants to bring web developers to the Google Cloud Platform. Before Google, he worked for Adobe and the Wharton School of Business.

He also wrote Driving Technical Change for Pragmatic Bookshelf, a book that arms technology professionals with the tools to convince reluctant co-workers to adopt new tools and technology.
Captions: 
	00:00:10,430 --> 00:00:17,189
so this is containing chaos with

00:00:14,580 --> 00:00:18,480
kubernetes if this is not the session

00:00:17,189 --> 00:00:20,910
that you were supposed to be in then

00:00:18,480 --> 00:00:22,200
you're in the wrong place my name is

00:00:20,910 --> 00:00:26,010
Terry Ryan I'm a developer advocate for

00:00:22,200 --> 00:00:27,119
Google and so that's pretty much all you

00:00:26,010 --> 00:00:28,110
need to know to get started

00:00:27,119 --> 00:00:30,000
but let me ask you guys a couple

00:00:28,110 --> 00:00:32,520
questions about you guys help you know

00:00:30,000 --> 00:00:36,899
where to start what jokes I could make a

00:00:32,520 --> 00:00:39,390
sort of thing so I assume everyone here

00:00:36,899 --> 00:00:41,039
is on the DevOps spectrum somewhere is

00:00:39,390 --> 00:00:42,989
there anyone who's not from that

00:00:41,039 --> 00:00:45,359
community here right you're either

00:00:42,989 --> 00:00:45,780
developer an operator okay all right

00:00:45,359 --> 00:00:51,749
cool

00:00:45,780 --> 00:00:53,519
or both right is anyone here not played

00:00:51,749 --> 00:00:55,670
with containers at all well you haven't

00:00:53,519 --> 00:00:59,850
touched it you haven't looked at docker

00:00:55,670 --> 00:01:02,159
okay there's a couple I mean don't know

00:00:59,850 --> 00:01:03,539
what containers are at all now all right

00:01:02,159 --> 00:01:06,060
good all right so it gives me a place to

00:01:03,539 --> 00:01:08,280
start and just for personal information

00:01:06,060 --> 00:01:11,399
how many people here we're at the doctor

00:01:08,280 --> 00:01:13,409
is horseshit a session last night okay

00:01:11,399 --> 00:01:15,869
how many people fall on that spectrum of

00:01:13,409 --> 00:01:17,579
belief that the whole container thing is

00:01:15,869 --> 00:01:19,680
overhead how many people are like loving

00:01:17,579 --> 00:01:21,149
containers and how many people are

00:01:19,680 --> 00:01:23,759
reserving judgment because no one's

00:01:21,149 --> 00:01:26,640
really using them in production yet okay

00:01:23,759 --> 00:01:29,310
all right good all right all right good

00:01:26,640 --> 00:01:31,649
so that gives me a good idea of where we

00:01:29,310 --> 00:01:33,380
are and what I talk about so I'm going

00:01:31,649 --> 00:01:35,670
to skip ahead I did have a whole section

00:01:33,380 --> 00:01:38,939
kind of starting with containers in case

00:01:35,670 --> 00:01:40,229
you weren't there the I'm just I'm

00:01:38,939 --> 00:01:42,119
disappointed I'll get to use the slide

00:01:40,229 --> 00:01:43,770
talking about VMs that you could replace

00:01:42,119 --> 00:01:45,749
your laptop bag with an oil drum and

00:01:43,770 --> 00:01:50,520
it'll do what you want it to do but I

00:01:45,749 --> 00:01:52,560
don't really get you there a little

00:01:50,520 --> 00:01:56,130
metaphor there okay so intro Cooper

00:01:52,560 --> 00:01:58,439
Nettie's why kubernetes why what is the

00:01:56,130 --> 00:02:00,210
problem that we're trying to solve with

00:01:58,439 --> 00:02:01,530
kubernetes because a lot of times we

00:02:00,210 --> 00:02:03,090
talk about this technology and we talk

00:02:01,530 --> 00:02:05,219
about it like we kind of jump right into

00:02:03,090 --> 00:02:07,560
it I want to say what it is what is the

00:02:05,219 --> 00:02:09,390
actual problem that we're trying to deal

00:02:07,560 --> 00:02:12,660
with it's okay so you've come over to

00:02:09,390 --> 00:02:14,890
come over to containers for let's say

00:02:12,660 --> 00:02:17,050
for the sake of argument you're

00:02:14,890 --> 00:02:18,850
you're suspending your disbelief and

00:02:17,050 --> 00:02:20,920
you've come over and started to use

00:02:18,850 --> 00:02:23,470
containers so you have a front-end and

00:02:20,920 --> 00:02:25,540
services container setup that's both

00:02:23,470 --> 00:02:27,490
your web front-end and your services -

00:02:25,540 --> 00:02:30,730
combined and then you have a back-end

00:02:27,490 --> 00:02:32,890
that's running my sequel to quote people

00:02:30,730 --> 00:02:36,360
from yesterday the boring stack here

00:02:32,890 --> 00:02:38,530
right PHP my sequel but you know kind of

00:02:36,360 --> 00:02:40,300
everyone will understand what we're what

00:02:38,530 --> 00:02:42,489
we're doing here and so we set up a easy

00:02:40,300 --> 00:02:44,680
simple environment here you've got a

00:02:42,489 --> 00:02:46,209
front end and a back end and everyone's

00:02:44,680 --> 00:02:48,130
happy and if something happens we get a

00:02:46,209 --> 00:02:49,840
little bit more traffic we can easily

00:02:48,130 --> 00:02:53,170
add more front ends and it all sort of

00:02:49,840 --> 00:02:55,330
okay we're fine then comes along and

00:02:53,170 --> 00:02:57,519
says hey having front ends and services

00:02:55,330 --> 00:02:59,110
on the same container is causing us all

00:02:57,519 --> 00:03:01,450
sorts of problems it'd be nice if we

00:02:59,110 --> 00:03:04,000
split these up so you do that right you

00:03:01,450 --> 00:03:06,160
have just services on this one and then

00:03:04,000 --> 00:03:08,500
you add a front end that's just HTML

00:03:06,160 --> 00:03:10,330
Javascript CSS all right so you now have

00:03:08,500 --> 00:03:12,550
three tier architecture and so - and

00:03:10,330 --> 00:03:15,130
then you're looking like this okay we're

00:03:12,550 --> 00:03:17,500
a little bit you know a little bit more

00:03:15,130 --> 00:03:19,390
what we're kind of used to and then

00:03:17,500 --> 00:03:21,940
someone points out like hey you know if

00:03:19,390 --> 00:03:24,030
this container dies it's my secret

00:03:21,940 --> 00:03:26,709
container dies like we lose everything

00:03:24,030 --> 00:03:29,350
okay all right so we need a volume so we

00:03:26,709 --> 00:03:31,870
set up a volume and now we're looking

00:03:29,350 --> 00:03:33,160
like this and so you know we get a

00:03:31,870 --> 00:03:35,049
little bit more traffic we add some

00:03:33,160 --> 00:03:37,540
front end and we get a little bit more

00:03:35,049 --> 00:03:39,459
and we can start splitting up my sequel

00:03:37,540 --> 00:03:42,340
and getting a little overdone and say

00:03:39,459 --> 00:03:43,720
okay so alright here we are now all of

00:03:42,340 --> 00:03:45,250
this is running like we kind of

00:03:43,720 --> 00:03:47,250
abstracted away all this stuff but like

00:03:45,250 --> 00:03:50,350
under the covers this is still running

00:03:47,250 --> 00:03:52,540
on a machine that has memory and

00:03:50,350 --> 00:03:55,150
processor and disk and other resources

00:03:52,540 --> 00:03:59,140
and you know at some point we do need to

00:03:55,150 --> 00:04:00,640
worry about them so okay so we're not

00:03:59,140 --> 00:04:02,620
that redundant let's switch over so now

00:04:00,640 --> 00:04:06,660
we have multiple machines how do we

00:04:02,620 --> 00:04:09,730
route stuff like can machines on this

00:04:06,660 --> 00:04:11,170
can can the containers in this machine

00:04:09,730 --> 00:04:13,810
talk to the containers on that machine

00:04:11,170 --> 00:04:15,400
should they if we do how do we set that

00:04:13,810 --> 00:04:17,560
up we have to set up networking and what

00:04:15,400 --> 00:04:19,840
happens if one of the machines dies we

00:04:17,560 --> 00:04:23,710
have to move stuff over

00:04:19,840 --> 00:04:25,720
okay that's a lot we went from just like

00:04:23,710 --> 00:04:27,190
really simple and hey this is fun and

00:04:25,720 --> 00:04:30,880
this is easy and something to play with

00:04:27,190 --> 00:04:32,669
too like a lot to manage and that's

00:04:30,880 --> 00:04:34,900
where kubernetes comes in instead of

00:04:32,669 --> 00:04:37,150
basically setting up all that you

00:04:34,900 --> 00:04:38,919
basically throw some processors at it

00:04:37,150 --> 00:04:40,570
throw some resources and you say this is

00:04:38,919 --> 00:04:41,050
what I want and Cooper neighs lets you

00:04:40,570 --> 00:04:43,150
go with it

00:04:41,050 --> 00:04:45,520
all right so kubernetes is a container

00:04:43,150 --> 00:04:48,040
orchestration system it's open source

00:04:45,520 --> 00:04:50,200
and it's started by Google and has been

00:04:48,040 --> 00:04:51,190
contributed to by a series of others and

00:04:50,200 --> 00:04:53,020
now I'm gonna go through and start

00:04:51,190 --> 00:04:56,169
talking about what Cooper Nettie's how

00:04:53,020 --> 00:04:58,450
it's built up and I need to address a

00:04:56,169 --> 00:05:01,450
couple concepts first somebody here not

00:04:58,450 --> 00:05:02,770
hurt the cattle not pets argument I mean

00:05:01,450 --> 00:05:06,250
like you're like I've never heard that

00:05:02,770 --> 00:05:07,390
before ever okay so first thing we kind

00:05:06,250 --> 00:05:09,190
of come at this from the let me just

00:05:07,390 --> 00:05:11,710
speed through this that we want our

00:05:09,190 --> 00:05:14,020
stuff to be pets and not cattle right

00:05:11,710 --> 00:05:17,140
the next major philosophy is desired

00:05:14,020 --> 00:05:19,630
state desired state is what we call a

00:05:17,140 --> 00:05:21,700
declarative way of going setting up set

00:05:19,630 --> 00:05:24,790
up instead of an imperative so you're

00:05:21,700 --> 00:05:26,710
used to in the imperative model of

00:05:24,790 --> 00:05:27,430
saying like alright well do this build

00:05:26,710 --> 00:05:29,110
docker images

00:05:27,430 --> 00:05:32,979
alright then launch the front-end and

00:05:29,110 --> 00:05:35,350
then launch services and then launch

00:05:32,979 --> 00:05:36,550
back-end alright and then if something

00:05:35,350 --> 00:05:39,580
were to happen and one of these machines

00:05:36,550 --> 00:05:42,160
dies something has to respond to that or

00:05:39,580 --> 00:05:45,100
maybe someone write like but basically

00:05:42,160 --> 00:05:48,310
you have to you have to respond to that

00:05:45,100 --> 00:05:49,500
and somehow kind of start up your script

00:05:48,310 --> 00:05:52,150
from somewhere else

00:05:49,500 --> 00:05:53,860
declarative goes a different way it says

00:05:52,150 --> 00:05:56,020
desired state there should be three

00:05:53,860 --> 00:05:58,930
front ends to services and one back end

00:05:56,020 --> 00:06:01,030
and kubernetes will just run it for you

00:05:58,930 --> 00:06:03,520
right just that's all you say this is

00:06:01,030 --> 00:06:05,680
this is what I want and kubernetes does

00:06:03,520 --> 00:06:07,289
it so if something happens in machine

00:06:05,680 --> 00:06:09,820
dies without human intervention

00:06:07,289 --> 00:06:11,770
communities will restart one of these

00:06:09,820 --> 00:06:13,750
machines for you as if nothing ever

00:06:11,770 --> 00:06:15,160
happened you'll get lobs and everything

00:06:13,750 --> 00:06:16,840
because obviously something happened but

00:06:15,160 --> 00:06:18,750
you don't have to worry about it so if I

00:06:16,840 --> 00:06:22,210
want to do a fun metaphor for it like

00:06:18,750 --> 00:06:23,680
cattle not pets I don't say it's like an

00:06:22,210 --> 00:06:25,330
employee versus a child

00:06:23,680 --> 00:06:27,940
alright so let's say you have a tough

00:06:25,330 --> 00:06:31,450
day with an employee or even a co-worker

00:06:27,940 --> 00:06:33,730
and you say to them yeah a tough day go

00:06:31,450 --> 00:06:35,580
get some sleep that's really all you

00:06:33,730 --> 00:06:38,050
need to tell your co-worker or employee

00:06:35,580 --> 00:06:40,450
all right on the other hand if you have

00:06:38,050 --> 00:06:43,210
a child you cannot tell them just go to

00:06:40,450 --> 00:06:46,750
sleep right you have to say go upstairs

00:06:43,210 --> 00:06:50,050
get undressed put on pajamas brush your

00:06:46,750 --> 00:06:51,550
teeth pick out two stories and for those

00:06:50,050 --> 00:06:52,630
that don't have kids you might say like

00:06:51,550 --> 00:06:55,090
do you really have to tell them to go

00:06:52,630 --> 00:06:56,800
upstairs yes you do have to tell them go

00:06:55,090 --> 00:07:00,100
upstairs so you'll have a naked child in

00:06:56,800 --> 00:07:01,780
your living room right so this is this

00:07:00,100 --> 00:07:04,810
is the difference here we're talking

00:07:01,780 --> 00:07:07,570
about treating our services like

00:07:04,810 --> 00:07:10,540
employees instead of like children right

00:07:07,570 --> 00:07:12,250
now it has to be the you know you can't

00:07:10,540 --> 00:07:13,840
just magically feed a child like an

00:07:12,250 --> 00:07:17,740
employee so you need to have setup and

00:07:13,840 --> 00:07:19,840
all that okay so components you could

00:07:17,740 --> 00:07:23,680
try you can really try this just do not

00:07:19,840 --> 00:07:25,840
work components so there are a number of

00:07:23,680 --> 00:07:28,600
things that make up a kubernetes setup

00:07:25,840 --> 00:07:31,840
and the first thing the atomic unit is

00:07:28,600 --> 00:07:34,750
called a pod now a pod can consist of

00:07:31,840 --> 00:07:37,330
one or more containers and they're gonna

00:07:34,750 --> 00:07:39,700
share IP addresses a namespace so you

00:07:37,330 --> 00:07:42,760
basically combine multiple containers

00:07:39,700 --> 00:07:45,580
onto the same pod and have them treated

00:07:42,760 --> 00:07:48,010
as one logical machine now it's okay

00:07:45,580 --> 00:07:49,480
just to have one container I found this

00:07:48,010 --> 00:07:50,890
when we go to the documentation and

00:07:49,480 --> 00:07:52,240
start playing with kubernetes it

00:07:50,890 --> 00:07:54,160
immediately starts out with pod and you

00:07:52,240 --> 00:07:55,780
can have more than one container and it

00:07:54,160 --> 00:07:58,720
kind of starts like that's where you

00:07:55,780 --> 00:08:01,180
want to go but for a lot of use cases

00:07:58,720 --> 00:08:02,440
you don't need more than one pot of more

00:08:01,180 --> 00:08:06,670
than one container in a pod you can run

00:08:02,440 --> 00:08:08,410
just one container in one pot examples

00:08:06,670 --> 00:08:10,150
of why you'd want to mix this stuff up

00:08:08,410 --> 00:08:12,250
the canonical one we do is a web server

00:08:10,150 --> 00:08:14,980
versus file sink so you've got two

00:08:12,250 --> 00:08:16,900
containers one is serving up web content

00:08:14,980 --> 00:08:18,490
the other one is a file sync that's

00:08:16,900 --> 00:08:20,350
getting the web content from someplace

00:08:18,490 --> 00:08:22,030
authoritative and populating it so the

00:08:20,350 --> 00:08:24,280
web server has something to do they're

00:08:22,030 --> 00:08:25,480
two distinct jobs two distinct things we

00:08:24,280 --> 00:08:27,070
want to be doing so we put them on the

00:08:25,480 --> 00:08:29,350
same one if you want to put all your

00:08:27,070 --> 00:08:31,150
services on one container or one kind of

00:08:29,350 --> 00:08:32,620
logical machine but have it split up

00:08:31,150 --> 00:08:36,280
among multiple containers it's another

00:08:32,620 --> 00:08:38,539
way you would do it and if let's say not

00:08:36,280 --> 00:08:42,079
you right you didn't do this

00:08:38,539 --> 00:08:43,279
but someone is still running like an

00:08:42,079 --> 00:08:45,589
all-in-one machine or you've got

00:08:43,279 --> 00:08:49,190
database and write net that never you've

00:08:45,589 --> 00:08:51,560
never write know write you some other

00:08:49,190 --> 00:08:53,779
jerk that used to work with does did

00:08:51,560 --> 00:08:57,470
that and now you're responsible for it

00:08:53,779 --> 00:08:59,120
okay and if you want like all the code

00:08:57,470 --> 00:09:00,589
is probably written to talk like on

00:08:59,120 --> 00:09:02,569
localhost so what you would do is you

00:09:00,589 --> 00:09:04,310
would bring all good situated over as

00:09:02,569 --> 00:09:06,560
containers as part of the first step of

00:09:04,310 --> 00:09:08,029
correcting that architecture right so

00:09:06,560 --> 00:09:09,649
there's a couple of reasons why you'd

00:09:08,029 --> 00:09:14,180
want to do more than one container in a

00:09:09,649 --> 00:09:17,839
pod so this is what a pod configuration

00:09:14,180 --> 00:09:23,120
file looks like I know very exciting

00:09:17,839 --> 00:09:26,720
it's yamo some highlights from this kind

00:09:23,120 --> 00:09:28,639
pod pretty on the nose there some

00:09:26,720 --> 00:09:30,889
metadata set some names for it and then

00:09:28,639 --> 00:09:32,480
I set an image this image is going from

00:09:30,889 --> 00:09:35,630
a private repository we could just as

00:09:32,480 --> 00:09:38,680
easily go to the docker the public

00:09:35,630 --> 00:09:41,420
docker repository and pull down images

00:09:38,680 --> 00:09:44,029
so containers are there for sub-atomic

00:09:41,420 --> 00:09:45,949
in kubernetes you cannot have a naked

00:09:44,029 --> 00:09:47,569
container as much fun as it is to say

00:09:45,949 --> 00:09:49,790
naked container sounds like you're doing

00:09:47,569 --> 00:09:53,089
something wrong you have to you have to

00:09:49,790 --> 00:09:54,350
put a sock on the container but their

00:09:53,089 --> 00:09:57,760
docker files just like you're used to

00:09:54,350 --> 00:10:02,060
the same exact syntax same everything

00:09:57,760 --> 00:10:05,389
so next major concept is controllers so

00:10:02,060 --> 00:10:08,300
these handle that whole declarative the

00:10:05,389 --> 00:10:10,160
desired state idea so basically I love

00:10:08,300 --> 00:10:11,959
this example of replication controllers

00:10:10,160 --> 00:10:14,000
we only actually right now only have

00:10:11,959 --> 00:10:15,260
replication controllers down the road

00:10:14,000 --> 00:10:17,360
there's going to be other controllers

00:10:15,260 --> 00:10:18,560
but for now if you think controller

00:10:17,360 --> 00:10:19,579
you're really thinking replication

00:10:18,560 --> 00:10:21,380
controller and replication controller

00:10:19,579 --> 00:10:23,810
handles all right you said you wanted

00:10:21,380 --> 00:10:26,240
five of these things so now I'm going to

00:10:23,810 --> 00:10:28,730
look and observe the current state if

00:10:26,240 --> 00:10:31,250
the current state is not five if you

00:10:28,730 --> 00:10:32,959
know I do a diff and it's running three

00:10:31,250 --> 00:10:35,120
and five are supposed to be running I'm

00:10:32,959 --> 00:10:37,189
going to act and start up another two or

00:10:35,120 --> 00:10:39,410
if I'm supposed to have three and I have

00:10:37,189 --> 00:10:42,639
five it's gonna see that there are five

00:10:39,410 --> 00:10:44,540
running and kill the other two

00:10:42,639 --> 00:10:45,920
configuration file for this a little bit

00:10:44,540 --> 00:10:47,930
more complex and again I'll highlight

00:10:45,920 --> 00:10:49,550
just the things that are important kind

00:10:47,930 --> 00:10:52,940
replication controller give it a name

00:10:49,550 --> 00:10:55,910
front-end controller this is important

00:10:52,940 --> 00:10:59,779
basically this template is this is the

00:10:55,910 --> 00:11:01,820
type of pod that you want to to run in

00:10:59,779 --> 00:11:03,050
that replication controller which is

00:11:01,820 --> 00:11:05,269
kind of interesting and basically you

00:11:03,050 --> 00:11:07,130
don't end up writing a lot of pot files

00:11:05,269 --> 00:11:08,720
you end up writing mostly replication

00:11:07,130 --> 00:11:10,579
controller files that contain pod files

00:11:08,720 --> 00:11:12,889
in them you can't link them for some

00:11:10,579 --> 00:11:16,040
reason there's probably an explanation

00:11:12,889 --> 00:11:19,550
somewhere but I don't have it but right

00:11:16,040 --> 00:11:21,769
here on this app I put to do to do it's

00:11:19,550 --> 00:11:24,529
a to-do app if if it's not obvious that

00:11:21,769 --> 00:11:25,610
we're running here - front-end and

00:11:24,529 --> 00:11:28,010
that's going to be important later we

00:11:25,610 --> 00:11:30,260
get the services again I pull down an

00:11:28,010 --> 00:11:33,709
image and pretty much exactly like a pod

00:11:30,260 --> 00:11:36,980
other the other wise so in services

00:11:33,709 --> 00:11:39,260
Services defines a set of pods that work

00:11:36,980 --> 00:11:40,970
together for a common purpose so all of

00:11:39,260 --> 00:11:43,010
my front and all of my front end apps

00:11:40,970 --> 00:11:46,670
are going to run on a service I'm gonna

00:11:43,010 --> 00:11:48,410
give them a virtual IP address and it's

00:11:46,670 --> 00:11:51,589
used for exposing the application either

00:11:48,410 --> 00:11:54,019
to other services within kubernetes or

00:11:51,589 --> 00:11:57,140
externally I can I can set up external

00:11:54,019 --> 00:12:00,470
addresses that way - so if I look at the

00:11:57,140 --> 00:12:02,480
config file for this again just a lot of

00:12:00,470 --> 00:12:04,640
metadata setting names and labels and

00:12:02,480 --> 00:12:06,890
whatnot but then the important one here

00:12:04,640 --> 00:12:11,209
is app equals to do to do to Fe

00:12:06,890 --> 00:12:13,459
basically any pod that is running with

00:12:11,209 --> 00:12:15,890
app name this will be served up by this

00:12:13,459 --> 00:12:18,270
service so it's the way of linking those

00:12:15,890 --> 00:12:24,070
two concepts

00:12:18,270 --> 00:12:25,270
so that leads us to labels so I looked a

00:12:24,070 --> 00:12:27,279
little bit at labels we looked at app

00:12:25,270 --> 00:12:28,800
and that's what you use them for the

00:12:27,279 --> 00:12:32,190
other part of that was selector saying

00:12:28,800 --> 00:12:34,360
use this label to be your service

00:12:32,190 --> 00:12:35,709
basically it's metadata for your objects

00:12:34,360 --> 00:12:38,380
and it's completely arbitrary you can do

00:12:35,709 --> 00:12:40,839
whatever you want with them in this case

00:12:38,380 --> 00:12:43,060
I have three labels I have an app a tier

00:12:40,839 --> 00:12:45,430
and an environment so I can do things

00:12:43,060 --> 00:12:46,930
like select the entire front end and do

00:12:45,430 --> 00:12:49,630
something to the entire front end or

00:12:46,930 --> 00:12:52,149
select the entire prod version and do

00:12:49,630 --> 00:12:54,940
something to that and that's how labels

00:12:52,149 --> 00:12:56,410
and selectors work okay

00:12:54,940 --> 00:12:59,640
the last thing before I actually get

00:12:56,410 --> 00:13:03,720
showing off kubernetes in action is

00:12:59,640 --> 00:13:06,820
networking so pot IPS are all routable

00:13:03,720 --> 00:13:07,890
which means that instead of the docker

00:13:06,820 --> 00:13:10,570
way of doing that where you go through

00:13:07,890 --> 00:13:13,240
the docker bridge to talk to the other

00:13:10,570 --> 00:13:15,490
host machines we'll be able to talk

00:13:13,240 --> 00:13:17,350
directly to one another you can set up

00:13:15,490 --> 00:13:20,020
security and you can handle rules like

00:13:17,350 --> 00:13:21,670
that but most part networking is really

00:13:20,020 --> 00:13:23,680
straightforward and easy and then

00:13:21,670 --> 00:13:25,839
combine it with a DNS service underneath

00:13:23,680 --> 00:13:28,360
in kubernetes and you can route services

00:13:25,839 --> 00:13:31,540
pretty easily to the correct places it

00:13:28,360 --> 00:13:34,570
needs to go so pods couldn't reach each

00:13:31,540 --> 00:13:39,250
other without the without that and they

00:13:34,570 --> 00:13:40,959
can talk amongst nodes of the kubernetes

00:13:39,250 --> 00:13:43,450
cluster without you having to do any

00:13:40,959 --> 00:13:44,740
work so basically as long as there are

00:13:43,450 --> 00:13:46,450
in the same kubernetes cluster they'll

00:13:44,740 --> 00:13:47,589
be able to talk to each other whether or

00:13:46,450 --> 00:13:49,630
not you want that or not is a different

00:13:47,589 --> 00:13:51,880
manner and you need to lock things down

00:13:49,630 --> 00:13:54,250
but it makes reaching out to other

00:13:51,880 --> 00:13:57,670
containers or other pods really really

00:13:54,250 --> 00:13:59,410
easy okay so I'm gonna show off

00:13:57,670 --> 00:14:02,860
kubernetes in action I'm gonna set up

00:13:59,410 --> 00:14:05,140
some things before before the demo I had

00:14:02,860 --> 00:14:08,020
to do a whole bunch of stuff so I'm like

00:14:05,140 --> 00:14:10,510
this this is the you know last time you

00:14:08,020 --> 00:14:12,940
know this is the recap of that long

00:14:10,510 --> 00:14:16,209
story short I set up some machines that

00:14:12,940 --> 00:14:17,589
are running kubernetes on them I then

00:14:16,209 --> 00:14:19,209
set up a virtual disk so I don't run

00:14:17,589 --> 00:14:23,339
into that whole the my sequel container

00:14:19,209 --> 00:14:26,829
dies that my data goes you know boom I

00:14:23,339 --> 00:14:28,260
built some docker images and then I ship

00:14:26,829 --> 00:14:31,230
those images to

00:14:28,260 --> 00:14:33,990
a private docker repository all of this

00:14:31,230 --> 00:14:36,300
took about 10 minutes which would be

00:14:33,990 --> 00:14:38,760
agonizing slow up on the stage in front

00:14:36,300 --> 00:14:40,860
of you I'd like have to stall a lot I

00:14:38,760 --> 00:14:42,600
have a video but again it's just stuff

00:14:40,860 --> 00:14:44,670
like transferring it's not that exciting

00:14:42,600 --> 00:14:46,350
most that 10 minutes took place here

00:14:44,670 --> 00:14:50,730
building the images and pushing them

00:14:46,350 --> 00:14:52,860
over a network over my hotel Wi-Fi to to

00:14:50,730 --> 00:14:54,440
the repository so it sort of makes sense

00:14:52,860 --> 00:14:57,120
that would take the most amount of time

00:14:54,440 --> 00:15:01,530
and that's basically everything I have

00:14:57,120 --> 00:15:03,150
going already so the app is pretty

00:15:01,530 --> 00:15:04,830
simple I did not pull it into three

00:15:03,150 --> 00:15:07,320
tiers because as if you've talked to me

00:15:04,830 --> 00:15:09,630
you'll discover that I'm pretty lazy so

00:15:07,320 --> 00:15:12,390
I really only wanted to someday we'll go

00:15:09,630 --> 00:15:14,850
three but and this is again lazy

00:15:12,390 --> 00:15:17,820
bootstrap just on a to-do app pretty

00:15:14,850 --> 00:15:20,370
simple all right so now let's run some

00:15:17,820 --> 00:15:22,530
kubernetes so I have good Randy's

00:15:20,370 --> 00:15:24,540
running I don't do stuff from

00:15:22,530 --> 00:15:26,130
command-line and I'm really terrible at

00:15:24,540 --> 00:15:28,140
like mashing my hand against the

00:15:26,130 --> 00:15:29,460
keyboard and messing stuff up so I have

00:15:28,140 --> 00:15:31,050
shell scripts but the shell scripts will

00:15:29,460 --> 00:15:34,680
tell you exactly what it's doing as it

00:15:31,050 --> 00:15:37,440
goes through so let's start some

00:15:34,680 --> 00:15:40,050
services so the first thing I'm a fire

00:15:37,440 --> 00:15:43,530
up is you see that it's grapping whoo

00:15:40,050 --> 00:15:47,550
I'm sorry that's really dark but

00:15:43,530 --> 00:15:50,250
basically this right here oopsie CTL

00:15:47,550 --> 00:15:52,980
create from a file and that file is the

00:15:50,250 --> 00:15:56,430
PHP replication controller so you'll see

00:15:52,980 --> 00:16:00,600
there that it fired up two pots based on

00:15:56,430 --> 00:16:02,400
that replication controller and then I'm

00:16:00,600 --> 00:16:03,960
gonna pull up the service and the

00:16:02,400 --> 00:16:06,690
service did the same thing there's a

00:16:03,960 --> 00:16:08,400
similar thing it built from a file and

00:16:06,690 --> 00:16:10,590
it was that gamal file that i showed you

00:16:08,400 --> 00:16:12,270
earlier and basically it is the front

00:16:10,590 --> 00:16:14,310
end for those two guys and you see that

00:16:12,270 --> 00:16:16,350
it's doing exactly what we said if the

00:16:14,310 --> 00:16:19,550
app name matches then serve up from

00:16:16,350 --> 00:16:21,380
these two pots okay

00:16:19,550 --> 00:16:25,370
next thing I'm gonna do is I'm gonna

00:16:21,380 --> 00:16:28,220
launch my my sequel server that's gonna

00:16:25,370 --> 00:16:30,020
launch yellow means it's pending the PHP

00:16:28,220 --> 00:16:32,180
servers go up really fast the my second

00:16:30,020 --> 00:16:33,980
one takes a little bit longer and then

00:16:32,180 --> 00:16:37,459
I'm going to create a service for my

00:16:33,980 --> 00:16:40,459
sequel and there is the service for my

00:16:37,459 --> 00:16:42,110
signal okay so now this is my

00:16:40,459 --> 00:16:43,490
architecture this is all set up the only

00:16:42,110 --> 00:16:45,890
thing that's not happening then it need

00:16:43,490 --> 00:16:48,890
to happen that takes a couple seconds is

00:16:45,890 --> 00:16:50,870
for my service there to get a public IP

00:16:48,890 --> 00:16:53,620
and as soon as it gets a public IP I'll

00:16:50,870 --> 00:16:53,620
I'll pull it

00:17:02,430 --> 00:17:05,690
you are out of service

00:17:07,420 --> 00:17:09,990
which

00:17:13,559 --> 00:17:17,159
great great question so how is this

00:17:15,929 --> 00:17:21,240
service made redundant

00:17:17,159 --> 00:17:23,339
it's right now it's it's running on the

00:17:21,240 --> 00:17:26,100
it's basically controlled by the master

00:17:23,339 --> 00:17:29,460
controller for kubernetes which is not a

00:17:26,100 --> 00:17:30,870
high availability yet so you're you do

00:17:29,460 --> 00:17:32,640
have a single point of failure we are

00:17:30,870 --> 00:17:34,140
aware of that we're working on it

00:17:32,640 --> 00:17:44,039
but it is running from the master

00:17:34,140 --> 00:17:47,520
controller yes a layer up yet it's a

00:17:44,039 --> 00:17:50,460
1-point oh all right it's okay so this

00:17:47,520 --> 00:17:52,799
is my environment I got a public IP

00:17:50,460 --> 00:17:55,950
address so I can go and check that out

00:17:52,799 --> 00:18:03,230
and we see that this is running and it's

00:17:55,950 --> 00:18:03,230
real app not dummy to do it live

00:18:03,500 --> 00:18:10,800
so you've all right added record okay so

00:18:07,530 --> 00:18:12,000
it's all living all right so what's the

00:18:10,800 --> 00:18:13,260
first thing I might want to do well the

00:18:12,000 --> 00:18:15,950
first thing I might want to do is find

00:18:13,260 --> 00:18:17,760
out that hey you know we're having a

00:18:15,950 --> 00:18:20,880
substantially increased load

00:18:17,760 --> 00:18:23,310
I would like to increase the number of

00:18:20,880 --> 00:18:25,260
pods that are running my front end okay

00:18:23,310 --> 00:18:27,300
this is actually pretty simple I'm gonna

00:18:25,260 --> 00:18:30,920
bump this up because I realize it's kind

00:18:27,300 --> 00:18:34,020
of hard to read bear with me yeah

00:18:30,920 --> 00:18:37,860
there we go so I'm gonna write cube CTL

00:18:34,020 --> 00:18:38,910
scale replication controller or

00:18:37,860 --> 00:18:40,430
application controller I want to do that

00:18:38,910 --> 00:18:46,670
to is front end

00:18:40,430 --> 00:18:50,460
- controller and I want to make replicas

00:18:46,670 --> 00:18:53,580
we take four yeah I'll go for if I go

00:18:50,460 --> 00:18:54,840
like Ted it'll blow up not not because

00:18:53,580 --> 00:18:57,780
screw Bernays get handle it because I'm

00:18:54,840 --> 00:19:00,120
in front of a crowd of people and there

00:18:57,780 --> 00:19:02,330
we go so I've added another four nodes

00:19:00,120 --> 00:19:06,510
so I now have a foreign of four pod

00:19:02,330 --> 00:19:09,090
service serving up on this sorry I'm

00:19:06,510 --> 00:19:11,070
putting it here put writing on that

00:19:09,090 --> 00:19:12,990
service that services load balance is

00:19:11,070 --> 00:19:14,370
going to handle making sure that each

00:19:12,990 --> 00:19:16,860
one of these nodes is getting some of

00:19:14,370 --> 00:19:18,870
the traffic which is kind of fun and

00:19:16,860 --> 00:19:21,720
obviously I can script this and do it

00:19:18,870 --> 00:19:22,980
either proactively it can say like I

00:19:21,720 --> 00:19:26,370
always get more traffic this time of day

00:19:22,980 --> 00:19:28,290
and so I'll add more pods or I can I can

00:19:26,370 --> 00:19:30,630
do it reactively like you know to an

00:19:28,290 --> 00:19:32,940
alert basically this is you know pretty

00:19:30,630 --> 00:19:35,930
good to go so the next thing that might

00:19:32,940 --> 00:19:40,530
come up is from time to time developers

00:19:35,930 --> 00:19:42,540
say like oh like that whole white this

00:19:40,530 --> 00:19:44,190
will light background this is terrible

00:19:42,540 --> 00:19:46,200
right we want to we want to update the

00:19:44,190 --> 00:19:48,060
we want it won't it be cool and hipster

00:19:46,200 --> 00:19:50,580
and dark right and what the dark version

00:19:48,060 --> 00:19:54,270
of this so they of course update the

00:19:50,580 --> 00:19:56,250
code and so I've already gone through

00:19:54,270 --> 00:19:57,720
and created a docker image naked you

00:19:56,250 --> 00:19:58,920
know I would still have to do that F to

00:19:57,720 --> 00:20:00,870
create a docker image with the new code

00:19:58,920 --> 00:20:03,120
get it ready to publish it and make a

00:20:00,870 --> 00:20:07,250
new version of it put it up on to the

00:20:03,120 --> 00:20:08,810
repository that's already done so

00:20:07,250 --> 00:20:12,290
because it's already done I can just run

00:20:08,810 --> 00:20:17,120
a file to handle that so what I'm gonna

00:20:12,290 --> 00:20:18,560
do is say I would like to update I'd

00:20:17,120 --> 00:20:21,680
like to update these to the new version

00:20:18,560 --> 00:20:23,330
of the code so what I do and we'll see

00:20:21,680 --> 00:20:25,190
this conception when it happens is I'll

00:20:23,330 --> 00:20:29,210
create a new front-end controller that's

00:20:25,190 --> 00:20:32,060
pointing at the old stuff and basically

00:20:29,210 --> 00:20:34,160
have the new ones basically spit up new

00:20:32,060 --> 00:20:36,220
ones and take down old ones as the new

00:20:34,160 --> 00:20:38,300
ones come up so I'm gonna run that and

00:20:36,220 --> 00:20:39,500
you'll see basically I have a rolling

00:20:38,300 --> 00:20:41,780
update command front-end controller

00:20:39,500 --> 00:20:44,420
update period two seconds I've added a

00:20:41,780 --> 00:20:46,880
new front-end controller it's going to

00:20:44,420 --> 00:20:49,510
add an extra pod it's gonna wait till

00:20:46,880 --> 00:20:51,890
that pot is actually serving

00:20:49,510 --> 00:20:54,320
theory and then drop one of the other

00:20:51,890 --> 00:20:55,610
ones one of the V ones so we see one v2

00:20:54,320 --> 00:20:57,380
has been added there's three V ones

00:20:55,610 --> 00:20:58,520
it'll roll through and do this and the

00:20:57,380 --> 00:21:01,210
only thing I had to do to get that

00:20:58,520 --> 00:21:04,490
working you'll see here I have two

00:21:01,210 --> 00:21:08,450
replication controller files one PHP and

00:21:04,490 --> 00:21:10,970
one PHP dark I'm gonna compare those

00:21:08,450 --> 00:21:14,600
files for you and we'll see there's not

00:21:10,970 --> 00:21:16,640
that much difference oh I'm sorry that's

00:21:14,600 --> 00:21:21,940
really dark can you guys read it the bag

00:21:16,640 --> 00:21:24,200
at least kind of get an idea what's that

00:21:21,940 --> 00:21:27,650
okay no no it's my it's my bad I

00:21:24,200 --> 00:21:30,080
apologize so the differences are pretty

00:21:27,650 --> 00:21:31,460
slight right I have a different image I

00:21:30,080 --> 00:21:33,770
also have a different version that's

00:21:31,460 --> 00:21:35,090
really important having the making sure

00:21:33,770 --> 00:21:36,530
those version numbers are different so

00:21:35,090 --> 00:21:38,270
it knows that something different so can

00:21:36,530 --> 00:21:40,730
scale over to it and having a different

00:21:38,270 --> 00:21:43,960
ID and name everything else is exactly

00:21:40,730 --> 00:21:47,510
the same so now when I go back here

00:21:43,960 --> 00:21:50,060
we'll see that in a second it's going to

00:21:47,510 --> 00:21:52,610
take down and there we are we switched

00:21:50,060 --> 00:21:55,400
over to front-end controller dark so now

00:21:52,610 --> 00:21:57,530
when I look at it my hipster developer

00:21:55,400 --> 00:21:59,270
designers are happy because it's now the

00:21:57,530 --> 00:22:01,460
dark version which is of course

00:21:59,270 --> 00:22:03,110
completely unreadable and I apologize

00:22:01,460 --> 00:22:04,610
for that but it it's still the same

00:22:03,110 --> 00:22:06,950
exact app we see to do it live I just

00:22:04,610 --> 00:22:10,610
added so everything's the same except

00:22:06,950 --> 00:22:14,690
for the CSS and and some of the HTML so

00:22:10,610 --> 00:22:15,740
that is a quick a quick demo of it I

00:22:14,690 --> 00:22:17,480
just want to make sure I got everything

00:22:15,740 --> 00:22:19,780
I want to talk about yep all right you

00:22:17,480 --> 00:22:19,780
had a question

00:22:22,780 --> 00:22:26,509
hmm

00:22:24,559 --> 00:22:28,749
you want to run two versions at the same

00:22:26,509 --> 00:22:28,749
time

00:22:29,510 --> 00:22:34,450
completely stop one and then completely

00:22:31,820 --> 00:22:34,450
start another one

00:22:38,280 --> 00:22:48,840
sure yeah you do so I guess what I mean

00:22:46,770 --> 00:22:51,570
like you could totally shut down one

00:22:48,840 --> 00:22:54,270
completely and start up another one you

00:22:51,570 --> 00:22:56,580
could do it relatively quickly but if

00:22:54,270 --> 00:22:59,120
you're if your service takes time then

00:22:56,580 --> 00:22:59,120
the role like

00:23:04,650 --> 00:23:09,240
Oh immediately switch over there are

00:23:07,230 --> 00:23:12,560
ways of tweaking it that yes you can you

00:23:09,240 --> 00:23:12,560
can do things like that yes

00:23:18,460 --> 00:23:22,540
because none of this is actually hosted

00:23:20,230 --> 00:23:24,790
on my laptop it's all hosted on a cloud

00:23:22,540 --> 00:23:26,550
and I'll explain that explain that in a

00:23:24,790 --> 00:23:28,810
second

00:23:26,550 --> 00:23:30,760
but yes I'm not running it all on my

00:23:28,810 --> 00:23:32,410
laptop because I'm not a sadist or a

00:23:30,760 --> 00:23:34,240
basa kissed I guess yeah no that's the

00:23:32,410 --> 00:23:35,440
way we go all right so we also talked

00:23:34,240 --> 00:23:36,850
about rolling updates and I showed you

00:23:35,440 --> 00:23:38,890
that we have a persistent volume there

00:23:36,850 --> 00:23:41,950
that the my sequel server is looking at

00:23:38,890 --> 00:23:43,540
there's more stuff I'm gonna not

00:23:41,950 --> 00:23:44,860
necessarily go right into because

00:23:43,540 --> 00:23:47,290
there's stuff like secrets and logging

00:23:44,860 --> 00:23:49,450
and monitoring events and and UI there's

00:23:47,290 --> 00:23:52,990
a lot more to it but I want to get into

00:23:49,450 --> 00:23:55,950
some questions we commonly get right off

00:23:52,990 --> 00:23:58,150
the bat so some comparisons people ask

00:23:55,950 --> 00:23:59,440
how does it come you know how does it

00:23:58,150 --> 00:24:02,290
relate to all these different docker

00:23:59,440 --> 00:24:05,560
tools for example doctor compose is

00:24:02,290 --> 00:24:09,310
multiple taters on the same host docker

00:24:05,560 --> 00:24:10,960
swarm is clusters of container hosts so

00:24:09,310 --> 00:24:13,600
basically allowing multiple docker

00:24:10,960 --> 00:24:15,850
machines to sort of communicate and and

00:24:13,600 --> 00:24:17,530
talk to one another doctor machine

00:24:15,850 --> 00:24:19,570
allows you to launch container hosts and

00:24:17,530 --> 00:24:21,070
several clouds including on your own

00:24:19,570 --> 00:24:25,170
device that's what you use for

00:24:21,070 --> 00:24:28,810
development now it also allows you to

00:24:25,170 --> 00:24:30,250
remote container hosts so if you look at

00:24:28,810 --> 00:24:33,070
Cooper Nittis there's some overlap

00:24:30,250 --> 00:24:34,720
between what these guys do and we also

00:24:33,070 --> 00:24:37,480
add routable networks and replication

00:24:34,720 --> 00:24:39,460
controllers to it so if you look sort of

00:24:37,480 --> 00:24:41,920
kind of conceptually docker

00:24:39,460 --> 00:24:43,090
goes of the more UNIX like small tools

00:24:41,920 --> 00:24:44,680
that you can bind together to work

00:24:43,090 --> 00:24:50,620
together whereas kubernetes is sort of a

00:24:44,680 --> 00:24:52,840
more more monolithic system also Dockers

00:24:50,620 --> 00:24:55,060
logos are much cooler than ours just I

00:24:52,840 --> 00:24:58,000
feel like I really wish we had an

00:24:55,060 --> 00:24:59,800
octopus instead of like our random like

00:24:58,000 --> 00:25:01,090
geometric figure that doesn't make a lot

00:24:59,800 --> 00:25:04,930
of sense

00:25:01,090 --> 00:25:07,690
I know no it's her I've seen her blog

00:25:04,930 --> 00:25:09,100
and read her stuff it's awesome but yeah

00:25:07,690 --> 00:25:11,710
they have much cooler stuff than us that

00:25:09,100 --> 00:25:13,960
way the other question that often comes

00:25:11,710 --> 00:25:16,510
up as mezzos mezzos is a multi machine

00:25:13,960 --> 00:25:19,270
kernel turns a data center into sort of

00:25:16,510 --> 00:25:20,320
a logical system can do containers and

00:25:19,270 --> 00:25:21,520
they've added a lot of features around

00:25:20,320 --> 00:25:22,090
containers but that's not where it

00:25:21,520 --> 00:25:24,190
started

00:25:22,090 --> 00:25:27,550
customarily it can do other sites types

00:25:24,190 --> 00:25:29,350
of distributed jobs like Hadoop a lot

00:25:27,550 --> 00:25:30,880
easier kubernetes on the other hand is

00:25:29,350 --> 00:25:32,440
management software for containers has

00:25:30,880 --> 00:25:35,650
strong opinions about service discovery

00:25:32,440 --> 00:25:38,080
and logging it can run on top of mezzos

00:25:35,650 --> 00:25:40,180
and in fact right now if you want Hale

00:25:38,080 --> 00:25:41,920
high availability for kubernetes meza

00:25:40,180 --> 00:25:47,110
running on top of mezzos is the way to

00:25:41,920 --> 00:25:48,400
get it and so that those are the two I

00:25:47,110 --> 00:25:50,050
get a lot of questions about the docker

00:25:48,400 --> 00:25:51,580
components and Mezo so if you ask me

00:25:50,050 --> 00:25:54,040
questions later as when I stop for

00:25:51,580 --> 00:25:57,400
questions I may or may not be able to go

00:25:54,040 --> 00:25:58,480
deeper into different technologies as

00:25:57,400 --> 00:26:00,430
these the ones I get asked about a lot

00:25:58,480 --> 00:26:01,870
it's also important to note that we have

00:26:00,430 --> 00:26:06,130
really good relationships with both

00:26:01,870 --> 00:26:10,200
docker and the meso steam they were all

00:26:06,130 --> 00:26:13,570
at like when we unveiled kubernetes 1.0

00:26:10,200 --> 00:26:15,970
and so we all like we're all on

00:26:13,570 --> 00:26:18,010
communication and it's actually I'm

00:26:15,970 --> 00:26:20,800
shocked that it's a relatively happy and

00:26:18,010 --> 00:26:22,030
pleasant set of interactions between all

00:26:20,800 --> 00:26:23,890
these teams that are working on all the

00:26:22,030 --> 00:26:27,910
similar technology it's not very

00:26:23,890 --> 00:26:29,140
competitive it's more it's much more

00:26:27,910 --> 00:26:32,920
cooperative than I thought it was going

00:26:29,140 --> 00:26:35,920
to be so I want to talk about container

00:26:32,920 --> 00:26:38,290
engine now I've mostly talked about

00:26:35,920 --> 00:26:39,370
developing on kubernetes I haven't

00:26:38,290 --> 00:26:41,020
talked about like administering

00:26:39,370 --> 00:26:44,080
kubernetes I mentioned briefly that I

00:26:41,020 --> 00:26:45,700
set up a cluster that process goes

00:26:44,080 --> 00:26:47,890
something like this right you can set up

00:26:45,700 --> 00:26:51,400
a cluster you choose an infrastructure

00:26:47,890 --> 00:26:53,530
you need to be Google can be Amazon it

00:26:51,400 --> 00:26:57,220
can be Microsoft it can be Rackspace and

00:26:53,530 --> 00:26:59,410
be a whole lot of others I may have a

00:26:57,220 --> 00:27:01,360
skin in this game right I may have a

00:26:59,410 --> 00:27:02,890
preference but obviously you can set up

00:27:01,360 --> 00:27:05,020
at all of those and our Doc's will tell

00:27:02,890 --> 00:27:06,610
you how to set up on all of those I

00:27:05,020 --> 00:27:08,320
won't say that one is better than the

00:27:06,610 --> 00:27:10,450
others

00:27:08,320 --> 00:27:13,690
then you choose an OS right core OS

00:27:10,450 --> 00:27:16,360
atomic of Red Hat Linux or Debian or

00:27:13,690 --> 00:27:19,060
Sando s bun to you then provision

00:27:16,360 --> 00:27:20,320
machines you boot some VMs up you

00:27:19,060 --> 00:27:24,690
install the cube components you're gonna

00:27:20,320 --> 00:27:27,460
need n plus one a master and a node and

00:27:24,690 --> 00:27:29,350
then you can figure your networking the

00:27:27,460 --> 00:27:31,390
IP ranges for the pod services or

00:27:29,350 --> 00:27:32,800
service discovery network and then you

00:27:31,390 --> 00:27:37,090
start clustering services things like

00:27:32,800 --> 00:27:39,490
DNS monitoring logging and then you have

00:27:37,090 --> 00:27:44,500
to manage kernel upgrades and OS updates

00:27:39,490 --> 00:27:47,110
and all that or if you're a Google cloud

00:27:44,500 --> 00:27:49,000
platform customer you go to container

00:27:47,110 --> 00:27:51,940
engine and you'll get this screen and

00:27:49,000 --> 00:27:54,430
there's a little button let's just set

00:27:51,940 --> 00:27:57,580
up a container cluster and you press it

00:27:54,430 --> 00:28:00,760
and then you have you you have a Cooper

00:27:57,580 --> 00:28:05,140
Nettie's cluster so container engine is

00:28:00,760 --> 00:28:07,600
a hosted version of kubernetes we set a

00:28:05,140 --> 00:28:09,250
few smart defaults and we set up the dns

00:28:07,600 --> 00:28:10,600
server for you in the logging and the

00:28:09,250 --> 00:28:13,300
monitoring we integrated with all our

00:28:10,600 --> 00:28:16,000
stuff but it is still kubernetes you

00:28:13,300 --> 00:28:17,680
still interact with it using cube CTL

00:28:16,000 --> 00:28:20,560
which is exactly what you do if it was

00:28:17,680 --> 00:28:22,420
installed on Prem and in fact that is

00:28:20,560 --> 00:28:24,160
what I am running on because I don't

00:28:22,420 --> 00:28:25,450
like setting up all that stuff I like

00:28:24,160 --> 00:28:28,660
pressing the button and have it do it

00:28:25,450 --> 00:28:31,150
for me and what I like about this is

00:28:28,660 --> 00:28:33,670
that that's a lot of stuff right like

00:28:31,150 --> 00:28:36,130
you're you're building here you're

00:28:33,670 --> 00:28:37,570
building machines and then putting you

00:28:36,130 --> 00:28:39,010
know maybe you're taking physical

00:28:37,570 --> 00:28:40,270
machines and then putting VMS on them

00:28:39,010 --> 00:28:41,500
and then putting kubernetes on top of

00:28:40,270 --> 00:28:43,990
those and then putting containers inside

00:28:41,500 --> 00:28:48,130
those it's like a long way to go to just

00:28:43,990 --> 00:28:50,560
run a hello world right it's it's it's a

00:28:48,130 --> 00:28:52,240
big kind of undertaking so what I like

00:28:50,560 --> 00:28:53,710
about container engines and it really

00:28:52,240 --> 00:28:56,970
allows you to dip your feet in without

00:28:53,710 --> 00:28:59,980
necessarily like going whole hog

00:28:56,970 --> 00:29:02,260
container registry is a hosted container

00:28:59,980 --> 00:29:03,940
registry that goes along with container

00:29:02,260 --> 00:29:05,230
engine it's you can make it private so

00:29:03,940 --> 00:29:07,750
if you don't want to share your images

00:29:05,230 --> 00:29:11,650
with the world you don't have to you can

00:29:07,750 --> 00:29:14,050
be used with kubernetes engine or not

00:29:11,650 --> 00:29:16,090
and so I'm now I'm getting at my wrap-up

00:29:14,050 --> 00:29:18,880
section also I'll stop for questions

00:29:16,090 --> 00:29:20,470
after this but basically Google has been

00:29:18,880 --> 00:29:22,740
developing and using containers to

00:29:20,470 --> 00:29:25,290
manager applications for over 10 years

00:29:22,740 --> 00:29:27,970
I'm gonna have this discussion about

00:29:25,290 --> 00:29:30,100
docker being horseshit and got to a

00:29:27,970 --> 00:29:31,540
bigger thing about containers someone

00:29:30,100 --> 00:29:33,280
kind of asked me after like well how

00:29:31,540 --> 00:29:35,170
does Google feel about the sweet we love

00:29:33,280 --> 00:29:40,750
containers we think this technology is

00:29:35,170 --> 00:29:43,870
fantastic but we are managing stuff at a

00:29:40,750 --> 00:29:46,750
scale that not a lot of people run into

00:29:43,870 --> 00:29:48,280
right like so looking at this like

00:29:46,750 --> 00:29:52,420
everything at Google runs on containers

00:29:48,280 --> 00:29:55,330
Gmail web search maps MapReduce jobs GFS

00:29:52,420 --> 00:29:58,929
Colossus even Google's cloud platform

00:29:55,330 --> 00:30:00,179
VMs no it's not true VMs or VM right but

00:29:58,929 --> 00:30:02,710
the container is tell them what to do

00:30:00,179 --> 00:30:04,179
it's like this is a container this is a

00:30:02,710 --> 00:30:06,720
container it even our VMs our containers

00:30:04,179 --> 00:30:09,460
what no just kidding

00:30:06,720 --> 00:30:12,490
no but containers containers through all

00:30:09,460 --> 00:30:15,940
the management for them and run them we

00:30:12,490 --> 00:30:17,740
launch two billion containers a week so

00:30:15,940 --> 00:30:19,809
maybe we're a little vested in

00:30:17,740 --> 00:30:22,360
containers and we you know we we we

00:30:19,809 --> 00:30:24,520
think this technology is great but I I

00:30:22,360 --> 00:30:26,110
caution you

00:30:24,520 --> 00:30:29,110
we think that containers are way to

00:30:26,110 --> 00:30:32,290
manage scale and we have scale that's at

00:30:29,110 --> 00:30:34,120
a very high level you should carefully

00:30:32,290 --> 00:30:36,880
consider whether running everything on

00:30:34,120 --> 00:30:38,679
containers is right for you like I said

00:30:36,880 --> 00:30:40,690
that's a lot of work and maybe there are

00:30:38,679 --> 00:30:43,030
other solutions that make more sense you

00:30:40,690 --> 00:30:44,679
really need to test this out and dip

00:30:43,030 --> 00:30:46,900
your dip your feet into it before you're

00:30:44,679 --> 00:30:48,220
crazy so when I say you should carefully

00:30:46,900 --> 00:30:50,170
consider whether running everything on

00:30:48,220 --> 00:30:52,030
containers is right for you please I beg

00:30:50,170 --> 00:30:54,130
you do not here you should run

00:30:52,030 --> 00:30:56,350
everything on containers because that is

00:30:54,130 --> 00:30:58,270
not what I am saying saying you should

00:30:56,350 --> 00:30:59,500
you should carefully consider whether

00:30:58,270 --> 00:31:01,890
running everything on containers is

00:30:59,500 --> 00:31:01,890
right for you

00:31:01,990 --> 00:31:07,330
Cooper Nettie's is open source so

00:31:04,360 --> 00:31:09,790
kubernetes dot IO it is started it was

00:31:07,330 --> 00:31:11,830
started by Google but we have turned it

00:31:09,790 --> 00:31:14,590
over to the foundation now so it is

00:31:11,830 --> 00:31:16,270
technically not us running it anymore

00:31:14,590 --> 00:31:18,160
although the foundation is all run by

00:31:16,270 --> 00:31:21,360
people nuts but you know like having a

00:31:18,160 --> 00:31:24,179
separation is good and

00:31:21,360 --> 00:31:29,130
they have people on IRC all the time

00:31:24,179 --> 00:31:31,770
that's kubernetes twitter handle road

00:31:29,130 --> 00:31:33,870
map right now kubernetes is at 1.0 we

00:31:31,770 --> 00:31:36,120
are looking to release 1.1 in late

00:31:33,870 --> 00:31:37,380
october that is the target

00:31:36,120 --> 00:31:41,309
i don't think we're gonna hit that

00:31:37,380 --> 00:31:44,250
target as as i saw the release candidate

00:31:41,309 --> 00:31:45,900
had slipped a little bit but i mean it's

00:31:44,250 --> 00:31:51,110
going to come out it's gonna come out

00:31:45,900 --> 00:31:53,340
within a month probably of what's that

00:31:51,110 --> 00:31:58,799
that's true that's true

00:31:53,340 --> 00:32:00,960
i yes lawyers had gotten to me so what's

00:31:58,799 --> 00:32:03,059
that going to entail support for dr 1.8

00:32:00,960 --> 00:32:04,559
graceful pot termination instead of

00:32:03,059 --> 00:32:06,950
shooting them in the head you can kind

00:32:04,559 --> 00:32:10,230
of gently gently put them to sleep

00:32:06,950 --> 00:32:13,530
improvements to cube CTL support for up

00:32:10,230 --> 00:32:17,340
to 250 no clusters right now recommended

00:32:13,530 --> 00:32:20,490
is a hundred you can go more than that

00:32:17,340 --> 00:32:22,860
but here there be dragons hopefully

00:32:20,490 --> 00:32:25,590
we'll get it to 250 node clusters by

00:32:22,860 --> 00:32:27,919
then also horizontal pod scaling so

00:32:25,590 --> 00:32:27,919
right now

00:32:28,250 --> 00:32:33,440
like you have to some something has to

00:32:30,409 --> 00:32:36,919
tell the pods to scale to do that

00:32:33,440 --> 00:32:38,539
command in 1.1 we'll just if you're

00:32:36,919 --> 00:32:40,909
you're having too much load will add

00:32:38,539 --> 00:32:42,320
more pods until I don't know until the

00:32:40,909 --> 00:32:44,240
server runs out of memory or something I

00:32:42,320 --> 00:32:47,000
don't know that'll tell me details of

00:32:44,240 --> 00:32:48,230
that and then job objects so if you like

00:32:47,000 --> 00:32:50,419
kubernetes but are wondering what the

00:32:48,230 --> 00:32:52,100
hell I'm getting into it's why I really

00:32:50,419 --> 00:32:53,150
point out that container engine can make

00:32:52,100 --> 00:32:57,230
dipping your toes and a little bit

00:32:53,150 --> 00:32:58,789
easier also if you haven't tried Google

00:32:57,230 --> 00:33:01,159
cloud platform and you want to dip your

00:32:58,789 --> 00:33:04,100
toes in we give you $200 of free credit

00:33:01,159 --> 00:33:07,640
for 3 for the 300 for two months or 203

00:33:04,100 --> 00:33:10,789
on it's it's it's 300 for two months

00:33:07,640 --> 00:33:14,570
it's 300 for two months it's $300 for

00:33:10,789 --> 00:33:17,720
two months and you will not no matter

00:33:14,570 --> 00:33:20,690
how what you do you will not spend $300

00:33:17,720 --> 00:33:22,549
on kubernetes clusters you know in two

00:33:20,690 --> 00:33:23,900
months you won't so you can you can

00:33:22,549 --> 00:33:26,750
really play with it and dip your feet in

00:33:23,900 --> 00:33:30,799
and see what it is so I want to say

00:33:26,750 --> 00:33:32,030
thank you if you want to I'll pause for

00:33:30,799 --> 00:33:34,280
questions if you want to get in touch

00:33:32,030 --> 00:33:36,980
with me TP Ryan at Twitter on Twitter is

00:33:34,280 --> 00:33:38,840
probably the best way either heckle me

00:33:36,980 --> 00:33:42,770
or ask me questions either way it works

00:33:38,840 --> 00:33:44,659
the press o is not up this is a lie it

00:33:42,770 --> 00:33:46,039
will be after I've done I was changing

00:33:44,659 --> 00:33:46,400
it last night and changing it this

00:33:46,039 --> 00:33:49,340
morning

00:33:46,400 --> 00:33:52,159
so bitly TP ryan - chaos it'll be up

00:33:49,340 --> 00:33:53,210
probably in the next ten minutes but

00:33:52,159 --> 00:33:57,970
with that I'm gonna break for questions

00:33:53,210 --> 00:33:57,970
anybody got questions yes

00:34:05,669 --> 00:34:11,379
okay so all you want to do route all

00:34:09,460 --> 00:34:13,089
your communication through services and

00:34:11,379 --> 00:34:14,740
you can talk directly pot to pot but it

00:34:13,089 --> 00:34:16,389
makes more sense to do services and

00:34:14,740 --> 00:34:18,129
basically the way services work is I say

00:34:16,389 --> 00:34:21,220
all right

00:34:18,129 --> 00:34:25,450
these machines are my sequel right and

00:34:21,220 --> 00:34:27,099
in that case I had a one pod service so

00:34:25,450 --> 00:34:29,589
there really didn't it wasn't that

00:34:27,099 --> 00:34:32,859
necessary but I could if I had multiple

00:34:29,589 --> 00:34:34,960
sequel server set up all connected to

00:34:32,859 --> 00:34:36,609
the same service and then that's how the

00:34:34,960 --> 00:34:41,830
front ends would talk to it through the

00:34:36,609 --> 00:34:44,320
service and not directly to it yeah

00:34:41,830 --> 00:34:46,960
there was a mo file I was trying to

00:34:44,320 --> 00:34:49,359
balance like show and config files and

00:34:46,960 --> 00:34:52,480
boring people to death verses but yeah

00:34:49,359 --> 00:34:54,490
so everything that ran when I when I hit

00:34:52,480 --> 00:34:58,770
a pause it was processing the mo file

00:34:54,490 --> 00:34:58,770
and doing something based on it yes

00:35:03,830 --> 00:35:10,520
correct yeah

00:35:06,770 --> 00:35:10,520
the bestest Oh

00:35:12,470 --> 00:35:18,950
correct yep yep

00:35:16,030 --> 00:35:25,310
yes high-availability is coming it's I

00:35:18,950 --> 00:35:27,770
think it's Road bat for version 1.5 no

00:35:25,310 --> 00:35:30,079
no not that not that far it's supposed

00:35:27,770 --> 00:35:31,670
to be out next year and right now you

00:35:30,079 --> 00:35:33,440
can get high availability with mezzos

00:35:31,670 --> 00:35:34,819
I'm not entirely sure I just seen the

00:35:33,440 --> 00:35:45,050
bullet point somewhere that you can do

00:35:34,819 --> 00:35:47,060
that like okay right yep yep now we need

00:35:45,050 --> 00:35:51,140
we need to get multiple masters working

00:35:47,060 --> 00:35:52,310
and we're working on it okay I've been

00:35:51,140 --> 00:35:55,599
really heavy in this section so I'm

00:35:52,310 --> 00:35:55,599
gonna go or I'll come back yeah

00:35:59,650 --> 00:36:03,770
yeah that's a great question so some

00:36:02,390 --> 00:36:06,590
people know about Borg which is our

00:36:03,770 --> 00:36:08,990
internal container scheduling service it

00:36:06,590 --> 00:36:11,300
is not the same source code those guys

00:36:08,990 --> 00:36:13,430
that worked on that basically got

00:36:11,300 --> 00:36:14,750
together and said what if we could do it

00:36:13,430 --> 00:36:15,680
without making all the mistakes we made

00:36:14,750 --> 00:36:18,200
for the last 10 years

00:36:15,680 --> 00:36:20,600
and so they built it from scratch but

00:36:18,200 --> 00:36:22,850
it's all based in like what we learned

00:36:20,600 --> 00:36:24,650
internally about it more importantly

00:36:22,850 --> 00:36:26,360
it's based on a lot of the mistakes we

00:36:24,650 --> 00:36:28,490
made internally like we've we've like

00:36:26,360 --> 00:36:30,650
don't go down that path that's why pods

00:36:28,490 --> 00:36:31,790
were there for the beginning like we've

00:36:30,650 --> 00:36:33,470
sort of figured out some of the stuff

00:36:31,790 --> 00:36:37,640
and so it's definitely the same

00:36:33,470 --> 00:36:39,740
engineers and it may or may not at some

00:36:37,640 --> 00:36:43,040
point go internal too but right now

00:36:39,740 --> 00:36:46,790
they're they are separate or the for

00:36:43,040 --> 00:36:49,700
that express purpose that we we figured

00:36:46,790 --> 00:36:52,310
out what we should not do and got to fix

00:36:49,700 --> 00:36:55,010
those yes

00:36:52,310 --> 00:37:00,050
API compatibilities right now it's

00:36:55,010 --> 00:37:02,360
docker 1.7 and 1:1 kubernetes 1.1 will

00:37:00,050 --> 00:37:05,450
be compatible with docker Nettie docker

00:37:02,360 --> 00:37:08,480
Nettie's whoa sorry

00:37:05,450 --> 00:37:10,220
kubernetes Coubertin actually I know

00:37:08,480 --> 00:37:12,410
somebody who is trying to run docker on

00:37:10,220 --> 00:37:14,510
docker and whenever he talks about this

00:37:12,410 --> 00:37:16,730
I just played the inception theme like I

00:37:14,510 --> 00:37:23,210
don't even I don't even let him talk

00:37:16,730 --> 00:37:27,340
and so 1.8 is respect for 1.1 1.8 if

00:37:23,210 --> 00:37:27,340
docker for kubernetes 1.1 yes

00:37:40,049 --> 00:37:48,319
I'd argue probably not a lot right

00:37:43,319 --> 00:37:50,640
like I don't it's it's a tool right like

00:37:48,319 --> 00:37:52,199
it might work for you if you're already

00:37:50,640 --> 00:37:53,910
if you're already basically achieving

00:37:52,199 --> 00:37:57,829
this sort of environment without having

00:37:53,910 --> 00:37:57,829
to without having to switch why switch

00:37:57,859 --> 00:38:02,039
any other questions all right I'll give

00:38:00,119 --> 00:38:05,809
it one - all right thank you guys very

00:38:02,039 --> 00:38:05,809

YouTube URL: https://www.youtube.com/watch?v=qs04iS1bE3A


