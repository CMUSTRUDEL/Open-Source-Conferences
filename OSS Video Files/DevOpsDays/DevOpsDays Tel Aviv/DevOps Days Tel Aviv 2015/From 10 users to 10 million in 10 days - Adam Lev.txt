Title: From 10 users to 10 million in 10 days - Adam Lev
Publication date: 2015-11-01
Playlist: DevOps Days Tel Aviv 2015
Description: 
	http://www.devopsdays.org/events/2015-telaviv/

We scaled a clients python software using storm (streamparse) and ELK over AWS with 3 programmers in around 10 days of work, most of the work was deleting unheeded features, and adapting the existing code to the new system design. The first stage was to note the entire flow of the system and spread the critical sections as far out as possible (this included moving from object oriented to event oriented, stateless design). The second stage was to choose a suitable stack for us - AWS was best for out scaling per dollar, streamparse was best for python over storm (storm was best for that kind of stateless flow) and ELK was best for the logging we needed.

About the speaker - Adam Lev

A software architect with a keen passion for doing things right. Rich experience in development, optimization and deployment over Linux (mostly C/C++ over debian & redhat). Solid background in distributed computing, in particular the MOSIX and OMPI systems.
Captions: 
	00:00:11,299 --> 00:00:16,260
okay so my name is Adam I'm from coming

00:00:14,580 --> 00:00:19,740
ice cold tomorrow we do scale up for

00:00:16,260 --> 00:00:23,190
startups and I have a very orange slides

00:00:19,740 --> 00:00:25,590
for you versed oversight um anyway so

00:00:23,190 --> 00:00:26,970
I'm here today about a very good

00:00:25,590 --> 00:00:29,760
experience you had with a client of ours

00:00:26,970 --> 00:00:32,009
they're called user and basically what

00:00:29,760 --> 00:00:35,699
we did we just change a single element

00:00:32,009 --> 00:00:38,069
in their stack from from Sarah to stop

00:00:35,699 --> 00:00:41,489
to storm and we had a huge huge huge

00:00:38,069 --> 00:00:44,219
advantage um as you can see from from

00:00:41,489 --> 00:00:45,569
the slide actually so what the one has

00:00:44,219 --> 00:00:48,479
to do is to take their very nice product

00:00:45,569 --> 00:00:50,879
which was mostly pythonic had some

00:00:48,479 --> 00:00:54,809
stateful parts and was relatively small

00:00:50,879 --> 00:00:56,909
scale and just make it work for for

00:00:54,809 --> 00:00:58,079
basically every user in Tijuana and the

00:00:56,909 --> 00:01:00,089
conical a small village it's like

00:00:58,079 --> 00:01:01,829
something like two or three million

00:01:00,089 --> 00:01:03,239
people and most of them have more than

00:01:01,829 --> 00:01:04,470
one sailor phone and it's some seller

00:01:03,239 --> 00:01:07,950
phones have more than one instance of

00:01:04,470 --> 00:01:11,039
the app so it was a serious job for the

00:01:07,950 --> 00:01:14,009
backend and basically what the app does

00:01:11,039 --> 00:01:16,619
is it's doing geo matching it takes

00:01:14,009 --> 00:01:19,920
active users and live questions which

00:01:16,619 --> 00:01:22,590
can both move can move around the space

00:01:19,920 --> 00:01:25,469
and they match it matches them according

00:01:22,590 --> 00:01:27,930
to some business logic and that let us

00:01:25,469 --> 00:01:29,609
do you think is in critical sections

00:01:27,930 --> 00:01:31,380
because that that's the way stone works

00:01:29,609 --> 00:01:34,350
so we think of those critical sections

00:01:31,380 --> 00:01:39,329
those parts of our which are extremely

00:01:34,350 --> 00:01:41,070
high heavy incomplete and we try to

00:01:39,329 --> 00:01:44,340
minimize their state dependency between

00:01:41,070 --> 00:01:47,999
each other and not only that we try to

00:01:44,340 --> 00:01:49,409
do it any way that we can we can if we

00:01:47,999 --> 00:01:51,299
can eliminate state at all it would be

00:01:49,409 --> 00:01:54,179
awesome because that that's why we can

00:01:51,299 --> 00:01:56,369
achieve maximum scalability so that take

00:01:54,179 --> 00:02:00,060
fresh a real fresh take on Geographic

00:01:56,369 --> 00:02:02,819
matching and and basically what we did

00:02:00,060 --> 00:02:05,850
it was mostly use a whiteboard it most

00:02:02,819 --> 00:02:08,550
of the work was done by just redesigning

00:02:05,850 --> 00:02:09,990
the entire system when we found those

00:02:08,550 --> 00:02:11,850
critical sections the first radial

00:02:09,990 --> 00:02:16,040
section is sample space reduction which

00:02:11,850 --> 00:02:18,290
is a big way of saying let's take just

00:02:16,040 --> 00:02:21,079
part of the entire world in order to do

00:02:18,290 --> 00:02:23,060
a you're a location on and that's a

00:02:21,079 --> 00:02:25,310
that's a fairly common technique it's

00:02:23,060 --> 00:02:26,840
just called soft decisions and we did

00:02:25,310 --> 00:02:30,560
that using our two which is a python

00:02:26,840 --> 00:02:35,150
class in order to stained in the you in

00:02:30,560 --> 00:02:36,829
their clients ecosystem and well artery

00:02:35,150 --> 00:02:38,420
is behind the scenes it's made it's

00:02:36,829 --> 00:02:40,010
built with their see so it's we give we

00:02:38,420 --> 00:02:41,269
got good performance from it so the

00:02:40,010 --> 00:02:43,370
second video section was optimal

00:02:41,269 --> 00:02:45,829
matching we took those soft decisions

00:02:43,370 --> 00:02:48,470
those sub sets of the entire data data

00:02:45,829 --> 00:02:49,849
and we applied our business logic or the

00:02:48,470 --> 00:02:52,549
clients because logic to thursday to

00:02:49,849 --> 00:02:55,129
this data and we just do this using

00:02:52,549 --> 00:02:59,299
redness and the code is actually just

00:02:55,129 --> 00:03:01,840
runs inside of the storm cluster and it

00:02:59,299 --> 00:03:04,370
gave us it gave us very nice results um

00:03:01,840 --> 00:03:06,109
but the problem with it the reels was

00:03:04,370 --> 00:03:08,299
too nice because we had some mismatch

00:03:06,109 --> 00:03:10,340
handling to do and because they're the

00:03:08,299 --> 00:03:12,769
matching the optimal magic algorithm

00:03:10,340 --> 00:03:15,799
works so fast we had concurrency

00:03:12,769 --> 00:03:17,689
problems so basically what we what when

00:03:15,799 --> 00:03:20,389
you have a message that cannot find a

00:03:17,689 --> 00:03:21,979
match you have to dehydrate it just to

00:03:20,389 --> 00:03:24,340
put it on the side for a while and this

00:03:21,979 --> 00:03:27,769
well can vary from seconds today's

00:03:24,340 --> 00:03:29,690
depends on the business logic and that

00:03:27,769 --> 00:03:32,209
required for us to build our algorithm

00:03:29,690 --> 00:03:36,019
basically from scratch in its kind of

00:03:32,209 --> 00:03:37,849
fresh algorithm so we need to do we need

00:03:36,019 --> 00:03:39,650
we had to do a lot of work on it and but

00:03:37,849 --> 00:03:42,440
we decide let's look at the logs first

00:03:39,650 --> 00:03:45,199
and using our elk based logs we just saw

00:03:42,440 --> 00:03:48,319
that most of our use of our use of this

00:03:45,199 --> 00:03:50,479
classes is fairly basic and so we can do

00:03:48,319 --> 00:03:53,209
Justin basic input algorithm input

00:03:50,479 --> 00:03:54,739
drooping algorithm so we have those

00:03:53,209 --> 00:03:56,599
suits three sections and we want to put

00:03:54,739 --> 00:03:59,299
them together so as we as I said before

00:03:56,599 --> 00:04:02,150
we started using a storm that's the

00:03:59,299 --> 00:04:03,560
that's where we start from so and strong

00:04:02,150 --> 00:04:05,540
what you do just you have all these

00:04:03,560 --> 00:04:07,250
three you have all these critical

00:04:05,540 --> 00:04:08,599
sections in just ok so this critical

00:04:07,250 --> 00:04:11,810
section connects the district of section

00:04:08,599 --> 00:04:14,989
users using this API give or take or

00:04:11,810 --> 00:04:17,539
this couple and we just did you just

00:04:14,989 --> 00:04:18,560
take your Python code um Python code

00:04:17,539 --> 00:04:21,229
because we used stream posh you're not

00:04:18,560 --> 00:04:25,099
really storm um and just shove it all in

00:04:21,229 --> 00:04:27,290
we wrote is very like a 40 line a

00:04:25,099 --> 00:04:30,590
closure code just to

00:04:27,290 --> 00:04:33,530
build the topology and by using screen

00:04:30,590 --> 00:04:36,470
pass which we kept using the declines

00:04:33,530 --> 00:04:38,840
ecosystem which was bitin and that was

00:04:36,470 --> 00:04:41,660
that was the extreme value we got from

00:04:38,840 --> 00:04:44,120
only using one stack choice um using

00:04:41,660 --> 00:04:48,460
storm and specifically stream part which

00:04:44,120 --> 00:04:50,900
is the piping port of storm thank you

00:04:48,460 --> 00:04:55,540
you're welcome to look at our blog

00:04:50,900 --> 00:04:55,540

YouTube URL: https://www.youtube.com/watch?v=sVQAD8pSokE


