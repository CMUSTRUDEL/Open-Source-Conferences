Title: Elastic: What Is Great About Modern Monolithic Applications? | Philipp Krenn | Community Summit TLV
Publication date: 2020-12-26
Playlist: Community Summit TLV 2020
Description: 
	You only have ONE repository, build artifact, deployment step, process, and version that you can run locally but still scale horizontally. Sounds too good to be true and you think it must be a theoretical example? Far from itâ€¦You might even be running such a monolith yourself. Though there are of course some tradeoffs that we are covering as well.
Captions: 
	00:00:02,880 --> 00:00:05,940
[Music]

00:00:42,840 --> 00:00:47,440
my

00:00:44,160 --> 00:00:51,920
i think you're muted sorry

00:00:47,440 --> 00:00:51,920
i've been muted all this time yes sorry

00:00:52,719 --> 00:00:58,800
okay so um i was talking about swag

00:00:56,559 --> 00:01:00,960
uh we are going to give away swag they

00:00:58,800 --> 00:01:02,800
can i was saying that everyone can go to

00:01:00,960 --> 00:01:06,320
our eventbrite page and

00:01:02,800 --> 00:01:09,680
select a station where they can um

00:01:06,320 --> 00:01:13,840
actually pick up the swag um but yeah

00:01:09,680 --> 00:01:13,840
so what's up

00:01:16,080 --> 00:01:19,840
do you want to just get started with

00:01:17,600 --> 00:01:21,920
your talk um

00:01:19,840 --> 00:01:24,720
and everyone watching is welcome to join

00:01:21,920 --> 00:01:26,400
us at the discord channel

00:01:24,720 --> 00:01:27,920
and post your questions there we'll be

00:01:26,400 --> 00:01:30,880
answering them

00:01:27,920 --> 00:01:31,680
so please philip the stage is yours

00:01:30,880 --> 00:01:34,640
thanks a lot

00:01:31,680 --> 00:01:36,640
hi i'm phillip those who don't know me

00:01:34,640 --> 00:01:38,799
um i'm based in vienna austria

00:01:36,640 --> 00:01:41,840
so virtual events can be fun because i

00:01:38,799 --> 00:01:44,720
can just do a talk in tel aviv today

00:01:41,840 --> 00:01:46,399
so i want to show you or discuss let's

00:01:44,720 --> 00:01:47,280
say it's a discussion point about what

00:01:46,399 --> 00:01:50,000
is great about

00:01:47,280 --> 00:01:51,759
monolithic applications and i know we

00:01:50,000 --> 00:01:53,600
have all been discussing how bad

00:01:51,759 --> 00:01:55,600
monolithic applications are and that you

00:01:53,600 --> 00:01:58,719
want to do microservices

00:01:55,600 --> 00:02:00,719
but there are also upsides to not

00:01:58,719 --> 00:02:02,000
breaking up things into very small

00:02:00,719 --> 00:02:04,960
pieces

00:02:02,000 --> 00:02:05,840
so um the monomythic application that i

00:02:04,960 --> 00:02:08,800
want to talk about

00:02:05,840 --> 00:02:09,759
is elasticsearch maybe you're already

00:02:08,800 --> 00:02:12,640
using it good

00:02:09,759 --> 00:02:13,520
if not maybe we have a use case for us

00:02:12,640 --> 00:02:15,040
let us know

00:02:13,520 --> 00:02:17,200
so the first question that people might

00:02:15,040 --> 00:02:19,360
say like well is elasticsearch even

00:02:17,200 --> 00:02:22,239
something that is not a microservice or

00:02:19,360 --> 00:02:22,800
is it like really a proper monolith and

00:02:22,239 --> 00:02:25,360
looking

00:02:22,800 --> 00:02:26,000
at the lines of code and how much is

00:02:25,360 --> 00:02:28,400
there

00:02:26,000 --> 00:02:30,080
um i would say it's definitely not in a

00:02:28,400 --> 00:02:32,959
microservice

00:02:30,080 --> 00:02:35,120
area of how much code there is so we are

00:02:32,959 --> 00:02:36,480
close to two million lines of java code

00:02:35,120 --> 00:02:38,720
by now

00:02:36,480 --> 00:02:39,920
plus lots of other stuff in that

00:02:38,720 --> 00:02:42,160
repository so

00:02:39,920 --> 00:02:43,120
let's assume this is definitely not a

00:02:42,160 --> 00:02:45,840
microservice

00:02:43,120 --> 00:02:47,519
what is great about this it's one single

00:02:45,840 --> 00:02:49,440
repository

00:02:47,519 --> 00:02:51,920
granted it will take a little while to

00:02:49,440 --> 00:02:52,800
clone it but once you have cloned it um

00:02:51,920 --> 00:02:54,800
you're pretty much

00:02:52,800 --> 00:02:56,959
done and you don't need any extra

00:02:54,800 --> 00:02:57,519
tooling to sync multiple repositories

00:02:56,959 --> 00:03:00,000
you have

00:02:57,519 --> 00:03:02,400
atomic commits so if you change anything

00:03:00,000 --> 00:03:05,120
it's all there in one place it's just

00:03:02,400 --> 00:03:08,000
one per request away you don't need to

00:03:05,120 --> 00:03:10,879
have anything in sync between different

00:03:08,000 --> 00:03:13,599
repositories and branches

00:03:10,879 --> 00:03:15,599
just go ahead like get this easy to use

00:03:13,599 --> 00:03:17,280
with a single repository

00:03:15,599 --> 00:03:19,120
there's only one single version you

00:03:17,280 --> 00:03:19,519
don't need to kind of like take care of

00:03:19,120 --> 00:03:21,599
like

00:03:19,519 --> 00:03:22,800
how do i mix and match like these 20

00:03:21,599 --> 00:03:24,879
services that they

00:03:22,800 --> 00:03:26,640
form one unique combination that

00:03:24,879 --> 00:03:28,480
actually makes sense together

00:03:26,640 --> 00:03:30,159
there is just one version you can

00:03:28,480 --> 00:03:33,200
actually play along with

00:03:30,159 --> 00:03:34,799
um there is one single build like to

00:03:33,200 --> 00:03:36,879
build the entire thing

00:03:34,799 --> 00:03:38,480
um well you change into the directory

00:03:36,879 --> 00:03:42,159
and then since this is using

00:03:38,480 --> 00:03:44,239
gradle um you just run gradle assemble

00:03:42,159 --> 00:03:46,000
and this is it again it will take a

00:03:44,239 --> 00:03:48,080
little while until that one is

00:03:46,000 --> 00:03:49,360
done but it's still from an operational

00:03:48,080 --> 00:03:51,680
perspective here and

00:03:49,360 --> 00:03:52,560
it's very easy to just build the entire

00:03:51,680 --> 00:03:55,200
binary in

00:03:52,560 --> 00:03:57,040
one single go there's also one single

00:03:55,200 --> 00:04:00,879
end point that you can use to

00:03:57,040 --> 00:04:02,879
talk to um so it's not complicated to

00:04:00,879 --> 00:04:04,080
figure out where is what running and how

00:04:02,879 --> 00:04:06,720
do i talk to it

00:04:04,080 --> 00:04:08,000
well there is one thing and you can talk

00:04:06,720 --> 00:04:10,799
to that because well

00:04:08,000 --> 00:04:12,720
it's just for monolith um it's also only

00:04:10,799 --> 00:04:15,200
one single process so it

00:04:12,720 --> 00:04:15,760
is easy to monitor that process if you

00:04:15,200 --> 00:04:18,000
want to

00:04:15,760 --> 00:04:20,239
debug it you can just attach your

00:04:18,000 --> 00:04:21,919
debugger to that one single process

00:04:20,239 --> 00:04:24,720
um and you don't have to worry about

00:04:21,919 --> 00:04:26,240
like oh what are all these services that

00:04:24,720 --> 00:04:27,759
are running which ones do i need to

00:04:26,240 --> 00:04:29,759
instrument to debug right now

00:04:27,759 --> 00:04:30,880
there's just one process that you can

00:04:29,759 --> 00:04:33,840
talk to and

00:04:30,880 --> 00:04:36,400
well it does scale so you can just

00:04:33,840 --> 00:04:39,120
multiply that single monolith and run

00:04:36,400 --> 00:04:39,680
that multiple times and that just works

00:04:39,120 --> 00:04:41,360
um

00:04:39,680 --> 00:04:43,520
and you will need at least three so for

00:04:41,360 --> 00:04:45,440
example two would be very bad because it

00:04:43,520 --> 00:04:48,000
needs this majority quorum

00:04:45,440 --> 00:04:49,280
um but it does just scale and you can

00:04:48,000 --> 00:04:52,560
just multiply

00:04:49,280 --> 00:04:55,919
the the monolith n times to have

00:04:52,560 --> 00:04:57,520
n times the capacity even with different

00:04:55,919 --> 00:05:00,080
profiles so you could say

00:04:57,520 --> 00:05:02,160
this node is something that is more

00:05:00,080 --> 00:05:02,639
optimized for having lots of data stored

00:05:02,160 --> 00:05:05,120
in it

00:05:02,639 --> 00:05:06,800
and this one is doing for some this

00:05:05,120 --> 00:05:07,600
other node is doing something very

00:05:06,800 --> 00:05:09,440
quickly so

00:05:07,600 --> 00:05:11,199
i want to have less storage but give it

00:05:09,440 --> 00:05:13,600
more cpu memory and

00:05:11,199 --> 00:05:15,360
faster disks for example so you can just

00:05:13,600 --> 00:05:18,560
run it with different profiles

00:05:15,360 --> 00:05:19,919
it's still the same binary and thing

00:05:18,560 --> 00:05:22,080
even though you don't need to

00:05:19,919 --> 00:05:24,000
differentiate between that

00:05:22,080 --> 00:05:26,240
you don't have any external dependencies

00:05:24,000 --> 00:05:27,840
like you want to run super keeper on the

00:05:26,240 --> 00:05:29,600
side probably you don't really

00:05:27,840 --> 00:05:31,919
want to do that maybe you're used to

00:05:29,600 --> 00:05:33,919
doing that but it's not necessary

00:05:31,919 --> 00:05:35,199
the monolith just has everything that

00:05:33,919 --> 00:05:38,000
you need

00:05:35,199 --> 00:05:38,479
um so there are of course some downsets

00:05:38,000 --> 00:05:40,479
which

00:05:38,479 --> 00:05:41,919
nobody wants to hide it's an

00:05:40,479 --> 00:05:44,000
all-or-nothing upgrade

00:05:41,919 --> 00:05:45,039
so you cannot just say like oh i'll just

00:05:44,000 --> 00:05:46,800
have these few

00:05:45,039 --> 00:05:48,560
versions or canneries that are being

00:05:46,800 --> 00:05:50,560
updated to the next version and then the

00:05:48,560 --> 00:05:52,880
rest will run on an old version

00:05:50,560 --> 00:05:53,680
that's not really that simple or the

00:05:52,880 --> 00:05:56,639
approach that

00:05:53,680 --> 00:05:58,160
you want to use um for this one here um

00:05:56,639 --> 00:05:59,840
you can also not say like oh

00:05:58,160 --> 00:06:02,000
there is this feature subset like this

00:05:59,840 --> 00:06:03,840
this little thing here is nice i'll just

00:06:02,000 --> 00:06:04,479
take that service and reuse it somewhere

00:06:03,840 --> 00:06:06,319
else

00:06:04,479 --> 00:06:08,479
when you can take the code and try to

00:06:06,319 --> 00:06:09,199
reuse it it's not just a little service

00:06:08,479 --> 00:06:11,360
that you can

00:06:09,199 --> 00:06:13,199
take and move elsewhere or break out of

00:06:11,360 --> 00:06:15,280
the the model effectively

00:06:13,199 --> 00:06:17,280
um there's also no no simple mode where

00:06:15,280 --> 00:06:18,880
you say oh just to get started i'll

00:06:17,280 --> 00:06:19,280
leave out half of the services and i

00:06:18,880 --> 00:06:21,280
just

00:06:19,280 --> 00:06:22,800
still have something that is working

00:06:21,280 --> 00:06:25,120
it's pretty much

00:06:22,800 --> 00:06:27,280
the monolith or not the monolith like

00:06:25,120 --> 00:06:29,680
it's not easy to break it out and

00:06:27,280 --> 00:06:31,759
run it multiple ways so there is like a

00:06:29,680 --> 00:06:34,160
development and production mode to make

00:06:31,759 --> 00:06:37,280
it easier to get started locally

00:06:34,160 --> 00:06:40,319
and then enforce more stricter rules and

00:06:37,280 --> 00:06:42,400
sets for a production setup um

00:06:40,319 --> 00:06:44,479
what is right and what is wrong i'm not

00:06:42,400 --> 00:06:46,000
telling you that you must use a monolith

00:06:44,479 --> 00:06:47,360
today because well that would probably

00:06:46,000 --> 00:06:49,840
be very unpopular

00:06:47,360 --> 00:06:51,680
it's just like there are nice attributes

00:06:49,840 --> 00:06:54,720
in the monolith like having this

00:06:51,680 --> 00:06:58,240
big monolithic version of elasticsearch

00:06:54,720 --> 00:06:59,440
running in one piece doing everything um

00:06:58,240 --> 00:07:01,840
there might be depending on the

00:06:59,440 --> 00:07:03,840
situation some right or wrong

00:07:01,840 --> 00:07:05,520
but there are definitely upsides to

00:07:03,840 --> 00:07:06,400
having this one piece of software

00:07:05,520 --> 00:07:09,919
running everything

00:07:06,400 --> 00:07:13,680
together um that's it welcome

00:07:09,919 --> 00:07:17,039
to my pep talk about well one of this

00:07:13,680 --> 00:07:18,639
um we can discuss on discuss um what you

00:07:17,039 --> 00:07:20,479
think about them and it's fine to hate

00:07:18,639 --> 00:07:22,479
monolith um

00:07:20,479 --> 00:07:24,160
you don't need to like them uh but they

00:07:22,479 --> 00:07:25,360
do have their advantages and i think

00:07:24,160 --> 00:07:26,800
they still have their place

00:07:25,360 --> 00:07:28,560
thanks a lot for joining and i'll see

00:07:26,800 --> 00:07:30,000
you on discuss

00:07:28,560 --> 00:07:31,120
thank you phillip do you have anything

00:07:30,000 --> 00:07:32,800
else that you would like to add like

00:07:31,120 --> 00:07:33,520
what's new with elastic are you guys

00:07:32,800 --> 00:07:35,759
hiring

00:07:33,520 --> 00:07:36,639
anywhere else you would like to send we

00:07:35,759 --> 00:07:39,199
are

00:07:36,639 --> 00:07:39,919
always hiring like most other companies

00:07:39,199 --> 00:07:41,599
so

00:07:39,919 --> 00:07:43,280
yeah we have a couple of colleagues in

00:07:41,599 --> 00:07:46,160
in israel uh so if you're

00:07:43,280 --> 00:07:47,759
keen on that uh let us know um normally

00:07:46,160 --> 00:07:49,360
we are mostly interested in the product

00:07:47,759 --> 00:07:50,800
so if you have any product specific

00:07:49,360 --> 00:07:53,199
questions or things um

00:07:50,800 --> 00:07:54,879
just let us know and come to us so yeah

00:07:53,199 --> 00:07:56,240
i don't like pitching so much you

00:07:54,879 --> 00:07:59,120
you have seen all the pictures you know

00:07:56,240 --> 00:08:07,599
the stuff um just come for the questions

00:07:59,120 --> 00:08:07,599

YouTube URL: https://www.youtube.com/watch?v=K8mIB_P-9qE


