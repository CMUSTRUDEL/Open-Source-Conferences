Title: Statscraft Ignites: The Dark Side of Flamegraphs, Amir Langer, eBay | Community Summit TLV
Publication date: 2020-12-26
Playlist: Community Summit TLV 2020
Description: 
	Flamegraph is a visualization of hierarchical data used to show sampling profiling results. We found them to be extremely useful observability tools. At eBay, we use Flamegraphs to triage performance problems and visualize service behaviour in production. In this talk we’ll go over Flamegraphs, their strengths and limitations. We’ll also explore ideas to extend the technology especially in performance regression analysis where the current solution struggles and a view of more than a single Flamegraph is required to compare different runs.
Captions: 
	00:00:02,880 --> 00:00:05,940
[Music]

00:00:23,920 --> 00:00:29,840
and up next we have

00:00:25,439 --> 00:00:31,199
amir langer hello amir good afternoon

00:00:29,840 --> 00:00:34,399
hello how are you

00:00:31,199 --> 00:00:37,440
i'm fine i'm fine great to have you here

00:00:34,399 --> 00:00:39,120
uh so uh amir is uh from ebay

00:00:37,440 --> 00:00:42,079
and he's going to talk to us about the

00:00:39,120 --> 00:00:43,600
dark side of flame graphs now

00:00:42,079 --> 00:00:45,280
if you don't know this uh it's

00:00:43,600 --> 00:00:46,640
definitely a project you

00:00:45,280 --> 00:00:48,719
and the tool you definitely want to

00:00:46,640 --> 00:00:51,680
explore and amir will give us

00:00:48,719 --> 00:00:54,480
uh his take on that i'm here i'm sharing

00:00:51,680 --> 00:00:58,320
the slides and the floor is yours

00:00:54,480 --> 00:01:00,640
thank you okay so uh my name is amir

00:00:58,320 --> 00:01:02,160
and i have five minutes to talk to you

00:01:00,640 --> 00:01:05,199
about flame graphs

00:01:02,160 --> 00:01:08,560
um and this is a flame graph

00:01:05,199 --> 00:01:09,200
um it's a visualization of a profiler

00:01:08,560 --> 00:01:12,640
results

00:01:09,200 --> 00:01:14,640
it's sampling profiling and at ebay we

00:01:12,640 --> 00:01:17,439
use and generate those flame graphs in

00:01:14,640 --> 00:01:19,680
production to great effect

00:01:17,439 --> 00:01:20,799
the towers or the flames that you see in

00:01:19,680 --> 00:01:23,119
this picture are

00:01:20,799 --> 00:01:24,159
stack traces and they are sorted

00:01:23,119 --> 00:01:27,200
alphabetically

00:01:24,159 --> 00:01:28,159
so if two stack traces start with the

00:01:27,200 --> 00:01:31,360
same

00:01:28,159 --> 00:01:33,200
uh trace uh they will be seen as as one

00:01:31,360 --> 00:01:33,920
we will have the same frame and so we

00:01:33,200 --> 00:01:37,119
have

00:01:33,920 --> 00:01:39,040
real good navigability and to see how

00:01:37,119 --> 00:01:40,079
did we arrive at a particular function

00:01:39,040 --> 00:01:43,600
and where did we go

00:01:40,079 --> 00:01:47,200
from that function the width

00:01:43,600 --> 00:01:49,520
of every frame is the number of samples

00:01:47,200 --> 00:01:52,880
that the profiler

00:01:49,520 --> 00:01:54,079
detected for that frame so if it's a cpu

00:01:52,880 --> 00:01:56,079
flame graph

00:01:54,079 --> 00:01:57,200
what we see corresponds directly to the

00:01:56,079 --> 00:02:00,560
total time

00:01:57,200 --> 00:02:03,200
the cpu spent on this stack trace

00:02:00,560 --> 00:02:04,479
um in the same picture we can also see

00:02:03,200 --> 00:02:06,640
the self time

00:02:04,479 --> 00:02:08,239
the self time is simply the edge of

00:02:06,640 --> 00:02:11,599
every frame so if the

00:02:08,239 --> 00:02:13,920
cpu spent a lot of time executing a

00:02:11,599 --> 00:02:15,040
particular function it will have a very

00:02:13,920 --> 00:02:17,200
large edge

00:02:15,040 --> 00:02:20,520
if it has no edge at all it means that

00:02:17,200 --> 00:02:23,280
frame or that function only the

00:02:20,520 --> 00:02:25,520
delegation uh flame graphs have

00:02:23,280 --> 00:02:27,440
color schemes this is the java color

00:02:25,520 --> 00:02:29,360
scheme for example and that allows you

00:02:27,440 --> 00:02:31,840
to pinpoint and know exactly

00:02:29,360 --> 00:02:33,599
what is the type of every frame in the

00:02:31,840 --> 00:02:36,640
stack trace

00:02:33,599 --> 00:02:39,760
you can search a flame graph

00:02:36,640 --> 00:02:41,440
you can zoom into a particular frame in

00:02:39,760 --> 00:02:44,480
the flame graph

00:02:41,440 --> 00:02:48,400
and essentially what you have

00:02:44,480 --> 00:02:50,000
is an svg file and you can take that svg

00:02:48,400 --> 00:02:53,760
file and you can show it on any

00:02:50,000 --> 00:02:57,760
browser and use it to detect

00:02:53,760 --> 00:02:57,760
a lot of performance issues

00:02:59,040 --> 00:03:03,440
but we are here to talk about the dark

00:03:00,800 --> 00:03:05,200
side of flame graphs

00:03:03,440 --> 00:03:07,840
there are things that we cannot see in

00:03:05,200 --> 00:03:10,560
flame graphs um

00:03:07,840 --> 00:03:10,959
flame graphs only offer us a snapshot of

00:03:10,560 --> 00:03:13,519
the

00:03:10,959 --> 00:03:14,080
running process so if the profiler

00:03:13,519 --> 00:03:16,800
worked for

00:03:14,080 --> 00:03:17,200
30 seconds this is what we see there is

00:03:16,800 --> 00:03:19,440
no

00:03:17,200 --> 00:03:22,560
time dimension in flame graphs there is

00:03:19,440 --> 00:03:24,959
no before or after inflamed graphs

00:03:22,560 --> 00:03:27,200
there's no ability to see two sets of

00:03:24,959 --> 00:03:29,920
results to compare between them

00:03:27,200 --> 00:03:32,159
uh we cannot also manipulate the raw

00:03:29,920 --> 00:03:35,040
data because what we have is the svg

00:03:32,159 --> 00:03:37,760
file the raw data is not there anymore

00:03:35,040 --> 00:03:40,000
when we try to do regression analysis

00:03:37,760 --> 00:03:41,440
uh the most important thing for us is

00:03:40,000 --> 00:03:45,280
the comparison between

00:03:41,440 --> 00:03:45,760
two snapshots so either two points in

00:03:45,280 --> 00:03:48,239
time

00:03:45,760 --> 00:03:49,599
or two uh different instances of the

00:03:48,239 --> 00:03:52,400
same service

00:03:49,599 --> 00:03:53,439
and uh with uh simple flame graphs there

00:03:52,400 --> 00:03:57,200
is no way to

00:03:53,439 --> 00:03:59,519
uh do this regression analysis um

00:03:57,200 --> 00:04:00,319
we created an open source project called

00:03:59,519 --> 00:04:03,439
fgrav

00:04:00,319 --> 00:04:05,040
and in this project we create flame

00:04:03,439 --> 00:04:07,439
graphs dynamically

00:04:05,040 --> 00:04:08,159
on the browser directly from the raw

00:04:07,439 --> 00:04:10,000
data

00:04:08,159 --> 00:04:11,280
and that allows us to create lots of

00:04:10,000 --> 00:04:15,360
flame graph

00:04:11,280 --> 00:04:20,959
related visualizations and help us

00:04:15,360 --> 00:04:23,520
doing all sorts of performance analysis

00:04:20,959 --> 00:04:25,600
differential flame graphs are the way to

00:04:23,520 --> 00:04:27,280
do regression analysis and that was

00:04:25,600 --> 00:04:29,440
already

00:04:27,280 --> 00:04:30,639
developed at netflix where they started

00:04:29,440 --> 00:04:32,560
with plane graphs

00:04:30,639 --> 00:04:34,960
at netflix all they had was really a

00:04:32,560 --> 00:04:38,320
different color scheme so you would

00:04:34,960 --> 00:04:41,360
draw the second flame graph and

00:04:38,320 --> 00:04:43,120
you would color the frames either red or

00:04:41,360 --> 00:04:45,680
blue based on the

00:04:43,120 --> 00:04:46,800
uh growth of reduction compared to the

00:04:45,680 --> 00:04:49,919
first

00:04:46,800 --> 00:04:52,479
flame graph we expanded this a bit and

00:04:49,919 --> 00:04:53,680
we create a flame graph from both sets

00:04:52,479 --> 00:04:57,199
of

00:04:53,680 --> 00:04:58,000
results and we color in only part of the

00:04:57,199 --> 00:05:01,840
frame

00:04:58,000 --> 00:05:04,240
uh corresponding to how much uh

00:05:01,840 --> 00:05:05,039
did these uh function the number of

00:05:04,240 --> 00:05:09,199
samples

00:05:05,039 --> 00:05:11,360
grew or were reduced

00:05:09,199 --> 00:05:12,880
the the reason we do that is we avoid

00:05:11,360 --> 00:05:16,080
the blind spot of having

00:05:12,880 --> 00:05:17,120
a uh a whole stack trace that completely

00:05:16,080 --> 00:05:19,039
disappeared

00:05:17,120 --> 00:05:20,639
in the uh second flame graph and

00:05:19,039 --> 00:05:23,520
therefore uh

00:05:20,639 --> 00:05:24,080
cannot be seen so we can see everything

00:05:23,520 --> 00:05:27,440
we can

00:05:24,080 --> 00:05:30,240
also switch very quickly to the uh

00:05:27,440 --> 00:05:32,080
original color scheme because uh we're

00:05:30,240 --> 00:05:35,039
dynamic

00:05:32,080 --> 00:05:36,880
and the most interesting thing is that

00:05:35,039 --> 00:05:39,680
we have the ability to manipulate

00:05:36,880 --> 00:05:41,919
the uh raw data a lot of the things that

00:05:39,680 --> 00:05:44,400
we see in regression analysis

00:05:41,919 --> 00:05:45,520
is that a simple diff between two

00:05:44,400 --> 00:05:48,479
snapshots is not

00:05:45,520 --> 00:05:49,600
that trivial uh in languages like java

00:05:48,479 --> 00:05:51,280
where uh

00:05:49,600 --> 00:05:52,720
whenever you call a lambda you're

00:05:51,280 --> 00:05:55,600
actually invoking

00:05:52,720 --> 00:05:56,400
a dynamic method that is created on the

00:05:55,600 --> 00:05:58,720
fly

00:05:56,400 --> 00:06:00,560
um in your stack tracer there's uh

00:05:58,720 --> 00:06:01,919
there's an arbitrary number

00:06:00,560 --> 00:06:04,319
and you need to filter out this

00:06:01,919 --> 00:06:06,720
arbitrary number otherwise you reach the

00:06:04,319 --> 00:06:08,240
image that you see before you once you

00:06:06,720 --> 00:06:10,560
filter this out

00:06:08,240 --> 00:06:12,000
you can see the real image and you can

00:06:10,560 --> 00:06:15,199
see exactly

00:06:12,000 --> 00:06:18,800
what stack traces grew and what struct

00:06:15,199 --> 00:06:21,759
step races reducted

00:06:18,800 --> 00:06:24,000
thank you uh and i'll be happy to answer

00:06:21,759 --> 00:06:27,680
any questions later in this course

00:06:24,000 --> 00:06:30,080
thanks thank you very much amir

00:06:27,680 --> 00:06:32,160
and uh very powerful visualizations

00:06:30,080 --> 00:06:34,000
amazing how much you can condense so

00:06:32,160 --> 00:06:36,240
much data into something that

00:06:34,000 --> 00:06:38,000
can can jump out of the screen and show

00:06:36,240 --> 00:06:40,000
you immediately uh where

00:06:38,000 --> 00:06:41,759
where to focus at thank you very much

00:06:40,000 --> 00:06:43,039
great great open source contribution to

00:06:41,759 --> 00:06:49,759
the community

00:06:43,039 --> 00:06:51,840
thank you thank you very much

00:06:49,759 --> 00:06:51,840

YouTube URL: https://www.youtube.com/watch?v=_xFOlzZhEWs


