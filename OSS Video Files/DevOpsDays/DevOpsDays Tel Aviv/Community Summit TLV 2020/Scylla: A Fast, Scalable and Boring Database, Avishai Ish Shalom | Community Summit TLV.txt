Title: Scylla: A Fast, Scalable and Boring Database, Avishai Ish Shalom | Community Summit TLV
Publication date: 2020-12-26
Playlist: Community Summit TLV 2020
Description: 
	What is this Scylla thing we've been hearing about? why write yet another database? Well, there are a lot of great databases out there, but none quite like this one. Scylla is a database built for modern hardware, achieving extreme performance and at the same time being operator friendly and scalable. Did I mention it's open source as well?
Captions: 
	00:00:02,880 --> 00:00:05,940
[Music]

00:00:12,160 --> 00:00:17,199
we have

00:00:13,679 --> 00:00:20,400
that one have abishai

00:00:17,199 --> 00:00:25,039
abhishai is going to be presenting sila

00:00:20,400 --> 00:00:28,000
um and welcome abishai

00:00:25,039 --> 00:00:29,760
hey welcome we can now hear you and you

00:00:28,000 --> 00:00:33,680
are

00:00:29,760 --> 00:00:37,440
hi uh hello what's up how's life

00:00:33,680 --> 00:00:37,440
it's pretty good what's yours

00:00:38,079 --> 00:00:41,680
did you get a lot of interesting

00:00:39,280 --> 00:00:44,079
questions i got a few

00:00:41,680 --> 00:00:45,760
i got a few um it's always great to have

00:00:44,079 --> 00:00:47,760
questions

00:00:45,760 --> 00:00:49,360
although normal conferences people buy

00:00:47,760 --> 00:00:50,000
you blues you know they have to get

00:00:49,360 --> 00:00:54,320
answers

00:00:50,000 --> 00:00:57,440
so yeah yeah yeah i think no one is is

00:00:54,320 --> 00:01:00,640
more happy with this sort of uh

00:00:57,440 --> 00:01:02,960
arrangement but we make do so

00:01:00,640 --> 00:01:05,040
without further ado please your

00:01:02,960 --> 00:01:06,000
presentation is here and the stage is

00:01:05,040 --> 00:01:08,479
yours

00:01:06,000 --> 00:01:10,880
thank you so uh my name is richard

00:01:08,479 --> 00:01:14,479
shalom i'm a developer advocate at

00:01:10,880 --> 00:01:14,880
0db 7 is the fast scalable and boring

00:01:14,479 --> 00:01:17,680
data

00:01:14,880 --> 00:01:18,880
database so uh of course you know when

00:01:17,680 --> 00:01:20,000
you hear about the new database

00:01:18,880 --> 00:01:22,479
everyone's like uh

00:01:20,000 --> 00:01:24,560
great but why why you're writing another

00:01:22,479 --> 00:01:25,119
database there's so many databases out

00:01:24,560 --> 00:01:26,320
there

00:01:25,119 --> 00:01:28,320
you know haven't the jewish people

00:01:26,320 --> 00:01:29,280
suffered enough um and the obvious

00:01:28,320 --> 00:01:30,960
answer is no

00:01:29,280 --> 00:01:32,960
jewish people haven't suffered enough

00:01:30,960 --> 00:01:34,000
it's it's a known hobby of the jewish

00:01:32,960 --> 00:01:35,360
people to suffer

00:01:34,000 --> 00:01:37,439
if you're an ashkenazi jew you know

00:01:35,360 --> 00:01:39,920
exactly what i'm talking about

00:01:37,439 --> 00:01:40,479
but uh we actually have pretty good

00:01:39,920 --> 00:01:42,799
reasons

00:01:40,479 --> 00:01:44,000
why we wrote another database um there's

00:01:42,799 --> 00:01:46,399
been a lot of

00:01:44,000 --> 00:01:48,960
new and great ideas especially in the

00:01:46,399 --> 00:01:49,360
nosql and the new sql community around

00:01:48,960 --> 00:01:52,159
the

00:01:49,360 --> 00:01:54,000
last 10 to 15 years but it turns out

00:01:52,159 --> 00:01:55,840
that scalability and availability

00:01:54,000 --> 00:01:57,200
are still very very hard problems and

00:01:55,840 --> 00:01:59,040
for very good reasons

00:01:57,200 --> 00:02:01,759
because of the cap theorem we all know

00:01:59,040 --> 00:02:04,880
it's not possible to write database it's

00:02:01,759 --> 00:02:06,000
uh consistent and highly available

00:02:04,880 --> 00:02:08,000
you know scalable and partition

00:02:06,000 --> 00:02:09,520
tolerance all the same time

00:02:08,000 --> 00:02:12,319
so it's still a hard problem there's a

00:02:09,520 --> 00:02:15,280
lot of research and ongoing work on this

00:02:12,319 --> 00:02:17,280
but not only that database maintenance

00:02:15,280 --> 00:02:18,480
is still very very hard

00:02:17,280 --> 00:02:20,720
if you're running a database in

00:02:18,480 --> 00:02:22,480
production you've suffered you know

00:02:20,720 --> 00:02:25,040
exactly what i'm talking about

00:02:22,480 --> 00:02:25,920
but the hardware and the operational

00:02:25,040 --> 00:02:28,560
environment

00:02:25,920 --> 00:02:29,599
that we are using the databases are in

00:02:28,560 --> 00:02:32,800
have changed a lot

00:02:29,599 --> 00:02:34,080
in the last 20 30 years we now have the

00:02:32,800 --> 00:02:37,760
cloud we're running an

00:02:34,080 --> 00:02:40,000
environment that's much more dynamic

00:02:37,760 --> 00:02:41,840
and scalable you know we are using much

00:02:40,000 --> 00:02:44,080
more data than ever before

00:02:41,840 --> 00:02:45,120
and we uptime has become much more

00:02:44,080 --> 00:02:47,120
important you know

00:02:45,120 --> 00:02:48,560
10 years ago you could take a system

00:02:47,120 --> 00:02:50,640
offline for maintenance

00:02:48,560 --> 00:02:52,319
it's not really an option nowadays um

00:02:50,640 --> 00:02:53,120
you need really high availability and

00:02:52,319 --> 00:02:56,000
all of that

00:02:53,120 --> 00:02:56,720
so we need new designs for new databases

00:02:56,000 --> 00:02:58,879
that actually

00:02:56,720 --> 00:03:00,000
you know do those challenges and

00:02:58,879 --> 00:03:02,159
especially you know

00:03:00,000 --> 00:03:03,120
performance and actually utilizing the

00:03:02,159 --> 00:03:05,040
hardware

00:03:03,120 --> 00:03:07,120
it's not very uncommon to see

00:03:05,040 --> 00:03:09,760
applications and databases that

00:03:07,120 --> 00:03:11,440
are running like 50 percent utilization

00:03:09,760 --> 00:03:13,440
of servers and can't actually

00:03:11,440 --> 00:03:15,760
take advantage of all the hardware that

00:03:13,440 --> 00:03:19,760
you're paying for in the cloud

00:03:15,760 --> 00:03:21,440
so is a database that's extremely fast

00:03:19,760 --> 00:03:22,720
what do i mean by extremely fast it's

00:03:21,440 --> 00:03:25,120
not uncommon to see

00:03:22,720 --> 00:03:26,400
sales servers doing uh over 1 million

00:03:25,120 --> 00:03:28,879
queries per second

00:03:26,400 --> 00:03:29,519
sometimes a lot more on a single node

00:03:28,879 --> 00:03:31,519
not even

00:03:29,519 --> 00:03:33,280
in a cluster and it's great that you can

00:03:31,519 --> 00:03:36,000
actually utilize the hardware that you

00:03:33,280 --> 00:03:38,080
you're paying for and we are doing this

00:03:36,000 --> 00:03:41,040
in very very low latency it's not

00:03:38,080 --> 00:03:42,640
again not uncommon to see a single digit

00:03:41,040 --> 00:03:44,400
millisecond latency depending on the

00:03:42,640 --> 00:03:45,519
hardware sometimes even less than one

00:03:44,400 --> 00:03:48,000
millisecond

00:03:45,519 --> 00:03:49,120
and that makes your application servers

00:03:48,000 --> 00:03:50,640
work much better

00:03:49,120 --> 00:03:52,560
because they don't have to wait for the

00:03:50,640 --> 00:03:54,319
database um if you look at

00:03:52,560 --> 00:03:56,000
systems you often see that you know you

00:03:54,319 --> 00:03:58,840
have many threads that all they do is

00:03:56,000 --> 00:04:01,280
just wait for the database

00:03:58,840 --> 00:04:03,599
and sealer has

00:04:01,280 --> 00:04:04,480
predictable performance it has a very uh

00:04:03,599 --> 00:04:06,879
very nice

00:04:04,480 --> 00:04:07,920
latency code even on the very high

00:04:06,879 --> 00:04:09,680
percentiles

00:04:07,920 --> 00:04:11,439
which is very important because at the

00:04:09,680 --> 00:04:13,439
end of the day the high percentiles

00:04:11,439 --> 00:04:14,640
actually correlate with user experience

00:04:13,439 --> 00:04:17,759
so if you have

00:04:14,640 --> 00:04:18,160
a flat the distribution of latency that

00:04:17,759 --> 00:04:20,880
means

00:04:18,160 --> 00:04:22,720
happy users and usually better business

00:04:20,880 --> 00:04:24,639
results

00:04:22,720 --> 00:04:26,080
so it's also very very scalable it's not

00:04:24,639 --> 00:04:28,560
only scalable

00:04:26,080 --> 00:04:29,919
as in adding more nodes and vertically

00:04:28,560 --> 00:04:32,000
scalable

00:04:29,919 --> 00:04:34,320
scaling it's also horizontally

00:04:32,000 --> 00:04:36,080
horizontal horizontally scalable

00:04:34,320 --> 00:04:38,479
meaning that you can actually use bigger

00:04:36,080 --> 00:04:40,560
and bigger nodes this is a very

00:04:38,479 --> 00:04:42,000
common limitation for most databases

00:04:40,560 --> 00:04:45,600
that you cannot grow and to

00:04:42,000 --> 00:04:47,440
use a very large nodes because of a lot

00:04:45,600 --> 00:04:49,360
of our problems with the

00:04:47,440 --> 00:04:52,000
multi-threaded architectures that don't

00:04:49,360 --> 00:04:54,000
allow you to use all the cpus and

00:04:52,000 --> 00:04:55,199
disks that you have cielo doesn't

00:04:54,000 --> 00:04:58,400
actually have those problems

00:04:55,199 --> 00:05:01,120
you have linear scaling and cpu

00:04:58,400 --> 00:05:02,880
and you can use very large machines

00:05:01,120 --> 00:05:04,160
which is great because then you don't

00:05:02,880 --> 00:05:06,479
actually have to

00:05:04,160 --> 00:05:08,080
deal with the operational burden of very

00:05:06,479 --> 00:05:10,639
large clusters

00:05:08,080 --> 00:05:12,560
sometimes we see clients that move from

00:05:10,639 --> 00:05:15,600
uh cassandra clusters that are

00:05:12,560 --> 00:05:17,759
like 100 machines or 300 or 30 machines

00:05:15,600 --> 00:05:18,880
to clusters that are like five zero

00:05:17,759 --> 00:05:21,199
machines or three

00:05:18,880 --> 00:05:22,080
cell machines very very small clusters

00:05:21,199 --> 00:05:25,360
relative to

00:05:22,080 --> 00:05:28,800
uh other databases so that's great

00:05:25,360 --> 00:05:31,840
you don't need to work that hard and

00:05:28,800 --> 00:05:33,680
how do we do this zilla has a what we

00:05:31,840 --> 00:05:36,400
call a symmetric architecture where

00:05:33,680 --> 00:05:37,199
we basically shout and replicate data

00:05:36,400 --> 00:05:39,440
across nodes

00:05:37,199 --> 00:05:40,960
this is done automatically by ciela so

00:05:39,440 --> 00:05:43,600
it's taking care of all of this

00:05:40,960 --> 00:05:45,120
and it's also active active meaning that

00:05:43,600 --> 00:05:45,840
you can actually really write from all

00:05:45,120 --> 00:05:48,080
the nodes

00:05:45,840 --> 00:05:49,280
simultaneously there's no limitations

00:05:48,080 --> 00:05:51,440
about that

00:05:49,280 --> 00:05:52,880
you can also you can do what is called

00:05:51,440 --> 00:05:54,479
the geographic

00:05:52,880 --> 00:05:56,479
application where you have different

00:05:54,479 --> 00:05:59,840
clusters that might be running

00:05:56,479 --> 00:06:03,199
across different parts of the world

00:05:59,840 --> 00:06:05,600
and still allows you to use

00:06:03,199 --> 00:06:07,360
both clusters or three or four well how

00:06:05,600 --> 00:06:09,840
many clusters you want

00:06:07,360 --> 00:06:11,680
simultaneously it's all active active

00:06:09,840 --> 00:06:13,120
it's also very good for resilience

00:06:11,680 --> 00:06:13,919
because you know the cluster reality

00:06:13,120 --> 00:06:16,479
you're following

00:06:13,919 --> 00:06:18,400
failing over two is actually working and

00:06:16,479 --> 00:06:20,160
operational because you're using it all

00:06:18,400 --> 00:06:23,280
the time

00:06:20,160 --> 00:06:26,720
on the node level we have

00:06:23,280 --> 00:06:29,360
a micro architecture so to speak where

00:06:26,720 --> 00:06:31,440
it's known as a shard pilco architecture

00:06:29,360 --> 00:06:34,240
there's a framework that is called

00:06:31,440 --> 00:06:37,520
systol that has been developed in sila

00:06:34,240 --> 00:06:37,520
that allows us to scale

00:06:37,919 --> 00:06:43,520
this into scale uh on pearl cpu

00:06:41,440 --> 00:06:45,840
and basically what systole is doing it's

00:06:43,520 --> 00:06:48,160
like a mini operating system

00:06:45,840 --> 00:06:49,520
that bypasses a lot of the operating

00:06:48,160 --> 00:06:52,639
system and

00:06:49,520 --> 00:06:54,720
is doing its own io scheduling its own

00:06:52,639 --> 00:06:55,919
uh it's managed in its own cache we

00:06:54,720 --> 00:06:59,120
don't use the

00:06:55,919 --> 00:07:01,840
linux on page cache

00:06:59,120 --> 00:07:03,280
and it has no locks and basically it

00:07:01,840 --> 00:07:05,759
utilizes every call

00:07:03,280 --> 00:07:06,479
individually and this allows us to to

00:07:05,759 --> 00:07:08,479
scale

00:07:06,479 --> 00:07:10,000
linearly across calls you can just add

00:07:08,479 --> 00:07:11,680
more and more calls and

00:07:10,000 --> 00:07:12,800
silver just becomes faster and faster

00:07:11,680 --> 00:07:13,680
and faster it's a very unique

00:07:12,800 --> 00:07:15,840
architecture

00:07:13,680 --> 00:07:16,800
i highly recommend you read about sistar

00:07:15,840 --> 00:07:20,000
and our childhood call

00:07:16,800 --> 00:07:21,440
architecture and those because sale as a

00:07:20,000 --> 00:07:23,360
sister is open source there's

00:07:21,440 --> 00:07:24,880
actually more projects that have been

00:07:23,360 --> 00:07:27,680
using c style

00:07:24,880 --> 00:07:28,800
for to the benefit and it's very

00:07:27,680 --> 00:07:30,560
interesting how

00:07:28,800 --> 00:07:32,479
this kind of technology enables a new

00:07:30,560 --> 00:07:35,680
generation of high performance

00:07:32,479 --> 00:07:38,160
um you know applications databases

00:07:35,680 --> 00:07:38,880
cli is also very operator friendly it's

00:07:38,160 --> 00:07:40,720
boeing

00:07:38,880 --> 00:07:42,319
what do i mean by bullying you know no

00:07:40,720 --> 00:07:43,039
one likes a surprise in the middle of

00:07:42,319 --> 00:07:46,080
the night

00:07:43,039 --> 00:07:46,720
um yeah surprise uh i personally have

00:07:46,080 --> 00:07:49,599
been running

00:07:46,720 --> 00:07:50,000
databases for a few years and it wasn't

00:07:49,599 --> 00:07:51,599
fun

00:07:50,000 --> 00:07:53,199
you know when a database surprised you

00:07:51,599 --> 00:07:54,800
in the middle of the night and things

00:07:53,199 --> 00:07:57,520
crash and you don't know why and

00:07:54,800 --> 00:07:58,879
it's like it's horrible um is auto

00:07:57,520 --> 00:07:59,759
tuning you don't need a lot of

00:07:58,879 --> 00:08:01,919
configuration

00:07:59,759 --> 00:08:03,599
so it kind of finds uh the right

00:08:01,919 --> 00:08:06,560
configurations for you

00:08:03,599 --> 00:08:08,319
uh it's also uh we gave some talks and

00:08:06,560 --> 00:08:11,440
uh webinars about this it's a

00:08:08,319 --> 00:08:13,680
critical technology that we're using um

00:08:11,440 --> 00:08:14,720
so you don't need to figure out how much

00:08:13,680 --> 00:08:17,120
ram you need you

00:08:14,720 --> 00:08:19,120
don't need to figure out you know what

00:08:17,120 --> 00:08:19,360
the right level of parallelization is

00:08:19,120 --> 00:08:21,039
and

00:08:19,360 --> 00:08:23,120
how much memory you need to give the

00:08:21,039 --> 00:08:25,199
cash and stuff like that we actually

00:08:23,120 --> 00:08:26,879
do all that for you because usually the

00:08:25,199 --> 00:08:29,360
database you know

00:08:26,879 --> 00:08:30,800
if it can actually see the workload and

00:08:29,360 --> 00:08:32,800
it can actually know better

00:08:30,800 --> 00:08:34,080
than you do most of the time you know

00:08:32,800 --> 00:08:36,080
what to do so you just

00:08:34,080 --> 00:08:37,360
tell it in general terms what to do and

00:08:36,080 --> 00:08:40,000
it does it for you

00:08:37,360 --> 00:08:41,599
it's also very resilient so not a lot of

00:08:40,000 --> 00:08:43,039
crashes you don't need to wake up in the

00:08:41,599 --> 00:08:45,120
middle of the night

00:08:43,039 --> 00:08:47,440
which is great because you know we all

00:08:45,120 --> 00:08:49,600
want to sleep

00:08:47,440 --> 00:08:51,839
sila is also universal what does it mean

00:08:49,600 --> 00:08:54,320
universal it means that

00:08:51,839 --> 00:08:55,120
we support multiple apis we support

00:08:54,320 --> 00:08:58,560
support

00:08:55,120 --> 00:09:02,000
cassandra compatible sql

00:08:58,560 --> 00:09:03,760
api so you can use cassandra drivers if

00:09:02,000 --> 00:09:04,959
you want we also have our own drivers

00:09:03,760 --> 00:09:06,720
which are more optimized

00:09:04,959 --> 00:09:08,560
but you can use cassandra drivers it

00:09:06,720 --> 00:09:11,279
works it's full compatible

00:09:08,560 --> 00:09:12,000
you can also use the dynamodb api we

00:09:11,279 --> 00:09:14,160
have a

00:09:12,000 --> 00:09:16,800
project alternator which allows you to

00:09:14,160 --> 00:09:18,720
use the dynamodb api with zilla

00:09:16,800 --> 00:09:20,080
which also means that you can run a

00:09:18,720 --> 00:09:22,560
dynamodb compatible

00:09:20,080 --> 00:09:24,480
database off the cloud which is kind of

00:09:22,560 --> 00:09:26,880
amazing if you think about it

00:09:24,480 --> 00:09:28,080
um sierra can run in the cloud it can

00:09:26,880 --> 00:09:30,720
also run off the cloud

00:09:28,080 --> 00:09:32,959
on-premises and also it supports

00:09:30,720 --> 00:09:34,839
kubernetes we have a sealer operator

00:09:32,959 --> 00:09:36,800
which is a kubernetes operator which

00:09:34,839 --> 00:09:39,200
allows you to run

00:09:36,800 --> 00:09:40,080
sila on top of kubernetes natively so

00:09:39,200 --> 00:09:43,920
check it out it's

00:09:40,080 --> 00:09:46,240
really cool and it's all open source um

00:09:43,920 --> 00:09:47,760
the ceiling is a database that has been

00:09:46,240 --> 00:09:49,360
originally written by the team same

00:09:47,760 --> 00:09:50,160
thing that built kvm which is a

00:09:49,360 --> 00:09:52,080
hypervisor

00:09:50,160 --> 00:09:53,680
it's basically powering all the clouds

00:09:52,080 --> 00:09:57,680
today and uh

00:09:53,680 --> 00:09:59,839
so the core of the company is uh

00:09:57,680 --> 00:10:00,959
actually people who worked on linux

00:09:59,839 --> 00:10:04,399
scanner on mexico

00:10:00,959 --> 00:10:06,959
on jvm so a lot of open source projects

00:10:04,399 --> 00:10:07,600
so open source is you know you know

00:10:06,959 --> 00:10:10,240
cultural

00:10:07,600 --> 00:10:11,680
very uh very different culture and so

00:10:10,240 --> 00:10:13,279
everything almost everything we do is

00:10:11,680 --> 00:10:15,360
open source you can check it out in our

00:10:13,279 --> 00:10:16,560
github repositories systems open source

00:10:15,360 --> 00:10:18,320
sales open store

00:10:16,560 --> 00:10:20,560
open source a lot of other projects that

00:10:18,320 --> 00:10:21,839
we do um it all has comprehensive

00:10:20,560 --> 00:10:23,920
documentation

00:10:21,839 --> 00:10:25,600
we really invest in documentation we

00:10:23,920 --> 00:10:28,000
also have something that's called

00:10:25,600 --> 00:10:29,600
sunday university and to help people

00:10:28,000 --> 00:10:32,720
learn how to use cellar and

00:10:29,600 --> 00:10:35,600
later technologies a more

00:10:32,720 --> 00:10:35,920
structured and fun way and we also have

00:10:35,600 --> 00:10:38,959
a

00:10:35,920 --> 00:10:41,279
community that usually meets in slack

00:10:38,959 --> 00:10:42,959
check it out so you can get a lot of

00:10:41,279 --> 00:10:46,079
help there if you decide to uh

00:10:42,959 --> 00:10:48,640
to use silla or check it out so

00:10:46,079 --> 00:10:50,720
check out community a lot of people are

00:10:48,640 --> 00:10:53,040
present in slack and happy to help

00:10:50,720 --> 00:10:54,800
and also this is something that actually

00:10:53,040 --> 00:10:55,360
runs in production this is not science

00:10:54,800 --> 00:10:58,399
fiction

00:10:55,360 --> 00:10:59,120
it runs in production a lot of companies

00:10:58,399 --> 00:11:02,320
use it in

00:10:59,120 --> 00:11:03,519
high scale so we get a lot of really

00:11:02,320 --> 00:11:05,760
cool feedback and

00:11:03,519 --> 00:11:07,920
we keep developing and improving the

00:11:05,760 --> 00:11:10,880
product

00:11:07,920 --> 00:11:11,760
so um if you want to use sila you have

00:11:10,880 --> 00:11:14,720
two options

00:11:11,760 --> 00:11:15,279
you can download sala you can download

00:11:14,720 --> 00:11:17,440
it from

00:11:15,279 --> 00:11:21,120
a website you can install it uh run it

00:11:17,440 --> 00:11:24,000
yourself or you can use the managedzilla

00:11:21,120 --> 00:11:25,519
database as a service see the cloud you

00:11:24,000 --> 00:11:28,399
don't have to run it yourself

00:11:25,519 --> 00:11:29,839
you can just log into silicloud and just

00:11:28,399 --> 00:11:32,399
put a cluster right now

00:11:29,839 --> 00:11:33,279
uh we give you a free cluster for 24

00:11:32,399 --> 00:11:35,040
hours

00:11:33,279 --> 00:11:37,279
to test we also have something called

00:11:35,040 --> 00:11:38,880
testdom which boots up cluster for you

00:11:37,279 --> 00:11:40,880
and runs automatically

00:11:38,880 --> 00:11:42,000
a load test on it so you can actually

00:11:40,880 --> 00:11:44,480
see the results

00:11:42,000 --> 00:11:46,240
you don't have to take a word for uh for

00:11:44,480 --> 00:11:48,480
it you don't

00:11:46,240 --> 00:11:49,839
you know need to believe me that the

00:11:48,480 --> 00:11:52,720
sale is fast just go

00:11:49,839 --> 00:11:54,720
buy the tesla test run and see for

00:11:52,720 --> 00:11:57,920
yourself how fast it can be

00:11:54,720 --> 00:12:00,480
um silicon is fully managed you don't

00:11:57,920 --> 00:12:01,200
have to manage servers yourself but you

00:12:00,480 --> 00:12:03,519
can also

00:12:01,200 --> 00:12:04,240
use silver cloud with your own aws

00:12:03,519 --> 00:12:06,320
account

00:12:04,240 --> 00:12:08,240
um so if you get some kind of a discount

00:12:06,320 --> 00:12:10,639
from amazon or whatever or you want

00:12:08,240 --> 00:12:11,839
things to run in your own vpc on servers

00:12:10,639 --> 00:12:13,680
that you own

00:12:11,839 --> 00:12:14,959
you we also support that you can bring

00:12:13,680 --> 00:12:17,920
your own account and

00:12:14,959 --> 00:12:19,600
see the car we'll manage the clusters

00:12:17,920 --> 00:12:21,760
for you

00:12:19,600 --> 00:12:23,440
so this is a bunch of logos of some of

00:12:21,760 --> 00:12:24,880
our users as you can see a lot of

00:12:23,440 --> 00:12:26,800
really big companies that are running

00:12:24,880 --> 00:12:29,040
scale uh use cilla

00:12:26,800 --> 00:12:29,920
uh we're adding more and more uh every

00:12:29,040 --> 00:12:32,480
day uh

00:12:29,920 --> 00:12:33,760
if you want to join you know you can

00:12:32,480 --> 00:12:37,279
talk to me after

00:12:33,760 --> 00:12:40,079
or you know just talk to a director

00:12:37,279 --> 00:12:41,200
to ourselves or just run clusters on

00:12:40,079 --> 00:12:42,720
silver cloud

00:12:41,200 --> 00:12:44,560
i'm going to be here in this code all

00:12:42,720 --> 00:12:45,519
day to answer questions we're also

00:12:44,560 --> 00:12:48,720
recruiting people

00:12:45,519 --> 00:12:50,560
if you're interested in any job as an in

00:12:48,720 --> 00:12:52,240
engineering or otherwise

00:12:50,560 --> 00:12:53,600
so you can catch me in this code to talk

00:12:52,240 --> 00:12:56,639
about performance

00:12:53,600 --> 00:12:58,560
um jobs distributed systems or

00:12:56,639 --> 00:13:01,760
the cloud or whatever else you want to

00:12:58,560 --> 00:13:04,800
talk about so thank you very much

00:13:01,760 --> 00:13:07,680
thank you vishai for this lovely

00:13:04,800 --> 00:13:09,440
presentation of what ceiling does

00:13:07,680 --> 00:13:17,680
i'm sure everyone will go visit you on

00:13:09,440 --> 00:13:17,680

YouTube URL: https://www.youtube.com/watch?v=CSsXy7715pE


