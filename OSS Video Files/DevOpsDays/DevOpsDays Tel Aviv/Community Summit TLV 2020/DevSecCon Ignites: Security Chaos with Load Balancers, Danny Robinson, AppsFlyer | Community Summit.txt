Title: DevSecCon Ignites: Security Chaos with Load Balancers, Danny Robinson, AppsFlyer | Community Summit
Publication date: 2020-12-26
Playlist: Community Summit TLV 2020
Description: 
	Whilst testing a directory traversal vulnerability within one of our services, I found that I got different behaviour when testing through a load balancer and direct to the service. This talk is about the research the that followed. Key Findings Discussed: AWS Application Load Balancers share code with NGINX, NGINX parses http urls in a special way which results in a protective behaviour for directory traversal attacks, How I bypassed this protection behaviour, and Quick lessons from the research
Captions: 
	00:00:02,880 --> 00:00:05,940
[Music]

00:00:26,240 --> 00:00:30,400
hey hey hey

00:00:27,599 --> 00:00:32,239
devsecond is here and i'm unmuted and

00:00:30,400 --> 00:00:35,200
we're ready to jump to our

00:00:32,239 --> 00:00:37,520
awesome awesome ignites that we will

00:00:35,200 --> 00:00:41,840
start with danny robinson from

00:00:37,520 --> 00:00:44,960
upflyer hi everyone

00:00:41,840 --> 00:00:47,840
uh amazing to be here

00:00:44,960 --> 00:00:49,920
so my name is danny robinson i'm the

00:00:47,840 --> 00:00:51,520
lead security engineer at appsfire

00:00:49,920 --> 00:00:53,760
and today we're having a bit of fun

00:00:51,520 --> 00:00:55,920
looking at load balancers

00:00:53,760 --> 00:00:57,440
so if there's one thing i would like you

00:00:55,920 --> 00:00:59,520
to take away from this talk

00:00:57,440 --> 00:01:01,680
is that running security tests through a

00:00:59,520 --> 00:01:03,920
load balancer is a risk in itself that

00:01:01,680 --> 00:01:05,840
needs to be managed

00:01:03,920 --> 00:01:07,200
this is a presentation about a traversal

00:01:05,840 --> 00:01:09,280
vulnerability

00:01:07,200 --> 00:01:10,799
i found and also the research that

00:01:09,280 --> 00:01:11,680
followed with a friend of mine rotten

00:01:10,799 --> 00:01:13,040
bowel

00:01:11,680 --> 00:01:15,920
we're going to cover a bit about

00:01:13,040 --> 00:01:16,640
appsflyer a technical poc for traversal

00:01:15,920 --> 00:01:19,759
attacks in

00:01:16,640 --> 00:01:20,479
nginx and aws alb we'll look at the root

00:01:19,759 --> 00:01:22,080
cause

00:01:20,479 --> 00:01:23,759
and we'll also look at some

00:01:22,080 --> 00:01:25,280
recommendations to take home and think

00:01:23,759 --> 00:01:28,560
about

00:01:25,280 --> 00:01:30,479
so let's dive in absolutely is a rapidly

00:01:28,560 --> 00:01:31,840
growing startup with large in-house

00:01:30,479 --> 00:01:33,759
development teams

00:01:31,840 --> 00:01:35,759
we have lots of different technologies

00:01:33,759 --> 00:01:37,280
and services and my job is to secure

00:01:35,759 --> 00:01:40,000
them all

00:01:37,280 --> 00:01:41,680
let's get straight to the poc here we

00:01:40,000 --> 00:01:43,520
have a very simple web application

00:01:41,680 --> 00:01:46,399
service that sends the contents of a

00:01:43,520 --> 00:01:48,079
file back in the http response

00:01:46,399 --> 00:01:49,600
the developer that wrote this only

00:01:48,079 --> 00:01:52,399
wanted to send back files

00:01:49,600 --> 00:01:55,119
that were within the secure folder the

00:01:52,399 --> 00:01:57,759
server accepts a get request

00:01:55,119 --> 00:01:59,040
the user supplied url is concatenated

00:01:57,759 --> 00:02:01,439
with the secure string

00:01:59,040 --> 00:02:02,479
and that file is then sent back to the

00:02:01,439 --> 00:02:04,640
user

00:02:02,479 --> 00:02:05,759
as an example sending a request for

00:02:04,640 --> 00:02:07,360
one.txt

00:02:05,759 --> 00:02:09,679
will cause the server to send back the

00:02:07,360 --> 00:02:12,400
file from secure1.txt

00:02:09,679 --> 00:02:14,400
which holds in it hello world note that

00:02:12,400 --> 00:02:16,160
the developer thinks it's not possible

00:02:14,400 --> 00:02:17,599
for the user to get the contents of the

00:02:16,160 --> 00:02:20,720
index.js file

00:02:17,599 --> 00:02:22,400
because it's not in the secure folder

00:02:20,720 --> 00:02:25,200
in order to demonstrate this we send the

00:02:22,400 --> 00:02:27,120
get request directly to the server

00:02:25,200 --> 00:02:29,200
and in the response we get the content

00:02:27,120 --> 00:02:32,160
of the file1.txt

00:02:29,200 --> 00:02:32,160
which is hello world

00:02:33,280 --> 00:02:36,640
in order to exploit the traversal

00:02:34,640 --> 00:02:38,640
vulnerability in this app we can request

00:02:36,640 --> 00:02:40,959
a file from a directory one level up by

00:02:38,640 --> 00:02:42,959
using the dot dot slash notation

00:02:40,959 --> 00:02:44,640
here we request the index.js file

00:02:42,959 --> 00:02:46,480
directly from the server

00:02:44,640 --> 00:02:47,920
and now we have bypassed the protection

00:02:46,480 --> 00:02:49,599
the developer thought that they put in

00:02:47,920 --> 00:02:51,920
place

00:02:49,599 --> 00:02:53,599
now this isn't big news it's a very

00:02:51,920 --> 00:02:56,000
simple traversal attack

00:02:53,599 --> 00:02:57,200
our story with load balances begins from

00:02:56,000 --> 00:02:59,120
here

00:02:57,200 --> 00:03:02,319
carrying out the exact same traversal

00:02:59,120 --> 00:03:05,120
attack we now go through the alb

00:03:02,319 --> 00:03:06,800
this time we receive a 400 bad request

00:03:05,120 --> 00:03:08,800
error

00:03:06,800 --> 00:03:10,879
after playing with a request to see how

00:03:08,800 --> 00:03:11,519
we could bypass this 400 bad request

00:03:10,879 --> 00:03:13,040
error

00:03:11,519 --> 00:03:14,800
i found that we can get our malicious

00:03:13,040 --> 00:03:16,879
request through the alb by using

00:03:14,800 --> 00:03:18,640
multiple slashes

00:03:16,879 --> 00:03:21,040
using multiple slashes at the beginning

00:03:18,640 --> 00:03:21,519
of the request then bypasses the 400

00:03:21,040 --> 00:03:23,440
error

00:03:21,519 --> 00:03:25,920
and we get the index.js file in the

00:03:23,440 --> 00:03:27,360
response

00:03:25,920 --> 00:03:29,040
in order to demonstrate this point

00:03:27,360 --> 00:03:31,519
further this shows an attempt at

00:03:29,040 --> 00:03:35,120
retrieving the etc password file

00:03:31,519 --> 00:03:36,879
through the aws alb once again

00:03:35,120 --> 00:03:38,720
this time we've added three slashes at

00:03:36,879 --> 00:03:41,280
the beginning of the request

00:03:38,720 --> 00:03:43,200
however once again we get 400 bad

00:03:41,280 --> 00:03:44,959
requests

00:03:43,200 --> 00:03:46,959
as before we're able to reach the

00:03:44,959 --> 00:03:47,599
vulnerable application by appending more

00:03:46,959 --> 00:03:49,519
slashes

00:03:47,599 --> 00:03:51,120
at the beginning of the request the

00:03:49,519 --> 00:03:52,959
number of slashes you need at the

00:03:51,120 --> 00:03:54,720
beginning of the request is relative to

00:03:52,959 --> 00:03:57,120
the number of directories you want to

00:03:54,720 --> 00:04:00,000
traverse

00:03:57,120 --> 00:04:02,879
the previous poc led to us asking what

00:04:00,000 --> 00:04:06,159
is going on in the aws alb load balancer

00:04:02,879 --> 00:04:08,319
so let's have a look when the requests

00:04:06,159 --> 00:04:10,239
were blocked we saw a certain pattern

00:04:08,319 --> 00:04:13,519
the 400 bad request response from the

00:04:10,239 --> 00:04:15,680
alb had a distinctive html signature

00:04:13,519 --> 00:04:17,759
after a simple google search and digging

00:04:15,680 --> 00:04:20,239
in github we found the signature in

00:04:17,759 --> 00:04:21,840
nginx

00:04:20,239 --> 00:04:24,240
digging into the configuration options

00:04:21,840 --> 00:04:24,880
for nginx for things related to slashes

00:04:24,240 --> 00:04:27,120
we found

00:04:24,880 --> 00:04:28,320
merge slashes the merge slashes

00:04:27,120 --> 00:04:30,240
configuration option

00:04:28,320 --> 00:04:32,240
allows compression of two or more

00:04:30,240 --> 00:04:35,600
adjacent slashes in a uri

00:04:32,240 --> 00:04:38,400
into a single slash when merged

00:04:35,600 --> 00:04:40,240
is on which is the default the poc shown

00:04:38,400 --> 00:04:41,040
before of using multiple slashes does

00:04:40,240 --> 00:04:44,240
not work

00:04:41,040 --> 00:04:46,160
when it's off it does work

00:04:44,240 --> 00:04:49,120
so we wanted to run the same test to see

00:04:46,160 --> 00:04:50,800
what behavior we see with nginx

00:04:49,120 --> 00:04:52,479
running with nginx with merge flashes

00:04:50,800 --> 00:04:53,280
off we can see the exact same behavior

00:04:52,479 --> 00:04:56,720
as with the

00:04:53,280 --> 00:04:58,479
alb we get a 400 bad request however

00:04:56,720 --> 00:05:00,960
adding more slashes at the beginning

00:04:58,479 --> 00:05:04,880
once again gives us a 200 response

00:05:00,960 --> 00:05:04,880
and we can read the etc password file

00:05:05,120 --> 00:05:08,639
in order to understand why this behavior

00:05:06,800 --> 00:05:12,240
happens we looked at the http

00:05:08,639 --> 00:05:14,880
uri passing code with nginx specifically

00:05:12,240 --> 00:05:18,080
our focus was on the nginx http

00:05:14,880 --> 00:05:19,680
complex uri function the code here

00:05:18,080 --> 00:05:20,800
essentially is counting the number of

00:05:19,680 --> 00:05:23,440
forward slashes

00:05:20,800 --> 00:05:25,120
versus dot dot slash notation if there

00:05:23,440 --> 00:05:28,720
aren't enough forward slashes

00:05:25,120 --> 00:05:30,479
it sends a 400 bad request error

00:05:28,720 --> 00:05:32,240
to test out this function and show that

00:05:30,479 --> 00:05:32,800
this is responsible for the behavior we

00:05:32,240 --> 00:05:35,840
see

00:05:32,800 --> 00:05:36,720
we created a simple test program here we

00:05:35,840 --> 00:05:38,639
can see when we

00:05:36,720 --> 00:05:39,759
run the test with a regular traversal

00:05:38,639 --> 00:05:43,199
attack we get an

00:05:39,759 --> 00:05:44,639
error and return code 11. here

00:05:43,199 --> 00:05:46,479
we can see that when we run the test

00:05:44,639 --> 00:05:49,120
with extra slashes at the beginning

00:05:46,479 --> 00:05:50,080
we return 0 meaning the function passed

00:05:49,120 --> 00:05:53,360
the url

00:05:50,080 --> 00:05:56,000
passing function with no issues

00:05:53,360 --> 00:05:58,000
so now we understand the alb and nginx

00:05:56,000 --> 00:05:59,120
behavior better let's talk briefly about

00:05:58,000 --> 00:06:02,240
what we should do about

00:05:59,120 --> 00:06:04,479
it we spoke to both the aws load

00:06:02,240 --> 00:06:05,759
balancer team and nginx team to discuss

00:06:04,479 --> 00:06:08,000
this behavior

00:06:05,759 --> 00:06:09,520
however it will not be changing as there

00:06:08,000 --> 00:06:12,400
are users of both who need this

00:06:09,520 --> 00:06:14,560
functionality for routing purposes

00:06:12,400 --> 00:06:16,880
this is not a vulnerability within nginx

00:06:14,560 --> 00:06:19,360
nor aws alb

00:06:16,880 --> 00:06:20,800
neither of them are protection solutions

00:06:19,360 --> 00:06:21,840
if you are looking for a protection

00:06:20,800 --> 00:06:25,039
solution

00:06:21,840 --> 00:06:27,759
use a wife my recommendation for your

00:06:25,039 --> 00:06:29,840
own security tests are if possible

00:06:27,759 --> 00:06:31,919
run your tests directly to the

00:06:29,840 --> 00:06:34,319
application that you're testing

00:06:31,919 --> 00:06:35,840
and if you must use an alb or nginx with

00:06:34,319 --> 00:06:38,080
merge flashes off

00:06:35,840 --> 00:06:39,759
either run traversal attack payloads

00:06:38,080 --> 00:06:41,199
with multiple slashes at the beginning

00:06:39,759 --> 00:06:43,440
of the request

00:06:41,199 --> 00:06:46,479
or manually review 400 bad request

00:06:43,440 --> 00:06:48,560
errors from traversal attack payloads

00:06:46,479 --> 00:06:52,240
thanks for listening and that summarizes

00:06:48,560 --> 00:06:54,880
my security chaos with load balances

00:06:52,240 --> 00:06:56,720
thank you very much danny it's nothing

00:06:54,880 --> 00:06:59,360
more refreshing

00:06:56,720 --> 00:07:03,840
on the afternoon than a bit of c plus

00:06:59,360 --> 00:07:03,840

YouTube URL: https://www.youtube.com/watch?v=-n0HBCBN7IU


