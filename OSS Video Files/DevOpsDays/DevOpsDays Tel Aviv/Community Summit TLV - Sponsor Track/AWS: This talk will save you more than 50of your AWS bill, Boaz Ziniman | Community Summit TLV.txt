Title: AWS: This talk will save you more than 50of your AWS bill, Boaz Ziniman | Community Summit TLV
Publication date: 2020-12-29
Playlist: Community Summit TLV - Sponsor Track
Description: 
	Cloud computing changed the way we consume and pay for computing resources. Paying for what you use, and only for that, is key to get the best ROI out of your cloud investment. This session will focus on one solution that can lower your AWS bill on idle computing.
Captions: 
	00:00:02,880 --> 00:00:05,940
[Music]

00:00:14,320 --> 00:00:17,920
all right

00:00:19,490 --> 00:00:23,120
[Music]

00:00:29,840 --> 00:00:34,880
cloud cost saving is a huge topic what

00:00:32,800 --> 00:00:36,960
can you learn about it in five minutes

00:00:34,880 --> 00:00:38,559
my name is bob zinwan from aws and if

00:00:36,960 --> 00:00:39,440
you join me for the next 12 minutes and

00:00:38,559 --> 00:00:41,600
50 seconds

00:00:39,440 --> 00:00:43,520
you will learn a cool solution to save

00:00:41,600 --> 00:00:45,520
you some of your cloud cost

00:00:43,520 --> 00:00:47,280
so let's look at an architecture that is

00:00:45,520 --> 00:00:48,320
very very common to a lot of our users a

00:00:47,280 --> 00:00:50,559
basic web app

00:00:48,320 --> 00:00:53,039
that is running on elastic bin stock it

00:00:50,559 --> 00:00:55,520
has some database in the backend it uses

00:00:53,039 --> 00:00:56,399
some s3 buckets and some additional

00:00:55,520 --> 00:00:57,680
services

00:00:56,399 --> 00:00:59,760
in addition to this production

00:00:57,680 --> 00:01:01,600
environment we have a development

00:00:59,760 --> 00:01:02,960
environment that is being used by our

00:01:01,600 --> 00:01:05,199
developers to develop

00:01:02,960 --> 00:01:06,960
and run the code but do i need this

00:01:05,199 --> 00:01:09,680
environment running 24 7

00:01:06,960 --> 00:01:10,640
do i need to pay for it run to run 24 7

00:01:09,680 --> 00:01:12,799
7 days a week

00:01:10,640 --> 00:01:14,479
and the answer is obviously not and in

00:01:12,799 --> 00:01:16,640
this presentation i'm going to show you

00:01:14,479 --> 00:01:18,000
how to save a lot of money by taking

00:01:16,640 --> 00:01:19,759
this environment and maybe other

00:01:18,000 --> 00:01:20,240
environments that you don't need 24 7

00:01:19,759 --> 00:01:22,640
down

00:01:20,240 --> 00:01:25,119
when you're not using them so let's go

00:01:22,640 --> 00:01:27,040
and save some seconds

00:01:25,119 --> 00:01:28,479
so there's a solution called aws

00:01:27,040 --> 00:01:31,520
instance scheduler

00:01:28,479 --> 00:01:32,560
and this one is going to save you a lot

00:01:31,520 --> 00:01:34,720
of money

00:01:32,560 --> 00:01:36,079
you can install this one on your account

00:01:34,720 --> 00:01:36,560
we'll show you in a second how to do

00:01:36,079 --> 00:01:39,040
that

00:01:36,560 --> 00:01:40,640
and by using tags you can define tags

00:01:39,040 --> 00:01:43,520
for specific instances

00:01:40,640 --> 00:01:44,159
or rds instances cc2 instances that will

00:01:43,520 --> 00:01:47,200
bring those

00:01:44,159 --> 00:01:48,320
instances down and up based on schedule

00:01:47,200 --> 00:01:49,840
so this is a page with all the

00:01:48,320 --> 00:01:51,680
definitions and how to install it on

00:01:49,840 --> 00:01:52,479
your account i already did it on my

00:01:51,680 --> 00:01:54,799
account

00:01:52,479 --> 00:01:55,840
and after you install it everything that

00:01:54,799 --> 00:01:58,159
you need to manage

00:01:55,840 --> 00:01:59,920
regarding instant scheduler is basically

00:01:58,159 --> 00:02:01,680
inside a dynamodb table so i have a

00:01:59,920 --> 00:02:02,880
table here with definitions for my

00:02:01,680 --> 00:02:04,640
general config

00:02:02,880 --> 00:02:06,079
periods that i'm going to use and

00:02:04,640 --> 00:02:08,239
specific schedules

00:02:06,079 --> 00:02:10,640
so i defined a period called office

00:02:08,239 --> 00:02:12,480
hours israeli office hours so it will

00:02:10,640 --> 00:02:14,879
begin at 9am if you start your work at

00:02:12,480 --> 00:02:17,520
9am and end at 5 30 pm

00:02:14,879 --> 00:02:18,480
it will be based on weekdays for israel

00:02:17,520 --> 00:02:20,720
sunday to

00:02:18,480 --> 00:02:23,599
thursday and i'm going to use it later

00:02:20,720 --> 00:02:25,200
on to define my specific schedules

00:02:23,599 --> 00:02:26,640
so after i have my period i can go and

00:02:25,200 --> 00:02:28,560
define the schedule i'm

00:02:26,640 --> 00:02:30,080
definitely find a schedule called ielt

00:02:28,560 --> 00:02:31,840
office hours

00:02:30,080 --> 00:02:33,519
it's going to use the period i defined

00:02:31,840 --> 00:02:36,800
earlier on with office hours

00:02:33,519 --> 00:02:39,280
once again 9 00 am 5 30 p.m

00:02:36,800 --> 00:02:40,080
time zone is going to be jerusalem for

00:02:39,280 --> 00:02:43,280
israel

00:02:40,080 --> 00:02:43,599
and then i can start and define and use

00:02:43,280 --> 00:02:46,319
this

00:02:43,599 --> 00:02:47,680
specific schedule for my different

00:02:46,319 --> 00:02:48,720
instances so i'm doing the definition in

00:02:47,680 --> 00:02:50,720
dynamodb

00:02:48,720 --> 00:02:52,400
after i'm done i need to go and

00:02:50,720 --> 00:02:56,080
implement those tags

00:02:52,400 --> 00:02:57,680
for my specific instances so

00:02:56,080 --> 00:02:59,360
as i told you before my application is

00:02:57,680 --> 00:03:02,640
running on elastic bean stock

00:02:59,360 --> 00:03:02,640
i have two environments

00:03:02,879 --> 00:03:07,120
so one is my uh production environment

00:03:05,519 --> 00:03:08,080
the live one and the other one is my

00:03:07,120 --> 00:03:09,599
test environment

00:03:08,080 --> 00:03:10,720
my test environment is my development

00:03:09,599 --> 00:03:12,319
environment as well you can see the

00:03:10,720 --> 00:03:13,200
configuration it will spin up some

00:03:12,319 --> 00:03:15,040
instances

00:03:13,200 --> 00:03:16,640
it has a definition for capacity minimum

00:03:15,040 --> 00:03:17,440
number of instances maximum number of

00:03:16,640 --> 00:03:20,159
instances

00:03:17,440 --> 00:03:20,879
based on what i need to apply the

00:03:20,159 --> 00:03:22,879
schedule

00:03:20,879 --> 00:03:25,360
on this environment i actually need to

00:03:22,879 --> 00:03:27,360
go and define a tag

00:03:25,360 --> 00:03:28,720
for this environment so here i define a

00:03:27,360 --> 00:03:30,480
tag called schedule

00:03:28,720 --> 00:03:31,760
it's always the key is always going to

00:03:30,480 --> 00:03:34,080
be

00:03:31,760 --> 00:03:35,519
and i added a value which is one of the

00:03:34,080 --> 00:03:38,319
schedules i defined

00:03:35,519 --> 00:03:39,760
in dynamodb aisle office hours and after

00:03:38,319 --> 00:03:42,480
i implement this tag

00:03:39,760 --> 00:03:43,280
and my system is going to update the

00:03:42,480 --> 00:03:46,159
environment

00:03:43,280 --> 00:03:47,120
all my ec2 instances that are in the

00:03:46,159 --> 00:03:48,560
test environment

00:03:47,120 --> 00:03:50,799
are going to get disturbed so you can

00:03:48,560 --> 00:03:52,879
see this is my ec2 instance schedule

00:03:50,799 --> 00:03:54,959
aisle office hours it's basically going

00:03:52,879 --> 00:03:57,439
to use this specific schedule

00:03:54,959 --> 00:03:58,879
if i'm going to monitoring and showing

00:03:57,439 --> 00:04:01,840
the last 12 hours

00:03:58,879 --> 00:04:02,640
you can see that my instance started at

00:04:01,840 --> 00:04:06,159
7am

00:04:02,640 --> 00:04:08,000
utc which is 9 a.m israeli time exactly

00:04:06,159 --> 00:04:09,680
based on my schedule if i'm going to

00:04:08,000 --> 00:04:10,319
wait until 5 30 p.m you're going to see

00:04:09,680 --> 00:04:13,120
this

00:04:10,319 --> 00:04:14,400
specific instance going down once again

00:04:13,120 --> 00:04:16,959
based on this definition

00:04:14,400 --> 00:04:18,320
of course it's not setting anything for

00:04:16,959 --> 00:04:20,400
my production environment

00:04:18,320 --> 00:04:21,759
so i can decide which instances are

00:04:20,400 --> 00:04:23,680
getting this stuck and which not

00:04:21,759 --> 00:04:25,040
only instances with this tag are going

00:04:23,680 --> 00:04:27,840
to be used

00:04:25,040 --> 00:04:29,120
for this specific scheduler and this is

00:04:27,840 --> 00:04:32,000
what i do for my

00:04:29,120 --> 00:04:33,280
ec2 instances i can do exactly the same

00:04:32,000 --> 00:04:35,120
thing for my

00:04:33,280 --> 00:04:36,320
rds instance for my database for my

00:04:35,120 --> 00:04:37,919
development database

00:04:36,320 --> 00:04:39,840
so going to my database dashboard you

00:04:37,919 --> 00:04:42,240
can see that i have two databases

00:04:39,840 --> 00:04:43,919
one is my production and the other one

00:04:42,240 --> 00:04:45,919
is my dev db

00:04:43,919 --> 00:04:47,759
i'm gonna go to tags and define the

00:04:45,919 --> 00:04:49,440
exact same tag obviously i can do other

00:04:47,759 --> 00:04:50,560
schedules for my database if i need to

00:04:49,440 --> 00:04:52,720
do something like that

00:04:50,560 --> 00:04:53,759
in my case i want to have exactly the

00:04:52,720 --> 00:04:56,080
same definition

00:04:53,759 --> 00:04:58,000
once again going to monitoring last 12

00:04:56,080 --> 00:05:01,360
hours and as you can see

00:04:58,000 --> 00:05:04,400
it started at 9am israeli time

00:05:01,360 --> 00:05:08,000
and in a week there are 168

00:05:04,400 --> 00:05:08,479
hours but i'm going to pay only for 42.5

00:05:08,000 --> 00:05:11,759
hours

00:05:08,479 --> 00:05:13,600
this is almost 75 selling

00:05:11,759 --> 00:05:15,360
so this is simple and cool and there are

00:05:13,600 --> 00:05:16,080
a lot of other cost saving options on

00:05:15,360 --> 00:05:17,520
aws

00:05:16,080 --> 00:05:19,280
that you should look into and some of

00:05:17,520 --> 00:05:21,199
them are on this slide the link to the

00:05:19,280 --> 00:05:23,199
instant scheduler is here as well

00:05:21,199 --> 00:05:24,720
and i hope you gonna save some money i

00:05:23,199 --> 00:05:26,639
hope you enjoyed this talk

00:05:24,720 --> 00:05:39,840
contact me for any questions see you

00:05:26,639 --> 00:05:39,840

YouTube URL: https://www.youtube.com/watch?v=s59_izD0eHk


