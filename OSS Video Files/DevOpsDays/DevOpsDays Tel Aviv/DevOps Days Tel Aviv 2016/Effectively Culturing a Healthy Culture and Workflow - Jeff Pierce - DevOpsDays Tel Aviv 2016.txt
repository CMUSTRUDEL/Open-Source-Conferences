Title: Effectively Culturing a Healthy Culture and Workflow - Jeff Pierce - DevOpsDays Tel Aviv 2016
Publication date: 2017-01-02
Playlist: DevOps Days Tel Aviv 2016
Description: 
	
Captions: 
	00:00:02,700 --> 00:00:11,290
[Music]

00:00:06,960 --> 00:00:12,910
alright my name is Jeff Pierce and I'm

00:00:11,290 --> 00:00:16,919
here to talk about how to effectively

00:00:12,910 --> 00:00:19,300
culture a healthy culture and workflow I

00:00:16,919 --> 00:00:23,169
am Jeff Pierce i am an operations

00:00:19,300 --> 00:00:25,329
engineer at remind we are a education

00:00:23,169 --> 00:00:28,979
messaging company we connect teachers

00:00:25,329 --> 00:00:32,949
students and parents we found a reminder

00:00:28,979 --> 00:00:35,640
email is jeff at remind101 calm my

00:00:32,949 --> 00:00:38,440
github is github.com / Jeff Pierce

00:00:35,640 --> 00:00:41,500
twitter i am the Technomancer note the

00:00:38,440 --> 00:00:44,199
three and this slide deck is available

00:00:41,500 --> 00:00:48,789
on speaker deck at speaker tech comm /

00:00:44,199 --> 00:00:51,789
Technomancer so but about me I've done

00:00:48,789 --> 00:00:55,510
stints at Apple Rackspace and change.org

00:00:51,789 --> 00:00:58,929
I am the project sorry project lead and

00:00:55,510 --> 00:01:05,140
developer at casa bond we make graphite

00:00:58,929 --> 00:01:09,280
not suck and I occasionally will blog at

00:01:05,140 --> 00:01:15,460
all most interesting dotnet much like me

00:01:09,280 --> 00:01:18,340
I'm only almost interesting so one of

00:01:15,460 --> 00:01:20,920
the speaker's last year Jay Paul Reid

00:01:18,340 --> 00:01:24,570
put out this great tweet that I love and

00:01:20,920 --> 00:01:26,920
that is for cloud DevOps containers

00:01:24,570 --> 00:01:28,240
microservices server list sorry I've had

00:01:26,920 --> 00:01:31,870
three back surgeries I stumble a little

00:01:28,240 --> 00:01:34,330
bit do echo this tech won't fix your

00:01:31,870 --> 00:01:38,590
broken culture and then hey look you

00:01:34,330 --> 00:01:42,450
have a conference talk so let's talk

00:01:38,590 --> 00:01:46,270
about culture and workflow basically in

00:01:42,450 --> 00:01:49,470
my view there are four key points to

00:01:46,270 --> 00:01:53,800
having a healthy culture and workflow

00:01:49,470 --> 00:01:56,700
first is that everyone involved need to

00:01:53,800 --> 00:02:02,650
have a sense of personal responsibility

00:01:56,700 --> 00:02:04,210
your code is yours treat it like it you

00:02:02,650 --> 00:02:06,190
also need to choose an application

00:02:04,210 --> 00:02:10,319
architecture philosophy and stick to it

00:02:06,190 --> 00:02:10,319
this makes sure that you have

00:02:11,100 --> 00:02:17,700
a very strong foundation for all of your

00:02:15,060 --> 00:02:18,840
new services applications etc you know

00:02:17,700 --> 00:02:21,510
they're going to be built the same way

00:02:18,840 --> 00:02:24,930
configured the same way things of that

00:02:21,510 --> 00:02:26,910
nature you need to make important

00:02:24,930 --> 00:02:29,760
decisions before you're under fire I

00:02:26,910 --> 00:02:33,270
mean who here has been rushed to make a

00:02:29,760 --> 00:02:36,480
decision and made a mistake show of

00:02:33,270 --> 00:02:41,310
hands everyone whose hand isn't up your

00:02:36,480 --> 00:02:45,000
life and then finally as much as we

00:02:41,310 --> 00:02:46,380
would like to pave over everything you

00:02:45,000 --> 00:02:49,740
really want to use your existing tool

00:02:46,380 --> 00:02:52,830
set whenever possible so let's go in a

00:02:49,740 --> 00:02:58,200
little bit of detail about these four

00:02:52,830 --> 00:03:00,840
points personal responsibility in the

00:02:58,200 --> 00:03:02,460
old world before DevOps you had your

00:03:00,840 --> 00:03:05,010
developers and you had an Operations

00:03:02,460 --> 00:03:11,310
team and then you get situations like

00:03:05,010 --> 00:03:16,380
this we're fine a dev ops problem now

00:03:11,310 --> 00:03:21,120
everything's on fire so the first step

00:03:16,380 --> 00:03:23,250
in having personal responsibility is

00:03:21,120 --> 00:03:30,210
that developers need to deploy their own

00:03:23,250 --> 00:03:33,090
code after all you've created it you've

00:03:30,210 --> 00:03:36,960
built it out you should Shepherd it into

00:03:33,090 --> 00:03:38,820
production this obviously requires a

00:03:36,960 --> 00:03:41,160
strong continuous integration and

00:03:38,820 --> 00:03:44,040
continuous deployment tool chain

00:03:41,160 --> 00:03:49,080
to make sure your code is checked it's

00:03:44,040 --> 00:04:03,690
done fast I am fighting with the

00:03:49,080 --> 00:04:06,000
speaker's anyway no all right so this

00:04:03,690 --> 00:04:08,670
also requires a robust infrastructure

00:04:06,000 --> 00:04:10,320
plan that makes rolling back bad deploys

00:04:08,670 --> 00:04:12,270
easy I'm sure you've all heard of the

00:04:10,320 --> 00:04:14,960
concept of immutable servers has anyone

00:04:12,270 --> 00:04:17,700
not heard mr. immutable servers Joe hey

00:04:14,960 --> 00:04:21,090
all right immutable servers is a concept

00:04:17,700 --> 00:04:34,470
that says you're going to deploy the

00:04:21,090 --> 00:04:37,910
server whether that's an Amazon am I now

00:04:34,470 --> 00:04:37,910
be completing the stock image

00:04:40,790 --> 00:04:54,330
classification and adenosine diseases

00:04:46,770 --> 00:05:04,650
babies that's our mission or vision so

00:04:54,330 --> 00:05:07,110
the first fortunately I can be loud yes

00:05:04,650 --> 00:05:09,419
you should obviously talk over everyone

00:05:07,110 --> 00:05:10,650
else in the world but immutable servers

00:05:09,419 --> 00:05:12,600
basically means that you're deploying

00:05:10,650 --> 00:05:15,890
your code and your server infrastructure

00:05:12,600 --> 00:05:18,390
as one

00:05:15,890 --> 00:05:22,220
you don't change it once it's deployed

00:05:18,390 --> 00:05:26,120
you roll out new am eyes new servers

00:05:22,220 --> 00:05:28,650
things of that nature new containers

00:05:26,120 --> 00:05:32,820
completely you do not change something

00:05:28,650 --> 00:05:34,080
already deployed another thing that you

00:05:32,820 --> 00:05:36,900
have to have is so personal

00:05:34,080 --> 00:05:39,690
responsibility is an all-hands pager

00:05:36,900 --> 00:05:41,880
it's not just your operations team your

00:05:39,690 --> 00:05:44,250
systems engineering your sres whatever

00:05:41,880 --> 00:05:49,490
you want to call them it's not just them

00:05:44,250 --> 00:05:51,810
fighting the fires but to do this since

00:05:49,490 --> 00:05:55,410
not all engineers will be familiar with

00:05:51,810 --> 00:05:57,780
all pieces of the code this requires a

00:05:55,410 --> 00:05:59,700
very strong set of run books for

00:05:57,780 --> 00:06:01,950
troubleshooting these are the things

00:05:59,700 --> 00:06:04,290
that you need to build and put in place

00:06:01,950 --> 00:06:06,360
use that way when the pager goes off at

00:06:04,290 --> 00:06:09,660
oh my god in the morning you don't have

00:06:06,360 --> 00:06:11,960
to do a whole lot of thinking and it

00:06:09,660 --> 00:06:14,310
spreads around the pain of on-call duty

00:06:11,960 --> 00:06:16,050
you know you don't want to end up in a

00:06:14,310 --> 00:06:18,600
situation where the monitors are read

00:06:16,050 --> 00:06:21,530
the ops team is blue someone switched up

00:06:18,600 --> 00:06:25,890
their operators and now false is true

00:06:21,530 --> 00:06:27,330
and it also helps to have a common

00:06:25,890 --> 00:06:29,250
architecture philosophy to make

00:06:27,330 --> 00:06:31,320
troubleshooting individual applications

00:06:29,250 --> 00:06:32,840
easier you always want to know your logs

00:06:31,320 --> 00:06:35,940
are going to be in the same place but

00:06:32,840 --> 00:06:37,680
the same supervisor application whether

00:06:35,940 --> 00:06:39,000
that system the supervised or something

00:06:37,680 --> 00:06:45,930
like that is going to be running your

00:06:39,000 --> 00:06:47,790
software so in order to do that you need

00:06:45,930 --> 00:06:50,669
to pick an application architecture

00:06:47,790 --> 00:06:52,560
philosophy need to stick with it one of

00:06:50,669 --> 00:06:54,630
my favorites is called the 12 factor app

00:06:52,560 --> 00:06:58,140
and this is copied directly from their

00:06:54,630 --> 00:07:00,780
site at 12 factor net but the idea

00:06:58,140 --> 00:07:02,100
behind to 12 factor application is that

00:07:00,780 --> 00:07:04,590
you're going to use to Clara to formats

00:07:02,100 --> 00:07:05,940
for your setup automation want to

00:07:04,590 --> 00:07:07,380
minimize time and cost for new

00:07:05,940 --> 00:07:10,590
developers joining the project by doing

00:07:07,380 --> 00:07:12,270
that one of a clean contract with the

00:07:10,590 --> 00:07:14,040
underlying operating system offering

00:07:12,270 --> 00:07:15,300
maximum portability between execution

00:07:14,040 --> 00:07:16,919
environments this means doing things

00:07:15,300 --> 00:07:19,980
like rather than having a configuration

00:07:16,919 --> 00:07:21,960
file you set your knee to configuration

00:07:19,980 --> 00:07:25,289
as environment variables so no matter

00:07:21,960 --> 00:07:26,580
where you deploy it's going to look the

00:07:25,289 --> 00:07:27,990
same the only thing that's changing is

00:07:26,580 --> 00:07:29,050
your environment variables you not to

00:07:27,990 --> 00:07:30,460
worry about managing

00:07:29,050 --> 00:07:34,319
miles or anything like that so remember

00:07:30,460 --> 00:07:35,979
we want as few moving parts as possible

00:07:34,319 --> 00:07:37,690
applications built like this are

00:07:35,979 --> 00:07:40,810
suitable for deployments on modern cloud

00:07:37,690 --> 00:07:43,479
platforms obviating the need for servers

00:07:40,810 --> 00:07:45,280
and systems administration in today's

00:07:43,479 --> 00:07:47,020
world especially if you are a start-up

00:07:45,280 --> 00:07:48,940
and you're using Amazon they have a ton

00:07:47,020 --> 00:07:51,340
of services that don't require you to

00:07:48,940 --> 00:07:52,900
actually run a server take advantage of

00:07:51,340 --> 00:07:57,610
them because then they're dealing with

00:07:52,900 --> 00:07:59,370
that back-end BS then you want to

00:07:57,610 --> 00:08:02,169
minimize the divergence between

00:07:59,370 --> 00:08:03,819
development and production you want to

00:08:02,169 --> 00:08:06,759
enable your continuous deployment for

00:08:03,819 --> 00:08:08,590
Maxim Angela you want to be able to make

00:08:06,759 --> 00:08:10,449
sure that your staging environment is

00:08:08,590 --> 00:08:12,250
like your production is like your

00:08:10,449 --> 00:08:14,139
development environment and it's across

00:08:12,250 --> 00:08:16,270
all different regions this is the same

00:08:14,139 --> 00:08:18,879
thing no matter where you go your

00:08:16,270 --> 00:08:22,180
deployment is as similar as possible to

00:08:18,879 --> 00:08:23,860
every environment and finally it can

00:08:22,180 --> 00:08:25,719
scale up without significant changes to

00:08:23,860 --> 00:08:27,219
tooling architecture or development

00:08:25,719 --> 00:08:29,949
practices because once you have chosen

00:08:27,219 --> 00:08:33,880
this architecture everyone in here knows

00:08:29,949 --> 00:08:36,520
that once you have a set of policies and

00:08:33,880 --> 00:08:38,860
procedures in place it is damn near

00:08:36,520 --> 00:08:40,779
impossible to change it whether that's

00:08:38,860 --> 00:08:42,760
because of time they need to get out

00:08:40,779 --> 00:08:44,350
features anything like that if you're

00:08:42,760 --> 00:08:49,270
having to change this you are racking up

00:08:44,350 --> 00:08:51,250
technical debt at an amazing pace so

00:08:49,270 --> 00:08:53,200
when we pick an application architecture

00:08:51,250 --> 00:08:55,810
philosophy whether it's 12 factor or

00:08:53,200 --> 00:08:58,240
crash only system or crash only

00:08:55,810 --> 00:09:00,779
applications things like that look it

00:08:58,240 --> 00:09:04,630
makes onboarding of new engineers faster

00:09:00,779 --> 00:09:07,180
every application in the stack is treaty

00:09:04,630 --> 00:09:09,430
resources the same way it where you

00:09:07,180 --> 00:09:12,270
deploy it it's no matter what it's the

00:09:09,430 --> 00:09:14,589
same sand your environment variables

00:09:12,270 --> 00:09:16,510
this makes your tooling more portable

00:09:14,589 --> 00:09:18,370
and reusable because less code we have

00:09:16,510 --> 00:09:23,800
to rewrite the better for obvious

00:09:18,370 --> 00:09:26,940
reasons it also makes planning for new

00:09:23,800 --> 00:09:30,339
applications and microservices a breeze

00:09:26,940 --> 00:09:33,310
you know how your new application is

00:09:30,339 --> 00:09:35,070
going to be deployed you know how it's

00:09:33,310 --> 00:09:39,699
going to interact with your data stores

00:09:35,070 --> 00:09:40,810
and you know it's just it makes

00:09:39,699 --> 00:09:42,370
everything a lot of you sit down a

00:09:40,810 --> 00:09:42,760
meeting and not have to worry about how

00:09:42,370 --> 00:09:44,710
do we

00:09:42,760 --> 00:09:46,840
architect this you already know how now

00:09:44,710 --> 00:09:53,260
it's just you know putting in the pieces

00:09:46,840 --> 00:09:54,430
to make your application work so you

00:09:53,260 --> 00:09:56,920
want to make sure that when you make

00:09:54,430 --> 00:09:58,150
decisions you aren't under fire you're

00:09:56,920 --> 00:09:59,820
not trying to do this in the middle of

00:09:58,150 --> 00:10:02,890
emergency you're not trying to do this

00:09:59,820 --> 00:10:04,990
during a ramp-up period for example

00:10:02,890 --> 00:10:07,240
working at remind we're school messaging

00:10:04,990 --> 00:10:09,880
the back-to-school season after summer

00:10:07,240 --> 00:10:12,790
break in the US is one of our busiest

00:10:09,880 --> 00:10:14,260
times if not the busiest time we don't

00:10:12,790 --> 00:10:16,180
want to make decisions on how to do

00:10:14,260 --> 00:10:18,280
things when we're all working 60 hour

00:10:16,180 --> 00:10:19,810
weeks and scrambling around trying to

00:10:18,280 --> 00:10:24,070
figure out how we're going to handle all

00:10:19,810 --> 00:10:25,720
of these new customers so as we have

00:10:24,070 --> 00:10:28,500
with the show of hands earlier when you

00:10:25,720 --> 00:10:30,820
rush you're planning mistakes are made

00:10:28,500 --> 00:10:32,920
make sure you have plenty of time to

00:10:30,820 --> 00:10:35,790
think about how you're going to

00:10:32,920 --> 00:10:37,690
implement these things I've talked about

00:10:35,790 --> 00:10:40,030
you want to make sure to plan your

00:10:37,690 --> 00:10:42,130
objectives on a yearly quarterly and

00:10:40,030 --> 00:10:44,830
perspirant basis you need to have your

00:10:42,130 --> 00:10:47,920
long term goal where you want to be in a

00:10:44,830 --> 00:10:50,710
year you have a quarterly plan that

00:10:47,920 --> 00:10:52,380
taught that talks about how you're going

00:10:50,710 --> 00:10:54,190
to get there the various steps

00:10:52,380 --> 00:10:56,140
quarter-to-quarter something measurable

00:10:54,190 --> 00:10:59,380
for the bosses at the end of the day

00:10:56,140 --> 00:11:01,690
these are all business decisions now a

00:10:59,380 --> 00:11:03,880
purse print basis allows you to jump to

00:11:01,690 --> 00:11:06,670
make chunks out of the work manageable

00:11:03,880 --> 00:11:12,400
and set short-term goals that can be

00:11:06,670 --> 00:11:14,950
easily achieve them you also as I

00:11:12,400 --> 00:11:16,720
mentioned earlier you earlier sorry you

00:11:14,950 --> 00:11:19,270
want to write run books to remove the

00:11:16,720 --> 00:11:21,070
amount of thought required at 325 in the

00:11:19,270 --> 00:11:23,470
morning and production has gone to hell

00:11:21,070 --> 00:11:25,690
because it happens no matter how well

00:11:23,470 --> 00:11:27,310
something is designed something will

00:11:25,690 --> 00:11:31,120
break it will be a vendor dependency

00:11:27,310 --> 00:11:33,310
it'll be a bad push-up code you never

00:11:31,120 --> 00:11:34,810
know but it's going to break so make

00:11:33,310 --> 00:11:37,930
sure you have all your instructions in

00:11:34,810 --> 00:11:40,090
line so that whoever of our all hands on

00:11:37,930 --> 00:11:44,290
call rotation happens to have page or

00:11:40,090 --> 00:11:45,880
due to blow up their phone you know if

00:11:44,290 --> 00:11:51,610
asana galaxy note 7 those explode on

00:11:45,880 --> 00:11:52,930
their own you want them to have to do as

00:11:51,610 --> 00:11:54,670
little thought as possible there is a

00:11:52,930 --> 00:11:56,230
run book these are the possible ways the

00:11:54,670 --> 00:11:58,510
application can break go down

00:11:56,230 --> 00:12:03,550
these steps have a clear escalation path

00:11:58,510 --> 00:12:05,350
that that fails and then one of the big

00:12:03,550 --> 00:12:07,930
ones that a lot of companies do not to

00:12:05,350 --> 00:12:09,340
is when they are planning it is when

00:12:07,930 --> 00:12:11,890
your feature development teams are

00:12:09,340 --> 00:12:13,390
planning for a new feature or something

00:12:11,890 --> 00:12:15,760
that's going to add load to the

00:12:13,390 --> 00:12:17,710
infrastructure DevOps and the

00:12:15,760 --> 00:12:21,520
infrastructure teams are nowhere to be

00:12:17,710 --> 00:12:24,100
found in a lot of cases and that needs

00:12:21,520 --> 00:12:25,570
to change Dallas entropies need to sit

00:12:24,100 --> 00:12:28,450
in on feature planning they need to be

00:12:25,570 --> 00:12:31,630
there from the start so that way there's

00:12:28,450 --> 00:12:33,220
no rush you know you're two weeks out

00:12:31,630 --> 00:12:35,230
from application launch and no one's

00:12:33,220 --> 00:12:36,670
giving you the specifications of the

00:12:35,230 --> 00:12:40,240
systems of this application is supposed

00:12:36,670 --> 00:12:43,480
to run on by sitting in early on these

00:12:40,240 --> 00:12:45,160
meetings and offer your opinions and the

00:12:43,480 --> 00:12:46,750
knowledge that you have of this tool set

00:12:45,160 --> 00:12:49,420
because if you're Dallas is your

00:12:46,750 --> 00:12:51,160
infrastructure engineer you have a very

00:12:49,420 --> 00:12:53,410
specialized knowledge very deep

00:12:51,160 --> 00:12:55,630
knowledge usually of how everything

00:12:53,410 --> 00:12:57,190
works so you'll be able to advise them

00:12:55,630 --> 00:13:00,940
that this is going to take a certain

00:12:57,190 --> 00:13:02,920
amount of time that you know you need to

00:13:00,940 --> 00:13:05,500
plan for these contingencies you need to

00:13:02,920 --> 00:13:07,840
have your run books ready these are all

00:13:05,500 --> 00:13:09,790
things that make a minimum supportable

00:13:07,840 --> 00:13:14,500
product not a Minimum Viable one but a

00:13:09,790 --> 00:13:17,290
minimum supportable one because the end

00:13:14,500 --> 00:13:20,770
goal here is to be a proactive and not a

00:13:17,290 --> 00:13:25,000
reactive department as systems

00:13:20,770 --> 00:13:27,640
engineering I mean who here feels that

00:13:25,000 --> 00:13:30,070
if you are a systems of structure

00:13:27,640 --> 00:13:33,940
systems engineer infrastructure engineer

00:13:30,070 --> 00:13:35,950
site reliability that you find yourself

00:13:33,940 --> 00:13:41,890
being more developer support than an

00:13:35,950 --> 00:13:44,710
engineer in a lot of cases all right so

00:13:41,890 --> 00:13:47,770
the point here is to make sure that the

00:13:44,710 --> 00:13:54,130
split between engineering and developer

00:13:47,770 --> 00:13:55,990
support is a fair balance because we're

00:13:54,130 --> 00:13:57,610
all smart people we like engineering we

00:13:55,990 --> 00:14:01,240
like building things we like making

00:13:57,610 --> 00:14:03,280
these intricate complex systems work in

00:14:01,240 --> 00:14:06,040
order to do that and not just be

00:14:03,280 --> 00:14:09,290
fighting fire after fire after fire you

00:14:06,040 --> 00:14:10,910
have to be proactive and to get there

00:14:09,290 --> 00:14:12,829
you have to follow these steps so you

00:14:10,910 --> 00:14:17,540
know where you're going you have to have

00:14:12,829 --> 00:14:20,720
a plan and then finally you want to use

00:14:17,540 --> 00:14:22,370
existing tools whenever possible yes I

00:14:20,720 --> 00:14:24,259
know they suck I mean God forbid you're

00:14:22,370 --> 00:14:25,759
stuck with something like CF engine or

00:14:24,259 --> 00:14:29,839
you're still doing things with shell

00:14:25,759 --> 00:14:31,750
scripts or you know but at the end of

00:14:29,839 --> 00:14:35,660
the day if you're using existing tools

00:14:31,750 --> 00:14:37,339
you're reducing training you have talent

00:14:35,660 --> 00:14:39,889
at your workplace they have a certain

00:14:37,339 --> 00:14:41,870
set of knowledge try to use that as much

00:14:39,889 --> 00:14:46,819
as possible because trading is time time

00:14:41,870 --> 00:14:49,759
is money requires less engineering work

00:14:46,819 --> 00:14:51,709
you know that if we're able to use

00:14:49,759 --> 00:14:54,259
out-of-the-box tools or tools that

00:14:51,709 --> 00:14:56,089
already exist this is time that we

00:14:54,259 --> 00:14:59,870
assistant engineers don't have to sit

00:14:56,089 --> 00:15:01,339
there and build glue code or you know

00:14:59,870 --> 00:15:02,240
look at the application see how they're

00:15:01,339 --> 00:15:06,170
going to fit together we've already

00:15:02,240 --> 00:15:09,290
figured that out obviously like I said

00:15:06,170 --> 00:15:11,029
this saves time and money so at the end

00:15:09,290 --> 00:15:12,850
of the day again these are all business

00:15:11,029 --> 00:15:14,660
decisions that need to be made

00:15:12,850 --> 00:15:15,800
unfortunately today's world whether you

00:15:14,660 --> 00:15:18,560
like it or not as the devops engineer

00:15:15,800 --> 00:15:20,600
you must think about business in many

00:15:18,560 --> 00:15:23,480
companies we are a cost center not a

00:15:20,600 --> 00:15:25,459
value provider and because of that we

00:15:23,480 --> 00:15:28,490
have to continually think about what

00:15:25,459 --> 00:15:29,930
we're spending how much time it's taking

00:15:28,490 --> 00:15:32,180
are we standing in the way of feature

00:15:29,930 --> 00:15:38,360
deployments of items that make money for

00:15:32,180 --> 00:15:41,750
our company so that's all well and good

00:15:38,360 --> 00:15:44,149
I'm sure most of you have heard much of

00:15:41,750 --> 00:15:46,850
this before in different talks this is

00:15:44,149 --> 00:15:48,620
nothing new but what many speakers don't

00:15:46,850 --> 00:15:51,529
go into and what I'm hoping to go into

00:15:48,620 --> 00:15:54,860
today is how to actually make this

00:15:51,529 --> 00:15:57,740
happen all right you need to be the

00:15:54,860 --> 00:15:59,959
change that you want to see because at

00:15:57,740 --> 00:16:01,579
the end of the day you have to figure

00:15:59,959 --> 00:16:09,050
out how you're going to get this all in

00:16:01,579 --> 00:16:11,420
place so as I saw on my bio earlier I

00:16:09,050 --> 00:16:14,470
used to work at change.org and one thing

00:16:11,420 --> 00:16:18,410
that I definitely learned from there is

00:16:14,470 --> 00:16:20,899
how to get attention to an issue one of

00:16:18,410 --> 00:16:22,490
the first things you can do is build a

00:16:20,899 --> 00:16:23,839
compelling story

00:16:22,490 --> 00:16:26,300
one of my favorite quotes is from an

00:16:23,839 --> 00:16:30,350
American politician Rahm Emanuel and it

00:16:26,300 --> 00:16:32,660
is never waste a crisis when something

00:16:30,350 --> 00:16:33,890
blows up when something goes bad would

00:16:32,660 --> 00:16:36,170
you've had one of those engineering

00:16:33,890 --> 00:16:37,970
horror stories that everyone is run into

00:16:36,170 --> 00:16:41,930
at some point in their career and if you

00:16:37,970 --> 00:16:43,580
haven't you will you want to find that

00:16:41,930 --> 00:16:46,370
compelling story you want to give a

00:16:43,580 --> 00:16:48,620
reason to say this is going to make our

00:16:46,370 --> 00:16:50,240
lives better if we do this we're going

00:16:48,620 --> 00:16:53,300
to you know maybe you are in a workplace

00:16:50,240 --> 00:16:56,120
where you know you can only deploy your

00:16:53,300 --> 00:16:57,920
code proper you know effectively forty

00:16:56,120 --> 00:17:01,940
percent of the time you have bad builds

00:16:57,920 --> 00:17:04,069
you have bad pushes or your application

00:17:01,940 --> 00:17:07,579
isn't highly available so it crashes and

00:17:04,069 --> 00:17:09,589
it's waking people up or because there's

00:17:07,579 --> 00:17:11,329
not a tool set in place the systems

00:17:09,589 --> 00:17:14,000
engineering team or the devops engineer

00:17:11,329 --> 00:17:16,000
on a feature team is so far behind that

00:17:14,000 --> 00:17:18,589
they're holding up the release of

00:17:16,000 --> 00:17:20,839
applications updates things like this

00:17:18,589 --> 00:17:24,319
these are the compelling stories that

00:17:20,839 --> 00:17:25,760
you could take to management to make the

00:17:24,319 --> 00:17:27,860
change you want to see and it's not just

00:17:25,760 --> 00:17:29,809
management you identify the key

00:17:27,860 --> 00:17:31,760
stakeholders and what you're doing these

00:17:29,809 --> 00:17:35,240
are the engineering managers this is

00:17:31,760 --> 00:17:39,740
your VP of Technology this is your CFO

00:17:35,240 --> 00:17:41,210
because again business decisions once

00:17:39,740 --> 00:17:44,540
you've identified them you need to

00:17:41,210 --> 00:17:45,800
engage them because you know how many

00:17:44,540 --> 00:17:48,380
again another show of hands how many of

00:17:45,800 --> 00:17:53,059
us in here have brought a plan like this

00:17:48,380 --> 00:17:56,720
to their boss and just got nothing back

00:17:53,059 --> 00:17:58,809
just stonewalled happens to a lot of us

00:17:56,720 --> 00:18:01,250
this is this is common for this industry

00:17:58,809 --> 00:18:03,200
but you need to engage them you need to

00:18:01,250 --> 00:18:09,950
tell this compelling story to them you

00:18:03,200 --> 00:18:12,200
need to sell it because again like I

00:18:09,950 --> 00:18:14,210
keep I want to drive this point home you

00:18:12,200 --> 00:18:16,210
need to make a business case for this if

00:18:14,210 --> 00:18:18,500
you're doing this right and you're

00:18:16,210 --> 00:18:20,990
architecting your applications properly

00:18:18,500 --> 00:18:22,550
and you're enforcing these processes and

00:18:20,990 --> 00:18:23,929
policies they don't have to be onerous

00:18:22,550 --> 00:18:25,460
doesn't need to be a bunch of red tape

00:18:23,929 --> 00:18:27,650
but it needs to be a process that people

00:18:25,460 --> 00:18:30,650
follow because when you made that

00:18:27,650 --> 00:18:32,750
business case when you could go and say

00:18:30,650 --> 00:18:35,419
this is going to save us a certain

00:18:32,750 --> 00:18:36,140
amount of bunny that's hard for someone

00:18:35,419 --> 00:18:38,690
to pass up

00:18:36,140 --> 00:18:42,580
especially when if you have a sprawling

00:18:38,690 --> 00:18:45,350
AWS deployment or something like that

00:18:42,580 --> 00:18:47,000
saving a lot of money can bring can act

00:18:45,350 --> 00:18:49,880
like you're bringing in as much revenue

00:18:47,000 --> 00:18:51,830
as a new product at that point now you

00:18:49,880 --> 00:18:53,810
are a value add to your company you are

00:18:51,830 --> 00:18:56,350
no longer a cost Center you are

00:18:53,810 --> 00:19:00,890
engineering you're not developer support

00:18:56,350 --> 00:19:02,330
and then finally you'd actually do what

00:19:00,890 --> 00:19:05,450
you said you're going to do you need to

00:19:02,330 --> 00:19:09,470
prototype this plan you need to secure

00:19:05,450 --> 00:19:12,470
the time to go out build this software

00:19:09,470 --> 00:19:15,440
or implement this tool set and you need

00:19:12,470 --> 00:19:18,440
to show that it works because the end

00:19:15,440 --> 00:19:20,270
the day again a lot of these lot of

00:19:18,440 --> 00:19:22,880
stuff I'm talking about everyone here is

00:19:20,270 --> 00:19:26,620
heard before but how many people have

00:19:22,880 --> 00:19:26,620
actually gone and put it in practice

00:19:26,680 --> 00:19:36,140
anyone very few prototyping your plan

00:19:34,550 --> 00:19:38,300
like any piece of software shows that

00:19:36,140 --> 00:19:40,340
you have a minimum viable product and a

00:19:38,300 --> 00:19:42,380
minimum supportable product and you have

00:19:40,340 --> 00:19:45,830
to think about your infrastructure as a

00:19:42,380 --> 00:19:49,790
product you are releasing tools to make

00:19:45,830 --> 00:19:52,640
developers lives easier you are setting

00:19:49,790 --> 00:19:55,310
up an infrastructure where developers

00:19:52,640 --> 00:20:00,560
can own their code from development to

00:19:55,310 --> 00:20:04,250
production including deployment you do

00:20:00,560 --> 00:20:06,830
all of these things and then you have a

00:20:04,250 --> 00:20:14,480
chance of actually getting this culture

00:20:06,830 --> 00:20:15,920
shift and this workflow in place so you

00:20:14,480 --> 00:20:21,250
look like a room full of winners and

00:20:15,920 --> 00:20:21,250
they ask questions so by all means

00:20:31,399 --> 00:20:36,049
the question the question was that a lot

00:20:34,609 --> 00:20:38,830
of this stuff works well for a cloud

00:20:36,049 --> 00:20:41,989
environment but have I seen this work in

00:20:38,830 --> 00:20:44,479
on-premises setting absolutely a

00:20:41,989 --> 00:20:47,089
previous job I was at was running its

00:20:44,479 --> 00:21:00,019
own data center it had a vmware stack

00:20:47,089 --> 00:21:02,419
and sorry gotcha so if you're creating

00:21:00,019 --> 00:21:05,859
software that you're actually shipping

00:21:02,419 --> 00:21:08,210
the people rather than putting online

00:21:05,859 --> 00:21:10,099
there are definitely issues you can have

00:21:08,210 --> 00:21:11,929
statistics in your software that send

00:21:10,099 --> 00:21:14,809
information home learn about how your

00:21:11,929 --> 00:21:18,200
users are using it and things of that

00:21:14,809 --> 00:21:19,369
nature get them to sign you know get the

00:21:18,200 --> 00:21:21,109
people who are buying your software

00:21:19,369 --> 00:21:24,559
you'll find ones that are friendly to

00:21:21,109 --> 00:21:25,969
you and you know let them allow you to

00:21:24,559 --> 00:21:30,859
collect data from them give them a

00:21:25,969 --> 00:21:33,559
discount if needed but you need to you

00:21:30,859 --> 00:21:35,450
need to have this data available on how

00:21:33,559 --> 00:21:37,729
it will make shipping your code to

00:21:35,450 --> 00:21:40,549
external customer easier how they're

00:21:37,729 --> 00:21:42,619
using it how to architect it and a lot

00:21:40,549 --> 00:21:44,149
of this stuff could be done in-house

00:21:42,619 --> 00:21:45,830
just during your development period

00:21:44,149 --> 00:21:47,599
except all the way up to deployment

00:21:45,830 --> 00:21:50,839
rather than that your packaging in your

00:21:47,599 --> 00:21:56,679
shipping code but the workflow mainly

00:21:50,839 --> 00:21:56,679
stays the same any other questions

00:22:04,890 --> 00:22:09,060
sure yes I you go back to I was talked

00:22:07,230 --> 00:22:11,880
about on premise a previous company that

00:22:09,060 --> 00:22:12,930
I worked for is still had was running

00:22:11,880 --> 00:22:16,740
their own data they were in the process

00:22:12,930 --> 00:22:19,890
of moving into a cloud environment but

00:22:16,740 --> 00:22:22,320
that was slow their toolset made it so

00:22:19,890 --> 00:22:24,450
that only you know thirty to forty

00:22:22,320 --> 00:22:27,740
percent of deploys were actually

00:22:24,450 --> 00:22:30,360
successful they were putting out code to

00:22:27,740 --> 00:22:32,730
already running servers they didn't have

00:22:30,360 --> 00:22:34,920
easy ways to rollback they didn't have a

00:22:32,730 --> 00:22:37,050
development culture that said if a

00:22:34,920 --> 00:22:42,170
deployment is bad stop pushing code to

00:22:37,050 --> 00:22:44,160
master and an environment like that

00:22:42,170 --> 00:22:45,600
there are still ways that you could

00:22:44,160 --> 00:22:47,340
build with Israel tool chase around

00:22:45,600 --> 00:22:51,350
because an environment like that no one

00:22:47,340 --> 00:22:54,720
is happy they are ripe for change so

00:22:51,350 --> 00:22:57,660
standing up and presenting the idea that

00:22:54,720 --> 00:23:00,060
hey we need to make this better this

00:22:57,660 --> 00:23:02,460
should not be a difficult sell because

00:23:00,060 --> 00:23:04,320
people already working long days at

00:23:02,460 --> 00:23:06,690
having bad deployments and codes only

00:23:04,320 --> 00:23:09,390
going out once a day or once every

00:23:06,690 --> 00:23:11,490
couple of days and you could build these

00:23:09,390 --> 00:23:13,590
tools around things like you know around

00:23:11,490 --> 00:23:16,890
a VMware environment there's plenty of

00:23:13,590 --> 00:23:19,830
good automation tools for that there are

00:23:16,890 --> 00:23:22,350
you can use things like Packer to have

00:23:19,830 --> 00:23:24,210
you know to build your VMware images for

00:23:22,350 --> 00:23:26,250
you so that you're deploying out a full

00:23:24,210 --> 00:23:32,610
image not deploying code to an already

00:23:26,250 --> 00:23:35,060
existing virtual machine any other

00:23:32,610 --> 00:23:35,060
questions

00:23:55,040 --> 00:23:59,790
all right the gist of that question is

00:23:58,080 --> 00:24:05,160
how do you teach an old dog new tricks

00:23:59,790 --> 00:24:07,170
and yeah and this is where the business

00:24:05,160 --> 00:24:10,170
case comes in because if you're talking

00:24:07,170 --> 00:24:11,630
about a manager at that level they've

00:24:10,170 --> 00:24:14,700
been around in the industry for a while

00:24:11,630 --> 00:24:16,950
they know a certain way to do things and

00:24:14,700 --> 00:24:19,020
what you're proving at this point it's

00:24:16,950 --> 00:24:21,990
not so much that your way is technically

00:24:19,020 --> 00:24:24,600
better but that your way is going to

00:24:21,990 --> 00:24:27,150
save money it's going to make your boss

00:24:24,600 --> 00:24:29,610
look good because the other day that is

00:24:27,150 --> 00:24:32,910
a lot of our jobs is to make the people

00:24:29,610 --> 00:24:34,650
managing us look good because when they

00:24:32,910 --> 00:24:36,570
look good the team looks good when the

00:24:34,650 --> 00:24:39,300
team looks good we look good and when we

00:24:36,570 --> 00:24:41,370
look good we have a great career so this

00:24:39,300 --> 00:24:43,110
is why the business case is so important

00:24:41,370 --> 00:24:45,390
if you can't if you're trying to

00:24:43,110 --> 00:24:50,190
implement this and it's not going to

00:24:45,390 --> 00:24:52,070
save your company money then you know

00:24:50,190 --> 00:24:54,630
you don't have a business case for it

00:24:52,070 --> 00:24:56,330
you don't have a reason to put it in you

00:24:54,630 --> 00:25:00,809
don't have a reason to change the tricks

00:24:56,330 --> 00:25:04,110
so in a situation where you're trying to

00:25:00,809 --> 00:25:05,790
make a change like this you really you

00:25:04,110 --> 00:25:09,660
know there needs to be a reason for you

00:25:05,790 --> 00:25:12,480
can't just change for change's safe most

00:25:09,660 --> 00:25:17,630
days with modern tooling with a strong

00:25:12,480 --> 00:25:20,580
architecture with a good culture that is

00:25:17,630 --> 00:25:22,440
willing to explore new ideas especially

00:25:20,580 --> 00:25:24,420
if you could say this is going to save

00:25:22,440 --> 00:25:26,250
us a lot of money this is going to allow

00:25:24,420 --> 00:25:28,440
us to hire another engineer that's going

00:25:26,250 --> 00:25:30,360
to allow us to get out code faster make

00:25:28,440 --> 00:25:32,820
these business cases and it's very

00:25:30,360 --> 00:25:38,730
difficult for even a manager that's very

00:25:32,820 --> 00:25:40,590
set in their ways to pass that up the

00:25:38,730 --> 00:25:43,410
business case is the strongest thing you

00:25:40,590 --> 00:25:47,280
can make as engineers nowadays you have

00:25:43,410 --> 00:25:48,990
to think about the business leave your

00:25:47,280 --> 00:25:51,380
time for one more question if someone

00:25:48,990 --> 00:25:51,380
has one

00:26:04,429 --> 00:26:12,889
alright alright the question is does the

00:26:08,990 --> 00:26:15,710
shipping code faster constitute a

00:26:12,889 --> 00:26:17,869
business case and in many cases yes

00:26:15,710 --> 00:26:20,299
because what shipping code faster allows

00:26:17,869 --> 00:26:22,879
you to do is ship smaller chunks of code

00:26:20,299 --> 00:26:24,559
the smaller your releases the less

00:26:22,879 --> 00:26:26,119
likely they are to break something and

00:26:24,559 --> 00:26:28,460
when they do break the easier it is to

00:26:26,119 --> 00:26:29,899
roll it back so it's very easy to make

00:26:28,460 --> 00:26:32,480
the business case if we're able to ship

00:26:29,899 --> 00:26:36,110
code faster we can ship code in smaller

00:26:32,480 --> 00:26:37,730
chunks and that's going to give us less

00:26:36,110 --> 00:26:43,129
downtime which saves money that's going

00:26:37,730 --> 00:26:46,009
to give us the ability to work on small

00:26:43,129 --> 00:26:49,179
tests and experiments which can uncover

00:26:46,009 --> 00:26:51,619
ways for the company to make money and

00:26:49,179 --> 00:26:53,269
you know at the end of the day if you're

00:26:51,619 --> 00:26:55,129
doing it right you are saving developer

00:26:53,269 --> 00:26:57,110
time by having less rollback so when you

00:26:55,129 --> 00:26:59,779
have to do it they take a less amount of

00:26:57,110 --> 00:27:03,460
time time is money that's I mean we're

00:26:59,779 --> 00:27:07,309
engineers we're expensive you know this

00:27:03,460 --> 00:27:09,230
if you're saving our time where we get

00:27:07,309 --> 00:27:12,190
it an extra two or three hours of work a

00:27:09,230 --> 00:27:14,299
week across an entire engineering team

00:27:12,190 --> 00:27:16,159
that's a lot of money depending on the

00:27:14,299 --> 00:27:18,320
size your company that's five six seven

00:27:16,159 --> 00:27:19,759
figures that's hard for any manager to

00:27:18,320 --> 00:27:24,369
turn down as long as you can prove it

00:27:19,759 --> 00:27:30,129
works anyway thank you very much for

00:27:24,369 --> 00:27:30,129

YouTube URL: https://www.youtube.com/watch?v=TKirH9GYOR8


