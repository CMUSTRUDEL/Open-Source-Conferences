Title: cgroupv2: Linux's New Unified Control Group Hierarchy - Chris Down - DevOpsDays Tel Aviv 2016
Publication date: 2017-01-08
Playlist: DevOps Days Tel Aviv 2016
Description: 
	
Captions: 
	00:00:00,560 --> 00:00:14,960
I only have five minutes to keep it to a

00:00:11,780 --> 00:00:16,640
minimum my name is chris i work at

00:00:14,960 --> 00:00:18,349
facebook london dealing with the web

00:00:16,640 --> 00:00:19,220
server reliability and performance say

00:00:18,349 --> 00:00:21,080
i'm going to be giving kind of a

00:00:19,220 --> 00:00:23,419
whistle-stop tour of the new version of

00:00:21,080 --> 00:00:24,679
control group saturday next 4.5 so don't

00:00:23,419 --> 00:00:26,810
worry if you don't have a clue what

00:00:24,679 --> 00:00:27,769
control groups are yet I'll go over what

00:00:26,810 --> 00:00:30,829
they are and where you may have actually

00:00:27,769 --> 00:00:32,600
use them over the next few slides so on

00:00:30,829 --> 00:00:35,780
a typical server we have three types of

00:00:32,600 --> 00:00:37,250
running processes on one hand the core

00:00:35,780 --> 00:00:39,320
workload of the machine on a web server

00:00:37,250 --> 00:00:40,940
for example this will be the processes

00:00:39,320 --> 00:00:42,770
that serve web requests and on the other

00:00:40,940 --> 00:00:44,840
hand you have background process like

00:00:42,770 --> 00:00:47,150
chef or metric collection demons that

00:00:44,840 --> 00:00:48,500
while they might be important aren't

00:00:47,150 --> 00:00:49,640
actually critical to the core job that

00:00:48,500 --> 00:00:51,080
you're trying to do and you don't want

00:00:49,640 --> 00:00:52,640
them to steal a lot of resources from

00:00:51,080 --> 00:00:55,040
your core workload so you might also

00:00:52,640 --> 00:00:57,710
have say ad-hoc queries being run for

00:00:55,040 --> 00:00:58,850
debugging so this is one common scenario

00:00:57,710 --> 00:01:00,680
where control groups can be handy

00:00:58,850 --> 00:01:02,450
control groups have existed in the linux

00:01:00,680 --> 00:01:04,519
kernel since 2008 and they've been a

00:01:02,450 --> 00:01:06,170
core part of allowing containers as we

00:01:04,519 --> 00:01:07,520
know them to exist so control groups

00:01:06,170 --> 00:01:10,759
allow you to take a shared resource say

00:01:07,520 --> 00:01:12,499
cpu or iou's and set thresholds for a

00:01:10,759 --> 00:01:13,700
certain group of processes or limit

00:01:12,499 --> 00:01:16,219
those processes for example you might

00:01:13,700 --> 00:01:17,479
set a memory or i/o limit for your non

00:01:16,219 --> 00:01:18,950
critical services to avoid these

00:01:17,479 --> 00:01:20,509
resources being stolen from the

00:01:18,950 --> 00:01:22,369
processes which served web requests in

00:01:20,509 --> 00:01:23,869
the scenario I talked about before so C

00:01:22,369 --> 00:01:25,399
group can consist of as many processes

00:01:23,869 --> 00:01:26,810
as you like which means that you can

00:01:25,399 --> 00:01:30,049
either apply these limits really tightly

00:01:26,810 --> 00:01:32,689
or to a single process or more flexibly

00:01:30,049 --> 00:01:34,069
to a group of processes for example the

00:01:32,689 --> 00:01:35,600
group of processes that provide a single

00:01:34,069 --> 00:01:37,969
service from a user facing point of view

00:01:35,600 --> 00:01:39,229
and generally act as one unit so you

00:01:37,969 --> 00:01:40,490
might think that hey my favorite

00:01:39,229 --> 00:01:42,139
containerisation product already

00:01:40,490 --> 00:01:44,689
provides this functionality well you may

00:01:42,139 --> 00:01:46,639
be right but if it was updated in the

00:01:44,689 --> 00:01:47,869
last eight years it's almost suddenly it

00:01:46,639 --> 00:01:49,909
doesn't actually do this itself it

00:01:47,869 --> 00:01:52,459
almost certainly does does this using c

00:01:49,909 --> 00:01:53,539
groups under the hood so let's go back

00:01:52,459 --> 00:01:54,979
to the limits that we described before

00:01:53,539 --> 00:01:56,420
and here's how you would actually

00:01:54,979 --> 00:01:57,679
implement that in version one of C

00:01:56,420 --> 00:02:00,139
groups which is the one which has

00:01:57,679 --> 00:02:01,819
existed since 2008 so the secret

00:02:00,139 --> 00:02:03,350
hierarchy is available at sis of SC

00:02:01,819 --> 00:02:04,939
group and you manipulate it using the

00:02:03,350 --> 00:02:07,130
directories and files within we don't

00:02:04,939 --> 00:02:08,390
have a sis call interface for this in

00:02:07,130 --> 00:02:10,399
this case we have two kinds of groups

00:02:08,390 --> 00:02:12,500
that we want to limit BG for background

00:02:10,399 --> 00:02:14,430
services and add hog for ad-hoc queries

00:02:12,500 --> 00:02:16,330
with see groups spread across result

00:02:14,430 --> 00:02:18,129
it's important to note that from the

00:02:16,330 --> 00:02:20,049
Carnales perspective even though it's a

00:02:18,129 --> 00:02:21,580
common way of using it and even those

00:02:20,049 --> 00:02:23,500
groups across different resources may

00:02:21,580 --> 00:02:25,209
have the same name they don't actually

00:02:23,500 --> 00:02:27,909
have any relation to each other from the

00:02:25,209 --> 00:02:29,620
Colonel's perspective this this has some

00:02:27,909 --> 00:02:31,420
interesting implications which I'll go

00:02:29,620 --> 00:02:34,989
into later for example here the ad hoc

00:02:31,420 --> 00:02:36,819
group exists both in the memory and paid

00:02:34,989 --> 00:02:39,849
resources but those two are unrelated

00:02:36,819 --> 00:02:40,930
from the Colonel's perspective in C

00:02:39,849 --> 00:02:42,340
Group version 2 we have a similar

00:02:40,930 --> 00:02:44,829
hierarchy but this time it's a single

00:02:42,340 --> 00:02:46,810
hierarchy not one hierarchy / resource

00:02:44,829 --> 00:02:48,489
here the vote here is the version 1

00:02:46,810 --> 00:02:50,049
hierarchy again for comparison and as

00:02:48,489 --> 00:02:51,940
you can see it has a see group /

00:02:50,049 --> 00:02:53,530
resource see groups here only exist in

00:02:51,940 --> 00:02:55,690
the context of a single resource in

00:02:53,530 --> 00:02:57,340
version 2 this is essentially inverted

00:02:55,690 --> 00:02:58,720
we no longer have a hierarchy / resource

00:02:57,340 --> 00:03:00,579
instead we have a single unified

00:02:58,720 --> 00:03:02,709
hierarchy and you can enable resources

00:03:00,579 --> 00:03:05,049
on a Percy group basis with secret

00:03:02,709 --> 00:03:07,180
subtree control when you do this fall's

00:03:05,049 --> 00:03:08,950
appear in this directory that we can

00:03:07,180 --> 00:03:11,590
manipulate to set limits and account for

00:03:08,950 --> 00:03:13,810
the usage of this C group so I do this

00:03:11,590 --> 00:03:15,069
why break the API why create version 2

00:03:13,810 --> 00:03:16,599
instead of improving version 1 well

00:03:15,069 --> 00:03:18,489
there are a few reasons which made this

00:03:16,599 --> 00:03:20,139
worth doing version 1 C groups generally

00:03:18,489 --> 00:03:21,579
work pretty well and have done for eight

00:03:20,139 --> 00:03:23,109
years but their design has some

00:03:21,579 --> 00:03:25,180
limitations many of these were caused

00:03:23,109 --> 00:03:26,980
because at the time that cigarettes was

00:03:25,180 --> 00:03:28,239
invented typical modern use cases for

00:03:26,980 --> 00:03:30,310
them were not really very well fleshed

00:03:28,239 --> 00:03:31,810
out this means that they often have some

00:03:30,310 --> 00:03:33,700
undesired complexity due to over

00:03:31,810 --> 00:03:35,109
flexibility and addressing these issues

00:03:33,700 --> 00:03:38,109
is one of the main reasons that cig

00:03:35,109 --> 00:03:39,340
review to was created one other problem

00:03:38,109 --> 00:03:41,410
is that it was really difficult

00:03:39,340 --> 00:03:42,700
previously to track resources when doing

00:03:41,410 --> 00:03:44,680
cross results operations which is

00:03:42,700 --> 00:03:46,030
actually pretty common in annex for

00:03:44,680 --> 00:03:47,440
example when you write to a file in

00:03:46,030 --> 00:03:49,329
Linux you don't actually usually write

00:03:47,440 --> 00:03:50,950
to the file directly but you write dirty

00:03:49,329 --> 00:03:52,720
pages into memory into the page cache

00:03:50,950 --> 00:03:55,120
and then eventually PD flush or a

00:03:52,720 --> 00:03:56,829
similar Colonel worker flushes them out

00:03:55,120 --> 00:03:59,950
to disk later in a kind of unrelated

00:03:56,829 --> 00:04:01,299
operation this results both in resources

00:03:59,950 --> 00:04:03,370
in terms of memory when you've written

00:04:01,299 --> 00:04:05,919
those dirty pages to the page cache and

00:04:03,370 --> 00:04:07,419
IO usage when we eventually flush them

00:04:05,919 --> 00:04:09,190
back to disk but in version one is

00:04:07,419 --> 00:04:10,810
impossible to track these because these

00:04:09,190 --> 00:04:12,549
operations happen across two distinct

00:04:10,810 --> 00:04:14,139
resources and we have scented separate

00:04:12,549 --> 00:04:16,000
secret power our keys in each resource

00:04:14,139 --> 00:04:18,609
so we can't make any decisions about

00:04:16,000 --> 00:04:20,079
what particular processes are na na na

00:04:18,609 --> 00:04:21,729
insu group even if they have the same

00:04:20,079 --> 00:04:24,159
name it might not be the same process in

00:04:21,729 --> 00:04:25,450
the HC group in this version 2 with the

00:04:24,159 --> 00:04:27,090
unified hierarchy we can actually track

00:04:25,450 --> 00:04:29,070
these and apply them with

00:04:27,090 --> 00:04:31,160
to accounting and limits which gives

00:04:29,070 --> 00:04:33,240
better visibility and better usage

00:04:31,160 --> 00:04:34,889
version ones over flexibility also

00:04:33,240 --> 00:04:37,080
contributed to a number of API problems

00:04:34,889 --> 00:04:38,220
for example when limiting memory and see

00:04:37,080 --> 00:04:40,229
rube version one there were separate

00:04:38,220 --> 00:04:42,360
memory limits / memory type this meant

00:04:40,229 --> 00:04:43,979
that you get crazy situations like if

00:04:42,360 --> 00:04:46,260
you set a limit on socket buffer memory

00:04:43,979 --> 00:04:48,090
and you still have gigabytes and

00:04:46,260 --> 00:04:49,470
gigabytes of page cache free if we if

00:04:48,090 --> 00:04:50,669
you set a limit for socket buffers we

00:04:49,470 --> 00:04:53,669
don't care that you had tons of page

00:04:50,669 --> 00:04:55,500
couch free we still in kill you so this

00:04:53,669 --> 00:04:57,870
is not really a very intuitive or usable

00:04:55,500 --> 00:05:00,900
way of operating and it's mostly because

00:04:57,870 --> 00:05:02,970
we couldn't read rapidly change the

00:05:00,900 --> 00:05:04,380
colonel api's so this is one of the

00:05:02,970 --> 00:05:09,710
reasons also that the limits were

00:05:04,380 --> 00:05:12,180
unified in in version to version two

00:05:09,710 --> 00:05:13,620
okay version 2 also is generally more

00:05:12,180 --> 00:05:15,389
well integrated with subsystems for

00:05:13,620 --> 00:05:16,860
example in version one you basically

00:05:15,389 --> 00:05:18,840
only had one option when you reach a

00:05:16,860 --> 00:05:20,460
threshold which was in in the May in the

00:05:18,840 --> 00:05:22,530
case of the memory subsystem is really

00:05:20,460 --> 00:05:24,270
in kill which pretty violent it's pretty

00:05:22,530 --> 00:05:25,680
crude in version 2 we have another

00:05:24,270 --> 00:05:27,539
threshold called memory high which

00:05:25,680 --> 00:05:28,830
forces you to perform directory claim by

00:05:27,539 --> 00:05:31,440
doing a page table scan on each

00:05:28,830 --> 00:05:33,900
allocation which both releases memory

00:05:31,440 --> 00:05:35,370
and it also acts as a form of primitive

00:05:33,900 --> 00:05:36,360
throttling for the process because every

00:05:35,370 --> 00:05:38,280
time that you want to do a memory

00:05:36,360 --> 00:05:40,080
allocation stable desperate you have to

00:05:38,280 --> 00:05:41,610
go and scan the page table and it you

00:05:40,080 --> 00:05:44,340
acting kind of a degraded state instead

00:05:41,610 --> 00:05:46,110
of being kill 9th version 2 is stable is

00:05:44,340 --> 00:05:48,330
a kernel 4.5 and you can enable it by

00:05:46,110 --> 00:05:50,070
disabling version 1 with secret novio v1

00:05:48,330 --> 00:05:51,389
equals all and instructing your init

00:05:50,070 --> 00:05:53,550
system to mount sisyphus a group of

00:05:51,389 --> 00:05:55,080
version 2 system d for example supports

00:05:53,550 --> 00:05:56,280
this with system d dot unified see group

00:05:55,080 --> 00:06:01,110
hierarchy on the colonel command line

00:05:56,280 --> 00:06:03,030
sits version 2 26 we're running secret

00:06:01,110 --> 00:06:04,110
v2 and scale now and a large number of

00:06:03,030 --> 00:06:05,490
web servers and we're already seeing

00:06:04,110 --> 00:06:07,410
improvements as a result if you're

00:06:05,490 --> 00:06:08,669
interested in hearing more about control

00:06:07,410 --> 00:06:09,990
groups and the internals and design

00:06:08,669 --> 00:06:11,760
choices that went into the design of

00:06:09,990 --> 00:06:13,050
version too happy to present an open

00:06:11,760 --> 00:06:15,630
space on this afternoon so you can come

00:06:13,050 --> 00:06:17,700
vote for it you can also come talk to me

00:06:15,630 --> 00:06:19,260
at the Facebook booth if you so like if

00:06:17,700 --> 00:06:21,300
you use version 1 in the past I can see

00:06:19,260 --> 00:06:22,440
that guy over there has and you found it

00:06:21,300 --> 00:06:24,090
too difficult to use or reason about

00:06:22,440 --> 00:06:26,780
come try out version 2 and let us know

00:06:24,090 --> 00:06:26,780
what you think da da

00:06:27,740 --> 00:06:29,800

YouTube URL: https://www.youtube.com/watch?v=tG5Vs2arh3w


