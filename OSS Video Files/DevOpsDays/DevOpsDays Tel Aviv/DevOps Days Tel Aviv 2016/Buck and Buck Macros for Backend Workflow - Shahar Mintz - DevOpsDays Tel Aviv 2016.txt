Title: Buck and Buck Macros for Backend Workflow - Shahar Mintz - DevOpsDays Tel Aviv 2016
Publication date: 2017-01-05
Playlist: DevOps Days Tel Aviv 2016
Description: 
	
Captions: 
	00:00:01,680 --> 00:00:12,019
[Music]

00:00:06,980 --> 00:00:14,940
hi can you show me all with your fingers

00:00:12,019 --> 00:00:18,080
how many people in your organization in

00:00:14,940 --> 00:00:23,189
your development group can really master

00:00:18,080 --> 00:00:27,869
their release process and that's good I

00:00:23,189 --> 00:00:31,619
see one I see ok so a lot of people are

00:00:27,869 --> 00:00:35,399
in a good situation you ah but that's

00:00:31,619 --> 00:00:39,870
not like what what the rest of the world

00:00:35,399 --> 00:00:42,559
are doing there's a big problem we have

00:00:39,870 --> 00:00:46,200
a lot of tools to support our releases

00:00:42,559 --> 00:00:49,890
process we're using different tools for

00:00:46,200 --> 00:00:55,649
building and testing than packaging then

00:00:49,890 --> 00:00:59,280
releasing them deploying and like

00:00:55,649 --> 00:01:01,680
learning every single time and you tool

00:00:59,280 --> 00:01:04,140
takes a lot of time for a lot of people

00:01:01,680 --> 00:01:08,549
you can see my favorite is a new water

00:01:04,140 --> 00:01:11,010
tools I would like this to it so my name

00:01:08,549 --> 00:01:13,140
is jaha mint I'm a production engineer

00:01:11,010 --> 00:01:17,040
on facebook and today I'm going to talk

00:01:13,140 --> 00:01:22,070
about back and how you can use back to

00:01:17,040 --> 00:01:26,520
control the entire flow really simply so

00:01:22,070 --> 00:01:29,700
buck is a build system open source by

00:01:26,520 --> 00:01:34,530
Facebook it has a lot of cool features

00:01:29,700 --> 00:01:37,320
like caching the artifacts that you

00:01:34,530 --> 00:01:42,090
built for others so they won't have to

00:01:37,320 --> 00:01:43,590
build it again it use Python syntax so

00:01:42,090 --> 00:01:49,290
it's really easy for developers to

00:01:43,590 --> 00:01:53,909
understand I guess you all want to see

00:01:49,290 --> 00:01:57,450
what I'm talking about so the first

00:01:53,909 --> 00:01:59,969
example is to define a library and when

00:01:57,450 --> 00:02:01,920
you define a python library you put the

00:01:59,969 --> 00:02:04,320
sources that you want to be in the

00:02:01,920 --> 00:02:09,720
library and the dependencies so it could

00:02:04,320 --> 00:02:12,370
be another library in your code or an

00:02:09,720 --> 00:02:16,810
external that you pre-built

00:02:12,370 --> 00:02:19,450
and you don't need to relay on some

00:02:16,810 --> 00:02:26,110
process to install them on the machine

00:02:19,450 --> 00:02:28,480
later on sorry after that you can define

00:02:26,110 --> 00:02:31,390
a test and it's really easy to run the

00:02:28,480 --> 00:02:36,390
test just back test and it run all the

00:02:31,390 --> 00:02:39,340
tests that are required for that library

00:02:36,390 --> 00:02:40,840
then you can set up a binary and when

00:02:39,340 --> 00:02:46,720
you set up a binary you set the

00:02:40,840 --> 00:02:49,329
dependency and when you run back run it

00:02:46,720 --> 00:02:53,910
will just run directly from your shell

00:02:49,329 --> 00:02:56,590
or you can build it with back build and

00:02:53,910 --> 00:03:02,140
you'll get a pex file this is a really

00:02:56,590 --> 00:03:04,269
cool feature of Python with back this

00:03:02,140 --> 00:03:06,250
text file is actually a zip file that

00:03:04,269 --> 00:03:09,250
contains all the dependencies for your

00:03:06,250 --> 00:03:13,959
binary to run it will just run on every

00:03:09,250 --> 00:03:18,970
server that have Python um so far we

00:03:13,959 --> 00:03:21,430
looked on the basics of back and this is

00:03:18,970 --> 00:03:23,680
where it gets cooler and you can

00:03:21,430 --> 00:03:28,840
actually extend back to do your own

00:03:23,680 --> 00:03:31,419
things so when you define a gent a

00:03:28,840 --> 00:03:35,319
general you can run any arbitrary

00:03:31,419 --> 00:03:39,639
command on your machine or inside back

00:03:35,319 --> 00:03:42,730
with the exec at the exit macro and when

00:03:39,639 --> 00:03:46,660
you run back build it will just generate

00:03:42,730 --> 00:03:51,910
the output file that you defined so with

00:03:46,660 --> 00:03:55,419
that you can create definition for a new

00:03:51,910 --> 00:03:59,169
target in this example you will build a

00:03:55,419 --> 00:04:04,379
tab file with fpm and to use that it's

00:03:59,169 --> 00:04:08,260
extremely easy just use the code the fpm

00:04:04,379 --> 00:04:12,910
function and it will create a debian

00:04:08,260 --> 00:04:17,430
file after that you can use a process to

00:04:12,910 --> 00:04:20,590
upload it to s3 and again you will just

00:04:17,430 --> 00:04:24,010
define the deb file define the

00:04:20,590 --> 00:04:25,870
dependency with s3 and when you will run

00:04:24,010 --> 00:04:29,229
when run

00:04:25,870 --> 00:04:32,680
back build upload to s3 it will just to

00:04:29,229 --> 00:04:38,380
the entire process build test package

00:04:32,680 --> 00:04:40,810
and upload to s3 there you go if you

00:04:38,380 --> 00:04:43,780
want to learn more about back go to back

00:04:40,810 --> 00:04:45,340
build com or come visit us on our booth

00:04:43,780 --> 00:04:50,570
thank you

00:04:45,340 --> 00:04:50,570

YouTube URL: https://www.youtube.com/watch?v=aEBavoyAZIE


