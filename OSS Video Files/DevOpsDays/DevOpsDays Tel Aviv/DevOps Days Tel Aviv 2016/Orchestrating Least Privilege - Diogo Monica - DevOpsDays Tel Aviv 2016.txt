Title: Orchestrating Least Privilege - Diogo Monica - DevOpsDays Tel Aviv 2016
Publication date: 2017-01-08
Playlist: DevOps Days Tel Aviv 2016
Description: 
	
Captions: 
	00:00:02,750 --> 00:00:09,610
[Music]

00:00:06,990 --> 00:00:11,530
hi everyone as was mentioned my name is

00:00:09,610 --> 00:00:15,219
yoga Monica I'm the security tape talker

00:00:11,530 --> 00:00:17,200
I should get away from that thing today

00:00:15,219 --> 00:00:19,480
I want to talk about orchestrating least

00:00:17,200 --> 00:00:22,210
privilege but before I go into the talk

00:00:19,480 --> 00:00:24,790
just to show of hands amongst you who's

00:00:22,210 --> 00:00:26,560
using docker right now okay that's

00:00:24,790 --> 00:00:29,070
expected and of those of you that are

00:00:26,560 --> 00:00:32,740
using docker who's using an Orchestrator

00:00:29,070 --> 00:00:35,140
okay less people so for for everyone and

00:00:32,740 --> 00:00:37,630
before I go into the meaty subject of

00:00:35,140 --> 00:00:40,090
the talk and security we all seen this

00:00:37,630 --> 00:00:42,910
slide right this is the old mantra from

00:00:40,090 --> 00:00:44,710
monolithic application all the way for

00:00:42,910 --> 00:00:48,060
microservices our applications have been

00:00:44,710 --> 00:00:49,810
migrated towards small loosely coupled

00:00:48,060 --> 00:00:52,630
microservices that communicate with each

00:00:49,810 --> 00:00:55,090
other the realization here though is

00:00:52,630 --> 00:00:57,070
that the tools that served us on the

00:00:55,090 --> 00:00:59,110
monolithic side are no longer actually

00:00:57,070 --> 00:01:01,059
serving us on the micro services side

00:00:59,110 --> 00:01:02,649
and so this is where orchestrator is

00:01:01,059 --> 00:01:04,799
actually come into play and this is why

00:01:02,649 --> 00:01:06,520
people start using orchestrators and

00:01:04,799 --> 00:01:09,100
yesterday I heard that you actually

00:01:06,520 --> 00:01:11,350
already mentioned orchestrators so today

00:01:09,100 --> 00:01:13,420
the title of this talk is orchestrating

00:01:11,350 --> 00:01:15,100
least privilege and what this means is

00:01:13,420 --> 00:01:16,540
that i'm going to have to define what is

00:01:15,100 --> 00:01:19,869
an Orchestrator and what is least

00:01:16,540 --> 00:01:22,110
privilege before i go into this so the

00:01:19,869 --> 00:01:24,700
question is what is an Orchestrator and

00:01:22,110 --> 00:01:27,010
before I define what is an Orchestrator

00:01:24,700 --> 00:01:30,400
I should probably before that define

00:01:27,010 --> 00:01:33,250
what is an orchestra and so what is an

00:01:30,400 --> 00:01:35,350
orchestra well turns out an orchestra is

00:01:33,250 --> 00:01:38,170
effectively a group of musicians that

00:01:35,350 --> 00:01:40,689
plays a particular sheet of music and

00:01:38,170 --> 00:01:42,250
synchronicity they're all playing

00:01:40,689 --> 00:01:44,770
together and they all come together to

00:01:42,250 --> 00:01:46,780
play a particular type of song in this

00:01:44,770 --> 00:01:49,590
case it's an orchestra in doing a

00:01:46,780 --> 00:01:54,280
symphony the interesting thing about

00:01:49,590 --> 00:01:57,729
arts like ballet like operas and like

00:01:54,280 --> 00:02:00,820
place is that there's actually a script

00:01:57,729 --> 00:02:04,840
that they follow you have a composer

00:02:00,820 --> 00:02:06,280
such as Bach and you have a conductor

00:02:04,840 --> 00:02:08,379
that is actually conducting a symphony

00:02:06,280 --> 00:02:10,420
and you have the musicians and even

00:02:08,379 --> 00:02:12,520
though the conductor actually has some

00:02:10,420 --> 00:02:13,290
creative Liberty of how to actually do

00:02:12,520 --> 00:02:15,659
this symphony

00:02:13,290 --> 00:02:18,269
it can change the original script of the

00:02:15,659 --> 00:02:20,670
actual writer of the same funny f of the

00:02:18,269 --> 00:02:22,709
same funny of the composer itself so

00:02:20,670 --> 00:02:24,719
that's really interesting it can compose

00:02:22,709 --> 00:02:28,829
how we want but it has to follow a

00:02:24,719 --> 00:02:31,950
predefined script this is also true for

00:02:28,829 --> 00:02:34,769
other kinds of arts so if you look at a

00:02:31,950 --> 00:02:37,140
play when you're doing casting you can

00:02:34,769 --> 00:02:38,549
change who the actual actors are but you

00:02:37,140 --> 00:02:40,709
can't change the words that actually

00:02:38,549 --> 00:02:42,389
being said there is a script that has to

00:02:40,709 --> 00:02:45,090
be followed from the beginning to the

00:02:42,389 --> 00:02:47,549
end if we go to other things like ballet

00:02:45,090 --> 00:02:49,049
it's exactly the same thing even though

00:02:47,549 --> 00:02:50,849
you can change the people you can change

00:02:49,049 --> 00:02:52,709
the set you can change the scenery you

00:02:50,849 --> 00:02:54,480
can't really change what is actually

00:02:52,709 --> 00:02:58,579
being done in the kind of movements that

00:02:54,480 --> 00:03:01,019
are being used so for all three kinds of

00:02:58,579 --> 00:03:03,439
Arts that I showed you here there's one

00:03:01,019 --> 00:03:08,069
thing that is common across all of them

00:03:03,439 --> 00:03:09,629
there is a specific script spec for the

00:03:08,069 --> 00:03:11,639
case of an orchestra is the sheet music

00:03:09,629 --> 00:03:13,769
that everybody has to follow and says

00:03:11,639 --> 00:03:15,750
exactly what you have to play for the

00:03:13,769 --> 00:03:17,760
case of a play it's a script that says

00:03:15,750 --> 00:03:20,639
every single thing that an actor has to

00:03:17,760 --> 00:03:22,769
say and for the case of a ballet turns

00:03:20,639 --> 00:03:25,199
out we actually have ballet notation I

00:03:22,769 --> 00:03:26,519
didn't know this about ballet but it

00:03:25,199 --> 00:03:28,139
turns out that every single movement

00:03:26,519 --> 00:03:30,090
actually has annotation tissue

00:03:28,139 --> 00:03:32,639
associated with it and there's an actual

00:03:30,090 --> 00:03:33,659
script that you have to follow you can

00:03:32,639 --> 00:03:34,979
see from the drawings there it's

00:03:33,659 --> 00:03:37,019
actually pretty cute and they're all

00:03:34,979 --> 00:03:39,690
showing how the dancing actually

00:03:37,019 --> 00:03:41,489
supposed to go I don't by any means know

00:03:39,690 --> 00:03:43,530
how to read this but it looks to me like

00:03:41,489 --> 00:03:46,079
this actually describes exactly how the

00:03:43,530 --> 00:03:48,329
dance should be going so this is really

00:03:46,079 --> 00:03:50,519
interesting right going back to the

00:03:48,329 --> 00:03:53,849
Sinfonia analogy what we actually have

00:03:50,519 --> 00:03:56,400
is we have a composer somebody creating

00:03:53,849 --> 00:03:58,500
music like baaah and we have somebody

00:03:56,400 --> 00:04:01,290
that is a conductor that is instructing

00:03:58,500 --> 00:04:04,560
a set of musicians to actually do the

00:04:01,290 --> 00:04:06,299
music itself if we bring this to

00:04:04,560 --> 00:04:07,949
computer science what are you effectual

00:04:06,299 --> 00:04:10,769
you're going to have is we're going to

00:04:07,949 --> 00:04:13,049
have an engineer but instead of writing

00:04:10,769 --> 00:04:15,629
sheet music is it going to write a spec

00:04:13,049 --> 00:04:18,030
a description of exactly what it

00:04:15,629 --> 00:04:20,099
actually needs to execute is going to

00:04:18,030 --> 00:04:22,109
send it to an Orchestrator which is the

00:04:20,099 --> 00:04:24,840
intermediate step our composure here and

00:04:22,109 --> 00:04:27,030
finally this script is going to be

00:04:24,840 --> 00:04:28,560
executed by the servers

00:04:27,030 --> 00:04:30,450
and the servers are actually going to

00:04:28,560 --> 00:04:33,120
run and play the music or in this case

00:04:30,450 --> 00:04:35,900
do whatever execution of tasks that you

00:04:33,120 --> 00:04:38,940
want so if we go on a play-by-play

00:04:35,900 --> 00:04:41,460
comparison between what an Orchestrator

00:04:38,940 --> 00:04:42,600
does in what a conductor does you can

00:04:41,460 --> 00:04:45,810
see very easily there's a lot of

00:04:42,600 --> 00:04:50,370
commonality between the two number one

00:04:45,810 --> 00:04:51,900
for a conductor you do casting you

00:04:50,370 --> 00:04:54,270
choose exactly what are the musicians

00:04:51,900 --> 00:04:56,340
that are going to be blank if somebody's

00:04:54,270 --> 00:04:58,110
sick you have to replace them so

00:04:56,340 --> 00:05:00,090
effectively you're in charge of

00:04:58,110 --> 00:05:02,700
membership in charge of who's playing in

00:05:00,090 --> 00:05:05,400
your orchestra number two you have to

00:05:02,700 --> 00:05:07,680
assign the sheet music to who is playing

00:05:05,400 --> 00:05:09,990
the best if it's a tuba you have to

00:05:07,680 --> 00:05:11,640
assign to the best player of tuba you're

00:05:09,990 --> 00:05:14,220
not going to assign it to the violinist

00:05:11,640 --> 00:05:15,810
right that's pretty obvious you also

00:05:14,220 --> 00:05:17,460
have to unify performance so if

00:05:15,810 --> 00:05:19,620
something goes wrong if something just

00:05:17,460 --> 00:05:21,150
goes out of whack you are responsible to

00:05:19,620 --> 00:05:23,010
make sure that everybody's back in play

00:05:21,150 --> 00:05:26,250
and everybody's playing as one and

00:05:23,010 --> 00:05:27,900
finally you're also setting the tempo so

00:05:26,250 --> 00:05:29,460
from that moment on you're essentially

00:05:27,900 --> 00:05:31,200
like guiding people along I think I'm

00:05:29,460 --> 00:05:32,729
doing this correctly and everybody is

00:05:31,200 --> 00:05:35,190
essentially setting the tempo and

00:05:32,729 --> 00:05:36,810
everything is going smoothly if we go

00:05:35,190 --> 00:05:39,419
back to computer science you're going to

00:05:36,810 --> 00:05:41,850
see that it's very similar a job of an

00:05:39,419 --> 00:05:44,010
Orchestrator so you no longer have

00:05:41,850 --> 00:05:46,080
musicians and I know that servers don't

00:05:44,010 --> 00:05:49,020
get sick but you still have to do node

00:05:46,080 --> 00:05:50,669
management did a note just come up did a

00:05:49,020 --> 00:05:52,680
hundred notes just come up didn't know

00:05:50,669 --> 00:05:54,740
just died you have to maintain what the

00:05:52,680 --> 00:05:57,330
membership of the cluster actually is

00:05:54,740 --> 00:05:59,039
instead of doing sheet music servers

00:05:57,330 --> 00:06:00,630
don't actually play music unless you do

00:05:59,039 --> 00:06:02,430
those school things with the spinning

00:06:00,630 --> 00:06:03,930
disks but now we're using SSDs so you

00:06:02,430 --> 00:06:05,729
can Oh longer do that cool stuff but

00:06:03,930 --> 00:06:07,669
anyway you're doing task assignment

00:06:05,729 --> 00:06:10,169
instead of actually playing music

00:06:07,669 --> 00:06:12,419
instead of dealing with unexpected

00:06:10,169 --> 00:06:14,789
events that are happening while you're

00:06:12,419 --> 00:06:15,840
actually playing your concert oh you

00:06:14,789 --> 00:06:18,000
have to do cluster stayed we

00:06:15,840 --> 00:06:20,010
conciliation may be a very important

00:06:18,000 --> 00:06:21,870
notice died and you have to migrate all

00:06:20,010 --> 00:06:23,460
of your tasks in all of your

00:06:21,870 --> 00:06:26,340
applications to some other node in the

00:06:23,460 --> 00:06:27,690
cluster and finally you are also

00:06:26,340 --> 00:06:30,090
responsible for doing resource

00:06:27,690 --> 00:06:32,610
management as a job as a job of an

00:06:30,090 --> 00:06:33,889
Orchestrator so these are the two

00:06:32,610 --> 00:06:35,990
comparisons

00:06:33,889 --> 00:06:37,729
and now that i've talked about water an

00:06:35,990 --> 00:06:39,680
Orchestrator is in how it compares to a

00:06:37,729 --> 00:06:42,020
conductor it makes a lot of sense that I

00:06:39,680 --> 00:06:45,620
go to the next part of the title of this

00:06:42,020 --> 00:06:48,469
talk which is least privilege so what is

00:06:45,620 --> 00:06:49,759
a lease privilege orchestrator before I

00:06:48,469 --> 00:06:53,779
go into a lease privilege orchestrator

00:06:49,759 --> 00:06:55,939
what is least privilege if we go back to

00:06:53,779 --> 00:06:58,930
our analogy of the symphony least

00:06:55,939 --> 00:07:02,419
privilege is nothing but specialization

00:06:58,930 --> 00:07:05,210
least privilege is the concept of a tuba

00:07:02,419 --> 00:07:08,860
player being assigned the sheet music

00:07:05,210 --> 00:07:11,750
for the tuba and handed a tuba to play

00:07:08,860 --> 00:07:14,060
it cannot play the drums because it does

00:07:11,750 --> 00:07:16,789
not have access to the drums or the

00:07:14,060 --> 00:07:19,340
sheet music for the drums if we go to

00:07:16,789 --> 00:07:22,909
computer science effectively the concept

00:07:19,340 --> 00:07:24,860
of principle of least privilege means

00:07:22,909 --> 00:07:27,050
that a process must be able to access

00:07:24,860 --> 00:07:28,789
only the information and resources that

00:07:27,050 --> 00:07:33,650
are necessary for its legitimate purpose

00:07:28,789 --> 00:07:36,529
no more no less specialization and so if

00:07:33,650 --> 00:07:38,360
you wrap this all together and we're 17

00:07:36,529 --> 00:07:40,699
slides into this presentation and I'm

00:07:38,360 --> 00:07:42,949
still not done with explaining what the

00:07:40,699 --> 00:07:45,129
title the presentation actually is but a

00:07:42,949 --> 00:07:47,449
least privilege orchestrator is

00:07:45,129 --> 00:07:49,009
essentially an Orchestrator that follows

00:07:47,449 --> 00:07:53,120
this principle but I've just described

00:07:49,009 --> 00:07:54,979
in the strictest manner possible and so

00:07:53,120 --> 00:07:56,569
this is what gets us to this title this

00:07:54,979 --> 00:07:59,149
is what gets us to orchestrating least

00:07:56,569 --> 00:08:02,210
privilege the obvious next question is

00:07:59,149 --> 00:08:04,669
ok I understand lease privilege and I

00:08:02,210 --> 00:08:07,009
understand what an Orchestrator is but

00:08:04,669 --> 00:08:09,649
why would I even want a lease priligy

00:08:07,009 --> 00:08:11,330
orchestrator why is this good for me why

00:08:09,649 --> 00:08:13,819
are you insisting so much on this

00:08:11,330 --> 00:08:15,649
particular concept in security I thought

00:08:13,819 --> 00:08:17,750
this was just for militaries and some

00:08:15,649 --> 00:08:22,939
random applications this really have any

00:08:17,750 --> 00:08:25,580
practical use well going back to our

00:08:22,939 --> 00:08:27,889
Symphony analogy least privilege is

00:08:25,580 --> 00:08:29,599
really really useful for you to go

00:08:27,889 --> 00:08:31,250
through all of the sorts of attacker

00:08:29,599 --> 00:08:33,680
models that you want to describe and

00:08:31,250 --> 00:08:35,990
really get to an architecture that makes

00:08:33,680 --> 00:08:38,750
sense from a security perspective of

00:08:35,990 --> 00:08:40,610
your system the first attacker model

00:08:38,750 --> 00:08:42,709
that I want to talk about is an external

00:08:40,610 --> 00:08:44,149
attacker so in the case of nor costura

00:08:42,709 --> 00:08:45,769
an external attacker is effectively

00:08:44,149 --> 00:08:47,000
somebody in the audience throwing a

00:08:45,769 --> 00:08:48,920
tomato to

00:08:47,000 --> 00:08:50,960
artists right there out in the audience

00:08:48,920 --> 00:08:52,310
they're not part of your Orchestra just

00:08:50,960 --> 00:08:54,500
effectively throwing tomatoes at you

00:08:52,310 --> 00:08:56,540
this is an external tacker model from an

00:08:54,500 --> 00:08:58,430
orchestra perspective from a computer

00:08:56,540 --> 00:09:00,320
science perspective this is effectively

00:08:58,430 --> 00:09:02,150
an external attacker outside of your

00:09:00,320 --> 00:09:04,550
firewall that is trying to hack in and

00:09:02,150 --> 00:09:07,820
trying to send resources in attack your

00:09:04,550 --> 00:09:09,020
network first attacker model the second

00:09:07,820 --> 00:09:10,100
attacker model that we're going to have

00:09:09,020 --> 00:09:13,910
to consider from a least privileged

00:09:10,100 --> 00:09:16,550
perspective is going to be the actual an

00:09:13,910 --> 00:09:18,560
actual insider attacker in this case

00:09:16,550 --> 00:09:21,380
it's represented by a dog playing with

00:09:18,560 --> 00:09:23,900
your actual set so in a computer science

00:09:21,380 --> 00:09:27,200
term is somebody behind your actual

00:09:23,900 --> 00:09:29,690
firewall there we go got that right so

00:09:27,200 --> 00:09:31,190
right next to one of your notes it does

00:09:29,690 --> 00:09:33,140
not have access to any other resources

00:09:31,190 --> 00:09:34,430
besides the fact that it is behind your

00:09:33,140 --> 00:09:37,520
firewall already and is actually

00:09:34,430 --> 00:09:38,810
accessing those resources the third

00:09:37,520 --> 00:09:41,750
attacker model that I want to describe

00:09:38,810 --> 00:09:43,580
is the NSA cap which becomes immediately

00:09:41,750 --> 00:09:45,080
obvious when you actually have

00:09:43,580 --> 00:09:47,330
headphones that can communicate or

00:09:45,080 --> 00:09:48,980
listen intercept all the communications

00:09:47,330 --> 00:09:51,890
between all of your members of your

00:09:48,980 --> 00:09:53,210
cluster the fourth attacker model that

00:09:51,890 --> 00:09:54,980
are really interesting to consider and

00:09:53,210 --> 00:09:56,450
they're becoming harder and harder to

00:09:54,980 --> 00:09:59,300
fight against and defend against is

00:09:56,450 --> 00:10:02,000
going to be the effect of malicious

00:09:59,300 --> 00:10:04,370
musician so effectively imagine that you

00:10:02,000 --> 00:10:05,900
have a gorilla that is now part of your

00:10:04,370 --> 00:10:08,210
symphony you're going to have to deal

00:10:05,900 --> 00:10:09,589
with this issue from a computer science

00:10:08,210 --> 00:10:12,200
perspective you're going to have a

00:10:09,589 --> 00:10:14,870
malicious worker imagine that this is an

00:10:12,200 --> 00:10:17,210
Orchestrator the MSR managers which are

00:10:14,870 --> 00:10:19,310
privileged in the node they effectively

00:10:17,210 --> 00:10:20,660
are creating a consensus running some

00:10:19,310 --> 00:10:22,670
consensus protocol amongst each other

00:10:20,660 --> 00:10:24,560
there are the privileged nodes and the

00:10:22,670 --> 00:10:26,240
workers are effectively less privileged

00:10:24,560 --> 00:10:28,820
nodes that are effectively just running

00:10:26,240 --> 00:10:30,950
tasks this is when a worker is

00:10:28,820 --> 00:10:33,530
compromised is effectively your gorilla

00:10:30,950 --> 00:10:35,480
running on your orchestra and then the

00:10:33,530 --> 00:10:37,730
final one the attacker model that is the

00:10:35,480 --> 00:10:41,120
hardest to protect against is going to

00:10:37,730 --> 00:10:44,000
be the malicious conductor effectively

00:10:41,120 --> 00:10:45,560
then it makes no sense there's no tempo

00:10:44,000 --> 00:10:47,210
that actually this thing is going to set

00:10:45,560 --> 00:10:49,670
such that you're going to have a nice

00:10:47,210 --> 00:10:51,740
concerto from a computer science

00:10:49,670 --> 00:10:53,630
perspective what that means as one of

00:10:51,740 --> 00:10:56,150
your privilege nodes in your cluster got

00:10:53,630 --> 00:10:58,130
compromised so one of your managers over

00:10:56,150 --> 00:10:59,000
there is now under control of an

00:10:58,130 --> 00:11:01,200
attacker

00:10:59,000 --> 00:11:03,000
so these are the five attacker models

00:11:01,200 --> 00:11:05,580
that I want you consider external

00:11:03,000 --> 00:11:07,020
attacker an internal attacker somebody

00:11:05,580 --> 00:11:09,330
that is man in the middle privileged

00:11:07,020 --> 00:11:11,100
position and can listen or a temper or

00:11:09,330 --> 00:11:13,200
man a middle every communication a

00:11:11,100 --> 00:11:14,820
malicious worker so somebody that is

00:11:13,200 --> 00:11:16,470
actually part of your set part of your

00:11:14,820 --> 00:11:18,870
Orchestra that is acting maliciously and

00:11:16,470 --> 00:11:21,720
you have a conductor that is actually a

00:11:18,870 --> 00:11:23,790
malicious conductor the reason why least

00:11:21,720 --> 00:11:26,010
privilege is so interesting is in a

00:11:23,790 --> 00:11:28,080
normal setting in today's systems people

00:11:26,010 --> 00:11:31,230
look at something like this and say this

00:11:28,080 --> 00:11:33,690
is game over I already have access to

00:11:31,230 --> 00:11:36,330
one of your privilege notes the cluster

00:11:33,690 --> 00:11:38,370
is doomed when in fact if you're

00:11:36,330 --> 00:11:40,260
thinking least privilege the only thing

00:11:38,370 --> 00:11:42,090
here that a malicious attacker

00:11:40,260 --> 00:11:44,330
compromising that particular red node

00:11:42,090 --> 00:11:46,980
over there should have access to is

00:11:44,330 --> 00:11:48,720
doing an eclipse attack on the only work

00:11:46,980 --> 00:11:50,520
at that company case with it it should

00:11:48,720 --> 00:11:52,350
not be able to gain leadership of the

00:11:50,520 --> 00:11:55,260
cluster it should not be able to

00:11:52,350 --> 00:11:56,520
actually poison the whatever consistent

00:11:55,260 --> 00:11:58,590
store that you have on the back end and

00:11:56,520 --> 00:12:00,090
it should not be able to do anything to

00:11:58,590 --> 00:12:02,670
the other workers that are not even

00:12:00,090 --> 00:12:04,260
dependent on it so this is why Elise

00:12:02,670 --> 00:12:06,120
privilege is so interesting and so

00:12:04,260 --> 00:12:08,250
important for us to actually look at

00:12:06,120 --> 00:12:09,540
because it allows us to make really good

00:12:08,250 --> 00:12:11,580
decisions from an architectural

00:12:09,540 --> 00:12:12,810
perspective and we should follow this

00:12:11,580 --> 00:12:14,820
privilege when you're building the

00:12:12,810 --> 00:12:16,290
underlayer infrastructure because all

00:12:14,820 --> 00:12:18,810
the attacker models I come on top are

00:12:16,290 --> 00:12:20,640
necessarily going to be less strict than

00:12:18,810 --> 00:12:25,260
the attacker model that you have at the

00:12:20,640 --> 00:12:27,660
bottom so now the question becomes okay

00:12:25,260 --> 00:12:28,770
we understand wireless privilege is a

00:12:27,660 --> 00:12:30,570
good way of looking at this we

00:12:28,770 --> 00:12:33,120
understand all the five attacker models

00:12:30,570 --> 00:12:35,220
what about the current orchestrators how

00:12:33,120 --> 00:12:36,900
far are they right now from actually

00:12:35,220 --> 00:12:38,580
considering the world in this view and

00:12:36,900 --> 00:12:44,070
protecting against all of these attacks

00:12:38,580 --> 00:12:46,800
Oh things get thorny if we continue with

00:12:44,070 --> 00:12:48,930
a symphony analogy the current

00:12:46,800 --> 00:12:51,620
orchestrators are effectively a street

00:12:48,930 --> 00:12:53,640
musician they're incredibly entertaining

00:12:51,620 --> 00:12:55,110
absolutely worth the five dollars that

00:12:53,640 --> 00:12:56,340
you put on the bucket but they're

00:12:55,110 --> 00:12:59,130
definitely not what you are done running

00:12:56,340 --> 00:13:01,410
production they're effectively have

00:12:59,130 --> 00:13:03,390
access to everything they are the tuba

00:13:01,410 --> 00:13:05,910
player they are they guitar player they

00:13:03,390 --> 00:13:08,660
are the conductor they do everything in

00:13:05,910 --> 00:13:11,310
one compromise of one of the actual

00:13:08,660 --> 00:13:12,209
roles in the system compromises

00:13:11,310 --> 00:13:13,949
everything else

00:13:12,209 --> 00:13:16,050
they have all the sheets they are the

00:13:13,949 --> 00:13:19,559
composer they are the orchestrator they

00:13:16,050 --> 00:13:22,649
are the musician so now the question

00:13:19,559 --> 00:13:24,600
becomes okay how do we actually get

00:13:22,649 --> 00:13:26,639
there how do we actually get to a system

00:13:24,600 --> 00:13:28,619
that is least privilege and what are the

00:13:26,639 --> 00:13:30,480
high-level description or high-level

00:13:28,619 --> 00:13:32,819
goals that an Orchestrator should have

00:13:30,480 --> 00:13:34,740
such that it could operate under these

00:13:32,819 --> 00:13:37,350
attacker scenarios and only compromise

00:13:34,740 --> 00:13:38,790
what actually goes away when that note

00:13:37,350 --> 00:13:41,249
or the resources that that node has

00:13:38,790 --> 00:13:43,410
access to when a compromise happens and

00:13:41,249 --> 00:13:45,329
so let's go back to our attacker models

00:13:43,410 --> 00:13:46,529
five of them and describe a couple of

00:13:45,329 --> 00:13:50,569
things are the most important things

00:13:46,529 --> 00:13:54,179
that you should consider number one

00:13:50,569 --> 00:13:55,470
mitigating external attacker I think for

00:13:54,179 --> 00:13:57,360
this one it becomes immediately obvious

00:13:55,470 --> 00:13:58,949
that this is one of the reasons why we

00:13:57,360 --> 00:14:00,899
have firewalls in the first place right

00:13:58,949 --> 00:14:02,790
we have firewalls because our attacker

00:14:00,899 --> 00:14:04,350
model was effectively some random person

00:14:02,790 --> 00:14:06,300
on the internet wants to attack my

00:14:04,350 --> 00:14:07,470
system I'm going to block it I'm only

00:14:06,300 --> 00:14:09,119
going to expose the ports of the

00:14:07,470 --> 00:14:10,800
services that I want and if the service

00:14:09,119 --> 00:14:13,679
comes up on one of my hosts it's behind

00:14:10,800 --> 00:14:15,149
the firewall everything is good so when

00:14:13,679 --> 00:14:16,910
we're talking about an Orchestrator when

00:14:15,149 --> 00:14:18,449
we were talking about the actual

00:14:16,910 --> 00:14:20,939
orchestrated that is orchestrating

00:14:18,449 --> 00:14:23,399
containers it could be as simple as this

00:14:20,939 --> 00:14:25,949
example docker stack where you

00:14:23,399 --> 00:14:27,959
explicitly have to actually expose a

00:14:25,949 --> 00:14:30,059
port such that that port becomes

00:14:27,959 --> 00:14:31,740
available to the outside world as simple

00:14:30,059 --> 00:14:34,019
as that effectively does the same thing

00:14:31,740 --> 00:14:35,730
as a far wall we do will do because

00:14:34,019 --> 00:14:37,559
there's an explicit action by someone in

00:14:35,730 --> 00:14:39,410
this case your developer saying that

00:14:37,559 --> 00:14:42,209
this service is supposed to be exposed

00:14:39,410 --> 00:14:44,699
note that Redis over there is not being

00:14:42,209 --> 00:14:45,509
exposed even though there be going to be

00:14:44,699 --> 00:14:48,720
able to communicate with each other

00:14:45,509 --> 00:14:51,779
right external attacker model could be

00:14:48,720 --> 00:14:53,549
as simple as something like this for an

00:14:51,779 --> 00:14:58,290
internal attacker model things become a

00:14:53,549 --> 00:15:01,040
lot more a lot harder turns out that

00:14:58,290 --> 00:15:03,720
when you look at membership of a network

00:15:01,040 --> 00:15:04,920
people essentially assume that if you're

00:15:03,720 --> 00:15:06,600
part of a network then you should have

00:15:04,920 --> 00:15:08,399
access to all the resources in that

00:15:06,600 --> 00:15:11,339
Network and that should not be true

00:15:08,399 --> 00:15:13,049
we're in 2016 which means that all of

00:15:11,339 --> 00:15:15,600
your services should be authenticated

00:15:13,049 --> 00:15:18,540
and authorized at a higher layer than

00:15:15,600 --> 00:15:20,309
just a my part of the same network what

00:15:18,540 --> 00:15:23,189
I mean by this is imagine that you

00:15:20,309 --> 00:15:25,800
expose a service in a network instead of

00:15:23,189 --> 00:15:29,820
just saying this particular payment

00:15:25,800 --> 00:15:31,740
api is in the same network as my front

00:15:29,820 --> 00:15:33,060
end web application and therefore the

00:15:31,740 --> 00:15:36,330
web application is access the payment

00:15:33,060 --> 00:15:39,000
api this level of granular axis is no

00:15:36,330 --> 00:15:40,920
longer acceptable you have to come up to

00:15:39,000 --> 00:15:44,180
a layer we're actually defining what

00:15:40,920 --> 00:15:46,320
endpoints what HTTP verbs what actual

00:15:44,180 --> 00:15:48,570
services are allowed to communicate with

00:15:46,320 --> 00:15:50,040
these particular n points so even though

00:15:48,570 --> 00:15:51,899
you could have three services that are

00:15:50,040 --> 00:15:53,310
all part of the same network they can't

00:15:51,899 --> 00:15:55,050
call arbitrary end points on my

00:15:53,310 --> 00:15:57,149
applications they're all being

00:15:55,050 --> 00:15:59,339
authorized and authenticated at layer

00:15:57,149 --> 00:16:02,160
seven so what I'm presenting here is a

00:15:59,339 --> 00:16:04,890
generic ACL that could be used for

00:16:02,160 --> 00:16:07,200
actual segmenting for example if you're

00:16:04,890 --> 00:16:08,430
using mutual TLS for mutually

00:16:07,200 --> 00:16:10,800
authenticated transport layer security

00:16:08,430 --> 00:16:12,600
for authorization authentication between

00:16:10,800 --> 00:16:14,490
services you could use an ACL like this

00:16:12,600 --> 00:16:16,800
to actually define what applications

00:16:14,490 --> 00:16:19,230
have access to what specific resource

00:16:16,800 --> 00:16:20,339
this is a lot better than any firewall

00:16:19,230 --> 00:16:24,120
that you can put in between and

00:16:20,339 --> 00:16:26,420
effectively is doing the seven a level

00:16:24,120 --> 00:16:28,350
of abstraction in terms of authorization

00:16:26,420 --> 00:16:30,420
if we go to the men in the middle

00:16:28,350 --> 00:16:31,740
attacker that one is pretty easy so

00:16:30,420 --> 00:16:33,450
effectively means that if you're

00:16:31,740 --> 00:16:36,390
deploying some kind of stack all

00:16:33,450 --> 00:16:38,820
connections that are being set up are

00:16:36,390 --> 00:16:41,010
immediately authenticated and encrypted

00:16:38,820 --> 00:16:43,200
both the control plane but also the data

00:16:41,010 --> 00:16:45,029
plane what this means is that there is

00:16:43,200 --> 00:16:47,100
mutual TLS or some kind of encryption

00:16:45,029 --> 00:16:48,570
that is immediately set up whenever you

00:16:47,100 --> 00:16:50,550
are accessing your rails application

00:16:48,570 --> 00:16:52,050
accessing to my sequel so you don't

00:16:50,550 --> 00:16:53,790
necessarily need to care even though you

00:16:52,050 --> 00:16:55,350
should about the actual protocol of

00:16:53,790 --> 00:16:57,480
communication between this web app in

00:16:55,350 --> 00:16:59,190
this database because the orchestrator

00:16:57,480 --> 00:17:00,570
takes care for you I've actually setting

00:16:59,190 --> 00:17:03,149
up a network that is encrypted by

00:17:00,570 --> 00:17:06,419
default continued through our attacker

00:17:03,149 --> 00:17:07,949
models to left malicious worker somebody

00:17:06,419 --> 00:17:09,959
compromised one of your notes and it has

00:17:07,949 --> 00:17:12,240
complete access to this note all the

00:17:09,959 --> 00:17:14,760
resources of this note well things start

00:17:12,240 --> 00:17:16,919
getting a lot harder here right but the

00:17:14,760 --> 00:17:19,230
main concepts now are going to be around

00:17:16,919 --> 00:17:21,750
effectively mitigating and segregating

00:17:19,230 --> 00:17:24,179
what access the attacker as actually has

00:17:21,750 --> 00:17:26,339
what side of your cluster what that

00:17:24,179 --> 00:17:28,319
means is number one the attacker should

00:17:26,339 --> 00:17:30,230
not have access to anything else but

00:17:28,319 --> 00:17:33,510
what's running on this particular server

00:17:30,230 --> 00:17:35,280
number two if it is a worker it should

00:17:33,510 --> 00:17:37,290
not be able to be able to modify the

00:17:35,280 --> 00:17:38,980
cluster itself so coming to get back to

00:17:37,290 --> 00:17:41,049
these privileged nodes and actually

00:17:38,980 --> 00:17:43,360
change anything in the cluster in the

00:17:41,049 --> 00:17:45,220
number three a node should have an

00:17:43,360 --> 00:17:48,100
identity that is assigned by the cluster

00:17:45,220 --> 00:17:51,160
and can never be modified it is assigned

00:17:48,100 --> 00:17:53,200
not requested so if you generalize this

00:17:51,160 --> 00:17:56,080
what this end is in the in the blue ends

00:17:53,200 --> 00:17:58,809
up looking at is something like a bush

00:17:56,080 --> 00:18:01,210
model versus a pole model where your

00:17:58,809 --> 00:18:03,730
unprivileged workers there at the bottom

00:18:01,210 --> 00:18:05,860
don't have the ability of asking for

00:18:03,730 --> 00:18:08,140
anything they're handed everything down

00:18:05,860 --> 00:18:10,299
if you want to execute a task on a

00:18:08,140 --> 00:18:12,070
worker bundle the resources and the

00:18:10,299 --> 00:18:14,440
secrets and the configs that I need to

00:18:12,070 --> 00:18:16,150
run this task do not send me some hint

00:18:14,440 --> 00:18:18,010
well have something that I need to go

00:18:16,150 --> 00:18:20,169
get from my environment so effectively

00:18:18,010 --> 00:18:22,480
bunk bundle everything send it to me and

00:18:20,169 --> 00:18:26,230
only send it to me if I'm supposed to

00:18:22,480 --> 00:18:27,760
run it and now we get to the hardest

00:18:26,230 --> 00:18:30,220
attacker model tracks defend against

00:18:27,760 --> 00:18:32,950
which is mitigating malicious manager

00:18:30,220 --> 00:18:34,090
remember in this case one of your core

00:18:32,950 --> 00:18:36,700
fundamental pieces of infrastructure

00:18:34,090 --> 00:18:38,440
which is part of your consensus protocol

00:18:36,700 --> 00:18:42,190
one of your managers is completely

00:18:38,440 --> 00:18:44,290
compromised what can you do well now it

00:18:42,190 --> 00:18:46,150
gets really really really hard but it's

00:18:44,290 --> 00:18:47,559
still possible for you to prevent a

00:18:46,150 --> 00:18:49,960
malicious attacker in this situation

00:18:47,559 --> 00:18:52,240
from having a completely catastrophic

00:18:49,960 --> 00:18:53,530
impact in your system and the things

00:18:52,240 --> 00:18:55,690
that are going to need to do are going

00:18:53,530 --> 00:18:59,380
to be relying on external systems for

00:18:55,690 --> 00:19:02,650
trust so number one you have to get the

00:18:59,380 --> 00:19:04,210
ability of signing code with the trust

00:19:02,650 --> 00:19:06,160
anchor that is outside of your system

00:19:04,210 --> 00:19:08,140
and what I mean by this is that the code

00:19:06,160 --> 00:19:10,510
that is executed on the workers cannot

00:19:08,140 --> 00:19:12,160
be signed by the manager itself so the

00:19:10,510 --> 00:19:14,980
manager says execute this piece of code

00:19:12,160 --> 00:19:16,600
but it can't sign it it can say this is

00:19:14,980 --> 00:19:18,340
a piece of co that is valid some

00:19:16,600 --> 00:19:22,210
developer has to sign it and do it

00:19:18,340 --> 00:19:24,280
himself or herself second one no access

00:19:22,210 --> 00:19:25,990
to key material this is a really hard

00:19:24,280 --> 00:19:28,570
one but effectively what this means is

00:19:25,990 --> 00:19:30,460
when you're sending a job to a worker

00:19:28,570 --> 00:19:31,600
and you're sending secrets or key

00:19:30,460 --> 00:19:33,520
material that the worker needs to

00:19:31,600 --> 00:19:35,200
operate the manager itself should not

00:19:33,520 --> 00:19:37,179
have access to actually plain text of

00:19:35,200 --> 00:19:38,919
the secret itself and it should not be

00:19:37,179 --> 00:19:41,559
in the way so there should be somewhat

00:19:38,919 --> 00:19:44,830
into an encryption of the secrets that

00:19:41,559 --> 00:19:46,960
are being delivered towards a worker

00:19:44,830 --> 00:19:48,850
the manager should never have the

00:19:46,960 --> 00:19:50,620
ability of spinning up new nodes and the

00:19:48,850 --> 00:19:52,600
reason for that is if you spin up on you

00:19:50,620 --> 00:19:54,309
note under your own control and you

00:19:52,600 --> 00:19:55,600
assign a task to yourself then you're

00:19:54,309 --> 00:19:57,580
going to have access to all the secrets

00:19:55,600 --> 00:19:59,470
and all the tasks are being scheduled in

00:19:57,580 --> 00:20:01,059
the final one there should not be

00:19:59,470 --> 00:20:02,919
ability for the manager to effectively

00:20:01,059 --> 00:20:05,919
read the communication between these

00:20:02,919 --> 00:20:07,809
workers the major thing here is that

00:20:05,919 --> 00:20:09,700
this is always going to depend on

00:20:07,809 --> 00:20:11,649
external system so your developer is

00:20:09,700 --> 00:20:13,269
going to ultimately be or your engineer

00:20:11,649 --> 00:20:15,370
or yobs person going to be the person

00:20:13,269 --> 00:20:16,690
that is going to assign what the spec is

00:20:15,370 --> 00:20:18,070
what the description of what is supposed

00:20:16,690 --> 00:20:19,539
to be running and all the workers are

00:20:18,070 --> 00:20:21,580
going to have to independently validate

00:20:19,539 --> 00:20:22,960
it this is really important and is one

00:20:21,580 --> 00:20:24,639
of the few hopes that you have of

00:20:22,960 --> 00:20:29,320
actually getting to a system where the

00:20:24,639 --> 00:20:32,110
manager can be untrusted so now let me

00:20:29,320 --> 00:20:34,090
talk to you about swarm and about why

00:20:32,110 --> 00:20:36,190
I've been thinking a lot about least

00:20:34,090 --> 00:20:37,630
privilege orchestrators so while

00:20:36,190 --> 00:20:39,610
building swarm there's a lot of

00:20:37,630 --> 00:20:41,889
decisions that we had to make always

00:20:39,610 --> 00:20:44,200
there's a trade-off between ease of use

00:20:41,889 --> 00:20:46,120
and security and so we really wanted to

00:20:44,200 --> 00:20:48,549
go with the motto of secure by default

00:20:46,120 --> 00:20:51,250
and continue the motto of docker which

00:20:48,549 --> 00:20:52,630
is everything is really easy to use so

00:20:51,250 --> 00:20:55,419
there are two things that I think are

00:20:52,630 --> 00:20:56,649
really key to why swarm right now is one

00:20:55,419 --> 00:20:58,149
of the most secure orchestrators out

00:20:56,649 --> 00:20:59,590
there and that I think you're going to

00:20:58,149 --> 00:21:00,850
like and you're going to find there's

00:20:59,590 --> 00:21:07,330
actually like really well thought out

00:21:00,850 --> 00:21:09,880
and easy to use number one is a CA to

00:21:07,330 --> 00:21:11,740
start a swarm cluster you have to

00:21:09,880 --> 00:21:13,960
essentially 11 command you do docker

00:21:11,740 --> 00:21:16,360
swarm in it if you've used swarm after

00:21:13,960 --> 00:21:18,100
112 you've seen this and then once you

00:21:16,360 --> 00:21:20,529
do that you effectively get a token here

00:21:18,100 --> 00:21:22,210
that in a command that you can be

00:21:20,529 --> 00:21:23,830
effectively copy paste to any other node

00:21:22,210 --> 00:21:25,090
to effectively have a secure

00:21:23,830 --> 00:21:27,730
introduction of a new note to the

00:21:25,090 --> 00:21:29,230
cluster when this happens this is

00:21:27,730 --> 00:21:30,639
incredibly simple command one commander

00:21:29,230 --> 00:21:33,419
when this happens there's a lot of stuff

00:21:30,639 --> 00:21:35,769
happening in the background number one

00:21:33,419 --> 00:21:37,630
the first note that comes up the first

00:21:35,769 --> 00:21:39,340
manager generates automatically a

00:21:37,630 --> 00:21:40,899
certificate authority for you it's a

00:21:39,340 --> 00:21:42,250
self-signed certificate authority where

00:21:40,899 --> 00:21:45,519
that certificate authority it actually

00:21:42,250 --> 00:21:47,350
issues certificates for itself second

00:21:45,519 --> 00:21:49,750
thing that happens is when a new node

00:21:47,350 --> 00:21:52,179
actually joins the system it gets issued

00:21:49,750 --> 00:21:53,889
a certificate it has to prove that it

00:21:52,179 --> 00:21:55,510
has accessed the system by showing that

00:21:53,889 --> 00:21:57,039
token that I show you on the actual

00:21:55,510 --> 00:21:58,179
console but there's a secure

00:21:57,039 --> 00:21:59,919
introduction of a work

00:21:58,179 --> 00:22:02,080
to a system and there's now a

00:21:59,919 --> 00:22:04,360
certificate that represents this worker

00:22:02,080 --> 00:22:06,820
for the lifetime the duration of this

00:22:04,360 --> 00:22:08,590
worker on the cluster there's a secure

00:22:06,820 --> 00:22:10,570
identity that actually is now part of

00:22:08,590 --> 00:22:12,340
the worker that we can use then on top

00:22:10,570 --> 00:22:15,669
to do for example secure secrets

00:22:12,340 --> 00:22:17,320
delivery then after that we can actually

00:22:15,669 --> 00:22:18,759
add new managers and you can add new

00:22:17,320 --> 00:22:20,379
workers and all of them are going to

00:22:18,759 --> 00:22:22,360
stay out of each other's way because the

00:22:20,379 --> 00:22:25,240
certificates actually describe the rule

00:22:22,360 --> 00:22:26,799
that they have in the swarm itself so a

00:22:25,240 --> 00:22:28,720
worker will have a certificate that says

00:22:26,799 --> 00:22:30,580
I'm a worker and a manager will have a

00:22:28,720 --> 00:22:32,590
certificate that says on the manager and

00:22:30,580 --> 00:22:34,629
whenever they're communicating with each

00:22:32,590 --> 00:22:35,919
other they can independently verify if

00:22:34,629 --> 00:22:38,889
they're talking to the right party or

00:22:35,919 --> 00:22:41,470
not and then finally now that you have

00:22:38,889 --> 00:22:43,990
note identities and these not identities

00:22:41,470 --> 00:22:46,360
are actual TLS certificate well we just

00:22:43,990 --> 00:22:48,070
use it for mutual TLS and we do mutual

00:22:46,360 --> 00:22:50,379
authentication authorization and

00:22:48,070 --> 00:22:52,539
actually accounting of everything that

00:22:50,379 --> 00:22:54,549
is happening on the cluster in all the

00:22:52,539 --> 00:22:57,730
communications are encrypted by using

00:22:54,549 --> 00:22:59,169
just TLS and note that workers are not

00:22:57,730 --> 00:23:01,090
communicating with each other they're in

00:22:59,169 --> 00:23:02,710
isolation so they only have one

00:23:01,090 --> 00:23:04,990
communication path up to the managers

00:23:02,710 --> 00:23:08,320
and everything else is pushed down from

00:23:04,990 --> 00:23:11,019
the manager to the worker from a from a

00:23:08,320 --> 00:23:13,149
from a least privileged perspective we

00:23:11,019 --> 00:23:14,350
can actually go a little bit further but

00:23:13,149 --> 00:23:15,789
before I go little bit further let me

00:23:14,350 --> 00:23:17,710
just show you the token that was talking

00:23:15,789 --> 00:23:20,139
about there's a few interesting things

00:23:17,710 --> 00:23:22,779
that are happening here number one is we

00:23:20,139 --> 00:23:25,119
really want to be ops friendly and we

00:23:22,779 --> 00:23:28,090
put a prefix in the token that you can

00:23:25,119 --> 00:23:29,860
search on version control right none of

00:23:28,090 --> 00:23:31,299
us have ever put anything sensitive on

00:23:29,860 --> 00:23:33,129
github right it's never happened before

00:23:31,299 --> 00:23:34,480
so this effectively makes it easy for

00:23:33,129 --> 00:23:36,149
you to do a grep test and see if

00:23:34,480 --> 00:23:38,230
somebody has leaked some of your tokens

00:23:36,149 --> 00:23:40,179
then we actually have a cryptographic

00:23:38,230 --> 00:23:42,580
hash that is a cryptographic hash of the

00:23:40,179 --> 00:23:44,110
root CA the reason why we add this there

00:23:42,580 --> 00:23:46,119
is so you can actually have secure

00:23:44,110 --> 00:23:47,559
introduction of the cluster instead of

00:23:46,119 --> 00:23:49,119
distributing the root CA certificate

00:23:47,559 --> 00:23:50,559
across all of your nodes you just have

00:23:49,119 --> 00:23:52,720
to distribute this token and then you

00:23:50,559 --> 00:23:54,549
can download some file that represents

00:23:52,720 --> 00:23:55,899
the root CA and validate if this is

00:23:54,549 --> 00:23:58,389
actually legitimately the roots here or

00:23:55,899 --> 00:23:59,919
not and then finally there's a randomly

00:23:58,389 --> 00:24:01,600
generated secret that is effectively

00:23:59,919 --> 00:24:03,759
used to prove that you have access to

00:24:01,600 --> 00:24:06,369
this cluster and that you're actually

00:24:03,759 --> 00:24:09,280
supposed to be joining as either worker

00:24:06,369 --> 00:24:13,840
or as a manager there's two tokens 14

00:24:09,280 --> 00:24:15,640
so this is how the token works the first

00:24:13,840 --> 00:24:17,920
thing a worker needs to do to join a

00:24:15,640 --> 00:24:20,890
cluster is effectively handed down this

00:24:17,920 --> 00:24:22,570
token and then creates or the first

00:24:20,890 --> 00:24:24,730
thing that it does is give me what root

00:24:22,570 --> 00:24:27,190
CA I should be trusting but remember the

00:24:24,730 --> 00:24:29,350
token contains the hash that is valid so

00:24:27,190 --> 00:24:30,820
we can get from any interested party the

00:24:29,350 --> 00:24:33,490
root CA that we're supposed to trust and

00:24:30,820 --> 00:24:35,290
then we validate the cryptographic hash

00:24:33,490 --> 00:24:37,260
and we can actually start with strapping

00:24:35,290 --> 00:24:39,700
the whole process by using this root CA

00:24:37,260 --> 00:24:42,340
with this root CA we do a one-way

00:24:39,700 --> 00:24:44,380
connection TLS on step number two we

00:24:42,340 --> 00:24:46,930
generate a key pair and we submit a

00:24:44,380 --> 00:24:48,340
certificate signing request the reason

00:24:46,930 --> 00:24:49,570
why is certificates on request is

00:24:48,340 --> 00:24:51,220
interesting is because it actually

00:24:49,570 --> 00:24:52,660
doesn't have any key material so you're

00:24:51,220 --> 00:24:54,400
not leaking any private key material

00:24:52,660 --> 00:24:56,890
they're just sending public components

00:24:54,400 --> 00:24:58,420
for remote server to sign note that at

00:24:56,890 --> 00:25:00,400
this point the manager does not have

00:24:58,420 --> 00:25:02,560
your key the only thing it has is

00:25:00,400 --> 00:25:04,390
effectively your public key and now is

00:25:02,560 --> 00:25:06,430
going to sign it and it's going to send

00:25:04,390 --> 00:25:09,010
you back a certificate and so at this

00:25:06,430 --> 00:25:11,050
point after number three you have your

00:25:09,010 --> 00:25:12,490
own identity that a manager created for

00:25:11,050 --> 00:25:14,140
you that is going to identify this

00:25:12,490 --> 00:25:16,180
worker for the lifetime of the worker in

00:25:14,140 --> 00:25:17,710
the key is only yours and you're going

00:25:16,180 --> 00:25:19,330
to use it to communicate with any other

00:25:17,710 --> 00:25:20,590
node of the cluster and everybody knows

00:25:19,330 --> 00:25:23,740
that you're a worker node and not a

00:25:20,590 --> 00:25:25,480
manager and another thing that we have

00:25:23,740 --> 00:25:27,130
to do is if we're setting up a

00:25:25,480 --> 00:25:29,050
certificate authority in a pki for you

00:25:27,130 --> 00:25:30,670
we have to handle certificate rotation

00:25:29,050 --> 00:25:33,130
and we have to handle certificate

00:25:30,670 --> 00:25:34,540
rotation in a transparent fashion so we

00:25:33,130 --> 00:25:36,370
have to rotate this in the background in

00:25:34,540 --> 00:25:39,040
a way that it actually does not affect

00:25:36,370 --> 00:25:41,380
any of your production systems so we

00:25:39,040 --> 00:25:43,630
built this into swarm and you can turn

00:25:41,380 --> 00:25:45,070
it all the way down to every hour every

00:25:43,630 --> 00:25:46,810
single node of your system will

00:25:45,070 --> 00:25:49,930
effectively request a new certificate

00:25:46,810 --> 00:25:51,910
and it will generate a new key pair so

00:25:49,930 --> 00:25:54,910
even if the key got leaked because it

00:25:51,910 --> 00:25:56,890
was backed up to s3 and your has three

00:25:54,910 --> 00:25:58,780
credentials were leaked or somebody

00:25:56,890 --> 00:26:00,580
decided is committed to github every

00:25:58,780 --> 00:26:02,380
single hour these certificates in these

00:26:00,580 --> 00:26:04,120
keys are going to be rotated so the old

00:26:02,380 --> 00:26:05,530
key is effectively useless there's no

00:26:04,120 --> 00:26:07,330
connection between the old key and the

00:26:05,530 --> 00:26:09,310
new key and the whole key is going to

00:26:07,330 --> 00:26:12,220
expire in one hour and can no longer be

00:26:09,310 --> 00:26:14,890
used same thing happens for the actual

00:26:12,220 --> 00:26:16,240
managers and coming in at a future

00:26:14,890 --> 00:26:18,160
version you're actually going to be able

00:26:16,240 --> 00:26:20,620
to rotate the whole root of trust so

00:26:18,160 --> 00:26:22,509
that oh the whole CA the whole root of

00:26:20,620 --> 00:26:24,729
trust is going to be able to continue

00:26:22,509 --> 00:26:26,529
rotate and the root itself can be

00:26:24,729 --> 00:26:29,739
compromised and you can recover from

00:26:26,529 --> 00:26:31,839
this so no key compromise on swarm is

00:26:29,739 --> 00:26:33,729
catastrophic because you always have

00:26:31,839 --> 00:26:35,829
transparent key rotation this is a

00:26:33,729 --> 00:26:39,879
really interesting key point for you to

00:26:35,829 --> 00:26:42,249
have on any cryptographic system if we

00:26:39,879 --> 00:26:44,559
want to go take least privilege a little

00:26:42,249 --> 00:26:46,690
bit a little bit further in the previous

00:26:44,559 --> 00:26:48,159
model we actually had the managers that

00:26:46,690 --> 00:26:50,769
had the private key material of the ca

00:26:48,159 --> 00:26:53,259
so they could actually indoctrinate new

00:26:50,769 --> 00:26:55,449
nodes of the system but we'd swarm we

00:26:53,259 --> 00:26:58,659
actually support an external certificate

00:26:55,449 --> 00:26:59,889
authority which now is responsible for

00:26:58,659 --> 00:27:02,440
making sure that node membership is

00:26:59,889 --> 00:27:04,299
correct what this means is it goes to

00:27:02,440 --> 00:27:05,979
what I said on the attacker model of a

00:27:04,299 --> 00:27:07,959
malicious manager which is all the

00:27:05,979 --> 00:27:09,909
managers they can't introduce new nodes

00:27:07,959 --> 00:27:11,649
at this point because they are dependent

00:27:09,909 --> 00:27:13,539
on a certificate authority that is

00:27:11,649 --> 00:27:16,059
external for issuing certificates and

00:27:13,539 --> 00:27:17,409
again since the worker does not send any

00:27:16,059 --> 00:27:20,499
key material to the managers and the

00:27:17,409 --> 00:27:21,879
managers and only relay the certificate

00:27:20,499 --> 00:27:24,279
signing request which only contains

00:27:21,879 --> 00:27:26,559
public information the manager has no

00:27:24,279 --> 00:27:28,599
privilege over the worker can occur a

00:27:26,559 --> 00:27:30,699
new workers cannot fake their identity

00:27:28,599 --> 00:27:33,639
and cannot effectively do anything else

00:27:30,699 --> 00:27:36,879
but to run as an Orchestrator in one as

00:27:33,639 --> 00:27:39,219
a manager so this is a CA component out

00:27:36,879 --> 00:27:41,529
of the box docker swarm in it and you

00:27:39,219 --> 00:27:43,779
get new tool TLS automatic certificate

00:27:41,529 --> 00:27:46,179
rotation in a pki that is taken care for

00:27:43,779 --> 00:27:47,889
you the second thing that I want to

00:27:46,179 --> 00:27:50,019
mention that is a really important thing

00:27:47,889 --> 00:27:51,579
in a distributed orchestrator or in a

00:27:50,019 --> 00:27:54,459
container of the sweater is secrets

00:27:51,579 --> 00:27:56,909
management this is something that a lot

00:27:54,459 --> 00:27:59,499
of orchestrators don't either support or

00:27:56,909 --> 00:28:01,629
support the wrong way and we're going to

00:27:59,499 --> 00:28:03,039
see that there's also some flaws or some

00:28:01,629 --> 00:28:05,229
future improvements that we have to do

00:28:03,039 --> 00:28:07,869
to really get to orchestrating least

00:28:05,229 --> 00:28:09,669
privilege but in dr. 113 we're shipping

00:28:07,869 --> 00:28:11,919
secrets effectively can generate random

00:28:09,669 --> 00:28:13,629
secret and just do literally Asik dr.

00:28:11,919 --> 00:28:16,359
secret create when you do a doctor

00:28:13,629 --> 00:28:19,479
secret create what this does is it sends

00:28:16,359 --> 00:28:20,919
to the manager the secret material then

00:28:19,479 --> 00:28:22,749
the manager is going to hold on to it

00:28:20,919 --> 00:28:24,459
it's going to encrypt it at rest it's

00:28:22,749 --> 00:28:28,359
going to keep it for any container that

00:28:24,459 --> 00:28:29,590
wants to run so going back with this

00:28:28,359 --> 00:28:32,440
inflow

00:28:29,590 --> 00:28:34,150
you do dr. secret create a secret is

00:28:32,440 --> 00:28:35,679
sent to a manager it's sent through a

00:28:34,150 --> 00:28:37,029
secure TLS connection because you

00:28:35,679 --> 00:28:38,470
already have certificates because we

00:28:37,029 --> 00:28:41,169
already generate them in the previous

00:28:38,470 --> 00:28:42,669
step very convenient the second thing

00:28:41,169 --> 00:28:44,200
you're going to do is you're going to

00:28:42,669 --> 00:28:46,120
replicate the secret across all the

00:28:44,200 --> 00:28:48,549
managers in all of this is securely

00:28:46,120 --> 00:28:51,880
transmitted and securely stored at rest

00:28:48,549 --> 00:28:54,130
so private material never actually hits

00:28:51,880 --> 00:28:55,659
disc and this is cool because if one of

00:28:54,130 --> 00:28:58,080
your managers dies obviously you have

00:28:55,659 --> 00:29:01,270
redundancy on the actual secret store

00:28:58,080 --> 00:29:03,279
number three workers that are

00:29:01,270 --> 00:29:05,799
participating in the system when they

00:29:03,279 --> 00:29:07,690
are scheduled by the managers a task

00:29:05,799 --> 00:29:09,700
that requires a secret then they are

00:29:07,690 --> 00:29:11,860
sent the secret right before they're

00:29:09,700 --> 00:29:14,020
sent a task so imagine that you want to

00:29:11,860 --> 00:29:15,970
run Redis or am I sequel and you have

00:29:14,020 --> 00:29:17,830
certificates to run rattus or women I

00:29:15,970 --> 00:29:20,140
sequel actually ready I don't think

00:29:17,830 --> 00:29:22,840
still doesn't support ALS so let's go

00:29:20,140 --> 00:29:23,830
with my sequel imagine my sequel imagine

00:29:22,840 --> 00:29:25,929
that you actually want to provide a

00:29:23,830 --> 00:29:28,270
certificate you literally send the

00:29:25,929 --> 00:29:30,100
certificate right before you send the

00:29:28,270 --> 00:29:32,320
task and so when the node wants you

00:29:30,100 --> 00:29:34,600
bootstrap the container it magically has

00:29:32,320 --> 00:29:36,970
the secret and what it's going to do in

00:29:34,600 --> 00:29:40,450
dr. 113 is it's actually going to mount

00:29:36,970 --> 00:29:41,799
a temp FS volume in memory and it's

00:29:40,450 --> 00:29:43,630
going to pretend that the secret is now

00:29:41,799 --> 00:29:46,600
a file and your container is just going

00:29:43,630 --> 00:29:49,330
to have it access to it under of our run

00:29:46,600 --> 00:29:51,429
secrets so you could effectively use my

00:29:49,330 --> 00:29:52,899
sequel point into this directory and

00:29:51,429 --> 00:29:54,789
you'll have access to the secret but

00:29:52,899 --> 00:29:56,890
that secret never hits disc only exists

00:29:54,789 --> 00:29:58,570
in memory is encrypted at rest on the

00:29:56,890 --> 00:30:00,779
managers and got sent securely through

00:29:58,570 --> 00:30:04,720
the mutual TLS connection that it has

00:30:00,779 --> 00:30:06,429
and then the other interesting thing is

00:30:04,720 --> 00:30:08,200
that no other worker has access to the

00:30:06,429 --> 00:30:11,110
secret because no other worker is going

00:30:08,200 --> 00:30:12,789
to have these tasks scheduled and you

00:30:11,110 --> 00:30:15,669
can actually control that by actually

00:30:12,789 --> 00:30:17,679
doing deployment constraints so you

00:30:15,669 --> 00:30:19,720
could segregate a few of your nodes of

00:30:17,679 --> 00:30:22,000
your cluster to be PCI compliant and

00:30:19,720 --> 00:30:24,159
only the PCI compliant members of your

00:30:22,000 --> 00:30:28,210
cluster get PCI compliant secrets for

00:30:24,159 --> 00:30:30,370
example so backing on top of the TLS we

00:30:28,210 --> 00:30:33,039
were able to using the node identities

00:30:30,370 --> 00:30:35,409
have secure delivery of secrets but now

00:30:33,039 --> 00:30:38,020
the next question that people always ask

00:30:35,409 --> 00:30:40,240
me is sure you have encryption at rest

00:30:38,020 --> 00:30:42,610
but where's the key that encrypts all

00:30:40,240 --> 00:30:43,330
today at rest right that's a really good

00:30:42,610 --> 00:30:45,040
question

00:30:43,330 --> 00:30:47,470
and it's the one that you should always

00:30:45,040 --> 00:30:49,060
ask well what's warm we created a really

00:30:47,470 --> 00:30:51,310
simple mechanism for you to take

00:30:49,060 --> 00:30:54,760
ownership over the key now what that

00:30:51,310 --> 00:30:57,070
means is if in dr. you turn out a lock

00:30:54,760 --> 00:30:59,110
to true you are now responsible for

00:30:57,070 --> 00:31:01,870
managing this key and without this key

00:30:59,110 --> 00:31:04,240
your cluster cannot be started however

00:31:01,870 --> 00:31:06,550
this key is never written anywhere and

00:31:04,240 --> 00:31:08,140
so only exists in memory so with one of

00:31:06,550 --> 00:31:10,090
your nodes restart you are responsible

00:31:08,140 --> 00:31:12,610
for going in and providing the key that

00:31:10,090 --> 00:31:15,310
then unlocks the manager and so with

00:31:12,610 --> 00:31:17,800
this simple mechanism you either have a

00:31:15,310 --> 00:31:20,530
cluster that is locked and cannot

00:31:17,800 --> 00:31:23,110
restart by itself but has no keys on

00:31:20,530 --> 00:31:25,270
disk or you have a cluster days unlocked

00:31:23,110 --> 00:31:28,120
can we start by itself but it has a key

00:31:25,270 --> 00:31:30,130
that is actually written to disk but no

00:31:28,120 --> 00:31:32,020
key material of your secrets or of your

00:31:30,130 --> 00:31:34,900
raft which is actually what the managers

00:31:32,020 --> 00:31:37,510
are using for consensus ever it's disk

00:31:34,900 --> 00:31:39,880
at any point in time so it's really

00:31:37,510 --> 00:31:42,040
following the principle of least

00:31:39,880 --> 00:31:44,680
privilege and is also following the

00:31:42,040 --> 00:31:46,570
principle of secure by default where you

00:31:44,680 --> 00:31:48,700
effectively don't have a choice whether

00:31:46,570 --> 00:31:50,320
to enable TLS because it's always

00:31:48,700 --> 00:31:51,940
enabled for you you don't have the

00:31:50,320 --> 00:31:54,400
choice of how you want to introduce

00:31:51,940 --> 00:31:56,200
cluster workers to your cluster because

00:31:54,400 --> 00:31:58,390
there's only one mode of introducing

00:31:56,200 --> 00:32:01,270
with a secure token and you don't have

00:31:58,390 --> 00:32:02,530
to choose between encryption not

00:32:01,270 --> 00:32:04,000
encryption and how secrets get

00:32:02,530 --> 00:32:07,980
distributed because there's only one way

00:32:04,000 --> 00:32:10,540
of doing it and it's the right way so

00:32:07,980 --> 00:32:12,910
there's a couple of open problems or

00:32:10,540 --> 00:32:14,850
opportunities and all the clusters out

00:32:12,910 --> 00:32:17,410
there and in particular also in swarm

00:32:14,850 --> 00:32:20,410
the first one has to do with Byzantine

00:32:17,410 --> 00:32:22,980
consensus so I think we're all familiar

00:32:20,410 --> 00:32:27,940
with draft and other contestas protocols

00:32:22,980 --> 00:32:30,850
rafts was um came out in 2011 i'm not

00:32:27,940 --> 00:32:32,830
mistaken or 2013 and became really

00:32:30,850 --> 00:32:35,890
successful all the distributed systems

00:32:32,830 --> 00:32:38,200
started using it however we went from a

00:32:35,890 --> 00:32:39,790
place where we knew how to do practical

00:32:38,200 --> 00:32:42,430
presenting consensus and we had

00:32:39,790 --> 00:32:44,440
protocols to do it to actually having a

00:32:42,430 --> 00:32:46,770
system that only tolerated tolerates

00:32:44,440 --> 00:32:49,680
fail stop and no longer tolerate

00:32:46,770 --> 00:32:51,760
byzantine mode so a malicious adversary

00:32:49,680 --> 00:32:53,500
unfortunately if you're using raft any

00:32:51,760 --> 00:32:55,600
of the notes participating in the raft

00:32:53,500 --> 00:32:55,940
protocol can effectively cause leader

00:32:55,600 --> 00:33:00,799
like

00:32:55,940 --> 00:33:03,559
over and over and over again and this is

00:33:00,799 --> 00:33:06,919
also this all true also true for things

00:33:03,559 --> 00:33:13,419
like they do note membership that are

00:33:06,919 --> 00:33:18,529
using for example swim that is using

00:33:13,419 --> 00:33:21,049
busty busty so whatever you do these

00:33:18,529 --> 00:33:22,580
systems are not concerned with malicious

00:33:21,049 --> 00:33:23,929
attackers that are part of the actual

00:33:22,580 --> 00:33:25,909
consensus protocols they're only

00:33:23,929 --> 00:33:28,940
concerned with the de manager just stop

00:33:25,909 --> 00:33:30,320
operating or not and so this is

00:33:28,940 --> 00:33:32,330
something that is a community of

00:33:30,320 --> 00:33:34,340
distributed systems developers we have

00:33:32,330 --> 00:33:36,440
to fix we should get to the point where

00:33:34,340 --> 00:33:37,970
there are easy frameworks and there's

00:33:36,440 --> 00:33:39,769
already a few out there like Tangaroa

00:33:37,970 --> 00:33:41,419
that providers presenting consensus

00:33:39,769 --> 00:33:43,549
because this is something that we need

00:33:41,419 --> 00:33:45,679
to get to least privileged orchestration

00:33:43,549 --> 00:33:47,509
we need the nodes that are part of the

00:33:45,679 --> 00:33:49,940
consensus protocol not to trust each

00:33:47,509 --> 00:33:52,340
other or for us to have a majority of

00:33:49,940 --> 00:33:55,759
three f +1 nodes that we can actually

00:33:52,340 --> 00:33:57,649
control the second thing is sign specs I

00:33:55,759 --> 00:34:00,139
don't know of any orchestrator that does

00:33:57,649 --> 00:34:02,120
this right now but the concept is right

00:34:00,139 --> 00:34:04,129
now we have specs and a lot of these

00:34:02,120 --> 00:34:05,870
orchestrators have them but no engineer

00:34:04,129 --> 00:34:09,079
is actually signing it with their own

00:34:05,870 --> 00:34:10,730
private key and no host is actually

00:34:09,079 --> 00:34:12,800
verifying it and to make sure that this

00:34:10,730 --> 00:34:14,720
actually came from an engineer what this

00:34:12,800 --> 00:34:16,609
means is that right now whatever

00:34:14,720 --> 00:34:18,319
orchestrator is in here in this case is

00:34:16,609 --> 00:34:20,119
swarm they could technically make up

00:34:18,319 --> 00:34:22,579
whatever you wanted to run on a worker

00:34:20,119 --> 00:34:24,260
and just send it down and the servers

00:34:22,579 --> 00:34:27,079
and the workers will just eat it up and

00:34:24,260 --> 00:34:28,760
just art running whatever we have to

00:34:27,079 --> 00:34:31,540
prevent against this we have to prevent

00:34:28,760 --> 00:34:33,919
against the execution of arbitrary code

00:34:31,540 --> 00:34:35,210
enforce worm we already support

00:34:33,919 --> 00:34:37,159
something called dr. Conte and trust

00:34:35,210 --> 00:34:39,139
that does image signature so you can

00:34:37,159 --> 00:34:41,750
already enable it on the actual workers

00:34:39,139 --> 00:34:43,399
enforce the manager to never execute

00:34:41,750 --> 00:34:45,619
code unless it's signed by a developer

00:34:43,399 --> 00:34:48,889
but unfortunately the same is not true

00:34:45,619 --> 00:34:52,099
for the specs right now and the third

00:34:48,889 --> 00:34:53,119
one is in to end secrets I described how

00:34:52,099 --> 00:34:55,819
we're actually doing secrets

00:34:53,119 --> 00:34:58,160
distribution however in our case swarm

00:34:55,819 --> 00:35:00,380
still has access to plaintext secrets

00:34:58,160 --> 00:35:02,569
for manager perspective but what we

00:35:00,380 --> 00:35:04,339
actually want is we want a secret that

00:35:02,569 --> 00:35:06,410
is encrypted before it goes into the

00:35:04,339 --> 00:35:08,210
orchestrator and it gets decrypted only

00:35:06,410 --> 00:35:08,900
on the actual host that is supposed to

00:35:08,210 --> 00:35:11,420
be executed

00:35:08,900 --> 00:35:13,549
so it should be end to end it should be

00:35:11,420 --> 00:35:15,680
executed only when it needs to and

00:35:13,549 --> 00:35:17,329
erased immediately after there's a

00:35:15,680 --> 00:35:19,039
couple of ways of doing this one of them

00:35:17,329 --> 00:35:21,020
is obviously encrypting towards the

00:35:19,039 --> 00:35:22,430
certificate of the node and another way

00:35:21,020 --> 00:35:24,260
is for example for you to use an

00:35:22,430 --> 00:35:25,730
external system like vault and then

00:35:24,260 --> 00:35:27,559
you'd have a connection that is over

00:35:25,730 --> 00:35:29,329
here on the side and the orchestrator

00:35:27,559 --> 00:35:32,059
just sends you a reference and then the

00:35:29,329 --> 00:35:34,010
secret comes from another channel but we

00:35:32,059 --> 00:35:36,200
have solutions for this nobody has built

00:35:34,010 --> 00:35:37,880
it in and the major issue is if you want

00:35:36,200 --> 00:35:40,599
a solution by default then you have to

00:35:37,880 --> 00:35:46,190
trust someone and for us who we trust is

00:35:40,599 --> 00:35:48,349
swarm managers and so for swarm we are

00:35:46,190 --> 00:35:50,119
no longer a street performer if we go

00:35:48,349 --> 00:35:52,609
back to our symphony in our music

00:35:50,119 --> 00:35:54,230
analogy we're not a street performer we

00:35:52,609 --> 00:35:56,809
actually have least privilege of

00:35:54,230 --> 00:35:59,150
musicians so our workers are actually

00:35:56,809 --> 00:36:01,910
least privileged at this point however

00:35:59,150 --> 00:36:04,760
we're kind of like a jazz band right so

00:36:01,910 --> 00:36:07,279
everybody has their instrument but we're

00:36:04,760 --> 00:36:10,460
not really playing in synchronicity

00:36:07,279 --> 00:36:13,670
there's no actual conductor that is

00:36:10,460 --> 00:36:16,010
operating this as a band and as a

00:36:13,670 --> 00:36:17,809
developer and as an ops person you

00:36:16,010 --> 00:36:19,670
should not be satisfied with the state

00:36:17,809 --> 00:36:21,980
of your orchestrators whether there are

00:36:19,670 --> 00:36:24,079
sweet performers or even jazz bands and

00:36:21,980 --> 00:36:26,510
what you should really be aiming for is

00:36:24,079 --> 00:36:28,460
for an orchestra in the perfection of

00:36:26,510 --> 00:36:30,410
actually having a conductor that

00:36:28,460 --> 00:36:33,980
orchestrates everything for you in a

00:36:30,410 --> 00:36:34,510
magic fashion this is my talk thank you

00:36:33,980 --> 00:36:42,339
very much

00:36:34,510 --> 00:36:42,339

YouTube URL: https://www.youtube.com/watch?v=hi8dq8EH6yo


