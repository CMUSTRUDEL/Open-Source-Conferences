Title: Monorepo – The Zip way - Dan Yelovitch & Alon Becker
Publication date: 2020-01-13
Playlist: DevOpsDays Tel Aviv 2019
Description: 
	When i first Joined ZipRecruiter and learned that the company uses a monorepo, i thought “Wow thats weird, probably a legacy policy we can't get away from.” But soon I learnt that it is no mistake, and not only that, the company actually benefits from this. In this talk I will explain the reason we choose this implementation of git, the downsides and how we mitigated them, and the benefits that propel our company forward technologically
Captions: 
	00:00:00,440 --> 00:00:03,580
[Music]

00:00:04,819 --> 00:00:10,800
we are to site reliability engineers in

00:00:08,040 --> 00:00:15,360
Israel on a team of 16 site reliability

00:00:10,800 --> 00:00:16,740
engineers from the United States we work

00:00:15,360 --> 00:00:19,380
at a company called zip recruiter most

00:00:16,740 --> 00:00:22,710
of you might know who are who we are how

00:00:19,380 --> 00:00:24,720
many know who zip recruiter is how many

00:00:22,710 --> 00:00:30,599
know who zip recruiter is because

00:00:24,720 --> 00:00:32,369
they've been listening to podcasts yeah

00:00:30,599 --> 00:00:36,120
we tend to advertise a lot on podcasts

00:00:32,369 --> 00:00:37,920
in the United States our main our

00:00:36,120 --> 00:00:40,680
company's main business is in the United

00:00:37,920 --> 00:00:43,530
States and in Europe so that's probably

00:00:40,680 --> 00:00:47,100
why you haven't heard of us here this is

00:00:43,530 --> 00:00:50,160
Dan yella vich and you can see I'm

00:00:47,100 --> 00:00:53,600
eating a bomba the Israeli dem Novick

00:00:50,160 --> 00:00:58,350
I'm an American so I'm eating a doughnut

00:00:53,600 --> 00:01:01,980
so it's the ultimate warrior versus Hulk

00:00:58,350 --> 00:01:07,380
Hogan the poly repo versus the mono repo

00:01:01,980 --> 00:01:08,700
who is gonna win well actually I don't

00:01:07,380 --> 00:01:10,890
really want to talk about who's gonna

00:01:08,700 --> 00:01:13,439
win I don't think that you know it's a

00:01:10,890 --> 00:01:15,960
very religious fight this fight and

00:01:13,439 --> 00:01:17,700
that's actually not our purpose here in

00:01:15,960 --> 00:01:21,600
this talk what we are going to talk

00:01:17,700 --> 00:01:25,470
about is how we use a mono repo at super

00:01:21,600 --> 00:01:28,650
cruder and how we use the good things of

00:01:25,470 --> 00:01:32,909
a poly repo and put it in into our mono

00:01:28,650 --> 00:01:37,590
repo mono repo being one repository for

00:01:32,909 --> 00:01:41,909
all apps Pali repo being one app per

00:01:37,590 --> 00:01:44,850
repository so several years ago I joined

00:01:41,909 --> 00:01:47,880
as an SRE in zip recruiter and as a

00:01:44,850 --> 00:01:51,509
young hotshot essary we had full of air

00:01:47,880 --> 00:01:53,189
I immediately wanted to leave my mark so

00:01:51,509 --> 00:01:56,009
I was looking around to see where I

00:01:53,189 --> 00:01:57,659
could make the biggest impact and I

00:01:56,009 --> 00:02:00,149
started logging I thought maybe I could

00:01:57,659 --> 00:02:03,210
streamline the logging and then I

00:02:00,149 --> 00:02:04,740
realized no the logging already

00:02:03,210 --> 00:02:06,750
streamlined centralized

00:02:04,740 --> 00:02:09,750
and have a whole team dedicated just for

00:02:06,750 --> 00:02:11,760
that what about 12 factors everybody

00:02:09,750 --> 00:02:12,569
loves to effectors let let me help them

00:02:11,760 --> 00:02:15,330
implement it

00:02:12,569 --> 00:02:17,640
now supercoder already implemented 12

00:02:15,330 --> 00:02:18,780
factors what could I do what could I do

00:02:17,640 --> 00:02:23,819
to make a difference

00:02:18,780 --> 00:02:27,330
and when I saw it the mono repo it was

00:02:23,819 --> 00:02:29,370
old over engineered complex and didn't

00:02:27,330 --> 00:02:33,989
fit any of the passwords like micro

00:02:29,370 --> 00:02:36,180
service so I saw my mark a set a meeting

00:02:33,989 --> 00:02:38,850
with the powers that be and I lay down

00:02:36,180 --> 00:02:43,769
my proposal let's start splitting things

00:02:38,850 --> 00:02:45,720
off the mono repo let's be faster and it

00:02:43,769 --> 00:02:49,290
looked at me and said no we actually

00:02:45,720 --> 00:02:52,019
love the mono repo yes it is complex but

00:02:49,290 --> 00:02:54,510
this complexity propels us forward this

00:02:52,019 --> 00:02:57,480
complexity of the mono repo helps the

00:02:54,510 --> 00:03:00,299
pre-cooler scale and I was confused to

00:02:57,480 --> 00:03:02,130
say the least because mono repo helps

00:03:00,299 --> 00:03:05,280
the company scale sounds

00:03:02,130 --> 00:03:07,319
counterintuitive so I needed somebody to

00:03:05,280 --> 00:03:09,390
explain to me and they said in order to

00:03:07,319 --> 00:03:13,019
understand that first you have to know

00:03:09,390 --> 00:03:16,230
this story of zip recorder so a zip

00:03:13,019 --> 00:03:21,150
recruiter was founded a long long time

00:03:16,230 --> 00:03:23,220
ago in a galaxy far far away in 2010 by

00:03:21,150 --> 00:03:25,950
four founders who basically wanted to

00:03:23,220 --> 00:03:27,660
match quality candidates to employers

00:03:25,950 --> 00:03:31,140
basically they were an online job

00:03:27,660 --> 00:03:32,880
marketplace they could out iterate their

00:03:31,140 --> 00:03:35,820
competition because they were small and

00:03:32,880 --> 00:03:37,350
nimble and can move fast they could

00:03:35,820 --> 00:03:38,970
communicate the one with the other

00:03:37,350 --> 00:03:40,980
communication channels were very very

00:03:38,970 --> 00:03:43,350
clear and the reason is is everybody was

00:03:40,980 --> 00:03:45,720
sitting in the same room there was a

00:03:43,350 --> 00:03:48,420
sense of shared responsibility those

00:03:45,720 --> 00:03:51,570
those were basically our core values and

00:03:48,420 --> 00:03:58,260
that's what they wanted to keep at zip

00:03:51,570 --> 00:04:00,750
recruiter as most startups actually they

00:03:58,260 --> 00:04:02,579
were a monolithic app most startups

00:04:00,750 --> 00:04:05,370
start as a monolithic app and not a

00:04:02,579 --> 00:04:07,470
micro service a common misconception and

00:04:05,370 --> 00:04:09,840
the reason why they start started as a

00:04:07,470 --> 00:04:12,150
monolithic app I'd refer you to Martin

00:04:09,840 --> 00:04:17,130
Fowler's book Mon 11th book actually

00:04:12,150 --> 00:04:18,630
blog model is first and basically micro

00:04:17,130 --> 00:04:21,060
services need a lot of plumbing to get

00:04:18,630 --> 00:04:24,510
them to work and it's better to put your

00:04:21,060 --> 00:04:25,889
resources in your efforts when you're a

00:04:24,510 --> 00:04:27,960
small start-up

00:04:25,889 --> 00:04:31,590
- bringing business value as quickly as

00:04:27,960 --> 00:04:34,710
possible but as things get more complex

00:04:31,590 --> 00:04:37,680
in that monolithic application things

00:04:34,710 --> 00:04:41,219
slow down so we decided to split our

00:04:37,680 --> 00:04:43,289
apps or slowly split our apps from the

00:04:41,219 --> 00:04:45,180
monolithic application and then also

00:04:43,289 --> 00:04:48,419
split our apps from the monolithic

00:04:45,180 --> 00:04:50,909
repository anybody can guess what I'm

00:04:48,419 --> 00:04:58,080
trying to talk about here in terms of an

00:04:50,909 --> 00:05:02,250
application okay nevermind tried so we

00:04:58,080 --> 00:05:03,990
we manage our AWS infrastructure in we

00:05:02,250 --> 00:05:06,689
used to manage the AWS infrastructure in

00:05:03,990 --> 00:05:08,370
this fantastic fantastic way it's called

00:05:06,689 --> 00:05:12,360
the AWS console it's one of the best

00:05:08,370 --> 00:05:16,379
applications ever unfortunately that

00:05:12,360 --> 00:05:19,469
doesn't scale very well you know human

00:05:16,379 --> 00:05:21,469
error so what we decided is actually to

00:05:19,469 --> 00:05:25,080
move from manual configuration to

00:05:21,469 --> 00:05:29,759
terraform in order to manage terraform

00:05:25,080 --> 00:05:31,949
we decided let's put it in a another

00:05:29,759 --> 00:05:33,599
repository the reason is this is us as

00:05:31,949 --> 00:05:35,789
site reliability engineers wanted to put

00:05:33,599 --> 00:05:37,919
controls over terraform so that

00:05:35,789 --> 00:05:43,169
developers don't shoot themselves in the

00:05:37,919 --> 00:05:51,029
foot by the way this is the second hulk

00:05:43,169 --> 00:05:52,680
reference different type of hulk so we

00:05:51,029 --> 00:05:54,210
continued to grow two and a half years

00:05:52,680 --> 00:05:56,810
ago when I started at super cruder we

00:05:54,210 --> 00:05:59,370
were 200 developers and 500 employees

00:05:56,810 --> 00:06:03,270
all aspects of the business started to

00:05:59,370 --> 00:06:06,689
grow so we wanted to split up some more

00:06:03,270 --> 00:06:09,449
things we had our own internal

00:06:06,689 --> 00:06:11,490
configuration management tool fantastic

00:06:09,449 --> 00:06:13,430
we highly recommended to build your own

00:06:11,490 --> 00:06:16,969
configuration management tools yourself

00:06:13,430 --> 00:06:19,469
it's a really scalable way to do things

00:06:16,969 --> 00:06:20,759
but we realized you know that's we're

00:06:19,469 --> 00:06:25,770
not in that business really

00:06:20,759 --> 00:06:28,050
so let's adopt something that is out in

00:06:25,770 --> 00:06:33,719
the market and and works so we adopted

00:06:28,050 --> 00:06:35,699
salt and to manage salt and you know so

00:06:33,719 --> 00:06:38,279
that developers really don't shoot

00:06:35,699 --> 00:06:39,180
themselves in the foot we decided to put

00:06:38,279 --> 00:06:42,090
in another repository

00:06:39,180 --> 00:06:45,240
but controls over it like you know a

00:06:42,090 --> 00:06:48,300
site reliability engineer should do so

00:06:45,240 --> 00:06:50,400
and we Saudis asked herself yes we were

00:06:48,300 --> 00:06:52,440
growing but actually we're becoming less

00:06:50,400 --> 00:06:55,020
productive we were releasing less and

00:06:52,440 --> 00:06:59,070
less and the essary team actually became

00:06:55,020 --> 00:07:00,900
the ball neck so when we started the

00:06:59,070 --> 00:07:02,669
authority became the ball neck actually

00:07:00,900 --> 00:07:06,570
instead of developing the infrastructure

00:07:02,669 --> 00:07:09,090
we became the gatekeepers to it and we

00:07:06,570 --> 00:07:13,080
were just bogged down with all the tall

00:07:09,090 --> 00:07:14,960
around it so not only that but the

00:07:13,080 --> 00:07:18,870
problem actually grew worse as the

00:07:14,960 --> 00:07:21,180
company grew bigger because developers

00:07:18,870 --> 00:07:24,030
don't scale at the same rate as the s

00:07:21,180 --> 00:07:25,590
eries so what can we do to solve the

00:07:24,030 --> 00:07:28,139
problem how can we let the

00:07:25,590 --> 00:07:30,090
infrastructure team catch up maybe we

00:07:28,139 --> 00:07:32,220
should halt production for a while and

00:07:30,090 --> 00:07:35,460
let the infrastructure team actually

00:07:32,220 --> 00:07:37,680
catch up but no that's a bad idea at

00:07:35,460 --> 00:07:39,930
best it's a patch and it actually

00:07:37,680 --> 00:07:42,630
doesn't scale so we needed to actually

00:07:39,930 --> 00:07:45,810
solve the problem of how to scale the

00:07:42,630 --> 00:07:47,699
big order and then we understood but yes

00:07:45,810 --> 00:07:49,800
we actually scared that codebase

00:07:47,699 --> 00:07:52,590
we actually scared that technology but

00:07:49,800 --> 00:07:54,539
we lost a culture in the process and we

00:07:52,590 --> 00:07:58,500
needed a way to keep our culture at

00:07:54,539 --> 00:07:59,430
scale so today zip recruiter is scaling

00:07:58,500 --> 00:08:01,889
faster than ever

00:07:59,430 --> 00:08:05,030
we've over a thousand employees in three

00:08:01,889 --> 00:08:08,430
sites the u.s. the UK and Israel over

00:08:05,030 --> 00:08:10,229
350 developers in other 30 teams and we

00:08:08,430 --> 00:08:12,030
are deploying faster than ever because

00:08:10,229 --> 00:08:14,580
instead of weekly deployment we are

00:08:12,030 --> 00:08:16,680
doing multi deployments per day now the

00:08:14,580 --> 00:08:19,199
mono repo is not the solution for that

00:08:16,680 --> 00:08:21,300
but it's a very useful tool that can

00:08:19,199 --> 00:08:24,419
help us keep us culture and let us

00:08:21,300 --> 00:08:26,789
explain why first fing collaboration

00:08:24,419 --> 00:08:30,120
collaboration is easy in a mono repo

00:08:26,789 --> 00:08:32,820
because everything is in one place but

00:08:30,120 --> 00:08:35,430
how does that collaboration help us well

00:08:32,820 --> 00:08:37,829
zip recruiter as a company faces many

00:08:35,430 --> 00:08:39,690
issues every day and these issues change

00:08:37,829 --> 00:08:42,419
every day sometimes they grow bigger

00:08:39,690 --> 00:08:44,370
sometimes we get resolved our team

00:08:42,419 --> 00:08:47,790
structures needs to be able to reflect

00:08:44,370 --> 00:08:49,800
that so our teams can change can be

00:08:47,790 --> 00:08:52,529
split apart can be absorbed into other

00:08:49,800 --> 00:08:54,749
teams as the problem they are facing

00:08:52,529 --> 00:08:57,240
it is it to do that because everybody

00:08:54,749 --> 00:08:59,189
shares the same codebase but not only

00:08:57,240 --> 00:09:02,129
the company faces the issue also

00:08:59,189 --> 00:09:04,829
developers faces issue when we're trying

00:09:02,129 --> 00:09:06,959
out our development flow so we encourage

00:09:04,829 --> 00:09:09,600
all developers to meet once a week and

00:09:06,959 --> 00:09:11,910
discuss together between developers

00:09:09,600 --> 00:09:14,279
between different teams issues with desi

00:09:11,910 --> 00:09:16,589
and they try to resolve it together

00:09:14,279 --> 00:09:19,529
later on we'll discuss some of the tools

00:09:16,589 --> 00:09:23,040
that came out of these meetings but what

00:09:19,529 --> 00:09:25,019
about dependencies how many of you like

00:09:23,040 --> 00:09:26,870
to manage dependencies it's one of the

00:09:25,019 --> 00:09:29,550
my favorite things to do in the world

00:09:26,870 --> 00:09:32,430
dependencies suck and they're very hard

00:09:29,550 --> 00:09:34,019
to manage we have two different types of

00:09:32,430 --> 00:09:35,850
dependencies like all you guys do we

00:09:34,019 --> 00:09:38,490
have third-party dependencies and our

00:09:35,850 --> 00:09:41,249
internal dependencies for third-party

00:09:38,490 --> 00:09:45,889
dependencies we manage it much like most

00:09:41,249 --> 00:09:50,040
people do we use an artifact repository

00:09:45,889 --> 00:09:54,360
in our case we use artifactory for our

00:09:50,040 --> 00:09:56,639
java third-party libraries and the one

00:09:54,360 --> 00:10:02,579
thing though is we try to pin as little

00:09:56,639 --> 00:10:04,379
as possible one of the things that we

00:10:02,579 --> 00:10:08,639
always try to be we always try to be on

00:10:04,379 --> 00:10:10,740
latest with all our code so that's the

00:10:08,639 --> 00:10:13,439
external artifact repository but for our

00:10:10,740 --> 00:10:18,779
internal stuff we actually check in all

00:10:13,439 --> 00:10:20,730
our dependencies into our code base we

00:10:18,779 --> 00:10:22,649
believe in source dependencies over

00:10:20,730 --> 00:10:25,139
binary dependencies as much as possible

00:10:22,649 --> 00:10:28,050
because then we're always on latest

00:10:25,139 --> 00:10:32,819
we're always building latest this gives

00:10:28,050 --> 00:10:35,009
us an easier way to debug things because

00:10:32,819 --> 00:10:38,220
everything is right there in that one

00:10:35,009 --> 00:10:41,069
big repository not only your app all

00:10:38,220 --> 00:10:43,559
your dependencies as well and it's also

00:10:41,069 --> 00:10:47,220
it also makes the code a lot easier to

00:10:43,559 --> 00:10:50,579
audit so our monolithic repository is

00:10:47,220 --> 00:10:53,429
our source of truth it's our source of

00:10:50,579 --> 00:10:55,199
truth for a couple things so one of the

00:10:53,429 --> 00:10:57,480
things is is it's our source of truth

00:10:55,199 --> 00:11:00,179
for our applications but it's actually

00:10:57,480 --> 00:11:01,800
right now not like what I showed you a

00:11:00,179 --> 00:11:03,660
few slides ago it's also our source of

00:11:01,800 --> 00:11:04,170
truth in terms of our infrastructure as

00:11:03,660 --> 00:11:06,240
well

00:11:04,170 --> 00:11:10,290
everything can be traced back to

00:11:06,240 --> 00:11:14,810
single commit so we practice get ops and

00:11:10,290 --> 00:11:17,100
why is that good because everybody

00:11:14,810 --> 00:11:19,440
everybody can discuss what's happening

00:11:17,100 --> 00:11:21,899
in production by looking at productions

00:11:19,440 --> 00:11:25,320
commit that explains the whole entire

00:11:21,899 --> 00:11:27,750
infrastructure in a poly repo what you'd

00:11:25,320 --> 00:11:30,060
probably do is is every single

00:11:27,750 --> 00:11:33,810
application has its own commit because

00:11:30,060 --> 00:11:36,089
every single repository can be traced

00:11:33,810 --> 00:11:38,180
back to that to a commit and then you'd

00:11:36,089 --> 00:11:40,440
have to have some complex mapping to get

00:11:38,180 --> 00:11:42,870
to get any knowledge of what's actually

00:11:40,440 --> 00:11:45,990
happening in production we can always

00:11:42,870 --> 00:11:49,709
refer to that single commit makes things

00:11:45,990 --> 00:11:52,470
a lot more auditable as well with GDP

00:11:49,709 --> 00:11:56,760
are in the California consumer Privacy

00:11:52,470 --> 00:11:58,770
Act those are those are regulations that

00:11:56,760 --> 00:12:00,959
were right now well the GDP are we are

00:11:58,770 --> 00:12:03,320
we already did and California consumer

00:12:00,959 --> 00:12:06,120
Privacy Act we're right now implementing

00:12:03,320 --> 00:12:09,180
it makes it really easy for us to

00:12:06,120 --> 00:12:11,370
actually create a place where we can be

00:12:09,180 --> 00:12:12,870
audited and it makes the auditors happy

00:12:11,370 --> 00:12:19,620
because they have a single place to look

00:12:12,870 --> 00:12:21,959
at themselves one of the problems in a

00:12:19,620 --> 00:12:26,100
mono repo that you have a lot less in a

00:12:21,959 --> 00:12:30,450
Polly repo is the ability to actually

00:12:26,100 --> 00:12:34,770
have long-lived branches in a Polly repo

00:12:30,450 --> 00:12:36,120
as your application diverges as you

00:12:34,770 --> 00:12:38,190
create a feature branch and your

00:12:36,120 --> 00:12:40,860
application slowly diverges from your

00:12:38,190 --> 00:12:45,240
feature branch it isn't that difficult

00:12:40,860 --> 00:12:47,910
to merge things but in a mono repo when

00:12:45,240 --> 00:12:49,500
you diverge from master you're diverging

00:12:47,910 --> 00:12:51,360
from all your applications and all your

00:12:49,500 --> 00:12:58,140
infrastructure so the longer that you do

00:12:51,360 --> 00:13:01,200
that the harder the merge is so enter

00:12:58,140 --> 00:13:03,300
short live branches short live feature

00:13:01,200 --> 00:13:05,880
branches are great actually

00:13:03,300 --> 00:13:09,560
they're not that bad because guess what

00:13:05,880 --> 00:13:09,560
we can deploy more often as well

00:13:11,750 --> 00:13:19,260
so another thing as site reliability

00:13:14,460 --> 00:13:20,340
engineers we own our production well we

00:13:19,260 --> 00:13:21,450
don't actually own our production

00:13:20,340 --> 00:13:23,070
environment we are subject matter

00:13:21,450 --> 00:13:25,320
experts on their production environment

00:13:23,070 --> 00:13:28,140
we actually don't own it we don't want

00:13:25,320 --> 00:13:32,280
to own production we want all our

00:13:28,140 --> 00:13:34,170
developers to own production actually

00:13:32,280 --> 00:13:35,970
more specifically all our developers

00:13:34,170 --> 00:13:37,590
that are on call own production because

00:13:35,970 --> 00:13:39,900
those who are not on call

00:13:37,590 --> 00:13:42,510
do not get paged and do not have to deal

00:13:39,900 --> 00:13:45,840
with issues within production but that's

00:13:42,510 --> 00:13:48,420
actually most of our developers we have

00:13:45,840 --> 00:13:50,550
centralized logging we have team-based

00:13:48,420 --> 00:13:52,980
monitoring that everybody can look at

00:13:50,550 --> 00:13:54,810
actually and we have an active slack

00:13:52,980 --> 00:13:58,290
channel for any production incidents

00:13:54,810 --> 00:14:01,940
that we have everybody gets woken up by

00:13:58,290 --> 00:14:03,570
by by pager duty whether it be an

00:14:01,940 --> 00:14:06,030
application team if their application

00:14:03,570 --> 00:14:07,860
breaks that application team gets woken

00:14:06,030 --> 00:14:11,130
up by pager duty or the person on call

00:14:07,860 --> 00:14:15,120
for that and when infrastructure breaks

00:14:11,130 --> 00:14:17,100
we get we get called for that actually

00:14:15,120 --> 00:14:19,560
with one caveat one of the advantages of

00:14:17,100 --> 00:14:23,940
working in Israel and having an American

00:14:19,560 --> 00:14:25,890
team is that we follow the Sun so we

00:14:23,940 --> 00:14:28,200
don't only share responsibility for

00:14:25,890 --> 00:14:30,930
production we also share responsibility

00:14:28,200 --> 00:14:33,510
for the codebase and let me give you an

00:14:30,930 --> 00:14:35,910
example for that let's say that the SAE

00:14:33,510 --> 00:14:38,730
team wants to upgrade its tools to use

00:14:35,910 --> 00:14:39,440
the latest goal and code base sounds

00:14:38,730 --> 00:14:42,060
simple right

00:14:39,440 --> 00:14:45,750
we update the code base we have daily

00:14:42,060 --> 00:14:48,210
tools we updated tests easy-peasy but in

00:14:45,750 --> 00:14:50,520
a mono repo world this is just become a

00:14:48,210 --> 00:14:53,850
bit harder because I didn't just upgrade

00:14:50,520 --> 00:14:56,430
my codebase I dated all the company's

00:14:53,850 --> 00:14:58,530
codebase and I updated everybody's tests

00:14:56,430 --> 00:15:01,680
I need to break and I broke everybody's

00:14:58,530 --> 00:15:05,100
tools Wow what a pain I didn't want to

00:15:01,680 --> 00:15:07,380
do that and yes it is a pain but this

00:15:05,100 --> 00:15:09,600
pain is good for us because it forces us

00:15:07,380 --> 00:15:13,050
to think outside of our components fear

00:15:09,600 --> 00:15:15,360
yes we have to be aware of other teams

00:15:13,050 --> 00:15:16,800
that use our code base and we have to

00:15:15,360 --> 00:15:19,650
take into consideration their

00:15:16,800 --> 00:15:21,180
requirements not only that we also have

00:15:19,650 --> 00:15:21,839
to be very communicative about it

00:15:21,180 --> 00:15:23,550
because

00:15:21,839 --> 00:15:25,620
you don't just break somebody tools

00:15:23,550 --> 00:15:28,139
without telling them we also have to be

00:15:25,620 --> 00:15:29,730
good listeners because people announce

00:15:28,139 --> 00:15:32,069
changes and if you don't listen our

00:15:29,730 --> 00:15:35,660
tools will break without us knowing so

00:15:32,069 --> 00:15:38,610
let's talk a bit about things breaking

00:15:35,660 --> 00:15:41,100
in as in every company we have

00:15:38,610 --> 00:15:43,560
production in cents all the time and as

00:15:41,100 --> 00:15:45,420
your product becomes more complex so do

00:15:43,560 --> 00:15:47,129
the production incidents and you don't

00:15:45,420 --> 00:15:49,769
only have to solve the finger page.you

00:15:47,129 --> 00:15:53,149
you also have to find the root cause of

00:15:49,769 --> 00:15:55,949
what actually broke and fix that well as

00:15:53,149 --> 00:15:58,290
in a mono leaper world it's easier to

00:15:55,949 --> 00:16:00,899
investigate these issues because well

00:15:58,290 --> 00:16:03,029
transferring it's a mono repo all the

00:16:00,899 --> 00:16:05,730
issues happen in one place it's easy to

00:16:03,029 --> 00:16:08,009
look for them not only that we encourage

00:16:05,730 --> 00:16:12,089
the developers to be as descriptive as

00:16:08,009 --> 00:16:14,339
possible in their a git commit so not

00:16:12,089 --> 00:16:17,279
only do I know what broke and who broke

00:16:14,339 --> 00:16:20,279
it also know why he broke it and I can

00:16:17,279 --> 00:16:22,980
help we bug the issue faster and last

00:16:20,279 --> 00:16:26,129
but not least because we change our code

00:16:22,980 --> 00:16:28,559
all the time if something broke today it

00:16:26,129 --> 00:16:30,660
probably changed yesterday so I don't

00:16:28,559 --> 00:16:33,019
have to go through Mars of histories of

00:16:30,660 --> 00:16:35,970
git commit to know what exactly change

00:16:33,019 --> 00:16:37,620
this is good for us but because the

00:16:35,970 --> 00:16:39,689
production results a result more quickly

00:16:37,620 --> 00:16:41,850
and since the production isn't are

00:16:39,689 --> 00:16:43,610
resolved more quickly they have less of

00:16:41,850 --> 00:16:46,470
an impact on our production environment

00:16:43,610 --> 00:16:49,199
why is that so important for us because

00:16:46,470 --> 00:16:52,519
in supercoder we have a KPI to measure

00:16:49,199 --> 00:16:55,230
success called mean time - I detested

00:16:52,519 --> 00:16:56,309
basically how long does it take for an

00:16:55,230 --> 00:16:58,470
ID to be far up

00:16:56,309 --> 00:17:01,019
I've seen it can actually be tested on

00:16:58,470 --> 00:17:03,509
the server we want the process to be as

00:17:01,019 --> 00:17:05,850
quick as possible so because of that we

00:17:03,509 --> 00:17:08,549
gave as much control as we can to the

00:17:05,850 --> 00:17:11,010
developers themselves controls over

00:17:08,549 --> 00:17:13,770
infrastructure like terraform let's say

00:17:11,010 --> 00:17:16,230
that the developer wants a new s3 bucket

00:17:13,770 --> 00:17:19,110
does he have to open a ticket for the

00:17:16,230 --> 00:17:21,870
essary to create it for him now that's

00:17:19,110 --> 00:17:23,100
making us the bottleneck we gave the

00:17:21,870 --> 00:17:25,620
turf form actually with develop

00:17:23,100 --> 00:17:27,510
developers and we'll tell them enjoy run

00:17:25,620 --> 00:17:29,480
it this is your bucket you own it

00:17:27,510 --> 00:17:32,429
what about deploying to production

00:17:29,480 --> 00:17:33,899
should the SRS be the production

00:17:32,429 --> 00:17:35,160
engineers and play everything to

00:17:33,899 --> 00:17:37,680
production and

00:17:35,160 --> 00:17:40,530
again now we have an automatic csv

00:17:37,680 --> 00:17:43,590
pipeline which is triggered by the git

00:17:40,530 --> 00:17:46,020
commit so any developer can push to the

00:17:43,590 --> 00:17:49,020
branch and he'll be posed there and he

00:17:46,020 --> 00:17:51,810
deploys his Apple okay that sounds a bit

00:17:49,020 --> 00:17:53,670
risky and yes it is risky because

00:17:51,810 --> 00:17:56,190
developers have a lot more power to

00:17:53,670 --> 00:17:57,660
break the their production but this is a

00:17:56,190 --> 00:18:00,390
risk we are willing to take because

00:17:57,660 --> 00:18:03,210
first thing we minimize the impacts by

00:18:00,390 --> 00:18:05,310
having faster read and by having faster

00:18:03,210 --> 00:18:08,310
production instant which are resolved

00:18:05,310 --> 00:18:10,530
more quickly second reduce the blast

00:18:08,310 --> 00:18:15,450
radius of these mistakes by having a

00:18:10,530 --> 00:18:17,640
very strict directory structure anybody

00:18:15,450 --> 00:18:27,600
practice this type of folding technique

00:18:17,640 --> 00:18:29,640
I do too yeah Marie Kondo great so what

00:18:27,600 --> 00:18:31,860
actually does this have to do with mono

00:18:29,640 --> 00:18:35,070
repo versus poly repo well in a poly

00:18:31,860 --> 00:18:37,400
repo it actually is fairly easy to be

00:18:35,070 --> 00:18:42,270
organized because all you're doing is

00:18:37,400 --> 00:18:46,380
based around your own application in a

00:18:42,270 --> 00:18:50,190
mono repo you can have a disorganized

00:18:46,380 --> 00:18:53,190
mess really really easily so how do you

00:18:50,190 --> 00:18:57,420
prevent that well you put structure on

00:18:53,190 --> 00:18:58,880
it you know you put structure we do it

00:18:57,420 --> 00:19:03,150
with convention over configuration

00:18:58,880 --> 00:19:06,150
giving us the ability to create tooling

00:19:03,150 --> 00:19:10,050
such as github slin ters and and other

00:19:06,150 --> 00:19:13,050
tooling to enforce policies why is that

00:19:10,050 --> 00:19:14,970
good well let me show you exactly our

00:19:13,050 --> 00:19:17,580
directory structure or actually just a

00:19:14,970 --> 00:19:20,780
part of it okay so what you see at the

00:19:17,580 --> 00:19:25,110
top level here can you all see this

00:19:20,780 --> 00:19:27,390
kinda I'll talk you through it at the

00:19:25,110 --> 00:19:31,520
top level there's this directory called

00:19:27,390 --> 00:19:35,550
CI CD the directory called CI CD in our

00:19:31,520 --> 00:19:40,370
terminology is called a theme a theme

00:19:35,550 --> 00:19:42,630
not a team teams can own one theme

00:19:40,370 --> 00:19:44,490
multiple teams can own one theme and

00:19:42,630 --> 00:19:48,060
that actually can be dynamic and move

00:19:44,490 --> 00:19:48,909
between teams as well underneath that is

00:19:48,060 --> 00:19:51,879
our actual

00:19:48,909 --> 00:19:55,320
location this application here under our

00:19:51,879 --> 00:19:59,139
CI CD directory is called the professor

00:19:55,320 --> 00:20:02,080
under the professor we have all that the

00:19:59,139 --> 00:20:05,559
application needs in order to run we

00:20:02,080 --> 00:20:08,679
have under config our config directory

00:20:05,559 --> 00:20:11,379
is used to basically manage any

00:20:08,679 --> 00:20:15,039
configuration for any environment that

00:20:11,379 --> 00:20:18,279
we have underneath that we have

00:20:15,039 --> 00:20:21,279
infrastructure so anything any AWS

00:20:18,279 --> 00:20:23,409
resources that we need that's can be

00:20:21,279 --> 00:20:25,690
managed under terraform notice terraform

00:20:23,409 --> 00:20:27,190
was outside of our repository we moved

00:20:25,690 --> 00:20:29,559
it right back in and we actually moved

00:20:27,190 --> 00:20:32,489
it in to a place that every single team

00:20:29,559 --> 00:20:36,759
can own themselves not the sres

00:20:32,489 --> 00:20:39,669
underneath that you'll see manifests we

00:20:36,759 --> 00:20:42,039
moved from salt configuration managed is

00:20:39,669 --> 00:20:44,529
great it's a lot easier to manage it

00:20:42,039 --> 00:20:48,249
within kubernetes than it is on ec2

00:20:44,529 --> 00:20:52,409
instances so under manifests is how to

00:20:48,249 --> 00:20:55,119
run our workloads in kubernetes and

00:20:52,409 --> 00:20:58,239
underneath that we have a whole bunch of

00:20:55,119 --> 00:21:00,369
other files one docker file we're

00:20:58,239 --> 00:21:03,309
building an application for kubernetes

00:21:00,369 --> 00:21:05,799
it's gonna be dock rised and notice the

00:21:03,309 --> 00:21:09,070
docker file depths file what it has

00:21:05,799 --> 00:21:15,580
underneath it is a list of a whole bunch

00:21:09,070 --> 00:21:17,499
of paths i'll discuss that later so

00:21:15,580 --> 00:21:20,559
let's talk about the elephant in the

00:21:17,499 --> 00:21:22,809
room the security issue yes we have

00:21:20,559 --> 00:21:24,849
sensitive code in our mono repo that

00:21:22,809 --> 00:21:27,309
sensitive code is mostly financial and

00:21:24,849 --> 00:21:29,979
security code and all developers can

00:21:27,309 --> 00:21:32,590
read it cool right yeah everybody can

00:21:29,979 --> 00:21:35,979
read it but all developers can actually

00:21:32,590 --> 00:21:37,599
also edit it and that's not so cool

00:21:35,979 --> 00:21:40,229
right we want to protect our sensitive

00:21:37,599 --> 00:21:43,269
code so what can we do to protect it I

00:21:40,229 --> 00:21:45,220
have an idea how about we take all these

00:21:43,269 --> 00:21:49,539
sensitive code put it in a different

00:21:45,220 --> 00:21:51,940
repo and put controls over that no we

00:21:49,539 --> 00:21:53,619
tried that it didn't work well we need

00:21:51,940 --> 00:21:55,929
something else something with good for

00:21:53,619 --> 00:21:57,909
us how about using our directory

00:21:55,929 --> 00:22:00,249
structure how about next to each

00:21:57,909 --> 00:22:02,650
sensitive code stack we put an owner

00:22:00,249 --> 00:22:05,200
file then owner file will list

00:22:02,650 --> 00:22:08,020
the developers with can change the code

00:22:05,200 --> 00:22:10,090
or approve changes to it sounds cool

00:22:08,020 --> 00:22:11,980
right so sounds correct how do we

00:22:10,090 --> 00:22:14,910
enforce it we're gonna talk a bit in a

00:22:11,980 --> 00:22:19,090
second first we have another problem and

00:22:14,910 --> 00:22:21,610
that's publishing our key branches yes

00:22:19,090 --> 00:22:22,930
I'm gonna use these gifts like only once

00:22:21,610 --> 00:22:26,650
because I was told it was very

00:22:22,930 --> 00:22:28,900
distracting so yes we want to publish

00:22:26,650 --> 00:22:31,450
our branches to them to a mono repo how

00:22:28,900 --> 00:22:35,620
do we do that well first thing in zip

00:22:31,450 --> 00:22:38,170
recorder in zip recorder we want to have

00:22:35,620 --> 00:22:41,470
a linear history so in order to do that

00:22:38,170 --> 00:22:43,600
we do a rebase right what does that do

00:22:41,470 --> 00:22:46,510
when actually creates a race condition

00:22:43,600 --> 00:22:49,210
between us and the other developers why

00:22:46,510 --> 00:22:50,920
because in order to do the rebase I have

00:22:49,210 --> 00:22:53,980
to be the last one to do it to do the

00:22:50,920 --> 00:22:58,150
push now it's annoying with a hundred

00:22:53,980 --> 00:23:00,670
developers it's very very tough with 350

00:22:58,150 --> 00:23:03,910
with developers imagine doing that over

00:23:00,670 --> 00:23:06,610
the VPN yeah you can win that race right

00:23:03,910 --> 00:23:08,920
it got so bad for us at some point of

00:23:06,610 --> 00:23:10,990
time let me actually whenever I work

00:23:08,920 --> 00:23:13,330
from home I didn't even try to publish

00:23:10,990 --> 00:23:15,610
my branch I just pushed it to the origin

00:23:13,330 --> 00:23:17,740
and send a slack message to a team I

00:23:15,610 --> 00:23:19,570
said hey please publish my branch

00:23:17,740 --> 00:23:22,000
whenever you want I can do it from home

00:23:19,570 --> 00:23:23,970
so we needed to solve this which

00:23:22,000 --> 00:23:26,560
actually became worse as we scaled up

00:23:23,970 --> 00:23:28,390
well for the two in order to solve that

00:23:26,560 --> 00:23:30,490
we created a tool called green line and

00:23:28,390 --> 00:23:33,100
we saw the effects of green light right

00:23:30,490 --> 00:23:36,790
away because before these were our

00:23:33,100 --> 00:23:37,690
instructions to publish our branch now

00:23:36,790 --> 00:23:40,390
that's bad right

00:23:37,690 --> 00:23:42,040
like imagine doing it several times a

00:23:40,390 --> 00:23:44,440
day not so much fun

00:23:42,040 --> 00:23:48,820
after green light these became our

00:23:44,440 --> 00:23:51,070
instructions simpler right nice so how

00:23:48,820 --> 00:23:55,450
does green light do this magic well

00:23:51,070 --> 00:23:57,760
green light is basically a branch all he

00:23:55,450 --> 00:24:00,040
does is sit somewhere on a server in our

00:23:57,760 --> 00:24:02,740
infrastructure wait for a magic quest to

00:24:00,040 --> 00:24:05,140
happen when it does it pulls in the

00:24:02,740 --> 00:24:08,170
requested branch replaces it to master

00:24:05,140 --> 00:24:10,660
and pushes it doesn't sound bad complex

00:24:08,170 --> 00:24:13,240
right really easy it also has another

00:24:10,660 --> 00:24:15,299
feature if the requested branch has a

00:24:13,240 --> 00:24:17,429
commit but effect

00:24:15,299 --> 00:24:21,119
s-code stack with an oenophile it it

00:24:17,429 --> 00:24:23,509
will pass send a message via slack to

00:24:21,119 --> 00:24:27,119
the owners and as for their approval

00:24:23,509 --> 00:24:30,269
nice we already got security and code

00:24:27,119 --> 00:24:32,909
review lovely what about the race

00:24:30,269 --> 00:24:35,399
condition the race condition is also so

00:24:32,909 --> 00:24:37,710
because now my pushes happen

00:24:35,399 --> 00:24:39,570
asynchronously we don't happen on my

00:24:37,710 --> 00:24:41,820
time I don't have to worry about the

00:24:39,570 --> 00:24:44,519
race green light does it for me and it

00:24:41,820 --> 00:24:47,129
does it whenever it wants basically I do

00:24:44,519 --> 00:24:49,049
the push to the green light to quest go

00:24:47,129 --> 00:24:51,119
make myself coffee and by the time I get

00:24:49,049 --> 00:24:53,190
back it's already there

00:24:51,119 --> 00:24:55,440
how lovely is that and you know the

00:24:53,190 --> 00:24:57,450
coolest thing about green light although

00:24:55,440 --> 00:25:00,179
it's maintained by the SAE team it

00:24:57,450 --> 00:25:02,279
wasn't created by us you remember before

00:25:00,179 --> 00:25:04,950
I was talking about days where

00:25:02,279 --> 00:25:07,590
developers can meet a cross team and

00:25:04,950 --> 00:25:09,389
discuss issue that they are facing this

00:25:07,590 --> 00:25:12,149
tool is the brainchild of these

00:25:09,389 --> 00:25:16,710
developers so let's talk a bit about

00:25:12,149 --> 00:25:19,259
build and deployment our repo size is 2

00:25:16,710 --> 00:25:25,679
gigabytes that takes 40 seconds to

00:25:19,259 --> 00:25:31,830
download the number of builds are 691 x

00:25:25,679 --> 00:25:34,889
3 y x 3 anybody good good

00:25:31,830 --> 00:25:38,580
you got it immediately shows that you

00:25:34,889 --> 00:25:40,080
guys work which is which is good so we

00:25:38,580 --> 00:25:47,489
have 3 environments we have devastate

00:25:40,080 --> 00:25:51,840
and prod and so that's great 2 gigabytes

00:25:47,489 --> 00:25:55,019
we can easily build one one build very

00:25:51,840 --> 00:25:57,509
easily but what if you have 691 builds x

00:25:55,019 --> 00:26:01,529
3 you know that becomes incredibly

00:25:57,509 --> 00:26:01,799
resource intensive so how did we solve

00:26:01,529 --> 00:26:04,049
that

00:26:01,799 --> 00:26:10,409
well we solved it through some caching

00:26:04,049 --> 00:26:12,029
and through some cake as well so let's

00:26:10,409 --> 00:26:13,820
talk a little bit about caching there's

00:26:12,029 --> 00:26:17,149
a bunch of different ways to do caching

00:26:13,820 --> 00:26:20,970
let's start on the docker side of things

00:26:17,149 --> 00:26:24,790
we cast via base images we have a base

00:26:20,970 --> 00:26:28,990
image for our operating systems

00:26:24,790 --> 00:26:31,780
we have on top of that a base image for

00:26:28,990 --> 00:26:35,410
any language that we develop on we

00:26:31,780 --> 00:26:42,910
develop believe it or not in Perl we

00:26:35,410 --> 00:26:46,030
develop in Python and go and in Java in

00:26:42,910 --> 00:26:49,230
addition to that so on top of that we

00:26:46,030 --> 00:26:51,220
have multistage builds as well and

00:26:49,230 --> 00:26:55,840
multistage builds basically do some

00:26:51,220 --> 00:26:57,190
caching actually before that the docker

00:26:55,840 --> 00:26:59,679
file itself has some caching

00:26:57,190 --> 00:27:02,440
capabilities as well this fantastic

00:26:59,679 --> 00:27:03,840
layering component called anybody know

00:27:02,440 --> 00:27:08,200
what the layering components called

00:27:03,840 --> 00:27:10,210
layers right you came up with a really

00:27:08,200 --> 00:27:12,190
good name for it and then on top of

00:27:10,210 --> 00:27:15,700
those layers we use multistage builds

00:27:12,190 --> 00:27:17,679
multistage builds are basically a

00:27:15,700 --> 00:27:22,059
pipeline of builds within one docker

00:27:17,679 --> 00:27:24,190
file so you have a image that is getting

00:27:22,059 --> 00:27:26,740
created by one one bit of the docker

00:27:24,190 --> 00:27:29,290
file and then it takes then the next

00:27:26,740 --> 00:27:31,300
part of the docker file grabs the

00:27:29,290 --> 00:27:34,059
artifact of that first image and onwards

00:27:31,300 --> 00:27:37,630
and onwards and that also uses layers as

00:27:34,059 --> 00:27:39,190
well and now on me build side of things

00:27:37,630 --> 00:27:41,890
on the actual build server side of

00:27:39,190 --> 00:27:43,890
things on our we use Jenkins on our

00:27:41,890 --> 00:27:47,860
Jenkins agents we have a bear repository

00:27:43,890 --> 00:27:50,559
that syncs up with our main git

00:27:47,860 --> 00:27:54,429
repository on on each one of these

00:27:50,559 --> 00:27:57,520
agents in order to actually cache cache

00:27:54,429 --> 00:27:59,320
that two gigabytes every single time as

00:27:57,520 --> 00:28:01,510
well and so that happens in a sinkers

00:27:59,320 --> 00:28:04,150
asynchronously as well in addition to

00:28:01,510 --> 00:28:16,870
that we have some tooling and you know

00:28:04,150 --> 00:28:19,510
anybody know what stevedore is no not

00:28:16,870 --> 00:28:21,340
the answer it would great but it's

00:28:19,510 --> 00:28:23,500
actually an internal tools tool of ours

00:28:21,340 --> 00:28:26,490
I'm I'm thinking of the terminology

00:28:23,500 --> 00:28:26,490
stevedore

00:28:28,740 --> 00:28:33,549
yes it's actually by the way I just

00:28:31,330 --> 00:28:36,040
found out a couple days ago that it's

00:28:33,549 --> 00:28:37,900
actually a synonym for docker because

00:28:36,040 --> 00:28:39,580
it's a say docker is the same thing in

00:28:37,900 --> 00:28:40,480
in the end of things which is kind of

00:28:39,580 --> 00:28:42,730
cool

00:28:40,480 --> 00:28:46,299
so stevedore is our Swiss Army knife of

00:28:42,730 --> 00:28:49,210
build tools it manages our dependencies

00:28:46,299 --> 00:28:52,390
remember that docker file depth file

00:28:49,210 --> 00:28:54,450
that I showed you earlier that those

00:28:52,390 --> 00:28:58,360
paths in the docker file depths are

00:28:54,450 --> 00:28:59,530
basically all the paths of the dependent

00:28:58,360 --> 00:29:01,559
libraries that you need in your

00:28:59,530 --> 00:29:05,679
application so the way that docker works

00:29:01,559 --> 00:29:08,350
as many of you know docker when you

00:29:05,679 --> 00:29:10,630
build something you build from one

00:29:08,350 --> 00:29:13,179
location all the way down you can't

00:29:10,630 --> 00:29:15,160
actually build a parent of of your

00:29:13,179 --> 00:29:19,360
directory that you're in in while

00:29:15,160 --> 00:29:22,120
running it so stevedore the first thing

00:29:19,360 --> 00:29:23,799
that does is it reads the docker file

00:29:22,120 --> 00:29:26,230
deps file for any dependencies that it

00:29:23,799 --> 00:29:28,630
has because guess what all our

00:29:26,230 --> 00:29:30,669
dependencies are in source so all our

00:29:28,630 --> 00:29:33,820
libraries are in source as well and it

00:29:30,669 --> 00:29:35,080
basically creates a transitive for

00:29:33,820 --> 00:29:36,990
anything for the dependencies and then

00:29:35,080 --> 00:29:40,210
the transitive dependencies as well

00:29:36,990 --> 00:29:42,880
creates a graph or whatever it might be

00:29:40,210 --> 00:29:45,640
and sticks a docker ignore and

00:29:42,880 --> 00:29:49,090
everything that's not within that okay

00:29:45,640 --> 00:29:51,669
why is that because if you build at the

00:29:49,090 --> 00:29:53,559
top level it's gonna take a long time

00:29:51,669 --> 00:29:55,929
just to scan all the files that you have

00:29:53,559 --> 00:29:57,460
there so it saves a lot of time there

00:29:55,929 --> 00:29:59,200
but it also does another thing you're

00:29:57,460 --> 00:30:02,290
only building what you actually want to

00:29:59,200 --> 00:30:06,190
build so you if you do a docker in a

00:30:02,290 --> 00:30:07,900
docker file a copy dot dot you're only

00:30:06,190 --> 00:30:10,330
copying what you've actually defined

00:30:07,900 --> 00:30:13,299
within your docker file depths so

00:30:10,330 --> 00:30:14,950
another thing that we have is during our

00:30:13,299 --> 00:30:18,130
build time you know we have another tool

00:30:14,950 --> 00:30:20,830
called Jenkins auto build very original

00:30:18,130 --> 00:30:23,140
name stevedores a lot more of an

00:30:20,830 --> 00:30:25,090
original name I can't it's pretty much

00:30:23,140 --> 00:30:28,179
the only tool that has a non original

00:30:25,090 --> 00:30:32,230
name in it so the Jenkins auto build

00:30:28,179 --> 00:30:35,200
surprisingly does builds and what it

00:30:32,230 --> 00:30:39,310
does it called stevedore match stevedore

00:30:35,200 --> 00:30:42,190
match uses basically a git commit range

00:30:39,310 --> 00:30:44,020
and finds all the apps that are needed

00:30:42,190 --> 00:30:47,350
to build based on the commit that that

00:30:44,020 --> 00:30:52,090
that happened and that is done via the

00:30:47,350 --> 00:30:54,130
dockerfile depths okay

00:30:52,090 --> 00:30:56,680
we talked a lot about our internal tools

00:30:54,130 --> 00:30:58,300
but what about third-party tools they

00:30:56,680 --> 00:31:00,220
are great right everybody loves them

00:30:58,300 --> 00:31:01,960
especially if you're a startup

00:31:00,220 --> 00:31:04,540
if you're a startup third-party tools

00:31:01,960 --> 00:31:08,140
are like magic we come and solve the

00:31:04,540 --> 00:31:10,630
issue but like Rumpelstiltskin or was

00:31:08,140 --> 00:31:12,730
the good see as a saying all magic comes

00:31:10,630 --> 00:31:15,940
at a price and so do these third-party

00:31:12,730 --> 00:31:17,830
tools and what is the price for them we

00:31:15,940 --> 00:31:19,900
have to remember that they were created

00:31:17,830 --> 00:31:22,900
with different assumptions than ours so

00:31:19,900 --> 00:31:25,480
when taking these third-party tools we

00:31:22,900 --> 00:31:28,660
have to ask ourselves will they fit our

00:31:25,480 --> 00:31:31,570
infrastructure will they scale we've our

00:31:28,660 --> 00:31:33,550
infrastructure yes we don't only have to

00:31:31,570 --> 00:31:36,280
consider the outcome we also have to

00:31:33,550 --> 00:31:39,100
consider how how much pain it takes to

00:31:36,280 --> 00:31:40,320
grows now I'm not saying do all your own

00:31:39,100 --> 00:31:43,000
tools yourself

00:31:40,320 --> 00:31:44,950
there is a lot of room for tools that

00:31:43,000 --> 00:31:47,380
are out there and open source and we can

00:31:44,950 --> 00:31:50,050
use them but look for instance on the

00:31:47,380 --> 00:31:53,110
story of green light as I said green

00:31:50,050 --> 00:31:54,220
light is a branch merging tool this is

00:31:53,110 --> 00:31:56,230
not a new problem

00:31:54,220 --> 00:31:58,630
another unique problem - zip recruiter a

00:31:56,230 --> 00:32:00,850
lot of companies face this and in some

00:31:58,630 --> 00:32:04,570
of them even open source the tool why

00:32:00,850 --> 00:32:06,910
not use theirs well basically we wanted

00:32:04,570 --> 00:32:08,800
something that fits our needs something

00:32:06,910 --> 00:32:11,560
which uses our directory structure and

00:32:08,800 --> 00:32:14,080
enforces our owner file where is the

00:32:11,560 --> 00:32:18,250
room for football for party and internal

00:32:14,080 --> 00:32:20,380
tools if you look at our CI CD flow it's

00:32:18,250 --> 00:32:22,870
in the next slide you can see it's a

00:32:20,380 --> 00:32:25,570
tapestry of both third party tools and

00:32:22,870 --> 00:32:26,800
our internal tools third party tools

00:32:25,570 --> 00:32:29,470
like Jenkins

00:32:26,800 --> 00:32:32,050
everybody loves Jenkins right but we

00:32:29,470 --> 00:32:33,190
wanted Jenkins to actually expand on our

00:32:32,050 --> 00:32:36,100
manifest file

00:32:33,190 --> 00:32:37,590
so we attached it an internal tool

00:32:36,100 --> 00:32:41,710
called epoxy

00:32:37,590 --> 00:32:45,790
what about ECR we are an awl shop and we

00:32:41,710 --> 00:32:47,980
love using ECR to store our images but

00:32:45,790 --> 00:32:51,040
we wanted the ability to upload images

00:32:47,980 --> 00:32:52,770
to only one ECR and from there have it

00:32:51,040 --> 00:32:55,080
synced to all the relevant

00:32:52,770 --> 00:32:58,170
counts so for that we created a tool

00:32:55,080 --> 00:33:00,120
called easier thing I think what I'm

00:32:58,170 --> 00:33:02,040
saying here and when when considering

00:33:00,120 --> 00:33:04,230
third-party tools or internal tools

00:33:02,040 --> 00:33:06,600
always have you always have to think

00:33:04,230 --> 00:33:12,750
what will make the biggest impact with

00:33:06,600 --> 00:33:14,460
the least amount of effort so we are not

00:33:12,750 --> 00:33:15,660
only consumers of open source we create

00:33:14,460 --> 00:33:20,430
some open source ourselves

00:33:15,660 --> 00:33:23,280
as well open source doesn't really fit

00:33:20,430 --> 00:33:24,990
well with the mono repo it doesn't fit

00:33:23,280 --> 00:33:26,910
in well with the mono repo because let's

00:33:24,990 --> 00:33:29,760
check in our open source into our mana

00:33:26,910 --> 00:33:31,530
monolithic repository and then expose it

00:33:29,760 --> 00:33:33,000
actually to the rest of the world okay

00:33:31,530 --> 00:33:34,560
guess what we just exposed our whole

00:33:33,000 --> 00:33:40,320
entire mono repo to the whole entire

00:33:34,560 --> 00:33:44,820
world not a very good thing so what we

00:33:40,320 --> 00:33:47,880
did is we have an external repository

00:33:44,820 --> 00:33:52,800
that actually external repositories that

00:33:47,880 --> 00:33:55,580
manage all our open source the problem

00:33:52,800 --> 00:33:59,460
is is that that doesn't fit our whole

00:33:55,580 --> 00:34:01,410
mono repo approach does it so one of the

00:33:59,460 --> 00:34:03,150
things is is we don't have an answer yet

00:34:01,410 --> 00:34:07,110
for it but what we're probably gonna do

00:34:03,150 --> 00:34:09,140
is at one point when the pain is when

00:34:07,110 --> 00:34:11,940
the pain is there we're gonna actually

00:34:09,140 --> 00:34:17,159
figure out a way how to sync from our

00:34:11,940 --> 00:34:21,830
mono repo some applications to a to our

00:34:17,159 --> 00:34:26,060
poly repos that hold our open source so

00:34:21,830 --> 00:34:29,159
mono repos are great for us we love them

00:34:26,060 --> 00:34:32,399
we love it actually not them because

00:34:29,159 --> 00:34:34,679
it's a singular but we don't use them

00:34:32,399 --> 00:34:36,480
everywhere actually within our within

00:34:34,679 --> 00:34:38,130
our organization if we don't use them

00:34:36,480 --> 00:34:43,440
anywhere are we just using poly repos

00:34:38,130 --> 00:34:45,240
then really no actually not but one of

00:34:43,440 --> 00:34:47,130
them one of the things that is outside

00:34:45,240 --> 00:34:48,570
of our monolithic repository is a

00:34:47,130 --> 00:34:51,810
company that we just bought called job

00:34:48,570 --> 00:34:55,020
job boards IO why are they not within

00:34:51,810 --> 00:34:57,420
our mono repo immediately well they have

00:34:55,020 --> 00:35:01,290
different tooling they are a Heroku shop

00:34:57,420 --> 00:35:03,660
we are on AWS and we have a very strict

00:35:01,290 --> 00:35:05,970
CI CD pipeline does it fit into our

00:35:03,660 --> 00:35:09,330
pipeline does it fit into our

00:35:05,970 --> 00:35:12,300
rectory structure not yet so eventually

00:35:09,330 --> 00:35:14,369
we will merge it into our mono repo but

00:35:12,300 --> 00:35:17,599
these things take time so we do have

00:35:14,369 --> 00:35:21,599
some of those instances as well

00:35:17,599 --> 00:35:25,020
so in conclusion as Eden Jacob wrote in

00:35:21,599 --> 00:35:27,270
his article mono repo please do we have

00:35:25,020 --> 00:35:29,849
to choose the repository structure with

00:35:27,270 --> 00:35:31,470
defaults without any tooling the

00:35:29,849 --> 00:35:35,250
behavior of it we wanna see in the world

00:35:31,470 --> 00:35:37,859
in poly repo that behavior is isolation

00:35:35,250 --> 00:35:40,349
that's the whole point of that in mono

00:35:37,859 --> 00:35:43,080
repo that behavior is shared visibility

00:35:40,349 --> 00:35:45,450
that's the whole point of that in each

00:35:43,080 --> 00:35:48,119
case we're gonna be using tools to send

00:35:45,450 --> 00:35:50,400
of the sharp edges but in zip recorder

00:35:48,119 --> 00:35:52,140
we believe in mono repo because it

00:35:50,400 --> 00:35:54,330
instills the cultural values that we

00:35:52,140 --> 00:35:56,760
want in our developers and we can see

00:35:54,330 --> 00:36:01,470
the outcome of that in the decisions and

00:35:56,760 --> 00:36:02,520
actions video every single day so here

00:36:01,470 --> 00:36:04,859
are a few reasons

00:36:02,520 --> 00:36:07,730
references that we used we did a lot of

00:36:04,859 --> 00:36:09,990
research while doing this talk and I

00:36:07,730 --> 00:36:11,640
actually like that there's a mono repo

00:36:09,990 --> 00:36:15,930
please do in a mono repo please don't

00:36:11,640 --> 00:36:17,960
that's that's fantastic and there's

00:36:15,930 --> 00:36:22,500
they're incredibly informative

00:36:17,960 --> 00:36:36,750
we're not zealots so you know choose the

00:36:22,500 --> 00:36:42,359
path that actually fits your culture it

00:36:36,750 --> 00:36:43,770
could possibly I mean maram with gets

00:36:42,359 --> 00:36:46,109
sub-modules it's a commit that you put

00:36:43,770 --> 00:36:50,000
you're actually you know inserting the

00:36:46,109 --> 00:36:52,290
commit within your git repository I

00:36:50,000 --> 00:36:56,869
we're thinking about it it's not painful

00:36:52,290 --> 00:36:56,869
enough yet for things that are external

00:37:04,619 --> 00:37:10,240
so actually that's that's really

00:37:07,420 --> 00:37:12,700
interesting what we try to do is now

00:37:10,240 --> 00:37:14,080
every team is gonna use latest if we at

00:37:12,700 --> 00:37:15,910
all possibly can

00:37:14,080 --> 00:37:20,859
having said that obviously that's not

00:37:15,910 --> 00:37:24,250
possible in every single situation but

00:37:20,859 --> 00:37:26,920
we'll try to if latest is broken by the

00:37:24,250 --> 00:37:28,810
way then we might not use latest and we

00:37:26,920 --> 00:37:30,849
might pin it on the version that does

00:37:28,810 --> 00:37:34,000
work and we've done that in the past but

00:37:30,849 --> 00:37:37,090
everybody will use that it's incredibly

00:37:34,000 --> 00:37:48,070
collaborative and yeah it has its

00:37:37,090 --> 00:37:51,810
challenges as well we use github and a

00:37:48,070 --> 00:37:51,810
whole bunch of get hooks within get lab

00:38:10,300 --> 00:38:16,010
[Music]

00:38:17,190 --> 00:38:26,770
maybe so yeah depends depends on on your

00:38:21,640 --> 00:38:28,210
culture really we've seen I've worked at

00:38:26,770 --> 00:38:30,130
most I think companies have worked it in

00:38:28,210 --> 00:38:32,890
the past that's how we did things as a

00:38:30,130 --> 00:38:35,859
small start-up and and yes all the

00:38:32,890 --> 00:38:38,589
third-party tooling just works it's a

00:38:35,859 --> 00:38:40,660
lot harder in in a mono repo you have to

00:38:38,589 --> 00:38:42,520
actually put the effort in and it might

00:38:40,660 --> 00:38:46,000
not be worth it as you know the whole

00:38:42,520 --> 00:38:48,460
Martin Fowler conversation right you you

00:38:46,000 --> 00:38:50,950
have to put things where we have most

00:38:48,460 --> 00:38:52,540
business value and do you really have

00:38:50,950 --> 00:38:57,960
the most business value of you know

00:38:52,540 --> 00:38:57,960
starting to build all your tooling first

00:39:00,790 --> 00:39:07,550
[Music]

00:39:08,460 --> 00:39:13,890
greenlight is our polemic mechanism for

00:39:11,080 --> 00:39:13,890
doing that

00:39:14,220 --> 00:39:18,849
yeah but the gitlab approach the Keith

00:39:16,810 --> 00:39:20,859
lab tooling doesn't use our directory

00:39:18,849 --> 00:39:23,680
structure and it doesn't enforce our

00:39:20,859 --> 00:39:24,970
owner files so if you use it we'd have

00:39:23,680 --> 00:39:26,890
to create a whole bunch of tooling

00:39:24,970 --> 00:39:29,800
around that to make it use it

00:39:26,890 --> 00:39:31,660
greenlight grows with zip cooler and it

00:39:29,800 --> 00:40:01,240
will become even a greater part of our

00:39:31,660 --> 00:40:04,210
see that actually happen by the way

00:40:01,240 --> 00:40:06,940
that's exactly the example of like go we

00:40:04,210 --> 00:40:09,940
had to update go if you want to refactor

00:40:06,940 --> 00:40:12,790
our code base we can use one commit to

00:40:09,940 --> 00:40:15,490
affect all tooling a thousand lines of

00:40:12,790 --> 00:40:17,770
code in one in one in one commit we can

00:40:15,490 --> 00:40:20,619
also roll it back using actually last

00:40:17,770 --> 00:40:23,430
week remember we did we did one that did

00:40:20,619 --> 00:40:27,010
like it did like 80 builds at one time

00:40:23,430 --> 00:40:28,630
and 91 builds because we changed up

00:40:27,010 --> 00:40:36,250
amazing oh that's right we did change

00:40:28,630 --> 00:40:39,040
your base itself depends we have a city

00:40:36,250 --> 00:40:40,990
to kubernetes we don't have it our ec2

00:40:39,040 --> 00:40:43,000
instances but yes everything was

00:40:40,990 --> 00:40:45,190
everything to companies was deployed at

00:40:43,000 --> 00:40:46,060
the same time we ran out of time you can

00:40:45,190 --> 00:40:48,960
catch us later

00:40:46,060 --> 00:40:52,300
and we'll be in the open office hours

00:40:48,960 --> 00:40:57,439
[Applause]

00:40:52,300 --> 00:40:57,439

YouTube URL: https://www.youtube.com/watch?v=E2WPsxE5yik


