Title: [Ignite] From Zero to Hero: Container Security - Karni Wolf
Publication date: 2020-01-12
Playlist: DevOpsDays Tel Aviv 2019
Description: 
	
Captions: 
	00:00:00,440 --> 00:00:03,580
[Music]

00:00:04,460 --> 00:00:09,000
my name is carnie wolf I work as a

00:00:07,200 --> 00:00:10,740
software developer at sneek where we

00:00:09,000 --> 00:00:12,150
developed tools to help developers find

00:00:10,740 --> 00:00:15,780
and fix vulnerabilities in their

00:00:12,150 --> 00:00:18,150
applications and container images this

00:00:15,780 --> 00:00:20,100
is me a docker con and it took me three

00:00:18,150 --> 00:00:21,510
days to find out there was a Selfy spot

00:00:20,100 --> 00:00:26,730
the only spot in the hall where can

00:00:21,510 --> 00:00:28,080
catch both whales in one shot container

00:00:26,730 --> 00:00:30,869
technology is becoming increasingly

00:00:28,080 --> 00:00:34,079
popular and is expected to grow by 40%

00:00:30,869 --> 00:00:36,840
in 2020 docker reports over 1 billion

00:00:34,079 --> 00:00:38,610
weekly downloads along with the

00:00:36,840 --> 00:00:40,350
popularity of the technology there's an

00:00:38,610 --> 00:00:43,260
increasing trend of vulnerability as we

00:00:40,350 --> 00:00:45,420
reported in Linux OS packages affecting

00:00:43,260 --> 00:00:48,770
the most popular Linux distributions in

00:00:45,420 --> 00:00:52,350
2018 alone we tracked nearly 1,600

00:00:48,770 --> 00:00:54,210
vulnerabilities which makes it all more

00:00:52,350 --> 00:00:57,629
important for us to use this popular

00:00:54,210 --> 00:01:00,120
technology with respond with within the

00:00:57,629 --> 00:01:01,890
secure way as possible so let's discuss

00:01:00,120 --> 00:01:04,799
some best practices we can use for a

00:01:01,890 --> 00:01:07,409
docker image security the first prefer

00:01:04,799 --> 00:01:09,390
minimal base images so less dependencies

00:01:07,409 --> 00:01:11,970
less vulnerabilities here's a clear

00:01:09,390 --> 00:01:14,159
example to demonstrate that this is a

00:01:11,970 --> 00:01:19,229
number of vulnerabilities found in no 10

00:01:14,159 --> 00:01:21,540
base image vs. no 10 slim next used

00:01:19,229 --> 00:01:24,090
lease privileged user without specifying

00:01:21,540 --> 00:01:27,740
the user in your docker file the default

00:01:24,090 --> 00:01:30,210
is the root user by specifying the user

00:01:27,740 --> 00:01:35,640
like in the example you can set the

00:01:30,210 --> 00:01:36,990
least privileged user needed 3 enable

00:01:35,640 --> 00:01:39,930
two-factor authentication in your

00:01:36,990 --> 00:01:42,000
container registry account just a few

00:01:39,930 --> 00:01:44,399
months ago docker hub suffered a data

00:01:42,000 --> 00:01:46,320
breach affecting approximately 190

00:01:44,399 --> 00:01:48,360
thousand users having their sensitive

00:01:46,320 --> 00:01:51,000
information stolen including usernames

00:01:48,360 --> 00:01:53,909
and passwords imagine how horrible it

00:01:51,000 --> 00:02:00,600
would be this is the scream emoji that

00:01:53,909 --> 00:02:02,969
lost its color it's even scarier so

00:02:00,600 --> 00:02:05,610
imagine how horrible it would be for a

00:02:02,969 --> 00:02:07,500
hacker to steal your credentials push a

00:02:05,610 --> 00:02:09,090
malicious image to our container

00:02:07,500 --> 00:02:10,979
registry only to have you pull it and

00:02:09,090 --> 00:02:12,420
run it on your cluster just by enabling

00:02:10,979 --> 00:02:13,780
the simple step of two-factor

00:02:12,420 --> 00:02:17,890
authentication you can prevent

00:02:13,780 --> 00:02:21,400
from happening for sine inverse IM ages

00:02:17,890 --> 00:02:23,680
you should opt to use trusted content

00:02:21,400 --> 00:02:25,450
and signed images when possible dog or

00:02:23,680 --> 00:02:27,190
notary is the tool used for both

00:02:25,450 --> 00:02:29,740
publishers to sign their image and

00:02:27,190 --> 00:02:33,640
publish trusted content and for users

00:02:29,740 --> 00:02:37,420
consumers to to pub to verify the origin

00:02:33,640 --> 00:02:40,180
and integrity of their images used you

00:02:37,420 --> 00:02:42,370
can enable darker content trusts to play

00:02:40,180 --> 00:02:44,410
around with it try enable this try to

00:02:42,370 --> 00:02:48,730
pull an unsigned image and you'll seal

00:02:44,410 --> 00:02:50,350
fail 5 rebuild images often many times

00:02:48,730 --> 00:02:52,560
Valle 'nor abilities are resolved simply

00:02:50,350 --> 00:02:56,280
by pulling and rebuilding your image

00:02:52,560 --> 00:03:00,430
here's a good example take for example

00:02:56,280 --> 00:03:03,430
the package at lib curl version seven

00:03:00,430 --> 00:03:05,110
point six two four this is the Debian

00:03:03,430 --> 00:03:08,620
package repository the docker hub

00:03:05,110 --> 00:03:11,170
official Debian repo and your custom

00:03:08,620 --> 00:03:14,500
image based on w9 they all have the same

00:03:11,170 --> 00:03:17,340
version one day a vulnerability is

00:03:14,500 --> 00:03:19,930
discovered I'm glad it kept its color

00:03:17,340 --> 00:03:23,829
it's affecting all three all three

00:03:19,930 --> 00:03:26,019
versions of the of the package the next

00:03:23,829 --> 00:03:28,630
day of vulnerability fix is implemented

00:03:26,019 --> 00:03:31,209
Debian package repository releases a new

00:03:28,630 --> 00:03:33,340
version with a fixed secure package and

00:03:31,209 --> 00:03:34,989
the next step is for docker hub to

00:03:33,340 --> 00:03:37,239
update the image with the new package

00:03:34,989 --> 00:03:39,459
but you're still stuck with the

00:03:37,239 --> 00:03:41,799
vulnerable package because your based on

00:03:39,459 --> 00:03:44,260
the older version of w-9 by simply

00:03:41,799 --> 00:03:47,560
pulling and pulling the the newer image

00:03:44,260 --> 00:03:49,359
of the the newer image of wn9 and

00:03:47,560 --> 00:03:53,079
rebuilding your image you're good to go

00:03:49,359 --> 00:03:54,910
so to wrap up some of the best practices

00:03:53,079 --> 00:03:57,370
choose the right base image rebuild

00:03:54,910 --> 00:03:59,290
images often lease perl the used least

00:03:57,370 --> 00:04:03,700
privileged user enable two-factor

00:03:59,290 --> 00:04:06,310
authentication and on your container

00:04:03,700 --> 00:04:08,910
registry and use trusted images thanks

00:04:06,310 --> 00:04:08,910
for listening

00:04:09,860 --> 00:04:11,920
you

00:04:12,740 --> 00:04:17,879

YouTube URL: https://www.youtube.com/watch?v=vvJ3bQ0RSS4


