Title: CAP Theorem: not what we thought it was, not what we are looking for  - Shlomi Noach
Publication date: 2020-01-12
Playlist: DevOpsDays Tel Aviv 2019
Description: 
	The CAP theorem is often used to classify distributed systems, and the "two out of three" rule is often quoted. But the CAP theorem is widely misunderstood. What are the exact terms of the CAP Theorem? How does it differ from Brewer's original CAP Conjecture? Where does CAP fall short of meeting practical engineering expectations?

Let us review the definitions and proof of the CAP Theorem, see some hidden assumptions, and attempt to apply these to modern distributed systems. We will challenge the common misconception that systems should be defined by CAP properties, or, indeed, that the CAP Theorem model is one to pursue. We discuss the conjecture, the theorem, and what we can expect to achieve in modern distributed systems.

We will apply logic, math, engineering principals and a pragmatic approach.
Captions: 
	00:00:00,440 --> 00:00:03,580
[Music]

00:00:05,029 --> 00:00:09,269
welcome everyone thank you for coming

00:00:07,500 --> 00:00:12,179
my name is Shlomi north and this is

00:00:09,269 --> 00:00:15,030
catherine not what we thought it was not

00:00:12,179 --> 00:00:16,529
what we are looking for and before I

00:00:15,030 --> 00:00:19,470
explain exactly what we're going to talk

00:00:16,529 --> 00:00:22,800
in the next 40 minutes only to describe

00:00:19,470 --> 00:00:25,320
myself and in my role at my company so

00:00:22,800 --> 00:00:29,580
I'm with E database infrastructure team

00:00:25,320 --> 00:00:32,719
at get up we deal will with all sorts of

00:00:29,580 --> 00:00:36,270
databases I work mostly with and around

00:00:32,719 --> 00:00:38,969
MySQL on all things availability and

00:00:36,270 --> 00:00:41,129
performance and scalability and internal

00:00:38,969 --> 00:00:42,300
tooling and I also revenge of open

00:00:41,129 --> 00:00:44,520
source projects in the my school

00:00:42,300 --> 00:00:46,500
existent one of which is called

00:00:44,520 --> 00:00:49,579
Orchestrator which ones are a high

00:00:46,500 --> 00:00:51,719
availability set up at github

00:00:49,579 --> 00:00:54,510
I'm assuming the people here are

00:00:51,719 --> 00:00:56,489
familiar with git up and what we do we

00:00:54,510 --> 00:00:58,710
recently published we have like three

00:00:56,489 --> 00:01:02,489
million organizations just in the past

00:00:58,710 --> 00:01:04,290
year 44 million readers repos were

00:01:02,489 --> 00:01:07,580
created the numbers are staggering

00:01:04,290 --> 00:01:10,530
and while we store you're actually

00:01:07,580 --> 00:01:14,150
repositories within gate we store all

00:01:10,530 --> 00:01:17,670
the metadata on my scale so all your

00:01:14,150 --> 00:01:20,250
organization users issues pull requests

00:01:17,670 --> 00:01:22,650
reviews comments etcetera etc all of

00:01:20,250 --> 00:01:24,600
these as well as the metadata or get

00:01:22,650 --> 00:01:27,780
itself right every Canadian push

00:01:24,600 --> 00:01:32,130
everything is stored in my scalp so it's

00:01:27,780 --> 00:01:35,850
a critical path in Gita's availability

00:01:32,130 --> 00:01:38,520
and indeed you might argue that perhaps

00:01:35,850 --> 00:01:42,000
my most important role together is to

00:01:38,520 --> 00:01:44,970
make sure the databases are up and

00:01:42,000 --> 00:01:47,310
running and available so that the get of

00:01:44,970 --> 00:01:52,619
service is available to you and you can

00:01:47,310 --> 00:01:54,420
push and commit and comment and open

00:01:52,619 --> 00:01:54,899
issues and close issues does that make

00:01:54,420 --> 00:01:59,790
sense

00:01:54,899 --> 00:02:02,579
cool so two incidents or two scenarios

00:01:59,790 --> 00:02:04,740
one was a blog post I published on the

00:02:02,579 --> 00:02:06,810
head of engineering blog describing how

00:02:04,740 --> 00:02:09,569
we run high availability for my school

00:02:06,810 --> 00:02:12,989
setups and the other was a famous or

00:02:09,569 --> 00:02:13,920
maybe in famous outage we had roughly

00:02:12,989 --> 00:02:19,140
one year

00:02:13,920 --> 00:02:21,780
go we had a split brain scenario took

00:02:19,140 --> 00:02:24,420
some time to recover and we published a

00:02:21,780 --> 00:02:26,880
root cause analysis post for this and

00:02:24,420 --> 00:02:30,300
both these posts sparked some community

00:02:26,880 --> 00:02:33,480
discussion and we saw a lot of questions

00:02:30,300 --> 00:02:36,390
like why did you choose availability

00:02:33,480 --> 00:02:38,700
over consistency or according to cap you

00:02:36,390 --> 00:02:41,519
can't achieve that kind of consistency

00:02:38,700 --> 00:02:45,810
because you choose this path and other

00:02:41,519 --> 00:02:50,370
cat related questions and statements and

00:02:45,810 --> 00:02:53,160
I felt some of those we're misleading or

00:02:50,370 --> 00:02:56,040
incorrect but I couldn't put my finger

00:02:53,160 --> 00:02:58,019
in and I've been doing databases for

00:02:56,040 --> 00:02:58,709
nearly two decades now and for a long

00:02:58,019 --> 00:03:01,560
time

00:02:58,709 --> 00:03:03,989
the capitellum was a little bit mystic

00:03:01,560 --> 00:03:06,750
and mythical to me and so I took the

00:03:03,989 --> 00:03:08,459
time to dive into the Katherine and I

00:03:06,750 --> 00:03:10,500
was a little bit surprised with what I

00:03:08,459 --> 00:03:15,600
found it like I'd like to share that

00:03:10,500 --> 00:03:17,519
with you today and with the concept of

00:03:15,600 --> 00:03:20,880
back to fundamentals what I'd like to do

00:03:17,519 --> 00:03:23,160
today is formally define the terms and

00:03:20,880 --> 00:03:27,930
conditions of the cap theorem proved it

00:03:23,160 --> 00:03:31,019
mathematically with you but then try and

00:03:27,930 --> 00:03:33,810
investigate them look into the proof

00:03:31,019 --> 00:03:36,329
process and the proof in the terms and

00:03:33,810 --> 00:03:40,950
conditions and see how they match or do

00:03:36,329 --> 00:03:44,190
not match our engineering expectations

00:03:40,950 --> 00:03:46,170
right real-world expectations we will

00:03:44,190 --> 00:03:49,320
then try to extrapolate a little bit the

00:03:46,170 --> 00:03:53,010
extent cap or go beyond cap to see if we

00:03:49,320 --> 00:03:55,739
can do a better work in adapting cap

00:03:53,010 --> 00:03:58,350
into our real-world engineering

00:03:55,739 --> 00:04:01,560
practices so is that good

00:03:58,350 --> 00:04:04,200
cool who in this room has ever heard of

00:04:01,560 --> 00:04:06,290
Katherine if you've been to the last to

00:04:04,200 --> 00:04:09,720
the previous session you have okay good

00:04:06,290 --> 00:04:12,120
so basically if you don't it's like you

00:04:09,720 --> 00:04:14,519
know you can have fast food you can have

00:04:12,120 --> 00:04:16,769
cheap food and you can have quality food

00:04:14,519 --> 00:04:18,720
you can't have all three pick at most

00:04:16,769 --> 00:04:22,560
two out of three it's that kind of

00:04:18,720 --> 00:04:24,930
concept originally suggested by

00:04:22,560 --> 00:04:28,080
Professor Eric Brewer that was like 20

00:04:24,930 --> 00:04:32,420
years ago he projected

00:04:28,080 --> 00:04:34,620
a system can have three cooperatives

00:04:32,420 --> 00:04:37,080
consistency or strong consistency high

00:04:34,620 --> 00:04:39,570
availability and petition tolerance and

00:04:37,080 --> 00:04:42,590
you may only pick two out of three

00:04:39,570 --> 00:04:44,880
you cannot build a system that

00:04:42,590 --> 00:04:50,580
consistently provides all three

00:04:44,880 --> 00:04:54,350
properties and a couple years later only

00:04:50,580 --> 00:04:57,360
to Lynch and Gilbert published a paper

00:04:54,350 --> 00:05:00,240
which is today known as the cap theorem

00:04:57,360 --> 00:05:06,300
right it's a mathematical formal

00:05:00,240 --> 00:05:09,900
mathematical proof of something that is

00:05:06,300 --> 00:05:13,320
not exactly the cap conjecture my first

00:05:09,900 --> 00:05:16,050
assessment for today is that the cap

00:05:13,320 --> 00:05:18,680
conjecture and the cap theorem disagree

00:05:16,050 --> 00:05:21,979
with each other on some terms namely

00:05:18,680 --> 00:05:26,310
definition of availability the to use

00:05:21,979 --> 00:05:29,070
different terms for what availability

00:05:26,310 --> 00:05:31,680
means and if you studied math you know

00:05:29,070 --> 00:05:34,380
that in math you change the slightest

00:05:31,680 --> 00:05:36,000
detail everything falls apart

00:05:34,380 --> 00:05:37,830
right in math you have to be very

00:05:36,000 --> 00:05:43,710
precise so we're going to look into that

00:05:37,830 --> 00:05:46,110
shortly so the terms and conditions of

00:05:43,710 --> 00:05:47,789
the cap theorem right we're going to

00:05:46,110 --> 00:05:50,550
discuss this theorem for now and later

00:05:47,789 --> 00:05:53,280
we'll touch it touch the the cap

00:05:50,550 --> 00:05:55,289
conjecture so we have consistency we

00:05:53,280 --> 00:05:58,200
have availability we have technician

00:05:55,289 --> 00:06:00,210
tolerance consistencies strong

00:05:58,200 --> 00:06:03,330
consistency also called atomic

00:06:00,210 --> 00:06:06,270
consistency or linearize ability it's

00:06:03,330 --> 00:06:09,510
like perhaps the strictest strictest

00:06:06,270 --> 00:06:11,250
form of consistency we can demand it

00:06:09,510 --> 00:06:15,300
means it basically means one side

00:06:11,250 --> 00:06:18,870
reading some data into node number one

00:06:15,300 --> 00:06:21,210
in a distributed system if that

00:06:18,870 --> 00:06:25,410
information was written and acknowledged

00:06:21,210 --> 00:06:28,140
and it commits it yet okay good I go and

00:06:25,410 --> 00:06:31,350
try and read that piece of data on any

00:06:28,140 --> 00:06:34,860
other node they must reflect that change

00:06:31,350 --> 00:06:36,390
information or or any anything that

00:06:34,860 --> 00:06:38,760
comes later than that so if an I'm

00:06:36,390 --> 00:06:40,400
writing to one node I'm updating some

00:06:38,760 --> 00:06:42,320
database table and

00:06:40,400 --> 00:06:44,510
one two three four five six seven eight

00:06:42,320 --> 00:06:46,580
nine ten just meaning the number seven I

00:06:44,510 --> 00:06:47,030
go and make you read them in any other

00:06:46,580 --> 00:06:49,520
note

00:06:47,030 --> 00:06:51,320
I should see seven or eight or nine or

00:06:49,520 --> 00:06:54,400
ten but definitely note five four six

00:06:51,320 --> 00:06:54,400
does that make sense

00:06:55,300 --> 00:07:00,169
availability is where the captain

00:06:58,100 --> 00:07:01,729
disagrees with cap conjecture the

00:07:00,169 --> 00:07:04,790
definitional availability according to

00:07:01,729 --> 00:07:06,830
the cap theorem is every request

00:07:04,790 --> 00:07:07,370
received by an unfailing node in the

00:07:06,830 --> 00:07:09,830
system

00:07:07,370 --> 00:07:12,260
must result in response I'll say it

00:07:09,830 --> 00:07:14,120
again every request received by an on

00:07:12,260 --> 00:07:17,030
faylene on in the system must result in

00:07:14,120 --> 00:07:21,320
the response so there's a few corollary

00:07:17,030 --> 00:07:23,419
a few follow-ups to that so that means

00:07:21,320 --> 00:07:25,310
the request must return in a stream it

00:07:23,419 --> 00:07:27,139
amount of time it doesn't matter how

00:07:25,310 --> 00:07:30,350
long it could take three days doesn't

00:07:27,139 --> 00:07:34,580
matter to the mathematical proof and it

00:07:30,350 --> 00:07:36,530
must return without an error and the

00:07:34,580 --> 00:07:41,030
last part is petition tolerance means

00:07:36,530 --> 00:07:44,180
that should network break in some way

00:07:41,030 --> 00:07:49,100
packets get lost our system should be

00:07:44,180 --> 00:07:53,139
able to continue on operating and the

00:07:49,100 --> 00:07:56,090
theme is that petition tolerance is

00:07:53,139 --> 00:07:57,680
beyond our control right Oh petit

00:07:56,090 --> 00:08:00,320
Network petition is beyond our control

00:07:57,680 --> 00:08:03,080
because things happen and networks break

00:08:00,320 --> 00:08:05,479
and so this is something we have to take

00:08:03,080 --> 00:08:07,099
into account this is you know if we

00:08:05,479 --> 00:08:08,840
design a system that cannot tolerate

00:08:07,099 --> 00:08:11,210
Network petitioning but teaching is

00:08:08,840 --> 00:08:13,610
going to break so what's the point of a

00:08:11,210 --> 00:08:17,599
system that can handle it it's going to

00:08:13,610 --> 00:08:19,729
happen and so we must choose between

00:08:17,599 --> 00:08:23,780
availability and consistency in face of

00:08:19,729 --> 00:08:27,590
network petitioning it's often described

00:08:23,780 --> 00:08:29,300
differently if the network is ok you can

00:08:27,590 --> 00:08:32,060
get both availability and consistency

00:08:29,300 --> 00:08:34,190
but if the metal breaks you might need

00:08:32,060 --> 00:08:36,890
to choose between availability and

00:08:34,190 --> 00:08:41,029
consistency so discussion is mostly

00:08:36,890 --> 00:08:42,500
between 80 and 60 systems and let's

00:08:41,029 --> 00:08:46,029
prove the captor and right now this is

00:08:42,500 --> 00:08:49,649
basically the same same proof as in

00:08:46,029 --> 00:08:51,509
Lynch and Gilbert's paper so

00:08:49,649 --> 00:08:52,920
given two nodes these are two database

00:08:51,509 --> 00:08:55,350
service and they replicate from each

00:08:52,920 --> 00:08:58,920
other and they're in sync and everyone's

00:08:55,350 --> 00:09:01,040
happy we're going to place an infinite

00:08:58,920 --> 00:09:04,230
network partition between the two nodes

00:09:01,040 --> 00:09:09,139
infinite in time this network petition

00:09:04,230 --> 00:09:13,559
begins now and never ever completes

00:09:09,139 --> 00:09:15,389
we're now going to write some data into

00:09:13,559 --> 00:09:18,480
node number one let's say we write the

00:09:15,389 --> 00:09:21,800
word hello it's not number one let us

00:09:18,480 --> 00:09:25,290
assume that the system is available

00:09:21,800 --> 00:09:27,740
based on that assumption my right will

00:09:25,290 --> 00:09:32,279
complete in a fill it amount of time

00:09:27,740 --> 00:09:34,800
okay once my write completes I will go

00:09:32,279 --> 00:09:37,679
to node number two in issue a read on

00:09:34,800 --> 00:09:39,240
that piece of data again we assume that

00:09:37,679 --> 00:09:41,160
the system is available therefore my

00:09:39,240 --> 00:09:46,259
read is going to complete in a Finnick

00:09:41,160 --> 00:09:48,389
amount of time now during that time the

00:09:46,259 --> 00:09:51,569
network was broken it was broken for

00:09:48,389 --> 00:09:54,059
infinity there was no way for node

00:09:51,569 --> 00:09:58,290
number 2 to get the value hello from

00:09:54,059 --> 00:10:00,290
node number 1 we assumed availability

00:09:58,290 --> 00:10:03,059
and what we got as a result is

00:10:00,290 --> 00:10:05,370
inconsistency the two nodes have

00:10:03,059 --> 00:10:07,910
different data node number 1 has the

00:10:05,370 --> 00:10:09,360
word hello you know number two does not

00:10:07,910 --> 00:10:11,759
that's it

00:10:09,360 --> 00:10:15,199
does that make sense it's simple enough

00:10:11,759 --> 00:10:18,179
right did it feel very mathematical to

00:10:15,199 --> 00:10:19,889
know equations but this is a formal

00:10:18,179 --> 00:10:22,980
mathematical proof it's it's formal

00:10:19,889 --> 00:10:26,040
because of multiple reasons I'll name

00:10:22,980 --> 00:10:28,319
two one is that you know that it's the

00:10:26,040 --> 00:10:30,809
tiny details if I say that I write

00:10:28,319 --> 00:10:33,240
something to node 1 and then read it

00:10:30,809 --> 00:10:36,660
from node 2 I can't say the words and

00:10:33,240 --> 00:10:38,910
then unless the amount of time spent on

00:10:36,660 --> 00:10:41,370
the right was Finnick as if that were

00:10:38,910 --> 00:10:44,069
infinite what how do you do something

00:10:41,370 --> 00:10:47,850
after an infinite amount of time so

00:10:44,069 --> 00:10:51,509
small details also a classic proof by

00:10:47,850 --> 00:10:56,069
example or by counter example right this

00:10:51,509 --> 00:10:59,449
proof presents a scenario where the

00:10:56,069 --> 00:11:01,220
network is broken and availability means

00:10:59,449 --> 00:11:04,730
inconsistency

00:11:01,220 --> 00:11:06,830
so to clarify cap theorem doesn't say

00:11:04,730 --> 00:11:11,120
that you cannot get a little billion

00:11:06,830 --> 00:11:14,810
consistency at the same time it says you

00:11:11,120 --> 00:11:17,240
cannot design a system where you will be

00:11:14,810 --> 00:11:19,790
certain where you can guarantee that a

00:11:17,240 --> 00:11:23,030
billion consistency will coexist it's

00:11:19,790 --> 00:11:25,760
all times sometimes something's got to

00:11:23,030 --> 00:11:29,930
give and the captain represented one

00:11:25,760 --> 00:11:35,030
example where that has to break okay so

00:11:29,930 --> 00:11:36,200
far cool all purple dragons can fly or

00:11:35,030 --> 00:11:39,950
people familiar with this kind of

00:11:36,200 --> 00:11:42,320
statement cool in math this is vacuous

00:11:39,950 --> 00:11:45,590
truth it is a statement made on an empty

00:11:42,320 --> 00:11:48,650
set of objects all dry all total dragons

00:11:45,590 --> 00:11:50,780
can fly is a true statement to prove me

00:11:48,650 --> 00:11:54,220
wrong you're going to have to show me

00:11:50,780 --> 00:11:58,150
the purple dragon that cannot fly but

00:11:54,220 --> 00:12:01,100
there are no purple dragons so this is

00:11:58,150 --> 00:12:03,950
vacuously true that all purple dragons

00:12:01,100 --> 00:12:06,350
can fly we can do a lot of nice things

00:12:03,950 --> 00:12:08,530
with vacuous truth Oh purple dragons can

00:12:06,350 --> 00:12:10,970
fly faster than the speed of light

00:12:08,530 --> 00:12:13,940
mathematically this statement is true

00:12:10,970 --> 00:12:17,540
now we understand that no way in no way

00:12:13,940 --> 00:12:19,910
were there such purple dragons there's

00:12:17,540 --> 00:12:22,340
no way they could fly waving their wings

00:12:19,910 --> 00:12:24,790
and fly faster than the speed of light

00:12:22,340 --> 00:12:27,920
but mathematically this is sound

00:12:24,790 --> 00:12:29,630
moreover although track all purple

00:12:27,920 --> 00:12:32,240
dragons can answer questions and also

00:12:29,630 --> 00:12:34,640
true dragons cannot answer questions

00:12:32,240 --> 00:12:38,120
these seemingly contradicting statements

00:12:34,640 --> 00:12:40,430
are both true at the very same time it

00:12:38,120 --> 00:12:42,830
would take a purple dragon to disprove

00:12:40,430 --> 00:12:45,320
at least one of those statements but

00:12:42,830 --> 00:12:48,800
there are no purple dragons so why am I

00:12:45,320 --> 00:12:51,230
talking about vacuous truth every

00:12:48,800 --> 00:12:53,680
request received by an on fairly node in

00:12:51,230 --> 00:12:59,300
the system must result in a response

00:12:53,680 --> 00:12:59,930
so by vacuous truth if all my nodes in

00:12:59,300 --> 00:13:04,700
the system

00:12:59,930 --> 00:13:07,430
are broken or failing my system is

00:13:04,700 --> 00:13:08,810
available that's the definition of

00:13:07,430 --> 00:13:10,880
availability according to the cap

00:13:08,810 --> 00:13:12,950
theorem so here's my idea

00:13:10,880 --> 00:13:13,440
I work in get up I work on databases I'm

00:13:12,950 --> 00:13:16,170
gonna

00:13:13,440 --> 00:13:17,730
back and say to my team hey I've got the

00:13:16,170 --> 00:13:21,740
solution to eval really I'm going to

00:13:17,730 --> 00:13:23,930
crash all my database service so in a

00:13:21,740 --> 00:13:25,649
perfectly honest question to this

00:13:23,930 --> 00:13:27,240
honorable of the crowd

00:13:25,649 --> 00:13:30,779
perfectly honest question who here

00:13:27,240 --> 00:13:33,089
believes that by crushing all my

00:13:30,779 --> 00:13:35,399
database servers I'm gonna make the get

00:13:33,089 --> 00:13:37,589
of service more available to you or

00:13:35,399 --> 00:13:39,680
indeed it's all available to you raise

00:13:37,589 --> 00:13:43,410
your hand just one spot in that position

00:13:39,680 --> 00:13:45,480
right cool

00:13:43,410 --> 00:13:47,069
so for the record for people watching

00:13:45,480 --> 00:13:49,139
this on video no one raised their hands

00:13:47,069 --> 00:13:52,500
and with good reason

00:13:49,139 --> 00:13:54,509
this doesn't make sense nice and I claim

00:13:52,500 --> 00:13:58,350
that this definition of availability

00:13:54,509 --> 00:14:01,680
perhaps theorem it doesn't make sense to

00:13:58,350 --> 00:14:03,959
me as an engineer this is not what I

00:14:01,680 --> 00:14:08,120
perceived to be a definition of

00:14:03,959 --> 00:14:10,500
availability I reject that definition

00:14:08,120 --> 00:14:15,060
this is not how we should talk about

00:14:10,500 --> 00:14:18,630
availability let's talk about infinite

00:14:15,060 --> 00:14:20,459
network network petitioning again honest

00:14:18,630 --> 00:14:24,240
question has anyone ever seen an

00:14:20,459 --> 00:14:26,430
infinite network petition again no one

00:14:24,240 --> 00:14:28,709
raises their hand and with good reason

00:14:26,430 --> 00:14:31,170
we've all wondered this earth for a

00:14:28,709 --> 00:14:33,240
finit amount of years none of us has

00:14:31,170 --> 00:14:35,970
been able to see an infinite petition

00:14:33,240 --> 00:14:38,670
but if you'll indulge me I'd like to

00:14:35,970 --> 00:14:40,829
illustrate this further so I'd like you

00:14:38,670 --> 00:14:46,019
to meet Anna and Ben the rector is at

00:14:40,829 --> 00:14:47,490
their company oh hi so one day Anna's

00:14:46,019 --> 00:14:51,209
attention is drawn to what seems to be

00:14:47,490 --> 00:14:54,149
an unfolding crisis oh dear then are you

00:14:51,209 --> 00:14:56,399
seeing what I've seen the to investigate

00:14:54,149 --> 00:14:59,189
it seems like our Virginia router is not

00:14:56,399 --> 00:15:02,279
functioning confirmed with the data

00:14:59,189 --> 00:15:06,480
center they saw some smoke and then it

00:15:02,279 --> 00:15:11,129
burned it's literally melted so our

00:15:06,480 --> 00:15:12,089
Virginia DC is now Network isolated you

00:15:11,129 --> 00:15:14,420
know what that means

00:15:12,089 --> 00:15:18,680
oh wow

00:15:14,420 --> 00:15:23,510
the router is never coming back this is

00:15:18,680 --> 00:15:27,550
an infinite network petition we will

00:15:23,510 --> 00:15:30,200
never have consistency ever again

00:15:27,550 --> 00:15:34,279
there's just no point in anything Kaptur

00:15:30,200 --> 00:15:36,170
improves this for eternity we may as

00:15:34,279 --> 00:15:38,870
well enjoy our time we can live a life

00:15:36,170 --> 00:15:41,660
of adventure we can go to Pauline we can

00:15:38,870 --> 00:15:46,790
can go to Roma we can go to dev of

00:15:41,660 --> 00:15:51,019
snails tell me Maury enters Carmen

00:15:46,790 --> 00:15:52,850
there's CBO oh hi everyone so what's

00:15:51,019 --> 00:15:56,269
going on seems like we have an outage

00:15:52,850 --> 00:15:58,940
our VTA router burst up in flames it is

00:15:56,269 --> 00:16:00,410
gone for eternity we now have an

00:15:58,940 --> 00:16:02,930
infinite metal partitioning we will

00:16:00,410 --> 00:16:04,550
never again have consistency there's

00:16:02,930 --> 00:16:07,279
just no point in anything capturing

00:16:04,550 --> 00:16:11,690
proof this can be explained struggle to

00:16:07,279 --> 00:16:13,940
level stay still live now at this point

00:16:11,690 --> 00:16:15,649
we feel that something is off right

00:16:13,940 --> 00:16:18,890
something is terribly wrong in this

00:16:15,649 --> 00:16:23,810
story but fortunately Carmen is a

00:16:18,890 --> 00:16:25,399
practical CEO Ben yeah he's my corporate

00:16:23,810 --> 00:16:27,649
credit card I'd like you to go to the

00:16:25,399 --> 00:16:29,540
store downtown buy a new router take it

00:16:27,649 --> 00:16:32,750
to our Virginia data center and replace

00:16:29,540 --> 00:16:37,459
the old router yeah

00:16:32,750 --> 00:16:41,420
that also works so what's even an

00:16:37,459 --> 00:16:44,060
infinite network petition this isn't

00:16:41,420 --> 00:16:45,860
something we even planned for this isn't

00:16:44,060 --> 00:16:48,829
something that interests us as engineers

00:16:45,860 --> 00:16:51,440
were interested in the network going on

00:16:48,829 --> 00:16:55,220
for an hour or two we're not planning to

00:16:51,440 --> 00:17:00,829
solve an infinite network petition this

00:16:55,220 --> 00:17:03,019
is an unrealistic scenario okay fine why

00:17:00,829 --> 00:17:05,660
do insist but what if what if the

00:17:03,019 --> 00:17:07,970
network went down for a week that's as

00:17:05,660 --> 00:17:09,980
good as infinite right there's surely

00:17:07,970 --> 00:17:15,530
there is some number after which we can

00:17:09,980 --> 00:17:18,679
call this infinite so can we just say

00:17:15,530 --> 00:17:21,290
long enough sure we can say long enough

00:17:18,679 --> 00:17:24,050
but the cafetorium would break the math

00:17:21,290 --> 00:17:28,100
would not work say the network broke

00:17:24,050 --> 00:17:30,520
down for one hour all I need to do

00:17:28,100 --> 00:17:33,860
is when I read data from milk number two

00:17:30,520 --> 00:17:37,760
is to sleep for one hour then maybe a

00:17:33,860 --> 00:17:40,730
couple more seconds wait out the network

00:17:37,760 --> 00:17:46,760
petition read the data parade I have

00:17:40,730 --> 00:17:49,520
consistency sure you might say well a

00:17:46,760 --> 00:17:52,760
request that takes over an hour is as

00:17:49,520 --> 00:17:53,870
good as malfunctioning right it's it's

00:17:52,760 --> 00:17:56,780
not going to work out

00:17:53,870 --> 00:17:59,559
so should we also put a time limit on

00:17:56,780 --> 00:18:03,500
the request time or the response time

00:17:59,559 --> 00:18:05,960
sure that can be done in fact we can

00:18:03,500 --> 00:18:09,799
rephrase and rewrite the cap theorem

00:18:05,960 --> 00:18:12,740
using time limited constraints if we say

00:18:09,799 --> 00:18:18,350
that the network could go down for up to

00:18:12,740 --> 00:18:23,590
time T and we also require that response

00:18:18,350 --> 00:18:25,940
times are less than half T then we can

00:18:23,590 --> 00:18:28,340
rephrase and reprove the cap theorem

00:18:25,940 --> 00:18:31,159
along the very same lines saying say the

00:18:28,340 --> 00:18:36,400
Year mathematician is limited to one

00:18:31,159 --> 00:18:36,400
hour but with response times must return

00:18:36,820 --> 00:18:45,320
below a half hour so again we write to

00:18:41,990 --> 00:18:48,530
note number one a half hour goes by we

00:18:45,320 --> 00:18:50,870
read from node number two a half hour

00:18:48,530 --> 00:18:53,539
goes by the network is still down for

00:18:50,870 --> 00:18:56,090
the next few milliseconds and we have

00:18:53,539 --> 00:19:00,080
inconsistency so let's call this the

00:18:56,090 --> 00:19:03,650
time limited cup is that okay I should

00:19:00,080 --> 00:19:06,409
be happy now I'm still not happy I have

00:19:03,650 --> 00:19:09,260
two problems with time limited cup first

00:19:06,409 --> 00:19:12,140
I'm not sure why may need this tea and

00:19:09,260 --> 00:19:15,620
have tea why did we pick why do we need

00:19:12,140 --> 00:19:18,380
we impose these specific metrics does

00:19:15,620 --> 00:19:21,770
that make sense engineering wise maybe

00:19:18,380 --> 00:19:23,780
does but it feels to me like we have a

00:19:21,770 --> 00:19:26,570
solution and we're trying to find a

00:19:23,780 --> 00:19:30,440
problem that will nicely fit that

00:19:26,570 --> 00:19:32,330
solution that's my first problem but the

00:19:30,440 --> 00:19:38,630
second problem which is my bigger one is

00:19:32,330 --> 00:19:40,669
that I think it's full of C to continue

00:19:38,630 --> 00:19:42,560
down the path because we still use the

00:19:40,669 --> 00:19:44,150
definition of availability

00:19:42,560 --> 00:19:46,460
that doesn't make sense to me as an

00:19:44,150 --> 00:19:48,140
engineer I think it's a foolish I reject

00:19:46,460 --> 00:19:53,050
that definition I think we should not

00:19:48,140 --> 00:19:55,730
perceive down that specific path

00:19:53,050 --> 00:19:57,770
so let's look again at the cap

00:19:55,730 --> 00:20:00,290
conjecture cap conjecture says a

00:19:57,770 --> 00:20:03,650
completely different thing it defines

00:20:00,290 --> 00:20:05,960
availability as high availability data

00:20:03,650 --> 00:20:07,820
is considered highly available if a

00:20:05,960 --> 00:20:12,220
given consumer of the data can always

00:20:07,820 --> 00:20:17,420
reach some replica in other words

00:20:12,220 --> 00:20:20,690
equally equals the definition but in

00:20:17,420 --> 00:20:23,480
simpler terms I make a request there's

00:20:20,690 --> 00:20:26,270
going to be at least one server that can

00:20:23,480 --> 00:20:30,800
respond to my request in a timely manner

00:20:26,270 --> 00:20:33,110
in a finite amount of time that sounds a

00:20:30,800 --> 00:20:36,590
lot more like the availability that I

00:20:33,110 --> 00:20:40,880
imagined as an engineer it makes more

00:20:36,590 --> 00:20:43,550
sense to me but to elaborate a little

00:20:40,880 --> 00:20:46,040
bit on how different exact how exactly

00:20:43,550 --> 00:20:47,690
different these the cap theorem and the

00:20:46,040 --> 00:20:51,560
cap conjecture definitions of

00:20:47,690 --> 00:20:55,310
availability are according to the cap

00:20:51,560 --> 00:20:57,230
conjecture not all nodes must respond in

00:20:55,310 --> 00:20:59,570
a finite amount of time it just needs to

00:20:57,230 --> 00:21:03,860
be at least one and there's going to be

00:20:59,570 --> 00:21:08,000
at least one caps theorem demands that

00:21:03,860 --> 00:21:11,450
all non crushing nodes all of them will

00:21:08,000 --> 00:21:13,280
be able to respond in a finite amount of

00:21:11,450 --> 00:21:15,740
time these two definitions do not

00:21:13,280 --> 00:21:17,750
contain one another they're not mirrored

00:21:15,740 --> 00:21:20,000
neither of them is stronger than the

00:21:17,750 --> 00:21:23,210
other and I maintain that the capture

00:21:20,000 --> 00:21:26,600
and does not prove the cap see the cap

00:21:23,210 --> 00:21:30,270
theorem does not prove the cap injection

00:21:26,600 --> 00:21:31,950
so there's multiple ways to go from here

00:21:30,270 --> 00:21:35,880
I'd like to to look into the definition

00:21:31,950 --> 00:21:37,710
of cup conjectures hyper ability and

00:21:35,880 --> 00:21:39,630
there's multiple trajectories from here

00:21:37,710 --> 00:21:42,630
and I'd like to address the number of

00:21:39,630 --> 00:21:46,110
nodes in the system you'll remember that

00:21:42,630 --> 00:21:49,140
the proof of cap theorem address the

00:21:46,110 --> 00:21:52,110
scenario of two nodes now that is nice

00:21:49,140 --> 00:21:55,550
but in real life we have more than two

00:21:52,110 --> 00:21:58,920
nodes and so let's look at an N node

00:21:55,550 --> 00:22:01,170
scenario so again according to the cap

00:21:58,920 --> 00:22:04,650
conjecture let's assume that cup

00:22:01,170 --> 00:22:07,260
conjecture checks out consumer always

00:22:04,650 --> 00:22:10,559
has access to data via at least one

00:22:07,260 --> 00:22:14,190
replica so some node will be able to

00:22:10,559 --> 00:22:16,860
service by the way it does not require

00:22:14,190 --> 00:22:19,290
that this will be a different node than

00:22:16,860 --> 00:22:24,600
the one we wrote we may well be just

00:22:19,290 --> 00:22:28,800
speaking to that same node so am I happy

00:22:24,600 --> 00:22:29,550
with that it's better it's something I

00:22:28,800 --> 00:22:33,000
can live with

00:22:29,550 --> 00:22:36,770
I'm it makes more sense to me but not in

00:22:33,000 --> 00:22:39,750
practice because in practice if I'm now

00:22:36,770 --> 00:22:42,660
the owner of databases get up there's

00:22:39,750 --> 00:22:45,120
some data sets we just can't serve of a

00:22:42,660 --> 00:22:48,480
single server right it's just not enough

00:22:45,120 --> 00:22:51,960
we will need a lethal service and so cap

00:22:48,480 --> 00:22:53,790
is also short of capacity and if there's

00:22:51,960 --> 00:22:56,820
anything I'm proud of in this

00:22:53,790 --> 00:22:59,010
presentation it's this pun and so I've

00:22:56,820 --> 00:23:02,390
trademarked it and I'm sorry you cannot

00:22:59,010 --> 00:23:10,110
use it this is mine and mine alone

00:23:02,390 --> 00:23:13,170
so I'm going to conveniently move into

00:23:10,110 --> 00:23:16,610
the realm of quorum so what if we

00:23:13,170 --> 00:23:19,410
changed at least one server able to

00:23:16,610 --> 00:23:22,309
respond to my request what if we change

00:23:19,410 --> 00:23:25,770
this to the majority of the servers

00:23:22,309 --> 00:23:29,760
right what if we say something stronger

00:23:25,770 --> 00:23:34,880
than cap conjecture majority of servers

00:23:29,760 --> 00:23:37,870
are able to respond to my requests so

00:23:34,880 --> 00:23:40,179
this is not an

00:23:37,870 --> 00:23:45,429
an accident that I pick majority because

00:23:40,179 --> 00:23:47,830
I would like to take another look at cap

00:23:45,429 --> 00:23:50,140
through consensus algorithm such as

00:23:47,830 --> 00:23:52,540
packs raft and variations of the two

00:23:50,140 --> 00:23:55,660
because there's various variations and

00:23:52,540 --> 00:23:57,940
so depending on the algorithm and

00:23:55,660 --> 00:24:05,679
depending on the variation taxes and

00:23:57,940 --> 00:24:08,140
raft can can guarantee that if a quorum

00:24:05,679 --> 00:24:10,690
of the server's if the majority of the

00:24:08,140 --> 00:24:15,330
servants are alive up and running and

00:24:10,690 --> 00:24:18,790
connected then rights are either

00:24:15,330 --> 00:24:21,100
consistent across nodes or at least made

00:24:18,790 --> 00:24:24,100
the durable cross nodes so that like the

00:24:21,100 --> 00:24:26,380
changelog is shaped and maybe at a later

00:24:24,100 --> 00:24:31,750
stage we'll see the data so so these are

00:24:26,380 --> 00:24:33,910
pretty strong guarantees and raise your

00:24:31,750 --> 00:24:36,120
hand if if you are working with some

00:24:33,910 --> 00:24:38,350
system that gives us back social draft

00:24:36,120 --> 00:24:41,380
good if you're working with kubernetes

00:24:38,350 --> 00:24:44,530
it uses XE d which is rough if your

00:24:41,380 --> 00:24:48,220
console it uses rough there's a few my

00:24:44,530 --> 00:24:50,679
skill clusters working with paksas

00:24:48,220 --> 00:24:52,840
there's there's a variety of systems

00:24:50,679 --> 00:24:57,130
today that work with consensus

00:24:52,840 --> 00:25:00,750
algorithms and so do these consensus

00:24:57,130 --> 00:25:05,650
algorithms contradict tap in any way and

00:25:00,750 --> 00:25:10,150
the answer is no I mean yes or depends

00:25:05,650 --> 00:25:12,760
how you want to look at it they really

00:25:10,150 --> 00:25:16,179
play along with cap but first we need to

00:25:12,760 --> 00:25:19,150
understand how cap works with N greater

00:25:16,179 --> 00:25:21,040
than 2 if we wanted to look at the proof

00:25:19,150 --> 00:25:23,350
again but not with two nodes but with

00:25:21,040 --> 00:25:25,299
five nodes what would it look like does

00:25:23,350 --> 00:25:28,030
the network petition need to be around

00:25:25,299 --> 00:25:31,750
each and every server or should there be

00:25:28,030 --> 00:25:34,809
like I don't know two slices of the

00:25:31,750 --> 00:25:38,320
network well it turns out that the cap

00:25:34,809 --> 00:25:42,070
theorem is so aggressive and so greedy

00:25:38,320 --> 00:25:44,080
that it's enough that you make a single

00:25:42,070 --> 00:25:46,929
a single network petition across a

00:25:44,080 --> 00:25:48,790
single or two servers or it doesn't

00:25:46,929 --> 00:25:49,779
matter as long as there is some network

00:25:48,790 --> 00:25:51,700
petition cap

00:25:49,779 --> 00:25:56,200
theorem says yeah you have a problem now

00:25:51,700 --> 00:25:58,599
because cap demands that all non crushed

00:25:56,200 --> 00:26:02,559
nodes will be able to serve your data

00:25:58,599 --> 00:26:10,559
and it maintains that it will have to be

00:26:02,559 --> 00:26:14,379
either available or consistent but we'd

00:26:10,559 --> 00:26:18,429
consensus based algorithms with enough

00:26:14,379 --> 00:26:20,499
rock diversity with enough high

00:26:18,429 --> 00:26:23,229
availability sorry

00:26:20,499 --> 00:26:27,009
availability zones diversity gear

00:26:23,229 --> 00:26:31,239
distribution we can have reasonable

00:26:27,009 --> 00:26:33,580
confidence that at any given reasonable

00:26:31,239 --> 00:26:36,789
not total reasonable confidence that in

00:26:33,580 --> 00:26:39,820
any given time we will have a majority

00:26:36,789 --> 00:26:45,719
of our service interconnected up and

00:26:39,820 --> 00:26:48,639
running we do that we we live with that

00:26:45,719 --> 00:26:53,320
reasonable confidence even while we're

00:26:48,639 --> 00:26:56,109
all here today and given that that

00:26:53,320 --> 00:26:58,059
subset of servers that subset of

00:26:56,109 --> 00:27:01,599
majority of servers that are

00:26:58,059 --> 00:27:04,330
interconnected up and running provide

00:27:01,599 --> 00:27:07,869
availability and consistency at the same

00:27:04,330 --> 00:27:09,580
time now it's a trick because it's the

00:27:07,869 --> 00:27:13,239
subset of the service right there's

00:27:09,580 --> 00:27:15,339
still those other servers and we need to

00:27:13,239 --> 00:27:17,679
push back into the application to know

00:27:15,339 --> 00:27:21,580
better than to query those servers or

00:27:17,679 --> 00:27:23,589
maybe you know there's a the you know

00:27:21,580 --> 00:27:27,099
the big cluster implementations in my

00:27:23,589 --> 00:27:29,469
skill actually can require those servers

00:27:27,099 --> 00:27:32,649
to crush themselves as soon as they are

00:27:29,469 --> 00:27:35,859
out of the consensus so that no client

00:27:32,649 --> 00:27:40,830
can ever contact them and you know this

00:27:35,859 --> 00:27:44,139
solves the consistency problem but we're

00:27:40,830 --> 00:27:47,349
pretty happy with this solution with

00:27:44,139 --> 00:27:50,589
that kind of a solution we we're

00:27:47,349 --> 00:27:53,739
satisfied which conveniently leads me to

00:27:50,589 --> 00:27:56,259
my next of the reservation so the recap

00:27:53,739 --> 00:27:59,109
was that cap doesn't say that you can't

00:27:56,259 --> 00:28:01,089
have availability and consistently at

00:27:59,109 --> 00:28:02,380
the same time it says you can't

00:28:01,089 --> 00:28:06,720
guarantee to have the

00:28:02,380 --> 00:28:09,310
both at the same time at all times right

00:28:06,720 --> 00:28:12,490
sometimes there will be a scenario with

00:28:09,310 --> 00:28:14,890
that will break the proof presented such

00:28:12,490 --> 00:28:16,570
a scenario that I think is not very

00:28:14,890 --> 00:28:19,990
realistic but there might be other

00:28:16,570 --> 00:28:23,380
scenarios in world when we talk about so

00:28:19,990 --> 00:28:25,960
cap is really absolute about about this

00:28:23,380 --> 00:28:29,740
when we talk about high availability the

00:28:25,960 --> 00:28:32,530
way you and I normally practice it in

00:28:29,740 --> 00:28:34,240
our work we talk about nines right we

00:28:32,530 --> 00:28:37,210
talk about you know is my service up and

00:28:34,240 --> 00:28:40,260
running is the webpage responding does

00:28:37,210 --> 00:28:45,250
the page load right those kind of

00:28:40,260 --> 00:28:47,680
availability constraints and we commonly

00:28:45,250 --> 00:28:49,450
measure high availability in nines we

00:28:47,680 --> 00:28:51,730
say our services available three nines

00:28:49,450 --> 00:28:53,800
four nines five nines - is pretty good

00:28:51,730 --> 00:28:56,140
right people are really happy when their

00:28:53,800 --> 00:28:58,590
service is five nines available that

00:28:56,140 --> 00:29:01,240
means like five minutes per year outage

00:28:58,590 --> 00:29:03,880
which is a lot right five minutes there

00:29:01,240 --> 00:29:05,380
could be millions of requests failing

00:29:03,880 --> 00:29:07,270
during those five minutes and yet we're

00:29:05,380 --> 00:29:10,420
we're happy we're good yeah we're five

00:29:07,270 --> 00:29:12,610
nines and we understand that we cannot

00:29:10,420 --> 00:29:14,770
get a hundred percent and we understand

00:29:12,610 --> 00:29:17,050
that any additional nine is going to

00:29:14,770 --> 00:29:19,510
cost more and more money more and more

00:29:17,050 --> 00:29:22,330
efforts and it's error-prone and so

00:29:19,510 --> 00:29:26,500
we're content in stopping at some point

00:29:22,330 --> 00:29:29,380
and saying yes we're available enough so

00:29:26,500 --> 00:29:33,360
why is it that with high availability

00:29:29,380 --> 00:29:37,350
we're pragmatic and we're okay to lose

00:29:33,360 --> 00:29:40,750
sometimes but we are so obsessed with

00:29:37,350 --> 00:29:43,750
Katharine you can never do this for that

00:29:40,750 --> 00:29:47,260
because there could be scenarios where

00:29:43,750 --> 00:29:51,070
both cannot be achieved what I would

00:29:47,260 --> 00:29:55,750
like to see is a nice equivalent model

00:29:51,070 --> 00:29:58,780
in app now to be fair Brewer predicted

00:29:55,750 --> 00:30:01,630
that in his first paper and he

00:29:58,780 --> 00:30:04,300
reiterated that years later that there

00:30:01,630 --> 00:30:06,640
might be a weaker cap model where you

00:30:04,300 --> 00:30:09,310
will have partial ability or partial

00:30:06,640 --> 00:30:13,690
consistency but that model has not been

00:30:09,310 --> 00:30:16,640
proved what we still quote today is the

00:30:13,690 --> 00:30:21,140
cap theorem which uses absolutism

00:30:16,640 --> 00:30:25,130
and uses scenarios that do not exist in

00:30:21,140 --> 00:30:27,350
our physical world and we wave and say

00:30:25,130 --> 00:30:30,020
according to cap this is impossible and

00:30:27,350 --> 00:30:32,890
did you not hear about the cap principle

00:30:30,020 --> 00:30:32,890
this is impossible

00:30:33,640 --> 00:30:40,070
moreover cap is a subset availability

00:30:37,220 --> 00:30:42,950
and consistency and partition tolerance

00:30:40,070 --> 00:30:44,600
are important attributes of a

00:30:42,950 --> 00:30:46,640
distributed system but they're not the

00:30:44,600 --> 00:30:49,059
only important aspects of digital

00:30:46,640 --> 00:30:52,929
systems there's a myriad of other things

00:30:49,059 --> 00:30:57,740
I can look into we're building a

00:30:52,929 --> 00:31:00,650
distributed database system and when I'm

00:30:57,740 --> 00:31:04,850
designing a system it's not all about

00:31:00,650 --> 00:31:08,000
cap if people ask you why did you design

00:31:04,850 --> 00:31:10,220
an AP system well there's a lot of other

00:31:08,000 --> 00:31:12,470
considerations when I'm building my

00:31:10,220 --> 00:31:16,820
system these are not the only things I

00:31:12,470 --> 00:31:20,419
think about right and so we believe I

00:31:16,820 --> 00:31:22,280
strongly believe that while the

00:31:20,419 --> 00:31:24,890
trade-off exists we understand this

00:31:22,280 --> 00:31:27,140
engineer again the network went down you

00:31:24,890 --> 00:31:28,070
know if you allowed the right here and

00:31:27,140 --> 00:31:29,840
the network's

00:31:28,070 --> 00:31:31,429
is still down the data is not in the

00:31:29,840 --> 00:31:35,419
other node we get it consistent we

00:31:31,429 --> 00:31:38,570
understand that concept but cap is not

00:31:35,419 --> 00:31:42,710
the model that we're looking for - so to

00:31:38,570 --> 00:31:46,730
save us or to you know to formalize that

00:31:42,710 --> 00:31:48,980
that problem or mission statement and I

00:31:46,730 --> 00:31:57,370
maintain that we need to look into

00:31:48,980 --> 00:32:00,230
different models the internet is full of

00:31:57,370 --> 00:32:03,080
misconceptions about cap whether I'm

00:32:00,230 --> 00:32:05,030
right or wrong about my analysis doesn't

00:32:03,080 --> 00:32:07,460
matter because if you search the

00:32:05,030 --> 00:32:08,929
internet you will find so many

00:32:07,460 --> 00:32:11,120
contradictions between different

00:32:08,929 --> 00:32:12,559
articles all try to interpret the cap

00:32:11,120 --> 00:32:15,440
theorem mine is yet another

00:32:12,559 --> 00:32:18,700
interpretation but you will surely see

00:32:15,440 --> 00:32:21,620
those contradictions just by way of

00:32:18,700 --> 00:32:25,760
identifying these try to see how many of

00:32:21,620 --> 00:32:30,080
these define availability according to

00:32:25,760 --> 00:32:30,410
the actual terms in the papers so here

00:32:30,080 --> 00:32:33,200
is an

00:32:30,410 --> 00:32:36,560
assortment of links that are either

00:32:33,200 --> 00:32:39,410
authoritative or as I believe to be very

00:32:36,560 --> 00:32:41,890
good and correct analysis and

00:32:39,410 --> 00:32:44,570
interpretation of the cap theorem and

00:32:41,890 --> 00:32:47,240
with that I would like to thank these

00:32:44,570 --> 00:32:51,010
kind organs for your attention and we

00:32:47,240 --> 00:32:53,150
have a few minutes for questions

00:32:51,010 --> 00:32:58,040
what was the crisis I talked about

00:32:53,150 --> 00:33:02,480
October 21 a day to remember last year

00:32:58,040 --> 00:33:06,020
we had so we had a data center network

00:33:02,480 --> 00:33:10,310
isolation because of reason we failed

00:33:06,020 --> 00:33:12,320
over we you know in Hebrew it's Silesia

00:33:10,310 --> 00:33:14,660
Talaash it's like you win or you lose

00:33:12,320 --> 00:33:16,780
like the system incorporated perfectly

00:33:14,660 --> 00:33:19,340
we failed over to the other data center

00:33:16,780 --> 00:33:21,980
but we couldn't operate in that data

00:33:19,340 --> 00:33:24,380
center because reasons and we had to

00:33:21,980 --> 00:33:27,320
fail back during which time as expected

00:33:24,380 --> 00:33:29,570
the original data Stata Center diverted

00:33:27,320 --> 00:33:31,520
we got split brain between the originals

00:33:29,570 --> 00:33:42,700
at the data center in death the failed

00:33:31,520 --> 00:33:45,830
over the DC and so there were 40 seconds

00:33:42,700 --> 00:33:50,690
during which the old data center kept

00:33:45,830 --> 00:33:54,170
giving you no updates and those are the

00:33:50,690 --> 00:33:56,870
40 seconds of divergence but the

00:33:54,170 --> 00:34:01,610
decision to rollback was made like after

00:33:56,870 --> 00:34:04,040
20 ish 25 minutes and so we said yeah we

00:34:01,610 --> 00:34:05,780
would rather preserve those 25 minutes

00:34:04,040 --> 00:34:09,320
as opposed to those 30 seconds which

00:34:05,780 --> 00:34:12,710
meant we had to rebuild or rollback on

00:34:09,320 --> 00:34:16,340
those 40 seconds it took us many hours

00:34:12,710 --> 00:34:18,730
to rollback so yeah it was a very in

00:34:16,340 --> 00:34:21,040
famous sorry it took well over 24 hours

00:34:18,730 --> 00:34:24,080
unfortunately since then we've built

00:34:21,040 --> 00:34:26,900
quite a few interesting mechanisms to

00:34:24,080 --> 00:34:30,710
promote this in future so for example in

00:34:26,900 --> 00:34:34,030
in my world of my school we we actually

00:34:30,710 --> 00:34:37,490
created a time machine for my skill so

00:34:34,030 --> 00:34:40,250
next time that I hope that won't come we

00:34:37,490 --> 00:34:43,220
will have multiple mechanism before that

00:34:40,250 --> 00:34:45,740
but if all else fails we actually have

00:34:43,220 --> 00:34:47,080
second ISM to roll back my co2 previous

00:34:45,740 --> 00:34:50,899
point in time

00:34:47,080 --> 00:34:52,730
interesting stuff came out very good

00:34:50,899 --> 00:34:56,340
thank you very much enjoy lunch

00:34:52,730 --> 00:35:01,479
[Applause]

00:34:56,340 --> 00:35:01,479

YouTube URL: https://www.youtube.com/watch?v=qWvzyIiR8iA


