Title: git: Behind the Scenes - Daphna Regev
Publication date: 2020-01-13
Playlist: DevOpsDays Tel Aviv 2019
Description: 
	Many of us use git every day but we don't really understand how it works. This leads to lots of headaches and messy code bases. Lets dive into git to understand how it all comes together - the objects that make up git, creating the commits that we all know and love, and working with them. What are branches, actually? What happens when we merge and when we rebase? Which one should we choose? Understanding what goes on behind the scenes enables us to get out of the messy git situations we all know (and probably don't love)... or better yet, to avoid them in the first place!
Captions: 
	00:00:00,440 --> 00:00:03,580
[Music]

00:00:04,279 --> 00:00:09,050
okay hi and welcome to get behind the

00:00:07,919 --> 00:00:12,480
scenes

00:00:09,050 --> 00:00:15,360
my name is Daphna I'm a data scientist

00:00:12,480 --> 00:00:18,660
at Trax formerly a back-end developer

00:00:15,360 --> 00:00:21,750
and before that I was partly in charge

00:00:18,660 --> 00:00:23,820
of DevOps for my team and I helped move

00:00:21,750 --> 00:00:28,410
in a previous company from subversion

00:00:23,820 --> 00:00:31,289
ticket and attracts we are using

00:00:28,410 --> 00:00:34,440
computer vision to extract insights from

00:00:31,289 --> 00:00:37,260
retail shelves and we're also using it

00:00:34,440 --> 00:00:40,950
to do this it's a very important part

00:00:37,260 --> 00:00:43,860
obviously we're going to start with our

00:00:40,950 --> 00:00:46,460
with them what's in it for me probably

00:00:43,860 --> 00:00:48,660
most of you are using it you're

00:00:46,460 --> 00:00:50,700
committing and you're pushing and you're

00:00:48,660 --> 00:00:54,600
pulling and everything works fine until

00:00:50,700 --> 00:00:56,940
it doesn't and for a lot of people when

00:00:54,600 --> 00:01:00,239
something goes wrong with GUID we just

00:00:56,940 --> 00:01:02,879
have no idea what just happened and how

00:01:00,239 --> 00:01:05,220
to get out of this entire mess that

00:01:02,879 --> 00:01:07,770
we've brought upon ourselves and I think

00:01:05,220 --> 00:01:10,140
that if we understand a bit more about

00:01:07,770 --> 00:01:11,820
what goes on behind the scenes and how

00:01:10,140 --> 00:01:14,280
it actually works and what's really

00:01:11,820 --> 00:01:16,740
going on there we'll have an easier time

00:01:14,280 --> 00:01:19,259
getting out of these gate pitfalls or

00:01:16,740 --> 00:01:21,090
even hopefully just not getting into

00:01:19,259 --> 00:01:23,790
them in the first place which is even

00:01:21,090 --> 00:01:26,220
better so today we're going to be

00:01:23,790 --> 00:01:28,770
talking a bit about what GUID actually

00:01:26,220 --> 00:01:33,720
is we're going to be focusing a lot on

00:01:28,770 --> 00:01:36,140
the local repository and we'll talk

00:01:33,720 --> 00:01:39,650
about the git objects that make up get

00:01:36,140 --> 00:01:43,350
the staging area where we create commits

00:01:39,650 --> 00:01:45,229
are different our use of branches which

00:01:43,350 --> 00:01:47,850
is a really strong point forget and

00:01:45,229 --> 00:01:50,430
obviously combining these branches which

00:01:47,850 --> 00:01:51,630
is what it's all about and then at the

00:01:50,430 --> 00:01:54,210
end we're going to be talking a bit

00:01:51,630 --> 00:01:58,619
about the remote repository which is of

00:01:54,210 --> 00:02:01,020
course of course also important so we'll

00:01:58,619 --> 00:02:04,079
start with the basics we're going to be

00:02:01,020 --> 00:02:06,420
talking a bit about what is good so git

00:02:04,079 --> 00:02:09,209
is a distributed version control system

00:02:06,420 --> 00:02:11,370
this means that every developer is copy

00:02:09,209 --> 00:02:13,800
on their local machine is also a

00:02:11,370 --> 00:02:16,140
repository so we have

00:02:13,800 --> 00:02:18,990
a remote repository by default it's

00:02:16,140 --> 00:02:21,930
named origin and we also have a local

00:02:18,990 --> 00:02:24,000
repository on each machine now we have

00:02:21,930 --> 00:02:26,610
to communicate explicitly between these

00:02:24,000 --> 00:02:28,560
repositories using command commands such

00:02:26,610 --> 00:02:32,460
as push and pull which we'll get to at

00:02:28,560 --> 00:02:37,200
the end and for now we'll talk about the

00:02:32,460 --> 00:02:40,290
local part so many other version control

00:02:37,200 --> 00:02:42,210
systems are Delta based like subversion

00:02:40,290 --> 00:02:45,660
for example this means that they save

00:02:42,210 --> 00:02:47,640
the Delta between the previous version

00:02:45,660 --> 00:02:51,270
of the files and the current version of

00:02:47,640 --> 00:02:53,190
the files but GUID is different you can

00:02:51,270 --> 00:02:56,160
think of git as a stream of snapshots

00:02:53,190 --> 00:02:58,950
because what git does is save a snapshot

00:02:56,160 --> 00:03:01,950
of our directory of our files every time

00:02:58,950 --> 00:03:05,220
that we make this commit and then we

00:03:01,950 --> 00:03:10,320
have this long linked history of all of

00:03:05,220 --> 00:03:14,070
our snaps snapshots so again a stream of

00:03:10,320 --> 00:03:15,930
snapshots and git is a mini file system

00:03:14,070 --> 00:03:19,140
so we have a hidden directory

00:03:15,930 --> 00:03:21,270
it's called git and inside are all of

00:03:19,140 --> 00:03:24,270
our files or objects that gets creates

00:03:21,270 --> 00:03:26,730
which we'll see in a minute and it's

00:03:24,270 --> 00:03:29,040
really a mini file system and one while

00:03:26,730 --> 00:03:31,830
we continue in this talk I'm going to be

00:03:29,040 --> 00:03:33,630
referencing this dot git folder and

00:03:31,830 --> 00:03:38,970
talking about how all the different

00:03:33,630 --> 00:03:40,740
objects sit in this directory so again

00:03:38,970 --> 00:03:43,530
we're going to start with the local part

00:03:40,740 --> 00:03:45,810
and this part is relevant even if we're

00:03:43,530 --> 00:03:49,230
sitting in some dark dank internet less

00:03:45,810 --> 00:03:51,180
basement working by ourselves or if you

00:03:49,230 --> 00:03:53,190
want to be a bit you know more positive

00:03:51,180 --> 00:03:55,709
maybe we're on some nice sunny beach

00:03:53,190 --> 00:03:57,180
tropical island somewhere with no Wi-Fi

00:03:55,709 --> 00:03:59,550
and we're working by ourselves

00:03:57,180 --> 00:04:01,350
all of this first part of the talk is

00:03:59,550 --> 00:04:04,980
going to still work and still be

00:04:01,350 --> 00:04:07,020
relevant and first up we're going to be

00:04:04,980 --> 00:04:10,290
talking about the object the objects are

00:04:07,020 --> 00:04:14,070
a really important part of git and there

00:04:10,290 --> 00:04:17,070
are four basic objects that make up get

00:04:14,070 --> 00:04:18,750
and we're going to be starting with an

00:04:17,070 --> 00:04:22,320
example so let's say this is a

00:04:18,750 --> 00:04:25,080
repository okay we have some code files

00:04:22,320 --> 00:04:26,660
and we have directory subdirectory and

00:04:25,080 --> 00:04:28,910
inside are some

00:04:26,660 --> 00:04:32,480
or files let's see how good actually

00:04:28,910 --> 00:04:33,260
makes this work so first of all we have

00:04:32,480 --> 00:04:37,010
the blob

00:04:33,260 --> 00:04:39,590
okay the blob will save the contents of

00:04:37,010 --> 00:04:41,810
a file just the contents without the

00:04:39,590 --> 00:04:44,270
actual file name and this means that if

00:04:41,810 --> 00:04:45,860
we have several for some reason several

00:04:44,270 --> 00:04:49,760
files with the same content they could

00:04:45,860 --> 00:04:52,310
be saved is just one blob and the blob

00:04:49,760 --> 00:04:55,550
is then compressed so we're saving space

00:04:52,310 --> 00:04:58,760
here and an important thing to know is

00:04:55,550 --> 00:05:01,280
that each object in git will have a

00:04:58,760 --> 00:05:03,920
unique identifier it's called the sha-1

00:05:01,280 --> 00:05:06,680
it's the hash this hexadecimal string of

00:05:03,920 --> 00:05:09,110
characters and it uniquely identifies

00:05:06,680 --> 00:05:11,570
this object now it's not very convenient

00:05:09,110 --> 00:05:13,750
or easy to remember or use so thankfully

00:05:11,570 --> 00:05:16,160
we can use just the first seven digits

00:05:13,750 --> 00:05:18,920
which is great

00:05:16,160 --> 00:05:21,380
and after the blobs we have the next

00:05:18,920 --> 00:05:24,800
object which is the tree the tree is

00:05:21,380 --> 00:05:26,750
like a directory what it does it's a it

00:05:24,800 --> 00:05:29,540
saves pointers to the blobs beneath it

00:05:26,750 --> 00:05:31,840
or the sub trees and it also saves the

00:05:29,540 --> 00:05:35,170
name so now we have the name of the blob

00:05:31,840 --> 00:05:37,370
and again this will have the sha-1 and

00:05:35,170 --> 00:05:38,870
after what is the commit which is

00:05:37,370 --> 00:05:41,840
probably the first object that most

00:05:38,870 --> 00:05:45,230
people that work with git will will

00:05:41,840 --> 00:05:47,930
actually know and the commit points at

00:05:45,230 --> 00:05:51,770
the top-level tree of our repository and

00:05:47,930 --> 00:05:55,330
it's really a snapshot of the way our

00:05:51,770 --> 00:06:00,290
work was at a certain moment in time so

00:05:55,330 --> 00:06:02,620
it will contain blobs of the files that

00:06:00,290 --> 00:06:07,880
have changed in this current command and

00:06:02,620 --> 00:06:09,980
the trees and it has an author and it

00:06:07,880 --> 00:06:12,500
has a timestamp it's pointing at the

00:06:09,980 --> 00:06:15,830
tree and it also has a message because

00:06:12,500 --> 00:06:17,870
the commit is supposed to to be able to

00:06:15,830 --> 00:06:20,120
tell us why we were making this changes

00:06:17,870 --> 00:06:22,850
and what we were going to achieve with a

00:06:20,120 --> 00:06:25,700
certain commit and after that our fourth

00:06:22,850 --> 00:06:28,100
object is the tag there are two types of

00:06:25,700 --> 00:06:31,669
tag and tags and get it doesn't really

00:06:28,100 --> 00:06:35,030
matter but the important thing is that a

00:06:31,669 --> 00:06:37,130
tag enables us to name a commit usually

00:06:35,030 --> 00:06:40,100
this will be for example this is version

00:06:37,130 --> 00:06:42,400
2.0 and this is version 2.1

00:06:40,100 --> 00:06:45,830
it's pointing at a specific committee

00:06:42,400 --> 00:06:48,800
okay so now we understand what a commit

00:06:45,830 --> 00:06:51,140
is but how do we create it and for this

00:06:48,800 --> 00:06:53,360
we have the staging area now this is

00:06:51,140 --> 00:06:56,270
again something that's special and good

00:06:53,360 --> 00:06:58,670
in subversion for example every file

00:06:56,270 --> 00:07:01,400
that you change is going to go into your

00:06:58,670 --> 00:07:04,730
next commit and that's not always what

00:07:01,400 --> 00:07:08,060
you really want sometimes we're going to

00:07:04,730 --> 00:07:11,060
be working on many different files and

00:07:08,060 --> 00:07:14,360
in gif we want our commits to be small

00:07:11,060 --> 00:07:17,450
we want them to tell a story and this

00:07:14,360 --> 00:07:19,130
way it's easier to revert if we decide

00:07:17,450 --> 00:07:21,440
to go back on some work we've been doing

00:07:19,130 --> 00:07:24,290
we can more easily go back without

00:07:21,440 --> 00:07:26,030
deleting everything it might be easier

00:07:24,290 --> 00:07:26,750
to review it's also easier if you want

00:07:26,030 --> 00:07:30,970
to cherry-pick

00:07:26,750 --> 00:07:33,350
some changes to a different location and

00:07:30,970 --> 00:07:35,420
sometimes we changed many different

00:07:33,350 --> 00:07:39,230
things and we don't want to commit them

00:07:35,420 --> 00:07:41,360
all together so in get our working

00:07:39,230 --> 00:07:44,270
directory is decoupled from our

00:07:41,360 --> 00:07:46,640
repository and the way this is done is

00:07:44,270 --> 00:07:50,630
like this so we have our local

00:07:46,640 --> 00:07:52,520
repository that's the GUID directory and

00:07:50,630 --> 00:07:55,340
we have our working directory that's

00:07:52,520 --> 00:07:57,440
just the files our project that we're

00:07:55,340 --> 00:08:00,770
working on and in between we have this

00:07:57,440 --> 00:08:03,020
staging area or the index and that's

00:08:00,770 --> 00:08:05,630
where we write changes that we're going

00:08:03,020 --> 00:08:08,120
to put in the next commit so we have to

00:08:05,630 --> 00:08:11,570
do this explicitly what we're going to

00:08:08,120 --> 00:08:16,790
do is get add the files that we want to

00:08:11,570 --> 00:08:19,100
add add has actually two it works in two

00:08:16,790 --> 00:08:21,100
ways first of all if there's a file that

00:08:19,100 --> 00:08:23,990
git isn't tracking yet get add we'll

00:08:21,100 --> 00:08:26,570
make it track this file and the next

00:08:23,990 --> 00:08:29,210
time get add we'll add these changes

00:08:26,570 --> 00:08:30,800
that have been done since the previous

00:08:29,210 --> 00:08:32,960
version it will add them to the staging

00:08:30,800 --> 00:08:35,150
area and we can also add just parts of

00:08:32,960 --> 00:08:36,530
files using git patch that's more

00:08:35,150 --> 00:08:39,410
advanced but sometimes we might want to

00:08:36,530 --> 00:08:43,910
add only parts of the file that we that

00:08:39,410 --> 00:08:47,120
we've been changing now after we and the

00:08:43,910 --> 00:08:49,850
changes are written to the index and now

00:08:47,120 --> 00:08:52,980
when we commit we do get commits with

00:08:49,850 --> 00:08:54,300
some message git will take

00:08:52,980 --> 00:08:57,510
Changez it will create the appropriate

00:08:54,300 --> 00:09:00,769
blobs and trees and finally the commit

00:08:57,510 --> 00:09:03,870
message and it will store them in an

00:09:00,769 --> 00:09:05,970
object's folder in our docket directory

00:09:03,870 --> 00:09:08,250
now what we need to notice here is that

00:09:05,970 --> 00:09:10,769
if we may change it to a file and we

00:09:08,250 --> 00:09:14,430
staged it and then we continued working

00:09:10,769 --> 00:09:16,500
on the file then only if when we commend

00:09:14,430 --> 00:09:18,870
only the changes that have been staged

00:09:16,500 --> 00:09:21,149
we'll go into the committee so that can

00:09:18,870 --> 00:09:23,639
be a really useful tool many times we

00:09:21,149 --> 00:09:26,370
want to stage and commit all of our

00:09:23,639 --> 00:09:29,370
changes so for that we can commit with

00:09:26,370 --> 00:09:30,990
the - a flag and then you'll just take

00:09:29,370 --> 00:09:33,360
all of the changes in the working

00:09:30,990 --> 00:09:36,300
directory and put them in the next

00:09:33,360 --> 00:09:39,540
committee so okay now we understand how

00:09:36,300 --> 00:09:42,019
a commit is created and the next thing

00:09:39,540 --> 00:09:45,410
you understand is branches because

00:09:42,019 --> 00:09:49,470
branches are these links of commits so

00:09:45,410 --> 00:09:51,269
first of all let's understand why we

00:09:49,470 --> 00:09:54,149
need branches and again a branch is a

00:09:51,269 --> 00:09:55,920
really strong part of get in subversion

00:09:54,149 --> 00:09:58,860
when you want to create a branch you are

00:09:55,920 --> 00:10:00,720
copying all of your files and that can

00:09:58,860 --> 00:10:02,370
take a long time even minutes so it's

00:10:00,720 --> 00:10:04,410
really not something that you're going

00:10:02,370 --> 00:10:05,850
to be doing a lot and your day to day

00:10:04,410 --> 00:10:09,329
work and going back and forth it's

00:10:05,850 --> 00:10:11,339
really not easy but in git creating

00:10:09,329 --> 00:10:12,660
files and changing to different sorry

00:10:11,339 --> 00:10:15,060
creating branches and changing to

00:10:12,660 --> 00:10:19,170
different branches is very fast and very

00:10:15,060 --> 00:10:21,120
cheap and very efficient and the reason

00:10:19,170 --> 00:10:23,610
we want to do this is usually it will

00:10:21,120 --> 00:10:25,649
have a main branch and by default it's

00:10:23,610 --> 00:10:28,560
called master of course and on this

00:10:25,649 --> 00:10:32,339
branch we want to have our very stable

00:10:28,560 --> 00:10:34,019
thoroughly tested code but obviously

00:10:32,339 --> 00:10:35,850
then we want to develop new features and

00:10:34,019 --> 00:10:38,940
we want to try something new maybe it'll

00:10:35,850 --> 00:10:42,329
work out maybe it won't we want to try

00:10:38,940 --> 00:10:44,579
this and many different people may also

00:10:42,329 --> 00:10:46,500
be working on many features at the same

00:10:44,579 --> 00:10:51,060
time and at the end we'll want to bring

00:10:46,500 --> 00:10:53,610
them back into our main branch so being

00:10:51,060 --> 00:10:56,149
able to quickly create modify and delete

00:10:53,610 --> 00:11:00,240
branches is very important to our work

00:10:56,149 --> 00:11:02,899
and what happens is that commits are

00:11:00,240 --> 00:11:06,140
organized in a directed acyclic graph

00:11:02,899 --> 00:11:07,550
apart from all these previous

00:11:06,140 --> 00:11:09,650
parts of the committee as we said the

00:11:07,550 --> 00:11:13,130
message in the author and pointer at the

00:11:09,650 --> 00:11:15,710
tree we also have pointers to our

00:11:13,130 --> 00:11:17,690
parents a commit can have zero parents

00:11:15,710 --> 00:11:19,700
if it's the first initial commit in a

00:11:17,690 --> 00:11:22,070
repository most of the commits will have

00:11:19,700 --> 00:11:25,840
one parent and they can also have two or

00:11:22,070 --> 00:11:28,640
more parents which we'll see later on so

00:11:25,840 --> 00:11:31,280
the next thing we have to create our

00:11:28,640 --> 00:11:33,470
branches is the references and

00:11:31,280 --> 00:11:36,170
references along with objects are

00:11:33,470 --> 00:11:38,630
another very important part of get our

00:11:36,170 --> 00:11:42,260
references are just pointers they're

00:11:38,630 --> 00:11:44,710
actually a small file if we have our dot

00:11:42,260 --> 00:11:47,840
git directory then inside will have

00:11:44,710 --> 00:11:49,910
reference folder and inside it will have

00:11:47,840 --> 00:11:52,160
branches and they're just a small file

00:11:49,910 --> 00:11:54,980
the name will be the name of the branch

00:11:52,160 --> 00:11:57,500
in this case master for example and the

00:11:54,980 --> 00:11:59,900
content of the file will be the sha-1 of

00:11:57,500 --> 00:12:03,680
the commit that it's pointing at the

00:11:59,900 --> 00:12:05,900
this commit is the tip of the branch so

00:12:03,680 --> 00:12:07,700
now I understand that creating a new

00:12:05,900 --> 00:12:10,730
branch is just creating this small file

00:12:07,700 --> 00:12:12,410
and modifying a branch is just changing

00:12:10,730 --> 00:12:14,480
the sha-1 inside it and deleting a

00:12:12,410 --> 00:12:17,480
branch means deleting a small file and

00:12:14,480 --> 00:12:20,120
that enables this very quick work with

00:12:17,480 --> 00:12:22,570
branches and we have another special

00:12:20,120 --> 00:12:25,970
kind of reference which is named head

00:12:22,570 --> 00:12:28,550
head will point at the branch that is

00:12:25,970 --> 00:12:30,290
currently checked out and this is this

00:12:28,550 --> 00:12:33,500
is really the files that we're going to

00:12:30,290 --> 00:12:36,200
be looking at at this moment will come

00:12:33,500 --> 00:12:39,470
from this commit that the branch is

00:12:36,200 --> 00:12:41,210
pointing at so the best way to

00:12:39,470 --> 00:12:43,760
understand this is by looking at an

00:12:41,210 --> 00:12:46,160
example so let's go ahead and see this

00:12:43,760 --> 00:12:48,320
example for branches let's say we have

00:12:46,160 --> 00:12:50,480
this initial commit and then we have

00:12:48,320 --> 00:12:52,460
another commit you can see that the

00:12:50,480 --> 00:12:54,860
master reference is pointing at this

00:12:52,460 --> 00:12:57,290
commit so that's the tip of the master

00:12:54,860 --> 00:12:59,690
branch and head is pointing at master

00:12:57,290 --> 00:13:02,000
now let's say we have some really cool

00:12:59,690 --> 00:13:03,400
new feature that we want to work on so

00:13:02,000 --> 00:13:06,530
we're going to create a feature branch

00:13:03,400 --> 00:13:08,360
we can do this with git checkout - be my

00:13:06,530 --> 00:13:10,580
feature which actually does two things

00:13:08,360 --> 00:13:12,110
it will create the branch and check it

00:13:10,580 --> 00:13:14,240
out if you want to only create the

00:13:12,110 --> 00:13:15,980
branch we could do git branch with the

00:13:14,240 --> 00:13:18,380
name of the branch and then get to

00:13:15,980 --> 00:13:19,940
checkout but usually if we're creating a

00:13:18,380 --> 00:13:20,180
feature branch we might also want to

00:13:19,940 --> 00:13:22,520
check

00:13:20,180 --> 00:13:25,339
get out so we can use this and now we

00:13:22,520 --> 00:13:27,470
have a new reference my feature and it's

00:13:25,339 --> 00:13:29,480
pointing at the same commits and the

00:13:27,470 --> 00:13:33,529
head is pointing at this new reference

00:13:29,480 --> 00:13:35,630
okay so now we change stuff and we make

00:13:33,529 --> 00:13:38,810
a commit and we make maybe make another

00:13:35,630 --> 00:13:42,140
commit and then we want to move back to

00:13:38,810 --> 00:13:44,450
master so now if we check out master my

00:13:42,140 --> 00:13:46,640
feature stays where it was and master

00:13:44,450 --> 00:13:50,320
stays where it was but he'll has moved

00:13:46,640 --> 00:13:53,330
to master okay so we said that head

00:13:50,320 --> 00:13:55,600
points at the tip of a branch but head

00:13:53,330 --> 00:13:57,680
can also point at a specific commitment

00:13:55,600 --> 00:13:59,660
why would we want to do this

00:13:57,680 --> 00:14:02,300
maybe our tests are currently failing

00:13:59,660 --> 00:14:04,970
and we want to check if previously they

00:14:02,300 --> 00:14:07,430
were they had worked or not or we want

00:14:04,970 --> 00:14:10,370
to go to a certain point and branch out

00:14:07,430 --> 00:14:12,830
from there it could happen so in this

00:14:10,370 --> 00:14:14,690
case we can check out we can go to the

00:14:12,830 --> 00:14:16,310
log and look at the SHA one of this

00:14:14,690 --> 00:14:18,050
specific commits and then we can check

00:14:16,310 --> 00:14:21,140
it out and now we're in a state that

00:14:18,050 --> 00:14:22,910
gets called detached head this means

00:14:21,140 --> 00:14:25,790
that we're not pointing at any branch

00:14:22,910 --> 00:14:30,110
but in a commit you know somewhere in

00:14:25,790 --> 00:14:32,480
the middle of nowhere and what happens

00:14:30,110 --> 00:14:36,110
here is that we can look around and get

00:14:32,480 --> 00:14:38,150
will tell us so we can do we can try

00:14:36,110 --> 00:14:40,820
whatever we want but if we want to make

00:14:38,150 --> 00:14:43,730
changes and save them we can make a

00:14:40,820 --> 00:14:46,640
commit now but if we move away from that

00:14:43,730 --> 00:14:48,860
commit what happens is that no one is

00:14:46,640 --> 00:14:50,930
pointing at it anymore and at some point

00:14:48,860 --> 00:14:53,540
the garbage collection will come along

00:14:50,930 --> 00:14:55,040
and look for all kinds of objects that

00:14:53,540 --> 00:14:57,950
no one is pointing at and it'll take

00:14:55,040 --> 00:14:59,900
them away so if we make any new work

00:14:57,950 --> 00:15:03,500
while we're in detached head we have to

00:14:59,900 --> 00:15:05,870
create a new branch or some tag which is

00:15:03,500 --> 00:15:08,150
really a static reference to point at it

00:15:05,870 --> 00:15:11,480
if someone is pointing at it it's fine

00:15:08,150 --> 00:15:14,779
it won't be lost now that we've created

00:15:11,480 --> 00:15:17,000
branches we at some point will want to

00:15:14,779 --> 00:15:19,670
merge them back to bring all of our nice

00:15:17,000 --> 00:15:22,579
new work into master so there are two

00:15:19,670 --> 00:15:26,779
ways in gates to combine our branches we

00:15:22,579 --> 00:15:28,220
have merge and we have rebase and with

00:15:26,779 --> 00:15:30,290
merge again there are two ways we have

00:15:28,220 --> 00:15:31,520
the fast-forward and we have the merge

00:15:30,290 --> 00:15:34,520
commit

00:15:31,520 --> 00:15:36,770
so back to our example where we had

00:15:34,520 --> 00:15:39,410
master and we had my feature and now we

00:15:36,770 --> 00:15:43,910
want to merge it back in so in this case

00:15:39,410 --> 00:15:46,480
we can see that it's really a long line

00:15:43,910 --> 00:15:48,560
of commits and there's really nothing

00:15:46,480 --> 00:15:51,320
differentiating where master is for my

00:15:48,560 --> 00:15:53,270
feature so if we want to bring our my

00:15:51,320 --> 00:15:55,640
feature work into master really all we

00:15:53,270 --> 00:15:57,830
need to do is move that master pointer

00:15:55,640 --> 00:16:00,320
along to the end to point at my feature

00:15:57,830 --> 00:16:03,410
and that's exactly what will happen when

00:16:00,320 --> 00:16:05,810
we get merged so master will just move

00:16:03,410 --> 00:16:09,020
along to my feature and we're done and

00:16:05,810 --> 00:16:11,060
we can all go home now and be happy and

00:16:09,020 --> 00:16:13,310
we can if we look at our history we'll

00:16:11,060 --> 00:16:15,770
have this nice linear history and

00:16:13,310 --> 00:16:18,680
there's really no way of knowing there

00:16:15,770 --> 00:16:21,529
was even a branch here at all ok but

00:16:18,680 --> 00:16:25,070
sadly life is usually not that simple

00:16:21,529 --> 00:16:27,709
and it's not the regular case so let's

00:16:25,070 --> 00:16:30,380
see what happens if it's not that simple

00:16:27,709 --> 00:16:33,200
if you go back to our example let's say

00:16:30,380 --> 00:16:36,050
that we were working on my feature and

00:16:33,200 --> 00:16:37,760
if we're by ourselves then maybe we had

00:16:36,050 --> 00:16:40,730
to go back to master for some hotfix

00:16:37,760 --> 00:16:43,220
because we found a bug and what's

00:16:40,730 --> 00:16:45,380
usually the case when we are working

00:16:43,220 --> 00:16:48,320
with other people maybe someone else has

00:16:45,380 --> 00:16:50,690
already put their work on master and now

00:16:48,320 --> 00:16:53,360
we have some new commits on master and

00:16:50,690 --> 00:16:57,200
maybe even after that we have a commit

00:16:53,360 --> 00:16:59,089
on our branch now we want to combine the

00:16:57,200 --> 00:17:01,279
branches and there's really no obvious

00:16:59,089 --> 00:17:02,630
way where we can just move our pointers

00:17:01,279 --> 00:17:04,910
and have done with it

00:17:02,630 --> 00:17:08,809
it just won't work will lose what either

00:17:04,910 --> 00:17:10,790
one or the other of the branches so now

00:17:08,809 --> 00:17:13,220
what will you do now when we commit is

00:17:10,790 --> 00:17:14,900
we create a completely new object if you

00:17:13,220 --> 00:17:16,850
notice that earlier for the fast-forward

00:17:14,900 --> 00:17:19,280
we didn't create any new get object you

00:17:16,850 --> 00:17:21,559
were just moving references but now we

00:17:19,280 --> 00:17:23,689
have to create a new object and this is

00:17:21,559 --> 00:17:26,030
known as the merge commit and this is

00:17:23,689 --> 00:17:28,010
the commit that can have two parents

00:17:26,030 --> 00:17:31,820
it's pointing at both of the branches

00:17:28,010 --> 00:17:34,790
now something to notice here is that

00:17:31,820 --> 00:17:35,809
usually when your work you have your

00:17:34,790 --> 00:17:38,360
master branch you have your feature

00:17:35,809 --> 00:17:40,400
branch usually you will be bringing your

00:17:38,360 --> 00:17:42,530
master branch into your feature branch

00:17:40,400 --> 00:17:44,429
and making all of your tests there

00:17:42,530 --> 00:17:47,400
because maybe there's

00:17:44,429 --> 00:17:49,200
something that doesn't work in the new

00:17:47,400 --> 00:17:50,820
additions to master with your work and

00:17:49,200 --> 00:17:52,770
only when you see that everything works

00:17:50,820 --> 00:17:56,190
you will be pushing it back to master

00:17:52,770 --> 00:17:57,809
but now just for simplicity sake for

00:17:56,190 --> 00:18:00,240
example let's say that we're always

00:17:57,809 --> 00:18:03,299
merging our feature branch straight to

00:18:00,240 --> 00:18:05,970
master just keep it in mind okay so we

00:18:03,299 --> 00:18:09,360
merged our feature into master we have

00:18:05,970 --> 00:18:11,220
this new merge commit and something to

00:18:09,360 --> 00:18:12,990
notice here that didn't happen in the

00:18:11,220 --> 00:18:16,230
fast-forward is that there could be

00:18:12,990 --> 00:18:19,380
conflicts it is very good about merging

00:18:16,230 --> 00:18:21,029
in general if you have changes to

00:18:19,380 --> 00:18:22,799
different files if you have changes to

00:18:21,029 --> 00:18:25,409
different parts of the same file it's

00:18:22,799 --> 00:18:27,270
all good but if both of the branches

00:18:25,409 --> 00:18:29,490
have changes to the same part of the

00:18:27,270 --> 00:18:31,740
same file obviously it has no way of

00:18:29,490 --> 00:18:34,320
knowing which one is the preferred one

00:18:31,740 --> 00:18:36,149
and what you want to go with so at this

00:18:34,320 --> 00:18:37,890
point it will stop it will tell you you

00:18:36,149 --> 00:18:40,890
have a conflict you will need to solve

00:18:37,890 --> 00:18:43,679
it manually and once you're done then

00:18:40,890 --> 00:18:45,630
you tell git to go on it will create the

00:18:43,679 --> 00:18:48,059
merge commit and this merge commit will

00:18:45,630 --> 00:18:51,440
also include the information about how

00:18:48,059 --> 00:18:53,760
the conflict was solved so okay

00:18:51,440 --> 00:18:56,250
sometimes you're working on your merge

00:18:53,760 --> 00:18:58,230
and you change trial it didn't mean to

00:18:56,250 --> 00:18:59,940
change or you realize that you really

00:18:58,230 --> 00:19:01,559
shouldn't have merged this branch into

00:18:59,940 --> 00:19:03,240
the other branch and you can only

00:19:01,559 --> 00:19:05,130
describe the situation or something like

00:19:03,240 --> 00:19:07,409
this and you're starting to doubt your

00:19:05,130 --> 00:19:08,549
life choices at this point so that's

00:19:07,409 --> 00:19:11,520
fine

00:19:08,549 --> 00:19:13,500
we have git merge - - abort and there's

00:19:11,520 --> 00:19:16,080
a way out and gate will help you you can

00:19:13,500 --> 00:19:18,720
go back and rethink your steps and again

00:19:16,080 --> 00:19:22,500
maybe these were the wrong branches or

00:19:18,720 --> 00:19:25,230
just do it over and I'm confident you

00:19:22,500 --> 00:19:27,659
can do it this time so we talked about

00:19:25,230 --> 00:19:30,750
the merge that's the fast forward and

00:19:27,659 --> 00:19:32,730
the merge commit and now we have rebase

00:19:30,750 --> 00:19:36,809
which is really something different

00:19:32,730 --> 00:19:40,409
rebase is really rewriting history what

00:19:36,809 --> 00:19:42,210
happened in the merge commit is that we

00:19:40,409 --> 00:19:44,970
were we said okay this is the history

00:19:42,210 --> 00:19:47,330
and now let's combine it in rebase what

00:19:44,970 --> 00:19:51,299
we're saying is let's change the history

00:19:47,330 --> 00:19:55,049
so if we had this example with our

00:19:51,299 --> 00:19:57,120
changes to master and to my feature what

00:19:55,049 --> 00:19:58,430
we can say is that conceptually it

00:19:57,120 --> 00:20:01,160
doesn't really matter

00:19:58,430 --> 00:20:04,070
who made what changes before it doesn't

00:20:01,160 --> 00:20:06,260
matter if our fourth commit happened

00:20:04,070 --> 00:20:08,480
before the third commit what we really

00:20:06,260 --> 00:20:12,850
want to do is take all of our feature

00:20:08,480 --> 00:20:15,050
and put it just at the end of master and

00:20:12,850 --> 00:20:18,230
this is really what we do with three

00:20:15,050 --> 00:20:20,930
base so if we're a rebase master onto

00:20:18,230 --> 00:20:23,510
our feature we're going to take all of

00:20:20,930 --> 00:20:26,210
the commits from a feature branch and

00:20:23,510 --> 00:20:28,280
put them at the end of master but the

00:20:26,210 --> 00:20:31,820
thing to notice here is that git commits

00:20:28,280 --> 00:20:33,650
are immutable we can't really change

00:20:31,820 --> 00:20:36,290
what they have inside them and because

00:20:33,650 --> 00:20:38,240
they have the pointer to the parent then

00:20:36,290 --> 00:20:40,010
we can't just move them here what we're

00:20:38,240 --> 00:20:42,470
going to do is we're going to travel to

00:20:40,010 --> 00:20:45,140
the end of master and then we're going

00:20:42,470 --> 00:20:48,200
to replay the content of each commit on

00:20:45,140 --> 00:20:50,480
top of the previous commit and create a

00:20:48,200 --> 00:20:52,010
new commit that can look the same it

00:20:50,480 --> 00:20:54,080
might have the exact same content but

00:20:52,010 --> 00:20:56,870
it's not really the same commit if we

00:20:54,080 --> 00:20:58,460
look at the gate log then we'll look at

00:20:56,870 --> 00:21:03,800
the show on and see that it's really a

00:20:58,460 --> 00:21:07,070
completely new commit okay so while we

00:21:03,800 --> 00:21:08,960
are making this rebase we're going to be

00:21:07,070 --> 00:21:11,900
visited by our friend the detached head

00:21:08,960 --> 00:21:14,660
because GUID is really pointing at each

00:21:11,900 --> 00:21:17,870
one of the commits during the rebase and

00:21:14,660 --> 00:21:20,120
so it's an a detached head state and you

00:21:17,870 --> 00:21:22,250
might at some point have a rebase that

00:21:20,120 --> 00:21:24,110
goes that goes wrong and you could find

00:21:22,250 --> 00:21:26,690
yourself stuck in this detached head

00:21:24,110 --> 00:21:28,550
state so the thing to remember is again

00:21:26,690 --> 00:21:30,620
there is a way out and you can just

00:21:28,550 --> 00:21:32,930
rebase a board like you did with the

00:21:30,620 --> 00:21:36,020
merge and you'll be fine

00:21:32,930 --> 00:21:38,930
but if we go back to our rebase and we

00:21:36,020 --> 00:21:42,020
said that we have completely new commits

00:21:38,930 --> 00:21:44,840
here so the thing to know here is that

00:21:42,020 --> 00:21:47,780
we can have more conflicts than we did

00:21:44,840 --> 00:21:49,400
in the merge with the merge you could

00:21:47,780 --> 00:21:51,560
have conflicts in many different files

00:21:49,400 --> 00:21:53,690
but you only encountered them once when

00:21:51,560 --> 00:21:56,030
you were merging and with the rebase you

00:21:53,690 --> 00:21:57,740
could have as many conflicts as the

00:21:56,030 --> 00:21:59,990
amount of commits that you are rebasing

00:21:57,740 --> 00:22:01,850
because for each one it'll go and it'll

00:21:59,990 --> 00:22:03,740
replay and it could change the same line

00:22:01,850 --> 00:22:08,480
in the same file and then we're doing it

00:22:03,740 --> 00:22:10,690
again and again and so this is something

00:22:08,480 --> 00:22:14,649
you'll have to solve each time

00:22:10,690 --> 00:22:18,190
and then then when we're done what we do

00:22:14,649 --> 00:22:19,929
is we can merge my feature and you can

00:22:18,190 --> 00:22:21,759
see we have the situation that we had

00:22:19,929 --> 00:22:24,309
with the fast-forward merge now we have

00:22:21,759 --> 00:22:26,919
this nice linear history and we can just

00:22:24,309 --> 00:22:29,229
move our pointer forward from master to

00:22:26,919 --> 00:22:31,960
point at the feature branch and then

00:22:29,229 --> 00:22:33,789
we're done we have this we've made the

00:22:31,960 --> 00:22:36,029
three bins we change their history it's

00:22:33,789 --> 00:22:39,489
now nice and linear and there are no

00:22:36,029 --> 00:22:42,129
additional get objects like we had with

00:22:39,489 --> 00:22:44,379
the merge commit but we have to remember

00:22:42,129 --> 00:22:46,899
something here that all of the commits

00:22:44,379 --> 00:22:48,820
that we rebased are completely new so

00:22:46,899 --> 00:22:51,399
this brings a brings us to a really

00:22:48,820 --> 00:22:53,320
important rule in git and that is you

00:22:51,399 --> 00:22:55,509
should never rewrite commits that you

00:22:53,320 --> 00:22:58,029
have shared with others or to be more

00:22:55,509 --> 00:22:59,649
specific you can't rewrite commits that

00:22:58,029 --> 00:23:02,470
you've shared with others and that

00:22:59,649 --> 00:23:07,029
others have based their work on and I

00:23:02,470 --> 00:23:09,369
add this because I do sometimes push we

00:23:07,029 --> 00:23:12,999
haven't talked about push it but I do

00:23:09,369 --> 00:23:15,099
sometimes push rebase azan to a feature

00:23:12,999 --> 00:23:16,809
branch that I work on because you can

00:23:15,099 --> 00:23:18,940
never know when your personal computer

00:23:16,809 --> 00:23:20,679
is going to go up in flames it could

00:23:18,940 --> 00:23:24,759
happen and then you don't want to lose

00:23:20,679 --> 00:23:27,099
your work so sometimes you do put your

00:23:24,759 --> 00:23:29,710
commits on you know a remote branch and

00:23:27,099 --> 00:23:33,519
then you might rebase and you won't want

00:23:29,710 --> 00:23:34,899
to put them there again but I only do

00:23:33,519 --> 00:23:36,729
this because I know that I'm the only

00:23:34,899 --> 00:23:39,129
one working on this feature branch and

00:23:36,729 --> 00:23:41,399
no one else's if other people are

00:23:39,129 --> 00:23:44,769
working in our branch you under no

00:23:41,399 --> 00:23:47,889
circumstances should to do a rebase on

00:23:44,769 --> 00:23:49,419
it and that's because that's because you

00:23:47,889 --> 00:23:52,509
are changing the history and as we said

00:23:49,419 --> 00:23:53,889
git is this long link of commits

00:23:52,509 --> 00:23:55,809
pointing at each other when you break

00:23:53,889 --> 00:23:57,940
the history you can no longer merge you

00:23:55,809 --> 00:23:59,799
can no longer do any of this work and

00:23:57,940 --> 00:24:03,450
your co-workers will not like you in any

00:23:59,799 --> 00:24:05,919
way if you do that so don't okay now

00:24:03,450 --> 00:24:07,960
that we talked about the two options of

00:24:05,919 --> 00:24:10,749
combining branches which one of them is

00:24:07,960 --> 00:24:13,479
preferable there's no straight answer

00:24:10,749 --> 00:24:15,580
for this there are pros and cons in both

00:24:13,479 --> 00:24:17,529
ways with merge you could say that you

00:24:15,580 --> 00:24:19,509
have an accurate description of the

00:24:17,529 --> 00:24:20,169
history and of what really happened in

00:24:19,509 --> 00:24:21,729
your project

00:24:20,169 --> 00:24:23,529
because you also have these merge

00:24:21,729 --> 00:24:23,950
commits if you look at the history and

00:24:23,529 --> 00:24:25,419
you see

00:24:23,950 --> 00:24:27,580
these branching out and going back in

00:24:25,419 --> 00:24:29,590
and you can see which commits were parts

00:24:27,580 --> 00:24:31,840
of which feature and sometimes that's a

00:24:29,590 --> 00:24:34,630
good thing but it can also be really

00:24:31,840 --> 00:24:37,630
really messy and with rebase you have a

00:24:34,630 --> 00:24:39,309
nice linear history that exactly that

00:24:37,630 --> 00:24:41,559
you can tell the story of your

00:24:39,309 --> 00:24:43,059
development really well even if it's not

00:24:41,559 --> 00:24:45,220
exactly what happened while you were

00:24:43,059 --> 00:24:47,440
developing and maybe even if you want to

00:24:45,220 --> 00:24:49,440
revert certain changes it could be

00:24:47,440 --> 00:24:52,659
easier because the commits aren't all

00:24:49,440 --> 00:24:55,389
jumbled up so really the important thing

00:24:52,659 --> 00:24:58,630
here is that each team or each

00:24:55,389 --> 00:25:00,880
organization decide what the best

00:24:58,630 --> 00:25:02,950
strategy is for them and then just stick

00:25:00,880 --> 00:25:06,519
with it

00:25:02,950 --> 00:25:08,710
now if want to talk about remotes so up

00:25:06,519 --> 00:25:10,899
until now all of this happened on our

00:25:08,710 --> 00:25:13,269
local machine and it could happen even

00:25:10,899 --> 00:25:15,760
with for working by ourselves but sadly

00:25:13,269 --> 00:25:17,470
we can't work by ourselves all the time

00:25:15,760 --> 00:25:21,490
it's this part of our job where we have

00:25:17,470 --> 00:25:23,620
to work with other people and so we do

00:25:21,490 --> 00:25:25,809
want to understand how good works with a

00:25:23,620 --> 00:25:27,549
remote repository but the thing to

00:25:25,809 --> 00:25:30,789
understand here that almost everything

00:25:27,549 --> 00:25:31,929
in git happens locally even if you are

00:25:30,789 --> 00:25:34,330
doing things on the remote repository

00:25:31,929 --> 00:25:36,549
you can't do them directly you have to

00:25:34,330 --> 00:25:39,250
bring all the info into your local

00:25:36,549 --> 00:25:40,929
repository make the changes solve your

00:25:39,250 --> 00:25:44,500
conflicts all of this has to happen

00:25:40,929 --> 00:25:46,029
locally and only then you can push it to

00:25:44,500 --> 00:25:48,130
the remote repository and share it with

00:25:46,029 --> 00:25:52,570
everyone else so again we'll do this

00:25:48,130 --> 00:25:54,639
with an example and here we have our

00:25:52,570 --> 00:25:56,769
commit object and we have two references

00:25:54,639 --> 00:25:59,440
that we already know and love we have

00:25:56,769 --> 00:26:01,659
master and we have head but here we also

00:25:59,440 --> 00:26:03,549
have something new and this is called a

00:26:01,659 --> 00:26:06,490
remote reference and again if we think

00:26:03,549 --> 00:26:09,100
about our docket directory then we have

00:26:06,490 --> 00:26:11,500
folder for remote references and again

00:26:09,100 --> 00:26:14,799
these are just files but they're showing

00:26:11,500 --> 00:26:17,350
us where the remote branch was pointing

00:26:14,799 --> 00:26:20,200
again less last time we talked with it

00:26:17,350 --> 00:26:23,320
because as we said we have to update the

00:26:20,200 --> 00:26:25,419
remote repository but it doesn't happen

00:26:23,320 --> 00:26:28,029
automatically and we have to explicitly

00:26:25,419 --> 00:26:30,460
ask the remote repository what's new and

00:26:28,029 --> 00:26:32,529
tell it what's new with us so here

00:26:30,460 --> 00:26:36,070
origin/master is still pointing at this

00:26:32,529 --> 00:26:37,260
initial command and then later on we

00:26:36,070 --> 00:26:39,600
have

00:26:37,260 --> 00:26:41,130
local commits that we made and now we

00:26:39,600 --> 00:26:44,070
want to understand what's happening at

00:26:41,130 --> 00:26:46,650
the remote repository okay so we'll use

00:26:44,070 --> 00:26:48,750
git fetch maybe some of you aren't

00:26:46,650 --> 00:26:50,160
familiar with git fetch and that's fine

00:26:48,750 --> 00:26:52,230
because soon we'll see a command that

00:26:50,160 --> 00:26:55,169
everyone is familiar with but what get

00:26:52,230 --> 00:26:56,760
fetch does is it brings in all the

00:26:55,169 --> 00:26:58,860
information about the new commits that

00:26:56,760 --> 00:27:00,929
we have in the remote repository in this

00:26:58,860 --> 00:27:02,970
case we have some three new commits on

00:27:00,929 --> 00:27:05,490
our master branch and it also updates

00:27:02,970 --> 00:27:07,380
the references to point at where they

00:27:05,490 --> 00:27:09,270
should be pointing so now origin master

00:27:07,380 --> 00:27:13,590
is pointing at the tip of these remote

00:27:09,270 --> 00:27:15,630
commits and if we remember the examples

00:27:13,590 --> 00:27:17,880
we had earlier we can see that this is a

00:27:15,630 --> 00:27:19,830
situation for our merge commit because

00:27:17,880 --> 00:27:22,080
we have local changes and we have remote

00:27:19,830 --> 00:27:24,419
changes and we can't just move our

00:27:22,080 --> 00:27:27,650
pointers and solve everything so now

00:27:24,419 --> 00:27:30,720
what we're going to do is get merged

00:27:27,650 --> 00:27:32,760
we're actually merging with origin our

00:27:30,720 --> 00:27:34,710
remote repository which is by default

00:27:32,760 --> 00:27:37,110
named origin we could also name it

00:27:34,710 --> 00:27:40,770
anything else and then again we have

00:27:37,110 --> 00:27:46,190
this new merge commit created and after

00:27:40,770 --> 00:27:49,260
we create that now we can move our our

00:27:46,190 --> 00:27:52,770
remote reference pointer to just point

00:27:49,260 --> 00:27:56,160
there and the thing to remember is that

00:27:52,770 --> 00:27:57,360
there's this command get pull which is

00:27:56,160 --> 00:27:59,760
what most of you are probably familiar

00:27:57,360 --> 00:28:01,980
with and get pull does these two things

00:27:59,760 --> 00:28:04,559
it does the fetch and it does the merge

00:28:01,980 --> 00:28:07,679
together some people do prefer to do it

00:28:04,559 --> 00:28:09,059
separately to fetch and then and then

00:28:07,679 --> 00:28:11,280
know that they can look at all the

00:28:09,059 --> 00:28:12,630
changes and only merge once they're sure

00:28:11,280 --> 00:28:15,450
that what they're bringing in is

00:28:12,630 --> 00:28:17,640
important but most of us just get pull

00:28:15,450 --> 00:28:22,080
and bring in all the remote changes as

00:28:17,640 --> 00:28:26,340
they are so once we do this we can get

00:28:22,080 --> 00:28:29,910
push and with push we are actually

00:28:26,340 --> 00:28:31,710
moving our remote reference and letting

00:28:29,910 --> 00:28:35,970
the remote repository know that we've

00:28:31,710 --> 00:28:38,190
moved this reference and now we have we

00:28:35,970 --> 00:28:41,820
are updated with our remote repository

00:28:38,190 --> 00:28:44,309
okay so that's that's great but

00:28:41,820 --> 00:28:47,370
sometimes what happens if we didn't want

00:28:44,309 --> 00:28:49,500
to do this merge before we pushed you

00:28:47,370 --> 00:28:50,149
know maybe we didn't know that there

00:28:49,500 --> 00:28:52,129
there

00:28:50,149 --> 00:28:54,079
changes in the remote repository maybe

00:28:52,129 --> 00:28:56,359
we made our changes and now we just want

00:28:54,079 --> 00:28:58,369
to push okay it's so good we'll tell us

00:28:56,359 --> 00:29:00,139
no you can't push there are changes in

00:28:58,369 --> 00:29:03,049
the remote repository but what if you

00:29:00,139 --> 00:29:06,649
really really want to push and we could

00:29:03,049 --> 00:29:08,509
in that case use force push but what

00:29:06,649 --> 00:29:11,569
would happen and we actually had that

00:29:08,509 --> 00:29:15,499
happen in tracks several years ago where

00:29:11,569 --> 00:29:17,149
someone had an outdated version of the

00:29:15,499 --> 00:29:18,739
repository and they made some changes

00:29:17,149 --> 00:29:21,019
and they wanted to push and they really

00:29:18,739 --> 00:29:23,739
really wanted to push and then what

00:29:21,019 --> 00:29:26,269
happens is that you overwrite your

00:29:23,739 --> 00:29:28,669
repository history with the local

00:29:26,269 --> 00:29:30,649
history that you have and that's really

00:29:28,669 --> 00:29:32,809
not nice at all because then you could

00:29:30,649 --> 00:29:35,299
use lose in that case about like two

00:29:32,809 --> 00:29:37,159
months worth of commits and your

00:29:35,299 --> 00:29:40,519
co-workers will now definitely not like

00:29:37,159 --> 00:29:41,809
you thankfully if we remember that we

00:29:40,519 --> 00:29:45,019
have a distributed version control

00:29:41,809 --> 00:29:48,919
system and because every worker is every

00:29:45,019 --> 00:29:50,869
developers copy of the repository is the

00:29:48,919 --> 00:29:53,179
complete repository we can just take the

00:29:50,869 --> 00:29:55,609
history from someone else and save the

00:29:53,179 --> 00:29:57,919
day but if you if you reach a situation

00:29:55,609 --> 00:30:00,289
where you have to use gets a force push

00:29:57,919 --> 00:30:02,389
just be really really sure that this is

00:30:00,289 --> 00:30:06,199
what you want to do it could happen but

00:30:02,389 --> 00:30:08,719
be really sure and again if we go back

00:30:06,199 --> 00:30:11,989
to our example and we have this remote

00:30:08,719 --> 00:30:14,089
and we have this merge commit here then

00:30:11,989 --> 00:30:15,709
maybe when we were merging two branches

00:30:14,089 --> 00:30:18,259
there was a use for this merge commit

00:30:15,709 --> 00:30:20,419
but now when we're doing it locally and

00:30:18,259 --> 00:30:22,009
we're just merging between master and

00:30:20,419 --> 00:30:23,929
remote master then you could say it's

00:30:22,009 --> 00:30:27,529
just littering our history in our log

00:30:23,929 --> 00:30:30,109
you could also pull with the dash dash

00:30:27,529 --> 00:30:32,409
rebase flag and that will really rebase

00:30:30,109 --> 00:30:36,109
your local work on top of the remote

00:30:32,409 --> 00:30:42,019
master tip and that will make it a bit

00:30:36,109 --> 00:30:43,639
cleaner and nicer so okay to recap the

00:30:42,019 --> 00:30:46,189
important things to remember are that

00:30:43,639 --> 00:30:47,899
most of the work in get happens locally

00:30:46,189 --> 00:30:49,969
we have these objects and we have these

00:30:47,899 --> 00:30:52,789
references it's really what git is all

00:30:49,969 --> 00:30:55,519
about and all of this work is done

00:30:52,789 --> 00:30:57,409
locally on our repository and then we

00:30:55,519 --> 00:30:59,629
just update the remote and ask what's

00:30:57,409 --> 00:31:03,079
new with you now remember the first

00:30:59,629 --> 00:31:03,830
first rule of git please only rebase

00:31:03,079 --> 00:31:05,570
only change

00:31:03,830 --> 00:31:07,870
history on something local and not on

00:31:05,570 --> 00:31:10,220
something you've shared with others and

00:31:07,870 --> 00:31:12,049
hopefully now that we understand a bit

00:31:10,220 --> 00:31:13,940
about how good actually work in what's

00:31:12,049 --> 00:31:17,330
going on behind the scenes we'll be able

00:31:13,940 --> 00:31:20,190
to get out of these pitfalls or avoid

00:31:17,330 --> 00:31:26,870
them altogether so thank you

00:31:20,190 --> 00:31:31,860
[Applause]

00:31:26,870 --> 00:31:31,860

YouTube URL: https://www.youtube.com/watch?v=_Q6_oCHwmoc


