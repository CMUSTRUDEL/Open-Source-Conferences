Title: [Masterclass] HTTP Fundamentals - Michael Arenzon & Avishai Ish Shalom
Publication date: 2020-01-19
Playlist: DevOpsDays Tel Aviv 2019
Description: 
	HTTP is the de-facto standard protocol of the internet and heavily used in almost all systems - in depth understanding of HTTP is crucial for design, performance scaling and day to day operations.

Part 1 (~1h) HTTP Overview - History and Concepts
* Where is HTTP in the protocol stack, re-cap of HTTP versions, overview of well-known web servers (Apache/Nginx)
* Concepts - URI, method type, status code, header, etc.
* Advanced topics - Virtual hosting, Reverse/Forward proxies, TLS, protocol extensions, load-balancer, CDN.
* HTTP/2

Part 2 (~2h) [Hands On] Writing a web server
* Creating a basic HTTP server from scratch (URL and headers parsing, req/res flow)
* Implementing virtual hosting and dynamic routing
* Improving client handling with cache, compression, timeouts and keepalive.


Part 3 (~1h) [Hands On] Implementing advanced features
* Reverse proxy, SSE, SNI-based routing (TLS)
* HTTP pipelining (/multiplexing) and head-of-line blocking
Captions: 
	00:00:00,440 --> 00:00:03,580
[Music]

00:00:04,310 --> 00:00:10,920
this small thing that had literally

00:00:07,350 --> 00:00:20,250
nothing until a complex portable that

00:00:10,920 --> 00:00:22,619
basically survived for 15 years like 15

00:00:20,250 --> 00:00:24,990
somehow some of 15 years that the

00:00:22,619 --> 00:00:27,630
particle wasn't any change we just use

00:00:24,990 --> 00:00:31,109
those basic primitives and enhance them

00:00:27,630 --> 00:00:33,690
over time and by protocol extensions

00:00:31,109 --> 00:00:36,120
also mean those things so we have HTTP

00:00:33,690 --> 00:00:38,070
which is also was able because of the

00:00:36,120 --> 00:00:41,309
flexibility flexibility of the protocol

00:00:38,070 --> 00:00:44,520
we have WebSockets and SE C's which are

00:00:41,309 --> 00:00:46,440
not some new protocol or not like HTTP

00:00:44,520 --> 00:00:48,539
go there just extension over the base

00:00:46,440 --> 00:00:50,430
protocol and we also have new

00:00:48,539 --> 00:00:53,129
architectural patterns like RPC an

00:00:50,430 --> 00:00:56,489
arrest that now we can communicate over

00:00:53,129 --> 00:00:58,620
HTTP to to produce complex operations

00:00:56,489 --> 00:01:00,930
like communicating over micro services

00:00:58,620 --> 00:01:03,570
like doing complex computation over a

00:01:00,930 --> 00:01:09,150
single HTTP Co just because it's

00:01:03,570 --> 00:01:11,970
convenient and that's all let's talk

00:01:09,150 --> 00:01:15,600
very briefly about HTTP request

00:01:11,970 --> 00:01:19,110
lifecycle so when the client can be your

00:01:15,600 --> 00:01:22,200
vows there can be any any client at all

00:01:19,110 --> 00:01:26,070
and to initiate the transaction usually

00:01:22,200 --> 00:01:28,229
we want to have domain a web host so

00:01:26,070 --> 00:01:30,390
we're gonna say hey I want to

00:01:28,229 --> 00:01:32,820
communicate with google.com so we gonna

00:01:30,390 --> 00:01:35,729
go to the NSA's on her which basically

00:01:32,820 --> 00:01:37,829
gonna be Idaho SP or some other DNS

00:01:35,729 --> 00:01:39,750
provider that we configured at our

00:01:37,829 --> 00:01:42,780
system after that we're gonna have an IP

00:01:39,750 --> 00:01:43,409
and we're just gonna start this big

00:01:42,780 --> 00:01:45,960
handshake

00:01:43,409 --> 00:01:48,450
basic TCP socket after the handshake

00:01:45,960 --> 00:01:50,970
passed we just have the simple flow of

00:01:48,450 --> 00:01:53,159
hey that's my payload for the request

00:01:50,970 --> 00:01:56,219
I need that endpoint with those headers

00:01:53,159 --> 00:01:57,149
that may be extra values and we're

00:01:56,219 --> 00:02:00,509
getting a response back

00:01:57,149 --> 00:02:02,130
simple as that so just couple words

00:02:00,509 --> 00:02:05,490
about low-level thought that disappear

00:02:02,130 --> 00:02:07,770
in the DNS pot so we just start

00:02:05,490 --> 00:02:10,170
some URL which we're going to talk to

00:02:07,770 --> 00:02:12,360
and you about that in a second and from

00:02:10,170 --> 00:02:13,650
that URL you want to get HTML so first

00:02:12,360 --> 00:02:15,209
thing that you have to do is understand

00:02:13,650 --> 00:02:17,490
who you're talking to which server on

00:02:15,209 --> 00:02:19,950
the internet and servers on the Internet

00:02:17,490 --> 00:02:22,140
are addressed by IP addresses so you

00:02:19,950 --> 00:02:24,209
need to do this conversion from host

00:02:22,140 --> 00:02:26,340
name to IP address and this is done by

00:02:24,209 --> 00:02:29,400
DNS and DNS is completely separate from

00:02:26,340 --> 00:02:30,810
HTTP like a really different thought but

00:02:29,400 --> 00:02:32,970
you have to go through it first of all

00:02:30,810 --> 00:02:35,850
the first thing the DNS resolver might

00:02:32,970 --> 00:02:38,130
be local might be a host file might be

00:02:35,850 --> 00:02:40,650
some DNS daemon that you have a new

00:02:38,130 --> 00:02:41,610
laptop and some operating systems have

00:02:40,650 --> 00:02:44,550
do sketches

00:02:41,610 --> 00:02:46,290
local also might be your ISP might be

00:02:44,550 --> 00:02:48,239
Google eight eight eight dates for

00:02:46,290 --> 00:02:50,360
anyone uses that and then you stop

00:02:48,239 --> 00:02:54,959
participe handshake with you how many

00:02:50,360 --> 00:02:58,050
problems is a TCP handshake no three

00:02:54,959 --> 00:03:00,989
outlets so it says actually two it's

00:02:58,050 --> 00:03:03,300
like one one going forward and going

00:03:00,989 --> 00:03:05,370
backwards this one on blip and then the

00:03:03,300 --> 00:03:07,140
second one is the ACK and usually we

00:03:05,370 --> 00:03:10,590
send data with the first start and with

00:03:07,140 --> 00:03:13,080
the second tag so actually like the HTTP

00:03:10,590 --> 00:03:14,640
request usually goes with me exactly

00:03:13,080 --> 00:03:16,620
with the AK with the packet it's kind of

00:03:14,640 --> 00:03:18,930
an optimization it's not mandated but

00:03:16,620 --> 00:03:20,640
protocol it's an optimization but this

00:03:18,930 --> 00:03:22,739
is how it usually works and then you get

00:03:20,640 --> 00:03:25,010
a response so let's say that you have a

00:03:22,739 --> 00:03:27,269
server that is 100 milliseconds away

00:03:25,010 --> 00:03:29,130
okay how long before you get the

00:03:27,269 --> 00:03:30,959
response and suppose like processing

00:03:29,130 --> 00:03:36,420
takes zero time long for it in you get

00:03:30,959 --> 00:03:40,440
response sorry know how many long dips

00:03:36,420 --> 00:03:44,880
if it sounded is 100 milliseconds 200

00:03:40,440 --> 00:03:48,900
exactly minimum okay cool so that's that

00:03:44,880 --> 00:03:50,970
so this is what they look like so really

00:03:48,900 --> 00:03:54,239
using HTTP on do you turn it today

00:03:50,970 --> 00:03:57,090
please hope that you do if not that's

00:03:54,239 --> 00:04:02,790
kind of anyone knows what the difference

00:03:57,090 --> 00:04:05,130
between HTTP nih peers sorry dear nice

00:04:02,790 --> 00:04:07,380
handshake yes Dennis so TLS is an

00:04:05,130 --> 00:04:10,860
encryption them okay it's bolted on top

00:04:07,380 --> 00:04:12,870
of TCP just below HTTP so you have TCP

00:04:10,860 --> 00:04:14,280
and then your killers and then you have

00:04:12,870 --> 00:04:15,810
HTTP okay

00:04:14,280 --> 00:04:17,370
and tell us

00:04:15,810 --> 00:04:19,200
a lot of benefits provides a lot of

00:04:17,370 --> 00:04:21,060
value in two trips of traffic in

00:04:19,200 --> 00:04:22,169
transport and the problem is of course

00:04:21,060 --> 00:04:25,560
you have

00:04:22,169 --> 00:04:28,410
TSN check and also you need some kind of

00:04:25,560 --> 00:04:30,419
state for TLS and it's not part of the

00:04:28,410 --> 00:04:33,270
HTTP protocol it's part of me that's

00:04:30,419 --> 00:04:37,350
protocol but the server's do keep what

00:04:33,270 --> 00:04:39,120
is called as an SSL token onto the side

00:04:37,350 --> 00:04:42,480
and the client keeps it on the other

00:04:39,120 --> 00:04:45,060
side so let's go through the connection

00:04:42,480 --> 00:04:47,340
initialization so we have DNS resolver

00:04:45,060 --> 00:04:49,770
again we have the necessary to request

00:04:47,340 --> 00:04:52,080
which resolves to an IP address then

00:04:49,770 --> 00:04:55,080
using that IP address we open connection

00:04:52,080 --> 00:04:57,419
to the server and we do the scenic bug

00:04:55,080 --> 00:04:59,610
same simple sock and then another rack

00:04:57,419 --> 00:05:02,130
and with attack we already initiate to

00:04:59,610 --> 00:05:04,440
assign check so the data transfer is the

00:05:02,130 --> 00:05:06,330
client hello okay the first part of the

00:05:04,440 --> 00:05:08,790
TLS handshake and then we get to several

00:05:06,330 --> 00:05:10,110
log and then we exchange keys and then

00:05:08,790 --> 00:05:12,000
at the end we can when we're done

00:05:10,110 --> 00:05:14,070
exchanging keys then we can send that

00:05:12,000 --> 00:05:16,530
HTTP request okay

00:05:14,070 --> 00:05:17,510
now you would notice that this added two

00:05:16,530 --> 00:05:21,390
mountains

00:05:17,510 --> 00:05:25,110
okay to hundreds so let's go through it

00:05:21,390 --> 00:05:27,150
again using our previous example 100

00:05:25,110 --> 00:05:29,910
millisecond latency round-trip latency

00:05:27,150 --> 00:05:36,539
to the more server how long before we

00:05:29,910 --> 00:05:38,370
get the first first answer how many 400

00:05:36,539 --> 00:05:41,430
yes it's usually between four and five

00:05:38,370 --> 00:05:44,630
hundred depending on the exact state of

00:05:41,430 --> 00:05:47,490
the TLS engine which is horrible

00:05:44,630 --> 00:05:49,250
like think the rid of this 100

00:05:47,490 --> 00:05:51,930
millisecond clip is from here to you

00:05:49,250 --> 00:05:54,450
London maybe okay if you're connecting

00:05:51,930 --> 00:05:56,010
to a server in London you can you're

00:05:54,450 --> 00:05:58,229
going to have to wait half a second

00:05:56,010 --> 00:05:59,760
before you get anything like this

00:05:58,229 --> 00:06:01,770
doesn't even include the time that the

00:05:59,760 --> 00:06:09,240
server text and process the quest so

00:06:01,770 --> 00:06:10,979
that's pretty horrible okay so what what

00:06:09,240 --> 00:06:12,870
can we do like obviously this is not how

00:06:10,979 --> 00:06:14,850
the internet works right like otherwise

00:06:12,870 --> 00:06:17,370
most of the devices would be unusable

00:06:14,850 --> 00:06:18,740
like hobo experience and this is

00:06:17,370 --> 00:06:20,850
sometimes the experience that you get

00:06:18,740 --> 00:06:25,990
when people don't know what to do with

00:06:20,850 --> 00:06:28,449
this so how are people doing this so

00:06:25,990 --> 00:06:30,850
let's go through this again okay we have

00:06:28,449 --> 00:06:31,840
100 for the rest result which but we

00:06:30,850 --> 00:06:34,090
didn't even include this in the

00:06:31,840 --> 00:06:38,370
computation by the way people don't know

00:06:34,090 --> 00:06:41,229
this but which protocol does DNS use

00:06:38,370 --> 00:06:43,830
sorry good EP and once what the

00:06:41,229 --> 00:06:46,240
characteristics of UDP

00:06:43,830 --> 00:06:47,620
unreliable mean it's lossy so what

00:06:46,240 --> 00:06:52,419
happens if I send a request to a server

00:06:47,620 --> 00:06:53,650
it doesn't answer I try another one how

00:06:52,419 --> 00:06:56,800
long do I try another one

00:06:53,650 --> 00:06:58,560
Oh interesting question alright so

00:06:56,800 --> 00:07:01,120
that's a problem the problem is that

00:06:58,560 --> 00:07:05,740
first of all in most operating systems

00:07:01,120 --> 00:07:07,210
DNS is blocking okay meaning that if the

00:07:05,740 --> 00:07:10,479
is simply Prime we're gonna have to wait

00:07:07,210 --> 00:07:11,830
just sit there like dumb asses and wait

00:07:10,479 --> 00:07:13,479
wait wait wait wait they will get a

00:07:11,830 --> 00:07:17,169
response email may not be coming back

00:07:13,479 --> 00:07:19,300
which is kind of annoying so DNS is a

00:07:17,169 --> 00:07:22,419
performance problem but it's usually

00:07:19,300 --> 00:07:25,720
cached after this time so somewhat

00:07:22,419 --> 00:07:29,770
mitigated something but anyone you think

00:07:25,720 --> 00:07:32,880
no yes yeah look up DNS problems with

00:07:29,770 --> 00:07:36,820
the nodejs ready a lot of fun yeah

00:07:32,880 --> 00:07:38,409
so so that's 100 but we want to go

00:07:36,820 --> 00:07:41,110
through usually photo showed because you

00:07:38,409 --> 00:07:44,770
get DNS from a high-speed cache but if

00:07:41,110 --> 00:07:47,949
not well that's tough luck then you get

00:07:44,770 --> 00:07:50,500
TCP handshake then you get 214 an

00:07:47,949 --> 00:07:52,599
eccentric and then another one for HTTP

00:07:50,500 --> 00:07:55,030
so this is why the mance is 500

00:07:52,599 --> 00:07:56,680
sometimes and so what can we do first of

00:07:55,030 --> 00:07:59,259
all DNS caching what we talked about

00:07:56,680 --> 00:08:02,020
second is TCP connection reuse okay

00:07:59,259 --> 00:08:04,060
remember HTTP 1.1 added connection used

00:08:02,020 --> 00:08:07,240
meaning that we can use the same TCP

00:08:04,060 --> 00:08:09,159
connection and send more HTTP requests

00:08:07,240 --> 00:08:11,169
on the same connection meaning that we

00:08:09,159 --> 00:08:13,659
don't have to go through the whole

00:08:11,169 --> 00:08:16,360
connection initialization phase not with

00:08:13,659 --> 00:08:18,789
TLS or disappea we just use the same

00:08:16,360 --> 00:08:21,550
connection so assuming that we're all we

00:08:18,789 --> 00:08:24,009
talk to that server once second time is

00:08:21,550 --> 00:08:25,659
just gonna be 100 millisecond back and

00:08:24,009 --> 00:08:27,699
forth okay

00:08:25,659 --> 00:08:28,840
then managed to be pipelining which

00:08:27,699 --> 00:08:30,969
we'll talk about in a bit

00:08:28,840 --> 00:08:33,940
basically it allows you to send multiple

00:08:30,969 --> 00:08:36,729
requests in batch meaning concurrently

00:08:33,940 --> 00:08:37,760
and get the response the responses also

00:08:36,729 --> 00:08:39,260
in a batch

00:08:37,760 --> 00:08:41,810
nice optimization we'll talk about that

00:08:39,260 --> 00:08:43,580
in a second TLS also has a very nice

00:08:41,810 --> 00:08:46,100
feature meaning in fact I spoke to a

00:08:43,580 --> 00:08:49,100
server and I hold of the exchange keys

00:08:46,100 --> 00:08:51,110
without server I can cache the token

00:08:49,100 --> 00:08:53,600
with an accession token for several

00:08:51,110 --> 00:08:56,720
hours okay depending on the exact

00:08:53,600 --> 00:08:58,430
configuration of the server and if I

00:08:56,720 --> 00:09:01,010
talk to that server again in the next

00:08:58,430 --> 00:09:03,410
let's say six hours or so I can just say

00:09:01,010 --> 00:09:04,670
oh look I've got the keys already so we

00:09:03,410 --> 00:09:06,500
don't need to exchange keys again

00:09:04,670 --> 00:09:08,420
that saves one round good so that's

00:09:06,500 --> 00:09:10,760
amazing shaves off like how many

00:09:08,420 --> 00:09:14,870
milliseconds not too bad not too shabby

00:09:10,760 --> 00:09:18,410
and then Google introduced to us 3.0

00:09:14,870 --> 00:09:23,150
okay you stand out yes ask about the TLS

00:09:18,410 --> 00:09:26,450
session and use yes yes like using a

00:09:23,150 --> 00:09:29,570
cookie and you like better it's not a

00:09:26,450 --> 00:09:32,720
cookie its FL token let's go

00:09:29,570 --> 00:09:34,820
okay it's somewhat like a cocaine state

00:09:32,720 --> 00:09:37,940
that the the kind M server have to have

00:09:34,820 --> 00:09:40,040
to say okay so the identification of you

00:09:37,940 --> 00:09:42,530
okay so you might find server and you're

00:09:40,040 --> 00:09:45,290
the client then I know that for you okay

00:09:42,530 --> 00:09:46,880
I have this key that's already clicked

00:09:45,290 --> 00:09:48,980
on and I can save it somewhere

00:09:46,880 --> 00:09:50,930
okay memory or disk or whatever wherever

00:09:48,980 --> 00:09:52,760
I want and when you talk to me again I'm

00:09:50,930 --> 00:09:54,170
like oh okay I know you I have to kill

00:09:52,760 --> 00:09:56,150
ready you have to kill ready let's talk

00:09:54,170 --> 00:09:57,950
okay so that saves the whole

00:09:56,150 --> 00:09:59,780
initialization process which is really

00:09:57,950 --> 00:10:05,270
good

00:09:59,780 --> 00:10:07,790
Dilys 3.0 actually with quick which HTTP

00:10:05,270 --> 00:10:10,220
3 you can actually have it's only one

00:10:07,790 --> 00:10:12,950
mounted to initiate session and if you

00:10:10,220 --> 00:10:15,200
all talk to each other 0 round trips to

00:10:12,950 --> 00:10:18,350
initiate the session which is amazing a

00:10:15,200 --> 00:10:21,350
lot of performance benefits not widely

00:10:18,350 --> 00:10:24,320
available yet but it will be in coming

00:10:21,350 --> 00:10:28,940
years which is amazing and Cydia so how

00:10:24,320 --> 00:10:30,800
the city and help you get there come to

00:10:28,940 --> 00:10:32,180
be closer to you yes but we're not

00:10:30,800 --> 00:10:37,490
talking about caching here we're talking

00:10:32,180 --> 00:10:39,260
about just a TCP TOS not exactly making

00:10:37,490 --> 00:10:42,380
the outage photos or not the first thing

00:10:39,260 --> 00:10:44,210
that it does so the city and usually

00:10:42,380 --> 00:10:46,880
they have a box and let's say your ISP

00:10:44,210 --> 00:10:48,110
and the latency to the ISP might be like

00:10:46,880 --> 00:10:50,890
10 milliseconds okay

00:10:48,110 --> 00:10:53,680
so doing even five round trips

00:10:50,890 --> 00:10:56,860
okay to the CDN to the ice P would be

00:10:53,680 --> 00:10:58,510
like five times ten milliseconds that's

00:10:56,860 --> 00:11:00,730
like 50 milliseconds to initiate the

00:10:58,510 --> 00:11:02,620
connection and then the city and usually

00:11:00,730 --> 00:11:05,440
already connected well they already have

00:11:02,620 --> 00:11:08,260
a session connection open to the backend

00:11:05,440 --> 00:11:10,450
okay so even if they don't have the

00:11:08,260 --> 00:11:12,520
content that you asked for cached just

00:11:10,450 --> 00:11:15,010
they only need one longer to get it so

00:11:12,520 --> 00:11:17,890
that's 100 milliseconds so we're down to

00:11:15,010 --> 00:11:19,390
150 milliseconds for about 500 which is

00:11:17,890 --> 00:11:21,340
amazing okay

00:11:19,390 --> 00:11:23,380
and usually the phidian's also have

00:11:21,340 --> 00:11:26,650
photo optimizations like they might have

00:11:23,380 --> 00:11:29,200
a better internet connection to the to

00:11:26,650 --> 00:11:31,840
the backend because they may be paying

00:11:29,200 --> 00:11:34,210
more for for upstream or maybe they have

00:11:31,840 --> 00:11:36,220
different routers or whatever usually

00:11:34,210 --> 00:11:38,320
they have their own pilot networks so

00:11:36,220 --> 00:11:40,480
it's usually not even 100 milliseconds

00:11:38,320 --> 00:11:42,850
might be like more than 50 or 60 or

00:11:40,480 --> 00:11:44,920
something like that so it's a really big

00:11:42,850 --> 00:11:46,480
optimization and this is why you want to

00:11:44,920 --> 00:11:48,670
be behind the city and even if you're

00:11:46,480 --> 00:11:52,350
not doing any caching just for their

00:11:48,670 --> 00:11:55,500
self domination okay so very beneficial

00:11:52,350 --> 00:11:58,140
that's also kind of a problem because

00:11:55,500 --> 00:12:00,070
this means that the city ends and

00:11:58,140 --> 00:12:03,010
Michaels gonna talk about that a bit

00:12:00,070 --> 00:12:05,170
about virtual hosting they need to serve

00:12:03,010 --> 00:12:07,150
a lot of websites so they need to a way

00:12:05,170 --> 00:12:08,830
to differentiate between websites they

00:12:07,150 --> 00:12:11,980
need to know who you want to talk to and

00:12:08,830 --> 00:12:15,010
how do you know who you want to talk to

00:12:11,980 --> 00:12:16,450
okay and you need to tell me this but

00:12:15,010 --> 00:12:18,760
you want to tell me this in cryptid

00:12:16,450 --> 00:12:21,640
session so how do you tell me which

00:12:18,760 --> 00:12:23,710
certificate to load before you know we

00:12:21,640 --> 00:12:25,840
have sunk some kind of encryption so

00:12:23,710 --> 00:12:27,370
that's kind of we're gonna leave that

00:12:25,840 --> 00:12:29,980
there's an open question but if you're

00:12:27,370 --> 00:12:36,700
interested look up CF&I on the online

00:12:29,980 --> 00:12:40,690
really cool fn9 yeah look it up now back

00:12:36,700 --> 00:12:43,690
to the fun part but so I had Bilquis

00:12:40,690 --> 00:12:45,610
usually looks like that and what we

00:12:43,690 --> 00:12:47,260
trying to see here is how the actual

00:12:45,610 --> 00:12:49,840
payload looks likes what's the autonomy

00:12:47,260 --> 00:12:52,900
of the request the first time always

00:12:49,840 --> 00:12:55,000
indicates the meta type so in this

00:12:52,900 --> 00:12:58,300
example we try to send post request

00:12:55,000 --> 00:13:00,149
the cement point using HP 1:1 what you

00:12:58,300 --> 00:13:02,740
can see here that the protocol specifies

00:13:00,149 --> 00:13:05,500
that the request line would contain the

00:13:02,740 --> 00:13:11,529
meta type the actual requested resource

00:13:05,500 --> 00:13:13,839
or your lie and also after HP 0.9 or 1.0

00:13:11,529 --> 00:13:16,660
they also added the monetary field of

00:13:13,839 --> 00:13:20,379
adding the HTTP HTTP protocol version

00:13:16,660 --> 00:13:23,019
the reason why we didn't see here is for

00:13:20,379 --> 00:13:25,870
very simple reason you know that most of

00:13:23,019 --> 00:13:27,819
the web servers Beco compatible because

00:13:25,870 --> 00:13:30,639
a sheep is usually very comfortable you

00:13:27,819 --> 00:13:33,490
can downgrade all great sessions so even

00:13:30,639 --> 00:13:37,300
if you have an HTTP 1.1 webserver

00:13:33,490 --> 00:13:39,879
supported still may send 1.0 requests

00:13:37,300 --> 00:13:41,589
and the way to differ between Staubach

00:13:39,879 --> 00:13:43,720
between those requests is by this

00:13:41,589 --> 00:13:47,230
request line then we have their headers

00:13:43,720 --> 00:13:50,889
the metadata the thing that makes it in

00:13:47,230 --> 00:13:53,769
fun and here we have all the content all

00:13:50,889 --> 00:13:55,779
the metadata relevant for our request so

00:13:53,769 --> 00:13:58,329
if you look in this example we're saying

00:13:55,779 --> 00:14:01,689
that we're sending a content type of

00:13:58,329 --> 00:14:04,059
application JSON the controller is

00:14:01,689 --> 00:14:08,800
totally incorrect it's what it's more

00:14:04,059 --> 00:14:11,620
than that it's at least 12 if I managed

00:14:08,800 --> 00:14:14,680
to count it correctly and we try to send

00:14:11,620 --> 00:14:17,620
a request from your storage in HTTP

00:14:14,680 --> 00:14:20,199
those those three blocks of those

00:14:17,620 --> 00:14:23,319
separators is how a request looks like

00:14:20,199 --> 00:14:25,420
note that we have a new line between the

00:14:23,319 --> 00:14:26,079
header and the body part it's not by

00:14:25,420 --> 00:14:28,300
mistake

00:14:26,079 --> 00:14:32,379
it's the way we differ between headers

00:14:28,300 --> 00:14:36,009
and a body itself also it's important to

00:14:32,379 --> 00:14:38,500
say body is not always included so in

00:14:36,009 --> 00:14:40,540
this in this example with an impossible

00:14:38,500 --> 00:14:43,779
question post request does requires

00:14:40,540 --> 00:14:45,759
requires us at the sender body but if

00:14:43,779 --> 00:14:48,759
would send a get request or delivery

00:14:45,759 --> 00:14:50,730
quest it wouldn't matter we just see the

00:14:48,759 --> 00:14:54,459
request line and we'll see the headers

00:14:50,730 --> 00:14:57,370
and just kind of a little we can treat

00:14:54,459 --> 00:15:00,430
it here and also the controversy is not

00:14:57,370 --> 00:15:02,139
exactly the cheating body so it's also

00:15:00,430 --> 00:15:04,319
the cheating path but there's also

00:15:02,139 --> 00:15:06,700
another cheat death so who can identify

00:15:04,319 --> 00:15:09,800
cheated

00:15:06,700 --> 00:15:11,600
you know what something else that the

00:15:09,800 --> 00:15:14,149
girls you can send whatever use relating

00:15:11,600 --> 00:15:16,610
to one otherwise the he needs some

00:15:14,149 --> 00:15:19,820
chance said no no no clothes

00:15:16,610 --> 00:15:23,959
yeah is a very nice how do you know that

00:15:19,820 --> 00:15:26,120
what you did the Colin is not binary

00:15:23,959 --> 00:15:28,190
just because you can read it but it's a

00:15:26,120 --> 00:15:31,600
little if you gzip how can you read it

00:15:28,190 --> 00:15:34,160
so very good nice you get two points

00:15:31,600 --> 00:15:39,260
you know also said connection keep alive

00:15:34,160 --> 00:15:41,029
and it's slight anything so that's an

00:15:39,260 --> 00:15:43,399
that's the Costello I mentioned before

00:15:41,029 --> 00:15:44,959
the hosta that is the one that allows to

00:15:43,399 --> 00:15:47,570
distinguish between different web

00:15:44,959 --> 00:15:49,220
servers so we shall briefly mentioned

00:15:47,570 --> 00:15:51,950
we're posting and we're gonna talk about

00:15:49,220 --> 00:15:55,430
it with bonus slides just in a

00:15:51,950 --> 00:15:59,000
high-level the host header is something

00:15:55,430 --> 00:16:01,940
that allow us to do complex stuff like

00:15:59,000 --> 00:16:05,149
having one single web server that

00:16:01,940 --> 00:16:08,230
handles different sites and if we're

00:16:05,149 --> 00:16:12,730
looking like 90s and beginning of 2000

00:16:08,230 --> 00:16:15,620
we had lots of a batch installation or

00:16:12,730 --> 00:16:18,500
httpd that we had beautiful hosting

00:16:15,620 --> 00:16:20,750
files so how we would distinguish

00:16:18,500 --> 00:16:23,180
between different websites just because

00:16:20,750 --> 00:16:26,060
it should be one point one required this

00:16:23,180 --> 00:16:29,050
field to be mandatory every web server

00:16:26,060 --> 00:16:32,149
came to a special outing based that

00:16:29,050 --> 00:16:34,820
hospital so if you're hosting five sites

00:16:32,149 --> 00:16:39,079
on a single server we know how to all

00:16:34,820 --> 00:16:41,540
between them only by that the content

00:16:39,079 --> 00:16:43,810
negotiation bout so here we can see the

00:16:41,540 --> 00:16:47,360
client says I am willing to accept

00:16:43,810 --> 00:16:49,490
application Jason as the response and we

00:16:47,360 --> 00:16:51,560
also lied again he was saying that we

00:16:49,490 --> 00:16:54,380
also want to assert encoding for Jesus

00:16:51,560 --> 00:16:56,959
while explained X what's interesting to

00:16:54,380 --> 00:17:00,560
see here that besides the chassis itself

00:16:56,959 --> 00:17:03,199
the response here is a chaser we also

00:17:00,560 --> 00:17:05,839
could receive here other world that

00:17:03,199 --> 00:17:09,079
we're gonna see in the photo site other

00:17:05,839 --> 00:17:12,589
sites and that's how we're telling the

00:17:09,079 --> 00:17:16,039
silver watch a what metadata a solid

00:17:12,589 --> 00:17:20,630
what meant what data we want on the

00:17:16,039 --> 00:17:23,600
I think if there wasn't such ability

00:17:20,630 --> 00:17:26,449
would public looking so much so much

00:17:23,600 --> 00:17:30,200
about they should to be and just because

00:17:26,449 --> 00:17:33,919
of those hellos and the entity Huddle's

00:17:30,200 --> 00:17:36,799
entity hello star used to specify the

00:17:33,919 --> 00:17:39,169
payload types so besides the fact that

00:17:36,799 --> 00:17:41,299
we said were willing to accept JSON as

00:17:39,169 --> 00:17:44,630
the response for saying we are

00:17:41,299 --> 00:17:47,179
transmitting you now a JSON payload of a

00:17:44,630 --> 00:17:50,360
content landfill fix do you know wait

00:17:47,179 --> 00:17:53,029
we've insane continent like what's the

00:17:50,360 --> 00:17:55,030
problem of bringing the payload and not

00:17:53,029 --> 00:17:58,089
caring about the land

00:17:55,030 --> 00:17:58,089
[Music]

00:17:59,019 --> 00:18:04,510
why would we leave in one second why

00:18:01,250 --> 00:18:08,120
would we need check something for duper

00:18:04,510 --> 00:18:09,710
z11 know that you got everything okay do

00:18:08,120 --> 00:18:12,950
you want to make sure you didn't get

00:18:09,710 --> 00:18:18,350
something additional okay so that's a

00:18:12,950 --> 00:18:18,889
good point but so going with this state

00:18:18,350 --> 00:18:21,799
of mind

00:18:18,889 --> 00:18:25,909
why would you make contact make sure you

00:18:21,799 --> 00:18:28,309
got all the data okay that's yes or less

00:18:25,909 --> 00:18:36,169
but why is it so important to make sure

00:18:28,309 --> 00:18:38,950
that you got all data that's we're

00:18:36,169 --> 00:18:38,950
getting bail yes

00:18:44,190 --> 00:18:49,580
[Music]

00:18:45,850 --> 00:18:52,669
almost the best question is this if you

00:18:49,580 --> 00:18:54,350
using TCP ECPA gives you this p gives

00:18:52,669 --> 00:18:56,870
you an abstraction abstraction of an

00:18:54,350 --> 00:18:58,909
infinite stream of data okay and if you

00:18:56,870 --> 00:19:02,299
have an infinite stream of data won't

00:18:58,909 --> 00:19:04,669
you stop reading from it all right like

00:19:02,299 --> 00:19:06,679
what does the body end maybe it's like

00:19:04,669 --> 00:19:08,690
ten megabytes maybe 100 megabytes maybe

00:19:06,679 --> 00:19:12,740
it's a stream that never ends right so

00:19:08,690 --> 00:19:14,299
how much do you weight from string so

00:19:12,740 --> 00:19:18,980
you need to know which is why we have

00:19:14,299 --> 00:19:20,539
content length and wanted to keep it is

00:19:18,980 --> 00:19:22,340
an open question because we're going to

00:19:20,539 --> 00:19:24,510
handle the same issue in a workshop and

00:19:22,340 --> 00:19:27,750
the hands-on part

00:19:24,510 --> 00:19:30,030
and let's look a bit of how the response

00:19:27,750 --> 00:19:32,820
actually looks like so the survey was

00:19:30,030 --> 00:19:34,710
saying back hey I'm still cooking and

00:19:32,820 --> 00:19:37,710
the same protocol and I'm giving you now

00:19:34,710 --> 00:19:40,710
a stethoscope the status code identifies

00:19:37,710 --> 00:19:42,780
how how the response behaves so in this

00:19:40,710 --> 00:19:44,820
case or in this example we can see that

00:19:42,780 --> 00:19:48,180
the request went fine and we got 200

00:19:44,820 --> 00:19:51,300
okay does anyone know why I will sing

00:19:48,180 --> 00:19:54,870
okay we're not just saying HTTP 1 1 200

00:19:51,300 --> 00:20:02,730
why we need extra string extra extra

00:19:54,870 --> 00:20:14,910
bytes on the network and just see what

00:20:02,730 --> 00:20:16,590
would happen is but since 200 not ok but

00:20:14,910 --> 00:20:19,530
the response like they responsible here

00:20:16,590 --> 00:20:21,960
is 200 but the string in a weight is not

00:20:19,530 --> 00:20:27,270
okay maybe something like logs you will

00:20:21,960 --> 00:20:29,490
see like 200 and then like so we're

00:20:27,270 --> 00:20:32,640
gonna also sit in the workshop of the

00:20:29,490 --> 00:20:35,040
Python but I'll give you a spoiler maybe

00:20:32,640 --> 00:20:39,630
it doesn't help anything or maybe it

00:20:35,040 --> 00:20:41,940
does so let's look at the headers again

00:20:39,630 --> 00:20:43,500
we're having their their status line the

00:20:41,940 --> 00:20:44,940
same like in the request we have the

00:20:43,500 --> 00:20:47,370
request line here we have the status

00:20:44,940 --> 00:20:49,140
line then we have the headers and we can

00:20:47,370 --> 00:20:50,760
we again have the same pattern of new

00:20:49,140 --> 00:20:52,590
line and then body that's how we

00:20:50,760 --> 00:20:53,970
separate between the metadata of the

00:20:52,590 --> 00:20:57,570
request which is the header and the

00:20:53,970 --> 00:21:00,090
status line to the actual body and we

00:20:57,570 --> 00:21:03,360
can see here just a basic a the permit

00:21:00,090 --> 00:21:09,470
HTML and many many handles that

00:21:03,360 --> 00:21:13,650
specifying like caching and again gzip

00:21:09,470 --> 00:21:16,770
and those the caching headers you can

00:21:13,650 --> 00:21:18,840
see in this example the response gonna

00:21:16,770 --> 00:21:23,570
be cached by the bowels or specified by

00:21:18,840 --> 00:21:26,400
the time we sent and the tag specifies

00:21:23,570 --> 00:21:27,870
usually it's a hash it's an md5 hash I

00:21:26,400 --> 00:21:31,470
kind of cheated the hill but you get the

00:21:27,870 --> 00:21:33,710
point and that's how we we use the total

00:21:31,470 --> 00:21:35,659
to leverage catch all about them we can

00:21:33,710 --> 00:21:38,090
to the client hey this content is

00:21:35,659 --> 00:21:40,640
probably not gonna change for at least X

00:21:38,090 --> 00:21:42,770
amount of time you don't actually have

00:21:40,640 --> 00:21:45,830
to research it you just can store it in

00:21:42,770 --> 00:21:47,929
your back-end and browsers do care about

00:21:45,830 --> 00:21:50,450
those headers usually your which

00:21:47,929 --> 00:21:53,720
declines doesn't because most of our

00:21:50,450 --> 00:21:57,520
clients are just stateless ups but we

00:21:53,720 --> 00:22:02,090
can't insure leverage those things

00:21:57,520 --> 00:22:04,730
before we talk about we make brief stops

00:22:02,090 --> 00:22:08,029
we could stay on do some demos and then

00:22:04,730 --> 00:22:09,880
start the first exercise so please open

00:22:08,029 --> 00:22:12,740
your browser and go to this address

00:22:09,880 --> 00:22:14,690
okay and at some point it's gonna ask

00:22:12,740 --> 00:22:17,419
you per token which is written just

00:22:14,690 --> 00:22:19,330
below the you up so wait a few minutes

00:22:17,419 --> 00:22:22,880
to do that

00:22:19,330 --> 00:22:25,100
okay cool so I'm gonna I'm gonna use net

00:22:22,880 --> 00:22:30,919
hat anyone everyone knows what math camp

00:22:25,100 --> 00:22:32,929
is like can't give up the host so netcat

00:22:30,919 --> 00:22:34,100
is like utility that allows me to send

00:22:32,929 --> 00:22:35,450
well data to a socket

00:22:34,100 --> 00:22:42,140
okay so I'm going to try and open a

00:22:35,450 --> 00:22:44,570
connection to www.google.com right on

00:22:42,140 --> 00:22:48,590
port 80 which is by the standard port

00:22:44,570 --> 00:22:53,529
for HTTP all right what's going it's

00:22:48,590 --> 00:22:56,149
nice but it should be dot-com yeah I

00:22:53,529 --> 00:22:59,510
would argue that Google some kind of a

00:22:56,149 --> 00:23:01,399
con job but maybe yeah and now I'm going

00:22:59,510 --> 00:23:04,429
to crash my whole image to be requests

00:23:01,399 --> 00:23:08,929
okay so you can help me what's the first

00:23:04,429 --> 00:23:15,850
line of an HTTP request get slash all

00:23:08,929 --> 00:23:15,850
right I just be kind of hunting sock

00:23:17,830 --> 00:23:26,080
efficient since it should be a so sorry

00:23:26,200 --> 00:23:33,830
one blue one and in to give it some

00:23:29,240 --> 00:23:37,220
headers all right so how does but let's

00:23:33,830 --> 00:23:43,280
give it a head our host blow you

00:23:37,220 --> 00:23:46,880
Oh calm okay and the user-agent football

00:23:43,280 --> 00:23:53,080
because football in doing here okay I

00:23:46,880 --> 00:23:55,190
want the content type we want text HTML

00:23:53,080 --> 00:23:59,440
so we don't actually care about the

00:23:55,190 --> 00:24:02,660
child said but include any way UDS eight

00:23:59,440 --> 00:24:04,370
okay what does of the basic head of any

00:24:02,660 --> 00:24:06,920
dissent like I don't actually need to go

00:24:04,370 --> 00:24:10,280
through it more because technically

00:24:06,920 --> 00:24:12,200
speaking yet doesn't need to have any

00:24:10,280 --> 00:24:13,520
content so I don't need content length

00:24:12,200 --> 00:24:21,320
I'm gonna send it anyway it's the

00:24:13,520 --> 00:24:24,290
visible cool and don't tell us on a gun

00:24:21,320 --> 00:24:26,540
response ok so going back up let's look

00:24:24,290 --> 00:24:28,280
at the response that I got you might

00:24:26,540 --> 00:24:31,340
want to do this yourselves as well on

00:24:28,280 --> 00:24:33,490
your own personal instance to see what's

00:24:31,340 --> 00:24:36,500
going on so this is the payload

00:24:33,490 --> 00:24:38,750
basically as you can see in parts of

00:24:36,500 --> 00:24:42,320
HTML Javascript and then ugly stuff that

00:24:38,750 --> 00:24:44,210
we don't want to care about okay so but

00:24:42,320 --> 00:24:45,920
can we have the headers what's possible

00:24:44,210 --> 00:24:47,990
so what not so good what happened i

00:24:45,920 --> 00:24:51,140
clicked to handles like I said to you

00:24:47,990 --> 00:24:54,380
know to neurons this tells the server

00:24:51,140 --> 00:24:56,810
the quest is terminated okay so know

00:24:54,380 --> 00:24:58,820
that okay that's it it can begin

00:24:56,810 --> 00:25:01,370
processing it okay if you remember

00:24:58,820 --> 00:25:03,500
because those content length zero this

00:25:01,370 --> 00:25:05,720
this is how the server knows just it

00:25:03,500 --> 00:25:08,750
doesn't need to expect no data they can

00:25:05,720 --> 00:25:10,910
just start processing in some response

00:25:08,750 --> 00:25:13,850
and then it responded to spawned it with

00:25:10,910 --> 00:25:16,610
this lovely response which is OK the

00:25:13,850 --> 00:25:17,300
protocol ever is one point one has

00:25:16,610 --> 00:25:20,990
negotiated

00:25:17,300 --> 00:25:24,040
two hundred okay the date okay when this

00:25:20,990 --> 00:25:27,020
request was the position was crafted

00:25:24,040 --> 00:25:30,110
expires me - one please don't catch I

00:25:27,020 --> 00:25:32,770
thought okay cache control also says

00:25:30,110 --> 00:25:36,290
it's private meaning don't care shut and

00:25:32,770 --> 00:25:39,290
Max age of zero which means don't cash

00:25:36,290 --> 00:25:41,500
it you notice that you don't cash it

00:25:39,290 --> 00:25:45,950
several times that really really mean it

00:25:41,500 --> 00:25:48,290
okay so content content text/html as

00:25:45,950 --> 00:25:48,910
requested but you would notice something

00:25:48,290 --> 00:25:53,890
different

00:25:48,910 --> 00:25:57,170
requested charset utf-8 they gave us

00:25:53,890 --> 00:26:00,350
they gave us something else yes they

00:25:57,170 --> 00:26:07,520
gave us these no in 1859 one

00:26:00,350 --> 00:26:09,860
okay so Condit that's right sorry wrong

00:26:07,520 --> 00:26:11,960
Heather I would contact instead of

00:26:09,860 --> 00:26:13,610
accept don't go away thank you

00:26:11,960 --> 00:26:17,720
so this is why they gave me the default

00:26:13,610 --> 00:26:19,670
consulate thanks the server okay this

00:26:17,720 --> 00:26:22,580
means this is not mandatory but most

00:26:19,670 --> 00:26:24,650
servers who have this he tells you which

00:26:22,580 --> 00:26:27,290
cell is serving in the content usually

00:26:24,650 --> 00:26:31,549
when the nginx or Apache or whatever

00:26:27,290 --> 00:26:33,710
GWS is Google's private server okay it's

00:26:31,549 --> 00:26:35,809
a nice way to identify the servers on

00:26:33,710 --> 00:26:39,020
the internet like well which program the

00:26:35,809 --> 00:26:40,820
morning however it's also very easy to

00:26:39,020 --> 00:26:42,350
change so you might see what I was

00:26:40,820 --> 00:26:46,100
thinking they want to put them I for

00:26:42,350 --> 00:26:49,100
example when I worked in wigs and the we

00:26:46,100 --> 00:26:53,059
use nginx but they compile it such that

00:26:49,100 --> 00:26:58,100
the server headed to P akka so yeah

00:26:53,059 --> 00:27:00,470
nothing rushes so you can access

00:26:58,100 --> 00:27:02,360
protection like movement that said

00:27:00,470 --> 00:27:04,790
cookie this is how cookies are being

00:27:02,360 --> 00:27:06,770
said okay so we didn't talk about

00:27:04,790 --> 00:27:08,660
cookies stole cookies is not sticking

00:27:06,770 --> 00:27:12,740
speaking part of the HTTP protocol it's

00:27:08,660 --> 00:27:14,919
like and it is actually people not

00:27:12,740 --> 00:27:17,690
talking about that kind of an extension

00:27:14,919 --> 00:27:20,540
mostly for browsers okay which is why

00:27:17,690 --> 00:27:22,610
we're not talking about that but it's

00:27:20,540 --> 00:27:23,960
also said in the headers the special

00:27:22,610 --> 00:27:26,390
header called said cookie and the

00:27:23,960 --> 00:27:29,570
request also has a header called cookie

00:27:26,390 --> 00:27:31,520
which can be put can be it can be able

00:27:29,570 --> 00:27:34,580
to put times we can say that before but

00:27:31,520 --> 00:27:36,440
headers can appear multiple times okay

00:27:34,580 --> 00:27:38,840
it's on a single header you might have

00:27:36,440 --> 00:27:41,990
several lines with the same header same

00:27:38,840 --> 00:27:43,130
header key okay and so if anyone is

00:27:41,990 --> 00:27:45,280
using web hashmaps

00:27:43,130 --> 00:27:49,270
to store headers you're doing it wrong

00:27:45,280 --> 00:27:51,679
yes I've seen this many times no just no

00:27:49,270 --> 00:27:55,250
okay as you can see several cookies are

00:27:51,679 --> 00:27:57,620
being set okay and then you get accept

00:27:55,250 --> 00:28:01,110
ideas and stuff like that and then you

00:27:57,620 --> 00:28:06,000
get one line you on which

00:28:01,110 --> 00:28:07,890
and you get a body okay so I'm gonna ask

00:28:06,000 --> 00:28:12,380
you a question we didn't see content

00:28:07,890 --> 00:28:16,740
playing field right why not

00:28:12,380 --> 00:28:22,740
sorry no it's in response there's no

00:28:16,740 --> 00:28:24,990
content dense the entire PCPD no no so

00:28:22,740 --> 00:28:30,410
how other the client know where to stop

00:28:24,990 --> 00:28:34,290
reading from the sling so you think this

00:28:30,410 --> 00:28:36,120
Authority so Michael mentioned this

00:28:34,290 --> 00:28:39,060
earlier okay

00:28:36,120 --> 00:28:40,350
chunked response or chunked body because

00:28:39,060 --> 00:28:43,320
you see the transfer and calling

00:28:40,350 --> 00:28:45,210
chunking okay so this is a slightly

00:28:43,320 --> 00:28:47,310
different protocol to send body a

00:28:45,210 --> 00:28:49,890
basically standing and sent data in the

00:28:47,310 --> 00:28:51,870
stream try to swim and ever have a

00:28:49,890 --> 00:28:55,820
chunked it was terminated by again

00:28:51,870 --> 00:28:59,340
Newlin you can send several chunks okay

00:28:55,820 --> 00:29:01,050
we're gonna talk about but they didn't

00:28:59,340 --> 00:29:03,720
workshop when you get to streaming and

00:29:01,050 --> 00:29:05,490
something called the subside event but

00:29:03,720 --> 00:29:08,640
this is the basic ideal this is how we

00:29:05,490 --> 00:29:11,190
can send and presumably even in the

00:29:08,640 --> 00:29:13,980
amount of data or a lot of data without

00:29:11,190 --> 00:29:15,930
needing to know in advance how big it is

00:29:13,980 --> 00:29:19,260
okay so you can actually send slave over

00:29:15,930 --> 00:29:21,860
HTTP fun fact all the videos that you

00:29:19,260 --> 00:29:25,980
see online on the internet today using

00:29:21,860 --> 00:29:27,390
HTTP okay Netflix YouTube whatever a

00:29:25,980 --> 00:29:29,040
long time ago used to have the

00:29:27,390 --> 00:29:31,140
specialized protocols for video like

00:29:29,040 --> 00:29:33,960
audience spinning stuff like that okay P

00:29:31,140 --> 00:29:36,180
no news that anymore now every on top of

00:29:33,960 --> 00:29:38,610
HTTP and the way that works is because

00:29:36,180 --> 00:29:40,650
we actually have streaming in HTTP

00:29:38,610 --> 00:29:47,910
notice so this is what transfer encoding

00:29:40,650 --> 00:29:50,300
chapter is and this is the body I so

00:29:47,910 --> 00:29:53,400
this is saying here thank you this is

00:29:50,300 --> 00:29:55,410
basically the chunk header okay

00:29:53,400 --> 00:29:58,380
the first thing here which tells the

00:29:55,410 --> 00:30:00,450
client how big this chunk is so the

00:29:58,380 --> 00:30:03,210
chunk poseable basically is I'm going to

00:30:00,450 --> 00:30:04,650
tell you how much is that content length

00:30:03,210 --> 00:30:06,600
more or less before chunks I'm going to

00:30:04,650 --> 00:30:08,700
tell you how much data will send this

00:30:06,600 --> 00:30:11,260
chunk and you weight off the string that

00:30:08,700 --> 00:30:13,220
size of chunk and then

00:30:11,260 --> 00:30:14,750
internally that chunk and then we're

00:30:13,220 --> 00:30:17,150
going to send another chunk in the same

00:30:14,750 --> 00:30:21,740
format and so on so on so on okay

00:30:17,150 --> 00:30:24,470
that's basically that thank you okay so

00:30:21,740 --> 00:30:28,750
so if anyone tried it with medica and

00:30:24,470 --> 00:30:31,700
look like top know anyone yes quite

00:30:28,750 --> 00:30:34,450
highly recommend that you try it okay

00:30:31,700 --> 00:30:37,550
and you can actually implement a netcat

00:30:34,450 --> 00:30:39,440
basic seller as well not only a client

00:30:37,550 --> 00:30:42,260
it's not very very hard there's actually

00:30:39,440 --> 00:30:45,790
framework looking up on github it's

00:30:42,260 --> 00:30:47,750
called - and balls okay it's like

00:30:45,790 --> 00:30:50,630
everyone knows who we are players

00:30:47,750 --> 00:30:53,000
so those passion balls it's something

00:30:50,630 --> 00:30:55,370
horrible the default walls like your

00:30:53,000 --> 00:30:58,040
eyes bleed if you look at it but it's

00:30:55,370 --> 00:31:00,170
fun and it's basically a web server with

00:30:58,040 --> 00:31:02,800
a net cat and stuff like that in -

00:31:00,170 --> 00:31:07,520
because why not

00:31:02,800 --> 00:31:10,310
yes okay so the last chunk okay how do

00:31:07,520 --> 00:31:11,750
we know that it's the last time what I

00:31:10,310 --> 00:31:12,710
can say you see the zero here at the

00:31:11,750 --> 00:31:15,470
bottom okay

00:31:12,710 --> 00:31:17,390
this basically tells the client and this

00:31:15,470 --> 00:31:19,850
is the last chunk I'm saying the last

00:31:17,390 --> 00:31:24,260
chunk is zero bytes okay so no that's it

00:31:19,850 --> 00:31:26,780
that's that's how yeah so the way the

00:31:24,260 --> 00:31:32,690
workshops gonna work is you have your

00:31:26,780 --> 00:31:35,390
own have HTTP folder cloned on you don't

00:31:32,690 --> 00:31:42,010
cloned she didn't know constant so close

00:31:35,390 --> 00:31:52,460
just go okay HTTP GET comb a visionary

00:31:42,010 --> 00:31:53,810
ish long /h the the pain and now that

00:31:52,460 --> 00:31:56,690
it's cloned you can just go in and you

00:31:53,810 --> 00:31:57,950
know you can start the workshop and I'm

00:31:56,690 --> 00:31:59,720
going to show you a little bit unstable

00:31:57,950 --> 00:32:03,140
volts okay and then you can implement

00:31:59,720 --> 00:32:05,720
the first exercise yourself so the way

00:32:03,140 --> 00:32:07,460
that works is first you have terminals

00:32:05,720 --> 00:32:08,660
here you can open more windows if you

00:32:07,460 --> 00:32:11,080
want okay

00:32:08,660 --> 00:32:14,090
very easy you're the plus Putney and

00:32:11,080 --> 00:32:16,130
then you've got here the whiteboard

00:32:14,090 --> 00:32:18,830
slides and stuff like that

00:32:16,130 --> 00:32:21,500
and most importantly you have Ned - okay

00:32:18,830 --> 00:32:22,350
which allows you to edit I personally

00:32:21,500 --> 00:32:24,509
prefer to use

00:32:22,350 --> 00:32:29,070
then but you can use the built-in net or

00:32:24,509 --> 00:32:31,889
whatever it is well okay and then inside

00:32:29,070 --> 00:32:34,230
of HTTP those levels directly

00:32:31,889 --> 00:32:37,230
okay you go to the levels directory

00:32:34,230 --> 00:32:41,070
inside there's level one it's like a

00:32:37,230 --> 00:32:42,779
game you're going to level one and two

00:32:41,070 --> 00:32:46,139
files though with me and serve up your

00:32:42,779 --> 00:32:48,570
wine okay believe me it's easier to read

00:32:46,139 --> 00:32:50,700
it on off of github so open the bit of a

00:32:48,570 --> 00:32:54,179
Poe story and just surrender those

00:32:50,700 --> 00:32:55,980
markdown there's it's so much easier so

00:32:54,179 --> 00:32:58,789
I'm going to do that just to show you

00:32:55,980 --> 00:32:58,789
what's going on

00:32:59,779 --> 00:33:09,000
so levels level one amazing so what are

00:33:06,509 --> 00:33:10,889
we doing this this exercise it's a

00:33:09,000 --> 00:33:12,899
warm-up exercise just so we know that

00:33:10,889 --> 00:33:16,500
you're all comfortable and stable and

00:33:12,899 --> 00:33:17,909
using lean on some Python and just

00:33:16,500 --> 00:33:21,629
basically have to have it to serve your

00:33:17,909 --> 00:33:23,639
why and implement the response to a

00:33:21,629 --> 00:33:25,379
request okay so the way that you know

00:33:23,639 --> 00:33:27,509
the exercise world is if you

00:33:25,379 --> 00:33:30,570
successfully you see or whether whatever

00:33:27,509 --> 00:33:32,940
h-2b client to submit a request and get

00:33:30,570 --> 00:33:37,409
a response like a valid one response

00:33:32,940 --> 00:33:40,070
from the server okay so one second going

00:33:37,409 --> 00:33:43,950
back to strago I'm gonna do VI

00:33:40,070 --> 00:33:45,480
so why okay so this is what it looks

00:33:43,950 --> 00:33:48,710
like and you see what the to do to

00:33:45,480 --> 00:33:51,149
Louise okay so throughout the workshop

00:33:48,710 --> 00:33:52,620
we're gonna head into Python files and

00:33:51,149 --> 00:33:54,059
places where you have to do the

00:33:52,620 --> 00:33:57,480
headaches well you need to add your own

00:33:54,059 --> 00:33:59,309
code solve the exercise or clearly mark

00:33:57,480 --> 00:34:02,730
in to do so just look for what you do

00:33:59,309 --> 00:34:06,029
and you know don't okay so now that you

00:34:02,730 --> 00:34:08,369
know what to do go and do it okay and

00:34:06,029 --> 00:34:11,159
you've noticed in the readme that the

00:34:08,369 --> 00:34:16,800
links to the necessary documentation so

00:34:11,159 --> 00:34:18,690
yeah feel free yeah and don't try to do

00:34:16,800 --> 00:34:21,329
all the levels because we still have the

00:34:18,690 --> 00:34:23,550
contents on the slides and after if

00:34:21,329 --> 00:34:25,800
anyone of you manage to pass level 4 in

00:34:23,550 --> 00:34:28,169
the next 20 minutes it's gonna be

00:34:25,800 --> 00:34:30,380
amazing but please try to avoid personal

00:34:28,169 --> 00:34:35,150
yeah please

00:34:30,380 --> 00:34:37,500
- good thank you yes they stop please

00:34:35,150 --> 00:34:40,320
another thing we're gonna be walking

00:34:37,500 --> 00:34:44,010
between you people so if you need help

00:34:40,320 --> 00:34:47,370
just do this or say come help me or

00:34:44,010 --> 00:34:50,870
scream I don't know whatever the delays

00:34:47,370 --> 00:34:53,400
to close the workshop okay at the bottom

00:34:50,870 --> 00:34:55,590
if you want to access the machine from

00:34:53,400 --> 00:34:59,730
Plaza sorry for interrupting again okay

00:34:55,590 --> 00:35:01,800
so those machine info here and you can

00:34:59,730 --> 00:35:05,010
see that it was a good machine here just

00:35:01,800 --> 00:35:08,840
copy this into a puzzle okay and you can

00:35:05,010 --> 00:35:08,840
use it in Basel all the polls are open

00:35:09,890 --> 00:35:16,080
raise your hands who finished level one

00:35:13,850 --> 00:35:20,430
who finished level two

00:35:16,080 --> 00:35:25,110
no don't do level two yet no no no no

00:35:20,430 --> 00:35:27,420
hole didn't even starts in most

00:35:25,110 --> 00:35:29,670
important anyone of you managed to get

00:35:27,420 --> 00:35:33,840
to level four in so please stop being so

00:35:29,670 --> 00:35:35,760
fast and we're not gonna do all the

00:35:33,840 --> 00:35:42,390
levels just yet we're gonna take it

00:35:35,760 --> 00:35:43,680
whether it be why do we do it don't do

00:35:42,390 --> 00:35:48,810
anything that you don't tell you to do

00:35:43,680 --> 00:35:51,540
is you know much alive everything is

00:35:48,810 --> 00:35:57,150
fine only specific intervals that don'ts

00:35:51,540 --> 00:36:00,030
disappearance thank you oh I'm going to

00:35:57,150 --> 00:36:02,850
show you the solution very fast

00:36:00,030 --> 00:36:10,130
okay I'm going to walk you through the

00:36:02,850 --> 00:36:15,440
solution on ISO C levels that ch2 girls

00:36:10,130 --> 00:36:18,180
that was their one amazing okay so

00:36:15,440 --> 00:36:22,320
everyone see this thing everyone sees

00:36:18,180 --> 00:36:24,750
this see one doing okay so the path a

00:36:22,320 --> 00:36:27,480
statement in Python is just know what

00:36:24,750 --> 00:36:29,550
doesn't do anything just go to fill the

00:36:27,480 --> 00:36:30,110
space that we need something in blog for

00:36:29,550 --> 00:36:32,330
the

00:36:30,110 --> 00:36:35,060
to be valid we don't need it so I'm

00:36:32,330 --> 00:36:40,270
going to change it remove it and I'm

00:36:35,060 --> 00:36:43,820
going to do this so send response okay

00:36:40,270 --> 00:36:46,930
so this is like a meta that sends the

00:36:43,820 --> 00:36:49,910
response point it's a sign of a request

00:36:46,930 --> 00:36:52,360
another sponsored and we'll send okay

00:36:49,910 --> 00:36:59,120
and then we'll send some headers so send

00:36:52,360 --> 00:37:02,120
Adam so this case once and several

00:36:59,120 --> 00:37:05,060
header it's demo syllabus I'm going to

00:37:02,120 --> 00:37:09,560
write demo here okay and then I'm going

00:37:05,060 --> 00:37:11,480
to do and headers now this part most of

00:37:09,560 --> 00:37:15,830
you didn't do it's actually very very

00:37:11,480 --> 00:37:17,480
important what does it do until does

00:37:15,830 --> 00:37:23,540
anyone want to take a wild guess what

00:37:17,480 --> 00:37:25,730
this dude yes it sends the newline but

00:37:23,540 --> 00:37:30,290
more importantly it flushes the buffer

00:37:25,730 --> 00:37:32,750
out into the TCP stream oh guys because

00:37:30,290 --> 00:37:34,790
when you're doing when you're using TCP

00:37:32,750 --> 00:37:37,160
okay you can you can write to a string

00:37:34,790 --> 00:37:39,260
but it actually writes the TOEFL and you

00:37:37,160 --> 00:37:41,150
don't necessarily flush it until the

00:37:39,260 --> 00:37:42,770
buffer spills so you don't know exactly

00:37:41,150 --> 00:37:44,900
when the clients will get it you don't

00:37:42,770 --> 00:37:46,730
know that you actually sent it so and

00:37:44,900 --> 00:37:50,240
hello was definitely is doing things

00:37:46,730 --> 00:37:52,580
it's inserting the satellite of the new

00:37:50,240 --> 00:37:54,370
line between the handles and body

00:37:52,580 --> 00:37:57,320
basically tells the client okay I'm done

00:37:54,370 --> 00:38:00,080
right and second thing it's doing its

00:37:57,320 --> 00:38:01,730
flushing the TCP buffers and making sure

00:38:00,080 --> 00:38:04,550
that data is being sent to the client

00:38:01,730 --> 00:38:06,170
okay so that's all what it's doing don't

00:38:04,550 --> 00:38:08,480
actually need well you're a bit in the

00:38:06,170 --> 00:38:09,830
air yes you don't touch me if you have

00:38:08,480 --> 00:38:14,720
in the end which is where I put it but

00:38:09,830 --> 00:38:22,490
I'm just plain also just recently okay

00:38:14,720 --> 00:38:25,970
so those two lines now so day to day and

00:38:22,490 --> 00:38:29,240
this is basically just a warm-up

00:38:25,970 --> 00:38:32,090
exercise pretty easy pretty cool cool so

00:38:29,240 --> 00:38:32,960
anyone tried selling something that's

00:38:32,090 --> 00:38:36,450
not okay

00:38:32,960 --> 00:38:40,569
as a response thing as what does it do

00:38:36,450 --> 00:38:43,599
yes I'm excited yes I saw that you see

00:38:40,569 --> 00:38:45,130
it yes it's for humans the machines

00:38:43,599 --> 00:38:48,819
don't care the machine is only care

00:38:45,130 --> 00:38:54,160
about numbers I am NOT a number I'm

00:38:48,819 --> 00:38:55,960
unity yes whatever okay so

00:38:54,160 --> 00:38:58,900
congratulations on completing the first

00:38:55,960 --> 00:39:01,619
exercise so there are some subtle subtle

00:38:58,900 --> 00:39:04,180
differences okay so first of all

00:39:01,619 --> 00:39:06,730
legalize and identify it's assumed to be

00:39:04,180 --> 00:39:09,609
canonical usually in rest for example

00:39:06,730 --> 00:39:11,740
between is like this is the identity of

00:39:09,609 --> 00:39:14,019
an object for example and there are some

00:39:11,740 --> 00:39:16,240
other small differences like allowed

00:39:14,019 --> 00:39:19,440
characters or slightly more cut those

00:39:16,240 --> 00:39:23,140
allowed in your live in a community

00:39:19,440 --> 00:39:25,119
knowing small semantic differences but

00:39:23,140 --> 00:39:27,609
for most people it's mostly the same

00:39:25,119 --> 00:39:30,670
kind of interchangeable unless you use

00:39:27,609 --> 00:39:32,589
like really left clients which might be

00:39:30,670 --> 00:39:37,059
sometimes cunning well I know about it

00:39:32,589 --> 00:39:39,039
yeah so we're talking about your little

00:39:37,059 --> 00:39:41,440
specifically hit but most of what we say

00:39:39,039 --> 00:39:43,930
is also also applies to your right

00:39:41,440 --> 00:39:47,289
also there's something called the UN ok

00:39:43,930 --> 00:39:51,009
our name inverse officials name again

00:39:47,289 --> 00:39:52,960
not gonna go into that but cool so the

00:39:51,009 --> 00:39:55,569
next thing about the anatomy of your

00:39:52,960 --> 00:39:57,759
head it basically allows you to see the

00:39:55,569 --> 00:40:00,700
structure of an internet the internet in

00:39:57,759 --> 00:40:03,339
one line seriously so let me explain

00:40:00,700 --> 00:40:06,400
what I mean so if you look at the living

00:40:03,339 --> 00:40:08,739
in your head okay it's divided into

00:40:06,400 --> 00:40:11,859
several parts first part is the protocol

00:40:08,739 --> 00:40:14,200
HTTP or HTTPS to change what language do

00:40:11,859 --> 00:40:16,359
you talk to the server you still take

00:40:14,200 --> 00:40:18,789
that this is not encrypted okay which

00:40:16,359 --> 00:40:20,349
protocol should I use except the HTTP

00:40:18,789 --> 00:40:21,880
energy yes everyone knows other

00:40:20,349 --> 00:40:26,170
protocols that can be used when you go

00:40:21,880 --> 00:40:30,710
back give gained phone

00:40:26,170 --> 00:40:32,420
another stage FTP very good FTP in the

00:40:30,710 --> 00:40:35,150
old days there used to be like finger

00:40:32,420 --> 00:40:37,760
and like more other skill protocols that

00:40:35,150 --> 00:40:41,150
no one uses anymore but in general you

00:40:37,760 --> 00:40:44,870
can amigo values impulses to support it

00:40:41,150 --> 00:40:47,780
stuff like FTP okay so that's why then

00:40:44,870 --> 00:40:50,510
you get the husband okay so the whole

00:40:47,780 --> 00:40:53,930
thing can be an IP address or host a DNS

00:40:50,510 --> 00:40:57,920
name and this part is actually not

00:40:53,930 --> 00:41:00,830
handled by HTTP it's handled by the TCP

00:40:57,920 --> 00:41:02,870
level and the DNS tag only DNS no right

00:41:00,830 --> 00:41:05,120
so this part is handled by the operating

00:41:02,870 --> 00:41:08,540
system or the client has its own stack

00:41:05,120 --> 00:41:13,040
at this piece that's one client and then

00:41:08,540 --> 00:41:14,810
you get the port so the host part is who

00:41:13,040 --> 00:41:17,390
do I talk to whom the internet boy talk

00:41:14,810 --> 00:41:18,920
how do I get there using IP a what

00:41:17,390 --> 00:41:20,720
machine on the internet and we're

00:41:18,920 --> 00:41:25,750
getting to that concern of things and

00:41:20,720 --> 00:41:25,750
the TCP in that the pol pot what is

00:41:26,350 --> 00:41:33,950
important about you only Lucy what is

00:41:29,180 --> 00:41:34,490
the port but what is a boat well its

00:41:33,950 --> 00:41:36,050
socket

00:41:34,490 --> 00:41:40,390
come on what is it boat what is the port

00:41:36,050 --> 00:41:40,390
number what does what is the number of

00:41:42,040 --> 00:41:49,010
correct you might have several channels

00:41:45,320 --> 00:41:50,030
several communication channels in the

00:41:49,010 --> 00:41:52,730
operating systems

00:41:50,030 --> 00:41:55,370
okay they might belong to different

00:41:52,730 --> 00:41:57,440
processes on single server so there are

00:41:55,370 --> 00:41:59,360
multiple processes and when the

00:41:57,440 --> 00:42:01,460
operating system receives a packet it

00:41:59,360 --> 00:42:03,740
needs to know which process in which

00:42:01,460 --> 00:42:05,600
specific channel this packet belongs

00:42:03,740 --> 00:42:07,220
okay and this is a boat boat is

00:42:05,600 --> 00:42:09,620
basically number it's nothing more than

00:42:07,220 --> 00:42:11,900
that and you can use basically any

00:42:09,620 --> 00:42:16,430
number you want but certain numbers have

00:42:11,900 --> 00:42:19,340
been standardized so for example 80 is

00:42:16,430 --> 00:42:22,040
the default boat over HTTP servers I can

00:42:19,340 --> 00:42:23,580
we chose a different port or both for

00:42:22,040 --> 00:42:27,120
our server in the

00:42:23,580 --> 00:42:28,980
laughs atak basically can use any pot

00:42:27,120 --> 00:42:30,300
you want it just took browser if you

00:42:28,980 --> 00:42:32,160
don't tell it anything it's going to use

00:42:30,300 --> 00:42:34,560
eighty by default okay

00:42:32,160 --> 00:42:37,110
this also has one very interesting

00:42:34,560 --> 00:42:41,910
constant points it means that anyone

00:42:37,110 --> 00:42:45,380
that's using firewalls pulls intended to

00:42:41,910 --> 00:42:47,520
block ports as a defense okay is

00:42:45,380 --> 00:42:49,470
basically fooling himself because the

00:42:47,520 --> 00:42:51,270
plot is just a number that's it

00:42:49,470 --> 00:42:53,820
okay just change the port and that's it

00:42:51,270 --> 00:42:58,020
so I don't know what people do it but we

00:42:53,820 --> 00:43:00,030
do so moving on we have two paths after

00:42:58,020 --> 00:43:03,390
the boat we have the path okay and one

00:43:00,030 --> 00:43:05,550
is the path the path is basically on a

00:43:03,390 --> 00:43:07,410
web server first of all you might have

00:43:05,550 --> 00:43:09,930
multiple resources on single server

00:43:07,410 --> 00:43:13,020
maybe different pages maybe different

00:43:09,930 --> 00:43:14,730
even programs for example if you

00:43:13,020 --> 00:43:16,500
remember the old days when we used to

00:43:14,730 --> 00:43:19,080
put like multiple world person sings to

00:43:16,500 --> 00:43:21,180
self in single server so they would will

00:43:19,080 --> 00:43:23,730
discriminate it by a different path or

00:43:21,180 --> 00:43:25,230
different path graphics okay so it

00:43:23,730 --> 00:43:27,390
basically tells you which page of

00:43:25,230 --> 00:43:28,920
whistles on that program or server you

00:43:27,390 --> 00:43:31,500
want to get and then you get the

00:43:28,920 --> 00:43:35,970
question the quality string is basically

00:43:31,500 --> 00:43:38,160
parameters for the application okay

00:43:35,970 --> 00:43:42,090
we'll talk a little bit about that we

00:43:38,160 --> 00:43:45,240
get caching but strictly speaking it's

00:43:42,090 --> 00:43:47,610
like the path is like which programming

00:43:45,240 --> 00:43:50,040
server I want to activate and the

00:43:47,610 --> 00:43:52,050
queerest thing would be which arguments

00:43:50,040 --> 00:43:54,770
I want to give this program okay that's

00:43:52,050 --> 00:43:57,800
like more or less semantics of it and

00:43:54,770 --> 00:44:00,600
this is all you get requests you can put

00:43:57,800 --> 00:44:05,570
chorus playing on any type of request

00:44:00,600 --> 00:44:08,840
that you want but it's usually small

00:44:05,570 --> 00:44:12,360
it's not exactly portable it's more

00:44:08,840 --> 00:44:14,490
clean it people have that mostly get

00:44:12,360 --> 00:44:16,740
requests use query and the query string

00:44:14,490 --> 00:44:19,350
and if you have parameters that you want

00:44:16,740 --> 00:44:21,030
to send post send it in the body it's

00:44:19,350 --> 00:44:23,250
not mandatory but this is how most

00:44:21,030 --> 00:44:24,900
things work sometimes a lot of programs

00:44:23,250 --> 00:44:28,170
can read the parameters both with the

00:44:24,900 --> 00:44:30,510
body and from the query string yeah it

00:44:28,170 --> 00:44:31,830
has ups and downs I have encountered

00:44:30,510 --> 00:44:32,590
some security people

00:44:31,830 --> 00:44:34,480
who

00:44:32,590 --> 00:44:37,960
like oh don't put stuff in we're stuck

00:44:34,480 --> 00:44:39,730
it's not secure yes of course it's

00:44:37,960 --> 00:44:41,590
 because anyone can just open

00:44:39,730 --> 00:44:44,140
the body and look what's in the body as

00:44:41,590 --> 00:44:48,250
well it's encrypted and also this line

00:44:44,140 --> 00:44:51,400
is encrypted so yeah whoo yeah do use

00:44:48,250 --> 00:44:57,400
the query you have a benefit for it you

00:44:51,400 --> 00:45:00,340
want like the save of the state of pain

00:44:57,400 --> 00:45:02,200
German map you in a book okay so that's

00:45:00,340 --> 00:45:04,630
really cool because you save your ones

00:45:02,200 --> 00:45:07,210
in the bookmark if you put the state in

00:45:04,630 --> 00:45:10,210
20 states you can even actually save the

00:45:07,210 --> 00:45:13,810
state as possible bookmark this is why a

00:45:10,210 --> 00:45:17,050
cabana for example they put the entire

00:45:13,810 --> 00:45:19,890
query that you do for last except on the

00:45:17,050 --> 00:45:22,510
URL it does have some downsides for

00:45:19,890 --> 00:45:25,480
example it has limited length you mean

00:45:22,510 --> 00:45:28,180
took a lot of data probably yours not a

00:45:25,480 --> 00:45:31,660
good idea okay so any last pump it's

00:45:28,180 --> 00:45:34,780
called an ankle after the hash sign the

00:45:31,660 --> 00:45:37,240
pound sign okay so this is called an

00:45:34,780 --> 00:45:40,600
ankle and this is handled by the browser

00:45:37,240 --> 00:45:42,970
it's not even sent to the server okay so

00:45:40,600 --> 00:45:44,860
even though in fact and you can keep

00:45:42,970 --> 00:45:47,350
parameters to a webpage which go

00:45:44,860 --> 00:45:49,780
directly to JavaScript okay to the

00:45:47,350 --> 00:45:51,910
client side part of the program and

00:45:49,780 --> 00:45:54,100
they'll never transmitted to the server

00:45:51,910 --> 00:45:54,700
but not the server don't even know they

00:45:54,100 --> 00:45:56,650
exist

00:45:54,700 --> 00:45:58,690
but it step out of the URL it's

00:45:56,650 --> 00:46:00,790
basically the information that is

00:45:58,690 --> 00:46:03,130
placing that is sent to the client side

00:46:00,790 --> 00:46:05,020
code if you have any okay so it's very

00:46:03,130 --> 00:46:07,930
convenient if you have a service and I'm

00:46:05,020 --> 00:46:11,110
client sorry SPH single page application

00:46:07,930 --> 00:46:13,240
client-side program you can save any URL

00:46:11,110 --> 00:46:14,800
parameters for it and stuff like that

00:46:13,240 --> 00:46:18,490
and it will receive it through the

00:46:14,800 --> 00:46:19,960
bottom so very nice so you can actually

00:46:18,490 --> 00:46:23,380
see that they're not to move the

00:46:19,960 --> 00:46:24,940
internet you have on the right side and

00:46:23,380 --> 00:46:27,400
you have the browser client

00:46:24,940 --> 00:46:30,730
okay which is six parameters talks to an

00:46:27,400 --> 00:46:34,029
app which is on a server okay on an

00:46:30,730 --> 00:46:36,279
operating system own server and

00:46:34,029 --> 00:46:38,589
which you get to through TCP on the

00:46:36,279 --> 00:46:41,079
Internet okay that's a yes

00:46:38,589 --> 00:46:44,769
just tell me if you wrote a few years of

00:46:41,079 --> 00:46:47,319
politics yes yes are all the continents

00:46:44,769 --> 00:46:50,109
you know why because bones are

00:46:47,319 --> 00:46:52,329
remember you can top HTTP on port 80 I

00:46:50,109 --> 00:46:54,909
know you know it's confusing it's not

00:46:52,329 --> 00:46:57,849
before the default port for HTTP is 403

00:46:54,909 --> 00:46:59,649
okay but you can't talk and GPS on

00:46:57,849 --> 00:47:02,919
rotate you can talk edge pass on any

00:46:59,649 --> 00:47:07,949
port you want okay so this is very

00:47:02,919 --> 00:47:11,559
important to emphasize yeah a lot of

00:47:07,949 --> 00:47:15,519
modern-day software uses HTTP on various

00:47:11,559 --> 00:47:17,949
sports for example using volt or console

00:47:15,519 --> 00:47:20,499
stuff like that the whole talk HTTPS or

00:47:17,949 --> 00:47:22,149
HTTP and they use whatever protein want

00:47:20,499 --> 00:47:25,539
I don't even remember the default port

00:47:22,149 --> 00:47:30,879
for elastic search for example it's nine

00:47:25,539 --> 00:47:32,499
200 like 92 hundreds which is the

00:47:30,879 --> 00:47:38,049
default port for lastic search and still

00:47:32,499 --> 00:47:42,849
HTTP okay just on different boat so not

00:47:38,049 --> 00:47:44,409
to emphasize the point too much fun

00:47:42,849 --> 00:47:47,229
think about a boat whites a thing

00:47:44,409 --> 00:47:49,929
does anyone else why the Pope is

00:47:47,229 --> 00:47:52,899
painting white 80 why why this number

00:47:49,929 --> 00:47:55,239
why not yeah why not is the answer I'm

00:47:52,899 --> 00:47:58,059
just kidding but a fun fact does anyone

00:47:55,239 --> 00:48:01,779
knows each pin wasn't the only protocol

00:47:58,059 --> 00:48:04,119
the self documents of a beta let nobody

00:48:01,779 --> 00:48:07,479
amazing there was another protocol

00:48:04,119 --> 00:48:10,419
called cocoa which nobody may be in the

00:48:07,479 --> 00:48:13,479
university the 90s some maybe the other

00:48:10,419 --> 00:48:16,119
guys maybe use but it's quite add and

00:48:13,479 --> 00:48:18,549
they had 70 as default for gopher gone

00:48:16,119 --> 00:48:20,289
and my age for gopher and my person

00:48:18,549 --> 00:48:23,139
opinion that stair is and it's 80

00:48:20,289 --> 00:48:25,539
because it is greater than seven to show

00:48:23,139 --> 00:48:28,149
dominance but besides that I don't hear

00:48:25,539 --> 00:48:30,399
answer so let's talk about the HTTP

00:48:28,149 --> 00:48:33,519
method types every every request was

00:48:30,399 --> 00:48:35,499
sending over HTTP needs and has to

00:48:33,519 --> 00:48:36,609
include a meta tag meta tag is a way to

00:48:35,499 --> 00:48:38,859
distinguish between different

00:48:36,609 --> 00:48:39,909
transaction a different operations over

00:48:38,859 --> 00:48:41,310
HTTP requests

00:48:39,909 --> 00:48:42,870
so the first

00:48:41,310 --> 00:48:46,260
the most simple one that everybody knows

00:48:42,870 --> 00:48:48,570
is get get is basically hey he'll say yo

00:48:46,260 --> 00:48:51,510
ed give me the dead man please okay

00:48:48,570 --> 00:48:53,880
thank so in this example just index.html

00:48:51,510 --> 00:48:56,820
and we're gonna get the content of the

00:48:53,880 --> 00:48:59,820
document back then we have a post so

00:48:56,820 --> 00:49:02,850
post is a meta tag that allow us to send

00:48:59,820 --> 00:49:05,700
payload to the server for example we

00:49:02,850 --> 00:49:08,460
want to update our blog blog post

00:49:05,700 --> 00:49:10,350
content because we have amazing blog and

00:49:08,460 --> 00:49:12,600
we have lots of content and we want to

00:49:10,350 --> 00:49:15,420
keep it updated we can you supposed to

00:49:12,600 --> 00:49:17,720
send stuff like Jason's like metadata

00:49:15,420 --> 00:49:20,130
like they don't think basically

00:49:17,720 --> 00:49:30,150
anybody's done again go father Lincoln

00:49:20,130 --> 00:49:32,820
with his questions technically

00:49:30,150 --> 00:49:35,910
technically everything is possible

00:49:32,820 --> 00:49:41,730
surely you can do that and it's not the

00:49:35,910 --> 00:49:45,510
standard it's not people it is people to

00:49:41,730 --> 00:49:47,310
death okay so the RFC says that you're

00:49:45,510 --> 00:49:49,950
not supposed to but it doesn't prohibit

00:49:47,310 --> 00:49:53,220
it which means that most of the servers

00:49:49,950 --> 00:49:56,250
will probably not read it but but

00:49:53,220 --> 00:49:57,330
doesn't violate the standard that's

00:49:56,250 --> 00:50:00,360
correct

00:49:57,330 --> 00:50:03,330
let's say I continue so then we have the

00:50:00,360 --> 00:50:06,750
have request and have request is an easy

00:50:03,330 --> 00:50:09,660
way to get a metadata on the request so

00:50:06,750 --> 00:50:11,520
let's say we want to check if Google

00:50:09,660 --> 00:50:13,920
responsible with a certain header

00:50:11,520 --> 00:50:15,780
instead of sending get request which

00:50:13,920 --> 00:50:19,680
gonna which gonna return the whole

00:50:15,780 --> 00:50:21,600
document we may send may send and had

00:50:19,680 --> 00:50:24,270
requested just gonna send back the

00:50:21,600 --> 00:50:27,300
headers on the server the reason I say

00:50:24,270 --> 00:50:29,850
may because not all the web servers are

00:50:27,300 --> 00:50:32,250
supporting it or enabling it by default

00:50:29,850 --> 00:50:35,040
default so we'll listen I'm gonna

00:50:32,250 --> 00:50:38,040
mention a bit later and then we have

00:50:35,040 --> 00:50:43,370
another few nights types Putin delete so

00:50:38,040 --> 00:50:46,120
put semantically similar to post the way

00:50:43,370 --> 00:50:48,760
the reason would exist is to the

00:50:46,120 --> 00:50:50,860
between operations that are mutating

00:50:48,760 --> 00:50:53,140
data for example we have an existing

00:50:50,860 --> 00:50:55,510
document and we want to update its data

00:50:53,140 --> 00:50:57,790
so for example for those who are writing

00:50:55,510 --> 00:51:02,200
REST API is like the classical case

00:50:57,790 --> 00:51:06,190
while put is creating documents if you

00:51:02,200 --> 00:51:08,980
actually gonna go to the RFC so although

00:51:06,190 --> 00:51:12,010
although they turn on put they they

00:51:08,980 --> 00:51:13,510
thought maybe it might be a gonna be 40

00:51:12,010 --> 00:51:18,520
P for example because it's been

00:51:13,510 --> 00:51:20,950
uploading files and you may again may

00:51:18,520 --> 00:51:23,500
use it to create you may use it to

00:51:20,950 --> 00:51:26,740
update again as the protocol is not that

00:51:23,500 --> 00:51:29,470
for me that I could use post for every

00:51:26,740 --> 00:51:31,270
operations I want and just distinguish

00:51:29,470 --> 00:51:33,730
them by your right I could have had

00:51:31,270 --> 00:51:35,890
slash create and slash upload to

00:51:33,730 --> 00:51:38,080
distinguish between operations but I

00:51:35,890 --> 00:51:39,850
also can't distinguish between operation

00:51:38,080 --> 00:51:42,340
by using the meta tags which the

00:51:39,850 --> 00:51:44,080
protocol give us for free and give us

00:51:42,340 --> 00:51:47,470
easy way to distinguish between those

00:51:44,080 --> 00:51:49,840
and last me and delete the lip is also

00:51:47,470 --> 00:51:52,420
semantically and similar to getting them

00:51:49,840 --> 00:51:53,980
so we don't have a payload which has

00:51:52,420 --> 00:51:59,190
centered the little purse like a getter

00:51:53,980 --> 00:52:04,630
first that usually is deleting document

00:51:59,190 --> 00:52:07,150
so all those the only methods no options

00:52:04,630 --> 00:52:12,190
no sorry

00:52:07,150 --> 00:52:19,210
badge no gonna move nice nice one yes

00:52:12,190 --> 00:52:23,740
whoa place you wanna have the place no

00:52:19,210 --> 00:52:27,760
not touch okay but I don't know we need

00:52:23,740 --> 00:52:30,970
the type checker here so I don't

00:52:27,760 --> 00:52:34,410
approach nice this though it's like is

00:52:30,970 --> 00:52:34,410
it standard I don't think it's kind of

00:52:36,030 --> 00:52:40,570
nice

00:52:37,480 --> 00:52:43,000
so Tracy stand up there's also something

00:52:40,570 --> 00:52:45,850
called pops from web dev and which is

00:52:43,000 --> 00:52:48,190
like slightly different Center but on

00:52:45,850 --> 00:52:51,970
HTTP you have placed you have connect

00:52:48,190 --> 00:52:54,210
four boxes and you have sorry there's

00:52:51,970 --> 00:52:54,210
options

00:52:54,390 --> 00:53:03,630
and the ones that the coach think that I

00:52:59,100 --> 00:53:08,700
didn't know so cool so those days of the

00:53:03,630 --> 00:53:11,580
oceans is option sees make man in mind

00:53:08,700 --> 00:53:13,530
that in this case but options try to see

00:53:11,580 --> 00:53:16,410
what the available options we have in

00:53:13,530 --> 00:53:22,290
over solo so any one of you had a chance

00:53:16,410 --> 00:53:23,670
to send Kosmos a request every day so we

00:53:22,290 --> 00:53:25,530
have the concept of course they're

00:53:23,670 --> 00:53:27,770
trying to allow and this allows

00:53:25,530 --> 00:53:30,840
different domains courses each other and

00:53:27,770 --> 00:53:33,180
to allow course actually every thought

00:53:30,840 --> 00:53:35,220
every course transaction initiates with

00:53:33,180 --> 00:53:38,010
the options because the option requests

00:53:35,220 --> 00:53:40,890
as disable weather and even allowed to

00:53:38,010 --> 00:53:43,410
send you the actual request or not so

00:53:40,890 --> 00:53:44,910
internally if you're gonna open a dev

00:53:43,410 --> 00:53:47,280
tools and you're gonna see the network

00:53:44,910 --> 00:53:48,990
every course operation and when I say

00:53:47,280 --> 00:53:51,240
close I mean for example you have a job

00:53:48,990 --> 00:53:53,430
picked that sense you have the main

00:53:51,240 --> 00:53:56,100
called google.com and you want to say

00:53:53,430 --> 00:53:57,990
the request to Bing that form because

00:53:56,100 --> 00:54:00,660
you want to fetch search results for

00:53:57,990 --> 00:54:02,880
model search engines for reasons you

00:54:00,660 --> 00:54:05,070
will need to send to request options to

00:54:02,880 --> 00:54:07,740
see if you even allowed and then you can

00:54:05,070 --> 00:54:10,320
send the actual get or post request and

00:54:07,740 --> 00:54:12,870
trace trace is a really simple nice

00:54:10,320 --> 00:54:14,910
thing that reflects the payload we sent

00:54:12,870 --> 00:54:17,310
to the server so how do you know that

00:54:14,910 --> 00:54:20,580
what you sent to the server is actually

00:54:17,310 --> 00:54:22,590
what my sis to the cell phone so someone

00:54:20,580 --> 00:54:25,080
has that and they added traced to the

00:54:22,590 --> 00:54:28,470
protocol and trace just echoes or

00:54:25,080 --> 00:54:32,000
reflects back what we sent I just want

00:54:28,470 --> 00:54:34,920
to emphasize that like I think 1999

00:54:32,000 --> 00:54:36,890
almost every production web server does

00:54:34,920 --> 00:54:40,290
not allow that because ping that you'd

00:54:36,890 --> 00:54:42,000
just trying to all they all sending

00:54:40,290 --> 00:54:44,940
malicious requests going to get cookies

00:54:42,000 --> 00:54:47,070
from other people all just trying to get

00:54:44,940 --> 00:54:49,410
messed with servers like Facebook guys

00:54:47,070 --> 00:54:51,150
over here so you don't want to do that

00:54:49,410 --> 00:54:53,160
and usually in production you disable it

00:54:51,150 --> 00:54:55,470
but it's a nice facility that most of

00:54:53,160 --> 00:54:59,210
the servers do support out of out of the

00:54:55,470 --> 00:54:59,210
box if you open them with a bug

00:54:59,910 --> 00:55:05,339
let's talk a bit about response codes so

00:55:03,000 --> 00:55:08,849
we have like those five channels of

00:55:05,339 --> 00:55:10,790
response codes 1x6 every every

00:55:08,849 --> 00:55:13,440
responsible to start with one is

00:55:10,790 --> 00:55:16,050
informational it just give us

00:55:13,440 --> 00:55:20,430
information about the request yeah so

00:55:16,050 --> 00:55:23,369
the most common use case for the one

00:55:20,430 --> 00:55:26,369
under the taxes for ago she ation took

00:55:23,369 --> 00:55:29,010
like 100 continue okay so I shall

00:55:26,369 --> 00:55:30,630
request like initial request and then I

00:55:29,010 --> 00:55:32,880
get the point of continuing then the

00:55:30,630 --> 00:55:36,060
second request which is like the actual

00:55:32,880 --> 00:55:38,940
request this is usually used by talking

00:55:36,060 --> 00:55:41,930
to proxies Oh caching servers and stuff

00:55:38,940 --> 00:55:44,369
like that you're not likely to see it

00:55:41,930 --> 00:55:46,410
day to day things we're not going to

00:55:44,369 --> 00:55:48,990
talk too much about that then we have

00:55:46,410 --> 00:55:52,800
the tournament success which other one

00:55:48,990 --> 00:55:55,140
knows so someone has previously but 200

00:55:52,800 --> 00:56:01,050
other any under other numbers that you

00:55:55,140 --> 00:56:04,680
know join one yes created good 2004 but

00:56:01,050 --> 00:56:05,820
this one - only - yes okay cool so you

00:56:04,680 --> 00:56:06,560
know about that we're gonna talk about

00:56:05,820 --> 00:56:10,830
that a little bit

00:56:06,560 --> 00:56:15,480
303 access okay redirect and one knows

00:56:10,830 --> 00:56:18,510
and loves and directs right the 400 the

00:56:15,480 --> 00:56:20,070
punch is basically yesterday no but my

00:56:18,510 --> 00:56:21,960
thoughts not a sailboat fault it's a

00:56:20,070 --> 00:56:24,750
client fault okay the client has

00:56:21,960 --> 00:56:26,220
something in the wrong way we just don't

00:56:24,750 --> 00:56:28,589
understand the client or we just take

00:56:26,220 --> 00:56:30,000
the client or whatever so it's like shut

00:56:28,589 --> 00:56:32,880
up I don't understand what you want to

00:56:30,000 --> 00:56:34,349
do talk to me in any way that makes

00:56:32,880 --> 00:56:37,380
sense I don't know what to do

00:56:34,349 --> 00:56:39,119
okay 500 is a narrow but on the server

00:56:37,380 --> 00:56:42,240
side so it's basically my voltage so

00:56:39,119 --> 00:56:45,210
okay tell us overall like a crashed or

00:56:42,240 --> 00:56:47,490
maybe the backend is unavailable or

00:56:45,210 --> 00:56:49,619
something like that so basically this

00:56:47,490 --> 00:56:51,410
allows the powers of all the clients and

00:56:49,619 --> 00:56:54,150
servers to understand first of all

00:56:51,410 --> 00:56:57,300
should I try this request is the point

00:56:54,150 --> 00:56:59,310
in defining the request and whether it's

00:56:57,300 --> 00:57:01,080
my problem or I should depart my code or

00:56:59,310 --> 00:57:02,460
maybe it's for me another and like

00:57:01,080 --> 00:57:05,070
there's no point about my code because

00:57:02,460 --> 00:57:09,140
obviously what I'm doing is fine because

00:57:05,070 --> 00:57:09,140
let's start the basic distinction

00:57:11,710 --> 00:57:22,280
who knows what's a 301 raise your hands

00:57:15,460 --> 00:57:25,040
who knows whose was 308 307 nobody and

00:57:22,280 --> 00:57:26,450
you can see these people's face look

00:57:25,040 --> 00:57:30,410
looking what the is that

00:57:26,450 --> 00:57:32,300
so we have little eggs right but none

00:57:30,410 --> 00:57:34,400
not all of us knows that we have

00:57:32,300 --> 00:57:37,370
different types of fabrics for example

00:57:34,400 --> 00:57:39,650
for everyone and we'll do the difference

00:57:37,370 --> 00:57:41,150
that we know is that one experiment

00:57:39,650 --> 00:57:44,000
technically permanent saying the

00:57:41,150 --> 00:57:46,460
declines this redirect will always

00:57:44,000 --> 00:57:48,890
happen so you might you make a you

00:57:46,460 --> 00:57:51,500
do the redirect always always without

00:57:48,890 --> 00:57:54,770
sending another request then you have we

00:57:51,500 --> 00:57:57,080
also saying hey temporally I need to be

00:57:54,770 --> 00:58:00,050
directly to other and to other Ural

00:57:57,080 --> 00:58:02,300
means that if we temporally wanna be

00:58:00,050 --> 00:58:04,520
that I thought oh people to HTTP to

00:58:02,300 --> 00:58:07,310
other endpoint for any reasons we might

00:58:04,520 --> 00:58:09,770
do that and any given time the browser

00:58:07,310 --> 00:58:11,540
or the client still needs to send the

00:58:09,770 --> 00:58:15,590
original request to know whether it

00:58:11,540 --> 00:58:18,860
should be redirected or not and then we

00:58:15,590 --> 00:58:22,400
like the HTTP guys they are EXA tries to

00:58:18,860 --> 00:58:25,850
fix one issue with those two status

00:58:22,400 --> 00:58:28,130
codes is the method ID if we're gonna

00:58:25,850 --> 00:58:31,520
send the post request to an end point

00:58:28,130 --> 00:58:35,960
and end point gonna say hey do a

00:58:31,520 --> 00:58:40,040
redirect 3-1 does the post method result

00:58:35,960 --> 00:58:43,010
anyone else the answer is the protocol

00:58:40,040 --> 00:58:49,910
that care about that you may or may not

00:58:43,010 --> 00:58:51,800
and free 3 or 7 enjoy edit you want to

00:58:49,910 --> 00:58:54,290
answer this ok so let's say let's say

00:58:51,800 --> 00:58:57,230
that I have a poem on a web page

00:58:54,290 --> 00:59:01,370
ok and I click Submit so usually submit

00:58:57,230 --> 00:59:04,400
send data as post ok and you get to

00:59:01,370 --> 00:59:06,590
redirect maybe because maybe I don't

00:59:04,400 --> 00:59:08,810
know does new version that software

00:59:06,590 --> 00:59:10,720
lands with electing as well so what a

00:59:08,810 --> 00:59:15,920
puzzle would normally do in this case

00:59:10,720 --> 00:59:18,040
with the odd codes is it would issue

00:59:15,920 --> 00:59:20,200
another request to the new order has

00:59:18,040 --> 00:59:22,810
but instead of using post for the new

00:59:20,200 --> 00:59:25,060
address you get which is invalid for

00:59:22,810 --> 00:59:26,920
this phone so this will break the phone

00:59:25,060 --> 00:59:29,050
will break your site and it doesn't work

00:59:26,920 --> 00:59:30,820
okay so this was important because it

00:59:29,050 --> 00:59:32,530
wasn't clear on those little heads

00:59:30,820 --> 00:59:34,360
whether or not you should use the same

00:59:32,530 --> 00:59:36,970
method or not and most puzzle what they

00:59:34,360 --> 00:59:38,910
actually did was they used get only

00:59:36,970 --> 00:59:42,070
direct which is kind of involved in it

00:59:38,910 --> 00:59:44,980
so those two new status codes new

00:59:42,070 --> 00:59:46,870
they're like 15 years old they've added

00:59:44,980 --> 00:59:49,780
HP one one and they try to fix those

00:59:46,870 --> 00:59:52,150
issue but most of us don't even aware of

00:59:49,780 --> 00:59:53,920
that because we're so used to say free

00:59:52,150 --> 00:59:56,770
if they want to throw the web when we

00:59:53,920 --> 00:59:58,870
have to other status code there the fine

00:59:56,770 --> 01:00:01,180
tuned to most of the names like reserved

00:59:58,870 --> 01:00:02,890
in the metal type and one really really

01:00:01,180 --> 01:00:06,700
really important thing to say redirect

01:00:02,890 --> 01:00:08,230
redirect loops may and can happen what

01:00:06,700 --> 01:00:09,760
would happen if you're gonna send it

01:00:08,230 --> 01:00:11,950
feel to request to the same end point

01:00:09,760 --> 01:00:14,590
just gonna have every right loop with a

01:00:11,950 --> 01:00:16,420
regulator a club and something you're

01:00:14,590 --> 01:00:18,370
gonna implement the same way they wrote

01:00:16,420 --> 01:00:20,530
in a workshop just after another few

01:00:18,370 --> 01:00:22,360
slides and you're gonna see how your

01:00:20,530 --> 01:00:28,480
balls are behaving invader it goes

01:00:22,360 --> 01:00:33,820
spoiler not very good for that small

01:00:28,480 --> 01:00:38,080
question anyone Wilbur 303 303 direct

01:00:33,820 --> 01:00:40,600
anyone from once or twice no look it up

01:00:38,080 --> 01:00:44,650
okay so it's basically the same idea was

01:00:40,600 --> 01:00:46,540
added with the 308 is 307 it's just just

01:00:44,650 --> 01:00:48,580
numbers of the method on purpose okay

01:00:46,540 --> 01:00:52,120
but now it's like semantically clear and

01:00:48,580 --> 01:00:53,980
there's also three or four I'm sure a

01:00:52,120 --> 01:00:57,400
lot of you who have encountered fearful

01:00:53,980 --> 01:00:58,180
anyone knows what it is not modified

01:00:57,400 --> 01:01:02,260
very good

01:00:58,180 --> 01:01:03,490
so it basically tells you the from the

01:01:02,260 --> 01:01:05,950
cosmic air-conditioned method

01:01:03,490 --> 01:01:08,350
conditioning request well you can ask

01:01:05,950 --> 01:01:10,810
something in case that just a newer

01:01:08,350 --> 01:01:12,880
version and therefore semantically means

01:01:10,810 --> 01:01:15,700
local needed urgently you have it

01:01:12,880 --> 01:01:17,080
so to redirect yourself and take the

01:01:15,700 --> 01:01:20,140
version that you have that's like

01:01:17,080 --> 01:01:24,490
basically the semantics of it let's call

01:01:20,140 --> 01:01:26,800
the plane tables to be 4 X 6 so one of

01:01:24,490 --> 01:01:27,850
the things that's important to emphasize

01:01:26,800 --> 01:01:29,980
here

01:01:27,850 --> 01:01:32,110
different different status codes to

01:01:29,980 --> 01:01:34,900
differ between distinguished story

01:01:32,110 --> 01:01:36,940
between different error codes but they

01:01:34,900 --> 01:01:40,750
also have different semantics so let's

01:01:36,940 --> 01:01:43,300
talk about 409 and provides we have a

01:01:40,750 --> 01:01:46,210
different semantics of our codes that

01:01:43,300 --> 01:01:48,400
part of them are variable and some of

01:01:46,210 --> 01:01:51,160
them are not so for the very simple

01:01:48,400 --> 01:01:55,060
example follow poll does anyone knows

01:01:51,160 --> 01:01:58,690
what it stands for what that's really

01:01:55,060 --> 01:02:01,090
stands for is of us for a moment like

01:01:58,690 --> 01:02:04,210
does it always not available or

01:02:01,090 --> 01:02:06,580
temporarily not available maybe for me

01:02:04,210 --> 01:02:08,950
but is it temporally you always if I'm

01:02:06,580 --> 01:02:16,450
gonna go to slash index dot it's

01:02:08,950 --> 01:02:18,700
education means that I cannot survive so

01:02:16,450 --> 01:02:20,770
we also have size about and also it

01:02:18,700 --> 01:02:23,010
means that some of the issues are

01:02:20,770 --> 01:02:27,070
reliable some of the issues are not

01:02:23,010 --> 01:02:29,410
persistent for example 410 gone anyone

01:02:27,070 --> 01:02:31,750
heard a bit status code that's a status

01:02:29,410 --> 01:02:33,970
code that says to us that the content

01:02:31,750 --> 01:02:39,580
actually went off and we're gonna see

01:02:33,970 --> 01:02:43,090
how it affects us in different cases the

01:02:39,580 --> 01:02:43,540
most the most classic one is four zero

01:02:43,090 --> 01:02:45,820
zero

01:02:43,540 --> 01:02:48,310
I guess everyone saw that bad request so

01:02:45,820 --> 01:02:50,860
for example I'm sending some illegal

01:02:48,310 --> 01:02:54,220
formatted header Oh payload or any

01:02:50,860 --> 01:02:56,470
anything else that made the server angry

01:02:54,220 --> 01:02:58,360
note angry as in crushing not and

01:02:56,470 --> 01:03:00,490
getting my destroy an exception but

01:02:58,360 --> 01:03:03,220
angriest I'm not willing to accept your

01:03:00,490 --> 01:03:05,710
request and that's the way we mind and

01:03:03,220 --> 01:03:10,420
we may and expected a client that his

01:03:05,710 --> 01:03:14,680
request was invalid for one anyone for

01:03:10,420 --> 01:03:18,160
millions for one for one for free I know

01:03:14,680 --> 01:03:19,690
the lies correct so is it the tribal but

01:03:18,160 --> 01:03:22,000
definition is you're supposed to be

01:03:19,690 --> 01:03:27,250
drive with proper credentials but this

01:03:22,000 --> 01:03:29,470
is what means I'm very ready for talk

01:03:27,250 --> 01:03:34,200
about it for about for line contact we

01:03:29,470 --> 01:03:40,090
will not happen for line conflict

01:03:34,200 --> 01:03:45,070
No so obviously know is using optimistic

01:03:40,090 --> 01:03:46,600
locking right rest talking anyone now

01:03:45,070 --> 01:03:50,350
you're not programming something I don't

01:03:46,600 --> 01:03:53,050
know okay so let's suppose that I send a

01:03:50,350 --> 01:03:57,570
post request to a server okay yeah you

01:03:53,050 --> 01:04:00,280
should be ashamed of yourself yeah okay

01:03:57,570 --> 01:04:02,650
so let's say that you created resource

01:04:00,280 --> 01:04:04,540
on the internet using both put oh let's

01:04:02,650 --> 01:04:07,090
say that you modify a resource on the

01:04:04,540 --> 01:04:09,580
internet using a post okay it could be

01:04:07,090 --> 01:04:13,060
that at the same time someone else is

01:04:09,580 --> 01:04:14,980
changing same same missiles right so

01:04:13,060 --> 01:04:16,480
like how do you know who wins

01:04:14,980 --> 01:04:18,850
I don't know that you're not changing

01:04:16,480 --> 01:04:22,810
together or the diversion that I had is

01:04:18,850 --> 01:04:25,690
stale because he modified it no before I

01:04:22,810 --> 01:04:28,750
could to make my modifications so this

01:04:25,690 --> 01:04:31,690
is why you have 509 conflict and this is

01:04:28,750 --> 01:04:33,400
a basically the underpinning of

01:04:31,690 --> 01:04:37,300
mechanism known as optimistic locking

01:04:33,400 --> 01:04:38,980
well I send the number in headlights and

01:04:37,300 --> 01:04:40,810
the version that I have to the server

01:04:38,980 --> 01:04:43,780
and he says okay the version that you're

01:04:40,810 --> 01:04:45,610
trying to modify its tail the worst

01:04:43,780 --> 01:04:46,090
conflict someone else change it at the

01:04:45,610 --> 01:04:48,910
same time

01:04:46,090 --> 01:04:51,640
go get the resource again do whatever

01:04:48,910 --> 01:04:53,290
you wanted again okay and then make the

01:04:51,640 --> 01:04:55,360
notification you basically run it in

01:04:53,290 --> 01:04:57,520
loop until eventually you succeed okay

01:04:55,360 --> 01:05:00,280
so this is what conflict means it's

01:04:57,520 --> 01:05:05,530
actually very very important yes does

01:05:00,280 --> 01:05:08,260
the browser examples show yes so this is

01:05:05,530 --> 01:05:10,090
mostly not for puzzles okay unless the

01:05:08,260 --> 01:05:12,340
you are JavaScript code attendance this

01:05:10,090 --> 01:05:14,470
and mostly you would find it on servers

01:05:12,340 --> 01:05:16,960
that work with databases or Western

01:05:14,470 --> 01:05:18,940
Services knockin stuff maybe I think

01:05:16,960 --> 01:05:21,670
maybe like they're at home thank you

01:05:18,940 --> 01:05:23,320
yes telephones would request timeout

01:05:21,670 --> 01:05:25,090
that's that one's pretty obvious right

01:05:23,320 --> 01:05:26,980
there was timeout you can try again

01:05:25,090 --> 01:05:29,680
hopefully there will not be a timeout in

01:05:26,980 --> 01:05:32,200
the second request but it was often you

01:05:29,680 --> 01:05:35,170
would get it if you're sending the home

01:05:32,200 --> 01:05:37,330
content type for example you're asking

01:05:35,170 --> 01:05:41,200
for XML in the server personal service

01:05:37,330 --> 01:05:44,320
meant for 5-1 unavailable to legal

01:05:41,200 --> 01:05:45,380
reasons we think he added anyone knows

01:05:44,320 --> 01:05:52,850
my father

01:05:45,380 --> 01:05:56,090
one yeah sign hi it's 451 anyone with

01:05:52,850 --> 01:05:58,250
the book yeah yeah so that's one okay so

01:05:56,090 --> 01:06:01,400
that's dancing book kind of a geek joke

01:05:58,250 --> 01:06:05,000
yeah photo is my personal favorite

01:06:01,400 --> 01:06:08,960
payment acquired yeah yeah that's my

01:06:05,000 --> 01:06:10,430
Jewish side and 403 forbidden yeah

01:06:08,960 --> 01:06:12,440
you're not allowed to be to access this

01:06:10,430 --> 01:06:14,870
one you don't have missions for phone

01:06:12,440 --> 01:06:17,210
and found little things one for one and

01:06:14,870 --> 01:06:17,840
so I talked about that did method not

01:06:17,210 --> 01:06:26,000
allowed

01:06:17,840 --> 01:06:28,460
what's this one food food we'd only

01:06:26,000 --> 01:06:30,530
resource trace that the server is not

01:06:28,460 --> 01:06:32,990
willing to accept you send duck as a

01:06:30,530 --> 01:06:35,120
mentor you might get help not allowed

01:06:32,990 --> 01:06:37,880
now you get the point I supported many

01:06:35,120 --> 01:06:41,050
type again content negotiation table

01:06:37,880 --> 01:06:41,050
[Music]

01:06:46,450 --> 01:06:52,340
okay so we did not have it also the

01:06:49,990 --> 01:06:57,010
personal favorite anyone I'm not a

01:06:52,340 --> 01:06:59,870
teapot yes so look it up

01:06:57,010 --> 01:07:01,430
within the teapot protocol on the

01:06:59,870 --> 01:07:03,590
Internet nice on Etsy

01:07:01,430 --> 01:07:05,870
yeah it's amazing there was actually

01:07:03,590 --> 01:07:08,480
another one by the way there's a coffee

01:07:05,870 --> 01:07:11,360
blowing protocol okay there was a

01:07:08,480 --> 01:07:14,180
tickling Depot in protocol yeah yeah it

01:07:11,360 --> 01:07:16,370
came few years after if anyone wants to

01:07:14,180 --> 01:07:19,220
build a machine that makes this go look

01:07:16,370 --> 01:07:23,030
at that see it's pretty cool yes okay

01:07:19,220 --> 01:07:26,240
fall off versus a hotel okay so Michael

01:07:23,030 --> 01:07:29,480
mentioned is a bit earlier okay for for

01:07:26,240 --> 01:07:34,220
means not found but it may be available

01:07:29,480 --> 01:07:36,970
later okay maybe later time someone you

01:07:34,220 --> 01:07:39,770
know put this page all if you have proxy

01:07:36,970 --> 01:07:42,530
okay the proxy may had cached

01:07:39,770 --> 01:07:45,110
what is known as the negative cash

01:07:42,530 --> 01:07:47,180
meaning that it cashed that there isn't

01:07:45,110 --> 01:07:48,410
the page there and later someone with

01:07:47,180 --> 01:07:49,660
the page one or maybe it couldn't

01:07:48,410 --> 01:07:52,630
connect and confined

01:07:49,660 --> 01:07:53,110
page or whatever whatever reason so for

01:07:52,630 --> 01:07:55,480
phonons

01:07:53,110 --> 01:07:57,300
I couldn't find it but it could be

01:07:55,480 --> 01:08:01,120
available at some point in the future

01:07:57,300 --> 01:08:03,700
okay and 410 hope that means something

01:08:01,120 --> 01:08:06,100
different means it's gone it was there

01:08:03,700 --> 01:08:07,540
but someone deleted it and it's never

01:08:06,100 --> 01:08:11,190
ever ever coming back

01:08:07,540 --> 01:08:15,780
okay why is this is thinking about it

01:08:11,190 --> 01:08:18,339
anyone has I knew secret right oh yeah

01:08:15,780 --> 01:08:21,339
yes that's that's actually very good

01:08:18,339 --> 01:08:22,960
so for example if I want content if I

01:08:21,339 --> 01:08:26,710
remove the content and I wanted to move

01:08:22,960 --> 01:08:29,710
from Google failure or Yahoo or Bing or

01:08:26,710 --> 01:08:35,640
whatever search engine is out there out

01:08:29,710 --> 01:08:42,460
of this star yes what whistle whistles

01:08:35,640 --> 01:08:45,760
Yandex so no if you want to move from

01:08:42,460 --> 01:08:47,710
from in that says those but 13s isn't

01:08:45,760 --> 01:08:50,350
places like that you need to tell the

01:08:47,710 --> 01:08:52,390
caller okay that this content is gone

01:08:50,350 --> 01:08:54,339
it's never going to be the leading role

01:08:52,390 --> 01:08:56,200
and they should push it for all the

01:08:54,339 --> 01:08:58,780
caches and indices and stuff like that

01:08:56,200 --> 01:09:01,240
so this is why we have four to the full

01:08:58,780 --> 01:09:03,130
ten okay both of them are cashable by

01:09:01,240 --> 01:09:04,930
proxies which is very important to

01:09:03,130 --> 01:09:07,510
understand which is why if it's you're

01:09:04,930 --> 01:09:08,790
giving photo for your servers this is

01:09:07,510 --> 01:09:11,890
something that most people forget

01:09:08,790 --> 01:09:14,140
caching headers for for for if you don't

01:09:11,890 --> 01:09:16,120
put caching headers on volvo this might

01:09:14,140 --> 01:09:20,350
be cached forever and if you haven't put

01:09:16,120 --> 01:09:21,670
content again on that page that's going

01:09:20,350 --> 01:09:25,060
to be a problem now why is this

01:09:21,670 --> 01:09:27,250
important fawful is something that you

01:09:25,060 --> 01:09:29,950
might get for dynamic addresses meaning

01:09:27,250 --> 01:09:32,890
that if I ask server for random address

01:09:29,950 --> 01:09:35,170
okay I'm gonna get a response and it's

01:09:32,890 --> 01:09:37,690
got cached by the CDN and I can do

01:09:35,170 --> 01:09:39,130
something known as false or poisoning

01:09:37,690 --> 01:09:43,270
anyone heard of this

01:09:39,130 --> 01:09:45,640
for poisoning No so basically I did ask

01:09:43,270 --> 01:09:49,060
hold like a bunch of pages that might at

01:09:45,640 --> 01:09:51,370
some point be beheaded and they cost the

01:09:49,060 --> 01:09:53,740
CDN to cash that those pages are not

01:09:51,370 --> 01:09:55,720
existing and then later when someone

01:09:53,740 --> 01:09:58,060
added those pages and you know all the

01:09:55,720 --> 01:10:00,310
users are going to a CDN and the city

01:09:58,060 --> 01:10:01,900
and says hey this page doesn't exist why

01:10:00,310 --> 01:10:04,560
because it's cached it doesn't exist

01:10:01,900 --> 01:10:07,930
okay so this is known suppose of

01:10:04,560 --> 01:10:09,010
poisoning the way to start this is to

01:10:07,930 --> 01:10:11,380
make sure that you have between the

01:10:09,010 --> 01:10:15,220
caching headers properly set up even on

01:10:11,380 --> 01:10:17,200
404 pages now we showed those slides

01:10:15,220 --> 01:10:19,060
yesterday to a friend of ours and told

01:10:17,200 --> 01:10:22,960
us a nice story as it turns out

01:10:19,060 --> 01:10:26,230
telephone providers actually do not

01:10:22,960 --> 01:10:28,840
handle for tank as they should and what

01:10:26,230 --> 01:10:31,870
happened to pair is our proxy gave

01:10:28,840 --> 01:10:34,300
telephone for for response for one bill

01:10:31,870 --> 01:10:36,730
providers so telephone was like okay so

01:10:34,300 --> 01:10:39,880
this whistles does not exist so he

01:10:36,730 --> 01:10:44,890
created it you can end up like oh

01:10:39,880 --> 01:10:48,340
yeah so this is why this nuance is very

01:10:44,890 --> 01:10:49,180
very important yeah so let's talk about

01:10:48,340 --> 01:10:52,830
several levels

01:10:49,180 --> 01:10:55,300
the most fun part in the slides we have

01:10:52,830 --> 01:10:58,000
many status codes to describe several

01:10:55,300 --> 01:11:01,180
else but let's talk about those four

01:10:58,000 --> 01:11:03,040
guys a 500 internet several their

01:11:01,180 --> 01:11:05,860
genetic status code are saying some

01:11:03,040 --> 01:11:08,980
happened basically it means that maybe

01:11:05,860 --> 01:11:12,400
your data center is on fire and maybe

01:11:08,980 --> 01:11:14,650
any bad thing happened maybe again the

01:11:12,400 --> 01:11:17,200
choice choice many many many things can

01:11:14,650 --> 01:11:20,050
happen and not always we can distinguish

01:11:17,200 --> 01:11:22,300
that so we just it's on 500 on the other

01:11:20,050 --> 01:11:28,810
hand we have vital - does anyone else

01:11:22,300 --> 01:11:31,770
was 502 and 504 505 of trees later now

01:11:28,810 --> 01:11:35,980
we're on 502 500

01:11:31,770 --> 01:11:39,430
anyone good anyone use boxing club unsub

01:11:35,980 --> 01:11:41,230
anything he'll be helping some some kind

01:11:39,430 --> 01:11:44,410
of those things what happened when your

01:11:41,230 --> 01:11:47,140
lb lb and Walter of the bullets are

01:11:44,410 --> 01:11:50,170
reducing its not being able to access

01:11:47,140 --> 01:11:54,370
your back end what happens we get time

01:11:50,170 --> 01:11:55,120
out I will poll sorry yeah get the

01:11:54,370 --> 01:11:58,540
timeout

01:11:55,120 --> 01:12:12,610
and it returns 504 so why we have 502

01:11:58,540 --> 01:12:13,990
and 504 if yeah that's what this example

01:12:12,610 --> 01:12:15,610
it's one of those things maybe our

01:12:13,990 --> 01:12:18,280
application just at home and fault

01:12:15,610 --> 01:12:20,410
response because of back-end and made

01:12:18,280 --> 01:12:22,600
some a mistake and become my phone but

01:12:20,410 --> 01:12:25,090
request so we want to distinguish

01:12:22,600 --> 01:12:27,700
between those cases that our back end is

01:12:25,090 --> 01:12:29,590
not available because of diamonds so for

01:12:27,700 --> 01:12:31,750
example before back and smart enough to

01:12:29,590 --> 01:12:33,880
do bad pressure it's a simple strategy

01:12:31,750 --> 01:12:36,820
just to delay and push back other

01:12:33,880 --> 01:12:40,180
clients so we're gonna see 504 and we

01:12:36,820 --> 01:12:44,560
may see 502 when something that happens

01:12:40,180 --> 01:12:46,840
between your up to the proxy so now 503

01:12:44,560 --> 01:12:48,910
they're most fun thing service

01:12:46,840 --> 01:12:51,100
unavailable which is more related to

01:12:48,910 --> 01:12:55,630
your example what happens if I'm trying

01:12:51,100 --> 01:12:58,990
to enjoy access and resources doesn't

01:12:55,630 --> 01:13:00,160
have any beckons anymore doesn't doesn't

01:12:58,990 --> 01:13:02,620
allow to be served

01:13:00,160 --> 01:13:05,530
so by offering says hey and literally

01:13:02,620 --> 01:13:07,900
can't handle that request at the moment

01:13:05,530 --> 01:13:10,330
it's not like I have issues with my back

01:13:07,900 --> 01:13:16,240
ends it's I literally can't handle your

01:13:10,330 --> 01:13:19,720
request so back of this and so now we'll

01:13:16,240 --> 01:13:21,790
go back to the workshop so go back to

01:13:19,720 --> 01:13:24,970
your exercise and we're going to do

01:13:21,790 --> 01:13:28,420
exercise - yes I know I know also

01:13:24,970 --> 01:13:31,619
excited yes yoo-hoo yes thank you

01:13:28,420 --> 01:13:38,139
clicking thank you so much

01:13:31,619 --> 01:13:38,710
okay so I lived one second and hit me

01:13:38,139 --> 01:13:43,860
here

01:13:38,710 --> 01:13:46,360
so yes g-dub

01:13:43,860 --> 01:13:48,309
you know so we talked a little bit about

01:13:46,360 --> 01:13:49,300
did it before okay this time we're gonna

01:13:48,309 --> 01:13:51,940
increment the duck

01:13:49,300 --> 01:13:54,280
so you remember I showed you the same

01:13:51,940 --> 01:13:56,829
header function before that we using

01:13:54,280 --> 01:13:58,469
Python you can use that to create a

01:13:56,829 --> 01:14:01,420
redirect you'll in the location header

01:13:58,469 --> 01:14:04,300
okay you have the references here on the

01:14:01,420 --> 01:14:07,329
page and you can supply some fun things

01:14:04,300 --> 01:14:10,000
like sending random redirects instead of

01:14:07,329 --> 01:14:12,130
you know that every time and basically

01:14:10,000 --> 01:14:14,440
don't look how to pass on here's a

01:14:12,130 --> 01:14:16,980
little right so go and hack and we're

01:14:14,440 --> 01:14:28,119
gonna go through you and help you out

01:14:16,980 --> 01:14:30,910
yeah so if who still haven't solved

01:14:28,119 --> 01:14:33,030
level two please raise your hands

01:14:30,910 --> 01:14:36,730
[Music]

01:14:33,030 --> 01:14:39,730
everyone's out that's amazing so it's

01:14:36,730 --> 01:14:45,040
gonna save me the light coating time so

01:14:39,730 --> 01:14:47,619
basically so we can see that we want to

01:14:45,040 --> 01:14:49,329
do a little egg and we have two things

01:14:47,619 --> 01:14:54,540
that we need to do first is to define

01:14:49,329 --> 01:14:54,540
the status code itself so I want to set

01:14:56,699 --> 01:15:11,469
and this one's let's say free Oh wasn't

01:15:02,170 --> 01:15:14,020
one of the hot air a 301 redirect then

01:15:11,469 --> 01:15:37,929
we want to add another hello world

01:15:14,020 --> 01:15:40,170
location and those two lines including

01:15:37,929 --> 01:15:40,170
there

01:15:41,150 --> 01:15:46,080
Espinosa and eventually we have the N

01:15:43,710 --> 01:15:47,910
handles and those the only two things

01:15:46,080 --> 01:15:49,830
that we need to do in order to do

01:15:47,910 --> 01:15:53,070
redirects have you tried to do with

01:15:49,830 --> 01:16:02,070
directives and what how your Bowser

01:15:53,070 --> 01:16:05,400
behaved anyone knows how much loops need

01:16:02,070 --> 01:16:08,420
to a queue before your Bowser says then

01:16:05,400 --> 01:16:12,780
I need to stop in stopping doing that

01:16:08,420 --> 01:16:14,970
how much that's a good guess I actually

01:16:12,780 --> 01:16:18,960
don't have been for so you have an open

01:16:14,970 --> 01:16:23,190
question someone sells me here but it's

01:16:18,960 --> 01:16:25,410
then this guy and then now before we go

01:16:23,190 --> 01:16:28,860
into lunch I want to show you really

01:16:25,410 --> 01:16:36,120
nice things that you can do with HTTP so

01:16:28,860 --> 01:16:38,640
who like security nobody have anyone

01:16:36,120 --> 01:16:42,000
hold of that cache poison denial of

01:16:38,640 --> 01:16:43,920
service I'm gonna show one of the most

01:16:42,000 --> 01:16:46,770
ridiculous things you could imagine that

01:16:43,920 --> 01:16:49,140
you can do simply with HTTP an actual

01:16:46,770 --> 01:16:52,620
attack that been exploited in many

01:16:49,140 --> 01:16:56,850
sabaeans so we have a malicious plant

01:16:52,620 --> 01:17:00,060
this client says or sends a request to a

01:16:56,850 --> 01:17:02,580
main page let's say index.html but he

01:17:00,060 --> 01:17:05,310
adds some malicious Heather something

01:17:02,580 --> 01:17:07,620
that gonna cause our application to

01:17:05,310 --> 01:17:11,910
return 400 remember 400 bad request

01:17:07,620 --> 01:17:14,190
application cancer that so it seems like

01:17:11,910 --> 01:17:16,770
a legit request right and just trying to

01:17:14,190 --> 01:17:18,930
get the main page and yet I'm adding

01:17:16,770 --> 01:17:23,580
some header that causing the application

01:17:18,930 --> 01:17:27,650
to be mad what later happens our proxy

01:17:23,580 --> 01:17:31,950
CDN cache decides to catch that response

01:17:27,650 --> 01:17:34,920
so think that one clients can disturb

01:17:31,950 --> 01:17:36,870
the index.html cache install the whole

01:17:34,920 --> 01:17:38,670
flow for the rest of the clients on a

01:17:36,870 --> 01:17:40,950
single request of a single client

01:17:38,670 --> 01:17:43,770
causing all the rest of the clients to

01:17:40,950 --> 01:17:46,050
get also 400 although they're legitimate

01:17:43,770 --> 01:17:49,590
clients because one client made a

01:17:46,050 --> 01:17:54,030
malicious hello there's a nice video

01:17:49,590 --> 01:17:54,810
showing how this guy stopped the style

01:17:54,030 --> 01:17:56,940
by single

01:17:54,810 --> 01:18:01,170
Qwest so he set up a site on top of

01:17:56,940 --> 01:18:03,630
cloud font cloud font and then this guy

01:18:01,170 --> 01:18:05,490
just sending malformed requests to every

01:18:03,630 --> 01:18:10,100
asset on the page like you can see in

01:18:05,490 --> 01:18:10,100
this very small really small video

01:18:12,110 --> 01:18:18,090
this client gonna now send simple

01:18:15,420 --> 01:18:21,240
request malicious request that gonna

01:18:18,090 --> 01:18:24,300
cause the backend to hate him too heavy

01:18:21,240 --> 01:18:26,190
endpoint and now he's sending the

01:18:24,300 --> 01:18:29,340
request illegitimate client you see the

01:18:26,190 --> 01:18:32,550
logo is not returning anymore and was

01:18:29,340 --> 01:18:34,950
just one request that caused all of the

01:18:32,550 --> 01:18:38,100
people to experience the site in a bad

01:18:34,950 --> 01:18:41,070
way and then he says okay I'm gonna

01:18:38,100 --> 01:18:42,960
continue to be CSS in this case and now

01:18:41,070 --> 01:18:46,080
we're gonna attack the CSS file and

01:18:42,960 --> 01:18:47,760
causing the server written 400 to be CSS

01:18:46,080 --> 01:18:53,190
what's gonna happen know when it's gonna

01:18:47,760 --> 01:18:56,550
refresh collect no CSS you see how this

01:18:53,190 --> 01:18:59,910
photo code is so simple oh so Tobias you

01:18:56,550 --> 01:19:02,220
could easily cause applications to crash

01:18:59,910 --> 01:19:05,190
and cause your clients bad experience

01:19:02,220 --> 01:19:08,160
just because one knows how to open his

01:19:05,190 --> 01:19:10,590
dancing and sent malformed request and

01:19:08,160 --> 01:19:12,530
whatever he wants eventually I'm gonna

01:19:10,590 --> 01:19:15,750
finish this video in finish up that

01:19:12,530 --> 01:19:19,050
nobody can access the website so easing

01:19:15,750 --> 01:19:23,460
1% if you HTTP requests and they

01:19:19,050 --> 01:19:25,920
remember try not to catch such things if

01:19:23,460 --> 01:19:27,960
you're gonna catch 400 think of them

01:19:25,920 --> 01:19:30,080
please think of your different users and

01:19:27,960 --> 01:19:32,520
if you wanna do that

01:19:30,080 --> 01:19:34,140
yeah if you're gonna do that make sure

01:19:32,520 --> 01:19:36,210
you know how to distinguish between

01:19:34,140 --> 01:19:39,900
requests because otherwise you might

01:19:36,210 --> 01:19:41,550
rush your websites all of your people so

01:19:39,900 --> 01:19:44,730
let's go back content negotiation

01:19:41,550 --> 01:19:48,060
negotiation so a few if you remember we

01:19:44,730 --> 01:19:50,310
said that part of the part of the

01:19:48,060 --> 01:19:52,860
features of HTTP allows you to negotiate

01:19:50,310 --> 01:19:55,470
and how you want to communicate with

01:19:52,860 --> 01:19:57,390
your server so have a few humane

01:19:55,470 --> 01:20:00,150
headaches to do that for example who are

01:19:57,390 --> 01:20:02,370
you user agent your user agent is part

01:20:00,150 --> 01:20:05,460
of the negotiation telling us data of

01:20:02,370 --> 01:20:07,410
omi then we can specify which format

01:20:05,460 --> 01:20:07,630
which is what we want to get that but

01:20:07,410 --> 01:20:10,570
you

01:20:07,630 --> 01:20:13,420
we accept accepted so it was in the

01:20:10,570 --> 01:20:16,060
previous example we sent request asking

01:20:13,420 --> 01:20:19,150
for application JSON we use the accept

01:20:16,060 --> 01:20:21,940
header to notice or to note to the

01:20:19,150 --> 01:20:24,699
server that hey we want to get back the

01:20:21,940 --> 01:20:26,739
payload as JSON then we can say how we

01:20:24,699 --> 01:20:29,590
want encoding what the language what the

01:20:26,739 --> 01:20:32,110
child said we have different hurdles to

01:20:29,590 --> 01:20:35,679
to create a negotiation with the server

01:20:32,110 --> 01:20:37,750
so in this example we can say hey can

01:20:35,679 --> 01:20:40,480
you can you send me text HTML response

01:20:37,750 --> 01:20:42,400
and can you GZ beans and can you eat all

01:20:40,480 --> 01:20:46,030
meat in English because I'm speaking

01:20:42,400 --> 01:20:49,330
English and I need u TF HL set for four

01:20:46,030 --> 01:20:51,250
results we can tell all those data to

01:20:49,330 --> 01:20:54,100
the server important thing to mention

01:20:51,250 --> 01:20:56,980
the server does not have to comply with

01:20:54,100 --> 01:21:01,810
you so we have another - a nice and

01:20:56,980 --> 01:21:04,960
status code 404 406 that says powerful

01:21:01,810 --> 01:21:08,860
operations are not acceptable so for

01:21:04,960 --> 01:21:10,900
example I'm trying to ask and the accept

01:21:08,860 --> 01:21:13,570
header to get back application XML

01:21:10,900 --> 01:21:17,020
because I'm working at IBM or other

01:21:13,570 --> 01:21:19,030
other reasons obviously and the server

01:21:17,020 --> 01:21:23,550
says now I can do two than just

01:21:19,030 --> 01:21:26,469
supporting Jason so the negotiation is

01:21:23,550 --> 01:21:30,070
recommendation it's not a must you may

01:21:26,469 --> 01:21:32,710
and you can say to the server how you'd

01:21:30,070 --> 01:21:35,409
like to get a response back but a server

01:21:32,710 --> 01:21:37,150
can either reject you and reject the

01:21:35,409 --> 01:21:39,790
request by giving you the correct

01:21:37,150 --> 01:21:43,030
response headers oh you just can't

01:21:39,790 --> 01:21:44,800
ignore me like we saw at the small

01:21:43,030 --> 01:21:47,260
Google example that even though we asked

01:21:44,800 --> 01:21:51,840
for you the effect Oh assumingly

01:21:47,260 --> 01:21:51,840
ask for utf-8 we still got a sore back

01:21:52,739 --> 01:21:58,860
let's talk very briefly about cookies so

01:21:56,500 --> 01:22:02,170
as I mentioned HTTP is stateless

01:21:58,860 --> 01:22:04,989
protocol it does not maintain any state

01:22:02,170 --> 01:22:07,570
between these requests in order to do so

01:22:04,989 --> 01:22:10,540
we have a simple thing called cookies

01:22:07,570 --> 01:22:13,030
cookies is basically another header that

01:22:10,540 --> 01:22:15,580
the client in the server can pass it on

01:22:13,030 --> 01:22:19,000
each round trip of our first response to

01:22:15,580 --> 01:22:21,010
provide a state so for example the very

01:22:19,000 --> 01:22:23,110
for example world trying to send a

01:22:21,010 --> 01:22:25,810
request to the server saying hey my name

01:22:23,110 --> 01:22:29,500
is the OB devastates several breakdowns

01:22:25,810 --> 01:22:32,710
a header code said cookie said cookie

01:22:29,500 --> 01:22:35,260
says show I took your state and I'm

01:22:32,710 --> 01:22:38,380
giving it you back so you could save

01:22:35,260 --> 01:22:41,230
that state the client says Sababa and

01:22:38,380 --> 01:22:43,810
then says okay I'm sending you a new

01:22:41,230 --> 01:22:46,240
request but I'm not saying explicitly

01:22:43,810 --> 01:22:49,390
what my name I'm just sending again back

01:22:46,240 --> 01:22:52,270
the cookie you defined using cookies we

01:22:49,390 --> 01:22:54,430
can keep track we can keep sessions we

01:22:52,270 --> 01:22:56,020
even can monitor and track people and

01:22:54,430 --> 01:23:01,570
that's basically Google in a nutshell

01:22:56,020 --> 01:23:03,850
and and just the smallest finger cookies

01:23:01,570 --> 01:23:06,790
are sent in plain text so I'm not

01:23:03,850 --> 01:23:08,890
talking about this cases that the

01:23:06,790 --> 01:23:11,050
connection is interaction I'm just

01:23:08,890 --> 01:23:12,940
talking plainly that the pedals are

01:23:11,050 --> 01:23:15,430
playing texting cook including the

01:23:12,940 --> 01:23:18,100
cookies header so try not to keep

01:23:15,430 --> 01:23:21,550
sensitive data as a plain text because

01:23:18,100 --> 01:23:24,490
people will and my statement and the

01:23:21,550 --> 01:23:27,640
common behavior for many servers is to

01:23:24,490 --> 01:23:30,160
either keep a hashed value on the client

01:23:27,640 --> 01:23:32,440
or encrypted by serving the client okay

01:23:30,160 --> 01:23:33,880
per session files like a classical gauge

01:23:32,440 --> 01:23:36,850
view that you can create sessions

01:23:33,880 --> 01:23:38,770
actually stores the state's pants on

01:23:36,850 --> 01:23:41,250
especially in peace that song is some

01:23:38,770 --> 01:23:45,730
path and the client just have some

01:23:41,250 --> 01:23:47,500
identifier hey that's my number is one

01:23:45,730 --> 01:23:50,410
two three please give me the state that

01:23:47,500 --> 01:23:56,230
relates to the number of Asia any

01:23:50,410 --> 01:23:59,760
comments caching and please welcome

01:23:56,230 --> 01:24:03,400
efficient education thank you very much

01:23:59,760 --> 01:24:06,570
he knows mine Cassius stage anyway so

01:24:03,400 --> 01:24:08,240
what are we doing caching anyone

01:24:06,570 --> 01:24:10,530
performance that's one reason

01:24:08,240 --> 01:24:12,910
[Music]

01:24:10,530 --> 01:24:19,690
save network bandwidth that's another

01:24:12,910 --> 01:24:23,050
reason don't totally the text come on ok

01:24:19,690 --> 01:24:24,910
first item so in the early days of the

01:24:23,050 --> 01:24:28,870
internet do you see some people toaster

01:24:24,910 --> 01:24:31,019
boxes your ISP would basically lied to

01:24:28,870 --> 01:24:32,940
you and say oh yeah I'm giving

01:24:31,019 --> 01:24:35,639
but intent was like twenty eight

01:24:32,940 --> 01:24:38,130
kilobytes because we had like shitty

01:24:35,639 --> 01:24:41,190
modems and and they're like oh we

01:24:38,130 --> 01:24:44,190
don't have enough bandwidth going to to

01:24:41,190 --> 01:24:46,380
Europe so we're gonna cash everything

01:24:44,190 --> 01:24:49,050
without you knowing of course because

01:24:46,380 --> 01:24:51,150
why would they tell you and the whole

01:24:49,050 --> 01:24:54,510
save all the network bandwidth you know

01:24:51,150 --> 01:24:56,519
upstream just to do that because just

01:24:54,510 --> 01:24:58,590
think about this Netflix for example

01:24:56,519 --> 01:25:01,739
Netflix is a lot of data especially in

01:24:58,590 --> 01:25:04,050
HD so if anyone if everyone together

01:25:01,739 --> 01:25:05,280
would watch our Game of Thrones whatever

01:25:04,050 --> 01:25:05,869
that's not on Netflix but you get the

01:25:05,280 --> 01:25:09,059
point

01:25:05,869 --> 01:25:11,309
they all watched caroms together this

01:25:09,059 --> 01:25:13,920
will be the gazillion bites and clog the

01:25:11,309 --> 01:25:15,449
all the up links by the way anyone knows

01:25:13,920 --> 01:25:23,960
how many apples we have for me to learn

01:25:15,449 --> 01:25:26,999
how many come on now you can net1 net1

01:25:23,960 --> 01:25:32,400
basic rare international what's the

01:25:26,999 --> 01:25:34,320
third one okay so we'll get a response

01:25:32,400 --> 01:25:37,499
to that I know about three ones I don't

01:25:34,320 --> 01:25:40,679
know move third one is so not a lot of

01:25:37,499 --> 01:25:43,110
backlinks actually we tell ya it's

01:25:40,679 --> 01:25:46,289
pretty problematic and in other places

01:25:43,110 --> 01:25:48,960
that little saner than us and have like

01:25:46,289 --> 01:25:51,389
count connection it's easier they just

01:25:48,960 --> 01:25:53,699
put 500 objects in the ground and they

01:25:51,389 --> 01:25:55,380
have better connections and it's a it's

01:25:53,699 --> 01:25:57,690
kind of an island state although it's

01:25:55,380 --> 01:26:00,150
not technically an argument so various

01:25:57,690 --> 01:26:03,749
reasons I'm not going to go into we

01:26:00,150 --> 01:26:05,670
can't pass mine cables in shitty so so

01:26:03,749 --> 01:26:08,039
we have this problem but all the world

01:26:05,670 --> 01:26:09,869
everyone is doing caching and the second

01:26:08,039 --> 01:26:11,820
reason is because of latency okay we

01:26:09,869 --> 01:26:14,880
remember we talked about about it when

01:26:11,820 --> 01:26:19,199
you talk about the five wait

01:26:14,880 --> 01:26:21,150
- from - from high and well it's the

01:26:19,199 --> 01:26:26,389
best when you mean bad one for the other

01:26:21,150 --> 01:26:31,390
ones okay I'll get back to us and

01:26:26,389 --> 01:26:37,140
fact-checking good ok

01:26:31,390 --> 01:26:47,530
their submarine and this compute okay

01:26:37,140 --> 01:26:50,500
tripod again Congress no okay nice good

01:26:47,530 --> 01:26:52,900
to know good so basically the other

01:26:50,500 --> 01:26:54,220
reason was latency if you remember we

01:26:52,900 --> 01:26:56,860
talked about it when we talked about the

01:26:54,220 --> 01:26:59,170
connection initialization phase but also

01:26:56,860 --> 01:27:01,090
this relates to you know how long it

01:26:59,170 --> 01:27:04,210
takes to bring all the content to you so

01:27:01,090 --> 01:27:06,580
it's easier to keep it close to plus and

01:27:04,210 --> 01:27:08,740
nowadays the way the internet works is

01:27:06,580 --> 01:27:11,410
you have what's called pops points of

01:27:08,740 --> 01:27:13,000
presence okay and in most of CD ends and

01:27:11,410 --> 01:27:16,090
the big event was like Facebook and

01:27:13,000 --> 01:27:18,280
Google and Amazon they have pops which

01:27:16,090 --> 01:27:20,920
is like usually arauco or few servers

01:27:18,280 --> 01:27:23,020
that we put in their space okay in the

01:27:20,920 --> 01:27:24,790
data center of the ISPs and you get your

01:27:23,020 --> 01:27:26,380
content whether it's Netflix so you came

01:27:24,790 --> 01:27:28,590
over level you got it from the top you

01:27:26,380 --> 01:27:30,550
don't get it from the data center and

01:27:28,590 --> 01:27:32,860
basically what they do is they catch the

01:27:30,550 --> 01:27:36,670
content locally okay but there is

01:27:32,860 --> 01:27:37,780
another type of caching which is local

01:27:36,670 --> 01:27:39,760
cache your browser

01:27:37,780 --> 01:27:42,490
ok your browser's know although it's not

01:27:39,760 --> 01:27:44,230
a proxy it can also cache which has a

01:27:42,490 --> 01:27:46,510
lot of very nice effects first of all

01:27:44,230 --> 01:27:48,190
you don't have to go to the network you

01:27:46,510 --> 01:27:49,870
can save the mobile connection or

01:27:48,190 --> 01:27:51,550
connection from whatever you don't have

01:27:49,870 --> 01:27:53,470
to build an airport attached resources

01:27:51,550 --> 01:27:56,730
that you already have and a lot of the

01:27:53,470 --> 01:27:59,830
resources that we use think about images

01:27:56,730 --> 01:28:01,930
CSS stuff like that they don't change

01:27:59,830 --> 01:28:04,720
much okay so you can cache it for a very

01:28:01,930 --> 01:28:07,330
long time and in fact if you catch the

01:28:04,720 --> 01:28:10,450
HTML itself as well you can actually

01:28:07,330 --> 01:28:13,870
walk completely offline for a lot of

01:28:10,450 --> 01:28:15,880
stuff so think about JavaScript

01:28:13,870 --> 01:28:17,530
applications for example a lot of the

01:28:15,880 --> 01:28:20,110
JavaScript applications if they don't

01:28:17,530 --> 01:28:21,910
need to save State remotely they can

01:28:20,110 --> 01:28:24,820
walk completely offline once you have

01:28:21,910 --> 01:28:27,420
all the assets loaded so cash really

01:28:24,820 --> 01:28:29,380
helps them and it's pretty cool

01:28:27,420 --> 01:28:31,330
unfortunately a lot of web developers

01:28:29,380 --> 01:28:33,080
are not aware of this and they start

01:28:31,330 --> 01:28:35,450
implementing stupid hacks like

01:28:33,080 --> 01:28:37,370
web workers and use local storage and

01:28:35,450 --> 01:28:38,690
stuff like that just to keep the

01:28:37,370 --> 01:28:40,190
application walking or flying

01:28:38,690 --> 01:28:42,230
although there's really no meat you can

01:28:40,190 --> 01:28:44,600
just use caching that is properly

01:28:42,230 --> 01:28:46,880
configured okay so the distinction can

01:28:44,600 --> 01:28:51,140
we have is between private boxes sorry

01:28:46,880 --> 01:28:54,260
private boxes private caches and shared

01:28:51,140 --> 01:28:57,080
caches okay the private cache means that

01:28:54,260 --> 01:28:59,270
only one user is using that cache this

01:28:57,080 --> 01:29:03,200
is your browser for example and the

01:28:59,270 --> 01:29:06,110
shell caches our boxes okay a lot of

01:29:03,200 --> 01:29:08,870
people will say proxy so this box it has

01:29:06,110 --> 01:29:10,910
to differentiate between current content

01:29:08,870 --> 01:29:13,370
and know whether it's personalized or

01:29:10,910 --> 01:29:16,070
not otherwise the attack that Michael

01:29:13,370 --> 01:29:17,690
showed would basically have the same

01:29:16,070 --> 01:29:19,010
thing I would see content that is

01:29:17,690 --> 01:29:21,950
supposed to be seen by other people

01:29:19,010 --> 01:29:23,510
you'd be amazed how many times this

01:29:21,950 --> 01:29:25,820
actually happened on the internet and

01:29:23,510 --> 01:29:27,440
people so like you know give my pages

01:29:25,820 --> 01:29:30,830
with other people's names and stuff like

01:29:27,440 --> 01:29:32,780
that pretty horrible so I'm you're not

01:29:30,830 --> 01:29:34,700
basically if you're serving your design

01:29:32,780 --> 01:29:36,200
application make sure that if there's

01:29:34,700 --> 01:29:38,450
something personalized do you make sure

01:29:36,200 --> 01:29:40,940
that this is not cached using the

01:29:38,450 --> 01:29:42,790
headers and lastly there's something

01:29:40,940 --> 01:29:44,780
called fold and you're those boxes

01:29:42,790 --> 01:29:47,150
anyone knows the difference between the

01:29:44,780 --> 01:29:51,920
fold and the best boxing yeah first

01:29:47,150 --> 01:29:55,010
proxy shielding the yes exactly

01:29:51,920 --> 01:29:57,530
so the fold poxy is when I'm I the

01:29:55,010 --> 01:29:59,960
client I try to connect a server in the

01:29:57,530 --> 01:30:03,860
proxy is on the way to feels difficult

01:29:59,960 --> 01:30:06,590
request okay and it says okay I'll go to

01:30:03,860 --> 01:30:08,810
the back end for you for the client and

01:30:06,590 --> 01:30:11,330
I will touch the content and the buzz

01:30:08,810 --> 01:30:13,550
box is exactly the other way around okay

01:30:11,330 --> 01:30:17,000
it's shielding the server okay so I get

01:30:13,550 --> 01:30:18,590
to the best box in the first box he only

01:30:17,000 --> 01:30:20,120
knows the corner to service or whatever

01:30:18,590 --> 01:30:21,980
and talks to a lot of clients so it's

01:30:20,120 --> 01:30:26,030
like basically the same thing with us

01:30:21,980 --> 01:30:28,250
hence the name was parsley and so you

01:30:26,030 --> 01:30:30,320
would find the food processing and city

01:30:28,250 --> 01:30:33,440
ends mostly in stomach rot or eye space

01:30:30,320 --> 01:30:35,750
most ISPs actually and the reverse box

01:30:33,440 --> 01:30:38,490
is usually fine

01:30:35,750 --> 01:30:41,040
you know large companies like wigs or

01:30:38,490 --> 01:30:42,060
Facebook or whatever oh look the nginx

01:30:41,040 --> 01:30:43,410
that you have in front of your

01:30:42,060 --> 01:30:45,150
application is technically a reverse

01:30:43,410 --> 01:30:50,880
proxy so that's basically the difference

01:30:45,150 --> 01:30:54,960
what does the city and if it's confident

01:30:50,880 --> 01:30:56,340
that providing this yeah so second of

01:30:54,960 --> 01:30:58,230
all this and much more

01:30:56,340 --> 01:31:01,560
they provide this fix relation they

01:30:58,230 --> 01:31:04,590
provide domination they provide cachet

01:31:01,560 --> 01:31:07,110
they sometimes provide even like workers

01:31:04,590 --> 01:31:08,520
that allow you to deploy some code the

01:31:07,110 --> 01:31:10,650
engines and they actually do a lot of

01:31:08,520 --> 01:31:13,170
something do all this more the most

01:31:10,650 --> 01:31:14,940
important thing to know about caching it

01:31:13,170 --> 01:31:18,000
does caching needs to preserve something

01:31:14,940 --> 01:31:19,650
that is called semantic coherence right

01:31:18,000 --> 01:31:22,020
what is semantic coherence

01:31:19,650 --> 01:31:24,360
it's a basic and very simple long you

01:31:22,020 --> 01:31:27,690
never ever break the behavior of the

01:31:24,360 --> 01:31:29,970
blossom Evan this is avoid suppose work

01:31:27,690 --> 01:31:32,280
caching needs to be done spent it should

01:31:29,970 --> 01:31:34,560
not change the way that the application

01:31:32,280 --> 01:31:38,990
or the protocol mix okay and if it does

01:31:34,560 --> 01:31:41,190
it's a bug okay what happens in practice

01:31:38,990 --> 01:31:43,950
come on y'all welcome into this it's

01:31:41,190 --> 01:31:45,330
broken you know it's book okay so what

01:31:43,950 --> 01:31:49,110
implement this is how it's supposed to

01:31:45,330 --> 01:31:51,360
look cool so how does caching walk okay

01:31:49,110 --> 01:31:52,920
first of all ever candy that is cached

01:31:51,360 --> 01:31:55,620
has a key okay

01:31:52,920 --> 01:31:58,170
usually the key is just to you over just

01:31:55,620 --> 01:32:01,440
okay but often it's the method close to

01:31:58,170 --> 01:32:03,690
your eye in most of the CD ends and

01:32:01,440 --> 01:32:06,570
foxes are configurable subtly only cache

01:32:03,690 --> 01:32:09,420
get okay they don't cache post or put

01:32:06,570 --> 01:32:13,080
for obvious reasons so it's like this is

01:32:09,420 --> 01:32:15,510
why often it's only to go I as a cache

01:32:13,080 --> 01:32:17,450
key okay but what happens when you have

01:32:15,510 --> 01:32:20,850
a personalized request let's think about

01:32:17,450 --> 01:32:22,950
mobile and desktop requests so how does

01:32:20,850 --> 01:32:28,260
the server know that I'm from coming

01:32:22,950 --> 01:32:29,670
from mobile and which other user agent

01:32:28,260 --> 01:32:33,150
that is correct so content negotiation

01:32:29,670 --> 01:32:36,750
you remember the user I didn't head out

01:32:33,150 --> 01:32:38,730
so this is how so knows where if you're

01:32:36,750 --> 01:32:41,460
using a mobile client or not and knows

01:32:38,730 --> 01:32:43,440
to deliver the mobile version of website

01:32:41,460 --> 01:32:46,140
okay so how do we make sure that the

01:32:43,440 --> 01:32:48,820
cache delivers the mobile version to the

01:32:46,140 --> 01:32:52,630
mobile clients and

01:32:48,820 --> 01:32:57,460
that's for clients which is cashed and

01:32:52,630 --> 01:33:00,190
the key is only to go I what exactly we

01:32:57,460 --> 01:33:02,320
have a sub key okay so this is why we

01:33:00,190 --> 01:33:06,460
have the Vai head of the valley header

01:33:02,320 --> 01:33:09,880
basically tells the the proxy okay you

01:33:06,460 --> 01:33:11,350
need to stop key and the sub case should

01:33:09,880 --> 01:33:13,270
be composed of the following handles

01:33:11,350 --> 01:33:15,010
usually it's user agent but it can also

01:33:13,270 --> 01:33:17,980
be any other header that you want

01:33:15,010 --> 01:33:19,390
because you can customize this okay and

01:33:17,980 --> 01:33:21,790
if you're sitting in and all of them of

01:33:19,390 --> 01:33:25,780
course spoke this then you can you can

01:33:21,790 --> 01:33:27,190
basically valid the cash by which you

01:33:25,780 --> 01:33:29,620
have a combination of headers you want

01:33:27,190 --> 01:33:30,940
okay you don't want to put too many

01:33:29,620 --> 01:33:33,430
handles there because it's going to be

01:33:30,940 --> 01:33:37,830
inefficient but just enough to so that

01:33:33,430 --> 01:33:41,680
no problems you also need to tell the

01:33:37,830 --> 01:33:43,180
whoever's cashing how long this version

01:33:41,680 --> 01:33:46,720
is going to be valid for okay so

01:33:43,180 --> 01:33:49,060
basically we have three states for cash

01:33:46,720 --> 01:33:52,480
we have fresh stale and expired

01:33:49,060 --> 01:33:55,300
okay fresh means it's new to get the new

01:33:52,480 --> 01:33:57,400
copy okay what what is the difference

01:33:55,300 --> 01:34:01,810
between stem and expired anyone want to

01:33:57,400 --> 01:34:07,780
take a guess Staley still exists but not

01:34:01,810 --> 01:34:10,960
nobody use it okay so the difference is

01:34:07,780 --> 01:34:12,550
this scales mean that yes there is new

01:34:10,960 --> 01:34:14,710
version I should probably get it

01:34:12,550 --> 01:34:16,810
but as long as I didn't get it I can

01:34:14,710 --> 01:34:19,780
still give you that all content you can

01:34:16,810 --> 01:34:22,150
use it okay well whereas expired means I

01:34:19,780 --> 01:34:23,800
can't use this anymore okay whether or

01:34:22,150 --> 01:34:25,450
not I can talk to the server I can't use

01:34:23,800 --> 01:34:28,510
it so for example if you're talking

01:34:25,450 --> 01:34:29,380
about about the buzz blossom it can if

01:34:28,510 --> 01:34:31,720
it's offline

01:34:29,380 --> 01:34:34,570
okay don't have connection you can still

01:34:31,720 --> 01:34:36,910
use stale version well as expired means

01:34:34,570 --> 01:34:40,270
that you can't use it okay so if you're

01:34:36,910 --> 01:34:41,680
online sample book if you're fly so this

01:34:40,270 --> 01:34:43,900
is the difference between self-standing

01:34:41,680 --> 01:34:45,850
expired how do we know it's stale

01:34:43,900 --> 01:34:47,890
expired or whatever this is where the

01:34:45,850 --> 01:34:50,800
headers come in we have the expires

01:34:47,890 --> 01:34:52,719
header and cash double header okay so

01:34:50,800 --> 01:34:55,550
the cache control header

01:34:52,719 --> 01:34:57,320
Heather but has a lot of directives that

01:34:55,550 --> 01:35:00,080
tells the cache how to behave

01:34:57,320 --> 01:35:02,840
okay one of them is max age which means

01:35:00,080 --> 01:35:04,400
like how long we can cash it for before

01:35:02,840 --> 01:35:06,860
it become stale and then we have the

01:35:04,400 --> 01:35:10,040
expires header which basically tells the

01:35:06,860 --> 01:35:13,100
cache on how long before this page

01:35:10,040 --> 01:35:15,830
becomes expired and we can't use them if

01:35:13,100 --> 01:35:19,060
we want to disable blushing okay the

01:35:15,830 --> 01:35:23,000
easiest ways just gave expired with an

01:35:19,060 --> 01:35:25,250
expired negative number like minus 1 and

01:35:23,000 --> 01:35:27,409
this means that this is already expired

01:35:25,250 --> 01:35:30,199
and always be expired so don't cash it

01:35:27,409 --> 01:35:32,630
those also have to look at the cash be

01:35:30,199 --> 01:35:35,540
told documentation by to listen to that

01:35:32,630 --> 01:35:38,060
you'll see there's like no stone no cash

01:35:35,540 --> 01:35:39,710
and all kinds of directives at the

01:35:38,060 --> 01:35:41,900
castle how to behave and where not to

01:35:39,710 --> 01:35:45,679
cash stuff and so on and so on

01:35:41,900 --> 01:35:50,780
so what is like anyone else right

01:35:45,679 --> 01:35:57,889
through yes you in the back you just

01:35:50,780 --> 01:35:59,750
like let's say that we have a met Bob

01:35:57,889 --> 01:36:04,190
that is supposed to write something to

01:35:59,750 --> 01:36:05,989
the server ok let's say post okay you

01:36:04,190 --> 01:36:09,110
can actually catch posted quests it's a

01:36:05,989 --> 01:36:10,969
lamb mostly they don't do this but you

01:36:09,110 --> 01:36:13,369
can't crash post quests

01:36:10,969 --> 01:36:15,679
however because post requests are

01:36:13,369 --> 01:36:16,969
supposed to have a side effect this is

01:36:15,679 --> 01:36:20,030
worth something called right through

01:36:16,969 --> 01:36:22,219
okay contain rifle means that although

01:36:20,030 --> 01:36:25,850
the content that is returned the body

01:36:22,219 --> 01:36:28,219
that it might be cached the proxy still

01:36:25,850 --> 01:36:29,600
has to talk to the server okay it has to

01:36:28,219 --> 01:36:31,730
tell it okay there was a post request

01:36:29,600 --> 01:36:34,070
and here are the parameters of that post

01:36:31,730 --> 01:36:37,670
request why to preserve semantic

01:36:34,070 --> 01:36:39,350
coherence okay maybe the server needs to

01:36:37,670 --> 01:36:41,449
trigger some side effect back something

01:36:39,350 --> 01:36:43,820
in database or maybe it's useful for

01:36:41,449 --> 01:36:46,130
tracking or whatever whatever reason

01:36:43,820 --> 01:36:48,980
okay the server still has to accept the

01:36:46,130 --> 01:36:51,320
request but the body can come back from

01:36:48,980 --> 01:36:53,719
the CDN or from the proxy which does

01:36:51,320 --> 01:36:56,719
sometimes save a lot of bandwidth okay

01:36:53,719 --> 01:37:01,670
think about clearly larger content right

01:36:56,719 --> 01:37:03,309
so does that but invalidates the first

01:37:01,670 --> 01:37:05,469
before you cancel

01:37:03,309 --> 01:37:07,479
so then this is like a it's not an edge

01:37:05,469 --> 01:37:12,579
case but it's a nuanced case

01:37:07,479 --> 01:37:15,309
so the sometimes okay

01:37:12,579 --> 01:37:17,619
what happens is we turn some response to

01:37:15,309 --> 01:37:19,659
you and then a synchronous lean back on

01:37:17,619 --> 01:37:21,639
talks to the server and this can happen

01:37:19,659 --> 01:37:23,229
for a number of reasons let's say that

01:37:21,639 --> 01:37:25,479
you have a stay request but the keshe

01:37:23,229 --> 01:37:27,639
stayed I can still sell you the content

01:37:25,479 --> 01:37:29,530
and get a fresh version so that next

01:37:27,639 --> 01:37:31,839
time someone asked to this content is

01:37:29,530 --> 01:37:33,579
all refresh okay also does something

01:37:31,839 --> 01:37:34,059
like young man we talked about the hen

01:37:33,579 --> 01:37:36,459
request

01:37:34,059 --> 01:37:41,019
did anyone wonder what the Headlee quest

01:37:36,459 --> 01:37:46,059
is useful well what do you think can be

01:37:41,019 --> 01:37:47,739
done with a hidden quest Oh first of all

01:37:46,059 --> 01:37:53,889
yes I can see if its existing what all

01:37:47,739 --> 01:37:56,169
has gonna do with it exactly to see if

01:37:53,889 --> 01:38:00,309
the cache needs updating so I can really

01:37:56,169 --> 01:38:02,979
ask the server and hi Curtis whistles

01:38:00,309 --> 01:38:04,989
cashed up two days ago giving the

01:38:02,979 --> 01:38:07,809
metadata so I can see it if this new

01:38:04,989 --> 01:38:10,989
version okay so there are a few handles

01:38:07,809 --> 01:38:15,639
but talking about them that give you

01:38:10,989 --> 01:38:17,379
basically sorry it's a few handles until

01:38:15,639 --> 01:38:20,439
tell you like the age of the page you

01:38:17,379 --> 01:38:22,989
remember we had a we saw like dates okay

01:38:20,439 --> 01:38:24,789
when the content was created so I can go

01:38:22,989 --> 01:38:26,859
in and I can check if there's a newer

01:38:24,789 --> 01:38:28,869
version that was generated later and

01:38:26,859 --> 01:38:31,749
then a synchronously I can get a new

01:38:28,869 --> 01:38:33,489
version and move it so to speak and I

01:38:31,749 --> 01:38:35,739
can do that I can clear like a check for

01:38:33,489 --> 01:38:39,789
it's very cheeky using behead okay so

01:38:35,739 --> 01:38:41,619
this is why it exists so another very

01:38:39,789 --> 01:38:43,709
nice thing is something called

01:38:41,619 --> 01:38:47,289
conditional request I can ask the server

01:38:43,709 --> 01:38:50,139
listen this is the version I have okay

01:38:47,289 --> 01:38:51,189
so bring me back the body but only if

01:38:50,139 --> 01:38:53,739
you have in your body

01:38:51,189 --> 01:38:56,199
otherwise I only have a version and it's

01:38:53,739 --> 01:38:58,300
fine so I don't need you to talk to give

01:38:56,199 --> 01:38:59,859
me like 10 megabytes but if I don't need

01:38:58,300 --> 01:39:03,219
it if the doesn't that I have this money

01:38:59,859 --> 01:39:06,219
so how it is done there are two very

01:39:03,219 --> 01:39:08,559
important items first other attack okay

01:39:06,219 --> 01:39:12,099
which is basically a hash usually md5

01:39:08,559 --> 01:39:15,340
it's a hash that identifies the content

01:39:12,099 --> 01:39:17,770
okay if you remember hash is

01:39:15,340 --> 01:39:20,050
function that basically changes and if

01:39:17,770 --> 01:39:23,139
anything in the content the content that

01:39:20,050 --> 01:39:25,330
is hashed is changing okay so one bit

01:39:23,139 --> 01:39:27,219
that is changing content will take a

01:39:25,330 --> 01:39:29,710
change in the hash that no longer could

01:39:27,219 --> 01:39:31,900
going to be same as so if I tell the

01:39:29,710 --> 01:39:35,380
server what is the hash of the content I

01:39:31,900 --> 01:39:37,929
have I have it can tell me okay yes you

01:39:35,380 --> 01:39:41,770
have the comment version there's no need

01:39:37,929 --> 01:39:43,810
for me to turn modality and same thing

01:39:41,770 --> 01:39:46,139
happens with last modified I can do the

01:39:43,810 --> 01:39:49,270
same with date I can send tell you and

01:39:46,139 --> 01:39:51,900
this is the version I have it's from two

01:39:49,270 --> 01:39:55,929
days ago and the server says ok this was

01:39:51,900 --> 01:39:59,199
not modified in the time since that you

01:39:55,929 --> 01:40:01,900
had seen this last so there's no reason

01:39:59,199 --> 01:40:04,929
for me to give you new content so the

01:40:01,900 --> 01:40:07,719
two handles involved the request header

01:40:04,929 --> 01:40:10,150
is if modified says okay I asked you

01:40:07,719 --> 01:40:12,219
have this resource been modified since I

01:40:10,150 --> 01:40:16,150
last saw it and the server to respond

01:40:12,219 --> 01:40:18,429
with the initial response tell you this

01:40:16,150 --> 01:40:20,860
was last modified in this state when was

01:40:18,429 --> 01:40:22,540
this content generated and if there is

01:40:20,860 --> 01:40:25,090
no need to return or anything the server

01:40:22,540 --> 01:40:28,570
will attempt 3 hopeful which is not

01:40:25,090 --> 01:40:30,040
modified ok and if it was modified and

01:40:28,570 --> 01:40:31,750
you need to get a body back to this

01:40:30,040 --> 01:40:36,429
point with tormund ok and give you the

01:40:31,750 --> 01:40:38,020
body of the new new version now the two

01:40:36,429 --> 01:40:40,030
types of annotation strongly with

01:40:38,020 --> 01:40:42,219
validation the difference is that strong

01:40:40,030 --> 01:40:44,980
validation means pitch-perfect

01:40:42,219 --> 01:40:47,500
validation means exactly same content

01:40:44,980 --> 01:40:49,420
people get and with validation means

01:40:47,500 --> 01:40:52,719
it's equivalent it's not exactly the

01:40:49,420 --> 01:40:54,880
same but it is equivalent ok

01:40:52,719 --> 01:40:57,250
maybe unimportant stuff has changed like

01:40:54,880 --> 01:40:58,960
the date signature a lot of pages of

01:40:57,250 --> 01:41:01,150
dynamic they might have a Dave signature

01:40:58,960 --> 01:41:03,460
when this page is generated it's like

01:41:01,150 --> 01:41:05,440
one string it doesn't change anything in

01:41:03,460 --> 01:41:08,170
that you the user cares about but still

01:41:05,440 --> 01:41:10,690
the check sum would be different ok so

01:41:08,170 --> 01:41:15,790
in cases like that we want to use weak

01:41:10,690 --> 01:41:19,270
validation ok so ok done pretty cool

01:41:15,790 --> 01:41:23,260
it's it's been using Internet in these

01:41:19,270 --> 01:41:24,010
situations so the e-tag header is kind

01:41:23,260 --> 01:41:25,840
of nice

01:41:24,010 --> 01:41:26,700
it's used for a lot of stuff not only

01:41:25,840 --> 01:41:30,180
caching

01:41:26,700 --> 01:41:33,120
and basically one of the uses the most

01:41:30,180 --> 01:41:34,290
common uses especially in backends if

01:41:33,120 --> 01:41:36,540
you remember we talked a little bit

01:41:34,290 --> 01:41:38,580
about the clocking so how do we know the

01:41:36,540 --> 01:41:41,460
resources changed if so this also has

01:41:38,580 --> 01:41:43,920
changed the e-tag the checksum of the

01:41:41,460 --> 01:41:46,110
police source will also change so when

01:41:43,920 --> 01:41:49,440
we do if you remember before 9 let's

01:41:46,110 --> 01:41:51,420
pause okay when we say we do a put or

01:41:49,440 --> 01:41:54,600
post to a server and say we want to

01:41:51,420 --> 01:41:56,790
change this this entity and we give it

01:41:54,600 --> 01:41:59,340
the e-tag of the resource that we read

01:41:56,790 --> 01:42:01,590
any pollutants get requests okay and if

01:41:59,340 --> 01:42:06,000
the attack does not match the new check

01:42:01,590 --> 01:42:09,140
some of the resource then we get for

01:42:06,000 --> 01:42:11,670
nine okay okay

01:42:09,140 --> 01:42:14,040
another common use case is to resume

01:42:11,670 --> 01:42:15,840
partial downloads so what is partial

01:42:14,040 --> 01:42:19,290
download let's say that I want download

01:42:15,840 --> 01:42:21,750
the video from s3 and I downloaded three

01:42:19,290 --> 01:42:25,740
hundred megabytes and then one megabyte

01:42:21,750 --> 01:42:27,900
was co-opted okay what do I do

01:42:25,740 --> 01:42:30,210
you have to start downloading the entire

01:42:27,900 --> 01:42:32,040
file again no that would be done

01:42:30,210 --> 01:42:34,500
so there's come something called bitrate

01:42:32,040 --> 01:42:36,210
you could request I can ask for just

01:42:34,500 --> 01:42:40,050
part of the fine I can say to the server

01:42:36,210 --> 01:42:42,540
give me give me from megabyte from this

01:42:40,050 --> 01:42:45,330
range the start with the later give that

01:42:42,540 --> 01:42:46,800
the right sequence of void start until

01:42:45,330 --> 01:42:49,890
this part like hundred megabytes from

01:42:46,800 --> 01:42:53,070
Hill to Hill okay and I use the heat

01:42:49,890 --> 01:42:55,290
active validate that indeed I got the

01:42:53,070 --> 01:42:58,080
entire fine okay cuz remember the

01:42:55,290 --> 01:42:59,580
checksum is the same this means that I

01:42:58,080 --> 01:43:02,090
now have the full payment so I can

01:42:59,580 --> 01:43:08,220
validate but I got anything so clean

01:43:02,090 --> 01:43:11,940
then also restore you see you actually

01:43:08,220 --> 01:43:14,720
have so you remember flash get Excel

01:43:11,940 --> 01:43:16,800
flash get or the multi download those so

01:43:14,720 --> 01:43:19,110
actually a lot of download those you

01:43:16,800 --> 01:43:20,460
this just don't tell you they don't just

01:43:19,110 --> 01:43:22,800
don't tell you but they do this

01:43:20,460 --> 01:43:25,110
everything that updates in background we

01:43:22,800 --> 01:43:28,580
do usually do it for optimization

01:43:25,110 --> 01:43:28,580
essence also

01:43:28,680 --> 01:43:33,270
it's also being used for videos for

01:43:31,110 --> 01:43:36,300
example if you watch a video files

01:43:33,270 --> 01:43:39,720
originally the video implementation for

01:43:36,300 --> 01:43:42,960
iPhone and actually the html5 video

01:43:39,720 --> 01:43:45,540
thinking also works with pythons okay

01:43:42,960 --> 01:43:48,420
kind of so it in fact it being with

01:43:45,540 --> 01:43:51,570
don't actually know this and there is

01:43:48,420 --> 01:43:55,350
one very shady use case Polly tag which

01:43:51,570 --> 01:43:58,740
is tracking users okay so like the way

01:43:55,350 --> 01:44:01,110
people use cookies you can actually use

01:43:58,740 --> 01:44:04,590
the intact to track people if I give you

01:44:01,110 --> 01:44:07,230
an image or some aspect I can embed in a

01:44:04,590 --> 01:44:09,360
web page then the browser will hit that

01:44:07,230 --> 01:44:12,000
asset every time that you load up to the

01:44:09,360 --> 01:44:14,700
page and if the server gives you an

01:44:12,000 --> 01:44:16,290
e-tag what are you going to do you're

01:44:14,700 --> 01:44:18,840
going to issue a conditional request

01:44:16,290 --> 01:44:21,030
with the finita right but the neat tag

01:44:18,840 --> 01:44:23,220
doesn't have to be defined it can be

01:44:21,030 --> 01:44:25,350
just a gue I do some random generated

01:44:23,220 --> 01:44:29,970
swing which can be used to identify the

01:44:25,350 --> 01:44:33,020
user okay so this is how some haven't

01:44:29,970 --> 01:44:36,030
called the malicious but he behaving

01:44:33,020 --> 01:44:39,510
parties on the internet they use this

01:44:36,030 --> 01:44:42,390
tactic tactic to track users it's

01:44:39,510 --> 01:44:44,580
considered very bad practice you might

01:44:42,390 --> 01:44:46,500
get sued if you do this if you remember

01:44:44,580 --> 01:44:48,150
a lot of regulations post you today to

01:44:46,500 --> 01:44:50,490
inform the user that you're using

01:44:48,150 --> 01:44:54,300
cookies to track or even not attract

01:44:50,490 --> 01:44:56,940
using cookies so basically if you use

01:44:54,300 --> 01:44:58,530
this kind of method to track users you

01:44:56,940 --> 01:45:01,530
can't inform the user but you're doing

01:44:58,530 --> 01:45:03,560
that and of course there's no consent so

01:45:01,530 --> 01:45:06,510
depends how sherry you want to be I

01:45:03,560 --> 01:45:12,560
don't know your problem you didn't hear

01:45:06,510 --> 01:45:15,450
it from me I don't want to get super hot

01:45:12,560 --> 01:45:18,800
so I actually want to talk about last

01:45:15,450 --> 01:45:21,840
thing before we gonna get that levels

01:45:18,800 --> 01:45:24,360
guilt Olas think I mentioned this term I

01:45:21,840 --> 01:45:27,480
think a few times before and I come and

01:45:24,360 --> 01:45:30,990
I should explain what's that so let's

01:45:27,480 --> 01:45:33,450
let's say we want to we want to develop

01:45:30,990 --> 01:45:36,840
a server but we're a chip company and we

01:45:33,450 --> 01:45:38,770
we can only have one ec2 instance

01:45:36,840 --> 01:45:41,770
because again we're a chip component

01:45:38,770 --> 01:45:44,860
and yet for how many clients many big

01:45:41,770 --> 01:45:48,220
famous clients like very big client come

01:45:44,860 --> 01:45:50,350
and they want to have their own website

01:45:48,220 --> 01:45:52,900
on our cell phone and when it's on how

01:45:50,350 --> 01:45:56,380
to distinguish between them so using the

01:45:52,900 --> 01:45:58,720
hospital we can redirect the same

01:45:56,380 --> 01:46:02,320
request on the server differently to

01:45:58,720 --> 01:46:05,110
different pages and on this thing I want

01:46:02,320 --> 01:46:07,420
to tell you talk funny or not funny more

01:46:05,110 --> 01:46:09,600
like security story if anyone of you

01:46:07,420 --> 01:46:13,710
heard about a company called the signal

01:46:09,600 --> 01:46:16,360
raise your hands only one machine so a

01:46:13,710 --> 01:46:18,190
company that basically does text

01:46:16,360 --> 01:46:19,780
messaging messaging but they also have

01:46:18,190 --> 01:46:21,900
their own encryption protocol and the

01:46:19,780 --> 01:46:25,060
big amazing job like keeping you

01:46:21,900 --> 01:46:26,710
anonymous still doing this anonymous

01:46:25,060 --> 01:46:30,790
because nothing is anonymous actually

01:46:26,710 --> 01:46:32,710
but they will Bend in Egypt if I

01:46:30,790 --> 01:46:35,950
remember correctly and they try to

01:46:32,710 --> 01:46:39,070
bypass it so how did they bypass it

01:46:35,950 --> 01:46:41,920
there's a few ways to block block

01:46:39,070 --> 01:46:43,570
traffic on the isp level they can lock

01:46:41,920 --> 01:46:47,170
your dns quality so if they try to

01:46:43,570 --> 01:46:50,110
resolve a signal Salonika the signal the

01:46:47,170 --> 01:46:52,900
calm they may block the resolvement they

01:46:50,110 --> 01:46:56,440
may block the IP addresses of their load

01:46:52,900 --> 01:46:58,800
balancers and basically I think that's

01:46:56,440 --> 01:47:00,880
the two main methods that they can't

01:46:58,800 --> 01:47:04,360
firewall and block here are for my

01:47:00,880 --> 01:47:06,250
service so one day they did new client

01:47:04,360 --> 01:47:10,150
release and they changed the domain to

01:47:06,250 --> 01:47:12,010
be Amazon or subdomain of amazon.com how

01:47:10,150 --> 01:47:14,170
the that works right like why

01:47:12,010 --> 01:47:17,950
you're trying to communicate with Amazon

01:47:14,170 --> 01:47:20,260
so they just went to cloud font edit a

01:47:17,950 --> 01:47:23,440
new account on cloud font they said

01:47:20,260 --> 01:47:25,300
behind cloud font and change the client

01:47:23,440 --> 01:47:28,480
to use one of the domains that clomp

01:47:25,300 --> 01:47:30,640
font is serving but after the DNS

01:47:28,480 --> 01:47:32,740
resolving happened first of all you can

01:47:30,640 --> 01:47:34,480
look some alpha Masson domains because

01:47:32,740 --> 01:47:38,170
nobody gonna do that in a big country

01:47:34,480 --> 01:47:41,080
second about the result IEP is there is

01:47:38,170 --> 01:47:43,420
the CDN in this case and then after the

01:47:41,080 --> 01:47:44,940
handshake happen and after big SSL

01:47:43,420 --> 01:47:47,010
handshake happen they

01:47:44,940 --> 01:47:51,000
sent a different host about saying no

01:47:47,010 --> 01:47:53,460
actually going to go to signal calm so

01:47:51,000 --> 01:47:56,580
they use different domain have phone of

01:47:53,460 --> 01:47:58,620
a CDN to internally just modify the host

01:47:56,580 --> 01:48:01,320
header and saying no no actually I'm

01:47:58,620 --> 01:48:03,840
other domain it's easy manipulation you

01:48:01,320 --> 01:48:06,540
can do with the shadows and saying that

01:48:03,840 --> 01:48:09,780
I want us to get back to our hands-on

01:48:06,540 --> 01:48:12,080
workshop some of you already managed to

01:48:09,780 --> 01:48:15,420
finish the before where is your hands

01:48:12,080 --> 01:48:17,310
know I'm amazing so level four is going

01:48:15,420 --> 01:48:19,080
to talk about caching your level five

01:48:17,310 --> 01:48:23,160
we're going to talk about we're toasting

01:48:19,080 --> 01:48:29,100
so let's gonna get back to our keyboards

01:48:23,160 --> 01:48:31,320
and start coding okay so if any of you

01:48:29,100 --> 01:48:34,110
had problems with the caching thingy

01:48:31,320 --> 01:48:36,660
yeah of course okay so here's what are

01:48:34,110 --> 01:48:39,780
you using we're horrible Firefox right

01:48:36,660 --> 01:48:42,390
okay so what's happening is if you look

01:48:39,780 --> 01:48:44,550
at the console okay and you look at the

01:48:42,390 --> 01:48:46,110
request of Firefox is sending its

01:48:44,550 --> 01:48:47,400
sending what it's called as a

01:48:46,110 --> 01:48:51,330
conditional request

01:48:47,400 --> 01:48:53,940
okay sending the modified since thingy

01:48:51,330 --> 01:48:56,460
you've never talked about it open the

01:48:53,940 --> 01:48:59,010
network on sort of Firefox of home and

01:48:56,460 --> 01:49:00,870
you see it and the problem is that your

01:48:59,010 --> 01:49:02,670
server does not implement the second

01:49:00,870 --> 01:49:04,050
part of the caching protocol which is if

01:49:02,670 --> 01:49:06,660
you remember you're supposed to look at

01:49:04,050 --> 01:49:11,610
the if modified since and what you

01:49:06,660 --> 01:49:15,540
return if it wasn't modified fearful yes

01:49:11,610 --> 01:49:17,190
this is why okay so that's the reason

01:49:15,540 --> 01:49:20,310
what doesn't work you can either

01:49:17,190 --> 01:49:24,260
implement your phone now if you want or

01:49:20,310 --> 01:49:28,560
just move on and then go fix it later

01:49:24,260 --> 01:49:30,180
this is a way to tell the server not to

01:49:28,560 --> 01:49:34,020
send additional requests to allow for

01:49:30,180 --> 01:49:42,480
offline operation too complicated now so

01:49:34,020 --> 01:49:44,310
forget about so man that was hurt yes

01:49:42,480 --> 01:49:46,920
the first request of the physical West

01:49:44,310 --> 01:49:50,160
is supposed to be responded by 200

01:49:46,920 --> 01:49:51,690
second request when when the server sees

01:49:50,160 --> 01:49:53,580
that you already have a

01:49:51,690 --> 01:49:56,970
that is not staying is supposed to

01:49:53,580 --> 01:49:58,770
eternal playful not modifying it this

01:49:56,970 --> 01:50:01,860
also bill does nothing to me this this

01:49:58,770 --> 01:50:08,580
is why it's like a server that is

01:50:01,860 --> 01:50:12,390
supposed to do that or some level five

01:50:08,580 --> 01:50:14,010
down so those who are stuck on they

01:50:12,390 --> 01:50:16,560
would fall because of the kitchen issues

01:50:14,010 --> 01:50:21,480
you just can continue to level 5 when

01:50:16,560 --> 01:50:23,400
afterwards so first of all let's give

01:50:21,480 --> 01:50:26,370
more back here and go through a little

01:50:23,400 --> 01:50:29,220
great never continue and we'll talk

01:50:26,370 --> 01:50:35,640
about it form it and then we'll go

01:50:29,220 --> 01:50:38,280
through so explain it because 11 - so

01:50:35,640 --> 01:50:41,010
log of 3 is just supposed to be doing

01:50:38,280 --> 01:50:42,930
you need to send of course hopefully

01:50:41,010 --> 01:50:46,290
form the body of course and the heavens

01:50:42,930 --> 01:50:48,200
so the first opportunity send is Sam

01:50:46,290 --> 01:50:51,480
hello

01:50:48,200 --> 01:50:52,790
so first I'm going to whom to send

01:50:51,480 --> 01:50:58,530
response

01:50:52,790 --> 01:51:00,150
ky7 spawned 200 ok and second pin is

01:50:58,530 --> 01:51:05,850
going to send the head out which other

01:51:00,150 --> 01:51:08,060
was supposed to send content length

01:51:05,850 --> 01:51:11,750
yes type in length the type would be

01:51:08,060 --> 01:51:20,790
text action on this case

01:51:11,750 --> 01:51:22,590
and stops and header content length and

01:51:20,790 --> 01:51:27,090
the legs is post just the length of the

01:51:22,590 --> 01:51:28,830
bodies it's pretty easy okay and and

01:51:27,090 --> 01:51:31,260
then we need to like the body but

01:51:28,830 --> 01:51:43,410
remember so we also need to terminate

01:51:31,260 --> 01:51:48,000
the head off first so send either by the

01:51:43,410 --> 01:51:51,330
way fun fact go to github and in the

01:51:48,000 --> 01:51:56,820
search search for the data just put type

01:51:51,330 --> 01:51:59,550
in semicolon like an cones and then WQ

01:51:56,820 --> 01:52:02,479
and have seen the results that you get

01:51:59,550 --> 01:52:04,829
very amusing just

01:52:02,479 --> 01:52:09,090
okay so and Heather so now we need to

01:52:04,829 --> 01:52:15,420
send the body so just be fired right

01:52:09,090 --> 01:52:17,249
right the body and flush it okay and

01:52:15,420 --> 01:52:21,409
that's pretty much it

01:52:17,249 --> 01:52:25,260
now has anyone tried changing sending

01:52:21,409 --> 01:52:28,800
body content length which is longer

01:52:25,260 --> 01:52:38,519
smaller larger smaller than okay what

01:52:28,800 --> 01:52:42,659
happened exactly because what happens is

01:52:38,519 --> 01:52:45,780
that usually the client and the client

01:52:42,659 --> 01:52:49,050
would just read as many bytes it is

01:52:45,780 --> 01:52:50,909
season content length and if not enough

01:52:49,050 --> 01:52:54,119
bytes meaning that the content benefit

01:52:50,909 --> 01:52:56,099
is smaller then you would see with the

01:52:54,119 --> 01:52:58,469
body cut off and if it's too long it

01:52:56,099 --> 01:53:02,070
might might be stuck until timeout of

01:52:58,469 --> 01:53:06,269
course and then just wash it to the skin

01:53:02,070 --> 01:53:10,199
but it might cause other problems so

01:53:06,269 --> 01:53:15,209
that's basically has anyone implemented

01:53:10,199 --> 01:53:17,039
music no okay other exercise you might

01:53:15,209 --> 01:53:18,239
want to do that later but these in it's

01:53:17,039 --> 01:53:23,459
very nice

01:53:18,239 --> 01:53:26,519
so just out of just a small question and

01:53:23,459 --> 01:53:27,869
suppose you're sending a body okay and

01:53:26,519 --> 01:53:31,380
let's say that the body is very very

01:53:27,869 --> 01:53:35,130
long let's say 100 megabytes what would

01:53:31,380 --> 01:53:37,280
you do so chunks that's one one option

01:53:35,130 --> 01:53:40,229
okay and another option is to just

01:53:37,280 --> 01:53:43,499
buffer it and then send it thoughts just

01:53:40,229 --> 01:53:46,559
flush it to the TCP stream in the loop

01:53:43,499 --> 01:53:49,260
sort of nothing sir chunked response you

01:53:46,559 --> 01:53:53,699
do know in advance what's the size of

01:53:49,260 --> 01:53:55,469
the content so you just loop it here

01:53:53,699 --> 01:53:58,079
with the right you just bite it in

01:53:55,469 --> 01:54:00,360
chunks but the transfer encoding

01:53:58,079 --> 01:54:04,309
technique changed still acronym of a

01:54:00,360 --> 01:54:09,239
transfer encoding so it's also one word

01:54:04,309 --> 01:54:11,249
any questions about this cool another

01:54:09,239 --> 01:54:15,510
question so you see that the encoding

01:54:11,249 --> 01:54:18,780
here is utf-8 right so anyone tried the

01:54:15,510 --> 01:54:24,260
emoji thingy okay what happened I got

01:54:18,780 --> 01:54:28,380
this weird arcade simple yeah I know yes

01:54:24,260 --> 01:54:31,079
so why does that happen because they

01:54:28,380 --> 01:54:33,150
encoded C Unicode basically when you use

01:54:31,079 --> 01:54:35,699
emoji Unicode like the bottom part of

01:54:33,150 --> 01:54:40,050
Unicode is identical to asking okay know

01:54:35,699 --> 01:54:41,729
the normal character walk because it's

01:54:40,050 --> 01:54:46,800
the same encoding basically Unicode is a

01:54:41,729 --> 01:54:48,809
superset of musky but Hebrew and the

01:54:46,800 --> 01:54:50,849
Chinese and all those weird languages

01:54:48,809 --> 01:54:51,570
and emojis and all that stuff that they

01:54:50,849 --> 01:54:53,749
are different

01:54:51,570 --> 01:54:57,050
okay Unicode they exist they might not

01:54:53,749 --> 01:54:59,969
exist in ASCII or anyway other is oh

01:54:57,050 --> 01:55:03,300
heas encoding so you would get really

01:54:59,969 --> 01:55:05,729
good results and yeah that's where

01:55:03,300 --> 01:55:08,190
doesn't look anyone remembers the old

01:55:05,729 --> 01:55:09,659
days before we had started on the

01:55:08,190 --> 01:55:13,940
internet and we had like really weird

01:55:09,659 --> 01:55:20,369
and coatings for people yeah anyone

01:55:13,940 --> 01:55:22,739
remember what okay cool okay baby

01:55:20,369 --> 01:55:25,469
so back in the day we actually had to

01:55:22,739 --> 01:55:28,949
manually select encoding for webpages

01:55:25,469 --> 01:55:31,260
it was incredibly annoying and like no

01:55:28,949 --> 01:55:35,070
no wants to go back to this so thank God

01:55:31,260 --> 01:55:38,459
we now have probably said Content ID so

01:55:35,070 --> 01:55:45,179
great it was cool okay

01:55:38,459 --> 01:55:46,979
level four so we do apologize for for a

01:55:45,179 --> 01:55:49,679
problem with an O qualified thinking

01:55:46,979 --> 01:55:51,209
this is like the basic solution of all

01:55:49,679 --> 01:55:54,570
just go for it okay

01:55:51,209 --> 01:55:56,849
so as before we have Charles said and so

01:55:54,570 --> 01:55:59,519
the contact contact know that know if

01:55:56,849 --> 01:56:01,880
you catch the dog okay so I put only one

01:55:59,519 --> 01:56:03,809
directive a question told of quite a few

01:56:01,880 --> 01:56:08,309
documentation and then I decide to

01:56:03,809 --> 01:56:09,900
expire to some you know sometime in the

01:56:08,309 --> 01:56:14,070
distant future about the year from now

01:56:09,900 --> 01:56:16,110
and then I send a week Hank weekend

01:56:14,070 --> 01:56:20,160
okay the w / means it's week week

01:56:16,110 --> 01:56:22,320
relation okay and I didn't bother to

01:56:20,160 --> 01:56:22,860
actually cook it and five but but it's

01:56:22,320 --> 01:56:25,890
not a problem

01:56:22,860 --> 01:56:27,780
Python just import and they find if you

01:56:25,890 --> 01:56:31,680
want and then I put last modified and

01:56:27,780 --> 01:56:34,560
the dated a few days ago because we're

01:56:31,680 --> 01:56:36,420
not and that's basically everything you

01:56:34,560 --> 01:56:38,430
need expires and control that's

01:56:36,420 --> 01:56:40,500
basically with the meaning and the

01:56:38,430 --> 01:56:42,930
reason why for most of you didn't work

01:56:40,500 --> 01:56:45,240
is that if you look at both the console

01:56:42,930 --> 01:56:47,280
the first request is two hundred and

01:56:45,240 --> 01:56:49,410
we'll get two hundred the grade the

01:56:47,280 --> 01:56:53,370
puzzle would get response it will say

01:56:49,410 --> 01:56:55,860
that this has last modified in eater at

01:56:53,370 --> 01:56:59,370
us and then a second request it will

01:56:55,860 --> 01:57:07,590
send if modified since ok and of course

01:56:59,370 --> 01:57:11,270
the he tag is in humor other hello if

01:57:07,590 --> 01:57:11,270
modified since and what was that one

01:57:11,360 --> 01:57:21,270
sorry if what if I'd since and there was

01:57:16,950 --> 01:57:26,190
another one later duty to do to do to do

01:57:21,270 --> 01:57:30,060
not expire all right if not match very

01:57:26,190 --> 01:57:32,460
nice so I don't sign the infinitely fair

01:57:30,060 --> 01:57:35,370
match or when it's not match and and the

01:57:32,460 --> 01:57:37,320
if modified or is not qualified and I'll

01:57:35,370 --> 01:57:39,450
server will basically need to say that

01:57:37,320 --> 01:57:40,860
the second request but here we would

01:57:39,450 --> 01:57:46,350
have to have like these back

01:57:40,860 --> 01:57:50,100
we're after death if so petals and final

01:57:46,350 --> 01:57:55,740
sponsor hello which is like search if

01:57:50,100 --> 01:57:58,500
modified since and pass it and actually

01:57:55,740 --> 01:58:00,960
do the calculation and we turn three or

01:57:58,500 --> 01:58:02,400
four okay and then bounce or nose okay

01:58:00,960 --> 01:58:04,320
there's not gonna be any content because

01:58:02,400 --> 01:58:07,700
I would have it and we'll stay with

01:58:04,320 --> 01:58:10,230
respectful there either way to craft the

01:58:07,700 --> 01:58:12,930
head of such that the browser will not

01:58:10,230 --> 01:58:15,090
even send to your phone okay I'm not

01:58:12,930 --> 01:58:17,310
going to go to that now will fix it for

01:58:15,090 --> 01:58:22,580
next time we do this for chance so I do

01:58:17,310 --> 01:58:22,580
apologize to this question is about the

01:58:25,770 --> 01:58:33,760
bass populations - yes oh that's that's

01:58:32,500 --> 01:58:37,600
the next question actually

01:58:33,760 --> 01:58:39,760
so technically speaking attack does not

01:58:37,600 --> 01:58:41,700
have to be a hash so like you can just

01:58:39,760 --> 01:58:45,060
make up whatever you are do you want

01:58:41,700 --> 01:58:47,320
just easier with hashing for downloads

01:58:45,060 --> 01:58:52,390
helps because you actually want to be

01:58:47,320 --> 01:58:54,910
bash but technically speaking it's

01:58:52,390 --> 01:58:58,330
probably better and more correct to use

01:58:54,910 --> 01:59:00,910
the tag mandates but often you don't

01:58:58,330 --> 01:59:03,250
actually care about the content you care

01:59:00,910 --> 01:59:04,960
about dates so it really depends on

01:59:03,250 --> 01:59:06,300
application think about for example

01:59:04,960 --> 01:59:09,850
[Applause]

01:59:06,300 --> 01:59:11,640
stock but if you have some interface

01:59:09,850 --> 01:59:14,590
that gives you information about stocks

01:59:11,640 --> 01:59:15,330
okay so that might be relevant to like

01:59:14,590 --> 01:59:17,560
15 minutes

01:59:15,330 --> 01:59:19,810
right because of the business reasons

01:59:17,560 --> 01:59:22,180
after 15 minutes you want to refresh and

01:59:19,810 --> 01:59:24,010
because you know stock prices went up or

01:59:22,180 --> 01:59:25,630
down or whatever maybe it's results for

01:59:24,010 --> 01:59:28,270
my I don't know whole slices

01:59:25,630 --> 01:59:31,090
okay so in the application perspective

01:59:28,270 --> 01:59:34,240
you actually care about time so this is

01:59:31,090 --> 01:59:37,770
why if it's mostly an app you click on

01:59:34,240 --> 01:59:41,560
the issue if you want to use all time

01:59:37,770 --> 01:59:43,810
also hashing costs CPU cycles so it's

01:59:41,560 --> 01:59:45,700
easier of the sake metadata when the

01:59:43,810 --> 01:59:48,010
document was last modified rather than

01:59:45,700 --> 01:59:50,020
computing every time and effects um

01:59:48,010 --> 01:59:51,730
obviously you can put it aside but if

01:59:50,020 --> 01:59:54,790
you're gonna do this calculation every

01:59:51,730 --> 02:00:00,730
time it just in a waste way secure

01:59:54,790 --> 02:00:04,210
cycles and so that's going to talk about

02:00:00,730 --> 02:00:06,490
35 per second so virtual hosting okay so

02:00:04,210 --> 02:00:07,840
my dogs mention this before they venture

02:00:06,490 --> 02:00:09,910
hosting is that we look at the

02:00:07,840 --> 02:00:12,610
wholesaler and based on the host ID that

02:00:09,910 --> 02:00:15,940
we decided to do in real servers you

02:00:12,610 --> 02:00:18,199
might have multiple like applications

02:00:15,940 --> 02:00:23,179
but servers hosted on same

02:00:18,199 --> 02:00:23,960
some installation think about love world

02:00:23,179 --> 02:00:27,440
burst at all

02:00:23,960 --> 02:00:30,920
okay the many many web work buses what

02:00:27,440 --> 02:00:33,050
sites hosted on the onwards on wall post

02:00:30,920 --> 02:00:35,300
at all and you need to look at the whole

02:00:33,050 --> 02:00:37,400
setup to decide which site to actually

02:00:35,300 --> 02:00:37,960
serve so what we do is we look at the

02:00:37,400 --> 02:00:41,750
header

02:00:37,960 --> 02:00:44,390
okay in this case I feel with the

02:00:41,750 --> 02:00:46,429
documentation with Python server you can

02:00:44,390 --> 02:00:50,540
you can see how you access to questions

02:00:46,429 --> 02:00:53,390
it's basically the petals and what you

02:00:50,540 --> 02:00:56,510
need to do is decide and implement that

02:00:53,390 --> 02:00:58,340
is the mandatory content and basically

02:00:56,510 --> 02:01:02,739
decide what do we turn based on the

02:00:58,340 --> 02:01:05,330
hospital so that's basically it go neck

02:01:02,739 --> 02:01:07,699
just I want to show you something okay

02:01:05,330 --> 02:01:14,150
so if I call so I'm calling this um

02:01:07,699 --> 02:01:16,750
because offline mode which is so if you

02:01:14,150 --> 02:01:20,570
think offline mode in Chrome or Firefox

02:01:16,750 --> 02:01:21,620
and you did the exercise phone so you

02:01:20,570 --> 02:01:25,360
can actually see there are those

02:01:21,620 --> 02:01:28,850
flashing and I still see the same thing

02:01:25,360 --> 02:01:31,489
and this box or fly perfectly and if you

02:01:28,850 --> 02:01:34,850
see the netbook console tells me that

02:01:31,489 --> 02:01:37,219
this has been cached it transfers its -

02:01:34,850 --> 02:01:40,730
so this is actually having to verify

02:01:37,219 --> 02:01:42,230
that you'd love Paul probably despite

02:01:40,730 --> 02:01:44,540
not implementing with real phobia

02:01:42,230 --> 02:01:46,989
response okay we don't know the

02:01:44,540 --> 02:01:46,989
difference

02:01:47,800 --> 02:01:51,980
let's see the solution for level 5 then

02:01:50,870 --> 02:01:55,489
continue to the slides

02:01:51,980 --> 02:01:57,650
so the purpose of this task was to see

02:01:55,489 --> 02:02:00,860
how we can read the verse header and how

02:01:57,650 --> 02:02:02,600
we can easy manipulate and in these two

02:02:00,860 --> 02:02:04,670
methods all we have to do is to

02:02:02,600 --> 02:02:06,590
implement those four functions so is the

02:02:04,670 --> 02:02:09,469
main allowed is basically reading the

02:02:06,590 --> 02:02:12,290
hospital what I'm doing here just

02:02:09,469 --> 02:02:15,679
reading from the headers right hadass

02:02:12,290 --> 02:02:17,600
dictionary so in the host header and you

02:02:15,679 --> 02:02:20,420
see the extra split I'm doing here

02:02:17,600 --> 02:02:22,460
if you noticed the hospital contains

02:02:20,420 --> 02:02:24,710
also the pork so if you're using a

02:02:22,460 --> 02:02:26,869
custom Bob let's say 8080 with the

02:02:24,710 --> 02:02:30,469
localhost Nikola time

02:02:26,869 --> 02:02:32,360
colon 8080 and since I'm just nice

02:02:30,469 --> 02:02:35,269
person I'm getting a ring the weeks

02:02:32,360 --> 02:02:38,869
probably move my noise and then all I do

02:02:35,269 --> 02:02:43,309
is to check if the domain is inside the

02:02:38,869 --> 02:02:46,399
dictionary or not if it's not will it

02:02:43,309 --> 02:02:49,820
tell 400 bad request you know why will

02:02:46,399 --> 02:02:50,860
it come 400 bad request and why not

02:02:49,820 --> 02:02:53,479
something else

02:02:50,860 --> 02:02:56,840
the simple answer is they are saying

02:02:53,479 --> 02:02:59,719
they are FC says that if if you don't

02:02:56,840 --> 02:03:01,939
get the host header for example someone

02:02:59,719 --> 02:03:04,280
says you malicious malicious headers and

02:03:01,939 --> 02:03:07,939
does not specify the header you master

02:03:04,280 --> 02:03:10,369
it nor in 400 let's say so much try to

02:03:07,939 --> 02:03:13,489
send the domain it is not as part of our

02:03:10,369 --> 02:03:16,340
allow domains also the RFC specifies you

02:03:13,489 --> 02:03:19,280
should return 400 and the reasoning that

02:03:16,340 --> 02:03:21,499
oxidized to specify that so we we would

02:03:19,280 --> 02:03:24,110
be compatible between our clients so

02:03:21,499 --> 02:03:25,969
imagine you this one once that is got to

02:03:24,110 --> 02:03:28,010
identify that and others they would use

02:03:25,969 --> 02:03:30,889
different one our clients wouldn't know

02:03:28,010 --> 02:03:33,139
how to behave according to the CEO so

02:03:30,889 --> 02:03:38,179
the solution for that is to wait the

02:03:33,139 --> 02:03:40,579
header and a host header check in this

02:03:38,179 --> 02:03:43,639
very static case whether it's part of

02:03:40,579 --> 02:03:50,689
our Lord oh my soul not and if not just

02:03:43,639 --> 02:03:52,820
flashback 400 any questions of that log

02:03:50,689 --> 02:03:55,129
simple straightforward right I didn't

02:03:52,820 --> 02:03:58,579
write here too much complex code basic

02:03:55,129 --> 02:04:01,459
string manipulation nothing complex how

02:03:58,579 --> 02:04:05,419
how have you try to check whether these

02:04:01,459 --> 02:04:07,879
pink box or not have anyone managed to

02:04:05,419 --> 02:04:11,050
go to the browser and write the main one

02:04:07,879 --> 02:04:14,059
that come and see if it works

02:04:11,050 --> 02:04:16,510
only one nice can you share us how you

02:04:14,059 --> 02:04:16,510
did that

02:04:17,409 --> 02:04:23,629
exactly

02:04:18,939 --> 02:04:28,309
every unix-like operation thinking as a

02:04:23,629 --> 02:04:30,920
file for the TC host a TC host

02:04:28,309 --> 02:04:33,079
we don't talk about we go single swim if

02:04:30,920 --> 02:04:37,250
you use Windows I'm just kidding

02:04:33,079 --> 02:04:40,219
but this file easily can map us domains

02:04:37,250 --> 02:04:42,619
the static IP so we wouldn't actually go

02:04:40,219 --> 02:04:54,349
and resolve the DNS what's the second

02:04:42,619 --> 02:04:57,829
option to check with our I yes that also

02:04:54,349 --> 02:05:00,770
works and their simplest yes a few of us

02:04:57,829 --> 02:05:03,800
can change offices thank you and the

02:05:00,770 --> 02:05:07,159
most simple way to check whether both

02:05:03,800 --> 02:05:11,300
works or not is to send Cal with minus H

02:05:07,159 --> 02:05:14,150
minus H post double neck all the time

02:05:11,300 --> 02:05:16,880
double colons any domain you want

02:05:14,150 --> 02:05:19,250
basically in the same method we could

02:05:16,880 --> 02:05:20,980
send any heavy we want and check whether

02:05:19,250 --> 02:05:25,369
we receive them or not

02:05:20,980 --> 02:05:27,800
didn't Oh postman I prefer characters on

02:05:25,369 --> 02:05:29,900
me but some people here says postman I

02:05:27,800 --> 02:05:31,730
said something good you supposed to like

02:05:29,900 --> 02:05:37,010
this I said some people use postman no

02:05:31,730 --> 02:05:39,829
because so I want to emphasize care like

02:05:37,010 --> 02:05:43,039
it's not it's not that clear all yes but

02:05:39,829 --> 02:05:46,969
Cal is like the most easiest tool to

02:05:43,039 --> 02:05:49,099
debug 95% of our HTTP shows the two

02:05:46,969 --> 02:05:52,159
flicks you need to know the signs mean

02:05:49,099 --> 02:05:54,860
SH is suppose one ministry Minister

02:05:52,159 --> 02:05:56,840
elbows sounds funny right but with Venus

02:05:54,860 --> 02:05:58,670
availables you can see what headers will

02:05:56,840 --> 02:06:00,619
send him and one will get it back you

02:05:58,670 --> 02:06:04,909
can easily verify that your payload back

02:06:00,619 --> 02:06:06,889
is correct or not and I said to so I I

02:06:04,909 --> 02:06:09,980
actually want the same in a sage but

02:06:06,889 --> 02:06:13,309
already said that so we just gonna keep

02:06:09,980 --> 02:06:15,800
with minus H and minus me permission if

02:06:13,309 --> 02:06:17,659
you're seen rights person not like this

02:06:15,800 --> 02:06:20,510
person here actually don't worry is

02:06:17,659 --> 02:06:23,840
killed you want to use a very called

02:06:20,510 --> 02:06:27,130
HTTP which is

02:06:23,840 --> 02:06:30,590
so that's baby hmm

02:06:27,130 --> 02:06:33,350
sorry nice it gives you form of the

02:06:30,590 --> 02:06:36,290
payload back and other stuff much easier

02:06:33,350 --> 02:06:37,820
people's and see all right just hook it

02:06:36,290 --> 02:06:40,310
up will do

02:06:37,820 --> 02:06:41,830
very nice makes your life much much

02:06:40,310 --> 02:06:44,630
easier

02:06:41,830 --> 02:06:51,880
and again it's written in OGS so I'm not

02:06:44,630 --> 02:06:55,010
sure what is the Python yeah so let's

02:06:51,880 --> 02:06:56,810
let's go back to the slides and finish

02:06:55,010 --> 02:07:01,550
those up and continue with their hands

02:06:56,810 --> 02:07:04,489
on pallets all right connection to use

02:07:01,550 --> 02:07:07,250
the most funniest fun part in our

02:07:04,489 --> 02:07:10,310
session so you heard about keep alive

02:07:07,250 --> 02:07:13,460
right we want to make sure all

02:07:10,310 --> 02:07:16,400
connection may be reusable for other

02:07:13,460 --> 02:07:19,010
requests this is example I can give

02:07:16,400 --> 02:07:21,560
let's assume you open your browser and

02:07:19,010 --> 02:07:23,870
go into some network so let's assume

02:07:21,560 --> 02:07:25,610
it's your localhost web server if you

02:07:23,870 --> 02:07:28,010
open the dev tools you can see that

02:07:25,610 --> 02:07:31,010
besides the initial request you sent it

02:07:28,010 --> 02:07:32,570
says another request like favicon and in

02:07:31,010 --> 02:07:34,610
marine science usually were also down

02:07:32,570 --> 02:07:38,000
assets if you're not sitting at the end

02:07:34,610 --> 02:07:40,370
or other endpoints so if we have five

02:07:38,000 --> 02:07:42,679
six requires gonna happen in a period of

02:07:40,370 --> 02:07:45,380
a few seconds so within a period of a

02:07:42,679 --> 02:07:47,870
minute we can reuse the same TCP

02:07:45,380 --> 02:07:49,880
connection and not doing the round trips

02:07:47,870 --> 02:07:52,550
that the way she talked before all of

02:07:49,880 --> 02:07:55,730
them to do those to do that we have a

02:07:52,550 --> 02:07:58,880
connection header that concerns a keep

02:07:55,730 --> 02:08:00,860
allowing the connection this header says

02:07:58,880 --> 02:08:03,140
to the cell though please do not close

02:08:00,860 --> 02:08:06,410
the connection because those chance I'm

02:08:03,140 --> 02:08:10,520
gonna reuse it if the sender is fine and

02:08:06,410 --> 02:08:12,380
good is gonna say okay sure you have X X

02:08:10,520 --> 02:08:14,810
amount of time until the connections

02:08:12,380 --> 02:08:17,179
gonna get close in that time frame you

02:08:14,810 --> 02:08:19,460
can send new transactions new requests

02:08:17,179 --> 02:08:24,050
all those requests gonna reuse the same

02:08:19,460 --> 02:08:26,030
connection it's we show here example how

02:08:24,050 --> 02:08:28,550
you can define timeouts by the way fun

02:08:26,030 --> 02:08:29,890
fact when I say keep alive I'm talking

02:08:28,550 --> 02:08:32,860
about the convention

02:08:29,890 --> 02:08:35,080
convention hello says that you need to

02:08:32,860 --> 02:08:37,960
keep alive the connection there's

02:08:35,080 --> 02:08:40,240
another header called keep alive which

02:08:37,960 --> 02:08:42,010
is not saying that you need to keep the

02:08:40,240 --> 02:08:44,380
connection open it just gives them

02:08:42,010 --> 02:08:46,990
attributes on how to keep the connection

02:08:44,380 --> 02:08:48,790
open so if you don't say connection keep

02:08:46,990 --> 02:08:51,390
alive the keep alive header is

02:08:48,790 --> 02:08:54,550
meaningless and fun fact

02:08:51,390 --> 02:08:57,790
so the trade-offs of these things is

02:08:54,550 --> 02:09:00,400
it's basically managing a state think of

02:08:57,790 --> 02:09:02,500
your remote servers it means that they

02:09:00,400 --> 02:09:04,210
need to handle the transaction they need

02:09:02,500 --> 02:09:06,490
to keep somewhere the connection open

02:09:04,210 --> 02:09:08,380
they need to somehow make sure the

02:09:06,490 --> 02:09:10,870
connection is not idle anymore because

02:09:08,380 --> 02:09:12,820
if I'm just sending one request and I'm

02:09:10,870 --> 02:09:14,230
not going to go back to you why should I

02:09:12,820 --> 02:09:17,170
keep the connection open you just

02:09:14,230 --> 02:09:19,480
wasting resources and the machine and as

02:09:17,170 --> 02:09:20,500
we said connections maybe still because

02:09:19,480 --> 02:09:25,000
in real world

02:09:20,500 --> 02:09:27,400
nothing like TCP is not not for fact can

02:09:25,000 --> 02:09:29,680
well if I have a connection that just

02:09:27,400 --> 02:09:33,160
cut off his internet line and we didn't

02:09:29,680 --> 02:09:36,370
have the thing and the thing I just

02:09:33,160 --> 02:09:38,380
think it doesn't means that it doesn't

02:09:36,370 --> 02:09:39,850
means the connection on the server

02:09:38,380 --> 02:09:42,370
actually gonna get closed so the

02:09:39,850 --> 02:09:44,260
connection might be in time wait go in I

02:09:42,370 --> 02:09:45,610
know in a state that it's just gonna be

02:09:44,260 --> 02:09:47,440
poked and it just gonna keep your

02:09:45,610 --> 02:09:50,500
phallus kept or file it's gonna keep

02:09:47,440 --> 02:09:52,120
your pre sources and if you're using for

02:09:50,500 --> 02:09:55,630
it will serve at a fixed size but

02:09:52,120 --> 02:09:59,470
possible you may you may finish up slots

02:09:55,630 --> 02:10:02,020
to to accept new connections so managing

02:09:59,470 --> 02:10:04,360
connection is not easy it's really not

02:10:02,020 --> 02:10:06,340
easy and you're gonna see later in the

02:10:04,360 --> 02:10:09,580
workshop of how the fine tunings of

02:10:06,340 --> 02:10:12,490
timeouts and either connections handing

02:10:09,580 --> 02:10:15,250
can improve that but we don't keep alive

02:10:12,490 --> 02:10:17,650
I think most of our web application

02:10:15,250 --> 02:10:20,860
would start because we have so much

02:10:17,650 --> 02:10:23,380
repeating repeating transaction over

02:10:20,860 --> 02:10:25,450
basic web servers and the fact that we

02:10:23,380 --> 02:10:28,270
know and we can keep the same connection

02:10:25,450 --> 02:10:32,170
to reuse is a nice is a nice performance

02:10:28,270 --> 02:10:33,940
addition gesture something that's nice

02:10:32,170 --> 02:10:36,940
it at home Oh

02:10:33,940 --> 02:10:38,949
you know your favorite web page might be

02:10:36,940 --> 02:10:43,530
Facebook we don't whatever you want no

02:10:38,949 --> 02:10:47,380
matter and just go to the web console

02:10:43,530 --> 02:10:50,139
hit like a checkbox Digimon or disable

02:10:47,380 --> 02:10:52,989
cache and see how many requests you get

02:10:50,139 --> 02:10:56,130
then you need to do to get one page just

02:10:52,989 --> 02:10:58,719
count them pretty interesting experiment

02:10:56,130 --> 02:11:00,639
and also if you do care ministry you can

02:10:58,719 --> 02:11:08,380
see if the connection is being reused or

02:11:00,639 --> 02:11:10,750
Maximus and last thing for today is HTTP

02:11:08,380 --> 02:11:14,530
pipelining we mentioned that politically

02:11:10,750 --> 02:11:20,139
the beginning thank yourself at the bite

02:11:14,530 --> 02:11:22,510
mark on Cheers so basically as I

02:11:20,139 --> 02:11:23,560
mentioned each transactional HTTP

02:11:22,510 --> 02:11:25,780
request/response

02:11:23,560 --> 02:11:27,850
mean that once we open a TCP connection

02:11:25,780 --> 02:11:30,460
and we send in a request for waiting for

02:11:27,850 --> 02:11:32,170
the response to come what happens if we

02:11:30,460 --> 02:11:34,690
have 10 requests we need to do

02:11:32,170 --> 02:11:35,409
concurrently should we wait for which

02:11:34,690 --> 02:11:38,320
request

02:11:35,409 --> 02:11:41,080
shouldn't we so it should be 1 1 and

02:11:38,320 --> 02:11:43,330
later on an HTTP 2 which we won't talk

02:11:41,080 --> 02:11:45,300
about it they implemented the concept

02:11:43,330 --> 02:11:47,320
called pipelining or multiplexing

02:11:45,300 --> 02:11:49,480
basically as you can see without

02:11:47,320 --> 02:11:51,219
pipelining we're doing few on tricks

02:11:49,480 --> 02:11:53,199
we're going to the silver getting a

02:11:51,219 --> 02:11:55,750
response back to open in your collection

02:11:53,199 --> 02:11:58,510
or when you're on your transaction go

02:11:55,750 --> 02:12:01,420
back and do it sequentially what if I

02:11:58,510 --> 02:12:04,239
say we could do bunch multiple requests

02:12:01,420 --> 02:12:06,790
at the same time to the server and the

02:12:04,239 --> 02:12:09,219
current ease of HP one one pipelining

02:12:06,790 --> 02:12:11,170
is that their responses going to get

02:12:09,219 --> 02:12:12,940
back on the same order you send a

02:12:11,170 --> 02:12:13,750
request so you can within a single

02:12:12,940 --> 02:12:15,520
transaction

02:12:13,750 --> 02:12:17,050
send a few requests and get them

02:12:15,520 --> 02:12:19,060
sequentially back which is nice because

02:12:17,050 --> 02:12:21,610
you have the recommending one to one of

02:12:19,060 --> 02:12:23,650
your sequence of of sending the request

02:12:21,610 --> 02:12:25,810
the payload back so you don't need to

02:12:23,650 --> 02:12:29,620
get messing with how do you match one

02:12:25,810 --> 02:12:33,040
request to the response HTTP to improved

02:12:29,620 --> 02:12:34,870
it even more with multiplexing I don't

02:12:33,040 --> 02:12:36,690
think we're gonna have enough time talk

02:12:34,870 --> 02:12:39,480
about it but

02:12:36,690 --> 02:12:42,090
and I think that i really suggest for

02:12:39,480 --> 02:12:44,969
you to search later what is the problem

02:12:42,090 --> 02:12:47,190
with HTTP pipelining especially search

02:12:44,969 --> 02:12:51,270
for something called a set of blocking

02:12:47,190 --> 02:12:53,550
line a head of line blocking and you

02:12:51,270 --> 02:12:55,410
will surprised that it's not really easy

02:12:53,550 --> 02:12:57,989
to do that and sometimes does some

02:12:55,410 --> 02:13:00,150
system issues and it should be free you

02:12:57,989 --> 02:13:05,300
can solve it even better but that's even

02:13:00,150 --> 02:13:08,250
major topic let's talk about it so

02:13:05,300 --> 02:13:10,230
slimming few different users become very

02:13:08,250 --> 02:13:12,600
important for various reasons first of

02:13:10,230 --> 02:13:15,239
all everybody wants you chat and stuff

02:13:12,600 --> 02:13:17,130
like that and get real-time feeds of

02:13:15,239 --> 02:13:19,440
data from the internet which is like

02:13:17,130 --> 02:13:22,170
really cool I'm not the question arises

02:13:19,440 --> 02:13:25,350
how do we do still remember that HTTP

02:13:22,170 --> 02:13:28,890
request/response oriented protocol so

02:13:25,350 --> 02:13:30,360
you get like data and then you ask for

02:13:28,890 --> 02:13:33,510
more data and so on so on and so on and

02:13:30,360 --> 02:13:35,160
it's not release them okay so how do we

02:13:33,510 --> 02:13:38,400
go to stay in from the quest response

02:13:35,160 --> 02:13:39,630
portable so there are a few ways wooden

02:13:38,400 --> 02:13:41,850
me they hacked it

02:13:39,630 --> 02:13:43,650
okay so long Pauling was one of the

02:13:41,850 --> 02:13:47,489
original mechanisms of people used to

02:13:43,650 --> 02:13:49,140
simulate streaming on top of HTTP and

02:13:47,489 --> 02:13:52,080
the way long polling works is basically

02:13:49,140 --> 02:13:54,060
a loop you issue a request and instead

02:13:52,080 --> 02:13:56,160
of responding immediately the server

02:13:54,060 --> 02:13:58,350
just you know how to connection open

02:13:56,160 --> 02:14:00,510
okay doesn't respond to the client the

02:13:58,350 --> 02:14:02,790
client is basically stuck all us and

02:14:00,510 --> 02:14:04,050
when does something to send that the

02:14:02,790 --> 02:14:06,719
client then it will terminate the

02:14:04,050 --> 02:14:09,030
connection maternal spawns okay flush

02:14:06,719 --> 02:14:12,270
the response back things for example if

02:14:09,030 --> 02:14:14,760
those chat okay I would pull server

02:14:12,270 --> 02:14:16,800
that's game is there like a new text new

02:14:14,760 --> 02:14:19,170
messages for me and the server would not

02:14:16,800 --> 02:14:21,630
respond it will wait well wait wait wait

02:14:19,170 --> 02:14:23,910
and if during that time they got

02:14:21,630 --> 02:14:26,550
messages me then it would send the

02:14:23,910 --> 02:14:28,670
messages immediately to me and see the

02:14:26,550 --> 02:14:30,960
messages render them in the puzzles and

02:14:28,670 --> 02:14:33,840
immediately would open another polling

02:14:30,960 --> 02:14:36,120
question so the discourse on so usually

02:14:33,840 --> 02:14:38,460
that looks like 20 seconds 60 seconds

02:14:36,120 --> 02:14:42,000
whatever that the connection is held

02:14:38,460 --> 02:14:44,969
open and when it terminates either with

02:14:42,000 --> 02:14:45,390
data without data I just pull again and

02:14:44,969 --> 02:14:47,190
again

02:14:45,390 --> 02:14:50,670
this is called blonde polling it's a

02:14:47,190 --> 02:14:53,910
hack it works fairly well and it works

02:14:50,670 --> 02:14:57,480
so well that even sqs and other services

02:14:53,910 --> 02:14:59,250
online use it it's basically the

02:14:57,480 --> 02:15:00,270
fallback of every chat system that I

02:14:59,250 --> 02:15:03,240
know of

02:15:00,270 --> 02:15:05,610
XMPP and stuff about this dull time but

02:15:03,240 --> 02:15:08,580
actually not a mechanism that will edit

02:15:05,610 --> 02:15:11,160
the HTTP spec later for example everyone

02:15:08,580 --> 02:15:11,730
knows WebSocket right everyone is a

02:15:11,160 --> 02:15:15,120
WebSocket

02:15:11,730 --> 02:15:18,480
I was a pop we move with one socket one

02:15:15,120 --> 02:15:21,090
not all box is supported and be it's

02:15:18,480 --> 02:15:22,710
fairly complicated okay so there is

02:15:21,090 --> 02:15:25,350
another mechanism that was introduced

02:15:22,710 --> 02:15:28,020
for compatibility and also it's much

02:15:25,350 --> 02:15:30,270
easier to remember that which is SSA SSC

02:15:28,020 --> 02:15:32,760
is more limited than WebSocket it only

02:15:30,270 --> 02:15:34,350
allows to stay also to the client was

02:15:32,760 --> 02:15:36,480
WebSocket it's too wasteful in the

02:15:34,350 --> 02:15:41,060
protocol you can stay firm client to the

02:15:36,480 --> 02:15:41,060
bar to the servant and vice versa and

02:15:41,990 --> 02:15:49,950
FFA is only one way but it is much much

02:15:46,350 --> 02:15:53,310
much much much simpler than WebSocket it

02:15:49,950 --> 02:15:55,590
doesn't wear as much state and also it

02:15:53,310 --> 02:15:57,600
is compatible with existing policies so

02:15:55,590 --> 02:15:59,790
it works everywhere even supports it

02:15:57,600 --> 02:16:01,320
doesn't support WebSocket in this

02:15:59,790 --> 02:16:03,930
workshop we actually have an exercise

02:16:01,320 --> 02:16:06,990
exercise 10 well you can you can

02:16:03,930 --> 02:16:08,760
actually implement SSE itself it's not

02:16:06,990 --> 02:16:11,580
hard to do you can do it in a Python or

02:16:08,760 --> 02:16:14,970
PHP server in about six seven months

02:16:11,580 --> 02:16:18,180
ssame was WebSocket if you try to

02:16:14,970 --> 02:16:22,200
implement it just like hundreds of lines

02:16:18,180 --> 02:16:24,150
so much easier um you would be surprised

02:16:22,200 --> 02:16:26,670
that a lot of people use WebSocket

02:16:24,150 --> 02:16:29,040
because they just don't don't know SSE

02:16:26,670 --> 02:16:30,570
exists in many use cases it's enough to

02:16:29,040 --> 02:16:32,370
have one way slimming you don't need the

02:16:30,570 --> 02:16:35,280
other side of like you can implement the

02:16:32,370 --> 02:16:38,610
other side using low poly no just normal

02:16:35,280 --> 02:16:43,470
day-to-day requests so does that just

02:16:38,610 --> 02:16:45,900
poke it up it's very nice so um the one

02:16:43,470 --> 02:16:47,730
one thing due to time constraint it's

02:16:45,900 --> 02:16:50,460
already four o'clock and what kind of at

02:16:47,730 --> 02:16:52,170
least use me to go and drink if you want

02:16:50,460 --> 02:16:54,739
we're going to be here we're going to

02:16:52,170 --> 02:16:58,709
help water wants to do them

02:16:54,739 --> 02:17:01,170
exercises next up is sex where we go low

02:16:58,709 --> 02:17:03,689
level and we start implementing the HTTP

02:17:01,170 --> 02:17:05,609
server on top of sockets so if you're

02:17:03,689 --> 02:17:08,099
interested in the live details you're

02:17:05,609 --> 02:17:09,269
welcome to stay otherwise we're going to

02:17:08,099 --> 02:17:13,079
release you in a second to go at the

02:17:09,269 --> 02:17:13,380
bill okay before we say thank you and

02:17:13,079 --> 02:17:17,399
goodbye

02:17:13,380 --> 02:17:19,739
running to say two things in the github

02:17:17,399 --> 02:17:21,269
repository you'll find issues you know

02:17:19,739 --> 02:17:23,489
it's there you've seen it you know to

02:17:21,269 --> 02:17:25,170
use it feel free to open issues or

02:17:23,489 --> 02:17:27,389
subpool requests we are accepting pull

02:17:25,170 --> 02:17:30,630
requests most important you know it's

02:17:27,389 --> 02:17:33,809
most important in github stars yes

02:17:30,630 --> 02:17:36,239
please stars give us lots of stars we

02:17:33,809 --> 02:17:37,889
are not going to abuse them of course we

02:17:36,239 --> 02:17:40,360
are going to boost them but this gives

02:17:37,889 --> 02:17:43,160
them to us anyway thank you very much

02:17:40,360 --> 02:17:48,319
[Applause]

02:17:43,160 --> 02:17:48,319

YouTube URL: https://www.youtube.com/watch?v=db5TZzmoAY0


