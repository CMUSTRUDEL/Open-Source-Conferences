Title: [Spotlight Talk] Lies Enterprise Architects Told Me - Gwen Shapira
Publication date: 2020-01-12
Playlist: DevOpsDays Tel Aviv 2019
Description: 
	Lets face it – we are all liars. We often lie unintentionally and most of all – we lie to ourselves. I’ve spent the last 10 years working with enterprise architects intent on modernizing their data infrastructure, and I’ve heard many “facts” that turned out to be… less than perfectly accurate. Self-deception about state of the industry, our requirements and our capabilities can lead us to make bad choices, which leads us to build bad architectures and often leads to bad business outcomes.

If you say or hear phrases like “we have big data”, “we don’t have big data”, “this business app must be real-time” and “hybrid-cloud doesn’t exist” – you may work for an organization that can use a bit of reality check. In this talk, Gwen Shapira, principal data architect at Confluent, will share common enterprise architecture myths that did not survive contact with reality and offer some advice on how to design good data architecture given our inherent capacity for self-deception.
Captions: 
	00:00:00,440 --> 00:00:03,580
[Music]

00:00:04,879 --> 00:00:13,380
okay let's get started

00:00:07,610 --> 00:00:15,389
Shapira I work for confluent which is a

00:00:13,380 --> 00:00:17,369
company that was started by people who

00:00:15,389 --> 00:00:19,380
originally developed Kafka way back at

00:00:17,369 --> 00:00:22,170
LinkedIn I'm not going to talk about

00:00:19,380 --> 00:00:24,330
anything Kafka related it all because I

00:00:22,170 --> 00:00:27,930
spent really large parts of my career

00:00:24,330 --> 00:00:30,869
either being in software architect or

00:00:27,930 --> 00:00:32,369
advising software architects I used to

00:00:30,869 --> 00:00:33,989
say that hey don't have my title here

00:00:32,369 --> 00:00:37,110
because then you want to believe the

00:00:33,989 --> 00:00:41,160
rest of my talk but now it's even worse

00:00:37,110 --> 00:00:42,780
I'm an engineering manager mmm so just

00:00:41,160 --> 00:00:45,719
so I know how many people I'm going to

00:00:42,780 --> 00:00:50,160
insult in the next half an hour how many

00:00:45,719 --> 00:00:53,160
of you are software architects 1 2 3 ok

00:00:50,160 --> 00:00:55,020
so if you are software architect you

00:00:53,160 --> 00:00:57,090
probably know what your job is and what

00:00:55,020 --> 00:00:59,489
it is you do it may surprise you to

00:00:57,090 --> 00:01:01,920
discover that the rest of the world

00:00:59,489 --> 00:01:03,660
really doesn't so we're going to talk a

00:01:01,920 --> 00:01:06,060
bit about that and the first thing you

00:01:03,660 --> 00:01:09,750
need to know this is not a lie we do

00:01:06,060 --> 00:01:12,270
have a real job and the job is basically

00:01:09,750 --> 00:01:15,299
to get engineers across usually in very

00:01:12,270 --> 00:01:17,670
large organizations to standard items on

00:01:15,299 --> 00:01:19,200
things to kind of agree and kind of do

00:01:17,670 --> 00:01:21,930
things in the same way it's a good word

00:01:19,200 --> 00:01:25,320
organization if there is a certain set

00:01:21,930 --> 00:01:27,750
of tools methods languages that everyone

00:01:25,320 --> 00:01:29,970
can agree on so you try to get engineers

00:01:27,750 --> 00:01:33,240
to cooperate there is a huge problem

00:01:29,970 --> 00:01:36,930
with that and this is it Engineers

00:01:33,240 --> 00:01:39,720
generally do whatever it is they want to

00:01:36,930 --> 00:01:41,790
do and the reason is that is that they

00:01:39,720 --> 00:01:43,680
work for managers who have any every

00:01:41,790 --> 00:01:45,960
incentive in the world to let them do

00:01:43,680 --> 00:01:47,820
whatever they want to do now I really

00:01:45,960 --> 00:01:50,520
know that it's really hard to hire

00:01:47,820 --> 00:01:51,810
engineers and it's really hard to make

00:01:50,520 --> 00:01:53,939
sure engineers are happy and productive

00:01:51,810 --> 00:01:55,920
and as a software engineering manager

00:01:53,939 --> 00:01:57,750
this is literally your only role this is

00:01:55,920 --> 00:01:59,939
what your manager will ask you is your

00:01:57,750 --> 00:02:01,439
team happy are they shipping software as

00:01:59,939 --> 00:02:04,049
a shipping it on time do they feel

00:02:01,439 --> 00:02:05,549
productive so this is huge which means

00:02:04,049 --> 00:02:09,090
that if an engineer goes to you and says

00:02:05,549 --> 00:02:11,220
I want to use go you say sure use go and

00:02:09,090 --> 00:02:12,480
if an engineer says I want to use

00:02:11,220 --> 00:02:14,940
kubernetes sure

00:02:12,480 --> 00:02:18,090
whatever if an engineer says I want to

00:02:14,940 --> 00:02:20,879
use rest api's of course you want to use

00:02:18,090 --> 00:02:22,709
JIRA PC that's the corniest thing yes go

00:02:20,879 --> 00:02:25,140
use GOP see I have absolutely no

00:02:22,709 --> 00:02:27,120
incentive to peasant no the problem is

00:02:25,140 --> 00:02:28,650
that there is a lot of such teams across

00:02:27,120 --> 00:02:31,110
that company I just learned that they

00:02:28,650 --> 00:02:35,670
each contain a more or less five people

00:02:31,110 --> 00:02:38,060
and if half of them uses rest and the

00:02:35,670 --> 00:02:39,989
other half use the GOP see our entire

00:02:38,060 --> 00:02:41,610
micro-services plan is going to fall

00:02:39,989 --> 00:02:42,840
apart right because the whole point is

00:02:41,610 --> 00:02:45,450
they have to communicate to each other

00:02:42,840 --> 00:02:47,700
so you need to have some kind of a

00:02:45,450 --> 00:02:50,340
standard it also helps if there is like

00:02:47,700 --> 00:02:53,400
maybe I think Google says like one

00:02:50,340 --> 00:02:56,700
language for every 5,000 engineers so we

00:02:53,400 --> 00:02:58,980
try to do that but it's kind of hard you

00:02:56,700 --> 00:03:00,569
can't really force software engineers to

00:02:58,980 --> 00:03:03,090
do things because as they just said they

00:03:00,569 --> 00:03:05,640
have all the power in this relationship

00:03:03,090 --> 00:03:07,829
so what you have to do is to convince

00:03:05,640 --> 00:03:09,180
them to do things your way which of

00:03:07,829 --> 00:03:10,769
course means that nobody knows what

00:03:09,180 --> 00:03:12,930
software architects to do because if you

00:03:10,769 --> 00:03:13,349
do a fantastic job it looks like you did

00:03:12,930 --> 00:03:14,970
nothing

00:03:13,349 --> 00:03:17,220
everyone just did whatever they wanted

00:03:14,970 --> 00:03:20,130
to do and it just happened to be the

00:03:17,220 --> 00:03:25,889
exact same thing across 20,000 engineers

00:03:20,130 --> 00:03:27,660
of a large organization sure but the

00:03:25,889 --> 00:03:29,579
thing is to convince engineers who tend

00:03:27,660 --> 00:03:31,590
to be smart and opinionated we just

00:03:29,579 --> 00:03:34,109
heard a lot of opinion rises from smart

00:03:31,590 --> 00:03:36,780
engineers you have to be very convincing

00:03:34,109 --> 00:03:39,389
you have to have maybe proof you may

00:03:36,780 --> 00:03:40,919
have to do proof of concept and maybe

00:03:39,389 --> 00:03:42,959
measure seeing you have to do some

00:03:40,919 --> 00:03:44,549
research you have to have debates you

00:03:42,959 --> 00:03:46,470
have to have those conversation the

00:03:44,549 --> 00:03:50,310
really compelling designs good reasons

00:03:46,470 --> 00:03:55,739
this is ridiculous amount of work so um

00:03:50,310 --> 00:03:59,220
we take shortcuts and we may make things

00:03:55,739 --> 00:04:01,859
up because we want to believe in some

00:03:59,220 --> 00:04:03,569
things and we want to convince people of

00:04:01,859 --> 00:04:06,239
things but actually doing the research

00:04:03,569 --> 00:04:07,250
and the debates and testing and

00:04:06,239 --> 00:04:10,560
everything that it takes to actually

00:04:07,250 --> 00:04:13,379
have good convincing proofs is hard work

00:04:10,560 --> 00:04:16,709
so short cuts have been made and in the

00:04:13,379 --> 00:04:18,750
last maybe 10 years of working with

00:04:16,709 --> 00:04:22,740
software architects I heard a lot of

00:04:18,750 --> 00:04:24,630
those lies and I want to share some with

00:04:22,740 --> 00:04:25,460
you because some of them are repeating

00:04:24,630 --> 00:04:27,710
and

00:04:25,460 --> 00:04:31,789
it helps to know what the actually truth

00:04:27,710 --> 00:04:33,229
is so because I work on Apache Kafka

00:04:31,789 --> 00:04:36,590
which is sometimes use this kind of a

00:04:33,229 --> 00:04:39,289
speed layer or a fast death layer I hear

00:04:36,590 --> 00:04:41,150
this one a lot and if you're very naive

00:04:39,289 --> 00:04:43,280
you may think that if someone tells you

00:04:41,150 --> 00:04:46,729
I'm building a real-time system they are

00:04:43,280 --> 00:04:49,190
building something like that it takes a

00:04:46,729 --> 00:04:52,729
lot of my event and the recent thing you

00:04:49,190 --> 00:04:55,190
have to do is to ask well how fast does

00:04:52,729 --> 00:04:57,650
it actually have to be and then you find

00:04:55,190 --> 00:04:59,840
out oh it should be the dashboard has to

00:04:57,650 --> 00:05:03,800
be refreshed in no less than 15 minutes

00:04:59,840 --> 00:05:06,320
so okay and this is a slightly older

00:05:03,800 --> 00:05:09,620
cousin I used to work on Hadoop so

00:05:06,320 --> 00:05:12,440
between 2012 and 2016 this was my life

00:05:09,620 --> 00:05:15,380
everyone had big data and usually this

00:05:12,440 --> 00:05:19,009
is a reason to choose kind of a very

00:05:15,380 --> 00:05:21,560
unknown untested data storage system and

00:05:19,009 --> 00:05:23,180
you ask them why do you use MongoDB and

00:05:21,560 --> 00:05:25,370
say well we have big data

00:05:23,180 --> 00:05:27,470
why do you spark well we have big data

00:05:25,370 --> 00:05:30,110
and sometimes it is the right technology

00:05:27,470 --> 00:05:34,159
but sometimes you find out that they

00:05:30,110 --> 00:05:36,530
have 45 gigabytes of something so the

00:05:34,159 --> 00:05:38,840
truth is that we don't have big data we

00:05:36,530 --> 00:05:41,840
don't have real-time data what we really

00:05:38,840 --> 00:05:43,789
have our requirements we have the things

00:05:41,840 --> 00:05:46,849
that our system actually supposed to do

00:05:43,789 --> 00:05:51,080
and those big data fast data stuff is a

00:05:46,849 --> 00:05:53,840
shortcut maybe known as the lie and it

00:05:51,080 --> 00:05:55,490
basically obscure the fact that there is

00:05:53,840 --> 00:05:57,590
actually something that you want to

00:05:55,490 --> 00:05:59,509
achieve and if you use those things you

00:05:57,590 --> 00:06:01,340
will never know if you achieved it or

00:05:59,509 --> 00:06:03,320
not because you never articulated what

00:06:01,340 --> 00:06:05,360
it is the thing that you actually want

00:06:03,320 --> 00:06:07,159
to achieve so in case you've never seen

00:06:05,360 --> 00:06:09,139
them before it happens in some

00:06:07,159 --> 00:06:11,870
organizations this is what normal

00:06:09,139 --> 00:06:14,270
requirements look like we need that many

00:06:11,870 --> 00:06:15,949
megabytes per second let us see from

00:06:14,270 --> 00:06:18,229
this point to this point should will be

00:06:15,949 --> 00:06:20,419
that many milliseconds availability

00:06:18,229 --> 00:06:23,630
should be that many nines measured with

00:06:20,419 --> 00:06:26,900
this thingy storage etc so those are

00:06:23,630 --> 00:06:28,880
actual requirements but no less

00:06:26,900 --> 00:06:31,219
important actually a lot more important

00:06:28,880 --> 00:06:32,659
there are some soft requirements the

00:06:31,219 --> 00:06:34,550
things that nobody will actually tell

00:06:32,659 --> 00:06:36,320
you which is why architects work best

00:06:34,550 --> 00:06:37,860
when they've been in the organization

00:06:36,320 --> 00:06:40,139
for a really long time

00:06:37,860 --> 00:06:42,750
and they kind of know what happens to

00:06:40,139 --> 00:06:44,219
someone who takes a risk and fails what

00:06:42,750 --> 00:06:46,349
happens to someone who is the first to

00:06:44,219 --> 00:06:48,840
introduce a new technology that may or

00:06:46,349 --> 00:06:50,430
may not actually deliver and this is way

00:06:48,840 --> 00:06:52,439
more important if you say that I'm going

00:06:50,430 --> 00:06:54,569
to build a system that can do 500

00:06:52,439 --> 00:06:57,719
megabytes per second and it turns out to

00:06:54,569 --> 00:06:59,219
be to do 480 megabytes per second you'll

00:06:57,719 --> 00:07:01,620
probably get to keep your job

00:06:59,219 --> 00:07:03,449
it's going to be fine if you misjudge

00:07:01,620 --> 00:07:05,879
the organization tolerance for failure

00:07:03,449 --> 00:07:08,550
and introduce the new technology doesn't

00:07:05,879 --> 00:07:10,409
work as expected you try a lot of times

00:07:08,550 --> 00:07:11,729
after half a year it's still didn't work

00:07:10,409 --> 00:07:13,680
and everyone's like why are we not in

00:07:11,729 --> 00:07:15,900
production yet and you misunderstood

00:07:13,680 --> 00:07:17,849
what the organization is about this is

00:07:15,900 --> 00:07:20,550
usually how architects lose their job

00:07:17,849 --> 00:07:22,349
not because they didn't fit this report

00:07:20,550 --> 00:07:25,979
requirements so this is really the big

00:07:22,349 --> 00:07:28,680
one now it may seem to you like I hate

00:07:25,979 --> 00:07:31,050
all buzzwords it would be correct

00:07:28,680 --> 00:07:33,210
and I'm present buzzwords are not

00:07:31,050 --> 00:07:35,189
exactly lies but they have stuff in

00:07:33,210 --> 00:07:37,560
common with lies which is kind of a

00:07:35,189 --> 00:07:39,150
mental shortcut to avoid the hard work

00:07:37,560 --> 00:07:41,129
of understanding what is your actual

00:07:39,150 --> 00:07:43,349
requirement and what is this system

00:07:41,129 --> 00:07:46,199
actually deliver so I gave you a

00:07:43,349 --> 00:07:47,520
convenient shortcut translator so if

00:07:46,199 --> 00:07:49,770
someone tells you something about the

00:07:47,520 --> 00:07:51,900
system you can kind of have an idea what

00:07:49,770 --> 00:07:53,400
you're trying to get it and then you can

00:07:51,900 --> 00:07:55,500
check is this something that I'm

00:07:53,400 --> 00:07:58,740
actually looking for and is this

00:07:55,500 --> 00:08:01,800
something I am actually after now one

00:07:58,740 --> 00:08:03,120
word of caution is that when someone if

00:08:01,800 --> 00:08:05,789
you go to someone and ask them about

00:08:03,120 --> 00:08:09,659
requirements and just say oh hey Big

00:08:05,789 --> 00:08:13,139
Data is 45 a gigabyte and my low latency

00:08:09,659 --> 00:08:16,800
is 15 minutes you are not allowed to

00:08:13,139 --> 00:08:18,150
laugh they tend to be incredibly

00:08:16,800 --> 00:08:20,189
sensitive about that

00:08:18,150 --> 00:08:21,599
and I've had cases when I look at

00:08:20,189 --> 00:08:23,610
someone's requirement and said oh you

00:08:21,599 --> 00:08:26,819
need to go that's fantastic that's easy

00:08:23,610 --> 00:08:29,189
and what they heard is that if it's easy

00:08:26,819 --> 00:08:31,620
it's probably because something is wrong

00:08:29,189 --> 00:08:33,269
with them they don't have big data you

00:08:31,620 --> 00:08:38,459
are never allowed to laugh at someone's

00:08:33,269 --> 00:08:40,500
data size what but what I want to say is

00:08:38,459 --> 00:08:42,599
that it's good things are easy it means

00:08:40,500 --> 00:08:44,880
that we can build a shape stable

00:08:42,599 --> 00:08:46,230
simple system it's not that common that

00:08:44,880 --> 00:08:48,750
you get to build something this cheap

00:08:46,230 --> 00:08:49,270
and simple and stable so you kind of

00:08:48,750 --> 00:08:50,860
enjoy

00:08:49,270 --> 00:08:53,940
it when you find out that your

00:08:50,860 --> 00:08:56,230
requirements allow you to do that and

00:08:53,940 --> 00:08:58,630
the reasoning to remember is that there

00:08:56,230 --> 00:09:00,640
is nothing wrong with discovering that

00:08:58,630 --> 00:09:03,490
your requirements allow you to build

00:09:00,640 --> 00:09:05,860
systems a simple system nothing wrong

00:09:03,490 --> 00:09:09,490
with discovering that oh I can meet the

00:09:05,860 --> 00:09:11,800
requirements on a MySQL instance running

00:09:09,490 --> 00:09:16,110
on AWS smallest and cheapest machine

00:09:11,800 --> 00:09:19,510
this is actually fantastic

00:09:16,110 --> 00:09:22,420
now next life that I heard quite often

00:09:19,510 --> 00:09:25,810
more in recent years is that hybrid and

00:09:22,420 --> 00:09:28,000
multi clouds don't exist now don't exist

00:09:25,810 --> 00:09:31,480
is an absolute lie I know that because I

00:09:28,000 --> 00:09:34,420
worked on maybe 10 20 of those I have

00:09:31,480 --> 00:09:36,910
one of those on my own so I'm not saying

00:09:34,420 --> 00:09:39,300
it's easy or it's recommended or that

00:09:36,910 --> 00:09:43,630
you have to but they definitely exist

00:09:39,300 --> 00:09:45,900
now there is a big cloud conference from

00:09:43,630 --> 00:09:48,610
a major cloud vendor that goes around

00:09:45,900 --> 00:09:50,440
basically banning any talks that has the

00:09:48,610 --> 00:09:52,480
world multi-cloud in it from even

00:09:50,440 --> 00:09:54,040
appearing and because it's one of the

00:09:52,480 --> 00:09:56,980
biggest conferences in the world I

00:09:54,040 --> 00:09:58,510
cannot really blame a huge number of

00:09:56,980 --> 00:10:01,210
people who believe that this thing does

00:09:58,510 --> 00:10:03,940
not exist but if you get all your

00:10:01,210 --> 00:10:06,160
information from a single vendor you may

00:10:03,940 --> 00:10:09,880
be slightly out of touch with what

00:10:06,160 --> 00:10:12,970
reality is and at the very extreme case

00:10:09,880 --> 00:10:15,070
I run into people whose architecture is

00:10:12,970 --> 00:10:18,250
basically a copy-paste of some kind of a

00:10:15,070 --> 00:10:20,380
vendor talk and you can tell because it

00:10:18,250 --> 00:10:23,290
have every single component that the

00:10:20,380 --> 00:10:25,150
vendor is selling so you know I'm

00:10:23,290 --> 00:10:27,820
learning that on kinases and it's going

00:10:25,150 --> 00:10:29,440
through fire hose lending on a street

00:10:27,820 --> 00:10:31,600
ringing in Lumberton the function of the

00:10:29,440 --> 00:10:33,520
clone is in the redshift and then you

00:10:31,600 --> 00:10:36,730
kind of look at it and say well why

00:10:33,520 --> 00:10:38,320
can't you lend your data directly on s3

00:10:36,730 --> 00:10:41,500
why do you need everything else you can

00:10:38,320 --> 00:10:44,290
just write to s3 and I've never gotten

00:10:41,500 --> 00:10:46,330
an answer to that and I suspect it's

00:10:44,290 --> 00:10:47,980
because you cannot have the conversation

00:10:46,330 --> 00:10:49,810
if someone did not come up with the

00:10:47,980 --> 00:10:51,250
architecture if they didn't think about

00:10:49,810 --> 00:10:53,920
it and reason about it

00:10:51,250 --> 00:10:56,590
how would they be able to answer this

00:10:53,920 --> 00:10:59,110
question so you cannot reason them out

00:10:56,590 --> 00:11:01,210
of it the only solution is to get there

00:10:59,110 --> 00:11:02,420
first so please everyone take out your

00:11:01,210 --> 00:11:05,000
phone

00:11:02,420 --> 00:11:07,880
and this is the right architecture to

00:11:05,000 --> 00:11:09,560
copy/paste please it's fantastic it has

00:11:07,880 --> 00:11:11,779
a lot of benefits it has some drawbacks

00:11:09,560 --> 00:11:13,160
but I mean you don't really want to

00:11:11,779 --> 00:11:16,940
discuss it right that's why we

00:11:13,160 --> 00:11:19,730
copy-paste architectures but more

00:11:16,940 --> 00:11:21,709
seriously I mean if you look at what

00:11:19,730 --> 00:11:24,230
cloud vendors say on one hand they say

00:11:21,709 --> 00:11:26,899
don't do multi cloud don't do hybrid

00:11:24,230 --> 00:11:29,060
cloud this is expensive it's too hard it

00:11:26,899 --> 00:11:31,880
doesn't work but on the other hand they

00:11:29,060 --> 00:11:34,339
say hey there is no locking you cannot

00:11:31,880 --> 00:11:37,279
have bolts at the same time one of them

00:11:34,339 --> 00:11:39,440
is not true so please if there's nothing

00:11:37,279 --> 00:11:41,180
wrong with using a single cloud vendor

00:11:39,440 --> 00:11:43,399
actually it's a good idea for many

00:11:41,180 --> 00:11:45,620
reasons it makes things simpler a lot of

00:11:43,399 --> 00:11:47,269
things are cheaper you have less ops it

00:11:45,620 --> 00:11:49,850
is a good thing but you have to make

00:11:47,269 --> 00:11:51,440
know that one day you may need to go

00:11:49,850 --> 00:11:53,870
somewhere else for reasons that you may

00:11:51,440 --> 00:11:55,250
or may not choose one day you may your

00:11:53,870 --> 00:11:58,130
management may decide that hey it will

00:11:55,250 --> 00:12:00,589
save us money to go to our own data

00:11:58,130 --> 00:12:03,050
center it happened to boudreaux box so

00:12:00,589 --> 00:12:05,000
you want to have a plan B and you want

00:12:03,050 --> 00:12:07,130
to make sure that whatever means you

00:12:05,000 --> 00:12:09,800
build it make sure that you always have

00:12:07,130 --> 00:12:11,570
an idea of how to move a cloud even if

00:12:09,800 --> 00:12:13,300
you don't implement it you kind of have

00:12:11,570 --> 00:12:17,510
this sort of how to do it you're not

00:12:13,300 --> 00:12:19,790
locking yourself in in your mind okay

00:12:17,510 --> 00:12:21,380
totally different like this is not a

00:12:19,790 --> 00:12:23,570
hungry Santa lie it's sometimes true

00:12:21,380 --> 00:12:26,209
there are sometimes organizations who

00:12:23,570 --> 00:12:27,829
did micro services and they're happy

00:12:26,209 --> 00:12:30,589
with it and everything it's fantastic

00:12:27,829 --> 00:12:32,420
all power to them but very often it's

00:12:30,589 --> 00:12:35,329
not true sometimes the truth is that

00:12:32,420 --> 00:12:37,250
we're trying to be micro services and

00:12:35,329 --> 00:12:39,350
fortunately we also have this big

00:12:37,250 --> 00:12:41,720
mainframe in the back rooms that we try

00:12:39,350 --> 00:12:44,060
not to talk about in big presentations

00:12:41,720 --> 00:12:46,130
and you know what this is fine being

00:12:44,060 --> 00:12:48,800
aspirational is fine having a two year

00:12:46,130 --> 00:12:51,560
look forward looking five plan is also

00:12:48,800 --> 00:12:54,380
fine especially if you had to meet the

00:12:51,560 --> 00:12:56,209
common truths about all architectures is

00:12:54,380 --> 00:12:58,760
that they're never static they always

00:12:56,209 --> 00:13:00,980
change and while may even say that all

00:12:58,760 --> 00:13:05,360
reality always changes nothing is

00:13:00,980 --> 00:13:07,550
persistent forever so you can see

00:13:05,360 --> 00:13:09,920
architectures as kind of those Buddhist

00:13:07,550 --> 00:13:12,620
mandalas it's like these amazing works

00:13:09,920 --> 00:13:14,579
of arts drawn in the sand only to be

00:13:12,620 --> 00:13:16,230
swept away and redone

00:13:14,579 --> 00:13:18,089
don't get too attached to current

00:13:16,230 --> 00:13:19,949
architecture because we all know that in

00:13:18,089 --> 00:13:21,540
a year two years it will be something

00:13:19,949 --> 00:13:24,209
completely different maybe it will be

00:13:21,540 --> 00:13:26,339
server less maybe it will be AI maybe I

00:13:24,209 --> 00:13:28,889
architectures will be the next cool

00:13:26,339 --> 00:13:30,720
thing does is all fine those are really

00:13:28,889 --> 00:13:32,069
good lies to tell yourself that our

00:13:30,720 --> 00:13:34,889
architecture will last forever

00:13:32,069 --> 00:13:37,730
it can get worse what if you choose

00:13:34,889 --> 00:13:40,499
about micro-services is that you have

00:13:37,730 --> 00:13:42,149
50,000 microservices you have no clue

00:13:40,499 --> 00:13:44,129
what you have in words running and

00:13:42,149 --> 00:13:45,239
whites running you have no idea how

00:13:44,129 --> 00:13:47,999
they're talking to each other

00:13:45,239 --> 00:13:49,739
the simplest change ever require a

00:13:47,999 --> 00:13:51,869
little change in one configure requires

00:13:49,739 --> 00:13:54,029
teaching award flow at least across at

00:13:51,869 --> 00:13:57,149
least six different macro services and

00:13:54,029 --> 00:13:59,189
15 different teams you haven't been able

00:13:57,149 --> 00:14:00,569
to deploy anything in three months and

00:13:59,189 --> 00:14:02,939
don't even talk to me about

00:14:00,569 --> 00:14:05,489
troubleshooting if this is your truth

00:14:02,939 --> 00:14:07,980
then you may be maintaining a

00:14:05,489 --> 00:14:10,439
distributed model it it happened to a

00:14:07,980 --> 00:14:12,629
lot of companies who either try to build

00:14:10,439 --> 00:14:15,749
micro surfaces from scratch or migrated

00:14:12,629 --> 00:14:17,939
there where macro services did not

00:14:15,749 --> 00:14:20,189
deliver on their promise so how do you

00:14:17,939 --> 00:14:22,919
know if you are living in distributed a

00:14:20,189 --> 00:14:24,929
Manolis hell it's really easy micro

00:14:22,919 --> 00:14:26,910
services made a promise they made a

00:14:24,929 --> 00:14:28,709
promise of localized changes and

00:14:26,910 --> 00:14:31,769
localized deployments look at your

00:14:28,709 --> 00:14:34,230
system do you actually have them if you

00:14:31,769 --> 00:14:37,230
do then you don't have this problem and

00:14:34,230 --> 00:14:40,009
all power to you I would please send us

00:14:37,230 --> 00:14:43,679
tell us where to send all our civvies

00:14:40,009 --> 00:14:46,110
but if you if a tiny change requires

00:14:43,679 --> 00:14:48,089
changing a lot of micro services if you

00:14:46,110 --> 00:14:50,309
have dependencies on order of deployment

00:14:48,089 --> 00:14:52,589
if one machine crashes impacts

00:14:50,309 --> 00:14:55,259
everything else in its vicinity then

00:14:52,589 --> 00:14:57,269
maybe you are actually living in a world

00:14:55,259 --> 00:14:59,959
with a distributed model it and the

00:14:57,269 --> 00:15:03,299
biggest offenders there is the idea of

00:14:59,959 --> 00:15:06,269
responsibility leakage the idea is that

00:15:03,299 --> 00:15:08,429
micro service logic from one micro

00:15:06,269 --> 00:15:11,220
service leaks into a lot of others and

00:15:08,429 --> 00:15:14,429
my classic example is that you have an

00:15:11,220 --> 00:15:15,749
insurance program and you know that

00:15:14,429 --> 00:15:18,119
every time you move to a different

00:15:15,749 --> 00:15:20,220
location and you live somewhere else you

00:15:18,119 --> 00:15:22,499
need to get a new quote because your car

00:15:20,220 --> 00:15:25,230
may or may not be more or less likely to

00:15:22,499 --> 00:15:26,939
be stolen at your new location and the

00:15:25,230 --> 00:15:27,240
way you implement it is you make the

00:15:26,939 --> 00:15:29,940
cost

00:15:27,240 --> 00:15:31,410
profile call the insurance quote service

00:15:29,940 --> 00:15:33,390
every time there is an address change

00:15:31,410 --> 00:15:36,209
this is quite bad because now the

00:15:33,390 --> 00:15:39,330
customer profile has to know something

00:15:36,209 --> 00:15:42,029
about how quotes are done and it's kind

00:15:39,330 --> 00:15:43,950
of mixer and now changes about the

00:15:42,029 --> 00:15:46,320
insurance quote service actually gets

00:15:43,950 --> 00:15:49,470
distributed across multiple of those

00:15:46,320 --> 00:15:51,360
services this is my place to highly

00:15:49,470 --> 00:15:53,700
recommend looking into event-driven

00:15:51,360 --> 00:15:56,279
micro-services well the idea is that

00:15:53,700 --> 00:15:58,440
each service publishes events publishes

00:15:56,279 --> 00:16:00,570
things that happened someone change the

00:15:58,440 --> 00:16:02,820
address someone change the phone number

00:16:00,570 --> 00:16:04,410
and you don't need to know who cares

00:16:02,820 --> 00:16:06,630
about it you just need to let everyone

00:16:04,410 --> 00:16:08,310
knows it's happening and then the

00:16:06,630 --> 00:16:10,740
insurance quote service can listen to

00:16:08,310 --> 00:16:12,839
all those events and say oh someone

00:16:10,740 --> 00:16:14,760
change an address I know I have to react

00:16:12,839 --> 00:16:16,410
to an address change but not to react to

00:16:14,760 --> 00:16:18,690
a phone number change and not react to

00:16:16,410 --> 00:16:20,370
an email change which is exactly where

00:16:18,690 --> 00:16:23,850
you want so now the Insurance Service

00:16:20,370 --> 00:16:26,160
Cloud Service owns all its own logic and

00:16:23,850 --> 00:16:28,950
all the customer profile service has to

00:16:26,160 --> 00:16:30,510
do is publish events I really like those

00:16:28,950 --> 00:16:33,510
of course don't copy paste that right

00:16:30,510 --> 00:16:40,339
but a nice thing to look into I am a big

00:16:33,510 --> 00:16:40,339
fan okay another line number five

00:16:40,760 --> 00:16:46,770
Architects say we use Best of Breed and

00:16:44,060 --> 00:16:48,779
that's a problem I mean it sounds

00:16:46,770 --> 00:16:51,029
democratic it sounds fantastic I use the

00:16:48,779 --> 00:16:53,880
best of everything but the truth is

00:16:51,029 --> 00:16:57,270
usually that we use one of everything

00:16:53,880 --> 00:16:58,680
and use that's exactly the problem I

00:16:57,270 --> 00:17:01,890
talked about in the beginning right

00:16:58,680 --> 00:17:04,079
developers want to use go and geo PC and

00:17:01,890 --> 00:17:06,929
the rest api's and this framework and

00:17:04,079 --> 00:17:09,750
that framework and he'll enter form and

00:17:06,929 --> 00:17:12,890
follow me and whatever else it's say

00:17:09,750 --> 00:17:14,939
exactly what architects were hired to

00:17:12,890 --> 00:17:17,730
prevent it from happening

00:17:14,939 --> 00:17:19,949
so if you have one of everything it's

00:17:17,730 --> 00:17:22,890
more or less saying I'm not actually

00:17:19,949 --> 00:17:25,679
doing my job which is not the best thing

00:17:22,890 --> 00:17:28,350
to say obviously so the idea is that

00:17:25,679 --> 00:17:30,420
there is a cost to owning something and

00:17:28,350 --> 00:17:32,610
the more technologies you own as a team

00:17:30,420 --> 00:17:33,960
and the company the post discriminate

00:17:32,610 --> 00:17:35,400
you need to learn it you need to learn

00:17:33,960 --> 00:17:36,510
how to deploy it you need to learn all

00:17:35,400 --> 00:17:39,690
the bugs you need to learn how to

00:17:36,510 --> 00:17:41,520
monitor it etc etc this is not

00:17:39,690 --> 00:17:43,530
sustainable and the

00:17:41,520 --> 00:17:45,600
nice gruff to demonstrate how it's not

00:17:43,530 --> 00:17:47,550
sustainable note that the cost keep

00:17:45,600 --> 00:17:49,080
increasing because all those

00:17:47,550 --> 00:17:50,970
technologies have to integrate with each

00:17:49,080 --> 00:17:52,980
other and by the time you are a

00:17:50,970 --> 00:17:57,000
technology number 20 it has to integrate

00:17:52,980 --> 00:17:57,840
with one to nineteen it just gets harder

00:17:57,000 --> 00:18:00,540
and harder

00:17:57,840 --> 00:18:02,700
so yeah the graph is maybe not the most

00:18:00,540 --> 00:18:05,760
scientific but you get the idea is true

00:18:02,700 --> 00:18:08,910
it is grown from experience now if you

00:18:05,760 --> 00:18:12,030
do too much of that so if you only worry

00:18:08,910 --> 00:18:15,570
about not increasing your basically

00:18:12,030 --> 00:18:18,090
technical inventory you end up in one of

00:18:15,570 --> 00:18:20,460
the worst antipatterns ever which is

00:18:18,090 --> 00:18:22,830
that only architects get if it's you're

00:18:20,460 --> 00:18:25,200
the architect and it's your job to

00:18:22,830 --> 00:18:27,540
basically sign of new technologies and

00:18:25,200 --> 00:18:30,030
organization shouldn't you be the only

00:18:27,540 --> 00:18:32,820
one exploring new technologies and the

00:18:30,030 --> 00:18:35,310
answer is god no this is terrible

00:18:32,820 --> 00:18:37,560
it makes life terrible it's terrible for

00:18:35,310 --> 00:18:38,910
engineers because they don't get to

00:18:37,560 --> 00:18:41,190
experiment with new technologies which

00:18:38,910 --> 00:18:43,710
to be fair is the most fun part of our

00:18:41,190 --> 00:18:45,990
job but it's also terrible for

00:18:43,710 --> 00:18:49,800
architects because the architect job is

00:18:45,990 --> 00:18:52,050
to have some influence and it's really

00:18:49,800 --> 00:18:53,820
hard to influence people to try things

00:18:52,050 --> 00:18:56,490
when you're the only one who is looking

00:18:53,820 --> 00:18:58,800
into them and when they feel like you're

00:18:56,490 --> 00:19:00,450
forcing technologies on them so they

00:18:58,800 --> 00:19:02,820
will probably resist you and now your

00:19:00,450 --> 00:19:04,860
job is that much harder the better

00:19:02,820 --> 00:19:07,350
pattern and this is something I learned

00:19:04,860 --> 00:19:10,860
from my customers is that there are some

00:19:07,350 --> 00:19:12,810
cultures in some companies where all the

00:19:10,860 --> 00:19:15,450
engineers continuously experiment with

00:19:12,810 --> 00:19:17,220
new technologies and oddly this job is

00:19:15,450 --> 00:19:19,290
kind of direct some of that give people

00:19:17,220 --> 00:19:22,200
ideas tell them oh you looked into that

00:19:19,290 --> 00:19:24,090
but did you also check ABC can you run

00:19:22,200 --> 00:19:26,100
this load test can you run this scale

00:19:24,090 --> 00:19:28,110
test and once something has been

00:19:26,100 --> 00:19:30,900
implemented successfully in one part of

00:19:28,110 --> 00:19:32,970
the organization helped it kind of seep

00:19:30,900 --> 00:19:35,850
into the rest of the organization help

00:19:32,970 --> 00:19:38,310
help the engineers evangelize it put up

00:19:35,850 --> 00:19:40,230
the world help other teams adopt it and

00:19:38,310 --> 00:19:41,970
that's how you create sustainable

00:19:40,230 --> 00:19:44,220
service you don't force engineers to

00:19:41,970 --> 00:19:45,510
adopt what you came up with you found

00:19:44,220 --> 00:19:47,880
something that the team was already

00:19:45,510 --> 00:19:49,920
successful in which means that you have

00:19:47,880 --> 00:19:51,600
your proof much easier to convince and

00:19:49,920 --> 00:19:55,050
you help them convince other team that

00:19:51,600 --> 00:19:55,380
hey this is really good and 18 months

00:19:55,050 --> 00:19:57,090
like

00:19:55,380 --> 00:19:58,770
the entire organization uses this

00:19:57,090 --> 00:20:01,500
something because it worked really well

00:19:58,770 --> 00:20:04,050
this is really fantastic and because

00:20:01,500 --> 00:20:05,520
you're not the only one doing new

00:20:04,050 --> 00:20:07,770
technologies you have this force

00:20:05,520 --> 00:20:09,360
multiplier so you can actually use the

00:20:07,770 --> 00:20:11,640
teams that adopted it and wants to

00:20:09,360 --> 00:20:13,560
evangelize it to build tools to build

00:20:11,640 --> 00:20:15,620
technologies to help us write the

00:20:13,560 --> 00:20:18,300
commentation help everyone else a

00:20:15,620 --> 00:20:21,180
companies are did it incredibly well is

00:20:18,300 --> 00:20:23,610
lift I was at their talked about how

00:20:21,180 --> 00:20:26,850
they migrated from rest api's to gr PC

00:20:23,610 --> 00:20:29,070
and the talk was not about the benefits

00:20:26,850 --> 00:20:31,500
of gr PC over rest api that was like the

00:20:29,070 --> 00:20:34,350
first five minutes the rest of the

00:20:31,500 --> 00:20:36,540
40-minute talk was around how they did

00:20:34,350 --> 00:20:39,900
immigration which involved a lot of

00:20:36,540 --> 00:20:42,630
tooling it involved writing a Cu or l4g

00:20:39,900 --> 00:20:44,700
RPC writing a proxy so everyone could

00:20:42,630 --> 00:20:46,860
make write in their own time they had

00:20:44,700 --> 00:20:48,990
all those really amazing things so this

00:20:46,860 --> 00:20:50,880
is a great pattern and don't tell me

00:20:48,990 --> 00:20:53,610
that it's good for lyft but it would

00:20:50,880 --> 00:20:56,600
never work at my organization because

00:20:53,610 --> 00:21:01,560
the last line is that this is absolutely

00:20:56,600 --> 00:21:03,810
BS I've heard that so often we cannot do

00:21:01,560 --> 00:21:06,180
event-driven microservices we're an

00:21:03,810 --> 00:21:09,750
insurance company we can also do cloud

00:21:06,180 --> 00:21:13,710
we're a bank like haha very funny the

00:21:09,750 --> 00:21:16,800
truth is that I know and I know 20 banks

00:21:13,710 --> 00:21:18,150
that do cloud so just because your bank

00:21:16,800 --> 00:21:20,370
does not mean you cannot do cloud

00:21:18,150 --> 00:21:22,830
I know 100 insurance companies that did

00:21:20,370 --> 00:21:25,110
the micro services there is absolutely

00:21:22,830 --> 00:21:27,480
no reason why you couldn't and I was

00:21:25,110 --> 00:21:29,010
actually in a hilarious conversation I

00:21:27,480 --> 00:21:31,220
think it was at Keuka New York where a

00:21:29,010 --> 00:21:33,390
lot of banks kind of hang out and

00:21:31,220 --> 00:21:35,070
someone actually said well we're Bank of

00:21:33,390 --> 00:21:36,780
America of course we could never do

00:21:35,070 --> 00:21:38,670
cloud doesn't have all those things we

00:21:36,780 --> 00:21:41,070
need to run a bank in the other guy is

00:21:38,670 --> 00:21:43,440
like well I'm Capital One I'm also back

00:21:41,070 --> 00:21:44,790
and guess what we're totally in the

00:21:43,440 --> 00:21:47,610
cloud and we're saying all those amazing

00:21:44,790 --> 00:21:49,860
benefits another hey I'm JP Morgan Chase

00:21:47,610 --> 00:21:53,520
we're actually two banks and guess what

00:21:49,860 --> 00:21:56,450
we are doing so it's really like your

00:21:53,520 --> 00:21:59,310
industry is usually not an excuse and

00:21:56,450 --> 00:22:01,080
sometimes I worry that the real truth if

00:21:59,310 --> 00:22:03,480
you say things like that is that you

00:22:01,080 --> 00:22:06,900
don't want anything to change and this

00:22:03,480 --> 00:22:08,760
is incredibly worrying because being an

00:22:06,900 --> 00:22:10,920
architect is all about enabling

00:22:08,760 --> 00:22:12,420
change enabling the development team is

00:22:10,920 --> 00:22:14,790
enabling the entire organization to

00:22:12,420 --> 00:22:16,740
adopt new technologies if you want

00:22:14,790 --> 00:22:19,980
nothing to change you should probably be

00:22:16,740 --> 00:22:23,160
like a sysadmin or something so I think

00:22:19,980 --> 00:22:25,530
there is really something that the world

00:22:23,160 --> 00:22:27,660
keeps changing we have no choice we have

00:22:25,530 --> 00:22:29,730
to change with it and I think that

00:22:27,660 --> 00:22:32,910
taking on the role of how to enable

00:22:29,730 --> 00:22:34,830
companies to change safely and in a way

00:22:32,910 --> 00:22:37,200
that the entire organization can absorb

00:22:34,830 --> 00:22:39,540
is actually the big role of an architect

00:22:37,200 --> 00:22:41,430
like this is saying how many new

00:22:39,540 --> 00:22:43,680
technologies can we absorb in a quarter

00:22:41,430 --> 00:22:45,540
how do we adopt them safely how do we

00:22:43,680 --> 00:22:48,000
get there how much proof do we need and

00:22:45,540 --> 00:22:49,590
what are the best practices how do we

00:22:48,000 --> 00:22:52,560
enable everyone to learn those best

00:22:49,590 --> 00:22:54,390
practices and the key is that you have

00:22:52,560 --> 00:22:56,070
to know your org that's why you have to

00:22:54,390 --> 00:22:58,740
be kind of experienced in order to be

00:22:56,070 --> 00:23:00,990
there and you have to know that every

00:22:58,740 --> 00:23:02,940
organization can take some risk and the

00:23:00,990 --> 00:23:05,370
level of risk it can take actually kind

00:23:02,940 --> 00:23:06,870
of comes and goes maybe multiple times a

00:23:05,370 --> 00:23:08,700
years there's point sometimes where

00:23:06,870 --> 00:23:10,050
everyone wants stability and then point

00:23:08,700 --> 00:23:12,600
in time where everyone wants to move

00:23:10,050 --> 00:23:14,640
faster and do cool things and you have

00:23:12,600 --> 00:23:16,140
to have your handle on the like you have

00:23:14,640 --> 00:23:18,210
to feel the pulse of the organization

00:23:16,140 --> 00:23:20,220
you have to talk to product and

00:23:18,210 --> 00:23:22,920
executives and you have to really know

00:23:20,220 --> 00:23:25,020
when is the right time to do bold moves

00:23:22,920 --> 00:23:27,270
and when is the point with the most

00:23:25,020 --> 00:23:30,210
impact where you can do ball moves don't

00:23:27,270 --> 00:23:31,950
waste those pressures risk points and

00:23:30,210 --> 00:23:35,010
credibility points to do something that

00:23:31,950 --> 00:23:37,500
doesn't matter and has no influence so

00:23:35,010 --> 00:23:39,660
for example we use kubernetes when it

00:23:37,500 --> 00:23:41,880
was very early I feel like it was a

00:23:39,660 --> 00:23:44,190
mistake because we use so much of our

00:23:41,880 --> 00:23:46,080
availability and pager points on

00:23:44,190 --> 00:23:48,600
something that will never be our core

00:23:46,080 --> 00:23:51,750
strengths where we should have not used

00:23:48,600 --> 00:23:54,090
it to do cool things with Kafka which is

00:23:51,750 --> 00:23:56,430
our core strengths so you really want to

00:23:54,090 --> 00:24:00,000
assess what is where is the great place

00:23:56,430 --> 00:24:02,280
to place your risk ships and then enable

00:24:00,000 --> 00:24:04,770
the entire organization to kind of in a

00:24:02,280 --> 00:24:07,380
as a way of kind of go after that kind

00:24:04,770 --> 00:24:10,230
of steering your ship kind of thing to

00:24:07,380 --> 00:24:13,500
many communities metaphors so just to

00:24:10,230 --> 00:24:15,390
sum things up all of these kind of ties

00:24:13,500 --> 00:24:17,880
together if you want to be an awesome

00:24:15,390 --> 00:24:20,670
architect you want to not lie you want

00:24:17,880 --> 00:24:22,029
to collect requirements you do tests and

00:24:20,670 --> 00:24:24,700
of course it's a lot of work too

00:24:22,029 --> 00:24:27,009
Dule your own so you want to work with

00:24:24,700 --> 00:24:28,929
engineering teams to really enable those

00:24:27,009 --> 00:24:31,629
experiments make sure they're successful

00:24:28,929 --> 00:24:34,509
and be a change agent for your entire

00:24:31,629 --> 00:24:37,210
organization and since it's the end of

00:24:34,509 --> 00:24:41,909
the year it's time for resolutions maybe

00:24:37,210 --> 00:24:44,109
you are currently an SRE or in a

00:24:41,909 --> 00:24:45,909
engineer and you're thinking whom this

00:24:44,109 --> 00:24:48,369
sounds really good I want to do that and

00:24:45,909 --> 00:24:50,349
in 2020 you'll become a Software

00:24:48,369 --> 00:24:52,359
Architect or maybe you're currently an

00:24:50,349 --> 00:24:55,479
architect and I just inspired you to be

00:24:52,359 --> 00:24:58,470
a better one in 2020 so I hope we will

00:24:55,479 --> 00:25:04,620
all go out and have an amazing here

00:24:58,470 --> 00:25:09,760
[Applause]

00:25:04,620 --> 00:25:09,760

YouTube URL: https://www.youtube.com/watch?v=jSqgGdSvQ4E


