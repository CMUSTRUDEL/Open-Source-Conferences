Title: Why Does (My) Monitoring Suck? - Todd Palino
Publication date: 2020-01-13
Playlist: DevOpsDays Tel Aviv 2019
Description: 
	Monitoring services is easy, right? Set up a notification that goes out when a certain number increases past a certain threshold to let you know that there’s a problem. But if that’s the case, why are so many teams drowning in alerts and dreading their time on call? The reason is that we tend to monitor the wrong things: reactive alerts, metrics that we don’t completely understand how they impact our service, and capacity alerts. We look at our own view of the service and fail to consider that our customers have a different view.

Come learn to let go of what does not help, and explore how to monitor for what truly matters: what the customer sees. This starts with defining our agreements with our customers, continues through building applications intelligently and instrumenting all the things, and finishes with picking the right signals out of that instrumentation to generate alerts that are actionable, not ones that introduce confusion and noise. We will also touch on capacity planning, and how it should never wake you up. You’ll find it’s possible to assure that you meet your service level objectives while still maximizing your sleep level objectives.
Captions: 
	00:00:00,440 --> 00:00:03,580
[Music]

00:00:04,730 --> 00:00:11,880
so hi I'm Todd I'm from LinkedIn I'm in

00:00:08,760 --> 00:00:14,309
the on the SRE team there and I'm going

00:00:11,880 --> 00:00:16,800
to leave this slide up for just a minute

00:00:14,309 --> 00:00:19,410
while I talk about why that's sitting

00:00:16,800 --> 00:00:22,710
there this links directly to the slide

00:00:19,410 --> 00:00:24,119
deck on LinkedIn so that you can follow

00:00:22,710 --> 00:00:25,439
along and you don't have to take a

00:00:24,119 --> 00:00:28,109
picture of every single slide because

00:00:25,439 --> 00:00:30,330
they're all there so the dog is there

00:00:28,109 --> 00:00:32,340
because my youngest daughter has a

00:00:30,330 --> 00:00:34,350
collection of stuffed dogs that she

00:00:32,340 --> 00:00:36,960
carries around and she left one in my

00:00:34,350 --> 00:00:38,640
office before I left and it was sitting

00:00:36,960 --> 00:00:41,570
there on my desk so I figured I was

00:00:38,640 --> 00:00:44,640
supposed to take it with me I was wrong

00:00:41,570 --> 00:00:46,350
the dog is a stowaway but I've been

00:00:44,640 --> 00:00:48,420
sending her pictures so if you do take

00:00:46,350 --> 00:00:51,239
some pictures and tag me on Twitter on

00:00:48,420 --> 00:00:52,649
the app Bonnefoy if there I will send

00:00:51,239 --> 00:00:53,340
them to her later and show her how much

00:00:52,649 --> 00:00:56,570
fun

00:00:53,340 --> 00:01:00,000
her dog Jana Rita is having on this trip

00:00:56,570 --> 00:01:01,859
anyways so what am I going to talk about

00:01:00,000 --> 00:01:04,559
today I'm going to talk about why

00:01:01,859 --> 00:01:07,650
everyone's monitoring is horrible mine

00:01:04,559 --> 00:01:10,260
included and I guarantee most of yours

00:01:07,650 --> 00:01:11,640
as well there's probably a few pockets

00:01:10,260 --> 00:01:13,939
of people who feel like they're doing it

00:01:11,640 --> 00:01:16,500
right you're probably wrong that's okay

00:01:13,939 --> 00:01:18,180
I'm gonna go over some anti-patterns

00:01:16,500 --> 00:01:21,150
in monitoring that we see all the time

00:01:18,180 --> 00:01:24,840
these are actually three examples that I

00:01:21,150 --> 00:01:26,729
have personally lived or created talk

00:01:24,840 --> 00:01:28,920
about setting goals for monitoring what

00:01:26,729 --> 00:01:31,049
exactly is monitoring how you design

00:01:28,920 --> 00:01:33,210
your systems for success and then I'll

00:01:31,049 --> 00:01:36,600
wrap up with a little summary before

00:01:33,210 --> 00:01:37,950
that who am I am why am I here so as I

00:01:36,600 --> 00:01:40,140
said I'm with LinkedIn site reliability

00:01:37,950 --> 00:01:42,540
engineering and I'll talk just a little

00:01:40,140 --> 00:01:44,640
bit about what sre is for us in a moment

00:01:42,540 --> 00:01:46,649
I've been with the company for slightly

00:01:44,640 --> 00:01:49,290
over six years now actually six years

00:01:46,649 --> 00:01:51,630
last week and for most of that time the

00:01:49,290 --> 00:01:54,299
first four and a half years I was with

00:01:51,630 --> 00:01:55,560
the Apache kafka team but right now I'm

00:01:54,299 --> 00:01:57,899
with the team called capacity

00:01:55,560 --> 00:02:00,479
engineering this is a central team that

00:01:57,899 --> 00:02:03,329
does capacity measurement and management

00:02:00,479 --> 00:02:04,890
for the entire company or at least we're

00:02:03,329 --> 00:02:07,860
going to in the next couple quarters as

00:02:04,890 --> 00:02:09,660
we get everyone on aborted before that I

00:02:07,860 --> 00:02:12,120
was doing Kafka four and a half years

00:02:09,660 --> 00:02:12,900
actually co-authored with my dear friend

00:02:12,120 --> 00:02:15,510
Gwen Schiff

00:02:12,900 --> 00:02:17,610
the definitive guide for Costco for

00:02:15,510 --> 00:02:19,709
O'Reilly and for anyone who's wondering

00:02:17,610 --> 00:02:22,260
yes we are going to start on a second

00:02:19,709 --> 00:02:25,799
edition shortly that hopefully will be

00:02:22,260 --> 00:02:27,689
not too long out and I'm also a

00:02:25,799 --> 00:02:29,220
registered locksmith and you can find me

00:02:27,689 --> 00:02:30,739
later if you want to hear that story and

00:02:29,220 --> 00:02:33,810
how bad happens

00:02:30,739 --> 00:02:35,970
so sre has a lot of different

00:02:33,810 --> 00:02:38,010
definitions if you ask six different

00:02:35,970 --> 00:02:39,750
sres what it means you'll get at least

00:02:38,010 --> 00:02:43,290
seven different answers because we all

00:02:39,750 --> 00:02:44,819
need to be redundant but for we all kind

00:02:43,290 --> 00:02:48,269
of speak the same language we talk about

00:02:44,819 --> 00:02:50,099
reliability we talk about devlop so we

00:02:48,269 --> 00:02:52,049
talk about availability being on call

00:02:50,099 --> 00:02:54,690
thankfully I don't talk about being on

00:02:52,049 --> 00:02:56,159
call anymore at the end of the day it's

00:02:54,690 --> 00:02:58,290
all about site up it's about keeping

00:02:56,159 --> 00:02:59,939
whatever you are doing up and running

00:02:58,290 --> 00:03:02,250
all the time and serving your customers

00:02:59,939 --> 00:03:04,409
properly and that's generally what we're

00:03:02,250 --> 00:03:06,359
doing it linked in our sre teams the

00:03:04,409 --> 00:03:08,609
central ones are responsible for

00:03:06,359 --> 00:03:12,840
developing and maintaining the tool sets

00:03:08,609 --> 00:03:14,879
around monitoring deployment just about

00:03:12,840 --> 00:03:16,829
everything else that runs the internals

00:03:14,879 --> 00:03:19,049
of the system and then our embedded

00:03:16,829 --> 00:03:20,760
teams which the kafka SRE team was an

00:03:19,049 --> 00:03:23,459
embedded team they're responsible for

00:03:20,760 --> 00:03:25,650
specific applications so we worked on

00:03:23,459 --> 00:03:27,269
apache kafka only and made sure that

00:03:25,650 --> 00:03:29,639
stayed up and running all the time

00:03:27,269 --> 00:03:32,400
defining the bounds around how it's

00:03:29,639 --> 00:03:34,349
supposed to run so since I'm gonna talk

00:03:32,400 --> 00:03:36,329
about reliability I'll probably use the

00:03:34,349 --> 00:03:38,310
term sre in a couple places if you want

00:03:36,329 --> 00:03:40,349
to talk in more detail about what sre at

00:03:38,310 --> 00:03:42,389
LinkedIn is you can find me afterwards

00:03:40,349 --> 00:03:45,180
I'll be around office hours or wherever

00:03:42,389 --> 00:03:47,729
else so let's talk about those

00:03:45,180 --> 00:03:49,049
anti-patterns first we've all seen a lot

00:03:47,729 --> 00:03:51,510
of them the first one I'm gonna start

00:03:49,049 --> 00:03:54,060
with is our network operations center we

00:03:51,510 --> 00:03:56,459
no longer have a NOC we now have a sock

00:03:54,060 --> 00:03:58,049
site Operations Center we changed the

00:03:56,459 --> 00:04:00,810
name to get away from all the pain of

00:03:58,049 --> 00:04:03,690
the past because even when I had started

00:04:00,810 --> 00:04:05,400
the NOC was doing central monitoring and

00:04:03,690 --> 00:04:07,169
alerting for the site they would get all

00:04:05,400 --> 00:04:10,159
the high level alerts for the site and

00:04:07,169 --> 00:04:12,690
then they would do something about them

00:04:10,159 --> 00:04:14,879
so first off their gate keeping all the

00:04:12,690 --> 00:04:16,470
alerts so they're saying which ones are

00:04:14,879 --> 00:04:18,720
important and which ones aren't and you

00:04:16,470 --> 00:04:20,430
have to prove it to them and they have

00:04:18,720 --> 00:04:22,030
no deep knowledge of any of these

00:04:20,430 --> 00:04:24,820
systems

00:04:22,030 --> 00:04:27,640
in addition they were essentially

00:04:24,820 --> 00:04:30,250
telephone operators what their job was

00:04:27,640 --> 00:04:32,500
was to get the alert and then go through

00:04:30,250 --> 00:04:33,040
the runn book for the alert to try and

00:04:32,500 --> 00:04:36,130
fix it

00:04:33,040 --> 00:04:38,950
I guarantee 90% of the run books they

00:04:36,130 --> 00:04:40,590
had all said the exact same thing which

00:04:38,950 --> 00:04:43,270
was called esre

00:04:40,590 --> 00:04:46,210
that doesn't really give them any power

00:04:43,270 --> 00:04:47,800
whatsoever to do anything so this is not

00:04:46,210 --> 00:04:49,630
good we don't want centralized

00:04:47,800 --> 00:04:51,310
monitoring alerting we want to have

00:04:49,630 --> 00:04:54,490
everyone get their own alerts have

00:04:51,310 --> 00:04:56,290
everyone own their own monitoring so the

00:04:54,490 --> 00:04:57,940
next one is Kafka under replicated

00:04:56,290 --> 00:05:00,210
partitions so this is a metric from

00:04:57,940 --> 00:05:02,740
Apache Kafka and I am unfortunately

00:05:00,210 --> 00:05:05,290
responsible for creating this particular

00:05:02,740 --> 00:05:08,380
anti pattern and telling everyone else

00:05:05,290 --> 00:05:10,570
in the industry it was a good idea so

00:05:08,380 --> 00:05:12,970
I'm spending a lot of time backpedaling

00:05:10,570 --> 00:05:15,820
that right now this metric has no real

00:05:12,970 --> 00:05:18,070
clear meaning so this this graph that's

00:05:15,820 --> 00:05:20,830
up right now is actually one of the

00:05:18,070 --> 00:05:24,880
brokers and the cluster is down this

00:05:20,830 --> 00:05:27,160
graph is one of the brokers is having a

00:05:24,880 --> 00:05:30,330
problem with data being produced to it

00:05:27,160 --> 00:05:32,830
and I have no idea what this graph means

00:05:30,330 --> 00:05:35,110
but these are all three graphs from our

00:05:32,830 --> 00:05:37,510
live monitoring system at various points

00:05:35,110 --> 00:05:39,880
so sometimes it's a problem sometimes

00:05:37,510 --> 00:05:41,229
not it's not a problem all it says is

00:05:39,880 --> 00:05:44,200
that all of the partitions in the

00:05:41,229 --> 00:05:45,880
cluster are not fully replicated does

00:05:44,200 --> 00:05:47,830
your customer actually care if they're

00:05:45,880 --> 00:05:49,540
not replicated you might care in the

00:05:47,830 --> 00:05:51,460
long term that they're not durable but

00:05:49,540 --> 00:05:52,750
that's probably an internal concern the

00:05:51,460 --> 00:05:54,610
customers can still do everything

00:05:52,750 --> 00:05:56,380
they're doing and the great thing is is

00:05:54,610 --> 00:05:58,510
because this isn't always a problem half

00:05:56,380 --> 00:05:59,800
the time it just gets ignored especially

00:05:58,510 --> 00:06:02,260
when you're starting to get overloaded

00:05:59,800 --> 00:06:04,390
with alerts now there's a great story

00:06:02,260 --> 00:06:06,190
behind these particular slides which

00:06:04,390 --> 00:06:09,250
I've used in another deck because I've

00:06:06,190 --> 00:06:11,560
always in the past thrown Gwen under the

00:06:09,250 --> 00:06:12,880
bus when I talk about this and for

00:06:11,560 --> 00:06:14,470
anyone who's not familiar with that

00:06:12,880 --> 00:06:17,370
idiom thrown under the bus

00:06:14,470 --> 00:06:20,530
it means I'm basically taking her and

00:06:17,370 --> 00:06:22,330
making fun of her and putting her under

00:06:20,530 --> 00:06:25,210
the bus for the bus to drive over her

00:06:22,330 --> 00:06:27,190
and make a mess she disagreed with me

00:06:25,210 --> 00:06:28,930
for a long time about the usefulness of

00:06:27,190 --> 00:06:31,599
under replicated partitions after I

00:06:28,930 --> 00:06:33,580
changed my party my position and I found

00:06:31,599 --> 00:06:35,280
out last year when I was giving a talk

00:06:33,580 --> 00:06:37,590
about Kafka monitoring that she

00:06:35,280 --> 00:06:39,930
agrees with me now that she's running

00:06:37,590 --> 00:06:42,570
Kafka at a large scale for lots of

00:06:39,930 --> 00:06:44,760
customers she realizes how bad it is so

00:06:42,570 --> 00:06:46,200
I can't make fun of her anymore she's

00:06:44,760 --> 00:06:46,700
come around to my way of thinking on

00:06:46,200 --> 00:06:49,800
this

00:06:46,700 --> 00:06:51,990
the last anti-pattern i'm gonna talk

00:06:49,800 --> 00:06:55,500
about is cpu load everyone loves to

00:06:51,990 --> 00:06:56,960
alert on cpu load or CPU utilization or

00:06:55,500 --> 00:07:01,290
anything like that

00:06:56,960 --> 00:07:03,540
first off probably half the people in

00:07:01,290 --> 00:07:06,720
the industry have no idea what cpu load

00:07:03,540 --> 00:07:08,370
actually is or how it's calculated it's

00:07:06,720 --> 00:07:11,010
a relative measure of how busy your

00:07:08,370 --> 00:07:13,410
processors are in the system and the

00:07:11,010 --> 00:07:18,240
great thing is is that there's no good

00:07:13,410 --> 00:07:20,460
or bad is 24 bad can't really say if you

00:07:18,240 --> 00:07:23,280
have 32 processors so then 24 is not

00:07:20,460 --> 00:07:26,160
that bad if you have 16 processors and

00:07:23,280 --> 00:07:29,130
yeah 24 kind of bad but nobody actually

00:07:26,160 --> 00:07:31,650
cares if you have an email server that's

00:07:29,130 --> 00:07:35,940
delivering email and the CPU utilization

00:07:31,650 --> 00:07:37,680
is at 99% what do you do go get a cup of

00:07:35,940 --> 00:07:38,940
coffee because it's delivering email and

00:07:37,680 --> 00:07:41,310
that's what it's supposed to be doing

00:07:38,940 --> 00:07:43,200
CPUs are actually supposed to be busy

00:07:41,310 --> 00:07:46,020
all the time if they're not busy you're

00:07:43,200 --> 00:07:49,380
wasting resources so 100% CPU is not

00:07:46,020 --> 00:07:51,570
inherently a bad thing we also have no

00:07:49,380 --> 00:07:54,090
idea what's causing high CPU utilization

00:07:51,570 --> 00:07:56,070
it could be your application it could be

00:07:54,090 --> 00:07:58,289
a monitoring application it could be the

00:07:56,070 --> 00:07:59,850
kernel itself causing a problem there's

00:07:58,289 --> 00:08:02,010
any number of things it doesn't actually

00:07:59,850 --> 00:08:05,550
give us a clear signal for what's wrong

00:08:02,010 --> 00:08:07,380
could be capacity maybe maybe not

00:08:05,550 --> 00:08:09,660
everyone likes to think that CPU

00:08:07,380 --> 00:08:11,490
utilization is this golden signal for

00:08:09,660 --> 00:08:13,500
when you need to increase capacity of a

00:08:11,490 --> 00:08:15,240
service and I can tell you having worked

00:08:13,500 --> 00:08:17,430
in capacity engineering for a year and a

00:08:15,240 --> 00:08:19,620
half now that could not be more wrong

00:08:17,430 --> 00:08:21,930
and I am constantly fighting right now

00:08:19,620 --> 00:08:25,050
on a daily basis people who have that

00:08:21,930 --> 00:08:27,390
simplistic view of what capacity is and

00:08:25,050 --> 00:08:28,890
trying to educate them as to why that

00:08:27,390 --> 00:08:31,500
doesn't really work and you need to

00:08:28,890 --> 00:08:34,080
measure other things so if all these

00:08:31,500 --> 00:08:36,390
things are bad then what's actually good

00:08:34,080 --> 00:08:38,400
what do we need to do and the answer to

00:08:36,390 --> 00:08:40,349
this is that we need to set goals about

00:08:38,400 --> 00:08:42,240
what we want our system to be doing we

00:08:40,349 --> 00:08:44,640
need to define what is good and what is

00:08:42,240 --> 00:08:45,810
bad and the way we define what's good

00:08:44,640 --> 00:08:48,570
and what's bad for most of our

00:08:45,810 --> 00:08:50,880
applications is with service levels

00:08:48,570 --> 00:08:54,180
something so I've got four terms here

00:08:50,880 --> 00:08:57,300
I'm gonna define three of them and one

00:08:54,180 --> 00:08:59,640
of them is a copy so SLI is service

00:08:57,300 --> 00:09:01,410
level indicator this is typically a

00:08:59,640 --> 00:09:03,390
metric it's something that you measure

00:09:01,410 --> 00:09:05,910
that will indicate whether your service

00:09:03,390 --> 00:09:07,920
is in a good or a bad state a service

00:09:05,910 --> 00:09:10,500
level objective is a combination of a

00:09:07,920 --> 00:09:12,600
service level indicator and some sort of

00:09:10,500 --> 00:09:14,490
threshold that says when it is good and

00:09:12,600 --> 00:09:16,380
when it is bad it also usually includes

00:09:14,490 --> 00:09:18,600
a time period for measuring it over

00:09:16,380 --> 00:09:20,520
possibly how it's being measured as well

00:09:18,600 --> 00:09:21,900
so it will define how do you determine

00:09:20,520 --> 00:09:24,930
when something is good and when

00:09:21,900 --> 00:09:27,330
something is bad SLT is a service level

00:09:24,930 --> 00:09:29,250
target and it's basically exactly the

00:09:27,330 --> 00:09:31,350
same as service level objective except

00:09:29,250 --> 00:09:33,960
ITIL decided to change the name some

00:09:31,350 --> 00:09:34,920
years back for reasons that nobody can

00:09:33,960 --> 00:09:36,540
fathom

00:09:34,920 --> 00:09:38,880
you'll hear it every once in a while but

00:09:36,540 --> 00:09:42,620
most people still use SLO because nobody

00:09:38,880 --> 00:09:46,620
likes ITIL anyways ITIL is I see

00:09:42,620 --> 00:09:48,150
something yeah Thank You infrastructure

00:09:46,620 --> 00:09:51,510
library as I said I don't like it I

00:09:48,150 --> 00:09:54,090
don't use it and SLA is a term you will

00:09:51,510 --> 00:09:57,300
often hear people use when they mean SLO

00:09:54,090 --> 00:10:00,540
and SLA is a combination of a bunch of

00:09:57,300 --> 00:10:02,370
SLO s and a penalty for when you what

00:10:00,540 --> 00:10:04,590
happens when you don't hit those SLO s

00:10:02,370 --> 00:10:06,840
and often definitions about how you

00:10:04,590 --> 00:10:08,520
provide service to your customers who

00:10:06,840 --> 00:10:10,830
they call when they can call what the

00:10:08,520 --> 00:10:12,810
response times are most of us when we're

00:10:10,830 --> 00:10:15,330
talking about internal applications do

00:10:12,810 --> 00:10:16,980
not have SLA s you are not going to walk

00:10:15,330 --> 00:10:18,630
over to the database team and say hey

00:10:16,980 --> 00:10:21,060
you didn't hit your latency targets you

00:10:18,630 --> 00:10:22,860
want me a case of beer you might do that

00:10:21,060 --> 00:10:24,750
but most of the beer for it flows freely

00:10:22,860 --> 00:10:26,730
and my company so it's not really

00:10:24,750 --> 00:10:29,400
something we can use to barter with so

00:10:26,730 --> 00:10:31,170
we probably don't want the term SLA I

00:10:29,400 --> 00:10:35,130
correct people a lot on this we're gonna

00:10:31,170 --> 00:10:38,430
talk about SLO s today so how do we set

00:10:35,130 --> 00:10:41,430
our SLO s there's two ways that we often

00:10:38,430 --> 00:10:45,030
talk about this we talk about achievable

00:10:41,430 --> 00:10:47,130
SLO s and aspirational SLO s achievable

00:10:45,030 --> 00:10:49,560
SLO s our targets you're already hitting

00:10:47,130 --> 00:10:51,990
they're looking at how your applications

00:10:49,560 --> 00:10:54,180
been performing and saying hey I can do

00:10:51,990 --> 00:10:56,760
a hundred milliseconds all the time 100

00:10:54,180 --> 00:10:58,740
milliseconds is my SLO that's not a bad

00:10:56,760 --> 00:11:00,720
thing sometimes all you need is that

00:10:58,740 --> 00:11:01,769
achievable SLO you want to define

00:11:00,720 --> 00:11:04,589
something that you can

00:11:01,769 --> 00:11:06,089
do and continue doing that sometimes if

00:11:04,589 --> 00:11:08,670
you have a business need you need to

00:11:06,089 --> 00:11:10,470
define an aspirational SLO so this is

00:11:08,670 --> 00:11:12,660
this is what I have to be doing because

00:11:10,470 --> 00:11:14,699
there's a reason for it it's something

00:11:12,660 --> 00:11:16,529
that the business needs so you may say

00:11:14,699 --> 00:11:18,449
well I'm doing a hundred milliseconds of

00:11:16,529 --> 00:11:20,939
latency but I actually need to be doing

00:11:18,449 --> 00:11:23,220
50 milliseconds of latency 50

00:11:20,939 --> 00:11:25,350
milliseconds is my SLO and I need to

00:11:23,220 --> 00:11:27,899
work to get there it's okay to be

00:11:25,350 --> 00:11:29,279
failing failing is fine as long as you

00:11:27,899 --> 00:11:30,600
know why you're failing and you're

00:11:29,279 --> 00:11:33,629
working to get better at it and

00:11:30,600 --> 00:11:36,629
eventually you won't be failing so we

00:11:33,629 --> 00:11:38,279
need to set our SLO s in an intelligent

00:11:36,629 --> 00:11:40,350
manner and I like using the smart

00:11:38,279 --> 00:11:43,769
framework for this so smart is often

00:11:40,350 --> 00:11:45,179
used for personal goals objective or

00:11:43,769 --> 00:11:48,119
turley objectives and things like this

00:11:45,179 --> 00:11:50,069
you want to be specific so you want to

00:11:48,119 --> 00:11:51,749
have your SLI your time period your

00:11:50,069 --> 00:11:55,009
threshold all of these things well

00:11:51,749 --> 00:11:58,769
defined it has to be measurable

00:11:55,009 --> 00:12:00,989
developer happiness as an SLO is not a

00:11:58,769 --> 00:12:02,699
great SLO because it's really hard to

00:12:00,989 --> 00:12:05,910
measure whether or not someone has happy

00:12:02,699 --> 00:12:08,309
you want to look for things that kind of

00:12:05,910 --> 00:12:10,619
describe happiness in a data-driven

00:12:08,309 --> 00:12:11,999
manner so things that when you know all

00:12:10,619 --> 00:12:14,459
of these numbers are in the right place

00:12:11,999 --> 00:12:16,049
then your developers are happy developer

00:12:14,459 --> 00:12:17,759
happiness is a term we chart use

00:12:16,049 --> 00:12:20,009
internally to talk about how well our

00:12:17,759 --> 00:12:21,420
tools and our deployment pipeline and

00:12:20,009 --> 00:12:22,889
everything else is working because if

00:12:21,420 --> 00:12:24,899
all of that is working then the

00:12:22,889 --> 00:12:28,769
developers are happy and we can sleep a

00:12:24,899 --> 00:12:31,230
little better at night agreed this is a

00:12:28,769 --> 00:12:34,079
little bit controversial you do actually

00:12:31,230 --> 00:12:34,499
need some agreement on internal sir SLO

00:12:34,079 --> 00:12:36,629
s

00:12:34,499 --> 00:12:38,730
even though they're not SLA s and that's

00:12:36,629 --> 00:12:41,879
because your internal services are

00:12:38,730 --> 00:12:44,189
providing tools and operations for other

00:12:41,879 --> 00:12:45,569
internal services and there are

00:12:44,189 --> 00:12:47,040
requirements there are things that need

00:12:45,569 --> 00:12:49,529
to happen this is where you get your

00:12:47,040 --> 00:12:51,600
aspirational SLO s from what the

00:12:49,529 --> 00:12:55,290
business needs are they need to be

00:12:51,600 --> 00:12:58,379
realistic if you are operating across

00:12:55,290 --> 00:13:01,350
the entire United States and you set a

00:12:58,379 --> 00:13:03,869
latency target of two milliseconds for

00:13:01,350 --> 00:13:05,549
communications time latency that's not

00:13:03,869 --> 00:13:08,220
realistic because the speed of light

00:13:05,549 --> 00:13:10,290
does not go that fast so you need to

00:13:08,220 --> 00:13:12,660
actually set things that you can hit at

00:13:10,290 --> 00:13:15,660
some point in time and keep in mind that

00:13:12,660 --> 00:13:17,490
the tighter your targets are the more

00:13:15,660 --> 00:13:19,140
work you have to do to hit them the more

00:13:17,490 --> 00:13:21,330
expensive they are going to be for your

00:13:19,140 --> 00:13:23,490
company so make sure that you actually

00:13:21,330 --> 00:13:25,350
do want to spend that and that money

00:13:23,490 --> 00:13:27,810
you're gonna hear frequently every

00:13:25,350 --> 00:13:30,510
single 9:00 in availability will cost

00:13:27,810 --> 00:13:33,240
you an exponential amount more money to

00:13:30,510 --> 00:13:34,980
get it is very true you need to make the

00:13:33,240 --> 00:13:36,510
decision as to whether or not your cat

00:13:34,980 --> 00:13:38,700
pictures that you're loading for people

00:13:36,510 --> 00:13:41,910
actually need to be five-nines available

00:13:38,700 --> 00:13:43,560
do people care that much and last they

00:13:41,910 --> 00:13:46,920
have to be time limited and they have to

00:13:43,560 --> 00:13:48,720
be testable so you define your SLO over

00:13:46,920 --> 00:13:51,030
a period of time you'll say I'll measure

00:13:48,720 --> 00:13:53,760
this SLO over a week and take the

00:13:51,030 --> 00:13:56,550
average or I'll measure this SLO over a

00:13:53,760 --> 00:13:58,800
week and I can only have five misses

00:13:56,550 --> 00:14:00,900
that are five-minute segments of it

00:13:58,800 --> 00:14:02,670
somewhere along those lines so that you

00:14:00,900 --> 00:14:05,640
have a very clear bound over what you're

00:14:02,670 --> 00:14:07,890
doing some common SLO s that you'll see

00:14:05,640 --> 00:14:09,750
availability is one actually don't like

00:14:07,890 --> 00:14:12,120
the term availability too much because

00:14:09,750 --> 00:14:14,100
we've overloaded it now availability is

00:14:12,120 --> 00:14:16,430
usually used to refer to whether or not

00:14:14,100 --> 00:14:19,590
your service is able to answer requests

00:14:16,430 --> 00:14:21,480
but really in the long run your

00:14:19,590 --> 00:14:24,510
availability should be a measure of how

00:14:21,480 --> 00:14:27,150
well you're hitting your SLO s so you're

00:14:24,510 --> 00:14:29,010
you want to be able to say am i

00:14:27,150 --> 00:14:30,540
answering requests are they correct

00:14:29,010 --> 00:14:33,180
are they being served in the proper

00:14:30,540 --> 00:14:35,940
amount of time so we need a different

00:14:33,180 --> 00:14:37,470
term for availability in these two cases

00:14:35,940 --> 00:14:40,140
I haven't quite settled on one but I

00:14:37,470 --> 00:14:43,220
like the overall SLO measurement as a

00:14:40,140 --> 00:14:45,690
measurement of reliability instead

00:14:43,220 --> 00:14:47,190
latency is a popular one especially for

00:14:45,690 --> 00:14:49,920
online services how quickly are you

00:14:47,190 --> 00:14:51,540
serving requests and correctness is a

00:14:49,920 --> 00:14:53,460
good one as well are there ants are the

00:14:51,540 --> 00:14:55,380
answers you're giving back actually the

00:14:53,460 --> 00:14:57,330
answers they're supposed to be there's

00:14:55,380 --> 00:15:00,420
lots of other things that you can

00:14:57,330 --> 00:15:03,840
measure as SLO s there are definitely

00:15:00,420 --> 00:15:05,070
things around security Etsy I think was

00:15:03,840 --> 00:15:07,560
the one were the ones who did a great

00:15:05,070 --> 00:15:11,340
thing around time to sleep time to sleep

00:15:07,560 --> 00:15:13,530
is a great SLO for developer or operator

00:15:11,340 --> 00:15:17,310
happiness of a system when you start

00:15:13,530 --> 00:15:20,430
measuring those things as well ok so

00:15:17,310 --> 00:15:22,680
we've got our goals how do we how do we

00:15:20,430 --> 00:15:24,960
actually do this thing called monitoring

00:15:22,680 --> 00:15:26,610
and and what is it so this is a

00:15:24,960 --> 00:15:28,750
fundamental stock I'm not going to talk

00:15:26,610 --> 00:15:31,689
about any specific tools in here

00:15:28,750 --> 00:15:34,120
here's a nice textbook definition of

00:15:31,689 --> 00:15:36,310
monitor observe and check the progress

00:15:34,120 --> 00:15:38,560
or quality of something over a period of

00:15:36,310 --> 00:15:40,360
time and keep under systematic review

00:15:38,560 --> 00:15:42,189
this is the essence of monitoring you're

00:15:40,360 --> 00:15:44,920
just watching what you're doing all the

00:15:42,189 --> 00:15:48,220
time and making sure it's correct so

00:15:44,920 --> 00:15:50,050
what the hell is observability now if I

00:15:48,220 --> 00:15:51,759
could assure that everyone in here was

00:15:50,050 --> 00:15:53,470
in Philips talk earlier I could probably

00:15:51,759 --> 00:15:55,120
skip a couple slides but you know what

00:15:53,470 --> 00:15:56,980
happens when we assume things we usually

00:15:55,120 --> 00:16:00,060
break them worse than they already are

00:15:56,980 --> 00:16:01,660
so I will spend one slide on

00:16:00,060 --> 00:16:03,879
observability because this is not

00:16:01,660 --> 00:16:06,639
actually an observability talk and then

00:16:03,879 --> 00:16:08,860
I will move on a lot of people will tell

00:16:06,639 --> 00:16:10,540
you it's magic you bring observability

00:16:08,860 --> 00:16:12,579
and everything's going to be great just

00:16:10,540 --> 00:16:14,920
buy some observability it'll be fine

00:16:12,579 --> 00:16:16,839
pretty much everyone who uses this term

00:16:14,920 --> 00:16:20,379
heavily is trying to sell you something

00:16:16,839 --> 00:16:22,329
that is not a bad thing there are some

00:16:20,379 --> 00:16:26,019
very good tools out there around the

00:16:22,329 --> 00:16:27,730
realm of observability but this is a

00:16:26,019 --> 00:16:30,029
term from control theory which Phillip

00:16:27,730 --> 00:16:32,649
describes very well it basically says

00:16:30,029 --> 00:16:34,720
observability is the quality of being

00:16:32,649 --> 00:16:36,970
able to monitor the internal state of

00:16:34,720 --> 00:16:39,069
your system whatever that system is so

00:16:36,970 --> 00:16:41,350
how well you can monitor the internal

00:16:39,069 --> 00:16:44,579
state of the system and I use that

00:16:41,350 --> 00:16:48,339
phraseology very carefully there monitor

00:16:44,579 --> 00:16:51,220
so it's a measure of your system here's

00:16:48,339 --> 00:16:54,939
the thing it's a noun it's not a verb

00:16:51,220 --> 00:16:57,220
you can't do observability just try it

00:16:54,939 --> 00:16:59,769
out I'm gonna do some observability

00:16:57,220 --> 00:17:02,949
today it does not work what you do is

00:16:59,769 --> 00:17:05,049
you do monitoring so you have monitoring

00:17:02,949 --> 00:17:07,419
and if you do your monitoring well then

00:17:05,049 --> 00:17:08,470
you have good observability here's the

00:17:07,419 --> 00:17:10,870
other thing you don't need perfect

00:17:08,470 --> 00:17:12,760
observability all the time you do not

00:17:10,870 --> 00:17:14,380
need a hundred percent view into

00:17:12,760 --> 00:17:17,620
everything about your system all the

00:17:14,380 --> 00:17:19,600
time do you really care what the size of

00:17:17,620 --> 00:17:20,470
a particular array is in your

00:17:19,600 --> 00:17:23,289
application

00:17:20,470 --> 00:17:25,150
maybe not maybe you do it might be

00:17:23,289 --> 00:17:27,400
important at some point in time just

00:17:25,150 --> 00:17:28,720
like reliability just like availability

00:17:27,400 --> 00:17:32,380
and all these other things you need to

00:17:28,720 --> 00:17:35,200
define how good does it need to be get

00:17:32,380 --> 00:17:37,310
to that point and then stop don't spend

00:17:35,200 --> 00:17:39,980
more time on it

00:17:37,310 --> 00:17:41,210
alright enough with the observability so

00:17:39,980 --> 00:17:45,620
what are we trying to get out of our

00:17:41,210 --> 00:17:48,830
monitoring and let's stole my slide kind

00:17:45,620 --> 00:17:51,230
of and I'm really upset about it so I'm

00:17:48,830 --> 00:17:53,600
gonna call this the Rumsfeld quadrant

00:17:51,230 --> 00:17:55,880
for those who don't know Donald Rumsfeld

00:17:53,600 --> 00:17:57,980
was secretary the Secretary of State in

00:17:55,880 --> 00:18:00,500
the Secretary of Defense I'm sorry in

00:17:57,980 --> 00:18:01,970
the United States a couple times but the

00:18:00,500 --> 00:18:06,080
period I'm interested in is the early

00:18:01,970 --> 00:18:07,790
2000s in 2002 he was doing a press

00:18:06,080 --> 00:18:10,310
conference on weapons of mass

00:18:07,790 --> 00:18:11,690
destruction in Iraq and he got ridiculed

00:18:10,310 --> 00:18:13,400
over this because he talked about how

00:18:11,690 --> 00:18:15,260
there were known knowns and there were

00:18:13,400 --> 00:18:17,930
known unknowns and there were unknown

00:18:15,260 --> 00:18:19,760
unknowns he did get ridiculed a little

00:18:17,930 --> 00:18:21,560
bit because of the language he was using

00:18:19,760 --> 00:18:25,520
but he's very correct about how he was

00:18:21,560 --> 00:18:27,290
describing things so along one side we

00:18:25,520 --> 00:18:29,000
have the detection of a problem known

00:18:27,290 --> 00:18:30,740
and unknown along the top we have the

00:18:29,000 --> 00:18:32,570
response to the problem known and

00:18:30,740 --> 00:18:35,240
unknown so whether or not you can solve

00:18:32,570 --> 00:18:36,770
the problem or can't so this is a little

00:18:35,240 --> 00:18:38,660
bit different than the graph that that

00:18:36,770 --> 00:18:41,210
Filip you so like can be a little less

00:18:38,660 --> 00:18:42,440
upset so if you can detect the problem

00:18:41,210 --> 00:18:44,450
you know how to respond to it

00:18:42,440 --> 00:18:47,360
you have good monitoring in place that's

00:18:44,450 --> 00:18:48,830
great automate that problem because you

00:18:47,360 --> 00:18:50,480
know what the response is right

00:18:48,830 --> 00:18:52,220
automation you don't have to worry about

00:18:50,480 --> 00:18:53,750
it anymore you don't actually need an

00:18:52,220 --> 00:18:55,340
alert on that anymore

00:18:53,750 --> 00:18:56,510
you just need monitoring and you need

00:18:55,340 --> 00:18:59,600
your response but you don't need to be

00:18:56,510 --> 00:19:01,760
alerted about it good if you know how to

00:18:59,600 --> 00:19:03,590
detect the problem and you don't know

00:19:01,760 --> 00:19:05,270
how to fix the problem then you have an

00:19:03,590 --> 00:19:07,220
active incident going on you're working

00:19:05,270 --> 00:19:09,290
on this right now as soon as you figure

00:19:07,220 --> 00:19:11,420
out how to fix the problem then you have

00:19:09,290 --> 00:19:13,460
a known known again automate the

00:19:11,420 --> 00:19:15,800
response to that have your monitoring in

00:19:13,460 --> 00:19:18,860
place no more alerts great we've moved

00:19:15,800 --> 00:19:20,480
it up to no known if you don't know how

00:19:18,860 --> 00:19:22,520
to detect a problem but you know how to

00:19:20,480 --> 00:19:23,660
fix it then you have a monitoring gap so

00:19:22,520 --> 00:19:26,060
you have something missing in your

00:19:23,660 --> 00:19:28,940
monitoring fix your monitoring that

00:19:26,060 --> 00:19:31,880
becomes a known known automate it you're

00:19:28,940 --> 00:19:34,340
done no more alerts so the unknown

00:19:31,880 --> 00:19:36,290
unknowns what are these this is when

00:19:34,340 --> 00:19:39,380
people are on Twitter ridiculing your

00:19:36,290 --> 00:19:41,030
company or on your internal slack really

00:19:39,380 --> 00:19:43,400
ridiculing your team depending on what

00:19:41,030 --> 00:19:44,660
the services these are the ones that we

00:19:43,400 --> 00:19:46,610
need to know about these are the ones

00:19:44,660 --> 00:19:48,950
that we actually need to monitor and

00:19:46,610 --> 00:19:51,380
alert on but if we can't detect

00:19:48,950 --> 00:19:54,500
then how do we know that we have an

00:19:51,380 --> 00:19:57,020
unknown problem the answer is s ellos if

00:19:54,500 --> 00:19:58,820
you monitor your application from the

00:19:57,020 --> 00:20:00,410
point of view of your customers then you

00:19:58,820 --> 00:20:01,460
will know when you have a problem even

00:20:00,410 --> 00:20:04,940
if you don't know what the specific

00:20:01,460 --> 00:20:06,860
problem is how do we get to this point

00:20:04,940 --> 00:20:08,180
how do we build our monitoring stack

00:20:06,860 --> 00:20:09,770
these are all things you're going to be

00:20:08,180 --> 00:20:11,090
familiar with we're all in this space

00:20:09,770 --> 00:20:12,650
already we've heard a lot of these

00:20:11,090 --> 00:20:14,960
things so we have metrics which are

00:20:12,650 --> 00:20:17,210
single numbers and we have events which

00:20:14,960 --> 00:20:19,550
are structured data these are two basic

00:20:17,210 --> 00:20:22,190
types of data that you have to work with

00:20:19,550 --> 00:20:24,890
in the monitoring space so metrics are

00:20:22,190 --> 00:20:28,640
things like counters or gauges rates

00:20:24,890 --> 00:20:30,860
histograms quantiles summaries these

00:20:28,640 --> 00:20:32,600
it's a string of single numbers very

00:20:30,860 --> 00:20:34,430
useful for alerting because you can set

00:20:32,600 --> 00:20:36,050
a nice threshold for them and then move

00:20:34,430 --> 00:20:38,240
on and you either have an alert or you

00:20:36,050 --> 00:20:40,880
don't have an alert structured data are

00:20:38,240 --> 00:20:42,740
things log messages hopefully they are

00:20:40,880 --> 00:20:44,540
structured log messages if they are not

00:20:42,740 --> 00:20:46,070
structured log messages you are a bad

00:20:44,540 --> 00:20:49,040
person and you should feel bad about

00:20:46,070 --> 00:20:51,980
yourself tracing is in this space as

00:20:49,040 --> 00:20:54,410
well distributed or otherwise if you

00:20:51,980 --> 00:20:56,720
think you haven't used tracing before

00:20:54,410 --> 00:20:58,880
you're probably wrong because I think

00:20:56,720 --> 00:21:01,520
most of us have put print statements

00:20:58,880 --> 00:21:04,630
into our code that's say why the hell am

00:21:01,520 --> 00:21:07,570
I here print one print to print three oh

00:21:04,630 --> 00:21:11,360
 this should never happen

00:21:07,570 --> 00:21:12,680
that's rudimentary tracing we ripped

00:21:11,360 --> 00:21:14,150
them all out afterwards

00:21:12,680 --> 00:21:15,560
tracing means you leave them in E and

00:21:14,150 --> 00:21:19,340
prod so that you can get to them later

00:21:15,560 --> 00:21:22,730
so that's a collection of events now you

00:21:19,340 --> 00:21:25,250
can't turn metrics into events you can't

00:21:22,730 --> 00:21:28,040
add more data to the metric to get to an

00:21:25,250 --> 00:21:30,020
event you can turn events into metrics

00:21:28,040 --> 00:21:31,940
however you can count the number of

00:21:30,020 --> 00:21:34,220
events of a specific type and create a

00:21:31,940 --> 00:21:36,140
metric based on that does this mean that

00:21:34,220 --> 00:21:38,450
events are inherently better than

00:21:36,140 --> 00:21:41,360
metrics no they give you different

00:21:38,450 --> 00:21:43,580
things and collecting an event is much

00:21:41,360 --> 00:21:46,370
more expensive than collecting a metric

00:21:43,580 --> 00:21:48,380
is you can put hundreds upon hundreds of

00:21:46,370 --> 00:21:51,020
metrics in your application before you

00:21:48,380 --> 00:21:54,410
even get to the cost of adding one event

00:21:51,020 --> 00:21:56,630
I will caution you however you can tank

00:21:54,410 --> 00:21:58,940
your performance with metrics if you

00:21:56,630 --> 00:22:00,740
have hundreds of thousands of metrics in

00:21:58,940 --> 00:22:03,170
your application you will see a

00:22:00,740 --> 00:22:07,220
performance hit from that I know because

00:22:03,170 --> 00:22:10,010
Kafka does it it's bad so where can you

00:22:07,220 --> 00:22:11,600
get this data from again there's two

00:22:10,010 --> 00:22:13,760
types of places you can get your data

00:22:11,600 --> 00:22:15,980
from subjective and objective subjective

00:22:13,760 --> 00:22:17,870
is an internal view of something

00:22:15,980 --> 00:22:21,560
objective is an outside view of

00:22:17,870 --> 00:22:23,390
something so subjective metrics are

00:22:21,560 --> 00:22:25,520
things where you have your application

00:22:23,390 --> 00:22:27,590
monitoring itself and emitting its own

00:22:25,520 --> 00:22:29,990
metrics about what it's doing most

00:22:27,590 --> 00:22:32,660
service latency metrics fall into this

00:22:29,990 --> 00:22:35,210
bucket the good ones don't but most of

00:22:32,660 --> 00:22:37,340
the ones we have actually do it gives

00:22:35,210 --> 00:22:38,990
you rich data on the internal state of

00:22:37,340 --> 00:22:41,390
your system this is great this gives you

00:22:38,990 --> 00:22:45,590
higher observability as to what your

00:22:41,390 --> 00:22:47,750
system is doing on the inside it gives

00:22:45,590 --> 00:22:49,940
you lots and lots of data but it's often

00:22:47,750 --> 00:22:52,100
questionable data because it doesn't

00:22:49,940 --> 00:22:53,660
tell you what your customers are seeing

00:22:52,100 --> 00:22:56,840
it just tells you what the application

00:22:53,660 --> 00:22:59,000
itself is seeing and you can cause a lot

00:22:56,840 --> 00:23:00,830
of problems here both with performance

00:22:59,000 --> 00:23:02,510
and with tricking yourself about what

00:23:00,830 --> 00:23:04,250
your system is actually doing for

00:23:02,510 --> 00:23:06,590
example that latency metric where your

00:23:04,250 --> 00:23:08,840
application says hey the latency is 5

00:23:06,590 --> 00:23:10,820
milliseconds to process this request but

00:23:08,840 --> 00:23:13,520
there's 50 milliseconds of network time

00:23:10,820 --> 00:23:15,890
getting to you and oh the OS is adding

00:23:13,520 --> 00:23:18,170
another 100 milliseconds of wait time in

00:23:15,890 --> 00:23:19,610
the tcp/ip stack somewhere that you're

00:23:18,170 --> 00:23:22,430
not aware of at all and it's not showing

00:23:19,610 --> 00:23:25,100
up in your application metrics so

00:23:22,430 --> 00:23:27,200
objective metrics are a customer view of

00:23:25,100 --> 00:23:28,700
your system this is looking at your

00:23:27,200 --> 00:23:30,650
service from the outside

00:23:28,700 --> 00:23:31,940
synthetic monitoring falls into this

00:23:30,650 --> 00:23:33,560
space anything where you're sending

00:23:31,940 --> 00:23:36,080
requests into your system and measuring

00:23:33,560 --> 00:23:37,610
it from outside down for everyone or

00:23:36,080 --> 00:23:39,590
just me on the Internet is a great

00:23:37,610 --> 00:23:41,150
example of this you put in a website and

00:23:39,590 --> 00:23:43,310
it tells you whether or not it can get

00:23:41,150 --> 00:23:44,810
to the website so that you know is it a

00:23:43,310 --> 00:23:47,210
problem with the website or is it a

00:23:44,810 --> 00:23:49,070
problem with your path to the website it

00:23:47,210 --> 00:23:51,470
could also be a path with a problem with

00:23:49,070 --> 00:23:54,440
everyone's path to the website but again

00:23:51,470 --> 00:23:56,270
do you really care whether or not it's

00:23:54,440 --> 00:23:58,460
their network provider that's having the

00:23:56,270 --> 00:24:00,620
problem or the site itself all you know

00:23:58,460 --> 00:24:01,760
is that Google's down and you can't find

00:24:00,620 --> 00:24:05,300
out anything you need to know about

00:24:01,760 --> 00:24:06,980
anything you need these four SLO

00:24:05,300 --> 00:24:09,140
monitoring the only way to monitor your

00:24:06,980 --> 00:24:11,750
customer SLO s is to monitor them from

00:24:09,140 --> 00:24:13,880
your customers point of view and these

00:24:11,750 --> 00:24:15,320
are harder to do you have to add extra

00:24:13,880 --> 00:24:16,340
systems to do this but it's usually

00:24:15,320 --> 00:24:17,659
worth it because there

00:24:16,340 --> 00:24:19,580
the authority on whether or not your

00:24:17,659 --> 00:24:21,350
service is actually broken your

00:24:19,580 --> 00:24:23,150
customers don't care if your service is

00:24:21,350 --> 00:24:27,110
up and running if they can't get to it

00:24:23,150 --> 00:24:29,840
it does not matter to them again neither

00:24:27,110 --> 00:24:32,210
of these is inherently bad neither of

00:24:29,840 --> 00:24:33,799
them is inherently good they tell you

00:24:32,210 --> 00:24:36,169
different things about your system you

00:24:33,799 --> 00:24:38,240
need both of them anyone who tells you

00:24:36,169 --> 00:24:39,799
that you only need distributed tracing

00:24:38,240 --> 00:24:41,600
and you don't need metrics and metrics

00:24:39,799 --> 00:24:44,029
are horrible is trying to sell you

00:24:41,600 --> 00:24:45,650
distributed tracing anyone who tells you

00:24:44,029 --> 00:24:47,029
that metrics are the only thing you need

00:24:45,650 --> 00:24:49,279
and you don't need really need these

00:24:47,029 --> 00:24:51,500
fancy events is trying to sell you

00:24:49,279 --> 00:24:53,240
monitoring everyone's trying to sell you

00:24:51,500 --> 00:24:55,490
something all the time except for me

00:24:53,240 --> 00:24:57,020
I the only thing I sell you is LinkedIn

00:24:55,490 --> 00:24:58,309
premium services and you should all go

00:24:57,020 --> 00:25:00,140
sign up for it because it's great for

00:24:58,309 --> 00:25:04,399
your career but it has nothing to do

00:25:00,140 --> 00:25:05,870
with monitoring and observability so we

00:25:04,399 --> 00:25:07,970
now that we know what we want to measure

00:25:05,870 --> 00:25:10,190
and how to measure it we have to design

00:25:07,970 --> 00:25:12,380
our systems this this is where you have

00:25:10,190 --> 00:25:15,230
to think early and often about what

00:25:12,380 --> 00:25:17,120
you're doing so you always want to build

00:25:15,230 --> 00:25:19,520
your systems to fail because they are

00:25:17,120 --> 00:25:21,649
going to fail all the time we have an

00:25:19,520 --> 00:25:23,830
on-call room here that's why because

00:25:21,649 --> 00:25:26,960
your systems are failing all the time

00:25:23,830 --> 00:25:29,149
you need good instrumentation on every

00:25:26,960 --> 00:25:30,890
aspect of your system this doesn't mean

00:25:29,149 --> 00:25:32,480
millions and millions of metrics but it

00:25:30,890 --> 00:25:34,039
does mean trying to identify the right

00:25:32,480 --> 00:25:36,740
metrics to tell you about the internal

00:25:34,039 --> 00:25:38,840
state you need to have good availability

00:25:36,740 --> 00:25:40,730
you want to tolerate single component

00:25:38,840 --> 00:25:42,980
failures in your system at all time this

00:25:40,730 --> 00:25:45,649
might be n plus one you might be able to

00:25:42,980 --> 00:25:48,110
get away with just one extra it might

00:25:45,649 --> 00:25:50,270
mean two n plus one depending on what

00:25:48,110 --> 00:25:52,520
you're doing you need enough services so

00:25:50,270 --> 00:25:54,409
that you don't need to be alerted for a

00:25:52,520 --> 00:25:55,640
single node going down in the middle of

00:25:54,409 --> 00:25:58,669
the night you should be able to deal

00:25:55,640 --> 00:26:00,770
with that the next day and then on the

00:25:58,669 --> 00:26:03,110
capacity front you want to limit the

00:26:00,770 --> 00:26:05,240
resource creation and utilization in

00:26:03,110 --> 00:26:07,370
your system so that a single bad actor

00:26:05,240 --> 00:26:09,880
can't run you out of capacity for your

00:26:07,370 --> 00:26:12,770
service think about DDoS protection

00:26:09,880 --> 00:26:14,659
quotas on data infrastructure systems

00:26:12,770 --> 00:26:17,840
everything like this will help get you

00:26:14,659 --> 00:26:19,700
to that space and then you want to use

00:26:17,840 --> 00:26:21,860
your SLO s for monitoring because it's

00:26:19,700 --> 00:26:23,419
the only thing that actually matters if

00:26:21,860 --> 00:26:25,250
you ever think back to that Rumsfeld

00:26:23,419 --> 00:26:27,380
quadrant the only things we actually

00:26:25,250 --> 00:26:29,210
need to alert on are the unknown

00:26:27,380 --> 00:26:29,720
unknowns because everything else can be

00:26:29,210 --> 00:26:32,180
automate

00:26:29,720 --> 00:26:34,010
way after you do a little work so you

00:26:32,180 --> 00:26:36,350
want to always measure your SL is

00:26:34,010 --> 00:26:37,940
whatever you've defined them to be you

00:26:36,350 --> 00:26:39,980
want to have objective monitoring for

00:26:37,940 --> 00:26:43,090
those it's the best thing you can do for

00:26:39,980 --> 00:26:45,230
your SLO based monitoring for

00:26:43,090 --> 00:26:46,640
observability based things for knowing

00:26:45,230 --> 00:26:48,620
the internal state of your system and

00:26:46,640 --> 00:26:51,290
debugging your problems you need more

00:26:48,620 --> 00:26:55,580
subjective monitoring techniques but for

00:26:51,290 --> 00:26:57,530
SLO s the objective method is best you

00:26:55,580 --> 00:27:00,410
don't want to beat your SLO s at least

00:26:57,530 --> 00:27:04,540
not by much so if you set your SLO at

00:27:00,410 --> 00:27:06,590
99% availability and you're always 99.9%

00:27:04,540 --> 00:27:09,130
availability then guess what happens

00:27:06,590 --> 00:27:11,810
your customers assume that the SLO is

00:27:09,130 --> 00:27:15,230
99.9 percent availability and when you

00:27:11,810 --> 00:27:17,000
are 99.1 percent available they will be

00:27:15,230 --> 00:27:19,370
complaining even though that's not what

00:27:17,000 --> 00:27:22,310
you promised so you want to beat your

00:27:19,370 --> 00:27:24,080
SLO by just a little bit but not much

00:27:22,310 --> 00:27:27,080
because you don't want to set a new

00:27:24,080 --> 00:27:30,470
assumed SLO in place and you only want

00:27:27,080 --> 00:27:32,330
to alert on the SLO and I love making

00:27:30,470 --> 00:27:34,430
definitive statements like that because

00:27:32,330 --> 00:27:36,260
it always generates a great discussion

00:27:34,430 --> 00:27:38,030
later with people who disagree with me

00:27:36,260 --> 00:27:42,290
and I love it when people disagree with

00:27:38,030 --> 00:27:46,340
me so SLO s find your unknown unknowns

00:27:42,290 --> 00:27:48,710
and anything that's known unknown or

00:27:46,340 --> 00:27:51,080
unknown known which is an active

00:27:48,710 --> 00:27:53,180
incident or a monitoring gap has to be

00:27:51,080 --> 00:27:54,620
temporary you have to solve those

00:27:53,180 --> 00:27:56,990
problems if you're not solving those

00:27:54,620 --> 00:27:59,240
problems then you're probably just

00:27:56,990 --> 00:28:02,060
sitting and playing Minecraft to tweak

00:27:59,240 --> 00:28:05,630
your docker configuration and that's

00:28:02,060 --> 00:28:08,150
wasting everyone's time know known

00:28:05,630 --> 00:28:09,710
should always be automated if you know

00:28:08,150 --> 00:28:12,320
how to solve the problem then make the

00:28:09,710 --> 00:28:14,620
computer do it for you that's our job is

00:28:12,320 --> 00:28:17,450
to make the computers do things for us

00:28:14,620 --> 00:28:19,760
make it do it automate yourself out of a

00:28:17,450 --> 00:28:21,200
job you will still have a job developers

00:28:19,760 --> 00:28:21,560
are horrible they're changing things all

00:28:21,200 --> 00:28:23,750
the time

00:28:21,560 --> 00:28:26,570
they're going to cause more problems for

00:28:23,750 --> 00:28:28,910
you don't worry about it and anything

00:28:26,570 --> 00:28:31,610
else that doesn't fall into the category

00:28:28,910 --> 00:28:33,470
of an SLO you can alert on it if you

00:28:31,610 --> 00:28:35,480
have a hundred percent single if you

00:28:33,470 --> 00:28:37,820
absolutely know that it describes a

00:28:35,480 --> 00:28:38,490
problem yes you can create an alert on

00:28:37,820 --> 00:28:41,010
it

00:28:38,490 --> 00:28:43,230
but I will ask you that if you have that

00:28:41,010 --> 00:28:46,080
going on then why didn't you automate

00:28:43,230 --> 00:28:47,820
the response to it and if you have

00:28:46,080 --> 00:28:49,790
something that is not an SLO that

00:28:47,820 --> 00:28:52,650
indicates a problem every single time

00:28:49,790 --> 00:28:54,900
why is it waking you up if it doesn't

00:28:52,650 --> 00:28:56,820
actually impact the SLO if the service

00:28:54,900 --> 00:29:00,090
can be if the service can continue

00:28:56,820 --> 00:29:01,380
running and a server is down do you need

00:29:00,090 --> 00:29:03,240
to be woken up in the middle of the

00:29:01,380 --> 00:29:07,310
night for that or can it be solved the

00:29:03,240 --> 00:29:07,310
next day that's what you want to go for

00:29:07,430 --> 00:29:11,040
capacity is the one thing that people

00:29:09,150 --> 00:29:13,410
will start arguing with beyond this

00:29:11,040 --> 00:29:15,030
about the first time every single time

00:29:13,410 --> 00:29:16,170
because you have to alert on capacity

00:29:15,030 --> 00:29:18,570
you have to know when you're running out

00:29:16,170 --> 00:29:19,760
of resources for your system you really

00:29:18,570 --> 00:29:22,800
don't

00:29:19,760 --> 00:29:24,420
first off use quotas so assure that a

00:29:22,800 --> 00:29:25,830
single user can only use the amount of

00:29:24,420 --> 00:29:27,480
resources that you've given to them at

00:29:25,830 --> 00:29:28,890
any point in time and use quotas for

00:29:27,480 --> 00:29:30,840
online services and for data

00:29:28,890 --> 00:29:33,900
infrastructure they're useful in lots

00:29:30,840 --> 00:29:36,180
and lots of places report and review on

00:29:33,900 --> 00:29:38,640
capacity regularly so you want to be

00:29:36,180 --> 00:29:40,860
able to respond to changes in the trend

00:29:38,640 --> 00:29:43,980
range changes in organic growth at any

00:29:40,860 --> 00:29:46,170
given point in time but you need to

00:29:43,980 --> 00:29:48,210
report and review because in the middle

00:29:46,170 --> 00:29:50,550
of the night if you get paged for a

00:29:48,210 --> 00:29:52,590
capacity problem I don't know about you

00:29:50,550 --> 00:29:54,630
but I can't make a rack of servers

00:29:52,590 --> 00:29:57,720
magically appear in the middle of the

00:29:54,630 --> 00:30:00,270
night it just doesn't happen now

00:29:57,720 --> 00:30:01,890
AWS and Google cloud and Azure all

00:30:00,270 --> 00:30:03,720
changed that a little bit yes we can

00:30:01,890 --> 00:30:05,790
magically make new VMs appear in the

00:30:03,720 --> 00:30:11,240
middle of the night but if that's the

00:30:05,790 --> 00:30:13,800
case why didn't you automate that and

00:30:11,240 --> 00:30:16,230
always act promptly on your capacity

00:30:13,800 --> 00:30:19,020
concerns so if you have that extra rack

00:30:16,230 --> 00:30:20,520
of servers get them installed they're

00:30:19,020 --> 00:30:22,620
not doing you any good sitting there

00:30:20,520 --> 00:30:24,990
idle unless you're really just trying to

00:30:22,620 --> 00:30:26,610
save on electricity and cooling costs

00:30:24,990 --> 00:30:28,800
and that's probably not what you want to

00:30:26,610 --> 00:30:31,020
do don't put this off because it will

00:30:28,800 --> 00:30:33,090
bite you eventually if you put off this

00:30:31,020 --> 00:30:35,100
work so review it constantly and get it

00:30:33,090 --> 00:30:37,130
updated constantly it's really all you

00:30:35,100 --> 00:30:40,470
can do to solve your capacity problems

00:30:37,130 --> 00:30:41,610
with that I am pretty much at the end of

00:30:40,470 --> 00:30:43,260
what I was going to talk to you about

00:30:41,610 --> 00:30:46,890
here which is great because I still have

00:30:43,260 --> 00:30:48,120
time left for questions so what are you

00:30:46,890 --> 00:30:49,320
gonna do next whether what are the

00:30:48,120 --> 00:30:50,580
things that you need to walk out of here

00:30:49,320 --> 00:30:51,960
and do what are the things that I need

00:30:50,580 --> 00:30:52,610
to walk out of here and do because I'm

00:30:51,960 --> 00:30:54,710
actually

00:30:52,610 --> 00:30:56,510
these battles internally I love talking

00:30:54,710 --> 00:30:59,390
about this it doesn't mean I'm actually

00:30:56,510 --> 00:31:00,980
doing it yet so you need to define your

00:30:59,390 --> 00:31:02,420
SLO you need to get your customers

00:31:00,980 --> 00:31:04,940
whether they're internal customers or

00:31:02,420 --> 00:31:07,250
external customers talking and agreeing

00:31:04,940 --> 00:31:09,799
on what they expect out of your service

00:31:07,250 --> 00:31:11,030
and add objective monitoring for all of

00:31:09,799 --> 00:31:13,450
these so that you can actually see

00:31:11,030 --> 00:31:15,710
what's going on clean up all your alerts

00:31:13,450 --> 00:31:17,450
check you know make a list of all your

00:31:15,710 --> 00:31:18,740
alerts figure out which ones were seemed

00:31:17,450 --> 00:31:20,750
to be good and which ones are actually

00:31:18,740 --> 00:31:23,390
giving you noise a lot of the time add

00:31:20,750 --> 00:31:25,040
alerts for the SLO s implement quotas

00:31:23,390 --> 00:31:26,150
basically clean all this stuff up and

00:31:25,040 --> 00:31:28,850
get rid of the things that are causing

00:31:26,150 --> 00:31:30,650
you pain at any given point in time a

00:31:28,850 --> 00:31:32,299
couple years ago Kafka was in a place

00:31:30,650 --> 00:31:33,740
where we were just having all kinds of

00:31:32,299 --> 00:31:35,360
capacity problems and other things that

00:31:33,740 --> 00:31:37,850
LinkedIn turned out that the biggest

00:31:35,360 --> 00:31:40,970
problem was that 90% of our alerts were

00:31:37,850 --> 00:31:42,710
not actionable and that it was just

00:31:40,970 --> 00:31:44,720
driving everyone crazy especially since

00:31:42,710 --> 00:31:47,059
I think we have a three person on-call

00:31:44,720 --> 00:31:48,590
rotation at the time so everyone was in

00:31:47,059 --> 00:31:51,169
a bad state all the time I spent many

00:31:48,590 --> 00:31:54,410
nights yelling at my manager which I

00:31:51,169 --> 00:31:56,450
have no longer on the kafka team and add

00:31:54,410 --> 00:31:57,740
instrumentation for everything so if you

00:31:56,450 --> 00:31:59,650
haven't switched to structured logging

00:31:57,740 --> 00:32:02,240
switch to structured logging ad

00:31:59,650 --> 00:32:03,799
distributed tracing especially if you

00:32:02,240 --> 00:32:05,150
have a distributed system it's the only

00:32:03,799 --> 00:32:08,360
way you're going to monitor it or add

00:32:05,150 --> 00:32:10,190
internal tracing and don't hold all of

00:32:08,360 --> 00:32:12,049
this extra information any longer than

00:32:10,190 --> 00:32:13,940
you need to one of the wonderful things

00:32:12,049 --> 00:32:15,230
about our internal monitoring system at

00:32:13,940 --> 00:32:18,020
LinkedIn is that it is completely

00:32:15,230 --> 00:32:19,940
self-service you can annotate a new new

00:32:18,020 --> 00:32:21,230
metric and it automatically gets picked

00:32:19,940 --> 00:32:22,220
up and carried into the system and you

00:32:21,230 --> 00:32:24,049
get lots of graphs

00:32:22,220 --> 00:32:26,840
it also has essentially infinite

00:32:24,049 --> 00:32:28,460
retention for everything with a little

00:32:26,840 --> 00:32:30,410
bit of degradation of the quality over

00:32:28,460 --> 00:32:32,540
time but I'll tell you right now that in

00:32:30,410 --> 00:32:35,000
the kafka space there's probably 20

00:32:32,540 --> 00:32:37,700
metrics that we care about retaining for

00:32:35,000 --> 00:32:39,860
more than two weeks the rest of them are

00:32:37,700 --> 00:32:41,900
completely useless after we finish

00:32:39,860 --> 00:32:43,250
debugging a problem so make sure you're

00:32:41,900 --> 00:32:45,919
only retaining things for the

00:32:43,250 --> 00:32:47,660
appropriate amount of time and if you

00:32:45,919 --> 00:32:49,610
want some more information about some of

00:32:47,660 --> 00:32:51,440
the things I've talked about you can

00:32:49,610 --> 00:32:53,419
either find me afterwards and I'm happy

00:32:51,440 --> 00:32:57,980
to talk about all these things we've

00:32:53,419 --> 00:32:59,840
done a talk and a blog post on what we

00:32:57,980 --> 00:33:02,419
call code yellow which is a process that

00:32:59,840 --> 00:33:03,980
we use internally for dealing with teams

00:33:02,419 --> 00:33:05,220
that are overburdened that have too much

00:33:03,980 --> 00:33:06,720
toil or have

00:33:05,220 --> 00:33:08,730
problems going on it's actually pretty

00:33:06,720 --> 00:33:10,289
useful framework and anyone can

00:33:08,730 --> 00:33:13,020
implement it it's nothing specific to

00:33:10,289 --> 00:33:17,190
LinkedIn I've done several talks about

00:33:13,020 --> 00:33:19,559
sre and my colleague Ben Ferguson along

00:33:17,190 --> 00:33:22,169
with David hanky our former head of Sree

00:33:19,559 --> 00:33:24,210
wrote a blog series called everyday as

00:33:22,169 --> 00:33:26,669
Monday and operations which is a great

00:33:24,210 --> 00:33:28,890
read and it starts at every day is

00:33:26,669 --> 00:33:30,900
Monday in operations calm so it's nice

00:33:28,890 --> 00:33:32,700
and easy to remember and then if you

00:33:30,900 --> 00:33:34,679
want to deeper dive on monitoring in

00:33:32,700 --> 00:33:36,990
Kafka and all the things that I've told

00:33:34,679 --> 00:33:39,390
people are wrong then there is a talk

00:33:36,990 --> 00:33:41,700
that I did last year in London on

00:33:39,390 --> 00:33:43,950
monitoring for Kafka and then you can

00:33:41,700 --> 00:33:47,070
find me the best place is actually on

00:33:43,950 --> 00:33:49,049
LinkedIn it may sound like I'm selling

00:33:47,070 --> 00:33:50,549
something to you but it is actually the

00:33:49,049 --> 00:33:52,500
best way to reach me at any point in

00:33:50,549 --> 00:33:55,710
time because I'm always looking at it or

00:33:52,500 --> 00:33:58,799
bong coif on twitter I'm on there

00:33:55,710 --> 00:34:00,390
infrequently and with that I would love

00:33:58,799 --> 00:34:01,890
to take any questions that people have

00:34:00,390 --> 00:34:05,820
or maybe arguments that you want to

00:34:01,890 --> 00:34:08,040
start okay so the question was about how

00:34:05,820 --> 00:34:09,780
do you get started with sre when your

00:34:08,040 --> 00:34:11,940
leadership won't fund it and you don't

00:34:09,780 --> 00:34:14,040
have dedicated headcount for it the

00:34:11,940 --> 00:34:18,649
answer is is that sre isn't necessarily

00:34:14,040 --> 00:34:22,230
a job it's more of a culture so sre is

00:34:18,649 --> 00:34:24,210
really kind of hovers around the the

00:34:22,230 --> 00:34:25,740
culture of being blameless and having

00:34:24,210 --> 00:34:27,960
open and honest communication to start

00:34:25,740 --> 00:34:30,389
with as soon as you do that all of the

00:34:27,960 --> 00:34:33,179
practices of sre kind of fall into place

00:34:30,389 --> 00:34:35,159
so you don't really need specific

00:34:33,179 --> 00:34:36,750
headcount to start sre what you need to

00:34:35,159 --> 00:34:38,669
do is you need to start promoting the

00:34:36,750 --> 00:34:41,520
cultural change that you want to see

00:34:38,669 --> 00:34:43,440
that will then just make sre naturally

00:34:41,520 --> 00:34:45,750
appear in an organization and that's

00:34:43,440 --> 00:34:47,399
being able to talk about problems openly

00:34:45,750 --> 00:34:49,109
and this is one of the things that I

00:34:47,399 --> 00:34:51,510
actually cover in the the code yellow

00:34:49,109 --> 00:34:53,790
talk and and why that works so well is

00:34:51,510 --> 00:34:55,710
when you start talking about your

00:34:53,790 --> 00:34:58,710
problems and you know you're not going

00:34:55,710 --> 00:35:00,900
to get blamed for them happening or what

00:34:58,710 --> 00:35:02,609
the fallout was then people are far more

00:35:00,900 --> 00:35:04,530
likely to solve those problems

00:35:02,609 --> 00:35:06,930
proactively solve them easily you get

00:35:04,530 --> 00:35:08,970
more information flowing so I always

00:35:06,930 --> 00:35:10,830
people point people to the culture first

00:35:08,970 --> 00:35:14,070
and then worry about the headcount and

00:35:10,830 --> 00:35:16,020
everything else later it's the best

00:35:14,070 --> 00:35:19,800
answer I have for you Florian

00:35:16,020 --> 00:35:21,150
all right good well then thank you very

00:35:19,800 --> 00:35:23,600
much and I'll be around if you have any

00:35:21,150 --> 00:35:23,600
questions

00:35:25,850 --> 00:35:30,980

YouTube URL: https://www.youtube.com/watch?v=VaiXlNFXU5k


