Title: Five NEINs of availability  - Tomer Gabel
Publication date: 2020-01-13
Playlist: DevOpsDays Tel Aviv 2019
Description: 
	We've all been there: it's 3 AM, the system is down, everything is on fire and it's up to us to make it better. We do some digging, deploy a fix and draft a post-mortem. We might even identify some things we could have done differently, or suggest a process to avoid such problems in the future. Everyone sits down for the ceremonial presentation of the post-mortem and nods sagely, going back to their work secure that valuable lessons had been learned... right up until the next time the system crashes and we go through the motions again.

In this session we'll consider not what could be done differently, but what shouldn't be done at all: common engineering antipatterns that, if we fail to avoid, will degrade our system and hurt its availability.
Captions: 
	00:00:00,440 --> 00:00:03,580
[Music]

00:00:04,250 --> 00:00:10,139
hi my name is Donna this is a very sort

00:00:08,429 --> 00:00:12,000
of last-minute thing so I think I got

00:00:10,139 --> 00:00:14,820
the call to that that this talk is

00:00:12,000 --> 00:00:16,260
necessary I think on Sunday so I'm gonna

00:00:14,820 --> 00:00:18,960
be subjecting you to totally

00:00:16,260 --> 00:00:23,400
experimental talk that only existed in

00:00:18,960 --> 00:00:25,170
title form on Sundays we're gonna start

00:00:23,400 --> 00:00:26,730
in the usual manner it's 3:00 a.m.

00:00:25,170 --> 00:00:29,039
you're running a production system

00:00:26,730 --> 00:00:31,439
you're on call and the system breaks so

00:00:29,039 --> 00:00:34,590
you get woken up by pager duty is this

00:00:31,439 --> 00:00:36,719
not familiar to anyone like have you had

00:00:34,590 --> 00:00:39,690
this this amazing experience of not

00:00:36,719 --> 00:00:42,360
being woken up through some faults of

00:00:39,690 --> 00:00:44,850
someone on a production system if so I

00:00:42,360 --> 00:00:46,649
envy you but I imagine no one in a

00:00:44,850 --> 00:00:48,300
DevOps conference has probably had that

00:00:46,649 --> 00:00:50,399
experience we all get woken up in the

00:00:48,300 --> 00:00:52,800
middle of the night so you wake up you

00:00:50,399 --> 00:00:54,120
log into a bunch of servers you start

00:00:52,800 --> 00:00:56,610
looking at flog you start diagnosing

00:00:54,120 --> 00:00:58,980
what's wrong with with your system and

00:00:56,610 --> 00:00:59,760
then it dawns on you that this is your

00:00:58,980 --> 00:01:01,500
life now

00:00:59,760 --> 00:01:03,270
like as soon as you realize it's not a

00:01:01,500 --> 00:01:05,070
trivial issue issue you have that

00:01:03,270 --> 00:01:07,740
sinking feeling in the pit of your

00:01:05,070 --> 00:01:09,930
stomach that goes I'm not going to sleep

00:01:07,740 --> 00:01:14,430
anytime soon and my life officially

00:01:09,930 --> 00:01:16,680
sucks so whereas most talks in a DevOps

00:01:14,430 --> 00:01:18,390
conference would generally would

00:01:16,680 --> 00:01:19,920
generally be discussing things that you

00:01:18,390 --> 00:01:21,960
should do in order to improve

00:01:19,920 --> 00:01:24,360
availability have better processes all

00:01:21,960 --> 00:01:26,220
these things like dues in order to

00:01:24,360 --> 00:01:28,110
improve the availability of your system

00:01:26,220 --> 00:01:31,860
actually want to talk a little bit about

00:01:28,110 --> 00:01:33,869
the don'ts so I've had opportunity to

00:01:31,860 --> 00:01:37,680
observe a bunch of production systems

00:01:33,869 --> 00:01:40,110
and I have tried coming up with five

00:01:37,680 --> 00:01:42,930
sort of organizational anti patterns

00:01:40,110 --> 00:01:44,880
that will cause loss of availability in

00:01:42,930 --> 00:01:46,860
your system or will make it that much

00:01:44,880 --> 00:01:49,470
harder to get your system back up and

00:01:46,860 --> 00:01:52,770
running therefore these are five nines

00:01:49,470 --> 00:01:56,130
of availability so why am I qualified to

00:01:52,770 --> 00:01:57,840
speak about this I've been around the

00:01:56,130 --> 00:01:59,850
block I've been in this in this industry

00:01:57,840 --> 00:02:01,799
for just shy of 20 years now I've worked

00:01:59,850 --> 00:02:03,899
at Wix for a number of years with the we

00:02:01,799 --> 00:02:06,869
work I set up what nowadays you might

00:02:03,899 --> 00:02:09,509
call an SRE team at Sears back in the

00:02:06,869 --> 00:02:13,150
day it predates the term the serene

00:02:09,509 --> 00:02:15,250
DevOps so also I'm the reverse of hiring

00:02:13,150 --> 00:02:17,290
if anyone wants to hire me to work up

00:02:15,250 --> 00:02:19,900
north or remote leave and come talk to

00:02:17,290 --> 00:02:22,090
me later but that's about it the bottom

00:02:19,900 --> 00:02:24,790
line is I've worked in enough production

00:02:22,090 --> 00:02:27,189
systems in a large enough variety of

00:02:24,790 --> 00:02:29,500
organizations that I think I have a clue

00:02:27,189 --> 00:02:32,579
about what are the really stupid things

00:02:29,500 --> 00:02:36,760
we tend to do that will screw us over

00:02:32,579 --> 00:02:38,530
time and these are the five nines of

00:02:36,760 --> 00:02:42,340
availability without further adieu

00:02:38,530 --> 00:02:44,590
number one don't make it impossible to

00:02:42,340 --> 00:02:46,569
break one of the common themes that you

00:02:44,590 --> 00:02:49,030
get with organizations is that when

00:02:46,569 --> 00:02:51,370
something breaks the organization panics

00:02:49,030 --> 00:02:54,040
and tries to put something in place so

00:02:51,370 --> 00:02:56,349
that the thing doesn't break again so

00:02:54,040 --> 00:02:58,359
for instance one canonical example is

00:02:56,349 --> 00:03:00,670
you have an engineer random engineer on

00:02:58,359 --> 00:03:02,859
your team whichever team that is they

00:03:00,670 --> 00:03:04,930
commit some code to master and that code

00:03:02,859 --> 00:03:06,909
breaks horribly production it brings the

00:03:04,930 --> 00:03:08,230
system down everyone wakes up in the

00:03:06,909 --> 00:03:10,329
middle of the night that's a huge mess

00:03:08,230 --> 00:03:13,329
you get a post-mortem and then some

00:03:10,329 --> 00:03:15,849
well-meaning soul says well that was a

00:03:13,329 --> 00:03:17,349
stupid mistake the way to resolve this

00:03:15,849 --> 00:03:17,919
is to make sure the mistake doesn't

00:03:17,349 --> 00:03:20,769
happen again

00:03:17,919 --> 00:03:23,470
so from here on in instead of allowing

00:03:20,769 --> 00:03:25,690
any engineer to insert any or merge any

00:03:23,470 --> 00:03:28,329
code to master we're just gonna put a

00:03:25,690 --> 00:03:30,819
block there so in order to say merge a

00:03:28,329 --> 00:03:33,159
pull request to master you must have say

00:03:30,819 --> 00:03:36,760
two votes from other members of the

00:03:33,159 --> 00:03:38,680
engineering team now the rationale for

00:03:36,760 --> 00:03:40,329
it seems sound and this is the sort of

00:03:38,680 --> 00:03:42,970
thing that this is the sort of lesson

00:03:40,329 --> 00:03:45,220
that you wanna you know wanna enact in

00:03:42,970 --> 00:03:49,540
your organization right more eyes make

00:03:45,220 --> 00:03:52,209
bugs shallow unfortunately that doesn't

00:03:49,540 --> 00:03:53,979
really work because first of all human

00:03:52,209 --> 00:03:56,049
error is inevitable whatever you do

00:03:53,979 --> 00:03:58,180
someone is gonna screw up because people

00:03:56,049 --> 00:04:00,970
are people right they are distracted

00:03:58,180 --> 00:04:03,639
they are tired they they make

00:04:00,970 --> 00:04:05,560
non-obvious mistakes in non-obvious ways

00:04:03,639 --> 00:04:08,739
that will bring your system down so this

00:04:05,560 --> 00:04:10,269
is inevitable on the other hand what

00:04:08,739 --> 00:04:13,629
you've done is you've put some process

00:04:10,269 --> 00:04:16,269
in place that is intended to mitigate

00:04:13,629 --> 00:04:19,690
human error it is intended to put in

00:04:16,269 --> 00:04:22,120
some stuff in place so that no one can

00:04:19,690 --> 00:04:24,010
make those mistakes again unfortunately

00:04:22,120 --> 00:04:26,230
more process won't solve your problem

00:04:24,010 --> 00:04:28,690
because human error still happens

00:04:26,230 --> 00:04:30,490
and if you can't whatever you can't

00:04:28,690 --> 00:04:33,160
merge a pull request there are still a

00:04:30,490 --> 00:04:35,260
thousand other things you can do by

00:04:33,160 --> 00:04:36,700
mistake that will cause loss of

00:04:35,260 --> 00:04:40,000
availability so this doesn't really

00:04:36,700 --> 00:04:41,890
solve the problem it will however screw

00:04:40,000 --> 00:04:44,980
you royally the next time you have a

00:04:41,890 --> 00:04:47,830
production outage 3 a.m. because not all

00:04:44,980 --> 00:04:49,840
production outages are trivially trivial

00:04:47,830 --> 00:04:51,550
to solve and not all of them are just oh

00:04:49,840 --> 00:04:53,620
someone committed something we'll roll

00:04:51,550 --> 00:04:55,060
back to an earlier revision sometimes

00:04:53,620 --> 00:04:56,980
you actually have a bug you need to fix

00:04:55,060 --> 00:04:59,110
and it's not necessarily about you knew

00:04:56,980 --> 00:05:00,940
about sometimes you find something out

00:04:59,110 --> 00:05:02,680
about the system at three o'clock in the

00:05:00,940 --> 00:05:05,500
morning and now you actually need to

00:05:02,680 --> 00:05:07,300
deploy a fix to production and at 3

00:05:05,500 --> 00:05:09,580
o'clock in the morning I'm sorry to say

00:05:07,300 --> 00:05:11,530
you're on-call engineer is the only one

00:05:09,580 --> 00:05:13,600
that's actually responding because

00:05:11,530 --> 00:05:15,100
that's their job and they're not happy

00:05:13,600 --> 00:05:17,140
about it but they will do it because

00:05:15,100 --> 00:05:18,760
it's their job but if they have to wait

00:05:17,140 --> 00:05:20,950
around and scratch their head waiting

00:05:18,760 --> 00:05:22,840
for some other member of the team to

00:05:20,950 --> 00:05:25,330
wake up and actually review their fix

00:05:22,840 --> 00:05:26,770
you have now lost availability you're

00:05:25,330 --> 00:05:29,530
just sitting there and waiting for

00:05:26,770 --> 00:05:31,270
someone to wake up or ideally you know

00:05:29,530 --> 00:05:33,160
you're on-call engineers now scrambling

00:05:31,270 --> 00:05:35,410
to find phone numbers of team members

00:05:33,160 --> 00:05:38,230
that they're comfortable waking up so

00:05:35,410 --> 00:05:41,950
that they can review the code so that is

00:05:38,230 --> 00:05:43,930
an unexpected side effect of a process

00:05:41,950 --> 00:05:46,330
that was put in place to avert issues

00:05:43,930 --> 00:05:49,570
that actually causes more issues and if

00:05:46,330 --> 00:05:52,240
I had a shekel for every time I had to

00:05:49,570 --> 00:05:54,700
fix a bug at some weird hour and then I

00:05:52,240 --> 00:05:58,060
had to scramble to find teammates that

00:05:54,700 --> 00:06:00,040
actually review my fix because there's a

00:05:58,060 --> 00:06:03,280
github rule in place that doesn't let me

00:06:00,040 --> 00:06:05,230
merge to master I would have had quite a

00:06:03,280 --> 00:06:07,600
few shekels not enough to do anything

00:06:05,230 --> 00:06:10,210
with but enough to make my life

00:06:07,600 --> 00:06:12,700
miserable so what should you do about it

00:06:10,210 --> 00:06:14,260
well ideally you should avoid having

00:06:12,700 --> 00:06:17,080
stupid process in place

00:06:14,260 --> 00:06:18,610
everyone likes nothing you know everyone

00:06:17,080 --> 00:06:21,310
likes to make smart decisions that's not

00:06:18,610 --> 00:06:21,850
a very good good way of dealing with

00:06:21,310 --> 00:06:23,920
things

00:06:21,850 --> 00:06:27,580
because that process came about because

00:06:23,920 --> 00:06:28,450
some well-meaning and smart people just

00:06:27,580 --> 00:06:32,230
didn't think it through

00:06:28,450 --> 00:06:34,990
so if you do put such a process into

00:06:32,230 --> 00:06:37,450
place if you do require say code reviews

00:06:34,990 --> 00:06:40,540
before merging PRS or any type of

00:06:37,450 --> 00:06:42,640
process of that nature it is incumbent

00:06:40,540 --> 00:06:44,560
upon you to provide an escape hatch you

00:06:42,640 --> 00:06:47,980
need to provide your engineers with some

00:06:44,560 --> 00:06:50,860
means of circumventing that process on

00:06:47,980 --> 00:06:53,140
an emergency and if you're still worried

00:06:50,860 --> 00:06:55,090
about you know giving your engineers

00:06:53,140 --> 00:06:57,610
that power empowering your engineers to

00:06:55,090 --> 00:07:00,460
actually avert the process then put some

00:06:57,610 --> 00:07:02,050
logging and auditing in place right but

00:07:00,460 --> 00:07:04,390
at three o'clock in the morning when

00:07:02,050 --> 00:07:07,060
you're all con call engineer needs to

00:07:04,390 --> 00:07:08,980
merge a bug fix you don't want anything

00:07:07,060 --> 00:07:11,470
standing in their way so make sure you

00:07:08,980 --> 00:07:15,420
have that whatever that button that says

00:07:11,470 --> 00:07:15,420
yeah I'm sure just skip this process

00:07:15,450 --> 00:07:20,290
annoyance number two don't put

00:07:18,430 --> 00:07:22,600
artificial barriers in place so the

00:07:20,290 --> 00:07:24,730
example I just gave you was a common one

00:07:22,600 --> 00:07:28,630
but it is very far from being the most

00:07:24,730 --> 00:07:31,690
egregious limitation that we place on

00:07:28,630 --> 00:07:34,780
our engineers you probably all came

00:07:31,690 --> 00:07:37,390
across systems or companies where for

00:07:34,780 --> 00:07:39,480
instance developers are not allowed

00:07:37,390 --> 00:07:42,130
access to production databases or

00:07:39,480 --> 00:07:44,320
systems where developers are not allowed

00:07:42,130 --> 00:07:48,030
SSH access to the server's running their

00:07:44,320 --> 00:07:50,530
actual software or any any such

00:07:48,030 --> 00:07:53,980
artificial barrier that was put in place

00:07:50,530 --> 00:07:55,660
to avoid again avoid human errors now

00:07:53,980 --> 00:07:57,880
there are really two reasons why

00:07:55,660 --> 00:07:59,410
organizations put such barriers in place

00:07:57,880 --> 00:08:01,210
if you can't access your production

00:07:59,410 --> 00:08:04,300
server there's usually only one of two

00:08:01,210 --> 00:08:06,790
reasons the first is there's some

00:08:04,300 --> 00:08:09,550
regulation in place some legal liability

00:08:06,790 --> 00:08:11,890
that means you have to have those access

00:08:09,550 --> 00:08:14,770
control limitations a canonical example

00:08:11,890 --> 00:08:16,360
is say PCI DSS compliance right you

00:08:14,770 --> 00:08:18,220
don't want your developers to actually

00:08:16,360 --> 00:08:21,640
be able to access credit card

00:08:18,220 --> 00:08:23,920
information without do cost right so

00:08:21,640 --> 00:08:26,890
there are occasionally reasons to do

00:08:23,920 --> 00:08:28,840
that the problem is because it's hard to

00:08:26,890 --> 00:08:31,480
achieve compliance in the first place

00:08:28,840 --> 00:08:33,550
and it's a lot easier from a management

00:08:31,480 --> 00:08:35,979
perspective to just say okay well no one

00:08:33,550 --> 00:08:37,840
can access databases anymore

00:08:35,979 --> 00:08:39,490
generally speaking these things are

00:08:37,840 --> 00:08:42,640
applied organization-wide they're

00:08:39,490 --> 00:08:44,050
applied very very liberally whereas the

00:08:42,640 --> 00:08:46,290
limitations should actually only apply

00:08:44,050 --> 00:08:48,700
to the parts of the system that are

00:08:46,290 --> 00:08:51,160
required to meet those regulatory

00:08:48,700 --> 00:08:52,510
concerns so if you do have these

00:08:51,160 --> 00:08:53,740
concerns if you do have these

00:08:52,510 --> 00:08:56,950
constraints

00:08:53,740 --> 00:08:59,770
to the smallest surface area of your

00:08:56,950 --> 00:09:03,730
system as possible and you should still

00:08:59,770 --> 00:09:05,740
allow access very quick very rapid no

00:09:03,730 --> 00:09:08,800
synchronization no approval required

00:09:05,740 --> 00:09:11,020
access to those resources so that when

00:09:08,800 --> 00:09:13,720
your system breaks at 3 a.m. it can

00:09:11,020 --> 00:09:17,080
still be fixed and the regulation only

00:09:13,720 --> 00:09:20,110
requires you to explain why you provided

00:09:17,080 --> 00:09:22,270
that access so ad logging at auditing

00:09:20,110 --> 00:09:23,950
it's gonna be much cheaper and longer

00:09:22,270 --> 00:09:26,350
run than dealing with the loss of

00:09:23,950 --> 00:09:29,590
availability if you don't have like if

00:09:26,350 --> 00:09:31,990
you apply this liberally the other

00:09:29,590 --> 00:09:35,350
unfortunate reason and a much worse one

00:09:31,990 --> 00:09:37,510
is lack of trust if I had a nickel for

00:09:35,350 --> 00:09:39,550
every time nickel shackle whatever for

00:09:37,510 --> 00:09:42,640
every time I saw a company where some

00:09:39,550 --> 00:09:44,890
developer ran a defective scrip and a

00:09:42,640 --> 00:09:46,840
server somewhere wiped out a database or

00:09:44,890 --> 00:09:48,400
corrupted data or did something like

00:09:46,840 --> 00:09:50,770
that and the end result was that

00:09:48,400 --> 00:09:53,950
suddenly no one had access to the

00:09:50,770 --> 00:09:57,040
production systems that's just nuts ok

00:09:53,950 --> 00:09:59,050
it doesn't work first of all it if you

00:09:57,040 --> 00:10:00,670
don't trust your people to operate the

00:09:59,050 --> 00:10:02,470
system why are you letting them build it

00:10:00,670 --> 00:10:04,690
in the first place that's just

00:10:02,470 --> 00:10:06,580
ridiculous if you're hiring smart people

00:10:04,690 --> 00:10:08,140
to build the system trust them to

00:10:06,580 --> 00:10:10,360
operate it they're the ones that have

00:10:08,140 --> 00:10:11,800
the context to operate the system but

00:10:10,360 --> 00:10:14,140
more importantly this won't help you

00:10:11,800 --> 00:10:16,690
because the sort of problems that this

00:10:14,140 --> 00:10:19,600
intends to solve our problems of the

00:10:16,690 --> 00:10:22,330
Engineer Association to a server ran RM

00:10:19,600 --> 00:10:24,850
- or F variety these things aren't

00:10:22,330 --> 00:10:27,700
really a big concern because to start

00:10:24,850 --> 00:10:29,020
with a lot of them are much less of an

00:10:27,700 --> 00:10:31,390
issue now that we have a lot more

00:10:29,020 --> 00:10:34,230
automation infrastructure is code all

00:10:31,390 --> 00:10:38,560
these tools in place these mistakes are

00:10:34,230 --> 00:10:40,750
rather unusual and second you can still

00:10:38,560 --> 00:10:44,950
make mistakes through Mis configuration

00:10:40,750 --> 00:10:46,930
through issuing defective API calls

00:10:44,950 --> 00:10:49,270
through bugs through any of these things

00:10:46,930 --> 00:10:52,240
so these barriers don't solve your

00:10:49,270 --> 00:10:55,750
problem they just add drag to the

00:10:52,240 --> 00:10:59,700
organization and they make you lose time

00:10:55,750 --> 00:11:02,740
when hits the fan so don't do that

00:10:59,700 --> 00:11:07,720
number 3 don't think of failures as

00:11:02,740 --> 00:11:10,839
exceptional this is a product

00:11:07,720 --> 00:11:12,699
call prototypical software architecture

00:11:10,839 --> 00:11:15,430
right this is the slack a study from the

00:11:12,699 --> 00:11:18,459
AWS site the details don't matter what

00:11:15,430 --> 00:11:20,290
matters is that out of an architecture

00:11:18,459 --> 00:11:23,949
diagram that looks roughly like this

00:11:20,290 --> 00:11:25,870
your actual code operates there in that

00:11:23,949 --> 00:11:27,370
one tiny piece of the architecture

00:11:25,870 --> 00:11:30,730
substrate and it doesn't even matter

00:11:27,370 --> 00:11:32,949
what you do if you're a DevOps person an

00:11:30,730 --> 00:11:34,750
SRE whatever you do infrastructure that

00:11:32,949 --> 00:11:36,550
is still true of what you do you're

00:11:34,750 --> 00:11:39,550
built on top of a huge stack of things

00:11:36,550 --> 00:11:41,980
that fail all the time the fact that

00:11:39,550 --> 00:11:43,600
anything works is kind of reckless at

00:11:41,980 --> 00:11:45,430
this point like I don't expect my

00:11:43,600 --> 00:11:47,319
systems to work at any given point and

00:11:45,430 --> 00:11:49,600
when they do I'm constantly surprised

00:11:47,319 --> 00:11:54,129
because there's just so much stuff going

00:11:49,600 --> 00:11:56,290
on now the problem with this is if you

00:11:54,129 --> 00:11:58,180
if you are relegated to this tiny part

00:11:56,290 --> 00:11:59,680
of the architecture diagram and you

00:11:58,180 --> 00:12:01,420
build your system assuming that

00:11:59,680 --> 00:12:03,459
everything else works you're not gonna

00:12:01,420 --> 00:12:05,560
be ready for it when everything bricks

00:12:03,459 --> 00:12:08,589
and that is a very very common mistake

00:12:05,560 --> 00:12:10,600
that organizations make so if this is

00:12:08,589 --> 00:12:13,569
your architecture diagram there are some

00:12:10,600 --> 00:12:16,629
questions that you as an engineer should

00:12:13,569 --> 00:12:19,540
be able to answer like what happens when

00:12:16,629 --> 00:12:21,910
you lose an RDS instance Oh fine well

00:12:19,540 --> 00:12:23,769
you know we have replication and

00:12:21,910 --> 00:12:27,100
multiple availability zones were good to

00:12:23,769 --> 00:12:29,740
go well what happens if you lose say a

00:12:27,100 --> 00:12:31,899
register memcache instance suddenly it's

00:12:29,740 --> 00:12:33,490
not that trivial because you might be

00:12:31,899 --> 00:12:35,439
highly available but then you might

00:12:33,490 --> 00:12:37,240
treat it as a cache and if it's broken

00:12:35,439 --> 00:12:38,980
then you might just shunt off all

00:12:37,240 --> 00:12:42,399
traffic directly against your database

00:12:38,980 --> 00:12:44,949
server and blow it up it's part of your

00:12:42,399 --> 00:12:47,170
availability story you're actually do

00:12:44,949 --> 00:12:49,329
s-saying your own system right which is

00:12:47,170 --> 00:12:51,579
a very common failure mode but more

00:12:49,329 --> 00:12:53,829
importantly it still should be able to

00:12:51,579 --> 00:12:55,689
answer questions like what happens if

00:12:53,829 --> 00:12:58,959
you lose an entire viability zone or

00:12:55,689 --> 00:13:00,699
your entire VPC you should have answers

00:12:58,959 --> 00:13:02,829
to those questions the answers don't

00:13:00,699 --> 00:13:04,720
have to be state-of-the-art they don't

00:13:02,829 --> 00:13:07,029
have to be particularly interesting we

00:13:04,720 --> 00:13:08,949
can be Oh in that case we're down and

00:13:07,029 --> 00:13:11,170
this is what we do to get back up and

00:13:08,949 --> 00:13:14,379
it's gonna take six hours that's a valid

00:13:11,170 --> 00:13:17,709
answer but saying I don't know it's a

00:13:14,379 --> 00:13:20,899
crisis is not a valid answer so failure

00:13:17,709 --> 00:13:22,879
is a part of the norm

00:13:20,899 --> 00:13:25,339
mode of operation of your system it is

00:13:22,879 --> 00:13:27,529
not the exception things fail all the

00:13:25,339 --> 00:13:29,209
time in the large enough system you will

00:13:27,529 --> 00:13:31,369
have servers that are done you will have

00:13:29,209 --> 00:13:33,439
rooters that are down or packet switches

00:13:31,369 --> 00:13:36,259
that are down you will have third-party

00:13:33,439 --> 00:13:38,029
dependencies that are broken and various

00:13:36,259 --> 00:13:39,980
interesting wastes something is always

00:13:38,029 --> 00:13:42,949
broken somewhere and the system should

00:13:39,980 --> 00:13:45,949
still be able to handle it so failure is

00:13:42,949 --> 00:13:49,069
a given in modern systems don't pretend

00:13:45,949 --> 00:13:51,110
like it's you know a disaster recovery

00:13:49,069 --> 00:13:54,649
scenario and you don't have to worry

00:13:51,110 --> 00:13:58,429
about it what can you do about it plan

00:13:54,649 --> 00:14:02,089
for failure designed for failure drill

00:13:58,429 --> 00:14:03,860
failure scenarios okay we all know that

00:14:02,089 --> 00:14:05,990
if you have a backup system you need to

00:14:03,860 --> 00:14:07,819
drill backups and restores well why

00:14:05,990 --> 00:14:10,040
doesn't that apply to everything that we

00:14:07,819 --> 00:14:13,550
do failure is the norm we should be

00:14:10,040 --> 00:14:15,319
ready for when it happens so that is why

00:14:13,550 --> 00:14:16,279
as most of you probably know this

00:14:15,319 --> 00:14:18,800
shouldn't be news to anyone

00:14:16,279 --> 00:14:20,600
chaos engineering is your friend like

00:14:18,800 --> 00:14:23,629
whether or not you like the term doesn't

00:14:20,600 --> 00:14:25,699
matter the principles are your system is

00:14:23,629 --> 00:14:27,649
gonna break the process by which you

00:14:25,699 --> 00:14:29,620
bring it back up is super important to

00:14:27,649 --> 00:14:31,819
your business it is your livelihood

00:14:29,620 --> 00:14:34,429
therefore you should drill it you should

00:14:31,819 --> 00:14:36,589
bring down parts of the system and make

00:14:34,429 --> 00:14:38,329
sure that the system carries on and the

00:14:36,589 --> 00:14:42,379
organization actually knows how to

00:14:38,329 --> 00:14:48,290
handle that failure in a nice and smooth

00:14:42,379 --> 00:14:52,189
way number four don't make problems go

00:14:48,290 --> 00:14:54,410
away so you have again three AM system

00:14:52,189 --> 00:14:56,329
is down for whatever reason you're an

00:14:54,410 --> 00:14:58,160
engineer you go into your various

00:14:56,329 --> 00:15:01,730
monitoring solutions and log aggregation

00:14:58,160 --> 00:15:03,170
whatever it is that you do and you may

00:15:01,730 --> 00:15:04,970
or may not be able to figure out the

00:15:03,170 --> 00:15:07,160
system maybe maybe you can't figure out

00:15:04,970 --> 00:15:09,019
what's wrong maybe you can figure out

00:15:07,160 --> 00:15:11,360
what's wrong but some part of the system

00:15:09,019 --> 00:15:13,370
is in a pathological state that it will

00:15:11,360 --> 00:15:16,009
never recover from whatever threat

00:15:13,370 --> 00:15:19,129
exhaustion is or GC storm or classic

00:15:16,009 --> 00:15:19,610
examples of this well what do you do

00:15:19,129 --> 00:15:22,189
about it

00:15:19,610 --> 00:15:24,499
have you tried rebooting it that's what

00:15:22,189 --> 00:15:27,110
everyone does right once you reach that

00:15:24,499 --> 00:15:29,209
situation where you don't know what

00:15:27,110 --> 00:15:31,519
other questions you need to ask of the

00:15:29,209 --> 00:15:33,709
system or you can't figure out what's

00:15:31,519 --> 00:15:34,040
wrong or you know what's wrong but there

00:15:33,709 --> 00:15:36,110
is enough

00:15:34,040 --> 00:15:39,110
you can do about it you reboot it and

00:15:36,110 --> 00:15:41,209
that is a big problem because reboot is

00:15:39,110 --> 00:15:43,250
the result of panic I don't know what

00:15:41,209 --> 00:15:48,100
else to do so I reboot the system and

00:15:43,250 --> 00:15:51,079
there are two very very problematic I

00:15:48,100 --> 00:15:53,389
guess I would say ramifications that

00:15:51,079 --> 00:15:55,160
come out of rebooting assistent first is

00:15:53,389 --> 00:15:57,410
rebooting system any part of the system

00:15:55,160 --> 00:15:59,329
you have very nasty side effects like

00:15:57,410 --> 00:16:01,130
you can have anything from corrupt data

00:15:59,329 --> 00:16:02,209
on this the system doesn't come up

00:16:01,130 --> 00:16:04,519
anymore

00:16:02,209 --> 00:16:06,259
the system comes up with lost data or

00:16:04,519 --> 00:16:09,290
inconsistent data between parts of the

00:16:06,259 --> 00:16:12,380
system but you can also have a slightly

00:16:09,290 --> 00:16:14,389
harder to to predict

00:16:12,380 --> 00:16:16,279
side effects like for instance if you

00:16:14,389 --> 00:16:18,529
take down a service and you bring it

00:16:16,279 --> 00:16:21,110
back up maybe does some sort of cache

00:16:18,529 --> 00:16:23,269
warm-up when it starts up suddenly not

00:16:21,110 --> 00:16:25,970
only taking down an instance of the

00:16:23,269 --> 00:16:27,889
service means that all the load on that

00:16:25,970 --> 00:16:29,870
instance is distributed among all the

00:16:27,889 --> 00:16:32,690
other instances increasing the overall

00:16:29,870 --> 00:16:34,490
load but you actually generate load as

00:16:32,690 --> 00:16:36,050
part of the restart just because the

00:16:34,490 --> 00:16:38,810
service comes up and starts reading

00:16:36,050 --> 00:16:40,250
stuff from some data store somewhere so

00:16:38,810 --> 00:16:42,620
there are a lot of side effects to

00:16:40,250 --> 00:16:45,050
rebooting any part of the system ones

00:16:42,620 --> 00:16:47,750
where even at the best of times you're

00:16:45,050 --> 00:16:49,310
likely unaware of and certainly when

00:16:47,750 --> 00:16:51,709
you're under fire at 3 o'clock in the

00:16:49,310 --> 00:16:53,209
morning that's when a reboot can

00:16:51,709 --> 00:16:54,740
actually have devastating consequences

00:16:53,209 --> 00:16:57,019
on your system

00:16:54,740 --> 00:17:00,100
so reboot is not something that you

00:16:57,019 --> 00:17:03,889
should and that you should take lightly

00:17:00,100 --> 00:17:05,870
second and even more problematic is a

00:17:03,889 --> 00:17:07,970
reboot is lost opportunity you have the

00:17:05,870 --> 00:17:10,220
opportunity to learn about a defect in

00:17:07,970 --> 00:17:12,770
your system the system has reached a

00:17:10,220 --> 00:17:15,199
unique problematic state that you did

00:17:12,770 --> 00:17:16,699
not foresee because if you if you knew

00:17:15,199 --> 00:17:17,990
that the system could get to that state

00:17:16,699 --> 00:17:19,280
you would have solved it in the first

00:17:17,990 --> 00:17:21,230
place you would have designed for it

00:17:19,280 --> 00:17:23,809
right the system is in a unique state

00:17:21,230 --> 00:17:25,189
that you don't necessarily know you

00:17:23,809 --> 00:17:26,780
don't necessarily know what the state is

00:17:25,189 --> 00:17:29,630
you don't know what the effects of the

00:17:26,780 --> 00:17:32,419
state are you don't know what leaving

00:17:29,630 --> 00:17:34,850
the system in that state will do to you

00:17:32,419 --> 00:17:36,559
you know in a month or a year you might

00:17:34,850 --> 00:17:38,840
have corrupt data that you will never

00:17:36,559 --> 00:17:40,730
realize you have if you don't actually

00:17:38,840 --> 00:17:44,059
research and figure out what went wrong

00:17:40,730 --> 00:17:47,059
and when you have all these things if

00:17:44,059 --> 00:17:47,660
you reboot as as a panicky response to

00:17:47,059 --> 00:17:49,850
things and you

00:17:47,660 --> 00:17:51,590
actually take into account what effects

00:17:49,850 --> 00:17:54,350
that will have you make this guy very

00:17:51,590 --> 00:17:56,150
very angry now if you don't know who

00:17:54,350 --> 00:17:59,870
this guy is this is Brian Cantrell he's

00:17:56,150 --> 00:18:01,760
the ex CTO of giant he's kind of a

00:17:59,870 --> 00:18:03,410
legend in the industry about how angry

00:18:01,760 --> 00:18:05,150
he gets about certain things he makes me

00:18:03,410 --> 00:18:08,120
look like a very pleasant person which

00:18:05,150 --> 00:18:10,220
is pretty impressive but he's got a lot

00:18:08,120 --> 00:18:12,050
of good points and the way he puts it is

00:18:10,220 --> 00:18:14,810
when you reboot a server and you don't

00:18:12,050 --> 00:18:16,910
understand why you're rebooting server

00:18:14,810 --> 00:18:19,700
you have signed a suicide pact

00:18:16,910 --> 00:18:22,550
sooner or later your system is gonna

00:18:19,700 --> 00:18:24,530
come back and screw you royally because

00:18:22,550 --> 00:18:26,720
you just haven't figured out what's

00:18:24,530 --> 00:18:29,960
going on with it so I'm not saying don't

00:18:26,720 --> 00:18:32,270
reboot reboots are not intrinsically bad

00:18:29,960 --> 00:18:33,620
but if you reboot and you don't know

00:18:32,270 --> 00:18:35,690
anything about the system that's a

00:18:33,620 --> 00:18:37,640
problem and if you reboot then you have

00:18:35,690 --> 00:18:39,440
lost the state of the system that allows

00:18:37,640 --> 00:18:42,350
you to actually reason about the issue

00:18:39,440 --> 00:18:45,110
and reason about the ramifications of

00:18:42,350 --> 00:18:46,970
that issue you have lost the golden

00:18:45,110 --> 00:18:48,950
opportunity so if you're gonna reboot

00:18:46,970 --> 00:18:52,160
which is a very sensible thing to do in

00:18:48,950 --> 00:18:54,200
many cases make sure you collect as much

00:18:52,160 --> 00:18:56,870
evidence as humanly possible before you

00:18:54,200 --> 00:18:59,030
do get heap dumps get core dumps get

00:18:56,870 --> 00:19:01,100
thread dumps get the metrics save on the

00:18:59,030 --> 00:19:03,620
side make sure you have every piece of

00:19:01,100 --> 00:19:05,330
evidence available and then circle back

00:19:03,620 --> 00:19:05,810
to it don't just let up language don't

00:19:05,330 --> 00:19:09,110
ignore it

00:19:05,810 --> 00:19:11,210
save it aside and then circle back to it

00:19:09,110 --> 00:19:13,340
when the system is kind of ok and you

00:19:11,210 --> 00:19:15,530
have some breathing room but don't

00:19:13,340 --> 00:19:18,050
ignore it because the end results of

00:19:15,530 --> 00:19:19,670
ignoring such issues are unknown they

00:19:18,050 --> 00:19:22,990
might come back in a week or in a month

00:19:19,670 --> 00:19:27,020
and they might cause a much greater

00:19:22,990 --> 00:19:29,900
outage than you started off with last

00:19:27,020 --> 00:19:31,580
but not least this is a pet peeve of

00:19:29,900 --> 00:19:35,690
mine because I've been bitten but by

00:19:31,580 --> 00:19:39,140
this particular thing more often than I

00:19:35,690 --> 00:19:41,150
would have liked to admit as I said 3m

00:19:39,140 --> 00:19:43,370
your system is down you're on call

00:19:41,150 --> 00:19:45,230
engineer is on it they are researching

00:19:43,370 --> 00:19:47,000
the problem they are trying to figure it

00:19:45,230 --> 00:19:49,670
out they're trying to restore the system

00:19:47,000 --> 00:19:53,120
to functionality that is their duty and

00:19:49,670 --> 00:19:55,370
that duty is the most important thing

00:19:53,120 --> 00:19:58,160
your company is doing right there and

00:19:55,370 --> 00:20:00,540
then because loss of availability means

00:19:58,160 --> 00:20:03,120
a threat to your livelihoods

00:20:00,540 --> 00:20:05,100
a threat to your business the only thing

00:20:03,120 --> 00:20:06,720
that matters is to get the system up and

00:20:05,100 --> 00:20:10,140
running and then learn what went wrong

00:20:06,720 --> 00:20:14,280
in the first place so why is it that we

00:20:10,140 --> 00:20:16,890
treat on call engineers as the people we

00:20:14,280 --> 00:20:18,600
can ask anything of you have you know

00:20:16,890 --> 00:20:19,920
you might have for a big-enough outage

00:20:18,600 --> 00:20:22,500
you might have five different

00:20:19,920 --> 00:20:24,720
stakeholders from the CTO to the CEO to

00:20:22,500 --> 00:20:27,300
an engineering manager to anyone that's

00:20:24,720 --> 00:20:30,990
involved in it that are screaming at

00:20:27,300 --> 00:20:32,820
that poor Schmo on-call engineer you

00:20:30,990 --> 00:20:34,290
know what is going on is it down is it

00:20:32,820 --> 00:20:35,220
back up what are you doing about it how

00:20:34,290 --> 00:20:38,790
long is it gonna take

00:20:35,220 --> 00:20:40,500
there we expect our on-call engineers to

00:20:38,790 --> 00:20:43,200
not only figure out what's wrong with

00:20:40,500 --> 00:20:45,360
the system but also provide status

00:20:43,200 --> 00:20:47,160
updates and have keep communication

00:20:45,360 --> 00:20:48,600
lines open and keep track of the

00:20:47,160 --> 00:20:51,030
timeline so you can actually build a

00:20:48,600 --> 00:20:53,400
post-mortem write a post-mortem on that

00:20:51,030 --> 00:20:55,380
outage afterwards these are too many

00:20:53,400 --> 00:20:57,570
things for one person to handle at the

00:20:55,380 --> 00:21:00,660
best of times and when they're trying to

00:20:57,570 --> 00:21:03,270
debug a problem under fire what you're

00:21:00,660 --> 00:21:06,480
actually doing is you're making sure by

00:21:03,270 --> 00:21:08,040
by harassing or hanging your your

00:21:06,480 --> 00:21:10,410
on-call engineers you're actually making

00:21:08,040 --> 00:21:12,960
sure that the outage will be a lot

00:21:10,410 --> 00:21:14,880
longer and a lot worse than what it

00:21:12,960 --> 00:21:18,210
should have been in the first place so

00:21:14,880 --> 00:21:20,400
the organization is I've been in that

00:21:18,210 --> 00:21:22,500
managed to avert this issue have two

00:21:20,400 --> 00:21:25,410
things and only two things in common

00:21:22,500 --> 00:21:27,660
one is they have explicit ownership of

00:21:25,410 --> 00:21:30,300
issues are given an outage given a

00:21:27,660 --> 00:21:33,030
production issue someone owns that issue

00:21:30,300 --> 00:21:35,070
and the second thing is no matter how

00:21:33,030 --> 00:21:38,490
many people are involved in figuring and

00:21:35,070 --> 00:21:41,040
resolving the problem there is old there

00:21:38,490 --> 00:21:43,680
are explicitly defined well-known lines

00:21:41,040 --> 00:21:45,900
of communication and all them go through

00:21:43,680 --> 00:21:48,420
that one owner of the issue

00:21:45,900 --> 00:21:50,160
okay NASA does something similar with

00:21:48,420 --> 00:21:52,170
their space program or if you have

00:21:50,160 --> 00:21:54,330
astronauts in a capsule and Mission

00:21:52,170 --> 00:21:55,800
Control on the ground all communication

00:21:54,330 --> 00:21:57,450
between the two no matter how many

00:21:55,800 --> 00:21:59,510
astronauts are up there and no matter

00:21:57,450 --> 00:22:01,740
how many engineers are down here all

00:21:59,510 --> 00:22:04,050
communication goes through one person

00:22:01,740 --> 00:22:06,510
because that means everyone gets

00:22:04,050 --> 00:22:09,990
consistent information timely

00:22:06,510 --> 00:22:12,780
information in the same voice it solves

00:22:09,990 --> 00:22:13,830
a lot of issues so just make sure you

00:22:12,780 --> 00:22:16,260
have explicit

00:22:13,830 --> 00:22:18,060
incidents management explicit ownership

00:22:16,260 --> 00:22:21,870
and explicit lines of communication and

00:22:18,060 --> 00:22:24,150
don't let anyone anyone at all ever talk

00:22:21,870 --> 00:22:26,130
to anyone else without going through the

00:22:24,150 --> 00:22:28,440
issue owner engineers can talk among

00:22:26,130 --> 00:22:30,720
themselves executives and stakeholders

00:22:28,440 --> 00:22:33,300
can talk among themselves they don't get

00:22:30,720 --> 00:22:35,460
to talk to each other except by way of a

00:22:33,300 --> 00:22:37,530
single responsible person that is the

00:22:35,460 --> 00:22:39,690
only way this works and it's the only

00:22:37,530 --> 00:22:41,700
way that guarantees that your engineers

00:22:39,690 --> 00:22:45,480
can actually solve the problem and not

00:22:41,700 --> 00:22:48,000
have their heads explode so quick recap

00:22:45,480 --> 00:22:49,110
and then we're done do not make it

00:22:48,000 --> 00:22:51,360
impossible to break

00:22:49,110 --> 00:22:54,120
do not put artificial barriers in place

00:22:51,360 --> 00:22:56,730
do not consider failure to be an

00:22:54,120 --> 00:22:59,190
exception do not make your problems go

00:22:56,730 --> 00:23:00,810
away by rebooting and do not harass your

00:22:59,190 --> 00:23:04,800
to bet the buggers while they're under

00:23:00,810 --> 00:23:07,050
fire instead trust your engineers assume

00:23:04,800 --> 00:23:08,880
and plan for failure gather evidence

00:23:07,050 --> 00:23:10,950
before acting and certainly before

00:23:08,880 --> 00:23:13,620
rebooting before all that evidence is

00:23:10,950 --> 00:23:15,240
lost to the ether and invest in proper

00:23:13,620 --> 00:23:17,130
incident management procedures and

00:23:15,240 --> 00:23:19,620
explicit ownership and communication

00:23:17,130 --> 00:23:21,990
channels if you do these things you

00:23:19,620 --> 00:23:24,330
won't become rich necessarily but you

00:23:21,990 --> 00:23:27,360
stand a much greater chance of getting

00:23:24,330 --> 00:23:30,690
your system back up and avoiding the

00:23:27,360 --> 00:23:34,230
sort of disorder of availability loss

00:23:30,690 --> 00:23:36,660
that we all dread and with that I'm well

00:23:34,230 --> 00:23:39,380
out of time thank you very much have a

00:23:36,660 --> 00:23:39,380
great conference

00:23:40,960 --> 00:23:43,020
you

00:23:43,320 --> 00:23:48,440

YouTube URL: https://www.youtube.com/watch?v=zy4LNRxLkBI


