Title: The Treacherous Road Towards Multi-DNS - Daniel Mittelman
Publication date: 2020-01-12
Playlist: DevOpsDays Tel Aviv 2019
Description: 
	Albeit being a common industry practice, using the same service provider for network security and acceleration (i.e. DDoS mitigation, WAF, CDN) and for DNS can have adverse effects on a production environment when that provider is compromised. When Cloudflare went down for 27 minutes back in July, during peak time, we found ourselves completely helpless, and were resolved to make sure this doesn't happen again.

This talk will present the process that we've gone through in order migrate our production DNS zone to another provider, starting from the research process of electing a new provider that would suit our needs, through the creation of a playbook with clear checkpoints and a flashing "point-of-no-return" and with the actual execution of that playbook.

We would touch on key topics such as building a process that we can execute with confidence, including how to fully simulate a migration before actually doing it; how to use IaC tooling to manage DNS in a Multi-DNS architecture; how to monitor the progress of DNS propagation; and, what unexpected surprises we encountered along the way and how we solved them.
~/event sponsors
Captions: 
	00:00:00,440 --> 00:00:03,580
[Music]

00:00:04,700 --> 00:00:10,080
okay so good afternoon everybody

00:00:07,230 --> 00:00:12,480
if you haven't seated please sit down

00:00:10,080 --> 00:00:14,730
now we're gonna kick off this second

00:00:12,480 --> 00:00:18,210
part of today with my talk on the

00:00:14,730 --> 00:00:19,949
treacherous road towards multi DNS my

00:00:18,210 --> 00:00:22,080
name is Daniel middleman just a few

00:00:19,949 --> 00:00:24,150
words about myself in my current

00:00:22,080 --> 00:00:28,560
position I'm an infrastructure engineer

00:00:24,150 --> 00:00:31,080
at mind accom I used to be an analyst

00:00:28,560 --> 00:00:33,149
turned developer and eventually went to

00:00:31,080 --> 00:00:36,270
do into DevOps and stayed there ever

00:00:33,149 --> 00:00:38,340
since because it's awesome and I've been

00:00:36,270 --> 00:00:39,530
hoarding certifications for fun for the

00:00:38,340 --> 00:00:42,149
past few years

00:00:39,530 --> 00:00:44,250
not because it's any requirements of

00:00:42,149 --> 00:00:47,280
some sorts but I found out that if you

00:00:44,250 --> 00:00:49,500
want to learn a new subject and you

00:00:47,280 --> 00:00:51,690
actually want to persist then you should

00:00:49,500 --> 00:00:53,129
build a structure and a timeline for

00:00:51,690 --> 00:00:55,020
yourself so I learned that the best

00:00:53,129 --> 00:00:57,270
thing to date is just to commit to doing

00:00:55,020 --> 00:00:59,399
a professional certification you don't

00:00:57,270 --> 00:01:00,920
even have to go to the test you just

00:00:59,399 --> 00:01:05,640
need to persist with the certification

00:01:00,920 --> 00:01:07,080
so this is my tip to you so if your

00:01:05,640 --> 00:01:10,500
words about Monday - purpose what I'm

00:01:07,080 --> 00:01:13,860
going to talk about in the next last 39

00:01:10,500 --> 00:01:15,840
minutes is a few things about Monday so

00:01:13,860 --> 00:01:18,900
Monday is a building a team

00:01:15,840 --> 00:01:22,140
collaboration platform there are a few

00:01:18,900 --> 00:01:25,229
images on the right that shows you how

00:01:22,140 --> 00:01:28,770
the application looks like we've grown

00:01:25,229 --> 00:01:31,229
in about 6 or 7 years from 0 to 350,000

00:01:28,770 --> 00:01:33,840
weekly active users that are actually

00:01:31,229 --> 00:01:36,930
paying for the service and our customers

00:01:33,840 --> 00:01:38,220
are mostly in the US and in Europe I've

00:01:36,930 --> 00:01:41,100
been in Monday for three and a half

00:01:38,220 --> 00:01:42,810
years and I've had the I have the

00:01:41,100 --> 00:01:46,200
pleasure of seeing the company that

00:01:42,810 --> 00:01:48,270
grows ten times so I've tried to bring a

00:01:46,200 --> 00:01:51,390
proxy to to explain to you better how

00:01:48,270 --> 00:01:53,340
that lived from our side so I took the

00:01:51,390 --> 00:01:55,530
number of monthly user interactions that

00:01:53,340 --> 00:01:58,020
we have with the platform and I

00:01:55,530 --> 00:02:00,329
discovered that no matter what year you

00:01:58,020 --> 00:02:03,630
start from it only it always looks the

00:02:00,329 --> 00:02:06,990
same like this exponential spike and so

00:02:03,630 --> 00:02:09,810
it is one awesome but I hope that it

00:02:06,990 --> 00:02:11,879
allows me to explain the amount of

00:02:09,810 --> 00:02:13,500
challenges in terms of scale and

00:02:11,879 --> 00:02:16,590
reliability and available

00:02:13,500 --> 00:02:17,970
that we deal with on a on a daily basis

00:02:16,590 --> 00:02:21,840
but I think that the most relevant

00:02:17,970 --> 00:02:25,860
number for you at this stage is that we

00:02:21,840 --> 00:02:28,680
have 250 million DNS queries every month

00:02:25,860 --> 00:02:33,210
made by our customers to find our own

00:02:28,680 --> 00:02:35,460
service now 250 million DNS queries per

00:02:33,210 --> 00:02:38,100
month is a lot for a company the size of

00:02:35,460 --> 00:02:40,800
Monday for company 10 times the size of

00:02:38,100 --> 00:02:43,260
Monday this is still a lot I'm not gonna

00:02:40,800 --> 00:02:45,150
go into detail why we use DNA so

00:02:43,260 --> 00:02:48,420
massively but I just wanted to let you

00:02:45,150 --> 00:02:50,610
know the type of of challenges that we

00:02:48,420 --> 00:02:52,800
deal with DNS now this is not any

00:02:50,610 --> 00:02:55,680
different from any of you that have a

00:02:52,800 --> 00:02:57,360
public-facing service but this is

00:02:55,680 --> 00:03:00,600
something that is especially sensitive

00:02:57,360 --> 00:03:06,030
for us and this is why we have to treat

00:03:00,600 --> 00:03:07,830
DNS very very carefully so just a quick

00:03:06,030 --> 00:03:09,750
network overview of what happens when a

00:03:07,830 --> 00:03:11,270
user tries to access Monday and I'm

00:03:09,750 --> 00:03:14,550
gonna say at this point that we use

00:03:11,270 --> 00:03:17,400
CloudFlare now just by show of hands who

00:03:14,550 --> 00:03:19,620
here uses cloud sir or Akamai or replays

00:03:17,400 --> 00:03:22,470
or any of the other alternatives okay so

00:03:19,620 --> 00:03:25,080
quite up quite quite a few of you are

00:03:22,470 --> 00:03:27,720
using it so you might be familiar with

00:03:25,080 --> 00:03:29,790
this type of network topology so

00:03:27,720 --> 00:03:32,790
whenever a user wants to access our

00:03:29,790 --> 00:03:34,709
application they would first perform a

00:03:32,790 --> 00:03:36,150
DNS query I mean not down but their

00:03:34,709 --> 00:03:39,060
browser on their behalf through the

00:03:36,150 --> 00:03:41,940
operating system to find the IP address

00:03:39,060 --> 00:03:44,640
behind the domains so so first of all

00:03:41,940 --> 00:03:47,820
the computer would perform a DNS query

00:03:44,640 --> 00:03:50,040
it would go to the ISP or any other

00:03:47,820 --> 00:03:52,110
recursive DNS name server that has

00:03:50,040 --> 00:03:54,450
configured on their computer and it

00:03:52,110 --> 00:03:58,320
would then recursively try to resolve

00:03:54,450 --> 00:04:00,510
the the IP addresses so if you're just

00:03:58,320 --> 00:04:02,760
using basically an ask you this would be

00:04:00,510 --> 00:04:05,459
resolved to your own load balancer or

00:04:02,760 --> 00:04:08,220
external service in our case because we

00:04:05,459 --> 00:04:10,709
use CloudFlare and because all of the

00:04:08,220 --> 00:04:13,739
traffic is routed through cloud fairs

00:04:10,709 --> 00:04:16,470
edge network it is not resolved to our

00:04:13,739 --> 00:04:19,560
own network it is resolved to to anycast

00:04:16,470 --> 00:04:22,080
IP addresses that represent their edge

00:04:19,560 --> 00:04:24,810
network so this IP address would then

00:04:22,080 --> 00:04:26,729
lead the lead user to the closest

00:04:24,810 --> 00:04:27,320
CloudFlare point of presence or the

00:04:26,729 --> 00:04:29,300
closest

00:04:27,320 --> 00:04:32,420
server on the network that would allow

00:04:29,300 --> 00:04:35,470
communications to be with the lowest

00:04:32,420 --> 00:04:38,120
latency as possible from that point

00:04:35,470 --> 00:04:40,310
CloudFlare would then perform Tia last

00:04:38,120 --> 00:04:42,800
termination and that would allow them to

00:04:40,310 --> 00:04:45,020
do all the things that they provide for

00:04:42,800 --> 00:04:47,780
you as part of being a network security

00:04:45,020 --> 00:04:49,970
perimeter service for example DDoS

00:04:47,780 --> 00:04:51,290
mitigation and a web application

00:04:49,970 --> 00:04:52,640
firewall and rate limiting and

00:04:51,290 --> 00:04:54,650
content-based

00:04:52,640 --> 00:04:57,170
routing and content-based filtering and

00:04:54,650 --> 00:04:57,710
a whole host of other services that they

00:04:57,170 --> 00:05:00,500
offer

00:04:57,710 --> 00:05:02,390
they would then Rhian crypt that transit

00:05:00,500 --> 00:05:03,110
and would then send it to her own

00:05:02,390 --> 00:05:06,140
back-end

00:05:03,110 --> 00:05:09,020
and that would in turn be routed to an

00:05:06,140 --> 00:05:10,670
ec2 instance or a kubernetes workload or

00:05:09,020 --> 00:05:13,190
lambda function it doesn't matter

00:05:10,670 --> 00:05:15,380
the most critical part to understand at

00:05:13,190 --> 00:05:18,080
this point is that all of the traffic is

00:05:15,380 --> 00:05:21,890
routed through one of clusters points of

00:05:18,080 --> 00:05:23,360
presence so we've worked like this for a

00:05:21,890 --> 00:05:25,160
year and a half and this is actually

00:05:23,360 --> 00:05:27,020
what's called a best practice I mean

00:05:25,160 --> 00:05:29,690
when you sign up to cloud 4 and when you

00:05:27,020 --> 00:05:30,590
try to integrate their service with your

00:05:29,690 --> 00:05:32,420
application

00:05:30,590 --> 00:05:33,800
that's how if they tell you to do it

00:05:32,420 --> 00:05:37,100
they tell you go to our management

00:05:33,800 --> 00:05:40,220
console type in all of your DNS records

00:05:37,100 --> 00:05:42,620
I'll let us handle DNS for you and we

00:05:40,220 --> 00:05:44,900
will then resolve all of your queries to

00:05:42,620 --> 00:05:47,060
wherever they need it to be resolved and

00:05:44,900 --> 00:05:48,650
actually if you sign up to one of their

00:05:47,060 --> 00:05:51,080
lower tiers they're free or their

00:05:48,650 --> 00:05:52,850
businesses here this is the only way

00:05:51,080 --> 00:05:56,090
they're gonna let you do it so this is

00:05:52,850 --> 00:05:57,380
not an unusual setup so we have worked

00:05:56,090 --> 00:06:01,340
like this for a year and half and

00:05:57,380 --> 00:06:02,870
everything was great until July 2nd 2019

00:06:01,340 --> 00:06:06,800
and this is where our story begins

00:06:02,870 --> 00:06:09,820
because if this had worked until today I

00:06:06,800 --> 00:06:12,620
would have nothing to talk to you about

00:06:09,820 --> 00:06:15,860
so July 2nd and I still remember this

00:06:12,620 --> 00:06:19,370
day very vividly it was a Tuesday was

00:06:15,860 --> 00:06:20,870
around 3 p.m. and we were at the office

00:06:19,370 --> 00:06:24,110
money on business

00:06:20,870 --> 00:06:27,050
during the doing our things and 3 p.m.

00:06:24,110 --> 00:06:29,240
is usually when traffic and inbound

00:06:27,050 --> 00:06:31,400
traffic starts to go up because most of

00:06:29,240 --> 00:06:33,980
our client base is in Europe and in the

00:06:31,400 --> 00:06:36,350
US so 3 p.m. is around 7 a.m. in the

00:06:33,980 --> 00:06:38,120
East Coast and this is when people would

00:06:36,350 --> 00:06:39,960
start waking up and like opening the

00:06:38,120 --> 00:06:42,060
mobile app or opening

00:06:39,960 --> 00:06:44,190
our application on their web browser and

00:06:42,060 --> 00:06:47,490
like look through their agenda or their

00:06:44,190 --> 00:06:49,979
project so so this is how it would look

00:06:47,490 --> 00:06:52,229
like from their side from our side if

00:06:49,979 --> 00:06:54,180
you were Monday um load balancer this is

00:06:52,229 --> 00:06:56,970
how incoming traffic looks throughout

00:06:54,180 --> 00:06:58,789
today's so 3 p.m. is roughly around the

00:06:56,970 --> 00:07:03,600
time when we start to see traffic

00:06:58,789 --> 00:07:05,400
increase so it was a Tuesday around 3

00:07:03,600 --> 00:07:09,300
p.m. we were sitting at the office and

00:07:05,400 --> 00:07:11,250
suddenly we get a text message and a

00:07:09,300 --> 00:07:14,130
phone call and it push notification from

00:07:11,250 --> 00:07:16,860
pager duty letting us know that the home

00:07:14,130 --> 00:07:19,080
page is down now the home page for us is

00:07:16,860 --> 00:07:21,990
a critical asset because we invest a lot

00:07:19,080 --> 00:07:24,120
in only marketing and it is the face of

00:07:21,990 --> 00:07:27,000
our company but it's still not the

00:07:24,120 --> 00:07:29,190
application so it's not that bad so did

00:07:27,000 --> 00:07:30,539
we panic at this point well no because

00:07:29,190 --> 00:07:34,830
this is something that we can probably

00:07:30,539 --> 00:07:36,990
fix naturally a few seconds go by and we

00:07:34,830 --> 00:07:38,310
are bombarded with SMS messages and

00:07:36,990 --> 00:07:40,650
phone calls and pagers doing in

00:07:38,310 --> 00:07:42,900
artificial letting us know that

00:07:40,650 --> 00:07:45,659
everything is down so the application is

00:07:42,900 --> 00:07:47,130
down and the blog is down and something

00:07:45,659 --> 00:07:49,639
we have called man these stories is down

00:07:47,130 --> 00:07:51,539
and other external services that we have

00:07:49,639 --> 00:07:54,120
everything is down

00:07:51,539 --> 00:07:56,159
so naturally we scramble to our

00:07:54,120 --> 00:07:59,039
computers and we open a web browser and

00:07:56,159 --> 00:08:03,720
we go to Monday comm and we hit the

00:07:59,039 --> 00:08:05,250
enter key and we see this so this is not

00:08:03,720 --> 00:08:07,220
something that you want to see when

00:08:05,250 --> 00:08:11,820
you're in your production environment

00:08:07,220 --> 00:08:13,860
especially when it's peak time but we

00:08:11,820 --> 00:08:16,139
saw the little word that said cloud fair

00:08:13,860 --> 00:08:19,860
at the bottom so we knew that this 502

00:08:16,139 --> 00:08:21,599
came from clouds there so we didn't

00:08:19,860 --> 00:08:25,320
panic at this point because we know that

00:08:21,599 --> 00:08:26,849
sometimes in extreme cases clouds we

00:08:25,320 --> 00:08:29,370
might have a problem with one of our

00:08:26,849 --> 00:08:32,339
points of presence and they can reroute

00:08:29,370 --> 00:08:34,589
traffic automatically so in extreme

00:08:32,339 --> 00:08:36,810
cases they're not able to do this so

00:08:34,589 --> 00:08:38,490
what we can do instead we can go to

00:08:36,810 --> 00:08:40,560
their management console and turn off

00:08:38,490 --> 00:08:42,539
the reverse proxy capabilities so this

00:08:40,560 --> 00:08:45,060
is what we've only call the orange cloud

00:08:42,539 --> 00:08:47,160
so for every DNS record you can choose

00:08:45,060 --> 00:08:49,050
whether you want to proxy it or not so

00:08:47,160 --> 00:08:50,940
if they have a problem with their

00:08:49,050 --> 00:08:53,820
network we can just go to the management

00:08:50,940 --> 00:08:56,400
console type the click on the orange

00:08:53,820 --> 00:08:58,710
cloud turn it into a gray cloud which

00:08:56,400 --> 00:09:01,950
means that reverse proxy capabilities

00:08:58,710 --> 00:09:04,590
are off so DDoS is often wofe is off and

00:09:01,950 --> 00:09:06,330
everything is off along the way and then

00:09:04,590 --> 00:09:08,940
our DNS records would be resolved

00:09:06,330 --> 00:09:12,450
directly to our V PC directly to our

00:09:08,940 --> 00:09:14,550
load balancer so we are giving up some

00:09:12,450 --> 00:09:18,870
security capabilities but it's much

00:09:14,550 --> 00:09:20,340
better than like being down so we

00:09:18,870 --> 00:09:22,620
weren't panicked at this point and we

00:09:20,340 --> 00:09:25,380
realize that this is all we had to do so

00:09:22,620 --> 00:09:29,610
we went on the cloud Fred common website

00:09:25,380 --> 00:09:32,760
and then we realized that not only is

00:09:29,610 --> 00:09:36,000
their entire network down but their

00:09:32,760 --> 00:09:39,300
website and their API are also down

00:09:36,000 --> 00:09:43,050
because they use the same network to

00:09:39,300 --> 00:09:45,570
route traffic into their website so we

00:09:43,050 --> 00:09:47,250
realized at this point that everything

00:09:45,570 --> 00:09:49,110
on our site is up like our load

00:09:47,250 --> 00:09:51,180
balancers are up and the application and

00:09:49,110 --> 00:09:54,690
our kubernetes workloads and everything

00:09:51,180 --> 00:09:57,450
is up except for the fact that manda

00:09:54,690 --> 00:10:00,030
comm is globally down and there is

00:09:57,450 --> 00:10:00,330
absolutely nothing that we can do about

00:10:00,030 --> 00:10:02,430
it

00:10:00,330 --> 00:10:05,280
so we started thinking that naturally

00:10:02,430 --> 00:10:07,020
what can we do so how about we delegate

00:10:05,280 --> 00:10:09,810
our DNS to another provider but that

00:10:07,020 --> 00:10:11,250
takes hours or even days so we're not

00:10:09,810 --> 00:10:13,680
going to do it especially if this is

00:10:11,250 --> 00:10:15,390
going to be resolved in a few hours so

00:10:13,680 --> 00:10:17,220
we sat down and we realized that there's

00:10:15,390 --> 00:10:19,950
basically nothing that we can do and we

00:10:17,220 --> 00:10:22,890
just sat down at the office looked at

00:10:19,950 --> 00:10:26,340
the screen and waited for cloud sphere

00:10:22,890 --> 00:10:30,030
to regain service and ended if after 27

00:10:26,340 --> 00:10:32,880
minutes the issue was fixed and our

00:10:30,030 --> 00:10:34,800
application was partially available and

00:10:32,880 --> 00:10:38,010
it took about two hours to gain full

00:10:34,800 --> 00:10:39,960
availability so we stopped at this point

00:10:38,010 --> 00:10:42,480
and we said I said well we've done

00:10:39,960 --> 00:10:43,980
everything so far according to industry

00:10:42,480 --> 00:10:46,800
standards we've done everything

00:10:43,980 --> 00:10:49,230
according to best practice and still we

00:10:46,800 --> 00:10:51,680
were down so basically that means that

00:10:49,230 --> 00:10:54,990
something in this process is wrong and

00:10:51,680 --> 00:10:58,320
so we set along with ourselves and we

00:10:54,990 --> 00:11:00,390
thought ok so if we were to draw a new

00:10:58,320 --> 00:11:02,280
industry center for ourselves how would

00:11:00,390 --> 00:11:05,760
it look like and then we decided to

00:11:02,280 --> 00:11:07,120
agree upon three axioms so the first one

00:11:05,760 --> 00:11:09,730
is the DNA

00:11:07,120 --> 00:11:11,950
and reverse proxies should be managed by

00:11:09,730 --> 00:11:13,839
different providers and must be hosted

00:11:11,950 --> 00:11:16,570
on different physical infrastructure it

00:11:13,839 --> 00:11:18,730
might sound a bit banal but actually if

00:11:16,570 --> 00:11:20,560
you work with clouds fear or Akamai or

00:11:18,730 --> 00:11:23,170
some of their competitors there is a

00:11:20,560 --> 00:11:25,000
high chance you're not doing that and I

00:11:23,170 --> 00:11:27,910
hope that my little story explained why

00:11:25,000 --> 00:11:30,100
this is true the second one is and this

00:11:27,910 --> 00:11:32,680
is something that all managers of DNS

00:11:30,100 --> 00:11:34,540
servers know by heart is the DNS

00:11:32,680 --> 00:11:37,690
networks are constantly under attack

00:11:34,540 --> 00:11:39,580
just go to google and type in DDoS DNS

00:11:37,690 --> 00:11:40,420
you will find a host of stories from

00:11:39,580 --> 00:11:42,970
recent years

00:11:40,420 --> 00:11:45,040
speaking about DNS networks pinging down

00:11:42,970 --> 00:11:47,710
because they were targeted by a DDoS

00:11:45,040 --> 00:11:50,860
attack the Dukedom even days or even

00:11:47,710 --> 00:11:53,050
weeks at a time and this means that if

00:11:50,860 --> 00:11:55,450
the network is down you are down because

00:11:53,050 --> 00:11:59,830
your authoritative DNS servers are also

00:11:55,450 --> 00:12:03,310
done so no one can find you so we agree

00:11:59,830 --> 00:12:05,140
on those two things and one little thing

00:12:03,310 --> 00:12:09,250
that I wanted to add which is axiom

00:12:05,140 --> 00:12:11,350
number three if the DNS is key you can

00:12:09,250 --> 00:12:14,290
go ahead and you can build your multi

00:12:11,350 --> 00:12:15,910
multi region fault tolerant redundant

00:12:14,290 --> 00:12:18,670
resilient whatever you want to call it

00:12:15,910 --> 00:12:20,890
the infrastructure within your own cloud

00:12:18,670 --> 00:12:23,830
provider or on-premise deployment

00:12:20,890 --> 00:12:25,779
whatever you use but as long as DNS that

00:12:23,830 --> 00:12:28,270
points your customers to your

00:12:25,779 --> 00:12:30,970
application is down it doesn't matter

00:12:28,270 --> 00:12:31,810
how much effort you put into your own

00:12:30,970 --> 00:12:34,060
infrastructure

00:12:31,810 --> 00:12:36,339
if DNS is down you are down and your

00:12:34,060 --> 00:12:38,470
customers doesn't care your customers

00:12:36,339 --> 00:12:40,209
don't care why you're down for them

00:12:38,470 --> 00:12:44,290
you're down because you haven't done

00:12:40,209 --> 00:12:46,000
something right so we've built a

00:12:44,290 --> 00:12:47,890
proposal and plan which is build on

00:12:46,000 --> 00:12:49,779
those axioms and the first one is to

00:12:47,890 --> 00:12:51,730
move DNS to a different provider this is

00:12:49,779 --> 00:12:54,360
based on first axiom that we want to

00:12:51,730 --> 00:12:57,070
separate reverse proxy from DNS the

00:12:54,360 --> 00:12:59,140
second would be to introduce a second

00:12:57,070 --> 00:13:01,330
provider for redundancy because again

00:12:59,140 --> 00:13:06,250
DNS networks are constantly being

00:13:01,330 --> 00:13:07,930
attacked and profit so I'm gonna get

00:13:06,250 --> 00:13:10,720
into more of the technicals now but

00:13:07,930 --> 00:13:12,910
before then I want to introduce the main

00:13:10,720 --> 00:13:16,079
term that we're gonna talk about which

00:13:12,910 --> 00:13:19,600
is multi DNS which simply means an

00:13:16,079 --> 00:13:20,620
architecture that utilizes authoritative

00:13:19,600 --> 00:13:24,010
nameserver

00:13:20,620 --> 00:13:26,740
from two or more providers so you take

00:13:24,010 --> 00:13:28,480
multiple network providers multiple DNS

00:13:26,740 --> 00:13:30,610
providers and you use multiple at the

00:13:28,480 --> 00:13:34,780
same time to ensure that you're always

00:13:30,610 --> 00:13:36,610
up even when one of them is down now DNS

00:13:34,780 --> 00:13:39,190
providers usually incorporate

00:13:36,610 --> 00:13:40,690
multi-region multi easy they incorporate

00:13:39,190 --> 00:13:43,000
that because they know they're gonna be

00:13:40,690 --> 00:13:45,700
attacked all the time so when you

00:13:43,000 --> 00:13:48,760
register with a DNS provider it can be

00:13:45,700 --> 00:13:51,790
route 53 or it can be closer themselves

00:13:48,760 --> 00:13:53,890
it can be any of the other dozens of DNS

00:13:51,790 --> 00:13:57,220
providers out there you usually get a

00:13:53,890 --> 00:14:00,430
set of name servers and this is because

00:13:57,220 --> 00:14:02,620
they rely on the fact that at some point

00:14:00,430 --> 00:14:04,330
one of them is gonna be down so this

00:14:02,620 --> 00:14:06,640
would allow them to have internal

00:14:04,330 --> 00:14:09,820
redundancy and allow you to enjoy that

00:14:06,640 --> 00:14:11,710
as well but what happens if the entire

00:14:09,820 --> 00:14:14,440
network is done because if someone

00:14:11,710 --> 00:14:17,140
chooses to target a DNS provider as a

00:14:14,440 --> 00:14:18,610
whole they're gonna target all of those

00:14:17,140 --> 00:14:20,980
name servers at once they're going to

00:14:18,610 --> 00:14:22,890
attack all of them at once so if they're

00:14:20,980 --> 00:14:26,110
targeted everything is gonna be down

00:14:22,890 --> 00:14:28,240
using multiple providers allows you to

00:14:26,110 --> 00:14:30,400
ensure that even if one of them is down

00:14:28,240 --> 00:14:32,860
you still have enough name servers that

00:14:30,400 --> 00:14:37,480
should be up to enable you to keep your

00:14:32,860 --> 00:14:40,090
availability so we haven't invented a

00:14:37,480 --> 00:14:41,560
cust the we haven't invented multi DNS

00:14:40,090 --> 00:14:44,050
there are lots of companies that are

00:14:41,560 --> 00:14:46,870
already doing this with their own

00:14:44,050 --> 00:14:49,810
infrastructure so if you look at Airbnb

00:14:46,870 --> 00:14:51,790
and Adobe and Spotify and even Amazon

00:14:49,810 --> 00:14:53,830
themselves you will see that if you

00:14:51,790 --> 00:14:55,930
perform a dig and ask command in your

00:14:53,830 --> 00:14:59,850
computer that would resolve with their

00:14:55,930 --> 00:15:02,740
NS records you will see DNS providers

00:14:59,850 --> 00:15:05,980
multiple DNS providers within their list

00:15:02,740 --> 00:15:07,510
of name servers so if you if you want to

00:15:05,980 --> 00:15:09,340
probe like one website and see if

00:15:07,510 --> 00:15:11,350
they're already implementing multi DNS

00:15:09,340 --> 00:15:13,540
you can just run this command at the top

00:15:11,350 --> 00:15:16,570
and you can see if they are doing it if

00:15:13,540 --> 00:15:19,810
you do dig the big NS on Monday com you

00:15:16,570 --> 00:15:22,600
will see of course two providers

00:15:19,810 --> 00:15:24,730
so there are multiple strategies to

00:15:22,600 --> 00:15:26,800
implement multi DNS I'm not gonna go

00:15:24,730 --> 00:15:28,990
into all of them I will I will go into

00:15:26,800 --> 00:15:30,220
the third and less one of them which is

00:15:28,990 --> 00:15:32,560
the one that we've gone through

00:15:30,220 --> 00:15:33,670
eventually which is called primary

00:15:32,560 --> 00:15:35,620
primary

00:15:33,670 --> 00:15:38,490
and in this configuration whenever a

00:15:35,620 --> 00:15:40,960
customer of yours wants to resolve your

00:15:38,490 --> 00:15:44,410
your hostname through the DNS network

00:15:40,960 --> 00:15:46,690
they would send a DNS query usually to

00:15:44,410 --> 00:15:48,760
their ISP or whatever DNS server is

00:15:46,690 --> 00:15:51,280
configured on their network or on their

00:15:48,760 --> 00:15:53,380
computer and that in turn will

00:15:51,280 --> 00:15:55,780
recursively look for the authoritative

00:15:53,380 --> 00:15:57,880
name servers and if you have multiple

00:15:55,780 --> 00:16:00,130
name servers from multiple providers one

00:15:57,880 --> 00:16:03,340
will be chosen at random and will be

00:16:00,130 --> 00:16:05,440
queried so if one of them is down it

00:16:03,340 --> 00:16:08,710
would just go through the list until it

00:16:05,440 --> 00:16:11,200
finds a live one that would respond so

00:16:08,710 --> 00:16:14,650
this configuration allows us to ensure

00:16:11,200 --> 00:16:16,450
that first of all you have multiple

00:16:14,650 --> 00:16:19,210
providers but second of all they are

00:16:16,450 --> 00:16:21,340
completely unaware of one another so one

00:16:19,210 --> 00:16:23,560
provider cannot influence the second one

00:16:21,340 --> 00:16:25,900
in any way because they are completely

00:16:23,560 --> 00:16:29,560
oblivious to the existence of the second

00:16:25,900 --> 00:16:31,450
one now if you want to update a DNS

00:16:29,560 --> 00:16:33,580
record in this configuration it is your

00:16:31,450 --> 00:16:36,640
responsibility as the admin to go to

00:16:33,580 --> 00:16:38,670
both providers go to that DNS record and

00:16:36,640 --> 00:16:42,460
then update it manually

00:16:38,670 --> 00:16:44,740
now while this approach has many pros it

00:16:42,460 --> 00:16:48,190
still presents a very significant

00:16:44,740 --> 00:16:52,210
challenge which is how do we keep two

00:16:48,190 --> 00:16:54,970
DNS providers that as I said do not even

00:16:52,210 --> 00:16:57,550
recognize the existing the existence of

00:16:54,970 --> 00:16:59,830
one another how do you keep them in sync

00:16:57,550 --> 00:17:02,590
how can we ensure that we are never

00:16:59,830 --> 00:17:04,270
having any discrepancy between the

00:17:02,590 --> 00:17:08,680
responses returned from those two

00:17:04,270 --> 00:17:12,190
providers or if we rephrase how can we

00:17:08,680 --> 00:17:13,900
establish a single source of truth so

00:17:12,190 --> 00:17:17,320
that is a question that we are presented

00:17:13,900 --> 00:17:19,330
with when we built this this strategy

00:17:17,320 --> 00:17:23,350
and of course I'm going to answer it in

00:17:19,330 --> 00:17:25,840
in a few minutes so I'm glad to share

00:17:23,350 --> 00:17:29,830
with you all that we have done this

00:17:25,840 --> 00:17:32,110
migration we have moved to multi DNS we

00:17:29,830 --> 00:17:34,510
have moved out of clouds whereas a

00:17:32,110 --> 00:17:37,600
primary DNS provider and moved into

00:17:34,510 --> 00:17:40,090
multiple DNS providers in our case we've

00:17:37,600 --> 00:17:42,400
used an s-1 and Kinsella

00:17:40,090 --> 00:17:44,320
but this is relevant to any multiple DNS

00:17:42,400 --> 00:17:46,080
providers that you may choose to move

00:17:44,320 --> 00:17:49,789
your architecture into

00:17:46,080 --> 00:17:52,350
we have summarized I think the most key

00:17:49,789 --> 00:17:54,539
elements of the migration into the five

00:17:52,350 --> 00:17:57,000
principle of the successful migration to

00:17:54,539 --> 00:18:02,190
multi DNS which I am happy to share with

00:17:57,000 --> 00:18:04,470
you today so the five principle are sync

00:18:02,190 --> 00:18:07,789
your team and restrict manual updates

00:18:04,470 --> 00:18:10,850
use inference column for zone management

00:18:07,789 --> 00:18:14,179
create your own recursive DNS server

00:18:10,850 --> 00:18:16,919
create a playbook for the migration and

00:18:14,179 --> 00:18:18,990
perform a dry run test in a test

00:18:16,919 --> 00:18:22,860
environment we're gonna go into each and

00:18:18,990 --> 00:18:26,399
every one of those now so the first one

00:18:22,860 --> 00:18:29,370
is to sync your team which might sound a

00:18:26,399 --> 00:18:31,649
bit obvious at this point but if you

00:18:29,370 --> 00:18:33,510
have multiple entities within your

00:18:31,649 --> 00:18:36,330
company or within your team that are

00:18:33,510 --> 00:18:38,519
performing dns updates it's crucial that

00:18:36,330 --> 00:18:41,669
once you start your migration you keep

00:18:38,519 --> 00:18:43,710
everyone at sync and you ask them to

00:18:41,669 --> 00:18:45,419
perform those changes through you

00:18:43,710 --> 00:18:48,299
because during the migration you might

00:18:45,419 --> 00:18:50,399
have multiple DNS providers live and you

00:18:48,299 --> 00:18:53,309
need those updates to be consistent

00:18:50,399 --> 00:18:55,230
across all of your providers so everyone

00:18:53,309 --> 00:18:57,090
needs to be aware of the changes that

00:18:55,230 --> 00:18:59,639
you're making when you're gonna start

00:18:57,090 --> 00:19:01,470
and when they're gonna end and once

00:18:59,639 --> 00:19:03,779
everyone is it sync you can even take it

00:19:01,470 --> 00:19:07,260
a step further and restrict manual

00:19:03,779 --> 00:19:10,380
updates so just go into the DNS provider

00:19:07,260 --> 00:19:12,000
that that you're using and just take

00:19:10,380 --> 00:19:14,789
away everyone's permissions this might

00:19:12,000 --> 00:19:16,919
be the the easiest way to do it and

00:19:14,789 --> 00:19:19,049
again ask everyone to perform all the

00:19:16,919 --> 00:19:21,210
changes they need through you now this

00:19:19,049 --> 00:19:22,860
applies to both manual changes and of

00:19:21,210 --> 00:19:24,779
course it applies to automatic changes

00:19:22,860 --> 00:19:27,360
if you have automated processes that

00:19:24,779 --> 00:19:29,940
perform DNS changes for example if you

00:19:27,360 --> 00:19:33,059
have a blue-green deployment that uses

00:19:29,940 --> 00:19:35,309
DNS to redirect traffic between the blue

00:19:33,059 --> 00:19:38,130
and the green team deploy in the green

00:19:35,309 --> 00:19:39,929
group then just keep in mind that any

00:19:38,130 --> 00:19:42,210
change that you make to your existing

00:19:39,929 --> 00:19:43,740
DNS provider must be reflected within

00:19:42,210 --> 00:19:46,320
the newer ones that you're gonna

00:19:43,740 --> 00:19:48,299
transfer to so that little thing that

00:19:46,320 --> 00:19:51,120
you used to do until now if this is how

00:19:48,299 --> 00:19:54,990
you use to manage DNS so don't do it

00:19:51,120 --> 00:19:57,990
anymore the second part is to use

00:19:54,990 --> 00:19:59,610
infrastructure as code to manage DNS and

00:19:57,990 --> 00:20:03,240
this is a big one

00:19:59,610 --> 00:20:05,250
we have all or hopefully most of us have

00:20:03,240 --> 00:20:07,440
done this process with how we manage

00:20:05,250 --> 00:20:10,020
infrastructure I assume that most of you

00:20:07,440 --> 00:20:11,730
are using terraform opelu me or

00:20:10,020 --> 00:20:14,130
CloudFormation or any of the other

00:20:11,730 --> 00:20:16,530
available tools out there to manage your

00:20:14,130 --> 00:20:19,860
infrastructure in a reviewable I'm an

00:20:16,530 --> 00:20:22,770
auditable and a traceable way so

00:20:19,860 --> 00:20:26,010
terraform does have a few very good

00:20:22,770 --> 00:20:28,430
providers with integrations with major

00:20:26,010 --> 00:20:31,080
cloud providers and other ones as well

00:20:28,430 --> 00:20:33,180
who Louie does work well with major

00:20:31,080 --> 00:20:35,640
cloud providers but we were looking for

00:20:33,180 --> 00:20:37,940
something a bit more specialized so we

00:20:35,640 --> 00:20:40,890
went on a hunt and we found opto DNS

00:20:37,940 --> 00:20:44,130
which is a relatively new open-source

00:20:40,890 --> 00:20:46,530
tool that you can find on github that is

00:20:44,130 --> 00:20:49,290
built on a very simple premise you have

00:20:46,530 --> 00:20:52,560
a single source and you have multiple

00:20:49,290 --> 00:20:54,330
targets and after DNS is the component

00:20:52,560 --> 00:20:56,430
that stands in a mill and allows you to

00:20:54,330 --> 00:20:58,890
make sure that one source of truth is

00:20:56,430 --> 00:21:02,100
always reflected into your multiple

00:20:58,890 --> 00:21:04,290
targets so on the left you select your

00:21:02,100 --> 00:21:07,050
source truth wherever you want to manage

00:21:04,290 --> 00:21:08,820
your DNS records it can be another DNS

00:21:07,050 --> 00:21:10,910
provider if you want to perform a live

00:21:08,820 --> 00:21:13,560
migration from one provider to another

00:21:10,910 --> 00:21:17,160
this is something I don't recommend that

00:21:13,560 --> 00:21:19,440
you do other than that you can use a

00:21:17,160 --> 00:21:22,440
llamó file to manage and list all of

00:21:19,440 --> 00:21:25,050
your records or you can even use a binds

00:21:22,440 --> 00:21:28,410
own file or a bind compatible DNS

00:21:25,050 --> 00:21:31,110
provider so you list all of your records

00:21:28,410 --> 00:21:33,030
in one single file you plug it into up

00:21:31,110 --> 00:21:34,740
to DNS and then you define your targets

00:21:33,030 --> 00:21:36,240
now your targets can be a single DNS

00:21:34,740 --> 00:21:38,940
provider it can be multiple DNS

00:21:36,240 --> 00:21:41,220
providers or for some reason it can also

00:21:38,940 --> 00:21:47,850
be a yellow file because we all have

00:21:41,220 --> 00:21:51,120
llamo okay so a few good things about

00:21:47,850 --> 00:21:53,280
about up to DNS so as of today it

00:21:51,120 --> 00:21:55,080
supports sixteen different DNS providers

00:21:53,280 --> 00:21:57,240
so you basically have a free choice of

00:21:55,080 --> 00:21:59,640
what DNS providers you want to work with

00:21:57,240 --> 00:22:01,950
it of course supports a major cloud

00:21:59,640 --> 00:22:04,500
providers you have route 53 you have the

00:22:01,950 --> 00:22:06,740
DNS of Azure and of Google and you have

00:22:04,500 --> 00:22:09,870
a whole host of other providers as well

00:22:06,740 --> 00:22:11,910
the way up to DNS works and this is if

00:22:09,870 --> 00:22:13,080
you have work with with terraform for

00:22:11,910 --> 00:22:15,030
example it worth

00:22:13,080 --> 00:22:16,890
in a very similar way it computes the

00:22:15,030 --> 00:22:20,580
diff between the sources you have

00:22:16,890 --> 00:22:22,080
defined with your targets now if your

00:22:20,580 --> 00:22:23,670
targets are out of sync

00:22:22,080 --> 00:22:26,190
that diff is going to be different but

00:22:23,670 --> 00:22:28,320
it doesn't matter because up to DNS will

00:22:26,190 --> 00:22:31,020
compute the steps required to perform on

00:22:28,320 --> 00:22:33,360
each of your providers separately to

00:22:31,020 --> 00:22:35,520
ensure that at the end those two

00:22:33,360 --> 00:22:38,400
providers are completely in sync with

00:22:35,520 --> 00:22:40,710
the source that you have defined so if

00:22:38,400 --> 00:22:42,990
for some reason someone goes into one of

00:22:40,710 --> 00:22:45,390
the management consoles online of one of

00:22:42,990 --> 00:22:47,850
those providers and performs a manual

00:22:45,390 --> 00:22:49,590
change you can use up to DNS to detect

00:22:47,850 --> 00:22:53,340
that change and you can align those two

00:22:49,590 --> 00:22:56,250
providers or even more than two to your

00:22:53,340 --> 00:22:58,950
define source of truth and of course as

00:22:56,250 --> 00:23:00,630
any inference code tool your zone file

00:22:58,950 --> 00:23:02,910
can be committed to source control it

00:23:00,630 --> 00:23:04,730
can go through the all of the sort all

00:23:02,910 --> 00:23:08,070
of the procedures that you're doing on

00:23:04,730 --> 00:23:11,070
on source control now like code reviews

00:23:08,070 --> 00:23:13,140
and auditing and histories and revert

00:23:11,070 --> 00:23:16,170
everything that you gain from working

00:23:13,140 --> 00:23:19,560
with IAC today you can get from the NSS

00:23:16,170 --> 00:23:22,290
code so here is an example of how a zone

00:23:19,560 --> 00:23:23,820
file for Optive enos might look like so

00:23:22,290 --> 00:23:27,150
you recognize the familiar

00:23:23,820 --> 00:23:29,670
yamo structure as for so in this example

00:23:27,150 --> 00:23:31,620
we have two subdomains the first one is

00:23:29,670 --> 00:23:34,650
the zone apex which is the Monday

00:23:31,620 --> 00:23:37,980
dot-com part and in this case we have

00:23:34,650 --> 00:23:41,040
set it to use a cloud for a CloudFront

00:23:37,980 --> 00:23:43,640
distribution and the second part is the

00:23:41,040 --> 00:23:46,050
email subdomain which has two different

00:23:43,640 --> 00:23:48,270
records one of them is an a record that

00:23:46,050 --> 00:23:50,820
might serve a static web page or an

00:23:48,270 --> 00:23:53,190
application and the second one is the MX

00:23:50,820 --> 00:23:55,260
record which would alight would allow

00:23:53,190 --> 00:23:59,040
you to use that subdomain as an email

00:23:55,260 --> 00:24:01,380
provider so a few good things to look at

00:23:59,040 --> 00:24:03,090
when looking at this file structure is

00:24:01,380 --> 00:24:05,790
the first one you can use comments like

00:24:03,090 --> 00:24:09,000
any under Yama file I don't know if

00:24:05,790 --> 00:24:12,210
you've ever received a zone file or a

00:24:09,000 --> 00:24:14,610
DNS zone from someone else but when I

00:24:12,210 --> 00:24:17,630
started working on the DNS of Monday

00:24:14,610 --> 00:24:21,690
comm which was managed for many years

00:24:17,630 --> 00:24:25,320
back into history we've had about 95

00:24:21,690 --> 00:24:26,270
records and I think about 80 of those I

00:24:25,320 --> 00:24:29,120
did not wreck

00:24:26,270 --> 00:24:32,150
nice I had no idea why there were why

00:24:29,120 --> 00:24:34,340
they were even there who is responsible

00:24:32,150 --> 00:24:36,770
for them and whether I can remove them

00:24:34,340 --> 00:24:40,309
safely when moving many performed the

00:24:36,770 --> 00:24:44,480
migration now ninety records might be a

00:24:40,309 --> 00:24:46,850
lot for others it might be very little I

00:24:44,480 --> 00:24:50,330
assume that some of you might have dealt

00:24:46,850 --> 00:24:53,630
with zone files or zones hundreds of

00:24:50,330 --> 00:24:56,990
records longer so using comments allows

00:24:53,630 --> 00:25:00,740
you to explain exactly why this DNS

00:24:56,990 --> 00:25:02,300
record exists who place it there and if

00:25:00,740 --> 00:25:04,400
it should be removed in the future

00:25:02,300 --> 00:25:06,650
because it might might belong to like a

00:25:04,400 --> 00:25:09,140
temporary migration or something that is

00:25:06,650 --> 00:25:10,640
irrelevant from some point in the future

00:25:09,140 --> 00:25:12,730
and of course if you use source control

00:25:10,640 --> 00:25:16,730
that you can also use a commit message

00:25:12,730 --> 00:25:19,280
the second part is that the source file

00:25:16,730 --> 00:25:21,350
of octa DNS groups records under the

00:25:19,280 --> 00:25:23,660
same sub domains you have if you have

00:25:21,350 --> 00:25:26,120
multiple records of different types that

00:25:23,660 --> 00:25:28,190
belong to the same sub domain up to DNS

00:25:26,120 --> 00:25:29,960
would automatically group those under

00:25:28,190 --> 00:25:32,780
the same sub domains so it is much

00:25:29,960 --> 00:25:34,940
easier to look through and the second

00:25:32,780 --> 00:25:38,660
and the third part is that because up to

00:25:34,940 --> 00:25:40,820
DNS is a specific tool for managing DNS

00:25:38,660 --> 00:25:43,340
you can have vendor specific features

00:25:40,820 --> 00:25:45,530
for example in this in this example

00:25:43,340 --> 00:25:48,140
because we're still using clouds there

00:25:45,530 --> 00:25:50,390
to protect our environment you can have

00:25:48,140 --> 00:25:52,850
a specific annotation to tell up to

00:25:50,390 --> 00:25:55,520
Dinah's you control whether that records

00:25:52,850 --> 00:25:57,890
is going to be proxied or not so that's

00:25:55,520 --> 00:26:00,890
pretty cool

00:25:57,890 --> 00:26:03,740
the third step is to build your own DNS

00:26:00,890 --> 00:26:06,260
testing servers so a DNS migration might

00:26:03,740 --> 00:26:08,750
be based on taking a set of DNS records

00:26:06,260 --> 00:26:10,880
and taking them from provider a to

00:26:08,750 --> 00:26:12,530
provider B so by copying the records

00:26:10,880 --> 00:26:15,290
into new provider we naturally assume

00:26:12,530 --> 00:26:16,910
that everything is gonna move the same

00:26:15,290 --> 00:26:19,100
way and a new provider is gonna work

00:26:16,910 --> 00:26:22,790
exactly the same as a previous one

00:26:19,100 --> 00:26:24,980
but how can we prove it because for

00:26:22,790 --> 00:26:27,020
example if you use cloud sir or Akamai

00:26:24,980 --> 00:26:30,020
or some other DNS provider then

00:26:27,020 --> 00:26:33,740
incorporates security features into

00:26:30,020 --> 00:26:36,080
their set of services then you might not

00:26:33,740 --> 00:26:39,020
get the exact same response that your

00:26:36,080 --> 00:26:40,160
spirit that you expect when you perform

00:26:39,020 --> 00:26:43,730
that query one

00:26:40,160 --> 00:26:45,920
might be DDoS protection you do not get

00:26:43,730 --> 00:26:47,930
the exact same IP address because you

00:26:45,920 --> 00:26:50,720
are redirected to the edge network

00:26:47,930 --> 00:26:55,060
rather than your back-end other examples

00:26:50,720 --> 00:26:59,030
might include HTTP HTTP to HTTPS

00:26:55,060 --> 00:27:02,420
redirection which you might receive a

00:26:59,030 --> 00:27:04,520
different response than you may expect

00:27:02,420 --> 00:27:07,190
and there are many other use cases that

00:27:04,520 --> 00:27:09,620
you might not receive the response that

00:27:07,190 --> 00:27:12,110
you expect to receive when querying your

00:27:09,620 --> 00:27:14,240
DNS provider so we need to find a way to

00:27:12,110 --> 00:27:16,880
prove that once the migration is done

00:27:14,240 --> 00:27:18,920
then everything is going to be fine and

00:27:16,880 --> 00:27:22,610
we're gonna get the same response as we

00:27:18,920 --> 00:27:24,680
did before so we thought about it and

00:27:22,610 --> 00:27:27,440
the best way that we could find prove it

00:27:24,680 --> 00:27:30,500
is to build our own custom recursive DNS

00:27:27,440 --> 00:27:32,870
server and that part takes about five

00:27:30,500 --> 00:27:35,570
minutes so we're gonna dive into that

00:27:32,870 --> 00:27:37,730
for three minutes and it's it's really

00:27:35,570 --> 00:27:41,270
much easier than we had thought on

00:27:37,730 --> 00:27:43,780
initially so what we want to simulate in

00:27:41,270 --> 00:27:46,160
this part is to create our own new

00:27:43,780 --> 00:27:48,340
recursive DNS server that you can set up

00:27:46,160 --> 00:27:51,440
on your computer your computer would

00:27:48,340 --> 00:27:53,810
continue working just fine so if you

00:27:51,440 --> 00:27:56,300
perform a DNS query to find a site like

00:27:53,810 --> 00:27:58,160
cnn.com or google.com or any other

00:27:56,300 --> 00:28:01,310
website that is not related to your

00:27:58,160 --> 00:28:03,880
migration then that DNS would

00:28:01,310 --> 00:28:08,200
recursively ask another DNS server like

00:28:03,880 --> 00:28:11,750
888 which is Google's public DNS service

00:28:08,200 --> 00:28:14,360
but if we were to query our own specific

00:28:11,750 --> 00:28:16,070
domain I don't want to get the response

00:28:14,360 --> 00:28:18,680
that I would have gotten from my old

00:28:16,070 --> 00:28:21,110
provider I want to be redirected to my

00:28:18,680 --> 00:28:23,720
new provider and simulated a situation

00:28:21,110 --> 00:28:27,950
where the migration is already completed

00:28:23,720 --> 00:28:30,440
and in that way I would then require my

00:28:27,950 --> 00:28:32,870
DNS server to use the upstream server

00:28:30,440 --> 00:28:34,850
that is my new DNS provider to get the

00:28:32,870 --> 00:28:37,310
response and using that I can actually

00:28:34,850 --> 00:28:40,460
feel I can actually use that on my

00:28:37,310 --> 00:28:42,610
computer or configure that in in core

00:28:40,460 --> 00:28:46,220
DNS for example if you use kubernetes or

00:28:42,610 --> 00:28:48,830
just set it up on on a bare-bones server

00:28:46,220 --> 00:28:50,480
and see what type of responses you get

00:28:48,830 --> 00:28:52,460
and whether your application keeps

00:28:50,480 --> 00:28:53,200
working after but the migration is done

00:28:52,460 --> 00:28:55,240
with

00:28:53,200 --> 00:28:58,929
out you actually having to delegate your

00:28:55,240 --> 00:29:01,240
domain to the new provider so to do that

00:28:58,929 --> 00:29:03,880
all you need to do as just a few steps

00:29:01,240 --> 00:29:05,679
you launch a VM you install bind 9 which

00:29:03,880 --> 00:29:08,919
is an open source project that is used

00:29:05,679 --> 00:29:11,350
to build DNS server it's a very popular

00:29:08,919 --> 00:29:12,970
way to implement DNS servers and you

00:29:11,350 --> 00:29:16,299
need to remember to open two ports of

00:29:12,970 --> 00:29:19,750
course 22 TCP 4 as a searching Enduro

00:29:16,299 --> 00:29:21,429
machine and you need to open port UDP 53

00:29:19,750 --> 00:29:24,370
which is the port that is used to

00:29:21,429 --> 00:29:27,130
perform DNS queries once you've done

00:29:24,370 --> 00:29:30,549
those three steps all you have to do is

00:29:27,130 --> 00:29:32,409
just mildly change the default

00:29:30,549 --> 00:29:35,830
configuration of bind 9 to achieve

00:29:32,409 --> 00:29:38,500
exactly that that behavior that we want

00:29:35,830 --> 00:29:42,309
to achieve so we said that we want one

00:29:38,500 --> 00:29:45,639
global behavior that acts like any other

00:29:42,309 --> 00:29:48,909
DNS provider except for one single

00:29:45,639 --> 00:29:51,639
domain so to the left you configure the

00:29:48,909 --> 00:29:53,740
global configuration file and you need

00:29:51,639 --> 00:29:57,100
to list for directives the first one is

00:29:53,740 --> 00:29:59,740
listen on port 53 any which means hey

00:29:57,100 --> 00:30:03,669
DNS server please listen on port 53 on

00:29:59,740 --> 00:30:07,450
all interfaces allow query from anywhere

00:30:03,669 --> 00:30:09,730
around the world we define a 1 forwarder

00:30:07,450 --> 00:30:11,649
you can use a date a date or you can use

00:30:09,730 --> 00:30:15,700
any other folder that you want as long

00:30:11,649 --> 00:30:18,250
as as its it's a fully functioning DNS

00:30:15,700 --> 00:30:20,139
recursive server and we enable recursion

00:30:18,250 --> 00:30:24,370
because we want to use this like any

00:30:20,139 --> 00:30:26,710
other normal DNS server once we've done

00:30:24,370 --> 00:30:30,039
that we need to add a new zone which is

00:30:26,710 --> 00:30:31,779
only like four lines so we define a zone

00:30:30,039 --> 00:30:34,929
for our domain in this case it's Monday

00:30:31,779 --> 00:30:37,330
com we define it of type forward and we

00:30:34,929 --> 00:30:40,059
defined a whole set of other folder

00:30:37,330 --> 00:30:43,750
forwarders for this domain in our case

00:30:40,059 --> 00:30:46,809
it's 188 51:44 seven which is one of the

00:30:43,750 --> 00:30:51,010
name servers of our new DNS providers in

00:30:46,809 --> 00:30:52,450
that case it's an s-1 I'm gonna say at

00:30:51,010 --> 00:30:54,610
this point that is that you don't need

00:30:52,450 --> 00:30:56,710
to remember everything that I'm showing

00:30:54,610 --> 00:30:58,720
right here this whole talk is based on a

00:30:56,710 --> 00:31:00,730
blog post that we've published a few

00:30:58,720 --> 00:31:01,360
weeks ago on our new engineering blog de

00:31:00,730 --> 00:31:03,490
Montcalm

00:31:01,360 --> 00:31:04,809
and Janee r blob suit you can just go

00:31:03,490 --> 00:31:05,960
online after the stock if you're

00:31:04,809 --> 00:31:07,580
interested and we

00:31:05,960 --> 00:31:11,990
more in-depth about how to actually

00:31:07,580 --> 00:31:16,700
perform the migration so the fourth one

00:31:11,990 --> 00:31:20,149
is to write a playbook and this is this

00:31:16,700 --> 00:31:22,220
is a less defined step because each and

00:31:20,149 --> 00:31:24,649
every one of you might plan a different

00:31:22,220 --> 00:31:26,360
migration using different providers you

00:31:24,649 --> 00:31:28,100
might have a different environment and

00:31:26,360 --> 00:31:30,470
you will need to construct your own

00:31:28,100 --> 00:31:33,320
playbook which is defined on how you

00:31:30,470 --> 00:31:36,350
work and how your infrastructure is

00:31:33,320 --> 00:31:38,299
currently set up but the most key

00:31:36,350 --> 00:31:40,250
element that I wanted to convey at this

00:31:38,299 --> 00:31:43,250
point is that it's imperative to have a

00:31:40,250 --> 00:31:46,580
written plan with clear check points and

00:31:43,250 --> 00:31:48,350
a point of no return and this is not

00:31:46,580 --> 00:31:50,809
relevant only to the nest migration I

00:31:48,350 --> 00:31:53,210
think that this is a key value to

00:31:50,809 --> 00:31:54,529
remember for any major migration that

00:31:53,210 --> 00:31:58,100
you perform on your production

00:31:54,529 --> 00:32:00,260
environment so specific to DNS

00:31:58,100 --> 00:32:03,260
migrations there are a few key things

00:32:00,260 --> 00:32:05,149
that you need to remember and hopefully

00:32:03,260 --> 00:32:07,429
incorporate into your playbooks so the

00:32:05,149 --> 00:32:10,399
first one is that your first check point

00:32:07,429 --> 00:32:13,130
must be aligning your old and your new

00:32:10,399 --> 00:32:15,380
providers so instead that just moving

00:32:13,130 --> 00:32:18,649
those DNS records from my provider to

00:32:15,380 --> 00:32:20,690
the other might not achieve 100% the

00:32:18,649 --> 00:32:22,220
outcome that we're expecting because you

00:32:20,690 --> 00:32:25,909
might have things along the way that are

00:32:22,220 --> 00:32:27,890
changing those DNS responses especially

00:32:25,909 --> 00:32:30,770
if you work if you work with a DDoS

00:32:27,890 --> 00:32:33,169
mitigation provider like clouds there so

00:32:30,770 --> 00:32:34,970
make sure that you've aligned a hundred

00:32:33,169 --> 00:32:37,159
percent your old and your new provider

00:32:34,970 --> 00:32:40,190
and you can do that either with big

00:32:37,159 --> 00:32:42,649
commands or you can use the custom DNS

00:32:40,190 --> 00:32:46,250
provider the custom DNS server that we

00:32:42,649 --> 00:32:48,500
have built for this purpose it's gonna

00:32:46,250 --> 00:32:50,870
give you a full simulation of how your

00:32:48,500 --> 00:32:52,700
migration is going to look after you've

00:32:50,870 --> 00:32:54,679
performed the delegation without you

00:32:52,700 --> 00:32:57,559
actually having to do that delegation

00:32:54,679 --> 00:33:00,080
for testing the second thing you need to

00:32:57,559 --> 00:33:03,100
remember is that the default TTL of NS

00:33:00,080 --> 00:33:06,529
records the records that represent which

00:33:03,100 --> 00:33:09,890
DNS name servers are the authoritative

00:33:06,529 --> 00:33:12,289
name servers for your domain is 48 hours

00:33:09,890 --> 00:33:16,580
so that means that once you've kicked

00:33:12,289 --> 00:33:18,460
off your migration if you have something

00:33:16,580 --> 00:33:21,320
wrong in production

00:33:18,460 --> 00:33:24,020
you're screwed because it's gonna take

00:33:21,320 --> 00:33:26,270
you a long time to recover you will need

00:33:24,020 --> 00:33:28,670
to read a legate your domain to your

00:33:26,270 --> 00:33:32,660
original provider and in that case you

00:33:28,670 --> 00:33:34,670
might have some providers global that

00:33:32,660 --> 00:33:36,920
have already propagated and have already

00:33:34,670 --> 00:33:40,040
stored your new values and it's gonna

00:33:36,920 --> 00:33:43,070
take them 48 hours to recover or to

00:33:40,040 --> 00:33:45,080
refresh their cache so you must be able

00:33:43,070 --> 00:33:47,420
to first line your old and new provider

00:33:45,080 --> 00:33:50,240
and you need to remember the TTL takes

00:33:47,420 --> 00:33:52,910
48 hours so it's not a recommendation

00:33:50,240 --> 00:33:56,330
it's not up to 48 hours this is what I'd

00:33:52,910 --> 00:33:58,790
hoped for initially this is a hard line

00:33:56,330 --> 00:34:03,350
you need to wait at least 48 hours after

00:33:58,790 --> 00:34:06,770
you perform the change in your DNS it's

00:34:03,350 --> 00:34:09,800
mostly registered before you perform the

00:34:06,770 --> 00:34:11,929
next steps of your PlayBook the third

00:34:09,800 --> 00:34:14,210
thing which I highly recommend is that

00:34:11,929 --> 00:34:16,340
you monitor the propagation progress of

00:34:14,210 --> 00:34:18,560
your new DNS records now there are a few

00:34:16,340 --> 00:34:20,510
websites online you can use one of them

00:34:18,560 --> 00:34:22,730
is called DNS checker but there are

00:34:20,510 --> 00:34:24,770
multiple ones I highly recommend that

00:34:22,730 --> 00:34:28,429
you use multiple ones because each one

00:34:24,770 --> 00:34:31,730
of those websites can query a different

00:34:28,429 --> 00:34:33,320
set of servers this is how Monday doth

00:34:31,730 --> 00:34:35,840
come for example would look like when

00:34:33,320 --> 00:34:37,429
you go to DNS checker you need to type

00:34:35,840 --> 00:34:40,010
in the name of your domain you need to

00:34:37,429 --> 00:34:42,530
select NS as the type of record that you

00:34:40,010 --> 00:34:45,050
want to query ok you click on search and

00:34:42,530 --> 00:34:47,179
then that that website would perform

00:34:45,050 --> 00:34:49,580
multiple DNS queries to multiple DNS

00:34:47,179 --> 00:34:53,629
servers around the world and you will be

00:34:49,580 --> 00:34:56,360
able to see the actual you will see the

00:34:53,629 --> 00:34:58,910
actual progress through which the

00:34:56,360 --> 00:35:01,850
propagation of your new records is going

00:34:58,910 --> 00:35:03,980
through and of course this will take 48

00:35:01,850 --> 00:35:05,540
hours you will see that the most of this

00:35:03,980 --> 00:35:07,850
change happens in the first two or three

00:35:05,540 --> 00:35:10,250
hours but you need to be patient and you

00:35:07,850 --> 00:35:12,740
need to wait until you have full

00:35:10,250 --> 00:35:17,600
propagation before you complete your

00:35:12,740 --> 00:35:19,360
migration and the fifth one is to dry

00:35:17,600 --> 00:35:21,710
run this on a test environment

00:35:19,360 --> 00:35:24,460
especially if your production

00:35:21,710 --> 00:35:26,690
environment might look something this

00:35:24,460 --> 00:35:27,920
fortunately this is not how the man that

00:35:26,690 --> 00:35:30,170
I've come in first structure looks like

00:35:27,920 --> 00:35:32,020
but I do realize that there are some

00:35:30,170 --> 00:35:35,680
companies that have

00:35:32,020 --> 00:35:39,190
very complex environments that may have

00:35:35,680 --> 00:35:42,670
been like this for years at a time so

00:35:39,190 --> 00:35:44,290
you need to be before you actually start

00:35:42,670 --> 00:35:46,150
to perform the migration you need to

00:35:44,290 --> 00:35:48,760
take a step back if you have a test

00:35:46,150 --> 00:35:50,830
environment that you can use to perform

00:35:48,760 --> 00:35:53,740
that migration before you start working

00:35:50,830 --> 00:35:55,750
on production then please do if you have

00:35:53,740 --> 00:35:58,560
a different domain name that is used for

00:35:55,750 --> 00:36:00,940
your QA or your staging environment then

00:35:58,560 --> 00:36:04,150
do this whole process on that

00:36:00,940 --> 00:36:06,580
environment first create a custom DNS

00:36:04,150 --> 00:36:08,860
server do all the checks that you need

00:36:06,580 --> 00:36:11,950
to do on that environment wait the 48

00:36:08,860 --> 00:36:13,930
hours and then do all of the post checks

00:36:11,950 --> 00:36:15,430
that you need to perform before you

00:36:13,930 --> 00:36:17,650
actually start working on your

00:36:15,430 --> 00:36:20,619
production environment this will save

00:36:17,650 --> 00:36:23,230
you a lot of unseen problems that might

00:36:20,619 --> 00:36:25,930
arise during that migration that you had

00:36:23,230 --> 00:36:30,250
not anticipated when you first plant

00:36:25,930 --> 00:36:32,230
this and again once you start the DNS

00:36:30,250 --> 00:36:35,440
migration in production if you have

00:36:32,230 --> 00:36:38,890
something that is gone awry you will

00:36:35,440 --> 00:36:40,930
have some problems for up to 48 hours so

00:36:38,890 --> 00:36:43,390
it's super critical that you take your

00:36:40,930 --> 00:36:46,240
time you plan you perform the testing

00:36:43,390 --> 00:36:48,040
wherever is needed and then only once

00:36:46,240 --> 00:36:49,330
you have gained enough confidence to

00:36:48,040 --> 00:36:51,670
perform the migration

00:36:49,330 --> 00:36:54,520
only then do you delegate your domain to

00:36:51,670 --> 00:37:00,040
the new authoritative nameservers so

00:36:54,520 --> 00:37:03,490
just to recap so the five key things to

00:37:00,040 --> 00:37:06,609
do when you plan a migration to another

00:37:03,490 --> 00:37:08,800
DNS provider or to multi DNS so the

00:37:06,609 --> 00:37:10,390
first one is to sync your team make sure

00:37:08,800 --> 00:37:12,869
that everyone's aligned and restrict

00:37:10,390 --> 00:37:15,580
menu updates to make sure that no one

00:37:12,869 --> 00:37:17,500
creates discrepancies between your old

00:37:15,580 --> 00:37:20,140
and new provider or your new provider

00:37:17,500 --> 00:37:22,150
number one a new provider number to use

00:37:20,140 --> 00:37:24,220
in first code tooling for zone

00:37:22,150 --> 00:37:26,200
management I highly recommend update DNS

00:37:24,220 --> 00:37:29,350
but if you want to use terraform or

00:37:26,200 --> 00:37:32,050
another tool go for it just stick with

00:37:29,350 --> 00:37:34,540
managing your zones like this from now

00:37:32,050 --> 00:37:36,190
on otherwise you will find some

00:37:34,540 --> 00:37:38,560
discrepancies along the way that you had

00:37:36,190 --> 00:37:40,690
no idea where they came from and then

00:37:38,560 --> 00:37:42,250
you find out that someone just did a

00:37:40,690 --> 00:37:44,109
little change because they needed to do

00:37:42,250 --> 00:37:45,320
something and they forgot that they

00:37:44,109 --> 00:37:47,480
needed to use that tool

00:37:45,320 --> 00:37:49,700
create your own recursive DNS server

00:37:47,480 --> 00:37:52,580
this is a very effective tool to ensure

00:37:49,700 --> 00:37:54,500
that you do not have any discrepancies

00:37:52,580 --> 00:37:56,360
you're not aware of and it might give

00:37:54,500 --> 00:37:58,250
you a lot of confidence before you

00:37:56,360 --> 00:38:00,260
actually perform the production

00:37:58,250 --> 00:38:02,690
migration create a playbook for the

00:38:00,260 --> 00:38:06,440
migration and of course dry run it

00:38:02,690 --> 00:38:08,800
thoroughly on a test environment and

00:38:06,440 --> 00:38:15,050
that's it so uh thank you

00:38:08,800 --> 00:38:18,230
sure so how many name servers are you

00:38:15,050 --> 00:38:22,880
for example out on the DNS record how

00:38:18,230 --> 00:38:24,920
many six so one of the considerations we

00:38:22,880 --> 00:38:27,890
had when we integrated to providers was

00:38:24,920 --> 00:38:30,200
how we wanted to split traffic between

00:38:27,890 --> 00:38:33,560
them we have our primary one which is

00:38:30,200 --> 00:38:35,510
Anna Swan which is in our opinion a more

00:38:33,560 --> 00:38:37,460
robust and more advanced DNS provider

00:38:35,510 --> 00:38:40,520
then the second one so what have you've

00:38:37,460 --> 00:38:43,370
done we've placed four name servers from

00:38:40,520 --> 00:38:48,730
minus one and one name server from the

00:38:43,370 --> 00:38:48,730
second one is under attack

00:38:49,600 --> 00:38:57,230
how does other the resolving goes okay

00:38:54,170 --> 00:38:59,780
so if one of your providers is down

00:38:57,230 --> 00:39:02,360
let's say that you have let's say that

00:38:59,780 --> 00:39:06,080
you have a 50/50 split between those two

00:39:02,360 --> 00:39:07,970
providers if let's say that you have

00:39:06,080 --> 00:39:11,450
four name servers from provider a and

00:39:07,970 --> 00:39:14,090
four name servers from provider B either

00:39:11,450 --> 00:39:16,610
your computer or the recursive DNS name

00:39:14,090 --> 00:39:19,250
server that you're using is going to try

00:39:16,610 --> 00:39:21,950
to resolve from a render one if it is up

00:39:19,250 --> 00:39:24,590
then you're gonna get a response

00:39:21,950 --> 00:39:26,270
immediately if it is down it is based on

00:39:24,590 --> 00:39:29,360
this software that is actually running

00:39:26,270 --> 00:39:31,670
on that DNS server the if I remember

00:39:29,360 --> 00:39:34,130
correctly the most common timeout is one

00:39:31,670 --> 00:39:35,660
second so it's just going to try for one

00:39:34,130 --> 00:39:38,420
second and then it's gonna hop on to the

00:39:35,660 --> 00:39:40,910
next until it finds a healthy one so you

00:39:38,420 --> 00:39:43,670
might so you might feel a few seconds of

00:39:40,910 --> 00:39:46,820
latency but your site is gonna still be

00:39:43,670 --> 00:39:48,830
up and running okay so that's all the

00:39:46,820 --> 00:39:50,510
time I have for questions if you have

00:39:48,830 --> 00:39:53,600
onion other questions I'm gonna be

00:39:50,510 --> 00:39:55,369
around so just feel free to approach me

00:39:53,600 --> 00:39:57,430
and thank you

00:39:55,369 --> 00:39:57,430
you

00:39:57,620 --> 00:40:02,760

YouTube URL: https://www.youtube.com/watch?v=NzXYPTSK2EY


