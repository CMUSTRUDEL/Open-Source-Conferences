Title: What Security People Want: Making DevSecOps Happen with Containers
Publication date: 2017-09-18
Playlist: MesosCon North America 2017
Description: 
	What Security People Want: Making DevSecOps Happen with Containers - Tsvi Korren, Aqua Security

Any project of moving an application to run in containers will eventually run into the security wall. Why is it so hard to get security on board? This presentation will discuss why containers are a disruption for security, and how to address their concerns in a containerized environment. Learn how to have a conversation with your security people, and together embrace the opportunity to execute better security through automation and collaboration.

About

Tsvi Korren
Aqua Security
Director, Solution Architecture
Tsvi Korren, CISSP, has been an IT security professional for 20 years with background in business process consulting in large organizations. Most recently at CA Inc., he worked across verticals in government, retail, financial institutions and healthcare to implement compliance and security processes, from identity and access to host and server controls. Tsvi is currently the Director of Solution Architecture at Aqua Security, concentrating on building bridges between DevOps and security. Aqua Security was founded by IT security veterans, who saw containers as the next major disruption in datacenter and application technology, Aqua recognized that containerized environments create new challenges in security, but also present an opportunity to reinvent application security â€“ more efficiently than ever.
Captions: 
	00:00:00,030 --> 00:00:05,549
my name is tree I am coming from a

00:00:02,669 --> 00:00:07,529
company called aqua and I'm a security

00:00:05,549 --> 00:00:11,340
professional as you can see from my

00:00:07,529 --> 00:00:13,139
alphabet soup after my name and if you

00:00:11,340 --> 00:00:15,240
have people in your organizations with

00:00:13,139 --> 00:00:16,619
that alphabet soup then that means

00:00:15,240 --> 00:00:19,650
they're security professionals too so

00:00:16,619 --> 00:00:22,050
the question is what do we want except

00:00:19,650 --> 00:00:26,490
from life happiness and the rest of the

00:00:22,050 --> 00:00:30,349
world security people want to make sure

00:00:26,490 --> 00:00:33,239
that applications organizations

00:00:30,349 --> 00:00:36,680
businesses run securely so I'm going to

00:00:33,239 --> 00:00:40,079
start with a very very basic premise of

00:00:36,680 --> 00:00:41,660
where security actually fits in in the

00:00:40,079 --> 00:00:44,489
world

00:00:41,660 --> 00:00:46,320
I've been new to the DevOps world

00:00:44,489 --> 00:00:48,719
I've been security professionals for

00:00:46,320 --> 00:00:50,780
about 20 years or so been in the DevOps

00:00:48,719 --> 00:00:52,920
world maybe for a couple of years and

00:00:50,780 --> 00:00:54,180
somebody had to explain it to me so I'm

00:00:52,920 --> 00:00:56,910
gonna explain it to you the way that it

00:00:54,180 --> 00:00:58,980
was explained to me so let's start if

00:00:56,910 --> 00:01:02,219
you take a piece of code that does

00:00:58,980 --> 00:01:04,799
something useful and you put it on a

00:01:02,219 --> 00:01:07,470
server where it can run and you take

00:01:04,799 --> 00:01:10,430
that server and put it in a data center

00:01:07,470 --> 00:01:12,600
that's accessible from the outside world

00:01:10,430 --> 00:01:14,610
you're gonna get an application that

00:01:12,600 --> 00:01:19,200
people can use so far so good

00:01:14,610 --> 00:01:21,270
right so where does that fit into the

00:01:19,200 --> 00:01:24,540
security world and why do we care about

00:01:21,270 --> 00:01:27,540
this very simple or simplified construct

00:01:24,540 --> 00:01:30,240
of how applications are running well

00:01:27,540 --> 00:01:32,280
because we need to not just run that

00:01:30,240 --> 00:01:34,320
application in isolation it needs to be

00:01:32,280 --> 00:01:36,630
to do something and unfortunately there

00:01:34,320 --> 00:01:38,700
are dangers in the world that it needs

00:01:36,630 --> 00:01:41,159
to to deal with so if we overlay

00:01:38,700 --> 00:01:42,720
security over that we actually get a

00:01:41,159 --> 00:01:44,340
business because you could you can take

00:01:42,720 --> 00:01:46,680
an application and you can have a great

00:01:44,340 --> 00:01:48,770
idea until you've done the security work

00:01:46,680 --> 00:01:53,399
until you can run it in a way that is

00:01:48,770 --> 00:01:56,430
gonna be wholesome and predictable and

00:01:53,399 --> 00:01:57,869
safe for people to use it's really not

00:01:56,430 --> 00:01:59,610
an application it's not really another

00:01:57,869 --> 00:02:02,340
business so so where does business fit

00:01:59,610 --> 00:02:07,049
in when we write the code the code needs

00:02:02,340 --> 00:02:08,340
to be secure meaning that the program

00:02:07,049 --> 00:02:10,739
that you write is going to be

00:02:08,340 --> 00:02:13,880
predictable in its behavior it needs to

00:02:10,739 --> 00:02:15,590
run on servers that can only run the

00:02:13,880 --> 00:02:16,970
word that you want them to run that

00:02:15,590 --> 00:02:19,280
they're not going to be used for any

00:02:16,970 --> 00:02:21,200
other purposes it means that your

00:02:19,280 --> 00:02:22,610
operations need to be secure meaning if

00:02:21,200 --> 00:02:24,890
you people start to rely on your

00:02:22,610 --> 00:02:26,450
applications it has to be available it

00:02:24,890 --> 00:02:28,550
has to be up and running it has to be

00:02:26,450 --> 00:02:31,670
done in a way that gives people the

00:02:28,550 --> 00:02:33,200
confidence to run it and your users are

00:02:31,670 --> 00:02:34,730
your users that you intend to the

00:02:33,200 --> 00:02:37,040
application to be used with but there

00:02:34,730 --> 00:02:38,570
also could be the users that we don't

00:02:37,040 --> 00:02:40,960
want to use our applications they are

00:02:38,570 --> 00:02:44,120
the bad people of the world and

00:02:40,960 --> 00:02:47,720
unfortunately they're there and as we've

00:02:44,120 --> 00:02:50,810
seen too many times there is a tendency

00:02:47,720 --> 00:02:52,160
to maybe assume that everybody is going

00:02:50,810 --> 00:02:54,350
to use the application the way that you

00:02:52,160 --> 00:02:56,780
want it to be used but a lot of times we

00:02:54,350 --> 00:03:02,870
need to take care of cyber security so

00:02:56,780 --> 00:03:05,480
what do security people want security

00:03:02,870 --> 00:03:08,510
people want low risk code meaning that

00:03:05,480 --> 00:03:10,820
it you know doesn't do more or less than

00:03:08,510 --> 00:03:12,770
it should do running on hardened servers

00:03:10,820 --> 00:03:15,500
in a controlled environment with

00:03:12,770 --> 00:03:17,210
constant vigilance and proving

00:03:15,500 --> 00:03:21,640
compliance so let's break that down a

00:03:17,210 --> 00:03:25,510
little bit low risk code is the

00:03:21,640 --> 00:03:29,000
guarantee or close to a guarantee that

00:03:25,510 --> 00:03:31,760
the way that you write your applications

00:03:29,000 --> 00:03:34,910
is using good coding practices it's

00:03:31,760 --> 00:03:36,830
using the the latest technologies but in

00:03:34,910 --> 00:03:40,160
a way that's safe to do and it is not

00:03:36,830 --> 00:03:42,680
going to allow for weaknesses in the

00:03:40,160 --> 00:03:44,150
code to be exploited so that the

00:03:42,680 --> 00:03:47,000
application might be used to do other

00:03:44,150 --> 00:03:49,340
things running on hardened servers means

00:03:47,000 --> 00:03:52,820
that the servers that we are running on

00:03:49,340 --> 00:03:54,320
are dedicated for the set of

00:03:52,820 --> 00:03:56,360
applications that we want them to run on

00:03:54,320 --> 00:03:58,010
and that they are not susceptible to

00:03:56,360 --> 00:04:00,590
access administrative action that they

00:03:58,010 --> 00:04:03,260
are not susceptible to misuse and there

00:04:00,590 --> 00:04:06,500
is relatively or as much as we can

00:04:03,260 --> 00:04:08,030
guarantee no backdoors and no miss

00:04:06,500 --> 00:04:10,910
configurations that will allow those

00:04:08,030 --> 00:04:12,770
servers to execute a controlled

00:04:10,910 --> 00:04:14,930
environment is the same thing just

00:04:12,770 --> 00:04:16,520
scaled up so our entire data center from

00:04:14,930 --> 00:04:18,950
physical security if you're running your

00:04:16,520 --> 00:04:21,560
own data center to security in the cloud

00:04:18,950 --> 00:04:25,310
to multi-tenancy to backup to recovery

00:04:21,560 --> 00:04:27,650
all the services that are used to

00:04:25,310 --> 00:04:30,229
guarantee the sustainability

00:04:27,650 --> 00:04:32,090
of the application and constant

00:04:30,229 --> 00:04:34,070
vigilance which is a term that

00:04:32,090 --> 00:04:37,759
encompasses a lot of things means that

00:04:34,070 --> 00:04:39,710
security needs to guarantee that we know

00:04:37,759 --> 00:04:42,229
what's running we know who's running it

00:04:39,710 --> 00:04:44,030
we know under what circumstance it's

00:04:42,229 --> 00:04:46,759
running we can see what happened there

00:04:44,030 --> 00:04:49,039
is auditing in place there is a lot of

00:04:46,759 --> 00:04:51,949
elements the deals with just monitoring

00:04:49,039 --> 00:04:56,690
how things run not for you know CP usage

00:04:51,949 --> 00:04:59,539
or memory usage or the scalability but

00:04:56,690 --> 00:05:00,889
for security the ability to really

00:04:59,539 --> 00:05:02,840
understand and then do root cause

00:05:00,889 --> 00:05:06,050
analysis right all the intrusions that

00:05:02,840 --> 00:05:08,180
we've seen over the last few years all

00:05:06,050 --> 00:05:09,560
had to be analyzed and over analysed and

00:05:08,180 --> 00:05:11,570
we need to make sure that we know

00:05:09,560 --> 00:05:15,710
exactly what happened and then proving

00:05:11,570 --> 00:05:18,550
compliance is kind of the odd-job of

00:05:15,710 --> 00:05:22,990
security professionals nobody likes to

00:05:18,550 --> 00:05:26,180
issue reports about the inventory of

00:05:22,990 --> 00:05:28,130
situations what the maintenance window

00:05:26,180 --> 00:05:30,110
is whether or not we've changed

00:05:28,130 --> 00:05:33,229
passwords or we don't have a password

00:05:30,110 --> 00:05:37,099
that is admin like somebody did not so

00:05:33,229 --> 00:05:39,349
long ago and really getting to a point

00:05:37,099 --> 00:05:40,940
where you can certify that whatever that

00:05:39,349 --> 00:05:43,280
you're running is running based on

00:05:40,940 --> 00:05:45,260
compliance right so again so far so good

00:05:43,280 --> 00:05:47,690
it's really simple I know that you feel

00:05:45,260 --> 00:05:50,900
like super dumb right now but that is

00:05:47,690 --> 00:05:53,300
the basics of security and you really

00:05:50,900 --> 00:05:54,650
gotta understand where security people

00:05:53,300 --> 00:05:57,380
are coming from because all the things

00:05:54,650 --> 00:05:59,539
that they request from developers from

00:05:57,380 --> 00:06:02,030
operations really come to address these

00:05:59,539 --> 00:06:04,370
now there are other things that are not

00:06:02,030 --> 00:06:06,409
here because they deal with user

00:06:04,370 --> 00:06:08,479
security endpoint security

00:06:06,409 --> 00:06:10,580
you know don't click links and emails

00:06:08,479 --> 00:06:12,650
and all the other good stuff that

00:06:10,580 --> 00:06:14,990
happens but from a data center

00:06:12,650 --> 00:06:16,699
operations this is this is what what

00:06:14,990 --> 00:06:20,630
we're dealing with so how does that fit

00:06:16,699 --> 00:06:22,849
into the DevOps process right because

00:06:20,630 --> 00:06:24,530
because so far the previous slides had a

00:06:22,849 --> 00:06:27,080
little bit of a waterfall situation as

00:06:24,530 --> 00:06:28,970
far as the rollout of the application we

00:06:27,080 --> 00:06:31,280
start with the code we also do a server

00:06:28,970 --> 00:06:33,949
and and eventually they meet what

00:06:31,280 --> 00:06:36,620
happens when infrastructure is code what

00:06:33,949 --> 00:06:39,650
happens when code is infrastructure what

00:06:36,620 --> 00:06:40,940
happens when we start to automate things

00:06:39,650 --> 00:06:43,580
in a very

00:06:40,940 --> 00:06:46,310
fast moving way where we fail often

00:06:43,580 --> 00:06:48,950
where we do agile development when we

00:06:46,310 --> 00:06:51,140
have multiple releases of the

00:06:48,950 --> 00:06:53,120
applications when we run in the DevOps

00:06:51,140 --> 00:06:55,610
and not even containers even even DevOps

00:06:53,120 --> 00:06:58,490
pre containers there is still a lot of

00:06:55,610 --> 00:07:00,620
elements that are kind of killing the

00:06:58,490 --> 00:07:02,360
security model and in return security is

00:07:00,620 --> 00:07:06,050
probably going to kill the DevOps model

00:07:02,360 --> 00:07:08,030
because if you try to introduce the

00:07:06,050 --> 00:07:09,590
existing security controls or the

00:07:08,030 --> 00:07:12,230
security controls that security people

00:07:09,590 --> 00:07:15,020
expect into a DevOps process things

00:07:12,230 --> 00:07:18,320
start to break down if we need to

00:07:15,020 --> 00:07:20,330
analyze our code and it needs to be done

00:07:18,320 --> 00:07:22,220
in a tool that's not integrated into the

00:07:20,330 --> 00:07:25,210
environment that means that there is a

00:07:22,220 --> 00:07:28,730
break in the chain if we need to have

00:07:25,210 --> 00:07:30,890
configuration management done before the

00:07:28,730 --> 00:07:33,350
infrastructure is a code runs before we

00:07:30,890 --> 00:07:35,240
have our automation build our server and

00:07:33,350 --> 00:07:36,710
then we want to start to deploy on it

00:07:35,240 --> 00:07:39,050
immediately because that's part of the

00:07:36,710 --> 00:07:42,110
same function if we have a stop and ask

00:07:39,050 --> 00:07:44,720
for configuration management that's a

00:07:42,110 --> 00:07:46,850
break in the process and the same thing

00:07:44,720 --> 00:07:49,250
with network with host access controls

00:07:46,850 --> 00:07:51,860
how do we separate automations from

00:07:49,250 --> 00:07:54,530
humans how do we make sure that our

00:07:51,860 --> 00:07:57,230
intrusion prevention and protection is

00:07:54,530 --> 00:08:00,110
still a intact when everything is moving

00:07:57,230 --> 00:08:03,590
so fast so I put deaf sack ups as a

00:08:00,110 --> 00:08:06,230
question mark because I have the feeling

00:08:03,590 --> 00:08:08,270
that everybody pays lip service to the

00:08:06,230 --> 00:08:10,640
idea of deaths deficit cops would be

00:08:08,270 --> 00:08:13,100
really nice if everybody collaborated

00:08:10,640 --> 00:08:15,320
and talked together but it is really

00:08:13,100 --> 00:08:16,640
really difficult and I have experience

00:08:15,320 --> 00:08:17,750
with organizations that will work with

00:08:16,640 --> 00:08:19,310
and I think everybody has their own

00:08:17,750 --> 00:08:22,010
story either from the security side

00:08:19,310 --> 00:08:24,530
talking to DevOps or from DevOps talking

00:08:22,010 --> 00:08:28,430
to security and really not being on the

00:08:24,530 --> 00:08:31,610
same wavelength and that that's pretty

00:08:28,430 --> 00:08:33,500
much the problem with deaf suck-ups

00:08:31,610 --> 00:08:36,229
today and that it's hard those are

00:08:33,500 --> 00:08:38,570
different domain expertise automation

00:08:36,229 --> 00:08:42,010
the enterprise management data center

00:08:38,570 --> 00:08:44,510
management are things that deal with

00:08:42,010 --> 00:08:46,400
aspects of IT that are very different

00:08:44,510 --> 00:08:49,250
than what security deals where there are

00:08:46,400 --> 00:08:51,050
different motivations you get measured

00:08:49,250 --> 00:08:54,220
in different ways in your organization

00:08:51,050 --> 00:08:55,629
different cost structures and and all

00:08:54,220 --> 00:08:57,370
the things that are just different

00:08:55,629 --> 00:08:59,949
domain expertise altogether

00:08:57,370 --> 00:09:02,399
another thing is that security is not

00:08:59,949 --> 00:09:05,259
really automation friendly security

00:09:02,399 --> 00:09:07,060
controls are by their nature a little

00:09:05,259 --> 00:09:07,589
bit messy there's a lot of opinions in

00:09:07,060 --> 00:09:09,790
there

00:09:07,589 --> 00:09:11,139
vulnerability management for instance is

00:09:09,790 --> 00:09:13,720
not a clear-cut

00:09:11,139 --> 00:09:17,079
operation there's no good or bad there

00:09:13,720 --> 00:09:21,790
is good until we get some mitigation on

00:09:17,079 --> 00:09:25,000
it or bad until we have a way to deal

00:09:21,790 --> 00:09:28,540
with some of the risks that we have in

00:09:25,000 --> 00:09:30,430
in vulnerabilities even configuration

00:09:28,540 --> 00:09:32,889
management we always deal with

00:09:30,430 --> 00:09:34,870
exceptions there are always rules but

00:09:32,889 --> 00:09:37,660
they're always broken so there's not a

00:09:34,870 --> 00:09:39,430
lot of clear-cut answers that can be

00:09:37,660 --> 00:09:41,889
answered by a program and security is

00:09:39,430 --> 00:09:43,629
not really automation friendly and the

00:09:41,889 --> 00:09:45,430
flipside of that is the DevOps is built

00:09:43,629 --> 00:09:47,410
for speed we need to deploy quickly we

00:09:45,430 --> 00:09:50,649
need to to get our applications out

00:09:47,410 --> 00:09:52,870
there and it is not easy to do that when

00:09:50,649 --> 00:09:54,850
we have security as gates preventing us

00:09:52,870 --> 00:09:57,310
from doing what we need to do and then

00:09:54,850 --> 00:09:59,529
we add on top of that dynamic cloud

00:09:57,310 --> 00:10:02,410
environment that deal with constant

00:09:59,529 --> 00:10:04,149
change and the predictability is not

00:10:02,410 --> 00:10:05,769
there and there's nothing that security

00:10:04,149 --> 00:10:07,899
people hate more than not being able to

00:10:05,769 --> 00:10:09,550
predict and not being able to do

00:10:07,899 --> 00:10:13,990
something and make sure that it doesn't

00:10:09,550 --> 00:10:17,379
change any more so DevOps is hard there

00:10:13,990 --> 00:10:20,290
is no something that is going to be very

00:10:17,379 --> 00:10:23,230
counterintuitive and that is that as we

00:10:20,290 --> 00:10:25,839
move to more containerized environment

00:10:23,230 --> 00:10:28,750
as we move towards the delivery of micro

00:10:25,839 --> 00:10:32,649
services it seems to be a continuation

00:10:28,750 --> 00:10:36,790
of this mess because now we've taken at

00:10:32,649 --> 00:10:38,920
least three aspects of the DevOps

00:10:36,790 --> 00:10:41,980
process and kind of merged them into one

00:10:38,920 --> 00:10:43,540
right so we not only have infrastructure

00:10:41,980 --> 00:10:45,459
as code and code as infrastructure

00:10:43,540 --> 00:10:47,220
they're actually all pulled together in

00:10:45,459 --> 00:10:50,800
one image right your image now has

00:10:47,220 --> 00:10:52,509
infrastructure it has an operating

00:10:50,800 --> 00:10:55,000
system it has prerequisite software it

00:10:52,509 --> 00:10:57,069
has your own application the way that

00:10:55,000 --> 00:10:59,319
it's rolled out is rolled out with with

00:10:57,069 --> 00:11:02,829
automation so now we've rolled out and

00:10:59,319 --> 00:11:05,170
compressed the ability to deliver our

00:11:02,829 --> 00:11:06,730
applications in an automated way the

00:11:05,170 --> 00:11:07,560
consumption of application is still

00:11:06,730 --> 00:11:09,090
there you know

00:11:07,560 --> 00:11:11,490
hackers are still there it's still being

00:11:09,090 --> 00:11:13,380
attacked more or less the same way but

00:11:11,490 --> 00:11:17,490
the way it's delivered is really really

00:11:13,380 --> 00:11:19,320
different so it's it's a problem and and

00:11:17,490 --> 00:11:21,540
the knee-jerk reaction of security

00:11:19,320 --> 00:11:22,950
organizations when we start to convert

00:11:21,540 --> 00:11:25,050
some of our applications to micro

00:11:22,950 --> 00:11:27,660
services roll them in D cos with

00:11:25,050 --> 00:11:29,490
orchestration underneath is to basically

00:11:27,660 --> 00:11:31,980
say no right we just don't want to deal

00:11:29,490 --> 00:11:34,050
with this - too much too much change too

00:11:31,980 --> 00:11:36,440
much of a sensory overload how do we

00:11:34,050 --> 00:11:40,350
actually get get from under that and

00:11:36,440 --> 00:11:44,190
there's gotta be some way in which you

00:11:40,350 --> 00:11:47,029
guys who are DevOps before I assume will

00:11:44,190 --> 00:11:49,470
need to engage with security people and

00:11:47,029 --> 00:11:52,860
come to terms with the fact that this is

00:11:49,470 --> 00:11:55,500
a really big disruption to to running AI

00:11:52,860 --> 00:11:57,450
team so where does that leave us

00:11:55,500 --> 00:11:59,730
it leaves us first of all with security

00:11:57,450 --> 00:12:01,950
on the outside looking in so all those

00:11:59,730 --> 00:12:03,570
services that were you know a little bit

00:12:01,950 --> 00:12:06,060
disruptive or annoying with pre

00:12:03,570 --> 00:12:08,540
container DevOps are almost done right

00:12:06,060 --> 00:12:11,130
impossible with post container DevOps

00:12:08,540 --> 00:12:13,890
it's very hard to do static code

00:12:11,130 --> 00:12:16,680
analysis or stop for understanding what

00:12:13,890 --> 00:12:20,490
the networking requirements of an

00:12:16,680 --> 00:12:22,620
application is or how to monitor the

00:12:20,490 --> 00:12:24,420
environment for intrusion and how to do

00:12:22,620 --> 00:12:25,380
configuration management where

00:12:24,420 --> 00:12:26,550
everything is bundled together

00:12:25,380 --> 00:12:28,170
everything is shipped together

00:12:26,550 --> 00:12:29,580
everything is running on the same host

00:12:28,170 --> 00:12:31,620
everything is broken apart for micro

00:12:29,580 --> 00:12:33,690
services and there's a lot of API work

00:12:31,620 --> 00:12:35,940
around that so the old model is just not

00:12:33,690 --> 00:12:38,100
going to work and just psychologically

00:12:35,940 --> 00:12:40,589
you really need to understand that the

00:12:38,100 --> 00:12:42,450
when you start to do a containerization

00:12:40,589 --> 00:12:44,610
effort when you should start to do a a

00:12:42,450 --> 00:12:47,250
migration of the application it's really

00:12:44,610 --> 00:12:50,100
going to cause real stress to security

00:12:47,250 --> 00:12:53,700
people so let's flip a page a little bit

00:12:50,100 --> 00:12:55,370
and see what is really our way to maybe

00:12:53,700 --> 00:12:58,589
make things a little bit better

00:12:55,370 --> 00:13:00,240
so here's a promise what what what if we

00:12:58,589 --> 00:13:01,890
can actually merge that what in fact we

00:13:00,240 --> 00:13:04,200
can actually make security part of the

00:13:01,890 --> 00:13:07,050
process and not having it from the

00:13:04,200 --> 00:13:09,690
outside looking in and I want to propose

00:13:07,050 --> 00:13:12,810
two scenarios to you one is a very

00:13:09,690 --> 00:13:15,029
security operated security program

00:13:12,810 --> 00:13:17,190
oriented approach and the other one is

00:13:15,029 --> 00:13:18,630
more of a pipeline approach and we'll

00:13:17,190 --> 00:13:22,310
explore this together a little bit and

00:13:18,630 --> 00:13:25,770
see see see where we get to so

00:13:22,310 --> 00:13:28,350
the way that remember what security

00:13:25,770 --> 00:13:30,750
people want they want safe code hundred

00:13:28,350 --> 00:13:32,520
ha and hardened servers in a controlled

00:13:30,750 --> 00:13:34,980
environment with vigilance and

00:13:32,520 --> 00:13:36,600
compliance so let's put a security

00:13:34,980 --> 00:13:38,940
program in place that is using the

00:13:36,600 --> 00:13:41,250
inherent properties of containerized

00:13:38,940 --> 00:13:43,920
applications to deal with some of those

00:13:41,250 --> 00:13:45,750
those aspects so the first thing is is

00:13:43,920 --> 00:13:48,180
running secure code how do you run

00:13:45,750 --> 00:13:50,190
secure code well we do code analysis and

00:13:48,180 --> 00:13:51,690
there are services out there there are a

00:13:50,190 --> 00:13:53,400
lot of times are being used today in the

00:13:51,690 --> 00:13:55,710
pre container roller in the DevOps pre

00:13:53,400 --> 00:13:59,160
container world to do code analysis your

00:13:55,710 --> 00:14:02,700
vÃ©ra codes of the world and so on those

00:13:59,160 --> 00:14:04,860
are services that are pretty well

00:14:02,700 --> 00:14:08,780
integrated into the DevOps process do is

00:14:04,860 --> 00:14:10,680
usually in your in your tools that do

00:14:08,780 --> 00:14:12,690
compilation in the tools that do the

00:14:10,680 --> 00:14:14,610
packaging there's usually a step out

00:14:12,690 --> 00:14:16,680
there that does the code analysis and

00:14:14,610 --> 00:14:17,910
that's pretty well integrated and that's

00:14:16,680 --> 00:14:20,730
actually should be our model right

00:14:17,910 --> 00:14:24,360
because that part because it's been with

00:14:20,730 --> 00:14:27,900
us for a long time is actually a model

00:14:24,360 --> 00:14:29,970
that we can employ to use with other

00:14:27,900 --> 00:14:32,580
parts of the containerized environment

00:14:29,970 --> 00:14:35,700
and I'm talking specifically about the

00:14:32,580 --> 00:14:38,190
base operating system and the base

00:14:35,700 --> 00:14:41,810
images that we're going to use to build

00:14:38,190 --> 00:14:44,910
our containers on and if you think about

00:14:41,810 --> 00:14:47,330
why why are we having this this step and

00:14:44,910 --> 00:14:49,920
why not just you know we do

00:14:47,330 --> 00:14:51,810
Ubuntu off the internet or sent us off

00:14:49,920 --> 00:14:56,400
the darker hub and build our images that

00:14:51,810 --> 00:14:58,410
way is because even even in the server

00:14:56,400 --> 00:15:00,540
world every time that you install an

00:14:58,410 --> 00:15:02,250
operating system you install your own

00:15:00,540 --> 00:15:04,680
organization's version of the operating

00:15:02,250 --> 00:15:06,750
system there are controls in place that

00:15:04,680 --> 00:15:08,510
need to be there there are regulations

00:15:06,750 --> 00:15:10,650
that need some hardening there are

00:15:08,510 --> 00:15:12,870
vulnerability assessment things all

00:15:10,650 --> 00:15:15,300
these need to be part of the deployment

00:15:12,870 --> 00:15:16,290
of an image so one of the things that we

00:15:15,300 --> 00:15:18,990
see and we talk to a lot of

00:15:16,290 --> 00:15:23,720
organizations is that the practice of

00:15:18,990 --> 00:15:27,030
having a pipeline for base images is

00:15:23,720 --> 00:15:30,210
starting to emerge as a way to kind of

00:15:27,030 --> 00:15:32,850
jumpstart the collaboration between dev

00:15:30,210 --> 00:15:34,350
ops and security because that's an area

00:15:32,850 --> 00:15:36,480
that everybody can agree on and

00:15:34,350 --> 00:15:38,100
some know-how in the organization so how

00:15:36,480 --> 00:15:39,870
do we actually do that we take the

00:15:38,100 --> 00:15:42,390
people that used to build servers you

00:15:39,870 --> 00:15:46,760
know the ones from the kind of middle of

00:15:42,390 --> 00:15:49,200
the the waterfall process and take that

00:15:46,760 --> 00:15:51,540
organizational know how the processes of

00:15:49,200 --> 00:15:53,100
what vulnerabilities should not be there

00:15:51,540 --> 00:15:55,740
what is a good configuration what is

00:15:53,100 --> 00:15:58,500
your password policy what is your naming

00:15:55,740 --> 00:16:01,590
convention what is your key strengths

00:15:58,500 --> 00:16:03,690
all of those can be co-opted and can be

00:16:01,590 --> 00:16:05,730
put together to create your own base

00:16:03,690 --> 00:16:06,960
images and we start a cycle there and

00:16:05,730 --> 00:16:08,880
you're going to see that those those

00:16:06,960 --> 00:16:11,220
these arrows that kind of do a cycle

00:16:08,880 --> 00:16:13,320
here because the same way that you will

00:16:11,220 --> 00:16:14,880
you know fail a code analysis and then

00:16:13,320 --> 00:16:16,710
have to fix your code and you run it

00:16:14,880 --> 00:16:18,450
through it again until you get it right

00:16:16,710 --> 00:16:20,220
is the same way that we were going to do

00:16:18,450 --> 00:16:21,960
our base images we're gonna take

00:16:20,220 --> 00:16:23,550
something maybe off the internet we're

00:16:21,960 --> 00:16:26,150
gonna take a CentOS image or a bun to

00:16:23,550 --> 00:16:28,980
image or Alpine image and we're gonna

00:16:26,150 --> 00:16:30,990
test it for compliance with the

00:16:28,980 --> 00:16:32,610
organizational needs and we're going to

00:16:30,990 --> 00:16:34,500
build on it and we're gonna have some

00:16:32,610 --> 00:16:36,110
iterations assessing the risk again and

00:16:34,500 --> 00:16:38,250
again until we get to a configuration

00:16:36,110 --> 00:16:39,750
that is gonna be at least from a

00:16:38,250 --> 00:16:41,760
security point of view pretty much the

00:16:39,750 --> 00:16:43,350
same as your servers used to be because

00:16:41,760 --> 00:16:46,920
we know that those servers are in line

00:16:43,350 --> 00:16:49,290
with your with your policies and that's

00:16:46,920 --> 00:16:52,650
a great way to do a little bit of

00:16:49,290 --> 00:16:55,560
collaboration with security on stuff

00:16:52,650 --> 00:16:57,320
that is probably don't matter to as much

00:16:55,560 --> 00:17:00,090
right because it's it's not your code

00:16:57,320 --> 00:17:02,040
once we have the this system in place

00:17:00,090 --> 00:17:03,450
what we want to do is we want to build

00:17:02,040 --> 00:17:05,160
an image that is actually going to be

00:17:03,450 --> 00:17:07,320
that image that's gonna run as our

00:17:05,160 --> 00:17:10,020
container and we do the same iteration

00:17:07,320 --> 00:17:13,140
again we're gonna do the image risk and

00:17:10,020 --> 00:17:15,620
the image build until at the other side

00:17:13,140 --> 00:17:18,780
of the pipeline we get an image that is

00:17:15,620 --> 00:17:20,700
absolutely tailored to both your

00:17:18,780 --> 00:17:22,320
application but also for the

00:17:20,700 --> 00:17:25,530
organization's security needs and that

00:17:22,320 --> 00:17:26,880
means reducing bloat that means that the

00:17:25,530 --> 00:17:29,160
image really should have the minimal

00:17:26,880 --> 00:17:30,930
moving parts that it needs to do its job

00:17:29,160 --> 00:17:32,840
that means that the image is going to be

00:17:30,930 --> 00:17:36,120
well configured that means that we have

00:17:32,840 --> 00:17:38,130
the right security posture to it and

00:17:36,120 --> 00:17:39,510
remember this has to go up with reports

00:17:38,130 --> 00:17:42,000
right the same way that security people

00:17:39,510 --> 00:17:43,620
needs to provide for compliance reason

00:17:42,000 --> 00:17:45,510
what is the state of the server

00:17:43,620 --> 00:17:46,740
environment we anticipate that

00:17:45,510 --> 00:17:48,240
eventually they're going to need to

00:17:46,740 --> 00:17:50,309
provide what is the state of

00:17:48,240 --> 00:17:52,580
image environment so might as well do

00:17:50,309 --> 00:17:55,050
that and gather that that information

00:17:52,580 --> 00:17:58,280
because of the nature of containers from

00:17:55,050 --> 00:18:00,870
there on it's really just preventing

00:17:58,280 --> 00:18:02,760
deviation from that image so as

00:18:00,870 --> 00:18:04,650
containers are being rolled out we want

00:18:02,760 --> 00:18:07,140
to make sure that there is integrity so

00:18:04,650 --> 00:18:09,179
that what you put in the registry and

00:18:07,140 --> 00:18:11,100
pull to the registry is the exact same

00:18:09,179 --> 00:18:13,440
image so you know sign your images

00:18:11,100 --> 00:18:15,210
calculate hashes of your images you know

00:18:13,440 --> 00:18:17,130
make sure that you follow the image ID

00:18:15,210 --> 00:18:19,380
basically make sure along the way that

00:18:17,130 --> 00:18:23,309
you have some integrity of the image and

00:18:19,380 --> 00:18:25,410
then once you're deploying it really

00:18:23,309 --> 00:18:26,790
this should not have any more

00:18:25,410 --> 00:18:29,160
disruptions in it there should not be

00:18:26,790 --> 00:18:30,870
any human interaction there shouldn't be

00:18:29,160 --> 00:18:33,870
any more patching there shouldn't be any

00:18:30,870 --> 00:18:36,179
more touching of the image there really

00:18:33,870 --> 00:18:38,790
nobody should exact into any container

00:18:36,179 --> 00:18:41,940
nobody should even SSH into any node

00:18:38,790 --> 00:18:43,770
that is running in that in in the data

00:18:41,940 --> 00:18:45,330
center and that's actually that

00:18:43,770 --> 00:18:47,150
represents one of the biggest changes

00:18:45,330 --> 00:18:49,679
for security because their role

00:18:47,150 --> 00:18:52,740
basically stops you know about

00:18:49,679 --> 00:18:55,110
three-quarters away from the left-hand

00:18:52,740 --> 00:18:56,910
side of the slide once something goes

00:18:55,110 --> 00:18:59,880
into production there's really little

00:18:56,910 --> 00:19:02,040
ways in which we can effect change on it

00:18:59,880 --> 00:19:04,740
and by change we mean even fix things

00:19:02,040 --> 00:19:06,960
that that may be broken and we got to

00:19:04,740 --> 00:19:09,809
get in the habit of fixing security

00:19:06,960 --> 00:19:11,250
problems in the pipeline and if we need

00:19:09,809 --> 00:19:13,440
to fix a security problem that's been

00:19:11,250 --> 00:19:15,720
discovered afterwards to actually go and

00:19:13,440 --> 00:19:17,580
do that from from the pipeline so let's

00:19:15,720 --> 00:19:20,100
take a look at patching as an example of

00:19:17,580 --> 00:19:23,309
that when we talk about patching again

00:19:20,100 --> 00:19:25,050
we audit a server we have we found that

00:19:23,309 --> 00:19:26,520
there is a configuration problem on a

00:19:25,050 --> 00:19:28,530
server and we're talking pre container

00:19:26,520 --> 00:19:31,200
what do we do we going to patch the

00:19:28,530 --> 00:19:33,330
server we update a package or we change

00:19:31,200 --> 00:19:35,370
a file or we update that server in

00:19:33,330 --> 00:19:38,250
production means maintenance windows

00:19:35,370 --> 00:19:39,929
means disruption means downtime means we

00:19:38,250 --> 00:19:41,970
need to audit we need to see what

00:19:39,929 --> 00:19:43,920
administrators did on it so there's

00:19:41,970 --> 00:19:46,170
actually a lot of trouble that goes on

00:19:43,920 --> 00:19:48,540
with patchy contrast that with the

00:19:46,170 --> 00:19:50,880
ability to identify that there may be a

00:19:48,540 --> 00:19:53,700
vulnerability or something wrong with an

00:19:50,880 --> 00:19:56,490
image down the line in production let's

00:19:53,700 --> 00:19:59,460
leave it where it is go back let's say

00:19:56,490 --> 00:20:01,530
to our base image update the packages on

00:19:59,460 --> 00:20:02,090
the base image so this next shell shock

00:20:01,530 --> 00:20:04,429
of the world

00:20:02,090 --> 00:20:06,350
comes on we need to update our Bosch in

00:20:04,429 --> 00:20:07,940
all our images instead of going to a

00:20:06,350 --> 00:20:09,919
thousand servers and update that

00:20:07,940 --> 00:20:11,330
manually or have something like chef or

00:20:09,919 --> 00:20:14,600
puppet or ansible actually try and do

00:20:11,330 --> 00:20:16,220
that let's patch our base image run our

00:20:14,600 --> 00:20:18,559
CI because that's going to be very

00:20:16,220 --> 00:20:21,169
predictable and then slowly you know

00:20:18,559 --> 00:20:23,059
DCOs marathon kubernetes is going to

00:20:21,169 --> 00:20:25,429
deploy that new patch over in the

00:20:23,059 --> 00:20:27,559
environment that's something that is

00:20:25,429 --> 00:20:30,409
very hard to see for security people to

00:20:27,559 --> 00:20:34,730
understand but once they understand it

00:20:30,409 --> 00:20:36,380
it it really points out that all the

00:20:34,730 --> 00:20:39,470
benefits that we know about running

00:20:36,380 --> 00:20:41,929
micro services can actually be extended

00:20:39,470 --> 00:20:44,600
to security and all the things that we

00:20:41,929 --> 00:20:46,730
know and like about this us about

00:20:44,600 --> 00:20:48,200
marathon about about kubernetes the

00:20:46,730 --> 00:20:50,899
ability to automate things on a large

00:20:48,200 --> 00:20:54,919
scale security can co-op that and

00:20:50,899 --> 00:20:57,950
actually make it part of of that of the

00:20:54,919 --> 00:21:00,590
flow to fix a security problem so this

00:20:57,950 --> 00:21:02,659
is this is the the dev sykov security

00:21:00,590 --> 00:21:04,970
programs if we are being container

00:21:02,659 --> 00:21:06,529
oriented the things to remember is we

00:21:04,970 --> 00:21:08,870
need to make sure that we have a good

00:21:06,529 --> 00:21:10,669
base image program and we need to make

00:21:08,870 --> 00:21:13,760
sure that we understand where security

00:21:10,669 --> 00:21:15,770
stops and that is as the the images is

00:21:13,760 --> 00:21:17,299
deployed we really don't have a way to

00:21:15,770 --> 00:21:19,730
affect it so anything that we need to

00:21:17,299 --> 00:21:23,270
fix has to go back to the beginning so

00:21:19,730 --> 00:21:25,789
that's that's one picture another way to

00:21:23,270 --> 00:21:26,899
look at things is from a pipeline point

00:21:25,789 --> 00:21:28,850
of view and I think that's probably

00:21:26,899 --> 00:21:31,580
going to be a little bit more relevant

00:21:28,850 --> 00:21:35,210
to to how you actually operationalize

00:21:31,580 --> 00:21:38,330
this this whole thing so this is our

00:21:35,210 --> 00:21:40,990
pipeline and our pipeline has distinct

00:21:38,330 --> 00:21:43,880
phases you know build ship run whatever

00:21:40,990 --> 00:21:47,299
the the flavor between two two and three

00:21:43,880 --> 00:21:50,210
of those but basically securing the the

00:21:47,299 --> 00:21:52,429
build phase when we have an image what

00:21:50,210 --> 00:21:54,590
do we need to do so as we said use an

00:21:52,429 --> 00:21:56,299
organization endorsed based image that

00:21:54,590 --> 00:21:58,190
has already been corrected and published

00:21:56,299 --> 00:22:00,260
and it's not just base image it could be

00:21:58,190 --> 00:22:02,539
a library of these base images you could

00:22:00,260 --> 00:22:05,779
have your basic CentOS basic CentOS plus

00:22:02,539 --> 00:22:09,500
Java lean and mean go go and do it basic

00:22:05,779 --> 00:22:11,539
image plus node JDK JRE all these web

00:22:09,500 --> 00:22:13,940
technology can be packaged together and

00:22:11,539 --> 00:22:16,160
be made available and create consistency

00:22:13,940 --> 00:22:18,500
across your development stream

00:22:16,160 --> 00:22:19,910
and not it's not only going to be good

00:22:18,500 --> 00:22:22,640
operationally it's actually going to be

00:22:19,910 --> 00:22:24,380
good for for security we need to

00:22:22,640 --> 00:22:27,440
evaluate the risk based on both

00:22:24,380 --> 00:22:29,750
configuration and content so what you

00:22:27,440 --> 00:22:32,180
put in the image besides the executables

00:22:29,750 --> 00:22:36,320
did you leave an SSH key in it do you

00:22:32,180 --> 00:22:39,710
have the right controls is your HTTP

00:22:36,320 --> 00:22:41,480
server managed with SSL Certificates

00:22:39,710 --> 00:22:43,220
where did the SSL Certificates come from

00:22:41,480 --> 00:22:44,660
how do we actually mount them in that

00:22:43,220 --> 00:22:46,610
we'll talk about a little bit later when

00:22:44,660 --> 00:22:48,680
we talk about secrets but basically

00:22:46,610 --> 00:22:51,290
what's in the image is important because

00:22:48,680 --> 00:22:54,560
those are going to be distributed along

00:22:51,290 --> 00:22:56,660
the the pipeline and may result in a in

00:22:54,560 --> 00:22:58,940
a large footprint along all the servers

00:22:56,660 --> 00:23:00,650
scan for vulnerabilities that's usually

00:22:58,940 --> 00:23:03,080
what people are concentrated in but scan

00:23:00,650 --> 00:23:04,760
them against the policy don't just you

00:23:03,080 --> 00:23:06,380
know send me an email with all the

00:23:04,760 --> 00:23:10,250
vulnerabilities that I have in my image

00:23:06,380 --> 00:23:11,510
because if everybody has the the service

00:23:10,250 --> 00:23:13,430
on the docker hub where you get your

00:23:11,510 --> 00:23:15,170
vulnerabilities does it make any sense

00:23:13,430 --> 00:23:18,170
to you do you know what it's what CVE

00:23:15,170 --> 00:23:21,320
this or that actually means no because

00:23:18,170 --> 00:23:23,870
there is really no straight way to know

00:23:21,320 --> 00:23:25,760
that because we need to compare it

00:23:23,870 --> 00:23:28,340
against the organ the the poll the

00:23:25,760 --> 00:23:30,170
organization's policy for vulnerability

00:23:28,340 --> 00:23:32,420
and something that might be relevant to

00:23:30,170 --> 00:23:34,100
one group of services may not be

00:23:32,420 --> 00:23:36,550
relevant to another group of service so

00:23:34,100 --> 00:23:38,780
scans from vulnerabilities but evaluated

00:23:36,550 --> 00:23:41,390
against a policy and then make sure that

00:23:38,780 --> 00:23:43,670
everybody is on the same page there are

00:23:41,390 --> 00:23:45,800
the information let's say about an image

00:23:43,670 --> 00:23:47,810
is what that image is what it contains

00:23:45,800 --> 00:23:49,070
what is it gonna run what's the entry

00:23:47,810 --> 00:23:50,990
point

00:23:49,070 --> 00:23:53,090
what's the vulnerability posture what

00:23:50,990 --> 00:23:55,430
the risk posture of the image that those

00:23:53,090 --> 00:23:57,740
bits and pieces are going to be at

00:23:55,430 --> 00:23:58,850
different places and we've got to make

00:23:57,740 --> 00:24:01,520
sure that everybody's on the same page

00:23:58,850 --> 00:24:03,230
it both development and security and

00:24:01,520 --> 00:24:05,330
operations know that this image is good

00:24:03,230 --> 00:24:07,220
enough to run because it has the right

00:24:05,330 --> 00:24:09,170
entry point we've assessed it we know

00:24:07,220 --> 00:24:11,210
what the risk posture is the risk for is

00:24:09,170 --> 00:24:14,210
relevant to what that image is going to

00:24:11,210 --> 00:24:16,040
do if if that image is in scope for pick

00:24:14,210 --> 00:24:18,650
your favorite regulation PCI HIPAA

00:24:16,040 --> 00:24:20,210
whatever that is we need to make sure

00:24:18,650 --> 00:24:21,590
that that that is the right way and

00:24:20,210 --> 00:24:24,410
everybody should agree that this image

00:24:21,590 --> 00:24:27,890
is good enough to run and that usually

00:24:24,410 --> 00:24:28,400
happens from again the CI side probably

00:24:27,890 --> 00:24:30,590
at the

00:24:28,400 --> 00:24:32,450
end of the build going into test right

00:24:30,590 --> 00:24:34,430
we don't want to waste test time on

00:24:32,450 --> 00:24:36,440
images that are eventually going to be

00:24:34,430 --> 00:24:40,130
out are out of compliance for for the

00:24:36,440 --> 00:24:42,590
organization the next step is to start

00:24:40,130 --> 00:24:44,870
to accept only those known trusted

00:24:42,590 --> 00:24:47,990
images that we've been that have been

00:24:44,870 --> 00:24:50,480
through the evaluation process into your

00:24:47,990 --> 00:24:52,970
test and then beyond in the pipeline so

00:24:50,480 --> 00:24:55,100
all the accept note images approve

00:24:52,970 --> 00:24:56,660
images based on the risk again relevant

00:24:55,100 --> 00:24:59,090
to the environment that it's going to

00:24:56,660 --> 00:25:01,640
run in maintain the integrity of the

00:24:59,090 --> 00:25:02,900
image so sign it take caches of it do

00:25:01,640 --> 00:25:05,120
whatever you need to do in order to make

00:25:02,900 --> 00:25:07,250
sure that that is the same image and

00:25:05,120 --> 00:25:09,350
then start to keep inventory right one

00:25:07,250 --> 00:25:11,390
of the things that security needs to

00:25:09,350 --> 00:25:14,140
provide is a measurement of control

00:25:11,390 --> 00:25:16,430
measurement of compliance inventory and

00:25:14,140 --> 00:25:18,770
understanding what has been pulled where

00:25:16,430 --> 00:25:24,700
what is running where is an important

00:25:18,770 --> 00:25:27,260
part of the process the next thing is to

00:25:24,700 --> 00:25:29,600
operationally as we start to then deploy

00:25:27,260 --> 00:25:32,270
things into our data center into our

00:25:29,600 --> 00:25:34,430
clusters is to differentiate between

00:25:32,270 --> 00:25:37,940
what's going to be out of automation

00:25:34,430 --> 00:25:40,520
which is more predictable less

00:25:37,940 --> 00:25:41,720
error-prone than what humans can do even

00:25:40,520 --> 00:25:44,330
though there could be errors in

00:25:41,720 --> 00:25:45,890
automation and we've all seen those but

00:25:44,330 --> 00:25:47,390
they are a lot more predictable so if

00:25:45,890 --> 00:25:49,910
things go bad they go really really bad

00:25:47,390 --> 00:25:51,740
and if things go well usually they go

00:25:49,910 --> 00:25:53,420
well but we need to separate what is

00:25:51,740 --> 00:25:54,950
automation and what is human and that's

00:25:53,420 --> 00:25:57,050
really really important because one of

00:25:54,950 --> 00:25:59,600
the things one of the artifacts of this

00:25:57,050 --> 00:26:03,080
whole program is that you're auditing it

00:25:59,600 --> 00:26:05,480
becomes binary everything that you get

00:26:03,080 --> 00:26:06,800
out of your container system is either

00:26:05,480 --> 00:26:08,870
something that is part of the

00:26:06,800 --> 00:26:10,370
application part of the intended use or

00:26:08,870 --> 00:26:13,640
deployment of the application or

00:26:10,370 --> 00:26:16,940
something that is not and I think it's

00:26:13,640 --> 00:26:19,550
kind of a good time to tell you a little

00:26:16,940 --> 00:26:22,190
bit story and imagine yourself as

00:26:19,550 --> 00:26:24,050
working in a security operation center

00:26:22,190 --> 00:26:26,870
and you get all these screens and

00:26:24,050 --> 00:26:28,730
everything is is flushing you know logs

00:26:26,870 --> 00:26:31,370
of everything and suddenly you have a

00:26:28,730 --> 00:26:33,140
cluster and there's a lot of of of

00:26:31,370 --> 00:26:34,610
networking events and suddenly you see

00:26:33,140 --> 00:26:37,280
on one of your production servers that

00:26:34,610 --> 00:26:41,250
runs an application a you know call-out

00:26:37,280 --> 00:26:44,790
- I don't know

00:26:41,250 --> 00:26:48,270
Google for a search or trying to get

00:26:44,790 --> 00:26:51,300
into a Microsoft website or to a Linux

00:26:48,270 --> 00:26:52,770
website or basically anything out of

00:26:51,300 --> 00:26:54,390
that server so that that's usually out

00:26:52,770 --> 00:26:57,120
of the ordinary right production server

00:26:54,390 --> 00:26:58,710
should not kind of you know send an HTTP

00:26:57,120 --> 00:27:02,850
request outwards or at least attempt to

00:26:58,710 --> 00:27:05,940
do that the question on the security

00:27:02,850 --> 00:27:07,590
operation center is what what is the

00:27:05,940 --> 00:27:09,210
significance of that is it good is it

00:27:07,590 --> 00:27:10,710
bad should I be worried right every

00:27:09,210 --> 00:27:12,270
security professional in their head is

00:27:10,710 --> 00:27:16,500
going to do an immediate triage on that

00:27:12,270 --> 00:27:18,270
and the question is well I don't wanna

00:27:16,500 --> 00:27:19,800
raise alarms because it's it's a pretty

00:27:18,270 --> 00:27:21,330
harmless operation especially if it goes

00:27:19,800 --> 00:27:23,760
into a familiar site and not somewhere

00:27:21,330 --> 00:27:25,650
in Russia but on the other hand you know

00:27:23,760 --> 00:27:28,200
is it in the maintenance window is it

00:27:25,650 --> 00:27:30,360
something that an administrator might do

00:27:28,200 --> 00:27:31,740
maybe somebody's debugging a problem and

00:27:30,360 --> 00:27:33,570
they had to go on the server and while

00:27:31,740 --> 00:27:35,700
they're on the server they you know used

00:27:33,570 --> 00:27:38,840
curcumin to search something or to

00:27:35,700 --> 00:27:41,550
upload a file so there could be a lot of

00:27:38,840 --> 00:27:43,320
situations where it's a gray area we

00:27:41,550 --> 00:27:46,350
really don't know if it's a problem yet

00:27:43,320 --> 00:27:48,720
that's the problem of separating human

00:27:46,350 --> 00:27:50,520
action and dealing with people that have

00:27:48,720 --> 00:27:52,080
to go in a server environment and

00:27:50,520 --> 00:27:53,580
actually do things and even though we

00:27:52,080 --> 00:27:55,290
think that we run a very automated

00:27:53,580 --> 00:27:57,360
environment in the cloud and everything

00:27:55,290 --> 00:27:59,370
is scripted and everything is code there

00:27:57,360 --> 00:28:00,960
is always gonna be that instance where

00:27:59,370 --> 00:28:02,700
somebody needs to fix a problem and

00:28:00,960 --> 00:28:05,340
they're gonna go on a host and actually

00:28:02,700 --> 00:28:06,870
fix it that really should not happen in

00:28:05,340 --> 00:28:09,390
containers right because even the most

00:28:06,870 --> 00:28:12,150
fundamental problems with containers is

00:28:09,390 --> 00:28:13,710
take that node offline your automation

00:28:12,150 --> 00:28:16,260
is going to spring up another node so

00:28:13,710 --> 00:28:18,660
we're not gonna lose service and let's

00:28:16,260 --> 00:28:20,490
debug this offline so so separating

00:28:18,660 --> 00:28:21,690
those those automation from human

00:28:20,490 --> 00:28:23,610
actions is something that is very

00:28:21,690 --> 00:28:26,010
fundamental to the way that we run with

00:28:23,610 --> 00:28:28,050
micro services and with containers and

00:28:26,010 --> 00:28:29,700
with that now that we control human

00:28:28,050 --> 00:28:32,460
action we can control privilege

00:28:29,700 --> 00:28:34,110
elevation we can make sure that whatever

00:28:32,460 --> 00:28:36,060
is running inside of the containers

00:28:34,110 --> 00:28:38,640
nobody patches them nobody adds software

00:28:36,060 --> 00:28:40,740
to them and we also need a continuous

00:28:38,640 --> 00:28:43,290
audit trail off the containerized

00:28:40,740 --> 00:28:45,810
environment so that we have a good

00:28:43,290 --> 00:28:48,410
understanding of what is a human

00:28:45,810 --> 00:28:51,110
operation versus and

00:28:48,410 --> 00:28:52,820
and automated operation and that is

00:28:51,110 --> 00:28:55,520
going to be really what's gonna

00:28:52,820 --> 00:28:58,340
eventually create a lot of trust between

00:28:55,520 --> 00:29:00,500
development and ops and security is the

00:28:58,340 --> 00:29:01,850
fact that if we put out all the rules up

00:29:00,500 --> 00:29:04,430
front we're going to get a situation

00:29:01,850 --> 00:29:06,350
where all our data is such that it's

00:29:04,430 --> 00:29:07,550
very easy to decide if something is bad

00:29:06,350 --> 00:29:09,200
or not and we don't have to do that

00:29:07,550 --> 00:29:11,900
triage and do all this data management

00:29:09,200 --> 00:29:14,990
in the Security Operations Center and

00:29:11,900 --> 00:29:17,780
that extends into what containers are

00:29:14,990 --> 00:29:20,780
running so so keep track of the user

00:29:17,780 --> 00:29:22,850
context in containers understand what is

00:29:20,780 --> 00:29:24,590
the appropriate level of access that you

00:29:22,850 --> 00:29:26,030
should get inside of the application if

00:29:24,590 --> 00:29:27,650
you can use the service account around

00:29:26,030 --> 00:29:29,180
the application please use a service

00:29:27,650 --> 00:29:31,100
account to run the application do not

00:29:29,180 --> 00:29:33,950
think that you can run everything on the

00:29:31,100 --> 00:29:35,930
route limit your executables of what you

00:29:33,950 --> 00:29:37,610
have in the image - only the approved

00:29:35,930 --> 00:29:39,650
functions something that is really

00:29:37,610 --> 00:29:43,000
needed so don't don't put a whole bunch

00:29:39,650 --> 00:29:46,520
of just a bin directory from your

00:29:43,000 --> 00:29:51,040
vanilla flavor Unix in something that

00:29:46,520 --> 00:29:53,330
maybe needs RM LS and you know ping and

00:29:51,040 --> 00:29:55,040
make sure that you have some context to

00:29:53,330 --> 00:29:57,950
where network controls right so there's

00:29:55,040 --> 00:30:00,710
been a few talks this this week and and

00:29:57,950 --> 00:30:02,450
the the networking the ability to put

00:30:00,710 --> 00:30:04,790
overlay networks the ability to

00:30:02,450 --> 00:30:07,400
associate containers even on the same

00:30:04,790 --> 00:30:10,120
host with the right networking controls

00:30:07,400 --> 00:30:12,290
is important and then secrets management

00:30:10,120 --> 00:30:14,510
because we can't put anything sensitive

00:30:12,290 --> 00:30:16,370
in the image we have to distribute that

00:30:14,510 --> 00:30:18,020
in real time into the containers and

00:30:16,370 --> 00:30:20,510
luckily for us all the major

00:30:18,020 --> 00:30:22,460
orchestration tools have the ability to

00:30:20,510 --> 00:30:24,530
then have secrets management and that's

00:30:22,460 --> 00:30:26,540
something that can be augmented with

00:30:24,530 --> 00:30:28,880
third-party solutions and you can even

00:30:26,540 --> 00:30:30,920
integrate it with your organizational

00:30:28,880 --> 00:30:34,270
secrets management in case you need to

00:30:30,920 --> 00:30:37,850
access services that are outside where

00:30:34,270 --> 00:30:40,580
your environment is so if we do all that

00:30:37,850 --> 00:30:42,230
we start to give security what they

00:30:40,580 --> 00:30:45,110
actually want right because we can give

00:30:42,230 --> 00:30:46,820
them low-risk code unhardened images not

00:30:45,110 --> 00:30:48,230
hard and servers anymore hardened images

00:30:46,820 --> 00:30:52,660
by the way the server's themselves

00:30:48,230 --> 00:30:54,860
they're going to be hardened by your

00:30:52,660 --> 00:30:57,860
clusters they're going to be hardened by

00:30:54,860 --> 00:31:00,500
the manufacturers of the operating

00:30:57,860 --> 00:31:01,460
systems Mesa sphere is going to take

00:31:00,500 --> 00:31:03,289
care of the hard

00:31:01,460 --> 00:31:06,919
of the orchestration tool the fact that

00:31:03,289 --> 00:31:08,600
notes can communicate securely darker

00:31:06,919 --> 00:31:10,220
does a lot of good things with making

00:31:08,600 --> 00:31:13,159
sure that darker nodes can communicate

00:31:10,220 --> 00:31:15,110
securely and kubernetes at the far end

00:31:13,159 --> 00:31:16,940
who has trust between nodes so that

00:31:15,110 --> 00:31:19,850
there's a level of hardening on the

00:31:16,940 --> 00:31:21,940
platform itself that needs to extend

00:31:19,850 --> 00:31:24,440
into the image so that we have good

00:31:21,940 --> 00:31:26,659
overlay on the image controlled

00:31:24,440 --> 00:31:28,429
environment there's no you're not going

00:31:26,659 --> 00:31:30,320
to have a more controlled predictable

00:31:28,429 --> 00:31:32,510
and secure environment if you do

00:31:30,320 --> 00:31:33,740
containers the right way and that is

00:31:32,510 --> 00:31:35,990
something that we start to educate

00:31:33,740 --> 00:31:37,970
security people on because we need to

00:31:35,990 --> 00:31:41,809
give them the tools to then go to their

00:31:37,970 --> 00:31:43,640
management and prove that there is

00:31:41,809 --> 00:31:45,620
security and there is compliance in the

00:31:43,640 --> 00:31:47,690
system and then the constant vigilance

00:31:45,620 --> 00:31:50,149
becomes a lot easier because now we

00:31:47,690 --> 00:31:52,460
don't have that grey area again if we do

00:31:50,149 --> 00:31:54,049
this right every time something needs to

00:31:52,460 --> 00:31:55,700
be stopped that means that it's not part

00:31:54,049 --> 00:31:57,140
of the application there's not going to

00:31:55,700 --> 00:31:59,299
be triage anymore we don't need

00:31:57,140 --> 00:32:00,649
mountains of data in a Security

00:31:59,299 --> 00:32:02,779
Operations Center when we talk about

00:32:00,649 --> 00:32:05,360
containerize environment we can pretty

00:32:02,779 --> 00:32:08,179
much predict what we're going to be part

00:32:05,360 --> 00:32:09,409
of the application and what's not so I'm

00:32:08,179 --> 00:32:11,570
gonna leave some time for questions but

00:32:09,409 --> 00:32:14,750
one summary slide which is about

00:32:11,570 --> 00:32:17,480
communication so please talk to your

00:32:14,750 --> 00:32:19,100
security colleagues understand what your

00:32:17,480 --> 00:32:20,600
security needs are right the security

00:32:19,100 --> 00:32:23,000
needs of a bank are different than the

00:32:20,600 --> 00:32:24,380
security needs of a hospital and are

00:32:23,000 --> 00:32:26,690
different than the security needs of a

00:32:24,380 --> 00:32:28,220
manufacturer there are some basic things

00:32:26,690 --> 00:32:32,059
that everybody should uphold but the

00:32:28,220 --> 00:32:34,399
level of security might be different ask

00:32:32,059 --> 00:32:36,590
about compliance really try try to ask

00:32:34,399 --> 00:32:38,929
what security people need to convey

00:32:36,590 --> 00:32:41,330
further either to compliance or to their

00:32:38,929 --> 00:32:43,460
own management and please offer your

00:32:41,330 --> 00:32:45,559
expertise around automation tell them

00:32:43,460 --> 00:32:48,080
what automations can do for them tell

00:32:45,559 --> 00:32:50,210
them that there is a great deal of

00:32:48,080 --> 00:32:52,370
benefit that could come from given the

00:32:50,210 --> 00:32:54,679
patch management example or give them

00:32:52,370 --> 00:32:56,260
the ability to view the containerized

00:32:54,679 --> 00:32:58,100
environment you know in a containerized

00:32:56,260 --> 00:33:00,140
environment again if it's well built

00:32:58,100 --> 00:33:01,820
it's pretty self documented we don't

00:33:00,140 --> 00:33:04,039
need to cmdbs any more with a lot of

00:33:01,820 --> 00:33:05,539
data on them and if they still resist

00:33:04,039 --> 00:33:08,029
tell them that I said that containers

00:33:05,539 --> 00:33:10,789
are good for security because they truly

00:33:08,029 --> 00:33:12,679
are and I was convinced basically the

00:33:10,789 --> 00:33:14,809
five minutes after I did my first docker

00:33:12,679 --> 00:33:16,909
run command it

00:33:14,809 --> 00:33:19,039
shock me and then later I said well that

00:33:16,909 --> 00:33:20,659
actually is really cool but we're going

00:33:19,039 --> 00:33:22,100
to need to do a lot of education so

00:33:20,659 --> 00:33:22,519
please be patient with your security

00:33:22,100 --> 00:33:24,440
people

00:33:22,519 --> 00:33:26,620
please understand what the motivations

00:33:24,440 --> 00:33:30,679
are please offer your support and

00:33:26,620 --> 00:33:33,139
whatever you do don't steam don't don't

00:33:30,679 --> 00:33:34,940
don't steamroll over them because at one

00:33:33,139 --> 00:33:37,419
point even if you do get the permission

00:33:34,940 --> 00:33:39,919
to run your application or start your

00:33:37,419 --> 00:33:41,539
containerization project at one point

00:33:39,919 --> 00:33:43,309
you're going to hit compliance and you

00:33:41,539 --> 00:33:45,080
can steamroll security you really can't

00:33:43,309 --> 00:33:47,210
steamroll compliance so that that's my

00:33:45,080 --> 00:33:58,899
soapbox thank you very much I'm going to

00:33:47,210 --> 00:33:58,899
open it up for questions yes sir

00:34:38,730 --> 00:34:46,780
yeah so so no they're counterintuitive

00:34:44,860 --> 00:34:47,980
if you try to think like this that's

00:34:46,780 --> 00:34:49,960
that's where the problem is and I think

00:34:47,980 --> 00:34:51,940
security is still stuck in this model

00:34:49,960 --> 00:34:54,130
where everything happens sequentially

00:34:51,940 --> 00:34:56,560
where there are distinct gates between

00:34:54,130 --> 00:34:59,560
things when there is time to do things

00:34:56,560 --> 00:35:01,720
when there is when security basically

00:34:59,560 --> 00:35:04,180
had more clout you know maybe 10-15

00:35:01,720 --> 00:35:06,400
years ago that's where I think the

00:35:04,180 --> 00:35:09,130
mindset of more security and compliance

00:35:06,400 --> 00:35:10,270
people is I think what we need to do is

00:35:09,130 --> 00:35:12,130
we need to tell them that they can

00:35:10,270 --> 00:35:15,130
execute even a better version of this

00:35:12,130 --> 00:35:17,500
model in the DevOps world with

00:35:15,130 --> 00:35:20,410
containers because the middle part of

00:35:17,500 --> 00:35:24,100
trying to do security we're where all

00:35:20,410 --> 00:35:27,220
these things are are are automated and

00:35:24,100 --> 00:35:30,660
fast but also in a server environment

00:35:27,220 --> 00:35:33,310
that is that is very prone to change and

00:35:30,660 --> 00:35:36,340
where you still have administrative

00:35:33,310 --> 00:35:40,360
action where we're so that that's middle

00:35:36,340 --> 00:35:43,780
world of DevOps before containers is is

00:35:40,360 --> 00:35:47,730
where we have a problem and and my view

00:35:43,780 --> 00:35:50,980
is that we can execute a model that is

00:35:47,730 --> 00:35:54,190
going to kind of leapfrog that with

00:35:50,980 --> 00:35:57,210
containers and and and and break that

00:35:54,190 --> 00:35:57,210
that that problem

00:36:26,690 --> 00:36:37,160
so think think if they think about the

00:36:31,110 --> 00:36:37,160
the tolerance for change right so so

00:37:01,160 --> 00:37:06,809
well the problem is that there's still a

00:37:04,859 --> 00:37:10,260
lot of moving parts there and I think

00:37:06,809 --> 00:37:13,920
it's the the distinction is that you're

00:37:10,260 --> 00:37:17,940
still running a configuration tool to

00:37:13,920 --> 00:37:20,069
configure servers that are still

00:37:17,940 --> 00:37:22,410
multi-purpose where there are still a

00:37:20,069 --> 00:37:25,109
lot of processes that run on them that

00:37:22,410 --> 00:37:27,089
may or may not be needed for the

00:37:25,109 --> 00:37:29,190
application that is put on them and

00:37:27,089 --> 00:37:32,099
there's a lot more noise there's a lot

00:37:29,190 --> 00:37:33,859
more complexity in there that makes it

00:37:32,099 --> 00:37:40,710
hard for security to discern between

00:37:33,859 --> 00:37:45,530
lawful and unlawful operations oh we're

00:37:40,710 --> 00:37:45,530
getting there no but look

00:38:04,430 --> 00:38:09,630
so think think think about it this way

00:38:07,170 --> 00:38:11,430
in maybe in the organization you run a

00:38:09,630 --> 00:38:14,220
super controlled super tight super

00:38:11,430 --> 00:38:16,230
predictable DevOps which is awesome but

00:38:14,220 --> 00:38:17,849
in most organization what's going to

00:38:16,230 --> 00:38:20,790
happen is that the way to put that

00:38:17,849 --> 00:38:22,710
discipline into the real world is where

00:38:20,790 --> 00:38:27,150
containers come in because you cannot

00:38:22,710 --> 00:38:30,180
run in any other way a server that is

00:38:27,150 --> 00:38:32,400
single purpose and dedicated because

00:38:30,180 --> 00:38:34,740
once you've got the image running and it

00:38:32,400 --> 00:38:37,470
has an entry point then as you deploy it

00:38:34,740 --> 00:38:39,510
it's going to remain the same only in

00:38:37,470 --> 00:38:42,599
super tight super control organizations

00:38:39,510 --> 00:38:44,820
do the devops of servers and the

00:38:42,599 --> 00:38:47,099
provisioning of machines happen in such

00:38:44,820 --> 00:38:51,630
a way that that it does remain the same

00:38:47,099 --> 00:38:52,339
as the day it was provisioned all right

00:38:51,630 --> 00:38:57,650
awesome

00:38:52,339 --> 00:38:57,650
any more questions yes sir

00:39:03,630 --> 00:39:12,990
well does it give you code host

00:39:05,880 --> 00:39:15,180
operations in cybersecurity yeah so so

00:39:12,990 --> 00:39:17,220
that's that's where there's really no

00:39:15,180 --> 00:39:19,550
right answer right in in most

00:39:17,220 --> 00:39:21,750
organizations what we found is that

00:39:19,550 --> 00:39:23,370
docker is going to take care of docker

00:39:21,750 --> 00:39:26,280
so the security of the platform is

00:39:23,370 --> 00:39:28,230
awesome on the other hand you know 80%

00:39:26,280 --> 00:39:29,910
90% of the code that's gonna run in a

00:39:28,230 --> 00:39:32,010
cluster is not going to be Dockers it's

00:39:29,910 --> 00:39:33,810
going to be your code so how do you

00:39:32,010 --> 00:39:36,930
protect your code vulnerability

00:39:33,810 --> 00:39:39,230
management is one thing configuration

00:39:36,930 --> 00:39:44,070
management which docker doesn't touch

00:39:39,230 --> 00:39:45,630
the ability to identify images so image

00:39:44,070 --> 00:39:47,580
signing is one of them but image signing

00:39:45,630 --> 00:39:48,930
only tells you that they're intact and

00:39:47,580 --> 00:39:51,510
who provisioned them they it doesn't

00:39:48,930 --> 00:39:54,390
really associate it with risk so there

00:39:51,510 --> 00:39:56,130
are some things where docker security is

00:39:54,390 --> 00:39:58,740
going to fill a lot of those

00:39:56,130 --> 00:40:00,900
requirements it may not be the whole

00:39:58,740 --> 00:40:02,340
picture but that's okay a single service

00:40:00,900 --> 00:40:05,760
usually doesn't fill the whole picture

00:40:02,340 --> 00:40:07,500
but it's but it don't don't go into a

00:40:05,760 --> 00:40:09,510
discussion with your security people and

00:40:07,500 --> 00:40:10,950
telling them okay docker is gonna take

00:40:09,510 --> 00:40:13,530
care of all my security because that's

00:40:10,950 --> 00:40:14,640
factually not true and they're gonna see

00:40:13,530 --> 00:40:16,320
right through it and then you're gonna

00:40:14,640 --> 00:40:18,090
lose credibility right so so we gotta

00:40:16,320 --> 00:40:20,220
understand tell us what your security

00:40:18,090 --> 00:40:21,990
requirement is I'll tell you what darker

00:40:20,220 --> 00:40:24,060
can answer and if we need to fill those

00:40:21,990 --> 00:40:26,220
gaps with policy with with solutions

00:40:24,060 --> 00:40:27,750
with open source solutions whatever then

00:40:26,220 --> 00:40:32,250
then we can do that and that makes the

00:40:27,750 --> 00:40:34,400
discussion a lot more intelligent yes

00:40:32,250 --> 00:40:34,400
sir

00:41:15,990 --> 00:41:23,400
hmm so I think it's a multi-pronged

00:41:20,520 --> 00:41:26,160
approach right we need to scan the the

00:41:23,400 --> 00:41:28,589
images now it's a it's not just that

00:41:26,160 --> 00:41:30,420
humans are fallible it's also that over

00:41:28,589 --> 00:41:32,550
time things get discovered that you

00:41:30,420 --> 00:41:34,980
might have not seen before right so we

00:41:32,550 --> 00:41:37,140
need to understand what our risk foster

00:41:34,980 --> 00:41:38,849
for in images continue to evaluate it

00:41:37,140 --> 00:41:42,890
all the time and see if something needs

00:41:38,849 --> 00:41:47,300
to change in our replacing or patching

00:41:42,890 --> 00:41:50,580
but also the way that the way that

00:41:47,300 --> 00:41:52,260
containers are run if we reduce the

00:41:50,580 --> 00:41:54,810
bloat if we reduce the attack surface

00:41:52,260 --> 00:41:57,330
the less stuff that we put in an image

00:41:54,810 --> 00:42:00,420
the less stuff can be exploited the less

00:41:57,330 --> 00:42:04,320
stuff is subject to two vulnerabilities

00:42:00,420 --> 00:42:08,520
so one of the things that I personally

00:42:04,320 --> 00:42:10,560
am NOT a big fan of is to scan actually

00:42:08,520 --> 00:42:12,240
running containers all the time

00:42:10,560 --> 00:42:16,800
because that's a very costly operation

00:42:12,240 --> 00:42:20,220
CPU resources and so on so I'm more of a

00:42:16,800 --> 00:42:22,109
proponent of let's make sure that we

00:42:20,220 --> 00:42:24,390
have good control over the integrity of

00:42:22,109 --> 00:42:27,839
the images and of the containers as they

00:42:24,390 --> 00:42:30,980
are run and then if we know the risk

00:42:27,839 --> 00:42:33,750
foster of an image we're then able to

00:42:30,980 --> 00:42:37,020
reflect on the containers that run from

00:42:33,750 --> 00:42:40,650
it and extrapolate that data and find

00:42:37,020 --> 00:42:43,980
that that vulnerability in the container

00:42:40,650 --> 00:42:47,070
so it's an operational model that relies

00:42:43,980 --> 00:42:49,710
on the fact that that the the last fan

00:42:47,070 --> 00:42:51,540
of containers is fairly short and we're

00:42:49,710 --> 00:42:54,420
able to replace them and we're able to

00:42:51,540 --> 00:42:56,160
replace them on a large scale so if we

00:42:54,420 --> 00:42:59,119
if we do good assessments of the image

00:42:56,160 --> 00:42:59,119
we can then roll them out

00:43:05,910 --> 00:43:10,000
well I'm not saying that the container

00:43:08,859 --> 00:43:13,090
is gonna run but but we've seen that

00:43:10,000 --> 00:43:15,100
people release multiple times a day and

00:43:13,090 --> 00:43:16,240
it's not because containers are not

00:43:15,100 --> 00:43:19,030
going to run for very long but because

00:43:16,240 --> 00:43:20,080
just the way that software is is updated

00:43:19,030 --> 00:43:22,230
they're just going to be replaced over

00:43:20,080 --> 00:43:22,230
time

00:44:03,960 --> 00:44:09,550
yeah I would also say that the that so I

00:44:07,270 --> 00:44:11,560
in principle I agree with you that that

00:44:09,550 --> 00:44:13,690
containers don't have to basically be

00:44:11,560 --> 00:44:17,950
replaced but what we've seen in reality

00:44:13,690 --> 00:44:19,990
is that because of release cycles and

00:44:17,950 --> 00:44:21,670
because of the fact that you run with

00:44:19,990 --> 00:44:23,290
orchestration that is free to kind of

00:44:21,670 --> 00:44:25,240
move containers around and when they do

00:44:23,290 --> 00:44:29,230
that they actually we instantiate them

00:44:25,240 --> 00:44:31,630
from the image so so the the lifes the

00:44:29,230 --> 00:44:33,730
lifespan of container is relatively

00:44:31,630 --> 00:44:36,010
short especially when when when

00:44:33,730 --> 00:44:38,290
concerned with with servers but that's

00:44:36,010 --> 00:44:40,780
really where we are right if we if we

00:44:38,290 --> 00:44:43,980
limit what's in the image to begin with

00:44:40,780 --> 00:44:46,930
and then not allow any addition

00:44:43,980 --> 00:44:51,490
executables or administrative action on

00:44:46,930 --> 00:44:53,680
a container we can with a great degree

00:44:51,490 --> 00:44:55,770
of confidence make sure that we do our

00:44:53,680 --> 00:44:58,750
security vulnerability assessment

00:44:55,770 --> 00:45:00,670
ongoing on the images and that will give

00:44:58,750 --> 00:45:04,240
us an accurate picture of where we are

00:45:00,670 --> 00:45:06,490
vulnerability wise on the containers and

00:45:04,240 --> 00:45:07,930
if something needs to be fixed we can

00:45:06,490 --> 00:45:12,820
fix the image and then roll a new

00:45:07,930 --> 00:45:15,480
version of all the containers I still

00:45:12,820 --> 00:45:15,480
not convinced

00:45:22,670 --> 00:45:36,360
well you know snow seaso is gonna ever

00:45:34,920 --> 00:45:55,200
tell you that their damn center about

00:45:36,360 --> 00:45:57,870
everything okay well when I say should I

00:45:55,200 --> 00:46:00,380
actually mean that 99 plus percent okay

00:45:57,870 --> 00:46:02,340
that's that's that's where I am but but

00:46:00,380 --> 00:46:03,720
what one thing that you'll see with

00:46:02,340 --> 00:46:05,700
security professionals that there we are

00:46:03,720 --> 00:46:07,380
we are a non-committal bad bunch because

00:46:05,700 --> 00:46:07,770
we've been burned so many times all

00:46:07,380 --> 00:46:09,710
right people

00:46:07,770 --> 00:46:12,280
I'm standing between you and beer so

00:46:09,710 --> 00:46:14,719
thank you very much

00:46:12,280 --> 00:46:14,719

YouTube URL: https://www.youtube.com/watch?v=gDK9DR06_oE


