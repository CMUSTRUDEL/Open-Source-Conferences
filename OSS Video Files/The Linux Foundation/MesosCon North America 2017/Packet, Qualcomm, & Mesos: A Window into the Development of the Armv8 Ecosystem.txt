Title: Packet, Qualcomm, & Mesos: A Window into the Development of the Armv8 Ecosystem
Publication date: 2017-09-18
Playlist: MesosCon North America 2017
Description: 
	“One Ring to Bind Them” - Packet, Qualcomm, & Mesos: A Window into the Development of the Armv8 Ecosystem - Ed Vielmetti, Packet

New,​ ​innovative hardware​ ​brings​ ​with​ ​it​ ​the​ opportunity for architectural disruption as well as the ​challenge of how to effectively tap into a vast existing ecosystem of software.  

Cloud native technologies like DC/OS have only increased the velocity and importance of software.  And yet the value to be unlocked from new architectures is ever more compelling, and well worth the struggle.  

Previous MesosCon talks (Asia, June 2017) have spoken about running Mesos on Armv8 processors.  Packet’s Ed Vielmetti will ​use the Qualcomm Centriq™ 2400 (the world’s first 10nm server processor), as a window into the benefits and challenges of embracing new hardware.   

With 48 highly optimized cores, the system provides a compelling new resource for software like DC/OS that is trying to help applications and users get the most out of their infrastructure. Furthermore, Qualcomm’s efforts in concert with the community provides an excellent window into the ecosystem development journey.

As J.R.R. Tolkien said: “All's well that ends better.”

About

Ed Vielmetti
Ed is an Internet veteran with over 30 years experience.

He has extensive experience with networks at all levels - physical, logical, technical, social, political, and financial. He is a graduate of the University of Michigan, and an alumnus of Cisco Systems and Arbor Networks. 

At Packet, Ed leads outreach to a wide variety of software ecosystems, from open source to the Enterprise. His main project is WorksOnARM, which helps to bring cloud native and data center software to ARMv8 servers.

When he's not opening issues on Github, Ed can be found on the amateur radio bands as W8EMV, tinkering with a pile of Raspberry Pis, or co-working at Ann Arbor's Workantile.
Captions: 
	00:00:00,030 --> 00:00:08,820
so thanks everyone for coming my name is

00:00:04,529 --> 00:00:13,170
advil Mehdi I'm from packet this is a

00:00:08,820 --> 00:00:16,080
talk about packet and Qualcomm and me

00:00:13,170 --> 00:00:22,699
sews a window into the development of

00:00:16,080 --> 00:00:22,699
the arm VA ecosystem let's see

00:00:26,750 --> 00:00:30,849
and I need to make sure I get the next

00:00:28,670 --> 00:00:30,849
slide

00:00:37,660 --> 00:00:44,200
okay good

00:00:39,500 --> 00:00:46,490
so the theme is roost loosely around

00:00:44,200 --> 00:00:49,640
Lord of the Rings because you need a

00:00:46,490 --> 00:00:55,060
theme for a talk all's well that ends

00:00:49,640 --> 00:00:58,220
better so I've been working on getting

00:00:55,060 --> 00:01:02,180
software in general to work as well as

00:00:58,220 --> 00:01:06,140
it possibly can on arm systems since I

00:01:02,180 --> 00:01:07,760
got my first demo account at Paquette

00:01:06,140 --> 00:01:11,600
last October

00:01:07,760 --> 00:01:13,910
and started working for them as a

00:01:11,600 --> 00:01:17,020
consultant in January and full time in

00:01:13,910 --> 00:01:19,310
May we announced this week our

00:01:17,020 --> 00:01:22,000
partnership with ARM Holdings to even

00:01:19,310 --> 00:01:22,000
expand that out

00:01:29,390 --> 00:01:39,890
and I'm missing a control here here we

00:01:33,350 --> 00:01:46,040
go so Who am I I'm special projects

00:01:39,890 --> 00:01:47,600
Directorate packet special projects

00:01:46,040 --> 00:01:49,190
director means you can do whatever you

00:01:47,600 --> 00:01:52,280
want as long as you get someone to

00:01:49,190 --> 00:01:55,160
convinced that it's working really well

00:01:52,280 --> 00:01:57,440
I run the works on our project for them

00:01:55,160 --> 00:01:59,570
so the goal of the project is to get

00:01:57,440 --> 00:02:02,420
every bit of software that anyone would

00:01:59,570 --> 00:02:04,400
ever want to run to run as well or

00:02:02,420 --> 00:02:08,060
better on arm as it does on any other

00:02:04,400 --> 00:02:10,520
system I live in Ann Arbor Michigan

00:02:08,060 --> 00:02:15,140
I've been online since the 1980s that's

00:02:10,520 --> 00:02:19,220
me in 1987 after the more in 1988 after

00:02:15,140 --> 00:02:21,590
the Morris worm hit doing a TV interview

00:02:19,220 --> 00:02:24,290
that's an Apollo workstation if anyone

00:02:21,590 --> 00:02:27,890
is room can can go back far enough in

00:02:24,290 --> 00:02:29,900
time that I think it's somewhere on

00:02:27,890 --> 00:02:34,340
YouTube yeah I had someone digitize it

00:02:29,900 --> 00:02:38,480
but a friend of mine annotated it with

00:02:34,340 --> 00:02:40,459
the Raptor with the Raptor notations

00:02:38,480 --> 00:02:42,860
there so I've been doing this for a long

00:02:40,459 --> 00:02:44,480
time long enough to remember that the

00:02:42,860 --> 00:02:47,510
world didn't always used to be Intel

00:02:44,480 --> 00:02:49,100
processors long enough to remember that

00:02:47,510 --> 00:02:50,989
when the new high workstation came out

00:02:49,100 --> 00:02:55,040
you had to do a bunch of work to port

00:02:50,989 --> 00:02:58,970
things to it long enough ago to remember

00:02:55,040 --> 00:03:03,410
when we were running Linux on Intel back

00:02:58,970 --> 00:03:05,600
in the 90s and it was on cheap little

00:03:03,410 --> 00:03:07,880
machines you know the lowest and the

00:03:05,600 --> 00:03:12,470
cheapest way to do it just barely worked

00:03:07,880 --> 00:03:16,130
so I've seen the evolution of new

00:03:12,470 --> 00:03:18,739
architectures before and when when I

00:03:16,130 --> 00:03:20,930
found the arm ecosystem through the

00:03:18,739 --> 00:03:23,090
Raspberry Pi realized that there was

00:03:20,930 --> 00:03:27,380
something really new and special there

00:03:23,090 --> 00:03:30,530
and possible and a little bit about

00:03:27,380 --> 00:03:33,170
packet so I work for packet packets

00:03:30,530 --> 00:03:37,400
based in New York City it's a bare metal

00:03:33,170 --> 00:03:39,450
cloud and for developers we offer

00:03:37,400 --> 00:03:42,390
hardware

00:03:39,450 --> 00:03:42,820
that you can access through api's or

00:03:42,390 --> 00:03:44,780
through

00:03:42,820 --> 00:03:47,010
[Music]

00:03:44,780 --> 00:03:50,190
provisioning tools like ansible and

00:03:47,010 --> 00:03:52,200
terraform it fields for all the world

00:03:50,190 --> 00:03:54,470
like a cloud you know it has the same

00:03:52,200 --> 00:03:57,480
kind of behavior as cloud computing but

00:03:54,470 --> 00:04:00,150
yet from a hardware standpoint it's sort

00:03:57,480 --> 00:04:01,709
of more like colocation and we offer

00:04:00,150 --> 00:04:04,860
service by the hour and by the month

00:04:01,709 --> 00:04:06,989
about ten thousand users about fifty

00:04:04,860 --> 00:04:10,680
thousand deploys a month under eight

00:04:06,989 --> 00:04:15,299
minutes both x86 hardware and a bunch of

00:04:10,680 --> 00:04:17,450
configurations and arm hardware and the

00:04:15,299 --> 00:04:20,040
hardware coming soon although that's

00:04:17,450 --> 00:04:24,960
that was news to me when it got added to

00:04:20,040 --> 00:04:26,880
this slide we're agnostic about what you

00:04:24,960 --> 00:04:29,190
do with this once you get turned up once

00:04:26,880 --> 00:04:32,100
once things get turned up but we're

00:04:29,190 --> 00:04:34,979
really all about empowering people to to

00:04:32,100 --> 00:04:39,870
build things especially to build things

00:04:34,979 --> 00:04:41,790
on bare metal so we give access to we

00:04:39,870 --> 00:04:44,340
give access to infrastructure that lets

00:04:41,790 --> 00:04:46,560
people do things like develop

00:04:44,340 --> 00:04:48,289
hypervisors and do fundamental

00:04:46,560 --> 00:04:51,900
infrastructure without a lot of

00:04:48,289 --> 00:04:53,789
intervening software in the way that we

00:04:51,900 --> 00:04:56,940
would run it's a little bit about this

00:04:53,789 --> 00:04:58,289
talk we'd sort of frame it for you

00:04:56,940 --> 00:05:00,660
I want to talk a little about why

00:04:58,289 --> 00:05:06,270
hardware matters in an age of virtual

00:05:00,660 --> 00:05:08,130
machines I want to go through how one

00:05:06,270 --> 00:05:10,620
brings up a new system and the sort of

00:05:08,130 --> 00:05:14,610
layer upon layer upon layer of stuff

00:05:10,620 --> 00:05:16,350
that needs to be done and why this path

00:05:14,610 --> 00:05:18,960
through the system is different this

00:05:16,350 --> 00:05:23,190
time through because of the increasingly

00:05:18,960 --> 00:05:26,840
interesting nature of hardware I have a

00:05:23,190 --> 00:05:30,419
very small demo that I did in advance I

00:05:26,840 --> 00:05:34,080
can show you a little bit about DCOs on

00:05:30,419 --> 00:05:37,470
packet that sets the stage for why

00:05:34,080 --> 00:05:43,650
someone would want to do things on bare

00:05:37,470 --> 00:05:48,390
metal and then I have some hardware to

00:05:43,650 --> 00:05:50,430
show you and so let's let's get into

00:05:48,390 --> 00:05:53,039
this why does it matter

00:05:50,430 --> 00:05:55,169
so when someone

00:05:53,039 --> 00:05:57,539
who doesn't know a lot about the current

00:05:55,169 --> 00:05:58,889
state of the armed hardware world thinks

00:05:57,539 --> 00:06:00,990
about armed their first thought is

00:05:58,889 --> 00:06:03,029
usually embedded they're thinking about

00:06:00,990 --> 00:06:05,939
very small machines they might have

00:06:03,029 --> 00:06:07,550
touched or used or had their nephew or

00:06:05,939 --> 00:06:11,490
cousin or whatever had a Raspberry Pi

00:06:07,550 --> 00:06:15,809
there's this perception among some

00:06:11,490 --> 00:06:19,499
people that arm is embedded systems and

00:06:15,809 --> 00:06:23,809
that was true for a long time and and it

00:06:19,499 --> 00:06:25,949
increasingly is not the only answer so

00:06:23,809 --> 00:06:29,009
hardware is where innovation is

00:06:25,949 --> 00:06:33,589
happening at a pace that's really

00:06:29,009 --> 00:06:36,289
distinct from how software is innovating

00:06:33,589 --> 00:06:42,300
we've gotten really good at doing

00:06:36,289 --> 00:06:43,919
generic workloads DevOps has meant that

00:06:42,300 --> 00:06:46,819
the things that used to take a lot of

00:06:43,919 --> 00:06:51,919
people a lot of time to manage by hand

00:06:46,819 --> 00:06:55,949
have gotten much simpler and because the

00:06:51,919 --> 00:06:58,229
labor to manage 100 machines has gone

00:06:55,949 --> 00:07:02,279
way down we've been able to take on

00:06:58,229 --> 00:07:04,620
bigger and bigger compute tasks but you

00:07:02,279 --> 00:07:08,959
can only do so much with the abstraction

00:07:04,620 --> 00:07:13,589
of a virtual machine and in particular

00:07:08,959 --> 00:07:18,319
new hardware that's tuned to the

00:07:13,589 --> 00:07:20,490
software tasks that it's aimed at or

00:07:18,319 --> 00:07:22,559
software that uses all of the

00:07:20,490 --> 00:07:27,379
capabilities of the chip that it's

00:07:22,559 --> 00:07:30,149
that's running on offers enormous

00:07:27,379 --> 00:07:34,110
potential performance improvements over

00:07:30,149 --> 00:07:38,519
the generic CPUs that have characterized

00:07:34,110 --> 00:07:41,729
most kinds of most kinds of data center

00:07:38,519 --> 00:07:44,360
workloads in particular think about the

00:07:41,729 --> 00:07:50,189
mobile industry Apple's new iPhone

00:07:44,360 --> 00:07:52,439
this is bits of their core in addition

00:07:50,189 --> 00:07:55,979
to the CPU in

00:07:52,439 --> 00:07:59,129
new Apple hardware there's specialized

00:07:55,979 --> 00:08:01,830
image processing capability there's a

00:07:59,129 --> 00:08:05,879
custom GPU that they have and this

00:08:01,830 --> 00:08:08,099
accelerates their ability to serve the

00:08:05,879 --> 00:08:10,080
needs of the mobile phone user well

00:08:08,099 --> 00:08:14,789
beyond what you would have if you just

00:08:10,080 --> 00:08:16,889
had ordinary compute power and the the

00:08:14,789 --> 00:08:20,159
full expectation that I have is that we

00:08:16,889 --> 00:08:24,539
will increasingly see specialized

00:08:20,159 --> 00:08:28,259
compute showing up in data centers not

00:08:24,539 --> 00:08:32,189
as easy to consume as a abstract virtual

00:08:28,259 --> 00:08:33,269
machine but where your application fits

00:08:32,189 --> 00:08:36,000
it perfectly

00:08:33,269 --> 00:08:38,180
having substantial opportunities to

00:08:36,000 --> 00:08:41,009
continue that on the performance thing

00:08:38,180 --> 00:08:43,969
other things that could get really that

00:08:41,009 --> 00:08:43,969
could get really

00:08:44,510 --> 00:08:48,830
let me turn those down a little bit

00:08:49,640 --> 00:08:57,000
other things that could get really big

00:08:51,930 --> 00:08:58,800
and special we've seen artificial

00:08:57,000 --> 00:09:02,840
intelligence machine learning having a

00:08:58,800 --> 00:09:07,010
substantial opportunity to engage with

00:09:02,840 --> 00:09:09,870
lots of data and lots of compute power

00:09:07,010 --> 00:09:12,540
autonomous vehicles have a enormous

00:09:09,870 --> 00:09:16,080
stream of data flowing off of them that

00:09:12,540 --> 00:09:18,540
has a chance of changing things both on

00:09:16,080 --> 00:09:23,160
the scale size as well as the special

00:09:18,540 --> 00:09:26,310
size gaming the whole Internet of Things

00:09:23,160 --> 00:09:29,700
where you have sensors spewing out data

00:09:26,310 --> 00:09:33,530
from devices or around things and then

00:09:29,700 --> 00:09:36,720
in the telco world the conversion of

00:09:33,530 --> 00:09:38,430
specialized telco infrastructure into

00:09:36,720 --> 00:09:40,640
something which is get which gets called

00:09:38,430 --> 00:09:45,420
nfe or network function virtualization

00:09:40,640 --> 00:09:50,610
where there's an opportunity to turn on

00:09:45,420 --> 00:09:53,280
turn on its head how people how telcos

00:09:50,610 --> 00:09:54,810
provide services to their users so

00:09:53,280 --> 00:09:58,980
there's a bunch of essentially new

00:09:54,810 --> 00:10:02,100
applications more you know well beyond

00:09:58,980 --> 00:10:05,540
the serve another webpage piece of the

00:10:02,100 --> 00:10:09,030
world and this all these all given a

00:10:05,540 --> 00:10:11,610
motivation for considering other other

00:10:09,030 --> 00:10:16,260
hardware so this is Google's tenth a

00:10:11,610 --> 00:10:19,260
side view of Google's tensorflow this is

00:10:16,260 --> 00:10:24,540
a hardware from Microsoft that they have

00:10:19,260 --> 00:10:29,640
in Azure again tailor-made to particular

00:10:24,540 --> 00:10:32,010
applications and then with with those

00:10:29,640 --> 00:10:36,420
two pictures are pretty hardware

00:10:32,010 --> 00:10:40,710
this is Qualcomm's 48 core arm server

00:10:36,420 --> 00:10:42,620
that I happen to have with me and all I

00:10:40,710 --> 00:10:46,340
could pass this around if people don't

00:10:42,620 --> 00:10:50,960
spill their soda on it to take a look

00:10:46,340 --> 00:10:55,470
it's a it's a piece of hardware that's

00:10:50,960 --> 00:10:57,140
in some sense very ordinary in the sense

00:10:55,470 --> 00:10:59,870
that it looks like a saw

00:10:57,140 --> 00:11:02,690
and if you plug it in to the right sort

00:10:59,870 --> 00:11:08,829
of rack it's exactly what you would

00:11:02,690 --> 00:11:08,829
expect to go into a data center but also

00:11:10,209 --> 00:11:17,240
it's very special in the sense that it

00:11:13,670 --> 00:11:21,529
has 48 cores which is more than the

00:11:17,240 --> 00:11:23,630
ordinary server of the same size you

00:11:21,529 --> 00:11:28,670
know plenty of memory and an ARM chip

00:11:23,630 --> 00:11:30,589
set in it so to make it work you are

00:11:28,670 --> 00:11:33,470
motivated by the fact that it has a very

00:11:30,589 --> 00:11:38,660
dense core count and you're motivated by

00:11:33,470 --> 00:11:42,079
novelty right because new things provide

00:11:38,660 --> 00:11:49,850
new opportunities so I want to do just a

00:11:42,079 --> 00:11:53,570
super brief pick another window here see

00:11:49,850 --> 00:11:55,700
if I get the right thing so Qualcomm and

00:11:53,570 --> 00:12:02,029
Paquette have been working together to

00:11:55,700 --> 00:12:05,740
get access to that hardware to to people

00:12:02,029 --> 00:12:09,350
who are doing software development

00:12:05,740 --> 00:12:11,810
Qualcomm has a very large history of

00:12:09,350 --> 00:12:13,640
doing mobile development but that has

00:12:11,810 --> 00:12:21,350
given them a deep experience in arm

00:12:13,640 --> 00:12:24,529
development packet has a use model that

00:12:21,350 --> 00:12:26,360
allows people to get access to bare

00:12:24,529 --> 00:12:27,079
metal so we don't have to provide a

00:12:26,360 --> 00:12:30,680
hypervisor

00:12:27,079 --> 00:12:33,320
we're not giving we're not assuming that

00:12:30,680 --> 00:12:37,370
we know what you want to do with it we

00:12:33,320 --> 00:12:40,600
provide that we provide that for you the

00:12:37,370 --> 00:12:44,540
chip on this device is a centric 2,400

00:12:40,600 --> 00:12:47,470
with up to 48 cores in it the

00:12:44,540 --> 00:12:54,980
architecture is based on arm v8 its

00:12:47,470 --> 00:12:59,690
64-bit only system so that's suitable

00:12:54,980 --> 00:13:02,540
for data center workloads the structure

00:12:59,690 --> 00:13:08,000
is that it has a number of pairs of

00:13:02,540 --> 00:13:11,080
custom cores that are arranged in a

00:13:08,000 --> 00:13:13,570
system bus ring interconnect

00:13:11,080 --> 00:13:18,280
this gives a substantial amount of

00:13:13,570 --> 00:13:20,790
bandwidth inside the chip and there's a

00:13:18,280 --> 00:13:25,870
number of optimizations so that

00:13:20,790 --> 00:13:31,140
instructions can be done out of order to

00:13:25,870 --> 00:13:34,090
improve performance as well so it's like

00:13:31,140 --> 00:13:36,850
I say it's one of these things that when

00:13:34,090 --> 00:13:39,250
I first ran into it

00:13:36,850 --> 00:13:40,870
you say huh that's different from all

00:13:39,250 --> 00:13:46,900
the other things that I have worked on

00:13:40,870 --> 00:13:51,870
in the past the the opportunity is there

00:13:46,900 --> 00:13:55,780
if you can make use of it to potentially

00:13:51,870 --> 00:13:59,560
gain a performance advantage or at the

00:13:55,780 --> 00:14:01,420
very least have some alternatives in the

00:13:59,560 --> 00:14:04,470
data center so that you can move your

00:14:01,420 --> 00:14:08,280
workload wherever it's most appropriate

00:14:04,470 --> 00:14:08,280
so I'll pull that back

00:14:14,130 --> 00:14:22,150
so if you have new hardware there's a

00:14:17,440 --> 00:14:24,850
certain lack of a better word layer cake

00:14:22,150 --> 00:14:28,330
of things that all have to work before

00:14:24,850 --> 00:14:32,820
your brand new hardware becomes a boring

00:14:28,330 --> 00:14:36,850
routine part of your data center and

00:14:32,820 --> 00:14:42,100
there is plenty of time to talk about

00:14:36,850 --> 00:14:44,680
this over the course of many beers but

00:14:42,100 --> 00:14:46,360
it starts at the Boot firmware so if

00:14:44,680 --> 00:14:49,750
you're if you're providing bare metal

00:14:46,360 --> 00:14:52,570
access to two Hardware the system has to

00:14:49,750 --> 00:14:56,260
boot and you'd be surprised how few

00:14:52,570 --> 00:15:01,750
people in the software world really

00:14:56,260 --> 00:15:07,210
understand the firmware thanks really

00:15:01,750 --> 00:15:11,200
understand the how thank you how the

00:15:07,210 --> 00:15:13,600
particular chips the the BMC chip and

00:15:11,200 --> 00:15:16,750
how IPMI works and a bunch of things

00:15:13,600 --> 00:15:19,480
that like never register on on people's

00:15:16,750 --> 00:15:23,440
radar as being important yet if you're

00:15:19,480 --> 00:15:25,870
going to automate access to this

00:15:23,440 --> 00:15:28,600
Hardware all that stuff has to be right

00:15:25,870 --> 00:15:31,060
so the first couple weeks of our access

00:15:28,600 --> 00:15:32,860
to a new hardware is just booting the

00:15:31,060 --> 00:15:36,490
machine over and over again getting it

00:15:32,860 --> 00:15:39,970
rigged into our system once the firmware

00:15:36,490 --> 00:15:42,690
is running you have to get a kernel with

00:15:39,970 --> 00:15:45,100
all new hardware there's almost always

00:15:42,690 --> 00:15:50,380
new kernel patches that have to be

00:15:45,100 --> 00:15:53,110
incorporated fortunately for us Qualcomm

00:15:50,380 --> 00:15:55,150
and caveum who we always also work with

00:15:53,110 --> 00:15:58,480
have been very good about mainstreaming

00:15:55,150 --> 00:16:00,610
their kernel changes but you have to be

00:15:58,480 --> 00:16:05,910
ready to run the latest and greatest and

00:16:00,610 --> 00:16:09,880
not not old things we keep pace with

00:16:05,910 --> 00:16:12,460
operating system developments again

00:16:09,880 --> 00:16:16,720
nearly always running the latest

00:16:12,460 --> 00:16:20,770
versions of things like Ubuntu and

00:16:16,720 --> 00:16:22,210
Debian CentOS and Red Hat Linux and

00:16:20,770 --> 00:16:24,160
working very closely with those

00:16:22,210 --> 00:16:26,579
operating system developers to make sure

00:16:24,160 --> 00:16:29,879
that their system

00:16:26,579 --> 00:16:31,040
cleanly and nicely and neatly on these

00:16:29,879 --> 00:16:35,600
systems

00:16:31,040 --> 00:16:38,399
we're not even yet at applications right

00:16:35,600 --> 00:16:40,649
all the languages that you have have to

00:16:38,399 --> 00:16:42,720
work they have to work really well they

00:16:40,649 --> 00:16:45,720
need to have libraries that incorporate

00:16:42,720 --> 00:16:57,149
all of the hardware instructions that

00:16:45,720 --> 00:16:58,679
your chip runs so and and keep keep

00:16:57,149 --> 00:17:00,149
going up the stack right so there's just

00:16:58,679 --> 00:17:04,049
there's a lot of work to be done I don't

00:17:00,149 --> 00:17:08,309
want to minimize how hard it is to have

00:17:04,049 --> 00:17:09,839
a brand new system be boring right so

00:17:08,309 --> 00:17:11,909
boring that you don't know when you're

00:17:09,839 --> 00:17:16,250
typing in front of it whether it's an

00:17:11,909 --> 00:17:18,899
Intel system or an arm system where

00:17:16,250 --> 00:17:23,579
everything works just as expected where

00:17:18,899 --> 00:17:25,319
there's no surprises and as we look at

00:17:23,579 --> 00:17:29,700
bringing DCOs

00:17:25,319 --> 00:17:32,250
to arm each of these levels of the of

00:17:29,700 --> 00:17:34,860
the stack have to have some attention in

00:17:32,250 --> 00:17:37,289
some order now I've been working on the

00:17:34,860 --> 00:17:38,789
language as a library's front for a long

00:17:37,289 --> 00:17:41,549
time that was like the first thing is

00:17:38,789 --> 00:17:43,110
like compile all the compilers how well

00:17:41,549 --> 00:17:43,740
do the compilers work do they work all

00:17:43,110 --> 00:17:46,470
the time

00:17:43,740 --> 00:17:50,760
are there any bugs to the people working

00:17:46,470 --> 00:17:53,970
on them no that arm is a target the

00:17:50,760 --> 00:17:56,909
containers world has been interesting

00:17:53,970 --> 00:17:59,760
because there was just an announcement

00:17:56,909 --> 00:18:02,789
this week at docker of native support

00:17:59,760 --> 00:18:04,710
for multi architecture containers so

00:18:02,789 --> 00:18:06,809
that you can run a single container and

00:18:04,710 --> 00:18:09,539
the system will automatically figure out

00:18:06,809 --> 00:18:12,750
what architecture you're on and load the

00:18:09,539 --> 00:18:14,720
right image for it that was like two and

00:18:12,750 --> 00:18:19,500
a half years in the making to get that

00:18:14,720 --> 00:18:23,970
amount of effort done so you know a lot

00:18:19,500 --> 00:18:25,620
of work right this journey is a little

00:18:23,970 --> 00:18:28,950
bit different because a lot of that work

00:18:25,620 --> 00:18:32,610
has been done software has accelerated

00:18:28,950 --> 00:18:37,799
so things like DCOs kubernetes and

00:18:32,610 --> 00:18:39,510
docker are in mass adoption we're not

00:18:37,799 --> 00:18:40,050
talking small amounts of people we're

00:18:39,510 --> 00:18:42,690
talking to our

00:18:40,050 --> 00:18:44,160
numbers of people and software

00:18:42,690 --> 00:18:49,110
developers whether they're doing web

00:18:44,160 --> 00:18:51,330
development or whatnot are are coming in

00:18:49,110 --> 00:18:53,850
this world at a increasing what seems to

00:18:51,330 --> 00:18:56,900
me to be an increasing pace automating

00:18:53,850 --> 00:19:00,210
everything making everything easy to do

00:18:56,900 --> 00:19:05,130
removing the uncertainty of removing the

00:19:00,210 --> 00:19:07,770
grief from running a big system for

00:19:05,130 --> 00:19:11,400
better or for worse software moves

00:19:07,770 --> 00:19:13,250
faster than Hardware high level high

00:19:11,400 --> 00:19:16,380
level components have been polished

00:19:13,250 --> 00:19:17,880
things like boot firmware there's just

00:19:16,380 --> 00:19:20,310
not that many people working on boot

00:19:17,880 --> 00:19:24,120
firmware it's not exciting it's not

00:19:20,310 --> 00:19:25,980
shiny I think we know all of them from

00:19:24,120 --> 00:19:28,020
the from the course of working with with

00:19:25,980 --> 00:19:30,780
the various vendors we work with there's

00:19:28,020 --> 00:19:33,180
a tiny there's a you know a handful of

00:19:30,780 --> 00:19:36,960
pieces of code they're not moving very

00:19:33,180 --> 00:19:40,260
fast and we depend on them utterly to do

00:19:36,960 --> 00:19:44,670
what we're doing so we're not really as

00:19:40,260 --> 00:19:48,300
an industry all that well tooled to deal

00:19:44,670 --> 00:19:51,780
with diverse hardware we don't know as

00:19:48,300 --> 00:19:55,680
much from a cultural standpoint of how

00:19:51,780 --> 00:19:58,860
to deploy and secure it it's rare to get

00:19:55,680 --> 00:20:01,110
a full stack engineer who goes all the

00:19:58,860 --> 00:20:04,110
way down to the firmware or the chip

00:20:01,110 --> 00:20:05,970
design much more when people say they're

00:20:04,110 --> 00:20:08,310
a full stack engineer they know both

00:20:05,970 --> 00:20:11,400
front end and back end an operating

00:20:08,310 --> 00:20:13,440
system but getting all the way through

00:20:11,400 --> 00:20:14,880
down the kernel to the driver level and

00:20:13,440 --> 00:20:18,660
then to the firmware that enables the

00:20:14,880 --> 00:20:21,660
drivers there's like unicorns trying to

00:20:18,660 --> 00:20:25,890
find those people so it's it's a

00:20:21,660 --> 00:20:29,480
challenge and it doesn't get easier

00:20:25,890 --> 00:20:33,030
because people are consuming hardware

00:20:29,480 --> 00:20:37,200
increasingly as abstractions in the

00:20:33,030 --> 00:20:39,690
cloud the only sort of counterpoint to

00:20:37,200 --> 00:20:43,410
this that I would say is fortunately

00:20:39,690 --> 00:20:45,360
there's a robust market of single board

00:20:43,410 --> 00:20:49,040
computers people experimenting with

00:20:45,360 --> 00:20:51,750
things like a Raspberry Pi where there's

00:20:49,040 --> 00:20:54,240
hands-on access to

00:20:51,750 --> 00:20:58,020
enough control software so that people

00:20:54,240 --> 00:21:00,330
can can do things but that's you know I

00:20:58,020 --> 00:21:02,490
would love it if that was the trend and

00:21:00,330 --> 00:21:04,080
I hope it is but there's really not a

00:21:02,490 --> 00:21:07,680
store that you can walk down the street

00:21:04,080 --> 00:21:11,850
to and buy a stack of hardware it just

00:21:07,680 --> 00:21:14,880
doesn't exist anymore so I was

00:21:11,850 --> 00:21:16,830
encouraged to invoke the demo gods just

00:21:14,880 --> 00:21:19,140
to prove that I knew at least a little

00:21:16,830 --> 00:21:23,460
bit about what was going on and I

00:21:19,140 --> 00:21:25,890
realized that automating access to

00:21:23,460 --> 00:21:27,750
hardware means that sometimes things

00:21:25,890 --> 00:21:30,300
that take a long time are not suitable

00:21:27,750 --> 00:21:33,270
for demos so I want to you to look at

00:21:30,300 --> 00:21:37,290
the screen on the right hand side you

00:21:33,270 --> 00:21:42,180
took about mmm 20 minutes to bring up a

00:21:37,290 --> 00:21:50,190
DC OS cluster on intel on pakka and just

00:21:42,180 --> 00:21:52,050
to prove that I did that no this is not

00:21:50,190 --> 00:21:55,320
the commercial part this is the he knows

00:21:52,050 --> 00:21:57,840
a little bit about his stuff part so we

00:21:55,320 --> 00:21:59,820
were able to I was able to get it up a

00:21:57,840 --> 00:22:01,680
couple false starts I worked with our

00:21:59,820 --> 00:22:03,630
team to make sure that I could do that I

00:22:01,680 --> 00:22:05,010
could get this thing up it's not really

00:22:03,630 --> 00:22:09,270
running anything so it's not very

00:22:05,010 --> 00:22:12,360
impressive as a it's not a proof of deep

00:22:09,270 --> 00:22:13,920
knowledge it's a proof of work but if

00:22:12,360 --> 00:22:15,660
you look at the difficulty of bringing

00:22:13,920 --> 00:22:17,730
up and this is not running on arm this

00:22:15,660 --> 00:22:19,800
is running on Intel so if you if you

00:22:17,730 --> 00:22:22,230
want to did get a sort of degree of

00:22:19,800 --> 00:22:28,080
difficulty question is like well how

00:22:22,230 --> 00:22:29,700
hard would it be to port DCOs to arm you

00:22:28,080 --> 00:22:32,070
could take it from a couple levels right

00:22:29,700 --> 00:22:35,130
do we have the fundamental automation

00:22:32,070 --> 00:22:37,140
yes so I have a target I say if I'm

00:22:35,130 --> 00:22:38,640
gonna do this it's not going to be a

00:22:37,140 --> 00:22:41,610
proof of concept that takes a week to

00:22:38,640 --> 00:22:44,160
install if it's done right it's a

00:22:41,610 --> 00:22:46,380
15-minute start to finish or a twenty

00:22:44,160 --> 00:22:49,230
minutes start to finish operation that's

00:22:46,380 --> 00:22:51,240
our goal but to get it running look at

00:22:49,230 --> 00:22:55,650
all these components that are supported

00:22:51,240 --> 00:22:57,750
so I need to have I need to have a Kafka

00:22:55,650 --> 00:23:00,600
story I need to have a Jenkins story I

00:22:57,750 --> 00:23:02,610
need to have spark running there's a

00:23:00,600 --> 00:23:04,270
bunch of community packages that people

00:23:02,610 --> 00:23:11,590
rely on all the time

00:23:04,270 --> 00:23:14,200
so a port of DCOs to arm really means

00:23:11,590 --> 00:23:19,330
like porting all the things right

00:23:14,200 --> 00:23:21,250
there's no there's no you could you you

00:23:19,330 --> 00:23:23,010
want to get a start on it but to be

00:23:21,250 --> 00:23:25,600
convincing you really want to say well I

00:23:23,010 --> 00:23:27,220
you know I wouldn't know what I was what

00:23:25,600 --> 00:23:28,960
hardware I was running on if I double

00:23:27,220 --> 00:23:31,600
clicked on influx TV it would be like

00:23:28,960 --> 00:23:34,420
whatever the best system would be for

00:23:31,600 --> 00:23:37,300
that and I don't want to minimize that

00:23:34,420 --> 00:23:38,590
that that's a lot of work fortunately

00:23:37,300 --> 00:23:43,440
it's work that can be done in parallel

00:23:38,590 --> 00:23:46,380
so a number of these systems are already

00:23:43,440 --> 00:23:51,820
have already had port started to arm

00:23:46,380 --> 00:23:57,150
some of them are completely done and you

00:23:51,820 --> 00:24:01,120
know it's a a certain amount of work not

00:23:57,150 --> 00:24:05,320
so that system is running on packets

00:24:01,120 --> 00:24:08,350
infrastructure you may be can see that

00:24:05,320 --> 00:24:10,630
it has four nodes running under

00:24:08,350 --> 00:24:17,429
container Linux in Sunnyvale and that's

00:24:10,630 --> 00:24:22,660
the that's the real thing behind it so

00:24:17,429 --> 00:24:23,830
so DCOs on packet how did I do a twenty

00:24:22,660 --> 00:24:25,540
minute when I didn't do a twenty minute

00:24:23,830 --> 00:24:29,530
demo but I showed you that I had I had

00:24:25,540 --> 00:24:34,380
done it how do we do it we use terraform

00:24:29,530 --> 00:24:36,790
to deploy nodes on intelligence works

00:24:34,380 --> 00:24:39,100
we've we've automated all the bring up

00:24:36,790 --> 00:24:43,000
process I don't need to know a lot about

00:24:39,100 --> 00:24:44,920
the system to have Iran unfortunately

00:24:43,000 --> 00:24:48,760
oops Decius doesn't work on arm yet

00:24:44,920 --> 00:24:51,990
right so I'm not showing you this board

00:24:48,760 --> 00:24:54,040
with eCos what I'm motivating is hey

00:24:51,990 --> 00:24:58,750
it's an interesting enough piece of

00:24:54,040 --> 00:25:01,260
hardware it's an attainable goal due to

00:24:58,750 --> 00:25:04,540
the work of many its inches away and

00:25:01,260 --> 00:25:09,190
what packet has done with arms

00:25:04,540 --> 00:25:11,770
cooperation is provide my time to help

00:25:09,190 --> 00:25:15,190
do community management and wrangling of

00:25:11,770 --> 00:25:17,190
this ecosystem I put on a newsletter

00:25:15,190 --> 00:25:18,930
every week with news of

00:25:17,190 --> 00:25:22,250
of what's going on so that people can

00:25:18,930 --> 00:25:25,380
find each other and make connections

00:25:22,250 --> 00:25:27,570
give people access to the hardware so

00:25:25,380 --> 00:25:30,740
that they can login themselves and and

00:25:27,570 --> 00:25:34,800
do all the ports and run all the tests

00:25:30,740 --> 00:25:38,130
make sure that fixes make it make their

00:25:34,800 --> 00:25:40,230
way all the way upstream so that instead

00:25:38,130 --> 00:25:45,140
of fixing it once and doing a demo you

00:25:40,230 --> 00:25:48,360
fix it forever and get it installed and

00:25:45,140 --> 00:25:52,260
get it to be part of the system so what

00:25:48,360 --> 00:25:55,170
needs to be done so the works on arm

00:25:52,260 --> 00:25:56,880
project has really solid funding for a

00:25:55,170 --> 00:26:00,210
year so it's like what am I gonna do

00:25:56,880 --> 00:26:02,610
this year of course I hope it lasts

00:26:00,210 --> 00:26:04,920
longer but it shouldn't last too long at

00:26:02,610 --> 00:26:09,600
some point you give up and declare

00:26:04,920 --> 00:26:13,860
victory so for for all projects that

00:26:09,600 --> 00:26:16,320
path is as follows you identify the

00:26:13,860 --> 00:26:19,200
contributors to the system who the

00:26:16,320 --> 00:26:20,910
maintainer czar make friends with the

00:26:19,200 --> 00:26:23,210
community managers which is usually easy

00:26:20,910 --> 00:26:27,030
because they're usually quite friendly

00:26:23,210 --> 00:26:28,590
try it out yourself so one of the things

00:26:27,030 --> 00:26:30,450
that I did before coming here is like

00:26:28,590 --> 00:26:34,350
alright let's try to get me this running

00:26:30,450 --> 00:26:37,260
on arm and the answer was well most of

00:26:34,350 --> 00:26:40,380
it compiles except for a library from

00:26:37,260 --> 00:26:42,300
Google called glog or G log and it's an

00:26:40,380 --> 00:26:45,210
old version and it doesn't know what an

00:26:42,300 --> 00:26:49,710
ARM processor is because the code and

00:26:45,210 --> 00:26:52,170
the distribution is from 2007 so that

00:26:49,710 --> 00:26:55,290
wasn't a complete stopping point but

00:26:52,170 --> 00:26:58,200
it's an indicative of what what things

00:26:55,290 --> 00:26:59,820
are so I opened up some bug reports you

00:26:58,200 --> 00:27:02,220
know start the process of engaging with

00:26:59,820 --> 00:27:04,740
the community I've done this sort of

00:27:02,220 --> 00:27:07,050
work of bring up work in a bunch of

00:27:04,740 --> 00:27:08,910
communities so work with the NGO

00:27:07,050 --> 00:27:12,090
language community work with the node

00:27:08,910 --> 00:27:13,560
community work with the work with the

00:27:12,090 --> 00:27:15,510
docker community and the kubernetes

00:27:13,560 --> 00:27:17,130
community find the people who are

00:27:15,510 --> 00:27:20,280
working on it find the people who care

00:27:17,130 --> 00:27:22,350
find the people who are interested and

00:27:20,280 --> 00:27:25,680
open up the bug report start tracking

00:27:22,350 --> 00:27:30,190
issues and what you end up with is this

00:27:25,680 --> 00:27:32,290
very wide pipeline of progress

00:27:30,190 --> 00:27:35,020
at any moment things seem to be taking a

00:27:32,290 --> 00:27:37,179
long time but you've queued up enough

00:27:35,020 --> 00:27:38,980
things in parallel that's something good

00:27:37,179 --> 00:27:40,780
and new happens every day and you get

00:27:38,980 --> 00:27:45,070
these small wins that you can build off

00:27:40,780 --> 00:27:48,250
of and can do that it's always important

00:27:45,070 --> 00:27:51,700
to contribute patches to these projects

00:27:48,250 --> 00:27:55,390
and crucially you have to upstream all

00:27:51,700 --> 00:27:59,340
the things there is no way to make this

00:27:55,390 --> 00:28:02,860
work unless every bit of work you do is

00:27:59,340 --> 00:28:05,770
destined for upstream and this is

00:28:02,860 --> 00:28:08,860
actually so people in the kernel world

00:28:05,770 --> 00:28:10,360
have learned this it's very rare to see

00:28:08,860 --> 00:28:13,000
a hardware manufacturer in the

00:28:10,360 --> 00:28:14,740
single-board computer world not try to

00:28:13,000 --> 00:28:17,140
get all of their patches upstream

00:28:14,740 --> 00:28:21,580
because they know that people have a

00:28:17,140 --> 00:28:23,290
very low tolerance for forks they have a

00:28:21,580 --> 00:28:24,940
very low tolerance for having to hive

00:28:23,290 --> 00:28:26,200
off on their own and figure something

00:28:24,940 --> 00:28:31,679
out

00:28:26,200 --> 00:28:34,510
in the in the arm world there are some

00:28:31,679 --> 00:28:36,700
vendors that are more comfortable

00:28:34,510 --> 00:28:40,330
working upstream than others let's just

00:28:36,700 --> 00:28:44,860
say kernel work is different from

00:28:40,330 --> 00:28:47,290
application level work often there is

00:28:44,860 --> 00:28:50,710
some hesitancy to admit that things are

00:28:47,290 --> 00:28:52,780
not perfect I'm not shy about telling

00:28:50,710 --> 00:28:54,220
people that they have a bug and sharing

00:28:52,780 --> 00:28:57,429
the bug reports I think that's part of

00:28:54,220 --> 00:28:59,830
my job but you know the I want to really

00:28:57,429 --> 00:29:01,840
get from a point of it worked for me

00:28:59,830 --> 00:29:06,220
once or I was able to do it at a

00:29:01,840 --> 00:29:08,110
hackathon or I did it in the lab to

00:29:06,220 --> 00:29:11,549
figure out all of the changes that

00:29:08,110 --> 00:29:15,460
needed to be made and engage in the

00:29:11,549 --> 00:29:18,220
potentially slow process of going

00:29:15,460 --> 00:29:20,580
through and getting community buy-in and

00:29:18,220 --> 00:29:25,900
understanding the risks and

00:29:20,580 --> 00:29:28,480
understanding how you can get a get a

00:29:25,900 --> 00:29:32,919
system to change over time

00:29:28,480 --> 00:29:34,840
like I say the the crucial change in the

00:29:32,919 --> 00:29:37,330
docker community was multi architecture

00:29:34,840 --> 00:29:40,740
support that was about a two year

00:29:37,330 --> 00:29:43,409
process from initial architecture

00:29:40,740 --> 00:29:48,850
description to two

00:29:43,409 --> 00:29:51,760
almost final right now so so the

00:29:48,850 --> 00:29:53,770
call-to-action hardware is an innovation

00:29:51,760 --> 00:30:00,190
layer new hardware means we can approach

00:29:53,770 --> 00:30:02,260
new problems and solve things you know

00:30:00,190 --> 00:30:05,100
five to five hundred times as fast if

00:30:02,260 --> 00:30:08,159
our hardware exactly matches our problem

00:30:05,100 --> 00:30:12,960
the work of developing new eco systems

00:30:08,159 --> 00:30:17,260
is worthwhile is a worthwhile endeavor

00:30:12,960 --> 00:30:20,289
the fact that you can engage with people

00:30:17,260 --> 00:30:26,429
who are on have a common task as a is a

00:30:20,289 --> 00:30:31,059
noble cause it's likely to be a more

00:30:26,429 --> 00:30:33,580
common task across the industry as more

00:30:31,059 --> 00:30:34,720
specialized Hardware gets and gets into

00:30:33,580 --> 00:30:37,240
things

00:30:34,720 --> 00:30:40,690
for instance GPUs would be another good

00:30:37,240 --> 00:30:45,520
example of a system where hardware gives

00:30:40,690 --> 00:30:48,340
you a substantial advantage and you know

00:30:45,520 --> 00:30:49,960
actively looking at all of this new

00:30:48,340 --> 00:30:52,529
hardware coming online and like how do

00:30:49,960 --> 00:30:57,370
we you consume it in a way that's easy

00:30:52,529 --> 00:31:00,360
so the the call to action is um come

00:30:57,370 --> 00:31:03,640
hack on hardware with us we have

00:31:00,360 --> 00:31:06,130
equipment coming online qualcomm systems

00:31:03,640 --> 00:31:08,140
caveum systems systems from other

00:31:06,130 --> 00:31:11,590
vendors I'm working with people

00:31:08,140 --> 00:31:14,380
literally around the globe to port

00:31:11,590 --> 00:31:18,789
workloads to arm and to and to fix bugs

00:31:14,380 --> 00:31:20,470
and to engage with folks and and a year

00:31:18,789 --> 00:31:22,149
from now I should be giving the talk

00:31:20,470 --> 00:31:24,970
about how it all just works right how

00:31:22,149 --> 00:31:29,740
it's boring how it's indistinguishable

00:31:24,970 --> 00:31:33,070
from from DCOs on any other hardware so

00:31:29,740 --> 00:31:36,520
the the pitch is come explore the works

00:31:33,070 --> 00:31:38,830
on our my works on arm comm is the is

00:31:36,520 --> 00:31:42,669
the website we launched we relaunched

00:31:38,830 --> 00:31:45,340
that this week it's my community site to

00:31:42,669 --> 00:31:47,620
keep track of things sort of a catalog

00:31:45,340 --> 00:31:50,409
of ships of all of the logos of things

00:31:47,620 --> 00:31:52,690
that we know have a good good good

00:31:50,409 --> 00:31:55,860
behavior on arm and some that are in

00:31:52,690 --> 00:31:59,190
progress and need need love

00:31:55,860 --> 00:32:03,060
I produce a newsletter every week Friday

00:31:59,190 --> 00:32:07,380
at noon Eastern Time and send that out

00:32:03,060 --> 00:32:11,430
to a list which is growing if you want a

00:32:07,380 --> 00:32:14,720
login if you want a whole machine like

00:32:11,430 --> 00:32:18,450
this to use for your efforts contact me

00:32:14,720 --> 00:32:20,610
we have a process of working with

00:32:18,450 --> 00:32:25,590
qualcomm the the hardware is currently

00:32:20,610 --> 00:32:29,580
under NDA so you were it gets metered

00:32:25,590 --> 00:32:32,760
out fairly slowly but as they get closer

00:32:29,580 --> 00:32:37,860
to going to market it'll be easier and

00:32:32,760 --> 00:32:39,630
you can reach me on I'm not the only

00:32:37,860 --> 00:32:41,940
Vale Metis in the world if you can type

00:32:39,630 --> 00:32:46,230
that successfully you can find me on any

00:32:41,940 --> 00:32:50,910
network or you'll find my brother packet

00:32:46,230 --> 00:32:53,970
host is our handle the logo on the left

00:32:50,910 --> 00:32:57,950
is the packet packet bot logo the logo

00:32:53,970 --> 00:33:03,930
on the right is the works on arm logo

00:32:57,950 --> 00:33:07,730
and with that I'll step down and take

00:33:03,930 --> 00:33:07,730
any questions thank you very much

00:33:13,520 --> 00:33:16,059
sure

00:33:25,720 --> 00:33:37,820
yeah there's a there's a spot for a TPM

00:33:29,810 --> 00:33:40,010
here and that's a really good question

00:33:37,820 --> 00:33:44,090
you have access to the you'll you will

00:33:40,010 --> 00:33:47,330
have you know route level access to the

00:33:44,090 --> 00:33:52,750
hardware I think that's possible but why

00:33:47,330 --> 00:33:55,250
don't you drop me a note and I'll no no

00:33:52,750 --> 00:33:57,440
it's all bare metal and you get you get

00:33:55,250 --> 00:34:01,580
the whole thing so if your hypervisor

00:33:57,440 --> 00:34:03,820
can engage the trust zone you can make

00:34:01,580 --> 00:34:03,820
it work

00:34:13,860 --> 00:34:21,400
so the question is what am I trying to

00:34:17,320 --> 00:34:25,300
get working on arm the the works on arm

00:34:21,400 --> 00:34:27,250
project to date the first thing is get

00:34:25,300 --> 00:34:30,580
all the operating systems running so

00:34:27,250 --> 00:34:32,110
engage with people who have gotten who

00:34:30,580 --> 00:34:34,690
are doing distributions and who've

00:34:32,110 --> 00:34:41,500
gotten tens of thousands of packages to

00:34:34,690 --> 00:34:56,380
work so ubuntu debian Santos Fedora Red

00:34:41,500 --> 00:34:58,900
Hat for years right four years right so

00:34:56,380 --> 00:35:02,350
there's there's a baseline of operating

00:34:58,900 --> 00:35:04,900
systems compilers is sort of the next

00:35:02,350 --> 00:35:07,570
frontier they all just tend to generally

00:35:04,900 --> 00:35:10,480
work the challenge is optimisation in

00:35:07,570 --> 00:35:13,270
some cases where if you use the hardware

00:35:10,480 --> 00:35:15,540
instructions correctly you get you know

00:35:13,270 --> 00:35:18,400
order of magnitude performance

00:35:15,540 --> 00:35:20,260
improvements there's a certain amount of

00:35:18,400 --> 00:35:22,780
algorithm development that goes on in

00:35:20,260 --> 00:35:24,820
parallel with that finding algorithms

00:35:22,780 --> 00:35:28,090
that work really well with this hardware

00:35:24,820 --> 00:35:29,140
so that you can do a hashing algorithm

00:35:28,090 --> 00:35:32,890
or something like that

00:35:29,140 --> 00:35:35,500
and so at the edge there's people who

00:35:32,890 --> 00:35:38,440
know the Intel instruction set deeply

00:35:35,500 --> 00:35:40,360
and the arm instruction said deeply and

00:35:38,440 --> 00:35:42,670
are inventing things that work really

00:35:40,360 --> 00:35:47,400
well you know from the start on both

00:35:42,670 --> 00:35:47,400
sorts of systems Bob the Jim

00:35:52,310 --> 00:35:59,370
the question is about other sorts of

00:35:55,440 --> 00:36:02,370
things that you might do like FPGAs at

00:35:59,370 --> 00:36:05,310
Paquette we have that sort of stuff on a

00:36:02,370 --> 00:36:08,250
radar but the question from a service

00:36:05,310 --> 00:36:11,100
provider perspective is if you have an

00:36:08,250 --> 00:36:14,460
fpga that you give to one customer and

00:36:11,100 --> 00:36:16,290
they're done with that you need to undo

00:36:14,460 --> 00:36:20,070
everything that they've done and give it

00:36:16,290 --> 00:36:23,420
to the next customer that's hard I mean

00:36:20,070 --> 00:36:23,420
that's sort of fundamentally hard

00:36:43,670 --> 00:36:46,670
right

00:36:48,480 --> 00:36:54,800
co-processing

00:36:50,890 --> 00:36:59,170
right right and that which is a part of

00:36:54,800 --> 00:36:59,170
the same problem of like yeah

00:37:27,309 --> 00:37:36,859
right so the question is if if you're

00:37:34,549 --> 00:37:40,460
doing custom development and making

00:37:36,859 --> 00:37:42,529
changes to exploit the hardware how do

00:37:40,460 --> 00:37:44,569
you ver how do you verify that you get

00:37:42,529 --> 00:37:46,819
the good results oh the same results so

00:37:44,569 --> 00:37:48,589
the answer to that is not one

00:37:46,819 --> 00:37:53,390
verification suite because the world has

00:37:48,589 --> 00:37:56,299
gotten a lot bigger it's for essentially

00:37:53,390 --> 00:37:58,670
the larger the project more likely that

00:37:56,299 --> 00:38:04,450
they have some level of test-driven

00:37:58,670 --> 00:38:04,450
development to support their CI system

00:38:08,170 --> 00:38:22,130
you can get everything yet there's good

00:38:15,890 --> 00:38:26,299
verification Suites so let's see good

00:38:22,130 --> 00:38:28,819
being hours of work that all has to go

00:38:26,299 --> 00:38:31,339
correctly or more minutes of work if

00:38:28,819 --> 00:38:34,849
it's a super fast machine good being

00:38:31,339 --> 00:38:36,890
thousands of tests good being tests the

00:38:34,849 --> 00:38:39,920
test against specific regressions and

00:38:36,890 --> 00:38:43,599
whatnot it's variable some systems are

00:38:39,920 --> 00:38:47,000
better than others at testing but

00:38:43,599 --> 00:38:49,309
packages are available yes so the the

00:38:47,000 --> 00:38:55,069
the challenge of the next 12 months for

00:38:49,309 --> 00:38:57,529
me is continuous integration making sure

00:38:55,069 --> 00:39:00,260
that as packages say that they have been

00:38:57,529 --> 00:39:03,559
ported to arm and have successfully

00:39:00,260 --> 00:39:07,400
gotten something running going to the

00:39:03,559 --> 00:39:09,859
point where you could from there

00:39:07,400 --> 00:39:12,529
every time someone checks in new code

00:39:09,859 --> 00:39:14,510
run the whole run the whole regression

00:39:12,529 --> 00:39:17,270
suite make sure that nothing is broken

00:39:14,510 --> 00:39:20,260
if someone has a new bug you've had a

00:39:17,270 --> 00:39:23,930
new test to test for that new bug and

00:39:20,260 --> 00:39:25,849
that's sort of more so there are some

00:39:23,930 --> 00:39:28,940
systems that are hard to do that on

00:39:25,849 --> 00:39:32,539
right testing distributed systems is

00:39:28,940 --> 00:39:34,970
intensely difficult but certainly

00:39:32,539 --> 00:39:38,200
languages and libraries are attainable

00:39:34,970 --> 00:39:38,200
and I've seen

00:39:58,270 --> 00:40:10,880
you don't have to do as much yourself

00:40:00,820 --> 00:40:13,210
right right yeah I mean I have

00:40:10,880 --> 00:40:16,010
occasionally seen cases where a

00:40:13,210 --> 00:40:18,350
mathematical result on arm will give a

00:40:16,010 --> 00:40:20,840
different one from Intel and you file a

00:40:18,350 --> 00:40:22,280
bug report and you sort of dive into the

00:40:20,840 --> 00:40:30,080
algorithms to make sure that the

00:40:22,280 --> 00:40:32,720
libraries are doing the right thing yeah

00:40:30,080 --> 00:40:34,610
so it's it's actually you're actually

00:40:32,720 --> 00:40:37,070
using all those instructions and and

00:40:34,610 --> 00:40:39,980
working your way up the stack from the

00:40:37,070 --> 00:40:41,630
fundamentals up to you know up to higher

00:40:39,980 --> 00:40:44,050
level things the other thing you have to

00:40:41,630 --> 00:40:46,550
do is continuous performance evaluation

00:40:44,050 --> 00:40:49,010
where you make a change and did you have

00:40:46,550 --> 00:40:50,600
a regression on various tests and can

00:40:49,010 --> 00:40:51,650
you get forward progress and is it

00:40:50,600 --> 00:40:53,150
forward progress and all the

00:40:51,650 --> 00:40:55,640
architectures because you don't want to

00:40:53,150 --> 00:41:01,360
do something on arm that makes the Intel

00:40:55,640 --> 00:41:01,360
system slower that's that's a failure so

00:41:12,600 --> 00:41:19,590
so what arm is bringing is hike or

00:41:16,050 --> 00:41:23,190
density lots and lots of cores for the

00:41:19,590 --> 00:41:26,460
same on the same you know die size and

00:41:23,190 --> 00:41:30,630
comparable power consumption more cores

00:41:26,460 --> 00:41:32,850
and alternative systems so if your

00:41:30,630 --> 00:41:35,100
workload is by its nature of really

00:41:32,850 --> 00:41:36,630
parallel because it's IO bound rather

00:41:35,100 --> 00:41:39,690
than CPU bound or you have a lot of

00:41:36,630 --> 00:41:41,490
threads that you need to run it that

00:41:39,690 --> 00:41:43,950
those systems tend to have much higher

00:41:41,490 --> 00:41:48,090
core counts for the same price

00:41:43,950 --> 00:41:50,040
performance envelope and that's valuable

00:41:48,090 --> 00:41:57,150
in some workloads and less valuable in

00:41:50,040 --> 00:41:58,310
others with that I will thank you look

00:41:57,150 --> 00:42:02,159
forward to having

00:41:58,310 --> 00:42:02,159

YouTube URL: https://www.youtube.com/watch?v=3-zfRYBY83Y


