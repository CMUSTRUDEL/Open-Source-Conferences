Title: Bootstrapping Secure Mesos Clusters
Publication date: 2017-09-18
Playlist: MesosCon North America 2017
Description: 
	Bootstrapping Secure Mesos Clusters - Vishnu Mohan, Adam Bordelon, Vinod Kone & Jorg Schad, Mesosphere (limited spots, pre-registration suggested)

Apache Mesos offers a range of features that allow you to secure your cluster and prevent breaches and other attacks. This talk will provide an overview of the security features and recommendations for hardening your Mesos cluster. 

The goals of for this talk are to depict how to: 
1. Isolate the cluster perimeter with strong authentication and authorization across all interfaces. 
2. Secure and protect the internal cluster communication, containers, and sandboxes. 
3. Enhance cluster security with support for 3rd party security integrations. 

Topics to cover include: 
1. Security Zones 
2. Security Modes 
3. User and Framework/Service Authentication 
4. User and Framework/Service Authorization 
5. TLS Encryption 
6. Namespaces 
7. Secrets Management 
8. Hardening Recommendations

About 

Vinod Kone
Tech Lead and Engineering Manager, Mesosphere, Inc.
Vinod Kone is a committer and PMC member of the Apache Mesos project. He is currently a Tech Lead and Engineering Manager @ Mesosphere. Previously, he was a Tech Lead and Manager of the Mesos team @Twitter. Vinod completed his PhD in Computer Science from UC Santa Barbara.

Jörg Schad
Software Engineer, Mesosphere
Jörg is a software engineer at Mesosphere in Hamburg. In his previous life he implemented distributed and in memory databases and conducted research in the Hadoop and Cloud area. His speaking experience includes various Meetups, international conferences, and lecture halls.

Vishnu Mohan
Mesosphere
Solutions Architect
Vishnu Mohan is a Solutions Engineer at Mesosphere working closely with strategic customers in the field on Performance, Management and Automation initiatives. When he’s not analyzing sandbox logs or coding against some API for fun, he may be found rock climbing, hiking, running or scuba diving.

Adam Bordelon
Distributed System Engineer
Mesosphere
San Francisco
Websitemesosphere.io
Adam Bordelon is a distributed systems architect at Mesosphere and an Apache Mesos committer. Before joining Mesosphere, Adam lead development on Hadoop core at MapR, built distributed systems for recommendations at Amazon, and re-architected the LabVIEW compiler at National Instruments. He completed his Master’s degree at Rice University, building a tool to analyze supercomputer performance data for bottlenecks and anomalies.
Captions: 
	00:00:00,030 --> 00:00:05,339
all right I think we're gonna go ahead

00:00:01,230 --> 00:00:08,160
and get started go ahead and get your

00:00:05,339 --> 00:00:13,250
laptop's out start pulling these docker

00:00:08,160 --> 00:00:18,500
images the repo is again DCOs - labs

00:00:13,250 --> 00:00:20,760
slash secure - meso stache workshop

00:00:18,500 --> 00:00:23,310
their large docker images you want to

00:00:20,760 --> 00:00:28,349
get them early before everybody else

00:00:23,310 --> 00:00:30,869
steals your Wi-Fi and yeah I'll hand it

00:00:28,349 --> 00:00:33,570
over to Vishnu my name is Adam Bordelon

00:00:30,869 --> 00:00:36,899
I work at Mesa sphere maysa committer DC

00:00:33,570 --> 00:00:39,510
US committer all kinds of things it's my

00:00:36,899 --> 00:00:45,480
fourth meso scon so I've been doing this

00:00:39,510 --> 00:00:51,480
a while yeah that's kind of like me I am

00:00:45,480 --> 00:00:54,090
me at Apache org and your giz our track

00:00:51,480 --> 00:00:56,699
lead he'll be around to help you with

00:00:54,090 --> 00:01:00,270
the workshop during the exercise time as

00:00:56,699 --> 00:01:03,480
well and the node will be joining us

00:01:00,270 --> 00:01:06,270
shortly I one of the original maces

00:01:03,480 --> 00:01:08,510
committers and contributors worked at

00:01:06,270 --> 00:01:11,310
Twitter there for a while is now

00:01:08,510 --> 00:01:16,950
managing the nacelles core team at Mesa

00:01:11,310 --> 00:01:19,130
sphere and we've got Vishnu I work in

00:01:16,950 --> 00:01:19,130
sales

00:01:24,130 --> 00:01:29,689
all right so actually this is actually a

00:01:27,590 --> 00:01:32,539
continuing conversation from anybody

00:01:29,689 --> 00:01:35,630
that was at mrs. Kahn 2016 or Adam

00:01:32,539 --> 00:01:37,729
actually put together a Mesa security

00:01:35,630 --> 00:01:39,920
best practices talk so it's been a

00:01:37,729 --> 00:01:42,890
couple of improvements obviously over

00:01:39,920 --> 00:01:45,170
the course of a year in Mesa security

00:01:42,890 --> 00:01:47,719
we're trying to address most of the

00:01:45,170 --> 00:01:50,869
topics that are still relevant but also

00:01:47,719 --> 00:01:52,579
introduce a couple of new topics so for

00:01:50,869 --> 00:01:56,030
those of you just trickled in after we

00:01:52,579 --> 00:01:58,819
got started or are just arriving all of

00:01:56,030 --> 00:02:00,649
the slides all of the content readme and

00:01:58,819 --> 00:02:02,629
all the link to the docker images that

00:02:00,649 --> 00:02:05,689
you need to download are available at

00:02:02,629 --> 00:02:07,879
this URL the slide should also be up on

00:02:05,689 --> 00:02:09,679
the sched site I think you're applauded

00:02:07,879 --> 00:02:10,609
it so if you've got your schedule open

00:02:09,679 --> 00:02:13,040
it should be there too

00:02:10,609 --> 00:02:16,340
all right great as mentioned earlier

00:02:13,040 --> 00:02:18,470
it's a continuing discussion and I'm

00:02:16,340 --> 00:02:21,440
constantly surprised by my interactions

00:02:18,470 --> 00:02:23,630
on slack the community mailing lists so

00:02:21,440 --> 00:02:25,459
on and so forth when people come to us

00:02:23,630 --> 00:02:28,130
and you know ask us for advice on how

00:02:25,459 --> 00:02:29,900
they should be running them ASOS cluster

00:02:28,130 --> 00:02:32,150
by by saying I suddenly find myself

00:02:29,900 --> 00:02:33,739
running a Bitcoin miner on my cluster

00:02:32,150 --> 00:02:35,359
what do I do

00:02:33,739 --> 00:02:37,370
so this is this has happened more often

00:02:35,359 --> 00:02:40,160
and some of you may laugh at this but

00:02:37,370 --> 00:02:43,280
there's plenty of people out there that

00:02:40,160 --> 00:02:45,230
are getting owned and especially given

00:02:43,280 --> 00:02:47,269
what's happened at Equifax and how it's

00:02:45,230 --> 00:02:49,549
affected almost everybody I don't think

00:02:47,269 --> 00:02:51,680
it's not affected there's nobody that's

00:02:49,549 --> 00:02:54,590
unaffected by it we want to make sure

00:02:51,680 --> 00:02:56,889
that you try to the best of our

00:02:54,590 --> 00:03:00,079
knowledge you know to set up a cluster

00:02:56,889 --> 00:03:04,660
that is somewhat relatively tolerant to

00:03:00,079 --> 00:03:06,700
most known attack vectors and again I

00:03:04,660 --> 00:03:09,200
personally work with a lot of customers

00:03:06,700 --> 00:03:11,359
we have you know customers and financial

00:03:09,200 --> 00:03:12,440
services healthcare government you name

00:03:11,359 --> 00:03:13,790
it

00:03:12,440 --> 00:03:15,109
and they're all handling very very

00:03:13,790 --> 00:03:19,069
sensitive data and very important data

00:03:15,109 --> 00:03:20,329
that you know affects our lives so and a

00:03:19,069 --> 00:03:23,239
lot of this stuff is running on masers

00:03:20,329 --> 00:03:25,730
as of late and we're trying to make sure

00:03:23,239 --> 00:03:28,489
that they understand the implications

00:03:25,730 --> 00:03:29,660
this talk is still very introductory at

00:03:28,489 --> 00:03:31,729
the end of it and even at the end of the

00:03:29,660 --> 00:03:32,569
labs it's only scratching the surface of

00:03:31,729 --> 00:03:35,480
what

00:03:32,569 --> 00:03:37,909
we really need to put together for a

00:03:35,480 --> 00:03:39,260
missus and all of the components around

00:03:37,909 --> 00:03:41,150
it in fact there's a lot of things that

00:03:39,260 --> 00:03:43,760
are out of scope and we won't be able to

00:03:41,150 --> 00:03:46,250
get to them but if you have any

00:03:43,760 --> 00:03:48,379
questions on any pointed questions that

00:03:46,250 --> 00:03:50,840
are not covered by this talk between

00:03:48,379 --> 00:03:52,540
Adam and the rest of the crew here I'm

00:03:50,840 --> 00:03:56,000
pretty sure we can answer most of that

00:03:52,540 --> 00:03:57,769
so the other things that are sort of

00:03:56,000 --> 00:03:59,150
interesting is you know over the past

00:03:57,769 --> 00:04:00,769
year at least we've enabled a lot of

00:03:59,150 --> 00:04:02,900
primitives that enable better

00:04:00,769 --> 00:04:05,329
multi-tenancy I know it's a overloaded

00:04:02,900 --> 00:04:07,250
term but we'll try and qualify what we

00:04:05,329 --> 00:04:10,760
mean by multi-tenancy at least in this

00:04:07,250 --> 00:04:12,470
realm but in general it's like let's try

00:04:10,760 --> 00:04:14,150
and prevent all of the easy mistakes

00:04:12,470 --> 00:04:17,299
from happening it's really what this

00:04:14,150 --> 00:04:19,220
talk is about stuff that's out of scope

00:04:17,299 --> 00:04:22,639
I mean container security again is a

00:04:19,220 --> 00:04:24,139
very very broad topic a lot of the very

00:04:22,639 --> 00:04:26,720
specific things about the container

00:04:24,139 --> 00:04:29,330
riser security is covered in this may so

00:04:26,720 --> 00:04:30,979
stick it 49/36 so I'm not gonna talk

00:04:29,330 --> 00:04:32,690
about mandatory access controls at the

00:04:30,979 --> 00:04:35,419
Linux kernel level or capabilities or

00:04:32,690 --> 00:04:36,770
SATCOM or user name spaces they all have

00:04:35,419 --> 00:04:38,870
their role to play and they all need to

00:04:36,770 --> 00:04:41,330
work really closely together and there's

00:04:38,870 --> 00:04:43,550
still gaps in what we can support it in

00:04:41,330 --> 00:04:44,930
do support today as it relates do you

00:04:43,550 --> 00:04:48,530
know other containerize is like docker

00:04:44,930 --> 00:04:50,750
and so on so but just just quickly maysa

00:04:48,530 --> 00:04:52,970
does have capability support SEP comp is

00:04:50,750 --> 00:04:55,310
a work in progress user namespaces is

00:04:52,970 --> 00:04:58,220
notoriously difficult so getting this

00:04:55,310 --> 00:05:01,159
design right is something that's gonna

00:04:58,220 --> 00:05:02,930
take us and everybody else a lot more

00:05:01,159 --> 00:05:04,639
time and again we're gonna talk about

00:05:02,930 --> 00:05:06,710
like hardware security primitives I mean

00:05:04,639 --> 00:05:10,130
if you're really using something like a

00:05:06,710 --> 00:05:11,960
TPM trusted platform module or hardware

00:05:10,130 --> 00:05:13,940
security module like an S HSM for key

00:05:11,960 --> 00:05:15,800
management or you know other sort of

00:05:13,940 --> 00:05:19,430
credentials a secret management we're

00:05:15,800 --> 00:05:21,289
not gonna talk about that okay so where

00:05:19,430 --> 00:05:22,849
do we start right so let's make sure we

00:05:21,289 --> 00:05:24,500
fence off the outer boundary of the

00:05:22,849 --> 00:05:26,900
Maysles cluster that's what's securing

00:05:24,500 --> 00:05:29,780
the perimeter is all about like you know

00:05:26,900 --> 00:05:31,280
make sure everything is you shouldn't be

00:05:29,780 --> 00:05:33,169
able to access let's say you know the

00:05:31,280 --> 00:05:35,780
poor 5050 on your mesas master you

00:05:33,169 --> 00:05:38,330
shouldn't be able to access 80 80 or 8

00:05:35,780 --> 00:05:41,029
443 on marathon for example by default

00:05:38,330 --> 00:05:42,529
so at least from the outside world and

00:05:41,029 --> 00:05:45,200
the outside world being some sort of

00:05:42,529 --> 00:05:46,520
threat vector so what are we talking

00:05:45,200 --> 00:05:48,110
about right so we have a

00:05:46,520 --> 00:05:50,270
bunch of mezzos components we have you

00:05:48,110 --> 00:05:52,910
know potential actors like framework

00:05:50,270 --> 00:05:54,319
developer or user we have these service

00:05:52,910 --> 00:05:55,669
users they don't really necessarily care

00:05:54,319 --> 00:05:58,009
that stuff is running on DCOs

00:05:55,669 --> 00:06:00,110
and finally have the actual operators or

00:05:58,009 --> 00:06:02,229
admins of the dcs cluster right how do

00:06:00,110 --> 00:06:04,099
we stitch together all of these sort of

00:06:02,229 --> 00:06:06,080
components and building blocks together

00:06:04,099 --> 00:06:08,240
and arrive at something that's you know

00:06:06,080 --> 00:06:12,190
out of the box a little more secure than

00:06:08,240 --> 00:06:15,259
the default we all know that the Masters

00:06:12,190 --> 00:06:16,729
listen on port 5050 as its shown there's

00:06:15,259 --> 00:06:19,099
also 2181 on there which is the

00:06:16,729 --> 00:06:20,990
zookeeper and securing zookeeper is very

00:06:19,099 --> 00:06:22,970
very difficult if not impossible

00:06:20,990 --> 00:06:24,889
it doesn't do TLS yet and the best

00:06:22,970 --> 00:06:28,520
technology that we have for zookeepers

00:06:24,889 --> 00:06:31,460
ACLs so which is also why at the start

00:06:28,520 --> 00:06:32,810
of the keynote we mentioned getting rid

00:06:31,460 --> 00:06:34,580
of zookeeper is actually a pretty big

00:06:32,810 --> 00:06:36,830
priority right it's very hard to secure

00:06:34,580 --> 00:06:38,659
it's got it solved a problem for a lot

00:06:36,830 --> 00:06:40,699
of people including us for a very long

00:06:38,659 --> 00:06:42,500
time but we're quickly running up

00:06:40,699 --> 00:06:44,449
against its limitations pretty badly and

00:06:42,500 --> 00:06:45,110
hopefully we can get rid of it and

00:06:44,449 --> 00:06:47,030
replace it with something that's

00:06:45,110 --> 00:06:49,610
actually secure as well

00:06:47,030 --> 00:06:51,530
the agents listen on port 50 51 and then

00:06:49,610 --> 00:06:53,330
you have I want to introduce this

00:06:51,530 --> 00:06:55,310
concept of a public agent which is a

00:06:53,330 --> 00:06:57,800
special class of agents which is usually

00:06:55,310 --> 00:06:59,539
going to be used for ingress traffic so

00:06:57,800 --> 00:07:01,639
we don't want anything directly being

00:06:59,539 --> 00:07:05,060
able to like you know communicate with

00:07:01,639 --> 00:07:06,050
your agents ideally directly instead

00:07:05,060 --> 00:07:07,759
we're gonna proxy all these

00:07:06,050 --> 00:07:09,139
communications through a limited subset

00:07:07,759 --> 00:07:11,060
of nodes that are going to be sitting in

00:07:09,139 --> 00:07:13,130
like a DMZ environment and that's this

00:07:11,060 --> 00:07:14,810
notion of a public agent so that's why I

00:07:13,130 --> 00:07:17,330
put 80 and 443 there you're typically

00:07:14,810 --> 00:07:19,279
gonna run some sort of proxy age a proxy

00:07:17,330 --> 00:07:20,840
engine X something like that and then

00:07:19,279 --> 00:07:22,159
have that talk to your actual services

00:07:20,840 --> 00:07:25,279
running on the private agents and it's

00:07:22,159 --> 00:07:28,430
all filtered through a firewall so let's

00:07:25,279 --> 00:07:30,469
start with just the maysa security I

00:07:28,430 --> 00:07:32,900
know this is kind of like interesting to

00:07:30,469 --> 00:07:34,430
watch so effectively what this is trying

00:07:32,900 --> 00:07:36,590
to say that almost all communications

00:07:34,430 --> 00:07:37,880
traverse through a firewall if the

00:07:36,590 --> 00:07:39,639
master wants to talk to a private agent

00:07:37,880 --> 00:07:42,080
technically should go through a firewall

00:07:39,639 --> 00:07:43,460
the publication talking back to a

00:07:42,080 --> 00:07:44,599
private agent so so on so forth

00:07:43,460 --> 00:07:47,599
they should technically go through a

00:07:44,599 --> 00:07:48,740
firewall but what this also means is

00:07:47,599 --> 00:07:50,360
that each of these things aren't

00:07:48,740 --> 00:07:52,610
different network domains or network

00:07:50,360 --> 00:07:54,199
zones right you have a network zone for

00:07:52,610 --> 00:07:56,120
your publications you have a network

00:07:54,199 --> 00:07:58,430
zone for your public private agents and

00:07:56,120 --> 00:07:59,960
your masters which is the control play

00:07:58,430 --> 00:08:01,970
and should also be in a different

00:07:59,960 --> 00:08:03,500
and then the firewall sits between the

00:08:01,970 --> 00:08:05,509
zone and your routing traffic back and

00:08:03,500 --> 00:08:07,250
forth and only permitting you know the

00:08:05,509 --> 00:08:09,860
the port's that actually matter for this

00:08:07,250 --> 00:08:11,900
communication to work right but in

00:08:09,860 --> 00:08:14,569
practice it turns out that you know it's

00:08:11,900 --> 00:08:16,759
more of a free-for-all you really want a

00:08:14,569 --> 00:08:18,590
lot more permissive access between the

00:08:16,759 --> 00:08:20,240
masters and the agents and between the

00:08:18,590 --> 00:08:21,860
publication in the private agent more

00:08:20,240 --> 00:08:22,940
specifically from the private from the

00:08:21,860 --> 00:08:24,380
publication to the private agent yeah

00:08:22,940 --> 00:08:26,419
because your applications are actually

00:08:24,380 --> 00:08:28,190
running on your private agents so in

00:08:26,419 --> 00:08:29,330
practice it's actually harder to secure

00:08:28,190 --> 00:08:32,240
this communication which is why this

00:08:29,330 --> 00:08:34,099
entire thing is in a specific boundary

00:08:32,240 --> 00:08:35,839
and now if you introduce the the

00:08:34,099 --> 00:08:37,580
administrators they will go through off

00:08:35,839 --> 00:08:40,490
our wall so they will only access port a

00:08:37,580 --> 00:08:42,140
port 5050 for example on the masters but

00:08:40,490 --> 00:08:44,240
that again beyond talking about

00:08:42,140 --> 00:08:46,520
authentication yet but just is just the

00:08:44,240 --> 00:08:48,589
port security at this point and this

00:08:46,520 --> 00:08:51,589
itself will help you a lot because at

00:08:48,589 --> 00:08:53,810
this point only the master is accessible

00:08:51,589 --> 00:08:56,209
you typically don't want your agents

00:08:53,810 --> 00:08:57,290
directly accessible right you have want

00:08:56,209 --> 00:08:57,940
to go through something else I'll get to

00:08:57,290 --> 00:09:00,290
that later

00:08:57,940 --> 00:09:01,670
so now throw in the developers or the

00:09:00,290 --> 00:09:02,589
framework users the people that use

00:09:01,670 --> 00:09:07,070
marathon

00:09:02,589 --> 00:09:08,029
welcome to node say and and and now

00:09:07,070 --> 00:09:09,860
these are the people they're actually

00:09:08,029 --> 00:09:11,450
using a framework so developing

00:09:09,860 --> 00:09:13,040
frameworks the writing frameworks or you

00:09:11,450 --> 00:09:15,079
know using marathon so even they need to

00:09:13,040 --> 00:09:16,010
go through a separate set of our walls

00:09:15,079 --> 00:09:17,990
to make sure that they are only

00:09:16,010 --> 00:09:19,399
accessing the services that that they

00:09:17,990 --> 00:09:20,810
should technically be accessing on the

00:09:19,399 --> 00:09:23,029
port's that they should be accessing so

00:09:20,810 --> 00:09:24,380
I've also interested introduced the load

00:09:23,029 --> 00:09:26,510
balancer here and I didn't mention this

00:09:24,380 --> 00:09:28,730
in the previous slide but this is in any

00:09:26,510 --> 00:09:30,290
typical highly available environment you

00:09:28,730 --> 00:09:32,779
can have multiple masters multiple

00:09:30,290 --> 00:09:34,010
agents and in this case even the

00:09:32,779 --> 00:09:35,540
frameworks it could be at least two or

00:09:34,010 --> 00:09:38,180
three depending on your level of availab

00:09:35,540 --> 00:09:41,180
availability so there's there's a load

00:09:38,180 --> 00:09:43,430
balancer involved as well and finally we

00:09:41,180 --> 00:09:44,810
have this third class of users the the

00:09:43,430 --> 00:09:46,990
people are just like trying to connect

00:09:44,810 --> 00:09:50,209
to the service that's being hosted by

00:09:46,990 --> 00:09:51,649
your masers cluster and they don't

00:09:50,209 --> 00:09:52,730
necessarily talk to any of the

00:09:51,649 --> 00:09:54,500
administrative infrastructure they

00:09:52,730 --> 00:09:56,060
shouldn't even know about the control

00:09:54,500 --> 00:09:58,070
plane ideally they shouldn't even know

00:09:56,060 --> 00:10:00,050
that's running on mesos right they only

00:09:58,070 --> 00:10:02,089
want to talk to know whatever it is that

00:10:00,050 --> 00:10:03,620
Tomcat application or whatever and that

00:10:02,089 --> 00:10:05,329
goes through a separate set of firewalls

00:10:03,620 --> 00:10:07,130
and load balancers and they only talk to

00:10:05,329 --> 00:10:10,339
the public agents so you're restricting

00:10:07,130 --> 00:10:13,520
the sort of attack vector at this point

00:10:10,339 --> 00:10:15,620
does it make sense so far

00:10:13,520 --> 00:10:17,360
very simple stuff but this is the kind

00:10:15,620 --> 00:10:19,010
of things that will prevent you know you

00:10:17,360 --> 00:10:21,020
getting owned by a Bitcoin or ether

00:10:19,010 --> 00:10:24,290
minor don't wake up one morning and find

00:10:21,020 --> 00:10:26,270
that running on your cluster there's

00:10:24,290 --> 00:10:28,160
another important thing that you know we

00:10:26,270 --> 00:10:30,649
have this in this us but it's a nice

00:10:28,160 --> 00:10:32,540
pattern to also include we call this a

00:10:30,649 --> 00:10:34,490
service gateway proxy whatever you want

00:10:32,540 --> 00:10:35,930
to call it but effectively it's

00:10:34,490 --> 00:10:39,500
something like an engine X that sits in

00:10:35,930 --> 00:10:42,170
front of all of this that provides user

00:10:39,500 --> 00:10:44,750
friendly routes effectively so when I

00:10:42,170 --> 00:10:47,060
want to access my masers masters I would

00:10:44,750 --> 00:10:49,790
just say go to this hostname you know

00:10:47,060 --> 00:10:51,620
whatever gateway dot my cluster comm

00:10:49,790 --> 00:10:53,839
slash may service and will take me to

00:10:51,620 --> 00:10:55,430
the main so sui if I go to slash agent

00:10:53,839 --> 00:10:57,709
that's also a proxy by which I can

00:10:55,430 --> 00:10:59,779
actually get to the agent UI more

00:10:57,709 --> 00:11:01,490
specifically the sandbox logs right you

00:10:59,779 --> 00:11:03,920
don't want the sandbox logs directly

00:11:01,490 --> 00:11:06,470
exposed over an open network so you can

00:11:03,920 --> 00:11:08,510
attack the the agents that way so this

00:11:06,470 --> 00:11:10,550
is still a nice thing to introduce in

00:11:08,510 --> 00:11:11,510
between which will help complete the

00:11:10,550 --> 00:11:14,089
picture both from a usability

00:11:11,510 --> 00:11:15,260
perspective and also it does improve the

00:11:14,089 --> 00:11:17,300
security of the platform because if

00:11:15,260 --> 00:11:18,709
forcing everything to now enter just

00:11:17,300 --> 00:11:21,140
like we did for the HF proxies on the

00:11:18,709 --> 00:11:22,339
public agents a finite set of elements

00:11:21,140 --> 00:11:23,779
that you tightly control and lock down

00:11:22,339 --> 00:11:29,089
so that's really what the service

00:11:23,779 --> 00:11:30,920
gateway is for okay obvious things that

00:11:29,089 --> 00:11:35,120
everybody should be using by now it is

00:11:30,920 --> 00:11:38,000
2017 it should be TLS not SSL please use

00:11:35,120 --> 00:11:41,570
TLS and in modern versions of the the

00:11:38,000 --> 00:11:43,310
protocol so some people still use the

00:11:41,570 --> 00:11:45,589
words interchangeably but yeah SSL is

00:11:43,310 --> 00:11:49,399
dead we still use the environment

00:11:45,589 --> 00:11:53,540
variables that they called SSL but as

00:11:49,399 --> 00:11:56,029
you can see there's this TLS involved so

00:11:53,540 --> 00:11:57,800
very specifically by default a source

00:11:56,029 --> 00:11:59,300
does not build with TLS support so if

00:11:57,800 --> 00:12:00,829
you're gonna build your own basis or

00:11:59,300 --> 00:12:04,459
roll your own masers make sure you

00:12:00,829 --> 00:12:06,350
compile it with those flags need to use

00:12:04,459 --> 00:12:10,070
live event and basically this is

00:12:06,350 --> 00:12:11,930
wrapping open SSL live event open SSL

00:12:10,070 --> 00:12:13,220
one of those libraries so yeah this is

00:12:11,930 --> 00:12:15,920
this is effectively required for you to

00:12:13,220 --> 00:12:18,709
even enable TLS support for masers by

00:12:15,920 --> 00:12:20,990
default it's not built that way unless

00:12:18,709 --> 00:12:23,720
you know you're using one of our double

00:12:20,990 --> 00:12:26,330
masers official binaries which now by

00:12:23,720 --> 00:12:28,310
default include TLS yeah

00:12:26,330 --> 00:12:30,500
there's a whole bunch of variables I

00:12:28,310 --> 00:12:31,730
mean the important ones are yes you want

00:12:30,500 --> 00:12:33,890
it to be enabled right

00:12:31,730 --> 00:12:35,300
so this downgrade thing is also very

00:12:33,890 --> 00:12:37,190
dangerous I mean you typically don't

00:12:35,300 --> 00:12:38,950
want to have once you've enabled a TLS

00:12:37,190 --> 00:12:42,020
connection to go back to insecure

00:12:38,950 --> 00:12:44,180
connections is that correct yes

00:12:42,020 --> 00:12:45,620
just for upgrades so yes we will always

00:12:44,180 --> 00:12:47,330
want to like make sure that if you are

00:12:45,620 --> 00:12:50,240
trying to connect over an insecure and

00:12:47,330 --> 00:12:51,860
non TLS connection we want to upgrade

00:12:50,240 --> 00:12:54,170
you up to TLS and say no no I want you

00:12:51,860 --> 00:12:55,640
to connect with you less obviously for

00:12:54,170 --> 00:12:59,930
any TLS communication in a key file a

00:12:55,640 --> 00:13:01,640
cert file and you want to verify your

00:12:59,930 --> 00:13:03,170
certificates we don't we're not doing

00:13:01,640 --> 00:13:04,580
mutual authentication of the master and

00:13:03,170 --> 00:13:07,100
the agent or whatever is communicating

00:13:04,580 --> 00:13:08,870
over TLS at the moment but it does help

00:13:07,100 --> 00:13:11,180
you verify the chain of trust if you

00:13:08,870 --> 00:13:13,610
actually say require cert so this is a

00:13:11,180 --> 00:13:14,810
nice feature to have so you and this

00:13:13,610 --> 00:13:16,760
actually effectively makes it more

00:13:14,810 --> 00:13:19,430
strict so you need verify and require

00:13:16,760 --> 00:13:24,590
the query implies verify so that's what

00:13:19,430 --> 00:13:25,820
happening there other things I really

00:13:24,590 --> 00:13:27,170
like using the certificate authority I

00:13:25,820 --> 00:13:28,790
mean so in the labs what we've been

00:13:27,170 --> 00:13:30,350
ending up going to do is we're gonna

00:13:28,790 --> 00:13:31,090
spin up like self-signed cert snake-oil

00:13:30,350 --> 00:13:33,260
certs

00:13:31,090 --> 00:13:35,390
this is not what you should be doing in

00:13:33,260 --> 00:13:38,990
production you really want to be using a

00:13:35,390 --> 00:13:40,760
proper CI but if you want to get started

00:13:38,990 --> 00:13:42,800
at least the communication is over TLS

00:13:40,760 --> 00:13:43,460
and not in plain text so that's really

00:13:42,800 --> 00:13:46,280
what this is about

00:13:43,460 --> 00:13:48,230
use proper ciphers I know people care

00:13:46,280 --> 00:13:50,990
about the version so please try to be on

00:13:48,230 --> 00:13:53,950
at least one to one one is still around

00:13:50,990 --> 00:13:57,470
100 should not be used it is deprecated

00:13:53,950 --> 00:13:59,210
so even an SSL v3 if anybody enables

00:13:57,470 --> 00:14:02,210
that you should fire them so don't do

00:13:59,210 --> 00:14:03,680
that and then yeah you can also pick the

00:14:02,210 --> 00:14:04,880
kind of curves that you want to use if

00:14:03,680 --> 00:14:07,430
you're really particular if you have

00:14:04,880 --> 00:14:11,480
like very finite security requirements

00:14:07,430 --> 00:14:14,780
you can also do that okay so this is a

00:14:11,480 --> 00:14:16,190
CA structure and you could set it up any

00:14:14,780 --> 00:14:18,950
which way most organizations that I've

00:14:16,190 --> 00:14:20,840
run into have a roost CA which is

00:14:18,950 --> 00:14:23,270
completely offline there's no way to get

00:14:20,840 --> 00:14:25,580
to it it's usually an HSM it's very

00:14:23,270 --> 00:14:27,800
expensive stuff and then what they

00:14:25,580 --> 00:14:30,590
instead do is have online intermediaries

00:14:27,800 --> 00:14:32,450
to which there's usually an API attached

00:14:30,590 --> 00:14:34,900
if you are actually a savvy customer and

00:14:32,450 --> 00:14:37,700
you don't want to kill somebody because

00:14:34,900 --> 00:14:39,650
generating certs with the CSR or getting

00:14:37,700 --> 00:14:40,620
it signed getting it back there really

00:14:39,650 --> 00:14:42,600
should be an API for

00:14:40,620 --> 00:14:45,690
there's toolkits out there like CFS SL

00:14:42,600 --> 00:14:48,240
from CloudFlare which is what we use

00:14:45,690 --> 00:14:50,490
inside this US for example but really it

00:14:48,240 --> 00:14:52,200
should be an API driven thing it's got

00:14:50,490 --> 00:14:54,270
another problem that I won't cover yet

00:14:52,200 --> 00:14:56,820
but which is you know somebody submits a

00:14:54,270 --> 00:14:59,070
CSR to this API why should I sign it

00:14:56,820 --> 00:15:00,240
right why should I give it back but I

00:14:59,070 --> 00:15:02,430
gotta talk about that problem

00:15:00,240 --> 00:15:04,230
specifically but usually the

00:15:02,430 --> 00:15:05,790
intermediaries can be tiered so you can

00:15:04,230 --> 00:15:07,980
actually have at the very top you have

00:15:05,790 --> 00:15:09,480
this you know intermediacy a for let's

00:15:07,980 --> 00:15:11,340
say the servers you have an intermediate

00:15:09,480 --> 00:15:13,800
for all of the application certs and

00:15:11,340 --> 00:15:16,290
then you could also distribute and have

00:15:13,800 --> 00:15:19,470
another intermediary second tier

00:15:16,290 --> 00:15:22,530
intermediary CA for region specific

00:15:19,470 --> 00:15:25,260
certs it's it's rare to see more than an

00:15:22,530 --> 00:15:27,060
intermediary or at least usually the the

00:15:25,260 --> 00:15:30,570
first levels of what I see with the

00:15:27,060 --> 00:15:32,700
offline route at the top but I've also

00:15:30,570 --> 00:15:34,800
seen the the pattern depending on how

00:15:32,700 --> 00:15:35,880
sophisticated customers are and finally

00:15:34,800 --> 00:15:38,100
you issue search for each of these

00:15:35,880 --> 00:15:40,350
things and then you have TLS so and

00:15:38,100 --> 00:15:42,360
that's the the open-ended item which is

00:15:40,350 --> 00:15:44,240
how do I actually get this you know key

00:15:42,360 --> 00:15:47,040
answer how do i generate the key insert

00:15:44,240 --> 00:15:49,350
and then get this sort of a good sign so

00:15:47,040 --> 00:15:50,880
and then finally we also have frameworks

00:15:49,350 --> 00:15:53,100
schedulers that also need to talk to the

00:15:50,880 --> 00:15:54,600
main source masters over TLS how do we

00:15:53,100 --> 00:15:55,920
get search to that how do we secure that

00:15:54,600 --> 00:15:58,140
communication how do we give the

00:15:55,920 --> 00:16:00,150
scheduler the private key and the

00:15:58,140 --> 00:16:01,980
certificate as well to to bootstrap

00:16:00,150 --> 00:16:03,540
itself those are all problems I'm going

00:16:01,980 --> 00:16:05,310
to like you know hand wave at this point

00:16:03,540 --> 00:16:07,290
come talk to us about some strategies

00:16:05,310 --> 00:16:08,850
that we've employed there's there's

00:16:07,290 --> 00:16:12,420
different kind of strategies for each of

00:16:08,850 --> 00:16:15,690
these things very simply how would we do

00:16:12,420 --> 00:16:17,390
this I really like the C API is but the

00:16:15,690 --> 00:16:21,270
only one thing I want to make sure is

00:16:17,390 --> 00:16:23,370
most people have api's actually the CF

00:16:21,270 --> 00:16:24,930
SSL has this where you can ask it to

00:16:23,370 --> 00:16:27,540
generate the private key on the server

00:16:24,930 --> 00:16:28,620
itself usually that's a bad strategy you

00:16:27,540 --> 00:16:30,570
really want to keep the private key

00:16:28,620 --> 00:16:32,730
completely only on the entity that's

00:16:30,570 --> 00:16:34,620
generating or requesting a cert that's

00:16:32,730 --> 00:16:36,000
really weren't sure here so either for

00:16:34,620 --> 00:16:37,640
your master or an agent or scheduler

00:16:36,000 --> 00:16:39,600
make sure the private key doesn't

00:16:37,640 --> 00:16:40,860
unnecessarily move across the network

00:16:39,600 --> 00:16:42,690
that's really what that's about

00:16:40,860 --> 00:16:45,090
so you generate a private key pair the

00:16:42,690 --> 00:16:46,650
public key private key generated CSR

00:16:45,090 --> 00:16:49,080
submit the CSR to the certificate

00:16:46,650 --> 00:16:50,760
authority for signing if it's valid and

00:16:49,080 --> 00:16:53,760
it's an open-ended question why should I

00:16:50,760 --> 00:16:56,070
give you a certificate back for your CSR

00:16:53,760 --> 00:16:58,680
zooming we're taking the short route

00:16:56,070 --> 00:17:00,360
here we'll get a valid sign certificate

00:16:58,680 --> 00:17:01,800
and we're off to the races otherwise we

00:17:00,360 --> 00:17:05,700
get an error and some leave that open

00:17:01,800 --> 00:17:08,010
for now any questions so far make sense

00:17:05,700 --> 00:17:10,580
yeah TLS is important

00:17:08,010 --> 00:17:14,070
I've had it over to Adam for more views

00:17:10,580 --> 00:17:17,280
all right so modules themselves are not

00:17:14,070 --> 00:17:19,730
specifically a security feature they but

00:17:17,280 --> 00:17:23,700
they enable us to plug in dynamic

00:17:19,730 --> 00:17:25,920
functionality via shared libraries which

00:17:23,700 --> 00:17:29,040
gives us a few different benefits

00:17:25,920 --> 00:17:31,470
one is you can isolate external

00:17:29,040 --> 00:17:32,520
dependencies if there's a you know some

00:17:31,470 --> 00:17:34,890
complex

00:17:32,520 --> 00:17:36,900
Sasol or something that you don't want

00:17:34,890 --> 00:17:39,450
to bundle into may so s-- itself you can

00:17:36,900 --> 00:17:40,770
put that in a module and then have that

00:17:39,450 --> 00:17:43,350
loaded dynamically you also don't have

00:17:40,770 --> 00:17:44,970
to recompile all of these things

00:17:43,350 --> 00:17:47,700
separately so the modules can be

00:17:44,970 --> 00:17:51,270
compiled separately from the the corm

00:17:47,700 --> 00:17:53,220
asos and this is enabled you know people

00:17:51,270 --> 00:17:55,290
to experiment you know grad students can

00:17:53,220 --> 00:17:57,900
go take may sews and inject their own

00:17:55,290 --> 00:17:58,350
functionality for allocators or whatever

00:17:57,900 --> 00:18:00,720
else

00:17:58,350 --> 00:18:01,970
it also has enabled companies like meso

00:18:00,720 --> 00:18:04,950
sphere to build our own proprietary

00:18:01,970 --> 00:18:07,470
implementations of authenticators

00:18:04,950 --> 00:18:13,350
authorizers that we can plug into our

00:18:07,470 --> 00:18:16,530
distribution of maysa and we as apache

00:18:13,350 --> 00:18:19,860
maysa committers in the community we've

00:18:16,530 --> 00:18:22,530
built out module injection points and

00:18:19,860 --> 00:18:27,270
hooks into various aspects of the master

00:18:22,530 --> 00:18:29,760
api and life cycle the agent api various

00:18:27,270 --> 00:18:34,590
different points in the container launch

00:18:29,760 --> 00:18:37,260
and destroy life cycle there are yeah

00:18:34,590 --> 00:18:40,490
many different module types so the

00:18:37,260 --> 00:18:43,350
allocator was one of the earliest ones

00:18:40,490 --> 00:18:45,810
we long talked about how it was

00:18:43,350 --> 00:18:48,600
pluggable but once we introduced most

00:18:45,810 --> 00:18:50,510
modules we actually made it pluggable so

00:18:48,600 --> 00:18:53,190
you can build your own implementation

00:18:50,510 --> 00:18:56,520
get rid of DRF if you want to experiment

00:18:53,190 --> 00:18:58,680
with something new there are companies

00:18:56,520 --> 00:19:01,220
that have worked with that for their own

00:18:58,680 --> 00:19:04,470
particular frameworks and workloads

00:19:01,220 --> 00:19:07,250
there's authentication which you know

00:19:04,470 --> 00:19:09,350
we'll talk quite a bit more about today

00:19:07,250 --> 00:19:11,240
we won't actually show you how to build

00:19:09,350 --> 00:19:12,950
your own Authenticator module or

00:19:11,240 --> 00:19:16,760
authenticate a Authenticator module

00:19:12,950 --> 00:19:18,740
today but it's not too hard

00:19:16,760 --> 00:19:19,900
reach out to us and we can walk you

00:19:18,740 --> 00:19:24,470
through the process

00:19:19,900 --> 00:19:25,610
offline authorizer as well which you

00:19:24,470 --> 00:19:27,770
know we like to separate authentication

00:19:25,610 --> 00:19:29,870
which is just validating the identity

00:19:27,770 --> 00:19:32,510
from authorization of what is this

00:19:29,870 --> 00:19:35,270
identity allowed to do and so you can

00:19:32,510 --> 00:19:39,590
swap out either of those independently

00:19:35,270 --> 00:19:42,830
or both of them secrets is another thing

00:19:39,590 --> 00:19:45,140
that we previously used some generic

00:19:42,830 --> 00:19:46,789
module and modules and hooks for the

00:19:45,140 --> 00:19:49,460
maces container Iser and the docker

00:19:46,789 --> 00:19:52,100
container Iser but recently have added a

00:19:49,460 --> 00:19:55,370
secret generator and resolver modules so

00:19:52,100 --> 00:19:58,789
that secrets are becoming first class in

00:19:55,370 --> 00:20:00,530
in Apache mesos I'll talk a little bit

00:19:58,789 --> 00:20:04,340
more about isolator which was the very

00:20:00,530 --> 00:20:06,620
first module that we introduced and it's

00:20:04,340 --> 00:20:08,539
a bit of a misnomer now originally it

00:20:06,620 --> 00:20:11,030
was the idea that okay you can have

00:20:08,539 --> 00:20:14,600
custom behavior you have some resource

00:20:11,030 --> 00:20:17,179
that you want to isolate and you know

00:20:14,600 --> 00:20:19,490
before a container launches you do some

00:20:17,179 --> 00:20:21,830
setup while it's running you do some

00:20:19,490 --> 00:20:24,440
monitoring when it dies you clean up and

00:20:21,830 --> 00:20:26,720
then it turns out that that's just

00:20:24,440 --> 00:20:29,690
generically useful to have these hooks

00:20:26,720 --> 00:20:31,010
into the container lifecycle so we've

00:20:29,690 --> 00:20:33,020
used that for many different things

00:20:31,010 --> 00:20:36,110
injecting secrets before you start the

00:20:33,020 --> 00:20:39,049
container modifying environment

00:20:36,110 --> 00:20:41,929
variables setting up you know new file

00:20:39,049 --> 00:20:44,059
systems you can do all kinds of things

00:20:41,929 --> 00:20:46,250
with an isolator so if a lot of times

00:20:44,059 --> 00:20:48,020
when partners and customers say oh I

00:20:46,250 --> 00:20:50,450
want to inject some custom functionality

00:20:48,020 --> 00:20:54,280
and may so Swee say it's probably going

00:20:50,450 --> 00:20:56,450
to be an isolator module we also have

00:20:54,280 --> 00:20:58,520
modularized the master contender and

00:20:56,450 --> 00:21:00,230
detector which is what's putting us on

00:20:58,520 --> 00:21:03,919
the path towards getting rid of

00:21:00,230 --> 00:21:06,770
zookeeper so rather than using zookeeper

00:21:03,919 --> 00:21:10,549
for leader election you could swap this

00:21:06,770 --> 00:21:13,549
out for at CD console text files I don't

00:21:10,549 --> 00:21:16,730
know whatever you want to do we have

00:21:13,549 --> 00:21:18,200
modules for container loggers and QoS

00:21:16,730 --> 00:21:18,630
controllers and resource estimators

00:21:18,200 --> 00:21:23,160
which is

00:21:18,630 --> 00:21:29,340
is used for oversubscription any

00:21:23,160 --> 00:21:33,810
questions on modules all right you want

00:21:29,340 --> 00:21:36,540
a cover authentication I think everybody

00:21:33,810 --> 00:21:38,280
knows what authentication means so

00:21:36,540 --> 00:21:40,710
effectively verifying the identity of

00:21:38,280 --> 00:21:41,520
something right do authenticating to be

00:21:40,710 --> 00:21:45,150
who you are

00:21:41,520 --> 00:21:47,010
so in masers we want to make sure that

00:21:45,150 --> 00:21:49,410
frameworks can be authenticated we don't

00:21:47,010 --> 00:21:50,790
want a rogue spark framework logging and

00:21:49,410 --> 00:21:52,470
consuming all of your resources for

00:21:50,790 --> 00:21:53,850
example so you want to make sure those

00:21:52,470 --> 00:21:55,470
frameworks are authenticated so you have

00:21:53,850 --> 00:21:57,720
a principle which identifies this

00:21:55,470 --> 00:22:00,480
framework that you know presents some

00:21:57,720 --> 00:22:03,060
sort of credential and says hey I am Who

00:22:00,480 --> 00:22:04,520
I am I know something about oh you also

00:22:03,060 --> 00:22:06,450
know something about me that makes me

00:22:04,520 --> 00:22:07,020
authenticated and now I can launch your

00:22:06,450 --> 00:22:08,310
tasks

00:22:07,020 --> 00:22:09,750
so that's really what framework

00:22:08,310 --> 00:22:11,100
authentication is we also want to make

00:22:09,750 --> 00:22:12,900
sure that we don't have rogue agents

00:22:11,100 --> 00:22:15,360
joining the mesas cluster and trying to

00:22:12,900 --> 00:22:17,190
subvert resources or tasks away to it so

00:22:15,360 --> 00:22:18,810
you can actually have a task that

00:22:17,190 --> 00:22:21,540
launches on a rogue agent and now you

00:22:18,810 --> 00:22:23,610
can perhaps slope a secret away so

00:22:21,540 --> 00:22:26,520
that's one other measure that we have

00:22:23,610 --> 00:22:28,500
and finally in even with operating or

00:22:26,520 --> 00:22:30,960
interacting with all of the various HTTP

00:22:28,500 --> 00:22:32,940
endpoints the all the API endpoints that

00:22:30,960 --> 00:22:34,800
we have and the operator endpoints that

00:22:32,940 --> 00:22:36,660
we have we also want to make sure that's

00:22:34,800 --> 00:22:38,100
authenticated we want somebody saying go

00:22:36,660 --> 00:22:40,080
and tear down a node or tear down a

00:22:38,100 --> 00:22:43,380
framework without the requisite

00:22:40,080 --> 00:22:45,600
privileges so that's the three types of

00:22:43,380 --> 00:22:47,730
authentication that we have Mesa is by

00:22:45,600 --> 00:22:50,580
default does ship with an authentication

00:22:47,730 --> 00:22:52,200
module that uses kram md5 authentication

00:22:50,580 --> 00:22:55,680
we'll get into some of these details in

00:22:52,200 --> 00:22:57,330
the lab we also can use gssapi for

00:22:55,680 --> 00:23:00,060
interacting with Kerberos because all of

00:22:57,330 --> 00:23:02,040
this is based on the Cyrus Sasol library

00:23:00,060 --> 00:23:04,310
simple authentication and security

00:23:02,040 --> 00:23:07,800
library I think that's what it's called

00:23:04,310 --> 00:23:09,330
ok so the next thing is yeah so what is

00:23:07,800 --> 00:23:11,490
it that that allows this thing to work

00:23:09,330 --> 00:23:13,200
we have to present a credential like I

00:23:11,490 --> 00:23:15,780
mentioned before which consists of a

00:23:13,200 --> 00:23:19,020
principal principal is this term and

00:23:15,780 --> 00:23:20,550
maysa which is kind of used for

00:23:19,020 --> 00:23:22,380
identifying what your subject is like

00:23:20,550 --> 00:23:24,420
what is the framework has a principal

00:23:22,380 --> 00:23:27,180
right that's what identifying that I'm

00:23:24,420 --> 00:23:29,520
Spock principal foo or whatever and then

00:23:27,180 --> 00:23:31,560
this is going to present a secret which

00:23:29,520 --> 00:23:32,370
in which in combination becomes the the

00:23:31,560 --> 00:23:34,590
credential and

00:23:32,370 --> 00:23:36,600
if the credential validates I am allowed

00:23:34,590 --> 00:23:38,880
to register the framework register as a

00:23:36,600 --> 00:23:41,659
framework and launch tasks that's

00:23:38,880 --> 00:23:43,799
effectively what's going on

00:23:41,659 --> 00:23:46,380
authorization is the twin of

00:23:43,799 --> 00:23:46,830
authentication so once I've proven Who I

00:23:46,380 --> 00:23:49,500
am

00:23:46,830 --> 00:23:51,299
what am I allowed to do right so it's

00:23:49,500 --> 00:23:54,140
very usually most people have familiar

00:23:51,299 --> 00:23:57,390
with ACLs a ce o--'s typically operate

00:23:54,140 --> 00:23:59,880
with a subject and action and an object

00:23:57,390 --> 00:24:02,340
right so there is something trying to

00:23:59,880 --> 00:24:04,919
perform some action on some object and

00:24:02,340 --> 00:24:08,279
that that triple effectively becomes an

00:24:04,919 --> 00:24:10,679
ACL right so we'll see examples of an

00:24:08,279 --> 00:24:12,149
ACL in action and we'll put together

00:24:10,679 --> 00:24:14,399
about the authentication and the

00:24:12,149 --> 00:24:16,940
authorization to allow certain kinds of

00:24:14,399 --> 00:24:22,110
tasks to launch or not launch based on

00:24:16,940 --> 00:24:23,549
the ACLs there's a whole bunch of stuff

00:24:22,110 --> 00:24:24,779
that's at the reason I put this up here

00:24:23,549 --> 00:24:27,330
is actually because when I first started

00:24:24,779 --> 00:24:29,820
at mesosphere two years ago we maybe had

00:24:27,330 --> 00:24:31,470
four or five actions and over the course

00:24:29,820 --> 00:24:33,960
of two years a whole bunch of other

00:24:31,470 --> 00:24:36,600
authorized able actions have been added

00:24:33,960 --> 00:24:37,950
so you can see that I think the one of

00:24:36,600 --> 00:24:40,260
the first ones was register frameworks

00:24:37,950 --> 00:24:41,940
and teardown frameworks and then a whole

00:24:40,260 --> 00:24:43,020
bunch of other stuff got added and this

00:24:41,940 --> 00:24:44,909
is what we're talking about earlier

00:24:43,020 --> 00:24:46,380
right in order to access the sandbox if

00:24:44,909 --> 00:24:47,820
you task for example we want to make

00:24:46,380 --> 00:24:50,220
sure they don't you know people who are

00:24:47,820 --> 00:24:51,750
authorized to access the sandbox are

00:24:50,220 --> 00:24:55,590
allowed to access the sandbox and so

00:24:51,750 --> 00:24:58,620
forth this is a diversion it's not

00:24:55,590 --> 00:25:01,409
directly related to a source but it's a

00:24:58,620 --> 00:25:04,080
very useful concept namespaces you might

00:25:01,409 --> 00:25:06,779
have seen this in other in other I guess

00:25:04,080 --> 00:25:08,429
orchestrators or security systems in

00:25:06,779 --> 00:25:11,520
general it's kind of like a nice way of

00:25:08,429 --> 00:25:15,090
organizing your mental model of how you

00:25:11,520 --> 00:25:17,700
should manage permissions it's in Cloud

00:25:15,090 --> 00:25:19,559
Foundry it's not really completely

00:25:17,700 --> 00:25:20,610
fleshed out in kubernetes but if you've

00:25:19,559 --> 00:25:20,850
used Cloud Foundry or something like

00:25:20,610 --> 00:25:24,870
that

00:25:20,850 --> 00:25:26,730
namespaces exist they're usually this is

00:25:24,870 --> 00:25:28,409
an easier way of looking at how we can

00:25:26,730 --> 00:25:30,480
do things because it's a mental map

00:25:28,409 --> 00:25:32,850
directly to how organizations and the

00:25:30,480 --> 00:25:34,380
end up being so at the very first year I

00:25:32,850 --> 00:25:36,360
like to segregate them out by

00:25:34,380 --> 00:25:37,620
environment so you have a developer I'm

00:25:36,360 --> 00:25:39,990
a test environment production

00:25:37,620 --> 00:25:41,789
environment and then your business units

00:25:39,990 --> 00:25:44,070
and projects structure starts to overlay

00:25:41,789 --> 00:25:46,080
on top of that and the reason for this

00:25:44,070 --> 00:25:48,779
is to reduce the

00:25:46,080 --> 00:25:50,760
a seal explosion really so if you have

00:25:48,779 --> 00:25:53,549
for example you know ten tasks right

00:25:50,760 --> 00:25:56,250
under some hierarchy instead of giving

00:25:53,549 --> 00:25:59,970
you know ten ACLs you can basically say

00:25:56,250 --> 00:26:02,399
at at the sales level imagine sales runs

00:25:59,970 --> 00:26:04,380
ten different kinds of tasks you can

00:26:02,399 --> 00:26:07,649
basically assign in a CEO at that higher

00:26:04,380 --> 00:26:09,120
level and not avoid and avoid completely

00:26:07,649 --> 00:26:10,860
having to write very very specific a

00:26:09,120 --> 00:26:13,679
sales for everything so kind of helps

00:26:10,860 --> 00:26:14,940
with the ACL reduction and this is why

00:26:13,679 --> 00:26:17,070
you would apply for missions right so

00:26:14,940 --> 00:26:19,590
you basically say a developer working in

00:26:17,070 --> 00:26:22,919
sales cannot have any permission to

00:26:19,590 --> 00:26:25,260
tasks running under the edge org for

00:26:22,919 --> 00:26:26,580
example so that's one way of looking at

00:26:25,260 --> 00:26:29,149
this and I wanted to mention this

00:26:26,580 --> 00:26:31,350
because one of the ways we do secrets

00:26:29,149 --> 00:26:33,539
authorization is directly mapped onto

00:26:31,350 --> 00:26:36,899
the namespace so it's actually a

00:26:33,539 --> 00:26:39,169
one-to-one map so if I have a secret in

00:26:36,899 --> 00:26:41,370
that namespace for example dev secret

00:26:39,169 --> 00:26:45,169
will we'll see how that actually like

00:26:41,370 --> 00:26:45,169
allows you to access a particular secret

00:26:48,350 --> 00:26:56,580
that's a great the question is is there

00:26:53,880 --> 00:26:59,340
any mapping of these namespaces on to

00:26:56,580 --> 00:27:01,850
the hierarchical roles that been H

00:26:59,340 --> 00:27:06,809
mentioned this morning the answer is

00:27:01,850 --> 00:27:10,919
that right now namespaces are purely a

00:27:06,809 --> 00:27:14,880
DCOs concept meso s-- doesn't know about

00:27:10,919 --> 00:27:18,179
them but in DCOs we are planning to tie

00:27:14,880 --> 00:27:20,760
hierarchical roles to namespaces that we

00:27:18,179 --> 00:27:24,630
use for authorization the hierarchical

00:27:20,760 --> 00:27:27,080
roles are specifically about name

00:27:24,630 --> 00:27:29,909
spacing the resources and which

00:27:27,080 --> 00:27:32,669
frameworks are subscribed to particular

00:27:29,909 --> 00:27:35,940
roles in the hierarchy to be offered

00:27:32,669 --> 00:27:39,330
those resources these namespaces are

00:27:35,940 --> 00:27:42,419
used for once you've launched a task the

00:27:39,330 --> 00:27:44,909
task then exists in a namespace and you

00:27:42,419 --> 00:27:47,970
can control AC have ACLs that control

00:27:44,909 --> 00:27:51,000
who can access which tasks based on a

00:27:47,970 --> 00:27:52,350
namespace definition that so you can

00:27:51,000 --> 00:27:55,679
specify you have access to everything

00:27:52,350 --> 00:27:58,230
under sales without having to specify

00:27:55,679 --> 00:27:59,549
each individual one and then secrets are

00:27:58,230 --> 00:28:01,950
also tied into that so

00:27:59,549 --> 00:28:06,299
can say this secret is available to any

00:28:01,950 --> 00:28:08,789
tasks under sales which I think you have

00:28:06,299 --> 00:28:13,799
a slide for that it's a little

00:28:08,789 --> 00:28:17,669
complicated to visualize it here but you

00:28:13,799 --> 00:28:22,739
can think of it as in DCOs at least that

00:28:17,669 --> 00:28:25,649
the a secret has a path and it's the

00:28:22,739 --> 00:28:28,200
secret is shared with any tasks under

00:28:25,649 --> 00:28:30,299
the namespace that the secret lives in

00:28:28,200 --> 00:28:33,179
so a secret that's at the top level is

00:28:30,299 --> 00:28:35,999
essentially shared with everything so

00:28:33,179 --> 00:28:38,669
it's not really secret a secret that is

00:28:35,999 --> 00:28:42,179
under like dev sales secret is

00:28:38,669 --> 00:28:45,659
accessible to debt of sales app or dev

00:28:42,179 --> 00:28:52,230
sales foo / bar / whatever / app but is

00:28:45,659 --> 00:28:54,960
not available to dev slash at - no do

00:28:52,230 --> 00:28:56,730
you want to talk about more about the

00:28:54,960 --> 00:29:15,919
first classing of Secrets in Apache

00:28:56,730 --> 00:29:15,919
maysa the top part

00:29:30,210 --> 00:29:39,540
yeah okay so what we did with secrets in

00:29:36,060 --> 00:29:43,710
the latest release of mrs. 1.3 who's

00:29:39,540 --> 00:29:47,190
trying to make it more understandable to

00:29:43,710 --> 00:29:49,560
mrs. Kaur previously most of the efforts

00:29:47,190 --> 00:29:53,280
for trying to deal with secrets were

00:29:49,560 --> 00:29:56,370
done using modules and out-of-band hooks

00:29:53,280 --> 00:29:58,110
not about knowledge but we wanted to

00:29:56,370 --> 00:30:01,980
have a first class concept in masers

00:29:58,110 --> 00:30:04,320
that properly understands secrets and

00:30:01,980 --> 00:30:06,720
make sure it's properly propagated to

00:30:04,320 --> 00:30:12,450
all the endpoints that are needed so

00:30:06,720 --> 00:30:14,550
what that means is we introduced two

00:30:12,450 --> 00:30:17,700
different interfaces in mesos for

00:30:14,550 --> 00:30:21,630
handling secrets the first interface is

00:30:17,700 --> 00:30:23,190
the secrets volume isolator and the

00:30:21,630 --> 00:30:26,010
environment isolator so we added two new

00:30:23,190 --> 00:30:28,440
Isolators first-class Isolators into

00:30:26,010 --> 00:30:32,340
masers and both of these Isolators are

00:30:28,440 --> 00:30:34,710
responsible for taking a secrets object

00:30:32,340 --> 00:30:37,230
which is also a new primitive in

00:30:34,710 --> 00:30:40,350
measures that we added it's a new

00:30:37,230 --> 00:30:42,810
product of message so given that secret

00:30:40,350 --> 00:30:44,940
message both these Isolators are going

00:30:42,810 --> 00:30:47,760
to set up either an environment that

00:30:44,940 --> 00:30:51,450
uses the secret that one stacks as the

00:30:47,760 --> 00:30:53,430
secret value or called for apps that

00:30:51,450 --> 00:30:56,670
want to access a secret value as a file

00:30:53,430 --> 00:30:59,010
so these Isolators you could use them to

00:30:56,670 --> 00:31:01,380
actually inject the secrets into a

00:30:59,010 --> 00:31:04,950
container basically as an environment or

00:31:01,380 --> 00:31:10,260
as a file and we also added a new

00:31:04,950 --> 00:31:13,380
interface called secrets resolver that's

00:31:10,260 --> 00:31:16,110
right up there so what this does is is

00:31:13,380 --> 00:31:18,570
essentially an interface that allows you

00:31:16,110 --> 00:31:19,980
to hook into your secret back-end for

00:31:18,570 --> 00:31:24,240
example if you have something like your

00:31:19,980 --> 00:31:26,730
vault and you're storing that all your

00:31:24,240 --> 00:31:29,400
secrets data involved and you want to be

00:31:26,730 --> 00:31:31,620
able to access that data from Walton

00:31:29,400 --> 00:31:33,510
give them access to your environment or

00:31:31,620 --> 00:31:35,700
file by Secrets you could actually

00:31:33,510 --> 00:31:36,870
implement this is all very interface to

00:31:35,700 --> 00:31:39,360
talk to whatever back and your

00:31:36,870 --> 00:31:41,880
organization uses to store the secrets

00:31:39,360 --> 00:31:43,440
so this is the resolver that gets called

00:31:41,880 --> 00:31:46,350
whenever

00:31:43,440 --> 00:31:48,299
these Isolators realize that there is a

00:31:46,350 --> 00:31:50,250
secret in play they're going to talk to

00:31:48,299 --> 00:31:52,320
the resolver to resolve a secret so

00:31:50,250 --> 00:31:54,870
there's a secret name that you give the

00:31:52,320 --> 00:31:56,820
secret proto and the way to resolve that

00:31:54,870 --> 00:32:00,389
name to a value is done by the resolver

00:31:56,820 --> 00:32:04,340
and you could write modules for whatever

00:32:00,389 --> 00:32:08,159
backends you have for the secrets in DCs

00:32:04,340 --> 00:32:09,659
Enterprise we wrote a back-end we wrote

00:32:08,159 --> 00:32:12,779
a resolver to deal with the vault

00:32:09,659 --> 00:32:15,440
back-end but you could definitely write

00:32:12,779 --> 00:32:19,190
it for whatever other backends you have

00:32:15,440 --> 00:32:19,190
that's pretty much it

00:32:20,429 --> 00:32:25,350
just want to comment that in Apache

00:32:23,340 --> 00:32:27,629
mesas we have support for secrets not

00:32:25,350 --> 00:32:29,419
just to inject them into your container

00:32:27,629 --> 00:32:32,700
in a file or an environment but also

00:32:29,419 --> 00:32:35,820
image pull secrets so if you needed to

00:32:32,700 --> 00:32:38,460
pull a an image from a private docker

00:32:35,820 --> 00:32:40,799
registry you can configure your tasks

00:32:38,460 --> 00:32:43,049
with an image pull secret that would

00:32:40,799 --> 00:32:44,940
have the credentials to access that

00:32:43,049 --> 00:32:47,700
private registry and pull particular

00:32:44,940 --> 00:32:49,679
images and then that secret is not even

00:32:47,700 --> 00:32:51,029
injected anywhere into the container so

00:32:49,679 --> 00:32:54,240
the container doesn't have access to it

00:32:51,029 --> 00:32:58,139
but meso s-- is given that to retrieve

00:32:54,240 --> 00:33:00,860
the image I think in the future we're

00:32:58,139 --> 00:33:02,909
probably also going to leverage this to

00:33:00,860 --> 00:33:06,179
fetch you our eyes that are behind

00:33:02,909 --> 00:33:07,169
attenti cated endpoints occur as threes

00:33:06,179 --> 00:33:09,500
or HDFS

00:33:07,169 --> 00:33:12,179
right now we do not support any

00:33:09,500 --> 00:33:14,129
authentication for them or their needs

00:33:12,179 --> 00:33:16,679
with some hacks outside the Missis

00:33:14,129 --> 00:33:20,570
system to give them the credentials but

00:33:16,679 --> 00:33:23,460
ideally we would like to use the secrets

00:33:20,570 --> 00:33:28,919
primitives to basically get and fetch

00:33:23,460 --> 00:33:30,059
artifacts in remote locations and I just

00:33:28,919 --> 00:33:33,090
want to point out this is an example

00:33:30,059 --> 00:33:35,309
where you know as Mesa sphere we took

00:33:33,090 --> 00:33:37,710
advantage of modules to experiment with

00:33:35,309 --> 00:33:39,419
secrets functionality and play around

00:33:37,710 --> 00:33:41,250
with what would solve the problems for

00:33:39,419 --> 00:33:43,559
our customers and then once we come up

00:33:41,250 --> 00:33:45,899
with a good system we generalized it and

00:33:43,559 --> 00:33:46,919
pushed it back into Apache maysa to make

00:33:45,899 --> 00:33:48,720
it available to the rest of the

00:33:46,919 --> 00:33:50,909
community rather than us throwing hacks

00:33:48,720 --> 00:33:52,500
into Apache maysa and ripping it out and

00:33:50,909 --> 00:33:54,540
changing the api's over and over again

00:33:52,500 --> 00:33:56,250
we have room to experiment

00:33:54,540 --> 00:34:00,900
and then provide a stable API to the

00:33:56,250 --> 00:34:04,880
community so next we're going to be

00:34:00,900 --> 00:34:08,460
doing the lab so if you brought a laptop

00:34:04,880 --> 00:34:16,230
we're gonna ask you to go to the github

00:34:08,460 --> 00:34:20,280
repo it is DCOs - labs slash secure Mesa

00:34:16,230 --> 00:34:21,810
workshop and if you did not pull down

00:34:20,280 --> 00:34:23,370
the docker images at the beginning of

00:34:21,810 --> 00:34:27,590
the talk this is a good time to get

00:34:23,370 --> 00:34:27,590
started it could take you a little while

00:34:28,460 --> 00:34:32,220
Wi-Fi is pretty slow but hopefully most

00:34:30,810 --> 00:34:34,980
of you have already downloaded the

00:34:32,220 --> 00:34:43,800
images and you'll be able to get started

00:34:34,980 --> 00:34:45,900
really quickly so alright good most of

00:34:43,800 --> 00:34:47,730
you have downloaded the images so that

00:34:45,900 --> 00:34:52,710
means the Wi-Fi should be lightning-fast

00:34:47,730 --> 00:34:55,620
for the rest of you so just a general

00:34:52,710 --> 00:34:59,040
overview of what this exercise is we

00:34:55,620 --> 00:35:02,190
have docker images provided by Mesa

00:34:59,040 --> 00:35:07,650
sphere for Mesa master and Mesa agent

00:35:02,190 --> 00:35:12,870
we're using rc5 of the latest maysa 1.4

00:35:07,650 --> 00:35:13,980
so gonna be voted in any day now and so

00:35:12,870 --> 00:35:16,350
you get to play with the latest and

00:35:13,980 --> 00:35:18,300
greatest what we're gonna do is have you

00:35:16,350 --> 00:35:20,070
start a master and an agent and then

00:35:18,300 --> 00:35:23,070
we'll use the Mesa

00:35:20,070 --> 00:35:26,580
execute scheduler that comes along with

00:35:23,070 --> 00:35:29,520
maysa so you can we'll start out with a

00:35:26,580 --> 00:35:33,000
completely insecure default master and

00:35:29,520 --> 00:35:35,490
agent they connect no SSL TLS and no

00:35:33,000 --> 00:35:38,310
authentication or anything like that and

00:35:35,490 --> 00:35:40,350
you'll run the maysa execute command

00:35:38,310 --> 00:35:43,800
which registers a scheduler and launches

00:35:40,350 --> 00:35:46,080
a task and then exits and then there are

00:35:43,800 --> 00:35:48,780
different steps of the exercise where it

00:35:46,080 --> 00:35:50,130
will enable encryption on the master and

00:35:48,780 --> 00:35:52,770
then the agent and then the scheduler

00:35:50,130 --> 00:35:54,510
and then the executor will enable

00:35:52,770 --> 00:35:56,910
authentication between the agent and the

00:35:54,510 --> 00:36:00,500
master and authentication between the

00:35:56,910 --> 00:36:04,320
maysa execute scheduler and the master

00:36:00,500 --> 00:36:07,890
you can also add ACLs for authorization

00:36:04,320 --> 00:36:10,739
you can add HTTP authentication

00:36:07,890 --> 00:36:13,950
those are more or less as a bonus points

00:36:10,739 --> 00:36:16,259
exercise we where we have not given you

00:36:13,950 --> 00:36:19,769
the solution ahead of time in this repo

00:36:16,259 --> 00:36:23,519
there you'll find scripts one that is

00:36:19,769 --> 00:36:25,890
just the default insecure launch which

00:36:23,519 --> 00:36:28,950
starts a master and an agent and then an

00:36:25,890 --> 00:36:32,099
insecure run command that will run the

00:36:28,950 --> 00:36:34,829
Mesa execute I recommend you start with

00:36:32,099 --> 00:36:38,099
that either make a copy or edit it

00:36:34,829 --> 00:36:40,890
directly and follow along with the

00:36:38,099 --> 00:36:42,989
tutorial to add the flags and

00:36:40,890 --> 00:36:45,269
environment variables and you know play

00:36:42,989 --> 00:36:49,489
around with the mesas UI and the logs

00:36:45,269 --> 00:36:54,410
and the and everything you can to see

00:36:49,489 --> 00:36:54,410
how you're securing it piece by piece

00:36:55,400 --> 00:37:04,440
yeah and we also put in a secure cluster

00:37:02,519 --> 00:37:07,079
start and secure run command that have

00:37:04,440 --> 00:37:10,319
all of this is done already if you just

00:37:07,079 --> 00:37:13,019
want to run that and then cheat and look

00:37:10,319 --> 00:37:17,190
at all the flags I know not all of you

00:37:13,019 --> 00:37:19,259
are excited about well I hope that all

00:37:17,190 --> 00:37:21,180
of you are excited about walking through

00:37:19,259 --> 00:37:25,279
each of these exercises step-by-step

00:37:21,180 --> 00:37:28,619
if not you can cheat and go home early

00:37:25,279 --> 00:37:30,839
any questions we'll be running around

00:37:28,619 --> 00:37:34,859
helping you out just raise your hand and

00:37:30,839 --> 00:37:40,049
we'll come and answer all of your

00:37:34,859 --> 00:37:43,470
questions and yeah I guess we've got a

00:37:40,049 --> 00:37:46,799
lot of other talks and the events that

00:37:43,470 --> 00:37:50,999
we want to recommend all our friends and

00:37:46,799 --> 00:37:52,799
family here at Mesa is gone and the

00:37:50,999 --> 00:37:57,440
along with the slides there's also links

00:37:52,799 --> 00:38:00,089
to papers that are yeah references and

00:37:57,440 --> 00:38:02,329
you know we've got business cards we've

00:38:00,089 --> 00:38:04,739
got stickers at the mesosphere booth

00:38:02,329 --> 00:38:06,859
come talk to us ask us anything you need

00:38:04,739 --> 00:38:06,859

YouTube URL: https://www.youtube.com/watch?v=j8GIHfxjg18


