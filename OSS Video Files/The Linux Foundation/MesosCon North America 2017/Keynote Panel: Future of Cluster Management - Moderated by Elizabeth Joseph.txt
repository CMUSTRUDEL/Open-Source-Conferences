Title: Keynote Panel: Future of Cluster Management - Moderated by Elizabeth Joseph
Publication date: 2017-09-15
Playlist: MesosCon North America 2017
Description: 
	Keynote Panel: Future of Cluster Management - Moderated by Elizabeth Joseph, Open Source Developer Advocate, Mesosphere

We’ve assembled representatives from organizations operating some of the largest Mesos clusters we know to talk about where they think the future of cluster management is going. You’ll hear from:

Sharma Podila (Distributed Systems Software Architect at Netflix)

Sam Eaton (VP of Engineering, Operations, and Infrastructure at Yelp)

Ian Downes (Sr. Engineering Manager at Twitter)

Zhitao Li (Senior Software Engineer at Uber)

Moderated by Elizabeth Joseph (Open Source Developer Advocate at Mesosphere)

About Elizabeth K. Joseph
Elizabeth K. Joseph is a Developer Advocate at Mesosphere focused on DC/OS and Apache Mesos, and runs OpenSourceInfra.org. Previously, she worked for a decade as a Linux Systems Administrator, spending the past four years working at HPE on the OpenStack Infrastructure team. She is the author of Common OpenStack Deployments (2016) The Official Ubuntu Book, 8th (2014) and 9th (2016) editions.

About Zhitao Li
Zhitao Li is a senior software engineer at Uber Inc. In his two years career, he was both member of the team containerizing the service oriented architecture with Docker, and also among the initial effort of adopting Mesos to modernize the cluster management stack. Before Uber, Zhitao Li worked for Facebook and Google.

About Sharma Podila

Sharma Podila is a Senior Software Engineer in the Edge Engineering team at Netflix, Inc. His current work includes Fenzo, an open source generic scheduler with plugin based optimizations, developing cloud native Mesos frameworks, and evolving the microservices platform at Netflix.
Captions: 
	00:00:00,030 --> 00:00:06,720
all right good morning everyone welcome

00:00:02,959 --> 00:00:09,389
here so I wanted to jump right in here

00:00:06,720 --> 00:00:13,080
with some some introductions we can just

00:00:09,389 --> 00:00:15,719
sort of go down the line here but all of

00:00:13,080 --> 00:00:20,580
the companies represented up here we've

00:00:15,719 --> 00:00:22,350
got Twitter Yelp uber and Netflix all of

00:00:20,580 --> 00:00:25,289
you have people here at the conference

00:00:22,350 --> 00:00:27,180
giving talks and we know a lot about the

00:00:25,289 --> 00:00:29,460
clusters and the infrastructures that

00:00:27,180 --> 00:00:31,349
you guys are running so I want to ask

00:00:29,460 --> 00:00:33,630
personally as part of your introduction

00:00:31,349 --> 00:00:36,420
not necessarily what your companies are

00:00:33,630 --> 00:00:39,120
doing but what you personally in your

00:00:36,420 --> 00:00:40,739
career brings you up here on stage for a

00:00:39,120 --> 00:00:43,379
panel on the future of cluster

00:00:40,739 --> 00:00:46,739
management so can start with you hi

00:00:43,379 --> 00:00:48,180
everyone so my name's Ian think quote as

00:00:46,739 --> 00:00:49,530
unique familiar I start off with

00:00:48,180 --> 00:00:52,680
containerization very early on with

00:00:49,530 --> 00:00:55,800
jails on FreeBSD many many years ago

00:00:52,680 --> 00:00:58,289
before joining Twitter I joined the

00:00:55,800 --> 00:01:00,239
Maysles team as it was as it was just

00:00:58,289 --> 00:01:01,980
being developed and growing and so it

00:01:00,239 --> 00:01:04,470
was well underway but we saw mezzos

00:01:01,980 --> 00:01:05,880
develop to take much of of Twitter's

00:01:04,470 --> 00:01:08,040
workload and so I've seen that scale

00:01:05,880 --> 00:01:09,900
through probably almost an order of

00:01:08,040 --> 00:01:11,010
magnitude inside the company and now

00:01:09,900 --> 00:01:13,560
we're at the point where we're looking

00:01:11,010 --> 00:01:14,970
to bring sort of new workloads onto the

00:01:13,560 --> 00:01:18,509
platform as well so it's it's very

00:01:14,970 --> 00:01:20,790
exciting for me well Sammy Eaton and

00:01:18,509 --> 00:01:22,259
very loud apparently and what do I bring

00:01:20,790 --> 00:01:26,490
to the panel personally apart from

00:01:22,259 --> 00:01:28,560
British charm and I think I've spent the

00:01:26,490 --> 00:01:31,170
last 20 plus years working

00:01:28,560 --> 00:01:32,850
professionally in the area of operations

00:01:31,170 --> 00:01:33,810
and infrastructure back in the days when

00:01:32,850 --> 00:01:36,509
they used to call it systems

00:01:33,810 --> 00:01:38,909
administration and like Ian I've also

00:01:36,509 --> 00:01:40,740
worked with FreeBSD J on Solaris zones

00:01:38,909 --> 00:01:43,439
and seen kind of containerization

00:01:40,740 --> 00:01:44,820
improve over time and in our time at

00:01:43,439 --> 00:01:47,130
Yelp we've been working with me sauce

00:01:44,820 --> 00:01:48,570
for the last four years and at this

00:01:47,130 --> 00:01:49,740
point it runs all of our production

00:01:48,570 --> 00:01:51,600
infrastructure and all of our software

00:01:49,740 --> 00:01:53,399
building tests so we've seen it grow and

00:01:51,600 --> 00:01:57,000
change and seen the awkward rough edges

00:01:53,399 --> 00:01:59,579
it's been great hi my name is Jenna I

00:01:57,000 --> 00:02:01,560
work from uber so when I run over less

00:01:59,579 --> 00:02:03,810
than three years ago we started working

00:02:01,560 --> 00:02:06,060
on could bring container in doober

00:02:03,810 --> 00:02:08,190
without class meron it was a fun period

00:02:06,060 --> 00:02:11,160
but will quickly realize ok we cannot

00:02:08,190 --> 00:02:13,080
like a mess a mess keep going that's why

00:02:11,160 --> 00:02:13,650
we started introducing metals to over

00:02:13,080 --> 00:02:16,590
about

00:02:13,650 --> 00:02:18,269
a year and a half ago and it's a very

00:02:16,590 --> 00:02:20,640
big success we're having well have been

00:02:18,269 --> 00:02:23,579
quickly migrating on most of our

00:02:20,640 --> 00:02:25,110
production traffic onto metals and we

00:02:23,579 --> 00:02:28,620
are also learning a lot of things so

00:02:25,110 --> 00:02:30,689
maybe you can share something here hello

00:02:28,620 --> 00:02:33,959
my name is Sharma Padilla from Netflix

00:02:30,689 --> 00:02:37,590
I've been there about four years mostly

00:02:33,959 --> 00:02:39,120
focused on running or designing cloud

00:02:37,590 --> 00:02:41,609
native schedulers they've run on top of

00:02:39,120 --> 00:02:43,939
mesas for mixed workloads stream

00:02:41,609 --> 00:02:47,489
processing bad service kind of workloads

00:02:43,939 --> 00:02:49,879
before that I will spend quite a bit of

00:02:47,489 --> 00:02:53,099
time developing schedulers for HPC like

00:02:49,879 --> 00:02:55,440
batch workloads and a long time ago it

00:02:53,099 --> 00:02:58,739
used to be called compute farms nobody

00:02:55,440 --> 00:03:00,470
called it the cloud so yeah I've been

00:02:58,739 --> 00:03:04,950
doing cluster management for a while

00:03:00,470 --> 00:03:07,409
great thank you so for a next question I

00:03:04,950 --> 00:03:09,480
mean my own background is very open

00:03:07,409 --> 00:03:11,010
source strong so I've been working in

00:03:09,480 --> 00:03:13,230
open source communities for over 15

00:03:11,010 --> 00:03:14,819
years starting with Linux distributions

00:03:13,230 --> 00:03:17,549
and the most recently working on

00:03:14,819 --> 00:03:18,269
OpenStack and now mesas and I like to

00:03:17,549 --> 00:03:19,949
say one of the reasons I joined

00:03:18,269 --> 00:03:22,470
mesosphere was because I really believe

00:03:19,949 --> 00:03:25,680
in open infrastructures but I am

00:03:22,470 --> 00:03:27,569
incredibly biased so I wanted to ask all

00:03:25,680 --> 00:03:28,829
of you where do you see open source

00:03:27,569 --> 00:03:31,260
playing a role in this community that

00:03:28,829 --> 00:03:36,599
we've built in the industry today how

00:03:31,260 --> 00:03:38,790
important is it is it essential we can

00:03:36,599 --> 00:03:41,579
started coming sure

00:03:38,790 --> 00:03:42,810
well mine will be short when I think

00:03:41,579 --> 00:03:45,510
about open source when we think about

00:03:42,810 --> 00:03:47,879
open source at Netflix I like these the

00:03:45,510 --> 00:03:51,209
borrow the phrase we stand on the

00:03:47,879 --> 00:03:54,510
shoulders of giants reach the terminus

00:03:51,209 --> 00:03:56,639
value there and where we see value of us

00:03:54,510 --> 00:03:59,519
adding to it we contribute there's

00:03:56,639 --> 00:04:02,129
there's plenty of open source from

00:03:59,519 --> 00:04:03,780
Netflix on github and related to may

00:04:02,129 --> 00:04:05,519
sauce itself we open sourced our

00:04:03,780 --> 00:04:10,019
scheduling library called plans a couple

00:04:05,519 --> 00:04:11,819
of years ago so we love it so I mean I

00:04:10,019 --> 00:04:13,409
quoted my colleague say uber is pretty

00:04:11,819 --> 00:04:15,209
much build on top of open source from

00:04:13,409 --> 00:04:16,799
the very beginning we open source is

00:04:15,209 --> 00:04:18,479
pretty much in every bit of operation

00:04:16,799 --> 00:04:20,340
structure there's some sub keys all

00:04:18,479 --> 00:04:22,860
sorts of stars I think in class

00:04:20,340 --> 00:04:25,260
management one really great point of

00:04:22,860 --> 00:04:27,130
resources that we can use existing story

00:04:25,260 --> 00:04:29,290
there's early battle

00:04:27,130 --> 00:04:31,840
battle-tested we know that what we have

00:04:29,290 --> 00:04:33,640
you girl you're a crazy crazy paste

00:04:31,840 --> 00:04:35,710
that's we know that we are barely

00:04:33,640 --> 00:04:37,510
catching up with our own growth but when

00:04:35,710 --> 00:04:39,100
open source we got to say okay we know

00:04:37,510 --> 00:04:41,410
this you will scary the next cup of

00:04:39,100 --> 00:04:42,760
Beck's cup of quarters so at least it

00:04:41,410 --> 00:04:44,130
will give us a lot of breeze times we

00:04:42,760 --> 00:04:46,330
are focusing on other bad aspects of

00:04:44,130 --> 00:04:50,050
making it work in another part of our

00:04:46,330 --> 00:04:51,460
infrastructure and sorry I think it's

00:04:50,050 --> 00:04:54,040
pretty hard to Santos Age and kind of go

00:04:51,460 --> 00:04:56,590
no open source is a bad thing a hard

00:04:54,040 --> 00:04:58,300
argument to make you know like without

00:04:56,590 --> 00:04:59,470
it then I don't think any of our

00:04:58,300 --> 00:05:01,710
companies would exist or be as

00:04:59,470 --> 00:05:03,580
successful as they are I think the

00:05:01,710 --> 00:05:05,440
working on the kind of things we do

00:05:03,580 --> 00:05:08,170
contributing back to open source is a

00:05:05,440 --> 00:05:09,070
vital part of it and so I'm not going to

00:05:08,170 --> 00:05:12,430
stand on stage and say it's a bad thing

00:05:09,070 --> 00:05:12,880
so I can say that there are some

00:05:12,430 --> 00:05:15,280
trade-offs

00:05:12,880 --> 00:05:17,110
we'll open source but on the good side I

00:05:15,280 --> 00:05:19,060
think is their open source brings a lot

00:05:17,110 --> 00:05:20,830
of diversity in terms of everyone's

00:05:19,060 --> 00:05:22,150
perspectives what they're actually what

00:05:20,830 --> 00:05:25,420
the workloads are how they think about

00:05:22,150 --> 00:05:27,580
problems and also diversity and where

00:05:25,420 --> 00:05:29,710
they are in this stage of development so

00:05:27,580 --> 00:05:31,990
we for example started off a long time

00:05:29,710 --> 00:05:33,670
ago and we're seeing other companies now

00:05:31,990 --> 00:05:35,710
that are just starting I think seeing

00:05:33,670 --> 00:05:37,450
that level of just all the differences

00:05:35,710 --> 00:05:38,830
and the different perspectives really

00:05:37,450 --> 00:05:43,420
helps to great how much healthier

00:05:38,830 --> 00:05:45,280
community great so next I sort of wanted

00:05:43,420 --> 00:05:47,740
to talk broadly before diving into

00:05:45,280 --> 00:05:50,620
specific themes what are some of the

00:05:47,740 --> 00:05:54,100
current challenges that each of you

00:05:50,620 --> 00:05:55,570
faced while you're moving into you know

00:05:54,100 --> 00:05:58,060
these really large cluster management

00:05:55,570 --> 00:05:59,680
workflows and perhaps for others who are

00:05:58,060 --> 00:06:01,540
in the audience looking to do this is

00:05:59,680 --> 00:06:03,880
there anything that you did during this

00:06:01,540 --> 00:06:06,850
transition that was really hard to undo

00:06:03,880 --> 00:06:07,900
and you wish you really hadn't done so

00:06:06,850 --> 00:06:09,700
we can sort of just jump around whoever

00:06:07,900 --> 00:06:11,080
has an answer I think some of our

00:06:09,700 --> 00:06:13,270
challenges when we first started doing

00:06:11,080 --> 00:06:15,850
this is the back in the early days of it

00:06:13,270 --> 00:06:18,010
we started working with me sauce and

00:06:15,850 --> 00:06:20,320
containers more back before the 1.0

00:06:18,010 --> 00:06:22,210
release of docker and it was very flaky

00:06:20,320 --> 00:06:23,710
at that point you know like the promise

00:06:22,210 --> 00:06:25,930
was definitely there and it's way more

00:06:23,710 --> 00:06:27,370
stable these days but the early days of

00:06:25,930 --> 00:06:28,960
that were extremely painful and it was a

00:06:27,370 --> 00:06:30,190
lot of kind of like did we make the

00:06:28,960 --> 00:06:32,770
right choice here you know do we really

00:06:30,190 --> 00:06:33,640
want things to crash this often and you

00:06:32,770 --> 00:06:36,280
know there was a lot of persistence

00:06:33,640 --> 00:06:37,750
required in that and in terms of choices

00:06:36,280 --> 00:06:39,490
made early only the person I think it's

00:06:37,750 --> 00:06:40,590
kind of like it's the peril of early

00:06:39,490 --> 00:06:43,530
adoption with anything

00:06:40,590 --> 00:06:46,080
is that there are choices you make that

00:06:43,530 --> 00:06:47,610
later on the market matures new products

00:06:46,080 --> 00:06:49,530
appear people produce things that are

00:06:47,610 --> 00:06:51,690
kind of like have less rough edges and

00:06:49,530 --> 00:06:53,220
if you don't wait it then maybe you'd

00:06:51,690 --> 00:06:54,570
have had an easier time but you wouldn't

00:06:53,220 --> 00:06:56,010
been able to get there some things you

00:06:54,570 --> 00:06:57,690
don't done so I think it's like always

00:06:56,010 --> 00:07:00,210
that trade-off between adopting early

00:06:57,690 --> 00:07:01,740
and living with the pain and waiting for

00:07:00,210 --> 00:07:04,440
a more kind of a polished thing to

00:07:01,740 --> 00:07:06,390
appear we have much the same thing where

00:07:04,440 --> 00:07:08,640
for example we don't actually use file

00:07:06,390 --> 00:07:10,740
system images we did we we don't use doc

00:07:08,640 --> 00:07:12,360
images or anything because we were sort

00:07:10,740 --> 00:07:14,130
of when we built out our infrastructure

00:07:12,360 --> 00:07:17,190
we actually predated that there was no

00:07:14,130 --> 00:07:18,720
real formalized concept of packaging up

00:07:17,190 --> 00:07:20,880
all your dependencies and to enter an

00:07:18,720 --> 00:07:22,260
image we've recently tried to address

00:07:20,880 --> 00:07:24,510
that and so we do have a talk from

00:07:22,260 --> 00:07:26,250
Santosh today about our challenges for

00:07:24,510 --> 00:07:28,020
that but we still haven't actually

00:07:26,250 --> 00:07:29,580
adopted fastest images for our

00:07:28,020 --> 00:07:32,550
containers because it's it's very

00:07:29,580 --> 00:07:35,010
painful for us to go from current model

00:07:32,550 --> 00:07:35,790
where we run on the hosts file system so

00:07:35,010 --> 00:07:37,440
I'm wondering if there's if there's

00:07:35,790 --> 00:07:39,390
anything you would have waited on that

00:07:37,440 --> 00:07:41,490
you you'd open really early technology

00:07:39,390 --> 00:07:43,740
wise that you maybe wouldn't have well I

00:07:41,490 --> 00:07:45,480
don't think we could wait we had to move

00:07:43,740 --> 00:07:49,080
so fast and we had to build up the

00:07:45,480 --> 00:07:51,300
infrastructure yeah we just couldn't

00:07:49,080 --> 00:07:53,040
wait so we it it was possible because

00:07:51,300 --> 00:07:55,890
for example we run those things either

00:07:53,040 --> 00:07:57,510
on the JVM or Python so it wasn't so we

00:07:55,890 --> 00:08:00,600
actually made choices in the

00:07:57,510 --> 00:08:01,890
organization to say we can't quite solve

00:08:00,600 --> 00:08:03,690
this problem the way we want to so we'll

00:08:01,890 --> 00:08:08,970
choose this other way of building out

00:08:03,690 --> 00:08:12,570
our infrastructure yeah I mean besides

00:08:08,970 --> 00:08:14,160
the technology challenges first we had

00:08:12,570 --> 00:08:16,620
to spend a little bit of time trying to

00:08:14,160 --> 00:08:19,740
define what the business value is and

00:08:16,620 --> 00:08:22,020
maybe more so for us at Netflix because

00:08:19,740 --> 00:08:25,980
before we moved to containers we already

00:08:22,020 --> 00:08:28,920
had micro services running on top of ec2

00:08:25,980 --> 00:08:30,600
cloud using VMs there was a scheduled

00:08:28,920 --> 00:08:34,140
service scheduler with auto scaling and

00:08:30,600 --> 00:08:36,300
all of that we also had a good robust

00:08:34,140 --> 00:08:38,640
discovery mechanism and all of these

00:08:36,300 --> 00:08:40,050
things happening so so it was one of

00:08:38,640 --> 00:08:43,200
that and then there were specific

00:08:40,050 --> 00:08:45,510
challenges technology wise making sure

00:08:43,200 --> 00:08:49,410
there's capacity for the applications

00:08:45,510 --> 00:08:51,260
when they need to run and and trying to

00:08:49,410 --> 00:08:55,280
prove parity with water

00:08:51,260 --> 00:08:58,130
existing I think one of the challenges

00:08:55,280 --> 00:09:01,010
faces like remember that we move our non

00:08:58,130 --> 00:09:03,230
cluster orchestrated workload into cash

00:09:01,010 --> 00:09:04,970
management while we bring a lot of order

00:09:03,230 --> 00:09:06,620
and guarantees down to the quality we

00:09:04,970 --> 00:09:08,630
actually see utilization starting to

00:09:06,620 --> 00:09:11,420
drop because we weren't able to pack

00:09:08,630 --> 00:09:13,070
things as crazy and and pretend there is

00:09:11,420 --> 00:09:15,590
no quality problem allow it without

00:09:13,070 --> 00:09:18,440
little guys done so we're still working

00:09:15,590 --> 00:09:20,480
on try to bring the utilization just and

00:09:18,440 --> 00:09:23,810
curved back and we don't necessary to

00:09:20,480 --> 00:09:25,760
run as hard as past but it'll keep it

00:09:23,810 --> 00:09:30,440
get machine bore you ties and save the

00:09:25,760 --> 00:09:32,030
company a lot of money so getting to our

00:09:30,440 --> 00:09:32,990
first sort of future question what do

00:09:32,030 --> 00:09:35,330
you think our biggest challenge is

00:09:32,990 --> 00:09:37,700
moving forward just something quick and

00:09:35,330 --> 00:09:40,490
small like it just like your biggest pet

00:09:37,700 --> 00:09:42,290
peeve perhaps better isolation that's

00:09:40,490 --> 00:09:44,150
probably kind of like the killer for us

00:09:42,290 --> 00:09:46,190
a lot of the time at the moment is noisy

00:09:44,150 --> 00:09:48,740
neighbors tasks that don't cooperate or

00:09:46,190 --> 00:09:50,150
co-locate very well together and so yeah

00:09:48,740 --> 00:09:54,590
further advancements on that will

00:09:50,150 --> 00:09:57,530
definitely help us I think I would say

00:09:54,590 --> 00:09:59,750
predictability it touches upon some of

00:09:57,530 --> 00:10:01,310
the points there but predictability and

00:09:59,750 --> 00:10:06,440
the aggregator resources as well as

00:10:01,310 --> 00:10:07,490
don't on individual hosts alright so I

00:10:06,440 --> 00:10:09,740
sort of want to start getting into some

00:10:07,490 --> 00:10:13,100
themes here and the first one is around

00:10:09,740 --> 00:10:14,810
maintenance so I worked on OpenStack for

00:10:13,100 --> 00:10:16,340
four years and one of the really hard

00:10:14,810 --> 00:10:18,320
things about working on open stacks it's

00:10:16,340 --> 00:10:20,180
got a lot of missing pieces so when

00:10:18,320 --> 00:10:22,460
something goes wrong it's really hard to

00:10:20,180 --> 00:10:25,370
track it down so when I started working

00:10:22,460 --> 00:10:26,990
on May so that was the first thing I

00:10:25,370 --> 00:10:30,800
went to I was like how hard is it to

00:10:26,990 --> 00:10:31,820
debug problems because as a community

00:10:30,800 --> 00:10:34,970
we've done a really good job at the

00:10:31,820 --> 00:10:36,530
deployment story we can deploy meso sand

00:10:34,970 --> 00:10:38,450
we can get a system running but once

00:10:36,530 --> 00:10:41,660
it's running we need to be able to debug

00:10:38,450 --> 00:10:44,650
it and find problems and and fix

00:10:41,660 --> 00:10:50,050
everything so sort of broadly speaking

00:10:44,650 --> 00:10:52,010
in a space with deployment behind us

00:10:50,050 --> 00:10:53,630
what are you seeing yourselves doing

00:10:52,010 --> 00:10:55,250
outside of the cluster maintenance wise

00:10:53,630 --> 00:10:57,380
that you really wish were inside of the

00:10:55,250 --> 00:11:00,080
cluster and what have you are there

00:10:57,380 --> 00:11:01,360
tools you've built to manage things that

00:11:00,080 --> 00:11:03,710
you really wish were part of my Zoe's

00:11:01,360 --> 00:11:04,970
yeah so we have we have lots of also

00:11:03,710 --> 00:11:07,910
tolling outside of mezzo

00:11:04,970 --> 00:11:10,190
not only tolling itself but also a lot

00:11:07,910 --> 00:11:12,050
of tribal knowledge as well

00:11:10,190 --> 00:11:14,450
an engineer's and how to keep things

00:11:12,050 --> 00:11:16,640
running smoothly and there's a couple of

00:11:14,450 --> 00:11:18,890
things I think - there one is around the

00:11:16,640 --> 00:11:20,360
general health of the agent itself so

00:11:18,890 --> 00:11:22,160
it's it's offering an execution

00:11:20,360 --> 00:11:24,800
environment and some resources for the

00:11:22,160 --> 00:11:26,450
jobs to run in but those need to be

00:11:24,800 --> 00:11:28,430
validated when the machine comes up or

00:11:26,450 --> 00:11:30,230
when or when the VM comes up and they

00:11:28,430 --> 00:11:32,090
need to be maintained so maybe you lose

00:11:30,230 --> 00:11:33,740
a dome or something like that so that

00:11:32,090 --> 00:11:36,590
needs to be maintained a couple of

00:11:33,740 --> 00:11:37,970
things we generally do rolling updates

00:11:36,590 --> 00:11:40,400
across the cluster where we update

00:11:37,970 --> 00:11:43,460
mezzos that's all coordinated outside of

00:11:40,400 --> 00:11:45,230
mozart's you know we we we may deploy to

00:11:43,460 --> 00:11:47,660
1% and test out some new feature that

00:11:45,230 --> 00:11:49,910
we've got before we go sort of more

00:11:47,660 --> 00:11:51,740
broadly across the across the cluster

00:11:49,910 --> 00:11:54,890
that is this yeah we do have an awful

00:11:51,740 --> 00:11:56,330
lot of tolling outside and for us a lot

00:11:54,890 --> 00:11:58,190
of the the extra tongue we built

00:11:56,330 --> 00:12:01,400
revolves around scaling the clusters up

00:11:58,190 --> 00:12:03,920
and down so we elastically scale on AWS

00:12:01,400 --> 00:12:05,450
a lot and we use support fleet heavily

00:12:03,920 --> 00:12:06,410
and my colleague Kyle will be giving a

00:12:05,450 --> 00:12:08,480
talk about that later if you want to

00:12:06,410 --> 00:12:10,240
hear more about that but that's mean

00:12:08,480 --> 00:12:12,260
we've had build a lot of tooling around

00:12:10,240 --> 00:12:14,930
taking machines in and out of the

00:12:12,260 --> 00:12:16,310
cluster understanding the cluster size

00:12:14,930 --> 00:12:18,350
and dealing with when we want to scale

00:12:16,310 --> 00:12:21,380
it that would be much easier if the

00:12:18,350 --> 00:12:23,360
cluster managers were more aware of what

00:12:21,380 --> 00:12:24,800
workload the frameworks were demanding

00:12:23,360 --> 00:12:26,060
from it whether there was more work that

00:12:24,800 --> 00:12:28,460
you needed more capacity for and could

00:12:26,060 --> 00:12:32,300
do a better job of predicting its

00:12:28,460 --> 00:12:34,130
scaling demands so I thought the point

00:12:32,300 --> 00:12:35,960
like maintain the missile itself we have

00:12:34,130 --> 00:12:37,970
to create a lot do a lot of customer

00:12:35,960 --> 00:12:39,950
works on top that and besides that we

00:12:37,970 --> 00:12:42,260
also need we also want to help other

00:12:39,950 --> 00:12:44,210
info teams like routing teams monitoring

00:12:42,260 --> 00:12:46,790
related teams on how to manage their

00:12:44,210 --> 00:12:48,380
software and utilizing all the great

00:12:46,790 --> 00:12:50,420
primitives who provides the thing is

00:12:48,380 --> 00:12:52,670
because I think the relational same

00:12:50,420 --> 00:12:54,110
level there could be very straight to

00:12:52,670 --> 00:12:55,820
dependency relationship between things

00:12:54,110 --> 00:12:57,230
and if I'm not careful we could have

00:12:55,820 --> 00:12:58,940
simply run the nerd things as

00:12:57,230 --> 00:13:00,650
applications but you also don't want

00:12:58,940 --> 00:13:03,500
them to go to power battle completely

00:13:00,650 --> 00:13:05,690
run out run our own silos so I think we

00:13:03,500 --> 00:13:07,550
create quite a lot of quite some work

00:13:05,690 --> 00:13:08,390
for ourselves to help these teams the

00:13:07,550 --> 00:13:10,760
best special things

00:13:08,390 --> 00:13:15,589
I hope class magma can find a solution

00:13:10,760 --> 00:13:17,839
for a - well all good points I'll just

00:13:15,589 --> 00:13:18,470
add one more point that's specific to us

00:13:17,839 --> 00:13:21,700
which is

00:13:18,470 --> 00:13:25,070
we have integration into our cloud

00:13:21,700 --> 00:13:26,930
provider itself that is code that's

00:13:25,070 --> 00:13:30,980
specific on the agents and when we

00:13:26,930 --> 00:13:33,620
introduce new versions of those we do

00:13:30,980 --> 00:13:36,710
have some pain in because there's such a

00:13:33,620 --> 00:13:39,140
rate of change in that curve some way of

00:13:36,710 --> 00:13:40,630
introducing new agents that may actually

00:13:39,140 --> 00:13:44,300
be bad

00:13:40,630 --> 00:13:45,350
there's definitely pain in those all

00:13:44,300 --> 00:13:46,730
right so I'm gonna put you guys on the

00:13:45,350 --> 00:13:49,880
spot a little bit with this next one

00:13:46,730 --> 00:13:51,950
because it's very related you know what

00:13:49,880 --> 00:13:54,770
what things do you want to see built-in

00:13:51,950 --> 00:13:56,750
and can you perhaps play a role in that

00:13:54,770 --> 00:13:57,620
since you all have this external tooling

00:13:56,750 --> 00:14:02,540
maybe some things you want to

00:13:57,620 --> 00:14:03,980
open-source come on so I'm gonna say

00:14:02,540 --> 00:14:06,170
something not answer your question I

00:14:03,980 --> 00:14:07,730
think one of the one of the difficulties

00:14:06,170 --> 00:14:11,570
here is that we've all developed these

00:14:07,730 --> 00:14:13,550
things separately and because I think

00:14:11,570 --> 00:14:14,690
it's out of necessity we these are very

00:14:13,550 --> 00:14:16,820
pressing problems and so one of my

00:14:14,690 --> 00:14:19,190
concerns is that how do we come up with

00:14:16,820 --> 00:14:20,780
generic ways of solving these problems I

00:14:19,190 --> 00:14:23,300
think that's one of the challenges for

00:14:20,780 --> 00:14:24,440
us as we have one way that we think we

00:14:23,300 --> 00:14:27,140
can do this and this is back to my

00:14:24,440 --> 00:14:28,490
diversity point I think we need to

00:14:27,140 --> 00:14:29,870
increase communication around what

00:14:28,490 --> 00:14:31,370
people are doing which is what we're

00:14:29,870 --> 00:14:32,510
doing here but trying to find a way

00:14:31,370 --> 00:14:34,400
where we can come to some sort of

00:14:32,510 --> 00:14:37,790
consensus on what these common problems

00:14:34,400 --> 00:14:38,990
are what he said all right we just

00:14:37,790 --> 00:14:45,440
created another working group right here

00:14:38,990 --> 00:14:47,090
on Stan's alright thank you so I sort of

00:14:45,440 --> 00:14:49,010
want to transition for a moment away

00:14:47,090 --> 00:14:51,980
from like the underlying infrastructure

00:14:49,010 --> 00:14:53,690
and talk about a bit about workloads so

00:14:51,980 --> 00:14:55,730
the talk topic of mixed workloads comes

00:14:53,690 --> 00:14:56,900
up a lot you've got a lot of different

00:14:55,730 --> 00:14:58,610
types of things running in your

00:14:56,900 --> 00:15:01,250
infrastructures and how they play well

00:14:58,610 --> 00:15:02,960
together so if you whoever wants to

00:15:01,250 --> 00:15:04,940
chime in can talk a little bit about the

00:15:02,960 --> 00:15:07,790
types of workloads that you're using

00:15:04,940 --> 00:15:09,020
that are perhaps not really in a line

00:15:07,790 --> 00:15:12,710
with each other and how you're handling

00:15:09,020 --> 00:15:14,480
those workloads and then and then sort

00:15:12,710 --> 00:15:17,740
of what the state of the art is with

00:15:14,480 --> 00:15:22,330
regard to handling different types of

00:15:17,740 --> 00:15:25,100
services and workloads state of the art

00:15:22,330 --> 00:15:28,300
well I'll start with ideally where it

00:15:25,100 --> 00:15:30,650
could be people submit work load

00:15:28,300 --> 00:15:32,270
applications come in and maybe they have

00:15:30,650 --> 00:15:34,820
a declarative way of saying

00:15:32,270 --> 00:15:38,089
here's my service level objectives and

00:15:34,820 --> 00:15:40,070
assistance takes care of everything

00:15:38,089 --> 00:15:43,880
whether it's batch workload stream

00:15:40,070 --> 00:15:45,320
service workload and I would imagine in

00:15:43,880 --> 00:15:47,990
within mesas community a lot of people

00:15:45,320 --> 00:15:50,120
are using things like kotas roles

00:15:47,990 --> 00:15:54,230
reservations to achieve some of these

00:15:50,120 --> 00:15:55,910
and we saw limitations in their current

00:15:54,230 --> 00:15:59,240
form there's discussions and improving

00:15:55,910 --> 00:16:02,270
them I think some awesome future

00:15:59,240 --> 00:16:04,130
features would be coming up but then we

00:16:02,270 --> 00:16:05,600
introduce some of that in terms of

00:16:04,130 --> 00:16:07,850
capacity guarantee so when you mix

00:16:05,600 --> 00:16:10,100
workload each workload gets what it

00:16:07,850 --> 00:16:11,270
needs I think state of the art is

00:16:10,100 --> 00:16:14,570
somewhere around that one thing that's

00:16:11,270 --> 00:16:16,640
still missing for us is looking at noisy

00:16:14,570 --> 00:16:18,500
neighbor situations on the agents that

00:16:16,640 --> 00:16:20,930
we touched upon before and and feeding

00:16:18,500 --> 00:16:24,200
that back in so somewhere there is state

00:16:20,930 --> 00:16:26,480
of the art I think for us yeah I think

00:16:24,200 --> 00:16:28,190
the state of the art is there are a lot

00:16:26,480 --> 00:16:30,020
of useful functionality there's a lot of

00:16:28,190 --> 00:16:32,000
interesting work going on to make this

00:16:30,020 --> 00:16:33,529
stuff better but you know our dirty

00:16:32,000 --> 00:16:35,270
secret is at least for us the state of

00:16:33,529 --> 00:16:36,740
the art is statically separating our

00:16:35,270 --> 00:16:38,120
clusters to eliminate these kind of

00:16:36,740 --> 00:16:40,700
problems that's why we care a lot about

00:16:38,120 --> 00:16:42,829
isolation and and I suspect about a fair

00:16:40,700 --> 00:16:44,690
few people are doing the same yeah we do

00:16:42,829 --> 00:16:46,100
the same thing so we have a stateless

00:16:44,690 --> 00:16:49,100
workloads running on one cluster and

00:16:46,100 --> 00:16:50,810
then our sort of stateful workloads our

00:16:49,100 --> 00:16:52,970
storage base or a batch running in

00:16:50,810 --> 00:16:55,070
completely separate clusters but I do

00:16:52,970 --> 00:16:57,079
wanna add one thing for our even within

00:16:55,070 --> 00:16:58,430
our stateless workload we do have a

00:16:57,079 --> 00:17:00,560
concept of production versus non

00:16:58,430 --> 00:17:02,510
production and so we've tried to push

00:17:00,560 --> 00:17:04,309
the state of the art in terms of I was

00:17:02,510 --> 00:17:07,130
subscribing the non production workload

00:17:04,309 --> 00:17:09,260
lot these are lots of test jobs or jobs

00:17:07,130 --> 00:17:10,550
that are generally idle and we actually

00:17:09,260 --> 00:17:11,870
found that quite difficult and we ever

00:17:10,550 --> 00:17:14,449
talked about that later on as well but

00:17:11,870 --> 00:17:16,790
it's it's even something as simple as

00:17:14,449 --> 00:17:18,230
identifying idle workloads and I was

00:17:16,790 --> 00:17:20,360
subscribing those resources to run other

00:17:18,230 --> 00:17:22,730
workloads and doing that all the way

00:17:20,360 --> 00:17:26,750
from the agent up to the framework we

00:17:22,730 --> 00:17:29,210
found quite to be quite difficult so I

00:17:26,750 --> 00:17:30,320
think yeah try to their point like we

00:17:29,210 --> 00:17:32,000
are where we're running different

00:17:30,320 --> 00:17:33,410
workloads in same class but was so it

00:17:32,000 --> 00:17:35,480
pretty much that he partitions of these

00:17:33,410 --> 00:17:37,340
different agents and even this situation

00:17:35,480 --> 00:17:39,050
we see that sometimes the converting

00:17:37,340 --> 00:17:41,809
converting time of scheduling in special

00:17:39,050 --> 00:17:44,000
new workers convene becomes unbounded

00:17:41,809 --> 00:17:45,210
and we need to we need to we need to do

00:17:44,000 --> 00:17:47,309
special things and I think

00:17:45,210 --> 00:17:49,409
I feel like that we need more primitives

00:17:47,309 --> 00:17:51,809
on metals layer to help on these work or

00:17:49,409 --> 00:17:54,390
you need to find some other approach to

00:17:51,809 --> 00:17:58,070
address these yeah that's that's a great

00:17:54,390 --> 00:17:58,070
segue into my follow up question here is

00:17:58,190 --> 00:18:01,770
one of the really great things about

00:17:59,880 --> 00:18:04,020
micro services especially I've heard a

00:18:01,770 --> 00:18:05,909
lot of this about this week is that

00:18:04,020 --> 00:18:08,399
companies have been incrementally moving

00:18:05,909 --> 00:18:09,899
over to micro services and transitioning

00:18:08,399 --> 00:18:12,419
parts of their infrastructure and their

00:18:09,899 --> 00:18:13,860
workloads over to it over time but in a

00:18:12,419 --> 00:18:16,039
case like this with these mixed

00:18:13,860 --> 00:18:19,980
workloads and you're doing really hard

00:18:16,039 --> 00:18:22,080
isolation you know could we make these

00:18:19,980 --> 00:18:23,730
changes to improve the situation

00:18:22,080 --> 00:18:30,210
incremental II or does there need to be

00:18:23,730 --> 00:18:31,740
a bigger shift there so I think I think

00:18:30,210 --> 00:18:33,059
it's a combination of both I think there

00:18:31,740 --> 00:18:35,490
are incremental changes that we can make

00:18:33,059 --> 00:18:37,289
so we've identified different workloads

00:18:35,490 --> 00:18:40,230
inside Twitter that have varying degrees

00:18:37,289 --> 00:18:41,880
of requirements most of them actually

00:18:40,230 --> 00:18:43,380
have very substantial requirements

00:18:41,880 --> 00:18:45,750
before they could consider moving into

00:18:43,380 --> 00:18:47,039
and Moses managed platform and

00:18:45,750 --> 00:18:48,419
definitely very strong requirements

00:18:47,039 --> 00:18:49,860
before they could move into a shared

00:18:48,419 --> 00:18:52,049
platform where they were co-located with

00:18:49,860 --> 00:18:55,409
other tasks but there are some workloads

00:18:52,049 --> 00:18:57,299
where for example they need some control

00:18:55,409 --> 00:18:59,190
over over topology over the placement

00:18:57,299 --> 00:19:00,720
apology on the infrastructure which

00:18:59,190 --> 00:19:02,010
they've only got sort of small

00:19:00,720 --> 00:19:06,950
requirements that we could implement

00:19:02,010 --> 00:19:09,809
early do yeah I think incremental

00:19:06,950 --> 00:19:13,049
improvements are possible we have some

00:19:09,809 --> 00:19:15,029
basics in the system and I think we're

00:19:13,049 --> 00:19:18,210
missing it's a greenfield opportunity so

00:19:15,029 --> 00:19:19,919
it's easy to put incremental but I

00:19:18,210 --> 00:19:23,039
wanted to add that there are technology

00:19:19,919 --> 00:19:27,360
challenges but sharing a cluster is also

00:19:23,039 --> 00:19:29,159
have people side of things giving the

00:19:27,360 --> 00:19:30,480
people confidence that their

00:19:29,159 --> 00:19:32,220
applications are going to get the

00:19:30,480 --> 00:19:33,570
performance they need even if they're

00:19:32,220 --> 00:19:35,190
sharing the cluster with somebody else

00:19:33,570 --> 00:19:37,679
that's one of the harder problems on the

00:19:35,190 --> 00:19:40,350
people side of things to solve yeah I

00:19:37,679 --> 00:19:42,059
mean so you touched upon a little bit

00:19:40,350 --> 00:19:44,010
about specific changes that we can made

00:19:42,059 --> 00:19:46,320
do we have any other thoughts about how

00:19:44,010 --> 00:19:47,700
we can improve this isolation against

00:19:46,320 --> 00:19:49,409
noisy neighbors when I was working on

00:19:47,700 --> 00:19:53,159
OpenStack CI we were totally the nosed

00:19:49,409 --> 00:19:54,960
noisy neighbors so sorry so I think I

00:19:53,159 --> 00:19:56,820
think this two parts of question one is

00:19:54,960 --> 00:19:57,930
do we even need to run them on the same

00:19:56,820 --> 00:20:00,870
host

00:19:57,930 --> 00:20:02,250
and this is not did not just mixed

00:20:00,870 --> 00:20:05,190
workloads we do have noisy neighbors

00:20:02,250 --> 00:20:08,040
even within a sort of a stateless

00:20:05,190 --> 00:20:09,900
workload the best isolation is to just

00:20:08,040 --> 00:20:11,610
run them on separate hosts so if you

00:20:09,900 --> 00:20:13,650
could identify when there is contention

00:20:11,610 --> 00:20:16,200
so we have the paper from Google on CPI

00:20:13,650 --> 00:20:18,240
squared we're still not at that level

00:20:16,200 --> 00:20:20,100
where we can say these two jobs just

00:20:18,240 --> 00:20:22,920
contend for resources let's just run

00:20:20,100 --> 00:20:28,890
them on separate hosts and that's the

00:20:22,920 --> 00:20:30,809
easiest thing that we could do so that

00:20:28,890 --> 00:20:33,630
sort of gets us into our last theme of

00:20:30,809 --> 00:20:35,100
this panel right now it's a human

00:20:33,630 --> 00:20:37,170
decision about whether you want to split

00:20:35,100 --> 00:20:38,790
these up between you know this is this

00:20:37,170 --> 00:20:39,990
noisy host and that one you have to

00:20:38,790 --> 00:20:42,900
split them up based on what you know

00:20:39,990 --> 00:20:44,850
about the host but one of the things

00:20:42,900 --> 00:20:46,440
that we've seen these big clusters be

00:20:44,850 --> 00:20:47,880
used for a lot in the industry is sort

00:20:46,440 --> 00:20:49,890
of machine learning and artificial

00:20:47,880 --> 00:20:53,280
intelligence and that's focused on the

00:20:49,890 --> 00:20:55,350
workloads so do you see somewhere in our

00:20:53,280 --> 00:20:57,420
future where or maybe maybe some of the

00:20:55,350 --> 00:20:59,220
work we're doing in the present where we

00:20:57,420 --> 00:21:00,420
can use the same tooling or very similar

00:20:59,220 --> 00:21:02,130
tooling to what we're using on our

00:21:00,420 --> 00:21:05,010
workloads for this machine learning work

00:21:02,130 --> 00:21:07,860
and put that back on our on our clusters

00:21:05,010 --> 00:21:09,450
so maybe as you say if the cluster can

00:21:07,860 --> 00:21:11,610
determine who is a noisy neighbor and

00:21:09,450 --> 00:21:13,140
then automatically isolate those or

00:21:11,610 --> 00:21:14,190
maybe you have other examples or some of

00:21:13,140 --> 00:21:16,320
the work that you're currently doing

00:21:14,190 --> 00:21:24,450
that has you guys living in the future

00:21:16,320 --> 00:21:27,360
already well intelligence could mean so

00:21:24,450 --> 00:21:29,360
many things right and one of the things

00:21:27,360 --> 00:21:31,320
that we like to think about it is

00:21:29,360 --> 00:21:34,140
building upon what I said before

00:21:31,320 --> 00:21:35,970
user submit workload there's declarative

00:21:34,140 --> 00:21:40,110
objectives and the system figures are

00:21:35,970 --> 00:21:43,320
how to get it done without needing the

00:21:40,110 --> 00:21:45,090
cluster operator or the user to input

00:21:43,320 --> 00:21:48,150
anything else other than the objectives

00:21:45,090 --> 00:21:50,850
and better yet if people don't have to

00:21:48,150 --> 00:21:52,650
write their own schedulers that have

00:21:50,850 --> 00:21:54,740
smarts on how to get it done I mean the

00:21:52,650 --> 00:21:57,420
cluster manager should do it all

00:21:54,740 --> 00:22:01,170
intelligence is also in right sizing the

00:21:57,420 --> 00:22:03,390
containers users have a tough time

00:22:01,170 --> 00:22:06,630
predicting what resource usage they

00:22:03,390 --> 00:22:08,070
might actually see both in terms of the

00:22:06,630 --> 00:22:10,650
size of a container and the number of

00:22:08,070 --> 00:22:13,260
containers right and intelligence is

00:22:10,650 --> 00:22:15,480
also may be having some advanced users

00:22:13,260 --> 00:22:18,480
giving hints that's like yeah I knew two

00:22:15,480 --> 00:22:20,010
CPUs but this is how I plan to use those

00:22:18,480 --> 00:22:21,690
two CPUs and it's different from

00:22:20,010 --> 00:22:23,460
different applications so it's not this

00:22:21,690 --> 00:22:25,620
the resource specification of what I

00:22:23,460 --> 00:22:28,260
need but hints as to how I'm going to

00:22:25,620 --> 00:22:31,220
use it that would help intelligent

00:22:28,260 --> 00:22:33,840
placement of tasks and things like that

00:22:31,220 --> 00:22:36,000
one specific area of intelligence we're

00:22:33,840 --> 00:22:38,580
starting looking at is how to improve

00:22:36,000 --> 00:22:39,960
our capacity planning story wave cars

00:22:38,580 --> 00:22:42,450
management like that maybe sounds

00:22:39,960 --> 00:22:44,310
obvious for people but we are still we

00:22:42,450 --> 00:22:46,830
have you experiencing the fast going

00:22:44,310 --> 00:22:49,050
pace so it's the planning is pretty hard

00:22:46,830 --> 00:22:51,390
in this in this stage and there's a lot

00:22:49,050 --> 00:22:53,010
of it's more like human ad hoc decisions

00:22:51,390 --> 00:22:55,260
rather than somatic get a driven

00:22:53,010 --> 00:22:57,840
approach so I think I think there's a

00:22:55,260 --> 00:22:59,880
there's a lot of data extremely variable

00:22:57,840 --> 00:23:01,380
data across my layer already that can

00:22:59,880 --> 00:23:03,750
provide a lot of feedbacks and if we

00:23:01,380 --> 00:23:05,790
can't start to go market data-driven

00:23:03,750 --> 00:23:09,150
their approach whether they're rather

00:23:05,790 --> 00:23:10,530
than pouring themes and also I'll talk

00:23:09,150 --> 00:23:12,480
about two things one of them is the

00:23:10,530 --> 00:23:14,070
stuff we're already doing on our

00:23:12,480 --> 00:23:16,110
software build and test infrastructure

00:23:14,070 --> 00:23:18,270
called cycle where we're actually

00:23:16,110 --> 00:23:19,800
learning how long our tests take to

00:23:18,270 --> 00:23:21,570
execute historically and using that to

00:23:19,800 --> 00:23:23,550
pack them more efficiently into bundles

00:23:21,570 --> 00:23:25,410
that take a continent of time to run to

00:23:23,550 --> 00:23:27,090
reduce our overall test run times and I

00:23:25,410 --> 00:23:28,380
that's been very productive so that's

00:23:27,090 --> 00:23:30,990
very much building outside the cluster

00:23:28,380 --> 00:23:33,179
and to propose a more kind of wild idea

00:23:30,990 --> 00:23:35,880
we do a lot of stuff with Auto scamming

00:23:33,179 --> 00:23:38,280
on AWS at the moment and in the kind of

00:23:35,880 --> 00:23:40,590
glorious future having cluster scheduler

00:23:38,280 --> 00:23:42,929
that's aware of things like AWS Cod's

00:23:40,590 --> 00:23:44,310
costs and what the bid rates are for

00:23:42,929 --> 00:23:45,929
spot instances at the time and could

00:23:44,310 --> 00:23:47,250
kind of like scale the cluster in the

00:23:45,929 --> 00:23:48,690
most cost-effective way and run the

00:23:47,250 --> 00:23:50,760
right instances for the workloads

00:23:48,690 --> 00:23:52,890
according to pricing would be a kind of

00:23:50,760 --> 00:23:57,990
an exciting thing to be able to do how

00:23:52,890 --> 00:23:59,340
far away you think this is a while so

00:23:57,990 --> 00:24:00,929
I'm at a +1 on basically all of those

00:23:59,340 --> 00:24:02,730
things not so much the cloud because we

00:24:00,929 --> 00:24:04,590
run on BIM and so on our physical

00:24:02,730 --> 00:24:06,450
infrastructure the one thing with

00:24:04,590 --> 00:24:09,960
Twitter is we ran almost all of our

00:24:06,450 --> 00:24:12,000
workload on the JVM and so I'll give one

00:24:09,960 --> 00:24:14,130
last pitch we have that talk afternoon

00:24:12,000 --> 00:24:16,380
with Joshua and RAM key where we are

00:24:14,130 --> 00:24:18,060
working to automatically tune the

00:24:16,380 --> 00:24:21,390
applications running on the platform so

00:24:18,060 --> 00:24:24,120
to turn the JVM using blackbox learning

00:24:21,390 --> 00:24:26,130
we're and this is tuning for a whole

00:24:24,120 --> 00:24:27,419
range of parameters we're back to

00:24:26,130 --> 00:24:28,770
Tamara's point they they just don't

00:24:27,419 --> 00:24:30,330
listen they don't know how to tune the

00:24:28,770 --> 00:24:32,429
application necessarily and and they

00:24:30,330 --> 00:24:35,160
shouldn't know either and in particular

00:24:32,429 --> 00:24:36,690
for us we have a very different platform

00:24:35,160 --> 00:24:39,900
where we have different generations of

00:24:36,690 --> 00:24:43,350
CPUs to endemic configurations and so

00:24:39,900 --> 00:24:45,540
we're able to sort of work out the best

00:24:43,350 --> 00:24:47,550
configurations the best parameters for

00:24:45,540 --> 00:24:49,140
the JVM for our users as part of the

00:24:47,550 --> 00:24:50,370
platform I think is very powerful and

00:24:49,140 --> 00:24:54,840
that stuck there but where she doing

00:24:50,370 --> 00:24:57,360
right now that's really cool so sort of

00:24:54,840 --> 00:25:03,630
to sort of wrap this up and as sort of a

00:24:57,360 --> 00:25:04,919
final question here if you could I mean

00:25:03,630 --> 00:25:07,710
a lot of things you guys are mentioning

00:25:04,919 --> 00:25:09,960
are very I think I think they're more in

00:25:07,710 --> 00:25:13,080
the near future so if you could look

00:25:09,960 --> 00:25:14,520
down maybe five ten years like where

00:25:13,080 --> 00:25:18,060
what do you want your clusters be doing

00:25:14,520 --> 00:25:19,710
for you that they aren't doing today in

00:25:18,060 --> 00:25:21,390
10 years from now I'd like to not be

00:25:19,710 --> 00:25:23,940
thinking about clusters at all like I

00:25:21,390 --> 00:25:25,350
just like to run work and not have to

00:25:23,940 --> 00:25:26,580
consider kind of like where it's running

00:25:25,350 --> 00:25:28,470
or what it's running on here we just

00:25:26,580 --> 00:25:30,360
kind of go we want to run some stuff and

00:25:28,470 --> 00:25:33,600
we want to do it cost effectively make

00:25:30,360 --> 00:25:34,980
that problem go away yeah like we don't

00:25:33,600 --> 00:25:38,100
think about when you run something on

00:25:34,980 --> 00:25:40,500
your laptop about this needs a CPU why

00:25:38,100 --> 00:25:42,840
Ram or anything else we just say just

00:25:40,500 --> 00:25:44,340
run it and so I think for our sort

00:25:42,840 --> 00:25:48,179
services we want our customers to have

00:25:44,340 --> 00:25:52,340
to say run this this sort of scale with

00:25:48,179 --> 00:25:54,060
this availability and just go from there

00:25:52,340 --> 00:25:59,610
yeah I think so

00:25:54,060 --> 00:26:02,040
here's my card make it happen I mean we

00:25:59,610 --> 00:26:04,169
are still driving issues I feel like

00:26:02,040 --> 00:26:06,120
maybe dream that maybe after 10 years we

00:26:04,169 --> 00:26:07,440
don't even don't need to care where the

00:26:06,120 --> 00:26:09,179
workload is run it's going to write

00:26:07,440 --> 00:26:11,610
closes our customer at the most

00:26:09,179 --> 00:26:13,050
reasonable location with the least curve

00:26:11,610 --> 00:26:14,970
utilization and other things and our

00:26:13,050 --> 00:26:16,560
idea were to sleep and other things

00:26:14,970 --> 00:26:20,310
would happen magically to throw the

00:26:16,560 --> 00:26:21,900
Italian system all right if anyone has

00:26:20,310 --> 00:26:25,970
me parting thoughts before we wrap up

00:26:21,900 --> 00:26:29,360
just where you think the future is and

00:26:25,970 --> 00:26:32,159
I'll just share a quick thought I had

00:26:29,360 --> 00:26:34,210
earlier that we've come a long way so

00:26:32,159 --> 00:26:37,600
like several years ago

00:26:34,210 --> 00:26:40,210
to have resource-sharing happening in

00:26:37,600 --> 00:26:42,190
actually a meeting of people and the way

00:26:40,210 --> 00:26:43,540
I like to describe to others how this

00:26:42,190 --> 00:26:45,490
happens is everybody comes with a

00:26:43,540 --> 00:26:47,590
baseball bat and say this is my quota

00:26:45,490 --> 00:26:49,480
you're not gonna take it away from me I

00:26:47,590 --> 00:26:51,010
think we've come a long way since then

00:26:49,480 --> 00:26:52,810
there's a lot more automation and I

00:26:51,010 --> 00:26:57,170
think we only have forward progress to

00:26:52,810 --> 00:27:02,859
make all right thank you everybody

00:26:57,170 --> 00:27:02,859

YouTube URL: https://www.youtube.com/watch?v=ueKZG889Szo


