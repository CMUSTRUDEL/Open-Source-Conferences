Title: How Yelp.com Runs on Apache Mesos in AWS Spot Fleet for Fun and Profit
Publication date: 2017-09-18
Playlist: MesosCon North America 2017
Description: 
	How Yelp.com Runs on Apache Mesos in AWS Spot Fleet for Fun and Profit - Kyle Anderson, Yelp

AWS Spot Fleet is a mechanism to launch EC2 instances in AWS with deep discounts (~80%).
They come with a catch: instances can be recalled with a 120 second notice.

Can the business value of saving all that money be balance with the operational risk of running on such (theoretically) unstable infrastructure? At Yelp the answer to that question is "Yes!"

In this presentation Kyle Anderson from Yelp will explain the how Yelp.com runs on this infrastructure, including the special configuration tweaks needed for Mesos, Marathon, Chronos, maintenance primitives, and custom autoscalers, that are necessary to run keep the infrastructure reliable. (Spoiler alert: Mesos is the key)

About 

Kyle Anderson
Site Reliability Engineer, Yelp
Kyle Anderson is a Site Reliability Engineer working at Yelp. | | He helps build and run "PaaSTA", Yelp's open source platform-as-a-service built on Mesos, running on a hybrid infrastructure composed of AWS and bare metal servers.
Captions: 
	00:00:00,030 --> 00:00:03,780
my name is Kyle and I'm from the open

00:00:01,650 --> 00:00:06,299
I'm an SRE I'm here to share with you

00:00:03,780 --> 00:00:09,719
how Yelp runs our mesas clusters on

00:00:06,299 --> 00:00:11,370
Amazon spot fleet and we do save a lot

00:00:09,719 --> 00:00:13,110
of money by doing this but it comes with

00:00:11,370 --> 00:00:15,089
some certain risks and requires some

00:00:13,110 --> 00:00:16,080
certain engineering effort to make it

00:00:15,089 --> 00:00:17,850
work and that's what I'm going to be

00:00:16,080 --> 00:00:19,800
sharing with you before I get too much

00:00:17,850 --> 00:00:21,810
into this can I have a show of hands of

00:00:19,800 --> 00:00:24,150
those who are in the room who have heard

00:00:21,810 --> 00:00:26,279
and they know what spot or spot fleet is

00:00:24,150 --> 00:00:28,050
with the Amazon offerings Wow that's

00:00:26,279 --> 00:00:30,090
most of you okay that for the camera

00:00:28,050 --> 00:00:33,420
that almost everyone is it raising hand

00:00:30,090 --> 00:00:34,920
that's a good sign that everyone here is

00:00:33,420 --> 00:00:37,050
I won't have to define too many terms

00:00:34,920 --> 00:00:40,860
but I'll go ahead and go through the the

00:00:37,050 --> 00:00:42,989
the quick explanations regardless for

00:00:40,860 --> 00:00:44,430
those in the room in the room who do are

00:00:42,989 --> 00:00:46,170
who are interested in running their

00:00:44,430 --> 00:00:48,750
production workloads on spot fleet there

00:00:46,170 --> 00:00:50,520
should be some some gold you know gold

00:00:48,750 --> 00:00:52,530
mine this should be a gold mine of best

00:00:50,520 --> 00:00:55,230
practices I hope and of course

00:00:52,530 --> 00:00:57,449
afterwards I'm happy to share with more

00:00:55,230 --> 00:00:59,219
more details about what's going on

00:00:57,449 --> 00:01:00,930
behind the scenes with you if that can

00:00:59,219 --> 00:01:03,660
help you run your workloads on spot for

00:01:00,930 --> 00:01:06,420
you if you haven't heard of Yelp Yelp is

00:01:03,660 --> 00:01:08,610
a an app and a website to help connect

00:01:06,420 --> 00:01:09,840
people with great local businesses it

00:01:08,610 --> 00:01:11,490
can help you find maybe a good

00:01:09,840 --> 00:01:13,140
restaurant to eat after in races Khan or

00:01:11,490 --> 00:01:15,270
maybe help you get a quote from a

00:01:13,140 --> 00:01:18,270
plumber to help fix a leak something

00:01:15,270 --> 00:01:20,880
like that first I'm gonna go through

00:01:18,270 --> 00:01:23,759
what spot and spot is really fast and

00:01:20,880 --> 00:01:26,850
then I'm gonna describe how we manage

00:01:23,759 --> 00:01:28,409
spot fleet yet yo and then share some of

00:01:26,850 --> 00:01:30,479
the best practices we've learned over

00:01:28,409 --> 00:01:32,400
the years and then I'll show you the

00:01:30,479 --> 00:01:34,049
graphs about what why we'd go through

00:01:32,400 --> 00:01:37,610
all this this work how much money we

00:01:34,049 --> 00:01:39,570
actually save in real life spot fleet or

00:01:37,610 --> 00:01:41,460
definitions I'm not going to spend all

00:01:39,570 --> 00:01:42,899
the time defining all these terms that

00:01:41,460 --> 00:01:44,130
there's a certain class of person who

00:01:42,899 --> 00:01:46,020
really likes it when people defines

00:01:44,130 --> 00:01:47,820
exactly what they mean with stuff sorry

00:01:46,020 --> 00:01:50,009
I don't have time I'm glad that most

00:01:47,820 --> 00:01:51,899
people in the room do already know what

00:01:50,009 --> 00:01:53,280
spot wait is I'm not gonna go through

00:01:51,899 --> 00:01:55,049
all these things but it is important

00:01:53,280 --> 00:01:56,430
that when I talk about instance types

00:01:55,049 --> 00:01:58,740
you know that these are the certain two

00:01:56,430 --> 00:02:00,240
classes of VCT servers and when I talk

00:01:58,740 --> 00:02:02,280
about availability zones these are

00:02:00,240 --> 00:02:06,060
special like data center style

00:02:02,280 --> 00:02:07,860
separations of Amazon regions I'm gonna

00:02:06,060 --> 00:02:09,810
be referencing reserved instances this

00:02:07,860 --> 00:02:11,980
is where you pay Amazon in advance for a

00:02:09,810 --> 00:02:13,810
few years to have a server that is

00:02:11,980 --> 00:02:16,269
for you and I'm also going to be talking

00:02:13,810 --> 00:02:17,500
about the on-demand price this is the

00:02:16,269 --> 00:02:18,879
price that you would pay if you just

00:02:17,500 --> 00:02:20,140
went to the Amazon console right now

00:02:18,879 --> 00:02:22,030
open up a new account and just launch

00:02:20,140 --> 00:02:25,300
the server that's like the the list

00:02:22,030 --> 00:02:27,730
price of a class editor so let's do a

00:02:25,300 --> 00:02:28,720
quick demo of what spot instances are

00:02:27,730 --> 00:02:31,599
and how they work

00:02:28,720 --> 00:02:37,420
spot instances are servers that you can

00:02:31,599 --> 00:02:40,180
pay that you bid on and the the supply

00:02:37,420 --> 00:02:42,819
comes from all the extra servers that

00:02:40,180 --> 00:02:44,590
Amazon has that have been reserved but

00:02:42,819 --> 00:02:46,150
they're not in use so these are

00:02:44,590 --> 00:02:47,650
customers who have paid Amazon in

00:02:46,150 --> 00:02:49,150
advance for these servers for a couple

00:02:47,650 --> 00:02:50,890
years but they're not using that the

00:02:49,150 --> 00:02:53,019
second so Amazon is like to recoup some

00:02:50,890 --> 00:02:54,069
you know use it as they're just sitting

00:02:53,019 --> 00:02:55,360
there idle so they're willing to sell

00:02:54,069 --> 00:02:58,239
them but you can't have them up forever

00:02:55,360 --> 00:02:59,709
if Amazon once if the the customer who

00:02:58,239 --> 00:03:02,079
reserved them wants them back

00:02:59,709 --> 00:03:03,370
they get two minutes to get evicted from

00:03:02,079 --> 00:03:06,640
that server and it goes back to that

00:03:03,370 --> 00:03:08,430
original customer so the way that Amazon

00:03:06,640 --> 00:03:10,239
sells these is with a bidding process

00:03:08,430 --> 00:03:11,739
you can see on the left hand side

00:03:10,239 --> 00:03:13,030
there's bids from some theoretical

00:03:11,739 --> 00:03:15,069
customers who are interested in buying

00:03:13,030 --> 00:03:17,049
these spot instances and we have on the

00:03:15,069 --> 00:03:18,400
right hand side the supply this the

00:03:17,049 --> 00:03:21,160
servers that are actually available in

00:03:18,400 --> 00:03:24,130
this pool of resources the spot price is

00:03:21,160 --> 00:03:27,130
the cheapest the most inexpensive bid

00:03:24,130 --> 00:03:28,510
that gets fulfilled so in this case this

00:03:27,130 --> 00:03:30,970
the current spot price of this

00:03:28,510 --> 00:03:32,079
theoretical thing is three dollars let's

00:03:30,970 --> 00:03:33,519
go forward in time and let's say that

00:03:32,079 --> 00:03:35,700
somebody had shut down a reserved

00:03:33,519 --> 00:03:38,470
instance and now there's some new supply

00:03:35,700 --> 00:03:40,600
customers see who asked for two servers

00:03:38,470 --> 00:03:41,260
is now giving a third a second one got

00:03:40,600 --> 00:03:43,299
fulfilled

00:03:41,260 --> 00:03:44,560
let's go forward in time let's imagine

00:03:43,299 --> 00:03:46,630
that somebody had stopped another

00:03:44,560 --> 00:03:48,340
instance there's even more capacity now

00:03:46,630 --> 00:03:49,780
there's another spot that are who got

00:03:48,340 --> 00:03:51,760
fulfilled where they weren't being

00:03:49,780 --> 00:03:53,350
fulfilled before but the the price that

00:03:51,760 --> 00:03:55,239
everyone's pain has gone down now it's

00:03:53,350 --> 00:03:56,560
gone down to two dollars so even though

00:03:55,239 --> 00:03:58,930
everybody's bidding you know high

00:03:56,560 --> 00:04:00,489
amounts the price of that pay is the two

00:03:58,930 --> 00:04:04,239
dollars yes that's cool

00:04:00,489 --> 00:04:05,829
Oh everybody recalled their servers kind

00:04:04,239 --> 00:04:07,239
of all at once maybe a customer you know

00:04:05,829 --> 00:04:09,250
they got some more load and they

00:04:07,239 --> 00:04:11,709
increased the capacity in their

00:04:09,250 --> 00:04:13,930
autoscaler group these customers now get

00:04:11,709 --> 00:04:16,030
off bid and the only person who didn't

00:04:13,930 --> 00:04:17,380
get outbid was bidding the highest which

00:04:16,030 --> 00:04:20,019
is five dollars so the current spot

00:04:17,380 --> 00:04:21,669
price is five dollars and these other

00:04:20,019 --> 00:04:22,719
customers had to be evicted from their

00:04:21,669 --> 00:04:25,099
servers in two minutes

00:04:22,719 --> 00:04:28,129
this is the quick overview of what spot

00:04:25,099 --> 00:04:30,469
and scissors are and how they work the

00:04:28,129 --> 00:04:32,810
the price can go higher than the

00:04:30,469 --> 00:04:34,159
on-demand price there's no actual I

00:04:32,810 --> 00:04:36,620
think the hard-coded limit might be

00:04:34,159 --> 00:04:38,180
something astronomical but you can bid

00:04:36,620 --> 00:04:41,270
even higher than this and get you know

00:04:38,180 --> 00:04:46,400
to increase your the likelihood of you

00:04:41,270 --> 00:04:49,310
getting not outbid so that's the quick

00:04:46,400 --> 00:04:51,499
quick overview what spot is is our spot

00:04:49,310 --> 00:04:53,779
sweet spot fleet is an offering from

00:04:51,499 --> 00:04:56,840
Amazon that gives you a method to launch

00:04:53,779 --> 00:04:59,360
spot instances where spotting launches

00:04:56,840 --> 00:05:01,849
instances for you on on your behalf it

00:04:59,360 --> 00:05:04,279
can respond to outbid events by

00:05:01,849 --> 00:05:06,379
launching alternative instances and

00:05:04,279 --> 00:05:08,479
other Izzie's to keep your overall

00:05:06,379 --> 00:05:10,490
capacity up so this is somebody just

00:05:08,479 --> 00:05:12,199
buying new spot instances so when you

00:05:10,490 --> 00:05:12,800
get outbid it'll launch a different one

00:05:12,199 --> 00:05:14,539
in this place

00:05:12,800 --> 00:05:16,430
so let's look how quickly we quickly

00:05:14,539 --> 00:05:19,189
look how that goes so let's say that you

00:05:16,430 --> 00:05:21,439
were outbid on Pico like a 4 XL Amazon

00:05:19,189 --> 00:05:22,699
spot fleet might launch to to excels in

00:05:21,439 --> 00:05:24,379
its place because they're kind of

00:05:22,699 --> 00:05:27,050
equivalent you kind of let Amazon know

00:05:24,379 --> 00:05:29,060
that it's close enough let's say that

00:05:27,050 --> 00:05:30,800
you got outbid on all the one xl's

00:05:29,060 --> 00:05:32,120
across all the zones maybe somebody just

00:05:30,800 --> 00:05:33,409
went on a shopping spree and she's

00:05:32,120 --> 00:05:35,960
wanted all the one xl's and you got

00:05:33,409 --> 00:05:38,000
outbid Amazon spot feet might launch two

00:05:35,960 --> 00:05:38,599
to xl's in an alternate soon if they

00:05:38,000 --> 00:05:43,310
were available

00:05:38,599 --> 00:05:45,110
so that's Amazon spot fleet spot fleet

00:05:43,310 --> 00:05:46,969
is that control system that Amazon

00:05:45,110 --> 00:05:49,099
provides to give you a bunch of spot

00:05:46,969 --> 00:05:50,899
instances and it tries to maintain a

00:05:49,099 --> 00:05:53,270
certain amount of capacity this is

00:05:50,899 --> 00:05:55,569
really important for ranching production

00:05:53,270 --> 00:05:58,009
workloads like yelps you know website

00:05:55,569 --> 00:05:59,659
because we need capacity around the

00:05:58,009 --> 00:06:02,060
website it's not like a batch workload

00:05:59,659 --> 00:06:03,860
where if we got outbid it's okay it'll

00:06:02,060 --> 00:06:06,770
finish eventually the website doesn't

00:06:03,860 --> 00:06:10,159
the website can't stop so we really need

00:06:06,770 --> 00:06:11,899
this it's important that users are able

00:06:10,159 --> 00:06:14,330
to describe exactly what kind of

00:06:11,899 --> 00:06:15,319
instances are they are suitable to run

00:06:14,330 --> 00:06:17,330
their workloads and I'll show you

00:06:15,319 --> 00:06:19,399
examples of how we do that at Yelp but

00:06:17,330 --> 00:06:21,740
it comes down into a big declaration of

00:06:19,399 --> 00:06:23,719
I'm except I can do you know see for for

00:06:21,740 --> 00:06:25,810
excels and 10x tiles and you describe

00:06:23,719 --> 00:06:30,709
all of these different instance types

00:06:25,810 --> 00:06:32,839
the spot fleet service is what's doing

00:06:30,709 --> 00:06:34,459
date launching it for you this is really

00:06:32,839 --> 00:06:35,889
important you don't have to be at your

00:06:34,459 --> 00:06:38,050
laptop launch a new thing

00:06:35,889 --> 00:06:39,909
doing things when things got outbid spot

00:06:38,050 --> 00:06:43,449
please doing this for you so that's

00:06:39,909 --> 00:06:46,120
their value offering now let's move it

00:06:43,449 --> 00:06:48,550
to how we manage spot fleets let's take

00:06:46,120 --> 00:06:49,659
a quick look at the web interface for

00:06:48,550 --> 00:06:50,919
managing the spot fleets if you go to

00:06:49,659 --> 00:06:52,060
Amazon's website right now and you're

00:06:50,919 --> 00:06:55,749
gonna console and you go to launch a

00:06:52,060 --> 00:06:56,889
spot fee it looks like this I don't I

00:06:55,749 --> 00:06:58,210
hope I don't have to sell every one of

00:06:56,889 --> 00:07:00,610
the room that infrastructure is called

00:06:58,210 --> 00:07:02,439
code is the the way of the future and

00:07:00,610 --> 00:07:04,449
that launch and a spot free in this

00:07:02,439 --> 00:07:06,849
manner although convenient and easy to

00:07:04,449 --> 00:07:08,529
get started isn't really a long-term

00:07:06,849 --> 00:07:10,300
solution for running a website on if

00:07:08,529 --> 00:07:11,650
you're gonna make changes you're gonna

00:07:10,300 --> 00:07:14,110
launch another spot fleet you're gonna

00:07:11,650 --> 00:07:15,849
launch a new a new location you need to

00:07:14,110 --> 00:07:18,639
be reproducible and you don't want to

00:07:15,849 --> 00:07:20,370
have to write a big long how to document

00:07:18,639 --> 00:07:23,349
about what buttons you clicked on this

00:07:20,370 --> 00:07:26,319
we do any better you could certainly use

00:07:23,349 --> 00:07:28,330
the CLI here is all of the text from the

00:07:26,319 --> 00:07:30,969
an example spotlight request from the

00:07:28,330 --> 00:07:33,639
CLI this is if you look in the docs the

00:07:30,969 --> 00:07:35,919
recommended way to launch a spotlight

00:07:33,639 --> 00:07:37,270
request and via this UI and I'll tell

00:07:35,919 --> 00:07:40,000
you right now that I personally promise

00:07:37,270 --> 00:07:41,800
not unacceptable I think this is a it's

00:07:40,000 --> 00:07:43,300
too easy I think there's you read the

00:07:41,800 --> 00:07:46,210
docs and it says oh you should do XYZ

00:07:43,300 --> 00:07:47,500
but I'd like to for those in the

00:07:46,210 --> 00:07:49,659
audience too trying to expand your mind

00:07:47,500 --> 00:07:51,189
a little bit and think yourself is this

00:07:49,659 --> 00:07:52,659
really the best way to be doing this

00:07:51,189 --> 00:07:55,180
maybe they only have this in the

00:07:52,659 --> 00:07:56,680
documentation because you know they only

00:07:55,180 --> 00:07:58,689
went this far they don't expect you to

00:07:56,680 --> 00:08:00,520
do this a lot or something yeah

00:07:58,689 --> 00:08:02,020
something like that but in practice if

00:08:00,520 --> 00:08:04,240
you're gonna be running a website on

00:08:02,020 --> 00:08:05,649
something I don't want I don't want

00:08:04,240 --> 00:08:06,909
developers have to worry about this or

00:08:05,649 --> 00:08:10,719
operations and yours have to worry about

00:08:06,909 --> 00:08:11,949
this could you even better oh well let

00:08:10,719 --> 00:08:13,330
me explain a little bit why I think

00:08:11,949 --> 00:08:15,460
specifically this is not a good idea

00:08:13,330 --> 00:08:16,599
let's take a snapshot off this JSON I'm

00:08:15,460 --> 00:08:18,460
just kind of like look at it really

00:08:16,599 --> 00:08:21,580
closely don't worry about the actual

00:08:18,460 --> 00:08:22,810
contents but like all of these numbers

00:08:21,580 --> 00:08:25,029
we're are they coming from

00:08:22,810 --> 00:08:27,129
with magic numbers magic numbers pink

00:08:25,029 --> 00:08:29,229
pairs group IDs security group IDs

00:08:27,129 --> 00:08:30,819
where's the subnet IDs I had to look

00:08:29,229 --> 00:08:32,800
that up maybe they copy/paste it there's

00:08:30,819 --> 00:08:35,469
no the duplicate number I don't want any

00:08:32,800 --> 00:08:37,810
of these oh and the biggest problem with

00:08:35,469 --> 00:08:41,079
this is that this JSON file it's very

00:08:37,810 --> 00:08:43,000
cumbersome to write if that you'll see

00:08:41,079 --> 00:08:45,339
later the key to making reliable

00:08:43,000 --> 00:08:47,949
productions Buffy requests is diversity

00:08:45,339 --> 00:08:49,330
but to do diversity with this with the

00:08:47,949 --> 00:08:51,700
style means you have to

00:08:49,330 --> 00:08:52,960
make this JSON really really big that's

00:08:51,700 --> 00:08:55,330
really hard so if you're making these

00:08:52,960 --> 00:08:57,190
things by hand this style is really it's

00:08:55,330 --> 00:08:59,140
forcing developers do the wrong thing

00:08:57,190 --> 00:09:02,490
it's not making it easy for them to the

00:08:59,140 --> 00:09:06,190
right thing so can we do even better

00:09:02,490 --> 00:09:08,470
well I don't at Yelp we use terraform I

00:09:06,190 --> 00:09:11,500
no longer am a kind of a I used to be

00:09:08,470 --> 00:09:13,330
kind of a terraform kind of fanboy maybe

00:09:11,500 --> 00:09:15,700
but I no longer do this I really think

00:09:13,330 --> 00:09:17,740
that this there's there's room for lots

00:09:15,700 --> 00:09:19,240
of tools I'll just say this there's a

00:09:17,740 --> 00:09:21,160
certain class of person who when they

00:09:19,240 --> 00:09:23,050
may see terraform they look at how it

00:09:21,160 --> 00:09:24,940
works they think it's the best thing

00:09:23,050 --> 00:09:26,620
since sliced bread and I was definitely

00:09:24,940 --> 00:09:27,670
in this category there are some people

00:09:26,620 --> 00:09:29,410
who look at terraforming they're like

00:09:27,670 --> 00:09:32,500
wow this is scary I'd rather just use

00:09:29,410 --> 00:09:34,240
the COI I think that's cool too so my

00:09:32,500 --> 00:09:36,190
new thing is I say to everybody why

00:09:34,240 --> 00:09:37,240
don't you look at terraform and see just

00:09:36,190 --> 00:09:38,890
in case you're in that first class

00:09:37,240 --> 00:09:41,530
because if you're in the first class you

00:09:38,890 --> 00:09:43,060
you're it's seriously your mind won't be

00:09:41,530 --> 00:09:44,440
blowing you be like wow this is really

00:09:43,060 --> 00:09:46,660
the best way to do it if you're not

00:09:44,440 --> 00:09:50,290
let's go but I'm gonna show you how Yelp

00:09:46,660 --> 00:09:53,050
does it just because I'm on stage yo

00:09:50,290 --> 00:09:55,060
we've built this module in terraform to

00:09:53,050 --> 00:09:57,130
help reduce the complexity of launching

00:09:55,060 --> 00:09:58,360
spotlight requests again the reason we

00:09:57,130 --> 00:09:59,860
do this is because we're running our

00:09:58,360 --> 00:10:01,750
website on it we want to make it really

00:09:59,860 --> 00:10:03,250
easy to the right thing we want to be

00:10:01,750 --> 00:10:05,410
able to reproduce it in multiple regions

00:10:03,250 --> 00:10:06,600
we want to be able to iterate on it and

00:10:05,410 --> 00:10:09,130
make it better over time

00:10:06,600 --> 00:10:12,850
spot-free has a lot of rough edges it's

00:10:09,130 --> 00:10:14,140
I'm not I don't feel embarrassed or

00:10:12,850 --> 00:10:16,030
anything to say that's that the

00:10:14,140 --> 00:10:17,950
spot-free api is is probably one of the

00:10:16,030 --> 00:10:19,330
most cumbersome api's from amazon that

00:10:17,950 --> 00:10:21,730
if it worked with its it's very

00:10:19,330 --> 00:10:25,420
difficult to work with so I don't want

00:10:21,730 --> 00:10:27,190
to necessarily hide them from from our

00:10:25,420 --> 00:10:29,710
operations nearest but I do want to make

00:10:27,190 --> 00:10:30,940
them as easy to work with as possible so

00:10:29,710 --> 00:10:33,730
that's why we use terraform and that's

00:10:30,940 --> 00:10:36,250
why we use this provider no magic

00:10:33,730 --> 00:10:38,800
numbers the inputs have been reduced to

00:10:36,250 --> 00:10:40,390
only what you care about and I'll show

00:10:38,800 --> 00:10:42,720
you we have a chase on file that we can

00:10:40,390 --> 00:10:46,180
reuse instead of copy paste in a lot

00:10:42,720 --> 00:10:48,040
here is how Yelp describes our spot rate

00:10:46,180 --> 00:10:49,870
request instance types you'll notice

00:10:48,040 --> 00:10:53,950
that here there's nothing about nothing

00:10:49,870 --> 00:10:55,750
about secure groups BPC IDs or anything

00:10:53,950 --> 00:10:59,620
like that it's only about the instance

00:10:55,750 --> 00:11:01,970
types we've separated this part from all

00:10:59,620 --> 00:11:03,349
of the parts that are region specific

00:11:01,970 --> 00:11:05,119
what runtime environment they are you

00:11:03,349 --> 00:11:06,829
dev and your prod are you and what with

00:11:05,119 --> 00:11:09,349
what account number are you working with

00:11:06,829 --> 00:11:10,699
so by separating them we can iterate on

00:11:09,349 --> 00:11:13,279
just the part that we're interested in

00:11:10,699 --> 00:11:14,539
about what kind of compute we need and

00:11:13,279 --> 00:11:16,729
what how much we're willing to pay for

00:11:14,539 --> 00:11:18,879
it and then we just seem like this file

00:11:16,729 --> 00:11:21,019
it's that simple

00:11:18,879 --> 00:11:23,269
so so there's some good stuff in here

00:11:21,019 --> 00:11:25,069
it's really easy to add to this file and

00:11:23,269 --> 00:11:26,720
of course that's making it again that's

00:11:25,069 --> 00:11:28,159
making it easy for our operations

00:11:26,720 --> 00:11:30,169
engineers to do the right thing which is

00:11:28,159 --> 00:11:32,529
to increase the diversity which makes

00:11:30,169 --> 00:11:34,999
our spot fleets more reliable and

00:11:32,529 --> 00:11:37,220
through the magic of terraform if you

00:11:34,999 --> 00:11:38,569
make a change terraform keeps it in sync

00:11:37,220 --> 00:11:40,579
that's the big selling point behind

00:11:38,569 --> 00:11:41,959
terraform as it keeps you declared it

00:11:40,579 --> 00:11:43,309
like declaratively right your

00:11:41,959 --> 00:11:44,889
infrastructure and terraform makes it

00:11:43,309 --> 00:11:47,779
happen

00:11:44,889 --> 00:11:49,759
reduced duplicated data all sorts of

00:11:47,779 --> 00:11:52,179
good things about have an infrastructure

00:11:49,759 --> 00:11:55,429
as code and using terraform in this way

00:11:52,179 --> 00:11:57,019
now why did I take five minutes to

00:11:55,429 --> 00:11:58,429
explain why we use terraform for

00:11:57,019 --> 00:11:59,599
launching spot requests you could do

00:11:58,429 --> 00:12:02,119
everything without terraform everything

00:11:59,599 --> 00:12:03,769
would be fine the reason is you're going

00:12:02,119 --> 00:12:05,359
to get it wrong and Yelp we've got it

00:12:03,769 --> 00:12:07,459
wrong many many many times we have to

00:12:05,359 --> 00:12:09,139
iterate so we need to be getting we need

00:12:07,459 --> 00:12:12,079
to get really good at recreating this

00:12:09,139 --> 00:12:13,339
Buffett request because you bids things

00:12:12,079 --> 00:12:14,299
are gonna change and you're gonna change

00:12:13,339 --> 00:12:15,439
your policy and how much you're willing

00:12:14,299 --> 00:12:17,029
to pay for things you're gonna change

00:12:15,439 --> 00:12:18,619
out a new instance type you're gonna add

00:12:17,029 --> 00:12:20,839
a new a Z your going to launch a new

00:12:18,619 --> 00:12:21,769
mesas cluster you're gonna upgrade your

00:12:20,839 --> 00:12:23,299
makes this class service you have lots

00:12:21,769 --> 00:12:25,099
of lots of things so you want to get

00:12:23,299 --> 00:12:26,779
really good at and you do not want

00:12:25,099 --> 00:12:27,979
recreating this Buffett request to be

00:12:26,779 --> 00:12:29,899
something that you're afraid of doing

00:12:27,979 --> 00:12:30,979
you do not want recreating a spot that

00:12:29,899 --> 00:12:32,689
requests to be something that you're

00:12:30,979 --> 00:12:34,429
afraid that it's going to take down the

00:12:32,689 --> 00:12:35,599
hall in your infrastructure you need

00:12:34,429 --> 00:12:38,449
confidence that you're gonna be able to

00:12:35,599 --> 00:12:39,739
do this and do this well so that's why I

00:12:38,449 --> 00:12:41,329
spent all this time explaining why we

00:12:39,739 --> 00:12:42,649
use terraform it's because it gives us

00:12:41,329 --> 00:12:45,199
the confidence to be able to recruit

00:12:42,649 --> 00:12:49,429
reproduce these Buffett requests and not

00:12:45,199 --> 00:12:50,869
be afraid to to adjust them let's take a

00:12:49,429 --> 00:12:54,499
look at this what this looks like here

00:12:50,869 --> 00:12:56,539
is a spot request before the big hump

00:12:54,499 --> 00:12:58,519
and then this is somebody running

00:12:56,539 --> 00:13:00,919
terraform apply launching a new spot

00:12:58,519 --> 00:13:03,349
request it comes up and the other ones

00:13:00,919 --> 00:13:05,089
scales down and then afterwards it's

00:13:03,349 --> 00:13:06,470
been recreated you can see a slightly

00:13:05,089 --> 00:13:08,329
more diverse which is good this is an

00:13:06,470 --> 00:13:10,939
engineer improving our spotlight

00:13:08,329 --> 00:13:11,800
requests without downtime which is a big

00:13:10,939 --> 00:13:13,449
deal

00:13:11,800 --> 00:13:15,129
and this is an at yoke this is really

00:13:13,449 --> 00:13:19,149
easy to do thanks to the the tooling we

00:13:15,129 --> 00:13:21,610
built with terraforming let's talk about

00:13:19,149 --> 00:13:23,970
best practices next what if we're gonna

00:13:21,610 --> 00:13:27,040
build spa for us how should we build it

00:13:23,970 --> 00:13:29,379
targeting production infrastructure

00:13:27,040 --> 00:13:31,149
yup calm things that need to be up all

00:13:29,379 --> 00:13:33,339
the time not batch workloads whereas

00:13:31,149 --> 00:13:36,759
buffy is traditionally or at least

00:13:33,339 --> 00:13:38,170
designed to be used for the number one

00:13:36,759 --> 00:13:39,670
thing you can do to make a production

00:13:38,170 --> 00:13:41,249
ready spotlight request and runni

00:13:39,670 --> 00:13:43,540
enforcer katana is diversification

00:13:41,249 --> 00:13:46,029
remember when you get outbid on this

00:13:43,540 --> 00:13:48,369
particular instance type the spa fleet

00:13:46,029 --> 00:13:51,009
mechanism launches different instances

00:13:48,369 --> 00:13:54,519
in a different location by diversifying

00:13:51,009 --> 00:13:55,989
you're expanding the number of possible

00:13:54,519 --> 00:14:00,009
things that's populate we could do on

00:13:55,989 --> 00:14:01,629
your behalf and you're reducing the the

00:14:00,009 --> 00:14:03,790
blast radius of when you get outbid

00:14:01,629 --> 00:14:06,309
imagine if you launch tas popular quest

00:14:03,790 --> 00:14:08,769
and you said i can run in to a ZZZ on c4

00:14:06,309 --> 00:14:11,529
at four excels that would only be in two

00:14:08,769 --> 00:14:13,449
spot meat markets if you get outbid

00:14:11,529 --> 00:14:15,519
which you will you're going to lose 50%

00:14:13,449 --> 00:14:18,459
of your cluster that's that's no good

00:14:15,519 --> 00:14:21,429
so diversification helps to reduce that

00:14:18,459 --> 00:14:24,399
that blast radius it's just like getting

00:14:21,429 --> 00:14:25,899
a a mutual fund or something that's a

00:14:24,399 --> 00:14:29,230
diversified investment that kind of

00:14:25,899 --> 00:14:31,480
thing you might think that this is as

00:14:29,230 --> 00:14:33,579
easy as picking the diversified strategy

00:14:31,480 --> 00:14:36,699
over the lowest price strategy in the

00:14:33,579 --> 00:14:38,319
spot plate request API that's certainly

00:14:36,699 --> 00:14:40,059
part of it you absolutely should pick

00:14:38,319 --> 00:14:42,999
the diversified strategy but you need to

00:14:40,059 --> 00:14:44,829
do more you need to expand the types of

00:14:42,999 --> 00:14:46,029
servers you were willing to run on this

00:14:44,829 --> 00:14:48,639
means you might have to make sacrifices

00:14:46,029 --> 00:14:50,769
about the ideal instance type you're

00:14:48,639 --> 00:14:53,429
willing to use Yelp for a long time we

00:14:50,769 --> 00:14:56,769
used an exact the c-4 for excel

00:14:53,429 --> 00:14:58,480
exclusively for our big like web app it

00:14:56,769 --> 00:15:00,519
sure gives the great the best

00:14:58,480 --> 00:15:02,259
performance but you know what we could

00:15:00,519 --> 00:15:04,449
run on other instance types it'd be a

00:15:02,259 --> 00:15:06,699
little slower but could we save a lot of

00:15:04,449 --> 00:15:08,139
money by doing but it's buffered and you

00:15:06,699 --> 00:15:09,910
know allowing giving it the freedom to

00:15:08,139 --> 00:15:13,199
pick different spot free types and

00:15:09,910 --> 00:15:15,429
instance types we decided collectively

00:15:13,199 --> 00:15:17,589
after running the numbers seeing how our

00:15:15,429 --> 00:15:19,389
apps our website performed on other

00:15:17,589 --> 00:15:21,669
instance times that it was acceptable to

00:15:19,389 --> 00:15:23,169
make this cost-benefit Alice's that's

00:15:21,669 --> 00:15:25,260
what this really comes down to it's a

00:15:23,169 --> 00:15:27,000
business decision you're choosing a

00:15:25,260 --> 00:15:29,460
type of infrastructure that's less

00:15:27,000 --> 00:15:30,930
stable but very cost-effective and

00:15:29,460 --> 00:15:34,100
you're making the trade-offs between

00:15:30,930 --> 00:15:34,100
performance and reliability

00:15:34,370 --> 00:15:38,910
diversification Amazon Spa fleet does

00:15:36,690 --> 00:15:40,560
not retro actively try to rebalance your

00:15:38,910 --> 00:15:42,000
spot free to make it more diverse even

00:15:40,560 --> 00:15:43,230
when you pick the diversified strategies

00:15:42,000 --> 00:15:47,040
you need to be aware of this because

00:15:43,230 --> 00:15:49,380
over time the spot-free can become less

00:15:47,040 --> 00:15:51,390
diverse and as it becomes less diverse

00:15:49,380 --> 00:15:54,840
it means your risk is increasing

00:15:51,390 --> 00:15:56,490
I'll show you graphs of that a key

00:15:54,840 --> 00:15:58,440
fundamental understanding about how spa

00:15:56,490 --> 00:16:01,440
suites are implemented is that the spot

00:15:58,440 --> 00:16:03,660
markets are combination of AZ and

00:16:01,440 --> 00:16:05,490
instance type so it's not enough that

00:16:03,660 --> 00:16:07,020
you just pick that you launch everything

00:16:05,490 --> 00:16:08,370
in one AZ with a bunch of different

00:16:07,020 --> 00:16:09,810
instance types you need to realize that

00:16:08,370 --> 00:16:13,010
you need be spread out across all those

00:16:09,810 --> 00:16:15,270
markets for good diversification and

00:16:13,010 --> 00:16:17,400
weighting this is really important

00:16:15,270 --> 00:16:19,080
because if you don't wait which types of

00:16:17,400 --> 00:16:20,820
instance types are acceptable correctly

00:16:19,080 --> 00:16:23,610
and you give this buckwheat the wrong

00:16:20,820 --> 00:16:27,900
kind of signals it may inadvertently

00:16:23,610 --> 00:16:29,430
launch a lot of maybe m416 xl's because

00:16:27,900 --> 00:16:30,750
you've waited them really high this

00:16:29,430 --> 00:16:32,600
would be bad because you want your

00:16:30,750 --> 00:16:36,030
diversity you want your weights to

00:16:32,600 --> 00:16:39,090
represent a diverse and evenly well

00:16:36,030 --> 00:16:40,860
balanced fleet that again reduces your

00:16:39,090 --> 00:16:44,490
risk if you're interested in running

00:16:40,860 --> 00:16:46,470
production workloads let's take a look

00:16:44,490 --> 00:16:50,430
at that diversity diversity in action on

00:16:46,470 --> 00:16:52,110
the left hand side it's there's there's

00:16:50,430 --> 00:16:54,180
there some lines but you can see that

00:16:52,110 --> 00:16:55,950
we're really hot on one thicker instance

00:16:54,180 --> 00:16:58,470
like this visit small fee request was

00:16:55,950 --> 00:17:00,240
not configured correctly and then when

00:16:58,470 --> 00:17:01,560
we built the new one it gets a little

00:17:00,240 --> 00:17:04,440
more evenly balanced I have a better

00:17:01,560 --> 00:17:05,970
example next year look at this bottle

00:17:04,440 --> 00:17:08,070
request you can see over the course of a

00:17:05,970 --> 00:17:10,160
couple days we've we've made a mistake

00:17:08,070 --> 00:17:12,930
in our waiting and spot request has

00:17:10,160 --> 00:17:15,060
highly favored two particular instance

00:17:12,930 --> 00:17:16,470
types we are at serious risk here if we

00:17:15,060 --> 00:17:18,150
lost one of these instance types and got

00:17:16,470 --> 00:17:20,730
outbid we would lose half of our cluster

00:17:18,150 --> 00:17:22,949
you can see towards the end of the week

00:17:20,730 --> 00:17:24,750
here we've corrected this and look how

00:17:22,949 --> 00:17:26,699
look how nice and a rainbow

00:17:24,750 --> 00:17:27,930
esque the last part is that because

00:17:26,699 --> 00:17:30,030
that's because our weights are not

00:17:27,930 --> 00:17:32,220
correct and we're more evenly balanced

00:17:30,030 --> 00:17:37,040
and we're note there's no hotspot in our

00:17:32,220 --> 00:17:37,040
spot request pretty cool

00:17:37,480 --> 00:17:43,190
this is how you do this you you add more

00:17:40,910 --> 00:17:44,480
files more entries to this JSON file at

00:17:43,190 --> 00:17:46,190
you if you're using the term provider'

00:17:44,480 --> 00:17:47,540
of course if you're using the C Allah

00:17:46,190 --> 00:17:50,090
you're gonna be adding lots and lots of

00:17:47,540 --> 00:17:52,160
stuff but how do you achieve diversity

00:17:50,090 --> 00:17:54,530
it's through conscious and deliberate

00:17:52,160 --> 00:17:57,190
effort and tuning and deciding which

00:17:54,530 --> 00:18:00,410
instances are correct for your workload

00:17:57,190 --> 00:18:01,610
let's talk about easy balancing most

00:18:00,410 --> 00:18:03,590
people who on Amazon who are running

00:18:01,610 --> 00:18:05,330
these kinds of things websites are using

00:18:03,590 --> 00:18:07,880
things called auto-scaling groups where

00:18:05,330 --> 00:18:10,400
Amazon is launching instances usually of

00:18:07,880 --> 00:18:12,380
one type and you click the force AZ

00:18:10,400 --> 00:18:14,510
balance button which makes Amazon

00:18:12,380 --> 00:18:17,180
launched equal numbers and equal in

00:18:14,510 --> 00:18:20,810
different Easy's spot weight does not do

00:18:17,180 --> 00:18:22,430
this it's not really designed to run

00:18:20,810 --> 00:18:24,260
websites on it's really designed for

00:18:22,430 --> 00:18:25,940
batch workloads and that kind of thing

00:18:24,260 --> 00:18:27,470
so you have to take it into your own

00:18:25,940 --> 00:18:31,940
hands to be able to balance these aces

00:18:27,470 --> 00:18:33,830
yourself well how can you do that let's

00:18:31,940 --> 00:18:36,080
look at another graph this is a spot

00:18:33,830 --> 00:18:38,300
request it looks pretty well balanced

00:18:36,080 --> 00:18:39,830
but let's look a little closer here

00:18:38,300 --> 00:18:42,620
watch what happens when I look at it on

00:18:39,830 --> 00:18:44,060
a per a Z basis so I take out all the

00:18:42,620 --> 00:18:47,360
instance types this is our capacity per

00:18:44,060 --> 00:18:49,040
a Z looks look still not bad but then

00:18:47,360 --> 00:18:50,900
when you and I unn stack it you can see

00:18:49,040 --> 00:18:53,060
that at times there's some serious

00:18:50,900 --> 00:18:55,250
imbalances here not only is this a

00:18:53,060 --> 00:18:57,080
little risky but it also means that some

00:18:55,250 --> 00:18:59,090
of our developers may be in particular

00:18:57,080 --> 00:19:03,320
our database engineers and our memcache

00:18:59,090 --> 00:19:06,530
clusters can get get hotspots how do you

00:19:03,320 --> 00:19:08,630
how you how do you eliminate this one

00:19:06,530 --> 00:19:10,910
way that you can eliminate this is by

00:19:08,630 --> 00:19:13,190
forcing spot fleet to only launch things

00:19:10,910 --> 00:19:15,440
in one AZ and instead of launching one

00:19:13,190 --> 00:19:16,940
mega spot we you launch if you're

00:19:15,440 --> 00:19:19,520
there's three AZ's you launch three

00:19:16,940 --> 00:19:22,480
different spotlight requests and they're

00:19:19,520 --> 00:19:25,400
pinned to the AZ so when you get outbid

00:19:22,480 --> 00:19:27,470
Amazon is forced to launch more capacity

00:19:25,400 --> 00:19:29,960
but in the same AC because the spotlight

00:19:27,470 --> 00:19:32,000
press is self-contained it has to launch

00:19:29,960 --> 00:19:33,860
new instance instances of a different

00:19:32,000 --> 00:19:36,550
type in that AZ in order to meet your

00:19:33,860 --> 00:19:38,690
capacity and it's not allowed to move

00:19:36,550 --> 00:19:40,760
capacity to a different AZ just because

00:19:38,690 --> 00:19:43,250
it might be cheaper this is definitely a

00:19:40,760 --> 00:19:45,020
trade-off your your although there may

00:19:43,250 --> 00:19:46,520
be instances in other AZ's that are less

00:19:45,020 --> 00:19:49,190
expensive that's Buckley it could save

00:19:46,520 --> 00:19:50,010
money on but if your if you care about a

00:19:49,190 --> 00:19:51,660
Z balance and

00:19:50,010 --> 00:19:53,250
care about diversification you and you

00:19:51,660 --> 00:19:55,830
want to make sure that you don't all end

00:19:53,250 --> 00:19:58,710
up POW wall and all on one AZ and they

00:19:55,830 --> 00:20:01,080
again a serious risk you need to set up

00:19:58,710 --> 00:20:03,330
spotlight requests that are AZ specific

00:20:01,080 --> 00:20:04,860
to set up hard boundaries to let's Punk

00:20:03,330 --> 00:20:09,150
leap to make sure that spot we can't

00:20:04,860 --> 00:20:10,860
start getting in balanced let's talk

00:20:09,150 --> 00:20:12,240
about bidding this is something if

00:20:10,860 --> 00:20:13,860
you're interested in launching spot

00:20:12,240 --> 00:20:17,370
request for a website you have to choose

00:20:13,860 --> 00:20:18,330
what kind of bids you pick at first

00:20:17,370 --> 00:20:19,860
glance you might think you should just

00:20:18,330 --> 00:20:21,270
bid high because you don't want to get

00:20:19,860 --> 00:20:25,230
outbid you want your website to stay up

00:20:21,270 --> 00:20:26,940
you can't bid that high but you do to

00:20:25,230 --> 00:20:29,040
want a bid high and you certainly want

00:20:26,940 --> 00:20:30,750
to out you want to get win over the

00:20:29,040 --> 00:20:33,030
batch workloads that other people are

00:20:30,750 --> 00:20:35,220
launching on spot free and at Yelp we've

00:20:33,030 --> 00:20:36,990
kind of come to gurus that to X's is

00:20:35,220 --> 00:20:39,180
pretty good if you want to survive the

00:20:36,990 --> 00:20:42,360
spikes there's small spikes in the price

00:20:39,180 --> 00:20:44,220
but you don't want the bid to go so high

00:20:42,360 --> 00:20:45,510
that you you end up paying tons and tons

00:20:44,220 --> 00:20:47,400
of money where you up should have just

00:20:45,510 --> 00:20:49,410
been launched the things on on demand at

00:20:47,400 --> 00:20:50,670
the whole time so remember this is a

00:20:49,410 --> 00:20:52,650
business thing we want to be able to

00:20:50,670 --> 00:20:55,410
save money and if we're we choose the

00:20:52,650 --> 00:20:57,900
wrong bid we won't take money and then

00:20:55,410 --> 00:20:59,640
what's the point how do we come to that

00:20:57,900 --> 00:21:02,280
conclusion well we wrote this tool to

00:20:59,640 --> 00:21:05,040
help scrape the pricing structure and

00:21:02,280 --> 00:21:08,060
then analyze how many times would we get

00:21:05,040 --> 00:21:11,370
outbid with a certain bid price and

00:21:08,060 --> 00:21:14,160
conversely how reliable would a piece of

00:21:11,370 --> 00:21:16,170
infrastructure be if we bid X so by

00:21:14,160 --> 00:21:17,390
using this tool we were able to explore

00:21:16,170 --> 00:21:19,530
the space and try to come up with

00:21:17,390 --> 00:21:21,180
general guidelines about how much we

00:21:19,530 --> 00:21:24,720
should be bidding on our spot requests

00:21:21,180 --> 00:21:28,560
here's an example we if you bid a

00:21:24,720 --> 00:21:30,600
certain of basically we ask the tool how

00:21:28,560 --> 00:21:32,760
much what do we have to bid to make this

00:21:30,600 --> 00:21:34,530
class of server be 100% up over the

00:21:32,760 --> 00:21:36,750
course of the month and it just spit out

00:21:34,530 --> 00:21:39,170
that it recommended that we bid $10 an

00:21:36,750 --> 00:21:41,730
hour for an import an excellent whatever

00:21:39,170 --> 00:21:43,350
the point is by inspecting the data

00:21:41,730 --> 00:21:44,880
we're able to kind of prove to ourselves

00:21:43,350 --> 00:21:46,920
or at least give us give us some

00:21:44,880 --> 00:21:52,590
confidence that if we bid high we really

00:21:46,920 --> 00:21:57,000
will stay up similarly in this example

00:21:52,590 --> 00:22:00,090
with a sequel for excel in order to if

00:21:57,000 --> 00:22:03,240
we were to bid the recommended amount

00:22:00,090 --> 00:22:06,810
that this tool says to stay 100%

00:22:03,240 --> 00:22:09,360
we'd be spending about eleven dollars

00:22:06,810 --> 00:22:11,790
what we bid eleven dollars but if you

00:22:09,360 --> 00:22:15,720
look carefully the tools telling us that

00:22:11,790 --> 00:22:17,100
we'd be spending more than what we would

00:22:15,720 --> 00:22:19,170
spend on a reserved instance

00:22:17,100 --> 00:22:20,700
so again if we're gonna save money we

00:22:19,170 --> 00:22:21,900
might as well be just spending we might

00:22:20,700 --> 00:22:23,820
as well just buy reserved instances

00:22:21,900 --> 00:22:25,830
there's no purpose in this spending this

00:22:23,820 --> 00:22:28,740
much money on a spot instance just for

00:22:25,830 --> 00:22:30,600
the sake of Hill ability so make sure to

00:22:28,740 --> 00:22:33,000
keep this in mind and you want to keep a

00:22:30,600 --> 00:22:34,950
balance you you want to save money but

00:22:33,000 --> 00:22:37,620
you want to stay up and you've got lots

00:22:34,950 --> 00:22:39,150
of knobs to do it and again it yelped 2x

00:22:37,620 --> 00:22:44,730
is about what if you decide this is

00:22:39,150 --> 00:22:46,440
close enough you will be up in it's just

00:22:44,730 --> 00:22:48,720
the nature of the beast if you're gonna

00:22:46,440 --> 00:22:50,490
choose to run on this very unreliable

00:22:48,720 --> 00:22:53,520
infrastructure you need to be able to

00:22:50,490 --> 00:22:56,340
deal with the terminations now in a situ

00:22:53,520 --> 00:22:56,670
anyway things get things get dropped on

00:22:56,340 --> 00:22:59,820
the floor

00:22:56,670 --> 00:23:01,350
ec2 instances die I remember the first

00:22:59,820 --> 00:23:03,660
time that I got a receive a notification

00:23:01,350 --> 00:23:06,120
that might an ec2 instance was on bad

00:23:03,660 --> 00:23:07,800
Hardware and I was like that's a cloud

00:23:06,120 --> 00:23:10,260
it's not very it's not what I thought it

00:23:07,800 --> 00:23:12,570
was yes easy to do instances go away but

00:23:10,260 --> 00:23:14,760
they go away more frequently and spotty

00:23:12,570 --> 00:23:16,980
requests of course how do you deal with

00:23:14,760 --> 00:23:19,740
it luckily in the mesas land this is

00:23:16,980 --> 00:23:21,690
very easy Mesa has all the tools it

00:23:19,740 --> 00:23:24,840
needs to be able to to move compute

00:23:21,690 --> 00:23:27,320
different places super great

00:23:24,840 --> 00:23:29,810
can we do better than just letting maysa

00:23:27,320 --> 00:23:32,970
reschedule things as it sees fit

00:23:29,810 --> 00:23:35,750
we can let me show you a few examples of

00:23:32,970 --> 00:23:38,880
what what's happened so in this case

00:23:35,750 --> 00:23:42,150
amazon has herbs mesas has done a great

00:23:38,880 --> 00:23:44,670
job of taking of reacting to these

00:23:42,150 --> 00:23:49,230
outfit events in this case we got outbid

00:23:44,670 --> 00:23:52,020
on two two spot markets at the same time

00:23:49,230 --> 00:23:53,460
which which represented maybe 20 or 30

00:23:52,020 --> 00:23:55,530
percent of our capacity the reason I was

00:23:53,460 --> 00:23:58,440
evil even able to find this example of

00:23:55,530 --> 00:24:02,010
us be now bid is because it was a pretty

00:23:58,440 --> 00:24:04,800
big event luckily it wasn't so big that

00:24:02,010 --> 00:24:06,090
impacted our users because we're saving

00:24:04,800 --> 00:24:08,160
so much money on stuff like that we can

00:24:06,090 --> 00:24:10,080
over provision so we know to expect

00:24:08,160 --> 00:24:11,910
things like 30 percent cuts in our

00:24:10,080 --> 00:24:13,890
capacity no problem let's just over

00:24:11,910 --> 00:24:16,020
provision another you know 30 percent

00:24:13,890 --> 00:24:18,990
we're saving so much cash it's no big

00:24:16,020 --> 00:24:21,030
deal but maces also is able to

00:24:18,990 --> 00:24:22,830
compensate you can see only a few

00:24:21,030 --> 00:24:24,720
minutes after than we were outbid we

00:24:22,830 --> 00:24:27,860
were able to relaunch on new instance

00:24:24,720 --> 00:24:30,810
types and maysa you know made it happen

00:24:27,860 --> 00:24:33,750
pretty great here's one where it didn't

00:24:30,810 --> 00:24:35,730
go so great at Yelp we were outbid a

00:24:33,750 --> 00:24:38,070
couple things compounded here to make

00:24:35,730 --> 00:24:39,810
this this event pretty bad you can see

00:24:38,070 --> 00:24:41,790
that this is before we had really good

00:24:39,810 --> 00:24:44,130
best practices around waiting so we were

00:24:41,790 --> 00:24:46,380
really really hot on a couple Easy's and

00:24:44,130 --> 00:24:48,240
when those went when our instance sites

00:24:46,380 --> 00:24:50,220
and AZ's and when those got outbid we

00:24:48,240 --> 00:24:51,840
lost a lot of capacity but it's about

00:24:50,220 --> 00:24:54,480
50% in this graph so that was pretty

00:24:51,840 --> 00:24:56,130
significant again luckily in this case

00:24:54,480 --> 00:24:58,350
there was no user facing impact because

00:24:56,130 --> 00:25:02,400
we were over vision it wasn't super

00:24:58,350 --> 00:25:04,950
super high impact time basis did what it

00:25:02,400 --> 00:25:06,870
could but somebody at the exact same

00:25:04,950 --> 00:25:08,790
time happened hood break they broke

00:25:06,870 --> 00:25:10,470
puppet and when I broke puppet puppet

00:25:08,790 --> 00:25:12,690
couldn't run public and brute strap we

00:25:10,470 --> 00:25:14,550
can do we can launch new new capacity

00:25:12,690 --> 00:25:15,870
spotlight was doing his jobs buffering

00:25:14,550 --> 00:25:18,150
when she's launching play of instances

00:25:15,870 --> 00:25:20,040
in in their place but mesas couldn't

00:25:18,150 --> 00:25:21,900
launch because our bootstrap was broken

00:25:20,040 --> 00:25:23,670
you can see when the bootstrap was fixed

00:25:21,900 --> 00:25:26,310
exactly puppet started taking care of

00:25:23,670 --> 00:25:28,650
things and makes us recovered great Mesa

00:25:26,310 --> 00:25:31,110
again is perfect tool for this job and

00:25:28,650 --> 00:25:33,690
we're only able to run our production

00:25:31,110 --> 00:25:35,520
workloads on this kind of funds unstable

00:25:33,690 --> 00:25:38,400
infrastructure because of the way that

00:25:35,520 --> 00:25:39,750
mesas is so good at relaunching you know

00:25:38,400 --> 00:25:42,630
things and new compute where they're

00:25:39,750 --> 00:25:43,320
available but you can do a little better

00:25:42,630 --> 00:25:45,300
by using

00:25:43,320 --> 00:25:48,180
mesas maintenance primitives

00:25:45,300 --> 00:25:51,600
unfortunately these are only supported

00:25:48,180 --> 00:25:53,910
really in the one and the HTTP API Sonos

00:25:51,600 --> 00:25:56,190
frameworks do not support this it's kind

00:25:53,910 --> 00:25:58,980
of a shame I wish that this was I hope

00:25:56,190 --> 00:26:01,140
that next year's mesas conf maintenance

00:25:58,980 --> 00:26:02,610
primitives are you know really well

00:26:01,140 --> 00:26:04,860
adopted but at the current state of the

00:26:02,610 --> 00:26:08,310
time at a time of this talk they just

00:26:04,860 --> 00:26:09,690
aren't we use marathon extensively and

00:26:08,310 --> 00:26:11,910
marathon there's a there's a pull

00:26:09,690 --> 00:26:13,770
request to do to do part of it rejecting

00:26:11,910 --> 00:26:16,050
offers from agents that are maintenance

00:26:13,770 --> 00:26:17,340
that's that's some of it but that maybe

00:26:16,050 --> 00:26:19,230
the other half were maysa will take

00:26:17,340 --> 00:26:23,400
things away from servers that are going

00:26:19,230 --> 00:26:26,160
down the way that we do this is that you

00:26:23,400 --> 00:26:28,410
can curl this very specific URL on every

00:26:26,160 --> 00:26:29,510
ec2 server that's in spot we and basic

00:26:28,410 --> 00:26:31,400
any a CT server any

00:26:29,510 --> 00:26:32,960
but spot weights specifically and you

00:26:31,400 --> 00:26:36,560
can see when you're about to be up bid

00:26:32,960 --> 00:26:39,140
you get two minutes to get out to evict

00:26:36,560 --> 00:26:41,480
so what we do is we just pull this this

00:26:39,140 --> 00:26:43,520
this URL and when we notice that we're

00:26:41,480 --> 00:26:44,900
about to be outbid we ask maintenance to

00:26:43,520 --> 00:26:47,120
go Mace's to go into maintenance mode

00:26:44,900 --> 00:26:48,920
this is pretty easy because this is on

00:26:47,120 --> 00:26:51,530
the localhost so you can just you can

00:26:48,920 --> 00:26:53,020
just you know query the API when you get

00:26:51,530 --> 00:26:54,590
outbid go into maintenance mode

00:26:53,020 --> 00:26:57,560
unfortunately none of our firmware

00:26:54,590 --> 00:26:59,660
support it so it so we use our our pasta

00:26:57,560 --> 00:27:01,610
as our platform as a service to kind of

00:26:59,660 --> 00:27:04,400
work around this we just ask mesas and

00:27:01,610 --> 00:27:06,920
Marathon specifically we ask Marathon to

00:27:04,400 --> 00:27:09,740
relocate tasks by downing them and

00:27:06,920 --> 00:27:11,720
killing them and it'll relaunch we do

00:27:09,740 --> 00:27:13,760
our best it's not perfect but the tools

00:27:11,720 --> 00:27:16,880
are in place to be able to gracefully

00:27:13,760 --> 00:27:21,740
handle this type of termination in mesas

00:27:16,880 --> 00:27:23,060
using the primitives however the the the

00:27:21,740 --> 00:27:25,940
elephant in the room here is that two

00:27:23,060 --> 00:27:27,350
minutes is not very much time so maybe

00:27:25,940 --> 00:27:29,000
it goes without saying that we don't run

00:27:27,350 --> 00:27:30,730
our workloads that take longer than two

00:27:29,000 --> 00:27:32,630
minutes to spin up on spot we

00:27:30,730 --> 00:27:34,280
specifically we don't run anything

00:27:32,630 --> 00:27:37,010
that's safe full of course we don't run

00:27:34,280 --> 00:27:39,020
Cassandra on this we don't run Kafka but

00:27:37,010 --> 00:27:41,120
luckily most of yelps compute workload

00:27:39,020 --> 00:27:43,970
is not that so we don't mind paying

00:27:41,120 --> 00:27:45,080
reserve prices for that those pieces of

00:27:43,970 --> 00:27:47,240
infrastructure that really need to be up

00:27:45,080 --> 00:27:51,050
the most the time and launching this for

00:27:47,240 --> 00:27:53,240
pretty much everything else again mesas

00:27:51,050 --> 00:27:54,770
does a great job of tolerating this I do

00:27:53,240 --> 00:27:56,450
have to say that at the time of this

00:27:54,770 --> 00:27:57,530
presentation I can't actually recommend

00:27:56,450 --> 00:27:59,600
using the maintenance primitives for

00:27:57,530 --> 00:28:01,280
this because there's a critical bug I

00:27:59,600 --> 00:28:02,300
think that most people just aren't using

00:28:01,280 --> 00:28:04,010
these primitives because they're not

00:28:02,300 --> 00:28:06,380
supported in frameworks but we can

00:28:04,010 --> 00:28:08,000
easily crash the mesas master by by

00:28:06,380 --> 00:28:10,460
doing that by hitting this maintenance

00:28:08,000 --> 00:28:12,110
API in the wrong way so we actually

00:28:10,460 --> 00:28:14,390
don't do this in real life to be honest

00:28:12,110 --> 00:28:15,860
I hope that bug is fixed quickly and

00:28:14,390 --> 00:28:17,330
then we can turn this back on to get to

00:28:15,860 --> 00:28:20,780
make our termination procedures even

00:28:17,330 --> 00:28:22,250
more graceful so let's talk let's let's

00:28:20,780 --> 00:28:23,540
recap some general advice for those in

00:28:22,250 --> 00:28:24,620
the room that are that are really

00:28:23,540 --> 00:28:26,180
thinking about sloughing and what they

00:28:24,620 --> 00:28:27,950
might do how they might use it at their

00:28:26,180 --> 00:28:29,750
own company diversification is probably

00:28:27,950 --> 00:28:31,460
the number one best practice to take

00:28:29,750 --> 00:28:34,130
away from this diversify your spa things

00:28:31,460 --> 00:28:35,510
as much as you can reduce your risk to

00:28:34,130 --> 00:28:37,850
run your production workloads

00:28:35,510 --> 00:28:39,530
locking spa fleets per AC I think this

00:28:37,850 --> 00:28:42,800
is a really good idea and if you think

00:28:39,530 --> 00:28:44,000
that AZ specific balancing is important

00:28:42,800 --> 00:28:46,760
when you do it it's easy to do by

00:28:44,000 --> 00:28:48,980
launching spot please Parisi a spot

00:28:46,760 --> 00:28:50,690
Philippe a spot market Mesa is a three

00:28:48,980 --> 00:28:52,730
is kind of cool it's pretty easy to add

00:28:50,690 --> 00:28:54,130
attributes the mesas arbitrary ones and

00:28:52,730 --> 00:28:56,300
then you can have your frameworks

00:28:54,130 --> 00:28:59,030
interpret these in the way that they can

00:28:56,300 --> 00:29:00,980
to reduce your risk even further if you

00:28:59,030 --> 00:29:04,640
set a spot market attribute like this

00:29:00,980 --> 00:29:06,830
you can ask say marathon to maybe group

00:29:04,640 --> 00:29:09,620
buy certain things so marathon doesn't

00:29:06,830 --> 00:29:12,710
accidentally pile up there the tasks on

00:29:09,620 --> 00:29:16,880
particular spot market types spot spot

00:29:12,710 --> 00:29:18,680
market you know groups and I couldn't

00:29:16,880 --> 00:29:19,690
respond to beta spence maintenance even

00:29:18,680 --> 00:29:22,010
as best you can

00:29:19,690 --> 00:29:24,380
abs gives you the tooling to be able to

00:29:22,010 --> 00:29:26,270
curl that endpoint do whatever you can

00:29:24,380 --> 00:29:27,980
to do with that yelp that means taking

00:29:26,270 --> 00:29:30,650
out the low bouncer talking to marathon

00:29:27,980 --> 00:29:34,940
to reschedule some stuff do whatever you

00:29:30,650 --> 00:29:36,860
can do profit is it worth is it worth it

00:29:34,940 --> 00:29:41,120
to Yelp to do all this tooling all this

00:29:36,860 --> 00:29:44,030
instability all the engineer is required

00:29:41,120 --> 00:29:45,320
to keep this up and running well I ran

00:29:44,030 --> 00:29:47,120
the numbers I wanted to show my work

00:29:45,320 --> 00:29:50,240
it's okay that you can't read all of the

00:29:47,120 --> 00:29:52,220
data here but I promise that it yes the

00:29:50,240 --> 00:29:54,590
answer is absolutely yes there are

00:29:52,220 --> 00:29:57,050
certain times where we are paying more

00:29:54,590 --> 00:29:59,810
than the reserve price that's okay on

00:29:57,050 --> 00:30:02,210
the whole spot fleet is saving us tons

00:29:59,810 --> 00:30:04,370
and tons of cash here's an example of

00:30:02,210 --> 00:30:06,050
that where we were there's a sustained

00:30:04,370 --> 00:30:08,660
period where we were paying more than

00:30:06,050 --> 00:30:11,120
the on-demand price but again it's okay

00:30:08,660 --> 00:30:12,860
on the whole we're still saving cash and

00:30:11,120 --> 00:30:15,050
I wanted to make sure that this was

00:30:12,860 --> 00:30:16,610
actually true across all the instance

00:30:15,050 --> 00:30:17,810
types and across all of our regions

00:30:16,610 --> 00:30:20,480
because there could have been a case

00:30:17,810 --> 00:30:22,010
where we were like there's one that's

00:30:20,480 --> 00:30:23,570
running really hot that we were like

00:30:22,010 --> 00:30:25,160
wasting money by launching a particular

00:30:23,570 --> 00:30:27,410
instance type I'm happy to say the

00:30:25,160 --> 00:30:28,970
answer's no when we look it across the

00:30:27,410 --> 00:30:30,560
board all the regions all the instance

00:30:28,970 --> 00:30:32,060
types that weren't using and then doing

00:30:30,560 --> 00:30:34,310
a weighted average based on the hours

00:30:32,060 --> 00:30:36,230
we're spending on each I can I can with

00:30:34,310 --> 00:30:39,080
confidence say that we're saving 50%

00:30:36,230 --> 00:30:41,990
over the reserved price here's another

00:30:39,080 --> 00:30:44,330
way to visualize that data you can see

00:30:41,990 --> 00:30:47,030
some hotspots they're coming up to the

00:30:44,330 --> 00:30:50,140
reserve price not on demand but on the

00:30:47,030 --> 00:30:52,880
whole we're saving 50% compared to our

00:30:50,140 --> 00:30:54,800
baseline reserved instance type which is

00:30:52,880 --> 00:30:56,179
a three year convertible this is the

00:30:54,800 --> 00:30:58,279
type of reserve instance we

00:30:56,179 --> 00:30:59,450
would be been paying at Yelp if we

00:30:58,279 --> 00:31:00,619
weren't using spots so this is the

00:30:59,450 --> 00:31:02,090
comparison that we have to make as a

00:31:00,619 --> 00:31:04,009
business what would we be doing

00:31:02,090 --> 00:31:05,840
otherwise it's not really fair to

00:31:04,009 --> 00:31:07,580
compare with spot prices to on-demand

00:31:05,840 --> 00:31:10,340
for business because that's not what

00:31:07,580 --> 00:31:11,960
would be actually paying but compare

00:31:10,340 --> 00:31:13,850
those prices we're still saving 50

00:31:11,960 --> 00:31:15,499
percent to put another way if we were to

00:31:13,850 --> 00:31:17,720
snap our fingers and stop use and

00:31:15,499 --> 00:31:20,029
sparkly we'd be paying twice as much for

00:31:17,720 --> 00:31:22,519
infrastructure this is a huge deal I

00:31:20,029 --> 00:31:23,929
mean the how huge it is there's really a

00:31:22,519 --> 00:31:25,879
function of how big your clusters are

00:31:23,929 --> 00:31:29,090
how many engineers your hire and how big

00:31:25,879 --> 00:31:31,940
your abs bill is but if it's you know 2x

00:31:29,090 --> 00:31:32,570
that's that's a big deal so that it is a

00:31:31,940 --> 00:31:34,340
lot of profit

00:31:32,570 --> 00:31:35,799
I would like to shout out to the the

00:31:34,340 --> 00:31:39,110
early adopters these are the Yelp

00:31:35,799 --> 00:31:41,210
engineers who have early adopt spot in

00:31:39,110 --> 00:31:44,019
the development environments to save a

00:31:41,210 --> 00:31:46,129
lot of cash there it wasn't until we

00:31:44,019 --> 00:31:48,230
learned a lot from them where we're able

00:31:46,129 --> 00:31:49,909
to move it to prod and here I'm not an

00:31:48,230 --> 00:31:51,379
island here I represent a team and these

00:31:49,909 --> 00:31:53,419
are the team members that that work with

00:31:51,379 --> 00:31:54,889
me to help make sure that this spot free

00:31:53,419 --> 00:31:58,220
infrastructure stays up as well as it

00:31:54,889 --> 00:32:00,379
does if you're a thing about going it's

00:31:58,220 --> 00:32:02,179
puffy this is a must-read for you of

00:32:00,379 --> 00:32:03,470
course look at the slides on maysa on

00:32:02,179 --> 00:32:05,299
the mesas common website afterwards the

00:32:03,470 --> 00:32:07,789
CDs there's alternatives to spot free

00:32:05,299 --> 00:32:09,049
that you can use that give you some of

00:32:07,789 --> 00:32:10,549
the same benefits and there's some

00:32:09,049 --> 00:32:12,409
hosted solutions there's lots of

00:32:10,549 --> 00:32:14,480
alternatives before you get into this

00:32:12,409 --> 00:32:16,369
you need to be well educated and also

00:32:14,480 --> 00:32:18,230
there's some academic papers studying

00:32:16,369 --> 00:32:19,759
these markets to see how are they

00:32:18,230 --> 00:32:21,679
sustainable can they work on the route

00:32:19,759 --> 00:32:22,909
in the long term and that sort of thing

00:32:21,679 --> 00:32:24,259
I highly encourage you to look at these

00:32:22,909 --> 00:32:25,820
if you're if you're actually gonna go

00:32:24,259 --> 00:32:29,240
implement spot learn as much as you can

00:32:25,820 --> 00:32:31,309
about how it actually works that's it if

00:32:29,240 --> 00:32:33,350
you go to our github you can see pasta

00:32:31,309 --> 00:32:35,119
which is our arm Asus platform

00:32:33,350 --> 00:32:36,529
as-a-service thingy that has any of the

00:32:35,119 --> 00:32:37,460
code that I referenced in this thing if

00:32:36,529 --> 00:32:39,169
you're interested of the actual

00:32:37,460 --> 00:32:40,789
implementation but of course the up

00:32:39,169 --> 00:32:41,899
engineering and hiring vlog all that

00:32:40,789 --> 00:32:44,720
stuff and you can contact me personally

00:32:41,899 --> 00:32:50,419
with that email we have a few months for

00:32:44,720 --> 00:32:52,960
questions micro elected care or I can

00:32:50,419 --> 00:32:52,960
repeat the question

00:32:58,789 --> 00:33:03,659
sure question was how much did you did

00:33:01,259 --> 00:33:05,639
Yelp have to spend in order to build up

00:33:03,659 --> 00:33:07,529
the infrastructure required to do this

00:33:05,639 --> 00:33:09,169
thing that's really important for doing

00:33:07,529 --> 00:33:13,200
the kind of cost-benefit analysis

00:33:09,169 --> 00:33:15,659
hard to say the it's as you can see it's

00:33:13,200 --> 00:33:17,999
probably the the for engineers for dev

00:33:15,659 --> 00:33:19,369
so as for engineers working you know for

00:33:17,999 --> 00:33:24,210
a couple of quarters not working all

00:33:19,369 --> 00:33:27,539
full-time but definitely at our scale it

00:33:24,210 --> 00:33:28,409
was definitely worth it to do I don't

00:33:27,539 --> 00:33:29,970
think we actually did a formal

00:33:28,409 --> 00:33:31,559
cost-benefit analysis but looking at our

00:33:29,970 --> 00:33:32,369
Avis bill it's obvious that it's worth

00:33:31,559 --> 00:33:34,139
it

00:33:32,369 --> 00:33:36,479
luckily you don't have to spend all this

00:33:34,139 --> 00:33:38,190
engineering effort yourself we the

00:33:36,479 --> 00:33:39,509
terraform provider we open-source we

00:33:38,190 --> 00:33:42,029
just made a pull request back on

00:33:39,509 --> 00:33:43,710
terraform the pasta infrastructures are

00:33:42,029 --> 00:33:46,529
all open-source our autoscaler in our

00:33:43,710 --> 00:33:48,330
spot are our areas spot aware auto

00:33:46,529 --> 00:33:50,820
scaling is open source as well so

00:33:48,330 --> 00:33:52,679
luckily you can learn from my from all

00:33:50,820 --> 00:33:53,639
the work that we did spending hours you

00:33:52,679 --> 00:33:54,690
know looking at graphs and trying to

00:33:53,639 --> 00:33:57,299
figure out what the best practices are

00:33:54,690 --> 00:34:01,229
for using this tool by of course you

00:33:57,299 --> 00:34:03,599
know watching this talk maybe one more

00:34:01,229 --> 00:34:07,639
question okay actually we have about

00:34:03,599 --> 00:34:10,139
seven questions how do you change

00:34:07,639 --> 00:34:11,909
capacity of your fleets by hand do you

00:34:10,139 --> 00:34:14,789
have some automated tool that tracks as

00:34:11,909 --> 00:34:18,599
a usage of you measure speed and do it

00:34:14,789 --> 00:34:21,839
automatically at night for example start

00:34:18,599 --> 00:34:23,849
you're asking why don't we okay do you

00:34:21,839 --> 00:34:30,720
apply terraform States by your hands or

00:34:23,849 --> 00:34:34,440
is it doing by some automated to the

00:34:30,720 --> 00:34:36,480
whole scale yes scale down scale no

00:34:34,440 --> 00:34:38,789
scale of shows pleats yes we have an

00:34:36,480 --> 00:34:40,049
auto scaler in this path we spa but you

00:34:38,789 --> 00:34:41,490
can just like an Alice Cavender if you

00:34:40,049 --> 00:34:44,250
can tell it how big you want it to be

00:34:41,490 --> 00:34:45,809
and if you look in the pasta codebase we

00:34:44,250 --> 00:34:48,480
have an auto scale that inspects the

00:34:45,809 --> 00:34:50,970
Mesa statistics and expands and

00:34:48,480 --> 00:34:52,559
contracts at will because we already

00:34:50,970 --> 00:34:54,839
have the meinen spirit of stuff or at

00:34:52,559 --> 00:34:56,549
least until recently we had it on it

00:34:54,839 --> 00:34:58,529
wasn't we didn't really care whether it

00:34:56,549 --> 00:35:00,660
was scaling down because our autoscaler

00:34:58,529 --> 00:35:02,490
decided to scale it down or because

00:35:00,660 --> 00:35:04,260
Amazon decided that we ran out of spot

00:35:02,490 --> 00:35:05,700
you know we got outbid you know this

00:35:04,260 --> 00:35:07,589
kind of same kind of event so we were

00:35:05,700 --> 00:35:09,300
lucky to reuse that work so whether

00:35:07,589 --> 00:35:11,040
we're scaling our cluster in

00:35:09,300 --> 00:35:14,100
we're getting outbid it's no big deal

00:35:11,040 --> 00:35:16,590
our autoscaler has some special sauce

00:35:14,100 --> 00:35:19,230
though we pick the instance type that

00:35:16,590 --> 00:35:20,970
that has the least tasks on it so we

00:35:19,230 --> 00:35:22,980
kind of we have a sorting function that

00:35:20,970 --> 00:35:24,480
sorts things that are either not a maysa

00:35:22,980 --> 00:35:25,890
in the first place because they fail the

00:35:24,480 --> 00:35:27,600
bootstrap maybe they don't have any

00:35:25,890 --> 00:35:29,370
tasks so we try to kill those up early

00:35:27,600 --> 00:35:30,990
to keep to preserve those things that

00:35:29,370 --> 00:35:33,660
have long running tasks you know just do

00:35:30,990 --> 00:35:35,400
the best we can okay do you exclude most

00:35:33,660 --> 00:35:37,530
unstable instance types from your fleets

00:35:35,400 --> 00:35:40,560
do you make some survey for example yeah

00:35:37,530 --> 00:35:43,710
we we try to scale we try to adjust our

00:35:40,560 --> 00:35:45,720
spot a request to to be able to run the

00:35:43,710 --> 00:35:47,400
largest thing that we try to run so our

00:35:45,720 --> 00:35:49,890
largest application happens to be our

00:35:47,400 --> 00:35:52,290
big website so the smallest instance

00:35:49,890 --> 00:35:55,260
type that we find acceptable is the kind

00:35:52,290 --> 00:35:56,460
that can run the website but yet for

00:35:55,260 --> 00:35:58,080
everyone have to make their own choices

00:35:56,460 --> 00:36:01,230
about what instance types are acceptable

00:35:58,080 --> 00:36:04,320
to run on their infrastructure what is

00:36:01,230 --> 00:36:07,830
average real a lot of your machines in

00:36:04,320 --> 00:36:10,980
competitive reserve with resources I'm

00:36:07,830 --> 00:36:13,050
sorry okay yeah what is average lot of

00:36:10,980 --> 00:36:16,590
your machines machines in spots with

00:36:13,050 --> 00:36:18,090
real onion I'm sorry I having trouble

00:36:16,590 --> 00:36:20,040
understanding of the accent and okay but

00:36:18,090 --> 00:36:22,380
do you mind we're out of time let's talk

00:36:20,040 --> 00:36:24,650
offline and we can discuss porn thank

00:36:22,380 --> 00:36:24,650
your time

00:36:25,080 --> 00:36:27,449

YouTube URL: https://www.youtube.com/watch?v=z9hNVDgasys


