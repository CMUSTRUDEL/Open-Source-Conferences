Title: Multi-Tenancy in Apache Mesos
Publication date: 2017-09-18
Playlist: MesosCon North America 2017
Description: 
	Multi-Tenancy in Apache Mesos - Ben Mahler, Mesosphere & Jay Guo, IBM

This talk will provide an overview of multi-tenancy in Apache Mesos, including recent work that was done to enable multi-tenant frameworks (with multi-role framework support and support for hierarchical roles). Topics include multi-tenant resource management, isolation, security, and other multi-tenancy concerns. This talk will also cover some upcoming work.

About 

Jay Guo
Software Engineer, IBM China
I'm working at IBM China as software engineer. I contribute Apache Mesos and HyperLedger Fabric, and I have given three talks on MesosCon during last two years.

Ben Mahler
Captions: 
	00:00:00,949 --> 00:00:08,309
hello everybody good morning all right

00:00:05,359 --> 00:00:11,700
so we're gonna kick off the first talk

00:00:08,309 --> 00:00:15,929
today in the mazes internals track will

00:00:11,700 --> 00:00:18,090
be track least for today so today for

00:00:15,929 --> 00:00:19,830
the first talk we have Jay go from a PI

00:00:18,090 --> 00:00:21,330
B M and Ben Maller from mesosphere

00:00:19,830 --> 00:00:22,920
they're gonna be talking about

00:00:21,330 --> 00:00:25,380
hierarchical roles and multi-role

00:00:22,920 --> 00:00:26,670
frameworks and Apache measles going to

00:00:25,380 --> 00:00:28,560
the details about the multi-tenancy

00:00:26,670 --> 00:00:30,230
features that were added recently added

00:00:28,560 --> 00:00:34,820
as well as covering some of the future

00:00:30,230 --> 00:00:34,820
features that are coming up all right

00:00:48,500 --> 00:00:53,270
how about now okay there you go all

00:00:51,800 --> 00:00:57,650
right so we're gonna talk about multi

00:00:53,270 --> 00:00:58,760
tanzy okay so obviously what's what's

00:00:57,650 --> 00:01:01,670
the first thing when you talk about what

00:00:58,760 --> 00:01:03,500
is multi tanzy pretty straightforward

00:01:01,670 --> 00:01:05,720
it's this idea of having multiple

00:01:03,500 --> 00:01:08,450
tenants share a single software system

00:01:05,720 --> 00:01:10,850
so an example this is you might have

00:01:08,450 --> 00:01:12,950
something like AWS or Google Cloud where

00:01:10,850 --> 00:01:16,160
you have two different companies Coke

00:01:12,950 --> 00:01:19,100
and Pepsi sharing that same system it's

00:01:16,160 --> 00:01:20,899
at that same platform if you're a single

00:01:19,100 --> 00:01:22,850
company you might have a private cloud

00:01:20,899 --> 00:01:24,490
where you have let's say the engineering

00:01:22,850 --> 00:01:26,869
department and the finance department

00:01:24,490 --> 00:01:28,250
sharing the same platform and maybe they

00:01:26,869 --> 00:01:30,410
they don't want to see each other and

00:01:28,250 --> 00:01:33,680
things like that I think the more

00:01:30,410 --> 00:01:36,340
interesting question here is this

00:01:33,680 --> 00:01:38,690
definition of a tenant

00:01:36,340 --> 00:01:40,399
sometimes when multi-tenancy discussions

00:01:38,690 --> 00:01:44,060
happen people are specifically referring

00:01:40,399 --> 00:01:47,600
to you know one specific type of tenant

00:01:44,060 --> 00:01:49,310
like a company but you know how we want

00:01:47,600 --> 00:01:50,690
to think about a tenant is really it

00:01:49,310 --> 00:01:53,000
could be any of these things it could be

00:01:50,690 --> 00:01:54,619
a company it could be different business

00:01:53,000 --> 00:01:57,640
units within a company it could be teams

00:01:54,619 --> 00:02:01,189
or it could be individual employees and

00:01:57,640 --> 00:02:03,229
so this notion of tenancy is really

00:02:01,189 --> 00:02:05,420
hierarchical right you have employees

00:02:03,229 --> 00:02:07,189
they work within teams they work within

00:02:05,420 --> 00:02:09,799
departments within organizations within

00:02:07,189 --> 00:02:14,930
companies and so we want to think of all

00:02:09,799 --> 00:02:17,299
of these things as being a tenant so

00:02:14,930 --> 00:02:21,100
right now in in meso s-- what we target

00:02:17,299 --> 00:02:24,140
with multi-tenancy is primarily using a

00:02:21,100 --> 00:02:26,269
single mesas cluster within a single

00:02:24,140 --> 00:02:28,250
company so that means you know you're

00:02:26,269 --> 00:02:30,680
sharing a mesas cluster across teams in

00:02:28,250 --> 00:02:33,890
the company or across employees and and

00:02:30,680 --> 00:02:35,630
so on for different companies at the

00:02:33,890 --> 00:02:37,670
current time we would recommend using

00:02:35,630 --> 00:02:40,360
different mesas clusters and that's

00:02:37,670 --> 00:02:44,810
because in that that use case requires

00:02:40,360 --> 00:02:46,790
extremely strong security potentially

00:02:44,810 --> 00:02:50,750
stronger isolation if you're not okay

00:02:46,790 --> 00:02:53,209
with container level isolation you need

00:02:50,750 --> 00:02:55,010
really good prevention of denial of

00:02:53,209 --> 00:02:58,310
service attacks you don't want one

00:02:55,010 --> 00:03:00,960
company being able to affect service

00:02:58,310 --> 00:03:02,640
towards another company

00:03:00,960 --> 00:03:04,470
and you have to there's compliance

00:03:02,640 --> 00:03:07,620
things to deal with as well so it's a

00:03:04,470 --> 00:03:09,300
really hard problem and we don't

00:03:07,620 --> 00:03:12,360
recommend it right now but we will make

00:03:09,300 --> 00:03:16,320
progress towards sharing across

00:03:12,360 --> 00:03:18,720
companies in the future okay so what are

00:03:16,320 --> 00:03:22,680
some needs for multi tanzy of course we

00:03:18,720 --> 00:03:24,360
need security isolation not just when it

00:03:22,680 --> 00:03:26,910
comes to making sure that different

00:03:24,360 --> 00:03:30,870
tenants don't land on the same host or

00:03:26,910 --> 00:03:33,800
are using containers or VMs but also in

00:03:30,870 --> 00:03:36,030
terms of the API right you might want

00:03:33,800 --> 00:03:39,750
engineering to not be able to see sales

00:03:36,030 --> 00:03:41,010
depending on what you're doing and so

00:03:39,750 --> 00:03:44,160
you need good authorization and

00:03:41,010 --> 00:03:45,930
authentication to do that when you're

00:03:44,160 --> 00:03:47,850
isolating resources on the host you know

00:03:45,930 --> 00:03:49,530
not only do you need to do security

00:03:47,850 --> 00:03:51,180
isolation to make sure that the file

00:03:49,530 --> 00:03:53,340
systems isolated and the network and

00:03:51,180 --> 00:03:54,960
storage are also isolated but you need

00:03:53,340 --> 00:03:57,270
performance isolation as well you want

00:03:54,960 --> 00:03:58,710
to make sure that one tenant can't

00:03:57,270 --> 00:04:00,090
negatively affect the performance of

00:03:58,710 --> 00:04:03,650
another tenant and that goes for all the

00:04:00,090 --> 00:04:06,660
resources that that exists on the host

00:04:03,650 --> 00:04:08,970
another thing you need is this notion of

00:04:06,660 --> 00:04:11,760
guarantees about how many resources you

00:04:08,970 --> 00:04:13,290
can get in a cluster we do that with

00:04:11,760 --> 00:04:15,780
things like quota to give you a

00:04:13,290 --> 00:04:18,299
guaranteed amount and we have fair

00:04:15,780 --> 00:04:20,700
sharing when you want to go over your

00:04:18,299 --> 00:04:23,630
quota and we might introduce things like

00:04:20,700 --> 00:04:25,800
priorities and so on in the future and

00:04:23,630 --> 00:04:27,510
then you also need really good fault

00:04:25,800 --> 00:04:29,100
isolation right if one tenant is

00:04:27,510 --> 00:04:30,630
inducing a failure in some way that

00:04:29,100 --> 00:04:36,780
failure shouldn't cascade into other

00:04:30,630 --> 00:04:38,760
tenants okay so there's also some

00:04:36,780 --> 00:04:40,110
end-to-end platform needs for

00:04:38,760 --> 00:04:42,750
multi-tenancy right if you're running a

00:04:40,110 --> 00:04:44,940
scheduler on maysa either that scheduler

00:04:42,750 --> 00:04:47,460
itself needs to be multi tenant or you

00:04:44,940 --> 00:04:51,780
need some software that helps tenants

00:04:47,460 --> 00:04:53,370
get as appurtenant scheduler right you

00:04:51,780 --> 00:04:55,850
also need software to manage these

00:04:53,370 --> 00:04:58,710
tenants that exists in your platform and

00:04:55,850 --> 00:05:00,510
companies have existing LDAP setups that

00:04:58,710 --> 00:05:03,300
you might need to integrate with so

00:05:00,510 --> 00:05:04,410
there's software needed for that and

00:05:03,300 --> 00:05:07,860
then for compliance you might need

00:05:04,410 --> 00:05:09,000
things like audit logging and if you're

00:05:07,860 --> 00:05:10,410
building a platform you might want to

00:05:09,000 --> 00:05:12,140
charge those tens for how much they're

00:05:10,410 --> 00:05:15,470
using

00:05:12,140 --> 00:05:17,420
and there might be things that you need

00:05:15,470 --> 00:05:19,130
that maysa might not tackle like for

00:05:17,420 --> 00:05:20,600
example network isolation is often done

00:05:19,130 --> 00:05:23,210
with software-defined networking and

00:05:20,600 --> 00:05:26,270
that's usually provided by you know a

00:05:23,210 --> 00:05:27,560
vendor or something like that so a lot

00:05:26,270 --> 00:05:28,220
of these things that you need for

00:05:27,560 --> 00:05:29,900
multi-tenancy

00:05:28,220 --> 00:05:32,090
in a platform are kind of out of the

00:05:29,900 --> 00:05:34,130
scope for maces mace this is one piece

00:05:32,090 --> 00:05:36,800
of this but you kind of need an end end

00:05:34,130 --> 00:05:38,540
platform solution like something you can

00:05:36,800 --> 00:05:43,520
build in-house or an existing one like

00:05:38,540 --> 00:05:46,010
DCOs ok so we're gonna talk a little bit

00:05:43,520 --> 00:05:47,240
about a little more in detail about what

00:05:46,010 --> 00:05:50,930
exists for multi-tenancy in Mesa pose

00:05:47,240 --> 00:05:53,120
today so just as a reminder the vision

00:05:50,930 --> 00:05:55,010
for from Asus is that you know it's this

00:05:53,120 --> 00:05:57,560
kernel of a data center operating system

00:05:55,010 --> 00:06:00,320
and so one of its core responsibilities

00:05:57,560 --> 00:06:01,520
is resource management so a resource

00:06:00,320 --> 00:06:03,890
management means a few things it means

00:06:01,520 --> 00:06:05,120
sharing resources amongst tenants giving

00:06:03,890 --> 00:06:07,670
guarantees to those tenants about how

00:06:05,120 --> 00:06:09,980
many resources they can have providing

00:06:07,670 --> 00:06:12,050
isolation of those resources and then

00:06:09,980 --> 00:06:13,520
providing accounting so that you can

00:06:12,050 --> 00:06:17,180
tell on appurtenant basis how much

00:06:13,520 --> 00:06:19,490
people are using so as a terminology

00:06:17,180 --> 00:06:21,710
thing in Mesa so we don't have the word

00:06:19,490 --> 00:06:23,540
tenant we don't use that word what

00:06:21,710 --> 00:06:26,300
exists in meso is this concept of a role

00:06:23,540 --> 00:06:28,730
and that represents a consumer of a

00:06:26,300 --> 00:06:30,050
resource and so that's the mapping here

00:06:28,730 --> 00:06:33,470
when you think about multi-tenancy and

00:06:30,050 --> 00:06:35,000
meso says we use these roles to capture

00:06:33,470 --> 00:06:39,950
you know whether it's a business unit a

00:06:35,000 --> 00:06:41,480
team and so on ok so what are some

00:06:39,950 --> 00:06:43,130
features that exist today well I talked

00:06:41,480 --> 00:06:46,820
about roles and with roles you can get

00:06:43,130 --> 00:06:48,740
resource guarantees there's two things

00:06:46,820 --> 00:06:51,040
in place today one is fair sharing with

00:06:48,740 --> 00:06:53,450
the RF and the other thing is quota

00:06:51,040 --> 00:06:55,280
quota gives you an absolute amount of

00:06:53,450 --> 00:06:58,520
guarantee and fair sharing is relative

00:06:55,280 --> 00:07:00,110
and we have resource accounting to make

00:06:58,520 --> 00:07:01,810
sure that you can track how much each

00:07:00,110 --> 00:07:03,890
role is using in the system

00:07:01,810 --> 00:07:06,680
then we have a lot of security isolation

00:07:03,890 --> 00:07:09,440
and performance isolation I won't talk

00:07:06,680 --> 00:07:11,150
about them here but you know that's kind

00:07:09,440 --> 00:07:13,190
of if you want to learn more about that

00:07:11,150 --> 00:07:15,760
you can attend a containerization

00:07:13,190 --> 00:07:15,760
related talk

00:07:16,210 --> 00:07:21,010
and then we have authentication and

00:07:18,790 --> 00:07:23,860
built-in authorization as well so this

00:07:21,010 --> 00:07:25,510
stuff is built-in but it's also

00:07:23,860 --> 00:07:27,610
customizable so if you want to say

00:07:25,510 --> 00:07:29,169
integrate with a Kerberos system that

00:07:27,610 --> 00:07:34,570
you have you could build an integration

00:07:29,169 --> 00:07:37,480
to that okay so Jay is gonna highlight

00:07:34,570 --> 00:07:39,400
two features for multi-tenancy that we

00:07:37,480 --> 00:07:43,900
recently worked on so I'll pass it to

00:07:39,400 --> 00:07:45,690
him all right I'm gonna introduce these

00:07:43,900 --> 00:07:48,010
newly added feature like name only

00:07:45,690 --> 00:07:52,210
multi-role framework support in haiku

00:07:48,010 --> 00:07:55,030
for roles in more details and as Ben

00:07:52,210 --> 00:07:57,130
just introduced like we normally will

00:07:55,030 --> 00:07:59,530
have for example multiple teams sharing

00:07:57,130 --> 00:08:02,800
one marathon instance and that marathon

00:07:59,530 --> 00:08:04,660
subscribe with Maysles and these teams

00:08:02,800 --> 00:08:08,050
will launch all different application

00:08:04,660 --> 00:08:09,850
services using that marathon but from a

00:08:08,050 --> 00:08:12,130
user's point of view it's actually

00:08:09,850 --> 00:08:14,650
message doesn't know that these teams

00:08:12,130 --> 00:08:17,020
like because marathons subscribe with

00:08:14,650 --> 00:08:18,880
Maysles with only one role which we

00:08:17,020 --> 00:08:21,729
currently support in this case it's

00:08:18,880 --> 00:08:24,070
marathon and so mazes only knows that ok

00:08:21,729 --> 00:08:26,490
they are a jobs running under the role

00:08:24,070 --> 00:08:29,229
marathon but actually these teams are

00:08:26,490 --> 00:08:31,360
from and back-end reporting they are all

00:08:29,229 --> 00:08:34,390
launching different workload or

00:08:31,360 --> 00:08:38,320
applications so the problem with that is

00:08:34,390 --> 00:08:41,560
you can enforce the like quota or

00:08:38,320 --> 00:08:43,839
reservations using with these different

00:08:41,560 --> 00:08:46,570
teams like front-end back-end because

00:08:43,839 --> 00:08:48,880
may so simply it doesn't know about it I

00:08:46,570 --> 00:08:52,030
mean one solution to that would be you

00:08:48,880 --> 00:08:55,150
can launch like sync what like one

00:08:52,030 --> 00:08:57,880
marathon instance per team so that mesas

00:08:55,150 --> 00:09:00,580
can and they basically subscribe to

00:08:57,880 --> 00:09:03,240
mesas using different roles but

00:09:00,580 --> 00:09:06,130
obviously you don't want to do that for

00:09:03,240 --> 00:09:09,570
every team your organization and your

00:09:06,130 --> 00:09:12,400
adding I mean because tenon could be one

00:09:09,570 --> 00:09:15,160
department or but also can be one

00:09:12,400 --> 00:09:16,540
individual employee but obviously you

00:09:15,160 --> 00:09:21,730
don't want to do that for every single

00:09:16,540 --> 00:09:24,910
one tenant so what we want to do is you

00:09:21,730 --> 00:09:27,700
can subscribe a framework tomatoes with

00:09:24,910 --> 00:09:28,769
multi roles so that may sauce is aware

00:09:27,700 --> 00:09:31,079
of it and

00:09:28,769 --> 00:09:33,119
can allocate resources accordingly so

00:09:31,079 --> 00:09:36,029
different teams using that marathon a

00:09:33,119 --> 00:09:37,769
single instance of marathon and can be

00:09:36,029 --> 00:09:39,839
allocated with different resources so

00:09:37,769 --> 00:09:42,449
you can leverage like quota and

00:09:39,839 --> 00:09:46,410
reservations that associated to the

00:09:42,449 --> 00:09:50,069
roles and to make better decisions of

00:09:46,410 --> 00:09:53,670
the resource allocation and of course

00:09:50,069 --> 00:09:56,160
you we don't want to implement that in

00:09:53,670 --> 00:09:57,779
the scheduler which meaning you need to

00:09:56,160 --> 00:10:00,269
implement all these features in every

00:09:57,779 --> 00:10:02,790
single scheduler not only marathon but

00:10:00,269 --> 00:10:05,339
we want to have a unified implementation

00:10:02,790 --> 00:10:07,259
in Maysles to make such a decision so

00:10:05,339 --> 00:10:10,049
that's basically the basic idea behind

00:10:07,259 --> 00:10:12,420
the multi real framework support and for

00:10:10,049 --> 00:10:13,529
a hierarchical row support it's it's

00:10:12,420 --> 00:10:17,639
quite straightforward like an

00:10:13,529 --> 00:10:19,379
organization is often hierarchical so

00:10:17,639 --> 00:10:21,629
you don't really have from impact can

00:10:19,379 --> 00:10:23,850
report lead at the same level instead

00:10:21,629 --> 00:10:25,709
you will have for example front and then

00:10:23,850 --> 00:10:28,019
back end under the engineering

00:10:25,709 --> 00:10:30,269
department and reports and leads enter

00:10:28,019 --> 00:10:32,610
sales department and furthermore you

00:10:30,269 --> 00:10:34,259
probably will have like front-end

00:10:32,610 --> 00:10:37,829
running different workload like rails

00:10:34,259 --> 00:10:40,170
and UI and API login in back-end so you

00:10:37,829 --> 00:10:43,369
see this kind of hierarchical structure

00:10:40,170 --> 00:10:46,679
should be captured by the roles as well

00:10:43,369 --> 00:10:48,480
being that we want till oh we want

00:10:46,679 --> 00:10:51,329
schedulers to be able to subscribe with

00:10:48,480 --> 00:10:55,019
Maysles using this path like syntax so

00:10:51,329 --> 00:10:59,879
engineering / from n / UI we will depict

00:10:55,019 --> 00:11:04,170
the UI work well under this tree

00:10:59,879 --> 00:11:08,610
structure and when it comes to article

00:11:04,170 --> 00:11:11,639
role the DRF algorithm reservation quota

00:11:08,610 --> 00:11:15,929
may be slightly different than the flat

00:11:11,639 --> 00:11:19,259
ones for example of we want to enable

00:11:15,929 --> 00:11:21,929
this delegation meaning that if you

00:11:19,259 --> 00:11:24,569
allocate if you set a quota to the team

00:11:21,929 --> 00:11:27,779
engineering front-end and that team can

00:11:24,569 --> 00:11:32,100
be able to further subdivide the quota

00:11:27,779 --> 00:11:35,579
to the different workload for rails and

00:11:32,100 --> 00:11:39,389
UI so I want to split that quota and set

00:11:35,579 --> 00:11:42,390
quota for my sub teams further and also

00:11:39,389 --> 00:11:44,220
we want till do the authors

00:11:42,390 --> 00:11:47,670
in isolation for example I don't want

00:11:44,220 --> 00:11:51,630
front-end to see the siblings allocation

00:11:47,670 --> 00:11:54,030
being back hand in this case and again

00:11:51,630 --> 00:11:56,490
to combine this with the material

00:11:54,030 --> 00:11:58,380
support we want like Martha single

00:11:56,490 --> 00:12:01,620
instance of marathon to subscribe to

00:11:58,380 --> 00:12:04,410
different nodes in the tree being like

00:12:01,620 --> 00:12:06,990
all these different paths paths so that

00:12:04,410 --> 00:12:08,940
still in the the whole tree can use

00:12:06,990 --> 00:12:10,530
single instance for marathon but to

00:12:08,940 --> 00:12:12,840
manage all the resources allocated to

00:12:10,530 --> 00:12:15,360
the whole tree and the DRI

00:12:12,840 --> 00:12:17,250
the RF like it's kind of straightforward

00:12:15,360 --> 00:12:20,070
because previously it was flat so you

00:12:17,250 --> 00:12:23,520
just compute the fair share of every

00:12:20,070 --> 00:12:26,310
node and then sort them and allocate a

00:12:23,520 --> 00:12:29,040
new piece of resource to the a note with

00:12:26,310 --> 00:12:32,070
lowest share in the hierarchical

00:12:29,040 --> 00:12:35,100
structure you simply calculate fair

00:12:32,070 --> 00:12:37,740
share recursively at each level so given

00:12:35,100 --> 00:12:41,160
the resource allocation in this case we

00:12:37,740 --> 00:12:42,630
will calculate the fair share the result

00:12:41,160 --> 00:12:45,270
would be like this like an inch

00:12:42,630 --> 00:12:47,790
department will take like 20 percent of

00:12:45,270 --> 00:12:50,970
the resource comparing to the sales

00:12:47,790 --> 00:12:53,760
department and then you recurse further

00:12:50,970 --> 00:12:57,510
down to the inch front end and inch back

00:12:53,760 --> 00:13:00,330
hands which take like one-fifth and 4/5

00:12:57,510 --> 00:13:02,970
resources of inch department and then

00:13:00,330 --> 00:13:05,220
you recurse down like you find the node

00:13:02,970 --> 00:13:08,370
with lowest fresh air so in this case we

00:13:05,220 --> 00:13:10,320
go to ang first and then end front end

00:13:08,370 --> 00:13:13,170
so we will allocate the new piece of

00:13:10,320 --> 00:13:14,460
resource to that node so this is like

00:13:13,170 --> 00:13:16,020
this is quite straightforward when you

00:13:14,460 --> 00:13:19,710
come to the RF in the hierarchical

00:13:16,020 --> 00:13:23,940
manner and the hierarchical reservation

00:13:19,710 --> 00:13:27,450
will be like given such a such a tree

00:13:23,940 --> 00:13:30,680
and we said we reserve resources to end

00:13:27,450 --> 00:13:33,540
like 100 resources in this case and that

00:13:30,680 --> 00:13:36,330
reservation is actually shared in the

00:13:33,540 --> 00:13:37,850
tree so it's shared among ang ang front

00:13:36,330 --> 00:13:41,070
end and ang back end

00:13:37,850 --> 00:13:44,010
something like this and then we

00:13:41,070 --> 00:13:47,070
introduce the semantics of refinement so

00:13:44,010 --> 00:13:48,950
you can refine the when in front and

00:13:47,070 --> 00:13:51,660
receive the resources from the

00:13:48,950 --> 00:13:54,960
reservation of ang it can further refine

00:13:51,660 --> 00:13:55,340
it so basically call a reserve API to

00:13:54,960 --> 00:13:57,560
resist

00:13:55,340 --> 00:14:00,020
reserve that piece of resource to itself

00:13:57,560 --> 00:14:02,960
so that cannot be used by the back end

00:14:00,020 --> 00:14:05,570
as the simple sibling and when it's done

00:14:02,960 --> 00:14:08,570
with it you can just call unreserve API

00:14:05,570 --> 00:14:11,600
to return that resource to the inch

00:14:08,570 --> 00:14:14,030
which is a permit role and I want to

00:14:11,600 --> 00:14:16,970
emphasize that when you reserve a

00:14:14,030 --> 00:14:19,910
resource to Inge it's a shared among the

00:14:16,970 --> 00:14:22,880
subtree what does it mean basically for

00:14:19,910 --> 00:14:25,730
example you have a situation like this

00:14:22,880 --> 00:14:27,800
you have inch and you reserve resource

00:14:25,730 --> 00:14:30,860
100 to it and you have a framer X

00:14:27,800 --> 00:14:33,650
subscribing to it and subframe X well

00:14:30,860 --> 00:14:36,350
get all these 100 resources of course

00:14:33,650 --> 00:14:39,650
but then you decide to divide your and

00:14:36,350 --> 00:14:43,220
team further till and front end and inch

00:14:39,650 --> 00:14:47,210
back end and you subscribe frame Y from

00:14:43,220 --> 00:14:50,300
Z to these two newly added teams then

00:14:47,210 --> 00:14:53,120
you don't it's not guaranteed that from

00:14:50,300 --> 00:14:55,640
X is getting all these 100 resources

00:14:53,120 --> 00:14:58,670
anymore because one is shared among the

00:14:55,640 --> 00:15:02,090
subtree it's exactly X Y Z are sharing

00:14:58,670 --> 00:15:05,630
this reserved resources so it's so

00:15:02,090 --> 00:15:09,580
Pixley you don't get 104 X anymore but

00:15:05,630 --> 00:15:12,020
act one resists shared by X Y Z but

00:15:09,580 --> 00:15:14,210
normally you will have like we said

00:15:12,020 --> 00:15:16,100
before one single instance for marathon

00:15:14,210 --> 00:15:18,560
instance subscribing to all these

00:15:16,100 --> 00:15:21,830
different roles and get all this 100 and

00:15:18,560 --> 00:15:24,650
scheduled jobs based on their their

00:15:21,830 --> 00:15:27,770
roles so this is hierarchical

00:15:24,650 --> 00:15:30,860
reservation and the when it comes to a

00:15:27,770 --> 00:15:32,810
hierarchical quota will be a kind of

00:15:30,860 --> 00:15:35,750
similar to reservation you can set a

00:15:32,810 --> 00:15:41,630
quota to inch again that's shared among

00:15:35,750 --> 00:15:44,990
a sub tree like this and I want to again

00:15:41,630 --> 00:15:47,090
emphasize that you can dedicate quota

00:15:44,990 --> 00:15:51,830
it's like refinement but actually you

00:15:47,090 --> 00:15:56,210
set quota to accept several of inch so

00:15:51,830 --> 00:15:59,510
that guarantee is of dedicated to front

00:15:56,210 --> 00:16:01,730
end so the back end won't get you front

00:15:59,510 --> 00:16:04,400
end it's guaranteed to get 40 out of 100

00:16:01,730 --> 00:16:07,850
of the quota in the sub tree

00:16:04,400 --> 00:16:10,820
but this introduces the semantics that

00:16:07,850 --> 00:16:13,610
you should always set the quota to the

00:16:10,820 --> 00:16:16,220
parent role because that's shared among

00:16:13,610 --> 00:16:20,560
the whole subtree and then further you

00:16:16,220 --> 00:16:23,630
set quota to the several so basically

00:16:20,560 --> 00:16:29,270
this in the subtree the quota is 100 you

00:16:23,630 --> 00:16:31,730
cannot have the the some of the sub

00:16:29,270 --> 00:16:34,850
roles like 40 plus 70 you cannot that

00:16:31,730 --> 00:16:38,810
exceeding the quota of the parent role

00:16:34,850 --> 00:16:41,000
and therefore you should always set the

00:16:38,810 --> 00:16:44,960
quota for the parent role and then set

00:16:41,000 --> 00:16:46,670
quota to the child role so basically you

00:16:44,960 --> 00:16:49,490
cannot do this because quota is by

00:16:46,670 --> 00:16:51,470
default is zero and you shouldn't you

00:16:49,490 --> 00:16:53,840
can out it's it's this allowed to set

00:16:51,470 --> 00:16:58,280
quota to end front and before setting

00:16:53,840 --> 00:17:00,740
quota to end and similar to the

00:16:58,280 --> 00:17:03,710
reservation before if you have framer

00:17:00,740 --> 00:17:06,740
eggs subscribing to Ange first and it's

00:17:03,710 --> 00:17:09,860
guaranteed to get 100 quota resources

00:17:06,740 --> 00:17:14,360
and then you decide to add more sub

00:17:09,860 --> 00:17:16,730
teams to inch so you and then at this

00:17:14,360 --> 00:17:19,010
point it's not guaranteed anymore that X

00:17:16,730 --> 00:17:21,530
will get all the 100 resources because

00:17:19,010 --> 00:17:23,870
that's shared among subtree so X Y Z

00:17:21,530 --> 00:17:28,580
again we'll get the quota 100 resources

00:17:23,870 --> 00:17:30,110
and so to summarize it if you still want

00:17:28,580 --> 00:17:32,600
the old behavior like you want to

00:17:30,110 --> 00:17:34,670
guarantee some application to get all

00:17:32,600 --> 00:17:37,310
the like reserve the resources or quota

00:17:34,670 --> 00:17:40,880
resources you should always subscribe

00:17:37,310 --> 00:17:43,310
that framework to a leaf roll and set

00:17:40,880 --> 00:17:48,170
quota or reservation to the leaf roll

00:17:43,310 --> 00:17:51,140
and still to basically to get the same

00:17:48,170 --> 00:17:52,790
behavior as previously you did like to

00:17:51,140 --> 00:17:56,540
guarantee a certain amount of resources

00:17:52,790 --> 00:17:58,700
to that application and I'm gonna head

00:17:56,540 --> 00:18:05,870
over back to Ben to talk about the

00:17:58,700 --> 00:18:09,950
future work and roadmap all right so

00:18:05,870 --> 00:18:13,690
where is this stuff right now multi-role

00:18:09,950 --> 00:18:16,370
framework support shipped in 1.3 basis

00:18:13,690 --> 00:18:17,990
for hierarchical rolls it's still a work

00:18:16,370 --> 00:18:21,460
in progress we're playing to finish it

00:18:17,990 --> 00:18:24,490
in 1.5 and 1.4 some of the work is done

00:18:21,460 --> 00:18:26,679
but quota will not work as we showed

00:18:24,490 --> 00:18:30,399
just now so it's not recommended to use

00:18:26,679 --> 00:18:32,260
it and then you know after we finish

00:18:30,399 --> 00:18:34,330
this stuff we need to integrate this

00:18:32,260 --> 00:18:37,210
into multi-tenant frameworks like

00:18:34,330 --> 00:18:39,340
marathon or Aurora and so on and then

00:18:37,210 --> 00:18:42,909
you know any end-to-end solutions will

00:18:39,340 --> 00:18:45,850
need to integrate this stuff as well so

00:18:42,909 --> 00:18:50,580
I want to also talk about some upcoming

00:18:45,850 --> 00:18:54,100
work that is being worked on already and

00:18:50,580 --> 00:18:59,070
the first is revocation and then and the

00:18:54,100 --> 00:19:02,169
second one is a priority tiers okay so

00:18:59,070 --> 00:19:03,370
you know originally when you know in the

00:19:02,169 --> 00:19:06,340
past when we introduced resource

00:19:03,370 --> 00:19:09,909
allocation in maces what we did was we

00:19:06,340 --> 00:19:11,409
performed weighted DRF to fairly share

00:19:09,909 --> 00:19:13,600
the resources amongst all the tenants in

00:19:11,409 --> 00:19:16,450
the cluster and that's the only thing we

00:19:13,600 --> 00:19:17,740
did and we did this in a non revocable

00:19:16,450 --> 00:19:20,940
way which means we can't take these

00:19:17,740 --> 00:19:24,669
resources back once they're allocated

00:19:20,940 --> 00:19:27,190
and then later in time we introduced

00:19:24,669 --> 00:19:29,860
this notion of quota and what this did

00:19:27,190 --> 00:19:31,960
was it made our single-phase allocation

00:19:29,860 --> 00:19:34,480
become a two-phase allocation the first

00:19:31,960 --> 00:19:36,429
phase was well let's try to satisfy

00:19:34,480 --> 00:19:39,370
everyone's guarantees that we gave for

00:19:36,429 --> 00:19:41,940
quota and then with with what's left

00:19:39,370 --> 00:19:45,429
let's fairly share that as we did before

00:19:41,940 --> 00:19:47,770
and so one of the problems with this is

00:19:45,429 --> 00:19:49,659
that in order to guarantee everyone gets

00:19:47,770 --> 00:19:52,090
their quota we have to make sure that we

00:19:49,659 --> 00:19:54,520
leave enough room if they're not using

00:19:52,090 --> 00:19:56,080
their quota right now to satisfy it at a

00:19:54,520 --> 00:19:59,320
later point in time if they do want it

00:19:56,080 --> 00:20:01,270
and so this Headroom here is essentially

00:19:59,320 --> 00:20:03,250
unutilized and there's no way for us to

00:20:01,270 --> 00:20:06,460
give that out without breaking our quota

00:20:03,250 --> 00:20:10,059
guarantees that we told people so this

00:20:06,460 --> 00:20:13,600
hurts utilization and what we want to do

00:20:10,059 --> 00:20:17,760
to solve that is introduce this third

00:20:13,600 --> 00:20:20,049
phase of revocable fair sharing where

00:20:17,760 --> 00:20:22,529
what we do is we can allocate all

00:20:20,049 --> 00:20:25,029
unallocated resource as revocable and

00:20:22,529 --> 00:20:27,850
that lets us take those resources back

00:20:25,029 --> 00:20:29,940
if we need to give it for quota to

00:20:27,850 --> 00:20:32,770
someone ideally you know in retrospect

00:20:29,940 --> 00:20:34,510
what we had originally done was

00:20:32,770 --> 00:20:35,710
introduced just quota and revocable fair

00:20:34,510 --> 00:20:37,029
sharing but the

00:20:35,710 --> 00:20:39,850
middle layer here would serve as a

00:20:37,029 --> 00:20:42,159
backwards compatibility layer for people

00:20:39,850 --> 00:20:44,890
who expect the old behavior and we would

00:20:42,159 --> 00:20:46,809
allow operators to confine how much of

00:20:44,890 --> 00:20:48,870
this can happen or turn it off

00:20:46,809 --> 00:20:48,870
completely

00:20:50,880 --> 00:20:57,399
so that's revoke revocable resources

00:20:53,230 --> 00:20:59,260
that at a very high level and another

00:20:57,399 --> 00:21:02,409
thing that's been discussed is this

00:20:59,260 --> 00:21:04,450
notion of priority tiers so for priority

00:21:02,409 --> 00:21:07,059
tiers what this means is introducing

00:21:04,450 --> 00:21:10,059
essentially priorities in these

00:21:07,059 --> 00:21:12,250
particular allocation tiers so for

00:21:10,059 --> 00:21:15,580
revocable fair sharing what priorities

00:21:12,250 --> 00:21:18,279
means is that a higher priority tenant

00:21:15,580 --> 00:21:20,950
can revoke resources from a lower party

00:21:18,279 --> 00:21:23,169
ten whenever they like for quota

00:21:20,950 --> 00:21:26,020
since it's not revocable the only thing

00:21:23,169 --> 00:21:28,179
that priority gives you there is like

00:21:26,020 --> 00:21:30,070
first rights on the resources so if

00:21:28,179 --> 00:21:31,899
there's an outage and you need to get

00:21:30,070 --> 00:21:33,460
your core services up those higher

00:21:31,899 --> 00:21:35,559
priority services can get the resources

00:21:33,460 --> 00:21:38,529
first and stay running and the other

00:21:35,559 --> 00:21:42,700
lower priority quoted tenants will not

00:21:38,529 --> 00:21:46,390
get their resources so that's also

00:21:42,700 --> 00:21:48,850
priority tiers at a very high level and

00:21:46,390 --> 00:21:51,429
so just just a reminder you know

00:21:48,850 --> 00:21:54,070
multi-tenancy is is really a very

00:21:51,429 --> 00:21:56,679
multifaceted problem you really need an

00:21:54,070 --> 00:21:59,470
end and platform that's going to give

00:21:56,679 --> 00:22:01,419
you you know all the pieces of this

00:21:59,470 --> 00:22:02,649
puzzle that you need and maysa is just

00:22:01,419 --> 00:22:05,700
one core piece of that puzzle that

00:22:02,649 --> 00:22:08,049
provides the multi-tenancy primitives

00:22:05,700 --> 00:22:09,840
and that's that's all we have we just

00:22:08,049 --> 00:22:11,440
wanted to put this up here to thank

00:22:09,840 --> 00:22:13,750
contributors that have worked on this

00:22:11,440 --> 00:22:14,980
stuff so far looks like we have quite a

00:22:13,750 --> 00:22:19,659
bit of time so if you guys have

00:22:14,980 --> 00:22:26,020
questions we can take those I guess I'll

00:22:19,659 --> 00:22:29,500
run this microphone around all right

00:22:26,020 --> 00:22:31,710
I'll repeat it so it's on the stream I

00:22:29,500 --> 00:22:31,710
guess

00:22:36,230 --> 00:22:40,260
okay the question was do I know which

00:22:38,610 --> 00:22:42,390
version of marathon or DCs support

00:22:40,260 --> 00:22:43,830
multi-role it's none of them do right

00:22:42,390 --> 00:22:47,460
now it's being worked on at the current

00:22:43,830 --> 00:22:50,309
time so it's possible the next release

00:22:47,460 --> 00:23:20,309
will happen I'm not sure but it's it's

00:22:50,309 --> 00:23:22,290
still being worked on yeah so the

00:23:20,309 --> 00:23:24,750
question was how to transition to using

00:23:22,290 --> 00:23:26,640
higher core role as part of the

00:23:24,750 --> 00:23:28,440
multi-role work we also allowed

00:23:26,640 --> 00:23:30,240
frameworks to update their set of roles

00:23:28,440 --> 00:23:33,179
at any point in time currently you have

00:23:30,240 --> 00:23:35,160
to risa but we'll also add potentially a

00:23:33,179 --> 00:23:39,080
call so you can do this without Reese

00:23:35,160 --> 00:23:39,080
absque wrapping to maysa yeah

00:23:52,830 --> 00:23:55,340
yeah

00:24:08,590 --> 00:24:13,669
so so the question is about this non

00:24:12,260 --> 00:24:19,100
revocable head room that I mentioned

00:24:13,669 --> 00:24:21,470
I'll go back to it so if I drew a line

00:24:19,100 --> 00:24:23,419
now you can't see my mouse of course if

00:24:21,470 --> 00:24:26,630
I you know this dotted line at the top

00:24:23,419 --> 00:24:28,400
here of the of the head room is the sum

00:24:26,630 --> 00:24:30,260
total of all the guarantees of quota

00:24:28,400 --> 00:24:32,450
that we that we have in the cluster and

00:24:30,260 --> 00:24:34,760
this middle line here is how much people

00:24:32,450 --> 00:24:36,770
are actually using of their allocated of

00:24:34,760 --> 00:24:40,429
their quota right now so if I asked for

00:24:36,770 --> 00:24:42,700
10 there would be 10 total here and if I

00:24:40,429 --> 00:24:46,010
only used five there'd be an extra five

00:24:42,700 --> 00:24:48,049
that is left unused because we need to

00:24:46,010 --> 00:24:50,630
make sure that if I later want that

00:24:48,049 --> 00:24:54,559
extra five that I got a guarantee for I

00:24:50,630 --> 00:24:57,429
can get it does that make sense as I

00:24:54,559 --> 00:24:57,429
answer your question or

00:25:23,240 --> 00:25:28,760
okay we can chat after - you have more

00:25:26,580 --> 00:25:28,760
questions

00:25:43,889 --> 00:25:49,619
the question was do I have any examples

00:25:45,419 --> 00:25:51,089
of of quota and priorities definitely

00:25:49,619 --> 00:25:52,589
not four priorities that there's no

00:25:51,089 --> 00:25:55,859
design at the current time there's only

00:25:52,589 --> 00:25:58,469
been discussions there does there's a

00:25:55,859 --> 00:26:04,559
design being worked on for revocation as

00:25:58,469 --> 00:26:05,999
well and then for quota the design I

00:26:04,559 --> 00:26:09,839
think Michael is actually working on

00:26:05,999 --> 00:26:13,049
that so I don't know if we have examples

00:26:09,839 --> 00:26:15,329
right now but there's gonna be a design

00:26:13,049 --> 00:26:36,959
published within the next week or so for

00:26:15,329 --> 00:26:39,690
the quota part yeah right okay we did

00:26:36,959 --> 00:26:42,569
that so the question was can can we

00:26:39,690 --> 00:26:45,719
update the UI to show resource usage by

00:26:42,569 --> 00:26:47,729
role as part of the multi-role work we

00:26:45,719 --> 00:26:50,759
did update it so I don't know if you're

00:26:47,729 --> 00:26:52,769
running the latest version or not but

00:26:50,759 --> 00:26:54,449
yeah that's the plan is to display this

00:26:52,769 --> 00:26:57,269
stuff there's a new roles tab in the UI

00:26:54,449 --> 00:26:58,679
where you can see a breakdown per role

00:26:57,269 --> 00:27:04,259
of how much is allocated what their

00:26:58,679 --> 00:27:05,759
quota is and so on that is in it's

00:27:04,259 --> 00:27:13,409
probably 1.4

00:27:05,759 --> 00:27:16,639
Oh which is not yet released yeah but

00:27:13,409 --> 00:27:16,639
it's it's almost released

00:27:28,340 --> 00:27:33,350
question is what's the timeline for

00:27:30,750 --> 00:27:35,880
revocation and priority tiers

00:27:33,350 --> 00:27:39,299
there's no timeline for priority tiers

00:27:35,880 --> 00:27:41,010
the timeline for revocation I would say

00:27:39,299 --> 00:27:44,669
is I mean the design is being worked on

00:27:41,010 --> 00:27:46,980
right now 1.5 will be in two months is

00:27:44,669 --> 00:27:48,450
that correct yeah so that will be a

00:27:46,980 --> 00:27:54,539
little tight I think it might be maybe

00:27:48,450 --> 00:27:57,500
1.6 or something if I had to guess how

00:27:54,539 --> 00:28:02,419
grovyle quota I think will be 1.5 I

00:27:57,500 --> 00:28:02,419
would should be yeah

00:28:19,720 --> 00:28:24,179
sure do you want to do it or do me too

00:28:26,220 --> 00:28:32,279
so the question was essentially just to

00:28:28,570 --> 00:28:36,309
clarify a little bit about how this

00:28:32,279 --> 00:28:38,769
hierarchical reservations work and yeah

00:28:36,309 --> 00:28:42,129
so all I can just reiterate what Jay

00:28:38,769 --> 00:28:46,360
said and and make sure that you

00:28:42,129 --> 00:28:48,190
understand so previously I wouldn't have

00:28:46,360 --> 00:28:50,769
these children here right I would just

00:28:48,190 --> 00:28:53,649
have an engine edge and so when I made a

00:28:50,769 --> 00:28:56,259
reservation to edge of course only the

00:28:53,649 --> 00:28:57,730
end rule gets to use that now when you

00:28:56,259 --> 00:29:00,779
make a reservation and you're just

00:28:57,730 --> 00:29:04,179
saying that the entire edge tree is

00:29:00,779 --> 00:29:06,070
reserved 100 resources so we'll make

00:29:04,179 --> 00:29:07,509
sure maces we'll make sure that 100

00:29:06,070 --> 00:29:08,980
resources goes to that tree

00:29:07,509 --> 00:29:11,919
but those researchers are going to be

00:29:08,980 --> 00:29:13,259
shared amongst the tenants and amongst

00:29:11,919 --> 00:29:17,470
the different roles in that tree

00:29:13,259 --> 00:29:20,169
now I could I could refine that

00:29:17,470 --> 00:29:21,970
reservation I could be and front-end and

00:29:20,169 --> 00:29:24,940
I could get some of it and I could

00:29:21,970 --> 00:29:27,940
further refine it to specialize it to be

00:29:24,940 --> 00:29:30,730
only French front end that's this notion

00:29:27,940 --> 00:29:32,289
of reservation refinement so I could

00:29:30,730 --> 00:29:33,940
guarantee that like ok I got some of it

00:29:32,289 --> 00:29:36,429
and now I'm binding it to me so that it

00:29:33,940 --> 00:29:38,049
can't be shared with all the rest of the

00:29:36,429 --> 00:29:41,019
entry right now anymore

00:29:38,049 --> 00:29:44,289
and if I unbind that it'll go back to

00:29:41,019 --> 00:29:50,559
edge I see you nodding so I guess I'm

00:29:44,289 --> 00:29:58,389
making sense so far and then what else

00:29:50,559 --> 00:30:00,750
to keep in mind yeah I think does that

00:29:58,389 --> 00:30:00,750
is that

00:30:02,160 --> 00:30:09,640
Yeah right suit yeah so in this case

00:30:08,230 --> 00:30:12,760
like if you had something that you

00:30:09,640 --> 00:30:14,890
wanted to run at end still if that's

00:30:12,760 --> 00:30:16,740
something you want to do we would

00:30:14,890 --> 00:30:21,760
recommend that you run it at edge slash

00:30:16,740 --> 00:30:24,190
default or and slash whatever you know a

00:30:21,760 --> 00:30:26,680
specific role to make sure that you can

00:30:24,190 --> 00:30:31,930
bind it to that thing and it can't go to

00:30:26,680 --> 00:30:33,580
other rules um you don't have to reserve

00:30:31,930 --> 00:30:35,800
to the parent in this picture you could

00:30:33,580 --> 00:30:39,040
reserve it directly to your leaf roll

00:30:35,800 --> 00:30:41,410
but if let's say an operator said I want

00:30:39,040 --> 00:30:43,650
to make sure that engineering gets this

00:30:41,410 --> 00:30:46,480
whole machine by reserving the resources

00:30:43,650 --> 00:30:48,490
like let's say you have a public machine

00:30:46,480 --> 00:30:50,500
right it's exposed to a public network

00:30:48,490 --> 00:30:53,440
and you want to reserve that for only

00:30:50,500 --> 00:30:55,420
the public network things you could do

00:30:53,440 --> 00:30:57,070
that and it's then shared amongst all

00:30:55,420 --> 00:30:59,830
the public network things and they can

00:30:57,070 --> 00:31:01,630
reserve portions of it is that it that

00:30:59,830 --> 00:31:05,430
that's kind of one use case that you can

00:31:01,630 --> 00:31:05,430
imagine yeah

00:31:46,980 --> 00:32:02,200
yep yeah I think to kind of add an

00:31:59,620 --> 00:32:06,160
additional point to what Jay said is you

00:32:02,200 --> 00:32:07,870
know if you want to use if you want to

00:32:06,160 --> 00:32:09,580
use reserved resources and you are

00:32:07,870 --> 00:32:12,690
expecting those to go back to you

00:32:09,580 --> 00:32:15,220
you should refine it to your beef roll

00:32:12,690 --> 00:32:17,440
so in this case like if I'm framework

00:32:15,220 --> 00:32:19,210
why and I get some of this engineering

00:32:17,440 --> 00:32:20,910
resources but I know that I I'm running

00:32:19,210 --> 00:32:22,960
an engineering front-end thing I

00:32:20,910 --> 00:32:24,250
shouldn't assume that those engineering

00:32:22,960 --> 00:32:26,020
resources are gonna always be

00:32:24,250 --> 00:32:27,940
reallocated to my engineering front-end

00:32:26,020 --> 00:32:31,330
thing I should refine that reservation

00:32:27,940 --> 00:32:34,440
and make sure that it's guaranteed to

00:32:31,330 --> 00:32:34,440
come back to my leaf roll

00:32:48,580 --> 00:32:56,269
yeah yeah I mean we definitely looked at

00:32:54,110 --> 00:32:57,830
both ways of doing it the disadvantage

00:32:56,269 --> 00:33:00,350
of the other way of doing it we're like

00:32:57,830 --> 00:33:02,720
it's bound to only end here is that you

00:33:00,350 --> 00:33:05,119
need to two kinds of reservations you

00:33:02,720 --> 00:33:06,590
need one flavor which is a tree-like

00:33:05,119 --> 00:33:09,860
reservation and you need another flavor

00:33:06,590 --> 00:33:12,679
which is bound to that internal node in

00:33:09,860 --> 00:33:14,029
this tree and so I think when we were

00:33:12,679 --> 00:33:15,919
designing it we wanted to just simplify

00:33:14,029 --> 00:33:18,200
that and say that all reservations are

00:33:15,919 --> 00:33:22,070
bound to the entire subtree that they

00:33:18,200 --> 00:33:23,419
are made on and so of course what that

00:33:22,070 --> 00:33:25,369
means is we have to tell people use a

00:33:23,419 --> 00:33:28,700
leaf roll if you want to make sure that

00:33:25,369 --> 00:33:32,470
it's it's you know guaranteed to that

00:33:28,700 --> 00:33:32,470
particular tenant

00:33:48,420 --> 00:33:52,680
yeah so the the question was is a

00:33:50,670 --> 00:33:54,480
reservation tied only like what a single

00:33:52,680 --> 00:33:56,880
resource like CPU or can you make a

00:33:54,480 --> 00:33:58,730
reservation to multiple resources yeah

00:33:56,880 --> 00:34:01,320
so a reservation is on a bag of

00:33:58,730 --> 00:34:04,740
resources you can it can be a collection

00:34:01,320 --> 00:34:13,380
of any particular resources together yes

00:34:04,740 --> 00:34:15,090
oh this is 100 units of some resource of

00:34:13,380 --> 00:34:17,040
course in reality this is going to be a

00:34:15,090 --> 00:34:19,380
multi-dimensional reservation it's going

00:34:17,040 --> 00:34:22,770
to say hundred or like one CPU two gigs

00:34:19,380 --> 00:34:27,330
of memory ten gigs of disk maybe these

00:34:22,770 --> 00:34:28,500
may be these ports that would be a

00:34:27,330 --> 00:34:30,659
single reservation which is on a

00:34:28,500 --> 00:34:32,850
particular agent and there could be many

00:34:30,659 --> 00:34:35,370
of these across the agents so keep in

00:34:32,850 --> 00:34:38,909
mind that a reservation is bound to one

00:34:35,370 --> 00:34:41,010
agent it identifies exactly these

00:34:38,909 --> 00:34:44,909
resources on this agent whereas quota is

00:34:41,010 --> 00:34:46,380
globally I need this amount that's the

00:34:44,909 --> 00:34:48,710
distinction between a reservation and

00:34:46,380 --> 00:34:48,710
quota

00:35:28,239 --> 00:35:39,619
yep yeah so this you know the reality of

00:35:37,039 --> 00:35:42,739
this picture today is that if you're a

00:35:39,619 --> 00:35:45,710
tenant in phase one you're not going to

00:35:42,739 --> 00:35:50,989
get any resources in Phase two and vice

00:35:45,710 --> 00:35:53,029
versa so that was because we didn't

00:35:50,989 --> 00:35:55,059
allow this that was because the

00:35:53,029 --> 00:35:57,769
intention was to move towards this model

00:35:55,059 --> 00:36:03,160
where to burst above quota you had to

00:35:57,769 --> 00:36:03,160
use revocable resources

00:36:15,870 --> 00:36:21,580
yeah so in this we might want to allow

00:36:19,690 --> 00:36:24,160
in this picture here is exactly what you

00:36:21,580 --> 00:36:26,200
said we're like we might allow a tenant

00:36:24,160 --> 00:36:29,470
to burst over their quota using non

00:36:26,200 --> 00:36:30,910
revocable resources but the current

00:36:29,470 --> 00:36:32,950
implementation doesn't allow that so

00:36:30,910 --> 00:36:47,500
that might be something that we allow in

00:36:32,950 --> 00:36:49,240
the future when we do this work I don't

00:36:47,500 --> 00:36:50,740
I don't the question was do we have to

00:36:49,240 --> 00:36:52,840
do that after we do a revocable by

00:36:50,740 --> 00:36:53,830
default I don't think so no but it's

00:36:52,840 --> 00:37:04,480
just that's what the current

00:36:53,830 --> 00:37:07,090
implementation is yeah I think it's we

00:37:04,480 --> 00:37:11,020
we could do that today we just we also

00:37:07,090 --> 00:37:14,530
need to make sure that we don't we don't

00:37:11,020 --> 00:37:16,150
like the difficulty there is today if I

00:37:14,530 --> 00:37:19,990
get non-local resources I don't know if

00:37:16,150 --> 00:37:23,290
it's from my quota or from the fair

00:37:19,990 --> 00:37:24,550
sharing that's happening and so we want

00:37:23,290 --> 00:37:26,980
to improve that as well we want to be

00:37:24,550 --> 00:37:28,870
able to tell someone like hey here's the

00:37:26,980 --> 00:37:31,630
quota for your tenants in your scheduler

00:37:28,870 --> 00:37:34,540
and so with that knowledge you know

00:37:31,630 --> 00:37:35,830
what's going on and here's maybe how

00:37:34,540 --> 00:37:40,650
much they're allowed to burst over their

00:37:35,830 --> 00:37:43,030
quota or how much they're allowed to use

00:37:40,650 --> 00:37:44,140
like what their fair share is of four

00:37:43,030 --> 00:37:45,310
local resource as well so we want to

00:37:44,140 --> 00:37:52,050
give all that information to the

00:37:45,310 --> 00:37:52,050
scheduler as part of this work yeah

00:38:24,490 --> 00:38:30,589
yeah I mean today the quota is not very

00:38:28,579 --> 00:38:37,480
usable and that's what we want to

00:38:30,589 --> 00:38:43,210
improve yeah all right

00:38:37,480 --> 00:38:47,660
any last questions going once

00:38:43,210 --> 00:38:54,350
no okay thank you

00:38:47,660 --> 00:38:54,350

YouTube URL: https://www.youtube.com/watch?v=dvXQowiPLvQ


