Title: Expanding Mesos Ecosystems: Enabling Mesos on Windows
Publication date: 2017-09-18
Playlist: MesosCon North America 2017
Description: 
	Expanding Mesos Ecosystems: Enabling Mesos on Windows - Andy Schwartzmeyer & Jeff Coffler, Microsoft

Microsoft has worked closely with Mesos and DC/OS communities to support customer workloads on Windows by expanding Mesos Ecosystem. In this presentation, we will review some of our work and learnings, then focus on the enhancement on CMake build system providing a single cross-platform developer experience, also discuss the roadmap for what’s coming next and show some cool demos!

About 

Jeff Coffler
Microsoft
Sr. Software Engineer
Jeff Coffler is a Sr. Software Engineer at Microsoft based in the Seattle area. He has over 20 years of experience working on high performance, cross-platform UNIX/Linux software. Currently, he’s working on full support of Mesos on the Windows platform. In his spare time, he enjoys time with his family, bicycle riding, and home automation.

Andrew Schwartzmeyer
Microsoft Corporation
Software Engineer
Seattle
Twitter Tweet LinkedIn Connect  Websitehttps://andschwa.com
Andrew Schwartzmeyer is a cross-platform software engineer and open-source evangelist at Microsoft, where he leads the effort to bring full Windows support to Mesos. Andrew has been an open-source contributor since his college days, and previously brought PowerShell to Linux. In his free time, he enjoys running, everything to do with coffee, and reading science fiction. His favorite tools are Emacs (with Vim bindings, courtesy of Spacemacs), Git, Fish (the shell), KeePass, and Firefox.
Captions: 
	00:00:00,110 --> 00:00:08,309
hello that's loud

00:00:03,780 --> 00:00:11,309
okay good so we have Jeff Koffler and

00:00:08,309 --> 00:00:13,799
Andrew from Microsoft sharing their

00:00:11,309 --> 00:00:16,020
experiences with their work on Windows

00:00:13,799 --> 00:00:17,910
made us on Windows as well as the

00:00:16,020 --> 00:00:18,869
seeming build system so I'm gonna hand

00:00:17,910 --> 00:00:23,130
it off to them when they get good

00:00:18,869 --> 00:00:25,650
started I think so I was Andrew this -

00:00:23,130 --> 00:00:30,199
mouth is deaf and we have some cohorts

00:00:25,650 --> 00:00:30,199
here Paul Alan but not the Paul Alan

00:00:30,330 --> 00:00:37,770
yes as he pointed out his the only Paul

00:00:33,630 --> 00:00:41,460
Allen in her group and then Lili who's

00:00:37,770 --> 00:00:55,670
the who's our manager all right so as um

00:00:41,460 --> 00:00:55,670
this is really loud this okay okay

00:00:59,359 --> 00:01:06,030
how's that okay so we're here to talk

00:01:03,960 --> 00:01:12,000
about meso Sun windows and our

00:01:06,030 --> 00:01:15,869
experiences with it so far so why add

00:01:12,000 --> 00:01:17,280
windows support to Messrs well as you

00:01:15,869 --> 00:01:19,170
can see we have customers that are

00:01:17,280 --> 00:01:22,350
interested in Windows

00:01:19,170 --> 00:01:25,560
we're not fundamentally modifying mesos

00:01:22,350 --> 00:01:29,729
in any way what we're doing is we are

00:01:25,560 --> 00:01:31,920
bringing up a Messrs agent on Windows so

00:01:29,729 --> 00:01:34,650
if you have an existing mesos cluster

00:01:31,920 --> 00:01:36,420
it's the same message cluster you're

00:01:34,650 --> 00:01:38,490
you're used to you can use it in the

00:01:36,420 --> 00:01:41,280
same ways you simply have the ability to

00:01:38,490 --> 00:01:49,890
add Windows nodes and Windows workloads

00:01:41,280 --> 00:01:52,920
to that using using mesos you can select

00:01:49,890 --> 00:01:56,520
Windows using the typical Messer's

00:01:52,920 --> 00:01:59,729
features you know OS CPU speeds other

00:01:56,520 --> 00:02:02,250
criteria and again I wanted to emphasize

00:01:59,729 --> 00:02:05,509
it's the standard meses you know we're

00:02:02,250 --> 00:02:08,129
simply adding an agent for for Windows

00:02:05,509 --> 00:02:10,530
little bit of history you can read the

00:02:08,129 --> 00:02:12,569
slides basically when we started it was

00:02:10,530 --> 00:02:13,920
started as a straight port so for

00:02:12,569 --> 00:02:17,310
example auto tools

00:02:13,920 --> 00:02:20,760
work properly on windows so they did a

00:02:17,310 --> 00:02:24,020
complete straight port of basically what

00:02:20,760 --> 00:02:26,430
Auto Tools was doing in to see make

00:02:24,020 --> 00:02:29,130
since then we've come across and we've

00:02:26,430 --> 00:02:30,630
heavily modified that modify that and

00:02:29,130 --> 00:02:32,220
made it much much cleaner and Andy

00:02:30,630 --> 00:02:40,280
you'll talk about that in a little in a

00:02:32,220 --> 00:02:42,840
little bit where are we now

00:02:40,280 --> 00:02:44,910
as you can see we have the messes

00:02:42,840 --> 00:02:47,250
container Iser that supports job objects

00:02:44,910 --> 00:02:49,830
not quite the same level of isolation as

00:02:47,250 --> 00:02:52,470
you would get with linux but the best we

00:02:49,830 --> 00:02:56,130
can do on Windows it supports docker

00:02:52,470 --> 00:02:58,500
today we're going to demo that we have C

00:02:56,130 --> 00:03:00,269
make NTFS long paths are working in a

00:02:58,500 --> 00:03:06,030
much less hacky way you don't have to

00:03:00,269 --> 00:03:08,190
modify the registry any longer and we

00:03:06,030 --> 00:03:10,819
are there's a team of people that are

00:03:08,190 --> 00:03:14,120
actively working on mesos every day

00:03:10,819 --> 00:03:17,220
pushing changes into the master branch

00:03:14,120 --> 00:03:18,959
after that job object support so what I

00:03:17,220 --> 00:03:21,180
want to really make clear here is that

00:03:18,959 --> 00:03:22,650
we're trying to bring the best of both

00:03:21,180 --> 00:03:24,720
worlds like the expectations you would

00:03:22,650 --> 00:03:26,310
have using the mess as containerized but

00:03:24,720 --> 00:03:28,170
also the expectations you have using

00:03:26,310 --> 00:03:30,000
Windows in general so the fact that we

00:03:28,170 --> 00:03:32,370
don't have C groups is not really a

00:03:30,000 --> 00:03:33,620
problem we're just doing the closest

00:03:32,370 --> 00:03:35,700
thing next year which is sticking

00:03:33,620 --> 00:03:37,350
processes in a job object so you could

00:03:35,700 --> 00:03:39,000
run a raw process on your Windows

00:03:37,350 --> 00:03:41,430
machine what that can give you is

00:03:39,000 --> 00:03:43,200
resource limitations I have that

00:03:41,430 --> 00:03:44,790
prototype right now you can set a hard

00:03:43,200 --> 00:03:47,040
cap on like your CPU and your memory

00:03:44,790 --> 00:03:48,840
usage but you don't get like the C group

00:03:47,040 --> 00:03:50,609
namespaces that you might have on Linux

00:03:48,840 --> 00:03:53,130
simply because that's not a thing on

00:03:50,609 --> 00:03:54,570
Windows we don't have namespaces in that

00:03:53,130 --> 00:03:56,459
way on the other hand the docker

00:03:54,570 --> 00:03:58,049
container Iser totally works on the

00:03:56,459 --> 00:03:59,970
windows container support that the rest

00:03:58,049 --> 00:04:02,160
of Microsoft has managed to get working

00:03:59,970 --> 00:04:11,819
quite well is supported pretty natively

00:04:02,160 --> 00:04:15,660
here as well okay so here's a brief

00:04:11,819 --> 00:04:18,690
demonstration or an example on the left

00:04:15,660 --> 00:04:23,099
we have a a relatively standard marathon

00:04:18,690 --> 00:04:25,140
JSON file it's launching I think you can

00:04:23,099 --> 00:04:26,590
maybe see ok it's launching microsoft

00:04:25,140 --> 00:04:29,560
iis on

00:04:26,590 --> 00:04:33,430
Window System the window on the bottom

00:04:29,560 --> 00:04:38,080
right is IAS running and the window on

00:04:33,430 --> 00:04:43,199
the top right shows docker running in an

00:04:38,080 --> 00:04:47,410
is container started by the meses agent

00:04:43,199 --> 00:04:49,300
alright so here's a little more

00:04:47,410 --> 00:04:52,870
sophisticated example here we have a

00:04:49,300 --> 00:04:54,250
hybrid DCOs cluster deployment so here

00:04:52,870 --> 00:04:57,190
when we detest when we're deploying

00:04:54,250 --> 00:05:02,229
services we use constraints like OS like

00:04:57,190 --> 00:05:04,740
Windows OS like Linux and that serves

00:05:02,229 --> 00:05:07,720
into specific services that are running

00:05:04,740 --> 00:05:09,610
the one that says Microsoft is obviously

00:05:07,720 --> 00:05:12,790
the run when in ruint windows and the

00:05:09,610 --> 00:05:18,700
one that says basic 0 is a run that's

00:05:12,790 --> 00:05:21,789
running Linux in this example so here

00:05:18,700 --> 00:05:23,979
you can see we have nodes 1 1 of the

00:05:21,789 --> 00:05:27,699
nodes of course is a Linux node one of

00:05:23,979 --> 00:05:29,380
the nodes is a Windows node and here's a

00:05:27,699 --> 00:05:31,870
perfect example of we haven't

00:05:29,380 --> 00:05:34,389
fundamentally changed meses in any way

00:05:31,870 --> 00:05:36,400
we're simply adding the ability to run

00:05:34,389 --> 00:05:38,229
Windows workloads within your existing

00:05:36,400 --> 00:05:45,340
meses Linux clusters we're expanding

00:05:38,229 --> 00:05:47,320
that ecosystem now we kind of had to

00:05:45,340 --> 00:05:49,060
squash to Thaksin to one so one of this

00:05:47,320 --> 00:05:50,380
one of the things we've had to do for

00:05:49,060 --> 00:05:53,229
Windows was of course implement a new

00:05:50,380 --> 00:05:54,789
build system auto tools on Windows is

00:05:53,229 --> 00:05:56,530
not really a thing it wouldn't be a

00:05:54,789 --> 00:05:57,970
proper build Windows you generally you

00:05:56,530 --> 00:05:59,740
know Visual Studio solutions or whatever

00:05:57,970 --> 00:06:01,900
you're targeting and this actually

00:05:59,740 --> 00:06:03,039
worked out really well because there's

00:06:01,900 --> 00:06:04,510
been a movement in the greater

00:06:03,039 --> 00:06:07,180
open-source community and in may sauce

00:06:04,510 --> 00:06:09,220
itself to kind of start replacing Auto

00:06:07,180 --> 00:06:12,280
tools it's a great system I I do love

00:06:09,220 --> 00:06:14,380
Auto tools it's GPL but see make is a

00:06:12,280 --> 00:06:16,570
lot higher level and it's a meta build

00:06:14,380 --> 00:06:18,550
generator it lets you define at a really

00:06:16,570 --> 00:06:21,039
high level your build with not much code

00:06:18,550 --> 00:06:22,840
and then you generate the build files

00:06:21,039 --> 00:06:24,729
for the target platform you're on if

00:06:22,840 --> 00:06:26,380
you're on Windows you get msbuild

00:06:24,729 --> 00:06:28,210
solutions that you can open up in Visual

00:06:26,380 --> 00:06:30,400
Studio if you're on Linux you can use

00:06:28,210 --> 00:06:32,500
make files if you're on Linux you can

00:06:30,400 --> 00:06:35,050
also use the ninja build a system if you

00:06:32,500 --> 00:06:36,789
want if you're over on Mac this doesn't

00:06:35,050 --> 00:06:38,590
work quite yet but C makes supports

00:06:36,789 --> 00:06:39,909
generating Xcode solutions there as well

00:06:38,590 --> 00:06:40,660
so you could open it up and your

00:06:39,909 --> 00:06:42,250
preferred ID

00:06:40,660 --> 00:06:44,500
you kind of just however you want and

00:06:42,250 --> 00:06:46,210
the nice key part is you don't have to

00:06:44,500 --> 00:06:49,510
care what your platform is see make has

00:06:46,210 --> 00:06:52,240
a nice little consistent interface to

00:06:49,510 --> 00:06:55,270
use I actually I really like this

00:06:52,240 --> 00:06:56,800
I think it's on my next slide it is on

00:06:55,270 --> 00:06:59,050
my next slide I do want to point out

00:06:56,800 --> 00:07:01,270
walleston make is brings a lot of

00:06:59,050 --> 00:07:02,860
consistency to building there are still

00:07:01,270 --> 00:07:04,180
I don't want to call them hacks but

00:07:02,860 --> 00:07:06,130
there are still fundamental differences

00:07:04,180 --> 00:07:08,140
between some build systems right so

00:07:06,130 --> 00:07:09,610
debug and release configurations are

00:07:08,140 --> 00:07:12,370
something I recently enabled in C make

00:07:09,610 --> 00:07:14,380
and unfortunately although most things

00:07:12,370 --> 00:07:15,550
are consistent there is a difference

00:07:14,380 --> 00:07:17,590
between like single configuration

00:07:15,550 --> 00:07:20,140
generators and multi configuration

00:07:17,590 --> 00:07:22,360
generators in a make file build system

00:07:20,140 --> 00:07:24,250
you configure a folder for your build at

00:07:22,360 --> 00:07:26,170
configuration time you choose if you're

00:07:24,250 --> 00:07:29,080
gonna have a debug or a release built so

00:07:26,170 --> 00:07:31,330
you can set a variable other platforms

00:07:29,080 --> 00:07:33,190
like Visual Studio you can open that up

00:07:31,330 --> 00:07:35,230
in a drop down menu switch between debug

00:07:33,190 --> 00:07:37,120
and release at Build time so while

00:07:35,230 --> 00:07:38,860
there's a lot of consistency these two

00:07:37,120 --> 00:07:40,750
commands are different for the debug and

00:07:38,860 --> 00:07:42,550
release configurations and I'm also

00:07:40,750 --> 00:07:43,960
going through and documenting this so

00:07:42,550 --> 00:07:45,400
that people as we switched over to C

00:07:43,960 --> 00:07:46,330
make well if you want to learn how to

00:07:45,400 --> 00:07:48,220
change your build

00:07:46,330 --> 00:07:50,200
I'll have the explanation of exactly

00:07:48,220 --> 00:07:51,760
what you need to do here other recent

00:07:50,200 --> 00:07:54,340
improvements that I've made we're

00:07:51,760 --> 00:07:56,230
supporting the Java bindings so up until

00:07:54,340 --> 00:07:58,720
maybe a month ago if you built the C

00:07:56,230 --> 00:08:00,400
mcmaster the may sauce master on Linux

00:07:58,720 --> 00:08:01,990
using C make you couldn't use marathon

00:08:00,400 --> 00:08:03,669
because we didn't have Java support

00:08:01,990 --> 00:08:05,650
whatsoever so I brought over the Java

00:08:03,669 --> 00:08:07,900
bindings just so all the projects that

00:08:05,650 --> 00:08:10,660
are using those are now supported the

00:08:07,900 --> 00:08:12,430
other things we've done I've really been

00:08:10,660 --> 00:08:15,040
targeting to speed up the build when I

00:08:12,430 --> 00:08:16,510
started on this December last year so

00:08:15,040 --> 00:08:19,210
the Windows build would take close to an

00:08:16,510 --> 00:08:20,890
hour to finish so we have gone through

00:08:19,210 --> 00:08:22,750
and we added precompiled header support

00:08:20,890 --> 00:08:24,850
because one thing that does happen a lot

00:08:22,750 --> 00:08:27,760
on Windows is it the compiler chokes on

00:08:24,850 --> 00:08:29,500
complex headers if you use stout if you

00:08:27,760 --> 00:08:31,180
use mess us you know about stout our

00:08:29,500 --> 00:08:32,950
giant header only library

00:08:31,180 --> 00:08:34,630
so our precompiled headers have cut down

00:08:32,950 --> 00:08:36,700
a lot of the build time Jeff helped me

00:08:34,630 --> 00:08:38,440
out with that as well the nice thing

00:08:36,700 --> 00:08:39,280
with it is it uses a seaming module

00:08:38,440 --> 00:08:41,200
called Co tire

00:08:39,280 --> 00:08:43,060
we don't actually change any source

00:08:41,200 --> 00:08:45,160
files it's just a configuration time

00:08:43,060 --> 00:08:47,140
header that's generated and included on

00:08:45,160 --> 00:08:49,720
the command line when it's built nice

00:08:47,140 --> 00:08:51,430
and automatic after going through and

00:08:49,720 --> 00:08:53,020
fixing up this emic dependency graph

00:08:51,430 --> 00:08:54,910
which was a mess

00:08:53,020 --> 00:08:58,330
our link times are actually on par with

00:08:54,910 --> 00:09:00,790
Linux I did a fresh build from nothing

00:08:58,330 --> 00:09:02,860
earlier today on a reasonably fast

00:09:00,790 --> 00:09:04,690
machine it was about 18 minutes I still

00:09:02,860 --> 00:09:06,550
want to get that down but going from an

00:09:04,690 --> 00:09:09,070
hour to 18 minutes I'm really really

00:09:06,550 --> 00:09:10,930
happy so to dive into some of this

00:09:09,070 --> 00:09:14,050
before you could move on i wanted to

00:09:10,930 --> 00:09:16,510
point out a couple things see make

00:09:14,050 --> 00:09:19,480
allows you to build using MS build and

00:09:16,510 --> 00:09:22,180
very typically projects that use MS

00:09:19,480 --> 00:09:23,950
build actually check in VC projects that

00:09:22,180 --> 00:09:26,860
are tied to it specifically to a

00:09:23,950 --> 00:09:29,140
specific version of Visual Studio one of

00:09:26,860 --> 00:09:30,970
the nice things that seem a gives you is

00:09:29,140 --> 00:09:32,620
it just builds with the video that Visio

00:09:30,970 --> 00:09:34,600
studio already installed on your machine

00:09:32,620 --> 00:09:37,120
so you don't really have to worry about

00:09:34,600 --> 00:09:39,310
it now in our particular case with mesos

00:09:37,120 --> 00:09:41,380
we actually need the latest version of

00:09:39,310 --> 00:09:43,030
Visual Studio because we're using some

00:09:41,380 --> 00:09:45,970
compiler fixes in the very latest

00:09:43,030 --> 00:09:50,220
version but in the normal world you know

00:09:45,970 --> 00:09:52,660
when we move beyond Visual Studio 2017

00:09:50,220 --> 00:09:54,940
you know conceivably if we don't have to

00:09:52,660 --> 00:09:57,310
take the newest version because of some

00:09:54,940 --> 00:09:58,660
dependency you can be a little more

00:09:57,310 --> 00:10:00,850
relaxed about what version you're

00:09:58,660 --> 00:10:02,680
running that's actually a great point I

00:10:00,850 --> 00:10:04,380
we're not doing this just for my sauce

00:10:02,680 --> 00:10:07,240
but also for a lot of our dependencies

00:10:04,380 --> 00:10:09,280
zookeeper I ran into a problem of on

00:10:07,240 --> 00:10:12,190
Windows originally we just added a patch

00:10:09,280 --> 00:10:14,140
2 meses to patch zookeeper on the fly to

00:10:12,190 --> 00:10:16,810
add a hard-coded Visual Studio 2015

00:10:14,140 --> 00:10:18,940
solution that's not maintainable because

00:10:16,810 --> 00:10:20,920
as soon as I wanted to go to 2017 what

00:10:18,940 --> 00:10:23,620
was I gonna do generate a new passion if

00:10:20,920 --> 00:10:24,760
somebody wants to use go back to 2015 do

00:10:23,620 --> 00:10:26,890
I have to tell him to check out old

00:10:24,760 --> 00:10:29,110
source now instead I deleted the

00:10:26,890 --> 00:10:31,030
solution entirely I pushed a new C make

00:10:29,110 --> 00:10:33,040
build up stream to zookeeper I worked

00:10:31,030 --> 00:10:35,560
with I think it was Michael Hahn of the

00:10:33,040 --> 00:10:37,300
zookeeper project it's integrated I got

00:10:35,560 --> 00:10:40,060
it back to the version of zookeeper were

00:10:37,300 --> 00:10:41,230
using and will be paschal as soon as

00:10:40,060 --> 00:10:43,090
soon as we can just update our zoo

00:10:41,230 --> 00:10:44,590
keeper bundle so we're doing this from

00:10:43,090 --> 00:10:46,560
top to bottom and we're trying to do it

00:10:44,590 --> 00:10:48,670
right so to go into some of the more

00:10:46,560 --> 00:10:51,250
specifics a lot of people might question

00:10:48,670 --> 00:10:53,200
why why switch to see me why use it at

00:10:51,250 --> 00:10:56,260
all I touched on this a little bit

00:10:53,200 --> 00:10:58,300
earlier it's consistent it's easy to use

00:10:56,260 --> 00:11:01,090
when I go to Linux I don't have to

00:10:58,300 --> 00:11:03,460
remember make check I can just run see

00:11:01,090 --> 00:11:05,050
make - just build - target misses tests

00:11:03,460 --> 00:11:06,350
that might be a bit longer than make

00:11:05,050 --> 00:11:08,300
check but

00:11:06,350 --> 00:11:10,040
we'll also work on windows I can go to

00:11:08,300 --> 00:11:11,930
powershell run the exact same command

00:11:10,040 --> 00:11:15,110
and it will build the exact same target

00:11:11,930 --> 00:11:16,940
for me so as a developer that higher

00:11:15,110 --> 00:11:20,540
level abstraction makes working a lot

00:11:16,940 --> 00:11:24,110
easier yeah it's really quite nice it's

00:11:20,540 --> 00:11:25,910
built for C and C++ and what I mean is

00:11:24,110 --> 00:11:27,530
it takes care of a lot of the wrote

00:11:25,910 --> 00:11:29,030
things that you might be used to in Auto

00:11:27,530 --> 00:11:31,430
Tools having to specify all of your

00:11:29,030 --> 00:11:33,170
headers that's automatic your compiler

00:11:31,430 --> 00:11:35,780
can look at your source files and deduce

00:11:33,170 --> 00:11:37,610
what headers you need to include on when

00:11:35,780 --> 00:11:39,560
you're building that object right well

00:11:37,610 --> 00:11:41,120
see Mike just runs your compiler and

00:11:39,560 --> 00:11:43,460
sees what you need to include so you

00:11:41,120 --> 00:11:45,140
don't have to specify all these dot HTTP

00:11:43,460 --> 00:11:47,780
all over the place they're just gone

00:11:45,140 --> 00:11:51,620
they're figured out for you it's it's a

00:11:47,780 --> 00:11:53,810
beautiful little system to fight it yeah

00:11:51,620 --> 00:11:55,640
I also supported a ninja builds there's

00:11:53,810 --> 00:11:57,560
a head not sure if he's a committer

00:11:55,640 --> 00:11:59,900
there's an active massage community

00:11:57,560 --> 00:12:02,030
member named Benjamin Banner who really

00:11:59,900 --> 00:12:03,980
wanted to use a ninja it's an amazing

00:12:02,030 --> 00:12:05,540
little build system for Linux it's like

00:12:03,980 --> 00:12:07,850
make but with a lot better dependency

00:12:05,540 --> 00:12:10,070
checking and it's really good at

00:12:07,850 --> 00:12:12,400
maximizing utilization of your processor

00:12:10,070 --> 00:12:15,470
without with automatic parallelization

00:12:12,400 --> 00:12:18,200
without a lot of thrashing going on so

00:12:15,470 --> 00:12:20,780
ninjas support it as well those are now

00:12:18,200 --> 00:12:22,190
these patches are all upstream in master

00:12:20,780 --> 00:12:26,230
branch with my sauce you can use this

00:12:22,190 --> 00:12:29,030
today it's I had a lot of fun with it so

00:12:26,230 --> 00:12:32,060
the other thing whisky make was if you

00:12:29,030 --> 00:12:34,250
looked at the code previously we touched

00:12:32,060 --> 00:12:36,350
on this a little early on the original

00:12:34,250 --> 00:12:37,850
port over to Windows they looked through

00:12:36,350 --> 00:12:40,310
the auto Tools files and they kind of

00:12:37,850 --> 00:12:41,960
just wrote copied it when auto tools

00:12:40,310 --> 00:12:43,160
said include these directories they made

00:12:41,960 --> 00:12:45,290
a scene make file that said include

00:12:43,160 --> 00:12:47,150
these directories yes that worked we had

00:12:45,290 --> 00:12:48,680
a working build but it's not the way you

00:12:47,150 --> 00:12:50,630
would normally you see make they kind of

00:12:48,680 --> 00:12:52,040
skip past all the high-level

00:12:50,630 --> 00:12:53,900
abstractions you can use and see make to

00:12:52,040 --> 00:12:56,210
generate a nice build system for

00:12:53,900 --> 00:12:59,060
yourself so I spent the last couple

00:12:56,210 --> 00:13:02,540
months rewriting it it's been completely

00:12:59,060 --> 00:13:04,850
refactored we now actually use real see

00:13:02,540 --> 00:13:08,260
make targets so but what I mean by that

00:13:04,850 --> 00:13:10,910
is Stout is our header only library

00:13:08,260 --> 00:13:12,440
usually with a header only library you

00:13:10,910 --> 00:13:14,210
need to remember that for every

00:13:12,440 --> 00:13:17,450
dependency that uses this header only

00:13:14,210 --> 00:13:19,400
library to specify in its compilation

00:13:17,450 --> 00:13:22,760
flags like in your make file Hey

00:13:19,400 --> 00:13:24,800
pound include not pound include - I the

00:13:22,760 --> 00:13:26,600
Stout folder you don't do that in see me

00:13:24,800 --> 00:13:29,450
and see make there is a seeming list

00:13:26,600 --> 00:13:31,580
file for Stout we say add library style

00:13:29,450 --> 00:13:33,650
interface we have one row line that says

00:13:31,580 --> 00:13:35,870
target include directory the include

00:13:33,650 --> 00:13:37,880
folder forced out anything else that

00:13:35,870 --> 00:13:40,040
needs to depend on stout can link to it

00:13:37,880 --> 00:13:42,620
like a normal library you say target

00:13:40,040 --> 00:13:44,240
link libraries lib processed out its

00:13:42,620 --> 00:13:46,160
picked up for you automatically it goes

00:13:44,240 --> 00:13:48,770
into the dependency graph when lib

00:13:46,160 --> 00:13:50,480
process needs when lib missus needs to

00:13:48,770 --> 00:13:52,310
then link to lip process you don't

00:13:50,480 --> 00:13:54,680
specify it again it's just picked up

00:13:52,310 --> 00:13:57,080
there's a proper graph underneath it I

00:13:54,680 --> 00:13:58,730
also went through did that for all the

00:13:57,080 --> 00:14:00,830
rest of our third-party dependencies as

00:13:58,730 --> 00:14:02,420
you know there's probably what twenty I

00:14:00,830 --> 00:14:04,670
think we counted different dependencies

00:14:02,420 --> 00:14:06,590
under third party that we bundle or find

00:14:04,670 --> 00:14:09,230
on the system all those are properly

00:14:06,590 --> 00:14:10,910
imported as real targets that seems like

00:14:09,230 --> 00:14:13,810
it would add a lot of code but by doing

00:14:10,910 --> 00:14:15,770
that I was able to delete giant files

00:14:13,810 --> 00:14:18,890
over a thousand lines of unnecessary

00:14:15,770 --> 00:14:21,410
code was deleted in my refactor and to

00:14:18,890 --> 00:14:23,630
make that number actually seem to give

00:14:21,410 --> 00:14:26,150
you perspective here I added two hundred

00:14:23,630 --> 00:14:29,360
lines so I replaced that like a five to

00:14:26,150 --> 00:14:31,520
one ratio of high-level build code it's

00:14:29,360 --> 00:14:33,350
well I have screenshots to show you if

00:14:31,520 --> 00:14:36,800
what this looked like in the refactor

00:14:33,350 --> 00:14:38,450
the left the totally unreadable code was

00:14:36,800 --> 00:14:41,390
the totally unreadable see make build it

00:14:38,450 --> 00:14:43,400
worked it was a really really good first

00:14:41,390 --> 00:14:45,470
go it got us working on Windows it

00:14:43,400 --> 00:14:47,210
started this whole process I couldn't

00:14:45,470 --> 00:14:49,280
have done what I did without the

00:14:47,210 --> 00:14:51,920
previous developers writing this but

00:14:49,280 --> 00:14:53,510
once we had it there I noticed it was

00:14:51,920 --> 00:14:55,100
just unmaintainable people wanting to

00:14:53,510 --> 00:14:57,620
add a new third-party dependency we're

00:14:55,100 --> 00:14:59,450
giving up I would go and help them I try

00:14:57,620 --> 00:15:01,100
to explain how to do it I'm like you

00:14:59,450 --> 00:15:03,110
know what no I can make this easier I

00:15:01,100 --> 00:15:06,320
know I can make this easier this is the

00:15:03,110 --> 00:15:08,360
new code for the meses agent that's it

00:15:06,320 --> 00:15:10,460
that's the whole file there's a apache

00:15:08,360 --> 00:15:13,220
license header above it but if you go to

00:15:10,460 --> 00:15:15,650
the agent folder source slave that is

00:15:13,220 --> 00:15:17,900
the file you'll find a disputable mesos

00:15:15,650 --> 00:15:19,220
agent main dot cpp that's the source

00:15:17,900 --> 00:15:20,840
file that you use to build the meses

00:15:19,220 --> 00:15:23,060
agent the only other bit of information

00:15:20,840 --> 00:15:25,280
you need to tell it is that it depends

00:15:23,060 --> 00:15:27,050
on meses library all the dependencies

00:15:25,280 --> 00:15:28,880
that live meses has are picked up

00:15:27,050 --> 00:15:30,470
through the graph when you build masses

00:15:28,880 --> 00:15:31,960
agent it's just figured out and

00:15:30,470 --> 00:15:33,670
generated for you

00:15:31,960 --> 00:15:36,130
I don't want to say magically but it

00:15:33,670 --> 00:15:39,070
works like magic the app subdirectory

00:15:36,130 --> 00:15:40,990
pieces are just the fact that see make

00:15:39,070 --> 00:15:42,970
is kind of like Auto Tools the right way

00:15:40,990 --> 00:15:44,860
you do it is a seeming list file per

00:15:42,970 --> 00:15:46,330
folder per target than you need so that

00:15:44,860 --> 00:15:48,400
just tells you hey there's three folders

00:15:46,330 --> 00:15:50,980
in here with more targets I concluded it

00:15:48,400 --> 00:15:52,630
because it was in the original those are

00:15:50,980 --> 00:15:54,940
two different files actually both of

00:15:52,630 --> 00:15:57,100
which were required this middle file is

00:15:54,940 --> 00:15:58,630
completely deleted it was the agent

00:15:57,100 --> 00:16:00,300
configure file it had a bunch of magic

00:15:58,630 --> 00:16:04,120
variables for the third-party

00:16:00,300 --> 00:16:05,530
information I just get RM dit and all of

00:16:04,120 --> 00:16:07,750
that information much of it was

00:16:05,530 --> 00:16:09,640
redundant the link directories the

00:16:07,750 --> 00:16:11,680
target link libraries the I dependencies

00:16:09,640 --> 00:16:13,420
it just comes from the graph the include

00:16:11,680 --> 00:16:15,790
directories that just comes from the

00:16:13,420 --> 00:16:19,180
graph it turned into those two lines it

00:16:15,790 --> 00:16:20,770
was really something the other

00:16:19,180 --> 00:16:22,480
comparison I want to make is to Auto

00:16:20,770 --> 00:16:24,790
tools which is a nice little build

00:16:22,480 --> 00:16:27,520
system but like I said so you make is a

00:16:24,790 --> 00:16:29,890
really high level meta build generator

00:16:27,520 --> 00:16:32,590
it figures out your headers so this is

00:16:29,890 --> 00:16:33,910
the relevant parts of the make file that

00:16:32,590 --> 00:16:36,340
I could find for building the meses

00:16:33,910 --> 00:16:38,410
agent in Auto Tools comparing it to the

00:16:36,340 --> 00:16:39,760
right-hand side over here this is a lot

00:16:38,410 --> 00:16:42,460
easier to reason about and maintain

00:16:39,760 --> 00:16:44,050
those headers are just figured out the

00:16:42,460 --> 00:16:45,880
proto libraries are part of the messes

00:16:44,050 --> 00:16:47,500
protobufs which is the library that live

00:16:45,880 --> 00:16:49,510
massless links to why do you need to

00:16:47,500 --> 00:16:51,250
specify it again you really don't why do

00:16:49,510 --> 00:16:53,020
you need to specify the mess of CPP

00:16:51,250 --> 00:16:54,910
flags for the messes agent if those are

00:16:53,020 --> 00:16:58,150
project white flags they're picked up

00:16:54,910 --> 00:16:59,710
for you so you make is a nice build

00:16:58,150 --> 00:17:01,540
system it's far from perfect

00:16:59,710 --> 00:17:03,460
there are hacks there's always hacks in

00:17:01,540 --> 00:17:05,560
a build system I'm going through and

00:17:03,460 --> 00:17:07,390
documenting those they're commented in

00:17:05,560 --> 00:17:09,610
the code but part of my hackathon

00:17:07,390 --> 00:17:11,650
project well on Wednesday here was to

00:17:09,610 --> 00:17:13,810
actually pull all that out I'm also

00:17:11,650 --> 00:17:15,070
gonna have AC make by example to show

00:17:13,810 --> 00:17:20,140
you hey you want to add a third-party

00:17:15,070 --> 00:17:22,300
library here's how to do it I don't have

00:17:20,140 --> 00:17:25,150
a slide for third-party libraries but I

00:17:22,300 --> 00:17:27,670
wanted to point out that a lot of what I

00:17:25,150 --> 00:17:30,970
did to fix the third-party libraries was

00:17:27,670 --> 00:17:32,470
to localize the information so for G

00:17:30,970 --> 00:17:34,900
lock one of our third-party dependencies

00:17:32,470 --> 00:17:37,420
that takes up quite a bit of setup the

00:17:34,900 --> 00:17:39,160
setup used to be split among a few

00:17:37,420 --> 00:17:42,040
different files in the process and

00:17:39,160 --> 00:17:45,190
third-party in the source files instead

00:17:42,040 --> 00:17:46,630
when done properly it's a set of

00:17:45,190 --> 00:17:49,030
maybe twelve lines of code and

00:17:46,630 --> 00:17:51,040
third-party cmakelists that say hey we

00:17:49,030 --> 00:17:53,620
have this project called G log it's a

00:17:51,040 --> 00:17:55,840
shared library we build it in this way

00:17:53,620 --> 00:17:58,960
the source comes from here we import it

00:17:55,840 --> 00:18:01,420
as a scenic target Stout later can just

00:17:58,960 --> 00:18:03,370
say target linked libraries Stout G log

00:18:01,420 --> 00:18:05,080
anything that links to Stout which again

00:18:03,370 --> 00:18:06,700
header only library but in mayo sauce it

00:18:05,080 --> 00:18:09,370
doesn't and C make it doesn't matter

00:18:06,700 --> 00:18:10,990
picks up the dependency for you and just

00:18:09,370 --> 00:18:14,080
knows how to link it and how to build it

00:18:10,990 --> 00:18:16,630
it's fantastic now C make is really

00:18:14,080 --> 00:18:17,680
really cool but it's obviously cool I

00:18:16,630 --> 00:18:20,040
love it

00:18:17,680 --> 00:18:22,930
the other work that we've done to

00:18:20,040 --> 00:18:25,900
improve the mess us build for all of us

00:18:22,930 --> 00:18:29,290
is to add a review bot for Windows in

00:18:25,900 --> 00:18:31,330
January I say every three or four days I

00:18:29,290 --> 00:18:32,770
pulled master sources and somebody

00:18:31,330 --> 00:18:34,450
committed a patch that didn't build on

00:18:32,770 --> 00:18:36,100
Windows and I had a drop what I was

00:18:34,450 --> 00:18:37,720
doing and fix it again and I don't blame

00:18:36,100 --> 00:18:39,100
anyone nobody was testing it for them

00:18:37,720 --> 00:18:41,260
and I can't make everybody test their

00:18:39,100 --> 00:18:42,730
stuff on Windows so instead we added a

00:18:41,260 --> 00:18:44,950
real review bot it's like the Linux

00:18:42,730 --> 00:18:46,540
review bot you know and love for Linux

00:18:44,950 --> 00:18:48,550
it just does it on Windows for you as

00:18:46,540 --> 00:18:50,560
well it's been up in the amount of times

00:18:48,550 --> 00:18:52,180
I've had to fix a build break and master

00:18:50,560 --> 00:18:53,710
for Windows has gone down dramatically I

00:18:52,180 --> 00:18:55,870
think it's like once a month now we've

00:18:53,710 --> 00:18:57,460
also been working to get nightly builds

00:18:55,870 --> 00:18:59,230
of the missus binaries available for

00:18:57,460 --> 00:19:01,270
Windows so if you want to test this

00:18:59,230 --> 00:19:03,820
project will have binaries available

00:19:01,270 --> 00:19:05,260
that you can just go and build part of

00:19:03,820 --> 00:19:07,600
what I want to work with Vinodh is we're

00:19:05,260 --> 00:19:10,420
getting Apache Software Foundation CI up

00:19:07,600 --> 00:19:11,680
to write four packages eventually as

00:19:10,420 --> 00:19:13,240
this project goes along we'll have

00:19:11,680 --> 00:19:16,570
packages you can use to install meso

00:19:13,240 --> 00:19:18,040
stew I think that was my next slide

00:19:16,570 --> 00:19:20,590
continuous integration for Windows

00:19:18,040 --> 00:19:24,040
working with mesosphere specifically Joe

00:19:20,590 --> 00:19:25,480
he also helped us set up CI for Windows

00:19:24,040 --> 00:19:27,790
as well so we know when our tests are

00:19:25,480 --> 00:19:30,100
passing oh I think it's in the next

00:19:27,790 --> 00:19:32,680
slide but do you want to talk about the

00:19:30,100 --> 00:19:35,500
test was that for you I was gonna point

00:19:32,680 --> 00:19:39,730
out we have not as many tests on Windows

00:19:35,500 --> 00:19:40,660
as we have on Linux 630 versus 1400

00:19:39,730 --> 00:19:42,970
meses

00:19:40,660 --> 00:19:46,060
that's mesos test yeah I think it's like

00:19:42,970 --> 00:19:47,650
1,400 on Linux so add it like a rough

00:19:46,060 --> 00:19:50,830
glance it might look like 50 percent

00:19:47,650 --> 00:19:52,330
test coverage but we're actually still

00:19:50,830 --> 00:19:55,810
in the process of porting muscles to

00:19:52,330 --> 00:19:57,980
windows as we port components like as we

00:19:55,810 --> 00:19:59,950
port over Lib process as we pour it over

00:19:57,980 --> 00:20:03,500
fetcher reporting all the tests with it

00:19:59,950 --> 00:20:05,419
so that 630 test represents a much

00:20:03,500 --> 00:20:06,799
higher amount of coverage for the

00:20:05,419 --> 00:20:09,890
components that we have working on

00:20:06,799 --> 00:20:12,860
Windows maybe 70 80 percent I'd have to

00:20:09,890 --> 00:20:15,260
actually dig into numbers but don't fret

00:20:12,860 --> 00:20:16,730
if you only see 630 tests we were trying

00:20:15,260 --> 00:20:18,370
to keep our coverage pretty high I'm

00:20:16,730 --> 00:20:22,130
gonna pass this back over to Jeff to

00:20:18,370 --> 00:20:24,110
give you a case study okay so one thing

00:20:22,130 --> 00:20:26,650
I missed mentioning by the way is we're

00:20:24,110 --> 00:20:29,960
very engaged with the messers community

00:20:26,650 --> 00:20:31,970
we work closely with them our changes

00:20:29,960 --> 00:20:34,580
are committed to mainline after careful

00:20:31,970 --> 00:20:37,120
review and discussion we are active on

00:20:34,580 --> 00:20:39,230
the dev lists we are active in

00:20:37,120 --> 00:20:42,620
architectural changes that are being

00:20:39,230 --> 00:20:44,750
discussed and basically our goal is to

00:20:42,620 --> 00:20:47,299
work very closely with the open-source

00:20:44,750 --> 00:20:49,640
community to make sure that what we're

00:20:47,299 --> 00:20:52,880
doing is something that everybody is

00:20:49,640 --> 00:20:55,340
comfortable with here we have a case

00:20:52,880 --> 00:20:57,669
study sea trip international really the

00:20:55,340 --> 00:21:00,470
point of this slide is just to point out

00:20:57,669 --> 00:21:02,330
this stuff works it's there today we

00:21:00,470 --> 00:21:06,200
have customers using it under production

00:21:02,330 --> 00:21:08,990
today so it's there it works if you guys

00:21:06,200 --> 00:21:10,910
want to play with it and see seed in

00:21:08,990 --> 00:21:12,679
action you can do that right now today

00:21:10,910 --> 00:21:14,900
we wouldn't necessarily recommend

00:21:12,679 --> 00:21:20,090
running it in production but there are

00:21:14,900 --> 00:21:23,500
people doing it okay I'm gonna do a

00:21:20,090 --> 00:21:28,760
demonstration of a hybrid cluster

00:21:23,500 --> 00:21:31,100
alright so here we have a couple of

00:21:28,760 --> 00:21:35,510
different nodes and if we select one of

00:21:31,100 --> 00:21:38,960
the nodes go to details you can see

00:21:35,510 --> 00:21:46,429
under attributes the OS is Linux and if

00:21:38,960 --> 00:21:50,059
we select a different node here you see

00:21:46,429 --> 00:21:54,919
under attributes the OS is Windows so we

00:21:50,059 --> 00:21:57,980
have some services here and using the

00:21:54,919 --> 00:22:01,309
the constraint that I mentioned we have

00:21:57,980 --> 00:22:02,809
some two services set up one is for is

00:22:01,309 --> 00:22:05,240
with the constraint that it has to run

00:22:02,809 --> 00:22:07,659
on Windows and one is for nginx with a

00:22:05,240 --> 00:22:11,870
constraint that it has to run on Linux

00:22:07,659 --> 00:22:14,900
so basically these are typical DCOs

00:22:11,870 --> 00:22:16,910
services you launch it with a JSON file

00:22:14,900 --> 00:22:20,930
just like you guys are comfortable with

00:22:16,910 --> 00:22:22,940
and here is a window that shows it

00:22:20,930 --> 00:22:25,840
running on Linux and to prove it's real

00:22:22,940 --> 00:22:29,890
I will refresh and they're refreshed

00:22:25,840 --> 00:22:35,390
it's not cached in fact here let's go to

00:22:29,890 --> 00:22:39,590
nginx and suspend it and then we'll go

00:22:35,390 --> 00:22:42,980
to IAS and suspend it as well so now we

00:22:39,590 --> 00:22:45,920
have two suspended services and if I go

00:22:42,980 --> 00:22:50,290
back to Linux and try and refresh you

00:22:45,920 --> 00:22:52,370
cannot open page working live demo here

00:22:50,290 --> 00:22:53,960
interestingly enough you see the

00:22:52,370 --> 00:22:56,929
progress bar it's having problems

00:22:53,960 --> 00:22:59,150
loading it will eventually timeout but

00:22:56,929 --> 00:23:02,500
in the interest of time I'm going to

00:22:59,150 --> 00:23:05,320
come back here and I'm going to say

00:23:02,500 --> 00:23:10,150
resume nginx

00:23:05,320 --> 00:23:10,150
I'm gonna come back here and refresh oh

00:23:10,300 --> 00:23:20,540
oh oh it's still the playing there you

00:23:17,179 --> 00:23:23,480
go yeah good demo so here yeah and then

00:23:20,540 --> 00:23:25,190
you can see that that Windows is still

00:23:23,480 --> 00:23:27,200
having problems loading if you look at

00:23:25,190 --> 00:23:36,620
the progress bar so I'm going to go back

00:23:27,200 --> 00:23:42,020
and resume IAS wait for it to deploy

00:23:36,620 --> 00:23:43,700
this time ok and then here it's still

00:23:42,020 --> 00:23:51,920
having problems loading I'm gonna kill

00:23:43,700 --> 00:23:55,550
that and refresh go come on there you go

00:23:51,920 --> 00:24:00,559
and so yeah this shows is running on on

00:23:55,550 --> 00:24:03,830
Windows so that's the demonstration did

00:24:00,559 --> 00:24:07,790
want to point out go back here go back

00:24:03,830 --> 00:24:09,770
to nodes this this cluster just had you

00:24:07,790 --> 00:24:12,350
know it started is with just Linux nodes

00:24:09,770 --> 00:24:16,510
and the Windows nodes were just added to

00:24:12,350 --> 00:24:16,510
it without any changes to the master

00:24:19,880 --> 00:24:24,800
okay whoops

00:24:30,450 --> 00:24:37,080
better okay so what's next we're

00:24:35,489 --> 00:24:39,749
actively working on adding

00:24:37,080 --> 00:24:41,159
authentication support hasn't I don't

00:24:39,749 --> 00:24:42,929
think that's made it to master yet but

00:24:41,159 --> 00:24:44,730
it's it's tested and working and I think

00:24:42,929 --> 00:24:46,470
it's out for review patches are up for

00:24:44,730 --> 00:24:49,619
it

00:24:46,470 --> 00:24:52,830
cram md5 is supported and we're working

00:24:49,619 --> 00:24:57,539
on additional authentication methods

00:24:52,830 --> 00:25:00,509
using plugins just like on Linux some

00:24:57,539 --> 00:25:05,489
upcoming DC DC OS services we're looking

00:25:00,509 --> 00:25:07,080
at is metrics Barton and Navstar and I'm

00:25:05,489 --> 00:25:09,779
working on getting the fetcher deployed

00:25:07,080 --> 00:25:12,929
on Windows patches are almost up for

00:25:09,779 --> 00:25:14,970
that and I did want to emphasize what

00:25:12,929 --> 00:25:16,769
Andy said increase unit test coverage by

00:25:14,970 --> 00:25:18,779
putting more tests

00:25:16,769 --> 00:25:20,549
I always start like when I started with

00:25:18,779 --> 00:25:22,649
the fetcher the very very very first

00:25:20,549 --> 00:25:25,139
thing I did was ported all the tests he

00:25:22,649 --> 00:25:26,909
would failed and I'm and and as part of

00:25:25,139 --> 00:25:29,220
my work I'm fixing those and I have

00:25:26,909 --> 00:25:30,690
something like 30 tickets in JIRA to

00:25:29,220 --> 00:25:32,190
look at all the tests that we may have

00:25:30,690 --> 00:25:34,799
ported and forgot to close the tickets

00:25:32,190 --> 00:25:36,149
on so yeah we're getting through it the

00:25:34,799 --> 00:25:38,249
other thing we're doing of course is

00:25:36,149 --> 00:25:40,590
planning the eventual deprecation of

00:25:38,249 --> 00:25:41,970
auto tools in seem 8 for in favor of see

00:25:40,590 --> 00:25:44,850
make so that we don't have to maintain

00:25:41,970 --> 00:25:46,440
to build systems simultaneously so

00:25:44,850 --> 00:25:47,879
that'll come along as well yeah that's

00:25:46,440 --> 00:25:51,119
something that we're working with the

00:25:47,879 --> 00:25:53,519
community for it's gonna be a while but

00:25:51,119 --> 00:25:56,039
but it is something that I think not

00:25:53,519 --> 00:26:00,690
just Microsoft would appreciate but the

00:25:56,039 --> 00:26:02,340
developers would appreciate as well ok

00:26:00,690 --> 00:26:05,730
there's some resources that you could

00:26:02,340 --> 00:26:07,559
look at if you'd like github.com slash

00:26:05,730 --> 00:26:10,499
Microsoft flash mesos has some

00:26:07,559 --> 00:26:12,600
interesting pointers for meso stuff

00:26:10,499 --> 00:26:16,259
here's some DCOs links that you could

00:26:12,600 --> 00:26:20,070
look at as well they're the windows

00:26:16,259 --> 00:26:23,220
repository is available as well and the

00:26:20,070 --> 00:26:27,869
ACS engine allows you to very very

00:26:23,220 --> 00:26:33,359
quickly deploy DCOs clusters just takes

00:26:27,869 --> 00:26:39,419
a few commands to do that yes our Paul

00:26:33,359 --> 00:26:42,450
Allen yeah ok so where are we going from

00:26:39,419 --> 00:26:44,100
here really we're very very customer

00:26:42,450 --> 00:26:46,470
driven we'd like the

00:26:44,100 --> 00:26:49,590
we're in the community to decide if a

00:26:46,470 --> 00:26:51,570
customer has very very specific usage

00:26:49,590 --> 00:26:53,580
scenarios we would really like to engage

00:26:51,570 --> 00:26:56,160
with you and hear what they are so we

00:26:53,580 --> 00:26:59,750
could meet your needs you can join us on

00:26:56,160 --> 00:27:02,010
the mess of slack channel windows is a

00:26:59,750 --> 00:27:07,380
common one although we hang out on most

00:27:02,010 --> 00:27:09,179
of them at right after this this

00:27:07,380 --> 00:27:10,860
presentation we're going to the booth if

00:27:09,179 --> 00:27:13,350
you have any particular questions please

00:27:10,860 --> 00:27:16,919
join us at the booth and we're happy to

00:27:13,350 --> 00:27:17,789
discuss stuff with you thank you for

00:27:16,919 --> 00:27:24,049
coming

00:27:17,789 --> 00:27:25,919
does anyone have any questions yeah

00:27:24,049 --> 00:27:30,809
don't you giving the mic so it's

00:27:25,919 --> 00:27:33,240
recorded so you said no you could build

00:27:30,809 --> 00:27:34,770
missus agent on Windows when is the

00:27:33,240 --> 00:27:41,010
master going to be ready or is it

00:27:34,770 --> 00:27:43,260
already a lot of the master code I know

00:27:41,010 --> 00:27:44,850
builds because most of the unit tests

00:27:43,260 --> 00:27:47,880
require spinning up parts of the master

00:27:44,850 --> 00:27:49,350
to build the mess us master executable

00:27:47,880 --> 00:27:51,990
right now I mean the see make file is

00:27:49,350 --> 00:27:53,580
just if not Windows I would like to try

00:27:51,990 --> 00:27:55,590
it it's something I'd like to experiment

00:27:53,580 --> 00:27:57,240
with we don't have a huge customer

00:27:55,590 --> 00:27:59,340
demand to have the master building on

00:27:57,240 --> 00:28:01,470
Windows because most of these people

00:27:59,340 --> 00:28:03,750
most of you lovely people out there

00:28:01,470 --> 00:28:05,490
really already have masses clusters with

00:28:03,750 --> 00:28:07,230
your masters up and lint on Linux and

00:28:05,490 --> 00:28:09,630
deployed and just want Windows agents

00:28:07,230 --> 00:28:11,270
added to it so priority wise it may not

00:28:09,630 --> 00:28:13,110
be our highest saying but the big

00:28:11,270 --> 00:28:14,880
troublesome heart about bringing the

00:28:13,110 --> 00:28:17,580
master over to Windows is its dependency

00:28:14,880 --> 00:28:20,070
on level TB which we've looked at and

00:28:17,580 --> 00:28:24,830
are like oh that might need to be ported

00:28:20,070 --> 00:28:28,970
so it depends on where we get with that

00:28:24,830 --> 00:28:28,970
does anyone have any other questions

00:28:37,330 --> 00:28:43,190
I'm just wondering if like I saw during

00:28:40,730 --> 00:28:45,950
the demonstration that it had I think

00:28:43,190 --> 00:28:47,480
one CPU 128 Meg's of RAM are those

00:28:45,950 --> 00:28:49,220
actually being honored right now windows

00:28:47,480 --> 00:28:51,679
one that's running either through docker

00:28:49,220 --> 00:29:05,059
or through the kind of native Windows

00:28:51,679 --> 00:29:07,999
deployments there are real numbers that

00:29:05,059 --> 00:29:09,619
is the actual docker container docker

00:29:07,999 --> 00:29:11,990
being ported to Windows we just kind of

00:29:09,619 --> 00:29:13,309
shell out to docker so any isolation or

00:29:11,990 --> 00:29:15,590
resource limitations you set with the

00:29:13,309 --> 00:29:18,559
docker container eyes are work the job

00:29:15,590 --> 00:29:21,499
objects that's coming I have a branch up

00:29:18,559 --> 00:29:24,259
that I've tested I I ran a process that

00:29:21,499 --> 00:29:26,330
is supposed to use as much RAM as it can

00:29:24,259 --> 00:29:28,879
and I sat with my branch the hard limit

00:29:26,330 --> 00:29:31,039
of like nope stop at a 1 gigabyte of RAM

00:29:28,879 --> 00:29:33,139
totally stopped right there so that's in

00:29:31,039 --> 00:29:34,639
process and will come along probably in

00:29:33,139 --> 00:29:35,749
the next month or so but we're working

00:29:34,639 --> 00:29:38,119
to make sure all those resources

00:29:35,749 --> 00:29:48,759
limitations are real live reported

00:29:38,119 --> 00:29:52,220
correctly and can be used you showed a

00:29:48,759 --> 00:29:54,470
client that was already running this in

00:29:52,220 --> 00:29:55,730
production are they running down as your

00:29:54,470 --> 00:30:11,389
container services are they running that

00:29:55,730 --> 00:30:13,190
on purim yeah the case study that we

00:30:11,389 --> 00:30:15,259
show there is actually I'm prime

00:30:13,190 --> 00:30:18,289
customer and then currently we're also

00:30:15,259 --> 00:30:20,749
working on some DC US customers as well

00:30:18,289 --> 00:30:24,230
I think that will come in pretty quickly

00:30:20,749 --> 00:30:27,190
next I will imagine that the timeline to

00:30:24,230 --> 00:30:30,409
really let them to use our product T cos

00:30:27,190 --> 00:30:35,299
in their production might be sometime

00:30:30,409 --> 00:30:39,559
you know April or May time frame but the

00:30:35,299 --> 00:30:43,330
loora loora layer like mussels layer has

00:30:39,559 --> 00:30:43,330
been in the production already

00:30:45,169 --> 00:30:56,639
any other questions I was curious about

00:30:52,580 --> 00:30:59,700
the GPU support if you guys know how

00:30:56,639 --> 00:31:02,309
does that work on Windows no GPU support

00:30:59,700 --> 00:31:03,749
yet I like that you asked that though

00:31:02,309 --> 00:31:15,299
because now I can make a ticket to look

00:31:03,749 --> 00:31:18,989
at it eventually okay so if you have a

00:31:15,299 --> 00:31:21,419
particular request or requirement I will

00:31:18,989 --> 00:31:25,470
encourage you to follow up with us

00:31:21,419 --> 00:31:27,739
either select channel or you know send

00:31:25,470 --> 00:31:30,840
the email to Andy and Jeff and then

00:31:27,739 --> 00:31:32,720
we'll work with you closely to support

00:31:30,840 --> 00:31:35,700
the scenarios that you want to support

00:31:32,720 --> 00:31:39,749
we have a lot of things at least there

00:31:35,700 --> 00:31:42,299
that we want to target next but if you

00:31:39,749 --> 00:31:44,879
have you know more concrete requirements

00:31:42,299 --> 00:31:47,220
and then it can change the priority of

00:31:44,879 --> 00:31:49,679
our things now released as well we are

00:31:47,220 --> 00:31:51,869
open to listen and then we actually like

00:31:49,679 --> 00:32:09,149
to work with customers to support of

00:31:51,869 --> 00:32:12,539
scenarios so I was just curious about

00:32:09,149 --> 00:32:17,869
what what are the big items for moving

00:32:12,539 --> 00:32:17,869
or dropping auto tools that are left I

00:32:19,879 --> 00:32:24,809
don't have Python bindings working yet

00:32:22,169 --> 00:32:29,489
so that might be a bigger item to work

00:32:24,809 --> 00:32:30,539
on other than that we're getting really

00:32:29,489 --> 00:32:33,119
close actually

00:32:30,539 --> 00:32:34,889
there's obviously a lot of effort to go

00:32:33,119 --> 00:32:37,200
into making sure the whole community can

00:32:34,889 --> 00:32:38,789
you see me comfortably as part of why

00:32:37,200 --> 00:32:40,409
I'm here I want to ask you all to try it

00:32:38,789 --> 00:32:42,690
out I want to make sure that it works as

00:32:40,409 --> 00:32:44,580
well as it can for you I think it's a

00:32:42,690 --> 00:32:47,119
great build system I know what smart

00:32:44,580 --> 00:32:49,679
from perfect and I know I'm really the

00:32:47,119 --> 00:32:51,929
as the one who rewrote it I tested it

00:32:49,679 --> 00:32:53,639
for my scenarios I tried to test as many

00:32:51,929 --> 00:32:54,990
other scenarios as I could but please

00:32:53,639 --> 00:32:57,179
try it out in the real world

00:32:54,990 --> 00:32:59,929
give it a whirl let me know something's

00:32:57,179 --> 00:33:02,750
missing this you need so I can go at it

00:32:59,929 --> 00:33:04,679
we do have an epic tracking the

00:33:02,750 --> 00:33:09,660
technical issues that we found so far

00:33:04,679 --> 00:33:11,429
but yeah there is I wanted to add I mean

00:33:09,660 --> 00:33:13,650
we do have review about running

00:33:11,429 --> 00:33:16,950
obviously that uses see make every

00:33:13,650 --> 00:33:18,450
single day in Microsoft we obviously see

00:33:16,950 --> 00:33:21,630
make every single day because that's all

00:33:18,450 --> 00:33:24,990
that works on Windows so you know it is

00:33:21,630 --> 00:33:26,910
working it it it's working for what we

00:33:24,990 --> 00:33:29,100
need it doesn't have everything that

00:33:26,910 --> 00:33:31,170
Auto tools haves and I don't know if we

00:33:29,100 --> 00:33:33,179
were ever gonna completely replace that

00:33:31,170 --> 00:33:37,500
because Auto tools does a lot we just

00:33:33,179 --> 00:33:39,450
want to replace what's actively used so

00:33:37,500 --> 00:33:41,070
kind of tying in to what you just said

00:33:39,450 --> 00:33:43,140
when when do you think we can get rid of

00:33:41,070 --> 00:33:46,320
Auto Tools completely or at the very

00:33:43,140 --> 00:33:50,340
least switch over all the docs on on the

00:33:46,320 --> 00:33:52,590
Vsauce site to say hey you see make like

00:33:50,340 --> 00:33:54,179
don't even talk about Auto tools the

00:33:52,590 --> 00:33:55,559
number that I've heard thrown out

00:33:54,179 --> 00:33:56,970
talking to some maintainer z-- is

00:33:55,559 --> 00:33:59,370
probably on about a six month time frame

00:33:56,970 --> 00:34:01,590
to do that to say hey by default please

00:33:59,370 --> 00:34:03,050
you see make and use it without you know

00:34:01,590 --> 00:34:06,809
of course deleting the auto tool stuff

00:34:03,050 --> 00:34:09,389
beyond that we kind of need to see once

00:34:06,809 --> 00:34:10,740
people start adopting it widespread how

00:34:09,389 --> 00:34:12,780
long it'll take to get rid of all the

00:34:10,740 --> 00:34:20,429
rest of replace all the rest of auto

00:34:12,780 --> 00:34:25,200
tools so six months ish to default any

00:34:20,429 --> 00:34:26,600
other questions thanks very much for

00:34:25,200 --> 00:34:29,739
joining us

00:34:26,600 --> 00:34:29,739

YouTube URL: https://www.youtube.com/watch?v=1v977TAfvt0


