Title: Keynote: Are We There Yet? - Ross Gardler
Publication date: 2017-09-15
Playlist: MesosCon North America 2017
Description: 
	Keynote: Are We There Yet? - Ross Gardler, Executive VP, ASF and Principal Program Manager, Azure Container Service, Microsoft

Orchestration of workloads is a hot topic. Everywhere we look there are opinions. All orchestration options claim to be the best, all options have their limitation. We listen to conference presentations that tell us how Company Foo has had amazing results with solution X and that they would never use solution Y, but the very next session tells us that equally impressive results have been achieved with solution Y and they'd never use X. What are we supposed to choose? Who are we supposed to listen to? In Azure Container Service we've been offering a choice of solutions to our customers for some time. What has this taught us about orchestration technology? What does the future look like? Who is the clear winner? [Spoiler alert: no clear winner but there are clear success stories for each offering.]
Captions: 
	00:00:00,979 --> 00:00:06,330
it's so I know what I'm talking about

00:00:03,179 --> 00:00:08,580
yeah well we'll see after we've we've

00:00:06,330 --> 00:00:11,730
finished here so I'm I wasn't the

00:00:08,580 --> 00:00:12,170
Windows user the Windows Phone it wasn't

00:00:11,730 --> 00:00:14,910
me

00:00:12,170 --> 00:00:18,359
so I don't know who it was but I work in

00:00:14,910 --> 00:00:21,140
the agile Linux team my job is to grow

00:00:18,359 --> 00:00:23,189
Linux faster than that we grow Windows

00:00:21,140 --> 00:00:24,720
there is a whole load of people in

00:00:23,189 --> 00:00:26,789
Microsoft who funnily enough when I grow

00:00:24,720 --> 00:00:31,410
windows faster than Linux we're winning

00:00:26,789 --> 00:00:32,880
so that's an interesting thing I joined

00:00:31,410 --> 00:00:34,760
Microsoft about five years ago my

00:00:32,880 --> 00:00:37,050
background is very much in open source

00:00:34,760 --> 00:00:40,200
very active in the Apache Software

00:00:37,050 --> 00:00:43,290
Foundation and a number of other

00:00:40,200 --> 00:00:47,329
projects around and and as you container

00:00:43,290 --> 00:00:50,219
services as far as I'm aware the first

00:00:47,329 --> 00:00:52,920
but not now the only but certainly the

00:00:50,219 --> 00:00:57,629
first service that we deployed which was

00:00:52,920 --> 00:01:01,170
using 100% open source software and so

00:00:57,629 --> 00:01:04,290
what I want to talk about and is ask the

00:01:01,170 --> 00:01:06,060
question are we there yet and in order

00:01:04,290 --> 00:01:08,340
to answer that question you have to know

00:01:06,060 --> 00:01:10,560
where there is you know I have young

00:01:08,340 --> 00:01:12,390
kids here are we there yet

00:01:10,560 --> 00:01:14,390
all the time in the back of the car and

00:01:12,390 --> 00:01:16,560
they've got no idea where we're going so

00:01:14,390 --> 00:01:18,180
let's have a look at where we're going

00:01:16,560 --> 00:01:21,180
the panel talks about this a little bit

00:01:18,180 --> 00:01:22,950
earlier on and so this is a Gartner hype

00:01:21,180 --> 00:01:26,040
curve I'm sure many of you have seen

00:01:22,950 --> 00:01:27,869
this before it's a consultancy view that

00:01:26,040 --> 00:01:29,610
simplifies the world in ways that are

00:01:27,869 --> 00:01:31,890
not realistic but nevertheless it is a

00:01:29,610 --> 00:01:34,470
useful model for structuring a

00:01:31,890 --> 00:01:36,299
conversation over here on the left hand

00:01:34,470 --> 00:01:38,040
side somebody comes up with a smart idea

00:01:36,299 --> 00:01:41,130
and they create an early stage

00:01:38,040 --> 00:01:43,020
innovative product it's not complete it

00:01:41,130 --> 00:01:44,310
doesn't do everything that we think it's

00:01:43,020 --> 00:01:46,079
going to do there's a lot of

00:01:44,310 --> 00:01:48,420
customization needed a lot of

00:01:46,079 --> 00:01:50,790
hand-holding in order to make it work

00:01:48,420 --> 00:01:53,430
for us but it has a huge amount of

00:01:50,790 --> 00:01:55,110
promise and consequently people get

00:01:53,430 --> 00:01:57,119
excited about it and they come along and

00:01:55,110 --> 00:01:59,549
they try and use this technology they do

00:01:57,119 --> 00:02:02,240
the configuration and we get really

00:01:59,549 --> 00:02:04,649
really excited more excited all the time

00:02:02,240 --> 00:02:08,340
expectations which is the left-hander

00:02:04,649 --> 00:02:11,370
that the the vertical axis continue to

00:02:08,340 --> 00:02:13,170
rise the media the blogosphere all of

00:02:11,370 --> 00:02:13,830
that starts to pick up and everybody

00:02:13,170 --> 00:02:16,200
gets even

00:02:13,830 --> 00:02:18,120
more excited until eventually there's

00:02:16,200 --> 00:02:20,580
enough people who realize that it's not

00:02:18,120 --> 00:02:23,430
quite ready that the negative press

00:02:20,580 --> 00:02:25,230
starts and once that starts and people

00:02:23,430 --> 00:02:27,540
start complaining doesn't work it's

00:02:25,230 --> 00:02:29,940
rubbish we drop down tune into this

00:02:27,540 --> 00:02:32,400
trough of disillusionment but a few

00:02:29,940 --> 00:02:34,620
people stick around a few people say no

00:02:32,400 --> 00:02:37,230
the promise is real this is a really

00:02:34,620 --> 00:02:39,360
innovative a really exciting technology

00:02:37,230 --> 00:02:42,420
we should keep working at this and so a

00:02:39,360 --> 00:02:44,250
second generation of products emerge and

00:02:42,420 --> 00:02:46,350
that generation of products is a little

00:02:44,250 --> 00:02:48,000
bit better but we don't get quite so

00:02:46,350 --> 00:02:50,730
excited because many of us have already

00:02:48,000 --> 00:02:53,430
been stung and we just let people get on

00:02:50,730 --> 00:02:57,900
with it in in in in their areas their

00:02:53,430 --> 00:02:59,730
focus areas and over time we learn we

00:02:57,900 --> 00:03:03,390
learn methodologies we learn best

00:02:59,730 --> 00:03:05,130
practices we learn by applying we learn

00:03:03,390 --> 00:03:07,710
by working together and since we're all

00:03:05,130 --> 00:03:10,130
open-source people we know the most

00:03:07,710 --> 00:03:12,600
about that working together peace an

00:03:10,130 --> 00:03:14,640
eventually third generation products

00:03:12,600 --> 00:03:16,710
emerge and it's the third generation

00:03:14,640 --> 00:03:19,020
products that really deliver

00:03:16,710 --> 00:03:20,550
they're often specializing they're

00:03:19,020 --> 00:03:21,930
narrowing the field they're not going to

00:03:20,550 --> 00:03:23,190
solve all of the world's problems

00:03:21,930 --> 00:03:26,340
they're going to solve the world's

00:03:23,190 --> 00:03:28,260
problems in this area by using the early

00:03:26,340 --> 00:03:31,230
innovations that started on the

00:03:28,260 --> 00:03:33,540
left-hand side of the graph so there is

00:03:31,230 --> 00:03:37,140
what Gartner call the plateau of

00:03:33,540 --> 00:03:39,090
productivity so are we there well

00:03:37,140 --> 00:03:42,270
there's loads of survey data out there

00:03:39,090 --> 00:03:43,940
and we can ask the surveys are we there

00:03:42,270 --> 00:03:46,350
is there a winner

00:03:43,940 --> 00:03:48,360
specifically in container orchestration

00:03:46,350 --> 00:03:49,709
is there a winner and guess what there's

00:03:48,360 --> 00:03:51,810
loads of surveys out there that will

00:03:49,709 --> 00:03:54,390
tell us there is very definitely a

00:03:51,810 --> 00:03:57,810
winner no question there is a runaway

00:03:54,390 --> 00:04:00,090
winner interestingly enough if you ask a

00:03:57,810 --> 00:04:02,160
community or you ask a business and

00:04:00,090 --> 00:04:03,480
their customers who is the winner they

00:04:02,160 --> 00:04:05,250
will tell you it's the thing they're

00:04:03,480 --> 00:04:08,880
working on it's the thing they know is

00:04:05,250 --> 00:04:11,370
the thing where they are they understand

00:04:08,880 --> 00:04:13,140
the hands on configuration the tweaking

00:04:11,370 --> 00:04:15,900
the love and the care that goes into

00:04:13,140 --> 00:04:17,340
making an early-stage innovative product

00:04:15,900 --> 00:04:21,260
work but that doesn't mean there's a

00:04:17,340 --> 00:04:23,729
winner so we have to look at other data

00:04:21,260 --> 00:04:25,680
in as you contain a service we

00:04:23,729 --> 00:04:27,560
Santorelli on hey there's there's no

00:04:25,680 --> 00:04:29,270
obvious choice as to where we should

00:04:27,560 --> 00:04:33,080
here there's loads of different types of

00:04:29,270 --> 00:04:35,389
solutions so let's do everything okay

00:04:33,080 --> 00:04:37,310
there's three leaders in the

00:04:35,389 --> 00:04:39,410
orchestration space and this was going

00:04:37,310 --> 00:04:41,120
back to two years when we started this

00:04:39,410 --> 00:04:43,070
and we said let's do all of them let's

00:04:41,120 --> 00:04:46,730
work with partners let's learn together

00:04:43,070 --> 00:04:48,169
and so we did and we've been doing that

00:04:46,730 --> 00:04:50,450
for a number of years and we have a lot

00:04:48,169 --> 00:04:53,030
of customers using as your container

00:04:50,450 --> 00:04:55,220
services so we have data that is not

00:04:53,030 --> 00:04:57,440
biased in any way yes they choose

00:04:55,220 --> 00:04:59,300
Microsoft but they're not choosing

00:04:57,440 --> 00:05:01,070
Microsoft products they're choosing open

00:04:59,300 --> 00:05:03,740
source solutions that we and our

00:05:01,070 --> 00:05:06,830
partners are helping them use on Azure

00:05:03,740 --> 00:05:09,320
so the data isn't it doesn't have a

00:05:06,830 --> 00:05:12,940
selection bias so what does this data

00:05:09,320 --> 00:05:15,110
tell us it tells us that the winner is

00:05:12,940 --> 00:05:17,810
we don't have a drumroll so you can

00:05:15,110 --> 00:05:21,139
imagine one for me the winner is thank

00:05:17,810 --> 00:05:25,639
you I have one down here I can't tell

00:05:21,139 --> 00:05:28,190
you it's it's business sensitive data

00:05:25,639 --> 00:05:30,500
and my lawyers won't allow me to tell

00:05:28,190 --> 00:05:32,180
you however even if they would allow me

00:05:30,500 --> 00:05:35,780
to tell you I couldn't tell you because

00:05:32,180 --> 00:05:37,970
there is no winner not today there is no

00:05:35,780 --> 00:05:41,510
clear winner if I look at the hard data

00:05:37,970 --> 00:05:44,479
of people paying money a there is no

00:05:41,510 --> 00:05:46,160
winner it depends on the workload if we

00:05:44,479 --> 00:05:47,539
look at developers who are kicking the

00:05:46,160 --> 00:05:49,970
tires are doing an early stage

00:05:47,539 --> 00:05:54,320
experiment there is one clear winner if

00:05:49,970 --> 00:05:57,500
we look at data workloads there is one

00:05:54,320 --> 00:06:00,289
clear winner if we look at small

00:05:57,500 --> 00:06:02,180
startups there are a couple of potential

00:06:00,289 --> 00:06:04,570
winners if we look at large enterprises

00:06:02,180 --> 00:06:07,639
there are a couple of potential winners

00:06:04,570 --> 00:06:12,590
there just is no winner at this point so

00:06:07,639 --> 00:06:16,250
we're nowhere near there okay so how do

00:06:12,590 --> 00:06:18,500
we get from here to there I'm going to

00:06:16,250 --> 00:06:21,880
do a demo in a moment and I'm going to

00:06:18,500 --> 00:06:24,470
show you some very very early-stage

00:06:21,880 --> 00:06:27,200
experimental code it's all coming from

00:06:24,470 --> 00:06:29,120
github repositories it's no release for

00:06:27,200 --> 00:06:31,039
a lot of the stuff that I'm going to

00:06:29,120 --> 00:06:33,830
demo in a moment so please don't go away

00:06:31,039 --> 00:06:35,389
saying Microsoft are doing this or make

00:06:33,830 --> 00:06:36,620
this amazing store fees and we're not

00:06:35,389 --> 00:06:37,159
necessarily going to turn it into a

00:06:36,620 --> 00:06:38,900
product

00:06:37,159 --> 00:06:41,060
we're over here on the left hand side

00:06:38,900 --> 00:06:43,130
we're working in the communities

00:06:41,060 --> 00:06:44,780
elaborating with our partners and we're

00:06:43,130 --> 00:06:47,720
figuring out what those methodologies

00:06:44,780 --> 00:06:51,500
and best practices are along with people

00:06:47,720 --> 00:06:54,320
like yourselves and in doing that our

00:06:51,500 --> 00:06:58,040
goal is to make the ride across that

00:06:54,320 --> 00:07:01,400
trough of disillusionment smoother so

00:06:58,040 --> 00:07:04,550
that we can all succeed together you

00:07:01,400 --> 00:07:07,280
know we like to say in the Azure team we

00:07:04,550 --> 00:07:09,830
sell in electricity essentially our job

00:07:07,280 --> 00:07:11,750
is to just keep the lights on so we

00:07:09,830 --> 00:07:13,760
don't care what you're running we just

00:07:11,750 --> 00:07:15,500
care that you can run it and if you

00:07:13,760 --> 00:07:16,639
think back to the panel at the beginning

00:07:15,500 --> 00:07:18,770
and they said they're quite one of the

00:07:16,639 --> 00:07:20,840
question was what is there in the future

00:07:18,770 --> 00:07:23,060
of orchestration what's the thing that

00:07:20,840 --> 00:07:24,919
we need and all four panelists said the

00:07:23,060 --> 00:07:27,080
same thing and it's exactly the answer I

00:07:24,919 --> 00:07:27,650
would have given well I just want to run

00:07:27,080 --> 00:07:30,979
my workload

00:07:27,650 --> 00:07:33,139
I don't care where it's running I just

00:07:30,979 --> 00:07:36,080
want it efficient I want it cheap I

00:07:33,139 --> 00:07:37,490
don't want it to run okay so that's what

00:07:36,080 --> 00:07:39,590
we need to do but we're a long way from

00:07:37,490 --> 00:07:41,150
being there we have to learn those

00:07:39,590 --> 00:07:43,280
methodologies we have to learn those

00:07:41,150 --> 00:07:46,039
best practices we have to take the best

00:07:43,280 --> 00:07:49,550
of all the things that we have available

00:07:46,039 --> 00:07:51,080
to us and bring it together into a set

00:07:49,550 --> 00:07:52,850
of products that are going to run the

00:07:51,080 --> 00:07:55,340
workloads that means we need to work

00:07:52,850 --> 00:07:58,010
together arm a sauce that means we need

00:07:55,340 --> 00:07:59,930
to work together on kubernetes VCS

00:07:58,010 --> 00:08:01,789
announced kubernetes integration

00:07:59,930 --> 00:08:04,850
sorry Mesa sphere announced DCOs

00:08:01,789 --> 00:08:07,520
kubernetes integration into DCOs

00:08:04,850 --> 00:08:10,220
very important step that allows us to

00:08:07,520 --> 00:08:12,080
collaborate and work together so I'm

00:08:10,220 --> 00:08:13,729
going to switch to a not going to switch

00:08:12,080 --> 00:08:17,000
to a demo I'm going to do this slide

00:08:13,729 --> 00:08:19,910
first so there's a talk later on today

00:08:17,000 --> 00:08:23,870
and this is a really good example of how

00:08:19,910 --> 00:08:25,910
we are taking experiences from our

00:08:23,870 --> 00:08:28,430
customers and bringing them to the open

00:08:25,910 --> 00:08:31,130
source it's all windows focused in this

00:08:28,430 --> 00:08:33,380
case just because I'm trying to grow

00:08:31,130 --> 00:08:34,969
went Linux better faster we're winning I

00:08:33,380 --> 00:08:39,110
have to give the windows team a boost as

00:08:34,969 --> 00:08:42,580
well we had customers very very early on

00:08:39,110 --> 00:08:45,170
who said this container thing is awesome

00:08:42,580 --> 00:08:47,360
we want Windows Server containers as

00:08:45,170 --> 00:08:50,030
well it just so happened that way back

00:08:47,360 --> 00:08:53,060
when we first started working on this we

00:08:50,030 --> 00:08:54,980
had an internal project that was doing

00:08:53,060 --> 00:08:57,589
containerization in window

00:08:54,980 --> 00:08:59,720
okay it's about 15 years old it was an

00:08:57,589 --> 00:09:02,330
MSR that's the research division project

00:08:59,720 --> 00:09:04,250
and we said okay do we do we use that

00:09:02,330 --> 00:09:06,140
project we commercialize that and turn

00:09:04,250 --> 00:09:08,750
that into an equivalent of Windows

00:09:06,140 --> 00:09:10,160
Server containers and fortunately we

00:09:08,750 --> 00:09:12,500
made them what I believe to be the right

00:09:10,160 --> 00:09:15,380
decision and we said no we need to

00:09:12,500 --> 00:09:17,600
leverage and work with and contribute to

00:09:15,380 --> 00:09:19,490
the docker ecosystem that was emerging

00:09:17,600 --> 00:09:21,350
this would be three and a half three to

00:09:19,490 --> 00:09:23,330
three and a half years ago and so

00:09:21,350 --> 00:09:26,290
Windows Server containers is docker

00:09:23,330 --> 00:09:29,930
the number one contributor to docker

00:09:26,290 --> 00:09:33,170
engine outside of docker incorporated is

00:09:29,930 --> 00:09:34,910
Microsoft for this reason that then

00:09:33,170 --> 00:09:37,310
meant that when we had customers coming

00:09:34,910 --> 00:09:41,300
to us saying we want to run Windows

00:09:37,310 --> 00:09:43,100
processes on top of may sauce we were

00:09:41,300 --> 00:09:44,839
able to deliver on that because we had

00:09:43,100 --> 00:09:47,360
started to standardize on the same

00:09:44,839 --> 00:09:49,850
technologies that exists in Linux so it

00:09:47,360 --> 00:09:53,540
was not a simple job to bring Mesa of

00:09:49,850 --> 00:09:55,399
support but it was simpler so we did

00:09:53,540 --> 00:09:57,140
that and the team that did that work are

00:09:55,399 --> 00:09:58,670
here today and I'll tell you where you

00:09:57,140 --> 00:10:00,860
can find out exactly what they did and

00:09:58,670 --> 00:10:02,900
as part of that work we didn't just

00:10:00,860 --> 00:10:05,330
improve it just didn't just enable

00:10:02,900 --> 00:10:07,760
Windows in May sauce we also spent a lot

00:10:05,330 --> 00:10:10,040
of time helping improve the build system

00:10:07,760 --> 00:10:11,990
improves the CI CD etc because we now

00:10:10,040 --> 00:10:14,029
have to make it cross-platform and so on

00:10:11,990 --> 00:10:15,529
that men refactoring a lot of it and

00:10:14,029 --> 00:10:17,870
that meant taking the opportunity to

00:10:15,529 --> 00:10:20,060
improve it so this improves Linux

00:10:17,870 --> 00:10:22,070
workloads as well because ultimately all

00:10:20,060 --> 00:10:23,420
you want to do is run your workload it

00:10:22,070 --> 00:10:27,380
doesn't matter what your assets on you

00:10:23,420 --> 00:10:28,850
just want to run your workload next up

00:10:27,380 --> 00:10:31,550
people are seeing that they can do

00:10:28,850 --> 00:10:33,709
windows processes in May sauce so now

00:10:31,550 --> 00:10:36,160
we've got people saying give us windows

00:10:33,709 --> 00:10:39,410
contain server containers in May sauce

00:10:36,160 --> 00:10:41,420
ok well that's fairly easy because we're

00:10:39,410 --> 00:10:43,310
working with the community on docker and

00:10:41,420 --> 00:10:45,350
the mesa community are doing things like

00:10:43,310 --> 00:10:47,540
incorporating docker containers into

00:10:45,350 --> 00:10:51,020
mesa so this is relatively easy to do

00:10:47,540 --> 00:10:53,149
now easy for me to say but it was done

00:10:51,020 --> 00:10:58,010
or is in the process of being completed

00:10:53,149 --> 00:11:00,380
I should say and then finally we started

00:10:58,010 --> 00:11:03,620
having people concerned this is great we

00:11:00,380 --> 00:11:06,140
do use Mei sauce but we also use DCOs so

00:11:03,620 --> 00:11:08,360
give me windows in DC OS and this is

00:11:06,140 --> 00:11:09,980
something that we've just started doing

00:11:08,360 --> 00:11:12,019
there's a demo of it on the Microsoft

00:11:09,980 --> 00:11:15,019
Store we're working hand-in-hand with

00:11:12,019 --> 00:11:16,610
Mesa sphere to deliver this i personally

00:11:15,019 --> 00:11:18,410
am very surprised by the number of

00:11:16,610 --> 00:11:20,589
customers who want to run Windows

00:11:18,410 --> 00:11:24,709
workloads in DCOs

00:11:20,589 --> 00:11:26,570
very pleasantly surprised so that's the

00:11:24,709 --> 00:11:29,779
kind of thing that we're doing it's not

00:11:26,570 --> 00:11:31,550
just on the windows side though right

00:11:29,779 --> 00:11:34,730
this is a different team from mine I do

00:11:31,550 --> 00:11:36,950
all Linux shoutout for this session it's

00:11:34,730 --> 00:11:38,269
at 2 p.m. in Diamond someone's 7:00 so

00:11:36,950 --> 00:11:41,870
if you want to know more about that work

00:11:38,269 --> 00:11:43,279
then go along there so next I want to do

00:11:41,870 --> 00:11:46,579
a demo and now it's all going to be

00:11:43,279 --> 00:11:48,410
Linux and interestingly I'm going to

00:11:46,579 --> 00:11:51,140
start with kubernetes so I'm going to

00:11:48,410 --> 00:11:53,510
start onstage at at Mei sauce con I'm

00:11:51,140 --> 00:11:56,230
going to talk about kubernetes why am I

00:11:53,510 --> 00:11:59,089
going to talk about communities because

00:11:56,230 --> 00:12:01,190
there is a lot of interest and there's a

00:11:59,089 --> 00:12:03,140
lot of innovation happening in the

00:12:01,190 --> 00:12:05,660
kubernetes ecosystem there's a lot of

00:12:03,140 --> 00:12:07,459
things that we can learn from we should

00:12:05,660 --> 00:12:09,260
be able to take the things that are

00:12:07,459 --> 00:12:12,110
really advantageous in there and bring

00:12:09,260 --> 00:12:12,649
them to bear on this community and vice

00:12:12,110 --> 00:12:15,019
versa

00:12:12,649 --> 00:12:17,630
and that's one of the roles that we see

00:12:15,019 --> 00:12:19,310
Microsoft playing in the community we

00:12:17,630 --> 00:12:20,810
don't care what workload you're running

00:12:19,310 --> 00:12:23,360
we just want to make sure you can run

00:12:20,810 --> 00:12:24,980
your workload so it's in our interest to

00:12:23,360 --> 00:12:27,199
make sure that all of the really nice

00:12:24,980 --> 00:12:31,910
stuff in the kubernetes ecosystem comes

00:12:27,199 --> 00:12:32,990
to the mesa ecosystem and vice versa so

00:12:31,910 --> 00:12:34,279
what I'm actually going to do in this

00:12:32,990 --> 00:12:37,010
demo is I'm going to deploy an

00:12:34,279 --> 00:12:38,120
application to kubernetes I'm going to

00:12:37,010 --> 00:12:40,730
use a thing called helm

00:12:38,120 --> 00:12:42,740
if you know DCOs think DCOs package

00:12:40,730 --> 00:12:45,140
install the equivalent in kubernetes

00:12:42,740 --> 00:12:47,480
world is helm install and you'll see

00:12:45,140 --> 00:12:49,490
that without working that's going to

00:12:47,480 --> 00:12:51,470
deploy an application to kubernetes and

00:12:49,490 --> 00:12:54,350
it's the kind of application that we see

00:12:51,470 --> 00:12:55,850
a lot in kubernetes customers is

00:12:54,350 --> 00:12:58,640
basically a micro service based

00:12:55,850 --> 00:13:01,579
application web api is a web front-end

00:12:58,640 --> 00:13:04,220
that kind of thing but we need a data

00:13:01,579 --> 00:13:05,540
back-end on this thing in this case it's

00:13:04,220 --> 00:13:07,310
going to be Cassandra but it could be

00:13:05,540 --> 00:13:10,699
anything that you find in the data

00:13:07,310 --> 00:13:14,029
workloads and we see may sauce is the

00:13:10,699 --> 00:13:15,649
hands-down winner in that space so what

00:13:14,029 --> 00:13:17,480
we are customer needs is to be able to

00:13:15,649 --> 00:13:19,520
take advantage of both of those things

00:13:17,480 --> 00:13:21,440
at the same time and so what I'm going

00:13:19,520 --> 00:13:22,250
to do is I'm going to say well okay you

00:13:21,440 --> 00:13:24,290
don't

00:13:22,250 --> 00:13:26,030
Tsumura crudities developer you're

00:13:24,290 --> 00:13:28,370
working on kubernetes you don't need to

00:13:26,030 --> 00:13:31,550
learn about DCOs in order to leverage

00:13:28,370 --> 00:13:32,690
the strengths of DCOs now this can

00:13:31,550 --> 00:13:34,040
happen the other way around I'm

00:13:32,690 --> 00:13:36,470
deliberately benefited there

00:13:34,040 --> 00:13:38,000
demonstrating it from kubernetes to DCOs

00:13:36,470 --> 00:13:39,500
just to prove the point well there's

00:13:38,000 --> 00:13:40,700
absolutely no reason why it couldn't

00:13:39,500 --> 00:13:43,130
work the other way around

00:13:40,700 --> 00:13:46,150
so instead of doing helm install and

00:13:43,130 --> 00:13:48,590
deploying a DCOs cluster you could do

00:13:46,150 --> 00:13:50,300
package install install a kubernetes

00:13:48,590 --> 00:13:52,220
cluster and of course you saw the

00:13:50,300 --> 00:13:54,110
announcement last week and and and the

00:13:52,220 --> 00:13:56,870
demos yesterday of exactly how you can

00:13:54,110 --> 00:13:58,550
do that inside of DCOs so we're working

00:13:56,870 --> 00:14:02,390
with Mesa spheres of it to make this

00:13:58,550 --> 00:14:04,730
happen in both directions so what does

00:14:02,390 --> 00:14:09,890
it look like if we could switch to the

00:14:04,730 --> 00:14:11,800
demo machine please excellent okay so we

00:14:09,890 --> 00:14:14,000
have this thing called service broker

00:14:11,800 --> 00:14:16,040
and when I say we I mean the community

00:14:14,000 --> 00:14:18,800
this is in the cognitive computing

00:14:16,040 --> 00:14:21,490
foundation so you can find it over there

00:14:18,800 --> 00:14:24,830
it originally came from cloud foundry

00:14:21,490 --> 00:14:27,920
and the API and an implementation of

00:14:24,830 --> 00:14:30,470
that has moved into the cloud foam the

00:14:27,920 --> 00:14:33,589
cloud native computing foundation and so

00:14:30,470 --> 00:14:36,740
if I query this using cube cuttle where

00:14:33,589 --> 00:14:39,620
I can see I have a number of services

00:14:36,740 --> 00:14:42,380
available to me now this could be any

00:14:39,620 --> 00:14:44,420
set of services and they don't know

00:14:42,380 --> 00:14:47,240
where they're run these are enabled by

00:14:44,420 --> 00:14:50,089
my ops team okay so my ops team has

00:14:47,240 --> 00:14:52,700
blessed for services for me my sequel

00:14:50,089 --> 00:14:53,900
dbl Postgres TBL readies cache and the

00:14:52,700 --> 00:14:57,410
top one which is the one we're going to

00:14:53,900 --> 00:14:59,089
use DCOs Cassandra I have no idea how

00:14:57,410 --> 00:15:02,060
that is going to be deployed I just know

00:14:59,089 --> 00:15:04,610
I have it available to me so I build my

00:15:02,060 --> 00:15:07,040
application and I create my kubernetes

00:15:04,610 --> 00:15:11,270
yum all file so let's have a look at

00:15:07,040 --> 00:15:16,339
that so what I'm gonna do here is I'm

00:15:11,270 --> 00:15:18,920
going to I'm going to show the the Yamal

00:15:16,339 --> 00:15:20,839
file for this application if you're not

00:15:18,920 --> 00:15:23,660
familiar with kubernetes Gemmell file is

00:15:20,839 --> 00:15:24,620
like a suppresser monkey here we go look

00:15:23,660 --> 00:15:28,250
at that

00:15:24,620 --> 00:15:31,130
I need to do something now because I

00:15:28,250 --> 00:15:33,050
hate the idea of doing a demo that isn't

00:15:31,130 --> 00:15:34,790
real so this is a real demo what I'm

00:15:33,050 --> 00:15:38,510
gonna do now is just prove that it's

00:15:34,790 --> 00:15:40,130
it's real and type something live and

00:15:38,510 --> 00:15:42,560
you can see out this is actually real

00:15:40,130 --> 00:15:45,170
okay it's just that I always type

00:15:42,560 --> 00:15:48,140
terribly when people are watching me so

00:15:45,170 --> 00:15:50,590
back to the actual demo let me just

00:15:48,140 --> 00:15:53,720
scroll back here something I wanted to

00:15:50,590 --> 00:15:55,610
press the wrong key again see this is

00:15:53,720 --> 00:15:57,940
supposed to be perfect this is supposed

00:15:55,610 --> 00:16:02,020
to make me look completely infallible I

00:15:57,940 --> 00:16:05,450
[Laughter]

00:16:02,020 --> 00:16:07,850
don't know what I'm doing I just need to

00:16:05,450 --> 00:16:09,350
just oh I know what it is I normally do

00:16:07,850 --> 00:16:11,780
this in team works and because the

00:16:09,350 --> 00:16:13,040
network's a little flaky I'm not doing

00:16:11,780 --> 00:16:13,760
it in team work so I'm doing it straight

00:16:13,040 --> 00:16:16,340
in a shell

00:16:13,760 --> 00:16:19,010
so my control beads are scroll back he's

00:16:16,340 --> 00:16:22,690
not working let me just complete this

00:16:19,010 --> 00:16:28,760
out and then I can scroll back

00:16:22,690 --> 00:16:31,310
unfortunately also the I can't see it on

00:16:28,760 --> 00:16:33,050
this screen either okay let me scroll

00:16:31,310 --> 00:16:38,300
back and that's all run but we'll go

00:16:33,050 --> 00:16:40,730
through we'll go backwards I can just

00:16:38,300 --> 00:16:42,050
see the thing there we go all right so

00:16:40,730 --> 00:16:44,450
I'll scroll back and I'll work through

00:16:42,050 --> 00:16:47,390
and tell you what's going on so we could

00:16:44,450 --> 00:16:50,510
we can recover from this so this is

00:16:47,390 --> 00:16:52,310
where I was at so this is a yeah mall

00:16:50,510 --> 00:16:53,570
file this is kind of like if you know

00:16:52,310 --> 00:16:54,770
marathon this is kind of like the

00:16:53,570 --> 00:16:57,620
marathon JSON file

00:16:54,770 --> 00:16:59,360
it describes the application that I want

00:16:57,620 --> 00:17:02,930
to deploy and in this case this is the

00:16:59,360 --> 00:17:06,080
services that are going to kubernetes so

00:17:02,930 --> 00:17:08,600
this is my my Web API and the bit that I

00:17:06,080 --> 00:17:13,280
want to highlight to you if I can just

00:17:08,600 --> 00:17:15,170
click on the right thing is the very

00:17:13,280 --> 00:17:18,860
bottom there where it says Cassandra

00:17:15,170 --> 00:17:20,930
address what's happening here is it's

00:17:18,860 --> 00:17:23,840
pulling the address for the Cassandra

00:17:20,930 --> 00:17:26,600
cluster from a secret inside of

00:17:23,840 --> 00:17:28,610
kubernetes okay so I'm not hard-coding

00:17:26,600 --> 00:17:30,500
anything here I'm not I'm not so calling

00:17:28,610 --> 00:17:32,990
up my ops people and saying where is my

00:17:30,500 --> 00:17:35,000
Cassandra cluster how do I connect to it

00:17:32,990 --> 00:17:37,370
what are my secrets I'm just writing a

00:17:35,000 --> 00:17:38,659
Yunel file that says you'll get it from

00:17:37,370 --> 00:17:41,809
this secrets

00:17:38,659 --> 00:17:43,039
so how does it get in there I need to

00:17:41,809 --> 00:17:48,740
scroll down a little bit

00:17:43,039 --> 00:17:53,029
so you can so you can see the following

00:17:48,740 --> 00:17:55,580
pieces that's just the definition of the

00:17:53,029 --> 00:17:57,169
rest of the application that's going

00:17:55,580 --> 00:17:59,419
those a few components that go into

00:17:57,169 --> 00:18:02,000
kubernetes the piece in the middle here

00:17:59,419 --> 00:18:04,250
that's the definition of the service

00:18:02,000 --> 00:18:06,169
that I want to deploy and you can see it

00:18:04,250 --> 00:18:08,750
has the same service name it has Azure

00:18:06,169 --> 00:18:10,519
DCOs Cassandra and it has a plan name

00:18:08,750 --> 00:18:14,389
which in this case is three private

00:18:10,519 --> 00:18:15,980
nodes so that is what my ops team has

00:18:14,389 --> 00:18:18,380
said if you need a Cassandra cluster

00:18:15,980 --> 00:18:21,909
this is how to get one okay so what

00:18:18,380 --> 00:18:24,580
happens when we do the helm install here

00:18:21,909 --> 00:18:27,110
that was the helm install command and

00:18:24,580 --> 00:18:28,370
you can see it deployed some stuff to

00:18:27,110 --> 00:18:31,909
kubernetes buddy

00:18:28,370 --> 00:18:36,250
sorry about this the important piece in

00:18:31,909 --> 00:18:42,110
all of this is right here at the end

00:18:36,250 --> 00:18:44,840
where it says the the the was a binding

00:18:42,110 --> 00:18:47,360
gone there we go at the top where it

00:18:44,840 --> 00:18:49,610
says v1 Alpha binding that is the

00:18:47,360 --> 00:18:51,590
binding that's being injected into

00:18:49,610 --> 00:18:54,260
kubernetes to tell it where that

00:18:51,590 --> 00:18:56,899
Cassandra cluster is so what is the

00:18:54,260 --> 00:18:59,630
Cassandra cluster it's not running on

00:18:56,899 --> 00:19:03,169
kubernetes that's the important thing if

00:18:59,630 --> 00:19:05,600
I do a cube control get instances this

00:19:03,169 --> 00:19:07,340
tells me about the de Coster the

00:19:05,600 --> 00:19:10,970
Cassandra cluster that's being stood up

00:19:07,340 --> 00:19:15,200
and you can see at the bottom here it

00:19:10,970 --> 00:19:17,480
says that it is deep provisioning that's

00:19:15,200 --> 00:19:19,490
not true it's provisioning so it's early

00:19:17,480 --> 00:19:21,889
stage straight out of github etcetera

00:19:19,490 --> 00:19:24,440
etc it's provisioning and I can show you

00:19:21,889 --> 00:19:28,190
it provisioning by switching over to the

00:19:24,440 --> 00:19:31,159
azure portal clicking ok because it's

00:19:28,190 --> 00:19:33,350
timed out while we were downstairs well

00:19:31,159 --> 00:19:35,600
we were waiting for the the other

00:19:33,350 --> 00:19:38,960
sessions and I can show you this is just

00:19:35,600 --> 00:19:41,510
the azure portal and this is the the

00:19:38,960 --> 00:19:43,460
previous cluster that I use so I can

00:19:41,510 --> 00:19:46,779
show it you running and you can see this

00:19:43,460 --> 00:19:51,320
is DTRS cluster but if I go back to my

00:19:46,779 --> 00:19:54,140
resources I have a new one which

00:19:51,320 --> 00:19:55,520
I believe is this one and this should be

00:19:54,140 --> 00:19:58,700
in a provisioning yet there we go

00:19:55,520 --> 00:20:01,550
deploying okay that's the one that was

00:19:58,700 --> 00:20:04,190
just set off from creating that helm

00:20:01,550 --> 00:20:06,440
deployment and so what I'm doing is I'm

00:20:04,190 --> 00:20:08,570
creating a DC OS cluster this uses

00:20:06,440 --> 00:20:09,950
actually container service as you can

00:20:08,570 --> 00:20:13,250
say in a service is a partnership

00:20:09,950 --> 00:20:15,530
between Mesa sphere and ourselves to

00:20:13,250 --> 00:20:17,120
deliver this solution to you so we're

00:20:15,530 --> 00:20:18,650
tying these things together you don't

00:20:17,120 --> 00:20:21,710
have to think about which Orchestrator

00:20:18,650 --> 00:20:23,200
how to deploy Cassandra etc I stress it

00:20:21,710 --> 00:20:25,880
can work the other way around as well

00:20:23,200 --> 00:20:28,910
once we've completed that work you have

00:20:25,880 --> 00:20:30,620
a DC OS package that can deploy this so

00:20:28,910 --> 00:20:33,200
one last thing if we could just go back

00:20:30,620 --> 00:20:35,120
to the slide deck and so the point here

00:20:33,200 --> 00:20:37,760
is that we're trying to bring everybody

00:20:35,120 --> 00:20:40,460
back together or bring all of the

00:20:37,760 --> 00:20:43,180
innovations together on solutions can we

00:20:40,460 --> 00:20:45,620
switch to the slide deck please

00:20:43,180 --> 00:20:48,100
there we go thank you

00:20:45,620 --> 00:20:50,840
so just very quickly go to this slide so

00:20:48,100 --> 00:20:52,190
the key thing here is I've stressed how

00:20:50,840 --> 00:20:55,460
much you matter how important it is for

00:20:52,190 --> 00:20:57,500
us to learn from one another okay we are

00:20:55,460 --> 00:21:00,320
not there yet we're a long way from

00:20:57,500 --> 00:21:02,030
being there and we need to learn and we

00:21:00,320 --> 00:21:03,740
need to learn by working with you on

00:21:02,030 --> 00:21:05,150
your workloads so this is an

00:21:03,740 --> 00:21:06,830
announcement that we're making today you

00:21:05,150 --> 00:21:08,540
can tell I didn't build this slide this

00:21:06,830 --> 00:21:10,850
one comes from our marketing people I'll

00:21:08,540 --> 00:21:13,550
highlight the limited time offer for

00:21:10,850 --> 00:21:15,530
Mesa con North America attendees only so

00:21:13,550 --> 00:21:17,090
quick they're all just like all

00:21:15,530 --> 00:21:20,240
marketing messages if you don't know it

00:21:17,090 --> 00:21:21,920
now you'll miss the boat so follow

00:21:20,240 --> 00:21:24,110
through on that URL there and if you

00:21:21,920 --> 00:21:28,100
have workloads that you want to bring

00:21:24,110 --> 00:21:30,050
onto DCOs will do it in asia but it's on

00:21:28,100 --> 00:21:31,640
DCOs a Mesa sphere I'll help you run

00:21:30,050 --> 00:21:34,010
that everywhere we'll just run it better

00:21:31,640 --> 00:21:36,260
or now here so everything's good we will

00:21:34,010 --> 00:21:38,600
help you move that workload into DCOs

00:21:36,260 --> 00:21:40,550
will bring Mesa sphere into the into the

00:21:38,600 --> 00:21:42,530
projects as well so you have all the

00:21:40,550 --> 00:21:44,330
expertise of Mesa sphere we bring HCL

00:21:42,530 --> 00:21:46,310
technologies in you will have their

00:21:44,330 --> 00:21:48,770
expertise and we'll all learn together

00:21:46,310 --> 00:21:50,480
and we'll build out that future that the

00:21:48,770 --> 00:21:53,640
panel wanted where your workloads will

00:21:50,480 --> 00:22:00,349
just work thank you very much

00:21:53,640 --> 00:22:00,349

YouTube URL: https://www.youtube.com/watch?v=HcA_lQJzVCE


