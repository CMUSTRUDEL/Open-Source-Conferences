Title: Improving Storage Support in Apache Mesos using CSI
Publication date: 2017-09-18
Playlist: MesosCon North America 2017
Description: 
	Improving Storage Support in Apache Mesos using CSI - Steve Wong, {code}; Jie Yu & James DeFelice, Mesosphere; & Chakravarthy Nelluri, Diamanti

Mesos currently supports both local and external persistent volumes. However, both of them have some limitations. For instance, local persistent volume support requires tedious setup by operators for additional disks. External persistent volume support does not support dynamic provisioning, and Mesos doesn’t track the resources associated with the external volumes. This makes quota control, reservation, fair sharing almost impossible to implement. Our goal is to improve the experience for both of them. The solution is based on a general resource provider model in Mesos, and a standard pluggable interface when talking to storage platforms. This interface is called Container Storage Interface (CSI). This talk will give you an overview about CSI and the resource provider based solution for storage, and dive deeper into how storage platforms can be easily integrated with Mesos using CSI.

About 

Chakravarthy Nelluri
Chief Cloud Architect, Diamanti, Inc.
Chief Architect and founding engineer at Diamanti, the company behind industry's first bare metal container platform. Specializes in Containerization, Networking & Storage.

Steve Wong
Strategic Open Source Partner Engineer, {code}
Steve Wong is an Open Source Engineer with the {code} team. Steve has been participating in the Apache Mesos, DC/OS, Kubernetes, and REX-Ray projects.

James DeFelice
Mesosphere
Distributed Applications Engineer
CT
Websitemesosphere.io
James is a Tech Lead at Mesosphere, Inc, currently focused on framework development and storage. Before joining Mesosphere, he spent time building on-demand VM provisioning platforms and supporting Mesos users in the wild. James has an MS in Bioinformatics from the Rochester Institute of Technology.

Jie Yu
Mesosphere
Tech Lead
Facebook Message
Jie Yu is a Tech Lead at Mesosphere, Inc, focused on containerization, storage and networking. Before joining Mesosphere, he was a software engineer at Twitter. Jie obtained his PhD in Computer Science and Engineering from the University of Michigan where he conducted research for concurrent and event-driven systems.
Captions: 
	00:00:07,340 --> 00:00:11,940
we got a couple of looks like there

00:00:10,290 --> 00:00:26,430
might be some seats up front if you guys

00:00:11,940 --> 00:00:34,469
are looking let's start so next up we

00:00:26,430 --> 00:00:46,860
have talking about CSI and storage

00:00:34,469 --> 00:00:49,410
support in mesos alright so um my name

00:00:46,860 --> 00:00:52,260
is jii I work for mesosphere right now

00:00:49,410 --> 00:00:56,699
and I'm approaching May so Skinner and

00:00:52,260 --> 00:01:01,590
PMC members since 2013 and my twitter

00:00:56,699 --> 00:01:03,270
handle is G and ask or you James hi I'm

00:01:01,590 --> 00:01:05,790
James D police I'm an engineer and

00:01:03,270 --> 00:01:09,630
mesosphere you'd find me on github

00:01:05,790 --> 00:01:12,810
Jaidev hi I'm Steve Wang open source

00:01:09,630 --> 00:01:16,290
engineer with the code team at sponsored

00:01:12,810 --> 00:01:19,049
by Dell EMC that's a group that works on

00:01:16,290 --> 00:01:21,299
community open-source projects I've been

00:01:19,049 --> 00:01:21,869
working on Apache mezzos for about two

00:01:21,299 --> 00:01:24,689
years now

00:01:21,869 --> 00:01:28,759
also working on a Rex ray project that

00:01:24,689 --> 00:01:31,439
is a storage provider enablement for CSI

00:01:28,759 --> 00:01:43,590
and I've also dabbled a bit on

00:01:31,439 --> 00:01:45,210
kubernetes ok this is an overview of the

00:01:43,590 --> 00:01:47,909
agenda today we're going to start out

00:01:45,210 --> 00:01:51,329
with a state of storage and container

00:01:47,909 --> 00:01:54,060
orchestration today moving on from that

00:01:51,329 --> 00:01:56,430
will cover the benefits of

00:01:54,060 --> 00:02:00,570
standardization which is what the

00:01:56,430 --> 00:02:03,540
container storage interface is we'll get

00:02:00,570 --> 00:02:05,369
into a more detailed overview of what

00:02:03,540 --> 00:02:08,310
the container storage interface looks

00:02:05,369 --> 00:02:11,160
like then we'll move on from there since

00:02:08,310 --> 00:02:13,990
this is mezzos con to cover the specific

00:02:11,160 --> 00:02:16,600
details of how maize O's is

00:02:13,990 --> 00:02:20,890
going to adopt to the container storage

00:02:16,600 --> 00:02:23,350
interface this is a work in progress so

00:02:20,890 --> 00:02:25,930
finally we'll go on to what the roadmap

00:02:23,350 --> 00:02:28,420
is you know we're our plans are to

00:02:25,930 --> 00:02:32,320
deliver a release one but follow it up

00:02:28,420 --> 00:02:36,190
with more features and then we're gonna

00:02:32,320 --> 00:02:38,680
wrap up the day with some directives on

00:02:36,190 --> 00:02:40,720
how you can participate yourself and how

00:02:38,680 --> 00:02:45,690
you can help move this forward and have

00:02:40,720 --> 00:02:45,690
a voice and how this gets done I

00:02:45,910 --> 00:02:50,890
I said we were going to cover three

00:02:48,370 --> 00:02:53,740
perspectives of the state of storage and

00:02:50,890 --> 00:02:57,880
containers now and these perspectives

00:02:53,740 --> 00:02:59,410
are from the perspective of a user of a

00:02:57,880 --> 00:03:01,390
container Orchestrator from the

00:02:59,410 --> 00:03:03,700
perspective of somebody implementing a

00:03:01,390 --> 00:03:05,980
container Orchestrator and from the

00:03:03,700 --> 00:03:09,850
perspective of a storage provider will

00:03:05,980 --> 00:03:13,030
start with users over the past couple of

00:03:09,850 --> 00:03:15,280
years there's been a huge shift where

00:03:13,030 --> 00:03:17,440
stateful applications running in

00:03:15,280 --> 00:03:19,480
containers have become pretty mainstream

00:03:17,440 --> 00:03:22,240
you know there was a time where the 12

00:03:19,480 --> 00:03:25,060
factors advised you that everything in a

00:03:22,240 --> 00:03:26,830
container should be stateless and what

00:03:25,060 --> 00:03:28,990
that really meant you can't deliver a

00:03:26,830 --> 00:03:31,210
practical application that has no state

00:03:28,990 --> 00:03:33,730
anywhere you put it off to the side and

00:03:31,210 --> 00:03:35,980
it wasn't even managed in a container or

00:03:33,730 --> 00:03:38,410
by your Orchestrator but in the last

00:03:35,980 --> 00:03:41,500
couple years mezzo added support for

00:03:38,410 --> 00:03:43,720
external persistent volumes and this

00:03:41,500 --> 00:03:46,900
made it feasible to run these stateful

00:03:43,720 --> 00:03:49,540
apps inside a container having with it

00:03:46,900 --> 00:03:51,780
under the management of mezzos and you

00:03:49,540 --> 00:03:54,820
can see here just a few icons of

00:03:51,780 --> 00:03:59,080
stateful apps that can be deployed on

00:03:54,820 --> 00:04:01,360
the maizes platform in containers from

00:03:59,080 --> 00:04:04,390
the perspective of the container

00:04:01,360 --> 00:04:07,060
Orchestrator developers and these would

00:04:04,390 --> 00:04:11,950
be Mae's O's but also DC OS Cloud

00:04:07,060 --> 00:04:14,580
Foundry kubernetes docker swarm these

00:04:11,950 --> 00:04:16,930
platforms have over the past years

00:04:14,580 --> 00:04:20,350
essentially all added support for

00:04:16,930 --> 00:04:22,930
external persistent volume outs but they

00:04:20,350 --> 00:04:26,140
did it independently and as a result

00:04:22,930 --> 00:04:27,430
these implementations are inconsistent

00:04:26,140 --> 00:04:31,240
you know they

00:04:27,430 --> 00:04:33,729
of variations in the couplings to vendor

00:04:31,240 --> 00:04:38,500
proprietary api's in the storage front

00:04:33,729 --> 00:04:40,960
and some of the platforms even have

00:04:38,500 --> 00:04:43,139
instances where the storage interface is

00:04:40,960 --> 00:04:45,910
all the way to the storage provider are

00:04:43,139 --> 00:04:48,660
implemented in code that's within the

00:04:45,910 --> 00:04:51,759
source tree of the orchestrator and

00:04:48,660 --> 00:04:53,530
there there has been this will be

00:04:51,759 --> 00:04:55,360
covered later in the presentation but

00:04:53,530 --> 00:04:57,280
some of the orchestrator vendors have

00:04:55,360 --> 00:04:59,830
discovered that maybe that wasn't the

00:04:57,280 --> 00:05:01,900
best decision finally from the

00:04:59,830 --> 00:05:05,710
perspective of storage providers of

00:05:01,900 --> 00:05:08,620
which I'm here representing one we've

00:05:05,710 --> 00:05:10,750
been in the position where we have to

00:05:08,620 --> 00:05:13,750
support all of these container

00:05:10,750 --> 00:05:16,030
orchestrators for our customers and it's

00:05:13,750 --> 00:05:17,440
tough to keep up because the interfaces

00:05:16,030 --> 00:05:19,240
we have to deal with on each

00:05:17,440 --> 00:05:22,930
Orchestrator have been a little bit

00:05:19,240 --> 00:05:25,210
different and this hinders our ability

00:05:22,930 --> 00:05:28,630
to rapidly adopt a new features that

00:05:25,210 --> 00:05:30,789
come out in these orchestrators and it

00:05:28,630 --> 00:05:32,409
also means that our staff when we put

00:05:30,789 --> 00:05:34,599
them on these projects kind of gets

00:05:32,409 --> 00:05:37,380
watered down because they have to be

00:05:34,599 --> 00:05:42,940
trained on all of these platforms and

00:05:37,380 --> 00:05:46,210
you maybe end up having finite resources

00:05:42,940 --> 00:05:48,099
and you know diverting them to this

00:05:46,210 --> 00:05:52,930
horizontal spread just because of these

00:05:48,099 --> 00:05:54,490
variations as an example of this this is

00:05:52,930 --> 00:05:57,130
a summary of the state of the world

00:05:54,490 --> 00:05:59,830
today this is a spreadsheet showing the

00:05:57,130 --> 00:06:02,199
storage plugins across all orchestrators

00:05:59,830 --> 00:06:04,330
and this is just a cut and paste of a

00:06:02,199 --> 00:06:06,370
little spreadsheet that if the screen

00:06:04,330 --> 00:06:08,919
would big was bigger would probably go

00:06:06,370 --> 00:06:10,870
down a couple of floors below us but on

00:06:08,919 --> 00:06:13,810
Amazon EBS alone

00:06:10,870 --> 00:06:15,580
there's like five storage plugins that

00:06:13,810 --> 00:06:17,470
have are being implemented and being

00:06:15,580 --> 00:06:22,659
maintained in the world by various

00:06:17,470 --> 00:06:24,639
vendors what I use as an analogy and

00:06:22,659 --> 00:06:28,930
this is kind of my wrap-up of this whole

00:06:24,639 --> 00:06:31,000
session as to why we want the CSI that

00:06:28,930 --> 00:06:35,529
this is a picture of the electrical

00:06:31,000 --> 00:06:37,900
outlets and plugs in the world and you

00:06:35,529 --> 00:06:39,650
know nobody wants the world of container

00:06:37,900 --> 00:06:44,360
orchestrators and

00:06:39,650 --> 00:06:46,190
and storage providers evolve like what

00:06:44,360 --> 00:06:49,100
has happened with electricity in the

00:06:46,190 --> 00:06:51,470
world in the current situation users

00:06:49,100 --> 00:06:53,510
have problems using your device portably

00:06:51,470 --> 00:06:55,520
if you go by a hair dryer and you go

00:06:53,510 --> 00:06:57,320
travel to Europe what are you gonna do

00:06:55,520 --> 00:06:59,990
buy a new hair dryer or you buy an

00:06:57,320 --> 00:07:01,520
adapter for 30 bucks move to a different

00:06:59,990 --> 00:07:03,290
country and you need to do it all over

00:07:01,520 --> 00:07:05,449
again this doesn't make sense

00:07:03,290 --> 00:07:07,490
even from the Brousseau it's bad from

00:07:05,449 --> 00:07:09,470
the perspective of the user but if you

00:07:07,490 --> 00:07:11,300
say you're an appliance vendor it's bad

00:07:09,470 --> 00:07:14,090
for you as an appliance vendor because

00:07:11,300 --> 00:07:16,130
if everything was uniform you'd get a

00:07:14,090 --> 00:07:18,650
better economy of scale you could have

00:07:16,130 --> 00:07:21,470
one product that you could probably sell

00:07:18,650 --> 00:07:24,039
cheaper because you design it once sell

00:07:21,470 --> 00:07:26,780
exactly the same thing worldwide

00:07:24,039 --> 00:07:27,919
ultimately when the appliance vendors

00:07:26,780 --> 00:07:32,090
have to come up with all these

00:07:27,919 --> 00:07:34,340
permutations it adds costs and even for

00:07:32,090 --> 00:07:37,250
you the user then the stuff is just more

00:07:34,340 --> 00:07:40,750
expensive and they can't put engineering

00:07:37,250 --> 00:07:44,510
effort into adding unique novel features

00:07:40,750 --> 00:07:47,660
it also adds cycle time to how quickly

00:07:44,510 --> 00:07:50,090
these get delivered because in the

00:07:47,660 --> 00:07:52,340
electrical appliance market these things

00:07:50,090 --> 00:07:55,220
typically have to be retested for every

00:07:52,340 --> 00:08:00,229
every market and it just takes you

00:07:55,220 --> 00:08:02,080
longer so this is it at this point I'm

00:08:00,229 --> 00:08:04,580
going to turn it over to James to cover

00:08:02,080 --> 00:08:07,760
some of the specific goals of the

00:08:04,580 --> 00:08:09,940
container storage initiative thanks

00:08:07,760 --> 00:08:09,940
Steve

00:08:14,689 --> 00:08:21,360
so primary goal of CSI is to provide a

00:08:17,789 --> 00:08:22,889
neutral standard protocol for CEOs to

00:08:21,360 --> 00:08:26,399
interact with proprietary storage

00:08:22,889 --> 00:08:28,649
systems you get presented with a

00:08:26,399 --> 00:08:31,469
consistent set of behavior and

00:08:28,649 --> 00:08:35,430
expectations for both orchestrators and

00:08:31,469 --> 00:08:37,769
for vendor implementations of CSI for

00:08:35,430 --> 00:08:39,569
vendors this means there's less work to

00:08:37,769 --> 00:08:42,990
support n number of container

00:08:39,569 --> 00:08:45,660
orchestrators for container

00:08:42,990 --> 00:08:47,819
orchestration systems you get access to

00:08:45,660 --> 00:08:50,100
a broader storage ecosystem you get to

00:08:47,819 --> 00:08:52,620
leverage open api's and you end up with

00:08:50,100 --> 00:08:57,149
looser coupling with with storage

00:08:52,620 --> 00:09:00,329
backends some other goals we're aiming

00:08:57,149 --> 00:09:02,519
to present a small set of API is but

00:09:00,329 --> 00:09:04,050
still enable many use cases in other

00:09:02,519 --> 00:09:07,319
words we want to drive towards kind of a

00:09:04,050 --> 00:09:10,470
lowest common denominator of api's we

00:09:07,319 --> 00:09:12,089
also want a low barrier of entry for CSI

00:09:10,470 --> 00:09:14,339
plugin writers so it should be very easy

00:09:12,089 --> 00:09:20,220
to get up and running you know building

00:09:14,339 --> 00:09:22,920
a new CSI plugin great so from a high

00:09:20,220 --> 00:09:24,569
level CSI presents a control plane

00:09:22,920 --> 00:09:27,990
interface that's largely focused on

00:09:24,569 --> 00:09:30,779
volume lifecycle this interface is

00:09:27,990 --> 00:09:33,509
service oriented versus command line

00:09:30,779 --> 00:09:36,060
interface this allows plugin services to

00:09:33,509 --> 00:09:39,329
easily co-locate with other required

00:09:36,060 --> 00:09:43,560
long-running services the fuse demons or

00:09:39,329 --> 00:09:47,279
a cluster or an FF services services are

00:09:43,560 --> 00:09:49,769
exposed via G RPC some advantages to

00:09:47,279 --> 00:09:53,639
this there's understood mechanisms for

00:09:49,769 --> 00:09:55,110
approximating a PC calls G RPC supports

00:09:53,639 --> 00:09:58,709
streaming responses which is something

00:09:55,110 --> 00:10:00,180
that we're considering post v1g RPC

00:09:58,709 --> 00:10:04,250
scales well it's an open specification

00:10:00,180 --> 00:10:04,250
and there's great community support

00:10:06,680 --> 00:10:12,379
from a configuration and operation

00:10:08,749 --> 00:10:16,389
perspective CSI places an emphasis on

00:10:12,379 --> 00:10:19,910
protocol over operational specification

00:10:16,389 --> 00:10:21,559
CSI allows plug-in supervisors whether

00:10:19,910 --> 00:10:23,509
that's a container Orchestrator or

00:10:21,559 --> 00:10:26,929
something else to decide how to deploy

00:10:23,509 --> 00:10:28,910
an isolate plugins CSI does not specify

00:10:26,929 --> 00:10:31,610
security protocols an operator is

00:10:28,910 --> 00:10:33,860
responsible for protecting a UNIX socket

00:10:31,610 --> 00:10:37,579
just as they would any other file system

00:10:33,860 --> 00:10:39,889
object with respect to packaging CSI

00:10:37,579 --> 00:10:42,679
does not mandate a container image

00:10:39,889 --> 00:10:44,029
format the spec suggests that you try to

00:10:42,679 --> 00:10:46,970
use something that's across Co

00:10:44,029 --> 00:10:48,860
compatible there's pretty minimal

00:10:46,970 --> 00:10:51,769
expectations with respect to supervision

00:10:48,860 --> 00:10:55,069
for example plugins should terminate

00:10:51,769 --> 00:10:58,519
upon request getting a signature and

00:10:55,069 --> 00:11:05,329
last isolation of a plugin is not

00:10:58,519 --> 00:11:09,110
guaranteed but it's very likely so what

00:11:05,329 --> 00:11:11,240
makes up a plug-in CSI spec defines 3G

00:11:09,110 --> 00:11:15,499
RPC services identity controller and

00:11:11,240 --> 00:11:17,870
node the composition of a particular

00:11:15,499 --> 00:11:21,290
plug-in binary may depend on the

00:11:17,870 --> 00:11:24,740
deployment requirements for example a

00:11:21,290 --> 00:11:27,769
headless plug-in will probably bundle

00:11:24,740 --> 00:11:30,350
all three of these services together to

00:11:27,769 --> 00:11:32,749
illustrate this there's some diagrams on

00:11:30,350 --> 00:11:35,929
this slide to the right we have a

00:11:32,749 --> 00:11:39,730
headless model so you can see in the

00:11:35,929 --> 00:11:41,839
middle there's the orchestrator and

00:11:39,730 --> 00:11:43,339
around it you've got the nodes where

00:11:41,839 --> 00:11:47,059
you've got your containers running and

00:11:43,339 --> 00:11:49,519
on each node there is a plug-in instance

00:11:47,059 --> 00:11:51,829
running and the plug-in instance is

00:11:49,519 --> 00:11:56,600
exposing both the CSI controller and

00:11:51,829 --> 00:11:58,399
node services on the left side again

00:11:56,600 --> 00:12:00,850
you've got the orchestrator in the

00:11:58,399 --> 00:12:02,809
middle but you've also got a plug-in

00:12:00,850 --> 00:12:05,420
co-located with the orchestrator and

00:12:02,809 --> 00:12:07,670
that plugin is exposing the controller

00:12:05,420 --> 00:12:09,470
service and then on the nodes where the

00:12:07,670 --> 00:12:11,959
containers run that are on the outside

00:12:09,470 --> 00:12:14,420
those nodes are running plug-in

00:12:11,959 --> 00:12:16,839
instances that are exposing the CSI node

00:12:14,420 --> 00:12:16,839
service

00:12:19,560 --> 00:12:25,060
the storage vendor is left to decide

00:12:23,050 --> 00:12:26,760
which deployment strategy is appropriate

00:12:25,060 --> 00:12:30,220
for their plug and implementation and

00:12:26,760 --> 00:12:32,980
it's up to the operator to configure the

00:12:30,220 --> 00:12:37,450
container Orchestrator according to the

00:12:32,980 --> 00:12:39,459
storage vendor documentation so the

00:12:37,450 --> 00:12:42,790
slide shows the lifetime of a volume

00:12:39,459 --> 00:12:44,079
from creation to deletion shows the

00:12:42,790 --> 00:12:46,329
different states that a volume goes

00:12:44,079 --> 00:12:49,149
through as different CSI our pcs are

00:12:46,329 --> 00:12:52,300
invoked and shows that a container

00:12:49,149 --> 00:12:55,959
Orchestrator is driving the provisioning

00:12:52,300 --> 00:12:59,560
process so a container orchestrator will

00:12:55,959 --> 00:13:01,120
invoke a create volume call it will

00:12:59,560 --> 00:13:03,550
invoke the container publish volume call

00:13:01,120 --> 00:13:06,760
which is like saying attached to a node

00:13:03,550 --> 00:13:08,589
for example it will invoke the node

00:13:06,760 --> 00:13:09,970
publish volume call which is kind of

00:13:08,589 --> 00:13:14,440
like saying hey I'm gonna mount this

00:13:09,970 --> 00:13:16,180
volume so plugins advertise support for

00:13:14,440 --> 00:13:19,709
these lifecycle operations through

00:13:16,180 --> 00:13:22,060
capability RPCs and a couple examples of

00:13:19,709 --> 00:13:24,279
those are PCs or that create and delete

00:13:22,060 --> 00:13:28,360
volume are PCs and the control they're

00:13:24,279 --> 00:13:32,079
published and unpublished are PCs so

00:13:28,360 --> 00:13:34,480
that brings us to the API it's gonna be

00:13:32,079 --> 00:13:36,730
a brief walkthrough of the API the API

00:13:34,480 --> 00:13:39,520
is really intended for consumption by

00:13:36,730 --> 00:13:42,730
container orchestrators like besos and

00:13:39,520 --> 00:13:44,110
not by end users that said it's still

00:13:42,730 --> 00:13:46,209
useful to understand what's happening

00:13:44,110 --> 00:13:48,760
under the hood so we'll start with the

00:13:46,209 --> 00:13:51,700
identity service this is important for

00:13:48,760 --> 00:13:53,170
virgin negotiation a container

00:13:51,700 --> 00:13:56,320
Orchestrator invokes that get supported

00:13:53,170 --> 00:13:57,670
versions RPC the plugin responds with a

00:13:56,320 --> 00:13:59,500
list of supported versions and then the

00:13:57,670 --> 00:14:01,649
orchestrator selects which a version to

00:13:59,500 --> 00:14:04,810
use for future RPC calls to the plugin

00:14:01,649 --> 00:14:07,510
all CSI endpoints are required to

00:14:04,810 --> 00:14:12,910
support this service regardless of the

00:14:07,510 --> 00:14:15,670
deployment node the next type of service

00:14:12,910 --> 00:14:18,220
is the controller service this runs

00:14:15,670 --> 00:14:19,510
either in a central location or can run

00:14:18,220 --> 00:14:21,670
on all the nodes themselves it really

00:14:19,510 --> 00:14:26,199
depends on the deployment node sorry the

00:14:21,670 --> 00:14:28,149
deployment mode the first call here get

00:14:26,199 --> 00:14:31,420
controller capabilities is important

00:14:28,149 --> 00:14:32,650
because it reports which our pcs are

00:14:31,420 --> 00:14:36,370
actually implemented

00:14:32,650 --> 00:14:38,800
by the plugin and all these are pcs

00:14:36,370 --> 00:14:40,300
below there are the optional are pcs

00:14:38,800 --> 00:14:44,320
that may or may not be implemented by a

00:14:40,300 --> 00:14:48,040
particular plugin so create and delete

00:14:44,320 --> 00:14:49,900
volume create volume accepts a name and

00:14:48,040 --> 00:14:52,090
capabilities size for the volume you

00:14:49,900 --> 00:14:53,620
want to create delete is the inverse it

00:14:52,090 --> 00:14:55,930
deletes the volume from the storage

00:14:53,620 --> 00:14:59,710
provider controller published and

00:14:55,930 --> 00:15:02,140
unpublished similar to they started out

00:14:59,710 --> 00:15:03,760
as attach and detach we decided those

00:15:02,140 --> 00:15:06,670
names really don't fit all the workflows

00:15:03,760 --> 00:15:07,960
so we landed back on published and

00:15:06,670 --> 00:15:12,310
unpublished and just prefixed it with

00:15:07,960 --> 00:15:15,790
controller again this these calls may be

00:15:12,310 --> 00:15:17,050
useful for centralized deployments they

00:15:15,790 --> 00:15:19,060
could also be useful for headless

00:15:17,050 --> 00:15:21,910
deployments it really all depends on the

00:15:19,060 --> 00:15:25,210
plugin implementation the list volumes

00:15:21,910 --> 00:15:26,980
call is useful for discovering pre

00:15:25,210 --> 00:15:29,800
created volumes it does not imply that

00:15:26,980 --> 00:15:31,870
the create and delete our pcs are

00:15:29,800 --> 00:15:34,990
supported the validate volume

00:15:31,870 --> 00:15:37,470
capabilities RPC allows a container

00:15:34,990 --> 00:15:39,960
Orchestrator to determine if some volume

00:15:37,470 --> 00:15:42,960
may be a volume returned by list volumes

00:15:39,960 --> 00:15:45,360
if that volume supports some set of

00:15:42,960 --> 00:15:48,490
capabilities and or parameters and

00:15:45,360 --> 00:15:51,130
lastly get capacity allows a CEO to

00:15:48,490 --> 00:15:51,730
determine the available space on the

00:15:51,130 --> 00:15:55,080
back end

00:15:51,730 --> 00:15:55,080
typically for our create volume call

00:15:55,440 --> 00:16:02,140
last is the node service and the service

00:15:59,350 --> 00:16:03,910
runs on the actual nodes upon which

00:16:02,140 --> 00:16:04,870
volumes are mounted so these are the

00:16:03,910 --> 00:16:08,650
nodes that are running all your

00:16:04,870 --> 00:16:10,660
containers probe node is an important

00:16:08,650 --> 00:16:12,040
call that checks the configuration of

00:16:10,660 --> 00:16:15,250
the plugin it checks the required

00:16:12,040 --> 00:16:16,900
software any required devices if that

00:16:15,250 --> 00:16:18,810
call fails the container Orchestrator

00:16:16,900 --> 00:16:22,720
decides that the plugin is not ready to

00:16:18,810 --> 00:16:24,070
service requests node unpublished and

00:16:22,720 --> 00:16:28,420
unpublished you can think about these

00:16:24,070 --> 00:16:32,440
like mount and unmount get node ID

00:16:28,420 --> 00:16:34,870
presents a consistent identifier for the

00:16:32,440 --> 00:16:38,020
node from the perspective of a plugin

00:16:34,870 --> 00:16:39,580
instance and get capabilities calls

00:16:38,020 --> 00:16:44,110
really just a placeholder for now there

00:16:39,580 --> 00:16:46,030
is no meet there yet and that was it

00:16:44,110 --> 00:16:47,260
brief walk through the api the

00:16:46,030 --> 00:16:49,120
turn her over to G now who's going to

00:16:47,260 --> 00:16:52,440
cover how CSI is going to be integrated

00:16:49,120 --> 00:16:56,290
into maces right thanks James

00:16:52,440 --> 00:16:58,990
all right um so James kind of explain

00:16:56,290 --> 00:17:01,600
like how CSI itself works and what are

00:16:58,990 --> 00:17:04,750
the api's and I'm gonna cover like

00:17:01,600 --> 00:17:09,520
what's our plan to in May cells to adopt

00:17:04,750 --> 00:17:12,430
CSI as part of the storage work so what

00:17:09,520 --> 00:17:13,900
we plan to do for CSI integration is to

00:17:12,430 --> 00:17:16,600
introduce this new concept called

00:17:13,900 --> 00:17:18,790
resource provider if you think about

00:17:16,600 --> 00:17:21,490
males right now we do have a way to

00:17:18,790 --> 00:17:23,350
customize the use of the resource like

00:17:21,490 --> 00:17:25,300
you can write your own framework to to

00:17:23,350 --> 00:17:27,040
to customize the the use of the resource

00:17:25,300 --> 00:17:30,280
but we don't really have a way to

00:17:27,040 --> 00:17:31,990
customize providing resources like right

00:17:30,280 --> 00:17:35,050
now like this is like hard-coded

00:17:31,990 --> 00:17:36,880
basically agent will put up and discover

00:17:35,050 --> 00:17:39,520
a bunch of resources on the agent and

00:17:36,880 --> 00:17:40,990
report those resources to the master but

00:17:39,520 --> 00:17:42,610
we don't have a way to customize that

00:17:40,990 --> 00:17:44,230
and the whole concept of resource

00:17:42,610 --> 00:17:47,260
provider is trying to provide an

00:17:44,230 --> 00:17:49,300
abstraction in maysa allowing you like

00:17:47,260 --> 00:17:52,240
allowing operators or on cluster

00:17:49,300 --> 00:17:55,300
administrators who are to customize the

00:17:52,240 --> 00:17:58,450
resource providing part so it can be

00:17:55,300 --> 00:18:00,130
local or external so local resource

00:17:58,450 --> 00:18:02,230
provider means that the resource it

00:18:00,130 --> 00:18:04,390
provides actually tied to a particular

00:18:02,230 --> 00:18:07,890
agent for example think about CPU memory

00:18:04,390 --> 00:18:10,930
disk some the disk are local and

00:18:07,890 --> 00:18:12,850
external resource provider are providing

00:18:10,930 --> 00:18:14,830
those resources that are not tied to a

00:18:12,850 --> 00:18:18,280
particular agent think about some

00:18:14,830 --> 00:18:20,800
resource like remote disk storage or IP

00:18:18,280 --> 00:18:22,540
addresses that not like not tied to a

00:18:20,800 --> 00:18:24,430
particular agent so we do want to

00:18:22,540 --> 00:18:26,230
support these two kind of concepts local

00:18:24,430 --> 00:18:28,210
resource provider and external resource

00:18:26,230 --> 00:18:31,270
provider and if you think about that

00:18:28,210 --> 00:18:33,220
aging itself right now can be treated as

00:18:31,270 --> 00:18:34,840
a local resource provider providing

00:18:33,220 --> 00:18:38,530
those traditional CPU memory disk

00:18:34,840 --> 00:18:41,950
resources and plus the other part which

00:18:38,530 --> 00:18:43,960
is task task management part and as I

00:18:41,950 --> 00:18:45,520
said already so the reason we introduced

00:18:43,960 --> 00:18:48,730
this is because we want to allow users

00:18:45,520 --> 00:18:50,320
to do customization extension and also

00:18:48,730 --> 00:18:50,770
like missus don't have this concept

00:18:50,320 --> 00:18:53,110
called

00:18:50,770 --> 00:18:55,260
a global resource or external resources

00:18:53,110 --> 00:18:58,870
and the whole resource provider

00:18:55,260 --> 00:18:59,980
extraction is trying to support that and

00:18:58,870 --> 00:19:01,900
then given

00:18:59,980 --> 00:19:04,510
we have this resource provider interface

00:19:01,900 --> 00:19:06,429
that we plan to introduce and for

00:19:04,510 --> 00:19:08,470
storage particularly we want to

00:19:06,429 --> 00:19:12,240
introduce a first-class storage resource

00:19:08,470 --> 00:19:15,280
provider as a site can be both local and

00:19:12,240 --> 00:19:17,110
external so-called local storage storage

00:19:15,280 --> 00:19:19,540
local resource provider and storage

00:19:17,110 --> 00:19:22,720
remote Gorge external resource provider

00:19:19,540 --> 00:19:25,870
so the storage provider will talk to the

00:19:22,720 --> 00:19:28,000
CSI plug-in to get the available storage

00:19:25,870 --> 00:19:29,679
space from the plug-in itself for

00:19:28,000 --> 00:19:31,660
example as you as James mentioned

00:19:29,679 --> 00:19:34,000
there's a call in the controller service

00:19:31,660 --> 00:19:35,860
get capacity so that's something that we

00:19:34,000 --> 00:19:37,720
plan to call on to get the actual

00:19:35,860 --> 00:19:41,919
capacity from the storage provider and

00:19:37,720 --> 00:19:43,630
exposed to mesos as disk resources so we

00:19:41,919 --> 00:19:45,760
want to extract away all the details

00:19:43,630 --> 00:19:48,460
from the plug-in itself and only expose

00:19:45,760 --> 00:19:50,140
like resources to mrs. masters and the

00:19:48,460 --> 00:19:52,270
reason another job of the resource

00:19:50,140 --> 00:19:53,890
provider is trying to handle operations

00:19:52,270 --> 00:19:56,049
for example we have some existing

00:19:53,890 --> 00:19:58,900
operations like reserve crate persistent

00:19:56,049 --> 00:20:00,730
volume and we want to extend that on to

00:19:58,900 --> 00:20:02,559
support on things like create blog

00:20:00,730 --> 00:20:05,940
create volume which is like just

00:20:02,559 --> 00:20:08,620
creating provision and deprovision

00:20:05,940 --> 00:20:10,840
volumes from those storage providers and

00:20:08,620 --> 00:20:11,559
the goal in Mesa support is pretty

00:20:10,840 --> 00:20:13,690
simple

00:20:11,559 --> 00:20:16,480
I offer it's at this so the storage

00:20:13,690 --> 00:20:19,750
vendors just need to provide missus a

00:20:16,480 --> 00:20:22,210
single docker image that contains all

00:20:19,750 --> 00:20:24,220
the CSI plug-in bits and configurations

00:20:22,210 --> 00:20:25,410
and the Maysles where hand will handle

00:20:24,220 --> 00:20:27,970
the rest

00:20:25,410 --> 00:20:31,960
so this is kind of the high-level

00:20:27,970 --> 00:20:34,570
architecture of how we can integrate CSI

00:20:31,960 --> 00:20:37,299
into mesas as you can see here we have a

00:20:34,570 --> 00:20:39,760
master in agent we do have two type of

00:20:37,299 --> 00:20:41,620
resource provider here external storage

00:20:39,760 --> 00:20:45,130
storage external resource provider and

00:20:41,620 --> 00:20:48,400
storage local resource providers and for

00:20:45,130 --> 00:20:50,049
I mean we do do things differently for

00:20:48,400 --> 00:20:53,980
those two different types and for

00:20:50,049 --> 00:20:56,049
external ones we run a external like we

00:20:53,980 --> 00:20:57,490
run a controller plugins controller CSI

00:20:56,049 --> 00:21:00,040
plugging in a centralized location

00:20:57,490 --> 00:21:04,150
probably scheduled by a frame like

00:21:00,040 --> 00:21:06,280
marathon or Aurora and on the exterior

00:21:04,150 --> 00:21:08,740
storage resource provider will using G

00:21:06,280 --> 00:21:10,390
RPC to talk to the controller plug-in in

00:21:08,740 --> 00:21:12,940
this case for example we have a EBS

00:21:10,390 --> 00:21:13,779
plug-in here on that the storage

00:21:12,940 --> 00:21:15,969
resource provided

00:21:13,779 --> 00:21:17,889
talk to you and to do our dynamic

00:21:15,969 --> 00:21:20,409
dynamic provisioning volumes and

00:21:17,889 --> 00:21:22,389
de-provisioning volumes and once the

00:21:20,409 --> 00:21:24,309
youth and once the frame of used get

00:21:22,389 --> 00:21:25,960
those resources disk resources and

00:21:24,309 --> 00:21:28,450
trying to launch a task using those

00:21:25,960 --> 00:21:30,879
resources and master with an attached to

00:21:28,450 --> 00:21:34,989
the agent and understand end up plugging

00:21:30,879 --> 00:21:37,809
for EBS running on agent know as I said

00:21:34,989 --> 00:21:39,369
James mentioned earlier that for CSI you

00:21:37,809 --> 00:21:40,929
do have to implement the no plug-in

00:21:39,369 --> 00:21:42,789
interface and also the controller

00:21:40,929 --> 00:21:45,099
plug-in interface so the no plugin

00:21:42,789 --> 00:21:47,169
interface is gonna be responsible on to

00:21:45,099 --> 00:21:49,089
like to make sure the resource you want

00:21:47,169 --> 00:21:52,119
to use on that agent note actually shows

00:21:49,089 --> 00:21:54,190
up for example on you want to do an

00:21:52,119 --> 00:21:55,809
attach to make sure in EBS you want to

00:21:54,190 --> 00:21:57,279
do an attach to make sure that the two

00:21:55,809 --> 00:21:59,799
volume actually show up on a note and

00:21:57,279 --> 00:22:01,599
you want to do a mount and the whole

00:21:59,799 --> 00:22:03,399
reason in CSI that we want to separate

00:22:01,599 --> 00:22:05,259
no plug-in from the controller plugin is

00:22:03,399 --> 00:22:07,779
because there are some there are like 13

00:22:05,259 --> 00:22:09,999
operations has to has to be performed on

00:22:07,779 --> 00:22:13,299
the node for example file system mount

00:22:09,999 --> 00:22:15,549
and make a fast things like this so this

00:22:13,299 --> 00:22:17,649
is for external volume support for local

00:22:15,549 --> 00:22:20,619
storage on support for example if you

00:22:17,649 --> 00:22:23,080
have an LVN plug-in what we end up doing

00:22:20,619 --> 00:22:25,539
is actually like we run post the

00:22:23,080 --> 00:22:27,489
controller plugging and the note plugin

00:22:25,539 --> 00:22:30,159
in the same container so that same

00:22:27,489 --> 00:22:31,779
container provides two services and the

00:22:30,159 --> 00:22:35,080
local storage resource provider will

00:22:31,779 --> 00:22:36,940
talk to that on CSI plug-in as well as

00:22:35,080 --> 00:22:40,179
the agent will talk to the CSI plug-in

00:22:36,940 --> 00:22:42,609
on to to properly like do provisioning

00:22:40,179 --> 00:22:43,929
and de-provisioning and make sure the

00:22:42,609 --> 00:22:46,359
resource actually show up on a node

00:22:43,929 --> 00:22:50,229
which it's kind of a no op in the local

00:22:46,359 --> 00:22:52,389
resource provider case alright so this

00:22:50,229 --> 00:22:54,429
is kind of the roadmap of storage

00:22:52,389 --> 00:22:56,320
supporting mesas we're gonna first do

00:22:54,429 --> 00:22:59,469
the local resource provider integration

00:22:56,320 --> 00:23:01,119
and and then integrate with CSI and then

00:22:59,469 --> 00:23:02,769
we're gonna do the external resource

00:23:01,119 --> 00:23:04,179
provider because this is a little harder

00:23:02,769 --> 00:23:07,389
because we don't have we don't really

00:23:04,179 --> 00:23:10,119
have a notion of global resources inside

00:23:07,389 --> 00:23:11,979
mesas and it's a little harder to do

00:23:10,119 --> 00:23:14,169
that so this we decide to do that later

00:23:11,979 --> 00:23:16,749
but it's kind of part of the roadmap and

00:23:14,169 --> 00:23:19,210
and also we want to integrate CSI and

00:23:16,749 --> 00:23:21,249
you can track the progress in this epoch

00:23:19,210 --> 00:23:23,080
so the lrp local resource provider

00:23:21,249 --> 00:23:25,419
support is targeted for the next release

00:23:23,080 --> 00:23:27,370
and the ERP is target for the release

00:23:25,419 --> 00:23:29,670
after that which is 1/6

00:23:27,370 --> 00:23:32,290
so our really cycle is two months so

00:23:29,670 --> 00:23:32,680
expect that to be available in two

00:23:32,290 --> 00:23:34,630
months

00:23:32,680 --> 00:23:36,310
and our RP support is gonna be the

00:23:34,630 --> 00:23:39,010
release after that which is four months

00:23:36,310 --> 00:23:49,300
or five months all right now I'm gonna

00:23:39,010 --> 00:23:52,480
hand over to Steve thanks so I mean I'm

00:23:49,300 --> 00:23:55,180
back on stage again to represent CSI

00:23:52,480 --> 00:23:58,000
from a storage vendors perspective and

00:23:55,180 --> 00:24:01,750
what you see here is a quick overview of

00:23:58,000 --> 00:24:03,970
our X ray storage provider at the top

00:24:01,750 --> 00:24:05,860
you see container orchestrators they go

00:24:03,970 --> 00:24:08,710
through this the container storage

00:24:05,860 --> 00:24:11,740
interface spec and get to the r x ray

00:24:08,710 --> 00:24:15,610
plug in R X ray actually is written as

00:24:11,740 --> 00:24:18,520
kind of an out of tree generic plug-in

00:24:15,610 --> 00:24:23,020
that can have plugins implemented onto

00:24:18,520 --> 00:24:25,780
its own so you see here that we can

00:24:23,020 --> 00:24:30,610
deliver NFS block v FS as well as a

00:24:25,780 --> 00:24:33,070
number of other storage providers rex

00:24:30,610 --> 00:24:35,830
ray has been delivering persistent

00:24:33,070 --> 00:24:39,460
volumes to mezzos since october of 2015

00:24:35,830 --> 00:24:41,170
so it has had quite a history I'm sure

00:24:39,460 --> 00:24:44,200
that some of you in the audience have it

00:24:41,170 --> 00:24:49,800
in production today with the pre CSI

00:24:44,200 --> 00:24:52,600
storage interface it Sunday September

00:24:49,800 --> 00:24:55,420
September the 12 we actually released

00:24:52,600 --> 00:24:59,850
Rex for a version zero point ten which

00:24:55,420 --> 00:25:02,290
is the first implementation of the CSI

00:24:59,850 --> 00:25:05,140
proposed specification in the world

00:25:02,290 --> 00:25:07,030
somebody had to go first so at this

00:25:05,140 --> 00:25:09,370
point in time as she said it isn't

00:25:07,030 --> 00:25:12,490
supported in the container Orchestrator

00:25:09,370 --> 00:25:14,470
yet to my knowledge it's not supported

00:25:12,490 --> 00:25:16,480
in any container Orchestrator but we

00:25:14,470 --> 00:25:20,230
felt that we wanted to get something out

00:25:16,480 --> 00:25:22,150
there in the world to enable projects

00:25:20,230 --> 00:25:27,070
like mais au s-- and DCOs

00:25:22,150 --> 00:25:29,050
to do work on the other side and a key

00:25:27,070 --> 00:25:31,290
here is I don't want anybody to get bent

00:25:29,050 --> 00:25:33,370
out of shape but I'm calling a proposed

00:25:31,290 --> 00:25:36,400
specification because at this point in

00:25:33,370 --> 00:25:38,170
time and the container orchestrators get

00:25:36,400 --> 00:25:40,400
a vote on this and we actually

00:25:38,170 --> 00:25:43,670
discovered a couple of issues as

00:25:40,400 --> 00:25:46,850
were building the Rex ray implementation

00:25:43,670 --> 00:25:49,430
of a storage provider so the spec I

00:25:46,850 --> 00:25:52,040
think is pretty darn close to what the

00:25:49,430 --> 00:25:55,220
final first official declared release

00:25:52,040 --> 00:25:57,530
spec will be but technically this is a

00:25:55,220 --> 00:26:01,010
proposed implementation at this point

00:25:57,530 --> 00:26:03,470
and should that change I think we'll be

00:26:01,010 --> 00:26:06,860
pretty rapidly on board with adapting to

00:26:03,470 --> 00:26:09,140
whatever change takes place this was

00:26:06,860 --> 00:26:11,480
made just to enable some early

00:26:09,140 --> 00:26:16,120
foundational work for the orchestrators

00:26:11,480 --> 00:26:18,650
like mazes kubernetes DCOs docker swarm

00:26:16,120 --> 00:26:22,520
just kind of an architectural overview

00:26:18,650 --> 00:26:25,100
of what we've what the plan is for rex

00:26:22,520 --> 00:26:28,730
ray we start with the container storage

00:26:25,100 --> 00:26:31,850
interface we're planning on doing a

00:26:28,730 --> 00:26:35,990
conformance like a conformance to spec

00:26:31,850 --> 00:26:39,980
test suite we build rex ray and the

00:26:35,990 --> 00:26:43,220
container orchestrators talk through the

00:26:39,980 --> 00:26:46,640
CSI spec calls for G RPC to these

00:26:43,220 --> 00:26:49,280
plugins these are the plugins that we

00:26:46,640 --> 00:26:51,980
just announced so we've got coverage in

00:26:49,280 --> 00:26:53,750
public clouds for all the flavors of

00:26:51,980 --> 00:26:58,660
storage that you're likely to use on

00:26:53,750 --> 00:27:01,850
Amazon EBS EFS s3 Google persistent disk

00:26:58,660 --> 00:27:05,870
digitalocean block storage if you run on

00:27:01,850 --> 00:27:08,360
Prem we've got support for CEFR DB we've

00:27:05,870 --> 00:27:12,530
got three more or less generic flavors

00:27:08,360 --> 00:27:15,950
for block NFS virtual file system for

00:27:12,530 --> 00:27:19,310
the Dell EMC on pram product line we

00:27:15,950 --> 00:27:22,670
shipped with initial support for scale

00:27:19,310 --> 00:27:25,340
IO and Isilon and then finally we have

00:27:22,670 --> 00:27:28,220
support for OpenStack cinder in this

00:27:25,340 --> 00:27:31,640
first release now if you're using it in

00:27:28,220 --> 00:27:33,650
the pre CSI interfaces if you have user

00:27:31,640 --> 00:27:36,730
x-ray now you're probably aware of this

00:27:33,650 --> 00:27:39,760
but there's even broader support but we

00:27:36,730 --> 00:27:42,380
some of the support for all of the

00:27:39,760 --> 00:27:45,470
storage plugins that are available with

00:27:42,380 --> 00:27:48,830
rex ray today isn't quite enabled on CSI

00:27:45,470 --> 00:27:51,020
yet but it's in our roadmap so the

00:27:48,830 --> 00:27:53,920
roadmap calls for the next release rex

00:27:51,020 --> 00:27:58,810
raid 0.11 roughly December

00:27:53,920 --> 00:28:01,380
of this year I'm gonna turn it back over

00:27:58,810 --> 00:28:05,320
to Chakri then I'm just one storage

00:28:01,380 --> 00:28:09,370
vendor but the goal of CSI is to have

00:28:05,320 --> 00:28:10,870
broad industry support here so you know

00:28:09,370 --> 00:28:13,570
they emphasize that I'm gonna bring

00:28:10,870 --> 00:28:16,480
another on stage and by the way if there

00:28:13,570 --> 00:28:19,270
are any storage vendors in the audience

00:28:16,480 --> 00:28:21,430
I'd be happy to talk with you if you

00:28:19,270 --> 00:28:28,020
haven't gotten on board CSI yet to

00:28:21,430 --> 00:28:28,020
discuss this chakra thank you steve

00:28:29,970 --> 00:28:36,040
storage solutions for containers so

00:28:33,700 --> 00:28:38,460
initially when we started looking at we

00:28:36,040 --> 00:28:40,510
looked at kubernetes and we realize that

00:28:38,460 --> 00:28:42,670
there is no way you can develop your

00:28:40,510 --> 00:28:45,340
plugin out of the kubernetes codebase

00:28:42,670 --> 00:28:47,440
all your plugins has to be inside of the

00:28:45,340 --> 00:28:49,630
kubernetes codebase and it's very

00:28:47,440 --> 00:28:53,230
tightly coupled with kubernetes release

00:28:49,630 --> 00:28:55,810
cycle so we dollop flex volume it was a

00:28:53,230 --> 00:28:59,940
good start but it was limited to one

00:28:55,810 --> 00:28:59,940
Orchestrator it provided a simplified

00:29:00,480 --> 00:29:03,670
thank you

00:29:01,750 --> 00:29:07,090
it provided a simplified vendor-neutral

00:29:03,670 --> 00:29:10,830
interface but it only supported one

00:29:07,090 --> 00:29:13,240
Orchestrator so now here comes CSI and

00:29:10,830 --> 00:29:16,240
we are very excited to be part of the

00:29:13,240 --> 00:29:19,630
CSI community and I'm actually grateful

00:29:16,240 --> 00:29:22,000
to the ecosystems for bringing this

00:29:19,630 --> 00:29:24,550
together and making it happen so thanks

00:29:22,000 --> 00:29:27,460
to Google mezzos docker and cloud

00:29:24,550 --> 00:29:33,010
foundry so they worked hard to make it

00:29:27,460 --> 00:29:36,750
happen in the last few months so what is

00:29:33,010 --> 00:29:39,580
CSI from a vendor's perspective it is it

00:29:36,750 --> 00:29:42,850
is one storage plugin interface to

00:29:39,580 --> 00:29:44,590
support multiple orchestrators so as a

00:29:42,850 --> 00:29:45,670
vendor you don't have one plugin and

00:29:44,590 --> 00:29:49,060
it's going to work with multiple

00:29:45,670 --> 00:29:51,340
orchestrators and without this we have

00:29:49,060 --> 00:29:53,380
to develop multiple releases of our

00:29:51,340 --> 00:29:55,390
plugin with multiple orchestrators and

00:29:53,380 --> 00:29:56,830
we are consuming actually we are

00:29:55,390 --> 00:29:59,560
spending a lot of time in development

00:29:56,830 --> 00:30:02,350
and testing these various enrollments so

00:29:59,560 --> 00:30:03,800
with a united ecosystem now there is a

00:30:02,350 --> 00:30:06,140
single interface

00:30:03,800 --> 00:30:09,110
and we don't have to keep on supporting

00:30:06,140 --> 00:30:11,030
all the test matrix which you use to and

00:30:09,110 --> 00:30:12,830
also with the United echo system what we

00:30:11,030 --> 00:30:15,140
realized is every Orchestrator was

00:30:12,830 --> 00:30:18,290
innovating separately and they're

00:30:15,140 --> 00:30:21,260
developing their own interfaces so and

00:30:18,290 --> 00:30:24,110
there was a lot of duplication in that

00:30:21,260 --> 00:30:25,760
effort so once we got together actually

00:30:24,110 --> 00:30:28,250
we can say that like there's only now

00:30:25,760 --> 00:30:29,750
one interface and there's a lot of new

00:30:28,250 --> 00:30:33,470
innovation happening in that area and

00:30:29,750 --> 00:30:35,750
there is no duplication and as a vendor

00:30:33,470 --> 00:30:38,360
for our customers what this gives is a

00:30:35,750 --> 00:30:42,110
proven interface so that people are

00:30:38,360 --> 00:30:51,040
easily and ready to adopt the container

00:30:42,110 --> 00:30:51,040
infrastructures okay and thank you so

00:30:52,830 --> 00:30:58,590
so we're didn't hear a rap up here but

00:30:56,490 --> 00:31:00,900
if you're wondering who's involved with

00:30:58,590 --> 00:31:03,300
the CSI this is a broad initiative so

00:31:00,900 --> 00:31:05,850
you see there the logos of essentially

00:31:03,300 --> 00:31:08,070
all the major container orchestrators as

00:31:05,850 --> 00:31:10,710
well as a lot of the major storage

00:31:08,070 --> 00:31:13,920
providers we had to do this deck a

00:31:10,710 --> 00:31:16,950
couple weeks ago for because the Linux

00:31:13,920 --> 00:31:19,140
Foundation wants the the decks submitted

00:31:16,950 --> 00:31:21,000
early so I may have even missed a few

00:31:19,140 --> 00:31:24,420
here it's hard to keep up because this

00:31:21,000 --> 00:31:26,130
thing is gaining momentum so if you're a

00:31:24,420 --> 00:31:29,880
storage provider out there that is

00:31:26,130 --> 00:31:32,400
committed to doing CSI enablement let me

00:31:29,880 --> 00:31:39,150
know so that if I deliver this deck

00:31:32,400 --> 00:31:41,520
again I can add you to the chart what

00:31:39,150 --> 00:31:44,460
we're delivering now is just the first

00:31:41,520 --> 00:31:48,420
step so I want to be open about what it

00:31:44,460 --> 00:31:51,420
isn't in CSI and the list is up there

00:31:48,420 --> 00:31:53,270
but on the roadmap past the initial

00:31:51,420 --> 00:31:59,250
release we have plans to support

00:31:53,270 --> 00:32:02,180
snapshots volume resizing quotas support

00:31:59,250 --> 00:32:06,420
for containerization of the Windows OS

00:32:02,180 --> 00:32:08,160
and then finally user ID and credential

00:32:06,420 --> 00:32:10,100
pass-through all the way from the

00:32:08,160 --> 00:32:13,290
container Orchestrator to the storage

00:32:10,100 --> 00:32:17,340
provider because some storage providers

00:32:13,290 --> 00:32:24,000
actually have features that rely on user

00:32:17,340 --> 00:32:28,580
identification as a means to implement

00:32:24,000 --> 00:32:28,580
additional forms of security

00:32:29,870 --> 00:32:36,150
finally in community this stuff is

00:32:33,150 --> 00:32:38,280
underway now we've got a number of

00:32:36,150 --> 00:32:40,620
storage providers working on this as

00:32:38,280 --> 00:32:43,080
well as all the major container

00:32:40,620 --> 00:32:46,110
orchestrators but there's room here if

00:32:43,080 --> 00:32:48,540
you're a user of a container orchestrate

00:32:46,110 --> 00:32:50,880
or a consumer to get involved in this

00:32:48,540 --> 00:32:53,580
program you know and it's a great

00:32:50,880 --> 00:32:55,110
opportunity because I mentioned on the

00:32:53,580 --> 00:32:59,230
roadmap we have plans to support

00:32:55,110 --> 00:33:01,780
snapshot which would enable backup

00:32:59,230 --> 00:33:04,390
backup strategies and a number of other

00:33:01,780 --> 00:33:06,550
features but if you've got features that

00:33:04,390 --> 00:33:09,220
you really want I'd invite you to get

00:33:06,550 --> 00:33:14,350
involved with the container storage

00:33:09,220 --> 00:33:16,870
interface group and get your feature

00:33:14,350 --> 00:33:19,290
wish list on the table it's currently

00:33:16,870 --> 00:33:21,880
operating in the form of an online

00:33:19,290 --> 00:33:24,790
one-hour meeting every two weeks and

00:33:21,880 --> 00:33:27,940
there's a link to get there there is

00:33:24,790 --> 00:33:30,310
also a Google group that supports a

00:33:27,940 --> 00:33:32,530
mailing list so you can look at the

00:33:30,310 --> 00:33:36,040
historical communications there to feel

00:33:32,530 --> 00:33:39,160
to get a feel for where this it has come

00:33:36,040 --> 00:33:41,020
from and where it's going why would you

00:33:39,160 --> 00:33:43,660
want to get involved now well you can

00:33:41,020 --> 00:33:46,120
shape this at this stage it's still in

00:33:43,660 --> 00:33:48,370
the formative stage but more important

00:33:46,120 --> 00:33:50,290
than that perhaps is that if you plant

00:33:48,370 --> 00:33:52,120
if you're somebody who runs stateful

00:33:50,290 --> 00:33:54,430
applications at scale and these are

00:33:52,120 --> 00:33:56,590
critical to your organization getting

00:33:54,430 --> 00:33:59,290
involved at this architectural planning

00:33:56,590 --> 00:34:00,850
stage is a great way to train your staff

00:33:59,290 --> 00:34:02,890
you know you're gonna get a thorough

00:34:00,850 --> 00:34:05,950
understanding from top to bottom

00:34:02,890 --> 00:34:07,620
as to how this is put together which

00:34:05,950 --> 00:34:10,300
should enable you to do some serious

00:34:07,620 --> 00:34:11,740
troubleshooting and maybe making plans

00:34:10,300 --> 00:34:15,160
for how you'd implement your own

00:34:11,740 --> 00:34:16,780
infrastructure of you know laying out

00:34:15,160 --> 00:34:19,330
your compute nodes your storage

00:34:16,780 --> 00:34:22,750
interfaces what kinds of storage you'd

00:34:19,330 --> 00:34:25,179
like to procure and often as you see

00:34:22,750 --> 00:34:27,310
these architectural decisions made you

00:34:25,179 --> 00:34:29,980
you you get to a point where you're kind

00:34:27,310 --> 00:34:32,470
of at an expert level understanding how

00:34:29,980 --> 00:34:35,560
these things work behind the curtain

00:34:32,470 --> 00:34:38,650
under the covers and that's a great

00:34:35,560 --> 00:34:42,429
opportunity because if you wait till

00:34:38,650 --> 00:34:44,200
it's shaped and formed some of the some

00:34:42,429 --> 00:34:46,810
of these opportunities for just watching

00:34:44,200 --> 00:34:49,060
why this these decisions were made or

00:34:46,810 --> 00:34:51,790
lost I mean theoretically you could go

00:34:49,060 --> 00:34:54,160
back to do Google searches to find a lot

00:34:51,790 --> 00:34:56,110
of these notes but actually coming to

00:34:54,160 --> 00:34:59,770
these meetings we occasionally might

00:34:56,110 --> 00:35:02,320
even have some face to faces is a good

00:34:59,770 --> 00:35:04,210
opportunity if you're really a scale

00:35:02,320 --> 00:35:09,330
user where this is critical to your

00:35:04,210 --> 00:35:11,680
business that said I that that's our

00:35:09,330 --> 00:35:12,260
presentation I looks like we've got some

00:35:11,680 --> 00:35:16,450
room for

00:35:12,260 --> 00:35:16,450
some questions here if anybody's got any

00:35:20,530 --> 00:35:24,220
yeah we have one there

00:35:42,430 --> 00:35:48,079
yeah so so the question is as I

00:35:46,369 --> 00:35:50,089
mentioned you one of the slides that Mae

00:35:48,079 --> 00:35:52,130
sews it's gonna take just one darker

00:35:50,089 --> 00:35:54,230
image name from storage providers and

00:35:52,130 --> 00:35:56,509
just take care of the rest and how that

00:35:54,230 --> 00:35:59,989
workflow how is that workflow how does

00:35:56,509 --> 00:36:01,759
that work so yeah so I think there's a

00:35:59,989 --> 00:36:03,950
configuration so as I mentioned there's

00:36:01,759 --> 00:36:06,109
a storage resource provider and there's

00:36:03,950 --> 00:36:08,989
a configuration for that and when you

00:36:06,109 --> 00:36:11,210
actually need to specify the docker

00:36:08,989 --> 00:36:13,519
image name in that configuration and you

00:36:11,210 --> 00:36:15,259
can have some endpoint on the agent or

00:36:13,519 --> 00:36:17,779
if it's a remote resource like external

00:36:15,259 --> 00:36:19,220
resource provided then it's you can use

00:36:17,779 --> 00:36:20,779
Marathon to launch that external

00:36:19,220 --> 00:36:25,549
resource provider and then talk to my

00:36:20,779 --> 00:36:27,049
sauce master and we need to run the for

00:36:25,549 --> 00:36:28,999
the local resource provider on there is

00:36:27,049 --> 00:36:33,890
a plug in considers a single protein

00:36:28,999 --> 00:36:37,900
containers can I go to the shirt so go

00:36:33,890 --> 00:36:37,900
to the architecture slides

00:36:44,700 --> 00:36:56,420
no down downtown

00:36:47,780 --> 00:36:58,430
yeah yes all right so if you see that

00:36:56,420 --> 00:37:00,110
graph on so the local you have a

00:36:58,430 --> 00:37:01,850
configuration that you pass to the

00:37:00,110 --> 00:37:03,500
storage local resource provider which is

00:37:01,850 --> 00:37:06,320
a docker image name for your plugging

00:37:03,500 --> 00:37:08,150
and the storage local resource provider

00:37:06,320 --> 00:37:10,760
will make sure that this plug-in

00:37:08,150 --> 00:37:12,620
container is running on that agent using

00:37:10,760 --> 00:37:15,470
the same container riser we have inside

00:37:12,620 --> 00:37:17,060
missiles just run that container make

00:37:15,470 --> 00:37:20,660
sure that's running and we'll talk to

00:37:17,060 --> 00:37:22,190
that container using G RPC and and also

00:37:20,660 --> 00:37:24,140
monitoring the health of that container

00:37:22,190 --> 00:37:25,610
so when it fails it will restart and

00:37:24,140 --> 00:37:30,590
make sure that it can talk to that again

00:37:25,610 --> 00:37:32,590
and and yeah forceful full of coins it's

00:37:30,590 --> 00:37:35,030
it's like that so you just need to tell

00:37:32,590 --> 00:37:36,440
Maysles about the configuration of that

00:37:35,030 --> 00:37:38,360
storage local resource provider which

00:37:36,440 --> 00:37:40,850
contain the image name and then we can

00:37:38,360 --> 00:37:42,380
take up the rest for external ones most

00:37:40,850 --> 00:37:44,240
likely the storage external resource

00:37:42,380 --> 00:37:47,030
provider is gonna be launched by another

00:37:44,240 --> 00:37:49,700
scheduler like marathon or Aurora and

00:37:47,030 --> 00:37:51,800
then it has it like one way to do that

00:37:49,700 --> 00:37:53,450
is you package the container inside the

00:37:51,800 --> 00:37:55,490
same storage resource those external

00:37:53,450 --> 00:37:56,990
storage resource providers use at all

00:37:55,490 --> 00:37:58,780
for example that you can talk to each

00:37:56,990 --> 00:38:01,730
other using the UNIX domain socket or

00:37:58,780 --> 00:38:04,130
local address and then there is a

00:38:01,730 --> 00:38:05,600
container image name in the

00:38:04,130 --> 00:38:07,760
configuration of the storage external

00:38:05,600 --> 00:38:09,680
storage resource provider that is going

00:38:07,760 --> 00:38:10,640
to be passed through from missus master

00:38:09,680 --> 00:38:12,590
to the agent when you're actually

00:38:10,640 --> 00:38:14,960
launching a task and there's a component

00:38:12,590 --> 00:38:16,640
in agent where actually wants to make

00:38:14,960 --> 00:38:18,260
sure that resource appear on that note

00:38:16,640 --> 00:38:20,480
it will try to see if there's a

00:38:18,260 --> 00:38:22,640
container no plug in running or not if

00:38:20,480 --> 00:38:25,880
if there's no it will try to spin up

00:38:22,640 --> 00:38:27,770
that no container and the reason you can

00:38:25,880 --> 00:38:29,330
get that I mean the name of the

00:38:27,770 --> 00:38:31,550
container is all the way password on the

00:38:29,330 --> 00:38:33,110
master to the agent in part of the

00:38:31,550 --> 00:38:35,080
configuration of the external resource

00:38:33,110 --> 00:38:42,650
provider does that answer your question

00:38:35,080 --> 00:38:46,240
cool the question is where the

00:38:42,650 --> 00:38:46,240
configuration of all these volume

00:38:48,430 --> 00:38:59,660
sorry the question is where the

00:38:57,950 --> 00:39:02,690
configuration of the plug-in container

00:38:59,660 --> 00:39:04,880
resides and the answer for that is it

00:39:02,690 --> 00:39:06,980
depends so different plugging vendors

00:39:04,880 --> 00:39:09,980
has different configurations for example

00:39:06,980 --> 00:39:11,150
when launching a plug-in container you I

00:39:09,980 --> 00:39:13,160
mean something you may want to specify

00:39:11,150 --> 00:39:15,500
something special amande variable that's

00:39:13,160 --> 00:39:17,359
part of the configuration that you

00:39:15,500 --> 00:39:19,190
supply to the storage local resource

00:39:17,359 --> 00:39:19,640
provider or storage external resource

00:39:19,190 --> 00:39:22,369
provider

00:39:19,640 --> 00:39:24,440
it's a JSON config that you can specify

00:39:22,369 --> 00:39:25,790
what's the image name you want to use

00:39:24,440 --> 00:39:27,079
what's the command what's the

00:39:25,790 --> 00:39:28,700
environment variable pretty much the

00:39:27,079 --> 00:39:30,650
same as when you're launching a task you

00:39:28,700 --> 00:39:32,480
have to specify those things we use the

00:39:30,650 --> 00:39:34,220
same in Canada asking you to specify

00:39:32,480 --> 00:39:38,290
those things the command info and

00:39:34,220 --> 00:39:38,290
container info of that container

00:40:10,760 --> 00:40:17,839
you know so the question is how does CSI

00:40:14,789 --> 00:40:20,880
expose access to additional metadata

00:40:17,839 --> 00:40:23,910
about the volume so that a container

00:40:20,880 --> 00:40:28,130
Orchestrator or someone can reason about

00:40:23,910 --> 00:40:31,260
that to place a workload so the CSI spec

00:40:28,130 --> 00:40:33,690
defines to two things that are part of

00:40:31,260 --> 00:40:36,000
the volume handle one is the ID and one

00:40:33,690 --> 00:40:39,329
is a metadata and so it's up to a plugin

00:40:36,000 --> 00:40:41,660
to expose whatever additional metadata

00:40:39,329 --> 00:40:45,750
it wants about that volume through the

00:40:41,660 --> 00:40:50,880
volume metadata protobuf it's an opaque

00:40:45,750 --> 00:40:52,680
field there's no standard keys so if you

00:40:50,880 --> 00:40:54,660
end up writing specific logic in your Co

00:40:52,680 --> 00:40:59,039
then you're kind of coupling it to a

00:40:54,660 --> 00:41:00,960
particular storage provider if you're an

00:40:59,039 --> 00:41:03,750
end user then maybe you're coupling your

00:41:00,960 --> 00:41:05,819
app so you a specific storage provider

00:41:03,750 --> 00:41:07,170
there's no conventional set of keys for

00:41:05,819 --> 00:41:09,750
that metadata field

00:41:07,170 --> 00:41:12,020
but the information can be there as long

00:41:09,750 --> 00:41:15,680
as a plug-in implements support for that

00:41:12,020 --> 00:41:15,680
does that answer your question

00:41:23,960 --> 00:41:28,470
yeah so so basically like I'm going to a

00:41:26,760 --> 00:41:30,750
crate boning if you go to the repo right

00:41:28,470 --> 00:41:32,310
now si si respect repo sewing a crate

00:41:30,750 --> 00:41:34,740
volume the return value actually give

00:41:32,310 --> 00:41:36,930
you a volume ID and the volume metadata

00:41:34,740 --> 00:41:38,790
we're sticking to the resource that we

00:41:36,930 --> 00:41:40,710
provide so the resource provider is

00:41:38,790 --> 00:41:43,230
gonna get that information and then

00:41:40,710 --> 00:41:45,300
create a disk resource when the metadata

00:41:43,230 --> 00:41:47,359
we stick into that disk resource you can

00:41:45,300 --> 00:41:49,710
contain the ID as well as the metadata

00:41:47,359 --> 00:41:51,119
but whether the scheduler wants to

00:41:49,710 --> 00:41:52,920
leverage that information to do

00:41:51,119 --> 00:41:54,810
scheduling decision that's kind of like

00:41:52,920 --> 00:41:57,359
a question mark some people might prefer

00:41:54,810 --> 00:42:00,690
like I don't want to do a like logic for

00:41:57,359 --> 00:42:02,760
lack of humans specific storage provider

00:42:00,690 --> 00:42:05,369
because that metadata is kind of very

00:42:02,760 --> 00:42:06,750
specific to that given storage provider

00:42:05,369 --> 00:42:09,599
you probably don't wants to do that

00:42:06,750 --> 00:42:11,310
so I like a different approach is you

00:42:09,599 --> 00:42:13,500
provide some sunken high-level

00:42:11,310 --> 00:42:15,990
abstraction I say like a storage class

00:42:13,500 --> 00:42:18,150
or a profile where you specify a name of

00:42:15,990 --> 00:42:19,650
that profile and then you have for each

00:42:18,150 --> 00:42:21,690
different provider you specify different

00:42:19,650 --> 00:42:23,760
parameters and things like this and then

00:42:21,690 --> 00:42:25,380
the scheduler will based on the profile

00:42:23,760 --> 00:42:27,150
name to make scheduling decision rather

00:42:25,380 --> 00:42:30,210
than just based on those real parameters

00:42:27,150 --> 00:42:31,920
and metadata from the volume so it

00:42:30,210 --> 00:42:33,780
depends on wor what the direction you

00:42:31,920 --> 00:42:40,050
want to go maysa it's not gonna be

00:42:33,780 --> 00:42:41,310
opinion on that and just one final bit

00:42:40,050 --> 00:42:46,200
of information because the question was

00:42:41,310 --> 00:42:47,970
was kind of related to placement there's

00:42:46,200 --> 00:42:51,420
an open action item right now in the CSI

00:42:47,970 --> 00:42:56,730
working group one of our partners sod

00:42:51,420 --> 00:43:00,510
from kubernetes is working on the

00:42:56,730 --> 00:43:02,490
concept of domain and how how domain is

00:43:00,510 --> 00:43:04,980
going to fit into the CSI spec and how

00:43:02,490 --> 00:43:07,710
that would affect placement of volumes

00:43:04,980 --> 00:43:09,240
in the cluster so it's kind of an open

00:43:07,710 --> 00:43:11,460
ticket it's an open item if you want to

00:43:09,240 --> 00:43:15,869
be involved i recommend attending the

00:43:11,460 --> 00:43:17,099
community sinks that we have and one

00:43:15,869 --> 00:43:18,930
more thing i think domain is pretty

00:43:17,099 --> 00:43:20,970
important because you think about EBS

00:43:18,930 --> 00:43:22,530
right like you do have some restriction

00:43:20,970 --> 00:43:24,900
on where you can use the resource we

00:43:22,530 --> 00:43:27,119
used to have on you if you create a like

00:43:24,900 --> 00:43:29,520
a volume EBS volume from song a you

00:43:27,119 --> 00:43:31,170
cannot use that volume in zombie you do

00:43:29,520 --> 00:43:33,990
need to expose some like

00:43:31,170 --> 00:43:36,210
or topology information on to the

00:43:33,990 --> 00:43:38,220
framework so that it can make a better

00:43:36,210 --> 00:43:39,990
placement I mean you don't want to place

00:43:38,220 --> 00:43:44,640
the ball you know you know zone that you

00:43:39,990 --> 00:43:46,099
cannot use the volume any other

00:43:44,640 --> 00:43:48,089
questions

00:43:46,099 --> 00:43:51,020
okay we are out of time if you have any

00:43:48,089 --> 00:43:52,740
question feel free to come over and ask

00:43:51,020 --> 00:43:57,950
thanks thanks everyone

00:43:52,740 --> 00:43:57,950

YouTube URL: https://www.youtube.com/watch?v=zhALmyC3Om4


