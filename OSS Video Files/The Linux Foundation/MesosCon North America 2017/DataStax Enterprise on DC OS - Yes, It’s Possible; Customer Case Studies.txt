Title: DataStax Enterprise on DC OS - Yes, It’s Possible; Customer Case Studies
Publication date: 2017-09-18
Playlist: MesosCon North America 2017
Description: 
	DataStax Enterprise on DC/OS - Yes, It’s Possible; Customer Case Studies - Ravi Yadav, Mesosphere & Kathryn Erickson, DataStax

Migrating a database to a containerized infrastructure brings with it a whole host of challenging new issues. Concerns range from persistence management, availability requirements, and complicated recovery semantics. If you’re considering migrating a database to containers in the future, this talk should enlighten the path.

We will walk you through the current state of the DataStax Enterprise framework. We'll explore the details of the integration between DSE and DC/OS and cover tradeoffs between different deployment options. We’ll tell the real story of the evolution of this framework. In doing so we’ll discuss how our initial design decisions conflicted with customer expectations and how we worked through these and other engineering feats to get to the offering we have today. We'll then tell a few customer deployment stories and conclude with a demo of DSE on DC/OS.

About

Ravi Yadav
Platform Partnerships Lead, Mesosphere, Inc.
Ravi Yadav is responsible for platform partnerships and ecosystem development at Mesosphere. Prior to this, he was a Developer Advocate at IBM and worked on IBM Watson partnerships and advocacy. In his past life, he worked on developing drivers for medical devices.

Kathryn Erickson
Datastax
San Francisco Bay Area
Kathryn Erickson leads the Technology Partnership Program for DataStax. Prior to joining DataStax, Kathryn was a leader within the Sales Engineering team at Fusion-io and prior to that she conducted and patented research at the MITRE Corporation. She also worked as part of the CyberTrust team at the National Science Foundation (NSF), which guided academic research in information security. Kathryn has two small children and enjoys oil painting, even though she's not great at it.
Captions: 
	00:00:00,240 --> 00:00:04,620
we just let people come in as they need

00:00:02,179 --> 00:00:06,779
so thanks for joining us my name is

00:00:04,620 --> 00:00:09,660
Catherine Erickson and I work on the

00:00:06,779 --> 00:00:09,990
product team at data stacks and I'm Ravi

00:00:09,660 --> 00:00:11,700
odda

00:00:09,990 --> 00:00:14,370
I work on platform partnerships that

00:00:11,700 --> 00:00:17,820
made this fair today we're going to talk

00:00:14,370 --> 00:00:20,460
about why it's hard to build these

00:00:17,820 --> 00:00:21,660
production quality staple services we're

00:00:20,460 --> 00:00:25,080
going to talk about what it took to

00:00:21,660 --> 00:00:26,609
built the one that we g8 this week we're

00:00:25,080 --> 00:00:28,699
going to talk about the evolution of the

00:00:26,609 --> 00:00:30,840
framework what worked and what didn't

00:00:28,699 --> 00:00:34,260
we're going to talk about the current

00:00:30,840 --> 00:00:36,870
state where we are today how a couple of

00:00:34,260 --> 00:00:38,730
our customers are using it and then

00:00:36,870 --> 00:00:40,620
we're going to jump into demos I have

00:00:38,730 --> 00:00:45,230
some recorded demos I have a live

00:00:40,620 --> 00:00:48,270
cluster set up we'll see how it goes I

00:00:45,230 --> 00:00:50,789
know you're not here for a vendor talk

00:00:48,270 --> 00:00:54,149
and I don't want to give you a vendor

00:00:50,789 --> 00:00:56,460
talk but we're talking about staple

00:00:54,149 --> 00:00:59,129
services so you need to understand what

00:00:56,460 --> 00:01:01,109
data stacks is and then as needed I'm

00:00:59,129 --> 00:01:03,660
going to explain how it communicates and

00:01:01,109 --> 00:01:07,200
what makes it a complex framework to

00:01:03,660 --> 00:01:10,200
build and maintain so data stacks

00:01:07,200 --> 00:01:13,530
Enterprise is a peer-to-peer no sequel

00:01:10,200 --> 00:01:16,710
database and it's based on Cassandra at

00:01:13,530 --> 00:01:19,650
the core and on top of Cassandra we had

00:01:16,710 --> 00:01:22,650
search analytics graph and other

00:01:19,650 --> 00:01:26,250
enterprise features it's often used for

00:01:22,650 --> 00:01:28,200
personalization apps messaging apps we

00:01:26,250 --> 00:01:30,659
see a lot of sensor data and Internet of

00:01:28,200 --> 00:01:34,320
Things applications and then fraud

00:01:30,659 --> 00:01:39,990
detection and often enough playlists as

00:01:34,320 --> 00:01:42,170
well come on in guys so let's dig into

00:01:39,990 --> 00:01:45,060
what it really takes to build these

00:01:42,170 --> 00:01:47,820
production quality services I'll turn

00:01:45,060 --> 00:01:49,280
that over to Robbie thank you so we want

00:01:47,820 --> 00:01:52,200
to talk about what does it really mean

00:01:49,280 --> 00:01:53,880
by a production create stateful service

00:01:52,200 --> 00:01:55,710
so when you're trying to build a

00:01:53,880 --> 00:01:57,750
stateful service you have to think about

00:01:55,710 --> 00:01:59,460
different things like how would a

00:01:57,750 --> 00:02:02,280
service deploy how would it be

00:01:59,460 --> 00:02:04,170
maintained over time how would you find

00:02:02,280 --> 00:02:06,810
hosts for all the tasks how would you go

00:02:04,170 --> 00:02:08,280
from how would you go from zero to one

00:02:06,810 --> 00:02:10,590
so for example if you're trying to do a

00:02:08,280 --> 00:02:13,170
configuration change how would the

00:02:10,590 --> 00:02:13,830
service behave or in in your entire

00:02:13,170 --> 00:02:17,040
cluster

00:02:13,830 --> 00:02:19,520
how would you do resource accounting for

00:02:17,040 --> 00:02:22,170
ease of resources or persons and volumes

00:02:19,520 --> 00:02:24,510
then you need to think about things like

00:02:22,170 --> 00:02:26,970
how would you reliably recover data when

00:02:24,510 --> 00:02:30,030
it goes down how do you put it back to

00:02:26,970 --> 00:02:32,880
where it was so what I'm the point that

00:02:30,030 --> 00:02:35,940
I want to convey is writing complex

00:02:32,880 --> 00:02:37,890
stateful services like DSC is hard so

00:02:35,940 --> 00:02:40,620
you have to think through all the

00:02:37,890 --> 00:02:42,810
challenges and the caveats on how it

00:02:40,620 --> 00:02:45,930
behaves in a container Orchestrator like

00:02:42,810 --> 00:02:47,520
TCOs so for that to solve for that what

00:02:45,930 --> 00:02:50,220
we've done is the team atmosphere has

00:02:47,520 --> 00:02:52,860
built an sdk called dcs common which

00:02:50,220 --> 00:02:55,650
provides a shared patterns and design

00:02:52,860 --> 00:02:58,290
patterns and for deployment maintenance

00:02:55,650 --> 00:03:03,360
and resource accounting and solves most

00:02:58,290 --> 00:03:06,300
of these complex operation for you so

00:03:03,360 --> 00:03:09,510
here is a quick example on how an update

00:03:06,300 --> 00:03:11,340
works with the sdk so it it's based on a

00:03:09,510 --> 00:03:13,410
goal-oriented design which basically

00:03:11,340 --> 00:03:15,270
means you you think about two states a

00:03:13,410 --> 00:03:17,250
current state and a target state that

00:03:15,270 --> 00:03:19,680
you want to achieve so in this case if

00:03:17,250 --> 00:03:21,780
you see in the left the CPU as two and

00:03:19,680 --> 00:03:24,780
the memory is four gig and what you want

00:03:21,780 --> 00:03:27,120
to go to is CPU one and memory of eight

00:03:24,780 --> 00:03:29,670
gigs so it define the configuration

00:03:27,120 --> 00:03:32,970
change you change but the CPU from two

00:03:29,670 --> 00:03:35,580
to four and memory from 42 to one and

00:03:32,970 --> 00:03:38,390
memory from four to eight and based on

00:03:35,580 --> 00:03:41,730
that the scheduler that runs for DSC it

00:03:38,390 --> 00:03:44,130
unreserved one CPU and resolves of four

00:03:41,730 --> 00:03:46,110
gigs of memory in your cluster and the

00:03:44,130 --> 00:03:46,709
default scheduler for DSC that runs on

00:03:46,110 --> 00:03:49,230
DCOs

00:03:46,709 --> 00:03:51,390
identifies that and restarts a node with

00:03:49,230 --> 00:03:53,400
a new configuration

00:03:51,390 --> 00:03:55,110
so for DSC we want to die a dive a

00:03:53,400 --> 00:03:59,060
little bit deeper into what the

00:03:55,110 --> 00:04:03,450
different terminologies are enterprise

00:03:59,060 --> 00:04:05,459
so at the simplest unit you have a node

00:04:03,450 --> 00:04:07,530
that's a single instance of data stacks

00:04:05,459 --> 00:04:09,810
enterprise usually wouldn't run the

00:04:07,530 --> 00:04:11,580
database as a single instance but

00:04:09,810 --> 00:04:13,890
instead you would run it as a cluster

00:04:11,580 --> 00:04:16,290
and a cluster could consist of one or

00:04:13,890 --> 00:04:20,040
more physical or logical data centers

00:04:16,290 --> 00:04:22,919
and these clusters communicate using the

00:04:20,040 --> 00:04:25,570
gossip protocol and so gossip is used to

00:04:22,919 --> 00:04:27,730
keep track of a cluster

00:04:25,570 --> 00:04:30,220
and the individual nodes health these

00:04:27,730 --> 00:04:32,770
nodes talk to each other every second or

00:04:30,220 --> 00:04:35,410
so using this gossip protocol but it

00:04:32,770 --> 00:04:37,180
isn't a one-to-one communication these

00:04:35,410 --> 00:04:39,130
nodes are talking to their neighbor and

00:04:37,180 --> 00:04:41,680
they share that information that they've

00:04:39,130 --> 00:04:43,840
learned with the rest of the cluster so

00:04:41,680 --> 00:04:46,150
over a very short period of time this

00:04:43,840 --> 00:04:49,030
propagates throughout the entire cluster

00:04:46,150 --> 00:04:51,220
so if a node is in questionable health

00:04:49,030 --> 00:04:57,430
then we'll route those requests to

00:04:51,220 --> 00:04:59,020
alternate nodes right to Diggle in a

00:04:57,430 --> 00:05:01,630
little bit more I wanted to show you the

00:04:59,020 --> 00:05:03,970
right path so in a right comes in to a

00:05:01,630 --> 00:05:06,400
Cassandra or data stacks node it's

00:05:03,970 --> 00:05:09,160
written to a sequential commit log and

00:05:06,400 --> 00:05:11,590
also to an end memory table when that

00:05:09,160 --> 00:05:14,170
end memory table fills up it's flush to

00:05:11,590 --> 00:05:16,900
disk and then on a periodic basis

00:05:14,170 --> 00:05:20,230
compaction runs and those tables are

00:05:16,900 --> 00:05:22,440
read back into memory sorted written

00:05:20,230 --> 00:05:26,200
back to disk in an immutable fashion

00:05:22,440 --> 00:05:29,380
right so that's the communication on a

00:05:26,200 --> 00:05:31,090
single node but the other piece of the

00:05:29,380 --> 00:05:34,030
staple app and we're going to refer back

00:05:31,090 --> 00:05:38,050
to Robbie's config slide a couple times

00:05:34,030 --> 00:05:39,580
in the presentation so data sets

00:05:38,050 --> 00:05:43,120
Enterprise depending on if you're using

00:05:39,580 --> 00:05:45,760
search analytics and graph and some

00:05:43,120 --> 00:05:48,760
other components can have upwards of 30

00:05:45,760 --> 00:05:51,250
configuration files and within the

00:05:48,760 --> 00:05:54,280
framework we need we needed to expose

00:05:51,250 --> 00:05:57,340
all of these or we needed to expose

00:05:54,280 --> 00:05:58,870
these in a way that customers could use

00:05:57,340 --> 00:06:02,320
any of the settings that they frequently

00:05:58,870 --> 00:06:04,450
change as an example the Cassandra yamo

00:06:02,320 --> 00:06:07,240
file has upwards of a thousand settings

00:06:04,450 --> 00:06:09,040
that could be changed and each one of

00:06:07,240 --> 00:06:11,770
these takes about five to ten minutes to

00:06:09,040 --> 00:06:14,800
expose in the framework of course you

00:06:11,770 --> 00:06:17,050
have dsum well as well and then we

00:06:14,800 --> 00:06:19,690
expect production changes to the

00:06:17,050 --> 00:06:21,600
configuration depending on what season

00:06:19,690 --> 00:06:23,770
it is what the shopping trends are

00:06:21,600 --> 00:06:26,200
what's going on with your customers you

00:06:23,770 --> 00:06:29,020
may change heap settings you may change

00:06:26,200 --> 00:06:31,140
other tunable settings and production

00:06:29,020 --> 00:06:35,900
environments and so we expect that and

00:06:31,140 --> 00:06:37,669
so to expose all of this and

00:06:35,900 --> 00:06:40,910
provide a seamless customer experience

00:06:37,669 --> 00:06:43,790
we use the SDK from DCO from Mason

00:06:40,910 --> 00:06:50,660
sphere so Robbie's gonna talk a little

00:06:43,790 --> 00:06:52,460
bit about that SDK so the SDK aims to

00:06:50,660 --> 00:06:54,200
address all the challenges that we

00:06:52,460 --> 00:06:56,180
talked about initially of writing a

00:06:54,200 --> 00:06:57,710
framework so what it does is provides a

00:06:56,180 --> 00:07:00,110
set of design patterns and common

00:06:57,710 --> 00:07:02,990
implementations which can be used to

00:07:00,110 --> 00:07:04,520
deploy something like DSC on DC was so

00:07:02,990 --> 00:07:08,060
these are the different components which

00:07:04,520 --> 00:07:10,010
makes up the SDK so it provides robust

00:07:08,060 --> 00:07:11,330
deployment and maintenance of services

00:07:10,010 --> 00:07:13,520
for things like installation

00:07:11,330 --> 00:07:16,160
configuration software updates and

00:07:13,520 --> 00:07:20,030
achieves all of that through declarative

00:07:16,160 --> 00:07:21,290
all who odd or goal-oriented design so

00:07:20,030 --> 00:07:22,700
now we're going to talk about the

00:07:21,290 --> 00:07:25,940
evolution of the framework how we

00:07:22,700 --> 00:07:27,919
started working together so data stocks

00:07:25,940 --> 00:07:30,320
and mesosphere and how the framework

00:07:27,919 --> 00:07:32,210
evolved over time what were what did we

00:07:30,320 --> 00:07:33,800
learn over time in terms of building the

00:07:32,210 --> 00:07:35,570
framework how we deployed it at

00:07:33,800 --> 00:07:37,940
different customer environments and how

00:07:35,570 --> 00:07:41,539
we fixed those issues in the framework

00:07:37,940 --> 00:07:46,130
to solve for the customer Thanks so we

00:07:41,539 --> 00:07:50,330
take on technology partners we want the

00:07:46,130 --> 00:07:53,020
low touch interaction that satisfies all

00:07:50,330 --> 00:07:56,060
the customer requests right we thought

00:07:53,020 --> 00:07:58,760
we're gonna build a a service that's

00:07:56,060 --> 00:08:01,610
easy for us to develop and easy for us

00:07:58,760 --> 00:08:03,950
to maintain if you think about this and

00:08:01,610 --> 00:08:05,600
the concept of a docker image the things

00:08:03,950 --> 00:08:07,400
that you would expose as environment

00:08:05,600 --> 00:08:11,780
variables are the things I wanted to

00:08:07,400 --> 00:08:14,300
expose within the DCOs service and so we

00:08:11,780 --> 00:08:16,190
did this pretty quickly and we deliver

00:08:14,300 --> 00:08:18,229
it to the first customer and they said

00:08:16,190 --> 00:08:21,200
that's that's that's actually not what

00:08:18,229 --> 00:08:22,639
we want we don't want to customize

00:08:21,200 --> 00:08:25,010
something and we don't want to extend

00:08:22,639 --> 00:08:28,400
what you've done we want you to expose

00:08:25,010 --> 00:08:31,719
everything that's possible and then

00:08:28,400 --> 00:08:33,890
bring that back to us so they're saying

00:08:31,719 --> 00:08:36,669
deliver us a plane that we can fly

00:08:33,890 --> 00:08:40,849
because we don't want to build one and

00:08:36,669 --> 00:08:43,279
so that's how we got to version 2 which

00:08:40,849 --> 00:08:45,680
required some really big changes for

00:08:43,279 --> 00:08:47,740
both companies the first was that we

00:08:45,680 --> 00:08:50,770
needed a dedicated engineering to

00:08:47,740 --> 00:08:52,810
for this integration so we have one

00:08:50,770 --> 00:08:54,850
full-time person dedicated specifically

00:08:52,810 --> 00:08:57,490
to developing and maintaining this

00:08:54,850 --> 00:09:01,110
framework we work hand-in-hand with meso

00:08:57,490 --> 00:09:03,730
sphere for months we met every day and

00:09:01,110 --> 00:09:06,880
then went to a couple days a week and

00:09:03,730 --> 00:09:09,850
now is needed as our kind of center of

00:09:06,880 --> 00:09:13,240
excellence has grown we reduced our

00:09:09,850 --> 00:09:15,970
reliance on the partner but it took a

00:09:13,240 --> 00:09:18,640
lot of work upfront we've gone through

00:09:15,970 --> 00:09:21,850
five beta versions of this framework

00:09:18,640 --> 00:09:22,990
since March and we really baited the

00:09:21,850 --> 00:09:25,570
heck out of this thing

00:09:22,990 --> 00:09:26,800
use cases scenarios everything that we

00:09:25,570 --> 00:09:29,470
think customers are going to want to use

00:09:26,800 --> 00:09:32,050
it for and the other one is a big one

00:09:29,470 --> 00:09:33,640
the joint support agreements so you can

00:09:32,050 --> 00:09:36,790
think about this as kind of three levels

00:09:33,640 --> 00:09:40,750
of support you have support from Mesa

00:09:36,790 --> 00:09:42,640
sphere for DCOs support from DS from

00:09:40,750 --> 00:09:45,279
data stacks for data stacks Enterprise

00:09:42,640 --> 00:09:48,430
and then the joint support supporting

00:09:45,279 --> 00:09:50,589
this framework as a real example we had

00:09:48,430 --> 00:09:52,029
a customer come to us with a support

00:09:50,589 --> 00:09:54,100
ticket and they didn't know who to

00:09:52,029 --> 00:09:56,709
submit it to they're trying to deploy a

00:09:54,100 --> 00:09:59,110
cluster they had this error that they

00:09:56,709 --> 00:10:02,320
were seeing in DCOs but remember they

00:09:59,110 --> 00:10:04,750
see their data stacks logs in DCOs now

00:10:02,320 --> 00:10:08,620
as well so it turned out to be a really

00:10:04,750 --> 00:10:10,029
simple DNS communication error but

00:10:08,620 --> 00:10:12,339
because this integration is so tight

00:10:10,029 --> 00:10:14,110
customers don't know who to call and so

00:10:12,339 --> 00:10:16,899
what we had to do is make it okay for

00:10:14,110 --> 00:10:18,220
them to call either team and establish a

00:10:16,899 --> 00:10:21,339
process that we could work together to

00:10:18,220 --> 00:10:25,120
solve these tickets so by doing this

00:10:21,339 --> 00:10:28,180
we've we're providing this service that

00:10:25,120 --> 00:10:31,270
really does have some value add on what

00:10:28,180 --> 00:10:33,370
our platform offers today one of the big

00:10:31,270 --> 00:10:34,990
ones is configuration management the

00:10:33,370 --> 00:10:38,020
ability to roll back to previous

00:10:34,990 --> 00:10:41,950
configurations so if you think about a

00:10:38,020 --> 00:10:44,050
retail company and on Black Friday they

00:10:41,950 --> 00:10:46,540
expect a burst they need more CPU more

00:10:44,050 --> 00:10:49,899
ram per server they have slightly

00:10:46,540 --> 00:10:52,180
different heat settings and on this

00:10:49,899 --> 00:10:54,850
first Black Friday they work really hard

00:10:52,180 --> 00:10:55,990
to get these settings just right we

00:10:54,850 --> 00:10:58,810
don't want to go through this exercise

00:10:55,990 --> 00:11:00,520
again the next year so what's great

00:10:58,810 --> 00:11:01,030
about this integration is that you can

00:11:00,520 --> 00:11:03,970
have your

00:11:01,030 --> 00:11:06,040
Black Friday configuration and the week

00:11:03,970 --> 00:11:08,680
of Thanksgiving you can roll that

00:11:06,040 --> 00:11:10,360
configuration out you can go back to

00:11:08,680 --> 00:11:12,760
that previous good state of that

00:11:10,360 --> 00:11:14,350
configuration and when that burst is

00:11:12,760 --> 00:11:18,400
over you can roll back to your normal

00:11:14,350 --> 00:11:20,470
running state so then you have what

00:11:18,400 --> 00:11:23,560
comes with that is the vertical and

00:11:20,470 --> 00:11:26,140
horizontal scaling so data stacks and

00:11:23,560 --> 00:11:28,780
cassandra customers are very used to the

00:11:26,140 --> 00:11:32,140
horizontal scaling concept the guarantee

00:11:28,780 --> 00:11:34,690
of linear scalability but what helps

00:11:32,140 --> 00:11:37,570
these customers with burst is that they

00:11:34,690 --> 00:11:41,830
can add not just nodes but also add

00:11:37,570 --> 00:11:45,430
resources as needed and then the unit

00:11:41,830 --> 00:11:47,530
the uniform deployment of these apps we

00:11:45,430 --> 00:11:49,450
don't really think of ourselves as an

00:11:47,530 --> 00:11:53,050
emerging technology anymore

00:11:49,450 --> 00:11:54,700
no sequel is is the standard and so our

00:11:53,050 --> 00:11:56,670
customers have a higher level of

00:11:54,700 --> 00:11:58,750
expectations from us at this point

00:11:56,670 --> 00:12:00,790
they're building these Mac stack

00:11:58,750 --> 00:12:04,420
architectures there's a lot of upfront

00:12:00,790 --> 00:12:07,000
work and once they do that upfront work

00:12:04,420 --> 00:12:09,370
they don't want to do it every time they

00:12:07,000 --> 00:12:12,250
want to be able to deploy the apps and

00:12:09,370 --> 00:12:15,190
the glue that connects them in a uniform

00:12:12,250 --> 00:12:18,550
fashion and so that's what you get from

00:12:15,190 --> 00:12:23,800
the integration all right so let's talk

00:12:18,550 --> 00:12:27,940
about the current state so we g8 the 2.0

00:12:23,800 --> 00:12:31,150
release this week and we have two

00:12:27,940 --> 00:12:33,790
services in the catalog we have data

00:12:31,150 --> 00:12:35,050
stacks DSC that's the database and we

00:12:33,790 --> 00:12:37,600
have data stacks ops

00:12:35,050 --> 00:12:40,360
that's the ops center management GUI so

00:12:37,600 --> 00:12:42,760
you need the data base ops center is

00:12:40,360 --> 00:12:44,200
optional but most of our customers used

00:12:42,760 --> 00:12:47,350
it of course to get better insight into

00:12:44,200 --> 00:12:50,080
the cluster to manage repair to remand

00:12:47,350 --> 00:12:51,310
it back ups and to see some deeper

00:12:50,080 --> 00:12:54,550
metrics of what's going on with the

00:12:51,310 --> 00:12:56,920
system so at this point we have full

00:12:54,550 --> 00:12:59,080
platform support things that you would

00:12:56,920 --> 00:13:03,250
expect like advanced replication or

00:12:59,080 --> 00:13:06,160
multi DC all of the the platform

00:13:03,250 --> 00:13:08,830
features are there plus the the new

00:13:06,160 --> 00:13:10,890
features that Mesa sphere is exposed

00:13:08,830 --> 00:13:13,550
from the last couple releases of DC OS

00:13:10,890 --> 00:13:17,029
so you have no placement

00:13:13,550 --> 00:13:18,470
no task fill your recovery sono goes

00:13:17,029 --> 00:13:20,110
down and it'll attempt to do a health

00:13:18,470 --> 00:13:22,250
check to bring it back up a couple times

00:13:20,110 --> 00:13:25,250
but of course you don't want notes

00:13:22,250 --> 00:13:26,630
flapping so it does it a couple times

00:13:25,250 --> 00:13:29,540
and then assumes that no to be down for

00:13:26,630 --> 00:13:31,579
a manual intervention we have strict

00:13:29,540 --> 00:13:34,970
mode support that lets customers run on

00:13:31,579 --> 00:13:37,399
air-gapped networks multi-tenancy so you

00:13:34,970 --> 00:13:41,480
can have multiple data stacks clusters

00:13:37,399 --> 00:13:43,910
per D TOS cluster pod replacement with

00:13:41,480 --> 00:13:47,600
local storage so should you lose a pod

00:13:43,910 --> 00:13:49,670
we want to deploy a new pod in an

00:13:47,600 --> 00:13:53,420
automated fashion and reattach that

00:13:49,670 --> 00:13:55,670
storage we heard a lot about CNI during

00:13:53,420 --> 00:13:57,829
the keynote but that's what gives you

00:13:55,670 --> 00:14:01,279
multiple network interfaces per DCOs

00:13:57,829 --> 00:14:05,329
host so you can have multiple data

00:14:01,279 --> 00:14:07,339
stacks nodes and clusters deployed in a

00:14:05,329 --> 00:14:10,730
more dense fashion across a smaller set

00:14:07,339 --> 00:14:12,560
of hosts and then monitoring to be able

00:14:10,730 --> 00:14:17,510
to see metrics and logs within the DCOs

00:14:12,560 --> 00:14:19,610
interface right so some quick notes on

00:14:17,510 --> 00:14:22,100
on customer deployments and I think

00:14:19,610 --> 00:14:23,209
we've seen a lot of these throughout the

00:14:22,100 --> 00:14:27,380
week

00:14:23,209 --> 00:14:31,420
the first was an example of repeated

00:14:27,380 --> 00:14:34,160
deployments of a smaller unit of of

00:14:31,420 --> 00:14:37,279
micro services as an application stack

00:14:34,160 --> 00:14:40,130
so they have a cloud Devon test

00:14:37,279 --> 00:14:44,420
environment and they need to deploy that

00:14:40,130 --> 00:14:47,180
to their entre on-prem entities in a

00:14:44,420 --> 00:14:49,399
very repeatable fashion they have small

00:14:47,180 --> 00:14:50,810
windows to get this deployed and then

00:14:49,399 --> 00:14:53,240
it's difficult for them to remotely

00:14:50,810 --> 00:14:55,850
manage them so they need to be sure that

00:14:53,240 --> 00:14:58,459
what they do in dev can be easily

00:14:55,850 --> 00:15:01,579
deployed easily managed in a very

00:14:58,459 --> 00:15:05,750
uniform way and the other one that we're

00:15:01,579 --> 00:15:08,480
seeing is it's for platform as a service

00:15:05,750 --> 00:15:12,140
for enterprises that want to build their

00:15:08,480 --> 00:15:14,449
own cloud that want to make their

00:15:12,140 --> 00:15:19,519
resources available in a more efficient

00:15:14,449 --> 00:15:22,850
way they do this by pulling in these

00:15:19,519 --> 00:15:24,920
services and understanding how they can

00:15:22,850 --> 00:15:26,540
work together and then deploying them

00:15:24,920 --> 00:15:30,260
for their internal cost

00:15:26,540 --> 00:15:32,210
in a consumable way all right so we're

00:15:30,260 --> 00:15:37,310
15 minutes in and we're going to jump

00:15:32,210 --> 00:15:39,250
into some demos and the first is just

00:15:37,310 --> 00:15:44,180
going to be a simple installation of

00:15:39,250 --> 00:15:45,800
data stacks enterprise on DCOs and I

00:15:44,180 --> 00:15:47,840
have these recorded but if we want to

00:15:45,800 --> 00:15:52,820
see something more advanced we have the

00:15:47,840 --> 00:15:56,480
cluster up and running as well all right

00:15:52,820 --> 00:15:59,620
so I'll welcome you here so we go to the

00:15:56,480 --> 00:16:02,870
catalog and we see the certified service

00:15:59,620 --> 00:16:05,240
and we want to configure it so you can

00:16:02,870 --> 00:16:06,860
see the cluster name you can decide if

00:16:05,240 --> 00:16:10,120
you want to search analytics or graph

00:16:06,860 --> 00:16:12,380
data center or all three how many nodes

00:16:10,120 --> 00:16:14,720
and then this is where you can start to

00:16:12,380 --> 00:16:17,060
see your your memory settings your

00:16:14,720 --> 00:16:20,870
storage settings whether you want route

00:16:17,060 --> 00:16:22,700
or mount volumes and then like we said

00:16:20,870 --> 00:16:24,440
with a cue standard ml file all the

00:16:22,700 --> 00:16:28,520
things that could be exposed

00:16:24,440 --> 00:16:31,600
dsdm aware you had expect to expose your

00:16:28,520 --> 00:16:34,040
more enterprise features like LDAP and

00:16:31,600 --> 00:16:36,020
an OP Center are you going to use OP

00:16:34,040 --> 00:16:39,410
Center what's the OP Center interface

00:16:36,020 --> 00:16:41,660
and where does it live you deploy the

00:16:39,410 --> 00:16:43,820
configuration you go to the service and

00:16:41,660 --> 00:16:46,940
then like you saw on this keynote you

00:16:43,820 --> 00:16:48,320
can see it come up you can also see how

00:16:46,940 --> 00:16:54,440
many of these clusters I deployed that

00:16:48,320 --> 00:16:57,500
day and I'm running these on an internal

00:16:54,440 --> 00:16:59,690
environment which is a little bit slower

00:16:57,500 --> 00:17:01,130
so I do a little pause and play so that

00:16:59,690 --> 00:17:03,650
we don't have to wait for that cluster

00:17:01,130 --> 00:17:05,120
to come up put on average this cluster

00:17:03,650 --> 00:17:10,670
takes about five minutes to come up in

00:17:05,120 --> 00:17:14,890
our lab alright so now we have a data

00:17:10,670 --> 00:17:18,590
star cluster up and running three nodes

00:17:14,890 --> 00:17:19,910
in really just about you know 10 minutes

00:17:18,590 --> 00:17:22,070
to go through the settings if I

00:17:19,910 --> 00:17:23,930
understand the system pretty well you

00:17:22,070 --> 00:17:27,350
can also do that same deployment from

00:17:23,930 --> 00:17:31,130
command line just a one line command to

00:17:27,350 --> 00:17:35,060
deploy as well so the next video is

00:17:31,130 --> 00:17:39,340
showing us how to how to install ops

00:17:35,060 --> 00:17:39,340
center using the same technique

00:17:49,600 --> 00:17:54,980
there we go so we see that data stacks

00:17:52,730 --> 00:17:57,980
is running in the services now we want

00:17:54,980 --> 00:18:00,200
to install ops center so we want to

00:17:57,980 --> 00:18:01,190
configure that there's a lot to er

00:18:00,200 --> 00:18:03,470
options here

00:18:01,190 --> 00:18:05,630
one of the takeaways though is that with

00:18:03,470 --> 00:18:07,429
SGA release we started with a single op

00:18:05,630 --> 00:18:09,380
center node which is in how you're going

00:18:07,429 --> 00:18:11,929
to run this so in the next point release

00:18:09,380 --> 00:18:15,140
you will see ops that are running as a

00:18:11,929 --> 00:18:22,250
cluster just as data stacks Enterprise

00:18:15,140 --> 00:18:24,910
does right and then under services you

00:18:22,250 --> 00:18:30,320
can see these stage and become active

00:18:24,910 --> 00:18:33,919
there's also a nice CLI command I can

00:18:30,320 --> 00:18:37,220
get Dee TOS your service name plan

00:18:33,919 --> 00:18:42,799
deploy and that'll let you watch these

00:18:37,220 --> 00:18:45,260
come up on a more granular level alright

00:18:42,799 --> 00:18:48,559
so I run DG OS and I see that I don't

00:18:45,260 --> 00:18:51,890
have my CLI yet so you have a CLI per

00:18:48,559 --> 00:18:53,809
service so I need to install the CLI for

00:18:51,890 --> 00:18:56,169
data sex ops because that's what I've

00:18:53,809 --> 00:18:56,169
just installed

00:19:04,150 --> 00:19:09,560
all right so now I'm running DCOs

00:19:06,680 --> 00:19:11,930
data SEC stops endpoints and what I want

00:19:09,560 --> 00:19:14,120
to see is the endpoint tasks within

00:19:11,930 --> 00:19:17,390
those containers and the one that I want

00:19:14,120 --> 00:19:19,520
to look at is OP Center itself so I want

00:19:17,390 --> 00:19:22,130
to see the URL for the OP Center

00:19:19,520 --> 00:19:24,200
endpoint so I add OP Center to the

00:19:22,130 --> 00:19:32,930
endpoints and then I can see the URL

00:19:24,200 --> 00:19:35,120
that's available all right then I have

00:19:32,930 --> 00:19:40,880
to remember how to switch windows there

00:19:35,120 --> 00:19:42,440
we go if you're doing this on your own

00:19:40,880 --> 00:19:43,670
and I have an exercise I'll show you

00:19:42,440 --> 00:19:45,590
after this you will have to wait a

00:19:43,670 --> 00:19:48,260
minute for OP Center to come up and

00:19:45,590 --> 00:19:49,820
recognize the service but it's pretty

00:19:48,260 --> 00:19:52,940
quick and then you can see that you have

00:19:49,820 --> 00:19:58,160
a three node cluster running in DCOs

00:19:52,940 --> 00:20:00,170
now viewable through ops center the only

00:19:58,160 --> 00:20:02,780
reason I redid these videos is if I had

00:20:00,170 --> 00:20:05,300
a message pop up I dropped my laptop I

00:20:02,780 --> 00:20:08,720
spilled something this is pretty easy to

00:20:05,300 --> 00:20:10,220
do and pretty easy to record and it'll

00:20:08,720 --> 00:20:17,210
be pretty easy for you to try out after

00:20:10,220 --> 00:20:22,130
this as well all right but then you want

00:20:17,210 --> 00:20:25,610
to use the CLI and DCO s18 no okay well

00:20:22,130 --> 00:20:28,640
if you did try it again because it's

00:20:25,610 --> 00:20:30,920
it's vastly improved at this point and

00:20:28,640 --> 00:20:33,830
so this next video is gonna show you a

00:20:30,920 --> 00:20:35,630
little bit about the CLI and next time I

00:20:33,830 --> 00:20:39,320
give a talk I'll use a larger text in my

00:20:35,630 --> 00:20:42,410
videos so the first thing that you have

00:20:39,320 --> 00:20:45,590
to do is install the CLI you go to that

00:20:42,410 --> 00:20:48,410
little arrow you grab a copy paste in my

00:20:45,590 --> 00:20:51,500
system I have to add sudo to the curl so

00:20:48,410 --> 00:20:53,330
if you see a difference that's why then

00:20:51,500 --> 00:20:55,850
you have to think what was my password

00:20:53,330 --> 00:21:00,620
for the last six years so once you get

00:20:55,850 --> 00:21:01,880
that you're ready to go all right at

00:21:00,620 --> 00:21:04,000
this point you might notice that I'm

00:21:01,880 --> 00:21:07,010
actually using a different cluster than

00:21:04,000 --> 00:21:10,180
the previous day I was just waiting to

00:21:07,010 --> 00:21:12,680
get 110 installed on my system so I was

00:21:10,180 --> 00:21:14,759
using one of my sisters clusters til

00:21:12,680 --> 00:21:17,279
mine was up

00:21:14,759 --> 00:21:18,959
all right so now we're installing the

00:21:17,279 --> 00:21:20,989
CLI for op Center just like we did

00:21:18,959 --> 00:21:20,989
before

00:21:32,000 --> 00:21:37,640
I type faster when I'm not recording I

00:21:35,150 --> 00:21:39,980
swear all right so I want to look at the

00:21:37,640 --> 00:21:42,650
endpoints for data stacks enterprise and

00:21:39,980 --> 00:21:45,080
I've installed graph and spark and solar

00:21:42,650 --> 00:21:49,160
so I have quite a few but the Native

00:21:45,080 --> 00:21:51,590
Client is the the actual data stacks

00:21:49,160 --> 00:21:53,480
nodes and those are the ones that I want

00:21:51,590 --> 00:21:57,710
the endpoints for I want to see the IP

00:21:53,480 --> 00:22:01,430
addresses but I also need the name of

00:21:57,710 --> 00:22:02,990
this node that I want to go to so now at

00:22:01,430 --> 00:22:06,140
this point I'm saying give me a terminal

00:22:02,990 --> 00:22:08,840
on this node which it does pretty easily

00:22:06,140 --> 00:22:09,670
now and if we've used 1.8 before that's

00:22:08,840 --> 00:22:12,140
pretty awesome

00:22:09,670 --> 00:22:14,210
sequel SH is what you use to interact

00:22:12,140 --> 00:22:17,270
with a Cassandra or data starts cluster

00:22:14,210 --> 00:22:20,660
so I'm just sequel s aging into a node

00:22:17,270 --> 00:22:23,210
and at this point we're going to create

00:22:20,660 --> 00:22:26,840
a key space and a key space is just our

00:22:23,210 --> 00:22:30,020
concept of a database I created the key

00:22:26,840 --> 00:22:35,210
space customer and I'm just gonna paste

00:22:30,020 --> 00:22:37,070
in a create table command and then we're

00:22:35,210 --> 00:22:38,600
gonna load some data these are just some

00:22:37,070 --> 00:22:40,670
I'm gonna give all these to you as well

00:22:38,600 --> 00:22:44,510
these are just some simple insert

00:22:40,670 --> 00:22:51,620
statements and then as easy as that we

00:22:44,510 --> 00:22:53,750
can create this database across your

00:22:51,620 --> 00:22:58,910
fingers don't worry it's a video there

00:22:53,750 --> 00:23:01,070
we go all right so the hardest part of

00:22:58,910 --> 00:23:03,320
that was remembering to put us in my

00:23:01,070 --> 00:23:07,640
colon at the end of my commands it's

00:23:03,320 --> 00:23:09,620
really simple to use alright so we

00:23:07,640 --> 00:23:12,380
stated that one of the values here was

00:23:09,620 --> 00:23:14,360
in being able to add a node within the

00:23:12,380 --> 00:23:15,890
interface okay so I'm going to show you

00:23:14,360 --> 00:23:17,360
that here but then we're also going to

00:23:15,890 --> 00:23:19,540
look at that live in a few minutes as

00:23:17,360 --> 00:23:19,540
well

00:23:26,040 --> 00:23:30,680
give it a minute

00:23:27,530 --> 00:23:30,680
[Music]

00:23:35,530 --> 00:23:38,980
all right so we're going to go to the

00:23:37,600 --> 00:23:41,200
data stack service and we're going to

00:23:38,980 --> 00:23:43,330
say that we want to edit if you're used

00:23:41,200 --> 00:23:45,430
to the old way of doing things where you

00:23:43,330 --> 00:23:48,070
needed your JSON file this is so super

00:23:45,430 --> 00:23:49,750
friendly you have it all right here but

00:23:48,070 --> 00:23:51,430
what I want to do is add a node and

00:23:49,750 --> 00:23:54,220
that's a capability that I've exposed

00:23:51,430 --> 00:23:56,920
within my service so I know that that's

00:23:54,220 --> 00:23:59,290
the add a pod I go there and I'm going

00:23:56,920 --> 00:24:03,130
to increment from 3 to 4 I'm going to

00:23:59,290 --> 00:24:05,230
review that you can see all the choices

00:24:03,130 --> 00:24:08,890
that you've made now and previously and

00:24:05,230 --> 00:24:10,240
then we're gonna run the service so what

00:24:08,890 --> 00:24:11,920
I should have done is done some node

00:24:10,240 --> 00:24:13,360
tool commands to show you the the

00:24:11,920 --> 00:24:17,290
clusters not going down during this

00:24:13,360 --> 00:24:20,400
process DCOs is saying find me a set of

00:24:17,290 --> 00:24:22,810
resources that satisfies this request it

00:24:20,400 --> 00:24:25,870
bootstraps the node which is a consider

00:24:22,810 --> 00:24:28,360
concept and then the gossip protocol is

00:24:25,870 --> 00:24:31,090
going to discover that node as a speech

00:24:28,360 --> 00:24:34,090
dropping give it a subset of the data

00:24:31,090 --> 00:24:38,140
and distribute the data that was on

00:24:34,090 --> 00:24:40,650
three nodes not a four so I install the

00:24:38,140 --> 00:24:42,670
CLI again because I assume that I've

00:24:40,650 --> 00:24:46,420
uninstalled a package between the last

00:24:42,670 --> 00:24:51,130
demo and this one so I want to get my

00:24:46,420 --> 00:24:53,200
endpoints I'm getting a little nervous

00:24:51,130 --> 00:25:00,910
here there we go

00:24:53,200 --> 00:25:04,510
she pulled it off all right so now we

00:25:00,910 --> 00:25:05,800
need to get the IPS again so we want to

00:25:04,510 --> 00:25:07,270
look at the Native Client and the goal

00:25:05,800 --> 00:25:13,870
here is to see four nodes instead of

00:25:07,270 --> 00:25:17,380
three and so there you have it we have

00:25:13,870 --> 00:25:21,040
four nodes now instead of three all

00:25:17,380 --> 00:25:22,690
right so we're only at 25 minutes and we

00:25:21,040 --> 00:25:25,510
have 40 so I want to show you a few

00:25:22,690 --> 00:25:27,790
things that we've done before we open up

00:25:25,510 --> 00:25:33,580
for questions oh wait my video

00:25:27,790 --> 00:25:34,480
personality has other ideas all right so

00:25:33,580 --> 00:25:35,950
we're gonna look at the opposite or

00:25:34,480 --> 00:25:37,330
endpoints and we want to see an off

00:25:35,950 --> 00:25:39,010
center that we've gone from three to

00:25:37,330 --> 00:25:41,290
four nodes right because we have this

00:25:39,010 --> 00:25:43,120
management GUI we've added a node it

00:25:41,290 --> 00:25:46,950
should be a parent with an OP Center as

00:25:43,120 --> 00:25:49,740
well so I go through the steps again

00:25:46,950 --> 00:25:52,380
get this IP address because apparently I

00:25:49,740 --> 00:25:57,269
didn't write it down oh yes I did there

00:25:52,380 --> 00:25:59,190
it is so I'm just going to refresh and

00:25:57,269 --> 00:26:01,440
this does take a second and I actually

00:25:59,190 --> 00:26:05,419
did pause this video a second so that

00:26:01,440 --> 00:26:09,600
when I refreshed it would show is four

00:26:05,419 --> 00:26:12,419
but anytime you add nodes in a data sex

00:26:09,600 --> 00:26:15,080
cluster they will be discovered and made

00:26:12,419 --> 00:26:22,889
available with an OP Center as well

00:26:15,080 --> 00:26:25,549
alright so what I've done is taken the

00:26:22,889 --> 00:26:30,169
steps that I did in this exercise and

00:26:25,549 --> 00:26:35,100
made them easily available on consumable

00:26:30,169 --> 00:26:38,909
so can you see this here there we go

00:26:35,100 --> 00:26:41,519
we're mirroring alright so in my github

00:26:38,909 --> 00:26:46,049
account which is just 0 1 2 3 4 5 you

00:26:41,519 --> 00:26:49,200
will see mesas con and in mesas con you

00:26:46,049 --> 00:26:53,519
will see each of these videos that we've

00:26:49,200 --> 00:26:55,230
gone through how to do the deploy

00:26:53,519 --> 00:26:57,149
they're the exact things that you've

00:26:55,230 --> 00:27:00,830
seen oh gosh now you see how many kiddy

00:26:57,149 --> 00:27:03,840
O's I look at wheels on the bus guys

00:27:00,830 --> 00:27:05,399
alright and then it's gonna take you

00:27:03,840 --> 00:27:07,049
through the exact steps that we went

00:27:05,399 --> 00:27:08,940
through here I'm just so glad that

00:27:07,049 --> 00:27:13,710
wasn't full of Taylor Swift that would

00:27:08,940 --> 00:27:16,169
have been worse alright I have a couple

00:27:13,710 --> 00:27:18,960
commands for setting up your display and

00:27:16,169 --> 00:27:22,169
then this one goes even a little bit

00:27:18,960 --> 00:27:24,929
deeper so I have some short descriptions

00:27:22,169 --> 00:27:26,190
about each step that you're doing you'll

00:27:24,929 --> 00:27:28,110
need to remember to change your IP

00:27:26,190 --> 00:27:29,130
address I have a note in there but if

00:27:28,110 --> 00:27:32,250
you're like me you're not gonna read it

00:27:29,130 --> 00:27:36,120
in that much detail so you create your

00:27:32,250 --> 00:27:39,059
key space you add a table we insert some

00:27:36,120 --> 00:27:40,620
data and then if you want to stop there

00:27:39,059 --> 00:27:41,580
that's what we did in this demo and

00:27:40,620 --> 00:27:43,950
you're good to go

00:27:41,580 --> 00:27:48,450
if you want to keep going I have a

00:27:43,950 --> 00:27:54,269
primary key exercise here that's based

00:27:48,450 --> 00:27:55,649
on Star Wars movies I think now I'll

00:27:54,269 --> 00:27:57,160
switch it out to the Star Wars 1 that's

00:27:55,649 --> 00:28:00,550
more fun

00:27:57,160 --> 00:28:02,770
and then some hands-on with looking at

00:28:00,550 --> 00:28:06,910
Cassander consistency and being able to

00:28:02,770 --> 00:28:10,030
trace your queries and then a little bit

00:28:06,910 --> 00:28:12,250
more hands-on fun with solar to be able

00:28:10,030 --> 00:28:15,640
to create your core and do some solar

00:28:12,250 --> 00:28:19,990
queries through cql and so this is

00:28:15,640 --> 00:28:22,210
pretty simple if you deploy DCOs now

00:28:19,990 --> 00:28:24,940
you'll see the data stacks package under

00:28:22,210 --> 00:28:27,880
certified you can very quickly deploy it

00:28:24,940 --> 00:28:29,290
go through the steps in the video and be

00:28:27,880 --> 00:28:32,650
able to run through this tutorial on

00:28:29,290 --> 00:28:35,140
your own alright so one thing that we

00:28:32,650 --> 00:28:38,140
didn't show that I've been asked about a

00:28:35,140 --> 00:28:40,750
lot it's not just adding a node but

00:28:38,140 --> 00:28:42,130
changing configurations is that

00:28:40,750 --> 00:28:45,930
something that we want to see in more

00:28:42,130 --> 00:28:45,930
detail how to do configurations ok

00:28:47,040 --> 00:28:58,330
alright so we have our environment here

00:28:50,380 --> 00:29:01,030
and let's see need to do is Julius ok

00:28:58,330 --> 00:29:03,070
that's the agent CPU and we want the

00:29:01,030 --> 00:29:05,700
CPUs for the node and so at this point

00:29:03,070 --> 00:29:09,460
we cross our fingers that my cluster is

00:29:05,700 --> 00:29:12,940
not under allocated and so I'm saying

00:29:09,460 --> 00:29:18,940
that for every node in this cluster I

00:29:12,940 --> 00:29:20,200
want to move from 2 to 4 CPUs and we

00:29:18,940 --> 00:29:21,540
really will do this live because I don't

00:29:20,200 --> 00:29:27,540
know what's provision in the cluster

00:29:21,540 --> 00:29:27,540
alright so we viewed it and we'll run it

00:29:30,690 --> 00:29:36,120
you can see it go through and if there's

00:29:33,040 --> 00:29:38,860
not we'll be able to see may so say

00:29:36,120 --> 00:29:42,430
resources unavailable it's a very clear

00:29:38,860 --> 00:29:47,250
message but it looks like the resources

00:29:42,430 --> 00:29:47,250
are there and up and running it will be

00:29:48,720 --> 00:29:55,260
so that's an oversimplification

00:29:55,400 --> 00:30:01,830
what's really taking a lot of hard work

00:29:58,050 --> 00:30:05,280
by teams of people to build I think for

00:30:01,830 --> 00:30:06,600
anybody taking on the framework now it's

00:30:05,280 --> 00:30:08,930
not going to be as hard we worked

00:30:06,600 --> 00:30:13,050
through a lot of issues we work together

00:30:08,930 --> 00:30:15,140
we're you know seven months into the SDK

00:30:13,050 --> 00:30:17,130
which is matured a lot and very quickly

00:30:15,140 --> 00:30:20,010
so hopefully we work through some things

00:30:17,130 --> 00:30:22,650
so that you might not have to but we're

00:30:20,010 --> 00:30:26,190
happy to answer questions about how

00:30:22,650 --> 00:30:28,470
people are using this yeah it looks like

00:30:26,190 --> 00:30:30,120
I didn't have the CPU but we're happy to

00:30:28,470 --> 00:30:33,350
answer questions about how people are

00:30:30,120 --> 00:30:35,550
using this what they're using it for

00:30:33,350 --> 00:30:36,990
deeper questions about the framework and

00:30:35,550 --> 00:30:46,940
service that I didn't go into we're

00:30:36,990 --> 00:30:50,280
happy to answer any of those good mm-hmm

00:30:46,940 --> 00:30:52,980
so point upgrades are pretty easy right

00:30:50,280 --> 00:30:55,950
because we're not making major changes

00:30:52,980 --> 00:30:59,340
and even rarely are there changes to the

00:30:55,950 --> 00:31:04,560
SS tables but in was it one nine or 110

00:30:59,340 --> 00:31:06,750
that upgrades were exposed 110 yeah

00:31:04,560 --> 00:31:09,930
so we've just released our first GA

00:31:06,750 --> 00:31:13,230
right so we haven't exposed an upgrade

00:31:09,930 --> 00:31:16,110
process yet but it's there you expose it

00:31:13,230 --> 00:31:18,150
in DCOs the steps of that upgrade

00:31:16,110 --> 00:31:21,630
process and then it rolls through the

00:31:18,150 --> 00:31:25,350
cluster to enable that upgrade one

00:31:21,630 --> 00:31:28,470
limitation right now is cassandra has

00:31:25,350 --> 00:31:30,600
this concept of RAC awareness where if

00:31:28,470 --> 00:31:32,880
you have 100 nodes you don't want to

00:31:30,600 --> 00:31:35,520
upgrade one at a time and so you want to

00:31:32,880 --> 00:31:37,890
upgrade one rack of nodes at a time and

00:31:35,520 --> 00:31:40,410
a rack will guarantee you that the same

00:31:37,890 --> 00:31:44,250
replica isn't stored on two nodes that

00:31:40,410 --> 00:31:45,870
are in that rack so if you have three

00:31:44,250 --> 00:31:47,640
racks and you can sustain the

00:31:45,870 --> 00:31:49,290
performance loss of taking down an

00:31:47,640 --> 00:31:52,050
entire rack then that would be your

00:31:49,290 --> 00:31:55,620
upgrade unit but more likely a subset of

00:31:52,050 --> 00:31:57,210
those nodes in the upgrade unit so right

00:31:55,620 --> 00:32:00,600
now we do use placement constraints

00:31:57,210 --> 00:32:02,730
through DCOs and those will work with

00:32:00,600 --> 00:32:07,460
rack awareness in one of the next

00:32:02,730 --> 00:32:07,460
versions safe Arbor

00:32:13,400 --> 00:32:17,580
yeah it'll be through DCOs and we'll

00:32:15,960 --> 00:32:30,840
expose it you want to talk anymore Keith

00:32:17,580 --> 00:32:32,790
about how its exposed if things were a

00:32:30,840 --> 00:32:35,340
part of like data stacks so I'll repeat

00:32:32,790 --> 00:32:38,790
all this his beams recorded so this was

00:32:35,340 --> 00:32:41,250
released with 1.10 it's an enterprise

00:32:38,790 --> 00:32:44,490
feature of DCOs and we've added the

00:32:41,250 --> 00:32:49,830
plumbing so that a partner can can do an

00:32:44,490 --> 00:32:51,690
upgrade we have safety we have checks in

00:32:49,830 --> 00:32:52,950
place like where you can run a package

00:32:51,690 --> 00:32:57,270
you can define like these are the

00:32:52,950 --> 00:32:59,310
versions I can upgrade from or downgrade

00:32:57,270 --> 00:33:01,050
to cuz we have support for downgrades as

00:32:59,310 --> 00:33:02,130
well so we have guardrails in there so

00:33:01,050 --> 00:33:05,310
you can make sure that a customer

00:33:02,130 --> 00:33:09,480
doesn't upgrade from a to an

00:33:05,310 --> 00:33:10,860
incompatible version as well and we have

00:33:09,480 --> 00:33:13,350
other niceties that we've built in there

00:33:10,860 --> 00:33:16,650
and we'll eventually plumb that through

00:33:13,350 --> 00:33:19,500
to our UI and then we have like you were

00:33:16,650 --> 00:33:22,170
saying we don't have support for fault

00:33:19,500 --> 00:33:23,640
domains yet or racks we'll add that and

00:33:22,170 --> 00:33:25,800
then we'll have more advanced strategies

00:33:23,640 --> 00:33:29,910
for upgrades so that you can upgrade you

00:33:25,800 --> 00:33:31,980
know three nodes per rack yeah then go

00:33:29,910 --> 00:33:33,960
to the next set next set so the other

00:33:31,980 --> 00:33:35,730
thing we get asked about a lot is the

00:33:33,960 --> 00:33:38,220
upgrade path of the two independent

00:33:35,730 --> 00:33:40,380
services and if you've used data stacks

00:33:38,220 --> 00:33:43,080
Enterprise the way it previously worked

00:33:40,380 --> 00:33:45,300
was that our agents weren't backwards

00:33:43,080 --> 00:33:47,520
compatible with the different versions

00:33:45,300 --> 00:33:50,700
of ops center but with a newer release

00:33:47,520 --> 00:33:52,980
of ops center all agents which run in

00:33:50,700 --> 00:33:56,190
the DSE nodes are backwards compatible

00:33:52,980 --> 00:33:59,220
so as you upgrade ops center you aren't

00:33:56,190 --> 00:34:00,720
forced to upgrade that the database at

00:33:59,220 --> 00:34:02,880
the same time and if you think about

00:34:00,720 --> 00:34:05,070
your production use case while upgrading

00:34:02,880 --> 00:34:07,320
that management GUI for some new

00:34:05,070 --> 00:34:10,380
features and goodness is you know a

00:34:07,320 --> 00:34:12,090
pretty easy decision upgrading your

00:34:10,380 --> 00:34:14,220
database is something that usually plan

00:34:12,090 --> 00:34:18,900
for in more detail so that's something

00:34:14,220 --> 00:34:22,320
that's that's there and ready sure

00:34:18,900 --> 00:34:27,180
any more questions anything you want to

00:34:22,320 --> 00:34:28,620
see right well we appreciate you coming

00:34:27,180 --> 00:34:30,030
if you have any questions you want to

00:34:28,620 --> 00:34:32,040
know more about the framework you want

00:34:30,030 --> 00:34:33,270
to dig in deeper we're happy to hang

00:34:32,040 --> 00:34:35,989
around and answer any questions that you

00:34:33,270 --> 00:34:39,149
have all right thanks everyone

00:34:35,989 --> 00:34:39,149

YouTube URL: https://www.youtube.com/watch?v=nDbl3fpchWI


