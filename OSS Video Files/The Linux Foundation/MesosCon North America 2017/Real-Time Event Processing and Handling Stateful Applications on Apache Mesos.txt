Title: Real-Time Event Processing and Handling Stateful Applications on Apache Mesos
Publication date: 2017-09-18
Playlist: MesosCon North America 2017
Description: 
	Real-Time Event Processing and Handling Stateful Applications on Apache Mesos - Balajee Nagarajan & Venkatesh Sivasubramanian, GE Digital

In order to deliver DevOps a cloud native application development and deployment experience, most enterprises are seeking to run all workloads on a container runtime platform. Come see us cover some of our experience in running non-trivial workloads on Mesos.
Key Points:
1. Quick intro to industrial use-cases and the problem space
2. Learn about our PaaS Journey (w/ Cloud and CloudFoundry)
3. Discussion on how GE is handling stateful applications on Mesos
4. Big Data with Mesos: Learn about how we built a stream processing platform on Mesos:
. Spark Streaming on Mesos (With near realtime performance)
. Heron/Storm on Mesos (where latency in less than few ms matters)
5. Learn how we managed the complexity of stateful applications on a container platform
. Share our experiences with external persistence
6. Demo
a. See how we stitch all these together for a real world use case.

About

Balajee Nagarajan
GE Digital
Director Software Engineering
Balajee Nagarajan is currently Director of Software Engineering at GE Digital, working on building the Predix Platform, where he architects and builds the Container and Application runtime platforms. Prior to joining GE Digital, Balajee was part of the Avi Networks team building next gen Cloud Load balancers and responsible for bootstrapping their QA/Operations and Support teams. He holds a Master in EE from IIT, Chicago.

Venkatesh Sivasubramanian
Venkatesh Sivasubramanian is currently a Senior Director at GE Digital, where he drives the architecture and development of Data Services for Predix, an Industrial IoT platform. Prior to joining GE Digital, he worked as a lead engineer in the Big Fast Data team at WalmartLabs, building its stream processing engine and distributed systems. Venkatesh holds a master’s degree in software engineering from Birla Institute of Technology and Science (BITS), India.
Captions: 
	00:00:00,030 --> 00:00:09,330
okay so hey guys I'm venca I I done the

00:00:06,720 --> 00:00:12,150
data platform for predicts platform so

00:00:09,330 --> 00:00:13,590
we're both coming from San Ramon so yeah

00:00:12,150 --> 00:00:16,350
here we're sitting to actually talk

00:00:13,590 --> 00:00:17,789
about it's actually a change in the

00:00:16,350 --> 00:00:19,020
topic a little bit so we talked we

00:00:17,789 --> 00:00:21,990
wanted we will touch upon real-time

00:00:19,020 --> 00:00:23,369
events as well but we do handling

00:00:21,990 --> 00:00:25,529
stateful applications and our passage

00:00:23,369 --> 00:00:28,980
anymore so it's going to basically cover

00:00:25,529 --> 00:00:32,219
more ground firm from paydex perspective

00:00:28,980 --> 00:00:35,180
hi guys this is Balaji I run predict his

00:00:32,219 --> 00:00:35,180
application and container

00:00:40,699 --> 00:00:44,989
okay so what are we going to do in this

00:00:42,980 --> 00:00:47,629
talk today we're going to bring you guys

00:00:44,989 --> 00:00:50,089
up to speed quickly on what predicts IOT

00:00:47,629 --> 00:00:53,510
platform is and what we actually do we

00:00:50,089 --> 00:00:55,789
will talk about our past journey we

00:00:53,510 --> 00:00:57,110
started building a platform about two

00:00:55,789 --> 00:00:58,579
two and half years ago so we'll actually

00:00:57,110 --> 00:01:00,739
talk about like how we originally

00:00:58,579 --> 00:01:01,909
initiated and then where we are and what

00:01:00,739 --> 00:01:04,759
our challenges and we are actually

00:01:01,909 --> 00:01:06,799
heading will also talk about stateless

00:01:04,759 --> 00:01:09,500
and stateful applications in general and

00:01:06,799 --> 00:01:11,360
what our needs from both of these

00:01:09,500 --> 00:01:17,500
services are we'll talk about our

00:01:11,360 --> 00:01:20,240
challenges and I'll do a demo on Q&A so

00:01:17,500 --> 00:01:22,729
the first slightly more talk about is

00:01:20,240 --> 00:01:25,190
here when people talk about IOT platform

00:01:22,729 --> 00:01:27,380
everybody gravitates towards a consumer

00:01:25,190 --> 00:01:29,420
IOT product like nest

00:01:27,380 --> 00:01:31,759
the first differentiator that we are

00:01:29,420 --> 00:01:34,250
building in as part of G digital Charter

00:01:31,759 --> 00:01:36,799
here is we're building in world-class

00:01:34,250 --> 00:01:38,569
secure industrial area which he platform

00:01:36,799 --> 00:01:40,310
the biggest difference when you throw in

00:01:38,569 --> 00:01:42,679
the world industrial it's just one word

00:01:40,310 --> 00:01:44,750
but the scale of what we're talking

00:01:42,679 --> 00:01:45,920
about is just blows out astronomically

00:01:44,750 --> 00:01:47,210
we're talking here about

00:01:45,920 --> 00:01:49,789
mission-critical applications

00:01:47,210 --> 00:01:54,619
mission-critical devices like jet

00:01:49,789 --> 00:01:56,719
engines MRI machines and wind turbines

00:01:54,619 --> 00:01:58,429
which are accompanying data at a much

00:01:56,719 --> 00:02:01,609
higher rate than that's ever been seen

00:01:58,429 --> 00:02:03,500
on any any IMT part of the core and all

00:02:01,609 --> 00:02:06,549
of these devices come in with their own

00:02:03,500 --> 00:02:09,049
inherent challenges and intricacies

00:02:06,549 --> 00:02:11,930
especially around security around

00:02:09,049 --> 00:02:14,630
compliance and all the good stuff so

00:02:11,930 --> 00:02:17,590
that has been our because differentiated

00:02:14,630 --> 00:02:17,590
when we talk about an IOT

00:02:20,870 --> 00:02:27,840
so right when we the word GE has been

00:02:26,459 --> 00:02:31,890
around for this is actually

00:02:27,840 --> 00:02:35,030
coincidentally 125th year of GE jeez

00:02:31,890 --> 00:02:37,440
been a well-known name across all

00:02:35,030 --> 00:02:41,550
households and we have presence all over

00:02:37,440 --> 00:02:45,600
the world but GE has been tagged as

00:02:41,550 --> 00:02:47,450
being an industrial big company so there

00:02:45,600 --> 00:02:49,860
is not even a single body with that X

00:02:47,450 --> 00:02:53,160
we're G's presence has not been there

00:02:49,860 --> 00:02:56,850
but when you take such a big company and

00:02:53,160 --> 00:03:00,180
you pivot around G to become a digital

00:02:56,850 --> 00:03:02,400
footprint that journey is not easy for

00:03:00,180 --> 00:03:06,380
one and that that journey has been

00:03:02,400 --> 00:03:12,120
something that we will fully taken and

00:03:06,380 --> 00:03:14,250
to code our former CEO here we are in

00:03:12,120 --> 00:03:15,840
the business of dealing with information

00:03:14,250 --> 00:03:17,519
we are building the business of dealing

00:03:15,840 --> 00:03:19,769
with data whether we like it or not

00:03:17,519 --> 00:03:22,290
whether you want it or not and given the

00:03:19,769 --> 00:03:25,079
fact that G has such a huge foot

00:03:22,290 --> 00:03:27,630
footprint and many business verticals we

00:03:25,079 --> 00:03:30,600
are the biggest domain expertise of you

00:03:27,630 --> 00:03:32,730
taking any business very good here and

00:03:30,600 --> 00:03:34,980
it is such a natural organic growth for

00:03:32,730 --> 00:03:37,109
us to become the leader in building up

00:03:34,980 --> 00:03:39,540
this industry IOT platform especially

00:03:37,109 --> 00:03:47,040
because of that of our inherent domain

00:03:39,540 --> 00:03:48,750
expertise ok I'm just a quick survey how

00:03:47,040 --> 00:03:53,160
many of you guys have known our use

00:03:48,750 --> 00:03:54,660
predicts ok that's awesome actually it's

00:03:53,160 --> 00:03:57,570
the right audience that we wanted to

00:03:54,660 --> 00:03:58,890
talk about so so like Balaji talked

00:03:57,570 --> 00:04:02,370
about some predicts is our I or II

00:03:58,890 --> 00:04:03,930
platform G's industrial customers are

00:04:02,370 --> 00:04:06,000
pretty much everywhere in the world they

00:04:03,930 --> 00:04:08,069
are in almost all the geographies

00:04:06,000 --> 00:04:09,660
because we span across like various

00:04:08,069 --> 00:04:13,440
businesses right from aviation to

00:04:09,660 --> 00:04:16,500
transportation to healthcare energy and

00:04:13,440 --> 00:04:18,299
so forth so from a Penix perspective in

00:04:16,500 --> 00:04:20,880
order to build a platform that's going

00:04:18,299 --> 00:04:22,200
to sort of help all of these different

00:04:20,880 --> 00:04:24,210
customers you have to be there in

00:04:22,200 --> 00:04:25,800
multiple areas so

00:04:24,210 --> 00:04:29,770
predicts is right now in like four

00:04:25,800 --> 00:04:31,690
regions there's one in u.s. east-west

00:04:29,770 --> 00:04:33,970
one in Europe and Japan and it's only

00:04:31,690 --> 00:04:37,090
expanding pretty much a majority of our

00:04:33,970 --> 00:04:40,620
food plants there are any WS today well

00:04:37,090 --> 00:04:40,620
we are also expanding it in other clouds

00:04:40,919 --> 00:04:48,759
so we have about multiples of 10

00:04:45,159 --> 00:04:50,139
thousands of machines we have thousands

00:04:48,759 --> 00:04:52,960
of developers using the platform today

00:04:50,139 --> 00:04:54,250
we have close to about 30,000

00:04:52,960 --> 00:04:56,080
applications that are deployed in this

00:04:54,250 --> 00:04:59,080
platform across various businesses and

00:04:56,080 --> 00:05:00,220
whatnot and we have a number of software

00:04:59,080 --> 00:05:03,880
stacks that are actually running in

00:05:00,220 --> 00:05:05,440
predicts these taxes included from

00:05:03,880 --> 00:05:08,650
stateless applications to stay to full

00:05:05,440 --> 00:05:14,080
applications like relational databases

00:05:08,650 --> 00:05:15,340
to no sequel source and whatnot so so

00:05:14,080 --> 00:05:18,490
from a cloud pressure I mean you guys

00:05:15,340 --> 00:05:20,860
got a sort of view of scale from a cloud

00:05:18,490 --> 00:05:24,400
perspective but there is also humongous

00:05:20,860 --> 00:05:27,460
data that's coming to our clouds so G

00:05:24,400 --> 00:05:28,840
has assets or machines that are deployed

00:05:27,460 --> 00:05:30,310
in so many different places all of these

00:05:28,840 --> 00:05:32,409
are actually generating a lot of data so

00:05:30,310 --> 00:05:33,699
for example this is one of the jet

00:05:32,409 --> 00:05:35,259
engines it's basically say it's a

00:05:33,699 --> 00:05:37,659
particular jet engine generates about a

00:05:35,259 --> 00:05:39,159
terabyte of data every day so so the way

00:05:37,659 --> 00:05:40,810
we actually build cloud is to make sure

00:05:39,159 --> 00:05:44,020
that all of these data from these edges

00:05:40,810 --> 00:05:45,669
are able to be ingested into the cloud

00:05:44,020 --> 00:05:54,639
for doing your analytics and everything

00:05:45,669 --> 00:05:57,779
else so when you talk about how predicts

00:05:54,639 --> 00:06:01,240
is built in we are trying to become a

00:05:57,779 --> 00:06:04,150
cloud and gnostic IOT platform so we

00:06:01,240 --> 00:06:07,300
depend heavily on automation to bring up

00:06:04,150 --> 00:06:10,319
our prediction transaction itself we use

00:06:07,300 --> 00:06:12,310
a she carves terraform for bringing up a

00:06:10,319 --> 00:06:14,590
infrastructure in any footprint today

00:06:12,310 --> 00:06:16,300
that's Amazon or Azure eventually into

00:06:14,590 --> 00:06:18,610
any other public lot that's available so

00:06:16,300 --> 00:06:21,849
we depend on a better forum to bring out

00:06:18,610 --> 00:06:23,409
our underlying cloud cloud

00:06:21,849 --> 00:06:26,139
infrastructure on top of that we use

00:06:23,409 --> 00:06:28,240
cloud form this Bosh to bring up short

00:06:26,139 --> 00:06:29,889
foundry from the time cloud found is

00:06:28,240 --> 00:06:31,990
exposed out to our developers lot

00:06:29,889 --> 00:06:33,669
foundries are is the only contract that

00:06:31,990 --> 00:06:36,099
our developers exists within predicts

00:06:33,669 --> 00:06:36,969
cloud foundry provides a very unified

00:06:36,099 --> 00:06:38,860
way of

00:06:36,969 --> 00:06:41,079
Singh predicts itself for our developers

00:06:38,860 --> 00:06:43,329
and for any customers developers who

00:06:41,079 --> 00:06:45,099
want to consume products the advantage

00:06:43,329 --> 00:06:46,809
what cloud foundry provided us when we

00:06:45,099 --> 00:06:48,789
started this journey was about 12 it has

00:06:46,809 --> 00:06:51,099
is robust marketplace service where you

00:06:48,789 --> 00:06:53,169
can have massive building models

00:06:51,099 --> 00:06:54,909
analytic building models and then not

00:06:53,169 --> 00:06:58,839
quality Pro also provides a very secure

00:06:54,909 --> 00:07:00,939
interface to Linux itself what you see

00:06:58,839 --> 00:07:03,549
here is a typical use case of products

00:07:00,939 --> 00:07:05,229
where we have products edge machines

00:07:03,549 --> 00:07:08,379
that are deployed out to our customer

00:07:05,229 --> 00:07:10,149
site which acts as a local aggregation

00:07:08,379 --> 00:07:12,569
point of sensor data does some

00:07:10,149 --> 00:07:15,209
computation on it sends back the

00:07:12,569 --> 00:07:18,759
learnings and the data back to the cloud

00:07:15,209 --> 00:07:21,429
we also have a Enterprise Data Connect

00:07:18,759 --> 00:07:23,619
which is used on up by G current for

00:07:21,429 --> 00:07:25,929
example to pull in data from local light

00:07:23,619 --> 00:07:28,479
sensors to do analytics jobs onto

00:07:25,929 --> 00:07:30,610
products on the other extreme we have

00:07:28,479 --> 00:07:32,649
not borne applications that customers

00:07:30,610 --> 00:07:37,649
build on top of products to consume that

00:07:32,649 --> 00:07:37,649
data to do predictive analysis awesome

00:07:37,979 --> 00:07:44,800
so extending to that so we use Cloud

00:07:42,459 --> 00:07:46,360
Foundry as her base platform

00:07:44,800 --> 00:07:49,749
infrastructure that we just talked about

00:07:46,360 --> 00:07:53,469
I mean Cloud Foundry for one abstracts

00:07:49,749 --> 00:07:54,849
are the developer experience in a way

00:07:53,469 --> 00:07:56,649
that's actually sane for them they don't

00:07:54,849 --> 00:07:59,589
have to manage individual machines and

00:07:56,649 --> 00:08:00,729
infrastructure and whatnot so it's

00:07:59,589 --> 00:08:03,249
actually great for stateless

00:08:00,729 --> 00:08:04,629
applications it gives you a nice

00:08:03,249 --> 00:08:07,209
marketplace that you can interact with

00:08:04,629 --> 00:08:08,169
to sort of create your service instances

00:08:07,209 --> 00:08:09,999
that you need bind it to your

00:08:08,169 --> 00:08:12,729
applications and so forth

00:08:09,999 --> 00:08:14,739
there's all there's also CLI and API

00:08:12,729 --> 00:08:17,649
access to it and Balaji also touched

00:08:14,739 --> 00:08:20,110
upon how we deploy Cloud Foundry all of

00:08:17,649 --> 00:08:22,119
these are fun but although the biggest

00:08:20,110 --> 00:08:24,099
set of Shortridge are limitations love

00:08:22,119 --> 00:08:29,289
only today is the support for state full

00:08:24,099 --> 00:08:31,299
applications currently many of our

00:08:29,289 --> 00:08:33,189
stateful services are deployed through

00:08:31,299 --> 00:08:35,589
automations outside of Cloud Foundry

00:08:33,189 --> 00:08:37,839
so this is either using Bosch type

00:08:35,589 --> 00:08:40,149
deployment or Scheffer terraform based

00:08:37,839 --> 00:08:42,519
infrastructure so we we'd apply these

00:08:40,149 --> 00:08:44,050
outside of Cloud Foundry in a separate

00:08:42,519 --> 00:08:46,929
set of sort of segregated set of

00:08:44,050 --> 00:08:50,069
instances and then expose them to Cloud

00:08:46,929 --> 00:08:50,069
Foundry where a service broker

00:08:50,440 --> 00:08:55,699
so this essentially started about six to

00:08:54,470 --> 00:08:57,279
nine months ago we started with the

00:08:55,699 --> 00:08:59,720
journey of looking at the next-gen

00:08:57,279 --> 00:09:01,459
platform for providing a seamless

00:08:59,720 --> 00:09:03,829
integration for anybody who wants to run

00:09:01,459 --> 00:09:05,930
stateful working on products on a

00:09:03,829 --> 00:09:08,360
container platform we naturally

00:09:05,930 --> 00:09:10,279
gravitated towards mazes which provides

00:09:08,360 --> 00:09:13,519
a very generic orchestration platform

00:09:10,279 --> 00:09:15,800
for running containers with a very good

00:09:13,519 --> 00:09:18,350
rope a simple tube two-level scheduler

00:09:15,800 --> 00:09:20,660
greater adoption among the open source

00:09:18,350 --> 00:09:23,240
community and enterprises who's done all

00:09:20,660 --> 00:09:25,430
we have similar customers who who are

00:09:23,240 --> 00:09:27,019
going through this journey who kind of

00:09:25,430 --> 00:09:29,089
cry upon each other's shoulders who

00:09:27,019 --> 00:09:31,519
understand what the pain points of going

00:09:29,089 --> 00:09:34,880
from one pass and other passes how we

00:09:31,519 --> 00:09:37,610
provide a unified experience to our end

00:09:34,880 --> 00:09:39,620
customers as well the stuff that we like

00:09:37,610 --> 00:09:42,040
like today about mazes is the fact that

00:09:39,620 --> 00:09:44,660
you have a first-class citizenship for

00:09:42,040 --> 00:09:51,139
stateful workloads and for personal

00:09:44,660 --> 00:09:53,120
volumes ok so now we talk about how do

00:09:51,139 --> 00:09:55,250
we bridge both of these words I mean we

00:09:53,120 --> 00:09:56,600
talked about stateless applications and

00:09:55,250 --> 00:10:00,889
how our customers use Cloud Foundry

00:09:56,600 --> 00:10:02,269
today and the goodness of what Mesa is

00:10:00,889 --> 00:10:06,199
actually brings in into this platform of

00:10:02,269 --> 00:10:09,920
stateful centric application so our

00:10:06,199 --> 00:10:11,300
intention is just to see how to bring

00:10:09,920 --> 00:10:13,850
both of these worlds together in a way

00:10:11,300 --> 00:10:16,209
that our customers still have a same

00:10:13,850 --> 00:10:18,589
experience from how they are using and

00:10:16,209 --> 00:10:20,000
the predicts platform like how they

00:10:18,589 --> 00:10:21,560
actually go and look at a marketplace

00:10:20,000 --> 00:10:24,439
and how they actually like use the

00:10:21,560 --> 00:10:27,170
service instances and everything so what

00:10:24,439 --> 00:10:28,430
we have essentially looking upon is kind

00:10:27,170 --> 00:10:30,350
of actually building a unified

00:10:28,430 --> 00:10:35,449
marketplace across both of these path

00:10:30,350 --> 00:10:38,689
systems where you can still expose all

00:10:35,449 --> 00:10:40,370
of your like native constructs that are

00:10:38,689 --> 00:10:45,319
available for stateless applications in

00:10:40,370 --> 00:10:46,759
CF but also bring up the service is the

00:10:45,319 --> 00:10:50,060
stateful services that are available in

00:10:46,759 --> 00:10:51,350
miso into CF so we're going to talk a

00:10:50,060 --> 00:10:53,420
little bit more about like how this

00:10:51,350 --> 00:10:57,320
integration actually works and

00:10:53,420 --> 00:10:59,420
and what we are doing there so what you

00:10:57,320 --> 00:11:01,790
see here is a sample of a marketplace

00:10:59,420 --> 00:11:04,250
that a anybody who logs into products

00:11:01,790 --> 00:11:06,710
using the CLI it looks like so you here

00:11:04,250 --> 00:11:09,830
you see about five catalogs services

00:11:06,710 --> 00:11:11,390
here the good thing about what this

00:11:09,830 --> 00:11:14,450
particular representation view gives you

00:11:11,390 --> 00:11:16,580
is for example you have our rabbitmq

00:11:14,450 --> 00:11:19,040
cluster and a Redis cluster these are

00:11:16,580 --> 00:11:22,880
orchestrated using our on-demand chef

00:11:19,040 --> 00:11:25,340
broker where anytime a user interacts

00:11:22,880 --> 00:11:27,140
with either one of those brokers chef is

00:11:25,340 --> 00:11:28,700
our back-end infrastructure which picks

00:11:27,140 --> 00:11:32,240
in which goes there and creates a

00:11:28,700 --> 00:11:33,770
on-demand cluster for the user all the

00:11:32,240 --> 00:11:35,270
anomaly detection that you see here is

00:11:33,770 --> 00:11:37,820
actually a native app and cloud form to

00:11:35,270 --> 00:11:39,260
itself which is running as an app in

00:11:37,820 --> 00:11:41,420
California and people can interact with

00:11:39,260 --> 00:11:44,270
that natively within Cloud Foundry the

00:11:41,420 --> 00:11:47,480
last two here are our first cut of our

00:11:44,270 --> 00:11:49,610
implementation on razors where people

00:11:47,480 --> 00:11:52,340
use these two clusters to go spin up a

00:11:49,610 --> 00:11:57,260
major stressor to consume elastic and

00:11:52,340 --> 00:12:00,680
cassava okay so how this happens bear in

00:11:57,260 --> 00:12:04,730
the same so is there anyone here

00:12:00,680 --> 00:12:07,700
familiar what open serviceworker okay a

00:12:04,730 --> 00:12:10,040
few hands okay that's good so Oh a

00:12:07,700 --> 00:12:11,810
service broker as an API that the CF

00:12:10,040 --> 00:12:14,570
community came up with long time before

00:12:11,810 --> 00:12:16,850
so it's definitely a way to sort of

00:12:14,570 --> 00:12:18,830
integrate your platforms marketplace and

00:12:16,850 --> 00:12:23,330
your sort of service provision which is

00:12:18,830 --> 00:12:25,970
your broker so the broker spec is like

00:12:23,330 --> 00:12:28,670
five or six API is one API is to

00:12:25,970 --> 00:12:32,090
basically return your service offerings

00:12:28,670 --> 00:12:33,470
like what is your service what are the

00:12:32,090 --> 00:12:35,840
plans that your service is offering and

00:12:33,470 --> 00:12:38,960
whatever its configurations there are a

00:12:35,840 --> 00:12:40,550
couple of ApS around instance creation

00:12:38,960 --> 00:12:42,230
and deletion and a couple around like

00:12:40,550 --> 00:12:44,180
how do you get the credentials from the

00:12:42,230 --> 00:12:48,050
service instance and attach it to a

00:12:44,180 --> 00:12:50,750
particular application so the I think

00:12:48,050 --> 00:12:52,340
the community saw the value in having a

00:12:50,750 --> 00:12:54,080
service broker a peer that's common

00:12:52,340 --> 00:12:58,430
across different platforms and sort of

00:12:54,080 --> 00:13:00,440
came together so the kubernetes and and

00:12:58,430 --> 00:13:02,120
the Cloud Foundry community have both

00:13:00,440 --> 00:13:03,710
sort of adopted the service broker API

00:13:02,120 --> 00:13:06,700
and they essentially have extensions for

00:13:03,710 --> 00:13:12,510
both but the missing piece

00:13:06,700 --> 00:13:15,430
as a service broker for main source so

00:13:12,510 --> 00:13:18,970
we went ahead and did an implementation

00:13:15,430 --> 00:13:21,670
office of his broker for main source so

00:13:18,970 --> 00:13:24,610
a supposed eCos has this API called

00:13:21,670 --> 00:13:27,070
cosmos which is a package manager API so

00:13:24,610 --> 00:13:28,870
when you go to when you look at the

00:13:27,070 --> 00:13:31,510
mesas universe to actually look at all

00:13:28,870 --> 00:13:32,950
of your individual packages like even

00:13:31,510 --> 00:13:34,630
the stateful packages that you've

00:13:32,950 --> 00:13:35,890
essentially guard so there is an API

00:13:34,630 --> 00:13:37,660
behind the scenes that actually helps

00:13:35,890 --> 00:13:39,010
you manage the lifecycle of each of

00:13:37,660 --> 00:13:41,590
those packages you can actually go and

00:13:39,010 --> 00:13:43,840
create an instance and whatnot so we

00:13:41,590 --> 00:13:46,480
went ahead and created an implementation

00:13:43,840 --> 00:13:48,940
of open source open service broker that

00:13:46,480 --> 00:13:52,600
actually talks to this cosmos API to go

00:13:48,940 --> 00:13:54,160
and spin the instance sort of make sure

00:13:52,600 --> 00:13:57,370
that the instance are completely up sort

00:13:54,160 --> 00:13:58,930
of monitor each of those tasks and also

00:13:57,370 --> 00:14:00,160
bring back the credentials and

00:13:58,930 --> 00:14:04,390
everything the service roca normally

00:14:00,160 --> 00:14:06,570
does so this actually sort of shows you

00:14:04,390 --> 00:14:08,380
about the different sort of service

00:14:06,570 --> 00:14:09,790
frameworks eppie of god and how we

00:14:08,380 --> 00:14:12,370
essentially integrated with different

00:14:09,790 --> 00:14:14,950
ApS on the meso side on the on the other

00:14:12,370 --> 00:14:19,780
side we essentially have the ocean or or

00:14:14,950 --> 00:14:22,210
the service broker ApS on this side so

00:14:19,780 --> 00:14:24,310
what you see here is a typical call flow

00:14:22,210 --> 00:14:26,200
of what happens when a user interacts

00:14:24,310 --> 00:14:30,370
with Cloud Controller API to instantiate

00:14:26,200 --> 00:14:32,230
a service so the requesters when a user

00:14:30,370 --> 00:14:34,000
goes large into CLI which is what we're

00:14:32,230 --> 00:14:36,760
going to be seen the time or the end of

00:14:34,000 --> 00:14:39,280
it under this that case a user logs in

00:14:36,760 --> 00:14:41,170
the CLI and hits a command to go create

00:14:39,280 --> 00:14:43,720
instantiate ourselves and so that calls

00:14:41,170 --> 00:14:45,520
goes to the Cloud Controller which looks

00:14:43,720 --> 00:14:46,870
at which broker is registered for that

00:14:45,520 --> 00:14:49,690
instance in this case it would be a

00:14:46,870 --> 00:14:51,550
broker running in mark on itself that

00:14:49,690 --> 00:14:53,380
call goes out of the broker broker turns

00:14:51,550 --> 00:14:56,650
around and then instantiates a cluster

00:14:53,380 --> 00:14:59,230
within marathon the response back to the

00:14:56,650 --> 00:15:01,690
end user would be a environment variable

00:14:59,230 --> 00:15:05,460
which gets embedded into their CF

00:15:01,690 --> 00:15:07,930
application itself and at that point the

00:15:05,460 --> 00:15:10,120
application then can consume the cluster

00:15:07,930 --> 00:15:12,510
that's in mazes what we're also

00:15:10,120 --> 00:15:15,340
attempting to do here is to create a

00:15:12,510 --> 00:15:16,240
seamless service match between Cloud

00:15:15,340 --> 00:15:18,639
Foundry amazing

00:15:16,240 --> 00:15:23,139
and also start down the journey of

00:15:18,639 --> 00:15:29,079
having a secure isolated single tenant

00:15:23,139 --> 00:15:31,449
offering cool so before we go there so

00:15:29,079 --> 00:15:33,369
we we do plan to open source the

00:15:31,449 --> 00:15:35,559
implementation here the implementation

00:15:33,369 --> 00:15:37,509
is about one hundred two hundred and

00:15:35,559 --> 00:15:40,839
fifty lines of code pretty much it's

00:15:37,509 --> 00:15:42,730
written in Scala it does have a sort of

00:15:40,839 --> 00:15:45,819
a open implementation that can actually

00:15:42,730 --> 00:15:46,869
talk to any package in may so except for

00:15:45,819 --> 00:15:50,889
a couple of things because there are

00:15:46,869 --> 00:15:52,449
going to be specific sort of nuances

00:15:50,889 --> 00:15:53,949
within each package on like what

00:15:52,449 --> 00:15:55,959
configuration it exposes and what

00:15:53,949 --> 00:15:58,569
configuration that you have just send it

00:15:55,959 --> 00:16:00,369
to it those are easily extendable in the

00:15:58,569 --> 00:16:03,160
frame of the framework has written such

00:16:00,369 --> 00:16:04,959
a way so yeah we'll probably write a

00:16:03,160 --> 00:16:09,100
blog or something at some point to sort

00:16:04,959 --> 00:16:11,139
of let let the lady guys know okay so

00:16:09,100 --> 00:16:12,730
the next important thing is purchaser we

00:16:11,139 --> 00:16:14,350
just wanted to do a double click on the

00:16:12,730 --> 00:16:17,579
persistent volume because this is the

00:16:14,350 --> 00:16:20,410
whole missing piece in the cloud foundry

00:16:17,579 --> 00:16:22,869
infrastructure today so two things that

00:16:20,410 --> 00:16:24,910
are super important for us is to have

00:16:22,869 --> 00:16:28,299
sort of a unified infrastructure where

00:16:24,910 --> 00:16:31,059
we can essentially do both persistent

00:16:28,299 --> 00:16:33,939
and non-persistent services so from a

00:16:31,059 --> 00:16:35,199
purchase and for persistent services of

00:16:33,939 --> 00:16:37,240
course there is a couple of things that

00:16:35,199 --> 00:16:39,220
you need you need to be able to sort of

00:16:37,240 --> 00:16:40,540
have attached a purchase and volume to a

00:16:39,220 --> 00:16:42,339
container so the container actually

00:16:40,540 --> 00:16:43,389
moves from one place to another place

00:16:42,339 --> 00:16:46,089
you want to be able to reattach your

00:16:43,389 --> 00:16:47,740
volume the second thing is you want also

00:16:46,089 --> 00:16:49,929
be able to do this dynamically so you

00:16:47,740 --> 00:16:51,490
don't have to sort of pre create this

00:16:49,929 --> 00:16:53,350
huge massive disk and attach it as a

00:16:51,490 --> 00:16:54,670
single volume to your container so you

00:16:53,350 --> 00:16:57,459
want to be able to sort of shard and

00:16:54,670 --> 00:17:00,910
then partition these disks and then

00:16:57,459 --> 00:17:03,569
assign it to these containers so when we

00:17:00,910 --> 00:17:06,399
started this journey

00:17:03,569 --> 00:17:07,839
CSI was CSIS the container storage

00:17:06,399 --> 00:17:10,449
interface that was already talked about

00:17:07,839 --> 00:17:12,159
at the at the point so we looked at it

00:17:10,449 --> 00:17:14,470
closely is there is still word that

00:17:12,159 --> 00:17:17,289
needs to be done across each of those

00:17:14,470 --> 00:17:19,179
each of these platforms including masers

00:17:17,289 --> 00:17:22,569
and Cooper headers and everything else

00:17:19,179 --> 00:17:24,429
and there is also the other sort of

00:17:22,569 --> 00:17:28,299
integration with the frameworks that's

00:17:24,429 --> 00:17:30,380
also missing so we decided to sort of

00:17:28,299 --> 00:17:34,130
stick with the DVD i/o module

00:17:30,380 --> 00:17:39,080
and gravitated towards port works as our

00:17:34,130 --> 00:17:41,360
solution for using persistent volume so

00:17:39,080 --> 00:17:43,220
from an industrial perspective

00:17:41,360 --> 00:17:45,550
so there are few I mean like when Balaji

00:17:43,220 --> 00:17:48,050
talked about security and compliance

00:17:45,550 --> 00:17:50,120
supporting encrypted volume being able

00:17:48,050 --> 00:17:52,160
to take backups and snapshots are all

00:17:50,120 --> 00:17:53,570
very very important characteristics for

00:17:52,160 --> 00:17:55,610
a data store that we essentially provide

00:17:53,570 --> 00:17:57,940
so we were looking at a storage solution

00:17:55,610 --> 00:18:00,140
that actually has all of this and that's

00:17:57,940 --> 00:18:01,310
that was one of our primary sort of

00:18:00,140 --> 00:18:04,280
requirement when we are actually looking

00:18:01,310 --> 00:18:07,460
at these things then the other thing is

00:18:04,280 --> 00:18:09,590
we also wanted a level of support from

00:18:07,460 --> 00:18:10,820
the community and with the frameworks

00:18:09,590 --> 00:18:12,770
that are available in the community

00:18:10,820 --> 00:18:15,050
because we didn't want to go back and

00:18:12,770 --> 00:18:17,300
Reno and every single thing across all

00:18:15,050 --> 00:18:19,280
of them so DVD I came in very handy and

00:18:17,300 --> 00:18:24,530
the support on port works was also super

00:18:19,280 --> 00:18:27,110
useful for us so when we talk about

00:18:24,530 --> 00:18:28,970
workloads that we want to run on the IOT

00:18:27,110 --> 00:18:31,790
platform there are two prominent types

00:18:28,970 --> 00:18:35,000
of workload high arts like a Cassandra

00:18:31,790 --> 00:18:36,500
elastic which is which is I use a bread

00:18:35,000 --> 00:18:39,260
and butter that as far as our platform

00:18:36,500 --> 00:18:42,350
is concerned and a throughput intensive

00:18:39,260 --> 00:18:45,410
application for example sparked the

00:18:42,350 --> 00:18:48,050
ability for a underlying persistent

00:18:45,410 --> 00:18:49,550
volume provided to quickly switch back

00:18:48,050 --> 00:18:52,670
and forth between either one of those

00:18:49,550 --> 00:18:54,110
and have a attached have a quality of

00:18:52,670 --> 00:18:56,000
service that associated with each of

00:18:54,110 --> 00:18:57,350
those was very imperative for that and

00:18:56,000 --> 00:19:03,710
that's where portals came in and helped

00:18:57,350 --> 00:19:06,860
us out so so the the other thing is we

00:19:03,710 --> 00:19:09,770
also when we started working at

00:19:06,860 --> 00:19:13,070
persistent volumes and the persistent

00:19:09,770 --> 00:19:15,440
data stores we immediately started

00:19:13,070 --> 00:19:17,180
working with the Mesa skies on the DCOs

00:19:15,440 --> 00:19:21,920
Commons SDK that they started building

00:19:17,180 --> 00:19:23,960
so we worked with them on a few

00:19:21,920 --> 00:19:26,060
frameworks including Cassandra and

00:19:23,960 --> 00:19:27,260
elasticsearch and work with the porters

00:19:26,060 --> 00:19:29,870
guys instead of stitching them together

00:19:27,260 --> 00:19:34,970
to be able to use them so we will talk

00:19:29,870 --> 00:19:36,680
about those learnings as well so one

00:19:34,970 --> 00:19:38,180
particular use case that might be

00:19:36,680 --> 00:19:40,290
interesting for this conversation is

00:19:38,180 --> 00:19:43,110
sort of

00:19:40,290 --> 00:19:48,059
an additive manufacturing news case from

00:19:43,110 --> 00:19:49,380
aviation so I mean jet engines ge has

00:19:48,059 --> 00:19:52,020
been one of the largest manufacturers of

00:19:49,380 --> 00:19:54,150
jet jet engines they actually say for

00:19:52,020 --> 00:19:56,220
every few seconds there is actually a

00:19:54,150 --> 00:19:57,540
flight that's taking off with a GE

00:19:56,220 --> 00:20:00,570
engine

00:19:57,540 --> 00:20:01,919
so one other thing the first thing that

00:20:00,570 --> 00:20:03,570
the additive team started actually

00:20:01,919 --> 00:20:05,130
working on is sort of figuring out like

00:20:03,570 --> 00:20:06,900
what is the one that can actually make a

00:20:05,130 --> 00:20:08,490
lot of difference and they picked up

00:20:06,900 --> 00:20:11,640
fuel nozzles there's one of those

00:20:08,490 --> 00:20:15,000
initial sort of pieces that they want to

00:20:11,640 --> 00:20:16,530
3d print so this to give you guys a

00:20:15,000 --> 00:20:18,059
little bit more idea these nozzles are

00:20:16,530 --> 00:20:20,610
like made up of 20 parts when they

00:20:18,059 --> 00:20:22,919
started but when they were 3d printer

00:20:20,610 --> 00:20:25,620
that's just one part and it essentially

00:20:22,919 --> 00:20:28,260
provides you 5x durability and it's like

00:20:25,620 --> 00:20:30,330
25 percent like lighter weight all of

00:20:28,260 --> 00:20:32,280
these are important attributes when it

00:20:30,330 --> 00:20:37,710
sse comes to like building a jet engine

00:20:32,280 --> 00:20:40,260
so to say the the background from our

00:20:37,710 --> 00:20:44,669
perspective from an outcome perspective

00:20:40,260 --> 00:20:45,960
i think two things one is the the metal

00:20:44,669 --> 00:20:48,480
powder that are being utilized for

00:20:45,960 --> 00:20:52,049
manufacturing is like a highly expensive

00:20:48,480 --> 00:20:53,790
commodity it's so and these printing

00:20:52,049 --> 00:20:55,380
actually takes a long time so some of

00:20:53,790 --> 00:20:57,030
these nozzles actually takes like hours

00:20:55,380 --> 00:20:59,669
and hours to essentially get those right

00:20:57,030 --> 00:21:00,690
so what we wanted to do from a business

00:20:59,669 --> 00:21:02,400
perspective what they are actually

00:21:00,690 --> 00:21:03,450
looking for from us is to essentially

00:21:02,400 --> 00:21:06,059
provide them an anomaly detection

00:21:03,450 --> 00:21:08,130
algorithm and a system behind there that

00:21:06,059 --> 00:21:09,570
can essentially go and identify if there

00:21:08,130 --> 00:21:14,429
are any issues while it's actually

00:21:09,570 --> 00:21:15,690
printing if there are the the need is to

00:21:14,429 --> 00:21:18,090
immediately stop it and sort of

00:21:15,690 --> 00:21:20,580
basically flag it to someone to say go

00:21:18,090 --> 00:21:21,870
and actually take a look at it because

00:21:20,580 --> 00:21:23,640
if you continue to print I mean these

00:21:21,870 --> 00:21:27,480
metal powders are like super expensive

00:21:23,640 --> 00:21:30,750
and can be a waste so to help with such

00:21:27,480 --> 00:21:32,700
a use case what we are looking at is a

00:21:30,750 --> 00:21:35,880
architecture that looks something like

00:21:32,700 --> 00:21:39,120
this where we are trying to push the

00:21:35,880 --> 00:21:41,190
computation of as much closer to the

00:21:39,120 --> 00:21:43,919
edge as possible with the chip size that

00:21:41,190 --> 00:21:46,080
we have in business today lot of these

00:21:43,919 --> 00:21:49,200
edge devices are very powerful but we

00:21:46,080 --> 00:21:51,290
still see the need of doing in near

00:21:49,200 --> 00:21:54,080
real-time analysis on the cloud

00:21:51,290 --> 00:21:56,630
which is why we have a this processing

00:21:54,080 --> 00:21:59,030
which pushes in data to our IOT event

00:21:56,630 --> 00:22:01,790
hub infrastructure that's running in in

00:21:59,030 --> 00:22:04,130
mazes as a framework which then takes in

00:22:01,790 --> 00:22:07,700
two fourths based on a record of time

00:22:04,130 --> 00:22:09,530
real-time computation goes into work in

00:22:07,700 --> 00:22:11,630
progress with epics and the hare on

00:22:09,530 --> 00:22:14,060
themes as a framework and mezzos which

00:22:11,630 --> 00:22:16,490
then uses cassandra for its state or a

00:22:14,060 --> 00:22:18,440
micro batch processing that can be done

00:22:16,490 --> 00:22:19,690
on spark again using cassandra at the

00:22:18,440 --> 00:22:24,830
back end publish life

00:22:19,690 --> 00:22:26,840
okay this is our this is our basic

00:22:24,830 --> 00:22:32,450
picture of how our real-time

00:22:26,840 --> 00:22:35,510
architecture looks like today okay okay

00:22:32,450 --> 00:22:36,680
so we will sort of briefly talk about

00:22:35,510 --> 00:22:40,060
some of the challenges that we were

00:22:36,680 --> 00:22:42,440
essentially faced over the course so

00:22:40,060 --> 00:22:44,210
cleanup of tasks wasn't automatically

00:22:42,440 --> 00:22:47,690
done on the services does so do when we

00:22:44,210 --> 00:22:49,100
started using the the new SDK for the

00:22:47,690 --> 00:22:50,480
purchase in framework like us and I

00:22:49,100 --> 00:22:53,540
think one of the initial problems that

00:22:50,480 --> 00:22:56,840
we faced was everything was working for

00:22:53,540 --> 00:22:59,360
sort of creating a particular data store

00:22:56,840 --> 00:23:01,370
and then sort of managing it but then

00:22:59,360 --> 00:23:03,890
the moment you actually issue a delat

00:23:01,370 --> 00:23:05,570
for whatever reason all of these tasks

00:23:03,890 --> 00:23:08,810
are basically still running they're like

00:23:05,570 --> 00:23:10,490
like a ghost so to say which is an

00:23:08,810 --> 00:23:12,140
important problem for us is because when

00:23:10,490 --> 00:23:13,760
a customer actually chooses to delete

00:23:12,140 --> 00:23:15,470
his particular service instance we want

00:23:13,760 --> 00:23:18,230
the entire thing to be cleaned like

00:23:15,470 --> 00:23:19,460
without any traces so that's one of the

00:23:18,230 --> 00:23:22,580
stuff the good part is we worked with

00:23:19,460 --> 00:23:25,600
Mia source community and then that got

00:23:22,580 --> 00:23:29,030
actually fixed as a part of 1.10

00:23:25,600 --> 00:23:30,500
application metrics so we we sort of

00:23:29,030 --> 00:23:31,730
actually we have our own monitoring

00:23:30,500 --> 00:23:34,250
system to essentially monitor our

00:23:31,730 --> 00:23:36,310
infrastructure and promise TS is one of

00:23:34,250 --> 00:23:39,590
the prominent ones that we actually use

00:23:36,310 --> 00:23:41,630
the application matrix API in May so

00:23:39,590 --> 00:23:43,100
this is a completely custom API so we

00:23:41,630 --> 00:23:44,330
were given the feedback and we're

00:23:43,100 --> 00:23:46,460
working with them to essentially see if

00:23:44,330 --> 00:23:48,350
we can get something a more standard API

00:23:46,460 --> 00:23:52,240
or may be compatible with Prometheus

00:23:48,350 --> 00:23:54,830
itself because it's it's vicious today

00:23:52,240 --> 00:23:59,180
few other things that aren't cosmos API

00:23:54,830 --> 00:24:01,190
is so when you when you actually saw the

00:23:59,180 --> 00:24:02,419
create instance call that Balaji was

00:24:01,190 --> 00:24:05,960
essentially

00:24:02,419 --> 00:24:07,399
sort of helping us trace through that is

00:24:05,960 --> 00:24:08,720
actually a call to cosmos a pair that

00:24:07,399 --> 00:24:10,279
actually says here is all of the

00:24:08,720 --> 00:24:14,539
parameters go and essentially spin a

00:24:10,279 --> 00:24:16,909
cluster for me but the the sort of the

00:24:14,539 --> 00:24:18,559
pain point there is the JSON that we

00:24:16,909 --> 00:24:20,299
essentially send it to this API is not

00:24:18,559 --> 00:24:21,590
getting returned back to us they are

00:24:20,299 --> 00:24:23,450
actually completely done in a completely

00:24:21,590 --> 00:24:25,190
different format this is something the

00:24:23,450 --> 00:24:28,100
community is aware so and that's getting

00:24:25,190 --> 00:24:29,899
fixed we talked about a few other issues

00:24:28,100 --> 00:24:32,480
in the SDK framework so long as I

00:24:29,899 --> 00:24:36,019
somewhat escaped that Windows support so

00:24:32,480 --> 00:24:38,239
I mean geez analytics are not new I mean

00:24:36,019 --> 00:24:39,470
G has been running analytics for a long

00:24:38,239 --> 00:24:40,909
time now and these some of these

00:24:39,470 --> 00:24:42,619
analytics are written in so many

00:24:40,909 --> 00:24:45,820
different languages across businesses

00:24:42,619 --> 00:24:49,789
they go from Python to MATLAB to art

00:24:45,820 --> 00:24:52,460
like very custom windows e analytics

00:24:49,789 --> 00:24:54,859
that are actually written and it's and

00:24:52,460 --> 00:24:57,440
some of these are analytics are like so

00:24:54,859 --> 00:24:59,570
big and complex that it's actually not a

00:24:57,440 --> 00:25:02,539
trivial task to be able to rewrite the

00:24:59,570 --> 00:25:03,859
same thing in some other language it

00:25:02,539 --> 00:25:05,840
might essentially take time and it's

00:25:03,859 --> 00:25:09,019
going to be a gradual sort of migration

00:25:05,840 --> 00:25:11,359
so for us being able to support Windows

00:25:09,019 --> 00:25:12,590
and Mase's deseos is pretty important

00:25:11,359 --> 00:25:14,809
because there is so much of analytics

00:25:12,590 --> 00:25:16,999
that are still in Windows ecosystem for

00:25:14,809 --> 00:25:19,580
us need to be able to run in this sort

00:25:16,999 --> 00:25:20,809
of unified infrastructure so that's been

00:25:19,580 --> 00:25:27,820
something that we're working with them

00:25:20,809 --> 00:25:30,710
as well ok let's switch back to a demo

00:25:27,820 --> 00:25:34,820
so the first demo that we're going to

00:25:30,710 --> 00:25:36,619
essentially show you guys is sort of how

00:25:34,820 --> 00:25:38,179
do you essentially see the marketplace

00:25:36,619 --> 00:25:39,919
how does this marketplace integration

00:25:38,179 --> 00:25:43,970
actually works and how can you do a life

00:25:39,919 --> 00:25:56,139
cycle of service so I am logged into a

00:25:43,970 --> 00:25:56,139
CF environment I hope ok it's connected

00:26:14,340 --> 00:26:22,170
okay cool so we're hoping it's all

00:26:19,080 --> 00:26:24,930
visible to you guys okay so I am going

00:26:22,170 --> 00:26:27,300
to look at the marketplace this is yeah

00:26:24,930 --> 00:26:29,250
I'm actually using the CF CLI which is

00:26:27,300 --> 00:26:29,610
the CLI interface to interact with cloud

00:26:29,250 --> 00:26:32,340
foundry

00:26:29,610 --> 00:26:33,750
so I'm doing a sea of marketplace to

00:26:32,340 --> 00:26:39,180
actually get all of the services that

00:26:33,750 --> 00:26:43,820
are available in CF to use I think it's

00:26:39,180 --> 00:26:43,820
the Wi-Fi network which is okay

00:26:57,750 --> 00:27:02,610
okay perfect so so this there is a

00:27:01,110 --> 00:27:05,820
service that's actually available here

00:27:02,610 --> 00:27:08,280
which is a Cassandra framework that we

00:27:05,820 --> 00:27:11,430
have essentially exposed it from a

00:27:08,280 --> 00:27:12,930
source so what I'm going to actually do

00:27:11,430 --> 00:27:17,190
is I'm going to essentially create an

00:27:12,930 --> 00:27:19,080
instance of this particular service I'm

00:27:17,190 --> 00:27:29,220
going to actually go to my notepad and

00:27:19,080 --> 00:27:31,200
then I'm gonna paste so what this

00:27:29,220 --> 00:27:32,490
actually says is it says when a customer

00:27:31,200 --> 00:27:33,990
actually logs and he's gonna basically

00:27:32,490 --> 00:27:36,570
run this command and say okay I need a

00:27:33,990 --> 00:27:38,190
Cassandra cluster and I need three nodes

00:27:36,570 --> 00:27:40,410
in this Cassandra cluster and this is my

00:27:38,190 --> 00:27:42,840
name of the cluster so the moment you

00:27:40,410 --> 00:27:44,490
run this this actually talks to our open

00:27:42,840 --> 00:27:46,430
service broker implementation behind the

00:27:44,490 --> 00:27:50,820
scenes and then that actually talks to

00:27:46,430 --> 00:27:52,860
the cosmos API form a source so at this

00:27:50,820 --> 00:27:55,080
time I have essentially initiated a

00:27:52,860 --> 00:27:56,730
request to create an instance so I'm

00:27:55,080 --> 00:27:59,580
just going to do CF service to actually

00:27:56,730 --> 00:28:01,590
see where it is so you see the creators

00:27:59,580 --> 00:28:04,680
in progress at this time and then if I

00:28:01,590 --> 00:28:08,100
do a dash dodgy UID it actually gives me

00:28:04,680 --> 00:28:13,290
an instance ID here so now if I switch

00:28:08,100 --> 00:28:16,190
back here and then go to my browser the

00:28:13,290 --> 00:28:18,990
connectivity is still fine here okay

00:28:16,190 --> 00:28:23,910
this is a test mixes cluster that we put

00:28:18,990 --> 00:28:25,530
together for this demo so going into

00:28:23,910 --> 00:28:28,320
this particular one if we click on the

00:28:25,530 --> 00:28:29,880
services you can actually see this

00:28:28,320 --> 00:28:32,460
particular service Simpson which is the

00:28:29,880 --> 00:28:35,220
seven seven eight is getting created

00:28:32,460 --> 00:28:36,990
here so this is sort of spinning the

00:28:35,220 --> 00:28:39,270
clusters now it's trying to basically

00:28:36,990 --> 00:28:43,640
get things ready and if you do a sea of

00:28:39,270 --> 00:28:45,690
service again in the CF you can actually

00:28:43,640 --> 00:28:50,850
it's still created in progress it's

00:28:45,690 --> 00:28:53,520
actually still in progress so if you go

00:28:50,850 --> 00:28:56,370
to the marathon API or a marathon

00:28:53,520 --> 00:28:58,200
console you can actually see the same

00:28:56,370 --> 00:29:01,560
cluster that's coming up here as well

00:28:58,200 --> 00:29:03,510
just as a reference for us this actually

00:29:01,560 --> 00:29:05,550
takes like a couple of minutes to

00:29:03,510 --> 00:29:06,960
actually spin well it's actually

00:29:05,550 --> 00:29:08,220
spending now one actually show you guys

00:29:06,960 --> 00:29:08,940
a couple of other things that we

00:29:08,220 --> 00:29:10,770
actually did

00:29:08,940 --> 00:29:12,870
so the

00:29:10,770 --> 00:29:15,300
broker itself has an implementation for

00:29:12,870 --> 00:29:17,010
creating an instance it also has an

00:29:15,300 --> 00:29:19,080
implementation for scaling the instance

00:29:17,010 --> 00:29:22,350
might not be super valid for every

00:29:19,080 --> 00:29:23,580
single data store depending upon the

00:29:22,350 --> 00:29:27,420
type of data store you want to expose

00:29:23,580 --> 00:29:28,980
those api's you can you can do a bind

00:29:27,420 --> 00:29:32,210
unbind and you can do what are we going

00:29:28,980 --> 00:29:32,210
to talk about that as well

00:29:39,340 --> 00:29:44,679
okay so if you actually see the status

00:29:42,190 --> 00:29:46,179
here it's it's saying there is one no

00:29:44,679 --> 00:29:58,440
that's actually starting and the two

00:29:46,179 --> 00:30:04,480
other nodes are pending okay so this is

00:29:58,440 --> 00:30:12,190
still coming up oh yeah sure yeah

00:30:04,480 --> 00:30:13,749
absolutely yes so predicts with some

00:30:12,190 --> 00:30:15,129
okay it's it's gonna be a it's a broad

00:30:13,749 --> 00:30:18,519
question so I'm going to actually take a

00:30:15,129 --> 00:30:20,740
stab at it so two or three things so

00:30:18,519 --> 00:30:23,230
predicts is predicts is a platform which

00:30:20,740 --> 00:30:24,879
is an IOT platform predicts also offers

00:30:23,230 --> 00:30:27,879
a bunch of industrial product Suites

00:30:24,879 --> 00:30:29,980
like asset performance management there

00:30:27,879 --> 00:30:31,629
is brilliant manufacturing which

00:30:29,980 --> 00:30:33,190
essentially gives you a way to

00:30:31,629 --> 00:30:35,259
essentially make your manufacturing

00:30:33,190 --> 00:30:37,720
enamels much better there is operational

00:30:35,259 --> 00:30:39,399
optimization which which is also an

00:30:37,720 --> 00:30:42,850
add-on to brilliant manufacturing and so

00:30:39,399 --> 00:30:46,299
forth so for customers for industrial

00:30:42,850 --> 00:30:47,950
customers you could use predicts

00:30:46,299 --> 00:30:49,659
applications or predicts products to

00:30:47,950 --> 00:30:52,029
essentially go and start monitoring your

00:30:49,659 --> 00:30:53,759
own assets or you can actually monitor

00:30:52,029 --> 00:30:58,029
predicts assets and basically do

00:30:53,759 --> 00:31:00,519
preventive maintenance and and sort of

00:30:58,029 --> 00:31:03,070
reduce your unplanned downtime for their

00:31:00,519 --> 00:31:04,809
applications so those are at a product

00:31:03,070 --> 00:31:06,340
level and we do have some customers that

00:31:04,809 --> 00:31:08,409
are essentially creating their own

00:31:06,340 --> 00:31:10,179
applications extending our predicts

00:31:08,409 --> 00:31:12,730
products and using some of the predicts

00:31:10,179 --> 00:31:15,220
platform components directly to so both

00:31:12,730 --> 00:31:18,210
of those are customers and that's that

00:31:15,220 --> 00:31:18,210
sort of iris tomorrow Liam

00:31:22,250 --> 00:31:25,250
okay

00:31:27,160 --> 00:31:40,300
okay so let me see okay I'm going to

00:31:35,620 --> 00:31:43,860
essentially we look down the GUI D I'm

00:31:40,300 --> 00:31:46,060
gonna actually create a service key here

00:31:43,860 --> 00:31:47,440
yeah because the operation is still in

00:31:46,060 --> 00:31:54,670
progress we won't be able to essentially

00:31:47,440 --> 00:31:58,440
create it okay this one is prepared so

00:31:54,670 --> 00:31:58,440
it's got to be done pretty soon and then

00:32:02,460 --> 00:32:06,340
okay so the other thing that I wanted to

00:32:05,020 --> 00:32:09,820
show you guys well this is actually

00:32:06,340 --> 00:32:13,690
happening in parallel is what we also

00:32:09,820 --> 00:32:15,870
did is we also created a package for the

00:32:13,690 --> 00:32:19,270
open service broker in the universe

00:32:15,870 --> 00:32:20,950
there is a Cassandra OSB package that

00:32:19,270 --> 00:32:23,430
also will be open sourcing it this is

00:32:20,950 --> 00:32:25,810
for folks who are actually using the

00:32:23,430 --> 00:32:27,820
like cloth on the infrastructure to be

00:32:25,810 --> 00:32:29,950
able to go and say okay I wanna deploy

00:32:27,820 --> 00:32:31,660
my own service broker for cloth on the

00:32:29,950 --> 00:32:33,400
open source open source broker for

00:32:31,660 --> 00:32:37,260
coffin you can just do a deploy and then

00:32:33,400 --> 00:32:42,930
it creates a set of the API compatible

00:32:37,260 --> 00:32:45,160
version of a service broker focus entre

00:32:42,930 --> 00:32:46,300
so there's going to be documentation

00:32:45,160 --> 00:32:49,680
some stuff that are going to be

00:32:46,300 --> 00:32:49,680
published on this as well

00:32:57,490 --> 00:33:07,500
I think the network is a little slow so

00:32:59,350 --> 00:33:07,500
it's uh speaking of but sometime okay

00:33:08,890 --> 00:33:13,340
so what you'll essentially see once this

00:33:11,240 --> 00:33:16,370
is complete is we would be able to

00:33:13,340 --> 00:33:18,260
create a service key using this cluster

00:33:16,370 --> 00:33:20,150
of Cassandra and then X data data gets

00:33:18,260 --> 00:33:23,420
exposed as a variable within the app

00:33:20,150 --> 00:33:25,850
what is next for us as far as this is

00:33:23,420 --> 00:33:29,090
concerned as we want then take that and

00:33:25,850 --> 00:33:31,610
create a unique service mesh between an

00:33:29,090 --> 00:33:34,130
application Cloud Foundry and a back-end

00:33:31,610 --> 00:33:35,930
infrastructure or a stateful service

00:33:34,130 --> 00:33:38,420
within my service so we were working

00:33:35,930 --> 00:33:41,530
with partners like avi networks here to

00:33:38,420 --> 00:33:44,780
help us out in that journey as well so

00:33:41,530 --> 00:33:47,390
what that also leads us towards is a to

00:33:44,780 --> 00:33:50,810
build a secure message as well on top of

00:33:47,390 --> 00:33:52,850
that what we will also eventually do is

00:33:50,810 --> 00:33:54,440
to take all of this implementation write

00:33:52,850 --> 00:33:56,000
a blog post so that anybody else who

00:33:54,440 --> 00:33:57,440
wants to go on top can stand on our

00:33:56,000 --> 00:34:00,400
shoulders and make this journey more

00:33:57,440 --> 00:34:00,400
easier for the next one

00:34:05,880 --> 00:34:11,850
okay so I think we can also open it for

00:34:10,620 --> 00:34:35,159
questions well this is actually

00:34:11,850 --> 00:34:39,360
happening so absolutely yeah so one of

00:34:35,159 --> 00:34:42,570
the biggest thing that we have is a a

00:34:39,360 --> 00:34:45,750
platform for anybody to write an

00:34:42,570 --> 00:34:48,360
application that consumes consumes

00:34:45,750 --> 00:34:50,190
pretty physician right so G has in-depth

00:34:48,360 --> 00:34:51,990
knowledge and every vertical that's out

00:34:50,190 --> 00:34:53,970
there for example healthcare or aviation

00:34:51,990 --> 00:34:56,429
power oil and gas transportation

00:34:53,970 --> 00:34:58,350
lighting so we would expose our

00:34:56,429 --> 00:35:01,110
analytics that we've done out of our

00:34:58,350 --> 00:35:03,420
assets oh that would be exposed out as

00:35:01,110 --> 00:35:05,490
part of garlics catalog that a customer

00:35:03,420 --> 00:35:07,130
that for example if you say Kaiser for

00:35:05,490 --> 00:35:09,240
example Chrysler then consume that

00:35:07,130 --> 00:35:11,850
consumer yeah any other thing that is

00:35:09,240 --> 00:35:14,070
that is pertinent to your vertical and

00:35:11,850 --> 00:35:17,640
you can go start using that to do more

00:35:14,070 --> 00:35:24,360
models on top of that the answer a

00:35:17,640 --> 00:35:26,430
question okay so I think in the interest

00:35:24,360 --> 00:35:29,100
of time is I think the demo God is not

00:35:26,430 --> 00:35:30,570
helping us clearly so that is actually

00:35:29,100 --> 00:35:32,910
another service that was pre created

00:35:30,570 --> 00:35:34,260
before this so I'm just got actually

00:35:32,910 --> 00:35:35,490
going to use that service to essentially

00:35:34,260 --> 00:35:39,240
go and show you guys what I wanted

00:35:35,490 --> 00:35:42,720
actually really show so so I mean that

00:35:39,240 --> 00:35:44,040
is another cluster you know I'm going to

00:35:42,720 --> 00:35:46,440
show you there's a there's another one

00:35:44,040 --> 00:35:49,290
called BN as a service instance I'm

00:35:46,440 --> 00:35:51,030
going to I'm going to show you guys that

00:35:49,290 --> 00:35:52,440
so it's it's a three node cluster as

00:35:51,030 --> 00:35:54,270
well it actually has everything running

00:35:52,440 --> 00:35:55,760
and the diploma is completely sucks or

00:35:54,270 --> 00:36:00,870
it's a Cassandra service as well

00:35:55,760 --> 00:36:04,770
and I can do a create service key and I

00:36:00,870 --> 00:36:06,330
can basically say create key one what it

00:36:04,770 --> 00:36:10,380
actually does is it basically goes and

00:36:06,330 --> 00:36:14,120
creates a key for us and then we can

00:36:10,380 --> 00:36:14,120
look at that key here

00:36:16,140 --> 00:36:26,680
okay so as instance name which is VM so

00:36:24,730 --> 00:36:28,180
when I essentially go and say okay give

00:36:26,680 --> 00:36:30,130
me my service key it actually gives you

00:36:28,180 --> 00:36:33,220
all of the notes that were essentially

00:36:30,130 --> 00:36:34,660
created on basis and all of the boats

00:36:33,220 --> 00:36:36,310
pretty much that you have to essentially

00:36:34,660 --> 00:36:38,680
connect to this and the credentials and

00:36:36,310 --> 00:36:40,180
username and password this would only be

00:36:38,680 --> 00:36:41,890
available within that particular what'm

00:36:40,180 --> 00:36:44,110
container and if you only have access to

00:36:41,890 --> 00:36:45,730
the org and the space and see if you can

00:36:44,110 --> 00:36:50,440
even see this and execute this command

00:36:45,730 --> 00:36:52,030
this is protected like that and we can

00:36:50,440 --> 00:36:53,920
do a very similar thing with binding the

00:36:52,030 --> 00:36:58,860
application so we can actually say okay

00:36:53,920 --> 00:37:04,540
I want to go and bind a service with

00:36:58,860 --> 00:37:06,130
just a seed application with VM this

00:37:04,540 --> 00:37:07,690
what this is actually doing is instead

00:37:06,130 --> 00:37:09,550
of us actually manually creating a

00:37:07,690 --> 00:37:11,770
service key we're actually saying okay

00:37:09,550 --> 00:37:14,590
go and take these credentials and give

00:37:11,770 --> 00:37:16,420
it to this guy this application and

00:37:14,590 --> 00:37:17,740
inject it as an environment variable so

00:37:16,420 --> 00:37:19,270
now it's actually injected as an

00:37:17,740 --> 00:37:26,140
environment variable for that particular

00:37:19,270 --> 00:37:28,090
app okay and then in the environment

00:37:26,140 --> 00:37:29,740
variable you get to actually see all of

00:37:28,090 --> 00:37:31,180
these credentials as well so from an

00:37:29,740 --> 00:37:33,250
application perspective we just go and

00:37:31,180 --> 00:37:34,660
look up your particular service instance

00:37:33,250 --> 00:37:38,109
and then get the credentials and start

00:37:34,660 --> 00:37:39,820
interacting with it so and what we are

00:37:38,109 --> 00:37:41,770
working on as part of this journey is to

00:37:39,820 --> 00:37:43,630
create this service mesh on the fly as

00:37:41,770 --> 00:37:45,730
well so that there is no zero touch

00:37:43,630 --> 00:37:48,580
deployment as when you go create on

00:37:45,730 --> 00:37:57,000
demand services which is got a

00:37:48,580 --> 00:37:57,000
five-minute flag so any questions yes

00:38:08,660 --> 00:38:16,080
city for us I think from a I think from

00:38:14,790 --> 00:38:18,180
a cloud perspective all of our clouds

00:38:16,080 --> 00:38:20,160
today are on AWS

00:38:18,180 --> 00:38:21,750
but of course from a predicts

00:38:20,160 --> 00:38:24,119
perspective we want our customers to

00:38:21,750 --> 00:38:25,500
have sort of a unified experience so

00:38:24,119 --> 00:38:28,260
wherever they are they actually get the

00:38:25,500 --> 00:38:31,050
same interface and whatnot but from a

00:38:28,260 --> 00:38:34,200
storage perspective AWS offers a few

00:38:31,050 --> 00:38:36,360
types of EBS volumes like including pros

00:38:34,200 --> 00:38:39,750
and I have standard volume and so forth

00:38:36,360 --> 00:38:42,300
so while in this case with port works

00:38:39,750 --> 00:38:44,910
what we are able to do is sort of create

00:38:42,300 --> 00:38:47,520
a storage pool based on the type of EBS

00:38:44,910 --> 00:38:50,550
volumes and then expose it to as a class

00:38:47,520 --> 00:38:51,990
of storage to our frameworks and the

00:38:50,550 --> 00:38:54,510
frameworks essentially is going to

00:38:51,990 --> 00:38:56,700
basically say I need an IRS heavy

00:38:54,510 --> 00:38:59,550
storage volume and then it actually gets

00:38:56,700 --> 00:39:01,350
the storage volume yep but there is a

00:38:59,550 --> 00:39:03,510
bunch of performance testing and stuff

00:39:01,350 --> 00:39:05,750
that are in flight pretty much for us

00:39:03,510 --> 00:39:05,750
here

00:39:16,069 --> 00:39:19,220
anything else

00:39:19,580 --> 00:39:23,880
watch them thank you thanks for coming

00:39:22,250 --> 00:39:29,659
in

00:39:23,880 --> 00:39:29,659

YouTube URL: https://www.youtube.com/watch?v=FJjcIJeq5wA


