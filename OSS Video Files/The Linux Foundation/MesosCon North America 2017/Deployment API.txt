Title: Deployment API
Publication date: 2017-09-18
Playlist: MesosCon North America 2017
Description: 
	Deployment API - Chris Mays & Micah Noland, HERE Technology

HERE Technologies has many teams deploying services to DC/OS. When first using Mesos, and now DC/OS, the ops team owned the deployments but this caused bottlenecks. Our goal then became to allow the dev teams to deploy directly to DC/OS using an API. However, the ops team didn’t feel the dev team should be exposed to the full Marathon API. First, there would be a learning curve, both now and in the future when new features are added. Second, operationally there are certain things that NEED to be done correctly. For example, certain arguments need to be passed to the docker daemon for logging and monitoring to be setup correctly in the environment. For these reasons, the Deployment API was created to sit between the developers and DC/OS. This allows the operations team to “enhance” the Marathon JSON and provide standards across many development teams.

About

Chris Mays
Principal Engineer, HERE Technologies
Chris Mays is a Principal Engineer at HERE Technologies. He has worked at here for 12 years writing automation, architecting solutions and playing with Docker and Mesos.
Captions: 
	00:00:05,600 --> 00:00:12,210
hello everyone hear me okay

00:00:08,420 --> 00:00:14,519
perfect Thanks so uh we're gonna talk

00:00:12,210 --> 00:00:16,650
about the deployment API that we wrote

00:00:14,519 --> 00:00:18,150
my name is uh Chris Mays and then Mike

00:00:16,650 --> 00:00:22,380
and Nolan later is gonna be doing a

00:00:18,150 --> 00:00:24,630
quick demo on you know some showing

00:00:22,380 --> 00:00:28,349
actually some of the code or the actual

00:00:24,630 --> 00:00:29,550
configuration of how this all works and

00:00:28,349 --> 00:00:32,940
just to give you a little bit background

00:00:29,550 --> 00:00:34,160
on our or how we are using all this

00:00:32,940 --> 00:00:36,600
stuff at I here

00:00:34,160 --> 00:00:39,719
technologies is that we served on the

00:00:36,600 --> 00:00:42,239
docker DCOs or mesda should say Apache

00:00:39,719 --> 00:00:46,050
mezzos and marathon bagman bandwagon

00:00:42,239 --> 00:00:47,520
about three years ago and it uh I we

00:00:46,050 --> 00:00:48,899
both work on the operations team we're

00:00:47,520 --> 00:00:52,739
both tool developers though on the

00:00:48,899 --> 00:00:54,629
operations team and we noticed that we

00:00:52,739 --> 00:00:55,949
if we had twelve dev teams that handed

00:00:54,629 --> 00:00:59,640
off software to us they'd all handed us

00:00:55,949 --> 00:01:02,640
completely differently and so we decided

00:00:59,640 --> 00:01:04,739
to call us around docker and make sure

00:01:02,640 --> 00:01:08,159
everyone starting tanning handing us off

00:01:04,739 --> 00:01:11,130
docker images and our lives became a lot

00:01:08,159 --> 00:01:13,200
simpler after that we ran the open

00:01:11,130 --> 00:01:14,400
source for about two years and then we

00:01:13,200 --> 00:01:15,960
kind of realized we're get we're growing

00:01:14,400 --> 00:01:18,180
too big we need the enterprise support

00:01:15,960 --> 00:01:21,360
we need some of the enterprise features

00:01:18,180 --> 00:01:23,670
like the LDAP stuff and we started

00:01:21,360 --> 00:01:29,520
talking with DCs and then that's where

00:01:23,670 --> 00:01:31,560
we're at today so the problems they've

00:01:29,520 --> 00:01:33,540
been doing what we ran into is we wanted

00:01:31,560 --> 00:01:35,759
to become very very self-service for our

00:01:33,540 --> 00:01:38,189
development development teams we were

00:01:35,759 --> 00:01:39,930
becoming a we were becoming the

00:01:38,189 --> 00:01:41,850
bottleneck for onboarding new

00:01:39,930 --> 00:01:43,380
applications because we would typically

00:01:41,850 --> 00:01:45,899
set up almost everything for them we

00:01:43,380 --> 00:01:48,210
would set up their automation set up

00:01:45,899 --> 00:01:49,229
their their their build flows and stuff

00:01:48,210 --> 00:01:51,060
like that and when you have only a

00:01:49,229 --> 00:01:52,860
couple people doing that for a lot of

00:01:51,060 --> 00:01:54,149
teams you can quickly get overwhelmed so

00:01:52,860 --> 00:02:00,090
we wanted to be a self-service as

00:01:54,149 --> 00:02:00,600
possible the API while relatively simple

00:02:00,090 --> 00:02:02,490
actually

00:02:00,600 --> 00:02:03,390
there is a learning curve when you

00:02:02,490 --> 00:02:09,319
actually start wanting to do some

00:02:03,390 --> 00:02:11,340
standardizations and where we wanted to

00:02:09,319 --> 00:02:13,080
have some of those standardizations I

00:02:11,340 --> 00:02:13,920
was there in the docker run setting so

00:02:13,080 --> 00:02:16,170
like for instance

00:02:13,920 --> 00:02:17,700
we use the docker log driver and in

00:02:16,170 --> 00:02:19,260
order for that to work and when you're

00:02:17,700 --> 00:02:20,880
passing stuff to be a marathon you have

00:02:19,260 --> 00:02:24,319
to set up certain parameters perfectly

00:02:20,880 --> 00:02:28,650
in there to get that all to happen and

00:02:24,319 --> 00:02:30,390
we didn't quite trust all the developers

00:02:28,650 --> 00:02:32,610
in our company to do that correctly so

00:02:30,390 --> 00:02:34,020
we wanted to be able to inject that in

00:02:32,610 --> 00:02:37,530
the middle as they're doing their

00:02:34,020 --> 00:02:38,850
deployment same thing with labels for

00:02:37,530 --> 00:02:40,650
our monitoring stuff to work we needed

00:02:38,850 --> 00:02:42,290
docker labels to be injected correctly

00:02:40,650 --> 00:02:44,430
so we're doing the same thing for that

00:02:42,290 --> 00:02:46,709
we also ran in some issues with a

00:02:44,430 --> 00:02:49,470
marathon lb which might be going away

00:02:46,709 --> 00:02:52,230
obviously with edge lb is coming out but

00:02:49,470 --> 00:02:53,880
it exposes some pretty low-level H a

00:02:52,230 --> 00:02:57,090
proxy stuff and if you set that up

00:02:53,880 --> 00:02:58,620
incorrectly or have a reference here the

00:02:57,090 --> 00:03:01,260
missing the backside sha our back size

00:02:58,620 --> 00:03:03,600
to and if you do that stuff wrong the HD

00:03:01,260 --> 00:03:05,700
proxy configure it gets outputted the

00:03:03,600 --> 00:03:07,590
next time it refreshes is incorrect and

00:03:05,700 --> 00:03:10,290
then you're a cheap proxy never updates

00:03:07,590 --> 00:03:13,769
again which is always fun until you fix

00:03:10,290 --> 00:03:17,519
the problem so the solution for us was

00:03:13,769 --> 00:03:19,140
to proxy the DCOs api so we put an api

00:03:17,519 --> 00:03:22,260
in front of it that now the dev team is

00:03:19,140 --> 00:03:26,180
sitting what it does is it adds an extra

00:03:22,260 --> 00:03:28,230
layer control it allows the ops team to

00:03:26,180 --> 00:03:31,920
basically control the parameters that

00:03:28,230 --> 00:03:33,030
the software is getting run under the

00:03:31,920 --> 00:03:35,070
other parts that the other advantage

00:03:33,030 --> 00:03:37,290
here is that it gives us a pretty pretty

00:03:35,070 --> 00:03:40,049
easy change management and you'll see

00:03:37,290 --> 00:03:45,600
why in a little bit why this makes it

00:03:40,049 --> 00:03:48,630
easier the API or the API DCOs

00:03:45,600 --> 00:03:50,340
deployment api still utilizes dcs

00:03:48,630 --> 00:03:51,989
security so the username and password

00:03:50,340 --> 00:03:53,549
that gets passed to us where the we

00:03:51,989 --> 00:03:57,480
distract me to send that stuff directly

00:03:53,549 --> 00:03:59,160
on to DCOs so whatever whatever access

00:03:57,480 --> 00:04:01,110
controls have been set up continue to be

00:03:59,160 --> 00:04:04,320
set up perfectly for them in this

00:04:01,110 --> 00:04:05,430
situation all the parameters also that

00:04:04,320 --> 00:04:07,530
we are storing so all those different

00:04:05,430 --> 00:04:08,850
stuff how many instances CPU memory all

00:04:07,530 --> 00:04:12,840
that stuff that you would need for your

00:04:08,850 --> 00:04:15,120
app in the marathon JSON are stored in

00:04:12,840 --> 00:04:16,380
git so the nice thing is that then is

00:04:15,120 --> 00:04:18,690
that the number when you get all the

00:04:16,380 --> 00:04:20,519
advantages of but you know now of an SCM

00:04:18,690 --> 00:04:22,229
you get password protection you know

00:04:20,519 --> 00:04:25,229
times you know when things change who

00:04:22,229 --> 00:04:27,000
changed them and like for instance we

00:04:25,229 --> 00:04:27,510
use Gerrit inside our company so we get

00:04:27,000 --> 00:04:28,950
we do

00:04:27,510 --> 00:04:32,280
reviews relatively easy on that stuff

00:04:28,950 --> 00:04:34,800
and we kind of get away from having a

00:04:32,280 --> 00:04:39,420
lot of just typo errors some fir'd you

00:04:34,800 --> 00:04:41,550
know during configuration so now getting

00:04:39,420 --> 00:04:43,860
to the files we mike is gonna show you

00:04:41,550 --> 00:04:47,580
this in no more detail but just a quick

00:04:43,860 --> 00:04:50,580
primer on it we the the system we use

00:04:47,580 --> 00:04:53,340
supports both properties Auriemma files

00:04:50,580 --> 00:04:55,380
it's a hierarchical so you'll see that

00:04:53,340 --> 00:04:57,780
there's three file names here the

00:04:55,380 --> 00:04:59,840
application desk global is one that you

00:04:57,780 --> 00:05:05,280
would potentially set across all your

00:04:59,840 --> 00:05:06,840
deployments so if you want to make sure

00:05:05,280 --> 00:05:09,750
something is set across all deployments

00:05:06,840 --> 00:05:11,760
you'd put it in that file then um hello

00:05:09,750 --> 00:05:16,620
world - deploy so this would be for the

00:05:11,760 --> 00:05:19,410
hello world app that the stuff in that

00:05:16,620 --> 00:05:21,390
file with a govern stuff across that app

00:05:19,410 --> 00:05:23,010
only and then there's another layer of

00:05:21,390 --> 00:05:24,720
hierarchy which would be the hello world

00:05:23,010 --> 00:05:27,120
- deploy - dev so then that would

00:05:24,720 --> 00:05:29,280
override things for the dev deployment

00:05:27,120 --> 00:05:30,990
so if something were set higher in

00:05:29,280 --> 00:05:35,480
hierarchy the lower you go the it would

00:05:30,990 --> 00:05:38,400
override what's set there

00:05:35,480 --> 00:05:41,010
um the deployment API is relatively

00:05:38,400 --> 00:05:44,550
simple it has three endpoints there's a

00:05:41,010 --> 00:05:46,080
deploy which actually goes and grabs the

00:05:44,550 --> 00:05:47,840
configs and creates the Marathon JSON

00:05:46,080 --> 00:05:52,680
and then talks to gcos

00:05:47,840 --> 00:05:54,150
the then so the idea is you hit the do

00:05:52,680 --> 00:05:56,010
the deployment and then you would in

00:05:54,150 --> 00:05:58,530
your automation call the status over and

00:05:56,010 --> 00:06:00,900
over to make sure you know it's on some

00:05:58,530 --> 00:06:02,820
cadence every whatever 15 seconds to

00:06:00,900 --> 00:06:04,980
make sure the deployment actually

00:06:02,820 --> 00:06:06,510
succeeded because you know if it's doing

00:06:04,980 --> 00:06:08,100
a rolling deploy for instance replacing

00:06:06,510 --> 00:06:10,080
instances it could take five minutes to

00:06:08,100 --> 00:06:11,550
finally get that deployment to work and

00:06:10,080 --> 00:06:13,440
then there's a configure in point for

00:06:11,550 --> 00:06:15,000
mainly kind of debugging and testing so

00:06:13,440 --> 00:06:17,430
it just would be it returns what the

00:06:15,000 --> 00:06:23,100
Marathon JSON would be for the input

00:06:17,430 --> 00:06:24,840
given we have open sourced this so as of

00:06:23,100 --> 00:06:27,030
yesterday we finally forgot this work

00:06:24,840 --> 00:06:29,970
through our company's legal and all

00:06:27,030 --> 00:06:33,690
those processes so it is open sourced at

00:06:29,970 --> 00:06:35,130
this address and then if anybody needs

00:06:33,690 --> 00:06:38,900
to contact us for whatever reason uh

00:06:35,130 --> 00:06:40,430
here's our email addresses and then

00:06:38,900 --> 00:06:43,360
we're gonna just get to the demo now so

00:06:40,430 --> 00:06:43,360
Mike has enough time

00:06:55,080 --> 00:07:03,749
you guys hear me

00:06:58,169 --> 00:07:04,319
alright alright so we're gonna run a

00:07:03,749 --> 00:07:06,659
live demo

00:07:04,319 --> 00:07:10,310
hopefully the live demo gods are nice to

00:07:06,659 --> 00:07:14,249
us today we're running this in Amazon

00:07:10,310 --> 00:07:17,129
demo DCs and Amazon first thing I'm

00:07:14,249 --> 00:07:20,009
gonna do is install the deployment API

00:07:17,129 --> 00:07:24,979
service show you the user interface for

00:07:20,009 --> 00:07:26,909
it then I'm going to show how we build

00:07:24,979 --> 00:07:28,860
configuration files those three files

00:07:26,909 --> 00:07:32,159
that Chris was talking about we build

00:07:28,860 --> 00:07:34,110
those mo files in the git repo in the

00:07:32,159 --> 00:07:36,779
deployments git repo and then finally

00:07:34,110 --> 00:07:39,889
I'm going to show a Jenkins declarative

00:07:36,779 --> 00:07:45,689
pipeline running which builds builds a

00:07:39,889 --> 00:07:47,999
service and deploys it to DCOs so the

00:07:45,689 --> 00:07:50,180
first thing we're gonna do is install

00:07:47,999 --> 00:07:53,039
deployment API service to DCOs

00:07:50,180 --> 00:07:55,680
unfortunately we have we're doing it

00:07:53,039 --> 00:07:58,080
with the marathon JSON directly right

00:07:55,680 --> 00:08:00,180
now we're still waiting for the final

00:07:58,080 --> 00:08:03,270
legal approval to get the image on

00:08:00,180 --> 00:08:05,870
docker hub but the it's open source it's

00:08:03,270 --> 00:08:08,460
just our lawyers just need to finally

00:08:05,870 --> 00:08:11,819
approve the Terms of Service so what our

00:08:08,460 --> 00:08:14,909
ideal scenario for this is to have it as

00:08:11,819 --> 00:08:17,129
a DC OS universe app that you installed

00:08:14,909 --> 00:08:19,409
with one click we have that working in

00:08:17,129 --> 00:08:21,210
our environment we just need to get that

00:08:19,409 --> 00:08:24,120
final approval for the image on docker

00:08:21,210 --> 00:08:26,580
hub and get that pull request for the

00:08:24,120 --> 00:08:27,870
mesosphere universe approved so I'm

00:08:26,580 --> 00:08:30,659
thinking the next couple weeks we'll

00:08:27,870 --> 00:08:32,219
have it in the universe and if anybody

00:08:30,659 --> 00:08:33,690
is really interested in getting getting

00:08:32,219 --> 00:08:36,209
a notification when it does get into the

00:08:33,690 --> 00:08:39,630
universe email me and I'll let you know

00:08:36,209 --> 00:08:43,529
so for this demo I'm installing it out

00:08:39,630 --> 00:08:48,089
of a image I built and pushed to our

00:08:43,529 --> 00:08:50,640
local docker registry and this is built

00:08:48,089 --> 00:08:54,029
out of the public repo and there's only

00:08:50,640 --> 00:08:57,569
two configuration items that go into the

00:08:54,029 --> 00:09:01,709
deployment and the first one is your git

00:08:57,569 --> 00:09:06,480
URI and that is the SSH URI for your git

00:09:01,709 --> 00:09:08,819
repo we have for this demo we've got it

00:09:06,480 --> 00:09:10,410
in github this is a public repository so

00:09:08,819 --> 00:09:11,410
you can go in and see what this looks

00:09:10,410 --> 00:09:14,140
like

00:09:11,410 --> 00:09:18,790
and then the second configuration item

00:09:14,140 --> 00:09:21,430
is the SSH private key to access that

00:09:18,790 --> 00:09:23,740
git repo so in github this is you create

00:09:21,430 --> 00:09:25,990
a deploy key for this you generate your

00:09:23,740 --> 00:09:27,520
public and private key add the public

00:09:25,990 --> 00:09:30,190
key to github and then you take your

00:09:27,520 --> 00:09:34,450
private key and you use a DC OS secret

00:09:30,190 --> 00:09:36,910
for this so if you're not familiar with

00:09:34,450 --> 00:09:39,490
that all you would do is take the chunk

00:09:36,910 --> 00:09:46,210
of text your ss8 your RSA private key

00:09:39,490 --> 00:09:50,520
and paste it into this secret and that's

00:09:46,210 --> 00:09:50,520
its let's deploy the service nope

00:10:02,130 --> 00:10:08,520
as this comes up this is our this is the

00:10:05,100 --> 00:10:10,290
source for the github for our open

00:10:08,520 --> 00:10:11,970
source project it's under Apache so it

00:10:10,290 --> 00:10:15,990
should be no issue to use it in your

00:10:11,970 --> 00:10:19,560
environment the documentation is

00:10:15,990 --> 00:10:20,730
relatively expensive for all the

00:10:19,560 --> 00:10:25,670
documenting all the different scenarios

00:10:20,730 --> 00:10:30,020
that you can have with your deployments

00:10:25,670 --> 00:10:34,050
alright looks like it came up perfect

00:10:30,020 --> 00:10:36,000
okay so this is the front page for

00:10:34,050 --> 00:10:38,070
deployment API it's generated out of

00:10:36,000 --> 00:10:40,410
swagger if you're familiar if you're not

00:10:38,070 --> 00:10:43,080
familiar with swagger it's a auto

00:10:40,410 --> 00:10:47,340
generating tool which generates this

00:10:43,080 --> 00:10:50,160
nice page for interacting with your REST

00:10:47,340 --> 00:10:51,450
API s so they you wouldn't use this as

00:10:50,160 --> 00:10:53,220
part of your deployments but it's very

00:10:51,450 --> 00:10:55,680
useful when you're testing and debugging

00:10:53,220 --> 00:11:00,000
and seeing what's available in the API

00:10:55,680 --> 00:11:01,890
so it's self documenting it will do all

00:11:00,000 --> 00:11:04,260
the status codes that the service can

00:11:01,890 --> 00:11:06,120
return descriptions of all of those it

00:11:04,260 --> 00:11:07,590
shows you the model of exactly what

00:11:06,120 --> 00:11:10,760
you'd post and the model of what it's

00:11:07,590 --> 00:11:14,160
going to return it gives you a lot of

00:11:10,760 --> 00:11:19,380
visibility into exactly what the REST

00:11:14,160 --> 00:11:21,210
API looks like so it's these are the

00:11:19,380 --> 00:11:24,000
three endpoints that Chris was

00:11:21,210 --> 00:11:25,920
describing where you have your deploy

00:11:24,000 --> 00:11:27,960
endpoint your status endpoint and you're

00:11:25,920 --> 00:11:30,990
configuring point deploy is for

00:11:27,960 --> 00:11:34,530
deploying your service status is what

00:11:30,990 --> 00:11:36,210
you would call on a regular basis as

00:11:34,530 --> 00:11:37,890
you're deploying every 15 seconds

00:11:36,210 --> 00:11:40,980
checking if my deployment done checking

00:11:37,890 --> 00:11:44,040
is my deployment done and then config

00:11:40,980 --> 00:11:47,040
like Chris said is for transforming the

00:11:44,040 --> 00:11:48,300
yamo model into the Marathon config and

00:11:47,040 --> 00:11:54,530
I'll show you that in a minute so that

00:11:48,300 --> 00:11:56,910
makes more sense so let's jump into the

00:11:54,530 --> 00:11:59,010
deployments repo so this is a public

00:11:56,910 --> 00:12:01,260
repo you can you can go in and look at

00:11:59,010 --> 00:12:02,640
this if you want there's nothing secret

00:12:01,260 --> 00:12:04,890
about our deployments because anything

00:12:02,640 --> 00:12:07,440
secret we want to use DCOs secrets for

00:12:04,890 --> 00:12:09,510
anyway so you can see there's the

00:12:07,440 --> 00:12:13,410
there's the global configuration file

00:12:09,510 --> 00:12:14,820
which has things we want to set at the

00:12:13,410 --> 00:12:15,120
global level and like chris said there's

00:12:14,820 --> 00:12:16,980
the

00:12:15,120 --> 00:12:19,370
her parameters for the log driver maybe

00:12:16,980 --> 00:12:22,350
you want a difference this log format

00:12:19,370 --> 00:12:25,020
the the syslog server you could also

00:12:22,350 --> 00:12:27,380
inject into here and these are these are

00:12:25,020 --> 00:12:29,910
the parameters you would want to set for

00:12:27,380 --> 00:12:33,120
every deployment you do all of this is

00:12:29,910 --> 00:12:34,890
over aidable but so typically we don't

00:12:33,120 --> 00:12:36,930
have a ton of things in the in this file

00:12:34,890 --> 00:12:38,430
but it's very useful if you want to set

00:12:36,930 --> 00:12:42,779
things that are global across all your

00:12:38,430 --> 00:12:45,029
deployments so in this example let's say

00:12:42,779 --> 00:12:49,610
we have an amp called cool service it's

00:12:45,029 --> 00:12:52,260
like a hello world server type service

00:12:49,610 --> 00:12:55,320
if we're deploying so this is the

00:12:52,260 --> 00:12:56,730
application config for cool service this

00:12:55,320 --> 00:12:59,190
would this would apply to every

00:12:56,730 --> 00:13:00,779
deployment of cool service and under the

00:12:59,190 --> 00:13:04,050
Marathon namespace this should look

00:13:00,779 --> 00:13:08,279
pretty familiar to you it's very similar

00:13:04,050 --> 00:13:13,520
to the marathon JSON format and even

00:13:08,279 --> 00:13:17,760
though JSON is completely drivable from

00:13:13,520 --> 00:13:19,770
gamal the gamma model isn't a one-to-one

00:13:17,760 --> 00:13:24,420
conversion it's a custom gamma model

00:13:19,770 --> 00:13:26,250
which gives us some some easier controls

00:13:24,420 --> 00:13:29,880
over certain things that are difficult

00:13:26,250 --> 00:13:31,529
in the JSON format like constraints are

00:13:29,880 --> 00:13:34,140
a little more straightforward and easier

00:13:31,529 --> 00:13:35,760
with the Y Amal if you're familiar with

00:13:34,140 --> 00:13:38,100
the way DCOs constraints work it's like

00:13:35,760 --> 00:13:39,600
an array of strings and you kind of have

00:13:38,100 --> 00:13:42,630
to go back to the documentation to

00:13:39,600 --> 00:13:44,580
figure out which which string

00:13:42,630 --> 00:13:46,620
corresponds to which field but in this

00:13:44,580 --> 00:13:50,640
the the fields are all labeled so we get

00:13:46,620 --> 00:13:57,270
more control over that and so that's why

00:13:50,640 --> 00:14:01,040
we have the custom yamo model so the the

00:13:57,270 --> 00:14:04,400
three-tier hierarchy actually the the

00:14:01,040 --> 00:14:08,270
development or the this environment

00:14:04,400 --> 00:14:08,270
configure as well if it loads

00:14:14,419 --> 00:14:20,369
hmm okay there we go so this would be

00:14:18,149 --> 00:14:22,559
the properties that only course that

00:14:20,369 --> 00:14:25,259
only apply to the dev deployment for

00:14:22,559 --> 00:14:28,799
cool service so the way the three-tier

00:14:25,259 --> 00:14:31,169
hierarchy works is that environment can

00:14:28,799 --> 00:14:33,449
override application settings and global

00:14:31,169 --> 00:14:35,699
settings and application can override

00:14:33,449 --> 00:14:38,759
global settings so you have complete

00:14:35,699 --> 00:14:43,619
control over what you inherit and what

00:14:38,759 --> 00:14:45,629
you so the easiest kind of show what

00:14:43,619 --> 00:14:48,749
this all looks like so the way it works

00:14:45,629 --> 00:14:50,429
is it will merge when you deploy it will

00:14:48,749 --> 00:14:52,699
merge this file like let's that we're

00:14:50,429 --> 00:14:55,979
deploying cool service to dev it will

00:14:52,699 --> 00:15:01,220
deploy it will combine this file this

00:14:55,979 --> 00:15:01,220
file and the global file

00:15:03,470 --> 00:15:13,339
so this is what so if we look at the

00:15:06,619 --> 00:15:13,339
config on point and Dev

00:15:14,290 --> 00:15:18,709
and this is this is the nice thing about

00:15:16,910 --> 00:15:21,380
swagger it gives you the exact curl

00:15:18,709 --> 00:15:23,180
command that you would need to run this

00:15:21,380 --> 00:15:25,070
it gives you that for all of the end

00:15:23,180 --> 00:15:26,089
points it's a very nice thing for

00:15:25,070 --> 00:15:27,529
debugging but this should look very

00:15:26,089 --> 00:15:30,020
familiar to you this is the marathon

00:15:27,529 --> 00:15:31,880
JSON format so this is all three of

00:15:30,020 --> 00:15:33,680
those files combined and then

00:15:31,880 --> 00:15:43,220
transformed into the marathon JSON

00:15:33,680 --> 00:15:46,190
format so the the only tricky thing that

00:15:43,220 --> 00:15:51,410
you really have to deal with is how do

00:15:46,190 --> 00:15:53,709
you merge lists of things because if you

00:15:51,410 --> 00:15:53,709
have

00:16:02,490 --> 00:16:04,730
and

00:16:12,810 --> 00:16:18,140
handle that is by these

00:16:24,279 --> 00:16:27,279
sure

00:16:33,029 --> 00:16:40,589
check check all right

00:16:42,270 --> 00:16:50,920
lists so all right so the way this works

00:16:47,709 --> 00:16:53,589
is we have these additional namespaces

00:16:50,920 --> 00:16:55,149
on that for global application and

00:16:53,589 --> 00:16:58,510
environment properties so you can see

00:16:55,149 --> 00:17:00,760
under the global namespace you can set a

00:16:58,510 --> 00:17:02,580
list of docker parameters and that will

00:17:00,760 --> 00:17:04,630
get merged with any of the other

00:17:02,580 --> 00:17:06,040
application docker parameters or

00:17:04,630 --> 00:17:07,959
environment docker parameters in the

00:17:06,040 --> 00:17:11,410
other namespaces so the easiest way to

00:17:07,959 --> 00:17:14,050
show this is with the labels so this

00:17:11,410 --> 00:17:17,079
application cool service application has

00:17:14,050 --> 00:17:22,000
two labels defined DCOs service port

00:17:17,079 --> 00:17:25,510
index and DCs service scheme and the dev

00:17:22,000 --> 00:17:27,400
profile has one label defined under the

00:17:25,510 --> 00:17:31,030
environment name space environment

00:17:27,400 --> 00:17:35,410
labels namespace and it's a specific to

00:17:31,030 --> 00:17:41,050
just the dev deployment so when we go

00:17:35,410 --> 00:17:42,940
back to this we'll see all three of

00:17:41,050 --> 00:17:44,920
these labels got merged these two are

00:17:42,940 --> 00:17:47,140
from the application namespace and these

00:17:44,920 --> 00:17:57,250
are from this is from the environment

00:17:47,140 --> 00:18:00,309
namespace and if we went to prod prod

00:17:57,250 --> 00:18:05,100
instead you would see it has a different

00:18:00,309 --> 00:18:05,100
DCOs service name which comes from

00:18:07,779 --> 00:18:18,099
this file the prod file overriding

00:18:14,940 --> 00:18:21,519
individual properties is very simple so

00:18:18,099 --> 00:18:27,099
for example the the application defines

00:18:21,519 --> 00:18:31,859
the memory here as one gig and you'll

00:18:27,099 --> 00:18:35,289
see if we look at the devvra file for it

00:18:31,859 --> 00:18:38,679
it's not 2 1 gig but if but for

00:18:35,289 --> 00:18:44,229
production maybe we want them them to be

00:18:38,679 --> 00:18:48,789
a gig and a half and so we define it to

00:18:44,229 --> 00:18:50,369
be a gig and a half at the prod level or

00:18:48,789 --> 00:18:53,649
at the environment level and we get that

00:18:50,369 --> 00:18:56,379
but we never had to define that that

00:18:53,649 --> 00:19:01,239
1024 in the dev file it got inherited

00:18:56,379 --> 00:19:03,820
from the application configuration so

00:19:01,239 --> 00:19:08,739
it's pretty easy to override anything in

00:19:03,820 --> 00:19:10,989
the marathon namespace and the other

00:19:08,739 --> 00:19:12,820
namespace is the global application

00:19:10,989 --> 00:19:19,450
environment namespaces are simply

00:19:12,820 --> 00:19:25,149
combined the there is a way to as I

00:19:19,450 --> 00:19:30,549
mentioned to ignore parameters in lists

00:19:25,149 --> 00:19:34,479
above you so for example in this prod

00:19:30,549 --> 00:19:40,719
deployment we say application and the

00:19:34,479 --> 00:19:44,649
descent to nothing which means it will

00:19:40,719 --> 00:19:50,889
not inherit from this list so if we look

00:19:44,649 --> 00:19:53,669
at the dev deployment don't you try and

00:19:50,889 --> 00:19:53,669
type with one hand here

00:19:56,500 --> 00:20:04,210
you'll see it has the reference to this

00:20:00,340 --> 00:20:05,560
secret in the environment we define the

00:20:04,210 --> 00:20:08,290
the secret object then we have the

00:20:05,560 --> 00:20:19,120
reference under the end here but if we

00:20:08,290 --> 00:20:20,740
looked at the prod deployment you would

00:20:19,120 --> 00:20:22,030
see the secret was still defined but it

00:20:20,740 --> 00:20:26,110
doesn't get it put into the environment

00:20:22,030 --> 00:20:28,720
so that's what so that's how you control

00:20:26,110 --> 00:20:32,260
exactly what goes in to your final

00:20:28,720 --> 00:20:35,260
deployment there's one more feature that

00:20:32,260 --> 00:20:38,320
I died that's easier to see in the

00:20:35,260 --> 00:20:40,060
documentation and this is something that

00:20:38,320 --> 00:20:45,580
Chris mentioned earlier so we have the

00:20:40,060 --> 00:20:52,440
idea of label templates so this makes it

00:20:45,580 --> 00:20:58,060
easy to define complex strings as

00:20:52,440 --> 00:21:00,370
templated options so we have two built

00:20:58,060 --> 00:21:04,180
in specifically to deal with these

00:21:00,370 --> 00:21:07,810
strange aches h a proxy options that you

00:21:04,180 --> 00:21:11,110
need to add as labels so it injects the

00:21:07,810 --> 00:21:14,950
the argument that you pass in to here

00:21:11,110 --> 00:21:18,940
and that that's for health checks on a

00:21:14,950 --> 00:21:24,270
hostname and then this is for increasing

00:21:18,940 --> 00:21:27,460
the timeout for h a proxy and of course

00:21:24,270 --> 00:21:30,580
you can define your own custom label

00:21:27,460 --> 00:21:32,080
templates without changing the code and

00:21:30,580 --> 00:21:35,350
it's describing the documentation you

00:21:32,080 --> 00:21:37,540
would just add yamo file to the to the

00:21:35,350 --> 00:21:39,130
deployments repo define your template

00:21:37,540 --> 00:21:41,230
and you have complete control over what

00:21:39,130 --> 00:21:43,630
that template looks like and labels are

00:21:41,230 --> 00:21:45,310
used for lots of different things in

00:21:43,630 --> 00:21:48,580
docker orchestration and we use it for

00:21:45,310 --> 00:21:51,070
monitoring and for a very you know dyno

00:21:48,580 --> 00:21:57,990
data dog uses it i know h a proxy uses

00:21:51,070 --> 00:22:03,450
it lots of things use it so let's show

00:21:57,990 --> 00:22:03,450
this in action i think that's

00:22:04,310 --> 00:22:09,410
so here's the cool service code it's

00:22:07,120 --> 00:22:14,120
public it's just a simple hello world

00:22:09,410 --> 00:22:19,340
application we're going to be doing this

00:22:14,120 --> 00:22:21,680
demo in Jenkins but since it's a REST

00:22:19,340 --> 00:22:23,270
API it should be clear that it's not

00:22:21,680 --> 00:22:26,300
really Jenkins is not really required

00:22:23,270 --> 00:22:28,400
for any of this we've been using

00:22:26,300 --> 00:22:34,130
electric flow for many months to do this

00:22:28,400 --> 00:22:37,040
I know most CI tools support calling

00:22:34,130 --> 00:22:38,900
rest api's travesty I think you can just

00:22:37,040 --> 00:22:42,380
do it with curl in the in the trusty

00:22:38,900 --> 00:22:44,210
image but it's not Jenkins specific but

00:22:42,380 --> 00:22:46,550
I will show you the the Jenkins file

00:22:44,210 --> 00:22:49,760
because we have examples in the

00:22:46,550 --> 00:22:53,210
documentation of exactly how to write

00:22:49,760 --> 00:22:56,660
these methods so your dev teams can use

00:22:53,210 --> 00:22:57,740
it so I import this library this is in

00:22:56,660 --> 00:23:01,250
the documentation I'm not going to get

00:22:57,740 --> 00:23:03,860
too far into this but all this library

00:23:01,250 --> 00:23:06,860
does is provide this function here

00:23:03,860 --> 00:23:10,670
called deployment API and what this

00:23:06,860 --> 00:23:13,850
function does is calls the deploy

00:23:10,670 --> 00:23:16,010
endpoint passing in your app name and

00:23:13,850 --> 00:23:21,980
environment and then the docker image

00:23:16,010 --> 00:23:24,020
and then it calls the blocks while it

00:23:21,980 --> 00:23:27,380
calls the status endpoint waiting for a

00:23:24,020 --> 00:23:30,770
successful deployment so this Jenkins

00:23:27,380 --> 00:23:32,600
file is not too complicated otherwise

00:23:30,770 --> 00:23:37,810
all we're doing is testing and building

00:23:32,600 --> 00:23:37,810
a docker image and doing the deployment

00:23:38,430 --> 00:23:46,350
let's pull up this Jenkins so I can I'm

00:23:43,020 --> 00:23:49,410
gonna start this pipeline up it'll run

00:23:46,350 --> 00:23:53,220
it takes a about 30 seconds for the

00:23:49,410 --> 00:23:56,880
executors to spin up in mezzos here

00:23:53,220 --> 00:23:59,820
it'll show up here but while that runs I

00:23:56,880 --> 00:24:03,270
kind of want to show you exactly what

00:23:59,820 --> 00:24:04,110
you would put into the deploy when

00:24:03,270 --> 00:24:05,820
you're deploying

00:24:04,110 --> 00:24:09,390
so there's five parameters that go into

00:24:05,820 --> 00:24:14,420
an employment and these are your DCOs

00:24:09,390 --> 00:24:14,420
username your DCOs

00:24:14,900 --> 00:24:22,070
password this is your

00:24:27,020 --> 00:24:32,840
for example and this is the same image

00:24:31,040 --> 00:24:36,350
string that would go into your marathon

00:24:32,840 --> 00:24:40,760
JSON so you can deploy from docker hub

00:24:36,350 --> 00:24:42,800
or a private repo anyway it would be the

00:24:40,760 --> 00:24:51,920
same ring that you would pass into the

00:24:42,800 --> 00:24:55,360
marathon JSON so this is running this

00:24:51,920 --> 00:24:55,360
should not take too much longer

00:24:58,540 --> 00:25:01,540
the

00:25:05,190 --> 00:25:11,020
so this is the the Jenkins library that

00:25:09,580 --> 00:25:13,120
I'm calling just so you have an idea of

00:25:11,020 --> 00:25:16,480
what exactly this does and so it just

00:25:13,120 --> 00:25:17,980
calls deploy passing in the the same

00:25:16,480 --> 00:25:21,580
payload that I was just showing you and

00:25:17,980 --> 00:25:29,040
then it blocks until deploy or deployed

00:25:21,580 --> 00:25:29,040
or failed it should be almost done

00:25:36,670 --> 00:25:41,450
okay so once it gets that def deployment

00:25:39,350 --> 00:25:45,740
section we see it already starting up

00:25:41,450 --> 00:25:48,920
here in Indy cos so it's deploying and

00:25:45,740 --> 00:25:50,720
then once it's once the deployment API

00:25:48,920 --> 00:25:52,610
function determines that it's healthy

00:25:50,720 --> 00:25:54,290
after calling the status endpoint over

00:25:52,610 --> 00:25:58,970
and over let me show you what that looks

00:25:54,290 --> 00:26:01,160
like if you're curious so this is an

00:25:58,970 --> 00:26:04,130
example of how you'd post to the deploy

00:26:01,160 --> 00:26:06,230
endpoint this is what it returns it

00:26:04,130 --> 00:26:09,260
returns your app ID and then when you

00:26:06,230 --> 00:26:10,340
post to the Status endpoint you pass in

00:26:09,260 --> 00:26:11,330
the same information your

00:26:10,340 --> 00:26:13,580
username/password

00:26:11,330 --> 00:26:14,990
app name and app environment you don't

00:26:13,580 --> 00:26:16,430
pass in the image obviously because

00:26:14,990 --> 00:26:19,010
you're looking for the status and it

00:26:16,430 --> 00:26:23,570
returns you something similar to the

00:26:19,010 --> 00:26:25,040
marathon deployments API so this is what

00:26:23,570 --> 00:26:26,660
it looks like when it's deploying and

00:26:25,040 --> 00:26:30,230
this is what it looks like when it's

00:26:26,660 --> 00:26:32,270
finally deployed so all my Jenkins

00:26:30,230 --> 00:26:34,280
function does is look for this state of

00:26:32,270 --> 00:26:39,710
deployed and that these these tasks

00:26:34,280 --> 00:26:45,710
running equals tasks healthy right so

00:26:39,710 --> 00:26:49,700
the service came up fine this Jenkins

00:26:45,710 --> 00:26:51,770
pipeline requires me to click proceed to

00:26:49,700 --> 00:26:54,710
go forward but what you'd really want to

00:26:51,770 --> 00:26:56,270
do is have tests here you'd want to have

00:26:54,710 --> 00:27:00,290
integration tests you'd want to have

00:26:56,270 --> 00:27:01,730
load testing whatever you'd want to do

00:27:00,290 --> 00:27:03,290
but you'd be testing against the real

00:27:01,730 --> 00:27:05,210
deployment and you'd know it was

00:27:03,290 --> 00:27:07,130
deployed successfully if it got out of

00:27:05,210 --> 00:27:11,180
this stage and you'd know that you were

00:27:07,130 --> 00:27:17,890
testing against the real service here so

00:27:11,180 --> 00:27:17,890
if I click proceed here my Jenkins

00:27:25,880 --> 00:27:30,559
we see it starting up here and this has

00:27:28,820 --> 00:27:40,370
all the configurations from that we've

00:27:30,559 --> 00:27:44,990
seen from the Y amount so that's pretty

00:27:40,370 --> 00:27:55,750
much it it's pretty straightforward I

00:27:44,990 --> 00:27:55,750
mean the does anybody have any questions

00:27:56,620 --> 00:28:12,679
yeah we did of DCOs yeah we do yeah yeah

00:28:10,130 --> 00:28:14,360
so we do we actually tried to create

00:28:12,679 --> 00:28:17,240
namespaces for each group that we're

00:28:14,360 --> 00:28:18,830
supporting so as the operations team of

00:28:17,240 --> 00:28:21,950
course we have full access so we keep

00:28:18,830 --> 00:28:23,650
ourselves a super user and then uh we

00:28:21,950 --> 00:28:26,480
usually under root we will create like

00:28:23,650 --> 00:28:28,340
the the name of the group and then dev

00:28:26,480 --> 00:28:30,590
and then name of the group slash prod

00:28:28,340 --> 00:28:32,120
and so they'll have full access on dev

00:28:30,590 --> 00:28:33,830
to be able to do what they want and then

00:28:32,120 --> 00:28:38,350
then on the prod they'll only have read

00:28:33,830 --> 00:28:41,720
access specifically how we handle it

00:28:38,350 --> 00:28:43,130
yeah we figured this might be a problem

00:28:41,720 --> 00:28:45,250
that most people are a lot of people are

00:28:43,130 --> 00:28:45,250
having

00:28:50,890 --> 00:28:53,890
mm-hm

00:29:04,590 --> 00:29:13,200
okay yes right yeah it's a spring boot

00:29:07,929 --> 00:29:13,200
app yeah yeah

00:29:16,170 --> 00:29:24,900
um no we don't have rollbacks in there

00:29:18,940 --> 00:29:24,900
right now um that's a good question

00:29:33,210 --> 00:29:38,230
odo the marathon labels the marathon

00:29:36,790 --> 00:29:39,580
labels are used to configure a lot of

00:29:38,230 --> 00:29:42,540
stuff so like deta dog for instance

00:29:39,580 --> 00:29:45,190
turns marathon labels into data dog tags

00:29:42,540 --> 00:29:53,050
so it's an order for a for monitoring to

00:29:45,190 --> 00:29:55,810
work oh all those yeah no files are

00:29:53,050 --> 00:29:57,370
stored in get yeah so all the

00:29:55,810 --> 00:29:59,110
configurations are fine so instead of

00:29:57,370 --> 00:30:01,600
it's basically configuration as code in

00:29:59,110 --> 00:30:03,850
a way so the configuration set

00:30:01,600 --> 00:30:06,910
configuration files august ORD there so

00:30:03,850 --> 00:30:15,930
that we gain the benefits of an SCM in

00:30:06,910 --> 00:30:15,930
front of those things correct yeah right

00:30:16,320 --> 00:30:19,320
yeah

00:30:40,150 --> 00:30:49,210
ah so yeah that's that's rel so with the

00:30:47,190 --> 00:30:51,610
with all the different configuration

00:30:49,210 --> 00:30:54,040
files will generally get somebody either

00:30:51,610 --> 00:30:55,600
asking for it or we haven't right now

00:30:54,040 --> 00:30:57,250
today we don't have the developers have

00:30:55,600 --> 00:30:59,890
full access to those files so it's the

00:30:57,250 --> 00:31:01,360
operations guys changing them the reason

00:30:59,890 --> 00:31:02,710
when we use garrett in front of that so

00:31:01,360 --> 00:31:06,100
that we can give somebody else gives the

00:31:02,710 --> 00:31:07,660
plants carrots that well known you

00:31:06,100 --> 00:31:09,490
basically have to plus to it which means

00:31:07,660 --> 00:31:10,420
someone else is taking a look at and

00:31:09,490 --> 00:31:13,120
making sure you're filling it in

00:31:10,420 --> 00:31:15,460
correctly we typically have Ops guys

00:31:13,120 --> 00:31:16,870
doing that for other ops guys what we're

00:31:15,460 --> 00:31:18,640
thinking of doing to make this even more

00:31:16,870 --> 00:31:19,960
self-service though is since we have get

00:31:18,640 --> 00:31:21,730
in front of it just let the developers

00:31:19,960 --> 00:31:23,200
make those changes potentially and then

00:31:21,730 --> 00:31:26,530
it'll be the Ops guys potentially plus

00:31:23,200 --> 00:31:34,180
doing it so I think that's the the goal

00:31:26,530 --> 00:31:36,600
I think in the future here any other

00:31:34,180 --> 00:31:36,600
questions

00:31:37,950 --> 00:31:42,660
all right if not that's all week that's

00:31:40,240 --> 00:31:42,660

YouTube URL: https://www.youtube.com/watch?v=C7fEep6YxGs


