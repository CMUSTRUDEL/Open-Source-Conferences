Title: Protecting Sensitive Code with Encrypted Container Images on... Brandon Lum & Harshal Patil
Publication date: 2019-07-10
Playlist: Shanghai '19: KubeCon + CloudNativeCon + Open Source Summit
Description: 
	Protecting Sensitive Code with Encrypted Container Images on Kubernetes - Brandon Lum & Harshal Patil, IBM 

Many enterprises are driven by trade secrets in their code - whether it is a proprietary AI model, or a secret high frequency trading strategy. It is of utmost importance that critical algorithms, proprietary code, or other content that is highly sensitive have minimum exposure unencrypted.    In this talk, we will show the end-to-end process of how users can create an encrypted container during the build process, to running encrypted container images on a Kubernetes cluster with the proposed ImageDecryptSecrets. We will show how the Encrypted Images OCI spec allows fine-grained encryption through leveraging layering of container images. Finally, we will talk about how Image Encryption will integrate into the container ecosystem, and talk about several possibilities for innovation in the container DevSecOps pipeline. 

https://sched.co/NrpO
Captions: 
	00:00:00,920 --> 00:00:07,080
so you know last couple of months the

00:00:05,250 --> 00:00:09,480
couple of someone like there was this

00:00:07,080 --> 00:00:11,960
news about docker hub which is a most

00:00:09,480 --> 00:00:16,049
popular repository of container images

00:00:11,960 --> 00:00:19,710
getting hacked and a plenty of data was

00:00:16,049 --> 00:00:22,740
compromised and that if this kind of

00:00:19,710 --> 00:00:26,490
situation arises in another history

00:00:22,740 --> 00:00:29,810
which is popular regularly what could

00:00:26,490 --> 00:00:32,669
happen is an attacker can change the

00:00:29,810 --> 00:00:35,309
images that you trust well down where

00:00:32,669 --> 00:00:37,680
that you download and you may end up

00:00:35,309 --> 00:00:40,770
downloading the images that you're that

00:00:37,680 --> 00:00:42,390
are actually compromised so and this

00:00:40,770 --> 00:00:45,030
this does not mean that it only happens

00:00:42,390 --> 00:00:48,680
in the case of docker hub you could have

00:00:45,030 --> 00:00:53,760
one registry and this could happen in

00:00:48,680 --> 00:00:55,860
anyone's case so but you you might argue

00:00:53,760 --> 00:00:59,520
that there are ways to prevent that if

00:00:55,860 --> 00:01:01,890
anyone gets let's say an access to your

00:00:59,520 --> 00:01:04,049
registry you could have a docker node

00:01:01,890 --> 00:01:07,140
tree or a port it is set up in a way

00:01:04,049 --> 00:01:09,659
that even if your server gets

00:01:07,140 --> 00:01:11,909
compromised your sign images will not

00:01:09,659 --> 00:01:16,770
match and you still can't protect

00:01:11,909 --> 00:01:20,520
yourself in such scenario however you if

00:01:16,770 --> 00:01:23,430
you registry holds images which have a

00:01:20,520 --> 00:01:27,330
sensitive content in it it does not

00:01:23,430 --> 00:01:33,180
prevent you prevent it from the core

00:01:27,330 --> 00:01:36,570
getting compromised in that sense let's

00:01:33,180 --> 00:01:39,570
see how we can envision our envision a

00:01:36,570 --> 00:01:42,180
scenario where we can mitigate such

00:01:39,570 --> 00:01:45,119
attacks so all what we are looking for

00:01:42,180 --> 00:01:47,640
here is we have we we need to be able to

00:01:45,119 --> 00:01:50,189
create container images where we should

00:01:47,640 --> 00:01:52,829
be able to during the build process we

00:01:50,189 --> 00:01:55,159
should be able to encrypt them and then

00:01:52,829 --> 00:01:58,020
upload it to the registry and then

00:01:55,159 --> 00:02:01,259
decrypt them while you run them using sa

00:01:58,020 --> 00:02:05,479
kubernetes that way the advantage of

00:02:01,259 --> 00:02:11,400
that process is you do not depend on

00:02:05,479 --> 00:02:13,620
registry being highly privileged so as I

00:02:11,400 --> 00:02:15,569
was talking so if you start if you

00:02:13,620 --> 00:02:19,590
about image encrypting your docker

00:02:15,569 --> 00:02:21,989
images you do not need to have extremely

00:02:19,590 --> 00:02:23,819
high privilege registry that means you

00:02:21,989 --> 00:02:27,260
do not have to trust your administrator

00:02:23,819 --> 00:02:29,909
either malicious or are the intentional

00:02:27,260 --> 00:02:32,549
compromises of the registry as well as

00:02:29,909 --> 00:02:35,060
it brings in image confidentially so you

00:02:32,549 --> 00:02:38,519
you can have extremely confidential

00:02:35,060 --> 00:02:40,650
algorithms like say you might have a

00:02:38,519 --> 00:02:43,500
tree intention for model for example

00:02:40,650 --> 00:02:46,560
which you do not want to be exposed to

00:02:43,500 --> 00:02:48,930
the outside world you can argue that you

00:02:46,560 --> 00:02:51,180
know you can keep the registry password

00:02:48,930 --> 00:02:53,129
protected but even in that case the

00:02:51,180 --> 00:02:56,459
administrator all the or the where the

00:02:53,129 --> 00:02:59,280
registries hosted storing the data has

00:02:56,459 --> 00:03:02,750
access to the contents of the store so

00:02:59,280 --> 00:03:05,760
and and once you bring in encryption it

00:03:02,750 --> 00:03:08,730
it allows you to do a lot of interesting

00:03:05,760 --> 00:03:11,599
stuff like for example you can sign the

00:03:08,730 --> 00:03:15,030
continuing images with target systems

00:03:11,599 --> 00:03:18,030
public key in such a way that you can

00:03:15,030 --> 00:03:20,459
enforce that the content images that I

00:03:18,030 --> 00:03:23,639
am building will run only in specific

00:03:20,459 --> 00:03:25,200
Geographics geographies for example you

00:03:23,639 --> 00:03:26,790
can say image a particular image will

00:03:25,200 --> 00:03:32,910
only run inside the European unity

00:03:26,790 --> 00:03:36,569
European Union's Java borders so let's

00:03:32,910 --> 00:03:38,819
see how we can envision this now the I

00:03:36,569 --> 00:03:41,489
would like to tell you that the work has

00:03:38,819 --> 00:03:43,889
been happening all the way from OCI spec

00:03:41,489 --> 00:03:47,069
and kubernetes and anything in between

00:03:43,889 --> 00:03:50,549
and we are we are talking to all these

00:03:47,069 --> 00:03:52,799
communities and the final output that

00:03:50,549 --> 00:03:55,620
you may say when everything falls in

00:03:52,799 --> 00:03:58,410
line may or may not actually order lap

00:03:55,620 --> 00:04:00,480
with what I am saying right now but it

00:03:58,410 --> 00:04:03,230
will be very similar to this so let's

00:04:00,480 --> 00:04:06,359
see how we will be able to encrypt the

00:04:03,230 --> 00:04:08,280
container image so you have a darker

00:04:06,359 --> 00:04:10,139
build command let's imagine and you

00:04:08,280 --> 00:04:12,780
should be able to pass a public key so I

00:04:10,139 --> 00:04:14,370
let's say I want to be able to create a

00:04:12,780 --> 00:04:16,620
container image in such a way that only

00:04:14,370 --> 00:04:18,810
Brandon should be able to run it so I

00:04:16,620 --> 00:04:21,180
take his public key during that Aqil

00:04:18,810 --> 00:04:23,760
build process I should be able to take

00:04:21,180 --> 00:04:26,070
his public key encrypted and then this

00:04:23,760 --> 00:04:26,830
this encrypted key I will push it to the

00:04:26,070 --> 00:04:30,729
registry

00:04:26,830 --> 00:04:32,949
once inside the registry it would gets

00:04:30,729 --> 00:04:34,419
interesting how you gonna use it or

00:04:32,949 --> 00:04:37,509
consume it within the context of

00:04:34,419 --> 00:04:41,020
kubernetes so we all know kubernetes has

00:04:37,509 --> 00:04:43,240
this concept of secrets right cubrir is

00:04:41,020 --> 00:04:45,789
secret is it's a way to store sensitive

00:04:43,240 --> 00:04:49,150
data within the within the confines of

00:04:45,789 --> 00:04:50,830
Cooperman kubernetes so and there's a

00:04:49,150 --> 00:04:53,800
very particular type of secret called

00:04:50,830 --> 00:04:58,090
image pool secret this secret is used

00:04:53,800 --> 00:05:00,699
for fetching the images that are behind

00:04:58,090 --> 00:05:03,280
the username password in the registry so

00:05:00,699 --> 00:05:05,949
we thought that we have a very similar

00:05:03,280 --> 00:05:07,599
use case here where instead of pulling

00:05:05,949 --> 00:05:10,419
the image we want to decrypt the image

00:05:07,599 --> 00:05:13,720
on the host right so we started modeling

00:05:10,419 --> 00:05:15,639
are the secret that holds the the

00:05:13,720 --> 00:05:17,470
private keys required to decrypt the

00:05:15,639 --> 00:05:21,099
images and we are calling them image

00:05:17,470 --> 00:05:22,599
decrypt secret for this work we already

00:05:21,099 --> 00:05:25,210
have submitted KP in his under

00:05:22,599 --> 00:05:27,310
discussion as I mentioned we already

00:05:25,210 --> 00:05:28,599
talking to OCS spec there is a PR in

00:05:27,310 --> 00:05:29,949
continuity to support it because you

00:05:28,599 --> 00:05:33,430
need to have this support all the way

00:05:29,949 --> 00:05:36,130
throughout the stack so once you have

00:05:33,430 --> 00:05:38,620
this secret what the flow will look like

00:05:36,130 --> 00:05:41,469
I know if there's a request by the user

00:05:38,620 --> 00:05:44,380
to create a encrypted part the image

00:05:41,469 --> 00:05:47,830
secret image decrypt secret will

00:05:44,380 --> 00:05:49,419
basically provide the keys required and

00:05:47,830 --> 00:05:50,949
the part will create it with the keys

00:05:49,419 --> 00:05:53,289
that are required and those keys will be

00:05:50,949 --> 00:05:56,380
pushed down to the kubernetes worker

00:05:53,289 --> 00:05:58,210
node and then the worker node the

00:05:56,380 --> 00:05:59,949
cubelet will receive those keys that

00:05:58,210 --> 00:06:02,229
will be passed to CRI from CRI to

00:05:59,949 --> 00:06:04,060
continuity and the continuity bill while

00:06:02,229 --> 00:06:07,030
pulling the image will also decrypt the

00:06:04,060 --> 00:06:10,930
image and then it follows the standard

00:06:07,030 --> 00:06:13,560
continuity workflow let me quickly show

00:06:10,930 --> 00:06:13,560
a demo

00:06:23,680 --> 00:06:32,650
hey yeah this is stage so let me just

00:06:29,259 --> 00:06:34,930
say clear and then let me go to

00:06:32,650 --> 00:06:37,210
container D so although I talked about

00:06:34,930 --> 00:06:39,160
docker will to begin with we started

00:06:37,210 --> 00:06:41,620
playing with container D directly

00:06:39,160 --> 00:06:43,479
because that was easier to deal with and

00:06:41,620 --> 00:06:47,440
Lockard build end of the day we'll end

00:06:43,479 --> 00:06:49,090
up working something similar so let me

00:06:47,440 --> 00:06:53,680
see as you can see you only have one

00:06:49,090 --> 00:06:57,190
image right now nginx and then on the on

00:06:53,680 --> 00:07:00,010
this system I have a sample GP GK keeper

00:06:57,190 --> 00:07:01,750
and I'm gonna use that to encrypt the

00:07:00,010 --> 00:07:03,370
image first so what I'm going to do is

00:07:01,750 --> 00:07:06,250
I'm going to say take this image

00:07:03,370 --> 00:07:07,990
encrypted take this engine X image and

00:07:06,250 --> 00:07:10,720
encrypt it with the the key that I'm

00:07:07,990 --> 00:07:22,270
asking to so it's gonna encrypt that

00:07:10,720 --> 00:07:25,030
image then twist it and you have this

00:07:22,270 --> 00:07:27,460
encrypted image how so just to

00:07:25,030 --> 00:07:30,970
understand things better we added a

00:07:27,460 --> 00:07:34,630
small command in continuity which helps

00:07:30,970 --> 00:07:38,770
you to see the images so LS zoom out a

00:07:34,630 --> 00:07:41,440
little bit yeah

00:07:38,770 --> 00:07:44,169
so you see that is the image here which

00:07:41,440 --> 00:07:45,610
says encryption and recipients none so

00:07:44,169 --> 00:07:47,830
this is what you'll see for a regular

00:07:45,610 --> 00:07:50,680
the container image right now that

00:07:47,830 --> 00:07:54,220
everyone is used to but if you try to

00:07:50,680 --> 00:07:58,990
use the layer info against the encrypted

00:07:54,220 --> 00:08:01,870
image you have a GPG and the target

00:07:58,990 --> 00:08:03,760
system target recipients address so it

00:08:01,870 --> 00:08:06,970
basically means that this image can only

00:08:03,760 --> 00:08:11,320
be decrypted with this target key that

00:08:06,970 --> 00:08:14,680
is showing let me just clear this let me

00:08:11,320 --> 00:08:16,750
just push the team we lost it you have

00:08:14,680 --> 00:08:19,470
it let me just push the image to the

00:08:16,750 --> 00:08:19,470
local register

00:08:24,100 --> 00:08:29,930
and now I'm gonna change it and this is

00:08:28,100 --> 00:08:31,970
the standard cumin in secret it's a it's

00:08:29,930 --> 00:08:36,800
it's a default open that we have here

00:08:31,970 --> 00:08:38,419
and then now what happens the the image

00:08:36,800 --> 00:08:40,070
that we just encrypted if we try to

00:08:38,419 --> 00:08:41,539
deploy it let's say you you are running

00:08:40,070 --> 00:08:43,459
this register you upload it to the

00:08:41,539 --> 00:08:45,470
public registry I encrypted image and

00:08:43,459 --> 00:08:47,209
someone tries to download and run it so

00:08:45,470 --> 00:08:48,589
let's see how it reacts to that so I do

00:08:47,209 --> 00:08:51,520
not have the private key at this point

00:08:48,589 --> 00:08:58,940
and I'm trying to run an encrypted image

00:08:51,520 --> 00:09:03,740
just for a second yeah so I got an error

00:08:58,940 --> 00:09:07,399
let's see what the error is as you can

00:09:03,740 --> 00:09:09,200
see you are not authorized to run this

00:09:07,399 --> 00:09:12,680
image and the missing private key is

00:09:09,200 --> 00:09:15,020
needed for decryption so think of it

00:09:12,680 --> 00:09:19,040
this way that if you had an encrypted

00:09:15,020 --> 00:09:21,920
image you know in a public repository by

00:09:19,040 --> 00:09:24,050
password or not if someone tries to run

00:09:21,920 --> 00:09:26,779
that image without having the private

00:09:24,050 --> 00:09:30,020
keys or without having the target system

00:09:26,779 --> 00:09:37,760
that is encrypted for you will you are

00:09:30,020 --> 00:09:41,060
supposed to get yeah so yeah so without

00:09:37,760 --> 00:09:43,940
so we we are you will get this error so

00:09:41,060 --> 00:09:50,500
let's see how we can run an encrypted

00:09:43,940 --> 00:09:52,730
image I will just delete this part okay

00:09:50,500 --> 00:09:57,380
remember that key that keeper that I had

00:09:52,730 --> 00:10:02,709
I had already extracted the private key

00:09:57,380 --> 00:10:08,450
required from this GEB keeper and I have

00:10:02,709 --> 00:10:10,279
added converted into base64 and I'll

00:10:08,450 --> 00:10:13,190
create a secret so this is a secret that

00:10:10,279 --> 00:10:15,170
we are introducing the kubernetes so I'm

00:10:13,190 --> 00:10:18,950
saying create a new secret type of image

00:10:15,170 --> 00:10:20,930
decrypt with this private key so when

00:10:18,950 --> 00:10:24,620
you get a secret there you go now you

00:10:20,930 --> 00:10:28,040
have a key secret let's let's go deeper

00:10:24,620 --> 00:10:29,180
than that yeah so it holds the depletion

00:10:28,040 --> 00:10:34,290
decryption key

00:10:29,180 --> 00:10:40,290
that the base64 key that we had

00:10:34,290 --> 00:10:44,160
and you get parts let's see so we will

00:10:40,290 --> 00:10:46,109
modify our body ml slightly so instead

00:10:44,160 --> 00:10:49,319
of having this when you want to run this

00:10:46,109 --> 00:10:51,329
engine engine s encrypted image will

00:10:49,319 --> 00:10:53,129
have to provide the pre key that that

00:10:51,329 --> 00:10:54,839
kubernetes should pass down to the

00:10:53,129 --> 00:10:57,239
worker node so I will say image D clip

00:10:54,839 --> 00:11:01,439
secrets name key secret the key secret

00:10:57,239 --> 00:11:09,720
is the one which we just created let's

00:11:01,439 --> 00:11:12,539
try to create this part get part and it

00:11:09,720 --> 00:11:15,660
works so the earlier when I try to run

00:11:12,539 --> 00:11:17,970
this image we are without without the

00:11:15,660 --> 00:11:19,079
secret you remember you've got an error

00:11:17,970 --> 00:11:20,879
saying you do not have you're not

00:11:19,079 --> 00:11:23,160
authorized to run this image but now I

00:11:20,879 --> 00:11:24,389
am able to because I associated this

00:11:23,160 --> 00:11:26,819
part with the right secret and that

00:11:24,389 --> 00:11:28,769
secret was passed to connect you blade

00:11:26,819 --> 00:11:30,449
and cubelet pass to CRI and see how I

00:11:28,769 --> 00:11:33,179
eventually gave it to continuity and

00:11:30,449 --> 00:11:35,369
that continuity was able to extract the

00:11:33,179 --> 00:11:40,489
not only extra entire image but able to

00:11:35,369 --> 00:11:43,019
decrypt as well let's delete this

00:11:40,489 --> 00:11:47,160
however those who know those of us know

00:11:43,019 --> 00:11:48,600
how to use the secrets little in an

00:11:47,160 --> 00:11:50,910
elegant way we know that we can use

00:11:48,600 --> 00:11:54,899
service accounts in kubernetes to pass

00:11:50,910 --> 00:11:56,489
secrets so we plan to support service

00:11:54,899 --> 00:11:58,079
accounts for image decrypt secrets as

00:11:56,489 --> 00:12:00,449
well so let's see how we can achieve

00:11:58,079 --> 00:12:04,079
that so we will first patch a service

00:12:00,449 --> 00:12:07,259
account with the secret that we already

00:12:04,079 --> 00:12:09,809
created and will say describe the

00:12:07,259 --> 00:12:11,939
service account and if you see this is a

00:12:09,809 --> 00:12:14,309
new new thing that we're trying add here

00:12:11,939 --> 00:12:16,079
so now this service account has the

00:12:14,309 --> 00:12:18,329
image the decrypt secret so that means

00:12:16,079 --> 00:12:19,919
every part that gets created with this

00:12:18,329 --> 00:12:26,279
service account will also have an access

00:12:19,919 --> 00:12:30,119
to the secret ok now this time if you

00:12:26,279 --> 00:12:32,429
see I am trying to start the same part

00:12:30,119 --> 00:12:34,769
or deploy the same part but without any

00:12:32,429 --> 00:12:36,389
image decrypt secrets and this time I do

00:12:34,769 --> 00:12:38,039
not have to have because this part is

00:12:36,389 --> 00:12:45,350
going to access the default service

00:12:38,039 --> 00:12:45,350
account so let's see how it works create

00:12:45,540 --> 00:12:52,300
and it's working right so I think that

00:12:49,630 --> 00:12:55,360
that's that's completes my demo okay and

00:12:52,300 --> 00:12:58,839
I jump back to the so if you want to if

00:12:55,360 --> 00:13:01,209
you want to thank Mandan so if you want

00:12:58,839 --> 00:13:05,399
to know more understand more about the

00:13:01,209 --> 00:13:09,100
work going on please visit these links

00:13:05,399 --> 00:13:11,410
we have a like a very good and detailed

00:13:09,100 --> 00:13:15,220
discussion going on all topics and we

00:13:11,410 --> 00:13:19,510
hope to get this mod ready soon and with

00:13:15,220 --> 00:13:23,140
that I will dive deeper in that and I'll

00:13:19,510 --> 00:13:24,630
hand it over to Brandon all right thanks

00:13:23,140 --> 00:13:28,269
our show

00:13:24,630 --> 00:13:32,680
so what nothing yes sir

00:13:28,269 --> 00:13:35,529
so so what's up a little bit about this

00:13:32,680 --> 00:13:38,709
well our design in the encryptor contain

00:13:35,529 --> 00:13:40,779
images and how it relates to

00:13:38,709 --> 00:13:42,730
deduplication because you know the

00:13:40,779 --> 00:13:44,560
conventional knowledge is whenever you

00:13:42,730 --> 00:13:46,240
have encryption you're going to suffer

00:13:44,560 --> 00:13:47,920
in terms of deduplication because you

00:13:46,240 --> 00:13:50,800
can every time you encrypt something is

00:13:47,920 --> 00:13:52,329
going to be different right but in the

00:13:50,800 --> 00:13:54,070
process of designing this video so

00:13:52,329 --> 00:13:55,570
consider that this is one of the reasons

00:13:54,070 --> 00:13:58,750
why people I containers it's a their

00:13:55,570 --> 00:14:00,910
deduplication the layering and we're

00:13:58,750 --> 00:14:03,899
going to show that in the way that we

00:14:00,910 --> 00:14:08,680
design it deduplication is not necessary

00:14:03,899 --> 00:14:10,240
thrown away once you have encryption so

00:14:08,680 --> 00:14:12,220
I'm gonna go through a deep dive I'm

00:14:10,240 --> 00:14:13,990
gonna start with a little bit of crypto

00:14:12,220 --> 00:14:18,579
background so just bear with me a little

00:14:13,990 --> 00:14:22,420
bit so we're gonna go through a short

00:14:18,579 --> 00:14:23,709
primary encryption so so we're using two

00:14:22,420 --> 00:14:25,660
kinds of encryption we're using

00:14:23,709 --> 00:14:28,899
symmetric encryption and asymmetric

00:14:25,660 --> 00:14:30,100
encryption so for those that may not be

00:14:28,899 --> 00:14:33,399
as familiar of encryption

00:14:30,100 --> 00:14:36,550
what symmetric encryption is is you have

00:14:33,399 --> 00:14:40,089
a piece of plaintext so a message you

00:14:36,550 --> 00:14:42,730
wanna encrypt and you have a key which

00:14:40,089 --> 00:14:45,040
is a symmetric key now in symmetric

00:14:42,730 --> 00:14:47,230
encryption the key that you use to

00:14:45,040 --> 00:14:51,430
perform the encryption and decryption is

00:14:47,230 --> 00:14:53,290
the same so this is good because this is

00:14:51,430 --> 00:14:55,600
Jen as a mission encryption is generally

00:14:53,290 --> 00:14:57,610
really fast is good for really large

00:14:55,600 --> 00:14:59,410
lots of data

00:14:57,610 --> 00:15:03,579
unfortunately the issue with symmetry

00:14:59,410 --> 00:15:03,970
encryption is sharing this this key over

00:15:03,579 --> 00:15:09,040
here

00:15:03,970 --> 00:15:10,779
proves difficult right so we also

00:15:09,040 --> 00:15:12,519
introduced asymmetric encryption so

00:15:10,779 --> 00:15:15,010
asymmetric encryption has pretty much

00:15:12,519 --> 00:15:17,019
the same setup as then still have been

00:15:15,010 --> 00:15:20,170
one key you have a key pass so you have

00:15:17,019 --> 00:15:22,630
the public and private key pair and so

00:15:20,170 --> 00:15:25,690
in this case to encrypt the message you

00:15:22,630 --> 00:15:27,550
will use the public key and encrypt the

00:15:25,690 --> 00:15:30,760
message will be decrypted by the private

00:15:27,550 --> 00:15:32,950
key so the great thing about asymmetric

00:15:30,760 --> 00:15:37,470
encryption is the public key as the name

00:15:32,950 --> 00:15:40,180
suggests can be public so this makes

00:15:37,470 --> 00:15:41,860
being able to authorize and create the

00:15:40,180 --> 00:15:47,410
image to someone ought to be able to

00:15:41,860 --> 00:15:51,250
share keys it will be much simpler

00:15:47,410 --> 00:15:54,820
unfortunately it's so so what we do is

00:15:51,250 --> 00:15:56,350
very like most type of anchors the

00:15:54,820 --> 00:15:58,540
messages everything about encrypted

00:15:56,350 --> 00:16:00,250
email and things like that well kind of

00:15:58,540 --> 00:16:04,360
following the same kind of design

00:16:00,250 --> 00:16:05,560
concepts so what we're doing is we're

00:16:04,360 --> 00:16:07,600
taking symmetric encryption and

00:16:05,560 --> 00:16:10,720
asymmetric encryption and getting both

00:16:07,600 --> 00:16:13,149
the best of both worlds so this will may

00:16:10,720 --> 00:16:16,540
be familiar we have our favorite people

00:16:13,149 --> 00:16:18,010
in crypto Bob and Alice and so in this

00:16:16,540 --> 00:16:20,920
case Bob wants to send an encrypted

00:16:18,010 --> 00:16:22,420
image status now we haven't forgotten

00:16:20,920 --> 00:16:25,570
about the duplication we're getting that

00:16:22,420 --> 00:16:28,209
soon all right

00:16:25,570 --> 00:16:30,610
so Bob does a bill and what it does is

00:16:28,209 --> 00:16:32,740
it generates the symmetric key and this

00:16:30,610 --> 00:16:35,320
symmetric key is used to encrypt the

00:16:32,740 --> 00:16:38,470
image so now we have an encrypted image

00:16:35,320 --> 00:16:41,050
and what we want to do is we want to say

00:16:38,470 --> 00:16:42,130
that this is image I want to encrypt for

00:16:41,050 --> 00:16:45,120
Alice right

00:16:42,130 --> 00:16:48,850
so we somehow have to get that yellow

00:16:45,120 --> 00:16:50,980
symmetric key over to others and the way

00:16:48,850 --> 00:16:54,040
we do this is to take editors public key

00:16:50,980 --> 00:16:56,079
and create what we call a brad key so

00:16:54,040 --> 00:16:59,260
this red key you can think about as a

00:16:56,079 --> 00:17:01,570
message that contains the symmetric key

00:16:59,260 --> 00:17:04,089
as well as all the cryptographic

00:17:01,570 --> 00:17:08,199
metadata required to understand how to

00:17:04,089 --> 00:17:10,540
decrypt the image so this rap key can

00:17:08,199 --> 00:17:13,870
only be decrypted by others

00:17:10,540 --> 00:17:15,520
what Bob does to expose an image is to

00:17:13,870 --> 00:17:22,959
upload these two things into the

00:17:15,520 --> 00:17:24,880
registry so on Alice's side to be able

00:17:22,959 --> 00:17:26,290
to decrypt the image is pretty much the

00:17:24,880 --> 00:17:29,080
opposite of what we saw earlier right

00:17:26,290 --> 00:17:31,960
she takes the rap key that only she can

00:17:29,080 --> 00:17:33,940
open and decrypt it with her own private

00:17:31,960 --> 00:17:37,390
key which only she has access to and

00:17:33,940 --> 00:17:39,250
from that she gets the symmetric key as

00:17:37,390 --> 00:17:42,550
well as the parameters to perform the

00:17:39,250 --> 00:17:50,110
decryption and she successfully decrypts

00:17:42,550 --> 00:17:52,990
image so how does this relate to what

00:17:50,110 --> 00:17:56,650
the images actually look like so if we

00:17:52,990 --> 00:18:00,250
dive deep into what changes we are

00:17:56,650 --> 00:18:03,070
looking at in the OCI spec so to start

00:18:00,250 --> 00:18:04,840
off with what we have here is what the

00:18:03,070 --> 00:18:08,080
oh she is back looks image right looks

00:18:04,840 --> 00:18:10,390
like today right so the image back at

00:18:08,080 --> 00:18:13,570
least in here you see the manifest is

00:18:10,390 --> 00:18:17,080
really some metadata about the image

00:18:13,570 --> 00:18:20,140
itself and each layer is basically a

00:18:17,080 --> 00:18:21,790
blob of a collection of house and in

00:18:20,140 --> 00:18:23,650
this case the files are just tada

00:18:21,790 --> 00:18:28,000
right so it's a blob that is represented

00:18:23,650 --> 00:18:30,340
by the SHA so what we're doing in the

00:18:28,000 --> 00:18:33,520
design decision that we've made is to

00:18:30,340 --> 00:18:36,250
perform encryption on the layer level so

00:18:33,520 --> 00:18:39,070
in this case on top of performing the

00:18:36,250 --> 00:18:41,080
time the gzip of the collection of files

00:18:39,070 --> 00:18:42,820
we're doing the additional step in

00:18:41,080 --> 00:18:46,530
generating the symmetric key and

00:18:42,820 --> 00:18:48,880
performing the encryption on every layer

00:18:46,530 --> 00:18:50,860
so the changes here to the spec are

00:18:48,880 --> 00:18:53,560
pretty straightforward one is we've

00:18:50,860 --> 00:18:57,210
added a new media type so we've added

00:18:53,560 --> 00:19:00,070
the Plus ENC media type standing from

00:18:57,210 --> 00:19:01,930
abbreviated for encryption and what this

00:19:00,070 --> 00:19:04,660
means it tells the runtime that this

00:19:01,930 --> 00:19:07,140
image is encrypted and it's gonna try

00:19:04,660 --> 00:19:09,250
and equipped it and we've also added

00:19:07,140 --> 00:19:12,070
additional field and the annotations

00:19:09,250 --> 00:19:15,640
here called the keys and what these keys

00:19:12,070 --> 00:19:19,480
are the rap keys that we saw earlier

00:19:15,640 --> 00:19:23,340
so the keys here could be a rap key for

00:19:19,480 --> 00:19:23,340
edits I repeat for Bob and so on

00:19:25,030 --> 00:19:31,160
so one interesting thing so now we're

00:19:28,430 --> 00:19:34,340
back to this application right so the

00:19:31,160 --> 00:19:36,710
the general thought of this is that by

00:19:34,340 --> 00:19:40,430
doing encryption on the layers we are

00:19:36,710 --> 00:19:44,960
able to take advantage of a lot of

00:19:40,430 --> 00:19:47,300
container like design behaviors right so

00:19:44,960 --> 00:19:48,650
generally if you have a container your

00:19:47,300 --> 00:19:50,330
container made a couple layers so you

00:19:48,650 --> 00:19:52,580
have like the operating system you have

00:19:50,330 --> 00:19:54,680
the middleware like Python and then

00:19:52,580 --> 00:19:58,700
usually if you have a sensitive piece of

00:19:54,680 --> 00:20:00,110
code it's a very small a very small

00:19:58,700 --> 00:20:03,410
piece of code and maybe like trading

00:20:00,110 --> 00:20:06,890
algorithm or maybe your machine learning

00:20:03,410 --> 00:20:09,140
model or something right and so what it

00:20:06,890 --> 00:20:11,180
means when we do encryption on the

00:20:09,140 --> 00:20:13,880
layers is that we can benefit from this

00:20:11,180 --> 00:20:15,950
because the bottom layers which end up

00:20:13,880 --> 00:20:18,260
being the larger layers actually don't

00:20:15,950 --> 00:20:21,470
have to be encrypted at all

00:20:18,260 --> 00:20:24,920
and so this these days can still be

00:20:21,470 --> 00:20:29,330
shared you know you can encrypt just the

00:20:24,920 --> 00:20:32,450
topmost layer for a couple of images so

00:20:29,330 --> 00:20:34,460
that's one the second thing which is why

00:20:32,450 --> 00:20:36,980
we talked a little bit about how we

00:20:34,460 --> 00:20:39,560
ended up doing the crypto is that let's

00:20:36,980 --> 00:20:42,550
say I want to encrypt an image for

00:20:39,560 --> 00:20:46,910
myself on and creamish for our show and

00:20:42,550 --> 00:20:49,580
you know 500 people right so

00:20:46,910 --> 00:20:51,350
traditionally what what you would do is

00:20:49,580 --> 00:20:53,690
you know I would increase once for her

00:20:51,350 --> 00:20:57,080
Shorewood and create one for myself and

00:20:53,690 --> 00:20:59,120
create one for you five other people but

00:20:57,080 --> 00:21:01,460
if if we look at this bag we can see

00:20:59,120 --> 00:21:03,970
here that the way we've done it is we

00:21:01,460 --> 00:21:07,640
split up the actual and crept up blob

00:21:03,970 --> 00:21:09,410
separate from the wrap key itself so

00:21:07,640 --> 00:21:11,240
what this means is that if I want to

00:21:09,410 --> 00:21:13,520
create and clip the image from multiple

00:21:11,240 --> 00:21:15,560
people I can have the same encrypted

00:21:13,520 --> 00:21:19,490
blob and just upload five different wrap

00:21:15,560 --> 00:21:21,500
keys for the five different people so in

00:21:19,490 --> 00:21:23,570
this way if I want to be able to give

00:21:21,500 --> 00:21:26,000
authorization to additional parties to

00:21:23,570 --> 00:21:27,830
decrypt my image I can do so without

00:21:26,000 --> 00:21:30,610
actually changing the hash of the blob

00:21:27,830 --> 00:21:30,610
in the registry

00:21:34,240 --> 00:21:40,670
all right so this is what that is

00:21:38,929 --> 00:21:44,410
currently ongoing I think it's how I

00:21:40,670 --> 00:21:47,330
mentioned before this is something that

00:21:44,410 --> 00:21:49,280
we started off in the OCI spec and it's

00:21:47,330 --> 00:21:51,350
made its way and through the entire

00:21:49,280 --> 00:21:54,760
stack between OCI and I'll contain at

00:21:51,350 --> 00:21:57,740
the cupola and so on

00:21:54,760 --> 00:22:01,040
so one thing is which by still trying to

00:21:57,740 --> 00:22:04,000
get this we have a PR open for the OSI I

00:22:01,040 --> 00:22:06,290
suspect and you know if you have any

00:22:04,000 --> 00:22:09,490
views or you know if you like this

00:22:06,290 --> 00:22:12,559
feature do definitely chime in on that

00:22:09,490 --> 00:22:14,960
we have ongoing work like the KP that we

00:22:12,559 --> 00:22:16,549
just showed we're also looking to

00:22:14,960 --> 00:22:19,669
integrate this to basically everything

00:22:16,549 --> 00:22:24,590
within the sec so the build tools and

00:22:19,669 --> 00:22:26,450
cRIO support as well and finally one

00:22:24,590 --> 00:22:29,330
thing that we are looking at also in the

00:22:26,450 --> 00:22:31,870
long term is when we're talking about

00:22:29,330 --> 00:22:35,960
this encryption stuff when we one

00:22:31,870 --> 00:22:39,650
features like your execution geofencing

00:22:35,960 --> 00:22:43,669
execution we want to really be able to

00:22:39,650 --> 00:22:46,520
tie this to crypto cryptographic keys

00:22:43,669 --> 00:22:48,320
that we have higher surance on so this

00:22:46,520 --> 00:22:51,679
would be you know how to interface with

00:22:48,320 --> 00:22:53,870
TPMS although interface with HSM is

00:22:51,679 --> 00:22:55,400
there Phipps compliance within my

00:22:53,870 --> 00:22:58,610
cryptid libraries within the entire

00:22:55,400 --> 00:23:04,820
process so that is something that is

00:22:58,610 --> 00:23:07,549
still that is still in the pipeline all

00:23:04,820 --> 00:23:10,640
right so yeah that's all we had for

00:23:07,549 --> 00:23:13,179
today so yeah do feel free to add any

00:23:10,640 --> 00:23:13,179
questions

00:23:16,810 --> 00:23:24,230
[Applause]

00:23:27,910 --> 00:23:33,710
okay it might be a stupid one but my

00:23:32,210 --> 00:23:37,190
question is we are solving one problem

00:23:33,710 --> 00:23:38,930
but how do we how do we manage those

00:23:37,190 --> 00:23:40,490
keys what's the plan to manage are we

00:23:38,930 --> 00:23:42,290
integrating it with any key world

00:23:40,490 --> 00:23:47,380
solutions or what kind of solutions they

00:23:42,290 --> 00:23:51,170
are integrating it with so right now the

00:23:47,380 --> 00:23:54,220
way that we've set this up is that the

00:23:51,170 --> 00:23:57,440
key management solutions are not

00:23:54,220 --> 00:23:59,480
necessarily tied to the technology so

00:23:57,440 --> 00:24:01,310
you can still be able to bootstrap your

00:23:59,480 --> 00:24:05,270
keys through any key management solution

00:24:01,310 --> 00:24:07,550
that you have but with features that you

00:24:05,270 --> 00:24:10,820
talking about so so you could use I

00:24:07,550 --> 00:24:15,440
bought all key protect or as your key

00:24:10,820 --> 00:24:17,960
key key fob but when you talk about

00:24:15,440 --> 00:24:21,140
being able to tie it more tightly with

00:24:17,960 --> 00:24:23,570
the keys and this comes into I think one

00:24:21,140 --> 00:24:25,970
of this here is like key management key

00:24:23,570 --> 00:24:28,160
wrapping services so some key management

00:24:25,970 --> 00:24:30,020
systems actually allow you to perform

00:24:28,160 --> 00:24:31,880
key wrapping and unwrapping at the

00:24:30,020 --> 00:24:34,670
server so the key never actually leaves

00:24:31,880 --> 00:24:37,010
the key management service so in that

00:24:34,670 --> 00:24:38,840
sense that is still a bit of work there

00:24:37,010 --> 00:24:42,440
do you have a very tightly integrated

00:24:38,840 --> 00:24:46,880
solution but right now the way that we

00:24:42,440 --> 00:24:50,570
have it is that we still rely on the

00:24:46,880 --> 00:24:52,580
external process for that we do have so

00:24:50,570 --> 00:24:55,580
there are two models of this right one

00:24:52,580 --> 00:24:57,200
one of the models that we just saw is

00:24:55,580 --> 00:24:59,420
that you're taking a secret and you're

00:24:57,200 --> 00:25:01,880
putting it in the kubernetes secrets

00:24:59,420 --> 00:25:03,380
right so you will manage that secret the

00:25:01,880 --> 00:25:06,710
same way you manage your image poo

00:25:03,380 --> 00:25:08,060
secret there is another model that we

00:25:06,710 --> 00:25:11,750
have looked at and we have some

00:25:08,060 --> 00:25:14,300
prototypes on which is really my key

00:25:11,750 --> 00:25:17,240
management and authorization is tied to

00:25:14,300 --> 00:25:18,710
the host so in this case what we're

00:25:17,240 --> 00:25:21,650
doing is we have a prototype that

00:25:18,710 --> 00:25:23,510
actually injects this in the runtime so

00:25:21,650 --> 00:25:26,600
there's validation within a key

00:25:23,510 --> 00:25:28,470
management service to the node so it

00:25:26,600 --> 00:25:31,409
does attestation the node to ensure the

00:25:28,470 --> 00:25:33,270
it's authorized to obtain a key and this

00:25:31,409 --> 00:25:36,000
you know ties back to rule of trust like

00:25:33,270 --> 00:25:38,669
TPM or something and for that we did a

00:25:36,000 --> 00:25:41,450
verdict he should've run time so couple

00:25:38,669 --> 00:25:46,409
of autos yeah yeah and to add into his

00:25:41,450 --> 00:25:49,020
you you can use kms services with

00:25:46,409 --> 00:25:51,780
existing kubernetes tickets and this is

00:25:49,020 --> 00:25:54,630
another type of secret so if you can tie

00:25:51,780 --> 00:25:57,059
up your kubernetes to your key service

00:25:54,630 --> 00:25:59,549
provider all your keys get instead of

00:25:57,059 --> 00:26:03,230
they staying in a master they they get

00:25:59,549 --> 00:26:05,580
pushed to the your choice of key key kms

00:26:03,230 --> 00:26:07,650
so similarly this is not any different

00:26:05,580 --> 00:26:09,690
this is just another type of secret so

00:26:07,650 --> 00:26:16,350
this will transparently get get attached

00:26:09,690 --> 00:26:18,210
to the kms thank you can we decide which

00:26:16,350 --> 00:26:20,539
level of leery has to be encrypted and

00:26:18,210 --> 00:26:23,549
you know which does not need encryption

00:26:20,539 --> 00:26:24,179
do you mean can you selectively do in

00:26:23,549 --> 00:26:26,730
 tional

00:26:24,179 --> 00:26:28,350
yeah you can okay it doesn't have to be

00:26:26,730 --> 00:26:34,679
the topmost it can be anything in

00:26:28,350 --> 00:26:36,450
between I know how much more resource do

00:26:34,679 --> 00:26:41,070
you need deal with the encryption and

00:26:36,450 --> 00:26:44,130
decryption images or maybe the

00:26:41,070 --> 00:26:48,120
percentage so I talked about overhead

00:26:44,130 --> 00:26:50,850
right during encryption description of

00:26:48,120 --> 00:26:53,010
the image and how much more resource you

00:26:50,850 --> 00:26:54,179
need so this is something that we

00:26:53,010 --> 00:26:56,730
haven't measured in the wall but

00:26:54,179 --> 00:27:01,049
theoretically it shouldn't take up that

00:26:56,730 --> 00:27:02,640
much resource so the way that we've with

00:27:01,049 --> 00:27:07,230
the implementation that we have uses a

00:27:02,640 --> 00:27:09,240
streaming type cipher so in terms of the

00:27:07,230 --> 00:27:11,610
encryption process it's part of the

00:27:09,240 --> 00:27:13,740
pipeline so although they can be like

00:27:11,610 --> 00:27:15,510
it's the latency is very minimal but the

00:27:13,740 --> 00:27:20,429
band which is still gonna be about the

00:27:15,510 --> 00:27:23,390
same yeah maybe if you deploy them more

00:27:20,429 --> 00:27:26,010
images that depends on it so we'll be

00:27:23,390 --> 00:27:31,770
using more resource to to deploy it

00:27:26,010 --> 00:27:33,600
right yeah but you need to do this only

00:27:31,770 --> 00:27:35,340
once when the first time image comes in

00:27:33,600 --> 00:27:36,659
because the continuity will extract it

00:27:35,340 --> 00:27:38,700
all in a runtime will extract it and

00:27:36,659 --> 00:27:41,560
keep it on a host so it's not something

00:27:38,700 --> 00:27:42,910
which gonna get executed

00:27:41,560 --> 00:27:45,310
get Connecticut every time you run the

00:27:42,910 --> 00:27:47,400
container this is only first time the

00:27:45,310 --> 00:27:49,360
images has to be pulled on the host and

00:27:47,400 --> 00:27:52,650
second thing is the way we have

00:27:49,360 --> 00:27:55,840
implemented is we next time there is a

00:27:52,650 --> 00:27:58,180
request to request comes to deploy our

00:27:55,840 --> 00:28:00,270
encrypted image we do not download again

00:27:58,180 --> 00:28:03,520
a week we can check against the existing

00:28:00,270 --> 00:28:06,460
extracted image and we call it image

00:28:03,520 --> 00:28:08,350
authorization yeah so if you so there

00:28:06,460 --> 00:28:10,180
are two concerns one is like the latency

00:28:08,350 --> 00:28:11,890
concern which I don't think we're that

00:28:10,180 --> 00:28:13,270
worried about because the pool latency

00:28:11,890 --> 00:28:16,510
is still a lot more than decryption

00:28:13,270 --> 00:28:18,490
latency totally the other resource

00:28:16,510 --> 00:28:20,440
concern you may be worried about is

00:28:18,490 --> 00:28:23,560
maybe you know how much actual

00:28:20,440 --> 00:28:25,960
computation this and that's why I like

00:28:23,560 --> 00:28:28,330
in our design we a bulk of the

00:28:25,960 --> 00:28:32,430
encryption is symmetric encryption which

00:28:28,330 --> 00:28:43,380
isn't really that it's pretty efficient

00:28:32,430 --> 00:28:45,730
yeah thank you have one question is that

00:28:43,380 --> 00:28:49,090
suppose you have this encrypted image

00:28:45,730 --> 00:28:51,910
and you put it in our registry how are

00:28:49,090 --> 00:28:53,920
tools like I'm vulnerable T scanning

00:28:51,910 --> 00:28:55,990
going to work if you just encrypted

00:28:53,920 --> 00:28:58,450
that's a good question so we actually we

00:28:55,990 --> 00:29:00,190
would have thought this slide so they

00:28:58,450 --> 00:29:05,650
have two ways to do it right well

00:29:00,190 --> 00:29:07,900
actually that tree ways to do it so so

00:29:05,650 --> 00:29:13,450
there are two main ways that we kind of

00:29:07,900 --> 00:29:14,800
recommend one of which is you could

00:29:13,450 --> 00:29:17,380
actually so you know when you saw the

00:29:14,800 --> 00:29:19,660
rap Keys earlier you know I create the

00:29:17,380 --> 00:29:21,430
right key forever secretary for our show

00:29:19,660 --> 00:29:23,920
so what you can do in the creation of

00:29:21,430 --> 00:29:25,780
the devil pipeline is that you can say

00:29:23,920 --> 00:29:27,460
that if I trust a certain service for

00:29:25,780 --> 00:29:29,260
example I have a vulnerability scanning

00:29:27,460 --> 00:29:30,970
service right so I say this

00:29:29,260 --> 00:29:33,580
vulnerability scanning service has a

00:29:30,970 --> 00:29:36,850
particular keypad so I can say that I'm

00:29:33,580 --> 00:29:38,680
gonna encrypt a rap key for this service

00:29:36,850 --> 00:29:40,360
so if I trust the service a service

00:29:38,680 --> 00:29:43,300
suppose that image should be able to

00:29:40,360 --> 00:29:46,330
decrypt it the other way to do it is

00:29:43,300 --> 00:29:48,460
we're trying to see whether people are

00:29:46,330 --> 00:29:51,750
setting to move the power of the T scans

00:29:48,460 --> 00:29:53,880
before I to go to the registry which

00:29:51,750 --> 00:29:56,070
there

00:29:53,880 --> 00:29:58,200
advantages and disadvantages like it's

00:29:56,070 --> 00:30:00,270
true though yeah but no matter both ways

00:29:58,200 --> 00:30:05,630
we have models that what would be able

00:30:00,270 --> 00:30:05,630
to do solve the issue

00:30:20,770 --> 00:30:28,010
just a quick question so it's the let's

00:30:24,560 --> 00:30:29,480
say I'm going to encrypt the image twice

00:30:28,010 --> 00:30:32,830
is it going to generate the same

00:30:29,480 --> 00:30:37,100
symmetric key or difference in magic key

00:30:32,830 --> 00:30:41,980
yes okay so if you're going to generate

00:30:37,100 --> 00:30:44,570
the same image twice it's gonna be a

00:30:41,980 --> 00:30:48,200
different symmetric key even for the

00:30:44,570 --> 00:30:54,620
same user so okay so what what you can

00:30:48,200 --> 00:30:56,960
do so let me so what we do in this is

00:30:54,620 --> 00:31:00,320
that generally when you encrypt the

00:30:56,960 --> 00:31:02,660
image you when you create the right keys

00:31:00,320 --> 00:31:05,600
you're gonna create one for yourself so

00:31:02,660 --> 00:31:06,890
if you're gonna be able to if you want

00:31:05,600 --> 00:31:09,410
to add a recipient let's say you want to

00:31:06,890 --> 00:31:11,090
add a new recipient you don't have to

00:31:09,410 --> 00:31:12,320
re-encrypt the image basically what

00:31:11,090 --> 00:31:14,360
you're gonna say is I want to add this

00:31:12,320 --> 00:31:16,370
recipient so what it's going to do is

00:31:14,360 --> 00:31:18,500
it's going to decrypt your own wrap key

00:31:16,370 --> 00:31:21,230
and then rewrap a right key for the new

00:31:18,500 --> 00:31:23,900
person so if it detects that the layer

00:31:21,230 --> 00:31:26,750
is the same I don't think we I don't

00:31:23,900 --> 00:31:28,280
think we do probably to the extent of

00:31:26,750 --> 00:31:30,710
figuring out that the day is the same

00:31:28,280 --> 00:31:32,750
and doing it but if you have knowledge

00:31:30,710 --> 00:31:36,650
of that you can specifically say I just

00:31:32,750 --> 00:31:38,210
want to rewrap the key okay so just

00:31:36,650 --> 00:31:40,460
following questions so is there any

00:31:38,210 --> 00:31:46,250
exploration for the for the key for the

00:31:40,460 --> 00:31:49,730
recce the exploration for the key yeah

00:31:46,250 --> 00:31:53,630
so I think that's something that's gonna

00:31:49,730 --> 00:31:57,080
defer refer to the key management

00:31:53,630 --> 00:31:58,850
solutions so yeah that would be have to

00:31:57,080 --> 00:32:10,070
include the process of your DevOps

00:31:58,850 --> 00:32:11,380
pipeline yeah thanks more questions all

00:32:10,070 --> 00:32:16,869
right thank you very much

00:32:11,380 --> 00:32:16,869

YouTube URL: https://www.youtube.com/watch?v=jOsEdbPRrM0


