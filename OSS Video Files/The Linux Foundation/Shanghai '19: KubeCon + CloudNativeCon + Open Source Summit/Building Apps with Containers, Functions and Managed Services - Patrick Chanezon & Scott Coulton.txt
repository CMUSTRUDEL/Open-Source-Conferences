Title: Building Apps with Containers, Functions and Managed Services - Patrick Chanezon & Scott Coulton
Publication date: 2019-07-10
Playlist: Shanghai '19: KubeCon + CloudNativeCon + Open Source Summit
Description: 
	Building Apps with Containers, Functions and Managed Services - Patrick Chanezon & Scott Coulton, Microsoft 

Cloud native applications are composed of many technologies and components, but three canonical abstraction emerged in the past few years that help developers structure their architecture: container, functions responding to events, and managed services.    This talk will explain how to develop (Docker, local Kubernetes, virtual Kubelet, OpenFaaS), deploy (managed Kubernetes, functions and services) and package (CNAB specification and tooling) applications using these three components and look at not only deployment workflows but also at day 2 concerns that a developer would need to consider in the cloud native landscape.     We will demo every topic and a Github repository will be available for developers to reproduce the demos and learn at their own pace.  

https://sched.co/Nrll
Captions: 
	00:00:00,030 --> 00:00:07,799
hey so we can get start get started

00:00:03,500 --> 00:00:11,340
hello hey so hi everybody thanks for

00:00:07,799 --> 00:00:14,070
being here today with Scott and I were

00:00:11,340 --> 00:00:16,760
going to tell you about building cloud

00:00:14,070 --> 00:00:22,380
native applications with containers

00:00:16,760 --> 00:00:24,240
functions and managed services so first

00:00:22,380 --> 00:00:26,279
a little bit about ourselves Scott yeah

00:00:24,240 --> 00:00:28,349
so I'm Scott Colton I'm based out of

00:00:26,279 --> 00:00:30,840
Sydney Australia I work in the developer

00:00:28,349 --> 00:00:33,000
advocacy team for Marcus often

00:00:30,840 --> 00:00:35,239
specializing cuban Edy's and container

00:00:33,000 --> 00:00:37,890
runtimes and all those lots of things

00:00:35,239 --> 00:00:39,629
being adopted in the docking captains

00:00:37,890 --> 00:00:41,160
project for about four years so it

00:00:39,629 --> 00:00:42,510
probably feel was the only one that was

00:00:41,160 --> 00:00:44,760
older than me and I'm unfortunately

00:00:42,510 --> 00:00:52,890
bought red hot so you got kicked out so

00:00:44,760 --> 00:00:56,520
now I'm like you know T you know Phil

00:00:52,890 --> 00:00:59,609
cannot joke about that so hi everybody

00:00:56,520 --> 00:01:01,309
I'm Patrick Shane ISM I work with Scott

00:00:59,609 --> 00:01:04,379
in the cloud advocacy team at Microsoft

00:01:01,309 --> 00:01:08,970
and before that I spent four years at

00:01:04,379 --> 00:01:11,610
docker with with Tony's that that talked

00:01:08,970 --> 00:01:15,530
just before about Bill kit so built kit

00:01:11,610 --> 00:01:18,600
container D I'm a big fan here still and

00:01:15,530 --> 00:01:24,049
and so my focus is on containers on

00:01:18,600 --> 00:01:27,750
Azure so today we're going to talk about

00:01:24,049 --> 00:01:30,299
one big topic which is over the past few

00:01:27,750 --> 00:01:31,829
years people have been using docker and

00:01:30,299 --> 00:01:34,950
then kubernetes to build these cloud

00:01:31,829 --> 00:01:38,100
native applications but nowadays more

00:01:34,950 --> 00:01:40,560
and more these applications become more

00:01:38,100 --> 00:01:43,700
complex and typically you're building an

00:01:40,560 --> 00:01:47,460
application with three components

00:01:43,700 --> 00:01:50,520
containers server less functions that

00:01:47,460 --> 00:01:54,689
respond to events and manage cloud

00:01:50,520 --> 00:01:57,299
services so in this talk we're going to

00:01:54,689 --> 00:02:00,000
try to cover the developer experience

00:01:57,299 --> 00:02:01,920
for that how do you package your

00:02:00,000 --> 00:02:04,189
application when it contains all these

00:02:01,920 --> 00:02:07,380
components and how do you make it scale

00:02:04,189 --> 00:02:09,569
one of the thing I wanted to say is

00:02:07,380 --> 00:02:12,300
one of the reasons why I was super happy

00:02:09,569 --> 00:02:15,030
to join Microsoft is that Microsoft's

00:02:12,300 --> 00:02:17,550
mission is around productivity so it's

00:02:15,030 --> 00:02:19,019
about empowering every person an

00:02:17,550 --> 00:02:23,180
organization on the planet to achieve

00:02:19,019 --> 00:02:25,590
more and it started with Bill Gates

00:02:23,180 --> 00:02:28,050
creating visual basics which started in

00:02:25,590 --> 00:02:32,610
developer tools and so Microsoft always

00:02:28,050 --> 00:02:35,190
had a strong story around trying to make

00:02:32,610 --> 00:02:36,989
developers more productive and I think

00:02:35,190 --> 00:02:38,489
with the history of cloud native

00:02:36,989 --> 00:02:41,160
applications over the past five years

00:02:38,489 --> 00:02:42,750
now we're getting to a stage where it's

00:02:41,160 --> 00:02:47,670
really important to start to take a look

00:02:42,750 --> 00:02:50,579
at how we can make developers more more

00:02:47,670 --> 00:02:53,010
productive so these three abstraction

00:02:50,579 --> 00:02:54,780
that I talked about containers functions

00:02:53,010 --> 00:02:58,410
triggered by event and manage cloud

00:02:54,780 --> 00:03:00,900
services over the past three years

00:02:58,410 --> 00:03:03,299
there's been a lot of portable

00:03:00,900 --> 00:03:04,260
surveillance platforms that emerge on

00:03:03,299 --> 00:03:07,620
top of kubernetes

00:03:04,260 --> 00:03:11,220
so you have things like the FN project

00:03:07,620 --> 00:03:12,959
by Oracle which which characteristic

00:03:11,220 --> 00:03:17,760
that it has a nice way of composing

00:03:12,959 --> 00:03:21,019
functions nucleo which is a super high

00:03:17,760 --> 00:03:24,420
performance and more suited for

00:03:21,019 --> 00:03:28,160
intensive data processing opened fast

00:03:24,420 --> 00:03:28,160
which is like the Swiss Army knife

00:03:28,250 --> 00:03:33,750
surveillance platforms it can do a lot

00:03:31,769 --> 00:03:34,590
of things and it's super easy to use and

00:03:33,750 --> 00:03:38,190
get started

00:03:34,590 --> 00:03:39,840
galactic fog and open wisk more recently

00:03:38,190 --> 00:03:42,000
there's been two projects that are more

00:03:39,840 --> 00:03:46,049
like middleware on top of which you can

00:03:42,000 --> 00:03:48,690
build a function experience which are

00:03:46,049 --> 00:03:51,989
key native and kada so we'll talk a

00:03:48,690 --> 00:03:54,030
little bit about Kira here and the the

00:03:51,989 --> 00:03:56,609
CNC F has a surveillance working group

00:03:54,030 --> 00:03:58,019
so these diagrams that show what a

00:03:56,609 --> 00:04:00,389
portable serverless

00:03:58,019 --> 00:04:02,880
offering is are coming from their white

00:04:00,389 --> 00:04:05,579
paper that I highly recommend if you if

00:04:02,880 --> 00:04:09,030
you're new to this space on the azure

00:04:05,579 --> 00:04:11,190
side we have our own first party service

00:04:09,030 --> 00:04:13,769
that's called Azure functions that we

00:04:11,190 --> 00:04:16,289
manage at Microsoft but all the runtime

00:04:13,769 --> 00:04:19,260
for it is open source so you can run

00:04:16,289 --> 00:04:21,150
other functions in containers in your

00:04:19,260 --> 00:04:26,220
kubernetes cluster if you want it's all

00:04:21,150 --> 00:04:28,740
on github and so that's something to

00:04:26,220 --> 00:04:31,170
talk about the dev experience and I nuke

00:04:28,740 --> 00:04:34,100
my slides here but I'm going to talk

00:04:31,170 --> 00:04:37,890
through it that's it's been a third time

00:04:34,100 --> 00:04:39,420
the third time we we mess it up the dev

00:04:37,890 --> 00:04:42,000
experience I wanted to talk to you about

00:04:39,420 --> 00:04:45,990
is it's called the azure deck spaces and

00:04:42,000 --> 00:04:48,510
it's it's a service that we operate in

00:04:45,990 --> 00:04:51,900
Azure and that lets you as a developer

00:04:48,510 --> 00:04:54,570
and it's tied with a it's tied with the

00:04:51,900 --> 00:04:56,790
visual studio code extension so that you

00:04:54,570 --> 00:04:59,430
as a developer when you're building an

00:04:56,790 --> 00:05:02,010
application you don't need to know

00:04:59,430 --> 00:05:04,110
anything about kubernetes you don't need

00:05:02,010 --> 00:05:06,060
to have the runtime of the language that

00:05:04,110 --> 00:05:07,410
you're developing in installed on your

00:05:06,060 --> 00:05:10,440
machine you just need to have your

00:05:07,410 --> 00:05:13,650
source code and vs code so I'll show you

00:05:10,440 --> 00:05:16,590
what it looks like and the goal of azure

00:05:13,650 --> 00:05:18,420
dead space's is to have to make it

00:05:16,590 --> 00:05:21,240
easier for developers to collaborate

00:05:18,420 --> 00:05:23,490
together when they have when they're

00:05:21,240 --> 00:05:27,420
using common services managed cloud

00:05:23,490 --> 00:05:28,920
services for their application so the

00:05:27,420 --> 00:05:31,200
way the experience works is that you

00:05:28,920 --> 00:05:33,930
have a vs code plug-in and there's a

00:05:31,200 --> 00:05:37,410
command line as well called easy yes

00:05:33,930 --> 00:05:42,510
and that vs code plug-in interacts with

00:05:37,410 --> 00:05:44,250
a server-side controller that you

00:05:42,510 --> 00:05:46,260
install in a namespace in your

00:05:44,250 --> 00:05:47,430
kubernetes cluster and so once the

00:05:46,260 --> 00:05:50,760
connection between the two is

00:05:47,430 --> 00:05:55,140
established the vegans code extension is

00:05:50,760 --> 00:05:57,240
able to prime your project it looks at

00:05:55,140 --> 00:05:59,730
your project and it recognizes all this

00:05:57,240 --> 00:06:01,890
is a node.js project I'm going to create

00:05:59,730 --> 00:06:04,230
a docker file for it I'm going to create

00:06:01,890 --> 00:06:07,130
a hand shot for it and I'm going to

00:06:04,230 --> 00:06:07,130
connect to the

00:06:08,130 --> 00:06:12,900
server-side controller that that's it in

00:06:10,800 --> 00:06:14,880
your kubernetes cluster I'm going to

00:06:12,900 --> 00:06:16,860
pass all the code to it and on the

00:06:14,880 --> 00:06:18,870
server side we're going to do a darker

00:06:16,860 --> 00:06:21,000
build and actually I wonder if they're

00:06:18,870 --> 00:06:22,890
using the new build kit functionality or

00:06:21,000 --> 00:06:25,100
not I should talk to the team about that

00:06:22,890 --> 00:06:28,110
because there's lots of options there

00:06:25,100 --> 00:06:33,030
and then it's deploying it with the hand

00:06:28,110 --> 00:06:36,720
chart and then it opens a connection for

00:06:33,030 --> 00:06:38,790
debugging so you're in vs code you

00:06:36,720 --> 00:06:40,950
initialize your project and then you can

00:06:38,790 --> 00:06:44,820
start debugging in the cloud right away

00:06:40,950 --> 00:06:47,550
and your code can leverage a series of

00:06:44,820 --> 00:06:51,300
services that that are already set up in

00:06:47,550 --> 00:06:54,360
Azure and there's an ingress controller

00:06:51,300 --> 00:06:56,430
in there also that can create URLs yeah

00:06:54,360 --> 00:06:58,380
in addition to that there's you can

00:06:56,430 --> 00:07:01,650
create URLs that are public so that your

00:06:58,380 --> 00:07:03,960
colleagues can test your code in a

00:07:01,650 --> 00:07:07,040
public way or it can create a tunnel

00:07:03,960 --> 00:07:12,990
between you and between your laptop and

00:07:07,040 --> 00:07:18,150
under the code in in the cloud so so let

00:07:12,990 --> 00:07:24,060
me let me show you what it looks like so

00:07:18,150 --> 00:07:28,830
I'm here in I'm here in there let me

00:07:24,060 --> 00:07:31,640
first so here in order to play with

00:07:28,830 --> 00:07:34,220
kubernetes I always use docker desktop

00:07:31,640 --> 00:07:37,710
so I have my local kubernetes cluster

00:07:34,220 --> 00:07:39,810
which is still starting and then here in

00:07:37,710 --> 00:07:42,900
darker desktop I can switch context and

00:07:39,810 --> 00:07:47,700
here I'm going to use a pat IKS cluster

00:07:42,900 --> 00:07:51,300
which is a cluster in Asscher that's

00:07:47,700 --> 00:07:54,810
managed by IKS that I have created and

00:07:51,300 --> 00:08:00,750
so I check that my context is right I'm

00:07:54,810 --> 00:08:02,940
just going to clear that out and so I'm

00:08:00,750 --> 00:08:05,070
just going to do a coupe card or get

00:08:02,940 --> 00:08:08,370
nose to show you that this is not the

00:08:05,070 --> 00:08:12,060
one on my laptop it's the one in IKS

00:08:08,370 --> 00:08:14,490
that I'm connected to I opened it I

00:08:12,060 --> 00:08:16,370
created it 65 days ago I hope I won't

00:08:14,490 --> 00:08:18,009
have any problem with accounting because

00:08:16,370 --> 00:08:21,339
[Laughter]

00:08:18,009 --> 00:08:27,129
I should delete my cluster more often so

00:08:21,339 --> 00:08:31,169
then I do a coop cattle get namespaces

00:08:27,129 --> 00:08:34,000
and you will see that I have installed

00:08:31,169 --> 00:08:35,649
assured that spaces in my cluster so

00:08:34,000 --> 00:08:37,839
there's one instruction with the Azure

00:08:35,649 --> 00:08:41,110
command line to do that once I've done

00:08:37,839 --> 00:08:48,370
that it creates this ACDs namespace and

00:08:41,110 --> 00:08:51,040
when I do good card or get all - an easy

00:08:48,370 --> 00:08:56,889
yes so when I look at what's inside of

00:08:51,040 --> 00:08:59,050
that namespace you will see I have I

00:08:56,889 --> 00:09:01,449
have a demon set to pre-poll all the

00:08:59,050 --> 00:09:04,120
images that I'm going to use and I have

00:09:01,449 --> 00:09:07,690
some services for the controller or

00:09:04,120 --> 00:09:11,410
service for the controller tiller that

00:09:07,690 --> 00:09:13,449
that is used for for helm and then

00:09:11,410 --> 00:09:17,319
traffic that's useful as an ingress

00:09:13,449 --> 00:09:19,750
ingress ingress controller so once I've

00:09:17,319 --> 00:09:22,569
done that I can start working on my

00:09:19,750 --> 00:09:24,699
project so I'm just going to do a code

00:09:22,569 --> 00:09:27,040
in GDS

00:09:24,699 --> 00:09:31,779
node web front-end so that's a simple

00:09:27,040 --> 00:09:33,490
that's a very simple node.js application

00:09:31,779 --> 00:09:40,209
just to show you what the experience

00:09:33,490 --> 00:09:42,790
looks like as a developer and so in

00:09:40,209 --> 00:09:47,889
there I don't have much I just have like

00:09:42,790 --> 00:09:52,149
a node project package of JSON and some

00:09:47,889 --> 00:09:55,209
CSS and JavaScript so it's an index.html

00:09:52,149 --> 00:09:57,220
page so pretty simple application I

00:09:55,209 --> 00:09:59,190
don't have much and I'm a web developer

00:09:57,220 --> 00:10:01,930
I don't know anything about kubernetes

00:09:59,190 --> 00:10:04,630
but I want to start maybe my application

00:10:01,930 --> 00:10:07,329
is using some cloud services that I have

00:10:04,630 --> 00:10:09,339
set up and so here what I'm doing is

00:10:07,329 --> 00:10:11,699
that I'm going to go in the command

00:10:09,339 --> 00:10:14,260
palette and I'm going to use the

00:10:11,699 --> 00:10:16,899
extension assure their spaces prepare

00:10:14,260 --> 00:10:19,480
configurations files for Azure that

00:10:16,899 --> 00:10:21,670
spaces when I click there it asked me

00:10:19,480 --> 00:10:23,620
whether I want to have a public endpoint

00:10:21,670 --> 00:10:26,560
for my application so in this case I'm

00:10:23,620 --> 00:10:29,770
going to click yes but if it's a really

00:10:26,560 --> 00:10:31,510
secret application I could say no

00:10:29,770 --> 00:10:33,700
and you can see what's happening there

00:10:31,510 --> 00:10:35,920
is that here I have a darker file that

00:10:33,700 --> 00:10:38,560
appears no I haven't installed the

00:10:35,920 --> 00:10:41,710
extension yet so I have a docker file

00:10:38,560 --> 00:10:44,470
that appears some configuration for

00:10:41,710 --> 00:10:48,010
Azure dev spaces that I could modify and

00:10:44,470 --> 00:10:50,470
then a hand short and in here could I

00:10:48,010 --> 00:10:52,480
have a launch configuration which means

00:10:50,470 --> 00:10:54,220
that I can start debugging my

00:10:52,480 --> 00:10:56,050
application right away with that launch

00:10:54,220 --> 00:10:59,620
configuration so I don't need to setup

00:10:56,050 --> 00:11:02,350
anything and if I go in a debug mode

00:10:59,620 --> 00:11:06,220
there you can see I have a launch server

00:11:02,350 --> 00:11:07,810
on a DDS and if I click there you can

00:11:06,220 --> 00:11:10,840
see it's launching something it's

00:11:07,810 --> 00:11:13,450
executing a DDS up with some port

00:11:10,840 --> 00:11:15,940
mapping and what this sgds

00:11:13,450 --> 00:11:19,450
up command-line is going to do is it's

00:11:15,940 --> 00:11:23,200
going to connect to assure to the to my

00:11:19,450 --> 00:11:25,300
aks cluster to the controller ACDs

00:11:23,200 --> 00:11:27,970
controller on the other side and it's

00:11:25,300 --> 00:11:31,480
going to push the code over there or

00:11:27,970 --> 00:11:33,580
sync my changes in my code do a darker

00:11:31,480 --> 00:11:36,130
build and this is where there could be

00:11:33,580 --> 00:11:39,970
some interesting optimization with belt

00:11:36,130 --> 00:11:44,380
kits and then do ahem deploy of the

00:11:39,970 --> 00:11:47,290
whole application and then creates a

00:11:44,380 --> 00:11:49,780
tunnel between my local machine and the

00:11:47,290 --> 00:11:53,350
remote endpoint so that I can start

00:11:49,780 --> 00:11:55,620
debugging right away and actually if I

00:11:53,350 --> 00:11:55,620
go

00:11:57,600 --> 00:12:06,060
okay so so I think this is ready and if

00:12:02,790 --> 00:12:12,390
I go if I go in the in the files if I go

00:12:06,060 --> 00:12:17,310
in server server the GS in there I can

00:12:12,390 --> 00:12:19,590
put put a breakpoint in there and when I

00:12:17,310 --> 00:12:22,230
go in my terminal it tells me that it's

00:12:19,590 --> 00:12:24,960
available at a public endpoint so if I

00:12:22,230 --> 00:12:26,700
go at that public endpoint I can give

00:12:24,960 --> 00:12:33,690
that to some of my colleagues and here

00:12:26,700 --> 00:12:35,850
I'm hitting the azure the azure load

00:12:33,690 --> 00:12:37,560
balancer that goes inside of my

00:12:35,850 --> 00:12:40,620
kubernetes cluster via the ingress

00:12:37,560 --> 00:12:42,810
controller to that URL and inside of it

00:12:40,620 --> 00:12:46,770
I end up into my application in debug

00:12:42,810 --> 00:12:48,600
mode and so here I can if I go in the

00:12:46,770 --> 00:12:52,260
debug view I can see on my local

00:12:48,600 --> 00:12:54,210
variables and I could modify this for

00:12:52,260 --> 00:12:56,040
example I could say oh now actually

00:12:54,210 --> 00:12:57,780
actually I need to modify it there so I

00:12:56,040 --> 00:12:59,610
should have created a variable but

00:12:57,780 --> 00:13:03,890
basically I can stop debugging my app

00:12:59,610 --> 00:13:06,510
there and when I say continue it's

00:13:03,890 --> 00:13:13,400
saying hello from what phone and over

00:13:06,510 --> 00:13:17,040
there so so that's debugging with EDS

00:13:13,400 --> 00:13:22,400
the the other experience I wanted to

00:13:17,040 --> 00:13:28,890
show you so yes in addition to that has

00:13:22,400 --> 00:13:33,290
has a few sorry in addition to that has

00:13:28,890 --> 00:13:36,720
a few interesting features where with

00:13:33,290 --> 00:13:39,680
the URL that it creates for you you can

00:13:36,720 --> 00:13:42,390
create different branches so that

00:13:39,680 --> 00:13:44,580
developers one developer can have their

00:13:42,390 --> 00:13:47,910
own version of a certain part of a

00:13:44,580 --> 00:13:50,310
multi-service app running at a certain

00:13:47,910 --> 00:13:53,250
URL well the rest of the developers in

00:13:50,310 --> 00:13:55,140
the team can use the same other set of

00:13:53,250 --> 00:13:58,170
services so it's really for teams to

00:13:55,140 --> 00:14:01,310
collaborate together on applications

00:13:58,170 --> 00:14:05,520
that use lots of services in common

00:14:01,310 --> 00:14:07,440
now there's another developer experience

00:14:05,520 --> 00:14:09,980
that's really cool that I wanted to show

00:14:07,440 --> 00:14:13,790
you which is called

00:14:09,980 --> 00:14:16,790
life share so vs code life share lets

00:14:13,790 --> 00:14:20,150
you collaborate with someone who has vs

00:14:16,790 --> 00:14:23,630
code on their machine and you can hear

00:14:20,150 --> 00:14:27,500
I'm able to give access to the code on

00:14:23,630 --> 00:14:30,290
my machine terminal and a host on my

00:14:27,500 --> 00:14:32,750
machine to Scott here who has nothing

00:14:30,290 --> 00:14:35,660
from this application without having him

00:14:32,750 --> 00:14:37,370
to install anything and the beauty of it

00:14:35,660 --> 00:14:41,390
is that live share works really well

00:14:37,370 --> 00:14:43,520
with a GDS with a dev spaces which means

00:14:41,390 --> 00:14:47,510
that he'll be able from his machine to

00:14:43,520 --> 00:14:49,520
debug the application that we saw in my

00:14:47,510 --> 00:14:56,710
kubernetes cluster without having access

00:14:49,520 --> 00:14:59,420
to it just who live share so we're at 45

00:14:56,710 --> 00:15:01,010
maybe I'll just skip that demo because I

00:14:59,420 --> 00:15:06,530
think it's pretty long

00:15:01,010 --> 00:15:08,840
I'll I'll add to the slide a link that I

00:15:06,530 --> 00:15:12,140
gave that demo a docker con and so you

00:15:08,840 --> 00:15:14,000
can watch that that demo there because

00:15:12,140 --> 00:15:16,400
it takes at least five minutes and we

00:15:14,000 --> 00:15:18,550
have just 20 minutes more and and

00:15:16,400 --> 00:15:21,050
there's more stuff I wanted to show you

00:15:18,550 --> 00:15:23,120
but just just you know that both are

00:15:21,050 --> 00:15:26,030
working together and then the third

00:15:23,120 --> 00:15:28,880
experience I wanted to show you is vs

00:15:26,030 --> 00:15:30,920
code remote extension for containers so

00:15:28,880 --> 00:15:33,220
that's something that came out very

00:15:30,920 --> 00:15:38,140
recently it's an open source extension

00:15:33,220 --> 00:15:43,910
for yes code and what it's doing is that

00:15:38,140 --> 00:15:49,550
it lets you create some configuration in

00:15:43,910 --> 00:15:52,610
the for your vs code project so that vs

00:15:49,550 --> 00:15:56,270
code is split into two parts the local

00:15:52,610 --> 00:16:01,490
part that has the themes and the UI all

00:15:56,270 --> 00:16:04,070
the extensions and then it can run the

00:16:01,490 --> 00:16:05,780
server part of vs code with its own set

00:16:04,070 --> 00:16:09,050
of extensions inside of a docker

00:16:05,780 --> 00:16:10,820
container which means that and so you

00:16:09,050 --> 00:16:14,390
can use that with your local docker

00:16:10,820 --> 00:16:18,410
engine and so what that means is that in

00:16:14,390 --> 00:16:20,630
your github project if you set up that

00:16:18,410 --> 00:16:23,779
configure that vs code configuration

00:16:20,630 --> 00:16:25,430
with a docker file for your project

00:16:23,779 --> 00:16:28,189
every developer who is going to join

00:16:25,430 --> 00:16:31,279
their your team when they're doing a gig

00:16:28,189 --> 00:16:35,600
check out or get clone of the project

00:16:31,279 --> 00:16:37,249
they can launch in debug mode in in vs

00:16:35,600 --> 00:16:39,199
code right away

00:16:37,249 --> 00:16:41,180
and all of them will have a similar

00:16:39,199 --> 00:16:43,309
experience they don't need to have any

00:16:41,180 --> 00:16:45,529
runtime installed on their machine they

00:16:43,309 --> 00:16:48,759
use docker and that code is mounted

00:16:45,529 --> 00:16:51,589
inside of inside of the docker container

00:16:48,759 --> 00:16:54,050
and so you can customize all these

00:16:51,589 --> 00:16:59,749
containers and I'm just going to show

00:16:54,050 --> 00:17:01,639
you what that looks like so that that

00:16:59,749 --> 00:17:05,839
Jesus could remote extension that's

00:17:01,639 --> 00:17:08,990
something that uh that was announced I

00:17:05,839 --> 00:17:12,289
think a month and a half ago so it's six

00:17:08,990 --> 00:17:15,350
weeks six weeks old it came out in the

00:17:12,289 --> 00:17:18,079
regular version of es code two weeks ago

00:17:15,350 --> 00:17:24,230
and in addition to the current can do

00:17:18,079 --> 00:17:27,580
also SSH and wsl if you're on Windows so

00:17:24,230 --> 00:17:31,760
let me close this up and I'm going to

00:17:27,580 --> 00:17:34,429
say here so I'm envious code and I go in

00:17:31,760 --> 00:17:38,840
the command palette and I say remote

00:17:34,429 --> 00:17:42,220
container open folder in container so

00:17:38,840 --> 00:17:45,649
it's going to show me all my folders and

00:17:42,220 --> 00:17:48,230
so I have some examples of a container

00:17:45,649 --> 00:17:49,820
enabled projects in there I'm going to

00:17:48,230 --> 00:17:53,990
take one where I have done the build

00:17:49,820 --> 00:17:57,350
already so the JavaScript node eight so

00:17:53,990 --> 00:17:59,510
when I open this one you can see it's

00:17:57,350 --> 00:18:01,520
installing the DEF container and let's

00:17:59,510 --> 00:18:05,030
take a look at what it's doing behind

00:18:01,520 --> 00:18:07,700
the scenes so behind the scenes it's

00:18:05,030 --> 00:18:10,250
taking the docker file that I have in my

00:18:07,700 --> 00:18:12,919
project it's building a docker image

00:18:10,250 --> 00:18:16,820
with it and then it's doing your docker

00:18:12,919 --> 00:18:19,100
run with that code base inside of that

00:18:16,820 --> 00:18:23,590
docker image and in that docker image

00:18:19,100 --> 00:18:27,559
there's a vs code server that's running

00:18:23,590 --> 00:18:32,510
so that and plus it creates a launched a

00:18:27,559 --> 00:18:34,710
JSON with a debug configuration for for

00:18:32,510 --> 00:18:37,500
that project which means I can say

00:18:34,710 --> 00:18:40,590
I want to launch that program and is

00:18:37,500 --> 00:18:45,260
going to like launch my this is a node

00:18:40,590 --> 00:18:48,720
application again and then I can ask for

00:18:45,260 --> 00:18:51,600
a new terminal in there and the new

00:18:48,720 --> 00:18:54,270
terminal is going to be inside of the

00:18:51,600 --> 00:18:57,500
container so here you can see I have BS

00:18:54,270 --> 00:19:01,970
code server running on my node process

00:18:57,500 --> 00:19:07,260
and if I do a curl of local host on port

00:19:01,970 --> 00:19:10,020
3000 so I'm I hit the breakpoint that I

00:19:07,260 --> 00:19:13,470
had in there inside of my code so here

00:19:10,020 --> 00:19:15,630
I'm debugging a node.js application

00:19:13,470 --> 00:19:18,170
inside of a container and I didn't have

00:19:15,630 --> 00:19:22,200
anything to do to set up all that

00:19:18,170 --> 00:19:25,130
logistics so I'm just going to say yeah

00:19:22,200 --> 00:19:30,060
continue and yeah so that just works so

00:19:25,130 --> 00:19:32,490
that's that's a remote extension in

00:19:30,060 --> 00:19:37,110
terms of development there's just one

00:19:32,490 --> 00:19:40,230
more so these were the two the two

00:19:37,110 --> 00:19:46,340
experiences I wanted to show you let me

00:19:40,230 --> 00:19:46,340
go to to the right to the right slide

00:19:47,310 --> 00:19:53,490
yeah in addition to that when you want

00:19:50,670 --> 00:19:55,800
to debug either functions or containers

00:19:53,490 --> 00:19:57,300
in a kubernetes cluster there are a

00:19:55,800 --> 00:20:01,560
bunch of other projects you can take a

00:19:57,300 --> 00:20:05,490
look at squash is one from the blue team

00:20:01,560 --> 00:20:08,580
thus telepresence which is a gif project

00:20:05,490 --> 00:20:12,270
thus casing and tilt which is pretty

00:20:08,580 --> 00:20:14,490
recent I have if you're looking for my

00:20:12,270 --> 00:20:16,370
slide for Doc Ock on I have a bunch of

00:20:14,490 --> 00:20:18,720
explanation about how to use all of them

00:20:16,370 --> 00:20:20,940
so that covers the developer experience

00:20:18,720 --> 00:20:23,610
now Scott is going to talk about

00:20:20,940 --> 00:20:25,530
application packages packaging how do

00:20:23,610 --> 00:20:29,390
you package all these applications that

00:20:25,530 --> 00:20:32,810
have containers functions as well as

00:20:29,390 --> 00:20:38,300
manage cloud services

00:20:32,810 --> 00:20:38,300
all right oh yeah sorry

00:20:54,639 --> 00:21:01,369
can you see that oh yeah

00:20:58,179 --> 00:21:03,019
all right so Patrick's done a really

00:21:01,369 --> 00:21:07,460
good job of showing the application

00:21:03,019 --> 00:21:08,989
developer persona but me myself I'm not

00:21:07,460 --> 00:21:12,799
really much of an application developer

00:21:08,989 --> 00:21:14,899
I'm more of an ops ops e-types person so

00:21:12,799 --> 00:21:17,299
I'm going to show you scene up which is

00:21:14,899 --> 00:21:19,909
an open specification from both

00:21:17,299 --> 00:21:22,639
Microsoft and docker and also I believe

00:21:19,909 --> 00:21:24,980
how she clapping bitNami and now I'm

00:21:22,639 --> 00:21:27,289
working with it and what it actually

00:21:24,980 --> 00:21:29,929
does is as an obstruction over tools

00:21:27,289 --> 00:21:32,169
that you already have so these tools

00:21:29,929 --> 00:21:34,940
could be home these tools could be

00:21:32,169 --> 00:21:36,950
ansible these source could be Papa it

00:21:34,940 --> 00:21:38,659
could be anything and basically what it

00:21:36,950 --> 00:21:41,389
does is give you a framework to be able

00:21:38,659 --> 00:21:43,279
to deploy these applications and code

00:21:41,389 --> 00:21:45,320
that you already have in an obstructive

00:21:43,279 --> 00:21:47,629
way this allows you to have your

00:21:45,320 --> 00:21:48,889
deployment pipeline really really slim

00:21:47,629 --> 00:21:50,779
down so instead of having multiple

00:21:48,889 --> 00:21:53,509
binaries or multiple things like that

00:21:50,779 --> 00:21:55,730
you can have just a single way to deploy

00:21:53,509 --> 00:21:58,070
things the best thing about Cena is the

00:21:55,730 --> 00:22:00,289
invocation image is a container so you

00:21:58,070 --> 00:22:02,210
don't need any binaries you just

00:22:00,289 --> 00:22:04,090
download the invocation image and away

00:22:02,210 --> 00:22:09,679
you go

00:22:04,090 --> 00:22:12,950
Microsoft has a has a implementation of

00:22:09,679 --> 00:22:15,350
Cena called portal and what this

00:22:12,950 --> 00:22:17,570
actually gives you and why you would

00:22:15,350 --> 00:22:19,820
want to use porter is we have built

00:22:17,570 --> 00:22:21,919
things called mix-ins and what mix-ins

00:22:19,820 --> 00:22:24,769
are is the smarts to talk to a cloud

00:22:21,919 --> 00:22:26,419
native API so if you wanted to play the

00:22:24,769 --> 00:22:27,679
coupie needies you don't need to know

00:22:26,419 --> 00:22:29,269
anything about kubernetes

00:22:27,679 --> 00:22:31,159
except the deployment mechanism that you

00:22:29,269 --> 00:22:33,320
want the mixin will look after the

00:22:31,159 --> 00:22:36,169
smarts I'm talking to the kubernetes api

00:22:33,320 --> 00:22:39,379
for you same with the juror same with

00:22:36,169 --> 00:22:41,629
terraform and also helm so if you've

00:22:39,379 --> 00:22:43,759
already got helm charts and you wanted

00:22:41,629 --> 00:22:45,200
to play them and pass different

00:22:43,759 --> 00:22:48,440
variables three different animals

00:22:45,200 --> 00:22:50,509
because you can do that with Porter then

00:22:48,440 --> 00:22:52,190
that you don't need to know anything

00:22:50,509 --> 00:22:54,289
about how there's a hound mix in there

00:22:52,190 --> 00:22:56,179
for you so basically you just put the

00:22:54,289 --> 00:22:57,799
variables that you want into into the

00:22:56,179 --> 00:23:00,169
code and away you go

00:22:57,799 --> 00:23:03,080
so it's actually really really simple

00:23:00,169 --> 00:23:04,999
and the good thing about see now whether

00:23:03,080 --> 00:23:06,179
you use our implementation or you use

00:23:04,999 --> 00:23:08,700
docker apps which is

00:23:06,179 --> 00:23:10,320
it's implementation it's not trying to

00:23:08,700 --> 00:23:11,759
replace any tools that you've got it's

00:23:10,320 --> 00:23:13,710
actually working with the tools you've

00:23:11,759 --> 00:23:15,749
got and if you build a scene out

00:23:13,710 --> 00:23:18,179
correctly you should be able to use

00:23:15,749 --> 00:23:20,759
docker up all border they should be

00:23:18,179 --> 00:23:22,169
totally interchangeable the other good

00:23:20,759 --> 00:23:23,970
thing about seeing our bundles is

00:23:22,169 --> 00:23:26,549
there's work going on in the OCI at the

00:23:23,970 --> 00:23:28,950
moment to allow bundles to be pushed to

00:23:26,549 --> 00:23:30,360
the OCI registry so what this means is

00:23:28,950 --> 00:23:32,549
you can actually push your scene out

00:23:30,360 --> 00:23:34,830
bundles up with your images and the

00:23:32,549 --> 00:23:37,309
application scaffolding will live with

00:23:34,830 --> 00:23:41,279
the container image which is really cool

00:23:37,309 --> 00:23:42,480
now Patrick's application although it

00:23:41,279 --> 00:23:44,249
looks like a really simple node

00:23:42,480 --> 00:23:46,440
application that actually has lots and

00:23:44,249 --> 00:23:48,840
lots of load on it so he and he wants

00:23:46,440 --> 00:23:50,789
performance performance performance and

00:23:48,840 --> 00:23:55,009
if I don't give him that then we do our

00:23:50,789 --> 00:23:57,720
manager's review I'll get in trouble no

00:23:55,009 --> 00:24:00,389
Australian humor though but basically

00:23:57,720 --> 00:24:01,820
what we found with kubernetes in general

00:24:00,389 --> 00:24:05,490
and this is cloud in general

00:24:01,820 --> 00:24:07,740
provisioning our VM is slow so it

00:24:05,490 --> 00:24:10,049
doesn't matter if you're in a jar or in

00:24:07,740 --> 00:24:13,289
Alibaba cloud or any other of the clouds

00:24:10,049 --> 00:24:14,460
if you go to a node autoscaler again

00:24:13,289 --> 00:24:16,679
it's going to be like two minutes before

00:24:14,460 --> 00:24:20,279
the kubernetes node is ready at least if

00:24:16,679 --> 00:24:22,710
not more so a project was started inside

00:24:20,279 --> 00:24:24,809
Microsoft daenerys in CNC F Codd virtual

00:24:22,710 --> 00:24:27,779
Kubler and what that allows you to do is

00:24:24,809 --> 00:24:29,220
interface to container runtime and make

00:24:27,779 --> 00:24:31,590
it look like it's a node that's in the

00:24:29,220 --> 00:24:34,499
cloud so if your honor's your that will

00:24:31,590 --> 00:24:38,460
be a CI if you're on Alibaba Cloud I

00:24:34,499 --> 00:24:40,080
believe it's a Fiat but there's there's

00:24:38,460 --> 00:24:41,789
a lots out there if you're an AWS that

00:24:40,080 --> 00:24:44,759
would be far gate so what this allows

00:24:41,789 --> 00:24:47,460
you to do is actually scale your pods

00:24:44,759 --> 00:24:49,740
across vertically without having the

00:24:47,460 --> 00:24:52,590
wait for a node to spin up so it'll hit

00:24:49,740 --> 00:24:55,139
the ACI API and it will spin up a pod

00:24:52,590 --> 00:24:57,929
straightaway for you and when you're

00:24:55,139 --> 00:25:00,690
doing a highly transactional sort of

00:24:57,929 --> 00:25:02,220
workload this can save you time and also

00:25:00,690 --> 00:25:04,860
could save you money

00:25:02,220 --> 00:25:08,399
virtual couplet doesn't give you a full

00:25:04,860 --> 00:25:09,869
full a full node but it does give you

00:25:08,399 --> 00:25:11,789
enough that you can get away with a

00:25:09,869 --> 00:25:13,200
whole a whole heap of stuff so you can

00:25:11,789 --> 00:25:15,749
see all the different stuff there so you

00:25:13,200 --> 00:25:17,690
get all the normal get blood stuff and

00:25:15,749 --> 00:25:19,890
virtual people at the open-source

00:25:17,690 --> 00:25:21,360
implementation there is some limitation

00:25:19,890 --> 00:25:23,550
- networking coming back into the

00:25:21,360 --> 00:25:26,610
cluster and bits and pieces like that if

00:25:23,550 --> 00:25:28,140
you use the the implementation in honors

00:25:26,610 --> 00:25:29,760
Europe we call it virtual nude and we'll

00:25:28,140 --> 00:25:31,260
set up the center I provider and we'll

00:25:29,760 --> 00:25:33,090
set up a whole heap of networking to

00:25:31,260 --> 00:25:34,650
speak back to your cluster so if there's

00:25:33,090 --> 00:25:36,630
any resources in your cluster that you

00:25:34,650 --> 00:25:37,140
need to speak back to you'll be able to

00:25:36,630 --> 00:25:38,850
do that

00:25:37,140 --> 00:25:41,190
Alibaba cloud has taken it one step

00:25:38,850 --> 00:25:43,230
further and they've got Project Lead

00:25:41,190 --> 00:25:45,780
Viking which looks after DNS resolution

00:25:43,230 --> 00:25:49,020
across there they're clouds at the

00:25:45,780 --> 00:25:49,260
moment we do IP across on the CNI they

00:25:49,020 --> 00:25:52,140
do

00:25:49,260 --> 00:25:54,060
Dinah's and they also are able to run

00:25:52,140 --> 00:25:56,340
Service mesh across virtual moon and

00:25:54,060 --> 00:25:59,540
which is amazing like that that was the

00:25:56,340 --> 00:25:59,540
first time I saw that was in Barcelona

00:26:00,470 --> 00:26:06,150
but we need something to look after the

00:26:03,420 --> 00:26:08,850
scaling and this is where cater comes in

00:26:06,150 --> 00:26:10,530
so when when HTTP request comes in

00:26:08,850 --> 00:26:13,020
through kubernetes what we want to do is

00:26:10,530 --> 00:26:14,340
actually scale it and we want to scale

00:26:13,020 --> 00:26:15,780
it to virtual node but we need something

00:26:14,340 --> 00:26:17,910
to look after that and look at the

00:26:15,780 --> 00:26:19,770
metrics coming into the cluster and then

00:26:17,910 --> 00:26:21,690
scale it across to the appropriate place

00:26:19,770 --> 00:26:24,390
with which is virtual node for us or

00:26:21,690 --> 00:26:26,540
virtual Kubler so Cairo looks after that

00:26:24,390 --> 00:26:28,860
so Kenna can work with a whole heap of

00:26:26,540 --> 00:26:31,920
technologies to look at metrics so it

00:26:28,860 --> 00:26:33,630
can look at rabbitmq Prometheus there's

00:26:31,920 --> 00:26:35,580
a whole heap of heap of things that can

00:26:33,630 --> 00:26:37,920
work with and then what it does is it

00:26:35,580 --> 00:26:39,900
talks to the horizontal pod or a scaler

00:26:37,920 --> 00:26:44,160
and then talks to virtual node and

00:26:39,900 --> 00:26:48,060
scales out that way so kara allows you

00:26:44,160 --> 00:26:51,090
to do to do a lot of cool things and if

00:26:48,060 --> 00:26:55,380
it runs both in a standalone method or

00:26:51,090 --> 00:26:58,800
it runs also in another method which

00:26:55,380 --> 00:27:02,010
installs another product another library

00:26:58,800 --> 00:27:04,170
by Microsoft and days or days love story

00:27:02,010 --> 00:27:06,720
or came in open days that's a habit it's

00:27:04,170 --> 00:27:09,660
from Deus labs and it's got a serious

00:27:06,720 --> 00:27:11,790
and what a Cirrus does is allows a zero

00:27:09,660 --> 00:27:13,500
scale effect on a pod because on

00:27:11,790 --> 00:27:15,630
kubernetes if you scale the pod to zero

00:27:13,500 --> 00:27:18,000
and you have a service endpoint once

00:27:15,630 --> 00:27:20,160
traffic goes there like it gets lost and

00:27:18,000 --> 00:27:22,980
there's a whole issue there Osiris is

00:27:20,160 --> 00:27:24,420
another event component that sits Aron

00:27:22,980 --> 00:27:26,700
allows the service to have no pods

00:27:24,420 --> 00:27:30,710
beneath belief it and then once it needs

00:27:26,700 --> 00:27:30,710
the pods of edibles can't scale them up

00:27:32,030 --> 00:27:35,940
so this is what cattle looks like if you

00:27:34,470 --> 00:27:37,950
see there the external trigger Schloss

00:27:35,940 --> 00:27:39,900
scaling pods you got the Cooper Nettie's

00:27:37,950 --> 00:27:41,670
a TD store there you've got the

00:27:39,900 --> 00:27:43,920
controller and all the parts of QP

00:27:41,670 --> 00:27:45,330
Nene's and the horizontal pod auto spell

00:27:43,920 --> 00:27:46,590
it so you can see there it's looking

00:27:45,330 --> 00:27:49,020
after so the Keller doesn't actually

00:27:46,590 --> 00:27:52,440
replace our horizontal pod autoscaler it

00:27:49,020 --> 00:27:54,960
actually works with it so what we're

00:27:52,440 --> 00:27:57,630
going to do now is just run a demo just

00:27:54,960 --> 00:27:59,070
it takes a minute and so basically what

00:27:57,630 --> 00:28:00,990
we're going to do is we're gonna use pod

00:27:59,070 --> 00:28:02,760
up and we're going to install rabbitmq

00:28:00,990 --> 00:28:04,320
via home then we're gonna do a

00:28:02,760 --> 00:28:06,030
deployment and I'll go through

00:28:04,320 --> 00:28:07,559
deployments and we're gonna install a

00:28:06,030 --> 00:28:09,059
publisher in a consumer and we're going

00:28:07,559 --> 00:28:11,580
to scale it all on virtual note right

00:28:09,059 --> 00:28:15,570
now with a single command so we just go

00:28:11,580 --> 00:28:19,950
port are well if I can spell order and

00:28:15,570 --> 00:28:21,750
store - see the - see is passing the

00:28:19,950 --> 00:28:24,090
credentials file for where my cube

00:28:21,750 --> 00:28:27,090
control file is so I can actually speak

00:28:24,090 --> 00:28:29,850
to Cooper native so as you can see there

00:28:27,090 --> 00:28:31,830
it's insulin camera cat I had a demo now

00:28:29,850 --> 00:28:33,420
I'm gonna come back to this because it

00:28:31,830 --> 00:28:35,940
takes a minute for a RabbitMQ to get up

00:28:33,420 --> 00:28:37,410
start up but as you can see now it's

00:28:35,940 --> 00:28:39,540
already invoking helm so just with a

00:28:37,410 --> 00:28:41,100
single single command of it invoked helm

00:28:39,540 --> 00:28:42,600
and I'm gonna do some coop entities

00:28:41,100 --> 00:28:43,950
deployment so let's have a look at what

00:28:42,600 --> 00:28:46,080
those deployments are and we'll come

00:28:43,950 --> 00:28:48,650
back and look at the horizontal port

00:28:46,080 --> 00:28:48,650
autoscaler

00:28:52,410 --> 00:28:59,430
oh and so as you can see with that with

00:28:57,480 --> 00:29:03,510
that si nab bundle what we've done is

00:28:59,430 --> 00:29:04,800
we've installed RabbitMQ and then what

00:29:03,510 --> 00:29:07,200
we're going to do is we're going to do a

00:29:04,800 --> 00:29:09,480
deployment and it's just a sample

00:29:07,200 --> 00:29:11,250
deployment and but the you'll notice

00:29:09,480 --> 00:29:12,810
down the bottom here what we're gonna do

00:29:11,250 --> 00:29:15,240
is we're gonna say this deployment right

00:29:12,810 --> 00:29:17,370
here has a no toleration only the run on

00:29:15,240 --> 00:29:19,860
virtual couplet so that's not gonna run

00:29:17,370 --> 00:29:21,990
on a normal on a normal note it's only

00:29:19,860 --> 00:29:23,430
in the scale onto virtual couplet now

00:29:21,990 --> 00:29:25,920
you can see down the bottom there the

00:29:23,430 --> 00:29:29,100
virtual people it is a CI if that was

00:29:25,920 --> 00:29:33,000
Amazon it would be far gate or such like

00:29:29,100 --> 00:29:34,410
that then we look at what we're going to

00:29:33,000 --> 00:29:36,570
do is we're going to use a custom

00:29:34,410 --> 00:29:39,390
resource definition that Kenny uses just

00:29:36,570 --> 00:29:41,010
to have a scaled object and this will

00:29:39,390 --> 00:29:42,570
look and see the pollen interview

00:29:41,010 --> 00:29:42,900
intervals and everything that needs to

00:29:42,570 --> 00:29:47,700
happen

00:29:42,900 --> 00:29:49,200
within the RabbitMQ stack and then we're

00:29:47,700 --> 00:29:51,720
just going to run the batch job which is

00:29:49,200 --> 00:29:54,120
the publish so we can see we can see

00:29:51,720 --> 00:29:55,380
things start to scale off and so as you

00:29:54,120 --> 00:29:56,640
can see there that was a whole lot of

00:29:55,380 --> 00:29:58,350
stuff I just to play with a single

00:29:56,640 --> 00:29:58,950
command so it like seen up it's pretty

00:29:58,350 --> 00:30:03,570
awesome

00:29:58,950 --> 00:30:06,690
so let's go back so rabbit infused

00:30:03,570 --> 00:30:09,150
wasn't started so what I'll do is just

00:30:06,690 --> 00:30:12,000
go to my other terminals so as you can

00:30:09,150 --> 00:30:13,440
see here we've just got a zero I'm a

00:30:12,000 --> 00:30:14,760
cast Buster but you'll see that there's

00:30:13,440 --> 00:30:16,500
an extra node there that looks a little

00:30:14,760 --> 00:30:18,390
bit different so you can see there that

00:30:16,500 --> 00:30:20,700
I've got a virtual node running and my

00:30:18,390 --> 00:30:22,740
plus is running 114 which is the latest

00:30:20,700 --> 00:30:24,960
that we can run on a draw and the

00:30:22,740 --> 00:30:26,400
virtual and the virtual cube let's run

00:30:24,960 --> 00:30:28,200
in there so the virtual people it's

00:30:26,400 --> 00:30:30,270
acting like a single node but what it's

00:30:28,200 --> 00:30:32,910
actually doing is is talking to the a CI

00:30:30,270 --> 00:30:35,280
API and what it's getting back it's

00:30:32,910 --> 00:30:37,230
returning into like calls that

00:30:35,280 --> 00:30:40,050
communities knows natively that a node

00:30:37,230 --> 00:30:43,590
has so let's go back and hope that so a

00:30:40,050 --> 00:30:45,330
virtual ability so we've just deploy as

00:30:43,590 --> 00:30:49,730
you can see they're RabbitMQ now we're

00:30:45,330 --> 00:30:49,730
deploying the consumer so if we go over

00:30:51,110 --> 00:30:56,720
killed up puts up a loop so that's going

00:30:53,790 --> 00:30:59,880
to get the horizontal product autoscaler

00:30:56,720 --> 00:31:01,710
and if you have here so what we can see

00:30:59,880 --> 00:31:03,540
here is you can see a whole heap of pods

00:31:01,710 --> 00:31:05,669
terminating that's okay because they

00:31:03,540 --> 00:31:07,440
were actually running surplus functions

00:31:05,669 --> 00:31:09,059
but you can see there on the node that

00:31:07,440 --> 00:31:10,889
it's actually only to play non-virtual

00:31:09,059 --> 00:31:12,749
couplet so none of these none of the

00:31:10,889 --> 00:31:15,029
scaling event that Patrick needed is

00:31:12,749 --> 00:31:16,229
actually happening on my aks cluster so

00:31:15,029 --> 00:31:17,759
performance of all the other

00:31:16,229 --> 00:31:20,369
applications I've got running there is

00:31:17,759 --> 00:31:22,289
actually nothing because I'm offending

00:31:20,369 --> 00:31:24,209
all this load is actual load that's just

00:31:22,289 --> 00:31:27,799
happened into virtual crew blood which

00:31:24,209 --> 00:31:30,089
is awesome and then if I go back to my

00:31:27,799 --> 00:31:32,609
scaling you can see now that I'm

00:31:30,089 --> 00:31:34,619
starting to get a scaling events happen

00:31:32,609 --> 00:31:37,919
so you can see I had a zero replica of

00:31:34,619 --> 00:31:41,009
the consumer and that's because I had no

00:31:37,919 --> 00:31:42,839
traffic and as weird son into the pods

00:31:41,009 --> 00:31:44,820
you can see the rappers replicas are

00:31:42,839 --> 00:31:48,209
going up depending on the Chaffee so

00:31:44,820 --> 00:31:50,489
before I had HDB's scale to 0-0 now I've

00:31:48,209 --> 00:31:52,200
got more tráfico but one I've got four

00:31:50,489 --> 00:31:54,899
coming up now so as you can see with

00:31:52,200 --> 00:31:56,549
that single command through C NAB I've

00:31:54,899 --> 00:31:58,829
deployed a whole infrastructure looking

00:31:56,549 --> 00:32:01,169
after a whole scaling event and scaling

00:31:58,829 --> 00:32:05,789
mechanism which is which is quite quite

00:32:01,169 --> 00:32:08,940
complex so let's go back to the slides

00:32:05,789 --> 00:32:12,649
and the good thing about this particular

00:32:08,940 --> 00:32:14,940
demo as well is I've opened sourced it

00:32:12,649 --> 00:32:16,889
if you want the code and you want to run

00:32:14,940 --> 00:32:18,779
this yourself there it is although it's

00:32:16,889 --> 00:32:22,139
all there it's all in C now all you need

00:32:18,779 --> 00:32:24,539
is a juror account because it does need

00:32:22,139 --> 00:32:26,070
virtual node if you know virtual people

00:32:24,539 --> 00:32:28,320
it enough and you can get virtual people

00:32:26,070 --> 00:32:30,749
at working on another cloud provider it

00:32:28,320 --> 00:32:32,609
just take the C it and that yeah just

00:32:30,749 --> 00:32:34,799
think the C now bundles and you'll be

00:32:32,609 --> 00:32:36,389
able to deploy them there and then

00:32:34,799 --> 00:32:38,039
there's all these other things that

00:32:36,389 --> 00:32:40,019
Patrick spoke about that's where they

00:32:38,039 --> 00:32:41,969
come and that's all where you can get

00:32:40,019 --> 00:32:43,379
all the different things and of course

00:32:41,969 --> 00:32:45,359
down the bottom if you want to work for

00:32:43,379 --> 00:32:47,129
Microsoft especially in China we're

00:32:45,359 --> 00:32:49,109
looking for cloud developer advocates

00:32:47,129 --> 00:32:50,729
the drain mine and Patrick steam so if

00:32:49,109 --> 00:32:52,529
you're looking for a new job you love

00:32:50,729 --> 00:32:54,139
containers and you're in China come and

00:32:52,529 --> 00:32:57,649
see us after the talk

00:32:54,139 --> 00:32:57,649
any questions

00:33:11,670 --> 00:33:18,400
okay okay if there's no questions we

00:33:15,280 --> 00:33:21,700
will be around outside for questions

00:33:18,400 --> 00:33:24,250
after this talk just a summary of what

00:33:21,700 --> 00:33:25,780
we presented here the goal here is when

00:33:24,250 --> 00:33:28,780
you're developing an application that

00:33:25,780 --> 00:33:31,840
has containers functions and cloud

00:33:28,780 --> 00:33:34,000
services there are several extensions in

00:33:31,840 --> 00:33:37,120
vs code and in Azure that lets you

00:33:34,000 --> 00:33:40,480
develop that part of that Multi multi

00:33:37,120 --> 00:33:42,700
technology application scene AB and the

00:33:40,480 --> 00:33:45,310
implementations as he NAB's R is a

00:33:42,700 --> 00:33:47,260
specification plus some implementation

00:33:45,310 --> 00:33:49,720
that lets you deploy these applications

00:33:47,260 --> 00:33:52,330
and then kada is a pretty good way of

00:33:49,720 --> 00:33:54,190
scaling that these applications are

00:33:52,330 --> 00:33:57,520
neither an open source project that runs

00:33:54,190 --> 00:34:01,330
into any kubernetes cluster yep so you

00:33:57,520 --> 00:34:03,480
see now seen a header and virtual

00:34:01,330 --> 00:34:06,090
couplet and not as your specific but

00:34:03,480 --> 00:34:09,100
first people it's actually in ciencia

00:34:06,090 --> 00:34:11,080
but yeah you can run them all on Azure

00:34:09,100 --> 00:34:12,820
as well and just for bonus

00:34:11,080 --> 00:34:16,690
this was actually those demos were run

00:34:12,820 --> 00:34:17,950
on wsl to running a custom kernel so it

00:34:16,690 --> 00:34:18,970
would be excellent supporting a whole

00:34:17,950 --> 00:34:20,350
heap of other stuff that I've built on

00:34:18,970 --> 00:34:24,010
Friday night at an airport so I'm glad

00:34:20,350 --> 00:34:25,540
it held up for my demos then that's up

00:34:24,010 --> 00:34:27,330
but thank you very much for coming out

00:34:25,540 --> 00:34:31,380
to the top thank you thank you

00:34:27,330 --> 00:34:31,380

YouTube URL: https://www.youtube.com/watch?v=dA-oNkhFOKE


