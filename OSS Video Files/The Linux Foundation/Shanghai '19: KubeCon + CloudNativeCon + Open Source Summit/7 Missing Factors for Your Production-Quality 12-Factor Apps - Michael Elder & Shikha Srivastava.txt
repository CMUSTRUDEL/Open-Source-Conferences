Title: 7 Missing Factors for Your Production-Quality 12-Factor Apps - Michael Elder & Shikha Srivastava
Publication date: 2019-07-10
Playlist: Shanghai '19: KubeCon + CloudNativeCon + Open Source Summit
Description: 
	7 Missing Factors for Your Production-Quality 12-Factor Apps - Michael Elder & Shikha Srivastava, IBM 

We've all heard of and practiced the 12-factor principles for effective microservices. With Kubernetes, many of these factors are directly supported. In this talk, we ask the question: are the 12 factors sufficient for building production-quality, scalable, and secure microservices?  Based on our experience creating enterprise-grade production-ready apps based on Kubernetes, we identified 7 missing factors that are often overlooked. These additional factors ensure that you can upgrade, secure, and scale your apps all the way to production. We'll describe these 7 factors and provide specific guidance on how to adopt them in the delivery of your next Kubernetes microservice. 

https://sched.co/NrlN
Captions: 
	00:00:00,000 --> 00:00:05,549
good morning welcome everyone thanks for

00:00:04,020 --> 00:00:06,899
coming out I know we overlap with a

00:00:05,549 --> 00:00:10,440
keynote so I appreciate you making time

00:00:06,899 --> 00:00:13,320
to come out and see our talk my name is

00:00:10,440 --> 00:00:16,379
Michael elder and I'm here today with

00:00:13,320 --> 00:00:18,510
Shikha we're gonna talk to you about the

00:00:16,379 --> 00:00:20,850
seven missing factors for production

00:00:18,510 --> 00:00:23,250
applications so thinking about what is

00:00:20,850 --> 00:00:26,220
it beyond 12 factor applications that

00:00:23,250 --> 00:00:29,880
you need in order to run kubernetes in

00:00:26,220 --> 00:00:31,980
production so when you think about

00:00:29,880 --> 00:00:34,200
what's required for a production

00:00:31,980 --> 00:00:37,050
application there's a number of key

00:00:34,200 --> 00:00:40,070
factors beyond just as my code function

00:00:37,050 --> 00:00:43,920
correctly you need to think about how

00:00:40,070 --> 00:00:45,989
secure is the application so managing

00:00:43,920 --> 00:00:48,390
TLS certificates becomes a really

00:00:45,989 --> 00:00:51,120
important aspect you have to think about

00:00:48,390 --> 00:00:54,149
how resilient is the application does it

00:00:51,120 --> 00:00:56,910
respond correctly to failure but as you

00:00:54,149 --> 00:01:00,719
manage the application how does it tie

00:00:56,910 --> 00:01:02,820
into the observability aspects how do I

00:01:00,719 --> 00:01:05,010
actually measure its help how do I

00:01:02,820 --> 00:01:07,290
ensure that it's running correctly on an

00:01:05,010 --> 00:01:09,420
ongoing basis so we'll talk more about

00:01:07,290 --> 00:01:13,470
these factors and provide some great

00:01:09,420 --> 00:01:16,020
examples through this talk so how many

00:01:13,470 --> 00:01:20,310
of you are already familiar with this

00:01:16,020 --> 00:01:24,509
notion of a 12 factor application a few

00:01:20,310 --> 00:01:28,409
hands okay twelve factor is a

00:01:24,509 --> 00:01:31,530
methodology and it just says there are

00:01:28,409 --> 00:01:33,799
twelve specific practices that you

00:01:31,530 --> 00:01:37,740
should follow when you're building

00:01:33,799 --> 00:01:39,840
scalable micro services and we'll talk

00:01:37,740 --> 00:01:42,810
about those in just a moment but it just

00:01:39,840 --> 00:01:45,329
gives you a way of defining sort of step

00:01:42,810 --> 00:01:47,189
by step here are some best practices

00:01:45,329 --> 00:01:49,970
that you want to use as you create

00:01:47,189 --> 00:01:53,369
applications and it turns out that

00:01:49,970 --> 00:01:56,579
kubernetes really has taken a lot of

00:01:53,369 --> 00:02:00,509
these factors into account in designing

00:01:56,579 --> 00:02:03,360
the kubernetes api and things like

00:02:00,509 --> 00:02:05,729
deployments and stateful sets we talked

00:02:03,360 --> 00:02:08,039
about this at coop convar Salona

00:02:05,729 --> 00:02:11,220
you can watch that recorded session

00:02:08,039 --> 00:02:13,860
where we explain the relationship of 12

00:02:11,220 --> 00:02:16,650
factor applications to kubernetes

00:02:13,860 --> 00:02:19,260
and the link is a article that walks

00:02:16,650 --> 00:02:22,200
through how that lays out but today

00:02:19,260 --> 00:02:25,520
we're gonna go a little bit further so

00:02:22,200 --> 00:02:28,530
when you look at the 12 factors there's

00:02:25,520 --> 00:02:30,840
well a dozen of them right and they

00:02:28,530 --> 00:02:33,540
focus on many different aspects of the

00:02:30,840 --> 00:02:36,060
application and sometimes if you're not

00:02:33,540 --> 00:02:38,220
familiar with them they might seem a bit

00:02:36,060 --> 00:02:40,410
overwhelming why do I need to do all of

00:02:38,220 --> 00:02:42,930
these different things so let's talk

00:02:40,410 --> 00:02:45,600
about these just briefly and then we're

00:02:42,930 --> 00:02:48,360
gonna go beyond these basic factors and

00:02:45,600 --> 00:02:50,430
we're going to look at what's missing

00:02:48,360 --> 00:02:53,850
what are some of the best practices and

00:02:50,430 --> 00:02:56,850
for context Shikha and I we work for IBM

00:02:53,850 --> 00:03:00,240
and we build products that use

00:02:56,850 --> 00:03:02,730
kubernetes as part of the foundation and

00:03:00,240 --> 00:03:05,540
as we've been doing this over the last

00:03:02,730 --> 00:03:09,270
three or four years we've identified

00:03:05,540 --> 00:03:12,030
several common practices that we think

00:03:09,270 --> 00:03:13,830
are required to run applications in

00:03:12,030 --> 00:03:15,780
production so that's what we're going to

00:03:13,830 --> 00:03:19,200
go through in this conversation but

00:03:15,780 --> 00:03:20,970
let's look at the basics first with a 12

00:03:19,200 --> 00:03:24,209
factor app what you're really thinking

00:03:20,970 --> 00:03:28,890
about are sort of three parts of the

00:03:24,209 --> 00:03:33,390
lifecycle how do I write the application

00:03:28,890 --> 00:03:37,340
and manage its code how do I deploy the

00:03:33,390 --> 00:03:40,230
application and then how do I operate it

00:03:37,340 --> 00:03:43,830
so if you're not familiar with 12 factor

00:03:40,230 --> 00:03:45,870
as a general set of principles this is

00:03:43,830 --> 00:03:48,060
just a way to think about it we'll talk

00:03:45,870 --> 00:03:51,390
through this here and and and break it

00:03:48,060 --> 00:03:53,550
down but ultimately this may give you a

00:03:51,390 --> 00:03:55,500
simple way to get that introduction to

00:03:53,550 --> 00:04:00,420
what you would need to do with 12 factor

00:03:55,500 --> 00:04:02,250
apps so code base when we think about

00:04:00,420 --> 00:04:05,070
the code base we're really thinking

00:04:02,250 --> 00:04:08,250
about how do i define the application

00:04:05,070 --> 00:04:11,130
and how do I manage it the great thing

00:04:08,250 --> 00:04:13,769
about the kubernetes design model is

00:04:11,130 --> 00:04:17,190
that it allows you to represent

00:04:13,769 --> 00:04:20,549
everything as text all parts of the

00:04:17,190 --> 00:04:23,100
application are code therefore I can

00:04:20,549 --> 00:04:25,590
manage them with revision control with

00:04:23,100 --> 00:04:27,340
source control I can make it part of an

00:04:25,590 --> 00:04:30,100
automated build process

00:04:27,340 --> 00:04:33,190
for developers this means that I can get

00:04:30,100 --> 00:04:36,280
out of the details of explaining how to

00:04:33,190 --> 00:04:39,760
scale the application and instead I can

00:04:36,280 --> 00:04:43,300
declare things like I want three

00:04:39,760 --> 00:04:46,630
replicas and kubernetes will help add

00:04:43,300 --> 00:04:50,500
more replicas or take them away based on

00:04:46,630 --> 00:04:53,950
that desired state now this is true from

00:04:50,500 --> 00:04:57,070
the container image and how I represent

00:04:53,950 --> 00:04:59,380
that using a docker file all the way

00:04:57,070 --> 00:05:01,450
through to the kubernetes api and

00:04:59,380 --> 00:05:04,750
representing things like a deployment or

00:05:01,450 --> 00:05:07,690
networking services or how it talks to

00:05:04,750 --> 00:05:09,700
persistent storage so code base and

00:05:07,690 --> 00:05:13,120
really what you'll notice is will

00:05:09,700 --> 00:05:17,139
represent the factors with this sort of

00:05:13,120 --> 00:05:19,750
F number and a letter I to eyes etc

00:05:17,139 --> 00:05:22,030
Roman numerals here where represent that

00:05:19,750 --> 00:05:24,520
so that we can tie it back to 12 factors

00:05:22,030 --> 00:05:28,090
through the conversation but ultimately

00:05:24,520 --> 00:05:30,220
if you look at code base the build

00:05:28,090 --> 00:05:31,990
release and run cycle and development

00:05:30,220 --> 00:05:33,880
and production parity which are three of

00:05:31,990 --> 00:05:36,210
those twelve factors you can think about

00:05:33,880 --> 00:05:39,700
them really as how you manage your code

00:05:36,210 --> 00:05:43,690
the next group of factors here is how I

00:05:39,700 --> 00:05:48,280
deploy code now what's neat about this

00:05:43,690 --> 00:05:51,490
is that within the various factors one

00:05:48,280 --> 00:05:55,229
of the key principles is separate the

00:05:51,490 --> 00:05:58,389
configuration from the code base and

00:05:55,229 --> 00:06:01,960
kubernetes introduces specific types

00:05:58,389 --> 00:06:04,780
called config map and secret which help

00:06:01,960 --> 00:06:07,090
you manage that configuration in a way

00:06:04,780 --> 00:06:10,840
that's still declarative and can still

00:06:07,090 --> 00:06:13,240
be source controlled so on the picture

00:06:10,840 --> 00:06:16,360
this is sort of representing what's

00:06:13,240 --> 00:06:18,580
called a kubernetes pod kubernetes runs

00:06:16,360 --> 00:06:22,210
containers one or more containers in the

00:06:18,580 --> 00:06:24,010
pod and then mounts those volumes that

00:06:22,210 --> 00:06:26,889
storage into the pod itself

00:06:24,010 --> 00:06:30,010
I can use a config map and I can use a

00:06:26,889 --> 00:06:32,020
secret to manage configuration outside

00:06:30,010 --> 00:06:34,419
of the pod outside of the code base and

00:06:32,020 --> 00:06:36,250
so my config maps or secrets for

00:06:34,419 --> 00:06:37,780
production environments versus

00:06:36,250 --> 00:06:39,240
development environments can be

00:06:37,780 --> 00:06:42,039
different

00:06:39,240 --> 00:06:45,810
services also become an important aspect

00:06:42,039 --> 00:06:49,569
of exposing everything in my system

00:06:45,810 --> 00:06:53,550
every service through port binding so a

00:06:49,569 --> 00:06:57,490
port binding lets me get out of really

00:06:53,550 --> 00:07:00,039
what's the way to think about this so if

00:06:57,490 --> 00:07:02,409
I use a port binding it gives me a very

00:07:00,039 --> 00:07:05,409
simple way of exposing any service in

00:07:02,409 --> 00:07:07,150
the system on a port and as I wrap that

00:07:05,409 --> 00:07:09,759
service in a container it means I can

00:07:07,150 --> 00:07:13,210
actually have multiple versions of that

00:07:09,759 --> 00:07:15,939
service running side-by-side believing

00:07:13,210 --> 00:07:17,199
that they're using the same port what

00:07:15,939 --> 00:07:19,659
we're doing is we're using network

00:07:17,199 --> 00:07:22,029
namespaces in the container to isolate

00:07:19,659 --> 00:07:23,560
its networking layer and that becomes a

00:07:22,029 --> 00:07:26,860
very powerful principle if you were to

00:07:23,560 --> 00:07:29,469
test multiple versions side-by-side in

00:07:26,860 --> 00:07:32,860
the same environment it also allows us

00:07:29,469 --> 00:07:35,889
to represent the pods the containers

00:07:32,860 --> 00:07:38,289
using the Linux process model which has

00:07:35,889 --> 00:07:41,319
a lot of efficiencies for scheduling and

00:07:38,289 --> 00:07:44,409
allows us to treat pods as things which

00:07:41,319 --> 00:07:47,710
are disposable meaning that if they fail

00:07:44,409 --> 00:07:53,169
it's okay I can recover them and start

00:07:47,710 --> 00:07:55,360
new pods so the operate factor is then

00:07:53,169 --> 00:07:58,150
become sort of the next grouping right

00:07:55,360 --> 00:08:00,669
so we've talked about code factors how I

00:07:58,150 --> 00:08:02,949
write code how I manage code we've

00:08:00,669 --> 00:08:05,080
talked about deploy factors how I

00:08:02,949 --> 00:08:07,449
actually get that code into a running

00:08:05,080 --> 00:08:11,860
environment and now the third group of

00:08:07,449 --> 00:08:14,529
the basics is how I operate now the key

00:08:11,860 --> 00:08:17,110
thing here is what you're seeing in this

00:08:14,529 --> 00:08:19,270
picture is it's changing from one state

00:08:17,110 --> 00:08:21,129
to another and it's demonstrating a

00:08:19,270 --> 00:08:24,129
deployment which is a crew brunet ease

00:08:21,129 --> 00:08:27,370
controller and API object using a

00:08:24,129 --> 00:08:29,349
replica set to add or remove pods and

00:08:27,370 --> 00:08:33,130
what's powerful is that I can simply

00:08:29,349 --> 00:08:35,860
change the text of my deployment apply

00:08:33,130 --> 00:08:39,099
that text maybe as a developer from my

00:08:35,860 --> 00:08:41,260
command line or as a developer using a

00:08:39,099 --> 00:08:46,390
continuous delivery pipeline as part of

00:08:41,260 --> 00:08:49,980
an automated ongoing process concurrency

00:08:46,390 --> 00:08:52,839
also becomes a really powerful way to

00:08:49,980 --> 00:08:55,690
really take on and establish more

00:08:52,839 --> 00:08:58,990
capacity more subscribers more users

00:08:55,690 --> 00:09:02,320
more transactions and I can use the

00:08:58,990 --> 00:09:04,960
built in Auto scalars also part of the

00:09:02,320 --> 00:09:08,020
foundation and kubernetes to add or

00:09:04,960 --> 00:09:11,260
remove pods dynamically and again I can

00:09:08,020 --> 00:09:12,850
describe in a declarative way the

00:09:11,260 --> 00:09:17,020
policies and the descriptions that I

00:09:12,850 --> 00:09:20,490
want and the horizontal autoscaler will

00:09:17,020 --> 00:09:23,230
add additional pods the vertical

00:09:20,490 --> 00:09:25,990
autoscaler simply makes those pods

00:09:23,230 --> 00:09:27,820
bigger it adds more memory more CPU it

00:09:25,990 --> 00:09:30,970
allows them to use more of the compute

00:09:27,820 --> 00:09:33,310
infrastructure so what I want to do now

00:09:30,970 --> 00:09:34,870
is hand it over to Shikha and she's

00:09:33,310 --> 00:09:36,610
gonna take you through the next part of

00:09:34,870 --> 00:09:38,290
this journey we've laid down the

00:09:36,610 --> 00:09:40,630
foundation around twelve factor ops

00:09:38,290 --> 00:09:46,180
let's talk about what you need beyond

00:09:40,630 --> 00:09:48,339
that thanks Michael so as Michael

00:09:46,180 --> 00:09:50,620
mentioned we work at IBM and we are

00:09:48,339 --> 00:09:53,650
creating these services on kubernetes

00:09:50,620 --> 00:09:55,570
who run incumbent kubernetes and as we

00:09:53,650 --> 00:09:58,209
were looking at all our services we

00:09:55,570 --> 00:09:59,890
wanted to standardize some principles of

00:09:58,209 --> 00:10:02,650
some design principles each of the

00:09:59,890 --> 00:10:05,170
services follow so twelve factors were

00:10:02,650 --> 00:10:07,900
very handy map to kubernetes were

00:10:05,170 --> 00:10:12,640
following but then we figured that these

00:10:07,900 --> 00:10:18,370
are others seven factors am i echoing am

00:10:12,640 --> 00:10:21,220
i echoing these are additional factors

00:10:18,370 --> 00:10:25,720
which unconsciously we are applying to

00:10:21,220 --> 00:10:27,010
every service because we need to get

00:10:25,720 --> 00:10:29,260
these services running in production

00:10:27,010 --> 00:10:32,290
environment and these are very critical

00:10:29,260 --> 00:10:34,890
for running any of the services in a

00:10:32,290 --> 00:10:37,720
production environment in an enterprise

00:10:34,890 --> 00:10:41,320
organization so that's where these

00:10:37,720 --> 00:10:42,850
originated and this were as a matter of

00:10:41,320 --> 00:10:44,860
fact we were writing down all the

00:10:42,850 --> 00:10:47,620
principles all the guidelines for the

00:10:44,860 --> 00:10:51,130
services and these stood out did not map

00:10:47,620 --> 00:10:53,950
to the existing 12 factors so Michael

00:10:51,130 --> 00:10:56,110
and I got together and categorized this

00:10:53,950 --> 00:10:58,600
as seven missing factors that we need to

00:10:56,110 --> 00:11:00,950
take care of in any services that we

00:10:58,600 --> 00:11:02,990
create in IBM

00:11:00,950 --> 00:11:07,130
and of course it's good to share with

00:11:02,990 --> 00:11:09,139
rest of all you two I want to go through

00:11:07,130 --> 00:11:17,029
here in detail because there's light for

00:11:09,139 --> 00:11:20,389
each one of them observability in a

00:11:17,029 --> 00:11:22,519
distributed environment it's really hard

00:11:20,389 --> 00:11:24,019
to manage and make sure every piece is

00:11:22,519 --> 00:11:26,120
running properly because it's

00:11:24,019 --> 00:11:29,750
distributed there are multiple moving

00:11:26,120 --> 00:11:31,310
parts moving at the same time anything

00:11:29,750 --> 00:11:34,459
can go around impacting the other

00:11:31,310 --> 00:11:38,060
service think about 100 micro services

00:11:34,459 --> 00:11:40,850
and one goes wrong and the it's empathic

00:11:38,060 --> 00:11:43,820
impacting 99 or ten other micro service

00:11:40,850 --> 00:11:45,470
so you really need something inbuilt to

00:11:43,820 --> 00:11:49,820
make sure their services or your apps

00:11:45,470 --> 00:11:51,920
are resilient kubernetes has some

00:11:49,820 --> 00:11:53,839
features and accepted us to take

00:11:51,920 --> 00:11:56,750
advantage of it

00:11:53,839 --> 00:11:58,699
readiness probe is a great one to make

00:11:56,750 --> 00:12:01,880
sure that you have it in each of your

00:11:58,699 --> 00:12:03,860
micro service or each of your pods and

00:12:01,880 --> 00:12:06,769
that really helps make your system

00:12:03,860 --> 00:12:10,610
resilient as you can see in that

00:12:06,769 --> 00:12:13,310
animated chip each of the pod or each of

00:12:10,610 --> 00:12:15,589
the micro service you can check for the

00:12:13,310 --> 00:12:18,529
readiness of readiness of all your

00:12:15,589 --> 00:12:20,600
dependent or your dependencies and of

00:12:18,529 --> 00:12:23,600
all your dependencies are ready then

00:12:20,600 --> 00:12:26,870
your part is ready the way kubernetes

00:12:23,600 --> 00:12:29,300
uses it is it only sends the traffic to

00:12:26,870 --> 00:12:32,420
your pod if it finds out that your pod

00:12:29,300 --> 00:12:36,440
is responding success to the readiness

00:12:32,420 --> 00:12:39,320
probe so think about like the front end

00:12:36,440 --> 00:12:42,279
dependent on a database and a Bismarck

00:12:39,320 --> 00:12:44,720
micro service you want to check in your

00:12:42,279 --> 00:12:48,949
front-end micro service that your biz

00:12:44,720 --> 00:12:51,380
logic is responding and your database is

00:12:48,949 --> 00:12:55,310
responding and ready as well so that's

00:12:51,380 --> 00:12:58,550
kind of checking one other thing that

00:12:55,310 --> 00:13:02,269
we're using this readiness probe heavily

00:12:58,550 --> 00:13:06,019
now for is as your dependencies change

00:13:02,269 --> 00:13:09,319
their versions API versions we want to

00:13:06,019 --> 00:13:12,199
make sure that my micro service that is

00:13:09,319 --> 00:13:12,980
dependent on other services does have

00:13:12,199 --> 00:13:15,500
API to

00:13:12,980 --> 00:13:18,829
raishin and that's what I check on the

00:13:15,500 --> 00:13:21,230
in the readiness probe as well to make

00:13:18,829 --> 00:13:24,550
sure I have the right api's of the

00:13:21,230 --> 00:13:29,360
dependencies in the system before I can

00:13:24,550 --> 00:13:33,920
respond to the traffic liveliness probe

00:13:29,360 --> 00:13:35,990
it's there to kubernetes checks for the

00:13:33,920 --> 00:13:38,750
liveliness probe and if it's not live

00:13:35,990 --> 00:13:41,990
it actually dis replaces the pod so it's

00:13:38,750 --> 00:13:45,410
very important to make sure that initial

00:13:41,990 --> 00:13:47,360
delay ii is set right because if your

00:13:45,410 --> 00:13:50,329
initial delay ii is less than your

00:13:47,360 --> 00:13:52,070
application boot time guess it gets into

00:13:50,329 --> 00:13:54,470
the the cyclic nature and your

00:13:52,070 --> 00:13:58,089
application will have a hard time coming

00:13:54,470 --> 00:14:02,720
up so something there to keep in mind

00:13:58,089 --> 00:14:04,430
well is this enough my application for

00:14:02,720 --> 00:14:07,040
example the front-end application that i

00:14:04,430 --> 00:14:08,690
described it's dependent on its

00:14:07,040 --> 00:14:10,850
accepting traffic it's doing some

00:14:08,690 --> 00:14:12,889
transactions so i might be interested

00:14:10,850 --> 00:14:15,500
interested in transaction per second

00:14:12,889 --> 00:14:17,540
that's not something that urban areas

00:14:15,500 --> 00:14:20,029
gives out of the box as part of the

00:14:17,540 --> 00:14:23,149
health check so I can introduce my own

00:14:20,029 --> 00:14:25,550
metrics I can have my node my custom

00:14:23,149 --> 00:14:27,889
metric introduced I can have an exporter

00:14:25,550 --> 00:14:31,250
for it collected in Prometheus have a

00:14:27,889 --> 00:14:33,980
refiner dashboard so that's what you can

00:14:31,250 --> 00:14:37,190
use if you have Prometheus and Griffin

00:14:33,980 --> 00:14:40,699
now as a monitoring system in in your

00:14:37,190 --> 00:14:43,430
kubernetes environment in the cloud

00:14:40,699 --> 00:14:46,699
provider that we have at IBM we do have

00:14:43,430 --> 00:14:48,529
the Griffin and Prometheus as our

00:14:46,699 --> 00:14:51,440
monitoring out-of-the-box monitoring

00:14:48,529 --> 00:14:53,329
solution and to help with this last use

00:14:51,440 --> 00:14:55,639
case what we have done is we have

00:14:53,329 --> 00:14:58,040
created CR DS for the graph on our

00:14:55,639 --> 00:15:00,560
dashboards so in production if you're an

00:14:58,040 --> 00:15:03,490
operator and you find out that you

00:15:00,560 --> 00:15:07,160
really want few of these metrics to be

00:15:03,490 --> 00:15:09,769
monitored for this Mitch this 3 mission

00:15:07,160 --> 00:15:11,500
critical application no problem you can

00:15:09,769 --> 00:15:14,680
introduce your own graph on a dashboard

00:15:11,500 --> 00:15:17,199
and make sure that you can set all the

00:15:14,680 --> 00:15:20,410
thresholds and everything that you need

00:15:17,199 --> 00:15:20,410
all right

00:15:20,540 --> 00:15:27,540
okay schedule ability this is also not

00:15:25,170 --> 00:15:29,730
covered as part of the 12 factors that

00:15:27,540 --> 00:15:33,390
we could see and here's a good example

00:15:29,730 --> 00:15:37,770
to consider when you are thinking about

00:15:33,390 --> 00:15:39,600
this you your organization creates

00:15:37,770 --> 00:15:42,860
kubernetes wants to venture into

00:15:39,600 --> 00:15:45,029
kubernetes and sets up the kubernetes

00:15:42,860 --> 00:15:47,250
environment and you are the first team

00:15:45,029 --> 00:15:50,190
to pioneer an application that runs in

00:15:47,250 --> 00:15:52,980
kubernetes it comes up well coded well

00:15:50,190 --> 00:15:55,860
it's running up and running everything

00:15:52,980 --> 00:15:58,290
is awesome performance is great and

00:15:55,860 --> 00:15:59,070
another team comes in and starts to

00:15:58,290 --> 00:16:00,899
experiment

00:15:59,070 --> 00:16:03,270
they also come up with their their

00:16:00,899 --> 00:16:06,870
application application be it's working

00:16:03,270 --> 00:16:08,580
well but slowly your performance your

00:16:06,870 --> 00:16:12,800
application performance starts going

00:16:08,580 --> 00:16:15,300
down the first thing to check is do your

00:16:12,800 --> 00:16:16,890
pods or your containers have the

00:16:15,300 --> 00:16:19,380
resources that it needs the compute

00:16:16,890 --> 00:16:21,480
resources it needs that's the first

00:16:19,380 --> 00:16:25,410
place to check because what kubernetes

00:16:21,480 --> 00:16:27,300
does is if your containers do not have

00:16:25,410 --> 00:16:30,120
the request and the limits to find

00:16:27,300 --> 00:16:32,190
requests for the CPU and the memory and

00:16:30,120 --> 00:16:33,450
limits for the city of memory defined

00:16:32,190 --> 00:16:36,060
for the compute resources

00:16:33,450 --> 00:16:39,180
it just forwards it to somebody else and

00:16:36,060 --> 00:16:42,720
your your application will get start so

00:16:39,180 --> 00:16:45,620
that's where it comes to define the

00:16:42,720 --> 00:16:48,839
resource compute resources for your pots

00:16:45,620 --> 00:16:50,459
another neat thing is if your non-

00:16:48,839 --> 00:16:52,650
traitor and you're setting up your

00:16:50,459 --> 00:16:55,850
kubernetes environment and you're having

00:16:52,650 --> 00:16:59,310
different namespaces for different dev

00:16:55,850 --> 00:17:02,390
staging and production you may you might

00:16:59,310 --> 00:17:05,760
want to allocate the resource for it

00:17:02,390 --> 00:17:07,500
it's just not only the CPU limit and the

00:17:05,760 --> 00:17:09,510
memory limit you can define as a

00:17:07,500 --> 00:17:11,490
resource quotas you can also define

00:17:09,510 --> 00:17:13,920
number of thoughts persist in volume

00:17:11,490 --> 00:17:17,250
claims so and so forth so that really

00:17:13,920 --> 00:17:20,760
helps make sure your environment is set

00:17:17,250 --> 00:17:22,020
up right and really useful useful in

00:17:20,760 --> 00:17:24,959
production environment if you're

00:17:22,020 --> 00:17:26,429
thinking that you're an operator and

00:17:24,959 --> 00:17:28,710
you're thinking that you're going to set

00:17:26,429 --> 00:17:29,980
this environment and have your multiple

00:17:28,710 --> 00:17:35,260
teams work

00:17:29,980 --> 00:17:39,130
in the same cluster all right let's go

00:17:35,260 --> 00:17:42,190
to upgradability when applications are

00:17:39,130 --> 00:17:45,820
running in production there is always

00:17:42,190 --> 00:17:47,440
security enhancements feature

00:17:45,820 --> 00:17:49,990
enhancements that we have to put in that

00:17:47,440 --> 00:17:52,240
are that are required to be backwards

00:17:49,990 --> 00:17:54,280
compatible it's not just that it's a new

00:17:52,240 --> 00:17:57,490
version of the application but it fixes

00:17:54,280 --> 00:17:59,710
that you apply to the application that's

00:17:57,490 --> 00:18:03,780
where the rolling of grades is very

00:17:59,710 --> 00:18:06,670
handy what that does is kubernetes

00:18:03,780 --> 00:18:09,030
provides a really great way of as shown

00:18:06,670 --> 00:18:12,790
in the animation here you can introduce

00:18:09,030 --> 00:18:16,660
version 2 of your deployment your pod

00:18:12,790 --> 00:18:18,250
comes up and slowly the kubernetes will

00:18:16,660 --> 00:18:21,430
take the service when the whole

00:18:18,250 --> 00:18:25,420
application is up your service will

00:18:21,430 --> 00:18:30,060
point to the new version 2 of your

00:18:25,420 --> 00:18:33,940
application we find this very handy for

00:18:30,060 --> 00:18:36,220
for applications that need fixes on

00:18:33,940 --> 00:18:38,740
regular basis for security for feature

00:18:36,220 --> 00:18:42,210
enhancement for any other fixes that you

00:18:38,740 --> 00:18:42,210
can think of that goes in the production

00:18:42,240 --> 00:18:49,150
couple of things to keep in mind it's I

00:18:46,320 --> 00:18:52,180
did not find it in the kubernetes dock

00:18:49,150 --> 00:18:55,210
but it's important that the Mac search

00:18:52,180 --> 00:18:57,730
is defined Mac search is one additional

00:18:55,210 --> 00:18:59,620
pod that you that you want to be

00:18:57,730 --> 00:19:01,750
available besides the number of replicas

00:18:59,620 --> 00:19:03,280
said that you have set up it's an

00:19:01,750 --> 00:19:07,420
important one to define there otherwise

00:19:03,280 --> 00:19:09,520
you your kubernetes might take away you

00:19:07,420 --> 00:19:11,560
know the less it might make less number

00:19:09,520 --> 00:19:13,660
of parts available for you that's an

00:19:11,560 --> 00:19:15,670
important variable to set max

00:19:13,660 --> 00:19:17,950
unavailable is the number of pods you

00:19:15,670 --> 00:19:19,300
want to be unavailable at any point of

00:19:17,950 --> 00:19:21,240
time when the rolling upgrades has

00:19:19,300 --> 00:19:27,070
happen

00:19:21,240 --> 00:19:31,810
all right least privilege Michel touched

00:19:27,070 --> 00:19:34,900
on the how you create your containers in

00:19:31,810 --> 00:19:37,720
a trusted image from the source cetera

00:19:34,900 --> 00:19:39,520
this is additional these are some

00:19:37,720 --> 00:19:41,650
additional things to keep in mind when

00:19:39,520 --> 00:19:41,870
you are when you have the containers up

00:19:41,650 --> 00:19:46,370
in

00:19:41,870 --> 00:19:49,430
running you want your containers to have

00:19:46,370 --> 00:19:51,890
as minimal privileges as possible

00:19:49,430 --> 00:19:58,520
because any additional privilege is a

00:19:51,890 --> 00:20:01,460
source of attack there is a port port

00:19:58,520 --> 00:20:05,690
security policy in kubernetes that you

00:20:01,460 --> 00:20:07,550
can use for limiting or restricting any

00:20:05,690 --> 00:20:09,490
actions that see that you can allow your

00:20:07,550 --> 00:20:12,820
containers to have in your environment

00:20:09,490 --> 00:20:15,830
access to the hosts access to the file

00:20:12,820 --> 00:20:17,920
access to the type of volume etc so

00:20:15,830 --> 00:20:21,590
that's another thing we find it useful

00:20:17,920 --> 00:20:24,020
we also have when you create namespace

00:20:21,590 --> 00:20:26,860
in the cloud provider that we have when

00:20:24,020 --> 00:20:29,480
you create namespace you can also tell

00:20:26,860 --> 00:20:31,850
kubernetes what kind of ports are secure

00:20:29,480 --> 00:20:33,679
do you want to apply and that gets

00:20:31,850 --> 00:20:40,760
applied to all the pods running in that

00:20:33,679 --> 00:20:43,309
namespace auditable when you are working

00:20:40,760 --> 00:20:46,220
in production environment

00:20:43,309 --> 00:20:48,650
an enterprise where maybe you are

00:20:46,220 --> 00:20:51,370
allowing credit transactions to happen

00:20:48,650 --> 00:20:55,730
you definitely want each and every

00:20:51,370 --> 00:20:57,590
critical create update delete operations

00:20:55,730 --> 00:20:58,880
to be locked because you never know when

00:20:57,590 --> 00:21:00,920
you have to go back and do the

00:20:58,880 --> 00:21:03,710
post-mortem with all the audits that you

00:21:00,920 --> 00:21:06,620
have taken account of or you may have to

00:21:03,710 --> 00:21:10,550
figure out you know who's you know who's

00:21:06,620 --> 00:21:13,540
violating or who's not doing the right

00:21:10,550 --> 00:21:15,850
actions so that's important from the

00:21:13,540 --> 00:21:21,110
from the production or enterprise

00:21:15,850 --> 00:21:24,640
application or setup point of view we we

00:21:21,110 --> 00:21:28,670
follow the care of open source format

00:21:24,640 --> 00:21:31,790
which helps log each and every detail

00:21:28,670 --> 00:21:35,150
which is initiator ID who is starting

00:21:31,790 --> 00:21:38,750
the operation target fury which is what

00:21:35,150 --> 00:21:41,000
specific target is getting operated on

00:21:38,750 --> 00:21:44,230
and the action the action along with the

00:21:41,000 --> 00:21:47,600
resource type that's getting looked at

00:21:44,230 --> 00:21:50,540
so that's the another one is an

00:21:47,600 --> 00:21:54,160
important one to have as a factor of

00:21:50,540 --> 00:21:54,160
when you're creating your application

00:21:54,580 --> 00:22:03,530
access controls so this whole topic can

00:21:59,330 --> 00:22:05,900
be session by itself or can be a session

00:22:03,530 --> 00:22:07,549
for the whole day there is several

00:22:05,900 --> 00:22:08,840
aspect for your application when it's

00:22:07,549 --> 00:22:13,790
running really at the enterprise scale

00:22:08,840 --> 00:22:15,920
to make sure that it is secure it's has

00:22:13,790 --> 00:22:19,809
the right attend occasionally zation

00:22:15,920 --> 00:22:23,480
when a user accesses your application

00:22:19,809 --> 00:22:25,610
network policies security policies it

00:22:23,480 --> 00:22:27,169
has the right level of network policies

00:22:25,610 --> 00:22:29,270
and security policies applied it's

00:22:27,169 --> 00:22:31,820
running in an environment where it has

00:22:29,270 --> 00:22:35,840
the right to level of policies for

00:22:31,820 --> 00:22:37,820
example the policies could be who is

00:22:35,840 --> 00:22:39,200
changing the configuration of my

00:22:37,820 --> 00:22:41,210
application you might want to put a

00:22:39,200 --> 00:22:42,970
policy in place to allow only operators

00:22:41,210 --> 00:22:45,380
and administrator to change the

00:22:42,970 --> 00:22:47,480
configuration of an application that's

00:22:45,380 --> 00:22:49,070
an important one to consider when you

00:22:47,480 --> 00:22:53,929
are putting your application in

00:22:49,070 --> 00:22:59,960
production so I won't go through this in

00:22:53,929 --> 00:23:02,750
detail we certificate management this is

00:22:59,960 --> 00:23:04,960
part of the previous factor any

00:23:02,750 --> 00:23:10,100
communication between the part to pod

00:23:04,960 --> 00:23:12,650
should be should be through TLS if you

00:23:10,100 --> 00:23:14,809
are letting your front-end to be

00:23:12,650 --> 00:23:17,000
accessed from the browser then if there

00:23:14,809 --> 00:23:19,790
should be a certificate established

00:23:17,000 --> 00:23:22,820
that's going to this one in the cloud

00:23:19,790 --> 00:23:26,480
provider that we have we use OpenStack

00:23:22,820 --> 00:23:27,110
as our cert manager it's an open source

00:23:26,480 --> 00:23:29,360
project

00:23:27,110 --> 00:23:31,580
we use that to make sure that we can

00:23:29,360 --> 00:23:33,830
have this certificate manager we can

00:23:31,580 --> 00:23:35,720
have the certificate in rotation we can

00:23:33,830 --> 00:23:37,580
renew the certificate and everything

00:23:35,720 --> 00:23:39,650
that goes with to make sure any

00:23:37,580 --> 00:23:42,190
communication between - between the paws

00:23:39,650 --> 00:23:47,950
or between the services or browser -

00:23:42,190 --> 00:23:51,220
application is all done right and that

00:23:47,950 --> 00:23:54,200
that's the last factor I believe

00:23:51,220 --> 00:23:56,750
ultimately whatever you set up in your

00:23:54,200 --> 00:24:01,280
kubernetes environment somebody has to

00:23:56,750 --> 00:24:03,520
pay for it so make sure that your

00:24:01,280 --> 00:24:05,040
application has a way

00:24:03,520 --> 00:24:08,290
based on however your cloud provider

00:24:05,040 --> 00:24:11,340
provides the mechanism so that it's

00:24:08,290 --> 00:24:15,370
measurable they you know how much

00:24:11,340 --> 00:24:18,450
resources you are consuming from the

00:24:15,370 --> 00:24:24,060
kubernetes environment that's the last

00:24:18,450 --> 00:24:27,310
factor I believe we have the next slide

00:24:24,060 --> 00:24:30,910
so what really makes a production ready

00:24:27,310 --> 00:24:35,500
app ready there's three things that we

00:24:30,910 --> 00:24:38,500
touched on if you our twelve plus seven

00:24:35,500 --> 00:24:40,510
factors goes through or is covered in

00:24:38,500 --> 00:24:41,770
each in it it's one of the other

00:24:40,510 --> 00:24:44,580
categories here

00:24:41,770 --> 00:24:49,000
how are you building the containers

00:24:44,580 --> 00:24:52,720
trusted small image how you are

00:24:49,000 --> 00:24:54,400
configuring the kubernetes configuring

00:24:52,720 --> 00:24:57,130
the oak kubernetes to post your

00:24:54,400 --> 00:24:59,680
containers that's the second one and

00:24:57,130 --> 00:25:01,570
then finally the cloud provider you're

00:24:59,680 --> 00:25:05,620
using the cloud provider is providing

00:25:01,570 --> 00:25:09,910
all the capabilities you need to run

00:25:05,620 --> 00:25:12,160
your application in production alright

00:25:09,910 --> 00:25:15,000
so we do the demo first or you want to

00:25:12,160 --> 00:25:19,050
talk about the lights like force okay

00:25:15,000 --> 00:25:19,050
let's do the demo first and

00:25:25,570 --> 00:25:36,879
so we do have alright reusing Michael's

00:25:33,070 --> 00:25:39,519
temper laptop here for the demo so what

00:25:36,879 --> 00:25:41,710
we did here so there's a lot of topics

00:25:39,519 --> 00:25:44,710
we touched on I'm not sure if we can

00:25:41,710 --> 00:25:47,769
demo all the aspects of it what we

00:25:44,710 --> 00:25:49,899
thought we could demo is creating

00:25:47,769 --> 00:25:52,749
resource we have already created the

00:25:49,899 --> 00:25:55,659
resource here with three replicas sets

00:25:52,749 --> 00:26:00,429
so we'll bring that here and let's see

00:25:55,659 --> 00:26:01,899
if it's running okay we still have the

00:26:00,429 --> 00:26:05,109
problem it's not coming up yet

00:26:01,899 --> 00:26:09,009
but we have the nginx demo system in the

00:26:05,109 --> 00:26:13,509
next demo resource created what I wanted

00:26:09,009 --> 00:26:18,970
to show here is as we created the - for

00:26:13,509 --> 00:26:20,919
limits show here get cube CTL let me

00:26:18,970 --> 00:26:24,929
take a step back and tell you exactly

00:26:20,919 --> 00:26:24,929
what we are trying to demo here first

00:26:32,010 --> 00:26:36,649
and it was in the default namespace I

00:26:34,350 --> 00:26:36,649
think

00:26:42,500 --> 00:26:50,679
okay I'll try one more time I think it

00:26:45,500 --> 00:26:50,679
was many missing default step

00:26:51,429 --> 00:26:55,840
what we're trying to demo in here is

00:26:53,260 --> 00:26:58,150
maybe if I look here better then I can

00:26:55,840 --> 00:26:59,650
my eyes are not that great what we're

00:26:58,150 --> 00:27:03,250
trying to demo here is we create the

00:26:59,650 --> 00:27:06,580
resource I as a production environment

00:27:03,250 --> 00:27:08,740
operator wants to create new dashboards

00:27:06,580 --> 00:27:10,650
what we have provided in our environment

00:27:08,740 --> 00:27:13,840
or in cloud provider is you can create

00:27:10,650 --> 00:27:15,670
we have Griffin RCR DS so you can create

00:27:13,840 --> 00:27:18,309
create that refine our dashboards on the

00:27:15,670 --> 00:27:22,750
fly and that's what I wanted to show

00:27:18,309 --> 00:27:25,330
here we also have the jet stack way of

00:27:22,750 --> 00:27:28,510
death stack open source project to do

00:27:25,330 --> 00:27:30,820
the mute establish the mutual TLS or

00:27:28,510 --> 00:27:32,260
Taylor's between the services and we

00:27:30,820 --> 00:27:36,000
were going to show that as part of this

00:27:32,260 --> 00:27:36,000
one as well so

00:27:46,370 --> 00:27:52,720
I'll pull up and you maybe let's talk to

00:27:49,370 --> 00:27:59,650
you okay let's talk to the Ameth first

00:27:52,720 --> 00:28:04,610
so in the mo5 it's we're creating the

00:27:59,650 --> 00:28:06,350
regaling nginx resource the important

00:28:04,610 --> 00:28:09,860
things that we talked about the number

00:28:06,350 --> 00:28:13,220
of replicas we have three then the type

00:28:09,860 --> 00:28:14,419
is rolling update and the two fields

00:28:13,220 --> 00:28:16,520
that are two parameters that are

00:28:14,419 --> 00:28:19,190
important is maximum surge in maximum

00:28:16,520 --> 00:28:21,980
unavailable never set that to zero

00:28:19,190 --> 00:28:25,070
because the hotel kubernetes that you

00:28:21,980 --> 00:28:30,760
can have maximum money unavailable at

00:28:25,070 --> 00:28:33,260
zero or maximum additional as zero and

00:28:30,760 --> 00:28:35,470
then the liveliness and readiness probe

00:28:33,260 --> 00:28:41,690
that we talked about there are three

00:28:35,470 --> 00:28:43,039
protocols TCP command line and TCP

00:28:41,690 --> 00:28:45,919
command line and there's one more I

00:28:43,039 --> 00:28:48,350
forget but those two you can apply to

00:28:45,919 --> 00:28:50,990
check for the readiness and the

00:28:48,350 --> 00:28:52,929
liveliness of your probe but is

00:28:50,990 --> 00:28:56,659
important that's what you use for

00:28:52,929 --> 00:28:59,360
enabling or we're enabling or putting

00:28:56,659 --> 00:29:01,100
down all your health checks where you're

00:28:59,360 --> 00:29:04,909
checking or for your dependencies if

00:29:01,100 --> 00:29:08,419
your dependencies already or not part is

00:29:04,909 --> 00:29:13,370
less redness and then here is the

00:29:08,419 --> 00:29:16,490
important one where when you are doing

00:29:13,370 --> 00:29:18,010
your TLS setup or your making sure all

00:29:16,490 --> 00:29:20,120
your communication is through

00:29:18,010 --> 00:29:22,820
certificate you want to make sure that

00:29:20,120 --> 00:29:24,559
you have your certificate authority in

00:29:22,820 --> 00:29:26,840
place you have your certificate

00:29:24,559 --> 00:29:29,600
authority in place you have issuer in

00:29:26,840 --> 00:29:32,840
place your registered your certificate

00:29:29,600 --> 00:29:35,899
to the certificate manager and you do

00:29:32,840 --> 00:29:37,880
have your certificate mounted to get you

00:29:35,899 --> 00:29:43,010
the secrets and you apply your secrets

00:29:37,880 --> 00:29:46,100
you use your secrets in your custom

00:29:43,010 --> 00:29:48,200
resource so so right here at the bottom

00:29:46,100 --> 00:29:50,090
is your secret name that's where I'm

00:29:48,200 --> 00:29:52,330
getting this search from demo one engine

00:29:50,090 --> 00:29:56,440
excerpt that's the secret name where the

00:29:52,330 --> 00:30:01,810
certificate is available I get that

00:29:56,440 --> 00:30:10,060
Fickett and then I can do my secure

00:30:01,810 --> 00:30:11,830
communication to the service where is

00:30:10,060 --> 00:30:14,950
okay so that's the one certificate is

00:30:11,830 --> 00:30:16,780
defined in the secret I think I touched

00:30:14,950 --> 00:30:19,480
that one the certificate is defined in I

00:30:16,780 --> 00:30:23,290
actresses through the secret and it's

00:30:19,480 --> 00:30:25,120
going to add anything oh yes

00:30:23,290 --> 00:30:28,540
so just like we have been F on our

00:30:25,120 --> 00:30:30,700
dashboard as the CRTs we talked about we

00:30:28,540 --> 00:30:32,320
any custom resources we are bringing in

00:30:30,700 --> 00:30:33,790
or any new resources that we are

00:30:32,320 --> 00:30:36,640
bringing in so that applications can

00:30:33,790 --> 00:30:40,260
take advantage of is all through CR DS

00:30:36,640 --> 00:30:42,700
so Griffin our dashboard is a CRT

00:30:40,260 --> 00:30:45,220
certificates is through CRT you can see

00:30:42,700 --> 00:30:48,400
all the you can introduce your own CR

00:30:45,220 --> 00:30:50,320
for that CRT and that's that's the

00:30:48,400 --> 00:30:53,290
certificate certificate is in the same

00:30:50,320 --> 00:30:56,290
boat we have alerts are no truths as the

00:30:53,290 --> 00:31:00,840
CR DS as well so any new resources that

00:30:56,290 --> 00:31:03,590
we are introducing is as is a CRT

00:31:00,840 --> 00:31:07,460
alright

00:31:03,590 --> 00:31:09,830
yes so that's the dashboard 42 minutes

00:31:07,460 --> 00:31:14,480
that's the dashboard we created right

00:31:09,830 --> 00:31:17,210
before we started the session we created

00:31:14,480 --> 00:31:19,399
through the command line as a as a

00:31:17,210 --> 00:31:22,370
resource and that's the dashboard that's

00:31:19,399 --> 00:31:24,019
coming up which is few minutes packets

00:31:22,370 --> 00:31:25,789
collecting the memory for the

00:31:24,019 --> 00:31:28,360
application of nginx resource that I

00:31:25,789 --> 00:31:28,360
just created

00:31:31,149 --> 00:31:38,419
Ivan that's kind of I think you think we

00:31:36,769 --> 00:31:40,669
wanted to really kind of walk through is

00:31:38,419 --> 00:31:43,279
just showing all of these different

00:31:40,669 --> 00:31:45,080
characteristics from the 12 factors to

00:31:43,279 --> 00:31:47,269
the 7 missing factors or things that

00:31:45,080 --> 00:31:49,549
typically can be represented as source

00:31:47,269 --> 00:31:52,070
code and leveraging this powerful

00:31:49,549 --> 00:31:55,220
kubernetes program model to address all

00:31:52,070 --> 00:31:56,600
of these application needs in terms of

00:31:55,220 --> 00:31:59,929
some of the things I'll leave you with

00:31:56,600 --> 00:32:03,230
to think about just a quick highlight as

00:31:59,929 --> 00:32:04,639
we think about managing one cluster the

00:32:03,230 --> 00:32:06,710
next problem really becomes how do I

00:32:04,639 --> 00:32:07,879
manage many clusters so I'd invite you

00:32:06,710 --> 00:32:09,889
to take a look at some of the things

00:32:07,879 --> 00:32:12,320
we're doing with our multi cloud manager

00:32:09,889 --> 00:32:15,259
this actually brings a language to

00:32:12,320 --> 00:32:19,549
deploy and manage applications using the

00:32:15,259 --> 00:32:22,639
application sig CRT and then also brings

00:32:19,549 --> 00:32:25,279
a policy language to manage security

00:32:22,639 --> 00:32:27,289
while also providing visibility of the

00:32:25,279 --> 00:32:29,210
health of applications and the readiness

00:32:27,289 --> 00:32:32,149
of these clusters for compliance and

00:32:29,210 --> 00:32:34,639
then a few additional resources the

00:32:32,149 --> 00:32:37,399
three titles that you see here are

00:32:34,639 --> 00:32:40,369
articles on medium these kind of go into

00:32:37,399 --> 00:32:42,950
more detail the 12 factor base example

00:32:40,369 --> 00:32:45,200
this seven missing factor which has

00:32:42,950 --> 00:32:46,759
really been the core of this talk some

00:32:45,200 --> 00:32:49,220
additional guidance on readiness probes

00:32:46,759 --> 00:32:51,080
and myself and a few other folks from

00:32:49,220 --> 00:32:53,200
IBM co-authored a book around kubernetes

00:32:51,080 --> 00:32:55,610
just to highlight some of the

00:32:53,200 --> 00:32:57,919
introductions how to run applications

00:32:55,610 --> 00:32:59,779
how to run clusters and you can download

00:32:57,919 --> 00:33:02,389
a free copy from that link if you'd like

00:32:59,779 --> 00:33:05,090
and with that we're I think almost at

00:33:02,389 --> 00:33:06,740
time so maybe we'll take questions up

00:33:05,090 --> 00:33:10,220
here if there are any questions if you

00:33:06,740 --> 00:33:13,700
want to hang out and if I can gently

00:33:10,220 --> 00:33:15,440
maybe request if you're open to it I'd

00:33:13,700 --> 00:33:18,130
love to get a quick selfie before we

00:33:15,440 --> 00:33:20,660
close is that okay with everyone

00:33:18,130 --> 00:33:22,340
all right so check oh you want to jump

00:33:20,660 --> 00:33:24,020
in with me real quick yeah and maybe on

00:33:22,340 --> 00:33:30,429
the count of three if we can say

00:33:24,020 --> 00:33:38,720
kubernetes all right all right II our

00:33:30,429 --> 00:33:40,730
son kubernetes awesome thank you so much

00:33:38,720 --> 00:33:42,320
for obliging we'd love to talk to you

00:33:40,730 --> 00:33:43,610
more please feel free to reach out to us

00:33:42,320 --> 00:33:44,360
either on Twitter or come talk to us

00:33:43,610 --> 00:33:45,160
after the talk

00:33:44,360 --> 00:33:50,550
thank you

00:33:45,160 --> 00:33:50,550

YouTube URL: https://www.youtube.com/watch?v=ui-sXQlaQpg


