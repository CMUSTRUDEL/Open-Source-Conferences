Title: How SPIFFE Helps Istio in Service Mesh Federation - Yonggang Liu & Wencheng Lu, Google
Publication date: 2019-07-10
Playlist: Shanghai '19: KubeCon + CloudNativeCon + Open Source Summit
Description: 
	How SPIFFE Helps Istio in Service Mesh Federation - Yonggang Liu & Wencheng Lu, Google 

This proposal resolves the fundamental identity federation problem between different trust domains, using the trust domain and bundle standard proposed by SPIFFE. As an important collaborator of SPIFFE/SPIRE, Istio adopts this standard to support federations with SPIRE and other identity systems.    The newly proposed standard enables multiple service meshes to securely establish trusts for cross-mesh secure communications. In this talk, we will explain how this new standard can help on federated service meshes and how Istio supports the standard. Finally, we will demonstrate how the federation can be set up between Istio and SPIRE systems. 

https://sched.co/NrpL
Captions: 
	00:00:00,380 --> 00:00:08,490
hello everyone welcome to this session

00:00:03,560 --> 00:00:11,250
my name is wen Chen my colleague Oliver

00:00:08,490 --> 00:00:13,410
and I were talking about how spiffy

00:00:11,250 --> 00:00:18,270
helps you stay on your service match

00:00:13,410 --> 00:00:22,699
Federation today those of us have been

00:00:18,270 --> 00:00:27,289
working on easier since the starts and

00:00:22,699 --> 00:00:32,669
how many of you have heard of each do

00:00:27,289 --> 00:00:35,160
great and how about a spiffy wonderful

00:00:32,669 --> 00:00:37,290
I'm so glad to see that looks like

00:00:35,160 --> 00:00:39,600
popularity for both of them have

00:00:37,290 --> 00:00:43,920
increased quite rapidly over the past a

00:00:39,600 --> 00:00:48,180
year let me start with the lady the

00:00:43,920 --> 00:00:51,270
background introduction so SEO is mostly

00:00:48,180 --> 00:00:53,879
known as a surf smash to be most

00:00:51,270 --> 00:00:55,890
specific it's an over service platform

00:00:53,879 --> 00:00:59,390
to manage the service interactions

00:00:55,890 --> 00:01:04,110
across workloads running from everywhere

00:00:59,390 --> 00:01:06,750
kubernetes VM on purim public cloud it

00:01:04,110 --> 00:01:09,140
assaults three major problems for

00:01:06,750 --> 00:01:12,080
service communication first of

00:01:09,140 --> 00:01:14,250
visibility it provides your uniform

00:01:12,080 --> 00:01:16,200
visibility into what's happening to your

00:01:14,250 --> 00:01:19,140
service who is accessing your service

00:01:16,200 --> 00:01:22,220
was the latency words error rates which

00:01:19,140 --> 00:01:27,030
method is called and second operation

00:01:22,220 --> 00:01:30,509
operational agility instead as advanced

00:01:27,030 --> 00:01:33,090
loader balancing traffic shifting

00:01:30,509 --> 00:01:35,400
traffic shaping to help you manage the

00:01:33,090 --> 00:01:39,030
traffic easily and roll out a new

00:01:35,400 --> 00:01:41,729
version of service safely the third

00:01:39,030 --> 00:01:45,990
panelist is power Stevens securities

00:01:41,729 --> 00:01:48,869
they provide the Colorado policy allows

00:01:45,990 --> 00:01:52,590
you to describe your intent and easier

00:01:48,869 --> 00:01:55,409
enforce the desired security for you it

00:01:52,590 --> 00:01:58,200
has features like mutual chairs to

00:01:55,409 --> 00:01:59,909
encrypt data in transit also provides

00:01:58,200 --> 00:02:02,040
you cheaper protection against your

00:01:59,909 --> 00:02:04,740
service which refers to authentication

00:02:02,040 --> 00:02:06,659
or senegal hook it's access your service

00:02:04,740 --> 00:02:07,979
authorized allow you to conchagua to

00:02:06,659 --> 00:02:09,899
allow to access your service and

00:02:07,979 --> 00:02:13,099
audience so you know who access your

00:02:09,899 --> 00:02:13,099
service in order way

00:02:19,430 --> 00:02:24,099
next is about spiffy spiffy it's

00:02:22,400 --> 00:02:28,370
basically a set of open source standards

00:02:24,099 --> 00:02:30,260
that help you build secure production at

00:02:28,370 --> 00:02:34,159
any different work in a heterogeneous

00:02:30,260 --> 00:02:36,200
environment like is do like a VN cuban

00:02:34,159 --> 00:02:40,099
air is unplanned and adding environments

00:02:36,200 --> 00:02:45,049
and spiffy standards include two parts

00:02:40,099 --> 00:02:48,310
first as VI d that defines what is PV

00:02:45,049 --> 00:02:52,450
identity is and how speaker identity is

00:02:48,310 --> 00:02:56,290
presented in the x.509 certificate

00:02:52,450 --> 00:03:01,250
second apart is pvap IDEs that describes

00:02:56,290 --> 00:03:03,560
how to secure a provision spirit energy

00:03:01,250 --> 00:03:06,139
to each workload from a certificate

00:03:03,560 --> 00:03:07,939
authority and if you have before

00:03:06,139 --> 00:03:09,859
identities provision from different

00:03:07,939 --> 00:03:15,889
certificate authority how to repatriate

00:03:09,859 --> 00:03:18,680
them so they can talk to each other and

00:03:15,889 --> 00:03:21,980
what relationship between spiffy and sto

00:03:18,680 --> 00:03:25,669
so to hopefully this slide gives you a

00:03:21,980 --> 00:03:28,639
rough idea so Israel gives you a secure

00:03:25,669 --> 00:03:30,500
identity framework that provides Joan

00:03:28,639 --> 00:03:32,780
identities for service to service

00:03:30,500 --> 00:03:35,949
authentication and is still heavily

00:03:32,780 --> 00:03:42,949
leverages PV to purities identity

00:03:35,949 --> 00:03:46,340
framework first every easier Waclaw

00:03:42,949 --> 00:03:48,859
identity is also spe adenosine so

00:03:46,340 --> 00:03:53,030
basically the identity specifier in

00:03:48,859 --> 00:03:58,519
exponent form at following the species

00:03:53,030 --> 00:04:01,340
fallen s SPID standard we are also

00:03:58,519 --> 00:04:04,159
actively working on supporting specie

00:04:01,340 --> 00:04:08,049
federation api we will talk more about

00:04:04,159 --> 00:04:08,049
this part in the following slides

00:04:11,130 --> 00:04:14,970
now let's talk about service smash

00:04:13,050 --> 00:04:16,920
Federation why do we need a service

00:04:14,970 --> 00:04:19,500
match federation imagine you have woken

00:04:16,920 --> 00:04:23,210
loads running from different matches how

00:04:19,500 --> 00:04:30,630
these workloads can talk to each other

00:04:23,210 --> 00:04:33,210
so the main point of smash Federation's

00:04:30,630 --> 00:04:35,220
provide interoperability between two

00:04:33,210 --> 00:04:37,860
different matches and the message came

00:04:35,220 --> 00:04:40,020
from come from different organizations

00:04:37,860 --> 00:04:42,210
from different departments in the same

00:04:40,020 --> 00:04:45,090
organizations or you may have one match

00:04:42,210 --> 00:04:48,300
on cran another match on public cloud or

00:04:45,090 --> 00:04:50,460
you have one match that's purely for

00:04:48,300 --> 00:04:52,560
Kira Nerys workloads another man she is

00:04:50,460 --> 00:04:56,040
for VM workloads and service and match

00:04:52,560 --> 00:05:03,990
Federation allows you to make these

00:04:56,040 --> 00:05:09,380
workloads talk to each other the manage

00:05:03,990 --> 00:05:12,090
challenges on service met identity

00:05:09,380 --> 00:05:14,760
Federation service discovery Federation

00:05:12,090 --> 00:05:16,440
and also absorb ility Federation for

00:05:14,760 --> 00:05:18,990
this presentation we are about to focus

00:05:16,440 --> 00:05:21,600
on identity Federation and the two

00:05:18,990 --> 00:05:24,660
fundamental challenges first we need to

00:05:21,600 --> 00:05:26,730
build a trust between matches like when

00:05:24,660 --> 00:05:30,240
you receive requests from another match

00:05:26,730 --> 00:05:34,680
how to adjust to identities so I can

00:05:30,240 --> 00:05:36,810
apply a pro appropriate policy to give

00:05:34,680 --> 00:05:39,020
it the right privileges allow this

00:05:36,810 --> 00:05:42,260
identity to access your service and

00:05:39,020 --> 00:05:44,730
second challenge identity isolations I

00:05:42,260 --> 00:05:48,890
don't want the other match to issue the

00:05:44,730 --> 00:05:53,000
same identity as I didn't hit my match

00:05:48,890 --> 00:05:57,390
otherwise he can easily like initiate

00:05:53,000 --> 00:05:59,580
impersonation attack now I'm gonna hand

00:05:57,390 --> 00:06:00,810
off the Oliver to talk about how we are

00:05:59,580 --> 00:06:13,290
going to deal with this which have

00:06:00,810 --> 00:06:14,850
challenges right thank you and Joan in

00:06:13,290 --> 00:06:19,979
the following slides I'm going to talk

00:06:14,850 --> 00:06:21,900
about the technical details and various

00:06:19,979 --> 00:06:24,980
approaches that we recommend for their

00:06:21,900 --> 00:06:27,770
services service Federation's

00:06:24,980 --> 00:06:31,490
going back to the question of what is a

00:06:27,770 --> 00:06:34,210
service mesh and trust domain right in

00:06:31,490 --> 00:06:37,880
terms of security in the currency

00:06:34,210 --> 00:06:40,460
currently steel the applications in a

00:06:37,880 --> 00:06:43,820
service match they share the common

00:06:40,460 --> 00:06:47,060
roots of trust and they are within the

00:06:43,820 --> 00:06:50,140
same trust domain a trust Omen could

00:06:47,060 --> 00:06:53,720
represent an individual organization

00:06:50,140 --> 00:06:58,370
environment or department under their

00:06:53,720 --> 00:07:00,800
own independent CBP infrastructure the

00:06:58,370 --> 00:07:03,980
trust domain is encoded in their East

00:07:00,800 --> 00:07:07,850
eo8 annotates which is compliant with a

00:07:03,980 --> 00:07:11,330
spiffy standard in the following format

00:07:07,850 --> 00:07:14,360
the spiffy colon slash slash trust

00:07:11,330 --> 00:07:21,620
domain and slash namespace slash their

00:07:14,360 --> 00:07:24,530
service account so indeed slides we are

00:07:21,620 --> 00:07:27,740
talking about their identity Federation

00:07:24,530 --> 00:07:29,990
specifically so in terms of the

00:07:27,740 --> 00:07:33,110
Federation of the mesh aids for the

00:07:29,990 --> 00:07:36,260
applications in two different service

00:07:33,110 --> 00:07:38,840
meshes to authenticate each other we

00:07:36,260 --> 00:07:41,660
need to verify each other's duplicates

00:07:38,840 --> 00:07:45,560
using their own trust routes so for

00:07:41,660 --> 00:07:49,220
example in this following it is

00:07:45,560 --> 00:07:51,950
following graph we have service mesh one

00:07:49,220 --> 00:07:54,350
which is with their trust domain phu

00:07:51,950 --> 00:07:58,310
kham and service mesh two with the trust

00:07:54,350 --> 00:08:00,560
domain marcom for example if you want a

00:07:58,310 --> 00:08:03,410
service in service mesh one to

00:08:00,560 --> 00:08:09,320
authenticate a service in service mesh

00:08:03,410 --> 00:08:12,530
to you need to have this service be able

00:08:09,320 --> 00:08:15,980
to authenticate the certificate

00:08:12,530 --> 00:08:22,600
presented by the other and using its own

00:08:15,980 --> 00:08:22,600
root of trust so how do we do it in

00:08:22,690 --> 00:08:30,050
terms of the scenarios we first talked

00:08:26,540 --> 00:08:34,130
about this in their Federation within an

00:08:30,050 --> 00:08:37,190
organization if you have one

00:08:34,130 --> 00:08:38,320
organization that is using a common root

00:08:37,190 --> 00:08:42,909
CA

00:08:38,320 --> 00:08:46,149
as just showing in this picture and then

00:08:42,909 --> 00:08:48,910
you will have like multiple trust

00:08:46,149 --> 00:08:52,149
domains each of the trust oh man

00:08:48,910 --> 00:08:53,920
we'll have an intermediate CA those

00:08:52,149 --> 00:08:57,630
intermediate CAS are using their

00:08:53,920 --> 00:08:57,630
certificates you should buy the root CA

00:08:57,690 --> 00:09:03,490
each of the intermediate Xia is

00:09:00,069 --> 00:09:05,829
responsible for issuing certificates for

00:09:03,490 --> 00:09:10,779
the services that are running in their

00:09:05,829 --> 00:09:13,930
own mash so in this case CA Y is eating

00:09:10,779 --> 00:09:18,069
certificate for service a and C a2 is

00:09:13,930 --> 00:09:20,920
issuing certificate for service B both

00:09:18,069 --> 00:09:23,980
service a and service B are trusting in

00:09:20,920 --> 00:09:27,730
the route c8 certificate

00:09:23,980 --> 00:09:30,579
so through this complete certification

00:09:27,730 --> 00:09:36,060
chain they can easily authenticate to

00:09:30,579 --> 00:09:39,430
each other right beyond that our

00:09:36,060 --> 00:09:44,440
recommendation is intermediacy a name

00:09:39,430 --> 00:09:48,310
constraints can be helpful for isolating

00:09:44,440 --> 00:09:50,370
the trust domains for example if you

00:09:48,310 --> 00:09:53,860
apply the name constraint for

00:09:50,370 --> 00:09:58,889
intermediacy a1 to only issuing

00:09:53,860 --> 00:10:03,220
certificate for team one dot phu kham if

00:09:58,889 --> 00:10:05,740
this one is compromised it for example

00:10:03,220 --> 00:10:09,490
it you should dedicate for team 2 which

00:10:05,740 --> 00:10:14,050
is belongs learning to this part service

00:10:09,490 --> 00:10:21,699
B we are very fighters named constraint

00:10:14,050 --> 00:10:24,819
and decline this connection okay

00:10:21,699 --> 00:10:28,510
then we talk about Federation across the

00:10:24,819 --> 00:10:32,529
organization's in this scenario usually

00:10:28,510 --> 00:10:37,839
we'll have one root CA for each

00:10:32,529 --> 00:10:40,180
different trust domain in this case the

00:10:37,839 --> 00:10:43,959
left side is trust on me lucam the right

00:10:40,180 --> 00:10:48,040
side is trust them in Perham the root CA

00:10:43,959 --> 00:10:51,820
is signing certificate for their

00:10:48,040 --> 00:10:55,120
services running in their own so

00:10:51,820 --> 00:10:57,460
mesh and you can see the service

00:10:55,120 --> 00:11:01,090
the services are trusting their own root

00:10:57,460 --> 00:11:04,840
CA certificates talking about their

00:11:01,090 --> 00:11:08,410
service and Federation their mash

00:11:04,840 --> 00:11:12,280
Federation some of the you might think

00:11:08,410 --> 00:11:16,600
about okay we might be able to cross sy

00:11:12,280 --> 00:11:20,070
the root certificates so that we can

00:11:16,600 --> 00:11:24,430
build up a different certification chain

00:11:20,070 --> 00:11:28,600
to enable their mutual trust so how this

00:11:24,430 --> 00:11:32,400
works this root CA one signs the

00:11:28,600 --> 00:11:36,460
certificate signs they're public key

00:11:32,400 --> 00:11:39,450
root CA two to generate a new

00:11:36,460 --> 00:11:44,560
certificate intermediate certificate

00:11:39,450 --> 00:11:49,390
because this for root CA to the public

00:11:44,560 --> 00:11:52,480
key are represented by two certificates

00:11:49,390 --> 00:11:55,390
in this case you are able to build a new

00:11:52,480 --> 00:11:58,600
certification chain from service B to

00:11:55,390 --> 00:12:03,040
this intermediate certificate to roots

00:11:58,600 --> 00:12:06,550
a1 and then for the service a to

00:12:03,040 --> 00:12:09,970
authenticate service be it will use this

00:12:06,550 --> 00:12:13,500
new certification chain to verify

00:12:09,970 --> 00:12:18,700
service beads certificate using its own

00:12:13,500 --> 00:12:22,150
root CA certificate the drawback of this

00:12:18,700 --> 00:12:28,690
approach is high complexity this cross

00:12:22,150 --> 00:12:31,240
signing is hard to automate and if you

00:12:28,690 --> 00:12:33,910
have for example an service message you

00:12:31,240 --> 00:12:39,180
want to fail rate there are n square

00:12:33,910 --> 00:12:43,600
cross signings for the entrace domains

00:12:39,180 --> 00:12:48,030
so what we recommend is this one CB feet

00:12:43,600 --> 00:12:51,040
respond oh how it works so the core

00:12:48,030 --> 00:12:54,520
advantages of the CBC trust bundle its

00:12:51,040 --> 00:12:58,710
first automation of the root of trust

00:12:54,520 --> 00:13:01,840
exchange and second the authentication

00:12:58,710 --> 00:13:04,570
can use the Roosters corresponding to

00:13:01,840 --> 00:13:11,320
the peers trust domain

00:13:04,570 --> 00:13:13,720
in this graph we are showing the the

00:13:11,320 --> 00:13:15,760
it's the same loosely a signing

00:13:13,720 --> 00:13:18,550
certificate for service a you see a two

00:13:15,760 --> 00:13:21,520
significant first service too but beyond

00:13:18,550 --> 00:13:27,400
that you will notice in the red box

00:13:21,520 --> 00:13:29,920
there's our trust for food comm only use

00:13:27,400 --> 00:13:32,550
this red certificate which means the

00:13:29,920 --> 00:13:36,850
root CA one certificate to verify it and

00:13:32,550 --> 00:13:41,620
bar.com you should only use their roots

00:13:36,850 --> 00:13:45,910
they tooth certificate to verify it how

00:13:41,620 --> 00:13:48,220
this entire thing works be patient I

00:13:45,910 --> 00:13:48,790
will talk about it in the following

00:13:48,220 --> 00:13:54,370
slides

00:13:48,790 --> 00:13:56,920
ok so first let me spend one minute to

00:13:54,370 --> 00:14:02,740
talk about the CBP transponder the CBP

00:13:56,920 --> 00:14:06,510
transponder is an RFC 75 y7 compliant GW

00:14:02,740 --> 00:14:09,790
case that continuing are trans domains

00:14:06,510 --> 00:14:13,210
cryptographic keys for the validation of

00:14:09,790 --> 00:14:15,880
the certificates issued in that trust

00:14:13,210 --> 00:14:20,710
domain if some of you are familiar with

00:14:15,880 --> 00:14:23,710
their tina bouquet as standard you will

00:14:20,710 --> 00:14:27,880
figure out how this works but here i'm

00:14:23,710 --> 00:14:34,420
going to give you an example this is an

00:14:27,880 --> 00:14:37,590
example of the TW KS further trans

00:14:34,420 --> 00:14:41,440
bundle you will have kids

00:14:37,590 --> 00:14:44,620
representing the certificates for this

00:14:41,440 --> 00:14:47,170
trust domain it's an array so that means

00:14:44,620 --> 00:14:49,270
you may have multiple kids that you can

00:14:47,170 --> 00:14:50,280
use to verify the certificates in that

00:14:49,270 --> 00:14:56,560
trust domain

00:14:50,280 --> 00:15:01,750
the youth part it's required for CPC

00:14:56,560 --> 00:15:05,170
standard to be x.509 - as the ID as the

00:15:01,750 --> 00:15:10,540
ID means a spiffy verifiable identity

00:15:05,170 --> 00:15:16,060
document the x5c this part is critical

00:15:10,540 --> 00:15:16,720
it carries the base64 encoded dur of

00:15:16,060 --> 00:15:19,480
there

00:15:16,720 --> 00:15:22,660
expel the night certificate that you use

00:15:19,480 --> 00:15:25,990
to verify the certificates for that

00:15:22,660 --> 00:15:29,530
trans domain and one more interesting

00:15:25,990 --> 00:15:33,190
field is this one beefy refresh hint

00:15:29,530 --> 00:15:39,700
which means this bundle will be valid

00:15:33,190 --> 00:15:43,060
for 10 minutes 600 seconds right the key

00:15:39,700 --> 00:15:48,300
type and those four fields are redundant

00:15:43,060 --> 00:15:52,390
here they are more useful for dot type

00:15:48,300 --> 00:15:56,500
trust bundles so one thing to note here

00:15:52,390 --> 00:16:02,350
is the CBP trust bundle not only serves

00:15:56,500 --> 00:16:04,690
for their x.509 certificate but it also

00:16:02,350 --> 00:16:08,050
serves for setting up the trust for

00:16:04,690 --> 00:16:10,390
tokens so in that case you won't have

00:16:08,050 --> 00:16:14,860
their ex levels see you will use this

00:16:10,390 --> 00:16:19,450
one to verify their - to obtain the

00:16:14,860 --> 00:16:24,000
public key we put it here because this

00:16:19,450 --> 00:16:29,890
is a mandatory field for dirty wks

00:16:24,000 --> 00:16:33,630
standard the Federation with the VV

00:16:29,890 --> 00:16:38,380
transponder going a little bit into the

00:16:33,630 --> 00:16:40,480
technical details for a trust bundle

00:16:38,380 --> 00:16:43,090
there's a publishing site and there's a

00:16:40,480 --> 00:16:50,730
consuming side right the publishing side

00:16:43,090 --> 00:16:55,720
needs to expose HTTP and point encrypted

00:16:50,730 --> 00:17:00,760
through the TLS certificate based on web

00:16:55,720 --> 00:17:05,520
PKI or the specie standard the consuming

00:17:00,760 --> 00:17:09,520
part e still at me is to configure a

00:17:05,520 --> 00:17:12,640
mapping from the trans domain to the end

00:17:09,520 --> 00:17:15,160
point and then when II still gas that

00:17:12,640 --> 00:17:17,939
mapping it authenticates the end point

00:17:15,160 --> 00:17:23,709
and retrieves the bundle from it and

00:17:17,939 --> 00:17:27,339
then it will build up message including

00:17:23,709 --> 00:17:30,040
the straddle trust domain and bundle to

00:17:27,339 --> 00:17:33,640
oppose and propagate them

00:17:30,040 --> 00:17:36,930
to their workloads and the workloads can

00:17:33,640 --> 00:17:40,240
use it in the certificate verification

00:17:36,930 --> 00:17:45,070
to give you more vivid explained

00:17:40,240 --> 00:17:50,200
explanation of this flow I taught this

00:17:45,070 --> 00:17:52,210
down into their pictures this is an

00:17:50,200 --> 00:17:56,700
example on the left side you will have

00:17:52,210 --> 00:17:59,260
Citadel so there is their CA in east eel

00:17:56,700 --> 00:18:04,710
on the right side it's the spire server

00:17:59,260 --> 00:18:08,160
which is the CA in CB v standard

00:18:04,710 --> 00:18:11,260
implemented by their sky trail company

00:18:08,160 --> 00:18:17,740
suppose you want to feather it in the

00:18:11,260 --> 00:18:20,410
left side with the right side and for

00:18:17,740 --> 00:18:23,410
this to work you will have a transponder

00:18:20,410 --> 00:18:26,560
management module running in Seville and

00:18:23,410 --> 00:18:30,160
spire server this module is in charge of

00:18:26,560 --> 00:18:33,400
both publishing their trust bundle and

00:18:30,160 --> 00:18:37,180
point and also consuming the transponder

00:18:33,400 --> 00:18:39,910
from their other end points in this

00:18:37,180 --> 00:18:43,690
example you see their CEO is exposing

00:18:39,910 --> 00:18:46,420
and point which is a HTTP endpoint one

00:18:43,690 --> 00:18:50,800
and the other side is HTTP endpoint to

00:18:46,420 --> 00:18:56,320
the east EO admin configures their

00:18:50,800 --> 00:18:59,740
consumer side to obtain for example the

00:18:56,320 --> 00:19:02,290
food comm certificate it's a local so

00:18:59,740 --> 00:19:04,720
that means you don't need to go to and

00:19:02,290 --> 00:19:07,750
the point to look at that it's used

00:19:04,720 --> 00:19:11,530
locally but for part of calm which is

00:19:07,750 --> 00:19:15,730
this domain it points to the endpoint to

00:19:11,530 --> 00:19:21,420
which is this guy right and on the other

00:19:15,730 --> 00:19:24,070
side it's the same similar thing and

00:19:21,420 --> 00:19:26,350
after you configure all those they are

00:19:24,070 --> 00:19:28,540
up and running

00:19:26,350 --> 00:19:32,920
they're just bundle management module

00:19:28,540 --> 00:19:35,110
start to retrieve the transponders this

00:19:32,920 --> 00:19:38,920
year that out the serial part which

00:19:35,110 --> 00:19:42,610
waved their distributes its trust bundle

00:19:38,920 --> 00:19:43,810
containing its own root certificate to

00:19:42,610 --> 00:19:46,270
the spire server

00:19:43,810 --> 00:19:53,620
Vassar also distributes his transponder

00:19:46,270 --> 00:19:56,880
to Citadel after that the serial side

00:19:53,620 --> 00:20:01,800
will create a trust mundo message

00:19:56,880 --> 00:20:07,510
mapping from phu kham with its own

00:20:01,800 --> 00:20:09,640
routes the packet and bar comm with the

00:20:07,510 --> 00:20:13,390
certificate from the sparrow server side

00:20:09,640 --> 00:20:17,200
and propagated it to service a and on

00:20:13,390 --> 00:20:19,480
the other side the same now service a

00:20:17,200 --> 00:20:22,930
will have the trust bundle and service B

00:20:19,480 --> 00:20:28,320
will have a very similar transponder on

00:20:22,930 --> 00:20:31,060
each side service a can use bar comm

00:20:28,320 --> 00:20:34,420
mapped root certificate which is the

00:20:31,060 --> 00:20:37,930
green one to authenticate service B and

00:20:34,420 --> 00:20:40,480
service B will use the red certificate

00:20:37,930 --> 00:20:44,920
mapped from foo.com

00:20:40,480 --> 00:20:48,700
to authenticate serves a so that's

00:20:44,920 --> 00:20:50,910
basically about this flow about the

00:20:48,700 --> 00:20:54,640
isolation identity isolation right

00:20:50,910 --> 00:20:56,890
supports in your scenario the spiral

00:20:54,640 --> 00:21:00,520
server is compromised so what will

00:20:56,890 --> 00:21:04,240
happen if the service server the spire

00:21:00,520 --> 00:21:07,600
server is issuing a certificate for for

00:21:04,240 --> 00:21:12,040
example food comm what will happen is

00:21:07,600 --> 00:21:17,230
the source a will gather service beats

00:21:12,040 --> 00:21:19,600
defecate and exam its trust domain and

00:21:17,230 --> 00:21:22,570
it will figure out oh it's from food

00:21:19,600 --> 00:21:24,880
calm which is wrong right and then it

00:21:22,570 --> 00:21:27,610
will use the trust don't trust bundle

00:21:24,880 --> 00:21:30,010
see the trans bundle and see Oh food Oh

00:21:27,610 --> 00:21:34,060
calm we should use this red certificate

00:21:30,010 --> 00:21:37,900
to verify and then it will try to use

00:21:34,060 --> 00:21:40,720
this guy this is own root certificate

00:21:37,900 --> 00:21:42,880
and it will figure out oh it's wrong

00:21:40,720 --> 00:21:43,890
it's actually not working it's not

00:21:42,880 --> 00:21:48,400
signed by this guy

00:21:43,890 --> 00:21:52,270
then this handshake will fail so that's

00:21:48,400 --> 00:21:55,950
how their identity isolation works in

00:21:52,270 --> 00:21:57,670
there either in their service Federation

00:21:55,950 --> 00:22:02,260
sorry the match

00:21:57,670 --> 00:22:04,440
duration scenario okay so I think that's

00:22:02,260 --> 00:22:04,440
it

00:22:06,180 --> 00:22:17,770
have any questions we use the microphone

00:22:15,790 --> 00:22:20,800
otherwise they can't harm and you're

00:22:17,770 --> 00:22:25,990
gonna need an email even your amulet I

00:22:20,800 --> 00:22:27,340
use yours any minute you don't even oh

00:22:25,990 --> 00:22:30,790
that's a good question

00:22:27,340 --> 00:22:34,390
so his question is there's a 600 seconds

00:22:30,790 --> 00:22:37,650
expericence further trust bundle and I

00:22:34,390 --> 00:22:42,220
didn't show in this picture so basically

00:22:37,650 --> 00:22:45,070
go back this one this retrieving

00:22:42,220 --> 00:22:47,530
transponders it's periodic every you

00:22:45,070 --> 00:22:51,340
should have have it in in that case it's

00:22:47,530 --> 00:22:53,230
a 600 seconds and you retrieve this new

00:22:51,340 --> 00:22:55,690
transponder and compare it with the

00:22:53,230 --> 00:22:58,480
transponder that you cashed if it's any

00:22:55,690 --> 00:23:02,280
difference you will propagate new

00:22:58,480 --> 00:23:02,280
transponders to their workloads

00:23:03,330 --> 00:23:19,810
your mother your so the question is for

00:23:15,640 --> 00:23:22,960
this encoding what's there how its work

00:23:19,810 --> 00:23:27,160
how its encoded right yeah so that

00:23:22,960 --> 00:23:32,130
fellow cx-5 see certificate it's encoded

00:23:27,160 --> 00:23:36,720
in base64 so it's not using a public key

00:23:32,130 --> 00:23:40,630
but this one this public key is the same

00:23:36,720 --> 00:23:43,510
with there's the public key in the

00:23:40,630 --> 00:23:46,750
certificate it's kind of redundant here

00:23:43,510 --> 00:23:48,430
just because this is required by their

00:23:46,750 --> 00:23:50,830
twk as standard

00:23:48,430 --> 00:23:55,770
we have to put something there but

00:23:50,830 --> 00:23:58,030
beyond that if you have x.509 dot

00:23:55,770 --> 00:24:00,700
suppose their transponder is for short

00:23:58,030 --> 00:24:03,130
you won't have this field and in that

00:24:00,700 --> 00:24:05,800
case this will will be meaningful

00:24:03,130 --> 00:24:07,990
the Chairman is you don't have any

00:24:05,800 --> 00:24:10,570
champion looking into his fanciful what

00:24:07,990 --> 00:24:11,380
hanging I didn't Pocoyo yeah much ahora

00:24:10,570 --> 00:24:13,510
negative

00:24:11,380 --> 00:24:18,039
that's right yeah this is a elliptic

00:24:13,510 --> 00:24:22,390
whole curve encoding and algorithm sorry

00:24:18,039 --> 00:24:26,289
and XY are there are coordinates and you

00:24:22,390 --> 00:24:29,440
can use this to get the public key how

00:24:26,289 --> 00:24:34,000
you gonna get a bastard an institution

00:24:29,440 --> 00:24:35,559
is to build what or what I not seen

00:24:34,000 --> 00:24:39,220
critici-- machine magazine so what kind

00:24:35,559 --> 00:24:41,919
of yes that's right one you Lamia yeah

00:24:39,220 --> 00:24:43,539
yeah yeah you can change this to a

00:24:41,919 --> 00:24:47,289
larger number that's no problem

00:24:43,539 --> 00:24:49,570
yeah yeah sure practically this is very

00:24:47,289 --> 00:24:50,970
short you you don't want it to be

00:24:49,570 --> 00:24:59,289
destroyed

00:24:50,970 --> 00:25:02,350
any other question so a follow-up

00:24:59,289 --> 00:25:04,419
question for the Refresh seconds so what

00:25:02,350 --> 00:25:08,320
happened for the existing connections

00:25:04,419 --> 00:25:14,289
when I get refreshed that's a good

00:25:08,320 --> 00:25:20,850
question so if this refresh second if

00:25:14,289 --> 00:25:26,320
this is smart and it's changed right

00:25:20,850 --> 00:25:29,440
there TLS handshake will detect will

00:25:26,320 --> 00:25:31,679
verify the certificates only at the

00:25:29,440 --> 00:25:34,770
beginning of the connection and

00:25:31,679 --> 00:25:38,559
currently we don't have a renegotiation

00:25:34,770 --> 00:25:42,010
mechanism implemented in my by default

00:25:38,559 --> 00:25:46,929
in you steal so if you created the

00:25:42,010 --> 00:25:49,539
connection before this changes it will

00:25:46,929 --> 00:25:53,320
still work be working unless you

00:25:49,539 --> 00:25:56,380
disconnect and then you try to redo the

00:25:53,320 --> 00:26:04,750
handshake and if this is changed and

00:25:56,380 --> 00:26:07,470
it's not valid anymore you will fail how

00:26:04,750 --> 00:26:17,010
do you think about a thicker food

00:26:07,470 --> 00:26:21,340
connection of to be and I am and it's

00:26:17,010 --> 00:26:23,770
creating sorry sorry could you repeat

00:26:21,340 --> 00:26:28,090
your question

00:26:23,770 --> 00:26:30,130
I am and I mean it's mostly about

00:26:28,090 --> 00:26:32,080
authorization right and your question is

00:26:30,130 --> 00:26:35,790
once we have this beef identity how do

00:26:32,080 --> 00:26:38,980
we leverage I am to enforce the policy

00:26:35,790 --> 00:26:43,179
apply access control in the other case

00:26:38,980 --> 00:26:46,210
is orthogonal to Federation and the key

00:26:43,179 --> 00:26:48,010
is you want to understand who is calling

00:26:46,210 --> 00:26:49,870
you which identity is being used and

00:26:48,010 --> 00:26:53,429
then you can apply policy to that

00:26:49,870 --> 00:26:57,910
identity the things that is specific to

00:26:53,429 --> 00:27:00,250
mesh Federation is that when identity

00:26:57,910 --> 00:27:03,550
come from another idea another mesh they

00:27:00,250 --> 00:27:06,220
trust domain in which you can use to

00:27:03,550 --> 00:27:08,320
identify which I don't which matches are

00:27:06,220 --> 00:27:10,660
in the come from so in the know I am

00:27:08,320 --> 00:27:12,910
policy you can set it up properly like

00:27:10,660 --> 00:27:15,160
for identity within your mesh you can

00:27:12,910 --> 00:27:16,420
know price design policies but identity

00:27:15,160 --> 00:27:19,900
from different mashup lighters

00:27:16,420 --> 00:27:22,350
separately the answer question no no

00:27:19,900 --> 00:27:22,350
thanks

00:27:30,759 --> 00:27:41,469
I just wondered how easy this is to use

00:27:38,999 --> 00:27:43,389
today how do I turn that on

00:27:41,469 --> 00:27:46,169
is it like command-line arguments to

00:27:43,389 --> 00:27:50,739
Citadel or is there a yama resource or a

00:27:46,169 --> 00:27:52,659
like helm values file for this so you

00:27:50,739 --> 00:27:55,329
are talking about how easy it hits yours

00:27:52,659 --> 00:27:57,399
right yeah so I already have like three

00:27:55,329 --> 00:27:59,440
kubernetes clusters each with a service

00:27:57,399 --> 00:28:01,719
mouse that it's federated using the new

00:27:59,440 --> 00:28:04,809
1.1 features right and they currently

00:28:01,719 --> 00:28:06,909
they just share a root CA cert I I want

00:28:04,809 --> 00:28:09,909
to move to this it looks better but how

00:28:06,909 --> 00:28:11,919
much work is that I think you are

00:28:09,909 --> 00:28:13,629
talking about this feathery teens

00:28:11,919 --> 00:28:15,219
through their spiffy transponders right

00:28:13,629 --> 00:28:17,049
yeah yeah sorry I hear to configure each

00:28:15,219 --> 00:28:18,969
Citadel with all the em I have to turn

00:28:17,049 --> 00:28:20,529
on my local endpoint to publish and I

00:28:18,969 --> 00:28:22,479
have to configure with the map of all

00:28:20,529 --> 00:28:24,129
the remote end points like right do I

00:28:22,479 --> 00:28:25,899
have to go hacking around in the Citadel

00:28:24,129 --> 00:28:28,239
pod today or is there a nice yeah mall

00:28:25,899 --> 00:28:32,799
like this is a working progress okay

00:28:28,239 --> 00:28:35,799
first of all yes and in their final

00:28:32,799 --> 00:28:37,989
stage it will be very easy okay what you

00:28:35,799 --> 00:28:41,469
need to do is configure this endpoint

00:28:37,989 --> 00:28:44,049
and the trust trust fund on config is

00:28:41,469 --> 00:28:48,099
basically Yama file or that there is a

00:28:44,049 --> 00:28:53,619
llamo yes yes 1.2 what do I have to

00:28:48,099 --> 00:28:55,089
wait it's a good question is still

00:28:53,619 --> 00:28:56,619
working in progress we are trying to

00:28:55,089 --> 00:28:59,859
make it happen yeah very good

00:28:56,619 --> 00:29:01,690
yeah what is what is the trust the main

00:28:59,859 --> 00:29:03,579
string come from because like

00:29:01,690 --> 00:29:05,769
communities classes don't have a first

00:29:03,579 --> 00:29:09,149
class name I've actually don't yeah it's

00:29:05,769 --> 00:29:11,999
set to today so this trust dome in part

00:29:09,149 --> 00:29:17,289
it's configured now it's configurable

00:29:11,999 --> 00:29:22,779
okay still right yes it's not correlated

00:29:17,289 --> 00:29:27,999
to their gke clusters yeah it's totally

00:29:22,779 --> 00:29:30,459
a sto concept okay yeah cool it's not a

00:29:27,999 --> 00:29:33,099
community concept yet no I show right

00:29:30,459 --> 00:29:36,009
yeah but you could maybe in the future

00:29:33,099 --> 00:29:38,709
like or you customize it to good if I

00:29:36,009 --> 00:29:40,149
don't say yeah yeah like string because

00:29:38,709 --> 00:29:43,059
I can't think what you defaulted to

00:29:40,149 --> 00:29:44,419
otherwise the default one is the cluster

00:29:43,059 --> 00:29:46,669
dot local other

00:29:44,419 --> 00:29:48,200
you right know you configure it so I

00:29:46,669 --> 00:29:52,450
need to override it if I want to fit it

00:29:48,200 --> 00:29:52,450
right yes override it okay yeah thanks

00:29:55,960 --> 00:29:59,409
and has a question

00:30:01,179 --> 00:30:05,250
all right thank you guys all right thank

00:30:04,549 --> 00:30:09,430
you

00:30:05,250 --> 00:30:09,430

YouTube URL: https://www.youtube.com/watch?v=aXadAZb-6-4


