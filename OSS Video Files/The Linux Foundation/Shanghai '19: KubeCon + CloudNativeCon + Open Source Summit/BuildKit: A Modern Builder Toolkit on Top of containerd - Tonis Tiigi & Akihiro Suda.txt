Title: BuildKit: A Modern Builder Toolkit on Top of containerd - Tonis Tiigi & Akihiro Suda
Publication date: 2019-07-10
Playlist: Shanghai '19: KubeCon + CloudNativeCon + Open Source Summit
Description: 
	BuildKit: A Modern Builder Toolkit on Top of containerd - Tonis Tiigi, Docker Inc. & Akihiro Suda, NTT 

BuildKit is a modern OCI image builder toolkit based on containerd container runtime used as a new backend in Docker build command and in rootless builder img.    In this session, we'll demonstrate the capabilities of BuildKit and how it can help to improve your current application development process and your CI workflow. For example, we'll explain new features that allow to significantly improve the performance of your Dockerfiles or how with remote caching support in BuildKit you can be used to speed up your CI builds.    Relying on the containerd manifest list support BuildKit can build multi-platform images with a single build request and a single Dockerfile.    Participants will learn how to use BuildKit today, either as part of Docker platform or as a standalone tool deployed on a Kubernetes cluster, and the benefits it has compared to the previous image building methods. 

https://sched.co/Nrlo
Captions: 
	00:00:00,510 --> 00:00:07,309
so welcome everybody thank thank you all

00:00:03,179 --> 00:00:09,690
for coming to this session about pocket

00:00:07,309 --> 00:00:12,360
my name is Donnie steggy I'm a software

00:00:09,690 --> 00:00:14,639
engineer from toker joined here by Aki

00:00:12,360 --> 00:00:18,990
here Sudha from NTT and we're both

00:00:14,639 --> 00:00:23,010
maintained as a pocket so what what is

00:00:18,990 --> 00:00:25,439
pocket and before we get into this maybe

00:00:23,010 --> 00:00:27,570
we should take a step back and just look

00:00:25,439 --> 00:00:31,590
at like how container images are built

00:00:27,570 --> 00:00:34,010
today and the way it most likely looks

00:00:31,590 --> 00:00:36,210
like is that you have a talker file

00:00:34,010 --> 00:00:39,450
pocket file basically has just like a

00:00:36,210 --> 00:00:42,450
sequence of steps that that executing

00:00:39,450 --> 00:00:44,610
containers - for your bill to run and

00:00:42,450 --> 00:00:46,770
then you just run docker build to build

00:00:44,610 --> 00:00:48,960
this docker file and what it will do is

00:00:46,770 --> 00:00:51,960
it will use the build component in

00:00:48,960 --> 00:00:53,969
docker engine to actually move this and

00:00:51,960 --> 00:00:57,329
this basically like all almost all

00:00:53,969 --> 00:00:58,949
containers are about today and the build

00:00:57,329 --> 00:01:03,390
component was there in the very early

00:00:58,949 --> 00:01:06,510
days of talker so why did we need to

00:01:03,390 --> 00:01:07,860
change this what's the issue with with

00:01:06,510 --> 00:01:11,760
the old builder and why would we need

00:01:07,860 --> 00:01:15,270
Towe kit all the main reason is that the

00:01:11,760 --> 00:01:17,250
builder was sorted in very early days

00:01:15,270 --> 00:01:19,680
when we talked her and now we really

00:01:17,250 --> 00:01:21,900
have like quite different

00:01:19,680 --> 00:01:25,170
we're like develop quite quite a lot and

00:01:21,900 --> 00:01:26,939
we have different use cases now we need

00:01:25,170 --> 00:01:29,820
much we need to build much more complex

00:01:26,939 --> 00:01:31,590
bill bills and we may also need much

00:01:29,820 --> 00:01:34,380
better user experience and developer

00:01:31,590 --> 00:01:36,979
experience one of the issues also is

00:01:34,380 --> 00:01:39,810
that the tote builder is very tightly

00:01:36,979 --> 00:01:42,390
modeled after docker file so that means

00:01:39,810 --> 00:01:44,820
that we basically can't change anything

00:01:42,390 --> 00:01:48,360
because fog Rafael has this backwards

00:01:44,820 --> 00:01:53,399
compatibility rules I think we could do

00:01:48,360 --> 00:01:56,700
better in on performance there's also

00:01:53,399 --> 00:01:59,540
this is just that it's not completely

00:01:56,700 --> 00:02:02,700
isolated from the other talking engine

00:01:59,540 --> 00:02:03,960
for example you could you could do

00:02:02,700 --> 00:02:06,149
something like a talker stop on a

00:02:03,960 --> 00:02:07,530
container that's that's running as part

00:02:06,149 --> 00:02:09,360
of your build and it will stop your

00:02:07,530 --> 00:02:12,660
building they will be learned that's

00:02:09,360 --> 00:02:13,140
like definitely something that shouldn't

00:02:12,660 --> 00:02:15,450
happen

00:02:13,140 --> 00:02:17,400
and because it's bundled into docker

00:02:15,450 --> 00:02:21,480
engine then we can't really use this

00:02:17,400 --> 00:02:23,820
code for anything else as well it's just

00:02:21,480 --> 00:02:25,590
like for the docker use case and built

00:02:23,820 --> 00:02:27,990
it is basically it's made to just solve

00:02:25,590 --> 00:02:29,750
all of those issues so it comes with

00:02:27,990 --> 00:02:33,590
dozens of new features and bug fixes

00:02:29,750 --> 00:02:37,430
it's way faster we have better caching

00:02:33,590 --> 00:02:37,430
we can paralyze stuff

00:02:37,610 --> 00:02:41,010
so it's not specific to docker files

00:02:40,050 --> 00:02:43,170
only anymore

00:02:41,010 --> 00:02:45,600
you can basically build almost any

00:02:43,170 --> 00:02:48,660
language and dynamically loaded language

00:02:45,600 --> 00:02:50,790
definition with with a docker image it's

00:02:48,660 --> 00:02:52,770
properly componentized so for example

00:02:50,790 --> 00:02:55,560
the dole docker file part is completely

00:02:52,770 --> 00:02:57,090
separate from velvet core so if you do

00:02:55,560 --> 00:03:00,480
not pill talker files you don't need

00:02:57,090 --> 00:03:03,209
that one at all and it's not really like

00:03:00,480 --> 00:03:05,880
like a new opinionated builder is more

00:03:03,209 --> 00:03:10,020
like like a toolkit for building

00:03:05,880 --> 00:03:11,760
separate building other builders and so

00:03:10,020 --> 00:03:14,120
it's very flexible and just solves the

00:03:11,760 --> 00:03:19,470
hard problems for you

00:03:14,120 --> 00:03:21,840
so fill kit this is a completely new

00:03:19,470 --> 00:03:24,959
project it's a completely fresh code

00:03:21,840 --> 00:03:26,549
pace but of course we don't want to

00:03:24,959 --> 00:03:28,200
reinvent the wheel like when we don't

00:03:26,549 --> 00:03:31,769
have to so it's paced

00:03:28,200 --> 00:03:34,019
and on the container D work so it's uses

00:03:31,769 --> 00:03:36,120
to reuse lots of code from container ID

00:03:34,019 --> 00:03:38,340
whenever we do an image pool will use

00:03:36,120 --> 00:03:40,470
the container decode and and we use

00:03:38,340 --> 00:03:42,750
contain the snapshots for storage and

00:03:40,470 --> 00:03:44,700
stuff like that you can even use toolkit

00:03:42,750 --> 00:03:46,830
with directly with a container D daemon

00:03:44,700 --> 00:03:50,220
and let contain the demon manage the

00:03:46,830 --> 00:03:52,680
storage for you we also want to very

00:03:50,220 --> 00:03:55,530
nice with all the open container

00:03:52,680 --> 00:03:57,450
standards so for example I tell the time

00:03:55,530 --> 00:04:00,600
you'll execute the process as part of

00:03:57,450 --> 00:04:03,330
your build it's running through the

00:04:00,600 --> 00:04:05,070
Cervantes path so if you have a

00:04:03,330 --> 00:04:06,690
different implementation for for

00:04:05,070 --> 00:04:09,959
implementing that specification it's

00:04:06,690 --> 00:04:12,720
very easy to block this in and your

00:04:09,959 --> 00:04:16,250
builders also so can be can be exported

00:04:12,720 --> 00:04:20,040
with OCR I'm expect or like kasi I miss

00:04:16,250 --> 00:04:23,820
turbo so all the it supports all the new

00:04:20,040 --> 00:04:25,500
standards so this is a quick

00:04:23,820 --> 00:04:26,520
introduction to build kit back here will

00:04:25,500 --> 00:04:32,090
now talk

00:04:26,520 --> 00:04:32,090
a couple of new features in Pocket a

00:04:32,479 --> 00:04:37,860
bunch of new features and we don't have

00:04:35,099 --> 00:04:41,699
time to cover all the features but I

00:04:37,860 --> 00:04:45,990
will have a look at some of some of

00:04:41,699 --> 00:04:49,740
these features such as victimization or

00:04:45,990 --> 00:04:52,800
toka build so with relative to car built

00:04:49,740 --> 00:04:55,979
it doesn't compute dependencies across

00:04:52,800 --> 00:04:58,979
toka wire instructions for it create so

00:04:55,979 --> 00:05:01,979
if you modify our I took awhile as a

00:04:58,979 --> 00:05:06,030
next to the cash for the next rain was

00:05:01,979 --> 00:05:08,460
always invited it so in this example we

00:05:06,030 --> 00:05:11,400
have three lines the first row right is

00:05:08,460 --> 00:05:15,270
based image if the second row specifies

00:05:11,400 --> 00:05:18,120
which TCP post to be exposed and third

00:05:15,270 --> 00:05:23,370
row has some application for installing

00:05:18,120 --> 00:05:27,389
packages and if we modify the second row

00:05:23,370 --> 00:05:29,969
and change the airport number the cash

00:05:27,389 --> 00:05:33,150
was next right after gate was always

00:05:29,969 --> 00:05:35,969
invited it even though as instruction

00:05:33,150 --> 00:05:43,430
doesn't depend on the TCP number to be

00:05:35,969 --> 00:05:43,430
exposed so it was not very effective

00:05:43,759 --> 00:05:50,809
and realistic ability also has issued in

00:05:47,990 --> 00:05:56,300
scheduling so in each local file we have

00:05:50,809 --> 00:05:59,120
three stages and stage zero so city to

00:05:56,300 --> 00:06:01,729
earth depends on state 0 and state 1

00:05:59,120 --> 00:06:04,099
so in theory we should be able to

00:06:01,729 --> 00:06:08,059
execute state zero in stage 1 con

00:06:04,099 --> 00:06:09,319
country but in in the actual velocity of

00:06:08,059 --> 00:06:13,129
caboose implementation

00:06:09,319 --> 00:06:14,870
everything was signature so we have no

00:06:13,129 --> 00:06:22,629
control concurrency is a realistic

00:06:14,870 --> 00:06:26,539
ability in built each can analyze

00:06:22,629 --> 00:06:29,539
dependencies accurately by using Elaraby

00:06:26,539 --> 00:06:31,939
which is new rudiment format for

00:06:29,539 --> 00:06:35,120
building images it's very similar to

00:06:31,939 --> 00:06:39,259
it'll be M but well before building

00:06:35,120 --> 00:06:42,499
images it'll be had graph structure so

00:06:39,259 --> 00:06:45,229
we can analyze our dependency accurately

00:06:42,499 --> 00:06:47,779
it we can do officiate testing and we

00:06:45,229 --> 00:06:51,669
can also do concurrent execution who

00:06:47,779 --> 00:06:54,709
marks these local files so it will be is

00:06:51,669 --> 00:06:57,469
natural humans it's for machines it's

00:06:54,709 --> 00:07:00,499
included in protocol buffers and it'll

00:06:57,469 --> 00:07:02,810
be is typically compiled from human

00:07:00,499 --> 00:07:04,939
readable languages such as took on fire

00:07:02,810 --> 00:07:10,430
but you don't necessarily need to use

00:07:04,939 --> 00:07:13,430
205 we have also we have also frontal

00:07:10,430 --> 00:07:16,189
ends which is a program and that

00:07:13,430 --> 00:07:19,129
compiles Hydra drug wedges into a rare B

00:07:16,189 --> 00:07:22,279
so for example we have our builder bugs

00:07:19,129 --> 00:07:25,370
that it's ported from Heroku in the

00:07:22,279 --> 00:07:27,289
crowd of Andre we also have a mocha fire

00:07:25,370 --> 00:07:29,059
at the cooker fire these are very

00:07:27,289 --> 00:07:31,610
similar to talk awhile but

00:07:29,059 --> 00:07:34,999
optimized for very specific use cases we

00:07:31,610 --> 00:07:37,569
have also took a sample available in two

00:07:34,999 --> 00:07:37,569
interpretations

00:07:37,690 --> 00:07:46,870
this is how it really looks so we have a

00:07:43,330 --> 00:07:50,260
source of for from instructions and we

00:07:46,870 --> 00:07:53,740
have execute instructions so there will

00:07:50,260 --> 00:07:56,860
be ops is very similar to dock of our

00:07:53,740 --> 00:07:59,620
instructions but not always same for

00:07:56,860 --> 00:08:03,040
example we don't have it'll be up for

00:07:59,620 --> 00:08:06,820
expose in structure because exposed it's

00:08:03,040 --> 00:08:11,170
just a bit it's not real instruction and

00:08:06,820 --> 00:08:15,520
we have dependencies across file fire up

00:08:11,170 --> 00:08:17,830
at zero oxide states were ops so indium

00:08:15,520 --> 00:08:21,430
in this example a weak Institute state

00:08:17,830 --> 00:08:22,680
zero in the state's uma in parallel so

00:08:21,430 --> 00:08:27,640
it's very fast

00:08:22,680 --> 00:08:31,690
well example if we build GW Camacho

00:08:27,640 --> 00:08:34,620
business mobile using docker built with

00:08:31,690 --> 00:08:38,440
the real estate okay with ethics it took

00:08:34,620 --> 00:08:42,070
5 minutes and 42 seconds but always

00:08:38,440 --> 00:08:46,440
build it it just takes 2 minutes and 50

00:08:42,070 --> 00:08:46,440
seconds so it's 2 times faster

00:08:47,290 --> 00:08:56,170
inch with Billa teach you to exchange

00:08:50,860 --> 00:08:59,130
docker file with custom syntax so in the

00:08:56,170 --> 00:09:02,470
first line optical file you can specify

00:08:59,130 --> 00:09:04,930
front range image that translates a toka

00:09:02,470 --> 00:09:08,460
file into a letter B so for example you

00:09:04,930 --> 00:09:12,880
can specify syntax equal Dockers rustico

00:09:08,460 --> 00:09:15,880
51.2 were experimenter we can also

00:09:12,880 --> 00:09:20,440
specify you are all front range and you

00:09:15,880 --> 00:09:22,840
can also extend syntax as you rack so

00:09:20,440 --> 00:09:26,620
for example with docker file point white

00:09:22,840 --> 00:09:32,080
spirit term we have a new instruction

00:09:26,620 --> 00:09:37,080
court rad - mount type yes it will type

00:09:32,080 --> 00:09:41,350
chess or you can preserve chest or

00:09:37,080 --> 00:09:43,630
compilers such as go built-in chances or

00:09:41,350 --> 00:09:45,930
project managers such as up to date or

00:09:43,630 --> 00:09:45,930
yeah

00:09:46,510 --> 00:09:54,010
in p.m. or whatever so in this example

00:09:50,140 --> 00:09:56,760
you can specify the Kasbah for a sort of

00:09:54,010 --> 00:10:03,580
classic total cache which is used for

00:09:56,760 --> 00:10:08,050
cash or go grab objects so this is very

00:10:03,580 --> 00:10:12,190
fast so for example if we build build it

00:10:08,050 --> 00:10:18,190
yourself using a joker with legacy build

00:10:12,190 --> 00:10:19,720
it took 139 seconds and if you

00:10:18,190 --> 00:10:24,910
irritability

00:10:19,720 --> 00:10:28,300
it just takes 31 seconds and if you also

00:10:24,910 --> 00:10:30,310
enable or run - amount it is just take

00:10:28,300 --> 00:10:33,280
three point two nine seconds

00:10:30,310 --> 00:10:35,440
so this more than studies most and such

00:10:33,280 --> 00:10:38,040
a sweet times faster than realistic

00:10:35,440 --> 00:10:38,040
ability

00:10:39,110 --> 00:10:48,440
and you can also enable run does just

00:10:44,000 --> 00:10:51,740
mount type secret with extreme otoko

00:10:48,440 --> 00:10:55,250
fire front range so with a run - - man

00:10:51,740 --> 00:10:57,470
type secret you care access private

00:10:55,250 --> 00:11:03,290
assets such as a private detective

00:10:57,470 --> 00:11:06,410
repose or private sv budget wizard

00:11:03,290 --> 00:11:09,380
readings clinical fire in the final

00:11:06,410 --> 00:11:12,440
image so in this example is this

00:11:09,380 --> 00:11:17,210
parameter type secret exist by ID equal

00:11:12,440 --> 00:11:20,000
a SS specified target of mondopoint

00:11:17,210 --> 00:11:23,600
such as root trust creditors in the you

00:11:20,000 --> 00:11:27,140
camera AWS recipients for accessing

00:11:23,600 --> 00:11:30,230
files on your private is reported and

00:11:27,140 --> 00:11:33,530
you can use this token file by using

00:11:30,230 --> 00:11:38,330
built it here built as a secret ID in

00:11:33,530 --> 00:11:42,950
the breeze source your object we thought

00:11:38,330 --> 00:11:46,550
it obvious frustrations some of you may

00:11:42,950 --> 00:11:49,010
feel that you can just use copy

00:11:46,550 --> 00:11:52,660
instructions for injecting traditional

00:11:49,010 --> 00:11:56,170
files to the container and we can delete

00:11:52,660 --> 00:12:01,300
credential after you after you

00:11:56,170 --> 00:12:04,940
frequent but please don't do is because

00:12:01,300 --> 00:12:09,350
credential fire still remains in the

00:12:04,940 --> 00:12:14,210
layer archive even after you run RM

00:12:09,350 --> 00:12:16,960
command for removing creation file and

00:12:14,210 --> 00:12:19,880
some of you may feel that you can use

00:12:16,960 --> 00:12:22,610
docker builders to build up for

00:12:19,880 --> 00:12:25,130
injecting conditional files as

00:12:22,610 --> 00:12:28,430
environmental variable but this is not

00:12:25,130 --> 00:12:30,150
secure as well because the Builder are

00:12:28,430 --> 00:12:35,220
the barriers

00:12:30,150 --> 00:12:38,820
it's so toka history command so anywhere

00:12:35,220 --> 00:12:40,680
who has read access English can read you

00:12:38,820 --> 00:12:42,920
a credential as well so this is that's

00:12:40,680 --> 00:12:42,920
it

00:12:45,510 --> 00:12:51,930
so these were a couple of examples of

00:12:49,110 --> 00:12:56,190
new features in vogue it so let's see

00:12:51,930 --> 00:12:58,140
what how you can actually use it and the

00:12:56,190 --> 00:13:00,390
main takeaway from this is that there

00:12:58,140 --> 00:13:04,170
are many many ways different ways how

00:13:00,390 --> 00:13:06,120
you can start to use bilk it the most

00:13:04,170 --> 00:13:08,520
simplest one is that you can just use it

00:13:06,120 --> 00:13:11,610
through docker so it's integrated into

00:13:08,520 --> 00:13:13,230
docker building you can use docker build

00:13:11,610 --> 00:13:16,560
and it will just switch to poke it back

00:13:13,230 --> 00:13:19,350
and we have a new product now in darker

00:13:16,560 --> 00:13:24,630
called build X that will show a little

00:13:19,350 --> 00:13:26,750
bit later source of using poke it works

00:13:24,630 --> 00:13:29,280
there are other tools for example IMG is

00:13:26,750 --> 00:13:31,410
is a very particular version of build

00:13:29,280 --> 00:13:34,080
kit for the cases where you don't want

00:13:31,410 --> 00:13:35,970
to have a demon there are different

00:13:34,080 --> 00:13:39,030
projects that integrate with with

00:13:35,970 --> 00:13:42,930
polecat Tecton real pouch basically

00:13:39,030 --> 00:13:45,030
there's there's like you can use it in

00:13:42,930 --> 00:13:47,490
any combination inside container in in

00:13:45,030 --> 00:13:52,740
kubernetes without container the demon

00:13:47,490 --> 00:13:55,890
without it in rootless and so on so but

00:13:52,740 --> 00:13:57,990
yet the simplest one is talker build so

00:13:55,890 --> 00:14:00,510
it's iterated into the topper bills

00:13:57,990 --> 00:14:02,910
since 1809 so you seen the current

00:14:00,510 --> 00:14:04,950
stable version we don't have Windows

00:14:02,910 --> 00:14:08,010
support yet and so that's why it's

00:14:04,950 --> 00:14:09,450
opt-in so you need to enable you need to

00:14:08,010 --> 00:14:11,850
basically define this environment

00:14:09,450 --> 00:14:14,370
variable docker underscore bill kit

00:14:11,850 --> 00:14:16,470
equals 1 and if you do that then

00:14:14,370 --> 00:14:19,350
basically when you once you're on docker

00:14:16,470 --> 00:14:21,750
build again you your output will switch

00:14:19,350 --> 00:14:23,760
to this you will get output you will see

00:14:21,750 --> 00:14:25,350
stuff running in parallel see how much

00:14:23,760 --> 00:14:28,140
times it takes you know that you're now

00:14:25,350 --> 00:14:32,400
using doget all the flags are the same

00:14:28,140 --> 00:14:36,030
and like should work like the migration

00:14:32,400 --> 00:14:40,020
should be like very smooth so now about

00:14:36,030 --> 00:14:42,960
docker build X so talk about docker

00:14:40,020 --> 00:14:44,910
build X is is it's a CLI plugin

00:14:42,960 --> 00:14:47,280
new version of talker it's basically

00:14:44,910 --> 00:14:52,170
like a next generation bill comment from

00:14:47,280 --> 00:14:54,930
bokor it's very similar to to talk a

00:14:52,170 --> 00:14:57,810
build it has the same same build UI same

00:14:54,930 --> 00:15:01,070
flags so it's very very easy to start

00:14:57,810 --> 00:15:04,500
using it but it's using full bill kit

00:15:01,070 --> 00:15:06,710
daemon as a back-end so not only like

00:15:04,500 --> 00:15:09,150
the integrated part in the docker engine

00:15:06,710 --> 00:15:11,670
and it also has a bunch of new features

00:15:09,150 --> 00:15:14,370
not only like the single build command

00:15:11,670 --> 00:15:18,780
it can it can break you like names based

00:15:14,370 --> 00:15:21,330
instances of of builders it can you can

00:15:18,780 --> 00:15:26,070
basically create like a built cluster

00:15:21,330 --> 00:15:29,940
and target target like a like a set of

00:15:26,070 --> 00:15:31,980
nodes with it and and manage like how

00:15:29,940 --> 00:15:38,580
you how you would want a specific build

00:15:31,980 --> 00:15:40,800
to to be run and build extra ports like

00:15:38,580 --> 00:15:43,970
a driver concept this our like build X

00:15:40,800 --> 00:15:46,890
accesses that bill kit internally and

00:15:43,970 --> 00:15:50,820
for example with a container did sorry

00:15:46,890 --> 00:15:52,890
with a container driver that build the

00:15:50,820 --> 00:15:55,290
pill kit itself runs inside the docker

00:15:52,890 --> 00:15:57,990
container so what's cool about that is

00:15:55,290 --> 00:16:00,540
then you can use build ax with basically

00:15:57,990 --> 00:16:03,030
any version of docker engine so for

00:16:00,540 --> 00:16:05,190
example we do some we have some new

00:16:03,030 --> 00:16:07,020
build features you don't necessarily

00:16:05,190 --> 00:16:09,450
need to upgrade to a new version or

00:16:07,020 --> 00:16:11,340
toker engine to start to using use it

00:16:09,450 --> 00:16:12,930
you can you can use it with any older

00:16:11,340 --> 00:16:15,150
docker engine and it just runs inside

00:16:12,930 --> 00:16:18,990
the container completely completely

00:16:15,150 --> 00:16:22,110
standalone and because build excuses

00:16:18,990 --> 00:16:23,520
full pocket we can do some extra

00:16:22,110 --> 00:16:25,230
features that we can't do with the

00:16:23,520 --> 00:16:28,200
docker integration yet so these are a

00:16:25,230 --> 00:16:30,480
couple of examples in here for example

00:16:28,200 --> 00:16:32,760
we can do remote caching so this is very

00:16:30,480 --> 00:16:34,800
important for example for your CI when

00:16:32,760 --> 00:16:37,890
your build starts on a fresh machine

00:16:34,800 --> 00:16:39,330
doesn't have the local cache anymore so

00:16:37,890 --> 00:16:42,480
now you can connect it to an external

00:16:39,330 --> 00:16:47,130
cache source and you can still get much

00:16:42,480 --> 00:16:52,650
faster built this way and basically

00:16:47,130 --> 00:16:55,470
station trees then we also have a very

00:16:52,650 --> 00:16:56,370
good support for multi platform images

00:16:55,470 --> 00:16:59,879
in build ax

00:16:56,370 --> 00:17:02,720
so for this one you can just use this

00:16:59,879 --> 00:17:05,909
Dutchess platform flag and you can set

00:17:02,720 --> 00:17:10,740
to all the platforms where for what you

00:17:05,909 --> 00:17:12,150
want to build with Bill for and we will

00:17:10,740 --> 00:17:14,039
basically build for all of those

00:17:12,150 --> 00:17:16,260
platforms and combine them together into

00:17:14,039 --> 00:17:17,789
a multi platform image so your for

00:17:16,260 --> 00:17:21,390
example in this case your image will now

00:17:17,789 --> 00:17:24,049
run in both amd64 and our 9/64 machines

00:17:21,390 --> 00:17:26,880
and we will automatically connect with

00:17:24,049 --> 00:17:29,190
with like if you have like um you

00:17:26,880 --> 00:17:32,309
immolation support in your machine who

00:17:29,190 --> 00:17:35,640
we will take advantage of this it can

00:17:32,309 --> 00:17:37,649
also just use multiple native notes for

00:17:35,640 --> 00:17:40,289
example like a SS you can you can have

00:17:37,649 --> 00:17:42,419
like an in the 64 and arm node and you

00:17:40,289 --> 00:17:44,700
can connect them both in to build build

00:17:42,419 --> 00:17:48,240
X you run a single build and and it will

00:17:44,700 --> 00:17:50,700
actually build on on on my own poster

00:17:48,240 --> 00:17:51,809
those nodes in parallel and we also have

00:17:50,700 --> 00:17:53,730
actually a very good cross compilation

00:17:51,809 --> 00:17:57,529
support through the multi stage bills

00:17:53,730 --> 00:18:01,980
and docker file so let me quickly show

00:17:57,529 --> 00:18:05,549
this build acts as a demo in here see

00:18:01,980 --> 00:18:09,360
this is so as I said we have a docker

00:18:05,549 --> 00:18:10,620
build XCOM and in here and you can see

00:18:09,360 --> 00:18:12,539
that there are a bunch of sub commands

00:18:10,620 --> 00:18:14,340
in here so the most important this is

00:18:12,539 --> 00:18:16,320
probably the build so build this is

00:18:14,340 --> 00:18:20,669
basically very similar to the docker

00:18:16,320 --> 00:18:25,740
build you can you can just switch to it

00:18:20,669 --> 00:18:27,360
and and you will go familiar with it but

00:18:25,740 --> 00:18:30,299
there's bunch of other commands in here

00:18:27,360 --> 00:18:32,370
for example there's a format for

00:18:30,299 --> 00:18:33,929
creating new builders or listing them so

00:18:32,370 --> 00:18:38,820
let let's for example let's create a new

00:18:33,929 --> 00:18:43,250
born and sorry not great but buildings

00:18:38,820 --> 00:18:45,850
great and let's inspect what we just

00:18:43,250 --> 00:18:51,500
pray that

00:18:45,850 --> 00:18:53,800
and let's put this one as well I'm not

00:18:51,500 --> 00:18:57,430
going good

00:18:53,800 --> 00:18:58,810
so now we're we're putting this builder

00:18:57,430 --> 00:19:01,180
you don't actually need to do this it's

00:18:58,810 --> 00:19:03,700
the time as part of your your build flow

00:19:01,180 --> 00:19:06,580
as well and you can see that this is our

00:19:03,700 --> 00:19:08,110
new namespace builder this is all the

00:19:06,580 --> 00:19:09,970
platforms that that this machine

00:19:08,110 --> 00:19:12,870
supports and it's running inside toker

00:19:09,970 --> 00:19:16,270
container so if I do docker PS in here

00:19:12,870 --> 00:19:18,340
then you can see that that there's a new

00:19:16,270 --> 00:19:19,840
container in here and this is the

00:19:18,340 --> 00:19:22,420
container where actually the Builder is

00:19:19,840 --> 00:19:25,140
running so it's not using the daemon

00:19:22,420 --> 00:19:27,520
directly it's just training inside this

00:19:25,140 --> 00:19:32,770
inside this container and I have a

00:19:27,520 --> 00:19:37,170
simple project in here just like a

00:19:32,770 --> 00:19:37,170
simple docker file and

00:19:38,730 --> 00:19:44,700
and let's try to build this one and

00:19:42,210 --> 00:19:46,740
let's write to like to build this one is

00:19:44,700 --> 00:19:50,430
your multiplies from image so let's do

00:19:46,740 --> 00:19:53,850
dr. Pearle let's build let's specify

00:19:50,430 --> 00:19:57,980
some platforms so let's do in the 64 arm

00:19:53,850 --> 00:20:00,420
64 and arm let's give this a name and

00:19:57,980 --> 00:20:02,490
let's push it right away as well to the

00:20:00,420 --> 00:20:04,200
registry because this is how you mostly

00:20:02,490 --> 00:20:07,740
want to end up multiplied form images

00:20:04,200 --> 00:20:12,060
and let's build this one to see that

00:20:07,740 --> 00:20:14,190
it's quite fast and it's done what you

00:20:12,060 --> 00:20:16,890
would see in here is that we actually

00:20:14,190 --> 00:20:19,650
execute that all of those docker file

00:20:16,890 --> 00:20:21,390
commands three times so you can see that

00:20:19,650 --> 00:20:25,440
this this command in here for example

00:20:21,390 --> 00:20:28,320
run for arm and then and then for unit

00:20:25,440 --> 00:20:30,450
64 and then forum 64 and we created

00:20:28,320 --> 00:20:32,880
manifest for all those platforms and in

00:20:30,450 --> 00:20:37,260
the end we we joined them all together

00:20:32,880 --> 00:20:41,130
into a into a manifest lists makes up

00:20:37,260 --> 00:20:45,690
the multiply from image so let's inspect

00:20:41,130 --> 00:20:48,150
what we just built image tools inspected

00:20:45,690 --> 00:20:52,410
see the commander you can use to inspect

00:20:48,150 --> 00:20:54,030
stuff in the registry and see that this

00:20:52,410 --> 00:20:57,660
is this image that we just build is a

00:20:54,030 --> 00:21:00,330
multi-platform image these are their all

00:20:57,660 --> 00:21:02,400
the three sub manifests that would be to

00:21:00,330 --> 00:21:05,220
be used when when you run it so if I

00:21:02,400 --> 00:21:08,550
just run this image in here you will see

00:21:05,220 --> 00:21:13,380
that it will greet me and say that this

00:21:08,550 --> 00:21:18,780
machine is x86 but if I do the another

00:21:13,380 --> 00:21:21,060
one in here like for example this arm 64

00:21:18,780 --> 00:21:25,770
one that will run when a native or

00:21:21,060 --> 00:21:30,030
machine automatically and run this one

00:21:25,770 --> 00:21:33,360
with docker you'll see that this this

00:21:30,030 --> 00:21:36,030
sub image is now armed 64 so this was

00:21:33,360 --> 00:21:38,730
like a super easy way to how you can you

00:21:36,030 --> 00:21:40,920
can do a single build and fill the

00:21:38,730 --> 00:21:42,420
multi-platform image and how you can for

00:21:40,920 --> 00:21:46,340
example in case of arms you can start

00:21:42,420 --> 00:21:49,050
take advantage of all those this are of

00:21:46,340 --> 00:21:50,100
optimized our hardware that's coming out

00:21:49,050 --> 00:21:55,920
now

00:21:50,100 --> 00:21:59,790
and it's not only for like this

00:21:55,920 --> 00:22:02,610
well-known product forms like like x86

00:21:59,790 --> 00:22:05,520
and arm will also use the same thing to

00:22:02,610 --> 00:22:08,910
do some some other crazier experiments

00:22:05,520 --> 00:22:11,040
so you can use the same tools also to

00:22:08,910 --> 00:22:13,110
build like webassembly containers and

00:22:11,040 --> 00:22:14,760
you can actually run them in either in

00:22:13,110 --> 00:22:19,590
which container D with the special shim

00:22:14,760 --> 00:22:22,530
or or there's also a tool I created that

00:22:19,590 --> 00:22:25,530
that allows you to run those those

00:22:22,530 --> 00:22:28,230
wasn't containers basically in any any

00:22:25,530 --> 00:22:31,290
machine without any requirement for for

00:22:28,230 --> 00:22:33,720
docker demon for example and there's

00:22:31,290 --> 00:22:36,480
also risk five that's speaking of

00:22:33,720 --> 00:22:40,620
popularity so you can use the same tools

00:22:36,480 --> 00:22:42,360
already to to build some for some early

00:22:40,620 --> 00:22:43,890
risk for containers so if you're

00:22:42,360 --> 00:22:46,710
interested of any of those topics you

00:22:43,890 --> 00:22:50,930
can follow up follow it up from those

00:22:46,710 --> 00:22:54,750
links so this was how you could use

00:22:50,930 --> 00:22:58,760
toolkit with docker a curable talk to

00:22:54,750 --> 00:22:58,760
you how to use it as far as kubernetes

00:22:59,030 --> 00:23:04,620
so why do we want to build image or

00:23:02,340 --> 00:23:07,500
actual parent is I think they're two

00:23:04,620 --> 00:23:10,920
different materials the first way is for

00:23:07,500 --> 00:23:14,250
a CI CD so we have a bunch of builder to

00:23:10,920 --> 00:23:17,280
the pods in the cluster and weak rotor

00:23:14,250 --> 00:23:19,500
balanced using this cluster and we have

00:23:17,280 --> 00:23:21,960
some port for connecting to a

00:23:19,500 --> 00:23:26,450
periodicity port supports that which can

00:23:21,960 --> 00:23:30,120
be just changes or tik-tok or any a CD

00:23:26,450 --> 00:23:33,270
platform so they can be probably invoked

00:23:30,120 --> 00:23:35,490
appear somewhere fluke and second

00:23:33,270 --> 00:23:40,410
motivation is for a developer experience

00:23:35,490 --> 00:23:44,940
so you write code or some rough top with

00:23:40,410 --> 00:23:48,000
poor CPU in rub and freaky Wi-Fi and a

00:23:44,940 --> 00:23:50,900
property so this laptop is enough for

00:23:48,000 --> 00:23:55,500
writing codes but it's not good for

00:23:50,900 --> 00:23:59,010
building complex images so you can just

00:23:55,500 --> 00:24:00,970
migrate you are built onto cluster and

00:23:59,010 --> 00:24:05,020
you can wrote about us

00:24:00,970 --> 00:24:09,540
it's using these pods with rich CPU

00:24:05,020 --> 00:24:16,150
memory and stable and fast Network and

00:24:09,540 --> 00:24:18,820
stable power supply previously is a

00:24:16,150 --> 00:24:23,140
comput and to build images on cuban test

00:24:18,820 --> 00:24:26,200
was to toka put with buying the mounting

00:24:23,140 --> 00:24:29,800
thrush pass rush rush rush to cut up

00:24:26,200 --> 00:24:32,740
soap but this is not secure so if the

00:24:29,800 --> 00:24:36,550
port is compromised the host can get

00:24:32,740 --> 00:24:39,850
compromised as well because bus

00:24:36,550 --> 00:24:44,650
transfers polka dot sock provides fruit

00:24:39,850 --> 00:24:48,190
clearly protonated to host our supporter

00:24:44,650 --> 00:24:50,590
was to run talk dean dukkha did into the

00:24:48,190 --> 00:24:53,590
kind of rapport with security code is

00:24:50,590 --> 00:24:58,090
not privileged but this is not secure as

00:24:53,590 --> 00:25:01,390
we're upon 3 so who built it we support

00:24:58,090 --> 00:25:04,900
route rest mode that means running

00:25:01,390 --> 00:25:07,090
ability to demo as non-root user so as

00:25:04,900 --> 00:25:10,390
the product is the host from potential

00:25:07,090 --> 00:25:12,460
abilities vulnerabilities so even if the

00:25:10,390 --> 00:25:18,280
periodically deported compromised the

00:25:12,460 --> 00:25:20,410
host channel to be compromised and using

00:25:18,280 --> 00:25:25,600
username species

00:25:20,410 --> 00:25:28,840
so for run to compile instructions you

00:25:25,600 --> 00:25:31,360
can gain some factory privileges YouTube

00:25:28,840 --> 00:25:34,570
username space so you can still run

00:25:31,360 --> 00:25:39,580
previous commands such as up-to-date or

00:25:34,570 --> 00:25:42,670
young or DNS or whatever and to run our

00:25:39,580 --> 00:25:44,860
ability in cuban test you don't need to

00:25:42,670 --> 00:25:47,140
have any extra secretary security

00:25:44,860 --> 00:25:50,110
countries right duty consists of

00:25:47,140 --> 00:25:53,260
privileged but country you need to

00:25:50,110 --> 00:25:57,480
disable sitcom and aprama because we

00:25:53,260 --> 00:25:57,480
need to nest context on the top of the

00:25:58,720 --> 00:26:04,370
this also very similar to called koneko

00:26:03,020 --> 00:26:09,080
but it's different

00:26:04,370 --> 00:26:12,170
so koneko still runs as a guru user but

00:26:09,080 --> 00:26:16,220
it's kind of unreleased so you don't get

00:26:12,170 --> 00:26:19,430
disabled seccomp and up-armored so

00:26:16,220 --> 00:26:22,190
koneko might be able to mitigate some

00:26:19,430 --> 00:26:26,510
pollen abilities that ability cannot

00:26:22,190 --> 00:26:29,840
indicate in vice versa so Rudra

00:26:26,510 --> 00:26:33,700
stability might be still weak against

00:26:29,840 --> 00:26:37,700
some kind of vulnerabilities that can

00:26:33,700 --> 00:26:41,300
accommodate each kanakamma we still with

00:26:37,700 --> 00:26:44,270
some runs II gotta break out to partner

00:26:41,300 --> 00:26:48,920
with such brutal stability

00:26:44,270 --> 00:26:52,520
chemita get the next topic is deployment

00:26:48,920 --> 00:26:56,960
strategy so we we can deploy our ability

00:26:52,520 --> 00:27:01,340
as just deployment for demons it was it

00:26:56,960 --> 00:27:05,390
was it or even just as a job with that

00:27:01,340 --> 00:27:08,750
separate demo pods the most typical

00:27:05,390 --> 00:27:11,660
deployment is to use deployment but you

00:27:08,750 --> 00:27:14,060
can also consider using demons it so it

00:27:11,660 --> 00:27:17,300
has optimal Road branding but it's not

00:27:14,060 --> 00:27:20,750
not optimal for testing when you have a

00:27:17,300 --> 00:27:23,960
lot of notes and you can also consulting

00:27:20,750 --> 00:27:27,200
state posit it's good to consisted

00:27:23,960 --> 00:27:27,860
hosting that we will discuss later but

00:27:27,200 --> 00:27:32,060
it has

00:27:27,860 --> 00:27:37,270
Toro box or scissoring and you can also

00:27:32,060 --> 00:27:40,970
consider using a job in job you need

00:27:37,270 --> 00:27:44,410
client intramural demo in a single

00:27:40,970 --> 00:27:46,970
container so it has some drawbacks or

00:27:44,410 --> 00:27:49,730
chance to stuff but you don't need to

00:27:46,970 --> 00:27:51,710
manage the right size of the demons so

00:27:49,730 --> 00:27:56,070
probably a job is the most easiest

00:27:51,710 --> 00:28:02,170
easiest deployment

00:27:56,070 --> 00:28:06,490
in purchasing a jobs bill demo what has

00:28:02,170 --> 00:28:11,140
owned cash and the ability of the food

00:28:06,490 --> 00:28:13,470
shares just using this story and for all

00:28:11,140 --> 00:28:17,680
of our thing we can just use some

00:28:13,470 --> 00:28:20,680
regular service with the round robin so

00:28:17,680 --> 00:28:23,530
if you build image requests

00:28:20,680 --> 00:28:26,080
it's handled by some ability demo and

00:28:23,530 --> 00:28:29,830
it's the input of chess room there is

00:28:26,080 --> 00:28:35,560
three and expose updated it has to the

00:28:29,830 --> 00:28:38,850
register but the demoted cash of the

00:28:35,560 --> 00:28:42,730
registry is through compared to the

00:28:38,850 --> 00:28:45,820
demon room cultures so for example it

00:28:42,730 --> 00:28:50,500
takes two minutes and 50 seconds without

00:28:45,820 --> 00:28:55,270
cash where you have a cash industry it

00:28:50,500 --> 00:28:57,820
takes 36 seconds so it's very fast but

00:28:55,270 --> 00:29:00,670
it's still slow compared to demon ruler

00:28:57,820 --> 00:29:06,190
cash so with Damon Google cast it just

00:29:00,670 --> 00:29:09,820
takes 0.5 seconds so it's more than

00:29:06,190 --> 00:29:13,750
stable 70 times faster the remoter cast

00:29:09,820 --> 00:29:18,070
of the history so if you want to make

00:29:13,750 --> 00:29:22,630
use of demon ruler yes you should

00:29:18,070 --> 00:29:25,480
consider using consistent hashing so you

00:29:22,630 --> 00:29:28,390
can stick beauty queen to a specific put

00:29:25,480 --> 00:29:32,200
in state apostate so you can always hit

00:29:28,390 --> 00:29:34,990
the demon local cache so for example we

00:29:32,200 --> 00:29:35,320
have three beautiful to put our bill to

00:29:34,990 --> 00:29:38,440
zero

00:29:35,320 --> 00:29:40,420
well two and we have three token files

00:29:38,440 --> 00:29:43,060
foods rustic of our past as local fire

00:29:40,420 --> 00:29:47,620
in the past restore a file and we apply

00:29:43,060 --> 00:29:52,420
same custom functions to these periodic

00:29:47,620 --> 00:29:55,930
reports and toka file names in this site

00:29:52,420 --> 00:29:58,060
rehearsal space so we can assign a full

00:29:55,930 --> 00:30:00,880
thrust oka file and the brothers local

00:29:58,060 --> 00:30:02,920
file to build too deep to and we can

00:30:00,880 --> 00:30:06,130
assign a badge Russ talk of our ability

00:30:02,920 --> 00:30:08,650
to deliver so even if you modify the

00:30:06,130 --> 00:30:11,500
content of Doka file or you

00:30:08,650 --> 00:30:17,050
ahtur he was a demon with nose in the

00:30:11,500 --> 00:30:20,830
cluster you can almost always hit yes is

00:30:17,050 --> 00:30:27,730
visit the Demel port but this is not up

00:30:20,830 --> 00:30:31,900
tomorrow who wrote about see ya so just

00:30:27,730 --> 00:30:34,090
a recap so built it is a modern builder

00:30:31,900 --> 00:30:37,020
tool kit built on top of a next

00:30:34,090 --> 00:30:40,780
generation of container tools it has

00:30:37,020 --> 00:30:45,460
significant advantages over any previous

00:30:40,780 --> 00:30:47,980
tools basically it will beat any other

00:30:45,460 --> 00:30:50,830
builder in any benchmark as far as I

00:30:47,980 --> 00:30:52,210
know you can start to use it today you

00:30:50,830 --> 00:30:54,550
can use it with docker you can use it

00:30:52,210 --> 00:30:56,890
with kubernetes any-any basically any

00:30:54,550 --> 00:31:01,900
tool you you use it's probably like has

00:30:56,890 --> 00:31:05,560
some integration with pocket and it's an

00:31:01,900 --> 00:31:08,710
open platform for for collaboration

00:31:05,560 --> 00:31:11,020
around build and to have like the new

00:31:08,710 --> 00:31:16,540
innovative solutions for for building

00:31:11,020 --> 00:31:19,900
containers so if your so make sure you

00:31:16,540 --> 00:31:22,030
opt in to opt into the pocket in in

00:31:19,900 --> 00:31:23,200
docker and start using it if you're

00:31:22,030 --> 00:31:26,020
interested in the projects there are

00:31:23,200 --> 00:31:29,110
like lots of interesting things in the

00:31:26,020 --> 00:31:31,060
work in the works so if you're

00:31:29,110 --> 00:31:34,050
interested in that side make sure to

00:31:31,060 --> 00:31:37,620
join us in the repository in github and

00:31:34,050 --> 00:31:37,620
I thank you very much

00:31:39,580 --> 00:31:47,340
I think a little bit time for questions

00:31:44,200 --> 00:31:47,340
right yeah

00:31:48,570 --> 00:31:52,339
any questions on Thursday

00:31:57,790 --> 00:32:03,520
sorry if I miss it but can built get to

00:32:00,640 --> 00:32:07,990
deterministic builds sorry can build get

00:32:03,520 --> 00:32:11,050
do deterministic builds it depends on

00:32:07,990 --> 00:32:16,300
how you define deterministic so in in

00:32:11,050 --> 00:32:18,880
most cases yes if you're like like in

00:32:16,300 --> 00:32:22,590
almost all cases it's good enough but

00:32:18,880 --> 00:32:25,660
but yeah like if you're like going after

00:32:22,590 --> 00:32:28,330
after like preserving time steps and

00:32:25,660 --> 00:32:29,740
things like that then then you will at

00:32:28,330 --> 00:32:31,930
the moment you will do need to do some

00:32:29,740 --> 00:32:34,630
stuff manually inside inside docker file

00:32:31,930 --> 00:32:36,790
for example for that okay yeah so you

00:32:34,630 --> 00:32:39,100
can like strip existing you can strip

00:32:36,790 --> 00:32:42,220
all timestamps yeah like for example

00:32:39,100 --> 00:32:43,750
like we do we do to stuff better than

00:32:42,220 --> 00:32:45,670
they'll build it for example I code

00:32:43,750 --> 00:32:47,770
builder for example like time stamps all

00:32:45,670 --> 00:32:48,640
your images and stuff like that we we

00:32:47,770 --> 00:32:50,530
try to avoid that

00:32:48,640 --> 00:32:52,540
like if you're a reason cache then we

00:32:50,530 --> 00:32:54,940
don't timestamp it again and we we do

00:32:52,540 --> 00:32:57,030
some some stuff like that awesome thank

00:32:54,940 --> 00:32:57,030
you

00:33:09,070 --> 00:33:18,440
hello questions you just show as a top

00:33:15,380 --> 00:33:21,380
builder xprize so I won't know the

00:33:18,440 --> 00:33:23,450
weather's bill is the family's party by

00:33:21,380 --> 00:33:26,870
the mobile purchase or just maintained

00:33:23,450 --> 00:33:29,630
by yourself so bill tax is part of the

00:33:26,870 --> 00:33:32,420
talker organization so it's so it's it's

00:33:29,630 --> 00:33:36,800
still open source it's get up / talker /

00:33:32,420 --> 00:33:39,980
bill likes chips with with like that

00:33:36,800 --> 00:33:41,390
current beta version of talker so so we

00:33:39,980 --> 00:33:43,280
can you can get it that's part of like

00:33:41,390 --> 00:33:45,140
the Community Edition and and you can

00:33:43,280 --> 00:33:47,000
contribute to it and things like that

00:33:45,140 --> 00:33:48,950
but it's like guys it's a little bit

00:33:47,000 --> 00:33:50,840
more opinionated and then bill kit

00:33:48,950 --> 00:33:52,100
itself that's why it's like in talker

00:33:50,840 --> 00:33:55,250
organization not in the mobile

00:33:52,100 --> 00:34:00,320
organization okay so another question is

00:33:55,250 --> 00:34:03,190
and I won't know any new features or big

00:34:00,320 --> 00:34:07,070
changes in the pipeline for the next

00:34:03,190 --> 00:34:11,210
release or other future work any such

00:34:07,070 --> 00:34:15,170
plane what's the question about

00:34:11,210 --> 00:34:18,470
questions on either any other features

00:34:15,170 --> 00:34:20,960
oh yeah yeah yeah in the pipeline that

00:34:18,470 --> 00:34:23,840
may be implemented in the future yeah

00:34:20,960 --> 00:34:26,540
you can look at the github repository we

00:34:23,840 --> 00:34:29,030
have like we have done of tonne of

00:34:26,540 --> 00:34:31,280
issues with like feature feature request

00:34:29,030 --> 00:34:33,410
or enhancement Treville there I think

00:34:31,280 --> 00:34:37,010
the big ones are that we want to do like

00:34:33,410 --> 00:34:40,460
fully distributed bills and we want to

00:34:37,010 --> 00:34:43,100
just like basically make the developer

00:34:40,460 --> 00:34:46,130
flow much for much more smoother so we

00:34:43,100 --> 00:34:47,690
can like add some more debugging

00:34:46,130 --> 00:34:49,310
capabilities and things like that as

00:34:47,690 --> 00:34:53,090
well like that would be really cool in

00:34:49,310 --> 00:34:56,090
the next features ok saying thank you we

00:34:53,090 --> 00:34:57,950
also have some crown for Nesta - dr.

00:34:56,090 --> 00:35:00,800
white so you can

00:34:57,950 --> 00:35:03,520
difference unless I talk on fire from

00:35:00,800 --> 00:35:03,520
you a talk on fire

00:35:10,980 --> 00:35:15,019

YouTube URL: https://www.youtube.com/watch?v=5KgaisTEzC8


