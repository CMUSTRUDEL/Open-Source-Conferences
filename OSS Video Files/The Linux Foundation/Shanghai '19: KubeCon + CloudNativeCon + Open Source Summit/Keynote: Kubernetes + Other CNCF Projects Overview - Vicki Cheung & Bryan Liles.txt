Title: Keynote: Kubernetes + Other CNCF Projects Overview - Vicki Cheung & Bryan Liles
Publication date: 2019-07-05
Playlist: Shanghai '19: KubeCon + CloudNativeCon + Open Source Summit
Description: 
	Keynote: Kubernetes + Other CNCF Projects Overview - Vicki Cheung, Engineering Manager, Lyft & Bryan Liles, Senior Staff Engineer, VMware 

Join us for KubeCon + CloudNativeCon in San Diego November 18 - 21 and in Amsterdam March 30 â€“ April 2, 2020! Learn more at https://kubecon.io. The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy and all of the other CNCF-hosted projects.  

https://sched.co/Nxs3
Captions: 
	00:00:00,030 --> 00:00:05,730
I'd like to kick off our evening

00:00:01,770 --> 00:00:09,360
keynotes with an overview and update on

00:00:05,730 --> 00:00:12,330
kubernetes last month we saw the fifth

00:00:09,360 --> 00:00:15,509
birthday of kubernetes and in the last

00:00:12,330 --> 00:00:17,869
five years we've seen seemingly

00:00:15,509 --> 00:00:21,330
unstoppable growth from the project

00:00:17,869 --> 00:00:24,630
there are now over 2,100 contributors

00:00:21,330 --> 00:00:27,779
and growing and there are many reasons

00:00:24,630 --> 00:00:30,660
why it has attracted all of us here

00:00:27,779 --> 00:00:33,780
today I think one of the main reasons

00:00:30,660 --> 00:00:36,690
safe to say is the community which media

00:00:33,780 --> 00:00:40,170
is amazing and with that I'd like to

00:00:36,690 --> 00:00:42,540
talk about some of the work that our

00:00:40,170 --> 00:00:48,239
contributors have been working on for

00:00:42,540 --> 00:00:52,610
the newer releases so let me do a couple

00:00:48,239 --> 00:00:52,610
of highlights from kubernetes 114

00:00:54,140 --> 00:01:00,239
surahs' 114 came with 31 enhancements

00:00:57,530 --> 00:01:03,890
with a big focus on supporting new

00:01:00,239 --> 00:01:07,290
workloads and making kubernetes

00:01:03,890 --> 00:01:13,770
extensible there's a huge focus also on

00:01:07,290 --> 00:01:16,409
moving features to stability so the big

00:01:13,770 --> 00:01:18,210
one I think is one that everyone's been

00:01:16,409 --> 00:01:20,909
talking about which is Windows support

00:01:18,210 --> 00:01:24,450
Windows support graduated to stable with

00:01:20,909 --> 00:01:27,210
114 so now you can have your Linux and

00:01:24,450 --> 00:01:31,320
Windows workloads running in the same

00:01:27,210 --> 00:01:33,990
cluster the possibilities are limitless

00:01:31,320 --> 00:01:35,880
you can have you can provide the same

00:01:33,990 --> 00:01:38,070
developer experience to your Linux and

00:01:35,880 --> 00:01:42,329
windows developers they can run in the

00:01:38,070 --> 00:01:46,680
same infrastructure with this release we

00:01:42,329 --> 00:01:50,159
have Windows Server 2019 support for the

00:01:46,680 --> 00:01:52,049
worker notes and containers there's also

00:01:50,159 --> 00:01:57,840
out of tree networking support for a

00:01:52,049 --> 00:02:00,090
number of networking options so yeah

00:01:57,840 --> 00:02:04,740
that's no longer excuse for not running

00:02:00,090 --> 00:02:08,720
it into Burnett ease another exciting

00:02:04,740 --> 00:02:11,459
thing is pod ready plus plus allows

00:02:08,720 --> 00:02:13,200
custom external feedback on pot

00:02:11,459 --> 00:02:15,629
readiness this is an example

00:02:13,200 --> 00:02:19,379
of how you might want to define it so

00:02:15,629 --> 00:02:21,900
this is for a very practical case of

00:02:19,379 --> 00:02:24,000
when your container is up and running it

00:02:21,900 --> 00:02:26,430
doesn't mean that's ready to take

00:02:24,000 --> 00:02:29,370
traffic you might have a dependency on

00:02:26,430 --> 00:02:32,160
something external like creating a load

00:02:29,370 --> 00:02:35,160
balancer waiting for the network stack

00:02:32,160 --> 00:02:37,410
to come up so your container is running

00:02:35,160 --> 00:02:39,989
but you can't actually send traffic to

00:02:37,410 --> 00:02:43,709
it yet so you want to give it the

00:02:39,989 --> 00:02:46,500
cluster feedback so that your your your

00:02:43,709 --> 00:02:47,130
rolling updates won't take down the old

00:02:46,500 --> 00:02:50,880
pots

00:02:47,130 --> 00:02:53,040
until the new pots are truly ready so

00:02:50,880 --> 00:02:56,940
this is an example of how you might have

00:02:53,040 --> 00:03:01,890
two extra conditions for defining that

00:02:56,940 --> 00:03:03,329
the pot is ready pot priority and

00:03:01,890 --> 00:03:05,370
preemption this is one that I'm

00:03:03,329 --> 00:03:07,860
personally super excited about because

00:03:05,370 --> 00:03:11,700
I've been using it since it came out in

00:03:07,860 --> 00:03:13,650
alpha so this is a way for you to

00:03:11,700 --> 00:03:16,019
improve your clusters resource

00:03:13,650 --> 00:03:19,170
utilization while ensuring that your

00:03:16,019 --> 00:03:21,720
critical workloads remain scheduled this

00:03:19,170 --> 00:03:23,670
is a great option if you're running in

00:03:21,720 --> 00:03:26,549
your own data center you have some fixed

00:03:23,670 --> 00:03:28,530
size cluster or even when you're in the

00:03:26,549 --> 00:03:30,900
cloud you might you might run into a

00:03:28,530 --> 00:03:35,069
situation where you run out of cloud

00:03:30,900 --> 00:03:38,400
which I promise you can happen cloud has

00:03:35,069 --> 00:03:41,639
capacity limits too or another case that

00:03:38,400 --> 00:03:44,850
I see people using this is when you have

00:03:41,639 --> 00:03:47,910
very very latency sensitive workloads so

00:03:44,850 --> 00:03:50,459
you want to evict pots so that you can

00:03:47,910 --> 00:03:52,889
schedule the sensitive workloads on

00:03:50,459 --> 00:03:58,730
before while you're waiting for new

00:03:52,889 --> 00:04:04,530
loads or new notes to provision so now

00:03:58,730 --> 00:04:08,220
graduated and then another one for

00:04:04,530 --> 00:04:11,459
supporting new workloads is supporting

00:04:08,220 --> 00:04:13,769
more stateful services this is

00:04:11,459 --> 00:04:17,400
persistent local volume has graduated to

00:04:13,769 --> 00:04:20,430
stable using local storage with the same

00:04:17,400 --> 00:04:23,280
persistent volume API the scheduler

00:04:20,430 --> 00:04:26,070
awareness means that

00:04:23,280 --> 00:04:27,990
if you have a local volume and you

00:04:26,070 --> 00:04:30,510
recreate a pot that uses that local

00:04:27,990 --> 00:04:32,580
volume the scheduler is now aware to

00:04:30,510 --> 00:04:35,460
schedule it onto the appropriate note

00:04:32,580 --> 00:04:37,260
that actually has that local volume it

00:04:35,460 --> 00:04:39,660
will automatically format and mount the

00:04:37,260 --> 00:04:43,140
file system this is perfect for running

00:04:39,660 --> 00:04:46,640
things like Kafka or any other stateful

00:04:43,140 --> 00:04:53,100
things that need high-performance

00:04:46,640 --> 00:04:55,140
storage lastly I want to talk about the

00:04:53,100 --> 00:04:59,340
enhancements that came with coop cuddle

00:04:55,140 --> 00:05:01,980
so coop cuddle plugins are graduating to

00:04:59,340 --> 00:05:03,900
stable if you haven't looked at two

00:05:01,980 --> 00:05:07,890
petal plugins they're super cool way to

00:05:03,900 --> 00:05:11,550
introduce your org to kubernetes it's

00:05:07,890 --> 00:05:13,860
kind of thin and soft thing of where

00:05:11,550 --> 00:05:16,380
infrastructure engineers and we use coop

00:05:13,860 --> 00:05:18,360
cuddle but how do we introduce the rest

00:05:16,380 --> 00:05:20,850
of our engineering team to it coop

00:05:18,360 --> 00:05:23,520
kettle has tons of options and very

00:05:20,850 --> 00:05:26,580
intimidating so two petal plugin is a

00:05:23,520 --> 00:05:28,740
great way to package whatever custom

00:05:26,580 --> 00:05:30,690
commands or shortcuts you might have and

00:05:28,740 --> 00:05:32,790
distribute that to your team so that

00:05:30,690 --> 00:05:34,650
they don't have to have the steep

00:05:32,790 --> 00:05:38,850
learning curve onboarding institute

00:05:34,650 --> 00:05:42,870
cuddles it also we release the

00:05:38,850 --> 00:05:46,070
customized integration so customize is a

00:05:42,870 --> 00:05:49,290
super convenient way of patching

00:05:46,070 --> 00:05:55,050
kubernetes manifest without creating

00:05:49,290 --> 00:05:56,940
templates so here's an example of a time

00:05:55,050 --> 00:06:00,600
when you might use the coop petal plugin

00:05:56,940 --> 00:06:04,470
this is straight from the ingress nginx

00:06:00,600 --> 00:06:06,810
project and again it's an example of

00:06:04,470 --> 00:06:11,090
when you might want to package some

00:06:06,810 --> 00:06:14,550
convenient commands for your users and

00:06:11,090 --> 00:06:19,800
we also recently saw the release of

00:06:14,550 --> 00:06:22,350
Kerberos 115 Tavares 115 came with 25

00:06:19,800 --> 00:06:25,890
enhancements with a focus being

00:06:22,350 --> 00:06:30,780
extensibility and continuing improvement

00:06:25,890 --> 00:06:33,230
for stability and maturity so very

00:06:30,780 --> 00:06:38,270
quickly I want to talk about

00:06:33,230 --> 00:06:43,070
um CRTs their new features coming out

00:06:38,270 --> 00:06:44,870
for CRTs in 115 including pruning and

00:06:43,070 --> 00:06:49,970
defaulting

00:06:44,870 --> 00:06:52,820
there's also opening API support in the

00:06:49,970 --> 00:06:54,950
cluster lifecycle Department there's

00:06:52,820 --> 00:06:59,900
very exciting development coming from

00:06:54,950 --> 00:07:02,720
tube atom so now you can have a high

00:06:59,900 --> 00:07:05,030
availability cluster provisioning moving

00:07:02,720 --> 00:07:06,950
to beta so out of the box you can

00:07:05,030 --> 00:07:09,470
provision the higher available highly

00:07:06,950 --> 00:07:11,360
available clusters with two atoms you

00:07:09,470 --> 00:07:15,020
can also have two atom manage your

00:07:11,360 --> 00:07:17,540
certificate rotations which is always a

00:07:15,020 --> 00:07:23,840
pain so now you don't have to do that

00:07:17,540 --> 00:07:26,810
anymore there's also a call-out for CSI

00:07:23,840 --> 00:07:30,860
I want to call out that you can now

00:07:26,810 --> 00:07:37,970
clone another volume by specifying a

00:07:30,860 --> 00:07:42,610
data source to clone from so yes and

00:07:37,970 --> 00:07:46,160
with that I want to pass it to Bryan

00:07:42,610 --> 00:07:49,160
Bryan is a senior staff engineer at

00:07:46,160 --> 00:07:51,400
VMware and he's my fellow co-chair coop

00:07:49,160 --> 00:07:51,400
Khan

00:07:52,750 --> 00:07:55,980
[Music]

00:08:05,950 --> 00:08:13,280
so I'm Bryan Liles I work at VMware it

00:08:11,900 --> 00:08:18,020
feels like we've already had a lot of

00:08:13,280 --> 00:08:21,560
vmware people on the stage today so what

00:08:18,020 --> 00:08:27,170
i'm going to talk about is CN CF project

00:08:21,560 --> 00:08:30,830
update and there are 30 plus projects

00:08:27,170 --> 00:08:33,650
and that is are in CN CF whether they

00:08:30,830 --> 00:08:36,950
have graduated or an incubating or in

00:08:33,650 --> 00:08:40,160
staging I was told that I only have 10

00:08:36,950 --> 00:08:45,050
minutes so I had to pick a few projects

00:08:40,160 --> 00:08:49,700
to look at I thought about it and what I

00:08:45,050 --> 00:08:51,650
realized is um I flew 26 hours to come

00:08:49,700 --> 00:08:54,170
here to China to talk with you all today

00:08:51,650 --> 00:08:57,320
so we're going to talk about some

00:08:54,170 --> 00:08:58,700
Chinese projects but we're also going to

00:08:57,320 --> 00:09:02,750
talk about some of my favorites as well

00:08:58,700 --> 00:09:06,590
so let's get started the first one I

00:09:02,750 --> 00:09:09,710
want to talk about is a tkv and what CTV

00:09:06,590 --> 00:09:11,840
is a distributed transactional key value

00:09:09,710 --> 00:09:16,370
database that's a lot of words to

00:09:11,840 --> 00:09:20,270
basically say that what TKB makes easy

00:09:16,370 --> 00:09:27,620
is having key values whether they are

00:09:20,270 --> 00:09:30,440
local storage or distributed so what are

00:09:27,620 --> 00:09:33,980
the great features so geo replication

00:09:30,440 --> 00:09:37,580
you can actually have a key value

00:09:33,980 --> 00:09:40,460
database that is here it could be in

00:09:37,580 --> 00:09:42,890
Beijing it could actually it could be in

00:09:40,460 --> 00:09:45,200
Japan we could go across the Pacific to

00:09:42,890 --> 00:09:47,420
the west coast of United States keep on

00:09:45,200 --> 00:09:48,590
going across the United States to let's

00:09:47,420 --> 00:09:52,040
say the east coast of the United States

00:09:48,590 --> 00:09:55,130
and guess what the software actually

00:09:52,040 --> 00:09:58,660
supports that another important piece is

00:09:55,130 --> 00:10:01,730
that it scales to a large size 100-plus

00:09:58,660 --> 00:10:03,890
terabytes of data and the neat thing

00:10:01,730 --> 00:10:08,210
about this is why you actually might use

00:10:03,890 --> 00:10:11,570
ckv is because you actually have a key

00:10:08,210 --> 00:10:13,550
value storage that has transactions and

00:10:11,570 --> 00:10:14,089
these transactions could be distributed

00:10:13,550 --> 00:10:16,069
if

00:10:14,089 --> 00:10:18,139
anyone's actually worked with a key

00:10:16,069 --> 00:10:20,540
value stores like say Redis you

00:10:18,139 --> 00:10:24,259
understand why you might want a

00:10:20,540 --> 00:10:26,540
distributed transaction and just because

00:10:24,259 --> 00:10:28,670
I wanted to give a little shout out to

00:10:26,540 --> 00:10:30,829
all the people who put together the

00:10:28,670 --> 00:10:32,779
release notes I put all the release

00:10:30,829 --> 00:10:35,209
notes for two point one on this slide

00:10:32,779 --> 00:10:39,079
but really the most important piece here

00:10:35,209 --> 00:10:41,209
that from what I'm seeing is that GTV is

00:10:39,079 --> 00:10:43,459
getting closer to being able to support

00:10:41,209 --> 00:10:46,040
more of the raft protocol which means

00:10:43,459 --> 00:10:49,220
that whenever you add and remove nodes

00:10:46,040 --> 00:10:52,639
from your from your actual clusters is

00:10:49,220 --> 00:10:54,920
that it becomes easier and there's less

00:10:52,639 --> 00:10:57,529
contention and it becomes faster and

00:10:54,920 --> 00:11:00,110
then also about that hotspot scheduling

00:10:57,529 --> 00:11:03,649
that's another interesting thing if you

00:11:00,110 --> 00:11:06,499
have a set of values or a set of nodes

00:11:03,649 --> 00:11:10,550
that are receiving lots of data TKB can

00:11:06,499 --> 00:11:15,470
now actually move things around for you

00:11:10,550 --> 00:11:19,579
I like that the next thing is I'm going

00:11:15,470 --> 00:11:22,550
to talk about is harbour and Stephen my

00:11:19,579 --> 00:11:25,279
co-worker talked about this earlier but

00:11:22,550 --> 00:11:27,620
what I want to do is a highlight another

00:11:25,279 --> 00:11:29,990
Chinese project but really what I want

00:11:27,620 --> 00:11:34,809
to shout out is what harbour really

00:11:29,990 --> 00:11:34,809
comes down to there are lots of

00:11:34,959 --> 00:11:39,410
container registries that you can choose

00:11:37,370 --> 00:11:41,899
but the problem that we always have a

00:11:39,410 --> 00:11:45,259
file that we find is that do I choose a

00:11:41,899 --> 00:11:48,259
registry with features do I use someone

00:11:45,259 --> 00:11:50,660
else's registry or do I choose a good

00:11:48,259 --> 00:11:52,910
registry with hardware does is brings

00:11:50,660 --> 00:11:54,829
all these things together it's software

00:11:52,910 --> 00:11:57,410
that you can easily install locally

00:11:54,829 --> 00:12:00,980
whether it's in docker or just running

00:11:57,410 --> 00:12:03,649
locally or in kubernetes it has a great

00:12:00,980 --> 00:12:05,870
user interface and it has all these

00:12:03,649 --> 00:12:10,009
things that businesses might want such

00:12:05,870 --> 00:12:15,889
as role based access control things like

00:12:10,009 --> 00:12:18,410
robot accounts API and an API Explorer

00:12:15,889 --> 00:12:22,429
and auditing because you know how

00:12:18,410 --> 00:12:25,250
businesses like to audit things so just

00:12:22,429 --> 00:12:26,980
actually a month ago actually I'm a

00:12:25,250 --> 00:12:30,130
month and a week ago

00:12:26,980 --> 00:12:32,590
Harbor released 1.8 and the biggest

00:12:30,130 --> 00:12:34,770
feature for harbor 1.8 is open ID

00:12:32,590 --> 00:12:37,900
Connect so what this means is that

00:12:34,770 --> 00:12:40,380
people who are actually using SSO and

00:12:37,900 --> 00:12:43,980
their organizations can now more easily

00:12:40,380 --> 00:12:48,070
integrate harbor with their existing

00:12:43,980 --> 00:12:50,020
their existing authentication and then I

00:12:48,070 --> 00:12:52,030
mentioned robot accounts before but this

00:12:50,020 --> 00:12:54,520
is very important whenever you're using

00:12:52,030 --> 00:12:57,370
whether you're using github or gitlab

00:12:54,520 --> 00:12:59,710
you don't want to have all these users

00:12:57,370 --> 00:13:01,810
that look like people you can actually

00:12:59,710 --> 00:13:04,270
now properly define them as we're about

00:13:01,810 --> 00:13:07,660
accounts and another thing here is now

00:13:04,270 --> 00:13:09,580
with with harbor replication has been

00:13:07,660 --> 00:13:12,430
enhanced where you can actually have

00:13:09,580 --> 00:13:14,890
multiple servers maybe look locally to

00:13:12,430 --> 00:13:20,410
wherever your users are and you can

00:13:14,890 --> 00:13:22,540
actually replicate between those so like

00:13:20,410 --> 00:13:25,210
I said I want to talk about Chinese

00:13:22,540 --> 00:13:28,150
projects and I wanted to talk about my

00:13:25,210 --> 00:13:29,980
favorite projects and one of my favorite

00:13:28,150 --> 00:13:33,220
projects in the CMC F right now is

00:13:29,980 --> 00:13:35,710
Jagger and what Yaeger is it's the

00:13:33,220 --> 00:13:38,980
distributed tracing platform one of the

00:13:35,710 --> 00:13:43,270
Lightning talks from Tencent believe we

00:13:38,980 --> 00:13:45,760
were talking about tracing and testing

00:13:43,270 --> 00:13:49,480
in production but Yaeger allows you to

00:13:45,760 --> 00:13:54,040
do is actually so let me take a step

00:13:49,480 --> 00:13:55,810
back so with a lot of modern of modern

00:13:54,040 --> 00:13:58,090
monitoring stacks or observability

00:13:55,810 --> 00:14:00,910
stacks we have logging tracing and

00:13:58,090 --> 00:14:03,340
metrics Jaeger is the tracing bit of

00:14:00,910 --> 00:14:08,440
this and what Yaeger allows you to do is

00:14:03,340 --> 00:14:09,850
actually take traces from inside of your

00:14:08,440 --> 00:14:12,400
application and then puts them in a

00:14:09,850 --> 00:14:14,890
actually a really good-looking user

00:14:12,400 --> 00:14:17,380
interface 15 years ago you would have

00:14:14,890 --> 00:14:19,720
paid many many many thousands of dollars

00:14:17,380 --> 00:14:21,520
for the software or the features that

00:14:19,720 --> 00:14:24,670
Yaeger provides but now we don't

00:14:21,520 --> 00:14:27,970
actually have to this is from uber and

00:14:24,670 --> 00:14:30,220
uber has done a lot of great work so why

00:14:27,970 --> 00:14:32,020
would you use something like Yaeger well

00:14:30,220 --> 00:14:34,510
really what it comes down to is that you

00:14:32,020 --> 00:14:37,060
have software let's say you have micro

00:14:34,510 --> 00:14:39,130
services and you have micro service one

00:14:37,060 --> 00:14:40,870
micro service to my cursor vis 3

00:14:39,130 --> 00:14:42,490
something slow

00:14:40,870 --> 00:14:44,950
but what you can do is you can actually

00:14:42,490 --> 00:14:46,900
defining your software where you want to

00:14:44,950 --> 00:14:50,640
you can defining your software these

00:14:46,900 --> 00:14:54,250
things called spans which are basically

00:14:50,640 --> 00:14:56,560
some bit of computation and you can

00:14:54,250 --> 00:14:58,750
figure out how long that span took you

00:14:56,560 --> 00:15:01,990
can actually have logs on that span and

00:14:58,750 --> 00:15:03,520
you can actually see errors and it's

00:15:01,990 --> 00:15:05,110
even better than that because we're

00:15:03,520 --> 00:15:07,750
talking about micro services or even

00:15:05,110 --> 00:15:10,150
just big complex apps now we can

00:15:07,750 --> 00:15:15,040
actually trace across applications and

00:15:10,150 --> 00:15:17,320
that's pretty important as well so just

00:15:15,040 --> 00:15:20,200
recently before I move on to the test

00:15:17,320 --> 00:15:23,580
Nigar release 1.12 you should actually

00:15:20,200 --> 00:15:26,020
go visit their site and try it out

00:15:23,580 --> 00:15:28,540
second project that I wanted to include

00:15:26,020 --> 00:15:30,490
that wasn't it's not a Chinese project

00:15:28,540 --> 00:15:33,040
but it's one of my favorite is the test

00:15:30,490 --> 00:15:35,410
a lots of people are still using my

00:15:33,040 --> 00:15:37,660
sequel it's a super popular open source

00:15:35,410 --> 00:15:40,480
database but the problem with my sequel

00:15:37,660 --> 00:15:43,680
is how do you scale it horizontally you

00:15:40,480 --> 00:15:46,090
can out you can scale it vertically by

00:15:43,680 --> 00:15:48,550
getting a bigger box but at a certain

00:15:46,090 --> 00:15:50,680
point getting a bigger box is not it's

00:15:48,550 --> 00:15:52,510
not a good solution so a bit distal

00:15:50,680 --> 00:15:56,110
allows you to do is give you that great

00:15:52,510 --> 00:15:57,910
my sequel API but allow you to scale it

00:15:56,110 --> 00:16:01,320
horizontally let's say running on

00:15:57,910 --> 00:16:01,320
kubernetes forever

00:16:02,850 --> 00:16:08,410
so these are actually the biggest

00:16:05,950 --> 00:16:10,150
features the biggest one I want to call

00:16:08,410 --> 00:16:12,700
out is actually the first one is scaling

00:16:10,150 --> 00:16:14,920
whenever you have now you can start

00:16:12,700 --> 00:16:16,510
thinking about your databases and shards

00:16:14,920 --> 00:16:19,750
and you don't actually have to think

00:16:16,510 --> 00:16:21,850
about how big is this thing going to

00:16:19,750 --> 00:16:23,830
become you can just add another node and

00:16:21,850 --> 00:16:28,060
whenever it becomes bigger you just add

00:16:23,830 --> 00:16:29,950
another node so I encourage everyone in

00:16:28,060 --> 00:16:32,410
here to actually look at the test it's

00:16:29,950 --> 00:16:35,650
still an incubating status but there's a

00:16:32,410 --> 00:16:40,750
lot of good work going on there last

00:16:35,650 --> 00:16:44,620
month helm released 1.8 and what helm is

00:16:40,750 --> 00:16:47,950
is a I'm sorry helm release 3.0 alpha

00:16:44,620 --> 00:16:49,780
and what helm is is a package manager

00:16:47,950 --> 00:16:50,980
for kubernetes it's actually the package

00:16:49,780 --> 00:16:53,800
manager for kubernetes

00:16:50,980 --> 00:16:54,640
and what it allows you to do is to

00:16:53,800 --> 00:16:57,700
define your config

00:16:54,640 --> 00:17:00,160
duration whether using gamelan templates

00:16:57,700 --> 00:17:02,740
and then as you can install your complex

00:17:00,160 --> 00:17:04,959
configuration on your dev cluster or

00:17:02,740 --> 00:17:08,890
your staging cluster or your production

00:17:04,959 --> 00:17:10,480
cluster just last month they released

00:17:08,890 --> 00:17:13,870
like I said before they release 3.0

00:17:10,480 --> 00:17:16,690
alpha and the biggest feature of 3.0

00:17:13,870 --> 00:17:19,480
alpha is that helm has listened to

00:17:16,690 --> 00:17:21,520
everyone whether it be the users the

00:17:19,480 --> 00:17:24,370
security experts or just the guy walking

00:17:21,520 --> 00:17:27,190
down the street and said we don't like

00:17:24,370 --> 00:17:29,590
tiller so what they've done is they work

00:17:27,190 --> 00:17:31,540
they're working to remove tiller helm

00:17:29,590 --> 00:17:33,790
does all of its processing client-side

00:17:31,540 --> 00:17:35,830
anymore so there's no more open security

00:17:33,790 --> 00:17:38,320
vectors inside of your cluster that

00:17:35,830 --> 00:17:40,120
might allow your uh might allow bad

00:17:38,320 --> 00:17:44,800
things to happen and you don't have to

00:17:40,120 --> 00:17:47,110
actually work around it anymore so my

00:17:44,800 --> 00:17:48,700
last project here and this is kind of a

00:17:47,110 --> 00:17:51,160
new project and normally we don't talk

00:17:48,700 --> 00:17:52,900
about sandbox projects but we're in

00:17:51,160 --> 00:17:55,150
China and I'm going to talk about our

00:17:52,900 --> 00:17:57,850
Chinese projects there's a project

00:17:55,150 --> 00:18:00,670
called dragonfly and what dragonfly is

00:17:57,850 --> 00:18:04,870
is an open-source p2p based image and

00:18:00,670 --> 00:18:07,840
file distribution system so remember PGP

00:18:04,870 --> 00:18:10,120
p2p you know from years and years ago

00:18:07,840 --> 00:18:12,610
back in the 90s when we were all trading

00:18:10,120 --> 00:18:16,390
our music but really what it is allows

00:18:12,610 --> 00:18:18,220
us to distribute our files and no one

00:18:16,390 --> 00:18:20,170
has to own all the files so we can

00:18:18,220 --> 00:18:25,540
actually use multiple computers to send

00:18:20,170 --> 00:18:28,360
files to to our users and I love all our

00:18:25,540 --> 00:18:29,530
projects when I go to their pages and I

00:18:28,360 --> 00:18:31,030
talk to the people that run these

00:18:29,530 --> 00:18:33,070
projects they always give me this long

00:18:31,030 --> 00:18:35,200
list and I promise every single time

00:18:33,070 --> 00:18:37,020
that I will include the long list but I

00:18:35,200 --> 00:18:39,580
will pick the ones that I like the best

00:18:37,020 --> 00:18:43,480
so one of the features that I really

00:18:39,580 --> 00:18:46,990
liked about dragonfly is that you don't

00:18:43,480 --> 00:18:50,050
have to worry about CDN set up with the

00:18:46,990 --> 00:18:53,560
pass of CDN whenever we can actually

00:18:50,050 --> 00:18:56,200
configure CDN so we can actually cache

00:18:53,560 --> 00:18:58,990
data that is served quickly or our

00:18:56,200 --> 00:19:01,780
frequently and so we can reduce

00:18:58,990 --> 00:19:04,180
processing power and then also in many

00:19:01,780 --> 00:19:08,010
cases cache data that is posted to the

00:19:04,180 --> 00:19:12,150
user so dragonfly is currently

00:19:08,010 --> 00:19:13,590
0.4 one of the biggest features that's

00:19:12,150 --> 00:19:16,620
in there is that they've done a lot of

00:19:13,590 --> 00:19:19,230
work moving the super node process

00:19:16,620 --> 00:19:22,890
inside a dragonfly to go for performance

00:19:19,230 --> 00:19:26,340
and stability so I'm going to end there

00:19:22,890 --> 00:19:28,620
because I'm actually over my time so

00:19:26,340 --> 00:19:29,970
thank you for going through these CNCs

00:19:28,620 --> 00:19:32,640
projects and I just want to end with

00:19:29,970 --> 00:19:36,000
what's one thing these projects are

00:19:32,640 --> 00:19:38,570
created by companies sometimes started

00:19:36,000 --> 00:19:41,070
by end-users all of you all out there

00:19:38,570 --> 00:19:44,130
can actually participate in these

00:19:41,070 --> 00:19:46,710
projects whether it's kubernetes or down

00:19:44,130 --> 00:19:49,110
to newer projects like dragonfly or

00:19:46,710 --> 00:19:52,140
other products in a sandbox like spiffy

00:19:49,110 --> 00:19:53,730
inspire so we are looking for lots of

00:19:52,140 --> 00:19:55,650
people especially people that we don't

00:19:53,730 --> 00:19:57,270
get to interact with all the time to

00:19:55,650 --> 00:20:00,870
contribute to these projects and if you

00:19:57,270 --> 00:20:03,570
have any questions come find me for once

00:20:00,870 --> 00:20:05,370
I'm not very hard to spot and I will

00:20:03,570 --> 00:20:07,700
definitely steer you in the right

00:20:05,370 --> 00:20:11,349
direction thank you

00:20:07,700 --> 00:20:11,349

YouTube URL: https://www.youtube.com/watch?v=KS_h7g6EF0g


