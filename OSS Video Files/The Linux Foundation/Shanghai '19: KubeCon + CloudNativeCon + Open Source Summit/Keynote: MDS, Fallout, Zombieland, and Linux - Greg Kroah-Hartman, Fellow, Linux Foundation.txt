Title: Keynote: MDS, Fallout, Zombieland, and Linux - Greg Kroah-Hartman, Fellow, Linux Foundation
Publication date: 2019-07-10
Playlist: Shanghai '19: KubeCon + CloudNativeCon + Open Source Summit
Description: 
	Keynote: MDS, Fallout, Zombieland, and Linux - Greg Kroah-Hartman, Fellow, Linux Foundation  

https://sched.co/NuWK
Captions: 
	00:00:00,000 --> 00:00:06,150
hi I'm Greg I'm one of the rare kernel

00:00:02,730 --> 00:00:10,320
people in the world sounds like I tried

00:00:06,150 --> 00:00:13,740
to do my title and all icons that's MDS

00:00:10,320 --> 00:00:15,599
fallout zombie land and Linux and my

00:00:13,740 --> 00:00:18,210
talk is about the follow-on with last

00:00:15,599 --> 00:00:20,850
year's talk about secure spectrum

00:00:18,210 --> 00:00:23,609
meltdown and it's how you can make sure

00:00:20,850 --> 00:00:27,180
you use Linux in a safe way that's the

00:00:23,609 --> 00:00:30,840
main overall goal here so again same

00:00:27,180 --> 00:00:34,620
disclaimer I'm vastly oversimplifying

00:00:30,840 --> 00:00:37,079
everything see all I wrote down good

00:00:34,620 --> 00:00:39,710
notes details how you can do this see

00:00:37,079 --> 00:00:42,750
the link it's all there

00:00:39,710 --> 00:00:45,860
let's talk about MDS MDS was the last

00:00:42,750 --> 00:00:48,570
big security problem that was released

00:00:45,860 --> 00:00:51,480
about a month or so ago for Intel

00:00:48,570 --> 00:00:54,120
processors it's the same type of family

00:00:51,480 --> 00:00:57,510
that Spectre and meltdown was these are

00:00:54,120 --> 00:00:59,609
bugs in your CPU these are bugs in the

00:00:57,510 --> 00:01:01,469
way the hardware works and the whole

00:00:59,609 --> 00:01:03,629
goal of an operating system is to make

00:01:01,469 --> 00:01:06,689
the user space all the programs like

00:01:03,629 --> 00:01:08,909
Lena says run well and make it not care

00:01:06,689 --> 00:01:11,250
about what's underneath it so our Joel

00:01:08,909 --> 00:01:17,070
the job of the kernel is to fix all the

00:01:11,250 --> 00:01:20,549
hardware bugs that's our role spectra

00:01:17,070 --> 00:01:22,560
and MDS exploits the fact that CPUs look

00:01:20,549 --> 00:01:24,210
ahead in the future they try and figure

00:01:22,560 --> 00:01:26,040
out what's going to happen next and then

00:01:24,210 --> 00:01:28,380
they roll things back and when they

00:01:26,040 --> 00:01:30,840
don't roll things back properly you can

00:01:28,380 --> 00:01:32,400
leak information there's lots of

00:01:30,840 --> 00:01:34,500
different variants of this lots of

00:01:32,400 --> 00:01:37,140
different ways to CPUs or very complex

00:01:34,500 --> 00:01:38,820
things and like I said last year it's

00:01:37,140 --> 00:01:42,570
going to be with us for a long time I'll

00:01:38,820 --> 00:01:44,399
say again looking in the future we will

00:01:42,570 --> 00:01:47,159
be dealing with this even longer it's

00:01:44,399 --> 00:01:50,430
going to be around for a long time so

00:01:47,159 --> 00:01:53,310
MDS is the generic name for all this

00:01:50,430 --> 00:01:55,979
classified all this category there's one

00:01:53,310 --> 00:01:58,170
called riddle fallout Zombieland and a

00:01:55,979 --> 00:02:00,689
few other names these are all CPU

00:01:58,170 --> 00:02:04,439
hardware bugs again variants of the same

00:02:00,689 --> 00:02:05,939
basic idea again only Intel CPU is this

00:02:04,439 --> 00:02:08,129
time they were the only ones found to

00:02:05,939 --> 00:02:11,430
have these problems research researchers

00:02:08,129 --> 00:02:13,110
tested a lot of different chips a lot of

00:02:11,430 --> 00:02:16,040
different researchers found these

00:02:13,110 --> 00:02:19,170
at the same time just like Dan said

00:02:16,040 --> 00:02:21,000
evolution causes the same type of

00:02:19,170 --> 00:02:22,790
different groups of people to look in

00:02:21,000 --> 00:02:23,970
the same areas and find the same things

00:02:22,790 --> 00:02:25,890
independently

00:02:23,970 --> 00:02:27,720
I think there's five different research

00:02:25,890 --> 00:02:30,270
groups that found this same problem

00:02:27,720 --> 00:02:31,980
within weeks of each other which is

00:02:30,270 --> 00:02:34,890
amazing luckily they all work together

00:02:31,980 --> 00:02:36,930
in the end but that was very very rare

00:02:34,890 --> 00:02:38,580
but it's also continuing to happen

00:02:36,930 --> 00:02:41,190
researchers are keeping looking in this

00:02:38,580 --> 00:02:42,990
area in order to fix this you need to do

00:02:41,190 --> 00:02:45,600
two things you have to update your

00:02:42,990 --> 00:02:48,180
operating system kernel and you have to

00:02:45,600 --> 00:02:51,060
update your bios if you just do one or

00:02:48,180 --> 00:02:53,550
the other you will not be safe you have

00:02:51,060 --> 00:02:56,190
to update your bias and that means you

00:02:53,550 --> 00:02:57,660
have to power cycle your machine I'm

00:02:56,190 --> 00:03:02,310
sorry I can't do anything about that one

00:02:57,660 --> 00:03:04,260
um all of these in the secure world it's

00:03:02,310 --> 00:03:06,870
not that big of a deal because you can't

00:03:04,260 --> 00:03:08,720
modify other people's execution all you

00:03:06,870 --> 00:03:12,000
can do is read other people's data and

00:03:08,720 --> 00:03:13,980
that's fine if it's not a problem if you

00:03:12,000 --> 00:03:16,560
have a system that you run all the code

00:03:13,980 --> 00:03:17,850
on and a hardware control system great

00:03:16,560 --> 00:03:19,769
you're not running anybody else's

00:03:17,850 --> 00:03:21,540
programs you can't read you don't care

00:03:19,769 --> 00:03:23,100
if you can read your own data but when

00:03:21,540 --> 00:03:27,120
you're running in a shared resource like

00:03:23,100 --> 00:03:29,340
a processor on a cloud computing which

00:03:27,120 --> 00:03:31,739
is share with other unrelated people are

00:03:29,340 --> 00:03:33,209
you running just on a desktop when you

00:03:31,739 --> 00:03:36,840
have different programs running at the

00:03:33,209 --> 00:03:38,340
same time like browser windows you don't

00:03:36,840 --> 00:03:40,410
want other one browser window be able to

00:03:38,340 --> 00:03:42,570
read from another one then it matters

00:03:40,410 --> 00:03:45,150
but you can read data and you can cross

00:03:42,570 --> 00:03:48,030
the virtual machine barrier and all of

00:03:45,150 --> 00:03:49,950
these exploit the fact that CPUs do

00:03:48,030 --> 00:03:52,650
something called hyper-threading or SMT

00:03:49,950 --> 00:03:54,780
and this is the way CPUs try and share

00:03:52,650 --> 00:03:57,540
resources they share the TLB ease which

00:03:54,780 --> 00:04:00,510
is the low-level way CPUs look up memory

00:03:57,540 --> 00:04:03,269
addresses and I share the CPU cache but

00:04:00,510 --> 00:04:05,459
first level cache and by sharing those

00:04:03,269 --> 00:04:07,920
types of things turns out that things

00:04:05,459 --> 00:04:10,739
can leak we thought this might be an

00:04:07,920 --> 00:04:12,780
issue a long time ago about a year or so

00:04:10,739 --> 00:04:14,180
ago when we saw this and some people

00:04:12,780 --> 00:04:16,960
found out some information about this

00:04:14,180 --> 00:04:20,510
and it turns out

00:04:16,960 --> 00:04:22,400
OpenBSD was right I give these people

00:04:20,510 --> 00:04:26,780
huge credit they're right for the wrong

00:04:22,400 --> 00:04:30,080
reason but they were right they said

00:04:26,780 --> 00:04:31,610
over a year ago disabled hyper-threading

00:04:30,080 --> 00:04:34,190
people laughed at them so why would you

00:04:31,610 --> 00:04:36,200
ever do that and again in August they

00:04:34,190 --> 00:04:38,830
said please disable this we think there

00:04:36,200 --> 00:04:41,990
might be air problems in this area and

00:04:38,830 --> 00:04:44,240
they were right if you had disabled

00:04:41,990 --> 00:04:45,280
hyper-threading almost all these issues

00:04:44,240 --> 00:04:47,690
are gone

00:04:45,280 --> 00:04:49,040
almost all of them without any updates

00:04:47,690 --> 00:04:51,470
for the operating system any update from

00:04:49,040 --> 00:04:54,560
the bias all these issues were gone they

00:04:51,470 --> 00:04:56,750
chose security over performance because

00:04:54,560 --> 00:04:58,850
when you disable every other CPU in your

00:04:56,750 --> 00:05:02,360
system you will have performance issues

00:04:58,850 --> 00:05:04,790
I have huge respect for them they got

00:05:02,360 --> 00:05:06,920
this right good job

00:05:04,790 --> 00:05:08,300
listen to what they're doing different

00:05:06,920 --> 00:05:11,300
operating systems up we didn't know that

00:05:08,300 --> 00:05:12,770
do this let's talk about this so riddle

00:05:11,300 --> 00:05:15,260
was the first one that's the most

00:05:12,770 --> 00:05:18,620
popular one for MDS means rogue

00:05:15,260 --> 00:05:21,080
in-flight data load all of these issues

00:05:18,620 --> 00:05:23,360
are how CPUs actually work underneath

00:05:21,080 --> 00:05:25,280
the operating system underneath the

00:05:23,360 --> 00:05:28,130
assembly language these deal with how

00:05:25,280 --> 00:05:29,600
operating systems work inside of

00:05:28,130 --> 00:05:31,640
themselves and they have something

00:05:29,600 --> 00:05:33,440
called line fill buffers and load ports

00:05:31,640 --> 00:05:37,100
since how data moves around inside the

00:05:33,440 --> 00:05:39,140
CPU these are exploits that up and

00:05:37,100 --> 00:05:42,020
application-level we can exploit the way

00:05:39,140 --> 00:05:44,660
the hardware works inside and it steals

00:05:42,020 --> 00:05:48,830
data across applications across virtual

00:05:44,660 --> 00:05:52,160
machines and crazy enough across into

00:05:48,830 --> 00:05:54,050
and out of secure enclaves which Intel

00:05:52,160 --> 00:05:56,870
it created saying this is a secure way

00:05:54,050 --> 00:05:59,060
you can never get in and out of turns

00:05:56,870 --> 00:06:01,430
out is very porous luckily nobody really

00:05:59,060 --> 00:06:03,200
uses this yet so it wasn't a big deal

00:06:01,430 --> 00:06:06,230
but from a researchers point of view is

00:06:03,200 --> 00:06:08,810
a huge huge deal and we fixed this by

00:06:06,230 --> 00:06:10,640
the CPU or in the kernel we say flush

00:06:08,810 --> 00:06:13,580
the buffers every time we switch context

00:06:10,640 --> 00:06:16,330
and of course update your bios in order

00:06:13,580 --> 00:06:17,600
take care of advantage of that flushing

00:06:16,330 --> 00:06:20,210
fallout

00:06:17,600 --> 00:06:22,460
another good icon that a good name it

00:06:20,210 --> 00:06:25,040
exploits the store buffers in that CPU

00:06:22,460 --> 00:06:27,890
um this one is a little different you

00:06:25,040 --> 00:06:29,000
can't run application application or

00:06:27,890 --> 00:06:30,410
across virtual machines you can read

00:06:29,000 --> 00:06:32,630
from user space into the kernel

00:06:30,410 --> 00:06:34,040
and the kernel stores lots of secrets

00:06:32,630 --> 00:06:37,220
that you don't want other applications

00:06:34,040 --> 00:06:38,660
to read Shores Keys stores other memory

00:06:37,220 --> 00:06:40,580
locations that others you can see

00:06:38,660 --> 00:06:42,260
whether applications are doing you want

00:06:40,580 --> 00:06:44,330
your kernel an application not to be

00:06:42,260 --> 00:06:47,240
able to read into the kernel this breaks

00:06:44,330 --> 00:06:49,250
that as part of the way the kernel Pro

00:06:47,240 --> 00:06:51,770
tries to protect this we do something

00:06:49,250 --> 00:06:54,830
called randomizing the addresses this

00:06:51,770 --> 00:06:56,810
totally breaks that and our fixes for

00:06:54,830 --> 00:07:00,200
meltdown the last big security issue

00:06:56,810 --> 00:07:01,940
actually made fallout easier because we

00:07:00,200 --> 00:07:04,840
thought we are addressing things in

00:07:01,940 --> 00:07:07,340
separate ways separate memory spaces

00:07:04,840 --> 00:07:08,510
fallout exploits that it makes it easier

00:07:07,340 --> 00:07:10,400
to figure out what's going on

00:07:08,510 --> 00:07:13,220
the researchers credit us for making

00:07:10,400 --> 00:07:15,170
their job a lot easier again you fix

00:07:13,220 --> 00:07:19,120
this by flushing the buffers in the

00:07:15,170 --> 00:07:22,850
kernel updating your bias Zombieland

00:07:19,120 --> 00:07:25,280
great logo great marketing it's really

00:07:22,850 --> 00:07:27,050
the same thing as riddle you steal data

00:07:25,280 --> 00:07:29,120
from application application but they

00:07:27,050 --> 00:07:31,870
had a great logo they had a wonderful

00:07:29,120 --> 00:07:34,400
wonderful demo go look at the website

00:07:31,870 --> 00:07:37,010
look at the video for this run the

00:07:34,400 --> 00:07:39,020
program you can steal you run and browse

00:07:37,010 --> 00:07:40,940
in one window you can open another

00:07:39,020 --> 00:07:42,500
window with the applet what's a problem

00:07:40,940 --> 00:07:46,970
in it and you can see what the other

00:07:42,500 --> 00:07:49,940
windows doing huge huge marketing win

00:07:46,970 --> 00:07:51,680
grand cool name we fix in the kernel

00:07:49,940 --> 00:07:53,810
flushing the buffers every contacts

00:07:51,680 --> 00:07:56,270
which we handled we moved on

00:07:53,810 --> 00:07:58,100
and again there's other variants to

00:07:56,270 --> 00:07:59,720
other Gribbs store to leak forwarding

00:07:58,100 --> 00:08:02,270
meltdown you see these are all little

00:07:59,720 --> 00:08:05,120
tweaks on the same general idea same

00:08:02,270 --> 00:08:07,130
areas in the processor again you can

00:08:05,120 --> 00:08:09,830
steal data you can just read data across

00:08:07,130 --> 00:08:11,270
the security boundary again we fix the

00:08:09,830 --> 00:08:16,700
buffer to fix the problem by flushing

00:08:11,270 --> 00:08:18,620
buffers flushing buffers is slow there's

00:08:16,700 --> 00:08:20,540
the reason we never do this before and

00:08:18,620 --> 00:08:22,820
the reason the BIOS never did this

00:08:20,540 --> 00:08:26,330
before is because this slows things down

00:08:22,820 --> 00:08:27,680
you don't want to slow things down every

00:08:26,330 --> 00:08:30,770
time you call them to the kernel and now

00:08:27,680 --> 00:08:33,200
the kernel traditionally system calls in

00:08:30,770 --> 00:08:34,940
and out have been fast now we have to

00:08:33,200 --> 00:08:37,460
flush these buffers it slows things down

00:08:34,940 --> 00:08:40,430
a way to get around this is you can take

00:08:37,460 --> 00:08:41,969
every logical CPU and only run logically

00:08:40,430 --> 00:08:44,339
success secure

00:08:41,969 --> 00:08:47,250
be wise the same type of problem process

00:08:44,339 --> 00:08:49,949
here and over here it's a really hard

00:08:47,250 --> 00:08:52,379
problem academically they fixed it

00:08:49,949 --> 00:08:54,930
in reality they haven't yet something

00:08:52,379 --> 00:08:56,550
called gang scheduling there are kernel

00:08:54,930 --> 00:08:58,350
patches out there to solve this to try

00:08:56,550 --> 00:09:00,060
and do this it really is slow it's

00:08:58,350 --> 00:09:01,769
getting better Microsoft for Windows

00:09:00,060 --> 00:09:03,180
actually has this option you can enable

00:09:01,769 --> 00:09:05,250
it if you care about it slows your

00:09:03,180 --> 00:09:07,529
machine down it is one way to

00:09:05,250 --> 00:09:09,300
potentially mitigate these issues it's

00:09:07,529 --> 00:09:11,310
not ready for primetime yet

00:09:09,300 --> 00:09:14,269
the best way to do is disable

00:09:11,310 --> 00:09:16,470
hyper-threading and update the kernel

00:09:14,269 --> 00:09:18,060
that's the only way to solve all these

00:09:16,470 --> 00:09:20,160
issues you can't do both or one or the

00:09:18,060 --> 00:09:21,509
other you have to do both a lot of

00:09:20,160 --> 00:09:23,939
operating a lot of Linux distribution

00:09:21,509 --> 00:09:27,930
just recommending just disable hyper

00:09:23,939 --> 00:09:31,410
threading and moving on but doing that

00:09:27,930 --> 00:09:33,269
slows things down my development I read

00:09:31,410 --> 00:09:35,910
lots of email I write lots of email and

00:09:33,269 --> 00:09:39,089
I do two things really I build kernels a

00:09:35,910 --> 00:09:40,500
lot and then I create a kernel locally

00:09:39,089 --> 00:09:43,019
and shove it off to another machine to

00:09:40,500 --> 00:09:46,230
build it there building kernels is very

00:09:43,019 --> 00:09:49,170
very CPU intensive I more processors I

00:09:46,230 --> 00:09:51,209
have the better it goes this slows my

00:09:49,170 --> 00:09:52,800
workload down if I don't disable hyper

00:09:51,209 --> 00:09:55,019
threading it's about two percent

00:09:52,800 --> 00:09:57,209
slowdown which is kind of in the noise I

00:09:55,019 --> 00:09:59,819
do disable it it's noticeable fifteen

00:09:57,209 --> 00:10:02,430
percent decrease that's real that's a

00:09:59,819 --> 00:10:04,860
real performance hit I notice it takes

00:10:02,430 --> 00:10:06,240
extra couple minutes don't like it my

00:10:04,860 --> 00:10:09,240
kernel creation is single threaded

00:10:06,240 --> 00:10:10,980
though I take a get tree clone it apply

00:10:09,240 --> 00:10:12,720
a whole bunch of patches to it tar it up

00:10:10,980 --> 00:10:17,220
send it off to another machine all

00:10:12,720 --> 00:10:20,129
single threaded SMT disabled no workload

00:10:17,220 --> 00:10:23,879
difference at all same amount of time

00:10:20,129 --> 00:10:26,309
identically so run the test yourself

00:10:23,879 --> 00:10:28,110
test your own work load everybody's

00:10:26,309 --> 00:10:29,189
workload is different we all use Linux

00:10:28,110 --> 00:10:31,079
in a different way to solve your own

00:10:29,189 --> 00:10:32,309
problems it might be that this doesn't

00:10:31,079 --> 00:10:35,250
affect you at all

00:10:32,309 --> 00:10:38,250
it might be affect you a lot we don't

00:10:35,250 --> 00:10:40,050
know so all depends again this calls are

00:10:38,250 --> 00:10:42,360
now very expensive some programs to do a

00:10:40,050 --> 00:10:43,050
lot and some programs don't if you

00:10:42,360 --> 00:10:45,389
depend on IO

00:10:43,050 --> 00:10:48,920
that hasn't changed things like that

00:10:45,389 --> 00:10:48,920
test your own workload

00:10:52,530 --> 00:10:57,990
the bad part about this is now you have

00:10:54,970 --> 00:11:00,820
to choose performance or security and

00:10:57,990 --> 00:11:01,420
that's not a good option anybody ever

00:11:00,820 --> 00:11:04,240
wants to make

00:11:01,420 --> 00:11:07,750
and you are relying on your cloud

00:11:04,240 --> 00:11:09,310
provider also to make that choice I have

00:11:07,750 --> 00:11:12,250
a number of test machines in the cloud

00:11:09,310 --> 00:11:15,910
my cloud provider made the choice to go

00:11:12,250 --> 00:11:18,700
performance over security look and see

00:11:15,910 --> 00:11:23,140
what yours did I'm now switching cloud

00:11:18,700 --> 00:11:25,300
providers you might need to see what

00:11:23,140 --> 00:11:28,210
your provider does what did they choose

00:11:25,300 --> 00:11:30,340
what do they care most about um there's

00:11:28,210 --> 00:11:32,290
a website called Meg Linux fast again

00:11:30,340 --> 00:11:34,600
it's kind of a joke but it gives you the

00:11:32,290 --> 00:11:36,970
command line to change your kernel boot

00:11:34,600 --> 00:11:38,980
to rip out all the security things we've

00:11:36,970 --> 00:11:41,620
done to make things slow and make it

00:11:38,980 --> 00:11:44,380
faster again my kernel builds or 15%

00:11:41,620 --> 00:11:46,270
faster now if I make it again that's how

00:11:44,380 --> 00:11:48,160
much things have decreased in the past

00:11:46,270 --> 00:11:50,590
year just by dealing with all these

00:11:48,160 --> 00:11:54,160
security issues it's a real performance

00:11:50,590 --> 00:12:00,630
impact on real people take a look it's

00:11:54,160 --> 00:12:03,220
kind of funny how did we deal with this

00:12:00,630 --> 00:12:05,260
Linux last year with spectrum meltdown

00:12:03,220 --> 00:12:08,050
was involved really really late in the

00:12:05,260 --> 00:12:09,130
process until silo 2 saw wouldn't let us

00:12:08,050 --> 00:12:11,920
talk to each other

00:12:09,130 --> 00:12:13,840
it's reaction we reacted after it was

00:12:11,920 --> 00:12:16,390
even public it was a total complete

00:12:13,840 --> 00:12:18,490
nightmare on our part and on you as a

00:12:16,390 --> 00:12:20,620
user this time around and so got it

00:12:18,490 --> 00:12:22,690
better they worked with us they brought

00:12:20,620 --> 00:12:25,540
us in really early most of us didn't

00:12:22,690 --> 00:12:25,870
really early not all of us and we got it

00:12:25,540 --> 00:12:27,640
done

00:12:25,870 --> 00:12:29,350
we got the patches when it was announced

00:12:27,640 --> 00:12:30,970
by the researchers we were ready for

00:12:29,350 --> 00:12:32,980
patches went out to the world all the

00:12:30,970 --> 00:12:36,430
distributions were updated everybody was

00:12:32,980 --> 00:12:38,530
happy but like Debian which the majority

00:12:36,430 --> 00:12:42,880
of the world runs wasn't brought in

00:12:38,530 --> 00:12:44,440
until 48 hours before the release I will

00:12:42,880 --> 00:12:46,120
credit the Debian developers for

00:12:44,440 --> 00:12:48,190
actually doing more work than most all

00:12:46,120 --> 00:12:49,300
the other distributions in getting this

00:12:48,190 --> 00:12:50,770
to work right because they had to

00:12:49,300 --> 00:12:53,020
scramble at the very last minute and

00:12:50,770 --> 00:12:56,620
they did a great job because if you rely

00:12:53,020 --> 00:12:59,170
on Debian most the world does this stuff

00:12:56,620 --> 00:13:01,340
was impacted they did a wonderful job so

00:12:59,170 --> 00:13:04,370
that needs to fix Intel needs to bring W

00:13:01,340 --> 00:13:06,260
earlier as always when we have private

00:13:04,370 --> 00:13:08,480
announcements we can't have all the

00:13:06,260 --> 00:13:10,160
developers look at it we don't see all

00:13:08,480 --> 00:13:12,800
that weird workloads we don't see all

00:13:10,160 --> 00:13:15,230
the odds CPUs out there fixes come in

00:13:12,800 --> 00:13:16,820
afterwards so we fix things like

00:13:15,230 --> 00:13:19,040
instantly afterwards because we had some

00:13:16,820 --> 00:13:20,510
reports things we just saw patches

00:13:19,040 --> 00:13:21,950
yesterday that made things go a little

00:13:20,510 --> 00:13:23,870
bit faster because we didn't need to do

00:13:21,950 --> 00:13:25,730
some of the things we did so you can

00:13:23,870 --> 00:13:28,010
make things go a little better fixes

00:13:25,730 --> 00:13:30,320
keep coming all the time they keep

00:13:28,010 --> 00:13:32,000
coming every week you have to keep

00:13:30,320 --> 00:13:33,950
updating your kernel to make sure you're

00:13:32,000 --> 00:13:36,050
correct it wasn't just the original

00:13:33,950 --> 00:13:37,970
announcement it's all the updates that

00:13:36,050 --> 00:13:40,790
come after that you also have to take

00:13:37,970 --> 00:13:43,760
and update your bias you have to update

00:13:40,790 --> 00:13:47,630
your bias the it will not work without

00:13:43,760 --> 00:13:50,540
that so updating every week we do a

00:13:47,630 --> 00:13:53,420
security lease release I do a new kernel

00:13:50,540 --> 00:13:56,960
update every week we're running about 22

00:13:53,420 --> 00:13:59,600
changes per day in these patnik kernels

00:13:56,960 --> 00:14:02,180
so one a week a whole bunch of patches

00:13:59,600 --> 00:14:04,700
come out at least one of those fixes

00:14:02,180 --> 00:14:06,950
every week is a security issue sometimes

00:14:04,700 --> 00:14:09,260
we don't know until years later because

00:14:06,950 --> 00:14:10,880
in the kernel we treat a bug as the bug

00:14:09,260 --> 00:14:12,800
is a bug we don't know if it's a

00:14:10,880 --> 00:14:14,360
security issue or not we don't care we

00:14:12,800 --> 00:14:16,910
fix it we move on we get it out to the

00:14:14,360 --> 00:14:18,650
world it's up to you take it whole thing

00:14:16,910 --> 00:14:21,320
update your scenes and then you know

00:14:18,650 --> 00:14:23,600
you're secure and people look at see

00:14:21,320 --> 00:14:26,330
bees see bees is the way of tagging

00:14:23,600 --> 00:14:28,430
security issues at the community or the

00:14:26,330 --> 00:14:32,090
world has been using for a while and you

00:14:28,430 --> 00:14:33,620
notice very few kernels see our kernel

00:14:32,090 --> 00:14:37,460
issues our CVEs

00:14:33,620 --> 00:14:41,320
it's not a thing do not count on CVEs to

00:14:37,460 --> 00:14:41,320
actually mean anything for the kernel

00:14:46,090 --> 00:14:54,380
okay um a very small number of the fixes

00:14:52,520 --> 00:14:56,690
we ever do in the kernel go to CBE

00:14:54,380 --> 00:14:58,790
if you try and just cherry-pick kernel a

00:14:56,690 --> 00:15:01,370
CBE to this fix to that one the

00:14:58,790 --> 00:15:03,410
backported you will get it wrong because

00:15:01,370 --> 00:15:05,060
there's follow-on fixes if you looked at

00:15:03,410 --> 00:15:07,880
spectrum meltdown that was like 80

00:15:05,060 --> 00:15:09,800
patches and then it was like an 18 other

00:15:07,880 --> 00:15:10,980
patches after that and we never tagged

00:15:09,800 --> 00:15:13,110
them all for all the CV

00:15:10,980 --> 00:15:15,269
geez we didn't realize it so later and

00:15:13,110 --> 00:15:17,250
this is not how Linux works with

00:15:15,269 --> 00:15:19,050
security I have a link there there's a

00:15:17,250 --> 00:15:21,149
whole big long article about how this

00:15:19,050 --> 00:15:23,190
kernel security team works you can

00:15:21,149 --> 00:15:27,690
download the presentation go to the link

00:15:23,190 --> 00:15:31,290
read that this is how we work again very

00:15:27,690 --> 00:15:33,750
very few kernel issues are actually get

00:15:31,290 --> 00:15:35,459
real CBE's one of those security

00:15:33,750 --> 00:15:38,579
researchers did look at all the past

00:15:35,459 --> 00:15:41,820
work that we've done in ten years twelve

00:15:38,579 --> 00:15:45,930
years we only had a thousand CPUs for

00:15:41,820 --> 00:15:48,899
the kernel I'm doing 20 fixes a day that

00:15:45,930 --> 00:15:51,029
is a hugely in disproportional amount of

00:15:48,899 --> 00:15:54,540
what is really going on the weird thing

00:15:51,029 --> 00:15:56,399
about kernel CBE's is the average time

00:15:54,540 --> 00:15:59,010
between when you apply for a CVE

00:15:56,399 --> 00:16:02,250
and when the bug is fixed for the kernel

00:15:59,010 --> 00:16:04,170
is negative a hundred days so that means

00:16:02,250 --> 00:16:06,209
a hundred days later somebody says oh

00:16:04,170 --> 00:16:08,010
look that issue you fixed a long time

00:16:06,209 --> 00:16:10,380
ago that really was a security issue

00:16:08,010 --> 00:16:14,399
let's go get this number so we can track

00:16:10,380 --> 00:16:15,810
it easier that means for 100 days if you

00:16:14,399 --> 00:16:18,000
hadn't updated your machine you actually

00:16:15,810 --> 00:16:20,220
we're vulnerable to that issue but the

00:16:18,000 --> 00:16:22,829
data is skewed all over the place again

00:16:20,220 --> 00:16:25,079
40 percent are negative the standard

00:16:22,829 --> 00:16:26,639
deviation of these numbers is 400 days

00:16:25,079 --> 00:16:29,279
that's over a year is a standard

00:16:26,639 --> 00:16:34,800
deviation CVEs and the kernel mean

00:16:29,279 --> 00:16:36,600
nothing it's crazy ly weird so I worked

00:16:34,800 --> 00:16:39,209
with this Google security team and

00:16:36,600 --> 00:16:42,149
trying to figure out how is the best way

00:16:39,209 --> 00:16:44,699
to do this stuff and they looked all

00:16:42,149 --> 00:16:46,410
last year they go and they look through

00:16:44,699 --> 00:16:47,670
all the research and find all the

00:16:46,410 --> 00:16:49,230
problems that are public and all the

00:16:47,670 --> 00:16:51,120
problems that aren't public and they

00:16:49,230 --> 00:16:53,490
tell the pixel security team for Google

00:16:51,120 --> 00:16:54,660
phones take this patch take this patch

00:16:53,490 --> 00:16:56,430
take this patch we want to make sure our

00:16:54,660 --> 00:16:59,160
phones are up to date whatnot and they

00:16:56,430 --> 00:17:01,290
identified last year 218 different

00:16:59,160 --> 00:17:03,810
issues they said hey go take this patch

00:17:01,290 --> 00:17:06,780
it turned out every single one of those

00:17:03,810 --> 00:17:09,390
92% of those issues were already fixed

00:17:06,780 --> 00:17:11,669
and already released in a public LTS

00:17:09,390 --> 00:17:14,100
kernel a stable kernel they were already

00:17:11,669 --> 00:17:16,230
there the only ones that were not or

00:17:14,100 --> 00:17:18,689
code for that they had imported into

00:17:16,230 --> 00:17:20,250
their tree from not upstream kernel or

00:17:18,689 --> 00:17:21,770
things that they had back ported

00:17:20,250 --> 00:17:25,080
incorrect

00:17:21,770 --> 00:17:27,420
everything that was there that they

00:17:25,080 --> 00:17:30,240
identified was already fixed their

00:17:27,420 --> 00:17:32,970
phones were already secured before they

00:17:30,240 --> 00:17:35,010
realized it so now Google Android

00:17:32,970 --> 00:17:37,260
recommendations is you have to take the

00:17:35,010 --> 00:17:39,090
LTS kernel updates take it every three

00:17:37,260 --> 00:17:41,160
months I'm happy every one month would

00:17:39,090 --> 00:17:42,900
be wonderful some manufacturers are

00:17:41,160 --> 00:17:44,520
doing it every month there's one

00:17:42,900 --> 00:17:45,960
manufacturer it is very good they push

00:17:44,520 --> 00:17:49,680
in your kernel updates every month on

00:17:45,960 --> 00:17:52,080
some every three months some not at all

00:17:49,680 --> 00:17:54,000
watch this look at the kernel version

00:17:52,080 --> 00:17:57,090
number of your phone if you want to see

00:17:54,000 --> 00:18:00,840
how secure your devices this is real

00:17:57,090 --> 00:18:03,810
proof that taking new kernels is the

00:18:00,840 --> 00:18:08,760
only way you can be secure you have to

00:18:03,810 --> 00:18:09,930
take these kernels in fact I said this a

00:18:08,760 --> 00:18:13,140
couple years ago when these other

00:18:09,930 --> 00:18:15,090
conferences the only way you can ensure

00:18:13,140 --> 00:18:17,880
that you're running a secure machine is

00:18:15,090 --> 00:18:19,650
if you're using the latest LTS kernel or

00:18:17,880 --> 00:18:21,420
stable one or working with the

00:18:19,650 --> 00:18:23,880
distribution that does it themselves

00:18:21,420 --> 00:18:26,100
Debian very wonderful Sousa wonderful

00:18:23,880 --> 00:18:28,080
Red Hat wonderful use rely on them

00:18:26,100 --> 00:18:29,520
they're very good at that as well if

00:18:28,080 --> 00:18:31,200
you're not relying on that and using

00:18:29,520 --> 00:18:32,930
your own kernels which is great you can

00:18:31,200 --> 00:18:36,570
do that too majority of the world does

00:18:32,930 --> 00:18:38,520
use the LTS use their kernels we're

00:18:36,570 --> 00:18:40,830
releasing because everything's already

00:18:38,520 --> 00:18:43,890
fixed in them already that's the best

00:18:40,830 --> 00:18:47,619
way to be secure thank you very much

00:18:43,890 --> 00:18:47,619

YouTube URL: https://www.youtube.com/watch?v=gUqcMs0svNU


