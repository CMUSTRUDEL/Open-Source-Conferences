Title: Gatekeeper: Flexible, Shareable Policy for Kubernetes - Craig Peters, Mircosoft
Publication date: 2019-07-10
Playlist: Shanghai '19: KubeCon + CloudNativeCon + Open Source Summit
Description: 
	Gatekeeper: Flexible, Shareable Policy for Kubernetes - Craig Peters, Mircosoft 

How do you ensure your Kubernetes resources conform to your internal policies and procedures? Every organization defines rules governing where images can be deployed from and what labels all resources must include. These rules are essential to meet security, legal, and operational requirements.    Join us for an introduction to the new Gatekeeper project being jointly developed by Google, Microsoft, the CNCF's Open Policy Agent (OPA) project, and the community. You will learn how to get started with the upstream policy library that includes rules for common scenarios like image registry whitelisting, label management, and more. You will also learn how you can extend Gatekeeper with your own custom rules and then contribute them back to the community. Finally, you will see how the same policies can be applied at different phases of your software's lifecycle like CI/CD and audit. 

https://sched.co/NrpC
Captions: 
	00:00:00,230 --> 00:00:10,380
it's okay it's been a long day

00:00:07,250 --> 00:00:14,730
the reshuffling of the schedule has

00:00:10,380 --> 00:00:17,990
caused some challenges for all of us and

00:00:14,730 --> 00:00:21,710
so I wanted to apologize first for

00:00:17,990 --> 00:00:25,109
beginning this talk so late in the day

00:00:21,710 --> 00:00:29,699
I'll do my best to keep it interesting

00:00:25,109 --> 00:00:32,120
and snappy and maybe we can have an

00:00:29,699 --> 00:00:34,620
interesting conversation about policy

00:00:32,120 --> 00:00:38,460
which sounds like a contradiction in

00:00:34,620 --> 00:00:40,410
terms but it really isn't so let me

00:00:38,460 --> 00:00:44,399
start by introducing myself

00:00:40,410 --> 00:00:50,120
my name is Craig Peters I am a program

00:00:44,399 --> 00:00:54,410
manager at Microsoft working on Azure

00:00:50,120 --> 00:00:58,469
Azure my responsibility is container

00:00:54,410 --> 00:01:02,940
infrastructure so basically anything at

00:00:58,469 --> 00:01:05,729
Microsoft Azure that runs containers my

00:01:02,940 --> 00:01:08,040
team is responsible for making sure that

00:01:05,729 --> 00:01:09,990
all of the upstream open source

00:01:08,040 --> 00:01:12,180
dependencies are maintained correctly

00:01:09,990 --> 00:01:16,020
and we contribute everything in the

00:01:12,180 --> 00:01:19,380
upstream as a part of that we develop

00:01:16,020 --> 00:01:24,180
new projects that enable new

00:01:19,380 --> 00:01:29,060
capabilities in container tooling that

00:01:24,180 --> 00:01:32,430
run on adjure or anywhere else and so

00:01:29,060 --> 00:01:36,210
we're gonna talk a little bit about how

00:01:32,430 --> 00:01:38,579
we came to creating a new project called

00:01:36,210 --> 00:01:41,700
gatekeeper and that's the subject of the

00:01:38,579 --> 00:01:44,250
talk today unfortunately I'm up here by

00:01:41,700 --> 00:01:46,439
myself you don't see Tauron standing

00:01:44,250 --> 00:01:50,700
next to me because due to the change in

00:01:46,439 --> 00:01:52,920
schedule Turin had a conflict at this

00:01:50,700 --> 00:01:56,159
hour that he wasn't able to get out of

00:01:52,920 --> 00:01:59,460
so he sends his apologies for for not

00:01:56,159 --> 00:02:04,110
being here I'm also feeling the pain of

00:01:59,460 --> 00:02:07,200
this because what you'll find in the

00:02:04,110 --> 00:02:09,360
discussion today is that I understand

00:02:07,200 --> 00:02:10,590
policy fairly well I have a fair amount

00:02:09,360 --> 00:02:13,120
of experience with it

00:02:10,590 --> 00:02:17,319
I however am NOT

00:02:13,120 --> 00:02:20,940
an export expert in open policy agent on

00:02:17,319 --> 00:02:23,530
which this gatekeeper project depends so

00:02:20,940 --> 00:02:25,780
you know we can we can only go so far in

00:02:23,530 --> 00:02:28,060
the discussion so if we have questions

00:02:25,780 --> 00:02:29,950
that come out of the discussion that

00:02:28,060 --> 00:02:33,720
need to get deeper into open policy

00:02:29,950 --> 00:02:37,480
agent Turin is here at the conference

00:02:33,720 --> 00:02:39,700
and we can find him tomorrow to dig

00:02:37,480 --> 00:02:43,900
deeper into those those questions I'll

00:02:39,700 --> 00:02:45,400
also share other ways in which we can

00:02:43,900 --> 00:02:48,599
collaborate online and through the

00:02:45,400 --> 00:02:57,010
community to get questions answered

00:02:48,599 --> 00:02:59,170
further so without further adieu okay I

00:02:57,010 --> 00:03:02,730
already answered Who I am I want to know

00:02:59,170 --> 00:03:05,799
a little bit about who you guys are

00:03:02,730 --> 00:03:10,660
you know I I want a show of hands here

00:03:05,799 --> 00:03:13,660
who who here is a developer building

00:03:10,660 --> 00:03:15,819
applications that run on container

00:03:13,660 --> 00:03:18,010
infrastructure kubernetes or other other

00:03:15,819 --> 00:03:21,910
places here I do some of that anybody

00:03:18,010 --> 00:03:24,810
else okay that's great it's about

00:03:21,910 --> 00:03:28,510
two-thirds of the audience okay who here

00:03:24,810 --> 00:03:32,609
operates kubernetes clusters for those

00:03:28,510 --> 00:03:34,060
developers as an infrastructure provider

00:03:32,609 --> 00:03:36,190
me too

00:03:34,060 --> 00:03:38,440
okay there's some of the same fans but

00:03:36,190 --> 00:03:40,150
also some different that's not too much

00:03:38,440 --> 00:03:43,560
of a surprise

00:03:40,150 --> 00:03:46,090
who here is here because they're

00:03:43,560 --> 00:03:51,730
responsible for security audits in their

00:03:46,090 --> 00:03:56,019
organization anybody yes a couple that's

00:03:51,730 --> 00:03:59,200
fantastic so I am NOT but I've worked

00:03:56,019 --> 00:04:01,359
with many people like you so I think

00:03:59,200 --> 00:04:06,849
we're gonna be able to have a real good

00:04:01,359 --> 00:04:09,910
conversation here so some of the

00:04:06,849 --> 00:04:12,310
motivation for the work we've done is

00:04:09,910 --> 00:04:14,650
reflected in this URL which is actually

00:04:12,310 --> 00:04:16,209
kind of interesting if you go and take a

00:04:14,650 --> 00:04:19,299
look I'm not going to dig too deeply

00:04:16,209 --> 00:04:24,909
into it but it's basically documentation

00:04:19,299 --> 00:04:26,210
of a number of horror stories what has

00:04:24,909 --> 00:04:27,520
gone wrong

00:04:26,210 --> 00:04:31,580
for some people when they're running

00:04:27,520 --> 00:04:35,360
coup grenades clusters in production for

00:04:31,580 --> 00:04:37,100
big environments and or small or

00:04:35,360 --> 00:04:40,340
basically any time you're trying to do

00:04:37,100 --> 00:04:43,400
anything real a container orchestra to

00:04:40,340 --> 00:04:45,949
environment you you you can always shoot

00:04:43,400 --> 00:04:48,160
yourself in the foot and so these kinds

00:04:45,949 --> 00:04:51,530
of tools that we're gonna talk about are

00:04:48,160 --> 00:04:53,720
intended that reduce the risk of those

00:04:51,530 --> 00:04:55,490
kinds of problems coming about so so

00:04:53,720 --> 00:05:01,030
let's kind of paint the scenario for a

00:04:55,490 --> 00:05:05,479
minute so when we all got started

00:05:01,030 --> 00:05:09,080
building our clusters we very carefully

00:05:05,479 --> 00:05:13,729
planned out how people were gonna use

00:05:09,080 --> 00:05:17,120
them right we generated all of our our

00:05:13,729 --> 00:05:20,240
back we configured it so that everything

00:05:17,120 --> 00:05:21,800
would work you know only the right

00:05:20,240 --> 00:05:26,690
people can have access to the right

00:05:21,800 --> 00:05:28,310
namespaces that essentially you you

00:05:26,690 --> 00:05:32,419
think that you've got everything planned

00:05:28,310 --> 00:05:35,030
out you've got run books you've got ways

00:05:32,419 --> 00:05:37,490
to handle errors back up for recovery

00:05:35,030 --> 00:05:41,270
all that stuff is ready to go let's ship

00:05:37,490 --> 00:05:44,210
it let's open it up all of a sudden the

00:05:41,270 --> 00:05:51,260
developers come and they start doing

00:05:44,210 --> 00:05:52,760
stuff right and very quickly I suspect

00:05:51,260 --> 00:05:56,840
that some of you in this audience may

00:05:52,760 --> 00:05:59,240
recognize some of these questions has

00:05:56,840 --> 00:06:01,909
anybody here ever looked at their

00:05:59,240 --> 00:06:04,009
cluster and said where did that name

00:06:01,909 --> 00:06:05,050
space come from does that ever happen to

00:06:04,009 --> 00:06:08,659
anybody else

00:06:05,050 --> 00:06:10,520
yeah and then you look in the name space

00:06:08,659 --> 00:06:13,009
and you're like whoa there's a whole

00:06:10,520 --> 00:06:17,570
bunch of pods there what what are they

00:06:13,009 --> 00:06:19,190
anybody else yeah and then you look in

00:06:17,570 --> 00:06:21,770
the pods and you see what containers are

00:06:19,190 --> 00:06:23,210
running there oh my god what what does

00:06:21,770 --> 00:06:27,800
the container where did it come from

00:06:23,210 --> 00:06:32,930
like seriously like who who decided to

00:06:27,800 --> 00:06:35,029
pull from that particular repo like how

00:06:32,930 --> 00:06:36,440
did we manage to get there and then you

00:06:35,029 --> 00:06:37,130
know what do I do next what happens if I

00:06:36,440 --> 00:06:39,680
delete this

00:06:37,130 --> 00:06:41,600
like who's gonna care is anybody gonna

00:06:39,680 --> 00:06:44,750
care is a production system gonna go

00:06:41,600 --> 00:06:48,640
down you know what's the impact of that

00:06:44,750 --> 00:06:50,660
so you know you despite your best plans

00:06:48,640 --> 00:06:52,340
you know you have to make things

00:06:50,660 --> 00:06:55,280
available to developers they have to

00:06:52,340 --> 00:06:57,110
have some freedom to move so you you

00:06:55,280 --> 00:06:59,330
can't lock everything down from an

00:06:57,110 --> 00:07:01,700
Arabic perspective completely or you're

00:06:59,330 --> 00:07:04,070
gonna end up in the same old you know

00:07:01,700 --> 00:07:05,600
old space where things you know

00:07:04,070 --> 00:07:08,570
developers couldn't do things they need

00:07:05,600 --> 00:07:14,960
to do so the question is you know how

00:07:08,570 --> 00:07:16,640
can we address these problems so kind of

00:07:14,960 --> 00:07:17,990
skip over the psycho that the previous

00:07:16,640 --> 00:07:20,240
one really did this so you know

00:07:17,990 --> 00:07:22,460
essentially when you've got a dynamic

00:07:20,240 --> 00:07:25,040
environment you've got all kinds of

00:07:22,460 --> 00:07:26,870
things happening at the same time lots

00:07:25,040 --> 00:07:29,270
of teams have kind of conflicting goals

00:07:26,870 --> 00:07:30,470
you're trying to share resources so that

00:07:29,270 --> 00:07:31,880
you're not paying too high the

00:07:30,470 --> 00:07:34,940
administrative costs are too high and

00:07:31,880 --> 00:07:36,920
infrastructure costs and then you've got

00:07:34,940 --> 00:07:39,590
complexes things where you're doing

00:07:36,920 --> 00:07:41,510
similar things but not maybe not even

00:07:39,590 --> 00:07:43,400
exactly the same but across multiple

00:07:41,510 --> 00:07:47,470
infrastructures right maybe different

00:07:43,400 --> 00:07:49,490
clouds on-prem in a public cloud and

00:07:47,470 --> 00:07:53,510
things kind of start getting pretty

00:07:49,490 --> 00:07:56,440
crazy right so how do you limit you know

00:07:53,510 --> 00:07:59,090
the use of unsaved images how do you

00:07:56,440 --> 00:08:02,060
keep track of who created what resources

00:07:59,090 --> 00:08:04,370
and understand the purpose of those

00:08:02,060 --> 00:08:08,330
resources and who depends upon them how

00:08:04,370 --> 00:08:08,720
do you keep users from running into each

00:08:08,330 --> 00:08:10,640
other

00:08:08,720 --> 00:08:12,200
besides namespaces right namespaces

00:08:10,640 --> 00:08:16,150
aren't quite enough there how do you

00:08:12,200 --> 00:08:16,150
make sure that you've got the right

00:08:16,240 --> 00:08:22,880
tooling in place to create observability

00:08:20,510 --> 00:08:24,980
about what's going on in there and and

00:08:22,880 --> 00:08:26,090
how do you manage the cost so you know

00:08:24,980 --> 00:08:30,080
those are all the kinds of questions

00:08:26,090 --> 00:08:33,200
that you know in my experience everybody

00:08:30,080 --> 00:08:34,940
runs into a day to of burning that

00:08:33,200 --> 00:08:37,340
foster like day one is fine

00:08:34,940 --> 00:08:39,380
these Eros good we've kind of got that

00:08:37,340 --> 00:08:45,440
pretty well solved at least cloud

00:08:39,380 --> 00:08:46,660
providers do what happens next so lots

00:08:45,440 --> 00:08:49,510
of things

00:08:46,660 --> 00:08:53,020
happen like we all solve problems on a

00:08:49,510 --> 00:08:56,320
day-to-day basis by using common tools

00:08:53,020 --> 00:08:59,220
that we use every day right so the first

00:08:56,320 --> 00:09:02,680
thing to do is to write things down like

00:08:59,220 --> 00:09:04,420
when you do something make sure that you

00:09:02,680 --> 00:09:07,480
document what you've done I can create

00:09:04,420 --> 00:09:11,500
these wikis you put them in spreadsheets

00:09:07,480 --> 00:09:13,870
who you know there's a million different

00:09:11,500 --> 00:09:17,410
ways that we can try to do that the

00:09:13,870 --> 00:09:19,510
challenge there is I get people to do

00:09:17,410 --> 00:09:24,730
that like nobody wants to write it down

00:09:19,510 --> 00:09:30,130
I created my mo so yes sure oh is it too

00:09:24,730 --> 00:09:34,360
hard to hear okay so the question then

00:09:30,130 --> 00:09:38,860
is the question then is how do you make

00:09:34,360 --> 00:09:41,020
it easy for people to accomplish the

00:09:38,860 --> 00:09:43,780
documentation of things without having

00:09:41,020 --> 00:09:46,390
to go and do a separate manual step to

00:09:43,780 --> 00:09:49,210
write things down and then how do you

00:09:46,390 --> 00:09:53,040
deal with the limitations of our back

00:09:49,210 --> 00:09:56,230
right so like I only have a certain

00:09:53,040 --> 00:10:00,120
limited set of vocabulary for the verbs

00:09:56,230 --> 00:10:03,100
in our back and yeah you can extend that

00:10:00,120 --> 00:10:05,500
but that's a slow process of going

00:10:03,100 --> 00:10:07,960
through the community to define you know

00:10:05,500 --> 00:10:10,690
what do we all mean by role based access

00:10:07,960 --> 00:10:13,030
control right we've got a fairly solid

00:10:10,690 --> 00:10:15,280
definition of what that is today but

00:10:13,030 --> 00:10:17,560
extending that is a slow and cumbersome

00:10:15,280 --> 00:10:19,950
process in this our back is probably the

00:10:17,560 --> 00:10:21,760
wrong mechanism for for accomplishing

00:10:19,950 --> 00:10:25,330
controlling some of these other things

00:10:21,760 --> 00:10:28,150
so you know we can maybe agree that

00:10:25,330 --> 00:10:31,240
neither of these approaches really

00:10:28,150 --> 00:10:32,770
completely solves the problem you can

00:10:31,240 --> 00:10:38,100
you can do some pieces but you're always

00:10:32,770 --> 00:10:42,940
gonna have holes there so kubernetes has

00:10:38,100 --> 00:10:44,260
additional capabilities built into it on

00:10:42,940 --> 00:10:46,960
top of you know once you've

00:10:44,260 --> 00:10:53,110
authenticated somebody you know who are

00:10:46,960 --> 00:10:56,350
they are they allowed to access this is

00:10:53,110 --> 00:10:59,050
all the domain right of our back then

00:10:56,350 --> 00:11:00,190
you've got admission control alright so

00:10:59,050 --> 00:11:02,680
within a mission

00:11:00,190 --> 00:11:05,980
the first thing that happens is for that

00:11:02,680 --> 00:11:08,949
person are they reaching their resource

00:11:05,980 --> 00:11:10,600
code limits right okay do we have the

00:11:08,949 --> 00:11:13,060
resources are they allowed to create new

00:11:10,600 --> 00:11:14,769
things that's great and then we've got

00:11:13,060 --> 00:11:17,649
this thing called the web hook the web

00:11:14,769 --> 00:11:19,509
hook then has access to all of the

00:11:17,649 --> 00:11:22,170
metadata about the object that somebody

00:11:19,509 --> 00:11:25,800
is trying to create here and can

00:11:22,170 --> 00:11:29,439
implement rules using an external

00:11:25,800 --> 00:11:32,259
controller right so what this controller

00:11:29,439 --> 00:11:36,819
does is allows you to write very

00:11:32,259 --> 00:11:39,129
powerful rules to define what can happen

00:11:36,819 --> 00:11:41,319
in that cluster for a given object for a

00:11:39,129 --> 00:11:42,910
given operation right so I'm trying to

00:11:41,319 --> 00:11:45,910
do something to change an object in

00:11:42,910 --> 00:11:49,269
kubernetes is that allowed that's a very

00:11:45,910 --> 00:11:51,399
powerful concept that I can do that late

00:11:49,269 --> 00:11:52,779
in the process and then all the key

00:11:51,399 --> 00:11:56,680
thing here is all of this gets reflected

00:11:52,779 --> 00:11:59,259
in the end in the state of all the

00:11:56,680 --> 00:12:01,899
objects in the cluster right and so all

00:11:59,259 --> 00:12:04,720
of these things happen before it gets

00:12:01,899 --> 00:12:08,920
reflected in that CD and so this is an

00:12:04,720 --> 00:12:12,389
important principle that I love that we

00:12:08,920 --> 00:12:16,000
as a community built into - kubernetes

00:12:12,389 --> 00:12:18,639
the next thing is well if we try to use

00:12:16,000 --> 00:12:20,410
this it does allows us to have access to

00:12:18,639 --> 00:12:23,759
all of that metadata about the object

00:12:20,410 --> 00:12:27,759
and then I can build in to these

00:12:23,759 --> 00:12:30,160
admission controllers all kinds of

00:12:27,759 --> 00:12:33,850
policies right because I have access to

00:12:30,160 --> 00:12:35,589
all that data I can block privileged

00:12:33,850 --> 00:12:39,029
containers I can say certain people in

00:12:35,589 --> 00:12:41,620
certain contexts can can create those

00:12:39,029 --> 00:12:44,410
containers and in other contexts they

00:12:41,620 --> 00:12:47,980
cannot be created I can in certain

00:12:44,410 --> 00:12:48,730
contexts block the use of certain image

00:12:47,980 --> 00:12:51,819
registries

00:12:48,730 --> 00:12:53,439
I can assure the egress rules are only

00:12:51,819 --> 00:12:55,600
used in certain places and so forth

00:12:53,439 --> 00:12:58,240
right there's there's a essentially an

00:12:55,600 --> 00:13:01,480
arbitrary set of combinations of rules

00:12:58,240 --> 00:13:03,970
that are then possible to implement

00:13:01,480 --> 00:13:06,809
through this ingress controller

00:13:03,970 --> 00:13:06,809
mechanism

00:13:07,550 --> 00:13:12,710
the challenges that you have to create

00:13:09,890 --> 00:13:15,970
ingress controllers in order to do that

00:13:12,710 --> 00:13:19,070
and it turns out that that is very hard

00:13:15,970 --> 00:13:23,540
right if you you're essentially just

00:13:19,070 --> 00:13:25,460
writing a new controller and go and for

00:13:23,540 --> 00:13:29,810
people who love to do that that's

00:13:25,460 --> 00:13:34,990
awesome but the challenge is that it's

00:13:29,810 --> 00:13:38,080
not very portable you end up creating

00:13:34,990 --> 00:13:41,180
controllers in general that are

00:13:38,080 --> 00:13:45,830
purpose-built to solve the problem that

00:13:41,180 --> 00:13:48,380
you have today and the policies actually

00:13:45,830 --> 00:13:50,900
end up changing over time and the

00:13:48,380 --> 00:13:53,480
challenge is that you don't want to have

00:13:50,900 --> 00:13:56,060
to go to a developer to say I want to

00:13:53,480 --> 00:13:59,630
change the resource quota from X to Y or

00:13:56,060 --> 00:14:02,210
I want to allow additional namespaces to

00:13:59,630 --> 00:14:04,940
have additional quota these those kinds

00:14:02,210 --> 00:14:07,370
of things don't make sense to encode in

00:14:04,940 --> 00:14:09,200
your code so they need to be flexible

00:14:07,370 --> 00:14:11,030
and parametrized for different

00:14:09,200 --> 00:14:12,890
environments and they need to take

00:14:11,030 --> 00:14:14,510
advantage of external data so you could

00:14:12,890 --> 00:14:17,090
write a controller that goes and queries

00:14:14,510 --> 00:14:20,120
some external system like an accounting

00:14:17,090 --> 00:14:23,360
system or an audit system to make a

00:14:20,120 --> 00:14:25,630
decision that's great but then you also

00:14:23,360 --> 00:14:29,270
have to think about other use cases like

00:14:25,630 --> 00:14:31,360
what if I want to make sure to validate

00:14:29,270 --> 00:14:34,580
all of my policies as I change them and

00:14:31,360 --> 00:14:37,010
I want to do them in kind of a CI system

00:14:34,580 --> 00:14:37,880
so I need a dry run mechanism and all

00:14:37,010 --> 00:14:39,560
those kinds of things

00:14:37,880 --> 00:14:43,310
that's great all of a sudden it starts

00:14:39,560 --> 00:14:46,910
looking like a very sort of custom set

00:14:43,310 --> 00:14:49,090
of code that's not something that we all

00:14:46,910 --> 00:14:53,090
want to maintain or develop by ourselves

00:14:49,090 --> 00:14:56,300
so I want to take a look now at a

00:14:53,090 --> 00:14:58,910
solution and that solution is gatekeeper

00:14:56,300 --> 00:15:00,680
so we're gonna do that in the form of a

00:14:58,910 --> 00:15:08,210
recorded demo because nobody wants to

00:15:00,680 --> 00:15:10,540
watch me type here with me well I get

00:15:08,210 --> 00:15:10,540
that up

00:15:20,180 --> 00:15:24,310
okay very slow

00:15:25,390 --> 00:15:31,230
so

00:15:27,060 --> 00:15:34,590
what is gatekeeper gatekeeper is an

00:15:31,230 --> 00:15:39,090
open-source project which you can find

00:15:34,590 --> 00:15:40,250
on github it has on github repo it has

00:15:39,090 --> 00:15:44,010
very straightforward installation

00:15:40,250 --> 00:15:48,840
instructions you'll find that it's

00:15:44,010 --> 00:15:53,940
implemented as a set of kubernetes

00:15:48,840 --> 00:15:59,250
controllers resource definitions and you

00:15:53,940 --> 00:16:03,330
can simply use the the script to deploy

00:15:59,250 --> 00:16:07,380
those and what you see is we've created

00:16:03,330 --> 00:16:13,520
a set of objects in the namespace

00:16:07,380 --> 00:16:13,520
gatekeeper system and it's going to fast

00:16:13,640 --> 00:16:19,320
so we essentially applied a set of

00:16:17,850 --> 00:16:21,300
resource definitions there's research

00:16:19,320 --> 00:16:22,980
definitions created controllers in the

00:16:21,300 --> 00:16:24,690
controller namespace and now we're going

00:16:22,980 --> 00:16:30,420
to walk through what it looks like to

00:16:24,690 --> 00:16:33,330
use gatekeeper so let's look at what CR

00:16:30,420 --> 00:16:35,520
DS got created it created - one for the

00:16:33,330 --> 00:16:37,860
configs and one for the templates we'll

00:16:35,520 --> 00:16:41,040
look at the importance of that in a few

00:16:37,860 --> 00:16:43,970
minutes this is a validating web

00:16:41,040 --> 00:16:48,600
configuration so it's a standard way of

00:16:43,970 --> 00:16:51,450
configuring the web hook and we take a

00:16:48,600 --> 00:16:53,250
look at that you'll see here that it's

00:16:51,450 --> 00:16:56,100
look it's an admission web controller

00:16:53,250 --> 00:16:58,560
and it's implemented in the gatekeeper

00:16:56,100 --> 00:17:01,470
system and it applies essentially

00:16:58,560 --> 00:17:04,220
against a set of resource resources that

00:17:01,470 --> 00:17:09,180
are coming in through the kubernetes api

00:17:04,220 --> 00:17:13,020
so in this demo we've got a sample Bank

00:17:09,180 --> 00:17:15,390
there's a web native bank and they've

00:17:13,020 --> 00:17:18,060
implemented kubernetes and they've

00:17:15,390 --> 00:17:20,790
opened up to the world so my developer

00:17:18,060 --> 00:17:23,370
now can go and create some system and

00:17:20,790 --> 00:17:24,630
there they created a namespace and they

00:17:23,370 --> 00:17:26,600
created a bunch of objects in that

00:17:24,630 --> 00:17:29,420
namespace and then their project kind of

00:17:26,600 --> 00:17:32,100
they moved on to another project and

00:17:29,420 --> 00:17:34,620
then we found this name space where the

00:17:32,100 --> 00:17:38,010
administrators and and we're like well

00:17:34,620 --> 00:17:38,560
who created that let's take a look at it

00:17:38,010 --> 00:17:40,180
and

00:17:38,560 --> 00:17:41,710
you know this this is we all kind of

00:17:40,180 --> 00:17:43,630
some of us raise our hands you know

00:17:41,710 --> 00:17:44,800
we've we've found namespaces we don't

00:17:43,630 --> 00:17:46,150
know what they are we have to go talk to

00:17:44,800 --> 00:17:50,710
a bunch of people it can take quite a

00:17:46,150 --> 00:17:52,240
long time and eventually we find that

00:17:50,710 --> 00:17:53,830
somebody created this and then they

00:17:52,240 --> 00:17:58,540
moved onto it and this is not depend on

00:17:53,830 --> 00:18:00,310
in any way so how do we say never again

00:17:58,540 --> 00:18:03,850
like we're not going to allow that to

00:18:00,310 --> 00:18:06,100
happen anymore so there's a set of

00:18:03,850 --> 00:18:08,410
templates in this demo that we walk

00:18:06,100 --> 00:18:10,150
through and the important one here that

00:18:08,410 --> 00:18:12,520
we're going to look at first is that

00:18:10,150 --> 00:18:15,370
we're gonna require labels so that's a

00:18:12,520 --> 00:18:17,500
template for rules for requiring labels

00:18:15,370 --> 00:18:20,560
and then there's constraint for the

00:18:17,500 --> 00:18:26,560
labels and we'll apply all of those

00:18:20,560 --> 00:18:27,790
constraints let's take a look at we're

00:18:26,560 --> 00:18:31,660
gonna look at one of the constraints

00:18:27,790 --> 00:18:35,410
here here it is so in the constraint

00:18:31,660 --> 00:18:36,130
we're gonna say all new namespaces must

00:18:35,410 --> 00:18:38,170
have an owner

00:18:36,130 --> 00:18:40,360
right so it's a it's a constraint of

00:18:38,170 --> 00:18:42,780
kind required labels and we're gonna say

00:18:40,360 --> 00:18:46,870
all namespaces must have an owner and

00:18:42,780 --> 00:18:48,790
the owner must fit a standard template

00:18:46,870 --> 00:18:52,480
in this case implemented as a regex

00:18:48,790 --> 00:18:55,900
so once we apply that constraint to the

00:18:52,480 --> 00:18:57,370
system the next time the developer comes

00:18:55,900 --> 00:18:59,350
back and says okay I'm just gonna create

00:18:57,370 --> 00:19:01,570
an arbitrary namespace they can they're

00:18:59,350 --> 00:19:04,360
back you can't just create a namespace

00:19:01,570 --> 00:19:06,430
you also have to label it right so the

00:19:04,360 --> 00:19:10,060
the awesome thing about this is that I

00:19:06,430 --> 00:19:12,010
can just simply create a user friendly

00:19:10,060 --> 00:19:14,110
message so they they understand what

00:19:12,010 --> 00:19:16,930
they've actually done wrong so this is a

00:19:14,110 --> 00:19:19,420
properly formed namespace that's got an

00:19:16,930 --> 00:19:21,670
owner label associated with it that

00:19:19,420 --> 00:19:26,050
matches that regex so now I can create

00:19:21,670 --> 00:19:29,650
that namespace and now what I'm going to

00:19:26,050 --> 00:19:32,860
show is how you you know we're gonna try

00:19:29,650 --> 00:19:35,140
to create another set of resources that

00:19:32,860 --> 00:19:39,070
have no limits that violates another

00:19:35,140 --> 00:19:40,840
policy that or the limits are too high

00:19:39,070 --> 00:19:43,030
and we get another message that show

00:19:40,840 --> 00:19:47,830
that's very clear about what policy I've

00:19:43,030 --> 00:19:50,200
I've got violated in this case I'm

00:19:47,830 --> 00:19:51,600
pulling containers from the wrong image

00:19:50,200 --> 00:19:53,309
repository

00:19:51,600 --> 00:19:57,270
it tells me sorry you're not allowed to

00:19:53,309 --> 00:20:00,360
do that so here it's another example

00:19:57,270 --> 00:20:02,520
where I'm looking at let's see this one

00:20:00,360 --> 00:20:04,169
is about duplicate service I say this is

00:20:02,520 --> 00:20:07,049
a policy that says if you're gonna

00:20:04,169 --> 00:20:09,780
create a new resource in a namespace it

00:20:07,049 --> 00:20:12,090
can't have the same name as another

00:20:09,780 --> 00:20:14,760
resource in that net same namespace and

00:20:12,090 --> 00:20:16,679
so we've tried to create a duplicate one

00:20:14,760 --> 00:20:19,010
and we got back a very meaningful error

00:20:16,679 --> 00:20:22,559
there so eventually the developer

00:20:19,010 --> 00:20:24,210
figures out through what those pop the

00:20:22,559 --> 00:20:26,179
implementation of those policies they

00:20:24,210 --> 00:20:29,789
get their application up and running and

00:20:26,179 --> 00:20:31,950
everything as well until something goes

00:20:29,789 --> 00:20:37,770
down let's go back for a second here

00:20:31,950 --> 00:20:39,230
let's get something important so they

00:20:37,770 --> 00:20:42,270
finally get their service up and running

00:20:39,230 --> 00:20:48,450
and everything's going great

00:20:42,270 --> 00:20:52,409
and we never so why did their system go

00:20:48,450 --> 00:20:55,890
down in this case we do a root cause

00:20:52,409 --> 00:20:57,690
analysis and something you know a common

00:20:55,890 --> 00:21:00,270
practice for all of us developers is

00:20:57,690 --> 00:21:02,280
that we're we're lazy but we also know

00:21:00,270 --> 00:21:05,220
that we want to be taking the latest

00:21:02,280 --> 00:21:08,100
patches and making sure that we're using

00:21:05,220 --> 00:21:11,070
the right latest image so we often

00:21:08,100 --> 00:21:13,409
resort to using the latest image tag

00:21:11,070 --> 00:21:16,440
like that's a has anybody else ever like

00:21:13,409 --> 00:21:19,110
done that I use latest way too much well

00:21:16,440 --> 00:21:21,600
it turns out that often the latest has a

00:21:19,110 --> 00:21:24,120
whole bunch of stuff that we don't yet

00:21:21,600 --> 00:21:25,650
support or can cause unforeseen

00:21:24,120 --> 00:21:28,140
circumstances and it turns out that

00:21:25,650 --> 00:21:30,659
that's often a cause when you do a root

00:21:28,140 --> 00:21:34,250
cause analysis of a big outage so let's

00:21:30,659 --> 00:21:40,830
say maybe what we want to do is actually

00:21:34,250 --> 00:21:42,179
not allow the use of the latest image so

00:21:40,830 --> 00:21:44,360
now let's look a little bit under the

00:21:42,179 --> 00:21:49,110
hood there are two pieces to

00:21:44,360 --> 00:21:51,030
implementing policy with gatekeeper one

00:21:49,110 --> 00:21:52,679
piece is the template so this is

00:21:51,030 --> 00:21:57,390
something that the administrator would

00:21:52,679 --> 00:22:00,570
create the template this is a template

00:21:57,390 --> 00:22:03,480
called kubernetes band image tags and

00:22:00,570 --> 00:22:04,500
what it does is it implements this deny

00:22:03,480 --> 00:22:06,690
rule

00:22:04,500 --> 00:22:11,790
deny rule this is actually an open

00:22:06,690 --> 00:22:16,350
policy agent syntax an open policy agent

00:22:11,790 --> 00:22:20,490
actually does the work of enforcing the

00:22:16,350 --> 00:22:23,610
policies for gatekeeper it says you know

00:22:20,490 --> 00:22:26,430
I look at these attributes of the input

00:22:23,610 --> 00:22:31,050
I find the spec I pull up the image

00:22:26,430 --> 00:22:33,870
label and I say let me get a variable

00:22:31,050 --> 00:22:35,880
and compare that variable to the image

00:22:33,870 --> 00:22:40,290
label and if they don't matter if they

00:22:35,880 --> 00:22:41,550
match then this is a band label right so

00:22:40,290 --> 00:22:44,790
here you'll notice it's not specified

00:22:41,550 --> 00:22:49,160
that the latest tag is the one so next

00:22:44,790 --> 00:22:54,210
we're gonna do we're gonna look at the

00:22:49,160 --> 00:22:58,320
template so this is the actual object

00:22:54,210 --> 00:23:02,190
that is the variables or the constraints

00:22:58,320 --> 00:23:05,280
applied to that template so what it what

00:23:02,190 --> 00:23:08,760
the what the constraint did is it's a up

00:23:05,280 --> 00:23:13,680
here I can see that when I look at the

00:23:08,760 --> 00:23:19,070
labels the label that I'm trying to

00:23:13,680 --> 00:23:21,150
match is the latest tag so right up here

00:23:19,070 --> 00:23:23,580
right so I'm trying to I'm looking at

00:23:21,150 --> 00:23:27,150
the latest tag and I that's the tag that

00:23:23,580 --> 00:23:28,740
I want to be in and so here I'm actually

00:23:27,150 --> 00:23:31,140
looking at the object it might be more

00:23:28,740 --> 00:23:33,180
it's easier to see in the constraint but

00:23:31,140 --> 00:23:37,290
the constraint is actually a very simple

00:23:33,180 --> 00:23:39,930
object and that's essentially the end of

00:23:37,290 --> 00:23:43,160
the demo so let's take a look under the

00:23:39,930 --> 00:23:43,160
hood how did that work

00:23:53,070 --> 00:23:56,070
okay

00:23:58,179 --> 00:24:05,000
okay

00:24:00,770 --> 00:24:06,770
so how did we get to this so when we

00:24:05,000 --> 00:24:08,000
looked at the demo we noticed that there

00:24:06,770 --> 00:24:11,350
were a couple of things though there's a

00:24:08,000 --> 00:24:13,760
template that implements the the

00:24:11,350 --> 00:24:17,000
semantics which is in a language called

00:24:13,760 --> 00:24:19,520
rego re geo the open policy agent

00:24:17,000 --> 00:24:21,559
understands and so some class of users

00:24:19,520 --> 00:24:23,690
we call them administrators but some

00:24:21,559 --> 00:24:26,330
class of users needs to understand the

00:24:23,690 --> 00:24:28,100
the Rigo semantics and then there's

00:24:26,330 --> 00:24:30,860
another class of users that needs to

00:24:28,100 --> 00:24:33,110
understand the policies you actually

00:24:30,860 --> 00:24:37,870
want to implement using those semantics

00:24:33,110 --> 00:24:41,360
right so those those are more the the

00:24:37,870 --> 00:24:42,860
the admins who care about what the

00:24:41,360 --> 00:24:44,890
resource limits are or which tags

00:24:42,860 --> 00:24:50,179
shouldn't be allowed so the way it works

00:24:44,890 --> 00:24:52,970
is happily as kubernetes objects so gate

00:24:50,179 --> 00:24:59,270
keeper implements open policy agent as a

00:24:52,970 --> 00:25:05,240
set of CR DS those CR DS are watched by

00:24:59,270 --> 00:25:07,880
oppa via gatekeeper and it watches

00:25:05,240 --> 00:25:09,559
through the API server all of the

00:25:07,880 --> 00:25:12,770
objects it created through the API

00:25:09,559 --> 00:25:15,170
server implements this webhook admission

00:25:12,770 --> 00:25:17,960
web hook and allows me to do a review

00:25:15,170 --> 00:25:21,170
through the web hook of everything and

00:25:17,960 --> 00:25:24,290
render the query against oppa to apply

00:25:21,170 --> 00:25:26,809
those constraints to the policy to the

00:25:24,290 --> 00:25:28,640
policy templates essentially the

00:25:26,809 --> 00:25:32,000
template ends up generating the policy

00:25:28,640 --> 00:25:33,860
in oppa and like I said before it

00:25:32,000 --> 00:25:37,640
essentially exposes all of the metadata

00:25:33,860 --> 00:25:41,270
of every object type that goes through

00:25:37,640 --> 00:25:44,600
the admission controller and so in this

00:25:41,270 --> 00:25:50,030
way we now have essentially a cloud

00:25:44,600 --> 00:25:52,670
native way of enforcing policies so some

00:25:50,030 --> 00:25:55,960
people have rightfully asked well what's

00:25:52,670 --> 00:25:58,340
a why gatekeeper why don't I just

00:25:55,960 --> 00:26:01,400
implement everything in open policy

00:25:58,340 --> 00:26:05,809
agent open policy agent is a very

00:26:01,400 --> 00:26:07,280
powerful cross context policy engine

00:26:05,809 --> 00:26:10,010
that's been used for all kinds of

00:26:07,280 --> 00:26:12,530
different control systems and so the

00:26:10,010 --> 00:26:15,470
fundamental difference is that

00:26:12,530 --> 00:26:18,680
in Opa you essentially load all the

00:26:15,470 --> 00:26:22,280
policies via commit config Maps config

00:26:18,680 --> 00:26:25,540
maps are traditionally very hard to kind

00:26:22,280 --> 00:26:30,620
of maintain over time in clusters and

00:26:25,540 --> 00:26:33,140
there's essentially in OPA there's no

00:26:30,620 --> 00:26:36,260
library of standard policies you have to

00:26:33,140 --> 00:26:38,930
essentially write your rego from from

00:26:36,260 --> 00:26:44,150
scratch there's there's no clear way to

00:26:38,930 --> 00:26:47,030
do reuse or sharing of that and that's

00:26:44,150 --> 00:26:49,520
not exactly the way we we want to

00:26:47,030 --> 00:26:51,830
standardize standardize that across

00:26:49,520 --> 00:26:54,440
multiple clusters or multiple

00:26:51,830 --> 00:26:57,580
environments so what we did with

00:26:54,440 --> 00:27:00,800
gatekeeper is that we turned these into

00:26:57,580 --> 00:27:05,600
custom resource definitions so that you

00:27:00,800 --> 00:27:07,700
can manage policies as objects the way

00:27:05,600 --> 00:27:09,020
that happens is this combination of the

00:27:07,700 --> 00:27:11,960
templates which we looked at which

00:27:09,020 --> 00:27:16,910
contain the metadata you want to extract

00:27:11,960 --> 00:27:19,820
and the rego semantics and then the

00:27:16,910 --> 00:27:22,310
constraints which are put together with

00:27:19,820 --> 00:27:26,630
that template to create the instances of

00:27:22,310 --> 00:27:28,670
those CRD policies and then the project

00:27:26,630 --> 00:27:29,810
includes you know part of one of the

00:27:28,670 --> 00:27:33,520
things that we're building up through

00:27:29,810 --> 00:27:36,350
gatekeeper is a library of standard

00:27:33,520 --> 00:27:38,660
policies so standard templates and

00:27:36,350 --> 00:27:42,530
constraints that you can then go and

00:27:38,660 --> 00:27:49,130
fork and modify and use them for your

00:27:42,530 --> 00:27:53,600
own purposes another feature that we

00:27:49,130 --> 00:27:57,830
added to gatekeeper is intended to make

00:27:53,600 --> 00:28:00,860
it easier for companies to get from

00:27:57,830 --> 00:28:04,150
point a where we are today with say no

00:28:00,860 --> 00:28:06,950
policies implemented to point B I'm

00:28:04,150 --> 00:28:09,500
completely in compliance and all of my

00:28:06,950 --> 00:28:11,540
policies are enforced without killing

00:28:09,500 --> 00:28:14,150
your developers or your administrators

00:28:11,540 --> 00:28:16,370
so the first step in that is to

00:28:14,150 --> 00:28:19,970
understand in my existing environment

00:28:16,370 --> 00:28:21,800
what objects conform to my policies and

00:28:19,970 --> 00:28:24,470
which ones are out of compliance so we

00:28:21,800 --> 00:28:26,610
implemented an audit capability that

00:28:24,470 --> 00:28:29,820
audit capability allows me to

00:28:26,610 --> 00:28:32,370
periodically look at all the objects in

00:28:29,820 --> 00:28:35,970
my clusters and evaluate them against

00:28:32,370 --> 00:28:39,660
out of the set of policies I have in

00:28:35,970 --> 00:28:44,670
place and that report is done generated

00:28:39,660 --> 00:28:48,150
as an audit against the CR D this allows

00:28:44,670 --> 00:28:50,370
me to say over time I'm gonna start by

00:28:48,150 --> 00:28:53,610
auditing and understanding where I'm out

00:28:50,370 --> 00:28:55,350
of compliance and then I may either tune

00:28:53,610 --> 00:28:58,020
the policy because I may decide that

00:28:55,350 --> 00:29:00,330
something should be allowed in my policy

00:28:58,020 --> 00:29:04,770
and then eventually I'll start enforcing

00:29:00,330 --> 00:29:07,470
so that all new objects have to conform

00:29:04,770 --> 00:29:09,960
to that policy and so this allows sort

00:29:07,470 --> 00:29:11,880
of an easier on ramp which is a very

00:29:09,960 --> 00:29:13,410
very important thing in a lot of

00:29:11,880 --> 00:29:16,080
environments other environments

00:29:13,410 --> 00:29:20,460
obviously you may want to enforce them

00:29:16,080 --> 00:29:23,460
right away so where are we in the

00:29:20,460 --> 00:29:27,840
lifecycle of this project so this

00:29:23,460 --> 00:29:31,410
project is in the alpha stage we it's

00:29:27,840 --> 00:29:33,480
working great we've got it I can

00:29:31,410 --> 00:29:37,500
actually say that we use it I'm at

00:29:33,480 --> 00:29:41,610
Microsoft and we use it to implement the

00:29:37,500 --> 00:29:44,340
as your policy or aks so we actually

00:29:41,610 --> 00:29:46,860
have a a preview service running in

00:29:44,340 --> 00:29:52,170
Microsoft leveraging exactly this

00:29:46,860 --> 00:29:54,540
technology we also have other vendors

00:29:52,170 --> 00:29:55,140
who are using this technology in their

00:29:54,540 --> 00:29:57,210
environments

00:29:55,140 --> 00:29:58,530
and what we're doing is we're trying to

00:29:57,210 --> 00:29:59,820
build we're at the stage where we're

00:29:58,530 --> 00:30:04,260
trying to build the community around

00:29:59,820 --> 00:30:07,710
this so we need more hands who care

00:30:04,260 --> 00:30:10,080
about this to come get involved and give

00:30:07,710 --> 00:30:11,970
us feedback and participate in in the

00:30:10,080 --> 00:30:14,450
development of it so there are new

00:30:11,970 --> 00:30:17,730
things that right now are on the horizon

00:30:14,450 --> 00:30:18,270
right now we don't support mutating

00:30:17,730 --> 00:30:21,900
webhooks

00:30:18,270 --> 00:30:23,430
so the next thing that we're looking at

00:30:21,900 --> 00:30:25,440
doing is doing things like well if

00:30:23,430 --> 00:30:27,600
somebody requests something from the

00:30:25,440 --> 00:30:29,460
docker registry maybe I want to point

00:30:27,600 --> 00:30:31,770
them to my private registry for example

00:30:29,460 --> 00:30:33,510
right without in a silent way so they

00:30:31,770 --> 00:30:35,160
don't have to worry about it right so

00:30:33,510 --> 00:30:37,110
mutating with web hooks are one thing

00:30:35,160 --> 00:30:40,889
another is that

00:30:37,110 --> 00:30:44,549
or the you know we do replicate the data

00:30:40,889 --> 00:30:46,110
from NCD back into open policy agent so

00:30:44,549 --> 00:30:49,440
that we can do comparisons across

00:30:46,110 --> 00:30:52,169
multiple clusters for example that will

00:30:49,440 --> 00:30:55,169
also be useful for comparing against

00:30:52,169 --> 00:30:57,360
external data so that you can use

00:30:55,169 --> 00:30:59,460
additional context in your policies so

00:30:57,360 --> 00:31:03,649
that's another piece of work we're also

00:30:59,460 --> 00:31:06,049
working with cig off on authorization

00:31:03,649 --> 00:31:08,389
and using my OPA with authorization

00:31:06,049 --> 00:31:12,330
likely to not actually be a part of

00:31:08,389 --> 00:31:13,980
gatekeeper but a separate project the

00:31:12,330 --> 00:31:17,730
audit right now is essentially an

00:31:13,980 --> 00:31:19,499
initial attack at it we have a lot of

00:31:17,730 --> 00:31:21,090
feedback that we need more capabilities

00:31:19,499 --> 00:31:24,330
there right now

00:31:21,090 --> 00:31:26,159
gatekeeper has very limited metrics and

00:31:24,330 --> 00:31:28,320
observability we know it needs more

00:31:26,159 --> 00:31:32,850
maturity there and right now there's no

00:31:28,320 --> 00:31:35,549
tooling around creating the the policies

00:31:32,850 --> 00:31:38,730
you there is a dry run so I can create a

00:31:35,549 --> 00:31:41,999
set and kind of locally test whether or

00:31:38,730 --> 00:31:44,399
not my policy is well-formed and and

00:31:41,999 --> 00:31:46,139
what you know what objects don't work

00:31:44,399 --> 00:31:48,600
but we need to do more there to make it

00:31:46,139 --> 00:31:51,749
easier I want to quickly say thank you

00:31:48,600 --> 00:31:54,289
to the community of people who have been

00:31:51,749 --> 00:31:57,570
the core of getting started with

00:31:54,289 --> 00:31:59,970
gatekeeper it's a you know a very

00:31:57,570 --> 00:32:02,119
interesting cross-section of people

00:31:59,970 --> 00:32:06,529
across a number of different

00:32:02,119 --> 00:32:11,730
organizations including Google Microsoft

00:32:06,529 --> 00:32:13,769
Red Hat and and many others so how do

00:32:11,730 --> 00:32:17,369
you get involved this is a very

00:32:13,769 --> 00:32:22,409
important slide you come to the slack so

00:32:17,369 --> 00:32:24,090
please join the slack community for an

00:32:22,409 --> 00:32:28,590
open policy agent there's a cuckoo noise

00:32:24,090 --> 00:32:30,419
policy group and you know come submit

00:32:28,590 --> 00:32:33,749
your issues and keep track of what's

00:32:30,419 --> 00:32:36,600
going on through OPA gatekeeper right

00:32:33,749 --> 00:32:38,629
now the meetings for the community

00:32:36,600 --> 00:32:41,669
aren't at a very Asian

00:32:38,629 --> 00:32:45,809
friendly time but that's something we're

00:32:41,669 --> 00:32:48,090
looking at fixing I'm pushing for having

00:32:45,809 --> 00:32:49,440
a Europe friendly time and an Asia

00:32:48,090 --> 00:32:51,690
friendly time

00:32:49,440 --> 00:32:56,730
in North America some warnings or nights

00:32:51,690 --> 00:32:58,500
my time and that is the end of my

00:32:56,730 --> 00:33:00,929
presentation I mean I think we have one

00:32:58,500 --> 00:33:02,909
minute for questions if there are or I'm

00:33:00,929 --> 00:33:05,159
happy to hang out afterwards for any

00:33:02,909 --> 00:33:11,429
additional questions are there any

00:33:05,159 --> 00:33:17,220
questions real quick no well okay

00:33:11,429 --> 00:33:20,990
oh there is one question we're trying to

00:33:17,220 --> 00:33:24,000
do something like we're using the eks

00:33:20,990 --> 00:33:27,539
AWS we're trying to use like ki am I

00:33:24,000 --> 00:33:35,309
wonder if if this can replace ki am in

00:33:27,539 --> 00:33:37,769
terms of like roles i I don't know 100%

00:33:35,309 --> 00:33:41,129
because I don't know ki am I know I am

00:33:37,769 --> 00:33:45,539
and I assumed ki am essentially just

00:33:41,129 --> 00:33:47,549
extends that okay so in theory I think

00:33:45,539 --> 00:33:52,860
the answer is yes we should test out

00:33:47,549 --> 00:33:53,460
that use case so unfortunately we're out

00:33:52,860 --> 00:33:55,320
of time

00:33:53,460 --> 00:33:57,250
thank you guys very much I really

00:33:55,320 --> 00:34:00,910
appreciate your attention

00:33:57,250 --> 00:34:00,910

YouTube URL: https://www.youtube.com/watch?v=igrV-1F7Xy0


