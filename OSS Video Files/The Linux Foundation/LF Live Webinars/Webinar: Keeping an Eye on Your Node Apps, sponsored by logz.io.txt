Title: Webinar: Keeping an Eye on Your Node Apps, sponsored by logz.io
Publication date: 2020-08-20
Playlist: LF Live Webinars
Description: 
	Node apps get shipped as a single instance or in the metric tonne load; they are officially everywhere. When building and debugging them weâ€™re used to sending direct to console, a stream, or even a log file, but what about their performance and status at scale?
Captions: 
	00:00:00,880 --> 00:00:03,439
all right

00:00:06,799 --> 00:00:14,920
i have the con as they say um

00:00:10,160 --> 00:00:17,920
so hi everybody i need to do the screen

00:00:14,920 --> 00:00:17,920
sharing

00:00:18,080 --> 00:00:22,800
and that should be it says i'm sharing

00:00:24,400 --> 00:00:30,880
there we go right how you all doing

00:00:28,560 --> 00:00:32,000
i know i can't get any feedback but hi

00:00:30,880 --> 00:00:33,680
so uh i

00:00:32,000 --> 00:00:37,120
am mike elsmore i'm developer advocate

00:00:33,680 --> 00:00:40,320
at uh logs io i'm

00:00:37,120 --> 00:00:42,320
somewhere between javascript hackery and

00:00:40,320 --> 00:00:43,920
somebody who wants to become an operator

00:00:42,320 --> 00:00:45,600
now i'm not sure which one i am quite

00:00:43,920 --> 00:00:48,320
yet

00:00:45,600 --> 00:00:49,840
and so what's the problem that this talk

00:00:48,320 --> 00:00:53,520
is all from

00:00:49,840 --> 00:00:54,960
well it's node.js

00:00:53,520 --> 00:00:57,039
node.js isn't actually the problem

00:00:54,960 --> 00:00:58,079
itself in reality it's the fact that

00:00:57,039 --> 00:01:00,640
when we are shipping

00:00:58,079 --> 00:01:01,920
node.js we are shipping it by the metric

00:01:00,640 --> 00:01:04,879
amount

00:01:01,920 --> 00:01:06,960
many many many many many many many many

00:01:04,879 --> 00:01:10,320
many many many many of them

00:01:06,960 --> 00:01:12,479
um and when we are working

00:01:10,320 --> 00:01:13,760
in systems where we are shipping huge

00:01:12,479 --> 00:01:16,080
amounts of air um

00:01:13,760 --> 00:01:17,680
there's a lot of data and we don't seem

00:01:16,080 --> 00:01:22,080
to look at it

00:01:17,680 --> 00:01:22,080
to be fair there is a problem with uh

00:01:22,240 --> 00:01:28,240
well logs metrics data and the fact that

00:01:25,520 --> 00:01:30,400
we don't seem to try tracking yet using

00:01:28,240 --> 00:01:32,000
it or keeping an eye on it

00:01:30,400 --> 00:01:34,400
until something goes back which is

00:01:32,000 --> 00:01:36,720
always too late or if we're lucky

00:01:34,400 --> 00:01:38,799
um somebody has had foresight because

00:01:36,720 --> 00:01:40,560
something has gone bang beforehand

00:01:38,799 --> 00:01:42,000
and they've implemented it for us so we

00:01:40,560 --> 00:01:43,600
don't have

00:01:42,000 --> 00:01:45,280
a clue where it's going or why it's

00:01:43,600 --> 00:01:48,720
going or how etc

00:01:45,280 --> 00:01:50,880
so this talk is a

00:01:48,720 --> 00:01:52,880
beginning to intermediary thing

00:01:50,880 --> 00:01:53,680
explaining how you can start tracking

00:01:52,880 --> 00:01:56,719
this information

00:01:53,680 --> 00:01:59,200
and why and what it is so that you can

00:01:56,719 --> 00:02:00,719
see and find the benefits later i'm also

00:01:59,200 --> 00:02:01,200
going to apologize now i'm having to

00:02:00,719 --> 00:02:03,200
drink

00:02:01,200 --> 00:02:05,680
a lot of water very regularly to keep my

00:02:03,200 --> 00:02:05,680
throat going

00:02:07,040 --> 00:02:10,720
the joys of getting sick when it's warm

00:02:09,840 --> 00:02:13,200
so

00:02:10,720 --> 00:02:14,800
uh logs they look like this we're used

00:02:13,200 --> 00:02:18,400
to this when we are building and it's

00:02:14,800 --> 00:02:21,520
usually just console out using color or

00:02:18,400 --> 00:02:24,720
something like that and uh you know

00:02:21,520 --> 00:02:26,640
it's useful it helps us debug it helps

00:02:24,720 --> 00:02:29,920
us work out what to do

00:02:26,640 --> 00:02:32,560
um but what about when we're running

00:02:29,920 --> 00:02:33,920
thousands of them at scale on the

00:02:32,560 --> 00:02:37,440
internet

00:02:33,920 --> 00:02:40,400
well the next step observability

00:02:37,440 --> 00:02:41,040
if you haven't heard what that is that

00:02:40,400 --> 00:02:45,040
is

00:02:41,040 --> 00:02:48,080
this um it's three core components

00:02:45,040 --> 00:02:50,560
uh the first one is logs so this is uh

00:02:48,080 --> 00:02:53,760
we would use this for diagnosis metrics

00:02:50,560 --> 00:02:56,480
for detecting uh the information well

00:02:53,760 --> 00:02:58,640
the state of a system either in a small

00:02:56,480 --> 00:03:02,159
component or the overall

00:02:58,640 --> 00:03:04,000
view of the system and traces which is

00:03:02,159 --> 00:03:05,440
how we isolate where a problem could be

00:03:04,000 --> 00:03:08,560
we can actually um

00:03:05,440 --> 00:03:10,239
drill down into it um most of us as web

00:03:08,560 --> 00:03:10,800
developers are very used to this when we

00:03:10,239 --> 00:03:13,760
open up

00:03:10,800 --> 00:03:15,599
um any browser in dev tools and look at

00:03:13,760 --> 00:03:16,080
the network traffic we see the traces

00:03:15,599 --> 00:03:18,640
and

00:03:16,080 --> 00:03:19,120
the impacts of all the web requests so

00:03:18,640 --> 00:03:21,280
that's

00:03:19,120 --> 00:03:22,640
network tracing but the tracing here can

00:03:21,280 --> 00:03:26,080
be applied to

00:03:22,640 --> 00:03:29,599
the code and its process

00:03:26,080 --> 00:03:32,799
um we could equally call it um

00:03:29,599 --> 00:03:34,239
something like a distributed profile

00:03:32,799 --> 00:03:36,319
link

00:03:34,239 --> 00:03:38,159
um so most people are currently going i

00:03:36,319 --> 00:03:42,400
don't need any of this

00:03:38,159 --> 00:03:44,879
i've got xyz solution

00:03:42,400 --> 00:03:46,239
that means i don't need it or we're a

00:03:44,879 --> 00:03:46,959
small company we don't need to look at

00:03:46,239 --> 00:03:48,640
it or we're a

00:03:46,959 --> 00:03:50,080
huge company we have an ops team we

00:03:48,640 --> 00:03:53,280
don't need to care about this

00:03:50,080 --> 00:03:55,040
no i disagree

00:03:53,280 --> 00:03:56,319
because this isn't going to be easy and

00:03:55,040 --> 00:03:56,720
something is going to go wrong at some

00:03:56,319 --> 00:03:58,480
point

00:03:56,720 --> 00:04:00,480
and you are going to have to look at it

00:03:58,480 --> 00:04:02,560
it's just the way the

00:04:00,480 --> 00:04:05,439
internet works prepare for the

00:04:02,560 --> 00:04:05,439
inevitable bang

00:04:10,159 --> 00:04:13,680
so let's start with the first one event

00:04:12,879 --> 00:04:16,239
logs

00:04:13,680 --> 00:04:17,359
what are they well they're immutable

00:04:16,239 --> 00:04:20,000
data points

00:04:17,359 --> 00:04:20,639
these are what is happening what has

00:04:20,000 --> 00:04:22,000
happened

00:04:20,639 --> 00:04:23,759
in your system because if it's what's

00:04:22,000 --> 00:04:26,560
happening that you've got the data

00:04:23,759 --> 00:04:27,120
precognition but um it's what has

00:04:26,560 --> 00:04:30,720
happened

00:04:27,120 --> 00:04:32,800
so it's any given line of data

00:04:30,720 --> 00:04:33,919
usually daytime stamp with a discrete

00:04:32,800 --> 00:04:36,960
piece of information

00:04:33,919 --> 00:04:40,479
um this is console

00:04:36,960 --> 00:04:43,120
log this is what you see from std out or

00:04:40,479 --> 00:04:44,960
sierra these are the discrete data

00:04:43,120 --> 00:04:47,040
points we can use to

00:04:44,960 --> 00:04:48,720
work out what's going on inside of a

00:04:47,040 --> 00:04:51,440
given part of the application at any

00:04:48,720 --> 00:04:51,440
given time

00:04:52,320 --> 00:04:56,639
um i'm actually missing my speaker notes

00:04:55,199 --> 00:04:57,600
so i actually forgotten all the data

00:04:56,639 --> 00:04:59,840
points there

00:04:57,600 --> 00:05:00,800
um so what are the best open source

00:04:59,840 --> 00:05:03,840
tools for this

00:05:00,800 --> 00:05:06,080
well um one of the most common and

00:05:03,840 --> 00:05:07,360
best in my opinion is the elk stack

00:05:06,080 --> 00:05:10,400
which stands for elastic

00:05:07,360 --> 00:05:11,759
search log stash and cabana these are

00:05:10,400 --> 00:05:15,120
apache2 licensed

00:05:11,759 --> 00:05:16,479
um and there was a community version

00:05:15,120 --> 00:05:20,080
available to everybody

00:05:16,479 --> 00:05:24,080
um it comes with beats and

00:05:20,080 --> 00:05:26,240
the which is part light log stash so

00:05:24,080 --> 00:05:28,080
elasticsearch is the engine for storage

00:05:26,240 --> 00:05:30,479
of all the log items that go in log

00:05:28,080 --> 00:05:33,840
stash and beats are the means to

00:05:30,479 --> 00:05:36,400
send data in to elasticsearch

00:05:33,840 --> 00:05:37,680
um specifically when it comes to logs it

00:05:36,400 --> 00:05:40,880
is a uh

00:05:37,680 --> 00:05:42,080
beach called filebeat and kibana is the

00:05:40,880 --> 00:05:44,639
visualization and

00:05:42,080 --> 00:05:46,320
graphing engine that's on top this is

00:05:44,639 --> 00:05:48,160
the way of being able to actually

00:05:46,320 --> 00:05:52,479
build alerting and finding out what's

00:05:48,160 --> 00:05:55,840
going on

00:05:52,479 --> 00:05:56,720
system metrics this is they're slightly

00:05:55,840 --> 00:05:59,360
more difficult

00:05:56,720 --> 00:06:01,520
and a bit harder to comprehend sometimes

00:05:59,360 --> 00:06:03,520
at least for me anyway

00:06:01,520 --> 00:06:04,560
um system metrics once again immutable

00:06:03,520 --> 00:06:07,759
data points this is

00:06:04,560 --> 00:06:10,000
what has definitely happened um these

00:06:07,759 --> 00:06:11,759
are

00:06:10,000 --> 00:06:13,759
usually a label a data point and a

00:06:11,759 --> 00:06:16,960
timestamp these are

00:06:13,759 --> 00:06:17,280
specific data points around well if you

00:06:16,960 --> 00:06:19,680
are

00:06:17,280 --> 00:06:21,360
looking at say system data then it would

00:06:19,680 --> 00:06:25,039
be cpu usage

00:06:21,360 --> 00:06:29,199
memory usage um or memory

00:06:25,039 --> 00:06:30,960
free memory disk io network

00:06:29,199 --> 00:06:32,800
and you can even get power consumption

00:06:30,960 --> 00:06:34,000
if you configure it correctly and this

00:06:32,800 --> 00:06:37,759
is on a system level

00:06:34,000 --> 00:06:39,840
you can then go down to the

00:06:37,759 --> 00:06:41,360
process level as well but on average you

00:06:39,840 --> 00:06:42,639
just look at it from an overall system's

00:06:41,360 --> 00:06:46,160
point of view

00:06:42,639 --> 00:06:48,400
you can also define custom metrics to be

00:06:46,160 --> 00:06:52,080
sent through

00:06:48,400 --> 00:06:53,919
which can be

00:06:52,080 --> 00:06:56,240
very useful if you're trying to do stuff

00:06:53,919 --> 00:06:58,160
like tracing user behavior alongside

00:06:56,240 --> 00:07:00,400
these statistics

00:06:58,160 --> 00:07:00,400
um

00:07:02,880 --> 00:07:06,080
next slide and there we go here is the

00:07:05,120 --> 00:07:08,639
best tools

00:07:06,080 --> 00:07:09,520
for use with it so grafana is a

00:07:08,639 --> 00:07:12,800
visualization

00:07:09,520 --> 00:07:16,080
and reporting tool on top um so well

00:07:12,800 --> 00:07:19,599
sorry open source grafana is

00:07:16,080 --> 00:07:22,319
a ui tool for this comes with

00:07:19,599 --> 00:07:23,039
dashboards and tooling to do alerting

00:07:22,319 --> 00:07:26,479
etcetera

00:07:23,039 --> 00:07:29,120
on the information uh grafana

00:07:26,479 --> 00:07:30,080
in our case we run it on top of our elk

00:07:29,120 --> 00:07:32,720
stack

00:07:30,080 --> 00:07:34,400
so we are passing information into

00:07:32,720 --> 00:07:35,680
elasticsearch and reading that on

00:07:34,400 --> 00:07:37,440
grafana

00:07:35,680 --> 00:07:38,800
you can also one of the most common

00:07:37,440 --> 00:07:40,639
types is prometheus

00:07:38,800 --> 00:07:42,400
prometheus can be run on top of

00:07:40,639 --> 00:07:44,479
elasticsearch but its

00:07:42,400 --> 00:07:46,879
better use case is to be used with

00:07:44,479 --> 00:07:50,080
something called m3db

00:07:46,879 --> 00:07:51,840
um and i am currently learning more

00:07:50,080 --> 00:07:52,879
about that because it's a whole new data

00:07:51,840 --> 00:07:56,319
set that i have

00:07:52,879 --> 00:07:56,319
well data engine that i have never used

00:07:56,840 --> 00:07:59,840
before

00:08:00,560 --> 00:08:05,199
oh there we go um if anybody does have

00:08:03,759 --> 00:08:06,879
any questions at any point just drop

00:08:05,199 --> 00:08:09,520
them in the chat and i will get to them

00:08:06,879 --> 00:08:11,199
at the end of the talk or

00:08:09,520 --> 00:08:12,639
when my brain can process everything at

00:08:11,199 --> 00:08:15,680
once which is

00:08:12,639 --> 00:08:16,319
not very often i won't lie and then the

00:08:15,680 --> 00:08:20,080
last one

00:08:16,319 --> 00:08:22,240
the hard mode this is um something that

00:08:20,080 --> 00:08:23,520
i had took a while to wrap my head

00:08:22,240 --> 00:08:26,400
around and

00:08:23,520 --> 00:08:28,560
finally understand and be able to use so

00:08:26,400 --> 00:08:29,680
tracing it's the end-to-end flow of an

00:08:28,560 --> 00:08:32,240
application

00:08:29,680 --> 00:08:33,120
consists of traces and spans a trace is

00:08:32,240 --> 00:08:35,919
the execution

00:08:33,120 --> 00:08:37,599
path of the application so data goes in

00:08:35,919 --> 00:08:40,640
to its endpoint

00:08:37,599 --> 00:08:41,599
um and spans are the individual pieces

00:08:40,640 --> 00:08:44,640
that the

00:08:41,599 --> 00:08:47,040
trace followed so a trace is built of

00:08:44,640 --> 00:08:47,040
spans

00:08:47,600 --> 00:08:54,560
so for example in the terms of

00:08:50,640 --> 00:08:57,279
a javascript application

00:08:54,560 --> 00:08:57,760
and an express app where you could treat

00:08:57,279 --> 00:09:00,959
the

00:08:57,760 --> 00:09:03,120
entry point the get request as um

00:09:00,959 --> 00:09:04,800
well not even the get get request the

00:09:03,120 --> 00:09:05,279
security authorization at the top of it

00:09:04,800 --> 00:09:08,240
as

00:09:05,279 --> 00:09:10,160
the beginning of the trace and then you

00:09:08,240 --> 00:09:12,160
can go through and measure each of the

00:09:10,160 --> 00:09:14,320
middleware points as individual spans

00:09:12,160 --> 00:09:16,320
or all the individual components until

00:09:14,320 --> 00:09:19,760
it reaches our end point

00:09:16,320 --> 00:09:19,760
which would be when the data has

00:09:20,839 --> 00:09:23,839
finished

00:09:27,760 --> 00:09:30,800
ah i kind of joined this has a decent

00:09:29,440 --> 00:09:32,000
question which i will answer when i get

00:09:30,800 --> 00:09:35,360
around to the demo part

00:09:32,000 --> 00:09:38,240
thank god um and uh tracing

00:09:35,360 --> 00:09:40,480
in this format is best used in uh the

00:09:38,240 --> 00:09:43,200
microservices distributed pattern

00:09:40,480 --> 00:09:45,360
uh purely because if it's a monolith and

00:09:43,200 --> 00:09:47,200
you can do simple uh simpler versions of

00:09:45,360 --> 00:09:48,640
profiling from beginning to end where

00:09:47,200 --> 00:09:51,040
you can just

00:09:48,640 --> 00:09:51,920
run through the entire di pipeline et

00:09:51,040 --> 00:09:54,800
cetera

00:09:51,920 --> 00:09:55,440
whereas if you've got um components

00:09:54,800 --> 00:09:58,000
running

00:09:55,440 --> 00:09:59,360
in isolation you want something that can

00:09:58,000 --> 00:10:02,880
measure it across

00:09:59,360 --> 00:10:04,480
thousands of machines um and connect

00:10:02,880 --> 00:10:07,040
those services together

00:10:04,480 --> 00:10:08,399
we just think of uh netflix with its

00:10:07,040 --> 00:10:10,959
diagram of

00:10:08,399 --> 00:10:12,880
thousands well hundreds or thousands

00:10:10,959 --> 00:10:15,440
somewhere between hundreds and thousands

00:10:12,880 --> 00:10:17,600
of microservices and obviously when they

00:10:15,440 --> 00:10:19,200
want to find a problem they want to know

00:10:17,600 --> 00:10:21,200
which microservice is causing other

00:10:19,200 --> 00:10:24,880
microservices to have problems

00:10:21,200 --> 00:10:24,880
and distributed tracing allows for that

00:10:29,360 --> 00:10:35,519
there we go the best tools for this

00:10:33,680 --> 00:10:37,360
i'm actually missing one from here but

00:10:35,519 --> 00:10:40,240
that's because i haven't uh used it

00:10:37,360 --> 00:10:42,240
at all in my uh in my own freedom

00:10:40,240 --> 00:10:45,360
playing

00:10:42,240 --> 00:10:47,440
this is jager and zipkin um

00:10:45,360 --> 00:10:48,800
i've only used a little bit of yoga well

00:10:47,440 --> 00:10:52,000
a little bit as it can

00:10:48,800 --> 00:10:54,320
used more jager uh jaeger is a

00:10:52,000 --> 00:10:56,800
distributed

00:10:54,320 --> 00:10:58,160
tracing tool that's open source it was

00:10:56,800 --> 00:11:01,440
originally built by

00:10:58,160 --> 00:11:02,240
the people over at uber was open sourced

00:11:01,440 --> 00:11:06,560
and is now

00:11:02,240 --> 00:11:06,560
got a very very busy community around it

00:11:07,839 --> 00:11:12,079
it's really really in-depth about jaeger

00:11:10,079 --> 00:11:12,399
they have a very very active community

00:11:12,079 --> 00:11:14,720
at

00:11:12,399 --> 00:11:16,640
jager tracing dot io where you can get

00:11:14,720 --> 00:11:19,839
hold of the

00:11:16,640 --> 00:11:21,279
slack github the whole shebang and learn

00:11:19,839 --> 00:11:24,560
anything that i miss

00:11:21,279 --> 00:11:26,160
or that is well beyond my knowledge

00:11:24,560 --> 00:11:28,079
i'm not going to lie jaeger itself is

00:11:26,160 --> 00:11:30,720
built in java which is my

00:11:28,079 --> 00:11:32,079
nightmare language everybody has one um

00:11:30,720 --> 00:11:33,920
so i can't actually

00:11:32,079 --> 00:11:36,800
name any of how the internals of jaeger

00:11:33,920 --> 00:11:36,800
works without crying

00:11:37,360 --> 00:11:43,920
so here we go here's the demo time this

00:11:40,720 --> 00:11:46,959
is going to be taking a little while

00:11:43,920 --> 00:11:48,560
preferably 15 to 20 minutes uh where

00:11:46,959 --> 00:11:51,680
i'll be able to take us through

00:11:48,560 --> 00:11:55,040
uh implementing some base logging and

00:11:51,680 --> 00:11:58,399
metric data and if we're lucky

00:11:55,040 --> 00:12:02,079
hopefully uh implementing some jager

00:11:58,399 --> 00:12:04,800
i have taken the brave or stupid choice

00:12:02,079 --> 00:12:05,920
of uh trying to do it as somebody who

00:12:04,800 --> 00:12:07,279
has never done this before

00:12:05,920 --> 00:12:09,040
so we are going to be using

00:12:07,279 --> 00:12:10,000
documentation data to be able to do this

00:12:09,040 --> 00:12:13,920
and do a dry run

00:12:10,000 --> 00:12:13,920
but just in case so

00:12:15,120 --> 00:12:21,760
there we go so we have our wii

00:12:18,639 --> 00:12:22,959
application just a docker compose thing

00:12:21,760 --> 00:12:24,399
because i wanted to replicate

00:12:22,959 --> 00:12:26,399
having multiple versions of the

00:12:24,399 --> 00:12:29,120
application running independently

00:12:26,399 --> 00:12:31,120
um but this we're going to be building

00:12:29,120 --> 00:12:32,720
this under the principle of we have no

00:12:31,120 --> 00:12:34,800
idea where it's going to be this could

00:12:32,720 --> 00:12:37,200
be deployed to heroku it could be on a

00:12:34,800 --> 00:12:39,519
cloud foundry instance it could be

00:12:37,200 --> 00:12:41,920
kubernetes it could be one of a

00:12:39,519 --> 00:12:43,600
gajillion million different places

00:12:41,920 --> 00:12:45,519
so i am going to show the shortcut but

00:12:43,600 --> 00:12:47,200
i'm also going to show the

00:12:45,519 --> 00:12:49,839
better way of thinking about things

00:12:47,200 --> 00:12:49,839
where possible

00:12:54,079 --> 00:12:59,200
so two parts of the application and a

00:12:57,200 --> 00:13:01,200
uh queue in the middle to make the thing

00:12:59,200 --> 00:13:02,320
glue together the receiver just receives

00:13:01,200 --> 00:13:04,959
a request

00:13:02,320 --> 00:13:06,560
sends it to the mq and then reads in the

00:13:04,959 --> 00:13:09,360
processor and

00:13:06,560 --> 00:13:10,000
that is takes an image drops it on the

00:13:09,360 --> 00:13:13,600
queue

00:13:10,000 --> 00:13:16,000
takes the image uh image url from the

00:13:13,600 --> 00:13:18,800
receiver and just saves it to hard disk

00:13:16,000 --> 00:13:21,040
um i can all imagine it doing

00:13:18,800 --> 00:13:21,839
you know many hundreds of millions of

00:13:21,040 --> 00:13:24,079
different

00:13:21,839 --> 00:13:25,680
things more difficult than this but it's

00:13:24,079 --> 00:13:26,800
a good start to show off the basic

00:13:25,680 --> 00:13:31,200
principles

00:13:26,800 --> 00:13:34,639
so the receiver really simple code

00:13:31,200 --> 00:13:36,160
just simple get request try catch

00:13:34,639 --> 00:13:38,320
throwing it into a queue

00:13:36,160 --> 00:13:39,839
and lots of little bits of logging so we

00:13:38,320 --> 00:13:43,760
know what's going on

00:13:39,839 --> 00:13:46,399
and the same here this is just

00:13:43,760 --> 00:13:48,240
a processor that's grabbing it turning

00:13:46,399 --> 00:13:50,959
on the cue listening to it

00:13:48,240 --> 00:13:51,279
consuming the cue dropping onto disk or

00:13:50,959 --> 00:13:52,720
drop

00:13:51,279 --> 00:13:54,320
dropping the image downloading it and

00:13:52,720 --> 00:13:55,920
dropping onto disk

00:13:54,320 --> 00:13:57,199
and just carrying on with loads of

00:13:55,920 --> 00:13:58,959
little things the only little hacky

00:13:57,199 --> 00:14:00,959
thing is i have put set

00:13:58,959 --> 00:14:03,279
name out to make sure that this turns on

00:14:00,959 --> 00:14:07,680
after our rabbit mq does

00:14:03,279 --> 00:14:07,680
so let's turn this little thing on

00:14:09,040 --> 00:14:14,560
compose up and just for good measure run

00:14:11,680 --> 00:14:17,600
the build version of it

00:14:14,560 --> 00:14:19,279
so the receiver is on and is running at

00:14:17,600 --> 00:14:20,560
the port 8080 which obviously it's not

00:14:19,279 --> 00:14:24,000
because docker magic

00:14:20,560 --> 00:14:26,560
we are gonna get it on a funky long one

00:14:24,000 --> 00:14:28,320
that we don't conflict and there we go

00:14:26,560 --> 00:14:29,519
there's the processor it's now also

00:14:28,320 --> 00:14:32,800
connected

00:14:29,519 --> 00:14:35,920
so this is a lovely cute panda image

00:14:32,800 --> 00:14:39,120
like that and we are just going to

00:14:35,920 --> 00:14:39,760
save that so the image has been sent to

00:14:39,120 --> 00:14:44,639
the cue

00:14:39,760 --> 00:14:46,880
if we check the queue we'll see that aha

00:14:44,639 --> 00:14:48,959
image request received sent to the queue

00:14:46,880 --> 00:14:51,120
the queue has been interacted with

00:14:48,959 --> 00:14:52,399
and the processor is receiving it and

00:14:51,120 --> 00:14:54,880
saving it to disk

00:14:52,399 --> 00:14:55,600
now if we wanted to we could do a docker

00:14:54,880 --> 00:14:57,360
exec go

00:14:55,600 --> 00:14:59,279
into the image into the container and

00:14:57,360 --> 00:15:01,120
actually grab the image but

00:14:59,279 --> 00:15:02,959
i don't see the whole point in doing

00:15:01,120 --> 00:15:07,040
this and as

00:15:02,959 --> 00:15:09,920
um kenneth jones put earlier

00:15:07,040 --> 00:15:11,199
here are some just these are the plain

00:15:09,920 --> 00:15:13,199
text ones

00:15:11,199 --> 00:15:14,240
plain text just the line that goes out

00:15:13,199 --> 00:15:17,120
that is a log

00:15:14,240 --> 00:15:17,519
that is fine now we're going to go and

00:15:17,120 --> 00:15:19,920
do

00:15:17,519 --> 00:15:21,760
something possibly dangerous we're going

00:15:19,920 --> 00:15:24,800
to modify code that's working

00:15:21,760 --> 00:15:25,120
which you know could inevitably lead to

00:15:24,800 --> 00:15:28,240
it

00:15:25,120 --> 00:15:28,720
not working and we're going to go into

00:15:28,240 --> 00:15:31,839
the

00:15:28,720 --> 00:15:35,199
receiver part of the application

00:15:31,839 --> 00:15:41,839
mpmi we're going to want to

00:15:35,199 --> 00:15:41,839
download winston

00:15:50,360 --> 00:15:53,519
[Music]

00:15:51,600 --> 00:15:54,560
luckily that's the oh that's the process

00:15:53,519 --> 00:15:57,440
i want you want to be looking at the

00:15:54,560 --> 00:15:57,440
receiver one first

00:15:57,600 --> 00:16:00,720
luckily we have a whole bunch of things

00:16:00,079 --> 00:16:04,560
so

00:16:00,720 --> 00:16:04,560
const oh winston

00:16:06,880 --> 00:16:10,079
why is it when you know somebody is

00:16:08,160 --> 00:16:12,000
watching you type you for the life of

00:16:10,079 --> 00:16:14,720
you cannot type

00:16:12,000 --> 00:16:14,720
so anybody else

00:16:15,519 --> 00:16:19,440
can type wells being watched you need to

00:16:17,920 --> 00:16:24,720
teach me everything you know

00:16:19,440 --> 00:16:27,600
because i am awful excellent

00:16:24,720 --> 00:16:27,600
and to do

00:16:32,399 --> 00:16:37,680
all right let's remember correctly we

00:16:35,600 --> 00:16:42,000
will want to do

00:16:37,680 --> 00:16:45,199
logger and then const liar

00:16:42,000 --> 00:16:47,680
equals winston dot create

00:16:45,199 --> 00:16:47,680
ladder

00:16:49,040 --> 00:16:52,320
now if i remember correctly the default

00:16:51,040 --> 00:16:55,519
one will just make it

00:16:52,320 --> 00:16:55,519
throw everything to

00:16:56,560 --> 00:17:01,040
disk anyway so we'll want to change that

00:16:58,800 --> 00:17:01,040
to

00:17:01,440 --> 00:17:05,839
is that a debug statement or an info

00:17:03,839 --> 00:17:09,600
statement you think

00:17:05,839 --> 00:17:12,880
i'm thinking that is a info statement

00:17:09,600 --> 00:17:14,079
actually no you know what that's debug

00:17:12,880 --> 00:17:16,000
we don't need to know when it actually

00:17:14,079 --> 00:17:17,199
starts but we do need to know when it's

00:17:16,000 --> 00:17:20,799
finished

00:17:17,199 --> 00:17:23,439
so logo dot

00:17:20,799 --> 00:17:24,400
info and that's because in this instance

00:17:23,439 --> 00:17:26,799
we are able to

00:17:24,400 --> 00:17:29,440
infer the log level of the information

00:17:26,799 --> 00:17:32,880
by defining this and these will be

00:17:29,440 --> 00:17:36,640
plain strings and this one is an error

00:17:32,880 --> 00:17:39,360
this is important this

00:17:36,640 --> 00:17:40,799
we will define this narrow so we can

00:17:39,360 --> 00:17:44,840
easily find it later

00:17:40,799 --> 00:17:47,840
and in this case uh dot

00:17:44,840 --> 00:17:52,880
info i don't know let's go

00:17:47,840 --> 00:17:55,360
lock there we go

00:17:52,880 --> 00:17:56,400
now obviously going to kill this one

00:17:55,360 --> 00:17:58,400
quickly you should have done that before

00:17:56,400 --> 00:18:00,000
i started typing

00:17:58,400 --> 00:18:02,320
because robert and q always takes a

00:18:00,000 --> 00:18:02,320
moment

00:18:08,080 --> 00:18:15,840
there we go standing up build

00:18:15,919 --> 00:18:18,480
there we go

00:18:19,919 --> 00:18:24,960
can't create property oh i have got a

00:18:26,840 --> 00:18:30,240
clown uh

00:18:37,679 --> 00:18:40,559
hmm there we go

00:18:41,039 --> 00:18:47,600
oh dead that's because i have planned it

00:18:45,280 --> 00:18:47,600
oops

00:18:53,200 --> 00:18:58,000
i need to do

00:18:56,640 --> 00:19:00,000
just refer back to my notes because

00:18:58,000 --> 00:19:03,600
anybody who's sensible ah

00:19:00,000 --> 00:19:03,600
yeah transporter oops

00:19:04,080 --> 00:19:07,520
got ahead of myself completely forgot

00:19:05,520 --> 00:19:10,240
transporter let's kill that so that we

00:19:07,520 --> 00:19:11,600
whilst we are doing this bit it is

00:19:10,240 --> 00:19:12,480
configuring in the background there we

00:19:11,600 --> 00:19:13,840
go

00:19:12,480 --> 00:19:17,120
there's something to transporter and

00:19:13,840 --> 00:19:17,120
that's just going to dump it to log

00:19:17,679 --> 00:19:21,120
once i'm doing that there is also

00:19:19,440 --> 00:19:22,960
another one i want to look at which

00:19:21,120 --> 00:19:24,160
is the easy way of doing this so this is

00:19:22,960 --> 00:19:28,720
going to just start

00:19:24,160 --> 00:19:28,720
dumping out to our console

00:19:28,799 --> 00:19:33,200
working versions after log hopefully if

00:19:30,880 --> 00:19:33,200
i haven't

00:19:36,880 --> 00:19:40,559
create property instance after

00:19:41,840 --> 00:19:46,160
intriguing i'm pretty sure that's how we

00:19:43,600 --> 00:19:46,160
use log

00:19:51,200 --> 00:19:57,120
um no let's change that

00:19:54,640 --> 00:19:57,120
infinite

00:20:05,520 --> 00:20:08,080
wonderful thing i was only practicing

00:20:07,039 --> 00:20:11,280
this two hours ago and i've already

00:20:08,080 --> 00:20:11,280
forgotten everything through panic

00:20:17,039 --> 00:20:26,080
there we go that's better

00:20:21,120 --> 00:20:26,080
and rabbit q excellent there we go

00:20:26,320 --> 00:20:32,240
excellent so if i now run the

00:20:29,840 --> 00:20:32,880
and it will save and it will go winston

00:20:32,240 --> 00:20:34,559
so this

00:20:32,880 --> 00:20:36,159
is a multi-line object where it is

00:20:34,559 --> 00:20:38,159
sending through uh

00:20:36,159 --> 00:20:40,880
in answer to your questions uh kenneth

00:20:38,159 --> 00:20:43,120
um that is an object version of it so

00:20:40,880 --> 00:20:44,080
inside of winston it is converting it to

00:20:43,120 --> 00:20:46,400
an object with

00:20:44,080 --> 00:20:48,159
all the message and the login level

00:20:46,400 --> 00:20:49,280
information which we can then interpret

00:20:48,159 --> 00:20:52,320
at the other end

00:20:49,280 --> 00:20:55,679
so we're sending that to disk uh well to

00:20:52,320 --> 00:20:58,720
std out now if i can find

00:20:55,679 --> 00:21:01,679
where we go here we go we're going to

00:20:58,720 --> 00:21:02,559
do the quick and dirty version first

00:21:01,679 --> 00:21:04,880
we're going to ship your

00:21:02,559 --> 00:21:04,880
data

00:21:05,840 --> 00:21:11,200
and we are going to just throw this into

00:21:07,840 --> 00:21:13,280
logs i o via the fastest means possible

00:21:11,200 --> 00:21:15,120
which if it's multiline if it's an

00:21:13,280 --> 00:21:16,400
object it can be interpreted directly

00:21:15,120 --> 00:21:18,799
off

00:21:16,400 --> 00:21:18,799
our

00:21:20,880 --> 00:21:25,039
docker image that we have to run with it

00:21:22,480 --> 00:21:28,720
so i'm going to turn this on

00:21:25,039 --> 00:21:31,840
in a terminal there we go

00:21:28,720 --> 00:21:31,840
and to do

00:21:34,799 --> 00:21:41,919
and that should be listener.logs.io

00:21:42,320 --> 00:21:50,480
and this one i believe

00:21:46,080 --> 00:21:54,080
i saved it locally once i own

00:21:50,480 --> 00:21:59,840
shipping shipping

00:21:54,080 --> 00:21:59,840
token yeah should be the one

00:22:01,360 --> 00:22:07,919
and that means anything we do inside of

00:22:05,200 --> 00:22:08,559
hither should start appearing in our elk

00:22:07,919 --> 00:22:10,799
now this

00:22:08,559 --> 00:22:12,320
is important so if i just send one

00:22:10,799 --> 00:22:15,520
random request to make it do

00:22:12,320 --> 00:22:15,520
some stuff do

00:22:16,000 --> 00:22:19,840
there we go some information is flowing

00:22:19,280 --> 00:22:23,039
through

00:22:19,840 --> 00:22:26,320
and then if i go back to here

00:22:23,039 --> 00:22:30,400
and log in to

00:22:26,320 --> 00:22:33,120
our alk step back

00:22:30,400 --> 00:22:34,799
which um instead of having to stand up

00:22:33,120 --> 00:22:35,840
my own version on my machine i am going

00:22:34,799 --> 00:22:37,600
to be lazy

00:22:35,840 --> 00:22:39,679
and use the one happily and handily

00:22:37,600 --> 00:22:43,039
provided by my employer

00:22:39,679 --> 00:22:43,039
so logging into logs io

00:22:43,280 --> 00:22:50,080
and cabana and

00:22:46,400 --> 00:22:54,000
we should quickly see

00:22:50,080 --> 00:22:56,000
some information coming through

00:22:54,000 --> 00:22:58,080
occasionally take a moment just double

00:22:56,000 --> 00:23:00,400
check that it's saying it's getting

00:22:58,080 --> 00:23:00,400
stuff

00:23:02,720 --> 00:23:06,080
collecting blogs

00:23:06,880 --> 00:23:10,320
well it says it's getting stuff and i

00:23:09,679 --> 00:23:13,520
see

00:23:10,320 --> 00:23:13,520
information going through

00:23:14,159 --> 00:23:20,960
now we just gotta wait a moment for

00:23:18,400 --> 00:23:23,360
all the cueing to stay catch up with

00:23:20,960 --> 00:23:23,360
yourself

00:23:23,679 --> 00:23:27,360
always what you want waiting for the

00:23:25,120 --> 00:23:29,600
universe to catch up with you

00:23:27,360 --> 00:23:29,600
so

00:23:30,720 --> 00:23:33,840
that's great um

00:23:33,919 --> 00:23:37,919
we'll move on whilst we wait for that to

00:23:35,280 --> 00:23:37,919
play catch-up

00:23:38,080 --> 00:23:44,080
so in this case um we're relying on

00:23:41,200 --> 00:23:46,240
um the docker stream to be well the tail

00:23:44,080 --> 00:23:49,360
of the logs to be picked up and thrown

00:23:46,240 --> 00:23:51,360
into logs io via a handy dandy little

00:23:49,360 --> 00:23:52,880
helper docker container

00:23:51,360 --> 00:23:55,200
however what happens when you're

00:23:52,880 --> 00:23:57,120
deploying this to the to a standalone

00:23:55,200 --> 00:23:59,600
server somewhere or an enterprise

00:23:57,120 --> 00:24:00,640
piece of kit in a box or even just a box

00:23:59,600 --> 00:24:01,919
in your office that you want to be able

00:24:00,640 --> 00:24:03,039
to monitor with the top of everything

00:24:01,919 --> 00:24:04,240
else

00:24:03,039 --> 00:24:05,520
you're not going to have docker and

00:24:04,240 --> 00:24:06,320
handy little helpers to do this you're

00:24:05,520 --> 00:24:09,200
going to have to

00:24:06,320 --> 00:24:10,320
hardwire it in so we are going to add

00:24:09,200 --> 00:24:11,840
into the code

00:24:10,320 --> 00:24:13,600
a different transporter so these

00:24:11,840 --> 00:24:16,400
transporters are the way that winston

00:24:13,600 --> 00:24:18,000
tells it to communicate to the console

00:24:16,400 --> 00:24:21,360
or to different methods

00:24:18,000 --> 00:24:21,360
there is one for logs i o

00:24:22,320 --> 00:24:32,159
and that should be npm yes

00:24:27,120 --> 00:24:35,200
and that should be winston logs

00:24:32,159 --> 00:24:37,840
oh yeah i believe

00:24:35,200 --> 00:24:37,840
there we go

00:24:39,360 --> 00:24:43,760
and all this does is allows us to add a

00:24:42,240 --> 00:24:46,240
new transporter

00:24:43,760 --> 00:24:48,640
which means instead of waiting for it to

00:24:46,240 --> 00:24:52,159
be sent out to console and then sent out

00:24:48,640 --> 00:24:55,600
to um the elk stack for us to process

00:24:52,159 --> 00:24:59,679
we can read it directly out of here

00:24:55,600 --> 00:25:02,480
so if i

00:24:59,679 --> 00:25:02,480
do this

00:25:04,240 --> 00:25:11,760
go back to what code do npmi

00:25:08,400 --> 00:25:11,760
save or winston

00:25:12,000 --> 00:25:15,840
logs io oh i should probably definitely

00:25:14,080 --> 00:25:17,840
kill that one so it's going to start up

00:25:15,840 --> 00:25:20,799
again

00:25:17,840 --> 00:25:20,799
when i need it

00:25:26,799 --> 00:25:31,360
we'll insert that here move that over

00:25:30,559 --> 00:25:35,520
yonder because

00:25:31,360 --> 00:25:43,120
meter and

00:25:35,520 --> 00:25:46,159
add that to the list of

00:25:43,120 --> 00:25:46,159
listen uh

00:25:46,320 --> 00:25:57,120
let's cheat a little bit

00:25:49,760 --> 00:26:00,559
go find out how what i typed in here

00:25:57,120 --> 00:26:03,440
that's and oh

00:26:00,559 --> 00:26:03,440
i'm going to need to

00:26:03,840 --> 00:26:07,440
yeah i'm going to have to do this and

00:26:05,760 --> 00:26:09,360
i'm going to do it just off screen so

00:26:07,440 --> 00:26:11,120
that nobody sees it

00:26:09,360 --> 00:26:12,880
because whoops because i've just

00:26:11,120 --> 00:26:16,880
realized i've got certain uh

00:26:12,880 --> 00:26:20,159
local env in the docker image to

00:26:16,880 --> 00:26:23,279
capture the uh

00:26:20,159 --> 00:26:26,320
so i'm just going to need to do

00:26:23,279 --> 00:26:30,080
mpm i

00:26:26,320 --> 00:26:32,159
dot and i'm just going to do it off

00:26:30,080 --> 00:26:32,640
screen so nobody can see and tell me off

00:26:32,159 --> 00:26:35,200
or

00:26:32,640 --> 00:26:37,360
accidentally leaking keys everywhere

00:26:35,200 --> 00:26:39,840
whoops

00:26:37,360 --> 00:26:39,840
cd

00:26:39,940 --> 00:26:43,009
[Music]

00:26:43,440 --> 00:26:46,400
and do

00:26:50,080 --> 00:26:54,000
you guys see receiver

00:26:55,360 --> 00:26:59,679
okay let's change that to

00:27:01,080 --> 00:27:07,840
process.emv dot

00:27:11,530 --> 00:27:14,750
[Music]

00:27:18,840 --> 00:27:22,430
dot

00:27:21,039 --> 00:27:25,509
and then i need to

00:27:22,430 --> 00:27:25,509
[Music]

00:27:29,840 --> 00:27:37,200
and when you think you're fully prepared

00:27:33,440 --> 00:27:37,200
and you forget to do one wii thing

00:27:37,790 --> 00:27:42,930
[Music]

00:27:44,480 --> 00:27:53,200
let's save that yes

00:27:48,960 --> 00:27:56,399
good good and i believe that should work

00:27:53,200 --> 00:27:59,679
right and now we should be

00:27:56,399 --> 00:28:01,919
shipping directly to

00:27:59,679 --> 00:28:02,880
logs io from the source code as well as

00:28:01,919 --> 00:28:05,279
sending it to

00:28:02,880 --> 00:28:05,279
our

00:28:06,159 --> 00:28:14,640
local instance of the console

00:28:10,480 --> 00:28:14,640
still not coming through intriguing

00:28:14,960 --> 00:28:18,640
well we'll find out in a moment when it

00:28:16,320 --> 00:28:24,320
goes bang

00:28:18,640 --> 00:28:31,120
um there was a problem with the request

00:28:24,320 --> 00:28:36,399
valid uri

00:28:31,120 --> 00:28:40,000
hmm i'm going to do something

00:28:36,399 --> 00:28:40,000
that i'm going to very much regret

00:28:42,840 --> 00:28:47,440
yep

00:28:44,320 --> 00:28:50,559
oh you selected the devil if you in

00:28:47,440 --> 00:28:52,799
tend to use a dot nv locally please

00:28:50,559 --> 00:28:56,840
remember to

00:28:52,799 --> 00:28:58,240
load dot end locally which should then

00:28:56,840 --> 00:29:00,559
be

00:28:58,240 --> 00:29:00,559
load

00:29:10,000 --> 00:29:13,840
so it's not load oops

00:29:27,279 --> 00:29:31,120
there we go and it's saying it's

00:29:29,919 --> 00:29:35,440
positive through

00:29:31,120 --> 00:29:38,840
hunky dory wonderful that's all we want

00:29:35,440 --> 00:29:41,840
see if we're actually going to receive

00:29:38,840 --> 00:29:41,840
information

00:29:42,480 --> 00:29:48,000
it's incredibly frustrating when it's

00:29:44,720 --> 00:29:48,000
doing when it does this to me

00:29:52,080 --> 00:29:57,200
okay so there's all my tests from

00:29:54,320 --> 00:29:57,200
earlier today

00:29:57,760 --> 00:30:00,159
minutes

00:30:01,120 --> 00:30:03,600
intriguing

00:30:04,799 --> 00:30:09,440
just when you want this to work

00:30:06,240 --> 00:30:12,720
absolutely perfectly live

00:30:09,440 --> 00:30:12,720
let's trigger a couple more

00:30:14,320 --> 00:30:18,000
and well at least we know it's working

00:30:16,399 --> 00:30:19,840
locally and the transporter isn't

00:30:18,000 --> 00:30:22,559
bailing out in front of any because it

00:30:19,840 --> 00:30:24,399
would normally for an exception so it is

00:30:22,559 --> 00:30:27,360
transferring just being slow and i'll

00:30:24,399 --> 00:30:30,399
have to work that one out later

00:30:27,360 --> 00:30:33,039
okay well um

00:30:30,399 --> 00:30:34,840
apart from the demo fail of me not being

00:30:33,039 --> 00:30:37,600
able to see ah there we

00:30:34,840 --> 00:30:39,440
go so

00:30:37,600 --> 00:30:40,960
there we go oh i probably haven't got a

00:30:39,440 --> 00:30:43,360
log level set to

00:30:40,960 --> 00:30:45,120
the correct one i probably want to have

00:30:43,360 --> 00:30:48,320
it set to

00:30:45,120 --> 00:30:51,600
log level i think all

00:30:48,320 --> 00:30:53,279
should be able to trans uh send all of

00:30:51,600 --> 00:30:55,360
them

00:30:53,279 --> 00:31:05,840
i'll turn that on now and just double

00:30:55,360 --> 00:31:05,840
check um

00:31:09,200 --> 00:31:13,120
yeah so i need to yeah i'm limiting the

00:31:12,159 --> 00:31:16,480
error level

00:31:13,120 --> 00:31:18,159
oh there but there we go we have uh log

00:31:16,480 --> 00:31:20,480
information being sent over

00:31:18,159 --> 00:31:22,000
quite nicely oh yeah now it's definitely

00:31:20,480 --> 00:31:24,960
playing catch up with all of them

00:31:22,000 --> 00:31:25,679
we uh but we can see that we send items

00:31:24,960 --> 00:31:27,679
to the queue

00:31:25,679 --> 00:31:28,960
great and that's uh if we did the same

00:31:27,679 --> 00:31:30,799
in the receiver

00:31:28,960 --> 00:31:32,640
and the processor it would be exactly

00:31:30,799 --> 00:31:35,440
the same i'm probably going to have to

00:31:32,640 --> 00:31:37,679
copy and paste that bit over as well

00:31:35,440 --> 00:31:37,679
so

00:31:38,799 --> 00:31:44,559
excuse me for a moment yep

00:31:42,480 --> 00:31:46,000
okay now we're good so let's move on to

00:31:44,559 --> 00:31:47,600
the next bit which is metrics

00:31:46,000 --> 00:31:49,360
now metric data we're not going to go

00:31:47,600 --> 00:31:51,600
into trying to send custom information

00:31:49,360 --> 00:31:54,240
from inside the application because

00:31:51,600 --> 00:31:56,399
that is really really hard and probably

00:31:54,240 --> 00:31:58,080
about a 50-minute session on its own

00:31:56,399 --> 00:32:00,240
so we are going to go and take the cheat

00:31:58,080 --> 00:32:02,399
way because the cheap way is nice

00:32:00,240 --> 00:32:03,919
quick easy and you can get some benefits

00:32:02,399 --> 00:32:07,440
out of it very quickly

00:32:03,919 --> 00:32:10,640
so once again logo docs

00:32:07,440 --> 00:32:13,760
very comprehensive docs

00:32:10,640 --> 00:32:14,640
and the docs team have taken a long time

00:32:13,760 --> 00:32:17,679
in making sure this

00:32:14,640 --> 00:32:18,080
is simple for everybody to consume so

00:32:17,679 --> 00:32:20,320
this

00:32:18,080 --> 00:32:22,640
one is doc containment what it does is

00:32:20,320 --> 00:32:22,960
it actually connects to the host to read

00:32:22,640 --> 00:32:25,600
out

00:32:22,960 --> 00:32:26,320
the metric information from the host

00:32:25,600 --> 00:32:29,360
machine

00:32:26,320 --> 00:32:32,880
in regards to all the docker the

00:32:29,360 --> 00:32:34,720
docker clients um so it is

00:32:32,880 --> 00:32:36,480
you know very comprehensive in the

00:32:34,720 --> 00:32:40,720
information it will receive

00:32:36,480 --> 00:32:40,720
so if i paste that in here

00:32:40,960 --> 00:32:48,960
and we remove this and change it

00:32:44,640 --> 00:32:54,559
to the key the local key all the keys

00:32:48,960 --> 00:32:54,559
logs io metrix

00:32:54,840 --> 00:33:00,320
token

00:32:56,880 --> 00:33:00,320
let's make that run

00:33:02,480 --> 00:33:06,480
there we go this metric um container

00:33:05,120 --> 00:33:07,600
what it's actually doing is standing up

00:33:06,480 --> 00:33:11,200
a copy of metric

00:33:07,600 --> 00:33:12,799
beat uh using the system module and

00:33:11,200 --> 00:33:15,919
connecting it to

00:33:12,799 --> 00:33:17,679
the host and contain uh grabbing all the

00:33:15,919 --> 00:33:21,200
metric information for those

00:33:17,679 --> 00:33:24,320
it's doing it on a tick i think it's a

00:33:21,200 --> 00:33:25,919
one or five second tick so throw some

00:33:24,320 --> 00:33:27,919
random data in just to make sure it's

00:33:25,919 --> 00:33:29,760
actually doing some stuff

00:33:27,919 --> 00:33:32,320
now if we go back to logs io go to the

00:33:29,760 --> 00:33:32,320
metrics

00:33:36,000 --> 00:33:39,039
there we go and we can see that we are

00:33:38,000 --> 00:33:43,360
starting to receive

00:33:39,039 --> 00:33:45,840
some information excellent sent to cue

00:33:43,360 --> 00:33:48,080
that's the cabana there we go that's

00:33:45,840 --> 00:33:51,360
there we go

00:33:48,080 --> 00:33:53,440
there's no data yet wonderful

00:33:51,360 --> 00:33:55,360
uh but if we then went into the

00:33:53,440 --> 00:33:59,200
dashboards and

00:33:55,360 --> 00:34:02,240
do look for a specific dashboard

00:33:59,200 --> 00:34:04,000
ah there we go that's what i'm after

00:34:02,240 --> 00:34:06,080
and we changed this to the docker

00:34:04,000 --> 00:34:09,119
overview which give us the

00:34:06,080 --> 00:34:10,960
information being sent over from docker

00:34:09,119 --> 00:34:12,480
unfortunately once again we are waiting

00:34:10,960 --> 00:34:14,960
for the ice age

00:34:12,480 --> 00:34:15,599
information to propagate everywhere the

00:34:14,960 --> 00:34:17,040
joys of

00:34:15,599 --> 00:34:18,240
information having to pass for about 15

00:34:17,040 --> 00:34:21,839
different gateways to get where you need

00:34:18,240 --> 00:34:21,839
it but it would come here eventually

00:34:22,320 --> 00:34:28,159
but just to be completely open and

00:34:25,440 --> 00:34:28,159
transparent

00:34:30,560 --> 00:34:33,679
when you install metricbeat you can then

00:34:32,240 --> 00:34:36,240
use it to

00:34:33,679 --> 00:34:37,200
look at many many many other components

00:34:36,240 --> 00:34:38,639
metro

00:34:37,200 --> 00:34:41,280
metric beat is actually built and

00:34:38,639 --> 00:34:45,520
maintained as part of the

00:34:41,280 --> 00:34:48,240
metric the beats as part of the elastic

00:34:45,520 --> 00:34:49,520
the elk stack and if you're after just

00:34:48,240 --> 00:34:51,679
the system level information

00:34:49,520 --> 00:34:53,200
great but it can also do drill downs

00:34:51,679 --> 00:34:56,399
into all sorts of different

00:34:53,200 --> 00:34:57,359
smaller components um so if you want to

00:34:56,399 --> 00:34:58,880
be able to maintain

00:34:57,359 --> 00:35:00,839
uh information over couch to be one of

00:34:58,880 --> 00:35:02,000
my favorite level projects docker

00:35:00,839 --> 00:35:05,359
specifically

00:35:02,000 --> 00:35:10,640
uh elasticsearch itself uh h proxy

00:35:05,359 --> 00:35:10,640
etc etc it will log and maintain it

00:35:10,880 --> 00:35:13,200
let's give another moment see if all the

00:35:12,160 --> 00:35:15,280
information is actually propagating

00:35:13,200 --> 00:35:18,079
through it is not

00:35:15,280 --> 00:35:18,800
and i don't have enough time to be able

00:35:18,079 --> 00:35:22,800
to see

00:35:18,800 --> 00:35:22,800
why i am not seeing that information

00:35:28,839 --> 00:35:33,280
uh

00:35:31,200 --> 00:35:36,240
okay it's definitely got my key and it's

00:35:33,280 --> 00:35:36,240
definitely correct

00:35:41,920 --> 00:35:46,800
go to the overall the wonderful one at

00:35:44,400 --> 00:35:50,640
the very top cfl

00:35:46,800 --> 00:35:51,599
nope uh joyous just have to keep waiting

00:35:50,640 --> 00:35:54,640
for it to turn up

00:35:51,599 --> 00:35:55,440
right so that is would be metric

00:35:54,640 --> 00:35:58,720
information

00:35:55,440 --> 00:36:01,599
um if i had time to pre-propagate this

00:35:58,720 --> 00:36:04,320
with proper information for us all

00:36:01,599 --> 00:36:05,359
yeah that's my fault sorry if you're

00:36:04,320 --> 00:36:09,200
gone

00:36:05,359 --> 00:36:12,480
so the last step

00:36:09,200 --> 00:36:14,160
is tracing now um for those of you who

00:36:12,480 --> 00:36:16,160
are not aware of what tracing is this is

00:36:14,160 --> 00:36:17,760
the part which most people are not aware

00:36:16,160 --> 00:36:20,400
of or used

00:36:17,760 --> 00:36:21,680
um i'm gonna be talking about jager now

00:36:20,400 --> 00:36:23,920
jaeger is a

00:36:21,680 --> 00:36:25,040
wonderful beast but it is a beast in my

00:36:23,920 --> 00:36:28,160
opinion it is a

00:36:25,040 --> 00:36:28,800
big stack of things this is your

00:36:28,160 --> 00:36:31,839
standard

00:36:28,800 --> 00:36:34,560
homegrown jaeger

00:36:31,839 --> 00:36:35,760
stack this is your application this is

00:36:34,560 --> 00:36:37,599
what you have built what you are

00:36:35,760 --> 00:36:39,200
shipping into the universe

00:36:37,599 --> 00:36:42,000
there's your application there is the

00:36:39,200 --> 00:36:42,640
client and there is a usually a jager

00:36:42,000 --> 00:36:44,800
agent

00:36:42,640 --> 00:36:46,640
which is gathering information you send

00:36:44,800 --> 00:36:48,240
information from the client to the agent

00:36:46,640 --> 00:36:49,040
to the agent then sends it over to the

00:36:48,240 --> 00:36:50,560
collector

00:36:49,040 --> 00:36:52,400
the collector is the middleware which

00:36:50,560 --> 00:36:54,240
does sampling and

00:36:52,400 --> 00:36:56,640
aggregation etc before sending it over

00:36:54,240 --> 00:36:58,640
to the database and storage for it to

00:36:56,640 --> 00:37:01,839
eventually be queried and used in the

00:36:58,640 --> 00:37:01,839
uh jaeger ui

00:37:02,079 --> 00:37:05,359
um in our case we're going to very very

00:37:04,400 --> 00:37:07,839
quickly

00:37:05,359 --> 00:37:08,960
try and skip from that bit to that bit

00:37:07,839 --> 00:37:10,480
to straight to that bit

00:37:08,960 --> 00:37:12,480
and then see if we can visualize some

00:37:10,480 --> 00:37:15,359
stuff inside of logs i o

00:37:12,480 --> 00:37:15,359
just give it another one

00:37:16,480 --> 00:37:20,839
i've not left myself enough time to

00:37:18,800 --> 00:37:24,160
debug and fix that now

00:37:20,839 --> 00:37:27,920
nuts grand absolutely grand

00:37:24,160 --> 00:37:30,320
um so let us move on to the next step

00:37:27,920 --> 00:37:30,320
shall we

00:37:31,200 --> 00:37:38,640
i need my code let's go

00:37:36,240 --> 00:37:39,440
into the processor which is the one

00:37:38,640 --> 00:37:42,880
which has got

00:37:39,440 --> 00:37:46,079
no more code for doing stuff

00:37:42,880 --> 00:37:47,200
so go processor there we go so it

00:37:46,079 --> 00:37:49,920
receives a

00:37:47,200 --> 00:37:51,359
it connects to the rabbitmq waits for

00:37:49,920 --> 00:37:53,760
tasks and h1

00:37:51,359 --> 00:37:54,560
processes each task sent to it each task

00:37:53,760 --> 00:37:57,599
is a simple

00:37:54,560 --> 00:38:00,240
image url which it's then saving to disk

00:37:57,599 --> 00:38:02,560
well grabbing the image saving that to

00:38:00,240 --> 00:38:02,560
disk

00:38:02,839 --> 00:38:06,800
uh

00:38:05,040 --> 00:38:08,400
the joys of having too many windows

00:38:06,800 --> 00:38:11,119
first things first we need to

00:38:08,400 --> 00:38:12,240
set up the collector so i've already

00:38:11,119 --> 00:38:15,760
done this pretty and

00:38:12,240 --> 00:38:18,960
uh earlier got my double checking so

00:38:15,760 --> 00:38:20,000
this is our collector this is actually

00:38:18,960 --> 00:38:23,599
based on the

00:38:20,000 --> 00:38:27,520
current jaeger collector but we wrap it

00:38:23,599 --> 00:38:27,520
ourselves to um

00:38:27,599 --> 00:38:36,320
now that's the metric one

00:38:32,240 --> 00:38:39,920
the long one there's the jaeger one

00:38:36,320 --> 00:38:41,760
um we wrap it to add our security logic

00:38:39,920 --> 00:38:43,280
to it so that we can use our tokens

00:38:41,760 --> 00:38:44,640
because normally you don't have that

00:38:43,280 --> 00:38:47,119
tokenized level of information

00:38:44,640 --> 00:38:47,920
around the standard jaeger collector it

00:38:47,119 --> 00:38:49,599
relies on being

00:38:47,920 --> 00:38:51,760
inside of your network and secured that

00:38:49,599 --> 00:38:54,960
way this allows it to

00:38:51,760 --> 00:38:57,119
be a for a vendor so that for example

00:38:54,960 --> 00:38:58,800
um our platform is secured you need to

00:38:57,119 --> 00:39:00,880
be able to talk to it securely

00:38:58,800 --> 00:39:02,400
so we've wrapped the authentication

00:39:00,880 --> 00:39:04,400
level information there so you can add

00:39:02,400 --> 00:39:08,160
your token and ship information

00:39:04,400 --> 00:39:11,440
so turn it on and have jack

00:39:08,160 --> 00:39:16,640
excellent we have a collector

00:39:11,440 --> 00:39:19,920
now two very very very very quickly

00:39:16,640 --> 00:39:28,320
if i remember which window i left the

00:39:19,920 --> 00:39:30,000
uh configuring the tracer on

00:39:28,320 --> 00:39:32,720
this is what happens when you have four

00:39:30,000 --> 00:39:34,160
windows open each one has 20 tabs

00:39:32,720 --> 00:39:35,839
trying to remember where you left all of

00:39:34,160 --> 00:39:38,240
your information is a little bit of a

00:39:35,839 --> 00:39:42,560
pain in the butt

00:39:38,240 --> 00:39:45,440
so and

00:39:42,560 --> 00:39:46,240
how are you right cool so need the jager

00:39:45,440 --> 00:39:48,640
client

00:39:46,240 --> 00:39:50,640
uh you know what be fair so that we can

00:39:48,640 --> 00:39:53,839
all see it

00:39:50,640 --> 00:39:57,359
that's that so go back to my code

00:39:53,839 --> 00:40:01,520
we want to install

00:39:57,359 --> 00:40:01,520
the jaeger client

00:40:03,760 --> 00:40:12,240
great and add that here

00:40:10,950 --> 00:40:16,800
[Music]

00:40:12,240 --> 00:40:20,800
so const init tracer

00:40:16,800 --> 00:40:24,880
acquire yeah clients

00:40:20,800 --> 00:40:26,720
dot oh in it tracer

00:40:24,880 --> 00:40:28,800
so we're going to configure this tracer

00:40:26,720 --> 00:40:32,400
which is then uh open tracing

00:40:28,800 --> 00:40:33,920
compliant um and open tracing is an

00:40:32,400 --> 00:40:35,200
older standard that has been superseded

00:40:33,920 --> 00:40:36,720
by something that i would like to

00:40:35,200 --> 00:40:39,040
mention in a little moment

00:40:36,720 --> 00:40:40,720
regardless of oh i've only got a few

00:40:39,040 --> 00:40:41,040
minutes so if i this doesn't work we're

00:40:40,720 --> 00:40:44,079
going

00:40:41,040 --> 00:40:47,839
straight talking to that point um

00:40:44,079 --> 00:40:50,960
cool so i am going to

00:40:47,839 --> 00:40:54,640
copy and paste as all great

00:40:50,960 --> 00:40:57,200
development is done from here

00:40:54,640 --> 00:40:57,200
to here

00:41:02,400 --> 00:41:09,119
and we're going to rename this to

00:41:06,000 --> 00:41:13,200
uh webinar

00:41:09,119 --> 00:41:17,040
image save

00:41:13,200 --> 00:41:18,240
and for the sake of all things being

00:41:17,040 --> 00:41:20,240
truthful

00:41:18,240 --> 00:41:22,240
no one would ever want to see this code

00:41:20,240 --> 00:41:24,880
in the wild anywhere being used so it is

00:41:22,240 --> 00:41:28,800
the version zero

00:41:24,880 --> 00:41:29,359
and after that point uh we want in a

00:41:28,800 --> 00:41:32,000
tracer

00:41:29,359 --> 00:41:34,000
give it the options to correct grand

00:41:32,000 --> 00:41:35,839
absolutely fantastic

00:41:34,000 --> 00:41:37,680
and then we want to move to the open

00:41:35,839 --> 00:41:40,240
tracing documentation

00:41:37,680 --> 00:41:41,280
for the way of actually uh sending this

00:41:40,240 --> 00:41:43,760
over

00:41:41,280 --> 00:41:44,880
to because then we can use the standard

00:41:43,760 --> 00:41:49,760
tracing so

00:41:44,880 --> 00:41:49,760
every tracing and then tracer start span

00:41:50,079 --> 00:41:53,680
there we go

00:41:54,560 --> 00:42:01,599
so start span and then

00:41:58,319 --> 00:42:04,960
we can start sending information const

00:42:01,599 --> 00:42:08,640
span actually

00:42:04,960 --> 00:42:13,200
probably yeah

00:42:08,640 --> 00:42:18,560
so start spanning http request and

00:42:13,200 --> 00:42:18,560
it's not hp requests it's an mpq and qp

00:42:21,599 --> 00:42:25,359
and qp request now then we can just keep

00:42:24,079 --> 00:42:27,680
adding to the span

00:42:25,359 --> 00:42:28,640
so as i said before a trace is built of

00:42:27,680 --> 00:42:31,680
spans

00:42:28,640 --> 00:42:33,040
so we get to add the uh different

00:42:31,680 --> 00:42:35,280
components to it

00:42:33,040 --> 00:42:37,680
so in this case we get to add log the

00:42:35,280 --> 00:42:41,040
information and a finish

00:42:37,680 --> 00:42:41,440
and we're going to do that so did we

00:42:41,040 --> 00:42:44,720
have

00:42:41,440 --> 00:42:47,760
an exit condition in that code

00:42:44,720 --> 00:42:48,480
did we have it we do that we do there we

00:42:47,760 --> 00:42:50,800
go

00:42:48,480 --> 00:42:51,520
so that becomes the something went

00:42:50,800 --> 00:42:55,760
horribly wrong

00:42:51,520 --> 00:42:58,800
bye bye goodbye goodnight oops

00:42:55,760 --> 00:43:03,119
just change that to e

00:42:58,800 --> 00:43:04,240
e that that's not e that's three

00:43:03,119 --> 00:43:07,280
what happens when you think you can

00:43:04,240 --> 00:43:11,280
touch type and you can't there we go

00:43:07,280 --> 00:43:11,280
so that's going to go and um

00:43:11,359 --> 00:43:16,480
well explode uh oh yeah i'm gonna need

00:43:14,640 --> 00:43:19,760
to include that so it has the correct

00:43:16,480 --> 00:43:19,760
uh tag object

00:43:20,640 --> 00:43:26,079
and then npm i save

00:43:24,000 --> 00:43:30,000
i actually better kill this one so we

00:43:26,079 --> 00:43:34,160
know it's dead so when we turned on

00:43:30,000 --> 00:43:37,520
uh there we go

00:43:34,160 --> 00:43:39,520
and that's when i dead trace and we're

00:43:37,520 --> 00:43:41,280
gonna want to add one for when it's on a

00:43:39,520 --> 00:43:44,400
live trace so we know when it's

00:43:41,280 --> 00:43:47,119
uh good and finishing we just add

00:43:44,400 --> 00:43:49,119
some traces in between so here we go

00:43:47,119 --> 00:43:53,599
i'll help you received

00:43:49,119 --> 00:43:56,720
and request and event that was true

00:43:53,599 --> 00:43:59,680
now we're just going to add a event

00:43:56,720 --> 00:44:01,040
so we know where they well it's going

00:43:59,680 --> 00:44:09,280
through

00:44:01,040 --> 00:44:12,400
so let's do

00:44:09,280 --> 00:44:15,359
event file

00:44:12,400 --> 00:44:15,359
saved

00:44:15,680 --> 00:44:19,280
and let's get rid of that because we

00:44:17,119 --> 00:44:22,960
don't need it

00:44:19,280 --> 00:44:26,560
um that should be enough

00:44:22,960 --> 00:44:28,640
and then open tracing

00:44:26,560 --> 00:44:29,599
should take all of two seconds stand

00:44:28,640 --> 00:44:31,280
this back up

00:44:29,599 --> 00:44:34,560
and that should mean the processor is

00:44:31,280 --> 00:44:34,560
going to send some traces

00:44:35,359 --> 00:44:39,520
i need to through wait for everything to

00:44:37,119 --> 00:44:40,960
turn back mattress is not fine

00:44:39,520 --> 00:44:42,720
of course metrics is not fine because i

00:44:40,960 --> 00:44:43,599
didn't clear out the bits i forgot to

00:44:42,720 --> 00:44:46,000
delete

00:44:43,599 --> 00:44:46,000
there we go

00:44:49,440 --> 00:44:52,560
and okay

00:44:53,920 --> 00:45:00,160
let's see if we can very very very

00:44:55,280 --> 00:45:00,160
quickly and i need to log out here

00:45:03,040 --> 00:45:08,800
darn darn i didn't configure it

00:45:06,480 --> 00:45:12,480
correctly i wanted to fix that

00:45:08,800 --> 00:45:16,400
for a later date log in

00:45:12,480 --> 00:45:19,680
as me on the corporate account and

00:45:16,400 --> 00:45:22,319
go to our jager there we go so

00:45:19,680 --> 00:45:24,160
this is our jager cute little logo i

00:45:22,319 --> 00:45:24,560
personally feel it should be a jaeger

00:45:24,160 --> 00:45:27,760
from

00:45:24,560 --> 00:45:31,599
um pacific rim but that's me and the

00:45:27,760 --> 00:45:32,319
giant nerd inside me wanting to escape

00:45:31,599 --> 00:45:35,520
and

00:45:32,319 --> 00:45:36,079
how's it working yes it is so grab throw

00:45:35,520 --> 00:45:39,680
send

00:45:36,079 --> 00:45:41,680
do things like that

00:45:39,680 --> 00:45:44,839
sending through and it's getting

00:45:41,680 --> 00:45:48,079
information excellent

00:45:44,839 --> 00:45:50,640
now select service

00:45:48,079 --> 00:45:52,000
uh what did i name the service that

00:45:50,640 --> 00:46:01,839
would have been useful to remember

00:45:52,000 --> 00:46:01,839
sir image safe cool thank you

00:46:03,280 --> 00:46:08,000
no no no

00:46:06,560 --> 00:46:10,319
not gonna have the same problem again

00:46:08,000 --> 00:46:13,680
are we

00:46:10,319 --> 00:46:17,680
uh darn it oh

00:46:13,680 --> 00:46:22,079
no i know why i haven't configured it

00:46:17,680 --> 00:46:22,079
two hours so do do

00:46:24,880 --> 00:46:29,839
where did i leave that

00:46:36,000 --> 00:46:43,839
i talked to talk to it over thrift

00:46:38,640 --> 00:46:43,839
that's the bit i forgot

00:46:49,119 --> 00:46:53,920
yeah okay

00:46:52,240 --> 00:46:57,119
i believe i'm missing the thrift part

00:46:53,920 --> 00:47:00,319
anyway um i'm going to run out of time

00:46:57,119 --> 00:47:02,800
so i may as well move along

00:47:00,319 --> 00:47:04,560
but normally you would see if i picked

00:47:02,800 --> 00:47:07,680
up the customer

00:47:04,560 --> 00:47:09,040
pull that through find traces now you'd

00:47:07,680 --> 00:47:10,960
then be able to see all the individual

00:47:09,040 --> 00:47:13,040
dispatchers and be able to see

00:47:10,960 --> 00:47:14,319
how everything is breaking down now that

00:47:13,040 --> 00:47:15,760
should have been how we've seen it for

00:47:14,319 --> 00:47:19,520
us but really tiny minute

00:47:15,760 --> 00:47:19,920
skill spans uh consisting of micro

00:47:19,520 --> 00:47:22,720
seconds

00:47:19,920 --> 00:47:24,319
as it was passed through you know edbd

00:47:22,720 --> 00:47:27,520
steps of code

00:47:24,319 --> 00:47:32,559
but i don't have time i don't think

00:47:27,520 --> 00:47:36,079
no i don't to do that so last bit

00:47:32,559 --> 00:47:37,599
let's go back to presenter mode is um

00:47:36,079 --> 00:47:39,119
there is an all-encapsulating

00:47:37,599 --> 00:47:40,559
specification that's coming through that

00:47:39,119 --> 00:47:43,440
is open telemetry

00:47:40,559 --> 00:47:45,119
open telemetry is the merging of open

00:47:43,440 --> 00:47:47,440
tracing and open census

00:47:45,119 --> 00:47:49,280
which are both uh cncf projects and open

00:47:47,440 --> 00:47:50,880
telemetry is now cncf project as well

00:47:49,280 --> 00:47:55,760
has been for a long time

00:47:50,880 --> 00:47:58,720
now that is combining log metric and um

00:47:55,760 --> 00:48:00,079
tracing information into this overall uh

00:47:58,720 --> 00:48:02,319
observability view

00:48:00,079 --> 00:48:04,960
of your system with open source uh

00:48:02,319 --> 00:48:06,960
software uh we at logs io are

00:48:04,960 --> 00:48:08,160
really really on board with this

00:48:06,960 --> 00:48:11,520
especially

00:48:08,160 --> 00:48:12,720
as well life's always easier when

00:48:11,520 --> 00:48:14,400
there's one way of doing it rather than

00:48:12,720 --> 00:48:18,960
15 million of them

00:48:14,400 --> 00:48:21,920
um and i i believe before i get

00:48:18,960 --> 00:48:22,240
told off questions if there are any if i

00:48:21,920 --> 00:48:24,559
left

00:48:22,240 --> 00:48:25,359
any sort of inkling of wanting to ask

00:48:24,559 --> 00:48:26,720
anything

00:48:25,359 --> 00:48:28,640
if you don't want to ask it now you can

00:48:26,720 --> 00:48:30,079
send me an email i'm more than happy to

00:48:28,640 --> 00:48:30,800
answer it there or forward you to the

00:48:30,079 --> 00:48:34,240
right person

00:48:30,800 --> 00:48:35,440
or answer on twitter because well

00:48:34,240 --> 00:48:49,839
what else you can do on twitter other

00:48:35,440 --> 00:48:49,839
than angry rant and answer questions

00:48:54,559 --> 00:49:00,720
i apologize if um the uh

00:48:57,839 --> 00:49:02,160
state of always not leaving enough room

00:49:00,720 --> 00:49:02,800
for debugging things in the middle of a

00:49:02,160 --> 00:49:06,079
demo

00:49:02,800 --> 00:49:07,119
yeah even when you have a dry run of it

00:49:06,079 --> 00:49:07,680
there's always a chance that something

00:49:07,119 --> 00:49:12,160
goes

00:49:07,680 --> 00:49:15,599
horribly wrong and okay so

00:49:12,160 --> 00:49:19,119
grava sharma can node b

00:49:15,599 --> 00:49:22,079
can a node be a span as well

00:49:19,119 --> 00:49:23,760
um any change can give us more context

00:49:22,079 --> 00:49:24,559
there are we talking node in the form of

00:49:23,760 --> 00:49:26,880
a graph

00:49:24,559 --> 00:49:28,800
or are we talking node in the form of an

00:49:26,880 --> 00:49:30,319
application instance

00:49:28,800 --> 00:49:31,680
because if it's an application instance

00:49:30,319 --> 00:49:33,119
then in theory yes if you have a

00:49:31,680 --> 00:49:35,599
microservices that

00:49:33,119 --> 00:49:37,680
say a single domain of information then

00:49:35,599 --> 00:49:39,760
you can treat it as an entire trace

00:49:37,680 --> 00:49:41,119
and the span of say are the functions

00:49:39,760 --> 00:49:44,240
you're passing through

00:49:41,119 --> 00:49:45,040
um but if you're talking in the form of

00:49:44,240 --> 00:49:47,200
a graph

00:49:45,040 --> 00:49:49,440
normally you build the graph uh the

00:49:47,200 --> 00:49:51,839
graph view of information

00:49:49,440 --> 00:49:55,359
from the traces and spans so i'm not

00:49:51,839 --> 00:49:55,359
entirely sure what you're asking there

00:49:55,599 --> 00:50:00,880
but i'm more than happy to answer

00:49:57,359 --> 00:50:00,880
anything else that comes through

00:50:03,200 --> 00:50:07,440
let's do that so i can see how many

00:50:10,839 --> 00:50:15,040
people

00:50:13,040 --> 00:50:16,319
okay we'll just give it one more minute

00:50:15,040 --> 00:50:19,440
for questions

00:50:16,319 --> 00:50:22,720
and if there are no more we'll wrap up

00:50:19,440 --> 00:50:22,720
thank you so much mike

00:50:23,839 --> 00:50:27,440
and i've managed to keep my tonsils in

00:50:25,280 --> 00:50:28,079
one in one piece all throughout this

00:50:27,440 --> 00:50:31,599
thank

00:50:28,079 --> 00:50:34,160
lord awesome glad to hear it i hope you

00:50:31,599 --> 00:50:34,160
feel better

00:50:35,359 --> 00:50:42,880
okay looks like we are

00:50:38,480 --> 00:50:46,559
all set here um any last words mike

00:50:42,880 --> 00:50:49,440
um yeah uh if you have had

00:50:46,559 --> 00:50:50,880
any uh interest in this uh there is a

00:50:49,440 --> 00:50:54,319
very active community

00:50:50,880 --> 00:50:54,640
around uh grafana the open source active

00:50:54,319 --> 00:50:56,400
a

00:50:54,640 --> 00:50:57,839
really really active community around

00:50:56,400 --> 00:50:58,720
prometheus if you want to get involved

00:50:57,839 --> 00:51:00,880
there

00:50:58,720 --> 00:51:02,079
and if you want to learn how to do

00:51:00,880 --> 00:51:04,880
logging metric

00:51:02,079 --> 00:51:06,640
or tracing data you can go into the open

00:51:04,880 --> 00:51:08,800
telemetry community and learn

00:51:06,640 --> 00:51:10,079
so much from them or you can come down

00:51:08,800 --> 00:51:11,680
to logs aio and

00:51:10,079 --> 00:51:13,119
pester us because it's our bread and

00:51:11,680 --> 00:51:14,720
butter so we may as well help where we

00:51:13,119 --> 00:51:17,200
can

00:51:14,720 --> 00:51:19,520
wonderful all right thank you for that

00:51:17,200 --> 00:51:20,960
and thanks everyone for joining us

00:51:19,520 --> 00:51:23,950
and we look forward to having you join

00:51:20,960 --> 00:51:26,599
us next time have a great day

00:51:23,950 --> 00:51:29,599
[Music]

00:51:26,599 --> 00:51:29,599

YouTube URL: https://www.youtube.com/watch?v=1tcsL54809M


