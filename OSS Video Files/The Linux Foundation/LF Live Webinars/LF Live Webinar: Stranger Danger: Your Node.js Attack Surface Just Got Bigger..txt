Title: LF Live Webinar: Stranger Danger: Your Node.js Attack Surface Just Got Bigger.
Publication date: 2021-04-21
Playlist: LF Live Webinars
Description: 
	sponsored by Snyk

In this live hacking session weâ€™ll exploit an application as an attacker would to show threats, vulnerabilities, and misconfigurations that are most common in cloud native apps - and show how you can protect it through best practices for each attack scenario.
Captions: 
	00:00:02,320 --> 00:00:05,600
thank you

00:00:03,600 --> 00:00:08,000
hi everyone welcome to this session uh

00:00:05,600 --> 00:00:10,000
my name is lerontal also known as the

00:00:08,000 --> 00:00:12,240
guy with the yoda hats and uh

00:00:10,000 --> 00:00:13,360
i'm a developer at sneak on a mission to

00:00:12,240 --> 00:00:15,679
help developers

00:00:13,360 --> 00:00:16,480
build applications securely using open

00:00:15,679 --> 00:00:18,800
source

00:00:16,480 --> 00:00:19,760
i'm actively working with the node.js or

00:00:18,800 --> 00:00:21,840
the openjs

00:00:19,760 --> 00:00:23,439
foundation on the ecosystem security

00:00:21,840 --> 00:00:23,920
working group to help improve the state

00:00:23,439 --> 00:00:26,720
of

00:00:23,920 --> 00:00:28,560
security for open source node.js and npm

00:00:26,720 --> 00:00:29,920
javascript as a whole ecosystem

00:00:28,560 --> 00:00:31,840
i'm involved in other application

00:00:29,920 --> 00:00:33,760
security projects so

00:00:31,840 --> 00:00:34,880
you're welcome to follow me on twitter

00:00:33,760 --> 00:00:36,320
or visit my

00:00:34,880 --> 00:00:37,600
my blogs on the sneak website if you

00:00:36,320 --> 00:00:38,800
have any questions or want some

00:00:37,600 --> 00:00:41,600
references

00:00:38,800 --> 00:00:42,079
and we are gonna go off and i'd like to

00:00:41,600 --> 00:00:44,399
open

00:00:42,079 --> 00:00:45,600
up with this following questions to

00:00:44,399 --> 00:00:48,719
ponder upon

00:00:45,600 --> 00:00:52,399
and that is are we going to have less

00:00:48,719 --> 00:00:55,440
or more software in the future

00:00:52,399 --> 00:00:56,320
right are we going to use less or more

00:00:55,440 --> 00:00:59,840
open source

00:00:56,320 --> 00:01:01,760
software in the future

00:00:59,840 --> 00:01:02,879
so to answer these questions we need to

00:01:01,760 --> 00:01:07,040
take another look at how

00:01:02,879 --> 00:01:09,119
software is being constructed these days

00:01:07,040 --> 00:01:11,680
at the very core of the applications

00:01:09,119 --> 00:01:13,119
we're building there lies our own custom

00:01:11,680 --> 00:01:15,360
applications code

00:01:13,119 --> 00:01:17,520
this is the top of the iceberg you know

00:01:15,360 --> 00:01:18,720
above the water this is the code that we

00:01:17,520 --> 00:01:21,360
as developers can

00:01:18,720 --> 00:01:22,799
very clearly see day to day it's what

00:01:21,360 --> 00:01:25,040
our colleagues write

00:01:22,799 --> 00:01:26,960
it's what you know already is ids and

00:01:25,040 --> 00:01:30,240
what is on our focus and state of

00:01:26,960 --> 00:01:32,479
mind all the time so looking at these

00:01:30,240 --> 00:01:33,680
code snippets can you find a security

00:01:32,479 --> 00:01:36,240
issue

00:01:33,680 --> 00:01:37,439
it brings up the question are you aware

00:01:36,240 --> 00:01:39,600
of the security issues

00:01:37,439 --> 00:01:41,520
in your code as you look at the

00:01:39,600 --> 00:01:43,759
following expressed middleware

00:01:41,520 --> 00:01:45,280
as is common in node.json application

00:01:43,759 --> 00:01:46,799
what actually is hidden

00:01:45,280 --> 00:01:48,960
and there is a security issue here but

00:01:46,799 --> 00:01:52,159
we'll get back there later

00:01:48,960 --> 00:01:54,000
so there's the open source code that has

00:01:52,159 --> 00:01:56,640
been there with us for many many years

00:01:54,000 --> 00:01:58,320
beyond just our own code this is the

00:01:56,640 --> 00:01:59,119
open source code that lies beneath the

00:01:58,320 --> 00:02:01,119
iceberg

00:01:59,119 --> 00:02:02,479
and we may not think about it too much

00:02:01,119 --> 00:02:04,399
in our day-to-day

00:02:02,479 --> 00:02:06,799
coding activities because maybe some of

00:02:04,399 --> 00:02:09,119
it is abstracted away and we may not be

00:02:06,799 --> 00:02:10,959
even aware of the libraries that we use

00:02:09,119 --> 00:02:12,400
but it really makes up the majority of

00:02:10,959 --> 00:02:15,680
the code that we write

00:02:12,400 --> 00:02:16,720
up to 90 of these open source software

00:02:15,680 --> 00:02:18,319
and libraries that

00:02:16,720 --> 00:02:20,879
make up today's code in different

00:02:18,319 --> 00:02:22,480
ecosystems like npm and ruby and maven

00:02:20,879 --> 00:02:24,800
and most of the time when we find

00:02:22,480 --> 00:02:26,800
vulnerabilities we find them in open

00:02:24,800 --> 00:02:29,520
source packages that are coming from

00:02:26,800 --> 00:02:31,040
transitive dependencies so this is a

00:02:29,520 --> 00:02:33,360
whole new complicated world

00:02:31,040 --> 00:02:35,360
which we'll dive into as well but really

00:02:33,360 --> 00:02:37,280
now on open source packages let's take a

00:02:35,360 --> 00:02:39,280
look at this code snippet from

00:02:37,280 --> 00:02:40,400
this popular open source library that

00:02:39,280 --> 00:02:42,319
you might have used

00:02:40,400 --> 00:02:44,080
at one point at one point in time in

00:02:42,319 --> 00:02:45,599
your node.js web application

00:02:44,080 --> 00:02:48,319
can you spot the code injection

00:02:45,599 --> 00:02:49,920
vulnerability that hides here

00:02:48,319 --> 00:02:52,239
once those vulnerabilities become

00:02:49,920 --> 00:02:52,720
publicly known the first thing you want

00:02:52,239 --> 00:02:54,720
to do

00:02:52,720 --> 00:02:56,720
is well know about them right so you

00:02:54,720 --> 00:02:57,680
could then take actions like upgrade to

00:02:56,720 --> 00:02:59,440
a fixed version

00:02:57,680 --> 00:03:01,120
or maybe patch them apply a patch if

00:02:59,440 --> 00:03:02,560
there's no upgrade fix

00:03:01,120 --> 00:03:05,280
maybe you want to migrate away to a

00:03:02,560 --> 00:03:07,200
different library if needed

00:03:05,280 --> 00:03:09,040
so here is a mental exercise summing up

00:03:07,200 --> 00:03:10,480
a little bit of this open source world

00:03:09,040 --> 00:03:12,720
imagine you're building an app this

00:03:10,480 --> 00:03:15,519
could be a node.js app or something else

00:03:12,720 --> 00:03:16,800
your mental image of your application is

00:03:15,519 --> 00:03:19,440
focused on the

00:03:16,800 --> 00:03:21,440
own code what you write you dwell about

00:03:19,440 --> 00:03:22,959
it you know you spend hours debugging it

00:03:21,440 --> 00:03:24,480
you're refactoring it and testing it

00:03:22,959 --> 00:03:26,080
right this is something that is

00:03:24,480 --> 00:03:27,519
very much you know the application core

00:03:26,080 --> 00:03:29,280
of what you're building

00:03:27,519 --> 00:03:30,959
but really the reality is a little bit

00:03:29,280 --> 00:03:33,120
different this is the mental

00:03:30,959 --> 00:03:34,319
exercise here that the code that we're

00:03:33,120 --> 00:03:36,480
actually building

00:03:34,319 --> 00:03:38,159
for this application is actually

00:03:36,480 --> 00:03:39,760
significantly smaller

00:03:38,159 --> 00:03:41,680
than the mental image that you have of

00:03:39,760 --> 00:03:43,760
the application itself because

00:03:41,680 --> 00:03:45,680
the application you're building is

00:03:43,760 --> 00:03:47,120
actually relying on a lot of community

00:03:45,680 --> 00:03:48,959
powered codes

00:03:47,120 --> 00:03:50,159
and we're leveraging this beautiful open

00:03:48,959 --> 00:03:51,200
source world which boosts our

00:03:50,159 --> 00:03:53,519
productivity

00:03:51,200 --> 00:03:54,879
but need to be aware of what what's

00:03:53,519 --> 00:03:57,120
going on there

00:03:54,879 --> 00:03:58,480
so to put this in more perspective we

00:03:57,120 --> 00:03:59,680
shouldn't be surprised that our

00:03:58,480 --> 00:04:01,280
applications today

00:03:59,680 --> 00:04:02,720
have you know may have security

00:04:01,280 --> 00:04:04,400
vulnerabilities right we are

00:04:02,720 --> 00:04:05,200
containerizing them there are serverless

00:04:04,400 --> 00:04:07,439
functions

00:04:05,200 --> 00:04:09,200
barbone's institute installs you know so

00:04:07,439 --> 00:04:11,200
many ways that we can bundle

00:04:09,200 --> 00:04:12,879
open source dependencies here and there

00:04:11,200 --> 00:04:14,959
and therefore lies the risk

00:04:12,879 --> 00:04:16,400
so the the use of open source is

00:04:14,959 --> 00:04:17,840
accelerating as we're seeing

00:04:16,400 --> 00:04:19,120
but the adoption of that the great

00:04:17,840 --> 00:04:21,040
adoption of that comes with great

00:04:19,120 --> 00:04:23,360
responsibility and risk as well

00:04:21,040 --> 00:04:26,080
so we're seeing continuous growth of

00:04:23,360 --> 00:04:28,080
vulnerabilities in open source software

00:04:26,080 --> 00:04:29,440
in different languages and this is

00:04:28,080 --> 00:04:30,560
growing along with the growth of open

00:04:29,440 --> 00:04:33,040
source in general

00:04:30,560 --> 00:04:34,720
and as users of this we need to be we

00:04:33,040 --> 00:04:35,199
need to have the ability to mitigate

00:04:34,720 --> 00:04:36,800
them

00:04:35,199 --> 00:04:38,960
we need to be you know we are maybe

00:04:36,800 --> 00:04:40,639
owning them in a way we are maintaining

00:04:38,960 --> 00:04:43,759
or using open source software and this

00:04:40,639 --> 00:04:46,160
is a viable risk now taking a step

00:04:43,759 --> 00:04:47,680
you know even deeper into this world of

00:04:46,160 --> 00:04:50,080
open source software

00:04:47,680 --> 00:04:53,440
there is the question and the topic of

00:04:50,080 --> 00:04:56,240
open source supply chain security

00:04:53,440 --> 00:04:57,680
and i want to share an article that was

00:04:56,240 --> 00:04:59,120
published you know not so long ago

00:04:57,680 --> 00:05:01,280
october 2020

00:04:59,120 --> 00:05:02,960
so very recently by the uh uh you know

00:05:01,280 --> 00:05:04,479
by by a government right by the united

00:05:02,960 --> 00:05:05,680
states of america the cyberspace

00:05:04,479 --> 00:05:08,720
solarium commission

00:05:05,680 --> 00:05:10,320
that was really advancing and then

00:05:08,720 --> 00:05:13,199
promoting the notion of

00:05:10,320 --> 00:05:15,120
potential compromises right from supply

00:05:13,199 --> 00:05:17,120
chain security

00:05:15,120 --> 00:05:19,039
and actually it calls for establishing a

00:05:17,120 --> 00:05:20,960
center for open source software security

00:05:19,039 --> 00:05:23,360
within government organizations

00:05:20,960 --> 00:05:25,199
so i will give you one paragraph that i

00:05:23,360 --> 00:05:26,320
paraphrased out of this article which i

00:05:25,199 --> 00:05:28,880
recommend reading

00:05:26,320 --> 00:05:30,000
and that is dependency on adversary

00:05:28,880 --> 00:05:31,759
countries for

00:05:30,000 --> 00:05:34,240
some or most of our critical software

00:05:31,759 --> 00:05:36,479
supply chains threatens to undermine the

00:05:34,240 --> 00:05:38,160
trustworthiness of critical technologies

00:05:36,479 --> 00:05:41,120
and components that constitute

00:05:38,160 --> 00:05:42,479
and connect to the cyberspace so as you

00:05:41,120 --> 00:05:45,039
can see there is a lot

00:05:42,479 --> 00:05:45,919
of awareness in terms of what could

00:05:45,039 --> 00:05:48,400
actually

00:05:45,919 --> 00:05:50,080
be coming out of open source supply

00:05:48,400 --> 00:05:51,680
chain registries and things like that

00:05:50,080 --> 00:05:52,320
and that is why this is catching the

00:05:51,680 --> 00:05:54,800
attention

00:05:52,320 --> 00:05:56,560
of governments you know worldwide along

00:05:54,800 --> 00:05:58,400
with companies and everyone else

00:05:56,560 --> 00:06:00,240
relying on open source this is basically

00:05:58,400 --> 00:06:02,400
a testament and acceptance of us

00:06:00,240 --> 00:06:04,800
and evidently we've seen these security

00:06:02,400 --> 00:06:06,800
incidents happen time after time

00:06:04,800 --> 00:06:08,639
for example on the npm ecosystem we've

00:06:06,800 --> 00:06:10,960
seen a social engineering

00:06:08,639 --> 00:06:12,400
attack and a malicious incident for this

00:06:10,960 --> 00:06:14,560
package called the event stream that was

00:06:12,400 --> 00:06:16,960
downloaded millions of times a week

00:06:14,560 --> 00:06:18,960
and it demonstrated how deep the attack

00:06:16,960 --> 00:06:21,199
surface that was aggravated

00:06:18,960 --> 00:06:22,800
and you know by security concerns in

00:06:21,199 --> 00:06:24,479
nested dependencies

00:06:22,800 --> 00:06:26,319
because someone were able to socially

00:06:24,479 --> 00:06:27,680
engineer a way into injecting a

00:06:26,319 --> 00:06:29,360
malicious package

00:06:27,680 --> 00:06:31,919
into this you know popular package that

00:06:29,360 --> 00:06:34,000
was downloaded millions of times

00:06:31,919 --> 00:06:36,160
but we have to ask ourselves have we

00:06:34,000 --> 00:06:37,120
learned nothing because a year after

00:06:36,160 --> 00:06:38,639
event stream

00:06:37,120 --> 00:06:40,479
another incident took place this

00:06:38,639 --> 00:06:42,400
electron native notify

00:06:40,479 --> 00:06:44,400
package which targeted stealing

00:06:42,400 --> 00:06:45,759
cryptocurrency the same as it was with

00:06:44,400 --> 00:06:47,919
event stream

00:06:45,759 --> 00:06:49,759
it targeted this stealing of

00:06:47,919 --> 00:06:52,080
cryptocurrency from users who are using

00:06:49,759 --> 00:06:53,599
the comodo's agama wallet and it really

00:06:52,080 --> 00:06:55,759
you know went through the same process

00:06:53,599 --> 00:06:58,479
so what was going on there right

00:06:55,759 --> 00:06:59,440
a dependency was added to a library

00:06:58,479 --> 00:07:01,680
three weeks later

00:06:59,440 --> 00:07:03,199
that dependency publishes a new version

00:07:01,680 --> 00:07:05,440
with malicious payload

00:07:03,199 --> 00:07:07,360
and three weeks after that the agama

00:07:05,440 --> 00:07:09,280
wallet software is rebuilt and pushed

00:07:07,360 --> 00:07:10,639
using a recent version of electronic

00:07:09,280 --> 00:07:12,000
modifier which now includes the

00:07:10,639 --> 00:07:15,120
malicious version

00:07:12,000 --> 00:07:18,160
so this is how software trickles down

00:07:15,120 --> 00:07:19,919
from supply chain into the end users to

00:07:18,160 --> 00:07:20,800
like the build process and development

00:07:19,919 --> 00:07:22,560
and everything else

00:07:20,800 --> 00:07:24,160
and if that software is compromised at

00:07:22,560 --> 00:07:25,840
any point of those stages

00:07:24,160 --> 00:07:27,680
that is a whole story of open source

00:07:25,840 --> 00:07:30,319
supply chain security

00:07:27,680 --> 00:07:31,120
so another example this is this word

00:07:30,319 --> 00:07:33,120
package name

00:07:31,120 --> 00:07:35,039
is one out of three packages that

00:07:33,120 --> 00:07:36,720
existed on the npm repository for

00:07:35,039 --> 00:07:37,840
actually more than a year before someone

00:07:36,720 --> 00:07:39,840
found out about it

00:07:37,840 --> 00:07:41,759
and it targeted a complete system

00:07:39,840 --> 00:07:44,240
compromise as you could see

00:07:41,759 --> 00:07:47,599
from you know the npm staff uh

00:07:44,240 --> 00:07:49,680
announcement when this was found

00:07:47,599 --> 00:07:52,160
so leaving aside even the supply chain

00:07:49,680 --> 00:07:54,080
security there is there are different

00:07:52,160 --> 00:07:54,639
aspects of security vulnerabilities for

00:07:54,080 --> 00:07:56,560
example

00:07:54,639 --> 00:07:58,000
those that are unrelated to malicious

00:07:56,560 --> 00:08:00,639
incidents that we

00:07:58,000 --> 00:08:02,800
all need to be aware of for example a ui

00:08:00,639 --> 00:08:05,039
library called frapper charts from 2020

00:08:02,800 --> 00:08:06,960
having an xs as a cross-site scripting

00:08:05,039 --> 00:08:09,520
uh vulnerability in this front-end

00:08:06,960 --> 00:08:12,479
charting library maybe a universal

00:08:09,520 --> 00:08:14,160
library like urijs which has uh use

00:08:12,479 --> 00:08:14,639
cases for both front-end and back-end

00:08:14,160 --> 00:08:16,479
needs

00:08:14,639 --> 00:08:18,160
but it is suffering from validation

00:08:16,479 --> 00:08:19,120
issues so you may not be using it in a

00:08:18,160 --> 00:08:21,120
correct way

00:08:19,120 --> 00:08:22,319
or there is a upgraded fix that you

00:08:21,120 --> 00:08:25,039
could use to to have

00:08:22,319 --> 00:08:26,960
the safer version ejs popular you know

00:08:25,039 --> 00:08:27,759
node.js templating library that is still

00:08:26,960 --> 00:08:31,120
vulnerable

00:08:27,759 --> 00:08:31,520
if you're using point 3.1.5 version of

00:08:31,120 --> 00:08:33,680
that

00:08:31,520 --> 00:08:35,760
which has a high severity code injection

00:08:33,680 --> 00:08:36,959
issue all of those which you should be

00:08:35,760 --> 00:08:39,360
you know very well aware of if you're

00:08:36,959 --> 00:08:40,959
using open source software

00:08:39,360 --> 00:08:43,680
the thing is with open source we need to

00:08:40,959 --> 00:08:45,120
do a bit of due diligence to find out

00:08:43,680 --> 00:08:46,800
specific things about open source

00:08:45,120 --> 00:08:49,760
packages so this advisor

00:08:46,800 --> 00:08:50,720
you know website that you could use

00:08:49,760 --> 00:08:52,640
gives you

00:08:50,720 --> 00:08:54,080
this sort of health metrics around

00:08:52,640 --> 00:08:55,839
popularity and maintenance

00:08:54,080 --> 00:08:58,240
and security considerations and

00:08:55,839 --> 00:09:00,240
community so you could evaluate if you

00:08:58,240 --> 00:09:00,880
want to use a new package or an existing

00:09:00,240 --> 00:09:02,320
one

00:09:00,880 --> 00:09:03,600
and you have second thoughts or you want

00:09:02,320 --> 00:09:04,720
to check what is the you know if you

00:09:03,600 --> 00:09:06,399
should move to a different

00:09:04,720 --> 00:09:08,080
to a different alternative or similar

00:09:06,399 --> 00:09:09,440
package what you know what are the

00:09:08,080 --> 00:09:11,279
options of doing that and are they

00:09:09,440 --> 00:09:14,000
actually doing any better

00:09:11,279 --> 00:09:16,320
so we have all of these tools but really

00:09:14,000 --> 00:09:17,600
understanding our dependency trees is a

00:09:16,320 --> 00:09:19,519
complicated task

00:09:17,600 --> 00:09:20,720
even more complicated at times is the

00:09:19,519 --> 00:09:23,760
ability to tell

00:09:20,720 --> 00:09:26,800
where wherever vulnerability originates

00:09:23,760 --> 00:09:28,720
and how to fix it so as an example

00:09:26,800 --> 00:09:30,560
in the javascript ecosystem more than 80

00:09:28,720 --> 00:09:31,360
percent of vulnerabilities that sneak

00:09:30,560 --> 00:09:33,519
users find

00:09:31,360 --> 00:09:34,720
are in indirect dependencies it means

00:09:33,519 --> 00:09:37,279
that even if we are

00:09:34,720 --> 00:09:38,320
looking and watching at changelogs and

00:09:37,279 --> 00:09:40,320
you know

00:09:38,320 --> 00:09:42,480
everything around the direct dependency

00:09:40,320 --> 00:09:44,399
the expresses of you know the world

00:09:42,480 --> 00:09:45,839
what is happening is most of the time

00:09:44,399 --> 00:09:47,680
when we find vulnerabilities

00:09:45,839 --> 00:09:49,440
they will actually manifest in those

00:09:47,680 --> 00:09:50,640
indirect dependencies those transitive

00:09:49,440 --> 00:09:52,880
dependencies that

00:09:50,640 --> 00:09:54,720
the direct ones simply you know bringing

00:09:52,880 --> 00:09:57,040
in which is hard to track because

00:09:54,720 --> 00:09:58,880
we have a bigger dependency tree so

00:09:57,040 --> 00:10:00,720
nowadays at the very least we have

00:09:58,880 --> 00:10:02,240
bots you know automated bots that help

00:10:00,720 --> 00:10:04,000
us stay on top of security

00:10:02,240 --> 00:10:05,440
vulnerabilities whether you're getting

00:10:04,000 --> 00:10:07,360
those automated pull requests from you

00:10:05,440 --> 00:10:08,959
know sneak or github or somewhere else

00:10:07,360 --> 00:10:10,640
that you know that is great that you are

00:10:08,959 --> 00:10:12,079
knowing about us but really what is what

00:10:10,640 --> 00:10:14,240
is it telling us is

00:10:12,079 --> 00:10:15,279
this is a message where we are entering

00:10:14,240 --> 00:10:18,560
a world where

00:10:15,279 --> 00:10:21,519
security is turned on by default is

00:10:18,560 --> 00:10:22,000
something we are now used to secondly

00:10:21,519 --> 00:10:24,000
tools

00:10:22,000 --> 00:10:25,360
basically adapt themselves to a

00:10:24,000 --> 00:10:27,680
developer's mindset

00:10:25,360 --> 00:10:29,360
not the other way around and this is an

00:10:27,680 --> 00:10:31,440
entire mind shift of how

00:10:29,360 --> 00:10:33,200
developer security is actually and

00:10:31,440 --> 00:10:34,079
developer first security tooling is

00:10:33,200 --> 00:10:36,000
actually

00:10:34,079 --> 00:10:37,519
changing the way that we interact with

00:10:36,000 --> 00:10:40,480
with software

00:10:37,519 --> 00:10:41,440
so developers of if we sign up

00:10:40,480 --> 00:10:43,360
developers often

00:10:41,440 --> 00:10:45,200
think about the security of their

00:10:43,360 --> 00:10:45,680
application in terms of vulnerabilities

00:10:45,200 --> 00:10:47,600
that play

00:10:45,680 --> 00:10:48,800
in their code or in their open source

00:10:47,600 --> 00:10:50,640
dependencies

00:10:48,800 --> 00:10:52,880
and your open source dependency

00:10:50,640 --> 00:10:54,560
footprint is a great way to start

00:10:52,880 --> 00:10:55,920
you know to improve your applications

00:10:54,560 --> 00:10:57,680
security posture

00:10:55,920 --> 00:10:59,120
because as we've said open source

00:10:57,680 --> 00:11:01,680
components make up to

00:10:59,120 --> 00:11:02,720
90 of your code base but really what

00:11:01,680 --> 00:11:05,760
lies beyond

00:11:02,720 --> 00:11:07,279
that point right beginning with security

00:11:05,760 --> 00:11:08,480
in open source dependencies is a great

00:11:07,279 --> 00:11:11,040
start as we said

00:11:08,480 --> 00:11:12,720
but we are transitioning into this

00:11:11,040 --> 00:11:14,320
cloud-native world

00:11:12,720 --> 00:11:16,560
where your application is really more

00:11:14,320 --> 00:11:18,880
than your code and

00:11:16,560 --> 00:11:20,320
what i mean by that is when we build

00:11:18,880 --> 00:11:22,959
cloud native applications

00:11:20,320 --> 00:11:24,959
as developers our application stack

00:11:22,959 --> 00:11:25,839
surface is more than just the base of

00:11:24,959 --> 00:11:28,640
the application

00:11:25,839 --> 00:11:30,480
code still right what is what does that

00:11:28,640 --> 00:11:32,240
actually mean in practice so i want to

00:11:30,480 --> 00:11:34,160
explore that with you

00:11:32,240 --> 00:11:35,680
let's say you consistently scan your

00:11:34,160 --> 00:11:37,519
project repositories for security

00:11:35,680 --> 00:11:38,800
vulnerabilities you are now aware of

00:11:37,519 --> 00:11:40,000
security vulnerabilities coming from

00:11:38,800 --> 00:11:40,880
your code and from your open source

00:11:40,000 --> 00:11:42,320
dependencies

00:11:40,880 --> 00:11:44,079
so you audited you know your

00:11:42,320 --> 00:11:45,760
dependencies and once uh

00:11:44,079 --> 00:11:47,200
you fixed things how do you know if

00:11:45,760 --> 00:11:48,880
you're not vulnerable to a new

00:11:47,200 --> 00:11:50,160
vulnerability that was released after

00:11:48,880 --> 00:11:51,600
you last scanned it

00:11:50,160 --> 00:11:53,519
so what you actually need to do is not

00:11:51,600 --> 00:11:55,120
just scan it as a one-time off you

00:11:53,519 --> 00:11:55,760
actually need to monitor the projects

00:11:55,120 --> 00:11:57,440
because

00:11:55,760 --> 00:11:59,200
you may have scanned it at one point but

00:11:57,440 --> 00:11:59,680
then new vulnerabilities are keep coming

00:11:59,200 --> 00:12:01,680
up

00:11:59,680 --> 00:12:03,519
and are you monitoring that project all

00:12:01,680 --> 00:12:05,600
the time to get those alerts

00:12:03,519 --> 00:12:07,200
so you've done that but now you have a

00:12:05,600 --> 00:12:08,079
baseline of the vulnerabilities that you

00:12:07,200 --> 00:12:11,040
have

00:12:08,079 --> 00:12:12,720
so as the next step hopefully you even

00:12:11,040 --> 00:12:14,720
got to a really really good

00:12:12,720 --> 00:12:16,880
baseline point where you have maybe a

00:12:14,720 --> 00:12:17,920
few or even zero vulnerabilities in your

00:12:16,880 --> 00:12:20,320
projects

00:12:17,920 --> 00:12:21,839
i want to say congratulations amazing

00:12:20,320 --> 00:12:23,600
job which it is

00:12:21,839 --> 00:12:24,480
but there's a bit of a misconception

00:12:23,600 --> 00:12:25,040
here and that is what i want to

00:12:24,480 --> 00:12:27,440
highlight

00:12:25,040 --> 00:12:29,279
uh specifically in this talk and that is

00:12:27,440 --> 00:12:31,040
our application repository is

00:12:29,279 --> 00:12:32,079
continuously scanned for vulnerable

00:12:31,040 --> 00:12:34,160
dependencies

00:12:32,079 --> 00:12:35,360
this is great but it is not the complete

00:12:34,160 --> 00:12:37,200
picture it is not

00:12:35,360 --> 00:12:38,959
it's not capturing the whole story

00:12:37,200 --> 00:12:41,120
there's the issue of potential

00:12:38,959 --> 00:12:42,399
dependency parity drift which are

00:12:41,120 --> 00:12:44,160
deployed artifacts

00:12:42,399 --> 00:12:46,240
and you know that is right it means that

00:12:44,160 --> 00:12:48,160
we don't just develop applications

00:12:46,240 --> 00:12:49,839
to build them and and save them in the

00:12:48,160 --> 00:12:51,920
repository's main branch

00:12:49,839 --> 00:12:53,120
we also deploy them and there could be a

00:12:51,920 --> 00:12:55,200
drift of of

00:12:53,120 --> 00:12:57,200
different of different states between

00:12:55,200 --> 00:12:58,639
the dependencies in the deployed states

00:12:57,200 --> 00:13:00,639
and the dependencies in the in the main

00:12:58,639 --> 00:13:02,880
repository branch and that is the drift

00:13:00,639 --> 00:13:05,519
that i'm talking about here

00:13:02,880 --> 00:13:08,000
so you know this is where the next layer

00:13:05,519 --> 00:13:10,880
of our story actually reveals itself

00:13:08,000 --> 00:13:12,800
in a pre-cloud world we deployed on bare

00:13:10,880 --> 00:13:13,680
metal servers we deployed on you know

00:13:12,800 --> 00:13:16,800
maintaining our

00:13:13,680 --> 00:13:18,160
own infrastructure we had hopefully you

00:13:16,800 --> 00:13:20,079
know achieving elasticity and some

00:13:18,160 --> 00:13:21,600
flexibility with virtual machines

00:13:20,079 --> 00:13:24,240
but you know these days you know who

00:13:21,600 --> 00:13:26,240
even who even remembers those days or

00:13:24,240 --> 00:13:28,079
care about the overhead of maintaining

00:13:26,240 --> 00:13:29,600
your own infrastructure because we have

00:13:28,079 --> 00:13:31,200
entered into a cloud era

00:13:29,600 --> 00:13:32,720
right this says we are living it we're

00:13:31,200 --> 00:13:34,639
not just entered we are

00:13:32,720 --> 00:13:36,000
the fact out there so it means that if

00:13:34,639 --> 00:13:37,279
you built a small api

00:13:36,000 --> 00:13:39,519
maybe you go ahead and deploy it as a

00:13:37,279 --> 00:13:40,480
serverless lambda function if you build

00:13:39,519 --> 00:13:43,279
a front end

00:13:40,480 --> 00:13:44,720
you may deploy it on a netlife reversal

00:13:43,279 --> 00:13:46,880
as you know cloud front-end

00:13:44,720 --> 00:13:49,040
infrastructure and they they worry about

00:13:46,880 --> 00:13:50,880
all the ssl and the caching and the edge

00:13:49,040 --> 00:13:52,000
deployment and the atomic deploys you

00:13:50,880 --> 00:13:53,440
give them that

00:13:52,000 --> 00:13:55,279
concern and they manage that for you

00:13:53,440 --> 00:13:58,320
this is the cloud if you maintain

00:13:55,279 --> 00:13:59,279
several micro services it's natural to

00:13:58,320 --> 00:14:01,760
fill the way

00:13:59,279 --> 00:14:03,600
the urge to wrap them up in a container

00:14:01,760 --> 00:14:05,440
and deploy them to the cloud

00:14:03,600 --> 00:14:06,959
right and let's let's focus on that

00:14:05,440 --> 00:14:08,079
specific part this is the whole cloud

00:14:06,959 --> 00:14:10,560
native part this is

00:14:08,079 --> 00:14:11,519
containers for example as one of those

00:14:10,560 --> 00:14:15,440
examples that i've

00:14:11,519 --> 00:14:16,720
said before are you know an easy topic

00:14:15,440 --> 00:14:17,440
because it can easily relate to that it

00:14:16,720 --> 00:14:19,199
gives us

00:14:17,440 --> 00:14:20,480
across a platform compatibility to

00:14:19,199 --> 00:14:21,199
deploy no matter what cloud you're

00:14:20,480 --> 00:14:23,199
running on

00:14:21,199 --> 00:14:24,240
uh it is faster and more lightweight to

00:14:23,199 --> 00:14:26,959
spin up those than

00:14:24,240 --> 00:14:28,160
vms it provides you this uh reproducible

00:14:26,959 --> 00:14:29,839
application environment

00:14:28,160 --> 00:14:31,760
so for all of those reasons we could

00:14:29,839 --> 00:14:33,920
talk about containers so let's dive

00:14:31,760 --> 00:14:35,920
deep into this and now try to fill those

00:14:33,920 --> 00:14:37,680
blanks we talked before about

00:14:35,920 --> 00:14:39,760
all our application our application

00:14:37,680 --> 00:14:41,199
dependencies and

00:14:39,760 --> 00:14:43,040
our application dependencies are not

00:14:41,199 --> 00:14:44,880
running in a vacuum right they are part

00:14:43,040 --> 00:14:46,800
of somewhere this this gets deployed

00:14:44,880 --> 00:14:48,160
somewhere don't just write code for the

00:14:46,800 --> 00:14:50,160
sake of writing code

00:14:48,160 --> 00:14:51,760
and so now this blank space i think

00:14:50,160 --> 00:14:53,920
becomes clearer because

00:14:51,760 --> 00:14:55,199
if we're sticking to these examples of

00:14:53,920 --> 00:14:57,040
docker containers here

00:14:55,199 --> 00:14:58,480
an application that we containerize as

00:14:57,040 --> 00:14:59,760
the docker application for example this

00:14:58,480 --> 00:15:02,240
node.js application

00:14:59,760 --> 00:15:03,360
it suddenly tells us how our attack

00:15:02,240 --> 00:15:05,120
surface grows

00:15:03,360 --> 00:15:07,120
in ways that i'm sure you may have not

00:15:05,120 --> 00:15:09,040
think thought about before

00:15:07,120 --> 00:15:11,279
so let's break it down and see what

00:15:09,040 --> 00:15:13,360
attack surface is now being

00:15:11,279 --> 00:15:15,120
more of a concern for us as developers

00:15:13,360 --> 00:15:16,399
for example this is a docker file which

00:15:15,120 --> 00:15:18,800
i can

00:15:16,399 --> 00:15:20,079
go ahead and show you how we actually

00:15:18,800 --> 00:15:21,760
have a docker file for a node

00:15:20,079 --> 00:15:23,839
application and what actually

00:15:21,760 --> 00:15:25,680
hides in it so what are we actually

00:15:23,839 --> 00:15:26,000
bringing in this node.js image if i'm

00:15:25,680 --> 00:15:27,760
bringing

00:15:26,000 --> 00:15:29,360
you know if i'm saying from node you

00:15:27,760 --> 00:15:31,279
know under different

00:15:29,360 --> 00:15:33,040
bad practices here right so this is just

00:15:31,279 --> 00:15:34,800
for the sake of simplicity and brevity

00:15:33,040 --> 00:15:37,759
kind of small

00:15:34,800 --> 00:15:38,800
but what if i'm doing from node what os

00:15:37,759 --> 00:15:41,040
dependencies am i

00:15:38,800 --> 00:15:42,800
bringing pulling into my dependency into

00:15:41,040 --> 00:15:45,839
my application and do i need

00:15:42,800 --> 00:15:47,600
all of them you may need some specific

00:15:45,839 --> 00:15:49,120
tools and libraries available on the

00:15:47,600 --> 00:15:50,320
container for the application to

00:15:49,120 --> 00:15:51,839
function properly so

00:15:50,320 --> 00:15:53,920
maybe you want to convert images so

00:15:51,839 --> 00:15:55,920
maybe do opt-get install image magic

00:15:53,920 --> 00:15:56,480
because you choose to spawn a system

00:15:55,920 --> 00:15:58,720
command

00:15:56,480 --> 00:16:00,720
that uses image magic library that is

00:15:58,720 --> 00:16:02,880
available on linux distributions like

00:16:00,720 --> 00:16:06,160
you know like node is based on ubuntu

00:16:02,880 --> 00:16:07,360
or debian so this common software makes

00:16:06,160 --> 00:16:09,279
up your container

00:16:07,360 --> 00:16:10,880
and well potentially it increases your

00:16:09,279 --> 00:16:13,279
application attack surface now

00:16:10,880 --> 00:16:14,959
i understand that at this point maybe it

00:16:13,279 --> 00:16:16,560
seems like well how do you

00:16:14,959 --> 00:16:18,240
you know connect the dots between a

00:16:16,560 --> 00:16:18,959
vulnerability that someone is able to

00:16:18,240 --> 00:16:20,639
exploit

00:16:18,959 --> 00:16:22,959
you know from the other side of the

00:16:20,639 --> 00:16:24,959
application into a dependency that is

00:16:22,959 --> 00:16:25,519
running on the container itself that

00:16:24,959 --> 00:16:27,440
could

00:16:25,519 --> 00:16:29,600
be vulnerable well i'm going to show you

00:16:27,440 --> 00:16:31,120
how we do it in a live hacking session

00:16:29,600 --> 00:16:32,720
quite soon we're going to go see all of

00:16:31,120 --> 00:16:34,560
this unfolds

00:16:32,720 --> 00:16:36,079
but more in this docker file you know

00:16:34,560 --> 00:16:37,279
what what lies in the right the version

00:16:36,079 --> 00:16:38,639
of the dependencies

00:16:37,279 --> 00:16:40,560
in deployed containers can be

00:16:38,639 --> 00:16:41,040
significantly different from what you

00:16:40,560 --> 00:16:42,560
have

00:16:41,040 --> 00:16:44,399
even scanned and monitored in your

00:16:42,560 --> 00:16:46,160
repository because deployment

00:16:44,399 --> 00:16:47,759
doesn't necessarily mean that it is the

00:16:46,160 --> 00:16:50,399
same thing that you had in your

00:16:47,759 --> 00:16:52,320
repository because of the drifts

00:16:50,399 --> 00:16:54,240
so if you're not installing dependencies

00:16:52,320 --> 00:16:55,360
in the same time and you're not fixing

00:16:54,240 --> 00:16:57,680
them and you're not pushing those

00:16:55,360 --> 00:17:00,800
security fixes you know right on time

00:16:57,680 --> 00:17:02,720
you may have those spirited rifts but

00:17:00,800 --> 00:17:04,480
really the thing that i think

00:17:02,720 --> 00:17:06,000
people are missing a lot in terms of

00:17:04,480 --> 00:17:07,199
understanding the containers

00:17:06,000 --> 00:17:09,280
you know the container side of

00:17:07,199 --> 00:17:10,480
vulnerabilities is not the actual

00:17:09,280 --> 00:17:12,319
vulnerabilities in the

00:17:10,480 --> 00:17:14,559
in the container itself but actually the

00:17:12,319 --> 00:17:15,839
runtime when you're doing from node

00:17:14,559 --> 00:17:17,520
right

00:17:15,839 --> 00:17:18,480
which version are you actually pulling

00:17:17,520 --> 00:17:19,760
in do you know which version actually

00:17:18,480 --> 00:17:21,280
running in production

00:17:19,760 --> 00:17:23,360
do you know if it is vulnerable or not

00:17:21,280 --> 00:17:26,480
because this is the node runtime this is

00:17:23,360 --> 00:17:28,000
what people have direct interaction from

00:17:26,480 --> 00:17:30,240
the outside of the application

00:17:28,000 --> 00:17:31,360
to the node application itself that

00:17:30,240 --> 00:17:32,880
you've built so it's

00:17:31,360 --> 00:17:34,880
meant that if there's a vulnerability in

00:17:32,880 --> 00:17:36,400
the node.js runtime well

00:17:34,880 --> 00:17:38,000
that is directly impacting your

00:17:36,400 --> 00:17:39,919
application and

00:17:38,000 --> 00:17:41,679
node.js vulnerabilities do happen you

00:17:39,919 --> 00:17:43,280
know time to time so you need to be

00:17:41,679 --> 00:17:44,559
aware of this

00:17:43,280 --> 00:17:46,480
now there's a good reason we're talking

00:17:44,559 --> 00:17:47,200
about containers here as an example

00:17:46,480 --> 00:17:49,360
because

00:17:47,200 --> 00:17:50,960
this race to the cloud that we also you

00:17:49,360 --> 00:17:52,880
know often referred as

00:17:50,960 --> 00:17:54,880
this digital transformation has

00:17:52,880 --> 00:17:55,840
accelerated the use of container

00:17:54,880 --> 00:17:58,400
technology

00:17:55,840 --> 00:18:00,559
and what it means is that these problems

00:17:58,400 --> 00:18:03,200
this problem space of using

00:18:00,559 --> 00:18:04,720
safe base images isn't very intuitive

00:18:03,200 --> 00:18:07,039
for us to figure out

00:18:04,720 --> 00:18:08,720
so what is happening as an example here

00:18:07,039 --> 00:18:09,840
is we are consistently you know year

00:18:08,720 --> 00:18:12,320
after year at stake

00:18:09,840 --> 00:18:14,080
we've seen that the top 10 docker base

00:18:12,320 --> 00:18:15,840
images on docker hub are carrying

00:18:14,080 --> 00:18:17,120
security vulnerabilities in them by

00:18:15,840 --> 00:18:19,039
default so just by using

00:18:17,120 --> 00:18:20,240
the default node base image you're

00:18:19,039 --> 00:18:23,039
actually introducing

00:18:20,240 --> 00:18:24,640
you know 500 or 600 vulnerabilities

00:18:23,039 --> 00:18:26,480
maybe more maybe less and this

00:18:24,640 --> 00:18:29,200
is this is just by getting that from

00:18:26,480 --> 00:18:30,880
node image so

00:18:29,200 --> 00:18:32,480
let's hack an application right let's go

00:18:30,880 --> 00:18:34,080
into this live session

00:18:32,480 --> 00:18:35,520
where i will take you through a process

00:18:34,080 --> 00:18:37,600
of how we're exploiting

00:18:35,520 --> 00:18:39,520
an open source library called marked

00:18:37,600 --> 00:18:40,880
which is a markdown library that i used

00:18:39,520 --> 00:18:41,520
to build an application a to-do

00:18:40,880 --> 00:18:43,280
application

00:18:41,520 --> 00:18:44,799
you can see kind of like how it is used

00:18:43,280 --> 00:18:46,559
between the application logic

00:18:44,799 --> 00:18:48,960
how it is used in the view to render

00:18:46,559 --> 00:18:49,760
data and we're going to take even a step

00:18:48,960 --> 00:18:51,360
further we're going to

00:18:49,760 --> 00:18:53,360
hack an application based on the fact

00:18:51,360 --> 00:18:55,280
that we have a vulnerable dependency in

00:18:53,360 --> 00:18:56,080
it specifically image magic as a way to

00:18:55,280 --> 00:18:57,840
convert

00:18:56,080 --> 00:19:00,160
images on the container itself on the

00:18:57,840 --> 00:19:01,760
application even more i'm going to show

00:19:00,160 --> 00:19:04,640
you how we are able

00:19:01,760 --> 00:19:06,559
to hack into an application based on a

00:19:04,640 --> 00:19:09,679
vulnerability that exists in a node

00:19:06,559 --> 00:19:11,520
version in a node.js runtime itself so

00:19:09,679 --> 00:19:13,919
hopefully you're ready for that and i'll

00:19:11,520 --> 00:19:15,600
be happy to have that uh session run as

00:19:13,919 --> 00:19:16,720
like an interactive one so if you wanted

00:19:15,600 --> 00:19:17,360
to take part if you wanted to ask

00:19:16,720 --> 00:19:18,799
questions

00:19:17,360 --> 00:19:20,559
if you wanted to engage i'll be asking

00:19:18,799 --> 00:19:21,679
you know here and there uh some you know

00:19:20,559 --> 00:19:23,840
for you some hints

00:19:21,679 --> 00:19:25,280
uh go ahead and use the q a box to just

00:19:23,840 --> 00:19:26,480
submit some questions for us and i'll be

00:19:25,280 --> 00:19:28,559
trying to uh

00:19:26,480 --> 00:19:30,240
do the live hack and monitor that at the

00:19:28,559 --> 00:19:31,679
same time and we'll be able to uh

00:19:30,240 --> 00:19:34,320
have a bit of an interactive session

00:19:31,679 --> 00:19:34,720
here so to get us started what i'll do

00:19:34,320 --> 00:19:38,240
first

00:19:34,720 --> 00:19:41,840
is run the app

00:19:38,240 --> 00:19:41,840
so for that we need to

00:19:42,720 --> 00:19:45,760
run mongodb as the database for the

00:19:44,559 --> 00:19:47,520
application

00:19:45,760 --> 00:19:51,039
uh it's a lot of logs which we don't

00:19:47,520 --> 00:19:51,039
care about but we go here and

00:19:51,280 --> 00:19:54,480
let me know that the app is running the

00:19:52,559 --> 00:19:55,120
database is running fine i'll be running

00:19:54,480 --> 00:19:58,240
the app

00:19:55,120 --> 00:20:00,720
it's available on port 3001 so we could

00:19:58,240 --> 00:20:00,720
go there

00:20:01,120 --> 00:20:06,080
there we go and we have the app running

00:20:03,360 --> 00:20:06,720
so as i said this is basically now for

00:20:06,080 --> 00:20:08,640
us

00:20:06,720 --> 00:20:10,080
a way to start investigating what is

00:20:08,640 --> 00:20:10,559
wrong with this application because it

00:20:10,080 --> 00:20:12,559
has

00:20:10,559 --> 00:20:14,240
a vulnerability in it that has a

00:20:12,559 --> 00:20:14,480
dependency that has a vulnerability in

00:20:14,240 --> 00:20:16,240
it

00:20:14,480 --> 00:20:18,840
so this says you know us we could say

00:20:16,240 --> 00:20:22,000
you know hi linux foundation

00:20:18,840 --> 00:20:24,480
folks right and it has

00:20:22,000 --> 00:20:26,320
marked which is a markdown library so

00:20:24,480 --> 00:20:28,320
i've started here before in this

00:20:26,320 --> 00:20:30,480
advisor thing which gives me a really

00:20:28,320 --> 00:20:31,520
good health score you know 100 uh 100

00:20:30,480 --> 00:20:34,720
this is pretty great

00:20:31,520 --> 00:20:36,640
it's pretty perfect anyway um this is

00:20:34,720 --> 00:20:38,640
fi almost five million weekly downloads

00:20:36,640 --> 00:20:40,240
this is getting you know really great uh

00:20:38,640 --> 00:20:41,840
numbers so i'll use this it looks you

00:20:40,240 --> 00:20:43,440
know very maintained very healthy

00:20:41,840 --> 00:20:45,600
and this is what i'll use and i've

00:20:43,440 --> 00:20:47,760
already added this to our project

00:20:45,600 --> 00:20:51,840
so uh you can see here have required it

00:20:47,760 --> 00:20:54,559
in the top in my require file and then

00:20:51,840 --> 00:20:55,600
and then we have a marked set option

00:20:54,559 --> 00:20:57,120
sanitize true

00:20:55,600 --> 00:20:59,360
so this is interesting from different

00:20:57,120 --> 00:21:01,840
perspective first of all if i hadn't

00:20:59,360 --> 00:21:03,280
done that what it meant is if i hadn't

00:21:01,840 --> 00:21:04,080
initialized like marked with any

00:21:03,280 --> 00:21:07,760
specific

00:21:04,080 --> 00:21:09,600
uh well sanitized or other options

00:21:07,760 --> 00:21:11,679
what would happen is it would actually

00:21:09,600 --> 00:21:14,799
uh initialize

00:21:11,679 --> 00:21:17,360
in an unsafe manner so at this point

00:21:14,799 --> 00:21:18,480
i am going to uh you know put all the

00:21:17,360 --> 00:21:21,039
security

00:21:18,480 --> 00:21:22,320
you know uh um gates that i can in here

00:21:21,039 --> 00:21:23,919
you know this is where i'm exposing it

00:21:22,320 --> 00:21:25,280
to the view and you know later on it is

00:21:23,919 --> 00:21:27,039
it is showing up there's

00:21:25,280 --> 00:21:28,480
so it could be things like maybe we want

00:21:27,039 --> 00:21:30,400
to add links like this isn't good

00:21:28,480 --> 00:21:33,039
examples of markdown right you can do

00:21:30,400 --> 00:21:33,039
something like this

00:21:33,440 --> 00:21:37,200
and there we go we have markdown turned

00:21:35,919 --> 00:21:38,640
into a link so this is

00:21:37,200 --> 00:21:40,559
the capability that we wanted to get

00:21:38,640 --> 00:21:42,400
from this markdown uh

00:21:40,559 --> 00:21:44,000
library which is of course i'm not gonna

00:21:42,400 --> 00:21:45,600
use you know write my own markdown

00:21:44,000 --> 00:21:47,760
parser so i have this and this is like

00:21:45,600 --> 00:21:50,799
the greatness of open source

00:21:47,760 --> 00:21:53,280
next i will try to exploit it so any

00:21:50,799 --> 00:21:55,919
ideas on what we could try next to maybe

00:21:53,280 --> 00:21:58,799
exploit this vulnerability

00:21:55,919 --> 00:22:00,320
would you maybe try something like this

00:21:58,799 --> 00:22:03,360
as one hint

00:22:00,320 --> 00:22:05,679
and as i said you could feel you know

00:22:03,360 --> 00:22:06,559
you could feel uh engaged to just put

00:22:05,679 --> 00:22:09,679
something in the q

00:22:06,559 --> 00:22:10,960
a if i try that what do you think will

00:22:09,679 --> 00:22:12,799
this work

00:22:10,960 --> 00:22:14,240
that's right well it didn't work it's

00:22:12,799 --> 00:22:16,240
not working because we're sanitizing

00:22:14,240 --> 00:22:18,240
remember we said we're going to sanitize

00:22:16,240 --> 00:22:20,159
all this input that we're getting so

00:22:18,240 --> 00:22:22,159
marked has this logic that anything that

00:22:20,159 --> 00:22:23,520
it gets it's going to try to sanitize it

00:22:22,159 --> 00:22:25,360
away

00:22:23,520 --> 00:22:26,960
so this didn't really work too well i

00:22:25,360 --> 00:22:27,760
can try something else for example i

00:22:26,960 --> 00:22:30,159
know that

00:22:27,760 --> 00:22:33,520
true links i can also add javascript so

00:22:30,159 --> 00:22:33,520
i could try something like this

00:22:35,760 --> 00:22:42,080
let's see if this works dot create alert

00:22:39,600 --> 00:22:43,600
okay so this is almost there we're

00:22:42,080 --> 00:22:45,039
trying to create an xss or cross-site

00:22:43,600 --> 00:22:45,919
scripting vulnerability here based on

00:22:45,039 --> 00:22:47,440
the fact that

00:22:45,919 --> 00:22:49,600
maybe the marked library that we're

00:22:47,440 --> 00:22:51,280
using is vulnerable um

00:22:49,600 --> 00:22:53,679
this doesn't work and there's a reason

00:22:51,280 --> 00:22:56,000
why it isn't working because of

00:22:53,679 --> 00:22:57,679
the fact that uh because of the fact

00:22:56,000 --> 00:23:00,240
that uh there are

00:22:57,679 --> 00:23:02,080
regexes inside the marked source code

00:23:00,240 --> 00:23:02,400
that remember we said sanitize true so

00:23:02,080 --> 00:23:04,799
it's

00:23:02,400 --> 00:23:06,400
looking at all of those uh you know

00:23:04,799 --> 00:23:07,840
things that we're trying like javascript

00:23:06,400 --> 00:23:09,120
call on something and it's you know

00:23:07,840 --> 00:23:11,280
sanitizing them away

00:23:09,120 --> 00:23:13,679
and i've got this great answer here from

00:23:11,280 --> 00:23:15,679
david acosta thank you we can try html

00:23:13,679 --> 00:23:17,679
encoded characters which means

00:23:15,679 --> 00:23:19,760
i can if it's looking for javascript

00:23:17,679 --> 00:23:22,320
colon something like any function that

00:23:19,760 --> 00:23:23,520
goes from it i can represent colon in a

00:23:22,320 --> 00:23:25,760
different way

00:23:23,520 --> 00:23:28,880
and these are called html entities so i

00:23:25,760 --> 00:23:31,520
can do something like this

00:23:28,880 --> 00:23:33,360
uh and 41 is the closing here and i can

00:23:31,520 --> 00:23:34,559
try and represent stuff that i know as

00:23:33,360 --> 00:23:35,280
you know maybe looking at the source

00:23:34,559 --> 00:23:37,360
code of marked

00:23:35,280 --> 00:23:40,480
i know they need to escape from them so

00:23:37,360 --> 00:23:42,880
let's try that and see what happens

00:23:40,480 --> 00:23:44,159
almost almost this is a great direction

00:23:42,880 --> 00:23:47,200
david thank you

00:23:44,159 --> 00:23:49,039
so for us what it means is it's not

00:23:47,200 --> 00:23:50,880
really game over because

00:23:49,039 --> 00:23:52,880
we can still try more things right

00:23:50,880 --> 00:23:54,640
marked is open source so i can see what

00:23:52,880 --> 00:23:55,919
the actual regex is trying to look at

00:23:54,640 --> 00:23:56,640
and i know there's another rejects

00:23:55,919 --> 00:23:58,960
because

00:23:56,640 --> 00:24:00,559
it looks for html entities so like the

00:23:58,960 --> 00:24:02,080
maintainers were thinking about this and

00:24:00,559 --> 00:24:03,039
they had like great you know security

00:24:02,080 --> 00:24:06,000
mindset here which is

00:24:03,039 --> 00:24:06,400
amazing so this is this is great but

00:24:06,000 --> 00:24:08,640
what

00:24:06,400 --> 00:24:10,000
what's actually missing what is what

00:24:08,640 --> 00:24:11,679
what kind of like you know

00:24:10,000 --> 00:24:13,279
the security bug here the vulnerability

00:24:11,679 --> 00:24:15,440
of manifests is

00:24:13,279 --> 00:24:17,039
if i if i'm going to represent and i'm

00:24:15,440 --> 00:24:18,640
going to make a slight change to the

00:24:17,039 --> 00:24:21,600
html id i'm going to use

00:24:18,640 --> 00:24:23,120
this uh this document or even like this

00:24:21,600 --> 00:24:24,720
as like a javascript you know this is a

00:24:23,120 --> 00:24:27,520
valid javascript keyword

00:24:24,720 --> 00:24:28,080
right if i use that this doesn't make

00:24:27,520 --> 00:24:30,400
sense

00:24:28,080 --> 00:24:32,320
as you know the whole string here

00:24:30,400 --> 00:24:34,240
doesn't make sense as an html entity so

00:24:32,320 --> 00:24:35,760
it passes the sanitization process and

00:24:34,240 --> 00:24:38,159
that is where the flow is at

00:24:35,760 --> 00:24:39,360
so it passes it and this you know mark

00:24:38,159 --> 00:24:41,120
says you know this is fine whatever you

00:24:39,360 --> 00:24:43,200
want with it just put it on the screen

00:24:41,120 --> 00:24:45,039
but the browser treats it as a different

00:24:43,200 --> 00:24:48,000
way maybe the browser allows this to

00:24:45,039 --> 00:24:49,840
actually execute javascript so let's try

00:24:48,000 --> 00:24:51,520
well first of all we're seeing uh to

00:24:49,840 --> 00:24:54,080
remind you like this is what we've

00:24:51,520 --> 00:24:54,960
just added and you can see that now we

00:24:54,080 --> 00:24:57,360
have a link

00:24:54,960 --> 00:24:58,480
and if i click on it then at this point

00:24:57,360 --> 00:25:00,720
we have basically

00:24:58,480 --> 00:25:01,919
had this uh you know established our

00:25:00,720 --> 00:25:02,559
exercise this is the cross-site

00:25:01,919 --> 00:25:04,799
scripting

00:25:02,559 --> 00:25:06,559
vulnerability that happens in marked in

00:25:04,799 --> 00:25:07,520
an open source library having millions

00:25:06,559 --> 00:25:09,120
of downloads

00:25:07,520 --> 00:25:10,480
in this version that i'm using that i

00:25:09,120 --> 00:25:11,840
know is vulnerable for this you know

00:25:10,480 --> 00:25:13,200
demonstration purposes but this is a

00:25:11,840 --> 00:25:14,240
real vulnerability in an open source

00:25:13,200 --> 00:25:16,640
package

00:25:14,240 --> 00:25:18,159
and this exploit for it is live now

00:25:16,640 --> 00:25:20,080
there's an interesting you know story

00:25:18,159 --> 00:25:21,679
here between this this library which is

00:25:20,080 --> 00:25:23,200
why i like you know repeating on this

00:25:21,679 --> 00:25:24,799
specific vulnerability because there's a

00:25:23,200 --> 00:25:26,799
story of open source here

00:25:24,799 --> 00:25:28,000
and you know let's go through this so if

00:25:26,799 --> 00:25:30,080
i go into my

00:25:28,000 --> 00:25:33,679
vulnerability database uh you know over

00:25:30,080 --> 00:25:35,279
here and i let me filter this for npm

00:25:33,679 --> 00:25:36,720
and i'll go ahead and do mark i want to

00:25:35,279 --> 00:25:38,559
search for this one specifically

00:25:36,720 --> 00:25:41,120
so it had over the times you know you

00:25:38,559 --> 00:25:43,520
know different kind of even 2020

00:25:41,120 --> 00:25:44,960
and uh you know i think i said something

00:25:43,520 --> 00:25:47,279
on 2021 as well

00:25:44,960 --> 00:25:48,960
last time yeah so even 2021 not so long

00:25:47,279 --> 00:25:50,480
ago different kind of vulnerabilities

00:25:48,960 --> 00:25:52,000
that we know we should be aware of

00:25:50,480 --> 00:25:53,520
uh but this one specifically which was

00:25:52,000 --> 00:25:56,720
you know fairly a few years back

00:25:53,520 --> 00:25:58,080
was discovered by matt austin and

00:25:56,720 --> 00:25:59,919
i want to show you what happens here

00:25:58,080 --> 00:26:03,679
because the way that it was discovered

00:25:59,919 --> 00:26:04,799
is they opened this this open source

00:26:03,679 --> 00:26:06,240
pull request to this

00:26:04,799 --> 00:26:08,320
repository you know saying there's an

00:26:06,240 --> 00:26:09,679
exercise suite no

00:26:08,320 --> 00:26:12,080
vulnerability here and there's like a

00:26:09,679 --> 00:26:14,080
great report and you know people are

00:26:12,080 --> 00:26:15,520
thumbs up right because this is a pool

00:26:14,080 --> 00:26:16,240
because it's not just an issue telling

00:26:15,520 --> 00:26:17,440
you know

00:26:16,240 --> 00:26:18,720
annoying the maintainer you know hey

00:26:17,440 --> 00:26:20,159
there's an issue to fix it this is

00:26:18,720 --> 00:26:21,440
really helpful this is for me as i

00:26:20,159 --> 00:26:22,159
mentioned when i want to merge this

00:26:21,440 --> 00:26:24,559
right this is

00:26:22,159 --> 00:26:25,679
it has tests and and uh and like for

00:26:24,559 --> 00:26:28,000
regression testing

00:26:25,679 --> 00:26:29,279
and it has uh the fix itself as well

00:26:28,000 --> 00:26:30,320
like everything is here for me just to

00:26:29,279 --> 00:26:32,159
go ahead and fix it

00:26:30,320 --> 00:26:33,760
but as is with open source right

00:26:32,159 --> 00:26:35,279
maintainers have their own lives and we

00:26:33,760 --> 00:26:37,360
can't expect them to hold them

00:26:35,279 --> 00:26:38,720
accountable for all of those things

00:26:37,360 --> 00:26:40,960
and this is part of the open source

00:26:38,720 --> 00:26:43,279
story where maybe maybe a pull request

00:26:40,960 --> 00:26:45,520
gets opened in 2015 but yet

00:26:43,279 --> 00:26:47,520
only got uh merged or released to

00:26:45,520 --> 00:26:49,200
production even if it's a security issue

00:26:47,520 --> 00:26:51,120
you know a year or later and this this

00:26:49,200 --> 00:26:52,320
is the problem right so there are ways

00:26:51,120 --> 00:26:53,600
to you know what do you do

00:26:52,320 --> 00:26:55,440
when you have this problem right what do

00:26:53,600 --> 00:26:57,360
you do when you cannot upgrade a library

00:26:55,440 --> 00:27:00,000
there's like no upgrade for this library

00:26:57,360 --> 00:27:01,440
at you know war at that point in time so

00:27:00,000 --> 00:27:02,480
sneak has this cool stuff like you know

00:27:01,440 --> 00:27:03,760
there's a patch

00:27:02,480 --> 00:27:04,960
and all of this is like fully available

00:27:03,760 --> 00:27:06,480
you could you know you could just you

00:27:04,960 --> 00:27:06,960
know view it and use it to continue the

00:27:06,480 --> 00:27:08,640
whole

00:27:06,960 --> 00:27:10,480
uh stick building if you didn't want to

00:27:08,640 --> 00:27:11,279
uh but we make it available so this is

00:27:10,480 --> 00:27:13,840
for you

00:27:11,279 --> 00:27:15,600
um now a patch that we take and you

00:27:13,840 --> 00:27:17,200
could just you know run like a sneak cli

00:27:15,600 --> 00:27:18,880
uh command sneak patch and if you have

00:27:17,200 --> 00:27:20,000
this it will go ahead and apply that

00:27:18,880 --> 00:27:22,159
patch if there's no no

00:27:20,000 --> 00:27:23,840
upgrade fix so this is a great story of

00:27:22,159 --> 00:27:24,240
like how open source connects how you

00:27:23,840 --> 00:27:25,360
know we

00:27:24,240 --> 00:27:27,600
you need to be on the bleeding edge

00:27:25,360 --> 00:27:28,799
sometimes there are no upgradeable fixes

00:27:27,600 --> 00:27:31,440
which is you know a whole story of

00:27:28,799 --> 00:27:34,320
itself but it's this is the story

00:27:31,440 --> 00:27:36,080
so hope you're having fun uh let's let's

00:27:34,320 --> 00:27:37,440
let's take this app aside you know and

00:27:36,080 --> 00:27:39,279
say you know hey let's

00:27:37,440 --> 00:27:41,279
this is running you know on my dev

00:27:39,279 --> 00:27:42,000
machine you know this is just npm run

00:27:41,279 --> 00:27:44,159
start on my

00:27:42,000 --> 00:27:45,840
uh dev machine let's go ahead and do run

00:27:44,159 --> 00:27:47,760
something in a container and you know

00:27:45,840 --> 00:27:49,360
if we had bundled application a

00:27:47,760 --> 00:27:51,039
container what could go wrong so

00:27:49,360 --> 00:27:52,399
i'll go ahead and stop sure my one going

00:27:51,039 --> 00:27:54,799
to be i'll go ahead

00:27:52,399 --> 00:27:56,320
stop the app i see that it stopped and

00:27:54,799 --> 00:27:59,120
i've got some slides

00:27:56,320 --> 00:27:59,600
of screens ready here so i will start

00:27:59,120 --> 00:28:03,919
with

00:27:59,600 --> 00:28:05,200
first of all as we need to do first um

00:28:03,919 --> 00:28:07,440
build a container but i want to show you

00:28:05,200 --> 00:28:10,480
first what is going on there so

00:28:07,440 --> 00:28:12,480
as we go over here we can see the actual

00:28:10,480 --> 00:28:13,840
uh container itself so this is my app

00:28:12,480 --> 00:28:15,279
it's a very small application the whole

00:28:13,840 --> 00:28:16,399
thing that it does this node app that i

00:28:15,279 --> 00:28:19,919
deploy to production

00:28:16,399 --> 00:28:22,320
on a containerized um instance

00:28:19,919 --> 00:28:23,679
is um i want to convert an image so i

00:28:22,320 --> 00:28:25,919
have this upload route

00:28:23,679 --> 00:28:26,799
that all of the app is exposed from this

00:28:25,919 --> 00:28:29,039
slash public

00:28:26,799 --> 00:28:30,640
um route as well and what i'm going to

00:28:29,039 --> 00:28:32,000
do is i'm going to spawn a command

00:28:30,640 --> 00:28:34,159
because i do not want to block the

00:28:32,000 --> 00:28:36,480
thread for the node.js application

00:28:34,159 --> 00:28:38,000
to do anything like you know synchronous

00:28:36,480 --> 00:28:42,000
here so i'm going to use this

00:28:38,000 --> 00:28:44,640
um i'm going to use this convert

00:28:42,000 --> 00:28:46,480
application that is built and available

00:28:44,640 --> 00:28:48,000
as image magic is on my container and

00:28:46,480 --> 00:28:49,120
then you know just go ahead and and

00:28:48,000 --> 00:28:50,640
resize the image

00:28:49,120 --> 00:28:52,000
this is my docker file it's pretty

00:28:50,640 --> 00:28:53,440
straight i didn't even have to install

00:28:52,000 --> 00:28:54,960
image magic this is just

00:28:53,440 --> 00:28:56,960
apparently it's available in this node

00:28:54,960 --> 00:28:57,520
image and yeah we're taking now uh you

00:28:56,960 --> 00:29:00,159
know the

00:28:57,520 --> 00:29:01,120
the the the time train we're traveling

00:29:00,159 --> 00:29:03,520
back in time

00:29:01,120 --> 00:29:04,720
back to where note 6 were live and if

00:29:03,520 --> 00:29:06,000
think about if you were running node

00:29:04,720 --> 00:29:07,279
applications back then as well

00:29:06,000 --> 00:29:09,039
you know what could have happened so

00:29:07,279 --> 00:29:11,039
this is just picking you know some uh

00:29:09,039 --> 00:29:12,399
you know some node image tag here

00:29:11,039 --> 00:29:14,799
and all of this is you know pretty

00:29:12,399 --> 00:29:15,520
pretty pretty simple so i'll go ahead

00:29:14,799 --> 00:29:17,919
and do

00:29:15,520 --> 00:29:19,200
um docker build which i've done before

00:29:17,919 --> 00:29:21,360
but it's always great to see that this

00:29:19,200 --> 00:29:23,279
is up to date and then i want to run

00:29:21,360 --> 00:29:26,399
this application so i've got

00:29:23,279 --> 00:29:28,240
this one

00:29:26,399 --> 00:29:29,600
different port there we go so this is

00:29:28,240 --> 00:29:30,320
going to run on this port and i call it

00:29:29,600 --> 00:29:32,080
rce

00:29:30,320 --> 00:29:34,000
you know what nrc that should give you a

00:29:32,080 --> 00:29:36,080
hint of like what is going to go

00:29:34,000 --> 00:29:37,840
on here so let's let's leave this up and

00:29:36,080 --> 00:29:40,720
move into

00:29:37,840 --> 00:29:41,200
this one okay so a new application as i

00:29:40,720 --> 00:29:44,240
said

00:29:41,200 --> 00:29:45,039
everything exists on slash public so i

00:29:44,240 --> 00:29:46,399
will open that

00:29:45,039 --> 00:29:48,240
and as you can see this is allowing us

00:29:46,399 --> 00:29:48,960
you know hello there upload an image to

00:29:48,240 --> 00:29:50,240
convert this

00:29:48,960 --> 00:29:52,240
so i can go ahead and upload the

00:29:50,240 --> 00:29:53,120
conversion of images so maybe i'll go

00:29:52,240 --> 00:29:56,320
ahead and choose one

00:29:53,120 --> 00:29:58,159
and i've got a few of them ready so

00:29:56,320 --> 00:30:00,120
hopefully you've uploaded something to

00:29:58,159 --> 00:30:02,240
social media i have something called

00:30:00,120 --> 00:30:03,440
rce1.jpg i mean that's that's just fine

00:30:02,240 --> 00:30:05,279
or should be fine right

00:30:03,440 --> 00:30:06,480
but before i do that i want to go into

00:30:05,279 --> 00:30:08,880
the container itself

00:30:06,480 --> 00:30:09,919
and tell you why that that might be an

00:30:08,880 --> 00:30:13,679
issue so

00:30:09,919 --> 00:30:17,279
let's go in and see first of all i will

00:30:13,679 --> 00:30:18,000
find my running container here and crc

00:30:17,279 --> 00:30:20,320
one

00:30:18,000 --> 00:30:22,399
and connect it and at this point on this

00:30:20,320 --> 00:30:24,159
side of the screen

00:30:22,399 --> 00:30:26,080
i want to show you the files that

00:30:24,159 --> 00:30:26,640
actually this is deployed in user source

00:30:26,080 --> 00:30:29,840
goof

00:30:26,640 --> 00:30:31,279
remember that's what we had um over here

00:30:29,840 --> 00:30:32,720
user source group this is the place

00:30:31,279 --> 00:30:34,240
where we deployed the application

00:30:32,720 --> 00:30:36,000
on this is the working directory on the

00:30:34,240 --> 00:30:37,919
container itself on the os

00:30:36,000 --> 00:30:39,279
and these are the files that exist in

00:30:37,919 --> 00:30:40,640
and this is you know what i showed you

00:30:39,279 --> 00:30:41,919
before the server.js everything there

00:30:40,640 --> 00:30:43,919
even the docker file is there

00:30:41,919 --> 00:30:45,200
this is not the best practice but this

00:30:43,919 --> 00:30:47,760
is great for our demo

00:30:45,200 --> 00:30:48,640
purposes so i have it here and what i

00:30:47,760 --> 00:30:50,080
want to do is

00:30:48,640 --> 00:30:52,000
resize this picture which is you know

00:30:50,080 --> 00:30:53,440
what makes sense as

00:30:52,000 --> 00:30:55,200
you know maybe a function that you want

00:30:53,440 --> 00:30:56,399
to build so

00:30:55,200 --> 00:30:57,600
looks like it's over looks like it's

00:30:56,399 --> 00:30:59,519
done and we have resized our

00:30:57,600 --> 00:31:00,799
applications but what is going on let me

00:30:59,519 --> 00:31:03,039
show you

00:31:00,799 --> 00:31:04,080
a difference here so as you can see on

00:31:03,039 --> 00:31:07,200
the right side here

00:31:04,080 --> 00:31:08,799
my my directory here is a little bit

00:31:07,200 --> 00:31:11,120
changed in terms of output

00:31:08,799 --> 00:31:12,880
of what you see here specifically what i

00:31:11,120 --> 00:31:13,600
want to call out is there's this new

00:31:12,880 --> 00:31:16,880
file

00:31:13,600 --> 00:31:18,080
called rce1 that was created on the

00:31:16,880 --> 00:31:20,000
running container

00:31:18,080 --> 00:31:21,440
which did not exist before as you can

00:31:20,000 --> 00:31:22,080
see on the top of it now why did that

00:31:21,440 --> 00:31:24,320
happen

00:31:22,080 --> 00:31:26,159
this is because we have an exploit oh

00:31:24,320 --> 00:31:27,120
there we go i'm already on the exploit

00:31:26,159 --> 00:31:29,840
directory

00:31:27,120 --> 00:31:30,640
and i will cut rce1 and show you what's

00:31:29,840 --> 00:31:34,799
going on there

00:31:30,640 --> 00:31:36,720
so essentially what we have is

00:31:34,799 --> 00:31:38,640
you probably you know haven't seen this

00:31:36,720 --> 00:31:40,720
one before it's not a very common uh

00:31:38,640 --> 00:31:41,760
way to create jpg files but it is

00:31:40,720 --> 00:31:44,000
supported it is

00:31:41,760 --> 00:31:45,600
a way that image magic is a library like

00:31:44,000 --> 00:31:46,240
i said a tooling for uh you know for

00:31:45,600 --> 00:31:48,000
linux

00:31:46,240 --> 00:31:49,519
uh to basically allow you to manipulate

00:31:48,000 --> 00:31:50,320
images in different ways and it has this

00:31:49,519 --> 00:31:52,320
feature called

00:31:50,320 --> 00:31:53,360
delegates where you could have not

00:31:52,320 --> 00:31:55,760
binary data

00:31:53,360 --> 00:31:57,600
but declarative text data that tells you

00:31:55,760 --> 00:31:59,279
how to build the image tells the convert

00:31:57,600 --> 00:32:00,000
the the image magical error to how to do

00:31:59,279 --> 00:32:01,600
it you have to create

00:32:00,000 --> 00:32:03,279
an image you you know define a

00:32:01,600 --> 00:32:04,480
resolution you say you know fill the

00:32:03,279 --> 00:32:06,159
image based on the

00:32:04,480 --> 00:32:08,240
this other source which you could you

00:32:06,159 --> 00:32:08,640
actually can provided this url source to

00:32:08,240 --> 00:32:11,600
do it

00:32:08,640 --> 00:32:14,399
you know over the wire or something but

00:32:11,600 --> 00:32:16,880
what it has is a vulnerability that

00:32:14,399 --> 00:32:18,240
does not check does not validate that

00:32:16,880 --> 00:32:20,320
this could be

00:32:18,240 --> 00:32:21,360
because this is offloaded to another

00:32:20,320 --> 00:32:23,679
command that

00:32:21,360 --> 00:32:26,000
image magic spawns it doesn't validate

00:32:23,679 --> 00:32:27,039
that this is a specific you know url and

00:32:26,000 --> 00:32:29,200
not something else

00:32:27,039 --> 00:32:30,320
but it what it does is it takes that you

00:32:29,200 --> 00:32:31,200
know we take it exploits that

00:32:30,320 --> 00:32:34,320
vulnerability

00:32:31,200 --> 00:32:36,640
and actually appends to it or adds to it

00:32:34,320 --> 00:32:39,360
this uh command execution that is touch

00:32:36,640 --> 00:32:41,760
rca one touch is a is a unix command

00:32:39,360 --> 00:32:43,200
that creates a file called rca1 and

00:32:41,760 --> 00:32:44,640
that's why we have it here with the size

00:32:43,200 --> 00:32:46,559
of zero because we just touched it we

00:32:44,640 --> 00:32:49,279
just created nothing else except that

00:32:46,559 --> 00:32:50,399
but by the fact that we were running a

00:32:49,279 --> 00:32:53,440
vulnerable

00:32:50,399 --> 00:32:55,760
version of a dependency in a container

00:32:53,440 --> 00:32:57,360
right this is this is nothing to do with

00:32:55,760 --> 00:32:58,880
the application itself

00:32:57,360 --> 00:33:00,640
the fact that we had a vulnerable

00:32:58,880 --> 00:33:01,600
version of a container here of a

00:33:00,640 --> 00:33:03,440
dependency or

00:33:01,600 --> 00:33:05,440
image magic which may you wouldn't know

00:33:03,440 --> 00:33:06,960
about it at all if you've seen this one

00:33:05,440 --> 00:33:08,720
this had introduced a vulnerability here

00:33:06,960 --> 00:33:10,240
that we have exploited and

00:33:08,720 --> 00:33:12,000
you know the code here there's no issue

00:33:10,240 --> 00:33:13,840
with it with the dependencies here

00:33:12,000 --> 00:33:15,360
there's no issue with like you know code

00:33:13,840 --> 00:33:17,360
uh security issues here

00:33:15,360 --> 00:33:19,679
that allowed that to happen this is just

00:33:17,360 --> 00:33:21,120
the fact that we have relied on a

00:33:19,679 --> 00:33:23,279
specific dependency

00:33:21,120 --> 00:33:24,399
in a vulnerable container now how do you

00:33:23,279 --> 00:33:28,080
manage all of those things

00:33:24,399 --> 00:33:29,679
so if you were talking about um you know

00:33:28,080 --> 00:33:31,279
scanning your applications right this is

00:33:29,679 --> 00:33:32,960
the you know me scanning this goof

00:33:31,279 --> 00:33:34,960
application that i showed you before

00:33:32,960 --> 00:33:36,480
and this is the dependencies right so i

00:33:34,960 --> 00:33:37,840
can see the dependency tree i can look

00:33:36,480 --> 00:33:40,480
at you know other dependencies and

00:33:37,840 --> 00:33:41,279
remediation and i can see that marked is

00:33:40,480 --> 00:33:42,720
you know having

00:33:41,279 --> 00:33:44,320
vulnerabilities in it and i can go ahead

00:33:42,720 --> 00:33:45,600
and fix this and if i do it you know

00:33:44,320 --> 00:33:46,399
i'll get this automatic pull request

00:33:45,600 --> 00:33:48,000
that fixes it

00:33:46,399 --> 00:33:49,360
uh if i don't you know if you just set

00:33:48,000 --> 00:33:50,159
it up to uh to just fix your

00:33:49,360 --> 00:33:51,760
dependencies

00:33:50,159 --> 00:33:53,120
so this is a great way of understanding

00:33:51,760 --> 00:33:54,720
your dependency tree and all the

00:33:53,120 --> 00:33:56,480
problems that happen from it

00:33:54,720 --> 00:33:58,080
uh you know but even more interestingly

00:33:56,480 --> 00:33:58,720
is you know the ability to know how to

00:33:58,080 --> 00:34:00,399
remediate

00:33:58,720 --> 00:34:02,000
this problem from you know what you need

00:34:00,399 --> 00:34:02,640
to upgrade and what problems does it

00:34:02,000 --> 00:34:04,240
solve

00:34:02,640 --> 00:34:05,840
the other thing is the container side

00:34:04,240 --> 00:34:07,840
right we've we're running node

00:34:05,840 --> 00:34:10,000
six it's quite a specific base image of

00:34:07,840 --> 00:34:12,480
it which has 800 vulnerabilities again

00:34:10,000 --> 00:34:14,000
if i look for image magic that's here so

00:34:12,480 --> 00:34:16,960
what do i do with all of those

00:34:14,000 --> 00:34:18,639
i know what is it like hundreds of

00:34:16,960 --> 00:34:20,079
vulnerabilities in image magic how do i

00:34:18,639 --> 00:34:21,839
know what to move into

00:34:20,079 --> 00:34:23,119
so maybe something gives me an advice

00:34:21,839 --> 00:34:24,240
what to move into but i'll get to that

00:34:23,119 --> 00:34:25,760
in a second because

00:34:24,240 --> 00:34:28,240
i showed you how we can do it from the

00:34:25,760 --> 00:34:29,679
from the from the uh the upside

00:34:28,240 --> 00:34:31,280
and the container side but actually i

00:34:29,679 --> 00:34:33,119
want to take it a little bit further

00:34:31,280 --> 00:34:34,639
i want to talk about what happens when

00:34:33,119 --> 00:34:36,720
the node runtime

00:34:34,639 --> 00:34:38,320
is problematic so what i mean by

00:34:36,720 --> 00:34:41,040
problematic is you know vulnerable

00:34:38,320 --> 00:34:42,240
so for us to make that uh to make that

00:34:41,040 --> 00:34:43,760
happen what we need to do is first of

00:34:42,240 --> 00:34:45,679
all build a container so

00:34:43,760 --> 00:34:47,440
let's say you know that now node selects

00:34:45,679 --> 00:34:50,720
is vulnerable so i'll go

00:34:47,440 --> 00:34:53,280
out of this and i'll first of all start

00:34:50,720 --> 00:34:54,480
i stop my containers uh my container is

00:34:53,280 --> 00:34:57,280
running here

00:34:54,480 --> 00:34:58,000
there we go it's all stopped and i will

00:34:57,280 --> 00:35:00,720
go ahead now

00:34:58,000 --> 00:35:02,320
and say hey um you know this is remember

00:35:00,720 --> 00:35:03,680
this is us back in time back in the days

00:35:02,320 --> 00:35:04,400
where there was note 6 and maybe you had

00:35:03,680 --> 00:35:06,480
that running

00:35:04,400 --> 00:35:08,240
in some microservice and you're saying

00:35:06,480 --> 00:35:10,160
well you know now this is have like a

00:35:08,240 --> 00:35:12,000
new version like the the new lts

00:35:10,160 --> 00:35:13,280
is eight right let's use node eight

00:35:12,000 --> 00:35:14,880
let's use node eight

00:35:13,280 --> 00:35:16,640
zero five that's like the newest that's

00:35:14,880 --> 00:35:18,079
like the latest version of this table it

00:35:16,640 --> 00:35:19,440
has all the fixes everything in it

00:35:18,079 --> 00:35:20,960
maybe maybe it doesn't i don't know but

00:35:19,440 --> 00:35:22,240
you could have made that decision to

00:35:20,960 --> 00:35:24,640
move from node six

00:35:22,240 --> 00:35:25,839
to node eight five zero let's see what

00:35:24,640 --> 00:35:27,839
happens when we do that

00:35:25,839 --> 00:35:29,040
so i will go ahead and need to now

00:35:27,839 --> 00:35:30,880
rebuild this

00:35:29,040 --> 00:35:32,160
uh this the same app we're going to

00:35:30,880 --> 00:35:35,200
rebuild it

00:35:32,160 --> 00:35:35,200
so docker build

00:35:35,680 --> 00:35:45,839
there we go

00:35:46,400 --> 00:35:51,599
yep done so once we've rebuilt it the

00:35:49,760 --> 00:35:53,119
uh the docker image now we can go ahead

00:35:51,599 --> 00:35:54,480
and run it we're gonna do the same thing

00:35:53,119 --> 00:35:58,480
as we've done before

00:35:54,480 --> 00:35:59,680
this is the same app let's see if this

00:35:58,480 --> 00:36:01,280
works

00:35:59,680 --> 00:36:02,880
okay this is the same app and you know

00:36:01,280 --> 00:36:04,880
it now doesn't really have the other

00:36:02,880 --> 00:36:06,400
vulnerability of image magic because

00:36:04,880 --> 00:36:08,400
we have used a new version of image

00:36:06,400 --> 00:36:09,040
magic in that you know node eight five

00:36:08,400 --> 00:36:10,800
zero

00:36:09,040 --> 00:36:12,400
so we have migrated out of one

00:36:10,800 --> 00:36:13,920
vulnerability but what happens

00:36:12,400 --> 00:36:15,599
with the node runtime itself which is

00:36:13,920 --> 00:36:18,079
another concern that you should have

00:36:15,599 --> 00:36:19,839
so if you're using slash public maybe

00:36:18,079 --> 00:36:20,800
you want to try different ways of you

00:36:19,839 --> 00:36:22,480
know runtimes have

00:36:20,800 --> 00:36:24,560
issues some of them could be you know

00:36:22,480 --> 00:36:26,240
redos attacks or you know just denial of

00:36:24,560 --> 00:36:28,560
services of different kinds

00:36:26,240 --> 00:36:29,839
of or maybe you know https related

00:36:28,560 --> 00:36:31,040
issues and you know leaking of

00:36:29,839 --> 00:36:32,880
information and things like that like

00:36:31,040 --> 00:36:34,960
memory issues and stuff that have been

00:36:32,880 --> 00:36:36,640
also hitting node in the past one of the

00:36:34,960 --> 00:36:37,839
other things could be a patch reversal

00:36:36,640 --> 00:36:39,280
that maybe your own time

00:36:37,839 --> 00:36:41,119
the runtime is not managing that

00:36:39,280 --> 00:36:41,520
correctly so what we could actually do

00:36:41,119 --> 00:36:44,400
here

00:36:41,520 --> 00:36:45,119
is you know try and traverse this tree

00:36:44,400 --> 00:36:46,880
like that

00:36:45,119 --> 00:36:48,240
which as you can see doesn't really work

00:36:46,880 --> 00:36:51,119
too well if i do it

00:36:48,240 --> 00:36:52,800
from here but if you have any idea how i

00:36:51,119 --> 00:36:55,839
can do it from here

00:36:52,800 --> 00:36:57,599
um let me say uh monitor my my question

00:36:55,839 --> 00:36:58,000
box to you okay go ahead and suggest but

00:36:57,599 --> 00:37:00,000
i'll

00:36:58,000 --> 00:37:01,359
just go run into it with this uh in the

00:37:00,000 --> 00:37:03,920
meanwhile and that is

00:37:01,359 --> 00:37:05,280
maybe i want to go ahead and and try

00:37:03,920 --> 00:37:06,240
something similar to what we did with

00:37:05,280 --> 00:37:08,880
mark which is

00:37:06,240 --> 00:37:10,079
i'll go ahead and url encode those dot

00:37:08,880 --> 00:37:13,440
dots so a dot

00:37:10,079 --> 00:37:15,680
is the two percent e so two percent e

00:37:13,440 --> 00:37:16,880
and you can see i've already like tried

00:37:15,680 --> 00:37:18,960
this a while ago

00:37:16,880 --> 00:37:20,079
and this is basically the way for me to

00:37:18,960 --> 00:37:22,880
traverse the tree

00:37:20,079 --> 00:37:24,079
uh of the directories back inside as if

00:37:22,880 --> 00:37:26,000
this was running

00:37:24,079 --> 00:37:28,000
inside of of the container itself so the

00:37:26,000 --> 00:37:30,240
container has

00:37:28,000 --> 00:37:31,920
the slash public as the root directory

00:37:30,240 --> 00:37:33,599
but we want to traverse far

00:37:31,920 --> 00:37:35,200
out of it because we want to see the

00:37:33,599 --> 00:37:35,599
package json we want to see the you know

00:37:35,200 --> 00:37:37,920
dot

00:37:35,599 --> 00:37:39,599
n file that you may have api keys we

00:37:37,920 --> 00:37:41,119
want to see uh you know different things

00:37:39,599 --> 00:37:41,599
that you know might be telling us you

00:37:41,119 --> 00:37:43,520
know as

00:37:41,599 --> 00:37:44,640
attackers for this might be telling us

00:37:43,520 --> 00:37:45,599
you know more information of how we

00:37:44,640 --> 00:37:46,960
could hack in

00:37:45,599 --> 00:37:48,240
so the way that we're doing it is we're

00:37:46,960 --> 00:37:48,640
basically you know two percent day two

00:37:48,240 --> 00:37:51,119
percent

00:37:48,640 --> 00:37:52,240
we're now traversing up the tree we're

00:37:51,119 --> 00:37:55,839
using a bit of a

00:37:52,240 --> 00:37:58,079
of a logic uh um um magic here

00:37:55,839 --> 00:38:00,720
to to exploit a vulnerability related to

00:37:58,079 --> 00:38:02,800
patch reversal in the node.js runtime

00:38:00,720 --> 00:38:04,079
and if i run it this is basically now

00:38:02,800 --> 00:38:08,240
the output

00:38:04,079 --> 00:38:10,960
of the etcd sorry the atc password

00:38:08,240 --> 00:38:12,960
of the running container of the node

00:38:10,960 --> 00:38:15,680
inside like this node application

00:38:12,960 --> 00:38:17,760
so i this is nothing to do with

00:38:15,680 --> 00:38:18,800
dependencies on the container this has

00:38:17,760 --> 00:38:22,000
nothing to do with

00:38:18,800 --> 00:38:23,440
my my code being bad like over over here

00:38:22,000 --> 00:38:24,240
nothing to do with this i've basically

00:38:23,440 --> 00:38:27,040
just created

00:38:24,240 --> 00:38:27,599
a public route here with express known

00:38:27,040 --> 00:38:30,960
uh

00:38:27,599 --> 00:38:33,280
framework for node.js but i am taking

00:38:30,960 --> 00:38:35,280
advantage of exploiting a vulnerability

00:38:33,280 --> 00:38:37,280
in the node.js runtime so this is

00:38:35,280 --> 00:38:39,119
the case of traversing from the top to

00:38:37,280 --> 00:38:40,640
the bottom and i want to go

00:38:39,119 --> 00:38:42,960
back into our slide and continue this

00:38:40,640 --> 00:38:42,960
story

00:38:43,839 --> 00:38:48,000
so hopefully that was fun right but what

00:38:46,800 --> 00:38:49,280
can i do about it and i'm pretty sure

00:38:48,000 --> 00:38:50,560
that this is you know kind of like you

00:38:49,280 --> 00:38:51,920
know what could i do with this

00:38:50,560 --> 00:38:54,000
but first of all i want to give you you

00:38:51,920 --> 00:38:56,000
know a bit of like references here so

00:38:54,000 --> 00:38:58,079
what we've what we've exploited on the

00:38:56,000 --> 00:38:59,440
container side was this improper input

00:38:58,079 --> 00:39:01,920
validation

00:38:59,440 --> 00:39:03,680
a cve you know a vulnerability report

00:39:01,920 --> 00:39:05,040
that came out for image magic and this

00:39:03,680 --> 00:39:07,599
is you know very very real

00:39:05,040 --> 00:39:08,160
uh but it is also very easy to miss as a

00:39:07,599 --> 00:39:09,760
problem

00:39:08,160 --> 00:39:11,440
first of all like the cvs score is not

00:39:09,760 --> 00:39:13,359
like a 10 right which is shouting

00:39:11,440 --> 00:39:14,800
uh the cve report doesn't mention you

00:39:13,359 --> 00:39:16,240
know remote command execution or

00:39:14,800 --> 00:39:17,040
whatever you could do it is this is just

00:39:16,240 --> 00:39:19,119
improper

00:39:17,040 --> 00:39:20,079
input validation and it looks as if this

00:39:19,119 --> 00:39:23,280
is you know

00:39:20,079 --> 00:39:24,960
maybe not so uh not so significant but

00:39:23,280 --> 00:39:27,920
as you saw it is i could run

00:39:24,960 --> 00:39:29,760
commands on the running container and to

00:39:27,920 --> 00:39:31,200
give you an example of like why i chose

00:39:29,760 --> 00:39:32,960
specifically to use a story here a

00:39:31,200 --> 00:39:35,119
demonstration that uses image magic and

00:39:32,960 --> 00:39:36,720
node.js to spawn commands because this

00:39:35,119 --> 00:39:38,000
is something that people do this is

00:39:36,720 --> 00:39:40,160
something that people may

00:39:38,000 --> 00:39:42,000
may do as like a job server or something

00:39:40,160 --> 00:39:43,680
else and this is like a screenshot i got

00:39:42,000 --> 00:39:46,079
from youtube of a video from

00:39:43,680 --> 00:39:47,520
google i o you know 2017 event where

00:39:46,079 --> 00:39:49,119
they demonstrated you know a similar

00:39:47,520 --> 00:39:49,599
capability you know live there on the

00:39:49,119 --> 00:39:51,280
stage

00:39:49,599 --> 00:39:52,960
you know doing the exact same thing

00:39:51,280 --> 00:39:56,240
right so this is a very common

00:39:52,960 --> 00:39:59,359
uh you know way to do things like

00:39:56,240 --> 00:40:02,079
converting images if you wanted to

00:39:59,359 --> 00:40:03,680
but we need a way to to help developers

00:40:02,079 --> 00:40:04,720
understand that we need you know why do

00:40:03,680 --> 00:40:07,040
developers you know

00:40:04,720 --> 00:40:09,040
think that that could be vulnerable so

00:40:07,040 --> 00:40:11,599
like like an application to image magic

00:40:09,040 --> 00:40:13,200
so tooling like this makes it easy right

00:40:11,599 --> 00:40:15,359
it shows you this layer

00:40:13,200 --> 00:40:17,119
of you know layer level indication of

00:40:15,359 --> 00:40:17,920
where this is coming from this says

00:40:17,119 --> 00:40:19,359
maybe me doing

00:40:17,920 --> 00:40:20,640
optical install image magic and if it's

00:40:19,359 --> 00:40:21,839
coming from somewhere else like the base

00:40:20,640 --> 00:40:24,160
image it will tell you

00:40:21,839 --> 00:40:25,760
it correlates the docker file run and

00:40:24,160 --> 00:40:27,119
whatever directives you have there

00:40:25,760 --> 00:40:28,640
with the actual vulnerabilities

00:40:27,119 --> 00:40:30,160
themselves so you know where to look for

00:40:28,640 --> 00:40:32,160
the problem itself

00:40:30,160 --> 00:40:33,760
but even so right so how do you fix it

00:40:32,160 --> 00:40:35,680
like i i told you there's a there's like

00:40:33,760 --> 00:40:36,079
you know 862 vulnerabilities in this

00:40:35,680 --> 00:40:38,400
node

00:40:36,079 --> 00:40:40,160
10 image what do you do about it i i

00:40:38,400 --> 00:40:43,520
searched docker hub before

00:40:40,160 --> 00:40:45,520
and it has almost 4 000 different node

00:40:43,520 --> 00:40:48,560
image types which one should you move to

00:40:45,520 --> 00:40:49,680
to 10 5 to 10 16 to 12 something you

00:40:48,560 --> 00:40:50,960
have no idea right

00:40:49,680 --> 00:40:53,040
and this is where we're trying to be

00:40:50,960 --> 00:40:54,400
helpful so you have no idea if a new

00:40:53,040 --> 00:40:55,760
version is going to be you know having

00:40:54,400 --> 00:40:56,800
you know more vulnerabilities less

00:40:55,760 --> 00:40:58,160
what's going to happen there

00:40:56,800 --> 00:40:59,359
this is where the tooling really helps

00:40:58,160 --> 00:41:00,160
you this is where developer first

00:40:59,359 --> 00:41:02,560
security

00:41:00,160 --> 00:41:04,800
really shines because it gives you this

00:41:02,560 --> 00:41:06,319
data based recommendation that tells you

00:41:04,800 --> 00:41:08,560
hey there are this is the image that

00:41:06,319 --> 00:41:10,400
you're using 862 vulnerabilities

00:41:08,560 --> 00:41:12,560
but you can move into a different you

00:41:10,400 --> 00:41:13,280
know kind of like base image you could

00:41:12,560 --> 00:41:15,200
upgrade

00:41:13,280 --> 00:41:17,040
to maybe node 12 or you could just stay

00:41:15,200 --> 00:41:18,319
at node 10 but use an alternative

00:41:17,040 --> 00:41:20,240
you know image that's like a little bit

00:41:18,319 --> 00:41:21,760
smaller has less dependency footprint

00:41:20,240 --> 00:41:22,880
maybe that's just enough for you to run

00:41:21,760 --> 00:41:26,079
your applications

00:41:22,880 --> 00:41:27,599
so you know we talked about code

00:41:26,079 --> 00:41:29,440
right you writing your own code like

00:41:27,599 --> 00:41:29,760
this kind of lines of code of what i had

00:41:29,440 --> 00:41:31,040
here

00:41:29,760 --> 00:41:33,040
and we talked about using open source

00:41:31,040 --> 00:41:34,079
dependencies and the you know the issues

00:41:33,040 --> 00:41:35,760
that they may have

00:41:34,079 --> 00:41:38,160
and we talked about your container right

00:41:35,760 --> 00:41:39,920
and your dependencies run time uh

00:41:38,160 --> 00:41:42,079
as well all of this that we've talked

00:41:39,920 --> 00:41:44,000
about but why did we miss out

00:41:42,079 --> 00:41:45,920
we talked about all of those things but

00:41:44,000 --> 00:41:47,520
how do you deploy how do you deploy and

00:41:45,920 --> 00:41:48,319
orchestrate your applications you know

00:41:47,520 --> 00:41:50,480
in production

00:41:48,319 --> 00:41:52,319
in deployment time that that's the thing

00:41:50,480 --> 00:41:53,520
right there right we have commoditized

00:41:52,319 --> 00:41:55,359
infrastructure

00:41:53,520 --> 00:41:56,640
in the form of code and i can hear you

00:41:55,359 --> 00:41:58,000
know the thoughts in your brain running

00:41:56,640 --> 00:41:59,280
around you know asking me for examples

00:41:58,000 --> 00:42:01,839
what i mean by that so

00:41:59,280 --> 00:42:03,359
let me show you your infrastructure code

00:42:01,839 --> 00:42:04,560
whether you're doing kubernetes

00:42:03,359 --> 00:42:06,560
day-to-day whether you're

00:42:04,560 --> 00:42:07,920
using you know docker whether you're uh

00:42:06,560 --> 00:42:10,000
you know a google compute fan

00:42:07,920 --> 00:42:11,599
using firebase maybe you're a you know

00:42:10,000 --> 00:42:12,640
front-end developer deploying to you

00:42:11,599 --> 00:42:14,240
know to the cloud to

00:42:12,640 --> 00:42:15,920
you know the front-end cloud if you've

00:42:14,240 --> 00:42:16,400
ever run any of these commands in the

00:42:15,920 --> 00:42:18,000
past

00:42:16,400 --> 00:42:19,599
then you have taken advantage of

00:42:18,000 --> 00:42:22,319
infrastructure as code

00:42:19,599 --> 00:42:22,800
and you are effectively now hello you

00:42:22,319 --> 00:42:24,880
yes

00:42:22,800 --> 00:42:27,359
you are a cloud native application

00:42:24,880 --> 00:42:29,280
developer and that means you need to

00:42:27,359 --> 00:42:30,560
basically concern yourselves with

00:42:29,280 --> 00:42:31,920
everything related to cloud native

00:42:30,560 --> 00:42:33,359
application security

00:42:31,920 --> 00:42:35,599
and this is really the last piece of

00:42:33,359 --> 00:42:37,280
this puzzle right this is the bottom of

00:42:35,599 --> 00:42:39,520
the iceberg an entire application

00:42:37,280 --> 00:42:42,560
orchestrated using the power of code

00:42:39,520 --> 00:42:44,400
and why are we even discussing you know

00:42:42,560 --> 00:42:45,680
these kind of things right because these

00:42:44,400 --> 00:42:46,800
are nowadays you know the cloud

00:42:45,680 --> 00:42:48,960
infrastructure that has been

00:42:46,800 --> 00:42:49,920
completely obstructed a ways uh you know

00:42:48,960 --> 00:42:52,000
from you know

00:42:49,920 --> 00:42:54,079
anything the hardware based into into

00:42:52,000 --> 00:42:56,160
the form of code where we can deploy it

00:42:54,079 --> 00:42:57,520
as fast as we're deploying code we're

00:42:56,160 --> 00:42:59,920
deploying

00:42:57,520 --> 00:43:01,119
infrastructure at the same time those

00:42:59,920 --> 00:43:03,359
mistakes that we make

00:43:01,119 --> 00:43:04,480
in configuration are the number one

00:43:03,359 --> 00:43:07,520
cloud vulnerability

00:43:04,480 --> 00:43:08,960
as is identified by the nsa so

00:43:07,520 --> 00:43:11,200
let me give you some examples for this

00:43:08,960 --> 00:43:13,119
this is a firebase configuration that

00:43:11,200 --> 00:43:14,079
adds a rule so that only authenticated

00:43:13,119 --> 00:43:15,839
users can

00:43:14,079 --> 00:43:17,280
view or create documents this is a you

00:43:15,839 --> 00:43:18,880
know this is a good story that i have

00:43:17,280 --> 00:43:20,880
from like a real life application

00:43:18,880 --> 00:43:22,240
it's a really use case where this was

00:43:20,880 --> 00:43:23,280
the security image configuration because

00:43:22,240 --> 00:43:25,040
what's going on here

00:43:23,280 --> 00:43:27,119
there is no authorization implemented

00:43:25,040 --> 00:43:29,040
there is authentication but notarization

00:43:27,119 --> 00:43:31,119
so the fact that this is you know there

00:43:29,040 --> 00:43:32,880
for you built you know by default

00:43:31,119 --> 00:43:34,480
doesn't mean that it's you know with

00:43:32,880 --> 00:43:35,440
security by default enabling and

00:43:34,480 --> 00:43:37,440
protecting you

00:43:35,440 --> 00:43:38,720
and maybe you have disabled uh sorry

00:43:37,440 --> 00:43:41,440
maybe you have uh

00:43:38,720 --> 00:43:41,920
enabled only uh specific users to log in

00:43:41,440 --> 00:43:44,560
but you

00:43:41,920 --> 00:43:45,440
forgot to disable registration all of

00:43:44,560 --> 00:43:47,440
those are

00:43:45,440 --> 00:43:49,440
really ways for someone else that if you

00:43:47,440 --> 00:43:51,520
have done any cloud misconfigurations

00:43:49,440 --> 00:43:53,440
here for them to basically exploit those

00:43:51,520 --> 00:43:55,280
uh those uh you know concerns that you

00:43:53,440 --> 00:43:57,040
have missed

00:43:55,280 --> 00:43:58,880
i'll take you to a kubernetes example

00:43:57,040 --> 00:44:00,720
it's where there is a partial kubernetes

00:43:58,880 --> 00:44:03,119
symbol file that will deploy a pod

00:44:00,720 --> 00:44:04,640
that the you know the full you know this

00:44:03,119 --> 00:44:05,680
is just part of it but the full one

00:44:04,640 --> 00:44:07,599
deploys just fine

00:44:05,680 --> 00:44:09,839
the only problem is it's missing out

00:44:07,599 --> 00:44:12,319
some crucial security related hardening

00:44:09,839 --> 00:44:14,160
that is not turned on by default one of

00:44:12,319 --> 00:44:16,160
those issues with kubernetes is this

00:44:14,160 --> 00:44:18,720
thing called the security context which

00:44:16,160 --> 00:44:20,560
if you are missing it then it allows you

00:44:18,720 --> 00:44:21,280
to run application without root user

00:44:20,560 --> 00:44:24,079
control

00:44:21,280 --> 00:44:25,680
and this bud level you know directive

00:44:24,079 --> 00:44:26,240
now fixed it the fact that i added it

00:44:25,680 --> 00:44:28,640
but

00:44:26,240 --> 00:44:30,480
i have no idea like i'm not a kubernetes

00:44:28,640 --> 00:44:32,079
engineer i'm just a developer so

00:44:30,480 --> 00:44:33,920
how do i know if i have more issues i

00:44:32,079 --> 00:44:34,960
don't know about dishes like who knows

00:44:33,920 --> 00:44:36,480
this stuff

00:44:34,960 --> 00:44:38,240
so that's why we need again those

00:44:36,480 --> 00:44:38,960
developers security platforms because

00:44:38,240 --> 00:44:40,880
they point

00:44:38,960 --> 00:44:42,400
out the issues in the forum that we

00:44:40,880 --> 00:44:44,319
developers understand them

00:44:42,400 --> 00:44:45,520
and that they are showing us how to fix

00:44:44,319 --> 00:44:47,040
them and you know why are they

00:44:45,520 --> 00:44:48,400
even happening and where they happening

00:44:47,040 --> 00:44:49,599
now within this code because like

00:44:48,400 --> 00:44:53,119
everything has now been

00:44:49,599 --> 00:44:55,359
abstracted away into that form so

00:44:53,119 --> 00:44:57,280
i would like to leave you off with you

00:44:55,359 --> 00:44:59,280
know several takeaways here right

00:44:57,280 --> 00:45:01,119
uh one of them is you know connect your

00:44:59,280 --> 00:45:02,160
source code repositories to continuously

00:45:01,119 --> 00:45:04,720
scan them

00:45:02,160 --> 00:45:05,920
i want you to connect your container

00:45:04,720 --> 00:45:07,680
image registries always you can

00:45:05,920 --> 00:45:09,839
continuously scan them as well

00:45:07,680 --> 00:45:11,520
and have this uh you know uh not have

00:45:09,839 --> 00:45:13,040
that riff like continuously monitor what

00:45:11,520 --> 00:45:15,280
you have deployed as well as what you

00:45:13,040 --> 00:45:16,880
have in your source code repositories

00:45:15,280 --> 00:45:18,800
if you can you know prefer minimal based

00:45:16,880 --> 00:45:19,760
images cure based images however you're

00:45:18,800 --> 00:45:21,920
managing those

00:45:19,760 --> 00:45:23,839
but you know be able to act with some

00:45:21,920 --> 00:45:24,560
kind of image based image recommendation

00:45:23,839 --> 00:45:26,000
advice or you

00:45:24,560 --> 00:45:27,760
if there's a vulnerability that comes

00:45:26,000 --> 00:45:31,280
into life you know

00:45:27,760 --> 00:45:32,720
where to move to very fast and lastly no

00:45:31,280 --> 00:45:34,800
don't forget your infrastructure it

00:45:32,720 --> 00:45:37,040
is just as vulnerable and take measures

00:45:34,800 --> 00:45:38,880
to monitor it and fix it

00:45:37,040 --> 00:45:40,160
so this is our session i want to you

00:45:38,880 --> 00:45:42,000
know uh

00:45:40,160 --> 00:45:43,520
you know wish you a safe journey here in

00:45:42,000 --> 00:45:45,119
this like cloud idea of application

00:45:43,520 --> 00:45:47,040
security space because you're all

00:45:45,119 --> 00:45:48,319
cloud native application developers and

00:45:47,040 --> 00:45:49,520
uh there are some resources here and

00:45:48,319 --> 00:45:49,839
we'll share them there's like a lot of

00:45:49,520 --> 00:45:51,119
uh

00:45:49,839 --> 00:45:53,040
security cheat sheets on how to do

00:45:51,119 --> 00:45:54,800
things uh the right way in different

00:45:53,040 --> 00:45:55,440
contexts of technologies you can find

00:45:54,800 --> 00:45:58,400
them on this

00:45:55,440 --> 00:45:59,200
sneak io dot slash uh blog and with this

00:45:58,400 --> 00:46:01,680
i'll go ahead and

00:45:59,200 --> 00:46:04,800
let's let's go to the questions say some

00:46:01,680 --> 00:46:04,800
of them are already there

00:46:08,880 --> 00:46:12,240
so i'll go ahead and go through some of

00:46:10,720 --> 00:46:13,280
them thank you for for these questions

00:46:12,240 --> 00:46:16,319
uh first one

00:46:13,280 --> 00:46:19,760
was how are dependencies marked

00:46:16,319 --> 00:46:22,640
how often do you upgrade marked

00:46:19,760 --> 00:46:23,760
okay so i'm gonna assume this was based

00:46:22,640 --> 00:46:26,880
on

00:46:23,760 --> 00:46:28,720
uh the marked dependency here

00:46:26,880 --> 00:46:30,240
which you may have got that we have this

00:46:28,720 --> 00:46:31,599
plugin that shows you when you type

00:46:30,240 --> 00:46:32,160
something in it kind of like annotates

00:46:31,599 --> 00:46:33,920
this

00:46:32,160 --> 00:46:35,599
uh this is if i got the question right

00:46:33,920 --> 00:46:38,079
like how do we you know annotate that

00:46:35,599 --> 00:46:41,599
this is based on this one cost plugin

00:46:38,079 --> 00:46:44,880
and how often do you update marked so

00:46:41,599 --> 00:46:47,040
well if there's another there's

00:46:44,880 --> 00:46:48,400
the context of you know being on the

00:46:47,040 --> 00:46:50,079
bleeding edge but also

00:46:48,400 --> 00:46:51,599
you know being very wary of being on the

00:46:50,079 --> 00:46:53,440
bleeding edge is important because

00:46:51,599 --> 00:46:54,880
sometimes you could just be a victim of

00:46:53,440 --> 00:46:57,200
militia's security incidents like we've

00:46:54,880 --> 00:46:59,119
had before with event stream and dslink

00:46:57,200 --> 00:47:01,280
scopes and others

00:46:59,119 --> 00:47:02,480
so you want to automate that process

00:47:01,280 --> 00:47:03,760
through things you know like

00:47:02,480 --> 00:47:05,839
like the sneak tooling that helps you

00:47:03,760 --> 00:47:06,640
upgrade those and we have inherently

00:47:05,839 --> 00:47:09,280
added

00:47:06,640 --> 00:47:10,160
this kind of like artificial delay or

00:47:09,280 --> 00:47:13,200
even if the

00:47:10,160 --> 00:47:15,839
version is out it will it will take

00:47:13,200 --> 00:47:17,200
it will delay the upgrade you know as a

00:47:15,839 --> 00:47:19,839
specific amount of time

00:47:17,200 --> 00:47:21,440
that we have observed from other recent

00:47:19,839 --> 00:47:23,920
incidents security incidents

00:47:21,440 --> 00:47:24,640
that you know uh took time to uh to to

00:47:23,920 --> 00:47:26,880
find those

00:47:24,640 --> 00:47:28,240
issues so that's how we automate it away

00:47:26,880 --> 00:47:29,520
you could do that or you could like use

00:47:28,240 --> 00:47:30,160
something like a sneaky life you needed

00:47:29,520 --> 00:47:32,079
to like

00:47:30,160 --> 00:47:33,200
automate whole workflow based on your

00:47:32,079 --> 00:47:37,599
own um

00:47:33,200 --> 00:47:39,760
processes and uh and pipelines

00:47:37,599 --> 00:47:41,040
that that's this one uh what else how

00:47:39,760 --> 00:47:45,280
about container registry

00:47:41,040 --> 00:47:49,359
in enterprise cobalt to reduce

00:47:45,280 --> 00:47:52,400
the security vulnerabilities um

00:47:49,359 --> 00:47:54,319
so container registries um natural about

00:47:52,400 --> 00:47:56,079
kabul specifically but if you have

00:47:54,319 --> 00:47:58,000
container registries what i'm suggesting

00:47:56,079 --> 00:48:00,240
here is if you

00:47:58,000 --> 00:48:01,760
this is basically this takeaway which i

00:48:00,240 --> 00:48:04,079
don't know if this was uh

00:48:01,760 --> 00:48:05,680
there before but if you connect those

00:48:04,079 --> 00:48:06,240
container registries wherever you host

00:48:05,680 --> 00:48:08,960
them

00:48:06,240 --> 00:48:10,400
um whatever cloud infrastructure into

00:48:08,960 --> 00:48:11,040
into what you monitor like your

00:48:10,400 --> 00:48:12,800
application

00:48:11,040 --> 00:48:15,040
uh you know security monitoring thing

00:48:12,800 --> 00:48:17,040
then you can actually see those uh

00:48:15,040 --> 00:48:18,160
serious vulnerabilities in runtime and

00:48:17,040 --> 00:48:19,920
runtime meaning here

00:48:18,160 --> 00:48:21,760
not to run down the container but like

00:48:19,920 --> 00:48:23,440
when when we find new vulnerabilities

00:48:21,760 --> 00:48:25,599
that's where we will tell that's when we

00:48:23,440 --> 00:48:26,079
will tell you uh of this stuff happening

00:48:25,599 --> 00:48:27,920
so

00:48:26,079 --> 00:48:30,160
for example i'm monitoring monitoring

00:48:27,920 --> 00:48:32,240
here this uh uh this is from

00:48:30,160 --> 00:48:33,920
uh from docker hubs as you can see the

00:48:32,240 --> 00:48:34,720
source i've connected this i have this

00:48:33,920 --> 00:48:37,200
image here

00:48:34,720 --> 00:48:38,559
and anytime you know um we're gonna scan

00:48:37,200 --> 00:48:39,920
this on a daily basis

00:48:38,559 --> 00:48:41,200
and anytime there's gonna be new

00:48:39,920 --> 00:48:42,960
vulnerabilities or maybe new

00:48:41,200 --> 00:48:44,480
recommendations to upgrade

00:48:42,960 --> 00:48:46,160
to different versions you can see for

00:48:44,480 --> 00:48:47,119
example if you move from node six which

00:48:46,160 --> 00:48:48,720
is super old

00:48:47,119 --> 00:48:50,240
uh you know end of life you can move

00:48:48,720 --> 00:48:52,559
into different uh you know

00:48:50,240 --> 00:48:54,400
note 14 which is long-term support and

00:48:52,559 --> 00:48:55,440
this is a great way for us to basically

00:48:54,400 --> 00:48:57,680
uh win this

00:48:55,440 --> 00:48:59,520
uh uh when this you know less

00:48:57,680 --> 00:49:00,079
vulnerabilities uh you know attack

00:48:59,520 --> 00:49:01,520
surface

00:49:00,079 --> 00:49:03,119
so it tells us how to do this and this

00:49:01,520 --> 00:49:04,160
is kind of like the the way to to

00:49:03,119 --> 00:49:06,880
connect what we're

00:49:04,160 --> 00:49:07,440
having on the the image registry and

00:49:06,880 --> 00:49:09,599
what we

00:49:07,440 --> 00:49:12,480
actually want to have running in

00:49:09,599 --> 00:49:14,880
production as well in a safe way

00:49:12,480 --> 00:49:16,480
great question um so if this thing this

00:49:14,880 --> 00:49:18,559
is maybe the last one

00:49:16,480 --> 00:49:20,400
uh does this feature infrared code

00:49:18,559 --> 00:49:23,680
kubernetes template scanning

00:49:20,400 --> 00:49:25,440
works with helm yes so um

00:49:23,680 --> 00:49:27,119
that has answered live thank you for

00:49:25,440 --> 00:49:29,040
that one so we have support for that

00:49:27,119 --> 00:49:30,720
uh that's already out and you could

00:49:29,040 --> 00:49:32,240
probably take a look at the sneak plug

00:49:30,720 --> 00:49:33,680
and other resources on the sneak website

00:49:32,240 --> 00:49:35,040
to see

00:49:33,680 --> 00:49:36,880
both throat map of you know what's

00:49:35,040 --> 00:49:40,160
coming next uh helm

00:49:36,880 --> 00:49:42,880
is supported um and uh and and you know

00:49:40,160 --> 00:49:44,319
the kubernetes channel file as well

00:49:42,880 --> 00:49:46,079
more information is definitely is

00:49:44,319 --> 00:49:47,680
definitely there uh being accurate on

00:49:46,079 --> 00:49:48,640
like the timing and releases and the

00:49:47,680 --> 00:49:51,119
exact feature

00:49:48,640 --> 00:49:52,000
completeness that we have there uh but

00:49:51,119 --> 00:49:55,200
yes this

00:49:52,000 --> 00:49:56,000
is uh let me take that screenshot back

00:49:55,200 --> 00:49:57,680
again

00:49:56,000 --> 00:49:59,760
and uh this is basically the

00:49:57,680 --> 00:50:03,280
kubernetes.gmo file that we are

00:49:59,760 --> 00:50:03,280
i'm showing here the screenshot

00:50:10,640 --> 00:50:14,079
all right so i think we are going to

00:50:13,760 --> 00:50:18,160
wrap

00:50:14,079 --> 00:50:20,400
up thank you for all the questions

00:50:18,160 --> 00:50:21,359
uh i hope you enjoy it and i hope uh

00:50:20,400 --> 00:50:24,800
you're gonna be uh

00:50:21,359 --> 00:50:26,640
stay safe using open source software

00:50:24,800 --> 00:50:28,240
great thank you so much to lauren for

00:50:26,640 --> 00:50:30,160
his time today and thank you to all the

00:50:28,240 --> 00:50:32,079
participants who joined us

00:50:30,160 --> 00:50:34,000
as a reminder this recording will be on

00:50:32,079 --> 00:50:34,720
the linux foundation youtube page later

00:50:34,000 --> 00:50:35,920
today

00:50:34,720 --> 00:50:40,800
we hope you're able to join us for

00:50:35,920 --> 00:50:42,880
future webinars have a wonderful day

00:50:40,800 --> 00:50:42,880

YouTube URL: https://www.youtube.com/watch?v=5VHgsSsIudA


