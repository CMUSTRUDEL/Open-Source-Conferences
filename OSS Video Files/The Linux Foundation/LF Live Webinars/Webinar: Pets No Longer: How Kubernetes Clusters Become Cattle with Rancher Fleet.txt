Title: Webinar: Pets No Longer: How Kubernetes Clusters Become Cattle with Rancher Fleet
Publication date: 2020-12-03
Playlist: LF Live Webinars
Description: 
	Sponsored by Rancher
Captions: 
	00:00:00,160 --> 00:00:03,760
okay well thank you so much for the the

00:00:02,960 --> 00:00:06,640
introduction

00:00:03,760 --> 00:00:08,320
and um thank you everyone for attending

00:00:06,640 --> 00:00:10,559
so let me just make sure i've got

00:00:08,320 --> 00:00:12,320
all the computer stuff here working i

00:00:10,559 --> 00:00:15,839
think you can see my screen

00:00:12,320 --> 00:00:18,000
and video and can you guys hear me

00:00:15,839 --> 00:00:21,359
hopefully

00:00:18,000 --> 00:00:23,519
we can you know here okay good

00:00:21,359 --> 00:00:24,720
well that seems like all the ingredients

00:00:23,519 --> 00:00:26,400
we need to get started so

00:00:24,720 --> 00:00:31,199
i'm really excited to talk to you all

00:00:26,400 --> 00:00:32,719
about rancher continuous delivery so um

00:00:31,199 --> 00:00:34,160
normally i would ask who here has heard

00:00:32,719 --> 00:00:35,680
of this but i can't really see if you

00:00:34,160 --> 00:00:38,079
raise your hand so that's kind of

00:00:35,680 --> 00:00:39,680
pointless but i'll just assume most of

00:00:38,079 --> 00:00:40,079
you haven't heard about this so we're

00:00:39,680 --> 00:00:41,360
gonna

00:00:40,079 --> 00:00:43,520
we're gonna start with a high level

00:00:41,360 --> 00:00:44,160
overview of what rancher continuous

00:00:43,520 --> 00:00:47,039
delivery

00:00:44,160 --> 00:00:48,960
is then we're going to talk about why we

00:00:47,039 --> 00:00:51,280
built this technology that's

00:00:48,960 --> 00:00:52,160
used in this in this new feature called

00:00:51,280 --> 00:00:54,239
fleet

00:00:52,160 --> 00:00:55,600
this is kind of the underlying engine

00:00:54,239 --> 00:00:58,719
and then we'll go into

00:00:55,600 --> 00:01:00,399
some architecture and uh to kind of

00:00:58,719 --> 00:01:01,520
tease apart the technicals that's always

00:01:00,399 --> 00:01:02,800
fun

00:01:01,520 --> 00:01:05,040
and then finally hopefully the most

00:01:02,800 --> 00:01:07,600
exciting part we'll do a live demo

00:01:05,040 --> 00:01:09,360
which is always risky but we like to uh

00:01:07,600 --> 00:01:11,280
we like to live on the edge here

00:01:09,360 --> 00:01:13,360
at rancher so hopefully this will be

00:01:11,280 --> 00:01:17,040
this will be fun for us all

00:01:13,360 --> 00:01:18,240
right so what is fleet well fleet is

00:01:17,040 --> 00:01:19,920
this engine that we

00:01:18,240 --> 00:01:22,320
have developed it's an open source

00:01:19,920 --> 00:01:25,920
project at rancher

00:01:22,320 --> 00:01:27,840
and it's designed for the problem of get

00:01:25,920 --> 00:01:30,079
ops at scale

00:01:27,840 --> 00:01:31,040
uh it's suitable for one or one million

00:01:30,079 --> 00:01:34,159
clusters

00:01:31,040 --> 00:01:35,600
um and that's that's one or one two one

00:01:34,159 --> 00:01:37,439
million clusters that doesn't mean

00:01:35,600 --> 00:01:39,520
one or one million clusters because

00:01:37,439 --> 00:01:41,119
obviously there's lots of

00:01:39,520 --> 00:01:42,560
you know scales in between that i would

00:01:41,119 --> 00:01:46,560
i would assume

00:01:42,560 --> 00:01:48,799
so this is a this is a really important

00:01:46,560 --> 00:01:50,560
thing we think for the future of

00:01:48,799 --> 00:01:52,000
where kubernetes is heading so and let

00:01:50,560 --> 00:01:53,520
me just take a step back actually and

00:01:52,000 --> 00:01:54,880
just bring up this other concept which

00:01:53,520 --> 00:01:57,680
is

00:01:54,880 --> 00:01:59,920
when we started rancher five years ago

00:01:57,680 --> 00:01:59,920
now

00:02:00,079 --> 00:02:03,600
rancher was developed to address the

00:02:02,560 --> 00:02:07,040
problem of

00:02:03,600 --> 00:02:10,160
treating our servers as pets right

00:02:07,040 --> 00:02:12,879
we as a engineering community have

00:02:10,160 --> 00:02:14,160
always had this tension of what whether

00:02:12,879 --> 00:02:16,640
we're managing

00:02:14,160 --> 00:02:18,319
groups of servers as pets or if we can

00:02:16,640 --> 00:02:20,640
treat them

00:02:18,319 --> 00:02:22,400
and address them in a more scalable

00:02:20,640 --> 00:02:23,599
manner and the analogy is of course the

00:02:22,400 --> 00:02:26,000
cattle

00:02:23,599 --> 00:02:28,560
right we can we can address servers as

00:02:26,000 --> 00:02:31,360
one single unit and modify them

00:02:28,560 --> 00:02:33,040
uh collectively and have consistency and

00:02:31,360 --> 00:02:36,640
repeatability and if we

00:02:33,040 --> 00:02:38,160
lose a server um that because it fails

00:02:36,640 --> 00:02:39,760
that's fine because we just replace it

00:02:38,160 --> 00:02:41,360
with a new server which then assumes

00:02:39,760 --> 00:02:43,840
that same functionality enroll

00:02:41,360 --> 00:02:44,560
automatically there's no more like well

00:02:43,840 --> 00:02:48,080
the pet

00:02:44,560 --> 00:02:50,560
server name you know freddy or

00:02:48,080 --> 00:02:51,360
you know whatever failed and i got to

00:02:50,560 --> 00:02:53,360
rebuild it now

00:02:51,360 --> 00:02:54,560
i got to go take care of the sick server

00:02:53,360 --> 00:02:56,800
and rebuild it and that's

00:02:54,560 --> 00:02:58,400
a day of my time we want to get away

00:02:56,800 --> 00:03:00,959
from that so that's why we

00:02:58,400 --> 00:03:02,319
uh started in rancher um also we all

00:03:00,959 --> 00:03:02,879
needed jobs that was part of it i

00:03:02,319 --> 00:03:06,000
suppose

00:03:02,879 --> 00:03:07,519
right but more importantly we wanted to

00:03:06,000 --> 00:03:08,239
do something meaningful at our career

00:03:07,519 --> 00:03:10,800
which was

00:03:08,239 --> 00:03:11,920
improved technology uh for the

00:03:10,800 --> 00:03:14,319
engineering community

00:03:11,920 --> 00:03:16,000
so we developed technologies to help

00:03:14,319 --> 00:03:18,000
solve this problem we developed cattle

00:03:16,000 --> 00:03:19,519
our first cluster orchestrator for

00:03:18,000 --> 00:03:20,480
containers this is when we just had

00:03:19,519 --> 00:03:23,840
docker

00:03:20,480 --> 00:03:26,159
back in the day and then we developed

00:03:23,840 --> 00:03:28,480
rancher for kubernetes when kubernetes

00:03:26,159 --> 00:03:30,799
became sort of the de facto standard for

00:03:28,480 --> 00:03:32,640
container management we built a

00:03:30,799 --> 00:03:34,480
technology to allow you then to manage

00:03:32,640 --> 00:03:37,840
kubernetes more effectively

00:03:34,480 --> 00:03:39,200
in and scale across many environments

00:03:37,840 --> 00:03:41,440
okay so that that's what we did five

00:03:39,200 --> 00:03:44,799
years ago and that's been our evolution

00:03:41,440 --> 00:03:46,080
what's happened now is we've sort of

00:03:44,799 --> 00:03:48,239
gone 360 again

00:03:46,080 --> 00:03:50,319
back to the same problem which is

00:03:48,239 --> 00:03:52,239
containers are no longer

00:03:50,319 --> 00:03:53,519
sorry servers are no longer pets we've

00:03:52,239 --> 00:03:54,480
solved that problem they're definitely

00:03:53,519 --> 00:03:57,840
cattle

00:03:54,480 --> 00:03:59,360
now with kubernetes and containers and

00:03:57,840 --> 00:04:00,000
all the orchestration technologies that

00:03:59,360 --> 00:04:02,400
we've developed

00:04:00,000 --> 00:04:03,840
with the cncf and what really the cncf

00:04:02,400 --> 00:04:06,239
has developed at large

00:04:03,840 --> 00:04:08,000
that's all solved now the kubernetes

00:04:06,239 --> 00:04:11,040
cluster itself

00:04:08,000 --> 00:04:13,519
has become the new pet right that's

00:04:11,040 --> 00:04:14,480
it's it's replaced the pet that we got

00:04:13,519 --> 00:04:17,519
rid of

00:04:14,480 --> 00:04:19,440
and it's just moved up the stack so

00:04:17,519 --> 00:04:21,280
what we we developed fleet to address

00:04:19,440 --> 00:04:23,680
this very problem of

00:04:21,280 --> 00:04:25,040
the the cluster of kubernetes is

00:04:23,680 --> 00:04:26,840
becoming the new pet

00:04:25,040 --> 00:04:28,639
and now becoming an administrative

00:04:26,840 --> 00:04:30,639
overhead which is

00:04:28,639 --> 00:04:32,000
slowing us down as engineers from

00:04:30,639 --> 00:04:32,720
getting to the interesting problems

00:04:32,000 --> 00:04:34,560
which are

00:04:32,720 --> 00:04:36,240
once we get kubernetes running and we

00:04:34,560 --> 00:04:38,880
actually start using

00:04:36,240 --> 00:04:40,160
um all the cncf tools to build

00:04:38,880 --> 00:04:42,320
applications like that's where we want

00:04:40,160 --> 00:04:43,840
to get to let's be honest it's not

00:04:42,320 --> 00:04:45,680
we don't we don't get excited about

00:04:43,840 --> 00:04:47,199
getting kubernetes working

00:04:45,680 --> 00:04:48,720
anymore at least i don't think so we get

00:04:47,199 --> 00:04:50,960
excited about using

00:04:48,720 --> 00:04:53,199
you know service mesh and you know

00:04:50,960 --> 00:04:56,639
advanced logging and instrumentation

00:04:53,199 --> 00:04:58,479
and um you know cic advanced ci cd

00:04:56,639 --> 00:04:59,759
methodologies and doing blue green

00:04:58,479 --> 00:05:03,120
deployments and a b

00:04:59,759 --> 00:05:05,440
testing and you know doing um

00:05:03,120 --> 00:05:06,880
uh proportional weight routing and

00:05:05,440 --> 00:05:08,880
circuit breakers between our micro

00:05:06,880 --> 00:05:12,080
services that's what we want to get to

00:05:08,880 --> 00:05:12,479
it's not it's not this part so um again

00:05:12,080 --> 00:05:14,880
we

00:05:12,479 --> 00:05:16,240
we hope that we can help remove some of

00:05:14,880 --> 00:05:17,840
the the burden and some of the

00:05:16,240 --> 00:05:19,520
administrative overhead that started to

00:05:17,840 --> 00:05:21,680
develop at the cluster level

00:05:19,520 --> 00:05:22,800
so that's a long-winded way to explain

00:05:21,680 --> 00:05:26,639
that's why

00:05:22,800 --> 00:05:28,320
uh we think kubernetes needs fleet

00:05:26,639 --> 00:05:30,400
and needs something because we have more

00:05:28,320 --> 00:05:32,639
than one cluster we know

00:05:30,400 --> 00:05:34,080
uh you know engineering groups now that

00:05:32,639 --> 00:05:35,199
are you know in the thousands of

00:05:34,080 --> 00:05:36,880
clusters already

00:05:35,199 --> 00:05:39,039
and they need consistency across them so

00:05:36,880 --> 00:05:40,800
how do you manage policy

00:05:39,039 --> 00:05:42,160
how do you manage application deployment

00:05:40,800 --> 00:05:44,080
how do you manage infrastructure

00:05:42,160 --> 00:05:45,840
maintenance

00:05:44,080 --> 00:05:47,600
if you're using crds for instance you

00:05:45,840 --> 00:05:47,919
have to register you need those crds to

00:05:47,600 --> 00:05:50,400
be

00:05:47,919 --> 00:05:51,680
consistently deployed across all of your

00:05:50,400 --> 00:05:52,960
clusters

00:05:51,680 --> 00:05:54,960
let's say you have special ingress

00:05:52,960 --> 00:05:55,360
settings so many people now have to have

00:05:54,960 --> 00:05:57,440
you know

00:05:55,360 --> 00:05:59,280
nginx tuned a certain way or they want

00:05:57,440 --> 00:06:01,360
tcp forwarding enabled so

00:05:59,280 --> 00:06:03,120
the moment you do that now you're going

00:06:01,360 --> 00:06:04,880
to need special gammas that have to be

00:06:03,120 --> 00:06:06,880
you know deployed at the cube system

00:06:04,880 --> 00:06:08,080
level for the for your ingress

00:06:06,880 --> 00:06:09,199
okay who's going to keep track of all

00:06:08,080 --> 00:06:11,840
those files and make sure they're

00:06:09,199 --> 00:06:13,039
consistent across your clusters

00:06:11,840 --> 00:06:14,479
these are these are the types of

00:06:13,039 --> 00:06:15,680
problems you know that you need

00:06:14,479 --> 00:06:17,919
addressing

00:06:15,680 --> 00:06:19,199
and then when you start to try to push

00:06:17,919 --> 00:06:21,039
that those settings out

00:06:19,199 --> 00:06:23,039
how do you make sure that they're

00:06:21,039 --> 00:06:24,560
consistently deployed monitoring

00:06:23,039 --> 00:06:27,280
the deployment of those things making

00:06:24,560 --> 00:06:28,960
sure that there's eventual consistency

00:06:27,280 --> 00:06:30,560
and that ties into of course with

00:06:28,960 --> 00:06:33,520
eventual consistency

00:06:30,560 --> 00:06:34,960
visibility rule-based access control and

00:06:33,520 --> 00:06:35,840
you know controlled rollout method

00:06:34,960 --> 00:06:37,759
because of course

00:06:35,840 --> 00:06:39,440
when you get to large cluster scale you

00:06:37,759 --> 00:06:40,479
don't want to do these things atomically

00:06:39,440 --> 00:06:43,520
you want to do them

00:06:40,479 --> 00:06:46,240
transitionally or gradually okay so

00:06:43,520 --> 00:06:47,600
why millions so maybe that's a question

00:06:46,240 --> 00:06:48,000
that doesn't even need to be addressed

00:06:47,600 --> 00:06:49,280
in some

00:06:48,000 --> 00:06:51,360
people's minds because you're already

00:06:49,280 --> 00:06:54,080
living it but for those who haven't

00:06:51,360 --> 00:06:55,919
experienced this yet um the trend that

00:06:54,080 --> 00:06:56,639
that i'd like to tell you about that is

00:06:55,919 --> 00:06:59,599
happening

00:06:56,639 --> 00:07:00,720
is as companies are embracing uh

00:06:59,599 --> 00:07:03,840
kubernetes in

00:07:00,720 --> 00:07:06,080
more in new use cases like

00:07:03,840 --> 00:07:07,360
near edge and far edge especially and

00:07:06,080 --> 00:07:08,639
it's not just these but these are the

00:07:07,360 --> 00:07:11,599
ones that really

00:07:08,639 --> 00:07:13,680
kind of turn the dial up very quickly

00:07:11,599 --> 00:07:15,599
now all of a sudden we have

00:07:13,680 --> 00:07:16,800
a order of magnitude increase in the

00:07:15,599 --> 00:07:19,759
number of clusters

00:07:16,800 --> 00:07:20,800
that are going to be managed by an

00:07:19,759 --> 00:07:22,560
organization

00:07:20,800 --> 00:07:24,479
we know we know companies that are using

00:07:22,560 --> 00:07:27,759
kubernetes you know on windmills

00:07:24,479 --> 00:07:29,680
in in energy farms you know there's just

00:07:27,759 --> 00:07:31,120
hundreds and hundreds of endpoints

00:07:29,680 --> 00:07:33,360
and hundreds of hundreds of clusters now

00:07:31,120 --> 00:07:35,120
because of that and um

00:07:33,360 --> 00:07:37,120
uh you know you've got the telco space

00:07:35,120 --> 00:07:39,440
which has got devices in the field

00:07:37,120 --> 00:07:41,759
everywhere right telcos have cell towers

00:07:39,440 --> 00:07:43,280
tens of thousands of them a lot of them

00:07:41,759 --> 00:07:44,400
have you guys ever driven up to a cell

00:07:43,280 --> 00:07:46,639
tower before

00:07:44,400 --> 00:07:47,759
and like peeked over the fence and

00:07:46,639 --> 00:07:50,639
looked at kind of the

00:07:47,759 --> 00:07:51,120
electronics there i'm not suggesting you

00:07:50,639 --> 00:07:52,560
uh

00:07:51,120 --> 00:07:54,160
you know those are normally restricted

00:07:52,560 --> 00:07:55,520
areas i'm not suggesting you

00:07:54,160 --> 00:07:57,199
interfere with anything there but if you

00:07:55,520 --> 00:07:59,120
ever just happen to notice them

00:07:57,199 --> 00:08:02,000
there's a full there's usually a full

00:07:59,120 --> 00:08:05,199
like 42 e rack or something

00:08:02,000 --> 00:08:07,360
or not you know or sometimes smaller uh

00:08:05,199 --> 00:08:08,560
but a sizable rack and cabinet they're

00:08:07,360 --> 00:08:10,479
full of servers

00:08:08,560 --> 00:08:12,479
so those are data centers you know that

00:08:10,479 --> 00:08:13,360
are out sitting behind your walmart

00:08:12,479 --> 00:08:14,800
parking lot

00:08:13,360 --> 00:08:16,639
in the back and that's a data center

00:08:14,800 --> 00:08:17,919
right there those are going to become

00:08:16,639 --> 00:08:19,599
kubernetes clusters

00:08:17,919 --> 00:08:21,360
and so now we're talking about tens of

00:08:19,599 --> 00:08:23,919
thousands of clusters so

00:08:21,360 --> 00:08:25,199
existing solutions they get to about

00:08:23,919 --> 00:08:27,280
here

00:08:25,199 --> 00:08:28,479
and why is that well it's because the

00:08:27,280 --> 00:08:31,520
existing solutions

00:08:28,479 --> 00:08:34,240
rely on artisanal craftsmanship

00:08:31,520 --> 00:08:36,479
to maintain those clusters they rely on

00:08:34,240 --> 00:08:39,120
a subject matter expert who is

00:08:36,479 --> 00:08:41,039
able to put together a kubernetes

00:08:39,120 --> 00:08:42,880
cluster over a few days

00:08:41,039 --> 00:08:44,800
very well from their skills and from the

00:08:42,880 --> 00:08:46,000
tools they have but they have to do it

00:08:44,800 --> 00:08:47,680
manually every time

00:08:46,000 --> 00:08:51,279
and that just doesn't you know that

00:08:47,680 --> 00:08:55,440
scales to about the the 10 to 50 cluster

00:08:51,279 --> 00:08:57,040
range before things start to become

00:08:55,440 --> 00:09:00,080
have some friction so that that's why

00:08:57,040 --> 00:09:01,519
we're doing this essentially

00:09:00,080 --> 00:09:03,440
um so let's talk a little bit about

00:09:01,519 --> 00:09:04,800
existing get off scaling approaches

00:09:03,440 --> 00:09:05,760
because this isn't necessarily the only

00:09:04,800 --> 00:09:07,920
way to

00:09:05,760 --> 00:09:08,800
approach it there is some some models

00:09:07,920 --> 00:09:10,560
where um

00:09:08,800 --> 00:09:12,480
people have built things for instance

00:09:10,560 --> 00:09:15,360
that

00:09:12,480 --> 00:09:16,959
try to have uh something inside the

00:09:15,360 --> 00:09:19,600
kubernetes cluster just pull from a git

00:09:16,959 --> 00:09:22,959
repo and so you have a repo per cluster

00:09:19,600 --> 00:09:24,800
um uh the you know

00:09:22,959 --> 00:09:26,399
this can work in some cases there's

00:09:24,800 --> 00:09:27,760
there's a disadvantage of this though is

00:09:26,399 --> 00:09:29,120
you have a lot of repos to manage you

00:09:27,760 --> 00:09:31,839
have a one-to-one

00:09:29,120 --> 00:09:34,399
relationship now between the rebill and

00:09:31,839 --> 00:09:37,760
the cluster and so you've almost just

00:09:34,399 --> 00:09:39,440
offset or transferred your excuse me

00:09:37,760 --> 00:09:41,040
administrative overhead of your clusters

00:09:39,440 --> 00:09:42,480
to a different system

00:09:41,040 --> 00:09:44,080
right to your git repos now you have to

00:09:42,480 --> 00:09:45,600
deal with the problem there a little so

00:09:44,080 --> 00:09:48,240
that that's not great

00:09:45,600 --> 00:09:49,920
furthermore how do you visualize and see

00:09:48,240 --> 00:09:50,560
who's pulled what if everything's just

00:09:49,920 --> 00:09:53,680
pulling

00:09:50,560 --> 00:09:55,519
asynchronously um there's

00:09:53,680 --> 00:09:56,800
as soon as you you commit it it's just

00:09:55,519 --> 00:09:57,680
gonna start getting consumed and you

00:09:56,800 --> 00:09:59,519
don't really know

00:09:57,680 --> 00:10:01,040
how fast and you don't really know you

00:09:59,519 --> 00:10:02,560
don't have any control over the rate of

00:10:01,040 --> 00:10:03,680
that consumption so that can be kind of

00:10:02,560 --> 00:10:05,200
a problem

00:10:03,680 --> 00:10:06,880
so the the kind of the reflection of

00:10:05,200 --> 00:10:08,480
that is people then respond by okay

00:10:06,880 --> 00:10:10,640
let's create one repo

00:10:08,480 --> 00:10:12,079
to solve the problem and now i have a

00:10:10,640 --> 00:10:13,680
single point of control they don't have

00:10:12,079 --> 00:10:16,399
the repo sprawl problem

00:10:13,680 --> 00:10:17,600
okay that's great still a disadvantage

00:10:16,399 --> 00:10:18,560
those you don't have a way to control

00:10:17,600 --> 00:10:20,160
rollout in fact

00:10:18,560 --> 00:10:22,079
in some ways you've created a new

00:10:20,160 --> 00:10:25,279
problem which is now you've got an

00:10:22,079 --> 00:10:26,480
atomic lever is your only way to make

00:10:25,279 --> 00:10:29,519
changes

00:10:26,480 --> 00:10:31,200
all i can do is make an atomic commit

00:10:29,519 --> 00:10:32,959
and all of a sudden everything gets the

00:10:31,200 --> 00:10:34,560
change at once

00:10:32,959 --> 00:10:36,160
and if you're talking about a global

00:10:34,560 --> 00:10:38,000
data center sorry a global

00:10:36,160 --> 00:10:39,200
cluster footprint you know a thousand

00:10:38,000 --> 00:10:41,760
clusters in

00:10:39,200 --> 00:10:43,360
25 points of presence across the world

00:10:41,760 --> 00:10:44,959
you know which is kind of

00:10:43,360 --> 00:10:46,880
the minimum we're talking about before

00:10:44,959 --> 00:10:48,160
we get even into the fun stuff

00:10:46,880 --> 00:10:49,760
that's not going to work so well you

00:10:48,160 --> 00:10:50,480
don't want that to happen all at once

00:10:49,760 --> 00:10:52,240
because

00:10:50,480 --> 00:10:54,880
you really want to make sure that you're

00:10:52,240 --> 00:10:58,079
monitoring the impact and

00:10:54,880 --> 00:11:01,120
effect of those changes um

00:10:58,079 --> 00:11:02,880
and so uh you know then another way to

00:11:01,120 --> 00:11:03,519
solve that problem of control is okay

00:11:02,880 --> 00:11:06,000
let's not

00:11:03,519 --> 00:11:07,760
let it pull let's instead just push to

00:11:06,000 --> 00:11:10,000
it

00:11:07,760 --> 00:11:12,320
so then we get a single repo and then in

00:11:10,000 --> 00:11:15,040
theory we can control it because

00:11:12,320 --> 00:11:16,800
we're pushing out the changes um and

00:11:15,040 --> 00:11:17,120
controlling sort of when those things

00:11:16,800 --> 00:11:19,600
are

00:11:17,120 --> 00:11:20,959
seen across the world okay that's good

00:11:19,600 --> 00:11:22,240
um

00:11:20,959 --> 00:11:24,079
the challenge there of course though is

00:11:22,240 --> 00:11:26,240
the push model it just doesn't scale

00:11:24,079 --> 00:11:29,680
well unless you have good tooling

00:11:26,240 --> 00:11:30,640
and push also requires this concept of a

00:11:29,680 --> 00:11:33,519
network

00:11:30,640 --> 00:11:34,720
ingress and if we're talking about

00:11:33,519 --> 00:11:36,399
distributed systems

00:11:34,720 --> 00:11:38,320
globally the moment we start talking

00:11:36,399 --> 00:11:40,240
about wan and edge

00:11:38,320 --> 00:11:42,000
we're talking about links that are

00:11:40,240 --> 00:11:42,640
untrusted by nature we're talking about

00:11:42,000 --> 00:11:45,519
going over

00:11:42,640 --> 00:11:46,959
significant terrestrial distances where

00:11:45,519 --> 00:11:48,160
we're going to have links that are not

00:11:46,959 --> 00:11:50,480
trusted and we

00:11:48,160 --> 00:11:51,519
and they're not going to always be on a

00:11:50,480 --> 00:11:54,160
private back hall

00:11:51,519 --> 00:11:56,000
and so the moment that happens we have

00:11:54,160 --> 00:11:58,079
to be much more defensive about what

00:11:56,000 --> 00:12:00,000
things we let reach into that

00:11:58,079 --> 00:12:02,639
environment remotely

00:12:00,000 --> 00:12:04,639
i don't want something reaching into my

00:12:02,639 --> 00:12:08,079
windmill

00:12:04,639 --> 00:12:10,720
generator station from across the world

00:12:08,079 --> 00:12:12,399
if i can avoid it and so that's where

00:12:10,720 --> 00:12:14,560
ingress is a security

00:12:12,399 --> 00:12:16,000
obstacle not impossible but it makes it

00:12:14,560 --> 00:12:18,240
harder so

00:12:16,000 --> 00:12:20,320
that's why we chose an agent model

00:12:18,240 --> 00:12:23,760
because an agent model

00:12:20,320 --> 00:12:25,760
allows us to have a agent that makes it

00:12:23,760 --> 00:12:27,120
uh doesn't require ingress because it

00:12:25,760 --> 00:12:29,680
sits within the

00:12:27,120 --> 00:12:30,959
downstream cluster so in the windmill

00:12:29,680 --> 00:12:31,600
the agent will live there with the

00:12:30,959 --> 00:12:34,000
cluster and

00:12:31,600 --> 00:12:35,440
it's periodically checking for new

00:12:34,000 --> 00:12:36,959
updates that it might want to consume

00:12:35,440 --> 00:12:39,120
but it's initiating

00:12:36,959 --> 00:12:40,480
an outbound request talking to a trusted

00:12:39,120 --> 00:12:42,079
endpoint so that's

00:12:40,480 --> 00:12:44,000
much more secure i don't have to have my

00:12:42,079 --> 00:12:47,279
firewall open at all

00:12:44,000 --> 00:12:49,680
right so so that's that's one advantage

00:12:47,279 --> 00:12:51,920
but then because it's not just you know

00:12:49,680 --> 00:12:52,880
checking a github repo or a git repo

00:12:51,920 --> 00:12:55,360
it's actually checking

00:12:52,880 --> 00:12:56,000
an internal engine that's making

00:12:55,360 --> 00:12:58,000
decisions

00:12:56,000 --> 00:12:59,279
and telling it if it should have updates

00:12:58,000 --> 00:13:02,480
now we get the control

00:12:59,279 --> 00:13:03,279
that we want we get role-based access

00:13:02,480 --> 00:13:05,440
control

00:13:03,279 --> 00:13:06,480
we get conditional deployment so when

00:13:05,440 --> 00:13:09,600
this node

00:13:06,480 --> 00:13:12,639
sorry this cluster checks in with

00:13:09,600 --> 00:13:14,079
the uh the master here this master may

00:13:12,639 --> 00:13:15,600
say hey you have an update but when this

00:13:14,079 --> 00:13:15,920
one checks in it will say no you don't

00:13:15,600 --> 00:13:18,639
have an

00:13:15,920 --> 00:13:21,360
update yet because it hasn't told it

00:13:18,639 --> 00:13:23,360
hasn't decided to update to this one yet

00:13:21,360 --> 00:13:24,800
so we get that control and of course now

00:13:23,360 --> 00:13:26,720
we also know hey

00:13:24,800 --> 00:13:28,399
someone checked in and hey this thing

00:13:26,720 --> 00:13:31,600
just reported back that it applied

00:13:28,399 --> 00:13:35,279
the change successfully so now i have

00:13:31,600 --> 00:13:38,639
a transaction i don't just have uh

00:13:35,279 --> 00:13:40,399
you know commit and see what happens

00:13:38,639 --> 00:13:41,760
and maybe i get a phone call now i have

00:13:40,399 --> 00:13:43,680
a transaction

00:13:41,760 --> 00:13:45,040
right which has all the benefits of

00:13:43,680 --> 00:13:49,839
transactions that we all

00:13:45,040 --> 00:13:49,839
value in our data systems right um

00:13:50,160 --> 00:13:53,760
okay so normally i would stop for

00:13:51,680 --> 00:13:57,040
questions here but you know the

00:13:53,760 --> 00:13:59,680
way this webinar works is

00:13:57,040 --> 00:14:01,120
we do questions at the end so uh i know

00:13:59,680 --> 00:14:03,040
there's a lot of information and

00:14:01,120 --> 00:14:04,320
just take notes if you can if you have

00:14:03,040 --> 00:14:06,000
any questions or just

00:14:04,320 --> 00:14:07,199
try to maybe have better memory than i

00:14:06,000 --> 00:14:07,760
do because i know i would forget if i

00:14:07,199 --> 00:14:09,120
had to wait

00:14:07,760 --> 00:14:10,560
so i apologize but we're going to get to

00:14:09,120 --> 00:14:11,839
questions soon because i know this is a

00:14:10,560 --> 00:14:14,880
lot of stuff but

00:14:11,839 --> 00:14:16,880
um just just really high level here um

00:14:14,880 --> 00:14:19,120
this is the the architecture of fleet so

00:14:16,880 --> 00:14:21,760
we got our downstream clusters

00:14:19,120 --> 00:14:22,560
in a cluster group and they're checking

00:14:21,760 --> 00:14:24,720
in with the fleet

00:14:22,560 --> 00:14:27,760
controller cluster which has a

00:14:24,720 --> 00:14:30,480
definition set or a bundle definition

00:14:27,760 --> 00:14:31,680
of state that it's trying to propagate

00:14:30,480 --> 00:14:34,079
based on what's git

00:14:31,680 --> 00:14:34,880
what's in git so git or and you know

00:14:34,079 --> 00:14:37,040
we've got github

00:14:34,880 --> 00:14:39,120
here because it's a recognizable logo

00:14:37,040 --> 00:14:40,800
it's not just github it's any git

00:14:39,120 --> 00:14:44,880
but you know ostensibly now github is

00:14:40,800 --> 00:14:44,880
just good right they've sort of

00:14:45,279 --> 00:14:49,120
claimed that nomenclature for sure and

00:14:47,839 --> 00:14:50,800
so you know practically speaking you've

00:14:49,120 --> 00:14:52,800
got your github repo

00:14:50,800 --> 00:14:54,800
it's the source of truth now it's got

00:14:52,800 --> 00:14:58,240
all of the state that you want to see

00:14:54,800 --> 00:15:00,160
in your clusters and the controller's

00:14:58,240 --> 00:15:01,440
job is just to follow the directions of

00:15:00,160 --> 00:15:03,839
that get repo

00:15:01,440 --> 00:15:04,639
and make sure that they follow or are

00:15:03,839 --> 00:15:09,199
seen

00:15:04,639 --> 00:15:09,199
uh outside in the real world um

00:15:09,360 --> 00:15:13,360
uh here's the road map that we're

00:15:11,760 --> 00:15:16,480
working on

00:15:13,360 --> 00:15:18,800
our 2.5 release this is now ga um

00:15:16,480 --> 00:15:19,839
so you can use this today in rancho now

00:15:18,800 --> 00:15:21,760
rancher by the way if

00:15:19,839 --> 00:15:23,839
not mentioned is an open source project

00:15:21,760 --> 00:15:26,320
rancher itself is not a cncf

00:15:23,839 --> 00:15:28,000
uh incubated technology um we have

00:15:26,320 --> 00:15:30,560
actually many others that are though

00:15:28,000 --> 00:15:31,600
longhorn is a technology that we donated

00:15:30,560 --> 00:15:33,600
to the cncf

00:15:31,600 --> 00:15:34,800
k3s is the technology we donated to the

00:15:33,600 --> 00:15:38,880
cncf so

00:15:34,800 --> 00:15:40,480
rancher as an engineering group is very

00:15:38,880 --> 00:15:42,320
involved with with contributing to the

00:15:40,480 --> 00:15:45,440
cncf um

00:15:42,320 --> 00:15:48,240
and values that heavily rancher

00:15:45,440 --> 00:15:50,240
the uh the product rancher is an open

00:15:48,240 --> 00:15:51,600
source 100 open source product

00:15:50,240 --> 00:15:53,360
so you can download this today if you

00:15:51,600 --> 00:15:55,120
ever wanted to try and it is available

00:15:53,360 --> 00:15:57,680
now with the two five

00:15:55,120 --> 00:15:59,199
um in future versions we're gonna add

00:15:57,680 --> 00:16:00,720
things for private git repos

00:15:59,199 --> 00:16:02,560
you know some kind of housekeeping

00:16:00,720 --> 00:16:04,480
things around different use cases like

00:16:02,560 --> 00:16:05,839
okay maybe there's proxies or advanced

00:16:04,480 --> 00:16:09,199
security settings or

00:16:05,839 --> 00:16:10,000
credentials that are needed and then you

00:16:09,199 --> 00:16:11,839
know we're gonna

00:16:10,000 --> 00:16:14,240
in the future versions really try to

00:16:11,839 --> 00:16:15,920
dial up the ux in our ui to make it

00:16:14,240 --> 00:16:18,079
more comprehensive although i think

00:16:15,920 --> 00:16:19,279
you'll see it's pretty good now

00:16:18,079 --> 00:16:21,120
things like automatic deployment

00:16:19,279 --> 00:16:22,800
rollback you know something fails we can

00:16:21,120 --> 00:16:24,320
automatically roll back

00:16:22,800 --> 00:16:26,480
um and probably much more because we're

00:16:24,320 --> 00:16:28,399
just starting this journey and so that's

00:16:26,480 --> 00:16:29,519
for spring of 2021 that's kind of what

00:16:28,399 --> 00:16:32,240
you can expect

00:16:29,519 --> 00:16:33,680
so um okay we don't need any useful

00:16:32,240 --> 00:16:37,440
assets that's been

00:16:33,680 --> 00:16:39,759
you've been useful enough powerpoint um

00:16:37,440 --> 00:16:40,880
so that's uh a ton of information did i

00:16:39,759 --> 00:16:44,480
lose everybody

00:16:40,880 --> 00:16:47,839
okay we still have people that's good um

00:16:44,480 --> 00:16:49,519
i have spoken into an empty audience for

00:16:47,839 --> 00:16:51,839
a long time before so it wouldn't be the

00:16:49,519 --> 00:16:51,839
first

00:16:53,120 --> 00:16:59,600
okay so what time is it 11

00:16:56,560 --> 00:17:00,240
20. okay i think we can do this so now

00:16:59,600 --> 00:17:05,520
we're going to do

00:17:00,240 --> 00:17:10,079
a live demo who likes live demos

00:17:05,520 --> 00:17:13,039
the silence is encouraging okay good um

00:17:10,079 --> 00:17:15,280
so let's take a look at our rancher ui

00:17:13,039 --> 00:17:15,280
here

00:17:15,439 --> 00:17:22,240
oh why is it refreshing

00:17:19,600 --> 00:17:22,240
what did i touch

00:17:27,679 --> 00:17:31,440
okay that's not good timing one sec we

00:17:30,160 --> 00:17:33,840
should know that this would happen in a

00:17:31,440 --> 00:17:33,840
demo right

00:17:47,200 --> 00:17:50,480
all right there we go now we got our

00:17:48,559 --> 00:17:53,440
cluster back

00:17:50,480 --> 00:17:54,960
so imagine this world now we're in we're

00:17:53,440 --> 00:17:57,919
going to rancho server we have

00:17:54,960 --> 00:18:00,320
two clusters that are downstream cluster

00:17:57,919 --> 00:18:05,120
one and cluster two

00:18:00,320 --> 00:18:07,120
and i have a git repo on github

00:18:05,120 --> 00:18:09,120
and this git repo has some examples for

00:18:07,120 --> 00:18:11,280
fleet there's a bunch of different

00:18:09,120 --> 00:18:12,640
examples here

00:18:11,280 --> 00:18:14,400
we're gonna do something really simple

00:18:12,640 --> 00:18:16,080
today because

00:18:14,400 --> 00:18:17,520
that's that's the best way to start one

00:18:16,080 --> 00:18:18,960
of these demos live

00:18:17,520 --> 00:18:22,960
um i don't know if i've had enough

00:18:18,960 --> 00:18:22,960
coffee to do anything more more crazy

00:18:23,120 --> 00:18:31,520
so this here is a red set of redis

00:18:28,320 --> 00:18:33,039
containers and you can see here these

00:18:31,520 --> 00:18:34,400
are actually just yaml files

00:18:33,039 --> 00:18:36,400
has anyone seen one of these before i

00:18:34,400 --> 00:18:38,960
hope so right if you guys use kubernetes

00:18:36,400 --> 00:18:40,400
you've probably seen one of these

00:18:38,960 --> 00:18:42,880
so one of the first things you'll notice

00:18:40,400 --> 00:18:45,120
here is hey there's no special syntax

00:18:42,880 --> 00:18:48,160
we're not introducing a new language or

00:18:45,120 --> 00:18:48,640
you know oh no there's a new fleet you

00:18:48,160 --> 00:18:50,320
know

00:18:48,640 --> 00:18:52,240
configuration language and syntax you

00:18:50,320 --> 00:18:55,679
have to follow and it's

00:18:52,240 --> 00:18:57,280
gonna be you know it's a variant of tcl

00:18:55,679 --> 00:18:58,799
or something or

00:18:57,280 --> 00:19:00,080
yeah i hope you like semicolons or

00:18:58,799 --> 00:19:00,799
something like that none of that it's

00:19:00,080 --> 00:19:02,320
just yaml

00:19:00,799 --> 00:19:03,919
just normal yaml you can just drop it

00:19:02,320 --> 00:19:06,320
into a repo now

00:19:03,919 --> 00:19:07,120
being said there are some situations we

00:19:06,320 --> 00:19:09,200
discovered where

00:19:07,120 --> 00:19:10,480
you might want some more metadata so

00:19:09,200 --> 00:19:13,440
there is a

00:19:10,480 --> 00:19:13,440
option to do

00:19:14,480 --> 00:19:17,840
is it here the bundle where's our

00:19:16,160 --> 00:19:20,000
bundles here's our fleet yaml

00:19:17,840 --> 00:19:22,240
there is an option to basically have

00:19:20,000 --> 00:19:25,360
this metadata file

00:19:22,240 --> 00:19:28,559
and then do some more like metadata e

00:19:25,360 --> 00:19:30,640
things like target customizations

00:19:28,559 --> 00:19:32,480
and and specify all this stuff in the

00:19:30,640 --> 00:19:35,440
repo so

00:19:32,480 --> 00:19:36,320
um that's an option too so that's more

00:19:35,440 --> 00:19:38,000
than just

00:19:36,320 --> 00:19:39,440
pure yaml but it is pure ammo if you

00:19:38,000 --> 00:19:41,600
want it and then finally you can

00:19:39,440 --> 00:19:43,200
actually have just helm charts in here

00:19:41,600 --> 00:19:44,799
so this is not a replacement for a helm

00:19:43,200 --> 00:19:46,400
this is not

00:19:44,799 --> 00:19:49,600
this does not try to do anything helm

00:19:46,400 --> 00:19:51,679
does this just tries to take helm

00:19:49,600 --> 00:19:52,720
and use it for a greater purpose along

00:19:51,679 --> 00:19:55,120
with the other things you're trying to

00:19:52,720 --> 00:19:57,520
accomplish right

00:19:55,120 --> 00:19:59,039
okay so this is our repo here so let's

00:19:57,520 --> 00:20:03,039
say we wanted to

00:19:59,039 --> 00:20:06,000
use this to control this

00:20:03,039 --> 00:20:06,960
what would we do i wonder if i know i

00:20:06,000 --> 00:20:09,120
hope i know

00:20:06,960 --> 00:20:11,120
we'll find out okay i'm going to copy

00:20:09,120 --> 00:20:14,159
this gear repo here

00:20:11,120 --> 00:20:16,559
and i'm going to first go to the

00:20:14,159 --> 00:20:18,320
cluster explorer because this actually

00:20:16,559 --> 00:20:19,840
all happens within our new ui

00:20:18,320 --> 00:20:21,200
called view which is also known as the

00:20:19,840 --> 00:20:22,000
cluster explorer so you want to go in

00:20:21,200 --> 00:20:23,440
here right away

00:20:22,000 --> 00:20:25,440
and this is probably where you'll want

00:20:23,440 --> 00:20:27,600
to stay ultimately as you start getting

00:20:25,440 --> 00:20:29,600
used to rancher 2.5

00:20:27,600 --> 00:20:30,720
so now i want to create a git repo in

00:20:29,600 --> 00:20:32,240
fleet so notice i went to

00:20:30,720 --> 00:20:34,080
continuous delivery this is the new

00:20:32,240 --> 00:20:35,679
feature here right

00:20:34,080 --> 00:20:37,760
and now i'm going to put in a unique

00:20:35,679 --> 00:20:40,559
name what should we call this cncf

00:20:37,760 --> 00:20:40,559
rocks how's that

00:20:41,440 --> 00:20:49,360
no objections good um

00:20:44,640 --> 00:20:52,159
because we all love the cncf

00:20:49,360 --> 00:20:54,400
all right and the repository is that

00:20:52,159 --> 00:20:55,919
which is not that it has to be http

00:20:54,400 --> 00:20:57,679
probably actually you might use git

00:20:55,919 --> 00:21:00,559
protocol but why

00:20:57,679 --> 00:21:02,640
why find out right now i could choose a

00:21:00,559 --> 00:21:06,720
branch if i wanted a revision

00:21:02,640 --> 00:21:06,720
you know this is git based

00:21:06,960 --> 00:21:11,039
so you can expect to get like features i

00:21:09,919 --> 00:21:12,880
am going to use the path

00:21:11,039 --> 00:21:14,240
simple because i want to just use this

00:21:12,880 --> 00:21:15,520
one simple

00:21:14,240 --> 00:21:17,760
set of configs i don't want to do the

00:21:15,520 --> 00:21:19,760
whole thing okay

00:21:17,760 --> 00:21:21,919
uh and then where do i deploy to so

00:21:19,760 --> 00:21:23,600
here's where some of the fun stuff gets

00:21:21,919 --> 00:21:25,440
i can deploy all the clusters i can

00:21:23,600 --> 00:21:27,039
deploy specific clusters or

00:21:25,440 --> 00:21:28,799
i can deploy to a cluster group i want

00:21:27,039 --> 00:21:29,039
to do a cluster group because that gives

00:21:28,799 --> 00:21:31,120
me

00:21:29,039 --> 00:21:32,240
the most control so i'm going to create

00:21:31,120 --> 00:21:33,679
this

00:21:32,240 --> 00:21:36,080
and now i'm going to use now it's

00:21:33,679 --> 00:21:40,000
pointing to a cluster group

00:21:36,080 --> 00:21:42,799
now a cluster group is just basically a

00:21:40,000 --> 00:21:44,480
a pointer or a way to address multiple

00:21:42,799 --> 00:21:46,159
sets of clusters based on labels so it's

00:21:44,480 --> 00:21:47,520
just kind of the classic label selector

00:21:46,159 --> 00:21:49,039
idea

00:21:47,520 --> 00:21:51,360
which allows me then to add and remove

00:21:49,039 --> 00:21:53,919
things without kind of

00:21:51,360 --> 00:21:54,880
messing with the actual repo parent

00:21:53,919 --> 00:21:59,360
settings so

00:21:54,880 --> 00:22:01,760
this cluster group here is defined by

00:21:59,360 --> 00:22:03,200
did i already actually have these labels

00:22:01,760 --> 00:22:05,200
yeah

00:22:03,200 --> 00:22:06,720
ah yes okay they're already labeled so

00:22:05,200 --> 00:22:10,080
this cluster group here

00:22:06,720 --> 00:22:12,000
is defined by cluster location

00:22:10,080 --> 00:22:14,400
equals north america it's a it's just a

00:22:12,000 --> 00:22:17,679
label selector but any arbitrary

00:22:14,400 --> 00:22:20,240
um you know is open

00:22:17,679 --> 00:22:21,840
source equals yes right anything i want

00:22:20,240 --> 00:22:24,880
here or

00:22:21,840 --> 00:22:27,039
is not what happened in this case we did

00:22:24,880 --> 00:22:29,600
cluster location equals north america

00:22:27,039 --> 00:22:32,080
my two clusters here i have also can you

00:22:29,600 --> 00:22:33,840
guess what i labeled them

00:22:32,080 --> 00:22:36,240
i wish i had giveaways or something give

00:22:33,840 --> 00:22:38,000
you a shirt if you got the answer

00:22:36,240 --> 00:22:40,640
cluster location equals north america

00:22:38,000 --> 00:22:42,720
right so therefore this cluster group

00:22:40,640 --> 00:22:44,000
has a quantity of two clusters

00:22:42,720 --> 00:22:45,919
so that's that's how that works but i

00:22:44,000 --> 00:22:49,520
could add and remove a cluster

00:22:45,919 --> 00:22:53,679
very easily just by adding labels

00:22:49,520 --> 00:22:55,280
okay so since that's happened

00:22:53,679 --> 00:22:57,360
it actually is telling me now what just

00:22:55,280 --> 00:22:59,840
has gone on so when i applied that it

00:22:57,360 --> 00:23:01,200
actually started deploying to those

00:22:59,840 --> 00:23:02,000
clusters in the meantime then it just

00:23:01,200 --> 00:23:03,360
completed

00:23:02,000 --> 00:23:04,720
so it says two clusters right let's go

00:23:03,360 --> 00:23:09,520
ahead and take a look at a cluster now

00:23:04,720 --> 00:23:12,480
and see if it's there

00:23:09,520 --> 00:23:12,880
there we go where are we now cluster two

00:23:12,480 --> 00:23:16,240
okay

00:23:12,880 --> 00:23:18,159
cluster two has front end redis master

00:23:16,240 --> 00:23:21,520
rate of slave which is

00:23:18,159 --> 00:23:23,840
see if that's kind of what we expected

00:23:21,520 --> 00:23:26,000
front-end deployment it's called

00:23:23,840 --> 00:23:28,720
front-end yep

00:23:26,000 --> 00:23:30,000
it's a reddest thing great there's a

00:23:28,720 --> 00:23:31,600
service the service wouldn't show up

00:23:30,000 --> 00:23:32,559
there but that'd be kind of the routing

00:23:31,600 --> 00:23:33,280
behind the scenes there's another

00:23:32,559 --> 00:23:36,080
deployment

00:23:33,280 --> 00:23:37,120
get ready to slave replicas 2 do i see 2

00:23:36,080 --> 00:23:40,400
there

00:23:37,120 --> 00:23:43,760
red slave let's take a look

00:23:40,400 --> 00:23:45,279
replicas 2 okay cool

00:23:43,760 --> 00:23:47,200
so we just basically configured these

00:23:45,279 --> 00:23:48,640
clusters now i know what you're asking

00:23:47,200 --> 00:23:50,080
is hey you never showed me the clusters

00:23:48,640 --> 00:23:51,840
before this so how do i know you just

00:23:50,080 --> 00:23:54,159
didn't put all that stuff there

00:23:51,840 --> 00:23:55,600
and just you know or pulling my leg okay

00:23:54,159 --> 00:23:58,480
fair enough let's

00:23:55,600 --> 00:23:59,360
let's um let's keep me honest here and

00:23:58,480 --> 00:24:02,960
let's

00:23:59,360 --> 00:24:09,039
let's remove one of the clusters from

00:24:02,960 --> 00:24:10,960
the label let's just remove the label

00:24:09,039 --> 00:24:13,360
okay now let's go back to the cluster

00:24:10,960 --> 00:24:13,360
explorer

00:24:13,919 --> 00:24:33,840
we should see this stuff go away

00:24:19,520 --> 00:24:33,840
in a second here once it synchronizes

00:24:40,720 --> 00:24:47,840
why is it not doing that yet

00:24:50,559 --> 00:25:03,760
did it not save my change let's see

00:25:01,440 --> 00:25:03,760
hmm

00:25:07,279 --> 00:25:15,840
that is odd why is it not first update

00:25:10,480 --> 00:25:15,840
and see if that does it

00:25:39,360 --> 00:25:43,840
still thinks it's got two clusters when

00:25:41,039 --> 00:25:43,840
it doesn't

00:25:49,760 --> 00:25:56,240
well let's just let's just do it this

00:25:51,360 --> 00:26:00,080
way then i'm going to

00:25:56,240 --> 00:26:04,159
those objects

00:26:00,080 --> 00:26:04,159
and they won't get recreated hopefully

00:26:04,960 --> 00:26:10,400
because it's it really should be

00:26:06,400 --> 00:26:11,919
ignoring that cluster at this point

00:26:10,400 --> 00:26:14,320
yeah it doesn't even talk about that

00:26:11,919 --> 00:26:17,760
cluster anymore so it's ignoring it but

00:26:14,320 --> 00:26:21,760
it didn't uh clean it up that might be a

00:26:17,760 --> 00:26:24,159
minor bug that we have to look into um

00:26:21,760 --> 00:26:25,120
okay so repos ready zero okay that's

00:26:24,159 --> 00:26:27,919
what we want to see now

00:26:25,120 --> 00:26:27,919
so um

00:26:29,039 --> 00:26:32,159
yeah there's nothing there okay cool so

00:26:30,640 --> 00:26:33,039
let me just add that cluster back in

00:26:32,159 --> 00:26:36,080
though

00:26:33,039 --> 00:26:37,679
and then now just again prove and it is

00:26:36,080 --> 00:26:41,200
for

00:26:37,679 --> 00:26:44,640
cluster location

00:26:41,200 --> 00:26:44,640
north america

00:26:45,120 --> 00:26:49,279
so let's see if these things pop up now

00:26:46,720 --> 00:26:49,279
oh there you go

00:26:50,720 --> 00:26:53,520
okay so that's good all right so let's

00:26:51,919 --> 00:26:55,520
try another thing let's let's do another

00:26:53,520 --> 00:26:58,240
kind of common workflow which is

00:26:55,520 --> 00:26:59,279
okay cool so i got my my my clusters are

00:26:58,240 --> 00:27:01,039
connected here

00:26:59,279 --> 00:27:02,320
to get now i should be able to just

00:27:01,039 --> 00:27:05,760
control things to get

00:27:02,320 --> 00:27:10,000
right so who wants to add another

00:27:05,760 --> 00:27:13,039
redis uh node to our to our

00:27:10,000 --> 00:27:15,039
our cluster here i can just feel the

00:27:13,039 --> 00:27:15,840
excitement you all do i get it i know i

00:27:15,039 --> 00:27:19,039
know the feeling

00:27:15,840 --> 00:27:21,039
you just redis needs more more nodes

00:27:19,039 --> 00:27:23,360
let's let's make that happen all right

00:27:21,039 --> 00:27:26,000
so redis has two replicas now

00:27:23,360 --> 00:27:27,120
what do you say we go to three all right

00:27:26,000 --> 00:27:29,679
so let's just

00:27:27,120 --> 00:27:31,360
again try to make sure that there's no

00:27:29,679 --> 00:27:33,200
man behind the curtain here so we can

00:27:31,360 --> 00:27:36,880
all see what's happening

00:27:33,200 --> 00:27:39,679
reds replicas 2 red is replicas 3

00:27:36,880 --> 00:27:39,679
for red slave

00:27:39,919 --> 00:27:43,520
let's commit directly to the master

00:27:41,760 --> 00:27:47,360
branch like all good

00:27:43,520 --> 00:27:49,840
devops engineers do right

00:27:47,360 --> 00:27:51,360
no this is not cncf recommended i'm i'm

00:27:49,840 --> 00:27:53,360
being told right now by the moderators

00:27:51,360 --> 00:27:55,279
that i need to retract that statement

00:27:53,360 --> 00:27:57,760
cncf does not recommend committing to

00:27:55,279 --> 00:28:00,840
the master directly

00:27:57,760 --> 00:28:02,960
so you always want to always want a pull

00:28:00,840 --> 00:28:05,440
request all right so i'm going to commit

00:28:02,960 --> 00:28:07,440
to master directly

00:28:05,440 --> 00:28:09,600
which again is not great but for the

00:28:07,440 --> 00:28:12,320
purposes of this

00:28:09,600 --> 00:28:13,120
and in time it's going to check and say

00:28:12,320 --> 00:28:15,600
oh look

00:28:13,120 --> 00:28:16,240
hey look something changed i need to go

00:28:15,600 --> 00:28:19,279
change

00:28:16,240 --> 00:28:20,240
the world around me and look at that

00:28:19,279 --> 00:28:24,480
replicas

00:28:20,240 --> 00:28:24,480
three and now there is three

00:28:25,039 --> 00:28:35,039
so there you have it that is

00:28:30,399 --> 00:28:37,279
um that is now working

00:28:35,039 --> 00:28:39,039
so what you see here is like i just

00:28:37,279 --> 00:28:41,279
committed a change here to get

00:28:39,039 --> 00:28:42,799
and i just changed it in two of my

00:28:41,279 --> 00:28:43,840
clusters if i had two or two thousand

00:28:42,799 --> 00:28:45,039
it'd be the same oh by the way do you

00:28:43,840 --> 00:28:45,440
want to look at the other cluster just

00:28:45,039 --> 00:28:47,120
to

00:28:45,440 --> 00:28:49,279
see what what cluster one is looking

00:28:47,120 --> 00:28:49,279
like

00:28:49,840 --> 00:28:53,360
what do you think is going to be there

00:28:52,080 --> 00:28:55,279
okay same things right

00:28:53,360 --> 00:28:57,440
how many should be here three perfect

00:28:55,279 --> 00:28:58,000
right so now we just have this identical

00:28:57,440 --> 00:29:00,880
state across

00:28:58,000 --> 00:29:04,240
all of our clusters now admittedly i'm

00:29:00,880 --> 00:29:04,240
really focusing on the example of

00:29:04,399 --> 00:29:07,200
red as an application so you might be

00:29:05,760 --> 00:29:09,039
saying okay i could always i've been

00:29:07,200 --> 00:29:12,159
able to use helm and just

00:29:09,039 --> 00:29:13,840
you know helm helm update across

00:29:12,159 --> 00:29:15,120
five clusters no problem not a big deal

00:29:13,840 --> 00:29:16,799
i can just have a script just sort of

00:29:15,120 --> 00:29:18,000
synchronize all my deployments with hell

00:29:16,799 --> 00:29:20,399
not a big deal yeah that

00:29:18,000 --> 00:29:21,120
that's fair um that's that's not the

00:29:20,399 --> 00:29:22,399
only

00:29:21,120 --> 00:29:24,880
use case again that you're gonna want to

00:29:22,399 --> 00:29:26,880
think about though it's the problem is

00:29:24,880 --> 00:29:29,120
what if red has needed crds or

00:29:26,880 --> 00:29:33,120
modifications to the cube system

00:29:29,120 --> 00:29:34,399
or storage classes provisioned right or

00:29:33,120 --> 00:29:36,399
system level things and kubernetes

00:29:34,399 --> 00:29:37,679
kubernetes is now a complex piece of

00:29:36,399 --> 00:29:39,120
machinery

00:29:37,679 --> 00:29:41,279
those things can't be necessarily

00:29:39,120 --> 00:29:44,320
captured in a home chart easily

00:29:41,279 --> 00:29:45,440
um that's where this this is coming in

00:29:44,320 --> 00:29:47,840
because now we're doing that

00:29:45,440 --> 00:29:48,799
in git as well so now the git repo is

00:29:47,840 --> 00:29:50,720
cohesive

00:29:48,799 --> 00:29:51,919
it's the whole thing let's go right back

00:29:50,720 --> 00:29:55,760
to the docker thing

00:29:51,919 --> 00:29:57,200
why was docker so so powerful initially

00:29:55,760 --> 00:29:59,520
well one of the reasons was is because

00:29:57,200 --> 00:30:01,200
it just worked on if it worked on your

00:29:59,520 --> 00:30:02,720
box it worked on any box because there

00:30:01,200 --> 00:30:04,880
was none of this

00:30:02,720 --> 00:30:06,559
uh dependency injection that we've lived

00:30:04,880 --> 00:30:07,360
by for the last 20 years in engineering

00:30:06,559 --> 00:30:09,520
where it's like

00:30:07,360 --> 00:30:10,720
okay yeah everything will work except

00:30:09,520 --> 00:30:12,000
you need like

00:30:10,720 --> 00:30:14,080
do you have the right version of you

00:30:12,000 --> 00:30:15,760
know lip c and live xml

00:30:14,080 --> 00:30:17,760
on your box oh yeah if you don't have

00:30:15,760 --> 00:30:19,679
the right version it will fail

00:30:17,760 --> 00:30:21,039
and it's like well okay but not

00:30:19,679 --> 00:30:22,320
everybody's gonna have the same version

00:30:21,039 --> 00:30:23,760
so that's a

00:30:22,320 --> 00:30:25,679
that's not a complete solution and

00:30:23,760 --> 00:30:27,120
docker solved that by saying

00:30:25,679 --> 00:30:28,960
everything is going to work everything's

00:30:27,120 --> 00:30:31,200
going to be in the image

00:30:28,960 --> 00:30:32,720
and it's a it's a it's a comprehensive

00:30:31,200 --> 00:30:34,399
solution you know it doesn't leave

00:30:32,720 --> 00:30:36,480
anything

00:30:34,399 --> 00:30:38,480
up for for surprise and that's the same

00:30:36,480 --> 00:30:39,440
thing here now the entire cluster can be

00:30:38,480 --> 00:30:41,039
described

00:30:39,440 --> 00:30:42,720
and notice i said can be you don't have

00:30:41,039 --> 00:30:44,080
to you're not confined

00:30:42,720 --> 00:30:46,159
to doing everything to get i can still

00:30:44,080 --> 00:30:47,279
edit these clusters no problem that's

00:30:46,159 --> 00:30:48,480
that all my other tools are going to

00:30:47,279 --> 00:30:50,159
work nothing is

00:30:48,480 --> 00:30:51,919
nothing's impacting my existing tool set

00:30:50,159 --> 00:30:53,120
but i can if i want to and if i have

00:30:51,919 --> 00:30:55,520
that pattern

00:30:53,120 --> 00:30:57,519
describe everything through code so this

00:30:55,520 --> 00:31:00,880
is infrastructure as code now

00:30:57,519 --> 00:31:03,200
for kubernetes um so

00:31:00,880 --> 00:31:04,960
with that um rather than doing any more

00:31:03,200 --> 00:31:06,080
demos i see some questions coming in

00:31:04,960 --> 00:31:08,080
and i'd really like to get to the

00:31:06,080 --> 00:31:09,440
questions if it's all right

00:31:08,080 --> 00:31:12,240
with everyone else could we start

00:31:09,440 --> 00:31:12,240
answering some of these

00:31:14,640 --> 00:31:18,399
sounds good william uh can you hear me

00:31:17,360 --> 00:31:20,480
okay

00:31:18,399 --> 00:31:21,760
yeah we can and everyone this is uh

00:31:20,480 --> 00:31:24,640
connie lynn our events

00:31:21,760 --> 00:31:26,159
manager at rancher and so thank you for

00:31:24,640 --> 00:31:29,120
helping us today with um

00:31:26,159 --> 00:31:29,120
with questions

00:31:29,279 --> 00:31:35,600
hello yeah thank uh happy to be on here

00:31:32,960 --> 00:31:37,279
um so yeah we do have quite a bit of

00:31:35,600 --> 00:31:38,559
questions coming in i'm gonna kind of go

00:31:37,279 --> 00:31:40,960
down this list here

00:31:38,559 --> 00:31:43,120
uh you know there's some questions that

00:31:40,960 --> 00:31:44,880
came in earlier during your presentation

00:31:43,120 --> 00:31:48,000
william so

00:31:44,880 --> 00:31:50,000
zolt here asked um which also is related

00:31:48,000 --> 00:31:50,559
to another question how are secrets

00:31:50,000 --> 00:31:53,279
managed

00:31:50,559 --> 00:31:54,000
especially ones that have to differ

00:31:53,279 --> 00:31:56,720
between

00:31:54,000 --> 00:31:56,720
clusters

00:31:57,440 --> 00:32:01,390
yes yes that's a very good question

00:32:00,960 --> 00:32:04,469
um

00:32:01,390 --> 00:32:04,469
[Music]

00:32:05,679 --> 00:32:08,799
i'm actually i'm actually thinking about

00:32:07,120 --> 00:32:10,480
our new backup operator

00:32:08,799 --> 00:32:12,320
because our backup operator we actually

00:32:10,480 --> 00:32:14,159
have a decryption engine

00:32:12,320 --> 00:32:15,360
for when we pull the secret out of state

00:32:14,159 --> 00:32:18,240
and we store it in

00:32:15,360 --> 00:32:19,440
the backup object i think that's i think

00:32:18,240 --> 00:32:20,880
that's the same thing we do here because

00:32:19,440 --> 00:32:23,440
we actually are basically

00:32:20,880 --> 00:32:25,120
capturing every kubernetes resource with

00:32:23,440 --> 00:32:26,720
our backup operator

00:32:25,120 --> 00:32:29,440
for preservation so i think you can use

00:32:26,720 --> 00:32:31,039
that same encryption format

00:32:29,440 --> 00:32:33,440
but i need i need to double check on

00:32:31,039 --> 00:32:34,399
that that's a very good question now as

00:32:33,440 --> 00:32:37,840
far as secrets

00:32:34,399 --> 00:32:40,799
differing you can

00:32:37,840 --> 00:32:42,240
still mutate things outside of fleet

00:32:40,799 --> 00:32:44,799
right so anything only fleet is only

00:32:42,240 --> 00:32:46,080
caring about the things it knows about

00:32:44,799 --> 00:32:47,919
that that's part of the beauty of this

00:32:46,080 --> 00:32:51,039
again it's not a

00:32:47,919 --> 00:32:52,880
um it's not an abstraction it's not an

00:32:51,039 --> 00:32:55,840
abstraction there's no opacity

00:32:52,880 --> 00:32:57,440
on your cluster at all so what i would

00:32:55,840 --> 00:32:58,480
do in that situation right away is okay

00:32:57,440 --> 00:32:59,840
secrets are different i'm going to

00:32:58,480 --> 00:33:01,840
deploy secrets

00:32:59,840 --> 00:33:03,519
through some jenkins job or some other

00:33:01,840 --> 00:33:05,200
you know very secure controlled

00:33:03,519 --> 00:33:06,720
deployment tool

00:33:05,200 --> 00:33:08,080
that is just for that purpose because

00:33:06,720 --> 00:33:09,600
that's you know that's a small amount of

00:33:08,080 --> 00:33:13,039
entropy that i can deal with

00:33:09,600 --> 00:33:13,039
so that's how i would address that

00:33:14,399 --> 00:33:20,399
great thanks william next question is

00:33:17,600 --> 00:33:22,720
from patrick patrick asks can the

00:33:20,399 --> 00:33:25,039
continuous delivery configuration in

00:33:22,720 --> 00:33:27,760
rancher also be done using code with

00:33:25,039 --> 00:33:27,760
terraform

00:33:28,799 --> 00:33:35,760
terraform for instance yeah

00:33:32,399 --> 00:33:35,760
so using terraform

00:33:36,840 --> 00:33:41,440
to i mean tara i'm just trying to think

00:33:39,679 --> 00:33:43,519
of how terraform could be applied here

00:33:41,440 --> 00:33:46,000
because terraform is

00:33:43,519 --> 00:33:46,640
largely concerned of the infrastructure

00:33:46,000 --> 00:33:48,880
um

00:33:46,640 --> 00:33:50,559
below and so by the time we get to fleet

00:33:48,880 --> 00:33:51,760
we've already got kubernetes clusters

00:33:50,559 --> 00:33:54,240
running now

00:33:51,760 --> 00:33:55,919
terraform could be producing the

00:33:54,240 --> 00:33:57,440
clusters that then get registered into

00:33:55,919 --> 00:33:58,480
the fleet agent

00:33:57,440 --> 00:34:00,559
into the fleet system so the

00:33:58,480 --> 00:34:02,320
registration of a working cluster again

00:34:00,559 --> 00:34:03,919
is kind of here

00:34:02,320 --> 00:34:06,880
right this is where i sort of assign

00:34:03,919 --> 00:34:09,200
clusters to now be

00:34:06,880 --> 00:34:10,960
registered to be assimilated by the borg

00:34:09,200 --> 00:34:11,919
if you will because any star trek fans

00:34:10,960 --> 00:34:13,040
right the board would come and

00:34:11,919 --> 00:34:13,839
assimilate you and now you're part of

00:34:13,040 --> 00:34:15,040
the collective and

00:34:13,839 --> 00:34:17,440
that's actually not a far-fetched

00:34:15,040 --> 00:34:18,000
analogy because what i've read is the

00:34:17,440 --> 00:34:20,240
original

00:34:18,000 --> 00:34:21,679
google technology was actually called

00:34:20,240 --> 00:34:23,599
seven of nine

00:34:21,679 --> 00:34:24,879
and then later borg you know so either

00:34:23,599 --> 00:34:27,119
of them are

00:34:24,879 --> 00:34:27,919
um either of them are quite you know

00:34:27,119 --> 00:34:30,320
star trek

00:34:27,919 --> 00:34:31,679
star trek meaning so yes the same you

00:34:30,320 --> 00:34:33,760
can just really think of like

00:34:31,679 --> 00:34:35,040
something has to create the the thing

00:34:33,760 --> 00:34:35,440
that is going to be assimilated by the

00:34:35,040 --> 00:34:38,159
borg

00:34:35,440 --> 00:34:39,200
if you will um and that could be

00:34:38,159 --> 00:34:41,919
terraform

00:34:39,200 --> 00:34:42,879
but uh terraform doesn't have really a

00:34:41,919 --> 00:34:44,159
place once we've

00:34:42,879 --> 00:34:45,280
got the cluster running because now

00:34:44,159 --> 00:34:46,960
we're controlling everything through

00:34:45,280 --> 00:34:50,240
kubernetes

00:34:46,960 --> 00:34:50,240
so i hope that answers the question

00:34:52,800 --> 00:34:58,560
sounds good thanks so

00:34:56,240 --> 00:34:59,359
a couple additional questions coming in

00:34:58,560 --> 00:35:03,599
here let's

00:34:59,359 --> 00:35:06,720
see can we create clusters on gke

00:35:03,599 --> 00:35:10,480
aks or eks from rancher or

00:35:06,720 --> 00:35:12,480
should we register after creation

00:35:10,480 --> 00:35:14,400
that's a great question yeah um you can

00:35:12,480 --> 00:35:16,000
do that um

00:35:14,400 --> 00:35:19,520
basically you can do both so you're kind

00:35:16,000 --> 00:35:19,520
of asking uh an opinion

00:35:20,079 --> 00:35:24,079
question which i think i would want to

00:35:22,800 --> 00:35:27,440
know a little more about your

00:35:24,079 --> 00:35:30,320
use case but um if i look at the ad

00:35:27,440 --> 00:35:32,720
cluster page here in rancher

00:35:30,320 --> 00:35:35,119
it's probably easiest in those cases to

00:35:32,720 --> 00:35:36,560
just do it right from rancher

00:35:35,119 --> 00:35:38,160
so i could go down here and just click

00:35:36,560 --> 00:35:41,280
eks

00:35:38,160 --> 00:35:42,640
and choose the region put your amazon

00:35:41,280 --> 00:35:44,079
keys in

00:35:42,640 --> 00:35:45,520
and have to fill out some more forms and

00:35:44,079 --> 00:35:47,280
it will basically talk to amazon and say

00:35:45,520 --> 00:35:49,599
build a cluster and register it

00:35:47,280 --> 00:35:51,599
um we are finding too that there's a lot

00:35:49,599 --> 00:35:53,119
of people who want to

00:35:51,599 --> 00:35:54,720
use something okay so it ties into the

00:35:53,119 --> 00:35:56,000
previous question terraform they want to

00:35:54,720 --> 00:35:57,119
use terraform because they like what

00:35:56,000 --> 00:35:59,359
that provides

00:35:57,119 --> 00:36:01,760
to build their infrastructure so in that

00:35:59,359 --> 00:36:04,720
case use terraform to build eks

00:36:01,760 --> 00:36:06,160
and then you can register it or import

00:36:04,720 --> 00:36:08,480
it into rancher

00:36:06,160 --> 00:36:09,839
and continue on the journey with rancher

00:36:08,480 --> 00:36:12,480
the management so

00:36:09,839 --> 00:36:13,839
both are available the easiest is just

00:36:12,480 --> 00:36:16,640
to use rancher just to provision into

00:36:13,839 --> 00:36:19,280
eksakis or gke

00:36:16,640 --> 00:36:19,280
with one click

00:36:21,440 --> 00:36:26,880
great all right we have a few additional

00:36:23,760 --> 00:36:26,880
questions here

00:36:27,119 --> 00:36:30,960
one attendee is asking will fleet obey

00:36:29,680 --> 00:36:33,200
hpa

00:36:30,960 --> 00:36:36,320
or scale down to manifest original

00:36:33,200 --> 00:36:39,440
replicas value

00:36:36,320 --> 00:36:42,160
that's a very insightful

00:36:39,440 --> 00:36:43,280
and sort of like advanced question that

00:36:42,160 --> 00:36:44,960
would be like the advanced question on

00:36:43,280 --> 00:36:48,880
the test wouldn't it

00:36:44,960 --> 00:36:50,640
to to know that um i like this i'm glad

00:36:48,880 --> 00:36:54,240
they're keeping me on my toes

00:36:50,640 --> 00:36:56,320
i would think that it would um it would

00:36:54,240 --> 00:36:58,640
see the transaction completion as

00:36:56,320 --> 00:36:58,640
um

00:36:59,359 --> 00:37:03,760
so so so the transactions that are

00:37:01,440 --> 00:37:07,599
driven are driven by git

00:37:03,760 --> 00:37:08,480
um changes so in theory if it made the

00:37:07,599 --> 00:37:10,960
transaction

00:37:08,480 --> 00:37:12,640
complete and the hpa is deployed it's

00:37:10,960 --> 00:37:14,240
not going to necessarily be like

00:37:12,640 --> 00:37:15,839
seeing oh did the deployment number

00:37:14,240 --> 00:37:17,280
change from what was in get it's not

00:37:15,839 --> 00:37:18,640
doing that

00:37:17,280 --> 00:37:19,760
because it's not trying to control those

00:37:18,640 --> 00:37:22,079
things it's only going to be pushing

00:37:19,760 --> 00:37:25,760
down changes that get

00:37:22,079 --> 00:37:29,280
is signaling so now if git excuse me

00:37:25,760 --> 00:37:32,480
if the hpa does its thing and mutates

00:37:29,280 --> 00:37:35,440
the scale of that deployment

00:37:32,480 --> 00:37:36,720
and then later you make a change in git

00:37:35,440 --> 00:37:38,160
it's going to get reset back to that

00:37:36,720 --> 00:37:40,320
original number if you've defined that

00:37:38,160 --> 00:37:40,320
as a

00:37:41,119 --> 00:37:47,040
replica quantity there might be a way in

00:37:44,720 --> 00:37:49,440
the hpa yaml to make sure that it

00:37:47,040 --> 00:37:52,320
doesn't do that

00:37:49,440 --> 00:37:54,160
i'd have to look into that but

00:37:52,320 --> 00:37:55,839
essentially it's possible that we'd have

00:37:54,160 --> 00:37:56,720
to figure out exactly the best way to do

00:37:55,839 --> 00:37:59,040
it

00:37:56,720 --> 00:38:00,160
so let's um definitely feel free to

00:37:59,040 --> 00:38:02,960
follow up with me william

00:38:00,160 --> 00:38:04,079
rancher if you want to discuss that

00:38:02,960 --> 00:38:05,839
further or just

00:38:04,079 --> 00:38:08,160
jump in one of our user slacks and ask

00:38:05,839 --> 00:38:08,160
someone

00:38:10,880 --> 00:38:14,480
great thank you william another question

00:38:14,000 --> 00:38:17,680
here

00:38:14,480 --> 00:38:20,640
in case of build service

00:38:17,680 --> 00:38:21,280
upload helm chart uh to the home repo

00:38:20,640 --> 00:38:24,320
and push

00:38:21,280 --> 00:38:27,119
image to the registry

00:38:24,320 --> 00:38:27,680
to use rancher ui api to deploy the

00:38:27,119 --> 00:38:30,720
chart

00:38:27,680 --> 00:38:32,079
um kind of that workflow what is the

00:38:30,720 --> 00:38:34,960
recommended way to

00:38:32,079 --> 00:38:34,960
use fleet

00:38:36,000 --> 00:38:43,200
yeah so if you're using fleets you

00:38:40,560 --> 00:38:44,800
aren't necessarily going to use the

00:38:43,200 --> 00:38:45,520
catalog in the same way there is a bit

00:38:44,800 --> 00:38:48,320
of

00:38:45,520 --> 00:38:50,480
overlap there so like adding a home

00:38:48,320 --> 00:38:53,280
chart to a to a repository and then

00:38:50,480 --> 00:38:54,720
going to our sort of our classic app

00:38:53,280 --> 00:38:57,040
catalog

00:38:54,720 --> 00:38:58,240
oops i'm not in the right spot am i

00:38:57,040 --> 00:39:01,839
because these all these windows are in

00:38:58,240 --> 00:39:01,839
front now

00:39:04,000 --> 00:39:07,920
so our classic app catalog here where

00:39:05,599 --> 00:39:10,960
you can deploy apps this is based on

00:39:07,920 --> 00:39:12,320
repositories you build you probably

00:39:10,960 --> 00:39:14,800
don't want to use both of these in the

00:39:12,320 --> 00:39:14,800
same way

00:39:15,200 --> 00:39:18,640
or you i mean you could so you could if

00:39:17,040 --> 00:39:20,400
you basically hey i just want grafana

00:39:18,640 --> 00:39:24,000
for this one cluster that's fine

00:39:20,400 --> 00:39:25,520
but if if i'm doing this across a lot of

00:39:24,000 --> 00:39:27,119
clusters and i want consistency i

00:39:25,520 --> 00:39:28,880
wouldn't do it through here i would

00:39:27,119 --> 00:39:31,040
take this code and put it into a fleet

00:39:28,880 --> 00:39:34,320
repo and control it that way

00:39:31,040 --> 00:39:36,000
so there are tools that can both do

00:39:34,320 --> 00:39:36,960
similar jobs but one of them is better

00:39:36,000 --> 00:39:43,839
at a certain

00:39:36,960 --> 00:39:43,839
scale if that makes sense

00:39:44,000 --> 00:39:48,640
great thanks for answering that um the

00:39:47,040 --> 00:39:51,200
next question

00:39:48,640 --> 00:39:51,680
from patrick asks how is the replica

00:39:51,200 --> 00:39:54,480
change

00:39:51,680 --> 00:39:55,440
in redis from two to three different

00:39:54,480 --> 00:40:01,680
using fleet

00:39:55,440 --> 00:40:01,680
than using uh argo argo cd for instance

00:40:02,400 --> 00:40:05,920
yeah i don't know of any difference with

00:40:04,079 --> 00:40:07,520
argo cd and i don't know where i go well

00:40:05,920 --> 00:40:11,040
enough probably to

00:40:07,520 --> 00:40:11,040
to make any comments on it

00:40:11,760 --> 00:40:15,839
there is some difference in approach i

00:40:13,280 --> 00:40:19,200
know from from how our engineering team

00:40:15,839 --> 00:40:19,760
um developed fleet um i think argo

00:40:19,200 --> 00:40:21,760
definitely

00:40:19,760 --> 00:40:23,200
does more of is more of a top-down push

00:40:21,760 --> 00:40:24,480
model less of an agent and check-in

00:40:23,200 --> 00:40:27,119
model

00:40:24,480 --> 00:40:28,240
but in terms of that one nuance i don't

00:40:27,119 --> 00:40:31,440
i don't know of any

00:40:28,240 --> 00:40:31,440
difference off the top of my head

00:40:34,560 --> 00:40:37,760
great so our next there's two questions

00:40:37,119 --> 00:40:40,800
here

00:40:37,760 --> 00:40:43,839
related to git repos

00:40:40,800 --> 00:40:44,880
niko asks can the get repos be deployed

00:40:43,839 --> 00:40:50,480
in new rancher

00:40:44,880 --> 00:40:52,720
project as well and a second question

00:40:50,480 --> 00:40:55,200
asks how can accidental or forgotten

00:40:52,720 --> 00:40:57,440
manual changes be removed

00:40:55,200 --> 00:41:00,960
to synchronize what's deployed with

00:40:57,440 --> 00:41:00,960
what's in the gear repo

00:41:03,040 --> 00:41:06,240
okay i'll answer the last one first

00:41:05,119 --> 00:41:09,280
because that one i

00:41:06,240 --> 00:41:10,240
can show quickly so i can just do a

00:41:09,280 --> 00:41:12,319
force update

00:41:10,240 --> 00:41:14,319
and that should override that should

00:41:12,319 --> 00:41:17,520
override anything that was

00:41:14,319 --> 00:41:18,960
different now or out of sync so if i did

00:41:17,520 --> 00:41:19,359
make manual changes i could kind of

00:41:18,960 --> 00:41:23,440
force

00:41:19,359 --> 00:41:27,040
change them that way the first question

00:41:23,440 --> 00:41:27,040
um i'm not sure i understand

00:41:27,680 --> 00:41:31,200
could you say it one more time yeah so

00:41:30,079 --> 00:41:33,119
it asks

00:41:31,200 --> 00:41:34,480
nico asks can the get me pose be

00:41:33,119 --> 00:41:39,280
deployed

00:41:34,480 --> 00:41:42,720
in a new rancher project as well

00:41:39,280 --> 00:41:46,079
um so maybe the so can like

00:41:42,720 --> 00:41:47,680
the the code the applications and

00:41:46,079 --> 00:41:48,880
deployments represented here can they be

00:41:47,680 --> 00:41:52,079
deployed in a different

00:41:48,880 --> 00:41:56,319
project i think maybe and

00:41:52,079 --> 00:42:00,400
um yeah so right now

00:41:56,319 --> 00:42:04,079
these were how did we define that

00:42:00,400 --> 00:42:07,359
right now these were deployed to default

00:42:04,079 --> 00:42:08,560
um we could we could define that i think

00:42:07,359 --> 00:42:10,319
through the fleet bundle

00:42:08,560 --> 00:42:11,920
and get we didn't there's none of that

00:42:10,319 --> 00:42:13,839
here in this example but i think we can

00:42:11,920 --> 00:42:17,760
also do that from

00:42:13,839 --> 00:42:19,680
the definition

00:42:17,760 --> 00:42:21,119
here let's see i think we can say the

00:42:19,680 --> 00:42:22,880
name

00:42:21,119 --> 00:42:25,520
targeting space yeah there it is there

00:42:22,880 --> 00:42:26,960
so we can say

00:42:25,520 --> 00:42:28,800
you know the namespace we want to deploy

00:42:26,960 --> 00:42:30,640
it into a namespace is just a member of

00:42:28,800 --> 00:42:32,880
a project

00:42:30,640 --> 00:42:35,680
in rancher project is just sort of a

00:42:32,880 --> 00:42:37,920
container around namespaces

00:42:35,680 --> 00:42:37,920
okay

00:42:40,960 --> 00:42:47,440
great so it looks like we

00:42:44,000 --> 00:42:50,000
have um seen two questions left here

00:42:47,440 --> 00:42:51,520
uh the next one is i think more of a

00:42:50,000 --> 00:42:55,119
general rancher question

00:42:51,520 --> 00:42:55,920
so does rancher allow us to upgrade all

00:42:55,119 --> 00:42:58,400
nodes

00:42:55,920 --> 00:42:59,520
uh kubernetes versions for a cluster

00:42:58,400 --> 00:43:04,160
group

00:42:59,520 --> 00:43:04,160
whether it is managed clusters or k3s

00:43:04,560 --> 00:43:08,560
so upgrading the kubernetes pieces on

00:43:06,800 --> 00:43:11,280
them

00:43:08,560 --> 00:43:12,560
manage clusters or k3s so if the moment

00:43:11,280 --> 00:43:14,079
we're talking about

00:43:12,560 --> 00:43:16,000
managed clusters like the moment we're

00:43:14,079 --> 00:43:18,079
talking about different kubernetes

00:43:16,000 --> 00:43:19,839
infrastructure management

00:43:18,079 --> 00:43:21,920
then then um it's not going to be the

00:43:19,839 --> 00:43:23,200
same across right so like if it's k3s

00:43:21,920 --> 00:43:25,599
there's an upgrade path

00:43:23,200 --> 00:43:26,240
for for upgrading all those nodes if

00:43:25,599 --> 00:43:28,160
it's

00:43:26,240 --> 00:43:29,920
managed by if it's kubernetes managed by

00:43:28,160 --> 00:43:31,920
google by gke

00:43:29,920 --> 00:43:33,599
they they have their own way of they

00:43:31,920 --> 00:43:35,920
control that we don't we don't get to

00:43:33,599 --> 00:43:38,160
control that we can make an api call

00:43:35,920 --> 00:43:40,160
maybe asking them to in some cases but

00:43:38,160 --> 00:43:42,319
we don't get to control how the update

00:43:40,160 --> 00:43:45,280
process works so it is different than

00:43:42,319 --> 00:43:46,960
for different cluster types um you know

00:43:45,280 --> 00:43:48,400
what i think what you're

00:43:46,960 --> 00:43:50,319
you're envisioning is a world where i

00:43:48,400 --> 00:43:51,839
kind of have one way of managing the

00:43:50,319 --> 00:43:54,400
kubernetes distribution

00:43:51,839 --> 00:43:55,280
on every node across my infrastructure

00:43:54,400 --> 00:43:57,200
types

00:43:55,280 --> 00:43:58,640
if if that's what you want then you want

00:43:57,200 --> 00:44:02,160
to look at something

00:43:58,640 --> 00:44:03,599
like k3s or rke2

00:44:02,160 --> 00:44:05,920
and then you're using that same

00:44:03,599 --> 00:44:09,119
technology to build even in the cloud

00:44:05,920 --> 00:44:10,160
so like then i wouldn't use eks i would

00:44:09,119 --> 00:44:12,960
use

00:44:10,160 --> 00:44:14,079
rke on ec2 just nodes because then i

00:44:12,960 --> 00:44:15,920
control

00:44:14,079 --> 00:44:18,319
what the upgrade path is like and i can

00:44:15,920 --> 00:44:20,640
have it consistent for ec2

00:44:18,319 --> 00:44:22,000
and for my own print and for my edge so

00:44:20,640 --> 00:44:23,599
you'd have to use the same technology

00:44:22,000 --> 00:44:25,680
across and that's what rancher provides

00:44:23,599 --> 00:44:27,359
but we we also recognize that a lot of

00:44:25,680 --> 00:44:28,640
people want to use

00:44:27,359 --> 00:44:30,960
they're so much in the cloud that they

00:44:28,640 --> 00:44:32,400
might as well just use eks

00:44:30,960 --> 00:44:34,480
because they have so much in the cloud

00:44:32,400 --> 00:44:36,160
so we support both of them

00:44:34,480 --> 00:44:38,319
they're both first-class citizens for us

00:44:36,160 --> 00:44:39,839
but if your goal is consistency across

00:44:38,319 --> 00:44:41,440
infrastructures then you need to choose

00:44:39,839 --> 00:44:44,480
a rancher technology

00:44:41,440 --> 00:44:44,480
as your distribution

00:44:48,720 --> 00:44:52,960
thanks william all right so um looks

00:44:51,920 --> 00:44:56,240
like

00:44:52,960 --> 00:44:57,200
you're getting close on time uh one last

00:44:56,240 --> 00:45:00,079
question

00:44:57,200 --> 00:45:00,960
here i do see additional questions

00:45:00,079 --> 00:45:03,440
coming in but

00:45:00,960 --> 00:45:05,359
um hopefully we'll be able to follow up

00:45:03,440 --> 00:45:07,040
with attendees here

00:45:05,359 --> 00:45:08,640
and get your individual questions

00:45:07,040 --> 00:45:11,920
answered that we won't get

00:45:08,640 --> 00:45:12,400
able to get to today um so last question

00:45:11,920 --> 00:45:14,880
here

00:45:12,400 --> 00:45:16,960
william what is the easiest way to try

00:45:14,880 --> 00:45:19,200
out fleet

00:45:16,960 --> 00:45:20,319
that's a good question um well and

00:45:19,200 --> 00:45:21,760
important because i hope you guys can

00:45:20,319 --> 00:45:23,119
all try this ultimately that's the best

00:45:21,760 --> 00:45:23,920
way to learn and see if it's right for

00:45:23,119 --> 00:45:27,680
you

00:45:23,920 --> 00:45:31,520
um easiest way is to

00:45:27,680 --> 00:45:35,280
set up a rancher server and um

00:45:31,520 --> 00:45:37,119
then add more add one cluster to it

00:45:35,280 --> 00:45:38,319
if i had to do this with like two nodes

00:45:37,119 --> 00:45:39,680
let's just say let's say i want to go to

00:45:38,319 --> 00:45:41,200
digital ocean or

00:45:39,680 --> 00:45:43,280
you know light sail or ec2 and just

00:45:41,200 --> 00:45:47,440
create two nodes here's what i would do

00:45:43,280 --> 00:45:50,880
i would um uh

00:45:47,440 --> 00:45:52,160
i would actually check out rancher d

00:45:50,880 --> 00:45:54,560
and this is actually not considered

00:45:52,160 --> 00:45:55,760
production uh ready yet this is actually

00:45:54,560 --> 00:45:57,599
brand new so don't

00:45:55,760 --> 00:45:59,119
use this for evaluation purposes but

00:45:57,599 --> 00:46:00,720
this is really fast to get started i

00:45:59,119 --> 00:46:05,359
would check out

00:46:00,720 --> 00:46:05,359
sorry you know that window

00:46:06,960 --> 00:46:10,640
i can't move my windows at all

00:46:11,599 --> 00:46:16,800
all the zoom windows are on top now of

00:46:14,560 --> 00:46:16,800
all right

00:46:19,599 --> 00:46:23,520
so i check out rancher d and just google

00:46:21,599 --> 00:46:24,640
rancher d and this blog will tell you

00:46:23,520 --> 00:46:28,079
about it and literally

00:46:24,640 --> 00:46:30,240
to run the installer is this one command

00:46:28,079 --> 00:46:31,200
on a single node and that will install

00:46:30,240 --> 00:46:34,000
your rancher server

00:46:31,200 --> 00:46:36,160
it will look just like this and that's

00:46:34,000 --> 00:46:38,960
actually what i'm i'm running here on a

00:46:36,160 --> 00:46:39,359
on a vm at my house um yes i'm at home

00:46:38,960 --> 00:46:40,880
uh

00:46:39,359 --> 00:46:42,640
don't tell my boss i didn't come into

00:46:40,880 --> 00:46:44,160
the office today

00:46:42,640 --> 00:46:45,440
just kidding we all know we're all

00:46:44,160 --> 00:46:46,880
everyone most of us are working from

00:46:45,440 --> 00:46:48,720
home these days so yes this is my home

00:46:46,880 --> 00:46:51,839
network this is a home

00:46:48,720 --> 00:46:53,200
vm single node running rancher with

00:46:51,839 --> 00:46:55,920
rancher d

00:46:53,200 --> 00:46:56,240
and then once i install rancher d then i

00:46:55,920 --> 00:46:58,800
need

00:46:56,240 --> 00:46:59,920
one additional node to be my downstream

00:46:58,800 --> 00:47:02,319
cluster

00:46:59,920 --> 00:47:03,200
and what i would do for that is k3s

00:47:02,319 --> 00:47:05,520
because it's

00:47:03,200 --> 00:47:06,720
really uh resource efficient so i can

00:47:05,520 --> 00:47:09,200
run a whole cluster again

00:47:06,720 --> 00:47:11,359
on one node very efficiently and guess

00:47:09,200 --> 00:47:13,200
what that's also one command

00:47:11,359 --> 00:47:14,640
so i would run that command and then i

00:47:13,200 --> 00:47:16,319
would go into my range of cluster that i

00:47:14,640 --> 00:47:18,240
have running say add cluster

00:47:16,319 --> 00:47:19,599
and it would be another cluster through

00:47:18,240 --> 00:47:23,280
bar

00:47:19,599 --> 00:47:26,240
and i would run i would copy this

00:47:23,280 --> 00:47:28,240
command on to the another the other vm

00:47:26,240 --> 00:47:29,599
that i just ran k3s on

00:47:28,240 --> 00:47:31,760
so that it gets registered into the

00:47:29,599 --> 00:47:32,960
cluster and at that point now i have

00:47:31,760 --> 00:47:35,040
rancher server

00:47:32,960 --> 00:47:36,319
and one downstream cluster and that's

00:47:35,040 --> 00:47:38,559
all i need to try out fleet

00:47:36,319 --> 00:47:39,760
and a git repo github and just go ahead

00:47:38,559 --> 00:47:41,599
and fork uh

00:47:39,760 --> 00:47:43,520
fork the examples from rancher slash

00:47:41,599 --> 00:47:44,559
fleet examples just to try it out

00:47:43,520 --> 00:47:47,359
you don't even need to like write your

00:47:44,559 --> 00:47:49,280
own yaml just fork this one

00:47:47,359 --> 00:47:53,839
on our github so that's that's what i

00:47:49,280 --> 00:47:53,839
would do

00:47:58,000 --> 00:48:02,079
thanks william i hope everybody can give

00:48:01,040 --> 00:48:05,200
that a shot

00:48:02,079 --> 00:48:06,000
and uh william if you do you have any

00:48:05,200 --> 00:48:09,280
more comments or

00:48:06,000 --> 00:48:10,880
are we pretty much wrapped up we've done

00:48:09,280 --> 00:48:13,520
enough talking haven't i'm sure you guys

00:48:10,880 --> 00:48:13,520
are tired of it

00:48:13,599 --> 00:48:17,599
but thanks for everyone for

00:48:14,880 --> 00:48:18,960
participating and i hope we can

00:48:17,599 --> 00:48:21,200
hope we can help you guys with more

00:48:18,960 --> 00:48:23,359
things in the future

00:48:21,200 --> 00:48:25,200
right thank you so much william that was

00:48:23,359 --> 00:48:33,920
great thanks connie

00:48:25,200 --> 00:48:33,920

YouTube URL: https://www.youtube.com/watch?v=joj6GH6VFlU


