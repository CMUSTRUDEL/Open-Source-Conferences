Title: LF Live Webinar: Experiments with Software? Introduction to Progressive Delivery
Publication date: 2021-06-08
Playlist: LF Live Webinars
Description: 
	sponsored by Harness

Learn the basics of Progressive Delivery and how incremental delivery such as A/B testing and feature management bring experimentation to all levels of infrastructure and applications.
Captions: 
	00:00:00,080 --> 00:00:04,400
thanks christina and uh very excited to

00:00:03,520 --> 00:00:06,480
be here

00:00:04,400 --> 00:00:08,400
and helping people learn about what does

00:00:06,480 --> 00:00:09,360
this mean to experiment that with

00:00:08,400 --> 00:00:11,920
software

00:00:09,360 --> 00:00:12,960
and so who are your guides today so i'm

00:00:11,920 --> 00:00:15,200
robbie lachman

00:00:12,960 --> 00:00:16,800
i'm a lead evangelist here at harness i

00:00:15,200 --> 00:00:18,000
worked at several distributed systems

00:00:16,800 --> 00:00:20,080
firms before

00:00:18,000 --> 00:00:21,600
in various roles and also along with me

00:00:20,080 --> 00:00:23,119
is my good friend ethan but ethan for

00:00:21,600 --> 00:00:25,279
folks who don't know you maybe a little

00:00:23,119 --> 00:00:27,119
bit of background about yourself

00:00:25,279 --> 00:00:28,960
yeah hey everyone thank you for joining

00:00:27,119 --> 00:00:30,880
today so i'm a product manager here at

00:00:28,960 --> 00:00:31,760
harness i've been working in devops

00:00:30,880 --> 00:00:33,760
tooling

00:00:31,760 --> 00:00:36,000
for six or seven years at this point and

00:00:33,760 --> 00:00:38,879
in the startup industry for about

00:00:36,000 --> 00:00:41,760
a decade consumer stuff internal stuff

00:00:38,879 --> 00:00:43,520
and excited to talk to y'all today

00:00:41,760 --> 00:00:45,200
cool thanks ethan so what are we going

00:00:43,520 --> 00:00:46,399
to be talking about today

00:00:45,200 --> 00:00:48,640
so the first thing we'll be talking

00:00:46,399 --> 00:00:50,000
about is the scientific method so if you

00:00:48,640 --> 00:00:51,680
go back to middle school

00:00:50,000 --> 00:00:53,199
or even elementary school when you learn

00:00:51,680 --> 00:00:55,840
about the scientific method

00:00:53,199 --> 00:00:57,199
uh well now it's for software we're

00:00:55,840 --> 00:00:59,760
going to also be talking about

00:00:57,199 --> 00:01:00,719
this term called progressive delivery

00:00:59,760 --> 00:01:02,079
and so ethan

00:01:00,719 --> 00:01:04,320
diggins a little bit about some of the

00:01:02,079 --> 00:01:05,280
pillars of progressive delivery and also

00:01:04,320 --> 00:01:07,360
how we can start implementing

00:01:05,280 --> 00:01:10,320
progressive delivery

00:01:07,360 --> 00:01:12,000
for the first time and finally what does

00:01:10,320 --> 00:01:13,840
it take to actually implement

00:01:12,000 --> 00:01:15,360
a feature flag so a big part of

00:01:13,840 --> 00:01:17,119
progressive delivery

00:01:15,360 --> 00:01:18,799
is this concept of feature flagging so

00:01:17,119 --> 00:01:19,360
feature flags can be for application

00:01:18,799 --> 00:01:21,280
features

00:01:19,360 --> 00:01:23,040
it can be for infrastructure or anything

00:01:21,280 --> 00:01:25,040
in between but really we'll

00:01:23,040 --> 00:01:26,880
take a look at and walk through hey when

00:01:25,040 --> 00:01:28,159
deciding when to flag something when not

00:01:26,880 --> 00:01:31,200
to flag something

00:01:28,159 --> 00:01:33,600
what is your some of your options so

00:01:31,200 --> 00:01:34,479
science let's start with one of my

00:01:33,600 --> 00:01:37,840
favorite topics

00:01:34,479 --> 00:01:39,920
as uh as adolescents science

00:01:37,840 --> 00:01:42,479
so who who remembers the scientific

00:01:39,920 --> 00:01:45,119
method right so it's a scientific method

00:01:42,479 --> 00:01:46,000
it's basically an empirical way of

00:01:45,119 --> 00:01:48,960
acquiring data

00:01:46,000 --> 00:01:50,159
right so first of all imagine you're

00:01:48,960 --> 00:01:51,680
doing an experiment

00:01:50,159 --> 00:01:53,360
right so you say you know what part of

00:01:51,680 --> 00:01:55,520
this experiment might be if i

00:01:53,360 --> 00:01:56,960
were to melt if i raised a temperature

00:01:55,520 --> 00:01:59,040
of ice above

00:01:56,960 --> 00:02:01,040
you know 32 degrees fahrenheit or zero

00:01:59,040 --> 00:02:02,640
celsius it would melt right and so

00:02:01,040 --> 00:02:04,479
uh basically it involves some sort of

00:02:02,640 --> 00:02:06,479
observation um also

00:02:04,479 --> 00:02:07,840
the scientific method also makes some

00:02:06,479 --> 00:02:08,560
sort of cognitive assumptions right so

00:02:07,840 --> 00:02:11,360
observation

00:02:08,560 --> 00:02:12,800
i'm looking at the ice the cognitive

00:02:11,360 --> 00:02:15,360
assumption it will melt

00:02:12,800 --> 00:02:16,400
above a certain temperature uh and also

00:02:15,360 --> 00:02:18,400
that that's

00:02:16,400 --> 00:02:20,160
core to having a hypothesis right saying

00:02:18,400 --> 00:02:22,480
hey i hypothesize if it

00:02:20,160 --> 00:02:23,440
goes above a certain temperature ice is

00:02:22,480 --> 00:02:25,760
going to melt

00:02:23,440 --> 00:02:26,640
and really you're basing your deductions

00:02:25,760 --> 00:02:28,640
uh so

00:02:26,640 --> 00:02:30,319
you know you're challenging and

00:02:28,640 --> 00:02:32,720
validating or invalidating your

00:02:30,319 --> 00:02:34,239
hypothesis based on an experiment

00:02:32,720 --> 00:02:36,000
you know we all done as some sort of

00:02:34,239 --> 00:02:37,920
experiment in our days but

00:02:36,000 --> 00:02:39,599
it's kind of lacking in the software

00:02:37,920 --> 00:02:41,440
world right like as a

00:02:39,599 --> 00:02:43,280
app application engineer or software

00:02:41,440 --> 00:02:44,480
engineer um there's reasons why

00:02:43,280 --> 00:02:46,800
experimentation

00:02:44,480 --> 00:02:48,239
uh you know with real data or with users

00:02:46,800 --> 00:02:48,959
can be a little bit difficult which i'll

00:02:48,239 --> 00:02:52,640
get into

00:02:48,959 --> 00:02:54,959
in a little bit but as a consumer

00:02:52,640 --> 00:02:55,680
we're subject to experimentation all the

00:02:54,959 --> 00:02:59,040
time

00:02:55,680 --> 00:03:00,800
uh so let's let's talk about uh

00:02:59,040 --> 00:03:02,319
why i live in the southeast united

00:03:00,800 --> 00:03:04,159
states you know we're prone to getting

00:03:02,319 --> 00:03:06,159
hurricanes right so let's say

00:03:04,159 --> 00:03:07,200
let's say that a hurricane is coming or

00:03:06,159 --> 00:03:09,680
a typhoon

00:03:07,200 --> 00:03:10,959
or a monsoon depending on where where in

00:03:09,680 --> 00:03:13,519
the world you are

00:03:10,959 --> 00:03:14,959
one is coming uh there's a few things

00:03:13,519 --> 00:03:18,400
that you would do to prepare

00:03:14,959 --> 00:03:18,879
all right and so especially out where i

00:03:18,400 --> 00:03:20,800
live

00:03:18,879 --> 00:03:22,560
like if the first thing we do we have

00:03:20,800 --> 00:03:23,840
hurricanes coming you know we run to a

00:03:22,560 --> 00:03:25,840
grocery store

00:03:23,840 --> 00:03:27,599
and we run to a home improvement store

00:03:25,840 --> 00:03:31,680
and we procure

00:03:27,599 --> 00:03:33,840
several items but there's one item that

00:03:31,680 --> 00:03:34,560
i always find that it's really awkward

00:03:33,840 --> 00:03:37,599
that

00:03:34,560 --> 00:03:39,040
they move to the front of the store when

00:03:37,599 --> 00:03:42,159
there's a hurricane coming

00:03:39,040 --> 00:03:43,360
which is they move beer at my grocery

00:03:42,159 --> 00:03:45,280
chain i go to

00:03:43,360 --> 00:03:47,040
uh to the front of the store and it's

00:03:45,280 --> 00:03:48,879
like you know we're going to be stuck in

00:03:47,040 --> 00:03:51,200
the house for a day or two until the

00:03:48,879 --> 00:03:53,439
hurricane passes like

00:03:51,200 --> 00:03:55,200
you know might not need food but i

00:03:53,439 --> 00:03:58,080
better get some beer and wine

00:03:55,200 --> 00:03:59,200
at the pass the time i i i'm like no if

00:03:58,080 --> 00:04:00,879
i think like that

00:03:59,200 --> 00:04:02,799
a lot of my neighbors around here must

00:04:00,879 --> 00:04:04,319
think like that because beer is front

00:04:02,799 --> 00:04:06,400
and center

00:04:04,319 --> 00:04:07,360
only for the super bowl also it's it's

00:04:06,400 --> 00:04:09,920
front and center

00:04:07,360 --> 00:04:10,959
but basically the grocery stores realize

00:04:09,920 --> 00:04:13,680
that if they move

00:04:10,959 --> 00:04:14,640
items that you tend to want and tend to

00:04:13,680 --> 00:04:17,359
impulse buy

00:04:14,640 --> 00:04:18,160
or panic by uh to to the front of the

00:04:17,359 --> 00:04:22,240
store

00:04:18,160 --> 00:04:24,560
um by hypothesis and by retail data

00:04:22,240 --> 00:04:25,759
they're actually able to sell more beer

00:04:24,560 --> 00:04:28,160
right and so

00:04:25,759 --> 00:04:29,919
why did they move this is an experiment

00:04:28,160 --> 00:04:31,600
right so someone must have had an idea

00:04:29,919 --> 00:04:33,440
hey why don't we move beer to the front

00:04:31,600 --> 00:04:36,000
of the store

00:04:33,440 --> 00:04:36,560
and so what ends up happening is that

00:04:36,000 --> 00:04:38,000
well

00:04:36,560 --> 00:04:39,919
you know instead of me meandering

00:04:38,000 --> 00:04:41,840
through the store and picking up other

00:04:39,919 --> 00:04:43,680
things like loaves of bread and other

00:04:41,840 --> 00:04:45,360
like deli meat and other things i need

00:04:43,680 --> 00:04:47,680
i instead of buying beer because it's

00:04:45,360 --> 00:04:50,479
top of mind right and so but

00:04:47,680 --> 00:04:52,320
if you kind of take take consensus of

00:04:50,479 --> 00:04:52,720
all the decisions that have to be made

00:04:52,320 --> 00:04:54,400
there

00:04:52,720 --> 00:04:56,320
right so the grocery store chain have to

00:04:54,400 --> 00:04:57,919
have business analytics are we selling

00:04:56,320 --> 00:05:00,639
more beer this is a hypothesis

00:04:57,919 --> 00:05:02,479
how can we how can we check this or even

00:05:00,639 --> 00:05:03,360
more so in your in your day-to-day life

00:05:02,479 --> 00:05:04,479
right like

00:05:03,360 --> 00:05:05,919
if you're living here in the united

00:05:04,479 --> 00:05:07,759
states you know you might get flooded in

00:05:05,919 --> 00:05:09,039
the mail like credit card offers like

00:05:07,759 --> 00:05:11,280
you know they're constantly making

00:05:09,039 --> 00:05:13,039
hypothesis driven business decisions

00:05:11,280 --> 00:05:14,560
if we lower the credit score for a

00:05:13,039 --> 00:05:15,199
platinum card would more people be

00:05:14,560 --> 00:05:17,039
approved

00:05:15,199 --> 00:05:18,320
if we raise the credit score for like

00:05:17,039 --> 00:05:20,240
silver or gold card

00:05:18,320 --> 00:05:22,720
the less people get it be approved but

00:05:20,240 --> 00:05:24,400
this is basically what hypothesis-based

00:05:22,720 --> 00:05:25,759
business decisions are based off of

00:05:24,400 --> 00:05:27,600
right and so but

00:05:25,759 --> 00:05:29,360
it equates to conversion in this case

00:05:27,600 --> 00:05:31,120
more beer sales in the credit card

00:05:29,360 --> 00:05:32,639
example it might be more folks signing

00:05:31,120 --> 00:05:33,440
up for a credit card paid more monthly

00:05:32,639 --> 00:05:36,639
fees

00:05:33,440 --> 00:05:39,120
because again it's like how how exactly

00:05:36,639 --> 00:05:40,639
are they making this decision to to

00:05:39,120 --> 00:05:41,680
either go one way or the other so it's

00:05:40,639 --> 00:05:42,800
like an a b

00:05:41,680 --> 00:05:45,840
test which we'll get into a little bit

00:05:42,800 --> 00:05:48,960
later uh but basically this is it

00:05:45,840 --> 00:05:50,639
feedback is crucial in in the technology

00:05:48,960 --> 00:05:52,080
landscape or also in the software

00:05:50,639 --> 00:05:54,000
development life cycle or even the

00:05:52,080 --> 00:05:56,560
infrastructure development lifecycle

00:05:54,000 --> 00:05:57,280
uh feedback can come in many forms right

00:05:56,560 --> 00:05:59,919
but

00:05:57,280 --> 00:06:01,680
as an engineer depending on where you

00:05:59,919 --> 00:06:03,440
sit so if you might be an operations

00:06:01,680 --> 00:06:04,960
engineer you might be an infrastructure

00:06:03,440 --> 00:06:06,800
engineer you might be a system engineer

00:06:04,960 --> 00:06:08,960
or a cloud engineer

00:06:06,800 --> 00:06:10,240
sometimes you don't want the feedback

00:06:08,960 --> 00:06:12,000
because the feedback would be

00:06:10,240 --> 00:06:13,360
fairly difficult uh kind of a personal

00:06:12,000 --> 00:06:16,160
antidote here

00:06:13,360 --> 00:06:18,000
on diabetic and i have a electronic

00:06:16,160 --> 00:06:19,600
glucose monitor on me and so

00:06:18,000 --> 00:06:21,600
one of our customers has actually the

00:06:19,600 --> 00:06:23,440
manufacturer of this and so they're

00:06:21,600 --> 00:06:24,800
extremely worried about feedback from a

00:06:23,440 --> 00:06:26,160
user because by the time

00:06:24,800 --> 00:06:28,479
if i have a problem it could be

00:06:26,160 --> 00:06:29,600
detrimental but not maybe not such a

00:06:28,479 --> 00:06:31,600
severe case

00:06:29,600 --> 00:06:33,199
uh for your organization but again it

00:06:31,600 --> 00:06:35,919
might be you know what

00:06:33,199 --> 00:06:37,039
we're we're receiving downtime or

00:06:35,919 --> 00:06:39,440
slowness or

00:06:37,039 --> 00:06:40,960
you know today's uh internet outage from

00:06:39,440 --> 00:06:42,560
uh you know fast exceed again right like

00:06:40,960 --> 00:06:45,520
you don't you don't want that

00:06:42,560 --> 00:06:46,240
type of feedback coming to you um

00:06:45,520 --> 00:06:48,319
because

00:06:46,240 --> 00:06:50,240
it's negative but again it's crucial and

00:06:48,319 --> 00:06:52,080
ethan as a product manager you know he

00:06:50,240 --> 00:06:53,199
values all feedback i'll put either not

00:06:52,080 --> 00:06:55,599
on the spot here but

00:06:53,199 --> 00:06:56,800
it it helps you learn but sometimes

00:06:55,599 --> 00:06:59,440
feedback is negative

00:06:56,800 --> 00:07:01,680
because well how do you you know how do

00:06:59,440 --> 00:07:04,400
we get feedback in software right so

00:07:01,680 --> 00:07:05,440
it's not like software i'll argue with

00:07:04,400 --> 00:07:07,919
you that has both

00:07:05,440 --> 00:07:09,599
objective and subjective feedback for

00:07:07,919 --> 00:07:12,240
using software so

00:07:09,599 --> 00:07:12,960
how do we go about rating software and

00:07:12,240 --> 00:07:15,840
it's all about

00:07:12,960 --> 00:07:17,280
well if your you know users are unhappy

00:07:15,840 --> 00:07:19,039
trying to figure out sentiment right

00:07:17,280 --> 00:07:20,240
like why are they unhappy and this is

00:07:19,039 --> 00:07:22,479
part of the risk

00:07:20,240 --> 00:07:23,759
of running an experiment because with an

00:07:22,479 --> 00:07:26,800
experiment you're trying to

00:07:23,759 --> 00:07:27,440
validate the unknown which what ends up

00:07:26,800 --> 00:07:29,520
happening is

00:07:27,440 --> 00:07:31,199
if you a little bit more risk risk

00:07:29,520 --> 00:07:32,400
adverse you might say you know what we

00:07:31,199 --> 00:07:34,240
don't know what we don't want to

00:07:32,400 --> 00:07:36,720
experiment because we don't want to have

00:07:34,240 --> 00:07:38,319
detrimental feedback we're concerned

00:07:36,720 --> 00:07:40,319
that this is the case right so

00:07:38,319 --> 00:07:42,000
this might be more of you know if you're

00:07:40,319 --> 00:07:44,000
an infrastructure engineer

00:07:42,000 --> 00:07:45,680
you're deviating off the playbook right

00:07:44,000 --> 00:07:46,160
you're you're doing things for the first

00:07:45,680 --> 00:07:48,000
time

00:07:46,160 --> 00:07:49,199
and you just want to get some sort of

00:07:48,000 --> 00:07:50,560
control feedback

00:07:49,199 --> 00:07:52,560
uh because let's take a look at

00:07:50,560 --> 00:07:54,000
typically two ways that

00:07:52,560 --> 00:07:55,599
you're getting feedback with

00:07:54,000 --> 00:07:57,120
infrastructure or software so

00:07:55,599 --> 00:07:58,960
first thing is objective software

00:07:57,120 --> 00:08:00,479
feedback right so

00:07:58,960 --> 00:08:02,080
with objective feedback this can be

00:08:00,479 --> 00:08:04,479
performance information

00:08:02,080 --> 00:08:06,479
uh this can be you know latency this

00:08:04,479 --> 00:08:08,800
could be error rates this can be

00:08:06,479 --> 00:08:10,000
pick your uh this could be uptime

00:08:08,800 --> 00:08:11,840
percents right and

00:08:10,000 --> 00:08:13,520
you know quote unquote slowness is a new

00:08:11,840 --> 00:08:15,680
downtime you know cliche

00:08:13,520 --> 00:08:18,080
saying is that uh but you you can get

00:08:15,680 --> 00:08:20,000
really objective measures

00:08:18,080 --> 00:08:21,520
of software right and this is what we

00:08:20,000 --> 00:08:24,800
typically fall back on like

00:08:21,520 --> 00:08:26,639
empirical objective data that something

00:08:24,800 --> 00:08:27,680
is performing or converting like it's

00:08:26,639 --> 00:08:29,360
supposed to

00:08:27,680 --> 00:08:31,120
where it gets a little bit more

00:08:29,360 --> 00:08:34,880
difficult and this is the one that's

00:08:31,120 --> 00:08:36,959
worrisome is the subjective feedback

00:08:34,880 --> 00:08:38,399
you know so i'll play devil's advocate

00:08:36,959 --> 00:08:40,240
we'll role playing here let's say i was

00:08:38,399 --> 00:08:41,599
a mobile app developer

00:08:40,240 --> 00:08:43,919
and this is where actually a lot of

00:08:41,599 --> 00:08:44,560
feature flags this type of a b testing

00:08:43,919 --> 00:08:45,920
came from

00:08:44,560 --> 00:08:48,320
uh you know but later like it kind of

00:08:45,920 --> 00:08:49,680
proliferates the entire technology stack

00:08:48,320 --> 00:08:51,440
is that you know what if i wrote an app

00:08:49,680 --> 00:08:52,880
and you know i'm the producer and i gave

00:08:51,440 --> 00:08:55,200
it to nathan and he's like man

00:08:52,880 --> 00:08:56,880
ravi your app is like the pitch sucks

00:08:55,200 --> 00:08:58,160
give me a double dislike you know the

00:08:56,880 --> 00:09:01,040
app store and

00:08:58,160 --> 00:09:01,519
tweet about it like subjectivity has a

00:09:01,040 --> 00:09:04,399
lot of

00:09:01,519 --> 00:09:06,959
a lot of feeling right and so part of

00:09:04,399 --> 00:09:08,560
what you want to capture

00:09:06,959 --> 00:09:09,920
when you're trying to get feedback it's

00:09:08,560 --> 00:09:11,200
a little bit of a little bit of b you

00:09:09,920 --> 00:09:12,399
want to get you want to capture the

00:09:11,200 --> 00:09:13,600
subjective feedback

00:09:12,399 --> 00:09:15,200
but also you want to capture the

00:09:13,600 --> 00:09:17,120
objective feedback like hey can we

00:09:15,200 --> 00:09:19,120
warrant why someone's feeling this way

00:09:17,120 --> 00:09:20,720
you know we're human we're emotional you

00:09:19,120 --> 00:09:23,040
know it might there might be no answer

00:09:20,720 --> 00:09:24,399
for that but we have to try because in

00:09:23,040 --> 00:09:27,839
today's day and age

00:09:24,399 --> 00:09:29,279
uh we're living in this particular agile

00:09:27,839 --> 00:09:31,040
way right so agile

00:09:29,279 --> 00:09:32,880
if you're unfamiliar with it it's an

00:09:31,040 --> 00:09:33,279
iterative development methodology you're

00:09:32,880 --> 00:09:36,399
making

00:09:33,279 --> 00:09:38,080
incremental changes all the time and now

00:09:36,399 --> 00:09:39,760
uh for those who have experienced

00:09:38,080 --> 00:09:40,640
waterfall where you do you know you

00:09:39,760 --> 00:09:42,560
completely

00:09:40,640 --> 00:09:44,160
do the requirements and you completely

00:09:42,560 --> 00:09:45,360
finish the application and completely

00:09:44,160 --> 00:09:47,519
finish the infrastructure

00:09:45,360 --> 00:09:48,880
and then you know you kind of start over

00:09:47,519 --> 00:09:50,399
from the beginning

00:09:48,880 --> 00:09:51,519
it's becoming more and more rare to

00:09:50,399 --> 00:09:53,040
expect there's certain things that

00:09:51,519 --> 00:09:54,320
that's good for becoming more and more

00:09:53,040 --> 00:09:55,680
rare right like a lot of things are

00:09:54,320 --> 00:09:57,279
rapid development right hey

00:09:55,680 --> 00:09:58,959
we need to make a change of the app hey

00:09:57,279 --> 00:10:00,640
we need to add additional capacity to

00:09:58,959 --> 00:10:02,240
our cloud infrastructure hey

00:10:00,640 --> 00:10:04,000
we want to try you know increasing our

00:10:02,240 --> 00:10:06,880
density let's say the kubernetes

00:10:04,000 --> 00:10:08,480
cluster or hey we want to try xyz and so

00:10:06,880 --> 00:10:10,079
this is a big part of being agile

00:10:08,480 --> 00:10:12,240
right like this this funny you know

00:10:10,079 --> 00:10:13,440
business and technology term agile

00:10:12,240 --> 00:10:14,959
is that it really allows you to have

00:10:13,440 --> 00:10:15,680
quicker iteration and but you're

00:10:14,959 --> 00:10:16,880
incrementing

00:10:15,680 --> 00:10:19,120
you're making smaller and smaller

00:10:16,880 --> 00:10:20,000
changes but hey if you make smaller and

00:10:19,120 --> 00:10:21,279
smaller changes

00:10:20,000 --> 00:10:23,200
uh that alludes itself to

00:10:21,279 --> 00:10:24,399
experimentation right so instead of

00:10:23,200 --> 00:10:26,399
saying you know

00:10:24,399 --> 00:10:27,440
instead of us making some wide

00:10:26,399 --> 00:10:29,279
conjecture

00:10:27,440 --> 00:10:30,480
about some ground making change you

00:10:29,279 --> 00:10:33,120
could start having

00:10:30,480 --> 00:10:34,720
itty bitty little changes where you can

00:10:33,120 --> 00:10:36,800
test and having something incrementally

00:10:34,720 --> 00:10:38,959
valuable confidence because it boils

00:10:36,800 --> 00:10:41,120
down to this concept called a blast

00:10:38,959 --> 00:10:42,959
radius right so

00:10:41,120 --> 00:10:44,720
if if you want to make a particular

00:10:42,959 --> 00:10:46,959
change and this comes straight out from

00:10:44,720 --> 00:10:48,560
uh you know site reliability engineering

00:10:46,959 --> 00:10:50,320
handbook 101

00:10:48,560 --> 00:10:51,600
is basically what is a blast radio

00:10:50,320 --> 00:10:53,360
technology it's how many

00:10:51,600 --> 00:10:55,200
users or systems are impacted when you

00:10:53,360 --> 00:10:55,680
make a change right so if we were to

00:10:55,200 --> 00:10:58,240
make an

00:10:55,680 --> 00:10:59,279
overall sweeping infrastructure change

00:10:58,240 --> 00:11:01,200
we have a very

00:10:59,279 --> 00:11:02,480
big blast radius right like if we were

00:11:01,200 --> 00:11:03,920
saying all users

00:11:02,480 --> 00:11:05,600
and all the infrastructure we're going

00:11:03,920 --> 00:11:07,200
to you know add another end point or

00:11:05,600 --> 00:11:08,320
we're going to you know take away or add

00:11:07,200 --> 00:11:10,240
a particular node

00:11:08,320 --> 00:11:12,640
or add a subtractive feature to

00:11:10,240 --> 00:11:13,519
everybody that is a significant blast

00:11:12,640 --> 00:11:16,480
radius you uh

00:11:13,519 --> 00:11:16,880
you're exposing all your users to that

00:11:16,480 --> 00:11:19,760
now

00:11:16,880 --> 00:11:21,680
with progressive delivery a core tenant

00:11:19,760 --> 00:11:23,440
to progressive delivery is actually

00:11:21,680 --> 00:11:25,839
you have the ability to focus on

00:11:23,440 --> 00:11:27,839
specific users or specific entitlements

00:11:25,839 --> 00:11:29,440
or specific traits or specific

00:11:27,839 --> 00:11:31,120
aggregations of any

00:11:29,440 --> 00:11:32,720
of the evolve use your imagination right

00:11:31,120 --> 00:11:33,920
like okay anybody who's coming from

00:11:32,720 --> 00:11:35,360
you know from the infrastructure side if

00:11:33,920 --> 00:11:36,720
you have someone coming from europe send

00:11:35,360 --> 00:11:38,160
them to your european data center and

00:11:36,720 --> 00:11:39,360
when it's gone from north america

00:11:38,160 --> 00:11:41,279
send them to the north american data

00:11:39,360 --> 00:11:43,519
center and so on and so on right

00:11:41,279 --> 00:11:44,640
because basically by limiting your blast

00:11:43,519 --> 00:11:47,360
radius

00:11:44,640 --> 00:11:49,040
you're able to have a few a able to add

00:11:47,360 --> 00:11:52,079
acts more agilely

00:11:49,040 --> 00:11:54,880
but also you're able to produce

00:11:52,079 --> 00:11:56,079
quicker feedback right and so core to

00:11:54,880 --> 00:11:58,800
making adjustments

00:11:56,079 --> 00:12:00,160
um core to delivering software

00:11:58,800 --> 00:12:01,360
delivering infrastructure delivering

00:12:00,160 --> 00:12:04,560
technology

00:12:01,360 --> 00:12:07,040
is appropriately processing fat

00:12:04,560 --> 00:12:08,639
feedback right you want feedback to be i

00:12:07,040 --> 00:12:10,079
forget what the acronym usually is for

00:12:08,639 --> 00:12:11,040
feedback ethan it's like you want

00:12:10,079 --> 00:12:13,360
feedback to be

00:12:11,040 --> 00:12:14,560
like specific it's like giving feedback

00:12:13,360 --> 00:12:16,160
on a one-on-one

00:12:14,560 --> 00:12:19,040
you know to a person it's like it

00:12:16,160 --> 00:12:20,800
actually still applies uh to feedback to

00:12:19,040 --> 00:12:23,360
technology because you want to be

00:12:20,800 --> 00:12:26,560
relevant you want to be actionable

00:12:23,360 --> 00:12:29,279
you want it to be concise right so these

00:12:26,560 --> 00:12:30,720
particular concepts transcends you know

00:12:29,279 --> 00:12:33,120
human to human interaction

00:12:30,720 --> 00:12:34,160
system system interaction but basically

00:12:33,120 --> 00:12:37,519
that's it right

00:12:34,160 --> 00:12:39,920
so broaching into i'll pass it off here

00:12:37,519 --> 00:12:42,079
to ethan in about 15 seconds but

00:12:39,920 --> 00:12:44,160
basically these are all tenants

00:12:42,079 --> 00:12:45,760
of progressive delivery like how can we

00:12:44,160 --> 00:12:47,279
make smaller changes how can we make

00:12:45,760 --> 00:12:49,200
more hypothesis driven changes

00:12:47,279 --> 00:12:51,040
how can we isolate and limit the blast

00:12:49,200 --> 00:12:53,120
radius and also

00:12:51,040 --> 00:12:54,480
how does it look in your technology

00:12:53,120 --> 00:12:56,160
organization or your team today

00:12:54,480 --> 00:12:57,519
uh but ethan why don't you take it away

00:12:56,160 --> 00:12:59,600
from here and take folks on a

00:12:57,519 --> 00:13:02,399
progressive delivery journey

00:12:59,600 --> 00:13:03,839
yeah listen thanks robbie and it's kind

00:13:02,399 --> 00:13:05,519
of important we cover all that right

00:13:03,839 --> 00:13:06,079
because when we talk about how you then

00:13:05,519 --> 00:13:08,480
turn around

00:13:06,079 --> 00:13:10,320
and start applying that type of thinking

00:13:08,480 --> 00:13:12,399
and that scientific method approach

00:13:10,320 --> 00:13:13,839
to your organization progressive

00:13:12,399 --> 00:13:15,920
delivery is one of the newer and

00:13:13,839 --> 00:13:17,839
emerging ways you can do that

00:13:15,920 --> 00:13:19,600
and i recognize a lot of folks have not

00:13:17,839 --> 00:13:22,079
heard of progressive delivery

00:13:19,600 --> 00:13:23,760
yet so we'll clear up what it means and

00:13:22,079 --> 00:13:24,720
if you have heard of it it might be kind

00:13:23,760 --> 00:13:26,160
of confusing

00:13:24,720 --> 00:13:27,519
it's a little bit buzzwordy you might

00:13:26,160 --> 00:13:28,800
have heard different definitions in

00:13:27,519 --> 00:13:30,160
different places

00:13:28,800 --> 00:13:32,000
and some of the things we get asked a

00:13:30,160 --> 00:13:34,800
lot are is progressive delivery

00:13:32,000 --> 00:13:36,079
part of cd is it cd is it the same thing

00:13:34,800 --> 00:13:38,160
as feature flags

00:13:36,079 --> 00:13:39,760
is it a devops practice or is it more

00:13:38,160 --> 00:13:42,320
for like application people

00:13:39,760 --> 00:13:43,120
building software for end users is it

00:13:42,320 --> 00:13:46,000
supposed to help

00:13:43,120 --> 00:13:47,839
product managers right and the answer to

00:13:46,000 --> 00:13:48,800
all of these questions is the same

00:13:47,839 --> 00:13:50,240
because when we talk about what is

00:13:48,800 --> 00:13:51,440
progressive delivery the answer to all

00:13:50,240 --> 00:13:53,839
of these questions is

00:13:51,440 --> 00:13:55,600
yes it is all of these things because

00:13:53,839 --> 00:13:56,240
progressive delivery is really a way of

00:13:55,600 --> 00:13:59,600
working

00:13:56,240 --> 00:14:01,920
as much as it is any specific feature

00:13:59,600 --> 00:14:02,720
or practice it's a handful of things you

00:14:01,920 --> 00:14:04,240
can do

00:14:02,720 --> 00:14:06,000
you can do them together we'll talk

00:14:04,240 --> 00:14:07,440
about feature flags as kind of a

00:14:06,000 --> 00:14:09,199
cornerstone for that

00:14:07,440 --> 00:14:10,880
but progressive delivery is really

00:14:09,199 --> 00:14:11,600
applying everything ravi just talked

00:14:10,880 --> 00:14:13,120
about

00:14:11,600 --> 00:14:14,959
to your software development and

00:14:13,120 --> 00:14:16,399
delivery process

00:14:14,959 --> 00:14:18,480
so if we look here at kind of how

00:14:16,399 --> 00:14:19,120
progressive delivery might deviate from

00:14:18,480 --> 00:14:21,440
normal

00:14:19,120 --> 00:14:22,800
cd that's a pretty good starting point i

00:14:21,440 --> 00:14:24,959
think

00:14:22,800 --> 00:14:26,480
on the uh and for those of you who don't

00:14:24,959 --> 00:14:27,279
know what cd means it means continuous

00:14:26,480 --> 00:14:31,440
delivery

00:14:27,279 --> 00:14:32,959
so yep good catch thanks ravi

00:14:31,440 --> 00:14:34,079
so right when we talk about cd

00:14:32,959 --> 00:14:35,600
continuous delivery what we're talking

00:14:34,079 --> 00:14:37,199
about is taking your code

00:14:35,600 --> 00:14:38,560
and getting it into production you have

00:14:37,199 --> 00:14:39,360
a new change and you're trying to put it

00:14:38,560 --> 00:14:40,800
out the world

00:14:39,360 --> 00:14:42,560
whether you're doing that in a rather

00:14:40,800 --> 00:14:44,399
traditional way or that's happening over

00:14:42,560 --> 00:14:45,920
a longer duration or whether you're

00:14:44,399 --> 00:14:47,600
doing that and what we think of is like

00:14:45,920 --> 00:14:48,720
the kind of more modern cloud native way

00:14:47,600 --> 00:14:49,760
where you're trying to do that

00:14:48,720 --> 00:14:51,440
constantly

00:14:49,760 --> 00:14:53,040
when we talk about continuous delivery

00:14:51,440 --> 00:14:54,000
we're talking about taking that code

00:14:53,040 --> 00:14:56,160
with the change

00:14:54,000 --> 00:14:58,000
and getting it live in production and in

00:14:56,160 --> 00:14:59,600
this world even in the modern world of

00:14:58,000 --> 00:15:01,279
cd with cloud architecture and

00:14:59,600 --> 00:15:03,040
microservices

00:15:01,279 --> 00:15:05,360
deployment is basically still when the

00:15:03,040 --> 00:15:07,120
code is going to go live to end users

00:15:05,360 --> 00:15:08,880
what progressive delivery is kind of

00:15:07,120 --> 00:15:09,839
asserting is you can decouple that

00:15:08,880 --> 00:15:12,560
deployment

00:15:09,839 --> 00:15:14,720
from the release to your end users so

00:15:12,560 --> 00:15:16,240
you move the code artifact to production

00:15:14,720 --> 00:15:18,399
but then you'll see on the right side of

00:15:16,240 --> 00:15:20,000
the screen there's a step after that

00:15:18,399 --> 00:15:21,680
the code going to production doesn't

00:15:20,000 --> 00:15:23,920
necessarily have to be

00:15:21,680 --> 00:15:25,360
where everybody gets to change because

00:15:23,920 --> 00:15:26,800
you can't learn that way

00:15:25,360 --> 00:15:28,399
if everybody in your audience is getting

00:15:26,800 --> 00:15:30,240
the change with every deployment

00:15:28,399 --> 00:15:31,920
how do you iterate how do you do cohort

00:15:30,240 --> 00:15:33,600
studies how do you start to figure out

00:15:31,920 --> 00:15:35,519
what the impact of the change is or as

00:15:33,600 --> 00:15:37,040
ravi was talking about control the blast

00:15:35,519 --> 00:15:38,720
radius and learn from it

00:15:37,040 --> 00:15:40,320
so what progressive delivery does is

00:15:38,720 --> 00:15:41,920
post that deployment you can start to

00:15:40,320 --> 00:15:44,959
turn on that new code

00:15:41,920 --> 00:15:45,759
for specific people based on criteria

00:15:44,959 --> 00:15:47,680
you want

00:15:45,759 --> 00:15:48,800
and then you can learn based on what

00:15:47,680 --> 00:15:50,560
happens

00:15:48,800 --> 00:15:52,800
and to give you one kind of concrete

00:15:50,560 --> 00:15:55,600
scenario what we see here

00:15:52,800 --> 00:15:57,360
let's say that i had a new ui and i

00:15:55,600 --> 00:15:58,399
wanted to first turn that on for 10

00:15:57,360 --> 00:16:00,320
percent of my

00:15:58,399 --> 00:16:01,759
uk users maybe i had a much lower

00:16:00,320 --> 00:16:03,759
traffic footprint in the ui

00:16:01,759 --> 00:16:05,360
in the uk so i'm a little worried about

00:16:03,759 --> 00:16:06,639
performance of the new ui

00:16:05,360 --> 00:16:08,720
so i'm going to start with a small

00:16:06,639 --> 00:16:09,680
subset of my users in my lower traffic

00:16:08,720 --> 00:16:11,680
geo

00:16:09,680 --> 00:16:13,440
let's say that looked good after a few

00:16:11,680 --> 00:16:14,800
days so i'm going to do two things i'm

00:16:13,440 --> 00:16:17,120
then going to turn it on for 10

00:16:14,800 --> 00:16:18,240
of my us users and i'm going to ramp it

00:16:17,120 --> 00:16:20,880
up to 25

00:16:18,240 --> 00:16:22,160
of my uk users and here we can see the

00:16:20,880 --> 00:16:24,240
paths deviate

00:16:22,160 --> 00:16:26,720
maybe because of something specific to

00:16:24,240 --> 00:16:28,959
my us-based cloud architecture

00:16:26,720 --> 00:16:31,360
i'm getting an exception i can turn the

00:16:28,959 --> 00:16:33,920
10 of us users back to zero

00:16:31,360 --> 00:16:35,440
while i fix that but my uk cloud

00:16:33,920 --> 00:16:37,360
architecture is not throwing the same

00:16:35,440 --> 00:16:38,320
exception so i can actually ramp that up

00:16:37,360 --> 00:16:40,399
to 50

00:16:38,320 --> 00:16:42,320
and keep learning and the thing i would

00:16:40,399 --> 00:16:44,639
highlight about this path right

00:16:42,320 --> 00:16:46,480
powerful on its own but to do this with

00:16:44,639 --> 00:16:48,399
progressive delivery in most cases we'll

00:16:46,480 --> 00:16:50,399
talk about feature flags in a moment

00:16:48,399 --> 00:16:51,839
you can actually do this without having

00:16:50,399 --> 00:16:54,959
to do any new

00:16:51,839 --> 00:16:56,959
deployments or any new rollbacks

00:16:54,959 --> 00:16:58,800
you can do this just with the code live

00:16:56,959 --> 00:17:00,480
on the server not have to change the

00:16:58,800 --> 00:17:02,639
code itself at any point

00:17:00,480 --> 00:17:04,799
to accomplish this end-to-end scenario

00:17:02,639 --> 00:17:06,400
or you can even have very non-technical

00:17:04,799 --> 00:17:08,959
people like pms or

00:17:06,400 --> 00:17:11,120
other folks doing this and only going

00:17:08,959 --> 00:17:13,839
back to engineering when there's issues

00:17:11,120 --> 00:17:14,880
so engineering is not having to babysit

00:17:13,839 --> 00:17:17,120
the end-to-end

00:17:14,880 --> 00:17:18,160
rollout process and if you look at what

00:17:17,120 --> 00:17:20,559
this gives you

00:17:18,160 --> 00:17:21,520
as an organization right it ultimately

00:17:20,559 --> 00:17:23,360
gets you

00:17:21,520 --> 00:17:24,799
you do a whole bunch of things but if we

00:17:23,360 --> 00:17:26,559
were to try to summarize it so it's a

00:17:24,799 --> 00:17:28,000
little easier to take away

00:17:26,559 --> 00:17:30,400
you're going to reduce your risk this

00:17:28,000 --> 00:17:31,760
way you can start with small changes and

00:17:30,400 --> 00:17:34,160
you can accelerate

00:17:31,760 --> 00:17:35,280
the blast radius of those changes as you

00:17:34,160 --> 00:17:36,960
get confidence or

00:17:35,280 --> 00:17:38,880
learn from them and again you can do

00:17:36,960 --> 00:17:39,600
that without the overhead and time of

00:17:38,880 --> 00:17:42,240
engineering

00:17:39,600 --> 00:17:44,240
having to coordinate new deployments new

00:17:42,240 --> 00:17:45,360
releases rollbacks exceptions all those

00:17:44,240 --> 00:17:47,360
kind of things

00:17:45,360 --> 00:17:49,120
just do it separate from your deployment

00:17:47,360 --> 00:17:50,320
process and ultimately that means you

00:17:49,120 --> 00:17:52,400
can learn a lot

00:17:50,320 --> 00:17:54,160
faster because if you can turn things on

00:17:52,400 --> 00:17:57,039
and off in a controlled way

00:17:54,160 --> 00:17:58,960
for audiences you define without having

00:17:57,039 --> 00:18:00,400
complex releases to manage

00:17:58,960 --> 00:18:02,320
it means you're going to do that a lot

00:18:00,400 --> 00:18:03,760
more you're going to feel a lot better

00:18:02,320 --> 00:18:06,240
saying yeah let's give this to 10

00:18:03,760 --> 00:18:06,960
of the uk people let's see what happens

00:18:06,240 --> 00:18:09,360
because there's no

00:18:06,960 --> 00:18:11,600
pain or cumbersome process in doing that

00:18:09,360 --> 00:18:12,000
so your disincentives for trying to

00:18:11,600 --> 00:18:14,640
learn

00:18:12,000 --> 00:18:16,160
your disincentives for experimenting are

00:18:14,640 --> 00:18:18,240
going to be greatly diminished with

00:18:16,160 --> 00:18:19,919
progressive delivery

00:18:18,240 --> 00:18:22,080
and this is ultimately going to lead to

00:18:19,919 --> 00:18:23,840
an outcome that probably matters most to

00:18:22,080 --> 00:18:24,799
all of your stakeholders hopefully to

00:18:23,840 --> 00:18:26,559
y'all as well

00:18:24,799 --> 00:18:28,080
but you're going to end up shipping a

00:18:26,559 --> 00:18:30,000
better user experience

00:18:28,080 --> 00:18:31,760
and it doesn't matter who your users are

00:18:30,000 --> 00:18:32,640
if your users are internal people on

00:18:31,760 --> 00:18:34,480
your team

00:18:32,640 --> 00:18:37,039
if your users are end customers out in

00:18:34,480 --> 00:18:38,720
the world because you can learn faster

00:18:37,039 --> 00:18:39,520
because you're more comfortable making

00:18:38,720 --> 00:18:41,280
changes

00:18:39,520 --> 00:18:43,280
you're going to make more of them your

00:18:41,280 --> 00:18:45,360
experience is just going to get better

00:18:43,280 --> 00:18:47,520
some of the blockers to improving things

00:18:45,360 --> 00:18:49,120
to learning to making the right calls or

00:18:47,520 --> 00:18:51,280
to just trying things out

00:18:49,120 --> 00:18:53,280
and seeing if it's better with those

00:18:51,280 --> 00:18:56,640
gone your end customers

00:18:53,280 --> 00:18:58,160
are really gonna benefit now what i'd

00:18:56,640 --> 00:18:59,600
say touching back on the scientific

00:18:58,160 --> 00:19:01,360
method here though is

00:18:59,600 --> 00:19:02,640
progressive delivery is ultimately a

00:19:01,360 --> 00:19:03,840
means to an end

00:19:02,640 --> 00:19:04,960
so you don't want to do it just for the

00:19:03,840 --> 00:19:06,160
sake of doing it now we've got

00:19:04,960 --> 00:19:07,679
progressive delivery

00:19:06,160 --> 00:19:09,280
aren't we great right you're trying to

00:19:07,679 --> 00:19:10,320
accomplish something you've got to keep

00:19:09,280 --> 00:19:11,919
that in mind

00:19:10,320 --> 00:19:13,520
so when you think about the right way to

00:19:11,919 --> 00:19:14,720
do progressive delivery

00:19:13,520 --> 00:19:15,760
you really want to be clear with your

00:19:14,720 --> 00:19:17,679
team what are we going to get out of

00:19:15,760 --> 00:19:19,679
this how do we know this is helping us

00:19:17,679 --> 00:19:21,919
how do we do this in a way that's useful

00:19:19,679 --> 00:19:23,440
so what what do you want to learn

00:19:21,919 --> 00:19:25,919
are you trying to find out if a change

00:19:23,440 --> 00:19:26,960
is stable are you trying to figure out

00:19:25,919 --> 00:19:29,120
how it impacts

00:19:26,960 --> 00:19:30,720
user behavior and that could be things

00:19:29,120 --> 00:19:31,840
like your conversion rates that could be

00:19:30,720 --> 00:19:33,039
things like funnel through your

00:19:31,840 --> 00:19:35,039
applications

00:19:33,039 --> 00:19:38,000
um see if it's reducing cost of your

00:19:35,039 --> 00:19:40,240
application an api refactor can

00:19:38,000 --> 00:19:41,039
make a huge change in cost in either

00:19:40,240 --> 00:19:43,360
direction

00:19:41,039 --> 00:19:45,120
be great to learn that quickly you can

00:19:43,360 --> 00:19:46,080
also make sure your support team is not

00:19:45,120 --> 00:19:47,280
overwhelmed right

00:19:46,080 --> 00:19:49,039
so if you're going to roll out a big

00:19:47,280 --> 00:19:50,320
change you're moving a button from this

00:19:49,039 --> 00:19:51,600
place to that place

00:19:50,320 --> 00:19:53,520
if you've ever worked in consumer

00:19:51,600 --> 00:19:55,760
applications at scale moving buttons

00:19:53,520 --> 00:19:56,880
results in a ton of tickets where people

00:19:55,760 --> 00:19:58,160
tell you they don't like that you move

00:19:56,880 --> 00:19:59,360
the button

00:19:58,160 --> 00:20:00,799
and you don't have to deal with that

00:19:59,360 --> 00:20:02,400
right your poor support team has to deal

00:20:00,799 --> 00:20:04,000
with that they do a great job

00:20:02,400 --> 00:20:05,600
but you can kind of let them know what

00:20:04,000 --> 00:20:08,080
to expect if you do that in an

00:20:05,600 --> 00:20:09,760
incremental way or you can control that

00:20:08,080 --> 00:20:10,720
customer feedback by doing in an

00:20:09,760 --> 00:20:12,240
incremental way

00:20:10,720 --> 00:20:13,840
so we encourage people to talk about

00:20:12,240 --> 00:20:15,600
with progressive delivery is

00:20:13,840 --> 00:20:17,520
don't think of it just as an engineering

00:20:15,600 --> 00:20:18,320
outcome now we can do this great thing

00:20:17,520 --> 00:20:20,400
where 10

00:20:18,320 --> 00:20:22,000
of our users get the code artifact we

00:20:20,400 --> 00:20:23,760
think about what is the user outcome the

00:20:22,000 --> 00:20:24,880
business outcome the team outcome you're

00:20:23,760 --> 00:20:27,120
trying to achieve

00:20:24,880 --> 00:20:28,080
and then work backward from there to the

00:20:27,120 --> 00:20:31,520
right way to do

00:20:28,080 --> 00:20:33,440
progressive delivery now another concept

00:20:31,520 --> 00:20:35,679
that is really tightly coupled with

00:20:33,440 --> 00:20:38,559
progressive delivery in a lot of cases

00:20:35,679 --> 00:20:39,760
is feature flags so if you haven't heard

00:20:38,559 --> 00:20:42,000
of feature flags

00:20:39,760 --> 00:20:43,679
you might have heard of feature toggles

00:20:42,000 --> 00:20:45,840
you might have heard of just kind of app

00:20:43,679 --> 00:20:48,240
configuration files that you keep in

00:20:45,840 --> 00:20:50,000
your repo or your database there's a

00:20:48,240 --> 00:20:50,799
good chance that you've been exposed to

00:20:50,000 --> 00:20:53,440
something like

00:20:50,799 --> 00:20:55,039
feature flags even if you've never heard

00:20:53,440 --> 00:20:56,880
them called feature flags

00:20:55,039 --> 00:20:59,120
and for some context what a feature flag

00:20:56,880 --> 00:21:00,480
really is you can imagine kind of a

00:20:59,120 --> 00:21:02,880
fancy if statement

00:21:00,480 --> 00:21:03,520
in your code around two potential code

00:21:02,880 --> 00:21:05,280
paths

00:21:03,520 --> 00:21:07,120
let's say one makes a button red one

00:21:05,280 --> 00:21:08,559
makes a button green they both

00:21:07,120 --> 00:21:10,240
exist in your code right you're not

00:21:08,559 --> 00:21:10,799
taking the red one out to ship the green

00:21:10,240 --> 00:21:12,000
one

00:21:10,799 --> 00:21:13,600
and then you have kind of an if

00:21:12,000 --> 00:21:15,760
statement in the code that communicates

00:21:13,600 --> 00:21:18,159
up to a server or a config somewhere

00:21:15,760 --> 00:21:19,679
that lets you choose which one of those

00:21:18,159 --> 00:21:22,320
code paths to light up

00:21:19,679 --> 00:21:24,159
for who and under which condition so

00:21:22,320 --> 00:21:25,280
it's really just a way to ship multiple

00:21:24,159 --> 00:21:27,600
versions of something

00:21:25,280 --> 00:21:29,120
so that you can turn them on and off and

00:21:27,600 --> 00:21:30,799
learn in production

00:21:29,120 --> 00:21:32,799
and feature flag and progressive

00:21:30,799 --> 00:21:34,480
delivery the reason they go hand in hand

00:21:32,799 --> 00:21:36,000
is because feature flags are ultimately

00:21:34,480 --> 00:21:39,039
such a great way to

00:21:36,000 --> 00:21:41,280
enable progressive delivery

00:21:39,039 --> 00:21:42,960
so when we talk about enabling feature

00:21:41,280 --> 00:21:44,080
enabling progressive delivery with

00:21:42,960 --> 00:21:46,080
feature flags

00:21:44,080 --> 00:21:47,120
it's because feature flags let you make

00:21:46,080 --> 00:21:49,200
those changes

00:21:47,120 --> 00:21:51,039
with no new deployments in rollbacks

00:21:49,200 --> 00:21:53,360
because all of the code is there

00:21:51,039 --> 00:21:54,960
in the deployment initially this kind of

00:21:53,360 --> 00:21:57,039
branched off with those flags or those

00:21:54,960 --> 00:21:59,200
if statements like i talked about

00:21:57,039 --> 00:22:00,799
you don't have to do a new deployment

00:21:59,200 --> 00:22:02,000
every time you want to change which code

00:22:00,799 --> 00:22:03,840
artifact you light up

00:22:02,000 --> 00:22:05,440
the external service or the config

00:22:03,840 --> 00:22:06,400
mapping if you're using your own kind of

00:22:05,440 --> 00:22:08,400
solution

00:22:06,400 --> 00:22:10,240
that tells the server when it's

00:22:08,400 --> 00:22:12,559
evaluating on the client side

00:22:10,240 --> 00:22:14,000
which version of the code to light up

00:22:12,559 --> 00:22:15,600
and so feature flags are really that

00:22:14,000 --> 00:22:16,480
cornerstone they also let you control

00:22:15,600 --> 00:22:17,840
that changes

00:22:16,480 --> 00:22:19,919
so that you can correspond them with

00:22:17,840 --> 00:22:21,440
metrics and outcomes right so let's say

00:22:19,919 --> 00:22:22,640
you're going to change a feature flag

00:22:21,440 --> 00:22:23,360
because you want to know if the red

00:22:22,640 --> 00:22:24,960
button

00:22:23,360 --> 00:22:26,720
is going to have a different impact than

00:22:24,960 --> 00:22:27,840
the green button you want to know when

00:22:26,720 --> 00:22:29,520
you're going to turn that on

00:22:27,840 --> 00:22:31,360
you want that to correlate to maybe

00:22:29,520 --> 00:22:32,960
events in your metrics and logs

00:22:31,360 --> 00:22:35,039
so you can easily see the outcome of

00:22:32,960 --> 00:22:36,799
that change maybe you want to fire some

00:22:35,039 --> 00:22:38,080
stuff off to analytics

00:22:36,799 --> 00:22:39,520
maybe you want to let people in the

00:22:38,080 --> 00:22:40,240
organization know we're making that

00:22:39,520 --> 00:22:42,720
change

00:22:40,240 --> 00:22:45,039
again flags let you make that change in

00:22:42,720 --> 00:22:47,200
a very very controlled way separate from

00:22:45,039 --> 00:22:48,960
the release process the other thing

00:22:47,200 --> 00:22:50,640
flags do this last point there was very

00:22:48,960 --> 00:22:52,400
important which is that

00:22:50,640 --> 00:22:54,400
you can see what's actually live for

00:22:52,400 --> 00:22:55,919
people so one thing that can start

00:22:54,400 --> 00:22:57,520
happening when you have feature flags

00:22:55,919 --> 00:22:58,559
experiment progressive delivery this

00:22:57,520 --> 00:23:00,080
modern world

00:22:58,559 --> 00:23:02,720
is you go from there's a version of your

00:23:00,080 --> 00:23:04,880
application that's live to

00:23:02,720 --> 00:23:06,640
20 30 40 versions of your application

00:23:04,880 --> 00:23:08,240
live for different subsets of users

00:23:06,640 --> 00:23:09,840
right you end up in this kind of

00:23:08,240 --> 00:23:11,840
multi-dimensional state where different

00:23:09,840 --> 00:23:13,200
people have different configurations

00:23:11,840 --> 00:23:15,440
feature flags are going to let you

00:23:13,200 --> 00:23:17,679
easily see who's got what

00:23:15,440 --> 00:23:18,480
this user had a problem this geo had a

00:23:17,679 --> 00:23:20,720
problem

00:23:18,480 --> 00:23:21,600
what configuration of our application is

00:23:20,720 --> 00:23:24,320
ultimately

00:23:21,600 --> 00:23:24,320
affecting them

00:23:24,799 --> 00:23:28,480
now we talk about flag being a

00:23:26,320 --> 00:23:30,159
cornerstone of progressive delivery

00:23:28,480 --> 00:23:32,480
it's also important to know that flags

00:23:30,159 --> 00:23:34,320
are not just for progressive delivery

00:23:32,480 --> 00:23:36,400
so they have some other good engineering

00:23:34,320 --> 00:23:38,640
practices that are worth knowing about

00:23:36,400 --> 00:23:39,919
with feature flags you can work dark

00:23:38,640 --> 00:23:42,159
behind a flag

00:23:39,919 --> 00:23:44,480
so that you can ship constantly and what

00:23:42,159 --> 00:23:46,720
i mean by that is if i'm a developer

00:23:44,480 --> 00:23:48,880
i'm going to start every new feature

00:23:46,720 --> 00:23:49,520
branch with just instantiating a new

00:23:48,880 --> 00:23:51,679
flag

00:23:49,520 --> 00:23:52,960
so that all my code is by default behind

00:23:51,679 --> 00:23:55,600
a flag turned off

00:23:52,960 --> 00:23:57,600
this means my team can ship that code or

00:23:55,600 --> 00:23:58,159
merge that code to master every single

00:23:57,600 --> 00:23:59,679
day

00:23:58,159 --> 00:24:01,600
and it's not going to take effect

00:23:59,679 --> 00:24:02,480
because it's behind a flag and the flag

00:24:01,600 --> 00:24:04,400
is turned off

00:24:02,480 --> 00:24:06,080
so it's a really safe way to constantly

00:24:04,400 --> 00:24:07,520
keep my work merged in

00:24:06,080 --> 00:24:09,760
where you don't have to wait till i'm

00:24:07,520 --> 00:24:12,720
done and i'm ready to actually stress

00:24:09,760 --> 00:24:13,600
test it to do any kind of merge or cd

00:24:12,720 --> 00:24:15,039
event

00:24:13,600 --> 00:24:16,880
it's also going to let you coordinate

00:24:15,039 --> 00:24:17,679
launches and stuff like that internally

00:24:16,880 --> 00:24:19,600
because

00:24:17,679 --> 00:24:21,360
engineering can complete their work they

00:24:19,600 --> 00:24:23,840
can ship it off to production

00:24:21,360 --> 00:24:25,440
they can move on and marketing may not

00:24:23,840 --> 00:24:26,799
be ready to turn it on and talk about it

00:24:25,440 --> 00:24:28,320
for three weeks later

00:24:26,799 --> 00:24:30,480
that can be pretty painful scenario

00:24:28,320 --> 00:24:32,480
normally for engineers

00:24:30,480 --> 00:24:34,240
this you don't care with flags right

00:24:32,480 --> 00:24:35,120
just ship it to proud the flag is there

00:24:34,240 --> 00:24:37,279
here's the

00:24:35,120 --> 00:24:38,400
link marketing team turn it on whenever

00:24:37,279 --> 00:24:40,480
you want it

00:24:38,400 --> 00:24:42,320
they can also for engineering teams be a

00:24:40,480 --> 00:24:44,000
great way to provide kill switches

00:24:42,320 --> 00:24:45,840
or different operational things that

00:24:44,000 --> 00:24:47,360
maybe you just always want the control

00:24:45,840 --> 00:24:48,799
turn this off instantly

00:24:47,360 --> 00:24:52,080
and in particular turn this off

00:24:48,799 --> 00:24:53,440
instantly for certain audiences

00:24:52,080 --> 00:24:55,440
last thing they can do is they can help

00:24:53,440 --> 00:24:56,559
you manage what customers get access to

00:24:55,440 --> 00:24:58,960
what features

00:24:56,559 --> 00:24:59,679
and where and so one way to think about

00:24:58,960 --> 00:25:01,200
it is

00:24:59,679 --> 00:25:02,720
if you're building a new product you

00:25:01,200 --> 00:25:03,840
launch a new feature put the feature

00:25:02,720 --> 00:25:05,440
behind a flag

00:25:03,840 --> 00:25:07,760
and then you can go tell your support

00:25:05,440 --> 00:25:10,000
teams or your account teams or your pm

00:25:07,760 --> 00:25:11,520
teams hey if you've got any customers

00:25:10,000 --> 00:25:13,520
that you want to give access to the new

00:25:11,520 --> 00:25:14,559
feature just go add them to that feature

00:25:13,520 --> 00:25:16,000
flag

00:25:14,559 --> 00:25:17,600
you might have seen that work show up on

00:25:16,000 --> 00:25:18,799
engineering's plate day-to-day

00:25:17,600 --> 00:25:20,240
can you guys turn this on for this

00:25:18,799 --> 00:25:20,720
account now can you turn it on for this

00:25:20,240 --> 00:25:22,480
account

00:25:20,720 --> 00:25:24,000
it's very distracting it's very

00:25:22,480 --> 00:25:25,679
interrupting to engineering

00:25:24,000 --> 00:25:27,200
teams so on top of the progressive

00:25:25,679 --> 00:25:28,240
delivery workflows there's all these

00:25:27,200 --> 00:25:30,400
operational

00:25:28,240 --> 00:25:33,360
and way of working type things that

00:25:30,400 --> 00:25:34,640
feature flags will give you

00:25:33,360 --> 00:25:36,480
one other thing i'd note here the

00:25:34,640 --> 00:25:37,520
feature flags are not just for user

00:25:36,480 --> 00:25:39,120
facing features

00:25:37,520 --> 00:25:41,440
so we've been talking about red button

00:25:39,120 --> 00:25:42,720
versus green button or moving beer to

00:25:41,440 --> 00:25:44,960
the front of the store

00:25:42,720 --> 00:25:46,720
right feature flags can also help for

00:25:44,960 --> 00:25:48,159
some less obvious use cases that you

00:25:46,720 --> 00:25:50,880
might not be thinking about

00:25:48,159 --> 00:25:52,880
such as refactoring your api roll that

00:25:50,880 --> 00:25:53,279
change out incrementally to stress test

00:25:52,880 --> 00:25:55,360
it

00:25:53,279 --> 00:25:56,640
or gradually rolling over to a new

00:25:55,360 --> 00:25:58,400
service we

00:25:56,640 --> 00:26:01,039
i worked for a startup a while ago we

00:25:58,400 --> 00:26:02,640
were migrating to a new logging back end

00:26:01,039 --> 00:26:04,559
and we did that over the course of

00:26:02,640 --> 00:26:05,120
several months day by day with feature

00:26:04,559 --> 00:26:07,279
flags

00:26:05,120 --> 00:26:09,360
incrementing it live so that we could

00:26:07,279 --> 00:26:10,880
iterate in production without constantly

00:26:09,360 --> 00:26:12,400
deploying and rolling back when there

00:26:10,880 --> 00:26:14,240
were issues so the entire

00:26:12,400 --> 00:26:16,320
engineering-focused use case but future

00:26:14,240 --> 00:26:18,720
flags really came in handy there

00:26:16,320 --> 00:26:20,320
and they also let you do things like you

00:26:18,720 --> 00:26:21,679
know your data residency laws might be a

00:26:20,320 --> 00:26:23,039
little different in some country than

00:26:21,679 --> 00:26:24,000
others so maybe there's some features

00:26:23,039 --> 00:26:25,840
that you need a slightly

00:26:24,000 --> 00:26:28,320
tweaked version of them in europe versus

00:26:25,840 --> 00:26:30,080
the us flags are a really really easy

00:26:28,320 --> 00:26:31,600
way to do that where you can visualize

00:26:30,080 --> 00:26:34,039
that and control that

00:26:31,600 --> 00:26:35,760
across your organization in a less

00:26:34,039 --> 00:26:38,159
engineering-centric way such as all

00:26:35,760 --> 00:26:40,640
those configs exclusively living in a

00:26:38,159 --> 00:26:43,039
repo

00:26:40,640 --> 00:26:44,799
so then ultimately why feature fives we

00:26:43,039 --> 00:26:45,440
talked about why progressive delivery

00:26:44,799 --> 00:26:47,440
earlier

00:26:45,440 --> 00:26:49,200
and this is similar it's adjacent and

00:26:47,440 --> 00:26:50,880
not exactly the same thing

00:26:49,200 --> 00:26:52,240
because your end story here if you think

00:26:50,880 --> 00:26:54,400
of it in terms of hierarchy

00:26:52,240 --> 00:26:56,240
future flags bring all this flexibility

00:26:54,400 --> 00:26:57,919
to engineering organizations

00:26:56,240 --> 00:26:59,440
and one of the great things engineering

00:26:57,919 --> 00:27:00,799
organizations can do

00:26:59,440 --> 00:27:03,039
is leverage them to start doing

00:27:00,799 --> 00:27:04,799
progressive delivery to start working in

00:27:03,039 --> 00:27:06,000
that scientific method that robbie was

00:27:04,799 --> 00:27:07,120
talking about earlier

00:27:06,000 --> 00:27:09,200
that's because feature flags are going

00:27:07,120 --> 00:27:11,200
to let you go really fast

00:27:09,200 --> 00:27:12,640
no change is risky if every change is

00:27:11,200 --> 00:27:14,640
behind a flag right

00:27:12,640 --> 00:27:16,640
put it dark behind a flag ship it

00:27:14,640 --> 00:27:18,159
constantly merge your feature branch to

00:27:16,640 --> 00:27:19,520
master every single day

00:27:18,159 --> 00:27:21,520
you're never going to be at any risk

00:27:19,520 --> 00:27:23,279
with any change with feature flags

00:27:21,520 --> 00:27:25,360
because they are dark it's going to take

00:27:23,279 --> 00:27:26,559
a lot of work and coordination and

00:27:25,360 --> 00:27:29,200
things like that

00:27:26,559 --> 00:27:31,120
off of engineering's plate day-to-day

00:27:29,200 --> 00:27:31,600
including for things like launches roll

00:27:31,120 --> 00:27:33,760
outs

00:27:31,600 --> 00:27:35,279
but also for things like testing ravi

00:27:33,760 --> 00:27:37,200
mentioned getting that feedback wouldn't

00:27:35,279 --> 00:27:39,520
it be great if i as a pm

00:27:37,200 --> 00:27:40,559
could turn that new ui on for people as

00:27:39,520 --> 00:27:42,399
i talk to them

00:27:40,559 --> 00:27:43,760
so i can make sure i'm capturing that

00:27:42,399 --> 00:27:45,279
feedback and learning

00:27:43,760 --> 00:27:46,880
instead of having to turn it on for a

00:27:45,279 --> 00:27:47,760
bunch of people and just see who raises

00:27:46,880 --> 00:27:49,279
their hands

00:27:47,760 --> 00:27:51,360
i can reach out to them directly i've

00:27:49,279 --> 00:27:52,080
got a new eye i want your feedback on

00:27:51,360 --> 00:27:53,679
this ui

00:27:52,080 --> 00:27:55,919
and then i turn it on for them with

00:27:53,679 --> 00:27:57,279
progressive delivery and feature flags

00:27:55,919 --> 00:27:58,720
and the third one's identical right

00:27:57,279 --> 00:27:59,679
you're going to end up with a better

00:27:58,720 --> 00:28:00,960
experience

00:27:59,679 --> 00:28:02,720
if you're letting engineers do their

00:28:00,960 --> 00:28:03,840
work more if you're letting engineers do

00:28:02,720 --> 00:28:05,919
their work faster

00:28:03,840 --> 00:28:07,360
if you're letting the organization learn

00:28:05,919 --> 00:28:09,039
what you're going to end up with is your

00:28:07,360 --> 00:28:11,120
applications are getting better

00:28:09,039 --> 00:28:12,240
you have less downtime bugs are getting

00:28:11,120 --> 00:28:14,240
fixed faster

00:28:12,240 --> 00:28:17,039
early adopters are getting more feedback

00:28:14,240 --> 00:28:19,360
to drive the mature versions of features

00:28:17,039 --> 00:28:20,399
it is a virtuous loop once you bring

00:28:19,360 --> 00:28:22,159
feature flags in

00:28:20,399 --> 00:28:25,520
and start using them to build out

00:28:22,159 --> 00:28:27,440
progressive delivery workflows

00:28:25,520 --> 00:28:29,039
and i am happy to have ravi jump in if

00:28:27,440 --> 00:28:30,480
there's anything i failed to cover but i

00:28:29,039 --> 00:28:31,440
think that's kind of it we're happy to

00:28:30,480 --> 00:28:32,960
take some questions

00:28:31,440 --> 00:28:34,799
yeah it looks like there's there's a few

00:28:32,960 --> 00:28:36,960
questions uh coming in and

00:28:34,799 --> 00:28:38,720
also i mean feel free to ask ask away

00:28:36,960 --> 00:28:39,840
since they'll be the question and answer

00:28:38,720 --> 00:28:41,760
session but

00:28:39,840 --> 00:28:43,200
if you were curious about getting a copy

00:28:41,760 --> 00:28:44,480
of the slides just learning more you can

00:28:43,200 --> 00:28:47,600
give a quick scan

00:28:44,480 --> 00:28:49,279
of this qr code here it says bitly and

00:28:47,600 --> 00:28:50,960
you know we can certainly uh you know

00:28:49,279 --> 00:28:53,279
connect um

00:28:50,960 --> 00:28:54,399
kind of connect afterwards but uh why

00:28:53,279 --> 00:28:55,520
don't we go through some of the

00:28:54,399 --> 00:28:58,720
questions

00:28:55,520 --> 00:29:01,600
and and then you know we can um you know

00:28:58,720 --> 00:29:02,799
we can just role play or answer them and

00:29:01,600 --> 00:29:04,480
you know if they have any

00:29:02,799 --> 00:29:06,320
further questions keep them coming so

00:29:04,480 --> 00:29:08,720
the first question is um

00:29:06,320 --> 00:29:10,399
do you have a list of some sort this is

00:29:08,720 --> 00:29:12,480
a funny like getting like this tall to

00:29:10,399 --> 00:29:14,320
ride the roller coaster uh do you have

00:29:12,480 --> 00:29:14,960
to be this tall to enable progressive

00:29:14,320 --> 00:29:18,000
delivery

00:29:14,960 --> 00:29:20,720
so i can take a first half of it or you

00:29:18,000 --> 00:29:22,159
can take it for savage dealer's choice

00:29:20,720 --> 00:29:24,159
no i'd love to hear what you have to say

00:29:22,159 --> 00:29:25,679
right i'll go more technical answer for

00:29:24,159 --> 00:29:27,440
this question so like

00:29:25,679 --> 00:29:29,360
a lot of times it feature flags there's

00:29:27,440 --> 00:29:31,520
a remote communication that's needed

00:29:29,360 --> 00:29:32,720
right and so like there needs to be a

00:29:31,520 --> 00:29:34,880
way to check

00:29:32,720 --> 00:29:36,320
that if a feature is enabled or not like

00:29:34,880 --> 00:29:37,200
if then else statement but usually it's

00:29:36,320 --> 00:29:39,279
a remote call

00:29:37,200 --> 00:29:40,880
so i'll give you an example right like

00:29:39,279 --> 00:29:41,919
and this this question will boil into

00:29:40,880 --> 00:29:44,240
the second question

00:29:41,919 --> 00:29:45,360
uh that was asked so it flows really

00:29:44,240 --> 00:29:47,520
nicely so

00:29:45,360 --> 00:29:48,880
usually how you check you know if a

00:29:47,520 --> 00:29:50,399
feature like if you had like a

00:29:48,880 --> 00:29:51,919
distributed application so it might not

00:29:50,399 --> 00:29:53,520
be the same if it's a piece of

00:29:51,919 --> 00:29:54,159
infrastructure that flag might be in a

00:29:53,520 --> 00:29:56,880
configuration

00:29:54,159 --> 00:29:58,480
file somewhere but a very i would say a

00:29:56,880 --> 00:29:59,919
very

00:29:58,480 --> 00:30:01,600
modern feature flag that's in

00:29:59,919 --> 00:30:02,399
distributed app you're making a remote

00:30:01,600 --> 00:30:04,559
call to check

00:30:02,399 --> 00:30:05,679
every time a user transverses something

00:30:04,559 --> 00:30:07,760
if it's enabled

00:30:05,679 --> 00:30:09,520
so if i was a platinum card holder or

00:30:07,760 --> 00:30:10,000
you know a diamond medallion on delta

00:30:09,520 --> 00:30:11,919
like

00:30:10,000 --> 00:30:13,440
and i log into delta like airline's

00:30:11,919 --> 00:30:14,880
website um

00:30:13,440 --> 00:30:16,480
it's constantly checking like for

00:30:14,880 --> 00:30:18,720
entitlements like is ravi

00:30:16,480 --> 00:30:20,480
a diamond medallion and if that

00:30:18,720 --> 00:30:23,760
manifests itself like 50 like that

00:30:20,480 --> 00:30:25,760
remote call must get fired off 50 times

00:30:23,760 --> 00:30:27,600
uh to double check my entitlements and

00:30:25,760 --> 00:30:30,720
display the diamond colors

00:30:27,600 --> 00:30:33,840
display a personal message you know from

00:30:30,720 --> 00:30:34,880
from it from the airline and that takes

00:30:33,840 --> 00:30:36,960
a lot of overhead

00:30:34,880 --> 00:30:38,480
you made the remote calls go from 1 to

00:30:36,960 --> 00:30:40,960
50 right

00:30:38,480 --> 00:30:41,919
for for that personalization for that

00:30:40,960 --> 00:30:44,559
entitlement

00:30:41,919 --> 00:30:45,840
so it's if you're able to support the

00:30:44,559 --> 00:30:47,840
type of remote call

00:30:45,840 --> 00:30:49,440
sure like if you can make some sort of

00:30:47,840 --> 00:30:50,720
remote if then else or checking a

00:30:49,440 --> 00:30:52,480
database checking

00:30:50,720 --> 00:30:54,480
checking a config management database

00:30:52,480 --> 00:30:56,480
checking some sort of back end

00:30:54,480 --> 00:30:57,679
um even processing software logic you

00:30:56,480 --> 00:30:59,760
know if it's

00:30:57,679 --> 00:31:01,279
for a particular user it's additional

00:30:59,760 --> 00:31:02,080
overhead but you have to be able to make

00:31:01,279 --> 00:31:04,880
code changes

00:31:02,080 --> 00:31:05,120
like from the get get-go to roll that

00:31:04,880 --> 00:31:07,279
out

00:31:05,120 --> 00:31:08,320
right so there's no no minimum height

00:31:07,279 --> 00:31:09,840
required

00:31:08,320 --> 00:31:11,360
just understand that it's going to add

00:31:09,840 --> 00:31:12,799
additional overhead

00:31:11,360 --> 00:31:14,559
for that either if you have anything to

00:31:12,799 --> 00:31:16,480
add or subtract

00:31:14,559 --> 00:31:18,159
yeah the only the only thing i'd add

00:31:16,480 --> 00:31:21,039
there agree with all that is also

00:31:18,159 --> 00:31:22,960
um it can seem a little overwhelming it

00:31:21,039 --> 00:31:24,720
can sometimes seem a little bit like

00:31:22,960 --> 00:31:27,039
there's this nirvana state and if you

00:31:24,720 --> 00:31:28,640
can't get there you can't do this at all

00:31:27,039 --> 00:31:30,480
i would say you can probably bite off

00:31:28,640 --> 00:31:31,360
some use cases almost no matter where

00:31:30,480 --> 00:31:32,880
you are at

00:31:31,360 --> 00:31:35,039
i've seen versions of progressive

00:31:32,880 --> 00:31:36,799
delivery work for on-premise software

00:31:35,039 --> 00:31:38,559
i've seen it work in some pretty legacy

00:31:36,799 --> 00:31:39,440
places even if that's what they weren't

00:31:38,559 --> 00:31:41,039
calling it

00:31:39,440 --> 00:31:42,480
i would maybe work backwards from the

00:31:41,039 --> 00:31:44,000
core question of what are we trying to

00:31:42,480 --> 00:31:44,559
learn and how can we learn it a little

00:31:44,000 --> 00:31:46,480
faster

00:31:44,559 --> 00:31:48,480
in a little more controlled way and not

00:31:46,480 --> 00:31:49,919
worry so much about does the end state

00:31:48,480 --> 00:31:51,360
look like the perfect slides for

00:31:49,919 --> 00:31:52,559
progressive delivery

00:31:51,360 --> 00:31:55,679
because you can get there over time

00:31:52,559 --> 00:31:59,120
right you can get there step by step

00:31:55,679 --> 00:32:01,200
awesome answer okay so the next question

00:31:59,120 --> 00:32:02,720
it's about maintaining feature flags so

00:32:01,200 --> 00:32:05,760
kind of tldr

00:32:02,720 --> 00:32:07,519
um if what are some of the challenges in

00:32:05,760 --> 00:32:09,200
maintaining future flags like if you had

00:32:07,519 --> 00:32:11,919
thousands of flags

00:32:09,200 --> 00:32:13,519
over a period of time like when do you

00:32:11,919 --> 00:32:14,799
drop the future flag so

00:32:13,519 --> 00:32:16,559
i can take your first app you can take

00:32:14,799 --> 00:32:19,600
it for staff or rock paper scissors oh

00:32:16,559 --> 00:32:21,519
uh i'll jump in on this one um it's a

00:32:19,600 --> 00:32:24,640
really good question right there are

00:32:21,519 --> 00:32:26,000
uh lots of great thoughts out there here

00:32:24,640 --> 00:32:27,679
at harness we're working on feature

00:32:26,000 --> 00:32:28,080
flags and we're trying to take on some

00:32:27,679 --> 00:32:30,480
of this

00:32:28,080 --> 00:32:32,399
work a thing to note about feature flags

00:32:30,480 --> 00:32:34,080
right is nothing is all roses

00:32:32,399 --> 00:32:35,840
so when you get a lot of feature flags

00:32:34,080 --> 00:32:37,360
in your system what you have is in some

00:32:35,840 --> 00:32:39,039
cases a lot of tech debt

00:32:37,360 --> 00:32:40,799
because maybe the feature flag stopped

00:32:39,039 --> 00:32:42,080
being useful six months ago you're done

00:32:40,799 --> 00:32:45,200
with that feature

00:32:42,080 --> 00:32:47,440
what you have is a lot of different

00:32:45,200 --> 00:32:49,760
versions of things different developers

00:32:47,440 --> 00:32:51,200
might standardize slightly differently

00:32:49,760 --> 00:32:52,799
so there are definitely maintenance and

00:32:51,200 --> 00:32:55,200
life cycle challenges

00:32:52,799 --> 00:32:56,000
with feature flags right now most of the

00:32:55,200 --> 00:32:58,640
solutions tend

00:32:56,000 --> 00:33:00,399
to honestly be hygiene in process um

00:32:58,640 --> 00:33:02,000
good teams should clean up their flags

00:33:00,399 --> 00:33:04,159
as they're done using them

00:33:02,000 --> 00:33:05,600
when you're done with a flag is kind of

00:33:04,159 --> 00:33:07,440
up to you but it's essentially when

00:33:05,600 --> 00:33:09,519
you're not gonna need to turn on and off

00:33:07,440 --> 00:33:12,640
that feature dynamically anymore

00:33:09,519 --> 00:33:14,399
if that new ui is hit 100 in all geos

00:33:12,640 --> 00:33:16,159
and you don't anticipate that you need a

00:33:14,399 --> 00:33:17,039
kill switch to suddenly revert to the

00:33:16,159 --> 00:33:18,240
old ui

00:33:17,039 --> 00:33:20,159
you should probably go in there and

00:33:18,240 --> 00:33:20,960
deprecate that flag and just make that

00:33:20,159 --> 00:33:22,720
the code

00:33:20,960 --> 00:33:25,039
instead of having that continue to live

00:33:22,720 --> 00:33:26,880
under a flag that's tech debt

00:33:25,039 --> 00:33:29,440
right now again that tends to resolve

00:33:26,880 --> 00:33:31,200
revolve around good practices hygiene

00:33:29,440 --> 00:33:33,600
i've seen some really smart stuff built

00:33:31,200 --> 00:33:35,279
out in jira in terms of there being flag

00:33:33,600 --> 00:33:37,279
cleanup states associated

00:33:35,279 --> 00:33:38,720
tickets three months later i've seen

00:33:37,279 --> 00:33:41,200
some good slack ops

00:33:38,720 --> 00:33:42,559
type stuff with reminders we're trying

00:33:41,200 --> 00:33:44,080
to help with this problem through some

00:33:42,559 --> 00:33:45,279
automation and cleanup work we're

00:33:44,080 --> 00:33:47,360
looking at

00:33:45,279 --> 00:33:48,880
if you're interested uber has a very

00:33:47,360 --> 00:33:50,960
good system on this they have a white

00:33:48,880 --> 00:33:52,799
paper out called piranha

00:33:50,960 --> 00:33:54,399
that i think is very inspirational to

00:33:52,799 --> 00:33:56,480
folks like us at harness who are working

00:33:54,399 --> 00:33:58,159
on feature flag products

00:33:56,480 --> 00:33:59,519
really trying to automate that cleanup

00:33:58,159 --> 00:34:00,640
so that you don't end up in a big

00:33:59,519 --> 00:34:02,960
massive tech debt

00:34:00,640 --> 00:34:04,320
so no going in it's a problem and talk

00:34:02,960 --> 00:34:06,320
with your team about

00:34:04,320 --> 00:34:09,599
the kind of hygiene and practices you

00:34:06,320 --> 00:34:11,280
want um but pay attention to it for sure

00:34:09,599 --> 00:34:13,440
yeah and just just adding on that like

00:34:11,280 --> 00:34:16,159
awesome explanation like

00:34:13,440 --> 00:34:17,280
we've actually we've faced that problem

00:34:16,159 --> 00:34:19,839
at harness right now

00:34:17,280 --> 00:34:21,760
like we have our feature flags is in the

00:34:19,839 --> 00:34:24,879
thousands right that we have because of

00:34:21,760 --> 00:34:27,839
entitlements and like r d and

00:34:24,879 --> 00:34:29,520
like just every single possible reason

00:34:27,839 --> 00:34:31,679
to use a future flag we have

00:34:29,520 --> 00:34:33,280
now we are solving that with we're

00:34:31,679 --> 00:34:35,040
baking that more into our platform

00:34:33,280 --> 00:34:37,040
it was born out of necessity for us

00:34:35,040 --> 00:34:38,240
because as a little background harness

00:34:37,040 --> 00:34:41,359
as a

00:34:38,240 --> 00:34:43,440
sas provider and so we had

00:34:41,359 --> 00:34:44,399
no large number of flags that we didn't

00:34:43,440 --> 00:34:47,919
know if they were alive

00:34:44,399 --> 00:34:51,040
they got deprecated like going back to

00:34:47,919 --> 00:34:52,079
ethan's direction there like hey if it's

00:34:51,040 --> 00:34:53,760
all users

00:34:52,079 --> 00:34:55,919
why even is it behind a flag you know

00:34:53,760 --> 00:34:56,240
coverage-wise so we're we're solving

00:34:55,919 --> 00:34:59,200
that

00:34:56,240 --> 00:35:00,320
uh with our platform itself but that's

00:34:59,200 --> 00:35:01,280
that could be another talk for another

00:35:00,320 --> 00:35:03,760
day so

00:35:01,280 --> 00:35:04,480
good question so next question here um

00:35:03,760 --> 00:35:07,119
is

00:35:04,480 --> 00:35:08,640
uh i think progressive delivery is uh

00:35:07,119 --> 00:35:11,200
more specific

00:35:08,640 --> 00:35:12,240
uh or more it's has a more specific

00:35:11,200 --> 00:35:15,280
target

00:35:12,240 --> 00:35:16,960
uh than cd is it so uh

00:35:15,280 --> 00:35:18,880
yes it was very special applied to

00:35:16,960 --> 00:35:22,640
extremely extremely specific

00:35:18,880 --> 00:35:24,240
right so so i gave a talk a while ago

00:35:22,640 --> 00:35:26,320
uh it's called did you flag or do you

00:35:24,240 --> 00:35:29,200
deploy and we went through

00:35:26,320 --> 00:35:30,079
several fictitious scenarios if it's or

00:35:29,200 --> 00:35:32,800
deploy

00:35:30,079 --> 00:35:33,440
but to the whole point a feature flag is

00:35:32,800 --> 00:35:34,960
specific

00:35:33,440 --> 00:35:37,200
right if it doesn't impact the entire

00:35:34,960 --> 00:35:38,000
user base that it is a good candidate

00:35:37,200 --> 00:35:40,079
for a flag

00:35:38,000 --> 00:35:41,040
if it does it's it's a deployment right

00:35:40,079 --> 00:35:43,680
so uh

00:35:41,040 --> 00:35:44,640
to ethan's uh proposed workflow you know

00:35:43,680 --> 00:35:46,960
to enable

00:35:44,640 --> 00:35:48,880
feature flags you have to deploy the

00:35:46,960 --> 00:35:50,800
flaggable application at one point right

00:35:48,880 --> 00:35:51,760
so if it's a greenfield application it's

00:35:50,800 --> 00:35:53,440
there from the get-go

00:35:51,760 --> 00:35:55,119
if it's a brownfield application you're

00:35:53,440 --> 00:35:57,040
making changes and deploying

00:35:55,119 --> 00:35:58,640
a version of the application that can be

00:35:57,040 --> 00:36:00,640
toggled on and off or

00:35:58,640 --> 00:36:02,640
blocks of code or methods or the

00:36:00,640 --> 00:36:07,119
invocation path that changes right

00:36:02,640 --> 00:36:09,040
um so it is pretty specific there

00:36:07,119 --> 00:36:10,400
ethan anything specific when you add it

00:36:09,040 --> 00:36:12,480
to track to that

00:36:10,400 --> 00:36:14,079
if the only thing i'd say i might not be

00:36:12,480 --> 00:36:16,240
uh interpreting the word targeting

00:36:14,079 --> 00:36:17,760
customer in quite the way you intended

00:36:16,240 --> 00:36:19,520
but just to throw it out there

00:36:17,760 --> 00:36:20,800
i would say progressive delivery is very

00:36:19,520 --> 00:36:23,760
problem specific

00:36:20,800 --> 00:36:25,040
in a way that cd is not cd is a delivery

00:36:23,760 --> 00:36:26,560
deployment whatever you want to call it

00:36:25,040 --> 00:36:27,680
right the end goal is get your changes

00:36:26,560 --> 00:36:29,520
onto production

00:36:27,680 --> 00:36:31,520
progressive delivery is really a way of

00:36:29,520 --> 00:36:32,079
designing scenarios against specific

00:36:31,520 --> 00:36:34,480
problems

00:36:32,079 --> 00:36:36,000
specific things you're trying to learn

00:36:34,480 --> 00:36:37,440
whether that's infrastructure things

00:36:36,000 --> 00:36:40,240
customer things

00:36:37,440 --> 00:36:41,839
um it's it's a way that you can build a

00:36:40,240 --> 00:36:44,000
learning loop around your changes

00:36:41,839 --> 00:36:46,480
instead of just shipping them

00:36:44,000 --> 00:36:47,359
awesome awesome i think i think for the

00:36:46,480 --> 00:36:48,880
the next question

00:36:47,359 --> 00:36:50,400
actually you you answered it part of

00:36:48,880 --> 00:36:51,920
what that i that was my first time

00:36:50,400 --> 00:36:53,280
hearing that uber project maybe just

00:36:51,920 --> 00:36:55,040
restating it over time like

00:36:53,280 --> 00:36:57,839
some some advice for like some resources

00:36:55,040 --> 00:36:59,760
to learn but for next steps

00:36:57,839 --> 00:37:02,320
yeah so the uber white paper is called

00:36:59,760 --> 00:37:05,040
piranha it's a very cool system

00:37:02,320 --> 00:37:05,520
um i think anywhere you look at kind of

00:37:05,040 --> 00:37:07,359
the

00:37:05,520 --> 00:37:09,599
devops institute type stuff the

00:37:07,359 --> 00:37:10,880
accelerate type stuff

00:37:09,599 --> 00:37:12,880
you're going to find a lot of

00:37:10,880 --> 00:37:14,079
information around progressive delivery

00:37:12,880 --> 00:37:15,440
you're going to find a lot of

00:37:14,079 --> 00:37:18,640
information about

00:37:15,440 --> 00:37:20,720
feature flags in that general world

00:37:18,640 --> 00:37:22,320
awesome uh the next the next question

00:37:20,720 --> 00:37:24,720
was more of a statement just

00:37:22,320 --> 00:37:25,839
saying that this person agreed uh with

00:37:24,720 --> 00:37:28,880
us so

00:37:25,839 --> 00:37:31,280
and similar patterns awesome yeah like

00:37:28,880 --> 00:37:32,320
keep keep on pushing with progressive

00:37:31,280 --> 00:37:35,599
delivery

00:37:32,320 --> 00:37:37,720
uh the next question um

00:37:35,599 --> 00:37:39,440
so reading it it's uh what what about

00:37:37,720 --> 00:37:41,520
clusterization so

00:37:39,440 --> 00:37:42,640
if you're this is a good one for you

00:37:41,520 --> 00:37:44,480
you've been so like

00:37:42,640 --> 00:37:45,839
you're working with a significant amount

00:37:44,480 --> 00:37:48,560
of feature flags

00:37:45,839 --> 00:37:50,079
um how do you keep track of like what

00:37:48,560 --> 00:37:51,599
customer gets the flag or like if they

00:37:50,079 --> 00:37:54,800
get multiple flags

00:37:51,599 --> 00:37:57,200
and it's uh the last point it's a

00:37:54,800 --> 00:37:59,680
pretty good open discussion like how do

00:37:57,200 --> 00:38:01,599
you identify the specific feedback

00:37:59,680 --> 00:38:02,960
how do you how do you disseminate that

00:38:01,599 --> 00:38:04,400
feedback

00:38:02,960 --> 00:38:06,079
yes that's a really good question right

00:38:04,400 --> 00:38:07,680
we didn't cover it but one of the things

00:38:06,079 --> 00:38:08,800
that's pretty common is teams will start

00:38:07,680 --> 00:38:10,720
out by building their own

00:38:08,800 --> 00:38:12,800
sort of feature flag solution um

00:38:10,720 --> 00:38:14,079
internally app config switches and

00:38:12,800 --> 00:38:16,240
things like that

00:38:14,079 --> 00:38:18,160
um one of the reasons we think it makes

00:38:16,240 --> 00:38:19,760
sense to graduate to commercial feature

00:38:18,160 --> 00:38:21,520
flag solutions as the basis of your

00:38:19,760 --> 00:38:22,880
progressive delivery workflows like the

00:38:21,520 --> 00:38:26,079
one we're building here

00:38:22,880 --> 00:38:27,520
is exactly to solve that problem um

00:38:26,079 --> 00:38:29,200
so for instance you need your feature

00:38:27,520 --> 00:38:31,200
flag solution to have

00:38:29,200 --> 00:38:33,040
really good uis so that you can put in

00:38:31,200 --> 00:38:34,640
different accounts or targets

00:38:33,040 --> 00:38:36,880
and see exactly what the state of the

00:38:34,640 --> 00:38:38,800
world is which 15 flags are impacting

00:38:36,880 --> 00:38:41,520
them and what state are those flags in

00:38:38,800 --> 00:38:43,760
you also need some evaluation precedence

00:38:41,520 --> 00:38:45,520
because to your point i might have

00:38:43,760 --> 00:38:47,920
one user that through three different

00:38:45,520 --> 00:38:49,920
flags is in a conflict situation where

00:38:47,920 --> 00:38:50,800
one flag rule conflicts with another

00:38:49,920 --> 00:38:52,720
flag rule

00:38:50,800 --> 00:38:54,240
right the system needs to know how to

00:38:52,720 --> 00:38:56,640
handle that precedent

00:38:54,240 --> 00:38:58,320
what rules get evaluated in what order

00:38:56,640 --> 00:38:59,280
if the rules disagree with each other

00:38:58,320 --> 00:39:01,280
who wins

00:38:59,280 --> 00:39:03,760
right commercial solutions like ours and

00:39:01,280 --> 00:39:05,920
like others tend to have a lot of

00:39:03,760 --> 00:39:07,839
thought put into this a lot of maturity

00:39:05,920 --> 00:39:09,359
put into this to handle exactly those

00:39:07,839 --> 00:39:10,640
kind of scenarios for instance we've got

00:39:09,359 --> 00:39:12,560
a screen where you can

00:39:10,640 --> 00:39:14,400
put in any identifier for one of your

00:39:12,560 --> 00:39:16,079
targets and instantly see

00:39:14,400 --> 00:39:18,320
every flag impacting them across your

00:39:16,079 --> 00:39:20,880
whole application that can be hard to do

00:39:18,320 --> 00:39:23,200
in your own solution and it can

00:39:20,880 --> 00:39:24,800
start to loop back around and cause

00:39:23,200 --> 00:39:26,720
problems instead of helping you

00:39:24,800 --> 00:39:28,640
if it's allowed to go a little bit too

00:39:26,720 --> 00:39:31,200
mature or scale up too much without

00:39:28,640 --> 00:39:31,200
solving that

00:39:31,359 --> 00:39:35,119
that's an awesome answer i see i see

00:39:33,440 --> 00:39:36,880
that that's all you're the pm

00:39:35,119 --> 00:39:38,480
we're very laser focused on this problem

00:39:36,880 --> 00:39:41,440
i love it um

00:39:38,480 --> 00:39:42,000
so for the next question um i'll take i

00:39:41,440 --> 00:39:44,240
would like to

00:39:42,000 --> 00:39:45,200
stab at this and have the hitter come in

00:39:44,240 --> 00:39:46,800
behind me ethan

00:39:45,200 --> 00:39:48,240
and so what kind of resistance to

00:39:46,800 --> 00:39:49,119
adoption of progressive delivery do you

00:39:48,240 --> 00:39:52,320
foresee

00:39:49,119 --> 00:39:53,040
well my biggest part of if i was in the

00:39:52,320 --> 00:39:55,200
other seat

00:39:53,040 --> 00:39:57,200
and i was working on a brownfield an

00:39:55,200 --> 00:39:58,880
existing project would be

00:39:57,200 --> 00:40:00,400
was it even built to make these kind of

00:39:58,880 --> 00:40:01,839
remote calls right this boils back to

00:40:00,400 --> 00:40:02,640
the very first question like you have to

00:40:01,839 --> 00:40:04,480
be yay tall

00:40:02,640 --> 00:40:05,839
is there some sort of marker or how tall

00:40:04,480 --> 00:40:07,760
you have to be

00:40:05,839 --> 00:40:09,119
it doesn't it's a code change right in

00:40:07,760 --> 00:40:11,680
any sort of commercial

00:40:09,119 --> 00:40:12,960
or open source or even homegrown

00:40:11,680 --> 00:40:16,640
solution requires you

00:40:12,960 --> 00:40:19,680
to make calls right so you're

00:40:16,640 --> 00:40:20,560
making a bunch of if then else or any

00:40:19,680 --> 00:40:23,200
sort of

00:40:20,560 --> 00:40:24,560
in combination or aggregation of those

00:40:23,200 --> 00:40:26,079
particular statements if you're going to

00:40:24,560 --> 00:40:26,560
enable something or not right it could

00:40:26,079 --> 00:40:28,880
be

00:40:26,560 --> 00:40:30,480
the way the math is something is

00:40:28,880 --> 00:40:32,480
calculated it can be a way that if a

00:40:30,480 --> 00:40:35,680
code block is executed it could be

00:40:32,480 --> 00:40:38,880
you know different different types of

00:40:35,680 --> 00:40:42,880
ui items are presented right um it's

00:40:38,880 --> 00:40:45,359
it is more engineering ex expertise

00:40:42,880 --> 00:40:46,800
and all anytime you add a line of code

00:40:45,359 --> 00:40:48,319
it's like is it maintainable

00:40:46,800 --> 00:40:50,160
does it meet our standards like there's

00:40:48,319 --> 00:40:51,920
quite a special question to that but

00:40:50,160 --> 00:40:53,760
you know you've been in your years like

00:40:51,920 --> 00:40:56,960
years of focusing on this problem

00:40:53,760 --> 00:40:58,480
what were some common oh that's so much

00:40:56,960 --> 00:41:00,720
common adoption problems

00:40:58,480 --> 00:41:02,319
yeah there's maybe three it mentions

00:41:00,720 --> 00:41:03,520
resistance right so i'll focus on maybe

00:41:02,319 --> 00:41:06,960
three things i've seen

00:41:03,520 --> 00:41:08,800
a few times um one is we can't do that

00:41:06,960 --> 00:41:10,800
right we're not we're not that kind of

00:41:08,800 --> 00:41:14,560
company we're traditional we're

00:41:10,800 --> 00:41:16,160
legacy or a bank or on-prem right

00:41:14,560 --> 00:41:18,240
and that's often just not the case

00:41:16,160 --> 00:41:20,000
sometimes maybe setting aside the trend

00:41:18,240 --> 00:41:21,839
to your language like feature flags will

00:41:20,000 --> 00:41:22,720
help facilitate that conversation

00:41:21,839 --> 00:41:25,119
internally

00:41:22,720 --> 00:41:26,000
and focus more on technical

00:41:25,119 --> 00:41:27,839
implementation

00:41:26,000 --> 00:41:30,640
and outcomes because sometimes the

00:41:27,839 --> 00:41:32,000
buzzwords can set people actually

00:41:30,640 --> 00:41:33,520
set their alarms up real quick well

00:41:32,000 --> 00:41:35,520
that's a new term that's for these cloud

00:41:33,520 --> 00:41:37,920
native modern companies we're not that

00:41:35,520 --> 00:41:39,839
end of conversation so if you really

00:41:37,920 --> 00:41:41,599
focus more on what's happening

00:41:39,839 --> 00:41:43,599
underneath in the application that makes

00:41:41,599 --> 00:41:45,280
all this possible you can very often

00:41:43,599 --> 00:41:47,040
times have a healthier conversation if

00:41:45,280 --> 00:41:49,520
you're getting that kind of resistance

00:41:47,040 --> 00:41:51,119
another form of resistance is we're

00:41:49,520 --> 00:41:52,240
going to add stuff to our code

00:41:51,119 --> 00:41:53,839
people don't like to do that how is

00:41:52,240 --> 00:41:55,119
another tool going to help us we have to

00:41:53,839 --> 00:41:57,119
change how we work

00:41:55,119 --> 00:41:58,480
i'm an engineer i know what i'm doing i

00:41:57,119 --> 00:42:01,599
don't want to start working behind

00:41:58,480 --> 00:42:04,640
flags and this is really about

00:42:01,599 --> 00:42:06,079
maybe isolating a small project a poc

00:42:04,640 --> 00:42:08,400
kind of thing to prove to everyone it

00:42:06,079 --> 00:42:09,839
works talk about some really safe ways

00:42:08,400 --> 00:42:11,440
you can do it are there places in the

00:42:09,839 --> 00:42:12,400
app people aren't worried about trying

00:42:11,440 --> 00:42:14,400
something new

00:42:12,400 --> 00:42:16,079
just finding a way for people internally

00:42:14,400 --> 00:42:19,119
to see that value usually at

00:42:16,079 --> 00:42:21,839
an engineering team level um the third

00:42:19,119 --> 00:42:23,839
barrier can just be

00:42:21,839 --> 00:42:25,760
security maybe is the right way to say

00:42:23,839 --> 00:42:27,839
you're changing stuff in production

00:42:25,760 --> 00:42:29,119
that's always scary and there's very

00:42:27,839 --> 00:42:31,119
valid reasons people would have

00:42:29,119 --> 00:42:32,960
resistance to those kind of things

00:42:31,119 --> 00:42:35,040
so what you really want to talk about is

00:42:32,960 --> 00:42:36,720
how safe it is look at the commercial

00:42:35,040 --> 00:42:38,720
tooling you're using to do it you talk

00:42:36,720 --> 00:42:40,160
to them about how they make it safe

00:42:38,720 --> 00:42:41,760
what are their policies how do they

00:42:40,160 --> 00:42:42,240
govern your data all those kinds of

00:42:41,760 --> 00:42:43,839
things

00:42:42,240 --> 00:42:45,760
so you can show people that even though

00:42:43,839 --> 00:42:47,680
we're making some changes in production

00:42:45,760 --> 00:42:49,520
um actually what we're going to end up

00:42:47,680 --> 00:42:50,960
with is a safer app an app that works

00:42:49,520 --> 00:42:53,200
better we're not adding risk we're

00:42:50,960 --> 00:42:54,960
removing risk

00:42:53,200 --> 00:42:57,520
awesome thanks ethan i like that i'm

00:42:54,960 --> 00:42:59,680
going to steal some of your words there

00:42:57,520 --> 00:43:01,200
future conversations so um i think that

00:42:59,680 --> 00:43:02,720
was all the questions that we have uh we

00:43:01,200 --> 00:43:06,160
have one or two more minutes um

00:43:02,720 --> 00:43:06,640
if anybody has any more questions uh if

00:43:06,160 --> 00:43:08,720
not

00:43:06,640 --> 00:43:10,000
you know on behalf of ethan and i and

00:43:08,720 --> 00:43:12,400
the linux foundation

00:43:10,000 --> 00:43:13,920
uh we really uh really enjoyed our time

00:43:12,400 --> 00:43:15,359
here and hope to catch up with you you

00:43:13,920 --> 00:43:18,079
can reach us on twitter

00:43:15,359 --> 00:43:19,599
our twitter handles below and always

00:43:18,079 --> 00:43:22,480
love to converse with people

00:43:19,599 --> 00:43:24,079
christina anything else no that's great

00:43:22,480 --> 00:43:25,680
just want to thank you both again for

00:43:24,079 --> 00:43:27,119
your time today and thank you to all the

00:43:25,680 --> 00:43:29,200
participants who joined us

00:43:27,119 --> 00:43:31,359
as a reminder this recording will be on

00:43:29,200 --> 00:43:32,880
the linux foundation page later today

00:43:31,359 --> 00:43:40,240
and we hope you're able to join us for

00:43:32,880 --> 00:43:40,240

YouTube URL: https://www.youtube.com/watch?v=Cc33Wk-CkA0


