Title: Webinar: Cloud Native Security Exposed: A Layered Approach to Cloud Security
Publication date: 2020-12-15
Playlist: LF Live Webinars
Description: 
	Sponsored by Palo Alto Networks

Securing cloud native applications is a complex process that requires unpacking various attributes and layers across multiple dimensions. In this session, we attempt to expose the various layers that constitute strong security for cloud native applications by examining the security needs of each layer.

Speaker:
Vinay Venkataraghavan, Technical Director, Office of the CTO, Palo Alto Networks
Captions: 
	00:00:00,080 --> 00:00:03,360
forced a layered approach to cloud

00:00:02,399 --> 00:00:06,240
security

00:00:03,360 --> 00:00:08,320
and and i just wanted to explain give a

00:00:06,240 --> 00:00:09,360
brief overview of how this topic came

00:00:08,320 --> 00:00:12,080
about

00:00:09,360 --> 00:00:13,120
you know as i uh you know talk to the

00:00:12,080 --> 00:00:16,560
the community

00:00:13,120 --> 00:00:18,640
users end users with uh you know

00:00:16,560 --> 00:00:19,840
associated with deploying cloud native

00:00:18,640 --> 00:00:22,320
applications

00:00:19,840 --> 00:00:22,960
uh you know the concept of security is

00:00:22,320 --> 00:00:25,680
uh

00:00:22,960 --> 00:00:26,240
is always the the last conversation if

00:00:25,680 --> 00:00:27,519
you will

00:00:26,240 --> 00:00:29,519
but at the same time it's a very

00:00:27,519 --> 00:00:30,480
important conversation and in that

00:00:29,519 --> 00:00:33,760
context

00:00:30,480 --> 00:00:36,719
it is also very important to think about

00:00:33,760 --> 00:00:38,000
in-depth security i've also seen uh

00:00:36,719 --> 00:00:40,960
different teams

00:00:38,000 --> 00:00:42,559
addressing uh the security problem for

00:00:40,960 --> 00:00:43,440
their cloud native application

00:00:42,559 --> 00:00:45,600
deployments

00:00:43,440 --> 00:00:46,559
in a piecemeal manner so what i wanted

00:00:45,600 --> 00:00:49,840
to do was

00:00:46,559 --> 00:00:52,960
provide the entire perspective on how

00:00:49,840 --> 00:00:53,600
security should be uh understood and

00:00:52,960 --> 00:00:55,680
adopted

00:00:53,600 --> 00:00:57,920
and implemented in the context of cloud

00:00:55,680 --> 00:00:59,600
native and you know when i talked about

00:00:57,920 --> 00:01:02,480
when i thought about the

00:00:59,600 --> 00:01:03,840
security in its entirety it also became

00:01:02,480 --> 00:01:06,080
very apparent that

00:01:03,840 --> 00:01:07,439
you know cloud native applications and

00:01:06,080 --> 00:01:10,479
the cloud native

00:01:07,439 --> 00:01:11,680
uh life cycle and the and the workflow

00:01:10,479 --> 00:01:14,799
and the processes

00:01:11,680 --> 00:01:17,119
had some very very distinct layers in it

00:01:14,799 --> 00:01:18,240
so it also made sense to actually talk

00:01:17,119 --> 00:01:19,759
about security

00:01:18,240 --> 00:01:21,600
in the context of these layers and

00:01:19,759 --> 00:01:24,840
that's what i would love to

00:01:21,600 --> 00:01:27,840
take you through uh for the rest of this

00:01:24,840 --> 00:01:27,840
session

00:01:34,799 --> 00:01:39,360
so let's start off by talking about oops

00:01:37,680 --> 00:01:41,040
i'm sorry

00:01:39,360 --> 00:01:43,200
let's start off by talking about what

00:01:41,040 --> 00:01:44,000
cloud native application deployment

00:01:43,200 --> 00:01:46,479
actually

00:01:44,000 --> 00:01:47,759
looks like and what that means so you

00:01:46,479 --> 00:01:50,560
know one of the uh

00:01:47,759 --> 00:01:52,560
cornerstones that we've come to uh

00:01:50,560 --> 00:01:54,880
recognize and realize in the context of

00:01:52,560 --> 00:01:58,719
cloud native application deployments

00:01:54,880 --> 00:02:01,520
is the major focus of uh you know devops

00:01:58,719 --> 00:02:02,719
uh teams that are deploying applications

00:02:01,520 --> 00:02:05,119
very very rapidly

00:02:02,719 --> 00:02:05,759
and in that context they are leveraging

00:02:05,119 --> 00:02:08,640
you know

00:02:05,759 --> 00:02:10,479
container native uh artifacts such as

00:02:08,640 --> 00:02:12,800
docker files to actually

00:02:10,479 --> 00:02:13,520
represent their applications and they

00:02:12,800 --> 00:02:16,319
constitute

00:02:13,520 --> 00:02:17,200
packages build artifacts all aspects of

00:02:16,319 --> 00:02:19,680
their system

00:02:17,200 --> 00:02:21,200
represented in a in a docker file which

00:02:19,680 --> 00:02:23,840
then actually references

00:02:21,200 --> 00:02:25,760
uh third-party images that could be

00:02:23,840 --> 00:02:28,080
easily leveraged in the context of

00:02:25,760 --> 00:02:30,160
software reuse and portability

00:02:28,080 --> 00:02:32,319
and then these docker files are used

00:02:30,160 --> 00:02:34,800
actually next in the next process

00:02:32,319 --> 00:02:37,360
build a container image which then gets

00:02:34,800 --> 00:02:40,080
resulted in the in the deployment of

00:02:37,360 --> 00:02:42,160
what we call containers as pods in a

00:02:40,080 --> 00:02:44,879
kubernetes system for example

00:02:42,160 --> 00:02:46,160
and one other aspect of cloud native

00:02:44,879 --> 00:02:48,239
application deployment

00:02:46,160 --> 00:02:49,519
is whenever i think about that i think

00:02:48,239 --> 00:02:51,440
about scale

00:02:49,519 --> 00:02:53,840
i think about the fact that a lot of

00:02:51,440 --> 00:02:56,560
these containers are highly ethmoidal

00:02:53,840 --> 00:02:58,080
that you know they they they can uh be

00:02:56,560 --> 00:03:00,239
scaled out to meet

00:02:58,080 --> 00:03:02,720
uh instantaneous demand if you will and

00:03:00,239 --> 00:03:05,920
then scale back to actually adjust for

00:03:02,720 --> 00:03:07,840
whatever the current demand uh uh

00:03:05,920 --> 00:03:09,599
for your applications are so i think

00:03:07,840 --> 00:03:11,040
about scale i think about the fact that

00:03:09,599 --> 00:03:13,920
they're highly effeminal

00:03:11,040 --> 00:03:15,599
so in that context you know we have

00:03:13,920 --> 00:03:17,760
devops teams that are deploying at a

00:03:15,599 --> 00:03:18,560
very very rapid pace actually deploying

00:03:17,760 --> 00:03:20,560
infrastructure

00:03:18,560 --> 00:03:22,480
tearing down infrastructure and then

00:03:20,560 --> 00:03:24,159
they're always also treating their

00:03:22,480 --> 00:03:26,879
infrastructure as cattle

00:03:24,159 --> 00:03:28,319
and not pets and what that means is any

00:03:26,879 --> 00:03:29,480
changes that they want to make to the

00:03:28,319 --> 00:03:32,720
infrastructure

00:03:29,480 --> 00:03:33,760
is represented as in infrastructure as

00:03:32,720 --> 00:03:36,799
code templates

00:03:33,760 --> 00:03:37,440
and then whenever an update needs to be

00:03:36,799 --> 00:03:39,280
performed

00:03:37,440 --> 00:03:41,200
the entire deployment if you will the

00:03:39,280 --> 00:03:41,920
container if you will for example is

00:03:41,200 --> 00:03:44,959
actually

00:03:41,920 --> 00:03:48,159
destroyed and then re-instantiated

00:03:44,959 --> 00:03:50,879
with the new and updated artifacts now

00:03:48,159 --> 00:03:51,760
let's actually move to security you know

00:03:50,879 --> 00:03:54,000
let's talk about

00:03:51,760 --> 00:03:55,519
security in the context of this highly

00:03:54,000 --> 00:03:57,280
dynamic environment

00:03:55,519 --> 00:03:59,599
and what i've tried to convey in this

00:03:57,280 --> 00:04:02,959
picture is if you take the first

00:03:59,599 --> 00:04:04,799
four uh pod representations if you will

00:04:02,959 --> 00:04:07,680
but by the time security comes and says

00:04:04,799 --> 00:04:10,239
okay i understand your security posture

00:04:07,680 --> 00:04:11,760
i understand your application posture

00:04:10,239 --> 00:04:12,720
and i need to come and secure it so they

00:04:11,760 --> 00:04:14,640
come and secure it

00:04:12,720 --> 00:04:16,079
but in the time that the security teams

00:04:14,640 --> 00:04:16,799
have come and they're trying to secure

00:04:16,079 --> 00:04:20,079
this

00:04:16,799 --> 00:04:22,240
two new parts uh or two new uh

00:04:20,079 --> 00:04:24,320
sets of pods have been deployed or two

00:04:22,240 --> 00:04:26,800
new micro services have been deployed

00:04:24,320 --> 00:04:27,360
so now security teams think that they

00:04:26,800 --> 00:04:28,639
have actually

00:04:27,360 --> 00:04:30,479
performed their job they've got

00:04:28,639 --> 00:04:32,560
everything secured but now they have a

00:04:30,479 --> 00:04:35,199
couple of assets that are not secured

00:04:32,560 --> 00:04:37,440
so now let's think about the adversary i

00:04:35,199 --> 00:04:38,800
mean our adversaries are constantly

00:04:37,440 --> 00:04:41,520
evolving and

00:04:38,800 --> 00:04:42,400
leveraging uh sophisticated techniques

00:04:41,520 --> 00:04:45,120
to exploit

00:04:42,400 --> 00:04:45,919
every single avenue if you will to

00:04:45,120 --> 00:04:49,120
exploit

00:04:45,919 --> 00:04:51,520
uh our our production resources so now

00:04:49,120 --> 00:04:52,720
these adversaries can now attack these

00:04:51,520 --> 00:04:55,040
unprotected parts

00:04:52,720 --> 00:04:56,880
and potentially for example expo data

00:04:55,040 --> 00:04:58,880
and we have seen so many different

00:04:56,880 --> 00:05:00,080
vulnerabilities and attack vectors that

00:04:58,880 --> 00:05:02,639
are being exploited

00:05:00,080 --> 00:05:04,400
sadly on a very very regular basis so

00:05:02,639 --> 00:05:06,560
the point here is the fact that you have

00:05:04,400 --> 00:05:08,080
devops teams that are moving very fast

00:05:06,560 --> 00:05:10,400
you have security teams that are

00:05:08,080 --> 00:05:10,960
actually now struggling to understand

00:05:10,400 --> 00:05:12,880
the new

00:05:10,960 --> 00:05:15,280
dynamic environments to ensure that they

00:05:12,880 --> 00:05:17,440
have the appropriate levels of security

00:05:15,280 --> 00:05:19,680
and the last part of that picture is

00:05:17,440 --> 00:05:22,080
that the adversaries are now using

00:05:19,680 --> 00:05:23,680
sophisticated ai and machine learning

00:05:22,080 --> 00:05:26,479
and automation capabilities

00:05:23,680 --> 00:05:27,440
to actually unearth exploit uh all the

00:05:26,479 --> 00:05:29,600
different types of

00:05:27,440 --> 00:05:31,919
uh threats and vulnerabilities so you

00:05:29,600 --> 00:05:33,039
can see this is a this is a constant and

00:05:31,919 --> 00:05:36,160
repeating pattern

00:05:33,039 --> 00:05:38,000
so this in essence is one of the aspects

00:05:36,160 --> 00:05:40,479
and how we should be thinking about

00:05:38,000 --> 00:05:42,639
cloud native application deployments the

00:05:40,479 --> 00:05:45,199
problems associated with security

00:05:42,639 --> 00:05:46,400
and how adversaries can actually uh

00:05:45,199 --> 00:05:53,039
exploit a lot of

00:05:46,400 --> 00:05:56,720
uh holes in the armor if you

00:05:53,039 --> 00:05:58,400
so now let's once again uh make sure

00:05:56,720 --> 00:06:00,720
that we understand the entire

00:05:58,400 --> 00:06:02,880
application stack so fundamentally at

00:06:00,720 --> 00:06:05,360
the layer you know you have your typical

00:06:02,880 --> 00:06:07,199
uh access aspects of it where you have

00:06:05,360 --> 00:06:08,479
your load balancers your either your

00:06:07,199 --> 00:06:11,120
network load balancers

00:06:08,479 --> 00:06:12,720
application load balances you have a

00:06:11,120 --> 00:06:15,039
large number of uh

00:06:12,720 --> 00:06:16,479
subnets if you will where you're

00:06:15,039 --> 00:06:18,880
deployed all your hosts

00:06:16,479 --> 00:06:20,319
on top of which we can actually uh

00:06:18,880 --> 00:06:23,360
deploy either

00:06:20,319 --> 00:06:25,680
managed or self-hosted uh kubernetes

00:06:23,360 --> 00:06:27,039
uh the kubernetes orchestrator for our

00:06:25,680 --> 00:06:29,759
container deployments

00:06:27,039 --> 00:06:31,680
we also need storage whether it's

00:06:29,759 --> 00:06:33,440
databases or cloud storage

00:06:31,680 --> 00:06:35,759
so once we have all of these artifacts

00:06:33,440 --> 00:06:38,160
we deploy our container orchestrators

00:06:35,759 --> 00:06:39,440
and one of the main avenues through

00:06:38,160 --> 00:06:42,639
which we can actually

00:06:39,440 --> 00:06:44,560
uh leverage and configure and deploy

00:06:42,639 --> 00:06:46,319
applications on the orchestrator is

00:06:44,560 --> 00:06:48,720
using the orchestrator api

00:06:46,319 --> 00:06:51,120
so we have to the uh the upper the

00:06:48,720 --> 00:06:53,599
orchestrator exposes the api server

00:06:51,120 --> 00:06:55,599
and a very rich set of functionality

00:06:53,599 --> 00:06:56,319
which are then leveraged by clients to

00:06:55,599 --> 00:06:58,160
actually

00:06:56,319 --> 00:06:59,360
uh perform various actions on the

00:06:58,160 --> 00:07:01,599
orchestrator now

00:06:59,360 --> 00:07:02,800
the next aspect of that is also we want

00:07:01,599 --> 00:07:05,520
to make sure that we

00:07:02,800 --> 00:07:07,280
have uh isolation and one of the aspects

00:07:05,520 --> 00:07:08,800
through which that is facilitated in a

00:07:07,280 --> 00:07:11,599
kubernetes environment

00:07:08,800 --> 00:07:12,560
is using namespaces and then only these

00:07:11,599 --> 00:07:14,400
namespaces

00:07:12,560 --> 00:07:15,680
we finally actually deploy the

00:07:14,400 --> 00:07:19,199
application pods

00:07:15,680 --> 00:07:22,560
so once again all of these different

00:07:19,199 --> 00:07:26,639
artifacts are what comprise the new

00:07:22,560 --> 00:07:26,639
cloud native application stack

00:07:27,440 --> 00:07:30,880
however with a lot of these uh a very

00:07:30,319 --> 00:07:34,240
very

00:07:30,880 --> 00:07:35,680
uh advanced system it comes with a great

00:07:34,240 --> 00:07:38,000
level of complexity

00:07:35,680 --> 00:07:39,039
and with that complexity it comes with a

00:07:38,000 --> 00:07:42,080
whole bunch of

00:07:39,039 --> 00:07:42,800
threat vectors as well so i before i

00:07:42,080 --> 00:07:44,720
talk about

00:07:42,800 --> 00:07:46,240
you know how we can secure it we need to

00:07:44,720 --> 00:07:47,199
make sure that we have a very good

00:07:46,240 --> 00:07:49,039
understanding

00:07:47,199 --> 00:07:50,639
of what these threat vectors are and

00:07:49,039 --> 00:07:54,400
i've tried to illustrate it here

00:07:50,639 --> 00:07:55,840
but let's unpack this image here in a in

00:07:54,400 --> 00:07:57,919
a logical manner so

00:07:55,840 --> 00:07:59,120
let's start at the at the bottom most

00:07:57,919 --> 00:08:02,319
layer for example

00:07:59,120 --> 00:08:04,720
the host so sadly as we we

00:08:02,319 --> 00:08:06,240
we know our hosts are comprised of

00:08:04,720 --> 00:08:08,400
numerous

00:08:06,240 --> 00:08:09,759
application packages that are required

00:08:08,400 --> 00:08:13,039
to not only run

00:08:09,759 --> 00:08:14,639
different uh libraries software programs

00:08:13,039 --> 00:08:17,599
the orchestrator etc

00:08:14,639 --> 00:08:19,120
but a lot of these packages come with it

00:08:17,599 --> 00:08:20,080
a whole bunch of different host

00:08:19,120 --> 00:08:22,479
vulnerabilities

00:08:20,080 --> 00:08:23,440
once again which can be easily exploited

00:08:22,479 --> 00:08:27,759
by

00:08:23,440 --> 00:08:30,319
our bad actors and adversaries now

00:08:27,759 --> 00:08:31,840
not only do these uh the hosts come with

00:08:30,319 --> 00:08:34,159
a whole bunch of packages

00:08:31,840 --> 00:08:36,000
but typically speaking what we've also

00:08:34,159 --> 00:08:37,279
seen is the fact that these hosts come

00:08:36,000 --> 00:08:40,240
with a whole bunch of

00:08:37,279 --> 00:08:41,039
unnecessary os packages that are that

00:08:40,240 --> 00:08:44,080
continuously

00:08:41,039 --> 00:08:46,399
uh contribute to expanding the the

00:08:44,080 --> 00:08:47,120
the attack surface so we also need to

00:08:46,399 --> 00:08:48,560
understand

00:08:47,120 --> 00:08:50,320
what are these packages what are the

00:08:48,560 --> 00:08:51,680
vulnerabilities in these unnecessary os

00:08:50,320 --> 00:08:53,279
packages and how

00:08:51,680 --> 00:08:55,519
we'll talk about how we can go about

00:08:53,279 --> 00:08:56,560
addressing so that's the host those are

00:08:55,519 --> 00:08:58,399
the packages

00:08:56,560 --> 00:08:59,839
and then the next aspect is in the

00:08:58,399 --> 00:09:02,720
context of kubernetes

00:08:59,839 --> 00:09:04,000
it's this concept of the master worker

00:09:02,720 --> 00:09:06,399
node configurations

00:09:04,000 --> 00:09:08,160
so these are there are a whole slew of

00:09:06,399 --> 00:09:11,360
configurations which when not

00:09:08,160 --> 00:09:13,680
appropriately configured can actually

00:09:11,360 --> 00:09:14,959
expose your kubernetes cluster to a

00:09:13,680 --> 00:09:17,279
whole slew of attacks

00:09:14,959 --> 00:09:18,160
so we need to understand that particular

00:09:17,279 --> 00:09:20,640
threat vector

00:09:18,160 --> 00:09:21,279
once we have deployed your kubernetes

00:09:20,640 --> 00:09:23,519
system

00:09:21,279 --> 00:09:24,480
then the next level to actually address

00:09:23,519 --> 00:09:26,080
is the fact that

00:09:24,480 --> 00:09:28,320
you want to make sure that your

00:09:26,080 --> 00:09:30,720
kubernetes api for example

00:09:28,320 --> 00:09:32,160
is appropriately secure so we'll talk a

00:09:30,720 --> 00:09:33,920
little bit more about that

00:09:32,160 --> 00:09:35,600
and then when you talk about making sure

00:09:33,920 --> 00:09:38,320
that your api is secured

00:09:35,600 --> 00:09:39,600
you also want to make sure that you have

00:09:38,320 --> 00:09:41,839
this concept of

00:09:39,600 --> 00:09:42,640
you don't expose your entire cluster

00:09:41,839 --> 00:09:44,720
network

00:09:42,640 --> 00:09:45,920
to to the internet and to the outside

00:09:44,720 --> 00:09:48,160
world to be exposed

00:09:45,920 --> 00:09:50,160
so we also have to make sure that your

00:09:48,160 --> 00:09:52,399
network is not overexposed

00:09:50,160 --> 00:09:54,160
the next aspect of all of these is the

00:09:52,399 --> 00:09:55,120
fact that now you're actually moving

00:09:54,160 --> 00:09:57,680
into the realm

00:09:55,120 --> 00:09:59,440
of your application containers so you

00:09:57,680 --> 00:10:01,519
need to make sure that it's

00:09:59,440 --> 00:10:03,360
because of the advent of open source as

00:10:01,519 --> 00:10:05,279
i mentioned and i want to put on my

00:10:03,360 --> 00:10:07,360
devops hat now as a developer

00:10:05,279 --> 00:10:09,600
you know i want to get my job done and i

00:10:07,360 --> 00:10:11,120
take the shiny new library

00:10:09,600 --> 00:10:13,279
and i don't want to reinvent the wheel

00:10:11,120 --> 00:10:15,760
so i import a new

00:10:13,279 --> 00:10:17,279
dependency and a library but i have no

00:10:15,760 --> 00:10:20,240
visibility honestly

00:10:17,279 --> 00:10:22,079
as a developer as to whether this uh by

00:10:20,240 --> 00:10:24,399
these binaries and these uh

00:10:22,079 --> 00:10:26,079
dependencies contain any kind of malware

00:10:24,399 --> 00:10:28,240
so we need to understand whether

00:10:26,079 --> 00:10:29,120
whether there's malware present in these

00:10:28,240 --> 00:10:31,600
images

00:10:29,120 --> 00:10:33,120
and similarly we also have to understand

00:10:31,600 --> 00:10:35,200
what are the vulnerabilities

00:10:33,120 --> 00:10:37,200
that exist in a lot of these uh

00:10:35,200 --> 00:10:39,519
application dependencies

00:10:37,200 --> 00:10:40,720
the next aspect is once we have now

00:10:39,519 --> 00:10:42,720
built the container

00:10:40,720 --> 00:10:43,760
you know we also want to make sure that

00:10:42,720 --> 00:10:46,000
we uh

00:10:43,760 --> 00:10:47,839
correctly represent how we want these

00:10:46,000 --> 00:10:50,399
containers to be deployed on your

00:10:47,839 --> 00:10:51,760
uh kubernetes orchestrator so that comes

00:10:50,399 --> 00:10:53,200
in the form of the kubernetes

00:10:51,760 --> 00:10:55,519
application manifest

00:10:53,200 --> 00:10:57,839
and the manifest now as you can imagine

00:10:55,519 --> 00:11:01,279
is a very very powerful concept

00:10:57,839 --> 00:11:03,519
so there is the ability for you

00:11:01,279 --> 00:11:04,399
for us to make a lot of mistakes for

00:11:03,519 --> 00:11:07,200
example

00:11:04,399 --> 00:11:08,880
the security context you know we also

00:11:07,200 --> 00:11:11,440
very often we've seen

00:11:08,880 --> 00:11:13,120
that containers are run as a root user

00:11:11,440 --> 00:11:16,160
and so what that means is in the

00:11:13,120 --> 00:11:18,640
combination of the malware threat vector

00:11:16,160 --> 00:11:20,079
some malicious code could actually do a

00:11:18,640 --> 00:11:22,560
container exploit

00:11:20,079 --> 00:11:24,240
with and with the root privileges could

00:11:22,560 --> 00:11:26,000
actually do a container escape and

00:11:24,240 --> 00:11:28,000
actually exploit the entire cluster

00:11:26,000 --> 00:11:29,760
so you can see how these tech vectors

00:11:28,000 --> 00:11:32,480
combine to really pose

00:11:29,760 --> 00:11:33,360
a large number of problems to your uh

00:11:32,480 --> 00:11:36,399
deployments

00:11:33,360 --> 00:11:37,760
the second aspect is uh unfortunately

00:11:36,399 --> 00:11:40,240
more often than not

00:11:37,760 --> 00:11:42,160
as developers are moving very fast they

00:11:40,240 --> 00:11:42,640
need to test out try out different types

00:11:42,160 --> 00:11:44,399
of things

00:11:42,640 --> 00:11:46,320
and unfortunately we see a lot of

00:11:44,399 --> 00:11:47,120
secrets actually embedded into your

00:11:46,320 --> 00:11:49,440
containers

00:11:47,120 --> 00:11:51,440
or also your application manifests and

00:11:49,440 --> 00:11:53,600
as you can see that

00:11:51,440 --> 00:11:54,800
is also a major threat vector that's

00:11:53,600 --> 00:11:57,040
right for exploit

00:11:54,800 --> 00:11:59,120
so once that is done we are actually

00:11:57,040 --> 00:12:00,639
deploying let's say that we have to

00:11:59,120 --> 00:12:02,560
index all of these different track

00:12:00,639 --> 00:12:05,600
vectors and finally

00:12:02,560 --> 00:12:07,600
a very significant aspect of

00:12:05,600 --> 00:12:10,079
uh cloud native deployment is the

00:12:07,600 --> 00:12:12,639
deployment uh decomposing monolithic

00:12:10,079 --> 00:12:14,399
applications and deploying them as

00:12:12,639 --> 00:12:16,959
composite micro services

00:12:14,399 --> 00:12:18,880
so the perimeter if you will for cloud

00:12:16,959 --> 00:12:21,120
native deployments is no longer your

00:12:18,880 --> 00:12:22,959
edge firewall if you will it's actually

00:12:21,120 --> 00:12:23,440
every single workload or every single

00:12:22,959 --> 00:12:25,680
micro

00:12:23,440 --> 00:12:27,360
uh micro service therefore we want to

00:12:25,680 --> 00:12:29,200
make sure that we can actually even if

00:12:27,360 --> 00:12:31,519
there is an exploit you want to reduce

00:12:29,200 --> 00:12:32,560
the blood surface of that exploit and

00:12:31,519 --> 00:12:34,560
ensure that you have

00:12:32,560 --> 00:12:36,079
the right kind of segmentation from a

00:12:34,560 --> 00:12:38,720
zero trust perspective

00:12:36,079 --> 00:12:40,079
so all of these aspects as you can see

00:12:38,720 --> 00:12:43,200
and a whole lot more

00:12:40,079 --> 00:12:45,440
comprise uh the components as well and

00:12:43,200 --> 00:12:49,279
consequently the threat landscape

00:12:45,440 --> 00:12:52,959
for uh cloud native applications

00:12:49,279 --> 00:12:54,079
so let's now take these dimensions and

00:12:52,959 --> 00:12:56,160
the threat landscape

00:12:54,079 --> 00:12:58,560
and put it in the context of how weak

00:12:56,160 --> 00:12:59,279
how these threats actually manifest

00:12:58,560 --> 00:13:02,800
themselves

00:12:59,279 --> 00:13:04,560
so you know a very very common paradigm

00:13:02,800 --> 00:13:06,160
that is starting to be adopted now is

00:13:04,560 --> 00:13:08,320
the concept of shift left

00:13:06,160 --> 00:13:09,360
and what shift left means is the ability

00:13:08,320 --> 00:13:12,880
to actually

00:13:09,360 --> 00:13:14,560
not bolt security on the runtime

00:13:12,880 --> 00:13:16,079
but make sure that security is

00:13:14,560 --> 00:13:18,160
incorporated throughout

00:13:16,079 --> 00:13:20,480
the application life cycle and process

00:13:18,160 --> 00:13:23,839
so in that uh um

00:13:20,480 --> 00:13:25,519
with that uh vein let's actually

00:13:23,839 --> 00:13:27,200
move left and start from the

00:13:25,519 --> 00:13:30,079
infrastructure score where

00:13:27,200 --> 00:13:31,760
more often more often than not devops

00:13:30,079 --> 00:13:33,519
teams are actually representing

00:13:31,760 --> 00:13:34,800
all aspects of their infrastructure as

00:13:33,519 --> 00:13:36,639
code to leverage

00:13:34,800 --> 00:13:38,959
automation capabilities and really

00:13:36,639 --> 00:13:41,279
really gain the benefit of

00:13:38,959 --> 00:13:42,800
agility of deployment and reacting to

00:13:41,279 --> 00:13:45,199
different types of changes

00:13:42,800 --> 00:13:46,480
but we've noticed that in the

00:13:45,199 --> 00:13:47,880
infrastructures code

00:13:46,480 --> 00:13:50,320
there are a whole bunch of

00:13:47,880 --> 00:13:52,240
misconfigurations in in terraform

00:13:50,320 --> 00:13:54,800
cloud formation templates and arm

00:13:52,240 --> 00:13:55,440
templates and these misconfigurations uh

00:13:54,800 --> 00:13:58,399
to give you

00:13:55,440 --> 00:13:59,600
a simple example if you use terraform to

00:13:58,399 --> 00:14:01,360
actually deploy

00:13:59,600 --> 00:14:02,560
multiple clusters in all the three

00:14:01,360 --> 00:14:04,079
different clouds if you will let's say

00:14:02,560 --> 00:14:06,560
aws gcp

00:14:04,079 --> 00:14:08,079
and azure but when in into your

00:14:06,560 --> 00:14:09,040
container cluster you're actually

00:14:08,079 --> 00:14:12,160
exposing

00:14:09,040 --> 00:14:14,880
uh your access from the entire world on

00:14:12,160 --> 00:14:16,320
all ports or port 222 is fully exposed

00:14:14,880 --> 00:14:17,920
and we know what the

00:14:16,320 --> 00:14:19,760
what the threat vectors there are and

00:14:17,920 --> 00:14:21,199
it's very easy for adversaries to

00:14:19,760 --> 00:14:23,600
exploit those threat vectors

00:14:21,199 --> 00:14:25,279
so similarly databases let's say you're

00:14:23,600 --> 00:14:26,720
configuring an s3 bucket

00:14:25,279 --> 00:14:28,880
but if you have you have to make sure

00:14:26,720 --> 00:14:31,839
that those s3 buckets are properly

00:14:28,880 --> 00:14:34,000
uh encrypted versioned the right level

00:14:31,839 --> 00:14:34,720
of accounts associated with it i am

00:14:34,000 --> 00:14:37,040
permissions

00:14:34,720 --> 00:14:39,120
but the point here is that as we

00:14:37,040 --> 00:14:42,560
leverage infrastructure as code

00:14:39,120 --> 00:14:44,240
this is also right for misconfigurations

00:14:42,560 --> 00:14:46,720
that could render your infrastructure

00:14:44,240 --> 00:14:49,120
highly vulnerable and secondly the

00:14:46,720 --> 00:14:51,760
second aspect of infrastructure as code

00:14:49,120 --> 00:14:53,199
is security violations and kubernetes

00:14:51,760 --> 00:14:55,519
application manifest

00:14:53,199 --> 00:14:57,360
i've also highlighted some given you and

00:14:55,519 --> 00:14:59,199
it's a few examples already

00:14:57,360 --> 00:15:01,519
but let me just give you a few other

00:14:59,199 --> 00:15:02,480
examples where excessive privileges and

00:15:01,519 --> 00:15:04,880
containers

00:15:02,480 --> 00:15:06,320
in the security context are very easily

00:15:04,880 --> 00:15:10,000
exploitable

00:15:06,320 --> 00:15:10,959
shared namespaces between the host and

00:15:10,000 --> 00:15:14,240
the container

00:15:10,959 --> 00:15:16,399
uh shared file systems etc and these are

00:15:14,240 --> 00:15:17,760
all specified as part of the kubernetes

00:15:16,399 --> 00:15:19,440
application manifest

00:15:17,760 --> 00:15:21,519
and if these are not appropriately

00:15:19,440 --> 00:15:23,680
addressed and fixed they

00:15:21,519 --> 00:15:25,279
they represent attack vectors in your

00:15:23,680 --> 00:15:26,320
runtime when you actually deploy your

00:15:25,279 --> 00:15:28,240
applications

00:15:26,320 --> 00:15:29,600
so let's move on to the container image

00:15:28,240 --> 00:15:32,320
now

00:15:29,600 --> 00:15:34,320
as we talked about it the abundance of

00:15:32,320 --> 00:15:38,000
open source

00:15:34,320 --> 00:15:40,639
software that devops teams leverage is

00:15:38,000 --> 00:15:41,759
is is rightfully growing at a very very

00:15:40,639 --> 00:15:44,720
dramatic pace

00:15:41,759 --> 00:15:45,440
however you know the devops teams don't

00:15:44,720 --> 00:15:47,519
have

00:15:45,440 --> 00:15:49,199
visibility into the vulnerabilities into

00:15:47,519 --> 00:15:52,560
these base container images

00:15:49,199 --> 00:15:54,959
i myself uh performed uh scanning of a

00:15:52,560 --> 00:15:57,040
lot of these images and was very alarmed

00:15:54,959 --> 00:15:59,279
that a lot of the most popular base

00:15:57,040 --> 00:16:02,079
images that contained a lot of these

00:15:59,279 --> 00:16:04,000
base packages have very very critical

00:16:02,079 --> 00:16:06,639
and high security vulnerabilities

00:16:04,000 --> 00:16:08,720
that are ripe for exploit so we need to

00:16:06,639 --> 00:16:11,040
be aware of these vulnerabilities in the

00:16:08,720 --> 00:16:14,079
container images

00:16:11,040 --> 00:16:15,519
as well as in the vulnerabilities in the

00:16:14,079 --> 00:16:17,519
application dependencies

00:16:15,519 --> 00:16:19,120
so not only the base images but also on

00:16:17,519 --> 00:16:20,639
the dependencies that are pulled in to

00:16:19,120 --> 00:16:23,839
build on top of the base image

00:16:20,639 --> 00:16:25,920
and you also want to make make sure that

00:16:23,839 --> 00:16:27,600
we are aware of any malware that is

00:16:25,920 --> 00:16:29,199
obviously present in the base image to

00:16:27,600 --> 00:16:30,000
ensure that those are appropriately

00:16:29,199 --> 00:16:32,160
interest

00:16:30,000 --> 00:16:34,639
so once the container images have been

00:16:32,160 --> 00:16:35,440
built the next stage in that process is

00:16:34,639 --> 00:16:38,079
actually

00:16:35,440 --> 00:16:39,279
uh hosting this container image in in a

00:16:38,079 --> 00:16:41,600
container registry

00:16:39,279 --> 00:16:43,279
and when and your application manifest

00:16:41,600 --> 00:16:45,519
will actually reference that image

00:16:43,279 --> 00:16:47,199
to actually deploy these containers in

00:16:45,519 --> 00:16:49,839
your application runtime

00:16:47,199 --> 00:16:51,759
so from a container registry perspective

00:16:49,839 --> 00:16:54,959
you know we want to make sure that

00:16:51,759 --> 00:16:56,639
uh there are no uh unsanctioned images

00:16:54,959 --> 00:16:58,480
that are actually referenced in your

00:16:56,639 --> 00:17:00,320
kubernetes application manifest or

00:16:58,480 --> 00:17:02,480
deployed in your runtime

00:17:00,320 --> 00:17:03,440
we want to make sure that these images

00:17:02,480 --> 00:17:05,919
have

00:17:03,440 --> 00:17:07,120
use of these images have been scanned

00:17:05,919 --> 00:17:08,959
very often

00:17:07,120 --> 00:17:10,160
these images are not scanned therefore

00:17:08,959 --> 00:17:12,640
these vulnerabilities

00:17:10,160 --> 00:17:14,000
precipitate throughout your life cycle

00:17:12,640 --> 00:17:15,600
into your run times

00:17:14,000 --> 00:17:17,039
and you also want to make sure that

00:17:15,600 --> 00:17:19,520
you're actually

00:17:17,039 --> 00:17:20,319
leveraging images that are appropriately

00:17:19,520 --> 00:17:24,640
signed

00:17:20,319 --> 00:17:27,120
to verify uh authenticity as well as

00:17:24,640 --> 00:17:28,160
the integrity of these images now when

00:17:27,120 --> 00:17:30,080
we take these images

00:17:28,160 --> 00:17:31,760
now we move into we're starting to move

00:17:30,080 --> 00:17:33,360
into the runtime let's talk about the

00:17:31,760 --> 00:17:35,760
kubernetes orchestrator

00:17:33,360 --> 00:17:36,720
uh we talked about the fact that you

00:17:35,760 --> 00:17:39,120
know uh

00:17:36,720 --> 00:17:41,120
very often uh the kubernetes

00:17:39,120 --> 00:17:44,559
orchestrator is misconfigured

00:17:41,120 --> 00:17:46,480
uh in terms of its api the api uh uh

00:17:44,559 --> 00:17:47,919
the kubernetes api is very often

00:17:46,480 --> 00:17:50,960
completely exposed

00:17:47,919 --> 00:17:51,440
and you might uh um not think that this

00:17:50,960 --> 00:17:53,280
is a

00:17:51,440 --> 00:17:54,880
common but this is more common

00:17:53,280 --> 00:17:57,440
unfortunately and it's been

00:17:54,880 --> 00:17:58,640
already exploited at some very very uh

00:17:57,440 --> 00:18:01,440
widely publicized

00:17:58,640 --> 00:18:03,840
exploits and secondly not only are these

00:18:01,440 --> 00:18:06,240
apis fully exposed to the internet

00:18:03,840 --> 00:18:08,080
they also don't have the right level of

00:18:06,240 --> 00:18:11,280
authentication and they lack

00:18:08,080 --> 00:18:12,640
lack tls based authentication and

00:18:11,280 --> 00:18:15,280
therefore results in

00:18:12,640 --> 00:18:17,280
unauthenticated access another threat

00:18:15,280 --> 00:18:18,400
vector from a kubernetes orchestrator

00:18:17,280 --> 00:18:22,000
perspective is

00:18:18,400 --> 00:18:25,039
uh exposed and insecure hcd access and

00:18:22,000 --> 00:18:27,039
so xcd is the key value store that

00:18:25,039 --> 00:18:28,160
stores all the configuration for your

00:18:27,039 --> 00:18:31,520
entire cluster

00:18:28,160 --> 00:18:34,080
so it's very important to ensure that

00:18:31,520 --> 00:18:35,600
that is appropriately secured if not it

00:18:34,080 --> 00:18:38,240
could have dramatic uh

00:18:35,600 --> 00:18:39,520
and radical consequences for your uh

00:18:38,240 --> 00:18:41,440
container runtimes

00:18:39,520 --> 00:18:43,120
and i also talked about the fact that

00:18:41,440 --> 00:18:45,440
you also want to make sure that you have

00:18:43,120 --> 00:18:47,919
the right level of isolation

00:18:45,440 --> 00:18:50,000
where you have you prevent the sharing

00:18:47,919 --> 00:18:50,640
of host name space and the volume parts

00:18:50,000 --> 00:18:53,200
etcetera

00:18:50,640 --> 00:18:54,880
so these are all another these are all

00:18:53,200 --> 00:18:57,280
examples of attack vectors

00:18:54,880 --> 00:18:58,799
that precipitate in the context of the

00:18:57,280 --> 00:19:02,240
kubernetes orchestrator

00:18:58,799 --> 00:19:04,320
now finally from a runtime perspective

00:19:02,240 --> 00:19:05,280
we talked a little bit about it already

00:19:04,320 --> 00:19:08,000
where there is

00:19:05,280 --> 00:19:09,120
a lack of isolation so that's a threat

00:19:08,000 --> 00:19:11,520
vector

00:19:09,120 --> 00:19:13,200
or when uh containers are deployed

00:19:11,520 --> 00:19:13,840
without the right resource limits so

00:19:13,200 --> 00:19:16,000
they can

00:19:13,840 --> 00:19:18,400
actually exhaust a lot of the the cpu

00:19:16,000 --> 00:19:21,840
and memory and potentially render your

00:19:18,400 --> 00:19:22,880
your system uh unusable uh or when you

00:19:21,840 --> 00:19:26,160
have uh the

00:19:22,880 --> 00:19:29,039
the no runtime process file or network

00:19:26,160 --> 00:19:30,240
prevention so what that means is you

00:19:29,039 --> 00:19:32,880
have unsanctioned

00:19:30,240 --> 00:19:33,280
uh processes or malware that can

00:19:32,880 --> 00:19:35,679
actually

00:19:33,280 --> 00:19:36,400
execute in your runtime actually corrupt

00:19:35,679 --> 00:19:38,799
your file

00:19:36,400 --> 00:19:39,520
systems and actually contact command and

00:19:38,799 --> 00:19:42,720
control

00:19:39,520 --> 00:19:43,440
and um malicious network domains to

00:19:42,720 --> 00:19:45,840
actually

00:19:43,440 --> 00:19:46,799
uh perform a reconnaissance lateral

00:19:45,840 --> 00:19:50,000
movements and

00:19:46,799 --> 00:19:52,880
own your your runtime environments and

00:19:50,000 --> 00:19:54,240
so uh part of that network access is the

00:19:52,880 --> 00:19:56,160
to make sure that

00:19:54,240 --> 00:19:57,760
uh if there is a lack of ingress and

00:19:56,160 --> 00:19:59,840
egress network protection

00:19:57,760 --> 00:20:01,039
then your container your environments

00:19:59,840 --> 00:20:03,440
are completely open

00:20:01,039 --> 00:20:06,799
to adversaries to perform various types

00:20:03,440 --> 00:20:10,320
of exploits

00:20:06,799 --> 00:20:12,559
so what we've now talked about

00:20:10,320 --> 00:20:14,480
all the different you know the concepts

00:20:12,559 --> 00:20:18,000
of what cloud native

00:20:14,480 --> 00:20:20,720
involves the concept of highly scalable

00:20:18,000 --> 00:20:21,760
ephemeral workloads and the aspect of

00:20:20,720 --> 00:20:23,760
layers and the

00:20:21,760 --> 00:20:26,000
impact of all the different thread

00:20:23,760 --> 00:20:28,480
vectors and the way these threads

00:20:26,000 --> 00:20:29,039
actually precipitate in your environment

00:20:28,480 --> 00:20:31,760
so

00:20:29,039 --> 00:20:33,360
what can we do to actually solve this so

00:20:31,760 --> 00:20:37,039
i'd like to now present

00:20:33,360 --> 00:20:38,000
a visualization of the concept of cloud

00:20:37,039 --> 00:20:40,080
native layers

00:20:38,000 --> 00:20:42,559
and i'd like to also want to talk about

00:20:40,080 --> 00:20:44,880
how this particular diagram came about

00:20:42,559 --> 00:20:47,039
uh i've been very fortunate to work as

00:20:44,880 --> 00:20:48,480
part of the six security working group

00:20:47,039 --> 00:20:51,600
at the cncf

00:20:48,480 --> 00:20:55,360
and they had an initiative where we

00:20:51,600 --> 00:20:58,240
as a group we worked on uh a guide

00:20:55,360 --> 00:21:00,080
to to provide comprehensive security and

00:20:58,240 --> 00:21:00,960
it was called the cloud native security

00:21:00,080 --> 00:21:04,000
white paper

00:21:00,960 --> 00:21:04,880
and in that white paper you know uh very

00:21:04,000 --> 00:21:08,720
appropriately

00:21:04,880 --> 00:21:10,880
we divided up the entire uh cloud native

00:21:08,720 --> 00:21:11,840
landscape into multiple dimensions as i

00:21:10,880 --> 00:21:14,720
like to call it

00:21:11,840 --> 00:21:15,360
one is the is the cloud native life

00:21:14,720 --> 00:21:17,120
cycle

00:21:15,360 --> 00:21:19,360
and the second dimension is the

00:21:17,120 --> 00:21:21,520
environment the cloud native life cycle

00:21:19,360 --> 00:21:24,320
as we as we've all very

00:21:21,520 --> 00:21:25,280
uh come to recognize is built upon the

00:21:24,320 --> 00:21:27,679
aspects of

00:21:25,280 --> 00:21:29,440
you know the the devops workflows where

00:21:27,679 --> 00:21:32,480
the developers are developing

00:21:29,440 --> 00:21:33,919
infrastructure as code application code

00:21:32,480 --> 00:21:36,400
and templates etc

00:21:33,919 --> 00:21:38,640
to actually deploy their applications so

00:21:36,400 --> 00:21:39,039
now all of these artifacts now move into

00:21:38,640 --> 00:21:41,200
the

00:21:39,039 --> 00:21:42,960
distribute phase where there are a whole

00:21:41,200 --> 00:21:44,159
sequence of activities that happen in

00:21:42,960 --> 00:21:45,679
the distribute phase

00:21:44,159 --> 00:21:48,400
where the containers are deployed

00:21:45,679 --> 00:21:51,440
they're distributed to the application

00:21:48,400 --> 00:21:52,640
registries and then finally it comes to

00:21:51,440 --> 00:21:55,120
the deploy phase

00:21:52,640 --> 00:21:56,559
where there's a still further set of

00:21:55,120 --> 00:21:58,320
activities that are performed

00:21:56,559 --> 00:22:00,159
before these applications and

00:21:58,320 --> 00:22:01,039
microservices are actually deployed into

00:22:00,159 --> 00:22:02,960
the runtime

00:22:01,039 --> 00:22:04,159
now in the runtime environment is

00:22:02,960 --> 00:22:07,360
composed of

00:22:04,159 --> 00:22:08,400
uh the the main aspects are of course

00:22:07,360 --> 00:22:11,280
compute

00:22:08,400 --> 00:22:12,320
storage as well as the appropriate

00:22:11,280 --> 00:22:14,240
levels of access

00:22:12,320 --> 00:22:16,240
so we have been able to depa you know

00:22:14,240 --> 00:22:16,960
divide up this entire cloud native

00:22:16,240 --> 00:22:18,880
landscape

00:22:16,960 --> 00:22:20,559
into these two dimensions comprising the

00:22:18,880 --> 00:22:23,039
life cycle and the environment

00:22:20,559 --> 00:22:24,080
and within that the various layers so

00:22:23,039 --> 00:22:27,120
what i'm going to do

00:22:24,080 --> 00:22:30,559
now is to walk you through how

00:22:27,120 --> 00:22:33,120
we can bring together security

00:22:30,559 --> 00:22:33,919
to actually secure our cloud-native

00:22:33,120 --> 00:22:35,840
workloads

00:22:33,919 --> 00:22:37,200
address all of the threat vectors that

00:22:35,840 --> 00:22:39,280
we have talked i've talked about

00:22:37,200 --> 00:22:42,159
just now and then apply it in the

00:22:39,280 --> 00:22:45,520
constant context of this cloud-native

00:22:42,159 --> 00:22:48,159
uh life cycle as well as the environment

00:22:45,520 --> 00:22:49,039
so as we talked about it the four big

00:22:48,159 --> 00:22:52,320
pillars

00:22:49,039 --> 00:22:54,799
of this cloud native uh uh

00:22:52,320 --> 00:22:55,520
application life cycle are the develop

00:22:54,799 --> 00:22:57,760
distribute

00:22:55,520 --> 00:22:59,840
deploy as well as the runtime and what

00:22:57,760 --> 00:23:02,080
traditionally has happened is where

00:22:59,840 --> 00:23:03,280
you know application and devops teams

00:23:02,080 --> 00:23:05,120
are deploying

00:23:03,280 --> 00:23:07,440
software at a very very rapid rate in

00:23:05,120 --> 00:23:09,440
the runtime and security teams have to

00:23:07,440 --> 00:23:10,640
bring into bring to bed the appropriate

00:23:09,440 --> 00:23:12,640
security oversight

00:23:10,640 --> 00:23:14,080
but now i talked about it we want to

00:23:12,640 --> 00:23:16,720
shift left where we

00:23:14,080 --> 00:23:18,240
integrate security very natively

00:23:16,720 --> 00:23:20,880
throughout the application

00:23:18,240 --> 00:23:22,480
lifecycle into the develop phase into

00:23:20,880 --> 00:23:22,960
the distribute phase into the deploy

00:23:22,480 --> 00:23:25,039
phase

00:23:22,960 --> 00:23:26,720
and finally uh definitely into the

00:23:25,039 --> 00:23:27,120
runtime phase so we're going to talk

00:23:26,720 --> 00:23:29,280
about

00:23:27,120 --> 00:23:30,880
each of these different layers and the

00:23:29,280 --> 00:23:34,480
implications of security

00:23:30,880 --> 00:23:36,000
across all of them so what is security

00:23:34,480 --> 00:23:38,159
in the develop phase looks like

00:23:36,000 --> 00:23:39,760
i mean this is literally the first phase

00:23:38,159 --> 00:23:40,960
where devops teams are building out

00:23:39,760 --> 00:23:43,120
these artifacts

00:23:40,960 --> 00:23:45,360
and they're representing all our aspects

00:23:43,120 --> 00:23:47,840
of their applications which

00:23:45,360 --> 00:23:49,200
we've done for decades but now also

00:23:47,840 --> 00:23:50,960
representing all

00:23:49,200 --> 00:23:52,480
artifacts and aspects of their

00:23:50,960 --> 00:23:54,880
infrastructure as code

00:23:52,480 --> 00:23:56,799
so this is where in the developer ide

00:23:54,880 --> 00:23:57,919
developers and devops teams are building

00:23:56,799 --> 00:24:00,320
infrastructure score

00:23:57,919 --> 00:24:02,000
docker files kubernetes application

00:24:00,320 --> 00:24:03,919
manifests and custom codes

00:24:02,000 --> 00:24:06,159
so what needs to happen is we need to

00:24:03,919 --> 00:24:07,679
bring security and early visibility

00:24:06,159 --> 00:24:09,360
we talked about a lot of the threat

00:24:07,679 --> 00:24:10,720
vectors now and that's why i mentioned

00:24:09,360 --> 00:24:13,200
that beforehand

00:24:10,720 --> 00:24:14,480
but all these misconfigurations in

00:24:13,200 --> 00:24:15,840
infrastructure escort

00:24:14,480 --> 00:24:18,000
all these vulnerabilities that

00:24:15,840 --> 00:24:19,679
potentially exist in

00:24:18,000 --> 00:24:21,120
in docker files and in application

00:24:19,679 --> 00:24:22,400
dependencies all the security

00:24:21,120 --> 00:24:24,880
misconfigurations

00:24:22,400 --> 00:24:25,679
in kubernetes application manifest we

00:24:24,880 --> 00:24:28,080
need to provide

00:24:25,679 --> 00:24:29,600
early and instantaneous and cons and

00:24:28,080 --> 00:24:31,840
contextual feedback

00:24:29,600 --> 00:24:32,960
to the devops teams in the developed

00:24:31,840 --> 00:24:35,679
phase where they have

00:24:32,960 --> 00:24:36,720
a far greater appetite to actually fix a

00:24:35,679 --> 00:24:38,080
lot of these issues

00:24:36,720 --> 00:24:39,760
before it progresses through the

00:24:38,080 --> 00:24:43,039
pipeline so

00:24:39,760 --> 00:24:43,919
uh one of the most powerful and uh tasks

00:24:43,039 --> 00:24:47,200
that devops

00:24:43,919 --> 00:24:48,960
teams does is they make a a pull request

00:24:47,200 --> 00:24:50,480
and so what can happen now in the

00:24:48,960 --> 00:24:53,200
context of security is

00:24:50,480 --> 00:24:53,919
in the pre-commit hook you can actually

00:24:53,200 --> 00:24:56,080
trigger the

00:24:53,919 --> 00:24:58,000
static analysis of all your code you can

00:24:56,080 --> 00:24:59,120
perform the vulnerability scans for all

00:24:58,000 --> 00:25:01,200
the dependencies

00:24:59,120 --> 00:25:03,360
you can scan your infrastructure as code

00:25:01,200 --> 00:25:05,760
templates your kubernetes application

00:25:03,360 --> 00:25:07,679
manifests and actually report back and

00:25:05,760 --> 00:25:10,000
if there's any failures that

00:25:07,679 --> 00:25:11,760
that fail based on the compliance

00:25:10,000 --> 00:25:12,880
policies that have been established by

00:25:11,760 --> 00:25:15,039
your security teams

00:25:12,880 --> 00:25:16,480
but you provide instantaneous and early

00:25:15,039 --> 00:25:18,720
feedback to the developers

00:25:16,480 --> 00:25:19,760
and only when all of these different

00:25:18,720 --> 00:25:23,279
scans

00:25:19,760 --> 00:25:25,520
and compliance checks etc

00:25:23,279 --> 00:25:26,960
have been passed do you actually commit

00:25:25,520 --> 00:25:29,200
the code to your

00:25:26,960 --> 00:25:30,640
uh source code management system and

00:25:29,200 --> 00:25:32,880
proceed to the next phase

00:25:30,640 --> 00:25:34,720
but a very important aspect of this is

00:25:32,880 --> 00:25:36,480
now security is treated

00:25:34,720 --> 00:25:37,840
starting to be treated as a first-class

00:25:36,480 --> 00:25:39,760
citizen and

00:25:37,840 --> 00:25:41,360
you know you have early visibility into

00:25:39,760 --> 00:25:44,240
security violations which can be

00:25:41,360 --> 00:25:46,400
appropriately addressed

00:25:44,240 --> 00:25:47,600
similarly in the next phase which is the

00:25:46,400 --> 00:25:49,919
distribute phase

00:25:47,600 --> 00:25:50,720
where you're not actually using a lot of

00:25:49,919 --> 00:25:52,640
the uh

00:25:50,720 --> 00:25:54,480
representations of infrastructure as

00:25:52,640 --> 00:25:55,360
code and your artifacts such as the

00:25:54,480 --> 00:25:57,279
docker files

00:25:55,360 --> 00:25:58,559
to build your container images or your

00:25:57,279 --> 00:26:01,039
virtual machine images

00:25:58,559 --> 00:26:03,039
or or your serverless images and as they

00:26:01,039 --> 00:26:05,840
move through the pipeline into your

00:26:03,039 --> 00:26:08,080
different types of registries you also

00:26:05,840 --> 00:26:11,440
just like you're actually doing your

00:26:08,080 --> 00:26:14,159
your your sas testing dash testing

00:26:11,440 --> 00:26:16,320
we also want to make sure that now

00:26:14,159 --> 00:26:18,559
you're performing your security testing

00:26:16,320 --> 00:26:20,400
and the security testing can involve

00:26:18,559 --> 00:26:23,840
scanning all the container images for

00:26:20,400 --> 00:26:25,840
all the vulnerabilities that are present

00:26:23,840 --> 00:26:27,760
malware that are present in the images

00:26:25,840 --> 00:26:30,159
performing all the infrastructure and

00:26:27,760 --> 00:26:31,080
as code security and compliance scans to

00:26:30,159 --> 00:26:33,279
identify

00:26:31,080 --> 00:26:34,440
misconfigurations and then making sure

00:26:33,279 --> 00:26:35,679
that you are have the right

00:26:34,440 --> 00:26:37,600
configurations

00:26:35,679 --> 00:26:38,960
and the settings set in your kubernetes

00:26:37,600 --> 00:26:41,039
application manifest

00:26:38,960 --> 00:26:43,200
and once again this you can think about

00:26:41,039 --> 00:26:43,919
this in the context of a modern ci cd

00:26:43,200 --> 00:26:45,679
pipeline

00:26:43,919 --> 00:26:47,919
and if there are any failures that are

00:26:45,679 --> 00:26:50,000
detected the entire build phase

00:26:47,919 --> 00:26:51,679
you go back to the drawing board devops

00:26:50,000 --> 00:26:54,559
teams now have the ability

00:26:51,679 --> 00:26:55,520
to know what the failures are how to fix

00:26:54,559 --> 00:26:58,640
them and arable

00:26:55,520 --> 00:26:59,039
and are able to uh bring together the

00:26:58,640 --> 00:27:01,679
right

00:26:59,039 --> 00:27:02,480
fix similar to any other bug bug fix

00:27:01,679 --> 00:27:04,720
that they would do

00:27:02,480 --> 00:27:06,880
in the context of an application and

00:27:04,720 --> 00:27:08,720
then it moves to the next phase which is

00:27:06,880 --> 00:27:09,360
the image integrity so you want to make

00:27:08,720 --> 00:27:11,440
sure

00:27:09,360 --> 00:27:13,679
that you sign all your images and if you

00:27:11,440 --> 00:27:15,279
want added level of confidentiality

00:27:13,679 --> 00:27:17,200
you can even make sure that all the

00:27:15,279 --> 00:27:18,720
images are encrypted you want to make

00:27:17,200 --> 00:27:19,679
sure that you check the integrity of

00:27:18,720 --> 00:27:23,039
these images

00:27:19,679 --> 00:27:23,679
once all of these different steps have

00:27:23,039 --> 00:27:25,919
been

00:27:23,679 --> 00:27:27,760
successfully completed now we can move

00:27:25,919 --> 00:27:29,520
to the next phase which is the deploy

00:27:27,760 --> 00:27:31,679
step

00:27:29,520 --> 00:27:33,760
in the deploy phase as i like to call it

00:27:31,679 --> 00:27:35,840
this is where you get the opportunity to

00:27:33,760 --> 00:27:37,360
do a whole bunch of pre-flight checks

00:27:35,840 --> 00:27:40,000
as we talked about it we have signed

00:27:37,360 --> 00:27:42,240
these images we have uh so you want to

00:27:40,000 --> 00:27:44,000
validate these images and the signature

00:27:42,240 --> 00:27:46,799
both for from an authentication

00:27:44,000 --> 00:27:49,679
perspective as well as from an integrity

00:27:46,799 --> 00:27:50,159
uh from uh from from modifications and

00:27:49,679 --> 00:27:52,480
uh

00:27:50,159 --> 00:27:54,000
ensure that those are detected you wanna

00:27:52,480 --> 00:27:55,840
apply all your image

00:27:54,000 --> 00:27:57,679
runtime policies to make sure that you

00:27:55,840 --> 00:28:01,279
have the appropriate policies

00:27:57,679 --> 00:28:02,000
to uh to enforce your enterprise

00:28:01,279 --> 00:28:04,480
policies for

00:28:02,000 --> 00:28:06,320
example and you also want to apply your

00:28:04,480 --> 00:28:08,640
runtime container policies

00:28:06,320 --> 00:28:10,000
both your image policies to make sure

00:28:08,640 --> 00:28:13,120
that only for example

00:28:10,000 --> 00:28:16,480
signed images only images from uh

00:28:13,120 --> 00:28:19,039
uh you know registered artifacts uh

00:28:16,480 --> 00:28:20,799
or repos are allowed and from a contact

00:28:19,039 --> 00:28:23,039
container run time we talked about

00:28:20,799 --> 00:28:25,200
you know ensuring that uh improper use

00:28:23,039 --> 00:28:26,320
of uh security context flags are not

00:28:25,200 --> 00:28:29,279
allowed etc

00:28:26,320 --> 00:28:30,880
so in the application runtime now we

00:28:29,279 --> 00:28:33,360
want you want to make sure that you're

00:28:30,880 --> 00:28:36,240
constantly evaluating your deployment

00:28:33,360 --> 00:28:38,000
based on nist and cis standards that

00:28:36,240 --> 00:28:40,000
calls for best practices

00:28:38,000 --> 00:28:41,520
assessments of your deployments you want

00:28:40,000 --> 00:28:45,039
to make sure that you

00:28:41,520 --> 00:28:48,080
extend all your security checks from uh

00:28:45,039 --> 00:28:50,000
for uh to the host level as well to

00:28:48,080 --> 00:28:51,679
uh bring about visibility into any

00:28:50,000 --> 00:28:53,760
vulnerabilities that are exist

00:28:51,679 --> 00:28:55,120
that exists in the host ensure that your

00:28:53,760 --> 00:28:57,600
compliance controls

00:28:55,120 --> 00:28:59,120
are also applied to the host as well as

00:28:57,600 --> 00:29:01,679
from a micro segmentation

00:28:59,120 --> 00:29:02,480
uh perspective and finally for the

00:29:01,679 --> 00:29:04,080
containers

00:29:02,480 --> 00:29:06,399
you want to make sure that you have the

00:29:04,080 --> 00:29:08,799
appropriate part security policies

00:29:06,399 --> 00:29:09,919
network policies to enforce the right

00:29:08,799 --> 00:29:12,640
level of

00:29:09,919 --> 00:29:13,520
micro segmentation and you also have

00:29:12,640 --> 00:29:16,480
frameworks

00:29:13,520 --> 00:29:17,360
that allow you to uh enforce file

00:29:16,480 --> 00:29:20,640
integrity

00:29:17,360 --> 00:29:22,640
or uh or uh malicious uh uh

00:29:20,640 --> 00:29:24,559
file modifications you want to be able

00:29:22,640 --> 00:29:26,640
to detect it and to be able to perform

00:29:24,559 --> 00:29:27,520
remediations in terms of isolation of a

00:29:26,640 --> 00:29:31,120
container

00:29:27,520 --> 00:29:34,240
only ensure that sanctioned

00:29:31,120 --> 00:29:35,919
processes and processes are allowed to

00:29:34,240 --> 00:29:38,480
execute inside a container

00:29:35,919 --> 00:29:40,320
and even more fine grain to make sure

00:29:38,480 --> 00:29:42,480
that you can even restrict

00:29:40,320 --> 00:29:43,840
the types of system calls that your

00:29:42,480 --> 00:29:46,080
container will execute

00:29:43,840 --> 00:29:48,240
so all of these checks can be

00:29:46,080 --> 00:29:49,520
facilitated and enforced in the deploy

00:29:48,240 --> 00:29:52,320
phase

00:29:49,520 --> 00:29:52,720
and then finally security in the runtime

00:29:52,320 --> 00:29:54,799
phase

00:29:52,720 --> 00:29:56,640
now you've actually deployed all your

00:29:54,799 --> 00:29:58,960
applications you have your in

00:29:56,640 --> 00:30:00,000
orchestrator running so let's talk about

00:29:58,960 --> 00:30:02,480
all the various

00:30:00,000 --> 00:30:03,120
aspects in the runtime phase where you

00:30:02,480 --> 00:30:04,720
have the

00:30:03,120 --> 00:30:06,399
the cloud environment where you have

00:30:04,720 --> 00:30:09,279
your cloud orchestrators

00:30:06,399 --> 00:30:09,840
you have your compute you have your uh

00:30:09,279 --> 00:30:11,840
access

00:30:09,840 --> 00:30:14,159
in terms of network access as well as

00:30:11,840 --> 00:30:16,720
the storage then the next layer

00:30:14,159 --> 00:30:18,159
you have the workload orchestration

00:30:16,720 --> 00:30:18,960
where you have the container

00:30:18,159 --> 00:30:21,279
orchestrator

00:30:18,960 --> 00:30:22,159
you have the control plane the container

00:30:21,279 --> 00:30:25,600
pod

00:30:22,159 --> 00:30:28,080
uh the access in terms of your cni

00:30:25,600 --> 00:30:29,360
ingress egress your data volumes so

00:30:28,080 --> 00:30:30,159
we've talked about a whole bunch of

00:30:29,360 --> 00:30:32,799
these but

00:30:30,159 --> 00:30:34,640
it's it's it's important to highlight

00:30:32,799 --> 00:30:35,679
the some of the salient aspects i have

00:30:34,640 --> 00:30:37,520
to make sure that

00:30:35,679 --> 00:30:39,360
you have the right level of our back

00:30:37,520 --> 00:30:41,120
infos you want to make sure that you

00:30:39,360 --> 00:30:41,919
have your admission controllers that are

00:30:41,120 --> 00:30:44,880
deployed to

00:30:41,919 --> 00:30:45,600
to enforce your enterprise security

00:30:44,880 --> 00:30:47,840
policies

00:30:45,600 --> 00:30:49,360
for example to make sure that you could

00:30:47,840 --> 00:30:51,600
have a policy admission controller

00:30:49,360 --> 00:30:54,559
policy which enforces the fact that

00:30:51,600 --> 00:30:56,240
a container with two critical

00:30:54,559 --> 00:30:57,200
vulnerabilities should never be deployed

00:30:56,240 --> 00:30:59,120
into your runtime

00:30:57,200 --> 00:31:00,640
from a network policy perspective we

00:30:59,120 --> 00:31:02,720
talked about it where you can use

00:31:00,640 --> 00:31:04,000
network policies to minimize your blast

00:31:02,720 --> 00:31:07,120
radius and to say

00:31:04,000 --> 00:31:08,880
uh your web microservice for example

00:31:07,120 --> 00:31:10,960
should never be talking to your database

00:31:08,880 --> 00:31:12,799
microservice

00:31:10,960 --> 00:31:14,240
hot security policies need to be

00:31:12,799 --> 00:31:16,720
enforced to make sure that

00:31:14,240 --> 00:31:17,600
you're not running parts with root users

00:31:16,720 --> 00:31:19,679
you're not running

00:31:17,600 --> 00:31:20,720
pause with escalated privileges you're

00:31:19,679 --> 00:31:23,039
not sharing

00:31:20,720 --> 00:31:24,559
your your host name space with the

00:31:23,039 --> 00:31:26,880
containers etc

00:31:24,559 --> 00:31:29,120
and then you also want to uh enforce

00:31:26,880 --> 00:31:31,039
your image authorization to make sure

00:31:29,120 --> 00:31:32,640
that image is

00:31:31,039 --> 00:31:34,799
validated assigned terms of integrity

00:31:32,640 --> 00:31:37,519
the hash etc

00:31:34,799 --> 00:31:38,799
and finally now we're we're building up

00:31:37,519 --> 00:31:41,279
the runtime if you will

00:31:38,799 --> 00:31:42,640
it's the infrastructure layer it's the

00:31:41,279 --> 00:31:45,360
orchestrator layer

00:31:42,640 --> 00:31:46,080
and the final uh piece of the puzzle is

00:31:45,360 --> 00:31:49,200
the actual

00:31:46,080 --> 00:31:51,679
applications that are deployed uh as

00:31:49,200 --> 00:31:52,480
uh as microservices as we talked about

00:31:51,679 --> 00:31:55,519
and there is this

00:31:52,480 --> 00:31:58,320
need to actually ensure that uh

00:31:55,519 --> 00:31:59,679
you you you have the os process control

00:31:58,320 --> 00:32:00,000
that i talked about where what that

00:31:59,679 --> 00:32:02,320
means

00:32:00,000 --> 00:32:04,399
is you have a large number of containers

00:32:02,320 --> 00:32:05,279
running it's impossible for security

00:32:04,399 --> 00:32:08,080
teams to now

00:32:05,279 --> 00:32:09,760
audit each and every container i mean

00:32:08,080 --> 00:32:11,519
that's just not humanly possible

00:32:09,760 --> 00:32:13,679
so you want to make sure that you have

00:32:11,519 --> 00:32:14,880
automated techniques where you can only

00:32:13,679 --> 00:32:17,360
ensure that

00:32:14,880 --> 00:32:18,559
uh authorized processes are executing

00:32:17,360 --> 00:32:21,679
inside your containers

00:32:18,559 --> 00:32:24,080
you can detect unauthorized uh processes

00:32:21,679 --> 00:32:24,799
uh you want to make sure that your your

00:32:24,080 --> 00:32:27,200
network

00:32:24,799 --> 00:32:28,240
access is very very tightly controlled

00:32:27,200 --> 00:32:31,600
to make sure that

00:32:28,240 --> 00:32:33,679
your containers are not unnecessarily

00:32:31,600 --> 00:32:36,000
punching out to actually access command

00:32:33,679 --> 00:32:38,080
and control

00:32:36,000 --> 00:32:39,519
servers or even malicious known

00:32:38,080 --> 00:32:41,440
malicious domains

00:32:39,519 --> 00:32:43,679
you want to make sure that you also have

00:32:41,440 --> 00:32:45,600
the appropriate levels of qos make sure

00:32:43,679 --> 00:32:48,159
that you have the right levels of

00:32:45,600 --> 00:32:49,279
rate limiting both in terms of cpu

00:32:48,159 --> 00:32:52,080
memory users

00:32:49,279 --> 00:32:53,360
resources as well as network you also

00:32:52,080 --> 00:32:56,480
can also enforce

00:32:53,360 --> 00:32:59,120
memory protection and a lot of new

00:32:56,480 --> 00:33:01,200
technologies are evolving around

00:32:59,120 --> 00:33:03,039
being able to leverage service mesh

00:33:01,200 --> 00:33:06,000
aspects where you can actually

00:33:03,039 --> 00:33:07,360
leverage abstracted services for a lot

00:33:06,000 --> 00:33:08,320
of these concepts that we talked about

00:33:07,360 --> 00:33:10,080
for example

00:33:08,320 --> 00:33:12,080
authentication and authorization

00:33:10,080 --> 00:33:15,039
encryption mutual tls

00:33:12,080 --> 00:33:16,399
etc that are being brought together by a

00:33:15,039 --> 00:33:19,039
whole bunch of

00:33:16,399 --> 00:33:20,799
technologies that are available via

00:33:19,039 --> 00:33:21,519
service mess integrations and the part

00:33:20,799 --> 00:33:23,840
that i

00:33:21,519 --> 00:33:25,840
particularly love about that is with you

00:33:23,840 --> 00:33:28,159
can actually leverage these concepts

00:33:25,840 --> 00:33:30,320
without with zero change to your

00:33:28,159 --> 00:33:32,080
application code

00:33:30,320 --> 00:33:33,600
and then you also want to make sure that

00:33:32,080 --> 00:33:36,799
you leverage a lot of these

00:33:33,600 --> 00:33:38,640
network service mesh kinds of access to

00:33:36,799 --> 00:33:40,320
limit the access to your your

00:33:38,640 --> 00:33:42,960
applications and services

00:33:40,320 --> 00:33:44,240
and then the one part that has been

00:33:42,960 --> 00:33:45,360
called out across all of these

00:33:44,240 --> 00:33:47,679
dimensions is

00:33:45,360 --> 00:33:48,960
auditing and make sure that you have the

00:33:47,679 --> 00:33:51,440
appropriate level of

00:33:48,960 --> 00:33:52,000
audit logs and and log aggregation and

00:33:51,440 --> 00:33:54,960
the ability

00:33:52,000 --> 00:33:55,840
to actually perform uh log analysis is

00:33:54,960 --> 00:33:58,159
extremely

00:33:55,840 --> 00:33:58,960
critical for highly dynamic environments

00:33:58,159 --> 00:34:01,200
to be able to

00:33:58,960 --> 00:34:02,240
go back and actually recreate the

00:34:01,200 --> 00:34:03,919
environment

00:34:02,240 --> 00:34:06,000
around let's say when some kind of an

00:34:03,919 --> 00:34:07,840
exploit happen or a breach etc

00:34:06,000 --> 00:34:09,280
to be able to recreate the scenario to

00:34:07,840 --> 00:34:11,440
understand uh

00:34:09,280 --> 00:34:12,960
the the root cause and be able to

00:34:11,440 --> 00:34:13,679
identify and detect and take the

00:34:12,960 --> 00:34:17,119
appropriate

00:34:13,679 --> 00:34:19,760
remediation and finally across

00:34:17,119 --> 00:34:21,760
all of these dimensions are the security

00:34:19,760 --> 00:34:22,320
foundations i mean security as you can

00:34:21,760 --> 00:34:25,200
see

00:34:22,320 --> 00:34:26,399
pervades the entire environment but you

00:34:25,200 --> 00:34:28,159
want to make sure that

00:34:26,399 --> 00:34:29,520
your artifact registry like your

00:34:28,159 --> 00:34:32,079
container reports

00:34:29,520 --> 00:34:34,159
are appropriately secured each and every

00:34:32,079 --> 00:34:35,760
image that you deploy into your runtimes

00:34:34,159 --> 00:34:36,639
needs to be appropriately signed and

00:34:35,760 --> 00:34:38,639
validated

00:34:36,639 --> 00:34:40,639
you want to have the right level of

00:34:38,639 --> 00:34:42,480
identity and access control

00:34:40,639 --> 00:34:44,720
across each of these dimensions so it

00:34:42,480 --> 00:34:46,879
could be our backs in the context of

00:34:44,720 --> 00:34:48,720
kubernetes it can be iam for the cloud

00:34:46,879 --> 00:34:49,200
provider you want to make sure that you

00:34:48,720 --> 00:34:52,000
have

00:34:49,200 --> 00:34:53,520
secrets are never persisted inside your

00:34:52,000 --> 00:34:55,119
containers and you ought to be able to

00:34:53,520 --> 00:34:57,200
detect identify that

00:34:55,119 --> 00:34:58,800
and remediate that in your ci cd

00:34:57,200 --> 00:35:00,400
pipeline for example as we talked about

00:34:58,800 --> 00:35:02,160
by shifting left

00:35:00,400 --> 00:35:03,760
you want to make sure that we have

00:35:02,160 --> 00:35:06,320
already addressed the need to do

00:35:03,760 --> 00:35:08,160
vulnerability assessments

00:35:06,320 --> 00:35:09,920
and have a good idea as to what the

00:35:08,160 --> 00:35:12,079
vulnerabilities are and ensure

00:35:09,920 --> 00:35:14,000
only containers that meet your

00:35:12,079 --> 00:35:15,280
vulnerability policies are deployed

00:35:14,000 --> 00:35:16,960
but you also want to make sure that

00:35:15,280 --> 00:35:18,480
you're constantly evaluating your

00:35:16,960 --> 00:35:20,480
runtime environments

00:35:18,480 --> 00:35:22,240
for vulnerabilities and ingesting new

00:35:20,480 --> 00:35:23,920
threat feeds and

00:35:22,240 --> 00:35:25,760
because of these highly dynamic

00:35:23,920 --> 00:35:27,599
environments all of these aspects need

00:35:25,760 --> 00:35:30,320
to be automated

00:35:27,599 --> 00:35:32,640
and uh you know finally it's it's

00:35:30,320 --> 00:35:35,440
compliance i mean a lot of our

00:35:32,640 --> 00:35:36,640
enterprises are come under various

00:35:35,440 --> 00:35:38,240
compliance standards

00:35:36,640 --> 00:35:40,560
so you want to make sure that you have

00:35:38,240 --> 00:35:41,520
automated ability to actually have full

00:35:40,560 --> 00:35:43,839
visibility

00:35:41,520 --> 00:35:44,800
into the compliance posture of your

00:35:43,839 --> 00:35:46,880
deployments

00:35:44,800 --> 00:35:48,400
your across all these three environments

00:35:46,880 --> 00:35:50,400
for your cloud deployments

00:35:48,400 --> 00:35:52,000
whether it's the uh kubernetes

00:35:50,400 --> 00:35:55,680
deployments as well as your

00:35:52,000 --> 00:35:55,680
application artifacts

00:35:56,240 --> 00:36:02,000
so what let's quickly talk about

00:35:59,280 --> 00:36:03,359
how do we go about securing the compute

00:36:02,000 --> 00:36:04,960
layer and i've talked about a lot of

00:36:03,359 --> 00:36:06,160
this so i won't spend too much time in

00:36:04,960 --> 00:36:07,839
each of these aspects

00:36:06,160 --> 00:36:09,359
but you know let's start with the

00:36:07,839 --> 00:36:11,200
orchestrator right because

00:36:09,359 --> 00:36:13,119
in the runtime you want to make sure

00:36:11,200 --> 00:36:14,640
that your kubernetes they are

00:36:13,119 --> 00:36:16,800
the container orchestrator i'm using

00:36:14,640 --> 00:36:19,040
kubernetes because it's almost become

00:36:16,800 --> 00:36:20,560
synonymous with container deployments

00:36:19,040 --> 00:36:22,480
but you know you want to make sure and

00:36:20,560 --> 00:36:24,079
there are a whole bunch of well-known

00:36:22,480 --> 00:36:24,560
threats and that's what i've called out

00:36:24,079 --> 00:36:26,720
here

00:36:24,560 --> 00:36:29,040
but you know there are there are cis

00:36:26,720 --> 00:36:32,000
benchmarks and kubernetes benchmarks

00:36:29,040 --> 00:36:33,359
that call for various security controls

00:36:32,000 --> 00:36:35,200
and you need to ensure

00:36:33,359 --> 00:36:37,040
so you want to for example you need to

00:36:35,200 --> 00:36:38,560
make sure that the api is not exposed to

00:36:37,040 --> 00:36:41,599
the internet i talked about it

00:36:38,560 --> 00:36:42,400
uh ensure that api communication is tls

00:36:41,599 --> 00:36:44,240
enabled

00:36:42,400 --> 00:36:46,000
you want to make sure that your hcd

00:36:44,240 --> 00:36:47,040
cluster is not exposed to the internet

00:36:46,000 --> 00:36:49,920
appropriately

00:36:47,040 --> 00:36:50,320
uh uh segmented as well as to ensure

00:36:49,920 --> 00:36:53,599
that

00:36:50,320 --> 00:36:57,040
all control plane uh api requests

00:36:53,599 --> 00:36:59,280
are fully uh encrypted and authenticated

00:36:57,040 --> 00:37:01,200
uh and as i mentioned that was my next

00:36:59,280 --> 00:37:02,880
point there which is to ensure tls is

00:37:01,200 --> 00:37:05,040
enabled for hcd access

00:37:02,880 --> 00:37:05,920
similarly you know you want to make sure

00:37:05,040 --> 00:37:08,560
that you have

00:37:05,920 --> 00:37:10,480
applying the right level of kubernetes

00:37:08,560 --> 00:37:12,800
part security policies where

00:37:10,480 --> 00:37:14,640
you disallow containers to run as root

00:37:12,800 --> 00:37:16,720
uh deny containers that require

00:37:14,640 --> 00:37:19,040
excess privileges i mean those need to

00:37:16,720 --> 00:37:21,680
be the exception and not the rule

00:37:19,040 --> 00:37:24,079
allow only signed container images to be

00:37:21,680 --> 00:37:26,240
deployed and run in your environments

00:37:24,079 --> 00:37:27,839
i also talked about resource requests

00:37:26,240 --> 00:37:30,560
and limits i mean these are all best

00:37:27,839 --> 00:37:33,520
practices that go a very very long way

00:37:30,560 --> 00:37:35,760
in containing the attack surface as the

00:37:33,520 --> 00:37:38,720
blast surface of your environments

00:37:35,760 --> 00:37:40,240
a very very important or a aspect of it

00:37:38,720 --> 00:37:40,720
is to make sure that you have enabled

00:37:40,240 --> 00:37:43,520
your

00:37:40,720 --> 00:37:44,800
audit logs and sinks to ensure that you

00:37:43,520 --> 00:37:47,920
have full visibility

00:37:44,800 --> 00:37:49,599
into all the uh operations that are

00:37:47,920 --> 00:37:50,400
being performed in your kubernetes

00:37:49,599 --> 00:37:53,040
clusters

00:37:50,400 --> 00:37:54,560
to be able to perform the necessary

00:37:53,040 --> 00:37:58,079
forensics and analysis

00:37:54,560 --> 00:38:00,400
if it's ever necessary and finally

00:37:58,079 --> 00:38:01,839
uh you want to make sure that you're all

00:38:00,400 --> 00:38:03,520
aspects and i refer to this

00:38:01,839 --> 00:38:05,200
when i talked about the orchestrator

00:38:03,520 --> 00:38:08,079
where all control plane

00:38:05,200 --> 00:38:09,200
authentication is appropriately uh

00:38:08,079 --> 00:38:12,560
authorized

00:38:09,200 --> 00:38:15,119
with the right level of authorization

00:38:12,560 --> 00:38:17,119
and authentication with an approved and

00:38:15,119 --> 00:38:20,960
verified certificate

00:38:17,119 --> 00:38:23,839
root of trust so

00:38:20,960 --> 00:38:25,680
let's now talk about we talked about in

00:38:23,839 --> 00:38:27,520
the previous slide we talked about

00:38:25,680 --> 00:38:30,400
securing the compute layer

00:38:27,520 --> 00:38:33,119
but now let's talk about the securing

00:38:30,400 --> 00:38:35,359
the containers in the run time

00:38:33,119 --> 00:38:37,760
in the run time you want to continuously

00:38:35,359 --> 00:38:40,480
scan for anomalies as i talked about it

00:38:37,760 --> 00:38:41,359
you want to ensure that you have full

00:38:40,480 --> 00:38:43,520
visibility

00:38:41,359 --> 00:38:45,680
into the processes that are executing

00:38:43,520 --> 00:38:47,520
and at scale so you only want to

00:38:45,680 --> 00:38:49,280
allow sanction processes you want to

00:38:47,520 --> 00:38:52,000
monitor file system activity

00:38:49,280 --> 00:38:53,280
activity as well as malicious network

00:38:52,000 --> 00:38:54,240
activity you want to make sure that you

00:38:53,280 --> 00:38:56,800
identify detect

00:38:54,240 --> 00:38:58,240
and prevent malicious network access

00:38:56,800 --> 00:39:00,160
from a micro services

00:38:58,240 --> 00:39:02,160
and a trust perspective your the

00:39:00,160 --> 00:39:04,400
perimeter is now the microservice

00:39:02,160 --> 00:39:06,240
it is not the entire environment so you

00:39:04,400 --> 00:39:09,119
want to restrict communication

00:39:06,240 --> 00:39:09,440
to sanction services uh you to in order

00:39:09,119 --> 00:39:11,359
to

00:39:09,440 --> 00:39:13,040
minimize the blast radius you can

00:39:11,359 --> 00:39:15,040
leverage network policies

00:39:13,040 --> 00:39:17,760
and other micro segmentation tools and

00:39:15,040 --> 00:39:20,800
capabilities to enforce this aspect of

00:39:17,760 --> 00:39:22,160
zero trust and sanctioned access so and

00:39:20,800 --> 00:39:24,000
the the third dimension

00:39:22,160 --> 00:39:25,280
is we talked about image trust and

00:39:24,000 --> 00:39:27,359
content protection

00:39:25,280 --> 00:39:29,359
where you can use a policy agent to

00:39:27,359 --> 00:39:31,920
control authorized access

00:39:29,359 --> 00:39:32,720
only allows signed images with assurance

00:39:31,920 --> 00:39:35,440
of image

00:39:32,720 --> 00:39:36,320
provenance you want to use encrypted

00:39:35,440 --> 00:39:38,160
containers for

00:39:36,320 --> 00:39:41,440
if necessary for those kinds of use

00:39:38,160 --> 00:39:44,960
cases to protect your sensitive data

00:39:41,440 --> 00:39:48,320
and finally uh you know you want to

00:39:44,960 --> 00:39:49,680
leverage service mesh as a appropriate

00:39:48,320 --> 00:39:52,480
because as i mentioned

00:39:49,680 --> 00:39:54,480
it provides abstracted security services

00:39:52,480 --> 00:39:57,280
that you can bring to bear for your

00:39:54,480 --> 00:39:57,839
large scale deployments with zero code

00:39:57,280 --> 00:40:00,320
change

00:39:57,839 --> 00:40:02,320
this also helps to eliminate implicit

00:40:00,320 --> 00:40:04,880
trust encrypt all your traffic

00:40:02,320 --> 00:40:08,319
and it dramatically and goes a long way

00:40:04,880 --> 00:40:08,319
to reduce your attack surface

00:40:08,400 --> 00:40:12,560
and um you know in the interest of time

00:40:10,560 --> 00:40:13,119
i i don't want to spend too much time on

00:40:12,560 --> 00:40:14,960
this

00:40:13,119 --> 00:40:17,200
particular slide but you know the

00:40:14,960 --> 00:40:18,720
additional security considerations

00:40:17,200 --> 00:40:20,480
that that have been called for for

00:40:18,720 --> 00:40:21,280
example in this cloud native security

00:40:20,480 --> 00:40:22,800
white paper

00:40:21,280 --> 00:40:24,720
that came out of the six security

00:40:22,800 --> 00:40:25,119
working group is storage security you

00:40:24,720 --> 00:40:27,200
know

00:40:25,119 --> 00:40:29,200
storage unfortunately doesn't get a lot

00:40:27,200 --> 00:40:29,680
of visibility but you want to make sure

00:40:29,200 --> 00:40:31,440
that

00:40:29,680 --> 00:40:33,200
for your critical assets you want to

00:40:31,440 --> 00:40:33,920
have storage the appropriate storage

00:40:33,200 --> 00:40:36,160
encryption

00:40:33,920 --> 00:40:38,560
persistent volume protection we talked

00:40:36,160 --> 00:40:40,000
about access whether it's both iam or

00:40:38,560 --> 00:40:42,560
from an rbac

00:40:40,000 --> 00:40:43,440
perspective you want to make sure that

00:40:42,560 --> 00:40:46,720
you have

00:40:43,440 --> 00:40:49,920
the right level of right facilities

00:40:46,720 --> 00:40:53,040
to help you manage your credentials

00:40:49,920 --> 00:40:56,800
using hsm life cycle being able to

00:40:53,040 --> 00:40:58,880
uh distribute keys revoke keys do

00:40:56,800 --> 00:41:00,480
uh certificate rotation etc and to make

00:40:58,880 --> 00:41:03,440
sure that's highly available

00:41:00,480 --> 00:41:05,119
uh threat modeling is also another very

00:41:03,440 --> 00:41:06,480
very important perspective that we need

00:41:05,119 --> 00:41:08,880
to pay attention to

00:41:06,480 --> 00:41:10,880
to because you want to understand your

00:41:08,880 --> 00:41:12,079
end-to-end architecture and once you've

00:41:10,880 --> 00:41:13,680
understood the threats

00:41:12,079 --> 00:41:15,440
make sure that you have the right

00:41:13,680 --> 00:41:17,839
security primitives in place

00:41:15,440 --> 00:41:18,960
to address the threats as they pertain

00:41:17,839 --> 00:41:21,520
to your particular

00:41:18,960 --> 00:41:23,520
deployments uh you want to be able to

00:41:21,520 --> 00:41:26,400
ingest new threat intelligence

00:41:23,520 --> 00:41:27,839
uh let's say for example uh known

00:41:26,400 --> 00:41:31,280
malicious ips

00:41:27,839 --> 00:41:34,319
uh new uh threat domains and uh

00:41:31,280 --> 00:41:35,599
or suspicious uh command and control you

00:41:34,319 --> 00:41:36,000
want to be able to make sure that you

00:41:35,599 --> 00:41:38,800
have the

00:41:36,000 --> 00:41:41,119
automatic protection for all the new uh

00:41:38,800 --> 00:41:44,400
threats that are being developed

00:41:41,119 --> 00:41:46,400
out in in the world of their adversaries

00:41:44,400 --> 00:41:48,400
uh incident response capabilities we

00:41:46,400 --> 00:41:49,280
talked about it one of the main aspects

00:41:48,400 --> 00:41:51,680
here is

00:41:49,280 --> 00:41:53,520
you need to be able to adopt your adapt

00:41:51,680 --> 00:41:54,720
your incident response for cloud native

00:41:53,520 --> 00:41:58,160
workflows

00:41:54,720 --> 00:42:00,480
uh we make sure that you have zero trust

00:41:58,160 --> 00:42:02,400
where the now your trust perimeter is

00:42:00,480 --> 00:42:04,480
not your entire data center

00:42:02,400 --> 00:42:06,079
but it's the but it's it's the micro

00:42:04,480 --> 00:42:06,720
service and potentially the container in

00:42:06,079 --> 00:42:09,839
itself

00:42:06,720 --> 00:42:12,160
and only we have

00:42:09,839 --> 00:42:12,960
explicitly allowed communication

00:42:12,160 --> 00:42:15,040
patterns

00:42:12,960 --> 00:42:16,720
uh we want to make sure that you're

00:42:15,040 --> 00:42:19,520
enforcing the concept of

00:42:16,720 --> 00:42:20,560
least privilege and we also talked about

00:42:19,520 --> 00:42:23,280
a constant

00:42:20,560 --> 00:42:25,040
uh evaluation of your compliance posture

00:42:23,280 --> 00:42:27,280
to make sure that you're leveraging all

00:42:25,040 --> 00:42:30,319
the best practices recommendations

00:42:27,280 --> 00:42:32,960
based on uh various uh

00:42:30,319 --> 00:42:34,079
uh container and cloud native standards

00:42:32,960 --> 00:42:35,680
that are available

00:42:34,079 --> 00:42:38,560
to ensure that you have the right levels

00:42:35,680 --> 00:42:41,440
of security controls

00:42:38,560 --> 00:42:42,880
so in summary uh you know uh the

00:42:41,440 --> 00:42:46,319
security for cloud native

00:42:42,880 --> 00:42:48,880
applications and deployments needs to be

00:42:46,319 --> 00:42:50,480
it needs to be automated uh you know

00:42:48,880 --> 00:42:52,640
i've talked about it it's all about

00:42:50,480 --> 00:42:53,280
scale it's all about dynamism it's all

00:42:52,640 --> 00:42:55,040
about

00:42:53,280 --> 00:42:57,359
highly ephemeral workloads so

00:42:55,040 --> 00:42:58,560
traditional security controls just don't

00:42:57,359 --> 00:43:00,400
work so we need to

00:42:58,560 --> 00:43:02,160
have it fully automated and integrated

00:43:00,400 --> 00:43:03,760
throughout your application life cycle

00:43:02,160 --> 00:43:06,319
that's the shift left

00:43:03,760 --> 00:43:08,480
shift security left aspect you want to

00:43:06,319 --> 00:43:09,440
have comprehensive runtime security

00:43:08,480 --> 00:43:10,960
controls

00:43:09,440 --> 00:43:12,640
uh you want to make sure that you have

00:43:10,960 --> 00:43:14,640
the right level of image scanning

00:43:12,640 --> 00:43:17,680
it needs to be fully integrated into

00:43:14,640 --> 00:43:19,359
your devops ecosystems

00:43:17,680 --> 00:43:21,200
you want to make sure that you have the

00:43:19,359 --> 00:43:23,440
right level of segmentation

00:43:21,200 --> 00:43:24,960
leveraging network and security policies

00:43:23,440 --> 00:43:26,240
and make sure that you're constantly

00:43:24,960 --> 00:43:27,839
applying and

00:43:26,240 --> 00:43:29,599
evaluating your environments for the

00:43:27,839 --> 00:43:32,319
right level of

00:43:29,599 --> 00:43:33,119
an adherence to compliance standards

00:43:32,319 --> 00:43:35,200
with that

00:43:33,119 --> 00:43:37,440
i'd like to thank you all very much i

00:43:35,200 --> 00:43:38,000
know that there was a a lot to cover

00:43:37,440 --> 00:43:40,240
there

00:43:38,000 --> 00:43:41,520
but uh i'd like to now turn it over to

00:43:40,240 --> 00:43:44,960
megan to potentially

00:43:41,520 --> 00:43:47,200
uh take some questions

00:43:44,960 --> 00:43:48,480
hi vinay yeah you're welcome to just

00:43:47,200 --> 00:43:50,640
jump into the q a

00:43:48,480 --> 00:43:51,599
it looks like we've got five questions

00:43:50,640 --> 00:43:53,520
in there

00:43:51,599 --> 00:43:55,280
um we've got about four minutes if you

00:43:53,520 --> 00:43:56,400
want to you know take a look at those

00:43:55,280 --> 00:44:00,400
and see if there

00:43:56,400 --> 00:44:03,040
are any you'd like to answer sure

00:44:00,400 --> 00:44:04,800
can i just talk my i'll screen and then

00:44:03,040 --> 00:44:07,680
talk about it uh

00:44:04,800 --> 00:44:08,000
so one of the questions is in shift left

00:44:07,680 --> 00:44:09,440
don't

00:44:08,000 --> 00:44:11,200
we start putting security from the

00:44:09,440 --> 00:44:14,560
development cycle itself

00:44:11,200 --> 00:44:17,599
are we missing it here yes uh and i

00:44:14,560 --> 00:44:20,640
and and my apologies if that was not uh

00:44:17,599 --> 00:44:24,000
uh self-evident there but yes in in

00:44:20,640 --> 00:44:26,960
the concept of shift left is you know uh

00:44:24,000 --> 00:44:28,560
diametrically opposed to uh enforcing

00:44:26,960 --> 00:44:30,079
security in your run time so you want to

00:44:28,560 --> 00:44:32,240
actually make sure that

00:44:30,079 --> 00:44:34,000
you are incorporating security into the

00:44:32,240 --> 00:44:34,800
developed phase into the distribute

00:44:34,000 --> 00:44:38,240
phase in your

00:44:34,800 --> 00:44:40,720
deploy phase and highlight and identify

00:44:38,240 --> 00:44:42,240
security misconfigurations and problems

00:44:40,720 --> 00:44:43,920
before you actually deploy your

00:44:42,240 --> 00:44:45,359
applications into your runtime

00:44:43,920 --> 00:44:48,000
absolutely that's a great question and

00:44:45,359 --> 00:44:51,359
thank you for bringing that up

00:44:48,000 --> 00:44:52,079
and the next question is which part of

00:44:51,359 --> 00:44:55,359
your

00:44:52,079 --> 00:44:58,319
uh pillar contains the sdlc phase so

00:44:55,359 --> 00:44:59,040
the sdlc phase is actually i would say

00:44:58,319 --> 00:45:02,480
it's uh

00:44:59,040 --> 00:45:04,720
it's uh it straddles both the

00:45:02,480 --> 00:45:05,920
develop and the distribute phase where

00:45:04,720 --> 00:45:08,480
you're actually

00:45:05,920 --> 00:45:09,920
uh you know building your software

00:45:08,480 --> 00:45:11,520
building your applications

00:45:09,920 --> 00:45:13,520
building your infrastructure score

00:45:11,520 --> 00:45:14,640
kubernetes application manifest all

00:45:13,520 --> 00:45:17,359
aspects of your

00:45:14,640 --> 00:45:18,400
infrastructure as code and then you're

00:45:17,359 --> 00:45:21,520
actually now

00:45:18,400 --> 00:45:23,119
uh moving a lot of your your

00:45:21,520 --> 00:45:24,960
your testing your your system

00:45:23,119 --> 00:45:26,880
integration sas das

00:45:24,960 --> 00:45:28,319
as well as now your security testing

00:45:26,880 --> 00:45:30,640
into the distributed phase

00:45:28,319 --> 00:45:32,400
and making sure that all of the those

00:45:30,640 --> 00:45:33,359
testing and making security a first

00:45:32,400 --> 00:45:36,400
class citizen

00:45:33,359 --> 00:45:40,000
is actually captured uh across both the

00:45:36,400 --> 00:45:42,079
develop and the distributed phases

00:45:40,000 --> 00:45:44,640
where can we find a good hardened

00:45:42,079 --> 00:45:46,240
container image i think

00:45:44,640 --> 00:45:48,160
i would think there has to be an area

00:45:46,240 --> 00:45:49,760
where the cloud vendor does not allow

00:45:48,160 --> 00:45:52,560
for unsigned or

00:45:49,760 --> 00:45:53,200
a malignant image so that's a very good

00:45:52,560 --> 00:45:56,720
question

00:45:53,200 --> 00:45:58,560
and um so uh there is no simple answer

00:45:56,720 --> 00:45:59,359
to that unfortunately and that is why

00:45:58,560 --> 00:46:01,760
you have

00:45:59,359 --> 00:46:02,640
a lot of container scanning tools out

00:46:01,760 --> 00:46:04,720
there today

00:46:02,640 --> 00:46:05,920
where you can actually very very

00:46:04,720 --> 00:46:07,839
seamlessly

00:46:05,920 --> 00:46:10,240
point these container scanning tools to

00:46:07,839 --> 00:46:12,160
your container image repositories and

00:46:10,240 --> 00:46:14,640
automatically scan those images

00:46:12,160 --> 00:46:16,720
and then you have full visibility into

00:46:14,640 --> 00:46:18,960
into your vulnerability as well

00:46:16,720 --> 00:46:20,319
as your uh compliance and security

00:46:18,960 --> 00:46:22,480
posture of those images

00:46:20,319 --> 00:46:24,319
and that's where you and and this is

00:46:22,480 --> 00:46:26,160
once again an activity that you could

00:46:24,319 --> 00:46:27,359
potentially perform in your distribute

00:46:26,160 --> 00:46:28,880
phase where

00:46:27,359 --> 00:46:30,720
the devops teams have built the

00:46:28,880 --> 00:46:32,640
container artifacts the container image

00:46:30,720 --> 00:46:35,040
is now checked into your repository

00:46:32,640 --> 00:46:37,040
and now this container scanning tool can

00:46:35,040 --> 00:46:37,920
now seamlessly right from your image

00:46:37,040 --> 00:46:39,760
registry

00:46:37,920 --> 00:46:43,680
scan these containers to give you that

00:46:39,760 --> 00:46:45,280
level of visibility

00:46:43,680 --> 00:46:47,680
and can we have a link to the white

00:46:45,280 --> 00:46:48,800
paper absolutely it's also provided as a

00:46:47,680 --> 00:46:52,240
link in the

00:46:48,800 --> 00:46:54,160
uh in the uh

00:46:52,240 --> 00:46:57,119
slides and i'm uh making that with the

00:46:54,160 --> 00:46:59,520
slides be available to our attendees

00:46:57,119 --> 00:47:01,040
we typically don't distribute the slides

00:46:59,520 --> 00:47:04,560
we do put the presentation

00:47:01,040 --> 00:47:06,240
up on youtube um but if uh palo alto

00:47:04,560 --> 00:47:08,000
networks wants to send a you know a

00:47:06,240 --> 00:47:09,200
thank you email out they're welcome to

00:47:08,000 --> 00:47:10,160
include the slides there if that's

00:47:09,200 --> 00:47:13,440
something you're comfortable

00:47:10,160 --> 00:47:14,960
with okay yeah absolutely we would happy

00:47:13,440 --> 00:47:19,040
to share that

00:47:14,960 --> 00:47:21,920
uh so i would love to

00:47:19,040 --> 00:47:24,319
uh i'm happy to share my email address

00:47:21,920 --> 00:47:25,760
in the chat if somebody uh

00:47:24,319 --> 00:47:27,839
would like to reach out to me and happy

00:47:25,760 --> 00:47:31,200
to chat about all these concepts

00:47:27,839 --> 00:47:33,119
uh and um

00:47:31,200 --> 00:47:34,960
so i have this there's a couple of

00:47:33,119 --> 00:47:37,839
questions uh in here

00:47:34,960 --> 00:47:39,280
specific to uh prisma prismacloud and

00:47:37,839 --> 00:47:42,559
i'd like to take those

00:47:39,280 --> 00:47:45,359
uh questions offline uh if that's okay

00:47:42,559 --> 00:47:46,559
and uh but i will definitely make a

00:47:45,359 --> 00:47:50,800
point to reach out

00:47:46,559 --> 00:47:53,599
uh to you to provide more information

00:47:50,800 --> 00:47:55,280
thank you so much vinay it's uh it's

00:47:53,599 --> 00:47:57,040
been a pleasure to have you today

00:47:55,280 --> 00:47:58,720
it looks like we are all out of time

00:47:57,040 --> 00:48:00,960
here um

00:47:58,720 --> 00:48:02,559
but we will be in touch uh with that

00:48:00,960 --> 00:48:04,880
follow-up information

00:48:02,559 --> 00:48:05,599
and the presentation will be available

00:48:04,880 --> 00:48:08,880
on youtube

00:48:05,599 --> 00:48:12,559
later today thanks so much everybody

00:48:08,880 --> 00:48:12,559

YouTube URL: https://www.youtube.com/watch?v=b4H_eHT5wg4


