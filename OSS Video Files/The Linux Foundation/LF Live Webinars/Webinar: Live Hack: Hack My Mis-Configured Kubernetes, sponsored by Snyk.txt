Title: Webinar: Live Hack: Hack My Mis-Configured Kubernetes, sponsored by Snyk
Publication date: 2020-11-04
Playlist: LF Live Webinars
Description: 
	In this live hacking session, learn about key security issues affecting your Kubernetes configuration â€“ what they mean, what an attacker can do to your cluster, and how to fix them.
Captions: 
	00:00:00,080 --> 00:00:04,640
hey all uh good morning good afternoon

00:00:03,360 --> 00:00:06,240
good evening

00:00:04,640 --> 00:00:08,559
uh hopefully you can all see my screen

00:00:06,240 --> 00:00:12,400
right now so welcome

00:00:08,559 --> 00:00:14,920
uh to our talk today about hacking

00:00:12,400 --> 00:00:17,359
misconfigured kubernetes my name is

00:00:14,920 --> 00:00:18,240
okamara and i'm a senior development

00:00:17,359 --> 00:00:20,320
team lead

00:00:18,240 --> 00:00:21,840
here at snik for those of you who are

00:00:20,320 --> 00:00:24,320
not familiar with snakes nick is a

00:00:21,840 --> 00:00:27,119
developer first security company

00:00:24,320 --> 00:00:28,240
that helps developer use open source and

00:00:27,119 --> 00:00:31,279
as part of it

00:00:28,240 --> 00:00:33,280
we offer security uh solutions

00:00:31,279 --> 00:00:35,200
for the cloud for cloud native

00:00:33,280 --> 00:00:37,600
applications including open source

00:00:35,200 --> 00:00:40,160
dependency scanning container scanning

00:00:37,600 --> 00:00:41,840
and lately we also released the new

00:00:40,160 --> 00:00:43,600
neofficial product for infrastructure

00:00:41,840 --> 00:00:46,719
scope scanning

00:00:43,600 --> 00:00:48,160
before sneak i worked in the government

00:00:46,719 --> 00:00:50,640
of israel

00:00:48,160 --> 00:00:52,239
and that's it so what exactly are we

00:00:50,640 --> 00:00:55,600
going to talk about today

00:00:52,239 --> 00:00:58,239
um so we're going to do a really short

00:00:55,600 --> 00:00:59,280
kind of intro but a really short one

00:00:58,239 --> 00:01:02,640
about the

00:00:59,280 --> 00:01:04,960
the potential problems and the

00:01:02,640 --> 00:01:06,320
cloud attack vectors just as a

00:01:04,960 --> 00:01:09,040
background

00:01:06,320 --> 00:01:10,240
then we will continue uh to talk about

00:01:09,040 --> 00:01:13,840
three different issues

00:01:10,240 --> 00:01:17,040
as part of the kubernetes configuration

00:01:13,840 --> 00:01:19,600
uh we will not do a huge uh

00:01:17,040 --> 00:01:20,159
drill down into each one of them but

00:01:19,600 --> 00:01:24,159
we'll

00:01:20,159 --> 00:01:26,320
just show how easy it is to fix

00:01:24,159 --> 00:01:27,680
a different potential problems that you

00:01:26,320 --> 00:01:29,920
can have on production

00:01:27,680 --> 00:01:30,960
so we'll start by talking about security

00:01:29,920 --> 00:01:32,560
context

00:01:30,960 --> 00:01:34,159
and then we'll talk about resources

00:01:32,560 --> 00:01:37,840
limitation

00:01:34,159 --> 00:01:41,040
and and yeah let's start

00:01:37,840 --> 00:01:43,360
so so again like we

00:01:41,040 --> 00:01:44,560
we have the clouded uh like multiple

00:01:43,360 --> 00:01:47,280
attack vectors in

00:01:44,560 --> 00:01:48,159
in in the cloud and a tiger in the cloud

00:01:47,280 --> 00:01:51,280
environment so

00:01:48,159 --> 00:01:53,040
why is it so complicated and basically i

00:01:51,280 --> 00:01:55,200
wanted to start with

00:01:53,040 --> 00:01:56,799
an example probably you're all familiar

00:01:55,200 --> 00:02:00,079
with this one

00:01:56,799 --> 00:02:02,079
the attack on capital one

00:02:00,079 --> 00:02:03,680
i think it was almost like one and a

00:02:02,079 --> 00:02:05,920
half year ago

00:02:03,680 --> 00:02:08,160
and it was a really really big one

00:02:05,920 --> 00:02:11,920
expected one million

00:02:08,160 --> 00:02:15,200
users only in the us and around like one

00:02:11,920 --> 00:02:16,640
100 million dollars in costs

00:02:15,200 --> 00:02:18,800
and i think it's a really really good

00:02:16,640 --> 00:02:21,840
example to start with because

00:02:18,800 --> 00:02:25,040
um it's kind of uh an

00:02:21,840 --> 00:02:28,000
example for misconfiguration

00:02:25,040 --> 00:02:29,280
that was part of the attack but also and

00:02:28,000 --> 00:02:32,239
a good example

00:02:29,280 --> 00:02:33,519
for the amount of potential as security

00:02:32,239 --> 00:02:37,440
pitfalls

00:02:33,519 --> 00:02:39,920
that we all should be aware of

00:02:37,440 --> 00:02:41,680
and and for those of you i'm not who are

00:02:39,920 --> 00:02:42,160
not too familiar with this attack so

00:02:41,680 --> 00:02:44,800
there were

00:02:42,160 --> 00:02:45,840
like multiple steps uh that helped the

00:02:44,800 --> 00:02:48,720
attacker

00:02:45,840 --> 00:02:50,000
uh part of them were like misconfigured

00:02:48,720 --> 00:02:53,120
load balancer

00:02:50,000 --> 00:02:56,239
and we also add like a server-side

00:02:53,120 --> 00:02:58,319
request for forgery

00:02:56,239 --> 00:03:00,400
uh vulnerability like ssr ssr

00:02:58,319 --> 00:03:03,440
availability in the application

00:03:00,400 --> 00:03:04,319
and in addition we also add like an over

00:03:03,440 --> 00:03:07,120
permissive

00:03:04,319 --> 00:03:07,920
s3 bucket on aws so all of those

00:03:07,120 --> 00:03:10,640
together

00:03:07,920 --> 00:03:11,680
basically help the attacker while doing

00:03:10,640 --> 00:03:15,760
uh

00:03:11,680 --> 00:03:17,599
while doing uh the the attack

00:03:15,760 --> 00:03:19,680
so now let's talk a little bit just a

00:03:17,599 --> 00:03:22,560
little bit about the ownership of the

00:03:19,680 --> 00:03:23,760
developers though those days uh and

00:03:22,560 --> 00:03:26,959
basically

00:03:23,760 --> 00:03:29,280
what does my service contain uh so

00:03:26,959 --> 00:03:31,920
obviously we as we all know we have the

00:03:29,280 --> 00:03:34,879
source code of my application so

00:03:31,920 --> 00:03:35,440
you can see right now uh an example for

00:03:34,879 --> 00:03:38,000
my

00:03:35,440 --> 00:03:38,959
python app and of course i need to make

00:03:38,000 --> 00:03:41,200
sure

00:03:38,959 --> 00:03:42,080
that all my code is secure then i'm

00:03:41,200 --> 00:03:45,360
writing like

00:03:42,080 --> 00:03:47,280
like good code and

00:03:45,360 --> 00:03:50,480
and then we have third-party dependency

00:03:47,280 --> 00:03:53,680
so in this example i just installed few

00:03:50,480 --> 00:03:55,200
packages as part of my requirements txt

00:03:53,680 --> 00:03:57,200
and of course then i need to make sure

00:03:55,200 --> 00:04:00,720
that each one of those dependencies

00:03:57,200 --> 00:04:02,959
is secured as well and we

00:04:00,720 --> 00:04:04,400
then we're taking the uh like the

00:04:02,959 --> 00:04:06,640
application and we wrap it

00:04:04,400 --> 00:04:08,080
with our docker file and we in order to

00:04:06,640 --> 00:04:10,159
build docker image

00:04:08,080 --> 00:04:12,080
uh in this case we just took the python

00:04:10,159 --> 00:04:15,920
three base image

00:04:12,080 --> 00:04:18,479
and we and we you know run some apt-get

00:04:15,920 --> 00:04:19,600
updated install commands and then we

00:04:18,479 --> 00:04:22,240
have our own

00:04:19,600 --> 00:04:23,840
uh docker image for the application and

00:04:22,240 --> 00:04:25,919
of course that is part of this

00:04:23,840 --> 00:04:27,680
docker file and the docker image we need

00:04:25,919 --> 00:04:28,639
to make sure that all the os

00:04:27,680 --> 00:04:30,560
dependencies

00:04:28,639 --> 00:04:32,880
are secured as well exactly like we need

00:04:30,560 --> 00:04:33,680
to make sure that the dependencies of

00:04:32,880 --> 00:04:36,720
the application

00:04:33,680 --> 00:04:39,360
are secured and then

00:04:36,720 --> 00:04:40,400
we we have the uh the platform right we

00:04:39,360 --> 00:04:42,400
need to make sure that all the

00:04:40,400 --> 00:04:43,840
infrastructure is code files are secured

00:04:42,400 --> 00:04:47,280
in this case we have

00:04:43,840 --> 00:04:48,880
just an example for a terraform file and

00:04:47,280 --> 00:04:50,800
and again just another thing to make

00:04:48,880 --> 00:04:53,680
sure uh

00:04:50,800 --> 00:04:54,960
and to make the and to take care of and

00:04:53,680 --> 00:04:56,320
last but not least

00:04:54,960 --> 00:04:58,479
what we're going to talk about today

00:04:56,320 --> 00:05:00,560
kubernetes file in this

00:04:58,479 --> 00:05:01,680
in this example you can see just a

00:05:00,560 --> 00:05:04,880
deployment tiamo

00:05:01,680 --> 00:05:07,199
for my kubernetes configuration but

00:05:04,880 --> 00:05:08,320
basically there are lots of things to to

00:05:07,199 --> 00:05:11,039
take care and like

00:05:08,320 --> 00:05:14,320
lots of knowledge that are part of the

00:05:11,039 --> 00:05:14,320
kubernetes configuration

00:05:14,960 --> 00:05:20,160
yeah basically lots of things to handle

00:05:17,680 --> 00:05:23,680
and good luck mr developer

00:05:20,160 --> 00:05:26,960
uh so now let's start talking about

00:05:23,680 --> 00:05:27,199
the the security context which is part

00:05:26,960 --> 00:05:30,479
of

00:05:27,199 --> 00:05:30,880
kubernetes configuration so let's start

00:05:30,479 --> 00:05:33,520
with

00:05:30,880 --> 00:05:35,759
simple very simple definition for it so

00:05:33,520 --> 00:05:38,000
what security context is is basically

00:05:35,759 --> 00:05:39,759
basically defines privilege and access

00:05:38,000 --> 00:05:40,720
control setting for the pod or the

00:05:39,759 --> 00:05:45,600
container

00:05:40,720 --> 00:05:47,759
so here is my uh like pod configuration

00:05:45,600 --> 00:05:48,720
and as you can see right now i also have

00:05:47,759 --> 00:05:51,759
the

00:05:48,720 --> 00:05:53,360
security context special section for the

00:05:51,759 --> 00:05:55,600
security context

00:05:53,360 --> 00:05:56,560
and under that you can see several

00:05:55,600 --> 00:05:59,520
options like

00:05:56,560 --> 00:06:01,120
privilege or capabilities and we're

00:05:59,520 --> 00:06:04,960
going to talk about each one of those

00:06:01,120 --> 00:06:08,160
of those today so let's start with

00:06:04,960 --> 00:06:09,759
privileged spots so when exactly do we

00:06:08,160 --> 00:06:12,479
need privileged pods things

00:06:09,759 --> 00:06:14,080
think about scenarios where your

00:06:12,479 --> 00:06:17,600
application need to access

00:06:14,080 --> 00:06:22,080
the host resources cases like

00:06:17,600 --> 00:06:23,360
um like like accessing the gpu the

00:06:22,080 --> 00:06:25,600
graphic card or

00:06:23,360 --> 00:06:27,360
manipulating the the network stack for

00:06:25,600 --> 00:06:30,080
all of those you actually need

00:06:27,360 --> 00:06:31,600
to access the resources that are part of

00:06:30,080 --> 00:06:33,919
the host

00:06:31,600 --> 00:06:35,520
and i think that the security risk is

00:06:33,919 --> 00:06:37,759
clear here

00:06:35,520 --> 00:06:38,639
basically each one of the of the

00:06:37,759 --> 00:06:40,479
processes

00:06:38,639 --> 00:06:42,000
inside the privileged pods the

00:06:40,479 --> 00:06:44,880
privileged container

00:06:42,000 --> 00:06:45,680
is basically exactly the same like a

00:06:44,880 --> 00:06:49,280
root process

00:06:45,680 --> 00:06:51,039
on the host and in other words it means

00:06:49,280 --> 00:06:52,960
that an attacker can basically do

00:06:51,039 --> 00:06:57,520
anything they want

00:06:52,960 --> 00:06:58,080
um so the solution is simple as well so

00:06:57,520 --> 00:07:01,120
then

00:06:58,080 --> 00:07:01,360
just if you don't need it just don't use

00:07:01,120 --> 00:07:04,720
it

00:07:01,360 --> 00:07:06,720
so uh don't turn it into into true

00:07:04,720 --> 00:07:08,880
and of course again there are some cases

00:07:06,720 --> 00:07:10,880
where you can use this option

00:07:08,880 --> 00:07:13,360
of course but you need to be aware of

00:07:10,880 --> 00:07:15,120
the consequences

00:07:13,360 --> 00:07:17,360
so now let's start with the demo with a

00:07:15,120 --> 00:07:18,960
nice demo in this demo we have two

00:07:17,360 --> 00:07:22,080
different applications

00:07:18,960 --> 00:07:22,639
the first one is supposed to be supposed

00:07:22,080 --> 00:07:26,560
to be

00:07:22,639 --> 00:07:28,479
a secured payment application

00:07:26,560 --> 00:07:30,400
and again it's supposed to be secured

00:07:28,479 --> 00:07:31,520
because it's supposed to be isolated as

00:07:30,400 --> 00:07:34,880
well

00:07:31,520 --> 00:07:37,520
and the only thing this application does

00:07:34,880 --> 00:07:39,280
is just to write files to the disk the

00:07:37,520 --> 00:07:43,280
name of the file in this case is like

00:07:39,280 --> 00:07:46,800
uh and is cards json

00:07:43,280 --> 00:07:48,160
and basically whenever a user

00:07:46,800 --> 00:07:51,680
pastes something using the payment

00:07:48,160 --> 00:07:54,560
application we just write the details

00:07:51,680 --> 00:07:55,520
to the cards json file again very dummy

00:07:54,560 --> 00:07:58,560
application

00:07:55,520 --> 00:08:01,280
that is like our example and the

00:07:58,560 --> 00:08:02,720
second the second application is our

00:08:01,280 --> 00:08:05,520
buildable application

00:08:02,720 --> 00:08:07,840
so as part of this application we have

00:08:05,520 --> 00:08:11,039
two different problems the first one

00:08:07,840 --> 00:08:13,759
is that we have an rce vulnerability

00:08:11,039 --> 00:08:15,919
in this application rc stands for the

00:08:13,759 --> 00:08:16,879
mode code execution so basically think

00:08:15,919 --> 00:08:20,800
about

00:08:16,879 --> 00:08:24,479
an option for the attacker to run code

00:08:20,800 --> 00:08:27,280
from the outside on the pod itself

00:08:24,479 --> 00:08:28,000
so this is like the rce vulnerability

00:08:27,280 --> 00:08:30,080
but also

00:08:28,000 --> 00:08:31,280
the main problem and then uh that we're

00:08:30,080 --> 00:08:35,120
gonna talk about is

00:08:31,280 --> 00:08:41,680
uh that this will be this uh application

00:08:35,120 --> 00:08:43,839
as is running inside a privileged part

00:08:41,680 --> 00:08:46,480
so again we have we have our node and

00:08:43,839 --> 00:08:49,839
inside this our node we have those two

00:08:46,480 --> 00:08:51,040
applications basically because both of

00:08:49,839 --> 00:08:53,839
them

00:08:51,040 --> 00:08:54,800
run on the same on the same node they

00:08:53,839 --> 00:08:57,600
basically use

00:08:54,800 --> 00:08:59,519
the same docker engine which means that

00:08:57,600 --> 00:09:02,720
the docker layers are stored

00:08:59,519 --> 00:09:05,200
are stored on the in the same local

00:09:02,720 --> 00:09:07,600
storage

00:09:05,200 --> 00:09:10,160
so in our case if an attacker has an

00:09:07,600 --> 00:09:13,760
access to the vulnerable pod

00:09:10,160 --> 00:09:16,480
they can basically access all the files

00:09:13,760 --> 00:09:18,240
of the of the others supposed to be

00:09:16,480 --> 00:09:23,839
secured application

00:09:18,240 --> 00:09:26,880
and now let's see that

00:09:23,839 --> 00:09:29,360
so let's just see the uh

00:09:26,880 --> 00:09:30,000
the the application itself so this is

00:09:29,360 --> 00:09:32,000
like the

00:09:30,000 --> 00:09:33,839
the vulnerable application and as part

00:09:32,000 --> 00:09:37,440
of this application i can basically

00:09:33,839 --> 00:09:40,720
upload pictures into

00:09:37,440 --> 00:09:42,560
into this page and now i wanna

00:09:40,720 --> 00:09:43,760
use the payment application so i'm gonna

00:09:42,560 --> 00:09:46,320
donate

00:09:43,760 --> 00:09:47,519
one dollar and i'm gonna i'm gonna show

00:09:46,320 --> 00:09:51,839
you my

00:09:47,519 --> 00:09:51,839
secret credit card

00:09:52,720 --> 00:09:57,120
and that's it we basically donated one

00:09:55,200 --> 00:10:00,000
dollar

00:09:57,120 --> 00:10:00,959
let's see what's going on in our uh in

00:10:00,000 --> 00:10:03,680
our environment

00:10:00,959 --> 00:10:04,880
in our kubernetes so i'm gonna run keep

00:10:03,680 --> 00:10:06,800
cdl get pods

00:10:04,880 --> 00:10:08,399
this is our two parts we have like the

00:10:06,800 --> 00:10:09,680
one for the deployment and the one for

00:10:08,399 --> 00:10:12,160
the payment

00:10:09,680 --> 00:10:13,920
and now let's let's select let's take a

00:10:12,160 --> 00:10:15,680
look on the the configuration themselves

00:10:13,920 --> 00:10:17,680
so this is the configuration

00:10:15,680 --> 00:10:19,600
of the payment application nothing too

00:10:17,680 --> 00:10:22,079
spatially here

00:10:19,600 --> 00:10:24,320
but this is the configuration of our

00:10:22,079 --> 00:10:26,880
regular vulnerability application

00:10:24,320 --> 00:10:28,880
and you can see that the pod is

00:10:26,880 --> 00:10:31,360
privileged

00:10:28,880 --> 00:10:32,720
and now let's try to add this

00:10:31,360 --> 00:10:34,320
application

00:10:32,720 --> 00:10:36,720
so again we're going to assume that

00:10:34,320 --> 00:10:38,399
there is an rc application

00:10:36,720 --> 00:10:40,880
actually vulnerability is part of this

00:10:38,399 --> 00:10:43,440
application and basically

00:10:40,880 --> 00:10:44,240
the the rca that we're going to use is

00:10:43,440 --> 00:10:47,519
kind of

00:10:44,240 --> 00:10:49,760
an option to upload a php script

00:10:47,519 --> 00:10:50,720
into that into the application and then

00:10:49,760 --> 00:10:53,680
access

00:10:50,720 --> 00:10:55,760
this php script and then we can use this

00:10:53,680 --> 00:11:00,800
php script in order to run commands on

00:10:55,760 --> 00:11:02,480
the plot

00:11:00,800 --> 00:11:04,320
so first of all we're going to upload

00:11:02,480 --> 00:11:06,000
the php script which we're going to see

00:11:04,320 --> 00:11:07,839
in a second

00:11:06,000 --> 00:11:09,760
then we're going to create we're going

00:11:07,839 --> 00:11:11,279
to access the speed speed script

00:11:09,760 --> 00:11:13,440
using keral command and we're going to

00:11:11,279 --> 00:11:15,120
run mkdir

00:11:13,440 --> 00:11:17,279
in order to create a directory we're

00:11:15,120 --> 00:11:18,720
going to mount the os file system

00:11:17,279 --> 00:11:20,399
and then we're going to look for the

00:11:18,720 --> 00:11:20,959
file that we're interested in so this is

00:11:20,399 --> 00:11:22,880
like our

00:11:20,959 --> 00:11:26,240
php script and as you can see i can get

00:11:22,880 --> 00:11:29,279
an argument and run it as a system

00:11:26,240 --> 00:11:33,200
and now let's try to upload this file so

00:11:29,279 --> 00:11:33,200
i'm going to upload again the php script

00:11:34,640 --> 00:11:39,600
and now let's inspect this page and take

00:11:37,920 --> 00:11:42,959
the name

00:11:39,600 --> 00:11:44,000
of this file so now the only thing i

00:11:42,959 --> 00:11:47,360
need to do

00:11:44,000 --> 00:11:56,240
is to run the curl command and to

00:11:47,360 --> 00:11:58,000
access this file from the outside so now

00:11:56,240 --> 00:11:59,200
let's copy this curl command

00:11:58,000 --> 00:12:02,480
and the first thing we're going to do

00:11:59,200 --> 00:12:06,000
again is to create a new directory

00:12:02,480 --> 00:12:06,959
on the host on the on the bottom sorry

00:12:06,000 --> 00:12:10,240
so this is

00:12:06,959 --> 00:12:14,079
so basically the the upper terminal

00:12:10,240 --> 00:12:16,880
is uh is as it keeps it is the keepsade

00:12:14,079 --> 00:12:18,959
exec into our pod just so we understand

00:12:16,880 --> 00:12:20,880
what exactly is going on

00:12:18,959 --> 00:12:22,160
as you can see i have nothing in the

00:12:20,880 --> 00:12:25,200
temp directory

00:12:22,160 --> 00:12:27,440
and on the on the lower terminal

00:12:25,200 --> 00:12:29,200
this is the attacker environment so as

00:12:27,440 --> 00:12:31,519
you can see we run the make their

00:12:29,200 --> 00:12:32,480
make deer command and we now have a new

00:12:31,519 --> 00:12:35,040
directory

00:12:32,480 --> 00:12:38,399
named host now what we're going to do is

00:12:35,040 --> 00:12:41,040
to run a mount command

00:12:38,399 --> 00:12:43,120
and the and we can do it only because

00:12:41,040 --> 00:12:44,800
this part is privileged

00:12:43,120 --> 00:12:47,680
so before we run the command we had

00:12:44,800 --> 00:12:50,160
nothing under temp host and now we have

00:12:47,680 --> 00:12:51,279
multiple directory so those are the

00:12:50,160 --> 00:12:54,160
directories

00:12:51,279 --> 00:12:56,079
from the host itself next thing you want

00:12:54,160 --> 00:12:59,040
to do is to look for all the

00:12:56,079 --> 00:13:01,360
the files named card.json again let's

00:12:59,040 --> 00:13:03,920
just assume that i already know that

00:13:01,360 --> 00:13:04,639
uh the name of the file with a secret

00:13:03,920 --> 00:13:08,079
credit card

00:13:04,639 --> 00:13:10,399
with name is a card.json

00:13:08,079 --> 00:13:12,160
and the last command we're going to run

00:13:10,399 --> 00:13:14,240
is just a cut command

00:13:12,160 --> 00:13:15,519
in order to display the content of this

00:13:14,240 --> 00:13:17,200
file

00:13:15,519 --> 00:13:20,000
and as you can see this is the credit

00:13:17,200 --> 00:13:24,240
card we just entered

00:13:20,000 --> 00:13:27,600
in in the payment application and now

00:13:24,240 --> 00:13:27,600
let's see how we can fix it

00:13:29,839 --> 00:13:36,079
so simple as that you see just

00:13:32,880 --> 00:13:40,079
turn the tree into false i have a

00:13:36,079 --> 00:13:43,040
cleanup script so we basically

00:13:40,079 --> 00:13:45,760
deleted all the pods and now we're gonna

00:13:43,040 --> 00:13:48,079
build everything again

00:13:45,760 --> 00:13:49,600
i'm gonna refresh my application so you

00:13:48,079 --> 00:13:52,560
can see that we will start from

00:13:49,600 --> 00:13:54,480
from scratch and let's start let's try

00:13:52,560 --> 00:13:57,279
to do exactly the same let's start by

00:13:54,480 --> 00:13:59,839
uploading the php script into the

00:13:57,279 --> 00:13:59,839
platform

00:14:00,639 --> 00:14:03,920
and then we're going to run the same

00:14:02,399 --> 00:14:06,560
commands one

00:14:03,920 --> 00:14:06,560
one by one

00:14:07,279 --> 00:14:12,000
so again let's let's look for all the

00:14:09,680 --> 00:14:15,120
the new pods you can see that

00:14:12,000 --> 00:14:18,720
they started uh 20

00:14:15,120 --> 00:14:21,760
28 seconds ago let's execute into one

00:14:18,720 --> 00:14:22,639
into the deployment pod and let's see

00:14:21,760 --> 00:14:25,040
there

00:14:22,639 --> 00:14:25,920
that we have nothing under the temp

00:14:25,040 --> 00:14:27,920
directory

00:14:25,920 --> 00:14:29,680
and now we're going to run the and make

00:14:27,920 --> 00:14:32,160
the make gear

00:14:29,680 --> 00:14:32,160
command

00:14:34,240 --> 00:14:47,199
just a second

00:14:44,000 --> 00:14:48,320
yeah sorry for that and and as you can

00:14:47,199 --> 00:14:50,959
see

00:14:48,320 --> 00:14:52,000
right now we have the the uh with

00:14:50,959 --> 00:14:55,120
nothing under the

00:14:52,000 --> 00:14:56,639
the host the tempos directory

00:14:55,120 --> 00:14:58,560
now this is the interesting part so now

00:14:56,639 --> 00:15:01,519
we're going to run the mount command

00:14:58,560 --> 00:15:03,839
and we still have nothing under the

00:15:01,519 --> 00:15:06,320
tempos directory

00:15:03,839 --> 00:15:08,399
let's try to understand why so we're

00:15:06,320 --> 00:15:10,399
going to run the mount command

00:15:08,399 --> 00:15:12,079
not as an attacker this time but just

00:15:10,399 --> 00:15:13,040
inside the pod itself and you can see

00:15:12,079 --> 00:15:16,079
that we

00:15:13,040 --> 00:15:17,519
got permission denied error and

00:15:16,079 --> 00:15:20,959
basically we got this error

00:15:17,519 --> 00:15:23,519
only because um because the the pods are

00:15:20,959 --> 00:15:25,680
not privileged anymore

00:15:23,519 --> 00:15:27,360
and so that was it about privileged

00:15:25,680 --> 00:15:30,240
spots and now let's

00:15:27,360 --> 00:15:31,279
continue with our uh second topic and

00:15:30,240 --> 00:15:34,880
the second topic

00:15:31,279 --> 00:15:37,680
is root containers so when exactly

00:15:34,880 --> 00:15:39,360
do we need to run uh we do we need to

00:15:37,680 --> 00:15:43,199
run containers with

00:15:39,360 --> 00:15:44,560
root users so basically almost each and

00:15:43,199 --> 00:15:45,920
every scenario

00:15:44,560 --> 00:15:48,480
think about cases when you need to

00:15:45,920 --> 00:15:50,240
install system packages

00:15:48,480 --> 00:15:51,759
when you need to change part of the

00:15:50,240 --> 00:15:55,199
configuration

00:15:51,759 --> 00:15:58,320
and even simple commands like ping

00:15:55,199 --> 00:16:00,079
all of those you actually need uh root

00:15:58,320 --> 00:16:02,880
privileges

00:16:00,079 --> 00:16:04,720
and and the security risk is kind of

00:16:02,880 --> 00:16:06,880
similar to what we had

00:16:04,720 --> 00:16:08,079
uh with the privileged pods maybe a

00:16:06,880 --> 00:16:10,240
little bit like lower

00:16:08,079 --> 00:16:11,759
like it's it's like privileged bodies

00:16:10,240 --> 00:16:14,880
basically okay and you can

00:16:11,759 --> 00:16:18,079
you can do anything um but

00:16:14,880 --> 00:16:21,279
uh root service root uh containers it's

00:16:18,079 --> 00:16:23,680
it's it's still still very risky uh

00:16:21,279 --> 00:16:26,320
because the attacker can for example

00:16:23,680 --> 00:16:28,320
access the files or if if they wanna

00:16:26,320 --> 00:16:30,880
explore the network and check other

00:16:28,320 --> 00:16:34,240
devices on the same in the same network

00:16:30,880 --> 00:16:36,320
and so they have those options

00:16:34,240 --> 00:16:37,519
and i think that you know one of the

00:16:36,320 --> 00:16:40,160
problems here

00:16:37,519 --> 00:16:41,839
with root containers is that we can

00:16:40,160 --> 00:16:44,560
easily forget

00:16:41,839 --> 00:16:45,519
or miss the fact that our images can run

00:16:44,560 --> 00:16:47,680
as root

00:16:45,519 --> 00:16:48,720
so even in this docker file in this

00:16:47,680 --> 00:16:52,160
example

00:16:48,720 --> 00:16:55,680
you see that we have a base image of

00:16:52,160 --> 00:16:58,079
of php and and

00:16:55,680 --> 00:16:59,040
i did nothing special i imagine nothing

00:16:58,079 --> 00:17:02,160
related to

00:16:59,040 --> 00:17:05,839
to the user itself but even then

00:17:02,160 --> 00:17:09,679
when i will run the omi command

00:17:05,839 --> 00:17:12,319
i will see that i'm running as a root um

00:17:09,679 --> 00:17:14,000
so again this is like uh something that

00:17:12,319 --> 00:17:16,720
we all need to be aware of

00:17:14,000 --> 00:17:17,760
because there are lots of image images

00:17:16,720 --> 00:17:19,600
that we probably

00:17:17,760 --> 00:17:20,799
can use like base images that we can use

00:17:19,600 --> 00:17:23,919
as part of the

00:17:20,799 --> 00:17:27,600
uh of the of building the uh

00:17:23,919 --> 00:17:28,240
our images and in part of them we can

00:17:27,600 --> 00:17:31,280
have

00:17:28,240 --> 00:17:32,960
good users

00:17:31,280 --> 00:17:34,880
and now let's see uh two different

00:17:32,960 --> 00:17:36,240
solutions okay those are not like the

00:17:34,880 --> 00:17:37,760
only solutions but two different

00:17:36,240 --> 00:17:41,520
solutions that we

00:17:37,760 --> 00:17:44,480
uh that we have for um food containers

00:17:41,520 --> 00:17:45,440
the first one is kind of a like an old

00:17:44,480 --> 00:17:47,600
legacy

00:17:45,440 --> 00:17:48,960
linux solution which is like the linux

00:17:47,600 --> 00:17:50,799
capabilities

00:17:48,960 --> 00:17:53,039
and basically for those of you who are

00:17:50,799 --> 00:17:56,880
not familiar with that like

00:17:53,039 --> 00:18:00,000
the kernel linux kernel added lots of

00:17:56,880 --> 00:18:03,440
capabilities in order to allow the

00:18:00,000 --> 00:18:05,200
process to start as root and then to

00:18:03,440 --> 00:18:08,240
drop the

00:18:05,200 --> 00:18:08,960
the privileges as quickly as possible so

00:18:08,240 --> 00:18:12,320
this like

00:18:08,960 --> 00:18:15,280
the original uh there was the original

00:18:12,320 --> 00:18:16,880
solution in our case in kubernetes

00:18:15,280 --> 00:18:18,640
it's basically we can basically use

00:18:16,880 --> 00:18:21,520
linux capabilities as an

00:18:18,640 --> 00:18:22,960
option to grant a very specific

00:18:21,520 --> 00:18:24,640
permission

00:18:22,960 --> 00:18:26,720
permissions list of permissions to our

00:18:24,640 --> 00:18:29,039
application um

00:18:26,720 --> 00:18:30,240
so basically this is how we can uh

00:18:29,039 --> 00:18:33,200
prevent granting

00:18:30,240 --> 00:18:34,480
the full x full root access for the

00:18:33,200 --> 00:18:36,320
application

00:18:34,480 --> 00:18:38,400
so my recommendation here will be you

00:18:36,320 --> 00:18:39,679
know just start by dropping all the

00:18:38,400 --> 00:18:42,240
capabilities

00:18:39,679 --> 00:18:43,600
and then gradually gradually one by one

00:18:42,240 --> 00:18:47,840
you can add those

00:18:43,600 --> 00:18:51,360
that application actually actually needs

00:18:47,840 --> 00:18:51,360
and let's try it out

00:18:53,360 --> 00:18:57,840
so in this example

00:18:58,960 --> 00:19:02,720
we're going to use the same uh docker

00:19:00,880 --> 00:19:04,720
file that we just the same image that we

00:19:02,720 --> 00:19:07,039
just saw it's like a php

00:19:04,720 --> 00:19:09,360
image and as you can see i'm not running

00:19:07,039 --> 00:19:12,480
as a privilege pod

00:19:09,360 --> 00:19:15,840
and now

00:19:12,480 --> 00:19:16,960
let's say that the attacker got an

00:19:15,840 --> 00:19:19,520
access to

00:19:16,960 --> 00:19:19,520
my pod

00:19:20,000 --> 00:19:23,360
so maybe one of the things that i want

00:19:22,880 --> 00:19:25,600
to do

00:19:23,360 --> 00:19:26,640
is to explore the network so one of the

00:19:25,600 --> 00:19:29,440
uh of the

00:19:26,640 --> 00:19:31,120
common uh tools that can be used is and

00:19:29,440 --> 00:19:34,320
pen web is basically

00:19:31,120 --> 00:19:35,840
a free network scanner

00:19:34,320 --> 00:19:37,600
that can help the attacker to explore

00:19:35,840 --> 00:19:38,799
the network and here you you can see

00:19:37,600 --> 00:19:42,480
that

00:19:38,799 --> 00:19:46,160
we run and map and we got the ip

00:19:42,480 --> 00:19:48,240
of the of the payment service

00:19:46,160 --> 00:19:50,559
and of course that we can bring it ping

00:19:48,240 --> 00:19:53,039
this service as well

00:19:50,559 --> 00:19:54,640
and just assume that maybe you know

00:19:53,039 --> 00:19:58,000
maybe we have the vulnerability

00:19:54,640 --> 00:20:01,039
and this is how we can access somehow uh

00:19:58,000 --> 00:20:01,679
or exploit the into the uh into the

00:20:01,039 --> 00:20:04,880
payment

00:20:01,679 --> 00:20:06,880
uh application

00:20:04,880 --> 00:20:08,240
so now let's see how we can drop all the

00:20:06,880 --> 00:20:11,840
capabilities

00:20:08,240 --> 00:20:15,520
of this of this image and

00:20:11,840 --> 00:20:15,520
and how it can help us

00:20:15,679 --> 00:20:20,320
so again let's start by dropping all the

00:20:18,840 --> 00:20:23,440
capabilities

00:20:20,320 --> 00:20:28,080
and then i want to clean up

00:20:23,440 --> 00:20:31,039
all my environment and rebuild again

00:20:28,080 --> 00:20:33,360
so as you can see uh in the lower

00:20:31,039 --> 00:20:36,640
terminal we now have

00:20:33,360 --> 00:20:39,600
new parts that are being created

00:20:36,640 --> 00:20:40,559
let's try to do exactly the same let's

00:20:39,600 --> 00:20:45,760
execute it

00:20:40,559 --> 00:20:45,760
inside into the into the the pod

00:20:46,159 --> 00:20:49,760
we're going to run if config in order to

00:20:47,840 --> 00:20:51,760
get our ip

00:20:49,760 --> 00:20:54,720
and then we're going to run again the

00:20:51,760 --> 00:20:54,720
the end map tool

00:20:55,520 --> 00:21:01,760
this time we got failed to open uh

00:20:58,799 --> 00:21:03,280
the device and even if we will we'll try

00:21:01,760 --> 00:21:06,640
to do ping

00:21:03,280 --> 00:21:09,520
we'll get uh an operation not we

00:21:06,640 --> 00:21:11,280
just got operation not permitted and the

00:21:09,520 --> 00:21:15,200
reason for that is basically

00:21:11,280 --> 00:21:17,679
that nmap sent and receive raw packets

00:21:15,200 --> 00:21:18,720
and and this is why when we drop the

00:21:17,679 --> 00:21:20,480
capabilities

00:21:18,720 --> 00:21:22,000
all the capabilities we also dropped the

00:21:20,480 --> 00:21:25,679
the capability name

00:21:22,000 --> 00:21:27,919
uh cap net raw and so we

00:21:25,679 --> 00:21:30,480
we kind of disable for endnote the

00:21:27,919 --> 00:21:32,480
option to receive those packets

00:21:30,480 --> 00:21:34,880
and this is why we can we cannot use it

00:21:32,480 --> 00:21:34,880
anymore

00:21:36,720 --> 00:21:39,840
and now let's see our second and second

00:21:38,880 --> 00:21:41,919
option here

00:21:39,840 --> 00:21:43,360
and the second option our second and

00:21:41,919 --> 00:21:46,080
maybe the second solution

00:21:43,360 --> 00:21:46,960
is to try uh the option for run is not

00:21:46,080 --> 00:21:49,120
root

00:21:46,960 --> 00:21:50,799
uh surround is non-root is basically an

00:21:49,120 --> 00:21:54,400
option uh

00:21:50,799 --> 00:21:55,840
that might helps you to might help you

00:21:54,400 --> 00:21:58,799
to

00:21:55,840 --> 00:21:59,679
to determine uh whenever the container

00:21:58,799 --> 00:22:03,360
should run as

00:21:59,679 --> 00:22:04,720
as known as non-root user and basically

00:22:03,360 --> 00:22:07,760
behind the scenes

00:22:04,720 --> 00:22:08,960
kubernetes will not let you to start the

00:22:07,760 --> 00:22:12,080
container

00:22:08,960 --> 00:22:14,880
uh if it asks to if the container itself

00:22:12,080 --> 00:22:16,080
asks to run as root and the

00:22:14,880 --> 00:22:18,960
recommendation if

00:22:16,080 --> 00:22:21,200
if you know that the part or the

00:22:18,960 --> 00:22:23,600
application should not run as a route

00:22:21,200 --> 00:22:24,960
just turn it on and let's see how

00:22:23,600 --> 00:22:27,840
exactly

00:22:24,960 --> 00:22:27,840
uh it works

00:22:28,000 --> 00:22:32,000
so again we're going to use exactly the

00:22:30,080 --> 00:22:32,559
same environment this time we're going

00:22:32,000 --> 00:22:34,400
to

00:22:32,559 --> 00:22:36,320
disable the capabilities feature and

00:22:34,400 --> 00:22:38,400
turn the running zone boot

00:22:36,320 --> 00:22:40,080
option i'm going to clean up the

00:22:38,400 --> 00:22:42,559
environment again and rebuild

00:22:40,080 --> 00:22:42,559
everything

00:22:44,640 --> 00:22:51,600
and this time in the lower terminal

00:22:48,640 --> 00:22:52,480
you can see that i have a problem in the

00:22:51,600 --> 00:22:55,200
statuses

00:22:52,480 --> 00:22:56,640
create container config error let's try

00:22:55,200 --> 00:22:57,200
to understand what exactly happened so

00:22:56,640 --> 00:23:00,799
i'm going to run

00:22:57,200 --> 00:23:00,799
a cube cdl describe command

00:23:03,280 --> 00:23:09,840
and you can see that

00:23:06,640 --> 00:23:13,840
i have an error that the container

00:23:09,840 --> 00:23:15,840
tried to use root container so basically

00:23:13,840 --> 00:23:17,280
because the container was root like the

00:23:15,840 --> 00:23:20,559
user of the container was root

00:23:17,280 --> 00:23:23,840
kubernetes helped us by blocking this

00:23:20,559 --> 00:23:23,840
this container from running

00:23:24,960 --> 00:23:30,400
okay that was it about um about

00:23:28,400 --> 00:23:31,600
privileged spots and also about root

00:23:30,400 --> 00:23:33,039
containers

00:23:31,600 --> 00:23:35,600
and next thing we're going to talk about

00:23:33,039 --> 00:23:37,679
are resource implementation

00:23:35,600 --> 00:23:38,799
so it's kind of a different type of

00:23:37,679 --> 00:23:42,159
security

00:23:38,799 --> 00:23:42,960
security issue because i think that

00:23:42,159 --> 00:23:46,320
resource limit

00:23:42,960 --> 00:23:48,640
risk limitation is a good example for

00:23:46,320 --> 00:23:50,159
the default behavior in kubernetes

00:23:48,640 --> 00:23:52,000
configuration that we all should be

00:23:50,159 --> 00:23:53,520
aware of

00:23:52,000 --> 00:23:56,720
and let's let's start talking about that

00:23:53,520 --> 00:23:57,279
so uh so we have two type of resources

00:23:56,720 --> 00:24:00,640
we have

00:23:57,279 --> 00:24:01,840
uh cpu and memory of course and again

00:24:00,640 --> 00:24:05,360
the problem is

00:24:01,840 --> 00:24:08,240
that by default all the pods

00:24:05,360 --> 00:24:09,200
run with unbounded limits and it

00:24:08,240 --> 00:24:12,400
basically means

00:24:09,200 --> 00:24:14,320
that a single pod can consume as much

00:24:12,400 --> 00:24:17,600
cpu and memory

00:24:14,320 --> 00:24:19,440
that are available on a specific node

00:24:17,600 --> 00:24:21,919
and of course that kubernetes might kill

00:24:19,440 --> 00:24:25,600
application or even nearby application

00:24:21,919 --> 00:24:27,039
inside the same node so of course as you

00:24:25,600 --> 00:24:29,679
all know

00:24:27,039 --> 00:24:31,679
defaults are never good and this is why

00:24:29,679 --> 00:24:35,120
you need to manually

00:24:31,679 --> 00:24:38,159
make sure that we have proper resources

00:24:35,120 --> 00:24:38,880
uh both for the requests but even more

00:24:38,159 --> 00:24:42,159
specific

00:24:38,880 --> 00:24:45,600
even more importantly the limits

00:24:42,159 --> 00:24:47,360
and and now let's

00:24:45,600 --> 00:24:49,760
let's talk about like the cpu and the

00:24:47,360 --> 00:24:50,480
and the memory so i think that the cpu

00:24:49,760 --> 00:24:53,760
is maybe

00:24:50,480 --> 00:24:55,840
you know the the i think the easy case

00:24:53,760 --> 00:24:59,039
because because of the throttling

00:24:55,840 --> 00:25:02,240
mechanism as part of kubernetes

00:24:59,039 --> 00:25:05,760
uh that occurs each and every time the

00:25:02,240 --> 00:25:09,200
application eats the the cpu limit

00:25:05,760 --> 00:25:12,320
so kubernetes will not terminate

00:25:09,200 --> 00:25:13,760
our applications if we will eat the cpu

00:25:12,320 --> 00:25:16,400
limit

00:25:13,760 --> 00:25:17,520
the worst case scenario in and like the

00:25:16,400 --> 00:25:20,559
in the cpu

00:25:17,520 --> 00:25:22,559
with the cpu is that it will affect only

00:25:20,559 --> 00:25:23,279
the performance so everything might run

00:25:22,559 --> 00:25:25,520
slower

00:25:23,279 --> 00:25:25,520
right

00:25:27,120 --> 00:25:32,159
with memory it's a bit different um so

00:25:30,000 --> 00:25:35,840
we cannot compress memory

00:25:32,159 --> 00:25:38,400
and this is why pods will be

00:25:35,840 --> 00:25:39,520
terminated once we reach the the memory

00:25:38,400 --> 00:25:42,080
limit

00:25:39,520 --> 00:25:43,919
so think about scenarios where you know

00:25:42,080 --> 00:25:47,200
someone the attacker can

00:25:43,919 --> 00:25:48,559
uh can run a dust attack on your

00:25:47,200 --> 00:25:52,080
application

00:25:48,559 --> 00:25:56,000
in this case if if they will you know

00:25:52,080 --> 00:25:57,760
uh they will use all the memory as part

00:25:56,000 --> 00:26:00,640
of this application

00:25:57,760 --> 00:26:02,320
they might block legitimate users from

00:26:00,640 --> 00:26:05,440
using using the

00:26:02,320 --> 00:26:06,799
our application but thinking about like

00:26:05,440 --> 00:26:09,600
even a worse

00:26:06,799 --> 00:26:10,720
much worse case where you might have

00:26:09,600 --> 00:26:14,480
different applications

00:26:10,720 --> 00:26:15,600
running on the same node and an attacker

00:26:14,480 --> 00:26:18,720
tried to attack

00:26:15,600 --> 00:26:21,120
one of the applications but at the end

00:26:18,720 --> 00:26:22,880
they also blocked the the second

00:26:21,120 --> 00:26:25,120
application that is running on same

00:26:22,880 --> 00:26:26,640
on the same note because at the end both

00:26:25,120 --> 00:26:29,440
of them are using

00:26:26,640 --> 00:26:30,480
uh the the same memory the same memory

00:26:29,440 --> 00:26:33,919
resources

00:26:30,480 --> 00:26:36,480
and now let's see an example for that

00:26:33,919 --> 00:26:37,760
uh so in this demo we're gonna have

00:26:36,480 --> 00:26:39,679
again like two

00:26:37,760 --> 00:26:41,120
two different applications again running

00:26:39,679 --> 00:26:43,600
on the same node

00:26:41,120 --> 00:26:44,320
uh we'll let the innocent application

00:26:43,600 --> 00:26:46,640
and

00:26:44,320 --> 00:26:47,919
and the and this application should not

00:26:46,640 --> 00:26:50,640
be affected you know by

00:26:47,919 --> 00:26:52,640
any other applications again this is

00:26:50,640 --> 00:26:56,159
this is only uh

00:26:52,640 --> 00:26:56,640
the trivial assumption and and we also

00:26:56,159 --> 00:26:58,720
have

00:26:56,640 --> 00:27:01,200
on the same node we also have our

00:26:58,720 --> 00:27:04,240
vulnerable application

00:27:01,200 --> 00:27:05,840
and when we'll start the demo we will we

00:27:04,240 --> 00:27:08,720
will run this application without

00:27:05,840 --> 00:27:10,720
any uh resource limitation without any

00:27:08,720 --> 00:27:14,240
limitation with the memory

00:27:10,720 --> 00:27:17,039
and and we also gonna assume

00:27:14,240 --> 00:27:18,480
that the this application contains the

00:27:17,039 --> 00:27:21,120
vulnerability

00:27:18,480 --> 00:27:23,039
kind of uh that will help the attackers

00:27:21,120 --> 00:27:24,559
part of the dos attack so the attacker

00:27:23,039 --> 00:27:27,600
can use this vulnerability

00:27:24,559 --> 00:27:30,240
in order in order to take more resources

00:27:27,600 --> 00:27:30,240
from the pod

00:27:30,880 --> 00:27:36,799
um and and again the problem is that

00:27:35,039 --> 00:27:39,600
the attacker can use the vulnerability

00:27:36,799 --> 00:27:42,640
in order to take those resources

00:27:39,600 --> 00:27:45,520
and then they will affect the innocent

00:27:42,640 --> 00:27:45,520
app as well

00:27:46,240 --> 00:27:49,840
so let's see

00:27:52,159 --> 00:27:56,480
so um so this is our uh like our two

00:27:55,600 --> 00:27:58,080
deployments so

00:27:56,480 --> 00:28:00,000
we will start without any resource

00:27:58,080 --> 00:28:03,679
notation

00:28:00,000 --> 00:28:06,640
this is our like and this is like our

00:28:03,679 --> 00:28:07,679
innocent app so as you can see for each

00:28:06,640 --> 00:28:09,919
one of the app

00:28:07,679 --> 00:28:13,200
we can see how much uh how much

00:28:09,919 --> 00:28:15,200
available memory we have

00:28:13,200 --> 00:28:16,799
and let now let's go to the vulnerable

00:28:15,200 --> 00:28:19,600
app and let's assume that

00:28:16,799 --> 00:28:20,720
we can run the dos attack and we can

00:28:19,600 --> 00:28:23,840
consume

00:28:20,720 --> 00:28:25,679
let's start with uh 100 megabytes

00:28:23,840 --> 00:28:27,679
and you can see that there is a drop in

00:28:25,679 --> 00:28:31,360
the amount of of uh

00:28:27,679 --> 00:28:34,320
of available memory again we

00:28:31,360 --> 00:28:36,640
ran it for five seconds so now let's do

00:28:34,320 --> 00:28:39,919
even you know a drastic step

00:28:36,640 --> 00:28:42,399
and you can you will now see even

00:28:39,919 --> 00:28:43,760
a faster drop in the amount of available

00:28:42,399 --> 00:28:46,559
memory

00:28:43,760 --> 00:28:48,320
so again that was our problem we had uh

00:28:46,559 --> 00:28:51,760
like two different applications

00:28:48,320 --> 00:28:54,640
and we saw how one of them

00:28:51,760 --> 00:28:55,200
without universal limitation can affect

00:28:54,640 --> 00:28:58,960
the

00:28:55,200 --> 00:29:01,680
the other application uh and now

00:28:58,960 --> 00:29:04,159
let's see how we can solve it

00:29:01,680 --> 00:29:06,320
[Music]

00:29:04,159 --> 00:29:08,640
so i'm going to turn on the recent

00:29:06,320 --> 00:29:12,720
limitation

00:29:08,640 --> 00:29:16,159
i limited the number of memory and again

00:29:12,720 --> 00:29:19,440
i'm gonna clean up my environment

00:29:16,159 --> 00:29:19,440
and rebuild it again

00:29:24,960 --> 00:29:28,799
let's wait for the new pods

00:29:29,120 --> 00:29:33,279
yeah okay so now let's let's receive

00:29:32,640 --> 00:29:36,559
those two

00:29:33,279 --> 00:29:37,440
application again and let's start with

00:29:36,559 --> 00:29:41,120
this

00:29:37,440 --> 00:29:42,399
smaller size this time so you see that i

00:29:41,120 --> 00:29:44,240
managed to allocate

00:29:42,399 --> 00:29:46,080
uh 10 megabytes but when i tried to

00:29:44,240 --> 00:29:46,880
allocate more than that like 100

00:29:46,080 --> 00:29:49,039
megabytes

00:29:46,880 --> 00:29:50,559
which is more than the limit i just

00:29:49,039 --> 00:29:54,080
failed to allocate this amount

00:29:50,559 --> 00:29:57,520
of memory so again a very very

00:29:54,080 --> 00:30:00,080
simple solution um and

00:29:57,520 --> 00:30:01,760
but it's all very important it's part of

00:30:00,080 --> 00:30:02,720
taking care for all of the applications

00:30:01,760 --> 00:30:04,080
that are running on your

00:30:02,720 --> 00:30:05,840
on your environment in your production

00:30:04,080 --> 00:30:08,399
environment

00:30:05,840 --> 00:30:10,320
okay so now let's go uh to some

00:30:08,399 --> 00:30:10,799
conclusions and maybe you know what are

00:30:10,320 --> 00:30:12,880
the

00:30:10,799 --> 00:30:15,200
uh what are the things that you you can

00:30:12,880 --> 00:30:17,039
take from this talk

00:30:15,200 --> 00:30:18,320
uh so what have you talked about we we

00:30:17,039 --> 00:30:20,720
talked about the

00:30:18,320 --> 00:30:22,960
a little bit about the ownership of the

00:30:20,720 --> 00:30:26,080
develop developers those days

00:30:22,960 --> 00:30:28,159
and how complex it is to make sure uh

00:30:26,080 --> 00:30:29,120
that everything is secure as part of our

00:30:28,159 --> 00:30:32,240
pipeline

00:30:29,120 --> 00:30:34,960
um and then we started to talk

00:30:32,240 --> 00:30:35,679
about three different issues that are

00:30:34,960 --> 00:30:38,640
part of

00:30:35,679 --> 00:30:40,320
kubernetes uh configuration three

00:30:38,640 --> 00:30:40,880
different security issues that are part

00:30:40,320 --> 00:30:43,200
of the

00:30:40,880 --> 00:30:43,919
community's configuration and the first

00:30:43,200 --> 00:30:46,080
one was

00:30:43,919 --> 00:30:47,760
privileged spot and then we continued

00:30:46,080 --> 00:30:50,880
with good containers

00:30:47,760 --> 00:30:51,200
we saw two different solution solutions

00:30:50,880 --> 00:30:53,520
for

00:30:51,200 --> 00:30:55,039
root containers and then we continue

00:30:53,520 --> 00:30:58,799
with kind of a different

00:30:55,039 --> 00:31:01,200
problem um of of security

00:30:58,799 --> 00:31:02,880
of first of all having no limitations

00:31:01,200 --> 00:31:07,919
but also

00:31:02,880 --> 00:31:07,919
using the default values of kubernetes

00:31:08,640 --> 00:31:15,760
so kubernetes security is hard but

00:31:12,240 --> 00:31:20,159
definitely doable and i think that

00:31:15,760 --> 00:31:22,399
um you know that developer should be

00:31:20,159 --> 00:31:24,240
they should start getting familiar with

00:31:22,399 --> 00:31:26,240
those issues they should start getting

00:31:24,240 --> 00:31:28,000
uh familiar with those risks because

00:31:26,240 --> 00:31:30,320
it's as we all

00:31:28,000 --> 00:31:32,240
understand now it's kind of an

00:31:30,320 --> 00:31:34,320
inseparable part of the application

00:31:32,240 --> 00:31:36,880
right you can you can just say okay this

00:31:34,320 --> 00:31:39,440
is my code and this is my dependencies

00:31:36,880 --> 00:31:41,360
and i have no idea what's going on on my

00:31:39,440 --> 00:31:43,760
kubernetes environment

00:31:41,360 --> 00:31:44,399
it's all part of the same application

00:31:43,760 --> 00:31:46,640
and i guess

00:31:44,399 --> 00:31:48,480
that you know one of the things we need

00:31:46,640 --> 00:31:50,480
to make to make sure is that there is a

00:31:48,480 --> 00:31:53,279
good education and we all

00:31:50,480 --> 00:31:56,080
uh all be familiar with those risks as

00:31:53,279 --> 00:32:00,159
part of kubernetes

00:31:56,080 --> 00:32:03,120
and maybe uh maybe another kind of a

00:32:00,159 --> 00:32:04,960
takeaway from this stock is the fact

00:32:03,120 --> 00:32:06,559
that we need to help the developers and

00:32:04,960 --> 00:32:08,320
it's kind of related

00:32:06,559 --> 00:32:10,559
to the previous slide we need to help

00:32:08,320 --> 00:32:13,760
the developers by adding more

00:32:10,559 --> 00:32:16,640
tools to the pipeline um

00:32:13,760 --> 00:32:17,279
more specifically i'm talking about uh

00:32:16,640 --> 00:32:19,360
to

00:32:17,279 --> 00:32:20,320
about the fact that we need to uh to

00:32:19,360 --> 00:32:23,039
catch those

00:32:20,320 --> 00:32:24,799
issues as soon as possible not waiting

00:32:23,039 --> 00:32:27,360
for the last moment and

00:32:24,799 --> 00:32:29,120
see those issues on production but to to

00:32:27,360 --> 00:32:31,760
find them as soon as possible

00:32:29,120 --> 00:32:32,159
even during the the development and to

00:32:31,760 --> 00:32:36,960
fix

00:32:32,159 --> 00:32:39,519
them and and

00:32:36,960 --> 00:32:41,360
uh what didn't we talked about today so

00:32:39,519 --> 00:32:44,480
lots of other staff that

00:32:41,360 --> 00:32:46,799
we probably missed um

00:32:44,480 --> 00:32:49,120
again we don't have too much time today

00:32:46,799 --> 00:32:50,640
so i i will not talk about each one of

00:32:49,120 --> 00:32:53,279
those

00:32:50,640 --> 00:32:54,480
but there is a great list of other

00:32:53,279 --> 00:32:57,440
issues that

00:32:54,480 --> 00:32:58,399
you should all be familiar with uh

00:32:57,440 --> 00:33:01,679
things like

00:32:58,399 --> 00:33:02,799
uh like uh rbot like world-based access

00:33:01,679 --> 00:33:05,120
control

00:33:02,799 --> 00:33:06,240
and but also networks and network

00:33:05,120 --> 00:33:09,919
policies

00:33:06,240 --> 00:33:11,760
all of those uh have a specific context

00:33:09,919 --> 00:33:13,360
with a specific

00:33:11,760 --> 00:33:16,320
value that you can use in order to

00:33:13,360 --> 00:33:19,120
improve the security as part of your

00:33:16,320 --> 00:33:22,240
um the security as part of your

00:33:19,120 --> 00:33:22,240
kubernetes environment

00:33:23,039 --> 00:33:27,519
so so last but not least i would like to

00:33:25,519 --> 00:33:30,880
uh to show you one of the

00:33:27,519 --> 00:33:33,840
solutions that we uh released uh lately

00:33:30,880 --> 00:33:35,360
as part of snake infra which name snake

00:33:33,840 --> 00:33:38,320
and press code

00:33:35,360 --> 00:33:40,559
and basically sneaker actually is code

00:33:38,320 --> 00:33:43,120
helps you to find and even fix

00:33:40,559 --> 00:33:44,720
security issues as part of your

00:33:43,120 --> 00:33:48,240
configuration files and

00:33:44,720 --> 00:33:49,600
right now we support kubernetes and

00:33:48,240 --> 00:33:52,799
terraform files

00:33:49,600 --> 00:33:56,480
and we basically uh making this list

00:33:52,799 --> 00:33:58,960
even bigger and bigger and you can scan

00:33:56,480 --> 00:34:01,760
everything from your git environment you

00:33:58,960 --> 00:34:05,120
can scan everything locally using our

00:34:01,760 --> 00:34:07,279
uh our cli and uh

00:34:05,120 --> 00:34:08,639
you even have an option to filter out

00:34:07,279 --> 00:34:10,800
policies

00:34:08,639 --> 00:34:12,000
uh that you don't agree with like if you

00:34:10,800 --> 00:34:13,359
don't agree with the severity if you

00:34:12,000 --> 00:34:15,760
think that one of the policies

00:34:13,359 --> 00:34:17,280
that we think that is very low you think

00:34:15,760 --> 00:34:18,240
it's very important and you want to make

00:34:17,280 --> 00:34:21,440
sure that

00:34:18,240 --> 00:34:22,879
um that um that all

00:34:21,440 --> 00:34:24,560
the all the developers that in the

00:34:22,879 --> 00:34:27,119
organization are taking care of so you

00:34:24,560 --> 00:34:31,040
can change it to be an eye severely

00:34:27,119 --> 00:34:33,760
um high severity uh um

00:34:31,040 --> 00:34:34,800
policy so i don't like those two slides

00:34:33,760 --> 00:34:38,720
i'm just gonna

00:34:34,800 --> 00:34:42,639
jump directory directly into our uh

00:34:38,720 --> 00:34:42,639
sneak project page

00:34:43,599 --> 00:34:48,639
uh so this is like snake environment

00:34:45,839 --> 00:34:51,440
this like sneak platform and i

00:34:48,639 --> 00:34:53,520
already imported like with like using

00:34:51,440 --> 00:34:57,359
github i already imported

00:34:53,520 --> 00:35:01,520
um my cloud native config

00:34:57,359 --> 00:35:04,079
repo and now let's go to one of the and

00:35:01,520 --> 00:35:05,680
uh one of the of the files inside the

00:35:04,079 --> 00:35:08,960
kubernetes file inside this

00:35:05,680 --> 00:35:12,320
repository and as you can see

00:35:08,960 --> 00:35:13,680
i can i have a view for what exactly is

00:35:12,320 --> 00:35:15,200
going on so

00:35:13,680 --> 00:35:17,200
yeah we just talked about like the

00:35:15,200 --> 00:35:19,760
education and

00:35:17,200 --> 00:35:20,320
i think this is part of it right because

00:35:19,760 --> 00:35:23,280
if

00:35:20,320 --> 00:35:24,640
for example we have a privileged spot

00:35:23,280 --> 00:35:27,520
it's not enough to say okay

00:35:24,640 --> 00:35:28,960
it's just a privileged pod but it's very

00:35:27,520 --> 00:35:31,760
nice if we can get

00:35:28,960 --> 00:35:33,599
a context to the problem okay like

00:35:31,760 --> 00:35:36,079
what's the issue is

00:35:33,599 --> 00:35:37,280
what's the impact of the issue as we

00:35:36,079 --> 00:35:40,320
already talked about this

00:35:37,280 --> 00:35:44,160
in this talk but and also

00:35:40,320 --> 00:35:47,839
how you can fix it um

00:35:44,160 --> 00:35:51,280
and so this is like the our uh

00:35:47,839 --> 00:35:54,800
get our integration with the the

00:35:51,280 --> 00:35:58,000
um with git and what we already

00:35:54,800 --> 00:36:00,240
what we also have is an

00:35:58,000 --> 00:36:01,680
option to scan everything locally from

00:36:00,240 --> 00:36:05,280
your environment so i'm going to run

00:36:01,680 --> 00:36:06,560
snake infest code test and i also can

00:36:05,280 --> 00:36:09,760
see the

00:36:06,560 --> 00:36:13,359
results of my

00:36:09,760 --> 00:36:16,800
local files so again both

00:36:13,359 --> 00:36:19,280
the cli and the regular input flow of

00:36:16,800 --> 00:36:19,280
sneak

00:36:19,839 --> 00:36:26,400
so thank you all for listening

00:36:23,839 --> 00:36:27,520
i really enjoyed i hope that you enjoyed

00:36:26,400 --> 00:36:30,640
as well

00:36:27,520 --> 00:36:32,640
and and i think that now we have time

00:36:30,640 --> 00:36:37,040
for some questions

00:36:32,640 --> 00:36:37,040
if there are any questions yay

00:36:37,119 --> 00:36:41,920
okay um

00:36:42,480 --> 00:36:46,320
just a second

00:36:43,170 --> 00:36:49,680
[Music]

00:36:46,320 --> 00:36:50,560
uh first question will we talk about

00:36:49,680 --> 00:36:55,839
openshift

00:36:50,560 --> 00:36:55,839
and the answer is no uh sorry for that

00:36:59,040 --> 00:37:01,920
another question

00:37:06,079 --> 00:37:11,680
so uh we have a question about does the

00:37:09,119 --> 00:37:12,720
attack vector will work on openshift

00:37:11,680 --> 00:37:15,760
openshift or

00:37:12,720 --> 00:37:18,480
only in vanilla kubernetes

00:37:15,760 --> 00:37:19,200
and i think you know like the the point

00:37:18,480 --> 00:37:21,119
for

00:37:19,200 --> 00:37:23,119
uh second the point for this

00:37:21,119 --> 00:37:25,100
presentation was to talk only about

00:37:23,119 --> 00:37:28,240
the the core um

00:37:25,100 --> 00:37:31,359
[Music]

00:37:28,240 --> 00:37:33,040
the concept of kubernetes maybe part of

00:37:31,359 --> 00:37:33,520
them will not work i i think that you

00:37:33,040 --> 00:37:35,359
know the

00:37:33,520 --> 00:37:37,359
the privilege example the privileged

00:37:35,359 --> 00:37:38,720
spot example will be different in

00:37:37,359 --> 00:37:41,680
openshift but

00:37:38,720 --> 00:37:42,480
the memory the resource limitation uh

00:37:41,680 --> 00:37:44,960
problem

00:37:42,480 --> 00:37:47,359
will definitely be as part of openshift

00:37:44,960 --> 00:37:47,359
as well

00:37:48,839 --> 00:37:51,839
um

00:37:55,280 --> 00:37:58,640
so we have another question uh pringle

00:37:57,520 --> 00:38:02,160
docker images from

00:37:58,640 --> 00:38:05,040
dokkarab is mostly privileged

00:38:02,160 --> 00:38:05,680
kubernetes security context can fix can

00:38:05,040 --> 00:38:08,800
fix it

00:38:05,680 --> 00:38:10,000
in the container level using uh run as

00:38:08,800 --> 00:38:13,359
user

00:38:10,000 --> 00:38:16,400
um i'm not sure i follow

00:38:13,359 --> 00:38:18,000
the the question so if you can make if

00:38:16,400 --> 00:38:20,880
you can clarify that on the chat

00:38:18,000 --> 00:38:20,880
as well thanks

00:38:21,520 --> 00:38:23,760
um

00:38:26,160 --> 00:38:31,119
so another question um if you can get

00:38:29,680 --> 00:38:35,119
the resources

00:38:31,119 --> 00:38:37,119
related to the demo i will be happy to

00:38:35,119 --> 00:38:38,480
share the yamos and the docker files

00:38:37,119 --> 00:38:40,240
after this

00:38:38,480 --> 00:38:42,480
this talk as well i'll make sure it

00:38:40,240 --> 00:38:47,839
happens

00:38:42,480 --> 00:38:47,839
and oh too many questions uh

00:38:49,839 --> 00:38:53,200
how to run untrusted application with

00:38:52,400 --> 00:38:55,280
spreadsheets

00:38:53,200 --> 00:38:57,040
third-party dependencies from internet

00:38:55,280 --> 00:39:00,400
inside code running in

00:38:57,040 --> 00:39:03,440
on-prem kubernetes cluster

00:39:00,400 --> 00:39:06,640
docker at runtime

00:39:03,440 --> 00:39:11,599
um can you

00:39:06,640 --> 00:39:11,599
clarify what exactly the question is

00:39:13,359 --> 00:39:18,560
thanks um

00:39:21,920 --> 00:39:25,599
thanks all for the good feedback

00:39:25,839 --> 00:39:30,800
and i'm not sure if i can provide

00:39:28,480 --> 00:39:32,160
exactly the same gita repo that i just

00:39:30,800 --> 00:39:35,920
saw but again i'm going to share the

00:39:32,160 --> 00:39:35,920
examples as well for sure

00:39:38,720 --> 00:39:42,880
uh yeah good question the sneak

00:39:41,119 --> 00:39:46,800
infrastructure is code scan

00:39:42,880 --> 00:39:49,920
you can try it for free um and basically

00:39:46,800 --> 00:39:54,160
uh all sneak products as

00:39:49,920 --> 00:39:56,880
a free um a free uh

00:39:54,160 --> 00:39:58,160
free version so you you can try snake

00:39:56,880 --> 00:40:00,320
infrastructure is code

00:39:58,160 --> 00:40:01,480
for free as well and and i think that

00:40:00,320 --> 00:40:04,319
right now we have

00:40:01,480 --> 00:40:06,319
300 tests per month uh

00:40:04,319 --> 00:40:11,839
free for infrastructure as code so yeah

00:40:06,319 --> 00:40:11,839
definitely gonna try it out

00:40:15,520 --> 00:40:20,800
uh a question if the tool that i just

00:40:18,560 --> 00:40:21,839
demoed will find errors and provide

00:40:20,800 --> 00:40:25,280
suggestions

00:40:21,839 --> 00:40:28,960
to to fix the the error so yes it just

00:40:25,280 --> 00:40:32,079
uh demonstrated uh

00:40:28,960 --> 00:40:33,280
the purpose is to to have a list of all

00:40:32,079 --> 00:40:36,480
the issues

00:40:33,280 --> 00:40:39,760
but not only that also to to give you

00:40:36,480 --> 00:40:43,520
uh some explanation how we can fix it

00:40:39,760 --> 00:40:43,520
and what's the problems part of it

00:40:45,300 --> 00:40:52,560
[Music]

00:40:49,040 --> 00:40:55,599
uh interesting question from

00:40:52,560 --> 00:40:57,599
anonymous uh person if someone has

00:40:55,599 --> 00:40:59,920
access to the cluster

00:40:57,599 --> 00:41:01,680
can they just change yamus files and

00:40:59,920 --> 00:41:04,960
privileges and privileges

00:41:01,680 --> 00:41:06,160
uh i'm not sure in the example you

00:41:04,960 --> 00:41:08,960
showed

00:41:06,160 --> 00:41:10,400
us if it's a separate terminal to

00:41:08,960 --> 00:41:12,160
execute the the attack

00:41:10,400 --> 00:41:14,000
so again like add only a separate

00:41:12,160 --> 00:41:16,800
terminal just to

00:41:14,000 --> 00:41:19,040
to show what exactly is going on inside

00:41:16,800 --> 00:41:22,480
the pod not as the attacker

00:41:19,040 --> 00:41:25,680
but as for the the first question

00:41:22,480 --> 00:41:28,319
so it depends what does it mean that

00:41:25,680 --> 00:41:29,200
the the attacker is in access to the

00:41:28,319 --> 00:41:31,119
cluster

00:41:29,200 --> 00:41:34,720
if they have an access only to the pod

00:41:31,119 --> 00:41:36,960
itself or to one of the pods

00:41:34,720 --> 00:41:39,119
so it depends what's the what's the

00:41:36,960 --> 00:41:40,960
configuration of your cluster so

00:41:39,119 --> 00:41:43,200
of course that may be possible to

00:41:40,960 --> 00:41:46,319
somehow get an access to the

00:41:43,200 --> 00:41:48,960
to the yaml files for example um

00:41:46,319 --> 00:41:50,800
but if not and in most of the cases i

00:41:48,960 --> 00:41:53,119
guess it's very easy because they're

00:41:50,800 --> 00:41:54,480
like the the deployment environment and

00:41:53,119 --> 00:41:57,040
the source code environment is

00:41:54,480 --> 00:41:57,760
is kind of a different environment from

00:41:57,040 --> 00:41:59,520
from your

00:41:57,760 --> 00:42:02,079
kubernetes cluster so in most of the

00:41:59,520 --> 00:42:03,520
cases it's it's not doable or at least

00:42:02,079 --> 00:42:06,560
it's very hard

00:42:03,520 --> 00:42:09,040
but i think that the core concept is

00:42:06,560 --> 00:42:10,560
even if they have an access if they even

00:42:09,040 --> 00:42:12,079
if the attacker have an access to the

00:42:10,560 --> 00:42:14,480
cluster

00:42:12,079 --> 00:42:16,160
you need to make sure that they can do

00:42:14,480 --> 00:42:20,400
the least as possible

00:42:16,160 --> 00:42:24,400
as part of this access and

00:42:20,400 --> 00:42:24,400
hope i and answer the question

00:42:25,440 --> 00:42:31,200
um so right now we are

00:42:28,720 --> 00:42:32,319
we don't have any automatic uh automatic

00:42:31,200 --> 00:42:35,200
speaks

00:42:32,319 --> 00:42:36,640
for those issues but we are working on

00:42:35,200 --> 00:42:45,839
that at the moment

00:42:36,640 --> 00:42:45,839
so stay tuned

00:42:47,680 --> 00:42:51,839
again uh same question i'm gonna i'm

00:42:50,480 --> 00:42:53,680
gonna share

00:42:51,839 --> 00:42:55,040
a part of the configuration i just

00:42:53,680 --> 00:42:58,800
talked about uh

00:42:55,040 --> 00:43:01,040
in this um like very soon after this

00:42:58,800 --> 00:43:01,040
talk

00:43:05,920 --> 00:43:11,839
um nice question

00:43:09,760 --> 00:43:13,520
of where i can learn more about

00:43:11,839 --> 00:43:15,760
kubernetes

00:43:13,520 --> 00:43:17,359
very good very good question i like it

00:43:15,760 --> 00:43:19,359
um

00:43:17,359 --> 00:43:21,920
i can say about myself that you know i

00:43:19,359 --> 00:43:23,440
learned like most of my experiences just

00:43:21,920 --> 00:43:27,280
by

00:43:23,440 --> 00:43:30,079
playing with kubernetes and

00:43:27,280 --> 00:43:30,880
and i think that you know lots of good

00:43:30,079 --> 00:43:33,359
podcasts

00:43:30,880 --> 00:43:34,400
about uh about kubernetes and how you

00:43:33,359 --> 00:43:37,680
can use it

00:43:34,400 --> 00:43:40,720
but also uh like very good uh

00:43:37,680 --> 00:43:42,560
like courses that you can take

00:43:40,720 --> 00:43:43,920
as well if you don't have any context at

00:43:42,560 --> 00:43:46,800
all

00:43:43,920 --> 00:43:48,560
uh but again my recommendation just

00:43:46,800 --> 00:43:50,560
start playing with that

00:43:48,560 --> 00:43:52,640
i think that if you know if i will share

00:43:50,560 --> 00:43:56,400
the uh some resources after

00:43:52,640 --> 00:43:58,160
this conversation after this talk so

00:43:56,400 --> 00:44:00,560
i think it will be a very very good

00:43:58,160 --> 00:44:00,560
start

00:44:02,960 --> 00:44:09,839
any other question

00:44:13,680 --> 00:44:21,359
um another anonymous question

00:44:17,440 --> 00:44:24,880
uh how to do pod sandboxing

00:44:21,359 --> 00:44:28,079
and kubernetes cluster so i'm not sure

00:44:24,880 --> 00:44:31,440
like um i'm not sure there is

00:44:28,079 --> 00:44:33,680
any similar uh

00:44:31,440 --> 00:44:35,119
like concept for sandboxing now that i'm

00:44:33,680 --> 00:44:38,160
familiar with

00:44:35,119 --> 00:44:38,720
um but again i think that in most of the

00:44:38,160 --> 00:44:41,200
cases

00:44:38,720 --> 00:44:42,240
at least what you can do is try to make

00:44:41,200 --> 00:44:45,680
sure that like

00:44:42,240 --> 00:44:46,480
the pods that you have um inside your

00:44:45,680 --> 00:44:49,520
cluster

00:44:46,480 --> 00:44:51,359
are like don't have all the privilege of

00:44:49,520 --> 00:44:54,720
all the privileges

00:44:51,359 --> 00:44:57,839
all the capabilities and and

00:44:54,720 --> 00:45:01,119
then like if they don't have any um

00:44:57,839 --> 00:45:03,440
any options for that so even if then an

00:45:01,119 --> 00:45:06,079
attacker is in access to the

00:45:03,440 --> 00:45:07,280
uh to the to your cluster they can

00:45:06,079 --> 00:45:09,440
basically do nothing

00:45:07,280 --> 00:45:10,800
they maybe they can you know ruin your

00:45:09,440 --> 00:45:13,680
pod maybe they can keep you

00:45:10,800 --> 00:45:19,839
the pod but they can do nothing outside

00:45:13,680 --> 00:45:19,839
of the pod

00:45:20,319 --> 00:45:26,160
um question about the

00:45:23,760 --> 00:45:27,200
vulnerable application with the recent

00:45:26,160 --> 00:45:29,760
limitation

00:45:27,200 --> 00:45:30,720
uh is there is any other way to handle

00:45:29,760 --> 00:45:34,079
that

00:45:30,720 --> 00:45:37,920
wound or just limit the uh

00:45:34,079 --> 00:45:39,599
the memory um you know probably you know

00:45:37,920 --> 00:45:41,599
as part of the demo i saw i

00:45:39,599 --> 00:45:43,599
explained that are two different uh

00:45:41,599 --> 00:45:45,599
problems here the first one is what was

00:45:43,599 --> 00:45:49,119
kind of a given just for the demo

00:45:45,599 --> 00:45:51,119
of the of the like the

00:45:49,119 --> 00:45:53,040
and the vulnerability for the attacker

00:45:51,119 --> 00:45:56,240
to use more resources

00:45:53,040 --> 00:45:58,319
uh so for this one you know just fix the

00:45:56,240 --> 00:45:59,440
vulnerability just make sure

00:45:58,319 --> 00:46:00,640
you don't have those kind of

00:45:59,440 --> 00:46:01,839
vulnerabilities as part of your

00:46:00,640 --> 00:46:04,880
application

00:46:01,839 --> 00:46:06,880
and and for the second part even if you

00:46:04,880 --> 00:46:09,520
have those kind of vulnerabilities

00:46:06,880 --> 00:46:11,440
so yeah you can you can uh i think it

00:46:09,520 --> 00:46:15,839
will be enough for you to start with

00:46:11,440 --> 00:46:15,839
uh memory limitation

00:46:19,520 --> 00:46:23,359
is there is there any way to inspect the

00:46:22,560 --> 00:46:27,359
pod

00:46:23,359 --> 00:46:27,359
for anomalous behavior

00:46:27,440 --> 00:46:31,680
i think there are like multiple uh

00:46:30,079 --> 00:46:33,440
products that might help you

00:46:31,680 --> 00:46:35,920
i don't want to enter this as part of

00:46:33,440 --> 00:46:39,760
this application sorry

00:46:35,920 --> 00:46:43,359
um and another question

00:46:39,760 --> 00:46:47,040
about sneak is it open source

00:46:43,359 --> 00:46:49,920
uh so we do have uh several repositories

00:46:47,040 --> 00:46:52,960
for example our cli is open source

00:46:49,920 --> 00:46:55,760
uh but not everything as far as part of

00:46:52,960 --> 00:46:57,760
our company is open source

00:46:55,760 --> 00:47:01,440
i think this is it i hope that i

00:46:57,760 --> 00:47:05,119
answered all the questions

00:47:01,440 --> 00:47:07,839
and thank you everyone

00:47:05,119 --> 00:47:08,800
thank you ore that was awesome thanks so

00:47:07,839 --> 00:47:10,720
much for

00:47:08,800 --> 00:47:12,480
everyone participating all the great

00:47:10,720 --> 00:47:15,119
questions that was great

00:47:12,480 --> 00:47:17,359
as a reminder the presentation will be

00:47:15,119 --> 00:47:17,920
posted on the linux foundation youtube

00:47:17,359 --> 00:47:20,400
page

00:47:17,920 --> 00:47:22,400
um in the next 24 hours so we look

00:47:20,400 --> 00:47:31,119
forward to reviewing with you there

00:47:22,400 --> 00:47:31,119

YouTube URL: https://www.youtube.com/watch?v=34rNqQUcBHU


