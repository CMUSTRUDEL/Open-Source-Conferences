Title: LF Live Webinar:  Resource and Cost Management Techniques and Introduction to FinOps
Publication date: 2021-05-25
Playlist: LF Live Webinars
Description: 
	sponsored by AWS

Learn Resource and Cost Management Techniques so your cloud never runs out of resources, and learn how to engage with The Linux Foundationâ€™s FinOps Foundation which champions cost visibility and management across cloud infrastructure spend.
Captions: 
	00:00:00,000 --> 00:00:04,080
so much so thank you thank you so much

00:00:03,600 --> 00:00:06,160
for the

00:00:04,080 --> 00:00:07,600
introduction um so we're going to go

00:00:06,160 --> 00:00:08,240
into a little bit of journey uh you know

00:00:07,600 --> 00:00:09,840
your cloud

00:00:08,240 --> 00:00:11,920
will never run out of resources right

00:00:09,840 --> 00:00:13,280
well we'll learn a little bit more about

00:00:11,920 --> 00:00:15,280
that so a little bit about who your

00:00:13,280 --> 00:00:16,960
guides are today i'm robbie lachman one

00:00:15,280 --> 00:00:18,880
of two robbies uh here today

00:00:16,960 --> 00:00:20,640
and i'm a chief evangelist at harness so

00:00:18,880 --> 00:00:22,800
i run all over developer advocacy

00:00:20,640 --> 00:00:24,080
and evangelism programs at harness and

00:00:22,800 --> 00:00:25,840
robby uh why don't you give a little bit

00:00:24,080 --> 00:00:27,039
of background uh about yourself so

00:00:25,840 --> 00:00:27,840
robbie is the head of our cloud

00:00:27,039 --> 00:00:29,519
optimization

00:00:27,840 --> 00:00:31,840
group here tarnish with robbie maybe a

00:00:29,519 --> 00:00:34,239
quick second about yourself

00:00:31,840 --> 00:00:35,680
absolutely thanks zoe uh so hi everyone

00:00:34,239 --> 00:00:37,200
thanks very much for joining today

00:00:35,680 --> 00:00:39,040
uh we have an exciting session ahead of

00:00:37,200 --> 00:00:41,120
us so my name is ravi

00:00:39,040 --> 00:00:42,399
also and i'm the head of product for

00:00:41,120 --> 00:00:44,800
cloud optimization at

00:00:42,399 --> 00:00:46,000
harness prior to this i was ceo and

00:00:44,800 --> 00:00:47,920
co-founder of lightwing

00:00:46,000 --> 00:00:49,039
which was acquired by harness recently

00:00:47,920 --> 00:00:50,800
um lightweight does

00:00:49,039 --> 00:00:52,480
intelligent cloud ops automation to

00:00:50,800 --> 00:00:54,879
optimize public cloud spend

00:00:52,480 --> 00:00:56,640
and apply to that i ran a couple of tech

00:00:54,879 --> 00:00:58,000
ventures in e-commerce enablement

00:00:56,640 --> 00:01:00,320
healthcare and consulting

00:00:58,000 --> 00:01:02,160
so club cost management is a problem and

00:01:00,320 --> 00:01:02,800
space that's been very important to me

00:01:02,160 --> 00:01:04,879
first

00:01:02,800 --> 00:01:06,240
as a consumer and now from the other

00:01:04,879 --> 00:01:07,520
side as well

00:01:06,240 --> 00:01:09,840
you know because if you're a large

00:01:07,520 --> 00:01:11,439
organization uh doing this right

00:01:09,840 --> 00:01:13,600
means less cloud waste and more cash

00:01:11,439 --> 00:01:15,439
flow to invest in what matters

00:01:13,600 --> 00:01:16,799
and if you're a smaller organization it

00:01:15,439 --> 00:01:17,280
could basically be the difference

00:01:16,799 --> 00:01:19,280
between

00:01:17,280 --> 00:01:21,200
life and debt for the company yeah

00:01:19,280 --> 00:01:21,920
thanks really so let's talk about what

00:01:21,200 --> 00:01:24,320
journey we're going to

00:01:21,920 --> 00:01:25,520
be going on today so the first thing

00:01:24,320 --> 00:01:28,000
we're going to kind of find well

00:01:25,520 --> 00:01:30,079
is the cloud infinite you know you're

00:01:28,000 --> 00:01:32,799
the the lure of auto scaling and

00:01:30,079 --> 00:01:33,119
getting uh capacity when you need it

00:01:32,799 --> 00:01:34,640
well

00:01:33,119 --> 00:01:36,560
is it infinite well there's certainly a

00:01:34,640 --> 00:01:38,479
cost for it also

00:01:36,560 --> 00:01:39,920
well welcome to kubernetes right so all

00:01:38,479 --> 00:01:43,040
the rage these days k8

00:01:39,920 --> 00:01:44,799
it's portable it's ubiquitous but is

00:01:43,040 --> 00:01:47,200
kubernetes actually cheaper are you

00:01:44,799 --> 00:01:49,920
getting more density by using kubernetes

00:01:47,200 --> 00:01:51,280
and then also common cloud common cloud

00:01:49,920 --> 00:01:53,119
cost challenges so we'll walk

00:01:51,280 --> 00:01:55,119
through a few patterns of how actually

00:01:53,119 --> 00:01:56,000
these costs can actually rack up very

00:01:55,119 --> 00:01:58,320
quickly

00:01:56,000 --> 00:01:59,920
and also we're giving you some paradigms

00:01:58,320 --> 00:02:01,360
actually how to start combating that so

00:01:59,920 --> 00:02:03,680
we'll give you the cost challenges

00:02:01,360 --> 00:02:05,520
and also giving you some patterns on how

00:02:03,680 --> 00:02:07,439
you can start reducing that also

00:02:05,520 --> 00:02:09,920
getting a better grasp on it and then

00:02:07,439 --> 00:02:11,599
lastly how to embrace the knobs pink

00:02:09,920 --> 00:02:13,040
homage to the linux foundation

00:02:11,599 --> 00:02:14,640
there's actually a foundation called the

00:02:13,040 --> 00:02:15,599
phenol foundation which is a sub

00:02:14,640 --> 00:02:17,200
foundation

00:02:15,599 --> 00:02:19,280
i'm trying to use foundation too much of

00:02:17,200 --> 00:02:21,280
the linux foundation um which you can

00:02:19,280 --> 00:02:24,879
join and also learn more how to combat

00:02:21,280 --> 00:02:26,000
and also to uh report on cloud cost uh

00:02:24,879 --> 00:02:28,720
similar to an agile

00:02:26,000 --> 00:02:30,160
last shop so the infinite cloud let's

00:02:28,720 --> 00:02:32,000
let's go let's talk about

00:02:30,160 --> 00:02:33,200
well why even use a cloud and is it

00:02:32,000 --> 00:02:36,160
really infinite

00:02:33,200 --> 00:02:36,480
uh so for some of us uh if you're if

00:02:36,160 --> 00:02:39,519
you're

00:02:36,480 --> 00:02:41,360
as old as i am racking and stacking

00:02:39,519 --> 00:02:42,800
right you remember doing this

00:02:41,360 --> 00:02:43,920
now as a software engineer myself you

00:02:42,800 --> 00:02:45,440
know i used to have little servers

00:02:43,920 --> 00:02:46,959
running under my desk and then their

00:02:45,440 --> 00:02:48,239
server is another part of the office and

00:02:46,959 --> 00:02:48,879
then there's a data center somewhere

00:02:48,239 --> 00:02:52,160
else

00:02:48,879 --> 00:02:54,239
uh but really one of the things that

00:02:52,160 --> 00:02:55,680
virtualization or even cloud resources

00:02:54,239 --> 00:02:57,440
has ushered in that

00:02:55,680 --> 00:02:58,720
there's no more rack and stack so going

00:02:57,440 --> 00:03:02,239
from this person here

00:02:58,720 --> 00:03:04,959
uh racking and stacking a blade to using

00:03:02,239 --> 00:03:07,599
something like vsphere v client or recap

00:03:04,959 --> 00:03:08,800
pick your vm program of choice you're

00:03:07,599 --> 00:03:10,400
able to actually build

00:03:08,800 --> 00:03:11,920
an internal cloud right like hey you

00:03:10,400 --> 00:03:13,200
know what we have internal resources we

00:03:11,920 --> 00:03:15,920
have a private cloud

00:03:13,200 --> 00:03:18,319
and we're no longer subject to racking

00:03:15,920 --> 00:03:19,599
and stacking when we need some resources

00:03:18,319 --> 00:03:21,680
now you might say you know what it

00:03:19,599 --> 00:03:24,640
deserves a vmware tax or vm tax

00:03:21,680 --> 00:03:26,480
but again you're doing things via

00:03:24,640 --> 00:03:29,280
software

00:03:26,480 --> 00:03:30,000
now where we know the world we live in

00:03:29,280 --> 00:03:33,200
today

00:03:30,000 --> 00:03:34,400
or the paradigm today uh no more vm or

00:03:33,200 --> 00:03:37,120
no more vmware attacks

00:03:34,400 --> 00:03:38,799
right so if i need a new instance um

00:03:37,120 --> 00:03:42,000
going from like v3 or vcac

00:03:38,799 --> 00:03:43,840
over to the right to the aws ec2 console

00:03:42,000 --> 00:03:45,280
uh you're able to spin up resources when

00:03:43,840 --> 00:03:47,519
you need them right so

00:03:45,280 --> 00:03:50,239
you're not paying license costs per se

00:03:47,519 --> 00:03:51,440
uh to spin up a new linux or centos or

00:03:50,239 --> 00:03:53,519
ubuntu instance

00:03:51,440 --> 00:03:55,360
uh you have the ability just to pay for

00:03:53,519 --> 00:03:57,439
the underlying hardware

00:03:55,360 --> 00:03:58,799
uh that you're using or the underlying

00:03:57,439 --> 00:03:59,280
amount of time that you're using the

00:03:58,799 --> 00:04:00,879
hardware

00:03:59,280 --> 00:04:02,400
and this is what uh robbie and i will

00:04:00,879 --> 00:04:03,840
get into a little bit that there's some

00:04:02,400 --> 00:04:05,519
complexities and these billing

00:04:03,840 --> 00:04:06,319
dimensions so there's no such thing as

00:04:05,519 --> 00:04:08,000
every lunch

00:04:06,319 --> 00:04:10,400
but this is the kind of the world in the

00:04:08,000 --> 00:04:13,120
public cloud that we live in today

00:04:10,400 --> 00:04:14,080
but why do you go and go about using the

00:04:13,120 --> 00:04:16,239
public cloud right

00:04:14,080 --> 00:04:17,120
so there might be this whole discussion

00:04:16,239 --> 00:04:18,959
on

00:04:17,120 --> 00:04:20,799
operational expenditure opex versus

00:04:18,959 --> 00:04:24,000
capex capital expenditure

00:04:20,799 --> 00:04:25,600
but but really one of the main

00:04:24,000 --> 00:04:27,280
reasons why you would use the public

00:04:25,600 --> 00:04:29,919
cloud is this concept

00:04:27,280 --> 00:04:30,560
i like to call time to value right so

00:04:29,919 --> 00:04:33,040
not only

00:04:30,560 --> 00:04:34,240
if you take a look at just a pure

00:04:33,040 --> 00:04:36,400
hardware portion of it

00:04:34,240 --> 00:04:37,280
it's those are low margin services for

00:04:36,400 --> 00:04:39,360
the cloud providers

00:04:37,280 --> 00:04:40,639
you know they don't make terribly amount

00:04:39,360 --> 00:04:42,720
much money on

00:04:40,639 --> 00:04:44,240
let's say an ec2 instance or a gce

00:04:42,720 --> 00:04:46,160
instance but

00:04:44,240 --> 00:04:47,520
if you take a look at your organization

00:04:46,160 --> 00:04:48,000
let's think about something like this

00:04:47,520 --> 00:04:50,000
let's say

00:04:48,000 --> 00:04:51,520
all this new tech stack on the left here

00:04:50,000 --> 00:04:53,280
you know what we want to use kubernetes

00:04:51,520 --> 00:04:54,400
we want to use cassandra's database we

00:04:53,280 --> 00:04:56,160
want to use some streaming

00:04:54,400 --> 00:04:58,320
such as kafka and like want to use some

00:04:56,160 --> 00:05:00,240
machine learning such as tensorflow

00:04:58,320 --> 00:05:01,440
if you were if you had to bring these

00:05:00,240 --> 00:05:03,360
technologies

00:05:01,440 --> 00:05:04,720
into your organization or you were

00:05:03,360 --> 00:05:06,720
charged just using it

00:05:04,720 --> 00:05:08,080
well and you had no experience in using

00:05:06,720 --> 00:05:09,120
it let's take a look at that journey

00:05:08,080 --> 00:05:10,479
really quickly so

00:05:09,120 --> 00:05:13,120
first thing you might do you might buy a

00:05:10,479 --> 00:05:14,000
funny animal o'reilly or packet book or

00:05:13,120 --> 00:05:15,440
a press book

00:05:14,000 --> 00:05:16,720
uh to kind of teach you about these

00:05:15,440 --> 00:05:17,840
things okay let me learn from other

00:05:16,720 --> 00:05:19,600
people who've done it

00:05:17,840 --> 00:05:20,880
also you might be going about getting

00:05:19,600 --> 00:05:22,240
student certifications right you might

00:05:20,880 --> 00:05:23,600
become a cka

00:05:22,240 --> 00:05:25,520
or you might you know what i need to go

00:05:23,600 --> 00:05:26,800
hit up stack overflow i have to learn

00:05:25,520 --> 00:05:28,240
more about certain things or your you

00:05:26,800 --> 00:05:30,080
know data snack certified

00:05:28,240 --> 00:05:31,680
administrator but basically you're going

00:05:30,080 --> 00:05:33,280
for that journey to learn how to

00:05:31,680 --> 00:05:35,039
operationalize that right so as a

00:05:33,280 --> 00:05:36,720
software engineer hello world is easy

00:05:35,039 --> 00:05:39,039
the hard part is what happens in a

00:05:36,720 --> 00:05:40,400
failure and this is the learning journey

00:05:39,039 --> 00:05:42,560
you have to go through

00:05:40,400 --> 00:05:44,240
but now if you if you kind of take a

00:05:42,560 --> 00:05:46,080
look back at the cloud providers

00:05:44,240 --> 00:05:47,759
uh they offer you something like a quick

00:05:46,080 --> 00:05:49,520
time to value right so

00:05:47,759 --> 00:05:51,440
here i have an actual screenshot of

00:05:49,520 --> 00:05:52,320
amazon eks which is amazon elastic for

00:05:51,440 --> 00:05:54,880
branding service

00:05:52,320 --> 00:05:55,840
if i needed a cluster i actually i used

00:05:54,880 --> 00:05:57,919
gks a lot

00:05:55,840 --> 00:06:00,080
uh that you could actually go and just

00:05:57,919 --> 00:06:02,720
enter a few details

00:06:00,080 --> 00:06:04,160
and you have a fully running eks cluster

00:06:02,720 --> 00:06:06,319
or something could be about

00:06:04,160 --> 00:06:07,840
uh sagemaker right for machine learning

00:06:06,319 --> 00:06:10,160
or amazon hosted

00:06:07,840 --> 00:06:11,759
kafka or uh hemazone jose cassandra or

00:06:10,160 --> 00:06:12,479
pick your public cloud provider of

00:06:11,759 --> 00:06:15,360
choice

00:06:12,479 --> 00:06:16,240
um they're giving you quick time to

00:06:15,360 --> 00:06:17,919
value

00:06:16,240 --> 00:06:20,080
by leveraging their operational

00:06:17,919 --> 00:06:21,039
expertise and bundling it and selling to

00:06:20,080 --> 00:06:24,960
as a service but

00:06:21,039 --> 00:06:26,720
that comes with a cost and so eventually

00:06:24,960 --> 00:06:28,319
you're gonna get a bill actually this is

00:06:26,720 --> 00:06:31,600
a actual screenshot

00:06:28,319 --> 00:06:32,240
of my bill a few months ago that i had

00:06:31,600 --> 00:06:34,800
from

00:06:32,240 --> 00:06:36,560
aws and i was joking with ravi like when

00:06:34,800 --> 00:06:37,919
we're running through the presentation

00:06:36,560 --> 00:06:40,160
i actually don't know what the nat

00:06:37,919 --> 00:06:41,199
gateway's for like i was i i blatantly

00:06:40,160 --> 00:06:43,680
asked him like

00:06:41,199 --> 00:06:44,800
i i don't know if i used one like i only

00:06:43,680 --> 00:06:46,720
use eks

00:06:44,800 --> 00:06:48,639
and i maybe just put up one ec2 instance

00:06:46,720 --> 00:06:49,840
so i use one queue minus plus or several

00:06:48,639 --> 00:06:51,919
kubernetes clusters

00:06:49,840 --> 00:06:53,599
and i use maybe some other linux machine

00:06:51,919 --> 00:06:54,319
types to do some sort of jump box type

00:06:53,599 --> 00:06:57,919
of stuff

00:06:54,319 --> 00:06:59,280
uh but why did my bill look like this

00:06:57,919 --> 00:07:00,960
well you know there's just some

00:06:59,280 --> 00:07:02,400
rationale behind that right sometimes

00:07:00,960 --> 00:07:03,759
your bill is complex you know there's no

00:07:02,400 --> 00:07:05,280
such thing as a free lunch

00:07:03,759 --> 00:07:06,960
and i'm gonna dig into that uh really

00:07:05,280 --> 00:07:09,039
quickly uh but

00:07:06,960 --> 00:07:10,720
before we dig into that going back to my

00:07:09,039 --> 00:07:12,880
example

00:07:10,720 --> 00:07:15,039
let's say for this bill i was only using

00:07:12,880 --> 00:07:16,240
kubernetes right which is true like for

00:07:15,039 --> 00:07:17,520
the most part i was only using

00:07:16,240 --> 00:07:19,919
kubernetes but let's

00:07:17,520 --> 00:07:22,000
unpacking some stuff please save us my

00:07:19,919 --> 00:07:24,240
tk8s for kubernetes

00:07:22,000 --> 00:07:25,840
uh so some of the benefits of kubernetes

00:07:24,240 --> 00:07:27,199
if uh some folks in the audience

00:07:25,840 --> 00:07:29,520
you know have dabbled with it or not

00:07:27,199 --> 00:07:31,919
sure what it is um so just quickly

00:07:29,520 --> 00:07:33,680
why folks are going towards kubernetes

00:07:31,919 --> 00:07:34,479
uh your dev team and your operations

00:07:33,680 --> 00:07:36,720
team can

00:07:34,479 --> 00:07:38,160
speak the same declarative language

00:07:36,720 --> 00:07:40,080
which is this yaml format

00:07:38,160 --> 00:07:42,400
when you build kubernetes manifest and

00:07:40,080 --> 00:07:42,720
so i'll role play here let's say robbie

00:07:42,400 --> 00:07:44,960
was

00:07:42,720 --> 00:07:46,479
a software engineer and i'm a

00:07:44,960 --> 00:07:48,400
application infrastructure engineer

00:07:46,479 --> 00:07:50,080
uh you know we can simply declare what

00:07:48,400 --> 00:07:50,560
needs to happen in a failure or how we

00:07:50,080 --> 00:07:52,240
scale

00:07:50,560 --> 00:07:54,080
like very non-functional requirements of

00:07:52,240 --> 00:07:54,879
the application we're speaking the same

00:07:54,080 --> 00:07:57,039
language

00:07:54,879 --> 00:07:58,080
it's portable right so kubernetes

00:07:57,039 --> 00:07:59,840
vanilla kubernetes

00:07:58,080 --> 00:08:01,280
running in one cloud if it's running in

00:07:59,840 --> 00:08:04,319
your data center it should run

00:08:01,280 --> 00:08:05,919
similarly uh outside probably

00:08:04,319 --> 00:08:07,440
in the public cloud right and also

00:08:05,919 --> 00:08:08,720
kubernetes if you don't like the opinion

00:08:07,440 --> 00:08:10,160
it's pluggable so you can change the

00:08:08,720 --> 00:08:12,240
opinion of lots of things you don't like

00:08:10,160 --> 00:08:12,560
how the ingress controller is get a new

00:08:12,240 --> 00:08:14,240
one

00:08:12,560 --> 00:08:15,599
if you don't like how a certain load

00:08:14,240 --> 00:08:16,800
balance this game is or a certain sort

00:08:15,599 --> 00:08:19,039
of placement scheme

00:08:16,800 --> 00:08:19,919
you may replace it and also vanilla

00:08:19,039 --> 00:08:21,599
kubernetes itself

00:08:19,919 --> 00:08:23,440
is one of the uh obviously one of the

00:08:21,599 --> 00:08:25,120
premier applications of the cncf

00:08:23,440 --> 00:08:26,560
subfoundation of lens condition it is

00:08:25,120 --> 00:08:30,160
free of license costs

00:08:26,560 --> 00:08:32,240
there's only benefits uh but there is an

00:08:30,160 --> 00:08:34,399
outside

00:08:32,240 --> 00:08:35,279
to kubernetes and this is a real number

00:08:34,399 --> 00:08:38,959
um

00:08:35,279 --> 00:08:40,479
we about five weeks ago uh so we so our

00:08:38,959 --> 00:08:41,039
platform uh when we're running things in

00:08:40,479 --> 00:08:42,399
aws

00:08:41,039 --> 00:08:44,880
and also our second cloud provider which

00:08:42,399 --> 00:08:46,240
is gcp uh we design things for safety

00:08:44,880 --> 00:08:47,519
here so if there needs to be a scaling

00:08:46,240 --> 00:08:51,760
event it will occur

00:08:47,519 --> 00:08:54,000
um but uh somebody uh wasn't me ravi

00:08:51,760 --> 00:08:56,240
i know who it is actually but somebody

00:08:54,000 --> 00:08:56,240
uh

00:08:56,399 --> 00:09:02,000
ran a sample application hello world but

00:08:59,600 --> 00:09:04,320
they kind of left like some of the

00:09:02,000 --> 00:09:05,920
scaling rules or auto scaling stuff

00:09:04,320 --> 00:09:08,399
out of check because they were doing

00:09:05,920 --> 00:09:12,000
like a load test and hello world

00:09:08,399 --> 00:09:14,240
uh in about five weeks ago cost us

00:09:12,000 --> 00:09:16,080
fifteen thousand dollars this is fif

00:09:14,240 --> 00:09:19,360
this is the price of a honda civic

00:09:16,080 --> 00:09:20,880
this is what it costs us right uh and so

00:09:19,360 --> 00:09:22,800
it can be quite expensive right and this

00:09:20,880 --> 00:09:23,360
is what kubernetes right so the auto

00:09:22,800 --> 00:09:24,720
scaling group

00:09:23,360 --> 00:09:25,920
kicking off over and over nodes were

00:09:24,720 --> 00:09:27,360
getting added over and over again as

00:09:25,920 --> 00:09:28,240
density increased and the work couldn't

00:09:27,360 --> 00:09:30,640
get placed

00:09:28,240 --> 00:09:32,880
uh but it was quite expensive uh to run

00:09:30,640 --> 00:09:35,120
that uh someone has speaking to

00:09:32,880 --> 00:09:36,720
come on monday morning uh but going back

00:09:35,120 --> 00:09:38,640
to this like hey you know

00:09:36,720 --> 00:09:40,000
why did it cost so much well sure like

00:09:38,640 --> 00:09:42,080
doesn't kubernetes scale

00:09:40,000 --> 00:09:43,680
oh absolutely um if you take a look at

00:09:42,080 --> 00:09:44,800
kubernetes what's actually needed for

00:09:43,680 --> 00:09:46,160
kubernetes to run

00:09:44,800 --> 00:09:47,920
um each one of these nodes are going

00:09:46,160 --> 00:09:49,600
left to right um let's say you have

00:09:47,920 --> 00:09:51,200
if you're unfamiliar with architecture

00:09:49,600 --> 00:09:53,760
committees there is a

00:09:51,200 --> 00:09:54,720
controller to worker node uh

00:09:53,760 --> 00:09:56,320
relationship so

00:09:54,720 --> 00:09:57,839
for example you might have two masters

00:09:56,320 --> 00:09:58,880
you know one is hot one is there for

00:09:57,839 --> 00:10:00,560
disaster recovery

00:09:58,880 --> 00:10:01,920
and then you have n number of worker

00:10:00,560 --> 00:10:03,680
nodes uh but

00:10:01,920 --> 00:10:05,279
with this each one of those little icons

00:10:03,680 --> 00:10:07,200
there it's a piece of infrastructure

00:10:05,279 --> 00:10:08,640
right so every time there's a node

00:10:07,200 --> 00:10:10,959
there's the east two instance right so

00:10:08,640 --> 00:10:12,240
those those cheese looking things that

00:10:10,959 --> 00:10:14,959
are stacked together

00:10:12,240 --> 00:10:15,519
that that's that icon for amazon ec2 but

00:10:14,959 --> 00:10:18,000
every time

00:10:15,519 --> 00:10:18,560
you spin something up you're paying for

00:10:18,000 --> 00:10:20,240
it right

00:10:18,560 --> 00:10:22,160
and not only that's you're going back to

00:10:20,240 --> 00:10:23,040
this number here well it kept spinning

00:10:22,160 --> 00:10:24,399
up and up

00:10:23,040 --> 00:10:26,640
but there's more things to that

00:10:24,399 --> 00:10:28,000
dimension right not only

00:10:26,640 --> 00:10:30,640
are you paying for the underlying

00:10:28,000 --> 00:10:32,959
hardware or the underlying like compute

00:10:30,640 --> 00:10:35,040
there's no such thing as a free lunch um

00:10:32,959 --> 00:10:35,519
or our free beer lunch beer depending on

00:10:35,040 --> 00:10:36,959
your

00:10:35,519 --> 00:10:38,800
which way you want to swing it in the

00:10:36,959 --> 00:10:39,760
free world up you're a you're paying for

00:10:38,800 --> 00:10:42,000
the control plane

00:10:39,760 --> 00:10:43,760
right so you're paying for the expertise

00:10:42,000 --> 00:10:46,079
that the cloud provider has instilled

00:10:43,760 --> 00:10:48,720
upon you to spin that stuff up

00:10:46,079 --> 00:10:50,000
you're paying for every piece of

00:10:48,720 --> 00:10:52,160
underlying storage and compute

00:10:50,000 --> 00:10:54,640
not only is the compute but you know it

00:10:52,160 --> 00:10:56,640
has to it has to be disk somewhere

00:10:54,640 --> 00:10:58,160
you know there's didn't run the ether so

00:10:56,640 --> 00:11:00,640
paying for paying for storage

00:10:58,160 --> 00:11:01,200
uh also what gets fairly expensive is

00:11:00,640 --> 00:11:03,120
logging

00:11:01,200 --> 00:11:04,800
right so we can go go on and on how we

00:11:03,120 --> 00:11:07,200
actually optimize for logs

00:11:04,800 --> 00:11:08,800
uh but uh logging incurs cost writing

00:11:07,200 --> 00:11:11,519
towards storage and course

00:11:08,800 --> 00:11:13,360
encourage usage of if you're using um

00:11:11,519 --> 00:11:15,600
aws you're playing cloud cloud watch

00:11:13,360 --> 00:11:17,040
cost per number of writes or per tens of

00:11:15,600 --> 00:11:18,480
thousands of number of writes

00:11:17,040 --> 00:11:20,720
you're paying for that networking right

00:11:18,480 --> 00:11:23,600
so did you hit the i o

00:11:20,720 --> 00:11:24,959
between the kubernetes nodes the my nat

00:11:23,600 --> 00:11:27,440
gateway which i

00:11:24,959 --> 00:11:29,680
i literally still don't know why i

00:11:27,440 --> 00:11:31,200
couldn't do it for that for 162 hours

00:11:29,680 --> 00:11:32,720
like you see it's a little salty about

00:11:31,200 --> 00:11:34,240
it um uh but you're paying a data

00:11:32,720 --> 00:11:35,760
transfer and then just pile it on right

00:11:34,240 --> 00:11:36,720
you have other services okay you need to

00:11:35,760 --> 00:11:38,240
do a build

00:11:36,720 --> 00:11:40,399
deploy an application you're paying for

00:11:38,240 --> 00:11:41,040
that you need to have source code stored

00:11:40,399 --> 00:11:42,959
there

00:11:41,040 --> 00:11:44,800
which creates which make what's the

00:11:42,959 --> 00:11:46,399
build makes which deploys

00:11:44,800 --> 00:11:47,920
uh you're paying for all of that and

00:11:46,399 --> 00:11:49,120
this is where the billing complexities

00:11:47,920 --> 00:11:52,240
start to get in

00:11:49,120 --> 00:11:53,760
uh and so uh what are some of the

00:11:52,240 --> 00:11:54,880
challenges of kubernetes right

00:11:53,760 --> 00:11:56,880
and so this is where we start getting

00:11:54,880 --> 00:11:59,519
into like some of the uh

00:11:56,880 --> 00:12:00,880
optimizations on your on your kubernetes

00:11:59,519 --> 00:12:02,000
workloads and you're gonna kubernetes

00:12:00,880 --> 00:12:03,760
workload so

00:12:02,000 --> 00:12:05,360
the crew raise is still a piece of

00:12:03,760 --> 00:12:07,120
infrastructure it still has to be

00:12:05,360 --> 00:12:09,920
maintained um

00:12:07,120 --> 00:12:11,360
going back five or six years ago when my

00:12:09,920 --> 00:12:12,639
team was trying to leverage kubernetes

00:12:11,360 --> 00:12:13,200
for the first time where we're trying it

00:12:12,639 --> 00:12:15,920
out

00:12:13,200 --> 00:12:16,800
there is a sense of this error about hey

00:12:15,920 --> 00:12:18,480
you know what

00:12:16,800 --> 00:12:20,560
just put on the cluster it'll auto scale

00:12:18,480 --> 00:12:22,160
but as we know

00:12:20,560 --> 00:12:23,440
there's theoretical limits or there are

00:12:22,160 --> 00:12:23,839
actually physical limits to that like

00:12:23,440 --> 00:12:25,920
it's not

00:12:23,839 --> 00:12:28,639
infinite like the public cloud right uh

00:12:25,920 --> 00:12:30,480
your cluster resources will be exhausted

00:12:28,639 --> 00:12:32,720
and also operationalizing it it's very

00:12:30,480 --> 00:12:34,399
difficult like it takes several people

00:12:32,720 --> 00:12:36,000
to optimize that right it takes someone

00:12:34,399 --> 00:12:37,519
a platform engineer to say you know what

00:12:36,000 --> 00:12:39,200
the pro the project up until very

00:12:37,519 --> 00:12:40,399
recently was moving extremely fast and

00:12:39,200 --> 00:12:40,880
they've gotten better and more mature

00:12:40,399 --> 00:12:43,279
about

00:12:40,880 --> 00:12:44,560
slowing the release cadence out but uh

00:12:43,279 --> 00:12:46,000
trying to make sure that you're on the

00:12:44,560 --> 00:12:46,800
some version of it how do you maintain

00:12:46,000 --> 00:12:48,560
the platform

00:12:46,800 --> 00:12:50,399
patching it constantly it was a

00:12:48,560 --> 00:12:51,600
challenge and also the maturity curve is

00:12:50,399 --> 00:12:52,800
still building right it's still an

00:12:51,600 --> 00:12:54,079
ongoing

00:12:52,800 --> 00:12:56,160
technology that people are starting to

00:12:54,079 --> 00:12:58,000
adopt it's not like using a

00:12:56,160 --> 00:12:59,760
single linux instance that's you know

00:12:58,000 --> 00:13:00,800
there's people with 20 or 30 years of

00:12:59,760 --> 00:13:02,800
skills

00:13:00,800 --> 00:13:04,880
battle hardened it's the project is you

00:13:02,800 --> 00:13:07,040
know from 2015 right so it's there's

00:13:04,880 --> 00:13:10,079
still a lot of maturity getting built on

00:13:07,040 --> 00:13:11,680
um one question that i i try so i

00:13:10,079 --> 00:13:12,160
recently tried to tackle this question

00:13:11,680 --> 00:13:15,440
like

00:13:12,160 --> 00:13:16,480
hey how much overhead does kubernetes

00:13:15,440 --> 00:13:19,200
take up so

00:13:16,480 --> 00:13:20,880
in this particular example i i just uh

00:13:19,200 --> 00:13:22,800
going wanted to step in

00:13:20,880 --> 00:13:24,480
the machine science that i use for my

00:13:22,800 --> 00:13:27,600
kubernetes workloads typically

00:13:24,480 --> 00:13:29,760
are like four cpu 16 gigs of memory

00:13:27,600 --> 00:13:31,440
and the typical upon the typical

00:13:29,760 --> 00:13:33,600
resource sign when i go and request it

00:13:31,440 --> 00:13:34,800
is i have these eight gigabyte resource

00:13:33,600 --> 00:13:36,639
pods right

00:13:34,800 --> 00:13:38,399
but what and some very interesting

00:13:36,639 --> 00:13:41,519
things that were happening here

00:13:38,399 --> 00:13:41,839
uh was for myself is that well my box

00:13:41,519 --> 00:13:44,079
has

00:13:41,839 --> 00:13:45,680
16 gigs of memory so i should be able to

00:13:44,079 --> 00:13:46,800
put two of those at eight gigs right so

00:13:45,680 --> 00:13:47,920
some of the more experienced people who

00:13:46,800 --> 00:13:49,600
are rolling the rise like

00:13:47,920 --> 00:13:52,399
of course not you know there's there's

00:13:49,600 --> 00:13:54,480
overhead well i forgot that

00:13:52,399 --> 00:13:56,079
so i was only placing one at a time so

00:13:54,480 --> 00:13:58,639
simply simply running uh

00:13:56,079 --> 00:13:59,519
free m free member i can ssh into a

00:13:58,639 --> 00:14:01,199
worker node

00:13:59,519 --> 00:14:03,920
uh you can see that hey you know what

00:14:01,199 --> 00:14:04,560
kubernetes is taking up 350 megabytes of

00:14:03,920 --> 00:14:07,040
overhead

00:14:04,560 --> 00:14:08,320
uh if you're on top um you can see that

00:14:07,040 --> 00:14:09,440
it's taking up about three percent at

00:14:08,320 --> 00:14:11,279
idle so just

00:14:09,440 --> 00:14:13,360
there's overhead too right it's not like

00:14:11,279 --> 00:14:14,560
hey your operating system clearly takes

00:14:13,360 --> 00:14:16,560
overhead when it starts up

00:14:14,560 --> 00:14:18,800
uh so does your container orchestration

00:14:16,560 --> 00:14:22,079
platform it takes up overhead

00:14:18,800 --> 00:14:22,480
uh and so with that rami why don't you

00:14:22,079 --> 00:14:24,240
uh

00:14:22,480 --> 00:14:25,680
what do you kind of explain about

00:14:24,240 --> 00:14:26,639
certain things about kubernetes what you

00:14:25,680 --> 00:14:30,240
can track and what you

00:14:26,639 --> 00:14:31,120
uh what you should be trying thanks

00:14:30,240 --> 00:14:32,639
sorry and uh

00:14:31,120 --> 00:14:35,920
just just to be clear for that hello

00:14:32,639 --> 00:14:38,639
world example it wasn't me either

00:14:35,920 --> 00:14:40,240
so one of the challenges with kubernetes

00:14:38,639 --> 00:14:40,800
is that everything gets amplified right

00:14:40,240 --> 00:14:42,320
so

00:14:40,800 --> 00:14:43,839
the problem can scale and get out of

00:14:42,320 --> 00:14:45,760
hand much faster

00:14:43,839 --> 00:14:47,680
it's like this powerful force multiplier

00:14:45,760 --> 00:14:50,000
and then it's critical to make sure that

00:14:47,680 --> 00:14:51,519
the multiplication is positive so from a

00:14:50,000 --> 00:14:53,279
cost and management perspective it's a

00:14:51,519 --> 00:14:54,320
good idea to monitor kubernetes events

00:14:53,279 --> 00:14:56,240
to closely track

00:14:54,320 --> 00:14:57,760
things like change in replica account

00:14:56,240 --> 00:14:58,639
whether running containers are white

00:14:57,760 --> 00:15:00,079
listed or not

00:14:58,639 --> 00:15:02,399
uh how many parts and nodes are running

00:15:00,079 --> 00:15:04,560
at any given time uh what the utilized

00:15:02,399 --> 00:15:05,920
and idle resources are within a part

00:15:04,560 --> 00:15:08,240
and at a higher level for the node

00:15:05,920 --> 00:15:08,800
capacity what the unallocated resources

00:15:08,240 --> 00:15:10,959
are that

00:15:08,800 --> 00:15:13,360
are not claimed by any parts and of

00:15:10,959 --> 00:15:15,440
course finally uh any anomalies in cost

00:15:13,360 --> 00:15:17,279
and this can be up or down right so it's

00:15:15,440 --> 00:15:18,800
obvious to track cost spikes but cost

00:15:17,279 --> 00:15:22,000
uh cost crashing could be equally

00:15:18,800 --> 00:15:22,000
important to monitor as well

00:15:23,600 --> 00:15:27,680
so what else can you do right another

00:15:26,079 --> 00:15:29,279
thing that can be really impactful is to

00:15:27,680 --> 00:15:30,959
orchestrate the pods and nodes both

00:15:29,279 --> 00:15:32,560
vertically and horizontally based on

00:15:30,959 --> 00:15:34,560
various metrics of usage

00:15:32,560 --> 00:15:35,920
so uh scaling the count of parts in the

00:15:34,560 --> 00:15:37,600
node and the count

00:15:35,920 --> 00:15:39,120
and the count of nodes themselves uh

00:15:37,600 --> 00:15:40,000
scaling them up or down as required is

00:15:39,120 --> 00:15:42,560
an effective way to

00:15:40,000 --> 00:15:44,079
save uh wasted resources right sizing

00:15:42,560 --> 00:15:45,120
the node to make sure it isn't too big

00:15:44,079 --> 00:15:47,120
or too small

00:15:45,120 --> 00:15:48,240
balances the cost and performance and

00:15:47,120 --> 00:15:50,800
that's another helpful

00:15:48,240 --> 00:15:52,399
collection to make similarly for pods

00:15:50,800 --> 00:15:54,320
making sure that the right request value

00:15:52,399 --> 00:15:55,199
is set based on historical resource

00:15:54,320 --> 00:15:57,199
utilization

00:15:55,199 --> 00:15:58,800
and current usage patterns that's an

00:15:57,199 --> 00:16:00,160
important

00:15:58,800 --> 00:16:02,959
that's an important balance to strike

00:16:00,160 --> 00:16:04,560
again now running nodes on cloud excess

00:16:02,959 --> 00:16:06,560
capacity is another great way to save

00:16:04,560 --> 00:16:08,320
significantly on the compute costs

00:16:06,560 --> 00:16:10,399
of those machines basically spot

00:16:08,320 --> 00:16:12,160
instances on aws on azure

00:16:10,399 --> 00:16:14,240
and they're called preemptive vms uh

00:16:12,160 --> 00:16:15,519
preemptable vms on gcp

00:16:14,240 --> 00:16:17,519
so think about this right so these are

00:16:15,519 --> 00:16:18,240
spot instances with the very same

00:16:17,519 --> 00:16:20,800
performance

00:16:18,240 --> 00:16:22,000
and they come at 70 to 90 cheaper costs

00:16:20,800 --> 00:16:23,600
than on-demand machines

00:16:22,000 --> 00:16:25,519
now the primary challenge of course is

00:16:23,600 --> 00:16:26,880
the lack of availability guarantees

00:16:25,519 --> 00:16:28,560
meaning that the cloud provider can take

00:16:26,880 --> 00:16:30,639
away that instance at any time

00:16:28,560 --> 00:16:32,240
but if you have mechanisms in place to

00:16:30,639 --> 00:16:32,720
handle spot interruptions seamlessly

00:16:32,240 --> 00:16:35,839
enough

00:16:32,720 --> 00:16:37,839
the cost savings can be huge and finally

00:16:35,839 --> 00:16:39,279
we have uh forecasting of spends uh

00:16:37,839 --> 00:16:41,600
based on historical usage

00:16:39,279 --> 00:16:42,959
now this is always important from a cost

00:16:41,600 --> 00:16:44,720
governance standpoint to make sure that

00:16:42,959 --> 00:16:45,519
we're not exceeding what's been budgeted

00:16:44,720 --> 00:16:47,120
already

00:16:45,519 --> 00:16:48,560
right so i know there's a lot of work

00:16:47,120 --> 00:16:48,880
packed into three little bullet points

00:16:48,560 --> 00:16:51,120
but

00:16:48,880 --> 00:16:53,920
the payoff can be well worth it uh well

00:16:51,120 --> 00:16:53,920
worth the effort here

00:16:57,199 --> 00:17:02,240
so so i'll go ahead right

00:17:00,240 --> 00:17:04,000
yeah so um i was just saying so let's

00:17:02,240 --> 00:17:06,480
look at some of the common challenges

00:17:04,000 --> 00:17:07,520
around uh club cost management overall

00:17:06,480 --> 00:17:10,640
even outside of

00:17:07,520 --> 00:17:10,640
just the kubernetes world

00:17:11,760 --> 00:17:14,799
so maybe not for other things in life

00:17:13,120 --> 00:17:17,600
but certainly for your cloud bills

00:17:14,799 --> 00:17:18,959
less is less and lesser the better right

00:17:17,600 --> 00:17:20,720
so what are some of the common common

00:17:18,959 --> 00:17:23,039
challenges we may come across

00:17:20,720 --> 00:17:25,520
now firstly vendor lock-in with cloud

00:17:23,039 --> 00:17:27,760
providers can prove very costly at scale

00:17:25,520 --> 00:17:29,600
now by design is extremely easy to

00:17:27,760 --> 00:17:32,000
provision and migrate resources

00:17:29,600 --> 00:17:32,720
into a cloud provider but complicated

00:17:32,000 --> 00:17:34,960
and often

00:17:32,720 --> 00:17:36,559
prohibitively expensive to migrate out

00:17:34,960 --> 00:17:38,400
right so when the lock-in is when you're

00:17:36,559 --> 00:17:38,960
essentially forced to continue using a

00:17:38,400 --> 00:17:41,280
pro

00:17:38,960 --> 00:17:42,400
cloud provider because switching away is

00:17:41,280 --> 00:17:43,840
just not practical

00:17:42,400 --> 00:17:45,520
so it's a good idea to consider a

00:17:43,840 --> 00:17:46,000
multi-cloud strategy to make your apps

00:17:45,520 --> 00:17:49,440
portable

00:17:46,000 --> 00:17:51,039
and so on and then next you may have

00:17:49,440 --> 00:17:52,480
over-provisioned or under-provisioned

00:17:51,039 --> 00:17:53,360
resources that are either costing you

00:17:52,480 --> 00:17:54,799
more than they should

00:17:53,360 --> 00:17:57,039
or not giving you the performance that

00:17:54,799 --> 00:17:59,200
you need and then we have

00:17:57,039 --> 00:18:00,640
idle and often resources which could be

00:17:59,200 --> 00:18:02,640
adding to your monthly costs when really

00:18:00,640 --> 00:18:05,039
they are candidates for terminating

00:18:02,640 --> 00:18:06,480
for example in aws this could be ebs

00:18:05,039 --> 00:18:08,640
volumes that are unattached

00:18:06,480 --> 00:18:10,160
snapshots that are old and unused it

00:18:08,640 --> 00:18:12,160
could be load balancers or target

00:18:10,160 --> 00:18:14,240
clusters that nobody is using and so on

00:18:12,160 --> 00:18:15,360
now in fact we just witnessed an example

00:18:14,240 --> 00:18:17,520
recently where there was a

00:18:15,360 --> 00:18:18,480
non-production aws account with a ton of

00:18:17,520 --> 00:18:21,440
resources so

00:18:18,480 --> 00:18:22,799
load balancer zks target clusters etc um

00:18:21,440 --> 00:18:24,960
so these are provision no

00:18:22,799 --> 00:18:26,080
no one knew when or why and a simple

00:18:24,960 --> 00:18:27,919
cleanup ended up

00:18:26,080 --> 00:18:29,280
bringing down the bill for that entire

00:18:27,919 --> 00:18:31,280
account by 40

00:18:29,280 --> 00:18:33,280
right can you believe that and uh no so

00:18:31,280 --> 00:18:34,880
that might be a high number but this is

00:18:33,280 --> 00:18:36,480
surely a simple and worthwhile exercise

00:18:34,880 --> 00:18:37,679
for any savings number that's greater

00:18:36,480 --> 00:18:40,000
than zero

00:18:37,679 --> 00:18:41,520
um and next up we have uh given the huge

00:18:40,000 --> 00:18:43,120
number of options making the right

00:18:41,520 --> 00:18:45,280
choices can also be a challenge

00:18:43,120 --> 00:18:47,360
so this could be picking between

00:18:45,280 --> 00:18:49,840
reserved instances savings plans

00:18:47,360 --> 00:18:50,559
or spot instances for vms that you're

00:18:49,840 --> 00:18:51,919
running

00:18:50,559 --> 00:18:53,679
it could be choosing the right tier from

00:18:51,919 --> 00:18:56,160
multiple available options for sd

00:18:53,679 --> 00:18:57,919
buckets cbs volumes etc

00:18:56,160 --> 00:18:59,200
and then you have the somewhat extreme

00:18:57,919 --> 00:19:01,039
complexity in the cloud provider

00:18:59,200 --> 00:19:02,960
building that ravi just touched upon

00:19:01,039 --> 00:19:04,320
um you know first you have multiple

00:19:02,960 --> 00:19:06,400
services from each and every cloud

00:19:04,320 --> 00:19:08,240
provider just aws has over 200

00:19:06,400 --> 00:19:10,160
right and many of them have their own

00:19:08,240 --> 00:19:10,799
pricing models so it's a lot to keep

00:19:10,160 --> 00:19:12,559
track of

00:19:10,799 --> 00:19:14,160
and as we know complexity leads to

00:19:12,559 --> 00:19:15,919
inefficiency so

00:19:14,160 --> 00:19:18,000
um and lastly we have the challenges

00:19:15,919 --> 00:19:19,760
around how we accurately forecast spends

00:19:18,000 --> 00:19:20,799
based on historical usage patterns and

00:19:19,760 --> 00:19:22,960
current usage

00:19:20,799 --> 00:19:25,840
and how we can correlate them to our

00:19:22,960 --> 00:19:25,840
defined budgets

00:19:27,919 --> 00:19:30,960
so what are some of these cloud cost

00:19:29,760 --> 00:19:32,480
management patterns so

00:19:30,960 --> 00:19:34,000
given all the complexity and all the

00:19:32,480 --> 00:19:36,480
spend that we could have

00:19:34,000 --> 00:19:38,000
also as engineers were not i was we're

00:19:36,480 --> 00:19:40,080
natural optimizers right so

00:19:38,000 --> 00:19:41,440
it's not not only are you saving money

00:19:40,080 --> 00:19:43,039
but potentially you're allowed to have

00:19:41,440 --> 00:19:44,400
more density too right so

00:19:43,039 --> 00:19:46,799
it might not boil down to me like you

00:19:44,400 --> 00:19:48,240
know what i'm saving number of instances

00:19:46,799 --> 00:19:49,520
but i'm able to maybe bin pack a little

00:19:48,240 --> 00:19:50,880
bit more but robbie

00:19:49,520 --> 00:19:52,400
why don't you take it away about some

00:19:50,880 --> 00:19:53,679
common patterns to fight the ever

00:19:52,400 --> 00:19:57,440
creeping cost and

00:19:53,679 --> 00:19:57,440
uh mal utilization

00:19:57,679 --> 00:20:01,919
absolutely so we can actually we can

00:20:00,000 --> 00:20:02,400
think of cloud cost management under

00:20:01,919 --> 00:20:04,320
three

00:20:02,400 --> 00:20:06,400
uh interconnected pillars so to speak

00:20:04,320 --> 00:20:07,600
right so first we have cost visibility

00:20:06,400 --> 00:20:09,360
or cost transparency

00:20:07,600 --> 00:20:10,880
then we have cost optimization and then

00:20:09,360 --> 00:20:12,240
we have cost governance

00:20:10,880 --> 00:20:13,760
as they say you can't improve something

00:20:12,240 --> 00:20:15,679
that you aren't measuring so it really

00:20:13,760 --> 00:20:17,440
starts with overall accurate visibility

00:20:15,679 --> 00:20:18,000
of what services and resources are being

00:20:17,440 --> 00:20:19,520
used

00:20:18,000 --> 00:20:21,760
who's using them what are they using

00:20:19,520 --> 00:20:22,960
them for um are there any resources that

00:20:21,760 --> 00:20:24,799
aren't attributed at all

00:20:22,960 --> 00:20:26,080
are there any that are idle or unused

00:20:24,799 --> 00:20:27,600
and so on um

00:20:26,080 --> 00:20:29,120
also to have cost visibility into the

00:20:27,600 --> 00:20:30,480
applications services and

00:20:29,120 --> 00:20:33,120
environment so the provisions through

00:20:30,480 --> 00:20:34,799
the cicd pipelines that are being used

00:20:33,120 --> 00:20:36,720
and then on the optimization pillar we

00:20:34,799 --> 00:20:38,320
have right sizing basically making sure

00:20:36,720 --> 00:20:39,200
resources are only as large as they need

00:20:38,320 --> 00:20:41,120
to be

00:20:39,200 --> 00:20:43,200
we have committed use discounts again ri

00:20:41,120 --> 00:20:45,200
savings plans uh evaluating spot

00:20:43,200 --> 00:20:47,440
instances for high availability clusters

00:20:45,200 --> 00:20:49,360
fault tolerance and stateless workloads

00:20:47,440 --> 00:20:51,120
and then elasticity in terms of scaling

00:20:49,360 --> 00:20:52,960
the count of resources up or down based

00:20:51,120 --> 00:20:54,000
on various usage metrics

00:20:52,960 --> 00:20:56,000
and then on the cost inventory

00:20:54,000 --> 00:20:56,960
management or asset management side as

00:20:56,000 --> 00:20:59,200
they call them for

00:20:56,960 --> 00:21:01,280
ec2 or vms in general across club

00:20:59,200 --> 00:21:02,880
providers it could be sd buckets cbs

00:21:01,280 --> 00:21:05,679
volumes and snapshots

00:21:02,880 --> 00:21:06,960
elastic ip addresses redshift clusters

00:21:05,679 --> 00:21:08,720
making sure that all of these

00:21:06,960 --> 00:21:10,159
are that there aren't any unallocated

00:21:08,720 --> 00:21:11,919
assets amongst all of these

00:21:10,159 --> 00:21:13,600
and then business mapping of these

00:21:11,919 --> 00:21:14,400
resources across organizational

00:21:13,600 --> 00:21:16,000
hierarchy

00:21:14,400 --> 00:21:17,600
which could be for the entire company it

00:21:16,000 --> 00:21:20,080
could be for business units teams

00:21:17,600 --> 00:21:22,000
applications and even team members

00:21:20,080 --> 00:21:23,760
right and finally the last pillar that

00:21:22,000 --> 00:21:25,360
we have is cost governance

00:21:23,760 --> 00:21:26,880
essentially setting periodic budgets

00:21:25,360 --> 00:21:27,679
which would be monthly quarterly and

00:21:26,880 --> 00:21:29,840
yearly

00:21:27,679 --> 00:21:32,880
and having accurate forecasts of spend

00:21:29,840 --> 00:21:32,880
against the set budgets

00:21:35,200 --> 00:21:38,720
yeah so we did talk about cloud access

00:21:37,120 --> 00:21:39,520
capacity spot instances a little bit

00:21:38,720 --> 00:21:41,840
earlier on

00:21:39,520 --> 00:21:43,360
uh but it may be useful uh it may be

00:21:41,840 --> 00:21:45,039
useful context to spend a minute on

00:21:43,360 --> 00:21:46,400
where exactly this cloud excess capacity

00:21:45,039 --> 00:21:48,080
is coming from right

00:21:46,400 --> 00:21:50,320
so the fundamental promise of public

00:21:48,080 --> 00:21:51,600
clouds are when we need more resources

00:21:50,320 --> 00:21:53,840
to service our usage

00:21:51,600 --> 00:21:55,520
we will be provided said resources right

00:21:53,840 --> 00:21:57,360
now in order to fulfill that promise

00:21:55,520 --> 00:21:58,400
club providers need to maintain excess

00:21:57,360 --> 00:22:00,080
capacity

00:21:58,400 --> 00:22:01,679
and until this excess capacity is

00:22:00,080 --> 00:22:04,080
requested it's idle

00:22:01,679 --> 00:22:05,919
and unmonetized so to monetize this

00:22:04,080 --> 00:22:07,440
otherwise idle excess capacity

00:22:05,919 --> 00:22:09,120
cloud providers give us the ability to

00:22:07,440 --> 00:22:11,520
spin up these spot instances

00:22:09,120 --> 00:22:13,200
at up to 90 cheaper rates with the

00:22:11,520 --> 00:22:14,880
caveat of course that they reserve the

00:22:13,200 --> 00:22:16,720
right to take away that machine from you

00:22:14,880 --> 00:22:18,799
with a short notice and that's usually

00:22:16,720 --> 00:22:20,159
under two minutes right so because

00:22:18,799 --> 00:22:22,240
you're getting the same performance with

00:22:20,159 --> 00:22:23,840
these spot instances at deep discounts

00:22:22,240 --> 00:22:25,039
if they are a fit for your workload

00:22:23,840 --> 00:22:26,080
meaning that if you have a high

00:22:25,039 --> 00:22:27,840
availability cluster

00:22:26,080 --> 00:22:29,760
if they fault over into the stateless

00:22:27,840 --> 00:22:32,000
and so on and if you have a strategy in

00:22:29,760 --> 00:22:33,679
place to gracefully handle interruptions

00:22:32,000 --> 00:22:36,159
then the cost saving benefits really are

00:22:33,679 --> 00:22:36,159
incredible

00:22:39,039 --> 00:22:42,960
so uh here's a probably tweet from a few

00:22:41,760 --> 00:22:44,960
years ago which leads

00:22:42,960 --> 00:22:46,880
aws isn't about pay for what you use but

00:22:44,960 --> 00:22:48,720
paying for what you forgot to turn off

00:22:46,880 --> 00:22:50,960
right and it's true for any public cloud

00:22:48,720 --> 00:22:52,559
really so and this is one of the biggest

00:22:50,960 --> 00:22:53,919
challenges for non-production resources

00:22:52,559 --> 00:22:56,240
and there's no surprises why it

00:22:53,919 --> 00:22:57,760
resonated with so many people out there

00:22:56,240 --> 00:22:59,840
so let's look at this in in some more

00:22:57,760 --> 00:23:01,679
detail

00:22:59,840 --> 00:23:03,600
so we know that this is a problem but

00:23:01,679 --> 00:23:05,280
how big is the problem

00:23:03,600 --> 00:23:06,799
now we're talking about non-production

00:23:05,280 --> 00:23:09,679
resources here right which could be

00:23:06,799 --> 00:23:10,799
qa staging development demo r d machines

00:23:09,679 --> 00:23:12,240
essentially everything that doesn't

00:23:10,799 --> 00:23:14,559
service live traffic

00:23:12,240 --> 00:23:16,000
so unlike production environments um you

00:23:14,559 --> 00:23:18,000
know these are used by developer teams

00:23:16,000 --> 00:23:18,640
for maybe four five six hours in a given

00:23:18,000 --> 00:23:20,480
workday

00:23:18,640 --> 00:23:21,679
so you have many idle windows even

00:23:20,480 --> 00:23:23,520
during work hours

00:23:21,679 --> 00:23:24,960
and of course non-working hours weekends

00:23:23,520 --> 00:23:26,320
company holidays these environments are

00:23:24,960 --> 00:23:27,919
completely unutilized

00:23:26,320 --> 00:23:29,440
so if you compare the four to six hours

00:23:27,919 --> 00:23:31,120
of actual uses

00:23:29,440 --> 00:23:32,480
usage versus the full seven twenty

00:23:31,120 --> 00:23:33,919
thousand calendar month

00:23:32,480 --> 00:23:35,600
that's seventy to seventy five percent

00:23:33,919 --> 00:23:36,799
of the month that are actually idle but

00:23:35,600 --> 00:23:38,320
you're still being charged by the cloud

00:23:36,799 --> 00:23:40,080
provider

00:23:38,320 --> 00:23:41,440
so how about using a static resource

00:23:40,080 --> 00:23:42,720
scheduler that forcefully shuts down

00:23:41,440 --> 00:23:44,799
these environments maybe

00:23:42,720 --> 00:23:45,760
you know maybe after working hours and

00:23:44,799 --> 00:23:47,440
then brings them up

00:23:45,760 --> 00:23:49,120
back up again at a fixed time every

00:23:47,440 --> 00:23:50,720
morning well

00:23:49,120 --> 00:23:52,240
firstly there's no way to statically

00:23:50,720 --> 00:23:53,120
predict idle times that occur within

00:23:52,240 --> 00:23:54,480
working hours

00:23:53,120 --> 00:23:55,840
you know when your developer teams are

00:23:54,480 --> 00:23:57,679
maybe in meetings they're on lunch

00:23:55,840 --> 00:23:58,880
breaks or working on other things

00:23:57,679 --> 00:24:00,559
and then let's say the scheduler

00:23:58,880 --> 00:24:02,240
forcefully shuts down everything at 8 pm

00:24:00,559 --> 00:24:03,039
now there's no way to access these stock

00:24:02,240 --> 00:24:05,840
machines

00:24:03,039 --> 00:24:07,440
even if you needed to right but using

00:24:05,840 --> 00:24:08,880
native cloud product offerings such as

00:24:07,440 --> 00:24:10,640
load balancers and cloud

00:24:08,880 --> 00:24:12,400
cloud watch metrics to detect real-time

00:24:10,640 --> 00:24:12,960
traffic and usage and performing

00:24:12,400 --> 00:24:14,880
shutdown

00:24:12,960 --> 00:24:16,159
or terminate actions automatically when

00:24:14,880 --> 00:24:17,840
resources are idle

00:24:16,159 --> 00:24:19,279
that's a great way to avoid potentially

00:24:17,840 --> 00:24:21,600
massive wasted spending

00:24:19,279 --> 00:24:23,440
so just imagine for all of the resources

00:24:21,600 --> 00:24:25,360
in use by all of us in this room today

00:24:23,440 --> 00:24:27,600
uh while we're here together in this

00:24:25,360 --> 00:24:29,120
webinar uh if there was a way for all of

00:24:27,600 --> 00:24:29,760
our environments to get shut down and

00:24:29,120 --> 00:24:31,360
only be

00:24:29,760 --> 00:24:33,200
brought back up again when we needed

00:24:31,360 --> 00:24:34,080
them next i mean that's almost like

00:24:33,200 --> 00:24:36,240
magic right

00:24:34,080 --> 00:24:38,320
and um you know if you find a way also

00:24:36,240 --> 00:24:41,200
to run these resources on spot instances

00:24:38,320 --> 00:24:43,279
now you're now you're a pro that's so

00:24:41,200 --> 00:24:44,880
funny just like a personal corp like

00:24:43,279 --> 00:24:46,559
probably half of my career it's been

00:24:44,880 --> 00:24:47,679
like an elastic infrastructure and half

00:24:46,559 --> 00:24:50,000
of my career has been

00:24:47,679 --> 00:24:51,840
not elastic infrastructure and what ravi

00:24:50,000 --> 00:24:52,400
said they're turning turning on is hard

00:24:51,840 --> 00:24:54,799
so i

00:24:52,400 --> 00:24:57,440
i used to share a script i used to work

00:24:54,799 --> 00:24:59,760
for an investment bank and so like

00:24:57,440 --> 00:25:01,200
we would constantly bicker over like

00:24:59,760 --> 00:25:02,559
we've deployed a websphere like

00:25:01,200 --> 00:25:04,080
constantly breaker over like hey

00:25:02,559 --> 00:25:05,679
do you need that node you need that

00:25:04,080 --> 00:25:07,120
underlying vm that's powering your

00:25:05,679 --> 00:25:08,720
application so i used to write scripts

00:25:07,120 --> 00:25:10,159
that go and touch folders

00:25:08,720 --> 00:25:11,919
in each one of my non-production

00:25:10,159 --> 00:25:13,520
environments throughout the day so

00:25:11,919 --> 00:25:15,039
the monitoring that the bank had would

00:25:13,520 --> 00:25:15,520
say oh yeah it's someone's accidents

00:25:15,039 --> 00:25:17,120
again

00:25:15,520 --> 00:25:18,720
because it wasn't turning it off as hard

00:25:17,120 --> 00:25:20,880
it was respinding it back up

00:25:18,720 --> 00:25:22,480
and i you know even with all the cloud

00:25:20,880 --> 00:25:23,039
native stuff or elastic infrastructure

00:25:22,480 --> 00:25:25,039
even like

00:25:23,039 --> 00:25:27,039
leveraging like or an operator like

00:25:25,039 --> 00:25:29,520
mesos or like kubernetes itself

00:25:27,039 --> 00:25:30,640
um i still haven't shaken that right

00:25:29,520 --> 00:25:32,159
like i still like oh

00:25:30,640 --> 00:25:34,960
if it goes away it's not going to be

00:25:32,159 --> 00:25:36,640
there but really this is so true like

00:25:34,960 --> 00:25:39,039
for turning it back on it's like super

00:25:36,640 --> 00:25:39,039
hard man

00:25:39,919 --> 00:25:43,360
so so with that oh actually my turn to

00:25:41,440 --> 00:25:46,720
talk about so um

00:25:43,360 --> 00:25:50,400
with all of the wisdom uh that uh

00:25:46,720 --> 00:25:53,600
ravi has disposed upon us uh it's that

00:25:50,400 --> 00:25:56,559
there's also this concept called finnops

00:25:53,600 --> 00:25:58,240
right and so what is finnops it sounds a

00:25:56,559 --> 00:26:00,000
lot like devops or one of those

00:25:58,240 --> 00:26:01,840
monikers like something op stuff

00:26:00,000 --> 00:26:04,559
psychops spinops

00:26:01,840 --> 00:26:05,760
um but what is actually is phenoms right

00:26:04,559 --> 00:26:09,120
so there there is

00:26:05,760 --> 00:26:11,279
uh a a movement behind

00:26:09,120 --> 00:26:13,039
a particular how to optimize clouds you

00:26:11,279 --> 00:26:15,120
should try to open mine's classified

00:26:13,039 --> 00:26:16,320
but similar to any sort of let's say

00:26:15,120 --> 00:26:18,960
paradigm shift

00:26:16,320 --> 00:26:20,720
it's it's more than just a set of

00:26:18,960 --> 00:26:22,400
practices right it's a culture

00:26:20,720 --> 00:26:24,799
right it's a governance structure it's a

00:26:22,400 --> 00:26:28,159
team um it's similar to devops if

00:26:24,799 --> 00:26:29,840
you ask any devops pundit um it can't

00:26:28,159 --> 00:26:32,159
can you hire one dev ops engineer and

00:26:29,840 --> 00:26:33,760
you have devops no devops is a culture

00:26:32,159 --> 00:26:35,360
right like you don't just get to check

00:26:33,760 --> 00:26:36,400
the box that you have devops you don't

00:26:35,360 --> 00:26:38,400
check the box

00:26:36,400 --> 00:26:40,159
uh that you have been ops it really

00:26:38,400 --> 00:26:40,799
takes multiple stakeholders right and

00:26:40,159 --> 00:26:42,159
and

00:26:40,799 --> 00:26:43,520
kind of like my definition i got a

00:26:42,159 --> 00:26:44,559
little bit ahead of myself like you know

00:26:43,520 --> 00:26:47,120
finnops is

00:26:44,559 --> 00:26:48,480
uh really the devops of finance right

00:26:47,120 --> 00:26:51,919
which is interesting

00:26:48,480 --> 00:26:52,960
um it's it's helping multiple

00:26:51,919 --> 00:26:55,520
stakeholders from

00:26:52,960 --> 00:26:56,960
the financial teams to the operations

00:26:55,520 --> 00:26:58,159
teams to the engineering teams

00:26:56,960 --> 00:27:00,480
development teams

00:26:58,159 --> 00:27:01,440
and this particular pinwheel or life

00:27:00,480 --> 00:27:04,080
cycle

00:27:01,440 --> 00:27:05,200
really looks a lot like agile right

00:27:04,080 --> 00:27:07,440
you're able to

00:27:05,200 --> 00:27:09,440
uh coding ravi again you can't you can't

00:27:07,440 --> 00:27:10,320
optimize what you can't measure right so

00:27:09,440 --> 00:27:11,360
you get

00:27:10,320 --> 00:27:14,480
making sure that you're getting the

00:27:11,360 --> 00:27:16,000
right metrics to to inform

00:27:14,480 --> 00:27:17,760
and like like i said before like as

00:27:16,000 --> 00:27:19,360
engineers uh we're not

00:27:17,760 --> 00:27:20,640
natural optimizers right we wouldn't be

00:27:19,360 --> 00:27:23,039
doing what we do if we didn't like to

00:27:20,640 --> 00:27:24,960
optimize things and so

00:27:23,039 --> 00:27:26,880
making decisions informed decisions on

00:27:24,960 --> 00:27:27,679
the data or metrics or usages that we

00:27:26,880 --> 00:27:29,360
have

00:27:27,679 --> 00:27:31,279
and then really getting that back into

00:27:29,360 --> 00:27:33,919
okay we can fine-tune it you know what

00:27:31,279 --> 00:27:35,520
like what i learned like hey there's

00:27:33,919 --> 00:27:37,200
workloads are not being placed in these

00:27:35,520 --> 00:27:38,880
particular nodes because

00:27:37,200 --> 00:27:41,120
there's overhead i need to you know i

00:27:38,880 --> 00:27:42,960
want to have density of two pods

00:27:41,120 --> 00:27:44,399
per per worker node i need to change

00:27:42,960 --> 00:27:46,640
something i need to scale back

00:27:44,399 --> 00:27:48,720
the resource limits of the pod or i need

00:27:46,640 --> 00:27:50,799
to figure it out to get a bigger box

00:27:48,720 --> 00:27:52,240
right so there's just not push and pull

00:27:50,799 --> 00:27:53,919
and then making sure that we were able

00:27:52,240 --> 00:27:57,679
to implement that and then also

00:27:53,919 --> 00:27:58,240
making sure uh the adjustments that we

00:27:57,679 --> 00:28:00,640
made

00:27:58,240 --> 00:28:01,360
are are prudent right so if you want to

00:28:00,640 --> 00:28:05,279
learn more

00:28:01,360 --> 00:28:07,919
about phenops you can head to finops.org

00:28:05,279 --> 00:28:09,120
uh as far as we're a member firm of the

00:28:07,919 --> 00:28:10,399
phenops organization

00:28:09,120 --> 00:28:12,559
also a member firm of the wedding

00:28:10,399 --> 00:28:14,080
foundation uh this is a sub foundation

00:28:12,559 --> 00:28:15,679
of the reliance foundation

00:28:14,080 --> 00:28:17,520
there's lots of resources no matter

00:28:15,679 --> 00:28:19,679
where you are from a system engineer

00:28:17,520 --> 00:28:21,520
uh to a financial analyst and anybody in

00:28:19,679 --> 00:28:24,159
between or above and below

00:28:21,520 --> 00:28:26,240
uh there's lots to learn uh at the

00:28:24,159 --> 00:28:27,440
finnops foundation like funny personal

00:28:26,240 --> 00:28:28,960
corp you know if taking

00:28:27,440 --> 00:28:31,520
my career back years and years and years

00:28:28,960 --> 00:28:33,279
ago i used to butt head with the system

00:28:31,520 --> 00:28:35,440
engineers i know there's probably a lot

00:28:33,279 --> 00:28:37,279
on this call but as an application

00:28:35,440 --> 00:28:40,240
engineer an application developer

00:28:37,279 --> 00:28:42,080
my greatest nemesis uh was you know i

00:28:40,240 --> 00:28:43,360
used to drop ip tables all the time

00:28:42,080 --> 00:28:45,279
i'm sure some people will be rolling

00:28:43,360 --> 00:28:46,960
around like don't do that but i didn't

00:28:45,279 --> 00:28:49,279
know how my application communicated

00:28:46,960 --> 00:28:51,120
sad story but as years went on you know

00:28:49,279 --> 00:28:52,159
devops brought us closer together were

00:28:51,120 --> 00:28:55,440
you know kind of like have the same

00:28:52,159 --> 00:28:58,159
goals uh currently or up until recently

00:28:55,440 --> 00:29:00,480
ravi do you want to guess who my nemesis

00:28:58,159 --> 00:29:03,679
is that's a manager now

00:29:00,480 --> 00:29:04,960
it's fine it's finance right like never

00:29:03,679 --> 00:29:06,159
says a switch from the operations team

00:29:04,960 --> 00:29:08,720
as a leader now the firm

00:29:06,159 --> 00:29:10,240
uh it's i have these bills i need to pay

00:29:08,720 --> 00:29:11,760
and i have a budget i have to set you

00:29:10,240 --> 00:29:13,039
know for the rest of my team too like

00:29:11,760 --> 00:29:13,760
hey i have forecasts or you know

00:29:13,039 --> 00:29:15,520
baseball

00:29:13,760 --> 00:29:17,279
is going to be x number ten thousand

00:29:15,520 --> 00:29:19,760
dollars um

00:29:17,279 --> 00:29:21,520
my nemesis is uh the finance right but

00:29:19,760 --> 00:29:23,120
it's hard to say but with finnops

00:29:21,520 --> 00:29:25,200
the same silos that have been brought

00:29:23,120 --> 00:29:28,399
down with devops is coming down

00:29:25,200 --> 00:29:29,279
uh with with uh in finance and

00:29:28,399 --> 00:29:31,200
organization

00:29:29,279 --> 00:29:32,399
uh so with that you know i think this is

00:29:31,200 --> 00:29:34,480
the end of like the

00:29:32,399 --> 00:29:36,159
our you know speaking to folks part of

00:29:34,480 --> 00:29:38,000
the presentation love to get questions

00:29:36,159 --> 00:29:39,760
um if you want to copy the slides or

00:29:38,000 --> 00:29:41,200
just learn more about how we interact

00:29:39,760 --> 00:29:42,159
with fin-ops or you know stuff that

00:29:41,200 --> 00:29:43,760
we're doing at harness

00:29:42,159 --> 00:29:45,600
give it a scan give this bitly here a

00:29:43,760 --> 00:29:47,200
scan i'll take you to a site

00:29:45,600 --> 00:29:49,120
you can grab a copy of the slides if you

00:29:47,200 --> 00:29:50,399
want or sign up for

00:29:49,120 --> 00:29:52,880
certain things that we haven't harnessed

00:29:50,399 --> 00:29:55,039
but i will stop sharing there

00:29:52,880 --> 00:29:56,000
and we can take a or actually i'll keep

00:29:55,039 --> 00:29:58,720
this up

00:29:56,000 --> 00:29:59,600
if anybody wants to take a look uh and

00:29:58,720 --> 00:30:00,720
we can

00:29:59,600 --> 00:30:08,399
answer any short questions that came

00:30:00,720 --> 00:30:11,120
across so

00:30:08,399 --> 00:30:13,120
yeah and for and for the audience um

00:30:11,120 --> 00:30:15,200
feel free to ask any questions you want

00:30:13,120 --> 00:30:16,799
uh in the q a section love love to hear

00:30:15,200 --> 00:30:19,520
from you love to just chat

00:30:16,799 --> 00:30:23,840
so robbie and i are here uh to help

00:30:19,520 --> 00:30:23,840
answer any sort of questions

00:30:36,159 --> 00:30:39,360
it doesn't have to be technology related

00:30:37,520 --> 00:30:41,440
to it could be about the meaning of life

00:30:39,360 --> 00:30:50,559
i think it's 42 is what the computer

00:30:41,440 --> 00:30:53,039
came back with

00:30:50,559 --> 00:30:54,559
ah okay so here's the question how to

00:30:53,039 --> 00:30:56,640
take

00:30:54,559 --> 00:30:58,720
uh how so i guess i think it's like how

00:30:56,640 --> 00:31:00,000
to start your career in kubernetes or

00:30:58,720 --> 00:31:00,880
how to take your career to which

00:31:00,000 --> 00:31:03,120
kubernetes

00:31:00,880 --> 00:31:04,240
um i can answer that one robbie if you

00:31:03,120 --> 00:31:06,000
wouldn't mind so

00:31:04,240 --> 00:31:08,720
uh no i'm just gonna go for it there's

00:31:06,000 --> 00:31:10,240
lots of ways like any any sort of

00:31:08,720 --> 00:31:11,679
like any sort of technology there's a

00:31:10,240 --> 00:31:12,240
lot of resources you're at the right

00:31:11,679 --> 00:31:15,120
spot

00:31:12,240 --> 00:31:16,720
uh the atlantic foundation right so um

00:31:15,120 --> 00:31:18,320
as as the custodian

00:31:16,720 --> 00:31:20,000
of many of these projects uh there's

00:31:18,320 --> 00:31:21,760
lots of ways if you've never

00:31:20,000 --> 00:31:23,200
used kubernetes before this is kind of

00:31:21,760 --> 00:31:24,720
like off topic for the webinar now

00:31:23,200 --> 00:31:28,159
because i have to go through journey

00:31:24,720 --> 00:31:30,880
um maybe maybe if you have uh access to

00:31:28,159 --> 00:31:32,159
a windows machine or linux instance uh

00:31:30,880 --> 00:31:34,720
there's a project called

00:31:32,159 --> 00:31:35,760
mini cube so it installs the windows

00:31:34,720 --> 00:31:38,159
with uh

00:31:35,760 --> 00:31:39,279
powershell access now so but anyhow i

00:31:38,159 --> 00:31:40,159
would take a look at something called

00:31:39,279 --> 00:31:41,440
mini cube

00:31:40,159 --> 00:31:44,240
and then just running through some very

00:31:41,440 --> 00:31:45,760
quick uh manifest applications so

00:31:44,240 --> 00:31:46,880
kubernetes works in this console like at

00:31:45,760 --> 00:31:48,720
the very simple level

00:31:46,880 --> 00:31:51,200
it's a declarative system but what that

00:31:48,720 --> 00:31:52,720
means is that you offer a manifest it's

00:31:51,200 --> 00:31:53,919
in the ammo you say hey you know what i

00:31:52,720 --> 00:31:56,799
want this image

00:31:53,919 --> 00:31:58,640
to be accessible at this port and i

00:31:56,799 --> 00:31:59,360
wanted to have this many copies of

00:31:58,640 --> 00:32:01,440
itself

00:31:59,360 --> 00:32:02,720
uh you can make a very simple deployment

00:32:01,440 --> 00:32:03,519
like you know eight or nine lines of

00:32:02,720 --> 00:32:05,360
yaml

00:32:03,519 --> 00:32:07,279
um and just deploy it and watch the

00:32:05,360 --> 00:32:07,679
magic in the terminal as it deploys so

00:32:07,279 --> 00:32:10,000
that

00:32:07,679 --> 00:32:11,519
as you get more comfortable with that as

00:32:10,000 --> 00:32:12,799
you'll start to figure out everything in

00:32:11,519 --> 00:32:15,760
kubernetes is

00:32:12,799 --> 00:32:17,200
uh is plugable right so it's you can

00:32:15,760 --> 00:32:18,159
change the opinion it took me a while to

00:32:17,200 --> 00:32:19,200
figure that out like hey i don't like

00:32:18,159 --> 00:32:21,279
how it does this

00:32:19,200 --> 00:32:22,799
swap out things you can modify the

00:32:21,279 --> 00:32:23,919
controller how it operates you can

00:32:22,799 --> 00:32:25,519
modify the

00:32:23,919 --> 00:32:27,120
you can make custom resource definitions

00:32:25,519 --> 00:32:28,000
you can change opinions you can

00:32:27,120 --> 00:32:31,440
influence it

00:32:28,000 --> 00:32:34,480
um there's these influencing words um

00:32:31,440 --> 00:32:36,240
that you can uh kind of like

00:32:34,480 --> 00:32:37,519
lack of a better word like influence

00:32:36,240 --> 00:32:39,360
yourself gets placed so

00:32:37,519 --> 00:32:41,919
uh yeah that's that's definitely it um

00:32:39,360 --> 00:32:44,000
good question okay so another question

00:32:41,919 --> 00:32:45,200
uh how to merge the finance team

00:32:44,000 --> 00:32:47,600
operations team because you're

00:32:45,200 --> 00:32:49,279
definitely uh

00:32:47,600 --> 00:32:50,480
different business units ravi you have a

00:32:49,279 --> 00:32:51,440
little bit more experience because

00:32:50,480 --> 00:32:53,039
you've seen

00:32:51,440 --> 00:32:54,320
yeah you have bigger bills than i do

00:32:53,039 --> 00:32:55,120
sometimes you have to talk to the

00:32:54,320 --> 00:32:58,880
higher-ups but

00:32:55,120 --> 00:33:01,440
what do you uh talk to that question

00:32:58,880 --> 00:33:02,559
yeah absolutely so i mean uh typically

00:33:01,440 --> 00:33:05,360
just like with most

00:33:02,559 --> 00:33:07,039
um um sort of relatively newer functions

00:33:05,360 --> 00:33:07,840
so this is this is a sort of function on

00:33:07,039 --> 00:33:09,360
its own

00:33:07,840 --> 00:33:11,039
uh while there are aspects to both

00:33:09,360 --> 00:33:12,720
things so there are finance aspect

00:33:11,039 --> 00:33:15,840
there's there's operational aspects but

00:33:12,720 --> 00:33:17,840
fundamentally this is uh this is a a

00:33:15,840 --> 00:33:20,960
separate

00:33:17,840 --> 00:33:22,880
sort of uh role and capability that that

00:33:20,960 --> 00:33:24,799
organizations have now started having

00:33:22,880 --> 00:33:26,640
for all of the reasons that uh that we

00:33:24,799 --> 00:33:29,440
mentioned so it's typically

00:33:26,640 --> 00:33:32,240
um yeah like uh like like a skill in a

00:33:29,440 --> 00:33:32,240
department on its own

00:33:33,200 --> 00:33:37,279
cool um okay so a couple more questions

00:33:35,760 --> 00:33:39,360
about starting out with

00:33:37,279 --> 00:33:40,720
uh kubernetes uh as another person

00:33:39,360 --> 00:33:42,000
mentioned like there's several other

00:33:40,720 --> 00:33:44,159
packages yeah i like to call there's

00:33:42,000 --> 00:33:45,760
like k3s and kinds of things chris

00:33:44,159 --> 00:33:47,200
um about that so there's there's

00:33:45,760 --> 00:33:51,200
multiple like

00:33:47,200 --> 00:33:51,679
uh local uh local ways to start cluster

00:33:51,200 --> 00:33:54,320
because

00:33:51,679 --> 00:33:55,679
also you can like if you want you can

00:33:54,320 --> 00:33:57,840
use one of the public cloud vendors too

00:33:55,679 --> 00:33:58,960
like if there's credits usually for like

00:33:57,840 --> 00:34:00,720
first time users

00:33:58,960 --> 00:34:02,399
if you want to spin up an eks instance

00:34:00,720 --> 00:34:06,080
or gk instance or aks

00:34:02,399 --> 00:34:07,919
imager um so there's

00:34:06,080 --> 00:34:08,879
there's there's two sets there's the

00:34:07,919 --> 00:34:10,720
folks this is going back to that

00:34:08,879 --> 00:34:12,159
question there's two sets that

00:34:10,720 --> 00:34:13,919
uh there's the folks authoring the

00:34:12,159 --> 00:34:15,520
workload which let's say you're writing

00:34:13,919 --> 00:34:17,119
a java application well it needs to be

00:34:15,520 --> 00:34:18,720
dockerized or it used to be

00:34:17,119 --> 00:34:20,720
uh you need to have a dockerized running

00:34:18,720 --> 00:34:22,240
kubernetes and so usually an application

00:34:20,720 --> 00:34:24,960
engineer will create

00:34:22,240 --> 00:34:26,000
at least the code that either build

00:34:24,960 --> 00:34:27,520
engineer or

00:34:26,000 --> 00:34:29,280
application engineer themselves can make

00:34:27,520 --> 00:34:30,800
a docker image and then when it runs it

00:34:29,280 --> 00:34:32,720
could run into container

00:34:30,800 --> 00:34:34,320
um so but you can get a lot of pre-baked

00:34:32,720 --> 00:34:35,599
ones right like nginx it's the

00:34:34,320 --> 00:34:38,079
quintessential you know deploy

00:34:35,599 --> 00:34:39,200
library slash engine x i think you know

00:34:38,079 --> 00:34:40,399
they hate to hit the rate limit in

00:34:39,200 --> 00:34:42,960
docker hub because

00:34:40,399 --> 00:34:43,919
so many people use that as the first one

00:34:42,960 --> 00:34:45,200
uh so yeah

00:34:43,919 --> 00:34:46,159
you don't have to necessarily be an

00:34:45,200 --> 00:34:47,040
application engineer you're just

00:34:46,159 --> 00:34:48,879
authoring that

00:34:47,040 --> 00:34:50,560
those eight or nine lines of yellow

00:34:48,879 --> 00:34:54,000
manifest

00:34:50,560 --> 00:34:55,760
so for uh the other question

00:34:54,000 --> 00:34:57,119
are there any other ways to lower cost

00:34:55,760 --> 00:34:59,440
other than a spot

00:34:57,119 --> 00:35:01,440
instance did we give it to robbie again

00:34:59,440 --> 00:35:04,320
cloud guru here

00:35:01,440 --> 00:35:06,000
yeah absolutely so uh so spotless is a

00:35:04,320 --> 00:35:06,800
really good way but it is uh something

00:35:06,000 --> 00:35:09,040
that's specific

00:35:06,800 --> 00:35:10,320
um now uh fundamentally in terms of

00:35:09,040 --> 00:35:11,920
learning cost there are a couple of ways

00:35:10,320 --> 00:35:13,440
to do that right so uh

00:35:11,920 --> 00:35:15,760
one is in terms of making sure that the

00:35:13,440 --> 00:35:16,800
elasticity is right uh in terms of are

00:35:15,760 --> 00:35:18,960
you running

00:35:16,800 --> 00:35:20,400
the number of uh it could be instances

00:35:18,960 --> 00:35:22,480
parts nodes etc

00:35:20,400 --> 00:35:24,480
that you actually require and no more um

00:35:22,480 --> 00:35:27,440
the other is to also look at

00:35:24,480 --> 00:35:27,920
scaling vertically right so do you have

00:35:27,440 --> 00:35:30,800
uh

00:35:27,920 --> 00:35:31,359
if it's kubernetes are the requests and

00:35:30,800 --> 00:35:33,920
limits

00:35:31,359 --> 00:35:34,560
set uh to exactly what you need um

00:35:33,920 --> 00:35:37,040
there's no

00:35:34,560 --> 00:35:37,680
um idle or unutilized capacity there uh

00:35:37,040 --> 00:35:39,839
if it's uh

00:35:37,680 --> 00:35:41,359
if it's a vm or if it's an ec2 instance

00:35:39,839 --> 00:35:43,599
in aws example

00:35:41,359 --> 00:35:44,960
um you know are those instances right

00:35:43,599 --> 00:35:46,320
sized in the sense that uh

00:35:44,960 --> 00:35:48,000
are they too large so that you're

00:35:46,320 --> 00:35:48,720
actually uh you know spending more than

00:35:48,000 --> 00:35:50,400
you should be

00:35:48,720 --> 00:35:52,000
are they too small where you're not

00:35:50,400 --> 00:35:53,440
getting enough performance and so on

00:35:52,000 --> 00:35:55,119
um so there are a bunch of different

00:35:53,440 --> 00:35:56,960
ways uh but i mean

00:35:55,119 --> 00:35:58,480
on top of all of those definitely uh

00:35:56,960 --> 00:36:00,400
spot instances uh

00:35:58,480 --> 00:36:01,680
where the workloads are of it uh is

00:36:00,400 --> 00:36:02,800
something that's useful to look at as

00:36:01,680 --> 00:36:05,599
well

00:36:02,800 --> 00:36:06,160
awesome i i really want to take this one

00:36:05,599 --> 00:36:08,400
i'll

00:36:06,160 --> 00:36:10,480
steal it uh so one question here is uh

00:36:08,400 --> 00:36:12,320
what is the typical overhead time

00:36:10,480 --> 00:36:14,400
uh for dynamic scale up and down your

00:36:12,320 --> 00:36:15,680
nodes and what's and is it acceptable

00:36:14,400 --> 00:36:16,480
for customers running real-time

00:36:15,680 --> 00:36:19,119
workloads

00:36:16,480 --> 00:36:21,200
oh it depends the everyone's favorite

00:36:19,119 --> 00:36:23,200
word in the itunes world is it depends

00:36:21,200 --> 00:36:24,960
but because like hey there's there's two

00:36:23,200 --> 00:36:27,599
sets so like as a distribution engineer

00:36:24,960 --> 00:36:29,760
myself like there are two things

00:36:27,599 --> 00:36:31,119
that are scaling up it's a scaling up of

00:36:29,760 --> 00:36:33,040
the infrastructure being

00:36:31,119 --> 00:36:34,560
ready to even process a workload and

00:36:33,040 --> 00:36:35,680
then there's the time it takes for the

00:36:34,560 --> 00:36:37,599
workload to start

00:36:35,680 --> 00:36:38,960
right so uh there's this concept of coal

00:36:37,599 --> 00:36:41,040
starts which i'm gonna get into

00:36:38,960 --> 00:36:42,240
so um let's say you spun up on you i

00:36:41,040 --> 00:36:43,920
don't know take kubernetes out of the

00:36:42,240 --> 00:36:44,320
picture you split up a new ec2 node in

00:36:43,920 --> 00:36:47,280
your

00:36:44,320 --> 00:36:49,280
ensemble of uh workloads you know you

00:36:47,280 --> 00:36:50,960
might be able to get a linux instance up

00:36:49,280 --> 00:36:51,920
and running in ec2 in two minutes right

00:36:50,960 --> 00:36:53,839
from the time you said

00:36:51,920 --> 00:36:55,040
hey i need something to time that he'll

00:36:53,839 --> 00:36:57,599
check past that

00:36:55,040 --> 00:36:59,359
it's able to receive traffic uh but then

00:36:57,599 --> 00:37:00,160
you know it's a you have a blank linux

00:36:59,359 --> 00:37:01,839
instance so

00:37:00,160 --> 00:37:03,280
you might have an application well it

00:37:01,839 --> 00:37:04,800
might be a java application well you

00:37:03,280 --> 00:37:06,240
need to get the infrastructure on there

00:37:04,800 --> 00:37:08,000
you might there's ways to get around

00:37:06,240 --> 00:37:09,280
that you might have it as an ami you

00:37:08,000 --> 00:37:10,160
might have an image that it boots too

00:37:09,280 --> 00:37:12,320
but

00:37:10,160 --> 00:37:13,920
java itself has cool start times um the

00:37:12,320 --> 00:37:15,359
languages supporting it have cultural

00:37:13,920 --> 00:37:15,760
times if you have a database another

00:37:15,359 --> 00:37:18,000
node

00:37:15,760 --> 00:37:19,599
there are cool start times to be able to

00:37:18,000 --> 00:37:21,119
process the transaction right

00:37:19,599 --> 00:37:22,960
and so it really depends on the workload

00:37:21,119 --> 00:37:23,920
itself now kubernetes did make that a

00:37:22,960 --> 00:37:25,599
little bit faster

00:37:23,920 --> 00:37:27,040
right so like hey i can spit up a node

00:37:25,599 --> 00:37:28,640
pretty quickly you know the payment

00:37:27,040 --> 00:37:31,119
spins something up really quickly

00:37:28,640 --> 00:37:31,680
but still it's also on how quickly it

00:37:31,119 --> 00:37:33,760
can

00:37:31,680 --> 00:37:35,359
start when the final health check passes

00:37:33,760 --> 00:37:36,240
right so like you know you might be able

00:37:35,359 --> 00:37:38,960
to spin up a new

00:37:36,240 --> 00:37:40,240
you know place a new node in seconds but

00:37:38,960 --> 00:37:42,400
the final health check

00:37:40,240 --> 00:37:43,839
that it's available for traffic or it's

00:37:42,400 --> 00:37:46,400
be able to send or receive

00:37:43,839 --> 00:37:47,520
it could be 60 seconds 80 seconds 90

00:37:46,400 --> 00:37:49,839
seconds a minute

00:37:47,520 --> 00:37:50,640
two minutes right just depending on what

00:37:49,839 --> 00:37:52,480
the workload is

00:37:50,640 --> 00:37:53,680
and it being going back to the last part

00:37:52,480 --> 00:37:54,480
of your question is acceptable for the

00:37:53,680 --> 00:37:55,839
customers well

00:37:54,480 --> 00:37:57,599
as robbie mentioned like you have to

00:37:55,839 --> 00:37:59,280
architect around that so you you do need

00:37:57,599 --> 00:38:00,880
some excess capacity or buffer

00:37:59,280 --> 00:38:02,640
um it's good distribution systems

00:38:00,880 --> 00:38:04,000
principles that it's there's something

00:38:02,640 --> 00:38:05,280
called the fallacies of distributed

00:38:04,000 --> 00:38:07,200
principle or yeah

00:38:05,280 --> 00:38:09,520
the fallacies of distributed computing

00:38:07,200 --> 00:38:10,079
you know latency overhead administration

00:38:09,520 --> 00:38:13,200
costs

00:38:10,079 --> 00:38:14,880
are not erased uh by any sort of system

00:38:13,200 --> 00:38:16,560
it just assassinated so thanks for that

00:38:14,880 --> 00:38:18,880
question uh

00:38:16,560 --> 00:38:21,200
this might be a good one a good one for

00:38:18,880 --> 00:38:23,040
you robby

00:38:21,200 --> 00:38:24,640
uh typically what percentage of nodes

00:38:23,040 --> 00:38:25,599
are spot instances versus on-demand

00:38:24,640 --> 00:38:28,800
reserve instances

00:38:25,599 --> 00:38:32,560
so like you know you might have the same

00:38:28,800 --> 00:38:34,079
it depends but yeah well so uh we could

00:38:32,560 --> 00:38:36,079
have a slightly more specific one here

00:38:34,079 --> 00:38:36,800
so uh typically when uh i mean if you

00:38:36,079 --> 00:38:38,880
are using

00:38:36,800 --> 00:38:40,640
like uh the native capabilities of a

00:38:38,880 --> 00:38:42,560
cloud fighter like let's take aws for

00:38:40,640 --> 00:38:44,240
example with the mixed instance policy

00:38:42,560 --> 00:38:46,000
now typically what's actually suggested

00:38:44,240 --> 00:38:46,640
is that you only have up to 30 percent

00:38:46,000 --> 00:38:48,800
of

00:38:46,640 --> 00:38:49,760
uh your workloads respond instances only

00:38:48,800 --> 00:38:51,920
to service

00:38:49,760 --> 00:38:53,040
uh you know spikes uh increased usage

00:38:51,920 --> 00:38:54,960
and so on but

00:38:53,040 --> 00:38:56,640
um having said that if you have spot

00:38:54,960 --> 00:38:58,079
interruption handling in place if you

00:38:56,640 --> 00:38:59,520
use a smart operator

00:38:58,079 --> 00:39:01,119
either you build something in-house or

00:38:59,520 --> 00:39:02,640
using or you're using

00:39:01,119 --> 00:39:04,560
a service like harness for orchestrating

00:39:02,640 --> 00:39:06,400
that uh spot instances you can actually

00:39:04,560 --> 00:39:07,839
go ahead and run 100 of your spot

00:39:06,400 --> 00:39:10,960
instances uh

00:39:07,839 --> 00:39:12,800
100 of uh your nodes on on spot so

00:39:10,960 --> 00:39:13,839
because what happens there is

00:39:12,800 --> 00:39:15,200
you know when there is a spot

00:39:13,839 --> 00:39:16,560
interruption uh then there's an

00:39:15,200 --> 00:39:17,359
alternate spot that's provision for you

00:39:16,560 --> 00:39:19,359
in its place

00:39:17,359 --> 00:39:20,880
there's a fault amount of fallback to on

00:39:19,359 --> 00:39:22,480
demand that happens automatically when

00:39:20,880 --> 00:39:23,040
spot capacity is not there in the market

00:39:22,480 --> 00:39:24,720
at all

00:39:23,040 --> 00:39:26,240
uh and then the spot market is

00:39:24,720 --> 00:39:28,400
continuously polled and when the the

00:39:26,240 --> 00:39:30,160
spot capacity is backup available again

00:39:28,400 --> 00:39:31,440
uh it also does a reverse fall back back

00:39:30,160 --> 00:39:32,880
from on demand to spot

00:39:31,440 --> 00:39:35,920
so because of all of that orchestration

00:39:32,880 --> 00:39:38,800
you can actually run 100 in spot uh

00:39:35,920 --> 00:39:40,079
for for this particular case cool hey i

00:39:38,800 --> 00:39:43,440
like it that's aggressive

00:39:40,079 --> 00:39:44,560
100 ronnie oh i'm excited uh i'll take

00:39:43,440 --> 00:39:46,079
this a lot so

00:39:44,560 --> 00:39:47,599
follow up for the previous question i

00:39:46,079 --> 00:39:49,119
answered so

00:39:47,599 --> 00:39:51,359
are there strategies to avoiding cold

00:39:49,119 --> 00:39:53,520
starts well

00:39:51,359 --> 00:39:55,119
so there's lots of strategies right like

00:39:53,520 --> 00:39:56,560
so given today if you have a statement

00:39:55,119 --> 00:39:58,880
workload

00:39:56,560 --> 00:40:00,320
you're you're provisioning there's lots

00:39:58,880 --> 00:40:02,720
of discussion of like

00:40:00,320 --> 00:40:04,480
how much does a net new user add to the

00:40:02,720 --> 00:40:06,079
amount of infrastructure that you need

00:40:04,480 --> 00:40:08,160
to have right number of concurrent users

00:40:06,079 --> 00:40:10,160
that you support um when doing capacity

00:40:08,160 --> 00:40:12,400
planning so

00:40:10,160 --> 00:40:13,200
it's what is giving you the capacity is

00:40:12,400 --> 00:40:14,800
it adding another

00:40:13,200 --> 00:40:17,440
node to the application is it adding

00:40:14,800 --> 00:40:18,640
another node uh you know are you

00:40:17,440 --> 00:40:20,000
limiting the number of people who come

00:40:18,640 --> 00:40:21,440
in are you re-prioritizing people

00:40:20,000 --> 00:40:22,079
there's like dozens of ways you can take

00:40:21,440 --> 00:40:24,480
this

00:40:22,079 --> 00:40:25,599
uh but like a cold start there's certain

00:40:24,480 --> 00:40:28,640
close sorts you can avoid

00:40:25,599 --> 00:40:29,920
for example um if the i think the

00:40:28,640 --> 00:40:31,359
culture that the

00:40:29,920 --> 00:40:33,200
question is being asked for is like you

00:40:31,359 --> 00:40:33,599
have like an in-memory cache and you

00:40:33,200 --> 00:40:35,839
know

00:40:33,599 --> 00:40:37,359
the the next node has to come online and

00:40:35,839 --> 00:40:40,079
so now it needs to replicate

00:40:37,359 --> 00:40:40,800
all the key value pairs uh that that you

00:40:40,079 --> 00:40:42,480
know it

00:40:40,800 --> 00:40:45,119
did not have or if it was a failure when

00:40:42,480 --> 00:40:47,119
it comes back uh you know there's

00:40:45,119 --> 00:40:48,720
you there's certain ways around it like

00:40:47,119 --> 00:40:49,440
a very very highly performed system you

00:40:48,720 --> 00:40:52,160
could ship

00:40:49,440 --> 00:40:53,280
you know a block of them at one time but

00:40:52,160 --> 00:40:55,200
there's other things that you just can't

00:40:53,280 --> 00:40:55,920
avoid like java coal starts like so one

00:40:55,200 --> 00:40:57,440
of the

00:40:55,920 --> 00:40:59,359
i i get a little bit so boxy like

00:40:57,440 --> 00:41:00,000
serverless is you know kind of the rage

00:40:59,359 --> 00:41:01,599
now so

00:41:00,000 --> 00:41:03,280
functions out of surface servos uh

00:41:01,599 --> 00:41:05,599
there's still a very poor

00:41:03,280 --> 00:41:08,000
cool start times on on certain languages

00:41:05,599 --> 00:41:10,000
like using node versus java like nodal

00:41:08,000 --> 00:41:11,920
handheld cross java

00:41:10,000 --> 00:41:13,599
in terms of what it takes for java to

00:41:11,920 --> 00:41:15,680
start right especially if you're having

00:41:13,599 --> 00:41:17,599
requests that are being sub seconds

00:41:15,680 --> 00:41:19,119
you might want to look at a different

00:41:17,599 --> 00:41:21,680
you know different language

00:41:19,119 --> 00:41:22,160
stack so it really diagnosed a patient

00:41:21,680 --> 00:41:24,160
um

00:41:22,160 --> 00:41:26,079
if you're looking at more like i'm

00:41:24,160 --> 00:41:28,319
guessing like in memory solution

00:41:26,079 --> 00:41:31,200
um they're certainly each provider has

00:41:28,319 --> 00:41:33,440
ways to kind of get around that but

00:41:31,200 --> 00:41:36,240
you know it's it's still something to to

00:41:33,440 --> 00:41:36,240
taking consideration

00:41:37,200 --> 00:41:41,040
i think that was it for the questions um

00:41:39,760 --> 00:41:42,880
we still have a few minutes if anybody

00:41:41,040 --> 00:41:45,280
wants to ask anything last minute

00:41:42,880 --> 00:41:47,119
uh you know behalf of ravi and i you can

00:41:45,280 --> 00:41:48,560
if you want to chat with us on twitter

00:41:47,119 --> 00:41:50,079
there's two robberies down there you can

00:41:48,560 --> 00:41:52,319
add we would love to talk to you if you

00:41:50,079 --> 00:41:55,040
want

00:41:52,319 --> 00:41:55,040
but if that's it

00:42:01,200 --> 00:42:04,800
yeah i don't see any other questions so

00:42:03,680 --> 00:42:06,800
um thank you

00:42:04,800 --> 00:42:08,160
again to ravi and ravi for their time

00:42:06,800 --> 00:42:10,240
today and thank you to all the

00:42:08,160 --> 00:42:12,240
participants who joined us

00:42:10,240 --> 00:42:14,079
as a reminder this reporting will be on

00:42:12,240 --> 00:42:14,800
the linux foundation youtube page later

00:42:14,079 --> 00:42:16,160
today

00:42:14,800 --> 00:42:18,800
and we hope you're able to join us for

00:42:16,160 --> 00:42:24,240
future webinars have a wonderful day

00:42:18,800 --> 00:42:24,240

YouTube URL: https://www.youtube.com/watch?v=LZKUtQS8KP0


