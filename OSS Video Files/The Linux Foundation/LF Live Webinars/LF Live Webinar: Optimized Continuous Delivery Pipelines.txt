Title: LF Live Webinar: Optimized Continuous Delivery Pipelines
Publication date: 2021-05-11
Playlist: LF Live Webinars
Description: 
	sponsored by CircleCI

Continuous Delivery (CD) pipelines enable teams to automate their software development and release processes. The automation provides a solid mechanism for teams to build, test and deploy code consistently and reliably but over time these pipelines become inefficient as code grows. In this presentation, the speaker will discuss Continuous Delivery and software development strategies that can assist in maintaining efficient and effective pipelines.
Captions: 
	00:00:00,799 --> 00:00:04,720
oh thank you so much um really excited

00:00:03,600 --> 00:00:07,359
to be here

00:00:04,720 --> 00:00:08,240
and to give this presentation uh

00:00:07,359 --> 00:00:11,280
regarding

00:00:08,240 --> 00:00:14,799
uh pipelines optimizing pipelines and

00:00:11,280 --> 00:00:17,199
continuous delivery so uh

00:00:14,799 --> 00:00:18,320
put a little agenda together for this

00:00:17,199 --> 00:00:21,359
presentation

00:00:18,320 --> 00:00:24,800
um oh and before i move on to

00:00:21,359 --> 00:00:26,960
the the agenda uh if anyone has

00:00:24,800 --> 00:00:28,400
any questions throughout this

00:00:26,960 --> 00:00:31,679
presentation

00:00:28,400 --> 00:00:35,920
please uh leverage or ask the questions

00:00:31,679 --> 00:00:38,239
in the uh q a portion of zoom

00:00:35,920 --> 00:00:39,680
i'll be monitoring as i'm you know going

00:00:38,239 --> 00:00:42,000
through the presentation

00:00:39,680 --> 00:00:42,960
uh i'm going to go through a couple of

00:00:42,000 --> 00:00:46,960
concepts

00:00:42,960 --> 00:00:48,879
um that may you know

00:00:46,960 --> 00:00:50,640
be a little overwhelming for some folks

00:00:48,879 --> 00:00:52,960
uh so i definitely want to

00:00:50,640 --> 00:00:56,559
answer questions as we go through this

00:00:52,960 --> 00:00:58,640
um it's not rocket science but you know

00:00:56,559 --> 00:01:01,520
we were talking concepts and stuff so

00:00:58,640 --> 00:01:04,239
definitely um

00:01:01,520 --> 00:01:05,199
ask your questions as you uh you know

00:01:04,239 --> 00:01:08,880
think of them and

00:01:05,199 --> 00:01:10,320
i will try to monitor this as best i can

00:01:08,880 --> 00:01:13,840
and then answer it in real time

00:01:10,320 --> 00:01:15,119
so without further ado let's talk about

00:01:13,840 --> 00:01:17,280
the agenda so

00:01:15,119 --> 00:01:19,680
uh today i'm just going to be discussing

00:01:17,280 --> 00:01:22,640
uh software development processes

00:01:19,680 --> 00:01:24,320
and life cycles and as they relate to

00:01:22,640 --> 00:01:25,280
continuous delivery

00:01:24,320 --> 00:01:27,360
then i'm going to talk a little bit

00:01:25,280 --> 00:01:30,640
about continuous delivery

00:01:27,360 --> 00:01:32,479
at scale which is essentially um

00:01:30,640 --> 00:01:34,079
flagging a few things that you should be

00:01:32,479 --> 00:01:36,560
looking for some of the things that can

00:01:34,079 --> 00:01:38,960
go wrong when you're

00:01:36,560 --> 00:01:40,560
performing continuous delivery at scale

00:01:38,960 --> 00:01:42,880
and then finally uh

00:01:40,560 --> 00:01:44,880
i'll spend some time talking about how

00:01:42,880 --> 00:01:46,640
you can optimize pipelines make them

00:01:44,880 --> 00:01:49,840
more efficient

00:01:46,640 --> 00:01:50,960
and some you know tips on how you can

00:01:49,840 --> 00:01:54,240
easily implement

00:01:50,960 --> 00:01:56,560
uh you know changes that will help you

00:01:54,240 --> 00:01:58,000
manage the efficiency a little bit

00:01:56,560 --> 00:01:59,920
better

00:01:58,000 --> 00:02:01,360
so yeah let's jump over to a quick

00:01:59,920 --> 00:02:04,240
introduction of myself

00:02:01,360 --> 00:02:05,840
uh i am my name is angel rivera

00:02:04,240 --> 00:02:09,200
developer advocate

00:02:05,840 --> 00:02:10,879
for circleci so my role as a developer

00:02:09,200 --> 00:02:13,840
advocate

00:02:10,879 --> 00:02:14,959
essentially is for me to go out to the

00:02:13,840 --> 00:02:18,239
community

00:02:14,959 --> 00:02:19,920
and discuss you know technology and how

00:02:18,239 --> 00:02:22,480
folks are using technology

00:02:19,920 --> 00:02:24,000
i'm also engaging at a grassroots level

00:02:22,480 --> 00:02:26,959
with developers

00:02:24,000 --> 00:02:28,319
uh to get a better sense of you know

00:02:26,959 --> 00:02:29,840
their bottlenecks with certain

00:02:28,319 --> 00:02:30,800
technologies some of the struggles

00:02:29,840 --> 00:02:33,040
they're having

00:02:30,800 --> 00:02:34,959
as well as offer up some advice on how

00:02:33,040 --> 00:02:37,920
they can you know

00:02:34,959 --> 00:02:38,800
fix those issues or or resolve them uh

00:02:37,920 --> 00:02:41,440
but it also

00:02:38,800 --> 00:02:42,400
serves as a really good uh kind of data

00:02:41,440 --> 00:02:44,959
collection

00:02:42,400 --> 00:02:46,319
uh for for me and my team and uh once i

00:02:44,959 --> 00:02:47,920
have those learnings

00:02:46,319 --> 00:02:50,480
uh from the community i can bring them

00:02:47,920 --> 00:02:53,280
back uh to our teams at circle ci

00:02:50,480 --> 00:02:53,599
and we incorporate those learnings into

00:02:53,280 --> 00:02:55,840
our

00:02:53,599 --> 00:02:57,840
design processes for you know product

00:02:55,840 --> 00:03:01,360
releases and upgrades

00:02:57,840 --> 00:03:02,560
so that we can bring better value and

00:03:01,360 --> 00:03:05,360
better features

00:03:02,560 --> 00:03:07,120
uh useful features to the community

00:03:05,360 --> 00:03:08,879
we're all about developers and trying to

00:03:07,120 --> 00:03:12,000
make their lives easier

00:03:08,879 --> 00:03:13,519
and learning what struggles they have

00:03:12,000 --> 00:03:15,840
is really helpful when we're developing

00:03:13,519 --> 00:03:17,519
features to help you know

00:03:15,840 --> 00:03:19,599
resolve some of those issues within the

00:03:17,519 --> 00:03:20,879
platform if anybody wants to reach out

00:03:19,599 --> 00:03:24,000
to me

00:03:20,879 --> 00:03:25,680
i'm pretty much available on twitter

00:03:24,000 --> 00:03:27,599
all the time it's the best way to get a

00:03:25,680 --> 00:03:29,440
hold of me so if you want to reach out

00:03:27,599 --> 00:03:31,599
just hit me up at punk data

00:03:29,440 --> 00:03:32,879
on twitter and i will respond

00:03:31,599 --> 00:03:34,959
accordingly

00:03:32,879 --> 00:03:36,879
so that's enough about me let's talk

00:03:34,959 --> 00:03:38,720
about software development life cycles

00:03:36,879 --> 00:03:41,120
and continuous delivery

00:03:38,720 --> 00:03:42,879
uh pretty exciting stuff right uh but

00:03:41,120 --> 00:03:44,959
before we jump into

00:03:42,879 --> 00:03:47,120
all of that i wanted to kind of give you

00:03:44,959 --> 00:03:48,640
a foundational

00:03:47,120 --> 00:03:50,239
overview of software development life

00:03:48,640 --> 00:03:50,640
cycles what they are and what what

00:03:50,239 --> 00:03:53,360
what's

00:03:50,640 --> 00:03:55,599
what's their purpose if folks don't know

00:03:53,360 --> 00:03:59,200
but it's essentially

00:03:55,599 --> 00:04:01,840
the rules for

00:03:59,200 --> 00:04:03,439
software development that teams and

00:04:01,840 --> 00:04:06,480
organizations

00:04:03,439 --> 00:04:07,920
develop and use them to govern how they

00:04:06,480 --> 00:04:10,480
build their software right so this

00:04:07,920 --> 00:04:10,959
essentially are the rules that people

00:04:10,480 --> 00:04:13,280
build

00:04:10,959 --> 00:04:15,040
for themselves and their software

00:04:13,280 --> 00:04:17,359
development processes

00:04:15,040 --> 00:04:18,799
which then are you know shared amongst

00:04:17,359 --> 00:04:21,120
the teams and then

00:04:18,799 --> 00:04:22,320
used as the guide to to building that

00:04:21,120 --> 00:04:25,360
software

00:04:22,320 --> 00:04:27,120
uh so you know

00:04:25,360 --> 00:04:29,199
software development life cycles come in

00:04:27,120 --> 00:04:31,440
many many different flavors

00:04:29,199 --> 00:04:33,120
right now i'm showing you two of the

00:04:31,440 --> 00:04:34,720
more dominant

00:04:33,120 --> 00:04:37,040
software development life cycle

00:04:34,720 --> 00:04:39,360
methodologies used

00:04:37,040 --> 00:04:40,080
one is called waterfall development and

00:04:39,360 --> 00:04:43,280
the other is

00:04:40,080 --> 00:04:45,680
agile development waterfall development

00:04:43,280 --> 00:04:47,199
is the process where you know it's more

00:04:45,680 --> 00:04:51,840
of a cascading model

00:04:47,199 --> 00:04:54,160
and tasks are designed and then

00:04:51,840 --> 00:04:55,600
assigned to developers more in a in a

00:04:54,160 --> 00:04:58,000
bulk capacity

00:04:55,600 --> 00:04:59,759
so what i mean by that is if you look at

00:04:58,000 --> 00:05:02,720
the diagram for waterfall

00:04:59,759 --> 00:05:03,280
that's a dotted square box around those

00:05:02,720 --> 00:05:06,880
three

00:05:03,280 --> 00:05:10,479
uh elements within the the methodology

00:05:06,880 --> 00:05:12,160
uh developers are given you know these

00:05:10,479 --> 00:05:13,120
these tasks to complete just like any

00:05:12,160 --> 00:05:15,680
other job right

00:05:13,120 --> 00:05:17,520
you get your tasks you have to

00:05:15,680 --> 00:05:19,840
accomplish those tasks in order to

00:05:17,520 --> 00:05:21,440
achieve your goals uh within software

00:05:19,840 --> 00:05:24,720
development though in the waterfall

00:05:21,440 --> 00:05:25,120
development methodology uh it's it's

00:05:24,720 --> 00:05:27,199
more

00:05:25,120 --> 00:05:28,479
uh sequential right so there's a lot of

00:05:27,199 --> 00:05:31,600
dependencies on

00:05:28,479 --> 00:05:33,759
getting a task done prior to

00:05:31,600 --> 00:05:35,199
moving on to the next task which as you

00:05:33,759 --> 00:05:37,120
can imagine can create a lot of

00:05:35,199 --> 00:05:40,000
bottlenecks and blockage right because

00:05:37,120 --> 00:05:41,759
you're having those dependencies

00:05:40,000 --> 00:05:43,919
and waterfall has been around for quite

00:05:41,759 --> 00:05:46,000
some time like i mentioned earlier

00:05:43,919 --> 00:05:46,960
but the problem with waterfall is it's

00:05:46,000 --> 00:05:50,240
very inefficient

00:05:46,960 --> 00:05:51,120
especially when you have a huge group of

00:05:50,240 --> 00:05:54,320
developers

00:05:51,120 --> 00:05:54,800
trying to develop that software uh if

00:05:54,320 --> 00:05:56,639
you like

00:05:54,800 --> 00:05:58,479
you can imagine you know that cascading

00:05:56,639 --> 00:06:02,080
effect will trickle down and

00:05:58,479 --> 00:06:03,680
create huge uh inefficiencies

00:06:02,080 --> 00:06:06,000
in the software development process

00:06:03,680 --> 00:06:07,680
under waterfall back in the day

00:06:06,000 --> 00:06:09,600
when i started developing software you

00:06:07,680 --> 00:06:12,800
know it would take us

00:06:09,600 --> 00:06:15,600
weeks months and years sometimes to

00:06:12,800 --> 00:06:16,880
release new software which is pretty bad

00:06:15,600 --> 00:06:18,800
for a developer because you know you

00:06:16,880 --> 00:06:20,240
could be working on something

00:06:18,800 --> 00:06:21,919
and a year later it gets released and

00:06:20,240 --> 00:06:23,520
then you have to kind of um you know

00:06:21,919 --> 00:06:26,319
shift your mindset

00:06:23,520 --> 00:06:28,319
to that previous context of a year ago

00:06:26,319 --> 00:06:29,680
and you know to fix things or to make

00:06:28,319 --> 00:06:32,160
enhancements so

00:06:29,680 --> 00:06:32,960
you know i really didn't enjoy it but

00:06:32,160 --> 00:06:35,120
then you know

00:06:32,960 --> 00:06:36,960
as developers and engineers we figured

00:06:35,120 --> 00:06:38,800
out that hey this waterfall development

00:06:36,960 --> 00:06:41,440
process is probably not the best

00:06:38,800 --> 00:06:42,800
for uh you know developing software and

00:06:41,440 --> 00:06:44,319
we can do it more efficiently and that's

00:06:42,800 --> 00:06:46,960
kind of where agile

00:06:44,319 --> 00:06:48,720
development was born if you look at that

00:06:46,960 --> 00:06:49,360
diagram you can see a lot of movement

00:06:48,720 --> 00:06:52,960
right there's

00:06:49,360 --> 00:06:55,520
arrows circles um but one of the key

00:06:52,960 --> 00:06:56,160
elements to or differences between

00:06:55,520 --> 00:07:00,160
waterfall

00:06:56,160 --> 00:07:03,759
and agile is agile actually

00:07:00,160 --> 00:07:06,560
breaks that cascading model and uh

00:07:03,759 --> 00:07:09,120
implements a more of a uh you know

00:07:06,560 --> 00:07:12,240
smaller scope

00:07:09,120 --> 00:07:13,120
and concurrent tasks so essentially

00:07:12,240 --> 00:07:15,599
right

00:07:13,120 --> 00:07:16,639
when you have a agile development

00:07:15,599 --> 00:07:17,919
methodology

00:07:16,639 --> 00:07:19,520
you're building your software

00:07:17,919 --> 00:07:20,960
concurrently so your developers are

00:07:19,520 --> 00:07:23,919
working on smaller

00:07:20,960 --> 00:07:24,800
tasks right smaller in scope uh in order

00:07:23,919 --> 00:07:26,880
for them to

00:07:24,800 --> 00:07:28,800
like you know really focus in on the

00:07:26,880 --> 00:07:31,840
thing that they need to accomplish

00:07:28,800 --> 00:07:33,280
and then they're continuously pushing

00:07:31,840 --> 00:07:35,120
changes right so you can see all those

00:07:33,280 --> 00:07:38,240
circles where you have a sprint

00:07:35,120 --> 00:07:40,800
and then it just you know gets processed

00:07:38,240 --> 00:07:43,360
uh passes over to like a daily scrum and

00:07:40,800 --> 00:07:45,599
some scrum master in the center there is

00:07:43,360 --> 00:07:46,400
orchestrating all of this so again right

00:07:45,599 --> 00:07:48,000
um it's an

00:07:46,400 --> 00:07:50,639
incremental way of building software

00:07:48,000 --> 00:07:52,400
which is really really nice because

00:07:50,639 --> 00:07:55,039
again tasks are broken down smaller you

00:07:52,400 --> 00:07:57,840
can be super laser focused on things

00:07:55,039 --> 00:07:58,240
and you're not you know submitting huge

00:07:57,840 --> 00:08:00,800
uh

00:07:58,240 --> 00:08:02,639
code changes which could take you know a

00:08:00,800 --> 00:08:05,599
lot of time to review

00:08:02,639 --> 00:08:07,440
in any case that's this is the software

00:08:05,599 --> 00:08:10,479
development life cycle which i'll

00:08:07,440 --> 00:08:12,720
also refer to as software

00:08:10,479 --> 00:08:14,000
development processes so if you hear

00:08:12,720 --> 00:08:18,240
those two terms

00:08:14,000 --> 00:08:22,000
they are the same so

00:08:18,240 --> 00:08:24,080
with agile kind of you know bringing

00:08:22,000 --> 00:08:26,720
efficiencies and optimizations to the

00:08:24,080 --> 00:08:28,400
way we build software

00:08:26,720 --> 00:08:29,759
you know that's a process or a concept

00:08:28,400 --> 00:08:32,240
within the process for your

00:08:29,759 --> 00:08:34,479
your software development processes

00:08:32,240 --> 00:08:37,839
continuous delivery

00:08:34,479 --> 00:08:41,599
is essentially uh you know

00:08:37,839 --> 00:08:42,320
born out of uh these findings that you

00:08:41,599 --> 00:08:45,040
know

00:08:42,320 --> 00:08:46,240
we can do things concurrently and we can

00:08:45,040 --> 00:08:49,120
deliver software

00:08:46,240 --> 00:08:49,920
much much faster so with continuous

00:08:49,120 --> 00:08:53,040
delivery

00:08:49,920 --> 00:08:56,160
essentially it was the practice of

00:08:53,040 --> 00:08:58,640
building and testing software

00:08:56,160 --> 00:08:59,360
and then also delivering those changes

00:08:58,640 --> 00:09:02,160
to code

00:08:59,360 --> 00:09:02,800
and changes to code and user

00:09:02,160 --> 00:09:05,279
environments

00:09:02,800 --> 00:09:07,040
using automated tools so right with

00:09:05,279 --> 00:09:08,080
continuous delivery we noticed that the

00:09:07,040 --> 00:09:11,680
agile pattern

00:09:08,080 --> 00:09:14,720
of you know smaller uh

00:09:11,680 --> 00:09:16,800
work doing work in smaller scopes uh

00:09:14,720 --> 00:09:17,839
and then also the iterative or

00:09:16,800 --> 00:09:19,839
concurrent

00:09:17,839 --> 00:09:22,160
uh practice of building software can be

00:09:19,839 --> 00:09:24,480
applied to how we deliver software

00:09:22,160 --> 00:09:26,560
so you know those two methodologies and

00:09:24,480 --> 00:09:27,040
then we bring in continuous delivery on

00:09:26,560 --> 00:09:28,880
that

00:09:27,040 --> 00:09:31,440
to kind of facilitate releasing that

00:09:28,880 --> 00:09:34,080
code faster

00:09:31,440 --> 00:09:35,680
so within continuous delivery though we

00:09:34,080 --> 00:09:37,920
have another concept

00:09:35,680 --> 00:09:40,160
called continuous integration and

00:09:37,920 --> 00:09:41,360
continuous deployment these two concepts

00:09:40,160 --> 00:09:44,480
are actually

00:09:41,360 --> 00:09:47,760
separate uh but they're often uh

00:09:44,480 --> 00:09:48,399
you know discussed at the same time

00:09:47,760 --> 00:09:51,120
which is

00:09:48,399 --> 00:09:52,959
kind of why you here to see and hear and

00:09:51,120 --> 00:09:54,399
see this acronym ci cd

00:09:52,959 --> 00:09:56,160
stands for continuous integration

00:09:54,399 --> 00:09:58,240
continuous deployment

00:09:56,160 --> 00:09:59,839
and again two separate concepts which

00:09:58,240 --> 00:10:01,600
are generally

00:09:59,839 --> 00:10:04,959
addressed at the same time because they

00:10:01,600 --> 00:10:08,000
are so intercoupled and related

00:10:04,959 --> 00:10:08,959
so let's talk about continuous

00:10:08,000 --> 00:10:11,200
integration um

00:10:08,959 --> 00:10:13,040
it's simply the practice of merging all

00:10:11,200 --> 00:10:15,120
developers working copies

00:10:13,040 --> 00:10:16,560
to a shared code repository so what does

00:10:15,120 --> 00:10:19,360
that mean

00:10:16,560 --> 00:10:21,279
within the principles of ci that means

00:10:19,360 --> 00:10:22,480
you're writing and committing code as

00:10:21,279 --> 00:10:24,240
often as possible

00:10:22,480 --> 00:10:26,320
right so you're committing code to a

00:10:24,240 --> 00:10:30,000
branch or some sort of repository

00:10:26,320 --> 00:10:33,440
a trunk and then those committed

00:10:30,000 --> 00:10:35,040
changes are shared and committed to a

00:10:33,440 --> 00:10:36,800
girl they're committed to a shared code

00:10:35,040 --> 00:10:38,240
repository so that

00:10:36,800 --> 00:10:40,720
the reason you're doing that is your

00:10:38,240 --> 00:10:42,640
team can actually understand

00:10:40,720 --> 00:10:44,480
and see what you know how you're

00:10:42,640 --> 00:10:45,760
building the the features in your in

00:10:44,480 --> 00:10:47,519
your code

00:10:45,760 --> 00:10:49,200
and it's also a way for you the

00:10:47,519 --> 00:10:51,200
developer to pull down

00:10:49,200 --> 00:10:53,200
your peers changes and the stuff they're

00:10:51,200 --> 00:10:54,399
working on and understanding you know

00:10:53,200 --> 00:10:54,800
kind of where they're going with their

00:10:54,399 --> 00:10:57,839
code

00:10:54,800 --> 00:11:01,360
so that you can have that nice uh

00:10:57,839 --> 00:11:02,880
comfortable merge of functionality

00:11:01,360 --> 00:11:03,279
especially if you're overlapped right

00:11:02,880 --> 00:11:05,920
and

00:11:03,279 --> 00:11:06,880
you're touching code in an overlap kind

00:11:05,920 --> 00:11:10,160
of sense

00:11:06,880 --> 00:11:13,040
so um the other benefit or

00:11:10,160 --> 00:11:15,360
or i would say element to to the

00:11:13,040 --> 00:11:17,680
principles of continuous integration is

00:11:15,360 --> 00:11:20,079
you're testing your code on every commit

00:11:17,680 --> 00:11:21,680
so this is adding a layer of quality

00:11:20,079 --> 00:11:24,320
uh you know under the from the

00:11:21,680 --> 00:11:26,000
developers percep perspective every time

00:11:24,320 --> 00:11:28,000
they make code changes and then are

00:11:26,000 --> 00:11:31,440
committed you're testing those

00:11:28,000 --> 00:11:33,920
those changes and then my favorite uh

00:11:31,440 --> 00:11:35,440
feature or or benefit from from the

00:11:33,920 --> 00:11:38,079
principles of ci

00:11:35,440 --> 00:11:39,760
is the the fast feedback loops right so

00:11:38,079 --> 00:11:41,040
as we're testing our code on every

00:11:39,760 --> 00:11:43,920
commit

00:11:41,040 --> 00:11:45,519
we're able to understand or know if we

00:11:43,920 --> 00:11:47,360
have issues with our code because the

00:11:45,519 --> 00:11:48,720
tests are either going to fail

00:11:47,360 --> 00:11:49,760
or they're i mean they're going to pass

00:11:48,720 --> 00:11:50,480
or they're going to fail if they're

00:11:49,760 --> 00:11:51,760
failing

00:11:50,480 --> 00:11:53,920
you definitely want to know right as

00:11:51,760 --> 00:11:54,560
quickly as possible so that you can go

00:11:53,920 --> 00:11:56,959
back and

00:11:54,560 --> 00:11:57,760
fix those issues and then resubmit them

00:11:56,959 --> 00:12:00,079
right to the whole

00:11:57,760 --> 00:12:01,040
the continuous delivery process so fast

00:12:00,079 --> 00:12:04,079
feedback loops

00:12:01,040 --> 00:12:04,720
is one of the key uh benefits for me at

00:12:04,079 --> 00:12:07,760
least

00:12:04,720 --> 00:12:09,600
as a developer from ci now with

00:12:07,760 --> 00:12:12,160
continuous deployment

00:12:09,600 --> 00:12:14,800
it's just the practice of deploying this

00:12:12,160 --> 00:12:17,760
new software or the changes that you

00:12:14,800 --> 00:12:19,360
uh created right and you're releasing it

00:12:17,760 --> 00:12:20,480
to your target audience target

00:12:19,360 --> 00:12:23,440
environments

00:12:20,480 --> 00:12:24,079
um this is more on the side of basically

00:12:23,440 --> 00:12:26,639
you know

00:12:24,079 --> 00:12:27,600
deploying software as as the name

00:12:26,639 --> 00:12:29,519
indicates

00:12:27,600 --> 00:12:31,040
so with the principles of continuous

00:12:29,519 --> 00:12:33,360
deployment

00:12:31,040 --> 00:12:34,079
we are creating release artifacts for

00:12:33,360 --> 00:12:35,839
continuous

00:12:34,079 --> 00:12:38,160
delivery or continuous deployment

00:12:35,839 --> 00:12:39,040
process we're deploying uh code

00:12:38,160 --> 00:12:40,560
artifacts

00:12:39,040 --> 00:12:42,079
to those target resources could be a

00:12:40,560 --> 00:12:45,839
kubernetes cluster

00:12:42,079 --> 00:12:47,040
could be uh just a simple you know uh

00:12:45,839 --> 00:12:49,040
server somewhere that you're just

00:12:47,040 --> 00:12:50,800
hosting the website whatever the

00:12:49,040 --> 00:12:53,120
the target environment is doesn't matter

00:12:50,800 --> 00:12:54,720
but the fact is that you're deploying

00:12:53,120 --> 00:12:55,600
these code artifacts to those those

00:12:54,720 --> 00:12:58,399
environments

00:12:55,600 --> 00:12:59,360
uh one of the other principles is sort

00:12:58,399 --> 00:13:01,440
of like

00:12:59,360 --> 00:13:02,880
app validation and services once

00:13:01,440 --> 00:13:04,240
everything's deployed

00:13:02,880 --> 00:13:06,000
um you could have a successful

00:13:04,240 --> 00:13:06,560
deployment but then your applications

00:13:06,000 --> 00:13:09,760
could be

00:13:06,560 --> 00:13:11,279
you know failing miserably uh as on the

00:13:09,760 --> 00:13:12,800
server that you deployed to so you know

00:13:11,279 --> 00:13:14,079
you want to validate that those apps

00:13:12,800 --> 00:13:17,120
after deployment are

00:13:14,079 --> 00:13:18,480
functioning and the services are uh you

00:13:17,120 --> 00:13:21,120
know

00:13:18,480 --> 00:13:22,160
executing as as expected and then

00:13:21,120 --> 00:13:25,440
finally um

00:13:22,160 --> 00:13:27,519
in the cd or the continuous deployment

00:13:25,440 --> 00:13:29,040
uh principles you want to establish some

00:13:27,519 --> 00:13:31,279
sort of monitoring

00:13:29,040 --> 00:13:33,680
or surveillance of the state of that

00:13:31,279 --> 00:13:37,200
application to ensure again that it's

00:13:33,680 --> 00:13:39,519
functioning as expected and also

00:13:37,200 --> 00:13:40,720
if you have any sort of resiliency or

00:13:39,519 --> 00:13:43,760
recovery

00:13:40,720 --> 00:13:45,920
type uh you know

00:13:43,760 --> 00:13:47,440
mechanisms within your your your

00:13:45,920 --> 00:13:49,120
application functioning

00:13:47,440 --> 00:13:51,120
you also want to monitor that to make

00:13:49,120 --> 00:13:54,399
sure that it's recovering

00:13:51,120 --> 00:13:57,440
and being resilient as designed

00:13:54,399 --> 00:14:01,040
so you know with continuous

00:13:57,440 --> 00:14:03,279
the delivery ci cd software development

00:14:01,040 --> 00:14:05,600
processes all those things i mentioned

00:14:03,279 --> 00:14:08,000
are basically conceptual right these are

00:14:05,600 --> 00:14:11,040
things or guidelines that people

00:14:08,000 --> 00:14:12,480
define and then operate under but none

00:14:11,040 --> 00:14:15,440
of it

00:14:12,480 --> 00:14:17,360
means anything without automation and

00:14:15,440 --> 00:14:20,639
the reason i say that is the automation

00:14:17,360 --> 00:14:24,240
is what brings those concepts to life

00:14:20,639 --> 00:14:27,360
right they're the things that execute

00:14:24,240 --> 00:14:30,240
automation executes the uh continuous

00:14:27,360 --> 00:14:33,199
delivery concepts and plans that we make

00:14:30,240 --> 00:14:34,079
so wait i have uh a question here before

00:14:33,199 --> 00:14:38,480
i move on

00:14:34,079 --> 00:14:41,760
uh so the question is how

00:14:38,480 --> 00:14:43,760
uh how it tests to commit works

00:14:41,760 --> 00:14:46,399
for new features okay so i think the

00:14:43,760 --> 00:14:50,320
question is um

00:14:46,399 --> 00:14:52,560
let me let me rephrase this uh

00:14:50,320 --> 00:14:55,120
so how does it okay so so when you're

00:14:52,560 --> 00:14:56,959
testing the the new feature so um

00:14:55,120 --> 00:14:58,720
uh when i get further into the

00:14:56,959 --> 00:15:00,560
presentation i think in a couple slides

00:14:58,720 --> 00:15:02,160
so probably a little bit more clearer

00:15:00,560 --> 00:15:04,560
but what will happen is since you're

00:15:02,160 --> 00:15:08,560
running automation in your

00:15:04,560 --> 00:15:12,160
you know on your code changes

00:15:08,560 --> 00:15:14,720
part of the execution of a cicd pipeline

00:15:12,160 --> 00:15:16,880
is running tests right so if you define

00:15:14,720 --> 00:15:18,240
that in your csd pipeline

00:15:16,880 --> 00:15:19,680
like you know run a unit test or

00:15:18,240 --> 00:15:20,399
something it's going to happen every

00:15:19,680 --> 00:15:23,279
time

00:15:20,399 --> 00:15:24,320
code is committed and pushed upstream so

00:15:23,279 --> 00:15:24,959
that you know you're not doing it

00:15:24,320 --> 00:15:26,720
manually

00:15:24,959 --> 00:15:28,959
on your laptop you just let the system

00:15:26,720 --> 00:15:31,199
do it hopefully that was

00:15:28,959 --> 00:15:32,320
that was answered um so right getting

00:15:31,199 --> 00:15:35,519
back to automation

00:15:32,320 --> 00:15:36,480
um again you know this is uh automation

00:15:35,519 --> 00:15:39,519
is what brings

00:15:36,480 --> 00:15:42,480
all of these processes to life

00:15:39,519 --> 00:15:43,519
and um we're going to talk about cicd

00:15:42,480 --> 00:15:47,680
pipelines right so

00:15:43,519 --> 00:15:50,160
when you have your automation now the

00:15:47,680 --> 00:15:52,639
uh so sorry we have another question uh

00:15:50,160 --> 00:15:55,920
testing comes under ci or cd

00:15:52,639 --> 00:15:59,040
uh both my answer to that is both um

00:15:55,920 --> 00:16:00,639
because ci pertains mainly to the

00:15:59,040 --> 00:16:02,079
developer side of things where you're

00:16:00,639 --> 00:16:04,079
like writing code

00:16:02,079 --> 00:16:06,079
and you know you're doing that iterative

00:16:04,079 --> 00:16:08,880
testing um but then

00:16:06,079 --> 00:16:09,519
on the continuous deployment side you

00:16:08,880 --> 00:16:11,680
also

00:16:09,519 --> 00:16:12,639
want to test and validate right so when

00:16:11,680 --> 00:16:14,160
you're validating something you're

00:16:12,639 --> 00:16:16,000
usually testing it

00:16:14,160 --> 00:16:17,199
meaning deployments right maybe there's

00:16:16,000 --> 00:16:19,199
some security

00:16:17,199 --> 00:16:20,480
scans maybe some regulatory scans in

00:16:19,199 --> 00:16:23,680
your deployment

00:16:20,480 --> 00:16:26,160
patterns um so the answer is both

00:16:23,680 --> 00:16:26,959
uh but primarily if you're talking about

00:16:26,160 --> 00:16:30,639
code

00:16:26,959 --> 00:16:33,839
uh it's generally in the ci process

00:16:30,639 --> 00:16:34,320
so we're talking about ci cd pipelines

00:16:33,839 --> 00:16:38,480
right in

00:16:34,320 --> 00:16:41,680
automation the automation itself is your

00:16:38,480 --> 00:16:42,320
uh again the the mechanism right to

00:16:41,680 --> 00:16:45,279
execute

00:16:42,320 --> 00:16:47,040
um with circleci as a platform that's

00:16:45,279 --> 00:16:47,680
what we are we are the automation that

00:16:47,040 --> 00:16:49,839
brings your

00:16:47,680 --> 00:16:50,959
your your concepts to life your

00:16:49,839 --> 00:16:53,199
continuous delivery

00:16:50,959 --> 00:16:54,639
and software development process to life

00:16:53,199 --> 00:16:56,720
um and they're defined what

00:16:54,639 --> 00:16:58,639
in what we call a ci cd pipeline or

00:16:56,720 --> 00:17:02,160
continuous delivery pipeline

00:16:58,639 --> 00:17:02,720
uh and those are built upon jobs right

00:17:02,160 --> 00:17:04,880
so

00:17:02,720 --> 00:17:07,280
if you look at this diagram it's a quick

00:17:04,880 --> 00:17:08,799
snapshot of the circle ci dashboard and

00:17:07,280 --> 00:17:10,959
and if you were to use

00:17:08,799 --> 00:17:12,480
uh our tool this is what kind of what

00:17:10,959 --> 00:17:13,679
you would see with your pipelines as you

00:17:12,480 --> 00:17:16,240
can see right there's

00:17:13,679 --> 00:17:17,280
every every little square box there is

00:17:16,240 --> 00:17:20,319
in in this area

00:17:17,280 --> 00:17:23,120
is a a job right it's a block of

00:17:20,319 --> 00:17:24,160
commands that perform a specific

00:17:23,120 --> 00:17:26,799
function

00:17:24,160 --> 00:17:27,280
so if you can look if you see at the the

00:17:26,799 --> 00:17:29,360
left

00:17:27,280 --> 00:17:31,360
bottom boxes run tests and if you work

00:17:29,360 --> 00:17:33,440
your way up uh we're building a docker

00:17:31,360 --> 00:17:37,520
image and then right i'm also creating a

00:17:33,440 --> 00:17:39,120
kubernetes cluster in this uh example

00:17:37,520 --> 00:17:40,799
uh but you can see it's gonna you know

00:17:39,120 --> 00:17:43,360
move from the left

00:17:40,799 --> 00:17:44,840
excuse me to the right as our pipelines

00:17:43,360 --> 00:17:48,240
succeed

00:17:44,840 --> 00:17:51,679
so once you have that um

00:17:48,240 --> 00:17:54,160
set up right the cicd pipelines

00:17:51,679 --> 00:17:56,000
are really really important for what i'm

00:17:54,160 --> 00:17:58,559
going to talk about next which is

00:17:56,000 --> 00:18:00,000
performing continuous delivery at scale

00:17:58,559 --> 00:18:01,039
if there's any questions yeah there are

00:18:00,000 --> 00:18:03,120
some questions great

00:18:01,039 --> 00:18:04,160
so before i move on let me answer some

00:18:03,120 --> 00:18:07,600
questions here

00:18:04,160 --> 00:18:09,120
so uh what are the tools uh uh i guess

00:18:07,600 --> 00:18:12,480
what are the tools used in

00:18:09,120 --> 00:18:14,960
cd so in the context

00:18:12,480 --> 00:18:15,840
of circle ci for our continuous

00:18:14,960 --> 00:18:17,280
deployment

00:18:15,840 --> 00:18:20,080
if you're talking about that which i

00:18:17,280 --> 00:18:23,200
assume you're talking about

00:18:20,080 --> 00:18:24,880
the the tooling is pretty much anything

00:18:23,200 --> 00:18:28,000
you use right so if you're using

00:18:24,880 --> 00:18:30,960
an amazon aws cli to

00:18:28,000 --> 00:18:32,400
deploy things to m to amazon uh if

00:18:30,960 --> 00:18:33,840
you're using that cloud provider that's

00:18:32,400 --> 00:18:35,919
great if you're using google's

00:18:33,840 --> 00:18:37,200
cli to deploy to google that's that's

00:18:35,919 --> 00:18:39,200
also you know

00:18:37,200 --> 00:18:41,120
available and you can use that you could

00:18:39,200 --> 00:18:44,240
even use infrastructure's code

00:18:41,120 --> 00:18:47,840
technology such as emphasis is uh sorry

00:18:44,240 --> 00:18:48,480
such as terraform or pollumi or ansible

00:18:47,840 --> 00:18:50,799
right whatever

00:18:48,480 --> 00:18:52,720
whatever tooling you want at circle ci

00:18:50,799 --> 00:18:54,240
we want to meet the developer where

00:18:52,720 --> 00:18:56,480
where they're at so you can leverage

00:18:54,240 --> 00:18:57,760
any kind of tooling you want within that

00:18:56,480 --> 00:19:00,400
because it's just essentially

00:18:57,760 --> 00:19:02,799
automation right and then the other

00:19:00,400 --> 00:19:05,039
question here is

00:19:02,799 --> 00:19:05,919
is it a good idea to integrate or i

00:19:05,039 --> 00:19:10,080
guess integrate

00:19:05,919 --> 00:19:13,120
cd into production environments yes

00:19:10,080 --> 00:19:13,600
if you ask me yes you should be doing

00:19:13,120 --> 00:19:15,039
that

00:19:13,600 --> 00:19:16,799
there's a couple reasons i mean you

00:19:15,039 --> 00:19:18,000
could still have your staging you can

00:19:16,799 --> 00:19:20,559
still have you know q

00:19:18,000 --> 00:19:21,280
a type patterns within your software

00:19:20,559 --> 00:19:23,280
development

00:19:21,280 --> 00:19:24,480
and release cycles but i would

00:19:23,280 --> 00:19:27,760
definitely recommend

00:19:24,480 --> 00:19:30,799
um excuse me going in and

00:19:27,760 --> 00:19:33,520
do you know leveraging uh continuous

00:19:30,799 --> 00:19:36,240
deployment in production the reason is

00:19:33,520 --> 00:19:38,080
your production environment you're never

00:19:36,240 --> 00:19:41,200
going to be able to replicate it

00:19:38,080 --> 00:19:43,120
100 right no matter how much you try um

00:19:41,200 --> 00:19:44,320
it's just not going to going to you know

00:19:43,120 --> 00:19:45,840
pan out for you you're never going to

00:19:44,320 --> 00:19:47,520
reach parity

00:19:45,840 --> 00:19:48,960
so you know obviously you want to

00:19:47,520 --> 00:19:51,280
control

00:19:48,960 --> 00:19:54,160
the way you deploy that and keep really

00:19:51,280 --> 00:19:56,000
good controls around how that's deployed

00:19:54,160 --> 00:19:58,160
but i would definitely you know

00:19:56,000 --> 00:20:00,880
recommend you start looking at

00:19:58,160 --> 00:20:02,159
uh you know implementing a production

00:20:00,880 --> 00:20:03,840
level deployments because that's the

00:20:02,159 --> 00:20:07,360
whole point right is to get

00:20:03,840 --> 00:20:08,960
the code that you built to production as

00:20:07,360 --> 00:20:12,159
quickly as possible and

00:20:08,960 --> 00:20:15,280
as effortlessly as possible

00:20:12,159 --> 00:20:16,960
and there's one more question here so i

00:20:15,280 --> 00:20:19,679
think beau ci ncd

00:20:16,960 --> 00:20:21,039
needs feedback loop for automation may i

00:20:19,679 --> 00:20:25,039
know your view

00:20:21,039 --> 00:20:28,640
of this uh yeah so yes feedback loops

00:20:25,039 --> 00:20:30,480
are exactly what is required to have a

00:20:28,640 --> 00:20:34,000
successful and efficient

00:20:30,480 --> 00:20:34,720
um and and consistent uh continuous

00:20:34,000 --> 00:20:38,240
delivery

00:20:34,720 --> 00:20:39,280
uh operation right so like the idea is

00:20:38,240 --> 00:20:40,960
to get things done

00:20:39,280 --> 00:20:43,280
as quickly as possible but you want to

00:20:40,960 --> 00:20:45,840
have quality built in right and and

00:20:43,280 --> 00:20:47,039
by testing that helps ensure it doesn't

00:20:45,840 --> 00:20:49,200
give you 100

00:20:47,039 --> 00:20:50,080
feels right it doesn't cover all the use

00:20:49,200 --> 00:20:52,559
cases but it

00:20:50,080 --> 00:20:55,200
it will minimize the risk that you

00:20:52,559 --> 00:20:58,559
introduce you know some weird bug

00:20:55,200 --> 00:21:00,799
uh because you didn't test so um

00:20:58,559 --> 00:21:02,159
so let's go ahead and move on uh i know

00:21:00,799 --> 00:21:05,760
there's some other questions here

00:21:02,159 --> 00:21:08,960
um so my voice isn't clear i'll try to

00:21:05,760 --> 00:21:10,960
speak up um

00:21:08,960 --> 00:21:12,640
so uh yeah let's go and jump into

00:21:10,960 --> 00:21:13,520
continuous delivery a lot of stuff to

00:21:12,640 --> 00:21:16,720
cover here

00:21:13,520 --> 00:21:18,080
um so with

00:21:16,720 --> 00:21:19,760
you know talking about delivery

00:21:18,080 --> 00:21:21,679
continuous delivery at scale

00:21:19,760 --> 00:21:24,000
what i'm showing you here is a very

00:21:21,679 --> 00:21:26,240
generic um

00:21:24,000 --> 00:21:27,039
oh is this let me get rid of that okay

00:21:26,240 --> 00:21:30,640
so

00:21:27,039 --> 00:21:32,400
it's a very generic um sdlc or software

00:21:30,640 --> 00:21:35,520
development life cycle

00:21:32,400 --> 00:21:39,360
like i guess pipeline and

00:21:35,520 --> 00:21:42,000
you know what cicd mainly focuses in on

00:21:39,360 --> 00:21:42,400
in this sdlc example is generally going

00:21:42,000 --> 00:21:43,760
to be

00:21:42,400 --> 00:21:46,640
in the development testing and

00:21:43,760 --> 00:21:47,120
deployment phases of of your processes

00:21:46,640 --> 00:21:51,120
right

00:21:47,120 --> 00:21:55,360
so this is where marrying cicd

00:21:51,120 --> 00:21:57,360
and um and into your software

00:21:55,360 --> 00:21:59,919
process development processes is really

00:21:57,360 --> 00:22:01,600
important uh and and most beneficial i

00:21:59,919 --> 00:22:04,000
should say as well

00:22:01,600 --> 00:22:05,280
because as we all know right code and

00:22:04,000 --> 00:22:07,120
repositories grow

00:22:05,280 --> 00:22:08,640
over time and that's where i'm talking

00:22:07,120 --> 00:22:12,000
about um you know

00:22:08,640 --> 00:22:15,120
the the complexities growing the

00:22:12,000 --> 00:22:16,640
volume of code grows and you have to

00:22:15,120 --> 00:22:19,360
stay on top of all of that

00:22:16,640 --> 00:22:20,960
you know all of those things and be able

00:22:19,360 --> 00:22:23,520
to you know

00:22:20,960 --> 00:22:25,520
address them as soon as possible because

00:22:23,520 --> 00:22:27,600
if you're not maintaining

00:22:25,520 --> 00:22:29,200
that growth it's going to eventually

00:22:27,600 --> 00:22:32,240
like bite you right it's going to

00:22:29,200 --> 00:22:34,640
impact you negatively and establishing

00:22:32,240 --> 00:22:37,120
and maintaining mechanisms

00:22:34,640 --> 00:22:38,960
for scaling you know that provides solid

00:22:37,120 --> 00:22:41,039
support for pipelines is very difficult

00:22:38,960 --> 00:22:43,679
to achieve without constant

00:22:41,039 --> 00:22:44,240
surveillance and interactive reviews

00:22:43,679 --> 00:22:46,320
meaning

00:22:44,240 --> 00:22:47,280
you know constantly going back and

00:22:46,320 --> 00:22:50,400
checking are

00:22:47,280 --> 00:22:54,720
are our processes you know kind of

00:22:50,400 --> 00:22:57,120
matching um our our continuous delivery

00:22:54,720 --> 00:22:58,880
uh processes right so that happens um

00:22:57,120 --> 00:23:00,400
and that's what i call like a misaligned

00:22:58,880 --> 00:23:02,960
ci cd segment

00:23:00,400 --> 00:23:04,080
um and that can get you into some

00:23:02,960 --> 00:23:06,320
trouble as well

00:23:04,080 --> 00:23:07,600
so when your processes are not properly

00:23:06,320 --> 00:23:12,720
aligned

00:23:07,600 --> 00:23:14,720
you know you can start introducing huge

00:23:12,720 --> 00:23:16,960
you know inefficiencies slowing the

00:23:14,720 --> 00:23:20,000
pipeline and release processes down

00:23:16,960 --> 00:23:22,799
you can also substantially

00:23:20,000 --> 00:23:23,840
hur your quality right of the of the

00:23:22,799 --> 00:23:27,520
code

00:23:23,840 --> 00:23:29,679
one of the things that happens here is

00:23:27,520 --> 00:23:30,799
if you're looking at this diagram i'm

00:23:29,679 --> 00:23:32,720
showing you like you know the

00:23:30,799 --> 00:23:34,080
development phase things are kind of out

00:23:32,720 --> 00:23:36,080
of whack they're not really

00:23:34,080 --> 00:23:38,799
properly aligned with your software

00:23:36,080 --> 00:23:41,120
development processes or your guidelines

00:23:38,799 --> 00:23:42,320
this happens a lot when teams are

00:23:41,120 --> 00:23:45,760
interested

00:23:42,320 --> 00:23:50,080
in kind of you know not working in a

00:23:45,760 --> 00:23:51,760
a in a in a controlled process um it

00:23:50,080 --> 00:23:54,320
does happen occasionally

00:23:51,760 --> 00:23:55,279
amongst teams and within organizations

00:23:54,320 --> 00:23:57,840
that

00:23:55,279 --> 00:23:58,799
uh you know your software development

00:23:57,840 --> 00:24:00,720
processes

00:23:58,799 --> 00:24:01,840
don't exactly match up with your

00:24:00,720 --> 00:24:04,559
continuous delivery

00:24:01,840 --> 00:24:06,080
processes and that's where like you know

00:24:04,559 --> 00:24:09,120
everything's kind of out of whack

00:24:06,080 --> 00:24:10,000
in in in different layers um so but i'll

00:24:09,120 --> 00:24:12,880
be talking about that

00:24:10,000 --> 00:24:13,279
aligning these in a little bit here so

00:24:12,880 --> 00:24:15,760
um

00:24:13,279 --> 00:24:17,760
so right when you have these misaligned

00:24:15,760 --> 00:24:20,640
ci cd segments

00:24:17,760 --> 00:24:21,919
that starts to introduce confusion among

00:24:20,640 --> 00:24:24,000
your teams like

00:24:21,919 --> 00:24:26,400
who's doing what when are they doing it

00:24:24,000 --> 00:24:29,919
why isn't the automation reflecting this

00:24:26,400 --> 00:24:31,360
because again you know your your ci cd

00:24:29,919 --> 00:24:34,159
your continuous delivery

00:24:31,360 --> 00:24:35,919
cycles or pipelines are a reflection of

00:24:34,159 --> 00:24:38,000
your software development

00:24:35,919 --> 00:24:40,320
practices and they well they should be

00:24:38,000 --> 00:24:42,880
at least and when they're not aligned

00:24:40,320 --> 00:24:43,679
it will diminish the quality of the code

00:24:42,880 --> 00:24:45,919
you'll actually

00:24:43,679 --> 00:24:47,760
waste a ton of cycles development cycles

00:24:45,919 --> 00:24:50,480
which is very expensive because again

00:24:47,760 --> 00:24:51,919
developers are you know very expensive

00:24:50,480 --> 00:24:54,159
they're the most expensive

00:24:51,919 --> 00:24:56,159
piece to building software in most cases

00:24:54,159 --> 00:24:58,960
and then it will definitely slow your

00:24:56,159 --> 00:25:02,159
relay cycles down dramatically

00:24:58,960 --> 00:25:04,960
so one of the other things that um

00:25:02,159 --> 00:25:07,679
when you're operating at scale is uh

00:25:04,960 --> 00:25:09,440
directly attributed to the platform cicd

00:25:07,679 --> 00:25:12,320
platform effectiveness so

00:25:09,440 --> 00:25:13,520
again the cicd platform that i'm

00:25:12,320 --> 00:25:16,159
addressing here

00:25:13,520 --> 00:25:17,120
or at least an example is circleci uh

00:25:16,159 --> 00:25:18,640
that's what we do

00:25:17,120 --> 00:25:20,400
we provide the automation we are the

00:25:18,640 --> 00:25:21,360
cicd platform for your for your

00:25:20,400 --> 00:25:24,480
pipelines

00:25:21,360 --> 00:25:26,880
um and you must ensure that you

00:25:24,480 --> 00:25:28,000
have a platform that's very robust very

00:25:26,880 --> 00:25:30,480
resilient

00:25:28,000 --> 00:25:32,080
and that can scale um ci cd platforms

00:25:30,480 --> 00:25:34,480
come in many different flavors

00:25:32,080 --> 00:25:35,360
many different companies they actually

00:25:34,480 --> 00:25:38,960
so like um

00:25:35,360 --> 00:25:42,159
you know circle ci we solely focus on

00:25:38,960 --> 00:25:45,600
uh the continuous delivery pipeline um

00:25:42,159 --> 00:25:48,799
whereas other uh you know platforms

00:25:45,600 --> 00:25:49,440
they may be uh more of a all-in-one

00:25:48,799 --> 00:25:52,559
solution

00:25:49,440 --> 00:25:55,200
and cicd features are kind of bolted on

00:25:52,559 --> 00:25:57,200
uh and and they feel kind of bulky and

00:25:55,200 --> 00:25:58,320
slow and that city is really not their

00:25:57,200 --> 00:26:01,440
primary focus

00:25:58,320 --> 00:26:04,640
um they may provide you some you know

00:26:01,440 --> 00:26:06,880
effective uh ci cd uh

00:26:04,640 --> 00:26:08,559
performance on your platform but as your

00:26:06,880 --> 00:26:10,159
as again as your as your code and your

00:26:08,559 --> 00:26:12,799
project scale

00:26:10,159 --> 00:26:14,320
those solutions uh the performance if

00:26:12,799 --> 00:26:15,360
they're not scaling properly or being

00:26:14,320 --> 00:26:17,360
very resilient or

00:26:15,360 --> 00:26:19,120
robust can can kind of hurt you in the

00:26:17,360 --> 00:26:21,600
end so one of the advice

00:26:19,120 --> 00:26:23,440
i'd give you is to look at ucicd

00:26:21,600 --> 00:26:23,760
platforms evaluate them make sure that

00:26:23,440 --> 00:26:26,080
they

00:26:23,760 --> 00:26:28,559
are you know filling the the needs that

00:26:26,080 --> 00:26:30,159
you have for your cicd pipeline and are

00:26:28,559 --> 00:26:32,559
able to scale

00:26:30,159 --> 00:26:33,840
with your workloads so as you grow more

00:26:32,559 --> 00:26:35,520
members on your team

00:26:33,840 --> 00:26:37,520
you know the infrastructure needs to

00:26:35,520 --> 00:26:39,760
also be able to be

00:26:37,520 --> 00:26:42,080
resilient robust and scale with your

00:26:39,760 --> 00:26:45,360
workloads

00:26:42,080 --> 00:26:48,880
so um one thing i will say

00:26:45,360 --> 00:26:50,840
you know teams really must understand

00:26:48,880 --> 00:26:52,000
that reliance on ci cd tooling and

00:26:50,840 --> 00:26:53,600
execution

00:26:52,000 --> 00:26:55,360
is essential and will increase

00:26:53,600 --> 00:26:57,840
dramatically further

00:26:55,360 --> 00:26:58,799
cementing your csd platforms as mission

00:26:57,840 --> 00:27:01,919
critical

00:26:58,799 --> 00:27:04,720
and if they're not working properly and

00:27:01,919 --> 00:27:06,000
you know you don't have ci cd

00:27:04,720 --> 00:27:07,840
capabilities for your

00:27:06,000 --> 00:27:09,039
team um it's going to your

00:27:07,840 --> 00:27:11,919
productivity

00:27:09,039 --> 00:27:12,240
so um you you know one emphasis here is

00:27:11,919 --> 00:27:15,440
to

00:27:12,240 --> 00:27:16,880
properly manage your your platforms make

00:27:15,440 --> 00:27:18,880
sure that again that they're

00:27:16,880 --> 00:27:20,399
they're resilient they're robust and can

00:27:18,880 --> 00:27:21,600
scale with your workloads

00:27:20,399 --> 00:27:23,440
and that they're properly being

00:27:21,600 --> 00:27:26,159
maintained um that's

00:27:23,440 --> 00:27:26,880
one of the like huge efficiency killers

00:27:26,159 --> 00:27:29,039
is

00:27:26,880 --> 00:27:30,240
when your icd platforms are not working

00:27:29,039 --> 00:27:32,399
properly

00:27:30,240 --> 00:27:34,399
you're going to be in in a world of hurt

00:27:32,399 --> 00:27:35,360
right as a software developer as a

00:27:34,399 --> 00:27:39,039
software development

00:27:35,360 --> 00:27:41,039
team so um i'll stop here

00:27:39,039 --> 00:27:42,559
before i jump into the next section

00:27:41,039 --> 00:27:43,919
let's look at some questions

00:27:42,559 --> 00:27:45,760
which programming language would you

00:27:43,919 --> 00:27:46,880
recommend for the automation oh that's a

00:27:45,760 --> 00:27:50,320
good question

00:27:46,880 --> 00:27:52,720
so the reason why uh

00:27:50,320 --> 00:27:54,399
yeah so so right we're all developers um

00:27:52,720 --> 00:27:57,760
the reason why this is a good question

00:27:54,399 --> 00:28:00,880
is uh in general um

00:27:57,760 --> 00:28:02,799
mostly icd platforms have settled on and

00:28:00,880 --> 00:28:03,520
this isn't quite a language it's a data

00:28:02,799 --> 00:28:06,000
structure

00:28:03,520 --> 00:28:07,919
in order to define your software all

00:28:06,000 --> 00:28:08,720
right i'm sorry your continuous delivery

00:28:07,919 --> 00:28:11,760
pipelines

00:28:08,720 --> 00:28:13,600
uh the language or the sorry the data

00:28:11,760 --> 00:28:16,880
structure the syntax that we use

00:28:13,600 --> 00:28:18,720
is called yaml and i'm sure if any of

00:28:16,880 --> 00:28:22,799
you have worked with any more

00:28:18,720 --> 00:28:25,039
modern cloud native type

00:28:22,799 --> 00:28:26,640
systems or solutions you're probably

00:28:25,039 --> 00:28:28,640
quite familiar with what yaml

00:28:26,640 --> 00:28:30,640
is which is the data structure but we

00:28:28,640 --> 00:28:32,960
use it's a it's a human readable

00:28:30,640 --> 00:28:34,640
uh very highly declarative data

00:28:32,960 --> 00:28:36,720
structure that we use to

00:28:34,640 --> 00:28:38,240
define things and one of the cool things

00:28:36,720 --> 00:28:41,520
we can do with it is define

00:28:38,240 --> 00:28:44,960
commands right so it's a nice um

00:28:41,520 --> 00:28:48,000
it's a nice syntax to use human readable

00:28:44,960 --> 00:28:49,120
it can get quite verbose and wordy but

00:28:48,000 --> 00:28:52,960
at the end of the day

00:28:49,120 --> 00:28:55,919
it is what we use today

00:28:52,960 --> 00:28:57,760
and actually most ci cd modern most

00:28:55,919 --> 00:29:01,679
modern ci cd platforms are

00:28:57,760 --> 00:29:01,679
defining your pipelines within yaml

00:29:02,080 --> 00:29:05,840
any approval process the next question

00:29:04,000 --> 00:29:06,960
is and are there any approval processes

00:29:05,840 --> 00:29:09,520
in this pipeline

00:29:06,960 --> 00:29:11,360
so generally you don't want to have that

00:29:09,520 --> 00:29:12,159
right manual intervention in any

00:29:11,360 --> 00:29:15,600
pipeline

00:29:12,159 --> 00:29:17,120
but there are situations where you need

00:29:15,600 --> 00:29:19,200
it right so like if you're in a

00:29:17,120 --> 00:29:23,200
regulatory space and you need to have

00:29:19,200 --> 00:29:24,320
some eyes on a segment or a job before

00:29:23,200 --> 00:29:28,080
you can continue

00:29:24,320 --> 00:29:30,240
and you need that manual approval yes uh

00:29:28,080 --> 00:29:31,919
at least at circleci we have an approval

00:29:30,240 --> 00:29:34,240
process uh you know and

00:29:31,919 --> 00:29:36,000
we call it an approvals job and you can

00:29:34,240 --> 00:29:37,360
set that in your pipeline at any point

00:29:36,000 --> 00:29:38,880
you want to see

00:29:37,360 --> 00:29:40,799
you know some you want to stop the

00:29:38,880 --> 00:29:41,200
pipeline until someone manually can look

00:29:40,799 --> 00:29:42,799
at it

00:29:41,200 --> 00:29:45,360
and then let it go you know click the

00:29:42,799 --> 00:29:48,000
approval and it will proceed

00:29:45,360 --> 00:29:49,200
so yes there are approval processes next

00:29:48,000 --> 00:29:51,919
question do you have any

00:29:49,200 --> 00:29:53,679
numbers regarding the performance of

00:29:51,919 --> 00:29:57,039
your machines versus the ones

00:29:53,679 --> 00:30:00,320
provided by azure devops uh

00:29:57,039 --> 00:30:00,799
i believe there are internally there are

00:30:00,320 --> 00:30:02,480
some

00:30:00,799 --> 00:30:04,159
some numbers i don't know them i don't

00:30:02,480 --> 00:30:08,480
have them uh but yeah

00:30:04,159 --> 00:30:11,200
um we're yeah we probably have them um

00:30:08,480 --> 00:30:12,880
if if you want to have a fur discussion

00:30:11,200 --> 00:30:14,960
on that either hit me up on twitter

00:30:12,880 --> 00:30:16,480
or on our discord site and we can see

00:30:14,960 --> 00:30:18,559
what we can do to see if we have

00:30:16,480 --> 00:30:20,399
some metrics we can share but i'm not

00:30:18,559 --> 00:30:23,520
sure where that lives

00:30:20,399 --> 00:30:26,960
um so the next question is

00:30:23,520 --> 00:30:27,760
accepts accept static code scan security

00:30:26,960 --> 00:30:29,360
testing

00:30:27,760 --> 00:30:32,000
are there any other security features

00:30:29,360 --> 00:30:34,080
that we can implement in cicd pipelines

00:30:32,000 --> 00:30:35,679
uh the answer is you can implement at

00:30:34,080 --> 00:30:36,080
least in the circleci platform you can

00:30:35,679 --> 00:30:39,200
implement

00:30:36,080 --> 00:30:41,679
pretty much any kind of security uh

00:30:39,200 --> 00:30:42,799
you know tooling or or features or or

00:30:41,679 --> 00:30:44,720
processes that

00:30:42,799 --> 00:30:46,159
that you work with again you know

00:30:44,720 --> 00:30:48,159
circleci designed

00:30:46,159 --> 00:30:49,760
to build to meet developers where they

00:30:48,159 --> 00:30:52,080
are so we

00:30:49,760 --> 00:30:52,799
enable you to run pretty much whatever

00:30:52,080 --> 00:30:56,399
you want

00:30:52,799 --> 00:30:58,640
uh with within reason on in your in your

00:30:56,399 --> 00:31:00,720
in your csd pipeline runtimes so

00:30:58,640 --> 00:31:02,240
whatever tools you're using right now

00:31:00,720 --> 00:31:04,159
uh and by the way that that's pretty

00:31:02,240 --> 00:31:07,919
much true across the board with with

00:31:04,159 --> 00:31:09,600
most uh most ci modern cicd tooling

00:31:07,919 --> 00:31:11,919
there are limitations and restrictions

00:31:09,600 --> 00:31:13,360
but uh in general yeah you can pretty

00:31:11,919 --> 00:31:13,919
much run whatever you want however you

00:31:13,360 --> 00:31:16,559
want

00:31:13,919 --> 00:31:18,080
within those platforms uh is there the

00:31:16,559 --> 00:31:19,760
next question is there a best practice

00:31:18,080 --> 00:31:21,360
around making builds for different

00:31:19,760 --> 00:31:25,200
target os environments

00:31:21,360 --> 00:31:28,720
in the pipeline yes there are um

00:31:25,200 --> 00:31:30,080
so you know it depends on um everyone's

00:31:28,720 --> 00:31:30,799
case is different but there are some

00:31:30,080 --> 00:31:33,679
common

00:31:30,799 --> 00:31:34,640
guidelines right that you can use to to

00:31:33,679 --> 00:31:36,240
build things

00:31:34,640 --> 00:31:38,399
um you know obviously when you're

00:31:36,240 --> 00:31:39,760
building for different architectures so

00:31:38,399 --> 00:31:41,200
to speak like let's say you're building

00:31:39,760 --> 00:31:44,080
for

00:31:41,200 --> 00:31:45,200
x86 or arm which is what we introduced

00:31:44,080 --> 00:31:47,120
recently as well

00:31:45,200 --> 00:31:48,880
the capabilities are there to now

00:31:47,120 --> 00:31:50,240
natively build

00:31:48,880 --> 00:31:52,240
you know software for those two

00:31:50,240 --> 00:31:54,720
architectures um

00:31:52,240 --> 00:31:56,559
it's definitely something that's like

00:31:54,720 --> 00:31:57,600
you know again you can do it many many

00:31:56,559 --> 00:31:59,919
different ways

00:31:57,600 --> 00:32:01,360
uh but i would say that you know uh

00:31:59,919 --> 00:32:04,559
doing them efficiently is

00:32:01,360 --> 00:32:07,840
is very important so um you know

00:32:04,559 --> 00:32:09,120
putting uh an emphasis on on optimizing

00:32:07,840 --> 00:32:10,399
those build processes

00:32:09,120 --> 00:32:12,240
so that they get done as quickly as

00:32:10,399 --> 00:32:13,360
possible but you can implement

00:32:12,240 --> 00:32:16,799
pretty much whatever kind of build

00:32:13,360 --> 00:32:19,679
process you want for those architectures

00:32:16,799 --> 00:32:21,360
um so let's go ahead and jump into

00:32:19,679 --> 00:32:22,159
optimizing pipelines i think i answered

00:32:21,360 --> 00:32:25,919
all the questions

00:32:22,159 --> 00:32:28,080
um so what i mentioned earlier was

00:32:25,919 --> 00:32:29,919
you know circle ci or nest circles yeah

00:32:28,080 --> 00:32:32,000
but continuous delivery

00:32:29,919 --> 00:32:33,840
is is really important it's critical

00:32:32,000 --> 00:32:34,559
mission critical for development teams

00:32:33,840 --> 00:32:38,720
to

00:32:34,559 --> 00:32:40,080
to implement this and ensure that um

00:32:38,720 --> 00:32:42,080
you know their pipelines are running

00:32:40,080 --> 00:32:43,279
efficiently so the

00:32:42,080 --> 00:32:44,880
one of the main reasons is as i

00:32:43,279 --> 00:32:46,640
mentioned earlier right you don't want

00:32:44,880 --> 00:32:47,200
to waste any developer cycles meaning

00:32:46,640 --> 00:32:50,399
you don't want

00:32:47,200 --> 00:32:53,679
humans sitting around waiting for

00:32:50,399 --> 00:32:54,480
you know uh feedback on the code changes

00:32:53,679 --> 00:32:56,399
that they're making

00:32:54,480 --> 00:32:57,679
because your maybe your system is down

00:32:56,399 --> 00:32:59,440
or whatever um

00:32:57,679 --> 00:33:01,360
you know whatever kind of situations and

00:32:59,440 --> 00:33:03,279
the reason is um you know

00:33:01,360 --> 00:33:04,559
we've calculated that the average cost

00:33:03,279 --> 00:33:06,880
of developers

00:33:04,559 --> 00:33:08,799
time per minute equals to about a buck

00:33:06,880 --> 00:33:11,200
or a dollar

00:33:08,799 --> 00:33:13,600
and 45 cents right every minute so

00:33:11,200 --> 00:33:15,519
imagine if you had to

00:33:13,600 --> 00:33:16,960
if you had uh let's say i don't know 100

00:33:15,519 --> 00:33:18,880
developers sitting around

00:33:16,960 --> 00:33:20,320
for 60 minutes because your ci cd

00:33:18,880 --> 00:33:22,720
pipelines

00:33:20,320 --> 00:33:24,880
or your platform it's not functioning

00:33:22,720 --> 00:33:27,760
right it's it's down um

00:33:24,880 --> 00:33:28,960
the time wasted and the developer uh

00:33:27,760 --> 00:33:32,240
cycles wasted

00:33:28,960 --> 00:33:34,000
is devastating so um it's in in it can

00:33:32,240 --> 00:33:36,960
get very very expensive so

00:33:34,000 --> 00:33:38,000
you know with that in mind um optimizing

00:33:36,960 --> 00:33:40,640
pipelines

00:33:38,000 --> 00:33:41,120
is super important but you might be

00:33:40,640 --> 00:33:42,640
figure

00:33:41,120 --> 00:33:44,720
asking yourself like okay so how the

00:33:42,640 --> 00:33:45,039
heck do i you know optimize angel how do

00:33:44,720 --> 00:33:46,880
i

00:33:45,039 --> 00:33:48,480
what do i look for and i'm gonna touch

00:33:46,880 --> 00:33:52,080
on a few things

00:33:48,480 --> 00:33:55,600
um one of the ways that or one of the

00:33:52,080 --> 00:33:57,679
like easy ways to become inefficient or

00:33:55,600 --> 00:34:00,000
or your pipeline is becoming very slow

00:33:57,679 --> 00:34:01,440
and and not really and clunky right not

00:34:00,000 --> 00:34:03,600
not really streamlined

00:34:01,440 --> 00:34:05,360
uh is again by what i talked about

00:34:03,600 --> 00:34:08,399
earlier is having

00:34:05,360 --> 00:34:10,800
misaligned ci cd segments with your

00:34:08,399 --> 00:34:14,320
software development processes

00:34:10,800 --> 00:34:16,240
and so remember this diagram

00:34:14,320 --> 00:34:17,839
i was talking about how everything's

00:34:16,240 --> 00:34:19,520
kind of jacked up right not really

00:34:17,839 --> 00:34:21,359
aligned

00:34:19,520 --> 00:34:22,560
but this is kind of like what you want

00:34:21,359 --> 00:34:24,399
to see

00:34:22,560 --> 00:34:26,560
moving forward you want to see that your

00:34:24,399 --> 00:34:29,440
development processes

00:34:26,560 --> 00:34:31,760
are properly aligned and executing in

00:34:29,440 --> 00:34:34,480
accordance with your guidelines right

00:34:31,760 --> 00:34:35,679
you want to be testing debugging all

00:34:34,480 --> 00:34:37,280
that good stuff

00:34:35,679 --> 00:34:39,040
and that's where you can put like in

00:34:37,280 --> 00:34:42,560
that phase security

00:34:39,040 --> 00:34:45,359
uh you can do things like submitting and

00:34:42,560 --> 00:34:46,320
pushing and deploying your your your uh

00:34:45,359 --> 00:34:49,200
artifacts

00:34:46,320 --> 00:34:51,200
like maybe qa or staging right you can

00:34:49,200 --> 00:34:52,560
do all those things within that phase

00:34:51,200 --> 00:34:54,320
of your software development life cycle

00:34:52,560 --> 00:34:57,119
and then finally right deployment

00:34:54,320 --> 00:34:58,160
which can mean many many things um but

00:34:57,119 --> 00:35:00,880
at this point

00:34:58,160 --> 00:35:01,680
we're just gonna deploy to to production

00:35:00,880 --> 00:35:04,320
now if you notice

00:35:01,680 --> 00:35:05,920
all these things have a circle with

00:35:04,320 --> 00:35:09,040
arrows around them to indicate

00:35:05,920 --> 00:35:10,960
movement uh and iterative right

00:35:09,040 --> 00:35:13,200
processes so these things are happening

00:35:10,960 --> 00:35:14,480
all the time every time code changes

00:35:13,200 --> 00:35:17,040
but again you want to make sure that

00:35:14,480 --> 00:35:19,760
you're aligning those bits

00:35:17,040 --> 00:35:20,560
with your software development processes

00:35:19,760 --> 00:35:25,200
so that they're

00:35:20,560 --> 00:35:27,440
just simply running efficiently and also

00:35:25,200 --> 00:35:30,800
as designed right within that higher

00:35:27,440 --> 00:35:34,800
level software development process

00:35:30,800 --> 00:35:36,160
so one other way to optimize pipelines

00:35:34,800 --> 00:35:38,880
and this is a

00:35:36,160 --> 00:35:40,079
this is kind of a a thought that i had a

00:35:38,880 --> 00:35:42,160
couple years ago

00:35:40,079 --> 00:35:43,119
i noticed just with my engagements in

00:35:42,160 --> 00:35:45,119
the community

00:35:43,119 --> 00:35:46,560
that you know there's a lot of people

00:35:45,119 --> 00:35:49,200
talking about

00:35:46,560 --> 00:35:51,599
how there's gaps within their software

00:35:49,200 --> 00:35:55,119
development teams their release teams

00:35:51,599 --> 00:35:55,760
um you know they're they're they're just

00:35:55,119 --> 00:35:57,680
not

00:35:55,760 --> 00:35:59,520
gelling very well and you can throw

00:35:57,680 --> 00:36:00,000
devops into the mix as well where you

00:35:59,520 --> 00:36:01,680
know

00:36:00,000 --> 00:36:04,000
that concept there is where developers

00:36:01,680 --> 00:36:05,839
and operations teams are working

00:36:04,000 --> 00:36:08,240
kind of simultaneously and understanding

00:36:05,839 --> 00:36:10,240
each other's roles the reality is

00:36:08,240 --> 00:36:12,480
that's a really hard adoption and

00:36:10,240 --> 00:36:14,079
implementation to make and it's never

00:36:12,480 --> 00:36:15,760
the same across the board for any

00:36:14,079 --> 00:36:18,640
organization or team

00:36:15,760 --> 00:36:20,320
but what i'm proposing is or what i've

00:36:18,640 --> 00:36:21,599
proposed in a blog post which i'll share

00:36:20,320 --> 00:36:23,520
the link to later is

00:36:21,599 --> 00:36:25,680
this concept of a continuous delivery

00:36:23,520 --> 00:36:26,000
engineer and i know our industry doesn't

00:36:25,680 --> 00:36:28,400
need

00:36:26,000 --> 00:36:29,040
another role right or another another

00:36:28,400 --> 00:36:30,640
title

00:36:29,040 --> 00:36:32,800
but i really believe that um a

00:36:30,640 --> 00:36:34,960
continuous delivery engineer

00:36:32,800 --> 00:36:36,720
is kind of going to be the future and

00:36:34,960 --> 00:36:39,680
this is why right so like

00:36:36,720 --> 00:36:42,000
uh in the blog post i just i describe a

00:36:39,680 --> 00:36:43,359
lot more detail which you can read later

00:36:42,000 --> 00:36:45,280
which i'll share that link but

00:36:43,359 --> 00:36:46,560
essentially there's two characteristics

00:36:45,280 --> 00:36:49,119
here that i define

00:36:46,560 --> 00:36:50,560
uh one is uh the that kind of the human

00:36:49,119 --> 00:36:51,359
element for this role like things you

00:36:50,560 --> 00:36:53,280
want in

00:36:51,359 --> 00:36:54,480
an individual that's in a continuous

00:36:53,280 --> 00:36:56,320
delivery engineer

00:36:54,480 --> 00:36:57,520
position to have is like strong

00:36:56,320 --> 00:36:59,599
communication skills

00:36:57,520 --> 00:37:01,440
i think you want that in every role but

00:36:59,599 --> 00:37:03,599
it's really important for that

00:37:01,440 --> 00:37:05,680
for this role in my opinion you want

00:37:03,599 --> 00:37:06,560
them to have keen analytical skills

00:37:05,680 --> 00:37:08,800
which means

00:37:06,560 --> 00:37:10,240
they're able to understand you know

00:37:08,800 --> 00:37:13,280
identify and understand

00:37:10,240 --> 00:37:14,800
patterns so that they can um you know

00:37:13,280 --> 00:37:17,920
decompose those complex

00:37:14,800 --> 00:37:20,000
patterns and processes and describe them

00:37:17,920 --> 00:37:21,280
proficiently to folks who are not in the

00:37:20,000 --> 00:37:22,480
industry right they could be business

00:37:21,280 --> 00:37:24,320
stakeholders

00:37:22,480 --> 00:37:26,640
or people like that right outside of the

00:37:24,320 --> 00:37:29,560
software or the technology kind of

00:37:26,640 --> 00:37:30,800
schema and then you also want like

00:37:29,560 --> 00:37:33,359
proficiency

00:37:30,800 --> 00:37:34,480
in automating and optimizing these

00:37:33,359 --> 00:37:37,359
processes right

00:37:34,480 --> 00:37:37,760
so that um you can also build confident

00:37:37,359 --> 00:37:40,640
uh

00:37:37,760 --> 00:37:42,160
teams uh and and maintain that that

00:37:40,640 --> 00:37:43,920
rapport with your teams right so they're

00:37:42,160 --> 00:37:45,359
all kind of tied together

00:37:43,920 --> 00:37:47,359
and it's it's essentially those

00:37:45,359 --> 00:37:50,240
characteristics are really important

00:37:47,359 --> 00:37:51,200
uh to be successful in this in this

00:37:50,240 --> 00:37:53,440
position

00:37:51,200 --> 00:37:55,599
uh on the on the right side we have some

00:37:53,440 --> 00:37:57,760
of the duties that i would imagine

00:37:55,599 --> 00:37:59,359
you know this position to have um

00:37:57,760 --> 00:38:02,880
obviously you are

00:37:59,359 --> 00:38:05,119
essentially the cicd czar so to speak

00:38:02,880 --> 00:38:07,440
so um you know you would be responsible

00:38:05,119 --> 00:38:09,599
for developing cicd principles

00:38:07,440 --> 00:38:10,640
uh that's that involves you know

00:38:09,599 --> 00:38:12,320
touching the

00:38:10,640 --> 00:38:14,079
higher level software development

00:38:12,320 --> 00:38:15,920
processes and collaborating

00:38:14,079 --> 00:38:17,440
around that stuff to ensure that you

00:38:15,920 --> 00:38:18,800
know your product your software

00:38:17,440 --> 00:38:21,040
development process are

00:38:18,800 --> 00:38:22,640
a direct reflection of your of your

00:38:21,040 --> 00:38:25,280
release cycles or release

00:38:22,640 --> 00:38:27,359
processes um as well as um review and

00:38:25,280 --> 00:38:30,079
modify cicd principles

00:38:27,359 --> 00:38:31,040
iteratively iteratively right so meaning

00:38:30,079 --> 00:38:33,040
uh just don't

00:38:31,040 --> 00:38:34,079
write the principles and guidelines that

00:38:33,040 --> 00:38:37,359
you're gonna operate under

00:38:34,079 --> 00:38:39,680
but go back and check on them uh often

00:38:37,359 --> 00:38:41,280
um also right you're gonna maintain the

00:38:39,680 --> 00:38:43,680
tools and platforms

00:38:41,280 --> 00:38:45,680
uh in in some cases right so you will be

00:38:43,680 --> 00:38:46,000
the expert of the platform you choose

00:38:45,680 --> 00:38:49,280
whatever

00:38:46,000 --> 00:38:51,359
that platform is and you will also be

00:38:49,280 --> 00:38:52,800
helping to maintain you know keeping

00:38:51,359 --> 00:38:54,640
that thing alive or that

00:38:52,800 --> 00:38:56,160
yeah keeping that platform alive and

00:38:54,640 --> 00:38:57,359
functional so that you don't waste

00:38:56,160 --> 00:38:59,599
developer

00:38:57,359 --> 00:39:00,560
cycles right and then finally right

00:38:59,599 --> 00:39:01,599
you're going to automate all your

00:39:00,560 --> 00:39:03,920
processes

00:39:01,599 --> 00:39:05,839
uh and then maintain those pipeline

00:39:03,920 --> 00:39:08,160
configurations which are

00:39:05,839 --> 00:39:10,400
what what defines your pipelines and

00:39:08,160 --> 00:39:12,240
what gets executed

00:39:10,400 --> 00:39:13,440
so with continuous delivery engineer

00:39:12,240 --> 00:39:15,040
again it's just a role

00:39:13,440 --> 00:39:16,560
something you may want to think about

00:39:15,040 --> 00:39:19,839
implementing uh

00:39:16,560 --> 00:39:21,359
inside of your organizations so with

00:39:19,839 --> 00:39:23,599
technical optimization

00:39:21,359 --> 00:39:25,760
strategies what i described previously

00:39:23,599 --> 00:39:27,280
was more of the human elements

00:39:25,760 --> 00:39:29,119
and and what i'm going to describe

00:39:27,280 --> 00:39:31,359
further are more you know

00:39:29,119 --> 00:39:32,880
the technical aspects that you can look

00:39:31,359 --> 00:39:36,000
for and

00:39:32,880 --> 00:39:38,800
optimize as well so one of the

00:39:36,000 --> 00:39:41,359
main things i noticed that developers in

00:39:38,800 --> 00:39:44,160
general like this is a a common problem

00:39:41,359 --> 00:39:44,720
in the industry is the lack of knowledge

00:39:44,160 --> 00:39:47,359
of

00:39:44,720 --> 00:39:49,200
their the languages frameworks and

00:39:47,359 --> 00:39:52,240
resources

00:39:49,200 --> 00:39:55,599
used in your text in the text tech

00:39:52,240 --> 00:39:57,280
stacks right so um having proficiency in

00:39:55,599 --> 00:39:58,480
those languages is really important and

00:39:57,280 --> 00:40:01,599
understanding

00:39:58,480 --> 00:40:02,400
the capabilities and limitations of

00:40:01,599 --> 00:40:05,440
these languages

00:40:02,400 --> 00:40:08,720
frameworks and tooling is also critical

00:40:05,440 --> 00:40:11,520
because when you know how those

00:40:08,720 --> 00:40:12,319
things work you have the ability to kind

00:40:11,520 --> 00:40:15,520
of

00:40:12,319 --> 00:40:17,359
uh quickly understand uh

00:40:15,520 --> 00:40:19,040
when when things go wrong right like why

00:40:17,359 --> 00:40:20,800
things are going wrong uh like you know

00:40:19,040 --> 00:40:23,680
if you're having performance issues

00:40:20,800 --> 00:40:24,319
the code is running slower you have an

00:40:23,680 --> 00:40:26,240
ability

00:40:24,319 --> 00:40:27,680
or at least some insight into where to

00:40:26,240 --> 00:40:29,760
look right to troubleshoot

00:40:27,680 --> 00:40:31,040
to figure out why is why am i

00:40:29,760 --> 00:40:33,760
experiencing this

00:40:31,040 --> 00:40:36,480
performance hit or maybe you know even

00:40:33,760 --> 00:40:39,440
bottlenecks sometimes the software just

00:40:36,480 --> 00:40:41,200
you know your data outgrows the software

00:40:39,440 --> 00:40:42,880
happens in a couple languages um your

00:40:41,200 --> 00:40:45,599
data sets you know that you're you're

00:40:42,880 --> 00:40:46,960
transacting on within your languages uh

00:40:45,599 --> 00:40:50,839
are just too big

00:40:46,960 --> 00:40:54,079
uh and and in some cases um you know

00:40:50,839 --> 00:40:56,560
most languages and frameworks have

00:40:54,079 --> 00:40:58,000
this ability to run things again

00:40:56,560 --> 00:40:59,440
concurrently right so they have these

00:40:58,000 --> 00:41:01,760
concurrent capabilities

00:40:59,440 --> 00:41:03,920
uh so you should be aware of these

00:41:01,760 --> 00:41:04,960
native concurrency capabilities within

00:41:03,920 --> 00:41:06,800
your stacks

00:41:04,960 --> 00:41:08,720
to actually implement them when you need

00:41:06,800 --> 00:41:09,920
to right so if you're pro if you're

00:41:08,720 --> 00:41:11,839
if you're seeing like you know

00:41:09,920 --> 00:41:13,599
performance hits uh and

00:41:11,839 --> 00:41:15,839
and especially like i see this a lot

00:41:13,599 --> 00:41:18,079
with testing um the test suites

00:41:15,839 --> 00:41:19,680
you know as they grow they become it

00:41:18,079 --> 00:41:21,680
takes longer and longer to

00:41:19,680 --> 00:41:23,839
to run the test suite because you're

00:41:21,680 --> 00:41:25,280
getting into that whole situation where

00:41:23,839 --> 00:41:27,040
you know you're cascading so like you

00:41:25,280 --> 00:41:29,599
have to wait for one test to finish

00:41:27,040 --> 00:41:31,200
and then move on to the next um in most

00:41:29,599 --> 00:41:31,599
cases you don't have to do that you can

00:41:31,200 --> 00:41:34,240
uh

00:41:31,599 --> 00:41:36,160
you know implement the the native

00:41:34,240 --> 00:41:38,240
concurrency capabilities in the stack

00:41:36,160 --> 00:41:39,839
and then run all of those tests at the

00:41:38,240 --> 00:41:41,520
same time this is

00:41:39,839 --> 00:41:44,000
similar to like the multi-threading

00:41:41,520 --> 00:41:46,560
concept right so um again you know

00:41:44,000 --> 00:41:48,880
understand the the languages and

00:41:46,560 --> 00:41:51,920
frameworks that you're using because

00:41:48,880 --> 00:41:52,640
you can you can you know create some

00:41:51,920 --> 00:41:54,960
huge

00:41:52,640 --> 00:41:56,560
performance gains without even touching

00:41:54,960 --> 00:41:58,400
your cicd pipeline right

00:41:56,560 --> 00:41:59,760
these are things that can you can do

00:41:58,400 --> 00:42:02,319
natively

00:41:59,760 --> 00:42:03,520
without even having to tweak a pipeline

00:42:02,319 --> 00:42:06,560
which is really important

00:42:03,520 --> 00:42:09,680
because this is like a localized change

00:42:06,560 --> 00:42:13,520
now what we're talking about next

00:42:09,680 --> 00:42:15,680
is tweaks or not tweaks but uh

00:42:13,520 --> 00:42:17,920
concepts within the cicd pipeline

00:42:15,680 --> 00:42:20,960
concurrent job execution is one of them

00:42:17,920 --> 00:42:24,400
it's huge uh you know you have to

00:42:20,960 --> 00:42:27,040
ensure that your your jobs are running

00:42:24,400 --> 00:42:28,000
uh simultaneously wherever you can it's

00:42:27,040 --> 00:42:31,119
not always

00:42:28,000 --> 00:42:32,560
possible right to to execute a job

00:42:31,119 --> 00:42:34,800
without a dependency

00:42:32,560 --> 00:42:36,240
but if you can run and orchestrate your

00:42:34,800 --> 00:42:39,280
jobs to run

00:42:36,240 --> 00:42:40,400
as you know at the same time wherever

00:42:39,280 --> 00:42:41,839
possible do that

00:42:40,400 --> 00:42:44,560
because that's where you kind of gain

00:42:41,839 --> 00:42:47,760
that velocity within your your cicd

00:42:44,560 --> 00:42:49,520
pipelines and release cycles um avoid

00:42:47,760 --> 00:42:51,359
building job dependencies

00:42:49,520 --> 00:42:53,119
again um you know what we talked about

00:42:51,359 --> 00:42:53,839
like in the waterfall example where

00:42:53,119 --> 00:42:55,119
things are like

00:42:53,839 --> 00:42:57,839
dependent upon each other right you

00:42:55,119 --> 00:42:59,119
can't start a new top a new task

00:42:57,839 --> 00:43:01,200
and it kind of ties back to running

00:42:59,119 --> 00:43:03,440
things concurrently avoid

00:43:01,200 --> 00:43:05,040
any kind of build dependencies if you

00:43:03,440 --> 00:43:06,560
can wherever you can

00:43:05,040 --> 00:43:08,480
again there's going to be places where

00:43:06,560 --> 00:43:10,160
you need to you know

00:43:08,480 --> 00:43:12,560
have a dependency like you have to stop

00:43:10,160 --> 00:43:15,599
a job or you can't continue

00:43:12,560 --> 00:43:17,599
until a previous job is succeeded

00:43:15,599 --> 00:43:18,880
in some cases it's a security scan right

00:43:17,599 --> 00:43:20,240
so you don't want to deploy

00:43:18,880 --> 00:43:22,720
or you don't want to move down your

00:43:20,240 --> 00:43:24,480
process if you have some vulnerable

00:43:22,720 --> 00:43:26,640
code that maybe has been detected right

00:43:24,480 --> 00:43:29,119
in one of your jobs so you know

00:43:26,640 --> 00:43:31,119
again avoid building these dependencies

00:43:29,119 --> 00:43:32,960
wherever possible within your pipelines

00:43:31,119 --> 00:43:34,720
but when you have to um build those

00:43:32,960 --> 00:43:36,720
pipelines or those dependencies

00:43:34,720 --> 00:43:38,480
uh it's okay right but this is the

00:43:36,720 --> 00:43:41,920
general rule that i like to go by

00:43:38,480 --> 00:43:43,040
and and suggest um so let's talk about

00:43:41,920 --> 00:43:46,160
uh caching right

00:43:43,040 --> 00:43:51,200
so caching is is um you know

00:43:46,160 --> 00:43:54,480
the ability to basically pull

00:43:51,200 --> 00:43:55,520
down a bunch of files or dependencies or

00:43:54,480 --> 00:43:58,560
code or whatever

00:43:55,520 --> 00:44:00,720
uh one time and then update things uh

00:43:58,560 --> 00:44:01,760
only that the things that change um it's

00:44:00,720 --> 00:44:03,760
super helpful

00:44:01,760 --> 00:44:05,520
so uh you know when you're when you're

00:44:03,760 --> 00:44:06,560
running pipelines because the the

00:44:05,520 --> 00:44:08,640
least amount of things you have to

00:44:06,560 --> 00:44:10,880
download the faster your pipeline is

00:44:08,640 --> 00:44:12,480
um but i will warn you you know to use

00:44:10,880 --> 00:44:14,319
the cash cautiously

00:44:12,480 --> 00:44:15,680
there's a couple cases where you know

00:44:14,319 --> 00:44:17,040
you're pulling down software

00:44:15,680 --> 00:44:19,040
uh and you're pulling down all the

00:44:17,040 --> 00:44:21,440
software all the time that's not caching

00:44:19,040 --> 00:44:22,880
i've seen that quite a bit and then you

00:44:21,440 --> 00:44:24,240
know it's a it's a problem

00:44:22,880 --> 00:44:26,000
but then we're gonna go ahead and talk

00:44:24,240 --> 00:44:27,920
about um you know

00:44:26,000 --> 00:44:29,280
uh only update the the change

00:44:27,920 --> 00:44:31,119
dependencies within your cache

00:44:29,280 --> 00:44:32,319
that's that's the proper way to

00:44:31,119 --> 00:44:34,640
implement caching

00:44:32,319 --> 00:44:36,000
is you know the first cat the first run

00:44:34,640 --> 00:44:36,880
of your pipeline should download all the

00:44:36,000 --> 00:44:39,440
dependencies

00:44:36,880 --> 00:44:41,280
and then from there um you know

00:44:39,440 --> 00:44:42,480
subsequent runs of that pipeline will

00:44:41,280 --> 00:44:45,440
only update

00:44:42,480 --> 00:44:46,640
the uh changed uh dependencies or or the

00:44:45,440 --> 00:44:48,800
changed files

00:44:46,640 --> 00:44:50,079
in your cache right so you know keep

00:44:48,800 --> 00:44:50,560
that in mind when you're implementing

00:44:50,079 --> 00:44:52,720
cache

00:44:50,560 --> 00:44:54,240
because it can if you're not

00:44:52,720 --> 00:44:56,160
implementing it properly

00:44:54,240 --> 00:44:57,839
it can cause uh you know a huge

00:44:56,160 --> 00:45:01,040
reduction in velocity

00:44:57,839 --> 00:45:03,280
uh in your in your pipeline um the other

00:45:01,040 --> 00:45:04,960
this is a this is more of a tweak right

00:45:03,280 --> 00:45:06,720
so if you notice like

00:45:04,960 --> 00:45:08,160
your pipelines are running on compute

00:45:06,720 --> 00:45:11,359
nodes everything that you do

00:45:08,160 --> 00:45:12,240
in a ci cd tool is running in a runtime

00:45:11,359 --> 00:45:14,240
on a

00:45:12,240 --> 00:45:15,839
compute node depending you know it

00:45:14,240 --> 00:45:17,920
doesn't matter it could be a

00:45:15,839 --> 00:45:19,119
a server in a data center it could be

00:45:17,920 --> 00:45:20,240
you know bare metal server in a data

00:45:19,119 --> 00:45:24,319
center could be

00:45:20,240 --> 00:45:26,079
a virtual machine in amazon whatever

00:45:24,319 --> 00:45:29,119
the resource class is in your cicd

00:45:26,079 --> 00:45:30,720
tooling please make sure that um

00:45:29,119 --> 00:45:32,319
you know your compute nodes are

00:45:30,720 --> 00:45:32,960
adequately sized they have enough memory

00:45:32,319 --> 00:45:35,440
they have

00:45:32,960 --> 00:45:37,359
a cpu they have enough disk based

00:45:35,440 --> 00:45:40,400
network right all these little com

00:45:37,359 --> 00:45:42,319
little details uh do

00:45:40,400 --> 00:45:43,920
impact your ci cd pipeline if they're

00:45:42,319 --> 00:45:46,000
not properly sized

00:45:43,920 --> 00:45:47,520
one of the biggest things i see is you

00:45:46,000 --> 00:45:49,599
know people add more code

00:45:47,520 --> 00:45:51,200
things run slower and then they just

00:45:49,599 --> 00:45:52,000
don't do anything about it they continue

00:45:51,200 --> 00:45:54,800
to use the same

00:45:52,000 --> 00:45:55,599
compute node size um when you when you

00:45:54,800 --> 00:45:57,280
do that

00:45:55,599 --> 00:45:58,880
um it's costing you money right because

00:45:57,280 --> 00:46:01,119
you're slowing things down

00:45:58,880 --> 00:46:02,000
now a lot of folks don't want to upgrade

00:46:01,119 --> 00:46:03,839
or you know to

00:46:02,000 --> 00:46:05,119
more capable or more capabilities on

00:46:03,839 --> 00:46:07,040
their compute node

00:46:05,119 --> 00:46:08,400
because they they fear the cost will you

00:46:07,040 --> 00:46:10,240
know be astronomical

00:46:08,400 --> 00:46:11,599
i can tell you that that's not the case

00:46:10,240 --> 00:46:14,480
all the time

00:46:11,599 --> 00:46:17,040
actually more likely than not you will

00:46:14,480 --> 00:46:18,400
experience huge astronomical increases

00:46:17,040 --> 00:46:20,319
but think about it this way when you

00:46:18,400 --> 00:46:20,960
implement a faster compute node things

00:46:20,319 --> 00:46:23,040
are getting done

00:46:20,960 --> 00:46:24,560
faster so that's shortening the amount

00:46:23,040 --> 00:46:26,480
of time you're using that node

00:46:24,560 --> 00:46:28,319
um and you know it could i've actually

00:46:26,480 --> 00:46:31,359
seen it be cheaper

00:46:28,319 --> 00:46:34,720
to run and on a huge node right

00:46:31,359 --> 00:46:38,240
than running on a on a slower more

00:46:34,720 --> 00:46:40,800
you know cost-consuming node

00:46:38,240 --> 00:46:42,160
so you know do your do your due dil due

00:46:40,800 --> 00:46:43,920
diligence there but

00:46:42,160 --> 00:46:45,440
if you want to increase some speed in

00:46:43,920 --> 00:46:47,680
certain aspects of your builds

00:46:45,440 --> 00:46:48,880
uh you know make sure that your your

00:46:47,680 --> 00:46:53,599
your nodes are properly

00:46:48,880 --> 00:46:56,160
uh they have the proper capacity

00:46:53,599 --> 00:46:57,200
so um test execution this is really

00:46:56,160 --> 00:46:58,400
important um

00:46:57,200 --> 00:47:00,880
you always want to be testing your code

00:46:58,400 --> 00:47:03,440
right there's no question there

00:47:00,880 --> 00:47:04,720
but you also don't want to there i

00:47:03,440 --> 00:47:05,440
believe there's a there's a thing is

00:47:04,720 --> 00:47:08,480
such as

00:47:05,440 --> 00:47:10,319
over you know kind of overkill

00:47:08,480 --> 00:47:11,599
for the test and what i mean by that is

00:47:10,319 --> 00:47:12,480
you know if you're in the development

00:47:11,599 --> 00:47:14,480
phase

00:47:12,480 --> 00:47:16,480
you don't want to be running end to end

00:47:14,480 --> 00:47:17,920
testing all the time right on changes

00:47:16,480 --> 00:47:19,680
that you're making every time

00:47:17,920 --> 00:47:21,520
so what you want to do is scale that

00:47:19,680 --> 00:47:22,640
down to and scope it out to more of a

00:47:21,520 --> 00:47:25,599
unit test

00:47:22,640 --> 00:47:25,920
a type execution you want to make sure

00:47:25,599 --> 00:47:28,160
that

00:47:25,920 --> 00:47:29,839
those tests are super fast right and and

00:47:28,160 --> 00:47:32,800
keeping the developer going now

00:47:29,839 --> 00:47:33,680
if you promote that that that bill to a

00:47:32,800 --> 00:47:38,160
uh

00:47:33,680 --> 00:47:39,359
something like a uh was it a

00:47:38,160 --> 00:47:41,359
yeah if you're probably to like a

00:47:39,359 --> 00:47:42,880
staging or qa then

00:47:41,359 --> 00:47:44,640
at that point you want to run more

00:47:42,880 --> 00:47:47,280
extensive comprehensive tests

00:47:44,640 --> 00:47:47,760
they're probably much longer right to

00:47:47,280 --> 00:47:49,839
run

00:47:47,760 --> 00:47:51,599
so you know just just keep an eye on

00:47:49,839 --> 00:47:52,640
when and how you're running your test

00:47:51,599 --> 00:47:55,599
and actually there's one more other

00:47:52,640 --> 00:47:57,920
thing make sure that you're running

00:47:55,599 --> 00:47:59,680
tests that add value so you know if

00:47:57,920 --> 00:48:02,160
you're testing something and

00:47:59,680 --> 00:48:03,040
every time you run that test it's green

00:48:02,160 --> 00:48:04,640
all the time

00:48:03,040 --> 00:48:06,319
you should probably look into that test

00:48:04,640 --> 00:48:07,680
and add you know figure out like it's

00:48:06,319 --> 00:48:09,920
just adding value

00:48:07,680 --> 00:48:11,040
because it's it's always green all the

00:48:09,920 --> 00:48:13,040
time is it

00:48:11,040 --> 00:48:14,240
even functioning properly so you know

00:48:13,040 --> 00:48:15,280
those are kind of things that you need

00:48:14,240 --> 00:48:18,319
to check out

00:48:15,280 --> 00:48:19,359
when you're running test execution one

00:48:18,319 --> 00:48:22,559
other thing i want to talk about

00:48:19,359 --> 00:48:24,319
is conditional job execution uh this

00:48:22,559 --> 00:48:25,680
is basically how you orchestrate your

00:48:24,319 --> 00:48:28,240
jobs right so

00:48:25,680 --> 00:48:29,359
again going back to that that example of

00:48:28,240 --> 00:48:31,200
like hey maybe you're in that

00:48:29,359 --> 00:48:34,240
development phase of your code

00:48:31,200 --> 00:48:36,960
um do you really need to run

00:48:34,240 --> 00:48:40,240
certain tasks that pertain maybe to

00:48:36,960 --> 00:48:43,680
promoting things to production or to q a

00:48:40,240 --> 00:48:44,559
uh type uh you know elements in your in

00:48:43,680 --> 00:48:47,920
your software

00:48:44,559 --> 00:48:49,520
processes um so you know you want to

00:48:47,920 --> 00:48:53,520
again align

00:48:49,520 --> 00:48:56,480
the commands being executed within jobs

00:48:53,520 --> 00:48:57,839
to to you know scope them out to exactly

00:48:56,480 --> 00:48:58,800
what it is that you're performing so

00:48:57,839 --> 00:49:00,720
again if you're just

00:48:58,800 --> 00:49:02,480
you know performing development of new

00:49:00,720 --> 00:49:05,760
features scope those

00:49:02,480 --> 00:49:06,079
um job executions uh a little bit better

00:49:05,760 --> 00:49:07,760
so

00:49:06,079 --> 00:49:09,440
you're not like you know doing

00:49:07,760 --> 00:49:12,160
full-blown uh

00:49:09,440 --> 00:49:12,880
uh promotions across the board for no

00:49:12,160 --> 00:49:15,680
reason

00:49:12,880 --> 00:49:16,480
um you know that that i see that all the

00:49:15,680 --> 00:49:18,880
time and it just

00:49:16,480 --> 00:49:20,079
adds more and more time to your overall

00:49:18,880 --> 00:49:22,720
pipeline run

00:49:20,079 --> 00:49:24,240
and then slows things down quite a bit

00:49:22,720 --> 00:49:24,960
you just want to run those when certain

00:49:24,240 --> 00:49:28,240
conditions

00:49:24,960 --> 00:49:29,680
exist and finally i want to talk about

00:49:28,240 --> 00:49:32,480
set

00:49:29,680 --> 00:49:32,880
setting a bill duration target so this

00:49:32,480 --> 00:49:34,640
is

00:49:32,880 --> 00:49:36,480
essentially like every you know every

00:49:34,640 --> 00:49:39,599
pipeline is composed of

00:49:36,480 --> 00:49:41,920
many jobs um what what i mean by this

00:49:39,599 --> 00:49:43,760
statement here is you want to ensure

00:49:41,920 --> 00:49:47,280
that every job that you run

00:49:43,760 --> 00:49:48,240
is being run optimally and and within a

00:49:47,280 --> 00:49:50,640
certain time frame

00:49:48,240 --> 00:49:52,480
so by setting a goal i personally like

00:49:50,640 --> 00:49:56,880
to set a goal of 60 seconds

00:49:52,480 --> 00:50:00,559
it's aggressive it's unrealistic but

00:49:56,880 --> 00:50:03,359
you know we need to we need to set these

00:50:00,559 --> 00:50:04,559
aggressive unrealistic goals so that

00:50:03,359 --> 00:50:07,599
whenever we see

00:50:04,559 --> 00:50:08,960
a job right going over like for me if i

00:50:07,599 --> 00:50:12,400
see a job going over

00:50:08,960 --> 00:50:14,720
60 seconds um you know

00:50:12,400 --> 00:50:16,240
then i it's a red flag and then it

00:50:14,720 --> 00:50:18,160
brings my attention to it

00:50:16,240 --> 00:50:20,240
and i can look at it and see what is

00:50:18,160 --> 00:50:22,559
going on right analyze why is this

00:50:20,240 --> 00:50:23,680
taking longer um and you know it's like

00:50:22,559 --> 00:50:26,319
a troubleshooting kind of

00:50:23,680 --> 00:50:27,680
flag but again right you want your

00:50:26,319 --> 00:50:30,960
pipelines to be very

00:50:27,680 --> 00:50:32,240
uh concise very very fast right because

00:50:30,960 --> 00:50:33,920
your the rest of your

00:50:32,240 --> 00:50:35,680
your release is depending on that your

00:50:33,920 --> 00:50:38,640
release cycles are depending on that

00:50:35,680 --> 00:50:39,280
on that quick velocity right um so set

00:50:38,640 --> 00:50:42,319
your build

00:50:39,280 --> 00:50:43,200
target uh build duration targets uh very

00:50:42,319 --> 00:50:44,559
aggressively

00:50:43,200 --> 00:50:46,800
now of course right if you're sending

00:50:44,559 --> 00:50:47,839
jobs off to like amazon cloud build or

00:50:46,800 --> 00:50:50,640
something like that

00:50:47,839 --> 00:50:51,680
that's out of your control so you can't

00:50:50,640 --> 00:50:53,520
really you know

00:50:51,680 --> 00:50:55,760
if it takes three minutes it takes three

00:50:53,520 --> 00:50:57,280
minutes but at a minimum you know

00:50:55,760 --> 00:50:59,040
that that job is taking three minutes

00:50:57,280 --> 00:51:01,760
because it's out of your control

00:50:59,040 --> 00:51:02,800
and by the way again if it's you know

00:51:01,760 --> 00:51:04,720
the threshold

00:51:02,800 --> 00:51:06,960
is exceeded that three minute average is

00:51:04,720 --> 00:51:09,760
exceeded you need to look into

00:51:06,960 --> 00:51:11,280
why that's happening right so again just

00:51:09,760 --> 00:51:14,480
you know set some uh

00:51:11,280 --> 00:51:16,880
aggressive uh build duration targets for

00:51:14,480 --> 00:51:18,720
every job that you run in your workloads

00:51:16,880 --> 00:51:20,079
so that's basically all of the

00:51:18,720 --> 00:51:21,760
optimization bits

00:51:20,079 --> 00:51:23,200
i'm going to go ahead and recap and then

00:51:21,760 --> 00:51:24,559
i have some questions which i'll stick

00:51:23,200 --> 00:51:25,119
around for even if we go over a little

00:51:24,559 --> 00:51:26,960
bit

00:51:25,119 --> 00:51:28,960
um i'll definitely answer those

00:51:26,960 --> 00:51:31,119
questions so let's go ahead and recap

00:51:28,960 --> 00:51:33,200
on the optimization of pipelines align

00:51:31,119 --> 00:51:34,480
your cicd segments with your software

00:51:33,200 --> 00:51:36,720
development processes

00:51:34,480 --> 00:51:38,240
really important to keep those nice

00:51:36,720 --> 00:51:40,880
because again

00:51:38,240 --> 00:51:41,599
your continuous delivery processes are a

00:51:40,880 --> 00:51:44,480
reflection

00:51:41,599 --> 00:51:45,680
of your software software development

00:51:44,480 --> 00:51:48,640
processes

00:51:45,680 --> 00:51:50,319
establish you know if you can establish

00:51:48,640 --> 00:51:52,319
a continuous delivery engineer or at

00:51:50,319 --> 00:51:54,800
least look into that kind of role

00:51:52,319 --> 00:51:56,400
um it's definitely uh you know like i

00:51:54,800 --> 00:51:58,079
said continuous delivery

00:51:56,400 --> 00:52:00,640
is being adopted by pretty much

00:51:58,079 --> 00:52:01,599
everybody so it just makes sense to have

00:52:00,640 --> 00:52:04,720
like a

00:52:01,599 --> 00:52:06,960
central uh team or or

00:52:04,720 --> 00:52:08,800
central role that's kind of overlooking

00:52:06,960 --> 00:52:09,280
and met overseeing and managing all of

00:52:08,800 --> 00:52:12,000
that

00:52:09,280 --> 00:52:12,559
uh for for your for your teams uh you

00:52:12,000 --> 00:52:14,480
know

00:52:12,559 --> 00:52:15,680
understand the languages and frameworks

00:52:14,480 --> 00:52:17,359
and tooling that you're using

00:52:15,680 --> 00:52:19,200
have a deep knowledge of those things

00:52:17,359 --> 00:52:21,680
because proficiency

00:52:19,200 --> 00:52:24,079
in those technologies will help you

00:52:21,680 --> 00:52:26,720
learning you know knowing the capacities

00:52:24,079 --> 00:52:27,760
the limitations of frameworks will

00:52:26,720 --> 00:52:31,200
definitely help you

00:52:27,760 --> 00:52:32,800
you know in many aspects execute your

00:52:31,200 --> 00:52:35,920
workloads concurrently

00:52:32,800 --> 00:52:37,599
that's always a a motto that i've

00:52:35,920 --> 00:52:39,520
i've adopted years and years and years

00:52:37,599 --> 00:52:42,880
ago and i try to

00:52:39,520 --> 00:52:47,200
execute that at every turn um

00:52:42,880 --> 00:52:48,400
avoid building job dependencies right

00:52:47,200 --> 00:52:50,800
like i said there's going to be times

00:52:48,400 --> 00:52:52,400
where you just can't do it it's just

00:52:50,800 --> 00:52:54,400
it's impossible you have to have a

00:52:52,400 --> 00:52:55,520
dependency but wherever you can

00:52:54,400 --> 00:52:58,000
eliminate those

00:52:55,520 --> 00:52:59,359
please do so um and trust me your life

00:52:58,000 --> 00:53:02,319
will be so much

00:52:59,359 --> 00:53:03,440
happier and faster if you implement that

00:53:02,319 --> 00:53:05,760
that advice

00:53:03,440 --> 00:53:07,119
uh use the cash cautiously right and

00:53:05,760 --> 00:53:10,240
only update the changed

00:53:07,119 --> 00:53:13,119
things and then obviously audit

00:53:10,240 --> 00:53:14,559
use adequate compute notice adequately

00:53:13,119 --> 00:53:17,040
precise compute nodes with the

00:53:14,559 --> 00:53:18,720
proper capacities uh whenever you're you

00:53:17,040 --> 00:53:20,160
know implementing them inside of your

00:53:18,720 --> 00:53:23,119
cicd pipelines or you're

00:53:20,160 --> 00:53:24,559
executing ci cd pipelines conditional

00:53:23,119 --> 00:53:26,480
job execution

00:53:24,559 --> 00:53:28,400
don't run everything all the time you

00:53:26,480 --> 00:53:29,040
know try to filter out what needs to be

00:53:28,400 --> 00:53:31,680
run

00:53:29,040 --> 00:53:33,280
and in context right so again if you're

00:53:31,680 --> 00:53:34,079
developing software in your development

00:53:33,280 --> 00:53:35,920
phase

00:53:34,079 --> 00:53:37,839
don't run all the things right in in

00:53:35,920 --> 00:53:38,800
your pipeline only run the things that

00:53:37,839 --> 00:53:40,960
you need to

00:53:38,800 --> 00:53:42,000
to progress to the next segment and then

00:53:40,960 --> 00:53:45,200
finally set those

00:53:42,000 --> 00:53:47,119
build uh duration targets uh you can use

00:53:45,200 --> 00:53:48,400
my number if you like 60 seconds so you

00:53:47,119 --> 00:53:51,280
could build your own

00:53:48,400 --> 00:53:53,440
but the the lower right the number the

00:53:51,280 --> 00:53:56,000
faster things complete

00:53:53,440 --> 00:53:57,359
so i think that's pretty much it i just

00:53:56,000 --> 00:53:59,359
wanted to share

00:53:57,359 --> 00:54:01,520
this link which is basically the state

00:53:59,359 --> 00:54:03,920
of uh software delivery it's a

00:54:01,520 --> 00:54:04,800
it's a thing report that we've been

00:54:03,920 --> 00:54:07,839
releasing

00:54:04,800 --> 00:54:10,640
annually for the past couple years and

00:54:07,839 --> 00:54:13,760
it has a lot of data on how to benchmark

00:54:10,640 --> 00:54:17,520
yourselves as far as like you know

00:54:13,760 --> 00:54:19,040
metrics on what a a high-performing team

00:54:17,520 --> 00:54:22,480
looks like

00:54:19,040 --> 00:54:24,160
what kind of recovery developers

00:54:22,480 --> 00:54:26,640
are are facing and this is all data

00:54:24,160 --> 00:54:28,000
based off of the usage on the circle ci

00:54:26,640 --> 00:54:29,839
platform so it's pretty

00:54:28,000 --> 00:54:31,040
accurate we do millions and millions of

00:54:29,839 --> 00:54:32,720
builds per

00:54:31,040 --> 00:54:34,319
day so like you know we have a lot of

00:54:32,720 --> 00:54:36,160
data and we're finally you know

00:54:34,319 --> 00:54:37,520
making sense of it all and releasing it

00:54:36,160 --> 00:54:38,240
to the public so that they can

00:54:37,520 --> 00:54:40,640
understand

00:54:38,240 --> 00:54:42,000
how they can improve their uh release

00:54:40,640 --> 00:54:45,440
cycles

00:54:42,000 --> 00:54:46,000
um the cicd engineer role that i talked

00:54:45,440 --> 00:54:48,720
about

00:54:46,000 --> 00:54:50,160
if you want to read that blog post just

00:54:48,720 --> 00:54:52,160
use this link

00:54:50,160 --> 00:54:53,520
and there's actually another follow-up

00:54:52,160 --> 00:54:55,520
uh piece to this

00:54:53,520 --> 00:54:57,040
that i wrote um so it's been about a

00:54:55,520 --> 00:54:58,720
two-year project but at the end of the

00:54:57,040 --> 00:55:00,319
day i update it every year

00:54:58,720 --> 00:55:02,079
with some more thoughts and stuff so you

00:55:00,319 --> 00:55:04,480
know if you want to get some more detail

00:55:02,079 --> 00:55:06,160
go ahead and check that out there and

00:55:04,480 --> 00:55:07,040
finally if you have any questions that i

00:55:06,160 --> 00:55:10,240
didn't answer here

00:55:07,040 --> 00:55:11,920
um join our discuss sorry join our

00:55:10,240 --> 00:55:14,720
circleci discord server

00:55:11,920 --> 00:55:16,240
um and in there you know circleci

00:55:14,720 --> 00:55:17,119
developer advocates the rest of my team

00:55:16,240 --> 00:55:19,040
is in there

00:55:17,119 --> 00:55:21,040
and we're generally answering questions

00:55:19,040 --> 00:55:24,319
or you know talking with folks as well

00:55:21,040 --> 00:55:26,160
so it's another way for you to connect

00:55:24,319 --> 00:55:27,839
and that's about it for now let me

00:55:26,160 --> 00:55:28,720
answer some of these questions that are

00:55:27,839 --> 00:55:31,599
in the queue

00:55:28,720 --> 00:55:32,319
and then we'll finish this thing so one

00:55:31,599 --> 00:55:34,559
of the questions

00:55:32,319 --> 00:55:35,440
is can we implement all of the ci cd

00:55:34,559 --> 00:55:38,720
tools

00:55:35,440 --> 00:55:43,839
in docker if we implement that

00:55:38,720 --> 00:55:47,040
what are the pros and cons um so like

00:55:43,839 --> 00:55:48,079
you can use docker within the ci cd

00:55:47,040 --> 00:55:50,079
tooling i think that's the

00:55:48,079 --> 00:55:51,359
question so can i use docker within the

00:55:50,079 --> 00:55:54,079
cicd tooling

00:55:51,359 --> 00:55:55,359
yes that's one of the what we call

00:55:54,079 --> 00:55:57,040
executors

00:55:55,359 --> 00:55:58,880
which is that compute node i was talking

00:55:57,040 --> 00:56:00,960
about so you can use

00:55:58,880 --> 00:56:02,400
docker images you know build your code

00:56:00,960 --> 00:56:04,640
on docker images

00:56:02,400 --> 00:56:05,760
um in circle ci that's not a problem

00:56:04,640 --> 00:56:08,000
it's it's actually

00:56:05,760 --> 00:56:09,280
encouraged especially because developers

00:56:08,000 --> 00:56:10,640
right they're using docker more and

00:56:09,280 --> 00:56:12,880
packaging their apps up

00:56:10,640 --> 00:56:14,000
um so yeah you can definitely use that

00:56:12,880 --> 00:56:16,000
um and

00:56:14,000 --> 00:56:17,760
the pros are that right it's it's the

00:56:16,000 --> 00:56:18,880
same workflow it doesn't really

00:56:17,760 --> 00:56:20,880
change for you you can use the same

00:56:18,880 --> 00:56:23,599
docker file same code uh the

00:56:20,880 --> 00:56:25,359
cons are there are limitations right so

00:56:23,599 --> 00:56:26,160
it is a docker image or a docker

00:56:25,359 --> 00:56:29,359
container

00:56:26,160 --> 00:56:30,720
um there are performance issues as well

00:56:29,359 --> 00:56:32,640
um you know so if you're if you're

00:56:30,720 --> 00:56:34,400
looking to do like

00:56:32,640 --> 00:56:36,400
high performance things i would

00:56:34,400 --> 00:56:37,599
recommend using a what we call a virtual

00:56:36,400 --> 00:56:39,040
machine executor

00:56:37,599 --> 00:56:40,880
uh so that you know you have the full

00:56:39,040 --> 00:56:42,400
control of the box uh but that would be

00:56:40,880 --> 00:56:43,839
one of the cons it's like you know there

00:56:42,400 --> 00:56:46,559
are limitations

00:56:43,839 --> 00:56:48,960
can we manage the next question is uh

00:56:46,559 --> 00:56:51,440
can we manage the icd pipelines and jobs

00:56:48,960 --> 00:56:52,960
as code without setting up everything

00:56:51,440 --> 00:56:54,960
using the ui

00:56:52,960 --> 00:56:56,799
do you have any recommendations for

00:56:54,960 --> 00:57:01,359
tools and practices

00:56:56,799 --> 00:57:03,599
so um yeah so

00:57:01,359 --> 00:57:04,640
uh there are many tools out there they

00:57:03,599 --> 00:57:07,760
all do it

00:57:04,640 --> 00:57:08,799
do do the ci cd pipeline definition

00:57:07,760 --> 00:57:11,760
differently

00:57:08,799 --> 00:57:12,480
at circle ci like i said we use yaml

00:57:11,760 --> 00:57:16,559
most

00:57:12,480 --> 00:57:18,480
tooling uses yaml um but uh

00:57:16,559 --> 00:57:20,079
what i tell people is when you're using

00:57:18,480 --> 00:57:21,440
circle ci you should not be in a

00:57:20,079 --> 00:57:23,920
dashboard

00:57:21,440 --> 00:57:26,000
unless you're you know checking on a

00:57:23,920 --> 00:57:27,760
status like a feedback right so

00:57:26,000 --> 00:57:29,680
if your build failed you want to

00:57:27,760 --> 00:57:31,520
obviously debug you can do that

00:57:29,680 --> 00:57:32,799
if you want to ssh into the box you can

00:57:31,520 --> 00:57:35,520
do that with circle ci

00:57:32,799 --> 00:57:37,839
so like the developers can you know

00:57:35,520 --> 00:57:40,559
debug in the environment where it failed

00:57:37,839 --> 00:57:42,160
versus oh here's a bunch of logs and

00:57:40,559 --> 00:57:43,760
that really don't make sense and then

00:57:42,160 --> 00:57:44,480
you try to debug on your local machine

00:57:43,760 --> 00:57:46,559
which is

00:57:44,480 --> 00:57:47,680
nearly impossible or it takes a very

00:57:46,559 --> 00:57:50,799
long time so

00:57:47,680 --> 00:57:51,520
yeah you can do that within circleci for

00:57:50,799 --> 00:57:54,559
sure

00:57:51,520 --> 00:57:56,640
most other tools also use

00:57:54,559 --> 00:57:58,000
you know depending on the tool but you

00:57:56,640 --> 00:58:00,079
know a lot of them have

00:57:58,000 --> 00:58:01,119
that code capability to define your

00:58:00,079 --> 00:58:04,480
pipelines

00:58:01,119 --> 00:58:07,119
and you don't have to jump into a ui

00:58:04,480 --> 00:58:08,640
so the last question i have here is can

00:58:07,119 --> 00:58:10,559
you elaborate a little bit on avoiding

00:58:08,640 --> 00:58:14,000
job dependencies

00:58:10,559 --> 00:58:17,280
in concurrent job execution

00:58:14,000 --> 00:58:19,680
yeah so um

00:58:17,280 --> 00:58:21,119
avoiding job dependency so a job

00:58:19,680 --> 00:58:22,880
dependency would be

00:58:21,119 --> 00:58:24,480
let's say you have a manual approval

00:58:22,880 --> 00:58:26,400
step right uh

00:58:24,480 --> 00:58:28,079
like let's say your pipeline's humming

00:58:26,400 --> 00:58:31,599
along and

00:58:28,079 --> 00:58:35,040
um have to stop because you have a

00:58:31,599 --> 00:58:36,960
rule that says a manager or some

00:58:35,040 --> 00:58:38,160
you know person with authority needs to

00:58:36,960 --> 00:58:41,680
look at

00:58:38,160 --> 00:58:42,880
the state of the release at a given time

00:58:41,680 --> 00:58:45,440
so maybe you have

00:58:42,880 --> 00:58:47,280
a uh a doctor image that's going to be

00:58:45,440 --> 00:58:50,400
deployed to a

00:58:47,280 --> 00:58:52,079
maybe a production environment the

00:58:50,400 --> 00:58:54,640
dependency there would be

00:58:52,079 --> 00:58:55,280
that that approval step right you

00:58:54,640 --> 00:58:57,440
actually

00:58:55,280 --> 00:59:00,319
absolutely need that because maybe like

00:58:57,440 --> 00:59:03,599
i said you're bound by law

00:59:00,319 --> 00:59:05,920
via compliancy regulations right um

00:59:03,599 --> 00:59:07,359
so that's a dependency now where you

00:59:05,920 --> 00:59:09,920
where i'm talking about where you can

00:59:07,359 --> 00:59:10,880
eliminate that is anywhere else you

00:59:09,920 --> 00:59:14,319
don't need that

00:59:10,880 --> 00:59:17,040
just run things you know concurrently

00:59:14,319 --> 00:59:18,240
like okay for instance um in my pipeline

00:59:17,040 --> 00:59:19,680
i usually build

00:59:18,240 --> 00:59:22,000
using infrastructure's code i build a

00:59:19,680 --> 00:59:24,160
kubernetes cluster so that

00:59:22,000 --> 00:59:26,240
the release that i'm working on can be

00:59:24,160 --> 00:59:29,599
packaged up into a docker image

00:59:26,240 --> 00:59:32,559
thrown or not thrown but deployed

00:59:29,599 --> 00:59:34,240
into a kubernetes cluster and then i can

00:59:32,559 --> 00:59:35,680
run some smoke testing you know to make

00:59:34,240 --> 00:59:38,799
sure that deployment

00:59:35,680 --> 00:59:41,440
is legit and also to verify that

00:59:38,799 --> 00:59:42,319
that docker image works in a kubernetes

00:59:41,440 --> 00:59:44,880
cluster

00:59:42,319 --> 00:59:46,400
now most people will do things like you

00:59:44,880 --> 00:59:49,599
know

00:59:46,400 --> 00:59:53,520
build the the cluster and then obviously

00:59:49,599 --> 00:59:55,520
you can't deploy this built image until

00:59:53,520 --> 00:59:56,880
uh that cluster is created right so

00:59:55,520 --> 00:59:58,559
that's a dependency right

00:59:56,880 --> 01:00:00,079
that you cannot break you need the

00:59:58,559 --> 01:00:01,520
cluster before you can deploy

01:00:00,079 --> 01:00:03,680
but all the other things like running

01:00:01,520 --> 01:00:05,200
unit tests running security tests

01:00:03,680 --> 01:00:07,520
building the docker image and the

01:00:05,200 --> 01:00:09,599
kubernetes cluster at the same time

01:00:07,520 --> 01:00:10,640
can be accomplished concurrently right

01:00:09,599 --> 01:00:11,839
so that's what i mean by

01:00:10,640 --> 01:00:14,000
you know eliminating because a lot of

01:00:11,839 --> 01:00:15,680
people wait for the cluster to be built

01:00:14,000 --> 01:00:17,280
then they'll build the docker image and

01:00:15,680 --> 01:00:18,960
then they'll deploy the docker image

01:00:17,280 --> 01:00:20,400
what i'm saying is no just do everything

01:00:18,960 --> 01:00:21,680
you can as you know

01:00:20,400 --> 01:00:23,920
quickly as possible because if one of

01:00:21,680 --> 01:00:25,119
those fails then the pipeline will stop

01:00:23,920 --> 01:00:27,200
and then you know you have to go back

01:00:25,119 --> 01:00:29,599
and figure that out so i hope i

01:00:27,200 --> 01:00:30,720
uh answered that question regarding um

01:00:29,599 --> 01:00:34,079
pipelines

01:00:30,720 --> 01:00:34,079
and i think we're out of time right

01:00:37,200 --> 01:00:40,880
i think so okay all right so i don't see

01:00:39,680 --> 01:00:43,280
any more questions

01:00:40,880 --> 01:00:45,119
thank you everybody yeah thank you so

01:00:43,280 --> 01:00:46,640
much to angel for his time today and

01:00:45,119 --> 01:00:47,680
thank you to all the participants who

01:00:46,640 --> 01:00:49,760
joined us

01:00:47,680 --> 01:00:51,839
as a reminder this recording will be on

01:00:49,760 --> 01:00:52,640
the linux foundation youtube page later

01:00:51,839 --> 01:00:53,839
today

01:00:52,640 --> 01:00:57,599
we hope you're able to join us for

01:00:53,839 --> 01:01:01,280
future webinars have a wonderful day

01:00:57,599 --> 01:01:01,280

YouTube URL: https://www.youtube.com/watch?v=YWS3npQN0Dc


