Title: Webinar: Enabling Business Agility Through Open Technology, sponsored by SUSE
Publication date: 2020-10-20
Playlist: LF Live Webinars
Description: 
	What is business agility? This session looks at what it means for a business to be agile and how the latest advances in cloud native computing are impacting operations, developers, and business stakeholders alike.
Captions: 
	00:00:00,399 --> 00:00:04,560
thank you very much and thanks everybody

00:00:02,800 --> 00:00:06,720
for joining today's presentation

00:00:04,560 --> 00:00:07,680
where we talk about in talking about

00:00:06,720 --> 00:00:10,480
enabling

00:00:07,680 --> 00:00:11,759
business agility with open technology

00:00:10,480 --> 00:00:13,599
over the next half hour

00:00:11,759 --> 00:00:15,040
i want to examine you know some of the

00:00:13,599 --> 00:00:16,800
problems that

00:00:15,040 --> 00:00:18,720
businesses have or the challenges with

00:00:16,800 --> 00:00:21,520
agility really go into

00:00:18,720 --> 00:00:23,600
what is agility uh what is the industry

00:00:21,520 --> 00:00:26,400
doing particularly the communities and

00:00:23,600 --> 00:00:28,800
in the cloud native computing foundation

00:00:26,400 --> 00:00:31,279
to enable companies to

00:00:28,800 --> 00:00:34,880
achieve a higher level of agility than

00:00:31,279 --> 00:00:34,880
ever been able to be done before

00:00:35,040 --> 00:00:41,280
when i started thinking about this uh

00:00:38,239 --> 00:00:42,640
topic uh in in writing about it you know

00:00:41,280 --> 00:00:44,079
one of the things that really came to

00:00:42,640 --> 00:00:46,160
mind as

00:00:44,079 --> 00:00:47,760
most of you probably don't know i'm a

00:00:46,160 --> 00:00:50,800
compatible competitive

00:00:47,760 --> 00:00:51,600
obstacle course racer and i found this

00:00:50,800 --> 00:00:54,320
definition

00:00:51,600 --> 00:00:56,160
extremely pertinent to the topic we want

00:00:54,320 --> 00:00:58,719
to talk about today is that

00:00:56,160 --> 00:01:00,640
as we're going through a race a trail

00:00:58,719 --> 00:01:04,000
race an obstacle course

00:01:00,640 --> 00:01:07,040
um you know we find the need to respond

00:01:04,000 --> 00:01:09,520
to unknown and unfamiliar terrain and

00:01:07,040 --> 00:01:11,360
obstacles kind of around each corner

00:01:09,520 --> 00:01:13,360
there's you know many things put in our

00:01:11,360 --> 00:01:15,520
path to

00:01:13,360 --> 00:01:17,520
challenge us to keep us from being

00:01:15,520 --> 00:01:18,640
successful their competitors are also

00:01:17,520 --> 00:01:20,320
going through

00:01:18,640 --> 00:01:22,159
and it's you know who can get through

00:01:20,320 --> 00:01:23,360
there the quickest and and come out

00:01:22,159 --> 00:01:25,439
ahead

00:01:23,360 --> 00:01:26,880
and to do so we really have to call on a

00:01:25,439 --> 00:01:28,400
variety of skills

00:01:26,880 --> 00:01:30,560
uh you know necessary to kind of

00:01:28,400 --> 00:01:32,000
overcome these challenges that are

00:01:30,560 --> 00:01:33,920
placed in front of us

00:01:32,000 --> 00:01:35,680
uh whether it's you know the obvious

00:01:33,920 --> 00:01:38,400
ones of arms and legs of

00:01:35,680 --> 00:01:40,000
navigating the terrain and and climbing

00:01:38,400 --> 00:01:43,439
through and over obstacles

00:01:40,000 --> 00:01:46,399
but then also the the sense of sight

00:01:43,439 --> 00:01:46,880
uh mental acuity balance you know all of

00:01:46,399 --> 00:01:49,040
these

00:01:46,880 --> 00:01:51,439
play in concert with each other working

00:01:49,040 --> 00:01:52,799
together with split second timing and

00:01:51,439 --> 00:01:55,280
accuracy

00:01:52,799 --> 00:01:56,799
you know to make uh an obstacle course

00:01:55,280 --> 00:02:00,000
racer successful

00:01:56,799 --> 00:02:02,560
uh in getting to the end and

00:02:00,000 --> 00:02:03,680
you know businesses today really face

00:02:02,560 --> 00:02:06,079
many of these

00:02:03,680 --> 00:02:08,319
types of challenges challenging terrain

00:02:06,079 --> 00:02:10,479
and obstacles every day

00:02:08,319 --> 00:02:12,160
and you know the vast majority of them

00:02:10,479 --> 00:02:13,360
knew that they've got to figure out how

00:02:12,160 --> 00:02:16,400
to navigate

00:02:13,360 --> 00:02:18,480
uh quickly in a competitive environment

00:02:16,400 --> 00:02:21,920
to keep from being disrupted

00:02:18,480 --> 00:02:23,920
or left out of of customer opportunities

00:02:21,920 --> 00:02:25,760
and so these can be in the form of

00:02:23,920 --> 00:02:29,920
business requirements from

00:02:25,760 --> 00:02:32,879
regulators international rules gdpr

00:02:29,920 --> 00:02:34,400
or maybe in the form of opportunities

00:02:32,879 --> 00:02:36,980
you know new products

00:02:34,400 --> 00:02:38,800
new channels customer

00:02:36,980 --> 00:02:41,440
[Music]

00:02:38,800 --> 00:02:42,959
segments that they want to enter or new

00:02:41,440 --> 00:02:44,879
technologies

00:02:42,959 --> 00:02:47,200
and then there's the changing

00:02:44,879 --> 00:02:48,480
requirements in the area of customer

00:02:47,200 --> 00:02:50,959
expectations

00:02:48,480 --> 00:02:51,680
you know customers you know are coming

00:02:50,959 --> 00:02:55,200
you know we

00:02:51,680 --> 00:02:57,920
use the term term uh consumer fine

00:02:55,200 --> 00:02:59,519
they're used to immediate response

00:02:57,920 --> 00:03:02,640
immediate gratification

00:02:59,519 --> 00:03:04,800
and so as customers see and experience

00:03:02,640 --> 00:03:05,760
new ways of interacting with customers

00:03:04,800 --> 00:03:08,640
and and

00:03:05,760 --> 00:03:10,560
develop new expectations of response

00:03:08,640 --> 00:03:13,760
times of where

00:03:10,560 --> 00:03:15,280
service is going to be provided and how

00:03:13,760 --> 00:03:16,640
they want to interact with you

00:03:15,280 --> 00:03:18,800
and a business needs to be able to

00:03:16,640 --> 00:03:22,019
respond to that

00:03:18,800 --> 00:03:22,019
[Music]

00:03:26,080 --> 00:03:31,680
so how can you enable you know the

00:03:29,200 --> 00:03:34,080
numerous roles in the company

00:03:31,680 --> 00:03:36,239
or even the partner ecosystem to work

00:03:34,080 --> 00:03:37,360
together to seamlessly deliver the new

00:03:36,239 --> 00:03:40,000
capabilities

00:03:37,360 --> 00:03:40,640
at the speed of today's business i would

00:03:40,000 --> 00:03:42,720
propose

00:03:40,640 --> 00:03:44,480
it's through adoption of the rapidly

00:03:42,720 --> 00:03:48,319
evolving cloud native

00:03:44,480 --> 00:03:50,319
uh application in infrastructure model

00:03:48,319 --> 00:03:51,760
many people think that cloud native is

00:03:50,319 --> 00:03:53,360
simply a way to describe

00:03:51,760 --> 00:03:56,239
applications that are run in a public

00:03:53,360 --> 00:03:58,400
cloud but the truth is that that phrase

00:03:56,239 --> 00:04:00,720
is not really so much about where an

00:03:58,400 --> 00:04:03,200
application runs but rather

00:04:00,720 --> 00:04:05,280
cloud native describes a broad approach

00:04:03,200 --> 00:04:08,400
to delivering applications

00:04:05,280 --> 00:04:10,720
it's about how applications are designed

00:04:08,400 --> 00:04:12,560
and built how they are tested and

00:04:10,720 --> 00:04:14,879
released and deployed

00:04:12,560 --> 00:04:16,320
into production environments and it's

00:04:14,879 --> 00:04:19,040
about how they are managed

00:04:16,320 --> 00:04:20,639
as well now it's true that most cloud

00:04:19,040 --> 00:04:22,079
native applications are deployed on a

00:04:20,639 --> 00:04:23,919
cloud infrastructure

00:04:22,079 --> 00:04:25,120
which could be in a private cloud or a

00:04:23,919 --> 00:04:27,440
public cloud

00:04:25,120 --> 00:04:28,479
but where is really irrelevant it's

00:04:27,440 --> 00:04:31,280
about the how

00:04:28,479 --> 00:04:32,320
that matters at the heart of the cloud

00:04:31,280 --> 00:04:35,520
native approach

00:04:32,320 --> 00:04:38,720
is about delivering better software

00:04:35,520 --> 00:04:40,639
faster and at scale and your path toward

00:04:38,720 --> 00:04:42,639
delivering applications faster will

00:04:40,639 --> 00:04:45,600
ultimately be one that takes you

00:04:42,639 --> 00:04:46,639
to a more cloud native approach with

00:04:45,600 --> 00:04:48,880
that said

00:04:46,639 --> 00:04:51,280
let's get into why and how of cloud

00:04:48,880 --> 00:04:51,280
native

00:04:51,680 --> 00:04:55,199
the cloud native approach is vastly

00:04:53,600 --> 00:04:56,160
different than a traditional waterfall

00:04:55,199 --> 00:05:00,000
development model

00:04:56,160 --> 00:05:02,560
and goes far beyond just being an agile

00:05:00,000 --> 00:05:04,160
development model the first striking

00:05:02,560 --> 00:05:05,440
difference between cloud native and

00:05:04,160 --> 00:05:07,680
traditional models

00:05:05,440 --> 00:05:09,680
is the application architecture

00:05:07,680 --> 00:05:11,600
monolithic is definitely not

00:05:09,680 --> 00:05:14,400
the way applications are done if you

00:05:11,600 --> 00:05:16,320
want to succeed in a cloud native model

00:05:14,400 --> 00:05:17,840
cloud native applications are instead

00:05:16,320 --> 00:05:19,600
built from many independent

00:05:17,840 --> 00:05:21,680
microservices

00:05:19,600 --> 00:05:24,960
independent in that they can be deployed

00:05:21,680 --> 00:05:27,039
and run as standalone software services

00:05:24,960 --> 00:05:29,440
they still ultimately come together to

00:05:27,039 --> 00:05:32,160
form a complete application

00:05:29,440 --> 00:05:34,479
in the end but now the application is

00:05:32,160 --> 00:05:36,400
organized in a loosely coupled way

00:05:34,479 --> 00:05:39,840
and this is really transformative and a

00:05:36,400 --> 00:05:41,680
key enabler in this business agility

00:05:39,840 --> 00:05:43,600
now there's no more waiting for the slow

00:05:41,680 --> 00:05:45,520
guy you can push your set of

00:05:43,600 --> 00:05:47,360
microservices through the delivery

00:05:45,520 --> 00:05:49,600
process independently

00:05:47,360 --> 00:05:51,759
as soon as any microservice is completed

00:05:49,600 --> 00:05:54,320
one phase it can go on to the next

00:05:51,759 --> 00:05:55,440
no need to wait to deliver all the

00:05:54,320 --> 00:05:58,000
functionality

00:05:55,440 --> 00:06:00,319
as a single release this means that new

00:05:58,000 --> 00:06:03,120
features can come out incrementally

00:06:00,319 --> 00:06:06,800
microservice by microservice allowing us

00:06:03,120 --> 00:06:09,680
to deliver new capabilities more rapidly

00:06:06,800 --> 00:06:11,520
also since microservices are small they

00:06:09,680 --> 00:06:14,000
require less people to code

00:06:11,520 --> 00:06:15,280
to test to deploy than the complete

00:06:14,000 --> 00:06:18,400
application would

00:06:15,280 --> 00:06:20,560
and therefore more efficient to deliver

00:06:18,400 --> 00:06:21,520
now it's possible to restructure our

00:06:20,560 --> 00:06:23,280
teams

00:06:21,520 --> 00:06:25,199
we can put everyone needed to drive a

00:06:23,280 --> 00:06:28,160
microservice through its entire

00:06:25,199 --> 00:06:31,120
lifecycle into a single devops team

00:06:28,160 --> 00:06:32,000
and these teams are likely still quite

00:06:31,120 --> 00:06:33,600
small

00:06:32,000 --> 00:06:37,039
and this changes the thinking and

00:06:33,600 --> 00:06:40,400
culture uh among the team by emphasizing

00:06:37,039 --> 00:06:43,919
you know end ownership of the software

00:06:40,400 --> 00:06:46,080
in practical terms it it results in

00:06:43,919 --> 00:06:48,479
better integration and management of the

00:06:46,080 --> 00:06:52,000
work needed to move the microservices

00:06:48,479 --> 00:06:54,240
through its complete life cycle finally

00:06:52,000 --> 00:06:55,759
and of critical importance the process

00:06:54,240 --> 00:06:58,160
we are looking at here

00:06:55,759 --> 00:06:59,039
can be highly automated in fact

00:06:58,160 --> 00:07:01,039
end-to-end

00:06:59,039 --> 00:07:04,080
process orchestration is the most

00:07:01,039 --> 00:07:07,520
valuable of all cloud native traits

00:07:04,080 --> 00:07:09,680
it's it too is enabled by microservices

00:07:07,520 --> 00:07:12,960
their independence allows microservices

00:07:09,680 --> 00:07:15,360
to plug into an orchestration process

00:07:12,960 --> 00:07:17,680
and this kind of automation is a great

00:07:15,360 --> 00:07:20,800
revolution in software delivery

00:07:17,680 --> 00:07:23,039
as much so as the first factories were

00:07:20,800 --> 00:07:25,440
to manufacturing

00:07:23,039 --> 00:07:28,080
automation not only speeds delivery of

00:07:25,440 --> 00:07:29,919
any one microservicer application

00:07:28,080 --> 00:07:32,080
but the overall orchestration

00:07:29,919 --> 00:07:34,560
dramatically increases

00:07:32,080 --> 00:07:35,759
overall production capacity efficiency

00:07:34,560 --> 00:07:37,360
and quality

00:07:35,759 --> 00:07:39,039
allowing many applications to be

00:07:37,360 --> 00:07:42,720
reproduced faster

00:07:39,039 --> 00:07:45,840
and more reliably at a lower cost

00:07:42,720 --> 00:07:47,919
the culmination of all of this

00:07:45,840 --> 00:07:49,280
is to reduce application delivery cycle

00:07:47,919 --> 00:07:52,160
time significantly

00:07:49,280 --> 00:07:52,639
from many months or years to a few weeks

00:07:52,160 --> 00:07:55,120
or even

00:07:52,639 --> 00:07:55,840
hours and we do it in a way that can

00:07:55,120 --> 00:07:57,919
scale

00:07:55,840 --> 00:08:00,560
so we can deliver numerous applications

00:07:57,919 --> 00:08:00,560
at great speed

00:08:02,319 --> 00:08:06,639
so there are many facets that contribute

00:08:04,720 --> 00:08:07,840
to how cloud native applications get

00:08:06,639 --> 00:08:11,120
developed

00:08:07,840 --> 00:08:13,120
delivered and run analogous to the many

00:08:11,120 --> 00:08:14,560
skills of an agile runner

00:08:13,120 --> 00:08:17,440
let's look at what each independent

00:08:14,560 --> 00:08:19,520
cloud native domain brings to the table

00:08:17,440 --> 00:08:20,639
and then we will put them together to

00:08:19,520 --> 00:08:24,319
work in concert

00:08:20,639 --> 00:08:26,479
later so each row here highlights a

00:08:24,319 --> 00:08:28,160
different dimension of cloud native

00:08:26,479 --> 00:08:30,080
from left to right we see the the

00:08:28,160 --> 00:08:33,120
historical progression

00:08:30,080 --> 00:08:33,919
as technologies and capabilities have

00:08:33,120 --> 00:08:35,599
evolved

00:08:33,919 --> 00:08:37,839
from the traditional model to cloud

00:08:35,599 --> 00:08:39,680
native uh over time

00:08:37,839 --> 00:08:41,360
and we get to the far right when we say

00:08:39,680 --> 00:08:44,080
that we've really achieved

00:08:41,360 --> 00:08:45,920
a cloud-native computing model the good

00:08:44,080 --> 00:08:46,800
news is it doesn't necessarily have to

00:08:45,920 --> 00:08:50,640
all be done

00:08:46,800 --> 00:08:54,399
at one time moving everything from

00:08:50,640 --> 00:08:55,680
waterfall monolithic physical data

00:08:54,399 --> 00:08:58,000
center infrastructure

00:08:55,680 --> 00:09:00,080
all the way to cloud native computing so

00:08:58,000 --> 00:09:02,240
these can be chosen in increments

00:09:00,080 --> 00:09:04,160
that make sense for your environment and

00:09:02,240 --> 00:09:06,399
each piece will add

00:09:04,160 --> 00:09:07,920
incremental value as you go through the

00:09:06,399 --> 00:09:11,920
process

00:09:07,920 --> 00:09:12,880
but ultimately the kind of one plus one

00:09:11,920 --> 00:09:15,600
plus one

00:09:12,880 --> 00:09:17,200
uh definitely equals greater uh than the

00:09:15,600 --> 00:09:19,200
sum of its parts

00:09:17,200 --> 00:09:20,480
so you ultimately want to get all of

00:09:19,200 --> 00:09:23,519
these

00:09:20,480 --> 00:09:25,519
put together at some point in the future

00:09:23,519 --> 00:09:28,320
and have a vision and a road map for how

00:09:25,519 --> 00:09:28,320
you're going to get there

00:09:31,200 --> 00:09:35,040
so the first point here is that cloud

00:09:32,880 --> 00:09:37,920
native is automated

00:09:35,040 --> 00:09:40,640
you can think about the move from agile

00:09:37,920 --> 00:09:41,920
to devops as expanding the agile team

00:09:40,640 --> 00:09:45,120
and process to include

00:09:41,920 --> 00:09:48,320
operations folks and processes as well

00:09:45,120 --> 00:09:51,200
agile teams that initially test and

00:09:48,320 --> 00:09:53,120
initially included only developers have

00:09:51,200 --> 00:09:54,880
consistently grown to also integrate

00:09:53,120 --> 00:09:57,680
test and release teams

00:09:54,880 --> 00:09:59,680
reaching further to incorporate ops in

00:09:57,680 --> 00:10:01,920
the next extension of the model

00:09:59,680 --> 00:10:03,760
it's been an evolution not necessarily a

00:10:01,920 --> 00:10:05,920
revolution

00:10:03,760 --> 00:10:07,760
but as we there's also this is also

00:10:05,920 --> 00:10:12,320
where we introduce the idea

00:10:07,760 --> 00:10:15,519
of orchestration because

00:10:12,320 --> 00:10:18,240
as we focus on the process it's

00:10:15,519 --> 00:10:19,440
the orchestration that really brings it

00:10:18,240 --> 00:10:21,839
all together

00:10:19,440 --> 00:10:23,040
remember that we are dealing with more

00:10:21,839 --> 00:10:26,320
moving parts

00:10:23,040 --> 00:10:28,240
than at any time in our history so many

00:10:26,320 --> 00:10:30,240
microservices rather than a few

00:10:28,240 --> 00:10:33,040
monolithic applications

00:10:30,240 --> 00:10:35,760
and the teams are small so orchestration

00:10:33,040 --> 00:10:38,640
is essentially required to repeatably

00:10:35,760 --> 00:10:40,560
do this process if we want to deliver

00:10:38,640 --> 00:10:43,680
applications faster

00:10:40,560 --> 00:10:46,880
uh and at scale the app orchestration

00:10:43,680 --> 00:10:50,720
is an is absolute essential

00:10:46,880 --> 00:10:53,200
and note here that kind of looking ahead

00:10:50,720 --> 00:10:53,920
the blue ships wheel is the kubernetes

00:10:53,200 --> 00:10:55,120
logo

00:10:53,920 --> 00:10:57,680
and it's really the leading

00:10:55,120 --> 00:10:59,120
orchestration platform for containers

00:10:57,680 --> 00:11:01,040
and one of the hottest open source

00:10:59,120 --> 00:11:03,519
technologies today

00:11:01,040 --> 00:11:05,440
and it's a platform that you're most

00:11:03,519 --> 00:11:07,120
likely to use sooner or later

00:11:05,440 --> 00:11:08,720
if you're not already and we'll come

00:11:07,120 --> 00:11:12,720
back to this

00:11:08,720 --> 00:11:15,040
more in a few minutes as we discussed

00:11:12,720 --> 00:11:16,560
the move to devops involves changes to

00:11:15,040 --> 00:11:18,959
our organizational structure

00:11:16,560 --> 00:11:20,800
as well and to the way we think about

00:11:18,959 --> 00:11:22,880
our responsibilities

00:11:20,800 --> 00:11:24,800
people become part of the application

00:11:22,880 --> 00:11:27,600
team rather than independent

00:11:24,800 --> 00:11:29,200
functional teams and this drives shifts

00:11:27,600 --> 00:11:32,360
in perspective

00:11:29,200 --> 00:11:34,320
uh and thinking about what our

00:11:32,360 --> 00:11:37,120
responsibilities

00:11:34,320 --> 00:11:40,079
are and the priorities and that in turn

00:11:37,120 --> 00:11:42,399
impacts the culture of the organization

00:11:40,079 --> 00:11:43,279
and a cultural change can be a lot more

00:11:42,399 --> 00:11:45,920
challenging

00:11:43,279 --> 00:11:46,880
than just embracing new technologies

00:11:45,920 --> 00:11:48,880
despite that

00:11:46,880 --> 00:11:49,920
this evolution is happening across all

00:11:48,880 --> 00:11:51,839
industries

00:11:49,920 --> 00:11:53,440
and it's being successful and so if

00:11:51,839 --> 00:11:54,160
you're practicing agile development

00:11:53,440 --> 00:11:56,160
today

00:11:54,160 --> 00:11:57,519
you're already proven that you can make

00:11:56,160 --> 00:11:59,760
that sort of change

00:11:57,519 --> 00:12:02,160
and make that first step along the

00:11:59,760 --> 00:12:02,160
journey

00:12:04,560 --> 00:12:10,959
so cloud native is also about container

00:12:07,760 --> 00:12:12,639
or componentization

00:12:10,959 --> 00:12:14,320
you know looking at one of the key

00:12:12,639 --> 00:12:16,959
aspects of that architecture

00:12:14,320 --> 00:12:18,720
is this notion of microservices

00:12:16,959 --> 00:12:21,839
microservices are the key

00:12:18,720 --> 00:12:24,639
enabling incremental change

00:12:21,839 --> 00:12:26,160
that delivers shorter cycle times and

00:12:24,639 --> 00:12:29,120
allows us to deliver

00:12:26,160 --> 00:12:30,000
incremental value instead of having to

00:12:29,120 --> 00:12:32,480
work at a

00:12:30,000 --> 00:12:34,560
monolithic level by breaking the

00:12:32,480 --> 00:12:37,200
application up into smaller pieces

00:12:34,560 --> 00:12:38,079
we can introduce new capabilities

00:12:37,200 --> 00:12:40,240
rapidly

00:12:38,079 --> 00:12:42,160
without having to wait for a complete

00:12:40,240 --> 00:12:45,440
validation of the entire

00:12:42,160 --> 00:12:47,519
system a good approach to implementing

00:12:45,440 --> 00:12:49,600
microservices architectures is to start

00:12:47,519 --> 00:12:50,880
with a greenfield application

00:12:49,600 --> 00:12:52,560
there's a lot to learn and it's

00:12:50,880 --> 00:12:54,639
generally easier to do when you're

00:12:52,560 --> 00:12:55,200
unencumbered by accumulated technical

00:12:54,639 --> 00:12:58,079
debt

00:12:55,200 --> 00:12:59,839
typical typical of applications that

00:12:58,079 --> 00:13:01,519
have been around for a while

00:12:59,839 --> 00:13:04,000
and once you've developed some sort of

00:13:01,519 --> 00:13:06,720
expertise on the distributed systems and

00:13:04,000 --> 00:13:08,959
the microservices architecture

00:13:06,720 --> 00:13:09,760
fine-tuned the design development

00:13:08,959 --> 00:13:12,320
deployment

00:13:09,760 --> 00:13:13,120
and management of it then is when to

00:13:12,320 --> 00:13:15,440
take on

00:13:13,120 --> 00:13:16,720
some of the more existing monolithic

00:13:15,440 --> 00:13:18,240
applications

00:13:16,720 --> 00:13:21,680
and even in those you're going to want

00:13:18,240 --> 00:13:23,279
to analyze them to determine which ones

00:13:21,680 --> 00:13:25,600
need to be refactored and which ones

00:13:23,279 --> 00:13:27,680
should are better off just left

00:13:25,600 --> 00:13:29,600
alone you know there are many that may

00:13:27,680 --> 00:13:31,600
just not be worth the effort

00:13:29,600 --> 00:13:33,040
to redesign but if you look

00:13:31,600 --> 00:13:35,760
opportunistically

00:13:33,040 --> 00:13:36,720
opportunistically at them you should be

00:13:35,760 --> 00:13:38,959
able to identify

00:13:36,720 --> 00:13:41,120
areas where there may be sections of

00:13:38,959 --> 00:13:43,120
code that are good for refactoring

00:13:41,120 --> 00:13:44,240
or certain functions and services that

00:13:43,120 --> 00:13:47,040
you want to add to an

00:13:44,240 --> 00:13:48,000
application and that's a good way to

00:13:47,040 --> 00:13:51,440
think about breaking

00:13:48,000 --> 00:13:55,120
it down and really being needs driven

00:13:51,440 --> 00:13:55,120
as you go through that process

00:13:56,800 --> 00:14:00,480
the next aspect is about its weight you

00:13:59,440 --> 00:14:03,040
know container

00:14:00,480 --> 00:14:04,800
or cloud native is lightweight and

00:14:03,040 --> 00:14:07,360
portable

00:14:04,800 --> 00:14:09,120
container growth was really driven

00:14:07,360 --> 00:14:10,800
initially by developers

00:14:09,120 --> 00:14:12,560
you know containers are a way of

00:14:10,800 --> 00:14:15,279
packaging the code

00:14:12,560 --> 00:14:16,240
distributing and delivering code and

00:14:15,279 --> 00:14:19,360
being able to

00:14:16,240 --> 00:14:21,279
to make it as portable as possible um

00:14:19,360 --> 00:14:23,680
and this worked out great for the

00:14:21,279 --> 00:14:26,959
developers you know they're fast

00:14:23,680 --> 00:14:29,279
uh e lightweight and easy to use

00:14:26,959 --> 00:14:30,000
and developers can deploy and manage

00:14:29,279 --> 00:14:32,480
them on their

00:14:30,000 --> 00:14:33,440
own often and particularly you know

00:14:32,480 --> 00:14:35,839
testing them out

00:14:33,440 --> 00:14:37,839
and validating even on a as simple as a

00:14:35,839 --> 00:14:42,480
laptop before moving into

00:14:37,839 --> 00:14:45,040
a larger ite ecosystem

00:14:42,480 --> 00:14:46,480
the most compelling is the containers

00:14:45,040 --> 00:14:49,360
run consistently

00:14:46,480 --> 00:14:49,920
almost everywhere why is because they

00:14:49,360 --> 00:14:51,519
include

00:14:49,920 --> 00:14:53,680
everything they need to run the

00:14:51,519 --> 00:14:55,920
application code and all of the

00:14:53,680 --> 00:14:57,680
the operating system dependencies that

00:14:55,920 --> 00:15:00,000
may go along with that

00:14:57,680 --> 00:15:01,360
so as they move from development to

00:15:00,000 --> 00:15:03,760
tests to staging

00:15:01,360 --> 00:15:05,279
and production it should continue to

00:15:03,760 --> 00:15:07,600
work consistently across

00:15:05,279 --> 00:15:09,360
all of the environments this virtually

00:15:07,600 --> 00:15:11,760
eliminates the

00:15:09,360 --> 00:15:13,839
historical challenge of hey this

00:15:11,760 --> 00:15:16,959
application works on my machine

00:15:13,839 --> 00:15:17,839
uh problem where an application fails in

00:15:16,959 --> 00:15:19,360
production or

00:15:17,839 --> 00:15:21,519
end user is having a problem with an

00:15:19,360 --> 00:15:22,880
application but the developer

00:15:21,519 --> 00:15:24,639
doesn't see that problem in their

00:15:22,880 --> 00:15:28,079
environment so

00:15:24,639 --> 00:15:30,639
it's a great uh opportunity to get to

00:15:28,079 --> 00:15:32,880
solve that issue

00:15:30,639 --> 00:15:34,320
containers also make moving code around

00:15:32,880 --> 00:15:35,839
much easier

00:15:34,320 --> 00:15:38,320
which increases the developer

00:15:35,839 --> 00:15:41,199
productivity and streamlines the dev

00:15:38,320 --> 00:15:42,240
test stage production workflow they can

00:15:41,199 --> 00:15:44,399
also take good deal

00:15:42,240 --> 00:15:46,639
of stress out of the software updates

00:15:44,399 --> 00:15:50,000
whereby they only need to update the

00:15:46,639 --> 00:15:54,320
the specific uh service that is

00:15:50,000 --> 00:15:56,959
changing and therefore just delivering a

00:15:54,320 --> 00:15:58,800
specific container rather than taking

00:15:56,959 --> 00:16:02,000
down an entire application

00:15:58,800 --> 00:16:04,320
scheduling a weekend to do a monolithic

00:16:02,000 --> 00:16:04,320
update

00:16:06,560 --> 00:16:12,320
and finally cloud native is abstracted

00:16:09,600 --> 00:16:14,560
uh as i've already mentioned cloud

00:16:12,320 --> 00:16:16,399
native is really about an operational

00:16:14,560 --> 00:16:19,040
model and not a place

00:16:16,399 --> 00:16:20,160
and as the technologies matured and

00:16:19,040 --> 00:16:24,399
containers

00:16:20,160 --> 00:16:27,279
uh be being evolved where they can run

00:16:24,399 --> 00:16:29,199
essentially on any platform now that's

00:16:27,279 --> 00:16:29,839
taken it so that it's not just in a

00:16:29,199 --> 00:16:31,920
cloud

00:16:29,839 --> 00:16:33,120
and it doesn't even need to be in a core

00:16:31,920 --> 00:16:34,800
data center

00:16:33,120 --> 00:16:36,639
the container technology and cloud

00:16:34,800 --> 00:16:38,399
native technology is

00:16:36,639 --> 00:16:39,839
stretched and federated all the way to

00:16:38,399 --> 00:16:42,959
the edge

00:16:39,839 --> 00:16:45,199
enabling edge and iot devices and

00:16:42,959 --> 00:16:46,880
applications to be delivered and

00:16:45,199 --> 00:16:49,600
supported in the same

00:16:46,880 --> 00:16:52,399
cloud native model which greatly

00:16:49,600 --> 00:16:53,759
increases productivity and flexibility

00:16:52,399 --> 00:16:55,680
especially when you want to make

00:16:53,759 --> 00:16:58,240
incremental changes uh

00:16:55,680 --> 00:16:59,839
in far distributed um applications and

00:16:58,240 --> 00:17:01,920
maybe push the edge

00:16:59,839 --> 00:17:03,519
where historically you would need to do

00:17:01,920 --> 00:17:05,039
an all or nothing update and a

00:17:03,519 --> 00:17:07,439
monolithic

00:17:05,039 --> 00:17:09,199
update that could essentially be many

00:17:07,439 --> 00:17:12,400
gigabytes

00:17:09,199 --> 00:17:13,120
and doing that is very time consuming

00:17:12,400 --> 00:17:15,039
very

00:17:13,120 --> 00:17:17,199
bandwidth consuming here you can

00:17:15,039 --> 00:17:19,039
continually deliver

00:17:17,199 --> 00:17:20,720
incremental capabilities or make that

00:17:19,039 --> 00:17:24,559
update to a specific

00:17:20,720 --> 00:17:28,160
service and continue to operate and it's

00:17:24,559 --> 00:17:28,160
done in a much lighter much quicker

00:17:30,840 --> 00:17:34,000
methodology

00:17:32,720 --> 00:17:35,840
so let's look at the maturity

00:17:34,000 --> 00:17:38,000
progression um that this

00:17:35,840 --> 00:17:39,200
this process and adopting cloud native

00:17:38,000 --> 00:17:42,080
takes you through

00:17:39,200 --> 00:17:43,200
uh you'll grow to kind of realize all

00:17:42,080 --> 00:17:46,080
the benefits

00:17:43,200 --> 00:17:47,840
um over time you know starting at the

00:17:46,080 --> 00:17:49,360
the lower right hand corner

00:17:47,840 --> 00:17:52,320
you know as you move toward the cloud

00:17:49,360 --> 00:17:56,400
native approach to application delivery

00:17:52,320 --> 00:17:58,880
you improve upon your software cycle

00:17:56,400 --> 00:17:59,760
life cycle management processes through

00:17:58,880 --> 00:18:01,919
automation

00:17:59,760 --> 00:18:04,400
we realized productivity and efficiency

00:18:01,919 --> 00:18:06,480
gains and we increased the reliability

00:18:04,400 --> 00:18:09,679
of the software releases

00:18:06,480 --> 00:18:11,840
those increased reliability releases

00:18:09,679 --> 00:18:13,280
make us more comfortable with releasing

00:18:11,840 --> 00:18:15,840
software more frequently

00:18:13,280 --> 00:18:18,640
as we do it repeatedly and and see the

00:18:15,840 --> 00:18:18,640
success in that

00:18:18,720 --> 00:18:24,000
then moving to the the lower left

00:18:21,840 --> 00:18:25,679
by introducing new capabilities more

00:18:24,000 --> 00:18:28,400
frequently and incrementally

00:18:25,679 --> 00:18:30,480
to users we speed up that feedback loop

00:18:28,400 --> 00:18:31,440
allowing us to respond more quickly to

00:18:30,480 --> 00:18:32,960
feedback

00:18:31,440 --> 00:18:35,039
and this helps us build the right

00:18:32,960 --> 00:18:36,960
product for our customers the ones that

00:18:35,039 --> 00:18:39,600
the users really want

00:18:36,960 --> 00:18:41,440
and value and you can see which ones

00:18:39,600 --> 00:18:44,799
that they value through either a b

00:18:41,440 --> 00:18:45,600
testing or other types to to really get

00:18:44,799 --> 00:18:48,160
a good

00:18:45,600 --> 00:18:49,440
uh assessment of what users are wanting

00:18:48,160 --> 00:18:52,559
and make changes

00:18:49,440 --> 00:18:54,480
uh fairly real time

00:18:52,559 --> 00:18:56,799
and you can also in this it helps us

00:18:54,480 --> 00:18:58,720
identify problems more quickly

00:18:56,799 --> 00:19:01,039
and since releases only change things

00:18:58,720 --> 00:19:01,840
incrementally the release cadence can be

00:19:01,039 --> 00:19:04,000
rapid

00:19:01,840 --> 00:19:05,360
we can also quickly implement and

00:19:04,000 --> 00:19:08,840
release fixes

00:19:05,360 --> 00:19:10,799
thereby raising the quality of the

00:19:08,840 --> 00:19:13,200
software

00:19:10,799 --> 00:19:15,600
and then finally bringing it home so now

00:19:13,200 --> 00:19:18,720
that we've improved

00:19:15,600 --> 00:19:19,919
or provided the needed capabilities at a

00:19:18,720 --> 00:19:22,080
high quality

00:19:19,919 --> 00:19:24,720
that of course leads us to improved

00:19:22,080 --> 00:19:25,840
customer satisfaction and because we are

00:19:24,720 --> 00:19:28,720
able to achieve

00:19:25,840 --> 00:19:30,080
that goal rapidly and remain responsive

00:19:28,720 --> 00:19:32,400
to changing needs

00:19:30,080 --> 00:19:33,280
by continuously delivering applications

00:19:32,400 --> 00:19:35,600
faster

00:19:33,280 --> 00:19:37,280
we can stay ahead of our competition and

00:19:35,600 --> 00:19:38,559
this is how we grow our business in the

00:19:37,280 --> 00:19:42,160
digital economy

00:19:38,559 --> 00:19:42,160
even through challenging times

00:19:44,000 --> 00:19:47,280
so i promised we would get back to the

00:19:45,760 --> 00:19:49,600
orchestration piece

00:19:47,280 --> 00:19:50,320
and so let's take a look at that i do

00:19:49,600 --> 00:19:53,520
want to click

00:19:50,320 --> 00:19:54,160
to clarify a key point um the difference

00:19:53,520 --> 00:19:56,480
between

00:19:54,160 --> 00:19:57,600
automation and orchestration uh

00:19:56,480 --> 00:20:01,200
sometimes we use

00:19:57,600 --> 00:20:04,799
those uh interchangeably uh but in

00:20:01,200 --> 00:20:06,559
in reality they're not uh automation is

00:20:04,799 --> 00:20:09,600
really about uh

00:20:06,559 --> 00:20:10,720
essentially automating or referring to a

00:20:09,600 --> 00:20:13,840
single task

00:20:10,720 --> 00:20:15,520
or a small number of tasks in relatively

00:20:13,840 --> 00:20:18,640
linear fashion

00:20:15,520 --> 00:20:20,720
where orchestration arranges the tasks

00:20:18,640 --> 00:20:22,880
to optimize a workflow

00:20:20,720 --> 00:20:24,320
for example orchestrating an application

00:20:22,880 --> 00:20:27,840
not only means

00:20:24,320 --> 00:20:29,919
not only means deploying an application

00:20:27,840 --> 00:20:32,080
but also connecting it to the network so

00:20:29,919 --> 00:20:34,480
it can communicate with users and other

00:20:32,080 --> 00:20:36,559
applications and also adjusting and

00:20:34,480 --> 00:20:38,320
dynamically responding to scale and

00:20:36,559 --> 00:20:41,360
response time needs

00:20:38,320 --> 00:20:49,840
so automation without orchestration

00:20:41,360 --> 00:20:49,840
is brittle and difficult to maintain

00:20:52,240 --> 00:20:58,960
so here is a depiction of a common

00:20:56,000 --> 00:20:59,679
software development process and when we

00:20:58,960 --> 00:21:02,720
look at the

00:20:59,679 --> 00:21:03,520
ways to deliver applications faster via

00:21:02,720 --> 00:21:06,799
automation

00:21:03,520 --> 00:21:09,440
and orchestration this is the macro view

00:21:06,799 --> 00:21:13,120
of the processes we want to automate

00:21:09,440 --> 00:21:15,200
or and orchestrate i should say uh

00:21:13,120 --> 00:21:17,520
you know the green chevrons identify the

00:21:15,200 --> 00:21:19,600
life cycle phases of dev and test

00:21:17,520 --> 00:21:20,559
release and deployment management and

00:21:19,600 --> 00:21:22,320
the first part

00:21:20,559 --> 00:21:23,679
is really where the application

00:21:22,320 --> 00:21:26,159
developer

00:21:23,679 --> 00:21:28,240
side comes into play uh you know the

00:21:26,159 --> 00:21:30,159
application life cycle

00:21:28,240 --> 00:21:31,280
kind of put in through the development

00:21:30,159 --> 00:21:33,760
into test

00:21:31,280 --> 00:21:35,440
uh before moving it into production and

00:21:33,760 --> 00:21:37,919
the responsibility as i said really

00:21:35,440 --> 00:21:39,360
falls in application development

00:21:37,919 --> 00:21:41,280
uh the second part of the application

00:21:39,360 --> 00:21:44,320
life cycle takes place

00:21:41,280 --> 00:21:44,960
uh in the production environment where

00:21:44,320 --> 00:21:46,559
the work

00:21:44,960 --> 00:21:48,240
of deploying and managing the

00:21:46,559 --> 00:21:50,320
application happens

00:21:48,240 --> 00:21:52,880
the work done here generally falls under

00:21:50,320 --> 00:21:54,960
the umbrella of application operations

00:21:52,880 --> 00:21:56,799
and applications also need

00:21:54,960 --> 00:21:59,840
infrastructure to run on

00:21:56,799 --> 00:22:01,200
so underlying the applications

00:21:59,840 --> 00:22:02,880
and supporting the needs of the

00:22:01,200 --> 00:22:04,960
applications and the teams working on

00:22:02,880 --> 00:22:08,159
the applications is the foundation

00:22:04,960 --> 00:22:10,480
of infrastructure a lot of work goes

00:22:08,159 --> 00:22:12,080
on at this level as well making sure

00:22:10,480 --> 00:22:15,039
that the infrastructure is available

00:22:12,080 --> 00:22:17,280
to run the application so agile

00:22:15,039 --> 00:22:17,760
development and early devops began to

00:22:17,280 --> 00:22:20,880
provide

00:22:17,760 --> 00:22:22,640
automation across the the application

00:22:20,880 --> 00:22:24,960
domains

00:22:22,640 --> 00:22:26,799
but the degree of the velocity and the

00:22:24,960 --> 00:22:29,840
agility was still

00:22:26,799 --> 00:22:30,559
very limited now as cloud native takes

00:22:29,840 --> 00:22:33,039
hold

00:22:30,559 --> 00:22:35,200
the full ecosystem can participate to

00:22:33,039 --> 00:22:36,880
unlock further potential

00:22:35,200 --> 00:22:39,120
so now let's look at the cloud native

00:22:36,880 --> 00:22:41,360
ecosystem that can be applied to

00:22:39,120 --> 00:22:43,840
automate and orchestrate these disparate

00:22:41,360 --> 00:22:43,840
systems

00:22:45,520 --> 00:22:50,880
now going into detail on each phase

00:22:48,640 --> 00:22:52,640
in project is well beyond the scope and

00:22:50,880 --> 00:22:54,400
time we have today

00:22:52,640 --> 00:22:56,240
however it's important to understand the

00:22:54,400 --> 00:22:57,840
breadth and completeness

00:22:56,240 --> 00:23:00,400
uh developing in the open source

00:22:57,840 --> 00:23:02,240
communities and the collaboration that

00:23:00,400 --> 00:23:04,720
is ultimately enabling

00:23:02,240 --> 00:23:05,679
uh the numerous contributors across

00:23:04,720 --> 00:23:07,440
business

00:23:05,679 --> 00:23:09,679
application development and various

00:23:07,440 --> 00:23:10,640
operations and security teams to work in

00:23:09,679 --> 00:23:14,000
concert with one

00:23:10,640 --> 00:23:15,919
one another undeniably at the heart of

00:23:14,000 --> 00:23:17,039
the cloud native ecosystem has emerged

00:23:15,919 --> 00:23:18,960
kubernetes

00:23:17,039 --> 00:23:20,799
as the core container orchestration

00:23:18,960 --> 00:23:22,880
platform

00:23:20,799 --> 00:23:24,720
containers are a good way to bundle and

00:23:22,880 --> 00:23:26,320
run your applications

00:23:24,720 --> 00:23:28,559
but in a production environment you need

00:23:26,320 --> 00:23:30,640
to manage the containers that run

00:23:28,559 --> 00:23:32,880
the applications and ensure there's no

00:23:30,640 --> 00:23:34,400
downtime for example if a container goes

00:23:32,880 --> 00:23:35,520
down another container needs to be

00:23:34,400 --> 00:23:38,559
started

00:23:35,520 --> 00:23:40,159
if performance is beginning to lag

00:23:38,559 --> 00:23:41,840
additional services may need to be

00:23:40,159 --> 00:23:44,320
started or rerouted

00:23:41,840 --> 00:23:45,440
and kubernetes ensures this behavior is

00:23:44,320 --> 00:23:48,640
orchestrated

00:23:45,440 --> 00:23:50,960
at a system level bringing all of the

00:23:48,640 --> 00:23:51,840
resources that need to participate in a

00:23:50,960 --> 00:23:55,360
change

00:23:51,840 --> 00:23:57,120
or deployment and configuration are done

00:23:55,360 --> 00:23:59,120
through from the application level

00:23:57,120 --> 00:24:01,360
all the way down through the acquiring

00:23:59,120 --> 00:24:03,279
the infrastructure resources

00:24:01,360 --> 00:24:05,440
and so kubernetes provides you with a

00:24:03,279 --> 00:24:06,880
framework to run distributed systems

00:24:05,440 --> 00:24:08,960
resiliently

00:24:06,880 --> 00:24:10,400
it takes care of scaling and failover of

00:24:08,960 --> 00:24:12,240
your application

00:24:10,400 --> 00:24:14,799
and provides deployment patterns and

00:24:12,240 --> 00:24:16,799
much much more

00:24:14,799 --> 00:24:17,840
infrastructure is also actively

00:24:16,799 --> 00:24:20,320
participating

00:24:17,840 --> 00:24:22,320
in the cloud native revolution from

00:24:20,320 --> 00:24:23,120
projects that enable infrastructure as

00:24:22,320 --> 00:24:25,120
code

00:24:23,120 --> 00:24:27,120
to cloud native implementation of

00:24:25,120 --> 00:24:29,760
critical infrastructure runtimes

00:24:27,120 --> 00:24:30,559
including compute networking and service

00:24:29,760 --> 00:24:32,559
meshes

00:24:30,559 --> 00:24:33,840
and persistent in business critical

00:24:32,559 --> 00:24:36,080
storage

00:24:33,840 --> 00:24:36,880
kubernetes can actively orchestrate the

00:24:36,080 --> 00:24:39,120
allocation

00:24:36,880 --> 00:24:40,799
scale and availability of these

00:24:39,120 --> 00:24:43,760
infrastructure resources

00:24:40,799 --> 00:24:45,679
in context of changing application needs

00:24:43,760 --> 00:24:48,559
and this alleviates the burden of

00:24:45,679 --> 00:24:50,799
traditional system administrators tasks

00:24:48,559 --> 00:24:54,240
with rigid deployments and limited

00:24:50,799 --> 00:24:54,240
orchestration capabilities

00:24:56,480 --> 00:25:01,440
so where do you start you know there's

00:24:59,679 --> 00:25:03,360
all of these projects are out there and

00:25:01,440 --> 00:25:06,320
available for you

00:25:03,360 --> 00:25:08,159
to tap into and utilize the beauty which

00:25:06,320 --> 00:25:11,200
is the beauty of open source

00:25:08,159 --> 00:25:13,919
uh but most companies that

00:25:11,200 --> 00:25:15,840
try to go about it on their own and do

00:25:13,919 --> 00:25:18,559
what i call the diy

00:25:15,840 --> 00:25:20,159
approach ultimately run into more

00:25:18,559 --> 00:25:21,840
overhead and management

00:25:20,159 --> 00:25:23,279
in keeping up with what's happening in

00:25:21,840 --> 00:25:25,919
the open source community

00:25:23,279 --> 00:25:27,200
which projects are ready to go etcetera

00:25:25,919 --> 00:25:29,200
than is worth what the

00:25:27,200 --> 00:25:30,880
the effort that they put into it and

00:25:29,200 --> 00:25:32,159
that's where somebody like susa comes

00:25:30,880 --> 00:25:34,960
into play

00:25:32,159 --> 00:25:36,320
a distribution that can bring all of the

00:25:34,960 --> 00:25:39,279
pieces together

00:25:36,320 --> 00:25:40,880
and deliver and ensure that you've got a

00:25:39,279 --> 00:25:43,039
set of packages

00:25:40,880 --> 00:25:45,520
that work in concert with each other and

00:25:43,039 --> 00:25:47,120
are supported and life cycle managed

00:25:45,520 --> 00:25:49,039
you know many of the open source

00:25:47,120 --> 00:25:52,000
projects will go through

00:25:49,039 --> 00:25:52,480
uh multiple iterations even in in the

00:25:52,000 --> 00:25:55,919
realm

00:25:52,480 --> 00:25:57,600
or the time frame of a quarter or two

00:25:55,919 --> 00:25:59,840
and determining which

00:25:57,600 --> 00:26:00,640
iterations are ready for prime time and

00:25:59,840 --> 00:26:04,000
production

00:26:00,640 --> 00:26:07,440
and which iterations need further uh

00:26:04,000 --> 00:26:09,200
work and stabilizing

00:26:07,440 --> 00:26:10,960
is the work that we put into the

00:26:09,200 --> 00:26:13,520
distributions every day

00:26:10,960 --> 00:26:14,240
and so you should rely highly recommend

00:26:13,520 --> 00:26:17,600
that you were to

00:26:14,240 --> 00:26:20,960
rely uh on a distribution vendor

00:26:17,600 --> 00:26:21,919
to be the source of uh how you go about

00:26:20,960 --> 00:26:26,000
that

00:26:21,919 --> 00:26:28,080
and it's really uh in this technology

00:26:26,000 --> 00:26:29,200
ensuring that the technology is

00:26:28,080 --> 00:26:32,080
enterprise ready

00:26:29,200 --> 00:26:33,120
and viable for the long term and we can

00:26:32,080 --> 00:26:35,919
also help you

00:26:33,120 --> 00:26:37,679
understand what skills you need uh to

00:26:35,919 --> 00:26:41,039
develop and support

00:26:37,679 --> 00:26:42,640
the program and so susa is really

00:26:41,039 --> 00:26:44,960
your strategic partner to help you

00:26:42,640 --> 00:26:47,520
achieve you know this business

00:26:44,960 --> 00:26:49,440
agility transformation and as many of

00:26:47,520 --> 00:26:52,799
you have probably read

00:26:49,440 --> 00:26:56,080
about and heard uh susa as

00:26:52,799 --> 00:26:58,480
has announced our intent to acquire

00:26:56,080 --> 00:26:59,760
uh rancher labs and and so sousa and

00:26:58,480 --> 00:27:02,720
rancher will soon

00:26:59,760 --> 00:27:04,080
uh be coming together to bring you uh

00:27:02,720 --> 00:27:07,679
truly the

00:27:04,080 --> 00:27:09,600
world class ecosystem all the way from

00:27:07,679 --> 00:27:10,880
from infrastructure at the linux

00:27:09,600 --> 00:27:14,159
foundation

00:27:10,880 --> 00:27:18,080
up through container platforms and

00:27:14,159 --> 00:27:21,279
kubernetes through a multi-cloud

00:27:18,080 --> 00:27:23,919
hybrid multi-cluster operations and

00:27:21,279 --> 00:27:23,919
management

00:27:26,320 --> 00:27:29,600
so i want to spend a minute here before

00:27:28,159 --> 00:27:31,760
i wrap up on

00:27:29,600 --> 00:27:33,360
you know one of our customers and and

00:27:31,760 --> 00:27:35,039
what their results were and what their

00:27:33,360 --> 00:27:39,200
challenges were

00:27:35,039 --> 00:27:41,760
it were apio mats mission

00:27:39,200 --> 00:27:44,000
is to provide enterprise companies you

00:27:41,760 --> 00:27:45,600
know with agility to deliver new digital

00:27:44,000 --> 00:27:47,200
services faster

00:27:45,600 --> 00:27:49,039
and they do this by simplifying the

00:27:47,200 --> 00:27:50,720
development of front-end applications

00:27:49,039 --> 00:27:53,919
for any device

00:27:50,720 --> 00:27:57,919
be it mobile web voice assistance

00:27:53,919 --> 00:28:01,039
chat bots and now even ar and vr

00:27:57,919 --> 00:28:02,799
and the key to api or matt's offering

00:28:01,039 --> 00:28:04,159
is the flexibility to support different

00:28:02,799 --> 00:28:06,559
it environments

00:28:04,159 --> 00:28:08,799
and the capability to integrate easily

00:28:06,559 --> 00:28:11,919
with existing business applications

00:28:08,799 --> 00:28:14,720
legacy systems and cloud apis

00:28:11,919 --> 00:28:16,000
and so to speed up their time to value

00:28:14,720 --> 00:28:18,880
that they wanted to deliver

00:28:16,000 --> 00:28:20,559
to their customers apio matt decided to

00:28:18,880 --> 00:28:23,360
containerize its software

00:28:20,559 --> 00:28:24,320
and they selected seuss's container

00:28:23,360 --> 00:28:27,360
platform

00:28:24,320 --> 00:28:30,799
to enable the quick and easy deployment

00:28:27,360 --> 00:28:32,240
of apioma in any environment from bare

00:28:30,799 --> 00:28:35,360
metal on premise

00:28:32,240 --> 00:28:36,080
deployments to public cloud deployments

00:28:35,360 --> 00:28:39,279
to managed

00:28:36,080 --> 00:28:41,120
service environments and to offer simple

00:28:39,279 --> 00:28:43,440
solutions that are easy to set up

00:28:41,120 --> 00:28:44,159
in different environments apio map

00:28:43,440 --> 00:28:46,000
needed

00:28:44,159 --> 00:28:47,679
a more efficient way of rolling out its

00:28:46,000 --> 00:28:51,919
client data centers

00:28:47,679 --> 00:28:54,159
and to support client to support private

00:28:51,919 --> 00:28:56,320
cloud on-premise deployments as well as

00:28:54,159 --> 00:28:58,960
public cloud implementations

00:28:56,320 --> 00:28:59,360
so api map standardized its software to

00:28:58,960 --> 00:29:02,880
run

00:28:59,360 --> 00:29:05,440
in linux containers which this this

00:29:02,880 --> 00:29:06,320
uh container platform as we've already

00:29:05,440 --> 00:29:09,200
talked about

00:29:06,320 --> 00:29:11,120
now gives us them the ability uh to

00:29:09,200 --> 00:29:12,240
deploy their applications in any of

00:29:11,120 --> 00:29:15,520
those environments

00:29:12,240 --> 00:29:18,000
without uh extensive retesting

00:29:15,520 --> 00:29:20,159
across numerous platforms that they've

00:29:18,000 --> 00:29:23,200
historically had to do

00:29:20,159 --> 00:29:25,279
so api wanted a container management

00:29:23,200 --> 00:29:28,320
platform based on kubernetes

00:29:25,279 --> 00:29:30,240
in a powerful open source solution

00:29:28,320 --> 00:29:32,640
however since kubernetes can be

00:29:30,240 --> 00:29:35,360
challenging

00:29:32,640 --> 00:29:37,120
to install operate and maintain you know

00:29:35,360 --> 00:29:38,640
they wanted to look for a solution that

00:29:37,120 --> 00:29:40,399
would minimize the time and effort

00:29:38,640 --> 00:29:42,399
required for them to set up

00:29:40,399 --> 00:29:45,039
and operate and maintain the kubernetes

00:29:42,399 --> 00:29:48,159
environment and that's really where

00:29:45,039 --> 00:29:51,679
seuss's container platform uh

00:29:48,159 --> 00:29:52,080
shown through as we run on a wide range

00:29:51,679 --> 00:29:54,799
of

00:29:52,080 --> 00:29:55,919
of infrastructure including cloud

00:29:54,799 --> 00:29:58,000
platforms

00:29:55,919 --> 00:29:59,360
and a key benefit of the sousa container

00:29:58,000 --> 00:30:00,880
platform

00:29:59,360 --> 00:30:03,520
over other container management

00:30:00,880 --> 00:30:05,679
solutions is its flexibility

00:30:03,520 --> 00:30:07,679
api omat customers can deploy their

00:30:05,679 --> 00:30:10,080
applications in any environment

00:30:07,679 --> 00:30:10,799
be it on-prem experimental virtual

00:30:10,080 --> 00:30:12,640
machines

00:30:10,799 --> 00:30:15,200
private cloud or even public cloud

00:30:12,640 --> 00:30:17,919
infrastructure

00:30:15,200 --> 00:30:19,760
so they have really been able to achieve

00:30:17,919 --> 00:30:22,720
greater roi

00:30:19,760 --> 00:30:24,080
faster agility supporting more customers

00:30:22,720 --> 00:30:27,279
than they could

00:30:24,080 --> 00:30:29,840
prior to this transition and has really

00:30:27,279 --> 00:30:31,279
resulted in in growing their success and

00:30:29,840 --> 00:30:34,480
delivering more

00:30:31,279 --> 00:30:38,159
satisfaction to their customers

00:30:34,480 --> 00:30:39,679
so with that uh that's the end of my

00:30:38,159 --> 00:30:43,039
formal presentation

00:30:39,679 --> 00:30:44,640
so i'd like to open it up for questions

00:30:43,039 --> 00:30:50,559
um that we may have that the audience

00:30:44,640 --> 00:30:52,480
may have

00:30:50,559 --> 00:30:54,640
and just as a reminder if you have

00:30:52,480 --> 00:30:56,080
questions for brent please go ahead and

00:30:54,640 --> 00:30:58,399
add them to the q

00:30:56,080 --> 00:31:01,039
a box you'll see it at the bottom of

00:30:58,399 --> 00:31:01,039
your screen

00:31:02,840 --> 00:31:05,840
thanks

00:31:17,360 --> 00:31:21,279
i'm not seeing any questions brent you

00:31:19,840 --> 00:31:23,440
must have done a very first

00:31:21,279 --> 00:31:24,480
i've answered answered them all right up

00:31:23,440 --> 00:31:28,720
front

00:31:24,480 --> 00:31:28,720
which is a good thing yeah

00:31:29,360 --> 00:31:35,120
anyone have any questions

00:31:33,519 --> 00:31:37,279
well if you don't have questions down

00:31:35,120 --> 00:31:40,000
you do have questions later

00:31:37,279 --> 00:31:41,760
keep in mind and you can reach out to us

00:31:40,000 --> 00:31:45,120
at our website

00:31:41,760 --> 00:31:47,039
and then you know we can always follow

00:31:45,120 --> 00:31:48,399
up and particularly as we close with our

00:31:47,039 --> 00:31:50,559
rancher acquisition

00:31:48,399 --> 00:31:52,799
uh be able to get uh more details on

00:31:50,559 --> 00:31:52,799
that

00:31:53,200 --> 00:31:56,559
oh looks like you got a few now brent oh

00:31:56,159 --> 00:32:01,840
yeah

00:31:56,559 --> 00:32:01,840
i guess i spoke too soon yep

00:32:02,799 --> 00:32:09,120
let's see do you require

00:32:06,000 --> 00:32:10,080
uh virtualization from suse or is vmware

00:32:09,120 --> 00:32:13,519
acceptable

00:32:10,080 --> 00:32:16,399
uh this is one where you know are

00:32:13,519 --> 00:32:17,200
we're wide open on that so we run on uh

00:32:16,399 --> 00:32:19,039
can support

00:32:17,200 --> 00:32:20,240
any number of virtualization

00:32:19,039 --> 00:32:22,880
environments so

00:32:20,240 --> 00:32:24,159
yes we can run you know on a bare metal

00:32:22,880 --> 00:32:26,159
susa

00:32:24,159 --> 00:32:28,240
environment or it could be run if you've

00:32:26,159 --> 00:32:30,960
got a vmware

00:32:28,240 --> 00:32:32,000
infrastructure and run around the susa

00:32:30,960 --> 00:32:35,440
container

00:32:32,000 --> 00:32:37,519
environment absolutely supported in by

00:32:35,440 --> 00:32:39,679
in that environment and we plan to

00:32:37,519 --> 00:32:42,240
continue that

00:32:39,679 --> 00:32:43,200
that open methodology going forward so i

00:32:42,240 --> 00:32:46,880
absolutely

00:32:43,200 --> 00:32:46,880
believe in a heterogeneous environment

00:32:48,640 --> 00:32:54,399
uh see do you

00:32:51,760 --> 00:32:56,720
see those deployments more on-prem

00:32:54,399 --> 00:32:59,120
public or in a mixed hybrid

00:32:56,720 --> 00:33:00,000
uh do you see that mix changing in the

00:32:59,120 --> 00:33:03,519
next

00:33:00,000 --> 00:33:06,640
one two or five years um that's a great

00:33:03,519 --> 00:33:07,200
great question uh i'm seeing more and

00:33:06,640 --> 00:33:10,399
more

00:33:07,200 --> 00:33:10,880
uh in a mixed environment most people

00:33:10,399 --> 00:33:14,320
will

00:33:10,880 --> 00:33:17,279
do a first one obviously in

00:33:14,320 --> 00:33:18,960
picking a very homogeneous environment

00:33:17,279 --> 00:33:21,600
so that may be

00:33:18,960 --> 00:33:24,000
in the cloud or it may be on-prem we've

00:33:21,600 --> 00:33:24,399
got a lot of customers going in both and

00:33:24,000 --> 00:33:27,360
i

00:33:24,399 --> 00:33:28,720
don't know the exact distribution uh but

00:33:27,360 --> 00:33:32,080
it can be done

00:33:28,720 --> 00:33:35,120
uh in either and i

00:33:32,080 --> 00:33:35,519
i see kind of much of the core data

00:33:35,120 --> 00:33:38,240
center

00:33:35,519 --> 00:33:39,039
you know over the next say two to five

00:33:38,240 --> 00:33:40,720
years

00:33:39,039 --> 00:33:43,440
probably moving more and more to the

00:33:40,720 --> 00:33:47,279
cloud to public clouds

00:33:43,440 --> 00:33:47,919
but that the balance of that i would say

00:33:47,279 --> 00:33:50,159
that will

00:33:47,919 --> 00:33:50,960
will always keep things in a very hybrid

00:33:50,159 --> 00:33:54,159
model

00:33:50,960 --> 00:33:57,120
is as edge emerges

00:33:54,159 --> 00:33:58,240
you know edge is by definition an

00:33:57,120 --> 00:34:01,440
on-prem

00:33:58,240 --> 00:34:02,399
uh experience and so regardless of the

00:34:01,440 --> 00:34:04,720
technology

00:34:02,399 --> 00:34:05,519
you know we see the container technology

00:34:04,720 --> 00:34:06,960
moving

00:34:05,519 --> 00:34:08,560
to the edge and being able to be

00:34:06,960 --> 00:34:12,000
deployed

00:34:08,560 --> 00:34:15,599
in lighter weight implementations

00:34:12,000 --> 00:34:18,839
you know such as as ranchers k3s

00:34:15,599 --> 00:34:22,399
a very lightweight edge targeted

00:34:18,839 --> 00:34:25,520
solution that allows a hybrid model

00:34:22,399 --> 00:34:27,280
where the edge can be that point of

00:34:25,520 --> 00:34:30,000
presence interacting with

00:34:27,280 --> 00:34:30,480
the customers uh gathering data real

00:34:30,000 --> 00:34:32,720
time

00:34:30,480 --> 00:34:34,720
filtering that back and and making

00:34:32,720 --> 00:34:36,320
localized decisions

00:34:34,720 --> 00:34:38,320
but then after that data has been

00:34:36,320 --> 00:34:40,320
filtered that can be been uploaded to

00:34:38,320 --> 00:34:43,839
the cloud for further analytics

00:34:40,320 --> 00:34:46,720
and so we see a big momentum

00:34:43,839 --> 00:34:48,639
in this hybrid application where the

00:34:46,720 --> 00:34:51,200
application is federated across

00:34:48,639 --> 00:34:52,079
on-prem resources in edge or micro data

00:34:51,200 --> 00:34:55,599
centers

00:34:52,079 --> 00:34:58,480
uh and connected and interoperating with

00:34:55,599 --> 00:34:59,040
uh cloud deployments in in one of the

00:34:58,480 --> 00:35:02,320
major

00:34:59,040 --> 00:35:07,200
uh cloud distributions

00:35:02,320 --> 00:35:10,960
uh seuss's container orchestrator today

00:35:07,200 --> 00:35:13,440
we've got a platform that is called

00:35:10,960 --> 00:35:14,480
cass a container as a service platform

00:35:13,440 --> 00:35:17,599
uh and

00:35:14,480 --> 00:35:18,079
we'll be kind of streamlining that we

00:35:17,599 --> 00:35:20,800
have

00:35:18,079 --> 00:35:21,599
we're still haven't closed with rancher

00:35:20,800 --> 00:35:26,240
but we

00:35:21,599 --> 00:35:28,160
uh once that closes in the coming weeks

00:35:26,240 --> 00:35:29,440
we'll be putting together an integrated

00:35:28,160 --> 00:35:31,839
roadmap

00:35:29,440 --> 00:35:33,200
and providing further updates on what

00:35:31,839 --> 00:35:36,640
that portfolio

00:35:33,200 --> 00:35:37,680
looks like but you can count on some

00:35:36,640 --> 00:35:39,200
continuity

00:35:37,680 --> 00:35:45,839
uh going across from our current

00:35:39,200 --> 00:35:45,839
portfolio to the new portfolio

00:35:47,760 --> 00:35:51,440
uh next question uh there's a question

00:35:50,960 --> 00:35:56,320
on

00:35:51,440 --> 00:35:59,599
how is susa agnostic in their choices

00:35:56,320 --> 00:36:01,359
and uh let's say is there lock-in or how

00:35:59,599 --> 00:36:03,280
do we minimize lock-in

00:36:01,359 --> 00:36:05,200
um i'm gonna turn it into the minimize

00:36:03,280 --> 00:36:06,320
lock-in because one of the things that's

00:36:05,200 --> 00:36:09,359
that's quite different

00:36:06,320 --> 00:36:11,760
in in how susa uh

00:36:09,359 --> 00:36:12,800
makes their choices is everything that

00:36:11,760 --> 00:36:16,560
we do

00:36:12,800 --> 00:36:19,359
is is open source 100 we don't have any

00:36:16,560 --> 00:36:22,720
proprietary extensions

00:36:19,359 --> 00:36:26,400
on top of the products that we do or the

00:36:22,720 --> 00:36:28,160
code that we do the other thing that we

00:36:26,400 --> 00:36:30,000
are very supportive of is a

00:36:28,160 --> 00:36:31,119
heterogeneous environment i already made

00:36:30,000 --> 00:36:34,480
one comment on this

00:36:31,119 --> 00:36:37,119
and with the vmware question is that

00:36:34,480 --> 00:36:38,880
whether it's our container platform um

00:36:37,119 --> 00:36:40,160
or the container management our current

00:36:38,880 --> 00:36:43,040
container management and

00:36:40,160 --> 00:36:44,000
and you know this will continue on uh

00:36:43,040 --> 00:36:46,720
another area that will

00:36:44,000 --> 00:36:47,920
absolutely continue on with rancher is

00:36:46,720 --> 00:36:49,359
that we support a header very

00:36:47,920 --> 00:36:51,280
heterogeneous environment

00:36:49,359 --> 00:36:53,119
so it doesn't have to be an all or

00:36:51,280 --> 00:36:56,640
nothing susa

00:36:53,119 --> 00:36:58,720
solution if you need to intermix

00:36:56,640 --> 00:36:59,760
some other vendor technology you want to

00:36:58,720 --> 00:37:03,680
use

00:36:59,760 --> 00:37:04,880
microsoft ak as for their container

00:37:03,680 --> 00:37:08,560
environment

00:37:04,880 --> 00:37:11,040
with sushi containers on-prem with

00:37:08,560 --> 00:37:12,160
say even a competitor a competitive

00:37:11,040 --> 00:37:15,520
container

00:37:12,160 --> 00:37:18,400
environment and linux environment

00:37:15,520 --> 00:37:19,040
for another application we can help

00:37:18,400 --> 00:37:22,240
manage

00:37:19,040 --> 00:37:24,400
that entire estate our tools are

00:37:22,240 --> 00:37:26,240
are designed in a very open manner in a

00:37:24,400 --> 00:37:30,400
very heterogeneous manner

00:37:26,240 --> 00:37:32,560
so from a a whether we're managing linux

00:37:30,400 --> 00:37:33,760
we manage a lin a heterogeneous linux

00:37:32,560 --> 00:37:36,880
environment uh

00:37:33,760 --> 00:37:38,480
whether it's sousa or red hat or ubuntu

00:37:36,880 --> 00:37:40,400
we can do the lifecycle management of

00:37:38,480 --> 00:37:41,200
all of those if it's our container

00:37:40,400 --> 00:37:45,040
platform

00:37:41,200 --> 00:37:46,320
or aks when we bring on rancher we'll

00:37:45,040 --> 00:37:49,200
support

00:37:46,320 --> 00:37:52,000
a multi-container multi-cloud

00:37:49,200 --> 00:37:54,670
environment there as well

00:37:52,000 --> 00:37:56,079
so i hope that answers that question

00:37:54,670 --> 00:37:58,880
[Music]

00:37:56,079 --> 00:38:00,800
are there plans to pursue aiml

00:37:58,880 --> 00:38:01,860
strategies with suse technology and

00:38:00,800 --> 00:38:03,599
partners

00:38:01,860 --> 00:38:06,960
[Music]

00:38:03,599 --> 00:38:10,640
absolutely we are

00:38:06,960 --> 00:38:14,160
building out more and more of our aiml

00:38:10,640 --> 00:38:15,599
capabilities we support at the container

00:38:14,160 --> 00:38:17,839
level we support

00:38:15,599 --> 00:38:19,680
acceleration technologies today and

00:38:17,839 --> 00:38:23,760
support uh many of the

00:38:19,680 --> 00:38:25,440
uh most common uh ai or machine learning

00:38:23,760 --> 00:38:27,520
tool kits

00:38:25,440 --> 00:38:28,640
in the future we've got some exciting

00:38:27,520 --> 00:38:30,480
things coming

00:38:28,640 --> 00:38:32,160
uh with new products that you'll see

00:38:30,480 --> 00:38:34,720
this fall

00:38:32,160 --> 00:38:35,280
on helping the data scientists also in

00:38:34,720 --> 00:38:38,400
the

00:38:35,280 --> 00:38:40,320
in full implementation of machine

00:38:38,400 --> 00:38:41,440
learning pipelines and the management of

00:38:40,320 --> 00:38:44,160
those

00:38:41,440 --> 00:38:45,760
so we we definitely plan to to invest

00:38:44,160 --> 00:38:48,560
more heavily there

00:38:45,760 --> 00:38:50,000
delivering that both in a bare metal

00:38:48,560 --> 00:38:53,040
scenario

00:38:50,000 --> 00:38:56,560
as well as a containerized model

00:38:53,040 --> 00:38:56,560
and on-prem and in the cloud

00:38:58,079 --> 00:39:01,599
what was the deal size of rancher that i

00:39:00,240 --> 00:39:04,400
i cannot comment

00:39:01,599 --> 00:39:05,200
um on so but a nice question uh

00:39:04,400 --> 00:39:09,520
nonetheless

00:39:05,200 --> 00:39:10,880
so uh there's one question going back up

00:39:09,520 --> 00:39:13,680
to one of the first questions

00:39:10,880 --> 00:39:15,119
um is any recommendation regarding

00:39:13,680 --> 00:39:18,640
security

00:39:15,119 --> 00:39:20,240
in the in the public cloud i don't have

00:39:18,640 --> 00:39:24,160
a specific

00:39:20,240 --> 00:39:26,400
uh recommendation for the technologies

00:39:24,160 --> 00:39:28,480
you know it's we don't uh have a

00:39:26,400 --> 00:39:31,520
security portfolio

00:39:28,480 --> 00:39:32,079
in and of ourselves other than uh i

00:39:31,520 --> 00:39:35,599
guess there's

00:39:32,079 --> 00:39:38,880
security is a very multifaceted uh

00:39:35,599 --> 00:39:39,599
area so um i'm gonna respond to that

00:39:38,880 --> 00:39:42,400
fairly

00:39:39,599 --> 00:39:42,880
uh loosely in that you know we obviously

00:39:42,400 --> 00:39:45,760
focus

00:39:42,880 --> 00:39:48,000
very heavily on security of our products

00:39:45,760 --> 00:39:50,640
ensure that they're engineered in a way

00:39:48,000 --> 00:39:52,480
to be as secure as possible and then

00:39:50,640 --> 00:39:54,480
helping with the governance of

00:39:52,480 --> 00:39:55,760
of that infrastructure and its life

00:39:54,480 --> 00:39:58,720
cycle management

00:39:55,760 --> 00:40:00,960
from a patch management standpoint

00:39:58,720 --> 00:40:03,440
ensuring that everything is up to date

00:40:00,960 --> 00:40:05,119
it's compliant on a patch level on a

00:40:03,440 --> 00:40:08,319
configuration level

00:40:05,119 --> 00:40:10,880
we can do that with our tools on-prem

00:40:08,319 --> 00:40:12,480
and in the cloud so ensuring that your

00:40:10,880 --> 00:40:13,839
linux environment that your container

00:40:12,480 --> 00:40:16,400
environment

00:40:13,839 --> 00:40:17,119
is up to your specifications your

00:40:16,400 --> 00:40:20,319
policies

00:40:17,119 --> 00:40:22,240
and configuration and patch compliance

00:40:20,319 --> 00:40:23,440
uh you know we provide the tools for

00:40:22,240 --> 00:40:28,160
doing that

00:40:23,440 --> 00:40:31,040
beyond that from intrusion detection

00:40:28,160 --> 00:40:32,960
further configuration management and

00:40:31,040 --> 00:40:35,119
governance and application configuration

00:40:32,960 --> 00:40:38,079
management governance

00:40:35,119 --> 00:40:39,440
we don't provide anything specifically

00:40:38,079 --> 00:40:41,359
so it's a little bit

00:40:39,440 --> 00:40:43,599
beyond the scope of what i could answer

00:40:41,359 --> 00:40:43,599
today

00:40:46,240 --> 00:40:53,839
i think that's all of the current

00:40:49,680 --> 00:40:53,839
outstanding questions

00:40:54,240 --> 00:40:59,599
oops one more sorry

00:40:57,359 --> 00:41:01,119
no no worries uh here's another and this

00:40:59,599 --> 00:41:03,760
is a great a great one

00:41:01,119 --> 00:41:05,359
um mentioning that i mentioned that

00:41:03,760 --> 00:41:08,720
kubernetes is difficult

00:41:05,359 --> 00:41:11,119
um to deploy manage etc and are there

00:41:08,720 --> 00:41:13,920
plans to add layers to make this easier

00:41:11,119 --> 00:41:15,359
recommend suggestions so there's

00:41:13,920 --> 00:41:18,960
multiple approaches and

00:41:15,359 --> 00:41:22,240
and we're supporting uh

00:41:18,960 --> 00:41:22,560
numerous of those uh i'm going to start

00:41:22,240 --> 00:41:25,839
with

00:41:22,560 --> 00:41:29,280
you know one to go all the way to the

00:41:25,839 --> 00:41:32,079
uh abstract away kubernetes and

00:41:29,280 --> 00:41:34,160
is the opinionated model we have a cloud

00:41:32,079 --> 00:41:36,079
foundry based solution called cloud

00:41:34,160 --> 00:41:39,440
application platform today

00:41:36,079 --> 00:41:43,359
that really abstracts the user from

00:41:39,440 --> 00:41:45,440
the developer from kubernetes at all

00:41:43,359 --> 00:41:48,079
everything's done behind the scenes set

00:41:45,440 --> 00:41:51,200
up in in workflows and policies

00:41:48,079 --> 00:41:53,839
uh in the the cloud foundry environment

00:41:51,200 --> 00:41:55,119
uh set up kind of essentially as an

00:41:53,839 --> 00:41:58,560
opinionated

00:41:55,119 --> 00:42:00,640
uh model and uh

00:41:58,560 --> 00:42:02,640
you know that completely abstracts it so

00:42:00,640 --> 00:42:03,520
it's extremely easy from a developer

00:42:02,640 --> 00:42:06,000
standpoint

00:42:03,520 --> 00:42:07,200
and then a small set of kubernetes

00:42:06,000 --> 00:42:09,040
experts

00:42:07,200 --> 00:42:10,319
can manage the back end and ensure

00:42:09,040 --> 00:42:13,760
that's operating

00:42:10,319 --> 00:42:15,599
uh at its easiest the next level of

00:42:13,760 --> 00:42:19,119
abstraction

00:42:15,599 --> 00:42:22,079
is typically where a core team of

00:42:19,119 --> 00:42:24,000
devops experts and kubernetes experts

00:42:22,079 --> 00:42:28,480
would set up a custom

00:42:24,000 --> 00:42:31,760
ci cd pipeline for an organization

00:42:28,480 --> 00:42:34,160
and you know if they set that up uh

00:42:31,760 --> 00:42:35,200
and roll that out as a as a company

00:42:34,160 --> 00:42:37,280
standard

00:42:35,200 --> 00:42:39,839
then developers can be abstracted from

00:42:37,280 --> 00:42:43,200
evan to each repeatedly build

00:42:39,839 --> 00:42:46,079
um their own pipelines and in their own

00:42:43,200 --> 00:42:48,560
ecosystem and pull in many services that

00:42:46,079 --> 00:42:50,240
can be provided from a centralized core

00:42:48,560 --> 00:42:53,520
services team

00:42:50,240 --> 00:42:57,200
that's probably the model that we see

00:42:53,520 --> 00:43:01,760
being adopted that i see coming on

00:42:57,200 --> 00:43:04,079
as probably the ultimate model

00:43:01,760 --> 00:43:06,800
in the initial phases it was either the

00:43:04,079 --> 00:43:09,839
completely opinionated or the completely

00:43:06,800 --> 00:43:10,640
uh cowboy on your own the developers on

00:43:09,839 --> 00:43:13,680
their own

00:43:10,640 --> 00:43:15,119
uh model and i think we're gravitating

00:43:13,680 --> 00:43:16,800
to the center

00:43:15,119 --> 00:43:19,359
where there's going to be that

00:43:16,800 --> 00:43:20,750
centralized set of expertise

00:43:19,359 --> 00:43:22,400
that build

00:43:20,750 --> 00:43:26,079
[Music]

00:43:22,400 --> 00:43:28,800
you know customizable but

00:43:26,079 --> 00:43:29,359
a ci cd platform for inside a company

00:43:28,800 --> 00:43:32,720
and as

00:43:29,359 --> 00:43:34,400
we move more into you know beyond devops

00:43:32,720 --> 00:43:36,720
and into git ops

00:43:34,400 --> 00:43:39,040
i think we'll see that even evolve even

00:43:36,720 --> 00:43:39,040
further

00:43:39,520 --> 00:43:44,400
for recommended training um you if you

00:43:42,480 --> 00:43:46,880
go to susa's website we've got

00:43:44,400 --> 00:43:48,319
uh quite a bit of training uh that we

00:43:46,880 --> 00:43:51,200
offer we also have uh

00:43:48,319 --> 00:43:52,319
training partners and uh the linux

00:43:51,200 --> 00:43:54,400
foundation

00:43:52,319 --> 00:43:55,599
actually has an excellent set of classes

00:43:54,400 --> 00:43:58,720
and you can become

00:43:55,599 --> 00:44:01,200
uh lf certified as well on many of the

00:43:58,720 --> 00:44:04,880
technologies

00:44:01,200 --> 00:44:06,880
uh and the last question i've got here

00:44:04,880 --> 00:44:07,920
is will we upload the slides after the

00:44:06,880 --> 00:44:10,400
presentation

00:44:07,920 --> 00:44:12,480
and yes the slides will be not the

00:44:10,400 --> 00:44:14,400
slides necessarily but the presentation

00:44:12,480 --> 00:44:17,520
itself is being recorded

00:44:14,400 --> 00:44:21,520
uh and so that can be uh

00:44:17,520 --> 00:44:22,400
gotten and reviewed uh just in the the

00:44:21,520 --> 00:44:24,720
lf

00:44:22,400 --> 00:44:24,720
channel

00:44:29,119 --> 00:44:34,720
okay very good that was good

00:44:32,480 --> 00:44:36,560
i thoroughly enjoyed the session this

00:44:34,720 --> 00:44:38,800
afternoon and thank you for

00:44:36,560 --> 00:44:39,680
giving me the opportunity to to present

00:44:38,800 --> 00:44:42,880
thanks everybody

00:44:39,680 --> 00:44:44,319
that attended uh the event i greatly

00:44:42,880 --> 00:44:46,480
appreciate it

00:44:44,319 --> 00:44:47,920
thank you so much brent and thanks

00:44:46,480 --> 00:44:49,839
everyone for joining us

00:44:47,920 --> 00:44:52,960
and hope you have a wonderful rest of

00:44:49,839 --> 00:45:00,160
your day and hope to see you next time

00:44:52,960 --> 00:45:00,160

YouTube URL: https://www.youtube.com/watch?v=gM4gpXBTQ0g


