Title: Webinar: Moving Fast When You Can't Break Things - Modern Continuous Delivery  Techniques with OPA
Publication date: 2021-03-18
Playlist: LF Live Webinars
Description: 
	Sponsored by Harness

Learn in this session about the tenants of Continuous Delivery and the art of the possible with OPA inside your CI/CD pipelines. If this is your first time digging into Continuous Delivery, learn how to get engaged with the Linux Foundationâ€™s very own Continuous Delivery Foundation.
Captions: 
	00:00:00,240 --> 00:00:03,600
introductions and yeah welcome everybody

00:00:02,000 --> 00:00:05,440
again to the webinar

00:00:03,600 --> 00:00:07,359
very excited that you're here this is a

00:00:05,440 --> 00:00:09,280
topic that rohan and i are both

00:00:07,359 --> 00:00:11,200
very passionate about so hopefully the

00:00:09,280 --> 00:00:13,440
next uh 40 minutes or so

00:00:11,200 --> 00:00:14,400
there's a lot to learn and uh yeah keep

00:00:13,440 --> 00:00:15,920
the questions coming

00:00:14,400 --> 00:00:17,680
we'll wait till the answer going

00:00:15,920 --> 00:00:19,119
sequentially through the questions

00:00:17,680 --> 00:00:21,039
uh and so if you have any sort of

00:00:19,119 --> 00:00:21,600
questions or comments please please add

00:00:21,039 --> 00:00:24,080
them

00:00:21,600 --> 00:00:25,119
so who are these two people talking at

00:00:24,080 --> 00:00:27,599
with you today

00:00:25,119 --> 00:00:28,720
uh so first on robbie lachman i'm an

00:00:27,599 --> 00:00:30,640
advantage as a harness

00:00:28,720 --> 00:00:32,399
in my background i worked at a few firms

00:00:30,640 --> 00:00:32,960
i worked at ibm red hat and business

00:00:32,399 --> 00:00:35,360
fair

00:00:32,960 --> 00:00:37,280
and so distributed systems is my game i

00:00:35,360 --> 00:00:38,960
had way too many outages blew the error

00:00:37,280 --> 00:00:40,160
budget now i was told i can't touch

00:00:38,960 --> 00:00:41,920
production anymore

00:00:40,160 --> 00:00:43,360
and this is where i met my friend rohan

00:00:41,920 --> 00:00:45,120
rohan let me tell the folks a little bit

00:00:43,360 --> 00:00:48,480
about yourself

00:00:45,120 --> 00:00:51,039
hey guys uh ron gupta here um i

00:00:48,480 --> 00:00:52,879
was a software engineer at ge i worked

00:00:51,039 --> 00:00:54,800
on the cicd tool

00:00:52,879 --> 00:00:56,719
internally and then you know my journey

00:00:54,800 --> 00:01:00,399
kind of took me to harness we

00:00:56,719 --> 00:01:02,800
love cicd here obviously and

00:01:00,399 --> 00:01:03,600
you know i was a solution architect so i

00:01:02,800 --> 00:01:06,080
really helped

00:01:03,600 --> 00:01:07,680
you know users adopt the product and

00:01:06,080 --> 00:01:10,400
really learned about ci cd

00:01:07,680 --> 00:01:12,080
and governance along the way and i kind

00:01:10,400 --> 00:01:12,720
of fell in love with this topic as we

00:01:12,080 --> 00:01:15,360
were

00:01:12,720 --> 00:01:15,759
you know exploring the space and now i'm

00:01:15,360 --> 00:01:18,960
a

00:01:15,759 --> 00:01:21,360
product manager and i get to enable

00:01:18,960 --> 00:01:22,880
all of us to you know build cool things

00:01:21,360 --> 00:01:26,400
with our product and

00:01:22,880 --> 00:01:28,560
be able to deploy seamlessly

00:01:26,400 --> 00:01:30,320
yeah awesome ron and so what are we

00:01:28,560 --> 00:01:31,520
going to be talking about today so we

00:01:30,320 --> 00:01:32,400
have four main topics we're going to

00:01:31,520 --> 00:01:34,560
kind of cover

00:01:32,400 --> 00:01:36,000
uh just as a level set one is continuous

00:01:34,560 --> 00:01:38,240
delivery so we're just

00:01:36,000 --> 00:01:40,000
not talking in the ether a little bit

00:01:38,240 --> 00:01:40,640
about introduction to what even is a

00:01:40,000 --> 00:01:43,200
policy

00:01:40,640 --> 00:01:44,240
and then the genesis of opa and what is

00:01:43,200 --> 00:01:46,159
opa

00:01:44,240 --> 00:01:47,280
and then for the fun stuff uh open

00:01:46,159 --> 00:01:48,960
policy agent

00:01:47,280 --> 00:01:50,479
and continuous delivery better together

00:01:48,960 --> 00:01:51,920
so we'll walk you through a few use

00:01:50,479 --> 00:01:54,159
cases that we've seen

00:01:51,920 --> 00:01:55,200
and also some of the art of the possible

00:01:54,159 --> 00:01:57,680
and then also

00:01:55,200 --> 00:01:59,360
uh we also participate in another linux

00:01:57,680 --> 00:02:00,000
foundation sub foundation which is part

00:01:59,360 --> 00:02:02,640
of the

00:02:00,000 --> 00:02:04,240
cncf the continuous delivery foundation

00:02:02,640 --> 00:02:05,759
a lot of acronyms there but

00:02:04,240 --> 00:02:08,239
also a lot of the work that we're doing

00:02:05,759 --> 00:02:10,160
in the cdf is helping everybody

00:02:08,239 --> 00:02:11,760
leverage continuous delivery and so how

00:02:10,160 --> 00:02:15,680
also how you can get started to

00:02:11,760 --> 00:02:17,520
join the cdf so continuous delivery

00:02:15,680 --> 00:02:18,879
what is continuous delivery so

00:02:17,520 --> 00:02:21,040
continuous delivery

00:02:18,879 --> 00:02:22,400
here's one of the always a big fan of

00:02:21,040 --> 00:02:23,760
books uh there'll be a couple books

00:02:22,400 --> 00:02:24,800
throughout the presentation but

00:02:23,760 --> 00:02:26,319
here here's one of the most

00:02:24,800 --> 00:02:26,879
quintessential pieces about contains

00:02:26,319 --> 00:02:29,599
delivery

00:02:26,879 --> 00:02:31,360
it is named continuous delivery how much

00:02:29,599 --> 00:02:33,920
is humble and david farley

00:02:31,360 --> 00:02:35,599
and so basically uh continuous delivery

00:02:33,920 --> 00:02:36,480
is all about getting to production

00:02:35,599 --> 00:02:38,160
safely

00:02:36,480 --> 00:02:40,239
the key word there is safely in my

00:02:38,160 --> 00:02:42,879
career i've gone to production a lot

00:02:40,239 --> 00:02:44,000
uh sometimes it hasn't been very safe or

00:02:42,879 --> 00:02:45,840
people would question

00:02:44,000 --> 00:02:47,920
that wasn't very repeatable or that's a

00:02:45,840 --> 00:02:49,920
very bespoke process

00:02:47,920 --> 00:02:51,519
but contains delivery is about making

00:02:49,920 --> 00:02:53,920
sure that how the path

00:02:51,519 --> 00:02:55,920
to production where your customers are

00:02:53,920 --> 00:02:58,480
so your internal external customers

00:02:55,920 --> 00:03:00,319
is a safe and repeatable path and that's

00:02:58,480 --> 00:03:01,920
it right so it's easier said than done

00:03:00,319 --> 00:03:03,120
but we can get into how this is actually

00:03:01,920 --> 00:03:05,280
a little bit tricky

00:03:03,120 --> 00:03:06,959
that because like all of us saw there's

00:03:05,280 --> 00:03:08,959
no one path to software

00:03:06,959 --> 00:03:10,480
and so let me show you what i call the

00:03:08,959 --> 00:03:13,200
lifeblood of an application

00:03:10,480 --> 00:03:15,200
uh i like i like donuts so in this case

00:03:13,200 --> 00:03:18,080
the donut is an application

00:03:15,200 --> 00:03:19,120
but similar to medieval times the humors

00:03:18,080 --> 00:03:21,280
or humeruses

00:03:19,120 --> 00:03:23,040
uh they're typically four humors to

00:03:21,280 --> 00:03:24,000
powered application so clearly an

00:03:23,040 --> 00:03:26,319
application needs

00:03:24,000 --> 00:03:28,080
some these resources an application will

00:03:26,319 --> 00:03:30,640
need compute resources

00:03:28,080 --> 00:03:32,319
uh it needs to run somewhere so at some

00:03:30,640 --> 00:03:34,000
point you'll need some sort of durable

00:03:32,319 --> 00:03:36,799
storage to either house the application

00:03:34,000 --> 00:03:39,200
binaries or data so you need storage

00:03:36,799 --> 00:03:39,920
networking it's like if a tree fell in

00:03:39,200 --> 00:03:42,080
the woods

00:03:39,920 --> 00:03:44,319
can you hear it an application that

00:03:42,080 --> 00:03:46,480
doesn't have any sort of connectivity

00:03:44,319 --> 00:03:47,599
this is an application uh and then also

00:03:46,480 --> 00:03:49,200
your application needs

00:03:47,599 --> 00:03:50,959
application infrastructure so if you

00:03:49,200 --> 00:03:51,599
take a look at the cncf landscape

00:03:50,959 --> 00:03:53,680
there's you know

00:03:51,599 --> 00:03:55,519
thousands of cards out there that these

00:03:53,680 --> 00:03:57,439
particular projects are coming up

00:03:55,519 --> 00:03:59,120
that will help power the next generation

00:03:57,439 --> 00:04:00,239
of cloud data applications or if you're

00:03:59,120 --> 00:04:01,680
not using cloud native

00:04:00,239 --> 00:04:03,360
that's some sort of application

00:04:01,680 --> 00:04:04,799
infrastructure that will help you power

00:04:03,360 --> 00:04:06,400
this delicious donut

00:04:04,799 --> 00:04:08,480
and so let's talk about what it actually

00:04:06,400 --> 00:04:10,000
looks like when we call it a cicd

00:04:08,480 --> 00:04:11,519
pipeline or a continuous delivery

00:04:10,000 --> 00:04:14,000
pipeline

00:04:11,519 --> 00:04:14,799
so i call this all in the pipeline right

00:04:14,000 --> 00:04:16,799
and so

00:04:14,799 --> 00:04:18,160
basically there's multiple steps in just

00:04:16,799 --> 00:04:21,040
dropping a binary

00:04:18,160 --> 00:04:22,320
into production now some of the newer

00:04:21,040 --> 00:04:24,000
mindsets out there is

00:04:22,320 --> 00:04:25,759
you know what maybe when we have one

00:04:24,000 --> 00:04:26,960
particular manifest or one particular

00:04:25,759 --> 00:04:29,280
resource you have to drop

00:04:26,960 --> 00:04:30,720
but that's it there's a lot of rigor

00:04:29,280 --> 00:04:32,320
that goes into making sure

00:04:30,720 --> 00:04:34,720
our changes are same and making sure

00:04:32,320 --> 00:04:36,240
that our changes are safe and usually

00:04:34,720 --> 00:04:37,840
there's this two right end of the radio

00:04:36,240 --> 00:04:39,919
dial on the left with these earlier

00:04:37,840 --> 00:04:41,600
stages you need to enable innovation

00:04:39,919 --> 00:04:42,960
right so there'll be a lot of iteration

00:04:41,600 --> 00:04:44,960
going on uh

00:04:42,960 --> 00:04:46,880
if you watch how i write software it's

00:04:44,960 --> 00:04:48,400
actually kind of dirty i try and try and

00:04:46,880 --> 00:04:49,680
try and try and try to like get

00:04:48,400 --> 00:04:51,680
you know get it right and that's

00:04:49,680 --> 00:04:53,600
probably you know n number of times

00:04:51,680 --> 00:04:55,120
or too many uh to get something right

00:04:53,600 --> 00:04:56,639
but also you don't want to be keep

00:04:55,120 --> 00:04:58,160
trying as you get the production your

00:04:56,639 --> 00:05:00,639
confidence needs to increase

00:04:58,160 --> 00:05:02,160
uh in each sequential step uh but hey

00:05:00,639 --> 00:05:03,680
we're building more confidence so by the

00:05:02,160 --> 00:05:06,400
time you get to production

00:05:03,680 --> 00:05:07,759
there's not a particular your change

00:05:06,400 --> 00:05:09,600
failure rate's low

00:05:07,759 --> 00:05:10,800
so going back from left to right hey you

00:05:09,600 --> 00:05:12,479
know what in dev uh

00:05:10,800 --> 00:05:14,560
orchestrating such things as a code

00:05:12,479 --> 00:05:15,759
analysis uh maybe

00:05:14,560 --> 00:05:17,360
what i've written i want to make sure

00:05:15,759 --> 00:05:18,320
that those functions are right some new

00:05:17,360 --> 00:05:19,840
unit tests

00:05:18,320 --> 00:05:21,199
and then maybe i'll pretend throughout

00:05:19,840 --> 00:05:23,440
the example that rohan and i are the

00:05:21,199 --> 00:05:25,120
same team which we are

00:05:23,440 --> 00:05:26,720
what i wrote it works with what rohan

00:05:25,120 --> 00:05:29,039
wrote survives first usually it's

00:05:26,720 --> 00:05:29,919
i'm the troublemaker too kind of getting

00:05:29,039 --> 00:05:31,520
into now

00:05:29,919 --> 00:05:33,440
we're infrastructure aware in that

00:05:31,520 --> 00:05:34,080
middle stage right so we've deployed it

00:05:33,440 --> 00:05:35,840
somewhere

00:05:34,080 --> 00:05:37,680
we want to make sure that we didn't do

00:05:35,840 --> 00:05:39,840
any detriment to the infrastructure

00:05:37,680 --> 00:05:40,960
we're running smoke and soap tests

00:05:39,840 --> 00:05:42,720
performance tests

00:05:40,960 --> 00:05:44,240
and then as you get to production uh

00:05:42,720 --> 00:05:46,080
we're actually

00:05:44,240 --> 00:05:47,919
leveraging safe approaches such as a

00:05:46,080 --> 00:05:48,639
canary release and i'll explain why i

00:05:47,919 --> 00:05:52,240
can never release

00:05:48,639 --> 00:05:53,680
this really quickly but uh really

00:05:52,240 --> 00:05:55,440
according to this delivery is making

00:05:53,680 --> 00:05:57,680
sure that safety is there

00:05:55,440 --> 00:05:58,720
right so is that one and done a lot of

00:05:57,680 --> 00:06:00,000
times

00:05:58,720 --> 00:06:02,400
we're not deploying something for the

00:06:00,000 --> 00:06:03,120
first time uh the reason why this is so

00:06:02,400 --> 00:06:04,639
important is

00:06:03,120 --> 00:06:07,199
if it's like version one and we're

00:06:04,639 --> 00:06:09,039
rolling out version one like who cares

00:06:07,199 --> 00:06:10,720
but if it's like anything else you have

00:06:09,039 --> 00:06:12,000
to make a change uh

00:06:10,720 --> 00:06:14,479
making sure that your users aren't

00:06:12,000 --> 00:06:17,280
impacted that becomes a big business

00:06:14,479 --> 00:06:18,560
so really quickly about a canary

00:06:17,280 --> 00:06:20,639
deployment uh

00:06:18,560 --> 00:06:22,479
so basically going through the journey

00:06:20,639 --> 00:06:23,840
of what a canary is if you're unfamiliar

00:06:22,479 --> 00:06:25,680
with the canary deployment

00:06:23,840 --> 00:06:27,520
it's an incremental release and so here

00:06:25,680 --> 00:06:30,479
the user is represented by a taco

00:06:27,520 --> 00:06:32,800
love food and basically so let's say you

00:06:30,479 --> 00:06:34,479
are the user or this delicious taco

00:06:32,800 --> 00:06:36,960
through the magic of load balancing

00:06:34,479 --> 00:06:39,039
we're running incremental releases so

00:06:36,960 --> 00:06:41,039
in the application versions here they

00:06:39,039 --> 00:06:43,440
can let's say chunky otter is version

00:06:41,039 --> 00:06:45,759
1.0 and the canary's version of 1.1

00:06:43,440 --> 00:06:46,880
up with the first incremental release

00:06:45,759 --> 00:06:48,560
basically

00:06:46,880 --> 00:06:50,160
you're making sure that the canary

00:06:48,560 --> 00:06:52,319
survives right so like

00:06:50,160 --> 00:06:53,520
in this particular version uh we have we

00:06:52,319 --> 00:06:55,599
deployed 33

00:06:53,520 --> 00:06:57,440
of the canary and then still stable as

00:06:55,599 --> 00:06:59,199
two chunky otters

00:06:57,440 --> 00:07:01,199
in the sequential pass when we determine

00:06:59,199 --> 00:07:03,280
everything is correct uh we promote the

00:07:01,199 --> 00:07:06,000
canary to 100 percent of the traffic

00:07:03,280 --> 00:07:07,520
and chunky orders no more but this is an

00:07:06,000 --> 00:07:08,720
oversimplified example lots of times

00:07:07,520 --> 00:07:11,199
kendare's have

00:07:08,720 --> 00:07:12,000
multiple phases and there's very bespoke

00:07:11,199 --> 00:07:15,199
rules and how to

00:07:12,000 --> 00:07:16,479
deploy them lastly before we get into

00:07:15,199 --> 00:07:18,639
what a policy is

00:07:16,479 --> 00:07:20,080
oh i i like to always bring up the

00:07:18,639 --> 00:07:22,639
confidence trifecta

00:07:20,080 --> 00:07:23,759
right and this is a rationale for why do

00:07:22,639 --> 00:07:26,479
you have a policy

00:07:23,759 --> 00:07:28,240
why do you even enforce anything and so

00:07:26,479 --> 00:07:30,800
in the devops moniker you always hear

00:07:28,240 --> 00:07:31,280
people process technology right so these

00:07:30,800 --> 00:07:33,280
three

00:07:31,280 --> 00:07:34,400
war chants but let's talk about let's

00:07:33,280 --> 00:07:38,000
break this down where

00:07:34,400 --> 00:07:39,919
are actually you building is confident

00:07:38,000 --> 00:07:42,479
well let's start with technology it's

00:07:39,919 --> 00:07:45,440
actually fairly you know i would say

00:07:42,479 --> 00:07:47,120
not it's fairly objective not subjective

00:07:45,440 --> 00:07:49,520
to be confident technology

00:07:47,120 --> 00:07:51,440
for example i have a kubernetes cluster

00:07:49,520 --> 00:07:51,840
and there's a reason i have five worker

00:07:51,440 --> 00:07:53,759
nodes

00:07:51,840 --> 00:07:55,680
on that kubernetes cluster because i can

00:07:53,759 --> 00:07:57,919
take two concurrent failures

00:07:55,680 --> 00:07:59,360
of a particular application right so i'm

00:07:57,919 --> 00:08:00,479
fairly confident in my distributed

00:07:59,360 --> 00:08:03,599
system design

00:08:00,479 --> 00:08:05,680
that i have a robust and resilient

00:08:03,599 --> 00:08:06,639
piece of infrastructure check that that

00:08:05,680 --> 00:08:08,560
is that is uh

00:08:06,639 --> 00:08:10,080
objective where it gets a little bit

00:08:08,560 --> 00:08:12,560
more subjective

00:08:10,080 --> 00:08:14,639
and extremely subjective is it's worse

00:08:12,560 --> 00:08:17,680
the process could be subjective

00:08:14,639 --> 00:08:19,440
right so certain industries have more

00:08:17,680 --> 00:08:19,919
stringent change management processes

00:08:19,440 --> 00:08:22,319
because

00:08:19,919 --> 00:08:23,599
you know why the people we're as people

00:08:22,319 --> 00:08:25,680
were emotional

00:08:23,599 --> 00:08:28,080
and were extremely subjective right so

00:08:25,680 --> 00:08:30,560
where do you have the most confidence

00:08:28,080 --> 00:08:31,120
uh we're gonna by using something like

00:08:30,560 --> 00:08:33,039
opa

00:08:31,120 --> 00:08:35,279
we're able to blend all three so you're

00:08:33,039 --> 00:08:36,000
able to have a process that is confident

00:08:35,279 --> 00:08:37,760
you're

00:08:36,000 --> 00:08:38,880
technically confident in the process and

00:08:37,760 --> 00:08:40,719
also because of the people who are

00:08:38,880 --> 00:08:41,519
authoring it uh you self-enforce the

00:08:40,719 --> 00:08:43,360
policy which

00:08:41,519 --> 00:08:45,279
we'll talk about a little bit but that

00:08:43,360 --> 00:08:49,519
brings us to the next word

00:08:45,279 --> 00:08:51,279
a policy so what is exactly a policy

00:08:49,519 --> 00:08:53,680
i have a geico insurance policy on my

00:08:51,279 --> 00:08:54,880
car but these policies are just a little

00:08:53,680 --> 00:08:57,519
bit different so

00:08:54,880 --> 00:08:59,279
a textbook definition of a policy it's a

00:08:57,519 --> 00:08:59,839
deliberate systems and principles and

00:08:59,279 --> 00:09:02,959
goals

00:08:59,839 --> 00:09:04,240
to force a rational outcome right so a

00:09:02,959 --> 00:09:06,880
policy might be you know

00:09:04,240 --> 00:09:08,480
you have to be 21 to drink because you

00:09:06,880 --> 00:09:09,680
know you might make bad decisions if

00:09:08,480 --> 00:09:12,560
you're not 21.

00:09:09,680 --> 00:09:14,320
or uh in computer systems you know what

00:09:12,560 --> 00:09:17,760
your password must be

00:09:14,320 --> 00:09:19,360
25 characters my funny story my sister

00:09:17,760 --> 00:09:20,800
started a new job and her password had

00:09:19,360 --> 00:09:23,120
to be 25 characters

00:09:20,800 --> 00:09:25,760
and i was cracking up i'm like i can't

00:09:23,120 --> 00:09:28,080
even think of a 25 character password

00:09:25,760 --> 00:09:29,519
but that is a i.t security policy that

00:09:28,080 --> 00:09:31,360
she has to abide by

00:09:29,519 --> 00:09:32,800
so like really defining the goals and

00:09:31,360 --> 00:09:35,279
elements of

00:09:32,800 --> 00:09:36,240
your organization's computer systems or

00:09:35,279 --> 00:09:38,399
just uh

00:09:36,240 --> 00:09:41,040
the principles which i roll is a policy

00:09:38,399 --> 00:09:43,360
so that is what a policy is

00:09:41,040 --> 00:09:45,279
let's talk about another conundrum that

00:09:43,360 --> 00:09:46,560
a lot of us are going through right if

00:09:45,279 --> 00:09:47,839
you haven't gone through it yet

00:09:46,560 --> 00:09:49,600
you'll go through it soon enough so here

00:09:47,839 --> 00:09:51,519
i have my friend rohan again that's

00:09:49,600 --> 00:09:54,560
represented by rick

00:09:51,519 --> 00:09:56,399
but rohan is a new uh site reliability

00:09:54,560 --> 00:09:57,680
engineer on the team or he's a new sre

00:09:56,399 --> 00:09:58,800
in our product team

00:09:57,680 --> 00:10:01,279
now let's take a look at our product

00:09:58,800 --> 00:10:02,640
stack this is a pretty forward-thinking

00:10:01,279 --> 00:10:04,320
product sect so we're delivering

00:10:02,640 --> 00:10:06,079
kubernetes for the app stack

00:10:04,320 --> 00:10:08,320
uh server leveraging kafka we're

00:10:06,079 --> 00:10:09,760
literally us several spring projects and

00:10:08,320 --> 00:10:12,000
we're using cockroachdb

00:10:09,760 --> 00:10:12,800
as our persistent stack and then kind of

00:10:12,000 --> 00:10:16,720
looking at

00:10:12,800 --> 00:10:18,079
the non-application stack so for our

00:10:16,720 --> 00:10:20,480
observability and monitoring and

00:10:18,079 --> 00:10:22,959
visualization uh we're using prometheus

00:10:20,480 --> 00:10:24,079
we're using fluency as aggregator and

00:10:22,959 --> 00:10:24,880
then we're displaying everything in

00:10:24,079 --> 00:10:26,640
grafana

00:10:24,880 --> 00:10:28,320
cool right like this is a modern

00:10:26,640 --> 00:10:29,680
application stack since it's a very

00:10:28,320 --> 00:10:32,079
forward thinking stack

00:10:29,680 --> 00:10:33,040
at leveraging several projects from the

00:10:32,079 --> 00:10:35,680
linux foundation

00:10:33,040 --> 00:10:37,440
uh in our stack but we have a little bit

00:10:35,680 --> 00:10:40,399
of a conundrum here

00:10:37,440 --> 00:10:41,279
uh this is what i like to call oh see

00:10:40,399 --> 00:10:44,959
this is like they call

00:10:41,279 --> 00:10:47,519
the uh conundrum so

00:10:44,959 --> 00:10:48,240
let's say that we have a problem right

00:10:47,519 --> 00:10:51,920
and so

00:10:48,240 --> 00:10:55,120
rohan actually needs more access

00:10:51,920 --> 00:10:56,880
than what he actually has and so rohan

00:10:55,120 --> 00:10:57,760
being a new site reliable engineer like

00:10:56,880 --> 00:11:00,800
let's say

00:10:57,760 --> 00:11:01,760
uh god forbid we have some sort of issue

00:11:00,800 --> 00:11:04,240
or outage

00:11:01,760 --> 00:11:05,839
an incident uh using a more correct term

00:11:04,240 --> 00:11:08,880
uh and rohan suits in the team

00:11:05,839 --> 00:11:10,800
uh rohan needs more access so

00:11:08,880 --> 00:11:12,240
in the grand scheme of things there's a

00:11:10,800 --> 00:11:14,880
two-part combination there's

00:11:12,240 --> 00:11:16,480
authorization on an authentication

00:11:14,880 --> 00:11:18,560
authorization would be

00:11:16,480 --> 00:11:20,000
does this uh does this person is this

00:11:18,560 --> 00:11:21,600
person rohan

00:11:20,000 --> 00:11:23,360
right answer yes you know we have

00:11:21,600 --> 00:11:24,800
credentialing like rohan has a

00:11:23,360 --> 00:11:26,480
harness email address and you know we

00:11:24,800 --> 00:11:30,320
have octa and all that good stuff so

00:11:26,480 --> 00:11:32,800
it's like yes he he is who he says he is

00:11:30,320 --> 00:11:33,360
simple that's solved but what is not

00:11:32,800 --> 00:11:35,839
solved

00:11:33,360 --> 00:11:37,920
in this distributed system problem is

00:11:35,839 --> 00:11:41,279
can rohan have elevated access

00:11:37,920 --> 00:11:43,519
that he needs to get data or to get

00:11:41,279 --> 00:11:46,000
information for us to have a root cause

00:11:43,519 --> 00:11:48,240
analysis on these systems and answers no

00:11:46,000 --> 00:11:49,920
and if we have to go and make a change

00:11:48,240 --> 00:11:52,880
for rohan to get more data

00:11:49,920 --> 00:11:54,000
or to get higher let's say um author or

00:11:52,880 --> 00:11:56,399
higher

00:11:54,000 --> 00:11:58,240
uh authorization uh it's basically i'm

00:11:56,399 --> 00:11:59,600
redeploying the kafka i'm redeploying to

00:11:58,240 --> 00:12:01,279
the spring stack i'm redeploying the

00:11:59,600 --> 00:12:03,040
cockroach i've redeployed to all of our

00:12:01,279 --> 00:12:06,720
monitoring observability stack

00:12:03,040 --> 00:12:09,279
and so as you can see a simple request

00:12:06,720 --> 00:12:10,720
for you know we know who rohan is but he

00:12:09,279 --> 00:12:12,079
needs elevator privileges

00:12:10,720 --> 00:12:13,839
is a problem and there's lots of

00:12:12,079 --> 00:12:15,680
deployments that we have to do and so

00:12:13,839 --> 00:12:18,800
this is the exact problem

00:12:15,680 --> 00:12:21,920
that opa steps into right so enter opa

00:12:18,800 --> 00:12:22,959
so regardless if it's harkogeu regards

00:12:21,920 --> 00:12:24,560
if it's you know our

00:12:22,959 --> 00:12:26,000
prometheus stack regardless if it's the

00:12:24,560 --> 00:12:27,120
application stack or even you know the

00:12:26,000 --> 00:12:28,959
database stack

00:12:27,120 --> 00:12:30,480
uh rohan's still here right so he's

00:12:28,959 --> 00:12:32,240
still you know he's he didn't go

00:12:30,480 --> 00:12:35,360
anywhere

00:12:32,240 --> 00:12:36,720
um but that's basically it opa acts as a

00:12:35,360 --> 00:12:40,079
policy agent and so

00:12:36,720 --> 00:12:41,600
it focuses on the authorization piece

00:12:40,079 --> 00:12:43,200
right like what are you authorized to

00:12:41,600 --> 00:12:45,360
see it could be entitlements

00:12:43,200 --> 00:12:46,240
it could be the privileged data but

00:12:45,360 --> 00:12:49,040
basically

00:12:46,240 --> 00:12:50,639
op opa sits between or actually it's

00:12:49,040 --> 00:12:50,880
above depending how you want to look at

00:12:50,639 --> 00:12:52,959
it

00:12:50,880 --> 00:12:54,639
at these particular services because in

00:12:52,959 --> 00:12:57,040
a modern market service

00:12:54,639 --> 00:12:58,399
architecture uh you know as brilliant as

00:12:57,040 --> 00:12:59,519
microservices are you're having more

00:12:58,399 --> 00:13:00,320
endpoints so you're having more

00:12:59,519 --> 00:13:03,440
deployments

00:13:00,320 --> 00:13:05,519
but kind of that connective tissue uh is

00:13:03,440 --> 00:13:07,760
actually communication right so

00:13:05,519 --> 00:13:10,240
the the four main benefits of for big

00:13:07,760 --> 00:13:12,720
benefits that opa has is that

00:13:10,240 --> 00:13:13,920
it simplifies authorization across your

00:13:12,720 --> 00:13:16,240
market services so

00:13:13,920 --> 00:13:17,680
no matter what service you have we could

00:13:16,240 --> 00:13:18,720
have doubled the number of services that

00:13:17,680 --> 00:13:20,959
we had or tripled

00:13:18,720 --> 00:13:22,959
um it's a piece of cake for opa because

00:13:20,959 --> 00:13:24,240
it's the central cop between those

00:13:22,959 --> 00:13:27,200
authorization calls

00:13:24,240 --> 00:13:27,920
it uses common remote protocols so http

00:13:27,200 --> 00:13:31,200
uh

00:13:27,920 --> 00:13:32,800
https also if you're using ssh or grpc

00:13:31,200 --> 00:13:34,639
the opa understands the particular

00:13:32,800 --> 00:13:36,560
protocols opa

00:13:34,639 --> 00:13:37,680
basically will make a decision on that

00:13:36,560 --> 00:13:39,920
and

00:13:37,680 --> 00:13:41,199
clearly between all of the services

00:13:39,920 --> 00:13:43,360
there's some sort of payload

00:13:41,199 --> 00:13:44,880
right like you know it's not uh you know

00:13:43,360 --> 00:13:47,360
mystery binary

00:13:44,880 --> 00:13:49,680
getting scared across or cobra actually

00:13:47,360 --> 00:13:52,240
that got removed from the java spec

00:13:49,680 --> 00:13:52,880
recently but um it's not a mystery right

00:13:52,240 --> 00:13:54,720
like it's it's

00:13:52,880 --> 00:13:57,279
the payload you can make a decision on

00:13:54,720 --> 00:13:59,279
and opa has this particular

00:13:57,279 --> 00:14:00,880
particular language called rigo it's a

00:13:59,279 --> 00:14:02,240
declarative policy language so you can

00:14:00,880 --> 00:14:03,199
say hey based on these conditions on

00:14:02,240 --> 00:14:05,680
this payload

00:14:03,199 --> 00:14:07,440
what is the action you want to do the

00:14:05,680 --> 00:14:09,120
last big benefit before i hand it over

00:14:07,440 --> 00:14:10,959
to my bud rohan is that

00:14:09,120 --> 00:14:12,560
this is chicken of the egg question

00:14:10,959 --> 00:14:14,240
right like it actually solves a very

00:14:12,560 --> 00:14:16,240
intrinsic question

00:14:14,240 --> 00:14:17,519
and usually the answer would be no to

00:14:16,240 --> 00:14:20,240
this uh

00:14:17,519 --> 00:14:21,920
t take opi out of the picture how often

00:14:20,240 --> 00:14:23,600
as an engineer do about access to

00:14:21,920 --> 00:14:24,720
production

00:14:23,600 --> 00:14:26,240
probably not you're as a software

00:14:24,720 --> 00:14:27,440
engineer right unless you're like a

00:14:26,240 --> 00:14:29,360
let's say assistant vision or

00:14:27,440 --> 00:14:31,199
infrastructure engineer a cloud engineer

00:14:29,360 --> 00:14:32,639
you rarely have access to product

00:14:31,199 --> 00:14:34,000
there's business controls to separate

00:14:32,639 --> 00:14:35,600
you away from production

00:14:34,000 --> 00:14:37,440
because technically if you write it you

00:14:35,600 --> 00:14:38,240
can't enforce it right if i if i wrote

00:14:37,440 --> 00:14:39,760
something

00:14:38,240 --> 00:14:41,600
they'll never let me see the production

00:14:39,760 --> 00:14:42,560
because you know i know all the ins and

00:14:41,600 --> 00:14:45,120
outs and

00:14:42,560 --> 00:14:47,279
can i be trusted to enforce something

00:14:45,120 --> 00:14:48,959
but op actually does this right opa

00:14:47,279 --> 00:14:50,160
actually allows the authors of the

00:14:48,959 --> 00:14:53,279
system

00:14:50,160 --> 00:14:55,360
to enforce the system and so with that

00:14:53,279 --> 00:14:57,199
let me turn it over to my friend rohan

00:14:55,360 --> 00:14:59,279
to talk about

00:14:57,199 --> 00:15:00,800
how do you actually how can we start

00:14:59,279 --> 00:15:04,399
leveraging opa and enforcing

00:15:00,800 --> 00:15:07,600
certain rules in uh contains delivery

00:15:04,399 --> 00:15:08,079
thanks ravi so one thing that we've been

00:15:07,600 --> 00:15:11,519
seeing

00:15:08,079 --> 00:15:12,000
you know with opa and in this continuous

00:15:11,519 --> 00:15:15,279
delivery

00:15:12,000 --> 00:15:17,519
kind of spaces how do i centralize

00:15:15,279 --> 00:15:19,120
you know my pipeline deployments in the

00:15:17,519 --> 00:15:22,079
sense

00:15:19,120 --> 00:15:23,839
everyone has the ability to kind of

00:15:22,079 --> 00:15:26,079
configure pipelines and leverage

00:15:23,839 --> 00:15:29,600
pipelines but how do i know

00:15:26,079 --> 00:15:31,600
you know who is using what who is doing

00:15:29,600 --> 00:15:33,839
what role in this process

00:15:31,600 --> 00:15:36,160
because enforcing a standard pipeline

00:15:33,839 --> 00:15:36,800
across entire organizations or teams

00:15:36,160 --> 00:15:39,440
it's hard

00:15:36,800 --> 00:15:40,560
but like you know i might have access to

00:15:39,440 --> 00:15:43,120
dev environment

00:15:40,560 --> 00:15:43,920
my manager might have access to the prod

00:15:43,120 --> 00:15:46,240
environment

00:15:43,920 --> 00:15:47,360
we might not just because we know each

00:15:46,240 --> 00:15:48,800
other really well

00:15:47,360 --> 00:15:50,959
or you know we have a good working

00:15:48,800 --> 00:15:53,040
relationship maybe we you know hand off

00:15:50,959 --> 00:15:54,000
you know we ease up on the restrictions

00:15:53,040 --> 00:15:55,839
a little bit

00:15:54,000 --> 00:15:57,120
how do we make sure that you know the

00:15:55,839 --> 00:15:59,279
business policies

00:15:57,120 --> 00:16:01,279
that you know our secops teams or our

00:15:59,279 --> 00:16:03,759
operation teams are providing

00:16:01,279 --> 00:16:05,519
um they they are enforced they they they

00:16:03,759 --> 00:16:06,480
have some sort of structure in place

00:16:05,519 --> 00:16:08,320
where

00:16:06,480 --> 00:16:09,680
we have that kind of separation of

00:16:08,320 --> 00:16:12,240
duties we have

00:16:09,680 --> 00:16:13,120
that idea of a standard pipeline kind of

00:16:12,240 --> 00:16:16,079
design

00:16:13,120 --> 00:16:17,600
we have the ability to balance between

00:16:16,079 --> 00:16:20,399
this rigid structure

00:16:17,600 --> 00:16:21,920
and i i still care about my developers

00:16:20,399 --> 00:16:23,600
freedom i want them to be able to you

00:16:21,920 --> 00:16:25,839
know build pipelines design

00:16:23,600 --> 00:16:27,839
pipelines and also deploy frequently

00:16:25,839 --> 00:16:29,600
because we also have the job of

00:16:27,839 --> 00:16:31,839
you know delivering features at a high

00:16:29,600 --> 00:16:33,680
velocity for our business

00:16:31,839 --> 00:16:36,160
so these are kind of the problems that

00:16:33,680 --> 00:16:37,440
we we see in continuous delivery but we

00:16:36,160 --> 00:16:41,199
also see opa

00:16:37,440 --> 00:16:42,959
as a really uh as a supplement to this

00:16:41,199 --> 00:16:44,560
process where we can start putting some

00:16:42,959 --> 00:16:51,519
structure in place

00:16:44,560 --> 00:16:54,560
and enforce it uh in the lower levels

00:16:51,519 --> 00:16:55,279
and it's stronger together and we've

00:16:54,560 --> 00:16:59,360
seen that

00:16:55,279 --> 00:17:02,160
because you see as opa it's it's nice uh

00:16:59,360 --> 00:17:04,559
as a drego essentially so you have the

00:17:02,160 --> 00:17:06,799
ability to kind of define this as code

00:17:04,559 --> 00:17:08,480
you don't have to be the best programmer

00:17:06,799 --> 00:17:11,199
to figure this out it's

00:17:08,480 --> 00:17:11,760
pretty pretty high level you don't need

00:17:11,199 --> 00:17:15,039
to know

00:17:11,760 --> 00:17:17,120
java or python it's it's very much just

00:17:15,039 --> 00:17:18,720
looking through the json and kind of

00:17:17,120 --> 00:17:20,880
picking out which fields you want to

00:17:18,720 --> 00:17:21,120
enforce because the whole communication

00:17:20,880 --> 00:17:24,400
in

00:17:21,120 --> 00:17:27,120
opa is by json so it actually

00:17:24,400 --> 00:17:28,160
is really helpful for you know secops

00:17:27,120 --> 00:17:31,280
and compliance

00:17:28,160 --> 00:17:32,000
uh based people because they they not

00:17:31,280 --> 00:17:34,160
might not need to

00:17:32,000 --> 00:17:36,480
know how to write you know java code or

00:17:34,160 --> 00:17:38,640
python code to build a system to kind of

00:17:36,480 --> 00:17:39,760
enforce their business policies on like

00:17:38,640 --> 00:17:43,520
a pipeline

00:17:39,760 --> 00:17:44,400
it it's very it's user friendly it reads

00:17:43,520 --> 00:17:46,640
nicely

00:17:44,400 --> 00:17:47,840
and you can kind of figure out based off

00:17:46,640 --> 00:17:49,840
reading it how

00:17:47,840 --> 00:17:52,160
what the rule is what's it gonna enforce

00:17:49,840 --> 00:17:54,720
so you as a compliance or secops

00:17:52,160 --> 00:17:55,840
uh persona would definitely be able to

00:17:54,720 --> 00:17:58,320
write these rules

00:17:55,840 --> 00:18:00,559
and then you can rely on your you know

00:17:58,320 --> 00:18:02,400
devops team to kind of deploy and

00:18:00,559 --> 00:18:05,760
enforce these roles

00:18:02,400 --> 00:18:07,760
and that in itself enables teams to kind

00:18:05,760 --> 00:18:09,919
of deploy in a consistent manner that's

00:18:07,760 --> 00:18:15,039
not only compliant with their business

00:18:09,919 --> 00:18:17,520
but it also enables them to

00:18:15,039 --> 00:18:18,640
have a repeatable successful kind of

00:18:17,520 --> 00:18:21,600
process

00:18:18,640 --> 00:18:23,440
and as you see here it's opa is you know

00:18:21,600 --> 00:18:25,679
designed for kubernetes it was

00:18:23,440 --> 00:18:27,200
you know it's really good at managing

00:18:25,679 --> 00:18:29,679
the config management it's

00:18:27,200 --> 00:18:31,760
it's it keeps you know me from

00:18:29,679 --> 00:18:35,440
specifying resources that are

00:18:31,760 --> 00:18:36,880
way too big and i'm not blowing up my

00:18:35,440 --> 00:18:38,640
cluster every week or

00:18:36,880 --> 00:18:40,400
i have a bunch of teams deploying into

00:18:38,640 --> 00:18:42,240
the same name space and

00:18:40,400 --> 00:18:43,679
uh it's starting to make things make a

00:18:42,240 --> 00:18:45,520
mess in that name space so i have to

00:18:43,679 --> 00:18:47,440
clean it up later we can really kind of

00:18:45,520 --> 00:18:49,120
have structure and enforcement around

00:18:47,440 --> 00:18:50,320
how we deploy our resources and

00:18:49,120 --> 00:18:53,679
kubernetes

00:18:50,320 --> 00:18:56,000
without having such a deep technical

00:18:53,679 --> 00:18:56,880
understanding of kubernetes and the

00:18:56,000 --> 00:18:58,720
underlying

00:18:56,880 --> 00:19:00,160
you know behavior of how pods are

00:18:58,720 --> 00:19:02,080
getting scheduled and

00:19:00,160 --> 00:19:03,919
who's taking up what resources we can

00:19:02,080 --> 00:19:05,440
put guard rails in place so we don't

00:19:03,919 --> 00:19:08,640
have to deal with those kind of

00:19:05,440 --> 00:19:10,000
lower level problems and we see a lot of

00:19:08,640 --> 00:19:13,440
benefits from it we we've

00:19:10,000 --> 00:19:15,919
seen users really love this kind of

00:19:13,440 --> 00:19:16,799
granular structure because i don't have

00:19:15,919 --> 00:19:19,200
to configure

00:19:16,799 --> 00:19:20,559
the r back and all these different

00:19:19,200 --> 00:19:21,919
systems i have to configure it at the

00:19:20,559 --> 00:19:23,520
kubernetes level i have to configure it

00:19:21,919 --> 00:19:24,000
at the git level i have to configure it

00:19:23,520 --> 00:19:26,799
at

00:19:24,000 --> 00:19:28,640
you know the the grafana level i have to

00:19:26,799 --> 00:19:31,360
configure it at the appd level

00:19:28,640 --> 00:19:32,480
those kind of tools that's that's just

00:19:31,360 --> 00:19:35,120
part of the equation

00:19:32,480 --> 00:19:36,799
i could have one system to define it and

00:19:35,120 --> 00:19:38,320
i can have one system to be the

00:19:36,799 --> 00:19:40,320
interface for it that's

00:19:38,320 --> 00:19:42,799
that's the the benefit of you know

00:19:40,320 --> 00:19:46,000
adopting more of like a policy driven

00:19:42,799 --> 00:19:49,200
uh enforcement kind of approach with

00:19:46,000 --> 00:19:49,200
your software systems

00:19:50,320 --> 00:19:53,840
and so some of the problem spaces we can

00:19:53,120 --> 00:19:57,120
as you saw

00:19:53,840 --> 00:19:57,440
in ravi's earlier slide around deploying

00:19:57,120 --> 00:19:59,039
to

00:19:57,440 --> 00:20:00,880
your dev environment deploying to your

00:19:59,039 --> 00:20:02,000
qa environment you saw that there was

00:20:00,880 --> 00:20:05,280
like smoke tests

00:20:02,000 --> 00:20:08,400
regression tests um there was

00:20:05,280 --> 00:20:11,280
like scans those kind of pieces are

00:20:08,400 --> 00:20:12,000
very very uh crucial in your deployment

00:20:11,280 --> 00:20:15,120
pipeline

00:20:12,000 --> 00:20:15,440
so there's two parts to this one is you

00:20:15,120 --> 00:20:18,559
know

00:20:15,440 --> 00:20:20,159
oppa i i feel if you're familiar with it

00:20:18,559 --> 00:20:21,840
a lot of people talk about the rbac

00:20:20,159 --> 00:20:23,280
capabilities and it's a very very

00:20:21,840 --> 00:20:26,000
powerful tool for that but

00:20:23,280 --> 00:20:26,480
i think other pieces of this that oppa

00:20:26,000 --> 00:20:28,640
can

00:20:26,480 --> 00:20:30,080
be applicable for is like quality

00:20:28,640 --> 00:20:32,640
decision and evidence

00:20:30,080 --> 00:20:33,760
the reason why is because when you're

00:20:32,640 --> 00:20:36,400
doing a deployment

00:20:33,760 --> 00:20:38,000
you are running your tests you're

00:20:36,400 --> 00:20:39,600
running some scans or making sure the

00:20:38,000 --> 00:20:40,720
image doesn't have anything that's

00:20:39,600 --> 00:20:42,559
vulnerable

00:20:40,720 --> 00:20:44,559
but as you it progresses through the

00:20:42,559 --> 00:20:46,480
deployment you lose sight of those

00:20:44,559 --> 00:20:48,400
pieces of information because

00:20:46,480 --> 00:20:50,159
you just you're just seeing it the

00:20:48,400 --> 00:20:52,720
results and you're just continuing to

00:20:50,159 --> 00:20:55,440
let the build go through the process

00:20:52,720 --> 00:20:56,799
what we want to what we see is people

00:20:55,440 --> 00:20:59,520
want evidence that

00:20:56,799 --> 00:21:00,799
before i say hey this app is going to

00:20:59,520 --> 00:21:03,280
production

00:21:00,799 --> 00:21:04,000
i want to see that you've actually hit

00:21:03,280 --> 00:21:06,000
00:21:04,000 --> 00:21:07,760
you know percent on your unit test i

00:21:06,000 --> 00:21:09,919
want to make sure that sonar cube gives

00:21:07,760 --> 00:21:12,640
you a great grade i want to see

00:21:09,919 --> 00:21:13,840
that you know your nexus iq you did a

00:21:12,640 --> 00:21:16,320
nexus iq scan

00:21:13,840 --> 00:21:17,919
i also want to see that you know when

00:21:16,320 --> 00:21:20,080
you deployed that canary

00:21:17,919 --> 00:21:22,000
it ran for like 50 minutes and i got

00:21:20,080 --> 00:21:24,919
metrics from it for map dynamics i want

00:21:22,000 --> 00:21:28,240
to see all that evidence before i can

00:21:24,919 --> 00:21:29,679
concretely say go to go to production

00:21:28,240 --> 00:21:32,720
with my deployment

00:21:29,679 --> 00:21:35,520
so we've seen it oppa as like that

00:21:32,720 --> 00:21:36,240
rule engine where i can collect all that

00:21:35,520 --> 00:21:39,520
data

00:21:36,240 --> 00:21:41,760
and and format it in a json format

00:21:39,520 --> 00:21:43,760
and send it over to my rule engine to

00:21:41,760 --> 00:21:46,640
dictate did you meet the score

00:21:43,760 --> 00:21:48,159
is this good enough and that takes the

00:21:46,640 --> 00:21:49,840
human element out of it

00:21:48,159 --> 00:21:51,679
so i don't have to chase down these

00:21:49,840 --> 00:21:54,640
things i have a system pulling it in

00:21:51,679 --> 00:21:56,640
and then i have a governing system which

00:21:54,640 --> 00:21:57,760
essentially iterates over it and says

00:21:56,640 --> 00:22:00,799
hey

00:21:57,760 --> 00:22:01,440
you failed or you passed there's no gray

00:22:00,799 --> 00:22:04,159
area

00:22:01,440 --> 00:22:05,760
you can't so you can't say uh i think

00:22:04,159 --> 00:22:07,280
this is okay

00:22:05,760 --> 00:22:08,799
eighty-nine percent versus ninety

00:22:07,280 --> 00:22:12,159
percent that's okay

00:22:08,799 --> 00:22:13,919
no we we we it's zero one we

00:22:12,159 --> 00:22:16,000
we're either in or out that's just

00:22:13,919 --> 00:22:17,840
people right rohan

00:22:16,000 --> 00:22:19,039
subjective part of that's the difference

00:22:17,840 --> 00:22:22,240
yeah yeah

00:22:19,039 --> 00:22:24,480
so we yeah exactly

00:22:22,240 --> 00:22:26,080
and so we're passing judgment based on

00:22:24,480 --> 00:22:30,400
evidence and opa really

00:22:26,080 --> 00:22:30,400
really enables that with the users

00:22:31,120 --> 00:22:36,320
now the second piece i mentioned earlier

00:22:33,600 --> 00:22:39,440
you know separation of duties right

00:22:36,320 --> 00:22:41,600
i i might be you know a developer and

00:22:39,440 --> 00:22:42,799
ravi will be my manager in this case

00:22:41,600 --> 00:22:46,799
right so

00:22:42,799 --> 00:22:48,720
i wrote some code and i build it and it

00:22:46,799 --> 00:22:49,919
triggers off my in my pipeline so it

00:22:48,720 --> 00:22:51,760
starts building we'll

00:22:49,919 --> 00:22:53,440
put it through the dev cycle the qa

00:22:51,760 --> 00:22:54,080
cycle and then hopefully promote it to

00:22:53,440 --> 00:22:57,440
prod

00:22:54,080 --> 00:22:57,919
but during that process you know i might

00:22:57,440 --> 00:23:01,120
need

00:22:57,919 --> 00:23:02,400
ravi's approval to get to production and

00:23:01,120 --> 00:23:04,799
so

00:23:02,400 --> 00:23:06,320
a lot of you know regulated businesses

00:23:04,799 --> 00:23:08,400
don't want the developer

00:23:06,320 --> 00:23:10,080
to be the one to prove to production

00:23:08,400 --> 00:23:10,320
because sometimes what we've been seeing

00:23:10,080 --> 00:23:12,480
is

00:23:10,320 --> 00:23:14,000
you know we're we're a team we're we're

00:23:12,480 --> 00:23:16,720
friends outside of this

00:23:14,000 --> 00:23:19,520
and so sometimes that kind of spills

00:23:16,720 --> 00:23:21,840
into you know our process where we say

00:23:19,520 --> 00:23:23,520
ravi might say hey rohan uh i don't have

00:23:21,840 --> 00:23:25,520
time to approve this to fraud could you

00:23:23,520 --> 00:23:28,640
just hit approve and let this go through

00:23:25,520 --> 00:23:29,919
i'll be back later and you know i'm i

00:23:28,640 --> 00:23:30,880
trust you because you know we've been

00:23:29,919 --> 00:23:34,240
working together for

00:23:30,880 --> 00:23:35,200
five years and and things are i i trust

00:23:34,240 --> 00:23:37,760
your judgment

00:23:35,200 --> 00:23:38,320
however that doesn't fly when i'm

00:23:37,760 --> 00:23:41,279
building

00:23:38,320 --> 00:23:42,640
apps that are like touching you know

00:23:41,279 --> 00:23:45,679
healthcare data or

00:23:42,640 --> 00:23:47,600
my financial information or you know my

00:23:45,679 --> 00:23:50,159
insurance information i don't wanna

00:23:47,600 --> 00:23:52,320
i don't want people i want to make sure

00:23:50,159 --> 00:23:55,600
that the software that you know

00:23:52,320 --> 00:23:57,440
that i'm i'm i'm consuming as a user

00:23:55,600 --> 00:23:59,120
actually kind of follows some sort of

00:23:57,440 --> 00:24:01,279
process so i can and

00:23:59,120 --> 00:24:02,400
that builds trust with with the user and

00:24:01,279 --> 00:24:04,799
the consumer

00:24:02,400 --> 00:24:06,880
so the separation of duty piece is

00:24:04,799 --> 00:24:09,200
extremely important because

00:24:06,880 --> 00:24:10,960
at in an internal business they

00:24:09,200 --> 00:24:12,640
definitely don't want the developer to

00:24:10,960 --> 00:24:15,360
be the one to prove their own

00:24:12,640 --> 00:24:16,400
build to production that's just not

00:24:15,360 --> 00:24:19,440
going to fly

00:24:16,400 --> 00:24:20,880
and a lot of you know compliance uh

00:24:19,440 --> 00:24:22,960
officers look at that kind of

00:24:20,880 --> 00:24:25,520
information in logs to say

00:24:22,960 --> 00:24:26,159
in the reports to say hey are you guys

00:24:25,520 --> 00:24:28,080
following us

00:24:26,159 --> 00:24:30,000
a good practice to make sure that you

00:24:28,080 --> 00:24:31,919
know the consumer is protected

00:24:30,000 --> 00:24:33,600
um and so we see the separation of

00:24:31,919 --> 00:24:36,000
duties uh problem come up

00:24:33,600 --> 00:24:37,840
uh numerous times and so we think that

00:24:36,000 --> 00:24:40,080
you know opa is an excellent

00:24:37,840 --> 00:24:41,200
you know uh solution to this problem

00:24:40,080 --> 00:24:44,480
because you know

00:24:41,200 --> 00:24:46,880
i can have a list of approvers um

00:24:44,480 --> 00:24:48,159
stored in a kind of a third-party system

00:24:46,880 --> 00:24:50,559
and when i

00:24:48,159 --> 00:24:52,559
get to the point of deployment you can

00:24:50,559 --> 00:24:55,200
automate the decision-making so

00:24:52,559 --> 00:24:56,880
ravi can't let me you know approve to

00:24:55,200 --> 00:24:59,600
prod and go to lunch you know

00:24:56,880 --> 00:25:01,200
he he's got to say hey i actually have

00:24:59,600 --> 00:25:03,520
i'm the only one who can approve

00:25:01,200 --> 00:25:06,080
rohan's build to prod i this build's

00:25:03,520 --> 00:25:08,400
gonna hold until i do it or

00:25:06,080 --> 00:25:10,320
i have to reject everyone else who's

00:25:08,400 --> 00:25:13,120
trying to bypass this rule

00:25:10,320 --> 00:25:14,559
so opa is that kind of buffer to say hey

00:25:13,120 --> 00:25:16,880
you can't do this

00:25:14,559 --> 00:25:18,000
only x amount of people can do this so

00:25:16,880 --> 00:25:20,880
this might be

00:25:18,000 --> 00:25:21,679
ravi this could be my security team this

00:25:20,880 --> 00:25:24,799
could be my

00:25:21,679 --> 00:25:26,720
my like head of release someone else

00:25:24,799 --> 00:25:29,840
besides myself has to

00:25:26,720 --> 00:25:29,840
perform this task

00:25:30,920 --> 00:25:35,600
[Laughter]

00:25:32,559 --> 00:25:36,480
sorry i'm laughing because i've done

00:25:35,600 --> 00:25:40,880
this

00:25:36,480 --> 00:25:43,760
numerous times in my development days

00:25:40,880 --> 00:25:45,279
i i've i've over provisioned you know

00:25:43,760 --> 00:25:47,679
resources and i've crashed

00:25:45,279 --> 00:25:49,039
clusters i still you know even when i

00:25:47,679 --> 00:25:51,120
give demos today i

00:25:49,039 --> 00:25:53,120
create some resources and you know it

00:25:51,120 --> 00:25:56,400
crashes the demo environment

00:25:53,120 --> 00:25:59,520
and so deployment configuration sanitary

00:25:56,400 --> 00:26:02,000
is sanitary this is huge like when i

00:25:59,520 --> 00:26:02,640
deploy my kubernetes application or my

00:26:02,000 --> 00:26:05,679
ecs

00:26:02,640 --> 00:26:08,400
application uh how do i make sure that

00:26:05,679 --> 00:26:10,320
a the image is not coming from the

00:26:08,400 --> 00:26:12,960
public docker hub i need to

00:26:10,320 --> 00:26:14,320
take it from like a private s3 bucket or

00:26:12,960 --> 00:26:16,799
an artifact like an

00:26:14,320 --> 00:26:18,640
artifactory or how do i make sure that

00:26:16,799 --> 00:26:19,760
the in the kubernetes like container

00:26:18,640 --> 00:26:23,840
spec i'm not taking

00:26:19,760 --> 00:26:25,760
uh a massive amount of cpu or memory

00:26:23,840 --> 00:26:26,880
or how do i make sure that the pod has

00:26:25,760 --> 00:26:29,279
the right labels

00:26:26,880 --> 00:26:30,640
so i can track it in my other business

00:26:29,279 --> 00:26:34,000
systems

00:26:30,640 --> 00:26:36,320
opa you know really does a good job

00:26:34,000 --> 00:26:38,159
of being that buffer because essentially

00:26:36,320 --> 00:26:40,159
before the deployment

00:26:38,159 --> 00:26:41,520
you can catch that whole thing through

00:26:40,159 --> 00:26:43,840
gatekeeper and

00:26:41,520 --> 00:26:45,039
it will check to see hey do you meet

00:26:43,840 --> 00:26:46,640
these kind of criteria like you can

00:26:45,039 --> 00:26:48,880
write rules like making sure

00:26:46,640 --> 00:26:50,480
my image is not com coming from a public

00:26:48,880 --> 00:26:53,760
repo making sure

00:26:50,480 --> 00:26:55,840
cpu is under this amount and making sure

00:26:53,760 --> 00:26:58,960
memory is under this amount

00:26:55,840 --> 00:27:00,240
and what you can see is those rules are

00:26:58,960 --> 00:27:03,279
being evaluated

00:27:00,240 --> 00:27:05,679
and you know that you know there's a

00:27:03,279 --> 00:27:07,039
guard rail in place that as we're going

00:27:05,679 --> 00:27:09,120
through the ci cd

00:27:07,039 --> 00:27:10,640
process there's a system checking to

00:27:09,120 --> 00:27:14,480
make sure that my config

00:27:10,640 --> 00:27:17,679
actually you know it matches my criteria

00:27:14,480 --> 00:27:20,399
at an infrastructure level and even at

00:27:17,679 --> 00:27:22,080
the uh at the at the config level as

00:27:20,399 --> 00:27:23,279
well make making sure the configure

00:27:22,080 --> 00:27:26,399
sanitary and

00:27:23,279 --> 00:27:29,200
my infrastructure is you know safe it's

00:27:26,399 --> 00:27:31,760
it's de-risked because of this kind of

00:27:29,200 --> 00:27:31,760
governance

00:27:31,840 --> 00:27:37,440
we definitely don't want to do you know

00:27:34,240 --> 00:27:40,399
all our best testing in production

00:27:37,440 --> 00:27:42,320
i get your aws bill rohan so definitely

00:27:40,399 --> 00:27:43,279
you're very prone to over provisioning

00:27:42,320 --> 00:27:45,120
so thanks for my

00:27:43,279 --> 00:27:48,000
points for my next vacation whenever

00:27:45,120 --> 00:27:49,200
that will

00:27:48,000 --> 00:27:50,480
but yeah was there anything else you

00:27:49,200 --> 00:27:51,360
want to chat about about use cases

00:27:50,480 --> 00:27:54,480
before i introduce the

00:27:51,360 --> 00:27:55,919
continuous delivery foundation um i i

00:27:54,480 --> 00:27:59,200
also wanted to talk about

00:27:55,919 --> 00:28:02,240
uh one last piece which was around uh

00:27:59,200 --> 00:28:03,600
the around like enforcement of in the

00:28:02,240 --> 00:28:06,399
deployment process

00:28:03,600 --> 00:28:08,080
what about like blackout periods right

00:28:06,399 --> 00:28:09,600
how do i make sure that people aren't

00:28:08,080 --> 00:28:13,279
bypassing those how do i

00:28:09,600 --> 00:28:15,120
and how do i like build a system that

00:28:13,279 --> 00:28:17,760
you know that can enforce that without

00:28:15,120 --> 00:28:19,919
me having to say hey guys

00:28:17,760 --> 00:28:21,360
you are not deploying on friday because

00:28:19,919 --> 00:28:22,399
i don't want to be on call saturday

00:28:21,360 --> 00:28:24,000
dealing with this

00:28:22,399 --> 00:28:25,919
how can i make sure that you know

00:28:24,000 --> 00:28:28,159
there's a check in place

00:28:25,919 --> 00:28:30,320
and opi actually can be leveraged for

00:28:28,159 --> 00:28:33,120
that as well as like a

00:28:30,320 --> 00:28:34,320
as a rule engine to say hey deployments

00:28:33,120 --> 00:28:37,520
cannot happen

00:28:34,320 --> 00:28:38,960
on friday deployments cannot happen on

00:28:37,520 --> 00:28:41,760
monday

00:28:38,960 --> 00:28:42,960
and so we we have you know deployment

00:28:41,760 --> 00:28:44,720
configuration

00:28:42,960 --> 00:28:46,399
is one part of it but actually the

00:28:44,720 --> 00:28:48,799
process of deploying

00:28:46,399 --> 00:28:50,399
that at a higher level can be managed by

00:28:48,799 --> 00:28:53,520
opa as well because

00:28:50,399 --> 00:28:54,080
at runtime you can definitely send the

00:28:53,520 --> 00:28:55,919
system

00:28:54,080 --> 00:28:58,399
like a check saying hey a deployment is

00:28:55,919 --> 00:29:00,320
starting and then opa can say

00:28:58,399 --> 00:29:02,320
what's the time take like the metadata

00:29:00,320 --> 00:29:04,399
of what the time is what the date is

00:29:02,320 --> 00:29:05,679
and you could very much design like a

00:29:04,399 --> 00:29:09,360
rule to say hey

00:29:05,679 --> 00:29:11,440
enforce the blackout window you have to

00:29:09,360 --> 00:29:13,279
deploy on tuesday wednesday thursday you

00:29:11,440 --> 00:29:14,960
can't deploy on monday and friday

00:29:13,279 --> 00:29:16,559
and reject the deployment so you have

00:29:14,960 --> 00:29:18,640
that peace of mind again

00:29:16,559 --> 00:29:19,600
i talked about i spoke about guardrails

00:29:18,640 --> 00:29:22,559
it's

00:29:19,600 --> 00:29:25,440
extremely uh valuable kind of as an

00:29:22,559 --> 00:29:27,120
interface for those guard rail

00:29:25,440 --> 00:29:29,039
policies that we have in place in our

00:29:27,120 --> 00:29:30,559
organizations today

00:29:29,039 --> 00:29:32,480
yeah that's perfect i mean i think we

00:29:30,559 --> 00:29:33,120
you know rohan and myself we talked

00:29:32,480 --> 00:29:35,919
about

00:29:33,120 --> 00:29:37,600
there's a lot of rules uh when going to

00:29:35,919 --> 00:29:39,279
uh production right there's not just one

00:29:37,600 --> 00:29:40,640
you know past this there's there's lots

00:29:39,279 --> 00:29:42,640
of incremental confidence

00:29:40,640 --> 00:29:44,240
uh going back to the technology choices

00:29:42,640 --> 00:29:44,799
the process choices and even the people

00:29:44,240 --> 00:29:46,799
choices

00:29:44,799 --> 00:29:48,320
uh you know how do you enforce that and

00:29:46,799 --> 00:29:49,919
opa is a perfect

00:29:48,320 --> 00:29:52,080
rules engine for that you don't have to

00:29:49,919 --> 00:29:54,559
understand like drools or i log

00:29:52,080 --> 00:29:56,559
or some other you fancy rules engine it

00:29:54,559 --> 00:29:59,120
is uh it's simple enough that

00:29:56,559 --> 00:30:00,320
more people a wider swath of skill sets

00:29:59,120 --> 00:30:02,000
can actually implement it

00:30:00,320 --> 00:30:04,480
and a lot of what we talked about uh

00:30:02,000 --> 00:30:05,600
today it's ongoing right like it is how

00:30:04,480 --> 00:30:08,159
do you bode

00:30:05,600 --> 00:30:09,679
uh particular rule sets uh rule sets

00:30:08,159 --> 00:30:11,919
that are hard coded or rule sets that

00:30:09,679 --> 00:30:14,000
have been ingrained deep in a system

00:30:11,919 --> 00:30:16,000
to something more abstract and that's a

00:30:14,000 --> 00:30:18,480
lot of the goals that we're seeing with

00:30:16,000 --> 00:30:19,200
opa open policy agent and case delivery

00:30:18,480 --> 00:30:21,679
but

00:30:19,200 --> 00:30:23,120
depending on where you are i kind of

00:30:21,679 --> 00:30:24,159
want to kind of close out with a few

00:30:23,120 --> 00:30:26,000
points here

00:30:24,159 --> 00:30:27,840
as you're going along your continuous

00:30:26,000 --> 00:30:29,600
delivery journey or if you have no idea

00:30:27,840 --> 00:30:31,279
again what contains delivery is

00:30:29,600 --> 00:30:32,960
there is a linux foundation sub

00:30:31,279 --> 00:30:35,200
foundation to help you out

00:30:32,960 --> 00:30:36,000
so i want to introduce uh pay homage to

00:30:35,200 --> 00:30:39,279
the continuous

00:30:36,000 --> 00:30:42,080
delivery foundation aka the cdf uh which

00:30:39,279 --> 00:30:43,600
we're uh proud part of now so basically

00:30:42,080 --> 00:30:46,080
the continuous delivery foundation

00:30:43,600 --> 00:30:47,520
here's actually a uh presentation in a

00:30:46,080 --> 00:30:49,440
presentation i actually gave this

00:30:47,520 --> 00:30:50,640
presentation uh the screenshot in the

00:30:49,440 --> 00:30:52,720
middle um called

00:30:50,640 --> 00:30:53,760
how much should you deploy and i suffer

00:30:52,720 --> 00:30:56,960
from something called

00:30:53,760 --> 00:31:00,080
photo fodo fear of deploying

00:30:56,960 --> 00:31:01,760
or actually this was fond fod uh but

00:31:00,080 --> 00:31:03,840
how much should you be deploying right

00:31:01,760 --> 00:31:05,039
and a lot of uh being in industry a lot

00:31:03,840 --> 00:31:06,960
of what we see

00:31:05,039 --> 00:31:09,519
uh you know if you're if you've read

00:31:06,960 --> 00:31:10,720
this another book uh lead enterprise

00:31:09,519 --> 00:31:12,240
uh you might say you know what i need to

00:31:10,720 --> 00:31:13,360
be deploying a hundred times a day and

00:31:12,240 --> 00:31:15,360
then you might google it

00:31:13,360 --> 00:31:16,960
say am i am i crazy how many how many

00:31:15,360 --> 00:31:18,720
times a day does a big software firm

00:31:16,960 --> 00:31:20,720
deploy and you don't have to be

00:31:18,720 --> 00:31:22,799
deploying every 12 seconds right like

00:31:20,720 --> 00:31:24,240
if you're deploying every six months and

00:31:22,799 --> 00:31:25,519
you get that down to every three months

00:31:24,240 --> 00:31:26,640
this is the production right you might

00:31:25,519 --> 00:31:29,200
be deploying to

00:31:26,640 --> 00:31:30,240
uh you know a dev environment 100 times

00:31:29,200 --> 00:31:31,919
a day but

00:31:30,240 --> 00:31:33,279
getting into production if you're gonna

00:31:31,919 --> 00:31:35,120
cut that in half you know from six

00:31:33,279 --> 00:31:38,720
months three months you're incredibly

00:31:35,120 --> 00:31:40,399
more agile leaving with it's a new

00:31:38,720 --> 00:31:42,240
a neutral home for many of the

00:31:40,399 --> 00:31:44,159
continuous delivery tools and projects

00:31:42,240 --> 00:31:46,399
and so there's several engines out there

00:31:44,159 --> 00:31:47,840
which harness participates in and so if

00:31:46,399 --> 00:31:49,120
you're looking to get more into the

00:31:47,840 --> 00:31:51,519
continuous delivery space

00:31:49,120 --> 00:31:52,159
um the cdf is a great place to be

00:31:51,519 --> 00:31:53,679
organized

00:31:52,159 --> 00:31:55,279
there's several special interest groups

00:31:53,679 --> 00:31:56,720
and working groups there that just if

00:31:55,279 --> 00:31:58,480
you want to participate

00:31:56,720 --> 00:32:00,080
i participate in a few of them extremely

00:31:58,480 --> 00:32:01,679
open and valuable for you to come

00:32:00,080 --> 00:32:03,120
and learn more or come and participate

00:32:01,679 --> 00:32:06,240
with your expertise

00:32:03,120 --> 00:32:07,919
but with that if you would like to get a

00:32:06,240 --> 00:32:08,960
copy of the presentation or learn a

00:32:07,919 --> 00:32:09,600
little bit more what you learned about

00:32:08,960 --> 00:32:11,919
today

00:32:09,600 --> 00:32:13,519
feel free to hit up this bitly or give

00:32:11,919 --> 00:32:15,519
it a qr scan

00:32:13,519 --> 00:32:16,960
and so we can actually take a look at

00:32:15,519 --> 00:32:19,360
what questions have been

00:32:16,960 --> 00:32:20,720
uh been asked now so let's take a quick

00:32:19,360 --> 00:32:23,919
look here

00:32:20,720 --> 00:32:24,960
in the question and answer section or in

00:32:23,919 --> 00:32:26,399
the chat

00:32:24,960 --> 00:32:29,200
so if you have any sort of questions

00:32:26,399 --> 00:32:32,080
feel free to ask them it looks like our

00:32:29,200 --> 00:32:33,519
question queue is empty uh rohan and i

00:32:32,080 --> 00:32:36,000
can answer anything about

00:32:33,519 --> 00:32:37,519
uh oppa or about life in general if you

00:32:36,000 --> 00:32:38,799
need advice uh where to eat

00:32:37,519 --> 00:32:42,159
you know we can give you some some of

00:32:38,799 --> 00:32:44,960
that too so don't be shy

00:32:42,159 --> 00:32:44,960
we're here for y'all

00:32:49,360 --> 00:32:52,320
just give it a few minutes

00:32:52,559 --> 00:32:56,480
rohan what is your favorite coffee mine

00:32:55,760 --> 00:32:57,600
uh

00:32:56,480 --> 00:33:00,159
i've been actually playing around with

00:32:57,600 --> 00:33:03,519
the with phil's uh

00:33:00,159 --> 00:33:06,000
that testoro one or tessera

00:33:03,519 --> 00:33:11,840
it's been pretty good i like the mid

00:33:06,000 --> 00:33:11,840
mojito one i'm not gonna

00:33:14,799 --> 00:33:17,519
all right we got some good ones okay how

00:33:16,240 --> 00:33:18,399
can we attend the slides or the

00:33:17,519 --> 00:33:20,480
recording

00:33:18,399 --> 00:33:21,679
um you can hit up this big link here i

00:33:20,480 --> 00:33:24,880
believe the linux foundation

00:33:21,679 --> 00:33:28,240
will publish uh not too long after

00:33:24,880 --> 00:33:29,679
recording what is your favorite

00:33:28,240 --> 00:33:32,159
distribution of linux

00:33:29,679 --> 00:33:32,159
rohan

00:33:32,720 --> 00:33:39,039
oh man that's a good question

00:33:36,000 --> 00:33:42,000
that's a good question um

00:33:39,039 --> 00:33:42,399
i i i'm a big like you know enterprise

00:33:42,000 --> 00:33:44,159
guy

00:33:42,399 --> 00:33:46,240
because you know i i started an

00:33:44,159 --> 00:33:48,080
enterprise it's very much like red hat's

00:33:46,240 --> 00:33:50,000
distribution

00:33:48,080 --> 00:33:51,679
of linux that's the one that i've kind

00:33:50,000 --> 00:33:55,440
of learned on and

00:33:51,679 --> 00:33:57,039
i ride that out um but yeah that's

00:33:55,440 --> 00:33:57,519
that's mine ravi do you have a favorite

00:33:57,039 --> 00:34:00,000
one

00:33:57,519 --> 00:34:01,360
i like mint i'm on the mojito train i

00:34:00,000 --> 00:34:04,320
like my next it's easy

00:34:01,360 --> 00:34:04,880
it's basically ubuntu so um i'm a big

00:34:04,320 --> 00:34:06,960
fan of

00:34:04,880 --> 00:34:09,520
a big fan of mint actually it's on my

00:34:06,960 --> 00:34:12,480
mother's laptop i gave it to her

00:34:09,520 --> 00:34:13,119
start learning uh let's see so is there

00:34:12,480 --> 00:34:15,919
a demo

00:34:13,119 --> 00:34:18,079
we could do with harness and opa um that

00:34:15,919 --> 00:34:20,320
we actually do have a demo

00:34:18,079 --> 00:34:21,359
we had a we have a demo but i we

00:34:20,320 --> 00:34:24,320
actually have a lot of

00:34:21,359 --> 00:34:25,599
blogs that kind of uh in on our harness

00:34:24,320 --> 00:34:28,000
site that actually go

00:34:25,599 --> 00:34:30,000
through how to configure it in harness

00:34:28,000 --> 00:34:32,800
and how a deployment works uh

00:34:30,000 --> 00:34:33,200
ravi actually uh our colleague tiff um

00:34:32,800 --> 00:34:35,200
wrote

00:34:33,200 --> 00:34:36,639
knew a couple of them uh and the team

00:34:35,200 --> 00:34:37,119
can kind of here can kind of check it

00:34:36,639 --> 00:34:38,960
out

00:34:37,119 --> 00:34:41,599
and see kind of how it works with

00:34:38,960 --> 00:34:44,000
harness and even outside of harness just

00:34:41,599 --> 00:34:44,879
how you could design a rule how you can

00:34:44,000 --> 00:34:46,720
apply it to

00:34:44,879 --> 00:34:48,240
you know your kubernetes cluster and

00:34:46,720 --> 00:34:49,440
then you can even test it outside of

00:34:48,240 --> 00:34:52,399
harness just try running

00:34:49,440 --> 00:34:54,240
you know gatekeeper and running cube ctl

00:34:52,399 --> 00:34:54,960
with some sample manifests against it

00:34:54,240 --> 00:34:58,160
and you'll see

00:34:54,960 --> 00:34:58,720
kind of how the rule engine behaves yeah

00:34:58,160 --> 00:35:00,480
perfect

00:34:58,720 --> 00:35:02,160
um and also yeah we do i think our

00:35:00,480 --> 00:35:04,079
example is really a really really

00:35:02,160 --> 00:35:05,359
eloquent one or a simple one it was like

00:35:04,079 --> 00:35:06,800
blocking a name space that shouldn't

00:35:05,359 --> 00:35:09,440
have been deployed too so

00:35:06,800 --> 00:35:10,160
uh makes perfect sense um so another

00:35:09,440 --> 00:35:12,079
question and

00:35:10,160 --> 00:35:13,680
internally do you use opa just for

00:35:12,079 --> 00:35:15,280
tremendous deployments or do we use it

00:35:13,680 --> 00:35:18,480
for other workflows

00:35:15,280 --> 00:35:21,440
or what have you seen so internally

00:35:18,480 --> 00:35:22,160
we've been working on some cool things

00:35:21,440 --> 00:35:24,240
on around

00:35:22,160 --> 00:35:26,240
you know how we could regulate

00:35:24,240 --> 00:35:28,480
deployments but also it's

00:35:26,240 --> 00:35:30,560
we're looking at it more more it's more

00:35:28,480 --> 00:35:32,800
than regulating kind of the cluster

00:35:30,560 --> 00:35:34,000
we're focusing more on the rules engine

00:35:32,800 --> 00:35:36,400
and kind of

00:35:34,000 --> 00:35:37,200
how we can you know make a make a

00:35:36,400 --> 00:35:40,079
judgment call

00:35:37,200 --> 00:35:41,040
based on off of it so that that's kind

00:35:40,079 --> 00:35:44,079
of where we've been

00:35:41,040 --> 00:35:46,079
uh looking more into more than just the

00:35:44,079 --> 00:35:49,359
restriction of deployments because

00:35:46,079 --> 00:35:50,320
restriction of deployments um itself opa

00:35:49,359 --> 00:35:52,560
does

00:35:50,320 --> 00:35:53,520
does it because it's you know managing

00:35:52,560 --> 00:35:56,320
the cluster and

00:35:53,520 --> 00:35:57,520
the configuration uh before you actually

00:35:56,320 --> 00:35:59,680
do the apply

00:35:57,520 --> 00:36:01,200
so uh the the things that we're kind of

00:35:59,680 --> 00:36:04,320
looking into are more along

00:36:01,200 --> 00:36:06,000
uh making decisions for you

00:36:04,320 --> 00:36:07,760
and for for those taking that question

00:36:06,000 --> 00:36:10,800
one step further i think

00:36:07,760 --> 00:36:12,160
um at least for a harness implementation

00:36:10,800 --> 00:36:13,119
it's not necessarily restricted to

00:36:12,160 --> 00:36:15,839
kubernetes so

00:36:13,119 --> 00:36:16,960
you know opa is correct it grew up on

00:36:15,839 --> 00:36:19,040
kubernetes but

00:36:16,960 --> 00:36:20,560
uh you know a lot of times you might be

00:36:19,040 --> 00:36:22,800
in between like you know you might

00:36:20,560 --> 00:36:23,760
your organization might not leverage

00:36:22,800 --> 00:36:25,680
kubernetes or

00:36:23,760 --> 00:36:27,680
you know which is very valid or you

00:36:25,680 --> 00:36:28,640
might be having partial apps right like

00:36:27,680 --> 00:36:31,680
hey like 10

00:36:28,640 --> 00:36:33,280
20 is on kahs and so just mainly

00:36:31,680 --> 00:36:34,720
just reiterating for what rohan said

00:36:33,280 --> 00:36:36,320
like more it's actually very powerful

00:36:34,720 --> 00:36:37,920
rules agents so it could be running to

00:36:36,320 --> 00:36:40,079
orchestrate things and making great

00:36:37,920 --> 00:36:41,920
decisions for pipeline decisions that

00:36:40,079 --> 00:36:43,839
are eventually the end point is a vm

00:36:41,920 --> 00:36:46,800
or another linux in terms of bare metal

00:36:43,839 --> 00:36:46,800
so yeah good question

00:36:47,920 --> 00:36:55,839
is there anything else we can answer

00:36:50,240 --> 00:36:55,839
feel free

00:36:57,520 --> 00:37:02,000
well i think we're all set looks like

00:36:58,880 --> 00:37:03,920
the questions have uh have slowed um

00:37:02,000 --> 00:37:06,160
so yeah just thank you everybody for

00:37:03,920 --> 00:37:08,160
your time uh today

00:37:06,160 --> 00:37:09,680
this morning this afternoon this evening

00:37:08,160 --> 00:37:11,680
uh really

00:37:09,680 --> 00:37:12,800
really glad to hear these great

00:37:11,680 --> 00:37:16,640
questions

00:37:12,800 --> 00:37:18,640
and uh yeah cheers everybody

00:37:16,640 --> 00:37:20,079
great thank you so much to ravi and

00:37:18,640 --> 00:37:21,520
rohan for their time today

00:37:20,079 --> 00:37:23,440
and thank you to all the participants

00:37:21,520 --> 00:37:24,640
who joined us as a reminder this

00:37:23,440 --> 00:37:26,560
recording will be

00:37:24,640 --> 00:37:27,760
on the linux foundation youtube page

00:37:26,560 --> 00:37:29,440
later today

00:37:27,760 --> 00:37:35,760
and we hope you're able to join us for

00:37:29,440 --> 00:37:35,760

YouTube URL: https://www.youtube.com/watch?v=X-emeK5GemA


