Title: Webinar: Deliver Your App Anywhere … Publicly or Privately, sponsored by Volterra
Publication date: 2020-12-17
Playlist: LF Live Webinars
Description: 
	Developers are increasingly adopting a microservices approach for their apps in order to gain rapid iteration capabilities required for delivering new services faster. However, delivering the app still requires multiple steps. In this session, you’ll learn more about these challenges and introduce a distributed proxy architecture that can alleviate these provisioning challenges across different cloud environments.

Speakers:
Pranav Dharwadkar, VP of Products, and Jakub Pavlik, Director of Engineering, Volterra
Captions: 
	00:00:00,719 --> 00:00:07,520
all right my name is pranav and

00:00:03,360 --> 00:00:07,520
i'm joined with jakob to talk about

00:00:08,000 --> 00:00:14,880
how users can deliver their

00:00:11,040 --> 00:00:18,080
modern apps anywhere

00:00:14,880 --> 00:00:20,960
both publicly and privately

00:00:18,080 --> 00:00:21,840
the what we've seen as the most recent

00:00:20,960 --> 00:00:24,640
trends

00:00:21,840 --> 00:00:25,840
is developers are adopting new

00:00:24,640 --> 00:00:28,840
approaches

00:00:25,840 --> 00:00:31,279
in order to deliver their services

00:00:28,840 --> 00:00:34,000
faster

00:00:31,279 --> 00:00:34,640
they've moved from the private data

00:00:34,000 --> 00:00:36,719
center

00:00:34,640 --> 00:00:37,840
to one public cloud which is the hybrid

00:00:36,719 --> 00:00:41,200
cloud

00:00:37,840 --> 00:00:42,879
but now they're actually users and

00:00:41,200 --> 00:00:45,600
developers are trying to adopt

00:00:42,879 --> 00:00:46,160
multiple public clouds as well as the

00:00:45,600 --> 00:00:49,039
edge

00:00:46,160 --> 00:00:49,840
so that they can deliver the apps or

00:00:49,039 --> 00:00:52,719
services

00:00:49,840 --> 00:00:55,280
faster by leveraging the best of each

00:00:52,719 --> 00:00:58,800
cloud for example maybe ml from google

00:00:55,280 --> 00:01:02,160
or maybe some service from uh from uh

00:00:58,800 --> 00:01:03,840
from aws or something from azure and try

00:01:02,160 --> 00:01:04,799
to leverage best of each server so that

00:01:03,840 --> 00:01:08,159
they can develop

00:01:04,799 --> 00:01:08,159
new services faster

00:01:08,320 --> 00:01:12,159
similarly in the previous decade users

00:01:11,520 --> 00:01:15,280
went from

00:01:12,159 --> 00:01:17,680
uh from uh from uh

00:01:15,280 --> 00:01:19,439
from legacy apps and virtualized the

00:01:17,680 --> 00:01:22,320
apps into vms

00:01:19,439 --> 00:01:23,759
but now developers are adopting new

00:01:22,320 --> 00:01:25,680
application architectures such as

00:01:23,759 --> 00:01:29,759
microservices containers

00:01:25,680 --> 00:01:29,759
and even serverless in order to

00:01:29,840 --> 00:01:33,439
develop and and also deliver the new

00:01:32,720 --> 00:01:36,400
services

00:01:33,439 --> 00:01:37,200
faster and and the third big trend

00:01:36,400 --> 00:01:40,320
obviously was

00:01:37,200 --> 00:01:40,960
the the the move to agile and actually

00:01:40,320 --> 00:01:44,159
doing it

00:01:40,960 --> 00:01:44,159
uh and actually

00:01:45,200 --> 00:01:49,040
delivering the services faster but but

00:01:47,520 --> 00:01:50,560
but now it has actually become

00:01:49,040 --> 00:01:52,320
continuous especially condensed

00:01:50,560 --> 00:01:54,640
integration continuous uh

00:01:52,320 --> 00:01:56,560
deployment continuous delivery as well

00:01:54,640 --> 00:01:58,719
as continuous verification

00:01:56,560 --> 00:01:59,680
of the application so it's a constant

00:01:58,719 --> 00:02:03,040
iterative

00:01:59,680 --> 00:02:04,079
uh software development process and all

00:02:03,040 --> 00:02:07,040
of this has been done

00:02:04,079 --> 00:02:10,239
by developers in order to deliver their

00:02:07,040 --> 00:02:10,239
services faster

00:02:11,039 --> 00:02:18,480
however delivering an app

00:02:15,360 --> 00:02:21,520
is not just developing the app

00:02:18,480 --> 00:02:25,680
to actually deliver the app to

00:02:21,520 --> 00:02:28,879
the so that it can be consumed by a user

00:02:25,680 --> 00:02:32,480
involves multiple point

00:02:28,879 --> 00:02:35,519
products and

00:02:32,480 --> 00:02:35,519
multiple teams

00:02:35,680 --> 00:02:42,560
and these themes they communicate

00:02:39,360 --> 00:02:45,120
using sort of support tickets

00:02:42,560 --> 00:02:46,800
and because there are so many multiple

00:02:45,120 --> 00:02:49,599
point products

00:02:46,800 --> 00:02:50,959
nearly seven of them there's multiple

00:02:49,599 --> 00:02:53,760
iterations

00:02:50,959 --> 00:02:55,280
that need that you need to go through in

00:02:53,760 --> 00:02:58,800
order to deliver

00:02:55,280 --> 00:03:03,519
this app to this user

00:02:58,800 --> 00:03:06,800
each of these iterations takes

00:03:03,519 --> 00:03:10,319
days to weeks in order to

00:03:06,800 --> 00:03:12,159
get it right and and meanwhile

00:03:10,319 --> 00:03:13,920
your app is not static your app is

00:03:12,159 --> 00:03:17,280
continuously changing the user

00:03:13,920 --> 00:03:18,480
the uh the developer is

00:03:17,280 --> 00:03:21,200
because of the whole continuous

00:03:18,480 --> 00:03:24,159
integration delivery deployment

00:03:21,200 --> 00:03:24,480
and verification the apis are changing

00:03:24,159 --> 00:03:27,920
so

00:03:24,480 --> 00:03:31,440
this whole process is continuously

00:03:27,920 --> 00:03:34,159
being iterative and taking longer

00:03:31,440 --> 00:03:34,159
as a result

00:03:35,200 --> 00:03:41,599
and what is the end impact of this

00:03:38,879 --> 00:03:43,040
the developer is developing their app

00:03:41,599 --> 00:03:44,000
faster they are going actually going

00:03:43,040 --> 00:03:46,640
fast

00:03:44,000 --> 00:03:47,920
however because they're going fast and

00:03:46,640 --> 00:03:51,680
because the current

00:03:47,920 --> 00:03:53,120
tools are def our point products are

00:03:51,680 --> 00:03:56,799
siloed

00:03:53,120 --> 00:03:59,840
each of the individual teams both devops

00:03:56,799 --> 00:04:01,040
and the network ops network i.t they're

00:03:59,840 --> 00:04:02,000
also called infrastructure and

00:04:01,040 --> 00:04:04,879
operations

00:04:02,000 --> 00:04:05,200
they are actually getting overwhelmed

00:04:04,879 --> 00:04:07,439
and

00:04:05,200 --> 00:04:10,959
burdened because of this constant

00:04:07,439 --> 00:04:13,040
changes in the application

00:04:10,959 --> 00:04:14,480
and this is negating all the

00:04:13,040 --> 00:04:16,560
efficiencies

00:04:14,480 --> 00:04:18,079
that the developer has gained by

00:04:16,560 --> 00:04:21,600
adopting a

00:04:18,079 --> 00:04:21,600
modern app approach

00:04:22,880 --> 00:04:25,520
let's look at

00:04:26,000 --> 00:04:32,160
why does it take so long to

00:04:29,199 --> 00:04:34,880
deliver the app like just let's look at

00:04:32,160 --> 00:04:37,759
firstly how long does it take

00:04:34,880 --> 00:04:39,680
first in order to deliver the app you

00:04:37,759 --> 00:04:41,440
need to first obviously have some form

00:04:39,680 --> 00:04:44,000
of app management which is either

00:04:41,440 --> 00:04:45,280
either you can have your own uh

00:04:44,000 --> 00:04:48,240
kubernetes cluster

00:04:45,280 --> 00:04:49,520
or your virtual machine for example so

00:04:48,240 --> 00:04:51,440
you have that

00:04:49,520 --> 00:04:53,680
then if you have a kubernetes cluster

00:04:51,440 --> 00:04:54,639
then you need an english controller so

00:04:53,680 --> 00:04:57,199
that you can

00:04:54,639 --> 00:04:58,639
direct traffic to this cluster from the

00:04:57,199 --> 00:05:01,199
outside

00:04:58,639 --> 00:05:02,720
once you have that then you need an app

00:05:01,199 --> 00:05:04,880
an application firewall an

00:05:02,720 --> 00:05:05,759
app firewall which essentially protects

00:05:04,880 --> 00:05:08,080
your

00:05:05,759 --> 00:05:11,199
app to app traffic so products traffic

00:05:08,080 --> 00:05:13,680
coming into the application

00:05:11,199 --> 00:05:14,639
next once you have that then then

00:05:13,680 --> 00:05:17,440
obviously you need to

00:05:14,639 --> 00:05:18,720
expose this app publicly you you you

00:05:17,440 --> 00:05:21,199
actually want to

00:05:18,720 --> 00:05:23,280
scale both your application firewall as

00:05:21,199 --> 00:05:24,000
well as your application so you need a

00:05:23,280 --> 00:05:26,560
load balance

00:05:24,000 --> 00:05:27,759
in front so that you can scale this

00:05:26,560 --> 00:05:30,240
horizontally

00:05:27,759 --> 00:05:32,000
right and this load balancer is where

00:05:30,240 --> 00:05:34,720
you will basically terminate

00:05:32,000 --> 00:05:35,520
your ssl connection and you you actually

00:05:34,720 --> 00:05:38,720
terminate

00:05:35,520 --> 00:05:40,160
uh your i your traffic so you're you

00:05:38,720 --> 00:05:42,240
need a load balancer to do those

00:05:40,160 --> 00:05:43,759
functions

00:05:42,240 --> 00:05:45,680
in front of the load balancer you want

00:05:43,759 --> 00:05:47,199
to protect that you actually don't want

00:05:45,680 --> 00:05:49,120
it to be overwhelmed by

00:05:47,199 --> 00:05:50,320
malicious traffic so therefore you will

00:05:49,120 --> 00:05:53,520
add a

00:05:50,320 --> 00:05:57,520
network firewall so that you can

00:05:53,520 --> 00:06:00,800
block malicious traffic

00:05:57,520 --> 00:06:02,319
coming into the road balancer then

00:06:00,800 --> 00:06:04,000
in front of that you need a router

00:06:02,319 --> 00:06:05,440
because you need the traffic to actually

00:06:04,000 --> 00:06:06,479
come in here so you need to you need a

00:06:05,440 --> 00:06:09,680
way to advertise

00:06:06,479 --> 00:06:13,039
the uh the routes the app reachability

00:06:09,680 --> 00:06:15,680
to the outside world and then

00:06:13,039 --> 00:06:17,199
in front of it this is in your data

00:06:15,680 --> 00:06:18,000
center so this is right here is your

00:06:17,199 --> 00:06:20,000
data center

00:06:18,000 --> 00:06:22,560
in front of it you actually need like a

00:06:20,000 --> 00:06:23,360
ddos because you don't want to saturate

00:06:22,560 --> 00:06:27,039
the link

00:06:23,360 --> 00:06:30,880
between the user and your data center

00:06:27,039 --> 00:06:34,560
so you need a ddos to uh block

00:06:30,880 --> 00:06:36,240
uh traffic um uh block malicious traffic

00:06:34,560 --> 00:06:37,440
coming in and only allow the good

00:06:36,240 --> 00:06:39,600
traffic so you want

00:06:37,440 --> 00:06:41,440
the ddos which is away from a data

00:06:39,600 --> 00:06:43,520
center outside your data center

00:06:41,440 --> 00:06:45,199
that is blocking malicious traffic and

00:06:43,520 --> 00:06:46,479
only allowing good traffic

00:06:45,199 --> 00:06:48,479
ensuring that this link doesn't get

00:06:46,479 --> 00:06:50,000
saturated so you need all of these

00:06:48,479 --> 00:06:52,240
different components

00:06:50,000 --> 00:06:54,639
before your app that your developer

00:06:52,240 --> 00:06:57,919
developed can be exposed to the

00:06:54,639 --> 00:07:01,039
internet and allow users to

00:06:57,919 --> 00:07:03,039
talk to the app let's look at the time

00:07:01,039 --> 00:07:05,759
that it takes

00:07:03,039 --> 00:07:06,400
this part the creating a kubernetes

00:07:05,759 --> 00:07:08,160
cluster

00:07:06,400 --> 00:07:09,680
and creating an english controller is

00:07:08,160 --> 00:07:11,280
you know has become pretty fast mainly

00:07:09,680 --> 00:07:11,919
because of the whole infrastructure as

00:07:11,280 --> 00:07:13,919
code

00:07:11,919 --> 00:07:15,120
uh there are these recipes available

00:07:13,919 --> 00:07:16,720
charts available

00:07:15,120 --> 00:07:18,080
so you can actually do that pretty fast

00:07:16,720 --> 00:07:19,120
about two days for each two to three

00:07:18,080 --> 00:07:22,319
days free so that's

00:07:19,120 --> 00:07:23,680
that's you know is becoming quick but

00:07:22,319 --> 00:07:25,759
when you start getting into

00:07:23,680 --> 00:07:28,000
all of these other components the app

00:07:25,759 --> 00:07:28,479
delivery components such as in app fire

00:07:28,000 --> 00:07:30,479
one

00:07:28,479 --> 00:07:31,520
that takes some time to actually tune

00:07:30,479 --> 00:07:33,520
the app firewall

00:07:31,520 --> 00:07:35,840
in order to reduce the false positive to

00:07:33,520 --> 00:07:38,639
to figure out what needs to be blocked

00:07:35,840 --> 00:07:40,240
what uh do you turn on only the os or do

00:07:38,639 --> 00:07:41,360
you turn on something else or what rules

00:07:40,240 --> 00:07:44,720
do you turn on

00:07:41,360 --> 00:07:46,560
right so that takes some time to tune

00:07:44,720 --> 00:07:48,240
then to figure out load balancer to

00:07:46,560 --> 00:07:50,479
actually program the certificate to

00:07:48,240 --> 00:07:52,080
actually create decision certification

00:07:50,479 --> 00:07:53,840
and to do and to actually create a

00:07:52,080 --> 00:07:55,280
virtual ip and all of those

00:07:53,840 --> 00:07:57,440
take some time as well it takes over one

00:07:55,280 --> 00:07:58,000
to two weeks same with the network

00:07:57,440 --> 00:07:59,759
firewall

00:07:58,000 --> 00:08:01,360
and the router each of these take about

00:07:59,759 --> 00:08:03,599
one to two weeks

00:08:01,360 --> 00:08:04,879
and in case of ddos because it's you're

00:08:03,599 --> 00:08:06,879
working with

00:08:04,879 --> 00:08:08,000
with with the component that is outside

00:08:06,879 --> 00:08:10,240
your data center

00:08:08,000 --> 00:08:12,240
which is not which is not doesn't have

00:08:10,240 --> 00:08:14,080
uh it does it's not uh

00:08:12,240 --> 00:08:15,599
it's not modern in terms of having all

00:08:14,080 --> 00:08:18,879
of these uh

00:08:15,599 --> 00:08:21,840
uh uh um click to turn it on um

00:08:18,879 --> 00:08:22,639
and uh and and configure easily and and

00:08:21,840 --> 00:08:25,599
quickly or

00:08:22,639 --> 00:08:26,960
doing it using code uh it takes longer

00:08:25,599 --> 00:08:28,879
so it takes about two to three weeks to

00:08:26,960 --> 00:08:32,000
actually configure detox as well

00:08:28,879 --> 00:08:35,519
so the total time that is taken by

00:08:32,000 --> 00:08:38,719
this app is to deliver the app

00:08:35,519 --> 00:08:41,200
is about seven to twelve weeks

00:08:38,719 --> 00:08:42,080
to and in this case all we're doing is

00:08:41,200 --> 00:08:46,000
we're delivering

00:08:42,080 --> 00:08:47,680
this uh the api publicly

00:08:46,000 --> 00:08:49,279
now let's take an example of how long

00:08:47,680 --> 00:08:52,480
does it take to deliver

00:08:49,279 --> 00:08:53,040
the app privately which means i have an

00:08:52,480 --> 00:08:56,080
app

00:08:53,040 --> 00:08:59,200
i have an api and i only want

00:08:56,080 --> 00:09:01,680
uh either my

00:08:59,200 --> 00:09:02,480
uh my partner app which is sitting in

00:09:01,680 --> 00:09:06,160
another

00:09:02,480 --> 00:09:10,160
another cloud to access it or um

00:09:06,160 --> 00:09:13,120
or um uh or my partner

00:09:10,160 --> 00:09:15,279
customer um or my business partner to

00:09:13,120 --> 00:09:16,399
access the app privately in their own

00:09:15,279 --> 00:09:19,760
data center

00:09:16,399 --> 00:09:23,760
so say i have a app here in um

00:09:19,760 --> 00:09:26,399
um in the in my private data center

00:09:23,760 --> 00:09:27,440
i want uh this app to talk to another

00:09:26,399 --> 00:09:29,920
app which is sitting

00:09:27,440 --> 00:09:31,519
in the public cloud and i only want this

00:09:29,920 --> 00:09:32,560
app to talk with this app i don't want

00:09:31,519 --> 00:09:35,279
this app to be

00:09:32,560 --> 00:09:36,320
or api to be exposed publicly on the

00:09:35,279 --> 00:09:37,920
internet

00:09:36,320 --> 00:09:39,600
so in order to do that all the other

00:09:37,920 --> 00:09:41,360
components remain the same

00:09:39,600 --> 00:09:42,800
in addition what you need to do is you

00:09:41,360 --> 00:09:45,120
need to actually have

00:09:42,800 --> 00:09:46,080
a private connectivity link between your

00:09:45,120 --> 00:09:48,880
private data center

00:09:46,080 --> 00:09:50,000
and your public cloud in addition you

00:09:48,880 --> 00:09:52,240
also need to have

00:09:50,000 --> 00:09:53,200
a vpn so that these two can be in the

00:09:52,240 --> 00:09:54,800
same network

00:09:53,200 --> 00:09:56,800
and you also need to have this private

00:09:54,800 --> 00:09:57,279
link which could be for example did it

00:09:56,800 --> 00:10:00,240
connect

00:09:57,279 --> 00:10:02,000
or express route or uh or essentially

00:10:00,240 --> 00:10:03,519
any any any private layer to

00:10:02,000 --> 00:10:05,360
connectivity between the two

00:10:03,519 --> 00:10:07,200
right so you could either do vpn or the

00:10:05,360 --> 00:10:08,880
internet you can have a private link and

00:10:07,200 --> 00:10:10,800
then do a vpn on top of it

00:10:08,880 --> 00:10:12,079
and there are multiple architectures but

00:10:10,800 --> 00:10:14,240
all of this

00:10:12,079 --> 00:10:16,160
actually takes an additional three to

00:10:14,240 --> 00:10:18,880
four weeks so to deliver

00:10:16,160 --> 00:10:21,839
an app or api privately it takes about

00:10:18,880 --> 00:10:21,839
9-15 weeks

00:10:25,680 --> 00:10:32,640
now if you look at this why does it take

00:10:28,720 --> 00:10:36,240
so long to deliver uh

00:10:32,640 --> 00:10:39,120
an app and is this right for

00:10:36,240 --> 00:10:40,160
a modern app the developer is sitting

00:10:39,120 --> 00:10:42,640
there going

00:10:40,160 --> 00:10:44,320
i've already i'm gaining my efficiency

00:10:42,640 --> 00:10:46,480
i'm actually going faster i'm actually

00:10:44,320 --> 00:10:47,920
adopting new architectures

00:10:46,480 --> 00:10:49,920
but you're telling me that all of that

00:10:47,920 --> 00:10:53,120
efficiency is negated

00:10:49,920 --> 00:10:56,640
because of the existing mechanisms

00:10:53,120 --> 00:10:57,440
of delivering an app what is the right

00:10:56,640 --> 00:11:00,079
approach

00:10:57,440 --> 00:11:01,920
that developers devops as well as

00:11:00,079 --> 00:11:03,040
network and i.t and infrastructure and

00:11:01,920 --> 00:11:05,920
operations team

00:11:03,040 --> 00:11:07,360
should look for when your developer is

00:11:05,920 --> 00:11:11,680
going to use

00:11:07,360 --> 00:11:15,279
modern apps we call that approach

00:11:11,680 --> 00:11:18,880
a distributed cloud approach

00:11:15,279 --> 00:11:21,279
and the key differences

00:11:18,880 --> 00:11:22,720
between a distributed cloud approach and

00:11:21,279 --> 00:11:26,560
the current approach

00:11:22,720 --> 00:11:29,680
is what i'm describing in the slide

00:11:26,560 --> 00:11:30,320
the first thing that you need when you

00:11:29,680 --> 00:11:33,680
are

00:11:30,320 --> 00:11:35,920
delivering modern apps is you cannot

00:11:33,680 --> 00:11:39,360
work with multiple point products

00:11:35,920 --> 00:11:43,600
as i said the app delivery is now

00:11:39,360 --> 00:11:46,000
the application creation is a continuous

00:11:43,600 --> 00:11:46,880
process right everyone's trying to move

00:11:46,000 --> 00:11:49,200
faster

00:11:46,880 --> 00:11:49,920
if you have multiple point products and

00:11:49,200 --> 00:11:52,800
silos

00:11:49,920 --> 00:11:55,040
where you have to go one after the other

00:11:52,800 --> 00:11:57,200
using support tickets to say please

00:11:55,040 --> 00:11:59,279
issue me an ip address please open this

00:11:57,200 --> 00:12:01,760
port please configure the ip address

00:11:59,279 --> 00:12:02,880
please configure a rule a network

00:12:01,760 --> 00:12:05,279
firewall rule

00:12:02,880 --> 00:12:06,880
for this ip address oh by the way my app

00:12:05,279 --> 00:12:09,120
died came back up

00:12:06,880 --> 00:12:10,800
and everything changed again please do a

00:12:09,120 --> 00:12:12,800
new ip address and so forth

00:12:10,800 --> 00:12:14,560
it will not work in a modern arm

00:12:12,800 --> 00:12:15,519
approach so you cannot have multiple

00:12:14,560 --> 00:12:17,760
point products

00:12:15,519 --> 00:12:18,800
you need essentially an integrated stack

00:12:17,760 --> 00:12:21,040
of these

00:12:18,800 --> 00:12:22,320
application delivery components which

00:12:21,040 --> 00:12:25,839
can which can

00:12:22,320 --> 00:12:29,040
move which can move fast and nimbly

00:12:25,839 --> 00:12:32,560
uh in response to changes

00:12:29,040 --> 00:12:35,200
in the apps and the apis because these

00:12:32,560 --> 00:12:38,959
are continuously changing

00:12:35,200 --> 00:12:40,880
the second thing is the location

00:12:38,959 --> 00:12:43,040
of the app is no longer just one

00:12:40,880 --> 00:12:46,160
location one data center it's actually

00:12:43,040 --> 00:12:50,160
multiple locations it is data center

00:12:46,160 --> 00:12:53,440
uh a public cloud a network cloud

00:12:50,160 --> 00:12:54,880
maybe in the edge so you need the same

00:12:53,440 --> 00:12:57,440
infrastructure components

00:12:54,880 --> 00:12:59,680
everywhere wherever you want to

00:12:57,440 --> 00:13:01,680
distribute your application

00:12:59,680 --> 00:13:03,760
so the number of places where you need

00:13:01,680 --> 00:13:04,880
to manage these

00:13:03,760 --> 00:13:07,360
these different infrastructure

00:13:04,880 --> 00:13:07,839
components is increasing it's not just

00:13:07,360 --> 00:13:10,959
one

00:13:07,839 --> 00:13:12,480
is actually multiple and therefore an

00:13:10,959 --> 00:13:14,160
appliance based model where you're

00:13:12,480 --> 00:13:16,880
managing each appliance

00:13:14,160 --> 00:13:18,240
one by one will no longer scale because

00:13:16,880 --> 00:13:19,600
now you're talking about deploying in

00:13:18,240 --> 00:13:21,680
multiple regions

00:13:19,600 --> 00:13:23,360
multiple availability zones multiple

00:13:21,680 --> 00:13:26,639
clouds multiple

00:13:23,360 --> 00:13:30,480
places in the network both the

00:13:26,639 --> 00:13:32,320
cloud network edge and in case of edge

00:13:30,480 --> 00:13:33,519
multiple thousands of edges so you

00:13:32,320 --> 00:13:34,800
cannot scale this using an

00:13:33,519 --> 00:13:38,160
appliance-based model

00:13:34,800 --> 00:13:40,079
you need a distributed fleet

00:13:38,160 --> 00:13:42,320
operations model where your manager's

00:13:40,079 --> 00:13:44,639
entire thing is a fleet

00:13:42,320 --> 00:13:45,600
wherein you're creating you're defining

00:13:44,639 --> 00:13:47,600
your intent

00:13:45,600 --> 00:13:49,120
once you define your intent once and say

00:13:47,600 --> 00:13:52,560
this is how it should work

00:13:49,120 --> 00:13:55,440
and and the system should take care of

00:13:52,560 --> 00:13:57,120
of distributing the configuration to all

00:13:55,440 --> 00:14:00,320
these different locations

00:13:57,120 --> 00:14:02,639
where the application exists so you need

00:14:00,320 --> 00:14:05,920
a distributed fleet operation approach

00:14:02,639 --> 00:14:07,680
and to do that the critical component

00:14:05,920 --> 00:14:09,920
which goes and said is you need a

00:14:07,680 --> 00:14:11,279
control plane based management you need

00:14:09,920 --> 00:14:13,279
a control plane

00:14:11,279 --> 00:14:14,639
to distribute the state to distribute

00:14:13,279 --> 00:14:17,680
the reachability

00:14:14,639 --> 00:14:20,880
you cannot rely on a

00:14:17,680 --> 00:14:24,240
management plan approach of of going one

00:14:20,880 --> 00:14:28,560
by one to every appliance

00:14:24,240 --> 00:14:31,519
third thing is once you've configured it

00:14:28,560 --> 00:14:32,880
how do you manage this with seven

00:14:31,519 --> 00:14:35,680
different products you have

00:14:32,880 --> 00:14:36,959
seven different port panes of glass

00:14:35,680 --> 00:14:40,800
where you need to go

00:14:36,959 --> 00:14:45,360
and uh see um

00:14:40,800 --> 00:14:47,839
seven different uh things you cannot

00:14:45,360 --> 00:14:49,120
troubleshoot a problem past because you

00:14:47,839 --> 00:14:50,160
have to go to several different planes

00:14:49,120 --> 00:14:53,199
of class

00:14:50,160 --> 00:14:56,399
you need to also then go to even if you

00:14:53,199 --> 00:14:56,399
take all of the um

00:14:56,959 --> 00:15:01,279
the the metrics the logs put it all in a

00:15:00,399 --> 00:15:04,480
centralized

00:15:01,279 --> 00:15:07,760
system there still isn't a way to

00:15:04,480 --> 00:15:11,760
thread the request together

00:15:07,760 --> 00:15:14,160
from one um tool to the other how do you

00:15:11,760 --> 00:15:17,120
thread a request or how do you uniquely

00:15:14,160 --> 00:15:17,600
create a single pattern of the request

00:15:17,120 --> 00:15:20,240
from

00:15:17,600 --> 00:15:21,920
like from the router all the way to your

00:15:20,240 --> 00:15:24,079
app how do you know what is the key

00:15:21,920 --> 00:15:25,040
to in which you can you can you can

00:15:24,079 --> 00:15:28,000
uniquely join

00:15:25,040 --> 00:15:29,040
all these different tables then the

00:15:28,000 --> 00:15:32,079
fourth thing is

00:15:29,040 --> 00:15:35,199
um the the life cycle

00:15:32,079 --> 00:15:36,880
management of it the current tools are

00:15:35,199 --> 00:15:37,120
operationally complex because they're

00:15:36,880 --> 00:15:39,360
all

00:15:37,120 --> 00:15:40,880
appliance based so you have to now and

00:15:39,360 --> 00:15:43,040
you and that worked fine

00:15:40,880 --> 00:15:44,320
when you had one location two locations

00:15:43,040 --> 00:15:45,600
if you're talking about multiple of

00:15:44,320 --> 00:15:47,839
locations

00:15:45,600 --> 00:15:49,120
it's very hard to do lifecycle

00:15:47,839 --> 00:15:51,920
management of it

00:15:49,120 --> 00:15:53,600
manually you need a full sas based

00:15:51,920 --> 00:15:55,360
operations approach

00:15:53,600 --> 00:15:57,360
with full life cycle management built in

00:15:55,360 --> 00:15:59,440
so you should be fully managed

00:15:57,360 --> 00:16:01,920
and that's what you should look for and

00:15:59,440 --> 00:16:04,240
lastly if you want to scale

00:16:01,920 --> 00:16:06,160
to different locations you cannot have

00:16:04,240 --> 00:16:09,440
the same form factor

00:16:06,160 --> 00:16:12,560
like a hardware or maybe a really thick

00:16:09,440 --> 00:16:14,000
uh virtual machine that that's the uh in

00:16:12,560 --> 00:16:16,000
order to deploy it anywhere

00:16:14,000 --> 00:16:18,320
you need something that is deployable in

00:16:16,000 --> 00:16:21,519
multiple thousands of clusters

00:16:18,320 --> 00:16:24,639
and that is what uh uh

00:16:21,519 --> 00:16:26,240
developers devops network infrastructure

00:16:24,639 --> 00:16:27,440
teams as well as the it teams should

00:16:26,240 --> 00:16:30,720
look for

00:16:27,440 --> 00:16:31,519
when they are considering uh app

00:16:30,720 --> 00:16:36,000
delivery

00:16:31,519 --> 00:16:39,199
for their modern applications

00:16:36,000 --> 00:16:40,000
let's look at once uh now that i've

00:16:39,199 --> 00:16:43,199
shown you

00:16:40,000 --> 00:16:46,160
what what the what are the key tenets of

00:16:43,199 --> 00:16:48,000
a uh distributed cloud approach that

00:16:46,160 --> 00:16:49,360
that the developers and devops network

00:16:48,000 --> 00:16:51,680
options look for

00:16:49,360 --> 00:16:53,759
let's look at how how it will work how

00:16:51,680 --> 00:16:56,240
would you deliver a modern app

00:16:53,759 --> 00:16:57,279
you publicly using this distributed

00:16:56,240 --> 00:16:59,680
cloud approach

00:16:57,279 --> 00:17:00,560
so today if you remember i had there

00:16:59,680 --> 00:17:01,920
were a bunch of

00:17:00,560 --> 00:17:03,839
components over here like the english

00:17:01,920 --> 00:17:06,480
controller vaf

00:17:03,839 --> 00:17:07,600
what you would first do is first you

00:17:06,480 --> 00:17:08,799
would essentially replace those

00:17:07,600 --> 00:17:12,240
components with

00:17:08,799 --> 00:17:14,640
uh with a distributed cloud uh

00:17:12,240 --> 00:17:15,919
architecture you replace it replace so

00:17:14,640 --> 00:17:17,199
maybe you could you could do a new

00:17:15,919 --> 00:17:20,000
application using

00:17:17,199 --> 00:17:22,079
uh uh using this display cloud approach

00:17:20,000 --> 00:17:24,160
you're not getting rid of your

00:17:22,079 --> 00:17:25,520
um of your existing infrastructure

00:17:24,160 --> 00:17:26,720
components for keeping your existing

00:17:25,520 --> 00:17:28,079
infrastructure components

00:17:26,720 --> 00:17:30,000
this disabled cloud approach can

00:17:28,079 --> 00:17:33,120
essentially work over the top of

00:17:30,000 --> 00:17:34,240
that right so the uh so you'll first

00:17:33,120 --> 00:17:35,760
have that

00:17:34,240 --> 00:17:38,000
the second thing is the distributor

00:17:35,760 --> 00:17:41,360
approach should actually have

00:17:38,000 --> 00:17:44,640
its own network where you can advertise

00:17:41,360 --> 00:17:47,760
these applications publicly right

00:17:44,640 --> 00:17:49,520
uh so that this becomes easier

00:17:47,760 --> 00:17:50,880
so the first thing that you should do is

00:17:49,520 --> 00:17:52,320
it should essentially

00:17:50,880 --> 00:17:53,760
you could have deployed your app

00:17:52,320 --> 00:17:55,840
anywhere you could have deployed your

00:17:53,760 --> 00:17:59,120
existing kubernetes cluster or your vm

00:17:55,840 --> 00:18:01,919
or so forth um so it should discover

00:17:59,120 --> 00:18:03,520
what apps have already been deployed

00:18:01,919 --> 00:18:05,600
once it discovers this

00:18:03,520 --> 00:18:06,960
it should have a control plane and again

00:18:05,600 --> 00:18:10,320
this controller is critical

00:18:06,960 --> 00:18:13,360
this control plane is essentially

00:18:10,320 --> 00:18:15,360
advertising application reachability

00:18:13,360 --> 00:18:16,559
it's not describing routing it's not

00:18:15,360 --> 00:18:19,679
just describing

00:18:16,559 --> 00:18:21,600
uh um like you know the the the

00:18:19,679 --> 00:18:23,600
the layer three routing let's see

00:18:21,600 --> 00:18:26,640
describing application layer

00:18:23,600 --> 00:18:30,160
reachability that says to reach api

00:18:26,640 --> 00:18:33,039
one not ip address one but api one

00:18:30,160 --> 00:18:34,640
here's how you reach this api right and

00:18:33,039 --> 00:18:36,559
then it also distributes app

00:18:34,640 --> 00:18:38,240
app health so you need to distribute

00:18:36,559 --> 00:18:40,080
that

00:18:38,240 --> 00:18:41,679
once you once you once you get once

00:18:40,080 --> 00:18:42,720
you've sort of used a control plane the

00:18:41,679 --> 00:18:45,919
next thing is

00:18:42,720 --> 00:18:47,840
you need uh you need to then advertise

00:18:45,919 --> 00:18:49,600
the app so you should advertise the app

00:18:47,840 --> 00:18:51,200
publicly in this case you're advertising

00:18:49,600 --> 00:18:53,120
the app publicly so

00:18:51,200 --> 00:18:54,559
the disabled cloud approach should

00:18:53,120 --> 00:18:57,039
enable the user

00:18:54,559 --> 00:18:58,480
to actually advertise the to choose

00:18:57,039 --> 00:19:00,320
where you want to

00:18:58,480 --> 00:19:01,919
access the app in this case we are

00:19:00,320 --> 00:19:04,480
advertising the app on

00:19:01,919 --> 00:19:06,000
for example a public pop using an

00:19:04,480 --> 00:19:07,840
anycast virtual ip

00:19:06,000 --> 00:19:11,440
this will direct the traffic from the

00:19:07,840 --> 00:19:12,720
users onto here

00:19:11,440 --> 00:19:14,160
then the fourth thing using a

00:19:12,720 --> 00:19:15,919
distributed cloud approach is you should

00:19:14,160 --> 00:19:20,320
then have the ability to

00:19:15,919 --> 00:19:23,520
distribute app delivery functions

00:19:20,320 --> 00:19:25,440
closer to where the data is generated or

00:19:23,520 --> 00:19:27,760
to where the user is in this case for

00:19:25,440 --> 00:19:31,200
example we should have the ability

00:19:27,760 --> 00:19:34,320
to distribute for example um

00:19:31,200 --> 00:19:34,720
ssl offload uh closer to the user this

00:19:34,320 --> 00:19:37,039
way

00:19:34,720 --> 00:19:38,640
you are you're you're improving the

00:19:37,039 --> 00:19:40,160
application performance

00:19:38,640 --> 00:19:42,240
the second thing is you should have the

00:19:40,160 --> 00:19:44,400
ability to distribute

00:19:42,240 --> 00:19:46,080
a web application firewall functions

00:19:44,400 --> 00:19:48,080
closer to the user

00:19:46,080 --> 00:19:49,440
this way you're actually protecting your

00:19:48,080 --> 00:19:51,760
applications

00:19:49,440 --> 00:19:53,840
you are farther away from your data

00:19:51,760 --> 00:19:55,919
centers you're protecting it right here

00:19:53,840 --> 00:19:57,039
and and all the malicious traffic is

00:19:55,919 --> 00:19:59,120
blocked right here

00:19:57,039 --> 00:20:01,120
rather than having a backhaul to your

00:19:59,120 --> 00:20:02,480
data center and being blocked in your

00:20:01,120 --> 00:20:04,320
data center

00:20:02,480 --> 00:20:06,559
right so you should have the ability to

00:20:04,320 --> 00:20:08,640
distribute your different

00:20:06,559 --> 00:20:09,679
uh application delivery components

00:20:08,640 --> 00:20:12,240
closer to

00:20:09,679 --> 00:20:13,679
uh where the data is ended or where the

00:20:12,240 --> 00:20:15,600
user is

00:20:13,679 --> 00:20:17,360
and then lastly in order to make sure

00:20:15,600 --> 00:20:19,120
your performance is good

00:20:17,360 --> 00:20:21,520
you should have a persistent connection

00:20:19,120 --> 00:20:22,080
between from the front end all the way

00:20:21,520 --> 00:20:24,880
to the

00:20:22,080 --> 00:20:26,559
to your origin so so you're not doing

00:20:24,880 --> 00:20:29,440
multiple tls setups

00:20:26,559 --> 00:20:29,440
for your application

00:20:30,080 --> 00:20:37,039
this is what a how you would deliver an

00:20:34,080 --> 00:20:39,440
app publicly using a distributed cloud

00:20:37,039 --> 00:20:39,440
approach

00:20:39,520 --> 00:20:42,559
let's take the same example of

00:20:41,760 --> 00:20:45,600
delivering an

00:20:42,559 --> 00:20:46,640
app in this case privately from one site

00:20:45,600 --> 00:20:48,720
to another site

00:20:46,640 --> 00:20:51,120
using the distributed cloud approach

00:20:48,720 --> 00:20:53,280
again here

00:20:51,120 --> 00:20:54,400
we are saying keep your existing app

00:20:53,280 --> 00:20:57,120
delivery components

00:20:54,400 --> 00:20:57,919
keep it as it is don't don't don't get

00:20:57,120 --> 00:21:00,960
rid of it

00:20:57,919 --> 00:21:03,360
but you deploy a disabled cloud

00:21:00,960 --> 00:21:04,720
application gateway over here and then

00:21:03,360 --> 00:21:08,240
this application gateway

00:21:04,720 --> 00:21:09,760
as i said first it should deliver

00:21:08,240 --> 00:21:11,760
it should discover what apps are

00:21:09,760 --> 00:21:14,000
configured right

00:21:11,760 --> 00:21:14,880
second thing is you need to have a

00:21:14,000 --> 00:21:16,960
global

00:21:14,880 --> 00:21:18,159
you need to have private connectivity

00:21:16,960 --> 00:21:20,880
you should you should look for

00:21:18,159 --> 00:21:21,760
use for solutions that essentially

00:21:20,880 --> 00:21:24,480
incorporate

00:21:21,760 --> 00:21:26,640
private connectivity to all different

00:21:24,480 --> 00:21:27,600
components both your private cloud and

00:21:26,640 --> 00:21:29,520
your public cloud

00:21:27,600 --> 00:21:30,720
so you can have private links with each

00:21:29,520 --> 00:21:32,000
of these

00:21:30,720 --> 00:21:34,080
so that you don't have to set it up

00:21:32,000 --> 00:21:35,919
yourself right the service comes the

00:21:34,080 --> 00:21:37,440
solution comes with that

00:21:35,919 --> 00:21:39,360
and all you're doing here is you're

00:21:37,440 --> 00:21:41,520
discovering your app

00:21:39,360 --> 00:21:44,000
in your control plane you're now

00:21:41,520 --> 00:21:46,960
advertising the app reachability to the

00:21:44,000 --> 00:21:48,640
site where you want the app to be

00:21:46,960 --> 00:21:51,679
consumed from in this case

00:21:48,640 --> 00:21:52,799
we wanted to consume from this side and

00:21:51,679 --> 00:21:56,000
then here

00:21:52,799 --> 00:21:59,200
is where you advertise the app privately

00:21:56,000 --> 00:21:59,840
to that site so this app now is

00:21:59,200 --> 00:22:01,760
reachable

00:21:59,840 --> 00:22:02,960
only from this site so this is done

00:22:01,760 --> 00:22:04,720
using policy

00:22:02,960 --> 00:22:06,240
it's not reachable from the internet so

00:22:04,720 --> 00:22:06,640
you cannot have traffic coming in from

00:22:06,240 --> 00:22:08,480
here

00:22:06,640 --> 00:22:10,559
this will not be allowed or should not

00:22:08,480 --> 00:22:12,880
be allowed by any solution

00:22:10,559 --> 00:22:15,520
that is offering this this app should

00:22:12,880 --> 00:22:17,840
only be reachable from this location

00:22:15,520 --> 00:22:19,039
and now you can choose to distribute

00:22:17,840 --> 00:22:22,640
your app

00:22:19,039 --> 00:22:25,039
delivery functions closer to where the

00:22:22,640 --> 00:22:26,159
traffic is being generated in this case

00:22:25,039 --> 00:22:29,120
you can distribute

00:22:26,159 --> 00:22:30,559
maybe ssl termination or web application

00:22:29,120 --> 00:22:33,200
firewall

00:22:30,559 --> 00:22:34,640
right here so that all traffic malicious

00:22:33,200 --> 00:22:40,159
traffic is blocked over here

00:22:34,640 --> 00:22:43,200
and it's not backhauled to the side

00:22:40,159 --> 00:22:45,039
and then lastly because this is a

00:22:43,200 --> 00:22:46,640
completely private connection this is

00:22:45,039 --> 00:22:48,400
not going over the internet

00:22:46,640 --> 00:22:50,240
this essentially reduces your risk

00:22:48,400 --> 00:22:51,919
profile of the traffic so this is

00:22:50,240 --> 00:22:54,240
completely laid to connection

00:22:51,919 --> 00:22:55,440
it uh you're not exposed to the vagaries

00:22:54,240 --> 00:22:59,679
of the internet

00:22:55,440 --> 00:22:59,679
um such as congestion and so forth

00:23:01,919 --> 00:23:04,960
now let's take a look at what is the

00:23:03,679 --> 00:23:06,880
benefit of

00:23:04,960 --> 00:23:08,640
using this distributed cloud approach

00:23:06,880 --> 00:23:13,600
what is the impact

00:23:08,640 --> 00:23:13,600
on um on the different teams

00:23:14,400 --> 00:23:18,000
if you see these uh if you see the

00:23:16,640 --> 00:23:20,159
distributor approach and

00:23:18,000 --> 00:23:23,280
and actually yaakov will show you how

00:23:20,159 --> 00:23:26,320
long it takes uh we're going from

00:23:23,280 --> 00:23:30,000
order of weeks to order of

00:23:26,320 --> 00:23:32,880
minutes and hours essentially right

00:23:30,000 --> 00:23:36,480
so it's a it's a significant improvement

00:23:32,880 --> 00:23:38,559
in terms of the time taken what that

00:23:36,480 --> 00:23:39,520
mean what that what the er what that

00:23:38,559 --> 00:23:43,120
means for

00:23:39,520 --> 00:23:45,760
uh the for devops is that now

00:23:43,120 --> 00:23:47,279
they can actually deliver new services

00:23:45,760 --> 00:23:50,799
faster they can actually keep up

00:23:47,279 --> 00:23:53,679
with what the developer is is doing

00:23:50,799 --> 00:23:54,640
um and so instead of instead of the app

00:23:53,679 --> 00:23:56,320
that will be taking

00:23:54,640 --> 00:23:58,159
say three months four months which means

00:23:56,320 --> 00:23:59,760
in a given year you can only do like

00:23:58,159 --> 00:24:01,600
three or four services

00:23:59,760 --> 00:24:03,279
you now can actually deliver new

00:24:01,600 --> 00:24:04,000
services almost every week or every

00:24:03,279 --> 00:24:05,600
every

00:24:04,000 --> 00:24:07,279
two weeks right so you can actually

00:24:05,600 --> 00:24:08,799
deliver new services

00:24:07,279 --> 00:24:11,120
faster so you can go from three to

00:24:08,799 --> 00:24:13,440
eleven which means now you're basically

00:24:11,120 --> 00:24:16,960
bringing in more top line revenue

00:24:13,440 --> 00:24:19,600
to the organization right the second

00:24:16,960 --> 00:24:21,520
benefit is that

00:24:19,600 --> 00:24:23,520
with with the different locations such

00:24:21,520 --> 00:24:25,200
as private cloud public cloud network

00:24:23,520 --> 00:24:26,000
and so forth you need to have different

00:24:25,200 --> 00:24:27,919
teams

00:24:26,000 --> 00:24:29,039
to manage each of these different

00:24:27,919 --> 00:24:31,840
locations

00:24:29,039 --> 00:24:32,960
um so in this case so this this uh this

00:24:31,840 --> 00:24:36,880
customer

00:24:32,960 --> 00:24:38,880
um who who uh who went through this

00:24:36,880 --> 00:24:41,279
they actually had a team of 25 with

00:24:38,880 --> 00:24:42,559
almost 15 qa and 10 devops to manage

00:24:41,279 --> 00:24:45,679
these different locations

00:24:42,559 --> 00:24:49,120
and to manage these different pointers

00:24:45,679 --> 00:24:51,279
but now by by using just one point

00:24:49,120 --> 00:24:52,400
by using just one product and in

00:24:51,279 --> 00:24:54,159
different locations

00:24:52,400 --> 00:24:55,440
they can significantly reduce their

00:24:54,159 --> 00:24:57,919
operational team

00:24:55,440 --> 00:24:59,520
from about 25 down to five which saved

00:24:57,919 --> 00:25:00,799
them a significant amount of money as

00:24:59,520 --> 00:25:03,840
well

00:25:00,799 --> 00:25:06,400
and the third component of this

00:25:03,840 --> 00:25:07,279
is that troubleshooting problems this is

00:25:06,400 --> 00:25:10,559
like

00:25:07,279 --> 00:25:13,760
day three um since you have to go to

00:25:10,559 --> 00:25:18,000
300 since you have to go to multiple

00:25:13,760 --> 00:25:19,440
portals it took about five to six hours

00:25:18,000 --> 00:25:22,640
to troubleshoot

00:25:19,440 --> 00:25:25,360
you know every incident by using a

00:25:22,640 --> 00:25:29,200
single pane of glass

00:25:25,360 --> 00:25:32,640
and a single distributed cloud approach

00:25:29,200 --> 00:25:34,159
um they can reduce the um

00:25:32,640 --> 00:25:36,480
the operational time or the

00:25:34,159 --> 00:25:38,880
troubleshooting time from 300 minutes

00:25:36,480 --> 00:25:40,720
down to 15 minutes per incident and this

00:25:38,880 --> 00:25:42,880
saves a significant amount of time so

00:25:40,720 --> 00:25:45,520
that they can focus less on

00:25:42,880 --> 00:25:47,200
troubleshooting problems and more on

00:25:45,520 --> 00:25:49,840
delivering new services

00:25:47,200 --> 00:25:50,400
and more on the top line or focus on the

00:25:49,840 --> 00:25:53,360
more

00:25:50,400 --> 00:25:55,039
high value items rather than focusing on

00:25:53,360 --> 00:25:58,000
infrastructure level components

00:25:55,039 --> 00:25:58,000
that do not add

00:25:58,320 --> 00:26:04,480
business value to their company

00:26:01,360 --> 00:26:06,080
so this is the business impact of going

00:26:04,480 --> 00:26:08,720
with a distributed cloud approach

00:26:06,080 --> 00:26:09,279
compared to the existing multiple point

00:26:08,720 --> 00:26:13,200
products

00:26:09,279 --> 00:26:14,960
siloed approach um

00:26:13,200 --> 00:26:16,240
so i've spoken a lot about this in the

00:26:14,960 --> 00:26:18,400
slides but uh

00:26:16,240 --> 00:26:19,279
i'll hand it over to yakub where he can

00:26:18,400 --> 00:26:21,279
talk about

00:26:19,279 --> 00:26:22,480
uh he can show you some of the disabled

00:26:21,279 --> 00:26:25,840
cloud approaches

00:26:22,480 --> 00:26:27,520
and and how how how easy it would be

00:26:25,840 --> 00:26:29,840
to actually configure using this

00:26:27,520 --> 00:26:29,840
approach

00:26:30,080 --> 00:26:33,679
okay let me share

00:26:34,000 --> 00:26:36,720
my screen

00:26:37,360 --> 00:26:42,799
okay um can you hear me and see the

00:26:40,400 --> 00:26:46,159
slide

00:26:42,799 --> 00:26:49,600
yes okay okay so now

00:26:46,159 --> 00:26:52,559
i uh prepared a short demonstration of

00:26:49,600 --> 00:26:54,000
pranav explained uh so we want to show

00:26:52,559 --> 00:26:57,600
you also some real stuff

00:26:54,000 --> 00:27:00,880
and how how hard it is to do it

00:26:57,600 --> 00:27:04,559
or how easy and

00:27:00,880 --> 00:27:07,520
how it looks so basically

00:27:04,559 --> 00:27:08,799
i decided that i will pick simple up uh

00:27:07,520 --> 00:27:10,559
i didn't want to do

00:27:08,799 --> 00:27:11,840
complex microservice for this

00:27:10,559 --> 00:27:15,039
demonstration

00:27:11,840 --> 00:27:17,279
so i took like common

00:27:15,039 --> 00:27:19,520
application in this case which is

00:27:17,279 --> 00:27:22,640
wordpress and mysql

00:27:19,520 --> 00:27:26,480
and what i have in my demo setup

00:27:22,640 --> 00:27:29,760
is vanilla kubernetes cluster

00:27:26,480 --> 00:27:31,919
running in a virtual machine in private

00:27:29,760 --> 00:27:35,840
data center

00:27:31,919 --> 00:27:39,039
and uh i think i'm using calico

00:27:35,840 --> 00:27:40,159
as a cni plugin so really vanilla manual

00:27:39,039 --> 00:27:44,080
topology and

00:27:40,159 --> 00:27:47,440
two ports one wordpress one mysql

00:27:44,080 --> 00:27:49,840
and uh to do this

00:27:47,440 --> 00:27:51,039
action in a normal world as pranav

00:27:49,840 --> 00:27:54,320
explained

00:27:51,039 --> 00:27:55,760
uh and i have um very good experience

00:27:54,320 --> 00:27:59,600
with this

00:27:55,760 --> 00:28:02,640
that usually this part uh

00:27:59,600 --> 00:28:03,600
is handled by devops people and people

00:28:02,640 --> 00:28:06,000
like me

00:28:03,600 --> 00:28:07,760
which is pretty doable and it can be

00:28:06,000 --> 00:28:11,120
pretty fast so you

00:28:07,760 --> 00:28:14,240
set up vm with kubernetes you deploy

00:28:11,120 --> 00:28:17,520
nginx ingress controller you you will

00:28:14,240 --> 00:28:19,120
use the let's encrypt

00:28:17,520 --> 00:28:20,960
third manager right which will give you

00:28:19,120 --> 00:28:22,240
automatically certificates you can do

00:28:20,960 --> 00:28:26,080
all this stuff

00:28:22,240 --> 00:28:29,520
but then my issue always

00:28:26,080 --> 00:28:33,120
was the left side where

00:28:29,520 --> 00:28:35,120
if you are in big company you need to

00:28:33,120 --> 00:28:36,720
uh create a support ticket for the

00:28:35,120 --> 00:28:39,760
network team and then it

00:28:36,720 --> 00:28:42,000
takes if you are lucky it takes three

00:28:39,760 --> 00:28:43,919
days but it can also take two weeks to

00:28:42,000 --> 00:28:45,279
set up the firewall and all this stuff

00:28:43,919 --> 00:28:48,080
here right

00:28:45,279 --> 00:28:49,200
and it is not very flexible and also

00:28:48,080 --> 00:28:52,320
hard to debug

00:28:49,200 --> 00:28:55,200
i will also show this so to map it

00:28:52,320 --> 00:28:56,880
what you will see in my demo is i will

00:28:55,200 --> 00:29:00,159
basically

00:28:56,880 --> 00:29:02,559
uh will not need left side

00:29:00,159 --> 00:29:03,520
i will focus here and i will have my

00:29:02,559 --> 00:29:05,200
vanilla

00:29:03,520 --> 00:29:07,039
wordpress because most of the people

00:29:05,200 --> 00:29:08,320
today they already have the kubernetes

00:29:07,039 --> 00:29:12,399
running

00:29:08,320 --> 00:29:15,520
and they want to expose

00:29:12,399 --> 00:29:18,399
ddos protection for their

00:29:15,520 --> 00:29:19,679
site and they want to use web

00:29:18,399 --> 00:29:21,200
application firewall

00:29:19,679 --> 00:29:24,080
and they want to have a central

00:29:21,200 --> 00:29:24,080
visibility

00:29:24,480 --> 00:29:28,159
through one console so that is my goal

00:29:27,360 --> 00:29:31,600
in this

00:29:28,159 --> 00:29:32,799
demo so what you will see so here i have

00:29:31,600 --> 00:29:35,279
a private data center

00:29:32,799 --> 00:29:36,559
and this is a volterra global backbone

00:29:35,279 --> 00:29:39,760
with a few

00:29:36,559 --> 00:29:43,600
global pops and distributed anycast

00:29:39,760 --> 00:29:47,200
where i am going to advertise the site

00:29:43,600 --> 00:29:48,960
and here is end user so as a first step

00:29:47,200 --> 00:29:52,880
i will discover the app

00:29:48,960 --> 00:29:55,279
so in my other virtual machine

00:29:52,880 --> 00:29:56,320
i decided that i will run vault mesh as

00:29:55,279 --> 00:29:57,919
a virtual machine

00:29:56,320 --> 00:29:59,760
you can run it as a pot in the

00:29:57,919 --> 00:30:01,840
kubernetes as well but

00:29:59,760 --> 00:30:04,480
you uh in this case i'm running it in

00:30:01,840 --> 00:30:08,000
the separated virtual machine

00:30:04,480 --> 00:30:09,200
i will load the cube config it will auto

00:30:08,000 --> 00:30:13,679
discover

00:30:09,200 --> 00:30:13,679
all the services in this cluster

00:30:13,760 --> 00:30:17,919
then because i have a distributed

00:30:16,159 --> 00:30:20,399
control plane

00:30:17,919 --> 00:30:21,679
i can immediately have a reachability

00:30:20,399 --> 00:30:25,760
anywhere and i can

00:30:21,679 --> 00:30:28,159
expose an application locally globally

00:30:25,760 --> 00:30:29,520
in different data center very easily you

00:30:28,159 --> 00:30:32,960
will see it

00:30:29,520 --> 00:30:36,960
and i'm getting all this for free

00:30:32,960 --> 00:30:41,840
now next step i will advertise it on

00:30:36,960 --> 00:30:44,000
anycast so it will be

00:30:41,840 --> 00:30:46,320
accessible from the closest routable

00:30:44,000 --> 00:30:50,399
point

00:30:46,320 --> 00:30:53,200
and then i will configure ssl offloading

00:30:50,399 --> 00:30:53,600
and web application firewall and we can

00:30:53,200 --> 00:30:56,720
do

00:30:53,600 --> 00:30:59,360
rate limiting or

00:30:56,720 --> 00:31:00,960
service policies for specific asm so

00:30:59,360 --> 00:31:01,840
there are multiple combinations what we

00:31:00,960 --> 00:31:03,919
can do

00:31:01,840 --> 00:31:05,600
and then the user will access this and

00:31:03,919 --> 00:31:08,720
he will

00:31:05,600 --> 00:31:13,200
end up in my private dc on the wordpress

00:31:08,720 --> 00:31:13,200
so now let's let's go ahead and start

00:31:13,360 --> 00:31:21,360
so this is my terminal

00:31:16,880 --> 00:31:21,360
and i really have just

00:31:22,080 --> 00:31:29,440
single note uh vm

00:31:25,600 --> 00:31:32,640
and if we take a look

00:31:29,440 --> 00:31:35,600
i am using calico as a cni plugin

00:31:32,640 --> 00:31:37,919
so it's really like most popular plugin

00:31:35,600 --> 00:31:40,640
what people use so nothing special

00:31:37,919 --> 00:31:43,360
a very simple setup and in default

00:31:40,640 --> 00:31:43,360
namespace

00:31:44,080 --> 00:31:49,840
i deployed wordpress and mysql

00:31:50,000 --> 00:31:54,559
and i'm using uh i created services

00:31:53,440 --> 00:31:57,919
service

00:31:54,559 --> 00:32:00,080
for the wordpress now

00:31:57,919 --> 00:32:01,120
uh let's take a look how we will

00:32:00,080 --> 00:32:04,480
configure

00:32:01,120 --> 00:32:08,799
the vault mesh through console

00:32:04,480 --> 00:32:12,159
so this this is a volt console

00:32:08,799 --> 00:32:13,200
which brings the central view i am based

00:32:12,159 --> 00:32:16,240
in prague

00:32:13,200 --> 00:32:19,279
so i deployed

00:32:16,240 --> 00:32:22,399
voltmesh virtual machine

00:32:19,279 --> 00:32:24,480
in the dc prague site and i i have a

00:32:22,399 --> 00:32:26,960
visibility so i see

00:32:24,480 --> 00:32:29,440
the the health and basic information

00:32:26,960 --> 00:32:32,000
about this about this note

00:32:29,440 --> 00:32:33,679
i i can go inside and see how much how

00:32:32,000 --> 00:32:35,600
much traffic is going through this

00:32:33,679 --> 00:32:37,120
uh through this node so this is like a

00:32:35,600 --> 00:32:41,120
system view

00:32:37,120 --> 00:32:43,120
uh i can see the number of nodes so it's

00:32:41,120 --> 00:32:46,960
a single node

00:32:43,120 --> 00:32:50,399
vm i can read the ip address

00:32:46,960 --> 00:32:52,720
utilization metrics

00:32:50,399 --> 00:32:55,360
from cpu memory so this is like a

00:32:52,720 --> 00:32:59,039
overview

00:32:55,360 --> 00:33:03,039
in in our console we call it site uh and

00:32:59,039 --> 00:33:05,679
my site is uh dc prague now

00:33:03,039 --> 00:33:07,919
to start with the first step i need to

00:33:05,679 --> 00:33:10,159
discover

00:33:07,919 --> 00:33:11,120
wordpress service and all services which

00:33:10,159 --> 00:33:14,320
are there

00:33:11,120 --> 00:33:18,480
so i go to service discovery

00:33:14,320 --> 00:33:22,000
section and in service discovery

00:33:18,480 --> 00:33:25,200
we will create a new config for

00:33:22,000 --> 00:33:27,600
dc prag and we need to say

00:33:25,200 --> 00:33:29,200
where where myself where i want to

00:33:27,600 --> 00:33:31,519
discover

00:33:29,200 --> 00:33:33,279
uh we have concept of virtual side if

00:33:31,519 --> 00:33:36,880
you would like to discover

00:33:33,279 --> 00:33:38,320
from multiple site by single config or i

00:33:36,880 --> 00:33:40,799
can choose the site

00:33:38,320 --> 00:33:41,919
in this case i will say i want to

00:33:40,799 --> 00:33:45,840
discover on my

00:33:41,919 --> 00:33:45,840
prag bc prague

00:33:46,000 --> 00:33:52,399
and i want to discover on local network

00:33:49,360 --> 00:33:55,360
so basically the there is a local

00:33:52,399 --> 00:33:55,600
connectivity between the vault mesh node

00:33:55,360 --> 00:33:58,880
and

00:33:55,600 --> 00:34:02,080
kubernetes cluster now

00:33:58,880 --> 00:34:03,600
today we support console and kubernetes

00:34:02,080 --> 00:34:06,480
i'm using kubernetes so i keep

00:34:03,600 --> 00:34:10,560
kubernetes i do configure

00:34:06,480 --> 00:34:10,560
and now it is asking me to

00:34:10,720 --> 00:34:18,639
provide a cube config cube config

00:34:14,720 --> 00:34:21,119
i can i can either give a plain text

00:34:18,639 --> 00:34:22,639
clip secret or we have mechanism how to

00:34:21,119 --> 00:34:25,679
encrypt the secret

00:34:22,639 --> 00:34:28,000
so it can be decrypt only uh

00:34:25,679 --> 00:34:29,200
in the target location and it cannot be

00:34:28,000 --> 00:34:32,000
decrypted centrally

00:34:29,200 --> 00:34:33,280
in this case i will go with clear secret

00:34:32,000 --> 00:34:36,800
and we need the

00:34:33,280 --> 00:34:39,919
cube config so this is my

00:34:36,800 --> 00:34:43,679
cube config right with the private ip

00:34:39,919 --> 00:34:49,839
where i am sitting so i will just copy

00:34:43,679 --> 00:34:52,480
cube config and i will paste it here

00:34:49,839 --> 00:34:54,399
uh one more option what i what i can

00:34:52,480 --> 00:34:57,599
choose is

00:34:54,399 --> 00:35:00,839
uh if i have a pot isolated

00:34:57,599 --> 00:35:04,000
or if they are reachable so in case of

00:35:00,839 --> 00:35:07,119
calico since what may support bgp ring

00:35:04,000 --> 00:35:10,240
i could even do the bgp ring between

00:35:07,119 --> 00:35:12,960
uh calico route reflectors and

00:35:10,240 --> 00:35:14,800
and my volt mesh but since i did really

00:35:12,960 --> 00:35:16,480
basic calico deployment

00:35:14,800 --> 00:35:18,320
it is using some weak stunning

00:35:16,480 --> 00:35:21,280
encapsulation and i cannot reach the

00:35:18,320 --> 00:35:24,720
bots so i keep bots are isolated

00:35:21,280 --> 00:35:27,440
it means that it will use the node port

00:35:24,720 --> 00:35:29,200
for the service then i could configure

00:35:27,440 --> 00:35:31,920
some other stuff like publishing web

00:35:29,200 --> 00:35:34,640
services but this is not the

00:35:31,920 --> 00:35:36,480
four hours today demo so i can just save

00:35:34,640 --> 00:35:39,280
it

00:35:36,480 --> 00:35:41,440
and if i refresh you can see it

00:35:39,280 --> 00:35:44,640
discovered four services

00:35:41,440 --> 00:35:47,839
and one of the service is

00:35:44,640 --> 00:35:52,560
wordpress default which is matching

00:35:47,839 --> 00:35:52,560
exactly what what we saw in my terminal

00:35:52,960 --> 00:36:00,000
you can see right so this is the

00:35:56,480 --> 00:36:04,560
this is the service and it is the same

00:36:00,000 --> 00:36:08,160
so now i discovered the endpoint

00:36:04,560 --> 00:36:08,160
and it's time to go and

00:36:08,480 --> 00:36:15,920
create uh

00:36:11,880 --> 00:36:17,760
http uh before i create http load

00:36:15,920 --> 00:36:21,200
balancer

00:36:17,760 --> 00:36:24,160
uh i have to configure the origin pool

00:36:21,200 --> 00:36:25,520
because uh wordpress requires special

00:36:24,160 --> 00:36:28,880
route config

00:36:25,520 --> 00:36:30,240
to to be able to work so i will go and

00:36:28,880 --> 00:36:34,320
create origin pool

00:36:30,240 --> 00:36:37,200
which is basically saying where my

00:36:34,320 --> 00:36:38,000
uh wordpress is running where is it

00:36:37,200 --> 00:36:43,119
served

00:36:38,000 --> 00:36:46,240
so we can go and say wordpress

00:36:43,119 --> 00:36:46,240
and it will be

00:36:46,320 --> 00:36:55,599
kubernetes service it will be wordpress

00:36:50,079 --> 00:36:59,760
default site is prag

00:36:55,599 --> 00:37:03,359
i'm discovering it on outside network

00:36:59,760 --> 00:37:06,160
and port port is

00:37:03,359 --> 00:37:06,160
00:37:07,599 --> 00:37:10,880
i can create health checks i can create

00:37:10,000 --> 00:37:13,280
tls

00:37:10,880 --> 00:37:14,720
in this case i'm using insecure on the

00:37:13,280 --> 00:37:18,000
kubernetes so

00:37:14,720 --> 00:37:22,079
we can the services export on port 80

00:37:18,000 --> 00:37:26,160
so i will keep it as this

00:37:22,079 --> 00:37:28,400
now um wordpress requires uh

00:37:26,160 --> 00:37:29,760
route host drive right to be able to

00:37:28,400 --> 00:37:31,359
work so

00:37:29,760 --> 00:37:33,280
what i did before this demo this is

00:37:31,359 --> 00:37:36,560
really wordpress specific

00:37:33,280 --> 00:37:38,560
i created the route object where i will

00:37:36,560 --> 00:37:42,480
just now add the

00:37:38,560 --> 00:37:45,119
at the origin pool so that should be

00:37:42,480 --> 00:37:45,119
easy to do

00:37:48,000 --> 00:37:55,040
okay and it's uh it's actually there

00:37:51,839 --> 00:37:58,079
so we don't need to do anything

00:37:55,040 --> 00:38:00,800
now uh let's create the http operancer

00:37:58,079 --> 00:38:04,640
so to create http or bouncer

00:38:00,800 --> 00:38:08,720
uh we can say wordpress and

00:38:04,640 --> 00:38:09,599
domain so for domain i decided i will

00:38:08,720 --> 00:38:14,400
use the

00:38:09,599 --> 00:38:16,960
delegated domains so what it means

00:38:14,400 --> 00:38:17,440
in the system namespace we have ability

00:38:16,960 --> 00:38:20,000
to

00:38:17,440 --> 00:38:20,960
delegate so this is my domain which i

00:38:20,000 --> 00:38:24,079
own

00:38:20,960 --> 00:38:27,200
app vkts io and

00:38:24,079 --> 00:38:28,720
uh you can delegate it to us and then we

00:38:27,200 --> 00:38:31,200
automatically provide let's encrypt

00:38:28,720 --> 00:38:34,480
certificates and we manage dns records

00:38:31,200 --> 00:38:36,320
it's an optional thing so so before i

00:38:34,480 --> 00:38:38,560
had to create this ns record and

00:38:36,320 --> 00:38:41,760
delegate my domain so now i can create

00:38:38,560 --> 00:38:43,839
any any http or browser and

00:38:41,760 --> 00:38:46,960
automatically i get certificates

00:38:43,839 --> 00:38:49,839
from let's encrypt and everything so the

00:38:46,960 --> 00:38:53,359
way how it is configured is uh

00:38:49,839 --> 00:38:55,760
i can say here if i want

00:38:53,359 --> 00:38:57,520
automatic certificates then it will use

00:38:55,760 --> 00:39:01,680
the delegate domains

00:38:57,520 --> 00:39:03,760
or i can bring my own certificate

00:39:01,680 --> 00:39:05,359
in case that i have my own i can use

00:39:03,760 --> 00:39:08,160
this and upload the

00:39:05,359 --> 00:39:09,520
key insert i will use automatic and the

00:39:08,160 --> 00:39:13,040
domain

00:39:09,520 --> 00:39:18,640
domain will be wordpress.app

00:39:13,040 --> 00:39:23,760
we get this io now i want to have http

00:39:18,640 --> 00:39:26,960
to http redirect to https

00:39:23,760 --> 00:39:30,240
and i will use my

00:39:26,960 --> 00:39:34,640
route config which we

00:39:30,240 --> 00:39:37,280
uh configured so for the route config

00:39:34,640 --> 00:39:40,079
i will just choose the object what uh

00:39:37,280 --> 00:39:43,920
what i had there

00:39:40,079 --> 00:39:46,960
and now the

00:39:43,920 --> 00:39:49,839
almost the last point is

00:39:46,960 --> 00:39:51,040
where i want to advertise the

00:39:49,839 --> 00:39:53,200
configuration

00:39:51,040 --> 00:39:54,160
so in this case we want to advertise it

00:39:53,200 --> 00:39:56,960
on the internet

00:39:54,160 --> 00:39:58,400
so it will be globally available but we

00:39:56,960 --> 00:40:00,480
have other options like you can

00:39:58,400 --> 00:40:03,200
advertise it locally in the cluster

00:40:00,480 --> 00:40:06,000
or in the different specific location in

00:40:03,200 --> 00:40:09,599
this case it will be internet

00:40:06,000 --> 00:40:13,440
and then uh what do you want to also do

00:40:09,599 --> 00:40:17,599
is you want to configure the vaf

00:40:13,440 --> 00:40:18,480
so to configure vaf i can actually i

00:40:17,599 --> 00:40:21,839
have

00:40:18,480 --> 00:40:22,319
two options either i know exactly what i

00:40:21,839 --> 00:40:25,280
want

00:40:22,319 --> 00:40:27,359
and i am someone who understands web

00:40:25,280 --> 00:40:29,040
application firewall very well so i will

00:40:27,359 --> 00:40:32,240
define my own rules

00:40:29,040 --> 00:40:34,160
and reference the rules or i will do the

00:40:32,240 --> 00:40:37,119
buff intent

00:40:34,160 --> 00:40:38,400
uh in this case i want to show you the

00:40:37,119 --> 00:40:41,200
buff intent

00:40:38,400 --> 00:40:42,400
and the way how i will do it is i will

00:40:41,200 --> 00:40:47,599
create

00:40:42,400 --> 00:40:47,599
new off or press

00:40:47,839 --> 00:40:55,520
and i can just simply choose php and

00:40:52,400 --> 00:40:57,680
wordpress and it will

00:40:55,520 --> 00:40:58,800
automatically pre-configure write

00:40:57,680 --> 00:41:00,720
profile for me

00:40:58,800 --> 00:41:02,720
the right application profile what i

00:41:00,720 --> 00:41:06,960
want and

00:41:02,720 --> 00:41:10,880
this is important i can say do i want to

00:41:06,960 --> 00:41:14,400
block attack when it is detected

00:41:10,880 --> 00:41:18,000
or i can raise the alert

00:41:14,400 --> 00:41:20,560
uh i will demonstrate the attack

00:41:18,000 --> 00:41:21,680
so let's do the block and you will see

00:41:20,560 --> 00:41:24,560
how it blocks my

00:41:21,680 --> 00:41:26,319
my my attack when um when we will try it

00:41:24,560 --> 00:41:30,800
from the laptop

00:41:26,319 --> 00:41:34,720
so this is the buff configuration

00:41:30,800 --> 00:41:37,280
and that's it i think now we can just

00:41:34,720 --> 00:41:37,280
save it

00:41:38,160 --> 00:41:43,040
and what will happen is that it will

00:41:40,000 --> 00:41:46,880
start the dns domain verification

00:41:43,040 --> 00:41:50,880
and in a few few minutes

00:41:46,880 --> 00:41:53,839
we should have our uh

00:41:50,880 --> 00:41:55,440
our load balancer ready and we can

00:41:53,839 --> 00:41:58,880
actually try it

00:41:55,440 --> 00:42:02,079
so domain challenge verified

00:41:58,880 --> 00:42:05,119
and in

00:42:02,079 --> 00:42:08,640
in a few secs it's uh

00:42:05,119 --> 00:42:12,480
it should be there certificate valid

00:42:08,640 --> 00:42:13,760
so the wheels is ready uh this is my

00:42:12,480 --> 00:42:17,839
domain

00:42:13,760 --> 00:42:17,839
and we can actually try

00:42:22,880 --> 00:42:28,560
yes and this is my wordpress site so you

00:42:27,119 --> 00:42:31,680
see how quick it was

00:42:28,560 --> 00:42:35,040
it and i have valid certificate

00:42:31,680 --> 00:42:38,079
i have even redirect i should have right

00:42:35,040 --> 00:42:38,480
should redirect me so you can uh you can

00:42:38,079 --> 00:42:43,200
all

00:42:38,480 --> 00:42:46,400
try let me uh

00:42:43,200 --> 00:42:49,200
uh let me see there is a chat window so

00:42:46,400 --> 00:42:51,760
i'm going to send it to everyone

00:42:49,200 --> 00:42:53,680
so you can guys open in chat and you can

00:42:51,760 --> 00:42:56,880
try to open the site

00:42:53,680 --> 00:42:59,839
and we will we will see the some traffic

00:42:56,880 --> 00:43:01,680
so now what i can do is i can start

00:42:59,839 --> 00:43:05,839
generating some traffic

00:43:01,680 --> 00:43:08,480
so it will be

00:43:05,839 --> 00:43:12,240
it will be visible there that we are

00:43:08,480 --> 00:43:15,599
that someone is coming to the site

00:43:12,240 --> 00:43:18,800
so i'm generating the traffic

00:43:15,599 --> 00:43:22,480
uh to the sides uh site is running

00:43:18,800 --> 00:43:25,119
and this is what i've just

00:43:22,480 --> 00:43:26,400
shown you is how hard is to

00:43:25,119 --> 00:43:29,200
configuration so it

00:43:26,400 --> 00:43:30,240
really took like 15 minutes including

00:43:29,200 --> 00:43:34,800
explanation

00:43:30,240 --> 00:43:38,319
and we have configured easily

00:43:34,800 --> 00:43:41,680
wordpress which is running somewhere in

00:43:38,319 --> 00:43:45,760
the private data center uh

00:43:41,680 --> 00:43:47,119
without direct public ip or anything

00:43:45,760 --> 00:43:48,800
it's just sitting somewhere on the

00:43:47,119 --> 00:43:52,720
internet connection and

00:43:48,800 --> 00:43:52,720
that's that's all what is needed

00:43:52,839 --> 00:43:59,680
now uh we can go back

00:43:56,319 --> 00:44:03,599
and we can take a look on

00:43:59,680 --> 00:44:08,720
troubleshooting part and the visibility

00:44:03,599 --> 00:44:08,720
this is important again if you swim

00:44:10,720 --> 00:44:14,079
this is my google home assistant

00:44:18,960 --> 00:44:25,200
okay he goes crazy he started

00:44:22,079 --> 00:44:29,839
playing some music okay uh

00:44:25,200 --> 00:44:31,760
so in normal world uh

00:44:29,839 --> 00:44:33,920
it is very hard to troubleshoot right

00:44:31,760 --> 00:44:34,839
and some and i have a good experience

00:44:33,920 --> 00:44:38,560
that

00:44:34,839 --> 00:44:38,960
uh even to get the latency between all

00:44:38,560 --> 00:44:42,079
these

00:44:38,960 --> 00:44:44,560
places very stacked or locks

00:44:42,079 --> 00:44:46,160
you really need to build the solid

00:44:44,560 --> 00:44:48,079
monitoring

00:44:46,160 --> 00:44:50,000
and logging where you will send all

00:44:48,079 --> 00:44:51,760
those locks and you will have very

00:44:50,000 --> 00:44:54,960
good visibility and it takes time to

00:44:51,760 --> 00:44:57,359
build it and sometimes

00:44:54,960 --> 00:44:58,480
hard problems troubleshooting of heart

00:44:57,359 --> 00:45:01,359
problems

00:44:58,480 --> 00:45:03,280
can take even three hours to figure out

00:45:01,359 --> 00:45:04,880
where the actual problem is right if it

00:45:03,280 --> 00:45:07,040
is on firewall because

00:45:04,880 --> 00:45:07,920
something some ip address is blocked

00:45:07,040 --> 00:45:11,280
there

00:45:07,920 --> 00:45:14,800
or it is in the buff right just tune

00:45:11,280 --> 00:45:17,280
buff for your rules is a

00:45:14,800 --> 00:45:19,280
sometimes complicated exercise to to

00:45:17,280 --> 00:45:22,720
find the right rules

00:45:19,280 --> 00:45:23,200
and it can takes days to even weeks to

00:45:22,720 --> 00:45:25,520
tune

00:45:23,200 --> 00:45:26,319
all the various things especially when

00:45:25,520 --> 00:45:28,880
you have some

00:45:26,319 --> 00:45:30,720
custom application so all this is very

00:45:28,880 --> 00:45:33,839
hard to do

00:45:30,720 --> 00:45:35,440
and uh i'm not saying that with this

00:45:33,839 --> 00:45:38,880
it's easy

00:45:35,440 --> 00:45:41,920
uh it is also hard but

00:45:38,880 --> 00:45:44,640
you have everything in central place so

00:45:41,920 --> 00:45:45,839
it's not about uh that you don't need to

00:45:44,640 --> 00:45:48,000
do troubleshooting and this just

00:45:45,839 --> 00:45:51,680
magically work always

00:45:48,000 --> 00:45:52,960
no but you have a single page where you

00:45:51,680 --> 00:45:55,280
can see all the logs

00:45:52,960 --> 00:45:56,960
all the metrics latency between

00:45:55,280 --> 00:45:59,680
locations

00:45:56,960 --> 00:46:00,640
and all this information are there you

00:45:59,680 --> 00:46:04,079
can integrate

00:46:00,640 --> 00:46:05,440
uh not do integration with the

00:46:04,079 --> 00:46:08,480
notifications to your

00:46:05,440 --> 00:46:11,839
external systems you can send locks

00:46:08,480 --> 00:46:13,680
to your uh splunk or

00:46:11,839 --> 00:46:15,520
or data dock so we have all these

00:46:13,680 --> 00:46:19,200
integrations

00:46:15,520 --> 00:46:20,480
and it is much faster to debug such a

00:46:19,200 --> 00:46:24,240
problem

00:46:20,480 --> 00:46:26,880
uh to show you what i mean is let's

00:46:24,240 --> 00:46:28,000
do the quick overview so you see what

00:46:26,880 --> 00:46:30,079
data

00:46:28,000 --> 00:46:31,839
we are getting and how how looks the

00:46:30,079 --> 00:46:35,680
visibility part

00:46:31,839 --> 00:46:38,160
so you saw the config part now

00:46:35,680 --> 00:46:40,480
we can actually take a look on the

00:46:38,160 --> 00:46:43,520
application traffic

00:46:40,480 --> 00:46:44,880
and on the application traffic we can

00:46:43,520 --> 00:46:47,760
see that now

00:46:44,880 --> 00:46:48,560
from the public network traffic is

00:46:47,760 --> 00:46:50,319
flowing

00:46:48,560 --> 00:46:52,480
looks like people started opening the

00:46:50,319 --> 00:46:55,760
site because it's really flowing

00:46:52,480 --> 00:46:58,480
from singapore san jose

00:46:55,760 --> 00:46:59,920
london amsterdam and paris so this is

00:46:58,480 --> 00:47:03,599
all our pops and then it

00:46:59,920 --> 00:47:05,920
goes to dc prague so we see

00:47:03,599 --> 00:47:07,280
that literally from all the places it is

00:47:05,920 --> 00:47:09,920
coming right now

00:47:07,280 --> 00:47:10,960
so this is like a application traffic

00:47:09,920 --> 00:47:14,160
visibility

00:47:10,960 --> 00:47:17,680
now i'm going to go

00:47:14,160 --> 00:47:21,599
inside the http browser itself

00:47:17,680 --> 00:47:24,640
and i can go on wordpress

00:47:21,599 --> 00:47:29,200
now and what we see here this is pretty

00:47:24,640 --> 00:47:32,640
nice because the average latency

00:47:29,200 --> 00:47:35,760
between client and our

00:47:32,640 --> 00:47:39,280
uh global backbone load balancer

00:47:35,760 --> 00:47:43,680
is 25 millisecond but then it takes

00:47:39,280 --> 00:47:46,400
140 milliseconds to reach actual

00:47:43,680 --> 00:47:47,760
uh volt mesh via virtual machine running

00:47:46,400 --> 00:47:49,599
in the dc and then less than one

00:47:47,760 --> 00:47:51,280
millisecond to go to the application so

00:47:49,599 --> 00:47:53,520
this is like total upstream

00:47:51,280 --> 00:47:54,480
so you can see here we see that we have

00:47:53,520 --> 00:47:57,440
total

00:47:54,480 --> 00:47:58,559
14 unique visitors in last five minutes

00:47:57,440 --> 00:48:00,559
i can see

00:47:58,559 --> 00:48:02,079
which operation system they are using

00:48:00,559 --> 00:48:04,800
top clients right so

00:48:02,079 --> 00:48:07,280
top is paris this is probably my watch

00:48:04,800 --> 00:48:11,200
well my generator i am reaching paris

00:48:07,280 --> 00:48:12,480
browser type tls top asn right so i have

00:48:11,200 --> 00:48:16,400
all this information

00:48:12,480 --> 00:48:18,480
now i can read the metrics

00:48:16,400 --> 00:48:21,359
so i can see the request rate and right

00:48:18,480 --> 00:48:24,720
now it's a one request per second

00:48:21,359 --> 00:48:25,760
uh in last hour uh because we just

00:48:24,720 --> 00:48:28,559
launched it

00:48:25,760 --> 00:48:29,839
uh i can see the traffic so majority

00:48:28,559 --> 00:48:33,280
traffic goes to

00:48:29,839 --> 00:48:37,760
paris and san jose

00:48:33,280 --> 00:48:40,960
now uh the interesting part

00:48:37,760 --> 00:48:44,400
is the is request so right

00:48:40,960 --> 00:48:47,599
here i'm getting sampled request rate

00:48:44,400 --> 00:48:49,040
and i can filter by code i can filter it

00:48:47,599 --> 00:48:53,839
by country

00:48:49,040 --> 00:48:56,960
by asn top source ips so this is my ip

00:48:53,839 --> 00:48:58,800
fingerprints right and let's take a look

00:48:56,960 --> 00:49:02,720
on some us

00:48:58,800 --> 00:49:05,920
requests which are coming and

00:49:02,720 --> 00:49:08,720
you should be able to see

00:49:05,920 --> 00:49:11,200
so here is one of the client ip and we

00:49:08,720 --> 00:49:14,079
can take a look

00:49:11,200 --> 00:49:15,440
we see the latency for this particular

00:49:14,079 --> 00:49:20,000
client

00:49:15,440 --> 00:49:23,760
and duration type of os

00:49:20,000 --> 00:49:26,880
and also we should see the country

00:49:23,760 --> 00:49:30,000
which instantly reach right asn and city

00:49:26,880 --> 00:49:33,040
right so this is the basic info

00:49:30,000 --> 00:49:36,079
what i am getting from every every

00:49:33,040 --> 00:49:36,480
request very easily i can filter out 405

00:49:36,079 --> 00:49:39,520
and

00:49:36,480 --> 00:49:43,040
keep just 200 right and easily i can

00:49:39,520 --> 00:49:46,079
uh navigate and see

00:49:43,040 --> 00:49:48,160
all the requests which are coming now we

00:49:46,079 --> 00:49:49,359
have more features like api endpoint

00:49:48,160 --> 00:49:51,920
like machine learning

00:49:49,359 --> 00:49:52,880
but that would have to run for more than

00:49:51,920 --> 00:49:54,880
one hour

00:49:52,880 --> 00:49:56,240
to get some to learn some stuff and

00:49:54,880 --> 00:49:59,839
display it

00:49:56,240 --> 00:50:02,640
but uh now let's take a look on the

00:49:59,839 --> 00:50:05,040
on the application firewall and security

00:50:02,640 --> 00:50:05,040
events

00:50:05,760 --> 00:50:14,400
uh so what i'm going to do now is

00:50:09,440 --> 00:50:14,400
i'm going to generate

00:50:14,720 --> 00:50:19,040
attack or attack so wordpress has some

00:50:18,000 --> 00:50:22,720
open source tool

00:50:19,040 --> 00:50:25,280
called wordpress scan and

00:50:22,720 --> 00:50:26,800
you can run it and it can tell you what

00:50:25,280 --> 00:50:31,040
version is there

00:50:26,800 --> 00:50:34,079
what is available to do and potentially

00:50:31,040 --> 00:50:35,119
you can try to hack the system so let's

00:50:34,079 --> 00:50:38,559
see right

00:50:35,119 --> 00:50:41,359
so i will run basic enumerate

00:50:38,559 --> 00:50:42,640
and you can see that the basic just the

00:50:41,359 --> 00:50:46,319
basic one

00:50:42,640 --> 00:50:49,280
immediately got imported

00:50:46,319 --> 00:50:50,880
with 403 and it's saying this is my

00:50:49,280 --> 00:50:54,000
video off

00:50:50,880 --> 00:50:57,040
so basically our buff is blocking

00:50:54,000 --> 00:51:00,880
the traffic so we don't see it

00:50:57,040 --> 00:51:03,680
so we can try to send a random

00:51:00,880 --> 00:51:03,680
user agent

00:51:05,680 --> 00:51:11,920
and now uh this will go through

00:51:09,040 --> 00:51:14,559
uh it will not discover much but we

00:51:11,920 --> 00:51:18,319
should actually see the attempt

00:51:14,559 --> 00:51:20,160
to dump sql and try some basic wordpress

00:51:18,319 --> 00:51:23,280
url which usually

00:51:20,160 --> 00:51:26,880
people trying to hack and and attack

00:51:23,280 --> 00:51:29,920
and uh we should see the alerts

00:51:26,880 --> 00:51:32,640
immediately and it should be blocked so

00:51:29,920 --> 00:51:37,839
let's let's let's take a look

00:51:32,640 --> 00:51:37,839
so if we if we refresh it

00:51:38,880 --> 00:51:42,800
let's put the last one hour

00:51:44,319 --> 00:51:52,079
and in a few seconds

00:51:48,800 --> 00:51:55,520
we should start seeing the alerts

00:51:52,079 --> 00:51:58,559
see so now actually

00:51:55,520 --> 00:51:59,599
uh this is me right so there is already

00:51:58,559 --> 00:52:01,520
a

00:51:59,599 --> 00:52:04,319
security event so we can see the

00:52:01,520 --> 00:52:07,760
security event which

00:52:04,319 --> 00:52:11,839
which happened just now and

00:52:07,760 --> 00:52:15,040
you can see that rough mode block it

00:52:11,839 --> 00:52:15,599
uh it hit two counts right and this is

00:52:15,040 --> 00:52:19,359
the

00:52:15,599 --> 00:52:22,559
rule id which was hit so

00:52:19,359 --> 00:52:24,400
this rule id is sometimes also used when

00:52:22,559 --> 00:52:27,119
you want to

00:52:24,400 --> 00:52:29,200
uh disable some rule ids because it's

00:52:27,119 --> 00:52:31,119
you are getting false positive blocks

00:52:29,200 --> 00:52:32,800
so then you can you immediately see

00:52:31,119 --> 00:52:36,559
which rule id blocked

00:52:32,800 --> 00:52:39,359
your access and you have information on

00:52:36,559 --> 00:52:40,559
what uh that it was actually a wordpress

00:52:39,359 --> 00:52:43,680
scan agent

00:52:40,559 --> 00:52:46,880
who who tried to scan the site

00:52:43,680 --> 00:52:50,160
if we refresh we should see the

00:52:46,880 --> 00:52:52,240
more alerts coming from the second run

00:52:50,160 --> 00:52:53,280
right so this was this was uh this was

00:52:52,240 --> 00:52:57,119
other one where

00:52:53,280 --> 00:53:00,000
it was trying to do dump sql

00:52:57,119 --> 00:53:03,440
on on the upload so i immediately see it

00:53:00,000 --> 00:53:03,440
and in the up firewall

00:53:03,520 --> 00:53:09,680
you see that last five security events

00:53:06,800 --> 00:53:11,599
they are coming here and you can

00:53:09,680 --> 00:53:14,640
actually filter it bob

00:53:11,599 --> 00:53:19,920
filter it out and

00:53:14,640 --> 00:53:24,079
easily see what is happening

00:53:19,920 --> 00:53:24,079
so this is a simple example

00:53:24,319 --> 00:53:31,400
where i just show you how in

00:53:27,520 --> 00:53:34,559
literally 15 minutes setup like globally

00:53:31,400 --> 00:53:36,160
distributed uh application running in

00:53:34,559 --> 00:53:41,040
your dc

00:53:36,160 --> 00:53:41,040
with laugh and videos protection and

00:53:41,520 --> 00:53:44,319
very easy to do

00:53:44,640 --> 00:53:48,400
so now i'm going to pass it back to

00:53:47,280 --> 00:53:57,680
pranav

00:53:48,400 --> 00:54:00,000
for the final slide

00:53:57,680 --> 00:54:00,000
um

00:54:01,599 --> 00:54:06,319
yeah so um i think we can open it up for

00:54:05,040 --> 00:54:08,880
questions since we are

00:54:06,319 --> 00:54:09,599
almost at the top of the hour um i can

00:54:08,880 --> 00:54:11,839
open it up for

00:54:09,599 --> 00:54:14,160
questions for any questions that people

00:54:11,839 --> 00:54:14,160
may have

00:54:20,000 --> 00:54:24,400
as a reminder you can just add your

00:54:21,920 --> 00:54:25,599
questions to the q a box at the bottom

00:54:24,400 --> 00:54:29,040
of the screen and

00:54:25,599 --> 00:54:31,040
we do have about three minutes left

00:54:29,040 --> 00:54:32,319
yeah so there was one question that was

00:54:31,040 --> 00:54:35,440
interesting um

00:54:32,319 --> 00:54:38,240
the i think the question was uh

00:54:35,440 --> 00:54:42,000
do apps need to be modified in order to

00:54:38,240 --> 00:54:44,880
use this distributed

00:54:42,000 --> 00:54:46,079
approach and uh i think and the chat but

00:54:44,880 --> 00:54:47,280
let me just answer for the benefit very

00:54:46,079 --> 00:54:48,079
well the apps don't need to be modified

00:54:47,280 --> 00:54:50,880
at all right

00:54:48,079 --> 00:54:52,160
the apps are what you want to develop um

00:54:50,880 --> 00:54:54,400
you can tell the apps in any language

00:54:52,160 --> 00:54:56,480
and it could be anywhere containers vms

00:54:54,400 --> 00:54:57,599
anywhere what we do as i said is we

00:54:56,480 --> 00:54:59,200
discover the app

00:54:57,599 --> 00:55:01,520
and you discover the app using either

00:54:59,200 --> 00:55:05,119
dns based mechanisms using

00:55:01,520 --> 00:55:06,559
using the kubernetes discovery using

00:55:05,119 --> 00:55:08,240
using console discovery different

00:55:06,559 --> 00:55:10,559
discovery mechanisms

00:55:08,240 --> 00:55:12,000
and you discover the app and once you

00:55:10,559 --> 00:55:13,599
discover the app then your

00:55:12,000 --> 00:55:15,680
our controller is then taking the app

00:55:13,599 --> 00:55:16,319
and advertising the reachability of the

00:55:15,680 --> 00:55:18,079
app

00:55:16,319 --> 00:55:19,520
over to different locations both public

00:55:18,079 --> 00:55:21,599
as well as private

00:55:19,520 --> 00:55:23,040
and then any changes to our control to

00:55:21,599 --> 00:55:23,760
the control plane the controller is

00:55:23,040 --> 00:55:25,440
essentially controlled

00:55:23,760 --> 00:55:27,359
so that doesn't affect your app the

00:55:25,440 --> 00:55:29,440
developer doesn't have to change the app

00:55:27,359 --> 00:55:31,839
in order to account for uh just a

00:55:29,440 --> 00:55:31,839
workload

00:55:32,160 --> 00:55:39,440
i think that was one question nice so um

00:55:36,079 --> 00:55:39,440
was there any anything else

00:55:40,640 --> 00:55:44,000
yeah there were no other questions that

00:55:41,680 --> 00:55:48,160
i could see in the chat um uh

00:55:44,000 --> 00:55:50,799
is it is there any other question um

00:55:48,160 --> 00:55:51,680
is there any other question that was

00:55:50,799 --> 00:55:54,960
answered

00:55:51,680 --> 00:55:54,960
that was asked earlier um

00:55:55,280 --> 00:55:57,760
justin

00:56:01,359 --> 00:56:06,559
um let's see here what is the advantage

00:56:04,880 --> 00:56:09,599
of distributing

00:56:06,559 --> 00:56:10,319
load balancing and ssl termination to

00:56:09,599 --> 00:56:12,640
the network

00:56:10,319 --> 00:56:12,640
edge

00:56:14,160 --> 00:56:17,440
yeah one of the uh one of the big

00:56:16,559 --> 00:56:20,799
advantages

00:56:17,440 --> 00:56:21,520
um that of distributing uh application

00:56:20,799 --> 00:56:25,119
delivery

00:56:21,520 --> 00:56:27,599
functions uh to the network edge is that

00:56:25,119 --> 00:56:29,680
firstly these functions take up our

00:56:27,599 --> 00:56:30,799
performance are compute intensive so

00:56:29,680 --> 00:56:34,000
they take up a lot of

00:56:30,799 --> 00:56:35,599
uh cpu cycles such as uh ssl termination

00:56:34,000 --> 00:56:37,839
decrypting their ssl traffic takes up a

00:56:35,599 --> 00:56:41,359
lot of cpu cycles so distributing it

00:56:37,839 --> 00:56:44,559
out away from a data center conserve

00:56:41,359 --> 00:56:46,880
cpu cycles on your data center on your

00:56:44,559 --> 00:56:47,839
public cloud so that's once reduces your

00:56:46,880 --> 00:56:49,760
cost

00:56:47,839 --> 00:56:52,400
but the more important thing is by

00:56:49,760 --> 00:56:54,720
distributing the application

00:56:52,400 --> 00:56:55,520
delivery function closer to where the

00:56:54,720 --> 00:56:57,200
user is

00:56:55,520 --> 00:56:59,359
actually improves application

00:56:57,200 --> 00:57:02,720
performance because to set up

00:56:59,359 --> 00:57:05,760
a secure connection from the client to

00:57:02,720 --> 00:57:09,760
the actual app the server

00:57:05,760 --> 00:57:11,920
is a is like a six message dance

00:57:09,760 --> 00:57:13,119
and doing that over long distances where

00:57:11,920 --> 00:57:15,359
the latency is high

00:57:13,119 --> 00:57:16,799
actually reduces performance so if you

00:57:15,359 --> 00:57:18,400
do that setup

00:57:16,799 --> 00:57:19,920
closer to where the application is and

00:57:18,400 --> 00:57:23,119
then you have a persistent connection

00:57:19,920 --> 00:57:24,000
from the network edge to the origin

00:57:23,119 --> 00:57:25,599
server

00:57:24,000 --> 00:57:27,440
this way your performance all your

00:57:25,599 --> 00:57:30,559
chattiness is is you know in

00:57:27,440 --> 00:57:32,079
country for example and then the over

00:57:30,559 --> 00:57:33,280
the long haul you're not you're not

00:57:32,079 --> 00:57:36,640
doing this constant

00:57:33,280 --> 00:57:38,720
uh um um uh uh

00:57:36,640 --> 00:57:40,480
a handshake which actually improves

00:57:38,720 --> 00:57:41,599
application performance so distributing

00:57:40,480 --> 00:57:44,160
application functions

00:57:41,599 --> 00:57:45,760
a wave and closer to the user improves

00:57:44,160 --> 00:57:49,440
application performance

00:57:45,760 --> 00:57:51,839
uh reduces the risk

00:57:49,440 --> 00:57:52,880
because all of the attacks are blocked

00:57:51,839 --> 00:57:56,880
to the edge

00:57:52,880 --> 00:57:56,880
and reduces your cost

00:57:58,000 --> 00:58:04,160
okay thank you pranav um

00:58:01,280 --> 00:58:05,440
we unfortunately have to wrap it up now

00:58:04,160 --> 00:58:08,559
any closing

00:58:05,440 --> 00:58:10,319
closing comments

00:58:08,559 --> 00:58:12,160
uh no thank you for everyone for joining

00:58:10,319 --> 00:58:13,839
uh if you have any questions uh feel

00:58:12,160 --> 00:58:16,960
free to reach out to

00:58:13,839 --> 00:58:20,559
uh to uh to jakub or myself uh we

00:58:16,960 --> 00:58:24,000
are on twitter on linkedin on um

00:58:20,559 --> 00:58:25,599
on on email and we're happy to answer

00:58:24,000 --> 00:58:26,480
any of your questions so this is this is

00:58:25,599 --> 00:58:28,000
our handles

00:58:26,480 --> 00:58:30,640
uh feel free to reach out and we can

00:58:28,000 --> 00:58:33,040
answer any questions offline too

00:58:30,640 --> 00:58:33,920
wonderful all right thanks so much

00:58:33,040 --> 00:58:37,280
everyone

00:58:33,920 --> 00:58:42,559
and enjoy the rest of your day bye bye

00:58:37,280 --> 00:58:42,559

YouTube URL: https://www.youtube.com/watch?v=W0atcVJHWUU


