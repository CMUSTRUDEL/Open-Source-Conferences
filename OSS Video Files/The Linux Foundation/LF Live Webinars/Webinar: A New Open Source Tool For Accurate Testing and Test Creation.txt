Title: Webinar: A New Open Source Tool For Accurate Testing and Test Creation
Publication date: 2021-02-10
Playlist: LF Live Webinars
Description: 
	Sponsored by StormForge
Captions: 
	00:00:01,680 --> 00:00:04,720
thank you christina uh

00:00:03,360 --> 00:00:06,480
welcome to everyone welcome to the

00:00:04,720 --> 00:00:09,280
webinar um

00:00:06,480 --> 00:00:09,840
as christina mentioned my name is noah

00:00:09,280 --> 00:00:12,080
uh

00:00:09,840 --> 00:00:12,960
and i'm going to talk to you today about

00:00:12,080 --> 00:00:15,360
our new

00:00:12,960 --> 00:00:17,600
open source tool which uh hopefully will

00:00:15,360 --> 00:00:20,800
also be your new open source tool

00:00:17,600 --> 00:00:22,480
uh about testing in kubernetes

00:00:20,800 --> 00:00:24,720
applications

00:00:22,480 --> 00:00:24,720
so

00:00:26,240 --> 00:00:31,679
if uh if my clicker works

00:00:30,240 --> 00:00:34,160
the agenda we're going to go through

00:00:31,679 --> 00:00:37,520
today is uh we'll start with

00:00:34,160 --> 00:00:39,840
who we are uh at stormforge

00:00:37,520 --> 00:00:40,559
why we created this product why we care

00:00:39,840 --> 00:00:44,000
about

00:00:40,559 --> 00:00:45,760
testing why it's important to us

00:00:44,000 --> 00:00:46,879
and what the problem is that we're

00:00:45,760 --> 00:00:48,480
trying to solve we're going to talk a

00:00:46,879 --> 00:00:51,680
little bit about

00:00:48,480 --> 00:00:53,280
current testing models how current

00:00:51,680 --> 00:00:57,840
testing models are flawed and

00:00:53,280 --> 00:00:58,960
yes they are all flawed in some way

00:00:57,840 --> 00:01:00,960
we're going to talk about what we can do

00:00:58,960 --> 00:01:02,719
about it

00:01:00,960 --> 00:01:04,239
then we'll go on to the project itself

00:01:02,719 --> 00:01:07,119
we'll talk about

00:01:04,239 --> 00:01:08,320
how it attempts to solve the problems

00:01:07,119 --> 00:01:11,360
and then

00:01:08,320 --> 00:01:12,640
how folks can get involved either

00:01:11,360 --> 00:01:14,880
started using

00:01:12,640 --> 00:01:17,040
or involved with helping out with the

00:01:14,880 --> 00:01:20,400
project

00:01:17,040 --> 00:01:22,799
so first of all who are we

00:01:20,400 --> 00:01:25,600
we are stormforged you may have known us

00:01:22,799 --> 00:01:28,960
previously as carbon relay

00:01:25,600 --> 00:01:32,000
up until last november

00:01:28,960 --> 00:01:32,640
uh we are a market leader in performance

00:01:32,000 --> 00:01:35,360
testing

00:01:32,640 --> 00:01:36,240
and kubernetes application optimization

00:01:35,360 --> 00:01:38,159
because those

00:01:36,240 --> 00:01:39,759
have to go hand in hand if you don't

00:01:38,159 --> 00:01:42,000
have good testing it is difficult to

00:01:39,759 --> 00:01:45,280
optimize

00:01:42,000 --> 00:01:46,799
and if you are doing testing without

00:01:45,280 --> 00:01:49,439
acting upon it then why are you doing

00:01:46,799 --> 00:01:49,439
that testing

00:01:49,600 --> 00:01:57,280
so we've been doing this for a while now

00:01:53,600 --> 00:01:59,520
we are a company who is backed by a

00:01:57,280 --> 00:02:02,560
strong machine learning presence

00:01:59,520 --> 00:02:04,960
because optimization is difficult to do

00:02:02,560 --> 00:02:07,840
by hand

00:02:04,960 --> 00:02:10,000
so letting machines make the decisions

00:02:07,840 --> 00:02:11,599
as opposed to having to try and juggle

00:02:10,000 --> 00:02:14,959
10 or 12 different parameters at the

00:02:11,599 --> 00:02:18,319
same time uh that only makes sense

00:02:14,959 --> 00:02:22,000
we are all in on the

00:02:18,319 --> 00:02:24,959
cloud native ecosystem um

00:02:22,000 --> 00:02:27,280
as you can see we are focused on

00:02:24,959 --> 00:02:31,440
application optimization of kubernetes

00:02:27,280 --> 00:02:33,680
applications and um

00:02:31,440 --> 00:02:35,599
and all the related products that go

00:02:33,680 --> 00:02:37,920
along with that

00:02:35,599 --> 00:02:38,879
and we're also all in on open source as

00:02:37,920 --> 00:02:42,160
you might have guessed

00:02:38,879 --> 00:02:43,760
by my job title of open source advocate

00:02:42,160 --> 00:02:46,560
and the fact that we are presenting an

00:02:43,760 --> 00:02:48,000
open source program and project to you

00:02:46,560 --> 00:02:49,680
today

00:02:48,000 --> 00:02:52,560
uh if you want to know more about us you

00:02:49,680 --> 00:02:55,760
can find us on our website stormforge.io

00:02:52,560 --> 00:02:57,519
uh we have a public slack and we also

00:02:55,760 --> 00:02:59,120
host bi-weekly office hours if you want

00:02:57,519 --> 00:02:59,599
to just come in and ask us questions

00:02:59,120 --> 00:03:01,599
about

00:02:59,599 --> 00:03:03,599
any or all of these topics or none

00:03:01,599 --> 00:03:06,000
whatsoever anything that's tangential

00:03:03,599 --> 00:03:09,120
will also happily take

00:03:06,000 --> 00:03:11,840
so as

00:03:09,120 --> 00:03:13,280
a group that is focused on testing and

00:03:11,840 --> 00:03:17,360
optimization

00:03:13,280 --> 00:03:19,599
uh we want to first establish

00:03:17,360 --> 00:03:22,159
what is optimization and how did it get

00:03:19,599 --> 00:03:22,159
us to

00:03:22,319 --> 00:03:25,840
this particular question that we wanted

00:03:24,159 --> 00:03:29,040
to solve

00:03:25,840 --> 00:03:31,599
so optimization as

00:03:29,040 --> 00:03:33,200
at least as i'm defining it is getting

00:03:31,599 --> 00:03:36,640
your application to behave

00:03:33,200 --> 00:03:39,840
how you want it um it is

00:03:36,640 --> 00:03:41,440
however you want your application to act

00:03:39,840 --> 00:03:43,920
once you have finished the active

00:03:41,440 --> 00:03:45,120
optimization uh whether you are trying

00:03:43,920 --> 00:03:46,799
to

00:03:45,120 --> 00:03:48,159
normalize for cost whether you're trying

00:03:46,799 --> 00:03:50,400
to increase your performance whether

00:03:48,159 --> 00:03:53,760
you're trying to get better resiliency

00:03:50,400 --> 00:03:55,519
uh whatever parameter whatever uh

00:03:53,760 --> 00:03:57,519
property it is that you're trying to get

00:03:55,519 --> 00:03:59,200
into your application that is part of

00:03:57,519 --> 00:04:02,799
optimization

00:03:59,200 --> 00:04:05,439
it is your desired behavior

00:04:02,799 --> 00:04:06,080
so how do you measure desired behavior

00:04:05,439 --> 00:04:09,599
that's

00:04:06,080 --> 00:04:11,680
uh that's an interesting one

00:04:09,599 --> 00:04:13,360
because in order to know what that

00:04:11,680 --> 00:04:14,000
desired behavior is you have to be able

00:04:13,360 --> 00:04:15,920
to

00:04:14,000 --> 00:04:17,759
have some form of measurement you have

00:04:15,920 --> 00:04:19,120
to understand

00:04:17,759 --> 00:04:21,600
the tool you have to understand the

00:04:19,120 --> 00:04:24,639
application

00:04:21,600 --> 00:04:28,160
and understand what

00:04:24,639 --> 00:04:29,840
what actual properties are the desired

00:04:28,160 --> 00:04:33,280
properties in the first place

00:04:29,840 --> 00:04:34,160
which in the world of kubernetes

00:04:33,280 --> 00:04:36,400
applications

00:04:34,160 --> 00:04:38,960
in distributed systems in this

00:04:36,400 --> 00:04:40,880
cloud-native ecosystem

00:04:38,960 --> 00:04:43,840
that keeps getting harder applications

00:04:40,880 --> 00:04:43,840
are more spread out

00:04:44,000 --> 00:04:48,960
we've gone from a world of monoliths to

00:04:46,320 --> 00:04:51,600
a world of microservices

00:04:48,960 --> 00:04:53,440
every individual piece is behaving in

00:04:51,600 --> 00:04:56,880
its own unique way

00:04:53,440 --> 00:04:59,199
and the idea of how to optimize is

00:04:56,880 --> 00:05:02,800
more and more complicated as we make the

00:04:59,199 --> 00:05:02,800
apps more and more abstracted

00:05:03,840 --> 00:05:10,479
so in order to understand how those all

00:05:07,199 --> 00:05:12,160
fit together we need to have a

00:05:10,479 --> 00:05:14,880
some form of yardstick to do a

00:05:12,160 --> 00:05:14,880
measurement against

00:05:15,520 --> 00:05:19,520
but in order to see that behavior we

00:05:18,080 --> 00:05:21,280
have to stimulate the behavior in the

00:05:19,520 --> 00:05:25,280
first place

00:05:21,280 --> 00:05:27,759
if you don't have any sort of good load

00:05:25,280 --> 00:05:29,759
if you don't have a good way to

00:05:27,759 --> 00:05:30,400
stimulate the behavior that you want to

00:05:29,759 --> 00:05:34,080
see

00:05:30,400 --> 00:05:37,520
you can't see what the response is

00:05:34,080 --> 00:05:38,960
when you are stimulating it obviously

00:05:37,520 --> 00:05:40,479
if you want to see what your production

00:05:38,960 --> 00:05:42,160
apps look like then you have to know

00:05:40,479 --> 00:05:43,520
what a production behavior looks like if

00:05:42,160 --> 00:05:46,080
you want to know what

00:05:43,520 --> 00:05:48,479
uh isolated behavior looks like then you

00:05:46,080 --> 00:05:52,000
are going to generate load and isolation

00:05:48,479 --> 00:05:55,919
it's pretty straightforward

00:05:52,000 --> 00:05:57,840
so we are interested in

00:05:55,919 --> 00:05:59,440
optimizing the applications which means

00:05:57,840 --> 00:06:03,280
we need to stimulate

00:05:59,440 --> 00:06:05,919
behavior that will provide us

00:06:03,280 --> 00:06:07,280
with a response that shows the

00:06:05,919 --> 00:06:10,160
properties and the qualities that we're

00:06:07,280 --> 00:06:10,160
trying to optimize for

00:06:10,400 --> 00:06:13,840
which gets us to load testing

00:06:14,560 --> 00:06:19,280
as we said early on load testing is

00:06:17,759 --> 00:06:22,560
flawed

00:06:19,280 --> 00:06:25,360
but load testing is also a spectrum

00:06:22,560 --> 00:06:26,720
uh at one end of the spectrum you don't

00:06:25,360 --> 00:06:29,360
really know what you're

00:06:26,720 --> 00:06:29,360
testing for

00:06:29,919 --> 00:06:35,280
most load tests start

00:06:32,960 --> 00:06:37,520
with i'm just going to throw as many

00:06:35,280 --> 00:06:39,280
requests as i possibly can

00:06:37,520 --> 00:06:42,479
at the front end of my application and

00:06:39,280 --> 00:06:45,600
i'm going to see what the results are

00:06:42,479 --> 00:06:46,800
what's the failure rate what happens

00:06:45,600 --> 00:06:48,800
when i hit

00:06:46,800 --> 00:06:52,479
the root of my application what happens

00:06:48,800 --> 00:06:54,319
when i hit a particular api endpoint

00:06:52,479 --> 00:06:55,759
and you're really not looking at

00:06:54,319 --> 00:06:59,120
responses you're looking

00:06:55,759 --> 00:07:00,240
at more of an overall status whether or

00:06:59,120 --> 00:07:03,759
not it's even

00:07:00,240 --> 00:07:04,400
functioning at all but when you're

00:07:03,759 --> 00:07:07,360
looking at

00:07:04,400 --> 00:07:09,199
trying to optimize for any sort of

00:07:07,360 --> 00:07:10,400
particular behavior that's not really

00:07:09,199 --> 00:07:12,479
relevant

00:07:10,400 --> 00:07:14,160
it's definitely not accurate it's not

00:07:12,479 --> 00:07:17,599
giving you anything useful

00:07:14,160 --> 00:07:19,120
um if you were to put an application

00:07:17,599 --> 00:07:20,800
out in the world you're not just going

00:07:19,120 --> 00:07:22,800
to get a

00:07:20,800 --> 00:07:24,080
large number of people hitting the front

00:07:22,800 --> 00:07:25,919
page of your website

00:07:24,080 --> 00:07:28,160
all the time it's not what's going to

00:07:25,919 --> 00:07:28,160
happen

00:07:28,479 --> 00:07:33,120
on the other end of the spectrum you've

00:07:31,759 --> 00:07:34,160
got

00:07:33,120 --> 00:07:36,000
some understanding about your

00:07:34,160 --> 00:07:37,520
application you're making some quality

00:07:36,000 --> 00:07:39,039
guesses

00:07:37,520 --> 00:07:40,479
you have some understanding about what

00:07:39,039 --> 00:07:42,240
the traffic looks like you have some

00:07:40,479 --> 00:07:43,199
understanding what the page architecture

00:07:42,240 --> 00:07:46,639
looks like

00:07:43,199 --> 00:07:48,560
or application architecture

00:07:46,639 --> 00:07:49,759
you're analyzing the flow and the

00:07:48,560 --> 00:07:52,080
patterns

00:07:49,759 --> 00:07:55,520
that come into that application and then

00:07:52,080 --> 00:07:56,960
you recreate the patterns

00:07:55,520 --> 00:07:58,879
and this is going to be a recurring

00:07:56,960 --> 00:08:01,919
theme throughout this the fact that

00:07:58,879 --> 00:08:04,000
you're taking existing data stepping

00:08:01,919 --> 00:08:05,680
away from it

00:08:04,000 --> 00:08:07,440
and then trying to recreate that

00:08:05,680 --> 00:08:09,440
existing data in the first place that

00:08:07,440 --> 00:08:12,240
existing traffic

00:08:09,440 --> 00:08:13,360
uh it requires a lot of work it

00:08:12,240 --> 00:08:18,080
certainly has

00:08:13,360 --> 00:08:19,919
a lot of uh certainly has a lot of uses

00:08:18,080 --> 00:08:21,599
but it does require a lot of engineering

00:08:19,919 --> 00:08:26,080
time and effort and you end up with

00:08:21,599 --> 00:08:28,080
these handcrafted load tests

00:08:26,080 --> 00:08:30,240
which require understanding of the

00:08:28,080 --> 00:08:34,080
application in the first place

00:08:30,240 --> 00:08:37,039
and uh a lot of teams are frankly

00:08:34,080 --> 00:08:37,039
not suited to do

00:08:38,839 --> 00:08:44,320
so

00:08:40,800 --> 00:08:44,320
that brings us on to

00:08:44,480 --> 00:08:50,959
as we talk about that spectrum

00:08:48,160 --> 00:08:52,480
uh what are we trying to accomplish with

00:08:50,959 --> 00:08:55,519
these load tests

00:08:52,480 --> 00:09:00,560
and why is understanding

00:08:55,519 --> 00:09:00,560
about your application an issue so

00:09:00,720 --> 00:09:04,399
one of the big problems that we run into

00:09:02,640 --> 00:09:08,640
is a problem of accuracy

00:09:04,399 --> 00:09:11,279
and if you

00:09:08,640 --> 00:09:12,880
asked your average person on the street

00:09:11,279 --> 00:09:15,120
what accuracy is

00:09:12,880 --> 00:09:16,800
um they might fumble through a

00:09:15,120 --> 00:09:20,000
definition

00:09:16,800 --> 00:09:23,600
um and one of the things that i think is

00:09:20,000 --> 00:09:24,320
interesting here is the difference

00:09:23,600 --> 00:09:27,600
between

00:09:24,320 --> 00:09:30,640
accuracy and precision

00:09:27,600 --> 00:09:32,000
and we're focused on trying to get more

00:09:30,640 --> 00:09:33,440
accurate tests

00:09:32,000 --> 00:09:34,720
if you asked an average person they

00:09:33,440 --> 00:09:35,600
might tell you that accuracy and

00:09:34,720 --> 00:09:37,120
precision are

00:09:35,600 --> 00:09:39,040
synonyms that they mean approximately

00:09:37,120 --> 00:09:40,480
the same thing but in the world of

00:09:39,040 --> 00:09:42,000
measurement they don't mean the same

00:09:40,480 --> 00:09:45,360
thing

00:09:42,000 --> 00:09:48,640
accuracy is about how on target you

00:09:45,360 --> 00:09:51,120
are and precision is about

00:09:48,640 --> 00:09:53,120
the width of your measurement how close

00:09:51,120 --> 00:09:55,440
to the target you are

00:09:53,120 --> 00:09:55,440
um

00:09:56,240 --> 00:10:03,440
now when you are using

00:09:59,839 --> 00:10:04,959
early tests without any understanding of

00:10:03,440 --> 00:10:09,839
your application

00:10:04,959 --> 00:10:13,279
you are missing accuracy significantly

00:10:09,839 --> 00:10:14,000
uh you're you just kind of you know we

00:10:13,279 --> 00:10:15,600
call

00:10:14,000 --> 00:10:17,040
throwing it at the wall seeing what

00:10:15,600 --> 00:10:19,040
sticks

00:10:17,040 --> 00:10:20,640
that's not accurate at all because you

00:10:19,040 --> 00:10:23,040
don't actually know what you're aiming

00:10:20,640 --> 00:10:23,040
for

00:10:23,360 --> 00:10:27,680
and honestly in the wild that's a lot of

00:10:25,920 --> 00:10:29,279
what load testing is

00:10:27,680 --> 00:10:30,800
it's not a matter of whether or not you

00:10:29,279 --> 00:10:33,200
understand the application's behavior

00:10:30,800 --> 00:10:35,680
it's a matter of whether or not

00:10:33,200 --> 00:10:37,360
when you perform a test did it fall over

00:10:35,680 --> 00:10:40,160
is it on fire

00:10:37,360 --> 00:10:40,640
um and if it's not people just ship it

00:10:40,160 --> 00:10:43,519
out

00:10:40,640 --> 00:10:44,959
and they say well it stood up we assumed

00:10:43,519 --> 00:10:45,600
that it behaved the way that we wanted

00:10:44,959 --> 00:10:48,399
it to

00:10:45,600 --> 00:10:48,399
looks good to me

00:10:49,600 --> 00:10:55,839
and if you are putting in that effort

00:10:53,680 --> 00:10:57,360
well then you're getting better tests

00:10:55,839 --> 00:10:58,800
you're getting better understanding of

00:10:57,360 --> 00:11:01,839
your application if you're putting in

00:10:58,800 --> 00:11:01,839
the effort to do so

00:11:02,079 --> 00:11:06,160
in that you know what the results should

00:11:04,880 --> 00:11:08,399
be

00:11:06,160 --> 00:11:10,880
but as we said previously that takes a

00:11:08,399 --> 00:11:14,560
lot of work

00:11:10,880 --> 00:11:16,399
and since you're stepping away

00:11:14,560 --> 00:11:17,600
from the initial traffic in the first

00:11:16,399 --> 00:11:19,600
place in order to

00:11:17,600 --> 00:11:21,360
analyze it and get back to recreating

00:11:19,600 --> 00:11:24,399
tests

00:11:21,360 --> 00:11:26,079
this is where we make the statement that

00:11:24,399 --> 00:11:29,360
all tests are flawed because you've

00:11:26,079 --> 00:11:32,399
already stepped away from reality

00:11:29,360 --> 00:11:35,839
you are not in a world

00:11:32,399 --> 00:11:38,320
where you're actually working with the

00:11:35,839 --> 00:11:41,760
real data you're already working with

00:11:38,320 --> 00:11:44,959
a abstracted set of analysis so

00:11:41,760 --> 00:11:47,360
across the entire spectrum all of your

00:11:44,959 --> 00:11:49,519
tests are flawed

00:11:47,360 --> 00:11:50,720
whether you're doing them in an

00:11:49,519 --> 00:11:53,040
inaccurate sense

00:11:50,720 --> 00:11:54,000
or whether you're putting in the work to

00:11:53,040 --> 00:11:57,200
get as close

00:11:54,000 --> 00:11:59,839
back to what you started with in the

00:11:57,200 --> 00:11:59,839
first place

00:12:04,160 --> 00:12:10,959
so how do you get past

00:12:08,560 --> 00:12:11,760
not having that reality in the first

00:12:10,959 --> 00:12:15,920
place

00:12:11,760 --> 00:12:16,399
well uh one of the best quotes that i've

00:12:15,920 --> 00:12:19,920
seen

00:12:16,399 --> 00:12:22,560
is simply about testing in prod

00:12:19,920 --> 00:12:24,880
this is very easily defining that when

00:12:22,560 --> 00:12:28,000
you test in prod

00:12:24,880 --> 00:12:29,120
you're testing in reality and if you're

00:12:28,000 --> 00:12:31,440
not testing in prod

00:12:29,120 --> 00:12:33,120
you're not testing in reality it's a

00:12:31,440 --> 00:12:36,399
pretty straightforward binary and

00:12:33,120 --> 00:12:38,720
there's a lot of value to be said for

00:12:36,399 --> 00:12:40,160
both sides uh you want to test before

00:12:38,720 --> 00:12:42,320
you get to prod but

00:12:40,160 --> 00:12:44,000
testing in prod is the only way to see

00:12:42,320 --> 00:12:45,760
what the actual behavior is going to

00:12:44,000 --> 00:12:49,279
look like

00:12:45,760 --> 00:12:51,200
however why does it

00:12:49,279 --> 00:12:53,279
not reflect reality when you're testing

00:12:51,200 --> 00:12:54,800
outside of prod

00:12:53,279 --> 00:12:56,720
well this is actually a lot more

00:12:54,800 --> 00:13:00,639
complicated of a question than what i've

00:12:56,720 --> 00:13:01,920
positioned here it's not the differences

00:13:00,639 --> 00:13:04,480
in the systems

00:13:01,920 --> 00:13:06,160
it's not infrastructure if it if it was

00:13:04,480 --> 00:13:08,560
a matter of infrastructure then

00:13:06,160 --> 00:13:10,079
you could just change the instance types

00:13:08,560 --> 00:13:12,880
that you're requesting

00:13:10,079 --> 00:13:14,079
that's not a big deal uh that's pretty

00:13:12,880 --> 00:13:17,279
easily solved

00:13:14,079 --> 00:13:19,760
is it a matter of uh how your

00:13:17,279 --> 00:13:21,440
operational teams are taking care of and

00:13:19,760 --> 00:13:24,880
managing the systems

00:13:21,440 --> 00:13:25,440
are your dev systems being managed by

00:13:24,880 --> 00:13:28,480
hand

00:13:25,440 --> 00:13:29,040
but your production systems are all you

00:13:28,480 --> 00:13:31,200
know

00:13:29,040 --> 00:13:32,160
infrastructure as code and everything is

00:13:31,200 --> 00:13:35,120
checked in

00:13:32,160 --> 00:13:37,360
well we know that that happens in

00:13:35,120 --> 00:13:38,240
reality but really that shouldn't be a

00:13:37,360 --> 00:13:40,560
difference

00:13:38,240 --> 00:13:43,040
you can easily solve that by adapting

00:13:40,560 --> 00:13:44,800
those operational practices

00:13:43,040 --> 00:13:46,399
to your development environments in your

00:13:44,800 --> 00:13:48,079
pre-prod environments

00:13:46,399 --> 00:13:50,639
in addition to your production

00:13:48,079 --> 00:13:50,639
environments

00:13:50,959 --> 00:13:57,440
now uh almost all of the differences

00:13:54,959 --> 00:13:58,320
are based in usage and i say almost

00:13:57,440 --> 00:14:01,040
there's some

00:13:58,320 --> 00:14:02,399
other stragglers that come in the

00:14:01,040 --> 00:14:04,399
concept of state

00:14:02,399 --> 00:14:06,240
in a production environment is one of

00:14:04,399 --> 00:14:10,480
them

00:14:06,240 --> 00:14:12,959
but for the most part

00:14:10,480 --> 00:14:15,360
it is the usage patterns that are coming

00:14:12,959 --> 00:14:18,639
into your production environments

00:14:15,360 --> 00:14:21,120
that are preventing

00:14:18,639 --> 00:14:23,040
your non-production environments from

00:14:21,120 --> 00:14:25,519
actually having testing that reflects

00:14:23,040 --> 00:14:25,519
reality

00:14:26,399 --> 00:14:31,920
so all of your testing is inherently

00:14:30,320 --> 00:14:36,639
flawed

00:14:31,920 --> 00:14:36,639
if you cannot get production to

00:14:36,800 --> 00:14:41,920
uh be simulated in your non-production

00:14:40,160 --> 00:14:45,440
environments

00:14:41,920 --> 00:14:48,880
and there is always a bit of danger

00:14:45,440 --> 00:14:52,399
in potentially testing in production

00:14:48,880 --> 00:14:53,920
uh maybe you're doing destructive

00:14:52,399 --> 00:14:56,560
testing and you don't want to push

00:14:53,920 --> 00:14:58,480
point that at your live production

00:14:56,560 --> 00:15:00,240
environments or how are you testing

00:14:58,480 --> 00:15:02,000
against

00:15:00,240 --> 00:15:03,680
payment card data or any number of

00:15:02,000 --> 00:15:05,600
things

00:15:03,680 --> 00:15:07,760
so all of that testing is inherently

00:15:05,600 --> 00:15:10,079
flawed

00:15:07,760 --> 00:15:10,079
and

00:15:11,199 --> 00:15:16,560
we wanted to try and solve that problem

00:15:13,120 --> 00:15:19,440
because we wanted to have

00:15:16,560 --> 00:15:22,639
tests that could optimize an application

00:15:19,440 --> 00:15:26,240
for how it's going to function in prod

00:15:22,639 --> 00:15:27,279
and we wanted those tests to be able to

00:15:26,240 --> 00:15:29,440
be run

00:15:27,279 --> 00:15:30,560
pretty much anywhere so that we could

00:15:29,440 --> 00:15:34,160
simulate the prod

00:15:30,560 --> 00:15:37,759
environments outside of prod

00:15:34,160 --> 00:15:39,519
so we've presented this project which is

00:15:37,759 --> 00:15:40,000
currently called vhs and that's in

00:15:39,519 --> 00:15:41,680
quotes for

00:15:40,000 --> 00:15:43,839
reason we'll talk about it in a little

00:15:41,680 --> 00:15:43,839
bit

00:15:46,000 --> 00:15:53,279
so what is vhs vhs is

00:15:49,519 --> 00:15:54,880
a tool that will take your production

00:15:53,279 --> 00:15:58,720
traffic and allow you to

00:15:54,880 --> 00:16:03,519
use it in non-production so

00:15:58,720 --> 00:16:07,440
how does it work what is vhs today

00:16:03,519 --> 00:16:09,279
first of all since we said it is a

00:16:07,440 --> 00:16:12,399
focus on kubernetes applications it

00:16:09,279 --> 00:16:12,399
deploys as a sidecar

00:16:12,639 --> 00:16:17,279
it shows up inside your kubernetes

00:16:14,480 --> 00:16:19,440
application and allows you to

00:16:17,279 --> 00:16:22,079
understand and make use of the traffic

00:16:19,440 --> 00:16:25,040
that's going into that app

00:16:22,079 --> 00:16:25,839
it records and replays any and all

00:16:25,040 --> 00:16:28,880
traffic

00:16:25,839 --> 00:16:32,160
that you tell it to um

00:16:28,880 --> 00:16:35,680
and it does so by storing that traffic

00:16:32,160 --> 00:16:39,360
in some form of file or manifest

00:16:35,680 --> 00:16:43,519
wherever you tell it to um

00:16:39,360 --> 00:16:47,600
now this is in sort of in any to any

00:16:43,519 --> 00:16:50,720
format so we've taken

00:16:47,600 --> 00:16:51,680
the ability to record traffic and we've

00:16:50,720 --> 00:16:54,480
made

00:16:51,680 --> 00:16:56,639
all of these plugins whether it is

00:16:54,480 --> 00:17:00,480
recording the inbound web traffic

00:16:56,639 --> 00:17:03,519
and storing it on local disk or in an s3

00:17:00,480 --> 00:17:06,400
bucket or whatever it happens to be

00:17:03,519 --> 00:17:07,919
and we've also taken the the inverse

00:17:06,400 --> 00:17:09,760
where it is reading

00:17:07,919 --> 00:17:11,360
that manifest where it's reading that

00:17:09,760 --> 00:17:13,520
stored traffic

00:17:11,360 --> 00:17:16,959
uh and it's playing it back into your

00:17:13,520 --> 00:17:20,160
application for the purposes of testing

00:17:16,959 --> 00:17:21,439
and really that's the majority of what

00:17:20,160 --> 00:17:24,240
it is

00:17:21,439 --> 00:17:26,000
um which is interesting because we saw

00:17:24,240 --> 00:17:27,199
that there was a problem in a testing

00:17:26,000 --> 00:17:31,120
environment

00:17:27,199 --> 00:17:33,360
that there was a need for uh

00:17:31,120 --> 00:17:36,080
getting these tests to work correctly

00:17:33,360 --> 00:17:38,559
but we didn't really solve it with a

00:17:36,080 --> 00:17:40,640
testing application we solved it with a

00:17:38,559 --> 00:17:42,240
traffic application

00:17:40,640 --> 00:17:44,400
because we found that that was going to

00:17:42,240 --> 00:17:46,640
be the most useful way

00:17:44,400 --> 00:17:47,840
for stimulating the behavior that we

00:17:46,640 --> 00:17:49,679
wanted to see

00:17:47,840 --> 00:17:51,200
in the applications by completely

00:17:49,679 --> 00:17:54,320
bypassing

00:17:51,200 --> 00:17:57,360
the idea of creating tests

00:17:54,320 --> 00:17:59,039
and having to understand what the uh

00:17:57,360 --> 00:18:01,039
application looks like in the first

00:17:59,039 --> 00:18:03,440
place you still have to understand it

00:18:01,039 --> 00:18:05,120
still very important if you just throw

00:18:03,440 --> 00:18:06,320
production traffic in an application you

00:18:05,120 --> 00:18:09,600
don't understand what it's doing you're

00:18:06,320 --> 00:18:09,600
not going to get a lot of benefit

00:18:10,080 --> 00:18:17,600
but it does take it out of the idea of

00:18:13,280 --> 00:18:20,880
creating the test so

00:18:17,600 --> 00:18:22,799
where would something like vhs fit into

00:18:20,880 --> 00:18:26,080
your lifecycle today

00:18:22,799 --> 00:18:28,559
um you've got this recording replay tool

00:18:26,080 --> 00:18:30,720
so you throw it in as a side car on your

00:18:28,559 --> 00:18:33,840
kubernetes application

00:18:30,720 --> 00:18:37,280
um if it's receiving web traffic

00:18:33,840 --> 00:18:38,000
then it would take those uh http

00:18:37,280 --> 00:18:41,600
manifest

00:18:38,000 --> 00:18:43,840
uh store it as a har file standard http

00:18:41,600 --> 00:18:43,840
archive

00:18:44,559 --> 00:18:48,480
in the storage of your choice wherever

00:18:46,799 --> 00:18:51,440
you want to put it

00:18:48,480 --> 00:18:53,120
and then as we go back and approach your

00:18:51,440 --> 00:18:55,200
ci cd pipeline

00:18:53,120 --> 00:18:56,720
it can play back that traffic into any

00:18:55,200 --> 00:18:59,919
number of stages

00:18:56,720 --> 00:19:02,240
now the ones where vhs appears here this

00:18:59,919 --> 00:19:02,640
is a typical ci cd pipeline that i've

00:19:02,240 --> 00:19:05,679
seen

00:19:02,640 --> 00:19:07,200
many times check in your code do your

00:19:05,679 --> 00:19:10,240
build run your unit tests

00:19:07,200 --> 00:19:10,799
integration tests additional end to end

00:19:10,240 --> 00:19:13,600
test

00:19:10,799 --> 00:19:14,480
optimize the application and then

00:19:13,600 --> 00:19:18,720
finally

00:19:14,480 --> 00:19:18,720
deploy into your production environments

00:19:20,400 --> 00:19:24,000
and the areas where vhs is here in this

00:19:22,799 --> 00:19:27,600
pipeline this is about where

00:19:24,000 --> 00:19:30,400
stormforge is mostly concerned

00:19:27,600 --> 00:19:31,679
in the environments in the pipeline we

00:19:30,400 --> 00:19:34,320
want to help with

00:19:31,679 --> 00:19:36,840
the optimization we were focused on what

00:19:34,320 --> 00:19:39,919
does the testing look like

00:19:36,840 --> 00:19:41,520
however this turns it a little bit on

00:19:39,919 --> 00:19:45,200
its ear because this

00:19:41,520 --> 00:19:47,440
is a typical ci cd pipeline but

00:19:45,200 --> 00:19:48,799
while this is where it would fit the

00:19:47,440 --> 00:19:52,480
very concept

00:19:48,799 --> 00:19:55,280
of these being stages in your

00:19:52,480 --> 00:19:57,120
pipeline might change because you have

00:19:55,280 --> 00:20:01,600
the ability

00:19:57,120 --> 00:20:04,720
to stimulate that production traffic

00:20:01,600 --> 00:20:06,799
into your

00:20:04,720 --> 00:20:08,320
test cycle so this entire test cycle

00:20:06,799 --> 00:20:10,400
might change

00:20:08,320 --> 00:20:12,159
by virtue of you being able to throw

00:20:10,400 --> 00:20:14,880
live traffic at it

00:20:12,159 --> 00:20:16,320
and like i said this is just a typical

00:20:14,880 --> 00:20:19,840
one that i've seen

00:20:16,320 --> 00:20:21,840
before i'm sure that any number of

00:20:19,840 --> 00:20:25,120
people on this call can come up with

00:20:21,840 --> 00:20:26,080
uh come up with new ideas use your

00:20:25,120 --> 00:20:28,159
imagination

00:20:26,080 --> 00:20:29,200
on interesting ways that this could be

00:20:28,159 --> 00:20:31,039
placed

00:20:29,200 --> 00:20:32,480
for anything that needs to replay

00:20:31,039 --> 00:20:33,840
traffic maybe you want to use it for

00:20:32,480 --> 00:20:36,559
testing maybe you want to use it for

00:20:33,840 --> 00:20:41,600
security maybe you want to use it for

00:20:36,559 --> 00:20:41,600
come up with your own ideas so

00:20:43,039 --> 00:20:49,600
that's what we've got we've got a

00:20:46,840 --> 00:20:52,640
framework really

00:20:49,600 --> 00:20:57,679
that does record and replay of

00:20:52,640 --> 00:21:02,400
any traffic to and from any scenario

00:20:57,679 --> 00:21:06,080
ostensibly but it's a new project

00:21:02,400 --> 00:21:07,520
it's a community project and

00:21:06,080 --> 00:21:09,600
there's a lot of potential directions

00:21:07,520 --> 00:21:11,760
that it could go

00:21:09,600 --> 00:21:13,200
uh for the core of the framework itself

00:21:11,760 --> 00:21:16,480
one of the places that it could go

00:21:13,200 --> 00:21:18,000
could be to provide additional metrics

00:21:16,480 --> 00:21:21,120
maybe your application isn't running

00:21:18,000 --> 00:21:22,799
prometheus maybe your application

00:21:21,120 --> 00:21:24,480
you don't really know how to get that

00:21:22,799 --> 00:21:26,240
visibility back out

00:21:24,480 --> 00:21:28,240
well we'd like to throw some metrics

00:21:26,240 --> 00:21:31,120
into the core of the product

00:21:28,240 --> 00:21:32,640
so that when you run the test when you

00:21:31,120 --> 00:21:33,440
provide that traffic that you can

00:21:32,640 --> 00:21:35,919
understand

00:21:33,440 --> 00:21:38,559
what the reactions are to that traffic

00:21:35,919 --> 00:21:43,440
internal to vhs

00:21:38,559 --> 00:21:45,600
um we're also looking at potentially

00:21:43,440 --> 00:21:47,200
testing things outside of the realm of

00:21:45,600 --> 00:21:48,400
just the kubernetes applications

00:21:47,200 --> 00:21:51,360
themselves maybe want to test the

00:21:48,400 --> 00:21:53,679
kubernetes platform um

00:21:51,360 --> 00:21:56,000
maybe this is a sidecar that could be

00:21:53,679 --> 00:21:57,039
applied to the api server in the kube

00:21:56,000 --> 00:22:00,480
system name

00:21:57,039 --> 00:22:02,880
space and you want to test not what the

00:22:00,480 --> 00:22:05,360
workload looks like of a particular

00:22:02,880 --> 00:22:08,559
application on black friday

00:22:05,360 --> 00:22:11,120
but you want to test what it looks like

00:22:08,559 --> 00:22:11,760
when your cluster that is a multi-tenant

00:22:11,120 --> 00:22:14,000
cluster

00:22:11,760 --> 00:22:15,520
is being used by thousands of users at

00:22:14,000 --> 00:22:19,039
the same time

00:22:15,520 --> 00:22:22,960
and will your api server stand up to

00:22:19,039 --> 00:22:26,400
that much uh cube ctl

00:22:22,960 --> 00:22:28,000
action you yeah there's there's a lot of

00:22:26,400 --> 00:22:30,000
potential there for

00:22:28,000 --> 00:22:31,039
testing things outside the realms of

00:22:30,000 --> 00:22:34,400
just the app

00:22:31,039 --> 00:22:34,880
and that leads us into versions of the

00:22:34,400 --> 00:22:37,280
app

00:22:34,880 --> 00:22:39,039
that are not just a single application

00:22:37,280 --> 00:22:40,000
sidecar we've had some discussions

00:22:39,039 --> 00:22:43,360
around

00:22:40,000 --> 00:22:45,120
maybe the maybe the vhs implementation

00:22:43,360 --> 00:22:48,720
is to be a standalone application on the

00:22:45,120 --> 00:22:50,240
cluster or maybe it's not even

00:22:48,720 --> 00:22:52,559
a containerized version we've had some

00:22:50,240 --> 00:22:54,799
people ask us about how would i apply

00:22:52,559 --> 00:22:57,919
this to a bare metal system

00:22:54,799 --> 00:22:59,280
because i don't want i want to test what

00:22:57,919 --> 00:23:00,960
a bare metal

00:22:59,280 --> 00:23:03,280
response looks like and i'm not

00:23:00,960 --> 00:23:05,840
interested in the application i haven't

00:23:03,280 --> 00:23:08,960
gotten that far yet

00:23:05,840 --> 00:23:10,559
so there's a few different changes that

00:23:08,960 --> 00:23:12,080
could potentially be on the horizon

00:23:10,559 --> 00:23:12,960
based on what the community needs

00:23:12,080 --> 00:23:14,559
because

00:23:12,960 --> 00:23:17,280
once again this is an open source

00:23:14,559 --> 00:23:18,720
project this is a community project

00:23:17,280 --> 00:23:20,799
and we're looking for a lot of people to

00:23:18,720 --> 00:23:22,960
get involved to help out with

00:23:20,799 --> 00:23:24,640
these types of directions let's talk

00:23:22,960 --> 00:23:27,679
about the plugins a little bit

00:23:24,640 --> 00:23:31,200
we said that this is an any to any

00:23:27,679 --> 00:23:32,400
scenario so what if we want other

00:23:31,200 --> 00:23:34,080
storage mediums well

00:23:32,400 --> 00:23:35,919
how many different storage types do you

00:23:34,080 --> 00:23:39,280
want to have

00:23:35,919 --> 00:23:42,720
today we don't have a plug-in for azure

00:23:39,280 --> 00:23:46,960
if anyone on the call is well versed

00:23:42,720 --> 00:23:50,480
in writing azure storage plugins

00:23:46,960 --> 00:23:51,440
pop on by we'd love to have you uh what

00:23:50,480 --> 00:23:54,720
about

00:23:51,440 --> 00:23:58,400
the output that is being stored

00:23:54,720 --> 00:24:00,000
in the traffic manifests

00:23:58,400 --> 00:24:02,720
what about encrypting that data right

00:24:00,000 --> 00:24:04,559
now it's dumping it as a flat file

00:24:02,720 --> 00:24:06,799
what about sanitizing that data what

00:24:04,559 --> 00:24:09,840
about parsing it in some other way

00:24:06,799 --> 00:24:10,799
um these are all plugins because they're

00:24:09,840 --> 00:24:14,159
all part of just

00:24:10,799 --> 00:24:16,720
getting into the workflow uh

00:24:14,159 --> 00:24:17,600
that we would like people to come come

00:24:16,720 --> 00:24:19,279
jump into

00:24:17,600 --> 00:24:20,799
our sessions and tell us are these

00:24:19,279 --> 00:24:23,919
things that you find useful

00:24:20,799 --> 00:24:25,679
or you know maybe they're not maybe

00:24:23,919 --> 00:24:27,440
everyone is gonna say

00:24:25,679 --> 00:24:28,880
hey i'm just gonna store this locally

00:24:27,440 --> 00:24:32,799
and i don't care about encryption

00:24:28,880 --> 00:24:35,600
unlikely but possible

00:24:32,799 --> 00:24:37,520
uh what about session management so

00:24:35,600 --> 00:24:38,640
right now we're doing mostly http

00:24:37,520 --> 00:24:41,840
traffic

00:24:38,640 --> 00:24:44,159
uh how do you handle hdb sessions how

00:24:41,840 --> 00:24:46,480
are you handling that across

00:24:44,159 --> 00:24:49,840
multiple instances multiple replicas

00:24:46,480 --> 00:24:49,840
within your web tier

00:24:50,080 --> 00:24:54,480
what does that look like and how are we

00:24:51,520 --> 00:24:57,200
handling that at the plug-in level

00:24:54,480 --> 00:24:59,200
and since i said we're managing mostly

00:24:57,200 --> 00:25:00,640
http traffic today

00:24:59,200 --> 00:25:02,640
because that's what we started with you

00:25:00,640 --> 00:25:05,840
need to have a starting point

00:25:02,640 --> 00:25:07,520
um what does it look like to handle

00:25:05,840 --> 00:25:09,840
other traffic types

00:25:07,520 --> 00:25:10,720
maybe we want to be able to capture sql

00:25:09,840 --> 00:25:14,240
traffic

00:25:10,720 --> 00:25:15,840
maybe we want to capture grpc traffic

00:25:14,240 --> 00:25:18,320
maybe we want to capture any number of

00:25:15,840 --> 00:25:21,760
other things

00:25:18,320 --> 00:25:22,400
and as a corollary to that if we're

00:25:21,760 --> 00:25:25,279
capturing

00:25:22,400 --> 00:25:27,039
and playing back other traffic types

00:25:25,279 --> 00:25:29,200
what if it's not just on the front end

00:25:27,039 --> 00:25:30,799
of the application what if

00:25:29,200 --> 00:25:32,799
when we're testing our application we're

00:25:30,799 --> 00:25:33,360
actually using this as something closer

00:25:32,799 --> 00:25:35,840
to

00:25:33,360 --> 00:25:37,279
surface virtualization where we're

00:25:35,840 --> 00:25:39,760
simulating

00:25:37,279 --> 00:25:41,440
a database playback on the back end of

00:25:39,760 --> 00:25:43,919
the application

00:25:41,440 --> 00:25:47,520
because it's in any to any configuration

00:25:43,919 --> 00:25:47,520
this is 100 possible

00:25:47,840 --> 00:25:52,640
we're also looking at once the data is

00:25:51,039 --> 00:25:55,440
stored once that traffic

00:25:52,640 --> 00:25:57,120
is somewhere in a file what can you do

00:25:55,440 --> 00:25:59,440
with it do we have additional tools that

00:25:57,120 --> 00:26:02,320
we want to

00:25:59,440 --> 00:26:03,760
press upon that stored traffic what if

00:26:02,320 --> 00:26:06,480
you want to do some manual traffic

00:26:03,760 --> 00:26:06,480
shaping those

00:26:06,640 --> 00:26:10,640
handcrafted artisanal load tests that i

00:26:09,200 --> 00:26:12,320
talked about

00:26:10,640 --> 00:26:14,159
well we said they're a lot of work but

00:26:12,320 --> 00:26:16,240
what if we could make them a lot less

00:26:14,159 --> 00:26:16,480
work by giving you a good starting point

00:26:16,240 --> 00:26:20,000
and

00:26:16,480 --> 00:26:22,400
allowing you to do simple shaping

00:26:20,000 --> 00:26:24,240
like i want to add some delays in

00:26:22,400 --> 00:26:27,840
between some transactions to see

00:26:24,240 --> 00:26:31,039
if uh if my ecommerce site still works

00:26:27,840 --> 00:26:32,400
i want to increase the volume of a

00:26:31,039 --> 00:26:35,919
particular type

00:26:32,400 --> 00:26:39,600
of uh stored transaction

00:26:35,919 --> 00:26:42,320
all of these things and this goes into

00:26:39,600 --> 00:26:43,600
our ml backing our machine learning

00:26:42,320 --> 00:26:46,159
backing

00:26:43,600 --> 00:26:47,279
uh what if we want to analyze that

00:26:46,159 --> 00:26:50,720
traffic

00:26:47,279 --> 00:26:54,000
and be able to either

00:26:50,720 --> 00:26:55,360
narrow or broaden the traffic types and

00:26:54,000 --> 00:26:57,039
the request types that are coming into

00:26:55,360 --> 00:26:59,600
your particular application

00:26:57,039 --> 00:27:01,760
what if we want to increase the dial on

00:26:59,600 --> 00:27:06,400
just one particular type and say

00:27:01,760 --> 00:27:11,520
give me more of the uh

00:27:06,400 --> 00:27:13,039
incorrectly authorized uh admin traffic

00:27:11,520 --> 00:27:15,600
see what happens when the application

00:27:13,039 --> 00:27:15,600
hits that

00:27:15,919 --> 00:27:20,399
and one that i am particularly concerned

00:27:18,840 --> 00:27:22,559
about

00:27:20,399 --> 00:27:23,840
once you have that traffic stored what

00:27:22,559 --> 00:27:27,520
do you do

00:27:23,840 --> 00:27:30,960
with any sort of personal information

00:27:27,520 --> 00:27:33,279
any sort of sensitive data

00:27:30,960 --> 00:27:35,600
and this goes for a couple of different

00:27:33,279 --> 00:27:38,399
reasons you've got things like gdpr

00:27:35,600 --> 00:27:40,080
where you don't want to store any uh

00:27:38,399 --> 00:27:41,600
sensitive or personal data if you can

00:27:40,080 --> 00:27:43,679
avoid it

00:27:41,600 --> 00:27:46,080
but also what if you're playing back

00:27:43,679 --> 00:27:49,120
something that has payment card data

00:27:46,080 --> 00:27:51,120
and you're now replaying a credit card

00:27:49,120 --> 00:27:53,120
transaction

00:27:51,120 --> 00:27:54,480
you don't want that to actually process

00:27:53,120 --> 00:27:56,159
and go through

00:27:54,480 --> 00:27:58,480
uh because you're running it in part of

00:27:56,159 --> 00:28:01,679
a test simulation you want to be able to

00:27:58,480 --> 00:28:05,440
to change that up to say a test string

00:28:01,679 --> 00:28:08,399
so all of these are ways that we see the

00:28:05,440 --> 00:28:08,399
project evolving

00:28:09,120 --> 00:28:16,240
but we run into in this

00:28:12,559 --> 00:28:17,760
any to any scenario uh

00:28:16,240 --> 00:28:19,360
that we've made a bit of a swiss army

00:28:17,760 --> 00:28:22,559
knife

00:28:19,360 --> 00:28:25,760
so where we're starting today we've got

00:28:22,559 --> 00:28:28,399
hdb traffic uh the ability to

00:28:25,760 --> 00:28:31,279
de-zip and turrets the ability to store

00:28:28,399 --> 00:28:34,159
it a handful of locations

00:28:31,279 --> 00:28:34,960
that's a great framework and what we

00:28:34,159 --> 00:28:36,880
want to get to

00:28:34,960 --> 00:28:38,640
is something that a lot of people would

00:28:36,880 --> 00:28:40,080
find useful

00:28:38,640 --> 00:28:41,760
that we want the community to be

00:28:40,080 --> 00:28:45,279
involved with to tell us

00:28:41,760 --> 00:28:47,679
and to help drive this product forward

00:28:45,279 --> 00:28:48,880
for what the most useful use cases will

00:28:47,679 --> 00:28:50,399
be

00:28:48,880 --> 00:28:52,559
how are people going to interact with

00:28:50,399 --> 00:28:53,600
this project maybe it's in ways we

00:28:52,559 --> 00:28:56,559
haven't thought of yet

00:28:53,600 --> 00:28:58,480
i'm great with that please come help us

00:28:56,559 --> 00:29:02,080
drive those forward

00:28:58,480 --> 00:29:05,440
but if we attend to everything that is

00:29:02,080 --> 00:29:07,200
on that list and do

00:29:05,440 --> 00:29:08,640
all of the possible plugins we're going

00:29:07,200 --> 00:29:10,840
to end up with something that's sort of

00:29:08,640 --> 00:29:13,440
untenable

00:29:10,840 --> 00:29:15,440
so part of the conversation is around

00:29:13,440 --> 00:29:18,080
what are people going to find useful

00:29:15,440 --> 00:29:18,480
and in your organization when you're

00:29:18,080 --> 00:29:21,120
doing

00:29:18,480 --> 00:29:22,880
testing or maybe you're not doing it

00:29:21,120 --> 00:29:25,360
today because you find it too difficult

00:29:22,880 --> 00:29:28,559
and you wanted a way to start there

00:29:25,360 --> 00:29:32,399
what would you find to be most useful

00:29:28,559 --> 00:29:36,480
in a traffic replay tool

00:29:32,399 --> 00:29:39,360
so that brings us to

00:29:36,480 --> 00:29:40,559
the project itself what we have and what

00:29:39,360 --> 00:29:43,520
we don't have

00:29:40,559 --> 00:29:45,120
we have weekly meetings to talk about

00:29:43,520 --> 00:29:45,840
these things what do people want what

00:29:45,120 --> 00:29:48,960
are

00:29:45,840 --> 00:29:50,720
the community going to bring in uh

00:29:48,960 --> 00:29:52,399
we have a mailing list and a

00:29:50,720 --> 00:29:53,279
contributor's guide and a code of

00:29:52,399 --> 00:29:55,200
conduct

00:29:53,279 --> 00:29:56,880
and we have a github org and all of the

00:29:55,200 --> 00:29:58,880
things that you need in order to manage

00:29:56,880 --> 00:30:03,360
a project

00:29:58,880 --> 00:30:05,919
what we don't have yet is

00:30:03,360 --> 00:30:06,720
significant contribution outside of

00:30:05,919 --> 00:30:10,080
storm forge

00:30:06,720 --> 00:30:12,480
and we want to change that we don't have

00:30:10,080 --> 00:30:15,520
a formal maintainer process

00:30:12,480 --> 00:30:18,000
because we don't have quite frankly you

00:30:15,520 --> 00:30:19,760
all of you who are here on this call we

00:30:18,000 --> 00:30:21,039
want you to get involved in this project

00:30:19,760 --> 00:30:24,080
we're trying to make this

00:30:21,039 --> 00:30:27,120
a community project that is not owned by

00:30:24,080 --> 00:30:28,960
any one company and

00:30:27,120 --> 00:30:31,360
we want everyone to help us drive it

00:30:28,960 --> 00:30:31,360
forward

00:30:32,559 --> 00:30:35,600
the other thing we don't have is a new

00:30:34,320 --> 00:30:38,559
name

00:30:35,600 --> 00:30:40,799
from earlier uh you'll notice that vhs

00:30:38,559 --> 00:30:43,760
was in quotes

00:30:40,799 --> 00:30:44,880
well there's a couple of reasons uh we

00:30:43,760 --> 00:30:48,480
are intending to

00:30:44,880 --> 00:30:51,440
rename this project vhs

00:30:48,480 --> 00:30:54,640
i should surprise no one is somewhat

00:30:51,440 --> 00:30:57,360
difficult to go do a google search on

00:30:54,640 --> 00:30:58,799
uh and in almost every context that we

00:30:57,360 --> 00:31:01,679
were interested in

00:30:58,799 --> 00:31:03,760
the name was already taken you're not

00:31:01,679 --> 00:31:05,440
going to get a github org named vhs it's

00:31:03,760 --> 00:31:08,320
not going to happen

00:31:05,440 --> 00:31:08,799
uh the other issue that's not written

00:31:08,320 --> 00:31:10,240
here

00:31:08,799 --> 00:31:11,840
is that it is someone's registered

00:31:10,240 --> 00:31:15,519
trademark

00:31:11,840 --> 00:31:16,840
vhs belongs to a company uh and so while

00:31:15,519 --> 00:31:20,240
it's quippy

00:31:16,840 --> 00:31:23,600
and is uh evocative

00:31:20,240 --> 00:31:25,840
of the record and playback

00:31:23,600 --> 00:31:28,240
functionality that this project has been

00:31:25,840 --> 00:31:30,960
built with

00:31:28,240 --> 00:31:32,720
really we want something that as a name

00:31:30,960 --> 00:31:36,000
belongs more to the community

00:31:32,720 --> 00:31:39,360
we want to be a little more unique uh

00:31:36,000 --> 00:31:41,200
and also we want it to be evocative of

00:31:39,360 --> 00:31:44,159
the cloud native ecosystem that we're

00:31:41,200 --> 00:31:44,159
making this a part of

00:31:44,559 --> 00:31:47,919
so if you say hey i've got a good name

00:31:47,279 --> 00:31:50,799
for that

00:31:47,919 --> 00:31:52,480
or i want to see what suggestions other

00:31:50,799 --> 00:31:54,880
people are coming up with

00:31:52,480 --> 00:31:57,120
uh you can come join our meetings and

00:31:54,880 --> 00:32:00,480
we're going to be opening

00:31:57,120 --> 00:32:01,600
uh a suggest a section for suggestions

00:32:00,480 --> 00:32:04,000
during our meetings

00:32:01,600 --> 00:32:06,000
along with storing things in a document

00:32:04,000 --> 00:32:06,640
we're expecting that sometime around the

00:32:06,000 --> 00:32:10,000
end of this

00:32:06,640 --> 00:32:12,960
quarter we are going to have a

00:32:10,000 --> 00:32:15,039
uh a poll based on the suggestions that

00:32:12,960 --> 00:32:16,320
everyone brings forth to us

00:32:15,039 --> 00:32:17,760
and we're going to formally rename the

00:32:16,320 --> 00:32:20,880
project probably in the beginning of

00:32:17,760 --> 00:32:25,919
april depending on the number and

00:32:20,880 --> 00:32:25,919
activity we get around the suggestions

00:32:26,840 --> 00:32:32,720
so if you wanted to get started with

00:32:30,480 --> 00:32:35,600
this project how would you get involved

00:32:32,720 --> 00:32:36,559
well first of all you would come join us

00:32:35,600 --> 00:32:39,679
on github

00:32:36,559 --> 00:32:43,200
in the appropriately named rename dash

00:32:39,679 --> 00:32:45,840
this org

00:32:43,200 --> 00:32:47,440
for obvious reasons we have a mailing

00:32:45,840 --> 00:32:51,039
list over on google groups which is

00:32:47,440 --> 00:32:54,840
going to be our central point of contact

00:32:51,039 --> 00:32:56,159
it is vhs dash pre dash rename dash

00:32:54,840 --> 00:32:57,600
launch

00:32:56,159 --> 00:32:59,440
that should be pretty easy for everyone

00:32:57,600 --> 00:33:00,399
to just remember right i'm just going to

00:32:59,440 --> 00:33:04,480
type down those

00:33:00,399 --> 00:33:07,679
yeah that's not going to happen so

00:33:04,480 --> 00:33:10,960
we also have a public slack

00:33:07,679 --> 00:33:14,720
unfortunately our public slack

00:33:10,960 --> 00:33:16,880
registration page is currently down

00:33:14,720 --> 00:33:18,159
so it's a good thing the link is here

00:33:16,880 --> 00:33:19,679
but we're going to be announcing when

00:33:18,159 --> 00:33:21,600
that's fixed on the mailing list so

00:33:19,679 --> 00:33:23,039
please come join us on the mailing list

00:33:21,600 --> 00:33:24,559
i'm going to leave this up for a second

00:33:23,039 --> 00:33:27,440
or two for anyone who's interested to go

00:33:24,559 --> 00:33:27,440
join the mailing list

00:33:27,760 --> 00:33:32,000
and if you're on the mailing list then

00:33:29,360 --> 00:33:33,279
you will get the invite to our weekly

00:33:32,000 --> 00:33:36,320
zoom meetings

00:33:33,279 --> 00:33:36,960
they are 9 a.m monday mornings pacific

00:33:36,320 --> 00:33:41,120
time

00:33:36,960 --> 00:33:43,919
noon eastern time 5 pm gmt

00:33:41,120 --> 00:33:46,480
there is a public document with all of

00:33:43,919 --> 00:33:49,039
our meeting minutes and agendas

00:33:46,480 --> 00:33:50,000
and that same mailing list will also be

00:33:49,039 --> 00:33:55,679
used for

00:33:50,000 --> 00:33:58,720
control of the of the renaming documents

00:33:55,679 --> 00:34:00,880
so that's it that's all i've got

00:33:58,720 --> 00:34:01,760
i hope that everyone found this to be

00:34:00,880 --> 00:34:06,080
interesting

00:34:01,760 --> 00:34:08,320
we've got you know what we think is

00:34:06,080 --> 00:34:09,119
the the framework for a really great

00:34:08,320 --> 00:34:12,240
solution

00:34:09,119 --> 00:34:14,480
to testing in prod to being able to

00:34:12,240 --> 00:34:20,000
provide your production traffic in a

00:34:14,480 --> 00:34:22,560
cloud-native way um

00:34:20,000 --> 00:34:22,560
and

00:34:23,040 --> 00:34:26,639
now we're going to maybe

00:34:26,879 --> 00:34:30,800
maybe i'm going to move on to questions

00:34:28,560 --> 00:34:33,760
there we go

00:34:30,800 --> 00:34:34,079
so we've got some questions here in the

00:34:33,760 --> 00:34:37,839
q

00:34:34,079 --> 00:34:40,399
a panel and let's see what we've got

00:34:37,839 --> 00:34:43,599
what part of stormforge is open source

00:34:40,399 --> 00:34:46,480
and what part is proprietary

00:34:43,599 --> 00:34:49,679
can the service aggregation and result

00:34:46,480 --> 00:34:52,320
stored in storm forge services

00:34:49,679 --> 00:34:52,720
stored in stormforge servers or we

00:34:52,320 --> 00:34:55,440
install

00:34:52,720 --> 00:34:57,359
all the dependent service into our own

00:34:55,440 --> 00:35:01,040
servers

00:34:57,359 --> 00:35:04,640
okay so one of the

00:35:01,040 --> 00:35:07,680
lines that we've drawn

00:35:04,640 --> 00:35:12,720
as a company is that

00:35:07,680 --> 00:35:14,800
anything that a customer is going to run

00:35:12,720 --> 00:35:17,599
and i say the word customer even if

00:35:14,800 --> 00:35:19,119
though it's open source

00:35:17,599 --> 00:35:21,200
anything that an end user is going to

00:35:19,119 --> 00:35:24,240
run on their own systems

00:35:21,200 --> 00:35:28,400
absolutely should be open source

00:35:24,240 --> 00:35:30,640
so for storm forge

00:35:28,400 --> 00:35:32,079
we've got this particular application

00:35:30,640 --> 00:35:32,560
this is an open source application

00:35:32,079 --> 00:35:36,560
running

00:35:32,560 --> 00:35:37,599
in your cluster if it reaches back to

00:35:36,560 --> 00:35:40,000
other things

00:35:37,599 --> 00:35:41,680
that is a matter of discussion like we

00:35:40,000 --> 00:35:45,200
talked about the machine learning

00:35:41,680 --> 00:35:46,000
uh that piece wouldn't necessarily be

00:35:45,200 --> 00:35:48,320
open source

00:35:46,000 --> 00:35:49,280
but anything that you're running for the

00:35:48,320 --> 00:35:52,800
optimization

00:35:49,280 --> 00:35:54,320
for uh local testing anything that

00:35:52,800 --> 00:35:58,560
you're running locally

00:35:54,320 --> 00:36:00,480
is going to be open source um we do have

00:35:58,560 --> 00:36:02,560
some service offerings and those service

00:36:00,480 --> 00:36:04,079
offerings aren't necessarily open source

00:36:02,560 --> 00:36:07,040
we're still looking at continuing to

00:36:04,079 --> 00:36:08,640
grow that i'm a big proponent of

00:36:07,040 --> 00:36:10,160
pretty much everything should be open

00:36:08,640 --> 00:36:12,560
source so i'm going to be pushing that

00:36:10,160 --> 00:36:12,560
forward

00:36:13,040 --> 00:36:17,200
but uh yeah i hope that answers your

00:36:16,400 --> 00:36:18,800
question

00:36:17,200 --> 00:36:20,240
uh all of the stuff that you're going to

00:36:18,800 --> 00:36:21,920
install which would include the ability

00:36:20,240 --> 00:36:26,000
to like run experiments and whatnot is

00:36:21,920 --> 00:36:30,480
all open source

00:36:26,000 --> 00:36:34,160
uh storage overhead required

00:36:30,480 --> 00:36:38,480
uh it is primarily text

00:36:34,160 --> 00:36:41,680
so it's not a lot um

00:36:38,480 --> 00:36:44,720
if you've ever seen the output of

00:36:41,680 --> 00:36:46,160
you know something like wireshark it's

00:36:44,720 --> 00:36:48,800
just a big blob of text

00:36:46,160 --> 00:36:50,640
it doesn't take a whole lot uh and it

00:36:48,800 --> 00:36:54,079
goes from there

00:36:50,640 --> 00:36:57,680
the vhs object itself is

00:36:54,079 --> 00:37:01,119
a image so that's not taking a lot

00:36:57,680 --> 00:37:01,119
of space uh

00:37:01,680 --> 00:37:05,920
i can't give you a i can't give you a

00:37:04,480 --> 00:37:07,839
direct answer because that's sort of

00:37:05,920 --> 00:37:08,720
like asking how much water is there in a

00:37:07,839 --> 00:37:11,520
swimming pool

00:37:08,720 --> 00:37:12,960
or how long is a piece of rope but i can

00:37:11,520 --> 00:37:16,400
tell you that it's text files

00:37:12,960 --> 00:37:16,400
and doesn't take up a whole lot of space

00:37:17,440 --> 00:37:21,440
okay question what happens if a node's

00:37:20,320 --> 00:37:24,640
clock has become

00:37:21,440 --> 00:37:26,800
skewed for example very active nodes

00:37:24,640 --> 00:37:29,839
with a lot of cpu

00:37:26,800 --> 00:37:30,880
may go kilter in their ntp if not set up

00:37:29,839 --> 00:37:32,960
properly

00:37:30,880 --> 00:37:34,839
so you could find a five minute or more

00:37:32,960 --> 00:37:37,839
mismatch

00:37:34,839 --> 00:37:37,839
um

00:37:38,079 --> 00:37:42,480
i'm not sure i understand what the

00:37:40,320 --> 00:37:45,680
context of the question is

00:37:42,480 --> 00:37:46,960
um node clocks are a problem i've seen

00:37:45,680 --> 00:37:49,920
that in production

00:37:46,960 --> 00:37:51,599
many times but if we could get some more

00:37:49,920 --> 00:37:53,040
clarification on what you're asking with

00:37:51,599 --> 00:37:54,640
respect to

00:37:53,040 --> 00:37:57,520
a particular product or if you're just

00:37:54,640 --> 00:38:00,160
asking in general about node clock skew

00:37:57,520 --> 00:38:02,960
um i'd appreciate some more

00:38:00,160 --> 00:38:06,640
clarification on that question

00:38:02,960 --> 00:38:06,640
in the meantime what's the next one

00:38:06,960 --> 00:38:10,000
what about the gdpr from capturing a

00:38:09,599 --> 00:38:14,560
real

00:38:10,000 --> 00:38:14,560
traffic point of view um

00:38:14,800 --> 00:38:21,520
that is i mean like i said

00:38:18,240 --> 00:38:22,960
in one of the previous slides that is

00:38:21,520 --> 00:38:27,680
one of our

00:38:22,960 --> 00:38:31,119
uh primary interests

00:38:27,680 --> 00:38:33,839
on how we handle

00:38:31,119 --> 00:38:35,599
traffic and we want there to be some

00:38:33,839 --> 00:38:39,599
form of plug-in

00:38:35,599 --> 00:38:43,680
uh to handle sanitization of

00:38:39,599 --> 00:38:45,520
personal data now whether that happens

00:38:43,680 --> 00:38:47,520
during the capture or it's something

00:38:45,520 --> 00:38:48,800
that has to happen as a tool after the

00:38:47,520 --> 00:38:50,240
fact

00:38:48,800 --> 00:38:52,240
i would prefer it to happen during the

00:38:50,240 --> 00:38:53,040
capture so that it never actually makes

00:38:52,240 --> 00:38:55,520
it

00:38:53,040 --> 00:38:56,560
to the stored data in the first place as

00:38:55,520 --> 00:38:58,640
opposed to

00:38:56,560 --> 00:38:59,760
sanitizing the data after the fact which

00:38:58,640 --> 00:39:01,920
is sort of

00:38:59,760 --> 00:39:03,280
you're not really adhering to gdpr if

00:39:01,920 --> 00:39:06,320
you're doing that

00:39:03,280 --> 00:39:07,359
um and it's a great question and it's

00:39:06,320 --> 00:39:08,400
something that we really need to be

00:39:07,359 --> 00:39:11,040
concerned about

00:39:08,400 --> 00:39:11,760
and we would love people to come help us

00:39:11,040 --> 00:39:14,960
with

00:39:11,760 --> 00:39:16,160
that sort of that sort of endeavor

00:39:14,960 --> 00:39:18,400
around data filtering

00:39:16,160 --> 00:39:21,040
because right now it's not doing it and

00:39:18,400 --> 00:39:21,040
it needs to

00:39:24,000 --> 00:39:30,160
we'll give a minute or two to see if any

00:39:27,920 --> 00:39:32,800
other questions pop up

00:39:30,160 --> 00:39:34,320
uh but other than that uh barring any

00:39:32,800 --> 00:39:38,720
other questions

00:39:34,320 --> 00:39:38,720
i hope that folks found this interesting

00:39:40,079 --> 00:39:43,599
replay is the issue this is regarding

00:39:43,200 --> 00:39:46,800
the

00:39:43,599 --> 00:39:49,040
uh clock sku earlier

00:39:46,800 --> 00:39:51,040
replay is the issue i assume you need to

00:39:49,040 --> 00:39:54,000
align events

00:39:51,040 --> 00:39:55,200
records with regards to timestamps

00:39:54,000 --> 00:39:57,839
imagine a reply

00:39:55,200 --> 00:40:00,480
logged before a query this could affect

00:39:57,839 --> 00:40:05,599
kubernetes also in frustrating ways

00:40:00,480 --> 00:40:05,599
yeah so that's going to come down to

00:40:05,920 --> 00:40:11,760
being able to replay events

00:40:09,200 --> 00:40:12,640
as they came in if there are time stamps

00:40:11,760 --> 00:40:14,640
in there

00:40:12,640 --> 00:40:17,440
and the time stamps need to be updated

00:40:14,640 --> 00:40:18,960
then that would have to become part of

00:40:17,440 --> 00:40:20,560
realistically that would be part of data

00:40:18,960 --> 00:40:26,240
sanitization

00:40:20,560 --> 00:40:26,240
i think to say i'm replaying this in in

00:40:26,640 --> 00:40:32,400
in a scenario where i want to update any

00:40:29,359 --> 00:40:33,760
clock signatures to now

00:40:32,400 --> 00:40:35,680
and that would have to be covered at the

00:40:33,760 --> 00:40:37,680
plug-in level because otherwise you're

00:40:35,680 --> 00:40:40,160
playing back traffic that already has a

00:40:37,680 --> 00:40:43,839
time stamp built into it

00:40:40,160 --> 00:40:45,200
and there's not really a reasonable way

00:40:43,839 --> 00:40:47,520
to associate that and

00:40:45,200 --> 00:40:49,599
that might be part of the test can your

00:40:47,520 --> 00:40:52,880
system even handle a

00:40:49,599 --> 00:40:56,319
a playback that has a time stamp

00:40:52,880 --> 00:40:58,240
other than now that's frankly something

00:40:56,319 --> 00:41:00,240
that i hadn't really thought about until

00:40:58,240 --> 00:41:02,480
just now and i would

00:41:00,240 --> 00:41:03,760
encourage uh the person that asked this

00:41:02,480 --> 00:41:06,880
question to

00:41:03,760 --> 00:41:08,000
come on by our meetings and and present

00:41:06,880 --> 00:41:09,680
it as a

00:41:08,000 --> 00:41:10,880
as a formal issue something that we need

00:41:09,680 --> 00:41:11,680
to be concerned about and something that

00:41:10,880 --> 00:41:15,839
we need to manage

00:41:11,680 --> 00:41:17,119
in the uh plug-in management

00:41:15,839 --> 00:41:21,599
thank you for that question that's

00:41:17,119 --> 00:41:24,319
that's really interesting

00:41:21,599 --> 00:41:25,760
um barring any other questions we'll

00:41:24,319 --> 00:41:28,800
give it a minute

00:41:25,760 --> 00:41:30,880
i hope folks saw this as interesting and

00:41:28,800 --> 00:41:32,800
want to come join our meetings

00:41:30,880 --> 00:41:35,839
the mailing list is the place to start

00:41:32,800 --> 00:41:35,839
which i will put back up

00:41:37,599 --> 00:41:42,160
here and

00:41:43,520 --> 00:41:47,040
looks like we're clear on questions

00:41:47,359 --> 00:41:50,880
thank you all for coming out today and i

00:41:49,280 --> 00:41:52,720
hope this was interesting and

00:41:50,880 --> 00:41:54,319
educational

00:41:52,720 --> 00:41:56,240
all right thank you so much noah for

00:41:54,319 --> 00:41:58,000
your time today and thank you to all the

00:41:56,240 --> 00:42:00,560
participants who joined us

00:41:58,000 --> 00:42:02,160
um as a reminder this recording will be

00:42:00,560 --> 00:42:03,440
on the linux foundation youtube page

00:42:02,160 --> 00:42:04,800
later today

00:42:03,440 --> 00:42:11,440
and we hope you're able to join us for

00:42:04,800 --> 00:42:11,440

YouTube URL: https://www.youtube.com/watch?v=WHMiXBhaPu8


