Title: LF Live Webinar: Applying Governance To CI CD
Publication date: 2021-04-15
Playlist: LF Live Webinars
Description: 
	sponsored by Harness

Following the SolarWinds hack of 2020, security experts launched an investigation into the hack, putting the Software Development Life Cycle (SDLC) and all its processes under review.  Join this webinar session as we discuss:

- The role of CI/CD and its potential impacts on events like the SolarWinds hack
- How to apply IT Governance principles and practices to CI/CD pipelines
- And how to use these CI/CD capabilities to the reduce and mitigate software risks
Captions: 
	00:00:00,719 --> 00:00:03,679
awesome thank you so much christina hi

00:00:03,040 --> 00:00:05,759
everyone

00:00:03,679 --> 00:00:07,040
i'm so glad to be with you all today

00:00:05,759 --> 00:00:09,280
it's super exciting to

00:00:07,040 --> 00:00:10,080
be a part of the linux foundation live

00:00:09,280 --> 00:00:12,320
webinars

00:00:10,080 --> 00:00:14,480
and um you know one of the nice things

00:00:12,320 --> 00:00:16,400
about live webinars is that we get to

00:00:14,480 --> 00:00:17,279
interact with each other so please feel

00:00:16,400 --> 00:00:19,680
free to

00:00:17,279 --> 00:00:20,560
ask me any questions chat and chat with

00:00:19,680 --> 00:00:22,720
me

00:00:20,560 --> 00:00:24,640
i have it all up and i'll be able to

00:00:22,720 --> 00:00:27,199
answer questions during the presentation

00:00:24,640 --> 00:00:28,480
as well so feel free to ask anything

00:00:27,199 --> 00:00:29,039
make any comments that you'd like to

00:00:28,480 --> 00:00:31,840
make

00:00:29,039 --> 00:00:33,440
i know that this session is a more

00:00:31,840 --> 00:00:35,520
interesting one because

00:00:33,440 --> 00:00:36,880
i think a lot of people already

00:00:35,520 --> 00:00:39,600
inherently know

00:00:36,880 --> 00:00:41,760
about how governance works right we know

00:00:39,600 --> 00:00:45,920
about government systems we know

00:00:41,760 --> 00:00:49,520
about how rules work how standards are

00:00:45,920 --> 00:00:52,719
and and so applying it to

00:00:49,520 --> 00:00:55,039
uh it and to our software services

00:00:52,719 --> 00:00:56,559
is really interesting because suddenly

00:00:55,039 --> 00:00:57,760
now we're thinking about it from the

00:00:56,559 --> 00:01:00,879
perspective of

00:00:57,760 --> 00:01:03,600
well how do i govern my software

00:01:00,879 --> 00:01:05,199
deliverables and how do i do it through

00:01:03,600 --> 00:01:07,360
this automated process

00:01:05,199 --> 00:01:08,640
and so that's why i i'm gonna really

00:01:07,360 --> 00:01:10,240
enjoy this session because

00:01:08,640 --> 00:01:12,960
we're really gonna be talking about how

00:01:10,240 --> 00:01:14,560
to apply governance to ci cd

00:01:12,960 --> 00:01:16,720
and a little bit more about me i am a

00:01:14,560 --> 00:01:19,040
technical evangelist at harness and

00:01:16,720 --> 00:01:19,840
we help people with simplify and scale

00:01:19,040 --> 00:01:22,479
their

00:01:19,840 --> 00:01:24,320
ci cd and their software delivery so if

00:01:22,479 --> 00:01:26,799
you have any questions about this

00:01:24,320 --> 00:01:28,000
presentation just feel free to ask um i

00:01:26,799 --> 00:01:30,479
really do enjoy

00:01:28,000 --> 00:01:32,560
these kinds of presentations and i i

00:01:30,479 --> 00:01:35,439
want to start this presentation by

00:01:32,560 --> 00:01:36,880
kind of going over some of the reasoning

00:01:35,439 --> 00:01:39,520
and history behind

00:01:36,880 --> 00:01:40,320
why we may even decide to care about

00:01:39,520 --> 00:01:43,600
governance

00:01:40,320 --> 00:01:46,799
uh particularly in the space of software

00:01:43,600 --> 00:01:48,159
so in 2020 there was actually the solar

00:01:46,799 --> 00:01:51,280
winds hack and

00:01:48,159 --> 00:01:52,399
a lot of people i think were surprised

00:01:51,280 --> 00:01:55,040
but also

00:01:52,399 --> 00:01:57,680
kind of reflective especially in the ci

00:01:55,040 --> 00:01:59,680
cd space we were thinking about well

00:01:57,680 --> 00:02:01,680
why did something like this happen and

00:01:59,680 --> 00:02:04,799
why did it affect so many people

00:02:01,680 --> 00:02:05,520
so in 2020 december 2020 a cyber

00:02:04,799 --> 00:02:08,479
security

00:02:05,520 --> 00:02:09,840
firm called fireeye who is a customer of

00:02:08,479 --> 00:02:12,319
solarwinds

00:02:09,840 --> 00:02:13,840
an organization that provides it

00:02:12,319 --> 00:02:16,959
monitoring solutions

00:02:13,840 --> 00:02:19,040
notice that some of their cybersecurity

00:02:16,959 --> 00:02:20,319
software was being used outside of their

00:02:19,040 --> 00:02:21,840
company and

00:02:20,319 --> 00:02:23,680
when they looked into it they had

00:02:21,840 --> 00:02:25,520
noticed that there was actually a supply

00:02:23,680 --> 00:02:28,319
chain hack that had occurred

00:02:25,520 --> 00:02:29,680
where solar winds had shipped out

00:02:28,319 --> 00:02:32,720
malicious code

00:02:29,680 --> 00:02:36,080
uh within their software services

00:02:32,720 --> 00:02:38,640
to over 18 000 solarwinds customers

00:02:36,080 --> 00:02:41,280
and actually impacted big organizations

00:02:38,640 --> 00:02:44,400
like the department of homeland security

00:02:41,280 --> 00:02:47,599
nasa microsoft and it made people

00:02:44,400 --> 00:02:50,160
even today just reconsider like what it

00:02:47,599 --> 00:02:51,280
what are they using to deliver their

00:02:50,160 --> 00:02:54,480
software services

00:02:51,280 --> 00:02:56,879
and how can they better avoid supply

00:02:54,480 --> 00:03:00,400
chain hacks and malicious

00:02:56,879 --> 00:03:04,000
targeters and malicious hackers

00:03:00,400 --> 00:03:07,040
throughout their processes so

00:03:04,000 --> 00:03:10,319
actually i i think in a lot of ways

00:03:07,040 --> 00:03:12,400
we we know the inherent risk of software

00:03:10,319 --> 00:03:15,599
failures right things like this that

00:03:12,400 --> 00:03:16,000
um have impacts it may have an initial

00:03:15,599 --> 00:03:18,879
small

00:03:16,000 --> 00:03:20,159
impact on a group of people but then

00:03:18,879 --> 00:03:23,120
have this like chain

00:03:20,159 --> 00:03:25,519
daisy chain effect that inevitably

00:03:23,120 --> 00:03:28,000
impacts more and more people right

00:03:25,519 --> 00:03:29,920
the fact that solar winds was

00:03:28,000 --> 00:03:32,480
compromised may not have been a big deal

00:03:29,920 --> 00:03:34,480
but now the fact that they had comp they

00:03:32,480 --> 00:03:36,400
had caused a compromise to

00:03:34,480 --> 00:03:38,319
microsoft or the department of homeland

00:03:36,400 --> 00:03:41,680
security is a bigger deal

00:03:38,319 --> 00:03:42,959
and so in 2017 they looked at over 600

00:03:41,680 --> 00:03:45,480
software failures

00:03:42,959 --> 00:03:46,959
and noticed that it was due to a

00:03:45,480 --> 00:03:49,599
misconfiguration

00:03:46,959 --> 00:03:52,159
uh set up in in their environment and

00:03:49,599 --> 00:03:53,760
that actually resulted in 3.6 billion

00:03:52,159 --> 00:03:55,760
people being affected

00:03:53,760 --> 00:03:56,959
and a financial loss for the

00:03:55,760 --> 00:04:00,080
organizations

00:03:56,959 --> 00:04:02,720
of over 1.7 trillion dollars

00:04:00,080 --> 00:04:03,920
and in your studies today we're seeing

00:04:02,720 --> 00:04:06,720
that the cost of

00:04:03,920 --> 00:04:07,920
correcting software failures is actually

00:04:06,720 --> 00:04:10,400
fairly expensive

00:04:07,920 --> 00:04:11,120
so it's on average four million dollars

00:04:10,400 --> 00:04:13,200
to create

00:04:11,120 --> 00:04:15,120
correct things like a data breach that's

00:04:13,200 --> 00:04:16,560
already happened to customers

00:04:15,120 --> 00:04:18,479
and i think this is really interesting

00:04:16,560 --> 00:04:20,560
because we know this

00:04:18,479 --> 00:04:23,199
like we know that this is what happens

00:04:20,560 --> 00:04:23,919
when we have issues that get found after

00:04:23,199 --> 00:04:26,479
we've

00:04:23,919 --> 00:04:28,560
delivered a piece of code or we

00:04:26,479 --> 00:04:31,680
delivered a change a software

00:04:28,560 --> 00:04:32,560
service change right we we know that uh

00:04:31,680 --> 00:04:34,880
to be able to

00:04:32,560 --> 00:04:36,160
say like oh crap we made a mistake we

00:04:34,880 --> 00:04:37,520
need to take that back that actually

00:04:36,160 --> 00:04:39,919
costs a lot more

00:04:37,520 --> 00:04:42,080
than when we're actually coding uh or

00:04:39,919 --> 00:04:43,919
designing or thinking about

00:04:42,080 --> 00:04:45,280
the requirements that we need to gather

00:04:43,919 --> 00:04:47,680
and the architecture

00:04:45,280 --> 00:04:48,960
and fixing those mistakes earlier on and

00:04:47,680 --> 00:04:51,040
catching those big

00:04:48,960 --> 00:04:52,960
security vulnerability potential

00:04:51,040 --> 00:04:55,040
security vulnerabilities early on

00:04:52,960 --> 00:04:56,960
then further down in the process right

00:04:55,040 --> 00:04:58,479
and i think we've understood this for a

00:04:56,960 --> 00:05:01,280
few decades now right

00:04:58,479 --> 00:05:02,479
with the emergence of agile development

00:05:01,280 --> 00:05:04,800
processes

00:05:02,479 --> 00:05:06,639
and now devops principles and practices

00:05:04,800 --> 00:05:08,960
and tooling and automation

00:05:06,639 --> 00:05:11,680
and i think this is a good segue into

00:05:08,960 --> 00:05:14,240
why we might want to automate governance

00:05:11,680 --> 00:05:15,520
for our services for our software

00:05:14,240 --> 00:05:18,080
services right

00:05:15,520 --> 00:05:18,720
and and so that's why i want to talk

00:05:18,080 --> 00:05:21,120
about

00:05:18,720 --> 00:05:23,520
automated pipeline governance or in

00:05:21,120 --> 00:05:26,000
other words ci cd governance

00:05:23,520 --> 00:05:27,039
today and ci cd governance is how

00:05:26,000 --> 00:05:29,840
organizations

00:05:27,039 --> 00:05:31,280
attest to the integrity of assets in a

00:05:29,840 --> 00:05:32,880
delivery pipeline

00:05:31,280 --> 00:05:34,320
so it's everything that's related to

00:05:32,880 --> 00:05:37,440
your delivery pipeline right

00:05:34,320 --> 00:05:39,919
it's the infrastructure that you use

00:05:37,440 --> 00:05:42,080
that you provision it's the different

00:05:39,919 --> 00:05:43,919
environments that you decide to have

00:05:42,080 --> 00:05:45,520
it's that change control board that you

00:05:43,919 --> 00:05:47,120
may have it's

00:05:45,520 --> 00:05:49,280
the people who have access to your

00:05:47,120 --> 00:05:50,880
control your delivery pipeline

00:05:49,280 --> 00:05:52,960
and then it's also inevitably those

00:05:50,880 --> 00:05:55,120
software services that go through your

00:05:52,960 --> 00:05:57,199
delivery pipeline right that code that

00:05:55,120 --> 00:05:59,280
gets uh that gets tested that gets

00:05:57,199 --> 00:06:00,880
verified that gets packaged up and put

00:05:59,280 --> 00:06:02,240
onto the server where it's running now

00:06:00,880 --> 00:06:05,039
and now it's open for

00:06:02,240 --> 00:06:07,039
all of our customers so in this session

00:06:05,039 --> 00:06:07,680
i want to go over some more definitions

00:06:07,039 --> 00:06:09,919
about

00:06:07,680 --> 00:06:11,759
software delivery in general and kind of

00:06:09,919 --> 00:06:14,560
give you a better sense of what is

00:06:11,759 --> 00:06:14,960
uh what is cicd and how can i succeed in

00:06:14,560 --> 00:06:17,360
c

00:06:14,960 --> 00:06:19,600
with ci cd and then i want to go over

00:06:17,360 --> 00:06:21,680
some of the principles of governance

00:06:19,600 --> 00:06:22,720
and then that's how we can finally get

00:06:21,680 --> 00:06:24,720
to this uh

00:06:22,720 --> 00:06:26,319
final part of the presentation where we

00:06:24,720 --> 00:06:28,400
can talk about practices

00:06:26,319 --> 00:06:31,039
and tooling and how to integrate that

00:06:28,400 --> 00:06:33,199
into our ci cd pipelines because

00:06:31,039 --> 00:06:34,720
it's only when we can kind of understand

00:06:33,199 --> 00:06:36,880
the foundations first

00:06:34,720 --> 00:06:37,759
that we can start building up pipelines

00:06:36,880 --> 00:06:39,759
that are

00:06:37,759 --> 00:06:40,800
that automate our our governance and and

00:06:39,759 --> 00:06:43,039
our standards and

00:06:40,800 --> 00:06:44,319
the things that we want to be able to

00:06:43,039 --> 00:06:47,360
accomplish or set

00:06:44,319 --> 00:06:48,960
for our uh for our organizations and

00:06:47,360 --> 00:06:50,560
when as it relates to delivering

00:06:48,960 --> 00:06:52,720
software

00:06:50,560 --> 00:06:54,639
so i want to start with continuous

00:06:52,720 --> 00:06:56,080
integration and continuous delivery

00:06:54,639 --> 00:06:58,960
if anyone has any questions i'm more

00:06:56,080 --> 00:07:02,479
than happy to answer them in the chat

00:06:58,960 --> 00:07:04,000
as well so feel free to stop me if i'm

00:07:02,479 --> 00:07:07,599
if i say something that doesn't make

00:07:04,000 --> 00:07:09,039
sense but i do want to cover

00:07:07,599 --> 00:07:12,319
some components of continuous

00:07:09,039 --> 00:07:16,560
integration and continuous delivery now

00:07:12,319 --> 00:07:19,520
so uh ci cd um

00:07:16,560 --> 00:07:20,400
in in the sense is just uh a way of

00:07:19,520 --> 00:07:23,360
automating

00:07:20,400 --> 00:07:24,319
the process from getting from idea to

00:07:23,360 --> 00:07:27,520
production

00:07:24,319 --> 00:07:28,160
so it's it's when we have this idea to

00:07:27,520 --> 00:07:30,400
serve

00:07:28,160 --> 00:07:31,680
a customer to start to have you know

00:07:30,400 --> 00:07:34,319
some software service do

00:07:31,680 --> 00:07:35,199
some some type of thing that we decide

00:07:34,319 --> 00:07:37,360
well okay

00:07:35,199 --> 00:07:38,800
we want to release it out to a customer

00:07:37,360 --> 00:07:41,759
and so that process

00:07:38,800 --> 00:07:43,199
from idea to production can look like a

00:07:41,759 --> 00:07:46,720
couple of different things right

00:07:43,199 --> 00:07:49,840
in the most basic uh sense we would

00:07:46,720 --> 00:07:52,000
we would want to uh package that

00:07:49,840 --> 00:07:53,280
software up right we would want to test

00:07:52,000 --> 00:07:54,720
it make sure that there's a certain

00:07:53,280 --> 00:07:56,240
level of quality right especially if

00:07:54,720 --> 00:07:58,639
we're going to put our names on it

00:07:56,240 --> 00:08:00,879
and then that's when after we've tested

00:07:58,639 --> 00:08:01,680
it we kind of have a good idea that it

00:08:00,879 --> 00:08:03,120
works

00:08:01,680 --> 00:08:05,039
then we can actually deploy it and

00:08:03,120 --> 00:08:08,080
release it out to our customers

00:08:05,039 --> 00:08:09,919
and so a ci cd pipeline just automates

00:08:08,080 --> 00:08:12,000
that process it automates the process

00:08:09,919 --> 00:08:14,800
that we have

00:08:12,000 --> 00:08:16,479
for our software development lifecycle

00:08:14,800 --> 00:08:17,039
and this process can continue again

00:08:16,479 --> 00:08:18,639
right

00:08:17,039 --> 00:08:20,879
we can deploy something into production

00:08:18,639 --> 00:08:23,199
and say well wow that did a really

00:08:20,879 --> 00:08:24,960
awesome job now we have new requirements

00:08:23,199 --> 00:08:25,360
we have new features we want to expand

00:08:24,960 --> 00:08:26,879
this

00:08:25,360 --> 00:08:28,879
or you know we want to have this new

00:08:26,879 --> 00:08:31,360
feature that does xyz

00:08:28,879 --> 00:08:33,039
with for our customers and so you can

00:08:31,360 --> 00:08:34,080
repeat that process again and deploy it

00:08:33,039 --> 00:08:36,080
again and again

00:08:34,080 --> 00:08:37,599
and the idea is that we can do this

00:08:36,080 --> 00:08:41,919
repeatedly and much

00:08:37,599 --> 00:08:44,640
faster and even with more sustainability

00:08:41,919 --> 00:08:45,519
uh than if we were to do this manually

00:08:44,640 --> 00:08:48,640
with our people

00:08:45,519 --> 00:08:50,080
or if someone had to do these things uh

00:08:48,640 --> 00:08:51,760
if like one person was in charge of

00:08:50,080 --> 00:08:53,440
doing all these things manually without

00:08:51,760 --> 00:08:55,760
a ci cd pipeline or without any

00:08:53,440 --> 00:08:58,880
automation

00:08:55,760 --> 00:09:01,279
and so that's what ci cd is right

00:08:58,880 --> 00:09:03,440
and a lot of times people will kind of

00:09:01,279 --> 00:09:06,959
combine ci cd

00:09:03,440 --> 00:09:09,920
into this kind of one term that

00:09:06,959 --> 00:09:10,560
talks about how we get from uh different

00:09:09,920 --> 00:09:13,360
parts

00:09:10,560 --> 00:09:14,640
of this cycle right maybe it's built to

00:09:13,360 --> 00:09:16,480
deploy

00:09:14,640 --> 00:09:18,720
for some people and for some other

00:09:16,480 --> 00:09:21,440
people it's to get from

00:09:18,720 --> 00:09:23,120
uh you know build to test and so it can

00:09:21,440 --> 00:09:24,399
mean a lot of different things i think

00:09:23,120 --> 00:09:26,160
sometimes and that's where some

00:09:24,399 --> 00:09:29,040
confusion can come into play

00:09:26,160 --> 00:09:30,399
so i do want to cover about cover some

00:09:29,040 --> 00:09:32,000
of the

00:09:30,399 --> 00:09:33,839
differences between continuous

00:09:32,000 --> 00:09:35,279
integration and continuous delivery

00:09:33,839 --> 00:09:37,120
because you can't have one without the

00:09:35,279 --> 00:09:40,160
other and expect to be able to deliver

00:09:37,120 --> 00:09:41,600
software on a repeatable sustainable and

00:09:40,160 --> 00:09:43,920
quick process right

00:09:41,600 --> 00:09:45,279
so in continuous integration we're

00:09:43,920 --> 00:09:46,320
really thinking about our development

00:09:45,279 --> 00:09:49,279
workflows

00:09:46,320 --> 00:09:50,000
so it's when we have already come worked

00:09:49,279 --> 00:09:52,080
on our code

00:09:50,000 --> 00:09:53,360
we commit it right and now we just want

00:09:52,080 --> 00:09:55,440
to package it up

00:09:53,360 --> 00:09:57,040
in some way and so when we package it up

00:09:55,440 --> 00:09:59,040
we'll actually build into

00:09:57,040 --> 00:10:01,040
the package the dependencies the

00:09:59,040 --> 00:10:02,640
different libraries that we may be using

00:10:01,040 --> 00:10:04,720
right if we're

00:10:02,640 --> 00:10:06,079
leveraging some type of framework or

00:10:04,720 --> 00:10:07,680
some type of runtime

00:10:06,079 --> 00:10:09,440
you know that that runtime will get

00:10:07,680 --> 00:10:11,120
compiled or interpreted

00:10:09,440 --> 00:10:13,440
and then you'll be able to version that

00:10:11,120 --> 00:10:15,680
right say like okay that worked

00:10:13,440 --> 00:10:17,279
uh everything works you know there's no

00:10:15,680 --> 00:10:19,360
compilation errors

00:10:17,279 --> 00:10:20,959
uh well now we can we can say well this

00:10:19,360 --> 00:10:22,240
could be a release candidate or this

00:10:20,959 --> 00:10:25,360
could be our alpha or

00:10:22,240 --> 00:10:26,959
beta right and so you can tag it you can

00:10:25,360 --> 00:10:28,800
store it you can think about it you can

00:10:26,959 --> 00:10:29,200
do other things to it but essentially

00:10:28,800 --> 00:10:32,240
you're

00:10:29,200 --> 00:10:34,640
integrating pieces of code into this

00:10:32,240 --> 00:10:36,000
artifact that's ready to be deployed and

00:10:34,640 --> 00:10:38,560
run on a computer or

00:10:36,000 --> 00:10:40,720
some type of infrastructure and that's

00:10:38,560 --> 00:10:42,560
where continuous delivery picks up right

00:10:40,720 --> 00:10:44,079
we have this artifact that's ready to be

00:10:42,560 --> 00:10:46,640
put on a server um

00:10:44,079 --> 00:10:47,760
and so continuously delivery will

00:10:46,640 --> 00:10:49,360
actually say well

00:10:47,760 --> 00:10:51,040
what environments are we going to deploy

00:10:49,360 --> 00:10:51,760
to what infrastructure are we going to

00:10:51,040 --> 00:10:54,959
deploy to

00:10:51,760 --> 00:10:57,200
is this going to go to aws um a server

00:10:54,959 --> 00:10:58,800
uh ec2 instance on the aws is it going

00:10:57,200 --> 00:11:00,959
to go on kubernetes

00:10:58,800 --> 00:11:02,800
is it going to go on you know what kind

00:11:00,959 --> 00:11:05,200
of environment is it going to go on

00:11:02,800 --> 00:11:06,880
and one of the nice things is that we

00:11:05,200 --> 00:11:08,079
can actually automate this process you

00:11:06,880 --> 00:11:10,320
know we can spin up

00:11:08,079 --> 00:11:11,279
new environments and just deploy on

00:11:10,320 --> 00:11:14,000
demand

00:11:11,279 --> 00:11:14,800
and so a good part of continuous

00:11:14,000 --> 00:11:16,720
delivery

00:11:14,800 --> 00:11:18,640
is about ensuring that we have the right

00:11:16,720 --> 00:11:21,200
environments and that we can get

00:11:18,640 --> 00:11:21,680
this artifact into those environments

00:11:21,200 --> 00:11:23,279
and

00:11:21,680 --> 00:11:24,959
and that we can manage this change

00:11:23,279 --> 00:11:27,360
understand it right

00:11:24,959 --> 00:11:28,640
and then employ some deployment

00:11:27,360 --> 00:11:30,480
strategies so

00:11:28,640 --> 00:11:32,079
figuring out well what kind of release

00:11:30,480 --> 00:11:34,160
strategy do i want to have

00:11:32,079 --> 00:11:35,760
if it has the big impact if this feature

00:11:34,160 --> 00:11:37,760
change has a big impact

00:11:35,760 --> 00:11:38,959
you know maybe i only want to release it

00:11:37,760 --> 00:11:41,120
to 10

00:11:38,959 --> 00:11:42,959
of my customers first just in case there

00:11:41,120 --> 00:11:45,120
is some type of

00:11:42,959 --> 00:11:46,079
danger or risk associated with

00:11:45,120 --> 00:11:48,800
delivering

00:11:46,079 --> 00:11:50,880
a big change or maybe i want to

00:11:48,800 --> 00:11:53,040
introduce verification methods right

00:11:50,880 --> 00:11:54,320
once i've deployed a application service

00:11:53,040 --> 00:11:57,360
i want to make sure that

00:11:54,320 --> 00:11:59,440
i'm logging specific events um i can

00:11:57,360 --> 00:12:01,120
detect errors if there are errors

00:11:59,440 --> 00:12:02,959
and then roll back if there are any

00:12:01,120 --> 00:12:05,519
incidents you know just undo

00:12:02,959 --> 00:12:07,120
the deployment and go back to either go

00:12:05,519 --> 00:12:09,440
back to a new

00:12:07,120 --> 00:12:11,760
to a working state or even just roll

00:12:09,440 --> 00:12:13,440
forward and fix that mistake and then

00:12:11,760 --> 00:12:15,200
put it out for our customers quickly

00:12:13,440 --> 00:12:16,560
right and so there's kind of a full

00:12:15,200 --> 00:12:19,120
proof method here

00:12:16,560 --> 00:12:21,040
that goes to say that that says like

00:12:19,120 --> 00:12:22,639
okay even if we make a mistake there's

00:12:21,040 --> 00:12:24,320
there's some way that we can remedy it

00:12:22,639 --> 00:12:24,639
or there's some way that we can minimize

00:12:24,320 --> 00:12:26,160
it

00:12:24,639 --> 00:12:29,120
and that's what continuous delivery is

00:12:26,160 --> 00:12:29,519
about and and so today we're also seeing

00:12:29,120 --> 00:12:31,279
like

00:12:29,519 --> 00:12:33,120
there's a lot more of an ecosystem

00:12:31,279 --> 00:12:36,160
around supporting this right

00:12:33,120 --> 00:12:40,160
especially as it pertains to leveraging

00:12:36,160 --> 00:12:43,600
solutions like infrastructure as code to

00:12:40,160 --> 00:12:47,040
provision quickly vaults kms

00:12:43,600 --> 00:12:50,560
cyber arc to protect our secrets um

00:12:47,040 --> 00:12:51,120
also like even just general metrics like

00:12:50,560 --> 00:12:54,399
devops

00:12:51,120 --> 00:12:57,839
metrics and understanding for cicd

00:12:54,399 --> 00:12:59,600
that allow us to continuously improve

00:12:57,839 --> 00:13:00,880
and track like how are we doing in our

00:12:59,600 --> 00:13:03,200
cd process

00:13:00,880 --> 00:13:04,399
in our cicd process and then there's

00:13:03,200 --> 00:13:06,399
even things like well

00:13:04,399 --> 00:13:08,480
pipeline management how who has access

00:13:06,399 --> 00:13:10,399
to particular environments who has

00:13:08,480 --> 00:13:12,880
access to particular pipelines that

00:13:10,399 --> 00:13:15,040
deploy to particular environments right

00:13:12,880 --> 00:13:16,639
uh maybe it doesn't maybe you know the

00:13:15,040 --> 00:13:18,000
new person joining doesn't

00:13:16,639 --> 00:13:20,079
need to have access to that on their

00:13:18,000 --> 00:13:22,000
first day or

00:13:20,079 --> 00:13:24,079
maybe certain teams don't need to have

00:13:22,000 --> 00:13:26,560
access to other teams

00:13:24,079 --> 00:13:28,240
resources and so it's just something all

00:13:26,560 --> 00:13:30,399
to think about here

00:13:28,240 --> 00:13:32,320
that in in the world of software

00:13:30,399 --> 00:13:33,040
delivery there's actually already a lot

00:13:32,320 --> 00:13:36,240
going on

00:13:33,040 --> 00:13:40,320
right and so if we can build

00:13:36,240 --> 00:13:42,320
into our foundation of ci cd then we can

00:13:40,320 --> 00:13:43,839
actually achieve governance in a better

00:13:42,320 --> 00:13:45,680
way

00:13:43,839 --> 00:13:46,880
and so now that we understand more about

00:13:45,680 --> 00:13:48,880
ci cd

00:13:46,880 --> 00:13:50,480
i want to actually talk about governance

00:13:48,880 --> 00:13:54,000
and what it means

00:13:50,480 --> 00:13:56,000
because i i think when we talk about it

00:13:54,000 --> 00:13:58,399
governance specifically it's slightly

00:13:56,000 --> 00:13:59,519
different and it may encompass more than

00:13:58,399 --> 00:14:02,720
a typical

00:13:59,519 --> 00:14:03,839
conversation about governance or typical

00:14:02,720 --> 00:14:06,240
conversation

00:14:03,839 --> 00:14:08,160
around standards and i really think of

00:14:06,240 --> 00:14:10,320
it as kind of three areas that we think

00:14:08,160 --> 00:14:12,320
about when we think about i.t governance

00:14:10,320 --> 00:14:14,399
we're thinking about standards we're

00:14:12,320 --> 00:14:16,480
thinking about security and then we're

00:14:14,399 --> 00:14:19,440
also thinking about audits

00:14:16,480 --> 00:14:19,920
so um there's this umbrella term for

00:14:19,440 --> 00:14:22,720
govern

00:14:19,920 --> 00:14:23,600
i.t governance that covers three three

00:14:22,720 --> 00:14:26,639
of these areas

00:14:23,600 --> 00:14:27,920
and it's called grc governance risk and

00:14:26,639 --> 00:14:30,399
compliance

00:14:27,920 --> 00:14:31,760
and so when we talk about governance

00:14:30,399 --> 00:14:33,199
that's where we're talking about our

00:14:31,760 --> 00:14:35,920
standards right

00:14:33,199 --> 00:14:37,680
so uh just like we would set standards

00:14:35,920 --> 00:14:41,040
for a state of emergency

00:14:37,680 --> 00:14:41,440
uh in in the u.s right what happens when

00:14:41,040 --> 00:14:44,160
there

00:14:41,440 --> 00:14:44,560
is a earthquake or what happens when

00:14:44,160 --> 00:14:47,279
there

00:14:44,560 --> 00:14:48,480
is a hurricane right certain specific

00:14:47,279 --> 00:14:50,800
specific groups of people

00:14:48,480 --> 00:14:52,240
are set up specific camps are set up you

00:14:50,800 --> 00:14:53,600
know some people show up

00:14:52,240 --> 00:14:55,680
we have these things that are set in

00:14:53,600 --> 00:14:57,440
place notifications are sent out

00:14:55,680 --> 00:14:58,800
and so that's what governance is in a

00:14:57,440 --> 00:15:01,199
nutshell right we're set

00:14:58,800 --> 00:15:02,399
we're kind of preparing and setting up

00:15:01,199 --> 00:15:04,560
systems

00:15:02,399 --> 00:15:05,760
for people to be able to expect the

00:15:04,560 --> 00:15:07,920
unexpected

00:15:05,760 --> 00:15:10,720
um and then also setting up like the

00:15:07,920 --> 00:15:13,440
communication channels to deal with that

00:15:10,720 --> 00:15:15,199
and so governance is about setting these

00:15:13,440 --> 00:15:17,680
standards for what we want to do

00:15:15,199 --> 00:15:18,480
when we don't know what to do or when we

00:15:17,680 --> 00:15:21,600
can't predict

00:15:18,480 --> 00:15:23,440
unpredictable and so uh

00:15:21,600 --> 00:15:24,800
the reason why we do that is so that we

00:15:23,440 --> 00:15:28,000
can oversee

00:15:24,800 --> 00:15:29,839
a specific goals achieve specific goals

00:15:28,000 --> 00:15:31,199
and also maintain everything that we

00:15:29,839 --> 00:15:34,959
have

00:15:31,199 --> 00:15:37,279
in going on in our organizations

00:15:34,959 --> 00:15:39,600
so you know things like the solar winds

00:15:37,279 --> 00:15:42,560
hack happening to solar winds that's

00:15:39,600 --> 00:15:42,959
that's a really big hit right so what

00:15:42,560 --> 00:15:45,360
what

00:15:42,959 --> 00:15:46,880
communication channels did they have

00:15:45,360 --> 00:15:48,320
when they found out you know

00:15:46,880 --> 00:15:50,160
what were the different systems that

00:15:48,320 --> 00:15:53,040
they had to be able to look more

00:15:50,160 --> 00:15:54,000
deeply into the these uh the situation

00:15:53,040 --> 00:15:57,759
that's what governance

00:15:54,000 --> 00:16:00,399
is trying to discover and then we

00:15:57,759 --> 00:16:01,120
i want to cover risk the second part

00:16:00,399 --> 00:16:04,160
around risk

00:16:01,120 --> 00:16:04,880
is about security right so being able to

00:16:04,160 --> 00:16:07,920
identify

00:16:04,880 --> 00:16:11,040
potential risky behavior uh when we're

00:16:07,920 --> 00:16:14,079
delivering software you know what is

00:16:11,040 --> 00:16:15,120
you know like what happened in solar

00:16:14,079 --> 00:16:17,759
winds was that

00:16:15,120 --> 00:16:18,320
there was uh some people made mistakes

00:16:17,759 --> 00:16:20,399
right and

00:16:18,320 --> 00:16:22,079
that could be a certain level that could

00:16:20,399 --> 00:16:25,120
introduce a certain level of risk

00:16:22,079 --> 00:16:28,320
to your organization and so

00:16:25,120 --> 00:16:30,880
grc the risk part of grc is about

00:16:28,320 --> 00:16:32,480
rating and prioritizing risks and

00:16:30,880 --> 00:16:32,880
ensuring that people are aware of them

00:16:32,480 --> 00:16:34,480
right

00:16:32,880 --> 00:16:36,480
so that we can mitigate them in the

00:16:34,480 --> 00:16:37,759
future so that we do have systems in

00:16:36,480 --> 00:16:41,440
place to say like

00:16:37,759 --> 00:16:44,639
um hey our systems are not up to date or

00:16:41,440 --> 00:16:46,880
hey we have some configuration uh drift

00:16:44,639 --> 00:16:48,720
going on in our infrastructure

00:16:46,880 --> 00:16:50,720
this is how we this is the actions that

00:16:48,720 --> 00:16:54,160
we need to take so risk is

00:16:50,720 --> 00:16:58,000
really this a kind of action plan around

00:16:54,160 --> 00:17:01,199
how we identify how we can potentially

00:16:58,000 --> 00:17:03,360
secure better secure systems

00:17:01,199 --> 00:17:05,280
and on compliance i think people

00:17:03,360 --> 00:17:08,400
understand compliance pretty well

00:17:05,280 --> 00:17:09,439
uh because it's similar to how we work

00:17:08,400 --> 00:17:12,480
in the real world

00:17:09,439 --> 00:17:16,160
right uh our healthcare entities

00:17:12,480 --> 00:17:19,600
our um our standards for medication

00:17:16,160 --> 00:17:19,919
or practices uh is what compliance means

00:17:19,600 --> 00:17:22,400
right

00:17:19,919 --> 00:17:23,679
there's a certain level of expectations

00:17:22,400 --> 00:17:26,240
around vaccines

00:17:23,679 --> 00:17:26,880
a certain level of expectations around

00:17:26,240 --> 00:17:28,559
how

00:17:26,880 --> 00:17:30,480
drugs should work or how they should be

00:17:28,559 --> 00:17:32,000
taken right and so the drug

00:17:30,480 --> 00:17:33,600
manufacturers of vaccine

00:17:32,000 --> 00:17:35,520
manufacturers have to comply with those

00:17:33,600 --> 00:17:37,039
standards if there are standards right

00:17:35,520 --> 00:17:38,880
and so compliance is about meeting

00:17:37,039 --> 00:17:40,799
expectations and

00:17:38,880 --> 00:17:41,919
being able to prove that you meet those

00:17:40,799 --> 00:17:44,640
expectations

00:17:41,919 --> 00:17:46,559
uh because it's a science right we don't

00:17:44,640 --> 00:17:48,160
want someone to just say like handwave

00:17:46,559 --> 00:17:50,320
yeah works you know this vaccine is

00:17:48,160 --> 00:17:52,160
going to cure everybody when it doesn't

00:17:50,320 --> 00:17:54,320
and we need to know the percentage of

00:17:52,160 --> 00:17:57,120
effectiveness and so that means

00:17:54,320 --> 00:17:58,480
being able to document and log exactly

00:17:57,120 --> 00:18:00,080
how things were built

00:17:58,480 --> 00:18:01,840
when would they build why would they

00:18:00,080 --> 00:18:03,919
build what are the features

00:18:01,840 --> 00:18:05,600
what's going on to what's going on with

00:18:03,919 --> 00:18:08,640
their software services

00:18:05,600 --> 00:18:09,200
and even being able to do it to the

00:18:08,640 --> 00:18:12,160
extent

00:18:09,200 --> 00:18:14,240
of foolproofing any expectations that we

00:18:12,160 --> 00:18:17,600
may have in the future so

00:18:14,240 --> 00:18:19,200
as more current events happen as we

00:18:17,600 --> 00:18:22,160
change how we think about

00:18:19,200 --> 00:18:23,600
practices our expectations are going to

00:18:22,160 --> 00:18:26,559
change as well

00:18:23,600 --> 00:18:27,360
kovid changed how we uh how we perceive

00:18:26,559 --> 00:18:30,080
vaccines

00:18:27,360 --> 00:18:30,880
and our expectations around how how

00:18:30,080 --> 00:18:34,240
successful

00:18:30,880 --> 00:18:35,120
and how uh how they perform work and so

00:18:34,240 --> 00:18:38,080
maybe the compli

00:18:35,120 --> 00:18:39,280
the compliance levels and uh how we how

00:18:38,080 --> 00:18:41,440
we deal with

00:18:39,280 --> 00:18:42,559
even data or personal information those

00:18:41,440 --> 00:18:45,919
things will change

00:18:42,559 --> 00:18:47,679
and so we need to be able to improve

00:18:45,919 --> 00:18:48,720
continuously improve and also have the

00:18:47,679 --> 00:18:50,799
systems to

00:18:48,720 --> 00:18:52,320
be foolproof in the future and so this

00:18:50,799 --> 00:18:55,280
is grc

00:18:52,320 --> 00:18:56,400
and it governance and it's really about

00:18:55,280 --> 00:18:59,039
how you monitor

00:18:56,400 --> 00:19:00,160
and control your it capabilities and

00:18:59,039 --> 00:19:03,679
decisions

00:19:00,160 --> 00:19:05,760
when you're going to deliver

00:19:03,679 --> 00:19:07,600
and when we talk about devops when we

00:19:05,760 --> 00:19:08,240
talk about delivering software we're

00:19:07,600 --> 00:19:11,440
really

00:19:08,240 --> 00:19:13,200
talking about delivering value to key

00:19:11,440 --> 00:19:14,000
stakeholders right to our customers to

00:19:13,200 --> 00:19:16,640
the

00:19:14,000 --> 00:19:18,880
uh to the target audience of our

00:19:16,640 --> 00:19:20,720
software services

00:19:18,880 --> 00:19:22,559
and so there's two parts here that i

00:19:20,720 --> 00:19:24,799
want to break down further

00:19:22,559 --> 00:19:26,799
right this concept of being able to

00:19:24,799 --> 00:19:28,080
monitor and this concept around being

00:19:26,799 --> 00:19:29,840
able to control

00:19:28,080 --> 00:19:32,160
because we need both of these things

00:19:29,840 --> 00:19:35,600
right we need to be able to control

00:19:32,160 --> 00:19:37,679
uh a certain level of uh risk we need to

00:19:35,600 --> 00:19:40,480
be able to monitor certain level of risk

00:19:37,679 --> 00:19:43,840
same thing with compliance right we need

00:19:40,480 --> 00:19:45,600
to build these into our cicd systems

00:19:43,840 --> 00:19:48,240
and so this is the last part of the

00:19:45,600 --> 00:19:50,480
presentation that i want to cover

00:19:48,240 --> 00:19:51,280
and it goes into details about how you

00:19:50,480 --> 00:19:53,840
can build

00:19:51,280 --> 00:19:53,840
particular

00:19:54,559 --> 00:19:57,919
yeah so we had a question uh about do we

00:19:56,720 --> 00:20:01,679
get the slides

00:19:57,919 --> 00:20:04,240
um but i'll i'll i have a copy of them

00:20:01,679 --> 00:20:04,960
so i can i can send that out as well

00:20:04,240 --> 00:20:07,760
yeah

00:20:04,960 --> 00:20:08,159
that's super awesome um and and again

00:20:07,760 --> 00:20:10,240
yeah

00:20:08,159 --> 00:20:12,400
like you're not going to be able to

00:20:10,240 --> 00:20:13,039
introduce all these changes all at once

00:20:12,400 --> 00:20:15,440
right

00:20:13,039 --> 00:20:16,880
and it'll go back to saying like well

00:20:15,440 --> 00:20:19,600
what can we change or what

00:20:16,880 --> 00:20:20,640
what areas do we want to change right

00:20:19,600 --> 00:20:24,559
and so

00:20:20,640 --> 00:20:25,200
it'll be um it'll be interesting to go

00:20:24,559 --> 00:20:28,480
over

00:20:25,200 --> 00:20:30,640
some of these practices and

00:20:28,480 --> 00:20:32,640
do them in a way where it makes sense

00:20:30,640 --> 00:20:34,159
for you and your part of the software

00:20:32,640 --> 00:20:36,320
development lifecycle

00:20:34,159 --> 00:20:37,840
again like delivering software is not

00:20:36,320 --> 00:20:41,360
just one person's

00:20:37,840 --> 00:20:43,360
responsibility security code quality

00:20:41,360 --> 00:20:44,799
performance that's not just one person's

00:20:43,360 --> 00:20:46,240
responsibility right these are

00:20:44,799 --> 00:20:46,880
cross-functional teams these are

00:20:46,240 --> 00:20:48,159
different

00:20:46,880 --> 00:20:49,760
groups of people who are working

00:20:48,159 --> 00:20:50,960
together to deliver something really

00:20:49,760 --> 00:20:53,919
awesome

00:20:50,960 --> 00:20:55,440
and so you may take some of these

00:20:53,919 --> 00:20:57,280
practices with a grain of salt saying

00:20:55,440 --> 00:20:57,760
like hey i have nothing to do with the

00:20:57,280 --> 00:20:59,360
system

00:20:57,760 --> 00:21:01,600
or i'm not the person who makes

00:20:59,360 --> 00:21:04,720
decisions but i do make decisions and

00:21:01,600 --> 00:21:06,240
how we develop code how we do it with uh

00:21:04,720 --> 00:21:08,400
secure practices

00:21:06,240 --> 00:21:10,240
so this is these are the steps i'm going

00:21:08,400 --> 00:21:12,559
to take to do that

00:21:10,240 --> 00:21:13,760
and so that's why i broke this down in

00:21:12,559 --> 00:21:15,520
different parts of the software

00:21:13,760 --> 00:21:16,799
development lifecycle

00:21:15,520 --> 00:21:18,960
so that you can kind of pick and choose

00:21:16,799 --> 00:21:22,159
where where you can make that change and

00:21:18,960 --> 00:21:22,960
where you can make impact so this is the

00:21:22,159 --> 00:21:25,039
build phase

00:21:22,960 --> 00:21:26,720
and then the build phase this is earlier

00:21:25,039 --> 00:21:29,440
on right this is when you have

00:21:26,720 --> 00:21:30,640
a feature developed and now you you're

00:21:29,440 --> 00:21:32,559
just ready to

00:21:30,640 --> 00:21:34,400
go forward right you're it's the end of

00:21:32,559 --> 00:21:35,840
the sprint you want to integrate it to

00:21:34,400 --> 00:21:37,840
the rest of the code base

00:21:35,840 --> 00:21:39,039
potentially it could this could be

00:21:37,840 --> 00:21:40,000
released this could be a release

00:21:39,039 --> 00:21:41,360
candidate this could be

00:21:40,000 --> 00:21:43,520
you know the change that's going to go

00:21:41,360 --> 00:21:45,360
out to customers um it could

00:21:43,520 --> 00:21:47,760
not be could just be one step towards

00:21:45,360 --> 00:21:51,039
that right whatever it may happen to be

00:21:47,760 --> 00:21:53,520
in this build face that we trigger uh we

00:21:51,039 --> 00:21:54,559
we have some code and we're ready to go

00:21:53,520 --> 00:21:56,080
and so what can you do

00:21:54,559 --> 00:21:57,760
in this process there's a couple of

00:21:56,080 --> 00:22:00,400
things that i really recommend

00:21:57,760 --> 00:22:01,120
the first one is just static code

00:22:00,400 --> 00:22:03,200
analysis

00:22:01,120 --> 00:22:04,480
so this is a screenshot of something

00:22:03,200 --> 00:22:05,840
called sonar cube

00:22:04,480 --> 00:22:08,559
they have an open source version i'm

00:22:05,840 --> 00:22:12,159
pretty sure as well and what happens is

00:22:08,559 --> 00:22:15,600
these tools will look at your

00:22:12,159 --> 00:22:17,440
code your source code and

00:22:15,600 --> 00:22:18,640
analyze it for things like potential

00:22:17,440 --> 00:22:21,919
vulnerabilities so

00:22:18,640 --> 00:22:24,840
if you're doing things like hard-coding

00:22:21,919 --> 00:22:26,559
any sensitive information or

00:22:24,840 --> 00:22:29,600
infrastructure information

00:22:26,559 --> 00:22:31,360
into your application code if you are

00:22:29,600 --> 00:22:33,840
potentially using secrets and

00:22:31,360 --> 00:22:35,360
it like doesn't look right um in terms

00:22:33,840 --> 00:22:36,960
of how you're using the libraries or any

00:22:35,360 --> 00:22:38,559
of your dependencies

00:22:36,960 --> 00:22:40,480
uh it'll actually tell you and flag

00:22:38,559 --> 00:22:41,039
those and actually gives you a grade too

00:22:40,480 --> 00:22:43,679
so

00:22:41,039 --> 00:22:45,440
and here like you pass the quality gates

00:22:43,679 --> 00:22:47,520
but you have 11

00:22:45,440 --> 00:22:48,640
vulnerabilities and you got a score of a

00:22:47,520 --> 00:22:51,440
d and then

00:22:48,640 --> 00:22:52,960
you have some bugs and they rate it a c

00:22:51,440 --> 00:22:55,120
so you can kind of look at that

00:22:52,960 --> 00:22:56,240
they also give you things like code

00:22:55,120 --> 00:22:59,600
smells so

00:22:56,240 --> 00:23:03,760
potentially like some inclinations that

00:22:59,600 --> 00:23:06,720
your code may not be as robust or as

00:23:03,760 --> 00:23:08,240
elegant as you may want it to be and

00:23:06,720 --> 00:23:11,120
these are really great because

00:23:08,240 --> 00:23:11,919
it doesn't only look at your code that

00:23:11,120 --> 00:23:13,919
you wrote

00:23:11,919 --> 00:23:15,200
but also like other people's code the

00:23:13,919 --> 00:23:18,400
entire source code

00:23:15,200 --> 00:23:20,799
the code base entire code base itself

00:23:18,400 --> 00:23:22,000
and some other things that people will

00:23:20,799 --> 00:23:24,159
do in the build phase will

00:23:22,000 --> 00:23:25,280
also be doing things like scanning for

00:23:24,159 --> 00:23:28,559
secrets

00:23:25,280 --> 00:23:30,720
so you know your secrets lie in various

00:23:28,559 --> 00:23:33,919
places of your application code so

00:23:30,720 --> 00:23:34,880
a nice thing to do is also like run run

00:23:33,919 --> 00:23:37,200
scanners

00:23:34,880 --> 00:23:38,000
on the part packaged artifact that you

00:23:37,200 --> 00:23:40,320
have

00:23:38,000 --> 00:23:41,919
and be able to detect like do we have

00:23:40,320 --> 00:23:44,159
vulnerabilities or not

00:23:41,919 --> 00:23:45,520
and the reason why you want to do this

00:23:44,159 --> 00:23:48,159
is um

00:23:45,520 --> 00:23:48,960
not only because you may not trust your

00:23:48,159 --> 00:23:50,640
code or

00:23:48,960 --> 00:23:52,000
someone else it's not really about that

00:23:50,640 --> 00:23:53,440
right it's not really about

00:23:52,000 --> 00:23:55,600
that you don't trust the code that you

00:23:53,440 --> 00:23:58,799
write or you don't trust your team

00:23:55,600 --> 00:24:00,480
but it's it's a sense that um we

00:23:58,799 --> 00:24:02,080
use more than just the code that we

00:24:00,480 --> 00:24:04,080
write and so

00:24:02,080 --> 00:24:06,480
there was actually a study that looked

00:24:04,080 --> 00:24:08,000
at the most popular

00:24:06,480 --> 00:24:09,440
applications in the enterprise market

00:24:08,000 --> 00:24:10,320
today you know the code that you use

00:24:09,440 --> 00:24:14,080
every day

00:24:10,320 --> 00:24:17,520
and they actually noticed that 96

00:24:14,080 --> 00:24:20,559
of the most popular applications

00:24:17,520 --> 00:24:21,760
currently use open source software and

00:24:20,559 --> 00:24:24,480
there was another study

00:24:21,760 --> 00:24:24,799
that said and this was all written in

00:24:24,480 --> 00:24:27,279
the

00:24:24,799 --> 00:24:28,000
article and so in the same article we

00:24:27,279 --> 00:24:30,440
said that

00:24:28,000 --> 00:24:32,000
there was more than 4 000 security

00:24:30,440 --> 00:24:35,120
vulnerabilities

00:24:32,000 --> 00:24:35,919
discovered in open source projects a

00:24:35,120 --> 00:24:37,600
year

00:24:35,919 --> 00:24:40,799
and so that dependency that you may be

00:24:37,600 --> 00:24:43,840
using or that new runtime of python

00:24:40,799 --> 00:24:46,159
may actually be compromised

00:24:43,840 --> 00:24:47,679
and so when we build our systems to be

00:24:46,159 --> 00:24:49,600
able to detect these kinds of

00:24:47,679 --> 00:24:51,360
mistakes ahead of time then we don't

00:24:49,600 --> 00:24:53,600
have to worry if

00:24:51,360 --> 00:24:54,720
um then we don't have to worry as much

00:24:53,600 --> 00:24:58,000
about well

00:24:54,720 --> 00:25:00,480
um you know what happens if there is

00:24:58,000 --> 00:25:01,120
a security vulnerability that happens

00:25:00,480 --> 00:25:04,640
like

00:25:01,120 --> 00:25:06,880
uh like it did in the solar winds hack

00:25:04,640 --> 00:25:08,320
you know question here in what phase of

00:25:06,880 --> 00:25:10,240
the development cycle

00:25:08,320 --> 00:25:11,440
do you monitor and control i was

00:25:10,240 --> 00:25:12,559
thinking it would be done after

00:25:11,440 --> 00:25:16,240
releasing

00:25:12,559 --> 00:25:16,880
the software yeah so you definitely

00:25:16,240 --> 00:25:20,080
monitor

00:25:16,880 --> 00:25:23,760
and control um

00:25:20,080 --> 00:25:25,360
your applications after you deploy right

00:25:23,760 --> 00:25:26,960
after you've done a production release

00:25:25,360 --> 00:25:29,279
people will you know

00:25:26,960 --> 00:25:31,039
monitor how the application is working

00:25:29,279 --> 00:25:32,400
maybe for the next 24 hours

00:25:31,039 --> 00:25:34,080
you know if there are any major

00:25:32,400 --> 00:25:37,360
incidents people will be on call

00:25:34,080 --> 00:25:40,720
and that kind of thing but i think it's

00:25:37,360 --> 00:25:43,840
really important to build

00:25:40,720 --> 00:25:47,600
some of those checks earlier on right so

00:25:43,840 --> 00:25:48,720
like that solar sonar cube uh program

00:25:47,600 --> 00:25:50,159
was the one that checks for

00:25:48,720 --> 00:25:50,880
vulnerabilities that was another

00:25:50,159 --> 00:25:52,880
question

00:25:50,880 --> 00:25:54,400
um you know being able to have just

00:25:52,880 --> 00:25:56,640
something as simple as a scan

00:25:54,400 --> 00:25:58,960
and and like sometimes it only takes

00:25:56,640 --> 00:26:01,279
like like two minutes to scan right

00:25:58,960 --> 00:26:02,159
and be able to detect hey there's a

00:26:01,279 --> 00:26:03,919
there's a

00:26:02,159 --> 00:26:05,840
vulnerability or be able to monitor

00:26:03,919 --> 00:26:09,039
potential issues

00:26:05,840 --> 00:26:10,799
right and control them um and i kind of

00:26:09,039 --> 00:26:14,159
think of governance as

00:26:10,799 --> 00:26:18,240
a set of controls at the end of the day

00:26:14,159 --> 00:26:20,080
at least ci cd governance because

00:26:18,240 --> 00:26:21,919
imagine having a ci pipeline with no

00:26:20,080 --> 00:26:23,440
tests

00:26:21,919 --> 00:26:25,679
there's no way that you know that what

00:26:23,440 --> 00:26:26,320
you integrated works aside from the fact

00:26:25,679 --> 00:26:29,360
that

00:26:26,320 --> 00:26:32,640
it compiles right and so a form

00:26:29,360 --> 00:26:33,679
a form of control can also be quality

00:26:32,640 --> 00:26:35,200
gates

00:26:33,679 --> 00:26:36,880
and i'll actually talk about that a

00:26:35,200 --> 00:26:38,000
little bit more because there are a

00:26:36,880 --> 00:26:40,159
couple organizations

00:26:38,000 --> 00:26:41,360
that are doing automated ci cd

00:26:40,159 --> 00:26:44,400
governance

00:26:41,360 --> 00:26:47,360
and they kind of listed out like how

00:26:44,400 --> 00:26:48,480
they set monitoring and controlling

00:26:47,360 --> 00:26:50,400
capabilities

00:26:48,480 --> 00:26:53,279
in their ci cd pipelines so that's a

00:26:50,400 --> 00:26:56,640
really great question

00:26:53,279 --> 00:27:00,080
thanks everyone so

00:26:56,640 --> 00:27:03,840
um where was i yes

00:27:00,080 --> 00:27:05,679
so there are issues uh in in codes

00:27:03,840 --> 00:27:07,279
there's vulnerabilities in code and they

00:27:05,679 --> 00:27:11,200
can pretty much happen everywhere

00:27:07,279 --> 00:27:13,120
um even if it's not your code and so

00:27:11,200 --> 00:27:14,320
that was kind of the case for microsoft

00:27:13,120 --> 00:27:16,799
right this was actually

00:27:14,320 --> 00:27:17,600
a blog post they had written after they

00:27:16,799 --> 00:27:20,320
noticed

00:27:17,600 --> 00:27:21,440
after the solarwinds hack had been

00:27:20,320 --> 00:27:23,360
announced and they were

00:27:21,440 --> 00:27:24,960
investigating it so they actually wrote

00:27:23,360 --> 00:27:26,960
a blog post trying to figure out

00:27:24,960 --> 00:27:28,559
well what exactly happened and why were

00:27:26,960 --> 00:27:30,159
they compromised

00:27:28,559 --> 00:27:32,080
just because they were the ones that had

00:27:30,159 --> 00:27:34,720
used solar winds

00:27:32,080 --> 00:27:36,559
and they had to look um you know they

00:27:34,720 --> 00:27:38,080
had to comply and say like hey you know

00:27:36,559 --> 00:27:40,320
we need to figure out who else was

00:27:38,080 --> 00:27:42,480
impacted because we were impacted

00:27:40,320 --> 00:27:43,679
and again it was this daisy chain right

00:27:42,480 --> 00:27:45,679
effect

00:27:43,679 --> 00:27:46,720
and so actually uh you don't have to pay

00:27:45,679 --> 00:27:48,880
too much mind to

00:27:46,720 --> 00:27:51,120
this screen cap but because i'll review

00:27:48,880 --> 00:27:55,600
it but essentially what happened was

00:27:51,120 --> 00:27:58,880
there was a library dll component within

00:27:55,600 --> 00:28:02,000
solarwinds that was

00:27:58,880 --> 00:28:05,600
that was hacked because that code

00:28:02,000 --> 00:28:08,240
base was in a github repository that had

00:28:05,600 --> 00:28:09,120
an exposed secret and so what happened

00:28:08,240 --> 00:28:11,919
was

00:28:09,120 --> 00:28:13,360
a attacker injected code into that

00:28:11,919 --> 00:28:17,120
library

00:28:13,360 --> 00:28:20,320
and that library when it ran executed

00:28:17,120 --> 00:28:22,480
it would actually initiate a backdoor

00:28:20,320 --> 00:28:24,159
server that would send any information

00:28:22,480 --> 00:28:26,720
that was going through solarwinds to

00:28:24,159 --> 00:28:29,039
that backdoor service

00:28:26,720 --> 00:28:29,840
and so i actually have a screenshot of

00:28:29,039 --> 00:28:32,960
what

00:28:29,840 --> 00:28:34,480
microsoft investigated and noticed was

00:28:32,960 --> 00:28:36,159
that in the original function

00:28:34,480 --> 00:28:38,000
there was actually an injected function

00:28:36,159 --> 00:28:40,399
here that

00:28:38,000 --> 00:28:41,520
started up a server right and this was

00:28:40,399 --> 00:28:43,279
the back door

00:28:41,520 --> 00:28:46,399
that any any information that went

00:28:43,279 --> 00:28:46,399
through it would send it over

00:28:48,880 --> 00:28:53,600
so this is what happened um in the solar

00:28:52,320 --> 00:28:57,679
winds hack

00:28:53,600 --> 00:29:01,840
and i think a lot of different

00:28:57,679 --> 00:29:04,320
a lot of different software services

00:29:01,840 --> 00:29:05,760
and just organizations that were a part

00:29:04,320 --> 00:29:08,320
of this process the process for

00:29:05,760 --> 00:29:11,679
delivering software were implicated

00:29:08,320 --> 00:29:12,080
for example uh solarwinds was using a ci

00:29:11,679 --> 00:29:15,440
tool

00:29:12,080 --> 00:29:16,960
called team city and so now

00:29:15,440 --> 00:29:18,799
the government doesn't want to use team

00:29:16,960 --> 00:29:22,880
city doesn't want to use

00:29:18,799 --> 00:29:26,080
um jetbrains or intellij

00:29:22,880 --> 00:29:29,200
i think it's jetbrains yeah jetbrains

00:29:26,080 --> 00:29:32,480
anymore because it

00:29:29,200 --> 00:29:34,880
led to a vulnerability right

00:29:32,480 --> 00:29:35,760
i'm not sure what solar solar winds this

00:29:34,880 --> 00:29:39,200
one is

00:29:35,760 --> 00:29:41,440
java so

00:29:39,200 --> 00:29:42,799
uh we had a question that asked uh if

00:29:41,440 --> 00:29:47,039
solarwinds was built on

00:29:42,799 --> 00:29:47,039
python uh this one's java

00:29:47,440 --> 00:29:52,960
great question so this this just kind of

00:29:51,279 --> 00:29:56,080
goes to say like

00:29:52,960 --> 00:29:57,679
you know you're even though the ci

00:29:56,080 --> 00:29:59,600
the team city there is you know there

00:29:57,679 --> 00:30:02,000
was no compromise in team city

00:29:59,600 --> 00:30:02,720
it still led to a compromise right it

00:30:02,000 --> 00:30:06,159
still

00:30:02,720 --> 00:30:09,279
built that code base and

00:30:06,159 --> 00:30:12,320
shipped it out and so

00:30:09,279 --> 00:30:14,159
at any kind of process at any point in

00:30:12,320 --> 00:30:17,760
our delivery process

00:30:14,159 --> 00:30:21,840
we can get we can get our secrets

00:30:17,760 --> 00:30:25,600
our important information compromised

00:30:21,840 --> 00:30:28,720
so it can be as simple as a plain text

00:30:25,600 --> 00:30:32,880
password and a github repository

00:30:28,720 --> 00:30:36,399
or bitbucket repository or it can be

00:30:32,880 --> 00:30:39,279
a ci server that's using an app uh

00:30:36,399 --> 00:30:40,960
a secret but it's not encrypted it's

00:30:39,279 --> 00:30:43,520
just plain text secret

00:30:40,960 --> 00:30:44,000
it could also be artifact repository or

00:30:43,520 --> 00:30:47,840
even an

00:30:44,000 --> 00:30:50,960
orchestrator that's using plain text

00:30:47,840 --> 00:30:54,240
they can they can look into

00:30:50,960 --> 00:30:57,519
they can hack a particular node

00:30:54,240 --> 00:30:58,880
in a particular environment right

00:30:57,519 --> 00:31:00,559
and get a gain access to your

00:30:58,880 --> 00:31:02,399
application

00:31:00,559 --> 00:31:04,720
and so there's application secrets that

00:31:02,399 --> 00:31:06,159
live everywhere and we need to be able

00:31:04,720 --> 00:31:09,519
to acknowledge that

00:31:06,159 --> 00:31:10,159
and be foolproof to even just simple

00:31:09,519 --> 00:31:13,600
mistakes

00:31:10,159 --> 00:31:13,600
looking things complain tax

00:31:14,480 --> 00:31:21,279
so one thing that i recommend

00:31:17,679 --> 00:31:23,519
for people who have ci cd pipelines

00:31:21,279 --> 00:31:24,559
who are creating resources creating

00:31:23,519 --> 00:31:26,720
different

00:31:24,559 --> 00:31:28,320
resources for their application teams to

00:31:26,720 --> 00:31:30,799
be able to deliver

00:31:28,320 --> 00:31:33,279
is just to introduce something as simple

00:31:30,799 --> 00:31:36,480
as well base access control

00:31:33,279 --> 00:31:39,519
right this can be based on user groups

00:31:36,480 --> 00:31:41,919
right it can be based off of

00:31:39,519 --> 00:31:43,679
your organizational layout right what

00:31:41,919 --> 00:31:45,679
team you're under

00:31:43,679 --> 00:31:47,120
and you can apply it to different parts

00:31:45,679 --> 00:31:49,120
of

00:31:47,120 --> 00:31:51,360
your software delivery process you can

00:31:49,120 --> 00:31:53,200
apply it to particular environments

00:31:51,360 --> 00:31:54,640
you can apply it for particular types of

00:31:53,200 --> 00:31:57,200
deployments

00:31:54,640 --> 00:31:59,519
you know you can say like hey team a

00:31:57,200 --> 00:32:03,919
doesn't need to have permissions

00:31:59,519 --> 00:32:06,000
to control create update

00:32:03,919 --> 00:32:07,039
anything related to team b's

00:32:06,000 --> 00:32:08,720
applications

00:32:07,039 --> 00:32:10,240
they shouldn't even be able to execute a

00:32:08,720 --> 00:32:12,840
pipeline or

00:32:10,240 --> 00:32:14,480
half of a pipeline for another team's

00:32:12,840 --> 00:32:16,399
applications right

00:32:14,480 --> 00:32:17,519
so you need to be able to do that as

00:32:16,399 --> 00:32:19,039
well

00:32:17,519 --> 00:32:21,519
and that's actually something that

00:32:19,039 --> 00:32:23,600
solarwinds did not do well

00:32:21,519 --> 00:32:25,039
and i think you can tell based off of

00:32:23,600 --> 00:32:27,039
some of the reports and

00:32:25,039 --> 00:32:28,320
i'm just trying to investigate like what

00:32:27,039 --> 00:32:29,919
happened

00:32:28,320 --> 00:32:31,519
you know and and at one point i think

00:32:29,919 --> 00:32:33,360
they tried to blame an intern saying

00:32:31,519 --> 00:32:36,159
like yeah this person

00:32:33,360 --> 00:32:37,440
it's like uh and and i think one of the

00:32:36,159 --> 00:32:40,640
actions that they took

00:32:37,440 --> 00:32:42,559
earlier on was just also uh

00:32:40,640 --> 00:32:43,760
they said they had released a report

00:32:42,559 --> 00:32:46,080
saying like yeah we

00:32:43,760 --> 00:32:48,159
we took action and now we're limiting

00:32:46,080 --> 00:32:51,120
who has access to all of these

00:32:48,159 --> 00:32:53,360
resources and i mean they should have

00:32:51,120 --> 00:32:54,880
done that earlier right

00:32:53,360 --> 00:32:56,480
and so that's something to note it's

00:32:54,880 --> 00:32:59,120
just that you have different

00:32:56,480 --> 00:32:59,919
resources you have different things like

00:32:59,120 --> 00:33:02,880
uh different

00:32:59,919 --> 00:33:03,600
um even just views like an admin view a

00:33:02,880 --> 00:33:06,640
billing view

00:33:03,600 --> 00:33:07,200
security view maybe no maybe only one or

00:33:06,640 --> 00:33:08,840
two people

00:33:07,200 --> 00:33:10,399
need access to that not the whole

00:33:08,840 --> 00:33:12,480
organization

00:33:10,399 --> 00:33:14,240
so this is this is about role-based

00:33:12,480 --> 00:33:16,720
access control for our software delivery

00:33:14,240 --> 00:33:16,720
pipelines

00:33:17,360 --> 00:33:20,720
all right so i want to get to this test

00:33:19,840 --> 00:33:22,840
phase

00:33:20,720 --> 00:33:24,320
um we mentioned earlier about quality

00:33:22,840 --> 00:33:26,240
gates

00:33:24,320 --> 00:33:27,840
um and and even thinking about it from

00:33:26,240 --> 00:33:30,880
the perspective of okay

00:33:27,840 --> 00:33:33,360
well our application co like

00:33:30,880 --> 00:33:35,360
we've run unit tests now we know that

00:33:33,360 --> 00:33:37,679
functions work as expected

00:33:35,360 --> 00:33:39,600
you know have some type of performance

00:33:37,679 --> 00:33:41,279
meet some type of performance criteria

00:33:39,600 --> 00:33:42,640
et cetera et cetera well how do they

00:33:41,279 --> 00:33:44,799
work with other

00:33:42,640 --> 00:33:46,320
services if they're in a microservices

00:33:44,799 --> 00:33:48,960
architecture or if they're in a

00:33:46,320 --> 00:33:49,600
coupled architecture how do they work

00:33:48,960 --> 00:33:50,960
and so

00:33:49,600 --> 00:33:53,440
there's a couple of different ways that

00:33:50,960 --> 00:33:55,760
you can test right you can test

00:33:53,440 --> 00:33:58,159
white box from the white box or black

00:33:55,760 --> 00:34:01,279
box so in black box testing

00:33:58,159 --> 00:34:02,799
you know you don't really you you write

00:34:01,279 --> 00:34:04,880
the tests with the assumption that you

00:34:02,799 --> 00:34:06,720
don't know what the implementations are

00:34:04,880 --> 00:34:08,560
right you don't know what language it's

00:34:06,720 --> 00:34:10,480
coded and you just

00:34:08,560 --> 00:34:11,839
you just create those unit tests in

00:34:10,480 --> 00:34:14,159
white box testing

00:34:11,839 --> 00:34:15,679
you want to ensure that like certain

00:34:14,159 --> 00:34:19,200
particular major parts

00:34:15,679 --> 00:34:21,040
of um the code base or particular parts

00:34:19,200 --> 00:34:24,000
of the code base are tested

00:34:21,040 --> 00:34:24,399
right that we we know that this works

00:34:24,000 --> 00:34:26,240
without

00:34:24,399 --> 00:34:27,359
a beyond a doubt and that's important

00:34:26,240 --> 00:34:28,960
right if you're going to reuse a

00:34:27,359 --> 00:34:31,280
particular part of code

00:34:28,960 --> 00:34:33,520
or if you you want to make sure that uh

00:34:31,280 --> 00:34:35,919
one part of code never changes

00:34:33,520 --> 00:34:37,119
and then blocked my box unit testing can

00:34:35,919 --> 00:34:38,960
be really helpful

00:34:37,119 --> 00:34:40,720
and then automating this process is also

00:34:38,960 --> 00:34:43,119
a really big thing right so

00:34:40,720 --> 00:34:44,480
creating test suites ensuring that we

00:34:43,119 --> 00:34:46,960
have code coverage

00:34:44,480 --> 00:34:48,079
i've seen so many times when people have

00:34:46,960 --> 00:34:50,960
a pipeline

00:34:48,079 --> 00:34:52,399
a bill pipeline and they don't keep up

00:34:50,960 --> 00:34:54,399
with the unit tests

00:34:52,399 --> 00:34:56,240
so after a while they just turn off unit

00:34:54,399 --> 00:34:58,320
tests and they have the ci pipeline that

00:34:56,240 --> 00:35:00,079
doesn't have any tests and it's like

00:34:58,320 --> 00:35:02,160
how do you how do you know that it

00:35:00,079 --> 00:35:03,920
actually works do you know that actually

00:35:02,160 --> 00:35:06,000
works

00:35:03,920 --> 00:35:08,320
you don't want to wait until you find

00:35:06,000 --> 00:35:10,880
out a customer finds out right

00:35:08,320 --> 00:35:11,680
so this is one good example of how

00:35:10,880 --> 00:35:13,440
people will

00:35:11,680 --> 00:35:15,520
ensure that they have governance so

00:35:13,440 --> 00:35:18,880
they'll say like okay one of my controls

00:35:15,520 --> 00:35:21,200
is this a set of unit tests and so my

00:35:18,880 --> 00:35:22,079
association or the fact that i know that

00:35:21,200 --> 00:35:23,200
this works

00:35:22,079 --> 00:35:25,359
which is what i need to say in

00:35:23,200 --> 00:35:28,000
governance right is that

00:35:25,359 --> 00:35:30,720
i know i succeed my ci pipeline when all

00:35:28,000 --> 00:35:32,160
tests have been executed and they pass

00:35:30,720 --> 00:35:34,480
it doesn't make sense for you to have a

00:35:32,160 --> 00:35:36,800
ci cd pipeline and just say well

00:35:34,480 --> 00:35:38,160
you know half of our tests pass so we're

00:35:36,800 --> 00:35:40,240
just going to go and deploy

00:35:38,160 --> 00:35:41,599
right what kinds of standards are you

00:35:40,240 --> 00:35:44,640
trying to meet

00:35:41,599 --> 00:35:46,240
and so if if it is like if

00:35:44,640 --> 00:35:48,079
if that is how you want to govern your

00:35:46,240 --> 00:35:48,720
uh software services and you say like oh

00:35:48,079 --> 00:35:51,359
only 50

00:35:48,720 --> 00:35:52,800
have to pass okay that's what your

00:35:51,359 --> 00:35:55,119
association is

00:35:52,800 --> 00:35:57,599
but again like we need to be able to say

00:35:55,119 --> 00:35:59,440
some of these things ahead of time right

00:35:57,599 --> 00:36:00,640
another one is just clean dependencies

00:35:59,440 --> 00:36:02,960
right an

00:36:00,640 --> 00:36:04,560
association might be all dependencies in

00:36:02,960 --> 00:36:07,280
this build are free

00:36:04,560 --> 00:36:08,079
of known security defects so we've run

00:36:07,280 --> 00:36:11,119
our tests

00:36:08,079 --> 00:36:12,000
you know if it works or not so these are

00:36:11,119 --> 00:36:14,000
just examples

00:36:12,000 --> 00:36:15,040
of ways that you can set controls and

00:36:14,000 --> 00:36:17,760
then monitor

00:36:15,040 --> 00:36:18,800
hey do i have this working or not you

00:36:17,760 --> 00:36:21,280
know and and so

00:36:18,800 --> 00:36:22,800
our ci pipeline can be our monitor you

00:36:21,280 --> 00:36:23,760
know our dashboard that says pass or

00:36:22,800 --> 00:36:25,760
fail

00:36:23,760 --> 00:36:26,880
say i pipeline pass or fail that's how

00:36:25,760 --> 00:36:28,320
we know and then

00:36:26,880 --> 00:36:29,920
it has a little report that says all

00:36:28,320 --> 00:36:32,240
tests executed and passed

00:36:29,920 --> 00:36:33,359
right are our unit test suites that we

00:36:32,240 --> 00:36:36,960
have junit

00:36:33,359 --> 00:36:38,800
five um i'm not sure what it is in

00:36:36,960 --> 00:36:41,359
python but

00:36:38,800 --> 00:36:42,560
right we have we have units we have unit

00:36:41,359 --> 00:36:45,520
test suites that say like

00:36:42,560 --> 00:36:47,280
yeah all tests pass that that's an

00:36:45,520 --> 00:36:48,079
association that's a way of monitoring

00:36:47,280 --> 00:36:49,760
do i have

00:36:48,079 --> 00:36:51,680
did i achieve the results that i wanted

00:36:49,760 --> 00:36:54,160
to result to achieve

00:36:51,680 --> 00:36:54,960
did i did i achieve the results that i

00:36:54,160 --> 00:36:58,000
wanted

00:36:54,960 --> 00:37:01,280
right all right

00:36:58,000 --> 00:37:03,920
so i think this is the last part

00:37:01,280 --> 00:37:04,640
yes this is the last part last kind of

00:37:03,920 --> 00:37:07,440
section

00:37:04,640 --> 00:37:08,320
for practices that you can use to employ

00:37:07,440 --> 00:37:10,880
governance

00:37:08,320 --> 00:37:11,839
and this is in the deployment phase so

00:37:10,880 --> 00:37:14,720
we mentioned

00:37:11,839 --> 00:37:16,320
uh earlier like you know we have this

00:37:14,720 --> 00:37:18,160
artifact that we're going to deploy into

00:37:16,320 --> 00:37:20,720
a service right

00:37:18,160 --> 00:37:22,240
we're going to deploy into a server now

00:37:20,720 --> 00:37:26,960
we have to provision configure

00:37:22,240 --> 00:37:26,960
and then deliver it right so

00:37:28,160 --> 00:37:31,839
there's a couple practices that you want

00:37:29,440 --> 00:37:33,599
to have here uh the first thing

00:37:31,839 --> 00:37:35,440
is around being able to verify and test

00:37:33,599 --> 00:37:37,359
your configurations work as

00:37:35,440 --> 00:37:40,480
as they should so you need to be able to

00:37:37,359 --> 00:37:43,040
document and figure out well

00:37:40,480 --> 00:37:44,720
is this particular server configured

00:37:43,040 --> 00:37:46,480
with things i need to configure it with

00:37:44,720 --> 00:37:48,400
you know if it's running nginx is that

00:37:46,480 --> 00:37:49,200
configured what is the password that

00:37:48,400 --> 00:37:52,240
you're using

00:37:49,200 --> 00:37:54,160
right if it's admin 123 it may be a

00:37:52,240 --> 00:37:56,160
security vulnerability

00:37:54,160 --> 00:37:57,920
and undoing things for your application

00:37:56,160 --> 00:37:59,359
itself so there's kind of twofold

00:37:57,920 --> 00:38:00,800
looking at your infrastructure

00:37:59,359 --> 00:38:02,160
and then looking at your actual

00:38:00,800 --> 00:38:03,440
applications so doing things like

00:38:02,160 --> 00:38:05,760
penetration testing

00:38:03,440 --> 00:38:08,400
system tests vulnerability scanning

00:38:05,760 --> 00:38:08,400
while it's running

00:38:10,000 --> 00:38:13,760
yeah on which platform will you deploy

00:38:12,400 --> 00:38:15,280
right

00:38:13,760 --> 00:38:17,119
there are different ways to test your

00:38:15,280 --> 00:38:20,480
configurations for different platforms

00:38:17,119 --> 00:38:20,480
for different cloud providers

00:38:20,960 --> 00:38:24,400
we have a question here suppose we have

00:38:22,560 --> 00:38:26,160
an internal gateway which inspects

00:38:24,400 --> 00:38:28,480
inbound on outbound traffic

00:38:26,160 --> 00:38:30,240
if we already deployed such production

00:38:28,480 --> 00:38:33,200
do we need extra ci cd

00:38:30,240 --> 00:38:35,760
production despite static code analysis

00:38:33,200 --> 00:38:35,760
and tests

00:38:41,280 --> 00:38:47,839
if we have yeah that's a great question

00:38:51,280 --> 00:38:57,680
yeah i think it depends on your uh

00:38:54,640 --> 00:38:58,640
actual software service right because if

00:38:57,680 --> 00:39:01,440
yours is not

00:38:58,640 --> 00:39:02,960
uh running it's not like a service that

00:39:01,440 --> 00:39:06,320
other people consume

00:39:02,960 --> 00:39:08,560
um uh as like a ui or

00:39:06,320 --> 00:39:10,079
something that's running right if it's

00:39:08,560 --> 00:39:11,520
like an api

00:39:10,079 --> 00:39:13,359
that's good that gets compromised

00:39:11,520 --> 00:39:17,520
because you don't have

00:39:13,359 --> 00:39:19,680
a static code analysis or test built in

00:39:17,520 --> 00:39:20,800
or you know it gets malicious code

00:39:19,680 --> 00:39:22,720
injected and you wouldn't be able to

00:39:20,800 --> 00:39:24,800
find out through your ci cd pipeline

00:39:22,720 --> 00:39:26,000
that could be a really big issue i think

00:39:24,800 --> 00:39:26,960
it really depends on your software

00:39:26,000 --> 00:39:30,240
service

00:39:26,960 --> 00:39:31,839
i think it's good to have

00:39:30,240 --> 00:39:34,480
uh again it's like the sense of

00:39:31,839 --> 00:39:37,440
governance like it's good to have

00:39:34,480 --> 00:39:38,400
uh some means and some practices or at

00:39:37,440 --> 00:39:41,040
least some like

00:39:38,400 --> 00:39:41,760
tool kits in your toolbox right to say

00:39:41,040 --> 00:39:43,359
like well

00:39:41,760 --> 00:39:45,119
you know now we have this very

00:39:43,359 --> 00:39:46,240
successful application

00:39:45,119 --> 00:39:47,680
you know there's another team that we're

00:39:46,240 --> 00:39:49,040
going to spin up or there's another

00:39:47,680 --> 00:39:51,520
service that we're going to spin up

00:39:49,040 --> 00:39:52,800
that offers something else right and so

00:39:51,520 --> 00:39:54,079
the use case is different

00:39:52,800 --> 00:39:56,720
and the way that people consume it is

00:39:54,079 --> 00:39:58,320
different and so now

00:39:56,720 --> 00:40:00,480
the standards that we want to have may

00:39:58,320 --> 00:40:01,359
be different so just something to note

00:40:00,480 --> 00:40:04,240
there

00:40:01,359 --> 00:40:04,240
really awesome question

00:40:05,680 --> 00:40:09,280
it's a top down it's a top management

00:40:07,599 --> 00:40:10,079
responsibility of the organization for

00:40:09,280 --> 00:40:12,880
sustainable

00:40:10,079 --> 00:40:14,400
development oh for sure yeah i

00:40:12,880 --> 00:40:16,960
definitely think that

00:40:14,400 --> 00:40:17,839
um i mean we say it in devops all the

00:40:16,960 --> 00:40:19,839
time it's just like

00:40:17,839 --> 00:40:20,960
we need great devops leadership we need

00:40:19,839 --> 00:40:23,440
people who

00:40:20,960 --> 00:40:24,160
leadership who will say yes we will

00:40:23,440 --> 00:40:25,839
support this

00:40:24,160 --> 00:40:27,520
we'll give you the tools that you need

00:40:25,839 --> 00:40:28,880
we'll give you the training to use those

00:40:27,520 --> 00:40:30,240
tools right it's people process

00:40:28,880 --> 00:40:31,760
technology

00:40:30,240 --> 00:40:33,440
it doesn't work when it's just

00:40:31,760 --> 00:40:35,760
developers saying it

00:40:33,440 --> 00:40:39,839
you know yes we want to have bottom up

00:40:35,760 --> 00:40:39,839
but we also want to have top down

00:40:40,880 --> 00:40:45,359
got a anonymous question on will you use

00:40:44,160 --> 00:40:48,560
all kinds of

00:40:45,359 --> 00:40:50,560
orchestrators um

00:40:48,560 --> 00:40:52,800
it's a little bit of a confusing

00:40:50,560 --> 00:40:54,800
question um

00:40:52,800 --> 00:40:57,440
yeah you can use different kinds of ci

00:40:54,800 --> 00:40:59,760
cd tools you can use different kinds of

00:40:57,440 --> 00:41:00,480
ecosystems right different sets of tools

00:40:59,760 --> 00:41:03,440
i'm giving

00:41:00,480 --> 00:41:05,520
really general practices and tooling

00:41:03,440 --> 00:41:07,520
that you can use

00:41:05,520 --> 00:41:09,680
doesn't matter what runtime you have

00:41:07,520 --> 00:41:12,560
doesn't matter what

00:41:09,680 --> 00:41:13,359
platforms you're using so i hope that

00:41:12,560 --> 00:41:15,920
helps you get

00:41:13,359 --> 00:41:17,520
kind of like two questions around

00:41:15,920 --> 00:41:19,599
platforms and orchestrators so i hope

00:41:17,520 --> 00:41:22,480
that answers both of them

00:41:19,599 --> 00:41:22,480
thanks for the questions

00:41:24,640 --> 00:41:28,319
um one other thing that's not exactly

00:41:27,839 --> 00:41:31,680
built

00:41:28,319 --> 00:41:33,440
into our ci cd pipelines

00:41:31,680 --> 00:41:35,440
but can be related to our ci cicd

00:41:33,440 --> 00:41:38,800
pipelines it's just this idea

00:41:35,440 --> 00:41:40,160
of being able to review manually review

00:41:38,800 --> 00:41:44,240
during this process or

00:41:40,160 --> 00:41:46,000
in particular parts of our process

00:41:44,240 --> 00:41:47,599
exactly what we're trying to deploy what

00:41:46,000 --> 00:41:50,000
where when

00:41:47,599 --> 00:41:50,720
and why and cicd can actually help with

00:41:50,000 --> 00:41:54,000
this process

00:41:50,720 --> 00:41:57,040
right because our cicd pipelines

00:41:54,000 --> 00:41:58,640
are taking our code from throughout all

00:41:57,040 --> 00:42:02,000
these processes right from

00:41:58,640 --> 00:42:03,920
build to tests to deploy to verify and

00:42:02,000 --> 00:42:06,160
then to roll back if we need it

00:42:03,920 --> 00:42:07,040
and so you can actually have a group of

00:42:06,160 --> 00:42:09,520
people that you

00:42:07,040 --> 00:42:10,960
really trust and they understand like

00:42:09,520 --> 00:42:13,119
all the rules they understand how

00:42:10,960 --> 00:42:14,160
application server service works and

00:42:13,119 --> 00:42:16,800
this can be a group of

00:42:14,160 --> 00:42:18,000
you know architects can be uh that also

00:42:16,800 --> 00:42:20,319
includes the product owner

00:42:18,000 --> 00:42:21,839
you know and what happens is during that

00:42:20,319 --> 00:42:23,119
ci cd process

00:42:21,839 --> 00:42:25,040
you know when you're filling out a jira

00:42:23,119 --> 00:42:28,079
ticket or saying like hey this

00:42:25,040 --> 00:42:30,560
um this

00:42:28,079 --> 00:42:31,599
deployment to a non-production

00:42:30,560 --> 00:42:34,079
environment worked

00:42:31,599 --> 00:42:35,839
can we review it for a production

00:42:34,079 --> 00:42:36,319
deployment that's what a change control

00:42:35,839 --> 00:42:38,720
board

00:42:36,319 --> 00:42:39,440
can actually do and so having a change

00:42:38,720 --> 00:42:41,359
control

00:42:39,440 --> 00:42:42,880
board probably could have helped the

00:42:41,359 --> 00:42:46,079
solar winds

00:42:42,880 --> 00:42:49,200
um help prevent the solar winds hack

00:42:46,079 --> 00:42:52,480
right if they had a control board uh a

00:42:49,200 --> 00:42:55,920
change advisory board that could see

00:42:52,480 --> 00:42:57,839
how certain pieces of code had changed

00:42:55,920 --> 00:42:59,359
even if they had done a code review or

00:42:57,839 --> 00:43:01,520
just like looked into the source code

00:42:59,359 --> 00:43:02,960
what what exactly was built in

00:43:01,520 --> 00:43:04,880
they'd be able to stop that they'd be

00:43:02,960 --> 00:43:06,400
able to say hey this is this looks weird

00:43:04,880 --> 00:43:08,960
that injected code that looks weird

00:43:06,400 --> 00:43:10,720
that's not part of something that we

00:43:08,960 --> 00:43:12,319
developed that's not a change that we

00:43:10,720 --> 00:43:16,319
had planned to make

00:43:12,319 --> 00:43:17,599
right and so at kind of like any point

00:43:16,319 --> 00:43:18,960
of the software development life cycle

00:43:17,599 --> 00:43:20,800
they could just say like nope

00:43:18,960 --> 00:43:22,160
we're not gonna we're gonna re-review

00:43:20,800 --> 00:43:24,000
that before we deploy

00:43:22,160 --> 00:43:26,079
or i'm just gonna we're not gonna do

00:43:24,000 --> 00:43:27,760
this deployment this deployment fails so

00:43:26,079 --> 00:43:29,760
being able to say at any point like

00:43:27,760 --> 00:43:31,839
to control your cicd pipeline say like

00:43:29,760 --> 00:43:32,640
no we choose when this deploy when this

00:43:31,839 --> 00:43:35,280
goes out

00:43:32,640 --> 00:43:37,119
right it's really big most most

00:43:35,280 --> 00:43:38,000
organizations don't employ continuous

00:43:37,119 --> 00:43:40,079
deployment

00:43:38,000 --> 00:43:41,440
continuous deployment is when you commit

00:43:40,079 --> 00:43:42,720
code and it goes straight to production

00:43:41,440 --> 00:43:44,319
it goes straight to your customer

00:43:42,720 --> 00:43:45,839
most organizations don't do that they

00:43:44,319 --> 00:43:47,520
don't need to do that they don't even

00:43:45,839 --> 00:43:49,839
want to do that they want to pick

00:43:47,520 --> 00:43:50,800
how often do they release is it weekly

00:43:49,839 --> 00:43:52,720
is it monthly

00:43:50,800 --> 00:43:54,800
they want to be able to do it on demand

00:43:52,720 --> 00:43:57,520
and that's what continuous delivery

00:43:54,800 --> 00:43:57,520
helps us to do

00:43:58,480 --> 00:44:01,839
all right this is a screenshot of the

00:44:00,800 --> 00:44:03,119
harness platform

00:44:01,839 --> 00:44:04,880
because i think it's really important to

00:44:03,119 --> 00:44:08,640
be able to

00:44:04,880 --> 00:44:10,720
detect things that happen to our deploy

00:44:08,640 --> 00:44:12,079
configuration changes that happen for

00:44:10,720 --> 00:44:13,839
both our deployments

00:44:12,079 --> 00:44:15,280
and for our infrastructure i mentioned

00:44:13,839 --> 00:44:16,240
earlier like it's super important to be

00:44:15,280 --> 00:44:19,760
able to say like

00:44:16,240 --> 00:44:21,280
hey what what you know what version

00:44:19,760 --> 00:44:24,560
of the service is this infrastructure

00:44:21,280 --> 00:44:26,960
running you know what version of apache

00:44:24,560 --> 00:44:28,079
version of nginx you know what version

00:44:26,960 --> 00:44:30,000
of jenkins isn't running

00:44:28,079 --> 00:44:31,520
you'll be able to track that right we

00:44:30,000 --> 00:44:33,040
need to be able to do that with our

00:44:31,520 --> 00:44:34,560
service deployments as well

00:44:33,040 --> 00:44:36,160
you know when we're scripting jenkins

00:44:34,560 --> 00:44:38,880
pipelines or we're

00:44:36,160 --> 00:44:40,880
scripting our ci cd pipelines we need to

00:44:38,880 --> 00:44:42,400
be able to see like

00:44:40,880 --> 00:44:44,480
what happened we need to be able to tell

00:44:42,400 --> 00:44:46,480
like if something changes right

00:44:44,480 --> 00:44:48,160
and so being able to see this at a high

00:44:46,480 --> 00:44:50,319
level and being able to say like

00:44:48,160 --> 00:44:51,680
hey um this deployment looked really

00:44:50,319 --> 00:44:53,280
weird and then be able to go to that

00:44:51,680 --> 00:44:54,079
appointment and compare it to a previous

00:44:53,280 --> 00:44:56,240
deployment

00:44:54,079 --> 00:44:57,200
and see what the change was is really

00:44:56,240 --> 00:44:59,440
important right

00:44:57,200 --> 00:45:01,440
you can be able to say like oh well crap

00:44:59,440 --> 00:45:03,760
maybe the reason why we were not work

00:45:01,440 --> 00:45:05,680
we're not uh you know there's a failure

00:45:03,760 --> 00:45:08,160
in our latest deployment is because we

00:45:05,680 --> 00:45:10,079
deleted our configuration variables

00:45:08,160 --> 00:45:12,000
and so we're not actually passing in

00:45:10,079 --> 00:45:15,200
encrypted our encrypted

00:45:12,000 --> 00:45:15,200
secret for our database

00:45:16,480 --> 00:45:19,760
all right i'm running out of time so i

00:45:18,079 --> 00:45:22,240
am i'm gonna speed through

00:45:19,760 --> 00:45:23,680
the last few slides here um same thing

00:45:22,240 --> 00:45:25,119
with audit trails right being able to

00:45:23,680 --> 00:45:28,720
say who what when

00:45:25,119 --> 00:45:30,480
where why uh and what's happening within

00:45:28,720 --> 00:45:32,000
our software delivery processes this is

00:45:30,480 --> 00:45:34,319
the harness audit trail

00:45:32,000 --> 00:45:35,920
which takes uh this is a screenshot of

00:45:34,319 --> 00:45:36,960
like different things that had happened

00:45:35,920 --> 00:45:39,520
in the platform

00:45:36,960 --> 00:45:41,760
so i created if you look at the bottom i

00:45:39,520 --> 00:45:44,400
created an artifact stream

00:45:41,760 --> 00:45:46,319
someone else deleted it i updated a

00:45:44,400 --> 00:45:48,319
serverless specification

00:45:46,319 --> 00:45:50,800
i updated the workflow and i know who

00:45:48,319 --> 00:45:53,280
did it right i know when they did it

00:45:50,800 --> 00:45:54,960
i know what ip address they came from

00:45:53,280 --> 00:45:58,000
and i know what services were

00:45:54,960 --> 00:45:59,440
impacted that's really important

00:45:58,000 --> 00:46:01,680
and so doing things like this will give

00:45:59,440 --> 00:46:02,240
you a better sense of like who deployed

00:46:01,680 --> 00:46:06,000
when

00:46:02,240 --> 00:46:09,920
where why when um when where why

00:46:06,000 --> 00:46:11,440
losing my mind um to our environments

00:46:09,920 --> 00:46:13,040
and we need to be able to do that

00:46:11,440 --> 00:46:14,240
especially if we're gonna say like hey

00:46:13,040 --> 00:46:16,319
we're compliant or

00:46:14,240 --> 00:46:18,319
maybe we do audits at the end of every

00:46:16,319 --> 00:46:19,040
year some organization some industries

00:46:18,319 --> 00:46:20,640
have to do that

00:46:19,040 --> 00:46:22,480
they have to say like what changes they

00:46:20,640 --> 00:46:23,680
made and so being able to do that or

00:46:22,480 --> 00:46:24,720
have a record of that is really

00:46:23,680 --> 00:46:25,920
important as well

00:46:24,720 --> 00:46:28,560
and that's what we're gonna see in the

00:46:25,920 --> 00:46:31,280
future it's just more deliberation

00:46:28,560 --> 00:46:32,960
and and more intention towards what we

00:46:31,280 --> 00:46:34,400
deliver and why we deliver it and when

00:46:32,960 --> 00:46:37,440
we deliver it

00:46:34,400 --> 00:46:39,119
um and so i want to close off by just

00:46:37,440 --> 00:46:40,640
sharing like where you can find

00:46:39,119 --> 00:46:41,200
governance in the wild because this is

00:46:40,640 --> 00:46:43,920
pretty

00:46:41,200 --> 00:46:45,280
pretty interesting all right we have two

00:46:43,920 --> 00:46:48,480
minutes left so i'll try to

00:46:45,280 --> 00:46:49,839
try to get this done but capital one

00:46:48,480 --> 00:46:51,920
actually shared in a reference

00:46:49,839 --> 00:46:55,760
architecture white paper on

00:46:51,920 --> 00:46:56,560
um automated pipeline governance that's

00:46:55,760 --> 00:46:58,960
what it's called

00:46:56,560 --> 00:47:01,040
it's by it revolution the same company

00:46:58,960 --> 00:47:02,000
that gave you the devops handbook and

00:47:01,040 --> 00:47:04,240
accelerate

00:47:02,000 --> 00:47:05,119
um there's a there's a white paper that

00:47:04,240 --> 00:47:08,000
john willis

00:47:05,119 --> 00:47:09,599
helped co-author and they there were a

00:47:08,000 --> 00:47:11,280
bunch of other organizations that had

00:47:09,599 --> 00:47:13,119
contributed but they shared

00:47:11,280 --> 00:47:16,000
um one way that they were employing

00:47:13,119 --> 00:47:17,920
governance and they called it 16 gates

00:47:16,000 --> 00:47:19,280
and this was the senate this was the way

00:47:17,920 --> 00:47:22,079
this was how

00:47:19,280 --> 00:47:23,680
they were introducing this and you know

00:47:22,079 --> 00:47:24,800
they they have a bunch of practices here

00:47:23,680 --> 00:47:26,640
that we mentioned but i

00:47:24,800 --> 00:47:29,040
really picked out the ones that made

00:47:26,640 --> 00:47:31,119
sense for anyone to be able to use right

00:47:29,040 --> 00:47:33,119
so things like source code version

00:47:31,119 --> 00:47:34,720
control static code analysis

00:47:33,119 --> 00:47:36,880
vulnerability scanning

00:47:34,720 --> 00:47:38,079
penetration testing that i mentioned

00:47:36,880 --> 00:47:40,960
integration testing

00:47:38,079 --> 00:47:41,920
even they were doing more um interesting

00:47:40,960 --> 00:47:44,559
things around

00:47:41,920 --> 00:47:46,400
controlling who got to see specific

00:47:44,559 --> 00:47:48,319
features with feature toggling

00:47:46,400 --> 00:47:50,839
or future flag management that's also

00:47:48,319 --> 00:47:53,680
another great thing to employ

00:47:50,839 --> 00:47:55,280
right and i think a lot of

00:47:53,680 --> 00:47:57,119
people a lot of harness customers are

00:47:55,280 --> 00:47:58,559
actually doing this today as well which

00:47:57,119 --> 00:48:00,480
is what i wanted to mention that

00:47:58,559 --> 00:48:01,599
it does exist people are doing automated

00:48:00,480 --> 00:48:03,280
pipeline governance

00:48:01,599 --> 00:48:04,800
even though it may sometimes feel like

00:48:03,280 --> 00:48:06,319
this um

00:48:04,800 --> 00:48:08,400
uh crazy thing when we're still trying

00:48:06,319 --> 00:48:09,680
to figure out how to really automate our

00:48:08,400 --> 00:48:11,839
governance

00:48:09,680 --> 00:48:13,280
so i i just want to close out because i

00:48:11,839 --> 00:48:16,160
know we're at the

00:48:13,280 --> 00:48:17,520
top of the 50-minute mark here um and

00:48:16,160 --> 00:48:19,119
say like

00:48:17,520 --> 00:48:21,040
automated pipeline governance is about

00:48:19,119 --> 00:48:21,599
controlling understanding and mitigating

00:48:21,040 --> 00:48:23,599
risk

00:48:21,599 --> 00:48:25,280
right and even though you can't do these

00:48:23,599 --> 00:48:27,760
things all at once like

00:48:25,280 --> 00:48:29,359
snap your fingers you have everything we

00:48:27,760 --> 00:48:31,520
can get there

00:48:29,359 --> 00:48:32,480
uh through increments we can

00:48:31,520 --> 00:48:34,319
continuously

00:48:32,480 --> 00:48:35,760
improve so i hope this session was

00:48:34,319 --> 00:48:36,960
really helpful in doing that

00:48:35,760 --> 00:48:39,200
i'll stick around and answer any

00:48:36,960 --> 00:48:39,760
questions because i know we had a few

00:48:39,200 --> 00:48:42,079
more

00:48:39,760 --> 00:48:43,359
but i really appreciate the time that

00:48:42,079 --> 00:48:44,720
you all spent with me

00:48:43,359 --> 00:48:46,400
thank you so much if you have any

00:48:44,720 --> 00:48:49,520
questions feel free to reach out

00:48:46,400 --> 00:48:51,599
i'm all over the social medias

00:48:49,520 --> 00:48:54,480
and you can find me wherever but thank

00:48:51,599 --> 00:48:54,480
you all so much

00:48:55,680 --> 00:48:59,280
thank you so much to tiffany for her

00:48:57,520 --> 00:49:01,119
time today and thank you to all the

00:48:59,280 --> 00:49:03,200
participants who joined us

00:49:01,119 --> 00:49:05,040
as a reminder this recording will be on

00:49:03,200 --> 00:49:05,839
the linux foundation youtube page later

00:49:05,040 --> 00:49:07,440
today

00:49:05,839 --> 00:49:10,640
and we hope you're able to join us for

00:49:07,440 --> 00:49:14,160
future webinars have a wonderful day

00:49:10,640 --> 00:49:14,160

YouTube URL: https://www.youtube.com/watch?v=2JxeWjpp_5A


