Title: Webinar: Hack My Mis-Configured Kubernetes, sponsored by Snyk
Publication date: 2021-01-28
Playlist: LF Live Webinars
Description: 
	
Captions: 
	00:00:00,799 --> 00:00:04,400
hey and thank you very much for the

00:00:03,360 --> 00:00:08,000
intro

00:00:04,400 --> 00:00:10,160
so uh welcome to ma to our uh

00:00:08,000 --> 00:00:11,280
session today about kubernetes

00:00:10,160 --> 00:00:13,759
configuration

00:00:11,280 --> 00:00:16,160
my name is or kamara i'm a senior

00:00:13,759 --> 00:00:17,279
development team leader at snick and i'm

00:00:16,160 --> 00:00:20,080
happy

00:00:17,279 --> 00:00:31,119
to talk with you today together with

00:00:20,080 --> 00:00:33,440
scott mccarty scott you want to say hi

00:00:31,119 --> 00:00:34,559
oh scott i think you're on mute if you

00:00:33,440 --> 00:00:36,719
want to

00:00:34,559 --> 00:00:37,920
oops my apologies i started talking

00:00:36,719 --> 00:00:40,239
without on meeting

00:00:37,920 --> 00:00:41,600
um thanks or and thanks uh everyone uh

00:00:40,239 --> 00:00:43,280
yeah thanks for having me i

00:00:41,600 --> 00:00:45,440
i'm a principal product manager red hat

00:00:43,280 --> 00:00:47,520
for all the low-level components like

00:00:45,440 --> 00:00:49,680
container engines runtimes and container

00:00:47,520 --> 00:00:51,600
images um and so yeah i've been

00:00:49,680 --> 00:00:53,520
red hat almost 10 years and looking

00:00:51,600 --> 00:00:55,440
forward to talking about security

00:00:53,520 --> 00:00:58,399
bringing my curmudgeonly sysadmin view

00:00:55,440 --> 00:01:02,239
to the world

00:00:58,399 --> 00:01:04,879
amazing so let's start so

00:01:02,239 --> 00:01:05,280
what we're gonna have today i will start

00:01:04,879 --> 00:01:07,840
by

00:01:05,280 --> 00:01:08,400
some background and some explanation

00:01:07,840 --> 00:01:11,280
about

00:01:08,400 --> 00:01:13,040
uh uh like cloud security like attack

00:01:11,280 --> 00:01:15,280
vectors in cloud security

00:01:13,040 --> 00:01:16,400
we'll give some examples and some uh

00:01:15,280 --> 00:01:20,320
demos for

00:01:16,400 --> 00:01:22,799
uh those for some specific uh vectors

00:01:20,320 --> 00:01:24,880
that might be a problem as part of the

00:01:22,799 --> 00:01:26,640
kubernetes configuration

00:01:24,880 --> 00:01:28,799
then we will see some solutions for

00:01:26,640 --> 00:01:30,400
those problems and we'll finalize with

00:01:28,799 --> 00:01:33,759
some conclusion

00:01:30,400 --> 00:01:36,320
uh scott you want to take it over yeah

00:01:33,759 --> 00:01:38,560
i'll kick it off um would you mind going

00:01:36,320 --> 00:01:40,960
to the next slide

00:01:38,560 --> 00:01:41,759
so uh actually this is a pretty good one

00:01:40,960 --> 00:01:43,759
you know

00:01:41,759 --> 00:01:45,360
um configuration vulnerabilities we just

00:01:43,759 --> 00:01:47,119
want to highlight here basically that

00:01:45,360 --> 00:01:48,000
that you know configuration is part of

00:01:47,119 --> 00:01:49,520
the security

00:01:48,000 --> 00:01:51,280
risk and like we want to support it

00:01:49,520 --> 00:01:52,960
showing you especially

00:01:51,280 --> 00:01:54,960
at companies like capital one big banks

00:01:52,960 --> 00:01:57,200
they they see this especially

00:01:54,960 --> 00:01:59,280
because they end up with you know up to

00:01:57,200 --> 00:02:01,040
hundreds of thousands of developers and

00:01:59,280 --> 00:02:02,479
hundreds of thousands of nodes

00:02:01,040 --> 00:02:03,360
configured hundreds of thousands of

00:02:02,479 --> 00:02:05,520
container images

00:02:03,360 --> 00:02:07,439
and things like that so at scale this

00:02:05,520 --> 00:02:09,440
configuration vulnerability gets really

00:02:07,439 --> 00:02:11,759
really pretty uh the risk becomes much

00:02:09,440 --> 00:02:11,759
higher

00:02:12,720 --> 00:02:17,040
yeah and i wanted to i wanted to give

00:02:15,280 --> 00:02:17,599
just a little tiny background for those

00:02:17,040 --> 00:02:19,280
that you

00:02:17,599 --> 00:02:20,480
that have maybe never heard of cia

00:02:19,280 --> 00:02:21,440
because i think i think in the cloud

00:02:20,480 --> 00:02:22,720
native world

00:02:21,440 --> 00:02:24,720
you know there's a lot of new people to

00:02:22,720 --> 00:02:25,280
software that have kind of started cloud

00:02:24,720 --> 00:02:26,640
native

00:02:25,280 --> 00:02:28,959
and maybe don't know some of these

00:02:26,640 --> 00:02:30,319
traditional um constructs around

00:02:28,959 --> 00:02:31,120
confidentiality integrity and

00:02:30,319 --> 00:02:33,440
availability

00:02:31,120 --> 00:02:35,280
this is like a very very old school

00:02:33,440 --> 00:02:37,519
model of the world that's existed for

00:02:35,280 --> 00:02:38,560
i learned it i don't know 20-ish years

00:02:37,519 --> 00:02:40,879
ago um

00:02:38,560 --> 00:02:41,840
but it's it's still very apropos even in

00:02:40,879 --> 00:02:44,239
this world

00:02:41,840 --> 00:02:46,239
um it's just kind of the concept of like

00:02:44,239 --> 00:02:49,040
there's a you know three main

00:02:46,239 --> 00:02:51,040
types of uh risks or attack vectors and

00:02:49,040 --> 00:02:53,440
one is around confidentiality obviously

00:02:51,040 --> 00:02:55,519
like leaking data so like if you have a

00:02:53,440 --> 00:02:57,200
mysql database in a container and the

00:02:55,519 --> 00:02:58,959
container is highly locked down

00:02:57,200 --> 00:03:00,560
that container will still have access to

00:02:58,959 --> 00:03:02,159
like the data that it should have access

00:03:00,560 --> 00:03:02,800
to right and so if somebody hacks that

00:03:02,159 --> 00:03:04,720
mysql

00:03:02,800 --> 00:03:05,840
they could leak out the user data um and

00:03:04,720 --> 00:03:07,920
so like

00:03:05,840 --> 00:03:09,840
if a container's functioning correctly

00:03:07,920 --> 00:03:11,360
and it has access to the type of data

00:03:09,840 --> 00:03:12,319
that it should it could still leak that

00:03:11,360 --> 00:03:14,400
out to the world so

00:03:12,319 --> 00:03:15,840
that's one way that people can leak out

00:03:14,400 --> 00:03:16,400
you know and basically have a security

00:03:15,840 --> 00:03:17,920
breach

00:03:16,400 --> 00:03:20,000
another way is around integrity right

00:03:17,920 --> 00:03:21,280
like they could hamper they could mess

00:03:20,000 --> 00:03:23,680
with a container image

00:03:21,280 --> 00:03:24,480
um and and sneak a mis-configuration in

00:03:23,680 --> 00:03:27,599
they could

00:03:24,480 --> 00:03:29,760
you know um even sneak in a

00:03:27,599 --> 00:03:31,360
uh you know a configuration on into your

00:03:29,760 --> 00:03:32,080
get you know in your github or something

00:03:31,360 --> 00:03:33,920
like that

00:03:32,080 --> 00:03:35,599
um and basically mess up the integrity

00:03:33,920 --> 00:03:36,959
of your cluster you know by by sneaking

00:03:35,599 --> 00:03:38,000
in a bad config file or something along

00:03:36,959 --> 00:03:40,000
those lines

00:03:38,000 --> 00:03:41,840
um and then finally availability is like

00:03:40,000 --> 00:03:42,480
the noise and neighbor problem taken to

00:03:41,840 --> 00:03:45,360
its

00:03:42,480 --> 00:03:46,720
extreme where like if somebody could for

00:03:45,360 --> 00:03:48,560
example

00:03:46,720 --> 00:03:50,080
get do a man-in-the-middle attack and

00:03:48,560 --> 00:03:51,840
sneak a uh

00:03:50,080 --> 00:03:53,439
bitcoin miner into one of your container

00:03:51,840 --> 00:03:54,799
images and then you end up running like

00:03:53,439 --> 00:03:57,519
thousands of those

00:03:54,799 --> 00:03:58,720
um you know you would end up making the

00:03:57,519 --> 00:04:00,319
noise the neighbor problem within your

00:03:58,720 --> 00:04:00,959
cluster and then like take out your own

00:04:00,319 --> 00:04:02,720
you basically

00:04:00,959 --> 00:04:04,720
create your own denial of service attack

00:04:02,720 --> 00:04:06,239
um you know on yourself by pulling in

00:04:04,720 --> 00:04:08,640
images that you shouldn't have something

00:04:06,239 --> 00:04:08,959
along those lines um another version of

00:04:08,640 --> 00:04:10,480
this

00:04:08,959 --> 00:04:12,560
it's a little nastier is like in the

00:04:10,480 --> 00:04:13,920
cloud world it'll just keep scaling up

00:04:12,560 --> 00:04:16,160
and it'll just cost you a million

00:04:13,920 --> 00:04:17,519
dollars so it could also just be the

00:04:16,160 --> 00:04:18,560
other way around where your availability

00:04:17,519 --> 00:04:20,479
doesn't quite go down

00:04:18,560 --> 00:04:21,840
you just end up paying a lot of money to

00:04:20,479 --> 00:04:23,199
keep the same availability

00:04:21,840 --> 00:04:24,479
and that's kind of a new thing that

00:04:23,199 --> 00:04:25,199
didn't really exist in the traditional

00:04:24,479 --> 00:04:26,240
world

00:04:25,199 --> 00:04:28,160
so i just want to kind of highlight

00:04:26,240 --> 00:04:29,120
those three just so that the context of

00:04:28,160 --> 00:04:30,240
the rest of the things we're going to

00:04:29,120 --> 00:04:31,520
talk about each of

00:04:30,240 --> 00:04:32,960
each of the misconfigurations that they

00:04:31,520 --> 00:04:35,600
talk about kind of fall into these three

00:04:32,960 --> 00:04:35,600
categories

00:04:36,160 --> 00:04:39,840
um and then i wanted to also highlight

00:04:38,400 --> 00:04:41,199
from a background like these are the new

00:04:39,840 --> 00:04:42,160
primitives that you need to worry about

00:04:41,199 --> 00:04:43,520
so like every

00:04:42,160 --> 00:04:44,720
you know you take a traditional it

00:04:43,520 --> 00:04:46,479
environment and people think about

00:04:44,720 --> 00:04:47,280
things like firewalls and routers and

00:04:46,479 --> 00:04:48,720
servers

00:04:47,280 --> 00:04:50,160
those are the primitives that they think

00:04:48,720 --> 00:04:50,880
about that's the traditional it

00:04:50,160 --> 00:04:52,960
infrastructure

00:04:50,880 --> 00:04:54,800
but when you move into kubernetes every

00:04:52,960 --> 00:04:56,240
kubernetes has these four primitives

00:04:54,800 --> 00:04:57,919
every kubernetes has

00:04:56,240 --> 00:05:00,000
container images they have container

00:04:57,919 --> 00:05:01,600
hosts they have container registries

00:05:00,000 --> 00:05:03,600
and then you have to think about all of

00:05:01,600 --> 00:05:04,560
the platform itself so kubernetes itself

00:05:03,600 --> 00:05:06,800
the kubelet

00:05:04,560 --> 00:05:08,160
um the configuration around that the scd

00:05:06,800 --> 00:05:09,360
and all the components that are part of

00:05:08,160 --> 00:05:10,880
kubernetes and so

00:05:09,360 --> 00:05:12,880
we wanted to highlight that you know

00:05:10,880 --> 00:05:13,680
configuration comes in all three of

00:05:12,880 --> 00:05:15,280
these right right

00:05:13,680 --> 00:05:16,800
there are config files embedded in the

00:05:15,280 --> 00:05:18,000
container image there are config files

00:05:16,800 --> 00:05:19,520
embedded in the host

00:05:18,000 --> 00:05:21,039
there are config you know there's

00:05:19,520 --> 00:05:21,440
configuration in the registry the way

00:05:21,039 --> 00:05:22,960
it's

00:05:21,440 --> 00:05:24,639
again around availability or something

00:05:22,960 --> 00:05:26,639
like that or even data breaches

00:05:24,639 --> 00:05:28,000
if you embed something in a registry and

00:05:26,639 --> 00:05:29,600
it's misconfigured and then it's public

00:05:28,000 --> 00:05:31,360
to the world and somebody steals it

00:05:29,600 --> 00:05:32,720
you know there's there's essentially

00:05:31,360 --> 00:05:34,000
configuration embedded in all these and

00:05:32,720 --> 00:05:35,759
then of course

00:05:34,000 --> 00:05:36,960
mostly what we'll talk about is around

00:05:35,759 --> 00:05:38,000
what's actually embedded in the

00:05:36,960 --> 00:05:39,680
kubernetes configuration

00:05:38,000 --> 00:05:41,199
itself but we just want to highlight

00:05:39,680 --> 00:05:42,400
that you know in addition to the

00:05:41,199 --> 00:05:44,080
traditional

00:05:42,400 --> 00:05:45,120
you know it primitives these are the new

00:05:44,080 --> 00:05:45,840
ones that you kind of need to think

00:05:45,120 --> 00:05:48,479
about when you're thinking about

00:05:45,840 --> 00:05:48,479
kubernetes

00:05:49,680 --> 00:05:53,199
and so now putting it in a context where

00:05:51,600 --> 00:05:56,160
you can see you can say

00:05:53,199 --> 00:05:57,600
it's stacked up right like historically

00:05:56,160 --> 00:05:59,680
i joke you know the operations

00:05:57,600 --> 00:06:00,720
responsibility around the cia and around

00:05:59,680 --> 00:06:03,120
these primitives

00:06:00,720 --> 00:06:04,000
you know the old i.t primitives were

00:06:03,120 --> 00:06:05,199
mostly

00:06:04,000 --> 00:06:07,199
controlled by operations but when you

00:06:05,199 --> 00:06:09,280
move into kubernetes world you know the

00:06:07,199 --> 00:06:10,960
the kubernetes itself will often be

00:06:09,280 --> 00:06:12,319
ran by some kind of sre team which you

00:06:10,960 --> 00:06:14,479
can think of as a modern

00:06:12,319 --> 00:06:16,080
operations team you know the host the

00:06:14,479 --> 00:06:17,680
trusted hosts and the way that's

00:06:16,080 --> 00:06:18,400
configured and the default configuration

00:06:17,680 --> 00:06:20,000
that's in there

00:06:18,400 --> 00:06:21,600
kind of managed again by the sra team or

00:06:20,000 --> 00:06:22,960
the operations team but

00:06:21,600 --> 00:06:25,360
it gets a little bit hairier in the

00:06:22,960 --> 00:06:26,560
container image that's where things get

00:06:25,360 --> 00:06:28,160
where there's really a shared

00:06:26,560 --> 00:06:29,840
responsibility over the configuration

00:06:28,160 --> 00:06:31,360
and how it works and so that's where

00:06:29,840 --> 00:06:32,639
that's where you need to pay particular

00:06:31,360 --> 00:06:34,160
attention and so we'll probably

00:06:32,639 --> 00:06:35,280
highlight some of that here i want to

00:06:34,160 --> 00:06:36,720
highlight actually i want to go a hair

00:06:35,280 --> 00:06:39,759
deeper in the next slide

00:06:36,720 --> 00:06:41,919
um if you would mind or

00:06:39,759 --> 00:06:43,120
um you know this is actually i'm going

00:06:41,919 --> 00:06:44,560
to hand it off to ore but he's going to

00:06:43,120 --> 00:06:45,199
go deeper into like some of the things

00:06:44,560 --> 00:06:46,880
that the

00:06:45,199 --> 00:06:48,639
developer actually has to worry about in

00:06:46,880 --> 00:06:51,039
this container

00:06:48,639 --> 00:06:51,759
because so yeah exactly let's kind of

00:06:51,039 --> 00:06:53,919
take a

00:06:51,759 --> 00:06:55,680
step back backward and try to understand

00:06:53,919 --> 00:06:57,360
what are the what's the ownership of

00:06:55,680 --> 00:07:00,080
developers those day

00:06:57,360 --> 00:07:00,960
uh so we'll start with example so this

00:07:00,080 --> 00:07:03,919
is my

00:07:00,960 --> 00:07:04,560
python python application so i need to

00:07:03,919 --> 00:07:06,639
make sure

00:07:04,560 --> 00:07:09,440
that the source code the code that i i

00:07:06,639 --> 00:07:11,919
write by myself is secured enough

00:07:09,440 --> 00:07:13,599
and then we'll start using third-party

00:07:11,919 --> 00:07:15,360
dependencies like packages that will be

00:07:13,599 --> 00:07:17,520
part of the requirements txt

00:07:15,360 --> 00:07:20,000
so we need to make sure that no security

00:07:17,520 --> 00:07:23,280
issues are part of that

00:07:20,000 --> 00:07:24,960
uh next step for us is to wrap the uh

00:07:23,280 --> 00:07:26,160
this application with with container

00:07:24,960 --> 00:07:28,240
right to build an image for this

00:07:26,160 --> 00:07:29,680
application so we will write a docker

00:07:28,240 --> 00:07:32,639
file and we will use the

00:07:29,680 --> 00:07:34,000
python3 based image as part of this base

00:07:32,639 --> 00:07:35,759
image and probably

00:07:34,000 --> 00:07:37,360
with other packages that we can install

00:07:35,759 --> 00:07:39,520
as part of the docker file

00:07:37,360 --> 00:07:41,280
there are lots of os dependencies that

00:07:39,520 --> 00:07:44,639
we need to be aware of right like

00:07:41,280 --> 00:07:48,080
security issues as part of them as well

00:07:44,639 --> 00:07:51,280
and now we want to deploy everything to

00:07:48,080 --> 00:07:53,120
uh to aws for example and we want to use

00:07:51,280 --> 00:07:54,800
terraform as part of those configuration

00:07:53,120 --> 00:07:55,599
as part of the infrastructure is code

00:07:54,800 --> 00:07:58,720
files

00:07:55,599 --> 00:08:00,560
some security risks that we need to to

00:07:58,720 --> 00:08:01,280
make sure like in this case to make sure

00:08:00,560 --> 00:08:04,319
that

00:08:01,280 --> 00:08:08,160
uh like our ports are not open

00:08:04,319 --> 00:08:10,560
for everyone um and last but not least

00:08:08,160 --> 00:08:12,000
our topic for today the kubernetes file

00:08:10,560 --> 00:08:14,639
the configuration of the

00:08:12,000 --> 00:08:16,080
kubernetes file uh are definitely a

00:08:14,639 --> 00:08:19,280
major part of that

00:08:16,080 --> 00:08:19,840
and like the the example that we started

00:08:19,280 --> 00:08:22,319
that

00:08:19,840 --> 00:08:23,039
with before is a it's a great example

00:08:22,319 --> 00:08:24,720
for

00:08:23,039 --> 00:08:26,160
our configuration files specifically

00:08:24,720 --> 00:08:30,560
with kubernetes can

00:08:26,160 --> 00:08:34,000
do lots of arm yeah lots of things to

00:08:30,560 --> 00:08:34,800
to make sure that you that we cover and

00:08:34,000 --> 00:08:37,279
now let's

00:08:34,800 --> 00:08:39,279
start to dive into the security context

00:08:37,279 --> 00:08:41,200
of kubernetes

00:08:39,279 --> 00:08:43,200
so for those of you not familiar with

00:08:41,200 --> 00:08:45,760
this is uh

00:08:43,200 --> 00:08:47,200
this is the security context so security

00:08:45,760 --> 00:08:49,360
contacts basically let you

00:08:47,200 --> 00:08:51,040
the define privilege and access control

00:08:49,360 --> 00:08:54,160
settings for your portal for

00:08:51,040 --> 00:08:54,560
your container so in this example we

00:08:54,160 --> 00:08:57,680
have

00:08:54,560 --> 00:09:00,000
a port configuration as part of that we

00:08:57,680 --> 00:09:01,279
also have the security context

00:09:00,000 --> 00:09:03,760
and today we're going to cover two

00:09:01,279 --> 00:09:05,760
things um we're gonna demo what

00:09:03,760 --> 00:09:07,200
what can go wrong what can go wrong with

00:09:05,760 --> 00:09:10,399
a privileged pod

00:09:07,200 --> 00:09:12,560
and we can als we will also demo root

00:09:10,399 --> 00:09:13,920
containers

00:09:12,560 --> 00:09:15,760
so now let's start talking about

00:09:13,920 --> 00:09:19,680
privileged spots so what exactly

00:09:15,760 --> 00:09:22,959
are privileged pods so think about cases

00:09:19,680 --> 00:09:23,279
where you develop something and you need

00:09:22,959 --> 00:09:27,279
to

00:09:23,279 --> 00:09:30,560
access the host's resources think about

00:09:27,279 --> 00:09:33,279
accessing the network stack or accessing

00:09:30,560 --> 00:09:35,680
the gpu for example or just running

00:09:33,279 --> 00:09:36,480
in simple cases like if you want uh if

00:09:35,680 --> 00:09:39,120
you want to run

00:09:36,480 --> 00:09:40,160
a docker inside the docker for all of

00:09:39,120 --> 00:09:42,959
those you actually

00:09:40,160 --> 00:09:44,640
need to run with a privileged mod and

00:09:42,959 --> 00:09:47,760
the security risk is

00:09:44,640 --> 00:09:50,240
very very simple it means that

00:09:47,760 --> 00:09:50,880
processes and privilege pods are exactly

00:09:50,240 --> 00:09:53,680
the same

00:09:50,880 --> 00:09:54,399
as process says as there is processes

00:09:53,680 --> 00:09:56,160
running on the

00:09:54,399 --> 00:09:58,399
on the host like root processes running

00:09:56,160 --> 00:10:02,000
on the os and it basically means that

00:09:58,399 --> 00:10:05,040
an attacker can do anything they want

00:10:02,000 --> 00:10:07,839
if they have an access to the pod so

00:10:05,040 --> 00:10:10,079
the solution solution is simple as well

00:10:07,839 --> 00:10:14,160
don't use it if you don't need it

00:10:10,079 --> 00:10:16,000
um and now let's uh let's see a demo

00:10:14,160 --> 00:10:17,920
so in the next demo we're gonna have two

00:10:16,000 --> 00:10:19,120
different applications the first one is

00:10:17,920 --> 00:10:22,240
supposed to be a

00:10:19,120 --> 00:10:24,800
secured secured payment application

00:10:22,240 --> 00:10:26,399
and so it's kind of an isolated

00:10:24,800 --> 00:10:29,440
application we'll see in a second

00:10:26,399 --> 00:10:32,000
why it's not really isolated but

00:10:29,440 --> 00:10:32,800
the only thing it does is just to write

00:10:32,000 --> 00:10:36,320
into a

00:10:32,800 --> 00:10:39,360
secret file named db cards json

00:10:36,320 --> 00:10:40,560
and and in addition we're gonna have a

00:10:39,360 --> 00:10:42,800
vulnerable application

00:10:40,560 --> 00:10:45,120
for this application we're gonna have

00:10:42,800 --> 00:10:47,360
two different issues the first one

00:10:45,120 --> 00:10:48,560
is rc remote code execution

00:10:47,360 --> 00:10:51,440
vulnerability

00:10:48,560 --> 00:10:52,800
uh that is uh just part of this

00:10:51,440 --> 00:10:54,480
application

00:10:52,800 --> 00:10:56,959
this is not the interesting part for us

00:10:54,480 --> 00:10:57,920
the interesting part is the the second

00:10:56,959 --> 00:11:00,079
point which is

00:10:57,920 --> 00:11:01,760
the fact that this application will run

00:11:00,079 --> 00:11:04,640
in a privileged mod

00:11:01,760 --> 00:11:06,240
and we will see how exactly we can use

00:11:04,640 --> 00:11:08,000
the rc

00:11:06,240 --> 00:11:10,800
and the fact that this is a privileged

00:11:08,000 --> 00:11:11,680
pod in order to access the content and

00:11:10,800 --> 00:11:14,720
data

00:11:11,680 --> 00:11:15,600
from the from the security uh for in the

00:11:14,720 --> 00:11:19,279
security payment

00:11:15,600 --> 00:11:19,279
uh secured payment application

00:11:19,440 --> 00:11:23,680
so this is our node and as we said we

00:11:21,680 --> 00:11:25,920
have the uh the privilege

00:11:23,680 --> 00:11:27,519
uh the privilege the privileged pod and

00:11:25,920 --> 00:11:28,560
we also have the secured payment

00:11:27,519 --> 00:11:31,680
application

00:11:28,560 --> 00:11:34,399
both of them run on the same node

00:11:31,680 --> 00:11:35,360
they use the same docker engine which

00:11:34,399 --> 00:11:38,720
also means that

00:11:35,360 --> 00:11:41,519
they use the same local storage

00:11:38,720 --> 00:11:42,160
so just imagine that our attacker

00:11:41,519 --> 00:11:45,279
managed

00:11:42,160 --> 00:11:48,079
to use the uh the rc vulnerability

00:11:45,279 --> 00:11:49,920
now they have an access to the pod and

00:11:48,079 --> 00:11:52,880
because this is a privileged pod

00:11:49,920 --> 00:11:53,360
they can basically access content and

00:11:52,880 --> 00:11:56,399
data

00:11:53,360 --> 00:11:59,600
from the payment application as well

00:11:56,399 --> 00:11:59,600
and now let's see the demo

00:12:00,399 --> 00:12:03,519
let's just look on the application first

00:12:02,720 --> 00:12:06,240
this is our

00:12:03,519 --> 00:12:08,000
simple application we have a simple

00:12:06,240 --> 00:12:11,120
guest book i'm gonna

00:12:08,000 --> 00:12:14,639
upload a picture into this

00:12:11,120 --> 00:12:17,440
gallery and that's it

00:12:14,639 --> 00:12:19,279
simple as that and let's take a look on

00:12:17,440 --> 00:12:21,200
our payment application so this is the

00:12:19,279 --> 00:12:23,680
the payment application and as you can

00:12:21,200 --> 00:12:27,920
see i'm gonna enter my credit card

00:12:23,680 --> 00:12:27,920
and donate one dollar

00:12:29,839 --> 00:12:32,880
and that's it i just enter my my credit

00:12:32,079 --> 00:12:34,959
card

00:12:32,880 --> 00:12:36,839
uh let's take a look on what's going on

00:12:34,959 --> 00:12:39,519
by the scenes and

00:12:36,839 --> 00:12:41,920
kubernetes

00:12:39,519 --> 00:12:43,279
let's look on the pods and we see that

00:12:41,920 --> 00:12:45,760
we have those two

00:12:43,279 --> 00:12:46,560
uh like two pods one for the payment one

00:12:45,760 --> 00:12:50,000
for the

00:12:46,560 --> 00:12:52,800
uh one for the regular application

00:12:50,000 --> 00:12:54,000
uh so this is the regular uh secured

00:12:52,800 --> 00:12:57,440
payment application

00:12:54,000 --> 00:13:00,639
nothing special and this is our

00:12:57,440 --> 00:13:03,440
the our like vulnerable application and

00:13:00,639 --> 00:13:06,560
we can see it's a privileged one

00:13:03,440 --> 00:13:08,320
now let's see what what what we can use

00:13:06,560 --> 00:13:11,279
as part of this application

00:13:08,320 --> 00:13:11,279
in order to act it

00:13:13,279 --> 00:13:16,240
so we're going to do two simple things

00:13:14,959 --> 00:13:16,959
the first one is we're going to upload

00:13:16,240 --> 00:13:19,839
the shell

00:13:16,959 --> 00:13:21,760
php and this is basically the remote

00:13:19,839 --> 00:13:23,040
code execution vulnerability the tool

00:13:21,760 --> 00:13:26,320
kind of demo

00:13:23,040 --> 00:13:29,440
uh we will use this php we'll access it

00:13:26,320 --> 00:13:31,120
from the outside using curl command and

00:13:29,440 --> 00:13:34,399
we're going to run some command on the

00:13:31,120 --> 00:13:37,120
on the machine and so this is our

00:13:34,399 --> 00:13:38,399
uh this is our shell script as you can

00:13:37,120 --> 00:13:41,440
see we can just run

00:13:38,399 --> 00:13:43,199
uh a commander's system

00:13:41,440 --> 00:13:44,880
so now let's just upload the shell

00:13:43,199 --> 00:13:47,120
script

00:13:44,880 --> 00:13:48,079
and again the shell script is just the

00:13:47,120 --> 00:13:49,920
kind of an example

00:13:48,079 --> 00:13:52,160
for an rc this is not the interesting

00:13:49,920 --> 00:13:52,639
part here but i'm going to take the name

00:13:52,160 --> 00:13:57,519
of the

00:13:52,639 --> 00:13:57,519
the php file

00:13:57,839 --> 00:14:00,959
and i'm going to replace it the first

00:13:59,279 --> 00:14:02,639
thing we're going to do

00:14:00,959 --> 00:14:07,120
is to run a curl command that will

00:14:02,639 --> 00:14:08,720
access this file this php file

00:14:07,120 --> 00:14:10,720
and then we will be able to run simple

00:14:08,720 --> 00:14:12,399
commands on the machine

00:14:10,720 --> 00:14:14,320
so the first thing i'm going to do is to

00:14:12,399 --> 00:14:16,000
just to make make

00:14:14,320 --> 00:14:18,560
make a new directory so i'm going to use

00:14:16,000 --> 00:14:20,480
the make deer command

00:14:18,560 --> 00:14:22,639
the upper terminal will show us what

00:14:20,480 --> 00:14:24,639
exactly going on inside the pod so the

00:14:22,639 --> 00:14:26,000
upper terminal is just to so we will

00:14:24,639 --> 00:14:28,720
understand what's going on the

00:14:26,000 --> 00:14:30,079
the lord the lower one will be for us as

00:14:28,720 --> 00:14:32,880
an attacker so

00:14:30,079 --> 00:14:33,680
let's look on the pod so we see that

00:14:32,880 --> 00:14:36,880
there is nothing

00:14:33,680 --> 00:14:38,480
under the temp directory

00:14:36,880 --> 00:14:40,320
and now we just ran the make deer

00:14:38,480 --> 00:14:44,079
command and we can see that

00:14:40,320 --> 00:14:47,360
by uh by by using the php file

00:14:44,079 --> 00:14:48,720
we managed to create a new deal and now

00:14:47,360 --> 00:14:49,279
this is the interesting part we're going

00:14:48,720 --> 00:14:51,600
to run

00:14:49,279 --> 00:14:53,040
a mount command which basically help us

00:14:51,600 --> 00:14:56,399
to mount the host's

00:14:53,040 --> 00:14:57,680
file system into our port so we consider

00:14:56,399 --> 00:15:00,560
there is nothing under

00:14:57,680 --> 00:15:01,920
thing then us and after we ran the mount

00:15:00,560 --> 00:15:04,399
command we see the

00:15:01,920 --> 00:15:05,760
actual file system of the host and this

00:15:04,399 --> 00:15:07,760
is the problem here and we will see in a

00:15:05,760 --> 00:15:10,240
second how we can fix it

00:15:07,760 --> 00:15:11,120
so now just assume that i know the

00:15:10,240 --> 00:15:13,440
attacker that

00:15:11,120 --> 00:15:14,320
the name of the secret file is the cards

00:15:13,440 --> 00:15:15,839
json

00:15:14,320 --> 00:15:18,160
so i'm going to just look for all the

00:15:15,839 --> 00:15:21,199
files named car json

00:15:18,160 --> 00:15:22,480
and then i just want to print it so i um

00:15:21,199 --> 00:15:26,240
so there's just going to print the

00:15:22,480 --> 00:15:29,600
content of the file

00:15:26,240 --> 00:15:32,720
and that's it so again the

00:15:29,600 --> 00:15:35,440
this file basically located inside

00:15:32,720 --> 00:15:37,440
the other pod but because the resources

00:15:35,440 --> 00:15:40,000
are shared between those two pods

00:15:37,440 --> 00:15:41,279
uh we basically managed to access from

00:15:40,000 --> 00:15:43,600
the one

00:15:41,279 --> 00:15:46,480
part to the other because it's because

00:15:43,600 --> 00:15:48,720
it is a privilege part

00:15:46,480 --> 00:15:49,519
now let's see what we can do in order to

00:15:48,720 --> 00:15:52,639
fix that

00:15:49,519 --> 00:15:55,680
this issue so we're just going to change

00:15:52,639 --> 00:15:59,759
the privilege into false

00:15:55,680 --> 00:15:59,759
i'm gonna rebuild all my environment

00:16:00,240 --> 00:16:05,120
so i have a cleanup script and now i'm

00:16:02,160 --> 00:16:05,120
gonna rebuild it again

00:16:06,959 --> 00:16:12,880
and let's

00:16:10,000 --> 00:16:14,480
reopen the application and now we're

00:16:12,880 --> 00:16:16,160
going to do exactly the same flow so

00:16:14,480 --> 00:16:19,440
we're going to upload

00:16:16,160 --> 00:16:19,440
our php script

00:16:20,639 --> 00:16:24,240
and we will try to do exactly the same

00:16:22,639 --> 00:16:28,160
so now we're going to access

00:16:24,240 --> 00:16:30,320
this php script from the outside

00:16:28,160 --> 00:16:31,920
let's look on the on our pods first

00:16:30,320 --> 00:16:34,880
let's make sure that they are live

00:16:31,920 --> 00:16:35,600
so yeah they started like uh 28 seconds

00:16:34,880 --> 00:16:38,480
ago

00:16:35,600 --> 00:16:40,800
now let's uh run keep cdl exec into one

00:16:38,480 --> 00:16:40,800
of them

00:16:40,880 --> 00:16:45,199
and let's try to do exactly the same

00:16:42,399 --> 00:16:48,399
thing so uh we just validated

00:16:45,199 --> 00:16:48,399
there is nothing under the them

00:16:48,839 --> 00:16:51,759
directory

00:16:50,079 --> 00:16:53,600
we're going to run the make deer

00:16:51,759 --> 00:16:56,720
director again

00:16:53,600 --> 00:16:56,720
they make their command again

00:16:57,279 --> 00:17:00,240
and just a second

00:17:03,199 --> 00:17:06,559
so now i'm gonna check the content of uh

00:17:05,760 --> 00:17:09,600
the temp

00:17:06,559 --> 00:17:10,000
file after i render make gear command

00:17:09,600 --> 00:17:12,559
and

00:17:10,000 --> 00:17:13,760
as you can see everything is working and

00:17:12,559 --> 00:17:18,799
now this is the difference so now we're

00:17:13,760 --> 00:17:22,079
gonna run the mount command

00:17:18,799 --> 00:17:23,679
and because of the fact that we're not

00:17:22,079 --> 00:17:25,760
running in a privilege

00:17:23,679 --> 00:17:27,120
in a privileged pod the amount command

00:17:25,760 --> 00:17:29,280
fails so let's try to run

00:17:27,120 --> 00:17:30,320
exactly the same command inside that pod

00:17:29,280 --> 00:17:33,840
inside the pod

00:17:30,320 --> 00:17:36,240
so we'll understand what's the issue

00:17:33,840 --> 00:17:36,960
and we see that we got permission denied

00:17:36,240 --> 00:17:38,799
and again

00:17:36,960 --> 00:17:40,240
the reason why we got permission tonight

00:17:38,799 --> 00:17:44,400
is only because

00:17:40,240 --> 00:17:44,400
we used we we didn't use privilegebot

00:17:45,280 --> 00:17:49,039
uh good so that was about privileged

00:17:48,160 --> 00:17:51,679
pods next

00:17:49,039 --> 00:17:53,280
topic is about uh next demo is about

00:17:51,679 --> 00:17:57,039
root containers

00:17:53,280 --> 00:17:57,679
so when when do we actually need root

00:17:57,039 --> 00:18:00,080
containers

00:17:57,679 --> 00:18:00,880
like why is it when is it useful so

00:18:00,080 --> 00:18:04,240
think about

00:18:00,880 --> 00:18:07,440
every simple case like that you need

00:18:04,240 --> 00:18:08,640
in order to to manage your uh to manage

00:18:07,440 --> 00:18:12,000
your image

00:18:08,640 --> 00:18:14,160
cases like installing system packages or

00:18:12,000 --> 00:18:15,440
just edit simple configuration on the

00:18:14,160 --> 00:18:18,400
image

00:18:15,440 --> 00:18:20,320
or even network operations like like

00:18:18,400 --> 00:18:22,640
simple network operations like ping

00:18:20,320 --> 00:18:24,960
for all of those you actually need to

00:18:22,640 --> 00:18:28,799
run this route inside the container

00:18:24,960 --> 00:18:30,880
so the security risk is uh pretty much

00:18:28,799 --> 00:18:32,240
is much lower than running inside a

00:18:30,880 --> 00:18:34,559
privileged pod

00:18:32,240 --> 00:18:35,440
but it's still risky because an attacker

00:18:34,559 --> 00:18:38,559
can

00:18:35,440 --> 00:18:39,520
use those privileges in order to do to

00:18:38,559 --> 00:18:41,760
do some arms so

00:18:39,520 --> 00:18:44,240
they can access files they can export

00:18:41,760 --> 00:18:47,360
the network

00:18:44,240 --> 00:18:50,160
and i think that another thing to

00:18:47,360 --> 00:18:51,760
to mention here is the problem that in

00:18:50,160 --> 00:18:55,760
lots of cases

00:18:51,760 --> 00:18:57,520
someone that uses uh like a simple image

00:18:55,760 --> 00:18:59,039
that was just download for docker app

00:18:57,520 --> 00:19:00,720
for example

00:18:59,039 --> 00:19:02,240
they will be surprised to find out that

00:19:00,720 --> 00:19:03,760
this is also

00:19:02,240 --> 00:19:05,440
that they are running as root containers

00:19:03,760 --> 00:19:07,919
as well so in this example

00:19:05,440 --> 00:19:08,720
in the picture you can see that i just

00:19:07,919 --> 00:19:12,799
used the

00:19:08,720 --> 00:19:14,720
php based image did nothing as part of

00:19:12,799 --> 00:19:17,600
the docker file that changed nothing

00:19:14,720 --> 00:19:18,640
related to the to the user and when i

00:19:17,600 --> 00:19:21,280
when i will run

00:19:18,640 --> 00:19:22,880
this image you can see that i'm still

00:19:21,280 --> 00:19:26,160
running this root so lots of

00:19:22,880 --> 00:19:30,720
lots of images uh come with the default

00:19:26,160 --> 00:19:30,720
uh root like default root containers

00:19:31,039 --> 00:19:34,960
so now let's see how we can solve uh

00:19:33,600 --> 00:19:36,799
solve this problem and we have two

00:19:34,960 --> 00:19:37,280
different solutions today the first one

00:19:36,799 --> 00:19:40,080
is

00:19:37,280 --> 00:19:41,600
links capabilities probably uh most of

00:19:40,080 --> 00:19:44,160
you are already familiar with this

00:19:41,600 --> 00:19:45,520
uh kind of legacy and and and all

00:19:44,160 --> 00:19:47,520
capability

00:19:45,520 --> 00:19:49,760
and so this is kind of an option to

00:19:47,520 --> 00:19:51,520
grant very specific permissions to your

00:19:49,760 --> 00:19:52,240
application so instead of just saying

00:19:51,520 --> 00:19:53,600
okay

00:19:52,240 --> 00:19:55,440
i'm going to give my application

00:19:53,600 --> 00:19:59,200
everything and we can just

00:19:55,440 --> 00:20:01,679
pick very specific permissions so

00:19:59,200 --> 00:20:02,400
the basic recommendation is to follow

00:20:01,679 --> 00:20:06,159
the

00:20:02,400 --> 00:20:08,240
list list privilege principle

00:20:06,159 --> 00:20:09,360
so it means that we will we'll try to

00:20:08,240 --> 00:20:10,880
start by

00:20:09,360 --> 00:20:13,200
to start by dropping all of our

00:20:10,880 --> 00:20:15,120
capabilities and then gradually

00:20:13,200 --> 00:20:16,480
add those capabilities that we actually

00:20:15,120 --> 00:20:18,840
need in order

00:20:16,480 --> 00:20:21,840
to run our application and let's try it

00:20:18,840 --> 00:20:21,840
out

00:20:22,159 --> 00:20:25,679
so in this case we're gonna have a kind

00:20:24,240 --> 00:20:29,520
of a different environment

00:20:25,679 --> 00:20:31,760
uh so this is our this is our

00:20:29,520 --> 00:20:34,559
configuration we see that we're not

00:20:31,760 --> 00:20:37,760
running as privileged pod

00:20:34,559 --> 00:20:40,159
and this is our uh our

00:20:37,760 --> 00:20:42,080
container so we will run inside we'll

00:20:40,159 --> 00:20:45,360
run a cube cdl

00:20:42,080 --> 00:20:48,960
exec to run inside the inside the

00:20:45,360 --> 00:20:49,919
pod let's check the ip of our machine

00:20:48,960 --> 00:20:53,200
and now we will

00:20:49,919 --> 00:20:55,679
try to use an nmap enablement and then

00:20:53,200 --> 00:20:56,240
a tool called nmop nmop is basically a

00:20:55,679 --> 00:20:59,440
free

00:20:56,240 --> 00:21:00,400
network scanner very common among

00:20:59,440 --> 00:21:02,240
attackers

00:21:00,400 --> 00:21:04,559
so as you can see i just managed to scan

00:21:02,240 --> 00:21:07,360
my cluster and i found the ip

00:21:04,559 --> 00:21:08,720
of the payment service just imagine that

00:21:07,360 --> 00:21:11,360
there is a vulnerability

00:21:08,720 --> 00:21:12,559
on this payment service and now because

00:21:11,360 --> 00:21:15,840
i have an access to the

00:21:12,559 --> 00:21:18,240
to to this service i can just access it

00:21:15,840 --> 00:21:20,640
and run on the payment service

00:21:18,240 --> 00:21:22,799
and so yeah in this example we can also

00:21:20,640 --> 00:21:24,559
see that we just ran and command to see

00:21:22,799 --> 00:21:24,880
the open ports and listening ports on

00:21:24,559 --> 00:21:27,919
the

00:21:24,880 --> 00:21:29,039
machine as well so now let's see how we

00:21:27,919 --> 00:21:32,320
can solve the

00:21:29,039 --> 00:21:34,799
this issue just imagine that i

00:21:32,320 --> 00:21:36,960
i will just uh drop all of those

00:21:34,799 --> 00:21:39,840
capabilities

00:21:36,960 --> 00:21:41,200
and let's uh let's restart our

00:21:39,840 --> 00:21:44,240
environment so i'm going to clean up

00:21:41,200 --> 00:21:45,919
everything and rebuild again and again

00:21:44,240 --> 00:21:47,919
the assumption is that the result

00:21:45,919 --> 00:21:50,159
kind of the there is kind of a

00:21:47,919 --> 00:21:52,720
vulnerability like an rce

00:21:50,159 --> 00:21:54,640
as part of this application so i can get

00:21:52,720 --> 00:21:58,320
an access into it

00:21:54,640 --> 00:22:00,960
and and the problem is that because

00:21:58,320 --> 00:22:02,720
after i have an access i can do some

00:22:00,960 --> 00:22:05,919
problems so let's try to

00:22:02,720 --> 00:22:07,520
eliminate those problems if possible

00:22:05,919 --> 00:22:12,480
so i'm going to run exactly the same

00:22:07,520 --> 00:22:13,919
flow and i'm going to run map again

00:22:12,480 --> 00:22:15,679
this time you will see that there is a

00:22:13,919 --> 00:22:18,640
failure

00:22:15,679 --> 00:22:19,200
and the reason for that is that is that

00:22:18,640 --> 00:22:21,600
nmap

00:22:19,200 --> 00:22:22,640
actually requires the capability

00:22:21,600 --> 00:22:24,960
capability name

00:22:22,640 --> 00:22:26,080
metro so when we dropped all of the

00:22:24,960 --> 00:22:29,200
capabilities

00:22:26,080 --> 00:22:32,030
we basically eliminate the option from

00:22:29,200 --> 00:22:33,520
from net net and map to run um

00:22:32,030 --> 00:22:35,919
[Music]

00:22:33,520 --> 00:22:38,559
amazing so that was linux capabilities

00:22:35,919 --> 00:22:42,159
let's let's continue the next one

00:22:38,559 --> 00:22:45,520
and the next option is run is non-root

00:22:42,159 --> 00:22:48,720
this kubernetes option basically uh

00:22:45,520 --> 00:22:50,880
let you let kubernetes block

00:22:48,720 --> 00:22:52,000
containers that would like to run as

00:22:50,880 --> 00:22:54,480
root

00:22:52,000 --> 00:22:56,159
so basically you can say to containers

00:22:54,480 --> 00:22:57,760
okay please

00:22:56,159 --> 00:22:59,600
stop from running all the containers

00:22:57,760 --> 00:23:01,919
that would like to run is root

00:22:59,600 --> 00:23:02,960
and the recommendation if there is if

00:23:01,919 --> 00:23:05,039
you know

00:23:02,960 --> 00:23:07,200
that none of your images none of your

00:23:05,039 --> 00:23:10,400
containers need to run as roots so

00:23:07,200 --> 00:23:13,520
just turn it on and now let's see that

00:23:10,400 --> 00:23:16,559
as part of the example uh

00:23:13,520 --> 00:23:18,240
so i'm gonna remove the uh the dropper

00:23:16,559 --> 00:23:21,760
capabilities and i'm gonna

00:23:18,240 --> 00:23:25,039
turn on the run is not root let's

00:23:21,760 --> 00:23:28,159
clean up the environment and

00:23:25,039 --> 00:23:28,159
build everything

00:23:28,559 --> 00:23:32,159
and you can see that immediately we we

00:23:31,520 --> 00:23:34,840
got a

00:23:32,159 --> 00:23:36,480
an error that create container

00:23:34,840 --> 00:23:37,360
configuration create container config

00:23:36,480 --> 00:23:38,960
error

00:23:37,360 --> 00:23:40,400
let's try to understand what exactly is

00:23:38,960 --> 00:23:42,159
going on so i'm going to run the

00:23:40,400 --> 00:23:46,320
describe command

00:23:42,159 --> 00:23:49,120
on the pod and let's look for

00:23:46,320 --> 00:23:50,559
the actual arrow yeah there it is you

00:23:49,120 --> 00:23:52,720
can see that

00:23:50,559 --> 00:23:54,480
we failed because the container as run

00:23:52,720 --> 00:23:57,120
is not root and the image

00:23:54,480 --> 00:23:58,159
want to run as root so we basically

00:23:57,120 --> 00:24:01,360
managed

00:23:58,159 --> 00:24:05,760
to block this container for

00:24:01,360 --> 00:24:08,320
from running on our environment

00:24:05,760 --> 00:24:10,159
amazing so uh so we talked about

00:24:08,320 --> 00:24:13,440
privilege but we talked about

00:24:10,159 --> 00:24:15,520
uh root containers next thing for us

00:24:13,440 --> 00:24:16,880
is to talk about resource limitations so

00:24:15,520 --> 00:24:20,799
this is kind of a

00:24:16,880 --> 00:24:23,279
kind of a a different topic

00:24:20,799 --> 00:24:24,559
because it's not like an immediate

00:24:23,279 --> 00:24:26,480
security risk

00:24:24,559 --> 00:24:27,679
but we will see in a second what can

00:24:26,480 --> 00:24:29,679
what can go wrong

00:24:27,679 --> 00:24:31,200
when we we don't have a proper

00:24:29,679 --> 00:24:33,120
limitation so

00:24:31,200 --> 00:24:34,720
let's first describe what kind of

00:24:33,120 --> 00:24:38,559
resources do we have so we have like

00:24:34,720 --> 00:24:41,840
cpu we have memory and and

00:24:38,559 --> 00:24:44,080
of the the basic problem is that

00:24:41,840 --> 00:24:45,440
pods run with unbounded limits and this

00:24:44,080 --> 00:24:47,919
is by default so

00:24:45,440 --> 00:24:49,679
a single part can basically take all the

00:24:47,919 --> 00:24:52,000
resources all the cpu and memory that

00:24:49,679 --> 00:24:54,720
available is on the node

00:24:52,000 --> 00:24:57,039
and and the simple case is that

00:24:54,720 --> 00:24:58,799
kubernetes might kill the application or

00:24:57,039 --> 00:25:02,080
even nearby applications

00:24:58,799 --> 00:25:05,039
within the same node so as you all

00:25:02,080 --> 00:25:07,600
probably know defaults are never good uh

00:25:05,039 --> 00:25:10,320
so the basic recommendation is just to

00:25:07,600 --> 00:25:10,720
to manually assign the those limitations

00:25:10,320 --> 00:25:12,159
for

00:25:10,720 --> 00:25:14,240
each and every application so you need

00:25:12,159 --> 00:25:16,159
to make sure that you know

00:25:14,240 --> 00:25:17,360
what type and like how many resources

00:25:16,159 --> 00:25:19,760
your application

00:25:17,360 --> 00:25:22,799
your applications need and then to

00:25:19,760 --> 00:25:26,000
properly set those limits

00:25:22,799 --> 00:25:28,960
uh so let's talk about cpu first

00:25:26,000 --> 00:25:30,480
so for cpu there is a throttling

00:25:28,960 --> 00:25:33,840
mechanism

00:25:30,480 --> 00:25:35,120
uh so uh so basically it means that

00:25:33,840 --> 00:25:37,200
kubernetes

00:25:35,120 --> 00:25:38,960
doesn't really terminate those

00:25:37,200 --> 00:25:42,240
applications so that

00:25:38,960 --> 00:25:45,919
it will just cause uh um

00:25:42,240 --> 00:25:49,440
and like slowness on the performance so

00:25:45,919 --> 00:25:49,440
this is like the worst case scenario

00:25:49,679 --> 00:25:53,200
but with memory this is a different

00:25:52,000 --> 00:25:55,279
story so

00:25:53,200 --> 00:25:56,559
first of all memory is not compressible

00:25:55,279 --> 00:25:59,679
of course

00:25:56,559 --> 00:26:01,600
and uh pods will basically

00:25:59,679 --> 00:26:03,440
will be terminated once they will reach

00:26:01,600 --> 00:26:06,720
the memory limit

00:26:03,440 --> 00:26:10,320
so the simple bad case is that for

00:26:06,720 --> 00:26:12,320
attacks like dos attack we can block

00:26:10,320 --> 00:26:13,360
the legitimate user from using our app

00:26:12,320 --> 00:26:16,799
right we will just

00:26:13,360 --> 00:26:18,640
take all the memory um and that's it no

00:26:16,799 --> 00:26:20,000
no other users will be able to use it so

00:26:18,640 --> 00:26:23,440
this is like the

00:26:20,000 --> 00:26:26,320
the simple case but the worst case

00:26:23,440 --> 00:26:27,600
is that someone will run a dos attack on

00:26:26,320 --> 00:26:29,840
our application

00:26:27,600 --> 00:26:31,520
and it will block legitimate users from

00:26:29,840 --> 00:26:33,840
using a different application

00:26:31,520 --> 00:26:36,960
that is running on the same node now

00:26:33,840 --> 00:26:38,159
let's see an example for that

00:26:36,960 --> 00:26:40,480
so with the next demo we're going to

00:26:38,159 --> 00:26:40,880
have uh two different applications both

00:26:40,480 --> 00:26:42,799
of them

00:26:40,880 --> 00:26:45,360
again running on the same node we're

00:26:42,799 --> 00:26:48,720
going to have the innocent application

00:26:45,360 --> 00:26:50,159
that shouldn't be affected by any other

00:26:48,720 --> 00:26:51,919
application

00:26:50,159 --> 00:26:54,559
but we'll see in a second that it will

00:26:51,919 --> 00:26:55,200
be affected and we also have a

00:26:54,559 --> 00:26:58,320
vulnerable

00:26:55,200 --> 00:27:00,720
available application uh

00:26:58,320 --> 00:27:02,240
at the beginning we'll see that we'll

00:27:00,720 --> 00:27:04,320
run this application without any

00:27:02,240 --> 00:27:07,760
resource limitation

00:27:04,320 --> 00:27:09,360
um and one important note is that

00:27:07,760 --> 00:27:11,039
we will assume that there is a

00:27:09,360 --> 00:27:13,039
vulnerability on this

00:27:11,039 --> 00:27:14,799
like vulnerable application that will

00:27:13,039 --> 00:27:17,840
basically let the

00:27:14,799 --> 00:27:19,679
let the attacker uh take more more and

00:27:17,840 --> 00:27:22,960
more resources from the pod and

00:27:19,679 --> 00:27:24,240
we'll see that in a second uh so again

00:27:22,960 --> 00:27:25,520
what you will see is that

00:27:24,240 --> 00:27:27,120
an attacker releases this kind of

00:27:25,520 --> 00:27:28,960
vulnerability it will take more

00:27:27,120 --> 00:27:32,320
resources from the vulnerable app

00:27:28,960 --> 00:27:35,840
but it will also affect the uh the

00:27:32,320 --> 00:27:35,840
the innocent application as well

00:27:40,159 --> 00:27:44,559
good so let's look at those two

00:27:42,480 --> 00:27:46,840
applications so this is like the

00:27:44,559 --> 00:27:48,799
the regular one without any recent

00:27:46,840 --> 00:27:51,039
limitation and this is the

00:27:48,799 --> 00:27:53,039
the innocent application just a regular

00:27:51,039 --> 00:27:54,640
application

00:27:53,039 --> 00:27:56,640
so for each one of those applications we

00:27:54,640 --> 00:28:00,240
can see the amount of

00:27:56,640 --> 00:28:03,200
total available memory and this is our

00:28:00,240 --> 00:28:04,480
our vulnerable application and as you

00:28:03,200 --> 00:28:07,919
can see there is an api

00:28:04,480 --> 00:28:10,399
for just uh uh like

00:28:07,919 --> 00:28:10,960
taking more and more resources and again

00:28:10,399 --> 00:28:13,919
this is

00:28:10,960 --> 00:28:14,960
kind of the demo for the vulnerability

00:28:13,919 --> 00:28:18,559
so as you can see

00:28:14,960 --> 00:28:21,760
when we uh when we tried to allocate uh

00:28:18,559 --> 00:28:23,919
uh one 100 megabytes we

00:28:21,760 --> 00:28:25,840
actually affected the other innocent up

00:28:23,919 --> 00:28:26,159
and when we tried 200 megabytes we can

00:28:25,840 --> 00:28:28,559
see

00:28:26,159 --> 00:28:29,600
an immediate drop in the amount of

00:28:28,559 --> 00:28:33,360
available

00:28:29,600 --> 00:28:33,360
memory on the innocent app

00:28:33,760 --> 00:28:39,279
so now let's try just to turn on the

00:28:36,399 --> 00:28:42,320
result limitation

00:28:39,279 --> 00:28:45,840
so i'm going to limit myself to um

00:28:42,320 --> 00:28:45,840
to 100 megabytes

00:28:46,000 --> 00:28:49,840
and i'm going to clean up all of my

00:28:47,279 --> 00:28:49,840
environment

00:28:50,640 --> 00:28:53,919
and rebuild it again

00:28:57,520 --> 00:29:00,559
and now let's wait for the application

00:28:59,760 --> 00:29:05,760
to

00:29:00,559 --> 00:29:05,760
start amazing

00:29:06,000 --> 00:29:10,399
good so let's try with a simple case we

00:29:09,360 --> 00:29:13,120
just allocated

00:29:10,399 --> 00:29:14,880
10 megabytes we see that it's working

00:29:13,120 --> 00:29:16,559
but this time we'll try to allocate

00:29:14,880 --> 00:29:18,399
more than that and we see that

00:29:16,559 --> 00:29:21,679
immediately we failed with

00:29:18,399 --> 00:29:24,240
100 megabyte allocation so

00:29:21,679 --> 00:29:25,039
just this simple a few lines that we

00:29:24,240 --> 00:29:28,080
added

00:29:25,039 --> 00:29:28,720
prevented a potential attacker that

00:29:28,080 --> 00:29:31,679
mighta

00:29:28,720 --> 00:29:32,880
might use a vulnerability inside of our

00:29:31,679 --> 00:29:36,399
up to use it

00:29:32,880 --> 00:29:36,399
and to take more and more resources

00:29:36,960 --> 00:29:40,480
uh yeah so that was basically like the

00:29:39,360 --> 00:29:42,799
three demos

00:29:40,480 --> 00:29:45,360
and now let's try to to go over some

00:29:42,799 --> 00:29:45,360
conclusions

00:29:45,760 --> 00:29:49,919
so what did we talk about today we

00:29:48,559 --> 00:29:52,240
talked about like the ownership

00:29:49,919 --> 00:29:55,120
of developers in the cloud environment

00:29:52,240 --> 00:29:57,120
uh we talked about security context

00:29:55,120 --> 00:29:59,279
uh about we saw an example for

00:29:57,120 --> 00:29:59,919
privileged pod we said that it's really

00:29:59,279 --> 00:30:01,840
important

00:29:59,919 --> 00:30:03,039
for you not to use privilege pod there

00:30:01,840 --> 00:30:04,880
are very small

00:30:03,039 --> 00:30:06,320
scenarios when you need to use it if you

00:30:04,880 --> 00:30:09,760
don't need to use it

00:30:06,320 --> 00:30:11,360
please don't use it um we also talked

00:30:09,760 --> 00:30:13,840
about fruit containers

00:30:11,360 --> 00:30:15,520
uh we mentioned what are the differences

00:30:13,840 --> 00:30:18,880
from privileged pods

00:30:15,520 --> 00:30:23,120
and and now we can eliminate

00:30:18,880 --> 00:30:24,799
those uh those uh security risks

00:30:23,120 --> 00:30:28,000
and last but not least we talked about

00:30:24,799 --> 00:30:28,000
the resource limitation

00:30:28,159 --> 00:30:31,440
uh so let's talk about some conclusions

00:30:30,320 --> 00:30:33,840
so

00:30:31,440 --> 00:30:34,559
kubernetes security is definitely art

00:30:33,840 --> 00:30:37,919
but is

00:30:34,559 --> 00:30:40,000
is is also doable and i think that as

00:30:37,919 --> 00:30:41,039
long as developers will be more and more

00:30:40,000 --> 00:30:44,240
familiar with the

00:30:41,039 --> 00:30:47,760
risks is part of kubernetes environment

00:30:44,240 --> 00:30:49,120
and uh it will be it will be just it

00:30:47,760 --> 00:30:51,360
will be just amazing and

00:30:49,120 --> 00:30:52,720
it's with that would basically need to

00:30:51,360 --> 00:30:54,640
understand that it's kind of an

00:30:52,720 --> 00:30:56,240
inseparable part of our application it's

00:30:54,640 --> 00:30:58,159
not like we can just

00:30:56,240 --> 00:30:59,760
implement our own source codes and

00:30:58,159 --> 00:31:01,200
forget about everything

00:30:59,760 --> 00:31:02,880
it's part of our application we need to

00:31:01,200 --> 00:31:04,159
make sure we are familiar with those

00:31:02,880 --> 00:31:05,919
risks as well

00:31:04,159 --> 00:31:07,919
and of course it's all about education

00:31:05,919 --> 00:31:11,679
so we need to make sure that

00:31:07,919 --> 00:31:11,679
everyone are familiar with those risks

00:31:12,159 --> 00:31:18,000
um scott you want to take it

00:31:15,840 --> 00:31:18,880
yeah so as i mentioned at the beginning

00:31:18,000 --> 00:31:20,000
like when you look at the different

00:31:18,880 --> 00:31:22,000
primitives you know starting with a

00:31:20,000 --> 00:31:23,840
secure base right like

00:31:22,000 --> 00:31:25,519
the wiggly pieces of your environment

00:31:23,840 --> 00:31:26,480
are probably where the biggest risk is

00:31:25,519 --> 00:31:28,000
so like

00:31:26,480 --> 00:31:29,840
obviously once you start sharing

00:31:28,000 --> 00:31:32,240
responsibility with the developers

00:31:29,840 --> 00:31:33,679
making sure that you shift left not only

00:31:32,240 --> 00:31:35,840
the configuration

00:31:33,679 --> 00:31:37,440
that you manually choose but also the

00:31:35,840 --> 00:31:38,559
configuration that you don't necessarily

00:31:37,440 --> 00:31:40,399
realize that you're pulling in in the

00:31:38,559 --> 00:31:41,840
container images so i always say start

00:31:40,399 --> 00:31:43,840
with a you know providence start with

00:31:41,840 --> 00:31:44,240
the trusted thing from a trusted place

00:31:43,840 --> 00:31:45,840
so

00:31:44,240 --> 00:31:47,840
start with a you know linux based images

00:31:45,840 --> 00:31:49,200
that you that you trust the people that

00:31:47,840 --> 00:31:50,799
put the configuration files in those

00:31:49,200 --> 00:31:52,080
base pieces especially things around

00:31:50,799 --> 00:31:54,000
like the critical pieces especially

00:31:52,080 --> 00:31:56,880
around like things like open ssl and

00:31:54,000 --> 00:31:58,799
glib c and things like that

00:31:56,880 --> 00:32:00,720
and then or i think i'm going to cover

00:31:58,799 --> 00:32:03,360
the next one

00:32:00,720 --> 00:32:05,440
um also like think about it in the

00:32:03,360 --> 00:32:07,679
context of configuration sprawl

00:32:05,440 --> 00:32:09,440
right like it's not just it's not just

00:32:07,679 --> 00:32:10,799
like the quality of the configuration

00:32:09,440 --> 00:32:12,640
but also the quantity because with

00:32:10,799 --> 00:32:13,519
quantity you're gonna have a bigger risk

00:32:12,640 --> 00:32:15,440
and so

00:32:13,519 --> 00:32:17,360
you know we recommend standing on like

00:32:15,440 --> 00:32:18,799
standardizing on a single base image no

00:32:17,360 --> 00:32:19,600
matter what that is is still a better

00:32:18,799 --> 00:32:21,279
thing than letting

00:32:19,600 --> 00:32:23,200
people pull in any base image they want

00:32:21,279 --> 00:32:24,799
so shift left that standard

00:32:23,200 --> 00:32:26,320
uh base image and then make sure that

00:32:24,799 --> 00:32:28,480
standard thing is high quality

00:32:26,320 --> 00:32:29,919
those two things are kind of but they're

00:32:28,480 --> 00:32:32,080
both necessary

00:32:29,919 --> 00:32:33,440
um you know to reach a sufficient level

00:32:32,080 --> 00:32:35,440
of of

00:32:33,440 --> 00:32:36,640
you know risk basically that you can you

00:32:35,440 --> 00:32:38,159
can guarantee they're not pulling in

00:32:36,640 --> 00:32:40,320
configuration from all over the place

00:32:38,159 --> 00:32:42,559
as well as like low quality content and

00:32:40,320 --> 00:32:44,720
other things

00:32:42,559 --> 00:32:45,840
and or i think i'll hand it back to you

00:32:44,720 --> 00:32:48,480
amazing so yeah

00:32:45,840 --> 00:32:49,519
continuing the the the shifting left

00:32:48,480 --> 00:32:52,720
messages

00:32:49,519 --> 00:32:55,120
uh so just try to to

00:32:52,720 --> 00:32:56,559
understand and and like automatically

00:32:55,120 --> 00:32:59,679
catch those issues as

00:32:56,559 --> 00:33:02,480
soon as possible ideally during the

00:32:59,679 --> 00:33:02,799
the development process so you know like

00:33:02,480 --> 00:33:05,120
let's

00:33:02,799 --> 00:33:06,480
let's issue in production uh you will

00:33:05,120 --> 00:33:10,080
have more time

00:33:06,480 --> 00:33:11,360
uh on focusing on your own code and and

00:33:10,080 --> 00:33:13,200
and yeah i think this is like the the

00:33:11,360 --> 00:33:15,919
most important part is let's try to

00:33:13,200 --> 00:33:17,919
find those issues as soon as possible

00:33:15,919 --> 00:33:21,200
and

00:33:17,919 --> 00:33:22,399
so basically we we covered only a very

00:33:21,200 --> 00:33:25,519
very small

00:33:22,399 --> 00:33:26,799
uh part of kubernetes security we

00:33:25,519 --> 00:33:30,240
skipped lots of

00:33:26,799 --> 00:33:32,720
uh lots of uh um like known issues

00:33:30,240 --> 00:33:33,360
uh so if you are interested in this

00:33:32,720 --> 00:33:35,200
content

00:33:33,360 --> 00:33:37,360
if you think that this is also

00:33:35,200 --> 00:33:39,919
inseparable part of your application

00:33:37,360 --> 00:33:40,559
please make sure that you uh that you

00:33:39,919 --> 00:33:43,919
are aware

00:33:40,559 --> 00:33:47,120
about all of the security risks in um in

00:33:43,919 --> 00:33:47,600
in this list as well so make sure you're

00:33:47,120 --> 00:33:49,519
familiar

00:33:47,600 --> 00:33:51,279
with you're familiar with you're

00:33:49,519 --> 00:33:54,480
familiar with the capabilities of

00:33:51,279 --> 00:33:55,679
both security policies and how we can

00:33:54,480 --> 00:33:58,720
use it

00:33:55,679 --> 00:33:59,760
or just the other options as part of the

00:33:58,720 --> 00:34:04,559
security context

00:33:59,760 --> 00:34:04,559
like a parmor or a lot of privileged

00:34:04,840 --> 00:34:09,440
escalations

00:34:06,000 --> 00:34:12,879
um i just want to demo um

00:34:09,440 --> 00:34:15,919
a a product that we launched lately

00:34:12,879 --> 00:34:17,839
lately uh at snick and and

00:34:15,919 --> 00:34:19,359
called uh sneak infrastructure is code

00:34:17,839 --> 00:34:20,480
so basically snake infrastructure is

00:34:19,359 --> 00:34:22,879
called

00:34:20,480 --> 00:34:24,240
uh let help you to find and to fix

00:34:22,879 --> 00:34:26,079
security issues as part of

00:34:24,240 --> 00:34:27,040
configurations file configurations file

00:34:26,079 --> 00:34:29,760
of kubernetes

00:34:27,040 --> 00:34:30,560
and terraform you can use it with a

00:34:29,760 --> 00:34:33,200
direct

00:34:30,560 --> 00:34:34,079
and integration to your git or you can

00:34:33,200 --> 00:34:37,440
use it

00:34:34,079 --> 00:34:39,679
with as part of the cli and

00:34:37,440 --> 00:34:41,679
and there are also some options to

00:34:39,679 --> 00:34:43,359
filter some policies and to

00:34:41,679 --> 00:34:44,800
to change some severities as part of

00:34:43,359 --> 00:34:46,639
those policies so

00:34:44,800 --> 00:34:49,679
if you will take a look in this example

00:34:46,639 --> 00:34:53,440
i just scanned one of my repos

00:34:49,679 --> 00:34:55,839
and i can see my file and the fact that

00:34:53,440 --> 00:34:56,480
this kubernetes configuration actually

00:34:55,839 --> 00:35:00,320
uses

00:34:56,480 --> 00:35:03,760
a privileged pod and i get alert on that

00:35:00,320 --> 00:35:08,160
and same thing for the cli so i can

00:35:03,760 --> 00:35:11,599
um i can scan a specific file

00:35:08,160 --> 00:35:14,000
and to get an alert on that like to get

00:35:11,599 --> 00:35:14,640
the list of issues in this file and i

00:35:14,000 --> 00:35:16,480
can also

00:35:14,640 --> 00:35:18,000
filter by severities of course you can

00:35:16,480 --> 00:35:22,560
also introduce that

00:35:18,000 --> 00:35:22,560
as par as part of your ci cd as well

00:35:22,720 --> 00:35:29,119
that's it thanks for listening

00:35:26,240 --> 00:35:31,839
i'm not sure if we have questions let's

00:35:29,119 --> 00:35:31,839
see

00:35:42,839 --> 00:35:50,640
so

00:35:45,680 --> 00:35:50,640
let me look on the question second

00:35:54,079 --> 00:35:58,960
it looks like we have about 15

00:35:57,440 --> 00:36:02,000
questions let me know if you'd like me

00:35:58,960 --> 00:36:05,599
to read them off to you or you're

00:36:02,000 --> 00:36:08,800
welcome to uh yeah you want to read them

00:36:05,599 --> 00:36:11,200
sure okay so the first one we have

00:36:08,800 --> 00:36:12,480
um they're asking if possible please

00:36:11,200 --> 00:36:14,880
provide a comparison

00:36:12,480 --> 00:36:18,160
with okd and if there are differences

00:36:14,880 --> 00:36:20,400
there related to security

00:36:18,160 --> 00:36:22,560
i guess i can probably grab that one or

00:36:20,400 --> 00:36:24,160
um so okd for those of you that don't

00:36:22,560 --> 00:36:27,280
know is the upstream

00:36:24,160 --> 00:36:29,599
project that is sort of the uh the we

00:36:27,280 --> 00:36:30,000
call it a midstream in red hat parlance

00:36:29,599 --> 00:36:31,680
and

00:36:30,000 --> 00:36:33,599
open source parliament's between

00:36:31,680 --> 00:36:36,160
upstream kubernetes and downstream

00:36:33,599 --> 00:36:37,359
openshift as a product and so okd is

00:36:36,160 --> 00:36:39,680
kind of like rdo

00:36:37,359 --> 00:36:40,800
as to openstack it's kind of like fedora

00:36:39,680 --> 00:36:42,800
is tyrell

00:36:40,800 --> 00:36:44,480
um it's this midstream you know but

00:36:42,800 --> 00:36:47,359
still upstream project

00:36:44,480 --> 00:36:48,720
i might say you know like materially

00:36:47,359 --> 00:36:51,440
just like fedora

00:36:48,720 --> 00:36:52,560
and rel you know it's not that there's

00:36:51,440 --> 00:36:54,640
it's not that

00:36:52,560 --> 00:36:56,079
we're doing experiments at okd seeing

00:36:54,640 --> 00:36:57,440
what works seeing what doesn't work

00:36:56,079 --> 00:36:59,040
we're updating it quickly

00:36:57,440 --> 00:37:00,240
i'd say that's the biggest differences

00:36:59,040 --> 00:37:01,599
right like from a configuration

00:37:00,240 --> 00:37:02,800
perspective it would be really hard for

00:37:01,599 --> 00:37:04,560
me to nail down

00:37:02,800 --> 00:37:06,079
like what specific things are different

00:37:04,560 --> 00:37:07,119
as of right now i don't know of anything

00:37:06,079 --> 00:37:09,520
off to my head that's

00:37:07,119 --> 00:37:10,960
specifically different because the vast

00:37:09,520 --> 00:37:11,920
majority of the configuration probably

00:37:10,960 --> 00:37:14,880
is the same

00:37:11,920 --> 00:37:16,160
um but you know you'd probably see some

00:37:14,880 --> 00:37:18,079
small changes here and there

00:37:16,160 --> 00:37:20,079
and openshift as a whole was moving very

00:37:18,079 --> 00:37:22,160
quickly and so is kubernetes obviously

00:37:20,079 --> 00:37:23,440
and so you'll you'll see you know call

00:37:22,160 --> 00:37:26,160
kubernetes the fastest

00:37:23,440 --> 00:37:27,040
okd you know closer to the openshift

00:37:26,160 --> 00:37:29,200
speed and then

00:37:27,040 --> 00:37:31,119
openshift probably go you know has has

00:37:29,200 --> 00:37:32,720
lts releases which go even slower and so

00:37:31,119 --> 00:37:34,240
that kind of gives you some stability to

00:37:32,720 --> 00:37:35,760
like analyze it and things like that

00:37:34,240 --> 00:37:37,440
and then run it you know in a life cycle

00:37:35,760 --> 00:37:39,200
but but that's about the

00:37:37,440 --> 00:37:42,160
best i think i can do to that question

00:37:39,200 --> 00:37:42,160
in a short amount of time

00:37:44,079 --> 00:37:49,280
okay great um next question privilege

00:37:46,640 --> 00:37:53,520
run mode is false by default

00:37:49,280 --> 00:37:56,079
no yes it's false by default but

00:37:53,520 --> 00:37:57,680
the concept is you need to be aware

00:37:56,079 --> 00:37:59,920
about the fact that

00:37:57,680 --> 00:38:01,359
uh if you turn it on there is a huge

00:37:59,920 --> 00:38:04,320
risk

00:38:01,359 --> 00:38:05,359
so that's the concept and also i'd add

00:38:04,320 --> 00:38:06,960
or like

00:38:05,359 --> 00:38:08,640
people turn it on and then they share

00:38:06,960 --> 00:38:10,079
the files and the next thing you know

00:38:08,640 --> 00:38:11,200
your default happens to be on because

00:38:10,079 --> 00:38:12,880
you didn't realize it

00:38:11,200 --> 00:38:14,400
because you had 200 people sharing a

00:38:12,880 --> 00:38:14,960
config file that we're all building off

00:38:14,400 --> 00:38:16,160
things and

00:38:14,960 --> 00:38:17,680
next thing you have this providence

00:38:16,160 --> 00:38:19,760
where they've built these you know i

00:38:17,680 --> 00:38:21,200
like any lazy sysadmin or developer i

00:38:19,760 --> 00:38:21,839
copy things from other people that i

00:38:21,200 --> 00:38:22,800
trust

00:38:21,839 --> 00:38:24,000
the next thing you know you're gonna

00:38:22,800 --> 00:38:25,680
have this thing rampant in your

00:38:24,000 --> 00:38:27,280
environment we've seen that happen

00:38:25,680 --> 00:38:28,720
uh with openshift customers where we

00:38:27,280 --> 00:38:30,160
like tell them to not do things and then

00:38:28,720 --> 00:38:32,000
they turn it on and then it gets shared

00:38:30,160 --> 00:38:33,520
next thing you know it's everywhere

00:38:32,000 --> 00:38:38,320
exactly

00:38:33,520 --> 00:38:40,960
um so next question is

00:38:38,320 --> 00:38:44,880
yes looks like this exploit relies on

00:38:40,960 --> 00:38:47,839
code injection via an http request

00:38:44,880 --> 00:38:49,440
yeah so i i think that like the uh the

00:38:47,839 --> 00:38:51,520
exploits are the

00:38:49,440 --> 00:38:52,720
like the less interesting part here like

00:38:51,520 --> 00:38:55,520
the the

00:38:52,720 --> 00:38:56,480
the rce that we demonstrated is all only

00:38:55,520 --> 00:38:58,800
to

00:38:56,480 --> 00:39:00,720
for us to demo the fact that if you have

00:38:58,800 --> 00:39:02,160
a vulnerability on as part of your

00:39:00,720 --> 00:39:03,200
application doesn't matter what type of

00:39:02,160 --> 00:39:06,240
vulnerability

00:39:03,200 --> 00:39:07,520
and you can get an access to this pod if

00:39:06,240 --> 00:39:09,359
the configuration

00:39:07,520 --> 00:39:11,760
is wrong if something is the one wrong

00:39:09,359 --> 00:39:14,079
with your configuration then

00:39:11,760 --> 00:39:16,240
lots of lots of uh troubles can happen

00:39:14,079 --> 00:39:20,240
so this is the concept here not like the

00:39:16,240 --> 00:39:20,960
the actual rc yeah i agree i've added to

00:39:20,240 --> 00:39:22,880
that too like

00:39:20,960 --> 00:39:24,400
think about that think about you know

00:39:22,880 --> 00:39:26,640
the old saying more than 50

00:39:24,400 --> 00:39:29,040
of exploits come from internal users you

00:39:26,640 --> 00:39:31,200
know a malicious contractor a malicious

00:39:29,040 --> 00:39:32,720
user disgruntled employee you know like

00:39:31,200 --> 00:39:34,160
these configuration files can have

00:39:32,720 --> 00:39:35,839
effect on either an external exploit

00:39:34,160 --> 00:39:37,839
like the one he you know or showed

00:39:35,839 --> 00:39:38,640
or an internal person just deciding

00:39:37,839 --> 00:39:41,280
they're going to break out of the

00:39:38,640 --> 00:39:43,839
container that they have access to

00:39:41,280 --> 00:39:43,839
exactly

00:39:44,560 --> 00:39:48,000
great um next please provide some more

00:39:46,560 --> 00:39:49,200
info about the differences between

00:39:48,000 --> 00:39:54,000
privileged false

00:39:49,200 --> 00:39:54,800
and apologize runs after uh ronnie's

00:39:54,000 --> 00:39:58,240
number

00:39:54,800 --> 00:40:01,040
yeah sorry about that uh

00:39:58,240 --> 00:40:01,760
so i think that just just be already

00:40:01,040 --> 00:40:03,520
there

00:40:01,760 --> 00:40:05,599
not not too confused between like

00:40:03,520 --> 00:40:07,440
privilege and root this is something

00:40:05,599 --> 00:40:10,640
like this is two different things

00:40:07,440 --> 00:40:12,480
uh privilege means that your the

00:40:10,640 --> 00:40:14,800
the container from the container can

00:40:12,480 --> 00:40:17,599
access the hosts resources

00:40:14,800 --> 00:40:19,839
while root containers mean that your

00:40:17,599 --> 00:40:22,839
default user the user when

00:40:19,839 --> 00:40:24,319
that the your container starts with is

00:40:22,839 --> 00:40:27,200
root uh

00:40:24,319 --> 00:40:28,000
but if you're running as root without

00:40:27,200 --> 00:40:30,319
any

00:40:28,000 --> 00:40:31,280
uh without without running as privileged

00:40:30,319 --> 00:40:33,599
route so

00:40:31,280 --> 00:40:35,359
a privilege pod you cannot access the

00:40:33,599 --> 00:40:38,960
austria resources

00:40:35,359 --> 00:40:41,680
um yeah yeah and i

00:40:38,960 --> 00:40:42,880
like all these i'll add one more so so

00:40:41,680 --> 00:40:44,800
if you google search for an article

00:40:42,880 --> 00:40:45,520
called root inside and outside of a

00:40:44,800 --> 00:40:47,520
container

00:40:45,520 --> 00:40:48,880
i explain this pretty well like what it

00:40:47,520 --> 00:40:51,040
what it means

00:40:48,880 --> 00:40:52,079
yeah there's there's root inside the

00:40:51,040 --> 00:40:53,520
root outside the container

00:40:52,079 --> 00:40:55,040
and like they're two separate things and

00:40:53,520 --> 00:40:55,599
then that's separate from privilege

00:40:55,040 --> 00:40:57,599
because

00:40:55,599 --> 00:40:58,800
because privileged with root privilege

00:40:57,599 --> 00:41:00,160
without root like you could

00:40:58,800 --> 00:41:01,440
there's all kinds of permutations of

00:41:00,160 --> 00:41:01,920
this you can go but yeah just know that

00:41:01,440 --> 00:41:03,119
they're

00:41:01,920 --> 00:41:07,839
like or said they're two different

00:41:03,119 --> 00:41:07,839
things and they have profound impacts

00:41:08,079 --> 00:41:12,560
great next we have can you share the

00:41:09,680 --> 00:41:17,200
code used in the demo

00:41:12,560 --> 00:41:17,200
sure of course we can

00:41:19,440 --> 00:41:23,920
um next it can be challenging to get

00:41:22,000 --> 00:41:24,480
good values for memory limits given

00:41:23,920 --> 00:41:26,319
their

00:41:24,480 --> 00:41:28,960
average use than spikes any

00:41:26,319 --> 00:41:31,760
recommendations

00:41:28,960 --> 00:41:34,800
uh it is a challenge um scott do you

00:41:31,760 --> 00:41:37,599
have any good answer for here

00:41:34,800 --> 00:41:39,359
this this is one of my pet this one's a

00:41:37,599 --> 00:41:39,680
tough one i'll admit it's a really tough

00:41:39,359 --> 00:41:41,119
one

00:41:39,680 --> 00:41:42,800
like i joked that basically all the

00:41:41,119 --> 00:41:44,400
software that we use was written before

00:41:42,800 --> 00:41:47,040
containers and so

00:41:44,400 --> 00:41:48,640
you know like jvms and you know python

00:41:47,040 --> 00:41:50,240
and ruby and even node.js

00:41:48,640 --> 00:41:51,839
they were all written before containers

00:41:50,240 --> 00:41:52,720
so there's not really this concept of

00:41:51,839 --> 00:41:55,680
limiting

00:41:52,720 --> 00:41:57,200
the memory easily and so you end up in

00:41:55,680 --> 00:41:59,040
the oom killer

00:41:57,200 --> 00:42:01,359
you know problem basically but in a

00:41:59,040 --> 00:42:03,200
container it's not easy to solve i mean

00:42:01,359 --> 00:42:04,640
you have to you have to be able to

00:42:03,200 --> 00:42:06,640
scale out your application so that it

00:42:04,640 --> 00:42:07,280
doesn't want to use up enough ram i mean

00:42:06,640 --> 00:42:08,880
it's an art

00:42:07,280 --> 00:42:10,240
in a nutshell because you got to be able

00:42:08,880 --> 00:42:12,000
to scale out the containers so that you

00:42:10,240 --> 00:42:13,839
don't overrun the memory require you

00:42:12,000 --> 00:42:15,359
know for each one and then end up with

00:42:13,839 --> 00:42:17,119
a bunch of them getting killed you know

00:42:15,359 --> 00:42:19,520
and things like that i mean it's

00:42:17,119 --> 00:42:21,680
it's an art i'll warn you yeah but it is

00:42:19,520 --> 00:42:24,079
a really important art

00:42:21,680 --> 00:42:25,119
so so my recommendation is just make

00:42:24,079 --> 00:42:28,160
sure you're familiar with

00:42:25,119 --> 00:42:29,599
the application um like it's okay

00:42:28,160 --> 00:42:31,440
to play with that as long as you have

00:42:29,599 --> 00:42:32,880
monitoring like proper monitoring so

00:42:31,440 --> 00:42:36,319
even if you get

00:42:32,880 --> 00:42:38,720
lots of uh out of memory uh because

00:42:36,319 --> 00:42:40,640
you if the the memory limit if you have

00:42:38,720 --> 00:42:41,200
proper monitoring you can play with that

00:42:40,640 --> 00:42:43,359
and

00:42:41,200 --> 00:42:44,960
in case you eat the the limit you can

00:42:43,359 --> 00:42:47,440
just raise it a little bit

00:42:44,960 --> 00:42:48,560
so it's like a combination between get

00:42:47,440 --> 00:42:51,119
get get to know

00:42:48,560 --> 00:42:54,079
your application and also make sure that

00:42:51,119 --> 00:42:54,079
you have a proper monitoring

00:42:54,720 --> 00:43:00,640
great are the sample apps used for the

00:42:57,280 --> 00:43:00,640
demo is something you can share

00:43:00,960 --> 00:43:07,359
um we are building a repo right now

00:43:04,880 --> 00:43:08,880
let's sneak for those examples and more

00:43:07,359 --> 00:43:10,839
examples like that

00:43:08,880 --> 00:43:12,240
and we want to open that for the

00:43:10,839 --> 00:43:14,400
community uh

00:43:12,240 --> 00:43:16,560
i'm not sure if there is any if there is

00:43:14,400 --> 00:43:18,720
a specific date for us to make that

00:43:16,560 --> 00:43:20,880
public but probably soon so uh

00:43:18,720 --> 00:43:24,560
um i'll make sure we'll post anything

00:43:20,880 --> 00:43:24,560
about that when we'll it will be public

00:43:24,800 --> 00:43:31,040
any cool resources you recommend for

00:43:26,720 --> 00:43:31,040
secure and scalable systems architecture

00:43:32,290 --> 00:43:35,800
[Music]

00:43:36,000 --> 00:43:40,000
that one's a tough one for me or i don't

00:43:37,839 --> 00:43:41,119
have any like architectural guides but i

00:43:40,000 --> 00:43:43,599
do have like

00:43:41,119 --> 00:43:44,800
i work more in concepts i try to arm

00:43:43,599 --> 00:43:45,599
people with like the concepts that are

00:43:44,800 --> 00:43:47,040
gonna then

00:43:45,599 --> 00:43:48,319
let them come up with the architecture

00:43:47,040 --> 00:43:49,760
that makes sense for them because it's

00:43:48,319 --> 00:43:51,200
so hard to

00:43:49,760 --> 00:43:52,960
provide what they need because there's

00:43:51,200 --> 00:43:54,079
still so much but i can share a couple

00:43:52,960 --> 00:43:56,160
articles in

00:43:54,079 --> 00:43:57,520
in the chat to like respond with things

00:43:56,160 --> 00:43:58,560
that i think give good guidelines that

00:43:57,520 --> 00:44:00,000
will help you come up with your own

00:43:58,560 --> 00:44:02,640
architecture

00:44:00,000 --> 00:44:03,520
or maybe we can share them afterwards

00:44:02,640 --> 00:44:06,800
nice and good

00:44:03,520 --> 00:44:08,240
and and i guess it's also it's hard to

00:44:06,800 --> 00:44:11,040
learn that because it's very different

00:44:08,240 --> 00:44:12,800
between environment right

00:44:11,040 --> 00:44:14,880
so one thing like one architecture that

00:44:12,800 --> 00:44:17,440
is really suitable for one company

00:44:14,880 --> 00:44:19,440
maybe not not so proper for another one

00:44:17,440 --> 00:44:21,599
just imagine the fact

00:44:19,440 --> 00:44:23,440
uh just imagine the the case of the

00:44:21,599 --> 00:44:24,079
privileged spot so maybe you actually

00:44:23,440 --> 00:44:25,359
need to run

00:44:24,079 --> 00:44:27,359
privileged pods because you need to

00:44:25,359 --> 00:44:29,760
access the gpu

00:44:27,359 --> 00:44:30,400
it is it is possible so it doesn't mean

00:44:29,760 --> 00:44:32,319
that

00:44:30,400 --> 00:44:33,760
you you shouldn't use the privileged

00:44:32,319 --> 00:44:35,200
part but you need to think about the

00:44:33,760 --> 00:44:38,640
proper architecture

00:44:35,200 --> 00:44:41,599
to prevent security issues like that um

00:44:38,640 --> 00:44:42,800
i agree and then you just it's still so

00:44:41,599 --> 00:44:44,800
if you google search for

00:44:42,800 --> 00:44:46,800
uh container defense in depth i have a

00:44:44,800 --> 00:44:48,480
talk around this where i talk about

00:44:46,800 --> 00:44:50,000
you know there's process level isolation

00:44:48,480 --> 00:44:51,119
all the way to data center isolation you

00:44:50,000 --> 00:44:52,000
have to have them in different resource

00:44:51,119 --> 00:44:53,839
zones in amazon

00:44:52,000 --> 00:44:55,359
and like or said like if you have to

00:44:53,839 --> 00:44:56,079
provide privilege for like say you have

00:44:55,359 --> 00:44:57,520
gpus

00:44:56,079 --> 00:44:58,880
then you just need a different level of

00:44:57,520 --> 00:45:00,000
isolation maybe you need a separate

00:44:58,880 --> 00:45:01,359
kubernetes cluster

00:45:00,000 --> 00:45:02,800
where you allow that privileged stuff to

00:45:01,359 --> 00:45:03,599
happen for those gpus and you have a

00:45:02,800 --> 00:45:04,880
different one

00:45:03,599 --> 00:45:06,480
that is for your applications they're

00:45:04,880 --> 00:45:07,839
external facing and this this is really

00:45:06,480 --> 00:45:09,040
no different than what we've always had

00:45:07,839 --> 00:45:10,800
right like if you look

00:45:09,040 --> 00:45:13,440
sap and oracle at a traditional

00:45:10,800 --> 00:45:15,760
environment ran on an internal network

00:45:13,440 --> 00:45:17,200
and then your web and dns ran into dmz

00:45:15,760 --> 00:45:19,359
facing the internet right i knew

00:45:17,200 --> 00:45:21,119
you separated those from a network

00:45:19,359 --> 00:45:23,359
storage and data set you know

00:45:21,119 --> 00:45:24,800
essentially rack level isolation it's

00:45:23,359 --> 00:45:26,000
not really any different with cloud you

00:45:24,800 --> 00:45:27,599
just have different use cases

00:45:26,000 --> 00:45:29,440
so it's not bad that necessarily you

00:45:27,599 --> 00:45:30,480
need privileged here and there it's just

00:45:29,440 --> 00:45:31,920
if you're going to need it know that

00:45:30,480 --> 00:45:32,960
that whole cluster basically is now

00:45:31,920 --> 00:45:36,560
dedicated to that

00:45:32,960 --> 00:45:36,560
to that use case yeah

00:45:37,040 --> 00:45:39,520
that's why i say i try to talk in

00:45:38,240 --> 00:45:40,560
concepts that people can come up with

00:45:39,520 --> 00:45:46,240
their own

00:45:40,560 --> 00:45:48,720
their own architectures that make sense

00:45:46,240 --> 00:45:52,240
next what about industrialist images and

00:45:48,720 --> 00:45:52,240
root access for container

00:45:52,880 --> 00:45:58,240
uh i can go if you wanna

00:45:56,079 --> 00:45:59,440
yeah so like did the first thing i'll

00:45:58,240 --> 00:46:00,800
say is i don't think those things really

00:45:59,440 --> 00:46:02,800
have anything to do with each other it's

00:46:00,800 --> 00:46:05,520
equal risk so just really just think of

00:46:02,800 --> 00:46:07,200
just really says doesn't have rpm or apt

00:46:05,520 --> 00:46:10,079
in the container like it it is not

00:46:07,200 --> 00:46:11,839
connected to a dependency tree where it

00:46:10,079 --> 00:46:14,160
pulls in more packages you know

00:46:11,839 --> 00:46:15,359
um you know we're building we're for

00:46:14,160 --> 00:46:17,520
example we're building distro-less

00:46:15,359 --> 00:46:19,040
images for rel84 for ubi

00:46:17,520 --> 00:46:20,640
and all that means is we're making them

00:46:19,040 --> 00:46:21,920
smaller and not having a root you know

00:46:20,640 --> 00:46:25,200
not having

00:46:21,920 --> 00:46:26,400
rpm and well not having rpm and yum in

00:46:25,200 --> 00:46:28,160
it basically is all it means

00:46:26,400 --> 00:46:29,680
and so you're still relying on a

00:46:28,160 --> 00:46:31,359
distress somewhere behind the scenes you

00:46:29,680 --> 00:46:32,960
might not understand or see it

00:46:31,359 --> 00:46:34,079
locally in the container image but it

00:46:32,960 --> 00:46:35,760
still exists out there because

00:46:34,079 --> 00:46:36,800
somebody's building cves and rebuilding

00:46:35,760 --> 00:46:38,400
that software and

00:46:36,800 --> 00:46:40,240
tracking all that stuff there's there's

00:46:38,400 --> 00:46:41,359
no such thing as vista list there's only

00:46:40,240 --> 00:46:42,240
somebody else's distributor that you

00:46:41,359 --> 00:46:43,440
borrow and then

00:46:42,240 --> 00:46:45,359
use and that could be somebody else

00:46:43,440 --> 00:46:47,599
compiling it but

00:46:45,359 --> 00:46:49,040
but that is really really very

00:46:47,599 --> 00:46:50,400
independent from whether it's root

00:46:49,040 --> 00:46:51,839
access in the container or

00:46:50,400 --> 00:46:53,680
if you're running dash dash privileged

00:46:51,839 --> 00:46:55,599
you know for example again those are

00:46:53,680 --> 00:46:57,280
those are very very distinct privilege

00:46:55,599 --> 00:46:58,880
you know problems you could have

00:46:57,280 --> 00:47:00,480
a privileged disturbance container that

00:46:58,880 --> 00:47:02,160
hacks you just as easily like

00:47:00,480 --> 00:47:04,000
it's not going to stop somebody from

00:47:02,160 --> 00:47:04,960
curling something into the container

00:47:04,000 --> 00:47:07,359
into memory and then

00:47:04,960 --> 00:47:09,200
executing it like even if you make the

00:47:07,359 --> 00:47:10,160
container read only industrialist that's

00:47:09,200 --> 00:47:12,160
not gonna stop

00:47:10,160 --> 00:47:13,359
or mitigate root access or privileged

00:47:12,160 --> 00:47:16,160
like because they'll just

00:47:13,359 --> 00:47:17,440
copy it into ram and run it and you

00:47:16,160 --> 00:47:18,960
always have access to ram

00:47:17,440 --> 00:47:21,760
so like even if you don't have access to

00:47:18,960 --> 00:47:21,760
disk with read only

00:47:22,559 --> 00:47:25,839
that's my best shot at that

00:47:26,559 --> 00:47:32,880
great um next is isn't pod security

00:47:29,440 --> 00:47:32,880
policies being deprecated

00:47:33,920 --> 00:47:38,400
um so we haven't actually touched the

00:47:36,640 --> 00:47:41,040
pod security policies we talked about

00:47:38,400 --> 00:47:42,079
particularly context uh just as a

00:47:41,040 --> 00:47:44,480
concept for

00:47:42,079 --> 00:47:45,440
to understand like what privilege pods

00:47:44,480 --> 00:47:46,720
uh are

00:47:45,440 --> 00:47:48,640
so for those of you are not familiar

00:47:46,720 --> 00:47:49,680
like pod security policy is a cluster

00:47:48,640 --> 00:47:53,200
level resource

00:47:49,680 --> 00:47:56,400
and controls um so

00:47:53,200 --> 00:47:58,400
um it's not i'm not aware that it's been

00:47:56,400 --> 00:48:01,359
deprecated like it's got anything

00:47:58,400 --> 00:48:02,960
on your side i'm not aware of it either

00:48:01,359 --> 00:48:06,319
on that one i'm a little less

00:48:02,960 --> 00:48:08,240
less up to date yeah

00:48:06,319 --> 00:48:10,160
but again like that the concept of

00:48:08,240 --> 00:48:13,119
privilege pod is not deprecated right

00:48:10,160 --> 00:48:13,440
it's still there yeah uh same thing from

00:48:13,119 --> 00:48:15,359
the

00:48:13,440 --> 00:48:17,680
like the all the the risks that we

00:48:15,359 --> 00:48:19,119
demonstrated

00:48:17,680 --> 00:48:20,720
yeah we've even been talking there was a

00:48:19,119 --> 00:48:21,440
little chat in the kubernetes community

00:48:20,720 --> 00:48:23,119
maybe three

00:48:21,440 --> 00:48:24,000
four weeks ago right right around the

00:48:23,119 --> 00:48:24,880
turn of the year i don't remember

00:48:24,000 --> 00:48:26,079
exactly when but

00:48:24,880 --> 00:48:27,680
i remember there's some there were some

00:48:26,079 --> 00:48:28,720
google guys and some red hat guys i was

00:48:27,680 --> 00:48:29,040
involved in it there was a bunch of

00:48:28,720 --> 00:48:30,160
people

00:48:29,040 --> 00:48:32,079
we were talking about how do we get

00:48:30,160 --> 00:48:32,640
people to run as non-root in the

00:48:32,079 --> 00:48:34,319
container

00:48:32,640 --> 00:48:35,839
like it's really really hard because

00:48:34,319 --> 00:48:36,559
docker had the concept of letting people

00:48:35,839 --> 00:48:38,559
to run

00:48:36,559 --> 00:48:40,079
run anything as root and you know

00:48:38,559 --> 00:48:41,680
internally at google i don't think

00:48:40,079 --> 00:48:43,359
things run as root and borg but in

00:48:41,680 --> 00:48:44,559
kubernetes it's really common for people

00:48:43,359 --> 00:48:46,559
to run as root

00:48:44,559 --> 00:48:48,160
there's there's there's movements if you

00:48:46,559 --> 00:48:50,240
will a foot to try to

00:48:48,160 --> 00:48:52,000
educate the world on how to not do this

00:48:50,240 --> 00:48:53,920
but we're kind of down the rat hole

00:48:52,000 --> 00:48:55,920
because the way the image format

00:48:53,920 --> 00:48:58,160
works we just kind of all adopted roots

00:48:55,920 --> 00:48:59,200
so like that's the best i can

00:48:58,160 --> 00:49:00,800
kind of give you on that there's

00:48:59,200 --> 00:49:02,400
definitely a movement of foot every all

00:49:00,800 --> 00:49:03,760
the smart intelligentsia knows we

00:49:02,400 --> 00:49:06,480
shouldn't be running things as root but

00:49:03,760 --> 00:49:06,480
yet we still are

00:49:06,640 --> 00:49:10,720
all right great we still have about 10

00:49:08,319 --> 00:49:15,280
questions left and about 10 minutes left

00:49:10,720 --> 00:49:17,680
in the um this next question

00:49:15,280 --> 00:49:19,359
has about three questions in it so bear

00:49:17,680 --> 00:49:21,920
with me um

00:49:19,359 --> 00:49:23,839
it's a long one um does shifting

00:49:21,920 --> 00:49:25,680
security responsibility to the left

00:49:23,839 --> 00:49:28,079
potentially have greater implications

00:49:25,680 --> 00:49:29,599
for a supply chain attack how should

00:49:28,079 --> 00:49:31,520
final approval of the

00:49:29,599 --> 00:49:33,200
containerized service product be handled

00:49:31,520 --> 00:49:35,040
to avoid such attacks

00:49:33,200 --> 00:49:37,359
do stakeholders with higher authority

00:49:35,040 --> 00:49:39,280
need to be aware and have understanding

00:49:37,359 --> 00:49:41,599
of potential risk when reviewing final

00:49:39,280 --> 00:49:43,680
configurations

00:49:41,599 --> 00:49:45,040
i feel like somebody like set this

00:49:43,680 --> 00:49:45,520
question up for me or i don't know if

00:49:45,040 --> 00:49:48,000
you

00:49:45,520 --> 00:49:48,880
yeah go ahead all right enjoy it all

00:49:48,000 --> 00:49:50,240
right

00:49:48,880 --> 00:49:52,240
yeah this is one i've talked about for

00:49:50,240 --> 00:49:56,079
many years i've talked about with

00:49:52,240 --> 00:49:58,160
with uh you know all kinds of talks and

00:49:56,079 --> 00:49:59,920
panels and all kinds of crap but um yeah

00:49:58,160 --> 00:50:02,240
in a nutshell yes when you shift

00:49:59,920 --> 00:50:03,359
left obviously when you share this is

00:50:02,240 --> 00:50:05,359
just a basic

00:50:03,359 --> 00:50:06,559
you know engineering thing like more

00:50:05,359 --> 00:50:08,640
moving parts always

00:50:06,559 --> 00:50:11,280
equals higher risk right like if you can

00:50:08,640 --> 00:50:13,359
if you can push 100 pounds with a single

00:50:11,280 --> 00:50:14,640
gear or you need to push 100 pounds with

00:50:13,359 --> 00:50:16,480
22 gears

00:50:14,640 --> 00:50:18,000
it's more likely to fail with 22 gears

00:50:16,480 --> 00:50:20,559
right and so as you

00:50:18,000 --> 00:50:21,440
as you add developers you absolutely

00:50:20,559 --> 00:50:23,280
increase the risk

00:50:21,440 --> 00:50:24,640
to not only the container images and all

00:50:23,280 --> 00:50:26,240
the configuration that are in those

00:50:24,640 --> 00:50:27,839
which yes i i think supply chain

00:50:26,240 --> 00:50:30,000
attacking the image is probably the

00:50:27,839 --> 00:50:31,920
the biggest scare for me and then

00:50:30,000 --> 00:50:33,440
there's also the supply chain attack in

00:50:31,920 --> 00:50:34,240
the configuration files like like or and

00:50:33,440 --> 00:50:36,160
i mentioned like

00:50:34,240 --> 00:50:37,359
if somebody turns on root you know in a

00:50:36,160 --> 00:50:38,960
kubernetes ammo file

00:50:37,359 --> 00:50:40,559
that thing gets committed to github and

00:50:38,960 --> 00:50:41,200
everything everybody starts forking and

00:50:40,559 --> 00:50:42,559
using it and

00:50:41,200 --> 00:50:44,319
next thing you know you have root you

00:50:42,559 --> 00:50:45,920
know privileged equal true or

00:50:44,319 --> 00:50:47,680
you know like like that's that's a

00:50:45,920 --> 00:50:49,359
problem um

00:50:47,680 --> 00:50:51,200
i would say it starts with providence

00:50:49,359 --> 00:50:53,520
first start with trust right like

00:50:51,200 --> 00:50:54,640
maybe always go back to a golden

00:50:53,520 --> 00:50:56,559
template for the

00:50:54,640 --> 00:50:58,000
kubernetes ammo file that is approved by

00:50:56,559 --> 00:50:59,520
security and say everybody should

00:50:58,000 --> 00:51:00,559
develop off of this

00:50:59,520 --> 00:51:02,240
and anytime you change one of these

00:51:00,559 --> 00:51:04,000
default configurations we should know

00:51:02,240 --> 00:51:05,599
why you did that you know like like

00:51:04,000 --> 00:51:06,960
when you committed and get somebody

00:51:05,599 --> 00:51:07,520
needs to explain why they did that you

00:51:06,960 --> 00:51:08,880
know like

00:51:07,520 --> 00:51:11,920
that's a good way to do it it's like

00:51:08,880 --> 00:51:13,920
trust but verify right like and then

00:51:11,920 --> 00:51:15,359
and then you could scan it later with

00:51:13,920 --> 00:51:16,800
some lint or something that maybe has

00:51:15,359 --> 00:51:17,440
all the rules in it to see who's changed

00:51:16,800 --> 00:51:19,599
or whatnot

00:51:17,440 --> 00:51:20,640
but but i think people rely too much on

00:51:19,599 --> 00:51:22,559
the scanning thing they're like

00:51:20,640 --> 00:51:24,240
we just scan it'll be fine you can never

00:51:22,559 --> 00:51:24,720
scan your way out of bad security like

00:51:24,240 --> 00:51:26,400
like

00:51:24,720 --> 00:51:28,240
the the known things that you'll have in

00:51:26,400 --> 00:51:29,680
your tests is always less than the

00:51:28,240 --> 00:51:31,200
the reality of the universe and there'll

00:51:29,680 --> 00:51:32,960
always be things you didn't catch and

00:51:31,200 --> 00:51:34,880
they'll always be out of sync so like

00:51:32,960 --> 00:51:36,400
so like it's like cicd testing like it

00:51:34,880 --> 00:51:38,160
gives you a bit of a warm and fuzzy but

00:51:36,400 --> 00:51:39,920
we all know just because it passes

00:51:38,160 --> 00:51:41,599
ci cd doesn't mean it's secure doesn't

00:51:39,920 --> 00:51:43,280
mean it performs right doesn't mean that

00:51:41,599 --> 00:51:44,640
it's you know like actually even doing

00:51:43,280 --> 00:51:45,920
the right thing it's supposed to do

00:51:44,640 --> 00:51:47,760
it just means that it passes all the

00:51:45,920 --> 00:51:49,280
things that we tested for like and so it

00:51:47,760 --> 00:51:51,359
gives you a level of confidence but it's

00:51:49,280 --> 00:51:53,119
not the you got to start with a secure

00:51:51,359 --> 00:51:54,640
base image a secure configuration

00:51:53,119 --> 00:51:56,800
and then work forward from there and

00:51:54,640 --> 00:51:57,599
then scan to maybe verify that you

00:51:56,800 --> 00:51:59,599
didn't

00:51:57,599 --> 00:52:01,119
drift too far from those things that's

00:51:59,599 --> 00:52:04,640
my rant on that sorry

00:52:01,119 --> 00:52:06,480
yeah so my my answer is much

00:52:04,640 --> 00:52:08,160
much shorter like i i'll answer only to

00:52:06,480 --> 00:52:08,480
the last one so yeah definitely i think

00:52:08,160 --> 00:52:10,400
that

00:52:08,480 --> 00:52:11,839
you know stakeholder must understand

00:52:10,400 --> 00:52:14,079
what's going on

00:52:11,839 --> 00:52:15,440
uh you can just introduce new changes to

00:52:14,079 --> 00:52:16,800
your environment without understanding

00:52:15,440 --> 00:52:19,119
what's going on

00:52:16,800 --> 00:52:20,400
uh yeah the cases that scott just

00:52:19,119 --> 00:52:22,960
mentioned like just

00:52:20,400 --> 00:52:25,040
downloading configuration file who knows

00:52:22,960 --> 00:52:27,440
who what someone put there

00:52:25,040 --> 00:52:28,559
uh just think about a simple

00:52:27,440 --> 00:52:31,200
installation of uh

00:52:28,559 --> 00:52:32,640
um template so do you really understand

00:52:31,200 --> 00:52:35,040
what's going on do you really read

00:52:32,640 --> 00:52:36,240
each and every line out of it uh so the

00:52:35,040 --> 00:52:38,480
answer should be

00:52:36,240 --> 00:52:39,280
you need to be aware of that of it for

00:52:38,480 --> 00:52:43,040
sure

00:52:39,280 --> 00:52:44,880
uh and yeah try to use more tools uh

00:52:43,040 --> 00:52:46,559
to to to help you as part of this

00:52:44,880 --> 00:52:49,200
process but uh yeah the answer is

00:52:46,559 --> 00:52:49,200
definitely yes

00:52:50,160 --> 00:52:55,839
okay great um is it enough if we only

00:52:54,400 --> 00:53:01,839
set up the privilege

00:52:55,839 --> 00:53:01,839
pods to false for pod security

00:53:02,079 --> 00:53:04,319
um

00:53:05,440 --> 00:53:10,800
so so again it that for privileged spot

00:53:09,200 --> 00:53:11,520
it depends on the scenario if you don't

00:53:10,800 --> 00:53:15,040
need it yet

00:53:11,520 --> 00:53:16,880
it's enough um but

00:53:15,040 --> 00:53:19,119
in cases where we actually need the

00:53:16,880 --> 00:53:21,680
privileged pod i guess you will need to

00:53:19,119 --> 00:53:22,640
think about other workarounds to make

00:53:21,680 --> 00:53:24,800
sure that

00:53:22,640 --> 00:53:26,240
nothing else is accessible in this in

00:53:24,800 --> 00:53:30,240
this cluster

00:53:26,240 --> 00:53:32,559
uh but yeah there is a risk that in that

00:53:30,240 --> 00:53:33,359
yeah i might i might add like removing

00:53:32,559 --> 00:53:35,119
privilege is

00:53:33,359 --> 00:53:36,720
a good first step the next thing i would

00:53:35,119 --> 00:53:38,800
do is not run as root

00:53:36,720 --> 00:53:39,839
like like run it as a regular user like

00:53:38,800 --> 00:53:41,599
if you're gonna run a web server and

00:53:39,839 --> 00:53:42,000
make sure it runs as the http user or

00:53:41,599 --> 00:53:44,240
whatever

00:53:42,000 --> 00:53:45,119
like make sure those things drop privs

00:53:44,240 --> 00:53:47,119
and don't need

00:53:45,119 --> 00:53:49,040
you know also look at the capabilities

00:53:47,119 --> 00:53:50,319
you know if you like the one example or

00:53:49,040 --> 00:53:50,800
you give which is really good drop all

00:53:50,319 --> 00:53:52,960
privs

00:53:50,800 --> 00:53:55,200
drop all capabilities and then turn on

00:53:52,960 --> 00:53:56,800
just a few until your app works like

00:53:55,200 --> 00:53:58,319
start with nothing and then work your

00:53:56,800 --> 00:54:00,079
way backwards i think i think

00:53:58,319 --> 00:54:01,440
capabilities is a good place to like set

00:54:00,079 --> 00:54:04,319
conf is a good place

00:54:01,440 --> 00:54:04,800
i think se linux and the s for the way

00:54:04,319 --> 00:54:06,319
like

00:54:04,800 --> 00:54:08,240
openshift does it is we automatically

00:54:06,319 --> 00:54:10,640
dynamically generate an expert

00:54:08,240 --> 00:54:11,920
a label for seo linux and then all the

00:54:10,640 --> 00:54:13,920
different containers can't talk to each

00:54:11,920 --> 00:54:16,400
other see each other just by default

00:54:13,920 --> 00:54:17,280
um and i think not privileged you know

00:54:16,400 --> 00:54:19,359
you definitely don't

00:54:17,280 --> 00:54:20,800
and then not run is not root like those

00:54:19,359 --> 00:54:21,680
are probably the ones that i'd off top

00:54:20,800 --> 00:54:24,000
my head

00:54:21,680 --> 00:54:25,839
all think about yeah but by the way i

00:54:24,000 --> 00:54:26,480
think it's a really nice exercise just

00:54:25,839 --> 00:54:28,000
to

00:54:26,480 --> 00:54:30,559
to make sure that you understand what's

00:54:28,000 --> 00:54:32,880
going on inside of your application so

00:54:30,559 --> 00:54:34,480
next time you you want just to drop all

00:54:32,880 --> 00:54:35,440
of the capabilities and just to

00:54:34,480 --> 00:54:37,839
understand

00:54:35,440 --> 00:54:39,839
gradually what's going on okay we need

00:54:37,839 --> 00:54:41,280
like network access we need

00:54:39,839 --> 00:54:43,200
some access to the disk or something

00:54:41,280 --> 00:54:45,200
like that but it's it's really useful

00:54:43,200 --> 00:54:49,680
just to understand what's going on

00:54:45,200 --> 00:54:49,680
uh so it's a it's a huge recommendation

00:54:49,839 --> 00:54:54,480
all right we have just about four more

00:54:51,920 --> 00:54:57,040
questions and just a few minutes left so

00:54:54,480 --> 00:54:58,240
let's see does a sneak container

00:54:57,040 --> 00:55:00,000
gathered

00:54:58,240 --> 00:55:02,319
scan gather data from the images it

00:55:00,000 --> 00:55:03,760
scans

00:55:02,319 --> 00:55:05,440
so we haven't talked about sneak

00:55:03,760 --> 00:55:06,720
containers scan

00:55:05,440 --> 00:55:10,400
we just talked about the snake

00:55:06,720 --> 00:55:10,400
infrastructure scott scan

00:55:10,559 --> 00:55:14,079
so for the scenic containers can just

00:55:13,040 --> 00:55:17,040
understand what

00:55:14,079 --> 00:55:18,480
dependencies are part of your docker

00:55:17,040 --> 00:55:21,920
image

00:55:18,480 --> 00:55:24,799
and we check what uh security issues are

00:55:21,920 --> 00:55:25,440
part of those part of this list and

00:55:24,799 --> 00:55:27,200
that's it

00:55:25,440 --> 00:55:30,880
we don't gather any information like

00:55:27,200 --> 00:55:30,880
content files stuff like that

00:55:31,520 --> 00:55:37,760
right which linux wmde was used in the

00:55:35,280 --> 00:55:37,760
demos

00:55:38,319 --> 00:55:46,720
uh i3 okay

00:55:41,920 --> 00:55:46,720
how to how to validate kubernetes why

00:55:46,839 --> 00:55:51,920
amla

00:55:49,200 --> 00:55:53,520
oh that's a tough one to answer because

00:55:51,920 --> 00:55:54,960
like you have to have some expertise and

00:55:53,520 --> 00:55:57,200
know what you're looking at but like

00:55:54,960 --> 00:55:58,880
orb made some good examples but i'm not

00:55:57,200 --> 00:55:59,520
aware of any tools that simplify it or

00:55:58,880 --> 00:56:01,920
kind of do it

00:55:59,520 --> 00:56:05,520
for you off top of my head i'm not aware

00:56:01,920 --> 00:56:05,520
of anything but i'm sure stuff exists

00:56:07,359 --> 00:56:11,119
all right and last question um setting a

00:56:09,760 --> 00:56:12,880
memory limited model

00:56:11,119 --> 00:56:14,160
the application to scale out with

00:56:12,880 --> 00:56:16,400
multiple replicas

00:56:14,160 --> 00:56:18,720
instead of using more memory per pod is

00:56:16,400 --> 00:56:20,400
that a proper approach

00:56:18,720 --> 00:56:21,839
yeah that's what i was hinting at when i

00:56:20,400 --> 00:56:23,359
said you got to do a bouncing act

00:56:21,839 --> 00:56:25,680
between scaling out so like

00:56:23,359 --> 00:56:26,640
if you know it the load on a particular

00:56:25,680 --> 00:56:29,200
i'll just go one

00:56:26,640 --> 00:56:30,480
deeper or if you don't mind like if you

00:56:29,200 --> 00:56:33,200
know what load generates

00:56:30,480 --> 00:56:34,640
100 megabytes of you know memory usage

00:56:33,200 --> 00:56:37,119
you can then kind of scale out

00:56:34,640 --> 00:56:39,040
horizontally and only load up each

00:56:37,119 --> 00:56:40,079
web server each database or whatever

00:56:39,040 --> 00:56:40,559
that they use up a certain amount of

00:56:40,079 --> 00:56:42,400
memory

00:56:40,559 --> 00:56:44,160
that's part of the art of all of this i

00:56:42,400 --> 00:56:45,599
do this in one of the labs i i

00:56:44,160 --> 00:56:46,799
run where i show you can scale something

00:56:45,599 --> 00:56:47,359
out it actually doesn't perform any

00:56:46,799 --> 00:56:49,040
better

00:56:47,359 --> 00:56:51,200
um it actually performs worse sometimes

00:56:49,040 --> 00:56:52,319
when you scale out there is a pid loop

00:56:51,200 --> 00:56:53,359
there where you go too far and it

00:56:52,319 --> 00:56:54,559
doesn't perform well and you

00:56:53,359 --> 00:56:56,640
scale it in it actually performs a

00:56:54,559 --> 00:56:58,559
little bit better and it's an art

00:56:56,640 --> 00:57:00,559
it's something that you get load testing

00:56:58,559 --> 00:57:02,000
and is always an art you got to always

00:57:00,559 --> 00:57:02,640
load test things and then see how it

00:57:02,000 --> 00:57:05,040
works

00:57:02,640 --> 00:57:06,400
yeah but by the way we didn't cover that

00:57:05,040 --> 00:57:08,240
at all it's part of this uh

00:57:06,400 --> 00:57:09,760
this uh lecture like we just talked

00:57:08,240 --> 00:57:13,119
about the security risk that

00:57:09,760 --> 00:57:14,960
might be part of it so it's definitely a

00:57:13,119 --> 00:57:16,400
an expertise that someone need to learn

00:57:14,960 --> 00:57:19,599
for sure

00:57:16,400 --> 00:57:22,799
um i think this one is

00:57:19,599 --> 00:57:25,799
an answer to the previous question right

00:57:22,799 --> 00:57:28,799
yes yeah they're just showing um

00:57:25,799 --> 00:57:28,799
hubyamal.com

00:57:28,960 --> 00:57:34,880
perfect um all right well i think that's

00:57:32,240 --> 00:57:36,559
it i just want to thank lauren scott so

00:57:34,880 --> 00:57:39,119
much for their time today and thank you

00:57:36,559 --> 00:57:41,680
to all the participants who joined us

00:57:39,119 --> 00:57:43,760
as a reminder this recording will be on

00:57:41,680 --> 00:57:44,640
the linux foundation youtube page later

00:57:43,760 --> 00:57:46,160
today

00:57:44,640 --> 00:57:47,839
we hope you are able to join us for

00:57:46,160 --> 00:57:50,240
future webinars have a wonderful day

00:57:47,839 --> 00:57:50,240
everyone

00:57:51,520 --> 00:57:54,880

YouTube URL: https://www.youtube.com/watch?v=RY6AzcmSP1Y


