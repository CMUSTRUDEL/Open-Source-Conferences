Title: Webinar: Architectures For Deep Edge Deployments
Publication date: 2021-02-04
Playlist: LF Live Webinars
Description: 
	Webinar: Architectures For Deep Edge Deployments
Captions: 
	00:00:00,000 --> 00:00:04,720
thank you very much so first a little

00:00:02,320 --> 00:00:07,440
bit of an introduction of who we are

00:00:04,720 --> 00:00:07,759
my name is jonas arndt i work for hpe

00:00:07,440 --> 00:00:10,639
and

00:00:07,759 --> 00:00:11,759
i'm an architect over there but i'm also

00:00:10,639 --> 00:00:14,160
part of a

00:00:11,759 --> 00:00:16,320
an open source project odim open

00:00:14,160 --> 00:00:19,039
distributed infrastructure management

00:00:16,320 --> 00:00:20,640
that hpe is part of as well and a few

00:00:19,039 --> 00:00:23,600
other

00:00:20,640 --> 00:00:26,400
companies and and participants and there

00:00:23,600 --> 00:00:28,800
i'm on the technical steering committee

00:00:26,400 --> 00:00:30,000
martin do you want to say a few words

00:00:28,800 --> 00:00:32,079
yeah sure hi everybody

00:00:30,000 --> 00:00:34,719
uh so i'm martin halstead i'm part of

00:00:32,079 --> 00:00:38,000
the same organization as uh jonas

00:00:34,719 --> 00:00:39,520
uh within hp focuses on infrastructure

00:00:38,000 --> 00:00:42,879
into telco

00:00:39,520 --> 00:00:46,719
um and once uh dennis has

00:00:42,879 --> 00:00:50,000
gone through what odom is then i'll

00:00:46,719 --> 00:00:52,079
talk a bit about how we plan to deploy

00:00:50,000 --> 00:00:53,360
and make use of that type of

00:00:52,079 --> 00:00:57,600
architecture in

00:00:53,360 --> 00:01:01,840
as it relates to you know deep edge vran

00:00:57,600 --> 00:01:01,840
implementations within telco networks

00:01:02,239 --> 00:01:07,119
okay and just to give you

00:01:05,280 --> 00:01:09,200
to go easy on your eyes we're going to

00:01:07,119 --> 00:01:12,000
stop the video here and and

00:01:09,200 --> 00:01:14,880
have you focus on the slides instead so

00:01:12,000 --> 00:01:14,880
let's do that

00:01:15,119 --> 00:01:19,360
so part of this presentation is going to

00:01:18,000 --> 00:01:20,640
be the odin project

00:01:19,360 --> 00:01:22,880
and i'm going to go through that a

00:01:20,640 --> 00:01:24,080
little bit before we dive dive into what

00:01:22,880 --> 00:01:26,960
martin said

00:01:24,080 --> 00:01:29,920
how to use this and and other things in

00:01:26,960 --> 00:01:31,920
in different type of deployments then

00:01:29,920 --> 00:01:34,479
uh some of you have probably heard about

00:01:31,920 --> 00:01:36,640
odin but i'm still gonna basically

00:01:34,479 --> 00:01:38,320
introduce it a little bit uh to start

00:01:36,640 --> 00:01:41,680
with and there is a certain

00:01:38,320 --> 00:01:44,560
amount of uh challenges in today's

00:01:41,680 --> 00:01:45,920
network uh deployment for 5g and

00:01:44,560 --> 00:01:48,000
specifically with

00:01:45,920 --> 00:01:50,880
we have focused this presentation on

00:01:48,000 --> 00:01:53,280
telcos but odem is applicable in other

00:01:50,880 --> 00:01:54,399
part of the industry as well but for

00:01:53,280 --> 00:01:58,399
telcos we can see

00:01:54,399 --> 00:02:00,880
with 5g use cases there is a lot of push

00:01:58,399 --> 00:02:02,079
to the edge there's a lot of new mini

00:02:00,880 --> 00:02:04,320
data centers so

00:02:02,079 --> 00:02:05,439
you have this distributed type of

00:02:04,320 --> 00:02:07,840
architecture

00:02:05,439 --> 00:02:09,759
that you need to manage and you need to

00:02:07,840 --> 00:02:11,760
manage all the resources in in those

00:02:09,759 --> 00:02:14,710
different locations

00:02:11,760 --> 00:02:17,120
you also have a different type of

00:02:14,710 --> 00:02:20,080
[Music]

00:02:17,120 --> 00:02:21,040
equipment in in a data center than you

00:02:20,080 --> 00:02:23,360
have at the edge

00:02:21,040 --> 00:02:24,720
so you have this type of heterogeneous

00:02:23,360 --> 00:02:26,640
platforms

00:02:24,720 --> 00:02:29,120
so at the edge you might have different

00:02:26,640 --> 00:02:33,000
uh constraints like size

00:02:29,120 --> 00:02:36,560
temperature and and other

00:02:33,000 --> 00:02:39,519
specifications like nebs talking about

00:02:36,560 --> 00:02:41,680
seismic activity as well and and then

00:02:39,519 --> 00:02:44,160
you add to this that you have different

00:02:41,680 --> 00:02:45,120
vendors as well so obviously now if you

00:02:44,160 --> 00:02:47,120
are a

00:02:45,120 --> 00:02:49,200
telco or something and you're going to

00:02:47,120 --> 00:02:50,000
deploy all your data centers from

00:02:49,200 --> 00:02:51,920
different vendors

00:02:50,000 --> 00:02:53,680
different type of equipment so how do

00:02:51,920 --> 00:02:55,040
you talk to all this equipment how do

00:02:53,680 --> 00:02:57,360
you manage it

00:02:55,040 --> 00:02:59,519
and the equipment as you can see here as

00:02:57,360 --> 00:03:00,640
well has different type of management

00:02:59,519 --> 00:03:04,159
apis

00:03:00,640 --> 00:03:07,599
some of them conforms to standard like

00:03:04,159 --> 00:03:07,920
redfish some of them do not and even if

00:03:07,599 --> 00:03:10,080
you

00:03:07,920 --> 00:03:12,000
conform to a standard there are

00:03:10,080 --> 00:03:14,560
different implementations from different

00:03:12,000 --> 00:03:17,360
vendors to conform to this standard

00:03:14,560 --> 00:03:18,239
and so talking to vendor a's redfish

00:03:17,360 --> 00:03:20,400
implementation

00:03:18,239 --> 00:03:22,640
is not exactly the same as talking to

00:03:20,400 --> 00:03:26,080
vendor b and it's not because

00:03:22,640 --> 00:03:26,480
vendor a or b are in any way shape or

00:03:26,080 --> 00:03:30,080
form

00:03:26,480 --> 00:03:32,080
in violation of the specification

00:03:30,080 --> 00:03:34,080
it's the fact that they have chosen to

00:03:32,080 --> 00:03:36,159
implement some properties that the other

00:03:34,080 --> 00:03:36,959
vendor didn't implement or vice versa

00:03:36,159 --> 00:03:39,280
right

00:03:36,959 --> 00:03:40,400
so you need to you have these channels

00:03:39,280 --> 00:03:42,400
as well and then

00:03:40,400 --> 00:03:44,560
a lot of vendors have a management

00:03:42,400 --> 00:03:46,720
solution that is a closed solution that

00:03:44,560 --> 00:03:49,599
they have on top and and

00:03:46,720 --> 00:03:51,040
if you if you think about the situation

00:03:49,599 --> 00:03:54,080
then that

00:03:51,040 --> 00:03:56,319
an operator will face is basically this

00:03:54,080 --> 00:03:57,840
challenge here where you have a lot of

00:03:56,319 --> 00:04:00,239
things that want to use this

00:03:57,840 --> 00:04:00,959
and you have different vendor solutions

00:04:00,239 --> 00:04:03,120
and and

00:04:00,959 --> 00:04:04,640
at the bottom you can only manage your

00:04:03,120 --> 00:04:07,599
own

00:04:04,640 --> 00:04:08,959
your own specific resources from that

00:04:07,599 --> 00:04:10,959
vendor perhaps

00:04:08,959 --> 00:04:13,120
but an operator will need to manage it

00:04:10,959 --> 00:04:15,760
all so you get this

00:04:13,120 --> 00:04:17,600
very complicated management solution

00:04:15,760 --> 00:04:19,680
that you need to put in place

00:04:17,600 --> 00:04:21,280
so this is what we're trying to address

00:04:19,680 --> 00:04:25,600
with odam

00:04:21,280 --> 00:04:28,000
basically so if you look at odin them

00:04:25,600 --> 00:04:29,040
just to introduce what what it actually

00:04:28,000 --> 00:04:32,080
does

00:04:29,040 --> 00:04:34,880
on a high level we have three things

00:04:32,080 --> 00:04:36,240
it's doing abstraction and translation

00:04:34,880 --> 00:04:39,520
meaning that

00:04:36,240 --> 00:04:42,000
these different type of neons

00:04:39,520 --> 00:04:43,440
of redfish or different management

00:04:42,000 --> 00:04:45,520
protocol altogether

00:04:43,440 --> 00:04:46,560
can be abstracted away from northbank

00:04:45,520 --> 00:04:48,560
clients

00:04:46,560 --> 00:04:49,840
so the northbound client will basically

00:04:48,560 --> 00:04:52,880
know exactly

00:04:49,840 --> 00:04:56,000
what redfish version and what properties

00:04:52,880 --> 00:04:57,199
in different objects to expect and

00:04:56,000 --> 00:04:59,280
that's part of

00:04:57,199 --> 00:05:01,520
what odem is doing this abstraction and

00:04:59,280 --> 00:05:03,440
it does that with an abstraction layer

00:05:01,520 --> 00:05:05,120
and with different adapters so we call

00:05:03,440 --> 00:05:06,960
them plugins

00:05:05,120 --> 00:05:08,960
so so that's one of the things the other

00:05:06,960 --> 00:05:12,160
thing it does is aggregation and what

00:05:08,960 --> 00:05:13,919
does that mean well on a redfish level

00:05:12,160 --> 00:05:16,560
it it basically mean

00:05:13,919 --> 00:05:18,400
that we have an aggregation service we

00:05:16,560 --> 00:05:21,199
we did put that in place

00:05:18,400 --> 00:05:22,479
in the mtf when we started the work on

00:05:21,199 --> 00:05:25,199
odem so that is a

00:05:22,479 --> 00:05:26,960
fairly new type of service and that will

00:05:25,199 --> 00:05:30,160
allow us to add and remove

00:05:26,960 --> 00:05:30,720
resources that an aggregator would

00:05:30,160 --> 00:05:33,280
manage

00:05:30,720 --> 00:05:35,440
basically new servers new switches new

00:05:33,280 --> 00:05:37,199
storage and these type of things

00:05:35,440 --> 00:05:39,199
but it also means that a client doesn't

00:05:37,199 --> 00:05:40,000
need to know about the equipment in the

00:05:39,199 --> 00:05:42,240
data center

00:05:40,000 --> 00:05:43,759
you can simply ask odam it just

00:05:42,240 --> 00:05:45,840
authenticates it

00:05:43,759 --> 00:05:47,680
itself without him and then it doesn't

00:05:45,840 --> 00:05:50,400
need to know ip addresses of the

00:05:47,680 --> 00:05:53,360
resources or any of the credentials

00:05:50,400 --> 00:05:55,520
odin will just list all the available

00:05:53,360 --> 00:05:57,280
resources for the client

00:05:55,520 --> 00:05:59,440
the other thing is that it will allow a

00:05:57,280 --> 00:06:02,560
client to do bulk operations

00:05:59,440 --> 00:06:05,120
let's go reset an entire rack or let's

00:06:02,560 --> 00:06:07,440
let's upgrade an entire aisle in a data

00:06:05,120 --> 00:06:09,120
center to a new firmware level

00:06:07,440 --> 00:06:10,800
these type of operations is also

00:06:09,120 --> 00:06:13,919
aggregation

00:06:10,800 --> 00:06:16,240
finally there is proxy so odem

00:06:13,919 --> 00:06:17,759
can be multi-home and and the client

00:06:16,240 --> 00:06:18,560
therefore doesn't need to be on the

00:06:17,759 --> 00:06:21,919
actual

00:06:18,560 --> 00:06:23,600
management network uh it doesn't have to

00:06:21,919 --> 00:06:24,800
have connectivity to the management

00:06:23,600 --> 00:06:27,440
network so

00:06:24,800 --> 00:06:28,240
that will allow for more centralized

00:06:27,440 --> 00:06:30,720
functions like

00:06:28,240 --> 00:06:31,600
composition monitoring and these type of

00:06:30,720 --> 00:06:33,680
things can

00:06:31,600 --> 00:06:34,639
can live northbound in a more

00:06:33,680 --> 00:06:37,199
centralized

00:06:34,639 --> 00:06:37,199
location

00:06:37,919 --> 00:06:43,199
uh so just taking a step back then and

00:06:40,639 --> 00:06:45,120
looking from a high level what oem does

00:06:43,199 --> 00:06:46,319
it sort of simplifies the picture you

00:06:45,120 --> 00:06:50,720
saw before

00:06:46,319 --> 00:06:52,960
to a more simple way of managing things

00:06:50,720 --> 00:06:54,319
if you start on the southbound side you

00:06:52,960 --> 00:06:55,360
have all these these different

00:06:54,319 --> 00:06:58,880
management

00:06:55,360 --> 00:07:02,160
apis and and you have this plugins or

00:06:58,880 --> 00:07:02,560
or adapters that can do translation from

00:07:02,160 --> 00:07:06,080
them

00:07:02,560 --> 00:07:07,919
into the odin model and oda model

00:07:06,080 --> 00:07:09,520
there is no special model it's actually

00:07:07,919 --> 00:07:11,680
dmtf redfish

00:07:09,520 --> 00:07:14,880
and on the northbound side we have the

00:07:11,680 --> 00:07:17,120
mtf redfish apis exposed so all the

00:07:14,880 --> 00:07:19,360
services running there are red fish

00:07:17,120 --> 00:07:22,400
services can be communicated with

00:07:19,360 --> 00:07:25,680
by using a redfish apis

00:07:22,400 --> 00:07:27,919
so that's basically the vision of odem

00:07:25,680 --> 00:07:30,800
and if we dive in then to the

00:07:27,919 --> 00:07:32,720
actual architecture and you see

00:07:30,800 --> 00:07:33,360
everything inside a dotted line here is

00:07:32,720 --> 00:07:35,440
odin

00:07:33,360 --> 00:07:38,000
you can see that the services lay in the

00:07:35,440 --> 00:07:40,080
middle is standing up different services

00:07:38,000 --> 00:07:42,720
account service event service

00:07:40,080 --> 00:07:43,680
aggregation service and so on and hosts

00:07:42,720 --> 00:07:45,759
also the model

00:07:43,680 --> 00:07:47,520
on the northbound side you have this api

00:07:45,759 --> 00:07:49,759
layer that i talked about

00:07:47,520 --> 00:07:52,160
and then on the southbound side you have

00:07:49,759 --> 00:07:54,479
different type of adapters

00:07:52,160 --> 00:07:56,400
and i will i will go through some of

00:07:54,479 --> 00:07:57,680
those adapters that are available in our

00:07:56,400 --> 00:08:00,080
first release

00:07:57,680 --> 00:08:02,479
they're also one thing to remember is

00:08:00,080 --> 00:08:04,479
that they're open source adapters

00:08:02,479 --> 00:08:06,080
there are commercial adapters as well

00:08:04,479 --> 00:08:09,599
from different vendors

00:08:06,080 --> 00:08:13,120
and uh the whole oden project is

00:08:09,599 --> 00:08:16,560
licensed apache 2.0 to enable

00:08:13,120 --> 00:08:19,759
commercial use and and commercial

00:08:16,560 --> 00:08:22,000
different use cases so if you look at

00:08:19,759 --> 00:08:22,720
the community then we started fairly

00:08:22,000 --> 00:08:26,240
recently

00:08:22,720 --> 00:08:29,120
it was actually in july where we formed

00:08:26,240 --> 00:08:30,720
the project just as an unfunded linux

00:08:29,120 --> 00:08:33,519
foundation project

00:08:30,720 --> 00:08:34,800
not part of any umbrella community but

00:08:33,519 --> 00:08:36,479
now we have

00:08:34,800 --> 00:08:38,159
operated a few months and we want to

00:08:36,479 --> 00:08:40,399
move into lfn

00:08:38,159 --> 00:08:41,839
so we had we have some plans to do that

00:08:40,399 --> 00:08:43,279
and hopefully we can get in there in

00:08:41,839 --> 00:08:45,839
march

00:08:43,279 --> 00:08:47,200
um there was this lfn development

00:08:45,839 --> 00:08:49,600
testing forum this week

00:08:47,200 --> 00:08:51,360
and we were we had a track there so i

00:08:49,600 --> 00:08:52,240
think there was uh even today there was

00:08:51,360 --> 00:08:53,920
a

00:08:52,240 --> 00:08:56,880
presentation there that you might have

00:08:53,920 --> 00:08:58,560
seen we run different meetings it's a

00:08:56,880 --> 00:09:00,880
technical steering commit committee

00:08:58,560 --> 00:09:03,040
meeting every wednesday and there is a

00:09:00,880 --> 00:09:04,160
more architectural meeting proposal

00:09:03,040 --> 00:09:08,080
meeting we call that

00:09:04,160 --> 00:09:11,360
on tuesdays and that's where we discuss

00:09:08,080 --> 00:09:12,480
bigger contributions into odem and these

00:09:11,360 --> 00:09:15,279
type of things

00:09:12,480 --> 00:09:18,399
and there is obviously some wiki pages

00:09:15,279 --> 00:09:20,240
and github pages that you can see here

00:09:18,399 --> 00:09:22,000
apart from that we had our first release

00:09:20,240 --> 00:09:24,080
that i'm going to dive into a little bit

00:09:22,000 --> 00:09:25,920
that came out on monday this week

00:09:24,080 --> 00:09:29,839
actually

00:09:25,920 --> 00:09:33,200
because january 31st was on a sunday

00:09:29,839 --> 00:09:36,640
right so how how is the current

00:09:33,200 --> 00:09:39,440
contributions looking so hp did a lot of

00:09:36,640 --> 00:09:39,839
seed contribution initially but we also

00:09:39,440 --> 00:09:42,160
have

00:09:39,839 --> 00:09:44,000
seen a lot of contributions from intel

00:09:42,160 --> 00:09:46,959
there have been some

00:09:44,000 --> 00:09:48,720
plugins and there an unmanaged rack

00:09:46,959 --> 00:09:49,519
plug-in that i will get into what that

00:09:48,720 --> 00:09:52,080
is doing

00:09:49,519 --> 00:09:54,399
there have been some they're working on

00:09:52,080 --> 00:09:57,360
a management

00:09:54,399 --> 00:09:59,440
bmc type of emulator we also see

00:09:57,360 --> 00:10:00,080
contribution from ami coming in here

00:09:59,440 --> 00:10:02,880
soon

00:10:00,080 --> 00:10:04,560
a composition service there is still

00:10:02,880 --> 00:10:07,279
some discussions going on

00:10:04,560 --> 00:10:08,320
in the mtf about that compensation

00:10:07,279 --> 00:10:09,920
service so

00:10:08,320 --> 00:10:11,519
we don't know exactly when it's going to

00:10:09,920 --> 00:10:13,040
land but we hope it's going to be there

00:10:11,519 --> 00:10:14,720
before

00:10:13,040 --> 00:10:18,959
the next release so it can be part of

00:10:14,720 --> 00:10:21,200
the august release

00:10:18,959 --> 00:10:22,560
right so just going through the releases

00:10:21,200 --> 00:10:26,320
then here we have

00:10:22,560 --> 00:10:29,279
just released 2101 which is

00:10:26,320 --> 00:10:30,800
named after the year and the month and i

00:10:29,279 --> 00:10:33,680
will dive into a little bit

00:10:30,800 --> 00:10:34,640
our release process uh later on but in

00:10:33,680 --> 00:10:37,600
that release

00:10:34,640 --> 00:10:38,640
uh just on a high level when you ins

00:10:37,600 --> 00:10:40,640
when you

00:10:38,640 --> 00:10:42,000
clone and you build odom you're going to

00:10:40,640 --> 00:10:44,640
see that it builds

00:10:42,000 --> 00:10:45,839
in containers and it it produces a bunch

00:10:44,640 --> 00:10:47,760
of containers where

00:10:45,839 --> 00:10:48,880
it's running and they're all docker

00:10:47,760 --> 00:10:51,279
based

00:10:48,880 --> 00:10:52,160
we have started transitioning over to

00:10:51,279 --> 00:10:54,399
kubernetes

00:10:52,160 --> 00:10:56,160
but we have we didn't make it in time

00:10:54,399 --> 00:10:56,720
for this release so the next release

00:10:56,160 --> 00:10:58,640
will

00:10:56,720 --> 00:11:01,440
we'll see kubernetes based release

00:10:58,640 --> 00:11:03,920
instead or build process

00:11:01,440 --> 00:11:06,720
as far as plug-in support goes we have

00:11:03,920 --> 00:11:09,040
two different plugins

00:11:06,720 --> 00:11:11,600
there is a generic redfish plugin that

00:11:09,040 --> 00:11:13,920
can be used for different

00:11:11,600 --> 00:11:15,760
resources that speak redfish and i will

00:11:13,920 --> 00:11:17,839
dive into that a little bit later

00:11:15,760 --> 00:11:19,440
and there is the unmanaged rack plug-in

00:11:17,839 --> 00:11:22,000
that i i

00:11:19,440 --> 00:11:22,800
talked about earlier intel contributing

00:11:22,000 --> 00:11:25,120
we also have

00:11:22,800 --> 00:11:27,279
a lot of redfish apis for from the

00:11:25,120 --> 00:11:28,880
different redfish services there that we

00:11:27,279 --> 00:11:31,279
go we'll go through

00:11:28,880 --> 00:11:33,360
and out from the get-go in the first

00:11:31,279 --> 00:11:36,640
release you can do some action then on

00:11:33,360 --> 00:11:39,279
on our bulk operations on collection of

00:11:36,640 --> 00:11:39,279
resources

00:11:39,519 --> 00:11:45,120
and the services that are there in 2101

00:11:42,560 --> 00:11:47,120
are these services and just a little bit

00:11:45,120 --> 00:11:48,560
briefly on what each service does the

00:11:47,120 --> 00:11:51,040
aggregation service

00:11:48,560 --> 00:11:52,480
like i mentioned can be used to add and

00:11:51,040 --> 00:11:55,200
remove managers

00:11:52,480 --> 00:11:56,240
into the aggregator like if you have a

00:11:55,200 --> 00:11:59,519
new

00:11:56,240 --> 00:12:02,880
server you can add the server using

00:11:59,519 --> 00:12:04,000
uh post operations on the aggregation

00:12:02,880 --> 00:12:06,880
service

00:12:04,000 --> 00:12:09,200
and you also use then information about

00:12:06,880 --> 00:12:11,519
credentials and these type of things

00:12:09,200 --> 00:12:12,720
after you've done that a server will

00:12:11,519 --> 00:12:15,519
show up as

00:12:12,720 --> 00:12:17,680
a computer system as well as a chassis

00:12:15,519 --> 00:12:19,680
and so on and so forth

00:12:17,680 --> 00:12:21,600
the aggregation service will also allow

00:12:19,680 --> 00:12:23,920
you to do bulk operations like

00:12:21,600 --> 00:12:26,320
resetting and these type of things we

00:12:23,920 --> 00:12:30,320
have another service update service for

00:12:26,320 --> 00:12:32,240
for doing bulk operations on firmware

00:12:30,320 --> 00:12:34,079
uh there are other things in the

00:12:32,240 --> 00:12:37,040
aggregation service that

00:12:34,079 --> 00:12:39,440
is in dmtf redfish specification to

00:12:37,040 --> 00:12:40,240
define your own aggregates and to define

00:12:39,440 --> 00:12:42,959
your

00:12:40,240 --> 00:12:44,720
customized actions and things of that

00:12:42,959 --> 00:12:45,600
nature that have not yet been

00:12:44,720 --> 00:12:47,360
implemented in

00:12:45,600 --> 00:12:49,680
odim's version of the aggregation

00:12:47,360 --> 00:12:51,360
service so that's something to look for

00:12:49,680 --> 00:12:54,480
for the future

00:12:51,360 --> 00:12:56,240
the event service in in redfish is

00:12:54,480 --> 00:12:56,639
something that is implemented in odom as

00:12:56,240 --> 00:12:59,200
well

00:12:56,639 --> 00:13:00,399
and that will allow you to subscribe to

00:12:59,200 --> 00:13:02,639
events

00:13:00,399 --> 00:13:04,480
uh events could be a different type of

00:13:02,639 --> 00:13:05,680
event exist it could be alarms

00:13:04,480 --> 00:13:07,760
and these type of things so it's

00:13:05,680 --> 00:13:09,279
something that a monitoring system would

00:13:07,760 --> 00:13:11,760
be interested in

00:13:09,279 --> 00:13:13,519
the beauty of this is that you can

00:13:11,760 --> 00:13:14,240
actually instead of having to set up

00:13:13,519 --> 00:13:16,480
subscription

00:13:14,240 --> 00:13:17,680
on each resource in the data center you

00:13:16,480 --> 00:13:20,160
can now just say

00:13:17,680 --> 00:13:21,760
to odim hey what resources do you have

00:13:20,160 --> 00:13:23,760
okay

00:13:21,760 --> 00:13:25,839
take all these resources i have here in

00:13:23,760 --> 00:13:27,600
my collection and set up this type of

00:13:25,839 --> 00:13:28,959
event subscription to them and by the

00:13:27,600 --> 00:13:30,000
way here is where you should send all

00:13:28,959 --> 00:13:32,160
the events

00:13:30,000 --> 00:13:34,639
so it's a single operation that will set

00:13:32,160 --> 00:13:36,560
up subscription for the infrastructure

00:13:34,639 --> 00:13:38,880
and resources you are interested in or

00:13:36,560 --> 00:13:41,120
your monitoring system is interested in

00:13:38,880 --> 00:13:42,240
so that is quite powerful actually and

00:13:41,120 --> 00:13:45,920
then obviously

00:13:42,240 --> 00:13:48,639
odem has session service account service

00:13:45,920 --> 00:13:49,360
session service is there to let you log

00:13:48,639 --> 00:13:51,839
in and

00:13:49,360 --> 00:13:53,040
retrieve a token and use that for for

00:13:51,839 --> 00:13:56,240
operations

00:13:53,040 --> 00:13:59,360
and account services is kind of uh just

00:13:56,240 --> 00:14:00,480
set up different roles and accounts and

00:13:59,360 --> 00:14:03,760
then we have a

00:14:00,480 --> 00:14:04,959
task management concept which is also in

00:14:03,760 --> 00:14:07,920
redfish obviously

00:14:04,959 --> 00:14:09,600
for long-running operations instead of

00:14:07,920 --> 00:14:12,320
waiting for returns you can

00:14:09,600 --> 00:14:12,959
you will get a task back a task monitor

00:14:12,320 --> 00:14:16,320
uri

00:14:12,959 --> 00:14:18,399
which you can use to query where

00:14:16,320 --> 00:14:20,000
what's going on with the operation i

00:14:18,399 --> 00:14:22,720
asked for

00:14:20,000 --> 00:14:23,360
how much is done and also you can even

00:14:22,720 --> 00:14:25,920
set up

00:14:23,360 --> 00:14:26,800
a subscription so when the task is

00:14:25,920 --> 00:14:30,079
changing

00:14:26,800 --> 00:14:32,160
a state perhaps it's it's done or it

00:14:30,079 --> 00:14:33,120
failed or whatever you will get an event

00:14:32,160 --> 00:14:36,240
so that's also

00:14:33,120 --> 00:14:38,240
a possibility uh and then we have the

00:14:36,240 --> 00:14:40,560
update service and there we only

00:14:38,240 --> 00:14:43,199
implemented a simple update so far

00:14:40,560 --> 00:14:44,240
uh and and there are gonna be other

00:14:43,199 --> 00:14:47,279
contributions

00:14:44,240 --> 00:14:49,279
i have some other companies to

00:14:47,279 --> 00:14:52,000
further enhance the update service

00:14:49,279 --> 00:14:53,600
obviously this is an area where

00:14:52,000 --> 00:14:55,519
you have very different solutions from

00:14:53,600 --> 00:14:58,240
different vendors so this is

00:14:55,519 --> 00:15:01,040
a complicated space so it's it's

00:14:58,240 --> 00:15:02,800
difficult to make anything that

00:15:01,040 --> 00:15:04,399
works across vendors there but we're

00:15:02,800 --> 00:15:06,720
going to get there for sure

00:15:04,399 --> 00:15:07,760
and then we have registers obviously the

00:15:06,720 --> 00:15:10,079
regular

00:15:07,760 --> 00:15:12,160
redfish radishes that you can query and

00:15:10,079 --> 00:15:14,079
you can find registers like uh

00:15:12,160 --> 00:15:16,480
for the alert for the events and things

00:15:14,079 --> 00:15:20,320
of that nature

00:15:16,480 --> 00:15:22,480
all right um moving on then

00:15:20,320 --> 00:15:25,199
for just looking at one of the plugins

00:15:22,480 --> 00:15:27,680
the gener generic redfish plugin

00:15:25,199 --> 00:15:28,800
that is a plug-in that just speaks

00:15:27,680 --> 00:15:31,920
redfish

00:15:28,800 --> 00:15:32,880
and one thing that the odin project is

00:15:31,920 --> 00:15:36,560
doing as well

00:15:32,880 --> 00:15:39,440
is releasing redfish profiles

00:15:36,560 --> 00:15:41,440
for odium and we have not done that as

00:15:39,440 --> 00:15:43,279
part of this release because they're not

00:15:41,440 --> 00:15:44,959
quite complete yet even though you can

00:15:43,279 --> 00:15:46,959
find them in the in the source in a

00:15:44,959 --> 00:15:50,000
separate

00:15:46,959 --> 00:15:50,639
branch and those profiles redfish

00:15:50,000 --> 00:15:54,240
profile

00:15:50,639 --> 00:15:56,160
is telling you what properties and what

00:15:54,240 --> 00:15:58,720
objects you should expect

00:15:56,160 --> 00:16:00,240
when you talk to odin and it's also so

00:15:58,720 --> 00:16:01,360
that's for northbound clients but it's

00:16:00,240 --> 00:16:03,519
also telling

00:16:01,360 --> 00:16:04,560
plugin developers what properties need

00:16:03,519 --> 00:16:07,759
to be implemented

00:16:04,560 --> 00:16:09,920
in a certain schema

00:16:07,759 --> 00:16:11,839
so so this is this is something that we

00:16:09,920 --> 00:16:15,279
plan on making sure that the

00:16:11,839 --> 00:16:15,920
the generic redfish plug-in will expect

00:16:15,279 --> 00:16:18,079
all those

00:16:15,920 --> 00:16:20,839
uh properties we're not quite there

00:16:18,079 --> 00:16:23,920
today so the generic redfish plug-in

00:16:20,839 --> 00:16:25,040
has uh support for for most redfish

00:16:23,920 --> 00:16:27,680
operations

00:16:25,040 --> 00:16:30,160
and but it it doesn't really worry too

00:16:27,680 --> 00:16:30,160
much about

00:16:31,440 --> 00:16:35,360
this mandatory properties that the

00:16:33,519 --> 00:16:37,519
profile will put forward

00:16:35,360 --> 00:16:38,720
but the the thing it does certainly a

00:16:37,519 --> 00:16:40,480
good job of right now

00:16:38,720 --> 00:16:42,160
is to serve as a plug-in template you

00:16:40,480 --> 00:16:44,480
can use this uh and

00:16:42,160 --> 00:16:45,759
and start building your own plug-in and

00:16:44,480 --> 00:16:49,120
we we obviously

00:16:45,759 --> 00:16:49,600
we have used it right now for uh working

00:16:49,120 --> 00:16:51,839
on

00:16:49,600 --> 00:16:52,880
an open source plug-in for for dell

00:16:51,839 --> 00:16:56,000
servers

00:16:52,880 --> 00:16:58,880
is currently going on in the community

00:16:56,000 --> 00:17:00,720
so the generic redfish plugin is is

00:16:58,880 --> 00:17:02,000
useful in that you can do some refuge

00:17:00,720 --> 00:17:04,400
operations with it

00:17:02,000 --> 00:17:05,520
it's not quite fully mature as far as

00:17:04,400 --> 00:17:08,160
conforming to the

00:17:05,520 --> 00:17:09,760
profiles but it's an excellent source if

00:17:08,160 --> 00:17:13,039
you want to start developing

00:17:09,760 --> 00:17:14,400
your plug-in on your own moving on to

00:17:13,039 --> 00:17:17,520
another plug-in then

00:17:14,400 --> 00:17:18,240
we have the unmanaged rack plug-in and

00:17:17,520 --> 00:17:20,240
that is a

00:17:18,240 --> 00:17:22,319
that is a plug-in for racks without

00:17:20,240 --> 00:17:23,199
managers and most racks don't have

00:17:22,319 --> 00:17:26,079
managers and

00:17:23,199 --> 00:17:27,439
why do we need a manager for iraq well

00:17:26,079 --> 00:17:31,039
there are some

00:17:27,439 --> 00:17:32,400
objects hosted under iraq for instance

00:17:31,039 --> 00:17:34,960
there is things like

00:17:32,400 --> 00:17:35,840
contains so you want to go to iraq and

00:17:34,960 --> 00:17:38,160
you want to ask

00:17:35,840 --> 00:17:40,000
what what do you have in the rack and

00:17:38,160 --> 00:17:42,480
then you can look at the contains of

00:17:40,000 --> 00:17:44,240
uh property and and there there should

00:17:42,480 --> 00:17:45,200
be links to all the chassis that are

00:17:44,240 --> 00:17:48,000
sitting in the rack

00:17:45,200 --> 00:17:48,799
right there are also other objects like

00:17:48,000 --> 00:17:52,240
locations

00:17:48,799 --> 00:17:54,880
you can get gps coordinates uh

00:17:52,240 --> 00:17:55,679
what aisle and and and what role is

00:17:54,880 --> 00:17:57,919
something in

00:17:55,679 --> 00:17:58,799
and and that is another thing that you

00:17:57,919 --> 00:18:02,480
need uh

00:17:58,799 --> 00:18:04,799
from the rack so you use all this to be

00:18:02,480 --> 00:18:06,160
able to extract things like topology

00:18:04,799 --> 00:18:09,600
information

00:18:06,160 --> 00:18:12,080
what role what aisle what what floor and

00:18:09,600 --> 00:18:14,160
things of that nature and this is key

00:18:12,080 --> 00:18:17,039
when you do want to set up connectivity

00:18:14,160 --> 00:18:18,640
because if you don't have a rack you you

00:18:17,039 --> 00:18:21,039
know that a certain server

00:18:18,640 --> 00:18:22,720
port is connected to a certain switch

00:18:21,039 --> 00:18:25,919
but where is that switch

00:18:22,720 --> 00:18:28,320
and then you look at the switch chassis

00:18:25,919 --> 00:18:29,919
and you can follow the link to the rack

00:18:28,320 --> 00:18:32,000
or you can look at the rack and follow

00:18:29,919 --> 00:18:33,360
the link to the switch chassis and vice

00:18:32,000 --> 00:18:36,480
versa so it's

00:18:33,360 --> 00:18:39,039
it's key to be able to model a data

00:18:36,480 --> 00:18:40,960
center and this rack plug-in was

00:18:39,039 --> 00:18:44,320
contributed by intel

00:18:40,960 --> 00:18:45,919
uh and actually it has a

00:18:44,320 --> 00:18:48,000
management interface that represents

00:18:45,919 --> 00:18:50,320
many racks and and it has a

00:18:48,000 --> 00:18:51,280
it has to save states because when you

00:18:50,320 --> 00:18:54,480
stick things in

00:18:51,280 --> 00:18:57,440
into the rack it needs to log that

00:18:54,480 --> 00:18:59,840
as in in the contains object so it has a

00:18:57,440 --> 00:19:01,760
local database

00:18:59,840 --> 00:19:03,200
and that is part of the first release so

00:19:01,760 --> 00:19:05,120
if you look a little bit then at

00:19:03,200 --> 00:19:06,559
what is coming up in the next release

00:19:05,120 --> 00:19:10,000
and and this is obviously

00:19:06,559 --> 00:19:12,559
uh something that might change obviously

00:19:10,000 --> 00:19:13,440
but these are the plans right now we

00:19:12,559 --> 00:19:16,400
have

00:19:13,440 --> 00:19:16,960
development for a dell plug-in right now

00:19:16,400 --> 00:19:18,720
and the

00:19:16,960 --> 00:19:21,360
reason for that is obviously we want to

00:19:18,720 --> 00:19:24,080
have multi-vendor experience from odin

00:19:21,360 --> 00:19:26,480
because that's what odin is all about

00:19:24,080 --> 00:19:28,320
it lives in its own branch right now and

00:19:26,480 --> 00:19:31,280
there is a collaboration between

00:19:28,320 --> 00:19:33,200
intel and hpe we are hoping to attract

00:19:31,280 --> 00:19:36,320
other

00:19:33,200 --> 00:19:36,960
contributors here as well obviously and

00:19:36,320 --> 00:19:39,600
then there is

00:19:36,960 --> 00:19:40,480
the work on the bmc emulator that is

00:19:39,600 --> 00:19:42,240
going on

00:19:40,480 --> 00:19:44,400
on the intel side and as i mentioned

00:19:42,240 --> 00:19:47,039
before we have this

00:19:44,400 --> 00:19:47,840
composition service that ami is looking

00:19:47,039 --> 00:19:50,240
for

00:19:47,840 --> 00:19:51,280
and the one thing to mention there is

00:19:50,240 --> 00:19:53,919
that

00:19:51,280 --> 00:19:54,559
out of the box current composition

00:19:53,919 --> 00:19:57,760
servant

00:19:54,559 --> 00:20:00,160
service in dmtf redfish does not

00:19:57,760 --> 00:20:01,440
address things like connectivity and

00:20:00,160 --> 00:20:03,600
those type of stuff

00:20:01,440 --> 00:20:05,120
so there is a lot of discussion there is

00:20:03,600 --> 00:20:06,880
actually a task force go

00:20:05,120 --> 00:20:09,760
inside the mtf looking at the

00:20:06,880 --> 00:20:11,840
composition service

00:20:09,760 --> 00:20:13,280
and i'm confident that something really

00:20:11,840 --> 00:20:16,559
good is going to come out of that

00:20:13,280 --> 00:20:19,600
and and we are providing input from odim

00:20:16,559 --> 00:20:21,600
and and so on and so forth so once that

00:20:19,600 --> 00:20:24,720
has landed in the spec

00:20:21,600 --> 00:20:27,600
ami can can actually start doing the

00:20:24,720 --> 00:20:28,159
contribution to the project and then

00:20:27,600 --> 00:20:30,960
finally

00:20:28,159 --> 00:20:32,159
uh we are looking at the cisco aci

00:20:30,960 --> 00:20:35,760
plug-in as well

00:20:32,159 --> 00:20:38,960
we are dealing with the networks in in a

00:20:35,760 --> 00:20:39,600
in on a fabric level inside odin so we

00:20:38,960 --> 00:20:43,039
have

00:20:39,600 --> 00:20:45,679
dmtf redfish has a fabric model that

00:20:43,039 --> 00:20:46,960
has been enhanced lately to address

00:20:45,679 --> 00:20:50,000
things like

00:20:46,960 --> 00:20:51,120
you know ethernet networks ethernet

00:20:50,000 --> 00:20:53,520
fabrics

00:20:51,120 --> 00:20:54,480
and today there is a commercial plug-in

00:20:53,520 --> 00:20:57,280
from hpe

00:20:54,480 --> 00:20:59,200
for a aruba-based fabric but there is

00:20:57,280 --> 00:21:00,720
nothing in the open source community so

00:20:59,200 --> 00:21:04,159
this is what we're looking

00:21:00,720 --> 00:21:06,400
at to to get there and it's more on a in

00:21:04,159 --> 00:21:09,120
a discussion phase right now

00:21:06,400 --> 00:21:10,159
no no code has been dropped or anything

00:21:09,120 --> 00:21:11,760
like that

00:21:10,159 --> 00:21:13,280
but uh it's something that we are

00:21:11,760 --> 00:21:16,960
looking forward to uh

00:21:13,280 --> 00:21:19,840
seeing in the project fairly soon

00:21:16,960 --> 00:21:21,600
so that's i think for the release i just

00:21:19,840 --> 00:21:25,039
want to also mention a little bit

00:21:21,600 --> 00:21:27,440
about how we do releases

00:21:25,039 --> 00:21:29,200
for the first year because we are we are

00:21:27,440 --> 00:21:32,480
expecting

00:21:29,200 --> 00:21:34,960
that we will have more uh contributors

00:21:32,480 --> 00:21:36,400
in the future and more participants but

00:21:34,960 --> 00:21:37,120
for the first year we're planning on two

00:21:36,400 --> 00:21:38,880
releases

00:21:37,120 --> 00:21:40,559
the first one just came out the second

00:21:38,880 --> 00:21:43,760
one will be on

00:21:40,559 --> 00:21:44,559
in august we don't have any maintenance

00:21:43,760 --> 00:21:46,799
releases

00:21:44,559 --> 00:21:48,960
uh right now and and that's probably how

00:21:46,799 --> 00:21:53,440
it's going to stay so if you have some

00:21:48,960 --> 00:21:55,679
uh problems with 2101

00:21:53,440 --> 00:21:56,960
you log you can log issues and they will

00:21:55,679 --> 00:21:59,440
be fixed but don't

00:21:56,960 --> 00:22:00,000
expect a maintenance release from the

00:21:59,440 --> 00:22:01,520
project

00:22:00,000 --> 00:22:04,320
instead there will be a new release that

00:22:01,520 --> 00:22:06,559
had addressed all those in august

00:22:04,320 --> 00:22:07,840
and as we go on if we look a little bit

00:22:06,559 --> 00:22:10,320
at the

00:22:07,840 --> 00:22:12,000
branching model then the development

00:22:10,320 --> 00:22:14,799
branch is just continuing

00:22:12,000 --> 00:22:16,400
all the time and you can add features

00:22:14,799 --> 00:22:18,559
and functionality there

00:22:16,400 --> 00:22:20,559
but two weeks four weeks before the

00:22:18,559 --> 00:22:22,159
release we have an integration period

00:22:20,559 --> 00:22:25,200
and that's where we take

00:22:22,159 --> 00:22:28,000
longer running projects

00:22:25,200 --> 00:22:29,760
or sub-projects sodium or features

00:22:28,000 --> 00:22:33,200
larger features and integrate them

00:22:29,760 --> 00:22:36,000
into the development branch obviously

00:22:33,200 --> 00:22:36,559
for for any type of small feature there

00:22:36,000 --> 00:22:38,480
are

00:22:36,559 --> 00:22:40,159
feature branches as well and they will

00:22:38,480 --> 00:22:41,200
come and go they will go into

00:22:40,159 --> 00:22:43,440
development uh

00:22:41,200 --> 00:22:45,679
not specifically in the integration

00:22:43,440 --> 00:22:48,799
period but actually

00:22:45,679 --> 00:22:50,559
it could go in all the time

00:22:48,799 --> 00:22:52,480
but it's the larger ones that will go in

00:22:50,559 --> 00:22:54,880
during the integration period

00:22:52,480 --> 00:22:56,640
and then we two weeks before the release

00:22:54,880 --> 00:22:59,760
we start to release branch

00:22:56,640 --> 00:23:01,280
and we release rc0 rc1 and and so on

00:22:59,760 --> 00:23:05,120
depending on how many

00:23:01,280 --> 00:23:07,679
many uh issues we we can see and get

00:23:05,120 --> 00:23:08,640
uh one thing there is that we don't fix

00:23:07,679 --> 00:23:12,080
minor things

00:23:08,640 --> 00:23:15,200
in the rc period we fix basically

00:23:12,080 --> 00:23:17,120
bigger show stoppers so that's how the

00:23:15,200 --> 00:23:18,480
the release model looks right now

00:23:17,120 --> 00:23:22,400
obviously once we

00:23:18,480 --> 00:23:25,120
make it into lsn we might review this

00:23:22,400 --> 00:23:26,320
and if we get more participant we might

00:23:25,120 --> 00:23:28,720
not step up to

00:23:26,320 --> 00:23:31,200
three releases per year type of approach

00:23:28,720 --> 00:23:31,200
instead

00:23:31,600 --> 00:23:35,919
was there any questions here it's a good

00:23:34,080 --> 00:23:37,360
opportunity to look at those right now

00:23:35,919 --> 00:23:40,799
and martin you

00:23:37,360 --> 00:23:44,080
perhaps you already uh addressed them

00:23:40,799 --> 00:23:45,600
so yeah so then marty and i i think this

00:23:44,080 --> 00:23:47,120
is where i hand over to you sorry

00:23:45,600 --> 00:23:49,440
yeah well actually just before you do

00:23:47,120 --> 00:23:51,840
there was a question on

00:23:49,440 --> 00:23:54,240
how do we support streaming telemetry

00:23:51,840 --> 00:23:54,240
you know

00:23:54,559 --> 00:24:01,039
ah so we don't have the telemet

00:23:57,840 --> 00:24:03,120
telemetry service right now um

00:24:01,039 --> 00:24:04,559
so that is being looked at and i haven't

00:24:03,120 --> 00:24:08,960
listed that

00:24:04,559 --> 00:24:08,960
as part of the next release

00:24:10,159 --> 00:24:16,559
it might show up then and and as far as

00:24:13,840 --> 00:24:18,880
stream telnet 3 i i don't know we are we

00:24:16,559 --> 00:24:21,840
are still kind of um

00:24:18,880 --> 00:24:24,400
discussing this a bit in the in the

00:24:21,840 --> 00:24:26,159
project and i just want to say that

00:24:24,400 --> 00:24:28,559
i think there are different views on

00:24:26,159 --> 00:24:30,320
what the telemetry service is supposed

00:24:28,559 --> 00:24:32,880
to should address you know them from

00:24:30,320 --> 00:24:34,720
different participants so which is very

00:24:32,880 --> 00:24:35,919
natural so we right now we're having a

00:24:34,720 --> 00:24:37,600
discussion

00:24:35,919 --> 00:24:41,520
and we want to we want to land on

00:24:37,600 --> 00:24:44,240
something that is useful for everybody

00:24:41,520 --> 00:24:46,720
stream telemetry is obviously one thing

00:24:44,240 --> 00:24:50,000
getting those reports as part of events

00:24:46,720 --> 00:24:50,880
telemetry reports is also another use

00:24:50,000 --> 00:24:53,200
case

00:24:50,880 --> 00:24:54,720
so we're looking at all at all that but

00:24:53,200 --> 00:24:55,440
we haven't really taken a lot of

00:24:54,720 --> 00:24:58,240
decisions

00:24:55,440 --> 00:25:00,000
martin the telemetry service has not

00:24:58,240 --> 00:25:02,799
even been approved by tsc

00:25:00,000 --> 00:25:03,600
yet as if i remember correctly right no

00:25:02,799 --> 00:25:05,919
not yet

00:25:03,600 --> 00:25:06,799
um but yeah i mean it seems to be a

00:25:05,919 --> 00:25:09,840
fairly common

00:25:06,799 --> 00:25:10,880
request though um from a number of

00:25:09,840 --> 00:25:13,200
operators so

00:25:10,880 --> 00:25:16,080
it is going to be become an area of

00:25:13,200 --> 00:25:17,679
focus for odin

00:25:16,080 --> 00:25:19,679
yeah and then we have two other

00:25:17,679 --> 00:25:21,360
questions here martin do you want to

00:25:19,679 --> 00:25:24,240
take the

00:25:21,360 --> 00:25:25,039
the one view question perhaps the one

00:25:24,240 --> 00:25:28,320
view question

00:25:25,039 --> 00:25:30,559
yeah sure so um so hp one view

00:25:28,320 --> 00:25:31,840
that that the northbound interface from

00:25:30,559 --> 00:25:35,120
odom um

00:25:31,840 --> 00:25:35,840
is fully redfish compliant right and and

00:25:35,120 --> 00:25:38,960
so

00:25:35,840 --> 00:25:41,279
um from the perspective of one view

00:25:38,960 --> 00:25:42,480
um we're working with that organization

00:25:41,279 --> 00:25:46,559
in in terms of them

00:25:42,480 --> 00:25:50,080
exposing a redfish interface southbound

00:25:46,559 --> 00:25:52,400
from that stack um so

00:25:50,080 --> 00:25:53,520
you know so it's in the plan to support

00:25:52,400 --> 00:25:57,120
one view

00:25:53,520 --> 00:25:59,600
um but you know it it means working

00:25:57,120 --> 00:26:00,880
within our business units to um to get

00:25:59,600 --> 00:26:04,400
that done

00:26:00,880 --> 00:26:05,520
um we we're also in discussions in the

00:26:04,400 --> 00:26:07,360
same

00:26:05,520 --> 00:26:08,559
space you know outside of you know an

00:26:07,360 --> 00:26:11,919
hpe product

00:26:08,559 --> 00:26:13,360
um but you know um within the the odin

00:26:11,919 --> 00:26:15,760
project itself you know

00:26:13,360 --> 00:26:17,600
as uh jonas mentioned earlier with uh

00:26:15,760 --> 00:26:20,159
companies like ami

00:26:17,600 --> 00:26:21,600
um for their composition service and you

00:26:20,159 --> 00:26:24,960
know from that perspective

00:26:21,600 --> 00:26:26,799
you know they are um other

00:26:24,960 --> 00:26:29,039
solutions out there as well that are

00:26:26,799 --> 00:26:32,159
that are part of the project

00:26:29,039 --> 00:26:33,520
um i could say shall i say a couple of

00:26:32,159 --> 00:26:35,520
words about snmp

00:26:33,520 --> 00:26:36,559
yeah please do if you like i mean there

00:26:35,520 --> 00:26:39,679
is currently no

00:26:36,559 --> 00:26:41,360
snmp support inside odim uh there is

00:26:39,679 --> 00:26:45,840
nothing preventing you from setting up

00:26:41,360 --> 00:26:48,960
a a plug-in for snmp and translate it to

00:26:45,840 --> 00:26:51,039
uh redfish events of course and

00:26:48,960 --> 00:26:52,720
yeah what else do you want to say much

00:26:51,039 --> 00:26:55,120
yeah and that's what i was going to

00:26:52,720 --> 00:26:56,000
elaborate on a little bit which is that

00:26:55,120 --> 00:26:59,520
um we've

00:26:56,000 --> 00:27:03,120
we've worked within the dmtf to um

00:26:59,520 --> 00:27:04,240
to basically enhance the networking

00:27:03,120 --> 00:27:06,559
[Music]

00:27:04,240 --> 00:27:07,360
set of registries for the event service

00:27:06,559 --> 00:27:10,960
within

00:27:07,360 --> 00:27:13,360
redfish um and so our expectation

00:27:10,960 --> 00:27:15,039
is that if you look at this set of uh

00:27:13,360 --> 00:27:15,840
networking events that are out there and

00:27:15,039 --> 00:27:18,640
there are now

00:27:15,840 --> 00:27:19,919
fabric actual ethernet fabric focused

00:27:18,640 --> 00:27:21,919
ones

00:27:19,919 --> 00:27:23,279
the expectation would be that you should

00:27:21,919 --> 00:27:26,720
be able to translate

00:27:23,279 --> 00:27:28,480
snmp based uh traps you know if it's

00:27:26,720 --> 00:27:32,080
coming from networking equipment

00:27:28,480 --> 00:27:34,480
uh into redfish events through

00:27:32,080 --> 00:27:36,320
using the events and and the you know

00:27:34,480 --> 00:27:38,480
the standardized registries

00:27:36,320 --> 00:27:40,399
so that's how we see things you know

00:27:38,480 --> 00:27:41,440
developing on the networking side of

00:27:40,399 --> 00:27:46,840
things anyway with

00:27:41,440 --> 00:27:49,840
um you know support of things like

00:27:46,840 --> 00:27:49,840
snmp

00:27:53,840 --> 00:27:57,760
andres had a follow-up question there

00:27:55,919 --> 00:28:03,840
martin

00:27:57,760 --> 00:28:03,840
so snmp pooling um

00:28:04,880 --> 00:28:08,080
yeah we need to focus on that as well i

00:28:07,679 --> 00:28:10,240
mean

00:28:08,080 --> 00:28:11,760
in the first the first implementations

00:28:10,240 --> 00:28:14,480
that that we would have

00:28:11,760 --> 00:28:15,520
it would be a one-to-one translation

00:28:14,480 --> 00:28:19,520
rather than cooling

00:28:15,520 --> 00:28:20,880
snmp but yeah we'll uh

00:28:19,520 --> 00:28:24,159
we'll look at that very happy to have a

00:28:20,880 --> 00:28:24,159
follow-up on that andreas

00:28:26,240 --> 00:28:30,000
all right if nothing else on odem and

00:28:29,600 --> 00:28:31,760
and

00:28:30,000 --> 00:28:33,919
please feel free to ask again while

00:28:31,760 --> 00:28:34,399
martin is presenting we can always jump

00:28:33,919 --> 00:28:38,000
back

00:28:34,399 --> 00:28:40,080
but uh we have now uh

00:28:38,000 --> 00:28:41,760
a little section here to dive into deep

00:28:40,080 --> 00:28:42,799
edge deployment that martin is going to

00:28:41,760 --> 00:28:44,720
present

00:28:42,799 --> 00:28:46,399
so martin let me know when you want a

00:28:44,720 --> 00:28:50,000
new slide and so on

00:28:46,399 --> 00:28:52,640
yeah sure we'll do thanks janice

00:28:50,000 --> 00:28:54,080
so um yeah so we'll start off with then

00:28:52,640 --> 00:28:58,159
and these are just some of

00:28:54,080 --> 00:29:01,279
the um the ideas and and direction that

00:28:58,159 --> 00:29:03,679
you know our company hpe has

00:29:01,279 --> 00:29:04,480
uh in terms of how we want to approach

00:29:03,679 --> 00:29:07,840
the market

00:29:04,480 --> 00:29:11,039
for um the support

00:29:07,840 --> 00:29:14,640
uh of you know virtualized

00:29:11,039 --> 00:29:16,399
network functions as they move outside

00:29:14,640 --> 00:29:17,919
of core data centers

00:29:16,399 --> 00:29:19,919
and so a lot of this as you know you

00:29:17,919 --> 00:29:23,200
know there's a huge industry buzz

00:29:19,919 --> 00:29:25,200
um around disaggregation um

00:29:23,200 --> 00:29:27,360
and you know the idea really that

00:29:25,200 --> 00:29:29,120
telecoms operators take fine-grained

00:29:27,360 --> 00:29:30,559
control of their infrastructure

00:29:29,120 --> 00:29:32,000
strategies right

00:29:30,559 --> 00:29:33,600
you know move away from vertically

00:29:32,000 --> 00:29:36,159
integrated stacks

00:29:33,600 --> 00:29:36,799
um that you know traditional networking

00:29:36,159 --> 00:29:39,600
uh

00:29:36,799 --> 00:29:39,840
you know telecoms equipment uh composed

00:29:39,600 --> 00:29:43,440
of

00:29:39,840 --> 00:29:45,120
right now um the the operators are

00:29:43,440 --> 00:29:46,320
actually fairly sophisticated in what

00:29:45,120 --> 00:29:49,120
they're doing with this

00:29:46,320 --> 00:29:51,360
um so it's not just about the you know

00:29:49,120 --> 00:29:53,440
the disaggregation of that physical

00:29:51,360 --> 00:29:55,600
infrastructure in terms of architecture

00:29:53,440 --> 00:29:56,880
disaggregation see on the left-hand side

00:29:55,600 --> 00:29:59,760
of this picture

00:29:56,880 --> 00:30:01,840
but also um how they actually organize

00:29:59,760 --> 00:30:02,880
themselves as well has quite a large

00:30:01,840 --> 00:30:05,919
bearing

00:30:02,880 --> 00:30:07,840
uh in terms of how companies like ours

00:30:05,919 --> 00:30:09,919
and obviously others

00:30:07,840 --> 00:30:11,679
would need to present you know their

00:30:09,919 --> 00:30:12,720
solutions and that's down to the way

00:30:11,679 --> 00:30:15,840
that those

00:30:12,720 --> 00:30:18,399
offerings are procured um so typically

00:30:15,840 --> 00:30:20,640
um you know you would get disaggregation

00:30:18,399 --> 00:30:22,799
uh on procurement side so you have

00:30:20,640 --> 00:30:25,120
various teams within the operators

00:30:22,799 --> 00:30:27,440
that are primarily focused on just

00:30:25,120 --> 00:30:29,679
buying things like orchestration

00:30:27,440 --> 00:30:31,200
the network functions themselves the

00:30:29,679 --> 00:30:32,159
infrastructure all these separate

00:30:31,200 --> 00:30:34,880
activities and

00:30:32,159 --> 00:30:36,080
actually separate parts of um you know

00:30:34,880 --> 00:30:39,679
of the procurement

00:30:36,080 --> 00:30:42,080
um arm of an operator

00:30:39,679 --> 00:30:44,559
so um so again that has a bearing and

00:30:42,080 --> 00:30:46,960
you know not just on technology but also

00:30:44,559 --> 00:30:49,039
you know commercially how um you know

00:30:46,960 --> 00:30:51,520
solutions are actually packaged

00:30:49,039 --> 00:30:54,559
uh and then the third piece is is

00:30:51,520 --> 00:30:57,360
delivery disaggregation and um

00:30:54,559 --> 00:30:58,640
you know for that um we see a

00:30:57,360 --> 00:31:01,519
fragmentation there

00:30:58,640 --> 00:31:01,840
as well in terms of well obviously there

00:31:01,519 --> 00:31:04,640
are

00:31:01,840 --> 00:31:06,559
an awful lot of you know telecoms

00:31:04,640 --> 00:31:08,799
projects that are delivered

00:31:06,559 --> 00:31:11,360
via the major network equipment

00:31:08,799 --> 00:31:13,760
providers and we all know who they are

00:31:11,360 --> 00:31:14,480
but also um you know delivery of those

00:31:13,760 --> 00:31:16,880
projects

00:31:14,480 --> 00:31:19,120
you know in terms of um you know

00:31:16,880 --> 00:31:21,039
separation of responsibilities across

00:31:19,120 --> 00:31:23,600
hardware and infrastructure

00:31:21,039 --> 00:31:25,360
but then an overall system integrator

00:31:23,600 --> 00:31:26,320
non-network equipment provider system

00:31:25,360 --> 00:31:28,559
integrated

00:31:26,320 --> 00:31:30,240
noting taking care of um pulling the

00:31:28,559 --> 00:31:33,039
pieces together and rolling

00:31:30,240 --> 00:31:34,799
you know those solutions out and then

00:31:33,039 --> 00:31:37,120
you know a third one which is

00:31:34,799 --> 00:31:39,600
slightly less common really is the diy

00:31:37,120 --> 00:31:41,679
approach where the operator themselves

00:31:39,600 --> 00:31:43,200
would be responsible for uh for

00:31:41,679 --> 00:31:45,840
integrating the full stack of

00:31:43,200 --> 00:31:48,799
disaggregated hardware and software

00:31:45,840 --> 00:31:51,279
that they had procured so you know

00:31:48,799 --> 00:31:53,039
taking all of those factors into account

00:31:51,279 --> 00:31:55,440
um if you want to move to the next slide

00:31:53,039 --> 00:31:55,440
jonas

00:31:56,399 --> 00:32:00,799
um you know the the thing that we have

00:31:59,679 --> 00:32:03,519
observed you know

00:32:00,799 --> 00:32:05,039
as a vendor in this space is that you

00:32:03,519 --> 00:32:07,760
know we started in this

00:32:05,039 --> 00:32:08,159
in in terms of horizontal disaggregation

00:32:07,760 --> 00:32:11,519
right

00:32:08,159 --> 00:32:13,519
you know we we as a vendor um

00:32:11,519 --> 00:32:16,000
have always gone about things in in

00:32:13,519 --> 00:32:17,039
terms of you know the separation of

00:32:16,000 --> 00:32:20,480
hardware

00:32:17,039 --> 00:32:23,200
and software so you know separation of

00:32:20,480 --> 00:32:23,760
you know physical infrastructure from

00:32:23,200 --> 00:32:27,200
things like

00:32:23,760 --> 00:32:29,760
operating systems network functions etc

00:32:27,200 --> 00:32:31,039
and we started off in this space um you

00:32:29,760 --> 00:32:33,279
know primarily

00:32:31,039 --> 00:32:35,279
for the virtualization of core network

00:32:33,279 --> 00:32:37,600
functions this was you know 10 years ago

00:32:35,279 --> 00:32:37,600
plus

00:32:37,840 --> 00:32:44,240
where we took you know network functions

00:32:40,960 --> 00:32:47,440
that were originally deployed on

00:32:44,240 --> 00:32:50,240
um you know proprietary appliances and

00:32:47,440 --> 00:32:51,440
had them working on industry standard

00:32:50,240 --> 00:32:53,279
servers and we were

00:32:51,440 --> 00:32:54,799
one of the pioneers if not the pioneer

00:32:53,279 --> 00:32:57,039
in that space

00:32:54,799 --> 00:32:59,519
so you know that's you know from our you

00:32:57,039 --> 00:33:01,600
know nfv-like days that we

00:32:59,519 --> 00:33:03,039
um you know we started off with in terms

00:33:01,600 --> 00:33:06,080
of core networking

00:33:03,039 --> 00:33:06,640
we see exactly the same strategy um you

00:33:06,080 --> 00:33:10,320
know

00:33:06,640 --> 00:33:12,240
um being successful for us

00:33:10,320 --> 00:33:14,240
outside of the core data centers you

00:33:12,240 --> 00:33:16,000
know moving you know from core to

00:33:14,240 --> 00:33:18,000
regional to edge and then out into the

00:33:16,000 --> 00:33:20,240
radio access network as well

00:33:18,000 --> 00:33:22,720
so we we see that whole momentum in

00:33:20,240 --> 00:33:24,799
terms of infrastructure disaggregation

00:33:22,720 --> 00:33:26,399
uh you know moving from those from the

00:33:24,799 --> 00:33:29,840
core to the edge with

00:33:26,399 --> 00:33:32,480
you know no let up in momentum there

00:33:29,840 --> 00:33:32,480
next slide

00:33:32,960 --> 00:33:36,159
so so what does that mean for a vendor

00:33:35,840 --> 00:33:38,240
like

00:33:36,159 --> 00:33:39,679
hp and obviously others i guess in the

00:33:38,240 --> 00:33:41,919
industry right that are looking at

00:33:39,679 --> 00:33:45,679
horizontal disaggregation

00:33:41,919 --> 00:33:48,559
um so so to us what that means

00:33:45,679 --> 00:33:50,480
is that you know we we typically are an

00:33:48,559 --> 00:33:52,000
infrastructure vendor you know into the

00:33:50,480 --> 00:33:54,720
telecom space

00:33:52,000 --> 00:33:55,600
so um you know we would look to continue

00:33:54,720 --> 00:33:58,720
that across

00:33:55,600 --> 00:33:58,960
compute and networking in terms of you

00:33:58,720 --> 00:34:02,320
know

00:33:58,960 --> 00:34:05,440
hpe providing solutions which would be

00:34:02,320 --> 00:34:08,960
um you know our infrastructure with

00:34:05,440 --> 00:34:10,720
you know a rich partner ecosystem

00:34:08,960 --> 00:34:12,560
for the component sense that would go

00:34:10,720 --> 00:34:14,960
into that hardware infrastructure

00:34:12,560 --> 00:34:18,079
you know on the on the hardware side of

00:34:14,960 --> 00:34:22,000
things you know so accelerators gpus

00:34:18,079 --> 00:34:23,760
um you know various cpus etc depending

00:34:22,000 --> 00:34:25,839
on the use cases for them

00:34:23,760 --> 00:34:27,359
but crucially as well giving the

00:34:25,839 --> 00:34:30,919
telecoms operators

00:34:27,359 --> 00:34:32,639
choice in terms of the operating systems

00:34:30,919 --> 00:34:36,800
virtualization

00:34:32,639 --> 00:34:38,960
um the um the infrastructure management

00:34:36,800 --> 00:34:42,079
solutions that they would use

00:34:38,960 --> 00:34:45,040
um and how they would be deployed in

00:34:42,079 --> 00:34:46,079
you know not just on compute but also

00:34:45,040 --> 00:34:49,520
for

00:34:46,079 --> 00:34:53,119
networking infrastructure as well so

00:34:49,520 --> 00:34:56,639
um you know so we would see you know uh

00:34:53,119 --> 00:34:57,599
horizontal disaggregation moving from

00:34:56,639 --> 00:35:01,200
core to edge

00:34:57,599 --> 00:35:04,320
with choices for um you know

00:35:01,200 --> 00:35:05,520
the virtualization software stacks uh

00:35:04,320 --> 00:35:08,800
network functions

00:35:05,520 --> 00:35:11,440
uh management etc um

00:35:08,800 --> 00:35:12,320
in a horizontal manner so you know the

00:35:11,440 --> 00:35:14,960
thing that we

00:35:12,320 --> 00:35:16,079
are you know would never do as a as a

00:35:14,960 --> 00:35:18,880
vendor

00:35:16,079 --> 00:35:20,640
would be to build vertically integrated

00:35:18,880 --> 00:35:22,320
stacks with kind of best of breed

00:35:20,640 --> 00:35:23,839
software vendors you know and deliver

00:35:22,320 --> 00:35:24,720
those as package solutions obviously

00:35:23,839 --> 00:35:27,040
there are

00:35:24,720 --> 00:35:28,640
you know bespoke places where that you

00:35:27,040 --> 00:35:30,000
know that kind of works in the

00:35:28,640 --> 00:35:33,280
enterprise space but

00:35:30,000 --> 00:35:35,280
you know generically in telco

00:35:33,280 --> 00:35:36,880
then you know i think that that would

00:35:35,280 --> 00:35:37,839
close us off to the majority of the

00:35:36,880 --> 00:35:40,000
market

00:35:37,839 --> 00:35:41,359
so you know our remit is all about

00:35:40,000 --> 00:35:44,079
partnering

00:35:41,359 --> 00:35:44,800
um and then you know in in terms of well

00:35:44,079 --> 00:35:48,000
how do we

00:35:44,800 --> 00:35:50,560
then and this is why a project like odom

00:35:48,000 --> 00:35:51,200
and our participation in open source is

00:35:50,560 --> 00:35:54,079
so

00:35:51,200 --> 00:35:55,040
critical to us um because you know if

00:35:54,079 --> 00:35:57,200
you think that

00:35:55,040 --> 00:36:00,079
um you know we're gonna have these

00:35:57,200 --> 00:36:01,839
computer networking stacks

00:36:00,079 --> 00:36:03,680
in terms of infrastructure we want to

00:36:01,839 --> 00:36:05,040
make sure that we expose that

00:36:03,680 --> 00:36:06,880
infrastructure

00:36:05,040 --> 00:36:08,640
to northbound clients that need to

00:36:06,880 --> 00:36:12,640
manage that infrastructure

00:36:08,640 --> 00:36:16,240
in as open as possible manner so

00:36:12,640 --> 00:36:17,440
the use of odom in terms of providing an

00:36:16,240 --> 00:36:19,520
aggregated view

00:36:17,440 --> 00:36:21,200
of all of the infrastructure inside

00:36:19,520 --> 00:36:22,960
these data centers

00:36:21,200 --> 00:36:24,839
and you know getting more crucial as you

00:36:22,960 --> 00:36:26,400
start moving towards the radio access

00:36:24,839 --> 00:36:29,760
network and

00:36:26,400 --> 00:36:31,920
um you know the the multiples of

00:36:29,760 --> 00:36:34,400
you know small aggregation points that

00:36:31,920 --> 00:36:36,160
you're going to have as part of that

00:36:34,400 --> 00:36:38,160
you know projects like odin become more

00:36:36,160 --> 00:36:40,720
and more important

00:36:38,160 --> 00:36:42,240
in terms of giving a standards-based

00:36:40,720 --> 00:36:43,680
visibility of that physical

00:36:42,240 --> 00:36:46,640
infrastructure that's going to

00:36:43,680 --> 00:36:46,640
exist in those

00:36:46,960 --> 00:36:50,720
in those areas so that you can perform

00:36:49,119 --> 00:36:53,520
life cycle management of that

00:36:50,720 --> 00:36:53,520
infrastructure

00:36:53,680 --> 00:36:56,240
next slide

00:36:57,119 --> 00:37:03,520
so so we see this uh you know primarily

00:37:00,560 --> 00:37:04,640
in um you know in the radio access

00:37:03,520 --> 00:37:07,599
network

00:37:04,640 --> 00:37:10,720
because of 3gpp and their functional

00:37:07,599 --> 00:37:12,640
splits for the radio access network

00:37:10,720 --> 00:37:14,560
the the implication for that you know

00:37:12,640 --> 00:37:15,920
for uh for an infrastructure vendor like

00:37:14,560 --> 00:37:17,920
ourselves

00:37:15,920 --> 00:37:19,680
is that um you know telecoms

00:37:17,920 --> 00:37:20,240
environments for the radio access

00:37:19,680 --> 00:37:24,320
network

00:37:20,240 --> 00:37:27,760
are gonna vary wildly across operators

00:37:24,320 --> 00:37:30,240
so um you know our placement of

00:37:27,760 --> 00:37:33,200
you know compute and ethernet switching

00:37:30,240 --> 00:37:35,520
in our you know in the case of hpe

00:37:33,200 --> 00:37:36,640
well you know those deployment

00:37:35,520 --> 00:37:39,440
architectures

00:37:36,640 --> 00:37:40,079
are going to be very different depending

00:37:39,440 --> 00:37:42,560
on

00:37:40,079 --> 00:37:44,480
um you know the chosen set of functional

00:37:42,560 --> 00:37:45,359
splits that the operator has and then

00:37:44,480 --> 00:37:47,359
obviously

00:37:45,359 --> 00:37:49,119
within individual operators you know

00:37:47,359 --> 00:37:49,520
there could be more than one split as

00:37:49,119 --> 00:37:51,920
well

00:37:49,520 --> 00:37:53,040
so you could end up with you know

00:37:51,920 --> 00:37:56,320
centralized

00:37:53,040 --> 00:37:59,119
um you know aggregated

00:37:56,320 --> 00:38:01,680
points of presence where you would have

00:37:59,119 --> 00:38:03,599
you know multiples of physical

00:38:01,680 --> 00:38:05,760
compute nodes that are doing baseband

00:38:03,599 --> 00:38:08,640
processing you know as would occur

00:38:05,760 --> 00:38:11,280
um you know with associated you know low

00:38:08,640 --> 00:38:13,280
latency synchronized ethernet switching

00:38:11,280 --> 00:38:15,520
you know as would occur in the case of

00:38:13,280 --> 00:38:19,119
something like a you know a centralized

00:38:15,520 --> 00:38:20,079
ram versus a dram deployment where you

00:38:19,119 --> 00:38:22,400
may want to collapse

00:38:20,079 --> 00:38:25,280
network functions you know onto

00:38:22,400 --> 00:38:28,720
individual servers

00:38:25,280 --> 00:38:28,720
so uh so next slide

00:38:28,880 --> 00:38:34,800
so so what that means for a vendor like

00:38:32,240 --> 00:38:36,119
us is that it means that we are looking

00:38:34,800 --> 00:38:38,880
at you know a number of

00:38:36,119 --> 00:38:39,520
investigations in terms of how do we

00:38:38,880 --> 00:38:41,440
build these

00:38:39,520 --> 00:38:43,200
you know infrastructure blueprints for

00:38:41,440 --> 00:38:46,079
the radio access network

00:38:43,200 --> 00:38:48,480
and still follow the model for um you

00:38:46,079 --> 00:38:51,839
know disaggregation in telco networks

00:38:48,480 --> 00:38:54,720
right so so obviously you know the

00:38:51,839 --> 00:38:57,040
the areas of focus that we have would be

00:38:54,720 --> 00:38:58,880
you know beyond just product selection

00:38:57,040 --> 00:39:00,400
um you know which would be based on

00:38:58,880 --> 00:39:01,920
space environmental and power

00:39:00,400 --> 00:39:03,520
constraints so you know which would be

00:39:01,920 --> 00:39:05,520
the right product lines

00:39:03,520 --> 00:39:06,960
that we'd want to pull into these types

00:39:05,520 --> 00:39:08,960
of architecture

00:39:06,960 --> 00:39:10,079
it's really crucial to us as well to

00:39:08,960 --> 00:39:12,880
build a component

00:39:10,079 --> 00:39:14,720
software vendor ecosystem just like

00:39:12,880 --> 00:39:15,920
we've done for the core network you know

00:39:14,720 --> 00:39:18,160
we we

00:39:15,920 --> 00:39:20,560
aim to continue to do exactly that for

00:39:18,160 --> 00:39:22,800
the radio access network as well

00:39:20,560 --> 00:39:24,960
um and so you know one once we've pulled

00:39:22,800 --> 00:39:27,599
those two aspects together

00:39:24,960 --> 00:39:29,440
then you know the work then is all about

00:39:27,599 --> 00:39:30,880
the integration that of network and

00:39:29,440 --> 00:39:32,960
transport functions

00:39:30,880 --> 00:39:34,079
and we want to make sure that you know

00:39:32,960 --> 00:39:35,920
we we

00:39:34,079 --> 00:39:38,160
we have those you know capability to

00:39:35,920 --> 00:39:38,800
have those deployed on as few devices as

00:39:38,160 --> 00:39:40,560
pop

00:39:38,800 --> 00:39:43,119
as possible and this is absolutely

00:39:40,560 --> 00:39:44,560
crucial because of the lack of space and

00:39:43,119 --> 00:39:45,839
power you know the environmental

00:39:44,560 --> 00:39:47,119
constraints that you're going to have in

00:39:45,839 --> 00:39:49,920
these um

00:39:47,119 --> 00:39:51,200
in these points of presence so so

00:39:49,920 --> 00:39:54,400
integration is you know

00:39:51,200 --> 00:39:57,680
it is an absolutely key um you know

00:39:54,400 --> 00:40:00,480
area of focus that we need to have um

00:39:57,680 --> 00:40:01,920
and on top of that the you know when

00:40:00,480 --> 00:40:04,960
you're looking at integration

00:40:01,920 --> 00:40:06,640
and the the network functions themselves

00:40:04,960 --> 00:40:08,079
then you know where would you actually

00:40:06,640 --> 00:40:09,839
want to deploy

00:40:08,079 --> 00:40:11,520
those network functions you know how do

00:40:09,839 --> 00:40:13,599
you optimize network function

00:40:11,520 --> 00:40:14,640
placement because if you imagine then

00:40:13,599 --> 00:40:16,400
that you have

00:40:14,640 --> 00:40:18,079
you know combinations of compute and

00:40:16,400 --> 00:40:20,960
switching within

00:40:18,079 --> 00:40:22,319
um you know individual locations then

00:40:20,960 --> 00:40:24,800
you should be available to

00:40:22,319 --> 00:40:26,400
deploy network functions uh you know on

00:40:24,800 --> 00:40:29,200
the on the correct

00:40:26,400 --> 00:40:29,599
um set of infrastructure be that compute

00:40:29,200 --> 00:40:33,280
you know

00:40:29,599 --> 00:40:36,079
ethernet switching etc um and

00:40:33,280 --> 00:40:36,480
on top of that as well um you know when

00:40:36,079 --> 00:40:37,920
you're

00:40:36,480 --> 00:40:39,920
deploying things like you know

00:40:37,920 --> 00:40:43,200
management stacks etc

00:40:39,920 --> 00:40:46,480
then you know deploy that in you know

00:40:43,200 --> 00:40:49,200
that's you know those software stacks um

00:40:46,480 --> 00:40:50,800
again on on infrastructure that makes

00:40:49,200 --> 00:40:52,720
the most sense so that you have the

00:40:50,800 --> 00:40:53,839
smallest possible footprint for these

00:40:52,720 --> 00:40:56,319
locations

00:40:53,839 --> 00:40:57,200
so these are you know a couple of

00:40:56,319 --> 00:41:01,520
extremely

00:40:57,200 --> 00:41:03,440
um strong areas of focus that we have in

00:41:01,520 --> 00:41:06,000
terms of integrated transport network

00:41:03,440 --> 00:41:09,040
and vram functions maybe on uh

00:41:06,000 --> 00:41:10,960
you know individual servers versus

00:41:09,040 --> 00:41:13,440
reduced footprint aggregation

00:41:10,960 --> 00:41:15,200
and then the optimal you know placement

00:41:13,440 --> 00:41:16,880
of network functions you know

00:41:15,200 --> 00:41:19,599
across that you know there's that

00:41:16,880 --> 00:41:22,319
aggregated set of infrastructure

00:41:19,599 --> 00:41:23,200
and then obviously you know through the

00:41:22,319 --> 00:41:25,760
um

00:41:23,200 --> 00:41:27,200
you know our participation in uh in

00:41:25,760 --> 00:41:29,680
orange

00:41:27,200 --> 00:41:31,920
um then it would be all about well you

00:41:29,680 --> 00:41:34,560
know so we have this infrastructure

00:41:31,920 --> 00:41:35,440
we want to make sure that it's open in

00:41:34,560 --> 00:41:38,240
terms of

00:41:35,440 --> 00:41:38,880
um you know how a a third party can

00:41:38,240 --> 00:41:42,079
manage it

00:41:38,880 --> 00:41:43,599
so um so open distributed management of

00:41:42,079 --> 00:41:44,880
aggregated physical and virtual

00:41:43,599 --> 00:41:47,119
infrastructure

00:41:44,880 --> 00:41:48,720
again is a you know is an area of focus

00:41:47,119 --> 00:41:50,640
for us

00:41:48,720 --> 00:41:52,400
so so hopefully that gives you a bit of

00:41:50,640 --> 00:41:54,880
a flavor then as to you know the

00:41:52,400 --> 00:41:56,640
directions that hp is looking at for uh

00:41:54,880 --> 00:41:59,760
for disaggregation

00:41:56,640 --> 00:42:01,440
uh in uh you know as the industry moves

00:41:59,760 --> 00:42:03,119
towards disaggregation

00:42:01,440 --> 00:42:05,119
in telecoms networks you know

00:42:03,119 --> 00:42:08,800
particularly focused on

00:42:05,119 --> 00:42:11,440
on the radio access network um

00:42:08,800 --> 00:42:11,440
next slide

00:42:11,839 --> 00:42:15,359
and so you know that ends up then with

00:42:14,720 --> 00:42:19,200
being

00:42:15,359 --> 00:42:20,960
a you know value proposition um that

00:42:19,200 --> 00:42:23,200
sort of stems from the heritage that we

00:42:20,960 --> 00:42:23,920
have already in telecoms networks you

00:42:23,200 --> 00:42:27,119
know there's nothing

00:42:23,920 --> 00:42:29,760
necessarily new here um so you know we

00:42:27,119 --> 00:42:31,680
really have competencies in terms of

00:42:29,760 --> 00:42:35,680
you know compliance testing for

00:42:31,680 --> 00:42:38,960
operating systems drivers component sets

00:42:35,680 --> 00:42:41,040
nets compliance etc you know there's a

00:42:38,960 --> 00:42:42,160
strong competency in terms of building

00:42:41,040 --> 00:42:44,720
blueprints

00:42:42,160 --> 00:42:46,720
you know initially for the core network

00:42:44,720 --> 00:42:48,400
um but then moving those out towards the

00:42:46,720 --> 00:42:51,440
radio access network

00:42:48,400 --> 00:42:54,400
um sets of tool chains for um

00:42:51,440 --> 00:42:57,119
you know for the the bootstrapping and

00:42:54,400 --> 00:42:59,280
provisioning of that infrastructure

00:42:57,119 --> 00:43:01,119
as a service offerings through greenlink

00:42:59,280 --> 00:43:02,319
and then obviously the development work

00:43:01,119 --> 00:43:05,680
that we're doing

00:43:02,319 --> 00:43:07,839
um through through odom and that project

00:43:05,680 --> 00:43:09,920
so we see you know the combination then

00:43:07,839 --> 00:43:12,240
of all of those capabilities

00:43:09,920 --> 00:43:13,280
you know allows for companies like ours

00:43:12,240 --> 00:43:17,040
to have end-to-end

00:43:13,280 --> 00:43:20,480
telco infrastructure enablement um

00:43:17,040 --> 00:43:22,480
so uh that that was uh that was all i

00:43:20,480 --> 00:43:23,920
was uh going to present for this piece

00:43:22,480 --> 00:43:26,400
of it but hopefully just gives you a

00:43:23,920 --> 00:43:29,520
flavor then of the direction

00:43:26,400 --> 00:43:30,400
that our companies is moving in in terms

00:43:29,520 --> 00:43:34,400
of

00:43:30,400 --> 00:43:38,240
you know aggregation and architectures

00:43:34,400 --> 00:43:38,240
for uh for deep edge deployments

00:43:38,640 --> 00:43:42,480
yeah and i don't see any new questions

00:43:40,960 --> 00:43:46,640
online so

00:43:42,480 --> 00:43:50,400
perhaps we're done for

00:43:46,640 --> 00:43:52,880
for today then okay

00:43:50,400 --> 00:43:55,839
well thank you much very much everybody

00:43:52,880 --> 00:43:55,839
yeah thank you

00:43:57,760 --> 00:44:01,520
all right thanks everyone for joining us

00:44:00,079 --> 00:44:02,000
and hope you have a great rest of your

00:44:01,520 --> 00:44:07,680
day

00:44:02,000 --> 00:44:07,680

YouTube URL: https://www.youtube.com/watch?v=9O6WAkTRv40


