Title: LF Networking: "Onboarding 5G CNFs with ONAP"
Publication date: 2020-10-23
Playlist: LFN + LF Edge Demo Pavilion ONES 2020
Description: 
	LF Networking: "Onboarding 5G CNFs with ONAP"
Captions: 
	00:00:01,360 --> 00:00:07,040
welcome to the 5g cloud native

00:00:03,679 --> 00:00:08,800
network booth i'm your host amar kapadia

00:00:07,040 --> 00:00:10,639
and in today's demo we are going to see

00:00:08,800 --> 00:00:13,840
how easy it is to onboard

00:00:10,639 --> 00:00:14,719
5g cloud native network functions and to

00:00:13,840 --> 00:00:18,560
orchestrate them

00:00:14,719 --> 00:00:21,840
onto kubernetes the goals of our 5g

00:00:18,560 --> 00:00:24,400
cloud native network demo are threefold

00:00:21,840 --> 00:00:26,240
first we are going to onboard 5g core

00:00:24,400 --> 00:00:29,439
and next gen firewall

00:00:26,240 --> 00:00:31,599
cnfs using onap code next

00:00:29,439 --> 00:00:32,480
we are going to orchestrate those same

00:00:31,599 --> 00:00:36,000
cnfs

00:00:32,480 --> 00:00:37,680
onto kubernetes using onap code

00:00:36,000 --> 00:00:39,360
and finally we are going to use the g

00:00:37,680 --> 00:00:42,320
node b and ue

00:00:39,360 --> 00:00:45,840
emulator to test the 5g core for end to

00:00:42,320 --> 00:00:45,840
end functionality

00:00:45,920 --> 00:00:50,559
first let us look at what it takes to

00:00:48,320 --> 00:00:52,320
evolve to a cloud-native architecture

00:00:50,559 --> 00:00:54,160
on the left-hand side we have a virtual

00:00:52,320 --> 00:00:55,840
machine based architecture that many of

00:00:54,160 --> 00:00:57,360
you may be familiar with

00:00:55,840 --> 00:00:58,960
on the right-hand side you have a cloud

00:00:57,360 --> 00:01:02,079
native architecture

00:00:58,960 --> 00:01:03,680
the key differences are that vnfs on the

00:01:02,079 --> 00:01:04,479
left hand side or virtual network

00:01:03,680 --> 00:01:07,040
functions

00:01:04,479 --> 00:01:09,200
are replaced by cnfs or cloud native

00:01:07,040 --> 00:01:11,040
network functions on the right

00:01:09,200 --> 00:01:13,119
the openstack layer on the left is

00:01:11,040 --> 00:01:14,960
replaced by kubernetes

00:01:13,119 --> 00:01:17,360
we also have a new entity on the right

00:01:14,960 --> 00:01:18,479
hand side called cnas or cloud native

00:01:17,360 --> 00:01:22,560
applications

00:01:18,479 --> 00:01:22,560
which are used for edge computing

00:01:23,600 --> 00:01:27,439
this shows the high level demo

00:01:25,680 --> 00:01:30,960
architecture

00:01:27,439 --> 00:01:31,680
starting from the far left we see the ue

00:01:30,960 --> 00:01:33,840
emulator

00:01:31,680 --> 00:01:34,720
and the g node b emulator these

00:01:33,840 --> 00:01:37,119
communicate

00:01:34,720 --> 00:01:38,079
with the 5g core which is in the middle

00:01:37,119 --> 00:01:40,240
over n1

00:01:38,079 --> 00:01:41,840
n2 and n3 interfaces which are defined

00:01:40,240 --> 00:01:44,799
by 3gpp

00:01:41,840 --> 00:01:46,880
the 5g code itself consists of numerous

00:01:44,799 --> 00:01:50,079
microservices

00:01:46,880 --> 00:01:51,680
the data path goes over the upf

00:01:50,079 --> 00:01:53,920
microservice

00:01:51,680 --> 00:01:55,680
and the output of the upf is the n6

00:01:53,920 --> 00:01:56,560
interface which goes to the next gen

00:01:55,680 --> 00:01:58,320
firewall

00:01:56,560 --> 00:02:01,119
which in turn connects to the data

00:01:58,320 --> 00:02:05,680
network all of these cnfs

00:02:01,119 --> 00:02:07,439
are running on an openshift nfvi cloud

00:02:05,680 --> 00:02:08,879
the management and orchestration layer

00:02:07,439 --> 00:02:12,480
on the top right

00:02:08,879 --> 00:02:15,840
is code from onap which is running on

00:02:12,480 --> 00:02:16,239
a separate kubernetes nfvi cloud and the

00:02:15,840 --> 00:02:20,000
two

00:02:16,239 --> 00:02:22,239
communicate over sd-wan today's demo is

00:02:20,000 --> 00:02:24,000
going to be somewhat simplified all of

00:02:22,239 --> 00:02:26,160
this is going to be in one region

00:02:24,000 --> 00:02:27,760
it's going to be in the university of

00:02:26,160 --> 00:02:30,480
new hampshire interoperability

00:02:27,760 --> 00:02:33,519
lab second we are not going to show the

00:02:30,480 --> 00:02:33,519
next-gen firewall

00:02:34,080 --> 00:02:38,480
last slide before we go to the demo this

00:02:36,640 --> 00:02:40,800
demo has been put together

00:02:38,480 --> 00:02:42,160
through massive collaboration by a large

00:02:40,800 --> 00:02:44,959
number of companies

00:02:42,160 --> 00:02:47,120
and this shows you the various companies

00:02:44,959 --> 00:02:49,920
by the layer that participated in

00:02:47,120 --> 00:02:51,680
all the way from the lab infrastructure

00:02:49,920 --> 00:02:54,000
to the management and orchestration

00:02:51,680 --> 00:02:54,000
layer

00:02:54,160 --> 00:02:58,720
let's start the demo by looking at the

00:02:56,160 --> 00:03:00,720
openshift kubernetes cluster

00:02:58,720 --> 00:03:01,840
we see only one part running there it's

00:03:00,720 --> 00:03:05,040
a database

00:03:01,840 --> 00:03:06,800
so it's virtually empty at this point

00:03:05,040 --> 00:03:08,959
similarly we let's look at the

00:03:06,800 --> 00:03:10,959
deployments and we see that there's only

00:03:08,959 --> 00:03:13,200
one database deployment

00:03:10,959 --> 00:03:14,640
now let's shift over to the ex an

00:03:13,200 --> 00:03:16,640
experimental gui

00:03:14,640 --> 00:03:19,280
for the kubernetes plugin of the onapp

00:03:16,640 --> 00:03:20,319
project and we will start by creating a

00:03:19,280 --> 00:03:22,879
project

00:03:20,319 --> 00:03:23,760
let's call the project 5g core and the

00:03:22,879 --> 00:03:28,000
description

00:03:23,760 --> 00:03:28,000
is it's for 5g core deployment

00:03:28,560 --> 00:03:35,200
next we are going to add a cluster

00:03:32,159 --> 00:03:37,040
provider to this project and a cluster

00:03:35,200 --> 00:03:39,519
provider is a class

00:03:37,040 --> 00:03:41,040
so it can be open shift it could be

00:03:39,519 --> 00:03:44,560
google amazon

00:03:41,040 --> 00:03:47,760
microsoft in this case it's open shift

00:03:44,560 --> 00:03:50,720
now let's add an actual cluster

00:03:47,760 --> 00:03:51,680
to that cluster provider and let's call

00:03:50,720 --> 00:03:56,000
it

00:03:51,680 --> 00:03:59,280
mtl and we're going to import

00:03:56,000 --> 00:04:02,640
a kubernetes settings file so the

00:03:59,280 --> 00:04:05,120
cluster gets registered properly with

00:04:02,640 --> 00:04:05,120
onap

00:04:08,400 --> 00:04:13,120
and we added a label called mtl as well

00:04:11,120 --> 00:04:15,760
now let's create a composite app

00:04:13,120 --> 00:04:17,759
a composite app is nothing but an app

00:04:15,760 --> 00:04:20,799
that further constitutes

00:04:17,759 --> 00:04:22,560
of multiple applications in this case we

00:04:20,799 --> 00:04:25,840
are going to create an ngc

00:04:22,560 --> 00:04:27,440
app and it's in our case it's a

00:04:25,840 --> 00:04:29,199
one-to-one relationship

00:04:27,440 --> 00:04:30,880
the composite app only has one

00:04:29,199 --> 00:04:34,960
application underneath

00:04:30,880 --> 00:04:34,960
which is basically the 5g core

00:04:35,919 --> 00:04:41,360
so we are going to add the

00:04:39,199 --> 00:04:43,199
5g core application so we have

00:04:41,360 --> 00:04:46,800
successfully done that

00:04:43,199 --> 00:04:48,800
now let's add a generic placement intent

00:04:46,800 --> 00:04:51,600
that applies to the entire

00:04:48,800 --> 00:04:51,600
composite app

00:04:55,600 --> 00:04:59,759
this is genetic placement intent for the

00:04:57,840 --> 00:05:02,800
next gen core

00:04:59,759 --> 00:05:04,160
and for this now we can add intents for

00:05:02,800 --> 00:05:05,680
specific

00:05:04,160 --> 00:05:07,600
applications within the composite

00:05:05,680 --> 00:05:09,520
application

00:05:07,600 --> 00:05:10,639
like i said for us it's a one-to-one

00:05:09,520 --> 00:05:13,280
relationship

00:05:10,639 --> 00:05:14,400
so this is going to specify the actual

00:05:13,280 --> 00:05:17,360
intent

00:05:14,400 --> 00:05:19,360
for the nextgen core so here we are

00:05:17,360 --> 00:05:20,400
linking the intent to the label that we

00:05:19,360 --> 00:05:23,440
had provided

00:05:20,400 --> 00:05:24,000
to the openshift cluster and now we are

00:05:23,440 --> 00:05:27,199
going to

00:05:24,000 --> 00:05:32,080
actually deploy the 5g core

00:05:27,199 --> 00:05:36,400
so we are going to deploy the ngc um

00:05:32,080 --> 00:05:36,400
and the description is ngc

00:05:36,840 --> 00:05:41,840
app

00:05:39,360 --> 00:05:43,919
we are going to add the intent so we had

00:05:41,840 --> 00:05:44,720
created the intent previously now we can

00:05:43,919 --> 00:05:49,199
actually

00:05:44,720 --> 00:05:49,199
associate that intent with the

00:05:50,840 --> 00:05:53,840
application

00:05:54,000 --> 00:05:57,520
so let's go ahead and proceed

00:06:00,400 --> 00:06:03,759
and at this point our 5g core should be

00:06:03,039 --> 00:06:05,039
deployed

00:06:03,759 --> 00:06:07,039
we are going to do a little bit of a

00:06:05,039 --> 00:06:09,440
time lapse normally it takes

00:06:07,039 --> 00:06:11,360
several minutes for the parts to come up

00:06:09,440 --> 00:06:14,880
but now you see that all the 5g

00:06:11,360 --> 00:06:18,560
core pods over 30 of them have come up

00:06:14,880 --> 00:06:20,880
now we are going to go to a bot a

00:06:18,560 --> 00:06:23,600
g note b and ue emulator from a company

00:06:20,880 --> 00:06:23,600
called rebaca

00:06:23,680 --> 00:06:28,560
and we are going to run two tests first

00:06:25,759 --> 00:06:31,440
we are going to run a connection request

00:06:28,560 --> 00:06:33,520
test that that goes over the n2

00:06:31,440 --> 00:06:36,560
interface to the amf

00:06:33,520 --> 00:06:38,080
and that one passed successfully now we

00:06:36,560 --> 00:06:40,880
are going to run a ue

00:06:38,080 --> 00:06:48,080
authentication test so let's go ahead

00:06:40,880 --> 00:06:50,160
and run that

00:06:48,080 --> 00:06:52,800
and now you see that the test execution

00:06:50,160 --> 00:06:52,800
has started

00:06:57,120 --> 00:07:02,080
and this test has also executed

00:06:59,759 --> 00:07:04,880
successfully the execution has completed

00:07:02,080 --> 00:07:06,000
the first test 12 tests passed none of

00:07:04,880 --> 00:07:09,199
them failed

00:07:06,000 --> 00:07:11,120
for the connection request test and for

00:07:09,199 --> 00:07:11,840
the second one the ue authentication

00:07:11,120 --> 00:07:15,039
flow

00:07:11,840 --> 00:07:17,039
16 tests passed and none failed

00:07:15,039 --> 00:07:19,360
this demo was created in the open source

00:07:17,039 --> 00:07:21,840
community so if you enjoyed it

00:07:19,360 --> 00:07:22,800
please join us phase three of this demo

00:07:21,840 --> 00:07:25,039
is starting

00:07:22,800 --> 00:07:26,800
in which we will add network slicing and

00:07:25,039 --> 00:07:28,800
the rand component

00:07:26,800 --> 00:07:30,560
we have also provided you with a number

00:07:28,800 --> 00:07:32,800
of additional resources

00:07:30,560 --> 00:07:37,440
which you can review at your leisure

00:07:32,800 --> 00:07:37,440

YouTube URL: https://www.youtube.com/watch?v=SPiLpYjedIU


