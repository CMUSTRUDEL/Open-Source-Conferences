Title: LF Networking: "Building CNFs with FD.io VPP & NSM"
Publication date: 2020-10-23
Playlist: LFN + LF Edge Demo Pavilion ONES 2020
Description: 
	LF Networking: "Building CNFs with FD.io VPP & NSM"
Captions: 
	00:00:00,320 --> 00:00:04,480
hello and welcome in our virtual booth

00:00:02,560 --> 00:00:06,640
today we are going to show you how

00:00:04,480 --> 00:00:08,320
easily you can build your own asm

00:00:06,640 --> 00:00:10,559
compatible cnf

00:00:08,320 --> 00:00:12,160
i am miroslav miku from pantheon tech

00:00:10,559 --> 00:00:12,799
and i am here with my colleague milan

00:00:12,160 --> 00:00:14,559
lancho

00:00:12,799 --> 00:00:17,920
who will guide you over the second half

00:00:14,559 --> 00:00:17,920
of this demonstration

00:00:18,000 --> 00:00:21,039
cnf stands for cloud native network

00:00:20,240 --> 00:00:23,439
function

00:00:21,039 --> 00:00:24,160
you can think of it as any other network

00:00:23,439 --> 00:00:27,119
function like

00:00:24,160 --> 00:00:28,800
router firewall or vpn but following the

00:00:27,119 --> 00:00:30,640
cloud-native architectural and

00:00:28,800 --> 00:00:33,280
operational principles

00:00:30,640 --> 00:00:35,840
including life cycle management agility

00:00:33,280 --> 00:00:37,840
resiliency and observability

00:00:35,840 --> 00:00:39,600
the cnf is usually packaged in a

00:00:37,840 --> 00:00:41,360
container image can be deployed in a

00:00:39,600 --> 00:00:45,120
kubernetes environment and supports

00:00:41,360 --> 00:00:47,600
declarative configuration multiple cnfs

00:00:45,120 --> 00:00:51,280
can be chained or meshed to provide more

00:00:47,600 --> 00:00:51,280
advanced customer network service

00:00:51,600 --> 00:00:54,800
what a network function in a container i

00:00:54,239 --> 00:00:57,600
am in

00:00:54,800 --> 00:00:58,079
where can i get one there you go this is

00:00:57,600 --> 00:01:00,079
the one

00:00:58,079 --> 00:01:02,079
of the fastest data planes in the world

00:01:00,079 --> 00:01:04,000
combined with a declarative intent based

00:01:02,079 --> 00:01:06,080
control plane called legato

00:01:04,000 --> 00:01:08,159
and it's for free waiting for you to hit

00:01:06,080 --> 00:01:10,560
the cube control run command

00:01:08,159 --> 00:01:11,200
with the legato bbp agent image that's

00:01:10,560 --> 00:01:13,040
it

00:01:11,200 --> 00:01:14,320
that's all you have to do to run your

00:01:13,040 --> 00:01:16,400
own cnf

00:01:14,320 --> 00:01:18,880
now you can connect to the cli by

00:01:16,400 --> 00:01:20,080
executing the bppcontrol command inside

00:01:18,880 --> 00:01:23,680
a container

00:01:20,080 --> 00:01:26,159
and when you type show interface uh-oh

00:01:23,680 --> 00:01:28,240
that doesn't seem right there is only a

00:01:26,159 --> 00:01:30,799
local interface in the cnf

00:01:28,240 --> 00:01:32,560
that might work for a shy cnf which only

00:01:30,799 --> 00:01:34,320
wants to talk to itself

00:01:32,560 --> 00:01:38,400
we would probably want one or more

00:01:34,320 --> 00:01:38,400
interfaces to be connected to that cnf

00:01:39,600 --> 00:01:42,880
there are multiple options how to

00:01:41,200 --> 00:01:43,759
provide layer 2 connection between

00:01:42,880 --> 00:01:46,240
containers

00:01:43,759 --> 00:01:48,880
you can use projects like contiv vpp

00:01:46,240 --> 00:01:51,040
multus or network service mesh

00:01:48,880 --> 00:01:53,360
now we will show you how to use network

00:01:51,040 --> 00:01:56,159
service mesh or nsm

00:01:53,360 --> 00:01:57,439
nsm is an official cncf project its

00:01:56,159 --> 00:01:59,759
biggest advantage is

00:01:57,439 --> 00:02:01,920
that you can run it in any kubernetes

00:01:59,759 --> 00:02:03,119
deployment alongside with your preferred

00:02:01,920 --> 00:02:05,200
cni

00:02:03,119 --> 00:02:06,960
it extends the kubernetes network model

00:02:05,200 --> 00:02:08,080
and provides a layer 2 and layer 3

00:02:06,960 --> 00:02:10,640
service mesh for your

00:02:08,080 --> 00:02:10,640
cnfs

00:02:11,760 --> 00:02:16,959
during our cnf journey we have figured

00:02:13,920 --> 00:02:18,959
out that nsn provides an imperative sdk

00:02:16,959 --> 00:02:22,160
for integration with your cnfs

00:02:18,959 --> 00:02:23,440
so we have decided to implement an nsn

00:02:22,160 --> 00:02:25,120
plugin for legato

00:02:23,440 --> 00:02:27,040
which gives you a declarative way of

00:02:25,120 --> 00:02:28,640
configuring the nsm virtual virus

00:02:27,040 --> 00:02:30,560
between cnfs

00:02:28,640 --> 00:02:32,560
but not only that when you combine it

00:02:30,560 --> 00:02:34,640
with your simplest cnf you will get a

00:02:32,560 --> 00:02:36,239
declarative way to configure not only

00:02:34,640 --> 00:02:39,120
the virus between cnfs

00:02:36,239 --> 00:02:40,800
but also the configuration of the cnf

00:02:39,120 --> 00:02:43,360
now that's what we call intent based

00:02:40,800 --> 00:02:43,360
networking

00:02:44,160 --> 00:02:48,000
long story short the plugin sits inside

00:02:46,400 --> 00:02:49,360
the container where you run your

00:02:48,000 --> 00:02:51,200
simplest cnf

00:02:49,360 --> 00:02:53,120
and it is providing the translation in

00:02:51,200 --> 00:02:56,080
between the declarative configuration

00:02:53,120 --> 00:02:58,400
and the imperative nsm sdk

00:02:56,080 --> 00:03:00,480
now please welcome milan lancia who will

00:02:58,400 --> 00:03:02,159
guide you through the demonstration

00:03:00,480 --> 00:03:04,480
for example we have a simple chain

00:03:02,159 --> 00:03:06,000
topology to be deployed inside the

00:03:04,480 --> 00:03:08,319
kubernetes cluster

00:03:06,000 --> 00:03:09,120
here on the left side we see the emf

00:03:08,319 --> 00:03:11,760
file for

00:03:09,120 --> 00:03:13,200
the definition of the routing for nsm so

00:03:11,760 --> 00:03:16,400
it's just two rules

00:03:13,200 --> 00:03:16,800
one the routing is definitely suggested

00:03:16,400 --> 00:03:20,080
that

00:03:16,800 --> 00:03:21,280
the web server is an end point for cnf

00:03:20,080 --> 00:03:23,840
not 44

00:03:21,280 --> 00:03:26,400
and cnn 44 is an end point for the

00:03:23,840 --> 00:03:28,640
client port

00:03:26,400 --> 00:03:30,239
by the way inside the repository with

00:03:28,640 --> 00:03:32,720
the demo there is a

00:03:30,239 --> 00:03:35,360
readme file which you can you can then

00:03:32,720 --> 00:03:37,519
follow to try it out for yourself

00:03:35,360 --> 00:03:38,720
uh and actually first couple of steps

00:03:37,519 --> 00:03:42,000
tell you that you need to have

00:03:38,720 --> 00:03:45,200
kubernetes uh deployed together with

00:03:42,000 --> 00:03:46,799
nsm but it has already been done before

00:03:45,200 --> 00:03:48,560
recording

00:03:46,799 --> 00:03:50,080
but but in the redmi file you can find

00:03:48,560 --> 00:03:52,080
links to to the documentation of

00:03:50,080 --> 00:03:55,519
kubernetes and msm to learn

00:03:52,080 --> 00:03:56,400
uh how to deploy each all right so now

00:03:55,519 --> 00:03:58,560
let's start

00:03:56,400 --> 00:03:59,599
deploying demo files there are a couple

00:03:58,560 --> 00:04:03,120
of them

00:03:59,599 --> 00:04:06,239
so um first we actually need to deploy

00:04:03,120 --> 00:04:08,239
uh crd controller for our cnfs so

00:04:06,239 --> 00:04:09,920
next once we have crd controller we can

00:04:08,239 --> 00:04:12,560
start deploying our

00:04:09,920 --> 00:04:14,720
our cnfs and ports so first we will

00:04:12,560 --> 00:04:17,199
deploy web server actually inside of

00:04:14,720 --> 00:04:18,880
html files you can see the uh the

00:04:17,199 --> 00:04:22,000
clarity of

00:04:18,880 --> 00:04:22,560
configuration which consists contains

00:04:22,000 --> 00:04:25,520
just that

00:04:22,560 --> 00:04:28,400
nsm endpoint and it is inside an

00:04:25,520 --> 00:04:31,440
instance of our crd

00:04:28,400 --> 00:04:33,840
now once the

00:04:31,440 --> 00:04:35,840
once we deploy uh web server what

00:04:33,840 --> 00:04:40,000
happens you can see on the right side

00:04:35,840 --> 00:04:42,240
uh so the products created uh

00:04:40,000 --> 00:04:44,320
it includes the vpp which will be the

00:04:42,240 --> 00:04:46,880
cover of http server but also

00:04:44,320 --> 00:04:48,400
nsm agent that receives that

00:04:46,880 --> 00:04:50,400
configuration and

00:04:48,400 --> 00:04:52,320
based on that configuration it will

00:04:50,400 --> 00:04:55,520
advertise the end point to the

00:04:52,320 --> 00:04:59,600
nsm control plane next we deploy

00:04:55,520 --> 00:05:01,759
cnf not 44. uh in in html

00:04:59,600 --> 00:05:02,960
uh definition you can see that there is

00:05:01,759 --> 00:05:05,440
an uh

00:05:02,960 --> 00:05:06,960
definition of the end point to which the

00:05:05,440 --> 00:05:08,720
the client will connect

00:05:06,960 --> 00:05:10,560
that there is the nsm client that will

00:05:08,720 --> 00:05:12,800
connect to the web server

00:05:10,560 --> 00:05:14,240
and then there is now highlighted uh the

00:05:12,800 --> 00:05:16,160
nut configuration

00:05:14,240 --> 00:05:17,520
and that not configuration references

00:05:16,160 --> 00:05:20,320
those interfaces

00:05:17,520 --> 00:05:21,680
by their logical names so so the same

00:05:20,320 --> 00:05:23,759
nut configuration could be used

00:05:21,680 --> 00:05:24,800
regardless of what wiring technology we

00:05:23,759 --> 00:05:28,160
use

00:05:24,800 --> 00:05:31,759
but in this case it's it's nsm

00:05:28,160 --> 00:05:35,280
right so once this is deployed

00:05:31,759 --> 00:05:37,919
uh the nsm agent of nat 44

00:05:35,280 --> 00:05:39,360
will request connection from the nsm

00:05:37,919 --> 00:05:41,840
control plane

00:05:39,360 --> 00:05:42,880
uh the nsn control plane will look at

00:05:41,840 --> 00:05:44,560
the routing

00:05:42,880 --> 00:05:46,080
and will determine that it should

00:05:44,560 --> 00:05:48,320
connect to the web server

00:05:46,080 --> 00:05:49,759
both once mamif interface because they

00:05:48,320 --> 00:05:52,160
are vpp based

00:05:49,759 --> 00:05:54,080
and it will create those interfaces that

00:05:52,160 --> 00:05:56,240
will connect to each other directly

00:05:54,080 --> 00:05:58,479
without even having to go through the

00:05:56,240 --> 00:06:00,000
nsm data plan so it's a very efficient

00:05:58,479 --> 00:06:02,720
connection

00:06:00,000 --> 00:06:04,319
in this case and we can use the vppcli

00:06:02,720 --> 00:06:06,720
to confirm that

00:06:04,319 --> 00:06:07,919
those interfaces have been already

00:06:06,720 --> 00:06:12,479
created on both

00:06:07,919 --> 00:06:15,759
ends and finally we will deploy client

00:06:12,479 --> 00:06:18,400
client port with the call so in its

00:06:15,759 --> 00:06:20,160
configuration uh there is just uh this

00:06:18,400 --> 00:06:23,520
nsn client definition

00:06:20,160 --> 00:06:25,840
that will connect to an cnf not 44

00:06:23,520 --> 00:06:27,680
and also there is a route for http

00:06:25,840 --> 00:06:28,800
requests to be directed through that

00:06:27,680 --> 00:06:30,960
interface

00:06:28,800 --> 00:06:32,319
through this basically through this data

00:06:30,960 --> 00:06:33,120
plan connection rather than going

00:06:32,319 --> 00:06:35,520
through the

00:06:33,120 --> 00:06:37,120
primary interface which is created by

00:06:35,520 --> 00:06:40,639
cni

00:06:37,120 --> 00:06:41,039
uh and so once we deploy the client uh

00:06:40,639 --> 00:06:44,000
the

00:06:41,039 --> 00:06:45,919
the nsm agent of the client will request

00:06:44,000 --> 00:06:49,199
connection from the

00:06:45,919 --> 00:06:50,400
nsm control plane uh the nsn control

00:06:49,199 --> 00:06:52,000
plane will determine that it should

00:06:50,400 --> 00:06:54,240
connect to not 44

00:06:52,000 --> 00:06:56,960
but since client is a linux application

00:06:54,240 --> 00:06:59,120
uh that the call is a linux application

00:06:56,960 --> 00:07:01,759
it wants tab interface and tab interface

00:06:59,120 --> 00:07:04,319
cannot be connected to memis directly so

00:07:01,759 --> 00:07:07,919
both client and not 44 will connect to

00:07:04,319 --> 00:07:10,800
nsm data plane and there they will be

00:07:07,919 --> 00:07:12,400
linked together using l2x connect

00:07:10,800 --> 00:07:15,520
connection

00:07:12,400 --> 00:07:17,520
and with that we have the chain ready we

00:07:15,520 --> 00:07:18,880
can test it using the http request sent

00:07:17,520 --> 00:07:21,919
from the client

00:07:18,880 --> 00:07:24,800
as you can see we have received the

00:07:21,919 --> 00:07:26,400
http response from the server thank you

00:07:24,800 --> 00:07:28,479
very much for your attention

00:07:26,400 --> 00:07:30,720
we'll be glad to hear your feedback you

00:07:28,479 --> 00:07:37,039
can find us on linkedin twitter or just

00:07:30,720 --> 00:07:37,039

YouTube URL: https://www.youtube.com/watch?v=Az2AiKLkb4k


