Title: Keynote: Adapting Kubernetes for Machine Learning Workflows - Ania Musial & Keith Laban, Bloomberg
Publication date: 2018-10-11
Playlist: Open FinTech Forum 2018 - NYC
Description: 
	Keynote: Adapting Kubernetes for Machine Learning Workflows - Ania Musial, Senior Software Engineer & Keith Laban, Senior Infrastructure Engineer, BloombergÂ 

The Bloomberg Professional Service (aka "the Terminal") provides data, analytics, news, information and communication to professionals in business, finance, government, and philanthropy. Through our internal machine learning platform, Bloomberg is applying advanced AI and GPU-accelerated compute to dozens of domains such as NLP, computer vision, time-series analysis and personalization.

In this talk, we'll discuss how we adapted Kubernetes to support a diverse set of machine learning workloads; how an ecosystem of data connectors enables rich collaboration; how we address multi-tenancy, data security and privacy; and finally, how we support heterogenous compute requirements and hardware acceleration.

About Keith Laban
Keith Laban is a senior compute infrastructure engineer at Bloomberg. He works on leveraging Kubernetes as the building blocks of a machine learning platform. Keith has given internal talks at Bloomberg about Kubernetes and building custom controllers (operators). Keith has worked on addressing problems such as multi-tenant environments and custom workflows using custom resources. For his last 6 years, Keith has worked on various other infrastructure projects, such as search infrastructure (Solr) and the news backend for bloomberg.com.

About Ania Musial
Ania Musial is a Senior Software Engineer in the ML Platform team at Bloomberg, focusing on components required for a more robust machine learning model development lifecycle. Previous projects in her 9 year tenure at Bloomberg include building recommendation system infrastructure, development of real-time news applications, and advocacy for developer needs. She has given internal talks ranging from model deployment logistics to showcasing engineering departments for new hire orientation.
Resources/links: https://www.linkedin.com/in/aniamusial/
Captions: 
	00:00:00,000 --> 00:00:04,950
hi thanks everybody so I'm here to talk

00:00:02,580 --> 00:00:07,200
to you about kubernetes for machine

00:00:04,950 --> 00:00:09,330
learning workflows and just a quick note

00:00:07,200 --> 00:00:11,160
about the dream team here sokeep and I

00:00:09,330 --> 00:00:13,320
are both senior software engineers at

00:00:11,160 --> 00:00:15,150
Bloomberg and we have about combined 15

00:00:13,320 --> 00:00:16,920
years of tenure there so on a daily

00:00:15,150 --> 00:00:19,080
basis we work on the same internal

00:00:16,920 --> 00:00:20,010
machine learning platform but we do sit

00:00:19,080 --> 00:00:22,130
in two different parts of the

00:00:20,010 --> 00:00:24,449
engineering department which kind of

00:00:22,130 --> 00:00:26,189
encourages a healthy balance between the

00:00:24,449 --> 00:00:27,810
minds of compute researchers and the

00:00:26,189 --> 00:00:30,060
minds of kind of AI researchers or at

00:00:27,810 --> 00:00:31,830
least it's supposed to and a shameless

00:00:30,060 --> 00:00:33,090
plug if you're interested in learning a

00:00:31,830 --> 00:00:34,440
little bit more about what we do in data

00:00:33,090 --> 00:00:35,910
science you can take a look at our blog

00:00:34,440 --> 00:00:37,440
for things about you know the kinds of

00:00:35,910 --> 00:00:39,200
publications that we have or kind of

00:00:37,440 --> 00:00:41,940
contributions we have an open source

00:00:39,200 --> 00:00:43,649
cool so our outline for today first

00:00:41,940 --> 00:00:45,090
we'll take a look at our ecosystem at

00:00:43,649 --> 00:00:46,920
Bloomberg and what kinds of data and

00:00:45,090 --> 00:00:48,809
applications we have available to us and

00:00:46,920 --> 00:00:50,700
then I'll turn it over to Keith who will

00:00:48,809 --> 00:00:52,410
tell you a little bit more about how

00:00:50,700 --> 00:00:53,550
we've adapted kubernetes to solve the

00:00:52,410 --> 00:00:54,629
kind of challenges that we have with

00:00:53,550 --> 00:00:58,500
machine learning these kinds of

00:00:54,629 --> 00:01:00,059
applications so right so let's talk a

00:00:58,500 --> 00:01:01,530
little bit about machine learning at

00:01:00,059 --> 00:01:04,290
Bloomberg and what kinds of data and

00:01:01,530 --> 00:01:06,390
things we have to work with so two in

00:01:04,290 --> 00:01:08,280
our clients daily workflows message and

00:01:06,390 --> 00:01:09,750
communication tools are a key part of

00:01:08,280 --> 00:01:11,580
the spread of information within the

00:01:09,750 --> 00:01:13,260
industry you can see this really with

00:01:11,580 --> 00:01:14,790
those volume of of messaging and

00:01:13,260 --> 00:01:16,530
communication data that's increased over

00:01:14,790 --> 00:01:18,960
the past ten year time frame or so and

00:01:16,530 --> 00:01:21,240
this volume of information has increased

00:01:18,960 --> 00:01:23,610
and become so antenna belen fact that

00:01:21,240 --> 00:01:26,310
every part of the trading workflow from

00:01:23,610 --> 00:01:27,840
portfolio selection to risk analysis to

00:01:26,310 --> 00:01:30,060
strategy development and really

00:01:27,840 --> 00:01:31,860
execution has been automated somewhere

00:01:30,060 --> 00:01:34,320
by someone using machine learning in the

00:01:31,860 --> 00:01:35,640
past like two or three years or so so

00:01:34,320 --> 00:01:37,140
the markets are really getting much more

00:01:35,640 --> 00:01:38,579
efficient and time to price with this

00:01:37,140 --> 00:01:41,579
new information and it's getting shorter

00:01:38,579 --> 00:01:42,990
due to automation so one such kind of

00:01:41,579 --> 00:01:46,110
automation you might think about is in

00:01:42,990 --> 00:01:48,090
reaction to events so if you make the

00:01:46,110 --> 00:01:49,829
assumption events move financial

00:01:48,090 --> 00:01:52,649
instruments then our questions really

00:01:49,829 --> 00:01:54,869
become how do I figure out which events

00:01:52,649 --> 00:01:56,579
move which financial instruments and how

00:01:54,869 --> 00:01:59,189
do I figure out the occurrence of such

00:01:56,579 --> 00:02:01,320
events of interest so here we have a

00:01:59,189 --> 00:02:03,600
timeline of an SEC announcement back in

00:02:01,320 --> 00:02:05,430
like 2010 or so and they published it on

00:02:03,600 --> 00:02:07,350
their website which was really unusual

00:02:05,430 --> 00:02:08,640
at the time and people weren't really

00:02:07,350 --> 00:02:10,920
looking at it I think they look at it a

00:02:08,640 --> 00:02:13,110
little bit more today but suffice to say

00:02:10,920 --> 00:02:13,450
it was a little bit unusual and this

00:02:13,110 --> 00:02:15,730
price

00:02:13,450 --> 00:02:17,050
reaction here by the bloomberg headline

00:02:15,730 --> 00:02:19,690
was really precipitated by the bloomberg

00:02:17,050 --> 00:02:23,349
headline so all they really did was they

00:02:19,690 --> 00:02:25,780
reenact that this a sec was had a

00:02:23,349 --> 00:02:28,060
lawsuit of sorts the New York Times in

00:02:25,780 --> 00:02:30,430
this picture only to show that commodity

00:02:28,060 --> 00:02:32,440
news or news that most people see rarely

00:02:30,430 --> 00:02:34,300
if ever actually impacts the price of

00:02:32,440 --> 00:02:36,160
stock prices because it's typically you

00:02:34,300 --> 00:02:42,310
know minutes or days or hours late

00:02:36,160 --> 00:02:43,860
things like that so so this actually

00:02:42,310 --> 00:02:46,360
happened in a slightly more modern take

00:02:43,860 --> 00:02:48,519
you know the impact of social media is a

00:02:46,360 --> 00:02:50,319
wonderful accessible of rumors and the

00:02:48,519 --> 00:02:52,690
potential for gaining a big advantage of

00:02:50,319 --> 00:02:54,340
the market as somebody you know

00:02:52,690 --> 00:02:56,500
mistakenly tweet it on the AP that the

00:02:54,340 --> 00:02:58,810
Barack Obama was injured and the markets

00:02:56,500 --> 00:03:00,040
really react you really quickly and if

00:02:58,810 --> 00:03:01,480
you're having a little bit of deja vu

00:03:00,040 --> 00:03:02,829
over the past couple of slides you know

00:03:01,480 --> 00:03:05,880
maybe something rings about with Elon

00:03:02,829 --> 00:03:08,769
Musk over the past couple of weeks or so

00:03:05,880 --> 00:03:10,780
so for Bloomberg at being a you know

00:03:08,769 --> 00:03:13,090
financial news company at the center of

00:03:10,780 --> 00:03:14,590
the industry our entire business is

00:03:13,090 --> 00:03:16,060
really contingent on the ability to

00:03:14,590 --> 00:03:18,940
create these applications that are

00:03:16,060 --> 00:03:20,739
really you know scalable smarter really

00:03:18,940 --> 00:03:22,329
focused and you know correct for her

00:03:20,739 --> 00:03:24,579
customers and I've hinted at a little

00:03:22,329 --> 00:03:26,049
bit of it so far but you know justice

00:03:24,579 --> 00:03:27,880
for our users this really means taking

00:03:26,049 --> 00:03:30,280
advantage of sort of automation wherever

00:03:27,880 --> 00:03:31,870
possible and here are a couple different

00:03:30,280 --> 00:03:33,850
examples you know we have the the news

00:03:31,870 --> 00:03:35,319
applications as well as you know the

00:03:33,850 --> 00:03:37,000
ability to extract events that are

00:03:35,319 --> 00:03:39,790
happening externally or industry

00:03:37,000 --> 00:03:43,750
increasing relevancy of results and so

00:03:39,790 --> 00:03:45,400
on and so forth cool so clearly there's

00:03:43,750 --> 00:03:47,620
an enormous scope for machine learning

00:03:45,400 --> 00:03:49,090
and a wealth of data at Bloomberg but

00:03:47,620 --> 00:03:50,440
let's take stock and kind of dive in of

00:03:49,090 --> 00:03:52,120
the requirements than it might take to

00:03:50,440 --> 00:03:53,319
support some sort of a lifecycle for

00:03:52,120 --> 00:03:54,489
like a machine learning model or to

00:03:53,319 --> 00:03:57,970
develop some sort of machine learning

00:03:54,489 --> 00:03:59,650
based software so machine learning based

00:03:57,970 --> 00:04:01,540
systems are developing what I see is

00:03:59,650 --> 00:04:02,799
quite a challenging a situation at

00:04:01,540 --> 00:04:04,569
Bloomberg or you know elsewhere in a

00:04:02,799 --> 00:04:06,670
large enterprise and this really comes

00:04:04,569 --> 00:04:07,630
from and these these challenges are

00:04:06,670 --> 00:04:10,000
really driven by the different

00:04:07,630 --> 00:04:11,829
priorities for different stakeholders so

00:04:10,000 --> 00:04:13,569
first and foremost you know for our

00:04:11,829 --> 00:04:15,370
customers we really value privacy and

00:04:13,569 --> 00:04:16,510
uptime and stability for the service

00:04:15,370 --> 00:04:18,549
that we provide via the Bloomberg

00:04:16,510 --> 00:04:20,289
professional terminal and there's really

00:04:18,549 --> 00:04:22,960
little room for error and really little

00:04:20,289 --> 00:04:24,220
room for a be testing as well from an

00:04:22,960 --> 00:04:26,200
engineering standpoint you know we'd

00:04:24,220 --> 00:04:26,500
really like to support these customers

00:04:26,200 --> 00:04:28,450
as well

00:04:26,500 --> 00:04:30,340
as possible and this really means having

00:04:28,450 --> 00:04:32,560
the ability to you know seamlessly scale

00:04:30,340 --> 00:04:35,080
the less operational burden you know the

00:04:32,560 --> 00:04:36,730
fewer if you're less room for for making

00:04:35,080 --> 00:04:38,020
manual mistakes the better and the

00:04:36,730 --> 00:04:39,490
ability to kind of work with me within a

00:04:38,020 --> 00:04:41,830
team and share ideas is really great as

00:04:39,490 --> 00:04:43,420
well and so with the ml practitioners

00:04:41,830 --> 00:04:44,860
that sit within the engineering

00:04:43,420 --> 00:04:47,140
department this really is only

00:04:44,860 --> 00:04:48,370
exacerbated I really want to this is

00:04:47,140 --> 00:04:49,930
really crucial because the last time

00:04:48,370 --> 00:04:51,700
that we spent building infrastructure

00:04:49,930 --> 00:04:53,470
the more time you can spend really um

00:04:51,700 --> 00:04:54,940
you know looking at the the latest

00:04:53,470 --> 00:04:56,530
research or evaluating ideas that you've

00:04:54,940 --> 00:04:59,890
seen a conference and so on and so forth

00:04:56,530 --> 00:05:02,080
so let's say that a product manager

00:04:59,890 --> 00:05:03,490
comes up to you and you'd like to you

00:05:02,080 --> 00:05:04,810
know they posit a new feature from one

00:05:03,490 --> 00:05:07,540
of these applications or they have a new

00:05:04,810 --> 00:05:09,310
idea for an application so these are the

00:05:07,540 --> 00:05:11,830
kinds of problems that you'd really you

00:05:09,310 --> 00:05:13,480
know like to be focusing your time on a

00:05:11,830 --> 00:05:14,680
fear or task with one of these with one

00:05:13,480 --> 00:05:17,380
of these solutions that you have to

00:05:14,680 --> 00:05:19,030
develop so what does your your data look

00:05:17,380 --> 00:05:21,250
like what kind of features can you glean

00:05:19,030 --> 00:05:23,410
from your data what kinds of algorithms

00:05:21,250 --> 00:05:25,570
are best suited for this problem what

00:05:23,410 --> 00:05:27,310
kinds of parameters can I tweak and once

00:05:25,570 --> 00:05:29,830
I've deployed an application when is it

00:05:27,310 --> 00:05:32,050
really appropriate to update my model so

00:05:29,830 --> 00:05:33,190
that it still accurately reflects the

00:05:32,050 --> 00:05:35,140
kinds of data they had trained it on

00:05:33,190 --> 00:05:36,910
when I was in development so you might

00:05:35,140 --> 00:05:38,260
notice here that there's an implicit

00:05:36,910 --> 00:05:40,060
assumption that you know all the

00:05:38,260 --> 00:05:42,430
infrastructure that you need is readily

00:05:40,060 --> 00:05:43,390
available for you to use but that's not

00:05:42,430 --> 00:05:44,950
always the case and some of these

00:05:43,390 --> 00:05:47,400
questions are much more difficult to

00:05:44,950 --> 00:05:49,720
answer than others

00:05:47,400 --> 00:05:52,060
so sometimes we had some stumbling

00:05:49,720 --> 00:05:53,530
blocks along the way and some things are

00:05:52,060 --> 00:05:55,419
more difficult than others right so in a

00:05:53,530 --> 00:05:56,890
large enough company a data ownership

00:05:55,419 --> 00:05:58,320
and access can be you know fairly

00:05:56,890 --> 00:06:00,550
difficult to become quite complicated

00:05:58,320 --> 00:06:02,110
and hopefully you've mastered some sort

00:06:00,550 --> 00:06:03,729
of transferable skills by using open

00:06:02,110 --> 00:06:05,470
source tool kits such as psyche or

00:06:03,729 --> 00:06:07,330
tensor flow or Jupiter or things like

00:06:05,470 --> 00:06:08,620
that but it's not always the easiest to

00:06:07,330 --> 00:06:11,200
kind of install and become operational

00:06:08,620 --> 00:06:12,690
develop depending on your the maturity

00:06:11,200 --> 00:06:15,310
of your development environment

00:06:12,690 --> 00:06:16,870
and compute power is not not completely

00:06:15,310 --> 00:06:18,250
unlimited as so sometimes you have to

00:06:16,870 --> 00:06:19,630
schedule these workflows in a sane way

00:06:18,250 --> 00:06:21,700
and not really you know annoy your

00:06:19,630 --> 00:06:23,590
neighbor too much so from an

00:06:21,700 --> 00:06:24,490
infrastructure perspective these are the

00:06:23,590 --> 00:06:26,710
questions that you'd really like to

00:06:24,490 --> 00:06:27,760
avoid having to answer but too often

00:06:26,710 --> 00:06:29,350
these are the things that kind of like

00:06:27,760 --> 00:06:30,850
take away too much time that you spend

00:06:29,350 --> 00:06:33,010
out you know building up and ultimately

00:06:30,850 --> 00:06:34,870
the efficiency of your workflows and the

00:06:33,010 --> 00:06:36,729
accuracy of your models really depends

00:06:34,870 --> 00:06:38,490
on the infrastructure that you have in

00:06:36,729 --> 00:06:40,129
the tools that you have available so

00:06:38,490 --> 00:06:41,989
once you settle

00:06:40,129 --> 00:06:43,219
occasionally compromise on some workflow

00:06:41,989 --> 00:06:45,679
for the problem that you're working on

00:06:43,219 --> 00:06:47,059
you go into what I refer to as the

00:06:45,679 --> 00:06:48,919
machine learning model development

00:06:47,059 --> 00:06:51,169
lifecycle and it looks a little bit like

00:06:48,919 --> 00:06:52,519
this it's a big infinite loop so on the

00:06:51,169 --> 00:06:53,929
left hand side we have what we referred

00:06:52,519 --> 00:06:55,819
to as kind of the training process or

00:06:53,929 --> 00:06:57,979
this offline procedure and the right

00:06:55,819 --> 00:06:58,939
side we have any other online process or

00:06:57,979 --> 00:07:01,939
you know what's serving actually

00:06:58,939 --> 00:07:03,409
predictions so on the left again we kind

00:07:01,939 --> 00:07:06,289
of have our task we define our business

00:07:03,409 --> 00:07:08,179
problem we gather a bunch of data we run

00:07:06,289 --> 00:07:09,559
training processes over a model you know

00:07:08,179 --> 00:07:12,349
maybe some neural networks maybe some

00:07:09,559 --> 00:07:14,029
sort of psychic models we evaluate it we

00:07:12,349 --> 00:07:16,069
go kind of an infinite loop on the left

00:07:14,029 --> 00:07:17,719
hand side and so you you know exhaust

00:07:16,069 --> 00:07:18,949
and repeat your resources and maybe at

00:07:17,719 --> 00:07:20,779
some point you kind of hit your mouth to

00:07:18,949 --> 00:07:21,800
capacity or you hit a deadline that you

00:07:20,779 --> 00:07:24,139
have to go and actually publish

00:07:21,800 --> 00:07:25,669
something for production so when it's

00:07:24,139 --> 00:07:27,379
good enough you go to the right hand

00:07:25,669 --> 00:07:28,669
side and then you publish something you

00:07:27,379 --> 00:07:30,889
release it in some sort of constraint

00:07:28,669 --> 00:07:32,689
manner you monitor it until it's time to

00:07:30,889 --> 00:07:34,129
go to left hand side to iterate on some

00:07:32,689 --> 00:07:37,519
new ideas are kind of reevaluate your

00:07:34,129 --> 00:07:39,589
task at hand so the question is how do

00:07:37,519 --> 00:07:41,149
we really enable the researchers to

00:07:39,589 --> 00:07:42,860
really focus on those how question the

00:07:41,149 --> 00:07:44,589
why questions earlier not on how

00:07:42,860 --> 00:07:47,689
questions that take away too much time

00:07:44,589 --> 00:07:49,249
so I leave you with some ideas here and

00:07:47,689 --> 00:07:50,569
this is the part where I kind of kick it

00:07:49,249 --> 00:07:52,490
over to Keith to tell you how we've

00:07:50,569 --> 00:07:55,569
adapted kubernetes to achieve is kind of

00:07:52,490 --> 00:07:55,569
Nirvana for these problems

00:07:56,889 --> 00:08:02,089
Thanks fine yeah yeah okay

00:08:00,409 --> 00:08:05,740
so I'm gonna talk a little bit about

00:08:02,089 --> 00:08:08,269
kubernetes from sort of a high level and

00:08:05,740 --> 00:08:09,800
talk about why we thought it was a

00:08:08,269 --> 00:08:11,959
really good fit for the machine learning

00:08:09,800 --> 00:08:13,729
problems that Anja sort of brought up

00:08:11,959 --> 00:08:17,059
here but just to give you some

00:08:13,729 --> 00:08:19,639
background on this we started this

00:08:17,059 --> 00:08:22,819
project like two and a half three years

00:08:19,639 --> 00:08:24,529
ago before it was really common in the

00:08:22,819 --> 00:08:27,679
community to be running machine learning

00:08:24,529 --> 00:08:30,439
on kubernetes the way that you sort of

00:08:27,679 --> 00:08:32,630
see a bunch of ideas in the community

00:08:30,439 --> 00:08:35,419
sort of converging right now so it's

00:08:32,630 --> 00:08:37,419
been cool to follow along and and see

00:08:35,419 --> 00:08:44,180
how everyone is sort of interpreting

00:08:37,419 --> 00:08:47,000
this sort of solution so let's start

00:08:44,180 --> 00:08:49,339
with the obligatory what is kubernetes

00:08:47,000 --> 00:08:51,199
website quote kubernetes is an

00:08:49,339 --> 00:08:53,130
open-source system for automating

00:08:51,199 --> 00:08:55,830
deployment scaling and that

00:08:53,130 --> 00:08:57,000
of containerized applications maybe

00:08:55,830 --> 00:08:59,880
you've seen this before maybe you're

00:08:57,000 --> 00:09:01,290
familiar with it but if you're not what

00:08:59,880 --> 00:09:03,830
I want you to take away from this is

00:09:01,290 --> 00:09:06,990
that kubernetes is really good at

00:09:03,830 --> 00:09:09,120
letting application developers work on

00:09:06,990 --> 00:09:12,210
their applications and then allowing

00:09:09,120 --> 00:09:14,700
them to deploy their software without

00:09:12,210 --> 00:09:17,400
having to think about infrastructure by

00:09:14,700 --> 00:09:19,740
putting them into their application into

00:09:17,400 --> 00:09:22,200
sort of a container or like a zipped

00:09:19,740 --> 00:09:26,850
application which they can ship into the

00:09:22,200 --> 00:09:28,590
cloud so from a really high level your

00:09:26,850 --> 00:09:31,410
usage with kubernetes might look

00:09:28,590 --> 00:09:33,810
something like this you have a user will

00:09:31,410 --> 00:09:37,650
call her Katy and she wants to submit

00:09:33,810 --> 00:09:40,440
some API resource into kubernetes so she

00:09:37,650 --> 00:09:42,810
does this using coops ETL which is like

00:09:40,440 --> 00:09:45,000
the command line interface and that was

00:09:42,810 --> 00:09:46,200
the API server and then in the

00:09:45,000 --> 00:09:48,180
background there's this thing called a

00:09:46,200 --> 00:09:51,030
controller which watches for the

00:09:48,180 --> 00:09:53,610
creation of these resource types or

00:09:51,030 --> 00:09:56,310
updates these resource types and it sort

00:09:53,610 --> 00:09:59,430
of kicks off this life cycle and the

00:09:56,310 --> 00:10:00,990
controller basically says what is the

00:09:59,430 --> 00:10:02,520
new desired state of the world then we

00:10:00,990 --> 00:10:05,910
compare this to the current state of the

00:10:02,520 --> 00:10:08,550
world and then reconcile this by sending

00:10:05,910 --> 00:10:10,470
a list of updates back to the API server

00:10:08,550 --> 00:10:12,990
and actually in the real world there's

00:10:10,470 --> 00:10:15,500
many controllers that work on different

00:10:12,990 --> 00:10:19,920
types of resources in the kubernetes

00:10:15,500 --> 00:10:22,020
ecosystem and eventually a pod is going

00:10:19,920 --> 00:10:24,480
to get created and kubernetes and the

00:10:22,020 --> 00:10:28,350
pod is sort of the lowest level thing

00:10:24,480 --> 00:10:29,850
that can get created which will run on a

00:10:28,350 --> 00:10:31,890
server and the pod contains the

00:10:29,850 --> 00:10:34,320
container which should be running and

00:10:31,890 --> 00:10:38,280
the API server will schedule this pod

00:10:34,320 --> 00:10:41,100
onto a node or a server for you so let's

00:10:38,280 --> 00:10:44,220
look really quick at a core kubernetes

00:10:41,100 --> 00:10:46,760
type in this yellow format this is a

00:10:44,220 --> 00:10:49,560
deployment for running your application

00:10:46,760 --> 00:10:54,150
in kubernetes and it's sort of an always

00:10:49,560 --> 00:10:56,580
up type of deployment so first we'll

00:10:54,150 --> 00:10:58,530
look at the type meta this is just sort

00:10:56,580 --> 00:11:02,490
of defining the namespace and the kind

00:10:58,530 --> 00:11:06,660
of this gamal that we're looking at next

00:11:02,490 --> 00:11:06,810
is the specification and that's sort of

00:11:06,660 --> 00:11:09,300
the

00:11:06,810 --> 00:11:11,310
properties of the deployment here we're

00:11:09,300 --> 00:11:15,330
saying we want a replication factor of

00:11:11,310 --> 00:11:17,760
three and what we want replicated is

00:11:15,330 --> 00:11:20,820
this pod template or pod spec template

00:11:17,760 --> 00:11:22,560
of some version of nginx and that will

00:11:20,820 --> 00:11:24,630
be replicated three times so what's

00:11:22,560 --> 00:11:26,460
really happening here is when we create

00:11:24,630 --> 00:11:28,680
this gamal there's a controller in the

00:11:26,460 --> 00:11:30,360
background that reacts to the creation

00:11:28,680 --> 00:11:32,310
of this and says okay I see that there

00:11:30,360 --> 00:11:34,410
should be three pods and it goes creates

00:11:32,310 --> 00:11:38,070
three pods and make sure that they're

00:11:34,410 --> 00:11:40,980
all there so inherently gamal is

00:11:38,070 --> 00:11:43,200
declarative and reproducible and human

00:11:40,980 --> 00:11:45,120
readable which is great and it also

00:11:43,200 --> 00:11:47,640
gives us a bunch of benefits of

00:11:45,120 --> 00:11:49,170
kubernetes right like hardware and

00:11:47,640 --> 00:11:50,430
difference the application developer

00:11:49,170 --> 00:11:53,550
didn't need to think about what server

00:11:50,430 --> 00:11:54,660
was running on the API server just kind

00:11:53,550 --> 00:11:57,440
of scheduled it for you

00:11:54,660 --> 00:11:59,880
you get free monitoring for like CPU and

00:11:57,440 --> 00:12:01,410
memory metrics from docker and

00:11:59,880 --> 00:12:04,260
kubernetes and if you add other

00:12:01,410 --> 00:12:06,960
open-source software like Prometheus you

00:12:04,260 --> 00:12:09,210
can get application metrics you get

00:12:06,960 --> 00:12:11,640
replication so like guaranteed uptime

00:12:09,210 --> 00:12:13,170
from that replication number with the

00:12:11,640 --> 00:12:17,370
minimal amount of work you can add auto

00:12:13,170 --> 00:12:19,470
scaling and through other open-source

00:12:17,370 --> 00:12:22,400
libraries like SEO you can add like

00:12:19,470 --> 00:12:26,820
service mesh for service to service

00:12:22,400 --> 00:12:28,080
security so right I haven't really

00:12:26,820 --> 00:12:29,760
talked about machine learning at all

00:12:28,080 --> 00:12:31,980
I've just talked about some benefits of

00:12:29,760 --> 00:12:35,160
kubernetes so would it be really cool if

00:12:31,980 --> 00:12:37,020
we can marry these two properties

00:12:35,160 --> 00:12:41,190
together and make something that speaks

00:12:37,020 --> 00:12:43,740
ml but also takes advantage of all the

00:12:41,190 --> 00:12:45,330
good of kubernetes so we've done this

00:12:43,740 --> 00:12:49,050
with something called custom resources

00:12:45,330 --> 00:12:51,990
which is built into kubernetes and i

00:12:49,050 --> 00:12:53,130
think earlier is called third-party

00:12:51,990 --> 00:12:55,200
resources now it's called custom

00:12:53,130 --> 00:12:55,680
resources if you're if you've heard of

00:12:55,200 --> 00:12:59,010
that before

00:12:55,680 --> 00:13:00,900
and when I say resource I basically mean

00:12:59,010 --> 00:13:04,380
what I've been talking about deployment

00:13:00,900 --> 00:13:06,660
pods these like core API objects and

00:13:04,380 --> 00:13:08,010
kubernetes and a custom resource is just

00:13:06,660 --> 00:13:10,500
an extension to that which is a

00:13:08,010 --> 00:13:12,870
user-defined resource type usually with

00:13:10,500 --> 00:13:16,410
a corresponding controller that does all

00:13:12,870 --> 00:13:17,640
the magic in the background so let's

00:13:16,410 --> 00:13:20,019
look at one of the types that we've

00:13:17,640 --> 00:13:21,819
created in Bloomberg

00:13:20,019 --> 00:13:23,829
for a tensorflow which has been a really

00:13:21,819 --> 00:13:27,429
popular toolkit for ML practice

00:13:23,829 --> 00:13:30,009
practitioners so first is our type meta

00:13:27,429 --> 00:13:32,110
and you can see here that we're now in

00:13:30,009 --> 00:13:36,189
the Bloomberg ES namespace because this

00:13:32,110 --> 00:13:39,040
is no longer a kubernetes native object

00:13:36,189 --> 00:13:40,629
but it does work and much the same way

00:13:39,040 --> 00:13:44,769
as any other kubernetes object would

00:13:40,629 --> 00:13:48,879
work this next part is also using some

00:13:44,769 --> 00:13:50,739
built-in kubernetes metadata which is

00:13:48,879 --> 00:13:52,029
available on all your types of objects

00:13:50,739 --> 00:13:54,279
which are annotation so if you're

00:13:52,029 --> 00:13:56,079
scheduling a bunch of jobs together you

00:13:54,279 --> 00:13:57,429
might be working on a project or an

00:13:56,079 --> 00:13:59,499
experiment and you want to put some

00:13:57,429 --> 00:14:01,209
labels on it so you can basically throw

00:13:59,499 --> 00:14:03,089
this in the top for when you're

00:14:01,209 --> 00:14:05,230
referring back to it later

00:14:03,089 --> 00:14:07,259
now more importantly is the

00:14:05,230 --> 00:14:09,670
specification for this tensorflow job

00:14:07,259 --> 00:14:12,149
we've sort of abstracted away the

00:14:09,670 --> 00:14:15,999
concept of containers for everybody

00:14:12,149 --> 00:14:18,399
because you get into a whole world of

00:14:15,999 --> 00:14:20,019
craziness sometimes so if you want to

00:14:18,399 --> 00:14:21,999
use tensor flow you choose our tensor

00:14:20,019 --> 00:14:24,399
flow 1-7 framework which makes sure that

00:14:21,999 --> 00:14:26,049
we have all the right binaries and GPU

00:14:24,399 --> 00:14:32,799
drivers and everything you can possibly

00:14:26,049 --> 00:14:35,980
need for data access we've found that

00:14:32,799 --> 00:14:39,429
having to set up your key tabs for

00:14:35,980 --> 00:14:43,869
security and HDFS or your config files

00:14:39,429 --> 00:14:47,019
for serve the Hadoop ecosystem could be

00:14:43,869 --> 00:14:49,569
difficult and managing all of that so

00:14:47,019 --> 00:14:51,910
we've added first-class data citizenship

00:14:49,569 --> 00:14:54,009
to our types and you can specify this

00:14:51,910 --> 00:14:55,929
through you this identity type and we

00:14:54,009 --> 00:14:58,059
make sure all your secrets and config

00:14:55,929 --> 00:15:01,720
Maps will be mounted into your running

00:14:58,059 --> 00:15:04,089
pod now because you're not creating

00:15:01,720 --> 00:15:06,759
containers anymore you need some way to

00:15:04,089 --> 00:15:07,990
specify your runtime dependencies and

00:15:06,759 --> 00:15:12,399
your entry point so you can do it like

00:15:07,990 --> 00:15:14,910
this and the size parameter I think is

00:15:12,399 --> 00:15:18,639
kind of neat because instead of setting

00:15:14,910 --> 00:15:20,889
specific requests for CPU and memory you

00:15:18,639 --> 00:15:23,949
can now set sort of like a t-shirt size

00:15:20,889 --> 00:15:26,919
of small medium or large and with a flip

00:15:23,949 --> 00:15:29,259
of a switch switch it to GPU so maybe

00:15:26,919 --> 00:15:32,199
you were running some tests with this

00:15:29,259 --> 00:15:33,790
yamo in on CPUs but now you want to run

00:15:32,199 --> 00:15:36,280
it for real on your GPU so you

00:15:33,790 --> 00:15:37,600
just change it from like small to GPU

00:15:36,280 --> 00:15:39,610
large and that's the only thing you need

00:15:37,600 --> 00:15:43,930
to change and it's often scheduled on

00:15:39,610 --> 00:15:45,670
some specialized hardware and this last

00:15:43,930 --> 00:15:47,170
bit is just the arguments that get

00:15:45,670 --> 00:15:50,260
passed into the application you can see

00:15:47,170 --> 00:15:54,550
the user here is intending to use HDFS

00:15:50,260 --> 00:15:58,030
and their Hadoop identity which we

00:15:54,550 --> 00:16:02,650
talked about earlier so just to bring

00:15:58,030 --> 00:16:04,930
back sort of the fundamental pieces we

00:16:02,650 --> 00:16:07,870
wanted for solving this machine learning

00:16:04,930 --> 00:16:10,390
problem by adding this sort of size

00:16:07,870 --> 00:16:11,770
parameter and owning the containers we

00:16:10,390 --> 00:16:14,770
can build these fundamental building

00:16:11,770 --> 00:16:17,590
blocks that give people easy access to

00:16:14,770 --> 00:16:19,720
specialized hardware like GPUs adding

00:16:17,590 --> 00:16:23,200
first-class data citizenship to our

00:16:19,720 --> 00:16:27,850
Yambol types makes data much more liquid

00:16:23,200 --> 00:16:30,340
and easier to get at the declarative

00:16:27,850 --> 00:16:32,170
nature of kubernetes and encapsulating

00:16:30,340 --> 00:16:34,210
it all in the driver makes people's

00:16:32,170 --> 00:16:35,710
development experience a little bit

00:16:34,210 --> 00:16:37,420
easier and most importantly with the

00:16:35,710 --> 00:16:41,260
custom resources we can speak

00:16:37,420 --> 00:16:43,110
specifically ml in kubernetes and we've

00:16:41,260 --> 00:16:48,040
extended this for a couple of other

00:16:43,110 --> 00:16:50,830
types in Bloomberg mainly spark for

00:16:48,040 --> 00:16:52,660
distributed ETL more generally for

00:16:50,830 --> 00:16:56,380
Python if you're using something like PI

00:16:52,660 --> 00:16:59,260
torch or scikit-learn same thing for JVM

00:16:56,380 --> 00:17:01,030
based runtimes and if you need something

00:16:59,260 --> 00:17:03,160
interactive we have support for Jupiter

00:17:01,030 --> 00:17:05,260
and we also have a whole separate

00:17:03,160 --> 00:17:08,620
operator for a black box hyper parameter

00:17:05,260 --> 00:17:11,800
tuning on these other types of jobs so

00:17:08,620 --> 00:17:15,040
just to wrap it up at Bloomberg we have

00:17:11,800 --> 00:17:17,830
this huge amount of data and we've

00:17:15,040 --> 00:17:19,570
needed machine learning for this data so

00:17:17,830 --> 00:17:21,880
it's been a great opportunity to

00:17:19,570 --> 00:17:23,920
leverage machine learning but to do this

00:17:21,880 --> 00:17:26,680
efficiently we really need our ml

00:17:23,920 --> 00:17:28,420
practitioners to think about ml and not

00:17:26,680 --> 00:17:30,880
have to think about infrastructure and

00:17:28,420 --> 00:17:34,510
we do this by introducing kubernetes

00:17:30,880 --> 00:17:38,650
which allow the infrastructure folks to

00:17:34,510 --> 00:17:40,570
think about infrastructure so thanks for

00:17:38,650 --> 00:17:42,640
keeping this community strong and being

00:17:40,570 --> 00:17:46,780
involved in open source and if you have

00:17:42,640 --> 00:17:47,370
more questions my manager and head of

00:17:46,780 --> 00:17:49,740
did

00:17:47,370 --> 00:17:51,180
analytics at Bloomberg will be on a

00:17:49,740 --> 00:17:54,410
paddle with some others tomorrow

00:17:51,180 --> 00:17:54,410
afternoon at 4 o'clock

00:17:54,660 --> 00:17:58,349

YouTube URL: https://www.youtube.com/watch?v=oZFj9sgCpxM


