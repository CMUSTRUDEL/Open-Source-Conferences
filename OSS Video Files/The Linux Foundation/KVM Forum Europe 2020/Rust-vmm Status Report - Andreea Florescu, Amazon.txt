Title: Rust-vmm Status Report - Andreea Florescu, Amazon
Publication date: 2020-11-10
Playlist: KVM Forum Europe 2020
Description: 
	Rust-vmm Status Report - Andreea Florescu, Amazon
Captions: 
	00:00:07,680 --> 00:00:12,480
hello everyone my name is andrea

00:00:10,080 --> 00:00:14,240
and i'm one of the euras vm maintainers

00:00:12,480 --> 00:00:16,320
today i will be talking about

00:00:14,240 --> 00:00:18,560
ras vmm and what we've been doing in

00:00:16,320 --> 00:00:20,960
2020 giving you an overview

00:00:18,560 --> 00:00:22,400
of uh what's in the past in the present

00:00:20,960 --> 00:00:26,320
and also what we are looking

00:00:22,400 --> 00:00:27,199
uh at in the future so for those of you

00:00:26,320 --> 00:00:29,279
who don't know

00:00:27,199 --> 00:00:31,119
raspberry i will just quickly go through

00:00:29,279 --> 00:00:34,160
what raspbmm is

00:00:31,119 --> 00:00:35,600
resvmm it's a um

00:00:34,160 --> 00:00:37,360
open source project that provides

00:00:35,600 --> 00:00:39,680
virtualization components

00:00:37,360 --> 00:00:40,879
um that are written in rust so these

00:00:39,680 --> 00:00:43,760
components correspond

00:00:40,879 --> 00:00:44,879
to rust packages which are also called

00:00:43,760 --> 00:00:47,280
crates

00:00:44,879 --> 00:00:48,559
you can find more details about it in uh

00:00:47,280 --> 00:00:52,079
the github page in

00:00:48,559 --> 00:00:53,760
raspbian mmm community raspberry mm has

00:00:52,079 --> 00:00:57,840
been used in production system

00:00:53,760 --> 00:01:00,879
since 2019 and it was mostly used by uh

00:00:57,840 --> 00:01:01,680
vmms virtual machine monitors so uh as

00:01:00,879 --> 00:01:04,720
examples

00:01:01,680 --> 00:01:08,000
uh we have firecracker cloud hypervisor

00:01:04,720 --> 00:01:09,760
alibaba cloud sandbox and also inax

00:01:08,000 --> 00:01:11,040
an interesting shift that we've seen in

00:01:09,760 --> 00:01:14,159
2020 uh

00:01:11,040 --> 00:01:16,479
is that besides vmms there are other

00:01:14,159 --> 00:01:17,439
applications that are using rasmum in

00:01:16,479 --> 00:01:19,680
production

00:01:17,439 --> 00:01:22,560
uh such as libke run and dragonfly

00:01:19,680 --> 00:01:24,640
container image service

00:01:22,560 --> 00:01:25,680
now before i can actually talk about

00:01:24,640 --> 00:01:28,799
what is the state

00:01:25,680 --> 00:01:29,439
of res vmm now let me just quickly go

00:01:28,799 --> 00:01:32,640
over

00:01:29,439 --> 00:01:35,840
how we are defining uh several stages of

00:01:32,640 --> 00:01:38,240
these components uh in ras vmm so first

00:01:35,840 --> 00:01:39,600
of all we have the empty crate so empty

00:01:38,240 --> 00:01:41,280
components

00:01:39,600 --> 00:01:43,840
these are the components that we agreed

00:01:41,280 --> 00:01:46,320
to have as part of raspbian mmm

00:01:43,840 --> 00:01:48,320
and it all started from one idea that

00:01:46,320 --> 00:01:50,240
was uh submitted as a github

00:01:48,320 --> 00:01:52,240
issue into the russian mm community

00:01:50,240 --> 00:01:54,960
repository

00:01:52,240 --> 00:01:57,040
in this uh in this github issue people

00:01:54,960 --> 00:01:59,439
are supposed to talk about the component

00:01:57,040 --> 00:02:01,600
and um pretty much pretty much

00:01:59,439 --> 00:02:02,479
describing why is this component useful

00:02:01,600 --> 00:02:06,840
for the project

00:02:02,479 --> 00:02:10,160
and um and a short design

00:02:06,840 --> 00:02:13,440
overview after

00:02:10,160 --> 00:02:15,040
after the empty crate uh is created we

00:02:13,440 --> 00:02:16,959
start the design discussions

00:02:15,040 --> 00:02:18,400
and we do not expect things to be

00:02:16,959 --> 00:02:21,280
perfect while the

00:02:18,400 --> 00:02:22,000
crate is in development so people

00:02:21,280 --> 00:02:25,360
actually

00:02:22,000 --> 00:02:28,959
can uh submit um incomplete

00:02:25,360 --> 00:02:30,800
um components uh there that they are not

00:02:28,959 --> 00:02:32,400
feature complete or maybe don't have the

00:02:30,800 --> 00:02:36,640
full documentation

00:02:32,400 --> 00:02:39,920
or test um just to get things started

00:02:36,640 --> 00:02:42,400
where we do have requirements for uh

00:02:39,920 --> 00:02:43,840
in terms of quality and documentation is

00:02:42,400 --> 00:02:45,680
before we are publishing these

00:02:43,840 --> 00:02:48,160
components on create io

00:02:45,680 --> 00:02:50,239
so uh in order to publish a component to

00:02:48,160 --> 00:02:51,760
create tile from ras vm we are expecting

00:02:50,239 --> 00:02:53,680
to see a few things

00:02:51,760 --> 00:02:55,680
so the most important thing is that we

00:02:53,680 --> 00:02:56,879
want all the crates to have the same

00:02:55,680 --> 00:02:59,599
quality bar

00:02:56,879 --> 00:03:02,319
so all all of the crates need to be

00:02:59,599 --> 00:03:05,120
tested using the raspberry mmci

00:03:02,319 --> 00:03:06,239
in terms of in terms of testing uh we

00:03:05,120 --> 00:03:09,680
are expecting

00:03:06,239 --> 00:03:11,840
a line coverage of between 80 and 90

00:03:09,680 --> 00:03:13,360
at least this is what we've been having

00:03:11,840 --> 00:03:16,080
in the past

00:03:13,360 --> 00:03:18,080
in the case that we already published in

00:03:16,080 --> 00:03:20,159
terms of documentation uh one thing that

00:03:18,080 --> 00:03:23,280
is important and maybe special about the

00:03:20,159 --> 00:03:25,040
uh resvm project is that ras vmm is not

00:03:23,280 --> 00:03:25,840
providing an application it's just

00:03:25,040 --> 00:03:28,319
providing

00:03:25,840 --> 00:03:30,400
essentially virtualization libraries so

00:03:28,319 --> 00:03:32,080
you will need to write the documentation

00:03:30,400 --> 00:03:35,440
for the public interface as well

00:03:32,080 --> 00:03:38,480
as the high level uh design

00:03:35,440 --> 00:03:41,760
overview once all of these things are uh

00:03:38,480 --> 00:03:44,239
are done uh we are publishing the crate

00:03:41,760 --> 00:03:46,959
on crate io and we are declaring it

00:03:44,239 --> 00:03:49,200
essentially production ready

00:03:46,959 --> 00:03:50,159
so now we can look at the component

00:03:49,200 --> 00:03:52,319
status from

00:03:50,159 --> 00:03:54,319
from this point of view so last year at

00:03:52,319 --> 00:03:56,560
kvm forum i presented this slide

00:03:54,319 --> 00:03:58,799
and i talked a bit of uh what are the

00:03:56,560 --> 00:04:00,319
components that we published already and

00:03:58,799 --> 00:04:01,599
what are the components that are in

00:04:00,319 --> 00:04:03,760
development

00:04:01,599 --> 00:04:05,040
so for the published ones there were

00:04:03,760 --> 00:04:07,920
mostly bindings

00:04:05,040 --> 00:04:09,680
so that is auto-generated code and

00:04:07,920 --> 00:04:13,120
things have changed a bit uh

00:04:09,680 --> 00:04:15,680
last since last year first of all

00:04:13,120 --> 00:04:16,160
uh we have crates that have been moving

00:04:15,680 --> 00:04:18,239
from

00:04:16,160 --> 00:04:19,840
empty grace to actually being crate in

00:04:18,239 --> 00:04:22,960
development one of them is

00:04:19,840 --> 00:04:26,240
v host where uh the

00:04:22,960 --> 00:04:29,759
effort was uh mostly uh done by

00:04:26,240 --> 00:04:33,600
people from um ibm intel and

00:04:29,759 --> 00:04:36,160
alibaba and then we also had crates that

00:04:33,600 --> 00:04:37,759
became stale and we had a few pr's

00:04:36,160 --> 00:04:39,040
they're open but nothing really happened

00:04:37,759 --> 00:04:40,800
then we have to go and

00:04:39,040 --> 00:04:42,720
go back and figure out what is with this

00:04:40,800 --> 00:04:45,919
component and how we can

00:04:42,720 --> 00:04:48,880
um how we can

00:04:45,919 --> 00:04:50,560
make it useful in the future then we

00:04:48,880 --> 00:04:51,440
also published a few components so we

00:04:50,560 --> 00:04:54,240
published the

00:04:51,440 --> 00:04:56,240
uh linux loader and via memory so

00:04:54,240 --> 00:04:59,199
essentially these components are now uh

00:04:56,240 --> 00:05:01,199
ready to be used in production in terms

00:04:59,199 --> 00:05:03,039
of new development we started working on

00:05:01,199 --> 00:05:05,759
a few new crates uh one of them

00:05:03,039 --> 00:05:06,160
is the host user backend which again uh

00:05:05,759 --> 00:05:10,400
this

00:05:06,160 --> 00:05:14,400
uh the main effort is coming from

00:05:10,400 --> 00:05:17,600
ibm and intel alibaba

00:05:14,400 --> 00:05:19,759
and also vfio iotas which is the same

00:05:17,600 --> 00:05:20,880
group of people that are developing

00:05:19,759 --> 00:05:24,080
these

00:05:20,880 --> 00:05:25,680
components another interesting thing is

00:05:24,080 --> 00:05:27,039
the vmm reference we've been talking

00:05:25,680 --> 00:05:28,800
about it quite a lot and now it's

00:05:27,039 --> 00:05:31,440
finally in development

00:05:28,800 --> 00:05:32,960
the vmm reference implementation has two

00:05:31,440 --> 00:05:35,520
purposes so one of them

00:05:32,960 --> 00:05:37,440
is to uh be able to test the integration

00:05:35,520 --> 00:05:39,680
of raspbmm components

00:05:37,440 --> 00:05:41,919
uh directly in russia mm so as part of

00:05:39,680 --> 00:05:43,280
rsvm instead of the products that are

00:05:41,919 --> 00:05:45,120
using raspbmm

00:05:43,280 --> 00:05:46,479
and the second purpose is to give people

00:05:45,120 --> 00:05:49,520
an overview or of

00:05:46,479 --> 00:05:53,840
or an example of how to glue together

00:05:49,520 --> 00:05:53,840
this ras vmm component

00:05:54,080 --> 00:06:00,319
in 2020 we've also looked at adding

00:05:57,759 --> 00:06:02,560
event manager the event manager which is

00:06:00,319 --> 00:06:04,400
providing

00:06:02,560 --> 00:06:05,680
abstractions for event-based

00:06:04,400 --> 00:06:09,360
applications and

00:06:05,680 --> 00:06:10,000
also uh vm superior which is actually

00:06:09,360 --> 00:06:12,880
the first

00:06:10,000 --> 00:06:15,039
crate that we have um that provides

00:06:12,880 --> 00:06:16,960
emulation so this is the first crate

00:06:15,039 --> 00:06:18,960
published on crate io with emulation so

00:06:16,960 --> 00:06:20,479
even though it's just legacy devices

00:06:18,960 --> 00:06:23,360
we're pretty excited that we have the

00:06:20,479 --> 00:06:23,360
first code there

00:06:23,600 --> 00:06:27,440
we also invested some time in security

00:06:25,440 --> 00:06:29,600
and testing one of the things

00:06:27,440 --> 00:06:31,199
that we looked at is adding performance

00:06:29,600 --> 00:06:32,880
tests because previously we were only

00:06:31,199 --> 00:06:33,919
doing integration tests and uni tests

00:06:32,880 --> 00:06:35,520
test

00:06:33,919 --> 00:06:37,440
so for the performance test we added the

00:06:35,520 --> 00:06:39,759
pipeline for running the test

00:06:37,440 --> 00:06:41,280
and also we added benchmarks in a few

00:06:39,759 --> 00:06:43,520
repositories

00:06:41,280 --> 00:06:44,639
now there is a catch um because some of

00:06:43,520 --> 00:06:46,560
these benchmarks are

00:06:44,639 --> 00:06:48,000
actually taking a really long time to

00:06:46,560 --> 00:06:50,160
run so

00:06:48,000 --> 00:06:52,880
uh for some of them we can run them as

00:06:50,160 --> 00:06:53,360
part of the continuous integration and

00:06:52,880 --> 00:06:55,360
on each

00:06:53,360 --> 00:06:56,479
uh pull request like for example the

00:06:55,360 --> 00:06:59,199
event manager

00:06:56,479 --> 00:07:00,240
but for others uh it actually takes

00:06:59,199 --> 00:07:02,479
quite the time

00:07:00,240 --> 00:07:03,919
quite a lot of time to run them uh like

00:07:02,479 --> 00:07:04,800
for example via memory where the

00:07:03,919 --> 00:07:07,919
benchmarks

00:07:04,800 --> 00:07:10,240
take more than one hour so for uh for

00:07:07,919 --> 00:07:12,800
the vm memory use case we need to find

00:07:10,240 --> 00:07:14,479
some infrastructure and set up the

00:07:12,800 --> 00:07:17,599
infrastructure essentially to

00:07:14,479 --> 00:07:20,000
to be able to do nightly runs and report

00:07:17,599 --> 00:07:21,759
the results somehow

00:07:20,000 --> 00:07:23,440
we also started investing more in the

00:07:21,759 --> 00:07:26,880
security aspect

00:07:23,440 --> 00:07:29,199
so the first thing that we did uh was to

00:07:26,880 --> 00:07:31,759
essentially do a code audit for the code

00:07:29,199 --> 00:07:34,000
that is already published on create io

00:07:31,759 --> 00:07:35,520
and we were looking mostly at things

00:07:34,000 --> 00:07:36,240
like what is the input what is the

00:07:35,520 --> 00:07:39,039
output

00:07:36,240 --> 00:07:39,840
um who is what are the trusted actors

00:07:39,039 --> 00:07:42,400
and what

00:07:39,840 --> 00:07:44,000
are the untrusted actors and based on

00:07:42,400 --> 00:07:46,720
this we will also work on

00:07:44,000 --> 00:07:49,280
a threat model which is expected to come

00:07:46,720 --> 00:07:51,360
in the following weeks

00:07:49,280 --> 00:07:53,120
as part of the code audit we were

00:07:51,360 --> 00:07:54,560
actually able to find a few security

00:07:53,120 --> 00:07:58,319
vulnerabilities

00:07:54,560 --> 00:07:59,039
so they are both fixed and new versions

00:07:58,319 --> 00:08:02,199
are released

00:07:59,039 --> 00:08:04,800
one of them is in via memory and the

00:08:02,199 --> 00:08:07,840
vulnerability

00:08:04,800 --> 00:08:09,599
might lead to a denial of service so

00:08:07,840 --> 00:08:11,280
essentially the bug in the memory was

00:08:09,599 --> 00:08:14,080
that reads and writes were not atomic

00:08:11,280 --> 00:08:17,360
when we were expecting them to be

00:08:14,080 --> 00:08:18,160
in vms vario the bug was in the serial

00:08:17,360 --> 00:08:21,759
console

00:08:18,160 --> 00:08:24,879
emulation and it could

00:08:21,759 --> 00:08:26,720
again lead to denial of service because

00:08:24,879 --> 00:08:29,680
we were allowing unbounded

00:08:26,720 --> 00:08:30,560
uh memory to be allocated for this one

00:08:29,680 --> 00:08:34,240
uh

00:08:30,560 --> 00:08:37,279
the embargo just ended so we have a cv

00:08:34,240 --> 00:08:38,240
id allocation in progress but if you

00:08:37,279 --> 00:08:40,719
want to

00:08:38,240 --> 00:08:41,680
know more about the details you can also

00:08:40,719 --> 00:08:45,440
see this on the

00:08:41,680 --> 00:08:47,839
on a public github issue

00:08:45,440 --> 00:08:48,480
in terms of community we were trying to

00:08:47,839 --> 00:08:51,600
see

00:08:48,480 --> 00:08:53,760
how is the rise pmm community doing

00:08:51,600 --> 00:08:55,600
for this we use the github apis because

00:08:53,760 --> 00:08:58,560
it was the most accessible thing

00:08:55,600 --> 00:09:00,000
um and unfortunately github only does

00:08:58,560 --> 00:09:03,760
code contributions

00:09:00,000 --> 00:09:06,959
and uh from um like

00:09:03,760 --> 00:09:08,959
the the general assumption is that

00:09:06,959 --> 00:09:11,040
con contributions code contributions are

00:09:08,959 --> 00:09:13,600
not all contributions so we should be

00:09:11,040 --> 00:09:14,640
also looking at issues and discussions

00:09:13,600 --> 00:09:16,800
because we had people

00:09:14,640 --> 00:09:18,720
finding bugs in rusli and them and

00:09:16,800 --> 00:09:20,399
participating at discussions and this

00:09:18,720 --> 00:09:22,080
should count as contributions as well

00:09:20,399 --> 00:09:25,120
but we we didn't manage to

00:09:22,080 --> 00:09:26,240
capture them uh in any way but uh

00:09:25,120 --> 00:09:28,800
looking at the graph

00:09:26,240 --> 00:09:31,600
uh on the right side uh we captured all

00:09:28,800 --> 00:09:34,800
the svm components and it looks like the

00:09:31,600 --> 00:09:37,200
uh contributions pretty much stay

00:09:34,800 --> 00:09:38,959
the same throughout the year we do have

00:09:37,200 --> 00:09:41,920
a few spikes where

00:09:38,959 --> 00:09:45,680
uh that correspond to the time when we

00:09:41,920 --> 00:09:48,480
added new components to svm

00:09:45,680 --> 00:09:50,399
um for contributing we also worked on

00:09:48,480 --> 00:09:52,640
making it easier to start contributing

00:09:50,399 --> 00:09:53,680
on russia mm so we started adding the

00:09:52,640 --> 00:09:57,120
good first

00:09:53,680 --> 00:09:58,800
issue label and actually

00:09:57,120 --> 00:10:00,800
if you click on that link it will take

00:09:58,800 --> 00:10:03,040
you to the github page with all the

00:10:00,800 --> 00:10:05,279
issues in rsvm that are

00:10:03,040 --> 00:10:06,160
good first issues we also added the

00:10:05,279 --> 00:10:08,560
label uh

00:10:06,160 --> 00:10:09,440
help wanted for people that want to

00:10:08,560 --> 00:10:12,000
contribute

00:10:09,440 --> 00:10:13,440
and uh maybe it's not their first pull

00:10:12,000 --> 00:10:16,480
request

00:10:13,440 --> 00:10:18,000
um and then if these two searches are

00:10:16,480 --> 00:10:19,600
still not good enough and you don't find

00:10:18,000 --> 00:10:21,600
something that is interesting

00:10:19,600 --> 00:10:23,200
uh there is also a search for issues

00:10:21,600 --> 00:10:25,120
that not have an owner

00:10:23,200 --> 00:10:27,839
and you can search through those to see

00:10:25,120 --> 00:10:29,920
issues that are not actively worked on

00:10:27,839 --> 00:10:32,399
we are also encouraging people to start

00:10:29,920 --> 00:10:36,160
contributing and to ask us any question

00:10:32,399 --> 00:10:42,240
on rust vmm channel the select channel

00:10:36,160 --> 00:10:42,240
and also using our email address

00:10:42,640 --> 00:10:48,079
in terms of future investment

00:10:45,760 --> 00:10:50,640
we are uh currently in a process of

00:10:48,079 --> 00:10:53,120
gathering feedback we want to understand

00:10:50,640 --> 00:10:54,320
uh if there are areas of improvement

00:10:53,120 --> 00:10:57,519
that we should be looking

00:10:54,320 --> 00:10:58,399
at so we are uh basically asking

00:10:57,519 --> 00:11:00,720
contribution

00:10:58,399 --> 00:11:03,040
contributors to ras vmm but also

00:11:00,720 --> 00:11:03,519
consumers of ras vm to provide feedback

00:11:03,040 --> 00:11:07,040
so

00:11:03,519 --> 00:11:07,839
if you have any feedback on these areas

00:11:07,040 --> 00:11:11,040
you can

00:11:07,839 --> 00:11:12,959
either send me an email or just uh

00:11:11,040 --> 00:11:14,079
reach out reach to us on slack that

00:11:12,959 --> 00:11:16,959
would be really really

00:11:14,079 --> 00:11:18,000
helpful we're also working on

00:11:16,959 --> 00:11:20,320
establishing

00:11:18,000 --> 00:11:22,480
a process for reporting security

00:11:20,320 --> 00:11:24,720
vulnerabilities

00:11:22,480 --> 00:11:25,600
in terms of visualization components we

00:11:24,720 --> 00:11:30,320
are mostly

00:11:25,600 --> 00:11:32,800
uh working now on the host user backend

00:11:30,320 --> 00:11:35,120
for virtio we are starting with verteo

00:11:32,800 --> 00:11:37,040
over mmio and again in the following

00:11:35,120 --> 00:11:37,920
weeks we are expecting to see a few pr's

00:11:37,040 --> 00:11:41,200
here

00:11:37,920 --> 00:11:42,959
related to block network and if time

00:11:41,200 --> 00:11:46,000
allows also vsoc

00:11:42,959 --> 00:11:49,920
we are also working on vcpu abstractions

00:11:46,000 --> 00:11:51,279
pci via fio and on the security side of

00:11:49,920 --> 00:11:55,200
things fuzzing for

00:11:51,279 --> 00:11:57,200
for emulation code that was all i had

00:11:55,200 --> 00:12:07,680
thank you and please reach out to me if

00:11:57,200 --> 00:12:07,680

YouTube URL: https://www.youtube.com/watch?v=KGsQo0vMFw0


