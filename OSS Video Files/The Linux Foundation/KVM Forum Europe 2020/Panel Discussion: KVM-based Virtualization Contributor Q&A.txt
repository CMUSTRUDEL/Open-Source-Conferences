Title: Panel Discussion: KVM-based Virtualization Contributor Q&A
Publication date: 2020-11-10
Playlist: KVM Forum Europe 2020
Description: 
	Panel Discussion: KVM-based Virtualization Contributor Q&A - Stefan Hajnoczi & Richard W.M. Jones, Red Hat; Susie Li, Intel; Hubertus Franke, IBM; David Kaplan, AMD; Peter Maydell, Arm
Captions: 
	00:00:06,799 --> 00:00:10,400
hi

00:00:07,200 --> 00:00:12,960
and welcome to the kvm forum 2020

00:00:10,400 --> 00:00:14,320
panel discussion my name is stefan

00:00:12,960 --> 00:00:16,800
heinece and i'm going to be

00:00:14,320 --> 00:00:18,400
the moderator for this discussion today

00:00:16,800 --> 00:00:20,560
we have with us panelists

00:00:18,400 --> 00:00:22,000
who are from organizations that

00:00:20,560 --> 00:00:25,359
contribute to qmu

00:00:22,000 --> 00:00:27,680
and kvm and we have a list of questions

00:00:25,359 --> 00:00:29,439
from the community that have been

00:00:27,680 --> 00:00:30,560
suggested as topics for today's

00:00:29,439 --> 00:00:33,200
discussion

00:00:30,560 --> 00:00:34,160
before we dive into the questions we're

00:00:33,200 --> 00:00:36,000
going to go around

00:00:34,160 --> 00:00:38,640
and let the panelists introduce

00:00:36,000 --> 00:00:38,640
themselves

00:00:38,879 --> 00:00:42,960
so let's begin would you like to

00:00:41,920 --> 00:00:46,480
introduce yourself

00:00:42,960 --> 00:00:48,960
yourself susie hi everyone

00:00:46,480 --> 00:00:50,640
this is suzy lee from intel and managing

00:00:48,960 --> 00:00:52,879
the intel open source virtualization

00:00:50,640 --> 00:00:52,879
team

00:00:54,960 --> 00:00:59,680
thank you um richard would you like to

00:00:57,840 --> 00:01:03,039
introduce yourself

00:00:59,680 --> 00:01:06,240
hi i'm richard jones from red hat

00:01:03,039 --> 00:01:08,560
um and i work on v2v

00:01:06,240 --> 00:01:09,520
some virtualization things some mvd

00:01:08,560 --> 00:01:13,680
things

00:01:09,520 --> 00:01:17,040
um and other topics in the vert space

00:01:13,680 --> 00:01:19,840
thank you david kaplan

00:01:17,040 --> 00:01:21,520
hi uh david kaplan from amd i'm a

00:01:19,840 --> 00:01:23,759
security architect i focus

00:01:21,520 --> 00:01:25,119
mostly on confidential computing

00:01:23,759 --> 00:01:27,840
technologies like encrypted

00:01:25,119 --> 00:01:27,840
virtualization

00:01:29,360 --> 00:01:35,920
thank you um peter maida

00:01:33,040 --> 00:01:37,040
hi i'm peter i work for arm i've been

00:01:35,920 --> 00:01:40,000
seconded into

00:01:37,040 --> 00:01:42,079
linaro for about 10 years now working on

00:01:40,000 --> 00:01:45,280
kwemu mostly dealing with

00:01:42,079 --> 00:01:48,479
arm related emulation work

00:01:45,280 --> 00:01:50,320
and we also do a bunch of the admin and

00:01:48,479 --> 00:01:52,960
build type stuff as well didn't duck

00:01:50,320 --> 00:01:55,600
fast enough to avoid that

00:01:52,960 --> 00:01:57,520
thank you and roberto franke yeah i'm

00:01:55,600 --> 00:02:00,000
hubris frank from ibm research i

00:01:57,520 --> 00:02:02,079
mostly work in architecture and

00:02:00,000 --> 00:02:04,079
operating systems and the interfaces and

00:02:02,079 --> 00:02:07,119
now how they basically surface up in

00:02:04,079 --> 00:02:08,800
cloud environments thank you

00:02:07,119 --> 00:02:10,879
okay well let's begin we have an

00:02:08,800 --> 00:02:13,360
etherpad that was submitted by the

00:02:10,879 --> 00:02:14,959
the community with uh questions in a

00:02:13,360 --> 00:02:17,520
bunch of different areas and we can just

00:02:14,959 --> 00:02:19,760
keep going until we run out of time

00:02:17,520 --> 00:02:22,400
this year one of the trends seems to be

00:02:19,760 --> 00:02:25,120
encrypted vms confidential cloud

00:02:22,400 --> 00:02:26,400
and so on so we let's start with a

00:02:25,120 --> 00:02:28,319
question from there

00:02:26,400 --> 00:02:29,599
because i know that several of you have

00:02:28,319 --> 00:02:32,800
been looking at this area

00:02:29,599 --> 00:02:35,840
and are involved in that

00:02:32,800 --> 00:02:38,400
so so for the the first question

00:02:35,840 --> 00:02:40,560
let's let's start discussing um what

00:02:38,400 --> 00:02:41,440
other use cases for encrypted vms have

00:02:40,560 --> 00:02:44,319
you looked at

00:02:41,440 --> 00:02:45,760
besides improving privacy in the cloud

00:02:44,319 --> 00:02:48,160
so feel free to just

00:02:45,760 --> 00:02:48,160
jump in

00:02:49,040 --> 00:02:51,360
yes

00:02:53,200 --> 00:02:57,920
i can start on this one so yeah i i

00:02:56,080 --> 00:03:00,000
think it's an interesting question

00:02:57,920 --> 00:03:02,640
certainly there are a lot of use cases

00:03:00,000 --> 00:03:04,879
in the cloud and i know at amd that is

00:03:02,640 --> 00:03:06,159
probably the primary place we focus on

00:03:04,879 --> 00:03:07,280
when we talk about confidential

00:03:06,159 --> 00:03:09,519
computing

00:03:07,280 --> 00:03:10,319
whether it's traditional virtualization

00:03:09,519 --> 00:03:12,080
container

00:03:10,319 --> 00:03:13,360
lightweight virtualization things like

00:03:12,080 --> 00:03:15,599
that

00:03:13,360 --> 00:03:16,640
but the question was about scenarios

00:03:15,599 --> 00:03:17,920
beyond the cloud and

00:03:16,640 --> 00:03:19,680
you know maybe there's one that i'll

00:03:17,920 --> 00:03:20,720
offer that i think could be interesting

00:03:19,680 --> 00:03:22,480
in the future

00:03:20,720 --> 00:03:25,200
and that would be sort of a bring your

00:03:22,480 --> 00:03:29,120
own device type scenario

00:03:25,200 --> 00:03:31,360
you can imagine a corporation that

00:03:29,120 --> 00:03:32,959
uses employee devices but they have

00:03:31,360 --> 00:03:35,200
sensitive data they have special

00:03:32,959 --> 00:03:37,519
programs that they want to use

00:03:35,200 --> 00:03:39,760
and they don't know what malware or

00:03:37,519 --> 00:03:40,959
other programs might be installed on the

00:03:39,760 --> 00:03:43,120
employee device

00:03:40,959 --> 00:03:44,879
and so in that sense you have a similar

00:03:43,120 --> 00:03:45,519
trust model to what you might find in

00:03:44,879 --> 00:03:49,280
the cloud

00:03:45,519 --> 00:03:49,920
in that you have a employer that wants

00:03:49,280 --> 00:03:51,680
to run a

00:03:49,920 --> 00:03:53,439
secure workload in an otherwise

00:03:51,680 --> 00:03:55,680
untrusted system

00:03:53,439 --> 00:03:56,959
so i think that could be an interesting

00:03:55,680 --> 00:03:58,720
scenario

00:03:56,959 --> 00:04:00,799
maybe in the future although as i say

00:03:58,720 --> 00:04:04,080
right now we're at least at amd we're

00:04:00,799 --> 00:04:04,080
primarily focused on cloud

00:04:04,159 --> 00:04:08,080
so i would say that uh anytime you

00:04:06,560 --> 00:04:08,879
basically have some form of service

00:04:08,080 --> 00:04:11,599
provider

00:04:08,879 --> 00:04:13,200
right whether it's in the cloud or not

00:04:11,599 --> 00:04:14,000
such as edge computing these are

00:04:13,200 --> 00:04:16,160
interesting

00:04:14,000 --> 00:04:17,600
use cases right it's not clear to me yet

00:04:16,160 --> 00:04:19,759
at this point

00:04:17,600 --> 00:04:20,720
when applications busy driving towards

00:04:19,759 --> 00:04:22,320
the edge whether we

00:04:20,720 --> 00:04:24,720
still want to include this into the

00:04:22,320 --> 00:04:27,040
cloud computing scenario or not

00:04:24,720 --> 00:04:29,040
but certainly similar to what david just

00:04:27,040 --> 00:04:31,199
said the moment you're running in an

00:04:29,040 --> 00:04:32,240
effectively untrusted environment and

00:04:31,199 --> 00:04:33,919
application

00:04:32,240 --> 00:04:37,199
they are certainly going to have to look

00:04:33,919 --> 00:04:37,199
at encrypted vms

00:04:37,280 --> 00:04:41,600
yeah one thing i want to add is uh you

00:04:39,360 --> 00:04:43,520
know certainly a lot of the usage is

00:04:41,600 --> 00:04:46,160
for the encrypted vm is in the cloud

00:04:43,520 --> 00:04:48,160
space but also we are now

00:04:46,160 --> 00:04:49,680
seeing a lot of the development of

00:04:48,160 --> 00:04:52,400
virtualization use cases

00:04:49,680 --> 00:04:54,320
in the client space and also in the you

00:04:52,400 --> 00:04:56,560
know iot edge space

00:04:54,320 --> 00:04:58,240
so for example there are more and more

00:04:56,560 --> 00:04:58,880
uh workload consolidation happening

00:04:58,240 --> 00:05:00,400
there

00:04:58,880 --> 00:05:02,160
and also you know the

00:05:00,400 --> 00:05:03,360
virtualization-based security right for

00:05:02,160 --> 00:05:06,479
example you want to

00:05:03,360 --> 00:05:09,680
run a you know virtualization-based

00:05:06,479 --> 00:05:10,720
te environment so and all these are you

00:05:09,680 --> 00:05:13,120
know based on vt

00:05:10,720 --> 00:05:13,759
so this could be a lot of architectural

00:05:13,120 --> 00:05:16,240
um

00:05:13,759 --> 00:05:18,560
options on how to do this so i think

00:05:16,240 --> 00:05:20,720
that's having encrypted vm there

00:05:18,560 --> 00:05:22,320
yeah we're definitely i think that's uh

00:05:20,720 --> 00:05:24,000
will bring a very interesting

00:05:22,320 --> 00:05:27,360
architecture option into that and has

00:05:24,000 --> 00:05:27,360
the profound architectural impacts

00:05:29,919 --> 00:05:34,160
okay thank you so we have a follow-up

00:05:32,720 --> 00:05:36,960
question that was posted

00:05:34,160 --> 00:05:39,039
about memory isolation isolation so i

00:05:36,960 --> 00:05:40,880
guess this is a more technical one

00:05:39,039 --> 00:05:42,400
it's a question of how is memory

00:05:40,880 --> 00:05:43,919
isolation being done

00:05:42,400 --> 00:05:45,120
and you can interpret that how you want

00:05:43,919 --> 00:05:45,759
i'm not sure whether they're thinking

00:05:45,120 --> 00:05:47,840
about

00:05:45,759 --> 00:05:49,039
caches and avoiding side channel attacks

00:05:47,840 --> 00:05:52,560
and so on

00:05:49,039 --> 00:05:54,479
so please go ahead

00:05:52,560 --> 00:05:57,039
so in general this is done through the

00:05:54,479 --> 00:06:00,319
uh uh memory controller right so

00:05:57,039 --> 00:06:01,919
when essentially a encrypted vm calls

00:06:00,319 --> 00:06:03,680
the load store operation it's

00:06:01,919 --> 00:06:05,840
effectively going through your caches

00:06:03,680 --> 00:06:07,120
and at the end it's basically tagged

00:06:05,840 --> 00:06:10,160
with the

00:06:07,120 --> 00:06:12,560
address base id and at the

00:06:10,160 --> 00:06:13,919
memory controller level it's going to go

00:06:12,560 --> 00:06:15,759
through the various encryption

00:06:13,919 --> 00:06:16,639
mechanisms that are being provided so

00:06:15,759 --> 00:06:18,800
data is then

00:06:16,639 --> 00:06:20,479
encrypted writing out and on the way in

00:06:18,800 --> 00:06:23,759
it's being decrypted

00:06:20,479 --> 00:06:26,400
from the caching i guess susie and

00:06:23,759 --> 00:06:28,240
david can speak more to it but you will

00:06:26,400 --> 00:06:30,319
effectively have to tag the caches

00:06:28,240 --> 00:06:32,000
right so to make sure that nobody can

00:06:30,319 --> 00:06:35,840
snoop on your cache

00:06:32,000 --> 00:06:35,840
outside your address space

00:06:36,639 --> 00:06:39,199
yeah i mean i would just had to say that

00:06:38,160 --> 00:06:41,280
that kind of gets into the

00:06:39,199 --> 00:06:42,720
implementation details and you know i

00:06:41,280 --> 00:06:45,280
think different vendors have chosen to

00:06:42,720 --> 00:06:47,600
implement this in different ways

00:06:45,280 --> 00:06:49,520
but i think that you know everyone has

00:06:47,600 --> 00:06:50,960
some sort of a solution for it

00:06:49,520 --> 00:06:52,960
you know there are a few different

00:06:50,960 --> 00:06:55,520
general techniques for isolation

00:06:52,960 --> 00:06:57,360
there's uh cryptographic isolation as

00:06:55,520 --> 00:06:58,720
ebert has kind of talked about

00:06:57,360 --> 00:07:00,400
where if you don't have the correct

00:06:58,720 --> 00:07:01,680
encryption key then you're not able to

00:07:00,400 --> 00:07:04,160
access the data

00:07:01,680 --> 00:07:06,000
there's also so-called logical isolation

00:07:04,160 --> 00:07:09,039
which would be where you use

00:07:06,000 --> 00:07:10,479
a mechanism whether it's page tables or

00:07:09,039 --> 00:07:12,880
something of that sort

00:07:10,479 --> 00:07:14,400
to actually block access to data that

00:07:12,880 --> 00:07:18,080
you're not supposed to have

00:07:14,400 --> 00:07:21,199
and i know at amd we've used both

00:07:18,080 --> 00:07:25,360
uh in different cases and i i'm

00:07:21,199 --> 00:07:25,360
sure that other vendors are similar

00:07:26,560 --> 00:07:30,160
it's actually a good point david i mean

00:07:28,000 --> 00:07:31,440
do you do either in space isolation

00:07:30,160 --> 00:07:33,840
right you guarantee that

00:07:31,440 --> 00:07:35,680
you cannot access or you basically if

00:07:33,840 --> 00:07:37,759
you allow access then it doesn't have to

00:07:35,680 --> 00:07:40,880
make sense right so that's basically the

00:07:37,759 --> 00:07:43,919
content isolation right so to speak

00:07:40,880 --> 00:07:45,360
yeah i mean to take it a step a step

00:07:43,919 --> 00:07:46,960
higher right there's kind of four

00:07:45,360 --> 00:07:47,360
general types of isolation you could

00:07:46,960 --> 00:07:48,720
have

00:07:47,360 --> 00:07:50,000
physical isolation which would be

00:07:48,720 --> 00:07:50,960
running on two different machines

00:07:50,000 --> 00:07:53,039
obviously

00:07:50,960 --> 00:07:53,759
you know that's not what we're doing

00:07:53,039 --> 00:07:55,120
otherwise we wouldn't have

00:07:53,759 --> 00:07:57,039
virtualization

00:07:55,120 --> 00:07:58,400
there's temporal isolation of running

00:07:57,039 --> 00:08:00,560
one workload and then

00:07:58,400 --> 00:08:02,400
sort of getting rid of all the traces of

00:08:00,560 --> 00:08:04,400
it and then running a second workload

00:08:02,400 --> 00:08:06,319
and then you have the logical isolation

00:08:04,400 --> 00:08:06,960
and the cryptographic and i think that

00:08:06,319 --> 00:08:09,199
for

00:08:06,960 --> 00:08:10,720
confidential computing the logical

00:08:09,199 --> 00:08:11,680
isolation and the cryptographic make the

00:08:10,720 --> 00:08:15,919
most sense

00:08:11,680 --> 00:08:15,919
but all of them you know have trade-offs

00:08:19,680 --> 00:08:24,639
okay thank you and this leads us on to

00:08:22,720 --> 00:08:26,319
kind of the the final encrypted vm's

00:08:24,639 --> 00:08:29,120
question and that is

00:08:26,319 --> 00:08:29,599
about this mechanism is designed to

00:08:29,120 --> 00:08:32,800
provide

00:08:29,599 --> 00:08:35,360
confidentiality but what do we do

00:08:32,800 --> 00:08:36,800
or what what does the software and the

00:08:35,360 --> 00:08:39,760
hardware do

00:08:36,800 --> 00:08:42,080
in order to mitigate issues that might

00:08:39,760 --> 00:08:44,320
be discovered later on in these designs

00:08:42,080 --> 00:08:45,920
how do you what should users do in order

00:08:44,320 --> 00:08:49,839
to protect themselves and not put all

00:08:45,920 --> 00:08:49,839
their eggs in one basket relying on this

00:08:52,839 --> 00:08:56,160
mechanism

00:08:54,320 --> 00:08:57,680
yeah it's a good question i i i can take

00:08:56,160 --> 00:09:00,240
a stab at it but i don't want to

00:08:57,680 --> 00:09:01,279
dominate the conversation on this uh

00:09:00,240 --> 00:09:03,360
certainly

00:09:01,279 --> 00:09:04,399
you know it is prudent to think about

00:09:03,360 --> 00:09:08,240
that scenario

00:09:04,399 --> 00:09:09,440
and uh i know at amd we've done some

00:09:08,240 --> 00:09:11,680
work especially with our newer

00:09:09,440 --> 00:09:12,720
technologies to try to provide stronger

00:09:11,680 --> 00:09:14,720
guarantees

00:09:12,720 --> 00:09:16,800
around mutable components in the

00:09:14,720 --> 00:09:19,120
architecture it's very common in

00:09:16,800 --> 00:09:20,640
these kind of setups to have some

00:09:19,120 --> 00:09:22,560
firmware or or

00:09:20,640 --> 00:09:24,080
you know trusted components that can be

00:09:22,560 --> 00:09:26,320
upgraded in the field which is

00:09:24,080 --> 00:09:27,519
great for fixing bugs but then you do

00:09:26,320 --> 00:09:29,920
have to deal with the

00:09:27,519 --> 00:09:31,279
issue of how do you prove that you're

00:09:29,920 --> 00:09:32,880
actually running the version that you

00:09:31,279 --> 00:09:35,440
need to be running

00:09:32,880 --> 00:09:36,399
and so we've taken some steps recently

00:09:35,440 --> 00:09:38,000
to

00:09:36,399 --> 00:09:39,279
create more of an architecture around

00:09:38,000 --> 00:09:40,880
that where there's actually a

00:09:39,279 --> 00:09:42,800
cryptographic proof

00:09:40,880 --> 00:09:45,120
of what version you're running and that

00:09:42,800 --> 00:09:47,120
can help ensure that we are able to

00:09:45,120 --> 00:09:48,480
deploy patches when needed and

00:09:47,120 --> 00:09:50,880
you can be assured that you're running

00:09:48,480 --> 00:09:51,200
with them the other thing which i'll

00:09:50,880 --> 00:09:52,959
just

00:09:51,200 --> 00:09:54,240
you know kind of give a call out to the

00:09:52,959 --> 00:09:56,560
the red hat folks here

00:09:54,240 --> 00:09:58,560
is uh red hat has a very interesting

00:09:56,560 --> 00:10:00,800
project uh called anarchs

00:09:58,560 --> 00:10:03,040
and uh as i understand their their

00:10:00,800 --> 00:10:04,560
vision one of the goals is that

00:10:03,040 --> 00:10:06,160
sort of you write your application and

00:10:04,560 --> 00:10:07,680
then it can run on

00:10:06,160 --> 00:10:10,720
multiple different back ends whether

00:10:07,680 --> 00:10:13,600
it's amd suv or intel sgx or

00:10:10,720 --> 00:10:14,560
even arm and so you know sort of the

00:10:13,600 --> 00:10:15,839
question of

00:10:14,560 --> 00:10:17,760
how do you avoid putting all your eggs

00:10:15,839 --> 00:10:20,160
in one basket well

00:10:17,760 --> 00:10:21,120
if you do have a infrastructure like

00:10:20,160 --> 00:10:22,640
that

00:10:21,120 --> 00:10:24,240
and you wake up one day and you discover

00:10:22,640 --> 00:10:26,560
there's a zero day in one vendor's

00:10:24,240 --> 00:10:28,160
technology then it becomes very easy to

00:10:26,560 --> 00:10:28,560
just switch your target to a different

00:10:28,160 --> 00:10:30,560
one

00:10:28,560 --> 00:10:32,800
and so i think that's a very very

00:10:30,560 --> 00:10:34,800
interesting approach

00:10:32,800 --> 00:10:36,720
yeah i was going to mention nrx as well

00:10:34,800 --> 00:10:37,120
of course nx is based on web assembly

00:10:36,720 --> 00:10:38,320
which is

00:10:37,120 --> 00:10:40,240
as i intended how they're going to do

00:10:38,320 --> 00:10:47,839
this portability between

00:10:40,240 --> 00:10:47,839
completely different platforms

00:10:50,240 --> 00:10:56,480
okay thank you um we have a

00:10:53,519 --> 00:10:57,519
slightly related topic uh about cloud

00:10:56,480 --> 00:10:59,760
and about hardware

00:10:57,519 --> 00:11:00,880
about new hardware innovations and the

00:10:59,760 --> 00:11:03,120
question is about

00:11:00,880 --> 00:11:04,880
with hyperscale clouds building their

00:11:03,120 --> 00:11:06,640
own silicon hardware and i guess

00:11:04,880 --> 00:11:08,399
it's talking about tier one cloud

00:11:06,640 --> 00:11:11,440
providers who are able to

00:11:08,399 --> 00:11:13,839
optimize everything to the to the last

00:11:11,440 --> 00:11:14,959
few percent um and are able to deploy

00:11:13,839 --> 00:11:17,680
custom hardware

00:11:14,959 --> 00:11:18,959
for their cloud how do we keep users of

00:11:17,680 --> 00:11:22,320
commodity hardware

00:11:18,959 --> 00:11:23,200
happy um what what this is an open-ended

00:11:22,320 --> 00:11:24,560
question so

00:11:23,200 --> 00:11:28,560
i don't know if you have any thoughts in

00:11:24,560 --> 00:11:30,480
this area

00:11:28,560 --> 00:11:32,959
yeah i can i can take a you know first

00:11:30,480 --> 00:11:36,320
step on this one so i think that's uh

00:11:32,959 --> 00:11:37,839
it's really the um

00:11:36,320 --> 00:11:39,600
you know the level and the pace of the

00:11:37,839 --> 00:11:41,120
innovation you can drive right to make

00:11:39,600 --> 00:11:44,320
sure your customer workload

00:11:41,120 --> 00:11:46,399
can run well on your platform so

00:11:44,320 --> 00:11:47,920
i think that's involves a lot of you

00:11:46,399 --> 00:11:51,279
know deep engagement

00:11:47,920 --> 00:11:53,680
with your customers to really understand

00:11:51,279 --> 00:11:54,720
um you know what their workload the

00:11:53,680 --> 00:11:56,880
characteristics

00:11:54,720 --> 00:11:58,399
and how the you know we can design in

00:11:56,880 --> 00:12:00,639
the hallway in a way that is

00:11:58,399 --> 00:12:01,600
uh able to support all this software

00:12:00,639 --> 00:12:04,480
workload

00:12:01,600 --> 00:12:05,360
and also i think another thing is um you

00:12:04,480 --> 00:12:08,240
know for this

00:12:05,360 --> 00:12:09,680
um you know this uh kamali hardware and

00:12:08,240 --> 00:12:12,480
the terminology here

00:12:09,680 --> 00:12:14,320
i think we actually are targeting um you

00:12:12,480 --> 00:12:16,480
know we're having a large deployment

00:12:14,320 --> 00:12:18,160
uh you know that's the base and we're

00:12:16,480 --> 00:12:20,720
talking a wide range of

00:12:18,160 --> 00:12:21,680
uh you know the uh segments right for

00:12:20,720 --> 00:12:24,720
example the

00:12:21,680 --> 00:12:25,279
um you know the client devices the iot

00:12:24,720 --> 00:12:28,000
edge

00:12:25,279 --> 00:12:29,040
and also um you know the all the way to

00:12:28,000 --> 00:12:32,560
the data center

00:12:29,040 --> 00:12:33,200
so i think this um brings us a very

00:12:32,560 --> 00:12:36,000
unique

00:12:33,200 --> 00:12:36,720
uh you know end-to-end advantage uh to

00:12:36,000 --> 00:12:39,360
allow us

00:12:36,720 --> 00:12:40,079
to you know have a better um you know

00:12:39,360 --> 00:12:42,480
workload

00:12:40,079 --> 00:12:43,600
workload compatibility across you know

00:12:42,480 --> 00:12:46,399
the full stack

00:12:43,600 --> 00:12:47,680
and um you know the uh we can optimize

00:12:46,399 --> 00:12:49,200
for the end-to-end use it

00:12:47,680 --> 00:12:51,120
brings us more opportunity to optimize

00:12:49,200 --> 00:12:53,279
for the end-to-end stack as well

00:12:51,120 --> 00:12:55,120
and another thing is i think beyond the

00:12:53,279 --> 00:12:56,880
um you know in this

00:12:55,120 --> 00:12:58,560
commodity hardware space we're also

00:12:56,880 --> 00:12:59,519
offering accelerators various

00:12:58,560 --> 00:13:02,000
accelerators

00:12:59,519 --> 00:13:04,000
for uh your um you know the customer

00:13:02,000 --> 00:13:06,000
specific uh usage the segment specific

00:13:04,000 --> 00:13:06,880
usages so you can kind of tune the

00:13:06,000 --> 00:13:09,120
hardware

00:13:06,880 --> 00:13:11,360
and uh uh using acceleration to optimize

00:13:09,120 --> 00:13:14,399
your you know software

00:13:11,360 --> 00:13:15,920
thank you so uh stefan this actually

00:13:14,399 --> 00:13:17,839
also goes back to the previous question

00:13:15,920 --> 00:13:19,680
how do you basically not put all your

00:13:17,839 --> 00:13:21,200
eggs in one basket right it basically

00:13:19,680 --> 00:13:22,959
means you have to move up the chain you

00:13:21,200 --> 00:13:25,360
have to use portable libraries

00:13:22,959 --> 00:13:27,360
right and for instance when you take

00:13:25,360 --> 00:13:29,839
machine learning as an example right

00:13:27,360 --> 00:13:31,440
people have basically uh joined

00:13:29,839 --> 00:13:33,279
effectively the tensorflow

00:13:31,440 --> 00:13:35,279
community right that becomes ultimately

00:13:33,279 --> 00:13:36,399
my my portability platform so to speak

00:13:35,279 --> 00:13:38,880
right and underneath you

00:13:36,399 --> 00:13:40,000
essentially build now devices that

00:13:38,880 --> 00:13:43,040
effectively uh

00:13:40,000 --> 00:13:45,040
cater to exactly that interface right so

00:13:43,040 --> 00:13:46,720
you step away from specific hardware

00:13:45,040 --> 00:13:49,199
where you can number one

00:13:46,720 --> 00:13:51,440
right uh that kind of at least the end

00:13:49,199 --> 00:13:51,760
user species are somewhat isolated from

00:13:51,440 --> 00:13:54,480
from

00:13:51,760 --> 00:13:55,120
hardware changes then right but we also

00:13:54,480 --> 00:13:57,519
see that

00:13:55,120 --> 00:13:59,199
particularly with hardware these uh in

00:13:57,519 --> 00:14:00,560
the cloud space more things are

00:13:59,199 --> 00:14:03,600
basically driven down

00:14:00,560 --> 00:14:05,760
out of the os space per se and being

00:14:03,600 --> 00:14:06,639
driven down into the hardware devices

00:14:05,760 --> 00:14:08,720
themselves

00:14:06,639 --> 00:14:10,240
right uh network cards becoming

00:14:08,720 --> 00:14:12,320
significantly more capable with the

00:14:10,240 --> 00:14:13,839
virtualization capabilities right

00:14:12,320 --> 00:14:15,440
and ultimately they don't even shine

00:14:13,839 --> 00:14:17,600
through to the uh to the

00:14:15,440 --> 00:14:18,880
end users that's let's say it's a vm

00:14:17,600 --> 00:14:22,079
it's only the very

00:14:18,880 --> 00:14:23,519
high-end vms such as for utilized for

00:14:22,079 --> 00:14:25,360
hpc and so on that

00:14:23,519 --> 00:14:26,880
are effectively interested in getting

00:14:25,360 --> 00:14:29,120
access to a much lower

00:14:26,880 --> 00:14:31,839
interface for instance to run dpdk or

00:14:29,120 --> 00:14:31,839
something of that nature

00:14:34,000 --> 00:14:37,360
thank you i i think that maybe maybe

00:14:36,880 --> 00:14:39,680
peter

00:14:37,360 --> 00:14:40,720
has an interesting perspective to share

00:14:39,680 --> 00:14:45,279
here because

00:14:40,720 --> 00:14:47,920
with from the arm architecture what

00:14:45,279 --> 00:14:49,040
an area where arm was extremely um

00:14:47,920 --> 00:14:52,160
successful

00:14:49,040 --> 00:14:54,240
is in allowing um the integration of

00:14:52,160 --> 00:14:55,680
custom systems on chips and custom

00:14:54,240 --> 00:14:59,199
boards

00:14:55,680 --> 00:15:01,360
and yet they ended up also providing a

00:14:59,199 --> 00:15:03,279
standard server platform

00:15:01,360 --> 00:15:04,480
um so i don't know peter if you want to

00:15:03,279 --> 00:15:05,920
kind of

00:15:04,480 --> 00:15:07,760
if you have any thoughts on this because

00:15:05,920 --> 00:15:08,959
it's kind of interesting that arm has

00:15:07,760 --> 00:15:10,639
evolved into the

00:15:08,959 --> 00:15:13,120
uh offering a standard server platform

00:15:10,639 --> 00:15:16,079
for for for maybe having a more

00:15:13,120 --> 00:15:16,800
commodity you could say um hardware

00:15:16,079 --> 00:15:20,240
environment

00:15:16,800 --> 00:15:21,040
versus the versus the custom designs

00:15:20,240 --> 00:15:24,240
that uh

00:15:21,040 --> 00:15:25,440
arm is also extremely popular in well

00:15:24,240 --> 00:15:27,040
so i'll start this off with the

00:15:25,440 --> 00:15:28,160
disclaimer that i'm not an expert in

00:15:27,040 --> 00:15:30,480
this area of

00:15:28,160 --> 00:15:31,440
how harm does stuff but i think my my

00:15:30,480 --> 00:15:33,519
view of

00:15:31,440 --> 00:15:35,440
what has gone on with arm has basically

00:15:33,519 --> 00:15:37,920
been there's a balancing act here

00:15:35,440 --> 00:15:40,720
so different companies that want to use

00:15:37,920 --> 00:15:42,000
bits of arm hardware and build their

00:15:40,720 --> 00:15:43,360
systems around it

00:15:42,000 --> 00:15:45,440
they want to have things that they want

00:15:43,360 --> 00:15:46,320
to do that's the difference that they

00:15:45,440 --> 00:15:48,079
bring to it

00:15:46,320 --> 00:15:49,600
but you also want to have a common

00:15:48,079 --> 00:15:51,519
ground which is what arm provides in the

00:15:49,600 --> 00:15:55,279
architecture itself

00:15:51,519 --> 00:15:57,519
so that the idea is that it's different

00:15:55,279 --> 00:15:59,680
where the difference really is

00:15:57,519 --> 00:16:00,959
significantly useful and where it isn't

00:15:59,680 --> 00:16:02,399
so

00:16:00,959 --> 00:16:04,079
where it doesn't matter so much you try

00:16:02,399 --> 00:16:06,000
and avoid those difference and it says

00:16:04,079 --> 00:16:07,199
you can gradually standardize things

00:16:06,000 --> 00:16:09,279
and i think that's definitely you can

00:16:07,199 --> 00:16:11,920
see that in the server space

00:16:09,279 --> 00:16:14,800
where the server space is much less

00:16:11,920 --> 00:16:18,160
tolerant of random weird stuff

00:16:14,800 --> 00:16:20,240
and so there are a bunch of things like

00:16:18,160 --> 00:16:23,199
the server-based system architecture

00:16:20,240 --> 00:16:24,800
specs that standardize that so that if

00:16:23,199 --> 00:16:26,399
you've got a distro you can run that

00:16:24,800 --> 00:16:27,360
distro on whatever server hardware you

00:16:26,399 --> 00:16:28,880
like

00:16:27,360 --> 00:16:30,560
but there are also people in the server

00:16:28,880 --> 00:16:32,480
space who while yes they're

00:16:30,560 --> 00:16:34,880
doing standard systems they're still

00:16:32,480 --> 00:16:37,680
putting some of their own

00:16:34,880 --> 00:16:38,959
magic source in there to because that's

00:16:37,680 --> 00:16:39,920
that's the point that that's why they're

00:16:38,959 --> 00:16:42,079
not they don't want to just build

00:16:39,920 --> 00:16:43,920
something completely off the shelf

00:16:42,079 --> 00:16:46,480
so you've got to make maintain a balance

00:16:43,920 --> 00:16:46,480
there i think

00:16:49,600 --> 00:16:54,399
thank you okay so

00:16:52,639 --> 00:16:55,759
one of the topics we have is cpu

00:16:54,399 --> 00:16:57,600
architectures and

00:16:55,759 --> 00:16:59,600
um that's always an interesting one for

00:16:57,600 --> 00:17:00,639
kvm because kvm supports multiple

00:16:59,600 --> 00:17:02,480
architectures that implement

00:17:00,639 --> 00:17:03,680
virtualization in different ways they

00:17:02,480 --> 00:17:05,360
have different instruction set

00:17:03,680 --> 00:17:07,520
extensions and approaches

00:17:05,360 --> 00:17:08,880
to the virtualization hardware features

00:17:07,520 --> 00:17:10,720
so

00:17:08,880 --> 00:17:12,720
where do you see potential

00:17:10,720 --> 00:17:14,400
cross-architectural collaboration

00:17:12,720 --> 00:17:16,160
uh for example with encrypted and

00:17:14,400 --> 00:17:17,919
isolated guests

00:17:16,160 --> 00:17:20,240
all doing their own things are things

00:17:17,919 --> 00:17:22,640
going to converge or

00:17:20,240 --> 00:17:24,640
what areas do you see where maybe in kvm

00:17:22,640 --> 00:17:28,079
we can

00:17:24,640 --> 00:17:28,079
have common infrastructure

00:17:29,440 --> 00:17:34,400
so in terms of kvm and one of the when

00:17:32,480 --> 00:17:35,760
we look for internet the encrypted vms

00:17:34,400 --> 00:17:39,200
right i mean there's amd

00:17:35,760 --> 00:17:41,440
suv intel tdx for instance is going to

00:17:39,200 --> 00:17:42,960
be uh coming out was announced last

00:17:41,440 --> 00:17:45,520
month as a result

00:17:42,960 --> 00:17:47,280
as an example the whole level of key

00:17:45,520 --> 00:17:47,919
management right i mean in confidential

00:17:47,280 --> 00:17:49,840
computing

00:17:47,919 --> 00:17:50,960
you cannot have any of your data or any

00:17:49,840 --> 00:17:53,600
of your keys in

00:17:50,960 --> 00:17:55,120
in the in the open that means uh from a

00:17:53,600 --> 00:17:56,000
service provider as well as from ad

00:17:55,120 --> 00:17:57,520
customer i need to have an

00:17:56,000 --> 00:17:58,240
infrastructure in place that allows me

00:17:57,520 --> 00:18:00,160
to

00:17:58,240 --> 00:18:01,919
shuffle keys around in a secure fashion

00:18:00,160 --> 00:18:02,799
that is not being exposed to the service

00:18:01,919 --> 00:18:06,080
provider

00:18:02,799 --> 00:18:09,919
okay there i believe is an ability to

00:18:06,080 --> 00:18:12,480
uh to uh have a common ground

00:18:09,919 --> 00:18:14,400
uh as david knows uh features like once

00:18:12,480 --> 00:18:16,720
a vm migration right which

00:18:14,400 --> 00:18:17,679
essentially has to go at the lower level

00:18:16,720 --> 00:18:20,320
uh and

00:18:17,679 --> 00:18:21,039
again encrypt or shuttle encrypted data

00:18:20,320 --> 00:18:23,520
around

00:18:21,039 --> 00:18:24,960
uh seems to be there is a commonality

00:18:23,520 --> 00:18:26,559
among architectures

00:18:24,960 --> 00:18:29,120
right for instance when they're using

00:18:26,559 --> 00:18:31,919
encryption keys as discussed earlier on

00:18:29,120 --> 00:18:32,799
right again that would be provided in a

00:18:31,919 --> 00:18:36,559
more generic

00:18:32,799 --> 00:18:37,520
feature i think going further into

00:18:36,559 --> 00:18:40,640
architectures

00:18:37,520 --> 00:18:41,679
the whole area of encrypted io right i

00:18:40,640 --> 00:18:44,240
strongly believe that

00:18:41,679 --> 00:18:45,600
particularly in the cloud that i o

00:18:44,240 --> 00:18:48,400
devices will largely be

00:18:45,600 --> 00:18:49,440
become completely siv enabled with

00:18:48,400 --> 00:18:52,960
offload functions

00:18:49,440 --> 00:18:54,799
and that these uh virtual functions so

00:18:52,960 --> 00:18:57,440
to speak can be reached through to the

00:18:54,799 --> 00:18:58,720
virtual interfaces or the virtual agents

00:18:57,440 --> 00:19:01,840
running uh

00:18:58,720 --> 00:19:03,919
virtual clients vms containers

00:19:01,840 --> 00:19:06,080
will directly access the i o devices to

00:19:03,919 --> 00:19:08,640
bypass the operating system right

00:19:06,080 --> 00:19:10,400
so again along that path the whole setup

00:19:08,640 --> 00:19:13,679
of having a

00:19:10,400 --> 00:19:14,400
clearly secure encrypted channel will be

00:19:13,679 --> 00:19:16,240
important

00:19:14,400 --> 00:19:17,440
right again many of these things have to

00:19:16,240 --> 00:19:20,559
be set up by qmu

00:19:17,440 --> 00:19:22,840
at the end of the day right and there

00:19:20,559 --> 00:19:25,200
seems to be commonality across different

00:19:22,840 --> 00:19:27,280
architectures

00:19:25,200 --> 00:19:28,240
yeah i think that's a good point you

00:19:27,280 --> 00:19:30,240
know i think that

00:19:28,240 --> 00:19:31,679
it's unlikely that we'll see much

00:19:30,240 --> 00:19:32,720
commonality when it comes to harbor

00:19:31,679 --> 00:19:34,240
implementation just

00:19:32,720 --> 00:19:35,760
sort of because of the business reality

00:19:34,240 --> 00:19:38,480
of that but

00:19:35,760 --> 00:19:39,360
providing a uniform software interface

00:19:38,480 --> 00:19:41,360
kind of like what

00:19:39,360 --> 00:19:43,280
kvm already does for virtualization i

00:19:41,360 --> 00:19:46,880
think is very reasonable

00:19:43,280 --> 00:19:49,039
i think that you know ibm power also has

00:19:46,880 --> 00:19:50,640
some you know confidential computing

00:19:49,039 --> 00:19:52,240
technologies in it and i believe that

00:19:50,640 --> 00:19:53,679
there's already been some effort to

00:19:52,240 --> 00:19:55,520
to merge some of that with the work that

00:19:53,679 --> 00:19:56,880
amd's done just to share some of the

00:19:55,520 --> 00:19:59,360
code there

00:19:56,880 --> 00:20:00,400
so i think that yeah that's a it's going

00:19:59,360 --> 00:20:03,919
to be a

00:20:00,400 --> 00:20:05,919
good area especially as now more vendors

00:20:03,919 --> 00:20:07,280
have announced technologies and from an

00:20:05,919 --> 00:20:08,320
end user standpoint i think they would

00:20:07,280 --> 00:20:12,240
really appreciate a

00:20:08,320 --> 00:20:14,480
common interface yeah i very much agree

00:20:12,240 --> 00:20:17,840
on that i think a common interface is

00:20:14,480 --> 00:20:18,080
definitely the place we can have a lot

00:20:17,840 --> 00:20:20,960
of

00:20:18,080 --> 00:20:22,720
collaboration for the pricing in the um

00:20:20,960 --> 00:20:24,480
you know the encrypted vm space we're

00:20:22,720 --> 00:20:26,559
already seeing some

00:20:24,480 --> 00:20:28,159
uh good collaboration on you know for

00:20:26,559 --> 00:20:31,520
example how to define the

00:20:28,159 --> 00:20:31,919
exposed key management uh you know key

00:20:31,520 --> 00:20:33,919
id

00:20:31,919 --> 00:20:35,840
to the c group right how to abstract in

00:20:33,919 --> 00:20:38,799
a way that can support both

00:20:35,840 --> 00:20:40,159
you know the intel tdx and amg cv and

00:20:38,799 --> 00:20:42,559
i'm sure there's uh

00:20:40,159 --> 00:20:44,080
many other spaces as well for example

00:20:42,559 --> 00:20:46,400
hey for example on the

00:20:44,080 --> 00:20:47,679
you know for the encrypted vm technology

00:20:46,400 --> 00:20:50,799
today we require

00:20:47,679 --> 00:20:52,240
to um you know modify the guest os to

00:20:50,799 --> 00:20:54,480
collaborate with the hypervisor

00:20:52,240 --> 00:20:55,919
and currently the interfaces are

00:20:54,480 --> 00:20:58,880
different across vendors

00:20:55,919 --> 00:21:00,880
right so um you know are we able to kind

00:20:58,880 --> 00:21:04,080
of have a unified interface that can

00:21:00,880 --> 00:21:06,159
you know certainly help our customers

00:21:04,080 --> 00:21:10,000
to uh deploy much easier i think that's

00:21:06,159 --> 00:21:10,000
definitely so maybe one area we can look

00:21:14,840 --> 00:21:21,120
into

00:21:17,600 --> 00:21:24,799
thank you so on this theme of software

00:21:21,120 --> 00:21:25,840
um you know common software interfaces

00:21:24,799 --> 00:21:27,600
and so on

00:21:25,840 --> 00:21:29,039
we have a question about management

00:21:27,600 --> 00:21:31,120
stacks and the question is

00:21:29,039 --> 00:21:32,480
what management stack do you have in

00:21:31,120 --> 00:21:35,600
place today is it

00:21:32,480 --> 00:21:36,640
levert based is it a custom qmu

00:21:35,600 --> 00:21:39,600
management tool

00:21:36,640 --> 00:21:41,760
and maybe even a custom virtual machine

00:21:39,600 --> 00:21:43,919
monitor that you're using instead of qmu

00:21:41,760 --> 00:21:46,480
and how has this changed over the past

00:21:43,919 --> 00:21:46,480
few years

00:21:50,400 --> 00:21:55,679
this is an easy one for for richard

00:21:52,480 --> 00:21:57,280
jones from red hat right

00:21:55,679 --> 00:21:59,200
i would turn this question around and

00:21:57,280 --> 00:22:02,159
say um

00:21:59,200 --> 00:22:03,120
how has libbert itself changed and how

00:22:02,159 --> 00:22:06,159
is liver

00:22:03,120 --> 00:22:09,840
changing i mean liver was this

00:22:06,159 --> 00:22:13,360
monolithic single node management

00:22:09,840 --> 00:22:14,880
demon and then we tried to you know fit

00:22:13,360 --> 00:22:17,840
that into the

00:22:14,880 --> 00:22:19,760
um to the kubernetes model where you're

00:22:17,840 --> 00:22:21,440
running everything in a pod

00:22:19,760 --> 00:22:23,280
um and then we came across problems

00:22:21,440 --> 00:22:23,679
should you know should each pod run its

00:22:23,280 --> 00:22:26,240
own

00:22:23,679 --> 00:22:28,320
copy of livevert and so on and and from

00:22:26,240 --> 00:22:32,000
that we started to basically

00:22:28,320 --> 00:22:35,120
um look at how we can make liver more

00:22:32,000 --> 00:22:38,240
not not so monolithic more separable uh

00:22:35,120 --> 00:22:39,679
move things like the the creation of the

00:22:38,240 --> 00:22:42,960
chemo command line

00:22:39,679 --> 00:22:44,320
out into separate libraries um

00:22:42,960 --> 00:22:45,840
i mean it's not something that i'm a

00:22:44,320 --> 00:22:46,400
huge expert on this because i'm not

00:22:45,840 --> 00:22:48,080
really

00:22:46,400 --> 00:22:49,919
directly involved in this although i am

00:22:48,080 --> 00:22:50,559
sort of using some of the fruits of this

00:22:49,919 --> 00:22:53,600
but

00:22:50,559 --> 00:22:53,980
certainly this question is in in a sense

00:22:53,600 --> 00:22:55,280
um

00:22:53,980 --> 00:22:57,360
[Music]

00:22:55,280 --> 00:22:59,039
backwards i guess because maybe if you

00:22:57,360 --> 00:23:00,799
if you thought that libert worked in a

00:22:59,039 --> 00:23:02,720
particular way it's like this huge

00:23:00,799 --> 00:23:04,159
monolithic demon well you know take

00:23:02,720 --> 00:23:05,679
another look at it now

00:23:04,159 --> 00:23:08,799
um it may be different from how you

00:23:05,679 --> 00:23:08,799
expect it

00:23:09,520 --> 00:23:13,360
and i think the liver team's extremely

00:23:11,760 --> 00:23:15,360
aware of the sort of

00:23:13,360 --> 00:23:16,400
traditional model and the problems with

00:23:15,360 --> 00:23:19,280
that and

00:23:16,400 --> 00:23:21,360
and there's a huge push within red hat

00:23:19,280 --> 00:23:23,760
there's certainly no secret to

00:23:21,360 --> 00:23:26,000
to you know move everything towards

00:23:23,760 --> 00:23:29,360
kubernetes and open shift

00:23:26,000 --> 00:23:30,799
um and so you know the making liberte

00:23:29,360 --> 00:23:32,960
ronald openshift is like number one

00:23:30,799 --> 00:23:34,320
priority at the moment

00:23:32,960 --> 00:23:37,200
i hope that i hope that's the sufficient

00:23:34,320 --> 00:23:41,039
answer to step out but um

00:23:37,200 --> 00:23:43,679
thank you so i mean since i'm i'm

00:23:41,039 --> 00:23:45,120
with ibm cloud in a way right in a

00:23:43,679 --> 00:23:47,520
research organization right

00:23:45,120 --> 00:23:48,480
i do think we use libert basically as a

00:23:47,520 --> 00:23:50,320
conduit

00:23:48,480 --> 00:23:52,159
right it does give you additional life

00:23:50,320 --> 00:23:53,600
cycle management not to have to do with

00:23:52,159 --> 00:23:55,440
the insane qmu

00:23:53,600 --> 00:23:56,960
command line interfaces right that

00:23:55,440 --> 00:24:00,240
everybody knows about

00:23:56,960 --> 00:24:01,200
um but uh let me turn the question a

00:24:00,240 --> 00:24:04,320
little bit around

00:24:01,200 --> 00:24:06,480
right which is essentially is a when you

00:24:04,320 --> 00:24:07,120
ask about vmms right we actually see

00:24:06,480 --> 00:24:09,840
that there's

00:24:07,120 --> 00:24:10,880
uh quite a bunch of activities like

00:24:09,840 --> 00:24:14,320
firecrackers

00:24:10,880 --> 00:24:15,679
intel uh cloud hypervisor uh vmms that

00:24:14,320 --> 00:24:18,240
are basically spawning up that are

00:24:15,679 --> 00:24:20,159
trying to move different technologies

00:24:18,240 --> 00:24:21,760
in so for instance many of them are rust

00:24:20,159 --> 00:24:23,279
based under the premise that rust is a

00:24:21,760 --> 00:24:23,919
better and more secure programming

00:24:23,279 --> 00:24:25,600
language

00:24:23,919 --> 00:24:26,960
right i'm not going to go into detail

00:24:25,600 --> 00:24:29,120
here about that but

00:24:26,960 --> 00:24:30,080
it is out there this question right and

00:24:29,120 --> 00:24:32,320
so

00:24:30,080 --> 00:24:33,679
our focus has been more on the qmu side

00:24:32,320 --> 00:24:35,919
right uh you know it's a

00:24:33,679 --> 00:24:37,760
huge investment that has been made in in

00:24:35,919 --> 00:24:39,760
qru right over the

00:24:37,760 --> 00:24:41,760
many many years and we're trying to

00:24:39,760 --> 00:24:43,279
leverage that and basically addressing

00:24:41,760 --> 00:24:45,440
some of the concerns that people have

00:24:43,279 --> 00:24:47,679
raised with qmu which basically

00:24:45,440 --> 00:24:49,120
similar to lip word has been it's a

00:24:47,679 --> 00:24:52,400
pretty large entity uh

00:24:49,120 --> 00:24:53,760
of of code right and uh it also has gone

00:24:52,400 --> 00:24:55,600
through quite some life cycle it's much

00:24:53,760 --> 00:24:58,400
more configurable these days right

00:24:55,600 --> 00:25:01,120
and new techniques can be for instance

00:24:58,400 --> 00:25:03,039
be integrated into that particular

00:25:01,120 --> 00:25:04,320
code base so for instance in our end

00:25:03,039 --> 00:25:06,159
we're looking at control

00:25:04,320 --> 00:25:08,480
flow integrity you know we're having now

00:25:06,159 --> 00:25:10,320
hardware features coming with various

00:25:08,480 --> 00:25:12,080
architectures that allow us to do

00:25:10,320 --> 00:25:14,799
control flow integrity in hardware

00:25:12,080 --> 00:25:15,760
right need support for that in the

00:25:14,799 --> 00:25:18,480
compiling uh

00:25:15,760 --> 00:25:20,240
uh two chains right number one number

00:25:18,480 --> 00:25:20,880
two as you know stefan there's also the

00:25:20,240 --> 00:25:23,039
the

00:25:20,880 --> 00:25:24,480
proposals uh i think largely driven by

00:25:23,039 --> 00:25:26,799
you effectively right that

00:25:24,480 --> 00:25:28,720
essentially says okay can i take the

00:25:26,799 --> 00:25:30,720
somewhat configurable architecture that

00:25:28,720 --> 00:25:32,480
exists today in qmu and do a

00:25:30,720 --> 00:25:33,760
piecewise migration to uh new

00:25:32,480 --> 00:25:35,039
technologies like for instance

00:25:33,760 --> 00:25:38,320
introducing rust

00:25:35,039 --> 00:25:39,840
as an ios for io emulation right

00:25:38,320 --> 00:25:41,600
you don't want to have this monolithic

00:25:39,840 --> 00:25:42,080
code that once you have been broken in

00:25:41,600 --> 00:25:43,919
because

00:25:42,080 --> 00:25:45,440
maybe of a device driver bug or

00:25:43,919 --> 00:25:47,919
something of that nature

00:25:45,440 --> 00:25:48,480
right and to basically put your vmf at

00:25:47,919 --> 00:25:50,480
risk

00:25:48,480 --> 00:25:52,240
right so essentially compartmentalizing

00:25:50,480 --> 00:25:54,159
it is actually a very good idea

00:25:52,240 --> 00:25:56,400
and the io sub model exactly gives you

00:25:54,159 --> 00:25:59,279
that ability that's number one

00:25:56,400 --> 00:26:00,640
on the topic of uh next generations

00:25:59,279 --> 00:26:02,960
where i think

00:26:00,640 --> 00:26:05,200
we have seen that what used to be the

00:26:02,960 --> 00:26:07,120
more legacy vm technologies like okay

00:26:05,200 --> 00:26:08,880
here's your machine model emulated

00:26:07,120 --> 00:26:12,240
right we have now basically realized

00:26:08,880 --> 00:26:15,120
that the interactions between the vmm

00:26:12,240 --> 00:26:16,320
and the uh vm itself is very chatty

00:26:15,120 --> 00:26:18,640
right that's busy where

00:26:16,320 --> 00:26:19,840
uh devices like word io and then sprung

00:26:18,640 --> 00:26:22,000
out right so you can

00:26:19,840 --> 00:26:24,080
maybe provide basically a more

00:26:22,000 --> 00:26:25,840
streamlined implementation

00:26:24,080 --> 00:26:27,679
and i believe more work can be done in

00:26:25,840 --> 00:26:29,120
that case at the end of the day and i

00:26:27,679 --> 00:26:31,279
think that's where some lessons can be

00:26:29,120 --> 00:26:34,240
learned from firecracker and

00:26:31,279 --> 00:26:36,000
into cloud hypervisor is to really in a

00:26:34,240 --> 00:26:38,400
cloud environment think about it what is

00:26:36,000 --> 00:26:40,240
my machine model that i really need

00:26:38,400 --> 00:26:42,720
do i actually need a do i really need a

00:26:40,240 --> 00:26:44,640
pci bus emulation

00:26:42,720 --> 00:26:46,880
right it's not clear to me we actually

00:26:44,640 --> 00:26:48,880
need that right if your machine model

00:26:46,880 --> 00:26:50,559
truly is just here's a bunch of word i o

00:26:48,880 --> 00:26:52,720
devices do i need this to be through a

00:26:50,559 --> 00:26:55,440
pci bus that is an architectural feature

00:26:52,720 --> 00:26:55,919
that's already being emulated so i think

00:26:55,440 --> 00:26:58,320
there's

00:26:55,919 --> 00:27:00,799
quite some research that can be done in

00:26:58,320 --> 00:27:00,799
that area

00:27:05,520 --> 00:27:12,080
thank you okay so

00:27:08,880 --> 00:27:14,480
we have a big bigger

00:27:12,080 --> 00:27:15,120
uh list of questions around the

00:27:14,480 --> 00:27:17,520
developer

00:27:15,120 --> 00:27:18,960
community and these are things from how

00:27:17,520 --> 00:27:22,480
do i get started

00:27:18,960 --> 00:27:24,880
to about the qme project itself to

00:27:22,480 --> 00:27:25,760
the process and how organizations are

00:27:24,880 --> 00:27:28,080
able to

00:27:25,760 --> 00:27:29,520
get features upstream and collaborate so

00:27:28,080 --> 00:27:32,880
we can

00:27:29,520 --> 00:27:33,679
take a look at some of them so the first

00:27:32,880 --> 00:27:35,840
one

00:27:33,679 --> 00:27:37,120
is about specialization versus

00:27:35,840 --> 00:27:39,039
generalization it's

00:27:37,120 --> 00:27:40,720
should developers work across the full

00:27:39,039 --> 00:27:43,039
virtualization stack or should they

00:27:40,720 --> 00:27:43,600
specialize on this particular component

00:27:43,039 --> 00:27:46,960
like

00:27:43,600 --> 00:27:48,080
kvm kernel module or qmu and how does

00:27:46,960 --> 00:27:51,200
this work today

00:27:48,080 --> 00:27:51,200
in your organization

00:27:53,279 --> 00:27:56,480
oh i can tell you i think that if you

00:27:54,799 --> 00:27:59,919
like oh sorry

00:27:56,480 --> 00:28:00,799
go ahead uh yeah so i think that some of

00:27:59,919 --> 00:28:02,320
that depends

00:28:00,799 --> 00:28:03,919
in terms of what you want to do it

00:28:02,320 --> 00:28:05,600
depends on your own preferences some

00:28:03,919 --> 00:28:07,200
some people really like being able to

00:28:05,600 --> 00:28:09,120
put together a complete

00:28:07,200 --> 00:28:10,880
feature by doing a little bit of work at

00:28:09,120 --> 00:28:13,039
every layer in the stack

00:28:10,880 --> 00:28:15,440
some i tend towards the other end of the

00:28:13,039 --> 00:28:17,360
thing i tend to like to

00:28:15,440 --> 00:28:18,559
look at one component and get quite

00:28:17,360 --> 00:28:20,880
deeply involved and

00:28:18,559 --> 00:28:22,480
knowledgeable about it and then just

00:28:20,880 --> 00:28:24,960
work on that one component so some of

00:28:22,480 --> 00:28:27,760
that is just personal preference

00:28:24,960 --> 00:28:28,480
um in terms of how does um work with

00:28:27,760 --> 00:28:31,520
this

00:28:28,480 --> 00:28:32,880
we tend more to be a bit more split up

00:28:31,520 --> 00:28:34,799
in terms of what i'm mostly doing

00:28:32,880 --> 00:28:36,159
chromium stuff and there are some peop

00:28:34,799 --> 00:28:38,240
other people who work for arm who are

00:28:36,159 --> 00:28:40,320
doing only the kernel stuff but

00:28:38,240 --> 00:28:41,840
that's kind of organizational reasons

00:28:40,320 --> 00:28:45,840
rather than because it's necessarily the

00:28:41,840 --> 00:28:45,840
most efficient way of doing it

00:28:47,440 --> 00:28:50,480
i i mean i think at red hat we have

00:28:49,520 --> 00:28:53,279
people who work

00:28:50,480 --> 00:28:54,159
you know in both that way and that way

00:28:53,279 --> 00:28:57,279
so they work

00:28:54,159 --> 00:28:58,559
some people work across all the layers

00:28:57,279 --> 00:29:01,440
of the stack and

00:28:58,559 --> 00:29:02,240
some concentrate on a single layer so so

00:29:01,440 --> 00:29:03,520
much down to

00:29:02,240 --> 00:29:05,440
the programmers and i think if you're

00:29:03,520 --> 00:29:07,840
talking if this question is really about

00:29:05,440 --> 00:29:10,799
how do we get new developers on board

00:29:07,840 --> 00:29:12,480
and should those developers go that way

00:29:10,799 --> 00:29:13,200
or that way i think it probably doesn't

00:29:12,480 --> 00:29:14,799
matter i mean

00:29:13,200 --> 00:29:16,559
getting new developers is the thing

00:29:14,799 --> 00:29:19,120
rather than um

00:29:16,559 --> 00:29:20,559
which particular way they work um there

00:29:19,120 --> 00:29:22,320
certainly are features which

00:29:20,559 --> 00:29:23,679
we develop i mean almost all of the

00:29:22,320 --> 00:29:24,799
features i should think that go into

00:29:23,679 --> 00:29:28,320
kyomou sort of

00:29:24,799 --> 00:29:30,320
end up having a libert um

00:29:28,320 --> 00:29:31,600
component and then even perhaps a you

00:29:30,320 --> 00:29:34,559
know a

00:29:31,600 --> 00:29:35,279
manager or a cooper component on top of

00:29:34,559 --> 00:29:38,000
that so

00:29:35,279 --> 00:29:39,840
there may be sort of two or three

00:29:38,000 --> 00:29:43,120
different

00:29:39,840 --> 00:29:46,320
places languages um

00:29:43,120 --> 00:29:47,600
styles communities that that you have to

00:29:46,320 --> 00:29:50,080
interact with in order to get

00:29:47,600 --> 00:29:51,360
single feature added whether or not this

00:29:50,080 --> 00:29:56,720
is a good thing

00:29:51,360 --> 00:29:56,720
um it has its it has its ups and downs

00:29:59,120 --> 00:30:02,320
speaking diplomatically

00:30:05,679 --> 00:30:09,120
um what about at intel how does that

00:30:08,000 --> 00:30:11,440
work they're

00:30:09,120 --> 00:30:12,960
contributing to say the linux kernel and

00:30:11,440 --> 00:30:16,720
the kvm kernel module

00:30:12,960 --> 00:30:19,200
versus qmu versus higher level project

00:30:16,720 --> 00:30:20,960
yeah i agree with what richard and peter

00:30:19,200 --> 00:30:24,480
said right i think it's just

00:30:20,960 --> 00:30:26,799
we need expertise um you know in both

00:30:24,480 --> 00:30:27,679
areas people who are considering on one

00:30:26,799 --> 00:30:30,159
component

00:30:27,679 --> 00:30:31,360
and the people who are you know able to

00:30:30,159 --> 00:30:33,520
look at the whole stack

00:30:31,360 --> 00:30:35,440
and drive the you know the system

00:30:33,520 --> 00:30:38,240
optimization system charge

00:30:35,440 --> 00:30:38,480
so i think both are very very important

00:30:38,240 --> 00:30:41,039
it

00:30:38,480 --> 00:30:42,880
really depends on you know the engineers

00:30:41,039 --> 00:30:44,159
what's the engineer's passion you know

00:30:42,880 --> 00:30:50,320
which way he likes better

00:30:44,159 --> 00:30:54,320
right and also where his talent is

00:30:50,320 --> 00:30:56,559
thank you um

00:30:54,320 --> 00:30:59,760
david did you want to add something um

00:30:56,559 --> 00:31:01,600
or should we move to the next question

00:30:59,760 --> 00:31:03,120
i i i don't know much to add i think

00:31:01,600 --> 00:31:05,279
what other folks said is

00:31:03,120 --> 00:31:07,679
is true you know i will just point out

00:31:05,279 --> 00:31:10,080
that at least when it comes to

00:31:07,679 --> 00:31:10,880
uh implementing new hardware features

00:31:10,080 --> 00:31:12,720
especially

00:31:10,880 --> 00:31:14,399
things like all this confidential

00:31:12,720 --> 00:31:15,919
computing stuff that really requires a

00:31:14,399 --> 00:31:19,039
full stack approach

00:31:15,919 --> 00:31:21,039
and so it does require that expertise of

00:31:19,039 --> 00:31:22,720
you know being able to know enough about

00:31:21,039 --> 00:31:25,440
all the components to actually

00:31:22,720 --> 00:31:28,480
fit things together so i certainly think

00:31:25,440 --> 00:31:28,480
that's a valuable skill

00:31:30,240 --> 00:31:34,240
excellent so the next question we have

00:31:32,240 --> 00:31:35,279
is how would you describe your process

00:31:34,240 --> 00:31:37,679
for developing

00:31:35,279 --> 00:31:39,919
new hardware features and enabling them

00:31:37,679 --> 00:31:41,440
in the linux and kvm software stack and

00:31:39,919 --> 00:31:47,840
how can it be improved i mean maybe

00:31:41,440 --> 00:31:47,840
there are some frustrations there

00:31:51,679 --> 00:31:56,480
uh maybe i can i can take her first step

00:31:54,159 --> 00:31:58,799
at this one right i think that's uh

00:31:56,480 --> 00:32:00,720
uh for designing our however features is

00:31:58,799 --> 00:32:03,200
start with

00:32:00,720 --> 00:32:04,640
defining the the problem right so what

00:32:03,200 --> 00:32:08,000
problem are you trying to solve

00:32:04,640 --> 00:32:08,640
is this uh you know supporting a new

00:32:08,000 --> 00:32:11,279
emerging

00:32:08,640 --> 00:32:12,480
use case or you want to make the

00:32:11,279 --> 00:32:15,840
existing use case

00:32:12,480 --> 00:32:19,519
more for example more efficient and

00:32:15,840 --> 00:32:21,840
more you know secure right so um

00:32:19,519 --> 00:32:23,679
during this uh problem definition phase

00:32:21,840 --> 00:32:24,399
our software team actually works very

00:32:23,679 --> 00:32:27,840
closely

00:32:24,399 --> 00:32:29,440
to uh our hardware design team uh to

00:32:27,840 --> 00:32:31,519
give them input on

00:32:29,440 --> 00:32:33,679
you know hey what other you know pain

00:32:31,519 --> 00:32:36,480
points we see on the software side right

00:32:33,679 --> 00:32:38,000
and i i'm sure you know that's uh

00:32:36,480 --> 00:32:39,279
otherwise do the same thing you know the

00:32:38,000 --> 00:32:41,760
software team and also

00:32:39,279 --> 00:32:42,320
we get the input from our ecosystem

00:32:41,760 --> 00:32:43,840
partners

00:32:42,320 --> 00:32:45,919
on what other pinpoint they are

00:32:43,840 --> 00:32:47,039
observing right so this is a define the

00:32:45,919 --> 00:32:49,440
problem phase

00:32:47,039 --> 00:32:50,320
and then we were starting on the you

00:32:49,440 --> 00:32:52,240
know

00:32:50,320 --> 00:32:54,159
technology readiness kind of pace right

00:32:52,240 --> 00:32:55,279
so during the past finding doing the

00:32:54,159 --> 00:32:58,000
pocs

00:32:55,279 --> 00:32:59,840
to really make sure you know the um we

00:32:58,000 --> 00:33:02,159
have a hot you know sound

00:32:59,840 --> 00:33:02,960
you know our design and uh the hardware

00:33:02,159 --> 00:33:06,799
implementation

00:33:02,960 --> 00:33:09,360
is software friendly right so um

00:33:06,799 --> 00:33:10,240
and then that's uh when going to the um

00:33:09,360 --> 00:33:12,240
you know the

00:33:10,240 --> 00:33:13,360
um after the technical rate of phase we

00:33:12,240 --> 00:33:15,039
move on the

00:33:13,360 --> 00:33:17,760
assume this is approved then we go to

00:33:15,039 --> 00:33:18,880
the uh play pure office the plan for

00:33:17,760 --> 00:33:22,640
record phase

00:33:18,880 --> 00:33:25,760
right and we will you know that's um

00:33:22,640 --> 00:33:27,919
such right that's uh uh have

00:33:25,760 --> 00:33:30,080
our engineering team will do the you

00:33:27,919 --> 00:33:31,600
know the precision enabling right before

00:33:30,080 --> 00:33:34,080
hallways are available we'll

00:33:31,600 --> 00:33:35,600
implement this in for example in a

00:33:34,080 --> 00:33:38,320
software simulation environment

00:33:35,600 --> 00:33:39,360
so to make sure we have you know code as

00:33:38,320 --> 00:33:42,720
possible

00:33:39,360 --> 00:33:45,919
and then we will uh submit this to the

00:33:42,720 --> 00:33:47,360
you know the open source community uh to

00:33:45,919 --> 00:33:49,200
get the community feedback on

00:33:47,360 --> 00:33:52,080
architecture on the implementation

00:33:49,200 --> 00:33:54,000
and after you know that's uh uh many

00:33:52,080 --> 00:33:56,480
many rounds of discussions and we just

00:33:54,000 --> 00:33:57,200
got emerged into the open source uh

00:33:56,480 --> 00:33:59,360
community

00:33:57,200 --> 00:34:01,279
right so this is the upstream part and

00:33:59,360 --> 00:34:02,080
then we were on the downstream part we

00:34:01,279 --> 00:34:04,799
will work

00:34:02,080 --> 00:34:06,240
a lot with our uh you know downstream

00:34:04,799 --> 00:34:08,399
partners like the rehab

00:34:06,240 --> 00:34:09,359
you know suse and other and our csp

00:34:08,399 --> 00:34:11,200
partners

00:34:09,359 --> 00:34:13,359
to make sure all these technologies can

00:34:11,200 --> 00:34:16,960
productize in your distro in their

00:34:13,359 --> 00:34:19,760
uh deployment so i think that's kind of

00:34:16,960 --> 00:34:20,000
the high level flow of how we do you

00:34:19,760 --> 00:34:23,520
know

00:34:20,000 --> 00:34:26,560
our future enabling um

00:34:23,520 --> 00:34:29,679
in terms of um improvement

00:34:26,560 --> 00:34:29,679
i think that's um

00:34:30,639 --> 00:34:34,320
as i say i think currently i see you

00:34:33,440 --> 00:34:36,320
know we

00:34:34,320 --> 00:34:38,240
our software team is already involved a

00:34:36,320 --> 00:34:38,800
lot in the hardware feature definition

00:34:38,240 --> 00:34:40,879
we'll do

00:34:38,800 --> 00:34:42,079
many kind of hardware software code

00:34:40,879 --> 00:34:44,960
design together

00:34:42,079 --> 00:34:46,960
um you know but i think that's given the

00:34:44,960 --> 00:34:49,760
more and more importance of the software

00:34:46,960 --> 00:34:50,800
you know so i think i'm looking for you

00:34:49,760 --> 00:34:53,679
know we can

00:34:50,800 --> 00:34:55,200
do more on the you know the software

00:34:53,679 --> 00:34:57,839
hardware code design side

00:34:55,200 --> 00:34:58,800
so to really uh i think that's a lot of

00:34:57,839 --> 00:35:03,839
opportunity we

00:34:58,800 --> 00:35:03,839
we can kind of dig into in that space

00:35:06,240 --> 00:35:10,320
yeah i'll just add to say you know it's

00:35:08,720 --> 00:35:11,440
a challenge definitely especially

00:35:10,320 --> 00:35:13,920
because the

00:35:11,440 --> 00:35:16,079
hardware design cycles can be so long

00:35:13,920 --> 00:35:18,000
that by the time that

00:35:16,079 --> 00:35:19,839
feedback especially from the open source

00:35:18,000 --> 00:35:22,880
community uh is present

00:35:19,839 --> 00:35:26,160
then it's sort of too late to change

00:35:22,880 --> 00:35:26,800
things uh and you know that's that is a

00:35:26,160 --> 00:35:28,480
challenge that

00:35:26,800 --> 00:35:30,880
i'm not quite sure what the solution is

00:35:28,480 --> 00:35:32,640
you know certainly when

00:35:30,880 --> 00:35:34,400
you know a company like amd is

00:35:32,640 --> 00:35:36,160
developing new hardware features we will

00:35:34,400 --> 00:35:38,000
have conversations with

00:35:36,160 --> 00:35:39,599
our software partners about those and

00:35:38,000 --> 00:35:41,680
get feedback

00:35:39,599 --> 00:35:43,440
but you know we don't typically have

00:35:41,680 --> 00:35:46,320
those conversations with

00:35:43,440 --> 00:35:48,160
the public mailing lists for kind of

00:35:46,320 --> 00:35:51,440
obvious reasons and i'm assuming that

00:35:48,160 --> 00:35:53,280
you know intel works similarly and so

00:35:51,440 --> 00:35:54,400
you know the the downside of that is

00:35:53,280 --> 00:35:55,680
that by the time that there is a

00:35:54,400 --> 00:35:56,079
discussion on the public main list

00:35:55,680 --> 00:35:58,160
probably

00:35:56,079 --> 00:35:59,680
things are pretty well baked and there's

00:35:58,160 --> 00:36:01,359
there's less opportunities to

00:35:59,680 --> 00:36:03,040
incorporate feedback so

00:36:01,359 --> 00:36:04,560
you know i think that's something that

00:36:03,040 --> 00:36:04,960
it would be interesting to improve i'm

00:36:04,560 --> 00:36:06,320
not

00:36:04,960 --> 00:36:08,160
quite sure what that solution would look

00:36:06,320 --> 00:36:10,839
like but that is a

00:36:08,160 --> 00:36:12,000
sort of a gap i think in our design

00:36:10,839 --> 00:36:13,680
process

00:36:12,000 --> 00:36:16,079
i think it will be interesting to see

00:36:13,680 --> 00:36:19,040
what the risk five folks do with this

00:36:16,079 --> 00:36:21,040
and whether they manage to make a better

00:36:19,040 --> 00:36:22,079
job of the whole interaction given that

00:36:21,040 --> 00:36:23,280
they don't they're not

00:36:22,079 --> 00:36:24,560
unlike the rest of us they're not

00:36:23,280 --> 00:36:26,480
working under that same set of

00:36:24,560 --> 00:36:27,839
restrictions so are they going to be

00:36:26,480 --> 00:36:29,920
able to make a

00:36:27,839 --> 00:36:32,720
better designs as a result that will be

00:36:29,920 --> 00:36:32,720
interesting to watch

00:36:35,920 --> 00:36:40,400
yeah so this whole thing seems like an

00:36:37,680 --> 00:36:43,359
area where amd or intel

00:36:40,400 --> 00:36:45,040
uh and ibm an arm need to come together

00:36:43,359 --> 00:36:45,839
and invent a time machine that way you

00:36:45,040 --> 00:36:48,320
can go back

00:36:45,839 --> 00:36:49,280
and not do the project that that didn't

00:36:48,320 --> 00:36:50,720
land so

00:36:49,280 --> 00:36:51,920
if you do that that would be that would

00:36:50,720 --> 00:36:53,200
be great i think that would be a good

00:36:51,920 --> 00:36:54,880
solution

00:36:53,200 --> 00:36:56,240
one way of dealing with this is to get

00:36:54,880 --> 00:36:58,320
early engineering

00:36:56,240 --> 00:37:00,079
into public hands so to speak either in

00:36:58,320 --> 00:37:01,200
a designated open source lab or

00:37:00,079 --> 00:37:03,359
something like this right

00:37:01,200 --> 00:37:05,280
obviously the problem as david pointed

00:37:03,359 --> 00:37:06,720
out like you often don't want to let

00:37:05,280 --> 00:37:08,800
your

00:37:06,720 --> 00:37:10,320
new ideas surfaced too early right for

00:37:08,800 --> 00:37:13,040
competitive reasons right

00:37:10,320 --> 00:37:14,960
understand that but at the same point uh

00:37:13,040 --> 00:37:17,440
you know getting some engineers on

00:37:14,960 --> 00:37:18,640
maybe even emulation software right i

00:37:17,440 --> 00:37:21,440
mean that

00:37:18,640 --> 00:37:22,000
that would already help right because

00:37:21,440 --> 00:37:23,680
you know once

00:37:22,000 --> 00:37:24,960
the hardware is big there's very little

00:37:23,680 --> 00:37:27,760
you can change anymore right and you

00:37:24,960 --> 00:37:27,760
have to work around it

00:37:32,720 --> 00:37:37,040
okay great thanks so um up next we have

00:37:36,160 --> 00:37:40,640
some questions

00:37:37,040 --> 00:37:43,440
about getting into open source

00:37:40,640 --> 00:37:44,960
um about new contributors joining the

00:37:43,440 --> 00:37:47,200
projects and so on so

00:37:44,960 --> 00:37:48,640
the first one is virtualization and

00:37:47,200 --> 00:37:50,960
systems programming

00:37:48,640 --> 00:37:52,880
is in general considered low level uh is

00:37:50,960 --> 00:37:54,160
a low-level software field

00:37:52,880 --> 00:37:56,400
that new developers may find

00:37:54,160 --> 00:37:57,760
inaccessible how do you recommend

00:37:56,400 --> 00:37:58,640
getting started in open source

00:37:57,760 --> 00:38:01,359
virtualization

00:37:58,640 --> 00:38:01,359
as a developer

00:38:03,599 --> 00:38:07,680
um stop stop submitting patches is

00:38:06,720 --> 00:38:09,760
really the

00:38:07,680 --> 00:38:11,119
the key here i mean i think some people

00:38:09,760 --> 00:38:13,200
um

00:38:11,119 --> 00:38:15,200
don't see the low level aspect as being

00:38:13,200 --> 00:38:16,560
a barrier but see it as

00:38:15,200 --> 00:38:19,119
something that's really interesting and

00:38:16,560 --> 00:38:22,079
exciting i mean you know anyone can

00:38:19,119 --> 00:38:23,200
develop web applications um but uh

00:38:22,079 --> 00:38:25,599
developing you know

00:38:23,200 --> 00:38:26,960
low-level bit banging hardware stuff is

00:38:25,599 --> 00:38:29,440
is uh

00:38:26,960 --> 00:38:31,119
a rare skill and um exciting and

00:38:29,440 --> 00:38:33,119
interesting for many people so

00:38:31,119 --> 00:38:35,680
i don't see that being a barrier

00:38:33,119 --> 00:38:35,680
particularly

00:38:36,960 --> 00:38:40,480
yes i mean in some ways working at a low

00:38:39,119 --> 00:38:43,680
level is kind of it

00:38:40,480 --> 00:38:45,680
it's almost easier because if i'm

00:38:43,680 --> 00:38:47,040
working on emulation of some feature

00:38:45,680 --> 00:38:48,800
somebody has helpfully produced a

00:38:47,040 --> 00:38:50,480
several thousand page specification that

00:38:48,800 --> 00:38:52,160
says exactly what it needs to do

00:38:50,480 --> 00:38:54,880
i don't have to guess i don't have to do

00:38:52,160 --> 00:38:56,560
all this i don't have to deal with ui

00:38:54,880 --> 00:38:58,560
aspects very much which just as well

00:38:56,560 --> 00:39:00,079
because i'm terrible at them

00:38:58,560 --> 00:39:01,520
so in some ways it's quite easy it's

00:39:00,079 --> 00:39:02,720
like this the spec says this is what

00:39:01,520 --> 00:39:04,240
you've got to do you've just got to

00:39:02,720 --> 00:39:08,160
translate it all into code and

00:39:04,240 --> 00:39:08,160
hopefully it will work um

00:39:08,240 --> 00:39:11,680
i i think kind of the the barrier to

00:39:10,480 --> 00:39:14,400
entry with some of this

00:39:11,680 --> 00:39:16,160
is that software components like

00:39:14,400 --> 00:39:17,760
chromium are now so huge we have

00:39:16,160 --> 00:39:19,359
millions of lines of code that it could

00:39:17,760 --> 00:39:21,440
be hard to

00:39:19,359 --> 00:39:23,200
get a grasp on where you should maybe

00:39:21,440 --> 00:39:26,720
start so i think my

00:39:23,200 --> 00:39:28,160
advice for that is not to try and grasp

00:39:26,720 --> 00:39:28,640
the whole thing in your brain at once

00:39:28,160 --> 00:39:30,640
because

00:39:28,640 --> 00:39:32,400
nobody on the project has a view of how

00:39:30,640 --> 00:39:34,480
the whole thing works

00:39:32,400 --> 00:39:36,800
but you kind of maybe you have a small

00:39:34,480 --> 00:39:37,359
outline of where roughly all the pieces

00:39:36,800 --> 00:39:39,280
are

00:39:37,359 --> 00:39:40,800
but mostly it's like ignore all the

00:39:39,280 --> 00:39:42,720
stuff that is not relevant to whatever

00:39:40,800 --> 00:39:46,720
feature you're trying to implement

00:39:42,720 --> 00:39:48,320
and just go ahead and try and

00:39:46,720 --> 00:39:49,520
deal with the bit look at the code that

00:39:48,320 --> 00:39:53,520
you need to look at and don't look at

00:39:49,520 --> 00:39:53,520
the other 900 000 lines basically

00:39:53,839 --> 00:39:58,000
one choice is to basically look at the

00:39:55,440 --> 00:40:00,000
open uh open issues list

00:39:58,000 --> 00:40:01,200
and and pick one that looks interesting

00:40:00,000 --> 00:40:03,920
that's number one

00:40:01,200 --> 00:40:05,839
number two well with rpms and things in

00:40:03,920 --> 00:40:07,920
many cases you can stand up the system

00:40:05,839 --> 00:40:09,839
into a running level and my favorite

00:40:07,920 --> 00:40:10,880
tool for that is basically just run it

00:40:09,839 --> 00:40:13,520
under debugger and

00:40:10,880 --> 00:40:14,800
hit control c and see where you end up

00:40:13,520 --> 00:40:16,560
right and that's often just

00:40:14,800 --> 00:40:17,839
walking the stack gives you a lot of

00:40:16,560 --> 00:40:20,800
insights into any uh

00:40:17,839 --> 00:40:21,200
any software system right and at least

00:40:20,800 --> 00:40:22,960
in

00:40:21,200 --> 00:40:24,960
in the past that's how i learned systems

00:40:22,960 --> 00:40:27,599
right really just hitting ctrl c

00:40:24,960 --> 00:40:29,280
at runtime and seeing where's the code

00:40:27,599 --> 00:40:31,760
currently stuck and what can i learn

00:40:29,280 --> 00:40:31,760
along the way

00:40:35,839 --> 00:40:40,800
cool thanks for sharing that um any any

00:40:38,400 --> 00:40:44,560
other suggestions on how to get started

00:40:40,800 --> 00:40:44,560
in open source virtualization

00:40:44,800 --> 00:40:49,839
i think the other thing i would say is

00:40:46,720 --> 00:40:53,280
to it helps a lot to come and talk to us

00:40:49,839 --> 00:40:54,640
um because we know the code base we know

00:40:53,280 --> 00:40:57,040
what kind of

00:40:54,640 --> 00:40:59,040
features seem like they're relatively

00:40:57,040 --> 00:41:01,839
tractable for somebody who's new

00:40:59,040 --> 00:41:03,839
and some parts of kwemu are to be honest

00:41:01,839 --> 00:41:05,520
just not very well maintained

00:41:03,839 --> 00:41:07,839
so if you're coming along and your idea

00:41:05,520 --> 00:41:11,200
is i'm going to contribute to

00:41:07,839 --> 00:41:12,560
um some parts of cremeu and it turns out

00:41:11,200 --> 00:41:13,920
that there's actually nobody else in the

00:41:12,560 --> 00:41:15,280
upstream community that's really working

00:41:13,920 --> 00:41:16,640
on that at the moment

00:41:15,280 --> 00:41:18,319
it's going to be much harder to find

00:41:16,640 --> 00:41:22,560
somebody to review your code or to

00:41:18,319 --> 00:41:22,560
give you suggestions or whatever so

00:41:23,200 --> 00:41:25,760
if that's the thing you really really

00:41:24,319 --> 00:41:26,800
want to do then go ahead and do it but

00:41:25,760 --> 00:41:28,480
if you're kind of

00:41:26,800 --> 00:41:30,720
just interested in general and getting

00:41:28,480 --> 00:41:32,160
started then picking an area where there

00:41:30,720 --> 00:41:33,440
are other people working who can give

00:41:32,160 --> 00:41:35,839
you a helping hand i think it's

00:41:33,440 --> 00:41:35,839
important

00:41:44,000 --> 00:41:51,520
you so as a follow-up i think

00:41:47,440 --> 00:41:53,040
you mentioned um you know

00:41:51,520 --> 00:41:54,800
subsystems that are maintained to

00:41:53,040 --> 00:41:56,319
various degrees um

00:41:54,800 --> 00:41:57,839
one of the interesting things that

00:41:56,319 --> 00:42:01,119
sometimes

00:41:57,839 --> 00:42:03,280
comes up in in upstream contributions

00:42:01,119 --> 00:42:05,200
is this difference in in the in the

00:42:03,280 --> 00:42:06,960
maybe quality or the amount of

00:42:05,200 --> 00:42:08,960
time that's been invested in different

00:42:06,960 --> 00:42:10,240
parts of qmu and we have a question here

00:42:08,960 --> 00:42:12,960
that says

00:42:10,240 --> 00:42:14,560
is qmu still accessible for hobbyists

00:42:12,960 --> 00:42:17,680
with limited time

00:42:14,560 --> 00:42:20,319
and i guess that may be referring to

00:42:17,680 --> 00:42:21,440
we have a lot of infrastructure in qmu

00:42:20,319 --> 00:42:24,880
that someone who's new

00:42:21,440 --> 00:42:26,720
and maybe only focused on one

00:42:24,880 --> 00:42:28,079
particular new feature would have to

00:42:26,720 --> 00:42:31,280
learn and then

00:42:28,079 --> 00:42:33,760
and and might not know um

00:42:31,280 --> 00:42:34,560
so what are your thoughts on on that how

00:42:33,760 --> 00:42:37,359
can we make

00:42:34,560 --> 00:42:38,319
qmu not just a good corporate open

00:42:37,359 --> 00:42:45,839
source project

00:42:38,319 --> 00:42:45,839
but also good for hobbyists

00:42:48,720 --> 00:42:53,040
there's always a bit of a dilemma with

00:42:50,160 --> 00:42:55,119
um with very large open source projects

00:42:53,040 --> 00:42:58,440
that you you have to put these kind of

00:42:55,119 --> 00:42:59,599
standards and codes of you know

00:42:58,440 --> 00:43:02,720
contributions

00:42:59,599 --> 00:43:04,960
and style guides in place

00:43:02,720 --> 00:43:06,480
because you you hope to increase the

00:43:04,960 --> 00:43:08,079
total quality of the code by doing that

00:43:06,480 --> 00:43:10,160
but you actually by doing that you also

00:43:08,079 --> 00:43:12,960
make it harder to contribute

00:43:10,160 --> 00:43:14,560
um i don't know if there's a really good

00:43:12,960 --> 00:43:17,760
answer to that really

00:43:14,560 --> 00:43:20,880
um except to probably make it more

00:43:17,760 --> 00:43:23,119
automated so that um you know even if

00:43:20,880 --> 00:43:25,280
people aren't necessarily fully aware of

00:43:23,119 --> 00:43:26,880
how to format their patch or something

00:43:25,280 --> 00:43:28,560
they can submit something and then they

00:43:26,880 --> 00:43:31,280
will get an automated return

00:43:28,560 --> 00:43:31,920
saying you know format it this way and

00:43:31,280 --> 00:43:34,800
then

00:43:31,920 --> 00:43:35,359
they can proceed in steps that way but i

00:43:34,800 --> 00:43:38,839
i don't think

00:43:35,359 --> 00:43:40,880
any project has really solved this very

00:43:38,839 --> 00:43:42,960
well

00:43:40,880 --> 00:43:44,720
yeah so i think that's it's got to be

00:43:42,960 --> 00:43:47,280
harder for hobbyists these days just

00:43:44,720 --> 00:43:50,240
because kwemu is bigger and

00:43:47,280 --> 00:43:51,839
standards of we have gradually raised

00:43:50,240 --> 00:43:54,000
standards as you as you have to as

00:43:51,839 --> 00:43:56,319
kremeo has sort of morphed from being a

00:43:54,000 --> 00:43:57,440
here's a nice emulator toy to here's

00:43:56,319 --> 00:43:59,440
something that's actually going in

00:43:57,440 --> 00:44:00,880
people's

00:43:59,440 --> 00:44:02,720
servers and that's got a security

00:44:00,880 --> 00:44:06,240
boundary and all the

00:44:02,720 --> 00:44:08,800
issues associated with it so it's harder

00:44:06,240 --> 00:44:09,150
i think it is still possible absolutely

00:44:08,800 --> 00:44:10,800
um

00:44:09,150 --> 00:44:12,880
[Music]

00:44:10,800 --> 00:44:14,560
but also the direction of the project is

00:44:12,880 --> 00:44:16,160
going to be influenced by

00:44:14,560 --> 00:44:17,839
who is putting in more hours and

00:44:16,160 --> 00:44:18,640
inevitably the corporate contributors

00:44:17,839 --> 00:44:21,119
are putting in

00:44:18,640 --> 00:44:22,560
the bulk of the hours and that's that's

00:44:21,119 --> 00:44:24,400
just the way it is

00:44:22,560 --> 00:44:27,040
i i do agree with richard that we could

00:44:24,400 --> 00:44:28,720
definitely do better about

00:44:27,040 --> 00:44:30,560
making our process easier we have a

00:44:28,720 --> 00:44:32,160
fairly old school process that's mostly

00:44:30,560 --> 00:44:33,440
borrowed from the way that linux kernel

00:44:32,160 --> 00:44:36,240
tends to work

00:44:33,440 --> 00:44:36,960
and that is not very sort of 21st

00:44:36,240 --> 00:44:39,920
century

00:44:36,960 --> 00:44:42,960
friendly new contributors but changing

00:44:39,920 --> 00:44:42,960
process is very hard

00:44:48,839 --> 00:44:52,880
though

00:44:50,240 --> 00:44:53,280
okay thank you we have some questions

00:44:52,880 --> 00:44:55,839
about

00:44:53,280 --> 00:44:57,839
containers and vms uh the combination of

00:44:55,839 --> 00:44:59,200
containers and vms or the choice between

00:44:57,839 --> 00:45:01,680
them or using both

00:44:59,200 --> 00:45:04,560
has been an interesting thing to see in

00:45:01,680 --> 00:45:06,560
the past few years

00:45:04,560 --> 00:45:08,720
so the question we have is how do you

00:45:06,560 --> 00:45:09,839
see the future usage of full machine

00:45:08,720 --> 00:45:12,960
virtualization

00:45:09,839 --> 00:45:15,680
evolving into the

00:45:12,960 --> 00:45:16,720
the the ongoing competition from

00:45:15,680 --> 00:45:19,839
container-based

00:45:16,720 --> 00:45:19,839
deployment models

00:45:20,640 --> 00:45:24,000
well i mean i think we've seen for a

00:45:22,000 --> 00:45:25,599
really long time particularly since

00:45:24,000 --> 00:45:27,839
intel's clear linux project which has

00:45:25,599 --> 00:45:30,240
sort of morphed over time into cata

00:45:27,839 --> 00:45:33,520
containers that

00:45:30,240 --> 00:45:36,800
there is a space for the two to coexist

00:45:33,520 --> 00:45:38,560
for um the virtualization technologies

00:45:36,800 --> 00:45:40,319
in the certainly in the hardware and the

00:45:38,560 --> 00:45:42,560
low levels of the stack

00:45:40,319 --> 00:45:44,240
to harden containers because then today

00:45:42,560 --> 00:45:46,480
containers aren't actually very secure

00:45:44,240 --> 00:45:49,520
and people are using them in a

00:45:46,480 --> 00:45:51,520
in the expectation that they are

00:45:49,520 --> 00:45:54,000
as secure as virtualization which i'm

00:45:51,520 --> 00:45:56,400
afraid they they aren't really

00:45:54,000 --> 00:45:57,680
um but with virtualization technologies

00:45:56,400 --> 00:46:00,000
at the bottom end you can

00:45:57,680 --> 00:46:02,800
actually give people that promise

00:46:00,000 --> 00:46:06,000
deliver on that promise so

00:46:02,800 --> 00:46:06,000
i think that's where it's going

00:46:06,880 --> 00:46:11,359
so yeah i also think there's a there's a

00:46:09,680 --> 00:46:12,960
spectrum right i mean when you go from

00:46:11,359 --> 00:46:14,640
containers you have exactly the kernel

00:46:12,960 --> 00:46:16,800
exposures right i mean

00:46:14,640 --> 00:46:18,480
the various projects that we have once

00:46:16,800 --> 00:46:20,000
in pursuing and trying to figure out can

00:46:18,480 --> 00:46:22,160
we actually take some of the

00:46:20,000 --> 00:46:24,079
emerging virtualization techniques and

00:46:22,160 --> 00:46:25,359
isolation features that hardware provide

00:46:24,079 --> 00:46:27,440
us and basically drive them

00:46:25,359 --> 00:46:29,920
deeper into the kernel right so you have

00:46:27,440 --> 00:46:32,079
actually memory management techniques

00:46:29,920 --> 00:46:33,599
uh to isolate parts of the kernel

00:46:32,079 --> 00:46:34,880
because the kernel doesn't have to touch

00:46:33,599 --> 00:46:35,440
many of the data structures that the

00:46:34,880 --> 00:46:39,599
user

00:46:35,440 --> 00:46:39,599
uses right at the same time

00:46:40,079 --> 00:46:43,119
you're basically having a resource

00:46:41,280 --> 00:46:45,760
problem right containers are rather thin

00:46:43,119 --> 00:46:47,599
you love the uh the way of uh how

00:46:45,760 --> 00:46:50,160
containers are being managed right

00:46:47,599 --> 00:46:50,880
and slipping a vm underneath will cost

00:46:50,160 --> 00:46:52,880
you dearly

00:46:50,880 --> 00:46:54,160
right in terms of memory overhead and

00:46:52,880 --> 00:46:56,240
things like this

00:46:54,160 --> 00:46:58,319
so one way and i think qmu is already

00:46:56,240 --> 00:47:00,240
going after that is busy how you can

00:46:58,319 --> 00:47:02,000
get to thinner machines how can you make

00:47:00,240 --> 00:47:04,000
your distribution smaller

00:47:02,000 --> 00:47:05,599
right so that the overhead you're paying

00:47:04,000 --> 00:47:06,560
for a virtual machine backing a

00:47:05,599 --> 00:47:09,839
container

00:47:06,560 --> 00:47:11,040
is basically uh removed or not at least

00:47:09,839 --> 00:47:13,119
reduced

00:47:11,040 --> 00:47:14,960
right so there's basically across the

00:47:13,119 --> 00:47:16,640
stack many things that can be done to

00:47:14,960 --> 00:47:19,599
provide the customer choice

00:47:16,640 --> 00:47:20,800
right where you can still get the same

00:47:19,599 --> 00:47:23,280
way of managing

00:47:20,800 --> 00:47:24,160
uh your applications maybe through a

00:47:23,280 --> 00:47:26,240
container image

00:47:24,160 --> 00:47:27,599
right but at the same time provides

00:47:26,240 --> 00:47:31,040
increased

00:47:27,599 --> 00:47:32,240
increased security or even isolation

00:47:31,040 --> 00:47:34,559
right i mean there are

00:47:32,240 --> 00:47:35,839
various projects where we for instance

00:47:34,559 --> 00:47:39,119
the

00:47:35,839 --> 00:47:39,920
security features of sav or tdx can be

00:47:39,119 --> 00:47:41,760
basically

00:47:39,920 --> 00:47:44,800
raised with a vm to back a cutter

00:47:41,760 --> 00:47:44,800
container as an example

00:47:45,359 --> 00:47:48,800
yeah to me i think my personal opinion

00:47:47,280 --> 00:47:51,119
is i think this is

00:47:48,800 --> 00:47:52,800
to me i think this is not a final choice

00:47:51,119 --> 00:47:54,559
it's a you know this is a vm

00:47:52,800 --> 00:47:56,800
or a container right to me i think

00:47:54,559 --> 00:47:58,000
that's uh this will be a kind of a

00:47:56,800 --> 00:48:01,359
blended technology

00:47:58,000 --> 00:48:03,680
so that's and the people may have a

00:48:01,359 --> 00:48:04,559
different usage requirement and then we

00:48:03,680 --> 00:48:06,240
will pick the

00:48:04,559 --> 00:48:08,240
um you know kind of technology that is

00:48:06,240 --> 00:48:08,960
best suit for them right so for example

00:48:08,240 --> 00:48:12,400
i think today

00:48:08,960 --> 00:48:14,000
it's uh you know um

00:48:12,400 --> 00:48:15,839
you know it's already in the container

00:48:14,000 --> 00:48:17,599
space as richard and

00:48:15,839 --> 00:48:20,079
you know who just mentioned there was

00:48:17,599 --> 00:48:22,160
you know the ad using the vt technology

00:48:20,079 --> 00:48:24,160
the lightweight vm technology to improve

00:48:22,160 --> 00:48:25,359
the security and isolation for container

00:48:24,160 --> 00:48:27,359
right and also

00:48:25,359 --> 00:48:29,280
a lot of uh you know container i think

00:48:27,359 --> 00:48:31,599
80 percent of the container today that's

00:48:29,280 --> 00:48:33,040
running in the vm right so not one

00:48:31,599 --> 00:48:36,079
containing one vm but

00:48:33,040 --> 00:48:37,440
you know um they were pulsing the 1vm so

00:48:36,079 --> 00:48:39,040
i think that's uh um

00:48:37,440 --> 00:48:40,960
you know yeah i think it's not bad of

00:48:39,040 --> 00:48:42,400
choice to me that's uh this kind of uh

00:48:40,960 --> 00:48:44,960
you know it was to be a blended

00:48:42,400 --> 00:48:44,960
technology

00:48:45,599 --> 00:48:48,720
yeah i i think i agree with that you

00:48:47,520 --> 00:48:50,640
know i think that the

00:48:48,720 --> 00:48:53,040
use cases of lightweight virtualization

00:48:50,640 --> 00:48:55,119
are really interesting with containers

00:48:53,040 --> 00:48:57,119
i also wonder what sort of the economic

00:48:55,119 --> 00:48:59,119
impact is going to be

00:48:57,119 --> 00:49:01,040
if it becomes just so much cheaper to

00:48:59,119 --> 00:49:02,400
run container type workloads and

00:49:01,040 --> 00:49:04,960
especially in public clouds

00:49:02,400 --> 00:49:08,559
it could incentivize people to go even

00:49:04,960 --> 00:49:08,559
further down that path potentially

00:49:10,800 --> 00:49:14,800
okay well thanks a lot we're reaching

00:49:13,599 --> 00:49:16,960
the end of our time

00:49:14,800 --> 00:49:18,640
so i want to thank you all for being

00:49:16,960 --> 00:49:21,440
part of this panel

00:49:18,640 --> 00:49:23,040
and i hope that um this was a good

00:49:21,440 --> 00:49:25,200
discussion that everyone enjoyed thank

00:49:23,040 --> 00:49:28,559
you very much

00:49:25,200 --> 00:49:28,559
thank you thank you

00:49:28,839 --> 00:49:31,839

YouTube URL: https://www.youtube.com/watch?v=STSsNGKARAk


