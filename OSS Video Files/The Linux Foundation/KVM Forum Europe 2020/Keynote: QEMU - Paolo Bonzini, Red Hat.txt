Title: Keynote: QEMU - Paolo Bonzini, Red Hat
Publication date: 2020-11-10
Playlist: KVM Forum Europe 2020
Description: 
	Keynote: QEMU - Paolo Bonzini, Red Hat
Captions: 
	00:00:05,839 --> 00:00:08,639
good morning

00:00:06,560 --> 00:00:10,639
or good afternoon my name is baru

00:00:08,639 --> 00:00:11,440
bondini i'm a distinguished engineer at

00:00:10,639 --> 00:00:13,920
redhead

00:00:11,440 --> 00:00:15,759
and i would like to present qamusta to

00:00:13,920 --> 00:00:17,440
support for 2020.

00:00:15,759 --> 00:00:20,000
let's start looking at the previous here

00:00:17,440 --> 00:00:20,560
at lights we had deprecated python 2

00:00:20,000 --> 00:00:23,199
support

00:00:20,560 --> 00:00:24,560
introduced config developed faster boot

00:00:23,199 --> 00:00:25,920
and started using sphinx for

00:00:24,560 --> 00:00:27,760
documentation

00:00:25,920 --> 00:00:28,960
this slide comes from the last year

00:00:27,760 --> 00:00:30,480
status report

00:00:28,960 --> 00:00:32,960
and i would like to report further

00:00:30,480 --> 00:00:34,960
progress especially on the first and the

00:00:32,960 --> 00:00:36,640
last bullets

00:00:34,960 --> 00:00:38,960
the big change with respect to python

00:00:36,640 --> 00:00:40,960
support is that we only support python 3

00:00:38,960 --> 00:00:42,800
and we follow the python life cycle

00:00:40,960 --> 00:00:44,480
so we do not support any more python

00:00:42,800 --> 00:00:48,239
releases that have been declared

00:00:44,480 --> 00:00:50,320
end of life by this python developers

00:00:48,239 --> 00:00:52,399
we also completed the switch to sphinx

00:00:50,320 --> 00:00:54,960
and i will talk more about the benefits

00:00:52,399 --> 00:00:57,680
that this brought later

00:00:54,960 --> 00:00:59,680
among the other highlights of 2020 i

00:00:57,680 --> 00:01:00,480
want to point out new targets and boards

00:00:59,680 --> 00:01:02,480
because these

00:01:00,480 --> 00:01:04,239
had existed for a long time as forks of

00:01:02,480 --> 00:01:07,040
qmu and they were now

00:01:04,239 --> 00:01:08,880
merged upstream another new feature is

00:01:07,040 --> 00:01:10,479
the verteio file system daemon

00:01:08,880 --> 00:01:12,400
which was already presented last year

00:01:10,479 --> 00:01:14,320
but is now merged

00:01:12,400 --> 00:01:15,680
and finally the improved ci and

00:01:14,320 --> 00:01:18,159
measurement build systems

00:01:15,680 --> 00:01:19,840
are both very important for qm

00:01:18,159 --> 00:01:22,320
developers

00:01:19,840 --> 00:01:24,880
with respect to ci gitlab is now the

00:01:22,320 --> 00:01:26,320
main ci system that we rely upon

00:01:24,880 --> 00:01:27,920
it also takes care of building

00:01:26,320 --> 00:01:30,560
containers for developers to

00:01:27,920 --> 00:01:32,000
produce ci issues on their machines and

00:01:30,560 --> 00:01:34,720
for other ci systems

00:01:32,000 --> 00:01:36,640
such as ship payroll however shippable

00:01:34,720 --> 00:01:38,240
is being phased out in favor of gitlab

00:01:36,640 --> 00:01:40,479
itself

00:01:38,240 --> 00:01:42,240
we still use travis to test the wide

00:01:40,479 --> 00:01:44,399
variety of big configurations and to

00:01:42,240 --> 00:01:45,680
cover native builds on non-x86

00:01:44,399 --> 00:01:49,520
architectures

00:01:45,680 --> 00:01:52,159
mca os bills have moved to serious ci

00:01:49,520 --> 00:01:53,759
and now serious ci covers windows builds

00:01:52,159 --> 00:01:56,079
as well

00:01:53,759 --> 00:01:58,479
we also use it for freebsd as has been

00:01:56,079 --> 00:02:00,640
the case for a long time

00:01:58,479 --> 00:02:02,079
another new addition is the ss pass

00:02:00,640 --> 00:02:04,399
project

00:02:02,079 --> 00:02:05,520
that relies on the fising support that

00:02:04,399 --> 00:02:07,360
was also merged

00:02:05,520 --> 00:02:09,119
in the beginning of this year and

00:02:07,360 --> 00:02:11,920
finally we are now running coverity

00:02:09,119 --> 00:02:14,160
daily rather than weekly as before

00:02:11,920 --> 00:02:15,680
for the future we plan to limit further

00:02:14,160 --> 00:02:18,160
views of travis

00:02:15,680 --> 00:02:18,800
and we would also like to add non x86

00:02:18,160 --> 00:02:22,560
runners

00:02:18,800 --> 00:02:24,400
for gitlab that are specific to qmo this

00:02:22,560 --> 00:02:26,480
would let us integrate apache with

00:02:24,400 --> 00:02:28,160
gitlab ci and make sure that there is a

00:02:26,480 --> 00:02:31,360
contributor

00:02:28,160 --> 00:02:32,239
will be able to use those runners we

00:02:31,360 --> 00:02:33,840
also have

00:02:32,239 --> 00:02:35,760
some configurations that are not yet

00:02:33,840 --> 00:02:37,519
covered by ci and they are only tested

00:02:35,760 --> 00:02:38,480
by peter middle before applying for

00:02:37,519 --> 00:02:40,239
requests

00:02:38,480 --> 00:02:42,080
this set should shrink further and

00:02:40,239 --> 00:02:44,239
further until ultimately

00:02:42,080 --> 00:02:46,800
the ci can be used as gate for

00:02:44,239 --> 00:02:49,280
maintainable requests

00:02:46,800 --> 00:02:49,840
now let's talk a bit about technical

00:02:49,280 --> 00:02:51,680
depth

00:02:49,840 --> 00:02:54,800
how kiermu suffered from it and what we

00:02:51,680 --> 00:02:57,280
did about it in 2020

00:02:54,800 --> 00:02:57,920
one common aspect of technical depth is

00:02:57,280 --> 00:02:59,840
that

00:02:57,920 --> 00:03:01,040
often it appears in areas that go by

00:02:59,840 --> 00:03:03,040
accretion and

00:03:01,040 --> 00:03:04,560
without a solid design foundation that

00:03:03,040 --> 00:03:06,000
support that growth

00:03:04,560 --> 00:03:08,000
typically there's also limited

00:03:06,000 --> 00:03:10,800
documentation and few people knowing

00:03:08,000 --> 00:03:13,040
their incoming details

00:03:10,800 --> 00:03:13,840
if those areas then are modified by many

00:03:13,040 --> 00:03:15,519
people

00:03:13,840 --> 00:03:17,440
the changes will not be reviewed

00:03:15,519 --> 00:03:19,440
accurately despite the best intention of

00:03:17,440 --> 00:03:22,879
the developers

00:03:19,440 --> 00:03:24,879
and that's how technical depth emerges

00:03:22,879 --> 00:03:26,560
often we also speak of technical network

00:03:24,879 --> 00:03:27,280
areas where the tools we use are

00:03:26,560 --> 00:03:29,519
obsolete

00:03:27,280 --> 00:03:31,120
and have limited interoperability with

00:03:29,519 --> 00:03:32,560
the rest of the world

00:03:31,120 --> 00:03:34,560
for example this was the case for

00:03:32,560 --> 00:03:36,640
documentation

00:03:34,560 --> 00:03:38,640
and documentation together with qrm and

00:03:36,640 --> 00:03:41,440
the build system was one area where

00:03:38,640 --> 00:03:42,720
qa must suffer from technical depth

00:03:41,440 --> 00:03:44,319
camus was using

00:03:42,720 --> 00:03:45,599
the key info as the source format for

00:03:44,319 --> 00:03:47,519
documentation the key info is a

00:03:45,599 --> 00:03:50,319
perfectly fine format

00:03:47,519 --> 00:03:50,720
but it's hard to extend because it's

00:03:50,319 --> 00:03:52,959
even

00:03:50,720 --> 00:03:55,680
hard to just find a good parser for the

00:03:52,959 --> 00:03:57,439
team for besides the making for tool

00:03:55,680 --> 00:03:59,680
therefore it was hard to integrate the

00:03:57,439 --> 00:04:02,879
documentation build with any other tool

00:03:59,680 --> 00:04:04,560
than the shell and make for example

00:04:02,879 --> 00:04:06,159
we have had documentation comments in

00:04:04,560 --> 00:04:06,720
the code for almost 10 years now but

00:04:06,159 --> 00:04:08,879
they were

00:04:06,720 --> 00:04:11,040
basically unused because the developer

00:04:08,879 --> 00:04:15,360
documentation was just a bunch of files

00:04:11,040 --> 00:04:17,359
it wasn't properly bundled into a manual

00:04:15,360 --> 00:04:19,680
also the only time where we built and

00:04:17,359 --> 00:04:22,320
upload the manuals was at release time

00:04:19,680 --> 00:04:23,520
by using sphinx we were able to extend

00:04:22,320 --> 00:04:26,880
the purposes

00:04:23,520 --> 00:04:27,759
with python code basically creating

00:04:26,880 --> 00:04:30,400
entire parts

00:04:27,759 --> 00:04:31,919
of the documentation programmatically we

00:04:30,400 --> 00:04:33,759
will use the kernel dock script from

00:04:31,919 --> 00:04:36,000
linux to include documentation from the

00:04:33,759 --> 00:04:38,320
source code in the developer manual

00:04:36,000 --> 00:04:41,120
and we use pandoc to convert by existing

00:04:38,320 --> 00:04:43,280
taking for sources to restructure text

00:04:41,120 --> 00:04:45,199
we also have now continuous deployment

00:04:43,280 --> 00:04:46,639
of the manual as a result

00:04:45,199 --> 00:04:48,840
and you can find the latest camera

00:04:46,639 --> 00:04:50,880
manual at any given time on

00:04:48,840 --> 00:04:53,280
camera.readerdocs.io

00:04:50,880 --> 00:04:54,320
the next area that i'd like to touch is

00:04:53,280 --> 00:04:56,080
qrm

00:04:54,320 --> 00:04:58,080
the main problem with qrm probably was

00:04:56,080 --> 00:04:58,880
that it was even even clearer to most

00:04:58,080 --> 00:05:02,000
people

00:04:58,880 --> 00:05:03,600
why qm existed when qm was introduced it

00:05:02,000 --> 00:05:04,080
was presented as a consistent object

00:05:03,600 --> 00:05:05,919
model

00:05:04,080 --> 00:05:08,000
aiming to unify the configuration of

00:05:05,919 --> 00:05:09,759
devices and backends

00:05:08,000 --> 00:05:11,199
but this doesn't really answer the

00:05:09,759 --> 00:05:14,160
question of why qm

00:05:11,199 --> 00:05:16,320
looks like it does to the programmer it

00:05:14,160 --> 00:05:17,680
doesn't explain the principles of qm to

00:05:16,320 --> 00:05:19,840
developers

00:05:17,680 --> 00:05:20,800
we have made some progress in that area

00:05:19,840 --> 00:05:22,880
first of all

00:05:20,800 --> 00:05:24,560
the qm documentation is more accessible

00:05:22,880 --> 00:05:25,360
now that we have a proper developer

00:05:24,560 --> 00:05:26,880
manual

00:05:25,360 --> 00:05:28,560
but also through mailing these

00:05:26,880 --> 00:05:30,720
discussions we got to a definition of

00:05:28,560 --> 00:05:32,720
qm's design that looks like this

00:05:30,720 --> 00:05:33,840
current stamp system is about objects

00:05:32,720 --> 00:05:36,639
and their properties

00:05:33,840 --> 00:05:38,080
and lets objects expose properties to

00:05:36,639 --> 00:05:40,880
multiple channels

00:05:38,080 --> 00:05:42,720
these channels include qnp the command

00:05:40,880 --> 00:05:45,840
line and the human monitor

00:05:42,720 --> 00:05:48,560
there is a lot of work to do on qm for

00:05:45,840 --> 00:05:50,160
example with respect to introspection

00:05:48,560 --> 00:05:52,320
for now what we did was improving the

00:05:50,160 --> 00:05:54,639
documentation reducing the boilerplate

00:05:52,320 --> 00:05:56,800
that is needed to implement qrm classes

00:05:54,639 --> 00:05:58,000
and also making the udav apis more

00:05:56,800 --> 00:06:01,360
similar to the rest

00:05:58,000 --> 00:06:03,919
of qrm qdev was the pre-existing object

00:06:01,360 --> 00:06:06,800
model that was used for devices

00:06:03,919 --> 00:06:07,600
and while it is now based on qm a lot of

00:06:06,800 --> 00:06:11,680
its apis

00:06:07,600 --> 00:06:13,840
had retained the original flavor

00:06:11,680 --> 00:06:14,880
by making these apis more similar to the

00:06:13,840 --> 00:06:16,400
rest of qm

00:06:14,880 --> 00:06:18,400
we hope to make it easier for new

00:06:16,400 --> 00:06:21,680
developers to log to dev

00:06:18,400 --> 00:06:22,639
and qrm and finally the amazon build

00:06:21,680 --> 00:06:24,080
system

00:06:22,639 --> 00:06:26,000
i will stand for a little bit on a

00:06:24,080 --> 00:06:28,000
soapbox and talk a bit about it because

00:06:26,000 --> 00:06:30,080
it's a very large change

00:06:28,000 --> 00:06:31,520
i don't know who said this but i picked

00:06:30,080 --> 00:06:33,039
your two friends at the bar

00:06:31,520 --> 00:06:35,039
which is the right occurrence this day

00:06:33,039 --> 00:06:36,720
of course one of them

00:06:35,039 --> 00:06:38,000
is a little bit tipsy and says to the

00:06:36,720 --> 00:06:39,520
other you know the problem with

00:06:38,000 --> 00:06:40,080
programmers is that when they have a

00:06:39,520 --> 00:06:42,319
problem

00:06:40,080 --> 00:06:43,120
they start to program and this is true

00:06:42,319 --> 00:06:45,120
and that's how

00:06:43,120 --> 00:06:46,479
you end up with this kind of code in

00:06:45,120 --> 00:06:50,160
your group system

00:06:46,479 --> 00:06:51,520
and also this code now i must say that

00:06:50,160 --> 00:06:52,560
this beauty was also very well

00:06:51,520 --> 00:06:54,479
documented

00:06:52,560 --> 00:06:55,759
probably it had more lines of comments

00:06:54,479 --> 00:06:57,520
than lines of code

00:06:55,759 --> 00:06:59,599
but that didn't make it any easier to

00:06:57,520 --> 00:07:01,360
debug so

00:06:59,599 --> 00:07:02,880
even though we cannot guarantee that the

00:07:01,360 --> 00:07:04,880
build system will be simple

00:07:02,880 --> 00:07:06,400
maybe we should make sure that people

00:07:04,880 --> 00:07:09,280
need to debug the build system

00:07:06,400 --> 00:07:11,199
as little as possible what does it mean

00:07:09,280 --> 00:07:12,400
to keep the build system logic as simple

00:07:11,199 --> 00:07:14,400
as possible

00:07:12,400 --> 00:07:16,720
the choice for qm's newbie system was

00:07:14,400 --> 00:07:18,960
that each file should only be read once

00:07:16,720 --> 00:07:20,960
so you first gather the data you process

00:07:18,960 --> 00:07:23,360
it and then move on to the next phase

00:07:20,960 --> 00:07:25,120
which operates in the same way

00:07:23,360 --> 00:07:27,759
in the old build system reading the same

00:07:25,120 --> 00:07:28,639
file multiple times for example all the

00:07:27,759 --> 00:07:30,960
main files

00:07:28,639 --> 00:07:32,960
made it slow but also caused namespace

00:07:30,960 --> 00:07:36,319
collisions and ordering issues that were

00:07:32,960 --> 00:07:38,080
hard to debug the problem with doing

00:07:36,319 --> 00:07:39,199
this kind of surgery to a project as

00:07:38,080 --> 00:07:41,039
large as qmu

00:07:39,199 --> 00:07:42,960
is that it's not really possible to

00:07:41,039 --> 00:07:45,039
convert everything at once

00:07:42,960 --> 00:07:46,479
for camera 5.2 we have established the

00:07:45,039 --> 00:07:47,520
foundation and the beginning of the

00:07:46,479 --> 00:07:49,360
development phase

00:07:47,520 --> 00:07:50,879
and then converted much of the low

00:07:49,360 --> 00:07:52,560
hanging for it

00:07:50,879 --> 00:07:54,080
everything else can be done in due time

00:07:52,560 --> 00:07:56,319
and for the process we'll make sure to

00:07:54,080 --> 00:07:57,919
work with melon upstream

00:07:56,319 --> 00:07:59,440
whenever there is something that can be

00:07:57,919 --> 00:08:00,000
improved in amazon we have noted it

00:07:59,440 --> 00:08:01,680
already

00:08:00,000 --> 00:08:03,759
and we have explained any workloads that

00:08:01,680 --> 00:08:06,479
were needed

00:08:03,759 --> 00:08:08,319
in fact going from make files to amazon

00:08:06,479 --> 00:08:10,240
was a very large change not only

00:08:08,319 --> 00:08:12,479
in terms of the sheer amount of code

00:08:10,240 --> 00:08:14,560
changes but also in terms of paradigm

00:08:12,479 --> 00:08:15,759
and trade-offs shell and makefile for

00:08:14,560 --> 00:08:18,400
example

00:08:15,759 --> 00:08:20,479
are very flexible but they are rather

00:08:18,400 --> 00:08:21,919
low level and they only support strings

00:08:20,479 --> 00:08:24,080
as the data types

00:08:21,919 --> 00:08:25,680
on the other hand meson has high level

00:08:24,080 --> 00:08:27,120
constructs and data types

00:08:25,680 --> 00:08:29,440
but it operates at the level of a

00:08:27,120 --> 00:08:31,039
command as an array of strings

00:08:29,440 --> 00:08:32,719
rather than at the level of the shared

00:08:31,039 --> 00:08:35,360
pipeline

00:08:32,719 --> 00:08:37,519
another difference is that make is a

00:08:35,360 --> 00:08:38,320
declarative system and the macros we had

00:08:37,519 --> 00:08:40,159
on top

00:08:38,320 --> 00:08:41,440
were not really declarative but they

00:08:40,159 --> 00:08:44,000
tried to fake

00:08:41,440 --> 00:08:45,200
being declarative amazonia selling study

00:08:44,000 --> 00:08:48,320
is more

00:08:45,200 --> 00:08:52,320
of the imperative kind though it

00:08:48,320 --> 00:08:53,600
lacks aliasing and mostly has unmutable

00:08:52,320 --> 00:08:55,600
objects and that mitigates the

00:08:53,600 --> 00:08:58,240
difference it also makes it harder to

00:08:55,600 --> 00:09:00,160
misuse meson

00:08:58,240 --> 00:09:01,839
number of lines of code is not really

00:09:00,160 --> 00:09:02,480
different because one of the scripts we

00:09:01,839 --> 00:09:04,399
used

00:09:02,480 --> 00:09:05,920
to is the transition is actually pretty

00:09:04,399 --> 00:09:09,120
large the script

00:09:05,920 --> 00:09:10,720
called ninja tool will hopefully

00:09:09,120 --> 00:09:12,640
disappear already before the next

00:09:10,720 --> 00:09:14,320
release and once you discount it

00:09:12,640 --> 00:09:17,120
the new build system is already about 1

00:09:14,320 --> 00:09:18,959
000 lines or 10 percent smaller

00:09:17,120 --> 00:09:21,920
most of the reduction comes from the

00:09:18,959 --> 00:09:23,760
computer script but the make file says

00:09:21,920 --> 00:09:25,600
also become much smaller

00:09:23,760 --> 00:09:27,040
and especially all of the complicated

00:09:25,600 --> 00:09:29,440
logic from those slides

00:09:27,040 --> 00:09:31,519
is gone of course if make is also gone

00:09:29,440 --> 00:09:33,040
the build is entirely non-recursive

00:09:31,519 --> 00:09:35,360
and the remaining make file logic is

00:09:33,040 --> 00:09:36,800
manageable since it's only about 400

00:09:35,360 --> 00:09:40,240
lines of code

00:09:36,800 --> 00:09:42,160
finally here is the fun part i decided

00:09:40,240 --> 00:09:44,080
not to include the traditional count of

00:09:42,160 --> 00:09:45,600
committee reviews but rather do a little

00:09:44,080 --> 00:09:48,080
who's who game

00:09:45,600 --> 00:09:49,360
and starting with our interns for google

00:09:48,080 --> 00:09:51,600
summer of code

00:09:49,360 --> 00:09:53,120
we also participated in outreach but

00:09:51,600 --> 00:09:55,920
unfortunately we didn't get

00:09:53,120 --> 00:09:56,800
an intern from that program in summer of

00:09:55,920 --> 00:09:59,200
code however

00:09:56,800 --> 00:10:00,399
we got three and not only did all three

00:09:59,200 --> 00:10:03,040
students pass

00:10:00,399 --> 00:10:04,079
also their code has already been merged

00:10:03,040 --> 00:10:06,959
cesar contributed

00:10:04,079 --> 00:10:08,240
emulation for u2f security keys philip

00:10:06,959 --> 00:10:10,480
worked on linux user

00:10:08,240 --> 00:10:11,680
and ahmed established a framework for

00:10:10,480 --> 00:10:15,600
continuous benchmarking

00:10:11,680 --> 00:10:17,760
of tcg performance moving on

00:10:15,600 --> 00:10:19,360
here are a few shout outs to some

00:10:17,760 --> 00:10:21,279
members of the community

00:10:19,360 --> 00:10:22,720
in many cases their work has been

00:10:21,279 --> 00:10:23,760
mentioned already earlier in the

00:10:22,720 --> 00:10:26,959
presentation

00:10:23,760 --> 00:10:28,320
for example thomas and alex did a lot of

00:10:26,959 --> 00:10:30,399
work on ci

00:10:28,320 --> 00:10:32,320
the qm could have refactoring was

00:10:30,399 --> 00:10:34,880
completed thanks to marcus ambuster

00:10:32,320 --> 00:10:37,200
daniel baranje and eduardo habcost

00:10:34,880 --> 00:10:39,519
and eduardo also worked on documentation

00:10:37,200 --> 00:10:41,600
together with peter my dad

00:10:39,519 --> 00:10:43,680
also richard henderson kept on doing

00:10:41,600 --> 00:10:45,120
great work on tcg and on a lot of other

00:10:43,680 --> 00:10:47,279
parts of camille

00:10:45,120 --> 00:10:48,720
and also i would like to thank lauren

00:10:47,279 --> 00:10:49,440
and philippe for keeping live the

00:10:48,720 --> 00:10:52,480
hobbiest

00:10:49,440 --> 00:10:54,560
origins of kiamu so to speak and of

00:10:52,480 --> 00:10:56,399
course to peter for merging everything

00:10:54,560 --> 00:10:58,079
and then ensuring that qmo development

00:10:56,399 --> 00:11:01,440
runs smoothly

00:10:58,079 --> 00:11:03,200
so what's next for 2021

00:11:01,440 --> 00:11:04,640
it's quite likely that we will use

00:11:03,200 --> 00:11:07,120
gitlab more

00:11:04,640 --> 00:11:07,760
here i listed five features that qmo

00:11:07,120 --> 00:11:10,399
could use

00:11:07,760 --> 00:11:10,800
from bitlab probably we won't use all of

00:11:10,399 --> 00:11:14,160
them

00:11:10,800 --> 00:11:16,000
but still here are some ideas

00:11:14,160 --> 00:11:17,519
generating and deploying to a new static

00:11:16,000 --> 00:11:19,440
site chemo.org

00:11:17,519 --> 00:11:21,680
could be done throughout bitlab pipeline

00:11:19,440 --> 00:11:23,600
for example and perhaps even the primary

00:11:21,680 --> 00:11:25,839
repository for qmo could be hosted on

00:11:23,600 --> 00:11:28,959
gitlab instead of relying

00:11:25,839 --> 00:11:31,040
on the qmo project's on servers release

00:11:28,959 --> 00:11:34,640
cables could also be prepared during

00:11:31,040 --> 00:11:37,600
gitlab ci which we don't currently do

00:11:34,640 --> 00:11:40,160
and this would make the process of

00:11:37,600 --> 00:11:42,240
cutting your release more automatic

00:11:40,160 --> 00:11:43,360
github also provides issue tracking and

00:11:42,240 --> 00:11:45,120
the wiki

00:11:43,360 --> 00:11:47,440
currently we use respectively launched

00:11:45,120 --> 00:11:49,360
by the media wiki but immigration here

00:11:47,440 --> 00:11:52,399
is more complex because of course we

00:11:49,360 --> 00:11:54,639
would have to move existing data

00:11:52,399 --> 00:11:56,000
a hot topic is going to be rethinking

00:11:54,639 --> 00:11:57,680
the qm api

00:11:56,000 --> 00:11:59,600
we had a huge mailing list thread

00:11:57,680 --> 00:12:02,399
between last december and last february

00:11:59,600 --> 00:12:03,839
and one idea that surfaced it was to

00:12:02,399 --> 00:12:06,240
simplify the relation

00:12:03,839 --> 00:12:07,680
between qmo and management tools by

00:12:06,240 --> 00:12:09,839
making the configuration

00:12:07,680 --> 00:12:10,720
of the vm more homogeneous for example

00:12:09,839 --> 00:12:12,959
right now we have

00:12:10,720 --> 00:12:14,320
substantial differences between how to

00:12:12,959 --> 00:12:16,639
configure

00:12:14,320 --> 00:12:20,639
the vm initially and how to later hot

00:12:16,639 --> 00:12:23,360
plug additional hardware back-ends

00:12:20,639 --> 00:12:26,560
this means we would like to look at all

00:12:23,360 --> 00:12:28,800
of qmu's 131 command line options

00:12:26,560 --> 00:12:30,560
and decide for which we would need to

00:12:28,800 --> 00:12:32,000
provide an alternative means to do the

00:12:30,560 --> 00:12:35,120
same configuration

00:12:32,000 --> 00:12:36,800
for example through qapi possibly qmp

00:12:35,120 --> 00:12:38,639
things management tools already have to

00:12:36,800 --> 00:12:40,399
deal with it

00:12:38,639 --> 00:12:42,399
and another thing that would help

00:12:40,399 --> 00:12:44,160
management would be to provide

00:12:42,399 --> 00:12:45,760
official bindings for the management

00:12:44,160 --> 00:12:48,240
tools to qrpi

00:12:45,760 --> 00:12:50,240
this should cover multiple languages of

00:12:48,240 --> 00:12:51,680
which the most important probably are go

00:12:50,240 --> 00:12:54,880
in python

00:12:51,680 --> 00:12:57,120
in order to let people focus on working

00:12:54,880 --> 00:12:58,639
with qmo and not prevent the eq api

00:12:57,120 --> 00:13:01,440
wheel

00:12:58,639 --> 00:13:02,959
finally for security we would like to be

00:13:01,440 --> 00:13:05,040
able to isolate

00:13:02,959 --> 00:13:07,519
security sensitive parts of qmo to

00:13:05,040 --> 00:13:11,040
multiple processes

00:13:07,519 --> 00:13:13,440
for now we have the host user servers

00:13:11,040 --> 00:13:15,920
supported in kmu storage demon

00:13:13,440 --> 00:13:18,079
but an extension to this idea is to use

00:13:15,920 --> 00:13:20,240
different languages not just

00:13:18,079 --> 00:13:22,959
different processes including of course

00:13:20,240 --> 00:13:26,079
rust for this reason malcolm real world

00:13:22,959 --> 00:13:26,800
has looked as qapi bindings for rust not

00:13:26,079 --> 00:13:29,600
so much for

00:13:26,800 --> 00:13:30,800
consuming qpi as was the case for the

00:13:29,600 --> 00:13:33,279
previous slide

00:13:30,800 --> 00:13:35,040
but for exposing grassed language

00:13:33,279 --> 00:13:37,760
constructs through qrpi

00:13:35,040 --> 00:13:38,320
roughly the same as we do in c already

00:13:37,760 --> 00:13:40,880
so that's

00:13:38,320 --> 00:13:41,519
it for this year's q removestar to

00:13:40,880 --> 00:13:49,680
support

00:13:41,519 --> 00:13:51,760
thanks and enjoy the rest of kpm4

00:13:49,680 --> 00:13:51,760

YouTube URL: https://www.youtube.com/watch?v=KsSVsO0Sld8


