Title: A Journey to Support vGPU in Firecracker - Liang Yan, SUSE
Publication date: 2020-11-10
Playlist: KVM Forum Europe 2020
Description: 
	A Journey to Support vGPU in Firecracker - Liang Yan, SUSE
Captions: 
	00:00:07,279 --> 00:00:12,639
hello everyone

00:00:09,280 --> 00:00:14,080
my name is leon yan i'm here to give you

00:00:12,639 --> 00:00:17,760
a session about the

00:00:14,080 --> 00:00:21,039
ipo which pio invite cracker and

00:00:17,760 --> 00:00:25,599
i'm really excited to do

00:00:21,039 --> 00:00:28,240
this prediction here enjoy so

00:00:25,599 --> 00:00:28,800
before we start i'll just give you some

00:00:28,240 --> 00:00:31,840
intro

00:00:28,800 --> 00:00:34,640
to example myself so i'm a

00:00:31,840 --> 00:00:38,000
virtualization engineer

00:00:34,640 --> 00:00:40,559
from susa so my working area

00:00:38,000 --> 00:00:41,920
is mainly focused on the io

00:00:40,559 --> 00:00:45,120
virtualization

00:00:41,920 --> 00:00:47,360
you know gpu and network before

00:00:45,120 --> 00:00:48,160
and the architecture are multi-focused

00:00:47,360 --> 00:00:51,360
on

00:00:48,160 --> 00:00:54,879
arm 64 and s390

00:00:51,360 --> 00:00:58,239
the 9x86 architecture and uh

00:00:54,879 --> 00:01:02,800
also as you know suse dropped openstack

00:00:58,239 --> 00:01:05,600
cloud last year and purchased the

00:01:02,800 --> 00:01:06,400
rancher this year so we had a thumb

00:01:05,600 --> 00:01:09,280
transition

00:01:06,400 --> 00:01:09,840
uh i started working on the fact crack

00:01:09,280 --> 00:01:13,439
here

00:01:09,840 --> 00:01:17,600
and i like this stuff

00:01:13,439 --> 00:01:20,479
and uh also i work at home

00:01:17,600 --> 00:01:21,360
for four years now i think i know most

00:01:20,479 --> 00:01:23,360
of you are

00:01:21,360 --> 00:01:24,560
also working at home because with a

00:01:23,360 --> 00:01:27,040
granovirus

00:01:24,560 --> 00:01:28,000
pandemic i hope you can enjoy your

00:01:27,040 --> 00:01:32,000
workout

00:01:28,000 --> 00:01:35,439
home timing and i live in louisville

00:01:32,000 --> 00:01:36,479
kentucky united states so early people

00:01:35,439 --> 00:01:40,000
don't know it

00:01:36,479 --> 00:01:42,799
i just see this is the hometown

00:01:40,000 --> 00:01:43,280
of abraham lincoln people still don't

00:01:42,799 --> 00:01:47,439
know it

00:01:43,280 --> 00:01:49,759
then uh muhammad ali maybe

00:01:47,439 --> 00:01:51,920
still then i said uh just kentucky

00:01:49,759 --> 00:01:55,360
friday cheating kfc

00:01:51,920 --> 00:01:58,399
now they know it so sounds like people

00:01:55,360 --> 00:02:00,320
enjoy food better than sports better

00:01:58,399 --> 00:02:04,079
than politics

00:02:00,320 --> 00:02:08,160
anyway this is a joke so let's back into

00:02:04,079 --> 00:02:08,640
today's topic so for today i'm going to

00:02:08,160 --> 00:02:12,239
give you

00:02:08,640 --> 00:02:16,400
a quick background about the micro vm

00:02:12,239 --> 00:02:18,239
bike rack here and also give you some uh

00:02:16,400 --> 00:02:20,080
introduction about the gpu realization

00:02:18,239 --> 00:02:24,080
especially some latest

00:02:20,080 --> 00:02:27,200
update and also the motivation

00:02:24,080 --> 00:02:27,760
why do we want to do it and how do we do

00:02:27,200 --> 00:02:31,599
it what

00:02:27,760 --> 00:02:34,879
should we do since this is a

00:02:31,599 --> 00:02:35,280
journal exploration generally so i'll

00:02:34,879 --> 00:02:38,400
share

00:02:35,280 --> 00:02:39,440
some thoughts after that so at last

00:02:38,400 --> 00:02:41,599
would be the

00:02:39,440 --> 00:02:43,680
qe part but you can type in your

00:02:41,599 --> 00:02:47,200
question from our platform

00:02:43,680 --> 00:02:51,040
the chat platform so i would be glad to

00:02:47,200 --> 00:02:54,720
answer so let's have a take

00:02:51,040 --> 00:02:58,239
a quick look on the micro vm here

00:02:54,720 --> 00:02:58,800
uh i think it's another strength for you

00:02:58,239 --> 00:03:01,920
guys

00:02:58,800 --> 00:03:05,680
and for me i also followed this topic

00:03:01,920 --> 00:03:09,200
for a couple years there's a a lot of uh

00:03:05,680 --> 00:03:12,959
cup options here like a kmu light

00:03:09,200 --> 00:03:14,000
qm lead amu or qvm micro vm last year

00:03:12,959 --> 00:03:17,920
from last year

00:03:14,000 --> 00:03:22,000
this is qmu based and uh firecracker

00:03:17,920 --> 00:03:22,560
rasta vm base but it's earlier than last

00:03:22,000 --> 00:03:25,440
week

00:03:22,560 --> 00:03:26,799
anyway and also some other like uh

00:03:25,440 --> 00:03:30,319
process level

00:03:26,799 --> 00:03:33,440
the api um

00:03:30,319 --> 00:03:35,680
like a divisor here it's um so

00:03:33,440 --> 00:03:36,959
it's not my intention here so we just

00:03:35,680 --> 00:03:40,400
keep it

00:03:36,959 --> 00:03:42,400
uh if you look at those uh

00:03:40,400 --> 00:03:44,720
vms here you you may see something in

00:03:42,400 --> 00:03:47,760
common like

00:03:44,720 --> 00:03:48,080
we're not they're not considered as we

00:03:47,760 --> 00:03:51,599
am

00:03:48,080 --> 00:03:54,159
but more like a container and uh

00:03:51,599 --> 00:03:54,879
they also work as a container there's

00:03:54,159 --> 00:03:58,080
only like

00:03:54,879 --> 00:04:00,720
one maybe one workload under it and a

00:03:58,080 --> 00:04:04,159
very short life cycle

00:04:00,720 --> 00:04:07,200
and you just need it

00:04:04,159 --> 00:04:11,519
it's safe and the architecture is

00:04:07,200 --> 00:04:11,519
light the running is first

00:04:12,000 --> 00:04:19,519
here's a architecture for firecracker

00:04:17,519 --> 00:04:21,440
you could see it's highly integrated

00:04:19,519 --> 00:04:24,560
with container here

00:04:21,440 --> 00:04:28,720
and that's i think that's the

00:04:24,560 --> 00:04:32,560
many uses for them too for the microwave

00:04:28,720 --> 00:04:33,120
and we are take a quick look to the gpu

00:04:32,560 --> 00:04:36,080
side

00:04:33,120 --> 00:04:37,440
so i thank the gpu everyone using gpu

00:04:36,080 --> 00:04:39,680
today

00:04:37,440 --> 00:04:42,880
but looking at the gpu you may see

00:04:39,680 --> 00:04:46,560
there's too many uses for it

00:04:42,880 --> 00:04:49,120
graphic and computing graphics like the

00:04:46,560 --> 00:04:53,600
game streaming 3d rendering

00:04:49,120 --> 00:04:56,639
and computing is more like a

00:04:53,600 --> 00:04:57,280
popular today because of the ai machine

00:04:56,639 --> 00:04:59,919
learning

00:04:57,280 --> 00:05:01,199
and uh you know that there's two

00:04:59,919 --> 00:05:02,720
different types for

00:05:01,199 --> 00:05:04,240
this kind of machine learning the

00:05:02,720 --> 00:05:07,199
training

00:05:04,240 --> 00:05:07,840
trend a model based on the huge data

00:05:07,199 --> 00:05:10,880
sets

00:05:07,840 --> 00:05:15,840
and the inference like you already have

00:05:10,880 --> 00:05:15,840
this trend model just do some uh

00:05:16,000 --> 00:05:22,720
judgment so

00:05:19,039 --> 00:05:26,240
and uh then there's puritanization

00:05:22,720 --> 00:05:27,199
and i think a lot of people already down

00:05:26,240 --> 00:05:30,720
this

00:05:27,199 --> 00:05:33,520
topic from a low level and we

00:05:30,720 --> 00:05:34,880
we couldn't know that like you can see

00:05:33,520 --> 00:05:36,320
past the rules if you pass through

00:05:34,880 --> 00:05:39,840
that's a difficult one

00:05:36,320 --> 00:05:43,199
and there is also a forge virtualization

00:05:39,840 --> 00:05:46,240
and uh there's a soft way to do it mdv

00:05:43,199 --> 00:05:50,240
meditated the device intel and emitter

00:05:46,240 --> 00:05:54,080
doing it there's a hard way like sroe

00:05:50,240 --> 00:05:58,960
and the md did it but uh lvdr

00:05:54,080 --> 00:06:02,080
is also jump to it too and the arm

00:05:58,960 --> 00:06:04,840
i'm also so you can see here

00:06:02,080 --> 00:06:06,319
this is the 800 just announced this to

00:06:04,840 --> 00:06:09,759
me

00:06:06,319 --> 00:06:12,000
and uh you can see there

00:06:09,759 --> 00:06:13,360
the this compatibility instance gpu

00:06:12,000 --> 00:06:16,400
actually are fr

00:06:13,360 --> 00:06:17,600
we based and one interesting part is

00:06:16,400 --> 00:06:20,080
that

00:06:17,600 --> 00:06:21,680
it could also be used for a good

00:06:20,080 --> 00:06:26,319
application directly

00:06:21,680 --> 00:06:29,840
so and the user case is like

00:06:26,319 --> 00:06:32,080
you can use either a container

00:06:29,840 --> 00:06:33,199
so it looks like all about container

00:06:32,080 --> 00:06:36,319
delay

00:06:33,199 --> 00:06:38,720
and uh um i'm is pretty new

00:06:36,319 --> 00:06:40,720
and uh they just announced each

00:06:38,720 --> 00:06:44,080
typicalization solution

00:06:40,720 --> 00:06:46,880
uh last month i think and

00:06:44,080 --> 00:06:48,400
intriguing part is a it's a user case

00:06:46,880 --> 00:06:51,440
they are mostly working

00:06:48,400 --> 00:06:55,039
using used for vehicle

00:06:51,440 --> 00:06:56,880
autonomous driving and basically for

00:06:55,039 --> 00:07:00,720
this

00:06:56,880 --> 00:07:02,400
automotive enhancement and this is a new

00:07:00,720 --> 00:07:04,880
user case besides

00:07:02,400 --> 00:07:06,000
the training and inference scenario

00:07:04,880 --> 00:07:09,280
there

00:07:06,000 --> 00:07:12,319
and it's kind of interesting

00:07:09,280 --> 00:07:15,520
make things anyway

00:07:12,319 --> 00:07:18,880
so so they also have and based

00:07:15,520 --> 00:07:22,400
on the architecture here

00:07:18,880 --> 00:07:26,560
it it also looks like hardware based

00:07:22,400 --> 00:07:30,080
and uh yeah there's also other

00:07:26,560 --> 00:07:33,199
gpu i've been working very closely with

00:07:30,080 --> 00:07:37,199
all those with vendors in susa uh

00:07:33,199 --> 00:07:40,720
like an nvidia arm and also amd

00:07:37,199 --> 00:07:44,240
intel and uh and even some other

00:07:40,720 --> 00:07:47,599
hardware accelerator like uh fp

00:07:44,240 --> 00:07:50,800
ga and uh

00:07:47,599 --> 00:07:52,800
neuron mpo like a tpu some stuff there

00:07:50,800 --> 00:07:56,479
so but uh we are talking about the gpu

00:07:52,800 --> 00:08:00,080
here so let's just focus on here

00:07:56,479 --> 00:08:03,440
and uh now comes to the motivation

00:08:00,080 --> 00:08:06,879
why do we want to do it like uh

00:08:03,440 --> 00:08:08,960
i guess generally because people want it

00:08:06,879 --> 00:08:10,720
it's quite popular for animation

00:08:08,960 --> 00:08:14,240
learning today

00:08:10,720 --> 00:08:14,960
and uh some people just want more for

00:08:14,240 --> 00:08:16,720
from

00:08:14,960 --> 00:08:19,039
firecracker like uh yes you are

00:08:16,720 --> 00:08:22,160
wonderful but why don't you provide this

00:08:19,039 --> 00:08:25,360
more the other side is about the

00:08:22,160 --> 00:08:28,560
pure flood nation like we could see that

00:08:25,360 --> 00:08:31,680
io tradition is actually become

00:08:28,560 --> 00:08:34,640
the powerful more powerful now and uh

00:08:31,680 --> 00:08:35,120
it has its own utilization capability

00:08:34,640 --> 00:08:38,240
and

00:08:35,120 --> 00:08:39,200
uh which is independent with the general

00:08:38,240 --> 00:08:42,719
vmm

00:08:39,200 --> 00:08:45,760
and like we just saw the 800 there

00:08:42,719 --> 00:08:49,040
like they you could just use its

00:08:45,760 --> 00:08:52,640
wii gpu for application so that's

00:08:49,040 --> 00:08:56,320
a good case and

00:08:52,640 --> 00:09:00,399
also people are talking about eta in

00:08:56,320 --> 00:09:04,240
uh if i cracker the github is here

00:09:00,399 --> 00:09:04,880
like a couple here and generally people

00:09:04,240 --> 00:09:08,080
want it

00:09:04,880 --> 00:09:11,279
but there's some conflict here

00:09:08,080 --> 00:09:13,920
like because firecracker

00:09:11,279 --> 00:09:16,080
has its specific purpose mainly for the

00:09:13,920 --> 00:09:18,959
authorities computing

00:09:16,080 --> 00:09:20,240
and so in this case they may need to run

00:09:18,959 --> 00:09:23,440
tons of workloads

00:09:20,240 --> 00:09:25,519
in a host in that case they wanted the

00:09:23,440 --> 00:09:28,399
older subscription

00:09:25,519 --> 00:09:29,360
and also they want a bad performance

00:09:28,399 --> 00:09:33,040
during the

00:09:29,360 --> 00:09:36,320
workload suites and with gpu

00:09:33,040 --> 00:09:39,360
realization seems not good but

00:09:36,320 --> 00:09:42,880
uh anyway i'll just show

00:09:39,360 --> 00:09:42,880
you how to do it here

00:09:45,040 --> 00:09:51,440
uh like i said i just knew

00:09:48,240 --> 00:09:54,560
to firecrack and rust vmm

00:09:51,440 --> 00:09:57,600
stuff but i know

00:09:54,560 --> 00:10:00,959
we gpu and also qemu

00:09:57,600 --> 00:10:04,000
good part is that uh most of

00:10:00,959 --> 00:10:08,800
its work is still reused

00:10:04,000 --> 00:10:12,240
like uh the host side mdv or sroe

00:10:08,800 --> 00:10:14,720
and uh is created for the vgpu

00:10:12,240 --> 00:10:15,600
and then we share this and uh the kvm

00:10:14,720 --> 00:10:18,959
side by correct

00:10:15,600 --> 00:10:22,800
is still using kvm for it

00:10:18,959 --> 00:10:25,760
so those far we don't need to care about

00:10:22,800 --> 00:10:26,240
and we only care about the vm and the

00:10:25,760 --> 00:10:28,800
part

00:10:26,240 --> 00:10:30,880
like if we're using the we have opti

00:10:28,800 --> 00:10:34,800
pass through

00:10:30,880 --> 00:10:38,560
basically we are just needed to create a

00:10:34,800 --> 00:10:43,920
pti device based on the host information

00:10:38,560 --> 00:10:46,959
by like a accessed by vfio function here

00:10:43,920 --> 00:10:49,360
and the other part is that uh

00:10:46,959 --> 00:10:51,519
uh cloud hypervisor this is a project

00:10:49,360 --> 00:10:54,720
business vmm

00:10:51,519 --> 00:10:55,440
uh we it implemented uh we have io

00:10:54,720 --> 00:10:58,959
binding and

00:10:55,440 --> 00:11:02,320
we have ioct errors i think that's

00:10:58,959 --> 00:11:05,760
that that makes the whole process

00:11:02,320 --> 00:11:08,480
much easier do a bomb from here

00:11:05,760 --> 00:11:09,920
the we have bounding is kind of some

00:11:08,480 --> 00:11:13,680
head fires

00:11:09,920 --> 00:11:17,200
automatically generated by the

00:11:13,680 --> 00:11:19,040
binder gene and you can see

00:11:17,200 --> 00:11:21,200
there's just some header files for the

00:11:19,040 --> 00:11:24,240
function definition

00:11:21,200 --> 00:11:27,279
from the kvm or host side and

00:11:24,240 --> 00:11:31,600
we have ioctrs is the main

00:11:27,279 --> 00:11:35,440
implementation so now things get clearly

00:11:31,600 --> 00:11:37,839
and easier so what i did here

00:11:35,440 --> 00:11:39,519
uh as i said earlier i'm working on the

00:11:37,839 --> 00:11:42,640
gpu organization

00:11:39,519 --> 00:11:47,279
so i have a lot of fancy hardware here

00:11:42,640 --> 00:11:50,160
the wii gpu 300 nvr 100

00:11:47,279 --> 00:11:51,600
in here gpu and i also have this old amd

00:11:50,160 --> 00:11:55,760
gpu here

00:11:51,600 --> 00:11:59,680
and i'm working on based on the

00:11:55,760 --> 00:12:01,839
315 sb2 out here

00:11:59,680 --> 00:12:01,839
and

00:12:03,600 --> 00:12:10,079
also running the vmm so i

00:12:08,320 --> 00:12:12,560
from my thought i think i just i needed

00:12:10,079 --> 00:12:14,959
to run through

00:12:12,560 --> 00:12:16,800
with the cloud provider that would make

00:12:14,959 --> 00:12:19,360
things easier like uh

00:12:16,800 --> 00:12:20,560
if it could work and if not what's the

00:12:19,360 --> 00:12:24,480
problem

00:12:20,560 --> 00:12:30,560
after that i can just back part

00:12:24,480 --> 00:12:30,560
or reflector to the fire tracker so

00:12:31,120 --> 00:12:38,240
things are pretty clear and uh during my

00:12:35,040 --> 00:12:38,639
try on cloud hypervisor i found the most

00:12:38,240 --> 00:12:41,920
of

00:12:38,639 --> 00:12:46,639
the work only like a wii gpu it's like

00:12:41,920 --> 00:12:50,399
once i parsed the mdv inside

00:12:46,639 --> 00:12:53,680
it couldn't it couldn't get through

00:12:50,399 --> 00:12:57,839
so looks something wrong with the

00:12:53,680 --> 00:13:01,440
gpu driver during my debugging but uh

00:12:57,839 --> 00:13:03,839
i'll follow that later but anyway i

00:13:01,440 --> 00:13:04,880
i mainly use the intel with gpu here

00:13:03,839 --> 00:13:09,279
because

00:13:04,880 --> 00:13:09,279
it's open source from either side

00:13:09,839 --> 00:13:16,079
and now back to

00:13:13,040 --> 00:13:19,360
all these like i checked how

00:13:16,079 --> 00:13:20,160
cloud advisor make it work and in order

00:13:19,360 --> 00:13:23,200
to that

00:13:20,160 --> 00:13:26,160
i need uh these kind of workers here

00:13:23,200 --> 00:13:28,240
the we have our binding and we have

00:13:26,160 --> 00:13:31,680
ioctrs this is the two

00:13:28,240 --> 00:13:34,959
main uh creates here for

00:13:31,680 --> 00:13:38,959
for implementation and also need a

00:13:34,959 --> 00:13:41,360
pci as you know firecracker only has

00:13:38,959 --> 00:13:44,959
this mmlio bus

00:13:41,360 --> 00:13:48,000
so we needed to implement this

00:13:44,959 --> 00:13:52,560
pti bus there

00:13:48,000 --> 00:13:55,120
and then just uh some vmm like

00:13:52,560 --> 00:13:56,240
uh we needed to follow the whole process

00:13:55,120 --> 00:13:59,360
and then

00:13:56,240 --> 00:14:01,680
imagine maintaining firecracker and also

00:13:59,360 --> 00:14:03,120
neither thumb defenses like the vm

00:14:01,680 --> 00:14:06,160
device

00:14:03,120 --> 00:14:10,000
device manager and the vm locker and the

00:14:06,160 --> 00:14:13,360
the full pti implementation i probably

00:14:10,000 --> 00:14:15,920
moved much more code here because i

00:14:13,360 --> 00:14:16,800
just as the first step i just make it

00:14:15,920 --> 00:14:19,839
work

00:14:16,800 --> 00:14:21,040
then i can get through all the code

00:14:19,839 --> 00:14:23,839
carefully

00:14:21,040 --> 00:14:24,160
and uh also there are some other things

00:14:23,839 --> 00:14:27,839
like

00:14:24,160 --> 00:14:31,920
because over the gpu the sebastic

00:14:27,839 --> 00:14:35,199
or the gpu we need some the uefi

00:14:31,920 --> 00:14:38,480
for some of the bus bus

00:14:35,199 --> 00:14:42,320
rebuilds set up otherwise

00:14:38,480 --> 00:14:45,440
it will has a driver issue later

00:14:42,320 --> 00:14:48,079
and also the kernel configuration the

00:14:45,440 --> 00:14:49,040
original configuration is quite simple

00:14:48,079 --> 00:14:52,320
and uh

00:14:49,040 --> 00:14:55,600
but we needed to import extra

00:14:52,320 --> 00:14:56,160
uh modules for just to enable the

00:14:55,600 --> 00:14:59,279
graphic

00:14:56,160 --> 00:15:03,440
driver so and

00:14:59,279 --> 00:15:04,800
uh yeah i i plan to put out the code

00:15:03,440 --> 00:15:08,320
here but

00:15:04,800 --> 00:15:12,240
where that's really not necessary and

00:15:08,320 --> 00:15:15,279
if you do that you may see

00:15:12,240 --> 00:15:15,839
another benefit for the rust is like the

00:15:15,279 --> 00:15:19,440
whole

00:15:15,839 --> 00:15:23,920
device create it's much easier

00:15:19,440 --> 00:15:26,720
than the qom model back in qmu

00:15:23,920 --> 00:15:27,920
so what i'm doing here is like during

00:15:26,720 --> 00:15:31,279
the file tracker

00:15:27,920 --> 00:15:34,399
i press the parameters here

00:15:31,279 --> 00:15:37,920
i just catch this device

00:15:34,399 --> 00:15:40,320
comes with the the path of the device

00:15:37,920 --> 00:15:43,519
like that if you use the md we

00:15:40,320 --> 00:15:46,399
it will come the uuid number

00:15:43,519 --> 00:15:46,959
and also if just the virtual function it

00:15:46,399 --> 00:15:50,480
will be

00:15:46,959 --> 00:15:53,839
just the ppi

00:15:50,480 --> 00:15:57,839
numbers there and then

00:15:53,839 --> 00:15:58,959
during the vm initialization i needed to

00:15:57,839 --> 00:16:03,440
create this

00:15:58,959 --> 00:16:03,440
pdi bus and then

00:16:04,399 --> 00:16:11,680
i needed to do i needed to

00:16:07,600 --> 00:16:14,800
use the vfio to create a pti devices

00:16:11,680 --> 00:16:18,560
so i needed to access the host device

00:16:14,800 --> 00:16:22,399
with the device path or id you can see

00:16:18,560 --> 00:16:25,199
and then it will access to the host uh

00:16:22,399 --> 00:16:27,120
cis file system and get the grub and

00:16:25,199 --> 00:16:29,360
device information from host

00:16:27,120 --> 00:16:31,040
and then you just uh use this

00:16:29,360 --> 00:16:34,399
information to create

00:16:31,040 --> 00:16:37,759
uh your we have our pdi device

00:16:34,399 --> 00:16:42,800
and after that you put it to the

00:16:37,759 --> 00:16:46,639
pvi bus and uh after that i think

00:16:42,800 --> 00:16:50,399
it will be detected by the guest

00:16:46,639 --> 00:16:52,880
vm so so far

00:16:50,399 --> 00:16:54,560
even i said i i think i put more much

00:16:52,880 --> 00:16:58,079
more code here but uh

00:16:54,560 --> 00:17:00,720
it could work with some basic functions

00:16:58,079 --> 00:17:01,680
and it could be detected by the gas

00:17:00,720 --> 00:17:05,199
kernel

00:17:01,680 --> 00:17:08,559
although just a during the

00:17:05,199 --> 00:17:11,120
kernel uh the driver couldn't uh

00:17:08,559 --> 00:17:11,679
work very well there's a lot of issues

00:17:11,120 --> 00:17:14,000
like here

00:17:11,679 --> 00:17:15,360
the bath table is not available can't

00:17:14,000 --> 00:17:18,400
find

00:17:15,360 --> 00:17:19,360
this one and some a lot of drm function

00:17:18,400 --> 00:17:23,919
failures there

00:17:19,360 --> 00:17:28,000
the uh the math is is kind of a mess

00:17:23,919 --> 00:17:31,440
i needed to go through that anyway

00:17:28,000 --> 00:17:36,559
so anyway like i said this is a

00:17:31,440 --> 00:17:36,559
journey explore so

00:17:38,480 --> 00:17:43,440
let me just share some thoughts during

00:17:40,559 --> 00:17:43,440
here like uh

00:17:43,679 --> 00:17:50,320
during all the back part uh working

00:17:47,679 --> 00:17:51,039
i think it's fine i like to reading code

00:17:50,320 --> 00:17:55,200
so

00:17:51,039 --> 00:17:56,960
but i just feel like uh

00:17:55,200 --> 00:17:58,840
during all the working i'm just one

00:17:56,960 --> 00:18:00,000
question i'm keep asking is it a good

00:17:58,840 --> 00:18:02,880
fit

00:18:00,000 --> 00:18:03,760
because first the more i back part the

00:18:02,880 --> 00:18:06,880
more it

00:18:03,760 --> 00:18:10,320
it needs like i needed to

00:18:06,880 --> 00:18:14,160
explore this third and

00:18:10,320 --> 00:18:16,559
even after after that i

00:18:14,160 --> 00:18:17,360
the the firecracker looks quite

00:18:16,559 --> 00:18:20,640
different

00:18:17,360 --> 00:18:24,160
the booting time and the memory

00:18:20,640 --> 00:18:27,440
uh food brand

00:18:24,160 --> 00:18:31,360
it's quite it's bigger and

00:18:27,440 --> 00:18:35,039
i must have done something wrong also

00:18:31,360 --> 00:18:39,280
like the during the discussion

00:18:35,039 --> 00:18:43,200
there so the the issues there is still

00:18:39,280 --> 00:18:46,240
exists like the design philosophy

00:18:43,200 --> 00:18:49,919
authorities computing like uh

00:18:46,240 --> 00:18:53,360
since there will be uh a lot of

00:18:49,919 --> 00:18:56,960
workload here and so they wanted this

00:18:53,360 --> 00:19:00,080
our subscription and they also want

00:18:56,960 --> 00:19:03,200
the swift the suites will be

00:19:00,080 --> 00:19:07,200
fast and

00:19:03,200 --> 00:19:10,160
efficient however the

00:19:07,200 --> 00:19:11,100
wii gpu scheduler probably would be a

00:19:10,160 --> 00:19:12,720
concern

00:19:11,100 --> 00:19:15,120
[Music]

00:19:12,720 --> 00:19:16,559
i didn't test that because i just test

00:19:15,120 --> 00:19:21,280
the one we have here

00:19:16,559 --> 00:19:21,280
the workload is simple

00:19:22,840 --> 00:19:26,640
so

00:19:24,240 --> 00:19:27,520
so with this confusion i'm just asking

00:19:26,640 --> 00:19:31,039
is it a good

00:19:27,520 --> 00:19:33,039
fit and uh so i just uh

00:19:31,039 --> 00:19:34,720
stepped back like what do we want in the

00:19:33,039 --> 00:19:37,840
first place

00:19:34,720 --> 00:19:39,520
so like fact right it's for the

00:19:37,840 --> 00:19:44,640
serverless computing

00:19:39,520 --> 00:19:44,640
for sure and we don't want the

00:19:44,960 --> 00:19:48,960
graphic which we just wanted computing

00:19:47,360 --> 00:19:51,360
even for computing

00:19:48,960 --> 00:19:52,000
we don't want the training because it

00:19:51,360 --> 00:19:54,080
will last

00:19:52,000 --> 00:19:55,600
long we just thinking about the

00:19:54,080 --> 00:19:58,880
inference

00:19:55,600 --> 00:20:02,640
so we still want it safe

00:19:58,880 --> 00:20:03,520
light and fast so we check back to this

00:20:02,640 --> 00:20:07,120
working load

00:20:03,520 --> 00:20:07,679
like the platform here basically there

00:20:07,120 --> 00:20:11,039
are just

00:20:07,679 --> 00:20:14,559
cuda or opencl mainly like

00:20:11,039 --> 00:20:18,240
even for the arm the rna it has

00:20:14,559 --> 00:20:20,400
its own platform but uh

00:20:18,240 --> 00:20:21,679
eventually it will still use the opencl

00:20:20,400 --> 00:20:24,960
driver

00:20:21,679 --> 00:20:27,679
for gpu side so maybe

00:20:24,960 --> 00:20:28,240
things would be easier thinking another

00:20:27,679 --> 00:20:31,679
way

00:20:28,240 --> 00:20:34,799
like maybe we

00:20:31,679 --> 00:20:38,080
create a word cuda here or whether

00:20:34,799 --> 00:20:39,760
opencl no matter what so we can create

00:20:38,080 --> 00:20:42,799
it as the vertical

00:20:39,760 --> 00:20:46,080
mmo device and it's only for the

00:20:42,799 --> 00:20:49,120
general compute and the design

00:20:46,080 --> 00:20:52,320
based on the driver api

00:20:49,120 --> 00:20:53,120
and then use the wii ring to transparent

00:20:52,320 --> 00:20:57,200
to the host

00:20:53,120 --> 00:20:59,840
side and so we don't have those concerns

00:20:57,200 --> 00:21:03,440
anymore like the memory ping

00:20:59,840 --> 00:21:07,440
and the huge

00:21:03,440 --> 00:21:12,080
complicated machine configuration

00:21:07,440 --> 00:21:15,200
and the kernel configuration so

00:21:12,080 --> 00:21:15,760
maybe so i think i'll probably working

00:21:15,200 --> 00:21:18,400
on it

00:21:15,760 --> 00:21:20,000
there's already started the initial work

00:21:18,400 --> 00:21:23,760
here

00:21:20,000 --> 00:21:27,200
another way is it encouraged me is that

00:21:23,760 --> 00:21:30,240
about the 800 mig

00:21:27,200 --> 00:21:33,760
the that it could be used directly by

00:21:30,240 --> 00:21:37,039
a container so i i did some research

00:21:33,760 --> 00:21:40,000
back there and

00:21:37,039 --> 00:21:40,960
i thought maybe i can reuse some idea

00:21:40,000 --> 00:21:45,200
about the

00:21:40,960 --> 00:21:48,400
nvidia container but no

00:21:45,200 --> 00:21:48,960
nvidia container is like a mount the

00:21:48,400 --> 00:21:52,159
host

00:21:48,960 --> 00:21:55,280
driver into the container image the

00:21:52,159 --> 00:21:57,760
container root file system so

00:21:55,280 --> 00:21:59,679
it's it's different with a virtual

00:21:57,760 --> 00:22:01,840
machine scenario

00:21:59,679 --> 00:22:03,600
but uh maybe still thinking about

00:22:01,840 --> 00:22:08,000
another

00:22:03,600 --> 00:22:11,440
uh device type or like

00:22:08,000 --> 00:22:15,200
we have i o m r o n i don't know

00:22:11,440 --> 00:22:19,039
but uh yeah i'll keep thinking

00:22:15,200 --> 00:22:23,039
so for this whole journey i'm thinking

00:22:19,039 --> 00:22:26,080
like some questions like could we do it

00:22:23,039 --> 00:22:29,520
sure but should we

00:22:26,080 --> 00:22:33,360
that depends like here like a

00:22:29,520 --> 00:22:36,400
wii gpu in firecracker then

00:22:33,360 --> 00:22:39,520
it may be a very good fit like

00:22:36,400 --> 00:22:43,200
because it's a you specific

00:22:39,520 --> 00:22:47,280
a case for firecracker

00:22:43,200 --> 00:22:51,360
but if we jump out of this scenario

00:22:47,280 --> 00:22:54,799
thinking about the arm the uh

00:22:51,360 --> 00:22:56,480
terminus driving there that's a

00:22:54,799 --> 00:22:59,600
different scenario like

00:22:56,480 --> 00:23:00,320
maybe we the workload maybe not that

00:22:59,600 --> 00:23:04,000
heavy

00:23:00,320 --> 00:23:08,960
but we still want some

00:23:04,000 --> 00:23:12,559
uh gpu computing here so

00:23:08,960 --> 00:23:16,159
and uh so there we still want it like a

00:23:12,559 --> 00:23:21,039
safe light first so this may be a good

00:23:16,159 --> 00:23:24,640
match so yeah so this totally

00:23:21,039 --> 00:23:27,440
depends on how you want to use it so

00:23:24,640 --> 00:23:29,600
think for this one i will still

00:23:27,440 --> 00:23:31,520
implement it eventually even not for

00:23:29,600 --> 00:23:36,080
firecracker maybe

00:23:31,520 --> 00:23:39,919
design a new vmm based on the last vmm

00:23:36,080 --> 00:23:42,799
like just for some wii gpu

00:23:39,919 --> 00:23:44,159
scenario or ai machine learning scenario

00:23:42,799 --> 00:23:46,159
that would be fun

00:23:44,159 --> 00:23:48,240
but i really need to optimize the code

00:23:46,159 --> 00:23:51,279
carefully

00:23:48,240 --> 00:23:54,400
or just that we discussed earlier just

00:23:51,279 --> 00:23:57,120
to use a different device modem

00:23:54,400 --> 00:23:59,120
i think it's doable i i also did some

00:23:57,120 --> 00:24:01,760
research here some people

00:23:59,120 --> 00:24:02,799
some people from school already

00:24:01,760 --> 00:24:05,520
implemented it

00:24:02,799 --> 00:24:06,640
with a different way here we just needed

00:24:05,520 --> 00:24:11,520
to do

00:24:06,640 --> 00:24:14,640
it with rust and the kvm

00:24:11,520 --> 00:24:18,400
one thing is i think the the

00:24:14,640 --> 00:24:21,200
api api dependency would be

00:24:18,400 --> 00:24:22,559
need to be really careful we don't want

00:24:21,200 --> 00:24:26,320
this kind of a

00:24:22,559 --> 00:24:29,200
api here and i think

00:24:26,320 --> 00:24:31,200
if we had both ways and then we do

00:24:29,200 --> 00:24:34,640
overall comparison

00:24:31,200 --> 00:24:38,080
would be interesting i think maybe

00:24:34,640 --> 00:24:41,200
next year i'll share some upstate with

00:24:38,080 --> 00:24:44,799
even upstream and

00:24:41,200 --> 00:24:46,400
the last thing is that yeah i think i

00:24:44,799 --> 00:24:48,799
like the raster vmm

00:24:46,400 --> 00:24:50,320
factory very much like especially for

00:24:48,799 --> 00:24:53,679
created us

00:24:50,320 --> 00:24:54,559
it's much easier than to qom if you know

00:24:53,679 --> 00:24:57,760
what i mean

00:24:54,559 --> 00:25:01,440
and i think

00:24:57,760 --> 00:25:04,720
that's it so if you have questions

00:25:01,440 --> 00:25:08,159
and uh typing from the

00:25:04,720 --> 00:25:10,960
chat channel or email me

00:25:08,159 --> 00:25:11,600
so anyway thank you so much for your

00:25:10,960 --> 00:25:15,760
time

00:25:11,600 --> 00:25:19,279
and uh it's really exciting it's my

00:25:15,760 --> 00:25:19,279
honor to present here

00:25:26,840 --> 00:25:31,200
thanks

00:25:29,120 --> 00:25:31,200

YouTube URL: https://www.youtube.com/watch?v=AihdByeeraE


