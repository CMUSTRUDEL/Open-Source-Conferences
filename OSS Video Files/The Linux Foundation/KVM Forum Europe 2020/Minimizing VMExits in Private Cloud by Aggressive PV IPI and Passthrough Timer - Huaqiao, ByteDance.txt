Title: Minimizing VMExits in Private Cloud by Aggressive PV IPI and Passthrough Timer - Huaqiao, ByteDance
Publication date: 2020-11-10
Playlist: KVM Forum Europe 2020
Description: 
	Minimizing VMExits in Private Cloud by Aggressive PV IPI and Passthrough Timer - Huaqiao, ByteDance
Captions: 
	00:00:06,799 --> 00:00:11,440
hello

00:00:08,240 --> 00:00:16,000
everyone thanks for coming

00:00:11,440 --> 00:00:16,000
now let me introduce myself first

00:00:20,320 --> 00:00:27,840
i'm a software engineer for fox

00:00:23,920 --> 00:00:31,760
arm claw kvm

00:00:27,840 --> 00:00:32,719
under container now i'm going to talk

00:00:31,760 --> 00:00:35,760
about

00:00:32,719 --> 00:00:36,559
the aggressive pva api and the possible

00:00:35,760 --> 00:00:40,399
tamar

00:00:36,559 --> 00:00:45,840
technologies which have been applied

00:00:40,399 --> 00:00:45,840
in our private cloud environment

00:00:51,280 --> 00:00:58,320
now let me begin a topic

00:00:54,879 --> 00:01:01,440
this is a gender of the topic

00:00:58,320 --> 00:01:04,960
firstly i will talk about the back

00:01:01,440 --> 00:01:08,080
background water problems are in

00:01:04,960 --> 00:01:11,200
our scenario and then

00:01:08,080 --> 00:01:11,520
the solutions about these problems will

00:01:11,200 --> 00:01:15,520
be

00:01:11,520 --> 00:01:18,640
offered and lastly we are talking about

00:01:15,520 --> 00:01:21,439
the field future work for

00:01:18,640 --> 00:01:21,439
our solution

00:01:22,159 --> 00:01:29,439
the background

00:01:26,000 --> 00:01:33,040
firstly let's talk about

00:01:29,439 --> 00:01:33,040
the tamer axis

00:01:33,119 --> 00:01:38,840
the timer axis which contributes to

00:01:36,720 --> 00:01:41,840
the overhead of virtualization

00:01:38,840 --> 00:01:41,840
significantly

00:01:41,920 --> 00:01:46,799
currently the camera the vm is emulated

00:01:45,280 --> 00:01:50,079
by vmware

00:01:46,799 --> 00:01:54,079
therefore army this army

00:01:50,079 --> 00:01:58,799
firing cameras will cause vm axis

00:01:54,079 --> 00:02:02,200
in our product environment

00:01:58,799 --> 00:02:06,640
most of camera axis are caused by

00:02:02,200 --> 00:02:10,080
reprogramming tamer

00:02:06,640 --> 00:02:13,599
as shown on the graph there are many

00:02:10,080 --> 00:02:15,290
reprogramming camera operations before

00:02:13,599 --> 00:02:18,370
camera fail theory

00:02:15,290 --> 00:02:18,370
[Music]

00:02:20,239 --> 00:02:27,120
okay let's see the problems to ipa

00:02:23,280 --> 00:02:30,480
axis api axis are also

00:02:27,120 --> 00:02:33,840
a big portion of our heart in our

00:02:30,480 --> 00:02:37,680
scenario since not vms

00:02:33,840 --> 00:02:40,959
are widely used the left table

00:02:37,680 --> 00:02:43,440
is the typical skills of vm's user

00:02:40,959 --> 00:02:47,040
impedance

00:02:43,440 --> 00:02:50,879
the statics of the ipa vm axis

00:02:47,040 --> 00:02:54,160
is also present on graph downright

00:02:50,879 --> 00:02:58,959
you can see the ipa

00:02:54,160 --> 00:03:02,239
vmx of our scenario can cause up to

00:02:58,959 --> 00:03:06,239
500 and 50 sunday vm axis

00:03:02,239 --> 00:03:09,599
every 5 minutes also features

00:03:06,239 --> 00:03:12,800
of pvpa are implemented

00:03:09,599 --> 00:03:15,200
in upstream but they don't resolve our

00:03:12,800 --> 00:03:15,200
issues

00:03:16,840 --> 00:03:21,760
very

00:03:18,319 --> 00:03:21,760
okay let's say solutions

00:03:22,000 --> 00:03:28,799
i have talked about issues encountered

00:03:25,280 --> 00:03:32,400
in our scenario

00:03:28,799 --> 00:03:35,519
then let's talk about how we correct

00:03:32,400 --> 00:03:35,519
these problems

00:03:40,080 --> 00:03:47,920
to eliminate the overhead caused by

00:03:43,920 --> 00:03:52,640
time axis exit next camera

00:03:47,920 --> 00:03:52,640
need to be developed development

00:03:54,480 --> 00:04:02,319
there are existing solutions developed

00:03:58,000 --> 00:04:05,439
developed by tensing and alibaba cloud

00:04:02,319 --> 00:04:08,720
and but they don't meet our demands

00:04:05,439 --> 00:04:11,680
exit the next camera purposed by knee

00:04:08,720 --> 00:04:12,319
either tension cloud requires horse

00:04:11,680 --> 00:04:15,680
keeping

00:04:12,319 --> 00:04:18,560
cpus and the injector

00:04:15,680 --> 00:04:20,479
is paired camera interrupt through

00:04:18,560 --> 00:04:24,080
postfit runs

00:04:20,479 --> 00:04:27,440
another design from zhang

00:04:24,080 --> 00:04:28,000
alibaba cloud introduced modifications

00:04:27,440 --> 00:04:31,840
on gas

00:04:28,000 --> 00:04:36,639
color and the reserve of a dedicated cpu

00:04:31,840 --> 00:04:36,639
for handling camera interrupts

00:04:40,960 --> 00:04:47,919
okay let's see our solutions

00:04:44,560 --> 00:04:51,759
to overcome the problems in

00:04:47,919 --> 00:04:55,040
existing solutions we purpose the

00:04:51,759 --> 00:04:57,840
a new exit nice camera we called

00:04:55,040 --> 00:04:58,560
it a pass-through timer in pass-through

00:04:57,840 --> 00:05:00,960
timer

00:04:58,560 --> 00:05:03,440
the vm can use a physical laptop camera

00:05:00,960 --> 00:05:06,479
directly

00:05:03,440 --> 00:05:09,600
so the host camera will be

00:05:06,479 --> 00:05:11,680
offloaded to the pre-amp protein camera

00:05:09,600 --> 00:05:15,919
when vm entry

00:05:11,680 --> 00:05:19,360
when external interrupt exit happened

00:05:15,919 --> 00:05:22,720
if the external interrupt vector is

00:05:19,360 --> 00:05:23,440
local chem vector we should inject the

00:05:22,720 --> 00:05:27,360
camera

00:05:23,440 --> 00:05:27,360
interrupt for vm

00:05:28,960 --> 00:05:35,280
you are in out through vm use the

00:05:32,240 --> 00:05:38,160
physical light camera vim

00:05:35,280 --> 00:05:38,639
the network camera of the vm should work

00:05:38,160 --> 00:05:41,919
in

00:05:38,639 --> 00:05:45,360
tlc deadline mode

00:05:41,919 --> 00:05:48,560
and then in vmvm the

00:05:45,360 --> 00:05:51,280
intercept of tlc data msr should be

00:05:48,560 --> 00:05:51,280
disabled

00:05:51,360 --> 00:05:55,039
lastly we must adjust the hostess tsa

00:05:54,400 --> 00:05:58,800
value

00:05:55,039 --> 00:06:02,319
from vm entry for vm

00:05:58,800 --> 00:06:05,680
use the physical tlc successfully

00:06:02,319 --> 00:06:09,120
because the tnc value of the vm

00:06:05,680 --> 00:06:11,600
is less than host tfc value

00:06:09,120 --> 00:06:11,600
of this

00:06:14,000 --> 00:06:19,680
you know in my possible camera

00:06:17,199 --> 00:06:23,600
environment

00:06:19,680 --> 00:06:26,720
vm uses a physical camera directly

00:06:23,600 --> 00:06:30,400
so if we wanted to

00:06:26,720 --> 00:06:34,080
make a host camera work normally

00:06:30,400 --> 00:06:37,199
we must do some things

00:06:34,080 --> 00:06:39,680
in ibm entry we

00:06:37,199 --> 00:06:40,720
must get the latest camera the hosted

00:06:39,680 --> 00:06:43,759
host

00:06:40,720 --> 00:06:48,560
which will be expired

00:06:43,759 --> 00:06:52,800
and often upload it to preemption timer

00:06:48,560 --> 00:06:55,599
when our vmware exists on the vcpu

00:06:52,800 --> 00:06:57,199
pre-block will restart the host terminal

00:06:55,599 --> 00:07:00,560
to physical camera

00:06:57,199 --> 00:07:04,319
again and then the vm timer

00:07:00,560 --> 00:07:08,160
to soft camera which is emulated by

00:07:04,319 --> 00:07:11,840
vmware um pre-immersion camera

00:07:08,160 --> 00:07:15,360
is paired which indicates

00:07:11,840 --> 00:07:18,800
that the host clock event

00:07:15,360 --> 00:07:18,800
will be called

00:07:23,759 --> 00:07:30,400
this slider shows the difference

00:07:27,360 --> 00:07:33,759
between normal vm network camera

00:07:30,400 --> 00:07:37,759
and the vm password timer you can see

00:07:33,759 --> 00:07:40,880
in our design vm can

00:07:37,759 --> 00:07:41,520
program the left camera without trigger

00:07:40,880 --> 00:07:45,840
vm

00:07:41,520 --> 00:07:45,840
exit anymore

00:07:46,160 --> 00:07:50,080
okay in this slider the performance test

00:07:49,199 --> 00:07:53,599
result is

00:07:50,080 --> 00:07:56,639
presented you can see throughput of

00:07:53,599 --> 00:08:00,080
sets and gets operations of

00:07:56,639 --> 00:08:03,120
memory cards to increase the

00:08:00,080 --> 00:08:07,120
third 35.5 percent

00:08:03,120 --> 00:08:10,960
after adopting our pastoral team

00:08:07,120 --> 00:08:14,160
the another test

00:08:10,960 --> 00:08:17,840
technique test which

00:08:14,160 --> 00:08:21,039
indicates scheduled latency also shows

00:08:17,840 --> 00:08:26,319
improvement after user

00:08:21,039 --> 00:08:29,919
our password timer

00:08:26,319 --> 00:08:34,880
okay let's talk about the

00:08:29,919 --> 00:08:34,880
the ipa beam axis

00:08:35,440 --> 00:08:42,080
a possible a possible implementation of

00:08:38,640 --> 00:08:45,360
exit net ipa has been developed

00:08:42,080 --> 00:08:48,720
by e from tencent cloud

00:08:45,360 --> 00:08:51,760
this implementation marks all these

00:08:48,720 --> 00:08:55,040
cpus in a bitmap

00:08:51,760 --> 00:08:58,320
and then sender the ips

00:08:55,040 --> 00:09:00,399
to all these cpus together by one

00:08:58,320 --> 00:09:03,760
hypercar

00:09:00,399 --> 00:09:08,080
and then the vehement scan the bitmap

00:09:03,760 --> 00:09:11,360
and get the distance

00:09:08,080 --> 00:09:14,880
cpus from the bitmap

00:09:11,360 --> 00:09:18,240
and then send the api

00:09:14,880 --> 00:09:21,440
to the cpu

00:09:18,240 --> 00:09:25,760
in bitmap one by one

00:09:21,440 --> 00:09:29,440
in other words this implementation

00:09:25,760 --> 00:09:36,560
merge multi multi api vmx into

00:09:29,440 --> 00:09:39,920
one vehicle exit

00:09:36,560 --> 00:09:43,040
okay in our solutions

00:09:39,920 --> 00:09:48,640
we adopt

00:09:43,040 --> 00:09:48,640
on low exit pv ipa

00:09:48,959 --> 00:09:55,519
we we announced this

00:09:52,000 --> 00:09:57,040
no exit fpv api by pass-through patch

00:09:55,519 --> 00:10:00,640
creator guest

00:09:57,040 --> 00:10:05,120
and don't

00:10:00,640 --> 00:10:08,880
do not intercept sar msr

00:10:05,120 --> 00:10:11,760
in vm startup we offer

00:10:08,880 --> 00:10:12,560
dedicated pva sl for guests to send a

00:10:11,760 --> 00:10:15,920
special

00:10:12,560 --> 00:10:21,040
interrupt such as smi

00:10:15,920 --> 00:10:21,040
and mi and then in guest

00:10:21,519 --> 00:10:25,760
it can't send the ipm directly via post

00:10:24,880 --> 00:10:33,600
interrupt

00:10:25,760 --> 00:10:36,880
and without a vm exit

00:10:33,600 --> 00:10:38,560
now this direction will show how low

00:10:36,880 --> 00:10:42,640
exit the pva api

00:10:38,560 --> 00:10:46,720
works for example in guest

00:10:42,640 --> 00:10:49,760
the vspo zero send the api to

00:10:46,720 --> 00:10:53,279
vcp1 firstly we

00:10:49,760 --> 00:10:58,160
must get the pid script of vcp web

00:10:53,279 --> 00:11:01,279
and then we cite pv ipl vector in

00:10:58,160 --> 00:11:05,279
post interrupt request a bitmap

00:11:01,279 --> 00:11:09,760
of a pid script of whisper one

00:11:05,279 --> 00:11:13,519
then we set a outstanding notification

00:11:09,760 --> 00:11:14,959
in pid script the outstanding

00:11:13,519 --> 00:11:18,959
notification

00:11:14,959 --> 00:11:23,040
will tear the hardware

00:11:18,959 --> 00:11:26,480
there is a pointing eq to

00:11:23,040 --> 00:11:26,480
reserve to to solve

00:11:27,040 --> 00:11:33,040
and then we get a notification vector

00:11:30,160 --> 00:11:36,519
from the pnd script

00:11:33,040 --> 00:11:39,600
and the notification vector is always a

00:11:36,519 --> 00:11:43,680
post-interrupter vector but if

00:11:39,600 --> 00:11:47,600
the vcpu in the notification filter

00:11:43,680 --> 00:11:51,839
is a position interrupter make up vector

00:11:47,600 --> 00:11:55,279
and then we prepare sar and then lastly

00:11:51,839 --> 00:11:58,399
we read sar

00:11:55,279 --> 00:12:01,760
so the api is triggered

00:11:58,399 --> 00:12:04,160
successfully and without vm

00:12:01,760 --> 00:12:04,160
exit

00:12:05,440 --> 00:12:12,000
okay let's see the test interrupt

00:12:09,519 --> 00:12:12,800
okay okay sorry sorry let's see the test

00:12:12,000 --> 00:12:17,440
result

00:12:12,800 --> 00:12:17,440
of the low exit pv api

00:12:17,920 --> 00:12:26,079
after adopting low exit api

00:12:21,760 --> 00:12:30,600
the cost of a single ipa operating in vm

00:12:26,079 --> 00:12:33,079
decreased from 115

00:12:30,600 --> 00:12:36,560
486 to

00:12:33,079 --> 00:12:40,000
412 seconds

00:12:36,560 --> 00:12:43,440
single pv api can perform on the

00:12:40,000 --> 00:12:43,440
level as bare metal

00:12:47,279 --> 00:12:53,839
affirm the perspective

00:12:50,560 --> 00:12:55,839
of the application level though exit

00:12:53,839 --> 00:12:59,360
pvpa can also

00:12:55,839 --> 00:13:02,800
improve the remote significantly

00:12:59,360 --> 00:13:05,200
in our scenario lamp sets

00:13:02,800 --> 00:13:06,399
and the gas operations per second of

00:13:05,200 --> 00:13:10,000
memory capture

00:13:06,399 --> 00:13:15,120
with 14.8

00:13:10,000 --> 00:13:17,920
percent after intro tools in low exit

00:13:15,120 --> 00:13:17,920
pv rpi

00:13:18,480 --> 00:13:23,440
okay let's see filter work

00:13:24,399 --> 00:13:31,200
also there are many benefits by

00:13:27,600 --> 00:13:32,560
introducing password timer and low exit

00:13:31,200 --> 00:13:36,320
pv again

00:13:32,560 --> 00:13:40,320
but there are some potent potential

00:13:36,320 --> 00:13:43,360
problems needed to be addressed

00:13:40,320 --> 00:13:46,720
in terms of no accident pv ipa

00:13:43,360 --> 00:13:48,480
the guest should be trustable because

00:13:46,720 --> 00:13:51,920
the guest can access the

00:13:48,480 --> 00:13:55,600
sar msr and the pid script

00:13:51,920 --> 00:13:59,440
this will allow guests send the pv

00:13:55,600 --> 00:14:03,360
this this severe allocation the ips to

00:13:59,440 --> 00:14:06,639
arbitrary physical cpu and in our

00:14:03,360 --> 00:14:08,399
private cloud scenario we can accept the

00:14:06,639 --> 00:14:11,680
trade-off between performance

00:14:08,399 --> 00:14:17,680
and security because the guest

00:14:11,680 --> 00:14:20,639
is generally considered to be credible

00:14:17,680 --> 00:14:21,680
but the work of making no accident

00:14:20,639 --> 00:14:26,800
previously more

00:14:21,680 --> 00:14:26,800
must not secure still needs to be done

00:14:27,120 --> 00:14:33,000
when security is concert the secretary

00:14:30,399 --> 00:14:36,240
had our previous api could be

00:14:33,000 --> 00:14:40,959
implemented for example

00:14:36,240 --> 00:14:43,920
their eptp switch feature of vamphing

00:14:40,959 --> 00:14:44,480
for possible timer guests couldn't

00:14:43,920 --> 00:14:49,120
affect

00:14:44,480 --> 00:14:51,839
any other vms so the security of patreon

00:14:49,120 --> 00:14:55,199
is not the major concern

00:14:51,839 --> 00:14:58,800
in future works of supporting

00:14:55,199 --> 00:15:02,800
new migration under dynamic switch

00:14:58,800 --> 00:15:06,800
may be valuable okay

00:15:02,800 --> 00:15:10,079
this is all contents of my topic

00:15:06,800 --> 00:15:15,279
if you have any questions you can click

00:15:10,079 --> 00:15:15,279
connect me via the email okay

00:15:22,440 --> 00:15:25,440

YouTube URL: https://www.youtube.com/watch?v=hE_Ig_SPYKs


