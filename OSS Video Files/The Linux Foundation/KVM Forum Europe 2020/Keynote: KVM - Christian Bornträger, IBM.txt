Title: Keynote: KVM - Christian Bornträger, IBM
Publication date: 2020-11-10
Playlist: KVM Forum Europe 2020
Description: 
	Keynote: KVM - Christian Bornträger, IBM
Captions: 
	00:00:05,520 --> 00:00:08,720
hello um

00:00:06,560 --> 00:00:10,080
welcome to the kvm keynote as part of

00:00:08,720 --> 00:00:12,000
the kvm forum

00:00:10,080 --> 00:00:14,000
um my name is christian bontrager and i

00:00:12,000 --> 00:00:16,080
work for ibm as chief product owner for

00:00:14,000 --> 00:00:20,800
linux and kdm idm z

00:00:16,080 --> 00:00:20,800
as well as the s390 maintainer for kvm

00:00:22,000 --> 00:00:25,199
as usual the

00:00:25,279 --> 00:00:28,880
keynote is more of a status report with

00:00:28,320 --> 00:00:31,760
numbers

00:00:28,880 --> 00:00:32,399
facts and recaps of the last year as

00:00:31,760 --> 00:00:36,079
well as an

00:00:32,399 --> 00:00:38,640
outlook where do we stand um

00:00:36,079 --> 00:00:40,239
as of today paolo bancini is still the

00:00:38,640 --> 00:00:43,920
core maintainer for kvm

00:00:40,239 --> 00:00:44,480
as in the last years but we also have a

00:00:43,920 --> 00:00:48,160
lot of

00:00:44,480 --> 00:00:50,079
architecture maintainers for arm x86

00:00:48,160 --> 00:00:54,160
sr90 power

00:00:50,079 --> 00:00:56,399
and mips in the last time we

00:00:54,160 --> 00:00:58,399
even got an increased number of revenues

00:00:56,399 --> 00:01:00,160
for different architectures

00:00:58,399 --> 00:01:02,640
so this is actually quite good thing

00:01:00,160 --> 00:01:05,760
because that

00:01:02,640 --> 00:01:05,760
helps to to

00:01:05,840 --> 00:01:10,799
put some burden away from maintainers

00:01:08,880 --> 00:01:12,320
and on the architectural side there have

00:01:10,799 --> 00:01:12,960
been some interesting changes for

00:01:12,320 --> 00:01:16,880
example on

00:01:12,960 --> 00:01:17,920
an arm the 32-bit host support was

00:01:16,880 --> 00:01:20,400
removed

00:01:17,920 --> 00:01:21,360
and mips has seen a maintainer change

00:01:20,400 --> 00:01:23,200
after it was

00:01:21,360 --> 00:01:24,960
being unmaintained for a short period of

00:01:23,200 --> 00:01:26,560
time

00:01:24,960 --> 00:01:28,960
last year we already talked about risk

00:01:26,560 --> 00:01:31,680
five and we expected it to have

00:01:28,960 --> 00:01:32,320
the the risk five architecture as part

00:01:31,680 --> 00:01:35,680
of

00:01:32,320 --> 00:01:36,320
of kvm uh today but um we're still

00:01:35,680 --> 00:01:39,680
waiting for

00:01:36,320 --> 00:01:41,439
architecture finalization as the risk 5

00:01:39,680 --> 00:01:43,280
kernel maintainers have pretty strict

00:01:41,439 --> 00:01:46,799
rules on

00:01:43,280 --> 00:01:49,200
when to merge code they

00:01:46,799 --> 00:01:50,890
want to have the architecture settled

00:01:49,200 --> 00:01:52,000
and finalized

00:01:50,890 --> 00:01:54,240
[Music]

00:01:52,000 --> 00:01:57,439
so much for the architectures uh let's

00:01:54,240 --> 00:02:00,560
have a look what are the trends in kvm

00:01:57,439 --> 00:02:03,360
in general and uh

00:02:00,560 --> 00:02:04,960
i see about five big areas of interest

00:02:03,360 --> 00:02:07,280
first is certainly cloud and

00:02:04,960 --> 00:02:08,959
looking back at previous ktm forums and

00:02:07,280 --> 00:02:11,680
this forum as well

00:02:08,959 --> 00:02:13,520
apart from microsoft azure everybody is

00:02:11,680 --> 00:02:16,080
using kvm we have amazon google

00:02:13,520 --> 00:02:17,440
ibm alibaba huawei tencent cloud byte

00:02:16,080 --> 00:02:20,959
dance yandex oracle

00:02:17,440 --> 00:02:23,040
and many many more and we do see kvm

00:02:20,959 --> 00:02:24,560
in different variants from highly

00:02:23,040 --> 00:02:26,720
customized stacks

00:02:24,560 --> 00:02:28,560
like amazon nitro firecracker or google

00:02:26,720 --> 00:02:31,360
cloud

00:02:28,560 --> 00:02:32,160
or we do see kvm used in a pretty

00:02:31,360 --> 00:02:34,800
standard

00:02:32,160 --> 00:02:36,319
software stack based on qmu and this is

00:02:34,800 --> 00:02:39,120
actually a strength of

00:02:36,319 --> 00:02:39,840
of kvm kvm can be used as a building

00:02:39,120 --> 00:02:42,560
block for

00:02:39,840 --> 00:02:44,080
a lot of features we also see this in

00:02:42,560 --> 00:02:47,920
the container space

00:02:44,080 --> 00:02:50,400
for example uh with kubernetes

00:02:47,920 --> 00:02:51,599
um we have actually an orchestrator that

00:02:50,400 --> 00:02:54,400
manages containers

00:02:51,599 --> 00:02:56,480
but with cube vert we can use that to

00:02:54,400 --> 00:02:58,720
orchestrate kvm

00:02:56,480 --> 00:02:59,920
virtual machines or with cutter

00:02:58,720 --> 00:03:03,360
containers we can use

00:02:59,920 --> 00:03:05,680
kvm to isolate containers

00:03:03,360 --> 00:03:07,920
but the biggest topic um for kvm at the

00:03:05,680 --> 00:03:10,080
moment is certainly trusted computing

00:03:07,920 --> 00:03:11,120
in the past we already had enclaves like

00:03:10,080 --> 00:03:14,000
sgx

00:03:11,120 --> 00:03:15,920
and this is now being complemented and

00:03:14,000 --> 00:03:19,200
kind of replaced here and there

00:03:15,920 --> 00:03:21,200
by secure virtual machines and

00:03:19,200 --> 00:03:22,480
i will come to that topic later on

00:03:21,200 --> 00:03:25,440
multiple times

00:03:22,480 --> 00:03:27,440
another topic is certainly io and

00:03:25,440 --> 00:03:29,599
hardware passthrough is still a very

00:03:27,440 --> 00:03:31,680
very hot topic as well as letter or

00:03:29,599 --> 00:03:34,799
enhancements but last but not least um

00:03:31,680 --> 00:03:38,720
we have changes in testing

00:03:34,799 --> 00:03:39,920
um so this brings the question um is kvm

00:03:38,720 --> 00:03:42,640
stabilizing or

00:03:39,920 --> 00:03:44,400
moving even faster and when you look at

00:03:42,640 --> 00:03:46,159
the kdm commits

00:03:44,400 --> 00:03:48,480
over the the kernel releases over the

00:03:46,159 --> 00:03:51,840
last years you can see that the kvm

00:03:48,480 --> 00:03:54,159
rate is is growing and in fact um

00:03:51,840 --> 00:03:55,200
this trend looks like uh it is

00:03:54,159 --> 00:03:58,000
accelerating

00:03:55,200 --> 00:03:58,480
so the speed has kind of increased and

00:03:58,000 --> 00:04:01,519
not

00:03:58,480 --> 00:04:03,920
being reduced it might be due to

00:04:01,519 --> 00:04:05,280
some bigger things like secure execution

00:04:03,920 --> 00:04:08,400
amd suv

00:04:05,280 --> 00:04:11,680
but it could also be that kdm is

00:04:08,400 --> 00:04:14,159
really more and more actively used in

00:04:11,680 --> 00:04:15,840
several places and it's just lots of

00:04:14,159 --> 00:04:17,680
small things

00:04:15,840 --> 00:04:19,750
so let's have a look at some more

00:04:17,680 --> 00:04:21,120
statistics

00:04:19,750 --> 00:04:25,040
[Music]

00:04:21,120 --> 00:04:27,919
i counted here the numbers of of commits

00:04:25,040 --> 00:04:28,720
in the last year basically from kernel

00:04:27,919 --> 00:04:31,840
version 5

00:04:28,720 --> 00:04:34,320
4 till 5 9. and

00:04:31,840 --> 00:04:36,080
i also put the numbers of last year and

00:04:34,320 --> 00:04:36,639
roughly speaking we have about 40

00:04:36,080 --> 00:04:41,280
percent

00:04:36,639 --> 00:04:44,320
more commits and mergers than last year

00:04:41,280 --> 00:04:46,880
when we then look at the the reviewed by

00:04:44,320 --> 00:04:48,080
for the the commits that have a reviewed

00:04:46,880 --> 00:04:50,960
bytech

00:04:48,080 --> 00:04:52,320
we have a much better ratio we have 80

00:04:50,960 --> 00:04:54,639
decrease

00:04:52,320 --> 00:04:56,240
and at the same time we have less

00:04:54,639 --> 00:04:59,360
changes with the fixes

00:04:56,240 --> 00:05:00,560
uh or less growth in the number of

00:04:59,360 --> 00:05:03,680
commits

00:05:00,560 --> 00:05:05,360
which have a fixes or cc stable tag

00:05:03,680 --> 00:05:07,120
hopefully this indicates a better

00:05:05,360 --> 00:05:10,479
quality um

00:05:07,120 --> 00:05:13,120
and uh that would be good for everyone

00:05:10,479 --> 00:05:13,840
um we should also pause to celebrate a

00:05:13,120 --> 00:05:16,320
bit to

00:05:13,840 --> 00:05:17,840
some people here that did an outstanding

00:05:16,320 --> 00:05:20,720
job in kvm uh

00:05:17,840 --> 00:05:22,720
first of all um the authors were the

00:05:20,720 --> 00:05:25,520
most number of commits we have

00:05:22,720 --> 00:05:26,880
um just mentioned the the first three

00:05:25,520 --> 00:05:30,960
sean christopherson

00:05:26,880 --> 00:05:34,639
paolo bonsini and mark sanjay

00:05:30,960 --> 00:05:37,120
these people really uh drive a lot of

00:05:34,639 --> 00:05:38,960
changes into kvn

00:05:37,120 --> 00:05:41,520
but at the same time it's also important

00:05:38,960 --> 00:05:44,800
to have people that do reviews

00:05:41,520 --> 00:05:46,560
do the quality check and uh

00:05:44,800 --> 00:05:48,639
here the top reviewers are vitaly

00:05:46,560 --> 00:05:52,560
kuznetsov cornelia hook

00:05:48,639 --> 00:05:53,680
and jim matson last but not least we

00:05:52,560 --> 00:05:57,039
also have

00:05:53,680 --> 00:06:00,400
uh people that that um fix this box and

00:05:57,039 --> 00:06:03,199
uh fixes regressions and um

00:06:00,400 --> 00:06:04,880
these people are um almost the same as

00:06:03,199 --> 00:06:06,720
the authors uh

00:06:04,880 --> 00:06:10,160
so we have sean christopherson paolo

00:06:06,720 --> 00:06:13,199
bonsini and max roger

00:06:10,160 --> 00:06:15,280
so we have seen people working on kvm

00:06:13,199 --> 00:06:16,960
what are the companies that do the kvm

00:06:15,280 --> 00:06:18,880
work

00:06:16,960 --> 00:06:22,319
similar to to last year we have more

00:06:18,880 --> 00:06:26,000
than 20 companies working on kvm

00:06:22,319 --> 00:06:27,759
and also the the companies

00:06:26,000 --> 00:06:29,680
are kind of similar with small shifts

00:06:27,759 --> 00:06:32,880
here and there

00:06:29,680 --> 00:06:33,520
and if you look closely you see that we

00:06:32,880 --> 00:06:36,400
have one

00:06:33,520 --> 00:06:37,280
one name here um and that's because mark

00:06:36,400 --> 00:06:39,360
did

00:06:37,280 --> 00:06:40,479
uh used to work for amazon and now works

00:06:39,360 --> 00:06:43,600
for google so

00:06:40,479 --> 00:06:47,039
um it was not that easy to to separate

00:06:43,600 --> 00:06:48,800
the the employer here uh you can do your

00:06:47,039 --> 00:06:50,800
own mass if you like

00:06:48,800 --> 00:06:52,720
but what do we see here is uh that we

00:06:50,800 --> 00:06:54,960
have uh of course cloud providers

00:06:52,720 --> 00:06:56,960
the people that use kdm actively

00:06:54,960 --> 00:06:59,280
participate in development

00:06:56,960 --> 00:07:01,520
we have some distribution so red hat uh

00:06:59,280 --> 00:07:04,400
suse canonical

00:07:01,520 --> 00:07:05,039
and of course the chip vendors like amd

00:07:04,400 --> 00:07:08,800
intel

00:07:05,039 --> 00:07:12,720
ibm arm they all participate in

00:07:08,800 --> 00:07:17,520
kvn so now let's have a look into

00:07:12,720 --> 00:07:20,960
what are these companies working on

00:07:17,520 --> 00:07:21,360
and i want to talk about one thing that

00:07:20,960 --> 00:07:26,319
i

00:07:21,360 --> 00:07:28,960
find very important and that's testing

00:07:26,319 --> 00:07:30,880
we have seen a lot of improvements over

00:07:28,960 --> 00:07:33,199
the past years here

00:07:30,880 --> 00:07:34,400
we have two kind of or two frameworks

00:07:33,199 --> 00:07:37,280
for kdm

00:07:34,400 --> 00:07:39,520
the first framework is kvn unit test

00:07:37,280 --> 00:07:41,680
this is a separate repository

00:07:39,520 --> 00:07:45,280
and then we have the kdn self-test which

00:07:41,680 --> 00:07:49,039
is co-bundled with the linux kernel

00:07:45,280 --> 00:07:50,800
and we have seen an increase in number

00:07:49,039 --> 00:07:53,919
of self tests we have seen

00:07:50,800 --> 00:07:55,280
an increased number of km unit tests and

00:07:53,919 --> 00:07:58,080
the canon unit test

00:07:55,280 --> 00:08:00,240
is now actually also able to test

00:07:58,080 --> 00:08:02,720
non-kvm hyperwriters so

00:08:00,240 --> 00:08:04,080
this project has has grown out of its

00:08:02,720 --> 00:08:07,599
its initial

00:08:04,080 --> 00:08:08,639
initial um idea and it was re-hosted

00:08:07,599 --> 00:08:10,720
also in gitlab

00:08:08,639 --> 00:08:12,879
so we have now ci support and other nice

00:08:10,720 --> 00:08:16,479
things so this is really something where

00:08:12,879 --> 00:08:16,479
we have invested a lot in the past

00:08:16,879 --> 00:08:20,800
when we talk about highlights overall um

00:08:19,039 --> 00:08:22,240
i have to mention trusted computing i

00:08:20,800 --> 00:08:25,919
did it before

00:08:22,240 --> 00:08:27,360
um i have to mention here as well um

00:08:25,919 --> 00:08:31,440
also

00:08:27,360 --> 00:08:32,959
this is not common code or not at all

00:08:31,440 --> 00:08:34,399
so all the trusted computing

00:08:32,959 --> 00:08:35,919
implementations are actually per

00:08:34,399 --> 00:08:39,039
architecture

00:08:35,919 --> 00:08:39,519
and not yet common when you look at the

00:08:39,039 --> 00:08:42,800
right

00:08:39,519 --> 00:08:44,320
hand side the top right hand side um

00:08:42,800 --> 00:08:46,399
this this graph hosts a number of

00:08:44,320 --> 00:08:47,920
commits over the the kernel versions

00:08:46,399 --> 00:08:49,680
it's basically the same number that you

00:08:47,920 --> 00:08:52,399
have seen before and

00:08:49,680 --> 00:08:54,000
the the red color indicates the number

00:08:52,399 --> 00:08:56,240
of commits that

00:08:54,000 --> 00:08:58,080
cannot be attributed to any architecture

00:08:56,240 --> 00:09:01,040
so common code kind of

00:08:58,080 --> 00:09:01,680
and this is about things like heavy

00:09:01,040 --> 00:09:04,399
amstart

00:09:01,680 --> 00:09:06,399
if you remember my my talk last year

00:09:04,399 --> 00:09:08,880
about performance data i complained that

00:09:06,399 --> 00:09:10,800
we have a lot of data that can't be used

00:09:08,880 --> 00:09:13,360
by by tooling

00:09:10,800 --> 00:09:14,160
we do ship a tool in kvm called kvm

00:09:13,360 --> 00:09:18,000
start

00:09:14,160 --> 00:09:21,120
and that tool now can do logging and

00:09:18,000 --> 00:09:22,959
comma separated values and if you

00:09:21,120 --> 00:09:24,880
remember my talk from two years ago

00:09:22,959 --> 00:09:26,560
i complained about that we do not have

00:09:24,880 --> 00:09:30,959
enough uh

00:09:26,560 --> 00:09:32,720
code that runs cross architecture and

00:09:30,959 --> 00:09:34,880
we now have a unified shadow and a new

00:09:32,720 --> 00:09:38,000
cache data structure across architecture

00:09:34,880 --> 00:09:39,760
and certainly lots of cleanups and fixes

00:09:38,000 --> 00:09:41,680
the biggest architecture is certainly

00:09:39,760 --> 00:09:43,600
x86 again the red

00:09:41,680 --> 00:09:45,920
red bar shows the number of actually six

00:09:43,600 --> 00:09:47,600
patches we have too many things to

00:09:45,920 --> 00:09:50,959
mention for x86

00:09:47,600 --> 00:09:51,839
so i can just mention some bigger blocks

00:09:50,959 --> 00:09:54,000
or some

00:09:51,839 --> 00:09:55,600
specific features so for example the

00:09:54,000 --> 00:09:56,720
asynchronous page fault handling was

00:09:55,600 --> 00:09:58,720
reverbed

00:09:56,720 --> 00:10:01,279
the dirty bitmap which was used for live

00:09:58,720 --> 00:10:04,800
migration was was optimized

00:10:01,279 --> 00:10:06,880
we have done a lot of refactoring and

00:10:04,800 --> 00:10:08,959
optimization in a lot of places

00:10:06,880 --> 00:10:10,240
you can read them here i'm not going to

00:10:08,959 --> 00:10:13,519
read it out loud

00:10:10,240 --> 00:10:16,240
um several works in the specter like

00:10:13,519 --> 00:10:19,360
area so the the hardware

00:10:16,240 --> 00:10:20,640
side channel attacks nested kvm was

00:10:19,360 --> 00:10:23,360
improved a lot

00:10:20,640 --> 00:10:24,079
we have seen improvements in the amd suv

00:10:23,360 --> 00:10:26,880
the

00:10:24,079 --> 00:10:28,959
trusted computing variant from amd and

00:10:26,880 --> 00:10:31,760
of course we have also seen performance

00:10:28,959 --> 00:10:32,079
work for for example we have a fast pass

00:10:31,760 --> 00:10:37,040
for

00:10:32,079 --> 00:10:40,240
ipi and tsc deadline timers

00:10:37,040 --> 00:10:43,519
another big architecture is arm

00:10:40,240 --> 00:10:45,519
and arm as i mentioned removed the

00:10:43,519 --> 00:10:46,000
32-bit host support and that actually

00:10:45,519 --> 00:10:48,560
indicates

00:10:46,000 --> 00:10:49,519
that arm is getting larger bigger and

00:10:48,560 --> 00:10:51,680
more

00:10:49,519 --> 00:10:54,079
important in the server space as well

00:10:51,680 --> 00:10:56,079
while the the smaller embedded part is

00:10:54,079 --> 00:10:58,240
less and less important i guess it's

00:10:56,079 --> 00:11:00,720
still important but here for kvm

00:10:58,240 --> 00:11:02,320
it's really the server part that of

00:11:00,720 --> 00:11:03,760
course also created a lot of cleanups

00:11:02,320 --> 00:11:06,079
things that we could remove

00:11:03,760 --> 00:11:06,880
but what else do we have in the arm

00:11:06,079 --> 00:11:09,200
space

00:11:06,880 --> 00:11:10,560
of course the usual interrupt controller

00:11:09,200 --> 00:11:13,760
work that we have seen

00:11:10,560 --> 00:11:16,560
for arm in the last years

00:11:13,760 --> 00:11:17,760
also work for the virtualization host

00:11:16,560 --> 00:11:20,240
extension

00:11:17,760 --> 00:11:21,839
the hypervisor that there runs directly

00:11:20,240 --> 00:11:23,200
in el2 mode

00:11:21,839 --> 00:11:25,360
and it's actually a different way of

00:11:23,200 --> 00:11:27,040
doing things so the code was was split

00:11:25,360 --> 00:11:30,160
between the vhe and

00:11:27,040 --> 00:11:30,880
ndhe mode we also got features like

00:11:30,160 --> 00:11:34,320
steel time

00:11:30,880 --> 00:11:35,120
point authentication for uh nvhe data up

00:11:34,320 --> 00:11:37,200
attribute

00:11:35,120 --> 00:11:39,279
report and injection as well as

00:11:37,200 --> 00:11:40,839
level-based tlb invalidation so lots of

00:11:39,279 --> 00:11:43,760
small things lots of

00:11:40,839 --> 00:11:45,920
changes on the mips side we

00:11:43,760 --> 00:11:47,519
basically only have the long zone

00:11:45,920 --> 00:11:50,639
support which is a new

00:11:47,519 --> 00:11:53,200
chip from china

00:11:50,639 --> 00:11:54,240
while this is only a small change it

00:11:53,200 --> 00:11:57,360
actually helped

00:11:54,240 --> 00:11:58,000
to to get new maintained containers on

00:11:57,360 --> 00:12:01,279
board for

00:11:58,000 --> 00:12:03,600
for mips so hua kai chen um

00:12:01,279 --> 00:12:05,440
stepped up to be a maintainer as well uh

00:12:03,600 --> 00:12:07,680
together with alexander markovic

00:12:05,440 --> 00:12:10,240
which means that nips is now maintained

00:12:07,680 --> 00:12:13,279
again which is good

00:12:10,240 --> 00:12:13,920
on the power side again trusted

00:12:13,279 --> 00:12:16,639
computing

00:12:13,920 --> 00:12:17,839
we have seen the power pc uh secure

00:12:16,639 --> 00:12:20,480
guest support

00:12:17,839 --> 00:12:20,880
um of course we also have seen the new

00:12:20,480 --> 00:12:24,320
power

00:12:20,880 --> 00:12:26,399
10 support preliminary

00:12:24,320 --> 00:12:27,920
and several other small improvements

00:12:26,399 --> 00:12:29,279
like more than four thousand guests for

00:12:27,920 --> 00:12:31,440
hp kvm

00:12:29,279 --> 00:12:33,760
interrupt handling signal stepping and

00:12:31,440 --> 00:12:33,760
so on

00:12:34,160 --> 00:12:38,639
on the s2900 side again trusted

00:12:36,839 --> 00:12:40,639
computing

00:12:38,639 --> 00:12:41,920
we have something called secure

00:12:40,639 --> 00:12:45,120
execution which is

00:12:41,920 --> 00:12:46,320
the sr90 variant of that but we have

00:12:45,120 --> 00:12:48,320
invested also in

00:12:46,320 --> 00:12:49,360
testing self-test a lot of kvm unit

00:12:48,320 --> 00:12:52,560
tests

00:12:49,360 --> 00:12:53,040
yield improvement again nested kvm and

00:12:52,560 --> 00:12:55,680
also

00:12:53,040 --> 00:12:57,680
um some kind of small hygiene work that

00:12:55,680 --> 00:12:59,279
for example we implemented diagnose 318

00:12:57,680 --> 00:13:03,200
which is a firmware interface

00:12:59,279 --> 00:13:07,200
that we can now also use in kvm

00:13:03,200 --> 00:13:10,560
so uh this is certainly a

00:13:07,200 --> 00:13:13,040
something where every architecture

00:13:10,560 --> 00:13:14,560
that we have seen is of course doing

00:13:13,040 --> 00:13:17,680
their homework in terms of

00:13:14,560 --> 00:13:17,680
fixes and maintenance

00:13:17,839 --> 00:13:22,880
when you look forward um all these these

00:13:20,480 --> 00:13:26,160
features that i mentioned here are

00:13:22,880 --> 00:13:27,680
until kernel version 5.9 but looking

00:13:26,160 --> 00:13:32,079
beyond that i mean

00:13:27,680 --> 00:13:35,600
5.9 was was released two weeks ago

00:13:32,079 --> 00:13:36,959
and for xd6 we get a new and new for a

00:13:35,600 --> 00:13:40,160
two-dimensional paging

00:13:36,959 --> 00:13:42,000
uh pretty soon you certainly will see

00:13:40,160 --> 00:13:43,360
enhancement in your trusted computing

00:13:42,000 --> 00:13:46,000
world so amd

00:13:43,360 --> 00:13:48,160
suv has uh enhancement for secure state

00:13:46,000 --> 00:13:51,519
or secureness and paging

00:13:48,160 --> 00:13:52,560
arm is working on protected kvm intel

00:13:51,519 --> 00:13:55,920
has something

00:13:52,560 --> 00:13:58,079
called tdx and you can bet that ibm

00:13:55,920 --> 00:14:00,399
will also give you additional features

00:13:58,079 --> 00:14:03,279
for power and sr90 in that rear

00:14:00,399 --> 00:14:06,240
and hopefully we will also get uh risk

00:14:03,279 --> 00:14:06,240
five support soon

00:14:06,480 --> 00:14:11,360
okay um with that

00:14:09,760 --> 00:14:12,959
thank you for your attention uh for

00:14:11,360 --> 00:14:13,519
questions and comments feel free to

00:14:12,959 --> 00:14:15,600
write me

00:14:13,519 --> 00:14:18,320
or the kvn program committee for

00:14:15,600 --> 00:14:22,160
questions regarding the kdm forum itself

00:14:18,320 --> 00:14:22,160
and with that enjoy the rest of kvm

00:14:28,120 --> 00:14:31,120

YouTube URL: https://www.youtube.com/watch?v=_CSi7ljLjgA


