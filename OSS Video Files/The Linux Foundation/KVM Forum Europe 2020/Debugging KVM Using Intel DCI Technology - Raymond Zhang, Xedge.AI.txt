Title: Debugging KVM Using Intel DCI Technology - Raymond Zhang, Xedge.AI
Publication date: 2020-11-10
Playlist: KVM Forum Europe 2020
Description: 
	Debugging KVM Using Intel DCI Technology - Raymond Zhang, Xedge.AI
Captions: 
	00:00:00,160 --> 00:00:07,200
and uh i'm very happy

00:00:03,679 --> 00:00:10,480
to hear my experience

00:00:07,200 --> 00:00:12,080
of debugging kvm using internal dci

00:00:10,480 --> 00:00:15,599
technology

00:00:12,080 --> 00:00:17,920
this is my first time to present in qem

00:00:15,599 --> 00:00:17,920
forum

00:00:20,560 --> 00:00:26,180
i will do a quick self introduction

00:00:24,800 --> 00:00:28,080
my name is

00:00:26,180 --> 00:00:31,199
[Music]

00:00:28,080 --> 00:00:34,480
i used to work at intel

00:00:31,199 --> 00:00:39,360
uh from 2003

00:00:34,480 --> 00:00:43,360
to 2016. in 2009

00:00:39,360 --> 00:00:46,480
i joined a project

00:00:43,360 --> 00:00:50,000
which is based

00:00:46,480 --> 00:00:53,760
in onsen our goal is

00:00:50,000 --> 00:00:58,719
made a videographic

00:00:53,760 --> 00:01:02,079
tpo to work in windows vm

00:00:58,719 --> 00:01:05,360
at that time is quite difficult to

00:01:02,079 --> 00:01:08,799
make a

00:01:05,360 --> 00:01:12,400
graphic gpu to work

00:01:08,799 --> 00:01:18,320
in vm usually there is a very

00:01:12,400 --> 00:01:21,439
uh weak gpu uh using vm

00:01:18,320 --> 00:01:25,439
after we pass this path through

00:01:21,439 --> 00:01:28,640
the device to vm um

00:01:25,439 --> 00:01:32,320
we installed

00:01:28,640 --> 00:01:35,680
uh 12 uh is binary

00:01:32,320 --> 00:01:39,360
and there will be

00:01:35,680 --> 00:01:42,960
uh there there was a random

00:01:39,360 --> 00:01:46,240
tdr blue screen and

00:01:42,960 --> 00:01:49,119
i spent significant effort

00:01:46,240 --> 00:01:51,040
to do the week debugging after three

00:01:49,119 --> 00:01:54,079
months since

00:01:51,040 --> 00:01:57,119
i found the root cause it's about

00:01:54,079 --> 00:02:00,479
in the mml code

00:01:57,119 --> 00:02:03,680
of the shadow memory logic

00:02:00,479 --> 00:02:07,200
of them at that time

00:02:03,680 --> 00:02:10,959
the only way to do debugging is

00:02:07,200 --> 00:02:14,560
print analog so uh

00:02:10,959 --> 00:02:18,160
today i will uh share how to use

00:02:14,560 --> 00:02:23,840
a debugger to do to do the debug

00:02:18,160 --> 00:02:23,840
which is much more efficient

00:02:24,640 --> 00:02:31,120
here is a classy classic uh zhan

00:02:28,400 --> 00:02:31,120
architecture

00:02:31,599 --> 00:02:38,800
there is a hypervisor under all

00:02:35,280 --> 00:02:41,519
vms and

00:02:38,800 --> 00:02:43,840
there is a spice of vm is called domain

00:02:41,519 --> 00:02:47,200
zero

00:02:43,840 --> 00:02:50,879
it's a privilege it provides

00:02:47,200 --> 00:02:55,120
a service and it also

00:02:50,879 --> 00:02:58,959
manages other vms

00:02:55,120 --> 00:03:02,560
for example there is an io emu process

00:02:58,959 --> 00:03:05,920
for each vm to do a

00:03:02,560 --> 00:03:05,920
device innovation

00:03:07,360 --> 00:03:14,239
and usually we

00:03:10,800 --> 00:03:15,519
only left domain 0 to see the real

00:03:14,239 --> 00:03:20,239
hardware

00:03:15,519 --> 00:03:20,239
all other vms only see the

00:03:20,560 --> 00:03:25,360
emulated fake devices

00:03:26,159 --> 00:03:34,400
so happily from microsoft has a similar

00:03:29,599 --> 00:03:34,400
architecture there is also a hypervisor

00:03:34,640 --> 00:03:42,000
under all vms in microsoft's term

00:03:38,879 --> 00:03:45,599
uh vm is called partition

00:03:42,000 --> 00:03:49,040
the parent partition is

00:03:45,599 --> 00:03:52,640
equipping to a dominant zero

00:03:49,040 --> 00:03:56,400
of them and

00:03:52,640 --> 00:03:59,519
for windows 10 uh microsoft introduced

00:03:56,400 --> 00:04:02,239
a feature called isolated user mode

00:03:59,519 --> 00:04:02,720
also is called working light waters and

00:04:02,239 --> 00:04:06,720
based

00:04:02,720 --> 00:04:11,280
security if this feature

00:04:06,720 --> 00:04:15,599
is enabled a hyper way

00:04:11,280 --> 00:04:19,199
hypervisor will run and above that

00:04:15,599 --> 00:04:22,400
window 10 is running and

00:04:19,199 --> 00:04:26,639
there is also another special sql kernel

00:04:22,400 --> 00:04:26,639
run on top of the hypervisor

00:04:27,680 --> 00:04:33,360
for uh there will be

00:04:33,520 --> 00:04:40,639
a lot of vm exits when

00:04:37,600 --> 00:04:43,840
windows access hardware so

00:04:40,639 --> 00:04:46,880
after this feature it turned on

00:04:43,840 --> 00:04:51,840
actually the performance

00:04:46,880 --> 00:04:51,840
will be sacrificed

00:04:52,320 --> 00:04:56,800
um i think pvm has a different

00:04:55,759 --> 00:05:00,400
architecture

00:04:56,800 --> 00:05:05,039
and is better so i believe

00:05:00,400 --> 00:05:05,039
kvm has a smarter design

00:05:05,199 --> 00:05:13,280
from the architectural perspective

00:05:09,039 --> 00:05:16,400
um kvm uh combines dominzero's kernel

00:05:13,280 --> 00:05:19,680
and hypervisor into one

00:05:16,400 --> 00:05:21,840
actually they are run in one address

00:05:19,680 --> 00:05:25,199
space

00:05:21,840 --> 00:05:28,479
with this structure

00:05:25,199 --> 00:05:30,320
it has a lot of benefits uh

00:05:28,479 --> 00:05:32,160
dominguez kernel

00:05:30,320 --> 00:05:35,680
[Music]

00:05:32,160 --> 00:05:40,160
will not exist to have wiser when it

00:05:35,680 --> 00:05:40,160
access hardware

00:05:40,800 --> 00:05:48,160
so it has a long piece

00:05:44,880 --> 00:05:48,160
auto advantages

00:05:48,639 --> 00:05:55,120
and people some people some people

00:05:52,000 --> 00:05:59,600
may not agree with my

00:05:55,120 --> 00:06:03,520
previous diagram so here i will show

00:05:59,600 --> 00:06:08,080
some code here is a

00:06:03,520 --> 00:06:12,800
code from vmx.c

00:06:08,080 --> 00:06:12,800
actually is a code from

00:06:13,039 --> 00:06:21,840
intel to support

00:06:17,600 --> 00:06:21,840
vm technology and

00:06:22,160 --> 00:06:28,960
we can see is a vm

00:06:25,360 --> 00:06:32,800
extension for kvm

00:06:28,960 --> 00:06:35,840
so so this function has a

00:06:32,800 --> 00:06:35,840
very important

00:06:35,919 --> 00:06:42,800
reason says vmx arm

00:06:39,280 --> 00:06:46,400
react vmaxon is a

00:06:42,800 --> 00:06:49,440
an instruction from

00:06:46,400 --> 00:06:53,039
the cpu uh actually it

00:06:49,440 --> 00:06:57,919
turns on uh the hardware support

00:06:53,039 --> 00:07:01,280
about vm about vt

00:06:57,919 --> 00:07:04,319
and using uh

00:07:01,280 --> 00:07:07,520
to disassemble a

00:07:04,319 --> 00:07:08,400
feature of debugger we can see uh the

00:07:07,520 --> 00:07:11,440
instruction

00:07:08,400 --> 00:07:16,479
uh is in land uh into the

00:07:11,440 --> 00:07:18,960
hardware enable function of kvm uh

00:07:16,479 --> 00:07:18,960
module

00:07:19,680 --> 00:07:26,240
um the vr maximum

00:07:23,120 --> 00:07:28,880
distraction has very

00:07:26,240 --> 00:07:28,880
special

00:07:29,280 --> 00:07:35,919
low uh in the way and in the vp

00:07:32,720 --> 00:07:39,199
technology actually uh

00:07:35,919 --> 00:07:42,240
the software uh which is killed via

00:07:39,199 --> 00:07:46,160
vms on uh firstly uh

00:07:42,240 --> 00:07:49,280
will win the advisor role

00:07:46,160 --> 00:07:51,680
or other uh after that

00:07:49,280 --> 00:07:53,120
if other software it kills the the

00:07:51,680 --> 00:07:57,120
instruction

00:07:53,120 --> 00:07:59,840
it will fail and it will be tweeted

00:07:57,120 --> 00:07:59,840
a twitter

00:08:01,280 --> 00:08:10,840
so with this diagram actually

00:08:05,919 --> 00:08:14,160
it shows a cpus exclusion

00:08:10,840 --> 00:08:17,919
route in

00:08:14,160 --> 00:08:23,280
vt environment

00:08:17,919 --> 00:08:23,280
we will talk it uh later in more detail

00:08:23,520 --> 00:08:29,599
we can set a breakpoint at the via a

00:08:26,800 --> 00:08:33,279
microphone is flexing

00:08:29,599 --> 00:08:37,519
after we set the breakpoint we

00:08:33,279 --> 00:08:41,760
let the target go and

00:08:37,519 --> 00:08:45,760
we launched a kvl vm

00:08:41,760 --> 00:08:45,760
in the ubuntu target for example

00:08:45,920 --> 00:08:49,839
after we click the launch button the

00:08:48,800 --> 00:08:54,480
breakdown

00:08:49,839 --> 00:08:55,120
will be hit and using the call stack

00:08:54,480 --> 00:08:58,399
function

00:08:55,120 --> 00:09:00,399
we can see the call stack from the

00:08:58,399 --> 00:09:03,600
contact we can see

00:09:00,399 --> 00:09:07,120
the linux kernel is

00:09:03,600 --> 00:09:10,720
invoking kvm module

00:09:07,120 --> 00:09:15,760
to do hardware enable actually

00:09:10,720 --> 00:09:15,760
it's using the linux kernel's

00:09:16,560 --> 00:09:23,920
smp mechanism

00:09:20,839 --> 00:09:27,279
to let all

00:09:23,920 --> 00:09:32,080
uh cpu uh then

00:09:27,279 --> 00:09:34,399
to vm to enable to turn on the feature

00:09:32,080 --> 00:09:34,399
um

00:09:35,760 --> 00:09:42,240
after uh kvm uh gained the control uh

00:09:38,800 --> 00:09:46,000
if you begin invoke uh kvm intel

00:09:42,240 --> 00:09:49,120
uh actually is a function uh pointer uh

00:09:46,000 --> 00:09:50,880
registered into kvm

00:09:49,120 --> 00:09:52,640
so we can see that the hardware

00:09:50,880 --> 00:09:56,000
individual function inclusion

00:09:52,640 --> 00:09:59,680
and the ew it killed the vmx on

00:09:56,000 --> 00:10:03,200
uh instruction after this instruction

00:09:59,680 --> 00:10:06,640
actually uh the code

00:10:03,200 --> 00:10:09,920
which excludes the yeast oxygen with

00:10:06,640 --> 00:10:13,120
hypervisor law and

00:10:09,920 --> 00:10:16,560
according to a list called stack

00:10:13,120 --> 00:10:19,760
we can see the hybridizer called

00:10:16,560 --> 00:10:23,839
the linear kernel runs in one

00:10:19,760 --> 00:10:27,040
address space so it's safe to say

00:10:23,839 --> 00:10:32,880
the hypervisor and the linux kernel

00:10:27,040 --> 00:10:34,399
is run it is combined in kvm's

00:10:32,880 --> 00:10:38,000
architecture

00:10:34,399 --> 00:10:41,200
actually the kvm name is very good

00:10:38,000 --> 00:10:45,440
it means kernel based uh

00:10:41,200 --> 00:10:48,800
word tumors water machine technology

00:10:45,440 --> 00:10:54,000
so uh the the kernel

00:10:48,800 --> 00:10:54,000
uh plays the hypervisor role

00:10:54,079 --> 00:10:56,720
is smart

00:10:57,200 --> 00:11:06,959
just a quick uh view of kvm

00:11:01,920 --> 00:11:10,240
so next week i will talk about dci

00:11:06,959 --> 00:11:14,079
then i will talk how to

00:11:10,240 --> 00:11:17,519
debug pvm using pci

00:11:14,079 --> 00:11:21,839
and here is my debugging environment

00:11:17,519 --> 00:11:25,279
um actually i'm in tribal

00:11:21,839 --> 00:11:29,040
and i'm

00:11:25,279 --> 00:11:31,260
i'm talking in a small hotel

00:11:29,040 --> 00:11:33,360
here is the

00:11:31,260 --> 00:11:36,959
[Music]

00:11:33,360 --> 00:11:40,959
machines are used so a

00:11:36,959 --> 00:11:45,360
laptop is running as host

00:11:40,959 --> 00:11:48,160
and for the target i runs ubuntu

00:11:45,360 --> 00:11:48,880
i turn on the kvm feature and also

00:11:48,160 --> 00:11:53,040
install

00:11:48,880 --> 00:11:56,480
ubuntu inside the va one vm

00:11:53,040 --> 00:12:00,480
the hardware of the target is a

00:11:56,480 --> 00:12:03,760
general cpu low power

00:12:00,480 --> 00:12:07,360
for the target the bios is

00:12:03,760 --> 00:12:11,839
customized i will talk the reason

00:12:07,360 --> 00:12:16,480
shortly between the target and host

00:12:11,839 --> 00:12:20,399
i use a usb 3 cable to connect them

00:12:16,480 --> 00:12:23,440
that's a dci technology

00:12:20,399 --> 00:12:28,639
so dci stands for a direct connect

00:12:23,440 --> 00:12:28,639
interface and the name is

00:12:28,959 --> 00:12:32,399
very easy to understand

00:12:33,120 --> 00:12:40,880
it means we can connect the host

00:12:36,560 --> 00:12:44,800
with target very easy

00:12:40,880 --> 00:12:44,800
very direct and

00:12:45,200 --> 00:12:52,639
i think before dci we

00:12:48,959 --> 00:12:55,760
have to open the choices

00:12:52,639 --> 00:12:55,760
to connect the

00:12:56,880 --> 00:13:03,040
itp connector before this

00:13:00,000 --> 00:13:07,839
i interrupt use itp technology

00:13:03,040 --> 00:13:11,440
to do low level debugging for itp

00:13:07,839 --> 00:13:15,360
way the connector is

00:13:11,440 --> 00:13:19,360
a motherboard it's not imposed to

00:13:15,360 --> 00:13:22,639
traces so we have to open traces

00:13:19,360 --> 00:13:25,760
says inca winning

00:13:22,639 --> 00:13:29,440
so for dci actually it's

00:13:25,760 --> 00:13:34,320
introduced by skelet

00:13:29,440 --> 00:13:37,760
in 2016 um

00:13:34,320 --> 00:13:41,120
ipd is a very

00:13:37,760 --> 00:13:44,720
cool uh very good technology

00:13:41,120 --> 00:13:48,160
it it holds the powerful itp

00:13:44,720 --> 00:13:51,360
test detects again twin

00:13:48,160 --> 00:13:54,959
technology and to

00:13:51,360 --> 00:13:59,680
usb connector which is

00:13:54,959 --> 00:13:59,680
very easy to do connection

00:14:00,399 --> 00:14:04,800
inside the silicon actually there is a

00:14:03,600 --> 00:14:09,360
new component

00:14:04,800 --> 00:14:12,800
called xdci xdci

00:14:09,360 --> 00:14:16,560
will uh work with

00:14:12,800 --> 00:14:17,440
a gitech secant twin and transfer the

00:14:16,560 --> 00:14:23,040
data

00:14:17,440 --> 00:14:26,800
to xhci that's a usb 3 controller

00:14:23,040 --> 00:14:30,560
they will work together to expose the

00:14:26,800 --> 00:14:34,480
atp technology to a

00:14:30,560 --> 00:14:34,480
convenient usb port

00:14:35,279 --> 00:14:41,680
um here is the

00:14:38,320 --> 00:14:44,880
devices using

00:14:41,680 --> 00:14:48,000
dci debugger actually here is a empower

00:14:44,880 --> 00:14:48,000
system studio

00:14:48,720 --> 00:14:55,279
i think the beauty

00:14:52,160 --> 00:14:58,480
of dci debugger is

00:14:55,279 --> 00:15:03,440
you can see a lot of

00:14:58,480 --> 00:15:06,639
internal devices

00:15:03,440 --> 00:15:09,920
using the debugger

00:15:06,639 --> 00:15:12,959
for example here here we can see

00:15:09,920 --> 00:15:16,240
the internal car

00:15:12,959 --> 00:15:20,720
also the anchor bank

00:15:16,240 --> 00:15:27,839
part also the integrity

00:15:20,720 --> 00:15:27,839
devices inside the tube side

00:15:28,320 --> 00:15:34,959
so for people doing low-level

00:15:32,000 --> 00:15:35,680
development for weaker for example os

00:15:34,959 --> 00:15:39,680
development

00:15:35,680 --> 00:15:43,839
or general development i believe is very

00:15:39,680 --> 00:15:44,880
useful actually there are two types of

00:15:43,839 --> 00:15:50,000
dci

00:15:44,880 --> 00:15:53,360
one is called boundary scan 7 hosted dci

00:15:50,000 --> 00:15:57,279
it needs a small box the box

00:15:53,360 --> 00:16:00,959
is called a closed traces adapter

00:15:57,279 --> 00:16:04,639
as cca near salt

00:16:00,959 --> 00:16:08,160
the other way is called usb hosted dci

00:16:04,639 --> 00:16:11,519
it only needs a usb 3 cable

00:16:08,160 --> 00:16:15,120
and the second way

00:16:11,519 --> 00:16:18,560
is low cost and it's convenient actually

00:16:15,120 --> 00:16:18,560
i'm using the second way

00:16:19,199 --> 00:16:26,880
just to constitution constraint

00:16:22,800 --> 00:16:30,560
of the second way is it can only do i0

00:16:26,880 --> 00:16:35,440
debugging it cannot divide early

00:16:30,560 --> 00:16:38,959
recap for cca

00:16:35,440 --> 00:16:43,680
it can develop early wake up that's

00:16:38,959 --> 00:16:46,000
a one page of the cca

00:16:43,680 --> 00:16:46,000
tool

00:16:47,279 --> 00:16:55,759
um i have to mention that

00:16:52,079 --> 00:16:55,759
to do dci debugging

00:16:56,720 --> 00:17:05,520
we need usually customize the bios

00:17:02,079 --> 00:17:09,280
the reason is for security concern

00:17:05,520 --> 00:17:12,400
uh intel uh advise our oem

00:17:09,280 --> 00:17:17,439
to turn off the feature

00:17:12,400 --> 00:17:20,720
about uh just lock the feature

00:17:17,439 --> 00:17:25,600
after it's locked it cannot be

00:17:20,720 --> 00:17:25,600
turned on again without power cycle

00:17:26,000 --> 00:17:33,039
it means if instant of uh inside bios

00:17:29,840 --> 00:17:36,480
there is no way a to turn on it

00:17:33,039 --> 00:17:41,600
in os that's why

00:17:36,480 --> 00:17:41,600
we usually need a customized firmware

00:17:44,840 --> 00:17:50,480
sorry

00:17:47,039 --> 00:17:53,679
um after i introduce the

00:17:50,480 --> 00:17:57,360
pci then i will

00:17:53,679 --> 00:18:00,960
share my experience about debug qvm

00:17:57,360 --> 00:18:03,520
using vci i will talk

00:18:00,960 --> 00:18:04,720
uh some typical scenario to do the

00:18:03,520 --> 00:18:10,320
debugging

00:18:04,720 --> 00:18:15,520
for example uh about vm create

00:18:10,320 --> 00:18:19,200
there are a lot of steps to create a vm

00:18:15,520 --> 00:18:22,400
i will uh talk some

00:18:19,200 --> 00:18:26,840
examples for example here is

00:18:22,400 --> 00:18:29,440
a breakpoint vmix create

00:18:26,840 --> 00:18:33,840
vcpu

00:18:29,440 --> 00:18:37,520
when this preponderate we can examine

00:18:33,840 --> 00:18:40,320
the details about creating

00:18:37,520 --> 00:18:40,320
vcpu

00:18:41,200 --> 00:18:46,000
after creating vcpu uh

00:18:47,520 --> 00:18:54,080
uh the kvm will create

00:18:50,559 --> 00:18:56,960
virtual mmu uh welcome you

00:18:54,080 --> 00:18:58,080
are my i think it's just a simple name

00:18:56,960 --> 00:19:02,799
actually

00:18:58,080 --> 00:19:06,160
uh it's uh creating the facility

00:19:02,799 --> 00:19:10,640
of memory and pages

00:19:06,160 --> 00:19:16,080
for the vm test

00:19:10,640 --> 00:19:16,080
turn on the for example the epp

00:19:16,480 --> 00:19:24,000
technology of the hardware uh if

00:19:19,600 --> 00:19:24,000
no epp support in hardware

00:19:30,640 --> 00:19:33,120
software

00:19:34,559 --> 00:19:43,919
after creating a recipe and

00:19:39,360 --> 00:19:47,120
what you are mmu the kvm will create

00:19:43,919 --> 00:19:50,400
local ap for the vm

00:19:47,120 --> 00:19:52,559
local ap means

00:19:50,400 --> 00:19:55,120
advanced programmable interrupt

00:19:52,559 --> 00:19:55,120
controller

00:19:55,520 --> 00:19:59,520
that's a virtual uh

00:19:59,840 --> 00:20:04,320
kic for the vm

00:20:04,720 --> 00:20:10,640
to to interrupt and transfer

00:20:07,919 --> 00:20:10,640
to the vm

00:20:13,440 --> 00:20:21,360
after change pvm

00:20:16,480 --> 00:20:24,480
will also create some

00:20:21,360 --> 00:20:27,520
facility to emulate

00:20:24,480 --> 00:20:30,799
hybrids uh

00:20:27,520 --> 00:20:34,240
vampire facility i believe

00:20:30,799 --> 00:20:37,280
this is to uh

00:20:34,240 --> 00:20:41,440
speed up the device

00:20:37,280 --> 00:20:41,440
communication between

00:20:41,679 --> 00:20:44,320
vms

00:20:46,840 --> 00:20:53,520
in in in the times

00:20:49,360 --> 00:20:57,039
uh i think in 10 years before

00:20:53,520 --> 00:21:01,600
we usually emulate the device

00:20:57,039 --> 00:21:04,720
using the real protocol

00:21:01,600 --> 00:21:08,799
but it is it might be slow

00:21:04,720 --> 00:21:11,840
and the vm bus has a

00:21:08,799 --> 00:21:17,840
special protocol defend for

00:21:11,840 --> 00:21:17,840
vm it has a better performance

00:21:19,280 --> 00:21:26,559
after that kvm will create

00:21:22,480 --> 00:21:30,240
a pragma uh pro uh prague

00:21:26,559 --> 00:21:33,600
pip for vm

00:21:30,240 --> 00:21:39,039
is for primary draft

00:21:33,600 --> 00:21:43,520
terminal interrupt is a classic

00:21:39,039 --> 00:21:48,559
facility for for pc

00:21:43,520 --> 00:21:48,559
actually and today is still used

00:21:48,799 --> 00:21:56,240
so that the machine

00:21:52,080 --> 00:21:56,240
has a clock support

00:21:56,840 --> 00:22:02,960
um so after

00:21:59,360 --> 00:22:07,280
uh success about uh vmr create

00:22:02,960 --> 00:22:12,159
so so uh so now i will talk about

00:22:07,280 --> 00:22:15,280
actually after a vm uh is created uh

00:22:12,159 --> 00:22:18,720
cpu uh uh will

00:22:15,280 --> 00:22:23,600
uh run the vm launch instruction of vm

00:22:18,720 --> 00:22:27,600
enter then uh the cpu will

00:22:23,600 --> 00:22:30,960
enter the guest domain

00:22:27,600 --> 00:22:33,360
and runs his runs instruction inside the

00:22:30,960 --> 00:22:33,360
vm

00:22:33,520 --> 00:22:39,840
for normal distraction

00:22:36,880 --> 00:22:41,600
says unprevail the instruction the cpu

00:22:39,840 --> 00:22:43,840
will directly execute the

00:22:41,600 --> 00:22:44,960
youtube use function that's called

00:22:43,840 --> 00:22:49,840
direct

00:22:44,960 --> 00:22:53,039
execute but when cpu

00:22:49,840 --> 00:22:54,320
needs a previous instruction or io

00:22:53,039 --> 00:22:57,600
distraction

00:22:54,320 --> 00:23:00,799
then we will exit that's called

00:22:57,600 --> 00:23:03,600
vm exit so

00:23:00,799 --> 00:23:03,600
from uh

00:23:04,000 --> 00:23:10,640
to some extent when a cpu

00:23:07,280 --> 00:23:15,760
is running a vm it

00:23:10,640 --> 00:23:20,080
runs in such a loop enters vm

00:23:15,760 --> 00:23:22,880
and if it need meets

00:23:20,080 --> 00:23:24,480
a spatial instruction is also called

00:23:22,880 --> 00:23:28,400
sunday tv success

00:23:24,480 --> 00:23:29,039
it will exist to hypoid hypervisor uh

00:23:28,400 --> 00:23:32,159
will

00:23:29,039 --> 00:23:36,480
solve the issue and after that

00:23:32,159 --> 00:23:40,480
if you let the cpu enter the vm again

00:23:36,480 --> 00:23:44,240
test the loop so here vm exit

00:23:40,480 --> 00:23:47,440
doesn't mean vm saddam it means

00:23:44,240 --> 00:23:51,840
vm cpu exists from vm

00:23:47,440 --> 00:23:51,840
for some reason

00:23:52,080 --> 00:23:58,559
one typical reason about io access

00:23:55,760 --> 00:24:00,320
i think this is also the primary way to

00:23:58,559 --> 00:24:03,919
stop vm disorder

00:24:00,320 --> 00:24:07,279
hardware in uh

00:24:03,919 --> 00:24:10,720
in a vm environment uh there are

00:24:07,279 --> 00:24:13,919
several uh vms uh they may

00:24:10,720 --> 00:24:18,480
have uh they may share one real device

00:24:13,919 --> 00:24:22,080
so if they access a hardware

00:24:18,480 --> 00:24:25,440
evil exit and the hypervisor

00:24:22,080 --> 00:24:28,400
will management

00:24:25,440 --> 00:24:28,400
to the management

00:24:29,360 --> 00:24:32,720
here in the breakpoint

00:24:33,279 --> 00:24:39,200
and in the debug we can see the call

00:24:37,360 --> 00:24:42,159
stack

00:24:39,200 --> 00:24:42,159
and source code

00:24:42,640 --> 00:24:47,120
actually there are two types io is

00:24:44,880 --> 00:24:47,120
called

00:24:51,200 --> 00:24:58,480
is created by the classic pc parts

00:24:55,360 --> 00:25:01,679
right now most i o

00:24:58,480 --> 00:25:06,080
is memory map l uh is more common

00:25:01,679 --> 00:25:09,279
and better performance

00:25:06,080 --> 00:25:12,320
so for uh hypervisor

00:25:09,279 --> 00:25:15,600
uh actually today we use

00:25:12,320 --> 00:25:18,880
two email in both kvm

00:25:15,600 --> 00:25:22,480
for both kvm and zam uh

00:25:18,880 --> 00:25:25,760
for uh qemu actually it will raise her

00:25:22,480 --> 00:25:29,120
uh l power uh function callbacks for

00:25:25,760 --> 00:25:32,480
l uh error part so

00:25:29,120 --> 00:25:35,200
actually when we uh create a new

00:25:32,480 --> 00:25:36,480
uh virtual device uh to priority the

00:25:35,200 --> 00:25:39,760
main job is to do

00:25:36,480 --> 00:25:43,840
uh uh to to to develop

00:25:39,760 --> 00:25:43,840
the read-write callback

00:25:44,880 --> 00:25:52,000
and in pvm there is a kvm io bus

00:25:48,720 --> 00:25:55,840
it will uh management all

00:25:52,000 --> 00:25:59,760
all io ports and the register

00:25:55,840 --> 00:26:04,799
function callbacks for example

00:25:59,760 --> 00:26:07,760
here here is it

00:26:04,799 --> 00:26:07,760
for port arrow

00:26:08,840 --> 00:26:15,279
then uh

00:26:11,520 --> 00:26:18,640
that's clear it means

00:26:15,279 --> 00:26:21,840
uh a cpu uh

00:26:18,640 --> 00:26:24,960
do the i o access inside vm and

00:26:21,840 --> 00:26:29,039
exit after exit

00:26:24,960 --> 00:26:32,159
kvm will invoke will handle the uses

00:26:29,039 --> 00:26:36,960
and invoke kvm intel

00:26:32,159 --> 00:26:40,320
that's expansion by by intel

00:26:36,960 --> 00:26:43,039
uh and can uh came in here

00:26:40,320 --> 00:26:43,039
will uh

00:26:45,520 --> 00:26:48,559
will check the effects region and invoke

00:26:48,159 --> 00:26:53,200
the

00:26:48,559 --> 00:26:58,000
fast pio function

00:26:53,200 --> 00:27:01,679
also then it will uh walk through the

00:26:58,000 --> 00:27:04,080
i o bus to find the

00:27:01,679 --> 00:27:04,880
read write callback and invoke the

00:27:04,080 --> 00:27:09,600
callback

00:27:04,880 --> 00:27:13,520
here we can see the part address in

00:27:09,600 --> 00:27:16,000
7-1 actually is the classic cmos

00:27:13,520 --> 00:27:16,000
device

00:27:16,640 --> 00:27:23,039
there is a abbreviated

00:27:20,240 --> 00:27:23,039
cost cost

00:27:26,399 --> 00:27:33,200
then i will talk another example about

00:27:29,919 --> 00:27:36,559
my rematch i o here actually the

00:27:33,200 --> 00:27:39,600
ap is using mml

00:27:36,559 --> 00:27:42,480
is read callback and

00:27:39,600 --> 00:27:42,480
here is a

00:27:43,120 --> 00:27:48,480
code stack in debugger we can see

00:27:50,320 --> 00:27:56,799
it's a right access and

00:27:53,760 --> 00:28:00,240
invoke the kvm red mmo

00:27:56,799 --> 00:28:02,480
and it will dispatch to the ap function

00:28:00,240 --> 00:28:02,480
called

00:28:03,900 --> 00:28:10,559
[Music]

00:28:06,799 --> 00:28:14,840
parameters we can see this a spicer

00:28:10,559 --> 00:28:18,000
address actually is a peak

00:28:14,840 --> 00:28:21,120
register in the epic spike

00:28:18,000 --> 00:28:24,480
it defines that

00:28:21,120 --> 00:28:29,120
linear advice range

00:28:24,480 --> 00:28:34,640
beneath for four giga bytes

00:28:29,120 --> 00:28:37,279
actually is reserved for ap

00:28:34,640 --> 00:28:37,919
so here are some useful breakpoints to

00:28:37,279 --> 00:28:44,000
do

00:28:37,919 --> 00:28:47,279
to develop kvm uh for reference

00:28:44,000 --> 00:28:51,120
uh here is a quick uh real case

00:28:47,279 --> 00:28:55,440
actually when i turn off the

00:28:51,120 --> 00:28:58,559
target machine as you want to uh

00:28:55,440 --> 00:29:01,600
take a long long time

00:28:58,559 --> 00:29:05,600
as a power of

00:29:01,600 --> 00:29:07,760
a screen it seems harm on somewhere

00:29:05,600 --> 00:29:09,760
research debugger is very hard to do the

00:29:07,760 --> 00:29:13,279
debug

00:29:09,760 --> 00:29:16,480
then i use the debugger to

00:29:13,279 --> 00:29:18,080
make to break it then the target breaks

00:29:16,480 --> 00:29:22,320
into the debugger

00:29:18,080 --> 00:29:26,399
i i check the cpu 0 firstly

00:29:22,320 --> 00:29:28,720
from the call stack it's servicing a

00:29:26,399 --> 00:29:30,720
reboot interrupt

00:29:28,720 --> 00:29:33,760
and from the source code of the

00:29:30,720 --> 00:29:33,760
rebooting draft

00:29:34,320 --> 00:29:41,039
it's doing a stop cpu actually

00:29:38,000 --> 00:29:44,480
this function will trigger

00:29:41,039 --> 00:29:48,320
the ib video trigger api

00:29:44,480 --> 00:29:51,440
to let all other cpu

00:29:48,320 --> 00:29:55,279
responses that command

00:29:51,440 --> 00:29:58,720
and we will switch to cpu 2 we can see

00:29:55,279 --> 00:30:02,559
it means it might panic and

00:29:58,720 --> 00:30:02,559
it's in uh constantly

00:30:02,720 --> 00:30:09,120
so that's why the hand it means

00:30:05,919 --> 00:30:13,039
when we turn off ubuntu

00:30:09,120 --> 00:30:16,399
with some vm iran

00:30:13,039 --> 00:30:20,159
there are some special calls triggered

00:30:16,399 --> 00:30:23,360
panic of linux kernel

00:30:20,159 --> 00:30:28,320
with this tiny uh there is delay

00:30:23,360 --> 00:30:28,320
uh inside the kernel and called uh

00:30:28,559 --> 00:30:32,240
uh sfdu is

00:30:32,720 --> 00:30:39,360
zero of about one minute

00:30:36,240 --> 00:30:39,360
uh delay

00:30:39,520 --> 00:30:46,080
so that's uh all about my uh

00:30:42,559 --> 00:30:49,120
talk um i'm very thankful uh

00:30:46,080 --> 00:30:52,559
uh for your uh attendance

00:30:49,120 --> 00:30:58,480
and see you

00:30:52,559 --> 00:30:58,480

YouTube URL: https://www.youtube.com/watch?v=tapqPoh4J1M


