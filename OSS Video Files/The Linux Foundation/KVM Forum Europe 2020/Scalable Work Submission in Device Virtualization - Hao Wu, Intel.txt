Title: Scalable Work Submission in Device Virtualization - Hao Wu, Intel
Publication date: 2020-11-10
Playlist: KVM Forum Europe 2020
Description: 
	Scalable Work Submission in Device Virtualization - Hao Wu, Intel
Captions: 
	00:00:05,359 --> 00:00:10,480
hello everyone

00:00:06,480 --> 00:00:14,080
my name is i'm from intel

00:00:10,480 --> 00:00:15,519
virtualization enabling team this is my

00:00:14,080 --> 00:00:18,160
topic today

00:00:15,519 --> 00:00:20,560
scalable work submission in device

00:00:18,160 --> 00:00:31,840
virtualization

00:00:20,560 --> 00:00:31,840
okay let's start

00:00:33,680 --> 00:00:39,920
um this is the agenda of this topic

00:00:37,120 --> 00:00:42,320
first of all i would like to discuss

00:00:39,920 --> 00:00:45,280
scalability in virtualization for

00:00:42,320 --> 00:00:48,640
different types of device

00:00:45,280 --> 00:00:50,320
include the dedicated queue

00:00:48,640 --> 00:00:51,760
dedicated work queue and shareable

00:00:50,320 --> 00:00:55,280
cubase the devices

00:00:51,760 --> 00:00:57,600
and also related challenges and then i

00:00:55,280 --> 00:01:01,039
will introduce a new eq command

00:00:57,600 --> 00:01:01,440
instruction on intel platforms and also

00:01:01,039 --> 00:01:03,920
its

00:01:01,440 --> 00:01:05,119
virtualization support virtualized

00:01:03,920 --> 00:01:09,280
scalable

00:01:05,119 --> 00:01:13,600
work submission in device virtualization

00:01:09,280 --> 00:01:17,360
then i will the virtual addressing

00:01:13,600 --> 00:01:18,400
sba workload submission as one example

00:01:17,360 --> 00:01:21,600
to demonstrate

00:01:18,400 --> 00:01:24,720
how the whole picture looks like

00:01:21,600 --> 00:01:24,720
with eco command

00:01:25,600 --> 00:01:30,799
okay let's start with the first one

00:01:33,840 --> 00:01:39,280
scalability in device virtualization

00:01:36,720 --> 00:01:43,360
there are two devices in this page

00:01:39,280 --> 00:01:47,040
in the left side this is a pcie

00:01:43,360 --> 00:01:50,399
srv based device it supports multiple

00:01:47,040 --> 00:01:53,360
virtual functions each virtual function

00:01:50,399 --> 00:01:54,720
is independent interface which can be

00:01:53,360 --> 00:01:58,479
assigned to different

00:01:54,720 --> 00:02:01,600
virtual machines in the right side

00:01:58,479 --> 00:02:05,119
is a intel scalable lv device

00:02:01,600 --> 00:02:07,360
it supports multiple adis design for

00:02:05,119 --> 00:02:10,160
device interface

00:02:07,360 --> 00:02:10,720
and each ads can be assigned to

00:02:10,160 --> 00:02:13,520
different

00:02:10,720 --> 00:02:13,520
virtual machine

00:02:13,840 --> 00:02:20,720
as dedicated work queue is implemented

00:02:17,680 --> 00:02:23,920
in reaps and adis of

00:02:20,720 --> 00:02:26,160
these two devices so they

00:02:23,920 --> 00:02:28,319
provide the scalability by hard

00:02:26,160 --> 00:02:31,040
partitioning the hardware

00:02:28,319 --> 00:02:31,040
resources

00:02:34,000 --> 00:02:38,239
it will be quite difficult to increase

00:02:36,800 --> 00:02:40,800
the number of

00:02:38,239 --> 00:02:43,040
virtual functions or adis due to limited

00:02:40,800 --> 00:02:46,239
hardware resources on some devices

00:02:43,040 --> 00:02:50,879
this is a scalability limitation for

00:02:46,239 --> 00:02:53,840
dedicated workq based device

00:02:50,879 --> 00:02:55,760
so could we implement a shared work

00:02:53,840 --> 00:02:58,080
queue in device estate

00:02:55,760 --> 00:03:00,959
in case that we cannot do hard partition

00:02:58,080 --> 00:03:04,159
for device resources

00:03:00,959 --> 00:03:08,640
and if we already do that how to issue

00:03:04,159 --> 00:03:08,640
scalability in device virtualization

00:03:15,519 --> 00:03:21,840
okay let's see how shareware cube based

00:03:19,120 --> 00:03:22,959
device looks like here this shared work

00:03:21,840 --> 00:03:26,319
queue

00:03:22,959 --> 00:03:28,640
is used by multiple users in host and

00:03:26,319 --> 00:03:30,400
the typical usage of shareable queue is

00:03:28,640 --> 00:03:31,280
to support the share the virtual

00:03:30,400 --> 00:03:34,400
addressing

00:03:31,280 --> 00:03:37,680
sva sva

00:03:34,400 --> 00:03:38,560
routes device to use the cpu virtual

00:03:37,680 --> 00:03:41,760
address for

00:03:38,560 --> 00:03:41,760
dma operation

00:03:41,840 --> 00:03:48,640
and the device also can use the

00:03:45,040 --> 00:03:52,000
passive id process address-based id

00:03:48,640 --> 00:03:54,560
to distinguish the context of different

00:03:52,000 --> 00:03:54,560
workloads

00:03:56,080 --> 00:04:00,879
and dmt address translation will be

00:03:59,840 --> 00:04:05,040
performed by

00:04:00,879 --> 00:04:15,840
rmu at the requester id

00:04:05,040 --> 00:04:15,840
plus psid granularity

00:04:19,600 --> 00:04:24,880
server q in device virtualization for

00:04:22,800 --> 00:04:26,720
sure we can put the shareable queue

00:04:24,880 --> 00:04:28,880
into a virtual function and then assign

00:04:26,720 --> 00:04:32,320
assigned to a virtual machine

00:04:28,880 --> 00:04:34,560
to allow different users inside inside

00:04:32,320 --> 00:04:36,479
the virtual machine to share this

00:04:34,560 --> 00:04:39,919
interface

00:04:36,479 --> 00:04:42,720
just like device in the left side

00:04:39,919 --> 00:04:44,240
but we also can share the same device

00:04:42,720 --> 00:04:47,919
interface to users

00:04:44,240 --> 00:04:50,960
in both host and virtual machines as

00:04:47,919 --> 00:04:53,040
a device in the right side actually

00:04:50,960 --> 00:04:54,639
there is no hard limitation on the

00:04:53,040 --> 00:04:57,919
number of users

00:04:54,639 --> 00:05:00,960
for a shareable queue so it can provide

00:04:57,919 --> 00:05:04,400
a better scalability

00:05:00,960 --> 00:05:08,840
by adding more and more

00:05:04,400 --> 00:05:11,600
virtual devices on the same shareable

00:05:08,840 --> 00:05:14,639
queue

00:05:11,600 --> 00:05:16,960
of course one device can

00:05:14,639 --> 00:05:19,520
implement a dedicated work here and they

00:05:16,960 --> 00:05:19,520
should work

00:05:22,840 --> 00:05:25,840
together

00:05:30,880 --> 00:05:37,600
a challenger in device virtualization

00:05:34,560 --> 00:05:40,560
as shared which addressing sba is used

00:05:37,600 --> 00:05:42,720
though we are facing a challenge here

00:05:40,560 --> 00:05:46,720
users in virtual machines

00:05:42,720 --> 00:05:51,360
are not aware of host psid

00:05:46,720 --> 00:05:54,720
so workloads are submitted together with

00:05:51,360 --> 00:05:58,319
past guest best ids but

00:05:54,720 --> 00:06:01,360
device and iom you are using

00:05:58,319 --> 00:06:05,280
whole space id for the dma

00:06:01,360 --> 00:06:08,800
operation so

00:06:05,280 --> 00:06:14,479
how to convert guest pass id

00:06:08,800 --> 00:06:14,479
to host pass id in device virtualization

00:06:17,600 --> 00:06:21,680
and new instruction echo command is

00:06:20,080 --> 00:06:24,880
introduced to

00:06:21,680 --> 00:06:24,880
address escape

00:06:26,880 --> 00:06:32,639
okay we will move to echo command

00:06:29,840 --> 00:06:32,639
instruction

00:06:32,840 --> 00:06:38,479
introduction

00:06:35,039 --> 00:06:41,520
inquiry command is a new instruction on

00:06:38,479 --> 00:06:44,560
intel platform that autonomically

00:06:41,520 --> 00:06:49,360
submitted workload to your device

00:06:44,560 --> 00:06:53,520
and the optims pass id for ios 32

00:06:49,360 --> 00:06:59,440
passes dmsr and the enqueue store

00:06:53,520 --> 00:07:02,800
64 byte command data to inquiry register

00:06:59,440 --> 00:07:06,720
implemented in device mmo

00:07:02,800 --> 00:07:10,400
this is the format of the command data

00:07:06,720 --> 00:07:13,759
front spec it includes

00:07:10,400 --> 00:07:17,440
the device specific command

00:07:13,759 --> 00:07:20,639
area which can just be a

00:07:17,440 --> 00:07:23,759
work descriptor

00:07:20,639 --> 00:07:31,840
and together with psa id

00:07:23,759 --> 00:07:31,840
which indicates the context of this work

00:07:38,400 --> 00:07:45,199
i 32 psid members are as managed by

00:07:41,840 --> 00:07:46,960
excel feature set as the passati

00:07:45,199 --> 00:07:51,680
supervisor state component

00:07:46,960 --> 00:07:55,120
and updated by it per contact switch

00:07:51,680 --> 00:07:58,479
after sba process binding

00:07:55,120 --> 00:08:01,520
is 32 psi msr will

00:07:58,479 --> 00:08:04,560
reflect the

00:08:01,520 --> 00:08:06,240
pass id value associated with the

00:08:04,560 --> 00:08:09,120
process

00:08:06,240 --> 00:08:11,360
so when this eq command instruction is

00:08:09,120 --> 00:08:14,240
used by eurospace application

00:08:11,360 --> 00:08:15,680
it doesn't need to worry about the pass

00:08:14,240 --> 00:08:18,400
id

00:08:15,680 --> 00:08:18,879
as your command instruction obtains it

00:08:18,400 --> 00:08:22,639
from

00:08:18,879 --> 00:08:22,639
the msr automatically

00:08:22,720 --> 00:08:30,800
and this mechanism also can prevent

00:08:27,520 --> 00:08:35,839
malicious passivity to be

00:08:30,800 --> 00:08:35,839
written to device from the user's face

00:08:38,839 --> 00:08:44,720
application

00:08:41,039 --> 00:08:47,279
anchor command is a non-posted inter

00:08:44,720 --> 00:08:48,800
instruction which carries a status back

00:08:47,279 --> 00:08:52,320
if the command was

00:08:48,800 --> 00:08:55,600
accepted by device or not

00:08:52,320 --> 00:08:56,399
for example submission will fail to be

00:08:55,600 --> 00:08:59,680
accepted

00:08:56,399 --> 00:09:03,519
by the device if the shared work queue

00:08:59,680 --> 00:09:06,240
is already full this allows the

00:09:03,519 --> 00:09:06,560
submitter to know the submission status

00:09:06,240 --> 00:09:10,560
and

00:09:06,560 --> 00:09:10,560
perform retry if needed

00:09:16,240 --> 00:09:24,080
inquire command supervisor is similar to

00:09:20,080 --> 00:09:28,000
eq command instruction but only works

00:09:24,080 --> 00:09:32,160
in kernel space and any options

00:09:28,000 --> 00:09:32,160
pass added value from command data

00:09:34,839 --> 00:09:42,160
directory

00:09:37,839 --> 00:09:45,519
uh device requirements for your command

00:09:42,160 --> 00:09:50,160
the differable memory right

00:09:45,519 --> 00:09:54,160
is a non-prostate non-posted

00:09:50,160 --> 00:09:55,920
requests defined by pcie spec

00:09:54,160 --> 00:09:58,480
in order to support the eco command

00:09:55,920 --> 00:10:00,959
instruction device need to support

00:09:58,480 --> 00:10:00,959
difficult

00:10:02,480 --> 00:10:10,560
memory writes a complete

00:10:06,360 --> 00:10:14,320
capability and requires all switch

00:10:10,560 --> 00:10:17,519
ports and the reports have a

00:10:14,320 --> 00:10:20,560
differable memory

00:10:17,519 --> 00:10:20,560
wrote enabled

00:10:22,079 --> 00:10:29,120
in data streaming accelerator is the

00:10:25,920 --> 00:10:32,720
first device which supports eq command

00:10:29,120 --> 00:10:36,959
this is the latest driver pad set under

00:10:32,720 --> 00:10:39,839
review here is the link to

00:10:36,959 --> 00:10:39,839
that submission

00:10:43,839 --> 00:10:49,920
okay let's move to eq command

00:10:47,680 --> 00:10:52,000
virtualization first of all i want to

00:10:49,920 --> 00:10:54,000
introduce the

00:10:52,000 --> 00:10:56,480
null rule mode operation of this

00:10:54,000 --> 00:10:59,200
instruction

00:10:56,480 --> 00:11:00,000
actually echo command has different

00:10:59,200 --> 00:11:03,200
operation

00:11:00,000 --> 00:11:04,880
in knowledge mode you go command

00:11:03,200 --> 00:11:06,800
your command and you command the

00:11:04,880 --> 00:11:10,800
supervisor or obtain the

00:11:06,800 --> 00:11:14,000
guest pass id firstly and then

00:11:10,800 --> 00:11:15,680
it will perform guest best id

00:11:14,000 --> 00:11:17,279
to host base id translation

00:11:15,680 --> 00:11:20,800
automatically

00:11:17,279 --> 00:11:24,079
and then enqueue store command data with

00:11:20,800 --> 00:11:28,079
host password to device

00:11:24,079 --> 00:11:31,600
as normal mode enqueue commands performs

00:11:28,079 --> 00:11:32,560
the ksps id to host sid translation

00:11:31,600 --> 00:11:36,320
automatically

00:11:32,560 --> 00:11:36,880
then it can address the gap we discussed

00:11:36,320 --> 00:11:43,839
in

00:11:36,880 --> 00:11:43,839
previous page on sva workload submission

00:11:45,760 --> 00:11:49,519
okay let's move to the next page for

00:11:48,079 --> 00:11:57,839
more details about

00:11:49,519 --> 00:11:57,839
psi translation

00:11:58,560 --> 00:12:02,000
has id translation is the new feature

00:12:00,959 --> 00:12:06,560
introduced

00:12:02,000 --> 00:12:09,680
in vmx for income command

00:12:06,560 --> 00:12:11,920
virtualization it's enabled by setting

00:12:09,680 --> 00:12:15,440
secondary process-based

00:12:11,920 --> 00:12:18,959
vm execution control and the pass ldt

00:12:15,440 --> 00:12:25,839
translation table is required to be

00:12:18,959 --> 00:12:25,839
linked by pointers in the vmcs

00:12:27,480 --> 00:12:33,360
psid translation table has two level

00:12:30,880 --> 00:12:34,560
data structure as you see in the right

00:12:33,360 --> 00:12:38,399
side

00:12:34,560 --> 00:12:41,600
pass id low and high directory and

00:12:38,399 --> 00:12:45,040
pass edit table different

00:12:41,600 --> 00:12:48,800
fields of guest pass id

00:12:45,040 --> 00:12:52,720
are used to select the

00:12:48,800 --> 00:12:53,519
passive id table entry which contains

00:12:52,720 --> 00:12:57,600
the

00:12:53,519 --> 00:13:01,040
associated hostpass id

00:12:57,600 --> 00:13:04,320
when echo command run runs

00:13:01,040 --> 00:13:07,360
in narrow mode the hardware use

00:13:04,320 --> 00:13:11,440
this table for translation if it

00:13:07,360 --> 00:13:21,839
fails to translate the gas passage

00:13:11,440 --> 00:13:21,839
memory exit will be triggered

00:13:23,600 --> 00:13:28,639
kvm is required to manage the space id

00:13:27,200 --> 00:13:32,240
translation table for

00:13:28,639 --> 00:13:36,560
eco command virtualization

00:13:32,240 --> 00:13:40,639
kvm needs updates translation per io

00:13:36,560 --> 00:13:43,680
address-based id events

00:13:40,639 --> 00:13:44,480
i always said the managers host the pass

00:13:43,680 --> 00:13:49,680
id and

00:13:44,480 --> 00:13:52,800
its association to case pass it

00:13:49,680 --> 00:13:56,079
it will notify users

00:13:52,800 --> 00:13:59,279
on the passive id status change

00:13:56,079 --> 00:14:02,639
so kvm monitor

00:13:59,279 --> 00:14:05,839
ios and by and on by the events for

00:14:02,639 --> 00:14:05,839
translation update

00:14:09,680 --> 00:14:13,920
you you can find more details about this

00:14:12,320 --> 00:14:17,519
in another kvm

00:14:13,920 --> 00:14:21,279
for your talk which title is pass ide

00:14:17,519 --> 00:14:31,839
management in kvm

00:14:21,279 --> 00:14:31,839
here is a link to their session

00:14:35,040 --> 00:14:40,399
test id translation table is a premium

00:14:37,600 --> 00:14:43,440
table shared by all vmcs

00:14:40,399 --> 00:14:47,120
any modification to this this

00:14:43,440 --> 00:14:50,320
table must be a really new operation

00:14:47,120 --> 00:14:53,519
that means kvm needs to kick

00:14:50,320 --> 00:14:57,440
all vcpus into root mode

00:14:53,519 --> 00:14:59,760
and block vm entry until modification is

00:14:57,440 --> 00:15:03,519
done

00:14:59,760 --> 00:15:06,560
this is a requirement for sdm

00:15:03,519 --> 00:15:10,000
remote modified data structure which is

00:15:06,560 --> 00:15:14,880
referenced by pointers in vmcs

00:15:10,000 --> 00:15:14,880
and controls non-rune mode operation

00:15:20,800 --> 00:15:24,560
pass id translation figure handling

00:15:24,959 --> 00:15:28,399
translation failure only happens when

00:15:27,279 --> 00:15:32,880
guest guest

00:15:28,399 --> 00:15:32,880
is using an embedded guest pass id

00:15:33,920 --> 00:15:41,279
any guest specialty only can be used

00:15:37,279 --> 00:15:42,480
for dma operation after a whole space

00:15:41,279 --> 00:15:45,759
ide

00:15:42,480 --> 00:15:50,800
is associated to it

00:15:45,759 --> 00:15:54,240
the reason is device and rmu

00:15:50,800 --> 00:15:58,079
always use hostpass id

00:15:54,240 --> 00:16:02,959
for dma operation they never

00:15:58,079 --> 00:16:02,959
know about guest facility

00:16:03,279 --> 00:16:09,680
so in this vm

00:16:06,399 --> 00:16:12,720
exit handling just set the cf

00:16:09,680 --> 00:16:13,519
flag to 1 to indicate the figure to

00:16:12,720 --> 00:16:22,160
guest and

00:16:13,519 --> 00:16:24,500
skip the instruction

00:16:22,160 --> 00:16:25,839
started to pass a mess arbitrarization

00:16:24,500 --> 00:16:29,120
[Music]

00:16:25,839 --> 00:16:31,680
as mentioned above in

00:16:29,120 --> 00:16:32,959
income will command the null rule mode

00:16:31,680 --> 00:16:35,600
operation

00:16:32,959 --> 00:16:37,519
income command optims case the pass id

00:16:35,600 --> 00:16:41,440
from

00:16:37,519 --> 00:16:45,440
i 32 pence idms also just pursue

00:16:41,440 --> 00:16:48,720
this msr to the guest directory

00:16:45,440 --> 00:16:52,800
as this ia32

00:16:48,720 --> 00:16:56,560
passive msr is managed by xsav

00:16:52,800 --> 00:17:00,800
so enable virtualization support for

00:16:56,560 --> 00:17:03,519
xa psid supervisor state

00:17:00,800 --> 00:17:04,959
component so that guests can use this

00:17:03,519 --> 00:17:11,120
extension

00:17:04,959 --> 00:17:11,120
to update the ms mapper context switch

00:17:11,600 --> 00:17:16,240
okay these are major changes required to

00:17:15,360 --> 00:17:19,679
support

00:17:16,240 --> 00:17:20,160
equal command virtualization next i will

00:17:19,679 --> 00:17:23,199
use

00:17:20,160 --> 00:17:33,840
sva workload submission as one quick

00:17:23,199 --> 00:17:33,840
example to demonstrate the flow

00:17:34,720 --> 00:17:39,760
this is one this is the example that

00:17:37,360 --> 00:17:41,919
user uses inquiry command to submit

00:17:39,760 --> 00:17:44,160
as variable cloud and guest hope this

00:17:41,919 --> 00:17:47,760
can give a basic idea on

00:17:44,160 --> 00:17:52,000
the workflow

00:17:47,760 --> 00:17:55,919
in in case case one wants the device to

00:17:52,000 --> 00:17:59,280
perform some right some right

00:17:55,919 --> 00:18:02,880
data to a virtual buffer

00:17:59,280 --> 00:18:05,440
it needs to prepare our work descriptor

00:18:02,880 --> 00:18:08,960
with target developer information

00:18:05,440 --> 00:18:11,919
including the address so a

00:18:08,960 --> 00:18:12,880
case the virtual address is filled into

00:18:11,919 --> 00:18:16,400
the

00:18:12,880 --> 00:18:19,360
work descriptor

00:18:16,400 --> 00:18:21,760
then cancer application can run equal

00:18:19,360 --> 00:18:24,880
command to submit this workload

00:18:21,760 --> 00:18:28,760
to the device directory

00:18:24,880 --> 00:18:32,000
the case pass id will be filled from

00:18:28,760 --> 00:18:34,480
ia32 pencil.msr and translate

00:18:32,000 --> 00:18:38,080
automatically

00:18:34,480 --> 00:18:38,080
to the hostpass id

00:18:38,480 --> 00:18:45,200
and the work descriptor will

00:18:42,000 --> 00:18:48,160
be stored to device together with the

00:18:45,200 --> 00:18:48,160
hostpass id

00:18:50,000 --> 00:18:54,480
application is to check instruction

00:18:52,960 --> 00:18:59,919
status to make sure

00:18:54,480 --> 00:18:59,919
the submission was accepted by device

00:19:00,720 --> 00:19:08,400
if device accepts this workload

00:19:04,799 --> 00:19:11,679
it will perform and dma operation use

00:19:08,400 --> 00:19:14,480
gpa and

00:19:11,679 --> 00:19:16,720
payload information indicated by the

00:19:14,480 --> 00:19:21,679
work descriptor

00:19:16,720 --> 00:19:25,679
and also the hostpass id

00:19:21,679 --> 00:19:26,480
iom menu will do the dma address

00:19:25,679 --> 00:19:30,160
translation

00:19:26,480 --> 00:19:33,919
per id

00:19:30,160 --> 00:19:37,039
plus passive id

00:19:33,919 --> 00:19:40,640
so the gva will be

00:19:37,039 --> 00:19:44,640
translate translated to hpa

00:19:40,640 --> 00:19:44,640
for the dma operation

00:19:45,120 --> 00:19:53,840
okay this is a

00:19:48,400 --> 00:19:53,840
just an example

00:19:57,039 --> 00:20:04,480
okay reference there are some

00:20:00,559 --> 00:20:07,120
reference documentation including kernel

00:20:04,480 --> 00:20:08,880
dog show virtual addressing with secure

00:20:07,120 --> 00:20:12,159
command

00:20:08,880 --> 00:20:15,840
and also you could commence back intel

00:20:12,159 --> 00:20:19,440
scalable rv documentation and also

00:20:15,840 --> 00:20:21,760
intel data streaming etc

00:20:19,440 --> 00:20:21,760
spec

00:20:28,000 --> 00:20:32,799
this is a development status

00:20:32,840 --> 00:20:38,880
currently currently

00:20:35,520 --> 00:20:42,400
we already have the eq command native

00:20:38,880 --> 00:20:45,280
support merged into the latest kernel

00:20:42,400 --> 00:20:45,760
i always say i always say the extension

00:20:45,280 --> 00:20:49,360
for

00:20:45,760 --> 00:20:53,200
notification is under review

00:20:49,360 --> 00:20:56,640
version 3 was submitted

00:20:53,200 --> 00:20:58,720
this is the link to the version 3 pass

00:20:56,640 --> 00:21:03,840
it

00:20:58,720 --> 00:21:03,840
for eq command virtualization support

00:21:04,159 --> 00:21:12,960
will submit soon and

00:21:07,600 --> 00:21:12,960
the code is under internal review now

00:21:13,120 --> 00:21:18,640
line migration support is not covered

00:21:15,919 --> 00:21:18,640
yet so

00:21:19,200 --> 00:21:23,039
it is in the to-do list now

00:21:28,840 --> 00:21:36,960
okay this is a

00:21:32,320 --> 00:21:41,360
summary of this talk dedicated work you

00:21:36,960 --> 00:21:42,240
based on how the partitioning of the

00:21:41,360 --> 00:21:46,640
resources

00:21:42,240 --> 00:21:50,240
has scalability limitation in

00:21:46,640 --> 00:21:53,679
virtualization share work queue

00:21:50,240 --> 00:21:55,840
with eq command support allows

00:21:53,679 --> 00:21:57,200
more scalable usage in device

00:21:55,840 --> 00:22:00,000
virtualization

00:21:57,200 --> 00:22:02,799
and same device interface can be shared

00:22:00,000 --> 00:22:05,679
by multiple users in host and

00:22:02,799 --> 00:22:05,679
virtual machines

00:22:08,400 --> 00:22:12,640
additional hardware support is required

00:22:11,840 --> 00:22:15,919
to

00:22:12,640 --> 00:22:20,240
support equal command virtualization in

00:22:15,919 --> 00:22:23,280
for example pass id translation

00:22:20,240 --> 00:22:26,640
except extension for case id

00:22:23,280 --> 00:22:30,400
and corresponding changes in

00:22:26,640 --> 00:22:40,799
vm is also required to support

00:22:30,400 --> 00:22:44,080
inquiry command virtualization okay

00:22:40,799 --> 00:22:55,039
that's all for my sharing of this talk

00:22:44,080 --> 00:22:57,120
thanks for watching this

00:22:55,039 --> 00:22:57,120

YouTube URL: https://www.youtube.com/watch?v=OCqxTxgVPUQ


