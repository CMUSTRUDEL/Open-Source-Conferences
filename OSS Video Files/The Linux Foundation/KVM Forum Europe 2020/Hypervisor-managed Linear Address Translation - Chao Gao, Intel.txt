Title: Hypervisor-managed Linear Address Translation - Chao Gao, Intel
Publication date: 2020-11-10
Playlist: KVM Forum Europe 2020
Description: 
	Hypervisor-managed Linear Address Translation - Chao Gao, Intel
Captions: 
	00:00:07,600 --> 00:00:10,719
hello

00:00:08,240 --> 00:00:12,240
thanks for attending this session i'm

00:00:10,719 --> 00:00:14,880
garcia working for intel

00:00:12,240 --> 00:00:16,960
today i'm going to share with you a new

00:00:14,880 --> 00:00:20,000
extension to

00:00:16,960 --> 00:00:25,439
intel vtx the hypervisor manager the

00:00:20,000 --> 00:00:25,439
linker address translation or retract

00:00:25,920 --> 00:00:29,679
so here is today's agenda the first

00:00:28,800 --> 00:00:31,920
apart apparently the

00:00:29,679 --> 00:00:33,600
problem statement basically i will

00:00:31,920 --> 00:00:36,160
explain

00:00:33,600 --> 00:00:37,360
the problem in access control and then

00:00:36,160 --> 00:00:39,440
that's the

00:00:37,360 --> 00:00:42,079
background of the reason why each night

00:00:39,440 --> 00:00:44,320
is introduced

00:00:42,079 --> 00:00:45,440
the second part is our introduction to a

00:00:44,320 --> 00:00:48,719
slide

00:00:45,440 --> 00:00:52,000
i will introduce these new

00:00:48,719 --> 00:00:55,120
hardware capabilities and changes in

00:00:52,000 --> 00:00:58,320
hardware behavioral

00:00:55,120 --> 00:00:59,120
in the last part i will describe a

00:00:58,320 --> 00:01:02,800
slide-based

00:00:59,120 --> 00:01:06,159
solution to enforce gas translation

00:01:02,800 --> 00:01:06,560
and its sql value is impact pvm and the

00:01:06,159 --> 00:01:08,960
gas

00:01:06,560 --> 00:01:08,960
code

00:01:11,280 --> 00:01:14,720
so the part one

00:01:16,479 --> 00:01:22,240
currently access control is widely used

00:01:19,600 --> 00:01:24,320
in this kernel to reduce the attack

00:01:22,240 --> 00:01:26,320
surface

00:01:24,320 --> 00:01:27,840
for example linux color marks is

00:01:26,320 --> 00:01:31,439
executable code

00:01:27,840 --> 00:01:34,640
non-writable in pitch table and the

00:01:31,439 --> 00:01:37,360
max data non-executable

00:01:34,640 --> 00:01:39,040
in pitch table in general pit table

00:01:37,360 --> 00:01:42,479
basics control is

00:01:39,040 --> 00:01:46,079
efficient but in theory default

00:01:42,479 --> 00:01:49,680
attacker would write would write to

00:01:46,079 --> 00:01:52,560
every memory by exploiting

00:01:49,680 --> 00:01:54,159
some kind of vulnerabilities you could

00:01:52,560 --> 00:01:56,880
override a pitch table

00:01:54,159 --> 00:01:58,399
and the bypass x can truly enforce the

00:01:56,880 --> 00:02:01,360
purpose table

00:01:58,399 --> 00:02:02,719
so to defend against attacks in that

00:02:01,360 --> 00:02:04,560
override base table

00:02:02,719 --> 00:02:06,399
we need to enforce the address

00:02:04,560 --> 00:02:09,599
translation integrity

00:02:06,399 --> 00:02:12,640
in a virtual machine we can use ept to

00:02:09,599 --> 00:02:17,280
radical cr3 pitch table

00:02:12,640 --> 00:02:20,640
but it leads to high performance penalty

00:02:17,280 --> 00:02:23,840
so we introduced to address the

00:02:20,640 --> 00:02:23,840
performance issue

00:02:24,239 --> 00:02:29,520
okay let's look at the two typical page

00:02:27,840 --> 00:02:32,000
table overriding attacks

00:02:29,520 --> 00:02:33,360
one is alias mapping for example one

00:02:32,000 --> 00:02:37,120
virtual device

00:02:33,360 --> 00:02:40,239
is mapped to a facebook page

00:02:37,120 --> 00:02:44,400
without a write permission i

00:02:40,239 --> 00:02:45,760
assume that attacker already has

00:02:44,400 --> 00:02:48,400
arbitrary memory access

00:02:45,760 --> 00:02:51,200
so he can set up a previous map into the

00:02:48,400 --> 00:02:54,879
facebook page and the students

00:02:51,200 --> 00:02:57,920
it is marketing memory write

00:02:54,879 --> 00:03:00,879
writes aloud so the attacker can modify

00:02:57,920 --> 00:03:04,159
the page's content

00:03:00,879 --> 00:03:07,440
maybe he can inject some share code into

00:03:04,159 --> 00:03:08,560
this page now i'm gonna try to execute

00:03:07,440 --> 00:03:13,200
code

00:03:08,560 --> 00:03:16,720
the share code is triggered

00:03:13,200 --> 00:03:19,280
so another attack is a page remapping

00:03:16,720 --> 00:03:20,720
the anniversary doesn't need to modify

00:03:19,280 --> 00:03:24,480
the rail page is just

00:03:20,720 --> 00:03:28,239
copy the content to

00:03:24,480 --> 00:03:31,040
another page and modify the

00:03:28,239 --> 00:03:33,519
modifier next page and then the attack

00:03:31,040 --> 00:03:34,959
override pitch table to redirect the

00:03:33,519 --> 00:03:39,040
original

00:03:34,959 --> 00:03:39,040
virtual drives to the modified page

00:03:43,840 --> 00:03:48,480
then part 2 h9 introduction

00:03:50,879 --> 00:03:57,439
here is the visual spec you can

00:03:54,640 --> 00:03:58,000
download the spec from this link and the

00:03:57,439 --> 00:04:00,080
goal of

00:03:58,000 --> 00:04:02,400
each light is to reinforce gas

00:04:00,080 --> 00:04:04,720
translation integrity

00:04:02,400 --> 00:04:06,239
and prevent attacks and that override

00:04:04,720 --> 00:04:10,319
page table

00:04:06,239 --> 00:04:13,760
so here is the key idea of each light

00:04:10,319 --> 00:04:15,360
each slider allows vmm to specify a

00:04:13,760 --> 00:04:18,479
virtualized range

00:04:15,360 --> 00:04:22,320
so-called protected linear range

00:04:18,479 --> 00:04:26,000
or plr here for virtual drives

00:04:22,320 --> 00:04:27,840
in prr cpu page worker performs address

00:04:26,000 --> 00:04:31,199
translations through

00:04:27,840 --> 00:04:34,560
this each light pitch table

00:04:31,199 --> 00:04:36,960
for virtual test outside pr

00:04:34,560 --> 00:04:38,160
cpu page worker performs address

00:04:36,960 --> 00:04:41,759
translation

00:04:38,160 --> 00:04:42,479
through cs3p stable the main benefits of

00:04:41,759 --> 00:04:45,600
a slice

00:04:42,479 --> 00:04:48,639
are security and

00:04:45,600 --> 00:04:50,639
efficiency but over by

00:04:48,639 --> 00:04:51,919
red protecting edge light painting

00:04:50,639 --> 00:04:55,440
structures

00:04:51,919 --> 00:04:58,800
the virtual drives in plr

00:04:55,440 --> 00:05:01,199
wouldn't be redirected to other page so

00:04:58,800 --> 00:05:01,199
it is

00:05:01,840 --> 00:05:08,800
invulnerable to pages remapping attack

00:05:05,600 --> 00:05:11,759
and it's efficient compiled with epg

00:05:08,800 --> 00:05:13,039
based page table protection because with

00:05:11,759 --> 00:05:17,039
each light

00:05:13,039 --> 00:05:21,360
vmm doesn't need to

00:05:17,039 --> 00:05:21,360
intercept the changes to csv table

00:05:22,080 --> 00:05:29,120
this page is about each sliders change

00:05:25,280 --> 00:05:32,720
to last the page table work this

00:05:29,120 --> 00:05:34,240
blue box here is the net nancy nested

00:05:32,720 --> 00:05:37,919
the pivot table walk

00:05:34,240 --> 00:05:39,120
for given virtual device cpu page worker

00:05:37,919 --> 00:05:41,440
performs the first

00:05:39,120 --> 00:05:43,120
never address translation through the

00:05:41,440 --> 00:05:47,520
csv page table

00:05:43,120 --> 00:05:50,880
and then guide a guest official device

00:05:47,520 --> 00:05:52,560
then performs the epd work to translate

00:05:50,880 --> 00:05:55,120
the

00:05:52,560 --> 00:05:56,080
gesture fixed address to a host of

00:05:55,120 --> 00:05:59,199
physical address and

00:05:56,080 --> 00:06:03,120
cache the mapping into trp

00:05:59,199 --> 00:06:05,759
with hdmi enabled cpu workers will

00:06:03,120 --> 00:06:08,880
perform a prr check first

00:06:05,759 --> 00:06:12,960
if the gas the virtual device

00:06:08,880 --> 00:06:14,880
is in the plr cpu page worker performs

00:06:12,960 --> 00:06:20,720
address translation through

00:06:14,880 --> 00:06:24,160
h900 rather than cs3p table

00:06:20,720 --> 00:06:26,639
so when the during on each line work

00:06:24,160 --> 00:06:28,880
page worker may encounter restart video

00:06:26,639 --> 00:06:31,039
in each slide page table entry

00:06:28,880 --> 00:06:33,440
so in that case page worker would

00:06:31,039 --> 00:06:36,160
restart the page walk through cr3

00:06:33,440 --> 00:06:37,199
pit table and each night will also

00:06:36,160 --> 00:06:39,680
introduce

00:06:37,199 --> 00:06:42,319
additional check in epg i will introduce

00:06:39,680 --> 00:06:42,319
nominator

00:06:43,120 --> 00:06:47,360
which led painting structures are almost

00:06:45,440 --> 00:06:49,919
the same as ie32e

00:06:47,360 --> 00:06:52,240
paging structures it supports both the

00:06:49,919 --> 00:06:56,479
five level and the four level paging

00:06:52,240 --> 00:06:59,440
and the bt 11 is the restart bit

00:06:56,479 --> 00:07:01,039
hitting this bit results net paid work

00:06:59,440 --> 00:07:04,560
which starts with

00:07:01,039 --> 00:07:07,520
cr3 page table and the dual ring on

00:07:04,560 --> 00:07:08,560
each network cpu would repeat for the

00:07:07,520 --> 00:07:11,599
exception

00:07:08,560 --> 00:07:14,720
if page worker encounters non-present

00:07:11,599 --> 00:07:19,039
entry or misconfiguration for example

00:07:14,720 --> 00:07:22,400
reserved bs assigned in his pte

00:07:19,039 --> 00:07:25,599
in that case cpu cites bit 7

00:07:22,400 --> 00:07:29,120
of page 4 error code to indicate

00:07:25,599 --> 00:07:32,560
that this pitfall is

00:07:29,120 --> 00:07:32,560
h9 terminal fault

00:07:34,800 --> 00:07:38,160
there are two new epg control pieces are

00:07:37,440 --> 00:07:41,599
introduced

00:07:38,160 --> 00:07:43,039
to track earlier mapping one is the

00:07:41,599 --> 00:07:44,960
patent right

00:07:43,039 --> 00:07:46,960
pressing right allows the people to

00:07:44,960 --> 00:07:49,759
update adb some page

00:07:46,960 --> 00:07:50,160
even they are not relevant to software

00:07:49,759 --> 00:07:53,759
well

00:07:50,160 --> 00:07:58,160
for example previously for a

00:07:53,759 --> 00:08:01,759
permission is assigned an apt

00:07:58,160 --> 00:08:04,800
to register the page and do adb software

00:08:01,759 --> 00:08:08,479
for the pages you use the the page table

00:08:04,800 --> 00:08:12,000
but if the rent permission is cleared

00:08:08,479 --> 00:08:14,879
on epg entry then both

00:08:12,000 --> 00:08:15,919
suffer rights and the adb's updates are

00:08:14,879 --> 00:08:20,560
delight

00:08:15,919 --> 00:08:24,479
and they call the epd violation if

00:08:20,560 --> 00:08:26,240
cpu tries to do so

00:08:24,479 --> 00:08:28,720
paying rights introduced a new

00:08:26,240 --> 00:08:31,919
configuration if

00:08:28,720 --> 00:08:32,399
if the rank permission is cleared about

00:08:31,919 --> 00:08:36,479
the

00:08:32,399 --> 00:08:40,000
paging right is inside in a epd entry

00:08:36,479 --> 00:08:43,360
then only software rises delight

00:08:40,000 --> 00:08:45,519
adb sap data allowed

00:08:43,360 --> 00:08:46,560
basically paging rights can improve

00:08:45,519 --> 00:08:50,240
efficiency

00:08:46,560 --> 00:08:51,760
if vmm needs to read only gasterpiece

00:08:50,240 --> 00:08:55,360
table under ept

00:08:51,760 --> 00:09:01,360
it can reduce vmax due to adb's update

00:08:55,360 --> 00:09:01,360
and relieve vmm from adb simulation

00:09:03,120 --> 00:09:11,120
the other bit is verified paging right

00:09:08,080 --> 00:09:14,320
verified page and writing enforcement

00:09:11,120 --> 00:09:18,000
all leave guest opinion structure page

00:09:14,320 --> 00:09:21,120
encountered during the nested work has

00:09:18,000 --> 00:09:24,240
pw site and ept else generate

00:09:21,120 --> 00:09:25,839
an epd violation specifically for this

00:09:24,240 --> 00:09:29,600
page

00:09:25,839 --> 00:09:30,399
the vpw flag is cited in epd entry the

00:09:29,600 --> 00:09:33,440
cpu would

00:09:30,399 --> 00:09:36,240
verify neither forward

00:09:33,440 --> 00:09:36,800
links against the prising structure page

00:09:36,240 --> 00:09:41,680
they

00:09:36,800 --> 00:09:46,160
have paging right sides on the ept

00:09:41,680 --> 00:09:46,160
otherwise an epd violation is generated

00:09:48,640 --> 00:09:55,200
vmm can use pw

00:09:51,920 --> 00:09:57,760
and the vpw flags to

00:09:55,200 --> 00:09:58,399
prevent the memory exercises through hds

00:09:57,760 --> 00:10:00,399
mapping

00:09:58,399 --> 00:10:03,839
for example for guess the physical

00:10:00,399 --> 00:10:07,279
memory to be protected vmm consider

00:10:03,839 --> 00:10:10,320
flag on the epg and inside the pwl flag

00:10:07,279 --> 00:10:13,839
for each light picking structure page

00:10:10,320 --> 00:10:16,959
because of the hardware check

00:10:13,839 --> 00:10:19,920
against the vpw this

00:10:16,959 --> 00:10:21,440
protective memory can only be excised

00:10:19,920 --> 00:10:23,600
through each light

00:10:21,440 --> 00:10:24,480
if an attack tried to set up asmr

00:10:23,600 --> 00:10:28,079
mapping

00:10:24,480 --> 00:10:31,360
to access vpw tagged memory

00:10:28,079 --> 00:10:34,079
in csvp table memory exercise to

00:10:31,360 --> 00:10:34,959
vpw attacker memory would cause epg

00:10:34,079 --> 00:10:38,160
violation

00:10:34,959 --> 00:10:43,440
due to low pw

00:10:38,160 --> 00:10:43,440
flag in india's market

00:10:45,440 --> 00:10:50,959
so number part three our example of

00:10:48,640 --> 00:10:53,680
using h9 to reinforce gas translation

00:10:50,959 --> 00:10:53,680
integrity

00:10:54,000 --> 00:10:59,680
this is the hello architecture here we

00:10:56,800 --> 00:11:01,200
have a vmm and the virtual machine on it

00:10:59,680 --> 00:11:03,519
in the virtual machine guess the column

00:11:01,200 --> 00:11:05,279
maintains two page tables

00:11:03,519 --> 00:11:07,440
there should be table on the h9 page

00:11:05,279 --> 00:11:08,480
table first against the kernel needs to

00:11:07,440 --> 00:11:10,959
identify

00:11:08,480 --> 00:11:12,079
get the pages on translations to be

00:11:10,959 --> 00:11:15,600
protected

00:11:12,079 --> 00:11:18,079
casa yeah here we use color text and

00:11:15,600 --> 00:11:19,920
raw data as an example kettle color sets

00:11:18,079 --> 00:11:22,320
up protective translation in

00:11:19,920 --> 00:11:24,640
each light and the write protects the h9

00:11:22,320 --> 00:11:27,839
page table on the ept

00:11:24,640 --> 00:11:29,600
so protected translations can be

00:11:27,839 --> 00:11:32,720
redirected

00:11:29,600 --> 00:11:36,240
this translation are mapped to

00:11:32,720 --> 00:11:39,040
some that's the physical page for please

00:11:36,240 --> 00:11:42,800
get the physical page vmms size

00:11:39,040 --> 00:11:43,440
vpw flag from under ept and decide the

00:11:42,800 --> 00:11:45,360
pw

00:11:43,440 --> 00:11:47,760
flag for each line of painting

00:11:45,360 --> 00:11:51,680
structures

00:11:47,760 --> 00:11:54,839
so if an attacker wants to set up a

00:11:51,680 --> 00:11:57,839
linux mapping to protect

00:11:54,839 --> 00:11:59,839
memory and to

00:11:57,839 --> 00:12:02,079
access this particular memory the

00:11:59,839 --> 00:12:06,399
earliest mapping

00:12:02,079 --> 00:12:10,079
needs to have pw site on the ept

00:12:06,399 --> 00:12:13,360
so that the attacker needs to be

00:12:10,079 --> 00:12:16,000
able to call some

00:12:13,360 --> 00:12:16,000
help calls

00:12:18,000 --> 00:12:22,959
the castle corner may decide to protect

00:12:20,880 --> 00:12:26,079
or unprotect some translations

00:12:22,959 --> 00:12:28,320
the random in that case gathered kernel

00:12:26,079 --> 00:12:31,519
needs to update the h9 page table

00:12:28,320 --> 00:12:33,600
but wall pages is that the page

00:12:31,519 --> 00:12:34,560
page instructions are run protected on

00:12:33,600 --> 00:12:37,279
the ept

00:12:34,560 --> 00:12:38,720
so to update the h9 paging structures

00:12:37,279 --> 00:12:42,959
castle corner needs to

00:12:38,720 --> 00:12:46,639
reverse red production on related h90

00:12:42,959 --> 00:12:48,959
painting structure page which

00:12:46,639 --> 00:12:50,160
you want to update through help call

00:12:48,959 --> 00:12:54,160
then update

00:12:50,160 --> 00:12:58,320
each night pitch table and then apply

00:12:54,160 --> 00:13:01,120
right protection um hdi page label again

00:12:58,320 --> 00:13:03,120
so as you can see to update h9 against

00:13:01,120 --> 00:13:03,920
the kernel needs to call several high

00:13:03,120 --> 00:13:06,560
course

00:13:03,920 --> 00:13:08,240
the updating hlight is slow but it

00:13:06,560 --> 00:13:10,720
brings one benefit

00:13:08,240 --> 00:13:12,399
yeah because each light page table is

00:13:10,720 --> 00:13:15,680
read only on the abt

00:13:12,399 --> 00:13:15,680
to override a

00:13:15,760 --> 00:13:20,000
pte in each light attack as the first

00:13:18,560 --> 00:13:22,959
invoker have called

00:13:20,000 --> 00:13:25,279
to revolt right protection on his page

00:13:22,959 --> 00:13:25,279
table

00:13:26,880 --> 00:13:30,079
so what's the security value of this

00:13:29,440 --> 00:13:33,200
solution

00:13:30,079 --> 00:13:35,680
in theory on attack with arbitrary

00:13:33,200 --> 00:13:37,040
memory write capability card override

00:13:35,680 --> 00:13:40,240
page table

00:13:37,040 --> 00:13:43,440
to make current attacks of the

00:13:40,240 --> 00:13:44,320
raw data readable and then override the

00:13:43,440 --> 00:13:47,279
kind of text

00:13:44,320 --> 00:13:48,000
under real data if this solution is

00:13:47,279 --> 00:13:50,000
deployed

00:13:48,000 --> 00:13:51,360
in needless kernel overriding the actual

00:13:50,000 --> 00:13:53,199
piece table can't

00:13:51,360 --> 00:13:56,240
redirect the translation for kernel

00:13:53,199 --> 00:13:58,800
attacks and raw data

00:13:56,240 --> 00:13:59,519
and the override h9 page table is much

00:13:58,800 --> 00:14:02,399
harder

00:13:59,519 --> 00:14:02,880
because in most of the time page table

00:14:02,399 --> 00:14:06,000
is

00:14:02,880 --> 00:14:06,320
read only on the ept the attacker needs

00:14:06,000 --> 00:14:11,360
to

00:14:06,320 --> 00:14:11,360
turn off h9 first or make

00:14:11,440 --> 00:14:17,839
a science piece table writable under ept

00:14:18,079 --> 00:14:21,279
someone may have one question in mind

00:14:20,880 --> 00:14:24,079
why

00:14:21,279 --> 00:14:25,920
does coolant not just run pythagoras

00:14:24,079 --> 00:14:28,320
replace table on the ept

00:14:25,920 --> 00:14:29,120
i think there are two reasons which

00:14:28,320 --> 00:14:31,680
knight-based

00:14:29,120 --> 00:14:34,000
solution is more efficient it doesn't

00:14:31,680 --> 00:14:37,519
need to intercept the cs3 solution

00:14:34,000 --> 00:14:41,199
and it can use prr and restart it

00:14:37,519 --> 00:14:44,240
in h9 page table to

00:14:41,199 --> 00:14:47,839
enforce translation either four key

00:14:44,240 --> 00:14:48,959
page granularity where cs3 printable run

00:14:47,839 --> 00:14:53,040
production will

00:14:48,959 --> 00:14:56,959
impact the setup and the teardown of

00:14:53,040 --> 00:15:00,079
other normal mappings secondly i think

00:14:56,959 --> 00:15:03,279
h9 basis solution is relatively clean

00:15:00,079 --> 00:15:06,320
because it doesn't need to change

00:15:03,279 --> 00:15:08,000
in search page tables management if you

00:15:06,320 --> 00:15:11,279
use a new page table

00:15:08,000 --> 00:15:13,839
couldn't just focus on how to

00:15:11,279 --> 00:15:15,279
manage the new page table and doesn't

00:15:13,839 --> 00:15:18,399
need to

00:15:15,279 --> 00:15:20,800
doesn't need intrusive change to current

00:15:18,399 --> 00:15:22,240
memory management and through our poc we

00:15:20,800 --> 00:15:24,560
think the change side is

00:15:22,240 --> 00:15:24,560
small

00:15:25,600 --> 00:15:29,519
we have finished the plc for this

00:15:27,839 --> 00:15:31,680
solution and

00:15:29,519 --> 00:15:32,560
this is a tesla module we used to

00:15:31,680 --> 00:15:36,079
demonstrate

00:15:32,560 --> 00:15:39,120
the effect of h9s protection to gas

00:15:36,079 --> 00:15:42,320
transactions this module accepts a

00:15:39,120 --> 00:15:45,040
virtual device and

00:15:42,320 --> 00:15:45,920
first you try to modify csv page table

00:15:45,040 --> 00:15:48,880
to

00:15:45,920 --> 00:15:50,399
grant write permission and the line to

00:15:48,880 --> 00:15:53,360
write

00:15:50,399 --> 00:15:54,000
writes a 0 to next virtual device and

00:15:53,360 --> 00:15:57,199
then in our

00:15:54,000 --> 00:15:59,120
test we pass the starter drives of a

00:15:57,199 --> 00:16:02,800
kind of text to the next module

00:15:59,120 --> 00:16:06,839
without the solution

00:16:02,800 --> 00:16:08,240
this rights would succeed without any

00:16:06,839 --> 00:16:11,360
arrow

00:16:08,240 --> 00:16:16,720
but with this solution this right will

00:16:11,360 --> 00:16:20,160
would cause pitfalls and the color ops

00:16:16,720 --> 00:16:23,440
from the current message here are dumps

00:16:20,160 --> 00:16:26,160
to dumps of two page table

00:16:23,440 --> 00:16:26,720
the first nine is from each night pay

00:16:26,160 --> 00:16:29,040
table

00:16:26,720 --> 00:16:29,759
and the second line is from the csv page

00:16:29,040 --> 00:16:32,880
table

00:16:29,759 --> 00:16:36,560
we can see now that the page table is

00:16:32,880 --> 00:16:41,199
writable in csvp level because the

00:16:36,560 --> 00:16:44,800
bit one uses set in pde

00:16:41,199 --> 00:16:44,800
and the non-rival in high

00:16:46,639 --> 00:16:52,399
so based on our qc these may

00:16:50,240 --> 00:16:54,240
need three major changes are needed in

00:16:52,399 --> 00:16:58,320
kelvin site to implement

00:16:54,240 --> 00:17:02,000
this solution first equilibrium

00:16:58,320 --> 00:17:04,000
advertise a pv feature through cpuid

00:17:02,000 --> 00:17:06,880
hypervisor leaf

00:17:04,000 --> 00:17:08,160
generally in this feature charge gas and

00:17:06,880 --> 00:17:11,280
other gases can set

00:17:08,160 --> 00:17:12,160
each lighter route and the prr through

00:17:11,280 --> 00:17:15,400
habco

00:17:12,160 --> 00:17:18,240
and i guess also can set

00:17:15,400 --> 00:17:21,439
vpwpw and the io flags for

00:17:18,240 --> 00:17:23,839
gaster page on the epg to manage the

00:17:21,439 --> 00:17:27,360
next epd flags

00:17:23,839 --> 00:17:28,559
we can just extend the existing page

00:17:27,360 --> 00:17:32,880
tracking mechanism

00:17:28,559 --> 00:17:36,160
in kvm and because now

00:17:32,880 --> 00:17:39,360
dancer is able to set ept flags

00:17:36,160 --> 00:17:42,720
then some ept valuations may result

00:17:39,360 --> 00:17:45,360
from guest setting so from

00:17:42,720 --> 00:17:46,240
the epd valuation qvm doesn't need to

00:17:45,360 --> 00:17:48,960
handle it

00:17:46,240 --> 00:17:51,360
and adjust reports a virtualization

00:17:48,960 --> 00:17:51,360
exception

00:17:52,080 --> 00:17:55,679
let's kernel also needs to make some

00:17:55,039 --> 00:17:58,320
changes

00:17:55,679 --> 00:17:59,520
to implement this solution gather kernel

00:17:58,320 --> 00:18:02,320
needs to

00:17:59,520 --> 00:18:03,280
manage each night page table and the epd

00:18:02,320 --> 00:18:06,880
flags work as

00:18:03,280 --> 00:18:10,799
a page it just needs to

00:18:06,880 --> 00:18:14,720
place some hooks in certain memory

00:18:10,799 --> 00:18:17,760
ro or rw apis these api are used

00:18:14,720 --> 00:18:20,000
to remove a set of red permissions in

00:18:17,760 --> 00:18:22,480
search repeats table

00:18:20,000 --> 00:18:23,440
cancel kernel also needs to handle page

00:18:22,480 --> 00:18:26,480
fault exception

00:18:23,440 --> 00:18:29,600
in page four handler

00:18:26,480 --> 00:18:33,360
from the page for the arrow code

00:18:29,600 --> 00:18:36,480
conor can know why the the pitfall is on

00:18:33,360 --> 00:18:40,960
h9 terminal fault or not

00:18:36,480 --> 00:18:44,640
and if the photo device is in

00:18:40,960 --> 00:18:49,760
in the plr page 400 may need to

00:18:44,640 --> 00:18:49,760
work each united table by software well

00:18:51,360 --> 00:18:54,880
and the guest account also needs to

00:18:52,880 --> 00:18:55,520
handle virtualization exception and

00:18:54,880 --> 00:18:58,480
generate

00:18:55,520 --> 00:19:01,120
the means on attack is detected about

00:18:58,480 --> 00:19:01,120
hypervisor

00:19:01,440 --> 00:19:08,320
regarding our status we finish

00:19:05,120 --> 00:19:11,919
the chains on pvm gasol and

00:19:08,320 --> 00:19:14,960
develop some tests in qm unit tests

00:19:11,919 --> 00:19:18,720
and a verified needs solution simulator

00:19:14,960 --> 00:19:23,120
and our plan is to send out ifc paths

00:19:18,720 --> 00:19:26,640
in the future and currently

00:19:23,120 --> 00:19:27,440
we focus on protecting non-radical

00:19:26,640 --> 00:19:30,000
mappings

00:19:27,440 --> 00:19:31,200
in the future i would like to explore

00:19:30,000 --> 00:19:34,120
the possibility of

00:19:31,200 --> 00:19:39,840
using h9 to enforce the integrity of

00:19:34,120 --> 00:19:39,840
non-executable mappings

00:19:40,960 --> 00:19:44,250
so here that's the wall i want to share

00:19:43,280 --> 00:19:47,309
do you have any

00:19:44,250 --> 00:19:47,309
[Music]

00:19:50,840 --> 00:19:55,039
questions

00:19:52,960 --> 00:19:55,039

YouTube URL: https://www.youtube.com/watch?v=GcICzUk1K50


