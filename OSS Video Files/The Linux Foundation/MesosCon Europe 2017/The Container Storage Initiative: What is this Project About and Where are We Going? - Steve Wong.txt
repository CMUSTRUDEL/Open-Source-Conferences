Title: The Container Storage Initiative: What is this Project About and Where are We Going? - Steve Wong
Publication date: 2017-10-27
Playlist: MesosCon Europe 2017
Description: 
	The Container Storage Initiative: What is this Project About and Where are We Going? - Steve Wong, {code} & Jie Yu & James DeFelice, Mesosphere, Inc.

Over the past 2 years there has been a huge shift involving stateful applications becoming a mainstream feature used by most container users. This has been observed by storage vendors, the Mesos project, and on other container orchestrator platforms. The Container Storage Interface (CSI) is modeled on the successful CNCF sponsored OCI and CNI interoperability initiatives in the container and network space respectively. Its goal is to provide a vendor neutral, curated specification that allows standardized storage plugins to be published and utilized across multiple container orchestrators, including Mesos.

This session will cover the architecture of the CSI. Multiple speakers will address the benefits a standardized storage interface can offer to users, from the perspective of both a container orchestrator and from a storage provider that wishes to support multiple platforms.

About James DeFelice
James is a Tech Lead at Mesosphere, Inc, currently focused on framework development and storage. Before joining Mesosphere, he spent time building on-demand VM provisioning platforms and supporting Mesos users in the wild. James has an MS in Bioinformatics from the Rochester Institute of Technology.

About Steve Wong
Steve Wong is an Open Source Engineer with the {code} team. Steve has been participating in the Apache Mesos, DC/OS, Kubernetes, and REX-Ray projects.

About Jie Yu
Jie Yu is a Tech Lead at Mesosphere, Inc, focused on containerization, storage and networking. Before joining Mesosphere, he was a software engineer at Twitter. Jie obtained his PhD in Computer Science and Engineering from the University of Michigan where he conducted research for concurrent and event-driven systems.
Captions: 
	00:00:00,030 --> 00:00:04,650
thank you and I want to make sure to

00:00:02,730 --> 00:00:06,210
point out that James bought a really

00:00:04,650 --> 00:00:08,160
expensive suit just for this occasion

00:00:06,210 --> 00:00:08,880
I've never seen him dressed like this

00:00:08,160 --> 00:00:13,580
before

00:00:08,880 --> 00:00:15,839
thanks Steve so either not even at work

00:00:13,580 --> 00:00:20,910
no I haven't seen him dressed like that

00:00:15,839 --> 00:00:23,550
in his office but thanks once again I'm

00:00:20,910 --> 00:00:25,230
with the co team which is a group of

00:00:23,550 --> 00:00:28,160
developers who work on community

00:00:25,230 --> 00:00:31,019
open-source projects like Apache mezzos

00:00:28,160 --> 00:00:33,510
sponsored by Dell technologies and I

00:00:31,019 --> 00:00:35,790
guess you know ahead and embellish that

00:00:33,510 --> 00:00:38,460
great introduction if you if you've got

00:00:35,790 --> 00:00:39,629
more to add that was great Alex Thanks

00:00:38,460 --> 00:00:41,370
you have been with measles for a couple

00:00:39,629 --> 00:00:42,629
of years and like Alex said spent some

00:00:41,370 --> 00:00:45,600
time working on the kubernetes missles

00:00:42,629 --> 00:00:49,860
framework and marathon some other nasals

00:00:45,600 --> 00:00:52,410
related projects so so I'm G so if

00:00:49,860 --> 00:00:54,680
you're not in the previous talk so I'm a

00:00:52,410 --> 00:00:57,960
mesas committee and piensa member things

00:00:54,680 --> 00:01:00,359
2013 and working on containerization now

00:00:57,960 --> 00:01:02,640
working on storage and I want to make I

00:01:00,359 --> 00:01:04,379
want to point out a person who's missing

00:01:02,640 --> 00:01:06,720
in action here we gave this talk at

00:01:04,379 --> 00:01:10,229
mesosphere North America about a month

00:01:06,720 --> 00:01:14,159
ago and at that time there was a fourth

00:01:10,229 --> 00:01:16,170
presenter chakri who works for diamante

00:01:14,159 --> 00:01:19,049
and we had a represent we basically

00:01:16,170 --> 00:01:20,790
wanted to represent a couple of storage

00:01:19,049 --> 00:01:23,729
providers because the key message here

00:01:20,790 --> 00:01:26,400
isn't that is that this is industry-wide

00:01:23,729 --> 00:01:29,040
this effort to standardize on a

00:01:26,400 --> 00:01:32,100
container storage interface isn't just

00:01:29,040 --> 00:01:35,220
one vendor or a couple vendors and in LA

00:01:32,100 --> 00:01:37,890
we we had a couple representatives but

00:01:35,220 --> 00:01:40,680
he couldn't he couldn't make it here for

00:01:37,890 --> 00:01:43,140
this event but his slides are still here

00:01:40,680 --> 00:01:45,240
and I'm going to deliver his slides but

00:01:43,140 --> 00:01:47,460
I want to make sure that everyone's

00:01:45,240 --> 00:01:53,640
aware that he was a contributor to this

00:01:47,460 --> 00:01:56,729
deck so here's an overview of the agenda

00:01:53,640 --> 00:01:59,659
we're going to cover the state of

00:01:56,729 --> 00:02:03,259
storage in container orchestrators today

00:01:59,659 --> 00:02:05,100
then move on to the benefits of

00:02:03,259 --> 00:02:08,420
standardization and there's a couple

00:02:05,100 --> 00:02:11,700
there's benefits from a user perspective

00:02:08,420 --> 00:02:13,230
how many users of mais o--'s are DCOs do

00:02:11,700 --> 00:02:16,740
we have out there today could

00:02:13,230 --> 00:02:19,770
show of hands quite so most of the

00:02:16,740 --> 00:02:22,709
audience falls into that category but

00:02:19,770 --> 00:02:25,319
from the authors of container

00:02:22,709 --> 00:02:28,800
orchestrators not just Mays OHS but DCOs

00:02:25,319 --> 00:02:31,440
kubernetes that Cloud Foundry docker

00:02:28,800 --> 00:02:33,569
swarm there are benefits to this then

00:02:31,440 --> 00:02:35,400
finally from the storage providers

00:02:33,569 --> 00:02:37,260
perspective there are benefits from

00:02:35,400 --> 00:02:39,739
standardization we're going to give a

00:02:37,260 --> 00:02:42,150
quick overview of CSI

00:02:39,739 --> 00:02:46,319
moving on to mais au s-- integration

00:02:42,150 --> 00:02:48,930
with CSI we've got plans for releasing

00:02:46,319 --> 00:02:50,850
this late this year but there's a road

00:02:48,930 --> 00:02:53,100
map that goes on with further

00:02:50,850 --> 00:02:56,970
enhancements beyond that we're making

00:02:53,100 --> 00:03:00,000
effort to get this out quickly rather

00:02:56,970 --> 00:03:02,239
than you know take a lot of time to do

00:03:00,000 --> 00:03:06,299
the full-featured version day one

00:03:02,239 --> 00:03:08,970
finally we're gonna close with a message

00:03:06,299 --> 00:03:11,819
as to how you can get involved and maybe

00:03:08,970 --> 00:03:13,500
help contribute to the decisions on what

00:03:11,819 --> 00:03:15,989
features we might want to add to that

00:03:13,500 --> 00:03:24,690
roadmap and maybe even help out building

00:03:15,989 --> 00:03:29,609
the things over the next year so the

00:03:24,690 --> 00:03:33,930
background from the user perspective is

00:03:29,609 --> 00:03:37,410
that users need or want support for

00:03:33,930 --> 00:03:40,260
persistent storage for to run stateful

00:03:37,410 --> 00:03:42,690
apps under container orchestrators they

00:03:40,260 --> 00:03:46,350
want this abstraction because it allows

00:03:42,690 --> 00:03:48,900
portability potentially across container

00:03:46,350 --> 00:03:53,519
orchestrators across the boundary

00:03:48,900 --> 00:03:55,950
between public clouds you know they want

00:03:53,519 --> 00:03:58,709
you want portability from the Amazon

00:03:55,950 --> 00:04:01,590
Cloud to the Google Cloud and then even

00:03:58,709 --> 00:04:03,140
on to an on-prem cloud you'd also like

00:04:01,590 --> 00:04:06,359
to have something that would enable

00:04:03,140 --> 00:04:08,400
portability across storage providers so

00:04:06,359 --> 00:04:11,040
that you could write and implement

00:04:08,400 --> 00:04:13,910
applications that aren't even aware of

00:04:11,040 --> 00:04:18,570
what the underlying storage provider is

00:04:13,910 --> 00:04:21,330
and then change that over time migrate

00:04:18,570 --> 00:04:24,630
your app from an on-prem cloud to a

00:04:21,330 --> 00:04:27,300
public cloud and not have to change it

00:04:24,630 --> 00:04:30,050
some of these stateful apps that could

00:04:27,300 --> 00:04:35,250
benefit from this are shown here by logo

00:04:30,050 --> 00:04:39,420
sequel databases no sequel databases a

00:04:35,250 --> 00:04:42,480
whole category of things that need to

00:04:39,420 --> 00:04:44,370
retain state somewhere that don't have

00:04:42,480 --> 00:04:51,570
Alzheimer's when you shut down the

00:04:44,370 --> 00:04:54,530
container that olds them so the

00:04:51,570 --> 00:04:57,330
background from the perspective of of

00:04:54,530 --> 00:04:59,640
container orchestrators is that we have

00:04:57,330 --> 00:05:02,790
a number of container orchestrators

00:04:59,640 --> 00:05:06,780
shown by the logos here DCOs kubernetes

00:05:02,790 --> 00:05:09,390
swarm cloud foundry apache mezzos that

00:05:06,780 --> 00:05:12,900
have evolved independently with their

00:05:09,390 --> 00:05:15,270
own independent implementation of a

00:05:12,900 --> 00:05:18,600
storage interface now in reality of

00:05:15,270 --> 00:05:21,060
course apache mais o--'s and DCOs maybe

00:05:18,600 --> 00:05:23,730
those two do have a common storage

00:05:21,060 --> 00:05:25,650
interface but the rest all in their

00:05:23,730 --> 00:05:31,350
first generation came up with their own

00:05:25,650 --> 00:05:33,540
implementation and when when they've

00:05:31,350 --> 00:05:36,030
implemented this they've typically even

00:05:33,540 --> 00:05:38,460
integrated in their own versions of

00:05:36,030 --> 00:05:42,290
storage plug-ins that live in the source

00:05:38,460 --> 00:05:45,180
tree of that container Orchestrator so

00:05:42,290 --> 00:05:47,040
that is kind of bad too because with

00:05:45,180 --> 00:05:49,860
many of these orchestrators they're on

00:05:47,040 --> 00:05:52,380
fairly time-consuming release cycles and

00:05:49,860 --> 00:05:54,390
the underlying storage provider that

00:05:52,380 --> 00:05:57,540
were we're dealing with with these

00:05:54,390 --> 00:06:00,000
storage plugins kind of visit on its own

00:05:57,540 --> 00:06:01,860
only independent release cycle and if

00:06:00,000 --> 00:06:06,590
you come across a scenario where you've

00:06:01,860 --> 00:06:09,450
got a security patch a bug fix that

00:06:06,590 --> 00:06:11,670
originates down in the provider of the

00:06:09,450 --> 00:06:14,040
underlying storage you might have to

00:06:11,670 --> 00:06:15,750
wait to get that into the source tree of

00:06:14,040 --> 00:06:18,620
the container Orchestrator and that's a

00:06:15,750 --> 00:06:21,060
bad thing I mean a security patch is

00:06:18,620 --> 00:06:23,250
often critical and you'd like to get

00:06:21,060 --> 00:06:26,130
that in as soon as possible but if you

00:06:23,250 --> 00:06:28,050
if there was just a release of Apache

00:06:26,130 --> 00:06:31,550
maze O's and the next one isn't likely

00:06:28,050 --> 00:06:34,110
to occur for another five weeks you

00:06:31,550 --> 00:06:36,570
widen this exposure gap and we don't

00:06:34,110 --> 00:06:38,380
want that to happen from the background

00:06:36,570 --> 00:06:40,960
of a storage for

00:06:38,380 --> 00:06:42,520
and I'm kind of in the shoes of one of

00:06:40,960 --> 00:06:46,660
these being an open source group

00:06:42,520 --> 00:06:49,630
affiliated with Dell you're dealing with

00:06:46,660 --> 00:06:52,060
a current world and it's not just me but

00:06:49,630 --> 00:06:54,880
these other storage providers diamonte

00:06:52,060 --> 00:06:57,580
port works Amazon is your the public

00:06:54,880 --> 00:07:00,730
clouds like Google cloud we don't really

00:06:57,580 --> 00:07:02,650
want to implement these plugins four

00:07:00,730 --> 00:07:04,540
times for four different container

00:07:02,650 --> 00:07:07,360
orchestrators it would be great for us

00:07:04,540 --> 00:07:11,830
if we could do it one time and then

00:07:07,360 --> 00:07:14,740
reuse that it allows us to more

00:07:11,830 --> 00:07:17,920
efficiently use resources maybe have

00:07:14,740 --> 00:07:20,140
these resources left over to invest in a

00:07:17,920 --> 00:07:25,570
heavier degree of testing and validation

00:07:20,140 --> 00:07:28,590
and you know even if there is a scenario

00:07:25,570 --> 00:07:31,900
of a security patch if we have to go

00:07:28,590 --> 00:07:33,730
apply that and test it across four or

00:07:31,900 --> 00:07:36,280
five different container orchestrators

00:07:33,730 --> 00:07:42,130
it's that much longer for these things

00:07:36,280 --> 00:07:44,290
to get out so the summary is that a

00:07:42,130 --> 00:07:46,420
storage provider wants to write and

00:07:44,290 --> 00:07:49,900
maintain one plugin that covers

00:07:46,420 --> 00:07:52,000
everything from the the state of the

00:07:49,900 --> 00:07:56,590
world today just to show you how bad

00:07:52,000 --> 00:07:58,510
this is out there in the world I went

00:07:56,590 --> 00:08:00,370
out there and did some research using

00:07:58,510 --> 00:08:05,110
Google to find out how many storage

00:08:00,370 --> 00:08:07,600
plugins exist just for Amazon EBS and I

00:08:05,110 --> 00:08:09,790
found five of them you know that it's

00:08:07,600 --> 00:08:12,280
sad that in an open source world you'd

00:08:09,790 --> 00:08:15,190
have five independent and then have to

00:08:12,280 --> 00:08:21,370
have five in implementations of plugins

00:08:15,190 --> 00:08:23,470
for AWS EBS to visually summarize this

00:08:21,370 --> 00:08:25,960
what we're trying to avoid is this

00:08:23,470 --> 00:08:28,690
that's a picture of worldwide electric

00:08:25,960 --> 00:08:30,550
outlet standards I came here from Los

00:08:28,690 --> 00:08:33,520
Angeles and that means when I bring my

00:08:30,550 --> 00:08:36,219
laptop I've got to get some adapter and

00:08:33,520 --> 00:08:37,810
this scenario is what that storage

00:08:36,219 --> 00:08:41,380
interface is with container

00:08:37,810 --> 00:08:44,169
orchestrators today and the downside of

00:08:41,380 --> 00:08:47,589
this is users have difficulty using

00:08:44,169 --> 00:08:51,550
devices portably if you're an appliance

00:08:47,589 --> 00:08:52,030
maker they you know the the analogy to

00:08:51,550 --> 00:08:54,070
us

00:08:52,030 --> 00:08:57,760
towards provider you have reduced

00:08:54,070 --> 00:09:01,240
economies of scale you've got to do your

00:08:57,760 --> 00:09:03,250
engineering in multiple passes and often

00:09:01,240 --> 00:09:07,570
their certification involved in an

00:09:03,250 --> 00:09:09,820
encouraging delays vendors who sell

00:09:07,570 --> 00:09:11,980
leaves or bring them to market or

00:09:09,820 --> 00:09:14,410
distribute them have to end inventory

00:09:11,980 --> 00:09:17,080
larger inventories of different versions

00:09:14,410 --> 00:09:19,330
and that might result in you foregoing

00:09:17,080 --> 00:09:21,190
entry into some markets I mean maybe

00:09:19,330 --> 00:09:23,890
someday there'll be a sixth container

00:09:21,190 --> 00:09:26,110
Orchestrator and I as a storage provider

00:09:23,890 --> 00:09:28,420
would just say no I'm not it's too much

00:09:26,110 --> 00:09:31,690
work I'm not gonna do that but if we get

00:09:28,420 --> 00:09:36,550
a standard in place if it opens it up

00:09:31,690 --> 00:09:40,480
for you know evolution and creativity

00:09:36,550 --> 00:09:42,940
from different people at this point it's

00:09:40,480 --> 00:09:44,470
a multi print multi presenter

00:09:42,940 --> 00:09:48,870
presentation today and I'm gonna turn

00:09:44,470 --> 00:09:48,870
this over to James okay thanks Steve

00:09:49,300 --> 00:09:53,410
[Music]

00:09:51,210 --> 00:09:56,890
yeah so I'm going to talk about CSI a

00:09:53,410 --> 00:09:59,470
little bit the primary goal CSI is to

00:09:56,890 --> 00:10:02,440
present a neutral standard protocol for

00:09:59,470 --> 00:10:03,940
container orchestrators and their

00:10:02,440 --> 00:10:07,120
interaction with proprietary storage

00:10:03,940 --> 00:10:09,790
systems CSI presents a consistent set of

00:10:07,120 --> 00:10:12,070
behaviors and expectations for both

00:10:09,790 --> 00:10:15,760
container orchestrators and vendor

00:10:12,070 --> 00:10:17,590
implementations of CSI for vendors like

00:10:15,760 --> 00:10:19,540
Steve was saying there's less work

00:10:17,590 --> 00:10:22,030
involved to support you know X number of

00:10:19,540 --> 00:10:24,670
cos which allows vendors to enable more

00:10:22,030 --> 00:10:27,100
cos more quickly for container

00:10:24,670 --> 00:10:30,460
orchestrators gives access to a broader

00:10:27,100 --> 00:10:32,980
storage ecosystem orchestrators can

00:10:30,460 --> 00:10:35,160
leverage open api s and they have looser

00:10:32,980 --> 00:10:39,340
coupling with back-end storage systems

00:10:35,160 --> 00:10:40,360
some other goals of CSI especially with

00:10:39,340 --> 00:10:42,820
respect to this version that we're

00:10:40,360 --> 00:10:45,910
iterating on we're trying to keep the

00:10:42,820 --> 00:10:47,980
set of API is relatively small but still

00:10:45,910 --> 00:10:51,610
enable many use cases kind of aiming for

00:10:47,980 --> 00:10:52,960
a lowest common denominator API and what

00:10:51,610 --> 00:10:55,090
this will do is lower the barrier of

00:10:52,960 --> 00:10:57,690
entry for the initial round of CSI

00:10:55,090 --> 00:10:57,690
plug-in writers

00:11:00,560 --> 00:11:06,270
great so from a high level a CSI

00:11:03,750 --> 00:11:08,640
presents a control plane interface that

00:11:06,270 --> 00:11:11,550
is largely focused on volume lifecycle

00:11:08,640 --> 00:11:13,890
it is a service-oriented interface as

00:11:11,550 --> 00:11:15,810
opposed to a command-line interface this

00:11:13,890 --> 00:11:18,720
allows plug-ins to easily co-locate with

00:11:15,810 --> 00:11:21,660
other long-running processes I think of

00:11:18,720 --> 00:11:24,209
a fuse demon or Gluster fs services or

00:11:21,660 --> 00:11:26,459
NFS services those are all long-running

00:11:24,209 --> 00:11:30,380
services that co-locate well with with

00:11:26,459 --> 00:11:33,270
plugins services are exposed via G RPC

00:11:30,380 --> 00:11:34,800
some advantages to this there's

00:11:33,270 --> 00:11:37,790
well-understood and mechanisms for our

00:11:34,800 --> 00:11:41,160
proxying and load balancing G RPC calls

00:11:37,790 --> 00:11:42,899
G RPC supports streaming responses which

00:11:41,160 --> 00:11:45,660
although we're not taking advantage of

00:11:42,899 --> 00:11:49,200
those in the first inversion of CSI the

00:11:45,660 --> 00:11:50,910
doors open for later versions G RPC also

00:11:49,200 --> 00:11:57,450
scales well it's an open specification

00:11:50,910 --> 00:12:00,350
and there's great community support with

00:11:57,450 --> 00:12:03,839
respect to configuration and operation

00:12:00,350 --> 00:12:05,190
CSI allows plug-in supervisors which

00:12:03,839 --> 00:12:07,770
means a container Orchestrator or

00:12:05,190 --> 00:12:10,020
something else that's that's supervising

00:12:07,770 --> 00:12:12,890
the lifecycle of the plug-in to decide

00:12:10,020 --> 00:12:15,810
how to deploy and/or isolate plug-ins

00:12:12,890 --> 00:12:18,899
CSI does not specify security protocols

00:12:15,810 --> 00:12:20,160
an operator would protect a CSI UNIX

00:12:18,899 --> 00:12:24,480
socket just like they would protect

00:12:20,160 --> 00:12:26,279
other file system objects CSI with

00:12:24,480 --> 00:12:29,220
respect to packaging there's no mandated

00:12:26,279 --> 00:12:31,560
container image format the spec suggests

00:12:29,220 --> 00:12:35,310
that providers try to use something

00:12:31,560 --> 00:12:36,899
that's across Co compatible again

00:12:35,310 --> 00:12:40,440
there's minimal expectations with

00:12:36,899 --> 00:12:42,120
respect to supervision generally

00:12:40,440 --> 00:12:44,690
speaking plugins should terminate upon

00:12:42,120 --> 00:12:47,459
request for example take a signature

00:12:44,690 --> 00:12:50,040
isolation is not guaranteed but it is

00:12:47,459 --> 00:12:51,690
very likely so for example pretty sure

00:12:50,040 --> 00:12:54,240
kubernetes is planning isolation we're

00:12:51,690 --> 00:12:56,640
planning isolation with Mesa but it's

00:12:54,240 --> 00:12:59,010
not guaranteed other SEOs may not

00:12:56,640 --> 00:13:02,120
isolate and even across Co as that

00:12:59,010 --> 00:13:02,120
isolation may not be the same

00:13:04,780 --> 00:13:13,930
so CSI consists of 3G RPC services these

00:13:11,380 --> 00:13:15,220
services may be composed in different

00:13:13,930 --> 00:13:18,120
ways depending on the deployment

00:13:15,220 --> 00:13:21,580
requirements that's determined by the

00:13:18,120 --> 00:13:22,930
plug-in vendor for example have those

00:13:21,580 --> 00:13:26,200
deployment would bundle all three of

00:13:22,930 --> 00:13:30,940
these services together to further

00:13:26,200 --> 00:13:33,670
illustrate this idea is this slide so on

00:13:30,940 --> 00:13:36,430
the Left it's more of a centralized

00:13:33,670 --> 00:13:38,980
model where you've got a controller

00:13:36,430 --> 00:13:40,900
service running on a master node and

00:13:38,980 --> 00:13:44,200
then you've got all the CSI node

00:13:40,900 --> 00:13:46,030
services running on the agent nodes so

00:13:44,200 --> 00:13:49,630
the controller centralized the node

00:13:46,030 --> 00:13:51,640
services are distributed in the diagram

00:13:49,630 --> 00:13:53,380
on the right is what I called headless

00:13:51,640 --> 00:13:54,820
before where you've got all three

00:13:53,380 --> 00:13:56,860
services well in this case I've only

00:13:54,820 --> 00:13:58,210
shown the controller in the node but

00:13:56,860 --> 00:14:00,490
identity is in there too so you've got

00:13:58,210 --> 00:14:02,530
all the plug-in services running on all

00:14:00,490 --> 00:14:04,780
the agents in the cluster and there's

00:14:02,530 --> 00:14:10,360
nothing specifically running in the

00:14:04,780 --> 00:14:13,530
center or on the master nodes oops

00:14:10,360 --> 00:14:13,530
a couple more points here

00:14:18,270 --> 00:14:23,100
yeah the last point I wanted to make is

00:14:20,339 --> 00:14:26,820
that it's up to an operator to configure

00:14:23,100 --> 00:14:29,370
a container Orchestrator wrister that -

00:14:26,820 --> 00:14:30,810
with respect to deployment and it's up

00:14:29,370 --> 00:14:32,910
to a plugin vendor to provide the

00:14:30,810 --> 00:14:39,110
documentation regarding deployment none

00:14:32,910 --> 00:14:42,390
of that's specified in CSI itself great

00:14:39,110 --> 00:14:44,880
so the lifetime of a volume from

00:14:42,390 --> 00:14:47,100
creation to deletion is illustrated on

00:14:44,880 --> 00:14:50,070
the right there's different volume

00:14:47,100 --> 00:14:52,680
states that that volumes go through as

00:14:50,070 --> 00:14:53,820
CSI our pcs are invoked and what's

00:14:52,680 --> 00:14:55,589
important to understand here is that

00:14:53,820 --> 00:14:58,500
it's the CEO that's really driving the

00:14:55,589 --> 00:15:01,410
provisioning process so a CEO is going

00:14:58,500 --> 00:15:05,310
to invoke the controller publish volume

00:15:01,410 --> 00:15:08,910
which might mean attach some volume or

00:15:05,310 --> 00:15:11,930
some device to a node the CEO will then

00:15:08,910 --> 00:15:14,490
invoke a node publish volume which

00:15:11,930 --> 00:15:17,730
probably means Hegel mount this volume

00:15:14,490 --> 00:15:21,270
in some container plugins advertise

00:15:17,730 --> 00:15:25,110
support for lifecycle operations the

00:15:21,270 --> 00:15:27,000
capability are PCs an example of some of

00:15:25,110 --> 00:15:28,800
these on the slide there create and

00:15:27,000 --> 00:15:30,000
delete is a capability and the

00:15:28,800 --> 00:15:35,700
controller publishing on publisher

00:15:30,000 --> 00:15:36,810
capabilities next couple of slides I'm

00:15:35,700 --> 00:15:39,420
just going to briefly walk through the

00:15:36,810 --> 00:15:41,490
API this API is intended for consumption

00:15:39,420 --> 00:15:43,680
by container orchestrators it's not

00:15:41,490 --> 00:15:45,510
something that Mesa send users will see

00:15:43,680 --> 00:15:46,800
that said it's still useful to

00:15:45,510 --> 00:15:49,500
understand what's happening under the

00:15:46,800 --> 00:15:52,410
hood and it's also useful for you if you

00:15:49,500 --> 00:15:55,470
want to take a stab at reading a CSI

00:15:52,410 --> 00:15:57,329
plugin so first up is the identity

00:15:55,470 --> 00:15:59,100
service this is important for version

00:15:57,329 --> 00:16:01,589
negotiation it allows the container

00:15:59,100 --> 00:16:05,940
Orchestrator to select a supported

00:16:01,589 --> 00:16:10,260
version of the API for use with future

00:16:05,940 --> 00:16:14,420
RPC indications all CSI endpoints must

00:16:10,260 --> 00:16:14,420
support this service it is not optional

00:16:16,860 --> 00:16:24,640
the controller service this maybe runs

00:16:22,480 --> 00:16:27,550
in a central location or else it could

00:16:24,640 --> 00:16:31,180
run on the nodes themselves across the

00:16:27,550 --> 00:16:33,280
cluster the our pcs here kind of split

00:16:31,180 --> 00:16:35,320
up the the top to our pcs of the

00:16:33,280 --> 00:16:37,390
required our pcs the bottom for our pcs

00:16:35,320 --> 00:16:39,990
are optional and the optional ones are

00:16:37,390 --> 00:16:42,010
selected through the capabilities API

00:16:39,990 --> 00:16:45,100
which is the first call so they get

00:16:42,010 --> 00:16:47,380
capabilities our PC just reports which

00:16:45,100 --> 00:16:49,000
controller our pcs are implemented by

00:16:47,380 --> 00:16:51,580
the plugins so that's discoverable by

00:16:49,000 --> 00:16:53,410
the orchestrator validate volume

00:16:51,580 --> 00:16:57,400
capabilities allows an Orchestrator to

00:16:53,410 --> 00:17:00,220
ask does vol X support some Y set of

00:16:57,400 --> 00:17:02,890
capabilities and that's important

00:17:00,220 --> 00:17:05,620
because a plugin may not provide to

00:17:02,890 --> 00:17:08,530
create and delete calls volumes may be

00:17:05,620 --> 00:17:10,810
pre created maybe a co gets a list of

00:17:08,530 --> 00:17:12,460
volumes from a plugin and it needs to

00:17:10,810 --> 00:17:13,780
validate that hey does this volume

00:17:12,460 --> 00:17:17,830
actually support this thing that I want

00:17:13,780 --> 00:17:19,600
to do with it the next four are PCs like

00:17:17,830 --> 00:17:22,630
I said are optional they create and

00:17:19,600 --> 00:17:24,790
delete calls create is what you think it

00:17:22,630 --> 00:17:26,650
is allows a container Orchestrator to

00:17:24,790 --> 00:17:28,840
tell plugin I'd like to create a volume

00:17:26,650 --> 00:17:31,240
given some name some size and some set

00:17:28,840 --> 00:17:32,190
of capabilities and at some point I want

00:17:31,240 --> 00:17:34,390
to delete that volume

00:17:32,190 --> 00:17:36,760
there's the controller publish and the

00:17:34,390 --> 00:17:39,100
controller unpublished volume this used

00:17:36,760 --> 00:17:40,240
to be called attach and detach those

00:17:39,100 --> 00:17:44,740
names really didn't fit all the

00:17:40,240 --> 00:17:47,260
workflows that we envisioned it's really

00:17:44,740 --> 00:17:49,330
useful for centralized deployments where

00:17:47,260 --> 00:17:52,330
you have a central plug-in controller

00:17:49,330 --> 00:17:53,860
that's executing these are pcs it could

00:17:52,330 --> 00:17:55,540
also be useful for headless deployments

00:17:53,860 --> 00:17:57,490
I think the example that came up and one

00:17:55,540 --> 00:17:59,410
of the discussions was I scuzzy somebody

00:17:57,490 --> 00:18:02,080
wanted to implement specific I scuzzy

00:17:59,410 --> 00:18:05,320
commands when controller publishing on

00:18:02,080 --> 00:18:08,140
publish were invoked the next call lists

00:18:05,320 --> 00:18:09,250
volumes the intent here is to show pre

00:18:08,140 --> 00:18:11,680
created volumes

00:18:09,250 --> 00:18:13,090
it doesn't require create and delete but

00:18:11,680 --> 00:18:17,260
plugins are certainly free to implement

00:18:13,090 --> 00:18:19,510
any subset of these these calls and the

00:18:17,260 --> 00:18:22,330
get capacity call reports the available

00:18:19,510 --> 00:18:24,490
space on the backend presumably a CEO

00:18:22,330 --> 00:18:26,140
would invoke this before calling create

00:18:24,490 --> 00:18:27,340
so that it knows how much space is there

00:18:26,140 --> 00:18:30,510
before it tries to create a volume that

00:18:27,340 --> 00:18:30,510
maybe takes up too much space

00:18:32,200 --> 00:18:38,330
lastly is the note service this service

00:18:34,940 --> 00:18:41,330
must run on the nodes upon which volumes

00:18:38,330 --> 00:18:44,330
are mounted the first call probe node

00:18:41,330 --> 00:18:45,920
allows a CEO to instruct the plugin hey

00:18:44,330 --> 00:18:47,720
go check your configuration

00:18:45,920 --> 00:18:50,390
check for any required software or

00:18:47,720 --> 00:18:52,100
devices that are needed on that node if

00:18:50,390 --> 00:18:54,350
the plugin fails this call that's a

00:18:52,100 --> 00:18:56,390
signal to the orchestrator that the

00:18:54,350 --> 00:18:57,980
plugins not ready and it should not try

00:18:56,390 --> 00:19:01,430
to do any kind of volume lifecycle

00:18:57,980 --> 00:19:02,900
management the node published and

00:19:01,430 --> 00:19:07,400
unpublished calls can think about these

00:19:02,900 --> 00:19:10,190
like mount and unmount volumes they're

00:19:07,400 --> 00:19:11,810
invoked on a per workload basis to mount

00:19:10,190 --> 00:19:14,930
a volume or unknot to volume to or from

00:19:11,810 --> 00:19:17,960
a container the get node ID call

00:19:14,930 --> 00:19:20,540
presents a consistent identifier for the

00:19:17,960 --> 00:19:22,490
node from the perspective of a plugin

00:19:20,540 --> 00:19:24,920
instance and the last call get

00:19:22,490 --> 00:19:26,960
capabilities used to just be a

00:19:24,920 --> 00:19:30,650
placeholder there's a PR and flight

00:19:26,960 --> 00:19:32,210
right now to add a capability to kind of

00:19:30,650 --> 00:19:33,560
separate out some of the responsibility

00:19:32,210 --> 00:19:35,690
that right now lives with a node

00:19:33,560 --> 00:19:37,220
published and unpublished that new

00:19:35,690 --> 00:19:43,520
capability is publish an unpublished

00:19:37,220 --> 00:19:45,020
device and I think that's it I'd like to

00:19:43,520 --> 00:19:47,990
turn the rest of the sorbets of gee

00:19:45,020 --> 00:19:49,250
who's going to talk about CSI and and

00:19:47,990 --> 00:19:54,020
how it's going to be integrated into may

00:19:49,250 --> 00:19:56,210
sews G right thanks James yeah so I'm

00:19:54,020 --> 00:19:58,630
gonna talk about like CSI it's great

00:19:56,210 --> 00:20:00,800
that we have this vendor-neutral

00:19:58,630 --> 00:20:02,120
interface that across all the container

00:20:00,800 --> 00:20:04,580
orchestration systems and then the

00:20:02,120 --> 00:20:06,500
question is how may so is going to

00:20:04,580 --> 00:20:08,420
leverage that interface and how mazes

00:20:06,500 --> 00:20:13,250
and build features on top of those

00:20:08,420 --> 00:20:14,810
interface so so so for meso Sweden

00:20:13,250 --> 00:20:16,910
introduced a new concept called our

00:20:14,810 --> 00:20:18,950
resource provider so think about right

00:20:16,910 --> 00:20:21,200
now in some asos the only resource

00:20:18,950 --> 00:20:23,360
provider you have right now is the agent

00:20:21,200 --> 00:20:25,100
so agent provide resources like CPU

00:20:23,360 --> 00:20:26,390
memory disk and the master keep track of

00:20:25,100 --> 00:20:30,380
those resources and sends you the

00:20:26,390 --> 00:20:33,050
framework using an offer but but this is

00:20:30,380 --> 00:20:35,180
not very flexible like there's no way

00:20:33,050 --> 00:20:38,210
currently like me well people can use

00:20:35,180 --> 00:20:39,770
custom resources but you cannot right

00:20:38,210 --> 00:20:42,740
now you don't have a way to customize

00:20:39,770 --> 00:20:43,080
the the handling of operation on those

00:20:42,740 --> 00:20:44,970
three

00:20:43,080 --> 00:20:46,559
sources for example if you want to

00:20:44,970 --> 00:20:48,600
define a custom operation you want to

00:20:46,559 --> 00:20:50,250
perform on that resources trying to

00:20:48,600 --> 00:20:52,110
convert the resources there's no way you

00:20:50,250 --> 00:20:53,399
can do that in basis right now so as

00:20:52,110 --> 00:20:54,990
part of the storage work we try to

00:20:53,399 --> 00:20:58,890
introduce this general concept Co

00:20:54,990 --> 00:21:01,500
resource provider so that we allow

00:20:58,890 --> 00:21:03,029
developers to undeveloped on their own

00:21:01,500 --> 00:21:05,880
resource provider that providing

00:21:03,029 --> 00:21:08,279
resources to maces and maces Master will

00:21:05,880 --> 00:21:11,580
collect those resources and apply Koda

00:21:08,279 --> 00:21:13,740
reservation all these resource primitive

00:21:11,580 --> 00:21:18,990
and then I'll send those resources to

00:21:13,740 --> 00:21:22,080
the allocator the framework and resource

00:21:18,990 --> 00:21:25,019
provider can be either local or external

00:21:22,080 --> 00:21:27,120
so by local I mean that the resource

00:21:25,019 --> 00:21:30,960
that this resource provided provides are

00:21:27,120 --> 00:21:32,519
tied to a particular agent note external

00:21:30,960 --> 00:21:34,440
means like the resource you provide

00:21:32,519 --> 00:21:37,590
don't tie to a particular node things

00:21:34,440 --> 00:21:39,419
like IP addresses EBS volume those are

00:21:37,590 --> 00:21:41,159
kind of external resources that don't

00:21:39,419 --> 00:21:43,049
tie to a particular node so we

00:21:41,159 --> 00:21:46,260
reintroduce both local resource provider

00:21:43,049 --> 00:21:48,059
and external resource provider and if

00:21:46,260 --> 00:21:50,850
you think about that agent can be think

00:21:48,059 --> 00:21:54,539
of a a combination of task management

00:21:50,850 --> 00:21:56,820
plus local resource provider so I

00:21:54,539 --> 00:21:58,590
introduced RP as I mentioned like we

00:21:56,820 --> 00:22:01,049
allow customization and extension on

00:21:58,590 --> 00:22:03,120
resources and and one of the biggest

00:22:01,049 --> 00:22:04,409
reason we introduced this concept is

00:22:03,120 --> 00:22:07,590
because we want to support external

00:22:04,409 --> 00:22:09,720
resources aka like global resources that

00:22:07,590 --> 00:22:11,039
missus used don't support previously but

00:22:09,720 --> 00:22:12,779
I think we do see a lot of use cases

00:22:11,039 --> 00:22:15,510
that global resource definitely useful

00:22:12,779 --> 00:22:17,399
so we definitely introduce that concept

00:22:15,510 --> 00:22:18,510
so and though we introduce global

00:22:17,399 --> 00:22:22,730
resource through resource provider

00:22:18,510 --> 00:22:22,730
concept okay

00:22:24,460 --> 00:22:29,769
okay so so we're gonna introduce a

00:22:27,519 --> 00:22:32,499
first-class storage resource provider

00:22:29,769 --> 00:22:34,809
which is tied to on the storage work we

00:22:32,499 --> 00:22:37,389
wants to do with CSI we're gonna

00:22:34,809 --> 00:22:40,960
introduce a storage resource provider

00:22:37,389 --> 00:22:42,820
that talked to CSI plugins and this

00:22:40,960 --> 00:22:46,330
storage resource provider will expose

00:22:42,820 --> 00:22:47,649
disk resources to mesas and it will be

00:22:46,330 --> 00:22:49,990
responsible for handling operations

00:22:47,649 --> 00:22:53,080
things like modeling provisioning and

00:22:49,990 --> 00:22:55,119
volume mounting as well and the goal we

00:22:53,080 --> 00:22:57,340
want to achieve in some races is in the

00:22:55,119 --> 00:23:01,169
end and the storage vendor just need to

00:22:57,340 --> 00:23:04,720
give that CSI plugging darker image or a

00:23:01,169 --> 00:23:07,899
binary to mesas and Mesa so we'll just

00:23:04,720 --> 00:23:10,149
take care of the rest and and give you

00:23:07,899 --> 00:23:12,820
resources to frameworks so that's the

00:23:10,149 --> 00:23:15,070
ultimate goal we don't want the user or

00:23:12,820 --> 00:23:16,539
the operator to be and like I mean you

00:23:15,070 --> 00:23:19,119
don't want to we don't want to use it to

00:23:16,539 --> 00:23:21,820
be aware of all these internal CSI stuff

00:23:19,119 --> 00:23:23,649
to users it's all just resources the

00:23:21,820 --> 00:23:28,119
same resource you can right now inside

00:23:23,649 --> 00:23:30,549
your framework so this is kind of the

00:23:28,119 --> 00:23:33,909
high level architecture of how this is

00:23:30,549 --> 00:23:35,559
gonna work so as I mentioned we have you

00:23:33,909 --> 00:23:37,899
can see here so you have a master node

00:23:35,559 --> 00:23:39,850
and agent node so are we as I mentioned

00:23:37,899 --> 00:23:41,860
earlier we will introduce external

00:23:39,850 --> 00:23:44,320
resource provider so for storage we're

00:23:41,860 --> 00:23:46,059
gonna introduce a first-class storage

00:23:44,320 --> 00:23:48,129
external resource provider that talked

00:23:46,059 --> 00:23:49,960
to the Mesa master directly because the

00:23:48,129 --> 00:23:51,669
resource it provides does not tied to

00:23:49,960 --> 00:23:54,639
any particular agent it does not make

00:23:51,669 --> 00:23:55,720
sense to rent that on a particular agent

00:23:54,639 --> 00:23:58,779
but essentially you can run this

00:23:55,720 --> 00:24:00,519
provider on any agent and then for

00:23:58,779 --> 00:24:03,129
example schedule by marathon to run that

00:24:00,519 --> 00:24:05,649
plug-in on any agent and that would talk

00:24:03,129 --> 00:24:07,629
to mrs. masters through HTTP API to

00:24:05,649 --> 00:24:09,730
provide those resources to master and

00:24:07,629 --> 00:24:12,999
that storage external resource provider

00:24:09,730 --> 00:24:15,009
world on Indian talked to a EBS for

00:24:12,999 --> 00:24:17,019
example like talk to a storage vendors

00:24:15,009 --> 00:24:19,570
controller plugging as James mentioned

00:24:17,019 --> 00:24:21,999
in CSI we have this controller service

00:24:19,570 --> 00:24:24,129
and no service controller service can be

00:24:21,999 --> 00:24:26,409
run anywhere so on the external resource

00:24:24,129 --> 00:24:28,360
provider will talk to controller servers

00:24:26,409 --> 00:24:31,090
to undo things like provisioning and

00:24:28,360 --> 00:24:33,279
de-provisioning a given volume and then

00:24:31,090 --> 00:24:35,980
on the agent side as you can see here on

00:24:33,279 --> 00:24:37,929
we have a we need to use a storage local

00:24:35,980 --> 00:24:40,720
resource provider for on

00:24:37,929 --> 00:24:43,059
local disc resources and it talks to a

00:24:40,720 --> 00:24:45,039
CSI plug-in as well in this case I using

00:24:43,059 --> 00:24:46,779
that lbm an example I say you have a

00:24:45,039 --> 00:24:49,240
bunch of discs you want to treat that as

00:24:46,779 --> 00:24:51,820
a single pool and certain resources to

00:24:49,240 --> 00:24:54,190
make those master so and and we can

00:24:51,820 --> 00:24:55,929
build an LVN plugin for that and LVM is

00:24:54,190 --> 00:24:57,789
responsible for handling all these

00:24:55,929 --> 00:25:01,320
provisioning and de-provisioning morning

00:24:57,789 --> 00:25:05,470
request coming from the CSI interface

00:25:01,320 --> 00:25:07,210
and also as I mentioned as I think James

00:25:05,470 --> 00:25:08,799
mentioned earlier that you have to run

00:25:07,210 --> 00:25:10,480
some no plugging on the node that you

00:25:08,799 --> 00:25:12,460
want to use the volume think about the

00:25:10,480 --> 00:25:14,919
EBS case once you provision the EBS

00:25:12,460 --> 00:25:16,869
volume eventually it wants to eat you

00:25:14,919 --> 00:25:18,429
want to attach the EBS volunteer given

00:25:16,869 --> 00:25:20,379
node and actually mounting the volume

00:25:18,429 --> 00:25:22,240
and that operation can only happen on

00:25:20,379 --> 00:25:24,009
the know you wants to use the volume so

00:25:22,240 --> 00:25:26,379
we need to deploy in the EBS no plugin

00:25:24,009 --> 00:25:29,259
on the node as well and that would be

00:25:26,379 --> 00:25:31,299
handled by the agent itself to to launch

00:25:29,259 --> 00:25:33,249
that no plugin container and the agent

00:25:31,299 --> 00:25:36,369
will talk to that on no plugin container

00:25:33,249 --> 00:25:37,840
using CSR protocol as well so that I can

00:25:36,369 --> 00:25:39,759
actually like to make sure that morning

00:25:37,840 --> 00:25:41,789
actually show up and mount it on a given

00:25:39,759 --> 00:25:44,259
location so that container can use those

00:25:41,789 --> 00:25:47,740
volumes so we're gonna support both

00:25:44,259 --> 00:25:51,759
local and external storage providers and

00:25:47,740 --> 00:25:54,549
support all the CSI plugins so this is

00:25:51,759 --> 00:25:56,139
kind of roadmap in metals for storage

00:25:54,549 --> 00:25:57,909
support so we're gonna support local

00:25:56,139 --> 00:26:00,249
resource providers first because it's

00:25:57,909 --> 00:26:02,169
more tied to the current model and and

00:26:00,249 --> 00:26:05,350
then we're gonna build a local storage

00:26:02,169 --> 00:26:07,240
resource provider with CSI and then

00:26:05,350 --> 00:26:09,129
we're gonna move to external resource

00:26:07,240 --> 00:26:11,110
provider integration and then on

00:26:09,129 --> 00:26:12,399
building CSI integration there so

00:26:11,110 --> 00:26:14,649
there's an epoch you can track the

00:26:12,399 --> 00:26:16,480
progress there so lrp is a local

00:26:14,649 --> 00:26:18,309
resource provider for storage isn't

00:26:16,480 --> 00:26:21,100
targeted for next release which is one

00:26:18,309 --> 00:26:23,230
phi and the external storage external

00:26:21,100 --> 00:26:26,519
resource provider support is target four

00:26:23,230 --> 00:26:31,350
one six the next release after one five

00:26:26,519 --> 00:26:38,460
alright so I'm gonna turn over to Steve

00:26:31,350 --> 00:26:42,159
thanks so I'm here representing a

00:26:38,460 --> 00:26:44,679
storage provider and the storage

00:26:42,159 --> 00:26:47,230
provider that my team works on the code

00:26:44,679 --> 00:26:50,350
team is something called R x-ray that

00:26:47,230 --> 00:26:51,900
has been around for a while already in

00:26:50,350 --> 00:26:55,410
the mezzos environment

00:26:51,900 --> 00:26:58,740
but it was implementing the mezzos

00:26:55,410 --> 00:27:02,120
proprietary storage interface but we've

00:26:58,740 --> 00:27:05,010
spent the a good portion of this year

00:27:02,120 --> 00:27:08,870
enhancing this to drive Rex Rae to

00:27:05,010 --> 00:27:12,750
become a CSI compatible storage plug-in

00:27:08,870 --> 00:27:14,670
and the benefit of course here is that

00:27:12,750 --> 00:27:17,520
we'll be able to use the same code to

00:27:14,670 --> 00:27:21,300
interoperate across multiple container

00:27:17,520 --> 00:27:26,880
orchestrators like mezzos but others as

00:27:21,300 --> 00:27:33,080
well now the the key point I want to

00:27:26,880 --> 00:27:36,750
make today that is that Rex ray is a CSI

00:27:33,080 --> 00:27:39,780
compatible provider at mezzos con North

00:27:36,750 --> 00:27:42,990
America on the Sunday before it started

00:27:39,780 --> 00:27:52,140
we announced implementation in R x-ray

00:27:42,990 --> 00:27:55,380
version 0.1 o for CSI support the the

00:27:52,140 --> 00:27:58,350
overview you can see here we've been

00:27:55,380 --> 00:28:01,650
delivering support for persistent

00:27:58,350 --> 00:28:03,720
volumes for maize O's for around two

00:28:01,650 --> 00:28:08,820
years now so this is nothing new in the

00:28:03,720 --> 00:28:11,310
mezzos environment but our 0.1 o

00:28:08,820 --> 00:28:13,890
released on September 12 brought and

00:28:11,310 --> 00:28:16,650
implementation of the CSI proposed

00:28:13,890 --> 00:28:19,740
specification the orchestrator vendors

00:28:16,650 --> 00:28:21,900
behind this are still declaring the CSI

00:28:19,740 --> 00:28:24,840
spec to be a pre release at this point

00:28:21,900 --> 00:28:28,200
but I think as soon as the first two

00:28:24,840 --> 00:28:30,630
build them in build implementations this

00:28:28,200 --> 00:28:34,230
will be declared a release they just

00:28:30,630 --> 00:28:36,630
want to do retain the option to

00:28:34,230 --> 00:28:39,240
potentially change something should

00:28:36,630 --> 00:28:40,950
somebody spot a mistake I mean if you

00:28:39,240 --> 00:28:43,860
can't prove that it's interoperable

00:28:40,950 --> 00:28:47,730
until at least two instances have

00:28:43,860 --> 00:28:50,370
managed to pull it off but somebody had

00:28:47,730 --> 00:28:52,500
to go first and rather than wait for the

00:28:50,370 --> 00:28:54,630
orchestrators to do their end and have

00:28:52,500 --> 00:28:59,100
nothing to attach to and nothing to test

00:28:54,630 --> 00:29:01,110
with the code team decided that we

00:28:59,100 --> 00:29:05,160
wanted to get out there and do that

00:29:01,110 --> 00:29:07,140
groundwork to provide the ability to

00:29:05,160 --> 00:29:09,120
hook up with something if you're a

00:29:07,140 --> 00:29:11,700
container Orchestrator and actually do

00:29:09,120 --> 00:29:13,680
your development and testing so this

00:29:11,700 --> 00:29:16,380
should be compatible with mezzos

00:29:13,680 --> 00:29:20,640
kubernetes and docker swarm on the

00:29:16,380 --> 00:29:25,980
roadmap we're planning the 0.11 release

00:29:20,640 --> 00:29:28,770
October 16 I don't know if we're already

00:29:25,980 --> 00:29:31,680
past that I believe that happened right

00:29:28,770 --> 00:29:34,050
Clint okay so that got out there to the

00:29:31,680 --> 00:29:37,830
the laid out there was this Dec dates

00:29:34,050 --> 00:29:40,260
back to to Bezos con North America so I

00:29:37,830 --> 00:29:43,050
didn't update the deck but it is out

00:29:40,260 --> 00:29:45,330
there the feature added in the 11

00:29:43,050 --> 00:29:48,570
release was support for Azure unmanaged

00:29:45,330 --> 00:29:51,840
disks this is an architectural overview

00:29:48,570 --> 00:29:54,900
of what R x-ray looks like as a CSI

00:29:51,840 --> 00:29:57,930
storage provider as mentioned before by

00:29:54,900 --> 00:30:01,130
James the primary interface to the

00:29:57,930 --> 00:30:05,040
container Orchestrator is a G RPC

00:30:01,130 --> 00:30:07,530
interface so the Rex ray plugin

00:30:05,040 --> 00:30:11,850
implements that it's written in the go

00:30:07,530 --> 00:30:14,160
language we have implementations for a

00:30:11,850 --> 00:30:16,800
number of different flavors of storage

00:30:14,160 --> 00:30:20,580
I'll get to that in a minute there are

00:30:16,800 --> 00:30:23,070
components involved here that operate at

00:30:20,580 --> 00:30:26,730
both a client and server level and we

00:30:23,070 --> 00:30:29,820
are working on conformance conformance

00:30:26,730 --> 00:30:32,400
libraries so that we have a test suite

00:30:29,820 --> 00:30:34,350
that we can use to validate that these

00:30:32,400 --> 00:30:38,340
things are compliant with the

00:30:34,350 --> 00:30:42,360
specification what we've got today this

00:30:38,340 --> 00:30:44,940
is a quick wrap up on the right side you

00:30:42,360 --> 00:30:48,750
can see the support for public cloud

00:30:44,940 --> 00:30:51,270
forms of storage so we've got all the

00:30:48,750 --> 00:30:54,170
popular forms of storage on Amazon we've

00:30:51,270 --> 00:30:58,140
got persistent disks in the Google cloud

00:30:54,170 --> 00:31:00,510
block storage and digital ocean and the

00:30:58,140 --> 00:31:03,540
latest ad was the support for the

00:31:00,510 --> 00:31:05,310
Microsoft Azure unmanaged disk over on

00:31:03,540 --> 00:31:10,110
the unprimed

00:31:05,310 --> 00:31:13,440
we've got support for AF RBD we've got a

00:31:10,110 --> 00:31:16,650
whole class of a classification of local

00:31:13,440 --> 00:31:19,410
storage these would be things that would

00:31:16,650 --> 00:31:23,510
be mountable on the local cluster nodes

00:31:19,410 --> 00:31:30,570
we've got coverage for block device NFS

00:31:23,510 --> 00:31:33,510
VFS for hardware or software based

00:31:30,570 --> 00:31:36,810
storage in the Dale family we've got

00:31:33,510 --> 00:31:39,270
support for scale i/o and Isilon and on

00:31:36,810 --> 00:31:42,120
OpenStack we've got a a cinder interface

00:31:39,270 --> 00:31:43,860
supported at this point even though I'm

00:31:42,120 --> 00:31:47,340
going to keep talking in the original

00:31:43,860 --> 00:31:49,640
presentation the second storage vendor

00:31:47,340 --> 00:31:55,050
diamante was supposed to come on stage

00:31:49,640 --> 00:31:58,380
so pretend I'm Chakri now so from the

00:31:55,050 --> 00:32:02,150
perspective of Chakri as a diamante

00:31:58,380 --> 00:32:04,260
storage provider they already dealt with

00:32:02,150 --> 00:32:06,090
support for multiple container

00:32:04,260 --> 00:32:07,980
orchestrators and they were actually one

00:32:06,090 --> 00:32:10,830
of the pioneers over on the kubernetes

00:32:07,980 --> 00:32:14,940
side of this thing called a flex volume

00:32:10,830 --> 00:32:18,000
interface that was a generic storage

00:32:14,940 --> 00:32:22,530
interface that called out to a command

00:32:18,000 --> 00:32:26,010
line or an exact form of mountain mount

00:32:22,530 --> 00:32:28,740
for volumes and it got a fair amount of

00:32:26,010 --> 00:32:30,660
traction over on kubernetes I don't flex

00:32:28,740 --> 00:32:32,880
really didn't have that much of an

00:32:30,660 --> 00:32:37,380
equivalent over on the mezzo site at any

00:32:32,880 --> 00:32:39,990
time but it was an example of a storage

00:32:37,380 --> 00:32:41,940
provider maybe treading a little water

00:32:39,990 --> 00:32:44,070
harder than they should have to in that

00:32:41,940 --> 00:32:49,160
they're you know doing work on multiple

00:32:44,070 --> 00:32:49,160
platforms that we're hoping will go away

00:32:49,340 --> 00:32:54,090
from the perspective of diamonte they're

00:32:52,020 --> 00:32:56,670
now happy to be working with the CSI

00:32:54,090 --> 00:33:00,380
community to bring these container

00:32:56,670 --> 00:33:00,380
Orchestrator platforms together

00:33:00,410 --> 00:33:07,710
so finally diamante like the fact that

00:33:04,260 --> 00:33:10,140
CSI means that there's one storage

00:33:07,710 --> 00:33:12,630
plug-in interface that delivers it to

00:33:10,140 --> 00:33:15,030
multiple platforms give brings the

00:33:12,630 --> 00:33:16,980
benefit of reducing development time and

00:33:15,030 --> 00:33:21,060
increasing the time left over to do

00:33:16,980 --> 00:33:23,610
testing so if you're blowing less

00:33:21,060 --> 00:33:27,090
resource on duplicated effort you can

00:33:23,610 --> 00:33:32,000
Excel you can reallocate that to doing

00:33:27,090 --> 00:33:32,000
innovation and work on collaboration so

00:33:32,280 --> 00:33:40,450
diamante is a backer of this as well

00:33:34,770 --> 00:33:43,330
there are others these are people who've

00:33:40,450 --> 00:33:45,850
announced that they're participating in

00:33:43,330 --> 00:33:50,730
the CSI project there's logos there for

00:33:45,850 --> 00:33:50,730
both storage providers and orchestrators

00:33:51,750 --> 00:33:59,590
so the roadmap right now we've got a

00:33:56,790 --> 00:34:04,060
pre-release back and the orchestrators

00:33:59,590 --> 00:34:06,010
are planning to support this I can't

00:34:04,060 --> 00:34:08,140
really speak on their behalf but I

00:34:06,010 --> 00:34:11,020
believe it's fair to say that they

00:34:08,140 --> 00:34:14,140
anticipate this being by end of year for

00:34:11,020 --> 00:34:15,730
the kubernetes and maze O's platforms if

00:34:14,140 --> 00:34:18,280
they might miss that they probably

00:34:15,730 --> 00:34:20,560
shouldn't miss it by much there are some

00:34:18,280 --> 00:34:22,810
things that didn't get in that first cut

00:34:20,560 --> 00:34:25,150
of the spec but these things are on the

00:34:22,810 --> 00:34:27,250
roadmap so you know there's always that

00:34:25,150 --> 00:34:29,020
trade-off of put everything but the

00:34:27,250 --> 00:34:30,790
kitchen sink and release one and then

00:34:29,020 --> 00:34:33,430
it's going to take longer and these

00:34:30,790 --> 00:34:36,580
roadmap items that we'll get in to

00:34:33,430 --> 00:34:40,620
release and you know one plus and our

00:34:36,580 --> 00:34:44,620
support for snapshot volume resizing

00:34:40,620 --> 00:34:48,070
quotas windows the wind container

00:34:44,620 --> 00:34:50,050
support for the Windows OS and user ID

00:34:48,070 --> 00:34:54,100
and credential pass-through to the

00:34:50,050 --> 00:34:56,110
storage provider there's one inch one

00:34:54,100 --> 00:34:58,270
thing that's deemed out of source simply

00:34:56,110 --> 00:35:03,430
because the different container

00:34:58,270 --> 00:35:06,130
Orchestrator providers may those

00:35:03,430 --> 00:35:09,430
kubernetes really had different

00:35:06,130 --> 00:35:11,560
architectural ideas or wanted wanted to

00:35:09,430 --> 00:35:13,450
use this as distinguishing features and

00:35:11,560 --> 00:35:15,640
that was storage class something that's

00:35:13,450 --> 00:35:19,240
often referred to as profiles in the

00:35:15,640 --> 00:35:22,300
virtualization world and those those are

00:35:19,240 --> 00:35:23,950
not destined to become standardized

00:35:22,300 --> 00:35:28,210
through the container storage interface

00:35:23,950 --> 00:35:30,520
it's kind of a higher level of managing

00:35:28,210 --> 00:35:34,090
and mapping classes of storage to

00:35:30,520 --> 00:35:42,150
containers that are controlled by a

00:35:34,090 --> 00:35:45,809
scheduler I'm gonna close here with

00:35:42,150 --> 00:35:48,619
a call-to-action to the community for

00:35:45,809 --> 00:35:52,410
people to get involved right now a

00:35:48,619 --> 00:35:54,960
number of Orchestrator developers are

00:35:52,410 --> 00:35:57,390
heavily involved with this project as

00:35:54,960 --> 00:36:01,230
well as a number of storage providers

00:35:57,390 --> 00:36:03,630
but we could use some more increased

00:36:01,230 --> 00:36:06,119
involvement by the user community how

00:36:03,630 --> 00:36:09,740
would you get involved well we have a

00:36:06,119 --> 00:36:13,289
github repository that retains the CSI

00:36:09,740 --> 00:36:16,410
specification and you can go look at it

00:36:13,289 --> 00:36:20,490
and you could create issues against that

00:36:16,410 --> 00:36:22,980
specification if you want to get a

00:36:20,490 --> 00:36:25,349
background we have recurring meetings

00:36:22,980 --> 00:36:27,779
that are done under zoom there hit the

00:36:25,349 --> 00:36:29,520
link here the link is there and this

00:36:27,779 --> 00:36:31,289
deck has been uploaded to the Linux

00:36:29,520 --> 00:36:35,460
Foundation so I believe you can already

00:36:31,289 --> 00:36:39,119
download this deck if it didn't get

00:36:35,460 --> 00:36:41,609
there yet this deck is largely unchanged

00:36:39,119 --> 00:36:43,619
since the original presentation in May

00:36:41,609 --> 00:36:45,049
Zoe's con North America so I know for a

00:36:43,619 --> 00:36:48,029
fact it's there already

00:36:45,049 --> 00:36:50,970
anyway you can go to that zoom link get

00:36:48,029 --> 00:36:55,319
the schedule from from the links here

00:36:50,970 --> 00:36:58,079
and just join that call you've missed

00:36:55,319 --> 00:37:00,180
some of the calls but the running log of

00:36:58,079 --> 00:37:04,289
the notes from those calls is kept at

00:37:00,180 --> 00:37:06,720
the the link you see there and these

00:37:04,289 --> 00:37:09,210
zoom meetings are recorded so you if

00:37:06,720 --> 00:37:11,039
you'd prefer to digest that in the

00:37:09,210 --> 00:37:13,920
actual audio rather than reading the

00:37:11,039 --> 00:37:17,250
notes that's available as well there's a

00:37:13,920 --> 00:37:19,319
Google mailing list that is actually

00:37:17,250 --> 00:37:21,299
quite active in this community from both

00:37:19,319 --> 00:37:24,450
the perspective of orchestrators and

00:37:21,299 --> 00:37:26,819
storage providers you can say I'd like

00:37:24,450 --> 00:37:29,099
you to get on board because this is one

00:37:26,819 --> 00:37:31,470
of the real benefits of open source as

00:37:29,099 --> 00:37:33,839
opposed to closed source commercial

00:37:31,470 --> 00:37:35,579
products where you get that step where

00:37:33,839 --> 00:37:38,700
you as a customer would go through a

00:37:35,579 --> 00:37:40,829
process of going to a vendor maybe

00:37:38,700 --> 00:37:43,170
getting their product manager to put

00:37:40,829 --> 00:37:44,910
your request on the feature list here

00:37:43,170 --> 00:37:46,770
you can get right up in front of the

00:37:44,910 --> 00:37:48,779
developers faces and there's a unique

00:37:46,770 --> 00:37:51,510
opportunity now because we're still

00:37:48,779 --> 00:37:53,609
building this for the first time that

00:37:51,510 --> 00:37:55,559
it's perhaps easy if you spot an

00:37:53,609 --> 00:37:57,449
omission or you have a

00:37:55,559 --> 00:37:59,400
real need for a unique request that

00:37:57,449 --> 00:38:01,739
maybe we haven't thought of now's the

00:37:59,400 --> 00:38:03,509
time to get in there the other reason

00:38:01,739 --> 00:38:05,130
for getting in there now is if you're a

00:38:03,509 --> 00:38:07,549
large organization that maybe

00:38:05,130 --> 00:38:10,949
anticipates pushing the envelope for

00:38:07,549 --> 00:38:12,989
performance or scale on this by getting

00:38:10,949 --> 00:38:15,150
involved now where we're having active

00:38:12,989 --> 00:38:17,579
discussions on the design you'll

00:38:15,150 --> 00:38:20,729
inherently get that deep dive view so

00:38:17,579 --> 00:38:22,739
you have a real understanding of the

00:38:20,729 --> 00:38:25,019
fundamentals of why things were built

00:38:22,739 --> 00:38:27,900
the way they were how things are glued

00:38:25,019 --> 00:38:29,880
together where things live and sometimes

00:38:27,900 --> 00:38:32,430
after a project is a couple years old

00:38:29,880 --> 00:38:35,430
isn't it it isn't all that easy to pick

00:38:32,430 --> 00:38:36,779
up on those kinds of things so even if

00:38:35,430 --> 00:38:39,680
you want to get involved with this

00:38:36,779 --> 00:38:42,689
community as a lurker just to listen

00:38:39,680 --> 00:38:45,119
listen in on what's going on in these

00:38:42,689 --> 00:38:46,920
design decisions in my mind that's a

00:38:45,119 --> 00:38:50,009
great opportunity that you don't always

00:38:46,920 --> 00:38:53,489
get so I really encourage you to get

00:38:50,009 --> 00:38:56,219
involved here so at that point that's

00:38:53,489 --> 00:38:59,400
the wrap-up for the presentation I think

00:38:56,219 --> 00:39:03,539
we've got a few minutes left to handle

00:38:59,400 --> 00:39:05,549
questions if anybody's got any yeah we

00:39:03,539 --> 00:39:08,509
have 15 minutes for questions any

00:39:05,549 --> 00:39:08,509
questions

00:39:11,029 --> 00:39:15,209
well people thinking about questions

00:39:13,499 --> 00:39:17,429
could you please tell me the story of

00:39:15,209 --> 00:39:17,939
your logo who designed it where does it

00:39:17,429 --> 00:39:23,329
come from

00:39:17,939 --> 00:39:26,489
oh the CSI logo it is a logo we actually

00:39:23,329 --> 00:39:29,689
commissioned a number of implementations

00:39:26,489 --> 00:39:33,749
of a logo and put it out for a vote and

00:39:29,689 --> 00:39:35,939
it was hand the microphone over to Clint

00:39:33,749 --> 00:39:39,719
there in the first row because he's the

00:39:35,939 --> 00:39:42,599
one who organized that effort so the the

00:39:39,719 --> 00:39:45,569
logos background is that we open it up

00:39:42,599 --> 00:39:48,869
to the CSI community to participate and

00:39:45,569 --> 00:39:50,999
to vote on the different logos so sod

00:39:48,869 --> 00:39:52,109
and all the CEOs and the other team up

00:39:50,999 --> 00:39:54,449
here on the stage we were able to

00:39:52,109 --> 00:39:56,999
participate and vote on what they liked

00:39:54,449 --> 00:39:59,039
so there were about 80 different logos

00:39:56,999 --> 00:40:01,019
so I don't know there's a specific story

00:39:59,039 --> 00:40:02,779
to tell other than everybody likes this

00:40:01,019 --> 00:40:05,689
one and this is the most popular logo

00:40:02,779 --> 00:40:08,380
yeah so there it is oops

00:40:05,689 --> 00:40:10,779
it's the

00:40:08,380 --> 00:40:12,309
I went back too far I want to bring it

00:40:10,779 --> 00:40:18,359
up so we know what we're talking about

00:40:12,309 --> 00:40:18,359
here I mean it it's the orange one more

00:40:18,900 --> 00:40:24,430
so it's the orange thing yeah so the the

00:40:22,990 --> 00:40:26,410
description that we asked for from the

00:40:24,430 --> 00:40:28,869
artists was to present something that

00:40:26,410 --> 00:40:31,000
was connecting two things together so

00:40:28,869 --> 00:40:32,799
hence you have the dot in the middle

00:40:31,000 --> 00:40:34,539
which represents the interface and then

00:40:32,799 --> 00:40:36,099
you've got on the top maybe the co and

00:40:34,539 --> 00:40:38,049
on the bottom a storage platform so I

00:40:36,099 --> 00:40:40,599
didn't vote for this I actually called

00:40:38,049 --> 00:40:43,359
called this I kind of dissed it calling

00:40:40,599 --> 00:40:45,609
it you know CSI really only works at the

00:40:43,359 --> 00:40:47,890
control plane of storage so it does the

00:40:45,609 --> 00:40:51,099
mountain mount the attach of devices to

00:40:47,890 --> 00:40:52,960
notes so it's a control plane it isn't

00:40:51,099 --> 00:40:55,450
involved in the data planes so there's

00:40:52,960 --> 00:40:58,180
no latency added by using this and I

00:40:55,450 --> 00:41:01,480
called this logo snakes on a control

00:40:58,180 --> 00:41:02,920
plane so better the snake to me it looks

00:41:01,480 --> 00:41:05,289
like the snake that ate all your data

00:41:02,920 --> 00:41:07,119
and if you like the logo in the code

00:41:05,289 --> 00:41:09,339
booth we've got some embroidered patches

00:41:07,119 --> 00:41:11,049
with it so come by the booth after this

00:41:09,339 --> 00:41:16,960
breaks up and get yourself one we've got

00:41:11,049 --> 00:41:26,710
stickers with it too okay and your real

00:41:16,960 --> 00:41:31,329
questions we got one right there how

00:41:26,710 --> 00:41:34,420
question two is there thinking about how

00:41:31,329 --> 00:41:37,119
to design that storage class concept the

00:41:34,420 --> 00:41:40,859
profile concept where may be linked to

00:41:37,119 --> 00:41:43,950
the quotas on both capacity and I ops

00:41:40,859 --> 00:41:48,460
how would the implementation look like

00:41:43,950 --> 00:41:50,920
yeah so there's protobufs that are maybe

00:41:48,460 --> 00:41:54,849
then either landed or will land in may

00:41:50,920 --> 00:41:59,619
sews to support a profile name that can

00:41:54,849 --> 00:42:01,480
be associated with a volume there's some

00:41:59,619 --> 00:42:04,779
ongoing work in DCOs

00:42:01,480 --> 00:42:06,839
to add support for dead like an

00:42:04,779 --> 00:42:09,039
underlying implementation for profiles

00:42:06,839 --> 00:42:10,900
so it is something we're thinking about

00:42:09,039 --> 00:42:12,819
you know in terms of you know what is a

00:42:10,900 --> 00:42:14,109
profile how do you how do you associate

00:42:12,819 --> 00:42:17,410
parameters or the profile things like

00:42:14,109 --> 00:42:19,839
that so maybe I'm thinking there there

00:42:17,410 --> 00:42:21,880
might be some new adopters of maze osore

00:42:19,839 --> 00:42:23,410
DCOs and the audience so it might

00:42:21,880 --> 00:42:25,480
be worthwhile to explain the value

00:42:23,410 --> 00:42:28,990
proposition of why you want to have

00:42:25,480 --> 00:42:30,550
these classes or profiles if I'd be

00:42:28,990 --> 00:42:32,260
happy to answer it because it's a

00:42:30,550 --> 00:42:34,000
storage bride right we're gonna go ahead

00:42:32,260 --> 00:42:36,940
didn't have that it sure so that the

00:42:34,000 --> 00:42:40,030
whole idea of these classes is that you

00:42:36,940 --> 00:42:42,940
as an application writer a dev really

00:42:40,030 --> 00:42:44,890
don't want to link your storage needs

00:42:42,940 --> 00:42:47,980
coming out of the application to

00:42:44,890 --> 00:42:50,080
specific identities of a volume or a

00:42:47,980 --> 00:42:52,960
type of storage because that stuff

00:42:50,080 --> 00:42:55,660
changes over time and it changes as you

00:42:52,960 --> 00:42:58,030
move from an on-prem situation to a

00:42:55,660 --> 00:42:59,380
public cloud or from one public cloud to

00:42:58,030 --> 00:43:01,750
a different one they have different

00:42:59,380 --> 00:43:05,290
types of storage there so the last thing

00:43:01,750 --> 00:43:09,760
you want to do is say something in your

00:43:05,290 --> 00:43:13,120
app like I want my relational database

00:43:09,760 --> 00:43:17,500
my post-race dress database to link up

00:43:13,120 --> 00:43:19,660
to an SSD provided by scale aisle

00:43:17,500 --> 00:43:22,720
because if you were to ever move that to

00:43:19,660 --> 00:43:24,850
AWS it doesn't exist there what you'd

00:43:22,720 --> 00:43:28,510
prefer is a scenario where you define

00:43:24,850 --> 00:43:30,580
these classes with names that are

00:43:28,510 --> 00:43:34,030
managed by an administrator so a class

00:43:30,580 --> 00:43:36,910
might be the fast class meaning high

00:43:34,030 --> 00:43:39,760
performance but expensive storage and a

00:43:36,910 --> 00:43:42,130
slow class or a cheap class which is

00:43:39,760 --> 00:43:45,210
stuff where you'd prefer to save money

00:43:42,130 --> 00:43:47,770
and if you take the example of a

00:43:45,210 --> 00:43:49,810
relational database they might have

00:43:47,770 --> 00:43:53,950
things like index tables that would

00:43:49,810 --> 00:43:56,080
greatly benefit from utilizing that fast

00:43:53,950 --> 00:43:58,870
class of storage but they could have

00:43:56,080 --> 00:44:01,000
other things like log files that you'd

00:43:58,870 --> 00:44:02,530
really like to save the money because

00:44:01,000 --> 00:44:05,350
they don't really have performance

00:44:02,530 --> 00:44:08,260
demands and if you abstract those up

00:44:05,350 --> 00:44:11,170
with these broad general descriptions of

00:44:08,260 --> 00:44:13,600
fast and slow or fast and cheap

00:44:11,170 --> 00:44:17,350
those tend to be consistent across

00:44:13,600 --> 00:44:18,880
clouds so if I defined a fast class in

00:44:17,350 --> 00:44:21,490
Amazon that might map to

00:44:18,880 --> 00:44:24,310
high-performance storage and Amazon that

00:44:21,490 --> 00:44:25,900
cost me well more and the slow to slower

00:44:24,310 --> 00:44:27,460
and that same thing

00:44:25,900 --> 00:44:30,010
could it be mapped to other categories

00:44:27,460 --> 00:44:33,010
in Google's cloud or to your on-prem

00:44:30,010 --> 00:44:35,770
storage it also can be consistent across

00:44:33,010 --> 00:44:38,260
time so if you put yourself at a time

00:44:35,770 --> 00:44:41,130
Sheen went back five years with that

00:44:38,260 --> 00:44:44,620
relational database fast might have been

00:44:41,130 --> 00:44:46,210
15,000 rpm rotating drives and slow

00:44:44,620 --> 00:44:49,150
would have been the slower drives but

00:44:46,210 --> 00:44:52,660
it's all rotating today fast would

00:44:49,150 --> 00:44:53,830
clearly be SSDs and then slow might be

00:44:52,660 --> 00:44:56,200
still rotating

00:44:53,830 --> 00:44:58,900
but those fast and slow labels would

00:44:56,200 --> 00:45:00,970
still apply you don't you could change

00:44:58,900 --> 00:45:03,280
in one place for your whole data center

00:45:00,970 --> 00:45:05,380
the mapping of fast to some class and

00:45:03,280 --> 00:45:07,210
slow to a different one and at the App

00:45:05,380 --> 00:45:10,210
level no you don't have to touch

00:45:07,210 --> 00:45:13,150
anything so it saves you operational

00:45:10,210 --> 00:45:16,810
expense you the goal here is that your

00:45:13,150 --> 00:45:19,420
app definition and configuration lives

00:45:16,810 --> 00:45:23,110
for a long time without administrative

00:45:19,420 --> 00:45:25,060
an intervention and that storage class

00:45:23,110 --> 00:45:27,700
thing is a great feature to have because

00:45:25,060 --> 00:45:31,050
it can lower your operational cost yes

00:45:27,700 --> 00:45:33,070
so to translate to mesas API we had

00:45:31,050 --> 00:45:35,080
interaction in the resource object

00:45:33,070 --> 00:45:36,940
called profile name and that would be

00:45:35,080 --> 00:45:39,340
exposed to the framework and so frame to

00:45:36,940 --> 00:45:41,560
scheduling decisions based on the name

00:45:39,340 --> 00:45:44,830
of the profile rather than like around

00:45:41,560 --> 00:45:47,560
parameters of a disk like SSD or spindle

00:45:44,830 --> 00:45:49,150
disk or III Alps so the base they do the

00:45:47,560 --> 00:45:50,680
decision do pattern matching on those

00:45:49,150 --> 00:45:52,390
profile names so it's kind of level of

00:45:50,680 --> 00:45:53,650
interaction so that name can be mapped

00:45:52,390 --> 00:45:55,870
to different things click on different

00:45:53,650 --> 00:45:57,520
in different times but I mean operator

00:45:55,870 --> 00:45:59,260
will be responsible for config the

00:45:57,520 --> 00:46:01,270
mappings but Freema make decision both

00:45:59,260 --> 00:46:03,240
based on those profile name user make

00:46:01,270 --> 00:46:06,790
their selection like say I wanna use a

00:46:03,240 --> 00:46:08,290
profile blue or profile fast disk user

00:46:06,790 --> 00:46:13,120
make those decision based on those name

00:46:08,290 --> 00:46:15,970
it's just like a level of interaction ok

00:46:13,120 --> 00:46:22,200
I think you kids can call it in another

00:46:15,970 --> 00:46:22,200
one there's a one more questions

00:46:26,920 --> 00:46:32,930
how does open SDS relate to who she is

00:46:30,050 --> 00:46:34,250
hi uh sorry

00:46:32,930 --> 00:46:37,040
what's the question I think it was

00:46:34,250 --> 00:46:40,880
openness yes open the software installer

00:46:37,040 --> 00:46:43,430
storage uh-huh yesterday a lot of noise

00:46:40,880 --> 00:46:47,060
about it so and how does relate to see

00:46:43,430 --> 00:46:49,460
using how does that related to SCSI open

00:46:47,060 --> 00:46:52,190
SDS okay so the question is like how

00:46:49,460 --> 00:46:54,950
does open SDS there's I'm not sure

00:46:52,190 --> 00:46:58,400
everyone knows about opening SDS there

00:46:54,950 --> 00:47:02,990
is a kind of platform from Huawei right

00:46:58,400 --> 00:47:06,920
that wants to to do the pretty similar

00:47:02,990 --> 00:47:09,050
things trying to provide a platform a

00:47:06,920 --> 00:47:11,510
lot of different vendors to plug it into

00:47:09,050 --> 00:47:13,910
that platform and the open SD has also

00:47:11,510 --> 00:47:16,280
has this northbound API to talk to the

00:47:13,910 --> 00:47:18,410
container ox traders and the question is

00:47:16,280 --> 00:47:23,420
what's the relationship between CSI and

00:47:18,410 --> 00:47:26,630
the open SDS so we start the sea SCSI

00:47:23,420 --> 00:47:28,700
project around the same time as open SDS

00:47:26,630 --> 00:47:34,360
if I remember correctly that was last

00:47:28,700 --> 00:47:36,950
November or last December at that time I

00:47:34,360 --> 00:47:38,720
think we just I think we pretty much

00:47:36,950 --> 00:47:39,980
started the project simultaneously I

00:47:38,720 --> 00:47:42,320
think one of the thing that we want to

00:47:39,980 --> 00:47:45,770
achieve in CSI particularly is trying to

00:47:42,320 --> 00:47:47,600
be storage vendor neutral so that we all

00:47:45,770 --> 00:47:49,430
the container oxidation system get

00:47:47,600 --> 00:47:51,320
together and trying to define a standard

00:47:49,430 --> 00:47:52,670
and that we don't want to actually if

00:47:51,320 --> 00:47:54,530
you see the dock right now there is a

00:47:52,670 --> 00:47:56,870
community dog which we express to say

00:47:54,530 --> 00:47:59,510
that we want the maintainer to be off

00:47:56,870 --> 00:48:01,880
from all container orchestration systems

00:47:59,510 --> 00:48:04,820
so that we can ensure this standard is

00:48:01,880 --> 00:48:07,220
storage vendor neutral I think that's

00:48:04,820 --> 00:48:11,450
the key things to drive the standard to

00:48:07,220 --> 00:48:13,250
be successful and I think open SDS is

00:48:11,450 --> 00:48:16,070
from Huawei who is a storage vendor

00:48:13,250 --> 00:48:18,320
itself so that's kind of the one thing

00:48:16,070 --> 00:48:20,780
that I see might be problematic for a

00:48:18,320 --> 00:48:24,160
standard but I think I don't see really

00:48:20,780 --> 00:48:27,770
a huge difference just like to api's and

00:48:24,160 --> 00:48:28,940
CSI just the one that we agree on among

00:48:27,770 --> 00:48:30,560
all these container orchestration

00:48:28,940 --> 00:48:32,450
systems and we start about the same time

00:48:30,560 --> 00:48:35,200
with Noah where our Perseus at the time

00:48:32,450 --> 00:48:35,200
where we start a project

00:48:35,490 --> 00:48:43,080
yes we do have some showers it will be

00:48:39,330 --> 00:48:46,260
honest the s people actually I think OBS

00:48:43,080 --> 00:48:48,750
TS is more similar to live storage you

00:48:46,260 --> 00:48:51,200
know or perhaps Rex ray I'm not a

00:48:48,750 --> 00:48:54,660
spokesman for what their roadmap is

00:48:51,200 --> 00:48:57,240
perhaps they intend to implement a CSI

00:48:54,660 --> 00:48:58,980
interface yeah they have of openness yes

00:48:57,240 --> 00:49:01,470
but I can't speak for yeah I think a

00:48:58,980 --> 00:49:03,060
Chow is open as the years folks a few

00:49:01,470 --> 00:49:04,530
times I think they're like their

00:49:03,060 --> 00:49:06,660
different ways detained you take an

00:49:04,530 --> 00:49:11,000
integral with CSI one ways you can build

00:49:06,660 --> 00:49:13,890
a CSI plugging in their northbound API

00:49:11,000 --> 00:49:17,610
so that's one way so so basically to

00:49:13,890 --> 00:49:19,080
open STS as a meta CSI plug-in that they

00:49:17,610 --> 00:49:20,610
have their own interface their other

00:49:19,080 --> 00:49:23,250
storage vendor plugging into their

00:49:20,610 --> 00:49:25,020
interface and when container extrusion

00:49:23,250 --> 00:49:27,150
system wants to talk to you open STS

00:49:25,020 --> 00:49:28,860
it's through the CSI interface so that's

00:49:27,150 --> 00:49:30,810
one way the other way is I think I

00:49:28,860 --> 00:49:32,400
talked to open STS guys it's because

00:49:30,810 --> 00:49:34,050
they also want to handle the

00:49:32,400 --> 00:49:38,340
provisioning like like sending resources

00:49:34,050 --> 00:49:40,470
to missiles to like kind of render

00:49:38,340 --> 00:49:42,480
storage itself on to mates on the

00:49:40,470 --> 00:49:44,100
container oxidation system so another

00:49:42,480 --> 00:49:46,020
way to do that is they build a mazes

00:49:44,100 --> 00:49:47,730
framework that providing resource like

00:49:46,020 --> 00:49:49,020
the resource provider API dying

00:49:47,730 --> 00:49:51,390
mentioned earlier that they build a

00:49:49,020 --> 00:49:53,310
resource provider that talked to

00:49:51,390 --> 00:49:55,230
missiles to provide resources to

00:49:53,310 --> 00:49:57,960
missiles and they handle all this volume

00:49:55,230 --> 00:49:59,730
provisioning request and then send those

00:49:57,960 --> 00:50:01,650
requests to the corresponding backhand

00:49:59,730 --> 00:50:03,810
drivers in your past yes so that's one

00:50:01,650 --> 00:50:10,680
way so we chat about these two possible

00:50:03,810 --> 00:50:18,860
ways more questions we've got one right

00:50:10,680 --> 00:50:18,860
here okay two questions the first one is

00:50:20,100 --> 00:50:25,780
[Music]

00:50:26,990 --> 00:50:32,250
okay so the question is well CSI replace

00:50:30,390 --> 00:50:34,200
persistent money inside missiles the

00:50:32,250 --> 00:50:36,900
answer is no they're gonna be coexist

00:50:34,200 --> 00:50:38,580
these are two orthogonal concept just

00:50:36,900 --> 00:50:40,320
think about persistent learning it's

00:50:38,580 --> 00:50:42,840
just another layer because not all the

00:50:40,320 --> 00:50:44,670
volumes are persistent some waling can

00:50:42,840 --> 00:50:46,620
be ephemeral about what I mean by

00:50:44,670 --> 00:50:47,910
ephemeral here is like the life cycle of

00:50:46,620 --> 00:50:50,009
the voluntas not

00:50:47,910 --> 00:50:52,890
have to be persistent when container

00:50:50,009 --> 00:50:54,690
terminates that loan and get GC right

00:50:52,890 --> 00:50:57,539
away the reason for that for example I

00:50:54,690 --> 00:50:59,519
just want in SSD disk for a scratch

00:50:57,539 --> 00:51:01,890
space I don't care the persistence I

00:50:59,519 --> 00:51:03,630
just want to speed things like this so

00:51:01,890 --> 00:51:05,579
these two counts that I'm not not

00:51:03,630 --> 00:51:08,059
exactly the same they're orthogonal so

00:51:05,579 --> 00:51:11,849
you can't have a persistent money on a

00:51:08,059 --> 00:51:13,470
si si si si disk we all you can have a

00:51:11,849 --> 00:51:15,119
persist value on the traditional local

00:51:13,470 --> 00:51:16,920
disk because we need to be backwards

00:51:15,119 --> 00:51:18,960
compatible but eventually like everyone

00:51:16,920 --> 00:51:21,269
should move to si si so it's backed by a

00:51:18,960 --> 00:51:23,400
CSI plugging the si si plugging can be a

00:51:21,269 --> 00:51:25,470
dumb si si plug-in just like having

00:51:23,400 --> 00:51:27,269
directory under having subdirectories

00:51:25,470 --> 00:51:29,009
and there directly to pretend to be a

00:51:27,269 --> 00:51:31,259
volume things like this so that would be

00:51:29,009 --> 00:51:32,730
exact the same behavior as it is right

00:51:31,259 --> 00:51:34,349
now for the local person volume that we

00:51:32,730 --> 00:51:36,000
have right now so I think it's fair to

00:51:34,349 --> 00:51:38,160
say what you just said is for a while

00:51:36,000 --> 00:51:39,900
they'll both be available in parallel

00:51:38,160 --> 00:51:42,839
yeah I mean these are first of all these

00:51:39,900 --> 00:51:44,519
are two orthogonal concept because si si

00:51:42,839 --> 00:51:45,990
Vani is just really the volume and you

00:51:44,519 --> 00:51:47,670
can be persistent money and there can be

00:51:45,990 --> 00:51:49,710
an ephemeral volume which is on top of

00:51:47,670 --> 00:51:52,170
those primitives these are total like an

00:51:49,710 --> 00:51:54,480
orthogonal concept and then I'll say if

00:51:52,170 --> 00:51:57,059
you're using the existing persistent

00:51:54,480 --> 00:51:59,549
volume support in maze O's with Rex ray

00:51:57,059 --> 00:52:02,210
I can tell you that those volumes will

00:51:59,549 --> 00:52:04,619
be portable in other words if you

00:52:02,210 --> 00:52:06,779
Commission a Postgres server right now

00:52:04,619 --> 00:52:09,329
today in the current release and go

00:52:06,779 --> 00:52:11,549
through rex raid to get to it you won't

00:52:09,329 --> 00:52:14,250
have to blow that away or back it up and

00:52:11,549 --> 00:52:17,069
restore it you will be able to simply

00:52:14,250 --> 00:52:21,059
remount that volume using the R X ray

00:52:17,069 --> 00:52:23,730
CSI plugin so there's there's not an

00:52:21,059 --> 00:52:25,920
issue of rip and replace it's simply

00:52:23,730 --> 00:52:28,440
going to be unmount and remount it

00:52:25,920 --> 00:52:31,589
should take seconds really to flip over

00:52:28,440 --> 00:52:33,119
if you are a frame rather than then the

00:52:31,589 --> 00:52:34,980
API you're gonna create persistent

00:52:33,119 --> 00:52:37,529
volume will be exactly same for local

00:52:34,980 --> 00:52:39,420
local like the traditional like legacy

00:52:37,529 --> 00:52:40,680
volume and CSF ah it's the front

00:52:39,420 --> 00:52:42,750
frameworks perspective it will be

00:52:40,680 --> 00:52:44,339
exactly the same the only difference is

00:52:42,750 --> 00:52:46,500
the profile that we just mentioned that

00:52:44,339 --> 00:52:49,529
it provided interaction allowing to do

00:52:46,500 --> 00:52:51,779
make decisions based on some name that

00:52:49,529 --> 00:52:53,160
map's to a bunch of disk parameters so

00:52:51,779 --> 00:52:55,319
that would be the only difference there

00:52:53,160 --> 00:52:58,259
should be no difference from frameworks

00:52:55,319 --> 00:52:59,770
perspective all right so the second

00:52:58,259 --> 00:53:04,420
question related to the

00:52:59,770 --> 00:53:07,380
to the to the frame was so it's how is

00:53:04,420 --> 00:53:12,100
the future of videos Commons relate to

00:53:07,380 --> 00:53:15,580
CSI standard sorry can you repeat the

00:53:12,100 --> 00:53:21,420
question the future of the vos Commons

00:53:15,580 --> 00:53:21,420
relate to the CS I stand up it should be

00:53:25,420 --> 00:53:29,590
oh yeah so the question is whether this

00:53:27,340 --> 00:53:31,330
year's common is gonna support CSI the

00:53:29,590 --> 00:53:34,390
answer is yes it's on the roadmap it's

00:53:31,330 --> 00:53:39,250
definitely gonna be happening after DCs

00:53:34,390 --> 00:53:41,740
2011 it's on the roadmap okay we have

00:53:39,250 --> 00:53:49,380
two more minutes you can get more

00:53:41,740 --> 00:53:53,380
questions okay you mentioned VM as an

00:53:49,380 --> 00:53:56,500
implementation for local volumes can you

00:53:53,380 --> 00:53:59,230
tell us a bit about that there any plans

00:53:56,500 --> 00:54:02,890
do something in messes around at all oh

00:53:59,230 --> 00:54:03,880
no I'll be on it you know okay so the

00:54:02,890 --> 00:54:06,310
question is they will not take that

00:54:03,880 --> 00:54:09,370
question or you want me to it so it's

00:54:06,310 --> 00:54:12,130
it's the support plans are is that is

00:54:09,370 --> 00:54:15,820
there any plan to it's a concrete

00:54:12,130 --> 00:54:18,220
implementation around an AVM was it an

00:54:15,820 --> 00:54:19,990
implementation of CSI because you

00:54:18,220 --> 00:54:22,750
mentioned that in the in the talk soon

00:54:19,990 --> 00:54:27,030
yeah so we are building implementation

00:54:22,750 --> 00:54:31,030
internally at mesosphere to use LVM

00:54:27,030 --> 00:54:33,480
there are plans to build a reference

00:54:31,030 --> 00:54:37,180
implementation that will be open source

00:54:33,480 --> 00:54:38,590
it is on the roadmap I cannot promise a

00:54:37,180 --> 00:54:42,100
delivery date but it is something that

00:54:38,590 --> 00:54:43,540
we do want to open source yeah I mean

00:54:42,100 --> 00:54:45,070
building the LVM plugging should be

00:54:43,540 --> 00:54:46,720
pretty straight for I don't think it's

00:54:45,070 --> 00:54:49,450
too complicated just like you have a

00:54:46,720 --> 00:54:50,920
bunch of volume like physical volume and

00:54:49,450 --> 00:54:52,510
group into a volume group and then when

00:54:50,920 --> 00:54:53,770
we receive a request to provisional

00:54:52,510 --> 00:54:55,840
bonding just create a bond in Google

00:54:53,770 --> 00:54:57,490
using LVM command or like any library

00:54:55,840 --> 00:54:59,800
like let me LVM it should be pretty

00:54:57,490 --> 00:55:03,640
straight for I don't think any there's

00:54:59,800 --> 00:55:06,190
any secret source there but I mean your

00:55:03,640 --> 00:55:08,100
your feeling is that the user will have

00:55:06,190 --> 00:55:09,970
to prepare this volume all the

00:55:08,100 --> 00:55:11,410
implementation is supposed to take care

00:55:09,970 --> 00:55:14,470
about everything

00:55:11,410 --> 00:55:16,240
like yeah so user I mean if if you

00:55:14,470 --> 00:55:18,009
you're if you're talking about user like

00:55:16,240 --> 00:55:20,619
marathon user they should not be aware

00:55:18,009 --> 00:55:25,289
of whether it's from LVM or not so just

00:55:20,619 --> 00:55:28,509
pick the volume from profile I mean the

00:55:25,289 --> 00:55:31,029
usual means operator Oh

00:55:28,509 --> 00:55:33,730
operator do they need to be aware of LVM

00:55:31,029 --> 00:55:36,160
or not is that a question yeah at which

00:55:33,730 --> 00:55:38,559
point the the implementation issue goes

00:55:36,160 --> 00:55:39,190
to propel the well vm config that was my

00:55:38,559 --> 00:55:42,250
my point

00:55:39,190 --> 00:55:45,519
oh okay yeah so this may be notified so

00:55:42,250 --> 00:55:47,410
sorry about that but okay so I think if

00:55:45,519 --> 00:55:49,450
I interpret your question correctly are

00:55:47,410 --> 00:55:51,250
you saying that the LVM implementation

00:55:49,450 --> 00:55:54,009
should be open source and should we

00:55:51,250 --> 00:55:56,079
contribute back to the key so everyone

00:55:54,009 --> 00:55:59,049
can use that is that the intention of

00:55:56,079 --> 00:56:06,069
the question not that much which was

00:55:59,049 --> 00:56:08,109
your having your your feeling about what

00:56:06,069 --> 00:56:11,019
would be the current implementation in a

00:56:08,109 --> 00:56:14,920
VM it's maybe not defined so I would be

00:56:11,019 --> 00:56:17,380
okay with this and for the final not

00:56:14,920 --> 00:56:18,430
like do you have any plan concrete plan

00:56:17,380 --> 00:56:21,190
for that or not

00:56:18,430 --> 00:56:23,309
although LVM implementation so maybe I

00:56:21,190 --> 00:56:25,930
can help here so maybe the question is

00:56:23,309 --> 00:56:28,839
to what extent operator should be

00:56:25,930 --> 00:56:31,000
involved to take your implementation the

00:56:28,839 --> 00:56:32,500
LVM implementation and deploy it in the

00:56:31,000 --> 00:56:35,890
cluster is it a question

00:56:32,500 --> 00:56:39,220
so what work what expertise expected

00:56:35,890 --> 00:56:41,440
from the operator oh yeah I think as I

00:56:39,220 --> 00:56:43,539
mentioned okay sorry I misinterpreted

00:56:41,440 --> 00:56:45,039
your question so I think our goal as I

00:56:43,539 --> 00:56:48,099
mentioned you on the slides that go is

00:56:45,039 --> 00:56:50,829
the operator just need to hand over to

00:56:48,099 --> 00:56:52,839
meso say single container image name or

00:56:50,829 --> 00:56:55,119
a single binary for the CSI plugin which

00:56:52,839 --> 00:56:56,619
is the LVN plug-in and missus will just

00:56:55,119 --> 00:56:59,109
take care of the rest to deploy those

00:56:56,619 --> 00:57:01,299
plugins if it's not launched yet and

00:56:59,109 --> 00:57:01,990
talk to those plug-in to to communicate

00:57:01,299 --> 00:57:04,150
through

00:57:01,990 --> 00:57:05,859
CSI interface to provision morning so

00:57:04,150 --> 00:57:07,930
the only thing the operator needs to do

00:57:05,859 --> 00:57:10,059
is provide that container image name and

00:57:07,930 --> 00:57:11,230
most likely its version you can also

00:57:10,059 --> 00:57:13,059
upgrade the version if you want to

00:57:11,230 --> 00:57:15,220
redeploy the plug-in using a new version

00:57:13,059 --> 00:57:16,750
so that's the only thing that the opera

00:57:15,220 --> 00:57:18,700
needs to do our whole goal is trying to

00:57:16,750 --> 00:57:20,920
simplify the operator as well - not to

00:57:18,700 --> 00:57:22,240
worry about internal details just the

00:57:20,920 --> 00:57:24,600
container will be running on a maze of

00:57:22,240 --> 00:57:26,040
agent for those CSI plugins the maze

00:57:24,600 --> 00:57:29,670
you want to talk to those CSI plug-ins

00:57:26,040 --> 00:57:31,320
for Elvia at least for the LVN case for

00:57:29,670 --> 00:57:32,760
external cases little tricky because you

00:57:31,320 --> 00:57:33,900
had to run the controller plugging

00:57:32,760 --> 00:57:35,790
somewhere and then you per need to

00:57:33,900 --> 00:57:37,380
involve something like marathon or or a

00:57:35,790 --> 00:57:39,450
to schedule those container somewhere

00:57:37,380 --> 00:57:42,420
but at the very least you don't need to

00:57:39,450 --> 00:57:43,380
worry about building I mean like you

00:57:42,420 --> 00:57:45,780
don't need to worry about the

00:57:43,380 --> 00:57:47,610
implementation detail of the LVN plug-in

00:57:45,780 --> 00:57:50,070
just need to specify some continued

00:57:47,610 --> 00:57:51,870
image name is an app config that's it I

00:57:50,070 --> 00:57:53,610
think it's also interesting to mention

00:57:51,870 --> 00:57:56,970
from a framework perspective there's

00:57:53,610 --> 00:57:58,590
some new resource offer operations that

00:57:56,970 --> 00:58:01,260
are going to be available within may

00:57:58,590 --> 00:58:05,850
sews and those resource offer operations

00:58:01,260 --> 00:58:08,880
will map directly somebody indirectly to

00:58:05,850 --> 00:58:09,900
CSI plug-in operations so that a frame

00:58:08,880 --> 00:58:12,690
that's actually possible to write a

00:58:09,900 --> 00:58:14,040
framework that can interact with plugins

00:58:12,690 --> 00:58:16,560
kind of through meso sin the author

00:58:14,040 --> 00:58:18,060
operation API yeah so I think yeah

00:58:16,560 --> 00:58:20,520
that's a good point so one thing you can

00:58:18,060 --> 00:58:22,890
do is LVM I and like which we cannot do

00:58:20,520 --> 00:58:24,870
before is you can just model a giant a

00:58:22,890 --> 00:58:26,970
volume group as a giant pool of disk

00:58:24,870 --> 00:58:29,400
space and then the framework can make a

00:58:26,970 --> 00:58:31,470
decision to carve a volume from Devonian

00:58:29,400 --> 00:58:33,450
group so maybe some frame and say hey

00:58:31,470 --> 00:58:35,340
I'm appending I want to control the size

00:58:33,450 --> 00:58:38,790
of each bone I don't want the operator

00:58:35,340 --> 00:58:40,230
to the edge funny so right with the CSL

00:58:38,790 --> 00:58:41,820
where you can do that basically can say

00:58:40,230 --> 00:58:44,460
hey these are a storage space it's like

00:58:41,820 --> 00:58:46,470
a thousand gig like a terabyte and I

00:58:44,460 --> 00:58:48,240
want I only want to ten gig volume just

00:58:46,470 --> 00:58:50,430
create a 10 gig morning for me and then

00:58:48,240 --> 00:58:52,410
once you issue that operation to maysa

00:58:50,430 --> 00:58:54,300
you will receive a feedback later saying

00:58:52,410 --> 00:58:56,430
hey you seem an offer like that was a 10

00:58:54,300 --> 00:58:58,200
gig disk in your offer stream then you

00:58:56,430 --> 00:59:00,630
can start to using this morning so that

00:58:58,200 --> 00:59:03,780
would be also like impossible with the

00:59:00,630 --> 00:59:05,220
cs network the storage worth yeah so it

00:59:03,780 --> 00:59:06,960
looks like fourth grade is very easy to

00:59:05,220 --> 00:59:08,610
take the binary put into your cluster

00:59:06,960 --> 00:59:11,130
and wait fourth page in the middle of

00:59:08,610 --> 00:59:14,450
the night when the snake is all your

00:59:11,130 --> 00:59:17,400
data any other questions

00:59:14,450 --> 00:59:20,370
there is one more we can probably take

00:59:17,400 --> 00:59:22,650
the last one yeah I mean if you have a

00:59:20,370 --> 00:59:24,840
more question I'm here and these guys

00:59:22,650 --> 00:59:27,000
are here too so we can yeah we're at the

00:59:24,840 --> 00:59:28,980
code booth just across the hall from the

00:59:27,000 --> 00:59:30,810
door here I think that there's a Town

00:59:28,980 --> 00:59:32,580
Hall tonight addressing school yeah so

00:59:30,810 --> 00:59:35,070
there's a there's a Town Hall tonight

00:59:32,580 --> 00:59:36,870
we'll be there so they're like for Town

00:59:35,070 --> 00:59:37,780
Hall topics warm topics and prachi

00:59:36,870 --> 00:59:40,690
meadows

00:59:37,780 --> 00:59:43,570
so I'll be there you guys are gonna be

00:59:40,690 --> 00:59:45,010
obvious so and if you have more

00:59:43,570 --> 00:59:47,170
questions you can join the townhall and

00:59:45,010 --> 00:59:48,460
that we can chat over the town hall the

00:59:47,170 --> 00:59:50,590
whole purpose of Town Hall is trying to

00:59:48,460 --> 00:59:51,880
give you guys opportune imeem they're

00:59:50,590 --> 00:59:54,160
like multiple purpose one purpose I

00:59:51,880 --> 00:59:55,930
think is like people get together like

00:59:54,160 --> 00:59:56,890
we always chant over slack and we don't

00:59:55,930 --> 00:59:58,720
know each other this is a good

00:59:56,890 --> 01:00:00,550
opportunity for people to know each

00:59:58,720 --> 01:00:03,610
other in person or like they over slack

01:00:00,550 --> 01:00:06,580
so it's a good opportunity if he wants

01:00:03,610 --> 01:00:08,920
to join yeah so can I ask last question

01:00:06,580 --> 01:00:12,190
yes first of all thanks a lot - very

01:00:08,920 --> 01:00:12,850
nice initiative here and on one of the

01:00:12,190 --> 01:00:14,920
slides

01:00:12,850 --> 01:00:20,230
it was depicted that Meadows legend

01:00:14,920 --> 01:00:21,940
talks or HTTP and T RPC so or HTTP

01:00:20,230 --> 01:00:26,020
resource unmediated or like storage live

01:00:21,940 --> 01:00:29,230
driver to storage services and directly

01:00:26,020 --> 01:00:31,030
through Jer Jer PC in another in another

01:00:29,230 --> 01:00:33,460
case so the question is what is behind

01:00:31,030 --> 01:00:36,190
this architecture and why we need HTTP

01:00:33,460 --> 01:00:39,010
when we already have Jer pcs place what

01:00:36,190 --> 01:00:41,350
sorry the question is what why do we

01:00:39,010 --> 01:00:44,620
still need HTTP api when we already have

01:00:41,350 --> 01:00:47,290
your PC oh yeah so that's a good

01:00:44,620 --> 01:00:49,900
question so uh so gr PC has two sides

01:00:47,290 --> 01:00:51,940
the client side and the server side and

01:00:49,900 --> 01:00:53,770
I think we all we build the client

01:00:51,940 --> 01:00:56,260
science and missiles already on the

01:00:53,770 --> 01:00:59,980
server side is slightly tricky because

01:00:56,260 --> 01:01:02,470
the way um so yeah I mean I think mesos

01:00:59,980 --> 01:01:05,110
has this go trying to move to G RPC as a

01:01:02,470 --> 01:01:06,460
API so once we get there we just switch

01:01:05,110 --> 01:01:08,440
that I think it's very easy to switch

01:01:06,460 --> 01:01:10,450
the GRP see once we get there so the

01:01:08,440 --> 01:01:12,790
goal I mean for API maybe not when you

01:01:10,450 --> 01:01:14,860
want v1 maybe - it's gonna be general PC

01:01:12,790 --> 01:01:16,900
but I can I'll say that for the whole

01:01:14,860 --> 01:01:18,850
project or I think if you you're

01:01:16,900 --> 01:01:20,500
interested go to the town hall tonight I

01:01:18,850 --> 01:01:22,210
think we know we'll be there he's the

01:01:20,500 --> 01:01:23,800
one that kind of maintain the API side

01:01:22,210 --> 01:01:27,010
and we'd ever have some conversation to

01:01:23,800 --> 01:01:29,260
switch to G RPC for our API you will it

01:01:27,010 --> 01:01:31,720
will massively simplify the client of

01:01:29,260 --> 01:01:34,450
mezzos like the scheduler right you can

01:01:31,720 --> 01:01:35,920
use any language that grcc support to

01:01:34,450 --> 01:01:38,440
write a scheduler which is a good wing

01:01:35,920 --> 01:01:40,840
for us I'll vote for - RPC for all the

01:01:38,440 --> 01:01:44,100
api's and once we get there it will be G

01:01:40,840 --> 01:01:46,750
RPC thanks Lynn

01:01:44,100 --> 01:01:48,550
okay thanks once again we'll be in our

01:01:46,750 --> 01:01:50,470
booths and at the Town Hall

01:01:48,550 --> 01:01:50,910
so if we missed your question or you

01:01:50,470 --> 01:01:54,980
wanted to

01:01:50,910 --> 01:01:58,700
keep it private find us there right okay

01:01:54,980 --> 01:01:58,700

YouTube URL: https://www.youtube.com/watch?v=gsZEGBOcQ5Q


