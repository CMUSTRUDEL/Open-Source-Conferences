Title: Doing Real DevOps with DC OS - Julien Stroheker, Microsoft
Publication date: 2017-10-27
Playlist: MesosCon Europe 2017
Description: 
	Doing Real DevOps with DC/OS - Julien Stroheker, Microsoft

This presentation will be mainly demo, no slides. We will go through a real case scenario application, hosted on Azure Container Services (ACS) using DC/OS and Docker. We will go through the CI and CD first and then show how you can do smooth deployments on your cluster using Jenkins without any interruptions for the users by doing A/B and Canary testing. We will share our experience using DCOS / Azure and how the framework manage the deployment behind the scene.

About Julien Stroheker
Hi! I am Julien Stroheker and I am working at Microsoft as a Software Developer Engineer on DevOps. I like talking and sharing about how Dev and Ops can be better together and work as a strong team. From a Ops background profile, I am trying to become a better developer to have a thorough understanding about this DevOps thing.
Captions: 
	00:00:00,030 --> 00:00:06,899
all right I think we can start good

00:00:06,210 --> 00:00:10,830
afternoon

00:00:06,899 --> 00:00:14,480
I hope you hey my name is Jen striker

00:00:10,830 --> 00:00:16,949
working on Microsoft's I'm gonna try to

00:00:14,480 --> 00:00:19,830
so I hope you dare for this session

00:00:16,949 --> 00:00:23,460
doing DevOps with DCOs

00:00:19,830 --> 00:00:25,859
I'm gonna try to share for 45 minutes

00:00:23,460 --> 00:00:29,369
my journey around dev up so I used to

00:00:25,859 --> 00:00:32,430
work in the dev ops team inside

00:00:29,369 --> 00:00:35,309
Microsoft for three years now I mean I

00:00:32,430 --> 00:00:37,829
still work in this team doing a lot of

00:00:35,309 --> 00:00:40,170
open source technology which is great

00:00:37,829 --> 00:00:43,770
Microsoft pay me to do Microsoft to do

00:00:40,170 --> 00:00:47,010
open source technologies have a lot of

00:00:43,770 --> 00:00:50,129
fun and I try to stay focused on diverse

00:00:47,010 --> 00:00:52,649
parties and when I'm seeing there was

00:00:50,129 --> 00:00:55,020
practices with open source yes we have

00:00:52,649 --> 00:00:59,010
like Microsoft products doing helping

00:00:55,020 --> 00:01:02,879
people doing DevOps maybe you how about

00:00:59,010 --> 00:01:04,500
TFS VSDs and so on but since some really

00:01:02,879 --> 00:01:07,650
focus on open source technology I'm

00:01:04,500 --> 00:01:11,909
playing and having a lot of fun with the

00:01:07,650 --> 00:01:13,470
oppisite Jenkins for example and other

00:01:11,909 --> 00:01:16,380
open source technology which is very

00:01:13,470 --> 00:01:19,080
great so I'm going to try to share few

00:01:16,380 --> 00:01:21,360
practices the idea more challenge doing

00:01:19,080 --> 00:01:24,680
this for the 5 minutes I'm going to try

00:01:21,360 --> 00:01:26,909
to do just demos and we're going to try

00:01:24,680 --> 00:01:29,490
to do and implement the best practices

00:01:26,909 --> 00:01:34,680
on a little appliques application java

00:01:29,490 --> 00:01:36,479
application die i'm using a lot so i'm

00:01:34,680 --> 00:01:38,610
gonna explain that actually so just the

00:01:36,479 --> 00:01:42,720
idea of that it's 45 minutes doing only

00:01:38,610 --> 00:01:45,119
demos and we only code so let's cross

00:01:42,720 --> 00:01:48,780
the finger let's let's see if it's gonna

00:01:45,119 --> 00:01:50,939
work so quick agenda about that so I

00:01:48,780 --> 00:01:53,070
don't know if your about ICS norway's

00:01:50,939 --> 00:01:55,320
guys I'm not here yes working for

00:01:53,070 --> 00:01:59,579
Microsoft and nothing to sell right I'm

00:01:55,320 --> 00:02:01,619
doing only technical stuff mmm I think I

00:01:59,579 --> 00:02:04,049
only have one marketing slide working

00:02:01,619 --> 00:02:06,750
from Microsoft so I guess it's kind of

00:02:04,049 --> 00:02:08,910
monetary no kidding I'm just going to

00:02:06,750 --> 00:02:11,790
explain SES maybe you hope others also

00:02:08,910 --> 00:02:13,990
container services is just a quick easy

00:02:11,790 --> 00:02:17,850
way to deploy like

00:02:13,990 --> 00:02:21,490
DCOs or communities or any container

00:02:17,850 --> 00:02:23,380
Orchestrator on Azure so I'm just going

00:02:21,490 --> 00:02:25,270
to explain that for people maybe never

00:02:23,380 --> 00:02:28,000
use it and then we're going to go deep

00:02:25,270 --> 00:02:29,740
on CI CD and bunch of diverse practices

00:02:28,000 --> 00:02:32,470
depends the time that we have I'm going

00:02:29,740 --> 00:02:35,710
to try to add more and more practices on

00:02:32,470 --> 00:02:37,330
top of that make sense all right

00:02:35,710 --> 00:02:40,810
by the way as you can erode I'm French

00:02:37,330 --> 00:02:43,480
so sometimes people cannot understand me

00:02:40,810 --> 00:02:45,280
don't worry just raise your hand and say

00:02:43,480 --> 00:02:48,010
can you repeat that or maybe if you have

00:02:45,280 --> 00:02:50,800
question also noticed a - - to ask

00:02:48,010 --> 00:02:53,980
question so yeah that's the only

00:02:50,800 --> 00:02:57,130
marketing slide I have ACS on Azure as

00:02:53,980 --> 00:02:59,080
your container services this is the

00:02:57,130 --> 00:03:00,850
thing the only preparation that I made

00:02:59,080 --> 00:03:03,720
before the presentation is just to

00:03:00,850 --> 00:03:06,220
deploy cluster just a few clicks we

00:03:03,720 --> 00:03:09,450
Microsoft so we like to clicks and we

00:03:06,220 --> 00:03:13,720
like interface using the portal right

00:03:09,450 --> 00:03:15,010
and I deploy with the dcs cluster but

00:03:13,720 --> 00:03:17,620
you also have the ability to deploy

00:03:15,010 --> 00:03:19,450
swarm kubernetes we just announce the

00:03:17,620 --> 00:03:21,610
new services for people using Microsoft

00:03:19,450 --> 00:03:25,570
called AES which is a communities manage

00:03:21,610 --> 00:03:27,700
on our row really exciting and but

00:03:25,570 --> 00:03:29,020
that's not the focus today that just the

00:03:27,700 --> 00:03:31,330
thing I'm going to show you right at

00:03:29,020 --> 00:03:33,940
this DS piece on the power how I did

00:03:31,330 --> 00:03:35,860
that the application I'm going to use

00:03:33,940 --> 00:03:38,380
today it's an application called party

00:03:35,860 --> 00:03:40,860
meter I'm happy if you did you read this

00:03:38,380 --> 00:03:43,300
book who whizzed it

00:03:40,860 --> 00:03:45,340
okay I really really encourage you

00:03:43,300 --> 00:03:48,070
people to read it if you want to install

00:03:45,340 --> 00:03:50,530
about the best practices and the cool

00:03:48,070 --> 00:03:52,690
thing about that one is not another

00:03:50,530 --> 00:03:55,450
self-growing book it's a novel so it's

00:03:52,690 --> 00:03:57,370
pure fiction but it's it's very fun

00:03:55,450 --> 00:03:58,690
because I have all the cliche inside in

00:03:57,370 --> 00:04:01,030
terms of the worst practices you know

00:03:58,690 --> 00:04:04,030
the dev guys confronting all the time

00:04:01,030 --> 00:04:06,550
the ops guy and so on and so on does

00:04:04,030 --> 00:04:08,230
very great and from that we developed

00:04:06,550 --> 00:04:08,769
this application called party limited

00:04:08,230 --> 00:04:11,980
mfp

00:04:08,769 --> 00:04:14,410
referencing to the book this application

00:04:11,980 --> 00:04:16,000
so it's public it's only up using open

00:04:14,410 --> 00:04:19,419
source technology so it's java-based

00:04:16,000 --> 00:04:22,450
application using running tomcat using

00:04:19,419 --> 00:04:24,400
MongoDB and so on right so if you go

00:04:22,450 --> 00:04:27,040
there on the link on the repo Microsoft

00:04:24,400 --> 00:04:31,330
repo it's kind of a model

00:04:27,040 --> 00:04:35,020
Manolis monolithic application and what

00:04:31,330 --> 00:04:36,130
I try and when I'm while I try to to do

00:04:35,020 --> 00:04:38,490
here when I'm going to try to do

00:04:36,130 --> 00:04:41,350
actually is to split it in kind of

00:04:38,490 --> 00:04:43,420
microservices because it's trendy here

00:04:41,350 --> 00:04:46,840
so we're gonna try to do micro services

00:04:43,420 --> 00:04:50,670
from that and then deploy on DCOs and do

00:04:46,840 --> 00:04:50,670
their worst practices or run that right

00:04:51,150 --> 00:04:57,130
so this is what I said we're gonna try

00:04:54,580 --> 00:04:59,440
to do develops DevOps everywhere right

00:04:57,130 --> 00:05:01,720
during this application so obviously a

00:04:59,440 --> 00:05:04,780
CI which is like pretty much the base

00:05:01,720 --> 00:05:06,940
about the boss practice is continuously

00:05:04,780 --> 00:05:08,670
integrating new feature and make sure

00:05:06,940 --> 00:05:12,910
that it's building works all the time

00:05:08,670 --> 00:05:15,220
then I put that here another thing on a

00:05:12,910 --> 00:05:16,810
drug called AC air as a container

00:05:15,220 --> 00:05:19,690
registry I don't know if you heard about

00:05:16,810 --> 00:05:22,540
that one it was basically the ability to

00:05:19,690 --> 00:05:25,600
have a private registry for the can

00:05:22,540 --> 00:05:27,430
image pass base right on Azure it's very

00:05:25,600 --> 00:05:30,610
simple again a few clicks and boom you

00:05:27,430 --> 00:05:32,110
have you have it what I'm going to try

00:05:30,610 --> 00:05:33,700
to do at the beginning just use github

00:05:32,110 --> 00:05:34,870
and then we have time we can implement

00:05:33,700 --> 00:05:35,560
that piece it's very very

00:05:34,870 --> 00:05:38,830
straightforward

00:05:35,560 --> 00:05:41,110
you see that then we gonna do CD so try

00:05:38,830 --> 00:05:42,100
to deploy continuously on a cluster

00:05:41,110 --> 00:05:44,880
using vamp

00:05:42,100 --> 00:05:47,320
did you already her but that one vamp

00:05:44,880 --> 00:05:49,540
okay it's pretty awesome actually

00:05:47,320 --> 00:05:51,460
I discovered that that one from the

00:05:49,540 --> 00:05:52,810
universe so I just click sometimes

00:05:51,460 --> 00:05:55,030
randomly I'm going to need us and

00:05:52,810 --> 00:05:58,570
catalog click deploy see what's going on

00:05:55,030 --> 00:05:59,710
so that was the the one I discover see I

00:05:58,570 --> 00:06:01,990
think it's really awesome especially

00:05:59,710 --> 00:06:04,660
when you start with DCs and measures in

00:06:01,990 --> 00:06:06,400
terms of networking and and so on

00:06:04,660 --> 00:06:08,320
especially for the CD piece when you

00:06:06,400 --> 00:06:10,300
want to do canary testing a/b testing

00:06:08,320 --> 00:06:11,890
and so on that's really very core so

00:06:10,300 --> 00:06:14,230
this is what I'm gonna try and since we

00:06:11,890 --> 00:06:16,060
only have 45 minutes it's going to help

00:06:14,230 --> 00:06:19,120
me that all you're gonna help me a lot

00:06:16,060 --> 00:06:23,020
to to achieve that and if you have time

00:06:19,120 --> 00:06:26,830
yeah telemetry application inside and so

00:06:23,020 --> 00:06:29,410
on and so on so warning it will be a

00:06:26,830 --> 00:06:31,000
live demo I mean huge fan above the

00:06:29,410 --> 00:06:37,020
office I don't know if you know this

00:06:31,000 --> 00:06:40,190
theory so let's go let's start to a fun

00:06:37,020 --> 00:06:40,190
[Music]

00:06:42,010 --> 00:06:49,580
all right so this is a sure if you're

00:06:48,110 --> 00:06:53,650
the first time that to see Asher Asher

00:06:49,580 --> 00:06:56,930
guys guys a sure that the the the polar

00:06:53,650 --> 00:06:59,120
the cool thing with that again I'm not

00:06:56,930 --> 00:07:00,560
going to sell a sure it's basically and

00:06:59,120 --> 00:07:02,660
I'm going to be honest it's the same

00:07:00,560 --> 00:07:05,120
thing that we're providing the same

00:07:02,660 --> 00:07:08,000
features that you can have on a dress or

00:07:05,120 --> 00:07:10,220
Google cloud right with some extra for

00:07:08,000 --> 00:07:12,170
sure we have differentiation which mean

00:07:10,220 --> 00:07:13,490
with that everything that you can do

00:07:12,170 --> 00:07:22,580
from the polar you can do through the

00:07:13,490 --> 00:07:25,910
CLI and so on yeah that's a good

00:07:22,580 --> 00:07:28,070
question so the question is the services

00:07:25,910 --> 00:07:30,890
that I'm going to show you right now are

00:07:28,070 --> 00:07:32,420
there everything on all zones included

00:07:30,890 --> 00:07:35,030
Germany Germany is a special one because

00:07:32,420 --> 00:07:37,940
Germany we did have a pretty nice story

00:07:35,030 --> 00:07:40,190
about that that one is kind of silo for

00:07:37,940 --> 00:07:41,930
some legal purposes and so on

00:07:40,190 --> 00:07:44,090
I'm not sure about that one I can I can

00:07:41,930 --> 00:07:47,390
shake later maybe Rob you know if it's

00:07:44,090 --> 00:07:49,550
ever okay I'm not sure that ACS is

00:07:47,390 --> 00:07:51,620
available because ACS the services are

00:07:49,550 --> 00:07:54,500
introduces at the beginning basically

00:07:51,620 --> 00:07:57,440
SES is just a bunch of vmb anderson so i

00:07:54,500 --> 00:08:00,080
would say yes because it just VMS with

00:07:57,440 --> 00:08:01,730
best practices and station of the

00:08:00,080 --> 00:08:03,470
frameworks or dishes on that case but

00:08:01,730 --> 00:08:06,560
let me confirm that maybe after the

00:08:03,470 --> 00:08:09,410
conference so yeah that's the poll all

00:08:06,560 --> 00:08:12,140
well what i did like i said i already

00:08:09,410 --> 00:08:14,120
done that piece because it can take like

00:08:12,140 --> 00:08:17,450
between 10 and 15 minutes to deploy to

00:08:14,120 --> 00:08:20,690
the services i do search for acs right

00:08:17,450 --> 00:08:24,290
Astro continual services and I click on

00:08:20,690 --> 00:08:24,980
that guy here create and then it's going

00:08:24,290 --> 00:08:26,930
to ask me

00:08:24,980 --> 00:08:29,540
remember Microsoft we like to do up some

00:08:26,930 --> 00:08:32,000
interface click and so on here is going

00:08:29,540 --> 00:08:34,820
to ask me the name how many nodes I want

00:08:32,000 --> 00:08:36,350
oh many masters the size of the VMS are

00:08:34,820 --> 00:08:38,120
one when you CPUs and so on it's really

00:08:36,350 --> 00:08:40,040
really straightforward like let's I

00:08:38,120 --> 00:08:42,680
would say 10 question and then is going

00:08:40,040 --> 00:08:44,630
to deploy everything right so I already

00:08:42,680 --> 00:08:47,630
did that and also add a step you asked

00:08:44,630 --> 00:08:50,630
me for the public key right SSH key that

00:08:47,630 --> 00:08:54,590
I want to deploy my on my cluster

00:08:50,630 --> 00:08:57,170
after that when it's done this is what I

00:08:54,590 --> 00:08:58,760
have so we're not going to spend a lot

00:08:57,170 --> 00:09:00,980
of time on that like I said so just a

00:08:58,760 --> 00:09:03,160
bunch of hostesses on Azure of VM

00:09:00,980 --> 00:09:06,170
storage networking and so on and so on

00:09:03,160 --> 00:09:10,720
and when it's done actually the way that

00:09:06,170 --> 00:09:13,850
is work on Azure you just have to do a

00:09:10,720 --> 00:09:16,400
SSH channel on the master right so I'm

00:09:13,850 --> 00:09:20,030
initially initiating SSH connection on

00:09:16,400 --> 00:09:26,240
my master using my private key and doing

00:09:20,030 --> 00:09:30,830
a forwarding port on port 80 and when

00:09:26,240 --> 00:09:32,930
it's done I can reach the portal the

00:09:30,830 --> 00:09:35,990
gcos portal from the local O's because

00:09:32,930 --> 00:09:38,210
I'm forwarding for ad or my master or my

00:09:35,990 --> 00:09:40,580
local host make sense so it's very

00:09:38,210 --> 00:09:42,890
straightforward like I said it's a basic

00:09:40,580 --> 00:09:45,920
basic cluster I'm running five nodes on

00:09:42,890 --> 00:09:49,460
that one here five node and one five

00:09:45,920 --> 00:09:53,980
private node and one on a public region

00:09:49,460 --> 00:09:58,280
so our six node totally one master and

00:09:53,980 --> 00:10:00,050
what we going to do first just to make

00:09:58,280 --> 00:10:01,610
sure that everything works and because

00:10:00,050 --> 00:10:04,520
we're going to use it we're going to

00:10:01,610 --> 00:10:09,680
deploy Jenkins right so I'm going to use

00:10:04,520 --> 00:10:11,990
Jenkins as is no configuration don't

00:10:09,680 --> 00:10:14,540
need persistent storage and so on just

00:10:11,990 --> 00:10:16,370
for the demos right so we're gonna wait

00:10:14,540 --> 00:10:17,920
that that piece to deploy in the

00:10:16,370 --> 00:10:21,050
meantime I'm going to show you the code

00:10:17,920 --> 00:10:23,150
that I'm gonna use so the link that I

00:10:21,050 --> 00:10:25,430
pasted on the on the slide the beginning

00:10:23,150 --> 00:10:27,410
is the repo by itself with all the code

00:10:25,430 --> 00:10:30,140
like the kind of the monolithic

00:10:27,410 --> 00:10:32,960
application by itself what I also did

00:10:30,140 --> 00:10:35,120
before died before that story I split it

00:10:32,960 --> 00:10:36,560
in two services like I said we're gonna

00:10:35,120 --> 00:10:39,320
try to do micro services we're gonna

00:10:36,560 --> 00:10:41,690
fake that just two services one for the

00:10:39,320 --> 00:10:43,910
wavefront I'm running Tomcat and just my

00:10:41,690 --> 00:10:45,860
is not on you la but it's a whole

00:10:43,910 --> 00:10:48,560
framework JavaScript framework you gotta

00:10:45,860 --> 00:10:50,720
see my UI skills really beautiful your

00:10:48,560 --> 00:10:52,490
skills but it's just a way to underlie

00:10:50,720 --> 00:10:55,490
some JavaScript right between some

00:10:52,490 --> 00:10:57,620
screen and then the API for the IP I'm

00:10:55,490 --> 00:11:00,320
using spring from Java

00:10:57,620 --> 00:11:02,570
that's my framework so I created two

00:11:00,320 --> 00:11:03,910
different repo right the client one and

00:11:02,570 --> 00:11:05,800
the other one

00:11:03,910 --> 00:11:08,860
I also have the database that one

00:11:05,800 --> 00:11:11,620
is just a basic repo basically it's just

00:11:08,860 --> 00:11:13,360
docker file right and I'm a drinking

00:11:11,620 --> 00:11:15,550
data on that one feeding like mocking

00:11:13,360 --> 00:11:18,100
the lobbies when you run the docker file

00:11:15,550 --> 00:11:19,750
is gonna inject like fake that around

00:11:18,100 --> 00:11:22,480
that just to have that out for the demo

00:11:19,750 --> 00:11:24,970
right but for that one the which

00:11:22,480 --> 00:11:27,400
is not the really goal of this torque it

00:11:24,970 --> 00:11:29,170
just lets the state full piece I'm going

00:11:27,400 --> 00:11:31,180
to still run that on DCOs right but

00:11:29,170 --> 00:11:32,710
maybe there is more better solution

00:11:31,180 --> 00:11:34,870
thermal storage and maybe we're going to

00:11:32,710 --> 00:11:36,910
use a pass solution and so on but just

00:11:34,870 --> 00:11:39,430
for the demo again it's just a basic

00:11:36,910 --> 00:11:40,960
thing we're gonna pretend that it's run

00:11:39,430 --> 00:11:42,370
and that's not the focus right now we're

00:11:40,960 --> 00:11:47,860
just going to focus on the client and

00:11:42,370 --> 00:11:49,630
the API keys make sense so does the

00:11:47,860 --> 00:11:53,010
client repository I'm going to explain

00:11:49,630 --> 00:11:59,200
that after that and that's the other one

00:11:53,010 --> 00:12:04,620
so back to the cluster here still

00:11:59,200 --> 00:12:04,620
deploying which is we don't like that

00:12:05,850 --> 00:12:11,649
training okay so I'm a junkie sandstones

00:12:10,149 --> 00:12:13,959
this is something that I like from DCOs

00:12:11,649 --> 00:12:16,119
I'm using like a lot of kubernetes and

00:12:13,959 --> 00:12:18,579
also swamp which is I'm really focused

00:12:16,119 --> 00:12:20,619
on containers containers technologies

00:12:18,579 --> 00:12:23,139
and while I wish this us it's really

00:12:20,619 --> 00:12:25,420
really simple to start right just push a

00:12:23,139 --> 00:12:27,819
button and at least you can do proof of

00:12:25,420 --> 00:12:29,860
concept and it's very easy to start

00:12:27,819 --> 00:12:32,619
right so we have a basic drinking

00:12:29,860 --> 00:12:35,079
sentence here like like you saw that no

00:12:32,619 --> 00:12:37,629
thing fancy no custom configuration on

00:12:35,079 --> 00:12:38,170
that right like I said we're going to

00:12:37,629 --> 00:12:41,220
use vamp

00:12:38,170 --> 00:12:47,949
so for vamp if you go on the official

00:12:41,220 --> 00:12:51,360
documentation vamp dot IO and I think

00:12:47,949 --> 00:12:57,549
it's not not on supports on developers

00:12:51,360 --> 00:13:01,119
documentation installation and go on

00:12:57,549 --> 00:13:03,790
DCOs here so it's going to just explain

00:13:01,119 --> 00:13:05,799
how you can install them or if you want

00:13:03,790 --> 00:13:09,759
they also have a package the universe

00:13:05,799 --> 00:13:10,619
the universe package here if you do so

00:13:09,759 --> 00:13:13,420
for them

00:13:10,619 --> 00:13:18,220
you can also vamp and solve them from

00:13:13,420 --> 00:13:20,079
there I prefer to and start from the

00:13:18,220 --> 00:13:22,480
official documentation so but basically

00:13:20,079 --> 00:13:25,240
what the documentation said you have to

00:13:22,480 --> 00:13:28,329
run elasticsearch so I just give you in

00:13:25,240 --> 00:13:31,240
the marathon JSON file here and then you

00:13:28,329 --> 00:13:36,939
can install them from another JSON file

00:13:31,240 --> 00:13:40,149
so what I did already prepare that so

00:13:36,939 --> 00:13:41,860
that's a repo with all my script or my

00:13:40,149 --> 00:13:43,720
what I'm going to do during this demo so

00:13:41,860 --> 00:13:46,149
if people want to oppose that at home

00:13:43,720 --> 00:13:47,559
your mother welcome to to gun on this

00:13:46,149 --> 00:13:50,860
repo I'm gonna shatter link after that

00:13:47,559 --> 00:13:52,480
so inside the one folder I've just copy

00:13:50,860 --> 00:13:53,980
and paste from the official

00:13:52,480 --> 00:13:56,230
documentation the elasticsearch piece

00:13:53,980 --> 00:14:01,240
and the vamp is right so what I'm gonna

00:13:56,230 --> 00:14:06,160
do from the CLI here I have the DCOs CLI

00:14:01,240 --> 00:14:08,110
install I think it should be already set

00:14:06,160 --> 00:14:11,169
up like education and so on and so on

00:14:08,110 --> 00:14:13,439
what I'm gonna do I'm gonna be oops

00:14:11,169 --> 00:14:16,689
sorry

00:14:13,439 --> 00:14:17,510
I'm gonna install the elastic search

00:14:16,689 --> 00:14:26,000
piece

00:14:17,510 --> 00:14:33,260
I change the folder whoops

00:14:26,000 --> 00:14:34,940
add there's a scan vamp okay

00:14:33,260 --> 00:14:37,700
I'm gonna push that so I create the

00:14:34,940 --> 00:14:40,670
deployment so just to quickly make sure

00:14:37,700 --> 00:14:41,930
we have the services deploying and what

00:14:40,670 --> 00:14:45,230
are we gonna do we're gonna do the same

00:14:41,930 --> 00:14:49,100
thing we're gonna wait that one to run

00:14:45,230 --> 00:14:53,930
but we're gonna prepare here Oh actually

00:14:49,100 --> 00:14:55,250
also the thing on vampy told you that do

00:14:53,930 --> 00:14:57,200
you have the ability to Staller

00:14:55,250 --> 00:14:59,630
artifacts on vamps so if you want to

00:14:57,200 --> 00:15:01,850
have the persistence State for the

00:14:59,630 --> 00:15:04,220
artifacts you have to use my sequel

00:15:01,850 --> 00:15:06,370
database or I think the spotting few of

00:15:04,220 --> 00:15:09,530
them like my sequel Paz gray and

00:15:06,370 --> 00:15:12,320
Microsoft SQL Server what I'm gonna do

00:15:09,530 --> 00:15:13,910
also is supposed to work without it but

00:15:12,320 --> 00:15:16,330
I'm not going to take a chance like I

00:15:13,910 --> 00:15:18,170
said it's a live demo so I prefer to

00:15:16,330 --> 00:15:20,780
prepare everything I'm gonna also

00:15:18,170 --> 00:15:24,730
install my sequel and let's be crazy use

00:15:20,780 --> 00:15:24,730
the default one from the universe again

00:15:26,230 --> 00:15:36,340
so that one's supposed to run okay so

00:15:30,380 --> 00:15:36,340
it's running here not one is staging

00:15:40,330 --> 00:15:47,500
all right so we're gonna let him deploy

00:15:43,540 --> 00:15:50,140
actually okay 20 I want to start the

00:15:47,500 --> 00:15:53,590
deployment van or so and I'm going to

00:15:50,140 --> 00:15:54,580
explain also the code the pipeline the

00:15:53,590 --> 00:15:57,820
Jenkins pipeline

00:15:54,580 --> 00:15:59,560
I'm going to use this is also die I also

00:15:57,820 --> 00:16:02,350
something that I prepared before the

00:15:59,560 --> 00:16:04,200
Jenkins file you guys can take a while

00:16:02,350 --> 00:16:06,520
but I'm gonna explain it

00:16:04,200 --> 00:16:09,730
come on guys I think it's raining right

00:16:06,520 --> 00:16:14,590
I don't know why I say it's deploying

00:16:09,730 --> 00:16:17,620
its rain just to have the I think the

00:16:14,590 --> 00:16:19,990
hell check so let's see play van in the

00:16:17,620 --> 00:16:22,510
meantime here it's supposed to create a

00:16:19,990 --> 00:16:24,010
folder like a group and deploy a bunch

00:16:22,510 --> 00:16:26,200
of service is going to deploy vamp and

00:16:24,010 --> 00:16:28,030
then like it's a micro services

00:16:26,200 --> 00:16:30,340
application so you have the gateway of

00:16:28,030 --> 00:16:34,420
the the workflow services and so on so

00:16:30,340 --> 00:16:35,860
we're gonna see that after that okay in

00:16:34,420 --> 00:16:38,200
the meantime let me show you the code

00:16:35,860 --> 00:16:39,520
for the Jenkins piece so are you

00:16:38,200 --> 00:16:40,450
familiar with the pipeline on Jenkins

00:16:39,520 --> 00:16:43,180
Yes No

00:16:40,450 --> 00:16:44,770
okay so a few Jing's drinking's I guess

00:16:43,180 --> 00:16:47,770
and I hope so using the pipeline which

00:16:44,770 --> 00:16:49,390
is awesome feature actually we used to

00:16:47,770 --> 00:16:50,080
have on drinking's like the Freestyle

00:16:49,390 --> 00:16:52,660
job

00:16:50,080 --> 00:16:53,980
I think the name is correct for what it

00:16:52,660 --> 00:16:55,840
was right

00:16:53,980 --> 00:16:58,840
at the end of the day if you have like

00:16:55,840 --> 00:17:01,630
different bunch of actions on your

00:16:58,840 --> 00:17:03,600
pipeline like running CIT a rainy test

00:17:01,630 --> 00:17:05,800
winning unit testing integration test

00:17:03,600 --> 00:17:07,420
depends of the way that we want to

00:17:05,800 --> 00:17:09,340
deploy it was different bunch of which

00:17:07,420 --> 00:17:11,140
type project and one column the other

00:17:09,340 --> 00:17:13,840
one and so on so on and then since the

00:17:11,140 --> 00:17:15,730
drinking's to dotto I think deployment

00:17:13,840 --> 00:17:19,060
is thing called the pipeline I like to

00:17:15,730 --> 00:17:22,660
call that like the sea is cold if I can

00:17:19,060 --> 00:17:25,030
say that the ability to store the CI

00:17:22,660 --> 00:17:28,180
pipeline in sine of five so if using

00:17:25,030 --> 00:17:30,490
Travis for example circle CI and all

00:17:28,180 --> 00:17:31,960
those fancy guys cloud base right this

00:17:30,490 --> 00:17:34,030
is also the way that I walk which is

00:17:31,960 --> 00:17:35,800
very great you just saw everything all

00:17:34,030 --> 00:17:38,080
the pipeline in the ML file inside your

00:17:35,800 --> 00:17:39,700
repo and then when you're gonna push is

00:17:38,080 --> 00:17:41,440
going to win this file and when step by

00:17:39,700 --> 00:17:42,790
step what I want to read right because

00:17:41,440 --> 00:17:45,190
at the end I see I told you just to know

00:17:42,790 --> 00:17:47,260
castrato tools you can say ok run this

00:17:45,190 --> 00:17:49,630
script first and then that one that one

00:17:47,260 --> 00:17:52,090
that one make sense so this is exactly

00:17:49,630 --> 00:17:54,190
how the pipeline works on drinking's so

00:17:52,090 --> 00:18:00,730
if I start with the API here

00:17:54,190 --> 00:18:01,510
I know if you can see yeah so that's the

00:18:00,730 --> 00:18:03,550
code right

00:18:01,510 --> 00:18:07,840
I can show you not gonna right here if

00:18:03,550 --> 00:18:11,500
you go on source main because in Java

00:18:07,840 --> 00:18:13,450
that mean a lot of file area where I

00:18:11,500 --> 00:18:17,410
have my controllers model and so that's

00:18:13,450 --> 00:18:18,940
really a java file and if I'm going it

00:18:17,410 --> 00:18:21,160
back to the root here I have this guy

00:18:18,940 --> 00:18:22,150
called the Jenkins files and here what

00:18:21,160 --> 00:18:24,220
I'm gonna do

00:18:22,150 --> 00:18:28,360
first I'm going to ask Jenkins to clone

00:18:24,220 --> 00:18:30,790
the repo on my node right then I'm gonna

00:18:28,360 --> 00:18:33,130
run the build so I'm going to build the

00:18:30,790 --> 00:18:36,910
docker image I'm going to push this

00:18:33,130 --> 00:18:38,860
image to I'm using the public repository

00:18:36,910 --> 00:18:40,720
here but if you have time we can change

00:18:38,860 --> 00:18:43,210
to a private one so I'm going to build

00:18:40,720 --> 00:18:46,000
and push the code as you can see here

00:18:43,210 --> 00:18:49,630
I'm not doing any tests good practices

00:18:46,000 --> 00:18:51,130
right but I would say maybe that one

00:18:49,630 --> 00:18:54,250
step before I want to run the unit test

00:18:51,130 --> 00:18:56,130
right since I'm using Gradle to build

00:18:54,250 --> 00:18:58,500
this is what I'm gonna do

00:18:56,130 --> 00:19:00,730
this is what I'm doing inside actually

00:18:58,500 --> 00:19:04,450
to build application I have to run the

00:19:00,730 --> 00:19:07,390
Gradle build packaging stuff right but I

00:19:04,450 --> 00:19:10,600
also have a switch for tests but I'm not

00:19:07,390 --> 00:19:13,110
doing it here so I'm building pushing

00:19:10,600 --> 00:19:15,610
and then yeah I'm doing a bunch of magic

00:19:13,110 --> 00:19:19,150
I'm doing this in command you can

00:19:15,610 --> 00:19:21,880
understand why it's involve them at the

00:19:19,150 --> 00:19:23,620
end and when I basically I'm preparing

00:19:21,880 --> 00:19:24,970
some config file and when it's done I'm

00:19:23,620 --> 00:19:28,120
going to push those config file to the

00:19:24,970 --> 00:19:31,390
appeal of them right so our so preparing

00:19:28,120 --> 00:19:32,230
some other practices in term of DevOps

00:19:31,390 --> 00:19:33,640
practices here

00:19:32,230 --> 00:19:34,840
what we gonna do we're gonna do a/b

00:19:33,640 --> 00:19:37,120
testing I don't know if you're familiar

00:19:34,840 --> 00:19:39,550
with that or can I be testing so what

00:19:37,120 --> 00:19:43,120
I'm going to do I'm going to push a code

00:19:39,550 --> 00:19:44,620
so let's say my v1 code and then let's

00:19:43,120 --> 00:19:47,230
say we have a high velocity maybe we're

00:19:44,620 --> 00:19:49,720
going to push 10 times per days which

00:19:47,230 --> 00:19:51,190
could be great we are like Netflix or

00:19:49,720 --> 00:19:53,800
whatever and let's say we're gonna go

00:19:51,190 --> 00:19:56,260
crazy push 20 30 times day my

00:19:53,800 --> 00:19:58,660
microservices so I want to be able to do

00:19:56,260 --> 00:20:00,370
a/b testing so maybe not go to go

00:19:58,660 --> 00:20:01,840
completely crazy and say I have a new

00:20:00,370 --> 00:20:04,180
version now let's were the icon the

00:20:01,840 --> 00:20:06,430
pissant of my client or customer on this

00:20:04,180 --> 00:20:08,410
new version and see what's going on

00:20:06,430 --> 00:20:10,030
maybe it's not a good practices so what

00:20:08,410 --> 00:20:12,040
are we going to do we're gonna is this

00:20:10,030 --> 00:20:14,140
muesli switch so we're going to keep the

00:20:12,040 --> 00:20:15,520
whole version if I can say the

00:20:14,140 --> 00:20:17,230
convention we're going to depress the

00:20:15,520 --> 00:20:19,420
v-necks version so the version - and

00:20:17,230 --> 00:20:21,580
thanks to vamp we're going to do load

00:20:19,420 --> 00:20:24,309
balancing so we can do a/b testing

00:20:21,580 --> 00:20:27,010
actually and smoothly or direct 20% of

00:20:24,309 --> 00:20:29,650
the traffic on the new services do some

00:20:27,010 --> 00:20:33,190
telemetry let's wait and then apply to

00:20:29,650 --> 00:20:36,430
do 50/50 70/30 and then had a pissant on

00:20:33,190 --> 00:20:38,260
my new deployment make sense right again

00:20:36,430 --> 00:20:39,910
it's just for demo maybe in production

00:20:38,260 --> 00:20:42,280
you want to do smoothly here I'm what

00:20:39,910 --> 00:20:45,730
I'm going to do I'm going to deploy do

00:20:42,280 --> 00:20:48,900
50 50 and then hundred boom no time for

00:20:45,730 --> 00:20:51,970
go smoothly but again it just it just

00:20:48,900 --> 00:20:54,940
for the demos I'm doing that right so

00:20:51,970 --> 00:20:57,400
let's go back to the COS here so like I

00:20:54,940 --> 00:20:58,450
said when you install them because it's

00:20:57,400 --> 00:21:00,940
the way that this code is to

00:20:58,450 --> 00:21:04,570
microservices also it deployed a bunch

00:21:00,940 --> 00:21:07,360
of micro services but the most important

00:21:04,570 --> 00:21:09,910
one is the vamp - bob is that guy so

00:21:07,360 --> 00:21:11,650
this is vamp actually what I'm going to

00:21:09,910 --> 00:21:14,080
show you here it's really is like the

00:21:11,650 --> 00:21:15,970
straightforward usage of vamp actually

00:21:14,080 --> 00:21:18,870
I'm going to use the API but they have a

00:21:15,970 --> 00:21:22,179
bunch of resources they have their own

00:21:18,870 --> 00:21:23,890
features if I can say that the grouping

00:21:22,179 --> 00:21:27,670
is the breed so you can under a lot of

00:21:23,890 --> 00:21:29,350
practices using only vamps but me what

00:21:27,670 --> 00:21:31,090
I'm going to do I'm going to use the API

00:21:29,350 --> 00:21:33,010
I'm just going to call as weak as they

00:21:31,090 --> 00:21:36,130
call that a deployment so I'm going to

00:21:33,010 --> 00:21:38,890
pass my new deployment all the time so

00:21:36,130 --> 00:21:40,179
that's the seed command that you can see

00:21:38,890 --> 00:21:43,990
in the pipeline this is what I'm going

00:21:40,179 --> 00:21:45,820
to show you so before that what I can do

00:21:43,990 --> 00:21:48,190
I can show you the basic hello world in

00:21:45,820 --> 00:21:52,630
vamp because I think it's interesting to

00:21:48,190 --> 00:21:54,700
know that so what I'm gonna do here I'm

00:21:52,630 --> 00:21:56,980
gonna add a deployment so it's yeah more

00:21:54,700 --> 00:21:58,030
base so I'm going to say here okay I

00:21:56,980 --> 00:21:58,750
don't know if you can see in the back

00:21:58,030 --> 00:22:03,970
that's correct

00:21:58,750 --> 00:22:05,620
want me to maybe to zoom it good yeah so

00:22:03,970 --> 00:22:07,120
I'm going to name a deployment I'm going

00:22:05,620 --> 00:22:10,450
to create like they call that the

00:22:07,120 --> 00:22:14,260
cluster so call ello world I'm gonna

00:22:10,450 --> 00:22:16,510
declare the breed so greediest let's say

00:22:14,260 --> 00:22:18,760
docker image my case you can reuse this

00:22:16,510 --> 00:22:19,810
grid for multiple deployment like I say

00:22:18,760 --> 00:22:20,260
the way that it is deployed is very

00:22:19,810 --> 00:22:22,420
smart

00:22:20,260 --> 00:22:25,120
when you're using that is gonna like

00:22:22,420 --> 00:22:27,070
split everything inside like the gateway

00:22:25,120 --> 00:22:28,630
they called the gateway so the way that

00:22:27,070 --> 00:22:30,400
you want to act six access the

00:22:28,630 --> 00:22:32,200
containers called data gateway the grid

00:22:30,400 --> 00:22:34,120
it's like basically the artifacts that

00:22:32,200 --> 00:22:36,250
you want to deploy and so on and so on

00:22:34,120 --> 00:22:39,490
against the documentation is very well

00:22:36,250 --> 00:22:42,460
done but anyway here I'm going to deploy

00:22:39,490 --> 00:22:44,590
my hello world deployment the deployable

00:22:42,460 --> 00:22:46,660
which is the docker image I want to

00:22:44,590 --> 00:22:51,070
deploy its June stoichea - web DeBerg

00:22:46,660 --> 00:22:53,620
that's my own way to do my l wall they

00:22:51,070 --> 00:22:56,350
say that and that I'm gonna scale to

00:22:53,620 --> 00:22:58,870
those resources and that guy gonna talk

00:22:56,350 --> 00:23:01,270
to D cos and mezzos ands gonna do all

00:22:58,870 --> 00:23:05,590
the magic for me right so I'm gonna save

00:23:01,270 --> 00:23:08,860
that which means deploy and also in the

00:23:05,590 --> 00:23:12,790
meantime I'm gonna deploy as they call a

00:23:08,860 --> 00:23:16,990
gateway so the Gateway on vamp it's just

00:23:12,790 --> 00:23:19,360
the way to handle the networking and

00:23:16,990 --> 00:23:20,500
also the AP testing stuff and so on so

00:23:19,360 --> 00:23:21,730
here what I'm going to do I'm going to

00:23:20,500 --> 00:23:25,480
deploy and you get way called hello

00:23:21,730 --> 00:23:27,670
world here I'm gonna use that service

00:23:25,480 --> 00:23:29,980
spot inside my gos cluster I'm going to

00:23:27,670 --> 00:23:32,440
use the virtual host so I have a custom

00:23:29,980 --> 00:23:37,930
Denon DNS name College do not walk or

00:23:32,440 --> 00:23:40,420
sing on GoDaddy so it's here on GoDaddy

00:23:37,930 --> 00:23:42,640
I'm saying that the ello - world I want

00:23:40,420 --> 00:23:46,930
you to or direct on my virtual IP on

00:23:42,640 --> 00:23:48,850
Azure because I'm on ro right so when

00:23:46,930 --> 00:23:51,190
you deploy on a CS you have a bunch of

00:23:48,850 --> 00:23:53,020
load balancers virtual IP and so on on

00:23:51,190 --> 00:23:56,260
add row so I'm going to reach my virtual

00:23:53,020 --> 00:23:59,380
IP from my node my agent my agent right

00:23:56,260 --> 00:24:01,300
and then vans gonna under that so

00:23:59,380 --> 00:24:06,760
basically that's kind of the Martinelli

00:24:01,300 --> 00:24:08,620
piece right and I'm gonna route that one

00:24:06,760 --> 00:24:10,030
- hello world hello world so you

00:24:08,620 --> 00:24:12,670
remember on the deployment of the name

00:24:10,030 --> 00:24:14,710
of the deployment the cluster name the

00:24:12,670 --> 00:24:16,660
web portal so it's kind of you have the

00:24:14,710 --> 00:24:18,370
end addition and so on again it's really

00:24:16,660 --> 00:24:21,160
well explained on on on the

00:24:18,370 --> 00:24:23,110
documentation and I'm gonna go I'm gonna

00:24:21,160 --> 00:24:26,140
redirect everything hundred percent or

00:24:23,110 --> 00:24:29,920
no traffic on that deployment makes

00:24:26,140 --> 00:24:32,320
sense so I'm gonna save that guy here so

00:24:29,920 --> 00:24:34,170
my deployment here is deploy so if you

00:24:32,320 --> 00:24:36,510
go back on this us here

00:24:34,170 --> 00:24:38,610
so you can see that I might deployment a

00:24:36,510 --> 00:24:42,690
shallow world whatever is running here

00:24:38,610 --> 00:24:45,179
and let's see my gateway here also

00:24:42,690 --> 00:24:49,710
running with that virtual host so

00:24:45,179 --> 00:24:54,179
actually let's try that guy here and

00:24:49,710 --> 00:24:57,380
that's Milo all right so that's the

00:24:54,179 --> 00:25:03,740
basic basic in a world running on them

00:24:57,380 --> 00:25:04,950
awesome gift right any question on that

00:25:03,740 --> 00:25:10,860
No

00:25:04,950 --> 00:25:14,160
okay I'm done thank you okay check the

00:25:10,860 --> 00:25:23,540
time okay so what I'm gonna do I'm gonna

00:25:14,160 --> 00:25:23,540
remove my gateway in my deployment

00:25:24,530 --> 00:25:29,940
supposed to okay because I like DevOps

00:25:28,380 --> 00:25:33,090
that mean I like to automate everything

00:25:29,940 --> 00:25:34,950
right so now what I did manually let's

00:25:33,090 --> 00:25:36,510
say that copy and paste new etcetera

00:25:34,950 --> 00:25:38,370
etcetera what I want to do is kind of

00:25:36,510 --> 00:25:41,640
the same way the same thing using

00:25:38,370 --> 00:25:43,470
Jenkins on top of them they have the API

00:25:41,640 --> 00:25:45,299
so this is what I'm gonna use and this

00:25:43,470 --> 00:25:49,770
is what I have at the bottom of my

00:25:45,299 --> 00:25:52,799
Jenkins files so still I didn't show you

00:25:49,770 --> 00:25:55,559
yet the ugly ml thing that I'm doing

00:25:52,799 --> 00:25:59,669
here not ugly actually but kind of but

00:25:55,559 --> 00:26:03,720
all the next step the stage on Jenkins

00:25:59,669 --> 00:26:05,730
it's using the vampa P I am using so the

00:26:03,720 --> 00:26:08,130
virtual the internal virtual IP inside

00:26:05,730 --> 00:26:11,370
my cluster so this is on the default

00:26:08,130 --> 00:26:14,280
where vamp is deployed using the API for

00:26:11,370 --> 00:26:17,549
each stuff that I want to do deployment

00:26:14,280 --> 00:26:20,370
gateways braid etc etc each feature I am

00:26:17,549 --> 00:26:23,549
using inside I can curl post or whatever

00:26:20,370 --> 00:26:25,980
I want to do using the API and then I'm

00:26:23,549 --> 00:26:28,049
passing the Yammer file so the Yammer

00:26:25,980 --> 00:26:30,600
piece that I'll show you that I pasted

00:26:28,049 --> 00:26:33,750
manually this is what I'm doing here

00:26:30,600 --> 00:26:35,940
this is what I'm playing with on my seat

00:26:33,750 --> 00:26:37,830
so let me show you that inside the

00:26:35,940 --> 00:26:43,040
cluster now so the first one I'm calling

00:26:37,830 --> 00:26:43,040
it's PU mfp of the deployed channel and

00:26:43,520 --> 00:26:47,879
I'm doing that twice you can understand

00:26:46,020 --> 00:26:50,309
why and then I'll get away

00:26:47,879 --> 00:26:51,989
50 and get 100 so like I said very ugly

00:26:50,309 --> 00:26:54,059
the way that I'm doing that when I'm

00:26:51,989 --> 00:26:55,619
deploy I am doing 50/50 between the

00:26:54,059 --> 00:26:58,769
v-necks and the current one and then

00:26:55,619 --> 00:27:01,349
heard that you can understand that so

00:26:58,769 --> 00:27:05,369
basically a few files so if I'm going

00:27:01,349 --> 00:27:07,619
back to my source folder or no deploy

00:27:05,369 --> 00:27:10,619
folder here this is where most in my

00:27:07,619 --> 00:27:13,019
file so the first one then I'm playing

00:27:10,619 --> 00:27:15,029
with it that one so it looks familiar

00:27:13,019 --> 00:27:15,989
right kind of the same structure by use

00:27:15,029 --> 00:27:18,419
for the hello world

00:27:15,989 --> 00:27:23,489
but here what I'm doing I'm going to tag

00:27:18,419 --> 00:27:25,889
my deployments here because but not all

00:27:23,489 --> 00:27:27,209
the time but it's going to happen I'm

00:27:25,889 --> 00:27:28,919
gonna have to deployment right the

00:27:27,209 --> 00:27:31,139
v-necks one and the current one because

00:27:28,919 --> 00:27:33,719
I want to load balance right so what I'm

00:27:31,139 --> 00:27:35,969
gonna do I'm going to use this ID ID tag

00:27:33,719 --> 00:27:38,099
and this is the seed that I'm doing in

00:27:35,969 --> 00:27:41,039
my command line so I'm gonna do version

00:27:38,099 --> 00:27:42,539
one version two and then so that's my

00:27:41,039 --> 00:27:44,279
fuzzy Ramon let's say I want to Hadoop

00:27:42,539 --> 00:27:46,109
I'm gonna have two and three three and

00:27:44,279 --> 00:27:48,479
four four and five and so on and so on

00:27:46,109 --> 00:27:50,519
right and this ID tag is the one from

00:27:48,479 --> 00:27:52,499
Jenkins so in the Jenkins files you can

00:27:50,519 --> 00:27:56,159
call viable right environment variables

00:27:52,499 --> 00:27:58,499
so I'm gonna call the ID of the breed

00:27:56,159 --> 00:28:01,679
I'm running right now make sense

00:27:58,499 --> 00:28:06,029
and then I'm just passing that all the

00:28:01,679 --> 00:28:07,589
way so every time for the docker image

00:28:06,029 --> 00:28:10,349
so I'm going to build the document and

00:28:07,589 --> 00:28:13,079
push with the tag of the bill right so

00:28:10,349 --> 00:28:15,690
version 1 the name of the image is going

00:28:13,079 --> 00:28:19,049
to be docker will - key partly metal MIP

00:28:15,690 --> 00:28:20,789
comma 1 and so on two three four I'm

00:28:19,049 --> 00:28:24,529
gonna push and this is the one again I'm

00:28:20,789 --> 00:28:28,909
going to pull on my cluster make sense

00:28:24,529 --> 00:28:28,909
so that's the deployment by itself

00:28:34,860 --> 00:28:40,870
something or saw something here it's

00:28:38,590 --> 00:28:43,210
more related about the docker image by

00:28:40,870 --> 00:28:45,760
itself but I'm using over one of I'm

00:28:43,210 --> 00:28:47,770
enviable to the fqdn of the

00:28:45,760 --> 00:28:49,180
database and that's actually a good

00:28:47,770 --> 00:28:54,340
reminder I have to deploy the

00:28:49,180 --> 00:28:58,260
database so what I'm going to do since

00:28:54,340 --> 00:29:01,990
is not really the the focus of the talk

00:28:58,260 --> 00:29:04,690
I'm gonna deploy my database

00:29:01,990 --> 00:29:09,220
manually because I don't want to DevOps

00:29:04,690 --> 00:29:12,070
on that one for now so it's a basic

00:29:09,220 --> 00:29:13,900
basic like I said basic deployment the

00:29:12,070 --> 00:29:16,420
only thing I'm calling is my custom

00:29:13,900 --> 00:29:19,210
image but like I said if we can if you

00:29:16,420 --> 00:29:22,750
can go on the docker file it's calling

00:29:19,210 --> 00:29:24,610
the official MongoDB image but what I'm

00:29:22,750 --> 00:29:26,140
doing differently I just injecting where

00:29:24,610 --> 00:29:28,300
they start I'm starting the daemon and

00:29:26,140 --> 00:29:30,190
drinking like I fit in the database with

00:29:28,300 --> 00:29:32,200
some data right this is the only thing

00:29:30,190 --> 00:29:34,990
I'm doing and I'm exposing on the

00:29:32,200 --> 00:29:38,590
cluster the default port of the

00:29:34,990 --> 00:29:41,610
database and because it's gonna be on

00:29:38,590 --> 00:29:44,260
the PU MFP database folder or group and

00:29:41,610 --> 00:29:47,170
the name of the container is also pure

00:29:44,260 --> 00:29:49,570
MLP database this is why it's odd coded

00:29:47,170 --> 00:29:51,490
I know but this is why here I'm calling

00:29:49,570 --> 00:29:54,490
that one I'm using the internal load

00:29:51,490 --> 00:29:55,680
balancer right to reach my database make

00:29:54,490 --> 00:30:02,800
sense

00:29:55,680 --> 00:30:05,110
all right and then comes the gateway so

00:30:02,800 --> 00:30:08,460
the 50-50 what I'm doing still using the

00:30:05,110 --> 00:30:12,220
tag right on my bill I'm all directing

00:30:08,460 --> 00:30:15,160
50% of my traffic on the current version

00:30:12,220 --> 00:30:17,080
so this is why you have the pre tag and

00:30:15,160 --> 00:30:18,880
the ID tag this is the two Vipers I'm

00:30:17,080 --> 00:30:20,590
using the pre tag is the previous

00:30:18,880 --> 00:30:23,290
version is the current version minus one

00:30:20,590 --> 00:30:26,110
so if it's bill number ten is going to

00:30:23,290 --> 00:30:28,810
be nine right and the ID tag is the

00:30:26,110 --> 00:30:32,200
current version or the current ID of the

00:30:28,810 --> 00:30:34,210
build make sense actually I'm gonna run

00:30:32,200 --> 00:30:36,280
that right now we're gonna understand so

00:30:34,210 --> 00:30:40,690
what I'm going to do I'm just going to

00:30:36,280 --> 00:30:46,059
copy the URL of my repo here

00:30:40,690 --> 00:30:48,039
and I'm gonna go on drinking's here so

00:30:46,059 --> 00:30:50,559
I'm gonna create a new item like I said

00:30:48,039 --> 00:30:53,789
I'm going to use a pipeline project so

00:30:50,559 --> 00:31:02,470
I'm going to call that one or the API

00:30:53,789 --> 00:31:04,419
it's a fist pipeline project so the only

00:31:02,470 --> 00:31:07,840
thing I can don't have to do it's

00:31:04,419 --> 00:31:13,809
hearsay I want you to grab the pipeline

00:31:07,840 --> 00:31:15,369
go judge Jenkins file from this

00:31:13,809 --> 00:31:17,259
repository since it's public I don't

00:31:15,369 --> 00:31:19,119
have to provide any credential right but

00:31:17,259 --> 00:31:22,749
if you want to the private private

00:31:19,119 --> 00:31:24,669
registry you can do it I don't have to

00:31:22,749 --> 00:31:27,519
change that one because is the name of

00:31:24,669 --> 00:31:33,789
the file I'm using also what I did or

00:31:27,519 --> 00:31:37,840
what I have to do actually back on my

00:31:33,789 --> 00:31:39,729
jackings right here as you can see so

00:31:37,840 --> 00:31:43,239
ability me but when were I'm going to

00:31:39,729 --> 00:31:45,849
push my image a nickel on shell right

00:31:43,239 --> 00:31:49,210
it's not anonymous I cannot push my the

00:31:45,849 --> 00:31:52,749
image on docker like this so I'm using

00:31:49,210 --> 00:31:53,950
the credential or vault from Jenkins so

00:31:52,749 --> 00:31:56,289
I'm going to create I have to do that

00:31:53,950 --> 00:31:57,429
before I'm gonna create a credential

00:31:56,289 --> 00:32:00,159
called docker

00:31:57,429 --> 00:32:02,349
so to do that go on credential sections

00:32:00,159 --> 00:32:05,559
I'm gonna say here I want to add

00:32:02,349 --> 00:32:17,009
credentials I just have to use the same

00:32:05,559 --> 00:32:19,479
ID so this is my docker hub username and

00:32:17,009 --> 00:32:24,460
that way junk is going to be able to

00:32:19,479 --> 00:32:26,349
grab and use those key right so now I

00:32:24,460 --> 00:32:30,399
have that guy I'm going to start the

00:32:26,349 --> 00:32:32,409
bill so the way that Jenkins works on

00:32:30,399 --> 00:32:33,789
missiles pretty awesome you have the

00:32:32,409 --> 00:32:35,259
master when you know continuous and

00:32:33,789 --> 00:32:37,960
every time when you launch a new build

00:32:35,259 --> 00:32:41,799
is going to trigger misses tasks run the

00:32:37,960 --> 00:32:42,849
build inside it so that's why the first

00:32:41,799 --> 00:32:45,190
time is going to take a while because

00:32:42,849 --> 00:32:47,109
it's going to boot not boot but create

00:32:45,190 --> 00:32:50,019
the continuous pulled for the first time

00:32:47,109 --> 00:32:52,179
to drinking slave image and then run

00:32:50,019 --> 00:32:53,860
everything so we'll the image pull the

00:32:52,179 --> 00:32:55,660
official Tomcat image you

00:32:53,860 --> 00:32:58,780
can if you curse you can go on the repo

00:32:55,660 --> 00:33:01,270
see my doctor file again it's from the

00:32:58,780 --> 00:33:03,280
official image show that one is Tomcat

00:33:01,270 --> 00:33:05,500
or GDK I don't remember

00:33:03,280 --> 00:33:07,870
so it's pretty heavy because the Java is

00:33:05,500 --> 00:33:11,380
going to download everything will my

00:33:07,870 --> 00:33:14,670
image push to the docker hub and then

00:33:11,380 --> 00:33:18,730
inside my pipeline I also add some

00:33:14,670 --> 00:33:21,130
validation step here because I'm asking

00:33:18,730 --> 00:33:24,340
the input so I don't want to do

00:33:21,130 --> 00:33:25,480
everything like one shot fifty fifty

00:33:24,340 --> 00:33:27,850
hundred and so on

00:33:25,480 --> 00:33:29,830
you're going to ask me before are you

00:33:27,850 --> 00:33:32,950
ready to do the next step so it's going

00:33:29,830 --> 00:33:34,299
to deploy at that inside that stage so

00:33:32,950 --> 00:33:36,160
he's going to deploy to my cluster and

00:33:34,299 --> 00:33:37,960
the cool thing with the gateway I'll

00:33:36,160 --> 00:33:40,360
show you actually you're going to see

00:33:37,960 --> 00:33:42,220
that he's going to deploy my deployment

00:33:40,360 --> 00:33:43,929
so it's going to deploy my appear in

00:33:42,220 --> 00:33:46,390
that case and it's going to create the

00:33:43,929 --> 00:33:48,490
gateway but the gateway you're not going

00:33:46,390 --> 00:33:49,750
to touch the touch the Gateway until is

00:33:48,490 --> 00:33:51,400
going to ask me do you approve the

00:33:49,750 --> 00:33:54,460
deployment that means they get wasted or

00:33:51,400 --> 00:33:56,110
direct to the all deployment right what

00:33:54,460 --> 00:33:58,570
I'm going to say okay I'm ready to have

00:33:56,110 --> 00:34:01,510
the 50/50 then is going to do the 50/50

00:33:58,570 --> 00:34:04,380
load balancing right and so on for the

00:34:01,510 --> 00:34:10,030
hundred I can still work back if I want

00:34:04,380 --> 00:34:14,200
so it's supposed to build so also in the

00:34:10,030 --> 00:34:15,369
meantime I'm going to deploy my yeah so

00:34:14,200 --> 00:34:17,919
that one gonna take a while because

00:34:15,369 --> 00:34:20,320
again you have to pull for the first

00:34:17,919 --> 00:34:22,960
time the official not a while I would

00:34:20,320 --> 00:34:24,850
say like two minutes but still what I

00:34:22,960 --> 00:34:27,929
can do I can create another pipeline for

00:34:24,850 --> 00:34:36,100
my client right so I'm going to call a

00:34:27,929 --> 00:34:40,080
client here so the client here is not

00:34:36,100 --> 00:34:55,260
the same repo is that one

00:34:40,080 --> 00:35:04,290
oops some process from get and save and

00:34:55,260 --> 00:35:07,120
be crazy I think I clicked yeah okay

00:35:04,290 --> 00:35:07,510
let's see if at least we have logs make

00:35:07,120 --> 00:35:11,050
sense

00:35:07,510 --> 00:35:12,760
yeah and then is also brilliant image

00:35:11,050 --> 00:35:15,640
the image inside the container right

00:35:12,760 --> 00:35:18,670
maybe not the best practices but like I

00:35:15,640 --> 00:35:21,030
said is demo demo I so any question are

00:35:18,670 --> 00:35:21,030
that step

00:35:35,920 --> 00:35:43,950
okay so the build is done now is pushing

00:35:39,480 --> 00:35:46,120
so what I can do just to show you here

00:35:43,950 --> 00:35:49,780
you can see I don't know if you can see

00:35:46,120 --> 00:35:51,490
well but II push with the tag one like

00:35:49,780 --> 00:35:53,530
because again is reading like the

00:35:51,490 --> 00:35:55,810
environment vibra from Jenkins right is

00:35:53,530 --> 00:35:58,930
the first deployment here so it's gonna

00:35:55,810 --> 00:36:00,790
be one so because I need to deployment

00:35:58,930 --> 00:36:02,200
to do load balancing right what I'm

00:36:00,790 --> 00:36:05,290
gonna do have to right after that I'm

00:36:02,200 --> 00:36:07,300
going to kick off the another release to

00:36:05,290 --> 00:36:10,120
have one and two because in that way we

00:36:07,300 --> 00:36:13,450
not going to have the two deployment to

00:36:10,120 --> 00:36:16,180
do the 50/50 deployment right so the

00:36:13,450 --> 00:36:17,590
first one is kind of faked but in

00:36:16,180 --> 00:36:19,270
production is supposed to have the old

00:36:17,590 --> 00:36:20,980
version of the conversion and then push

00:36:19,270 --> 00:36:22,960
the new version all the time right

00:36:20,980 --> 00:36:25,390
because yeah start from scratch I'm

00:36:22,960 --> 00:36:29,890
gonna need at least two deployments so

00:36:25,390 --> 00:36:40,270
this is why I'm gonna wait that one to

00:36:29,890 --> 00:36:42,730
be done so it pushed and I'm gonna so

00:36:40,270 --> 00:36:55,570
let's forget about that you didn't see

00:36:42,730 --> 00:36:59,830
that one right okay and we can we build

00:36:55,570 --> 00:37:01,720
a new one okay perfect so what it did it

00:36:59,830 --> 00:37:03,340
just deployed the first one with the tag

00:37:01,720 --> 00:37:04,960
number one like I said we're gonna need

00:37:03,340 --> 00:37:07,270
at least two to have the 50/50

00:37:04,960 --> 00:37:10,360
deployment right so is deploying the

00:37:07,270 --> 00:37:14,500
first image order equated the Gateway

00:37:10,360 --> 00:37:16,030
with the UL that I want the virtual host

00:37:14,500 --> 00:37:17,470
so this is also something that I

00:37:16,030 --> 00:37:19,330
specified in the Gateway if you remember

00:37:17,470 --> 00:37:21,790
like the hello world right so here what

00:37:19,330 --> 00:37:24,940
I'm going to use its API dot P where P

00:37:21,790 --> 00:37:30,070
dot jr. not work like my custom DNS name

00:37:24,940 --> 00:37:31,960
but you can use your own and for the

00:37:30,070 --> 00:37:33,340
client for the web front-end is going to

00:37:31,960 --> 00:37:34,900
be the same thing but without the appear

00:37:33,340 --> 00:37:36,820
on the front right so I'm exposing the

00:37:34,900 --> 00:37:40,150
API typically and also the work from

00:37:36,820 --> 00:37:42,550
them on that case so what I'm going to

00:37:40,150 --> 00:37:45,430
do I'm supposed to be able to do that

00:37:42,550 --> 00:37:48,550
actually just to make sure that it works

00:37:45,430 --> 00:37:49,509
so yeah if I'm going on that route the -

00:37:48,550 --> 00:37:51,880
orders

00:37:49,509 --> 00:37:54,399
is going to reach the just a good way to

00:37:51,880 --> 00:37:56,829
try and test the connection between the

00:37:54,399 --> 00:38:00,009
appear in the MongoDB inside my cluster

00:37:56,829 --> 00:38:01,929
right so I have I know that this route

00:38:00,009 --> 00:38:03,039
orders have another one for coats you

00:38:01,929 --> 00:38:04,630
can understand why because the

00:38:03,039 --> 00:38:07,899
application by itself it's like kind of

00:38:04,630 --> 00:38:10,719
e-commerce solution very light so

00:38:07,899 --> 00:38:12,699
basically I'm creating new orders in my

00:38:10,719 --> 00:38:13,989
database I can delete I can update and

00:38:12,699 --> 00:38:16,479
so on right

00:38:13,989 --> 00:38:19,059
reaching the MongoDB database so that's

00:38:16,479 --> 00:38:24,069
the API the good thing it's accessible

00:38:19,059 --> 00:38:28,959
from the outside that's great so let's

00:38:24,069 --> 00:38:38,039
see where the front end now here's same

00:38:28,959 --> 00:38:38,039
thing so he's asking me for dancing here

00:38:38,159 --> 00:38:45,880
so it's deployed and again I'm gonna

00:38:42,149 --> 00:38:54,579
kick a new one perfect so same thing

00:38:45,880 --> 00:39:02,919
here the client should be peel MRP good

00:38:54,579 --> 00:39:15,179
good demo or maybe because the route is

00:39:02,919 --> 00:39:15,179
not okay should be okay come on

00:39:29,190 --> 00:39:33,060
okay what I missed

00:39:34,620 --> 00:39:53,860
client oh no should be okay let's try

00:39:47,290 --> 00:39:58,330
with another awesome Safari brother yeah

00:39:53,860 --> 00:40:00,730
just the cash I guess anyway so just to

00:39:58,330 --> 00:40:05,140
show you the UI so that's like I said

00:40:00,730 --> 00:40:07,090
awesome you I skill from Julia that's my

00:40:05,140 --> 00:40:09,550
application I have something on the left

00:40:07,090 --> 00:40:13,080
here you can see I've I can with the

00:40:09,550 --> 00:40:18,430
dealers can do coats can see have some

00:40:13,080 --> 00:40:20,830
font issues but it's supposed to be add

00:40:18,430 --> 00:40:23,710
edit remove like the basic crud stuff

00:40:20,830 --> 00:40:26,470
right and everything is back on the

00:40:23,710 --> 00:40:28,390
 database right as you can see I've

00:40:26,470 --> 00:40:30,280
dealers code all those delivery some

00:40:28,390 --> 00:40:34,060
settings setting them nothing so I

00:40:30,280 --> 00:40:35,590
opened for pull request if you want and

00:40:34,060 --> 00:40:39,550
behind-the-scene again is tradition my

00:40:35,590 --> 00:40:43,360
API right so now if I'm on the DevOps

00:40:39,550 --> 00:40:44,800
workflow maybe could be fun too on the

00:40:43,360 --> 00:40:46,810
process I would say okay I'm going to

00:40:44,800 --> 00:40:48,730
add a new route because I want to have a

00:40:46,810 --> 00:40:50,890
new feature so I want to be able to add

00:40:48,730 --> 00:40:53,380
for example a way to browse the catalog

00:40:50,890 --> 00:40:55,840
for example see all the thing that we

00:40:53,380 --> 00:40:57,880
can order online so I would say maybe

00:40:55,840 --> 00:40:59,380
here I want a New Berlin called catalog

00:40:57,880 --> 00:41:01,660
and then is going to be the same way

00:40:59,380 --> 00:41:03,880
that I cut the the the application is

00:41:01,660 --> 00:41:07,270
going to reach special water on my IP I

00:41:03,880 --> 00:41:09,130
can do get pause delete everything right

00:41:07,270 --> 00:41:10,660
and that means I'm gonna need a new

00:41:09,130 --> 00:41:13,420
space on my database to store everything

00:41:10,660 --> 00:41:15,970
a new route and a new burden on my web

00:41:13,420 --> 00:41:21,550
right so let's do that actually let's

00:41:15,970 --> 00:41:25,480
uncommon the code yeah I'm okay to do

00:41:21,550 --> 00:41:29,560
live demo but not live code come on so

00:41:25,480 --> 00:41:31,450
on the order API so let's say on the

00:41:29,560 --> 00:41:34,290
again the database is not the focus for

00:41:31,450 --> 00:41:40,950
this tour claw let's on the other API

00:41:34,290 --> 00:41:40,950
what I'm gonna do on the code

00:41:41,400 --> 00:41:46,600
it's gonna be very very ugly because I'm

00:41:44,500 --> 00:41:51,670
going to do that to the github web the

00:41:46,600 --> 00:41:53,500
face so I have this catalog controller

00:41:51,670 --> 00:41:56,500
here so as you can see it's come

00:41:53,500 --> 00:42:01,150
commented so what I'm going to do I'm

00:41:56,500 --> 00:42:09,730
going to edit this file and yeah

00:42:01,150 --> 00:42:12,040
beautiful right and let's say catalog

00:42:09,730 --> 00:42:16,180
routes so this is what I'm gonna do

00:42:12,040 --> 00:42:20,020
straight to the master boom really

00:42:16,180 --> 00:42:23,380
DevOps so in the best practices yeah

00:42:20,020 --> 00:42:28,930
branch strategy branch policies even on

00:42:23,380 --> 00:42:30,430
my on my drinking's I didn't implement

00:42:28,930 --> 00:42:33,880
that but you also have the ability to

00:42:30,430 --> 00:42:36,940
trigger from new pull requests or new

00:42:33,880 --> 00:42:44,800
commits so I'm gonna just do and copy of

00:42:36,940 --> 00:42:49,030
that guy here and then we're gonna build

00:42:44,800 --> 00:42:51,190
a new ok so let's say we have the Wow

00:42:49,030 --> 00:42:53,580
we have to see I implemented the the the

00:42:51,190 --> 00:42:55,780
CD so that guy is gonna kick off

00:42:53,580 --> 00:42:57,760
automatically right because detect a new

00:42:55,780 --> 00:43:00,160
commit on my repo so again it's going to

00:42:57,760 --> 00:43:02,170
build a new code push and this is what

00:43:00,160 --> 00:43:04,510
its gonna be interesting right since the

00:43:02,170 --> 00:43:06,610
gateway and everything here I'm doing

00:43:04,510 --> 00:43:09,130
that only on the API right so that means

00:43:06,610 --> 00:43:10,930
on the UI no impact on the new UI I'm

00:43:09,130 --> 00:43:12,970
just gonna add the route so it's a good

00:43:10,930 --> 00:43:14,620
way to test behind the scene right so

00:43:12,970 --> 00:43:17,430
that means I'm going to be able to do

00:43:14,620 --> 00:43:20,470
API dot P I'm in the everyday and work

00:43:17,430 --> 00:43:22,180
catalog this is what I implemented again

00:43:20,470 --> 00:43:24,130
nothing on the UI that means the end

00:43:22,180 --> 00:43:26,110
user not supposed to know that not

00:43:24,130 --> 00:43:30,010
supposed to use this feature but it's a

00:43:26,110 --> 00:43:32,200
good way to smoothly deploy my new

00:43:30,010 --> 00:43:33,760
version of my code right so also in the

00:43:32,200 --> 00:43:37,200
meantime what I'm gonna do I'm gonna

00:43:33,760 --> 00:43:46,960
also implement on the web the same thing

00:43:37,200 --> 00:43:49,690
so it's ok it's here so on the web as

00:43:46,960 --> 00:43:55,190
I'm seeing I'm gonna uncomment that guy

00:43:49,690 --> 00:44:00,480
here which is the button for the catalog

00:43:55,190 --> 00:44:04,080
and also here this is the button on the

00:44:00,480 --> 00:44:11,000
on the left and that guy's gonna read

00:44:04,080 --> 00:44:11,000
and use the API right

00:44:16,760 --> 00:44:24,120
again straight to the master let me

00:44:19,200 --> 00:44:24,660
crazy alright so in the meantime what I

00:44:24,120 --> 00:44:26,400
can do

00:44:24,660 --> 00:44:29,340
and also that's the beauty of the

00:44:26,400 --> 00:44:32,310
Gateway I can start to say here so let

00:44:29,340 --> 00:44:34,110
me finish that piece I can start to

00:44:32,310 --> 00:44:36,450
build deploy on them

00:44:34,110 --> 00:44:38,340
I mean deploy and run that on my DCOs

00:44:36,450 --> 00:44:40,320
cluster and sit because I'm using the

00:44:38,340 --> 00:44:42,090
Gateway you remember when he asked me

00:44:40,320 --> 00:44:44,880
are you sure to go on the next step

00:44:42,090 --> 00:44:46,380
right we want confirm that this is the

00:44:44,880 --> 00:44:49,260
way it's going to actually redirect my

00:44:46,380 --> 00:44:51,420
end user before that there is no impact

00:44:49,260 --> 00:44:54,030
for the user since it's a load balancing

00:44:51,420 --> 00:44:56,070
stuff right I'm deploying and running by

00:44:54,030 --> 00:44:58,200
both application the current one and the

00:44:56,070 --> 00:45:01,380
new one I just modify here that mean I

00:44:58,200 --> 00:45:03,330
can still do internal test if I want on

00:45:01,380 --> 00:45:05,310
vampa didn't talk about that but you can

00:45:03,330 --> 00:45:08,940
do canary testing and flag for example

00:45:05,310 --> 00:45:11,640
adding some HTTP eaters and say only the

00:45:08,940 --> 00:45:14,970
I don't know those user with his IP or

00:45:11,640 --> 00:45:16,680
this user admin can reach my application

00:45:14,970 --> 00:45:20,490
which is very great to do canary testing

00:45:16,680 --> 00:45:22,980
so a bunch of different way to test and

00:45:20,490 --> 00:45:25,140
try so let's try that here with the

00:45:22,980 --> 00:45:28,080
other API so it's deeper on the cluster

00:45:25,140 --> 00:45:32,070
that means here on the deployment of PU

00:45:28,080 --> 00:45:35,190
MFP order 2 and the 3 which is still

00:45:32,070 --> 00:45:39,750
deploying but it's going to be deployed

00:45:35,190 --> 00:45:42,030
and my gateway beyond that it's that one

00:45:39,750 --> 00:45:44,730
the PMP API and that one it's

00:45:42,030 --> 00:45:47,610
redirecting 100% of the time here as you

00:45:44,730 --> 00:45:50,520
can see sorry here and if you can see

00:45:47,610 --> 00:45:52,380
well but only on the two right when I'm

00:45:50,520 --> 00:45:54,930
going to push the button to go ahead

00:45:52,380 --> 00:45:57,810
deploy is going to switch the two and

00:45:54,930 --> 00:46:00,650
the three and order a 50/50 on both of

00:45:57,810 --> 00:46:03,300
them and this is where you have the I

00:46:00,650 --> 00:46:05,580
mean the unpack for the user right but

00:46:03,300 --> 00:46:07,560
before that just to make sure that I do

00:46:05,580 --> 00:46:08,690
have the catalog route what I can do

00:46:07,560 --> 00:46:11,060
here

00:46:08,690 --> 00:46:13,320
actually I'm going to use postman

00:46:11,060 --> 00:46:17,820
because postman I think I have no cash

00:46:13,320 --> 00:46:22,560
with postman yep

00:46:17,820 --> 00:46:24,270
here so if I'm doing ping that's a route

00:46:22,560 --> 00:46:27,150
that I code I know that I've data so

00:46:24,270 --> 00:46:30,870
just to make sure so catalogue have no

00:46:27,150 --> 00:46:36,390
phone so I have a 404 euro written by

00:46:30,870 --> 00:46:38,580
spring so now let's say I want to do the

00:46:36,390 --> 00:46:41,880
50/50 diploma let's see process to

00:46:38,580 --> 00:46:45,300
proceed so it's done so if I'm going

00:46:41,880 --> 00:46:49,170
back to Gateway here on my API you can

00:46:45,300 --> 00:46:52,740
see we have 50/50 that mean here without

00:46:49,170 --> 00:46:54,960
any logic okay I should have 50/50 so of

00:46:52,740 --> 00:46:56,580
data and 50% of the time and again the

00:46:54,960 --> 00:46:59,820
course in year are not impacting my user

00:46:56,580 --> 00:47:04,020
because we didn't touch to the client

00:46:59,820 --> 00:47:07,140
here the web right so if I'm refreshing

00:47:04,020 --> 00:47:10,020
that guy here I have nothing here until

00:47:07,140 --> 00:47:13,320
I'm pressing the button again right so

00:47:10,020 --> 00:47:15,150
let's do that for and let you move for

00:47:13,320 --> 00:47:17,190
actually let's do a hundred percent of

00:47:15,150 --> 00:47:19,560
the v-necks or the new version to

00:47:17,190 --> 00:47:21,540
implement the API and the last step here

00:47:19,560 --> 00:47:23,460
it just to make sure that remove the

00:47:21,540 --> 00:47:26,120
version two for the previous version on

00:47:23,460 --> 00:47:28,320
my vamp to don't have like ten different

00:47:26,120 --> 00:47:32,390
deployment on my cluster running at the

00:47:28,320 --> 00:47:37,430
same time and go back to the client here

00:47:32,390 --> 00:47:41,640
here let's say okay I wonder fifty-fifty

00:47:37,430 --> 00:47:43,590
same concept right the Gateway 50/50 so

00:47:41,640 --> 00:47:48,300
if I'm refreshing here I know that I

00:47:43,590 --> 00:47:52,230
have to do clear story here let's try

00:47:48,300 --> 00:47:54,950
ohhh I have the catalog here so still a

00:47:52,230 --> 00:47:57,630
bug here and I've my catalog here and

00:47:54,950 --> 00:47:59,070
again that one because the API hundred

00:47:57,630 --> 00:48:01,980
percent of the time were direct to my

00:47:59,070 --> 00:48:04,140
API is supposed to work but again use

00:48:01,980 --> 00:48:06,950
origin custom Flags Canobie testing

00:48:04,140 --> 00:48:10,080
could be implemented here that means we

00:48:06,950 --> 00:48:12,510
can do real willwill devops fun stuff

00:48:10,080 --> 00:48:16,590
here and again let's do i'm agree with

00:48:12,510 --> 00:48:18,030
that let's do proceed here and is going

00:48:16,590 --> 00:48:20,130
to switch on the post ultimate traffic

00:48:18,030 --> 00:48:24,540
on my gateways

00:48:20,130 --> 00:48:25,860
so no time left and fortunately well I

00:48:24,540 --> 00:48:28,970
can offer you

00:48:25,860 --> 00:48:30,960
it's if you're going to load my slide I

00:48:28,970 --> 00:48:33,450
don't know if it's too late to update it

00:48:30,960 --> 00:48:36,690
but anyway if you got my repo I'm gonna

00:48:33,450 --> 00:48:40,350
just show you that here on my github

00:48:36,690 --> 00:48:42,240
repository I'm gonna create like I

00:48:40,350 --> 00:48:44,340
already did that actually this repo

00:48:42,240 --> 00:48:46,890
called G mokhov you should be able to

00:48:44,340 --> 00:48:48,510
see all the if you want to reproduce the

00:48:46,890 --> 00:48:50,820
demo or the code is open source a

00:48:48,510 --> 00:48:54,030
different to retry at home and so on and

00:48:50,820 --> 00:48:55,590
I'm going to also paste the video I'm

00:48:54,030 --> 00:48:57,360
going to record the video with that plus

00:48:55,590 --> 00:48:59,070
the different practices like the

00:48:57,360 --> 00:49:00,840
telemetry I didn't talk about that and

00:48:59,070 --> 00:49:03,000
so and so on if we want to go further on

00:49:00,840 --> 00:49:05,280
that so sorry what we don't have some

00:49:03,000 --> 00:49:06,840
question I guess but if a question let

00:49:05,280 --> 00:49:08,310
me know I mean I'm just going to be

00:49:06,840 --> 00:49:11,040
around I'm gonna have another talk

00:49:08,310 --> 00:49:12,750
tomorrow about total scaling on this us

00:49:11,040 --> 00:49:14,070
and Messrs thank you very much for your

00:49:12,750 --> 00:49:18,989
time

00:49:14,070 --> 00:49:18,989

YouTube URL: https://www.youtube.com/watch?v=hNAWHZhMNf8


