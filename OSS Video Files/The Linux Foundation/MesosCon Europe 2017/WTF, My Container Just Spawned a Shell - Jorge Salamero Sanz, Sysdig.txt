Title: WTF, My Container Just Spawned a Shell - Jorge Salamero Sanz, Sysdig
Publication date: 2017-10-31
Playlist: MesosCon Europe 2017
Description: 
	WTF, My Container Just Spawned a Shell - Jorge Salamero Sanz, Sysdig

While there have been many improvements around securing containers, there is still a large gap in monitoring the behavior of containers in production. Thatâ€™s why we created Sysdig Falco, the open source behavioral activity monitor for containerized environments and works great on Mesos too!!

Sysdig Falco can detect and alert on anomalous behavior at the application, file, system, and network level. In this session get a deep dive into Falco:
- How does behavioral security differ from existing security solutions like image scanning?
- How does Falco work?
- What can it detect? Building and customizing rules
- Next steps

About Jorge Salamero
Jorge enjoys monitoring all the things, from his container clusters to writing sensors plugins and DIY projects with Raspberry PI and ESP8266. 

Currently he is part of the Sysdig team, and in the past was one of the promoters of HumanOps. When he is away from computers, you will find him walking with his 2 dogs across the countryside or driving his car through a twisted road.
Captions: 
	00:00:00,060 --> 00:00:05,060
all right get everything thanks for

00:00:03,090 --> 00:00:07,649
coming

00:00:05,060 --> 00:00:10,830
we're going ahead with a nice talk

00:00:07,649 --> 00:00:14,580
my name is Horace Elam area I work first

00:00:10,830 --> 00:00:18,060
a snake and this is about what the

00:00:14,580 --> 00:00:20,600
my container justice for Michelle so a

00:00:18,060 --> 00:00:23,910
little bit about myself first

00:00:20,600 --> 00:00:26,820
see if this makes best noise yeah much

00:00:23,910 --> 00:00:29,250
better say I've been working in open

00:00:26,820 --> 00:00:35,850
source for some time already on

00:00:29,250 --> 00:00:39,149
monitoring for a few years and you're

00:00:35,850 --> 00:00:41,700
working artistic I work on the marketing

00:00:39,149 --> 00:00:43,649
team but I consider myself a gamer so I

00:00:41,700 --> 00:00:46,110
one of those persons lucky to play with

00:00:43,649 --> 00:00:49,350
different technologies and today we are

00:00:46,110 --> 00:00:55,710
going to talk about containers security

00:00:49,350 --> 00:00:57,570
and messes so how many of you know say

00:00:55,710 --> 00:01:00,600
can you raise hands so in a little bit

00:00:57,570 --> 00:01:05,339
so alright like more than half of the

00:01:00,600 --> 00:01:07,619
audience get so you for those that you

00:01:05,339 --> 00:01:10,110
know on you denounced a stake proposal

00:01:07,619 --> 00:01:13,560
year if you remember a few years ago we

00:01:10,110 --> 00:01:15,600
created this open-source project last

00:01:13,560 --> 00:01:18,960
year we were over 1 million of downloads

00:01:15,600 --> 00:01:22,200
at an to be honest right now it's an

00:01:18,960 --> 00:01:24,479
open source product for container tall

00:01:22,200 --> 00:01:26,790
 in so it's great for looking at

00:01:24,479 --> 00:01:29,670
what's happening inside your containers

00:01:26,790 --> 00:01:31,710
it was a great success and people they

00:01:29,670 --> 00:01:33,900
were asking us this is war so we created

00:01:31,710 --> 00:01:37,350
a commercial product for doing money

00:01:33,900 --> 00:01:39,840
train pools and sauce prime integrates

00:01:37,350 --> 00:01:41,700
with these cos and messes and gives you

00:01:39,840 --> 00:01:47,369
all you need to basically monitor your

00:01:41,700 --> 00:01:50,009
clusters and from that experience we saw

00:01:47,369 --> 00:01:51,420
that that level of visibility that we

00:01:50,009 --> 00:01:53,850
can gain what's happening on what's

00:01:51,420 --> 00:01:57,450
happening inside the containers we could

00:01:53,850 --> 00:01:59,909
also do some security stuff and we

00:01:57,450 --> 00:02:02,460
started experimenting with it and we

00:01:59,909 --> 00:02:05,549
ended up with something we called cystic

00:02:02,460 --> 00:02:09,660
falco it's also all open source

00:02:05,549 --> 00:02:11,730
it's been years for why a fear folks out

00:02:09,660 --> 00:02:13,450
there with big names and it basically

00:02:11,730 --> 00:02:15,640
provides

00:02:13,450 --> 00:02:18,099
with cystic security Norris I'll give

00:02:15,640 --> 00:02:20,410
you them afterwards that went very well

00:02:18,099 --> 00:02:22,780
and we said okay let's do something else

00:02:20,410 --> 00:02:26,620
more that's why we came wait a sec

00:02:22,780 --> 00:02:29,290
secure commercial product did a run-time

00:02:26,620 --> 00:02:32,560
container security in forensics I'll

00:02:29,290 --> 00:02:34,510
show you a bit later on or if you have

00:02:32,560 --> 00:02:37,090
more questions you don't come around the

00:02:34,510 --> 00:02:39,040
base but um when when trying to

00:02:37,090 --> 00:02:40,480
implement security on containers

00:02:39,040 --> 00:02:42,069
obviously there are multiple layers

00:02:40,480 --> 00:02:47,110
things that you're going to implement

00:02:42,069 --> 00:02:49,180
but I want to focus today on scanning so

00:02:47,110 --> 00:02:51,599
what are the containers doing we can

00:02:49,180 --> 00:02:53,590
look at it at this room to perspective

00:02:51,599 --> 00:02:56,470
something that it's called static is

00:02:53,590 --> 00:02:58,989
Canon and something that we call dynamic

00:02:56,470 --> 00:03:03,690
or runtime so static a scanning

00:02:58,989 --> 00:03:07,390
basically means analyzing your image

00:03:03,690 --> 00:03:10,510
without running it why do you need this

00:03:07,390 --> 00:03:13,329
well probably even if you are not aware

00:03:10,510 --> 00:03:17,410
of your developers are using containers

00:03:13,329 --> 00:03:19,660
and because they don't look at it from a

00:03:17,410 --> 00:03:23,260
security mindset you might end up having

00:03:19,660 --> 00:03:24,639
them run docker files like those so I'm

00:03:23,260 --> 00:03:27,010
going to download this thing from the

00:03:24,639 --> 00:03:28,359
Internet not even with through HTTP I'm

00:03:27,010 --> 00:03:30,069
not going to check any signature I'm

00:03:28,359 --> 00:03:31,359
going to build inside the container and

00:03:30,069 --> 00:03:32,019
that's going to be my application

00:03:31,359 --> 00:03:34,900
awesome

00:03:32,019 --> 00:03:36,790
well not really because who's

00:03:34,900 --> 00:03:39,030
maintaining that how do you make sure

00:03:36,790 --> 00:03:42,400
there are no mobility is in that image

00:03:39,030 --> 00:03:44,170
so that's why it's a static it's Connie

00:03:42,400 --> 00:03:47,310
is going to help you it's going to look

00:03:44,170 --> 00:03:50,889
the software versions the libraries

00:03:47,310 --> 00:03:53,799
compare that against a database with

00:03:50,889 --> 00:03:56,440
vulnerability CVS or something like that

00:03:53,799 --> 00:03:58,870
are not actually the weighted containers

00:03:56,440 --> 00:04:01,389
work it's very handy for this because

00:03:58,870 --> 00:04:03,280
they basically asks you building

00:04:01,389 --> 00:04:06,639
containers you always take like a vase

00:04:03,280 --> 00:04:08,260
base image so when you detect the

00:04:06,639 --> 00:04:10,389
vulnerability in the base image it

00:04:08,260 --> 00:04:13,810
propagates across the other containers

00:04:10,389 --> 00:04:18,579
so actually this can be implemented in

00:04:13,810 --> 00:04:21,160
in a inefficient way probably you won't

00:04:18,579 --> 00:04:23,080
implement this at the security at the

00:04:21,160 --> 00:04:25,570
registry level so if you're using docker

00:04:23,080 --> 00:04:27,100
hub or you are using

00:04:25,570 --> 00:04:28,660
I don't know whatever reverse it -

00:04:27,100 --> 00:04:30,760
you're using you're probably have that

00:04:28,660 --> 00:04:34,300
there already there are a bunch of

00:04:30,760 --> 00:04:36,280
different open source for for

00:04:34,300 --> 00:04:40,180
implementing days for example correct

00:04:36,280 --> 00:04:44,260
way but is that enough to cover all the

00:04:40,180 --> 00:04:46,720
use cases well we can we say if our

00:04:44,260 --> 00:04:49,540
images passes our static is Canon

00:04:46,720 --> 00:04:52,540
insecure I will say that

00:04:49,540 --> 00:04:54,490
so because containers they are basically

00:04:52,540 --> 00:04:57,220
like black boxes it's very difficult to

00:04:54,490 --> 00:05:01,090
lick what's happening inside so we need

00:04:57,220 --> 00:05:04,060
a software we need a technique to look

00:05:01,090 --> 00:05:07,240
inside and see how the those processes

00:05:04,060 --> 00:05:11,650
inside the containers they're behaving

00:05:07,240 --> 00:05:14,890
we can just update we can enforce we can

00:05:11,650 --> 00:05:17,440
these are the use cases there are few a

00:05:14,890 --> 00:05:20,500
bunch of different tools for for looking

00:05:17,440 --> 00:05:23,410
at containers being executed at runtime

00:05:20,500 --> 00:05:26,740
so I come it's a facility in the kernel

00:05:23,410 --> 00:05:30,160
it works great but it's very basic so

00:05:26,740 --> 00:05:32,290
you can allow or blacklist

00:05:30,160 --> 00:05:34,530
some system calls when you put it

00:05:32,290 --> 00:05:38,230
together with vpf you could do some

00:05:34,530 --> 00:05:40,540
additional stuff but it still it's kind

00:05:38,230 --> 00:05:42,400
of like tricky to work on this silly

00:05:40,540 --> 00:05:45,850
knocks on a partner they work also

00:05:42,400 --> 00:05:47,380
containers but you know them already it

00:05:45,850 --> 00:05:50,770
they don't integrate with your

00:05:47,380 --> 00:05:53,680
orchestration tool they don't have high

00:05:50,770 --> 00:05:56,730
level of concepts or rules for creating

00:05:53,680 --> 00:06:00,700
the policies you have our DT from

00:05:56,730 --> 00:06:02,530
selinux and we also created Faulk how

00:06:00,700 --> 00:06:06,640
many people know Falco from here

00:06:02,530 --> 00:06:09,250
raise hands just a few less than cystic

00:06:06,640 --> 00:06:14,350
ok so this I I hope this is going to be

00:06:09,250 --> 00:06:17,910
useful so first and to understand Falco

00:06:14,350 --> 00:06:20,650
I'm going to explain a little bit about

00:06:17,910 --> 00:06:23,050
how cystic the open-source technology

00:06:20,650 --> 00:06:25,510
works and we'll move into focus

00:06:23,050 --> 00:06:28,810
cystic looks at all the system calls

00:06:25,510 --> 00:06:30,850
being executed in your hosts basically

00:06:28,810 --> 00:06:34,090
we hook into the Linux kernel trace

00:06:30,850 --> 00:06:35,650
points and that way we can see

00:06:34,090 --> 00:06:38,380
absolutely everything there there are

00:06:35,650 --> 00:06:39,460
some functions when you enter into this

00:06:38,380 --> 00:06:41,500
goal and when you actually

00:06:39,460 --> 00:06:44,320
it's cool that we can hook in there and

00:06:41,500 --> 00:06:47,890
actually also understand how much time

00:06:44,320 --> 00:06:50,050
you spend on every call unlike other

00:06:47,890 --> 00:06:52,480
solutions like for example s race that

00:06:50,050 --> 00:06:56,380
you have to attach into you into an

00:06:52,480 --> 00:06:58,630
existing or into a new process cystic

00:06:56,380 --> 00:07:00,550
approach is different so we just see

00:06:58,630 --> 00:07:02,650
everything and we will filter out stuff

00:07:00,550 --> 00:07:05,230
that we are not interested until we

00:07:02,650 --> 00:07:09,730
reach the visibility on what we want to

00:07:05,230 --> 00:07:12,040
say so this is a simple diagram of the

00:07:09,730 --> 00:07:13,540
architecture of this day so we hook at

00:07:12,040 --> 00:07:17,740
the kernel level we capture all the

00:07:13,540 --> 00:07:19,990
system goals and because containers the

00:07:17,740 --> 00:07:21,970
earth just processes running into a

00:07:19,990 --> 00:07:24,250
different user space we don't really

00:07:21,970 --> 00:07:28,600
care if it's a native application docker

00:07:24,250 --> 00:07:32,410
container rocket all of them they just

00:07:28,600 --> 00:07:35,200
work a little bit also on how the

00:07:32,410 --> 00:07:37,000
architecture of cystic works so we have

00:07:35,200 --> 00:07:39,820
at the moment it's a kernel module

00:07:37,000 --> 00:07:42,220
because basically all the facilities

00:07:39,820 --> 00:07:43,870
exist in there they were not enough to

00:07:42,220 --> 00:07:45,400
reach the visibility we wanted this

00:07:43,870 --> 00:07:47,950
might change in the future but at the

00:07:45,400 --> 00:07:50,560
moment is as it is this is a small

00:07:47,950 --> 00:07:53,800
kernel module that copies all the system

00:07:50,560 --> 00:07:56,140
calls into this rings your buffer I'm

00:07:53,800 --> 00:07:59,500
from there we have a set of libraries

00:07:56,140 --> 00:08:01,690
and user space processes that decode all

00:07:59,500 --> 00:08:03,970
the system calls from there we parse

00:08:01,690 --> 00:08:07,660
events we actually D called

00:08:03,970 --> 00:08:13,600
known protocols like HTTP or a skewer or

00:08:07,660 --> 00:08:17,890
memcache using some additional scripts

00:08:13,600 --> 00:08:20,980
that they are called chisels and looking

00:08:17,890 --> 00:08:23,710
at it firm from an instrumentation or

00:08:20,980 --> 00:08:26,230
our orchestration perspective it's going

00:08:23,710 --> 00:08:28,090
to be like that so we have the host we

00:08:26,230 --> 00:08:30,040
copy the system calls actually your

00:08:28,090 --> 00:08:33,100
events I'll show you in a sec into the

00:08:30,040 --> 00:08:36,280
ring buffer the user processes typically

00:08:33,100 --> 00:08:38,170
run into a container and that user space

00:08:36,280 --> 00:08:40,720
process talks to your on the

00:08:38,170 --> 00:08:41,980
orchestration tool these methods it's

00:08:40,720 --> 00:08:45,850
going to be the example I'll show you

00:08:41,980 --> 00:08:48,250
today and you can correlate those

00:08:45,850 --> 00:08:50,740
low-level entities of the our system

00:08:48,250 --> 00:08:52,840
calls with high-level entities that the

00:08:50,740 --> 00:08:57,850
are resources in your creation tool up

00:08:52,840 --> 00:09:00,790
occasions tasks all that so if we look

00:08:57,850 --> 00:09:02,890
at that are sharing buffer we will see

00:09:00,790 --> 00:09:05,020
something like this like an hour what we

00:09:02,890 --> 00:09:06,850
call evidence frame where we can see the

00:09:05,020 --> 00:09:08,590
different system calls and we can do a

00:09:06,850 --> 00:09:09,550
bunch of different things we can save

00:09:08,590 --> 00:09:12,340
them to a desk

00:09:09,550 --> 00:09:15,460
for our later analysis we will see yes

00:09:12,340 --> 00:09:18,970
this in a second for doing forensics we

00:09:15,460 --> 00:09:20,440
can analyze in life mole filter stuff

00:09:18,970 --> 00:09:24,610
and understand what the processes are

00:09:20,440 --> 00:09:26,260
doing but how we can use system calls to

00:09:24,610 --> 00:09:28,840
understand what's happening inside the

00:09:26,260 --> 00:09:33,940
containers well if we know how things

00:09:28,840 --> 00:09:37,780
work behind the hoods we we can know

00:09:33,940 --> 00:09:39,970
that if we find a clone or an xve system

00:09:37,780 --> 00:09:42,190
call is because a new process has been a

00:09:39,970 --> 00:09:44,830
spam so our new process has created

00:09:42,190 --> 00:09:47,980
inside that container we can use look at

00:09:44,830 --> 00:09:50,560
open and close to see if we are opening

00:09:47,980 --> 00:09:54,700
files or accepting connections on

00:09:50,560 --> 00:09:57,550
sockets sockets and conet I said to look

00:09:54,700 --> 00:10:00,010
at network activity this is or this is a

00:09:57,550 --> 00:10:01,570
way basically you can understand what's

00:10:00,010 --> 00:10:04,830
happening inside looking at the system

00:10:01,570 --> 00:10:07,630
calls but we will see in a sec that with

00:10:04,830 --> 00:10:09,340
cystic fall Co you don't need to go that

00:10:07,630 --> 00:10:12,850
deep because we provide an abstraction

00:10:09,340 --> 00:10:16,150
on top all these things and to be

00:10:12,850 --> 00:10:18,670
completely fer all these activities or

00:10:16,150 --> 00:10:21,730
events as we put in town in the ring

00:10:18,670 --> 00:10:23,980
buffer they are not just plain system

00:10:21,730 --> 00:10:26,590
course as you would see from Estrella

00:10:23,980 --> 00:10:29,380
spirit actually we put a lot of metadata

00:10:26,590 --> 00:10:31,660
or contextual information so the

00:10:29,380 --> 00:10:34,420
libraries on the user space they can

00:10:31,660 --> 00:10:36,850
understand they can reconstruct what's

00:10:34,420 --> 00:10:39,730
happening so for example we can see the

00:10:36,850 --> 00:10:42,370
process from that a specific system call

00:10:39,730 --> 00:10:45,280
came the foreign processed a remote IP

00:10:42,370 --> 00:10:48,040
address if it's a system calls or the

00:10:45,280 --> 00:10:51,640
air effect in the socket so that's what

00:10:48,040 --> 00:10:52,720
provides added level of visibility so

00:10:51,640 --> 00:10:56,830
now that you have a little bit of

00:10:52,720 --> 00:10:59,980
understanding of Falco of cystic sorry

00:10:56,830 --> 00:11:02,950
let's look how we can implement a

00:10:59,980 --> 00:11:05,410
security tool on top of this so looking

00:11:02,950 --> 00:11:06,760
at how the system calls are doing what

00:11:05,410 --> 00:11:10,029
the processes are to

00:11:06,760 --> 00:11:14,470
we can detect suspicious activity we

00:11:10,029 --> 00:11:17,800
will define that inner altar dad's rule

00:11:14,470 --> 00:11:19,990
said it's basically created using the

00:11:17,800 --> 00:11:22,060
filtering language of sestak which is

00:11:19,990 --> 00:11:24,010
very similar to TCP done but more

00:11:22,060 --> 00:11:25,990
probably all of you are going to be

00:11:24,010 --> 00:11:28,990
familiar with it works very well in

00:11:25,990 --> 00:11:31,350
containers because this way of looking

00:11:28,990 --> 00:11:34,540
at the processes at the host level so

00:11:31,350 --> 00:11:36,610
even if our users way process is in a

00:11:34,540 --> 00:11:38,050
container from there we are going to see

00:11:36,610 --> 00:11:40,540
what's happening in all the containers

00:11:38,050 --> 00:11:43,600
that they are they are being executed in

00:11:40,540 --> 00:11:45,880
the same hosts on Falco you can

00:11:43,600 --> 00:11:48,880
configure notifications when any of

00:11:45,880 --> 00:11:51,399
these rules there trigger like sending

00:11:48,880 --> 00:11:53,620
out commands or putting things into a

00:11:51,399 --> 00:11:57,459
phone and it was as I was saying at the

00:11:53,620 --> 00:11:59,260
beginning it is entirely open source so

00:11:57,459 --> 00:12:00,490
a few examples and I'm looking but we

00:11:59,260 --> 00:12:04,630
catch my screen here doesn't work very

00:12:00,490 --> 00:12:07,750
well so if we want to like a shell a

00:12:04,630 --> 00:12:09,880
bash shell running into into a container

00:12:07,750 --> 00:12:12,310
we can write a rule like that

00:12:09,880 --> 00:12:14,200
so container ID is not the hole so it's

00:12:12,310 --> 00:12:16,089
not it's a process of it's different

00:12:14,200 --> 00:12:18,040
running a different user space and the

00:12:16,089 --> 00:12:20,829
process name is that we can actually

00:12:18,040 --> 00:12:25,029
create those arrays and do much against

00:12:20,829 --> 00:12:28,630
those who if a foreign directory is in

00:12:25,029 --> 00:12:32,649
this list tell me about that and we do a

00:12:28,630 --> 00:12:35,500
write system call if we change the the

00:12:32,649 --> 00:12:37,089
namespace of any specific process and

00:12:35,500 --> 00:12:39,220
it's not docker

00:12:37,089 --> 00:12:41,500
autistic which are the only privileged

00:12:39,220 --> 00:12:44,860
guys in my host there's probably

00:12:41,500 --> 00:12:48,959
something wrong happening so these are

00:12:44,860 --> 00:12:52,870
just a few examples of different things

00:12:48,959 --> 00:12:56,680
once these rules trigger you can send

00:12:52,870 --> 00:13:00,310
notifications to syslog file standard

00:12:56,680 --> 00:13:03,250
output or even to any command so you can

00:13:00,310 --> 00:13:08,110
send an email if occasion or our web

00:13:03,250 --> 00:13:12,459
hook post notification whatever it is so

00:13:08,110 --> 00:13:15,839
with this I finish the boring slides and

00:13:12,459 --> 00:13:19,089
I'm going to jump into the dangerous

00:13:15,839 --> 00:13:20,010
territories of demos first I'm going to

00:13:19,089 --> 00:13:24,640
demo

00:13:20,010 --> 00:13:27,640
in detail astok Falco the OpenSocial

00:13:24,640 --> 00:13:31,720
solution and then we'll Lake some of the

00:13:27,640 --> 00:13:37,350
cool magic of cystic secure all right so

00:13:31,720 --> 00:13:40,450
I have here some configuration files

00:13:37,350 --> 00:13:44,350
Falco DoCoMo is my main configuration

00:13:40,450 --> 00:13:48,300
file for Falco just a bunch of different

00:13:44,350 --> 00:13:50,650
things like which are where are my

00:13:48,300 --> 00:13:53,530
configuration files where I'm sending

00:13:50,650 --> 00:13:57,000
the notifications this is like pretty

00:13:53,530 --> 00:14:01,180
much standard out of the box Falk rules

00:13:57,000 --> 00:14:03,360
contains the default rule set I'll show

00:14:01,180 --> 00:14:07,560
you later how this is share all the same

00:14:03,360 --> 00:14:11,140
syntax for this language is the same in

00:14:07,560 --> 00:14:16,690
Falco on insisting secure here this is a

00:14:11,140 --> 00:14:19,750
super-long file where you can define all

00:14:16,690 --> 00:14:22,780
these rosettes and we can basically

00:14:19,750 --> 00:14:26,920
define macros or aliases to simplify

00:14:22,780 --> 00:14:29,140
things so if we if we live at the lowest

00:14:26,920 --> 00:14:33,220
level since ik filtering language all

00:14:29,140 --> 00:14:36,010
right needs to be either opening or the

00:14:33,220 --> 00:14:39,490
system called open R and we need to do

00:14:36,010 --> 00:14:42,100
or the open with the right flag on and

00:14:39,490 --> 00:14:44,080
it needs to be a file so instead of

00:14:42,100 --> 00:14:46,180
having to write that all the time we can

00:14:44,080 --> 00:14:49,470
define it on a marker so we can work at

00:14:46,180 --> 00:14:53,290
a higher level so this is full of

00:14:49,470 --> 00:14:55,720
helpers macros and definitions so that's

00:14:53,290 --> 00:15:00,210
fine you're going to work into a

00:14:55,720 --> 00:15:06,700
different file that looks like this and

00:15:00,210 --> 00:15:10,330
here I have defined our standard rule

00:15:06,700 --> 00:15:13,120
that I use a lot of times so all right I

00:15:10,330 --> 00:15:14,950
got this container and I know the

00:15:13,120 --> 00:15:17,920
processes that need to run in that

00:15:14,950 --> 00:15:20,350
container if something else

00:15:17,920 --> 00:15:23,080
that is not that process runs for any

00:15:20,350 --> 00:15:25,420
recent say notification all right in

00:15:23,080 --> 00:15:27,460
this case I'm looking look at let's look

00:15:25,420 --> 00:15:30,310
at the well role is just the name of the

00:15:27,460 --> 00:15:32,680
role description for well it's really

00:15:30,310 --> 00:15:33,670
interesting here is this condition so

00:15:32,680 --> 00:15:36,010
basically I'm

00:15:33,670 --> 00:15:39,250
in for a new process that has been

00:15:36,010 --> 00:15:42,280
created all right which is this first

00:15:39,250 --> 00:15:44,290
Macra yes I can I warned this to be

00:15:42,280 --> 00:15:45,670
running inside a container I don't want

00:15:44,290 --> 00:15:49,390
to look at the processes natively on

00:15:45,670 --> 00:15:53,080
host arm fooling in this case already

00:15:49,390 --> 00:15:57,640
some container metadata in this case the

00:15:53,080 --> 00:16:00,220
counter image and I'm looking that it's

00:15:57,640 --> 00:16:03,580
called nginx alright

00:16:00,220 --> 00:16:06,790
and finally if all the processes or if

00:16:03,580 --> 00:16:09,400
there is any process that it's not all

00:16:06,790 --> 00:16:11,740
end connects in that container

00:16:09,400 --> 00:16:13,270
I'll trigger a notification some of you

00:16:11,740 --> 00:16:15,850
probably are going to say oh you could

00:16:13,270 --> 00:16:18,400
you can rename the name of a process yes

00:16:15,850 --> 00:16:19,480
we have a role to detect process

00:16:18,400 --> 00:16:22,210
renaming themselves

00:16:19,480 --> 00:16:25,150
okay I'm going to trying to keep this

00:16:22,210 --> 00:16:29,260
sample I'll send an alert message like

00:16:25,150 --> 00:16:31,360
this and some priority so two on the I'm

00:16:29,260 --> 00:16:34,320
running this at the moment in my life in

00:16:31,360 --> 00:16:37,840
my laptop to give you things simple and

00:16:34,320 --> 00:16:42,430
how you run Falco is basically like this

00:16:37,840 --> 00:16:44,860
it runs as a container where you run the

00:16:42,430 --> 00:16:48,520
Falco container privileged mold because

00:16:44,860 --> 00:16:51,040
it's the old kernel module I mourned a

00:16:48,520 --> 00:16:54,250
bunch of different volumes to to get

00:16:51,040 --> 00:16:57,100
information about the hosts and I mount

00:16:54,250 --> 00:17:02,100
my configuration files so I'm going to

00:16:57,100 --> 00:17:05,410
do that going to the Randall container

00:17:02,100 --> 00:17:14,370
and then here in this side I'm going to

00:17:05,410 --> 00:17:18,610
run an any next container I call it and

00:17:14,370 --> 00:17:26,580
so we need to look at the output here so

00:17:18,610 --> 00:17:26,580
now I'm going to do going to run

00:17:27,970 --> 00:17:30,360
sorry

00:17:36,350 --> 00:17:43,789
all right I'm going to run a shell in

00:17:40,370 --> 00:17:48,289
that container so I'm here inside my

00:17:43,789 --> 00:17:50,630
nginx container and I can see how there

00:17:48,289 --> 00:17:53,360
was already a notification which is part

00:17:50,630 --> 00:17:56,179
of the default rule set that saying hey

00:17:53,360 --> 00:17:58,100
a new shell has been created in this

00:17:56,179 --> 00:18:01,370
container also actually has been

00:17:58,100 --> 00:18:03,679
attached and this is the user who

00:18:01,370 --> 00:18:06,799
executed it and this is a container ID

00:18:03,679 --> 00:18:10,659
the process it was a new process this is

00:18:06,799 --> 00:18:14,029
basically what's been executed all right

00:18:10,659 --> 00:18:16,940
but now since I have created that rule

00:18:14,029 --> 00:18:21,320
that says if any other process running

00:18:16,940 --> 00:18:24,409
in here exists and it is not calling

00:18:21,320 --> 00:18:33,620
next trigger a roll so anything ix acute

00:18:24,409 --> 00:18:37,370
like LS or god resolved if we let back

00:18:33,620 --> 00:18:40,250
out the output we can see how we are

00:18:37,370 --> 00:18:42,980
getting those messages in there okay so

00:18:40,250 --> 00:18:44,620
this is the use case of volcko gaining

00:18:42,980 --> 00:18:48,529
visibility inside the containers

00:18:44,620 --> 00:18:50,509
creating our rules head or a policy of

00:18:48,529 --> 00:18:56,570
things that we want to look for and

00:18:50,509 --> 00:18:58,669
trigger alerts on those so as I was

00:18:56,570 --> 00:19:02,240
saying at the beginning this is pretty

00:18:58,669 --> 00:19:04,730
unique there are big names B companies

00:19:02,240 --> 00:19:06,460
already using this but at the end of the

00:19:04,730 --> 00:19:10,190
day is like kind of like a

00:19:06,460 --> 00:19:12,340
do-it-yourself thing so some some people

00:19:10,190 --> 00:19:16,340
you work with they were asking for

00:19:12,340 --> 00:19:20,480
something easier to build and this is

00:19:16,340 --> 00:19:23,659
where we came up with testing secure

00:19:20,480 --> 00:19:25,159
lint is a very quick demo on something

00:19:23,659 --> 00:19:27,169
similar so what we can see here is a

00:19:25,159 --> 00:19:29,840
different class a cluster with a few

00:19:27,169 --> 00:19:31,879
containers running inside it's not

00:19:29,840 --> 00:19:35,450
doesn't really matter actually I want to

00:19:31,879 --> 00:19:40,850
show you so you believe me this is my

00:19:35,450 --> 00:19:44,539
interface so with DCOs mesos and I have

00:19:40,850 --> 00:19:47,059
here a wordpress application with a

00:19:44,539 --> 00:19:48,490
client that's making fake requests my

00:19:47,059 --> 00:19:51,720
application

00:19:48,490 --> 00:19:56,760
than the database and also have deployed

00:19:51,720 --> 00:20:00,100
Cystic in all my notes using marathon so

00:19:56,760 --> 00:20:03,370
when I'm looking at this from an

00:20:00,100 --> 00:20:07,110
application perspective see all the

00:20:03,370 --> 00:20:11,620
containers but I'm interested in looking

00:20:07,110 --> 00:20:13,750
this one okay so here you can see how

00:20:11,620 --> 00:20:16,990
there is this client talking to

00:20:13,750 --> 00:20:23,110
WordPress at the same time talks to

00:20:16,990 --> 00:20:27,750
MySQL so I decided to create a rule to

00:20:23,110 --> 00:20:32,910
look for a specific anomalous activity

00:20:27,750 --> 00:20:37,200
so one of them we are going to see

00:20:32,910 --> 00:20:40,480
executed it's going to be this one so

00:20:37,200 --> 00:20:43,570
the name new she'll run in a container

00:20:40,480 --> 00:20:46,179
or description I got here Sun severity

00:20:43,570 --> 00:20:48,340
where I am applying this I can I can

00:20:46,179 --> 00:20:51,970
leverage any marathon metadata message

00:20:48,340 --> 00:20:54,460
metadata for this the rules if we look

00:20:51,970 --> 00:20:56,470
at the rules editor you see it's exactly

00:20:54,460 --> 00:20:59,350
the same language we could see with

00:20:56,470 --> 00:21:02,800
Falco so you can actually reuse all your

00:20:59,350 --> 00:21:06,250
follicle count fake and which is very

00:21:02,800 --> 00:21:09,970
interesting is what actions because with

00:21:06,250 --> 00:21:12,300
Falco you can just take an ax to send

00:21:09,970 --> 00:21:16,300
out a notification that's it

00:21:12,300 --> 00:21:18,670
obviously you can put that into an

00:21:16,300 --> 00:21:21,550
orchestration tool and then take actions

00:21:18,670 --> 00:21:24,580
modify what are doing your containers

00:21:21,550 --> 00:21:26,530
but here we can we have already made it

00:21:24,580 --> 00:21:28,780
dividable for you so we can do two three

00:21:26,530 --> 00:21:30,970
things so we can stop or kill the

00:21:28,780 --> 00:21:34,090
container to prevent the attacker from

00:21:30,970 --> 00:21:37,570
breaking in actually a when thinking on

00:21:34,090 --> 00:21:39,880
containers uptime it's not something we

00:21:37,570 --> 00:21:42,220
should be proud of the length of time

00:21:39,880 --> 00:21:44,470
that your containers have the less

00:21:42,220 --> 00:21:46,650
likely is that they are being hacked so

00:21:44,470 --> 00:21:50,170
we need to change into your different

00:21:46,650 --> 00:21:54,370
paradigm we can also post a container if

00:21:50,170 --> 00:21:56,260
it's a database or something else has

00:21:54,370 --> 00:21:57,550
been a legacy application you know

00:21:56,260 --> 00:22:00,910
something that cannot be killed

00:21:57,550 --> 00:22:02,080
immediately and finally we can create a

00:22:00,910 --> 00:22:03,880
sense they capture so

00:22:02,080 --> 00:22:06,429
you remember the beginning when I was

00:22:03,880 --> 00:22:08,679
showing you the architecture of Falco we

00:22:06,429 --> 00:22:10,679
could get that event stream all those

00:22:08,679 --> 00:22:13,720
system calls plus metadata information

00:22:10,679 --> 00:22:15,700
analyze it or dump it into a file

00:22:13,720 --> 00:22:18,730
so this is something we can do and

00:22:15,700 --> 00:22:22,059
actually a very cool feature of secure

00:22:18,730 --> 00:22:26,710
is that we can include a number of

00:22:22,059 --> 00:22:30,490
seconds before the alert that

00:22:26,710 --> 00:22:33,490
notification was fired so that's going

00:22:30,490 --> 00:22:35,980
to help us to understand in in the

00:22:33,490 --> 00:22:40,059
context of security for example how the

00:22:35,980 --> 00:22:42,669
attacker hacked into my container so in

00:22:40,059 --> 00:22:44,590
the system called foil I'm going to have

00:22:42,669 --> 00:22:46,899
hopefully that information okay

00:22:44,590 --> 00:22:49,029
well it looks like a very small time

00:22:46,899 --> 00:22:50,620
five seconds we need to understand that

00:22:49,029 --> 00:22:52,990
when attackers they are hacking into

00:22:50,620 --> 00:22:56,289
containers because the as they know they

00:22:52,990 --> 00:22:59,049
are highly volatile all those attacks

00:22:56,289 --> 00:23:01,659
attempt the are most probably automated

00:22:59,049 --> 00:23:03,460
so it shouldn't be that bad in any way

00:23:01,659 --> 00:23:06,360
that's a compromise you're going to have

00:23:03,460 --> 00:23:09,519
between memory assigned into the agent

00:23:06,360 --> 00:23:11,799
versus time that you want to gather

00:23:09,519 --> 00:23:15,549
there obviously after the notification

00:23:11,799 --> 00:23:19,019
you can include as many seconds as you

00:23:15,549 --> 00:23:21,720
want we also can send you notifications

00:23:19,019 --> 00:23:25,510
anywhere really

00:23:21,720 --> 00:23:31,950
so what I'm going to do now is also show

00:23:25,510 --> 00:23:34,750
you a roll I created this morning which

00:23:31,950 --> 00:23:37,539
is actually going to the staff so they

00:23:34,750 --> 00:23:41,620
similar thing will here I'm looking at

00:23:37,539 --> 00:23:44,620
someone writing in a binary there okay

00:23:41,620 --> 00:23:47,830
so who should modify a binary dear if

00:23:44,620 --> 00:23:50,559
the container has been built a talker at

00:23:47,830 --> 00:23:53,710
build time and what I'm going to do is

00:23:50,559 --> 00:23:58,720
to kill the container and take a capture

00:23:53,710 --> 00:23:59,990
file so now I'm going to minimize all

00:23:58,720 --> 00:24:03,089
these

00:23:59,990 --> 00:24:03,089
[Music]

00:24:05,940 --> 00:24:13,020
hopefully ssh into the right now

00:24:09,530 --> 00:24:16,080
so when looking if we look at these with

00:24:13,020 --> 00:24:19,130
perspective I talked about static as

00:24:16,080 --> 00:24:22,920
cannon at the beginning and then this

00:24:19,130 --> 00:24:26,490
runtime or dynamic as cannon so it's

00:24:22,920 --> 00:24:28,280
safe to assume that all these my images

00:24:26,490 --> 00:24:32,430
are running in production in my cluster

00:24:28,280 --> 00:24:35,030
they are safe they don't have any well

00:24:32,430 --> 00:24:38,210
known vulnerabilities but the still

00:24:35,030 --> 00:24:40,350
there are two use cases for example

00:24:38,210 --> 00:24:43,760
detecting a shell run in a container

00:24:40,350 --> 00:24:46,050
number one someone using a third a

00:24:43,760 --> 00:24:47,880
vulnerability and doing a command

00:24:46,050 --> 00:24:51,060
injection injection sorry

00:24:47,880 --> 00:24:54,030
the other one it's someone like me who

00:24:51,060 --> 00:25:00,210
has decided to SSH into a production

00:24:54,030 --> 00:25:03,540
server and now do docker X sake into the

00:25:00,210 --> 00:25:06,480
specific container sorry that's not the

00:25:03,540 --> 00:25:09,540
right ID and start hotfix and stuff

00:25:06,480 --> 00:25:11,550
because I can do it why why I shouldn't

00:25:09,540 --> 00:25:15,720
be doing it ha this isn't they use in

00:25:11,550 --> 00:25:18,930
between this but you can do it say I

00:25:15,720 --> 00:25:21,750
gotta I executed the shell inside the

00:25:18,930 --> 00:25:26,430
container I'm looking at the files but

00:25:21,750 --> 00:25:31,740
now if I go back to Falco no filter in

00:25:26,430 --> 00:25:35,400
here you see this box yellow now there

00:25:31,740 --> 00:25:39,030
is one that basically means if we switch

00:25:35,400 --> 00:25:42,360
into this beer is that someone run

00:25:39,030 --> 00:25:44,310
executed a shell in the container and we

00:25:42,360 --> 00:25:46,260
could automatically detect it and give

00:25:44,310 --> 00:25:48,630
you some information like when this

00:25:46,260 --> 00:25:51,780
happened so just a few seconds ago

00:25:48,630 --> 00:25:54,840
all the severity this policy that was

00:25:51,780 --> 00:25:56,910
trigger they container image and the

00:25:54,840 --> 00:25:59,580
container name the house where was the

00:25:56,910 --> 00:26:02,810
second security the container details on

00:25:59,580 --> 00:26:06,570
the alerts details actually if I go here

00:26:02,810 --> 00:26:09,120
fully you see you can see the last

00:26:06,570 --> 00:26:12,630
command that I executed so this is

00:26:09,120 --> 00:26:16,050
really really cool to understand what

00:26:12,630 --> 00:26:19,080
are the attackers or anyone really even

00:26:16,050 --> 00:26:19,830
someone from your team in society exact

00:26:19,080 --> 00:26:21,690
into a

00:26:19,830 --> 00:26:23,850
dinner or do anything really I'll

00:26:21,690 --> 00:26:26,190
connect to a remote server and start

00:26:23,850 --> 00:26:28,740
meaning white coins whatever the hell

00:26:26,190 --> 00:26:31,320
they are doing inside your container but

00:26:28,740 --> 00:26:36,149
we can do more if you remember that

00:26:31,320 --> 00:26:39,809
policy I created here I said okay if I

00:26:36,149 --> 00:26:42,000
write below any binary directory I want

00:26:39,809 --> 00:26:44,929
to kill the I want to stop kill the

00:26:42,000 --> 00:26:50,429
container so all right let's do that

00:26:44,929 --> 00:26:55,350
so I'm going to do this because going to

00:26:50,429 --> 00:26:58,289
do a cover been hacked execute that and

00:26:55,350 --> 00:27:02,340
you see that it didn't do anything else

00:26:58,289 --> 00:27:05,279
right just a straight away the container

00:27:02,340 --> 00:27:10,620
has been killed and actually let's look

00:27:05,279 --> 00:27:15,690
at this idea and look hopefully has been

00:27:10,620 --> 00:27:18,750
a schedule in the same no yes

00:27:15,690 --> 00:27:24,210
so if you see this is the previous

00:27:18,750 --> 00:27:27,090
container which was exited was kill me

00:27:24,210 --> 00:27:29,190
so started anyone automatically is

00:27:27,090 --> 00:27:33,149
orchestrated it's safe it's in principle

00:27:29,190 --> 00:27:35,250
the best way to stop an attack in a

00:27:33,149 --> 00:27:38,340
containerized application is used to

00:27:35,250 --> 00:27:40,559
kill it because the orchestration tool

00:27:38,340 --> 00:27:41,100
will create a new container with a clean

00:27:40,559 --> 00:27:48,200
image

00:27:41,100 --> 00:27:48,200
alright so now if I go here

00:27:53,180 --> 00:28:03,920
three minutes ago all right so we can

00:28:00,170 --> 00:28:10,370
see that in addition to running a shell

00:28:03,920 --> 00:28:14,450
I cut these other alert trigger someone

00:28:10,370 --> 00:28:18,950
modified a word press container so we

00:28:14,450 --> 00:28:21,170
can see the commands hopefully which is

00:28:18,950 --> 00:28:25,850
the same thing because I didn't run any

00:28:21,170 --> 00:28:28,580
other stuff if I go Park there is a very

00:28:25,850 --> 00:28:33,110
very neat feature so we have seen how

00:28:28,580 --> 00:28:35,960
with this so far we can stop the attacks

00:28:33,110 --> 00:28:39,440
killing the containers basically we can

00:28:35,960 --> 00:28:40,760
also see what it was executed in the

00:28:39,440 --> 00:28:42,770
case of running a shell if it's a

00:28:40,760 --> 00:28:44,450
process doing an unexpected annoying

00:28:42,770 --> 00:28:46,670
connection it doesn't make sense looking

00:28:44,450 --> 00:28:47,680
at the commands put a Cell we can do the

00:28:46,670 --> 00:28:50,930
following

00:28:47,680 --> 00:28:53,780
all these system calls that they can be

00:28:50,930 --> 00:28:55,880
dumped into a file if we configure that

00:28:53,780 --> 00:29:00,200
in our policy it's going to be a PI

00:28:55,880 --> 00:29:05,600
level here and B captures and we can

00:29:00,200 --> 00:29:08,270
open them with a near UI a new Cystic

00:29:05,600 --> 00:29:11,060
you are not it's called sitting inspect

00:29:08,270 --> 00:29:14,360
in this case as the inspect it's

00:29:11,060 --> 00:29:16,730
available in here for this is entirely

00:29:14,360 --> 00:29:20,510
open source as well so you can actually

00:29:16,730 --> 00:29:24,260
install it in your Linux host or in your

00:29:20,510 --> 00:29:27,050
Mac laptops as well and use it for

00:29:24,260 --> 00:29:31,490
troubleshooting as you're long used to

00:29:27,050 --> 00:29:34,010
but now use it for post-mortem analysis

00:29:31,490 --> 00:29:36,860
and forensics of your container

00:29:34,010 --> 00:29:39,410
interactions for the ones who need

00:29:36,860 --> 00:29:42,100
Cystic before if you remember we have

00:29:39,410 --> 00:29:46,550
three options like the common line tool

00:29:42,100 --> 00:29:50,390
is required to use all those hackish

00:29:46,550 --> 00:29:53,240
filters in a TCP Thomas tile or wicked

00:29:50,390 --> 00:29:57,200
years since a state which was a and

00:29:53,240 --> 00:29:59,600
curses UI similar to H so still it was

00:29:57,200 --> 00:30:02,690
kind of like funky two years because he

00:29:59,600 --> 00:30:06,770
had to understand all those low level

00:30:02,690 --> 00:30:10,700
concepts file descriptors

00:30:06,770 --> 00:30:14,510
called system call errors all that with

00:30:10,700 --> 00:30:17,210
cystic inspect we have take a slightly

00:30:14,510 --> 00:30:19,850
different approach where basically the

00:30:17,210 --> 00:30:24,320
idea is that we are going to help you to

00:30:19,850 --> 00:30:27,560
correlate high level concepts lie alerts

00:30:24,320 --> 00:30:31,460
coming from cystic secure processes

00:30:27,560 --> 00:30:34,220
running containers or any like foil

00:30:31,460 --> 00:30:36,530
activity in the file system Network

00:30:34,220 --> 00:30:40,100
activity as you can see here network

00:30:36,530 --> 00:30:42,320
occasions security commands even

00:30:40,100 --> 00:30:46,610
performance and locks all things that

00:30:42,320 --> 00:30:49,850
anyone with basic the Bob's or lineage

00:30:46,610 --> 00:30:51,590
concepts can understand down to all the

00:30:49,850 --> 00:30:54,230
system calls and if you have a look at

00:30:51,590 --> 00:30:57,550
here in this file we have five point

00:30:54,230 --> 00:31:01,790
five thousand also D it's a lot of them

00:30:57,550 --> 00:31:08,420
the idea now is that you can click on

00:31:01,790 --> 00:31:12,920
any of these boxes and correlate all the

00:31:08,420 --> 00:31:16,790
information and we can see the see it

00:31:12,920 --> 00:31:20,990
down here and this in this a specific

00:31:16,790 --> 00:31:23,210
capture fall there are there a couple of

00:31:20,990 --> 00:31:26,990
things I want to show you here we can

00:31:23,210 --> 00:31:31,460
see how there are some patterns of foil

00:31:26,990 --> 00:31:36,320
activity in here this is an we have the

00:31:31,460 --> 00:31:39,530
alert here this is a clear example of my

00:31:36,320 --> 00:31:42,380
capture including a number of seconds

00:31:39,530 --> 00:31:43,280
before the actual alert was trigger so

00:31:42,380 --> 00:31:45,680
it works

00:31:43,280 --> 00:31:49,130
everything has been life the other thing

00:31:45,680 --> 00:31:53,050
we have on top is the system foiled and

00:31:49,130 --> 00:31:58,000
it was modified so using these our

00:31:53,050 --> 00:32:02,030
timeline it's going TV easy from our

00:31:58,000 --> 00:32:04,130
humans cyber need to correlate activity

00:32:02,030 --> 00:32:12,230
looking at these graphs and actually I

00:32:04,130 --> 00:32:14,810
can whoops I can use these sliders to

00:32:12,230 --> 00:32:17,480
focus my approach are around the

00:32:14,810 --> 00:32:18,330
specific time frame I'm interested at

00:32:17,480 --> 00:32:21,330
looking

00:32:18,330 --> 00:32:26,480
and with all these boxes I have here in

00:32:21,330 --> 00:32:29,880
the top I can actually isolate them and

00:32:26,480 --> 00:32:33,150
look at for example all the activities

00:32:29,880 --> 00:32:35,250
so in this case when my alert was

00:32:33,150 --> 00:32:39,120
trigger chief files they were modified

00:32:35,250 --> 00:32:41,820
number one the file the binary file and

00:32:39,120 --> 00:32:43,860
I put them stash being a slash hack the

00:32:41,820 --> 00:32:48,390
other one bash automatically wrote the

00:32:43,860 --> 00:32:51,890
history file but I can do even more so I

00:32:48,390 --> 00:32:55,500
can go into this specific file and

00:32:51,890 --> 00:32:58,800
decode the system calls they wrote that

00:32:55,500 --> 00:32:59,180
file and see the actual contents of the

00:32:58,800 --> 00:33:02,880
file

00:32:59,180 --> 00:33:04,770
alright this is very very powerful this

00:33:02,880 --> 00:33:07,050
is the first tool that's going to give

00:33:04,770 --> 00:33:09,150
you all the information you need to do

00:33:07,050 --> 00:33:11,940
that post-mortem analysis to understand

00:33:09,150 --> 00:33:14,280
how the hack into your container what

00:33:11,940 --> 00:33:16,770
they did what kind of information they

00:33:14,280 --> 00:33:21,780
could access credentials certificate

00:33:16,770 --> 00:33:23,700
database and see if they actually send

00:33:21,780 --> 00:33:26,610
that information somewhere also you had

00:33:23,700 --> 00:33:28,860
a date lake all that even if your

00:33:26,610 --> 00:33:31,530
container doesn't exist anymore because

00:33:28,860 --> 00:33:33,750
as you see as you saw we kill that

00:33:31,530 --> 00:33:36,380
container doesn't exist anymore but we

00:33:33,750 --> 00:33:40,610
could do all this trouble hand with

00:33:36,380 --> 00:33:43,470
seasick inspect another cool example

00:33:40,610 --> 00:33:46,140
actually it's part of our demo well

00:33:43,470 --> 00:33:52,290
since I have some time I wanted to show

00:33:46,140 --> 00:33:58,010
you is this hopefully is this one that

00:33:52,290 --> 00:34:02,430
we got here yes now it's nothing here

00:33:58,010 --> 00:34:08,730
capture falls even another one hour so

00:34:02,430 --> 00:34:14,000
they should be one day let me see where

00:34:08,730 --> 00:34:26,060
do we have a container let me see

00:34:14,000 --> 00:34:28,280
it's going to be here not last hour one

00:34:26,060 --> 00:34:31,700
day yeah

00:34:28,280 --> 00:34:34,580
so in this case it was kind of like a

00:34:31,700 --> 00:34:39,919
more complex attacked so we saw how

00:34:34,580 --> 00:34:42,830
someone killed our DUI shell injection

00:34:39,919 --> 00:34:46,099
or execute a shell download a rootkit

00:34:42,830 --> 00:34:48,320
and that person uncompressed the rootkit

00:34:46,099 --> 00:34:51,560
he couldn't proceed any further because

00:34:48,320 --> 00:34:55,629
we kill the container but going back

00:34:51,560 --> 00:34:55,629
into my capture file

00:35:02,570 --> 00:35:10,750
I can do again these post-mortem

00:35:05,780 --> 00:35:14,540
analysis bringing in my notification my

00:35:10,750 --> 00:35:17,960
final activity my network activity and

00:35:14,540 --> 00:35:21,080
for example commands so in this case I

00:35:17,960 --> 00:35:24,230
can see how the commands they were

00:35:21,080 --> 00:35:27,590
executed basically at the same time that

00:35:24,230 --> 00:35:30,860
my alert did fire and the was like a

00:35:27,590 --> 00:35:32,780
spike of download traffic so in this

00:35:30,860 --> 00:35:34,580
case instead of filtering for foiled

00:35:32,780 --> 00:35:37,040
activity I'm going to filter the

00:35:34,580 --> 00:35:39,500
commands and I can see all those

00:35:37,040 --> 00:35:42,950
commands again the show the download the

00:35:39,500 --> 00:35:48,020
uncompress but now I can filter on this

00:35:42,950 --> 00:35:50,120
a specific command or process and here

00:35:48,020 --> 00:35:53,660
on the left side we have different beers

00:35:50,120 --> 00:35:55,760
like connections it was a char it didn't

00:35:53,660 --> 00:35:58,310
have any connection directories file

00:35:55,760 --> 00:36:00,620
errors system calls I can look at the

00:35:58,310 --> 00:36:02,120
system calls but unless you know how

00:36:00,620 --> 00:36:04,400
things work the innocent of me

00:36:02,120 --> 00:36:06,890
meaningful but looking up the files

00:36:04,400 --> 00:36:09,020
everyone is going to understand and see

00:36:06,890 --> 00:36:16,180
how to find out what was uncompressed

00:36:09,020 --> 00:36:16,180
and I can go to any of these files

00:36:17,290 --> 00:36:24,370
decoded actually put it in a beautiful

00:36:20,450 --> 00:36:27,260
way I say and Rick being able to rebuild

00:36:24,370 --> 00:36:30,530
reconstruct all the components of that a

00:36:27,260 --> 00:36:34,370
specific road kid the my attacker

00:36:30,530 --> 00:36:39,800
executed so this is everything I wanted

00:36:34,370 --> 00:36:41,330
to show you in this presentation do they

00:36:39,800 --> 00:36:48,260
have a thank you slide something like

00:36:41,330 --> 00:36:51,950
that probably a yeah so this is

00:36:48,260 --> 00:36:55,010
everything I had for today Falco it's

00:36:51,950 --> 00:36:57,890
it's as I said this open-source

00:36:55,010 --> 00:37:00,440
community based project we have

00:36:57,890 --> 00:37:03,440
contributions for many people if you

00:37:00,440 --> 00:37:06,110
feel if you you are not into writing

00:37:03,440 --> 00:37:09,380
code just contribute in new roles for

00:37:06,110 --> 00:37:12,170
any of the applications you work we will

00:37:09,380 --> 00:37:14,870
be very very happy to accept your pull

00:37:12,170 --> 00:37:15,530
requests you can also join our slack

00:37:14,870 --> 00:37:18,740
community

00:37:15,530 --> 00:37:20,180
this cars there is a mailing list but

00:37:18,740 --> 00:37:23,390
you know these days these things are

00:37:20,180 --> 00:37:27,110
kind of like low volume and if you like

00:37:23,390 --> 00:37:30,590
cystic Sakura you can go to the booth

00:37:27,110 --> 00:37:34,030
and talk to us about it and now I think

00:37:30,590 --> 00:37:37,030
we have a few minutes for questions so

00:37:34,030 --> 00:37:37,030
anyone

00:37:42,960 --> 00:37:46,700
hello yes it is

00:37:47,640 --> 00:37:52,020
don't take this the wrong way and but

00:37:50,430 --> 00:37:53,040
I'm gonna play the devil's advocate a

00:37:52,020 --> 00:37:56,309
bit

00:37:53,040 --> 00:38:00,420
it seems we can't like have another week

00:37:56,309 --> 00:38:02,339
and something gets hacked I don't know

00:38:00,420 --> 00:38:02,819
the last couple of weeks was kind of

00:38:02,339 --> 00:38:04,200
crazy

00:38:02,819 --> 00:38:07,200
everything gets hacked how do we how do

00:38:04,200 --> 00:38:12,540
you guys be sure that sis dick is not

00:38:07,200 --> 00:38:14,910
itself hotly key because if I understand

00:38:12,540 --> 00:38:18,290
correctly basically anything I have in

00:38:14,910 --> 00:38:21,960
my applications will go through it

00:38:18,290 --> 00:38:25,650
unfiltered of credit card numbers data

00:38:21,960 --> 00:38:28,829
you name it it's gonna be sucked up by

00:38:25,650 --> 00:38:34,770
sis dick yeah okay that's a good

00:38:28,829 --> 00:38:37,980
question so basically all the analysis

00:38:34,770 --> 00:38:41,280
it happens at run time so it's not

00:38:37,980 --> 00:38:43,559
leaving both with the open source

00:38:41,280 --> 00:38:45,329
product and with the commercial product

00:38:43,559 --> 00:38:47,760
the analysis it's happening in the other

00:38:45,329 --> 00:38:49,440
specific container okay it's not that we

00:38:47,760 --> 00:38:53,760
are going to send the data somewhere

00:38:49,440 --> 00:38:56,430
else so that constraints like a little

00:38:53,760 --> 00:38:59,910
bit where the data lives is it's always

00:38:56,430 --> 00:39:01,710
in the same house there is no leaking

00:38:59,910 --> 00:39:03,809
unless you take us as the capture in

00:39:01,710 --> 00:39:05,849
that case is sent somewhere else or they

00:39:03,809 --> 00:39:09,630
command history yes that goes to your

00:39:05,849 --> 00:39:12,599
back and the other thing is says they

00:39:09,630 --> 00:39:16,650
the container itself is not exposing any

00:39:12,599 --> 00:39:20,579
external service you can also you could

00:39:16,650 --> 00:39:23,910
also write say six secure rules to

00:39:20,579 --> 00:39:27,569
monitor stake itself but the end of the

00:39:23,910 --> 00:39:30,809
day you need to define a boundary on

00:39:27,569 --> 00:39:32,609
what you are going to trust and what you

00:39:30,809 --> 00:39:36,930
are not going to trust is the same thing

00:39:32,609 --> 00:39:40,040
when writing our credentials world when

00:39:36,930 --> 00:39:44,010
you write all your you store all your

00:39:40,040 --> 00:39:47,040
authentication password certificates

00:39:44,010 --> 00:39:49,410
into a service and that it's in charge

00:39:47,040 --> 00:39:52,109
to these to be read either across all

00:39:49,410 --> 00:39:54,900
your infrastructure what happens if your

00:39:52,109 --> 00:39:56,960
ball gets hacked well we have access to

00:39:54,900 --> 00:40:00,560
everything so it's like a little bit of

00:39:56,960 --> 00:40:03,170
promise yes you have deeply visibility

00:40:00,560 --> 00:40:04,970
you can see everything for the cream for

00:40:03,170 --> 00:40:08,300
the bot so this is how the station you

00:40:04,970 --> 00:40:10,730
need to make make sense it makes sense

00:40:08,300 --> 00:40:12,380
can I ask one follow-up question yes how

00:40:10,730 --> 00:40:16,220
do you guys do this with your hosted

00:40:12,380 --> 00:40:18,830
solution with regard to basic things

00:40:16,220 --> 00:40:24,109
like I don't know like entry security or

00:40:18,830 --> 00:40:28,190
so yeah so all that with a with a hosted

00:40:24,109 --> 00:40:34,430
solution called communication gets

00:40:28,190 --> 00:40:36,320
encrypted B 2 n 2 and basically if you

00:40:34,430 --> 00:40:39,410
are really concerned and you don't want

00:40:36,320 --> 00:40:42,080
to share any database with any other

00:40:39,410 --> 00:40:45,380
customer because you have super private

00:40:42,080 --> 00:40:48,440
data you can install on Prem and it's

00:40:45,380 --> 00:40:50,780
going to be your responsibility making

00:40:48,440 --> 00:40:54,400
sure everything runs smoothly and you

00:40:50,780 --> 00:41:08,410
can implement your own security policies

00:40:54,400 --> 00:41:12,580
Thanks more questions feedback regarding

00:41:08,410 --> 00:41:18,470
Falco rules as a way to create at least

00:41:12,580 --> 00:41:22,220
base sample template based on existing

00:41:18,470 --> 00:41:25,790
activity so at the moment is not

00:41:22,220 --> 00:41:27,849
possible it's one feature which is in

00:41:25,790 --> 00:41:31,609
the roadmap of the commercial product

00:41:27,849 --> 00:41:33,980
probably some pieces maybe end up

00:41:31,609 --> 00:41:37,730
appearing in the in the open-source tool

00:41:33,980 --> 00:41:42,260
or it didn't have either the authority

00:41:37,730 --> 00:41:44,119
of the information to talk about that so

00:41:42,260 --> 00:41:48,050
I don't know I know it's part of the of

00:41:44,119 --> 00:41:50,119
the of the commercial product you can

00:41:48,050 --> 00:41:53,060
also implement it in your own way you

00:41:50,119 --> 00:41:56,050
can get Falco and actually someone

00:41:53,060 --> 00:42:00,020
already wrote about this on the internet

00:41:56,050 --> 00:42:03,440
sending all the events or different

00:42:00,020 --> 00:42:05,750
events in K login system like ela key

00:42:03,440 --> 00:42:07,849
and then do machine learning their

00:42:05,750 --> 00:42:09,210
recent I'll say there are multiple and

00:42:07,849 --> 00:42:11,250
different approaches

00:42:09,210 --> 00:42:13,319
at the moment it doesn't exist in either

00:42:11,250 --> 00:42:23,940
of all solutions but it's going to be

00:42:13,319 --> 00:42:28,559
something available very soon more

00:42:23,940 --> 00:42:30,150
questions all right well thanks very

00:42:28,559 --> 00:42:31,950
much for listening I hope you like it

00:42:30,150 --> 00:42:34,309
and if you have any other questions just

00:42:31,950 --> 00:42:34,309

YouTube URL: https://www.youtube.com/watch?v=LPgjLzFcFVU


