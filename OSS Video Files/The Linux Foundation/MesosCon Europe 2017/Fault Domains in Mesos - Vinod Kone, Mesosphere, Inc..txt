Title: Fault Domains in Mesos - Vinod Kone, Mesosphere, Inc.
Publication date: 2017-10-27
Playlist: MesosCon Europe 2017
Description: 
	Fault Domains in Mesos - Vinod Kone, Mesosphere, Inc.

While Mesos itself is highly fault tolerant, the apps running on top of it traditionally had to depend on non-standard mechanisms (e.g., agent attributes) to make them highly available. This changes with the introduction of native support for fault domains in Mesos 1.4! Fault domains, as a first class primitive, allows Mesos frameworks to speak a common language when it comes to their desire to launch fault tolerant applications.

This talk will give an overview of the feature and also discusses a few of the use cases this feature unlocks for a lot of organizations. Specifically we will discuss workload bursting from on-prem to public cloud instances and doing rack aware scheduling for stateful applications.

About Vinod Kone
Vinod Kone is a committer and PMC member of the Apache Mesos project. He is currently a Tech Lead and Engineering Manager @ Mesosphere. Previously, he was a Tech Lead and Manager of the Mesos team @Twitter. Vinod completed his PhD in Computer Science from UC Santa Barbara.
Captions: 
	00:00:00,650 --> 00:00:09,929
alright let's get started so my name is

00:00:05,130 --> 00:00:11,969
Vinod connais I'll be your presenter for

00:00:09,929 --> 00:00:13,980
the next couple hours looks like I have

00:00:11,969 --> 00:00:16,890
two talks back-to-back

00:00:13,980 --> 00:00:19,500
the first talk is going to be about fall

00:00:16,890 --> 00:00:22,140
domains in Mesa it's a new feature

00:00:19,500 --> 00:00:26,369
that's coming up in misses so I wanted

00:00:22,140 --> 00:00:29,279
you guys to know all about it little bit

00:00:26,369 --> 00:00:34,290
about me I've been a longtime Apache

00:00:29,279 --> 00:00:35,600
mesas committer and PMC member close to

00:00:34,290 --> 00:00:39,090
four years now I think

00:00:35,600 --> 00:00:41,610
I'm currently engineering manager and

00:00:39,090 --> 00:00:43,770
tech lead for the mesas team atmosphere

00:00:41,610 --> 00:00:46,350
and before that as kinda doing the same

00:00:43,770 --> 00:00:50,280
thing at Twitter when mrs. was getting

00:00:46,350 --> 00:00:52,680
its wings in production and even earlier

00:00:50,280 --> 00:00:54,920
than that as doing a PhD in computer

00:00:52,680 --> 00:00:56,969
science on a completely different topic

00:00:54,920 --> 00:01:02,250
nothing related to what I'm working on

00:00:56,969 --> 00:01:04,129
today so ok let's start with what do we

00:01:02,250 --> 00:01:06,570
mean by fall domain or what do people

00:01:04,129 --> 00:01:08,790
typically mean when they say they want

00:01:06,570 --> 00:01:11,880
fault tolerance and they want to know

00:01:08,790 --> 00:01:15,030
about fall domains so fall domain you

00:01:11,880 --> 00:01:18,229
could think of it as a group of nodes

00:01:15,030 --> 00:01:21,409
that share similar fault characteristics

00:01:18,229 --> 00:01:24,810
which basically means if a fault happens

00:01:21,409 --> 00:01:27,600
typically all these nodes in that domain

00:01:24,810 --> 00:01:30,810
are going to get affected if you're

00:01:27,600 --> 00:01:32,820
using an on-prem data center for running

00:01:30,810 --> 00:01:37,110
your cluster this fall demand is

00:01:32,820 --> 00:01:41,369
typically Iraq because Iraq is surveys

00:01:37,110 --> 00:01:42,810
typically by one top Iraq switch and may

00:01:41,369 --> 00:01:47,759
be connected to a PD you

00:01:42,810 --> 00:01:50,490
so if switch fails or your PDU fails all

00:01:47,759 --> 00:01:51,840
the things in the rack get affected they

00:01:50,490 --> 00:01:55,079
get disconnected from the cluster and

00:01:51,840 --> 00:01:57,840
that might get powered down so in these

00:01:55,079 --> 00:02:00,619
in in on-prem disease the racks are your

00:01:57,840 --> 00:02:03,060
first level of all domains beyond nodes

00:02:00,619 --> 00:02:05,399
and if you're using public cloud

00:02:03,060 --> 00:02:07,860
providers you have the concept of zones

00:02:05,399 --> 00:02:10,800
there which you can think of the first

00:02:07,860 --> 00:02:12,680
level of fall domain as well that you

00:02:10,800 --> 00:02:16,519
need to think about

00:02:12,680 --> 00:02:18,530
placing your apps so what are some of

00:02:16,519 --> 00:02:21,260
the use cases for fall domains the first

00:02:18,530 --> 00:02:24,040
one is obviously us touching upon the

00:02:21,260 --> 00:02:27,290
ability to do fault tolerance scheduling

00:02:24,040 --> 00:02:29,299
and this is really important if you want

00:02:27,290 --> 00:02:31,340
to launch highly available applications

00:02:29,299 --> 00:02:33,620
and most of the applications with micro

00:02:31,340 --> 00:02:34,489
services today tend to have a lot of

00:02:33,620 --> 00:02:37,849
instances of

00:02:34,489 --> 00:02:40,340
of each application for load balancing

00:02:37,849 --> 00:02:44,060
and you want to make sure they're spread

00:02:40,340 --> 00:02:46,879
it out spread out over a very wide fall

00:02:44,060 --> 00:02:49,340
domain so that they could tolerate like

00:02:46,879 --> 00:02:51,560
an aw zone going down or iraq going down

00:02:49,340 --> 00:02:55,040
and it's it's important both first

00:02:51,560 --> 00:02:57,739
stateless and stateful applications as

00:02:55,040 --> 00:02:59,359
you can imagine for stateful it's even

00:02:57,739 --> 00:03:02,030
more important because a lot of site

00:02:59,359 --> 00:03:06,290
full applications have the concept of

00:03:02,030 --> 00:03:08,299
replication so for the replication to

00:03:06,290 --> 00:03:10,150
actually work correctly you want your

00:03:08,299 --> 00:03:13,819
stateful applications to be sharded

00:03:10,150 --> 00:03:16,669
nicely across all domains so that your

00:03:13,819 --> 00:03:19,519
application is not going to do bad

00:03:16,669 --> 00:03:21,229
things because of your bad scheduling

00:03:19,519 --> 00:03:23,959
decisions so let's look at some example

00:03:21,229 --> 00:03:25,940
of what a bad scheduling could look like

00:03:23,959 --> 00:03:28,040
for a stateful application right let's

00:03:25,940 --> 00:03:30,379
say you have a stateful application that

00:03:28,040 --> 00:03:32,359
has nine instances of it or nine shards

00:03:30,379 --> 00:03:35,659
let's say and you want to put them on

00:03:32,359 --> 00:03:39,409
three racks one way you could place them

00:03:35,659 --> 00:03:41,509
is one shard on one rack and a bunch of

00:03:39,409 --> 00:03:44,979
them on rack two and a couple of them on

00:03:41,509 --> 00:03:49,099
rack three this will help you tolerate

00:03:44,979 --> 00:03:52,819
rack failures fine but the replication

00:03:49,099 --> 00:03:54,709
here when you enable the replication in

00:03:52,819 --> 00:03:56,720
your Cassandra or HDFS when you deploy

00:03:54,709 --> 00:04:00,650
it this way it's probably going to melt

00:03:56,720 --> 00:04:02,689
your crack because a sort of cross rack

00:04:00,650 --> 00:04:05,419
traffic that's going to go on because

00:04:02,689 --> 00:04:07,759
Cassandra once you tell it that it it

00:04:05,419 --> 00:04:09,859
has to do recover replication it's going

00:04:07,759 --> 00:04:13,459
to pick nodes in different racks to put

00:04:09,859 --> 00:04:14,870
its replicas which means there's going

00:04:13,459 --> 00:04:17,329
to be a lot of traffic across racks

00:04:14,870 --> 00:04:19,190
which is not what you want

00:04:17,329 --> 00:04:20,870
of course the butter scheduling would be

00:04:19,190 --> 00:04:24,260
to kinda uniformly spread these shots

00:04:20,870 --> 00:04:25,889
across rack so that your network traffic

00:04:24,260 --> 00:04:28,199
for application is more

00:04:25,889 --> 00:04:31,319
uniformly distributed and you don't try

00:04:28,199 --> 00:04:34,050
to melt your racks or switches or

00:04:31,319 --> 00:04:36,840
anything like that so that's one use

00:04:34,050 --> 00:04:39,389
case the second use case is of course a

00:04:36,840 --> 00:04:42,389
hybrid cloud and how do we enable that

00:04:39,389 --> 00:04:45,990
more in a first-class way in mesas

00:04:42,389 --> 00:04:48,060
ecosystem as you probably heard in Ben's

00:04:45,990 --> 00:04:50,400
keynote talk this morning this will

00:04:48,060 --> 00:04:52,650
there's a lot of use cases for hybrid

00:04:50,400 --> 00:04:57,449
cloud in the mezzo Seco system I think

00:04:52,650 --> 00:04:59,729
his his slide showed that about 25% 26%

00:04:57,449 --> 00:05:02,939
of people actually run it in hybrid

00:04:59,729 --> 00:05:05,669
cloud settings and by habit cloud what

00:05:02,939 --> 00:05:08,400
we mainly mean is an ability to extend

00:05:05,669 --> 00:05:11,699
your primary cluster with some secondary

00:05:08,400 --> 00:05:13,289
infrastructure and it's this tip for

00:05:11,699 --> 00:05:16,349
most automation this looks like an

00:05:13,289 --> 00:05:18,990
on-prem DC connected to your cloud

00:05:16,349 --> 00:05:20,639
providers infrastructure like AWS for

00:05:18,990 --> 00:05:23,339
example you usually use some kind of

00:05:20,639 --> 00:05:25,289
direct connect between your on-prem and

00:05:23,339 --> 00:05:27,960
your habit order and you want to add

00:05:25,289 --> 00:05:29,759
some extra capacity on demand and and

00:05:27,960 --> 00:05:32,789
the reason why a lot of foundations like

00:05:29,759 --> 00:05:35,159
to do this is because a lot of them have

00:05:32,789 --> 00:05:37,589
seasonal traffic or they have to

00:05:35,159 --> 00:05:39,479
provision for their peak load sometimes

00:05:37,589 --> 00:05:42,419
or unexpected burst sometimes and it's

00:05:39,479 --> 00:05:44,669
really hard to provision machines in

00:05:42,419 --> 00:05:47,550
your own program it has to go through a

00:05:44,669 --> 00:05:49,710
lot of process it's a lot more easy even

00:05:47,550 --> 00:05:52,289
if it's more expensive to bring that up

00:05:49,710 --> 00:05:54,149
in a public cloud you just pay using

00:05:52,289 --> 00:05:55,800
credit card and you get your resource

00:05:54,149 --> 00:05:58,379
and you just had them so it's a lot more

00:05:55,800 --> 00:06:00,360
flexible to add machines in a public

00:05:58,379 --> 00:06:02,370
cloud than trying to provision them

00:06:00,360 --> 00:06:04,409
going to your IT department and Finance

00:06:02,370 --> 00:06:06,479
and getting this machine set up in an

00:06:04,409 --> 00:06:11,189
organization so if you want to kind of

00:06:06,479 --> 00:06:14,759
make this use case be easily achievable

00:06:11,189 --> 00:06:16,409
in a mess or cluster so a couple of

00:06:14,759 --> 00:06:18,419
things that you need to really think

00:06:16,409 --> 00:06:21,000
about when you're trying to support this

00:06:18,419 --> 00:06:23,310
hybrid cloud scenarios is that the

00:06:21,000 --> 00:06:24,990
latencies are different based on where

00:06:23,310 --> 00:06:27,389
your agents are running if your agents

00:06:24,990 --> 00:06:29,279
are in your on-prem DC right next to

00:06:27,389 --> 00:06:32,039
your masters in the same DC the latency

00:06:29,279 --> 00:06:34,949
is very low like tens of milliseconds

00:06:32,039 --> 00:06:38,610
probably but if you have some agents in

00:06:34,949 --> 00:06:39,900
a remote region like a public cloud the

00:06:38,610 --> 00:06:41,190
latency between them

00:06:39,900 --> 00:06:43,320
and the Masters are going a little

00:06:41,190 --> 00:06:45,750
higher which means the apsara can run on

00:06:43,320 --> 00:06:47,880
them are going to have higher latencies

00:06:45,750 --> 00:06:51,419
to any of the resources that they might

00:06:47,880 --> 00:06:53,850
need in your on from DC like a DNS or or

00:06:51,419 --> 00:06:55,680
a load balance or what have you if

00:06:53,850 --> 00:06:59,699
you're using some database in your

00:06:55,680 --> 00:07:01,110
on-prem and you want your cloud apps to

00:06:59,699 --> 00:07:05,070
actually use them you have to be really

00:07:01,110 --> 00:07:07,889
careful that the latency is not going to

00:07:05,070 --> 00:07:10,400
very low and the fault characteristics

00:07:07,889 --> 00:07:12,600
again are going to be a little different

00:07:10,400 --> 00:07:14,070
because you don't control the

00:07:12,600 --> 00:07:16,440
infrastructure for example if you're

00:07:14,070 --> 00:07:18,389
using a public cloud when they go to

00:07:16,440 --> 00:07:22,770
maintenance and when something happens

00:07:18,389 --> 00:07:24,479
in an innate abilities or GCP or or

00:07:22,770 --> 00:07:26,820
Azure is not complete under your control

00:07:24,479 --> 00:07:28,139
so the falls on your on-prem your hybrid

00:07:26,820 --> 00:07:30,990
loads a little different so you need to

00:07:28,139 --> 00:07:34,260
take into account of that fact and of

00:07:30,990 --> 00:07:36,270
course you also want to have users to

00:07:34,260 --> 00:07:38,940
have a lot more control on where their

00:07:36,270 --> 00:07:41,160
apps land you don't want some an

00:07:38,940 --> 00:07:43,650
operator to come and attach a bunch of

00:07:41,160 --> 00:07:46,010
nodes in a court order to on Prem and

00:07:43,650 --> 00:07:48,060
suddenly all apps start spanning

00:07:46,010 --> 00:07:49,440
different regions and different fall

00:07:48,060 --> 00:07:51,150
domains because people are going to be

00:07:49,440 --> 00:07:54,300
surprised especially if that's going to

00:07:51,150 --> 00:07:57,450
associated with cost if suddenly a lot

00:07:54,300 --> 00:07:59,910
of your apps are going to do AWS and you

00:07:57,450 --> 00:08:02,400
suddenly see a big bill the end of the

00:07:59,910 --> 00:08:04,500
month you would probably be pissed so we

00:08:02,400 --> 00:08:08,090
want this to be very explicit the people

00:08:04,500 --> 00:08:10,200
when they want to go to like an on cloud

00:08:08,090 --> 00:08:12,270
instance for their app they have to very

00:08:10,200 --> 00:08:14,520
explicit and it probably has to be

00:08:12,270 --> 00:08:16,410
behind some kind of access control so

00:08:14,520 --> 00:08:18,450
that people consciously make the

00:08:16,410 --> 00:08:21,110
addition we don't want it to be like

00:08:18,450 --> 00:08:24,900
homogeneous cluster it has to be special

00:08:21,110 --> 00:08:27,900
in some way so what are some of the

00:08:24,900 --> 00:08:29,820
existing solutions on how people do this

00:08:27,900 --> 00:08:31,440
or achieve some of this today most of

00:08:29,820 --> 00:08:34,529
most of the people in that list amazes

00:08:31,440 --> 00:08:37,380
ecosystem do this we are attributes user

00:08:34,529 --> 00:08:39,930
different attributes so if you're not

00:08:37,380 --> 00:08:42,450
aware of attributes in measures it's

00:08:39,930 --> 00:08:44,790
essentially a set of Lib freeform labels

00:08:42,450 --> 00:08:47,370
that you could attach on the agents when

00:08:44,790 --> 00:08:49,620
you bring them up and once you attach

00:08:47,370 --> 00:08:51,120
some labels to them you could most of

00:08:49,620 --> 00:08:53,510
the frameworks in the mesas ecosystem

00:08:51,120 --> 00:08:56,150
like marathon or

00:08:53,510 --> 00:08:57,920
or others usually have this concept of

00:08:56,150 --> 00:09:00,080
placement constraints that can run on

00:08:57,920 --> 00:09:04,610
top of these attributes you could say a

00:09:00,080 --> 00:09:06,620
unique host or target with attribute

00:09:04,610 --> 00:09:08,480
rack or something like that which is

00:09:06,620 --> 00:09:09,920
nice which works most of the time I

00:09:08,480 --> 00:09:11,620
think people could use attributes and

00:09:09,920 --> 00:09:15,110
that's what they've been using so far

00:09:11,620 --> 00:09:18,530
but it's not really a first-class way or

00:09:15,110 --> 00:09:19,820
not really a very nice thing to do for

00:09:18,530 --> 00:09:20,420
something as important as fault

00:09:19,820 --> 00:09:24,110
tolerance

00:09:20,420 --> 00:09:27,110
mainly because frameworks and apps when

00:09:24,110 --> 00:09:28,760
you're writing something that depends on

00:09:27,110 --> 00:09:32,060
attributes they are not really portable

00:09:28,760 --> 00:09:33,740
some of some organization or in some

00:09:32,060 --> 00:09:36,020
cluster they might call the fall demand

00:09:33,740 --> 00:09:41,090
rack someone else might call it a hall

00:09:36,020 --> 00:09:42,500
or a cage or switch or no DC so if you

00:09:41,090 --> 00:09:44,660
write some framework that can der stands

00:09:42,500 --> 00:09:45,950
rax and it's you try to deploy that

00:09:44,660 --> 00:09:49,190
framework in a different cluster that

00:09:45,950 --> 00:09:51,260
has that has a fall domain called DC

00:09:49,190 --> 00:09:53,540
then it's going to be really hard to

00:09:51,260 --> 00:09:54,920
write such a framework same thing with

00:09:53,540 --> 00:09:55,760
apps if you have an app definition and

00:09:54,920 --> 00:09:58,550
you want to move it across different

00:09:55,760 --> 00:10:00,350
clusters and all of them talk different

00:09:58,550 --> 00:10:01,570
attributes like there's no consistent

00:10:00,350 --> 00:10:05,240
way it's it's not really great

00:10:01,570 --> 00:10:08,230
experience and also the other important

00:10:05,240 --> 00:10:10,220
bit is with attributes it's very missus

00:10:08,230 --> 00:10:11,360
agnostic in the sense that message

00:10:10,220 --> 00:10:14,840
doesn't really look into those

00:10:11,360 --> 00:10:16,550
attributes at all like of an agent is

00:10:14,840 --> 00:10:19,420
configured with instead of attributes

00:10:16,550 --> 00:10:22,340
missus master knows about it and just

00:10:19,420 --> 00:10:23,840
forwards it to the frameworks in offers

00:10:22,340 --> 00:10:26,360
like it doesn't do anything it doesn't

00:10:23,840 --> 00:10:27,380
control it just does some format

00:10:26,360 --> 00:10:29,270
checking but that's it

00:10:27,380 --> 00:10:30,740
like what values should be there what

00:10:29,270 --> 00:10:32,120
key should be there it's all free form

00:10:30,740 --> 00:10:34,250
we don't enforce anything so we can't

00:10:32,120 --> 00:10:36,440
anything smart so for example if you

00:10:34,250 --> 00:10:38,300
want to do something like control to

00:10:36,440 --> 00:10:40,280
users we can't do that really easily

00:10:38,300 --> 00:10:42,380
because we cannot enforce what

00:10:40,280 --> 00:10:45,350
attributes people use so those are some

00:10:42,380 --> 00:10:47,570
of the limitations right so given that

00:10:45,350 --> 00:10:49,910
what what are our main goals for this

00:10:47,570 --> 00:10:53,510
kind of feature when we set out to build

00:10:49,910 --> 00:10:55,850
this the first thing as I said was we

00:10:53,510 --> 00:10:57,560
wanted fall domains to be a really

00:10:55,850 --> 00:11:00,260
first-class primitive and mesos because

00:10:57,560 --> 00:11:03,440
it's really really important thing for a

00:11:00,260 --> 00:11:04,769
lot of people that you use a large scale

00:11:03,440 --> 00:11:07,050
distributed systems and run

00:11:04,769 --> 00:11:09,389
microservices and we wanted to have a

00:11:07,050 --> 00:11:12,420
common terminology that all frameworks

00:11:09,389 --> 00:11:14,360
and apps can depend on not just use some

00:11:12,420 --> 00:11:17,279
freeform attributes it it has to be some

00:11:14,360 --> 00:11:20,550
very common and well-known primitives

00:11:17,279 --> 00:11:23,069
that they could all depend on and of

00:11:20,550 --> 00:11:26,850
course we want to support both on Prem

00:11:23,069 --> 00:11:28,920
and on cloud deployments a lot of misses

00:11:26,850 --> 00:11:31,019
users use it just in their disease and

00:11:28,920 --> 00:11:33,179
all of them just used it in AWS or GCP

00:11:31,019 --> 00:11:34,559
so you want to support those but of

00:11:33,179 --> 00:11:36,449
course you also want to support the

00:11:34,559 --> 00:11:39,179
hybrid combinations of them if you want

00:11:36,449 --> 00:11:42,119
to combine them in some way and also the

00:11:39,179 --> 00:11:44,699
last important thing is we want to have

00:11:42,119 --> 00:11:46,679
some sensible default behaviors when you

00:11:44,699 --> 00:11:49,319
configure such a cluster in mesas going

00:11:46,679 --> 00:11:51,720
forward especially for hybrid settings

00:11:49,319 --> 00:11:53,970
you want to if you enable a Miso's

00:11:51,720 --> 00:11:56,850
cluster that can span confrim and Claude

00:11:53,970 --> 00:12:00,959
we want to have some really sensible non

00:11:56,850 --> 00:12:04,860
surprising behavior so what did we come

00:12:00,959 --> 00:12:07,379
up with so at a high level the solution

00:12:04,860 --> 00:12:09,149
looks like this we have introduced a new

00:12:07,379 --> 00:12:11,160
primitive called

00:12:09,149 --> 00:12:15,540
fall domain and it's kind of wrapped in

00:12:11,160 --> 00:12:17,160
a new internet in order message called

00:12:15,540 --> 00:12:18,990
domain info so that we could add more

00:12:17,160 --> 00:12:22,019
kind of domains in the future which

00:12:18,990 --> 00:12:25,319
we'll get to and then we added to level

00:12:22,019 --> 00:12:29,339
of hierarchies for our fall domains

00:12:25,319 --> 00:12:30,779
recalling them regions and zones and and

00:12:29,339 --> 00:12:36,299
then we also added a new capability

00:12:30,779 --> 00:12:39,240
called the region aware that's gonna be

00:12:36,299 --> 00:12:41,129
useful for pretty much to opt into this

00:12:39,240 --> 00:12:43,920
behavior so I'm going to talk about

00:12:41,129 --> 00:12:48,269
these in details next so let's look at

00:12:43,920 --> 00:12:52,110
the fall domain product of itself as I

00:12:48,269 --> 00:12:54,629
said there's a high level protocol

00:12:52,110 --> 00:12:56,970
domain info and the reason why we put it

00:12:54,629 --> 00:12:59,579
under that instead of just having a high

00:12:56,970 --> 00:13:01,559
level fall domain is because we thought

00:12:59,579 --> 00:13:03,389
we would add more sorts of domains in

00:13:01,559 --> 00:13:05,850
the future some of the dimension could

00:13:03,389 --> 00:13:08,189
think of or cost domains maybe you want

00:13:05,850 --> 00:13:09,809
to schedule based on cost maybe you want

00:13:08,189 --> 00:13:11,279
to schedule based on latency latency

00:13:09,809 --> 00:13:14,610
could be a different domain that you

00:13:11,279 --> 00:13:16,529
could add right now we're kind of mixing

00:13:14,610 --> 00:13:17,790
both fall domain and latency domain in

00:13:16,529 --> 00:13:19,230
this one thing because

00:13:17,790 --> 00:13:21,540
it's kinda easy to understand and most

00:13:19,230 --> 00:13:23,820
people don't think about those things as

00:13:21,540 --> 00:13:26,850
different but you could imagine if

00:13:23,820 --> 00:13:28,500
alderman hierarchy being different from

00:13:26,850 --> 00:13:32,070
a network from a latency domain or a

00:13:28,500 --> 00:13:34,290
cost domain so for now for MVP we just

00:13:32,070 --> 00:13:36,210
did fall domains and as I said it has

00:13:34,290 --> 00:13:38,460
only two things two levels one is

00:13:36,210 --> 00:13:40,560
regions and zones and they're also part

00:13:38,460 --> 00:13:42,210
of us messages to can help us extend it

00:13:40,560 --> 00:13:47,370
in the future but right now they only

00:13:42,210 --> 00:13:49,770
have names in them and the two levels

00:13:47,370 --> 00:13:52,680
that we have today are regions and zones

00:13:49,770 --> 00:13:54,360
so region you can think of as the

00:13:52,680 --> 00:13:57,180
highest level of isolation that you

00:13:54,360 --> 00:13:59,840
could think of with the caveat that the

00:13:57,180 --> 00:14:02,220
latency between those regions would be

00:13:59,840 --> 00:14:06,150
potentially high like 50 200

00:14:02,220 --> 00:14:10,110
milliseconds or so so if you want really

00:14:06,150 --> 00:14:12,810
good isolation like they don't share

00:14:10,110 --> 00:14:15,530
anything between regions like there

00:14:12,810 --> 00:14:17,700
probably are connected through internet

00:14:15,530 --> 00:14:21,210
they have their own PDUs you want

00:14:17,700 --> 00:14:25,080
facilities on cable providers and

00:14:21,210 --> 00:14:28,740
whatnot that's the kind of fall domain

00:14:25,080 --> 00:14:30,360
you should target typically the mapping

00:14:28,740 --> 00:14:33,480
for region is if you are using an

00:14:30,360 --> 00:14:36,720
on-prem cluster you could map that your

00:14:33,480 --> 00:14:40,290
DC if you're using a cloud provider and

00:14:36,720 --> 00:14:43,740
map directly to the regions the next the

00:14:40,290 --> 00:14:46,140
lower level of the fall domain is zone a

00:14:43,740 --> 00:14:48,570
region contains one or more zones and

00:14:46,140 --> 00:14:49,950
zones are typically what you would think

00:14:48,570 --> 00:14:51,840
about when you're trying to do a

00:14:49,950 --> 00:14:54,420
stateful application and you want to

00:14:51,840 --> 00:14:56,040
have high availability you don't want

00:14:54,420 --> 00:14:57,030
them to cross regions that's that's

00:14:56,040 --> 00:14:59,970
crazy

00:14:57,030 --> 00:15:02,640
you want to have them cross zones within

00:14:59,970 --> 00:15:04,920
a region so the load that's because the

00:15:02,640 --> 00:15:06,840
latency between them is very very low so

00:15:04,920 --> 00:15:08,640
most of your latency sensitive apps are

00:15:06,840 --> 00:15:11,220
going to tolerate if they have to do

00:15:08,640 --> 00:15:13,950
cross app communication between them

00:15:11,220 --> 00:15:15,750
across zones it has a moderate degree of

00:15:13,950 --> 00:15:18,990
fault fault well fall toleration the

00:15:15,750 --> 00:15:22,050
expectation of it so you could think an

00:15:18,990 --> 00:15:24,570
on-prem this liquor rack and untaught

00:15:22,050 --> 00:15:28,320
providers this is an actual availability

00:15:24,570 --> 00:15:30,600
zone as they call it in AWS and I think

00:15:28,320 --> 00:15:31,320
as you also started doing zones now and

00:15:30,600 --> 00:15:35,040
they were only

00:15:31,320 --> 00:15:37,890
regions until a few months ago I'm

00:15:35,040 --> 00:15:40,680
pretty sure Google also does regions and

00:15:37,890 --> 00:15:42,120
zones so that's how they map to so one

00:15:40,680 --> 00:15:43,650
important question that I want to chat

00:15:42,120 --> 00:15:45,510
about here was there was a lot of

00:15:43,650 --> 00:15:47,010
discussion around why did we just pick

00:15:45,510 --> 00:15:51,170
two levels why didn't we have like

00:15:47,010 --> 00:15:53,760
arbitrary levels or more flexible levels

00:15:51,170 --> 00:15:56,970
and the reasoning was we thought this

00:15:53,760 --> 00:15:58,200
would capture the 90% use case of what

00:15:56,970 --> 00:16:00,600
people would be interested in they're

00:15:58,200 --> 00:16:01,980
mostly interested in running very late

00:16:00,600 --> 00:16:04,350
in sensitive apps in a highly available

00:16:01,980 --> 00:16:06,600
manner and that's what zones is for and

00:16:04,350 --> 00:16:10,170
there are some people who want to launch

00:16:06,600 --> 00:16:11,310
stuff in different regions because they

00:16:10,170 --> 00:16:13,740
want to be close to the users for

00:16:11,310 --> 00:16:16,140
example like Netflix they might have a

00:16:13,740 --> 00:16:17,880
lot of traffic close to their regions

00:16:16,140 --> 00:16:20,520
because the videos are coming close to

00:16:17,880 --> 00:16:22,830
this region so they just want to have

00:16:20,520 --> 00:16:26,730
instances of their services in different

00:16:22,830 --> 00:16:28,380
regions and this we thought captures 90%

00:16:26,730 --> 00:16:31,140
use case and if we did something like

00:16:28,380 --> 00:16:34,530
very generous like okay level 0 11 1

00:16:31,140 --> 00:16:36,480
level 2 to level and like writing again

00:16:34,530 --> 00:16:39,150
portable apps is going to be really hard

00:16:36,480 --> 00:16:41,100
and for frameworks that want to expose

00:16:39,150 --> 00:16:43,110
this to their users is not fair to us

00:16:41,100 --> 00:16:44,880
like how they would expose it in a way

00:16:43,110 --> 00:16:47,100
that makes them still portable so

00:16:44,880 --> 00:16:49,800
because of the portability reason and

00:16:47,100 --> 00:16:51,210
simplicity is reason and the 90% use

00:16:49,800 --> 00:16:54,120
case that we thought most people care

00:16:51,210 --> 00:16:56,400
about this is where we landed on but the

00:16:54,120 --> 00:16:59,820
part above itself doesn't stop you from

00:16:56,400 --> 00:17:01,680
adding more things inside for example

00:16:59,820 --> 00:17:04,020
folder man if you really think there is

00:17:01,680 --> 00:17:07,740
another level that 90% people care about

00:17:04,020 --> 00:17:09,180
we might add it but for now we think

00:17:07,740 --> 00:17:11,220
we're pretty confident that most people

00:17:09,180 --> 00:17:13,050
can actually work with this then we talk

00:17:11,220 --> 00:17:16,020
to a lot of our committee members and

00:17:13,050 --> 00:17:18,990
customers about the regions and zone 2

00:17:16,020 --> 00:17:20,339
levels always start off with oh my

00:17:18,990 --> 00:17:22,680
district my readers and a little

00:17:20,339 --> 00:17:24,660
differently configured but when we talk

00:17:22,680 --> 00:17:26,880
through to them they can understand ok

00:17:24,660 --> 00:17:28,800
this is actually a lot more simple and

00:17:26,880 --> 00:17:31,380
easy to program against and explain to

00:17:28,800 --> 00:17:33,360
users on what the semantics mean so

00:17:31,380 --> 00:17:35,700
that's that's why we can ended up here

00:17:33,360 --> 00:17:38,100
with just region in zone 4 now just two

00:17:35,700 --> 00:17:40,260
levels for latency-sensitive use zones

00:17:38,100 --> 00:17:42,600
if you're not late insensitive use

00:17:40,260 --> 00:17:44,130
regions that's that's pretty easy to

00:17:42,600 --> 00:17:47,460
talk about

00:17:44,130 --> 00:17:49,560
um so I will to go before going little

00:17:47,460 --> 00:17:51,480
more details let's talk about some of

00:17:49,560 --> 00:17:54,960
the terminology so that we are all on

00:17:51,480 --> 00:17:56,790
the same page so since we always want

00:17:54,960 --> 00:17:58,530
Messrs to enable new features in a

00:17:56,790 --> 00:18:01,260
backwards compatible manner we cannot

00:17:58,530 --> 00:18:03,390
really add stuff and make it required

00:18:01,260 --> 00:18:05,700
right like we want upgrades to always

00:18:03,390 --> 00:18:06,660
happen without losing any of your TAS or

00:18:05,700 --> 00:18:10,020
anything like that so which basically

00:18:06,660 --> 00:18:11,910
means we allow agents or masters to not

00:18:10,020 --> 00:18:13,440
have fall domains that's totally okay

00:18:11,910 --> 00:18:16,950
that's a backwards compatible way to do

00:18:13,440 --> 00:18:18,620
an upgrade and if node is not configured

00:18:16,950 --> 00:18:23,400
with the fall domain it's called

00:18:18,620 --> 00:18:25,080
it's in a default domain and we also

00:18:23,400 --> 00:18:27,650
have this concept of local region and

00:18:25,080 --> 00:18:30,930
remote region so one of the sensible

00:18:27,650 --> 00:18:33,120
nations as I said since will be here

00:18:30,930 --> 00:18:36,210
that you wanted and force was to make

00:18:33,120 --> 00:18:39,300
sure masters don't miss us masters don't

00:18:36,210 --> 00:18:43,230
span regions because they're supposed to

00:18:39,300 --> 00:18:45,780
be have high network latency between

00:18:43,230 --> 00:18:47,730
regions if you run your masters across

00:18:45,780 --> 00:18:49,890
these regions and you have to run your

00:18:47,730 --> 00:18:51,390
zookeepers probably across regions and

00:18:49,890 --> 00:18:56,670
since masters have to do quorum rights

00:18:51,390 --> 00:19:00,360
it's not going to be good if you have to

00:18:56,670 --> 00:19:01,950
do cross cross region zookeeper so we

00:19:00,360 --> 00:19:04,110
actually enforce in message that you

00:19:01,950 --> 00:19:07,800
don't configure masters with different

00:19:04,110 --> 00:19:08,940
regions for example so yeah so local

00:19:07,800 --> 00:19:11,460
region is basically the region that

00:19:08,940 --> 00:19:14,520
contains all the masters and all the

00:19:11,460 --> 00:19:17,070
agents that are in the in that region or

00:19:14,520 --> 00:19:19,320
also considered to be local agents and

00:19:17,070 --> 00:19:21,150
all the other regions that do not

00:19:19,320 --> 00:19:25,200
contain masters are called remote

00:19:21,150 --> 00:19:27,030
regions obviously and any of the agents

00:19:25,200 --> 00:19:28,560
that run in the remote regions are

00:19:27,030 --> 00:19:30,270
called remote agents so we have local

00:19:28,560 --> 00:19:32,880
region that contains all masters and

00:19:30,270 --> 00:19:38,940
some agents and then remote regions that

00:19:32,880 --> 00:19:40,590
contain just agents so how does that

00:19:38,940 --> 00:19:44,100
work how do you how do you enable that

00:19:40,590 --> 00:19:45,630
in a mess of cluster today so there's a

00:19:44,100 --> 00:19:48,750
new command line flag that we added

00:19:45,630 --> 00:19:50,970
called domain and it just takes a JSON

00:19:48,750 --> 00:19:53,670
object which is direct translation of

00:19:50,970 --> 00:19:55,350
what protobuf so you can side it as

00:19:53,670 --> 00:19:57,450
shown here you can set domain fall

00:19:55,350 --> 00:19:57,900
domain region and zone and you can do it

00:19:57,450 --> 00:20:00,210
for both

00:19:57,900 --> 00:20:01,740
your masters and Regents so this

00:20:00,210 --> 00:20:06,210
top-level perimeter it's not an

00:20:01,740 --> 00:20:09,720
attribute anymore and then on the master

00:20:06,210 --> 00:20:12,360
side what we did was the Masters domain

00:20:09,720 --> 00:20:14,690
info is actually stored in the master in

00:20:12,360 --> 00:20:17,280
for protobuf I sure aware of the

00:20:14,690 --> 00:20:19,820
internal details of Messrs when you

00:20:17,280 --> 00:20:22,920
framework registers with Messrs it gets

00:20:19,820 --> 00:20:24,990
it's given the master info as part of

00:20:22,920 --> 00:20:27,990
the registration process and this is

00:20:24,990 --> 00:20:30,030
really important because when we put the

00:20:27,990 --> 00:20:31,530
domain infinite master info frameworks

00:20:30,030 --> 00:20:32,670
get to know what's the region of the

00:20:31,530 --> 00:20:35,340
masters that's how they get to know

00:20:32,670 --> 00:20:36,780
during registration they get a master in

00:20:35,340 --> 00:20:38,970
phone they know okay these are this is

00:20:36,780 --> 00:20:42,180
the local region that I should be aware

00:20:38,970 --> 00:20:43,650
of and as I said masters are not allowed

00:20:42,180 --> 00:20:46,350
to span regions this is one of the

00:20:43,650 --> 00:20:49,350
sensible behaviors that you wanted to

00:20:46,350 --> 00:20:51,300
enforce and but they can of course span

00:20:49,350 --> 00:20:53,220
multiple zones within the local region

00:20:51,300 --> 00:20:55,800
which is actually we highly recommend

00:20:53,220 --> 00:20:59,250
people do it if you're launching your

00:20:55,800 --> 00:21:00,600
masters in a local region at least try

00:20:59,250 --> 00:21:03,420
to spread them across different zones

00:21:00,600 --> 00:21:05,550
because if your racks fail or zones fail

00:21:03,420 --> 00:21:10,910
you don't want all your masters to go

00:21:05,550 --> 00:21:13,620
down at the same time on the agent side

00:21:10,910 --> 00:21:15,420
the agents Dominion first again stored

00:21:13,620 --> 00:21:20,220
in agent info which is check pointed to

00:21:15,420 --> 00:21:22,890
the local disc and the the thing that

00:21:20,220 --> 00:21:24,990
the master does is it includes that

00:21:22,890 --> 00:21:27,630
domain info when it's sending offers out

00:21:24,990 --> 00:21:30,060
to frameworks so every offer that that

00:21:27,630 --> 00:21:32,370
gets sent not from now on actually

00:21:30,060 --> 00:21:33,450
includes the domain of the agent so the

00:21:32,370 --> 00:21:34,890
framework can actually look at that

00:21:33,450 --> 00:21:36,840
offer and say ok this belongs to this

00:21:34,890 --> 00:21:38,610
domain and this plan so this domain and

00:21:36,840 --> 00:21:39,510
this is how I want to spread my apps so

00:21:38,610 --> 00:21:44,190
I'm going to look at that information

00:21:39,510 --> 00:21:45,870
and do it and right now one of the

00:21:44,190 --> 00:21:48,080
limitations that we have as of missus

00:21:45,870 --> 00:21:50,400
one point for when this was released is

00:21:48,080 --> 00:21:52,740
just like attribute changes domain

00:21:50,400 --> 00:21:55,440
changes also needed drain just not great

00:21:52,740 --> 00:21:57,810
so we're going to fix it we're going to

00:21:55,440 --> 00:22:02,190
fix it in Mitch's 1.5

00:21:57,810 --> 00:22:05,880
we're configuring agent with the domain

00:22:02,190 --> 00:22:07,500
does not need to require a drain of the

00:22:05,880 --> 00:22:09,240
agent of all the tasks so you can still

00:22:07,500 --> 00:22:10,440
give the tasks around and still

00:22:09,240 --> 00:22:11,490
configure the fault oh man that's not

00:22:10,440 --> 00:22:14,190
there yet

00:22:11,490 --> 00:22:15,870
so I won't recommend using it for your

00:22:14,190 --> 00:22:17,340
old clusters if you want to upgrade and

00:22:15,870 --> 00:22:17,940
enable it if you're bringing brand-new

00:22:17,340 --> 00:22:20,309
clusters

00:22:17,940 --> 00:22:22,200
just enable it that's fine but if you're

00:22:20,309 --> 00:22:23,789
using old clusters and you want to keep

00:22:22,200 --> 00:22:27,840
your tasks you don't want them be

00:22:23,789 --> 00:22:30,809
rescheduled wait for 1.5 that's really

00:22:27,840 --> 00:22:33,090
important for you so on the framework

00:22:30,809 --> 00:22:34,190
side this the changes are expected to be

00:22:33,090 --> 00:22:36,450
really simple

00:22:34,190 --> 00:22:39,419
they're supposed to register with this

00:22:36,450 --> 00:22:40,830
new regional capability and this is

00:22:39,419 --> 00:22:42,870
again one of the sensible default

00:22:40,830 --> 00:22:44,789
behaviors where if your framework

00:22:42,870 --> 00:22:47,220
doesn't register with this capability we

00:22:44,789 --> 00:22:49,080
do not give them offers from remote

00:22:47,220 --> 00:22:50,659
agents so this again for

00:22:49,080 --> 00:22:53,100
backwards-compatible we don't want

00:22:50,659 --> 00:22:56,520
frameworks or users to be surprised when

00:22:53,100 --> 00:22:58,500
someone adds a habit cluster hybrid

00:22:56,520 --> 00:22:59,760
nodes we don't want the AppStore

00:22:58,500 --> 00:23:01,289
dramatically span because the framework

00:22:59,760 --> 00:23:04,409
is not looking into the domain

00:23:01,289 --> 00:23:06,480
information so any framework legacy if

00:23:04,409 --> 00:23:09,210
among this currently running they do not

00:23:06,480 --> 00:23:11,700
get offers from remote regions they have

00:23:09,210 --> 00:23:13,080
explicitly opted in and we hope and

00:23:11,700 --> 00:23:15,360
explicitly obtain they're thinking about

00:23:13,080 --> 00:23:17,429
okay now if I opt in I'm going to get

00:23:15,360 --> 00:23:19,529
offers from remote regions I do a really

00:23:17,429 --> 00:23:24,620
careful on what apps should a place

00:23:19,529 --> 00:23:26,640
where and once a framework actually

00:23:24,620 --> 00:23:30,029
registers with the region aware

00:23:26,640 --> 00:23:32,340
capability we hope or we recommend that

00:23:30,029 --> 00:23:34,909
femen's actually expose this to their

00:23:32,340 --> 00:23:37,380
users as well because once there is

00:23:34,909 --> 00:23:38,640
registered with that capability they're

00:23:37,380 --> 00:23:41,330
going to get offers from everywhere

00:23:38,640 --> 00:23:44,070
remote regions and local regions and

00:23:41,330 --> 00:23:45,779
their users should explicitly ask for

00:23:44,070 --> 00:23:48,809
being deployed in a remote region

00:23:45,779 --> 00:23:50,340
otherwise the framework should not try

00:23:48,809 --> 00:23:51,809
to deploy them at the motor agent so

00:23:50,340 --> 00:23:55,100
that's that's our recommendation we

00:23:51,809 --> 00:23:59,970
can't really enforce it we can just

00:23:55,100 --> 00:24:02,640
guide them what the right strategy is so

00:23:59,970 --> 00:24:08,850
next I wanted to explain some examples

00:24:02,640 --> 00:24:11,760
with how marathon could use this fall

00:24:08,850 --> 00:24:13,260
domain concept to do some of the use

00:24:11,760 --> 00:24:16,049
cases that we talked about this is just

00:24:13,260 --> 00:24:18,210
an hypothetical example I not sure yet

00:24:16,049 --> 00:24:20,159
if marathon is actually going to go with

00:24:18,210 --> 00:24:22,500
this sort of constraints there are some

00:24:20,159 --> 00:24:24,660
new constraints here like ease and

00:24:22,500 --> 00:24:25,800
in I guess we didn't talk about in here

00:24:24,660 --> 00:24:27,540
but there's a new constraint called is

00:24:25,800 --> 00:24:29,610
which doesn't exist in Marathon today

00:24:27,540 --> 00:24:32,220
but it's a hypothetical example of how

00:24:29,610 --> 00:24:33,660
marathon could do it for example so for

00:24:32,220 --> 00:24:35,850
example you want to enable a use case

00:24:33,660 --> 00:24:38,610
that says I can schedule my app in a

00:24:35,850 --> 00:24:40,140
remote region not the local region you

00:24:38,610 --> 00:24:44,400
could just set a placement constraint

00:24:40,140 --> 00:24:45,660
still with a new key call at region so

00:24:44,400 --> 00:24:47,730
when you say at region in basically

00:24:45,660 --> 00:24:49,680
means don't look at the user different

00:24:47,730 --> 00:24:51,540
attribute but look at this first-class

00:24:49,680 --> 00:24:54,840
property of an agent called region and

00:24:51,540 --> 00:24:59,420
when it matches the ease let's say I

00:24:54,840 --> 00:25:02,340
want to land it in AWS East one region I

00:24:59,420 --> 00:25:04,500
put this constraint on it it goes there

00:25:02,340 --> 00:25:06,240
into cloud it's awesome

00:25:04,500 --> 00:25:08,700
and if you want to do something like a

00:25:06,240 --> 00:25:10,140
highly available a placement like for

00:25:08,700 --> 00:25:13,140
example I want my app to be evenly

00:25:10,140 --> 00:25:15,120
spread across zones you can actually do

00:25:13,140 --> 00:25:16,440
at zone group by three for example if

00:25:15,120 --> 00:25:18,540
you want to spread by three that's your

00:25:16,440 --> 00:25:21,960
application factor you can do something

00:25:18,540 --> 00:25:24,420
as simple as this so it's going to come

00:25:21,960 --> 00:25:24,840
into marathon hopefully in the next

00:25:24,420 --> 00:25:28,350
release

00:25:24,840 --> 00:25:30,000
I think the marathon folks are trying to

00:25:28,350 --> 00:25:32,520
figure out what's the best API to

00:25:30,000 --> 00:25:34,710
support regions and zones but this is

00:25:32,520 --> 00:25:36,420
likely going to be how they're going to

00:25:34,710 --> 00:25:38,910
expose it and they hope more and more

00:25:36,420 --> 00:25:40,470
frameworks are also start using the

00:25:38,910 --> 00:25:42,750
regions and zones and expose it in their

00:25:40,470 --> 00:25:44,640
ApS as well

00:25:42,750 --> 00:25:48,840
the last thing or a chat about was

00:25:44,640 --> 00:25:51,180
upgrades so upgrades we take really

00:25:48,840 --> 00:25:53,850
seriously in my sauce feed do you always

00:25:51,180 --> 00:25:56,340
want to have a path for myself aside to

00:25:53,850 --> 00:25:59,160
be upgraded without losing tasks that's

00:25:56,340 --> 00:26:02,340
one of the core tenets that we had had

00:25:59,160 --> 00:26:05,430
for a long time so what does it mean

00:26:02,340 --> 00:26:08,070
here in this particular feature so we do

00:26:05,430 --> 00:26:10,500
allow masters to be in a mixed mixed

00:26:08,070 --> 00:26:12,720
mode by mixed mode I mean some masters

00:26:10,500 --> 00:26:15,000
are configured with full domain and some

00:26:12,720 --> 00:26:16,650
masters are not configured this is this

00:26:15,000 --> 00:26:18,330
is required because you're going to

00:26:16,650 --> 00:26:20,430
upgrade your masters one at a time so we

00:26:18,330 --> 00:26:21,840
don't expect that all matches are

00:26:20,430 --> 00:26:23,970
certainly going to come up with follow

00:26:21,840 --> 00:26:25,920
miss at the same time you upgrade one or

00:26:23,970 --> 00:26:27,140
the next one upgrade that one so this is

00:26:25,920 --> 00:26:29,850
always going to be doing the upgrade

00:26:27,140 --> 00:26:32,130
case where some masters are don't have

00:26:29,850 --> 00:26:34,669
all domains and they do have all them

00:26:32,130 --> 00:26:36,890
and so we may do all of that

00:26:34,669 --> 00:26:38,660
the one restriction that we have if

00:26:36,890 --> 00:26:40,700
you're going to enable fall domains on

00:26:38,660 --> 00:26:43,340
agents is that you have to do master's

00:26:40,700 --> 00:26:46,070
first and then agents we typically

00:26:43,340 --> 00:26:48,380
mostly don't require an upgrade order we

00:26:46,070 --> 00:26:50,030
always say do master's first or agents

00:26:48,380 --> 00:26:51,740
first doesn't matter but in this

00:26:50,030 --> 00:26:53,929
particular case if you want to use this

00:26:51,740 --> 00:26:56,240
feature if you want to enable this you

00:26:53,929 --> 00:26:58,549
really want to do master's first and

00:26:56,240 --> 00:27:00,289
agents next and this is again for one of

00:26:58,549 --> 00:27:04,070
the sensible defaults that you wanted to

00:27:00,289 --> 00:27:05,929
enforce was if someone acts adds a

00:27:04,070 --> 00:27:08,570
remote agent from a cloud provider for

00:27:05,929 --> 00:27:10,880
example to your cluster you don't want

00:27:08,570 --> 00:27:13,640
it to automatically show up to your

00:27:10,880 --> 00:27:16,400
frameworks as a local agent that's going

00:27:13,640 --> 00:27:18,289
to be really bad so for a master to be

00:27:16,400 --> 00:27:20,419
able to note that it has to have a

00:27:18,289 --> 00:27:21,770
region so that it can compare with the

00:27:20,419 --> 00:27:24,230
agency gene and then say ok it's

00:27:21,770 --> 00:27:26,059
actually remote or local so that's why

00:27:24,230 --> 00:27:28,159
we said ok masters have to be configured

00:27:26,059 --> 00:27:31,580
first with full domain before an agent

00:27:28,159 --> 00:27:33,320
needs to confer configured if masters

00:27:31,580 --> 00:27:35,780
are not configured yet and the agent

00:27:33,320 --> 00:27:37,700
joints or tries to join the cluster with

00:27:35,780 --> 00:27:39,380
the fall domain we don't any we don't

00:27:37,700 --> 00:27:42,080
allow it that registration attempt is

00:27:39,380 --> 00:27:43,340
disallowed so this again someone

00:27:42,080 --> 00:27:45,080
sensible default that we could do

00:27:43,340 --> 00:27:49,669
because we have first-class primitives

00:27:45,080 --> 00:27:52,429
now so this is like a table that you

00:27:49,669 --> 00:27:54,289
could look at to reference when you're

00:27:52,429 --> 00:27:55,640
doing upgrades to kind of think about

00:27:54,289 --> 00:27:59,380
what works and what works in different

00:27:55,640 --> 00:28:02,179
combinations so when both are set

00:27:59,380 --> 00:28:05,419
masters and agents domains it's pretty

00:28:02,179 --> 00:28:08,360
obvious if the regions don't match the

00:28:05,419 --> 00:28:10,630
offers are only sent to regional

00:28:08,360 --> 00:28:13,159
frameworks because they're remote agents

00:28:10,630 --> 00:28:15,200
if the agent domain is not said what the

00:28:13,159 --> 00:28:17,299
master domain is said that allowed

00:28:15,200 --> 00:28:19,880
because that's an upgrade path right you

00:28:17,299 --> 00:28:22,340
first two masters and while you're doing

00:28:19,880 --> 00:28:24,230
agents some agents don't have domain set

00:28:22,340 --> 00:28:26,590
so that's still allowed and they're all

00:28:24,230 --> 00:28:30,350
they're sent to all frameworks as normal

00:28:26,590 --> 00:28:31,730
but if the master domain is not set an

00:28:30,350 --> 00:28:32,330
agent a mini site as I said that's not

00:28:31,730 --> 00:28:34,880
allowed

00:28:32,330 --> 00:28:41,150
we don't allow such agents to come if

00:28:34,880 --> 00:28:42,650
both are not set it's it's as usual we

00:28:41,150 --> 00:28:45,770
just think everything is local and then

00:28:42,650 --> 00:28:47,299
send it this say master day we like we

00:28:45,770 --> 00:28:48,090
don't know anything we are going to add

00:28:47,299 --> 00:28:51,570
a new fly

00:28:48,090 --> 00:28:57,300
in 1.5 as well which I didn't put up

00:28:51,570 --> 00:28:59,640
here which allows agents to not be

00:28:57,300 --> 00:29:01,140
talking to the master if they don't have

00:28:59,640 --> 00:29:03,540
a configure demand set at all this is

00:29:01,140 --> 00:29:05,310
after your upgrade is all done you don't

00:29:03,540 --> 00:29:06,540
want any more new agents to accidentally

00:29:05,310 --> 00:29:08,250
come to the cluster without a fall

00:29:06,540 --> 00:29:11,400
domain so we're going to add a flag

00:29:08,250 --> 00:29:14,160
saying don't allow non configured agents

00:29:11,400 --> 00:29:15,690
that'll help you from operators trying

00:29:14,160 --> 00:29:18,960
to shoot themselves in the foot by

00:29:15,690 --> 00:29:22,560
adding agents in the new remote region

00:29:18,960 --> 00:29:24,540
without configuring it so so we're going

00:29:22,560 --> 00:29:27,120
to add a flag that will make it even

00:29:24,540 --> 00:29:32,190
more even less likely that the operator

00:29:27,120 --> 00:29:33,930
is going to make a mistake fat-finger so

00:29:32,190 --> 00:29:36,870
to kind of wrap up what's the state of

00:29:33,930 --> 00:29:39,990
this feature so the fall demands

00:29:36,870 --> 00:29:42,480
themselves were for release in the last

00:29:39,990 --> 00:29:44,940
phase of missus 1.4 they're still

00:29:42,480 --> 00:29:47,400
experimental of course we want features

00:29:44,940 --> 00:29:48,840
to be upgraded to stable ones enough

00:29:47,400 --> 00:29:50,940
people use it in production and we're

00:29:48,840 --> 00:29:52,710
confident so you always start off for

00:29:50,940 --> 00:29:55,470
new features with experimental same with

00:29:52,710 --> 00:29:57,390
this as I said agent domain

00:29:55,470 --> 00:29:59,370
reconfiguration without drain is not yet

00:29:57,390 --> 00:30:02,910
possible but it's going to be made

00:29:59,370 --> 00:30:05,790
possible with 1.5 that's all go as a

00:30:02,910 --> 00:30:08,850
bonus of doing that I think what we're

00:30:05,790 --> 00:30:10,980
going to also enable is ability for

00:30:08,850 --> 00:30:12,860
agents at the bridge to be changed

00:30:10,980 --> 00:30:15,660
without draining that's been a long

00:30:12,860 --> 00:30:17,040
requested feature in missus and I know

00:30:15,660 --> 00:30:20,100
it caused heart of heartburn for a lot

00:30:17,040 --> 00:30:24,480
of people so we are going to come up to

00:30:20,100 --> 00:30:26,250
solution in different phases but all the

00:30:24,480 --> 00:30:28,230
phases are going to help not just

00:30:26,250 --> 00:30:29,670
domains but attributes as well and

00:30:28,230 --> 00:30:31,220
hopefully resources as well in the

00:30:29,670 --> 00:30:34,830
future where you can change some stuff

00:30:31,220 --> 00:30:37,020
not require drain so that's I'm really

00:30:34,830 --> 00:30:37,470
looking forward that's its kind of

00:30:37,020 --> 00:30:39,420
exciting

00:30:37,470 --> 00:30:41,670
that's been a ticket that file like

00:30:39,420 --> 00:30:43,410
three or four years ago I think to be

00:30:41,670 --> 00:30:45,300
able to change attributes in maces so

00:30:43,410 --> 00:30:49,410
you're finally going to do it it's

00:30:45,300 --> 00:30:52,130
awesome so just to wrap up this work was

00:30:49,410 --> 00:30:54,870
a joint effort by a lot of people

00:30:52,130 --> 00:30:56,820
special thanks to Neil Conway who did

00:30:54,870 --> 00:30:59,310
most of the work on implementing the

00:30:56,820 --> 00:31:00,690
fall domains feature in Messer's and a

00:30:59,310 --> 00:31:04,260
bunch of discussions

00:31:00,690 --> 00:31:08,010
with Unruh views from a lot of people

00:31:04,260 --> 00:31:10,340
including Ben andand and he aura so did

00:31:08,010 --> 00:31:14,610
some of the earlier work on fall domains

00:31:10,340 --> 00:31:16,500
that's pretty much it I linked the

00:31:14,610 --> 00:31:20,730
design doc here for people who want to

00:31:16,500 --> 00:31:23,160
take a deeper look into how the design

00:31:20,730 --> 00:31:26,100
looks and implementation details look so

00:31:23,160 --> 00:31:30,150
if interested in it the slide should be

00:31:26,100 --> 00:31:33,390
in shed org already uploaded so take a

00:31:30,150 --> 00:31:36,750
look at that and click the link you get

00:31:33,390 --> 00:31:37,920
to see the details alright that's pretty

00:31:36,750 --> 00:31:47,150
much it

00:31:37,920 --> 00:31:47,150
happy to take questions now yep

00:32:00,660 --> 00:32:07,050
yes so the question was if you allow the

00:32:03,300 --> 00:32:09,480
agents region to be changed especially

00:32:07,050 --> 00:32:11,810
if you want to change the region how is

00:32:09,480 --> 00:32:14,550
that allowed

00:32:11,810 --> 00:32:16,650
so I think what we're going to do

00:32:14,550 --> 00:32:19,890
addition the phase one is we're going to

00:32:16,650 --> 00:32:23,910
have a flag on the agent that explicitly

00:32:19,890 --> 00:32:25,890
says allow agent reconfiguration which

00:32:23,910 --> 00:32:27,900
basically means we're giving operators

00:32:25,890 --> 00:32:31,830
the power to say that okay I know in my

00:32:27,900 --> 00:32:33,360
organization people change the domains

00:32:31,830 --> 00:32:36,810
all the time and most parents don't care

00:32:33,360 --> 00:32:38,400
about it so I'm I'm okay to change my

00:32:36,810 --> 00:32:40,440
agent and keep the TAS still running

00:32:38,400 --> 00:32:42,900
maybe the tasks don't depend on the

00:32:40,440 --> 00:32:44,940
region property at all and I know that

00:32:42,900 --> 00:32:47,040
in my organization so I'm willing to do

00:32:44,940 --> 00:32:50,160
that change that's phase one that's a

00:32:47,040 --> 00:32:52,680
very simple flag that you're going to do

00:32:50,160 --> 00:32:54,750
two operators saying okay this flag when

00:32:52,680 --> 00:32:56,520
you said we allow anything to be changed

00:32:54,750 --> 00:32:59,670
we keep the tasks running if they

00:32:56,520 --> 00:33:02,840
violate their placement because of the

00:32:59,670 --> 00:33:04,830
way the followin was changed that's

00:33:02,840 --> 00:33:07,860
that's a risk that the operator took

00:33:04,830 --> 00:33:10,200
when it changed it on this flag in the

00:33:07,860 --> 00:33:12,870
future and that's the more interesting

00:33:10,200 --> 00:33:14,760
part what we're going to do is when

00:33:12,870 --> 00:33:17,610
someone's trying to change the fall

00:33:14,760 --> 00:33:20,610
domain or attribute if we're going to

00:33:17,610 --> 00:33:23,460
send a signal to the framework to an

00:33:20,610 --> 00:33:25,560
inverse offer saying that hey this is

00:33:23,460 --> 00:33:27,930
going to be changed and you have some

00:33:25,560 --> 00:33:30,210
stuff running there tasks or volume

00:33:27,930 --> 00:33:31,500
reservations if this violates any of

00:33:30,210 --> 00:33:34,260
your constraints please move them

00:33:31,500 --> 00:33:36,000
somewhere else so that's the future we

00:33:34,260 --> 00:33:38,610
want to go to where we want frames to be

00:33:36,000 --> 00:33:40,950
involved when you make any of these

00:33:38,610 --> 00:33:42,330
changes because it's kind of bad that we

00:33:40,950 --> 00:33:45,120
allow them to change underneath them

00:33:42,330 --> 00:33:47,730
they have tasks running so that's going

00:33:45,120 --> 00:33:50,480
to be like phase two where we say we

00:33:47,730 --> 00:33:52,950
still allow operators to change

00:33:50,480 --> 00:33:55,440
attributes or domains but we are going

00:33:52,950 --> 00:33:57,900
to ask framers to move their stuff

00:33:55,440 --> 00:34:01,050
somewhere else if it violates them so it

00:33:57,900 --> 00:34:03,330
gives us more flexibility to basically

00:34:01,050 --> 00:34:05,510
do that so that that's currently the

00:34:03,330 --> 00:34:05,510
plan

00:34:06,220 --> 00:34:09,220
yes

00:34:42,260 --> 00:34:47,810
so the question was what happens if you

00:34:44,869 --> 00:34:51,679
upgrade masters and if you upgrade your

00:34:47,810 --> 00:34:55,190
agents and do not set fall domains so

00:34:51,679 --> 00:34:57,139
they would be considered local agents if

00:34:55,190 --> 00:34:59,180
you do not set any fall domains on them

00:34:57,139 --> 00:35:01,910
so you could upgrade your masters to one

00:34:59,180 --> 00:35:05,000
word for set fall demands on them maybe

00:35:01,910 --> 00:35:06,260
upgrade your agents and maybe do not set

00:35:05,000 --> 00:35:07,070
fall domains because you don't want to

00:35:06,260 --> 00:35:10,250
lose your tasks

00:35:07,070 --> 00:35:12,890
so agent domains won't be set masters

00:35:10,250 --> 00:35:14,960
domains will be set so in that still

00:35:12,890 --> 00:35:18,400
allowed they're considered just local

00:35:14,960 --> 00:35:20,480
agents so all the tasks will still land

00:35:18,400 --> 00:35:22,250
frameworks don't get to see their

00:35:20,480 --> 00:35:23,960
domains of this agents because they're

00:35:22,250 --> 00:35:29,000
not configured but that's still allowed

00:35:23,960 --> 00:35:30,410
so your tasks will still get running new

00:35:29,000 --> 00:35:33,290
tasks can still launch they're all

00:35:30,410 --> 00:35:35,480
considered local agents stuff is fine if

00:35:33,290 --> 00:35:36,890
you want to configure once you upgrade

00:35:35,480 --> 00:35:39,320
to one or four and if you want to

00:35:36,890 --> 00:35:40,940
configure all domain that's on the agent

00:35:39,320 --> 00:35:44,150
and you have running tasks you're

00:35:40,940 --> 00:35:47,330
supposed to drain it and then upgrade it

00:35:44,150 --> 00:35:49,850
enable the fall domain as a new agent so

00:35:47,330 --> 00:35:51,980
that's that's the workflow that we're

00:35:49,850 --> 00:35:53,869
going to recommend for not four or wait

00:35:51,980 --> 00:36:00,280
until 1.5 and you don't have this

00:35:53,869 --> 00:36:00,280
problem yes

00:36:16,610 --> 00:36:23,310
the question was do I see a future where

00:36:20,510 --> 00:36:24,450
everything becomes a domain info new

00:36:23,310 --> 00:36:27,930
attributes go away

00:36:24,450 --> 00:36:29,790
I don't think attributes are going to go

00:36:27,930 --> 00:36:32,130
away because people use it for lots of

00:36:29,790 --> 00:36:34,740
things that are not even related to

00:36:32,130 --> 00:36:37,260
fault tolerance for example people use

00:36:34,740 --> 00:36:39,630
it for tagging the operating systems

00:36:37,260 --> 00:36:42,150
running on them or the kernel versions

00:36:39,630 --> 00:36:45,090
running on them or the licenses that

00:36:42,150 --> 00:36:46,920
they have on them or whatnot so there's

00:36:45,090 --> 00:36:48,960
lots of things that are unrelated to

00:36:46,920 --> 00:36:52,380
fall domains that people use attributes

00:36:48,960 --> 00:36:53,880
first so it's completely freeform way of

00:36:52,380 --> 00:36:55,680
labeling node so that I don't think it's

00:36:53,880 --> 00:36:57,840
ever going to go away

00:36:55,680 --> 00:36:59,010
I think water's going to go away is some

00:36:57,840 --> 00:37:01,350
of the fall domain things that people

00:36:59,010 --> 00:37:03,869
are trying encoding in the attributes

00:37:01,350 --> 00:37:06,750
like rack & dicie's and stuff like that

00:37:03,869 --> 00:37:10,740
I hope those things get moved away from

00:37:06,750 --> 00:37:12,810
attributes to fall domains that's what

00:37:10,740 --> 00:37:17,850
my expectation is that it's going to

00:37:12,810 --> 00:37:20,210
happen in the future I had any more

00:37:17,850 --> 00:37:20,210
questions

00:37:36,790 --> 00:37:41,420
yes so the question was how do said full

00:37:39,290 --> 00:37:44,090
applications like Kafka know about the

00:37:41,420 --> 00:37:47,869
fault domains themselves so this is

00:37:44,090 --> 00:37:49,580
something at least at our company where

00:37:47,869 --> 00:37:52,280
we also build a lot of stateful

00:37:49,580 --> 00:37:55,130
frameworks using a DC SDK are going to

00:37:52,280 --> 00:37:58,310
use the fall domains so the fact that

00:37:55,130 --> 00:38:01,040
the fall domain information is injected

00:37:58,310 --> 00:38:04,490
into the offer when the frameworks get

00:38:01,040 --> 00:38:07,940
the offer they know when they launched a

00:38:04,490 --> 00:38:10,250
Kafka or Cassandra warzone they're

00:38:07,940 --> 00:38:12,770
running on and the way they're going to

00:38:10,250 --> 00:38:15,200
run them is they're going to inject the

00:38:12,770 --> 00:38:18,560
zone value in the configuration of Kafka

00:38:15,200 --> 00:38:21,290
so Kafka it takes usually - - rack

00:38:18,560 --> 00:38:24,170
Cassandra test takes - - rack so when

00:38:21,290 --> 00:38:25,640
they land that app they're going to take

00:38:24,170 --> 00:38:28,400
this own information that they got in

00:38:25,640 --> 00:38:31,070
the offer get the value and store it in

00:38:28,400 --> 00:38:33,320
and and pass it as a command-line

00:38:31,070 --> 00:38:35,540
argument with their Kafka replica so

00:38:33,320 --> 00:38:38,630
that way all the Kafka replicas know

00:38:35,540 --> 00:38:41,270
what zone they are in so that when data

00:38:38,630 --> 00:38:44,660
gets placed in Kafka it knows how to

00:38:41,270 --> 00:38:46,280
replicate it across the racks for

00:38:44,660 --> 00:38:48,080
example so a lot of our schedule

00:38:46,280 --> 00:38:50,960
payments are going to utilize this

00:38:48,080 --> 00:38:53,150
pretty soon it's a pretty big feature

00:38:50,960 --> 00:38:56,240
for us for a lot of for SDK frameworks

00:38:53,150 --> 00:38:58,550
cassandra Kafka HDFS all of them will be

00:38:56,240 --> 00:39:02,350
injected with the zone information once

00:38:58,550 --> 00:39:02,350
they get that information in the offer

00:39:05,619 --> 00:39:09,680
yes if you use common sense you get that

00:39:08,450 --> 00:39:12,740
for free if writing your own framework

00:39:09,680 --> 00:39:14,570
again as you as a framework you're going

00:39:12,740 --> 00:39:16,640
to get the zone information in the offer

00:39:14,570 --> 00:39:19,970
so you could take that and put that in

00:39:16,640 --> 00:39:22,130
your replicas configuration or whatever

00:39:19,970 --> 00:39:24,140
your task is you can always pass it and

00:39:22,130 --> 00:39:26,960
you launch it because before you launch

00:39:24,140 --> 00:39:29,000
you know what the zone is so you should

00:39:26,960 --> 00:39:30,260
be able to if you're writing your own

00:39:29,000 --> 00:39:38,740
mistress framework you should be able to

00:39:30,260 --> 00:39:38,740
do that pretty easily as well cool okay

00:39:57,680 --> 00:40:02,240
so the question was what's different

00:39:59,839 --> 00:40:03,920
between fall domain and attributes in

00:40:02,240 --> 00:40:07,819
terms of scheduling does it affect

00:40:03,920 --> 00:40:09,890
scheduling as I said the the biggest

00:40:07,819 --> 00:40:12,109
differences are Messrs is actually going

00:40:09,890 --> 00:40:13,609
to do something intelligent based on the

00:40:12,109 --> 00:40:15,619
Durman information which it couldn't do

00:40:13,609 --> 00:40:19,279
before on attributes for example it's

00:40:15,619 --> 00:40:22,279
not going to send remote region offers

00:40:19,279 --> 00:40:24,680
to frameworks that do not have that

00:40:22,279 --> 00:40:27,890
capability or it would not allow agents

00:40:24,680 --> 00:40:29,990
with a fall demand not configured if

00:40:27,890 --> 00:40:32,690
that flag is set and a lot of these

00:40:29,990 --> 00:40:34,279
things all are scheduling related these

00:40:32,690 --> 00:40:37,579
are all the things that Messrs is going

00:40:34,279 --> 00:40:39,559
to take a decision on and these are the

00:40:37,579 --> 00:40:41,599
things that it won't ever do Bayesian

00:40:39,559 --> 00:40:43,819
attributes probably because attributes

00:40:41,599 --> 00:40:45,710
we don't control there's no concept of

00:40:43,819 --> 00:40:47,690
first-class attributes so the you can

00:40:45,710 --> 00:40:49,809
think of domains and hostname for

00:40:47,690 --> 00:40:52,940
example all of these are first-class

00:40:49,809 --> 00:40:54,920
attributes in some sense of of Mesa so

00:40:52,940 --> 00:40:57,109
that missiles can actually look into

00:40:54,920 --> 00:40:59,089
them and make some decisions whether

00:40:57,109 --> 00:41:01,910
it's scheduling related or something

00:40:59,089 --> 00:41:03,950
else an attributes are just free form we

00:41:01,910 --> 00:41:06,529
just pass it through completely opaque

00:41:03,950 --> 00:41:09,109
to missus it's just a contract between

00:41:06,529 --> 00:41:11,980
the framework and the operator like

00:41:09,109 --> 00:41:14,450
missus doesn't come into the play with

00:41:11,980 --> 00:41:16,819
first-class primitives like fall domains

00:41:14,450 --> 00:41:18,020
they come into play missus this

00:41:16,819 --> 00:41:21,470
allocation algorithm is actually

00:41:18,020 --> 00:41:26,710
impacted by the domain values and the

00:41:21,470 --> 00:41:26,710
combinations of them yes

00:41:31,800 --> 00:41:38,440
so the question was easiest a step

00:41:33,940 --> 00:41:42,550
towards federated mrs. masters yes we

00:41:38,440 --> 00:41:45,010
haven't yet nailed down how exactly in

00:41:42,550 --> 00:41:46,510
the Federation world these domains come

00:41:45,010 --> 00:41:48,340
into play but this is one of the things

00:41:46,510 --> 00:41:50,620
that we thought was a good primitive to

00:41:48,340 --> 00:41:53,080
go towards Federation especially if you

00:41:50,620 --> 00:41:55,450
want to allow masters in different

00:41:53,080 --> 00:41:57,460
regions to be able to join the

00:41:55,450 --> 00:41:59,260
Federation and then expose resources

00:41:57,460 --> 00:42:01,270
they should probably have this concept

00:41:59,260 --> 00:42:02,830
of Regents so that the Federation

00:42:01,270 --> 00:42:05,530
control plane can actually look into

00:42:02,830 --> 00:42:07,120
that and make some smart additions so we

00:42:05,530 --> 00:42:08,980
hope it's a step towards it but it's

00:42:07,120 --> 00:42:10,900
it's still very nascent I would say in

00:42:08,980 --> 00:42:13,000
terms of how the control plan would look

00:42:10,900 --> 00:42:16,780
in if additive old this is just like a

00:42:13,000 --> 00:42:26,230
very baby step towards it that's what my

00:42:16,780 --> 00:42:28,510
take is so any more questions cool all

00:42:26,230 --> 00:42:32,849
right thanks guys

00:42:28,510 --> 00:42:32,849

YouTube URL: https://www.youtube.com/watch?v=XzesR9cZLiE


