Title: Time Traveling in the Universe of Microservices and Orchestration - Ilya Dmitrichenko, Weaveworks
Publication date: 2017-10-31
Playlist: MesosCon Europe 2017
Description: 
	Time Traveling in the Universe of Microservices and Orchestration - Ilya Dmitrichenko, Weaveworks

In this talk Ilya will demonstrate how Weaveworks team uses open-source software they've built to observe and manage highly dynamic microservices-based infrastructure topology and it's performance metrics over time.

About Ilya Dmitrichenko
Ilya is a Developer Experience Engineer at Weaveworks, focused on making the adoption of microservices easier. Prior to Weaveworks, Ilya worked at Xively, where he personally experienced the shift to a true DevOps culture. He began to shift focus down the stack, becoming one of the early evangelists of and contributors to open source projects in the emerging Docker/container ecosystem.
Captions: 
	00:00:00,030 --> 00:00:06,000
so hello everyone good afternoon hope

00:00:04,230 --> 00:00:10,320
you enjoyed your lunch I think coming to

00:00:06,000 --> 00:00:13,980
this session and my name is Lilia from V

00:00:10,320 --> 00:00:16,020
works based in London and today I'd like

00:00:13,980 --> 00:00:17,580
to talk to you about time travelling in

00:00:16,020 --> 00:00:23,880
the universe of micro sources and

00:00:17,580 --> 00:00:27,449
orchestration I've been working on cloud

00:00:23,880 --> 00:00:29,369
native tools since about 2014 and as a

00:00:27,449 --> 00:00:33,899
company we are running commercial sauce

00:00:29,369 --> 00:00:37,200
product on kubernetes and ec2 and I must

00:00:33,899 --> 00:00:39,690
say probably one of one of you know

00:00:37,200 --> 00:00:41,579
early vendors in this space we've

00:00:39,690 --> 00:00:44,030
released we've net overlay Network for

00:00:41,579 --> 00:00:47,100
docker back in 2014 when I started and

00:00:44,030 --> 00:00:49,350
it's it's been our flagship open-source

00:00:47,100 --> 00:00:51,420
product since however we also built a

00:00:49,350 --> 00:00:53,250
commercial sauce product which is called

00:00:51,420 --> 00:00:55,350
beef cloud which I'll show you at the

00:00:53,250 --> 00:00:57,449
end and time travel is essentially one

00:00:55,350 --> 00:00:58,620
of the features we have in V cloud and

00:00:57,449 --> 00:01:01,920
I'll show you a little bit of that at

00:00:58,620 --> 00:01:03,719
the end but I'll begin by going back in

00:01:01,920 --> 00:01:06,630
time and talking about some of the

00:01:03,719 --> 00:01:11,640
experience I had in the past with Linux

00:01:06,630 --> 00:01:13,320
systems and I'll relate to the present

00:01:11,640 --> 00:01:15,119
day when we have containers and how

00:01:13,320 --> 00:01:16,229
containers could have come it could have

00:01:15,119 --> 00:01:20,009
come so useful

00:01:16,229 --> 00:01:21,900
back then in various cases hopefully

00:01:20,009 --> 00:01:24,540
you'll enjoy it there'll be not too

00:01:21,900 --> 00:01:29,369
technical talk and hopefully quite good

00:01:24,540 --> 00:01:33,119
for you know after lunch talk alright so

00:01:29,369 --> 00:01:36,270
we start so yeah as I said I'll start by

00:01:33,119 --> 00:01:39,060
giving you a little insight into my

00:01:36,270 --> 00:01:40,619
journey in software and why do I care

00:01:39,060 --> 00:01:41,899
about these things why do I care to come

00:01:40,619 --> 00:01:45,119
here and talk to you about this

00:01:41,899 --> 00:01:48,920
hopefully you know you can make up your

00:01:45,119 --> 00:01:48,920
mind by relating to it or whatnot and

00:01:49,310 --> 00:01:54,570
and then I'll I'll show you where are we

00:01:52,380 --> 00:01:55,950
today all wonderful things we've been

00:01:54,570 --> 00:01:59,800
able to do with containers and leave

00:01:55,950 --> 00:02:06,310
cloud such as time travel

00:01:59,800 --> 00:02:10,760
so before I begin I I wanted to sort of

00:02:06,310 --> 00:02:12,860
bring it up but what is it well why did

00:02:10,760 --> 00:02:17,480
I care about containers why should you

00:02:12,860 --> 00:02:20,390
care about containers I've used Linux

00:02:17,480 --> 00:02:24,440
since 2002 or three I can't remember for

00:02:20,390 --> 00:02:28,700
sure and that's like twelve years right

00:02:24,440 --> 00:02:32,510
and I used it in work context for about

00:02:28,700 --> 00:02:33,290
nine years now and I've done various

00:02:32,510 --> 00:02:36,050
different things

00:02:33,290 --> 00:02:39,050
I know go through some of these examples

00:02:36,050 --> 00:02:42,740
momentarily I just want to say you know

00:02:39,050 --> 00:02:44,660
throw this time I learned a lot through

00:02:42,740 --> 00:02:47,890
through the material that community puts

00:02:44,660 --> 00:02:52,910
out there on blog posts documentation

00:02:47,890 --> 00:02:54,320
etc and I really appreciate this

00:02:52,910 --> 00:02:56,600
information being given to me for free

00:02:54,320 --> 00:02:58,190
and really trying to give back to the

00:02:56,600 --> 00:02:59,390
community by going out to conferences

00:02:58,190 --> 00:03:04,400
our meetups and talking about these

00:02:59,390 --> 00:03:08,870
things and you know while working with

00:03:04,400 --> 00:03:12,770
Linux I I solved various kinds of

00:03:08,870 --> 00:03:17,750
problems but two pretty major kind of

00:03:12,770 --> 00:03:21,200
predominant themes always been packages

00:03:17,750 --> 00:03:24,080
and dependency management that was there

00:03:21,200 --> 00:03:29,019
like from day one except I had no idea

00:03:24,080 --> 00:03:31,820
what I was doing I really had no idea

00:03:29,019 --> 00:03:33,500
and then I learned a bit more and and

00:03:31,820 --> 00:03:37,580
then I learned that I learned very

00:03:33,500 --> 00:03:38,930
little and then I learned more and I I

00:03:37,580 --> 00:03:42,830
think I'm getting fairly good good

00:03:38,930 --> 00:03:46,130
understanding of it but the tools I find

00:03:42,830 --> 00:03:48,650
most handy are you know docker

00:03:46,130 --> 00:03:53,000
containers docker images there was a big

00:03:48,650 --> 00:03:57,230
breakthrough and second thing is

00:03:53,000 --> 00:04:00,280
resource management it's a you know it's

00:03:57,230 --> 00:04:03,440
something that didn't heat me right away

00:04:00,280 --> 00:04:05,570
but eventually understood that hey this

00:04:03,440 --> 00:04:08,480
app is using too much memory how do I

00:04:05,570 --> 00:04:10,030
stop it from doing that or I'm trying to

00:04:08,480 --> 00:04:13,310
compile something but I'm also trying to

00:04:10,030 --> 00:04:17,539
write this document

00:04:13,310 --> 00:04:22,770
how did how do I make that happen nicely

00:04:17,539 --> 00:04:25,050
and reasonably fast so you know doesn't

00:04:22,770 --> 00:04:27,259
magic there but but container

00:04:25,050 --> 00:04:31,020
orchestration comes pretty handy here I

00:04:27,259 --> 00:04:35,310
wouldn't trust myself and setting up see

00:04:31,020 --> 00:04:37,410
groups or anything like that but you

00:04:35,310 --> 00:04:40,669
know I'd rather tell my orchestrates to

00:04:37,410 --> 00:04:43,020
do that for these meters or Kerber years

00:04:40,669 --> 00:04:45,539
however if you know there isn't magic

00:04:43,020 --> 00:04:48,150
there's no magic at all you still have

00:04:45,539 --> 00:04:54,660
to understand what what are you doing

00:04:48,150 --> 00:04:57,810
it just helps a little bit so it was

00:04:54,660 --> 00:05:00,449
around 2005 that I went to university in

00:04:57,810 --> 00:05:04,770
England and they got myself a desktop

00:05:00,449 --> 00:05:06,360
machine like a normal PC on you know

00:05:04,770 --> 00:05:08,190
poked around for a while obviously

00:05:06,360 --> 00:05:10,020
installed Linux right away I used Linux

00:05:08,190 --> 00:05:12,180
before that and I installed it right

00:05:10,020 --> 00:05:13,560
there and and you know at some point I

00:05:12,180 --> 00:05:15,660
kind of got bored of hardware and I

00:05:13,560 --> 00:05:20,039
looked up what is it there that I can

00:05:15,660 --> 00:05:24,180
buy and I get myself a son ultra 5 for

00:05:20,039 --> 00:05:26,760
30 pounds on eBay I I like the desktop a

00:05:24,180 --> 00:05:28,949
lot I kind of I I admire the look and

00:05:26,760 --> 00:05:33,479
feel of it I couldn't do much with it

00:05:28,949 --> 00:05:35,220
terminal was pretty terrible and yeah I

00:05:33,479 --> 00:05:37,680
mean but you had this great look and

00:05:35,220 --> 00:05:39,349
feel and then I also really liked the

00:05:37,680 --> 00:05:43,259
keyboard I couldn't find a photo of it

00:05:39,349 --> 00:05:45,270
but yeah well so what happened is like

00:05:43,259 --> 00:05:46,949
you know I go and install Solaris 8

00:05:45,270 --> 00:05:49,800
which is which is what this box came

00:05:46,949 --> 00:05:53,039
came with originally a networked okay I

00:05:49,800 --> 00:05:55,020
could get the desktop but after that I

00:05:53,039 --> 00:05:56,789
learned about Solaris 10 which just came

00:05:55,020 --> 00:05:59,520
out around that time and I learned about

00:05:56,789 --> 00:06:01,740
containers in Solaris 10 and like ZFS

00:05:59,520 --> 00:06:04,380
and dtrace and all these cool things I

00:06:01,740 --> 00:06:07,199
tried to install Solaris 10 and it

00:06:04,380 --> 00:06:09,150
didn't quite cut it I mean this machine

00:06:07,199 --> 00:06:11,669
was too slow for Solaris Stan I couldn't

00:06:09,150 --> 00:06:13,979
really use the latest OS on that so

00:06:11,669 --> 00:06:15,300
unfortunately I only learned but I got

00:06:13,979 --> 00:06:17,940
the taste for containers from the

00:06:15,300 --> 00:06:19,919
commentation on videos and like various

00:06:17,940 --> 00:06:21,900
white papers they had and stuff but I I

00:06:19,919 --> 00:06:23,759
couldn't really use containers because

00:06:21,900 --> 00:06:25,620
we could run Solaris 10 on this

00:06:23,759 --> 00:06:27,419
and I couldn't use the keyboard with my

00:06:25,620 --> 00:06:29,249
PCI that had a different cable but

00:06:27,419 --> 00:06:32,490
that's a separate story so it served as

00:06:29,249 --> 00:06:34,439
a good monitor stand for a while I

00:06:32,490 --> 00:06:37,289
didn't have room for it at some point

00:06:34,439 --> 00:06:41,490
but anyway so that's how I learned about

00:06:37,289 --> 00:06:44,460
containers so and you know and after

00:06:41,490 --> 00:06:48,930
that I was I was using gene to Linux for

00:06:44,460 --> 00:06:50,849
for a number of years and one of the

00:06:48,930 --> 00:06:53,460
first things you do was gene to you you

00:06:50,849 --> 00:06:55,979
do chroot or actually as you call it

00:06:53,460 --> 00:07:00,029
they're true it right I only learned

00:06:55,979 --> 00:07:01,219
later I thought it's the chroot so I

00:07:00,029 --> 00:07:05,610
didn't know what that meant

00:07:01,219 --> 00:07:07,889
but it was definitely a thing now that I

00:07:05,610 --> 00:07:10,949
you know know about containers and mount

00:07:07,889 --> 00:07:13,759
namespaces I understand chroot was like

00:07:10,949 --> 00:07:16,199
a basic version of that back in the day

00:07:13,759 --> 00:07:18,059
so I really had no idea what it was

00:07:16,199 --> 00:07:21,029
doing here but I definitely typed that

00:07:18,059 --> 00:07:25,050
wasn't it docks and then I learned a bit

00:07:21,029 --> 00:07:27,059
of bash and like customize my prompts

00:07:25,050 --> 00:07:28,800
and stuff right this is what they used

00:07:27,059 --> 00:07:30,599
but this this is that this sort of where

00:07:28,800 --> 00:07:34,949
I learned how to customize the prompt

00:07:30,599 --> 00:07:36,990
and you know that was fun

00:07:34,949 --> 00:07:38,939
and then I compiled a lot like

00:07:36,990 --> 00:07:40,379
everything in gene - that's what you do

00:07:38,939 --> 00:07:41,969
compile everything right you compile

00:07:40,379 --> 00:07:45,509
everything from source so ended up

00:07:41,969 --> 00:07:47,520
compiling like pretty much every open

00:07:45,509 --> 00:07:52,610
source project that there was somewhat

00:07:47,520 --> 00:07:56,099
popular and because I was curious and

00:07:52,610 --> 00:08:01,080
well while compiling things a lot I

00:07:56,099 --> 00:08:02,819
learned to control the way that my

00:08:01,080 --> 00:08:05,219
compiled jobs use resources on the

00:08:02,819 --> 00:08:08,099
machine and the basic way of doing that

00:08:05,219 --> 00:08:10,080
was this nice command and later I own

00:08:08,099 --> 00:08:12,749
eyes and they were they were quite nice

00:08:10,080 --> 00:08:14,219
but I later learned that these were

00:08:12,749 --> 00:08:16,860
really rudimentary and kind of like

00:08:14,219 --> 00:08:24,240
indirect ways of managing resources on

00:08:16,860 --> 00:08:25,800
your machine and well I mean I'm not

00:08:24,240 --> 00:08:28,409
going to to question whether you should

00:08:25,800 --> 00:08:30,649
be compiling your desktop OS from source

00:08:28,409 --> 00:08:35,089
or not that is a separate discussion

00:08:30,649 --> 00:08:35,089
however let's move on

00:08:35,719 --> 00:08:44,839
so you know started hacking on some open

00:08:39,740 --> 00:08:47,000
source project and as folks been like

00:08:44,839 --> 00:08:49,610
releasing tarballs and Debian packages

00:08:47,000 --> 00:08:51,110
and red hot packages etc I wasn't

00:08:49,610 --> 00:08:54,170
getting any of those when gene - so I

00:08:51,110 --> 00:08:57,320
had to compile mine and well why not

00:08:54,170 --> 00:08:58,910
right and I ended up doing this kind of

00:08:57,320 --> 00:09:01,610
thing most of the time so it put put

00:08:58,910 --> 00:09:04,910
like a new version under under a prefix

00:09:01,610 --> 00:09:06,520
with the version number in it and I

00:09:04,910 --> 00:09:10,339
would often have to specify with

00:09:06,520 --> 00:09:11,899
something path to sort of tell it like

00:09:10,339 --> 00:09:15,110
where to find some headers or whatever

00:09:11,899 --> 00:09:16,970
and and then I would install it manually

00:09:15,110 --> 00:09:18,890
and you know started learning these

00:09:16,970 --> 00:09:24,830
things started grasping how these things

00:09:18,890 --> 00:09:31,820
work but I mean yeah it's like it was a

00:09:24,830 --> 00:09:33,080
very small scale of my desktop as a you

00:09:31,820 --> 00:09:35,660
know progress through my university

00:09:33,080 --> 00:09:38,000
courses the electronics and we didn't

00:09:35,660 --> 00:09:40,490
really do programming languages or

00:09:38,000 --> 00:09:42,200
computer science as such we kinda did a

00:09:40,490 --> 00:09:44,450
bit of Python and then we jump straight

00:09:42,200 --> 00:09:46,100
to see and not see on like UNIX or

00:09:44,450 --> 00:09:50,529
Windows or whatever but see on

00:09:46,100 --> 00:09:53,690
microcontrollers that was quite fun and

00:09:50,529 --> 00:09:55,100
you know but like what we did at uni is

00:09:53,690 --> 00:09:57,890
one thing and what I did at home was

00:09:55,100 --> 00:09:59,089
like all open source and stuff and at

00:09:57,890 --> 00:10:02,660
uni we would use like some ancient

00:09:59,089 --> 00:10:04,490
compilers and at home I use GCC and I

00:10:02,660 --> 00:10:07,910
picked up some microcontroller projects

00:10:04,490 --> 00:10:09,500
from SourceForge etc and what you'd

00:10:07,910 --> 00:10:11,450
often end up doing because they're the

00:10:09,500 --> 00:10:13,850
they didn't normally use all to make or

00:10:11,450 --> 00:10:16,250
anything like that you just use make and

00:10:13,850 --> 00:10:18,410
you would specify CC and then you go and

00:10:16,250 --> 00:10:20,480
check which one we what's the flavor of

00:10:18,410 --> 00:10:22,430
GCC that you got to be using today and

00:10:20,480 --> 00:10:25,149
I've had multiple of those installed a

00:10:22,430 --> 00:10:27,850
partition management problem again right

00:10:25,149 --> 00:10:31,100
so yeah would be something like that and

00:10:27,850 --> 00:10:33,529
then and then sometimes you get like a

00:10:31,100 --> 00:10:39,050
linker error so you get a specify LD as

00:10:33,529 --> 00:10:43,810
well anyway but what I was getting to is

00:10:39,050 --> 00:10:43,810
that back then I've discovered yeah

00:10:43,890 --> 00:10:51,130
anyway back then I discovered this

00:10:48,540 --> 00:10:53,500
project on SourceForge called module and

00:10:51,130 --> 00:10:56,080
it was able to manage different versions

00:10:53,500 --> 00:10:58,180
of GCC on your machine it was already

00:10:56,080 --> 00:11:00,310
quite old at the time as I've just

00:10:58,180 --> 00:11:02,200
double-checked before this talk turns

00:11:00,310 --> 00:11:05,920
out that like the first release of

00:11:02,200 --> 00:11:09,430
modules was back in 1998 it was written

00:11:05,920 --> 00:11:11,950
in sickle and I never actually used it I

00:11:09,430 --> 00:11:13,600
just where I was aware of it I thought

00:11:11,950 --> 00:11:16,630
it'd be something I could use if I had

00:11:13,600 --> 00:11:18,940
to manage more versions of GCC for more

00:11:16,630 --> 00:11:22,840
people or whatever before myself I was

00:11:18,940 --> 00:11:25,000
kind of just about managing and I looked

00:11:22,840 --> 00:11:27,070
it up I was quite surprised they'd

00:11:25,000 --> 00:11:32,020
actually somebody is actually working on

00:11:27,070 --> 00:11:35,920
this project like now they've made a lot

00:11:32,020 --> 00:11:38,920
of changes recently and it's it's alive

00:11:35,920 --> 00:11:41,530
and well and on github which was a farm

00:11:38,920 --> 00:11:44,410
discovery I wonder why they are not

00:11:41,530 --> 00:11:48,640
using docker images they're using this

00:11:44,410 --> 00:11:51,270
old tickle project and in case

00:11:48,640 --> 00:11:54,670
so as thing move as things moved on

00:11:51,270 --> 00:11:56,740
towards the end of my university course

00:11:54,670 --> 00:11:58,060
I got a part-time job at a hosting

00:11:56,740 --> 00:11:59,860
company which I'll tell you more in a

00:11:58,060 --> 00:12:01,570
minute but I was just gonna say while

00:11:59,860 --> 00:12:05,110
working on my dissertation I learned to

00:12:01,570 --> 00:12:07,600
use git and you still find that on

00:12:05,110 --> 00:12:11,590
online but that's a revelant to the

00:12:07,600 --> 00:12:13,920
topic that was just means of coming to

00:12:11,590 --> 00:12:16,540
the point where where I got the job so

00:12:13,920 --> 00:12:17,980
I'm at this working I'm working at this

00:12:16,540 --> 00:12:21,880
hosting company they didn't share it

00:12:17,980 --> 00:12:23,410
hosting this is two thousand seven or

00:12:21,880 --> 00:12:26,800
eight or something like that nine

00:12:23,410 --> 00:12:28,830
actually anyway doesn't really matter

00:12:26,800 --> 00:12:31,420
that much the way to ensure hosting and

00:12:28,830 --> 00:12:33,730
cherish think was still a thing maybe

00:12:31,420 --> 00:12:38,230
not so many people used it but some

00:12:33,730 --> 00:12:43,290
people did and yeah I mean I'm just

00:12:38,230 --> 00:12:43,290
gonna like play this little video

00:12:45,360 --> 00:12:52,200
essentially like we had some of the

00:12:49,260 --> 00:12:54,160
worst

00:12:52,200 --> 00:12:57,610
dependency management package man has

00:12:54,160 --> 00:12:58,720
been config management problems you know

00:12:57,610 --> 00:13:01,980
there would be like I don't know we

00:12:58,720 --> 00:13:05,410
didn't have many servers and and

00:13:01,980 --> 00:13:08,470
there'll be different customers running

00:13:05,410 --> 00:13:10,630
their WordPress and such can apps on

00:13:08,470 --> 00:13:14,350
different servers and some of them would

00:13:10,630 --> 00:13:15,760
have different versions of PHP like they

00:13:14,350 --> 00:13:17,680
would require them they would depend on

00:13:15,760 --> 00:13:19,029
them and we we we had to like move

00:13:17,680 --> 00:13:21,550
people around from one server to another

00:13:19,029 --> 00:13:26,620
to match up with a version of PHP they

00:13:21,550 --> 00:13:29,110
wanted yeah so that kind of stuff and

00:13:26,620 --> 00:13:31,209
you know and don't even get me started

00:13:29,110 --> 00:13:34,860
on like resource management because this

00:13:31,209 --> 00:13:40,209
WordPress sites go tact all the time and

00:13:34,860 --> 00:13:43,000
yeah so that was a lot of fun anyway

00:13:40,209 --> 00:13:45,279
well I started googling Linux containers

00:13:43,000 --> 00:13:47,110
I remember solaris containers right and

00:13:45,279 --> 00:13:49,180
I thought well containers on Linux is

00:13:47,110 --> 00:13:53,200
that a thing yet so I started googling

00:13:49,180 --> 00:13:54,850
that and and I remember starting to find

00:13:53,200 --> 00:13:57,700
certain things like openvz

00:13:54,850 --> 00:13:59,110
but that was kind of complicated and it

00:13:57,700 --> 00:14:01,420
wasn't something I was able to introduce

00:13:59,110 --> 00:14:05,830
at this company I mean I was like a

00:14:01,420 --> 00:14:07,540
junior support person right but I was

00:14:05,830 --> 00:14:11,020
like trying to figure out what would be

00:14:07,540 --> 00:14:13,300
a better solution to this and you know

00:14:11,020 --> 00:14:16,540
didn't didn't didn't try openvz at the

00:14:13,300 --> 00:14:20,100
time it seemed complicated anyway I was

00:14:16,540 --> 00:14:23,020
writing that this station anyway so

00:14:20,100 --> 00:14:25,810
anyway that job was over at some point I

00:14:23,020 --> 00:14:32,320
got a DevOps job fancy title I still

00:14:25,810 --> 00:14:34,900
don't know what it means so you know and

00:14:32,320 --> 00:14:36,820
again I'm managing packages and

00:14:34,900 --> 00:14:41,380
dependencies and machine resources for

00:14:36,820 --> 00:14:43,959
most of the time so some of the things

00:14:41,380 --> 00:14:46,750
we had to deal with involved oh yeah so

00:14:43,959 --> 00:14:48,130
we used puppet for example and at the

00:14:46,750 --> 00:14:51,520
time I was like oh yeah puppet sounds

00:14:48,130 --> 00:14:53,170
cool and I still like the syntax a lot I

00:14:51,520 --> 00:14:55,810
think it's very nice and expressive

00:14:53,170 --> 00:14:57,760
syntax I'm Li not using puppet anymore

00:14:55,810 --> 00:14:59,200
however I just had this slide here

00:14:57,760 --> 00:15:01,900
because this is actually something that

00:14:59,200 --> 00:15:05,270
is quite similar to what we do today

00:15:01,900 --> 00:15:07,400
except we did with Scoob religious so

00:15:05,270 --> 00:15:10,520
we were doing this kind of decentralized

00:15:07,400 --> 00:15:13,280
masterless puppet setup where we do a

00:15:10,520 --> 00:15:15,050
git pull or well fool or clone or

00:15:13,280 --> 00:15:18,020
whatever and then we go into that

00:15:15,050 --> 00:15:19,910
directory and do puppet apply and we do

00:15:18,020 --> 00:15:21,590
that periodically from a cron job so

00:15:19,910 --> 00:15:26,080
essentially we were doing decentralized

00:15:21,590 --> 00:15:26,080
puppet what was this kind of thing and

00:15:26,470 --> 00:15:29,810
it's something I'm going to show you

00:15:28,280 --> 00:15:35,020
later how we do some other thing with

00:15:29,810 --> 00:15:37,220
kubernetes similar concept please and

00:15:35,020 --> 00:15:39,590
you know one of the first things I've

00:15:37,220 --> 00:15:46,370
discovered was this Ruby version manager

00:15:39,590 --> 00:15:49,430
our VM and you would you do this or like

00:15:46,370 --> 00:15:52,280
you you after you install our VM you end

00:15:49,430 --> 00:15:56,300
up with this sort of thing in your flash

00:15:52,280 --> 00:15:58,640
profile right and and then and then

00:15:56,300 --> 00:16:01,190
after you kind of like done a couple of

00:15:58,640 --> 00:16:04,700
those things you end up with CD command

00:16:01,190 --> 00:16:06,140
Ellis to this function which which does

00:16:04,700 --> 00:16:11,900
magic whenever you change directories

00:16:06,140 --> 00:16:14,540
basically which is great so we managed

00:16:11,900 --> 00:16:16,670
to reap that up and replaced it with

00:16:14,540 --> 00:16:20,960
this key thing called RB and which is

00:16:16,670 --> 00:16:24,110
much simpler and nicer however we soon

00:16:20,960 --> 00:16:27,830
introduced closure and no GS and some

00:16:24,110 --> 00:16:31,700
Python and some different versions of

00:16:27,830 --> 00:16:34,840
JVM like Cassandra was using one while

00:16:31,700 --> 00:16:37,400
our closure up was using a different JVM

00:16:34,840 --> 00:16:41,510
fun stuff containers could definitely

00:16:37,400 --> 00:16:44,630
come useful there and you know this is

00:16:41,510 --> 00:16:47,810
you probably all know this you know this

00:16:44,630 --> 00:16:49,130
beside that that our VM stuff you still

00:16:47,810 --> 00:16:51,620
had to do this kind of thing where you

00:16:49,130 --> 00:16:53,750
go use one package manager to get your

00:16:51,620 --> 00:16:56,480
other package manager and that use that

00:16:53,750 --> 00:16:58,220
package manager to get your packages no

00:16:56,480 --> 00:17:01,040
actually in Ruby you got the three right

00:16:58,220 --> 00:17:02,840
so you got you'd use your system package

00:17:01,040 --> 00:17:04,490
manager to install Ruby gems once you

00:17:02,840 --> 00:17:06,920
install Ruby gems you install bundler

00:17:04,490 --> 00:17:11,360
and bundler is like a wrapper on top of

00:17:06,920 --> 00:17:16,400
gem I mean things are not dissimilar in

00:17:11,360 --> 00:17:18,610
Python world you know no GS has a little

00:17:16,400 --> 00:17:18,610
less

00:17:18,850 --> 00:17:27,110
anyway but is much easier once you can

00:17:24,380 --> 00:17:29,830
encapsulate this in your container image

00:17:27,110 --> 00:17:32,390
and you don't have to worry about it and

00:17:29,830 --> 00:17:37,820
eventually they'll improve their package

00:17:32,390 --> 00:17:41,510
managers supposedly and we also had this

00:17:37,820 --> 00:17:43,220
amazing thing called Capistrano all you

00:17:41,510 --> 00:17:46,910
had to do is to go around cop deploy

00:17:43,220 --> 00:17:51,020
production that's all you had to do you

00:17:46,910 --> 00:17:53,890
know what I call it now it was a great

00:17:51,020 --> 00:17:56,390
chaos monkey tool except that you know

00:17:53,890 --> 00:18:04,870
you you you you triggered it was a

00:17:56,390 --> 00:18:07,160
different intent anyway let's move on

00:18:04,870 --> 00:18:10,490
that does this other thing as well right

00:18:07,160 --> 00:18:13,730
there's this get flow somebody who was

00:18:10,490 --> 00:18:17,510
inspired by get flow blog post and they

00:18:13,730 --> 00:18:21,560
implemented it in go CD if you familiar

00:18:17,510 --> 00:18:23,210
was go CD and nobody knew how to use it

00:18:21,560 --> 00:18:25,970
really our software wasn't that

00:18:23,210 --> 00:18:28,040
complicated so this is designed for you

00:18:25,970 --> 00:18:30,740
know folks who do version releases and

00:18:28,040 --> 00:18:32,420
they brought different versions in

00:18:30,740 --> 00:18:35,390
different environments and such things

00:18:32,420 --> 00:18:37,820
we didn't do any of that we didn't need

00:18:35,390 --> 00:18:38,270
any of this so that the reap that out

00:18:37,820 --> 00:18:43,100
right away

00:18:38,270 --> 00:18:44,960
and yet people just weren't aware that

00:18:43,100 --> 00:18:47,930
this is completely useless complexity

00:18:44,960 --> 00:18:50,240
that we had another thing to have

00:18:47,930 --> 00:18:51,410
happened to implement there I mean I

00:18:50,240 --> 00:18:53,600
removed a bunch of things and

00:18:51,410 --> 00:18:58,030
implemented this kind of thing which was

00:18:53,600 --> 00:19:00,620
okay we were we had this pool of VMs

00:18:58,030 --> 00:19:04,430
where developer would go and say I want

00:19:00,620 --> 00:19:07,130
to be m1 VM take and then can SSH to it

00:19:04,430 --> 00:19:11,510
and do some work and throw it away right

00:19:07,130 --> 00:19:13,640
and we didn't have Parker we could have

00:19:11,510 --> 00:19:18,020
used Parker if we were aware of it but

00:19:13,640 --> 00:19:22,280
we weren't we used VMware okay fine

00:19:18,020 --> 00:19:26,140
but like you know this could have easily

00:19:22,280 --> 00:19:26,140
been replaced was like a a a

00:19:26,300 --> 00:19:33,380
buncha dog containers really right so

00:19:33,470 --> 00:19:41,430
and sometime later a colleague of mine

00:19:38,790 --> 00:19:43,350
asked me to come over to his desk saying

00:19:41,430 --> 00:19:45,680
well loan check something out and it was

00:19:43,350 --> 00:19:47,700
the first demo of docker on how can use

00:19:45,680 --> 00:19:50,190
that was pretty amazing pretty

00:19:47,700 --> 00:19:52,080
mind-blowing but at the time were kind

00:19:50,190 --> 00:19:53,940
of like oh solaris containers things

00:19:52,080 --> 00:19:57,990
have seen his openvz this is very

00:19:53,940 --> 00:20:01,440
different it took me a little time to

00:19:57,990 --> 00:20:04,070
get to terms with it but I was

00:20:01,440 --> 00:20:09,120
definitely impressed with how easy it

00:20:04,070 --> 00:20:11,610
seemed to be and then later I started

00:20:09,120 --> 00:20:14,550
learning a bit more about Messrs Korres

00:20:11,610 --> 00:20:17,040
and Console terraform all these new

00:20:14,550 --> 00:20:18,210
tools and I played around with it and

00:20:17,040 --> 00:20:21,990
then I got a new job

00:20:18,210 --> 00:20:25,770
I met the X rabbit MQ co-founders who

00:20:21,990 --> 00:20:27,780
just started a new company just called

00:20:25,770 --> 00:20:32,150
zetia at the time now it's V works and

00:20:27,780 --> 00:20:34,110
we released Viva net just like well

00:20:32,150 --> 00:20:38,100
they're released even have before I

00:20:34,110 --> 00:20:41,660
joined umm but yeah anyway so started

00:20:38,100 --> 00:20:45,720
working on containers how fun is that

00:20:41,660 --> 00:20:49,530
so fast-forward to present what have you

00:20:45,720 --> 00:20:52,920
got well let's consider even add for

00:20:49,530 --> 00:20:56,400
example it's it's an application

00:20:52,920 --> 00:20:57,780
oriented overlay network even that user

00:20:56,400 --> 00:21:00,390
doesn't really need to know anything

00:20:57,780 --> 00:21:02,750
about underlying technology whatever it

00:21:00,390 --> 00:21:06,810
uses VX LAN IP SEC that kind of stuff

00:21:02,750 --> 00:21:09,180
users don't have to know about that they

00:21:06,810 --> 00:21:11,400
don't have to make any changes to their

00:21:09,180 --> 00:21:17,040
underlying infrastructure to run the if

00:21:11,400 --> 00:21:18,960
net and they can do things like provide

00:21:17,040 --> 00:21:20,910
identity to each other like an IP

00:21:18,960 --> 00:21:23,880
address yet get an IP address for each

00:21:20,910 --> 00:21:26,640
of their apps use default ports don't

00:21:23,880 --> 00:21:29,100
have to use like port remapping for each

00:21:26,640 --> 00:21:30,600
instance of different apps right and

00:21:29,100 --> 00:21:35,040
we'll get to some of the examples

00:21:30,600 --> 00:21:38,610
shortly so oh yeah here we go

00:21:35,040 --> 00:21:39,879
so like imagine this right in perhaps

00:21:38,610 --> 00:21:42,849
the olden days

00:21:39,879 --> 00:21:45,279
you have two hosts you got something

00:21:42,849 --> 00:21:47,469
running here and something else here you

00:21:45,279 --> 00:21:49,359
got this other thing that that gets this

00:21:47,469 --> 00:21:51,879
port and then and then if you kind of

00:21:49,359 --> 00:21:53,079
follow this schema you say okay well now

00:21:51,879 --> 00:21:55,359
I'm gonna put a couple more things of

00:21:53,079 --> 00:22:00,519
this kind here and I go give them these

00:21:55,359 --> 00:22:03,129
port numbers and now I got like an okay

00:22:00,519 --> 00:22:05,739
thing I suppose then I introduce another

00:22:03,129 --> 00:22:08,199
thing and I bumped the port numbers

00:22:05,739 --> 00:22:10,089
again different way because that's

00:22:08,199 --> 00:22:11,799
supposedly somehow somehow slightly

00:22:10,089 --> 00:22:13,389
different thing so if I'm doing this

00:22:11,799 --> 00:22:15,009
allocations manually perhaps these

00:22:13,389 --> 00:22:16,779
numbers are completely different but

00:22:15,009 --> 00:22:18,489
just imagine that you have like three

00:22:16,779 --> 00:22:19,779
different things and are using

00:22:18,489 --> 00:22:23,019
completely different port numbers and

00:22:19,779 --> 00:22:26,559
they all have to be aware of what those

00:22:23,019 --> 00:22:29,379
port numbers actually been well like if

00:22:26,559 --> 00:22:31,359
if I heat hose to or ninety eighty one

00:22:29,379 --> 00:22:33,879
is that is that what kind of app I'm

00:22:31,359 --> 00:22:37,719
gonna get Who am I gonna get to talk to

00:22:33,879 --> 00:22:41,319
there right and you know some people say

00:22:37,719 --> 00:22:43,179
well oh yeah it gets a bit more complex

00:22:41,319 --> 00:22:45,729
as you can see I mean you're like all

00:22:43,179 --> 00:22:47,440
right well let's just use DNS but the

00:22:45,729 --> 00:22:49,379
problem is that no developers kind of

00:22:47,440 --> 00:22:52,389
like keen to to write this sort of thing

00:22:49,379 --> 00:22:55,779
and if they want to made that they'd

00:22:52,389 --> 00:23:00,159
have to read a pretty big book and they

00:22:55,779 --> 00:23:02,289
can't be bothered most of the time well

00:23:00,159 --> 00:23:04,299
in any case DNS comes out of the box

00:23:02,289 --> 00:23:08,619
with kubernetes and eCos we don't have

00:23:04,299 --> 00:23:10,659
to care it just works now and we don't

00:23:08,619 --> 00:23:13,569
actually have to use those complex

00:23:10,659 --> 00:23:16,209
service discovery mechanisms that that

00:23:13,569 --> 00:23:18,119
were built over time you know there are

00:23:16,209 --> 00:23:20,289
things like

00:23:18,119 --> 00:23:23,229
people did all sorts of things right I

00:23:20,289 --> 00:23:25,809
mean my personal view is that a lot of

00:23:23,229 --> 00:23:28,839
service discovery systems like zookeeper

00:23:25,809 --> 00:23:31,929
and console were invented because DNS

00:23:28,839 --> 00:23:35,319
was too hard and DNS was usually owned

00:23:31,929 --> 00:23:38,019
by an ops team and managed somehow

00:23:35,319 --> 00:23:42,579
separately and hard for developers to

00:23:38,019 --> 00:23:44,409
automate anyway modern container

00:23:42,579 --> 00:23:48,129
orchestration systems comes with DNS out

00:23:44,409 --> 00:23:51,639
of the box can forget this don't have to

00:23:48,129 --> 00:23:53,380
buy that book and if you use an overlay

00:23:51,639 --> 00:23:55,750
network such as view net

00:23:53,380 --> 00:23:57,430
you can just use default port numbers

00:23:55,750 --> 00:24:00,430
for all of your ports let's say all of

00:23:57,430 --> 00:24:03,490
these things talk to HTTP all right and

00:24:00,430 --> 00:24:07,450
we use 8080 because we don't want to run

00:24:03,490 --> 00:24:08,530
it as root and that's it okay they all

00:24:07,450 --> 00:24:12,100
on the same ports

00:24:08,530 --> 00:24:15,880
you just connect using HTTP POST

00:24:12,100 --> 00:24:17,430
name and 8080 and that's it you can hard

00:24:15,880 --> 00:24:19,600
code half of those things potentially

00:24:17,430 --> 00:24:21,400
you don't have to do some sophisticated

00:24:19,600 --> 00:24:22,900
look up unless you have a particular

00:24:21,400 --> 00:24:24,760
case where you doing like client side

00:24:22,900 --> 00:24:28,270
load balancing for whatever reason and

00:24:24,760 --> 00:24:30,880
that makes sense but from what majority

00:24:28,270 --> 00:24:33,670
of the cases you can actually just hard

00:24:30,880 --> 00:24:36,820
code the ports and forget about port

00:24:33,670 --> 00:24:41,230
number little cuts and once we have

00:24:36,820 --> 00:24:43,450
containers in api's we can orchestration

00:24:41,230 --> 00:24:45,370
api's i'm talking about we can implement

00:24:43,450 --> 00:24:47,710
policy so key Bernie's has Network

00:24:45,370 --> 00:24:49,870
policy which which allows us to

00:24:47,710 --> 00:24:51,730
essentially Express that whatever that

00:24:49,870 --> 00:24:54,220
blue thing is it's allowed to talk to

00:24:51,730 --> 00:24:56,200
the red thing and the rest thing is not

00:24:54,220 --> 00:24:58,390
even allowed to to other to talk to

00:24:56,200 --> 00:25:01,600
other red things and dark blue thing

00:24:58,390 --> 00:25:04,000
isn't these these shouldn't be talking

00:25:01,600 --> 00:25:06,700
to it to the right thing you know that

00:25:04,000 --> 00:25:08,710
sort of thing and that's something that

00:25:06,700 --> 00:25:13,600
we can do declaratively with Cabrini's

00:25:08,710 --> 00:25:16,090
network policy api for example and other

00:25:13,600 --> 00:25:18,160
things we can do with the api's is a

00:25:16,090 --> 00:25:24,700
distributed observability and we do that

00:25:18,160 --> 00:25:28,140
with weave scope so I mean I'm sure a

00:25:24,700 --> 00:25:31,870
lot of you are kind of familiar with

00:25:28,140 --> 00:25:35,950
this kind of situation where you'd have

00:25:31,870 --> 00:25:40,210
a multiple terminals running like a CH

00:25:35,950 --> 00:25:42,460
table and you think oh that's cool but

00:25:40,210 --> 00:25:46,360
like I was enabled I was never able to

00:25:42,460 --> 00:25:48,760
process all these information I mean I

00:25:46,360 --> 00:25:53,320
can look at one of them and it all makes

00:25:48,760 --> 00:25:55,690
sense but would put 400 or any of these

00:25:53,320 --> 00:26:00,700
things over how many yeah I think this

00:25:55,690 --> 00:26:04,499
was a 3/4 anyway like too many for me to

00:26:00,700 --> 00:26:07,690
be able to actually understand

00:26:04,499 --> 00:26:10,659
and you know things like that to a

00:26:07,690 --> 00:26:13,929
right-tail and multiple terminals who's

00:26:10,659 --> 00:26:16,899
also pretty verbose and hard to process

00:26:13,929 --> 00:26:19,299
I mean if you stare at it all day maybe

00:26:16,899 --> 00:26:23,499
you'll get used to it but I struggle

00:26:19,299 --> 00:26:31,239
with it I mean it kind of reminds me of

00:26:23,499 --> 00:26:34,389
the syllabus so yeah up runtime metadata

00:26:31,239 --> 00:26:38,469
and API is allowed us to build Reacher

00:26:34,389 --> 00:26:42,789
tools where is a lot more context so you

00:26:38,469 --> 00:26:44,080
know imagine a situation like this you

00:26:42,789 --> 00:26:47,499
can oh you went in the server and you

00:26:44,080 --> 00:26:50,739
found like oh there's a Java process and

00:26:47,499 --> 00:26:53,440
it's it's using some juror that the

00:26:50,739 --> 00:26:56,889
leaves here we're gonna look at when

00:26:53,440 --> 00:27:00,159
that jar was last modified oh that's a

00:26:56,889 --> 00:27:02,559
long time ago right but in order to

00:27:00,159 --> 00:27:06,909
obtain this information you had to be

00:27:02,559 --> 00:27:11,009
aware of what's Java jar and what was

00:27:06,909 --> 00:27:14,799
that thing right imagine you forgotten

00:27:11,009 --> 00:27:16,389
concept of a Java Java jar right you

00:27:14,799 --> 00:27:18,989
could you you kind of like you're just

00:27:16,389 --> 00:27:21,129
thinking okay well there is a process I

00:27:18,989 --> 00:27:25,239
take some arguments is that a

00:27:21,129 --> 00:27:28,509
configuration file or does it it's hard

00:27:25,239 --> 00:27:33,099
to tell whether this represents your

00:27:28,509 --> 00:27:34,419
actual application right but once you

00:27:33,099 --> 00:27:39,039
package that in the container

00:27:34,419 --> 00:27:42,309
you give it a name and that's an

00:27:39,039 --> 00:27:45,129
application you have a version tag you

00:27:42,309 --> 00:27:47,679
can attach extra labels as metadata to

00:27:45,129 --> 00:27:51,369
specify some specific things like build

00:27:47,679 --> 00:27:54,909
date something like that you can look it

00:27:51,369 --> 00:27:58,389
up in the registry using manifest ID and

00:27:54,909 --> 00:28:01,210
find out the exact things that that are

00:27:58,389 --> 00:28:04,450
in there and when they were pushed to

00:28:01,210 --> 00:28:07,690
the registry array so we can build reach

00:28:04,450 --> 00:28:11,919
the tools having all this metadata you

00:28:07,690 --> 00:28:14,769
can build things like what we do is if

00:28:11,919 --> 00:28:17,850
you've Cloud Explorer we can we can look

00:28:14,769 --> 00:28:22,530
at all the containers

00:28:17,850 --> 00:28:25,830
that whose image begins with sock shop

00:28:22,530 --> 00:28:29,700
release and we can we can see where they

00:28:25,830 --> 00:28:33,030
Ron we can dig into them and find out

00:28:29,700 --> 00:28:36,270
like in graph view we can find out who's

00:28:33,030 --> 00:28:37,890
talking to who and we can see more

00:28:36,270 --> 00:28:40,650
information here about particular

00:28:37,890 --> 00:28:42,179
processes inside of it that there is

00:28:40,650 --> 00:28:44,809
process for you as well so you can look

00:28:42,179 --> 00:28:47,900
at lower level stuff

00:28:44,809 --> 00:28:51,630
essentially you get more metadata that

00:28:47,900 --> 00:28:56,820
we can present many more meaningfully to

00:28:51,630 --> 00:29:01,799
you and this this is done with zero

00:28:56,820 --> 00:29:06,120
configuration right and things like this

00:29:01,799 --> 00:29:10,140
right we can look at front-end service

00:29:06,120 --> 00:29:14,030
here and see see who stopped to

00:29:10,140 --> 00:29:18,809
front-end and how much memory the

00:29:14,030 --> 00:29:20,970
neighbors are using for example and we

00:29:18,809 --> 00:29:22,770
can also go back in time this is a time

00:29:20,970 --> 00:29:26,070
travel feature I'll show you a live demo

00:29:22,770 --> 00:29:28,020
afterwards can go back in time and find

00:29:26,070 --> 00:29:33,110
out what happened last night so they

00:29:28,020 --> 00:29:37,320
look at it 79 mag now 71 mag last night

00:29:33,110 --> 00:29:40,169
well not that different and if you

00:29:37,320 --> 00:29:42,000
actually want to find out more you can

00:29:40,169 --> 00:29:45,120
you can click here and you would you'd

00:29:42,000 --> 00:29:49,500
go to to the monitor view where you can

00:29:45,120 --> 00:29:52,710
explore metrics and Prometheus I will

00:29:49,500 --> 00:29:54,299
get to that shortly and you can also log

00:29:52,710 --> 00:29:56,460
into to any of these containers and take

00:29:54,299 --> 00:29:58,350
a look whether well this is just the

00:29:56,460 --> 00:30:00,360
standard output of the container you can

00:29:58,350 --> 00:30:02,850
also drop into the shell inside the

00:30:00,360 --> 00:30:06,030
container as well if you want to check

00:30:02,850 --> 00:30:07,980
whether there's something that you know

00:30:06,030 --> 00:30:10,169
you want to do some manual check off

00:30:07,980 --> 00:30:13,250
some some some kind or just take a look

00:30:10,169 --> 00:30:15,360
whether the output looks right still

00:30:13,250 --> 00:30:17,880
this is something you can disable in

00:30:15,360 --> 00:30:23,370
production also this is more of a

00:30:17,880 --> 00:30:25,980
development mode and other things we are

00:30:23,370 --> 00:30:29,010
able to do with API

00:30:25,980 --> 00:30:32,110
we are able to do what we call get ups

00:30:29,010 --> 00:30:34,420
which is well that showed you earlier

00:30:32,110 --> 00:30:37,780
was puppet right we do the similar thing

00:30:34,420 --> 00:30:41,050
where well you'd think it's just a get

00:30:37,780 --> 00:30:43,000
pull Cupid all apply and I look but it

00:30:41,050 --> 00:30:45,370
isn't really it takes a little more than

00:30:43,000 --> 00:30:47,820
that because you want to be able to lock

00:30:45,370 --> 00:30:50,770
things you want to be able to update

00:30:47,820 --> 00:30:56,800
image attribute whenever there are new

00:30:50,770 --> 00:31:00,660
images and do other things so so here's

00:30:56,800 --> 00:31:03,190
a we've cloud deploy UI it shows you

00:31:00,660 --> 00:31:04,930
we're looking at front-end service here

00:31:03,190 --> 00:31:06,550
this is the image target we're running

00:31:04,930 --> 00:31:08,530
right now that's cool

00:31:06,550 --> 00:31:09,640
but we can take a look at the latest

00:31:08,530 --> 00:31:14,050
change that's been applied to the

00:31:09,640 --> 00:31:17,680
cluster and we can see that okay well it

00:31:14,050 --> 00:31:20,410
got out to make automated so essentially

00:31:17,680 --> 00:31:23,260
well in this case I clicked on that

00:31:20,410 --> 00:31:25,960
button earlier and I automated this

00:31:23,260 --> 00:31:28,630
service so if it sees a new tag in the

00:31:25,960 --> 00:31:31,030
registry I will get updated in gate and

00:31:28,630 --> 00:31:35,410
synchronized with the cluster and when I

00:31:31,030 --> 00:31:39,100
click that button we store the note an

00:31:35,410 --> 00:31:40,390
annotation in the mo that essentially

00:31:39,100 --> 00:31:42,040
means if you if you were to take this

00:31:40,390 --> 00:31:45,790
git repository to a different cluster

00:31:42,040 --> 00:31:47,920
this will be picked up from there right

00:31:45,790 --> 00:31:51,340
so if you rebuilt a cluster or something

00:31:47,920 --> 00:31:56,440
like that or you just want to clone the

00:31:51,340 --> 00:31:58,420
an environment so you can also you know

00:31:56,440 --> 00:32:01,450
you can use also use get in all

00:31:58,420 --> 00:32:03,090
different ways that you can use get for

00:32:01,450 --> 00:32:07,990
example get Blaine right you can see

00:32:03,090 --> 00:32:11,950
what changes who made them and when so

00:32:07,990 --> 00:32:15,130
the yeah this particular one I made most

00:32:11,950 --> 00:32:17,920
of the changes but the automation tool

00:32:15,130 --> 00:32:23,020
we've cloud deploy said this particular

00:32:17,920 --> 00:32:24,940
annotation here and you can correlate

00:32:23,020 --> 00:32:28,750
those who is metrics we have in

00:32:24,940 --> 00:32:31,690
Prometheus here is a deploy event that

00:32:28,750 --> 00:32:36,370
caused the spike what was that say this

00:32:31,690 --> 00:32:38,950
is this is this is memory usage I think

00:32:36,370 --> 00:32:41,590
it's kind of pretty low

00:32:38,950 --> 00:32:43,960
however no that's that's on notes but

00:32:41,590 --> 00:32:49,540
okay I mean there's the same spike in in

00:32:43,960 --> 00:32:53,530
irate for like instantaneous rate of CPU

00:32:49,540 --> 00:32:55,390
usage over five minutes there's a spike

00:32:53,530 --> 00:32:57,460
there too in the spike here so I looked

00:32:55,390 --> 00:33:00,640
at this particular one I found this get

00:32:57,460 --> 00:33:03,610
revision right I went in good and looked

00:33:00,640 --> 00:33:08,230
it up and turned out I scaled the low

00:33:03,610 --> 00:33:10,150
test deployment to 24 parts now that's

00:33:08,230 --> 00:33:13,030
that's what caused the spike it went

00:33:10,150 --> 00:33:17,500
away right away but there was there was

00:33:13,030 --> 00:33:20,860
a spike nevertheless so now I'm going to

00:33:17,500 --> 00:33:24,430
show you that this is all real it's very

00:33:20,860 --> 00:33:27,090
simple demo showing how this works was

00:33:24,430 --> 00:33:31,630
to bring some DC yesterday

00:33:27,090 --> 00:33:42,580
cool yeah well let's hope it all works

00:33:31,630 --> 00:33:45,460
still yeah okay so so I have my

00:33:42,580 --> 00:33:48,160
CloudFormation console here can

00:33:45,460 --> 00:33:52,830
everybody see this great I'll have my

00:33:48,160 --> 00:33:59,860
CloudFormation console i have d cos i I

00:33:52,830 --> 00:34:03,600
hate this DNS domain okay so I'm in D

00:33:59,860 --> 00:34:07,540
cos I can see of Cabrera gets installed

00:34:03,600 --> 00:34:11,050
I'm running the latest version of

00:34:07,540 --> 00:34:15,910
Copernicus it looks fairly happy and I

00:34:11,050 --> 00:34:20,500
can take a look at a forward of the port

00:34:15,910 --> 00:34:24,430
earlier so and here got my Cabrini's

00:34:20,500 --> 00:34:26,790
nodes and I got some parts in the system

00:34:24,430 --> 00:34:26,790
namespace

00:34:26,910 --> 00:34:33,550
amongst those I can see some parts with

00:34:30,190 --> 00:34:37,330
beef prefix so those are all the vCloud

00:34:33,550 --> 00:34:39,340
agents and pants

00:34:37,330 --> 00:34:44,010
it looks like the status is all good so

00:34:39,340 --> 00:34:47,590
I should be able to use vCloud now okay

00:34:44,010 --> 00:34:50,419
so just to be clear like I mean deflower

00:34:47,590 --> 00:34:54,260
there's a two months free trial

00:34:50,419 --> 00:34:57,049
it's a sauce product you're on agents in

00:34:54,260 --> 00:34:59,260
your cluster we present you this UI and

00:34:57,049 --> 00:35:02,260
all the features that come with it

00:34:59,260 --> 00:35:03,890
so here's here's my kubernetes cluster

00:35:02,260 --> 00:35:08,299
running on DCOs

00:35:03,890 --> 00:35:10,250
and I can I can take a look at any

00:35:08,299 --> 00:35:12,319
particular things here right so let's

00:35:10,250 --> 00:35:17,269
take a look at for example leave

00:35:12,319 --> 00:35:19,190
gore-tex agent what is this so I can see

00:35:17,269 --> 00:35:23,480
there is a pod let's take a look

00:35:19,190 --> 00:35:26,630
I can already see that it's it's running

00:35:23,480 --> 00:35:27,230
Prometheus right so this is this is

00:35:26,630 --> 00:35:30,230
prometheus

00:35:27,230 --> 00:35:32,359
and Prometheus scrapes from all services

00:35:30,230 --> 00:35:35,210
it sees in the cluster and that's why

00:35:32,359 --> 00:35:38,779
it's talking to everybody okay I'm happy

00:35:35,210 --> 00:35:47,960
with that I can see there is a load test

00:35:38,779 --> 00:35:50,930
against the front-end and load test run

00:35:47,960 --> 00:35:56,240
some Python process we've got 24 parts

00:35:50,930 --> 00:35:59,690
let me take a look at some of these

00:35:56,240 --> 00:36:02,990
parts so for example I can do this I can

00:35:59,690 --> 00:36:06,410
go to this pod and I can look at this

00:36:02,990 --> 00:36:08,059
part in pods view if I drop out I see

00:36:06,410 --> 00:36:10,940
that I see that there are all these

00:36:08,059 --> 00:36:13,849
parts here I select front and I can see

00:36:10,940 --> 00:36:19,099
all the pasta talk to it let's pick one

00:36:13,849 --> 00:36:21,579
of the well I'm gonna narrow it down to

00:36:19,099 --> 00:36:25,250
a load test and Sakshi opening space and

00:36:21,579 --> 00:36:27,200
I'm gonna look at one of the load tests

00:36:25,250 --> 00:36:30,079
just just double check it's not get any

00:36:27,200 --> 00:36:32,059
errors in the terminal okay stand out

00:36:30,079 --> 00:36:34,640
put them in so you can see that cool

00:36:32,059 --> 00:36:39,049
looks good okay so you farm super

00:36:34,640 --> 00:36:44,869
curious I can actually go into one of

00:36:39,049 --> 00:36:50,079
the containers inside this pod and have

00:36:44,869 --> 00:36:50,079
a look at what it's doing just working

00:36:51,370 --> 00:37:00,200
mmm it worked earlier the only problem

00:36:55,550 --> 00:37:07,880
we may have is Wi-Fi in the telco all

00:37:00,200 --> 00:37:12,280
right okay so what we got well I'm just

00:37:07,880 --> 00:37:15,380
gonna do this right okay it's running

00:37:12,280 --> 00:37:17,840
this and there is this config file that

00:37:15,380 --> 00:37:20,360
specifies the load test so if I'm like

00:37:17,840 --> 00:37:36,220
supposedly I'm very curious what's in

00:37:20,360 --> 00:37:42,350
that config file okay fat fingers to

00:37:36,220 --> 00:37:45,320
think oh yeah it's not PI dismissed a

00:37:42,350 --> 00:37:46,850
bit so yeah and we can we can take a

00:37:45,320 --> 00:37:51,460
look at the code that's running in this

00:37:46,850 --> 00:37:54,680
container if we really wanted to anyway

00:37:51,460 --> 00:37:57,740
what else I can show you oh yeah I can

00:37:54,680 --> 00:38:01,580
show you monitor view so there's a

00:37:57,740 --> 00:38:02,450
either promiscuous metrics and have a

00:38:01,580 --> 00:38:05,200
few things here

00:38:02,450 --> 00:38:08,350
we got node resources we can see all the

00:38:05,200 --> 00:38:11,030
all the stats about memory and CVE usage

00:38:08,350 --> 00:38:13,520
from all the nodes in comparing this

00:38:11,030 --> 00:38:17,360
cluster that is on to DCOs this doesn't

00:38:13,520 --> 00:38:22,370
currently run on all the DC us slaves

00:38:17,360 --> 00:38:25,100
but I can be down to so we can take a

00:38:22,370 --> 00:38:29,660
look at the last couple of days for

00:38:25,100 --> 00:38:33,200
example a whole week even I can see

00:38:29,660 --> 00:38:34,610
actually it looks like so we can see

00:38:33,200 --> 00:38:36,680
like deploy event here right

00:38:34,610 --> 00:38:38,630
well that showed in screenshot earlier

00:38:36,680 --> 00:38:41,720
we can see that there's a particular

00:38:38,630 --> 00:38:42,980
gift commit deployed at that time and

00:38:41,720 --> 00:38:48,230
there are some other things deployed

00:38:42,980 --> 00:38:49,940
earlier on we can see that well this is

00:38:48,230 --> 00:38:52,820
this is probably the time when I created

00:38:49,940 --> 00:38:54,980
the cluster and here at the time I think

00:38:52,820 --> 00:38:57,290
when I've deployed the sock shop yeah we

00:38:54,980 --> 00:38:59,240
can see like you know the definitely

00:38:57,290 --> 00:39:01,910
spikes and all the graphs around run

00:38:59,240 --> 00:39:05,410
about this time so yeah that looks like

00:39:01,910 --> 00:39:05,410
when I was employed this workshop up

00:39:07,099 --> 00:39:15,539
so okay well let's take a look at the

00:39:10,740 --> 00:39:17,700
deploy history when we kind of like in

00:39:15,539 --> 00:39:21,990
the overview we can see all the

00:39:17,700 --> 00:39:26,099
different events that took place we can

00:39:21,990 --> 00:39:27,349
have a look at some of these things that

00:39:26,099 --> 00:39:31,079
I showed earlier

00:39:27,349 --> 00:39:35,670
for example this thing you think we had

00:39:31,079 --> 00:39:37,859
on screenshot yeah okay so we go to get

00:39:35,670 --> 00:39:41,460
up we can see this and we can navigate

00:39:37,859 --> 00:39:45,059
this repo you can view the file and and

00:39:41,460 --> 00:39:50,730
potentially look at history and see all

00:39:45,059 --> 00:39:52,619
the commits that there are so and you

00:39:50,730 --> 00:39:54,660
can see that there are the automated

00:39:52,619 --> 00:39:57,750
commits from from the system the flux

00:39:54,660 --> 00:40:02,220
user and there are commits from from me

00:39:57,750 --> 00:40:03,779
so I can make changes to the reaper as

00:40:02,220 --> 00:40:09,690
well as the beef cloud deployments

00:40:03,779 --> 00:40:12,599
changes to the reaper so going back to

00:40:09,690 --> 00:40:14,160
to the cloud and take a look at this

00:40:12,599 --> 00:40:17,220
front end service for example and you

00:40:14,160 --> 00:40:18,720
can see all the events that relate to

00:40:17,220 --> 00:40:26,099
the front end service more specifically

00:40:18,720 --> 00:40:29,039
right and now I'll show you the time

00:40:26,099 --> 00:40:30,569
travel feature if I go back to live mode

00:40:29,039 --> 00:40:33,869
or actually I can go straight back to

00:40:30,569 --> 00:40:38,099
time travel so there are three main

00:40:33,869 --> 00:40:43,589
modes live pose and time travel say if I

00:40:38,099 --> 00:40:47,430
go back to the time before I deployed

00:40:43,589 --> 00:40:53,080
the sock shop you can zoom out and I

00:40:47,430 --> 00:40:55,000
think that was on the 24th

00:40:53,080 --> 00:40:57,760
right we can see there are a lot less

00:40:55,000 --> 00:41:01,720
things here we can see there are just

00:40:57,760 --> 00:41:03,700
the the system pods or we can even look

00:41:01,720 --> 00:41:09,190
just control is probably easier to look

00:41:03,700 --> 00:41:13,360
at and sometime around this time I

00:41:09,190 --> 00:41:16,810
deployed the sock shop and later so oh

00:41:13,360 --> 00:41:19,300
this time the low test is already has 24

00:41:16,810 --> 00:41:22,240
pods so if we keep this selected we can

00:41:19,300 --> 00:41:27,790
go back a bit and I think at the

00:41:22,240 --> 00:41:33,010
beginning I only had to I need to find

00:41:27,790 --> 00:41:39,280
you in my time scale here okay yeah it

00:41:33,010 --> 00:41:40,600
was around that time of the night okay

00:41:39,280 --> 00:41:42,190
this is not the production system this

00:41:40,600 --> 00:41:46,390
is just the demo environment so been

00:41:42,190 --> 00:41:48,340
working at it late at night yeah we can

00:41:46,390 --> 00:41:56,250
see how this was different little

00:41:48,340 --> 00:42:00,310
earlier on all this time scale is like

00:41:56,250 --> 00:42:03,700
super fine I get it there's a math bit

00:42:00,310 --> 00:42:07,450
more yeah so we can see now it's two

00:42:03,700 --> 00:42:12,250
parts right and you know it can observe

00:42:07,450 --> 00:42:16,840
things like this so yeah well here comes

00:42:12,250 --> 00:42:20,470
time travel think I actually managed to

00:42:16,840 --> 00:42:21,280
finish this earlier than I thought we

00:42:20,470 --> 00:42:26,550
didn't over run

00:42:21,280 --> 00:42:26,550
we still have time for questions please

00:42:31,060 --> 00:42:39,470
now does it understand layer seven uh no

00:42:36,980 --> 00:42:42,740
we don't have insight into what goes on

00:42:39,470 --> 00:42:45,290
layer seven like as in you mean HTTP

00:42:42,740 --> 00:42:47,780
requests yeah no we haven't gone inside

00:42:45,290 --> 00:42:50,510
into that so it operates on layer three

00:42:47,780 --> 00:42:53,870
yeah but we do have a a plugin that

00:42:50,510 --> 00:42:56,300
looks at layer seven the there's a

00:42:53,870 --> 00:42:59,480
plug-in that is able to introspect these

00:42:56,300 --> 00:43:04,010
to be requests using a BPF and does it

00:42:59,480 --> 00:43:07,820
use kind of TLS like the excellent for

00:43:04,010 --> 00:43:10,130
for networking yeah well in this demo

00:43:07,820 --> 00:43:12,850
actually did not use we've met and we've

00:43:10,130 --> 00:43:16,100
met is not required to use we've cloud

00:43:12,850 --> 00:43:19,550
the net is a separate project

00:43:16,100 --> 00:43:22,130
essentially and the visualization that

00:43:19,550 --> 00:43:24,110
you saw that does not depend on the

00:43:22,130 --> 00:43:27,020
network you can use that with any

00:43:24,110 --> 00:43:29,500
network oh cool yeah but if you'd like

00:43:27,020 --> 00:43:34,160
to use we've net we we use VX lon and

00:43:29,500 --> 00:43:36,710
IPSec as well cool some some of some of

00:43:34,160 --> 00:43:38,420
our customers who use D cos chose we've

00:43:36,710 --> 00:43:40,940
met because they they need encryption

00:43:38,420 --> 00:43:42,440
actually and we provide IPSec that is

00:43:40,940 --> 00:43:45,140
really easy to configure actually you

00:43:42,440 --> 00:43:48,080
don't have to know anything about IPSec

00:43:45,140 --> 00:43:56,230
to use IPSec and leave net cool thank

00:43:48,080 --> 00:43:56,230
you thanks any other questions

00:44:00,870 --> 00:44:07,510
is there any kind of performance hit on

00:44:03,700 --> 00:44:10,210
money the agents know it's pretty low

00:44:07,510 --> 00:44:13,950
overhead yeah we work pretty hard to to

00:44:10,210 --> 00:44:17,470
make for example the the Explorer UI

00:44:13,950 --> 00:44:18,940
that did have a performance impact and

00:44:17,470 --> 00:44:22,900
we managed to optimize that by switching

00:44:18,940 --> 00:44:25,630
to EBP F which is this kernel technology

00:44:22,900 --> 00:44:31,050
that allows you to do interesting things

00:44:25,630 --> 00:44:31,050
in kernel space so it's pretty fast and

00:44:31,080 --> 00:44:36,780
yes some some of the other things like

00:44:33,190 --> 00:44:36,780
prometheus are pretty low overhead

00:44:42,280 --> 00:44:49,350
we good thank you okay thanks a lot

00:44:45,220 --> 00:44:49,350

YouTube URL: https://www.youtube.com/watch?v=LXDL5jI3aP0


