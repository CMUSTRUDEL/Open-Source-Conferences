Title: mesos2iam: IAM Credentials for Containers Running Inside a Mesos Cluster - Zain Malik
Publication date: 2017-10-27
Playlist: MesosCon Europe 2017
Description: 
	mesos2iam: IAM Credentials for Containers Running Inside a Mesos Cluster - Zain Malik, Schibsted Media Group

IAM instance profiles are used to limit access to AWS resources by an instance. In this presentation, Zain Malik will show you how to use IAM profile with Mesos tasks. 

Right now the alternative is to use same IAM instance profile for all tasks in Mesos. Or saving AWS credentials inside the containers. 

The problem comes when one container requires broader permissions or access to different resources than the original instance profile had. Without a proper isolation solution in place, all other tasks can access the resources, which is not a very desirable situation in some cases.

In this presentation, Zain will show how to have isolated IAM profiles for each task, without saving the credentials inside the container. To do that, he will use mesos2iam (https://github.com/schibsted/mesos2iam) to retrieve credentials in a transparent way for the tasks running in Mesos cluster.

About Zain Malik
Zain Malik is a software engineer with 5 years of experience in building backends heavily based on noSQL databases. 

Now is working in Schibsted CRE team, helping to pave a smooth way to deploy containers inside mesos and kubernetes cluster. 

Prior to Schibsted, Zain worked in Strands, in core backend team of recommendations engine and eDreams ODIGEO, responsible for tracking events backend
Captions: 
	00:00:00,030 --> 00:00:06,210
hello everybody then and I'm a software

00:00:04,500 --> 00:00:09,120
engineer so today I'm gonna tell you

00:00:06,210 --> 00:00:12,210
about a bit about my sister I am and I'm

00:00:09,120 --> 00:00:16,080
working for ships at Media Group a bit

00:00:12,210 --> 00:00:18,029
about myself I'm is Java developer

00:00:16,080 --> 00:00:19,490
before and like from last year I'm just

00:00:18,029 --> 00:00:27,180
doing development go

00:00:19,490 --> 00:00:29,130
so let's go so a bit about the company

00:00:27,180 --> 00:00:32,219
I'm working for Mercy Ships Media Group

00:00:29,130 --> 00:00:34,739
may be many nobody here's has listened

00:00:32,219 --> 00:00:40,350
about shift said but it has like another

00:00:34,739 --> 00:00:42,809
face it's like it has almost like 32

00:00:40,350 --> 00:00:45,210
products and sells presents in 22

00:00:42,809 --> 00:00:46,829
countries and I will tell about like

00:00:45,210 --> 00:00:49,289
marketplaces area that is more famous

00:00:46,829 --> 00:00:52,140
for example for the people in France it

00:00:49,289 --> 00:00:54,870
will be famous as Leoben quoi and the

00:00:52,140 --> 00:00:57,600
people in Austria maybe it's like spoke

00:00:54,870 --> 00:01:00,239
will happen and people in Spain it's in

00:00:57,600 --> 00:01:03,930
full job photo Casa so it's like it's

00:01:00,239 --> 00:01:04,680
all over the Europe and it's doing

00:01:03,930 --> 00:01:06,000
pretty well

00:01:04,680 --> 00:01:07,640
but as a developer I'll say it's a

00:01:06,000 --> 00:01:12,119
pretty cool company to work for

00:01:07,640 --> 00:01:14,430
so a bit about the team yeah we are like

00:01:12,119 --> 00:01:15,960
six people in the team and we already

00:01:14,430 --> 00:01:20,310
see our team the common runtime

00:01:15,960 --> 00:01:22,979
environment team and we all based in

00:01:20,310 --> 00:01:26,009
Barcelona and we have I have got two

00:01:22,979 --> 00:01:27,869
guys there they have decided not to pass

00:01:26,009 --> 00:01:30,780
my slides today here I don't know how

00:01:27,869 --> 00:01:32,670
I'm doing something wrong for sure but

00:01:30,780 --> 00:01:35,850
yeah and later we have a contributor for

00:01:32,670 --> 00:01:38,520
my sister I am his vision he's a guy

00:01:35,850 --> 00:01:41,280
from Valencia a part for development he

00:01:38,520 --> 00:01:43,049
knows how to do an ice paya so you can

00:01:41,280 --> 00:01:45,149
discuss about development but about paya

00:01:43,049 --> 00:01:47,390
is always right so you're gonna lose the

00:01:45,149 --> 00:01:50,729
conversation so let's go

00:01:47,390 --> 00:01:52,200
so as a team we are like not so much

00:01:50,729 --> 00:01:54,420
common runtime environment we have

00:01:52,200 --> 00:01:57,030
actually three clusters about of mesas

00:01:54,420 --> 00:01:59,430
Hadoop and kubernetes so I would say

00:01:57,030 --> 00:02:01,920
that we are common to say that we just

00:01:59,430 --> 00:02:04,500
want to maintain like all the company

00:02:01,920 --> 00:02:07,200
have only one mrs. cluster 100 cluster

00:02:04,500 --> 00:02:09,780
and one kubernetes cluster and about the

00:02:07,200 --> 00:02:12,120
and we are just on boarding teams so

00:02:09,780 --> 00:02:13,080
like not all if somebody from shift sir

00:02:12,120 --> 00:02:15,270
we say I don't

00:02:13,080 --> 00:02:18,840
where is this so maybe it's still not on

00:02:15,270 --> 00:02:20,250
boarded to our team and we have a long

00:02:18,840 --> 00:02:22,520
way one for the missus

00:02:20,250 --> 00:02:26,760
but for comminuted we're still pretty

00:02:22,520 --> 00:02:28,590
starting so as for the workload I would

00:02:26,760 --> 00:02:31,380
say that we have like this is about the

00:02:28,590 --> 00:02:34,020
daily workload so it's like 6,000 jobs

00:02:31,380 --> 00:02:36,660
run in mesos more than 15,000 jobs in

00:02:34,020 --> 00:02:38,430
Hadoop and on daily basis we are

00:02:36,660 --> 00:02:40,770
original Ike 2000 ports running in

00:02:38,430 --> 00:02:42,270
kubernetes but for sure these numbers

00:02:40,770 --> 00:02:44,010
don't say anything so I will just put

00:02:42,270 --> 00:02:48,780
this but I'm gonna focus on the Misses

00:02:44,010 --> 00:02:52,770
part today so for the miz's part is like

00:02:48,780 --> 00:02:55,140
we have almost like 80 people tasks like

00:02:52,770 --> 00:02:57,810
if one task can takes about like 50

00:02:55,140 --> 00:03:00,920
minutes more than 15 minutes and on

00:02:57,810 --> 00:03:03,480
average is using like 1.4 of CPU so it

00:03:00,920 --> 00:03:05,520
saves a bit more about the cluster and

00:03:03,480 --> 00:03:08,910
not just like empty tasks running six

00:03:05,520 --> 00:03:10,260
thousands so as a team like I would just

00:03:08,910 --> 00:03:11,940
like to say that as a team we have

00:03:10,260 --> 00:03:14,480
achieved the auto scaling thing that's

00:03:11,940 --> 00:03:17,010
pretty cool but let's talk about the

00:03:14,480 --> 00:03:18,810
like we are more missus closer is

00:03:17,010 --> 00:03:23,220
continuously going scaling up and down

00:03:18,810 --> 00:03:26,100
so and we just keep it tied to our usage

00:03:23,220 --> 00:03:28,730
but the cool thing is like we have like

00:03:26,100 --> 00:03:31,680
zero filters like mine are scaling down

00:03:28,730 --> 00:03:33,540
so basically why why how we have done

00:03:31,680 --> 00:03:36,350
that is basically we have implemented

00:03:33,540 --> 00:03:39,989
the maintenance primitives in the all

00:03:36,350 --> 00:03:42,900
meso frameworks that we were using so

00:03:39,989 --> 00:03:44,640
actually we are the creepy guys that are

00:03:42,900 --> 00:03:48,320
going on the github and asking the

00:03:44,640 --> 00:03:52,500
frameworks hey can you develop this and

00:03:48,320 --> 00:03:55,020
as far we have done it ourself for math

00:03:52,500 --> 00:03:56,070
on for corn zipper lucas is open but we

00:03:55,020 --> 00:04:00,480
are already using it in the production

00:03:56,070 --> 00:04:01,650
and for ethic like for the guys who

00:04:00,480 --> 00:04:04,770
don't know I really think it is pretty

00:04:01,650 --> 00:04:08,459
small framework Donnan go and its really

00:04:04,770 --> 00:04:10,580
good for run ones tasks and it's working

00:04:08,459 --> 00:04:16,350
quite well for us

00:04:10,580 --> 00:04:18,030
so yeah let's go and if somebody's like

00:04:16,350 --> 00:04:19,410
more interested in like how this is

00:04:18,030 --> 00:04:20,940
going like I'm just talking so fast

00:04:19,410 --> 00:04:23,190
about they are scaling and zero fill

00:04:20,940 --> 00:04:25,110
tasks so if you guys are interested you

00:04:23,190 --> 00:04:26,050
can check out this project that we have

00:04:25,110 --> 00:04:28,599
done in our team

00:04:26,050 --> 00:04:30,789
it's called that note and it tells a bit

00:04:28,599 --> 00:04:32,919
more putting the Nords in maintenance

00:04:30,789 --> 00:04:40,090
and then takes care of killing them and

00:04:32,919 --> 00:04:42,669
going down so for mrs. - I am let's go

00:04:40,090 --> 00:04:44,409
for mrs. Wong Wong to talk about it I'm

00:04:42,669 --> 00:04:46,360
gonna skip the mr. smart because I'm

00:04:44,409 --> 00:04:48,610
gonna presume everybody here knows what

00:04:46,360 --> 00:04:50,500
is missus but if somebody is going to

00:04:48,610 --> 00:04:52,509
ask me like still don't know what is the

00:04:50,500 --> 00:04:54,970
missus I would say that it's like a open

00:04:52,509 --> 00:04:56,770
source twister management manager that

00:04:54,970 --> 00:04:59,409
handles were closed pretty well in a

00:04:56,770 --> 00:05:01,150
distributed environment and most

00:04:59,409 --> 00:05:05,229
important through dynamics resource

00:05:01,150 --> 00:05:09,639
fearing and isolation so yeah let's go

00:05:05,229 --> 00:05:12,490
to the e m M is actually the Amazon

00:05:09,639 --> 00:05:15,150
service before I was hearing in the

00:05:12,490 --> 00:05:18,520
other presentation like 78 percent off

00:05:15,150 --> 00:05:20,830
mrs. Kloster one on Amazon so I think

00:05:18,520 --> 00:05:22,750
pretty much everybody should know about

00:05:20,830 --> 00:05:24,610
that but before doing that presentation

00:05:22,750 --> 00:05:27,669
I already prepared about to talk about

00:05:24,610 --> 00:05:30,580
AEM so explain about a bit about what is

00:05:27,669 --> 00:05:34,360
the what is stand for so for example I M

00:05:30,580 --> 00:05:36,490
stand for an NT and access management so

00:05:34,360 --> 00:05:39,039
for me it's just take care of who and

00:05:36,490 --> 00:05:41,889
how like who can do what and how they

00:05:39,039 --> 00:05:43,270
can take care of that and it's basically

00:05:41,889 --> 00:05:48,909
the authentication and authorization

00:05:43,270 --> 00:05:50,949
part for Amazon but the but the most

00:05:48,909 --> 00:05:53,440
important part is like it's quite

00:05:50,949 --> 00:05:56,199
extended its usage so it can you can

00:05:53,440 --> 00:05:59,770
define am roles based on action like I

00:05:56,199 --> 00:06:02,380
can do on what kind of I can do a get

00:05:59,770 --> 00:06:03,969
put or delete that kind of actions but

00:06:02,380 --> 00:06:07,900
moreover you can define it on the

00:06:03,969 --> 00:06:10,960
resource level like on s3 data or your

00:06:07,900 --> 00:06:13,389
chief but ok right chief is more like a

00:06:10,960 --> 00:06:16,139
service based role but and then you can

00:06:13,389 --> 00:06:18,400
tag your roles based on the roles and

00:06:16,139 --> 00:06:20,229
what is most important for this

00:06:18,400 --> 00:06:23,800
presentation are the temporary security

00:06:20,229 --> 00:06:25,870
credentials so it's these are like

00:06:23,800 --> 00:06:27,759
short-term credentials that the e/m

00:06:25,870 --> 00:06:29,560
provides you and you don't have to like

00:06:27,759 --> 00:06:32,949
kind of distribute your credentials save

00:06:29,560 --> 00:06:35,469
it in a Security vault because they are

00:06:32,949 --> 00:06:38,660
just temporary for the quant use or for

00:06:35,469 --> 00:06:42,560
the request you have met

00:06:38,660 --> 00:06:44,990
so I will give a little talk like about

00:06:42,560 --> 00:06:46,610
how its words but in the case of

00:06:44,990 --> 00:06:49,490
somebody in a song let's imagine we have

00:06:46,610 --> 00:06:51,470
a like a bucket ons three where we save

00:06:49,490 --> 00:06:53,210
photos super-secret photos and we don't

00:06:51,470 --> 00:06:56,720
want everybody or every user to get

00:06:53,210 --> 00:06:59,210
access to them and we just define our

00:06:56,720 --> 00:07:03,050
service that has to access these

00:06:59,210 --> 00:07:05,720
pictures and we define a role role that

00:07:03,050 --> 00:07:07,810
is allowed to have access to create

00:07:05,720 --> 00:07:11,090
delete or whatever to these pictures and

00:07:07,810 --> 00:07:13,070
then later for sure we can assume this

00:07:11,090 --> 00:07:14,750
role through a your local machine or

00:07:13,070 --> 00:07:16,580
through your credentials but we don't we

00:07:14,750 --> 00:07:18,920
don't even want that we want only one

00:07:16,580 --> 00:07:22,040
our production server can access to

00:07:18,920 --> 00:07:26,750
these pictures so we define it like a

00:07:22,040 --> 00:07:29,810
instance profile and we allow that our

00:07:26,750 --> 00:07:32,570
role that can access to the pictures can

00:07:29,810 --> 00:07:36,490
be assumed by this instance profile so

00:07:32,570 --> 00:07:39,920
what it makes in the end its makes like

00:07:36,490 --> 00:07:43,460
everybody that is on that ec2 instance

00:07:39,920 --> 00:07:45,170
can assume the role of the pictures and

00:07:43,460 --> 00:07:47,510
I actually can access that about anybody

00:07:45,170 --> 00:07:51,950
that is outside that is instance cannot

00:07:47,510 --> 00:07:54,500
do that and this is done by the feature

00:07:51,950 --> 00:07:57,890
of assuming role and where they were

00:07:54,500 --> 00:08:01,150
have liked him Amazon have like a stsi

00:07:57,890 --> 00:08:05,360
API STS sense for security token service

00:08:01,150 --> 00:08:10,580
so it's kind of pretty cool feature and

00:08:05,360 --> 00:08:14,450
for sure we are using it so our use case

00:08:10,580 --> 00:08:17,630
so we have like a missus cluster and we

00:08:14,450 --> 00:08:19,280
have our frameworks that are running we

00:08:17,630 --> 00:08:20,510
have Marathon spark I'm not going to

00:08:19,280 --> 00:08:22,190
talk about like there are a lot of

00:08:20,510 --> 00:08:26,990
application like Luigi and their flow

00:08:22,190 --> 00:08:30,350
also but then later we have a strong API

00:08:26,990 --> 00:08:33,680
that is like our taking care of our

00:08:30,350 --> 00:08:36,620
security okay so nobody can actually

00:08:33,680 --> 00:08:38,690
create a job there we have kind of like

00:08:36,620 --> 00:08:39,530
to asteroid means that take care of

00:08:38,690 --> 00:08:44,630
polluting a job

00:08:39,530 --> 00:08:47,570
so this jobs are hardly associated with

00:08:44,630 --> 00:08:50,120
roles so if I create a job like to

00:08:47,570 --> 00:08:51,830
access my pictures somebody will give me

00:08:50,120 --> 00:08:52,490
access and make sure that and we have

00:08:51,830 --> 00:08:54,320
access to this

00:08:52,490 --> 00:08:58,520
which and I don't take any other role

00:08:54,320 --> 00:09:01,250
and then this the problem is that here

00:08:58,520 --> 00:09:04,100
we have a cluster that can exist a lot

00:09:01,250 --> 00:09:05,930
of Dora like before they were saying the

00:09:04,100 --> 00:09:09,440
data is oil so we have like more than

00:09:05,930 --> 00:09:13,700
one petabyte of oil and user can accept

00:09:09,440 --> 00:09:16,340
this and do their jobs there but then

00:09:13,700 --> 00:09:18,440
later we had this use case came like a

00:09:16,340 --> 00:09:20,930
couple of dot engineers came to us and

00:09:18,440 --> 00:09:23,300
they were doing their jobs on jupiter

00:09:20,930 --> 00:09:25,250
notebooks jupiter notebook is like a

00:09:23,300 --> 00:09:28,250
scratch book if no somebody doesn't know

00:09:25,250 --> 00:09:31,190
and you can do your stuff on it and like

00:09:28,250 --> 00:09:33,500
launch spark jobs you can do your stuff

00:09:31,190 --> 00:09:35,930
in python you can order the the corners

00:09:33,500 --> 00:09:37,700
that you want you can even I like for

00:09:35,930 --> 00:09:40,580
example I'm doing this stuff on Jupiter

00:09:37,700 --> 00:09:43,310
in Scala and then I can pass it as X to

00:09:40,580 --> 00:09:45,260
the in the end the amazing part is all

00:09:43,310 --> 00:09:49,370
in the browser so it's like a notebook

00:09:45,260 --> 00:09:50,900
kind of an you can let me share it so

00:09:49,370 --> 00:09:52,970
the Jordan engineers came to us and they

00:09:50,900 --> 00:09:54,920
were like they want to set up a like a

00:09:52,970 --> 00:09:57,830
Jupiter on our missus and actually in

00:09:54,920 --> 00:09:59,570
this year the missus Ganesha they

00:09:57,830 --> 00:10:02,450
explained about how to set up which

00:09:59,570 --> 00:10:05,630
repeater hub in messes it's nice talk I

00:10:02,450 --> 00:10:08,450
would recommend that so what we did is

00:10:05,630 --> 00:10:10,820
like the idea was so we modified up with

00:10:08,450 --> 00:10:13,730
the Jupiter marathon spawner it's on

00:10:10,820 --> 00:10:16,310
github and to adopt it to our

00:10:13,730 --> 00:10:21,470
authentication so in the company we have

00:10:16,310 --> 00:10:23,630
like a a portal kind of and anybody can

00:10:21,470 --> 00:10:25,490
access developers and user can access to

00:10:23,630 --> 00:10:28,070
this portal and once you have access to

00:10:25,490 --> 00:10:29,780
this portal we make sure that or the

00:10:28,070 --> 00:10:32,000
identity team make sure that you are

00:10:29,780 --> 00:10:35,570
identified and you they give you a token

00:10:32,000 --> 00:10:38,270
and everything like that of the auto so

00:10:35,570 --> 00:10:42,140
we have to modify with the Jupiter hub

00:10:38,270 --> 00:10:44,900
and we did also like small it was like a

00:10:42,140 --> 00:10:50,630
small reverse proxying go to also take

00:10:44,900 --> 00:10:52,280
care of the the setup part of to because

00:10:50,630 --> 00:10:54,590
the Jupiter have like a kind of admin

00:10:52,280 --> 00:10:56,810
console and you can access to it so we

00:10:54,590 --> 00:11:00,980
want you to modify a bit so it just it

00:10:56,810 --> 00:11:03,320
bit a bit of gateway there so in the end

00:11:00,980 --> 00:11:06,470
like the our happy data scientists

00:11:03,320 --> 00:11:08,600
wanted to come and deploy and ask

00:11:06,470 --> 00:11:10,940
jupiter hub and it's like a dashboard

00:11:08,600 --> 00:11:13,460
pretty cool and ask them hey we want to

00:11:10,940 --> 00:11:16,070
deploy our notebook it's like kind of we

00:11:13,460 --> 00:11:18,770
call it workspace so they come to their

00:11:16,070 --> 00:11:20,570
or Jupiter hub and this year Jupiter

00:11:18,770 --> 00:11:23,120
home and ask hey we want to deploy and

00:11:20,570 --> 00:11:27,410
then everybody gets their notebook and

00:11:23,120 --> 00:11:29,810
it's all from this this is like isolated

00:11:27,410 --> 00:11:31,760
but everything is little deployed in the

00:11:29,810 --> 00:11:33,380
same cluster I was talking with in from

00:11:31,760 --> 00:11:35,690
once they have deployed their notebook

00:11:33,380 --> 00:11:38,000
they can launch their stuff to this park

00:11:35,690 --> 00:11:40,010
they can even if they want they can

00:11:38,000 --> 00:11:45,470
deploy to Kronos there they can access

00:11:40,010 --> 00:11:49,880
to a lot of oil and this is pretty

00:11:45,470 --> 00:11:51,970
amazing but you think is like here we

00:11:49,880 --> 00:11:55,520
have got a situation like we have a

00:11:51,970 --> 00:11:57,620
missus the role we are you were using

00:11:55,520 --> 00:11:59,210
that we have a strong API that was

00:11:57,620 --> 00:12:00,970
taking care of that part know what he

00:11:59,210 --> 00:12:05,570
was able to assume another role and

00:12:00,970 --> 00:12:08,390
because it was pretty much impossible as

00:12:05,570 --> 00:12:11,330
it was defined on the job creation part

00:12:08,390 --> 00:12:15,380
and the job creation part was done by

00:12:11,330 --> 00:12:17,660
people by the the coaster admins so but

00:12:15,380 --> 00:12:19,460
here we had like like a one notebook

00:12:17,660 --> 00:12:22,160
could assume the role one and was

00:12:19,460 --> 00:12:25,190
assigned to the resources that were part

00:12:22,160 --> 00:12:26,900
of the draw one only and the other

00:12:25,190 --> 00:12:28,820
notebook the other user have accessed

00:12:26,900 --> 00:12:31,370
like I will just say like for example a

00:12:28,820 --> 00:12:34,340
team should not access the other team's

00:12:31,370 --> 00:12:36,430
data that were in there and only it says

00:12:34,340 --> 00:12:39,170
to Tata that the role were assigned to

00:12:36,430 --> 00:12:41,660
but the problem with here we had that

00:12:39,170 --> 00:12:43,430
anybody could access like role once

00:12:41,660 --> 00:12:47,860
inside the notebooks you can actually

00:12:43,430 --> 00:12:51,350
start a terminal assume another role and

00:12:47,860 --> 00:12:53,900
just see all the data that you should

00:12:51,350 --> 00:12:56,600
not see so the isolation is like pretty

00:12:53,900 --> 00:13:02,450
much gone in this case so we could not

00:12:56,600 --> 00:13:04,010
do that it was like the that yeah that I

00:13:02,450 --> 00:13:06,170
was explaining because the users could

00:13:04,010 --> 00:13:08,600
access to other people's resources and

00:13:06,170 --> 00:13:12,710
this was a pretty much serious case for

00:13:08,600 --> 00:13:15,410
us we could not able to do like deploy

00:13:12,710 --> 00:13:18,470
the superhub in our cluster because this

00:13:15,410 --> 00:13:20,420
would open our Warroad cluster the

00:13:18,470 --> 00:13:23,360
problem yeah the problem

00:13:20,420 --> 00:13:25,070
was for sure the religious instant

00:13:23,360 --> 00:13:27,290
profile because anything that is running

00:13:25,070 --> 00:13:29,720
on our message cluster if we have the

00:13:27,290 --> 00:13:32,420
same instant profile they can they just

00:13:29,720 --> 00:13:33,050
need to go to the Amazon console or any

00:13:32,420 --> 00:13:35,389
other way

00:13:33,050 --> 00:13:37,639
take out the Emperor file the other team

00:13:35,389 --> 00:13:39,560
has other users have and they can just

00:13:37,639 --> 00:13:43,760
assume it and it's like just pretty

00:13:39,560 --> 00:13:58,130
simple and that was a no-go for us at

00:13:43,760 --> 00:14:00,230
least so yeah so yeah we have sorry we

00:13:58,130 --> 00:14:02,870
have talked about the cluster so one

00:14:00,230 --> 00:14:05,000
part we have the cluster already decided

00:14:02,870 --> 00:14:08,060
but the other part was like what we are

00:14:05,000 --> 00:14:09,290
using to zoom the roles so what we were

00:14:08,060 --> 00:14:14,000
using the assume the roles and

00:14:09,290 --> 00:14:17,170
everything is like the e/m and so let's

00:14:14,000 --> 00:14:21,949
dig deep how it actually works

00:14:17,170 --> 00:14:23,839
so like easy to the credentials like how

00:14:21,949 --> 00:14:25,490
the em role is cutting for the temporary

00:14:23,839 --> 00:14:27,260
credential we're talking that just goes

00:14:25,490 --> 00:14:29,089
through these two options like years ago

00:14:27,260 --> 00:14:31,459
it was just only one option the second

00:14:29,089 --> 00:14:32,660
option but now they have alternatives

00:14:31,459 --> 00:14:35,269
the first option also

00:14:32,660 --> 00:14:38,149
so like one option is like you have the

00:14:35,269 --> 00:14:39,529
instance metadata you just Kurian it and

00:14:38,149 --> 00:14:41,990
you will get your credential for the

00:14:39,529 --> 00:14:44,120
roles you want and you don't have to

00:14:41,990 --> 00:14:46,220
worry about it but another option has

00:14:44,120 --> 00:14:50,839
been added like that's another end point

00:14:46,220 --> 00:14:53,720
the LCS the security token that if use

00:14:50,839 --> 00:14:55,880
you can just Curie on this end point and

00:14:53,720 --> 00:14:58,790
you will get your credentials and it's

00:14:55,880 --> 00:15:02,060
now the actually default way to get the

00:14:58,790 --> 00:15:06,500
credential on the all the SDKs after the

00:15:02,060 --> 00:15:08,060
version like one point 11 0 it's like

00:15:06,500 --> 00:15:11,269
the default option but yeah for sure

00:15:08,060 --> 00:15:13,490
there's an extra small letters maybe you

00:15:11,269 --> 00:15:16,610
cannot read it I'll do it for you this

00:15:13,490 --> 00:15:18,740
is that there's a like in water and

00:15:16,610 --> 00:15:21,980
variable that is AWS continued our

00:15:18,740 --> 00:15:25,040
credentialed relative uri so if this

00:15:21,980 --> 00:15:27,440
environment is not set in your container

00:15:25,040 --> 00:15:29,269
or wherever you are running it always go

00:15:27,440 --> 00:15:30,860
to the option 2 that is the old option

00:15:29,269 --> 00:15:34,070
so if you want two falses you have to

00:15:30,860 --> 00:15:36,649
set it but this is how

00:15:34,070 --> 00:15:39,560
actually the emerald forest started

00:15:36,649 --> 00:15:44,120
working so easiest ask is like the agent

00:15:39,560 --> 00:15:47,480
just put that environment variable and

00:15:44,120 --> 00:15:49,579
it populates it sit with the the Dagda

00:15:47,480 --> 00:15:52,310
credential provider version and will ask

00:15:49,579 --> 00:15:56,300
you why ID so in the end you end up

00:15:52,310 --> 00:15:59,540
doing like that makes sense like the IP

00:15:56,300 --> 00:16:00,769
address like one the 172 - and then

00:15:59,540 --> 00:16:02,990
credential provider and it's also

00:16:00,769 --> 00:16:04,970
passing tasks you ID that is pretty much

00:16:02,990 --> 00:16:08,180
cool because you can assign roles on

00:16:04,970 --> 00:16:09,560
task level and you can take care of the

00:16:08,180 --> 00:16:10,730
one tars cannot see these roles of

00:16:09,560 --> 00:16:14,230
another task and you cannot get

00:16:10,730 --> 00:16:17,240
credentials so we also want that because

00:16:14,230 --> 00:16:19,069
but we were pretty far to migrate to the

00:16:17,240 --> 00:16:24,889
sea stars so we wanted to do in our

00:16:19,069 --> 00:16:27,230
cluster so we the hairs we started with

00:16:24,889 --> 00:16:29,089
the missus - I am so in the end like for

00:16:27,230 --> 00:16:30,910
a task or anything that's inside the

00:16:29,089 --> 00:16:34,490
cluster it's pretty much transparent

00:16:30,910 --> 00:16:36,079
because you do the you do the call and

00:16:34,490 --> 00:16:38,569
in the end what you get is like the

00:16:36,079 --> 00:16:40,160
standard credentials these are temporary

00:16:38,569 --> 00:16:44,029
credentials but you can get your

00:16:40,160 --> 00:16:47,860
exercise exploration role secured and so

00:16:44,029 --> 00:16:50,000
this was a pretty nice way to go so here

00:16:47,860 --> 00:16:52,339
we decided to make a bit like a

00:16:50,000 --> 00:16:55,430
combination of the mesas and e/m so

00:16:52,339 --> 00:16:58,790
let's do so what is missus - I am it's

00:16:55,430 --> 00:17:00,529
actually just a diamond because the the

00:16:58,790 --> 00:17:03,350
it's open source which is it open source

00:17:00,529 --> 00:17:05,270
so we can other people may also use it

00:17:03,350 --> 00:17:07,909
and it runs inside the missile's agents

00:17:05,270 --> 00:17:10,490
and in short words it just give us back

00:17:07,909 --> 00:17:12,740
control of the I am policies on task

00:17:10,490 --> 00:17:15,530
level so the lasts QV that I showed up

00:17:12,740 --> 00:17:17,839
what he was doing so I want to take

00:17:15,530 --> 00:17:21,699
control of this and we want to make sure

00:17:17,839 --> 00:17:25,909
that notice can see the other test roles

00:17:21,699 --> 00:17:29,210
so in this zero code of the message I am

00:17:25,909 --> 00:17:33,260
would resume to this like we managed IT

00:17:29,210 --> 00:17:36,950
tables and then we retrieve a task ID

00:17:33,260 --> 00:17:39,830
I'm saying to us right here because it's

00:17:36,950 --> 00:17:41,780
custom so it can be like a ID or

00:17:39,830 --> 00:17:45,409
whatever you design or which level you

00:17:41,780 --> 00:17:47,690
design define and then fetch current I

00:17:45,409 --> 00:17:51,200
shall 40 tasks and it returns to the

00:17:47,690 --> 00:17:53,570
to the container and to the managed

00:17:51,200 --> 00:17:55,700
iptables if you watch the cold it's just

00:17:53,570 --> 00:17:59,330
basically two roots like protruding and

00:17:55,700 --> 00:18:02,450
then forward that's it but I will better

00:17:59,330 --> 00:18:05,389
explain it with diagrams because it we

00:18:02,450 --> 00:18:08,899
can understand it better so for example

00:18:05,389 --> 00:18:11,809
I have now a missus agents on a sleeved

00:18:08,899 --> 00:18:14,419
there's almost no I am privileges like

00:18:11,809 --> 00:18:16,220
it's naked just can just barely do it

00:18:14,419 --> 00:18:19,669
can I've assessed on it order it can

00:18:16,220 --> 00:18:23,059
access to any service and then later we

00:18:19,669 --> 00:18:26,409
have our tasks running on top of it with

00:18:23,059 --> 00:18:30,049
missus to I am agent so when we do like

00:18:26,409 --> 00:18:35,419
like when it was want to get retrial t

00:18:30,049 --> 00:18:37,759
credentials out of the duty that URL

00:18:35,419 --> 00:18:40,009
that I was saying before it just for

00:18:37,759 --> 00:18:42,080
ready to the missus to I am okay and

00:18:40,009 --> 00:18:43,840
then missus so I am go back to the

00:18:42,080 --> 00:18:47,299
container and it's fetched the

00:18:43,840 --> 00:18:49,279
environment variable that can be that is

00:18:47,299 --> 00:18:53,179
accustomed luxray container ID here and

00:18:49,279 --> 00:18:54,950
it's get the container ID and then this

00:18:53,179 --> 00:18:57,490
is the important part that we have

00:18:54,950 --> 00:19:01,070
another host that has in store

00:18:57,490 --> 00:19:04,340
privileged instant profile so that has

00:19:01,070 --> 00:19:07,700
more religious than the agent mistress

00:19:04,340 --> 00:19:10,639
agent and for this we have also open

00:19:07,700 --> 00:19:14,690
sources nave api because this we don't

00:19:10,639 --> 00:19:15,980
want to put all we want to we don't want

00:19:14,690 --> 00:19:17,450
to want to make an opinion because

00:19:15,980 --> 00:19:19,669
depending on company and its different

00:19:17,450 --> 00:19:22,129
kind of stuff so we have put it like a

00:19:19,669 --> 00:19:27,500
nave API where you can define by your

00:19:22,129 --> 00:19:30,139
simple file which task which ID you

00:19:27,500 --> 00:19:31,789
correspond to which role but here the

00:19:30,139 --> 00:19:35,899
important thing is like we have given

00:19:31,789 --> 00:19:37,669
the roles the we have allowed our roles

00:19:35,899 --> 00:19:39,730
that are being going to be using the

00:19:37,669 --> 00:19:43,639
cluster that they can be assumed by this

00:19:39,730 --> 00:19:45,679
religious institutes profile so it goes

00:19:43,639 --> 00:19:47,799
to the it when we have the container ID

00:19:45,679 --> 00:19:50,389
task ID or app ID we go to the

00:19:47,799 --> 00:19:54,139
credentials host and we'll drive the

00:19:50,389 --> 00:19:57,919
credentials so actually it assume role

00:19:54,139 --> 00:20:01,309
in the assumed role is the x-ray the

00:19:57,919 --> 00:20:01,910
temporary credentials operation so an

00:20:01,309 --> 00:20:03,950
assumed row

00:20:01,910 --> 00:20:06,260
the credentials to the missus Ryan and

00:20:03,950 --> 00:20:09,290
mrs. TM returned it back to the Tuscany

00:20:06,260 --> 00:20:13,160
so the for the task it never knew what

00:20:09,290 --> 00:20:14,270
was happening yeah so so it never knew

00:20:13,160 --> 00:20:16,610
what was happening it had the

00:20:14,270 --> 00:20:20,540
credentials and it was pretty much

00:20:16,610 --> 00:20:23,780
transparent to the task so I was yeah I

00:20:20,540 --> 00:20:29,330
have prepared a demo here if I can show

00:20:23,780 --> 00:20:32,230
you for a short video because I don't

00:20:29,330 --> 00:20:32,230
want to risk it

00:20:34,900 --> 00:20:43,520
so here I'm going to run a simple

00:20:41,060 --> 00:20:46,070
container that has nothing special it's

00:20:43,520 --> 00:20:51,830
like just and it has like Amazon client

00:20:46,070 --> 00:20:54,290
it's the mesosphere docker and the

00:20:51,830 --> 00:20:55,730
important thing is like I would like to

00:20:54,290 --> 00:21:00,380
say that I am putting the container ID

00:20:55,730 --> 00:21:02,120
some random UID and then the I have also

00:21:00,380 --> 00:21:04,310
set up the Amazon credential relative

00:21:02,120 --> 00:21:08,830
URI because without it it would go to

00:21:04,310 --> 00:21:10,850
the normal endpoint and as it is naked

00:21:08,830 --> 00:21:15,770
instant profile of the machine it worse

00:21:10,850 --> 00:21:17,150
to see anything so when I started and in

00:21:15,770 --> 00:21:18,590
this docker they have already installed

00:21:17,150 --> 00:21:25,310
the Amazon's is pretty awesome

00:21:18,590 --> 00:21:28,040
I just get access to a bucket but I

00:21:25,310 --> 00:21:30,080
don't get any because the the Amazon is

00:21:28,040 --> 00:21:31,970
saying me that this is not ICS sauce you

00:21:30,080 --> 00:21:34,520
cannot to drive any it cannot find any

00:21:31,970 --> 00:21:38,770
tasks UID and nothing like that so I go

00:21:34,520 --> 00:21:43,460
and just start the Misses - I am here

00:21:38,770 --> 00:21:45,730
and this is my smoke that is also open

00:21:43,460 --> 00:21:49,130
source but here is in a version because

00:21:45,730 --> 00:21:50,870
and I start it also so when I come back

00:21:49,130 --> 00:21:56,300
to my day the docker that is running

00:21:50,870 --> 00:21:58,820
inside the basis it just now I can

00:21:56,300 --> 00:22:00,740
access to the data so like now I will

00:21:58,820 --> 00:22:02,480
explain what happened here and like now

00:22:00,740 --> 00:22:05,390
I can access to my super secret stuff

00:22:02,480 --> 00:22:09,800
and stuff like that so like what

00:22:05,390 --> 00:22:11,900
happened here is like if you see in the

00:22:09,800 --> 00:22:13,820
this screen there is a container ID so I

00:22:11,900 --> 00:22:14,909
am putting this container ID like why

00:22:13,820 --> 00:22:16,769
it's not a pie

00:22:14,909 --> 00:22:19,379
your task I did because I've started the

00:22:16,769 --> 00:22:20,909
message - I am with the perfect that is

00:22:19,379 --> 00:22:23,009
like continually so if you change the

00:22:20,909 --> 00:22:25,739
perfect you can use it a pi D tasks are

00:22:23,009 --> 00:22:31,019
you whatever and it's cause and will

00:22:25,739 --> 00:22:34,109
drive from the D toker the same and also

00:22:31,019 --> 00:22:37,139
I put a pretty random jus ID but it was

00:22:34,109 --> 00:22:39,359
not ranked at random because then we

00:22:37,139 --> 00:22:42,330
have the credential host and we can see

00:22:39,359 --> 00:22:44,249
it from for example here yeah what was I

00:22:42,330 --> 00:22:47,460
started with the roles so what was in

00:22:44,249 --> 00:22:50,220
the roles it was just UID and it has the

00:22:47,460 --> 00:22:52,169
role that it was supposed to assume so

00:22:50,220 --> 00:22:55,049
like on one side I have my API

00:22:52,169 --> 00:22:57,809
credentials the API that is taking care

00:22:55,049 --> 00:23:01,320
of which UID is like going to assign to

00:22:57,809 --> 00:23:03,509
which role in our case I want to be

00:23:01,320 --> 00:23:05,820
sister we are not using this API we are

00:23:03,509 --> 00:23:08,580
using like some random generator and

00:23:05,820 --> 00:23:10,559
it's we are saving it's in the as for

00:23:08,580 --> 00:23:14,940
annoying dynamo and we are spending to

00:23:10,559 --> 00:23:16,919
move to the strongbox so that's it so

00:23:14,940 --> 00:23:19,320
now I have started the message to I am

00:23:16,919 --> 00:23:20,999
with the verbose thing and it will show

00:23:19,320 --> 00:23:24,509
like everything like it's in the host

00:23:20,999 --> 00:23:27,389
mode for example the API the IP address

00:23:24,509 --> 00:23:31,950
and also the container ID that it used

00:23:27,389 --> 00:23:34,019
to retry from the container and actually

00:23:31,950 --> 00:23:35,309
it's not necessary the host mode because

00:23:34,019 --> 00:23:40,710
they do I will do it with the bridge

00:23:35,309 --> 00:23:45,470
mode but and it was just to show so

00:23:40,710 --> 00:23:45,470
later like if we go through the video

00:23:47,149 --> 00:23:51,690
yeah because when I was doing the demo I

00:23:50,070 --> 00:23:53,190
just started in the host mode but we can

00:23:51,690 --> 00:23:55,229
remove it the host mode and we can this

00:23:53,190 --> 00:23:58,649
by default is starting in the bridge

00:23:55,229 --> 00:24:02,249
mode so we can just for example here

00:23:58,649 --> 00:24:04,679
just try to get the the bucket that I

00:24:02,249 --> 00:24:08,489
only have religious for that bucket and

00:24:04,679 --> 00:24:11,879
if we see on the message - I am logs it

00:24:08,489 --> 00:24:15,119
will be yeah it's in bridge mode as the

00:24:11,879 --> 00:24:18,409
same container ID and that's it so yeah

00:24:15,119 --> 00:24:18,409
I think that's ok

00:24:28,950 --> 00:24:35,460
so these are the the reports where you

00:24:33,720 --> 00:24:37,440
can contribute we welcome contribution

00:24:35,460 --> 00:24:40,440
because there are a lot of to go because

00:24:37,440 --> 00:24:43,620
we are lacking totally support for which

00:24:40,440 --> 00:24:47,070
one network like calico we can still

00:24:43,620 --> 00:24:49,080
have work to do and moreover right now

00:24:47,070 --> 00:24:51,000
the container I eat our idea pie

00:24:49,080 --> 00:24:53,550
whatever we define it's quite visible

00:24:51,000 --> 00:24:56,220
inside it occur so we are just working

00:24:53,550 --> 00:24:57,810
on to use secrets like today what they

00:24:56,220 --> 00:25:00,210
were telling about how to use secrets

00:24:57,810 --> 00:25:04,200
and missiles you need to find a way to

00:25:00,210 --> 00:25:06,690
hide this and this is that's it so if

00:25:04,200 --> 00:25:12,080
you guys have any questions I would be

00:25:06,690 --> 00:25:12,080
happy to answer yeah

00:25:45,860 --> 00:25:53,450
hello hey thanks for the talk

00:25:50,750 --> 00:25:56,330
I was wondering if you could explain a

00:25:53,450 --> 00:25:58,279
bit more about how you maintain this map

00:25:56,330 --> 00:26:00,769
between like in the example it was a

00:25:58,279 --> 00:26:03,440
container ID okay and and the

00:26:00,769 --> 00:26:07,610
credentials and that seems like key to

00:26:03,440 --> 00:26:09,500
how this is secure okay yeah okay

00:26:07,610 --> 00:26:11,899
in this case we did it for Jupiter hub

00:26:09,500 --> 00:26:13,580
so I will just pass really fast that

00:26:11,899 --> 00:26:15,289
part because I was pretty sure nobody's

00:26:13,580 --> 00:26:17,390
interested in how like internal working

00:26:15,289 --> 00:26:19,639
so we have I told that we have a like a

00:26:17,390 --> 00:26:22,610
portal where we have identity team that

00:26:19,639 --> 00:26:23,870
makes sure that give credentials that

00:26:22,610 --> 00:26:26,570
are nothing to do with the Amazon

00:26:23,870 --> 00:26:30,110
credential for sure to for average users

00:26:26,570 --> 00:26:33,620
so in that part we have like we inject

00:26:30,110 --> 00:26:36,740
these usernames okay so like every users

00:26:33,620 --> 00:26:39,019
have with their email inject it in this

00:26:36,740 --> 00:26:43,279
spawner of the marathon of the Jupiter

00:26:39,019 --> 00:26:46,340
hub while we get this user we go like a

00:26:43,279 --> 00:26:50,090
tentacle API and that's like pretty like

00:26:46,340 --> 00:26:53,120
as for now we generate on it on fly and

00:26:50,090 --> 00:26:55,190
we associate the user we know that this

00:26:53,120 --> 00:26:59,289
user has to be mapped with this other

00:26:55,190 --> 00:27:02,480
role so we create an entry in the our

00:26:59,289 --> 00:27:05,210
credential store that is like on that's

00:27:02,480 --> 00:27:08,929
open but for sure then later we create a

00:27:05,210 --> 00:27:11,860
random UID and pass it to the to the

00:27:08,929 --> 00:27:15,159
when we are starting with us and it's

00:27:11,860 --> 00:27:17,419
deleted when the task is finished or

00:27:15,159 --> 00:27:24,070
after some time if the task is running

00:27:17,419 --> 00:27:24,070
wrong yeah thanks okay

00:27:25,879 --> 00:27:29,149
not any other questions no all right

00:27:28,429 --> 00:27:30,230
thank you

00:27:29,149 --> 00:27:35,160
okay thank you

00:27:30,230 --> 00:27:35,160

YouTube URL: https://www.youtube.com/watch?v=AkNx2tMwiWU


