Title: There and Back Again: How Tunstall Healthcare Built an IoT Platform for Health Monitoring
Publication date: 2017-10-31
Playlist: MesosCon Europe 2017
Description: 
	There and Back Again: How Tunstall Healthcare Built an IoT Platform for Health Monitoring Using Mesos Cluster on Azure - Fredrik Lindner, Tunstall Nordic AB

When designing a platform for collecting wellbeing and health telemetry data, Tunstall decided to use mesos as the backbone service orchestration tool. In this talk Fredrik Lindner from the Tunstall I&D department will show how the implementation of a telemetry IoT platform requires a robust, scalable foundation and how well Mesos fits into this scenario.

In addition, We will provide Tunstallâ€™s learnings by presenting the implementation process from the early stages, using templates on Azure, to the production-ready solution using custom made deploy and scale templates, integration with legacy applications and the high level of security and auditing that is required in the healthcare business. During the talk we will also show a demo of how we use Mesos to scale the platform from 500 telemetry sources to 1000000 telemetry sources without changing a single line of code or configuration

About Fredrik Lindner
Fredrik is a Software/Cloud/IoT architect working within the software innovation team at Tunstall Healthcare. Currently Fredrik lead the development of the next generation healthcare platform, for the elderly population, aimed to improve the independent living and assisted living business scenarios using digital alarm chains and telemetry data obtained from wearables.
Captions: 
	00:00:00,030 --> 00:00:04,470
all right everyone thank you for coming

00:00:02,310 --> 00:00:06,839
to this last session of this conference

00:00:04,470 --> 00:00:09,360
and I must say I had a great conference

00:00:06,839 --> 00:00:13,290
so far so full of information and fun

00:00:09,360 --> 00:00:15,780
stuff and also it's I think it's really

00:00:13,290 --> 00:00:18,510
cool that this is recorded so that other

00:00:15,780 --> 00:00:21,630
people can watch it later and learn from

00:00:18,510 --> 00:00:23,939
it and it made me think of my 10 year

00:00:21,630 --> 00:00:25,080
old daughter she had a friend over the

00:00:23,939 --> 00:00:26,910
other day and they were playing in the

00:00:25,080 --> 00:00:29,130
garden with some old camera they found

00:00:26,910 --> 00:00:31,019
some where and when they came back in a

00:00:29,130 --> 00:00:33,630
stove were you playing photographers

00:00:31,019 --> 00:00:37,020
I said now we were playing super

00:00:33,630 --> 00:00:39,270
successful youtubers so I will see if

00:00:37,020 --> 00:00:43,980
this talk earns me that title or if I'll

00:00:39,270 --> 00:00:44,879
have to work on it so okay thank you for

00:00:43,980 --> 00:00:47,219
coming

00:00:44,879 --> 00:00:49,649
my name is Fredrik if you didn't see

00:00:47,219 --> 00:00:52,680
that in the description or on this slide

00:00:49,649 --> 00:00:54,660
here I work as a software architect for

00:00:52,680 --> 00:00:57,149
a company called Tunstall which works

00:00:54,660 --> 00:01:03,059
within the sphere of social care for

00:00:57,149 --> 00:01:05,700
elderly people and today I first this

00:01:03,059 --> 00:01:07,950
session is titled theorem back again how

00:01:05,700 --> 00:01:10,680
to install create an IT platform based

00:01:07,950 --> 00:01:14,220
on mesos and when I was practicing this

00:01:10,680 --> 00:01:16,290
speech I it just struck me that there

00:01:14,220 --> 00:01:18,509
I'm back again it kind of sounds like we

00:01:16,290 --> 00:01:21,360
were doing this Mesa streaming

00:01:18,509 --> 00:01:24,270
application all the new stuff and then

00:01:21,360 --> 00:01:26,640
we were saying let's go back and do it

00:01:24,270 --> 00:01:29,159
the old-fashioned way on Prem monolith

00:01:26,640 --> 00:01:30,869
all that but no what I want to describe

00:01:29,159 --> 00:01:33,210
with this talk is that we made a journey

00:01:30,869 --> 00:01:35,340
and I wanted to share with you some of

00:01:33,210 --> 00:01:38,759
the insights we'd made while doing that

00:01:35,340 --> 00:01:40,860
journey so today I'm going to talk about

00:01:38,759 --> 00:01:42,600
the background why we're doing this the

00:01:40,860 --> 00:01:44,939
business foundation to it I will just

00:01:42,600 --> 00:01:47,310
briefly touch on it but I think it's

00:01:44,939 --> 00:01:49,560
important to put things in context and

00:01:47,310 --> 00:01:51,899
we're going to look at our new platform

00:01:49,560 --> 00:01:54,030
which we call evety and we're going to

00:01:51,899 --> 00:01:56,100
do that from first a functional

00:01:54,030 --> 00:01:58,680
perspective and then we're going to do

00:01:56,100 --> 00:02:02,340
it from a more technical perspective I

00:01:58,680 --> 00:02:05,780
will talk about this platform and how we

00:02:02,340 --> 00:02:08,009
viewed as an operating system for the

00:02:05,780 --> 00:02:09,420
business applications that we're going

00:02:08,009 --> 00:02:12,569
to run

00:02:09,420 --> 00:02:14,610
after that we're going to take a closer

00:02:12,569 --> 00:02:17,280
look at one of the frameworks that we

00:02:14,610 --> 00:02:21,540
supply with this platform the IOT

00:02:17,280 --> 00:02:24,270
framework and we use the term framework

00:02:21,540 --> 00:02:27,120
internally to describe a set of services

00:02:24,270 --> 00:02:28,890
an application that we logically define

00:02:27,120 --> 00:02:30,950
together that we deploy together and

00:02:28,890 --> 00:02:34,500
that are dependent on each other and

00:02:30,950 --> 00:02:36,300
that is not a masive framework they

00:02:34,500 --> 00:02:38,280
could be implemented at mesas framework

00:02:36,300 --> 00:02:41,430
but they're not not at the moment at

00:02:38,280 --> 00:02:44,040
least and after the look at the RET

00:02:41,430 --> 00:02:46,170
framework we're going to just touch on

00:02:44,040 --> 00:02:49,440
some things that we found doing this

00:02:46,170 --> 00:02:51,000
journey technical things that I would

00:02:49,440 --> 00:02:52,769
like to share with you things that we

00:02:51,000 --> 00:02:56,340
thought were important things that you

00:02:52,769 --> 00:02:59,519
look you need to get a better look at I

00:02:56,340 --> 00:03:01,320
won't be going super deep into the

00:02:59,519 --> 00:03:04,140
technology about it but I will rather

00:03:01,320 --> 00:03:06,000
just mention it to you so that if you're

00:03:04,140 --> 00:03:08,900
going to make a platform like this or

00:03:06,000 --> 00:03:14,040
something similar you would have some

00:03:08,900 --> 00:03:17,400
knowledge of what to look at next okay

00:03:14,040 --> 00:03:19,650
doing these sections I will ask for

00:03:17,400 --> 00:03:23,130
questions after each sections if you

00:03:19,650 --> 00:03:25,170
have questions about something we talked

00:03:23,130 --> 00:03:31,430
about there and we can also have a Q&A

00:03:25,170 --> 00:03:35,640
when when everything is over okay good

00:03:31,430 --> 00:03:37,440
so Tunstall times always a company that

00:03:35,640 --> 00:03:40,260
worked with social care for elderly

00:03:37,440 --> 00:03:42,260
people we work with independent living

00:03:40,260 --> 00:03:45,360
and we work with assisted living and

00:03:42,260 --> 00:03:47,430
assisted living is where elderly people

00:03:45,360 --> 00:03:50,549
live together in a facility that is

00:03:47,430 --> 00:03:54,000
created for a living with staff and

00:03:50,549 --> 00:03:56,250
other things that help them go on about

00:03:54,000 --> 00:03:58,739
their business independent living is

00:03:56,250 --> 00:04:00,690
where elderly people live in their own

00:03:58,739 --> 00:04:03,810
home but they have some services

00:04:00,690 --> 00:04:09,480
provided by some some private actor in

00:04:03,810 --> 00:04:13,609
the market or by the government and this

00:04:09,480 --> 00:04:16,890
market is when is changing right now and

00:04:13,609 --> 00:04:19,470
basically we have several factors that

00:04:16,890 --> 00:04:21,870
work together to create this change and

00:04:19,470 --> 00:04:26,010
one of them is demographic currently

00:04:21,870 --> 00:04:27,950
there is an increase of in the elderly

00:04:26,010 --> 00:04:30,479
population people are living longer and

00:04:27,950 --> 00:04:32,970
we have a different ratio between

00:04:30,479 --> 00:04:36,120
working people and people that are

00:04:32,970 --> 00:04:40,409
considered elderly and needs to have

00:04:36,120 --> 00:04:45,000
social care and does such services and

00:04:40,409 --> 00:04:46,680
this also makes this change in ratio

00:04:45,000 --> 00:04:51,300
between working population and aging

00:04:46,680 --> 00:04:53,010
population also creates a difference in

00:04:51,300 --> 00:04:55,409
the funding there is not so many people

00:04:53,010 --> 00:04:58,950
around to pay for the services for

00:04:55,409 --> 00:05:01,770
elderly and with regards to funding we

00:04:58,950 --> 00:05:04,760
are seeing the trend that the funds that

00:05:01,770 --> 00:05:07,560
are allocated to the care of elderly are

00:05:04,760 --> 00:05:10,169
decreasing rather than increasing and

00:05:07,560 --> 00:05:12,320
I'm sure that if you go home and you ask

00:05:10,169 --> 00:05:16,320
your local politician if they want to

00:05:12,320 --> 00:05:17,880
increase the taxes in order to to

00:05:16,320 --> 00:05:20,690
increase the funding for this they would

00:05:17,880 --> 00:05:22,830
probably say no that is not so popular

00:05:20,690 --> 00:05:25,349
but on the other hand we also have a

00:05:22,830 --> 00:05:27,990
shift in technology that would allow us

00:05:25,349 --> 00:05:29,580
to use this new technology sensor

00:05:27,990 --> 00:05:32,220
technology and machine learning for

00:05:29,580 --> 00:05:36,450
instance to provide services that are

00:05:32,220 --> 00:05:38,490
more efficient and cheaper to give the

00:05:36,450 --> 00:05:42,120
same results as we have with our

00:05:38,490 --> 00:05:44,370
traditional technology we also see that

00:05:42,120 --> 00:05:46,530
we have a new set of competitors on the

00:05:44,370 --> 00:05:48,270
market when it comes to new types of

00:05:46,530 --> 00:05:50,280
services we are looking at and these

00:05:48,270 --> 00:05:52,650
competitors are not our traditional

00:05:50,280 --> 00:05:56,190
hardware based competitors but there are

00:05:52,650 --> 00:05:58,110
new companies that I've worked with

00:05:56,190 --> 00:06:00,900
digital transformations for a while we

00:05:58,110 --> 00:06:02,700
have mobile operators or turning it to

00:06:00,900 --> 00:06:07,590
this sector and we also have the big

00:06:02,700 --> 00:06:11,460
ones like Apple and Google and we also

00:06:07,590 --> 00:06:14,789
see there's a slight shift in the

00:06:11,460 --> 00:06:17,700
consumer market people are willing to

00:06:14,789 --> 00:06:20,520
pay for services if they have the

00:06:17,700 --> 00:06:22,950
private funds to do so and we also see

00:06:20,520 --> 00:06:28,950
more interest in personal applications

00:06:22,950 --> 00:06:31,169
and and relatives that want to have

00:06:28,950 --> 00:06:35,899
services and applications in relation to

00:06:31,169 --> 00:06:35,899
their their elderly relatives

00:06:36,660 --> 00:06:44,800
we think that within the next three

00:06:39,940 --> 00:06:47,590
years 60% of our business will be in new

00:06:44,800 --> 00:06:50,440
markets and our new products and with

00:06:47,590 --> 00:06:56,410
new markets I mean new mark I don't mean

00:06:50,440 --> 00:07:00,000
geographical new markets all right to

00:06:56,410 --> 00:07:00,000
have any questions regarding this oh

00:07:00,720 --> 00:07:05,530
okay

00:07:02,770 --> 00:07:08,320
let's go on done so what we did at

00:07:05,530 --> 00:07:09,970
Tunstall was that about a year and a

00:07:08,320 --> 00:07:12,700
half ago we sat down and thought about

00:07:09,970 --> 00:07:13,180
this trends we saw and what we could do

00:07:12,700 --> 00:07:15,220
about it

00:07:13,180 --> 00:07:17,260
and we decided that we needed to create

00:07:15,220 --> 00:07:20,290
a platform that would act as a

00:07:17,260 --> 00:07:23,380
technology enabler for new services and

00:07:20,290 --> 00:07:27,190
applications that helped us transition

00:07:23,380 --> 00:07:33,250
into this new market economy and we call

00:07:27,190 --> 00:07:36,400
this platform evety and evety is from

00:07:33,250 --> 00:07:39,070
the business perspective a platform that

00:07:36,400 --> 00:07:44,730
enables us to create new types of

00:07:39,070 --> 00:07:44,730
services and use new modern technology

00:07:46,140 --> 00:07:55,030
to sort of develop and improve the

00:07:52,120 --> 00:07:59,620
quality of our our offerings to our

00:07:55,030 --> 00:08:04,120
customers the services that we are

00:07:59,620 --> 00:08:06,970
trying to to create our based on care

00:08:04,120 --> 00:08:09,850
and health services on planning services

00:08:06,970 --> 00:08:13,330
and on security services so security for

00:08:09,850 --> 00:08:16,450
instance that is video surveillance we

00:08:13,330 --> 00:08:19,060
have staff security and we have keyless

00:08:16,450 --> 00:08:22,330
access there are some examples we also

00:08:19,060 --> 00:08:24,760
need to have a platform that enables us

00:08:22,330 --> 00:08:27,850
to monitor what is happening within our

00:08:24,760 --> 00:08:32,410
system to to look at logs for instance

00:08:27,850 --> 00:08:35,950
or to have metrics about our our devices

00:08:32,410 --> 00:08:40,360
that we have out there we're trying to

00:08:35,950 --> 00:08:41,919
create new devices to collect health

00:08:40,360 --> 00:08:46,240
telemetry but also to integrate

00:08:41,919 --> 00:08:48,100
third-party devices that will supplies

00:08:46,240 --> 00:08:50,440
with the telemetry the

00:08:48,100 --> 00:08:56,709
we need to have this pre-emptive and

00:08:50,440 --> 00:08:59,230
reactive services so that was what I had

00:08:56,709 --> 00:09:01,360
to say about the how or why why we're

00:08:59,230 --> 00:09:07,959
doing this are there any questions about

00:09:01,360 --> 00:09:11,079
it okay so let's look at evety from an

00:09:07,959 --> 00:09:14,259
architectural position so when we

00:09:11,079 --> 00:09:18,250
started this I started to think about

00:09:14,259 --> 00:09:22,360
the platform as an operating system so

00:09:18,250 --> 00:09:25,720
what is an operating system when we use

00:09:22,360 --> 00:09:27,819
our computers that we use daily they

00:09:25,720 --> 00:09:29,589
enable us to use all this hardware that

00:09:27,819 --> 00:09:32,199
is underneath without really thinking

00:09:29,589 --> 00:09:35,319
about the technical details about them

00:09:32,199 --> 00:09:37,899
they transform the technology into

00:09:35,319 --> 00:09:42,630
functionality the classic example would

00:09:37,899 --> 00:09:45,819
be using files for instance when we

00:09:42,630 --> 00:09:47,139
program something that uses a file we

00:09:45,819 --> 00:09:49,180
can tell the operating system to

00:09:47,139 --> 00:09:52,120
supplies the content of a file without

00:09:49,180 --> 00:09:54,040
really needing to think about where is

00:09:52,120 --> 00:10:00,810
this file is this on our hard drive is

00:09:54,040 --> 00:10:03,750
it's on a network drive and and all that

00:10:00,810 --> 00:10:06,339
technology just happening beneath is

00:10:03,750 --> 00:10:09,310
transparent to us the operating system

00:10:06,339 --> 00:10:12,550
takes care of that for Tunsil if we take

00:10:09,310 --> 00:10:15,009
something like a keyless lock we have a

00:10:12,550 --> 00:10:17,319
lot of products that supply this to us

00:10:15,009 --> 00:10:20,889
our own product but also third-party

00:10:17,319 --> 00:10:22,839
products and from what I would like to

00:10:20,889 --> 00:10:25,000
this platform to do is to create a

00:10:22,839 --> 00:10:28,630
functionality that is associated with

00:10:25,000 --> 00:10:30,600
the keyless lock and have the business

00:10:28,630 --> 00:10:33,670
application that uses this functionality

00:10:30,600 --> 00:10:37,319
can use the functionality without having

00:10:33,670 --> 00:10:41,079
to care which lock is actually supplying

00:10:37,319 --> 00:10:43,139
the keyless functionality in the end so

00:10:41,079 --> 00:10:48,100
if we have a planning applications a

00:10:43,139 --> 00:10:50,079
planning application in which different

00:10:48,100 --> 00:10:52,180
staff teams will have access to

00:10:50,079 --> 00:10:55,600
different locks that application would

00:10:52,180 --> 00:10:58,300
be able to run for a lot of different

00:10:55,600 --> 00:11:00,819
customers regardless of which type of

00:10:58,300 --> 00:11:01,450
lock the use or whether the application

00:11:00,819 --> 00:11:04,360
its

00:11:01,450 --> 00:11:10,960
self supplies fortunately for that type

00:11:04,360 --> 00:11:13,780
of lock and what we use it we used the

00:11:10,960 --> 00:11:16,510
old pattern of plug-and-play so within

00:11:13,780 --> 00:11:19,660
this operating system we want to be able

00:11:16,510 --> 00:11:22,450
to allow services and applications to

00:11:19,660 --> 00:11:25,170
run by plug and play so we will of you

00:11:22,450 --> 00:11:28,330
usually we will provide a framework and

00:11:25,170 --> 00:11:30,190
the services can then either plug in new

00:11:28,330 --> 00:11:32,500
functionality into this framework or

00:11:30,190 --> 00:11:35,350
they can reuse the framework for their

00:11:32,500 --> 00:11:38,290
own purposes and the frameworks that we

00:11:35,350 --> 00:11:41,560
are going to deliver with as part of the

00:11:38,290 --> 00:11:44,560
core frame core platform is the IT

00:11:41,560 --> 00:11:47,530
framework identity frameworks we have

00:11:44,560 --> 00:11:51,910
data warehouse for instance we also have

00:11:47,530 --> 00:11:54,310
a framework for hybrid cloud we do think

00:11:51,910 --> 00:11:58,930
a lot about data entry integrity and

00:11:54,310 --> 00:12:02,440
security for our applications and our

00:11:58,930 --> 00:12:05,770
data and although we say that our new

00:12:02,440 --> 00:12:08,350
platform should be based in the cloud we

00:12:05,770 --> 00:12:11,920
do know that in certain scenarios our

00:12:08,350 --> 00:12:13,900
customers will require us to allow them

00:12:11,920 --> 00:12:16,990
to run certain parts of the application

00:12:13,900 --> 00:12:18,760
either on-premise or maybe in a data

00:12:16,990 --> 00:12:22,390
center that is located within the

00:12:18,760 --> 00:12:27,280
country of that the same country as the

00:12:22,390 --> 00:12:30,420
customer so we want to have a framework

00:12:27,280 --> 00:12:34,840
that allows us to run the same set of

00:12:30,420 --> 00:12:36,850
applications but in different alongside

00:12:34,840 --> 00:12:39,730
each other in different locations and

00:12:36,850 --> 00:12:43,740
the hybrid claim cloud framework does

00:12:39,730 --> 00:12:49,680
that for us if we look at the

00:12:43,740 --> 00:12:53,770
architecture of the platform we it's

00:12:49,680 --> 00:12:56,590
basically laid in three layers and as we

00:12:53,770 --> 00:12:59,860
see we use maces and DCOs to power all

00:12:56,590 --> 00:13:02,770
three of them and the platform layer or

00:12:59,860 --> 00:13:04,240
the operating system kernel if you want

00:13:02,770 --> 00:13:06,520
to call it that if we look at an

00:13:04,240 --> 00:13:09,730
operating system I

00:13:06,520 --> 00:13:12,730
I never mentioned it before but we said

00:13:09,730 --> 00:13:15,040
that it provides functions or it

00:13:12,730 --> 00:13:18,820
translates technology into function but

00:13:15,040 --> 00:13:19,930
it also allows us to run have a runtime

00:13:18,820 --> 00:13:21,640
environment for us to run our

00:13:19,930 --> 00:13:25,870
application that's also important in

00:13:21,640 --> 00:13:28,060
this platform that we have that and also

00:13:25,870 --> 00:13:32,380
in the third part of the operating

00:13:28,060 --> 00:13:33,760
system is to to provide some common

00:13:32,380 --> 00:13:36,070
functionality that we can use and that

00:13:33,760 --> 00:13:40,960
are our frameworks and in the platform

00:13:36,070 --> 00:13:45,250
layer we use an IT hub we use event

00:13:40,960 --> 00:13:47,170
messaging systems and authorization and

00:13:45,250 --> 00:13:49,780
access control for instance that's part

00:13:47,170 --> 00:13:52,480
of our framework and on top of that we

00:13:49,780 --> 00:13:56,380
can then implement our own customized

00:13:52,480 --> 00:13:57,190
applications and services and we use

00:13:56,380 --> 00:13:59,470
DCOs

00:13:57,190 --> 00:14:01,510
as the runtime front up so we can scale

00:13:59,470 --> 00:14:04,930
them and deploy them easily and also

00:14:01,510 --> 00:14:06,520
upgrade them and we we want to have an

00:14:04,930 --> 00:14:08,650
environment in which each each

00:14:06,520 --> 00:14:10,900
application can run on this platform and

00:14:08,650 --> 00:14:13,570
each application can then have their

00:14:10,900 --> 00:14:16,270
dedicated team that implements them and

00:14:13,570 --> 00:14:20,080
have their own life cycle and we often

00:14:16,270 --> 00:14:22,210
let the team by themselves decide how

00:14:20,080 --> 00:14:24,640
what technology to use to implement it

00:14:22,210 --> 00:14:28,180
so we don't say that this is for

00:14:24,640 --> 00:14:30,460
instance only java application could be

00:14:28,180 --> 00:14:32,350
implemented anything we our technology

00:14:30,460 --> 00:14:35,080
stack agnostic as long as the

00:14:32,350 --> 00:14:38,260
application can run in a container we're

00:14:35,080 --> 00:14:40,750
happy then we can run it on GC OS and

00:14:38,260 --> 00:14:43,870
then on top we have access management

00:14:40,750 --> 00:14:46,480
and we have a protocol gateway which is

00:14:43,870 --> 00:14:50,620
associated to the IOT hub we have an API

00:14:46,480 --> 00:14:52,540
gateway to to route any incoming traffic

00:14:50,620 --> 00:14:55,210
to the correct end service in the

00:14:52,540 --> 00:15:01,000
backend and we also have authentication

00:14:55,210 --> 00:15:03,810
services for the for the api's and the

00:15:01,000 --> 00:15:03,810
protocol gateway

00:15:06,889 --> 00:15:12,800
any questions about this architecture

00:15:20,000 --> 00:15:25,250
okay so let's take a look at the IOT

00:15:23,420 --> 00:15:27,500
framework so this was one of the first

00:15:25,250 --> 00:15:31,699
frameworks we decided to do and this was

00:15:27,500 --> 00:15:34,519
maybe this was the driver that made us

00:15:31,699 --> 00:15:37,519
that made us do this platform from the

00:15:34,519 --> 00:15:39,920
beginning we wanted to create an

00:15:37,519 --> 00:15:42,319
environment in which we could retail

00:15:39,920 --> 00:15:44,420
health telemetry data and we wanted to

00:15:42,319 --> 00:15:49,459
be able to read health telemetry data

00:15:44,420 --> 00:15:51,170
from a lot of different sources and the

00:15:49,459 --> 00:15:54,500
only thing we knew from the outset was

00:15:51,170 --> 00:15:56,269
that we don't know which which devices

00:15:54,500 --> 00:15:58,879
we're going to use in the future

00:15:56,269 --> 00:16:00,949
we only knew that the would be device it

00:15:58,879 --> 00:16:03,319
some of them would be around some of

00:16:00,949 --> 00:16:06,470
them would be a third party we didn't

00:16:03,319 --> 00:16:08,269
know with which metrics we would going

00:16:06,470 --> 00:16:11,029
to be interested in we knew some of

00:16:08,269 --> 00:16:13,339
course but still today I know that we

00:16:11,029 --> 00:16:16,129
are in the future are going to collect

00:16:13,339 --> 00:16:21,589
metrics that I don't know today which

00:16:16,129 --> 00:16:26,809
ones so there are t sensor data

00:16:21,589 --> 00:16:30,319
architecture it's architected so that we

00:16:26,809 --> 00:16:32,990
can have a set of our framework with a

00:16:30,319 --> 00:16:34,910
set of services that act upon this data

00:16:32,990 --> 00:16:39,829
that we don't really know today what it

00:16:34,910 --> 00:16:45,170
is but still give us functionality to

00:16:39,829 --> 00:16:48,709
have a real rapid development with ret

00:16:45,170 --> 00:16:51,290
sensors so what we do is for each metric

00:16:48,709 --> 00:16:54,379
that we we are interested in in

00:16:51,290 --> 00:16:56,870
collecting we try to normalize it so

00:16:54,379 --> 00:16:59,480
that regardless of the source we can

00:16:56,870 --> 00:17:02,089
have a unified way of looking at that

00:16:59,480 --> 00:17:04,100
metric for a specific person we also

00:17:02,089 --> 00:17:07,699
want to have a situation in which we can

00:17:04,100 --> 00:17:10,939
plug in new devices easily and rapidly

00:17:07,699 --> 00:17:13,610
without redoing a lot of work and

00:17:10,939 --> 00:17:20,059
without having to redeploy a new system

00:17:13,610 --> 00:17:21,839
or or anything like that we we also want

00:17:20,059 --> 00:17:26,279
to to

00:17:21,839 --> 00:17:33,419
use stream and stream analytics on these

00:17:26,279 --> 00:17:35,730
metrics and the IT sensor data

00:17:33,419 --> 00:17:39,389
architecture looks like this so

00:17:35,730 --> 00:17:41,490
basically we have divided it into three

00:17:39,389 --> 00:17:44,249
parts first we have something that we

00:17:41,490 --> 00:17:47,190
call the payload pipeline which is the

00:17:44,249 --> 00:17:49,529
top four boxes and then we have the

00:17:47,190 --> 00:17:52,769
metric extraction service and then we

00:17:49,529 --> 00:17:56,580
have the telemetry services and the

00:17:52,769 --> 00:18:00,509
first part the payload pipeline

00:17:56,580 --> 00:18:04,950
it looks upon device data that comes

00:18:00,509 --> 00:18:07,519
into the framework as a payload that it

00:18:04,950 --> 00:18:11,249
doesn't know anything about so it's just

00:18:07,519 --> 00:18:13,169
a set of bytes basically and it acts

00:18:11,249 --> 00:18:16,019
upon the metadata that is associated

00:18:13,169 --> 00:18:21,809
with the payload and from that it will

00:18:16,019 --> 00:18:23,429
transform or or reroute the messages to

00:18:21,809 --> 00:18:25,409
various other services that are

00:18:23,429 --> 00:18:30,059
interested in the page in the pipeline

00:18:25,409 --> 00:18:33,720
so we can actually hook up a new device

00:18:30,059 --> 00:18:37,169
to this system and it will function

00:18:33,720 --> 00:18:41,369
without us having to do any form of

00:18:37,169 --> 00:18:45,649
greem implementation or any changes in

00:18:41,369 --> 00:18:48,440
the existing architecture in the end

00:18:45,649 --> 00:18:51,119
when everything has been filtered and

00:18:48,440 --> 00:18:54,749
rerouted it will hit the metric

00:18:51,119 --> 00:18:59,779
extraction service and this architecture

00:18:54,749 --> 00:19:02,990
is used is actually using a revamped old

00:18:59,779 --> 00:19:08,960
architectural style I don't know if you

00:19:02,990 --> 00:19:14,039
realize which one it was we reused the

00:19:08,960 --> 00:19:17,100
the old pipes and filters which was

00:19:14,039 --> 00:19:18,980
invented in Bell Laboratories somewhere

00:19:17,100 --> 00:19:22,039
in the mid 60s when they were

00:19:18,980 --> 00:19:27,980
implementing the UNIX operating system I

00:19:22,039 --> 00:19:30,690
think it's kind of a it's it's really a

00:19:27,980 --> 00:19:33,059
property of a sound architecture that

00:19:30,690 --> 00:19:34,870
you can still reuse these architectures

00:19:33,059 --> 00:19:37,720
so long after it was

00:19:34,870 --> 00:19:41,290
was created in a completely new context

00:19:37,720 --> 00:19:44,140
and I also think it's quite fitting that

00:19:41,290 --> 00:19:47,170
in a platform that calls itself an

00:19:44,140 --> 00:19:49,720
operating system that we reuse this

00:19:47,170 --> 00:19:56,170
classic old architecture for one of the

00:19:49,720 --> 00:19:59,710
most iconic operating systems ever but

00:19:56,170 --> 00:20:03,940
let's get back to this so what happens

00:19:59,710 --> 00:20:05,950
here is that the the the payload will

00:20:03,940 --> 00:20:07,929
hit the metric extractor service and if

00:20:05,950 --> 00:20:10,270
we say that the payload pipeline does

00:20:07,929 --> 00:20:11,710
not know anything about the payload the

00:20:10,270 --> 00:20:13,960
metric extraction service knows

00:20:11,710 --> 00:20:15,940
everything about the payload so the

00:20:13,960 --> 00:20:18,460
metric extraction service is the service

00:20:15,940 --> 00:20:20,170
that is responsible for extracting the

00:20:18,460 --> 00:20:24,460
metrics from the payload that comes in

00:20:20,170 --> 00:20:27,700
and then obviously we will have a lot of

00:20:24,460 --> 00:20:29,380
different metric extraction services we

00:20:27,700 --> 00:20:32,200
will have one for each combination of

00:20:29,380 --> 00:20:39,190
device and firmware that is running out

00:20:32,200 --> 00:20:41,410
there if the different firmwares have

00:20:39,190 --> 00:20:45,580
the consequence of the device having a

00:20:41,410 --> 00:20:48,280
different payload and the metric

00:20:45,580 --> 00:20:50,740
extraction service will then extract the

00:20:48,280 --> 00:20:53,260
metric that is interesting or that is

00:20:50,740 --> 00:20:55,450
sent by the device if that's one or if

00:20:53,260 --> 00:20:57,700
that's many different metrics and then

00:20:55,450 --> 00:21:00,730
publish that to the metric service which

00:20:57,700 --> 00:21:02,890
is then normalized format which meaning

00:21:00,730 --> 00:21:07,059
that we can reuse the metric from a lot

00:21:02,890 --> 00:21:09,250
of different devices and then each

00:21:07,059 --> 00:21:10,840
metrics we will have one service for

00:21:09,250 --> 00:21:15,520
each metric that we were interested in

00:21:10,840 --> 00:21:18,940
and how we store and make that data

00:21:15,520 --> 00:21:20,860
available to client applications is very

00:21:18,940 --> 00:21:24,070
much up to each metric that we're going

00:21:20,860 --> 00:21:26,890
to use so whether or not that's going to

00:21:24,070 --> 00:21:28,650
be on a on a stream for three monolithic

00:21:26,890 --> 00:21:30,910
or if it's going to a machine learning

00:21:28,650 --> 00:21:33,040
scenario or if it's just going to be

00:21:30,910 --> 00:21:36,960
stored to have static reports we would

00:21:33,040 --> 00:21:39,790
use different scenarios for that and

00:21:36,960 --> 00:21:42,610
this gives us a lot of flexibility in

00:21:39,790 --> 00:21:45,400
terms of what we are able to accomplish

00:21:42,610 --> 00:21:47,350
with new different devices so in the

00:21:45,400 --> 00:21:48,250
classic scenario what we're having here

00:21:47,350 --> 00:21:50,080
is

00:21:48,250 --> 00:21:52,570
one-to-one relationship between device

00:21:50,080 --> 00:21:56,020
and metric extractor service so if we

00:21:52,570 --> 00:21:57,490
have one device running once version of

00:21:56,020 --> 00:22:00,430
the firmware we would have one

00:21:57,490 --> 00:22:02,670
extraction service for that but we have

00:22:00,430 --> 00:22:06,010
the flexibility to change that because

00:22:02,670 --> 00:22:09,850
we don't necessarily need to have one

00:22:06,010 --> 00:22:12,220
one service for that specific device we

00:22:09,850 --> 00:22:14,140
could have several services for the same

00:22:12,220 --> 00:22:18,220
device if that makes sense if there was

00:22:14,140 --> 00:22:20,800
a very complex the payload with a lot of

00:22:18,220 --> 00:22:25,030
metrics we could have one service for

00:22:20,800 --> 00:22:28,120
each metric on the other hand if we have

00:22:25,030 --> 00:22:30,820
a device that sends us a payload that is

00:22:28,120 --> 00:22:33,310
different between firmware versions but

00:22:30,820 --> 00:22:36,700
not so much it might make a lot of sense

00:22:33,310 --> 00:22:38,650
to have the same service extract the

00:22:36,700 --> 00:22:44,650
metrics from both of those so we have

00:22:38,650 --> 00:22:48,220
this flexibility and I as an architect I

00:22:44,650 --> 00:22:50,920
always come back to the flexibility part

00:22:48,220 --> 00:22:53,830
of the architecture and and I would like

00:22:50,920 --> 00:22:56,800
to share a story with you I was driving

00:22:53,830 --> 00:22:58,810
in my car some time back and I had

00:22:56,800 --> 00:23:00,310
Radeon and on the radio there was a

00:22:58,810 --> 00:23:03,400
science show and they were interviewing

00:23:00,310 --> 00:23:06,400
a professor from a university in the US

00:23:03,400 --> 00:23:08,260
and he was talking about something that

00:23:06,400 --> 00:23:13,270
he did with his research team they were

00:23:08,260 --> 00:23:16,780
trying to research if they could if they

00:23:13,270 --> 00:23:19,180
could explain intelligence as a physical

00:23:16,780 --> 00:23:20,950
force that affects the world much the

00:23:19,180 --> 00:23:24,700
same as you would you would try to

00:23:20,950 --> 00:23:26,650
describe gravity or velocity and in the

00:23:24,700 --> 00:23:29,680
end they had come up with the equation

00:23:26,650 --> 00:23:33,040
or a formula that they thought described

00:23:29,680 --> 00:23:37,390
the impact of intelligence as a physical

00:23:33,040 --> 00:23:39,880
force on the world and it was quite a

00:23:37,390 --> 00:23:42,310
long show and the interviews quite deep

00:23:39,880 --> 00:23:44,170
and they taught a lot about how they did

00:23:42,310 --> 00:23:46,510
this research what it needed to do in

00:23:44,170 --> 00:23:48,220
order to do this and at some point he

00:23:46,510 --> 00:23:50,920
said that the first thing they had to do

00:23:48,220 --> 00:23:54,880
was define what is intelligence what was

00:23:50,920 --> 00:23:57,100
intelligence for them and it was a very

00:23:54,880 --> 00:23:58,810
highly academic discussion but then

00:23:57,100 --> 00:24:00,040
after while he said something that

00:23:58,810 --> 00:24:05,860
really made me

00:24:00,040 --> 00:24:08,710
look up I look up and he said we define

00:24:05,860 --> 00:24:11,710
intelligence as the ability to make the

00:24:08,710 --> 00:24:14,140
choices that maximizes your flexibility

00:24:11,710 --> 00:24:16,600
in an unknown future and I was there and

00:24:14,140 --> 00:24:21,040
I was thinking hey wait that's what I'm

00:24:16,600 --> 00:24:22,960
doing each and every day and if you look

00:24:21,040 --> 00:24:25,690
at this architecture of that view I

00:24:22,960 --> 00:24:28,870
think that is precisely what we tried to

00:24:25,690 --> 00:24:36,610
accomplish with this one to maximize our

00:24:28,870 --> 00:24:38,669
flexibility in an unknown future all

00:24:36,610 --> 00:24:38,669
right

00:24:41,610 --> 00:24:52,409
questions so far okay I'll have one

00:24:48,179 --> 00:24:57,119
question so where is that demo that was

00:24:52,409 --> 00:24:59,220
promised in the description oh well when

00:24:57,119 --> 00:25:01,590
I wrote that description we were on a

00:24:59,220 --> 00:25:04,289
road map that would allow us to be

00:25:01,590 --> 00:25:07,499
finished with one of our own devices and

00:25:04,289 --> 00:25:10,159
the metric extraction for that but

00:25:07,499 --> 00:25:14,519
unfortunately that wasn't the case so

00:25:10,159 --> 00:25:17,609
the some week ago I was in the I had a

00:25:14,519 --> 00:25:20,220
choice of maybe just running a lot of

00:25:17,609 --> 00:25:22,139
services on DCOs and showing that for

00:25:20,220 --> 00:25:27,109
you but I didn't think that would make a

00:25:22,139 --> 00:25:32,549
lot of sense so no demo sorry for that

00:25:27,109 --> 00:25:34,499
okay so final section some lessons

00:25:32,549 --> 00:25:38,669
learned while using maces on Windows

00:25:34,499 --> 00:25:43,220
Azure specifically all right to build a

00:25:38,669 --> 00:25:46,590
future-proof infrastructure you need to

00:25:43,220 --> 00:25:51,359
take a deep look into what you get when

00:25:46,590 --> 00:25:53,639
you install DCOs on one on Windows Azure

00:25:51,359 --> 00:25:55,649
for instance I think the same questions

00:25:53,639 --> 00:25:57,899
need to be asked if you were going to

00:25:55,649 --> 00:26:00,330
run this on Amazon Web Services for

00:25:57,899 --> 00:26:02,279
instance but on a show you would

00:26:00,330 --> 00:26:04,559
basically have three options you could

00:26:02,279 --> 00:26:06,659
use it default templates that you get

00:26:04,559 --> 00:26:08,940
from mesosphere or from the upper

00:26:06,659 --> 00:26:12,029
container services if you use DCOs

00:26:08,940 --> 00:26:15,840
as the what they call container

00:26:12,029 --> 00:26:19,109
orchestration you could use the azure

00:26:15,840 --> 00:26:20,220
container service engine do you know

00:26:19,109 --> 00:26:21,059
what that is do you have any experience

00:26:20,220 --> 00:26:24,389
with that

00:26:21,059 --> 00:26:27,389
the ACS engine okay I'll talk a bit

00:26:24,389 --> 00:26:28,440
about that later on what you also could

00:26:27,389 --> 00:26:35,249
do is you could create your own

00:26:28,440 --> 00:26:37,590
templates for creating DCOs on ownership

00:26:35,249 --> 00:26:39,600
that's the road we took at install but

00:26:37,590 --> 00:26:42,720
that's basically basically because we

00:26:39,600 --> 00:26:45,659
missed the ACS engine so the ACS engine

00:26:42,720 --> 00:26:47,879
is application it's open source you can

00:26:45,659 --> 00:26:52,519
find it on github and you download the

00:26:47,879 --> 00:26:55,170
docker image and run locally and that is

00:26:52,519 --> 00:26:58,140
the AES engine is

00:26:55,170 --> 00:27:00,420
what Microsoft uses themselves to create

00:26:58,140 --> 00:27:03,050
the templates that you use when you

00:27:00,420 --> 00:27:06,810
install these OS on Windows after so

00:27:03,050 --> 00:27:10,820
what you can do is you can can do a lot

00:27:06,810 --> 00:27:13,590
of reconfiguration of how the end

00:27:10,820 --> 00:27:18,930
product will look when you install this

00:27:13,590 --> 00:27:20,670
us so for instance when you install the

00:27:18,930 --> 00:27:22,650
service on assure you will get

00:27:20,670 --> 00:27:24,720
everything you need so you will get a

00:27:22,650 --> 00:27:28,020
virtual network you will get load

00:27:24,720 --> 00:27:30,780
balancers you will get all the computers

00:27:28,020 --> 00:27:32,400
with all the hardware that is associated

00:27:30,780 --> 00:27:34,830
with them but if you want to have more

00:27:32,400 --> 00:27:36,990
fine-grained control over that you might

00:27:34,830 --> 00:27:39,540
want to install this us on an existing

00:27:36,990 --> 00:27:41,970
virtual network on offer or you maybe

00:27:39,540 --> 00:27:44,910
want to use something like managed disks

00:27:41,970 --> 00:27:47,580
rather than the classical disk then you

00:27:44,910 --> 00:27:50,610
need to either do your templates

00:27:47,580 --> 00:27:53,370
yourself or configure them using the ACS

00:27:50,610 --> 00:27:56,880
engine so if you're going to run DCOs on

00:27:53,370 --> 00:28:01,920
after I strongly suggest that you take a

00:27:56,880 --> 00:28:03,990
deep look at the ACS engine alright

00:28:01,920 --> 00:28:07,860
I wish we had but now we have a set of

00:28:03,990 --> 00:28:11,970
own templates that we use and I think

00:28:07,860 --> 00:28:14,130
it's it's it's quite important to have

00:28:11,970 --> 00:28:16,170
this control I mean if you're in a

00:28:14,130 --> 00:28:18,090
scenario where you know that okay we're

00:28:16,170 --> 00:28:20,040
going to install this with it's just for

00:28:18,090 --> 00:28:22,350
prototyping or to get a view of it

00:28:20,040 --> 00:28:24,420
fine then use the default template or if

00:28:22,350 --> 00:28:25,920
you know that okay we're going to use

00:28:24,420 --> 00:28:28,200
this we're going to install Kafka and

00:28:25,920 --> 00:28:30,720
spark and run and that's it then you

00:28:28,200 --> 00:28:32,580
probably find to just using the default

00:28:30,720 --> 00:28:37,980
templates but if you're in a situation

00:28:32,580 --> 00:28:40,380
where you want to integrate your

00:28:37,980 --> 00:28:41,730
application or you have a lot of legacy

00:28:40,380 --> 00:28:44,580
applications that you want to integrate

00:28:41,730 --> 00:28:48,360
with the running this year's DCOs

00:28:44,580 --> 00:28:50,610
cluster and you know that you can't you

00:28:48,360 --> 00:28:53,070
can't containerize your legacy

00:28:50,610 --> 00:28:54,860
applications at install we have a lot of

00:28:53,070 --> 00:28:58,620
legacy applications that are running

00:28:54,860 --> 00:29:00,780
dotnet code donate for six dotnet for

00:28:58,620 --> 00:29:03,640
five for instance we can't put those on

00:29:00,780 --> 00:29:06,730
on Linux containers

00:29:03,640 --> 00:29:08,350
yet we want to in certain instances have

00:29:06,730 --> 00:29:11,770
them in the cloud so that we can have a

00:29:08,350 --> 00:29:14,950
communication between the mesas cluster

00:29:11,770 --> 00:29:16,900
and the legacy code and in order to do

00:29:14,950 --> 00:29:19,960
that we need to have more control over

00:29:16,900 --> 00:29:22,630
the virtual network and that is the

00:29:19,960 --> 00:29:30,030
first reasons why we choose to make our

00:29:22,630 --> 00:29:36,130
own templates also if you want to have a

00:29:30,030 --> 00:29:39,160
different set of nodes in your in your

00:29:36,130 --> 00:29:43,570
cluster it's important that you you have

00:29:39,160 --> 00:29:45,580
a good grasp of how to create new new

00:29:43,570 --> 00:29:49,630
functionality using the template so for

00:29:45,580 --> 00:29:53,050
instance I think that in the future we

00:29:49,630 --> 00:29:55,720
will see a lot of row based mesas

00:29:53,050 --> 00:29:59,170
clusters I don't know are you familiar

00:29:55,720 --> 00:30:02,200
with the role concept within mesas or

00:29:59,170 --> 00:30:04,720
should I just to mention it briefly yeah

00:30:02,200 --> 00:30:07,990
I think I'll mention it then so of

00:30:04,720 --> 00:30:10,210
rolling mesas when you deploy deploy a

00:30:07,990 --> 00:30:13,510
mesas framework or a Mesa service you

00:30:10,210 --> 00:30:15,760
can say that this service will only be

00:30:13,510 --> 00:30:21,310
deployed to nodes that have a specific

00:30:15,760 --> 00:30:24,640
role and previously there was not so

00:30:21,310 --> 00:30:30,300
good in mesas because a framework such

00:30:24,640 --> 00:30:31,870
as marathon could only handle one role

00:30:30,300 --> 00:30:34,480
at a time

00:30:31,870 --> 00:30:36,400
so with an exception there's something

00:30:34,480 --> 00:30:38,440
called a default role and that is any

00:30:36,400 --> 00:30:41,170
node that this in your cluster does that

00:30:38,440 --> 00:30:46,480
does not have a specific role attached

00:30:41,170 --> 00:30:49,300
to it it can be handled and then another

00:30:46,480 --> 00:30:53,770
one but with a new release of mesas

00:30:49,300 --> 00:30:56,200
which i think is also in DCOs 1.10 you

00:30:53,770 --> 00:30:59,260
can have several roles attached to a

00:30:56,200 --> 00:31:01,660
framework so before you could not have

00:30:59,260 --> 00:31:04,390
more than one role except default

00:31:01,660 --> 00:31:06,850
rolling in in Marathon for instance and

00:31:04,390 --> 00:31:08,530
if you install this u.s. you already

00:31:06,850 --> 00:31:11,290
have that role it's called public slave

00:31:08,530 --> 00:31:15,040
and it's the role that allows you to put

00:31:11,290 --> 00:31:16,630
certain applications on the part of your

00:31:15,040 --> 00:31:18,700
cluster that is excessive

00:31:16,630 --> 00:31:23,710
all from the load balancer from the

00:31:18,700 --> 00:31:25,840
outside and if you want to have another

00:31:23,710 --> 00:31:28,780
set another roll you can't reuse

00:31:25,840 --> 00:31:30,430
marathon for that or you couldn't before

00:31:28,780 --> 00:31:34,510
but you can now and I think that will

00:31:30,430 --> 00:31:36,490
make rolls more used within the clusters

00:31:34,510 --> 00:31:38,440
for instance if you have certain

00:31:36,490 --> 00:31:42,940
applications that require a lot of

00:31:38,440 --> 00:31:46,150
memory you could want to have a specific

00:31:42,940 --> 00:31:47,860
set of servers or or maysa nodes that

00:31:46,150 --> 00:31:49,870
you know have the capacity to run this

00:31:47,860 --> 00:31:53,230
service because they provide a lot of

00:31:49,870 --> 00:31:57,430
memory and at the same time then you

00:31:53,230 --> 00:32:00,190
don't want marathon to to put a lot of

00:31:57,430 --> 00:32:02,140
other services on those nodes because

00:32:00,190 --> 00:32:04,740
you want to use them exclusively for

00:32:02,140 --> 00:32:08,200
those services that require a lot of

00:32:04,740 --> 00:32:10,270
memory and that is a typical case when

00:32:08,200 --> 00:32:14,170
you use the roll so you attach our

00:32:10,270 --> 00:32:17,260
specific role to those nodes and then

00:32:14,170 --> 00:32:19,300
when you deploy your applications you

00:32:17,260 --> 00:32:24,640
add that say that these applications

00:32:19,300 --> 00:32:29,800
should be deployed on these nodes also

00:32:24,640 --> 00:32:33,130
with the maysa for Windows coming I

00:32:29,800 --> 00:32:36,690
think there are a good share of the DC

00:32:33,130 --> 00:32:39,490
OS users that is going to want to deploy

00:32:36,690 --> 00:32:41,890
windows containers on on Windows nodes

00:32:39,490 --> 00:32:44,830
and then of course you need to tell

00:32:41,890 --> 00:32:47,320
marathon that a specific application

00:32:44,830 --> 00:32:49,540
could only be run on Windows nodes I

00:32:47,320 --> 00:32:52,240
don't know if there's some maybe some

00:32:49,540 --> 00:32:55,390
other ideas on how to solve that maybe

00:32:52,240 --> 00:32:58,180
they will build in some kind of always

00:32:55,390 --> 00:33:03,090
type into the mazes resource offering

00:32:58,180 --> 00:33:08,940
I'm not sure but if if you look at the

00:33:03,090 --> 00:33:13,600
there's a in the North American mask on

00:33:08,940 --> 00:33:16,630
Escom it was a talk about misses for

00:33:13,600 --> 00:33:22,420
Windows and they use attribute which is

00:33:16,630 --> 00:33:24,910
kind of a very similar to rolls to have

00:33:22,420 --> 00:33:28,560
Marathon add Windows containers

00:33:24,910 --> 00:33:28,560
exclusively to windows

00:33:29,599 --> 00:33:40,590
and when rolls are getting more usable

00:33:38,220 --> 00:33:43,919
in terms of mazes I think it's more I

00:33:40,590 --> 00:33:46,559
think this is is getting important that

00:33:43,919 --> 00:33:49,249
you can actually provide new set of

00:33:46,559 --> 00:33:52,169
nodes with specific capacity to your

00:33:49,249 --> 00:33:56,580
missus cluster and then you need some

00:33:52,169 --> 00:33:58,739
form of insight into how this works

00:33:56,580 --> 00:34:03,570
rather than just using the default

00:33:58,739 --> 00:34:08,129
templates what I also would like to

00:34:03,570 --> 00:34:09,510
mention is that we think that when you

00:34:08,129 --> 00:34:12,089
start using DCOs

00:34:09,510 --> 00:34:14,909
for the first time you get a lot of new

00:34:12,089 --> 00:34:19,369
functionality and there are certain

00:34:14,909 --> 00:34:22,589
things that at least we had to invest a

00:34:19,369 --> 00:34:27,240
lot of time to understand how they work

00:34:22,589 --> 00:34:31,349
so get to know your new friends you will

00:34:27,240 --> 00:34:34,440
have marathon get to know that that is

00:34:31,349 --> 00:34:38,129
my advice to you it could use some

00:34:34,440 --> 00:34:40,500
fine-tuning there's a very good API for

00:34:38,129 --> 00:34:44,279
marathon a REST API which you can use it

00:34:40,500 --> 00:34:46,109
has a monitoring endpoint for instance

00:34:44,279 --> 00:34:48,000
which you could hook up to your to if

00:34:46,109 --> 00:34:50,520
you were running some kind of monitoring

00:34:48,000 --> 00:34:52,409
software in the backend you could hook

00:34:50,520 --> 00:34:58,049
that up so you can extract these metrics

00:34:52,409 --> 00:35:01,529
from marathon and make choices of how to

00:34:58,049 --> 00:35:04,859
scale marathon based on that you could

00:35:01,529 --> 00:35:09,960
you you might also based on that want to

00:35:04,859 --> 00:35:13,829
change some JVM parameters Java

00:35:09,960 --> 00:35:16,710
parameters on marathon you can also use

00:35:13,829 --> 00:35:22,890
the marathon API to do automation and

00:35:16,710 --> 00:35:27,839
deployments we use vs TS at Tunstall and

00:35:22,890 --> 00:35:32,640
we we can have a continuous deployment

00:35:27,839 --> 00:35:34,440
pipeline based on this API if you're

00:35:32,640 --> 00:35:36,569
running this sooner or later you're

00:35:34,440 --> 00:35:39,580
going to want to run your own private

00:35:36,569 --> 00:35:42,610
container registry so

00:35:39,580 --> 00:35:46,470
trying as early as possible to look up

00:35:42,610 --> 00:35:49,030
how to do that within the DCOs cluster

00:35:46,470 --> 00:35:53,440
the important thing here is to provide

00:35:49,030 --> 00:35:57,610
the the authentication information to

00:35:53,440 --> 00:36:02,710
mazes so it can download from your

00:35:57,610 --> 00:36:06,700
private registry and what we can do is

00:36:02,710 --> 00:36:09,160
you can when we do a service in DCOs and

00:36:06,700 --> 00:36:11,470
marathon you can apply something called

00:36:09,160 --> 00:36:14,740
artefact URL which will be downloaded

00:36:11,470 --> 00:36:17,950
and a good thing to know is that that

00:36:14,740 --> 00:36:18,520
will use curl on that URL that you

00:36:17,950 --> 00:36:20,800
provide

00:36:18,520 --> 00:36:23,770
so anything that Kurt can handle you can

00:36:20,800 --> 00:36:26,050
put in there we for instance put an FTP

00:36:23,770 --> 00:36:31,450
server on the virtual network and we

00:36:26,050 --> 00:36:33,190
just used the FTP link for 40 0 s to

00:36:31,450 --> 00:36:40,810
download the container registry

00:36:33,190 --> 00:36:44,680
information next step if you're relying

00:36:40,810 --> 00:36:47,320
heavily on user interfaces that use

00:36:44,680 --> 00:36:50,230
back-end services in your mesas cluster

00:36:47,320 --> 00:36:54,010
you must get to know your little load

00:36:50,230 --> 00:36:58,150
balancer the marathon LP especially

00:36:54,010 --> 00:36:59,920
looking how to provide SSL offloading if

00:36:58,150 --> 00:37:03,220
we're interested in doing that which I

00:36:59,920 --> 00:37:06,550
think you are there's a lot of different

00:37:03,220 --> 00:37:10,630
options for doing that you can provide

00:37:06,550 --> 00:37:14,620
your certificates as part of your

00:37:10,630 --> 00:37:18,130
deployment of Marathon lb which is good

00:37:14,620 --> 00:37:19,780
to know there are certain environment

00:37:18,130 --> 00:37:22,360
variables that you can use for doing

00:37:19,780 --> 00:37:26,760
that so check that out there's a lot of

00:37:22,360 --> 00:37:30,600
information on the Marathon lb and and

00:37:26,760 --> 00:37:36,300
pages on github so check that out and

00:37:30,600 --> 00:37:39,430
also if you're as we are relying on

00:37:36,300 --> 00:37:41,440
legacy applications running on the same

00:37:39,430 --> 00:37:43,870
virtual network in order for them to

00:37:41,440 --> 00:37:47,320
access your DCOs cluster you will need

00:37:43,870 --> 00:37:49,060
internal load balancing and that would

00:37:47,320 --> 00:37:51,779
work the same way as external load

00:37:49,060 --> 00:37:56,099
balancing that is you would use

00:37:51,779 --> 00:37:58,690
wrath on lb but you reduce them at

00:37:56,099 --> 00:38:00,339
internally on the virtual network and

00:37:58,690 --> 00:38:08,019
with a load balancer that's also

00:38:00,339 --> 00:38:14,859
internal for the network okay that was

00:38:08,019 --> 00:38:17,049
it thank you very much I will I will be

00:38:14,859 --> 00:38:18,700
around here a few minutes if you want

00:38:17,049 --> 00:38:27,549
ask some questions or just come out and

00:38:18,700 --> 00:38:31,329
say hi all right thanks for the

00:38:27,549 --> 00:38:34,240
presentation what kind of data do you

00:38:31,329 --> 00:38:36,309
get there that you will go that we are

00:38:34,240 --> 00:38:39,119
going to insert in the in the

00:38:36,309 --> 00:38:41,619
application itself well that's a good

00:38:39,119 --> 00:38:43,299
thanks for the question it will allow me

00:38:41,619 --> 00:38:45,849
to elaborate a bit on that

00:38:43,299 --> 00:38:47,980
so we're primarily looking at health

00:38:45,849 --> 00:38:48,940
monitor data so that would be things

00:38:47,980 --> 00:38:50,670
like heartbeats

00:38:48,940 --> 00:38:54,339
there are sleep patterns you can do

00:38:50,670 --> 00:38:57,640
movements we want to use this data to

00:38:54,339 --> 00:39:01,089
have preventive services such as fall

00:38:57,640 --> 00:39:05,769
detection or to see if someone is active

00:39:01,089 --> 00:39:07,869
in the room if they're gonna come up out

00:39:05,769 --> 00:39:10,720
of the bed that is some certain point of

00:39:07,869 --> 00:39:13,569
time but it's also interesting because

00:39:10,720 --> 00:39:16,240
this is what we thought when we designed

00:39:13,569 --> 00:39:21,759
the system but just a couple of months

00:39:16,240 --> 00:39:26,019
ago we was asked if we could also

00:39:21,759 --> 00:39:30,400
provide reports for the usage of alarm

00:39:26,019 --> 00:39:33,099
routing you see we do have a lot of in

00:39:30,400 --> 00:39:36,099
the assisted living scenarios we have a

00:39:33,099 --> 00:39:37,990
lot of alarm servers that when someone

00:39:36,099 --> 00:39:39,880
pushes an alarm button they reroute it

00:39:37,990 --> 00:39:42,680
to the correct staff member which is

00:39:39,880 --> 00:39:44,900
configured based on time and and

00:39:42,680 --> 00:39:47,990
such things if they are working or not

00:39:44,900 --> 00:39:50,000
and we were asked if we could use the

00:39:47,990 --> 00:39:53,000
IOT hub to collect this telemetry data

00:39:50,000 --> 00:39:54,290
and provide reports and the answers were

00:39:53,000 --> 00:39:56,780
simple yes of course

00:39:54,290 --> 00:39:59,360
we can we don't we don't care so much

00:39:56,780 --> 00:40:02,600
about the telemetry that comes in so so

00:39:59,360 --> 00:40:06,490
that is one of the that is why I was

00:40:02,600 --> 00:40:10,400
glad I've made it so flexible as I did

00:40:06,490 --> 00:40:13,010
okay so basically patients who are going

00:40:10,400 --> 00:40:15,740
to wear for the most of the time gadgets

00:40:13,010 --> 00:40:18,800
on their body that should report their

00:40:15,740 --> 00:40:20,900
state health and oh yeah there's a lot

00:40:18,800 --> 00:40:22,550
of different types of gadgets this is

00:40:20,900 --> 00:40:24,440
the classic one something you wear it

00:40:22,550 --> 00:40:26,060
could be one that we provide which has

00:40:24,440 --> 00:40:28,520
an alarm button but also collects these

00:40:26,060 --> 00:40:31,100
metrics like heartbeats and steps but it

00:40:28,520 --> 00:40:32,990
could be a third party like a Fitbit or

00:40:31,100 --> 00:40:34,580
something but there were also other

00:40:32,990 --> 00:40:37,820
kinds of sensors their sense of room

00:40:34,580 --> 00:40:39,620
sensors their senses where we are in a

00:40:37,820 --> 00:40:42,020
room for instance and they can be used

00:40:39,620 --> 00:40:45,410
if you you fall and there's a fall

00:40:42,020 --> 00:40:47,480
detection you can also see where you

00:40:45,410 --> 00:40:49,250
where we are when you fall so that the

00:40:47,480 --> 00:40:51,920
staff knows where to go to find you when

00:40:49,250 --> 00:40:54,530
you fall there's also things that are up

00:40:51,920 --> 00:40:56,810
on the roof which is called like the

00:40:54,530 --> 00:41:01,340
whole ceiling is one big sensor which is

00:40:56,810 --> 00:41:07,400
also used for doing this kind of in room

00:41:01,340 --> 00:41:09,620
placement is any kind of system that you

00:41:07,400 --> 00:41:12,350
describe already implemented there is

00:41:09,620 --> 00:41:15,890
something nobody in the in the field

00:41:12,350 --> 00:41:18,380
nothing is in the field us as of yet now

00:41:15,890 --> 00:41:23,060
this is ongoing and we are planning to

00:41:18,380 --> 00:41:26,680
go live early q1 next year good luck

00:41:23,060 --> 00:41:26,680
sounds very useful thank you

00:41:31,589 --> 00:41:35,239

YouTube URL: https://www.youtube.com/watch?v=is4gnAriFhY


