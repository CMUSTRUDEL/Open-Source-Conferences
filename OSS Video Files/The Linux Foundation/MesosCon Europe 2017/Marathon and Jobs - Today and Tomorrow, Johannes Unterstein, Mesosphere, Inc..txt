Title: Marathon and Jobs - Today and Tomorrow, Johannes Unterstein, Mesosphere, Inc.
Publication date: 2017-10-31
Playlist: MesosCon Europe 2017
Description: 
	Marathon and Jobs - Today and Tomorrow, Johannes Unterstein, Mesosphere, Inc.

Marathon and Chronos have been the core and essential frameworks for most Apache Mesos clusters. Marathon ensures long running tasks are running in the datacenter and is commonly used to maintain high availability of other frameworks. Chronos is the fault tolerant cron of the datacenter. Not long ago, Mesosphere introduced Metronome as a replacement for Chronos based on the Marathon code base. There has been significant change in Marathon to leverage the latest features of Apache Mesos, shift the framework to a reliable and stable state and improve its overall performance and scalability. This session will provide an overview of all the new features, a reasoning about how and why Marathon will grow, and will conclude with a look at the roadmap for Marathon in particular and frameworks launched via Marathon in general.

About Johannes Unterstein
Johannes Unterstein is a Distributed Applications Engineer at Mesosphere in Hamburg where he works on Mesosphere's Marathon project.
Captions: 
	00:00:00,680 --> 00:00:07,620
welcome we're going to talk about

00:00:04,500 --> 00:00:11,460
marathon and and jobs and the current

00:00:07,620 --> 00:00:13,049
state and and there may be future State

00:00:11,460 --> 00:00:14,460
my name is Johannes I'm working at

00:00:13,049 --> 00:00:17,039
missus firm I'm working the Murfin

00:00:14,460 --> 00:00:19,560
project and if you have any questions

00:00:17,039 --> 00:00:22,650
about what we talked yesterday or what

00:00:19,560 --> 00:00:24,600
I'm going to talk today please drop me a

00:00:22,650 --> 00:00:26,400
line if you can't find me in person I'm

00:00:24,600 --> 00:00:28,710
on Twitter and in various talk channels

00:00:26,400 --> 00:00:31,199
so I'm in the mess of slack channel and

00:00:28,710 --> 00:00:31,710
it is for that channel to just take the

00:00:31,199 --> 00:00:34,500
chance

00:00:31,710 --> 00:00:36,270
read me a message if like if I screwed

00:00:34,500 --> 00:00:40,770
up or if you have like more questions

00:00:36,270 --> 00:00:42,899
and I can show today so first talk about

00:00:40,770 --> 00:00:45,899
marathon so marathon is a Contino

00:00:42,899 --> 00:00:49,289
Orchestrator on top of mesos who's who's

00:00:45,899 --> 00:00:52,620
using marathon already okay great so I

00:00:49,289 --> 00:00:54,539
think everybody raised their hand and I

00:00:52,620 --> 00:00:56,730
think Murfin is one of the most popular

00:00:54,539 --> 00:01:00,780
container orchestrators or orchestrators

00:00:56,730 --> 00:01:03,300
on top of missus and we have a section

00:01:00,780 --> 00:01:06,630
in our github page when you scrolled up

00:01:03,300 --> 00:01:09,900
down we have a powered by a marathon

00:01:06,630 --> 00:01:12,390
section and I put it some some logos out

00:01:09,900 --> 00:01:14,850
of the section in the slide I'm really

00:01:12,390 --> 00:01:17,130
proud of all the uses and I wanted to

00:01:14,850 --> 00:01:18,659
put more of the users in the slide I met

00:01:17,130 --> 00:01:20,700
yesterday during the town hall

00:01:18,659 --> 00:01:21,210
discussions but I couldn't find you in

00:01:20,700 --> 00:01:24,060
there

00:01:21,210 --> 00:01:26,340
so if you're not in there already make

00:01:24,060 --> 00:01:28,560
sure to open a pr2 at your company at

00:01:26,340 --> 00:01:31,579
your team to our users by section and

00:01:28,560 --> 00:01:36,390
I'm really happy to merge those peers

00:01:31,579 --> 00:01:39,270
yeah but we have some users here so Yelp

00:01:36,390 --> 00:01:40,950
obviously uses marathon I Yelp us a

00:01:39,270 --> 00:01:45,270
really good contributor as well Alejo

00:01:40,950 --> 00:01:47,820
uses marathon but also like PI Paul II

00:01:45,270 --> 00:01:50,540
by Verizon uses marathon to run their

00:01:47,820 --> 00:01:53,640
productions and marathon is one of the

00:01:50,540 --> 00:01:58,619
fundamental parts of theseus so all the

00:01:53,640 --> 00:02:00,600
ADCs users here oh just a few most of

00:01:58,619 --> 00:02:03,299
them oh oh yeah more more raising their

00:02:00,600 --> 00:02:05,670
hands okay great so every time you using

00:02:03,299 --> 00:02:08,280
the service section in dcs you also use

00:02:05,670 --> 00:02:11,400
marathon underneath which was a slightly

00:02:08,280 --> 00:02:15,090
more fancy UI

00:02:11,400 --> 00:02:16,739
and the first part is talking a little

00:02:15,090 --> 00:02:19,980
bit about past achievements past

00:02:16,739 --> 00:02:22,560
releases we had so we had last April

00:02:19,980 --> 00:02:25,890
last year April in alignment with the

00:02:22,560 --> 00:02:28,650
dcs open source announcement we released

00:02:25,890 --> 00:02:30,930
mouth on 1.1 and included features for

00:02:28,650 --> 00:02:33,180
local and external storage and readiness

00:02:30,930 --> 00:02:35,940
checks so we talked about highlighted

00:02:33,180 --> 00:02:39,599
features just after this overview and

00:02:35,940 --> 00:02:41,940
another fun one 3 we introduced the

00:02:39,599 --> 00:02:45,390
universal container runtime so what we

00:02:41,940 --> 00:02:48,989
did there was we extended the Missis

00:02:45,390 --> 00:02:53,700
container riser which had before the the

00:02:48,989 --> 00:02:57,060
shell executor to to be more open to be

00:02:53,700 --> 00:02:59,069
able to run for example docker images on

00:02:57,060 --> 00:03:00,720
top of directly natively on top of

00:02:59,069 --> 00:03:03,209
missiles which was quite nice and

00:03:00,720 --> 00:03:06,140
enabled us to do further development for

00:03:03,209 --> 00:03:09,569
example to enable task groups afterwards

00:03:06,140 --> 00:03:12,000
animal 3 we enabled GPU support also for

00:03:09,569 --> 00:03:14,010
the universal container runtime and we

00:03:12,000 --> 00:03:16,940
added CNI support container network

00:03:14,010 --> 00:03:19,139
interface support and we enhanced the

00:03:16,940 --> 00:03:21,150
petition awareness of mer phone and

00:03:19,139 --> 00:03:24,500
missus so missus introduced the concept

00:03:21,150 --> 00:03:27,989
to remove task lost and replace it by

00:03:24,500 --> 00:03:32,310
more meaningful task statuses like tasks

00:03:27,989 --> 00:03:34,859
on reach or tasks gone and we adapted

00:03:32,310 --> 00:03:37,379
those services in marathon as well and

00:03:34,859 --> 00:03:39,030
now if you have a network petition and

00:03:37,379 --> 00:03:41,280
you can't reach your agents you can

00:03:39,030 --> 00:03:43,049
really fine grained define how you

00:03:41,280 --> 00:03:45,690
handle those situations so in the purse

00:03:43,049 --> 00:03:48,359
was avatars gets unreachable or tasks

00:03:45,690 --> 00:03:50,010
lost Merlyn will place it instantly now

00:03:48,359 --> 00:03:54,000
you can define how long marathon should

00:03:50,010 --> 00:03:56,280
wait on those tasks ok this was 1 3 and

00:03:54,000 --> 00:03:59,489
1/4 it was beginning of this year we

00:03:56,280 --> 00:04:01,859
introduced pots so the work on pots or

00:03:59,489 --> 00:04:05,910
task groups we borrowed this concept and

00:04:01,859 --> 00:04:09,030
name from kubernetes was it basically an

00:04:05,910 --> 00:04:10,980
a rewrite of more than 50% of the

00:04:09,030 --> 00:04:14,129
marathon codebase to go from app

00:04:10,980 --> 00:04:16,620
definitions to task groups this was

00:04:14,129 --> 00:04:19,620
quite a big change for us and now we

00:04:16,620 --> 00:04:21,930
were able to run side by side container

00:04:19,620 --> 00:04:24,150
sharing some resources we will dive into

00:04:21,930 --> 00:04:26,370
this a little bit later

00:04:24,150 --> 00:04:29,580
and we introduced missiles health checks

00:04:26,370 --> 00:04:30,960
so in the past Merlin was performing

00:04:29,580 --> 00:04:32,250
health checks to check if your

00:04:30,960 --> 00:04:34,530
application is up and running and

00:04:32,250 --> 00:04:37,470
healthy and this was quite a bottleneck

00:04:34,530 --> 00:04:40,740
for for big installations and now you

00:04:37,470 --> 00:04:42,680
were able to let them execute let them

00:04:40,740 --> 00:04:44,970
be executed directly on the missus agent

00:04:42,680 --> 00:04:47,940
which is quite nice and have a nice

00:04:44,970 --> 00:04:50,280
scaling effects and we also introduced

00:04:47,940 --> 00:04:52,560
enhanced debugging so you know able to

00:04:50,280 --> 00:04:55,110
do dive into stock deployments and see

00:04:52,560 --> 00:04:58,860
what's going on and stuff like this and

00:04:55,110 --> 00:05:02,490
last recently release was I think four

00:04:58,860 --> 00:05:05,430
weeks ago was marathon one five and one

00:05:02,490 --> 00:05:09,000
five is not not that rich and features

00:05:05,430 --> 00:05:12,449
but rich in improvements so we had a

00:05:09,000 --> 00:05:14,639
bunch of quality and stability and also

00:05:12,449 --> 00:05:19,820
performance improvements in one five

00:05:14,639 --> 00:05:24,270
we added also we added support for more

00:05:19,820 --> 00:05:27,260
ways of expressing secrets so this is

00:05:24,270 --> 00:05:29,250
only the API and you need to provide an

00:05:27,260 --> 00:05:32,099
implementation for those API we'll talk

00:05:29,250 --> 00:05:35,580
about it later but now you are able to

00:05:32,099 --> 00:05:37,139
use firebase secrets to like to make

00:05:35,580 --> 00:05:39,300
sure that your secrets are not exposed

00:05:37,139 --> 00:05:42,889
to environment variables you can expose

00:05:39,300 --> 00:05:46,169
them as files mounted to your container

00:05:42,889 --> 00:05:49,050
and we enhanced the networking API so in

00:05:46,169 --> 00:05:51,030
1:3 you introduce Ian I support one

00:05:49,050 --> 00:05:54,150
container was able to join exactly once

00:05:51,030 --> 00:05:55,710
you sign at work and one five we we

00:05:54,150 --> 00:05:57,990
enhance this a little bit so that

00:05:55,710 --> 00:06:00,720
containers could join multiple as you

00:05:57,990 --> 00:06:02,400
know networks or multiple other networks

00:06:00,720 --> 00:06:05,699
so there's a little bit more flexible

00:06:02,400 --> 00:06:07,380
now so this is a rough overview about

00:06:05,699 --> 00:06:10,500
what we did in the past one and a half

00:06:07,380 --> 00:06:16,229
years and let's dive into some some of

00:06:10,500 --> 00:06:19,710
the features on this slide so we

00:06:16,229 --> 00:06:23,639
introduced local persistent volumes and

00:06:19,710 --> 00:06:27,479
external storage so storage is a

00:06:23,639 --> 00:06:29,970
first-class citizen and mesos for quite

00:06:27,479 --> 00:06:31,860
a while now so if you have different

00:06:29,970 --> 00:06:33,270
application you have different needs to

00:06:31,860 --> 00:06:36,510
your storage layer or your storage

00:06:33,270 --> 00:06:37,889
options and basically what we saw were

00:06:36,510 --> 00:06:39,479
three kinds of

00:06:37,889 --> 00:06:41,759
vacation so you have your stateless

00:06:39,479 --> 00:06:44,069
containers and you actually don't care

00:06:41,759 --> 00:06:45,210
too much about data and those and for

00:06:44,069 --> 00:06:47,639
those containers you get a default

00:06:45,210 --> 00:06:50,039
sandbox and they send boxes will we

00:06:47,639 --> 00:06:54,150
clean up fifty-five minutes after the

00:06:50,039 --> 00:06:56,430
container terminates but if you have

00:06:54,150 --> 00:06:58,229
data applications you usually care about

00:06:56,430 --> 00:07:00,180
your data and care about what happens to

00:06:58,229 --> 00:07:02,939
your data when your container is it's

00:07:00,180 --> 00:07:05,759
gone so we introduced local persistent

00:07:02,939 --> 00:07:07,800
volumes and this concept is quite nice

00:07:05,759 --> 00:07:10,770
because it's it's designed for

00:07:07,800 --> 00:07:12,270
distributed databases so when you have a

00:07:10,770 --> 00:07:14,550
distributed database you have a

00:07:12,270 --> 00:07:16,979
replication in your data layer

00:07:14,550 --> 00:07:19,050
so imagine elasticsearch or whatever

00:07:16,979 --> 00:07:21,689
framework you or database you want to

00:07:19,050 --> 00:07:24,259
think of and in those databases

00:07:21,689 --> 00:07:26,729
you usually have replication that the

00:07:24,259 --> 00:07:30,479
application layer replicates the data to

00:07:26,729 --> 00:07:32,400
all to all of your notes but then you

00:07:30,479 --> 00:07:34,650
have want to have performance of local

00:07:32,400 --> 00:07:36,719
writes and you want to be really sure

00:07:34,650 --> 00:07:38,580
that you have a good performance during

00:07:36,719 --> 00:07:42,150
writes and not be waiting for your

00:07:38,580 --> 00:07:45,120
network device to commit some-some write

00:07:42,150 --> 00:07:47,669
requests so we introduced these local

00:07:45,120 --> 00:07:50,580
system Williams and that means that

00:07:47,669 --> 00:07:54,060
marathon is reserving on one particular

00:07:50,580 --> 00:07:55,740
agent some space on the disk and it gets

00:07:54,060 --> 00:07:57,960
a label and this is reserved just for

00:07:55,740 --> 00:08:00,139
your application and for your scheduler

00:07:57,960 --> 00:08:05,460
marathon and if your container

00:08:00,139 --> 00:08:09,169
terminates marathon will wait to see and

00:08:05,460 --> 00:08:13,860
missus offer carrying those this

00:08:09,169 --> 00:08:16,020
specific data volume again and so you're

00:08:13,860 --> 00:08:18,060
able to restart your container exactly

00:08:16,020 --> 00:08:20,159
on the same data again as your previous

00:08:18,060 --> 00:08:21,899
container was running on so imagine you

00:08:20,159 --> 00:08:23,819
want to do an upgrade of your database

00:08:21,899 --> 00:08:26,430
or whatever data application you're

00:08:23,819 --> 00:08:28,589
running so in the past without local

00:08:26,430 --> 00:08:29,699
Williams you know the problem you want

00:08:28,589 --> 00:08:32,669
to make an update of your docker

00:08:29,699 --> 00:08:34,320
container and this is restarted and then

00:08:32,669 --> 00:08:35,909
it needs a full replication of your data

00:08:34,320 --> 00:08:37,320
set it's probably bad because you're

00:08:35,909 --> 00:08:39,990
shifting a lot of data and you in your

00:08:37,320 --> 00:08:42,180
data center and now it's able to stop

00:08:39,990 --> 00:08:44,430
your application replace it within your

00:08:42,180 --> 00:08:46,560
version get exactly the same data again

00:08:44,430 --> 00:08:48,029
and prevent those full data replications

00:08:46,560 --> 00:08:49,980
in your data center it's quite nice and

00:08:48,029 --> 00:08:51,070
the configuration of marathon it's on

00:08:49,980 --> 00:08:53,199
the right-hand side

00:08:51,070 --> 00:08:55,690
it's quite easy so in the volume section

00:08:53,199 --> 00:08:57,670
you define your volume where it should

00:08:55,690 --> 00:08:59,769
be mounted say it should be persistent

00:08:57,670 --> 00:09:00,699
and then you can define the size of your

00:08:59,769 --> 00:09:03,490
point and you're done

00:09:00,699 --> 00:09:06,550
so you have this benefit are quite easy

00:09:03,490 --> 00:09:08,860
to configure and on the other hand we

00:09:06,550 --> 00:09:11,079
introduced external storage so we choose

00:09:08,860 --> 00:09:13,089
R x-ray as first provided for external

00:09:11,079 --> 00:09:15,069
storage if you haven't seen it they have

00:09:13,089 --> 00:09:17,709
a booth outside so you can talk to them

00:09:15,069 --> 00:09:20,860
and what they are doing is they are

00:09:17,709 --> 00:09:24,759
providing a driver to talk to external

00:09:20,860 --> 00:09:27,639
data storage for example Amazon EBS so

00:09:24,759 --> 00:09:30,250
with the configuration on the lower

00:09:27,639 --> 00:09:33,509
configuration you just say I have an

00:09:30,250 --> 00:09:36,040
external volume anyone have amount this

00:09:33,509 --> 00:09:39,519
and then you configure the driver and

00:09:36,040 --> 00:09:42,579
you could to go then malformed and

00:09:39,519 --> 00:09:45,250
missus and some extension I will take

00:09:42,579 --> 00:09:46,839
care that this external storage is

00:09:45,250 --> 00:09:49,029
mounted to your container to the

00:09:46,839 --> 00:09:50,850
configured path and this is quite

00:09:49,029 --> 00:09:53,470
helpful if you're running like

00:09:50,850 --> 00:09:55,600
traditional databases like traditional

00:09:53,470 --> 00:09:57,850
sequel databases without a cluster

00:09:55,600 --> 00:09:59,740
solution you probably want to keep your

00:09:57,850 --> 00:10:01,690
data on the container terminates or in

00:09:59,740 --> 00:10:04,389
container fails so that another

00:10:01,690 --> 00:10:09,069
container can continue working but with

00:10:04,389 --> 00:10:11,230
the external store data but you get the

00:10:09,069 --> 00:10:13,060
downside of external rights so but if

00:10:11,230 --> 00:10:14,440
you're locked in in this database in can

00:10:13,060 --> 00:10:16,089
change it for whatever reason I think

00:10:14,440 --> 00:10:22,000
this is a good opportunity and a good

00:10:16,089 --> 00:10:24,190
way to solve the problem and then when

00:10:22,000 --> 00:10:26,760
we go further in this line releases we

00:10:24,190 --> 00:10:29,019
saw the universal container riser and

00:10:26,760 --> 00:10:32,589
the Universal container riser is

00:10:29,019 --> 00:10:34,769
basically that we enhanced the maysa

00:10:32,589 --> 00:10:37,540
containerized so we call this thing

00:10:34,769 --> 00:10:39,970
starting tasks starting containers we

00:10:37,540 --> 00:10:42,069
call this container riser and what we

00:10:39,970 --> 00:10:44,319
had since the very beginning was the

00:10:42,069 --> 00:10:46,240
Misses container rising starting shell

00:10:44,319 --> 00:10:50,259
commands wrapping on the flag container

00:10:46,240 --> 00:10:52,930
around doing resource isolation and then

00:10:50,259 --> 00:10:54,819
docker came up so we adapted docker that

00:10:52,930 --> 00:10:56,730
the Missis agent were able to start

00:10:54,819 --> 00:10:59,459
docker containers we did this by just

00:10:56,730 --> 00:11:02,260
passing a request to the docker demon

00:10:59,459 --> 00:11:04,420
but then we had the problem that way the

00:11:02,260 --> 00:11:06,579
third-party library in our installation

00:11:04,420 --> 00:11:09,630
so not only have miss Osen marathon or

00:11:06,579 --> 00:11:12,579
tease us you also have a dacha demon and

00:11:09,630 --> 00:11:14,560
some of our users and our customers

00:11:12,579 --> 00:11:15,910
don't want to have these third party

00:11:14,560 --> 00:11:17,800
dependencies so they want to have a

00:11:15,910 --> 00:11:19,649
missus man for inspiration I want to run

00:11:17,800 --> 00:11:22,570
containers without a doctor demon and

00:11:19,649 --> 00:11:25,860
basically it's it's similar to what

00:11:22,570 --> 00:11:28,290
missus is doing so we were also running

00:11:25,860 --> 00:11:31,120
tasks and containers were isolating and

00:11:28,290 --> 00:11:33,070
against each other so I think it was

00:11:31,120 --> 00:11:35,889
quite a small step to go one step

00:11:33,070 --> 00:11:38,139
further and enhancing this container

00:11:35,889 --> 00:11:40,449
Iser to run also docker images so the

00:11:38,139 --> 00:11:42,820
mrs. container eyes it's just a one-line

00:11:40,449 --> 00:11:45,880
change in the marathon app definition

00:11:42,820 --> 00:11:48,970
from type docker to type missus you can

00:11:45,880 --> 00:11:50,860
still specify an image and the docker

00:11:48,970 --> 00:11:52,930
fecha were done the missus feature were

00:11:50,860 --> 00:11:54,699
downloaded and extracted exactly the

00:11:52,930 --> 00:11:58,089
same experience as we have with the

00:11:54,699 --> 00:12:00,699
docker demon but this is running on the

00:11:58,089 --> 00:12:02,110
mesas container Iser and you benefit

00:12:00,699 --> 00:12:04,269
from all the experience and the big

00:12:02,110 --> 00:12:06,699
installations and the missus container

00:12:04,269 --> 00:12:12,250
is running so it's quite a nice feature

00:12:06,699 --> 00:12:15,070
and this entire container riser is in

00:12:12,250 --> 00:12:16,449
the missus wall so the missus community

00:12:15,070 --> 00:12:19,500
can really drive forward this

00:12:16,449 --> 00:12:22,300
implementation and we were able to

00:12:19,500 --> 00:12:26,440
support the C&I networks really nicely

00:12:22,300 --> 00:12:28,779
or they were able to utilize GPUs and

00:12:26,440 --> 00:12:32,320
they were utilized they were able to

00:12:28,779 --> 00:12:34,600
start pots to to launch task groups and

00:12:32,320 --> 00:12:37,209
now they're able to launch a

00:12:34,600 --> 00:12:40,269
hierarchically containers so this is

00:12:37,209 --> 00:12:42,250
really nice and enables independent

00:12:40,269 --> 00:12:46,480
development for maybe that's what docker

00:12:42,250 --> 00:12:48,910
is giving priority to and let's talk

00:12:46,480 --> 00:12:51,819
about GPUs so this was also feature

00:12:48,910 --> 00:12:55,110
which was primarily introduced in the

00:12:51,819 --> 00:12:58,420
release together with the UC or so

00:12:55,110 --> 00:13:02,230
beginning from this release you're able

00:12:58,420 --> 00:13:04,060
to isolate GPUs against each other so

00:13:02,230 --> 00:13:05,860
this is a new property of first class

00:13:04,060 --> 00:13:08,110
property in the marathon app definition

00:13:05,860 --> 00:13:12,699
in this example you can specify this

00:13:08,110 --> 00:13:16,000
container should get four CPUs and this

00:13:12,699 --> 00:13:18,010
was developed together with an media so

00:13:16,000 --> 00:13:20,320
when you're utilizing GPUs

00:13:18,010 --> 00:13:23,020
you need quite quite a do some work

00:13:20,320 --> 00:13:25,330
around this you can't just start your

00:13:23,020 --> 00:13:27,160
container you need to have other kernel

00:13:25,330 --> 00:13:28,690
extensions and the kernel libraries at

00:13:27,160 --> 00:13:30,550
the panthan kernel if you're in high

00:13:28,690 --> 00:13:32,950
highly dynamically wall as we are in

00:13:30,550 --> 00:13:34,690
Messer's you don't exactly know

00:13:32,950 --> 00:13:38,590
necessarily which commonly you're

00:13:34,690 --> 00:13:40,660
running so missus do all the work around

00:13:38,590 --> 00:13:42,910
this so when you're in the docker world

00:13:40,660 --> 00:13:45,280
and vidya has this great way of of

00:13:42,910 --> 00:13:47,470
hiding this complexity for you you can

00:13:45,280 --> 00:13:49,360
just say Nvidia docker and then run your

00:13:47,470 --> 00:13:51,790
container and then this extension will

00:13:49,360 --> 00:13:54,520
take care of doing all that magic and if

00:13:51,790 --> 00:13:56,380
you do this app definition for example

00:13:54,520 --> 00:13:58,660
missus will do all the magic for you

00:13:56,380 --> 00:14:00,790
binding all the libraries you need to

00:13:58,660 --> 00:14:03,760
have and you're able to run your GPU

00:14:00,790 --> 00:14:06,370
consuming tasks just over and now you

00:14:03,760 --> 00:14:08,260
were able to utilize GPUs to machine

00:14:06,370 --> 00:14:10,750
learning to whatever we heard it in the

00:14:08,260 --> 00:14:12,790
keynote this morning about tensor flow

00:14:10,750 --> 00:14:14,740
and that you were able to run tensor

00:14:12,790 --> 00:14:17,410
flow on top of TCS they were talk I

00:14:14,740 --> 00:14:19,360
think this morning by Kevin about this

00:14:17,410 --> 00:14:21,670
topic I think there's a mrs. Khan

00:14:19,360 --> 00:14:25,210
University session this afternoon so if

00:14:21,670 --> 00:14:29,040
you interested I put some links and

00:14:25,210 --> 00:14:32,770
slides and make sure he was at the talks

00:14:29,040 --> 00:14:34,240
ok so now we're at the pot section the

00:14:32,770 --> 00:14:38,200
pots are really interesting because they

00:14:34,240 --> 00:14:40,450
enable us to have more flexibility in

00:14:38,200 --> 00:14:42,880
our architecture so basically the

00:14:40,450 --> 00:14:44,770
contact a concept of Potter's we're not

00:14:42,880 --> 00:14:48,010
starting one container we're starting a

00:14:44,770 --> 00:14:50,620
group of containers and they can share

00:14:48,010 --> 00:14:53,410
some resources like networking or

00:14:50,620 --> 00:14:55,390
volumes but they don't need to they

00:14:53,410 --> 00:14:57,730
don't want to and on the other side they

00:14:55,390 --> 00:15:01,000
have some specific require a specific

00:14:57,730 --> 00:15:03,340
reserve resources a CPU memory disks so

00:15:01,000 --> 00:15:05,380
they're inside they're isolated against

00:15:03,340 --> 00:15:09,340
each other but they can share resources

00:15:05,380 --> 00:15:12,580
if if they want to so classic examples

00:15:09,340 --> 00:15:16,030
are for example the logging demon

00:15:12,580 --> 00:15:18,370
sitting beside your main application log

00:15:16,030 --> 00:15:21,450
stash grabbing all your logs and

00:15:18,370 --> 00:15:26,860
transferring them to elasticsearch or

00:15:21,450 --> 00:15:30,680
gathering metrics or doing introducing

00:15:26,860 --> 00:15:34,130
some back pressure in placing and

00:15:30,680 --> 00:15:35,720
in front of this so you you have more

00:15:34,130 --> 00:15:38,240
flexibility in what you're doing when

00:15:35,720 --> 00:15:41,630
you're using when you're using task

00:15:38,240 --> 00:15:46,130
groups and this is also done in the

00:15:41,630 --> 00:15:48,830
missus container riser and if you in the

00:15:46,130 --> 00:15:52,490
dcs world there's this new thing and

00:15:48,830 --> 00:15:55,850
it's also it's currently going to be

00:15:52,490 --> 00:15:59,200
ported in the missus CLI that you can DC

00:15:55,850 --> 00:16:03,770
do this your task exag so you can

00:15:59,200 --> 00:16:06,080
execute in your mesos task and here CLI

00:16:03,770 --> 00:16:07,970
and run some bash scrub it say or bash

00:16:06,080 --> 00:16:10,550
commands if you want to its really good

00:16:07,970 --> 00:16:19,820
for debugging and it's also done via

00:16:10,550 --> 00:16:22,190
these task groups okay oops I always try

00:16:19,820 --> 00:16:26,360
to point to there but I think I need to

00:16:22,190 --> 00:16:29,180
go here okay so what was also able using

00:16:26,360 --> 00:16:31,610
the the UCR

00:16:29,180 --> 00:16:34,070
was introducing container network

00:16:31,610 --> 00:16:36,140
interfaces so in the marathon app

00:16:34,070 --> 00:16:38,720
definition you were able to join

00:16:36,140 --> 00:16:41,510
multiple C&I networks now in one five

00:16:38,720 --> 00:16:44,600
and it's really easily done by defining

00:16:41,510 --> 00:16:46,160
a networks property defining the mode of

00:16:44,600 --> 00:16:47,990
your networks and this example it's

00:16:46,160 --> 00:16:50,630
container bridge so you're running your

00:16:47,990 --> 00:16:54,980
container in a bridge network but you

00:16:50,630 --> 00:16:57,890
could also do mode container network and

00:16:54,980 --> 00:17:01,220
this enables you to join an overlay

00:16:57,890 --> 00:17:03,860
network so if you're using GCS we're

00:17:01,220 --> 00:17:07,640
providing a solution for running overlay

00:17:03,860 --> 00:17:10,160
networks bundled inside eCos but if you

00:17:07,640 --> 00:17:13,730
want to bring your own network provider

00:17:10,160 --> 00:17:15,920
you can use the weave works over the

00:17:13,730 --> 00:17:19,069
networks or some other distributors so

00:17:15,920 --> 00:17:22,120
everything is conformed to CNI you could

00:17:19,069 --> 00:17:25,520
use to do over networks and whatever so

00:17:22,120 --> 00:17:27,890
this is quite nice and enables us to do

00:17:25,520 --> 00:17:29,390
IP per container and more service

00:17:27,890 --> 00:17:31,250
discovery options is quite a nice

00:17:29,390 --> 00:17:32,720
feature and also really small

00:17:31,250 --> 00:17:36,110
configuration in the marathon app

00:17:32,720 --> 00:17:38,630
definition and we stick to this

00:17:36,110 --> 00:17:40,730
networking story we're now smoothly

00:17:38,630 --> 00:17:41,540
transitioning over readiness checks to

00:17:40,730 --> 00:17:43,309
health checks

00:17:41,540 --> 00:17:44,330
Serena's checks were also introduced

00:17:43,309 --> 00:17:47,060
raelians Texas

00:17:44,330 --> 00:17:50,720
Murph an only concept and in readiness

00:17:47,060 --> 00:17:52,940
checks you can define checks they are

00:17:50,720 --> 00:17:56,750
performed after the container was

00:17:52,940 --> 00:17:59,150
spawned and they were performed as long

00:17:56,750 --> 00:18:00,470
as the first readiness checks succeeded

00:17:59,150 --> 00:18:03,440
and then the readiness checks are

00:18:00,470 --> 00:18:05,780
stopped and then marathon will consider

00:18:03,440 --> 00:18:07,040
this container ass up and running and

00:18:05,780 --> 00:18:10,520
ready to serve

00:18:07,040 --> 00:18:13,340
traffic unhealth checks on the other

00:18:10,520 --> 00:18:15,770
side are started after the first success

00:18:13,340 --> 00:18:18,830
of a readiness check erroneous checks

00:18:15,770 --> 00:18:22,820
are really designed for giving a task

00:18:18,830 --> 00:18:25,670
given in container time to to startup to

00:18:22,820 --> 00:18:28,130
warm your caches to spin up your JVM or

00:18:25,670 --> 00:18:29,960
do migrations whatever you need to do

00:18:28,130 --> 00:18:34,850
before your application can resume the

00:18:29,960 --> 00:18:37,970
serve requests and yeah you can confer

00:18:34,850 --> 00:18:42,530
configure them similar to health checks

00:18:37,970 --> 00:18:45,170
and if you're using like a load balancer

00:18:42,530 --> 00:18:48,230
up front for example Murph on a beam or

00:18:45,170 --> 00:18:49,940
fenelby respects health checks so muffin

00:18:48,230 --> 00:18:52,370
IV will not route traffic to unhealthy

00:18:49,940 --> 00:18:53,960
applications by the fact that the health

00:18:52,370 --> 00:18:56,780
checks are starting after the readiness

00:18:53,960 --> 00:18:58,820
checks marathoner B is also aware of

00:18:56,780 --> 00:19:00,680
this and not rewarding traffic to an

00:18:58,820 --> 00:19:05,420
spinning up container which is not ready

00:19:00,680 --> 00:19:08,660
okay good

00:19:05,420 --> 00:19:11,690
and another feature in these and this

00:19:08,660 --> 00:19:14,600
story is the missus health checks so I

00:19:11,690 --> 00:19:16,610
think some some of you had some problems

00:19:14,600 --> 00:19:19,460
and big installations when running

00:19:16,610 --> 00:19:23,720
marathon HDPE health checks and we heard

00:19:19,460 --> 00:19:26,300
this yesterday in an tommix talk and I

00:19:23,720 --> 00:19:28,880
think this morning a little bit that

00:19:26,300 --> 00:19:32,630
when you're running a big cluster let's

00:19:28,880 --> 00:19:34,490
assume like 500 mm nose with thick

00:19:32,630 --> 00:19:36,590
serves and applications and you

00:19:34,490 --> 00:19:39,490
configure HDPE health check for every

00:19:36,590 --> 00:19:43,430
application mer phone is quite busy

00:19:39,490 --> 00:19:45,320
performing all those six thousand health

00:19:43,430 --> 00:19:48,260
checks all the time and blocking the

00:19:45,320 --> 00:19:51,770
network traffic so what message did

00:19:48,260 --> 00:19:52,550
missus did a knave or introduced a

00:19:51,770 --> 00:19:55,370
feature called

00:19:52,550 --> 00:19:57,380
missus health checks and they are

00:19:55,370 --> 00:19:59,990
performed on the missus agents

00:19:57,380 --> 00:20:02,330
so my phone can now configure in the

00:19:59,990 --> 00:20:03,830
task info that merthin wants to have

00:20:02,330 --> 00:20:08,690
health checks performed by the missus

00:20:03,830 --> 00:20:10,460
agent and they those kind of health

00:20:08,690 --> 00:20:12,980
checks are more distributed so if you're

00:20:10,460 --> 00:20:15,559
having thousand nodes you you have

00:20:12,980 --> 00:20:17,000
thousand agents who can perform health

00:20:15,559 --> 00:20:19,010
checks and not a single marathon

00:20:17,000 --> 00:20:21,440
instance so it's better they don't

00:20:19,010 --> 00:20:24,559
produce network traffic because they're

00:20:21,440 --> 00:20:26,630
running on localhost so you have a quite

00:20:24,559 --> 00:20:28,039
some advantages when using missus health

00:20:26,630 --> 00:20:31,070
checks and it solves a lot of problems

00:20:28,039 --> 00:20:35,150
and in some installations but they're

00:20:31,070 --> 00:20:37,880
they're different so imagine you have a

00:20:35,150 --> 00:20:43,130
network petition and this one agent is

00:20:37,880 --> 00:20:45,890
petitioned away and you might you may

00:20:43,130 --> 00:20:48,380
have to two scenarios so the first one

00:20:45,890 --> 00:20:49,970
is your each router can steer traffic to

00:20:48,380 --> 00:20:54,350
those agents so you're good to go

00:20:49,970 --> 00:20:56,059
and you your user facing so the user

00:20:54,350 --> 00:20:58,940
doesn't recognize that this agent is

00:20:56,059 --> 00:21:01,490
missing so it's okay that this is

00:20:58,940 --> 00:21:03,200
partitioned away nobody knows this if

00:21:01,490 --> 00:21:05,990
you're using the marathon health checks

00:21:03,200 --> 00:21:09,409
and melfin it's not not able to reach

00:21:05,990 --> 00:21:12,650
this agent marathon will ping it in this

00:21:09,409 --> 00:21:14,900
example three times and on the third

00:21:12,650 --> 00:21:18,710
failure marathon will replace it with

00:21:14,900 --> 00:21:20,539
another one but it's alright but it's

00:21:18,710 --> 00:21:23,840
the running and able to serve traffic

00:21:20,539 --> 00:21:25,340
from the outside and if you using missus

00:21:23,840 --> 00:21:28,610
health checks they are performed by the

00:21:25,340 --> 00:21:30,620
missus agent and the missus Adrienne

00:21:28,610 --> 00:21:34,820
pings it and it's up and running so it's

00:21:30,620 --> 00:21:37,400
totally fine so it's considered healthy

00:21:34,820 --> 00:21:39,140
and it's not restarted by marathon and

00:21:37,400 --> 00:21:42,230
it doesn't matter because the traffic is

00:21:39,140 --> 00:21:45,140
still going but you have other edge

00:21:42,230 --> 00:21:47,419
cases where the application is it's not

00:21:45,140 --> 00:21:49,159
reachable by marathon and maybe Amur

00:21:47,419 --> 00:21:51,380
foam insulation is near your edge router

00:21:49,159 --> 00:21:52,789
and you want to make sure that this is

00:21:51,380 --> 00:21:54,289
reachable from the marathon leader

00:21:52,789 --> 00:21:56,539
because it's you're at road or whatever

00:21:54,289 --> 00:21:58,159
so then in this you know you probably

00:21:56,539 --> 00:21:59,539
want to stick to Tamara for health

00:21:58,159 --> 00:22:01,340
checks and some other they want to go to

00:21:59,539 --> 00:22:04,940
missus health check so it's really

00:22:01,340 --> 00:22:06,380
depends on your specific installation

00:22:04,940 --> 00:22:08,510
what kind of health checks you need you

00:22:06,380 --> 00:22:09,749
need to think about which which kind of

00:22:08,510 --> 00:22:12,159
way you want to go

00:22:09,749 --> 00:22:15,909
but if you have like a really big

00:22:12,159 --> 00:22:18,159
installation and we saw this with mm no

00:22:15,909 --> 00:22:21,609
more applications this pictures are

00:22:18,159 --> 00:22:23,499
stolen from a blog post we saw that at

00:22:21,609 --> 00:22:26,769
some point of application was around

00:22:23,499 --> 00:22:29,379
2000 her phone was busy by doing health

00:22:26,769 --> 00:22:31,559
checks and its own was not able to to

00:22:29,379 --> 00:22:35,379
really scale by the same amount of

00:22:31,559 --> 00:22:37,539
applications as it was before Samara

00:22:35,379 --> 00:22:41,529
thing was busy doing health checks all

00:22:37,539 --> 00:22:43,299
the time so this is the left picture but

00:22:41,529 --> 00:22:45,219
when they moved to mrs. health checks

00:22:43,299 --> 00:22:47,559
they were able to start way more

00:22:45,219 --> 00:22:49,059
applications because the health check

00:22:47,559 --> 00:22:50,679
and the load produced by the house

00:22:49,059 --> 00:22:53,829
checks are distributed to the maysa

00:22:50,679 --> 00:22:55,690
agents so again it really depends on

00:22:53,829 --> 00:22:56,769
your scenario if you're good to go and

00:22:55,690 --> 00:22:59,139
mouth on health checks and want to

00:22:56,769 --> 00:23:01,419
benefit from checking if it's reachable

00:22:59,139 --> 00:23:03,179
over the network maybe stick to

00:23:01,419 --> 00:23:06,129
marathoner shakes if you want to have

00:23:03,179 --> 00:23:09,070
like this outsource of the missus agent

00:23:06,129 --> 00:23:11,139
and you okay with this kind of checks

00:23:09,070 --> 00:23:15,669
you okay going to mess with health

00:23:11,139 --> 00:23:20,399
checks and then when we stick to these

00:23:15,669 --> 00:23:24,969
kind of debugging thing we introduced a

00:23:20,399 --> 00:23:26,919
better way to debug deployments so this

00:23:24,969 --> 00:23:29,679
was a feature and many users and

00:23:26,919 --> 00:23:32,769
customer asked for as they deployed an

00:23:29,679 --> 00:23:33,999
application and by accident or by not

00:23:32,769 --> 00:23:36,969
knowing what they're doing they

00:23:33,999 --> 00:23:39,399
requested 20 CPUs and you don't have one

00:23:36,969 --> 00:23:41,079
agent carrying 20 CPUs you can never

00:23:39,399 --> 00:23:42,519
start this application and this

00:23:41,079 --> 00:23:44,919
application if you're using marathon

00:23:42,519 --> 00:23:47,469
knew I was waiting forever and was

00:23:44,919 --> 00:23:49,719
starving because no of Oken was enough

00:23:47,469 --> 00:23:52,179
to start this application so we

00:23:49,719 --> 00:23:55,389
introduced this kind of debug feature in

00:23:52,179 --> 00:23:56,919
one for and if you're using DCs you have

00:23:55,389 --> 00:23:59,799
this UI where you have more or less a

00:23:56,919 --> 00:24:03,219
funnel and in the first row you see the

00:23:59,799 --> 00:24:04,899
roll and you see that 50% of the agents

00:24:03,219 --> 00:24:07,659
matching the role so in this cluster I

00:24:04,899 --> 00:24:09,789
had private and a public agent and the

00:24:07,659 --> 00:24:12,159
private one matches my requirements and

00:24:09,789 --> 00:24:14,769
the public one that don't match us my

00:24:12,159 --> 00:24:18,459
role were constrained so that's why only

00:24:14,769 --> 00:24:20,440
50% matches and in the second row only

00:24:18,459 --> 00:24:22,870
the matching resources are considered

00:24:20,440 --> 00:24:25,840
for for the bar to display so we see

00:24:22,870 --> 00:24:28,840
100% matches the constraints 100%

00:24:25,840 --> 00:24:31,060
matches the CPU but none offer matches

00:24:28,840 --> 00:24:36,100
the memory so probably I need to change

00:24:31,060 --> 00:24:38,710
my memory configuration for this and if

00:24:36,100 --> 00:24:40,690
you wanna have more detail you could

00:24:38,710 --> 00:24:43,510
also have this table kind of thing where

00:24:40,690 --> 00:24:46,150
you get checks and and crosses depending

00:24:43,510 --> 00:24:49,060
if this hosts in the last of a cycle

00:24:46,150 --> 00:24:53,620
fulfills your needs or not but if you're

00:24:49,060 --> 00:24:58,180
not using this US you can do the same

00:24:53,620 --> 00:24:59,920
things so oh let's take to DC ask users

00:24:58,180 --> 00:25:01,810
if you use the DC Ursula you get

00:24:59,920 --> 00:25:04,960
basically exactly the same information

00:25:01,810 --> 00:25:06,550
so you get this table of Decius marathon

00:25:04,960 --> 00:25:08,350
debug list and you see all the

00:25:06,550 --> 00:25:11,410
applications marathon is currently

00:25:08,350 --> 00:25:14,950
trying to start on this example it's a

00:25:11,410 --> 00:25:17,230
CPU tasks it's waiting had 6 offers and

00:25:14,950 --> 00:25:18,760
couldn't use any of them and then you

00:25:17,230 --> 00:25:21,250
can dive into and say this year's

00:25:18,760 --> 00:25:24,640
marathon debug details or the app ID and

00:25:21,250 --> 00:25:27,970
then you see that none of the a CPU

00:25:24,640 --> 00:25:30,700
offers matches but now if you're not any

00:25:27,970 --> 00:25:33,430
DCs world you can still use this and I

00:25:30,700 --> 00:25:36,490
know about users doing way more fancy

00:25:33,430 --> 00:25:40,150
things and we do so there's an endpoint

00:25:36,490 --> 00:25:43,030
it's called v2q and then the v2q and

00:25:40,150 --> 00:25:45,010
point you get the same information so

00:25:43,030 --> 00:25:48,220
you get for each application you get a

00:25:45,010 --> 00:25:51,070
summary of the last of a cycle so you

00:25:48,220 --> 00:25:55,600
see if you have two agents you see two

00:25:51,070 --> 00:25:58,030
entries there and I only grabbed the one

00:25:55,600 --> 00:26:00,730
for this efficient CPUs there was one

00:25:58,030 --> 00:26:02,590
processed offer because the offer of the

00:26:00,730 --> 00:26:05,410
public agent is filtered out in a

00:26:02,590 --> 00:26:07,480
previous step so we had one processed

00:26:05,410 --> 00:26:10,750
offer and one declined offer so we know

00:26:07,480 --> 00:26:12,730
that there's a problem on the CPUs and

00:26:10,750 --> 00:26:14,950
we need to fix it and on the other side

00:26:12,730 --> 00:26:17,710
you see a summary of all offers this

00:26:14,950 --> 00:26:21,070
application has seen so in this example

00:26:17,710 --> 00:26:23,440
this application has seen 30 offers 30

00:26:21,070 --> 00:26:27,010
of her cycles and declined all the

00:26:23,440 --> 00:26:29,770
offers because of because of the CPU and

00:26:27,010 --> 00:26:32,860
you can you can subscribe to this you

00:26:29,770 --> 00:26:33,610
can ping it constantly define some

00:26:32,860 --> 00:26:36,940
others

00:26:33,610 --> 00:26:38,740
your monitoring tool and don't know page

00:26:36,940 --> 00:26:41,590
your SOE whatever that this application

00:26:38,740 --> 00:26:43,420
is not it's not starting and do whatever

00:26:41,590 --> 00:26:46,480
you want to there are really great

00:26:43,420 --> 00:26:47,710
things you can do with this end point if

00:26:46,480 --> 00:26:49,900
you're doing great things with the end

00:26:47,710 --> 00:26:53,610
point ping me I would love to hear your

00:26:49,900 --> 00:26:59,500
story about this okay

00:26:53,610 --> 00:27:03,490
and the secret IP I'm so marathon by

00:26:59,500 --> 00:27:06,580
itself only defines an API to to define

00:27:03,490 --> 00:27:09,370
secrets and we have the secret API quite

00:27:06,580 --> 00:27:12,040
for a while and was able to to configure

00:27:09,370 --> 00:27:15,130
environment based secrets but usually

00:27:12,040 --> 00:27:17,020
you don't want to have secrets exposed

00:27:15,130 --> 00:27:18,880
in your environment variables you want

00:27:17,020 --> 00:27:21,250
to have secrets injected to a specific

00:27:18,880 --> 00:27:23,980
file and you want to make sure that only

00:27:21,250 --> 00:27:26,200
this container can read this file and

00:27:23,980 --> 00:27:28,330
what we did a marathon we introduced

00:27:26,200 --> 00:27:30,880
this API that you can define still

00:27:28,330 --> 00:27:33,370
define your secret section is the array

00:27:30,880 --> 00:27:37,270
of Secrets or yeah your object of

00:27:33,370 --> 00:27:40,600
Secrets and you can define a source

00:27:37,270 --> 00:27:42,760
whatever this means and on the other

00:27:40,600 --> 00:27:45,340
hand you can define a volume and you can

00:27:42,760 --> 00:27:50,110
say hey Mon this secret please to a

00:27:45,340 --> 00:27:52,960
specific path and then you can hook in a

00:27:50,110 --> 00:27:54,570
plugin so by default northen does not

00:27:52,960 --> 00:27:57,940
provide an implementation for this API

00:27:54,570 --> 00:28:00,730
but it's Java code you can easily like

00:27:57,940 --> 00:28:03,610
write a plug-in consuming these

00:28:00,730 --> 00:28:05,260
information and you get a call directly

00:28:03,610 --> 00:28:07,480
before my phone will give a task

00:28:05,260 --> 00:28:09,400
information to missus and you can do

00:28:07,480 --> 00:28:11,650
their whatever you want so now I know

00:28:09,400 --> 00:28:13,690
about users and they are connecting to

00:28:11,650 --> 00:28:18,250
their secret store pulling out the

00:28:13,690 --> 00:28:19,870
secret putting in the information in in

00:28:18,250 --> 00:28:22,809
the task info and then passing it to

00:28:19,870 --> 00:28:26,280
missus but I heard yesterday in the Town

00:28:22,809 --> 00:28:29,350
Hall that some users are also trying to

00:28:26,280 --> 00:28:32,049
implement a Messer's plugin to do this

00:28:29,350 --> 00:28:33,549
on Messer side so it's up to you what

00:28:32,049 --> 00:28:36,040
you're doing with this we provided the

00:28:33,549 --> 00:28:38,890
API if you are in the DC ice water and

00:28:36,040 --> 00:28:40,900
Decius enterprise wall we provide a like

00:28:38,890 --> 00:28:43,300
you can just use it there's this kind of

00:28:40,900 --> 00:28:45,070
plug it included and the Missis

00:28:43,300 --> 00:28:47,480
adaptions as well

00:28:45,070 --> 00:28:51,740
it's up to you what you want to do with

00:28:47,480 --> 00:28:54,410
enhancements okay great let's talk a

00:28:51,740 --> 00:29:01,610
little bit about quality and the things

00:28:54,410 --> 00:29:04,100
we did in the past release so the top

00:29:01,610 --> 00:29:07,460
left picture is on a monitor I see every

00:29:04,100 --> 00:29:10,010
morning when I go to the office so we

00:29:07,460 --> 00:29:12,110
defined a bunch of integration test

00:29:10,010 --> 00:29:16,520
Suites to make sure that we don't break

00:29:12,110 --> 00:29:18,680
things and we have this for I think we I

00:29:16,520 --> 00:29:20,240
don't I'm necessarily sure if we still

00:29:18,680 --> 00:29:23,230
have it for one three but we have it for

00:29:20,240 --> 00:29:26,120
one four and more five and master and

00:29:23,230 --> 00:29:28,250
we're running integration tests all the

00:29:26,120 --> 00:29:30,980
time like we had some issues in the past

00:29:28,250 --> 00:29:34,370
with some flakiness so melfin is a

00:29:30,980 --> 00:29:36,830
distributed system and we are having

00:29:34,370 --> 00:29:39,080
assumptions and maybes some of them and

00:29:36,830 --> 00:29:41,500
not that stable as we wish to and we

00:29:39,080 --> 00:29:44,630
have some interference between some runs

00:29:41,500 --> 00:29:47,570
but I think nowadays it's we made it

00:29:44,630 --> 00:29:49,400
really really stable again so that all

00:29:47,570 --> 00:29:52,520
our our integration tests are stable

00:29:49,400 --> 00:29:55,280
again and we're running a big soap

00:29:52,520 --> 00:29:58,280
cluster installation so most of the time

00:29:55,280 --> 00:30:01,450
when some of our users reporting a

00:29:58,280 --> 00:30:03,440
problem with some exotic combination of

00:30:01,450 --> 00:30:07,040
definitions and what they're doing and

00:30:03,440 --> 00:30:09,200
when they're facing problems we're going

00:30:07,040 --> 00:30:11,120
to fix the problem and introduce an

00:30:09,200 --> 00:30:13,610
integration test for this and in some

00:30:11,120 --> 00:30:16,940
cases we're also introducing a test case

00:30:13,610 --> 00:30:19,280
for so cluster so now it's starting

00:30:16,940 --> 00:30:20,810
something all the time like I know some

00:30:19,280 --> 00:30:22,730
users and they're starting their

00:30:20,810 --> 00:30:24,680
production of their their testing

00:30:22,730 --> 00:30:26,840
environment every minute because of some

00:30:24,680 --> 00:30:28,610
changes because like developers deploy

00:30:26,840 --> 00:30:31,490
constantly they're queuing up everything

00:30:28,610 --> 00:30:34,940
and we simulate this behavior and I was

00:30:31,490 --> 00:30:37,160
so cluster to make sure that we are able

00:30:34,940 --> 00:30:40,630
to do this and we're not running into

00:30:37,160 --> 00:30:45,620
regression and like being too slow to

00:30:40,630 --> 00:30:48,590
fulfill those setups and we're doing

00:30:45,620 --> 00:30:49,940
some some scale tests nowadays that

00:30:48,590 --> 00:30:54,010
we'll talk a little bit later when we go

00:30:49,940 --> 00:30:54,010
into our nightly builds and

00:30:55,150 --> 00:31:00,380
yeah that's it

00:30:57,050 --> 00:31:03,410
so some of you may notice this it's one

00:31:00,380 --> 00:31:06,260
of our github BOTS and I'll get about

00:31:03,410 --> 00:31:09,740
first decline every PR so don't be mad

00:31:06,260 --> 00:31:12,140
that you get a big decline PR when you

00:31:09,740 --> 00:31:13,880
open it it's our board and what he does

00:31:12,140 --> 00:31:17,840
you can follow the link and go to

00:31:13,880 --> 00:31:20,810
Jenkins and this bot will build every PR

00:31:17,840 --> 00:31:22,850
that's made against marathon codebase so

00:31:20,810 --> 00:31:24,680
unit tests are running and integration

00:31:22,850 --> 00:31:27,320
tests are running and our integration

00:31:24,680 --> 00:31:29,300
tests were really spinning up a cluster

00:31:27,320 --> 00:31:32,600
of north on a cluster of misses and

00:31:29,300 --> 00:31:35,540
doing some serious testing on this but

00:31:32,600 --> 00:31:38,440
then when it's finished every PR and

00:31:35,540 --> 00:31:42,010
every commit to master is uploaded as

00:31:38,440 --> 00:31:46,910
kind of release so everything is built

00:31:42,010 --> 00:31:51,080
to ALW s2 s3 and with this configuration

00:31:46,910 --> 00:31:52,880
you can go to DC ours and spin up a

00:31:51,080 --> 00:31:55,490
distressed cluster having exactly this

00:31:52,880 --> 00:31:58,190
marathon version of this PR which is

00:31:55,490 --> 00:32:01,930
quite nice because every time someone

00:31:58,190 --> 00:32:05,720
committed to marathon master our CI job

00:32:01,930 --> 00:32:07,610
builds this commit runs all the

00:32:05,720 --> 00:32:12,530
integration tests or the unit tests and

00:32:07,610 --> 00:32:15,140
then updates a PR in Decius with the

00:32:12,530 --> 00:32:17,300
newest marathon version and then this

00:32:15,140 --> 00:32:20,420
news marathon version will be picked up

00:32:17,300 --> 00:32:22,700
in the nightly integration test of DCs

00:32:20,420 --> 00:32:24,170
and we will run marathon integration

00:32:22,700 --> 00:32:26,690
tests against the latest committeth

00:32:24,170 --> 00:32:29,330
master so this quite funny that commits

00:32:26,690 --> 00:32:31,550
a mark on marathon will trigger a CI job

00:32:29,330 --> 00:32:33,110
that triggers the commit in DC s that

00:32:31,550 --> 00:32:36,350
triggers a CI job their triggers

00:32:33,110 --> 00:32:38,810
integration tests but we're running like

00:32:36,350 --> 00:32:40,490
40 CR clusters every night testing all

00:32:38,810 --> 00:32:43,790
the stuff we're doing and we hope that

00:32:40,490 --> 00:32:46,190
we make sure know to run integration to

00:32:43,790 --> 00:32:49,070
inter regressions with this and we have

00:32:46,190 --> 00:32:51,550
this nice shiny emoji when when the

00:32:49,070 --> 00:32:55,460
build is passing okay

00:32:51,550 --> 00:32:59,030
the next steps so I will talk about some

00:32:55,460 --> 00:33:00,590
some plans we currently have so I can't

00:32:59,030 --> 00:33:03,470
give you promise that everything is

00:33:00,590 --> 00:33:05,230
going to be happen some stuff will be

00:33:03,470 --> 00:33:10,940
seriously be happen

00:33:05,230 --> 00:33:13,669
but it's up to all of us to to shape the

00:33:10,940 --> 00:33:15,289
future from our phone so if we drop

00:33:13,669 --> 00:33:19,100
something because of various reasons

00:33:15,289 --> 00:33:21,049
from 1.6 don't be mad at us just ping us

00:33:19,100 --> 00:33:22,460
say hey we really want to have that and

00:33:21,049 --> 00:33:24,559
maybe I want to contribute to that

00:33:22,460 --> 00:33:30,020
that's that's get in contact and work

00:33:24,559 --> 00:33:33,710
together so the first thing as I'm so

00:33:30,020 --> 00:33:37,250
sorry the first thing is container

00:33:33,710 --> 00:33:38,840
storage interface so this same thing we

00:33:37,250 --> 00:33:40,669
did for contain a network interface

00:33:38,840 --> 00:33:43,100
we're doing with storage interface again

00:33:40,669 --> 00:33:46,039
so there's a couple of vendors currently

00:33:43,100 --> 00:33:47,840
working together to make one interface

00:33:46,039 --> 00:33:50,720
to define how container should

00:33:47,840 --> 00:33:53,330
communicate with storage and it's called

00:33:50,720 --> 00:33:56,000
CSI this was mentioned yesterday in the

00:33:53,330 --> 00:33:58,220
keynote that we're really pushing this

00:33:56,000 --> 00:34:00,950
forward and as first as the first draft

00:33:58,220 --> 00:34:03,169
is marked as release candidate we are

00:34:00,950 --> 00:34:05,929
starting to introduce this in missus the

00:34:03,169 --> 00:34:08,419
work to enable missus to do this and

00:34:05,929 --> 00:34:12,560
afterwards we're going to introduce this

00:34:08,419 --> 00:34:15,020
in marathon as well and then we want to

00:34:12,560 --> 00:34:20,389
do a thing called for domains and

00:34:15,020 --> 00:34:24,349
cloudbursting so currently you can model

00:34:20,389 --> 00:34:27,139
your topology using missus agent labels

00:34:24,349 --> 00:34:29,710
and I know some users doing this putting

00:34:27,139 --> 00:34:32,690
a label on an agent saying hey you're in

00:34:29,710 --> 00:34:35,210
Region uswest you're in availability

00:34:32,690 --> 00:34:38,210
zone whatever or you're running on

00:34:35,210 --> 00:34:41,240
premise but it's done via labels and

00:34:38,210 --> 00:34:43,580
missus is planning to do first-class

00:34:41,240 --> 00:34:46,970
port of those regions and fault domains

00:34:43,580 --> 00:34:48,649
and this is I think it's a draft or

00:34:46,970 --> 00:34:51,470
already committed to those kind of

00:34:48,649 --> 00:34:53,929
message protobuf may have a domain info

00:34:51,470 --> 00:34:56,000
for each agent and you have rec info in

00:34:53,929 --> 00:34:58,790
a region info and if you're running on

00:34:56,000 --> 00:35:00,530
premise you can use this as rec and as

00:34:58,790 --> 00:35:02,540
region as data center and SREC

00:35:00,530 --> 00:35:05,450
information if you are running in the

00:35:02,540 --> 00:35:08,810
cloud you can maybe have your your

00:35:05,450 --> 00:35:11,000
region of your few data center and your

00:35:08,810 --> 00:35:14,869
availability zone to make sure that

00:35:11,000 --> 00:35:16,250
marathon is able to schedule tasks or to

00:35:14,869 --> 00:35:19,910
spread tasks

00:35:16,250 --> 00:35:23,250
over your availability zone so you I

00:35:19,910 --> 00:35:25,980
would imagine that it is then possible

00:35:23,250 --> 00:35:28,470
that you can define constraints that you

00:35:25,980 --> 00:35:32,730
have please make sure that my task is

00:35:28,470 --> 00:35:36,380
available or is scaled up evenly between

00:35:32,730 --> 00:35:40,470
all my availability zones or scaled up

00:35:36,380 --> 00:35:43,380
evenly between all my recs and if we

00:35:40,470 --> 00:35:45,810
have this first class port we can easily

00:35:43,380 --> 00:35:47,820
add the thing called cloud cloud

00:35:45,810 --> 00:35:49,920
bursting on top so that's what Eric's

00:35:47,820 --> 00:35:51,900
was talking this morning so if you have

00:35:49,920 --> 00:35:53,580
some workloads and it's just temporarily

00:35:51,900 --> 00:35:57,090
workload and you want to burst out to

00:35:53,580 --> 00:35:59,910
don't know some AWS instances beside you

00:35:57,090 --> 00:36:04,620
regular on-premise instances you can

00:35:59,910 --> 00:36:06,360
label those and say hey in this region

00:36:04,620 --> 00:36:08,730
or rec information its defined that

00:36:06,360 --> 00:36:11,280
these are temporally notes on this burst

00:36:08,730 --> 00:36:13,160
thing and marathon should schedule only

00:36:11,280 --> 00:36:18,960
particular tasks on this special

00:36:13,160 --> 00:36:22,790
temporal agents and then missus is also

00:36:18,960 --> 00:36:25,770
planning to enhance the roll support so

00:36:22,790 --> 00:36:29,640
they're the plans to enable multi roll

00:36:25,770 --> 00:36:32,040
and hierarchical rolls and marathon is

00:36:29,640 --> 00:36:34,650
also planning to supporters so currently

00:36:32,040 --> 00:36:37,050
marathon is not able to register to more

00:36:34,650 --> 00:36:39,630
than one roll so when you start a

00:36:37,050 --> 00:36:41,790
marathon you need to define which kind

00:36:39,630 --> 00:36:44,520
of rolls you're interested in if you do

00:36:41,790 --> 00:36:46,890
nothing marathon is interested in in the

00:36:44,520 --> 00:36:48,420
unreserved roll the asterisk and if

00:36:46,890 --> 00:36:52,590
you're running VCS merthin is also

00:36:48,420 --> 00:36:54,030
interested in the slave public road but

00:36:52,590 --> 00:36:56,010
what this new feature would be able to

00:36:54,030 --> 00:36:58,530
be interested in more roles that

00:36:56,010 --> 00:37:00,720
marathon can be really handle multi

00:36:58,530 --> 00:37:03,750
rolls or even hurich clear roads and

00:37:00,720 --> 00:37:06,480
this is quite a nice feature and if this

00:37:03,750 --> 00:37:08,700
once this is a land that fully misses

00:37:06,480 --> 00:37:11,820
the work will start on top of my phone

00:37:08,700 --> 00:37:13,830
and I saw already quite quite a lot of

00:37:11,820 --> 00:37:16,020
work for multi tendency in marathon and

00:37:13,830 --> 00:37:18,810
what this will be mean from north on and

00:37:16,020 --> 00:37:22,290
what input what implications we will see

00:37:18,810 --> 00:37:24,480
after introducing this ever sure once

00:37:22,290 --> 00:37:26,040
the ipv6 support is fully supported by

00:37:24,480 --> 00:37:27,990
Messersmith and will also include this

00:37:26,040 --> 00:37:29,130
summer phone is just doing validations

00:37:27,990 --> 00:37:31,380
and IP

00:37:29,130 --> 00:37:36,960
four so this is not the big deal for us

00:37:31,380 --> 00:37:38,819
a metronome and Kronus so this was

00:37:36,960 --> 00:37:43,859
probably the most asked questions

00:37:38,819 --> 00:37:46,710
yesterday and the Town Hall and a little

00:37:43,859 --> 00:37:49,920
bit story behind art so Kronos was there

00:37:46,710 --> 00:37:52,460
for three ages and the last April

00:37:49,920 --> 00:37:55,950
released metronome last year April

00:37:52,460 --> 00:37:58,980
mainly because such such amount of use

00:37:55,950 --> 00:38:00,480
is asking for a modernization of Kronos

00:37:58,980 --> 00:38:03,869
and new features and Kronos

00:38:00,480 --> 00:38:06,059
but we weren't with a team at that point

00:38:03,869 --> 00:38:07,890
we were not able to support the marathon

00:38:06,059 --> 00:38:10,049
development and beside the Kronos

00:38:07,890 --> 00:38:14,579
development so we decided to go from

00:38:10,049 --> 00:38:18,119
metronome metronome metronome uses

00:38:14,579 --> 00:38:20,789
marathon as a library and added just a

00:38:18,119 --> 00:38:25,650
thin layer around marathon to enable

00:38:20,789 --> 00:38:28,079
cron expressions but the bad or the

00:38:25,650 --> 00:38:29,940
downside of this is that metronome is

00:38:28,079 --> 00:38:35,279
always behind the marathon development

00:38:29,940 --> 00:38:36,930
and marathon and so you don't have the

00:38:35,279 --> 00:38:40,049
newest features a metronome that you

00:38:36,930 --> 00:38:41,849
would have a marathon and if you want to

00:38:40,049 --> 00:38:44,490
do new features you need to adapt the

00:38:41,849 --> 00:38:47,609
metronome API in the same way we you

00:38:44,490 --> 00:38:52,079
change the marathon API and this is kind

00:38:47,609 --> 00:38:56,789
of double the effort and nowadays we are

00:38:52,079 --> 00:39:00,359
planning to do magic things with that so

00:38:56,789 --> 00:39:02,700
vision is to really enhance our

00:39:00,359 --> 00:39:04,650
deployments and let's talk a little bit

00:39:02,700 --> 00:39:06,529
about current deployments in marathon so

00:39:04,650 --> 00:39:09,839
diploma smurfin are really opinionated

00:39:06,529 --> 00:39:12,420
so a deployment a marathon as always you

00:39:09,839 --> 00:39:16,200
have you current set of application you

00:39:12,420 --> 00:39:17,940
do an update and then you can configure

00:39:16,200 --> 00:39:20,670
it a little bit how you're rolling

00:39:17,940 --> 00:39:23,069
update will work but nothing will always

00:39:20,670 --> 00:39:26,450
go from version a II to vision be in a

00:39:23,069 --> 00:39:29,579
rolling way and it's okay so it works so

00:39:26,450 --> 00:39:31,619
most of the uses are are using rolling

00:39:29,579 --> 00:39:36,599
upgrades for most of the part if you're

00:39:31,619 --> 00:39:39,529
using Canary upgrades this is typically

00:39:36,599 --> 00:39:42,180
done by starting a new application

00:39:39,529 --> 00:39:43,260
somehow magically connecting you canary

00:39:42,180 --> 00:39:45,510
with your own

00:39:43,260 --> 00:39:47,880
with the regular application and if gain

00:39:45,510 --> 00:39:49,560
confidence and the canary then you start

00:39:47,880 --> 00:39:51,690
your role in deployment so this is

00:39:49,560 --> 00:39:54,390
typically done there but you always

00:39:51,690 --> 00:39:56,340
stick to rolling deployments and what

00:39:54,390 --> 00:39:57,840
we're currently planning my colleague

00:39:56,340 --> 00:40:01,110
Alex Hays working on this for quite a

00:39:57,840 --> 00:40:05,390
while it's making this more flexible

00:40:01,110 --> 00:40:08,430
that you don't have this logic how to

00:40:05,390 --> 00:40:09,900
calculate a deployment deeply coded

00:40:08,430 --> 00:40:12,750
inside North on we want to make this

00:40:09,900 --> 00:40:15,180
pluggable and make this us interface to

00:40:12,750 --> 00:40:17,820
to hook into that one deployment can

00:40:15,180 --> 00:40:22,050
contain multiple steps and multiple

00:40:17,820 --> 00:40:25,380
steps can again contain multiple actions

00:40:22,050 --> 00:40:29,460
and an action could be start one task in

00:40:25,380 --> 00:40:33,630
one version on one node or stop one stop

00:40:29,460 --> 00:40:37,050
exactly this one or a step could be wait

00:40:33,630 --> 00:40:41,010
for operator injection wait for someone

00:40:37,050 --> 00:40:45,300
to acknowledge manually this step so

00:40:41,010 --> 00:40:47,370
we're currently in the like further or

00:40:45,300 --> 00:40:49,380
improve brainstorming face and really

00:40:47,370 --> 00:40:52,020
writing this down and as soon as this is

00:40:49,380 --> 00:40:54,120
really ready to share we're gonna share

00:40:52,020 --> 00:40:56,250
it but we like we don't want to make

00:40:54,120 --> 00:40:59,190
like promises where we can't for further

00:40:56,250 --> 00:41:00,750
so this are just things we're currently

00:40:59,190 --> 00:41:03,630
thinking about and we're currently doing

00:41:00,750 --> 00:41:06,450
all the refactorings under the hood to

00:41:03,630 --> 00:41:10,470
make this possible so we're really

00:41:06,450 --> 00:41:12,270
working on making this making good good

00:41:10,470 --> 00:41:16,530
infrastructure to shape those features

00:41:12,270 --> 00:41:20,130
on top of this and so we will introduce

00:41:16,530 --> 00:41:22,170
an interface while you can implement in

00:41:20,130 --> 00:41:23,880
in java or whatever jvm language you

00:41:22,170 --> 00:41:26,760
want to how your deployment should look

00:41:23,880 --> 00:41:28,500
like and if you deployment looks like

00:41:26,760 --> 00:41:30,330
there's it's maybe a blue korean

00:41:28,500 --> 00:41:33,780
deployment canary deployment or rolling

00:41:30,330 --> 00:41:36,420
deployment this is fine but maybe you do

00:41:33,780 --> 00:41:40,020
something like this maybe you have a job

00:41:36,420 --> 00:41:42,540
on fermentation generating a schedule

00:41:40,020 --> 00:41:44,220
drop a one-off job so we're also

00:41:42,540 --> 00:41:46,410
planning to make all lifecycle events

00:41:44,220 --> 00:41:48,990
pluggable so currently methanol weighs a

00:41:46,410 --> 00:41:52,290
container terminates marathon restarts

00:41:48,990 --> 00:41:55,350
it again so maybe we can make it like oh

00:41:52,290 --> 00:41:56,880
if this is terminated it's okay if we

00:41:55,350 --> 00:42:00,599
get exit code zero it's fine

00:41:56,880 --> 00:42:02,339
if you could execute one retry and maybe

00:42:00,599 --> 00:42:04,349
we make the schedule a first-class

00:42:02,339 --> 00:42:06,869
citizen in this scheduler in this

00:42:04,349 --> 00:42:09,960
interface we don't know yet but we would

00:42:06,869 --> 00:42:11,640
try to merge those two development

00:42:09,960 --> 00:42:14,700
branches a metronome marathon back

00:42:11,640 --> 00:42:18,150
together unable scheduled job similar

00:42:14,700 --> 00:42:21,269
phone but again I can't promise you that

00:42:18,150 --> 00:42:22,710
this will be happen in one six so I can

00:42:21,269 --> 00:42:26,190
promise that we're doing everything we

00:42:22,710 --> 00:42:27,480
can to make the fundamentals of this to

00:42:26,190 --> 00:42:29,730
make the middle step

00:42:27,480 --> 00:42:31,859
but maybe the last step is done and one

00:42:29,730 --> 00:42:33,569
seven or later maybe you want to

00:42:31,859 --> 00:42:38,970
participate and contribute to this this

00:42:33,569 --> 00:42:41,130
is highly welcomed okay so I think got a

00:42:38,970 --> 00:42:48,029
few minutes left to talk about people

00:42:41,130 --> 00:42:50,819
and community so this is an overview of

00:42:48,029 --> 00:42:52,650
our contributions and the and the

00:42:50,819 --> 00:42:55,559
releases I mentioned at the beginning of

00:42:52,650 --> 00:42:57,420
this talk so merthon one one we had nine

00:42:55,559 --> 00:43:00,180
community contributions and no

00:42:57,420 --> 00:43:04,650
contributor had more than three

00:43:00,180 --> 00:43:07,589
contributions in one three we had 31

00:43:04,650 --> 00:43:09,990
contributions it's not that big maybe as

00:43:07,589 --> 00:43:14,099
other big open-source communities but

00:43:09,990 --> 00:43:17,039
for our kind of project and our kind of

00:43:14,099 --> 00:43:19,650
complexity this is quite nice and we had

00:43:17,039 --> 00:43:22,680
some contributors are with like eight or

00:43:19,650 --> 00:43:25,049
ten contributions so really thank you

00:43:22,680 --> 00:43:27,329
for contributing so much to the marathon

00:43:25,049 --> 00:43:29,670
project and we're gaining so like the

00:43:27,329 --> 00:43:32,460
last release not so many but I think

00:43:29,670 --> 00:43:35,640
there's an trend to have more

00:43:32,460 --> 00:43:40,109
contributions and we really had a nice

00:43:35,640 --> 00:43:42,509
contribution tagline in the last release

00:43:40,109 --> 00:43:44,430
so maybe we can just go with it so this

00:43:42,509 --> 00:43:46,079
was community contributions were merged

00:43:44,430 --> 00:43:48,180
lightly so there were really nice

00:43:46,079 --> 00:43:50,430
features inside and the great thing

00:43:48,180 --> 00:43:52,650
about this mrs. Connors that I met most

00:43:50,430 --> 00:43:55,200
of them who contributed so we entered

00:43:52,650 --> 00:43:57,720
you'd introduce a plugin for scheduling

00:43:55,200 --> 00:44:03,000
decisions you can now hook into the

00:43:57,720 --> 00:44:05,759
marathon of a matching decision and can

00:44:03,000 --> 00:44:08,160
hook custom code into if you want to

00:44:05,759 --> 00:44:09,610
start something as particular task in a

00:44:08,160 --> 00:44:12,550
particular

00:44:09,610 --> 00:44:15,580
offer or not so this is really nice that

00:44:12,550 --> 00:44:19,380
you can inject custom logic there so we

00:44:15,580 --> 00:44:22,450
had another contribution to not start

00:44:19,380 --> 00:44:25,030
tasks on a agent which is called a

00:44:22,450 --> 00:44:26,950
maintenance mode so I know a bunch of

00:44:25,030 --> 00:44:29,800
users really requesting this for ages

00:44:26,950 --> 00:44:33,070
and someone sit down and implemented

00:44:29,800 --> 00:44:36,000
this because like we hadn't had the

00:44:33,070 --> 00:44:39,430
chance to do so so this was really nice

00:44:36,000 --> 00:44:42,190
or what else were there so some fixes so

00:44:39,430 --> 00:44:44,320
we've obviously we screwed one migration

00:44:42,190 --> 00:44:47,350
a little bit up so a user fixed it and

00:44:44,320 --> 00:44:49,330
prevented us from running this or

00:44:47,350 --> 00:44:51,960
releasing this so this was really nice

00:44:49,330 --> 00:44:55,540
so really really thank you for this and

00:44:51,960 --> 00:44:58,330
I know that some of you some of you

00:44:55,540 --> 00:45:00,670
running marathon in a patched version in

00:44:58,330 --> 00:45:02,200
production so or miss us in a patch

00:45:00,670 --> 00:45:05,080
version in production so this is really

00:45:02,200 --> 00:45:09,550
nice so this is really giving us good

00:45:05,080 --> 00:45:13,450
feedback helping us to ship a good

00:45:09,550 --> 00:45:16,060
product for you if we screw up your

00:45:13,450 --> 00:45:18,460
production please keep reporting and

00:45:16,060 --> 00:45:22,380
telling us that that you have problems

00:45:18,460 --> 00:45:25,060
for that so we really appreciate this so

00:45:22,380 --> 00:45:27,520
thank you very much thank you very much

00:45:25,060 --> 00:45:30,760
for reporting and for fixing and for

00:45:27,520 --> 00:45:33,190
helping us building marathon yeah I

00:45:30,760 --> 00:45:40,210
think that's it if you have questions

00:45:33,190 --> 00:45:40,859
just grab me or write me somewhere no

00:45:40,210 --> 00:45:43,900
questions

00:45:40,859 --> 00:45:50,619
overhelmed by the marathon plans with

00:45:43,900 --> 00:45:53,500
deployments oh one question great you

00:45:50,619 --> 00:45:56,260
talk about marathon what about marathon

00:45:53,500 --> 00:45:58,750
will be so will either some plans to

00:45:56,260 --> 00:46:02,020
integrate the the routing part also so

00:45:58,750 --> 00:46:04,180
you have these calories plans how this

00:46:02,020 --> 00:46:08,950
will be routed like to real application

00:46:04,180 --> 00:46:12,190
there so Murph on to the plan about the

00:46:08,950 --> 00:46:18,220
new deployments is to stick to the

00:46:12,190 --> 00:46:20,230
current way of of API the expose so that

00:46:18,220 --> 00:46:22,240
we aware that we have consumers of the

00:46:20,230 --> 00:46:23,559
marathon event bus ml fenelby for

00:46:22,240 --> 00:46:25,869
examples

00:46:23,559 --> 00:46:29,200
but we do have a bunch of consumers

00:46:25,869 --> 00:46:32,650
behind this bus and by all those changes

00:46:29,200 --> 00:46:35,739
we are sticking to the same API we are

00:46:32,650 --> 00:46:39,009
exposing in the event bus to not affect

00:46:35,739 --> 00:46:43,450
tools like merthon I'd be routing

00:46:39,009 --> 00:46:46,390
traffic there so I think it it should

00:46:43,450 --> 00:46:48,940
stay the same so if you have and canary

00:46:46,390 --> 00:46:51,809
release containing three old ones and

00:46:48,940 --> 00:46:55,559
one new ones this new one should get

00:46:51,809 --> 00:46:59,099
maybe 25% of traffic but if you're using

00:46:55,559 --> 00:47:01,930
more advanced load balancers I think

00:46:59,099 --> 00:47:04,779
some of the users here I think Europe is

00:47:01,930 --> 00:47:06,700
using a quite quite advanced developer

00:47:04,779 --> 00:47:08,799
and say you can do this more

00:47:06,700 --> 00:47:12,279
fine-grained you can say give this

00:47:08,799 --> 00:47:14,109
application maybe only 10% traffic and

00:47:12,279 --> 00:47:16,900
maybe the other more and stuff like this

00:47:14,109 --> 00:47:18,819
so the plan in our current design

00:47:16,900 --> 00:47:21,789
document is to keep the current API

00:47:18,819 --> 00:47:24,369
consistent for tools will not adapt that

00:47:21,789 --> 00:47:28,119
the new way can still work as they did

00:47:24,369 --> 00:47:30,730
before but we can offer more events if

00:47:28,119 --> 00:47:33,220
you want to so if you be more interested

00:47:30,730 --> 00:47:35,739
in these kind of more events for more

00:47:33,220 --> 00:47:41,109
specific versions because a marathon

00:47:35,739 --> 00:47:43,450
Abby gets wants to adapt that there we

00:47:41,109 --> 00:47:46,119
could think about concept of registering

00:47:43,450 --> 00:47:51,059
for more events and then be able to do

00:47:46,119 --> 00:47:52,839
more sophisticated routing as a Trotter

00:47:51,059 --> 00:47:56,680
okay great

00:47:52,839 --> 00:47:58,210
I had a question about pods so the last

00:47:56,680 --> 00:48:01,150
time I checked there was no support for

00:47:58,210 --> 00:48:04,269
external volumes and pods is there any

00:48:01,150 --> 00:48:09,160
plan to add support for that I think I

00:48:04,269 --> 00:48:11,319
read that we are going to so I'm not

00:48:09,160 --> 00:48:13,599
totally sure that external volumes are

00:48:11,319 --> 00:48:18,430
fully supported and thoughts are not I

00:48:13,599 --> 00:48:21,970
would assume that we are way off if it's

00:48:18,430 --> 00:48:24,759
not working and that we we can work on

00:48:21,970 --> 00:48:26,829
this but I need to double check if if

00:48:24,759 --> 00:48:30,400
this is on the road before next release

00:48:26,829 --> 00:48:32,680
or or or not so I'm currently not not

00:48:30,400 --> 00:48:34,269
really sure there is no way to specify

00:48:32,680 --> 00:48:36,609
external volumes right now in

00:48:34,269 --> 00:48:36,910
specification itself I said if there's

00:48:36,609 --> 00:48:41,950
come

00:48:36,910 --> 00:48:45,870
no support if there's no ticket I would

00:48:41,950 --> 00:48:48,100
invite you to to open the ticket say hey

00:48:45,870 --> 00:48:50,470
there was this guy on the mrs. Cohen

00:48:48,100 --> 00:48:52,690
told their Potter great concert but

00:48:50,470 --> 00:48:55,750
don't support external Williams please

00:48:52,690 --> 00:48:58,050
implement earth sure thank you thank you

00:48:55,750 --> 00:48:58,050
very much

00:49:07,440 --> 00:49:15,280
are then in plans to implement implement

00:49:10,800 --> 00:49:17,470
daemon sets kind of behavior daemon sets

00:49:15,280 --> 00:49:22,570
yeah so team sets are basically starting

00:49:17,470 --> 00:49:24,070
and contain on every agent and it's

00:49:22,570 --> 00:49:25,450
quite hard from rough fun to do so

00:49:24,070 --> 00:49:26,920
because marathon is not aware of a few

00:49:25,450 --> 00:49:29,200
cluster topology and it's not aware of

00:49:26,920 --> 00:49:33,190
it's not holding state about missus

00:49:29,200 --> 00:49:37,480
agents so but I think these kind of

00:49:33,190 --> 00:49:39,100
admin tasks or operator tasks I think

00:49:37,480 --> 00:49:40,900
been mentioned this yesterday in the

00:49:39,100 --> 00:49:43,960
keynote that missus is trying to

00:49:40,900 --> 00:49:46,060
establish a concept of reserving

00:49:43,960 --> 00:49:47,950
resources and you can directly go to

00:49:46,060 --> 00:49:50,500
missus and say hey missus I want to run

00:49:47,950 --> 00:49:53,710
those administrator tasks on those

00:49:50,500 --> 00:49:57,640
agents and maybe this is a way to to

00:49:53,710 --> 00:49:59,740
address those topics of demon sets so I

00:49:57,640 --> 00:50:02,530
know there was a github issue back in

00:49:59,740 --> 00:50:05,920
the days we use github issues and this

00:50:02,530 --> 00:50:08,200
was the most most commented github issue

00:50:05,920 --> 00:50:11,200
I think there was a 30 or 40

00:50:08,200 --> 00:50:14,140
participants in this issue so it was

00:50:11,200 --> 00:50:17,980
discussed really heavily to introduce

00:50:14,140 --> 00:50:20,800
demon sets but I don't think that that

00:50:17,980 --> 00:50:23,440
we're currently planning to to include

00:50:20,800 --> 00:50:26,830
them in the marathon code base and in

00:50:23,440 --> 00:50:29,830
the next version but maybe if you want

00:50:26,830 --> 00:50:32,920
to have this new concept of deployment

00:50:29,830 --> 00:50:35,860
thingy maybe one of the community

00:50:32,920 --> 00:50:39,520
members can implement it at Java

00:50:35,860 --> 00:50:41,800
deployment generator who will make sure

00:50:39,520 --> 00:50:44,410
that this is started on every agent so I

00:50:41,800 --> 00:50:47,440
think when we be so flexible that you

00:50:44,410 --> 00:50:50,410
can hook into random or not run them but

00:50:47,440 --> 00:50:52,230
like good Java code to to generate

00:50:50,410 --> 00:50:55,030
deployments and to be informed about

00:50:52,230 --> 00:50:58,440
certain stuff and marathon you can

00:50:55,030 --> 00:51:00,940
really customize this and maybe do some

00:50:58,440 --> 00:51:02,920
sophisticated way to get information

00:51:00,940 --> 00:51:05,760
about all missus agents and then

00:51:02,920 --> 00:51:09,580
schedule tasks to all of those to

00:51:05,760 --> 00:51:13,440
simulate this first class principle of

00:51:09,580 --> 00:51:13,440
other schedulers like daemon sets

00:51:13,830 --> 00:51:20,040
that's a great example I will note this

00:51:16,710 --> 00:51:22,620
too so we're planning to do like

00:51:20,040 --> 00:51:30,420
hackathons and stuff like this so this

00:51:22,620 --> 00:51:32,430
would be okay he said he won he already

00:51:30,420 --> 00:51:34,440
did that and on a top level I'm going to

00:51:32,430 --> 00:51:36,390
get rid of his crappy code but maybe you

00:51:34,440 --> 00:51:37,950
can do like not so really crap because

00:51:36,390 --> 00:51:43,380
they couldn't do nice and shiny code

00:51:37,950 --> 00:51:47,940
inside the marathon code base okay great

00:51:43,380 --> 00:51:51,120
thank you hey one question about health

00:51:47,940 --> 00:51:54,750
checks yes so now we have marathon

00:51:51,120 --> 00:51:59,130
health checks now we have mrs. health

00:51:54,750 --> 00:52:02,070
checks and I want to propose third type

00:51:59,130 --> 00:52:04,620
of health checks great the Ingres health

00:52:02,070 --> 00:52:06,870
checks the health checks which will be

00:52:04,620 --> 00:52:10,110
running on the site of the ingress plane

00:52:06,870 --> 00:52:13,110
I mean English plane I mean marathon

00:52:10,110 --> 00:52:16,260
will be tasks for example or traffic or

00:52:13,110 --> 00:52:18,660
something else so why they are important

00:52:16,260 --> 00:52:21,630
because basically I don't care if

00:52:18,660 --> 00:52:24,510
marathon itself can reach my tasks I

00:52:21,630 --> 00:52:28,020
don't care but I really here really care

00:52:24,510 --> 00:52:30,480
that ingress may reach my tasks and

00:52:28,020 --> 00:52:32,970
serve it to customers without issues so

00:52:30,480 --> 00:52:37,260
I think there could be a not support

00:52:32,970 --> 00:52:40,860
idea to implement a class of ingress

00:52:37,260 --> 00:52:45,150
checks and maybe some circuit breakers

00:52:40,860 --> 00:52:47,940
with it yeah just an idea that's a

00:52:45,150 --> 00:52:50,340
really good idea so in the end you want

00:52:47,940 --> 00:52:54,900
to make sure that your edge router can

00:52:50,340 --> 00:52:57,600
reach your tasks exactly if it like if

00:52:54,900 --> 00:53:00,600
you have a exposed application if you

00:52:57,600 --> 00:53:02,360
have an internally only internally

00:53:00,600 --> 00:53:04,560
accessible application you maybe not

00:53:02,360 --> 00:53:06,720
that be interested in this kind of

00:53:04,560 --> 00:53:08,220
things but you have an exposed

00:53:06,720 --> 00:53:11,040
application you're really interested in

00:53:08,220 --> 00:53:14,190
in having this kind of things so this is

00:53:11,040 --> 00:53:18,690
really valuable and I think this kind of

00:53:14,190 --> 00:53:20,970
stuff can be implemented in maybe in a

00:53:18,690 --> 00:53:23,550
meso so it may be also a marathon so it

00:53:20,970 --> 00:53:25,530
but yeah let's chat about this topic

00:53:23,550 --> 00:53:27,380
this really interested anything most

00:53:25,530 --> 00:53:29,180
users are interested in having

00:53:27,380 --> 00:53:31,759
this behavior that the task is reachable

00:53:29,180 --> 00:53:34,069
from the outside and not necessarily bye

00:53:31,759 --> 00:53:35,900
bye Murph on health track so it's kind

00:53:34,069 --> 00:53:37,910
of in between marathon misses all

00:53:35,900 --> 00:53:40,970
strikes so it's not reachable marathon

00:53:37,910 --> 00:53:43,400
it's okay it's reachable from from the

00:53:40,970 --> 00:53:45,049
missus agent it's great but maybe you

00:53:43,400 --> 00:53:47,390
want to have something in between from

00:53:45,049 --> 00:53:48,980
from eh Roda to your application yeah

00:53:47,390 --> 00:53:51,140
it's a really good suggestion and we

00:53:48,980 --> 00:53:54,740
should like write a short document

00:53:51,140 --> 00:53:58,279
describing the idea and proposing it in

00:53:54,740 --> 00:54:01,450
one in one ticket to to get these drive

00:53:58,279 --> 00:54:04,099
this further I would love to help you

00:54:01,450 --> 00:54:06,829
saying QB sure I will and I will do some

00:54:04,099 --> 00:54:13,460
examples with traffic great thank you

00:54:06,829 --> 00:54:16,160
very much thank you okay great thank you

00:54:13,460 --> 00:54:18,740
I think we're a little bit over time so

00:54:16,160 --> 00:54:20,660
I will make room for the next speaker

00:54:18,740 --> 00:54:22,700
but if you have further questions wander

00:54:20,660 --> 00:54:24,049
discuss things about your proposal or

00:54:22,700 --> 00:54:26,569
other things

00:54:24,049 --> 00:54:27,859
grab me I'm here the whole day or grab

00:54:26,569 --> 00:54:29,660
one of the other misses for your

00:54:27,859 --> 00:54:32,110
employees to talk about those topics

00:54:29,660 --> 00:54:35,379
thank you very much thank you her

00:54:32,110 --> 00:54:35,379

YouTube URL: https://www.youtube.com/watch?v=riEVCvHngZQ


