Title: Keynote: The Future of Apache Mesos and DC OS - Yrieix Garnier, Mesosphere, Inc.
Publication date: 2017-10-31
Playlist: MesosCon Europe 2017
Description: 
	Keynote: The Future of Apache Mesos and DC/OS - Yrieix Garnier, Mesosphere, Inc.

Apache Mesos and DC/OS are evolving rapidly, and the surrounding ecosystem is evolving even faster.  Yrieix, VP of Product at Mesosphere will give insight into the direction(s) it is moving both from a Mesosphere and community perspective. 

So we will dive into topics such as making Apache mesos more accessible and easier with Mesosphere DC/OS and providing choice of Container Orchestration with Kubernetes on DC/OS. This keynote will also cover Stateful Services and simplifying development with the SDK and Service Catalog and also how to take advantage of Machine Learning and Deep Learning with GPU based scheduling or Tensorflow.

About Yrieix Garnier
Yrieix Garnier is an VP of Product at Mesosphere where is his responsible for managing the product roadmap and vision working with the community, customer and partners. Prior to joining Mesosphere, he led multiple product line including Cloud Management software for Tintri, HP Software / Opsware and Mercury Interactive.
Captions: 
	00:00:00,089 --> 00:00:05,190
so good morning hey I can see

00:00:03,810 --> 00:00:10,080
everybody's awake this morning that's

00:00:05,190 --> 00:00:13,230
good so I'm a Erie ex Gagne I manage

00:00:10,080 --> 00:00:15,660
product for mesosphere and even though

00:00:13,230 --> 00:00:19,380
usually people ready got it after few

00:00:15,660 --> 00:00:22,260
seconds I have a French accent I do live

00:00:19,380 --> 00:00:25,529
in the u.s. I base in a San Francisco in

00:00:22,260 --> 00:00:28,199
the headquarter and very happy to be

00:00:25,529 --> 00:00:31,320
here with you today so yesterday was a

00:00:28,199 --> 00:00:34,230
pretty packed day and I think I really

00:00:31,320 --> 00:00:36,809
got I think during the main keynote in

00:00:34,230 --> 00:00:38,640
the morning like I think like what a lot

00:00:36,809 --> 00:00:40,980
of people do which is at some point I

00:00:38,640 --> 00:00:45,539
took my phone out and actually took a

00:00:40,980 --> 00:00:47,760
picture of the Netflix Caterina I will

00:00:45,539 --> 00:00:50,460
not try our last name like nobody try my

00:00:47,760 --> 00:00:51,989
first name so I took a picture of this

00:00:50,460 --> 00:00:54,390
because that was pretty impressive when

00:00:51,989 --> 00:00:58,109
she was putting all the dependencies she

00:00:54,390 --> 00:01:00,809
had between all the macro sizes the 380

00:00:58,109 --> 00:01:04,110
I was even says services that were built

00:01:00,809 --> 00:01:07,770
at Netflix and how they scaled that to

00:01:04,110 --> 00:01:10,439
millions of users how they have like one

00:01:07,770 --> 00:01:12,420
second type of response time monitoring

00:01:10,439 --> 00:01:14,180
of all of the service was really

00:01:12,420 --> 00:01:17,270
impressive and I was even more impressed

00:01:14,180 --> 00:01:20,189
because actually when you think about

00:01:17,270 --> 00:01:22,560
where we are into that in modern

00:01:20,189 --> 00:01:25,049
data-driven applications all the

00:01:22,560 --> 00:01:27,420
monolithic apps you know billing it one

00:01:25,049 --> 00:01:28,140
single apps is kind of gone nobody is

00:01:27,420 --> 00:01:30,360
doing this anymore

00:01:28,140 --> 00:01:33,780
and I think you see some resemblance

00:01:30,360 --> 00:01:35,700
with that slide where you see exactly

00:01:33,780 --> 00:01:37,590
the same differences that we want to

00:01:35,700 --> 00:01:40,619
highlight here which is really about hey

00:01:37,590 --> 00:01:42,750
how we get all of this together how as

00:01:40,619 --> 00:01:45,930
an organization's you have to actually

00:01:42,750 --> 00:01:47,909
manage those modern data-driven

00:01:45,930 --> 00:01:50,280
applications how do you put your

00:01:47,909 --> 00:01:52,560
continuous applications how you put your

00:01:50,280 --> 00:01:55,619
data services together and that's really

00:01:52,560 --> 00:01:59,520
I think one of the key challenges we see

00:01:55,619 --> 00:02:02,009
today around those modern cloud native

00:01:59,520 --> 00:02:05,820
application web scaling those being able

00:02:02,009 --> 00:02:08,039
to actually put all the right monitoring

00:02:05,820 --> 00:02:09,959
or the right process behind it and

00:02:08,039 --> 00:02:11,730
really evolving your infrastructure and

00:02:09,959 --> 00:02:13,010
uit to support those type of

00:02:11,730 --> 00:02:16,900
applications

00:02:13,010 --> 00:02:20,720
so when you think about that and kind of

00:02:16,900 --> 00:02:22,909
making it like very simple and really in

00:02:20,720 --> 00:02:24,920
some way dumbing down when you think

00:02:22,909 --> 00:02:28,549
about your success you have to actually

00:02:24,920 --> 00:02:30,349
get to really different type of

00:02:28,549 --> 00:02:33,530
applications and services running

00:02:30,349 --> 00:02:35,690
together one of them is the micro

00:02:33,530 --> 00:02:37,930
services or the stateless container

00:02:35,690 --> 00:02:43,430
which actually running but you do need

00:02:37,930 --> 00:02:47,750
with layers of more of big data services

00:02:43,430 --> 00:02:50,060
of actual you know analytics databases

00:02:47,750 --> 00:02:52,459
that you need to get to be able to

00:02:50,060 --> 00:02:54,109
actually sometimes stateless is great

00:02:52,459 --> 00:02:55,970
but you need to have some data in the

00:02:54,109 --> 00:02:57,890
backend you need to be able to persist

00:02:55,970 --> 00:03:00,560
some of that informations so putting

00:02:57,890 --> 00:03:02,510
those two together is actually one of

00:03:00,560 --> 00:03:05,000
the challenges not just about scaling

00:03:02,510 --> 00:03:08,329
but also making that run together and

00:03:05,000 --> 00:03:10,670
that's even more a challenge when you

00:03:08,329 --> 00:03:13,340
think about that explosion of all the

00:03:10,670 --> 00:03:15,530
different analytics engine data stores

00:03:13,340 --> 00:03:18,500
you can see like lot of names here about

00:03:15,530 --> 00:03:20,209
those apps which is coming out from the

00:03:18,500 --> 00:03:22,880
open source community from different

00:03:20,209 --> 00:03:24,590
vendors which really are growing and you

00:03:22,880 --> 00:03:27,139
see the adoption you see the value and

00:03:24,590 --> 00:03:29,870
you have to take those applications you

00:03:27,139 --> 00:03:31,160
have to unboard them you have to be able

00:03:29,870 --> 00:03:33,680
to support them because your business

00:03:31,160 --> 00:03:37,430
rely on them if you don't and you swing

00:03:33,680 --> 00:03:38,750
back at the Netflix story wine Netflix

00:03:37,430 --> 00:03:40,609
is successful because they have an

00:03:38,750 --> 00:03:42,799
amazing service because they have that

00:03:40,609 --> 00:03:44,660
service is back up by those different

00:03:42,799 --> 00:03:45,889
infrastructure and applications and you

00:03:44,660 --> 00:03:50,060
need to do the same for your own

00:03:45,889 --> 00:03:52,609
businesses so all that explosion all of

00:03:50,060 --> 00:03:55,700
those is really coming to kind of a a

00:03:52,609 --> 00:03:58,370
choice for different infrastructure you

00:03:55,700 --> 00:04:01,450
have a choice between control and some

00:03:58,370 --> 00:04:04,819
time speed so when you think about that

00:04:01,450 --> 00:04:07,370
when you do those two approaches there

00:04:04,819 --> 00:04:10,519
is to school for that one is really

00:04:07,370 --> 00:04:12,829
going and saying hey I have my own

00:04:10,519 --> 00:04:14,329
datacenter I'm actually going to be

00:04:12,829 --> 00:04:16,820
putting everything my data center

00:04:14,329 --> 00:04:19,699
I want to food control I want to know

00:04:16,820 --> 00:04:21,919
everything I want to be able to really

00:04:19,699 --> 00:04:24,950
like siloed some of those different

00:04:21,919 --> 00:04:26,050
workloads I want to own it myself it's

00:04:24,950 --> 00:04:29,289
great if you

00:04:26,050 --> 00:04:33,759
control but it's also sometime make it

00:04:29,289 --> 00:04:36,129
slower siloed not really be able to

00:04:33,759 --> 00:04:37,780
react to those new technology not be

00:04:36,129 --> 00:04:41,110
able to be able to support them and so

00:04:37,780 --> 00:04:43,900
on so there is some value and there is

00:04:41,110 --> 00:04:46,479
some I would say less more inconvenient

00:04:43,900 --> 00:04:48,819
into putting this together the second

00:04:46,479 --> 00:04:51,639
approach is what we see a lot is a I

00:04:48,819 --> 00:04:54,129
can't do it or I'm a business I need a

00:04:51,639 --> 00:04:55,900
specific service my IT doesn't provide

00:04:54,129 --> 00:04:59,770
it I'm just going to go get it from the

00:04:55,900 --> 00:05:02,710
cloud very easy I can go get the speed

00:04:59,770 --> 00:05:05,490
the agility I can go and actually just

00:05:02,710 --> 00:05:10,330
get that service from a cloud provider

00:05:05,490 --> 00:05:13,750
being AWS Azure DCP or any other cloud

00:05:10,330 --> 00:05:16,000
provider but in that case I'm kind of

00:05:13,750 --> 00:05:18,789
losing some of the control but more

00:05:16,000 --> 00:05:21,490
importantly you actually have some lock

00:05:18,789 --> 00:05:24,190
into that provider because if I use the

00:05:21,490 --> 00:05:25,870
services maybe I'm not able to migrate

00:05:24,190 --> 00:05:27,969
maybe I'm not going to have that latest

00:05:25,870 --> 00:05:31,150
and greatest which actually want to have

00:05:27,969 --> 00:05:34,449
so that locking can become kind of an

00:05:31,150 --> 00:05:37,779
issue and on top of that the cost even

00:05:34,449 --> 00:05:39,849
though it's kind of a lot of time

00:05:37,779 --> 00:05:42,069
attractive when you start to really do

00:05:39,849 --> 00:05:44,529
the cost model and compare how much is

00:05:42,069 --> 00:05:47,169
your cloud provider to how much you

00:05:44,529 --> 00:05:49,419
would do and pay owning it your own

00:05:47,169 --> 00:05:51,099
infrastructure or even just using some

00:05:49,419 --> 00:05:53,050
of the basic resources from those cloud

00:05:51,099 --> 00:05:56,469
providers you can see some difference

00:05:53,050 --> 00:05:59,379
within cost so out of those two

00:05:56,469 --> 00:06:02,229
approaches the kind of approach that we

00:05:59,379 --> 00:06:04,060
want to bring is a third one is a

00:06:02,229 --> 00:06:07,690
different approach that is really the

00:06:04,060 --> 00:06:10,719
measure the vision of mezzos which is I

00:06:07,690 --> 00:06:13,690
want to bring together the best of boss

00:06:10,719 --> 00:06:16,719
I want to be able to go and leveraging

00:06:13,690 --> 00:06:19,210
measures as that resource management

00:06:16,719 --> 00:06:22,090
being able to run all the different

00:06:19,210 --> 00:06:24,819
types of frameworks being continual

00:06:22,090 --> 00:06:27,449
castrations being data services I want

00:06:24,819 --> 00:06:30,250
to run those so I can actually have my

00:06:27,449 --> 00:06:33,129
applications again those macro services

00:06:30,250 --> 00:06:35,469
those other services running on top of

00:06:33,129 --> 00:06:37,630
it so that really that approach where

00:06:35,469 --> 00:06:39,260
you think about all the different agent

00:06:37,630 --> 00:06:41,270
which is running which could be

00:06:39,260 --> 00:06:43,970
running on any type of infrastructure

00:06:41,270 --> 00:06:47,450
and that's what we really want to bring

00:06:43,970 --> 00:06:49,910
with leveraging the Apache mezzos but

00:06:47,450 --> 00:06:54,500
also what we want to bring when we think

00:06:49,910 --> 00:06:59,330
about DCOs and some of you know heard

00:06:54,500 --> 00:07:02,390
about the COS it's actually a open

00:06:59,330 --> 00:07:04,760
source solutions that we can put

00:07:02,390 --> 00:07:07,040
together which is really taking at the

00:07:04,760 --> 00:07:10,490
heart the resource orchestration of

00:07:07,040 --> 00:07:12,950
mezzos and being able to expand on top

00:07:10,490 --> 00:07:15,590
of this what we did is put together all

00:07:12,950 --> 00:07:17,810
the different services required to

00:07:15,590 --> 00:07:19,490
address that vision not only on the

00:07:17,810 --> 00:07:21,940
resource orchestration but the whole

00:07:19,490 --> 00:07:26,510
vision about having a cloud like

00:07:21,940 --> 00:07:31,130
services and we've packaged it together

00:07:26,510 --> 00:07:34,850
on the with mesosphere DCOs so it's

00:07:31,130 --> 00:07:38,030
really being able to take and add value

00:07:34,850 --> 00:07:40,100
like service discovery load balancing

00:07:38,030 --> 00:07:42,650
secret management all the different

00:07:40,100 --> 00:07:45,080
components you required in a much easier

00:07:42,650 --> 00:07:47,930
way because it's packaged together it's

00:07:45,080 --> 00:07:51,110
easier to install easier to deploy and

00:07:47,930 --> 00:07:53,020
again this is what's running on all the

00:07:51,110 --> 00:07:57,260
different type of infrastructure being

00:07:53,020 --> 00:07:57,800
physical cloud provider virtual whatever

00:07:57,260 --> 00:07:59,510
you want

00:07:57,800 --> 00:08:02,090
being your infrastructure and that's

00:07:59,510 --> 00:08:06,170
really what we want to bring in that

00:08:02,090 --> 00:08:11,210
type of packaging which is this us so

00:08:06,170 --> 00:08:14,450
that's what we have today and one of the

00:08:11,210 --> 00:08:17,180
key differentiations is actually the way

00:08:14,450 --> 00:08:20,810
we've built this if I go back to that

00:08:17,180 --> 00:08:23,780
more synthetic view about the COS and

00:08:20,810 --> 00:08:26,060
about that vision today the big

00:08:23,780 --> 00:08:28,550
differentiations it's actually having

00:08:26,060 --> 00:08:29,930
what we call the application level or

00:08:28,550 --> 00:08:32,630
some people call it the two-level

00:08:29,930 --> 00:08:34,970
scheduling it's really about how we want

00:08:32,630 --> 00:08:37,970
to differentiate what is that resource

00:08:34,970 --> 00:08:39,260
scheduler which is mezzos and how we

00:08:37,970 --> 00:08:41,570
want to differentiate this with the

00:08:39,260 --> 00:08:43,550
different workloads running on top of it

00:08:41,570 --> 00:08:45,590
I want to make sure that that container

00:08:43,550 --> 00:08:47,630
orchestrations that there's a service or

00:08:45,590 --> 00:08:50,150
concessions will be able to run in

00:08:47,630 --> 00:08:52,130
parallel because again this is some of

00:08:50,150 --> 00:08:53,100
the value that you have to deliver you

00:08:52,130 --> 00:08:55,769
need to be able to put

00:08:53,100 --> 00:08:58,410
services together and you still want to

00:08:55,769 --> 00:09:01,500
optimize the resources which are running

00:08:58,410 --> 00:09:03,480
underneath so that funder the key value

00:09:01,500 --> 00:09:08,910
and when the key differentiations that

00:09:03,480 --> 00:09:11,940
we bring with with the COS and actually

00:09:08,910 --> 00:09:15,209
we'll see that most of you are already

00:09:11,940 --> 00:09:17,190
using it if you think about and we

00:09:15,209 --> 00:09:19,709
talked about that yesterday does Mac

00:09:17,190 --> 00:09:23,339
stack the egg stack all of those

00:09:19,709 --> 00:09:25,350
different I was going to say solutions

00:09:23,339 --> 00:09:27,630
that we put together because you can't

00:09:25,350 --> 00:09:29,579
just run spark on the side you need to

00:09:27,630 --> 00:09:31,649
have like some kefka you need to have

00:09:29,579 --> 00:09:33,029
Cassandra you need to have missiles and

00:09:31,649 --> 00:09:35,970
so on when you put all of this together

00:09:33,029 --> 00:09:39,029
it's a much complex system and we see

00:09:35,970 --> 00:09:42,660
that running today on more than 50% of

00:09:39,029 --> 00:09:44,699
all the different DCOs clusters so it's

00:09:42,660 --> 00:09:47,670
already that vision is really the value

00:09:44,699 --> 00:09:51,180
from mezzos that we bring here and being

00:09:47,670 --> 00:09:53,040
able to make that available to you the

00:09:51,180 --> 00:09:55,440
second one is actually something which

00:09:53,040 --> 00:09:58,170
is a bit more subtle I would say for

00:09:55,440 --> 00:10:01,019
some of you which is really what we've

00:09:58,170 --> 00:10:04,259
added on top of this it's something that

00:10:01,019 --> 00:10:06,300
we've introduced maybe a year a bit more

00:10:04,259 --> 00:10:09,870
than that actually which is called the

00:10:06,300 --> 00:10:12,870
SDK DCOs Commons is like different names

00:10:09,870 --> 00:10:14,639
but it's really about hey when I want to

00:10:12,870 --> 00:10:16,740
build those different frameworks when I

00:10:14,639 --> 00:10:17,370
want to build those orchestrations how

00:10:16,740 --> 00:10:19,350
do I do it

00:10:17,370 --> 00:10:21,720
and I actually go and build it

00:10:19,350 --> 00:10:24,240
themselves do I need to put a lot of

00:10:21,720 --> 00:10:26,339
line of codes how do I actually do build

00:10:24,240 --> 00:10:29,370
and maintain the different framework the

00:10:26,339 --> 00:10:31,829
SDK is actually what we brought into the

00:10:29,370 --> 00:10:34,199
picture to make sure that you can build

00:10:31,829 --> 00:10:37,110
all those frameworks in a very rapid

00:10:34,199 --> 00:10:39,899
pace but also it's all the different

00:10:37,110 --> 00:10:42,839
management what we call the plans which

00:10:39,899 --> 00:10:45,899
actually allow you to just define how

00:10:42,839 --> 00:10:48,990
not only you can run that framework on

00:10:45,899 --> 00:10:51,509
top of mezzos and within the COS but

00:10:48,990 --> 00:10:53,579
also how you're going to manage it how

00:10:51,509 --> 00:10:56,339
you could maintain is the failure of a

00:10:53,579 --> 00:10:58,529
node how you want to restart or not that

00:10:56,339 --> 00:11:00,990
specific node how you want to start the

00:10:58,529 --> 00:11:03,269
service the tasks all of those is what

00:11:00,990 --> 00:11:05,279
is actually built within the SDK that

00:11:03,269 --> 00:11:06,780
the different framework can take

00:11:05,279 --> 00:11:09,570
advantage of

00:11:06,780 --> 00:11:12,270
it allows you to build faster allows us

00:11:09,570 --> 00:11:14,370
to build those remic faster but also

00:11:12,270 --> 00:11:18,500
when you want to manage them you

00:11:14,370 --> 00:11:21,060
actually manage all of them from always

00:11:18,500 --> 00:11:22,560
single interface allowing you to have

00:11:21,060 --> 00:11:25,380
the same way of managing you want to

00:11:22,560 --> 00:11:27,990
update you want to restart you want to

00:11:25,380 --> 00:11:30,000
run the new services that will always be

00:11:27,990 --> 00:11:32,730
the same consistent way to actually do

00:11:30,000 --> 00:11:34,440
those different management disregarding

00:11:32,730 --> 00:11:37,140
of the technology that you want to use

00:11:34,440 --> 00:11:42,120
and that's really one of the key value

00:11:37,140 --> 00:11:45,240
that that SDK is actually bringing it's

00:11:42,120 --> 00:11:47,190
that simple that we actually introduced

00:11:45,240 --> 00:11:50,370
a Service Catalog

00:11:47,190 --> 00:11:52,380
in in DCOs which allows you to have all

00:11:50,370 --> 00:11:55,380
of those service available it's a

00:11:52,380 --> 00:11:58,650
one-click install I can go and pick one

00:11:55,380 --> 00:12:01,320
of those here like Kafka ElastiCache the

00:11:58,650 --> 00:12:04,860
effects and install them in just one

00:12:01,320 --> 00:12:06,990
click that's something which we have in

00:12:04,860 --> 00:12:09,240
the z/os and we even have the notion of

00:12:06,990 --> 00:12:11,670
certified framework we have like a

00:12:09,240 --> 00:12:13,560
higher level of certification we'll make

00:12:11,670 --> 00:12:15,840
sure that they actually run within each

00:12:13,560 --> 00:12:21,210
other and they run properly on top of

00:12:15,840 --> 00:12:24,420
the COS so that's really the two level

00:12:21,210 --> 00:12:26,490
or the up level of scheduling the SDK

00:12:24,420 --> 00:12:28,290
which make that differentiation and

00:12:26,490 --> 00:12:32,490
allow us to actually bring lot of those

00:12:28,290 --> 00:12:35,160
framework if you remember few months few

00:12:32,490 --> 00:12:37,470
weeks ago is gonna say at mrs. Kahn in

00:12:35,160 --> 00:12:41,400
North America we actually introduced

00:12:37,470 --> 00:12:44,280
kubernetes on top of DCOs and for us

00:12:41,400 --> 00:12:48,090
kubernetes on top of the COS is just one

00:12:44,280 --> 00:12:50,910
more framework we use the SDK we built

00:12:48,090 --> 00:12:54,090
on top of the SDK and it just allow us

00:12:50,910 --> 00:12:56,040
to just now give you a choice for the

00:12:54,090 --> 00:13:00,020
content orchestration do you want to use

00:12:56,040 --> 00:13:02,820
marathon do you want to use kubernetes

00:13:00,020 --> 00:13:04,320
yesterday you heard even Netflix have

00:13:02,820 --> 00:13:06,450
like Jarvis they have different

00:13:04,320 --> 00:13:08,670
framework this is just a choice that you

00:13:06,450 --> 00:13:13,020
have now and we've been able to build

00:13:08,670 --> 00:13:15,480
this on top of the SDK and what we did

00:13:13,020 --> 00:13:17,910
is what we really strongly believe is

00:13:15,480 --> 00:13:19,900
the best way to run kubernetes out of G

00:13:17,910 --> 00:13:22,870
key because you have

00:13:19,900 --> 00:13:25,870
the operations it's a one-click install

00:13:22,870 --> 00:13:28,750
of kubernetes its allow you to by

00:13:25,870 --> 00:13:31,210
default be high very high available it

00:13:28,750 --> 00:13:33,520
allows you to be actually secured you

00:13:31,210 --> 00:13:35,380
have the monitoring the metrics you can

00:13:33,520 --> 00:13:38,470
have integration with the load balancing

00:13:35,380 --> 00:13:42,040
the ingress and so on which is all done

00:13:38,470 --> 00:13:45,670
in that one click deploy it's also 100%

00:13:42,040 --> 00:13:48,130
pure kubernetes it's not like hey we

00:13:45,670 --> 00:13:52,150
change it have our specific API and so

00:13:48,130 --> 00:13:54,850
on this is pure kubernetes coming from

00:13:52,150 --> 00:13:57,580
upstream we have it available and you

00:13:54,850 --> 00:14:00,250
can just leverage it we didn't change

00:13:57,580 --> 00:14:02,230
anything here so very easy for you to

00:14:00,250 --> 00:14:04,810
get your developers if they use it you

00:14:02,230 --> 00:14:10,090
can deploy run it for them in production

00:14:04,810 --> 00:14:12,610
and finally it's also again that value

00:14:10,090 --> 00:14:15,880
of being able to put containers data

00:14:12,610 --> 00:14:17,680
services United unified running on the

00:14:15,880 --> 00:14:20,440
same platform leveraging the resources

00:14:17,680 --> 00:14:24,520
to their maximum by making sure that you

00:14:20,440 --> 00:14:28,750
have those running together on the same

00:14:24,520 --> 00:14:30,370
type of resources and that's really one

00:14:28,750 --> 00:14:33,250
of the value that is really key here

00:14:30,370 --> 00:14:36,070
we're working that version of kubernetes

00:14:33,250 --> 00:14:38,830
actually is still better for now we're

00:14:36,070 --> 00:14:41,500
working towards being able to GA that in

00:14:38,830 --> 00:14:44,250
the next few months and also being able

00:14:41,500 --> 00:14:46,360
in the future to make it run across

00:14:44,250 --> 00:14:47,860
multiple versions of communities

00:14:46,360 --> 00:14:50,080
multiple cluster of kubernetes so it's

00:14:47,860 --> 00:14:54,790
even more value that we can bring on top

00:14:50,080 --> 00:14:57,760
of kubernetes do that was announced like

00:14:54,790 --> 00:15:00,670
five or six weeks ago so today actually

00:14:57,760 --> 00:15:03,430
what we did yesterday we actually did it

00:15:00,670 --> 00:15:05,520
again we actually serve kubernetes we

00:15:03,430 --> 00:15:08,140
went to the next kind of very hot

00:15:05,520 --> 00:15:10,540
project that we can see with getting lot

00:15:08,140 --> 00:15:12,240
of stars which is now I'm very happy to

00:15:10,540 --> 00:15:16,030
introduce that now we have tensorflow

00:15:12,240 --> 00:15:19,090
running on this cos this is a pretty big

00:15:16,030 --> 00:15:21,600
achievement Yogi's applauding so if you

00:15:19,090 --> 00:15:21,600
want you can

00:15:22,050 --> 00:15:31,990
and that same thing we built it on top

00:15:27,160 --> 00:15:33,910
of the SDK it's in some way was easy but

00:15:31,990 --> 00:15:35,470
we had very fast time to market because

00:15:33,910 --> 00:15:38,860
we have that and we be able to deliver

00:15:35,470 --> 00:15:40,390
it on top of the COS what it means and

00:15:38,860 --> 00:15:44,140
for people who don't know what

00:15:40,390 --> 00:15:45,820
tensorflow it's that open-source

00:15:44,140 --> 00:15:49,480
software library for machine

00:15:45,820 --> 00:15:51,910
intelligence it's not even my wording is

00:15:49,480 --> 00:15:53,890
like actually from ten Sephirot org and

00:15:51,910 --> 00:15:55,540
you'll hear more from that from a kevin

00:15:53,890 --> 00:15:57,520
later on today because it's going to do

00:15:55,540 --> 00:15:59,770
a lot of deep dive but you can actually

00:15:57,520 --> 00:16:02,170
take that so flow what does it mean is

00:15:59,770 --> 00:16:04,510
you know I go I design my different

00:16:02,170 --> 00:16:07,420
models I use a primitive from tensorflow

00:16:04,510 --> 00:16:09,940
then I write my code and that code I

00:16:07,420 --> 00:16:12,280
kind of optimize it most of the time to

00:16:09,940 --> 00:16:14,680
run on my single node on my laptop and

00:16:12,280 --> 00:16:17,770
then I train the code I start to

00:16:14,680 --> 00:16:20,530
continue like running this and I do what

00:16:17,770 --> 00:16:22,570
we call trend that model so it's model

00:16:20,530 --> 00:16:24,520
is more and more intelligence machine

00:16:22,570 --> 00:16:26,200
learning deep learning it's really

00:16:24,520 --> 00:16:29,260
learning throughout those different runs

00:16:26,200 --> 00:16:31,660
fully straightforward to do on a single

00:16:29,260 --> 00:16:33,310
server now when you go to a more

00:16:31,660 --> 00:16:36,070
distributed tensorflow

00:16:33,310 --> 00:16:39,670
you go in a very different space to code

00:16:36,070 --> 00:16:41,320
you wrote for your single node you have

00:16:39,670 --> 00:16:43,510
to write it now for distributed node

00:16:41,320 --> 00:16:45,970
which means I need to take tensorflow

00:16:43,510 --> 00:16:49,000
push it to all my servers make sure it's

00:16:45,970 --> 00:16:51,580
available then that code I actually have

00:16:49,000 --> 00:16:53,860
to do the cluster specifications put the

00:16:51,580 --> 00:16:56,880
different IPS of the servers I have

00:16:53,860 --> 00:17:00,940
actually the worker the parameter

00:16:56,880 --> 00:17:04,150
servers I have the scorer all of those

00:17:00,940 --> 00:17:05,530
have to be statically parameters in

00:17:04,150 --> 00:17:06,400
terms of you because that's how it ends

00:17:05,530 --> 00:17:09,010
of your work today

00:17:06,400 --> 00:17:13,120
you have still to deploy the code push

00:17:09,010 --> 00:17:14,980
it and make sure it's still training a

00:17:13,120 --> 00:17:17,140
different code doing this in the

00:17:14,980 --> 00:17:20,410
distributed mode is very challenging

00:17:17,140 --> 00:17:22,420
it's very hard so what we do we again

00:17:20,410 --> 00:17:24,970
remove all of that we took the same

00:17:22,420 --> 00:17:27,579
approach we have the SDK we can include

00:17:24,970 --> 00:17:29,770
all of this within that framework that

00:17:27,579 --> 00:17:30,640
we've built for tensorflow which means

00:17:29,770 --> 00:17:32,470
if there's a failure

00:17:30,640 --> 00:17:34,809
will we start the node if you need to

00:17:32,470 --> 00:17:37,779
push the code to those different

00:17:34,809 --> 00:17:40,809
servers will do it for you if you want

00:17:37,779 --> 00:17:42,730
to actually not statically violated the

00:17:40,809 --> 00:17:45,039
different IPS of where the code needs to

00:17:42,730 --> 00:17:47,559
run we're gonna do it dynamically this

00:17:45,039 --> 00:17:50,740
is exactly the value we bring and there

00:17:47,559 --> 00:17:52,990
is like a very unique way to do this and

00:17:50,740 --> 00:17:55,570
today it's very hard to do it at the

00:17:52,990 --> 00:17:57,279
very large scale and that's really what

00:17:55,570 --> 00:17:59,350
will bring with the distributed tensor

00:17:57,279 --> 00:18:01,419
flow so if you're interested we have

00:17:59,350 --> 00:18:02,919
couple of session actually today where

00:18:01,419 --> 00:18:06,039
we're going to go we're more in depth

00:18:02,919 --> 00:18:08,289
into this and show you how it works what

00:18:06,039 --> 00:18:12,129
we did where we are today this is still

00:18:08,289 --> 00:18:15,490
a beta version of tensor flow and how

00:18:12,129 --> 00:18:16,480
we're going to be able to do this to RJ

00:18:15,490 --> 00:18:19,570
and what we'll be building

00:18:16,480 --> 00:18:22,509
even more in the future behind that one

00:18:19,570 --> 00:18:24,999
of the key value and why we've been able

00:18:22,509 --> 00:18:26,950
to do it is also because when we think

00:18:24,999 --> 00:18:29,230
about machine learning a lot of time you

00:18:26,950 --> 00:18:34,779
sing about GPUs and this is something

00:18:29,230 --> 00:18:36,639
we've enabled in mezzos in this cos few

00:18:34,779 --> 00:18:39,340
releases ago so you know it's always

00:18:36,639 --> 00:18:41,379
that vision of hey how we can put some

00:18:39,340 --> 00:18:44,289
of the primitives making sure we have

00:18:41,379 --> 00:18:46,929
the base available and then we build on

00:18:44,289 --> 00:18:50,289
top of it and that's really what we did

00:18:46,929 --> 00:18:53,769
here with tensor flow and also with

00:18:50,289 --> 00:18:56,940
kubernetes before so that's really where

00:18:53,769 --> 00:19:02,080
we are I also wanna kind of go through

00:18:56,940 --> 00:19:04,830
what's next mainly around D cos what are

00:19:02,080 --> 00:19:07,570
we doing after those different releases

00:19:04,830 --> 00:19:09,279
what we have and this is one of the key

00:19:07,570 --> 00:19:11,169
differentiations we're actually

00:19:09,279 --> 00:19:13,059
continuing investing in those data

00:19:11,169 --> 00:19:15,820
services this is something really key

00:19:13,059 --> 00:19:18,460
for us we see again a lot of you using

00:19:15,820 --> 00:19:20,080
those frameworks and that's where we're

00:19:18,460 --> 00:19:22,419
going to continue and dancing them

00:19:20,080 --> 00:19:24,999
bringing new frameworks so we're talking

00:19:22,419 --> 00:19:27,009
about tensorflow there's an x net the

00:19:24,999 --> 00:19:29,409
result of order from walk out there that

00:19:27,009 --> 00:19:32,490
we also want to bring to you so you have

00:19:29,409 --> 00:19:35,429
that simplicity to redeploy it we also

00:19:32,490 --> 00:19:39,070
going to work on what we call the DCOs

00:19:35,429 --> 00:19:41,470
storage services which is a better way

00:19:39,070 --> 00:19:43,600
for us to actually manage all the

00:19:41,470 --> 00:19:46,840
different volumes and bring that within

00:19:43,600 --> 00:19:48,700
this us as a like first-class type of

00:19:46,840 --> 00:19:51,609
cities and in DC OS

00:19:48,700 --> 00:19:53,379
we're gonna work and actually quite a

00:19:51,609 --> 00:19:57,179
lot around what we could the cluster

00:19:53,379 --> 00:19:59,950
operations backup upgrade install

00:19:57,179 --> 00:20:02,080
restore when you do your backup we're

00:19:59,950 --> 00:20:05,529
bringing also the notion of full domain

00:20:02,080 --> 00:20:08,049
Alva BD availability zone to the CE OS

00:20:05,529 --> 00:20:10,269
so that's really key not just because

00:20:08,049 --> 00:20:11,950
it's a allow you to place the different

00:20:10,269 --> 00:20:13,509
workloads but because that's the

00:20:11,950 --> 00:20:16,269
foundations we're building towards

00:20:13,509 --> 00:20:19,749
having multi-tenancy in the future and

00:20:16,269 --> 00:20:21,460
also having a hybrid cloud solution when

00:20:19,749 --> 00:20:23,919
you'll be able to actually burst some of

00:20:21,460 --> 00:20:26,259
the workloads to different arabic is on

00:20:23,919 --> 00:20:28,299
or if you're using for example cassandra

00:20:26,259 --> 00:20:30,279
you'd be able to define specific racks

00:20:28,299 --> 00:20:33,039
when you want to run your different

00:20:30,279 --> 00:20:37,059
cassandra nodes so that's what we

00:20:33,039 --> 00:20:40,239
actually working on right now on on this

00:20:37,059 --> 00:20:42,129
us and i did forget the private catalog

00:20:40,239 --> 00:20:44,129
which is something we have a lot of

00:20:42,129 --> 00:20:46,509
requests when you think about all those

00:20:44,129 --> 00:20:48,609
different frameworks that we have out

00:20:46,509 --> 00:20:51,070
there available through the service

00:20:48,609 --> 00:20:54,159
catalog which used to be called universe

00:20:51,070 --> 00:20:56,619
for the one we we know about that before

00:20:54,159 --> 00:20:58,929
and it doesn't really work into an

00:20:56,619 --> 00:21:01,419
air-gap solution and that actually is

00:20:58,929 --> 00:21:04,299
something we're going to fix or enhance

00:21:01,419 --> 00:21:06,580
more than fix in in the next release of

00:21:04,299 --> 00:21:08,909
this us so you have actually all that

00:21:06,580 --> 00:21:12,429
value and benefit in your own

00:21:08,909 --> 00:21:15,340
non-connected type of environment so all

00:21:12,429 --> 00:21:19,629
of this is really what we're bringing

00:21:15,340 --> 00:21:22,559
the key thing behind that is how we

00:21:19,629 --> 00:21:26,470
actually realize the vision of

00:21:22,559 --> 00:21:29,049
mesosphere the vision of actually DCOs

00:21:26,470 --> 00:21:31,179
which is based on actually metals and

00:21:29,049 --> 00:21:35,440
that vision is really clear it's about

00:21:31,179 --> 00:21:38,950
how can we provide a public cloud like

00:21:35,440 --> 00:21:42,279
services just like you get from a cloud

00:21:38,950 --> 00:21:44,169
provider but from an open partner

00:21:42,279 --> 00:21:46,960
ecosystem all of those different

00:21:44,169 --> 00:21:49,299
frameworks our open source D cos is open

00:21:46,960 --> 00:21:51,669
source measures of course is an open

00:21:49,299 --> 00:21:54,039
source Apache foundations and we want to

00:21:51,669 --> 00:21:56,679
run this and deliver it on any

00:21:54,039 --> 00:21:59,289
infrastructure so you don't have to

00:21:56,679 --> 00:22:01,299
choose you can get control we can get

00:21:59,289 --> 00:22:02,260
speed you can get all the value that

00:22:01,299 --> 00:22:03,940
you're expecting

00:22:02,260 --> 00:22:08,260
and that you actually want to be able to

00:22:03,940 --> 00:22:10,390
deliver your business thank you if you

00:22:08,260 --> 00:22:12,630
have any questions you have my handler

00:22:10,390 --> 00:22:12,630

YouTube URL: https://www.youtube.com/watch?v=PonwcUOAW5M


