Title: Spark Over a Mesos Secured Productive Environment - Jorge Lopez-Malla & Marcos Peñate, Stratio
Publication date: 2017-10-27
Playlist: MesosCon Europe 2017
Description: 
	Spark Over a Mesos Secured Productive Environment - Jorge Lopez-Malla & Marcos Peñate, Stratio

Big Data is a reality nowadays on companies, and because of this new reality they have moved from using Big Data in proof of concept projects to use it at the core of the companies itself. This change along with Data Science growth and the power of business intelligence tools has required an effort in our solutions to provide a secured and isolated environments which protects the companies from malicious users. Are we prepared for the challenge?

From Stratio we have modified the behavior of Apache Spark over Apache Mesos to provide a new layer of isolation to the actors that are involved on a Spark workflow by using a Software Defined Networks solutions (SDN) and by changing the spark core network layer. We have also added a smart way to handle the secrets without the interaction of the user with the secrets of the platform adding some functionality to Apache Spark security module.

About Jorge Lopez-Malla
Jorge has been involved in the inception and implementation of projects related to several fields such as digital media, telcos, banks & insurance companies. He is in charge of Stratio’s Big Data training, having been one of the first engineers to become Spark certified. Previous speaking experience: How to make your Spark jobs fly, Spark Hand's on Mistakes that everyone does in Big Data Projects(Codemotion), How to transform data into money using Big Data Technologies (Apache Big Data Conf Europe) and Kerberizing Spark (Spark Summit East).

About Marcos Peñate
Marcos is QA Engineer at Stratio focused on Big Data solutions. He has been involved into big data projects making risk analysis, performance testing and defining Stratio Platform architecture. He is also passionate about astrophysics, a compulsive #SciFi consumer and enjoys Dockerizing everything. Connect with him on twitter @marcosmi5.
Captions: 
	00:00:00,030 --> 00:00:10,849
hello welcome everyone to to our talk

00:00:03,659 --> 00:00:13,200
we're sorry we we will talk about

00:00:10,849 --> 00:00:15,900
something really interesting I think in

00:00:13,200 --> 00:00:18,539
every kind of product that is putting

00:00:15,900 --> 00:00:21,000
something in production but in our in

00:00:18,539 --> 00:00:22,170
our experience when we put in something

00:00:21,000 --> 00:00:25,350
in production and using Big Data

00:00:22,170 --> 00:00:28,080
technologies the most tricky part was

00:00:25,350 --> 00:00:29,640
putting in a security might of it why

00:00:28,080 --> 00:00:32,969
because all of these Big Data

00:00:29,640 --> 00:00:35,640
technologies are in thinking for for

00:00:32,969 --> 00:00:39,000
security purpose they accomplished but

00:00:35,640 --> 00:00:42,390
not thinking about it and put this all

00:00:39,000 --> 00:00:45,600
all of these together is kind of kind of

00:00:42,390 --> 00:00:48,989
hard so this will be the data that we

00:00:45,600 --> 00:00:52,649
will follow for these for this

00:00:48,989 --> 00:00:55,649
presentation we begin with a little

00:00:52,649 --> 00:00:58,350
brief presentation about ourselves and

00:00:55,649 --> 00:01:02,010
our company and more important is no

00:00:58,350 --> 00:01:03,960
product later Marcus will explain the

00:01:02,010 --> 00:01:06,810
particular use case that we are going to

00:01:03,960 --> 00:01:08,369
put in production and then I start to

00:01:06,810 --> 00:01:12,630
talk with the first use case that we

00:01:08,369 --> 00:01:16,490
have to to accomplish that is the fusion

00:01:12,630 --> 00:01:21,509
of spark camera semesters later we call

00:01:16,490 --> 00:01:24,090
we have to to tell how can we manage the

00:01:21,509 --> 00:01:26,220
setting of all the secret of the of the

00:01:24,090 --> 00:01:29,400
platform or we called in a strategy of

00:01:26,220 --> 00:01:32,670
dynamic authentication later Marcus will

00:01:29,400 --> 00:01:36,240
explain another kind of of sustainable

00:01:32,670 --> 00:01:40,200
tourism that is mutual TLS and very

00:01:36,240 --> 00:01:42,659
tricky data store that that used is TLS

00:01:40,200 --> 00:01:45,479
that is good that will be progress and I

00:01:42,659 --> 00:01:48,000
will indeed explained in the last of our

00:01:45,479 --> 00:01:51,390
layer of security layer that is the

00:01:48,000 --> 00:01:53,549
network isolation and if we all goes

00:01:51,390 --> 00:01:57,060
well we want to show you a live demo

00:01:53,549 --> 00:01:59,310
cross fingers please and we have time we

00:01:57,060 --> 00:02:01,799
will answer a lot for your question so

00:01:59,310 --> 00:02:05,850
let me let me begin with the

00:02:01,799 --> 00:02:07,620
presentation my name is horrible Maya I

00:02:05,850 --> 00:02:09,420
have been in the

00:02:07,620 --> 00:02:13,620
in the computer and the software

00:02:09,420 --> 00:02:16,890
development a wall science I think eight

00:02:13,620 --> 00:02:19,590
nine years ago and more vocally in the

00:02:16,890 --> 00:02:22,020
in the big data walls and the last six

00:02:19,590 --> 00:02:24,840
years as you can see for my skills my

00:02:22,020 --> 00:02:26,430
primary skill is a spark I have been

00:02:24,840 --> 00:02:29,460
involved in the in the sparked

00:02:26,430 --> 00:02:33,030
developments as lies the last five years

00:02:29,460 --> 00:02:35,970
and sign I go I enter in a strategy of

00:02:33,030 --> 00:02:39,150
three years ago I started working with

00:02:35,970 --> 00:02:43,410
the spark over over message and I did

00:02:39,150 --> 00:02:43,890
Marco Santos itself hey guys thank you

00:02:43,410 --> 00:02:46,380
for coming

00:02:43,890 --> 00:02:48,840
my name is Marcus as you can see I'm

00:02:46,380 --> 00:02:52,410
younger than horses oh well that's

00:02:48,840 --> 00:02:55,790
pretty obvious and I've been working in

00:02:52,410 --> 00:02:58,740
this wall for five years and my main

00:02:55,790 --> 00:03:00,900
skills are tooling I like doctor I like

00:02:58,740 --> 00:03:03,360
background I grab everything that let me

00:03:00,900 --> 00:03:06,600
hug something and testing framework

00:03:03,360 --> 00:03:09,840
which is the last point and well since

00:03:06,600 --> 00:03:13,590
last year I've been working a lot with

00:03:09,840 --> 00:03:16,340
DCOs Collins Park I'm a spark emitter so

00:03:13,590 --> 00:03:19,440
well I like to work with these guys and

00:03:16,340 --> 00:03:24,470
I'm more in the QA side testing

00:03:19,440 --> 00:03:30,870
performance and so on so so after the

00:03:24,470 --> 00:03:31,320
presentation of Marcos I introduce your

00:03:30,870 --> 00:03:34,860
company

00:03:31,320 --> 00:03:38,540
we was Ward forest radio is a startup

00:03:34,860 --> 00:03:41,310
that is bases in Spain in Madrid and

00:03:38,540 --> 00:03:43,320
purpose of strategy is a company's

00:03:41,310 --> 00:03:45,690
business on the journey through the

00:03:43,320 --> 00:03:49,380
digital they completely a transformation

00:03:45,690 --> 00:03:53,370
hunk we accomplish all of this using or

00:03:49,380 --> 00:03:55,440
amazing product that is right here that

00:03:53,370 --> 00:03:57,600
as you can see or if you don't see I

00:03:55,440 --> 00:04:01,709
will put a point eight of you with a

00:03:57,600 --> 00:04:04,100
laser that is basis mainly in DCOs the

00:04:01,709 --> 00:04:07,260
data centric operated system powered by

00:04:04,100 --> 00:04:10,410
missiles that all of you will know and

00:04:07,260 --> 00:04:12,200
if not scare the miss of people that is

00:04:10,410 --> 00:04:15,290
outside

00:04:12,200 --> 00:04:20,930
and as you can see for all the always

00:04:15,290 --> 00:04:23,330
part Lobos Sparky sold is the sorry is

00:04:20,930 --> 00:04:26,240
our main processing distributeit

00:04:23,330 --> 00:04:28,460
enjoying and all of this application or

00:04:26,240 --> 00:04:30,860
whatever the Whitman's on inside of that

00:04:28,460 --> 00:04:33,710
phone is using docker containers and

00:04:30,860 --> 00:04:37,220
last but not least we have a very

00:04:33,710 --> 00:04:40,040
complex security layer that is called a

00:04:37,220 --> 00:04:42,680
static effect that is is the main or

00:04:40,040 --> 00:04:46,990
main point of factors in inner platform

00:04:42,680 --> 00:04:52,450
so Marcus will explain the the use case

00:04:46,990 --> 00:04:54,860
ok so let's talk about our use case well

00:04:52,450 --> 00:04:57,560
to start with something let's say what's

00:04:54,860 --> 00:05:01,120
DCOs ok DCOs is an open source

00:04:57,560 --> 00:05:04,700
distributed operating system is based on

00:05:01,120 --> 00:05:07,639
missiles kernel and it's really really

00:05:04,700 --> 00:05:11,450
useful for other things and the things

00:05:07,639 --> 00:05:13,370
that make it powerful as hell it's like

00:05:11,450 --> 00:05:15,410
you have a network layer which is really

00:05:13,370 --> 00:05:17,570
really really good a service discovery

00:05:15,410 --> 00:05:21,110
and resource management you can deploy

00:05:17,570 --> 00:05:26,150
it containers inside and is also I could

00:05:21,110 --> 00:05:29,630
think nobody's this is a demanded DCOs

00:05:26,150 --> 00:05:34,280
architecture i want to spin it it's in

00:05:29,630 --> 00:05:36,140
the VCOs documentation and well let's

00:05:34,280 --> 00:05:38,900
talk about our preconditions we have a

00:05:36,140 --> 00:05:42,169
important customer that needs everything

00:05:38,900 --> 00:05:45,080
really release acute ok and the things

00:05:42,169 --> 00:05:47,870
that they ask it for are mainly okay we

00:05:45,080 --> 00:05:50,030
need user profile in good user profile

00:05:47,870 --> 00:05:51,860
in in order to avoid that the scientists

00:05:50,030 --> 00:05:55,280
at these things that they don't need to

00:05:51,860 --> 00:05:58,610
see or whatever people want to see this

00:05:55,280 --> 00:06:00,860
check that they are able to do it the

00:05:58,610 --> 00:06:03,410
access or to these resources must be

00:06:00,860 --> 00:06:06,260
done using security connections from end

00:06:03,410 --> 00:06:07,940
to end to end I mean that if you start

00:06:06,260 --> 00:06:08,780
the interaction with the glass there

00:06:07,940 --> 00:06:10,850
with I don't know

00:06:08,780 --> 00:06:14,630
HTTP requests I don't know I don't mind

00:06:10,850 --> 00:06:17,120
whatever you imagine from that point to

00:06:14,630 --> 00:06:19,940
the GBM or from Python or from wherever

00:06:17,120 --> 00:06:22,490
it must be secured not all the sharing

00:06:19,940 --> 00:06:25,010
services as I give it using the same

00:06:22,490 --> 00:06:25,960
protocol this is one of the most

00:06:25,010 --> 00:06:29,229
important things

00:06:25,960 --> 00:06:31,300
we need to to work with because you have

00:06:29,229 --> 00:06:34,000
curved arrows you have TLS you have a

00:06:31,300 --> 00:06:36,190
lot of ways to secure a service clients

00:06:34,000 --> 00:06:37,539
don't want to manage their secrets

00:06:36,190 --> 00:06:39,699
that's one of the important things they

00:06:37,539 --> 00:06:44,349
want it simple they want it now and they

00:06:39,699 --> 00:06:47,110
want to be isolated from the management

00:06:44,349 --> 00:06:48,849
of the secrets and as for as I said this

00:06:47,110 --> 00:06:51,069
Park is in the core of our processing

00:06:48,849 --> 00:06:54,729
system so we need to integrate this park

00:06:51,069 --> 00:06:56,620
with all those ideas evolve and now

00:06:54,729 --> 00:06:59,680
Jorge will tell you how we did it with

00:06:56,620 --> 00:07:03,690
Kerberos and missus so so we have said

00:06:59,680 --> 00:07:07,150
before Sparky's or mainly processes in

00:07:03,690 --> 00:07:09,729
distributed enjoy so if any of you

00:07:07,150 --> 00:07:12,210
doesn't know I will introduce you spark

00:07:09,729 --> 00:07:15,389
and I love that it have two methods for

00:07:12,210 --> 00:07:17,949
those doesn't know it spark borns as a

00:07:15,389 --> 00:07:20,860
message is validation use case

00:07:17,949 --> 00:07:23,770
validation and this is a common on the

00:07:20,860 --> 00:07:26,819
typical are key to for inspire inspire

00:07:23,770 --> 00:07:30,159
application we have master/slave

00:07:26,819 --> 00:07:32,199
architecture with the master will be in

00:07:30,159 --> 00:07:35,949
a spot replication the driver program

00:07:32,199 --> 00:07:39,759
that will run any execute or in in

00:07:35,949 --> 00:07:42,099
workers node sorry that the executor

00:07:39,759 --> 00:07:46,300
will be the ones that that really do the

00:07:42,099 --> 00:07:51,159
the execution that will be secure the

00:07:46,300 --> 00:07:53,259
tasks inside of his process all those

00:07:51,159 --> 00:07:56,110
this is manager by the cluster manager

00:07:53,259 --> 00:08:00,909
in reduced case will be apache missiles

00:07:56,110 --> 00:08:02,650
and if for those of you that doesn't

00:08:00,909 --> 00:08:06,009
know its part can be deployed both

00:08:02,650 --> 00:08:09,219
client in cluster mode for experience

00:08:06,009 --> 00:08:12,430
all in enterprise environments only the

00:08:09,219 --> 00:08:14,320
cluster mode is recommended why because

00:08:12,430 --> 00:08:17,740
in client mode the driver program is

00:08:14,320 --> 00:08:19,360
running in on our local machines and if

00:08:17,740 --> 00:08:20,979
you put something in production you know

00:08:19,360 --> 00:08:22,930
that this is this is impossible you

00:08:20,979 --> 00:08:25,380
cannot run something in production that

00:08:22,930 --> 00:08:27,880
running rangamati and your machine and

00:08:25,380 --> 00:08:30,580
send it something in in a cluster

00:08:27,880 --> 00:08:32,120
environment so in order to introduce you

00:08:30,580 --> 00:08:35,129
the

00:08:32,120 --> 00:08:37,319
differents analogy of a spy running in

00:08:35,129 --> 00:08:41,250
in cluster mode let me let me show you

00:08:37,319 --> 00:08:44,339
an animation that so the all the process

00:08:41,250 --> 00:08:47,069
that is done using mistress or manager

00:08:44,339 --> 00:08:50,639
first of all we need another another

00:08:47,069 --> 00:08:52,410
services beside mrs. master runs is an

00:08:50,639 --> 00:08:54,779
its aliens that is called aspire

00:08:52,410 --> 00:08:57,689
dispatcher is running inside the cluster

00:08:54,779 --> 00:08:59,399
in one of the of the Mesa cyan't you

00:08:57,689 --> 00:09:03,500
know this case is running as a matter of

00:08:59,399 --> 00:09:06,420
an application so the driver will send

00:09:03,500 --> 00:09:10,139
web a request to this part dispatcher

00:09:06,420 --> 00:09:14,939
that will what will ask for the message

00:09:10,139 --> 00:09:17,879
master to execute the one application

00:09:14,939 --> 00:09:20,790
which application will be running the

00:09:17,879 --> 00:09:24,750
driver itself okay for the other doesn't

00:09:20,790 --> 00:09:28,589
know when when a driver is is registered

00:09:24,750 --> 00:09:32,370
in in message it ready test is sorry sir

00:09:28,589 --> 00:09:35,370
she stood as message framework so the

00:09:32,370 --> 00:09:37,050
driver talks with missus master and I

00:09:35,370 --> 00:09:40,439
started that a scheduler message the

00:09:37,050 --> 00:09:42,779
scheduler and running any executor that

00:09:40,439 --> 00:09:46,470
it will need it for the four it's a

00:09:42,779 --> 00:09:48,240
spare application life cycle the taxi

00:09:46,470 --> 00:09:51,449
sending from the driver to the executor

00:09:48,240 --> 00:09:54,389
and we'll we'll do these these magic and

00:09:51,449 --> 00:09:57,630
read from its DFS or whatever it needed

00:09:54,389 --> 00:09:58,079
from from the use case so okay this is

00:09:57,630 --> 00:10:01,790
good

00:09:58,079 --> 00:10:05,430
but what happened we put a spark and

00:10:01,790 --> 00:10:07,439
it's the fs inside of platform that the

00:10:05,430 --> 00:10:10,319
first point that we have to accomplish

00:10:07,439 --> 00:10:13,019
this the secure the secure path for Duda

00:10:10,319 --> 00:10:15,480
doesn't know all the all the projects

00:10:13,019 --> 00:10:17,759
that are inside the Hadoop ecosystem or

00:10:15,480 --> 00:10:21,269
or dependent of it like

00:10:17,759 --> 00:10:24,259
yarn or map and reduce or whatever is

00:10:21,269 --> 00:10:26,699
using Kerberos as security protocol

00:10:24,259 --> 00:10:28,889
authentication security protocol capitis

00:10:26,699 --> 00:10:32,040
is a very complex protocol is not the

00:10:28,889 --> 00:10:35,610
topic of these of this talk if you want

00:10:32,040 --> 00:10:37,199
to read something I recommend you use it

00:10:35,610 --> 00:10:39,750
because this is very tricky and very

00:10:37,199 --> 00:10:43,500
very interesting but is is very complex

00:10:39,750 --> 00:10:44,100
so what capital does table scanners user

00:10:43,500 --> 00:10:46,980
and system

00:10:44,100 --> 00:10:51,120
this is is quite important the pardon of

00:10:46,980 --> 00:10:53,790
system - and is based in three mains

00:10:51,120 --> 00:10:56,370
concepts principle that is the user or

00:10:53,790 --> 00:10:58,380
the service identity that is nothing

00:10:56,370 --> 00:11:01,259
more than a stream key table that is a

00:10:58,380 --> 00:11:03,680
file that is the one with with a token

00:11:01,259 --> 00:11:07,139
that that is being used as the

00:11:03,680 --> 00:11:09,480
authorization using Kerberos and one

00:11:07,139 --> 00:11:12,509
important thing when we are in winter in

00:11:09,480 --> 00:11:15,360
something in a loop the legation tokens

00:11:12,509 --> 00:11:17,880
as Kerberos is nothing is previous of

00:11:15,360 --> 00:11:20,399
the big data wall is not seeking for the

00:11:17,880 --> 00:11:25,529
big data use case and problematic

00:11:20,399 --> 00:11:28,139
so if we use directly Kerberos we can

00:11:25,529 --> 00:11:30,769
study in down Kerberos or well this is

00:11:28,139 --> 00:11:33,959
what the people are Horten say to me in

00:11:30,769 --> 00:11:36,000
previous community so they they do

00:11:33,959 --> 00:11:39,509
something that is called the hadoop

00:11:36,000 --> 00:11:42,779
delegation tokens this is important for

00:11:39,509 --> 00:11:45,750
for the for the second of the company of

00:11:42,779 --> 00:11:48,230
the different data store because with

00:11:45,750 --> 00:11:51,439
these they they have to say to us that

00:11:48,230 --> 00:11:54,269
Kerberos is not used to run in a spark

00:11:51,439 --> 00:11:57,930
all easily used if we run in a spark

00:11:54,269 --> 00:12:00,149
with HDFS not for Cassandra or elastic

00:11:57,930 --> 00:12:01,980
or whatever so we have to do something

00:12:00,149 --> 00:12:06,089
more is going to explain later what is

00:12:01,980 --> 00:12:10,259
important so what what the status per

00:12:06,089 --> 00:12:12,480
team does we integrate all the

00:12:10,259 --> 00:12:14,459
functionality that is not it's not

00:12:12,480 --> 00:12:18,540
present right now in the in the Apache

00:12:14,459 --> 00:12:21,060
spark compilation of of Kerberos inside

00:12:18,540 --> 00:12:23,459
the the part of Messrs so we can run in

00:12:21,060 --> 00:12:27,589
any spare application running inside

00:12:23,459 --> 00:12:31,139
methods using a karada is HDFS

00:12:27,589 --> 00:12:34,889
it is great in several in several SPARC

00:12:31,139 --> 00:12:36,420
version and we we added a new cool

00:12:34,889 --> 00:12:38,279
functionality that is the in-person

00:12:36,420 --> 00:12:41,389
affection in real-time

00:12:38,279 --> 00:12:45,930
that is explaining in this part is is

00:12:41,389 --> 00:12:48,509
that I have told in the year but I will

00:12:45,930 --> 00:12:52,079
put it in animation in order to show you

00:12:48,509 --> 00:12:54,529
this is a common use case for SPARC will

00:12:52,079 --> 00:12:56,720
have a lifetime

00:12:54,529 --> 00:13:00,139
spark contests that is not closing in at

00:12:56,720 --> 00:13:03,050
anytime and we want to to read using

00:13:00,139 --> 00:13:05,120
several users so the first one will be

00:13:03,050 --> 00:13:09,529
juicer one that want to read the text

00:13:05,120 --> 00:13:11,689
file from HDFS first of all the driver

00:13:09,529 --> 00:13:15,290
will start into East interaction and

00:13:11,689 --> 00:13:19,879
using Kerberos and obtaining tokens okay

00:13:15,290 --> 00:13:22,459
and will impersonate user as you can see

00:13:19,879 --> 00:13:25,069
these lines are in black so is another

00:13:22,459 --> 00:13:29,089
user and the ones that will read from

00:13:25,069 --> 00:13:31,699
HDFS is in blue is the is the the user

00:13:29,089 --> 00:13:34,910
one that will be read this fight so is

00:13:31,699 --> 00:13:36,800
we read from the driver send that has to

00:13:34,910 --> 00:13:41,420
execute or that will start its

00:13:36,800 --> 00:13:45,559
delegation tokens to play with Kerberos

00:13:41,420 --> 00:13:48,559
and grid and write any information from

00:13:45,559 --> 00:13:50,749
HDFS using its own identity what

00:13:48,559 --> 00:13:53,569
happened if the next task of a spark

00:13:50,749 --> 00:13:55,730
will be running as user - if you have

00:13:53,569 --> 00:13:59,870
any other compilation you have to put in

00:13:55,730 --> 00:14:00,410
doubt your context an and launching

00:13:59,870 --> 00:14:04,870
another one

00:14:00,410 --> 00:14:08,360
but without solution add in some simple

00:14:04,870 --> 00:14:11,470
by double - to the code we can use

00:14:08,360 --> 00:14:16,160
another another use another user sorry

00:14:11,470 --> 00:14:19,939
this is a cool explanation about it so

00:14:16,160 --> 00:14:21,019
okay as I shall say before this is the

00:14:19,939 --> 00:14:23,870
end of the animation

00:14:21,019 --> 00:14:27,290
okay I have to say before we have

00:14:23,870 --> 00:14:29,839
several technologies that will that we

00:14:27,290 --> 00:14:35,329
run using several concepts of security

00:14:29,839 --> 00:14:37,160
in in Kerberos with HDFS is the key tap

00:14:35,329 --> 00:14:42,139
the key to file that will determine as

00:14:37,160 --> 00:14:44,120
the user okay so as we manage a lot of

00:14:42,139 --> 00:14:47,540
technology we have to manage a lot of

00:14:44,120 --> 00:14:50,300
kind of secret from the if we use HDFS

00:14:47,540 --> 00:14:53,179
we have to use github if we use another

00:14:50,300 --> 00:14:56,059
one like elastic or whatever we have to

00:14:53,179 --> 00:14:59,600
use TLS and we have to store certificate

00:14:56,059 --> 00:15:02,179
or whatever so what comes what happens

00:14:59,600 --> 00:15:04,670
when we realize that that we realize

00:15:02,179 --> 00:15:07,650
that we need some vault or so on

00:15:04,670 --> 00:15:11,010
whatever some some storage

00:15:07,650 --> 00:15:14,279
we give overall for Sigrid so or a study

00:15:11,010 --> 00:15:16,920
security team integrate TMS that is a

00:15:14,279 --> 00:15:18,450
key management system instead of brother

00:15:16,920 --> 00:15:23,220
phone in order to store and manage all

00:15:18,450 --> 00:15:27,240
of this secret this minute is the access

00:15:23,220 --> 00:15:31,350
of these key ms is made using tokens so

00:15:27,240 --> 00:15:33,180
we have a question okay we have a

00:15:31,350 --> 00:15:35,070
secretary store it well how do our

00:15:33,180 --> 00:15:37,410
process access it in a secure way

00:15:35,070 --> 00:15:42,089
because all of our as you can see all of

00:15:37,410 --> 00:15:44,310
our OS park application or whatever is

00:15:42,089 --> 00:15:45,650
running in this devoted way so we don't

00:15:44,310 --> 00:15:50,790
have any control it of it

00:15:45,650 --> 00:15:52,260
so to be more specifically having who

00:15:50,790 --> 00:15:56,610
keeps the key that opened the sacred

00:15:52,260 --> 00:15:59,190
ball a more graphically how can we hide

00:15:56,610 --> 00:16:02,670
the secret the master key from the

00:15:59,190 --> 00:16:04,800
bullies that want to obtain 82 so

00:16:02,670 --> 00:16:07,890
release this problematic I want to do

00:16:04,800 --> 00:16:10,410
another animation so explain it what we

00:16:07,890 --> 00:16:11,880
have done as I said before we have a

00:16:10,410 --> 00:16:14,279
merge some application running inside of

00:16:11,880 --> 00:16:16,800
cluster and launch our request from

00:16:14,279 --> 00:16:19,820
Stratos per dispatcher the status part

00:16:16,800 --> 00:16:23,970
is patchy lands in another agent and

00:16:19,820 --> 00:16:26,130
stateö spar application comes to request

00:16:23,970 --> 00:16:29,490
comes to our Stratis party spatter which

00:16:26,130 --> 00:16:32,220
its own application tokens right now

00:16:29,490 --> 00:16:35,250
this is a store in the metadata volume

00:16:32,220 --> 00:16:40,680
in order to obtain the the metadata of

00:16:35,250 --> 00:16:43,410
our application and the study dispatcher

00:16:40,680 --> 00:16:45,390
will launch as per driver and we'd send

00:16:43,410 --> 00:16:47,730
the application token as you can see

00:16:45,390 --> 00:16:52,260
this is not this is not secure at all

00:16:47,730 --> 00:16:54,270
okay so what three what a problem we

00:16:52,260 --> 00:16:56,010
have to face the application token is

00:16:54,270 --> 00:16:58,410
waiting in the executor logs because we

00:16:56,010 --> 00:17:00,150
are using doget as I said before the

00:16:58,410 --> 00:17:04,070
only thing the only way that we can to

00:17:00,150 --> 00:17:04,070
to pass any any

00:17:04,199 --> 00:17:10,329
any argument or replication is by

00:17:06,870 --> 00:17:12,910
execution variables and he's waiting in

00:17:10,329 --> 00:17:14,829
this log also a sensible information is

00:17:12,910 --> 00:17:17,470
sent using a no security rotation layer

00:17:14,829 --> 00:17:19,660
because we don't have TLS activities in

00:17:17,470 --> 00:17:21,100
the cluster and applications talking

00:17:19,660 --> 00:17:21,520
this also whitening application with

00:17:21,100 --> 00:17:23,470
that

00:17:21,520 --> 00:17:27,010
what is the result of this the bullies

00:17:23,470 --> 00:17:29,650
is still laughing of us so we have to do

00:17:27,010 --> 00:17:31,810
something from all of these this

00:17:29,650 --> 00:17:33,490
security point of view what happened

00:17:31,810 --> 00:17:36,430
right now that all security teams

00:17:33,490 --> 00:17:39,160
integrate some cool new feature that

00:17:36,430 --> 00:17:42,460
when some some application is runing

00:17:39,160 --> 00:17:46,840
using marathon it will last for a secret

00:17:42,460 --> 00:17:49,360
and enroll ID that will make that will

00:17:46,840 --> 00:17:53,880
make possible that this application can

00:17:49,360 --> 00:17:57,360
be login to our secret vault security ok

00:17:53,880 --> 00:18:02,440
and when the swathi was party spatula

00:17:57,360 --> 00:18:04,540
started started its process go to vault

00:18:02,440 --> 00:18:07,270
and obtained in some talking why because

00:18:04,540 --> 00:18:09,490
when as per application comes to to the

00:18:07,270 --> 00:18:12,190
Stratos per dispatcher it doesn't come

00:18:09,490 --> 00:18:14,920
with a token right like the sample

00:18:12,190 --> 00:18:17,170
before it comes from a role that is not

00:18:14,920 --> 00:18:19,510
sensible information when we have this

00:18:17,170 --> 00:18:22,060
role rule returns with a secret and role

00:18:19,510 --> 00:18:24,100
ad the secret and role ID is the one

00:18:22,060 --> 00:18:27,940
that is send it to the spar execute a

00:18:24,100 --> 00:18:30,940
spar driver and the spot rider will also

00:18:27,940 --> 00:18:32,920
do login in vault and return with the

00:18:30,940 --> 00:18:36,460
application da game but a hive Sylvie

00:18:32,920 --> 00:18:39,640
for part driver also loaned any spare

00:18:36,460 --> 00:18:42,430
execution so when the spider IV detects

00:18:39,640 --> 00:18:45,250
them a mono fixation that is going to be

00:18:42,430 --> 00:18:47,380
launched it generates something so new

00:18:45,250 --> 00:18:49,750
matter that is quietly the same that

00:18:47,380 --> 00:18:52,720
civility and role ad that is the one

00:18:49,750 --> 00:18:55,270
time T quantum token as his name says

00:18:52,720 --> 00:18:58,570
they only have one use and he send it

00:18:55,270 --> 00:19:01,060
today from the driver to the executor ok

00:18:58,570 --> 00:19:03,220
as you can see in this picture and with

00:19:01,060 --> 00:19:05,470
this one-time token will retrieve the

00:19:03,220 --> 00:19:08,320
application of it so what is the result

00:19:05,470 --> 00:19:10,870
of this all of odd of all of these that

00:19:08,320 --> 00:19:12,280
we have a method that in which no

00:19:10,870 --> 00:19:13,350
sensible information is serviced because

00:19:12,280 --> 00:19:16,320
is only

00:19:13,350 --> 00:19:19,500
one time user or one time tokens or

00:19:16,320 --> 00:19:21,960
whatever that can be detected if someone

00:19:19,500 --> 00:19:24,960
is in turbulent someone intervened in

00:19:21,960 --> 00:19:27,690
this token and not sensible information

00:19:24,960 --> 00:19:29,549
is serviced in animated so what is the

00:19:27,690 --> 00:19:32,190
real thing that or circulars are safe

00:19:29,549 --> 00:19:36,000
and if some bullies want to want to a

00:19:32,190 --> 00:19:38,700
stall of secret we cannot we can we can

00:19:36,000 --> 00:19:41,809
put in jail so we can put it in jail and

00:19:38,700 --> 00:19:45,840
this is also a feature I think and

00:19:41,809 --> 00:19:47,970
Marcus will explain this well let's talk

00:19:45,840 --> 00:19:51,630
about mundial TLS as we said it is

00:19:47,970 --> 00:19:53,789
another kind of security solution when I

00:19:51,630 --> 00:19:56,250
try to search for a good picture for

00:19:53,789 --> 00:19:58,770
this talk I found this I just searched

00:19:56,250 --> 00:20:02,400
hansik I don't know why well this guy

00:19:58,770 --> 00:20:06,620
everywhere so let's start by telling was

00:20:02,400 --> 00:20:09,510
a mutual TLS okay which authentication

00:20:06,620 --> 00:20:11,309
refers to two parties how did he get in

00:20:09,510 --> 00:20:13,590
each other so it's like okay I'm your

00:20:11,309 --> 00:20:15,480
friend I know you you know me and most

00:20:13,590 --> 00:20:17,549
Big Data technologies allows

00:20:15,480 --> 00:20:21,570
implementation of these this protocol

00:20:17,549 --> 00:20:25,320
okay this plain and briefly this

00:20:21,570 --> 00:20:28,020
protocol is based on two main items as

00:20:25,320 --> 00:20:30,270
keystore truster and they of course the

00:20:28,020 --> 00:20:32,429
parties we have two parties here

00:20:30,270 --> 00:20:34,350
Superman and Batman so let's check if

00:20:32,429 --> 00:20:37,890
Superman and Batman are friends or not

00:20:34,350 --> 00:20:42,780
without seeing in the film Superman has

00:20:37,890 --> 00:20:44,760
a key store here which is his ID and has

00:20:42,780 --> 00:20:50,520
his trust or which is a folder where he

00:20:44,760 --> 00:20:52,679
stores the his friends Heidi's so to

00:20:50,520 --> 00:20:54,179
start with this the communication will

00:20:52,679 --> 00:20:57,179
be something like and this is at the

00:20:54,179 --> 00:21:00,059
handshake okay we have I have a key

00:20:57,179 --> 00:21:02,280
storing Superman I send you my ID you as

00:21:00,059 --> 00:21:04,530
Batman rely on me do you have my ID in

00:21:02,280 --> 00:21:07,950
your friends folder yeah

00:21:04,530 --> 00:21:09,630
here is my key store do you have it in

00:21:07,950 --> 00:21:13,980
your dresser yeah so the communication

00:21:09,630 --> 00:21:16,590
can begin okay and if you look for TLS

00:21:13,980 --> 00:21:19,710
in Wikipedia you will find this that

00:21:16,590 --> 00:21:21,510
makes really sense is as it requires

00:21:19,710 --> 00:21:23,070
provisioning of death certificates to

00:21:21,510 --> 00:21:25,650
the client and involves less

00:21:23,070 --> 00:21:26,580
user-friendly experience is rarely use

00:21:25,650 --> 00:21:28,860
it in

00:21:26,580 --> 00:21:33,090
usual applications that means that our

00:21:28,860 --> 00:21:36,240
cure sent from the user to the

00:21:33,090 --> 00:21:39,620
dispatcher will be hard to understand if

00:21:36,240 --> 00:21:43,350
we need to introduce some kind of secret

00:21:39,620 --> 00:21:45,510
but even this makes sense at the

00:21:43,350 --> 00:21:48,539
strategy oh we think different we say ok

00:21:45,510 --> 00:21:51,450
by default my users most users are not

00:21:48,539 --> 00:21:54,029
used to play with big data things so

00:21:51,450 --> 00:21:56,480
let's do as easy as we can and hug

00:21:54,029 --> 00:21:59,220
something with that TLS thing we need to

00:21:56,480 --> 00:22:04,289
handle that in order to be really really

00:21:59,220 --> 00:22:06,149
easy and that huge challenge ok as you

00:22:04,289 --> 00:22:08,730
can see this is an example of a driver

00:22:06,149 --> 00:22:11,100
ok using our distribution that means

00:22:08,730 --> 00:22:16,440
that the only thing that you need to do

00:22:11,100 --> 00:22:19,649
to run driver using a TLS data store is

00:22:16,440 --> 00:22:23,669
get that variables from your spark

00:22:19,649 --> 00:22:27,299
configuration and this will populate

00:22:23,669 --> 00:22:29,600
some values or variables in order to

00:22:27,299 --> 00:22:32,970
make that magic happen

00:22:29,600 --> 00:22:34,799
how well Cal Cal has planed I won't tell

00:22:32,970 --> 00:22:38,370
about a dynamic and education and so on

00:22:34,799 --> 00:22:42,120
and this ran a spark application it will

00:22:38,370 --> 00:22:43,830
go to the Stratus parties pasture this

00:22:42,120 --> 00:22:47,159
was running and this will run a truck

00:22:43,830 --> 00:22:50,399
driver that will go to both and get a

00:22:47,159 --> 00:22:51,779
roll token the format will be base64

00:22:50,399 --> 00:22:53,730
whatever I don't know ok

00:22:51,779 --> 00:22:57,600
we have different methods to parts

00:22:53,730 --> 00:23:02,519
depending on the secret and with this

00:22:57,600 --> 00:23:04,909
role secret we have some classes to

00:23:02,519 --> 00:23:08,549
generate their proper secrets the

00:23:04,909 --> 00:23:10,799
secrets are generated inside the GBM so

00:23:08,549 --> 00:23:12,389
our notice Paul said to the docker

00:23:10,799 --> 00:23:14,039
container and notice posted to the logs

00:23:12,389 --> 00:23:16,260
all notice posted anywhere we control

00:23:14,039 --> 00:23:19,889
everything here and the secrets are

00:23:16,260 --> 00:23:22,559
proposed as path so the user can't

00:23:19,889 --> 00:23:24,630
access today all to the proper secret he

00:23:22,559 --> 00:23:30,000
can only refers to the path in order to

00:23:24,630 --> 00:23:33,090
be used in a TLS protocol this happens

00:23:30,000 --> 00:23:35,730
then driver gets the token and send a

00:23:33,090 --> 00:23:38,460
one-day plugin to the executor and the

00:23:35,730 --> 00:23:39,720
executor does the same trick because you

00:23:38,460 --> 00:23:41,730
need to

00:23:39,720 --> 00:23:43,830
identify yourself as a driver nasai

00:23:41,730 --> 00:23:46,440
Secutor in order to access blacks desert

00:23:43,830 --> 00:23:50,070
fortress or whatever TLS that's not of

00:23:46,440 --> 00:23:52,880
unasyn so you could be able to talk with

00:23:50,070 --> 00:23:57,600
Kafka with drive around Skeeter and

00:23:52,880 --> 00:23:59,640
that's pretty good the thing that is

00:23:57,600 --> 00:24:03,419
most important for us is that we have

00:23:59,640 --> 00:24:06,080
nothing written in the doctor loves or

00:24:03,419 --> 00:24:09,419
whatever is everything inside IBM and

00:24:06,080 --> 00:24:11,640
then publish a portal has appeared it's

00:24:09,419 --> 00:24:14,730
on a special cases possess the special

00:24:11,640 --> 00:24:19,289
guy of the class because por tres uses

00:24:14,730 --> 00:24:21,360
JDBC connection chain and that JDBC

00:24:19,289 --> 00:24:22,440
connection chains does not use PE

00:24:21,360 --> 00:24:25,380
m-files

00:24:22,440 --> 00:24:28,950
use pkcs eight files which is a

00:24:25,380 --> 00:24:31,890
different way to parse a certificate

00:24:28,950 --> 00:24:34,830
with we have not implemented in that

00:24:31,890 --> 00:24:38,640
moment and as long as we have no method

00:24:34,830 --> 00:24:42,419
to parse from pain to pay kisi s8 we

00:24:38,640 --> 00:24:44,460
decided to iterate we iterate with a

00:24:42,419 --> 00:24:46,620
first broad which is not good at all I

00:24:44,460 --> 00:24:50,370
told you I tell you but it's our first

00:24:46,620 --> 00:24:52,950
approach that is a spur has script that

00:24:50,370 --> 00:24:55,830
is called a spark in and that script

00:24:52,950 --> 00:24:58,110
lets you do things before you start your

00:24:55,830 --> 00:25:01,140
process that's not good because it

00:24:58,110 --> 00:25:04,590
writes a lot of logs and it's quite bad

00:25:01,140 --> 00:25:07,830
in order to to be secured and we started

00:25:04,590 --> 00:25:10,230
with with open SSL that this system

00:25:07,830 --> 00:25:12,990
library to parse that certificate from

00:25:10,230 --> 00:25:17,370
PEM to take it yes but it about reduced

00:25:12,990 --> 00:25:20,039
so bad and nowadays we have create a new

00:25:17,370 --> 00:25:22,890
method two pairs from p.m. to pay kts

00:25:20,039 --> 00:25:25,110
eight and we provide this sacred the

00:25:22,890 --> 00:25:26,940
secret in the same way that the secret

00:25:25,110 --> 00:25:29,580
that you have seen is another property

00:25:26,940 --> 00:25:32,159
that you can use but is in another

00:25:29,580 --> 00:25:34,110
format and in a future approach you know

00:25:32,159 --> 00:25:35,940
further improvement we want to provide

00:25:34,110 --> 00:25:39,000
an SSL socket factory that we are

00:25:35,940 --> 00:25:40,559
working on it but it's it's not

00:25:39,000 --> 00:25:42,960
necessary it's yet another way to

00:25:40,559 --> 00:25:46,380
interact with progress but I think we

00:25:42,960 --> 00:25:49,820
think that is quite interesting so now

00:25:46,380 --> 00:25:52,160
about never isolation well

00:25:49,820 --> 00:25:54,830
before I started with never so reason I

00:25:52,160 --> 00:25:58,310
want to put something more about what

00:25:54,830 --> 00:26:01,910
Marco says is cool it's not mad sorry

00:25:58,310 --> 00:26:06,020
but he he forgets one thing in this code

00:26:01,910 --> 00:26:09,170
that we are so we okay we are talking

00:26:06,020 --> 00:26:10,370
about elastic but in the in the prayer

00:26:09,170 --> 00:26:14,360
in the process late

00:26:10,370 --> 00:26:15,920
we saw the code with Kafka why because

00:26:14,360 --> 00:26:18,140
the code is exactly the same the

00:26:15,920 --> 00:26:20,990
properties is exactly the same so any

00:26:18,140 --> 00:26:25,700
new technology that come with TLS and

00:26:20,990 --> 00:26:28,670
using DK is format from the files

00:26:25,700 --> 00:26:30,830
well we're cover what happened the main

00:26:28,670 --> 00:26:33,200
trick with possibilities that this is

00:26:30,830 --> 00:26:36,290
not Alouette and we have to do all this

00:26:33,200 --> 00:26:41,570
oldest is that the marker can explain

00:26:36,290 --> 00:26:44,030
sorry for the intervention and we came

00:26:41,570 --> 00:26:46,430
with with all of this okay Network

00:26:44,030 --> 00:26:49,190
solution what happened with when we

00:26:46,430 --> 00:26:52,760
accomplish all of this that we say we

00:26:49,190 --> 00:26:55,820
think okay or cluster is not secure we

00:26:52,760 --> 00:27:00,370
think that the process is totally secure

00:26:55,820 --> 00:27:00,370
because the because all of we have done

00:27:00,430 --> 00:27:04,580
are secure they communicate the

00:27:02,690 --> 00:27:06,860
communication are secure we don't spend

00:27:04,580 --> 00:27:09,530
any token we cannot the secret that we

00:27:06,860 --> 00:27:13,190
generate as Marcos has said is in Sunday

00:27:09,530 --> 00:27:16,070
yeah built on machine so anything is yes

00:27:13,190 --> 00:27:18,770
sir always cool but what happened with

00:27:16,070 --> 00:27:21,740
weekend with particular use case that is

00:27:18,770 --> 00:27:24,080
called data scientist not a scientist

00:27:21,740 --> 00:27:29,060
have to had access from their computer

00:27:24,080 --> 00:27:31,610
to the cluster inside so we open it wait

00:27:29,060 --> 00:27:35,000
to open cells inside of cluster and we

00:27:31,610 --> 00:27:37,280
have this particular use case so let's

00:27:35,000 --> 00:27:39,080
put that we are this guy the works on

00:27:37,280 --> 00:27:40,820
regular light that want to announce any

00:27:39,080 --> 00:27:41,690
power allocation that reads from a

00:27:40,820 --> 00:27:46,010
Carrodus

00:27:41,690 --> 00:27:47,930
it's the FS is run its own application

00:27:46,010 --> 00:27:50,870
communicate with the spar status parties

00:27:47,930 --> 00:27:52,940
patcher that will run as far as per

00:27:50,870 --> 00:27:55,280
driver and a spare executor will

00:27:52,940 --> 00:27:57,830
interact itself and with HDFS

00:27:55,280 --> 00:28:02,150
but what happened with is some bad guy

00:27:57,830 --> 00:28:02,809
this guy right here want to to launch a

00:28:02,150 --> 00:28:05,990
process

00:28:02,809 --> 00:28:08,330
that this cannot be done with with this

00:28:05,990 --> 00:28:11,570
back though that not have bid on that

00:28:08,330 --> 00:28:14,870
happy open okay with these cut process

00:28:11,570 --> 00:28:17,929
as he is inside or cluster he's not is

00:28:14,870 --> 00:28:20,870
not also able to communicate with HDFS

00:28:17,929 --> 00:28:23,450
because it's inside the cluster is also

00:28:20,870 --> 00:28:26,929
able to come intercept all the

00:28:23,450 --> 00:28:30,440
communications okay if we put some some

00:28:26,929 --> 00:28:33,710
effort or whatever so what what happened

00:28:30,440 --> 00:28:36,409
with this we can we have status security

00:28:33,710 --> 00:28:40,100
team can't we need with integration

00:28:36,409 --> 00:28:42,259
between yes then and mesos so we have

00:28:40,100 --> 00:28:46,879
now somewhere definition network and

00:28:42,259 --> 00:28:49,580
what what this approach to us sorry what

00:28:46,879 --> 00:28:52,730
this approach give to us that we can

00:28:49,580 --> 00:28:56,360
create several it's a little bit one

00:28:52,730 --> 00:28:59,539
networks profiling by no but kind of

00:28:56,360 --> 00:29:05,179
user nobody no way project I think we

00:28:59,539 --> 00:29:07,100
can win we can make only sorry I will

00:29:05,179 --> 00:29:10,249
connect work for the user Marcos that

00:29:07,100 --> 00:29:13,100
only access to HDFS and another one for

00:29:10,249 --> 00:29:16,610
me user Jorge that access to is the FS

00:29:13,100 --> 00:29:20,059
and elastic or whatever why because my

00:29:16,610 --> 00:29:26,679
user is better than him because I'm not

00:29:20,059 --> 00:29:30,409
him so yeah you learn and say it so ok

00:29:26,679 --> 00:29:34,909
we can do this this profiling of user at

00:29:30,409 --> 00:29:37,129
any project or or whatever and one

00:29:34,909 --> 00:29:39,649
important one very important thing is

00:29:37,129 --> 00:29:42,019
that these sword affinity on network

00:29:39,649 --> 00:29:45,009
doesn't add any limitation to the mesh

00:29:42,019 --> 00:29:47,779
architecture why'd I put this in in

00:29:45,009 --> 00:29:51,169
knowledge because the first approach was

00:29:47,779 --> 00:29:55,490
using a static resource so one project

00:29:51,169 --> 00:29:57,649
has only a concrete amount of resource

00:29:55,490 --> 00:29:59,990
for a cluster this is not quite good

00:29:57,649 --> 00:30:02,119
this is something that we have to

00:29:59,990 --> 00:30:05,330
eliminate because we want messes

00:30:02,119 --> 00:30:07,310
elasticity so we are at with this new

00:30:05,330 --> 00:30:11,270
cool

00:30:07,310 --> 00:30:14,000
the functionality okay so happy face we

00:30:11,270 --> 00:30:17,210
can assign assign just the dress was

00:30:14,000 --> 00:30:20,630
needed by each user and message they

00:30:17,210 --> 00:30:25,220
still have is also on elasticity okay

00:30:20,630 --> 00:30:27,890
the same the same process same guy

00:30:25,220 --> 00:30:33,530
lounge the same application that we read

00:30:27,890 --> 00:30:36,350
okay we put two different boxes here why

00:30:33,530 --> 00:30:40,280
because as I've said before spar driver

00:30:36,350 --> 00:30:42,530
are mesos framework so when we started a

00:30:40,280 --> 00:30:44,540
message framework message master star

00:30:42,530 --> 00:30:48,020
communication with a missiles framework

00:30:44,540 --> 00:30:50,900
in random port that we cannot we cannot

00:30:48,020 --> 00:30:53,870
secure secure iceberg

00:30:50,900 --> 00:30:56,530
sorry and this network has to have

00:30:53,870 --> 00:30:58,790
access to these two this particular

00:30:56,530 --> 00:31:00,440
component of for gratitude

00:30:58,790 --> 00:31:03,980
but the executor doesn't talk with

00:31:00,440 --> 00:31:06,620
message master at all okay so spa driver

00:31:03,980 --> 00:31:08,900
Hertz has access to the data store the

00:31:06,620 --> 00:31:10,940
executor and the message master and it's

00:31:08,900 --> 00:31:14,630
parris akuto only have access to the

00:31:10,940 --> 00:31:17,170
data store and the part driver so the

00:31:14,630 --> 00:31:20,060
communication is still good no it is not

00:31:17,170 --> 00:31:24,140
is the same we don't have any problem so

00:31:20,060 --> 00:31:30,710
what happened if we see something dance

00:31:24,140 --> 00:31:34,970
and prop hacking process that as we have

00:31:30,710 --> 00:31:37,700
this new neighboring solution this this

00:31:34,970 --> 00:31:40,220
hacker cannot access to HDFS because it

00:31:37,700 --> 00:31:43,430
will be profiling in order to only to

00:31:40,220 --> 00:31:47,180
have access for the proper user or

00:31:43,430 --> 00:31:48,710
restore network and of course they can

00:31:47,180 --> 00:31:51,590
have access to the communication between

00:31:48,710 --> 00:31:55,610
executors and data stores or the driver

00:31:51,590 --> 00:31:58,550
and executor or the driver and data

00:31:55,610 --> 00:32:02,690
store so with all of in mind we think

00:31:58,550 --> 00:32:05,690
that or cluster is quite secure we we

00:32:02,690 --> 00:32:09,350
are quite sure of this that we are going

00:32:05,690 --> 00:32:13,880
to make life demo right now with our

00:32:09,350 --> 00:32:17,560
report please write for us that overwork

00:32:13,880 --> 00:32:20,680
and Marcus will will be the one in

00:32:17,560 --> 00:32:24,030
doing the rhythm if you have to tape and

00:32:20,680 --> 00:32:28,240
you can hold the mic so first of all

00:32:24,030 --> 00:32:31,480
Marco's is going to show you the cluster

00:32:28,240 --> 00:32:34,480
that we are going to use for the demo if

00:32:31,480 --> 00:32:40,300
you can find it okay this is our cluster

00:32:34,480 --> 00:32:42,910
as and well what we have here is a

00:32:40,300 --> 00:32:46,390
little cluster with 200 shares and one

00:32:42,910 --> 00:32:50,290
terabyte of RAM we have a sparkly spots

00:32:46,390 --> 00:32:58,870
are already deployed okay which has its

00:32:50,290 --> 00:33:05,100
own network which is somewhere we need

00:32:58,870 --> 00:33:08,050
here okay so here you can see that the

00:33:05,100 --> 00:33:10,750
dispatcher network is spark okay

00:33:08,050 --> 00:33:17,430
which of course have had access to the

00:33:10,750 --> 00:33:19,990
missus master now we're gonna run a job

00:33:17,430 --> 00:33:22,570
Neffe was going to show you the proper

00:33:19,990 --> 00:33:26,200
way but request that we have to Lance in

00:33:22,570 --> 00:33:28,540
order to access to a to an HDFS I think

00:33:26,200 --> 00:33:31,150
yes just something important

00:33:28,540 --> 00:33:33,310
we have also authentication because we

00:33:31,150 --> 00:33:36,310
are going through admin Rooter so we

00:33:33,310 --> 00:33:38,470
have to login first using a wealth and

00:33:36,310 --> 00:33:41,080
maybe the cookie that is inside this

00:33:38,470 --> 00:33:42,310
script has been revoked so maybe this

00:33:41,080 --> 00:33:44,320
phase but don't worry because it's

00:33:42,310 --> 00:33:48,190
controlled maybe don't because the

00:33:44,320 --> 00:33:53,620
cookie has not this part they cookie as

00:33:48,190 --> 00:33:57,790
office Road Inger so here we have the

00:33:53,620 --> 00:34:01,090
job that must be able to read from HD

00:33:57,790 --> 00:34:03,880
fears HDFS so first of all let's take a

00:34:01,090 --> 00:34:06,280
look look on on it here you can see what

00:34:03,880 --> 00:34:09,490
we have talked about we have to find it

00:34:06,280 --> 00:34:12,910
some some properties ok which I'm trying

00:34:09,490 --> 00:34:15,640
to find this our our person of this park

00:34:12,910 --> 00:34:18,760
and here you can find some security

00:34:15,640 --> 00:34:20,890
options you can see that we have the

00:34:18,760 --> 00:34:23,950
spark secret board role which is one is

00:34:20,890 --> 00:34:27,220
that is able to interact with vault here

00:34:23,950 --> 00:34:29,090
you can see the mesas principle and Miss

00:34:27,220 --> 00:34:31,490
a secret which is

00:34:29,090 --> 00:34:35,090
the principal is the one that is gonna

00:34:31,490 --> 00:34:38,600
be able to run frameworks and

00:34:35,090 --> 00:34:42,140
applications inside messes we have the

00:34:38,600 --> 00:34:45,440
roll and we have the networks this

00:34:42,140 --> 00:34:50,180
network that is not maybe quite readable

00:34:45,440 --> 00:34:54,190
has no access to psql but has Arctic's

00:34:50,180 --> 00:34:58,490
to a TFS so let's run this script

00:34:54,190 --> 00:35:00,980
hopefully a cookie is still valid just

00:34:58,490 --> 00:35:03,410
to burn it you can see is this escape is

00:35:00,980 --> 00:35:08,630
for a model for a Python application

00:35:03,410 --> 00:35:16,190
okay yeah so the driver ended in 44 has

00:35:08,630 --> 00:35:19,310
been lunch it is over here and as you

00:35:16,190 --> 00:35:21,950
can see it has been able to read from a

00:35:19,310 --> 00:35:27,230
TFS here's the record of a guy of our

00:35:21,950 --> 00:35:31,280
company and right now we are going to

00:35:27,230 --> 00:35:35,660
try to do the same with a boot or net

00:35:31,280 --> 00:35:38,270
what that doesn't allow access to yes as

00:35:35,660 --> 00:35:41,270
you can see we have here they have a

00:35:38,270 --> 00:35:44,240
different network which has different

00:35:41,270 --> 00:35:48,760
calico policies that don't allow this

00:35:44,240 --> 00:35:51,800
driver to access a TFS so it must fail

00:35:48,760 --> 00:35:54,230
another point of view you can see in the

00:35:51,800 --> 00:35:58,940
bottom of the order request that we only

00:35:54,230 --> 00:36:01,370
serve the bald path never the sacred

00:35:58,940 --> 00:36:02,930
itself okay yeah the only thing that the

00:36:01,370 --> 00:36:04,940
user need to know is where the secrets

00:36:02,930 --> 00:36:07,010
are stored not maybe an administrator or

00:36:04,940 --> 00:36:10,100
something like that content can tell him

00:36:07,010 --> 00:36:14,600
ok I let the secrets be at this path and

00:36:10,100 --> 00:36:18,440
he could he can reference it so the

00:36:14,600 --> 00:36:24,710
driver has what is the number 45 is

00:36:18,440 --> 00:36:29,530
submitted and when it that I decides

00:36:24,710 --> 00:36:34,180
that the timeout has come it will fail

00:36:29,530 --> 00:36:34,180
when will that happen no one knows

00:36:35,390 --> 00:36:40,460
we hope someone lets this go with

00:36:37,280 --> 00:36:46,910
Posterous I will keep the part of the

00:36:40,460 --> 00:36:55,310
some part of the of the Cure I will show

00:36:46,910 --> 00:36:57,280
you only the important things for TLS so

00:36:55,310 --> 00:37:01,010
here you can see that is this is a Scala

00:36:57,280 --> 00:37:03,860
application you will refer them the AR

00:37:01,010 --> 00:37:07,040
and so on and here you see there this is

00:37:03,860 --> 00:37:10,130
the one that allows to access to psql so

00:37:07,040 --> 00:37:13,040
has a policy that only the is an I in

00:37:10,130 --> 00:37:15,890
the access to HDFS we have the same

00:37:13,040 --> 00:37:19,460
secrets but we have different paths okay

00:37:15,890 --> 00:37:22,430
we have the path for the interaction

00:37:19,460 --> 00:37:25,430
with TLS that the store is always the

00:37:22,430 --> 00:37:28,580
same is always the key path the third

00:37:25,430 --> 00:37:32,390
path the third path and the same from

00:37:28,580 --> 00:37:43,970
the for the dress store so if we run

00:37:32,390 --> 00:37:46,430
this okay driver is 46 the other one the

00:37:43,970 --> 00:37:49,130
seed before okay as you can see the

00:37:46,430 --> 00:37:52,130
driver launched it without permission to

00:37:49,130 --> 00:37:57,680
read from HDFS have failed and the one

00:37:52,130 --> 00:38:03,560
that we have just run the 46 with actors

00:37:57,680 --> 00:38:08,120
to Posterous has ended successfully so

00:38:03,560 --> 00:38:14,020
now let's see the driver that has no

00:38:08,120 --> 00:38:18,610
permissions for HDFS for progress sorry

00:38:14,020 --> 00:38:18,610
yeah sorry I don't know why you say

00:38:21,830 --> 00:38:27,980
so this one has no access to be SQL

00:38:33,630 --> 00:38:42,700
and this will this will take a little

00:38:38,200 --> 00:38:47,950
bit but this will fail okay I want to

00:38:42,700 --> 00:38:50,920
show you first that you can see here if

00:38:47,950 --> 00:38:52,630
you find for it if you look for it true

00:38:50,920 --> 00:38:55,480
what no not this one

00:38:52,630 --> 00:38:58,540
we are not interested in yours okay

00:38:55,480 --> 00:39:03,030
sorry let's start so if if I can show

00:38:58,540 --> 00:39:03,030
you this prove interesting here's a

00:39:04,740 --> 00:39:10,750
here's the network parameter which is

00:39:07,750 --> 00:39:12,339
part know P SQL which is a calico

00:39:10,750 --> 00:39:15,730
network that we have to find it with the

00:39:12,339 --> 00:39:18,820
policy to deny access to P SQL and the

00:39:15,730 --> 00:39:21,220
service this already running because has

00:39:18,820 --> 00:39:24,790
had a long time out will fail

00:39:21,220 --> 00:39:29,170
okay okay I just wanted to point all of

00:39:24,790 --> 00:39:32,070
you in these in this locked also we can

00:39:29,170 --> 00:39:34,330
so something okay all of these

00:39:32,070 --> 00:39:37,839
properties okay

00:39:34,330 --> 00:39:41,470
and now part of the sparkle properties

00:39:37,839 --> 00:39:43,660
this is not that since it's not secure

00:39:41,470 --> 00:39:45,190
doesn't print any properties that have

00:39:43,660 --> 00:39:47,369
something like password or whatever

00:39:45,190 --> 00:39:49,990
please this is your accomplices a

00:39:47,369 --> 00:39:53,109
developer but we want to show you that

00:39:49,990 --> 00:39:56,980
even we didn't put any of these these

00:39:53,109 --> 00:39:58,990
properties inside of web request we have

00:39:56,980 --> 00:40:01,420
all this information and all of this

00:39:58,990 --> 00:40:03,970
happen in a transparent way for the for

00:40:01,420 --> 00:40:06,070
the developer and I think is very cool

00:40:03,970 --> 00:40:09,250
and something that doesn't we doesn't

00:40:06,070 --> 00:40:14,320
say is that all of these we we came with

00:40:09,250 --> 00:40:17,050
benchmark and doesn't add any any any

00:40:14,320 --> 00:40:20,440
delays this is the guy that run this

00:40:17,050 --> 00:40:22,060
benchmark but of course it has some

00:40:20,440 --> 00:40:23,980
impact but is something that you can

00:40:22,060 --> 00:40:27,460
depreciate because it's not important

00:40:23,980 --> 00:40:33,089
it's lower man-eater than we expected

00:40:27,460 --> 00:40:35,020
and so well now while this is finishing

00:40:33,089 --> 00:40:38,980
we would like to ask you four questions

00:40:35,020 --> 00:40:42,099
if something is not pretty clear and you

00:40:38,980 --> 00:40:46,500
are in something to be asked is the time

00:40:42,099 --> 00:40:46,500
and you will have a also dessert

00:40:48,380 --> 00:40:51,380
questions

00:40:54,120 --> 00:41:04,680
okay yeah they told me I need to give

00:40:59,310 --> 00:41:06,630
you a microphone so I whoa

00:41:04,680 --> 00:41:12,810
great presentation can you talk a little

00:41:06,630 --> 00:41:16,140
bit more about how you do the SDN you

00:41:12,810 --> 00:41:18,060
mean know about is the end yeah is the

00:41:16,140 --> 00:41:23,240
end we are we are using calico now

00:41:18,060 --> 00:41:25,500
because calico give us a lot of power

00:41:23,240 --> 00:41:29,130
when we are talking about security

00:41:25,500 --> 00:41:31,920
policies he had a huge and a massive way

00:41:29,130 --> 00:41:35,400
to define ACLs and that's the reason

00:41:31,920 --> 00:41:37,920
that we chose calico as the end is

00:41:35,400 --> 00:41:40,020
important to us because we have tons of

00:41:37,920 --> 00:41:42,390
processes inside our cluster we have

00:41:40,020 --> 00:41:44,970
business intelligence tools we have

00:41:42,390 --> 00:41:47,850
processing tools we have data stores so

00:41:44,970 --> 00:41:51,270
we need to isolate that things without a

00:41:47,850 --> 00:41:53,670
huge impact in our core architecture I

00:41:51,270 --> 00:41:56,670
mean I don't want to say okay agent one

00:41:53,670 --> 00:41:59,730
is for business intelligence and agent 2

00:41:56,670 --> 00:42:03,510
and 3 is for processing we want to get

00:41:59,730 --> 00:42:09,960
over that and we use it as the end that

00:42:03,510 --> 00:42:19,680
is a cool way to isolate containers is

00:42:09,960 --> 00:42:29,070
that a good thank you thank you so the

00:42:19,680 --> 00:42:31,410
question thank you for coming this is

00:42:29,070 --> 00:42:34,530
the slide mandatory for a company if we

00:42:31,410 --> 00:42:38,480
want to be part of these have some team

00:42:34,530 --> 00:42:42,510
please send us an email with your

00:42:38,480 --> 00:42:44,430
curriculum and we try to help you so

00:42:42,510 --> 00:42:45,530
thank you for coming and enjoy the

00:42:44,430 --> 00:42:51,289
conference

00:42:45,530 --> 00:42:51,289

YouTube URL: https://www.youtube.com/watch?v=7ss068Ll3DI


