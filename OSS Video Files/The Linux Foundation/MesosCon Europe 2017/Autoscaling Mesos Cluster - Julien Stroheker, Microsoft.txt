Title: Autoscaling Mesos Cluster - Julien Stroheker, Microsoft
Publication date: 2017-10-31
Playlist: MesosCon Europe 2017
Description: 
	Autoscaling Mesos Cluster - Julien Stroheker, Microsoft

About Julien Stroheker
Hi! I am Julien Stroheker and I am working at Microsoft as a Software Developer Engineer on DevOps. I like talking and sharing about how Dev and Ops can be better together and work as a strong team. From a Ops background profile, I am trying to become a better developer to have a thorough understanding about this DevOps thing.
Captions: 
	00:00:00,030 --> 00:00:07,849
so welcome again for people who already

00:00:03,959 --> 00:00:11,190
saw me yesterday that my second session

00:00:07,849 --> 00:00:13,500
my name is Rehan striker as you can

00:00:11,190 --> 00:00:15,150
heard I'm gonna do the the same joke

00:00:13,500 --> 00:00:18,510
this morning people wasn't sent from

00:00:15,150 --> 00:00:20,840
France so I'm originally from France

00:00:18,510 --> 00:00:23,220
born in in in Montpellier in France

00:00:20,840 --> 00:00:28,019
living in Montreal now Canada and

00:00:23,220 --> 00:00:29,730
working for Microsoft Seattle I have a

00:00:28,019 --> 00:00:32,160
lot of fun working for Microsoft I'd

00:00:29,730 --> 00:00:34,920
like to say that I'm paying to have fun

00:00:32,160 --> 00:00:40,290
with open-source technology and mostly

00:00:34,920 --> 00:00:44,070
focus on DevOps technologies and part of

00:00:40,290 --> 00:00:49,020
division called CSC for customer success

00:00:44,070 --> 00:00:51,180
engagement I think we just change we

00:00:49,020 --> 00:00:53,550
just have a really good reorganization

00:00:51,180 --> 00:00:55,710
we change the name so that's why but the

00:00:53,550 --> 00:01:01,379
idea is to engage with customer with who

00:00:55,710 --> 00:01:02,969
is using Azure and give to kind of to be

00:01:01,379 --> 00:01:04,799
kind of this feedback loop with the

00:01:02,969 --> 00:01:07,080
ingenuity team so and gave you with

00:01:04,799 --> 00:01:09,720
partner and customer and give the

00:01:07,080 --> 00:01:11,369
feedback to generate team mainly focus

00:01:09,720 --> 00:01:16,229
on open source technologies so it's a

00:01:11,369 --> 00:01:18,299
lot of fun I really enjoyed it so yeah

00:01:16,229 --> 00:01:21,930
today I'm going to talk about auto

00:01:18,299 --> 00:01:25,619
scaling measures cluster so the agenda

00:01:21,930 --> 00:01:28,799
for this 45 minute I think a little bit

00:01:25,619 --> 00:01:31,470
of comped concepts I'm gonna share the

00:01:28,799 --> 00:01:36,000
code actually so a few slides and most

00:01:31,470 --> 00:01:37,740
of the like like I like to to to do all

00:01:36,000 --> 00:01:39,720
my presentation it's most of the

00:01:37,740 --> 00:01:43,470
presentation will be like live demo and

00:01:39,720 --> 00:01:45,659
code so few slides basically and then we

00:01:43,470 --> 00:01:49,770
can switch to the to the presentation to

00:01:45,659 --> 00:01:52,710
the demo so a little bit of context like

00:01:49,770 --> 00:01:55,590
I said because most of my time at

00:01:52,710 --> 00:01:58,979
Microsoft I'm engaging and doing code

00:01:55,590 --> 00:02:03,659
with customer and partners one of them

00:01:58,979 --> 00:02:07,200
asked me a way to do auto scaling on

00:02:03,659 --> 00:02:10,379
DCOs and on Azure so the code that I'm

00:02:07,200 --> 00:02:11,760
going to show you and so yeah the code

00:02:10,379 --> 00:02:13,830
I'm going to show you it's part of that

00:02:11,760 --> 00:02:15,930
it's kind of proof of concept

00:02:13,830 --> 00:02:18,150
I cannot share the code of the customer

00:02:15,930 --> 00:02:20,490
for sure but I try to extract that and

00:02:18,150 --> 00:02:25,050
play with that and to share that to make

00:02:20,490 --> 00:02:27,210
that open source so it's from a POC di D

00:02:25,050 --> 00:02:29,490
behind us is to leverage any cloud

00:02:27,210 --> 00:02:32,700
private or public and be able to auto

00:02:29,490 --> 00:02:34,860
scale so I don't really like this world

00:02:32,700 --> 00:02:38,220
because auto scale comes in magic and

00:02:34,860 --> 00:02:40,530
the problem or I mean yeah the problem

00:02:38,220 --> 00:02:42,900
of the test getting there is no magic

00:02:40,530 --> 00:02:46,140
way to do to scaling because I'm pretty

00:02:42,900 --> 00:02:48,480
sure that if there is one y is not in

00:02:46,140 --> 00:02:52,730
the product today y is not on on G cos

00:02:48,480 --> 00:02:56,580
on I mean on mezzos auto scaling it's a

00:02:52,730 --> 00:03:00,150
huge not problem but it's a juice

00:02:56,580 --> 00:03:02,760
aspects you can scale depending CPU GPUs

00:03:00,150 --> 00:03:05,940
RAM throughput or networking or whatever

00:03:02,760 --> 00:03:12,560
so it's a custom custom scenario for

00:03:05,940 --> 00:03:14,880
each so each K is actually so that one

00:03:12,560 --> 00:03:17,910
because we want to keep that simple for

00:03:14,880 --> 00:03:21,930
the five minutes again I'm gonna just

00:03:17,910 --> 00:03:25,080
share my vision about this code and take

00:03:21,930 --> 00:03:29,459
this easier and sip simple scenario so

00:03:25,080 --> 00:03:31,350
yeah I like to do the joke that because

00:03:29,459 --> 00:03:34,200
I'm working my Microsoft I'll to do some

00:03:31,350 --> 00:03:36,720
marketing slides and again that the same

00:03:34,200 --> 00:03:38,040
that I presented yesterday just to give

00:03:36,720 --> 00:03:40,769
you a little concept I don't know if

00:03:38,040 --> 00:03:43,670
here people using Azure in the room yes

00:03:40,769 --> 00:03:43,670
no Wow

00:03:44,810 --> 00:03:49,860
so yeah so I think it's good just to

00:03:48,090 --> 00:03:52,440
explain that seeing on Azure we have

00:03:49,860 --> 00:03:54,750
this service called ACS we stand for our

00:03:52,440 --> 00:03:59,340
container services it's just a way to

00:03:54,750 --> 00:04:02,640
deploy any Orchestrator any yeah okay

00:03:59,340 --> 00:04:05,880
sweet also docker suam kubernetes and D

00:04:02,640 --> 00:04:08,010
cos the cool thing is for example for D

00:04:05,880 --> 00:04:10,500
cos we work in close with mesosphere and

00:04:08,010 --> 00:04:15,600
when you deploy a GCS cluster it's a

00:04:10,500 --> 00:04:17,880
cluster backed and maintained by I mean

00:04:15,600 --> 00:04:20,160
supported by Microsoft and mesosphere on

00:04:17,880 --> 00:04:22,590
the best practices and something for the

00:04:20,160 --> 00:04:23,940
other provider so we call that ACS as a

00:04:22,590 --> 00:04:26,160
container services we have bunch of

00:04:23,940 --> 00:04:27,300
different services all natural we just

00:04:26,160 --> 00:04:31,340
announced a new one

00:04:27,300 --> 00:04:34,080
IKS and for for our community services

00:04:31,340 --> 00:04:36,180
but we have a branch bunch of services

00:04:34,080 --> 00:04:39,449
around contamination

00:04:36,180 --> 00:04:42,270
so that's ACS and on the other way we

00:04:39,449 --> 00:04:44,099
also have an open source one so when

00:04:42,270 --> 00:04:46,560
you're deploying and using SES here

00:04:44,099 --> 00:04:48,990
basically it's the Microsoft way you can

00:04:46,560 --> 00:04:51,500
go on the portal or using the CLI click

00:04:48,990 --> 00:04:54,690
Next next you have a bunch of different

00:04:51,500 --> 00:04:57,060
interface so this is my cluster I want

00:04:54,690 --> 00:04:59,699
three master five nodes this is the

00:04:57,060 --> 00:05:02,310
cider one and so on and so on and that's

00:04:59,699 --> 00:05:04,800
it so we're doing all the magics for you

00:05:02,310 --> 00:05:07,289
but if you want a custom configuration

00:05:04,800 --> 00:05:10,050
like including v-net integration you

00:05:07,289 --> 00:05:13,169
want to GPU so an specific version of

00:05:10,050 --> 00:05:15,949
DCOs communities and so on we just open

00:05:13,169 --> 00:05:20,430
source also the the engine behind this

00:05:15,949 --> 00:05:22,289
magic on the power and see on SES so if

00:05:20,430 --> 00:05:24,810
we call that acs engine so if you want a

00:05:22,289 --> 00:05:28,560
custom deployment you can still do that

00:05:24,810 --> 00:05:30,479
use the SES engine make sense so

00:05:28,560 --> 00:05:32,639
basically how it worked with ICS engine

00:05:30,479 --> 00:05:35,990
you just have to define so I try to

00:05:32,639 --> 00:05:39,569
split it but it's just of 50 lines of

00:05:35,990 --> 00:05:41,190
JSON file so you just define the

00:05:39,569 --> 00:05:43,529
structure that you want to deploy on

00:05:41,190 --> 00:05:46,349
Azure so here you have some mandatory

00:05:43,529 --> 00:05:47,789
options so I want to use gcos so you can

00:05:46,349 --> 00:05:50,759
also specify the version if you want I

00:05:47,789 --> 00:05:52,680
want one master and then you you can

00:05:50,759 --> 00:05:56,789
specify a one bunch of different nodes

00:05:52,680 --> 00:05:58,590
and your public key and that's it you

00:05:56,789 --> 00:06:00,169
just passed us to say SES engine is

00:05:58,590 --> 00:06:02,580
going to generate and talk to the API

00:06:00,169 --> 00:06:04,919
being the sinner then deploy everything

00:06:02,580 --> 00:06:08,190
all the VMS the networking the storage

00:06:04,919 --> 00:06:10,169
and so this is what actually I'm gonna

00:06:08,190 --> 00:06:13,560
use for my demo and the thing that I

00:06:10,169 --> 00:06:15,419
want to insist here I want to insist on

00:06:13,560 --> 00:06:18,779
the fact that I'm using custom node a

00:06:15,419 --> 00:06:20,729
custom labelled sorry for mezzos so I'm

00:06:18,779 --> 00:06:24,270
deploying three different agent pool so

00:06:20,729 --> 00:06:29,580
basically three stack of nodes if I can

00:06:24,270 --> 00:06:34,139
say that so three times sorry three

00:06:29,580 --> 00:06:34,830
times the the G's VM which is a standard

00:06:34,139 --> 00:06:37,229
d 2v2

00:06:34,830 --> 00:06:39,389
it's two CPU on add row so two CPU for

00:06:37,229 --> 00:06:41,129
use of RAM so I want three time that one

00:06:39,389 --> 00:06:44,309
and for that one I want to

00:06:41,129 --> 00:06:47,669
to also include the tag the mezzo star

00:06:44,309 --> 00:06:48,929
the constrain for workload with the

00:06:47,669 --> 00:06:49,469
value stateful you can understand that

00:06:48,929 --> 00:06:52,259
later

00:06:49,469 --> 00:06:54,209
same thing for stateless and I also have

00:06:52,259 --> 00:06:55,919
the public note somewhere here three

00:06:54,209 --> 00:06:57,719
pivot notes so the cool thing with that

00:06:55,919 --> 00:06:58,949
you can change the parameters pass that

00:06:57,719 --> 00:07:00,839
to assess engine and then it's going to

00:06:58,949 --> 00:07:04,139
deploy that for you

00:07:00,839 --> 00:07:05,759
again think about that 45 minutes so now

00:07:04,139 --> 00:07:08,489
40 minutes or 30 minutes

00:07:05,759 --> 00:07:10,610
the simpler easier scenario right so

00:07:08,489 --> 00:07:13,979
we're gonna focus only on the stateless

00:07:10,610 --> 00:07:16,550
workload because we're gonna I mean what

00:07:13,979 --> 00:07:18,839
I want first is to easily auto scale

00:07:16,550 --> 00:07:20,610
without any storage constraint for

00:07:18,839 --> 00:07:22,589
example we're not going to start to play

00:07:20,610 --> 00:07:24,869
with stateful sinai' all right here the

00:07:22,589 --> 00:07:28,619
ideas okay I want to be able to easy

00:07:24,869 --> 00:07:31,019
scale my CPU for example I want easily I

00:07:28,619 --> 00:07:33,179
want you to scale when I need more CPUs

00:07:31,019 --> 00:07:39,479
to the program application I want you to

00:07:33,179 --> 00:07:41,849
scale on that that matrix make sense so

00:07:39,479 --> 00:07:43,589
then when it's done pass that washer and

00:07:41,849 --> 00:07:46,110
a shrewd wins the magic for you like I

00:07:43,589 --> 00:07:49,919
said at the end you just bunch of VMs

00:07:46,110 --> 00:07:51,659
right master nodes like a storage right

00:07:49,919 --> 00:07:54,110
so if you're not using Azure the same

00:07:51,659 --> 00:07:57,179
thing on the WS and deceive basically

00:07:54,110 --> 00:08:00,209
and one signature seen here you remember

00:07:57,179 --> 00:08:02,759
of supposed to have three admin pool

00:08:00,209 --> 00:08:05,539
which on Azure we call that the VM skill

00:08:02,759 --> 00:08:08,759
set so bunch of VM together like that

00:08:05,539 --> 00:08:10,829
and here I tagged one with stateful when

00:08:08,759 --> 00:08:13,559
we stateless and we suppose a third one

00:08:10,829 --> 00:08:15,119
for the public agent right so on Azure

00:08:13,559 --> 00:08:16,919
is that thing here I don't know if you

00:08:15,119 --> 00:08:19,349
can see but it's as we called the VM

00:08:16,919 --> 00:08:23,099
skill set so one for D cos I John public

00:08:19,349 --> 00:08:23,909
another one for SFO stateful another one

00:08:23,099 --> 00:08:26,219
for stateless

00:08:23,909 --> 00:08:29,039
so I just click here for the steps last

00:08:26,219 --> 00:08:32,130
one and per default have three instances

00:08:29,039 --> 00:08:34,860
running on that one that's normal

00:08:32,130 --> 00:08:38,639
because I asked for three right so this

00:08:34,860 --> 00:08:44,850
is what I have on my deployment right

00:08:38,639 --> 00:08:46,980
now now it came to the code so I think I

00:08:44,850 --> 00:08:50,509
share on the slider URL of the code of

00:08:46,980 --> 00:08:53,399
my autoscaler so basically it's a Python

00:08:50,509 --> 00:08:55,140
tool let's say that I'm using click I

00:08:53,399 --> 00:08:57,180
don't know if you worry about this frame

00:08:55,140 --> 00:09:00,589
clicky just a cool from a Python

00:08:57,180 --> 00:09:03,240
framework to allows you to do CLI

00:09:00,589 --> 00:09:06,570
frameworks so this is the way I call

00:09:03,240 --> 00:09:08,519
that so here when I start to call that I

00:09:06,570 --> 00:09:11,490
say okay I don't want to do something

00:09:08,519 --> 00:09:13,380
just heard person compliant and related

00:09:11,490 --> 00:09:15,779
to add I want to be able for people if

00:09:13,380 --> 00:09:18,209
they want to also use the same logic for

00:09:15,779 --> 00:09:22,079
any cloud provider to be called private

00:09:18,209 --> 00:09:25,290
right so the ideas I'm using a provider

00:09:22,079 --> 00:09:28,500
so Mike is the azure and then I deploy a

00:09:25,290 --> 00:09:30,660
bunch of nodes so one for state last one

00:09:28,500 --> 00:09:32,670
for stateful and could be different

00:09:30,660 --> 00:09:36,000
constraint but again let's focus only on

00:09:32,670 --> 00:09:38,130
stateless yeah on that example for I

00:09:36,000 --> 00:09:40,800
want to be able ultimately to scale for

00:09:38,130 --> 00:09:43,019
for 4 plus 2 plus 2 plus 2 plus 2

00:09:40,800 --> 00:09:45,779
depends on the demand I want to scale up

00:09:43,019 --> 00:09:49,140
a scale down make sense so what I'm

00:09:45,779 --> 00:09:51,410
gonna do I say ok fine it's not really

00:09:49,140 --> 00:09:56,010
complicated I have to find a way to ask

00:09:51,410 --> 00:09:57,180
measures how many resources aha how many

00:09:56,010 --> 00:09:58,829
associate I want

00:09:57,180 --> 00:10:01,260
how many I'm consuming right now and

00:09:58,829 --> 00:10:04,470
then to the mat and talk to the provider

00:10:01,260 --> 00:10:06,060
first and I mean my class provider and

00:10:04,470 --> 00:10:07,440
the providers gotta say ok because using

00:10:06,060 --> 00:10:10,380
Azure this is the class that you want

00:10:07,440 --> 00:10:12,959
you to have to use and you're gonna say

00:10:10,380 --> 00:10:15,540
- ah sure ok scale up or scale down and

00:10:12,959 --> 00:10:17,160
then it come also the constrain you

00:10:15,540 --> 00:10:19,950
remember on my deployment I also

00:10:17,160 --> 00:10:22,230
specified some constraints so I have one

00:10:19,950 --> 00:10:26,100
for workload and workload a stateless

00:10:22,230 --> 00:10:27,899
and stateful why the constraint so when

00:10:26,100 --> 00:10:30,209
I'm doing the mass in term the mass on

00:10:27,899 --> 00:10:32,910
them of CPU conception I want to do that

00:10:30,209 --> 00:10:34,260
only on the state less one right we

00:10:32,910 --> 00:10:37,709
don't want to play with the stateful

00:10:34,260 --> 00:10:40,140
right now so on the code this year it

00:10:37,709 --> 00:10:44,820
works it's very very straightforward

00:10:40,140 --> 00:10:46,529
again kind of shitty code but it works I

00:10:44,820 --> 00:10:48,750
have a cluster class

00:10:46,529 --> 00:10:50,850
I was talking to provider class and that

00:10:48,750 --> 00:10:53,430
class talk to different provider on my

00:10:50,850 --> 00:10:56,040
cases are right so when you start the

00:10:53,430 --> 00:10:57,690
CLI you just have a switch option for

00:10:56,040 --> 00:11:00,029
provider and my case is a draw and

00:10:57,690 --> 00:11:01,920
because our show is gonna he knows that

00:11:00,029 --> 00:11:03,720
we doing a show and all the logic to

00:11:01,920 --> 00:11:07,199
scale up and scale down for our droids

00:11:03,720 --> 00:11:08,880
here and yeah that's very very state for

00:11:07,199 --> 00:11:11,040
one that guy's going to talk to us

00:11:08,880 --> 00:11:12,600
and then we come back he's gonna redo

00:11:11,040 --> 00:11:15,329
the match it's just a loop actually I

00:11:12,600 --> 00:11:18,389
have a timer every minute so every 10

00:11:15,329 --> 00:11:19,139
minutes for example ask missus I want to

00:11:18,389 --> 00:11:21,810
ask miss us

00:11:19,139 --> 00:11:24,060
the conception usage do the match again

00:11:21,810 --> 00:11:30,410
and then again send a request to my

00:11:24,060 --> 00:11:30,410
provider make sense so let's do the demo

00:11:35,740 --> 00:11:39,070
so first

00:11:44,110 --> 00:11:48,240
okay I put the link here

00:11:52,700 --> 00:11:55,900
so that's the code

00:11:57,330 --> 00:12:04,560
like I said three class classes cluster

00:12:00,420 --> 00:12:08,760
provider and provider either and my main

00:12:04,560 --> 00:12:11,490
file Python file actually and here I

00:12:08,760 --> 00:12:13,740
have all the option again I'm using the

00:12:11,490 --> 00:12:17,040
clique framework so this is all the

00:12:13,740 --> 00:12:21,660
options to specify so I'm not going to

00:12:17,040 --> 00:12:23,279
go deep on the code but at least I

00:12:21,660 --> 00:12:25,220
already explained what it's supposed to

00:12:23,279 --> 00:12:28,019
work if you want Oersted to have more

00:12:25,220 --> 00:12:31,829
explanation actually I try to describe

00:12:28,019 --> 00:12:34,160
oh it's walks and this is all the switch

00:12:31,829 --> 00:12:36,839
and all the option I have so for example

00:12:34,160 --> 00:12:39,029
after specify the provider name that one

00:12:36,839 --> 00:12:40,620
is monetary I am specifying that I want

00:12:39,029 --> 00:12:42,750
to add row that's the only one that I

00:12:40,620 --> 00:12:45,240
implemented why now if you want to

00:12:42,750 --> 00:12:47,040
implemented for a degree to see what

00:12:45,240 --> 00:12:50,279
whatever your model welcome to the pull

00:12:47,040 --> 00:12:52,920
request the timer so per default is

00:12:50,279 --> 00:12:55,320
every minute is gonna poke the API the

00:12:52,920 --> 00:12:57,450
missiles RPI but if you I want to have

00:12:55,320 --> 00:13:02,100
the 10 minutes 20 minutes latency I can

00:12:57,450 --> 00:13:04,860
also reduce or reduce that here call

00:13:02,100 --> 00:13:06,779
that is the cap so the trigger when I'm

00:13:04,860 --> 00:13:09,450
doing the math so for example if you

00:13:06,779 --> 00:13:13,890
consuming adipose have 80% of the CPU

00:13:09,450 --> 00:13:16,350
consumed by my application this is at

00:13:13,890 --> 00:13:18,300
the trigger the 80 percentage that is

00:13:16,350 --> 00:13:20,760
gonna scale up so again I can change

00:13:18,300 --> 00:13:22,740
that when I'm going to reach 50% for

00:13:20,760 --> 00:13:25,529
example my conception I can trigger the

00:13:22,740 --> 00:13:28,140
scale up or 60 or 75 for example that's

00:13:25,529 --> 00:13:31,350
the this option here same thing for the

00:13:28,140 --> 00:13:34,310
scale down okay if you want to abdomen

00:13:31,350 --> 00:13:37,110
the scale down actually I can also have

00:13:34,310 --> 00:13:39,329
specified a limitation right you can

00:13:37,110 --> 00:13:42,270
scale scale scale but maybe you don't

00:13:39,329 --> 00:13:45,360
want to scale 200,000 nodes so if I want

00:13:42,270 --> 00:13:48,810
to stop the tool to scale at maximum 20

00:13:45,360 --> 00:13:53,070
and something for the minimum three then

00:13:48,810 --> 00:13:55,140
for a sure if you I mean only one person

00:13:53,070 --> 00:13:58,620
using Azure here but the way to talk to

00:13:55,140 --> 00:14:00,029
the azure API is required at the SPN we

00:13:58,620 --> 00:14:01,500
stand for for service principle

00:14:00,029 --> 00:14:04,050
basically just the key

00:14:01,500 --> 00:14:06,300
password subscription ID and so on so

00:14:04,050 --> 00:14:09,209
for formation to be able to talk to the

00:14:06,300 --> 00:14:10,850
azure API so trigger action like scale

00:14:09,209 --> 00:14:14,740
at VM switch

00:14:10,850 --> 00:14:18,319
and so on the location and so that's

00:14:14,740 --> 00:14:20,480
last option here is really specific to

00:14:18,319 --> 00:14:21,709
the provider that we see so if you want

00:14:20,480 --> 00:14:24,170
to apply Mount Eddie blue s for example

00:14:21,709 --> 00:14:27,170
I'm pretty sure that afforded us

00:14:24,170 --> 00:14:28,639
you also have specific options that you

00:14:27,170 --> 00:14:30,699
have to specify so it's something that

00:14:28,639 --> 00:14:32,930
you can add something for GC and so on

00:14:30,699 --> 00:14:37,970
so this is how it works

00:14:32,930 --> 00:14:40,759
so I my cluster here deploy and again if

00:14:37,970 --> 00:14:43,639
you remember one master three times

00:14:40,759 --> 00:14:47,420
three different nodes for the public one

00:14:43,639 --> 00:14:49,490
application and stateful and status

00:14:47,420 --> 00:14:51,050
right so for example if I'm going that

00:14:49,490 --> 00:14:53,569
one that first OHS name if I'm going

00:14:51,050 --> 00:14:54,920
details you can see here on workload I

00:14:53,569 --> 00:14:57,620
don't know if you can see on the back

00:14:54,920 --> 00:15:00,139
can you see yeah so that one for example

00:14:57,620 --> 00:15:03,800
is a stateful node so we're not supposed

00:15:00,139 --> 00:15:06,139
to touch that one here we can if you

00:15:03,800 --> 00:15:08,779
want but I can say let's keep that

00:15:06,139 --> 00:15:11,389
simple same thing for the second one so

00:15:08,779 --> 00:15:13,160
here the way that I deployed a tornado a

00:15:11,389 --> 00:15:16,399
different subnet here so I know that

00:15:13,160 --> 00:15:19,569
that one one two three it's supposed to

00:15:16,399 --> 00:15:21,889
be the stateful one normally the next

00:15:19,569 --> 00:15:24,740
next one that one's supposed to be the

00:15:21,889 --> 00:15:28,399
state last actually so yeah we have the

00:15:24,740 --> 00:15:30,170
stateless node here and so on right so

00:15:28,399 --> 00:15:32,480
already deployed application actually

00:15:30,170 --> 00:15:40,370
that's my beautiful hello world

00:15:32,480 --> 00:15:43,490
application here and if just show you

00:15:40,370 --> 00:15:45,709
the mountain file here while I specify

00:15:43,490 --> 00:15:48,470
again let me know if you can see but I

00:15:45,709 --> 00:15:50,449
deployed that one only on the stateless

00:15:48,470 --> 00:15:52,459
so it's just a web application right no

00:15:50,449 --> 00:15:54,470
storage is not the stateful application

00:15:52,459 --> 00:15:58,430
that's the one that I want to handle I

00:15:54,470 --> 00:16:01,040
want to be able to scale any stateless

00:15:58,430 --> 00:16:04,250
workload because when I start with

00:16:01,040 --> 00:16:07,269
measures and DCOs and well you should I

00:16:04,250 --> 00:16:09,970
mean I guess it was something for you

00:16:07,269 --> 00:16:12,319
when you don't really understand that

00:16:09,970 --> 00:16:14,199
conception stuff right when you have to

00:16:12,319 --> 00:16:17,509
specify how many CPUs you need how many

00:16:14,199 --> 00:16:19,490
memory you need and sometime you deploy

00:16:17,509 --> 00:16:22,069
deploy and then you can see

00:16:19,490 --> 00:16:23,660
waiting yeah why do you wait I mean

00:16:22,069 --> 00:16:24,649
while we're waiting I have those

00:16:23,660 --> 00:16:27,319
available right

00:16:24,649 --> 00:16:28,879
but yeah when you say I want one CP for

00:16:27,319 --> 00:16:31,790
this application even if you're not

00:16:28,879 --> 00:16:35,809
consuming the CPU is going to block the

00:16:31,790 --> 00:16:39,949
CPU for this application right and here

00:16:35,809 --> 00:16:42,499
I'm running three three instances on my

00:16:39,949 --> 00:16:45,889
web so again back to my configuration

00:16:42,499 --> 00:16:48,800
here that one is just in terms of con

00:16:45,889 --> 00:16:50,329
system and asking for one CPUs for the

00:16:48,800 --> 00:16:53,899
session that means I'm consuming three

00:16:50,329 --> 00:16:56,149
CPUs again on my nose on my stateless

00:16:53,899 --> 00:16:59,209
note that three times as we call it d

00:16:56,149 --> 00:17:02,240
2v2 on Azure which is one VM one D to it

00:16:59,209 --> 00:17:08,720
so two CPUs so I mean of the total

00:17:02,240 --> 00:17:11,720
dahveed's come on guys six right so I

00:17:08,720 --> 00:17:20,529
basically consuming 50% of my CPU Z here

00:17:11,720 --> 00:17:20,529
right so let's watch my awesome

00:17:21,610 --> 00:17:27,529
autoscaler

00:17:23,500 --> 00:17:31,610
so here supposed to wall I could

00:17:27,529 --> 00:17:36,080
describe so I specify all my parameters

00:17:31,610 --> 00:17:40,909
here so then I'm crashing all the logs

00:17:36,080 --> 00:17:43,130
for debug reason so it just triggered

00:17:40,909 --> 00:17:46,370
and detect that is either the timer is

00:17:43,130 --> 00:17:48,320
ten seconds the scalar cap it's 80s that

00:17:46,370 --> 00:17:50,240
mean that when we get 80% of

00:17:48,320 --> 00:17:51,919
Constitution this is where when is going

00:17:50,240 --> 00:17:54,649
to trigger the scallops and sing for the

00:17:51,919 --> 00:17:58,000
scale down maximum node is twenty

00:17:54,649 --> 00:18:00,860
minimum is 3 the end point I'm gonna

00:17:58,000 --> 00:18:03,789
reach actually that's interesting

00:18:00,860 --> 00:18:06,919
this is where all the magic happened

00:18:03,789 --> 00:18:09,830
basically I'm curling that endpoint here

00:18:06,919 --> 00:18:11,990
if you don't know that this is where I'm

00:18:09,830 --> 00:18:14,120
grabbing all the resources so when I'm

00:18:11,990 --> 00:18:17,179
doing that here on the leader of

00:18:14,120 --> 00:18:18,740
measures slash slaves I have all the

00:18:17,179 --> 00:18:21,860
resources from the slave right and

00:18:18,740 --> 00:18:24,730
basically I'm passing this JSON file

00:18:21,860 --> 00:18:28,490
because that one from that one I can see

00:18:24,730 --> 00:18:33,049
the CPUs available the CPU consume it

00:18:28,490 --> 00:18:34,380
and so on and so on so back to my thing

00:18:33,049 --> 00:18:36,780
here

00:18:34,380 --> 00:18:39,750
and then bunch of financial information

00:18:36,780 --> 00:18:42,390
and then every ten seconds is going to

00:18:39,750 --> 00:18:44,640
poke the API and gonna check the

00:18:42,390 --> 00:18:49,110
conception so you remember the scallop

00:18:44,640 --> 00:18:54,799
cap it's 80% I'm consuming 50% no magic

00:18:49,110 --> 00:19:00,330
here right so let's go to one more here

00:18:54,799 --> 00:19:06,510
thief walks correctly I'm skating to

00:19:00,330 --> 00:19:08,940
four and we have sixty sixth right if

00:19:06,510 --> 00:19:17,159
I'm skating one more we supposed to

00:19:08,940 --> 00:19:19,200
still be good Oh 83 so now scallop

00:19:17,159 --> 00:19:21,929
kicked so now he's calling the provider

00:19:19,200 --> 00:19:23,520
the provider is calling so the operator

00:19:21,929 --> 00:19:25,440
knows that we using Azure so the

00:19:23,520 --> 00:19:27,929
providers going to call the provider a

00:19:25,440 --> 00:19:31,140
Joe classes and be on a scale so the way

00:19:27,929 --> 00:19:34,320
it's work on Azure you remember I talked

00:19:31,140 --> 00:19:40,620
about the VM scale set so it's supposed

00:19:34,320 --> 00:19:45,270
to to scale the correct one which is the

00:19:40,620 --> 00:19:48,900
DCOs - Bezos sl4 stateless and we

00:19:45,270 --> 00:19:51,450
suppose to scale from doing instances so

00:19:48,900 --> 00:19:53,370
it's creating instances here he's going

00:19:51,450 --> 00:19:55,500
to scale and the cool thing with ZM

00:19:53,370 --> 00:19:57,360
scale set is going to bootstrap the

00:19:55,500 --> 00:20:01,669
method sergeant and everything

00:19:57,360 --> 00:20:07,470
everything and then after few minutes

00:20:01,669 --> 00:20:09,809
we're supposed to see three more vm's

00:20:07,470 --> 00:20:11,820
here with the stateless tag and so on

00:20:09,809 --> 00:20:14,280
and then it's going to be able to deploy

00:20:11,820 --> 00:20:20,809
so here we just add ad but the idea is

00:20:14,280 --> 00:20:20,809
let's say we scale to something like 10

00:20:22,070 --> 00:20:30,630
he's going to deploy we have six

00:20:27,900 --> 00:20:34,020
instances right so it's waiting for more

00:20:30,630 --> 00:20:36,120
so the idea is gonna scale to twin all

00:20:34,020 --> 00:20:38,220
the nodes so that mean I'm gonna have or

00:20:36,120 --> 00:20:43,169
- no no - so note sorry so I'm gonna

00:20:38,220 --> 00:20:44,549
have four CPUs available for more CPUs

00:20:43,169 --> 00:20:46,950
available there is going to be able to

00:20:44,549 --> 00:20:48,000
deploy my application until ten and so

00:20:46,950 --> 00:20:51,510
so it's a easy

00:20:48,000 --> 00:20:53,670
way actually to scale again

00:20:51,510 --> 00:20:58,200
stateless application right just web app

00:20:53,670 --> 00:21:00,090
and the cool thing here it's supposed to

00:20:58,200 --> 00:21:03,120
also let the scale down so when we're

00:21:00,090 --> 00:21:05,700
gonna reach like under 20% Concepcion is

00:21:03,120 --> 00:21:09,180
going to do the same G opposite actually

00:21:05,700 --> 00:21:10,920
he's going to scale down to from six or

00:21:09,180 --> 00:21:13,140
eight and remember how many we suppose

00:21:10,920 --> 00:21:17,760
twelve to two less and so on and so on

00:21:13,140 --> 00:21:20,580
right so I just a cheap way to save

00:21:17,760 --> 00:21:24,780
money on cloud provider right and again

00:21:20,580 --> 00:21:28,080
stateless application like I said auto

00:21:24,780 --> 00:21:30,090
scaling is very complicated I don't know

00:21:28,080 --> 00:21:34,950
if you're bad at Microsoft we work with

00:21:30,090 --> 00:21:36,720
a company called open AI it was more

00:21:34,950 --> 00:21:40,920
kubernetes but just the story about that

00:21:36,720 --> 00:21:44,280
it's we developed their own way to auto

00:21:40,920 --> 00:21:46,290
scale GPU training so open AI pretty

00:21:44,280 --> 00:21:49,500
sure you're about that so the player the

00:21:46,290 --> 00:21:51,720
the guys who played dota 2 and machine

00:21:49,500 --> 00:21:55,650
beats the best player in the world at

00:21:51,720 --> 00:21:57,840
that game so and yeah everything was

00:21:55,650 --> 00:22:00,930
hosted on Azure but the story about that

00:21:57,840 --> 00:22:03,570
we developed the own auto scaling model

00:22:00,930 --> 00:22:06,090
based on bunch of different scenario

00:22:03,570 --> 00:22:09,450
like networking storage and everything

00:22:06,090 --> 00:22:11,610
everything and I asked on generating why

00:22:09,450 --> 00:22:13,110
we didn't like not open source but

00:22:11,610 --> 00:22:14,580
include that in the product because it's

00:22:13,110 --> 00:22:17,040
a good story it's supposed to be cool

00:22:14,580 --> 00:22:20,340
also maybe gonna help also provide other

00:22:17,040 --> 00:22:22,650
customer it was to custom fault for the

00:22:20,340 --> 00:22:24,630
needs and this is what we engage the

00:22:22,650 --> 00:22:27,630
conversation about that we also have the

00:22:24,630 --> 00:22:30,240
same kind of code for suam and

00:22:27,630 --> 00:22:33,240
communities on open source ed actually

00:22:30,240 --> 00:22:35,490
but again we still stuck to one can of

00:22:33,240 --> 00:22:36,900
resources on that case its CPUs but

00:22:35,490 --> 00:22:38,760
maybe you want to scale for GPUs for

00:22:36,900 --> 00:22:40,890
example GPUs make sense or so because

00:22:38,760 --> 00:22:42,690
it's very very expensive so maybe we

00:22:40,890 --> 00:22:44,970
want to be able to scale GPUs

00:22:42,690 --> 00:22:49,320
launch the training right and then shut

00:22:44,970 --> 00:22:50,850
down all the VM so that's just the

00:22:49,320 --> 00:22:54,570
concept and the idea of that so let's

00:22:50,850 --> 00:22:57,070
see I thought to talk to just to to wait

00:22:54,570 --> 00:22:59,809
before the

00:22:57,070 --> 00:23:01,730
okay scurrying let's see on a shirt so

00:22:59,809 --> 00:23:03,169
it's grading raining so I guess now is

00:23:01,730 --> 00:23:09,890
bootstrapping like all the meadows and

00:23:03,169 --> 00:23:13,100
DCOs bits as you maybe not

00:23:09,890 --> 00:23:17,059
no ties it's the way that I did that for

00:23:13,100 --> 00:23:22,940
now it's just a docker code will you be

00:23:17,059 --> 00:23:26,150
running on a master right but it should

00:23:22,940 --> 00:23:29,149
be really easy to push that and deploy

00:23:26,150 --> 00:23:31,070
that on the cluster and the franciene

00:23:29,149 --> 00:23:35,120
door so that I did our so Creator

00:23:31,070 --> 00:23:38,029
universe package so normally yeah so

00:23:35,120 --> 00:23:39,470
basically here on the package it's

00:23:38,029 --> 00:23:41,809
basically the same thing that is going

00:23:39,470 --> 00:23:43,580
to ask you for the service in the

00:23:41,809 --> 00:23:45,919
provider name the scalp threshold and so

00:23:43,580 --> 00:23:52,880
on and so on for now we only have just a

00:23:45,919 --> 00:23:54,980
sure but it's the beginning of the way

00:23:52,880 --> 00:23:57,340
to run that inside DCOs for now it's

00:23:54,980 --> 00:24:00,770
again doctor on the master really ugly

00:23:57,340 --> 00:24:02,899
but I'm pretty confident that it should

00:24:00,770 --> 00:24:08,450
be able to work also on the inside the

00:24:02,899 --> 00:24:10,460
cluster let's see what we have here okay

00:24:08,450 --> 00:24:12,730
we're going to wait anyway do you have

00:24:10,460 --> 00:24:16,520
any question in the meantime

00:24:12,730 --> 00:24:18,950
who is doing auto scaling right now this

00:24:16,520 --> 00:24:24,620
is okay which way we're doing that or so

00:24:18,950 --> 00:24:27,710
custom code I guess or okay sorry okay

00:24:24,620 --> 00:24:30,289
based on I saw you they say the raining

00:24:27,710 --> 00:24:32,659
and the own code right to tow to scale

00:24:30,289 --> 00:24:35,020
based on what still based on the

00:24:32,659 --> 00:24:47,600
resources available on the cluster or

00:24:35,020 --> 00:24:49,520
yeah dependent on like a metric that the

00:24:47,600 --> 00:24:56,620
service owner asked for and clusters

00:24:49,520 --> 00:24:56,620
then we scale based on CPUs okay

00:25:00,049 --> 00:25:10,110
yeah yeah deerskin yeah it it's tricky

00:25:07,590 --> 00:25:12,299
right because you you get into this

00:25:10,110 --> 00:25:14,010
situation where you're tracking a lot

00:25:12,299 --> 00:25:16,740
more things and just CPU and memory I

00:25:14,010 --> 00:25:18,600
think in in marathon for example like

00:25:16,740 --> 00:25:20,940
what defines whether a task is waiting

00:25:18,600 --> 00:25:22,590
or not depends on like whether it can

00:25:20,940 --> 00:25:25,590
get an offer with all the things it

00:25:22,590 --> 00:25:27,269
needs and those could be CPU memory pu

00:25:25,590 --> 00:25:30,779
but they can also be like attributes so

00:25:27,269 --> 00:25:34,320
it could be like tags for a specific OS

00:25:30,779 --> 00:25:36,539
or tags for a specific region or

00:25:34,320 --> 00:25:40,139
something so yeah our autoscaler still

00:25:36,539 --> 00:25:41,820
kind of done it it will do handle CPU

00:25:40,139 --> 00:25:45,110
memory or other things like that where

00:25:41,820 --> 00:25:48,149
we can just like scale on the worst one

00:25:45,110 --> 00:25:50,970
yeah exactly that and that's also a good

00:25:48,149 --> 00:25:53,039
point why people use it I mean one of

00:25:50,970 --> 00:25:54,570
the reason we were using cloud public

00:25:53,039 --> 00:25:56,250
cloud actually is to be able to also to

00:25:54,570 --> 00:25:58,049
scale on different region right and

00:25:56,250 --> 00:26:01,110
sometimes I want to scale on different

00:25:58,049 --> 00:26:02,700
region not only mike has Westar up so

00:26:01,110 --> 00:26:05,490
it's also maybe it's also a good point

00:26:02,700 --> 00:26:07,710
at something that we want to watch and

00:26:05,490 --> 00:26:10,260
again just not CPU if you check the code

00:26:07,710 --> 00:26:12,750
it's only maybe 200 line of code it's

00:26:10,260 --> 00:26:15,240
very very simple but again the idea of

00:26:12,750 --> 00:26:18,960
the session because end of the last day

00:26:15,240 --> 00:26:21,929
right just to share again just to give

00:26:18,960 --> 00:26:24,840
some ideas and the fun thing I didn't

00:26:21,929 --> 00:26:27,570
find any open source code about that so

00:26:24,840 --> 00:26:29,159
I saw this could be fun just to at least

00:26:27,570 --> 00:26:31,049
publish something and people can start

00:26:29,159 --> 00:26:33,389
from that because in my case was the

00:26:31,049 --> 00:26:38,669
case with my customer to start from that

00:26:33,389 --> 00:26:41,309
and they kind of did the same thing but

00:26:38,669 --> 00:26:42,659
custom did not use my code I mean that

00:26:41,309 --> 00:26:44,340
was the deal right but they doing that

00:26:42,659 --> 00:26:46,350
on OpenStack and hydro

00:26:44,340 --> 00:26:48,120
so the private cloud that they are using

00:26:46,350 --> 00:26:50,850
OpenStack and they using Azure on the

00:26:48,120 --> 00:26:53,460
big one yes so our code is open source

00:26:50,850 --> 00:26:55,260
and but I like like you said it's a very

00:26:53,460 --> 00:27:00,149
specific problem to your void

00:26:55,260 --> 00:27:01,980
organization supports AWS and I mean

00:27:00,149 --> 00:27:03,059
people would be free to try and use it

00:27:01,980 --> 00:27:07,049
but whether they would get it working

00:27:03,059 --> 00:27:09,560
and without our infrastructure is is

00:27:07,049 --> 00:27:12,200
questionable I guess yeah yeah

00:27:09,560 --> 00:27:14,990
Kota thanks for sharing so yeah in the

00:27:12,200 --> 00:27:18,680
meantime yeah in the back in the

00:27:14,990 --> 00:27:23,980
meantime I have a new guy here no that's

00:27:18,680 --> 00:27:32,030
not the correct one yeah it's coming joy

00:27:23,980 --> 00:27:34,550
yeah in the back question wait for the

00:27:32,030 --> 00:27:37,130
mic here and please share guys like I

00:27:34,550 --> 00:27:39,020
said it could be just if you wanna share

00:27:37,130 --> 00:27:42,230
something about the topics that was also

00:27:39,020 --> 00:27:45,140
the idea why mesosphere asked me to do

00:27:42,230 --> 00:27:47,120
this tour because I stopped and engaged

00:27:45,140 --> 00:27:49,070
on that topic but the idea torso to

00:27:47,120 --> 00:27:51,320
share and if we have like multiple

00:27:49,070 --> 00:27:54,320
feedback we can also talk with them with

00:27:51,320 --> 00:27:56,210
mesosphere about the on the topics right

00:27:54,320 --> 00:27:59,660
so so yeah question

00:27:56,210 --> 00:28:01,910
yeah my question was a really you are

00:27:59,660 --> 00:28:03,710
you are no unlink

00:28:01,910 --> 00:28:06,200
stateless stuff but you are also doing

00:28:03,710 --> 00:28:09,040
another thing which is partitioning your

00:28:06,200 --> 00:28:11,720
cluster into two parts actually yeah so

00:28:09,040 --> 00:28:14,000
meaning that okay it might be

00:28:11,720 --> 00:28:18,680
interesting for if you have very very

00:28:14,000 --> 00:28:21,490
large stateless load and you want to

00:28:18,680 --> 00:28:24,140
split your cluster into two but

00:28:21,490 --> 00:28:28,460
sometimes it's small maybe mixed and

00:28:24,140 --> 00:28:29,930
that or do you have any ideas oh yeah so

00:28:28,460 --> 00:28:31,940
yeah that's a good point here it's very

00:28:29,930 --> 00:28:34,490
very straightforward reading one tag and

00:28:31,940 --> 00:28:37,850
just to the math on that actually on the

00:28:34,490 --> 00:28:40,880
on the repo I think it's British let me

00:28:37,850 --> 00:28:43,610
check yeah future resource tracker so

00:28:40,880 --> 00:28:47,210
it's another branch so when I was

00:28:43,610 --> 00:28:49,790
motivated that I start this dissing it

00:28:47,210 --> 00:28:52,820
was kind of its kind of the v-2 on that

00:28:49,790 --> 00:28:55,550
so be able to track all the tags that

00:28:52,820 --> 00:28:57,770
you want to watch actually so just not

00:28:55,550 --> 00:29:01,880
one but be able to say I want to watch

00:28:57,770 --> 00:29:06,290
like CPU or memory CPU mmm CPU GPU but

00:29:01,880 --> 00:29:07,970
also I want you to tag like so the I

00:29:06,290 --> 00:29:10,640
want to check the tags or the state last

00:29:07,970 --> 00:29:12,950
one but also that tag so maybe and that

00:29:10,640 --> 00:29:15,080
way you can combine I mean that's just

00:29:12,950 --> 00:29:18,830
something I have in mine right but you

00:29:15,080 --> 00:29:20,090
can combine ok that node or VM or and VM

00:29:18,830 --> 00:29:22,340
scale set or whatever is going to add a

00:29:20,090 --> 00:29:24,620
stateless tag but also I don't know

00:29:22,340 --> 00:29:26,840
GPU tag or you can have custom tag write

00:29:24,620 --> 00:29:29,120
and do the the matters on that one if

00:29:26,840 --> 00:29:31,610
you want yeah but my point is more about

00:29:29,120 --> 00:29:34,640
in order to do that you have to have

00:29:31,610 --> 00:29:36,080
strict conditions regarding resource and

00:29:34,640 --> 00:29:40,429
location on the messers cluster for

00:29:36,080 --> 00:29:43,460
instance knows that full node no state

00:29:40,429 --> 00:29:47,809
full application will insulin instead

00:29:43,460 --> 00:29:50,779
stateless node otherwise when you when

00:29:47,809 --> 00:29:53,000
you decrease the size of your stateless

00:29:50,779 --> 00:29:55,909
application you are about to kill some

00:29:53,000 --> 00:29:58,279
state full application yeah so basically

00:29:55,909 --> 00:30:01,370
you are doing your spit in your cluster

00:29:58,279 --> 00:30:03,549
into two parts yeah and maybe it's not a

00:30:01,370 --> 00:30:06,470
good practice yeah you're right here and

00:30:03,549 --> 00:30:09,649
the thing is it would be probably

00:30:06,470 --> 00:30:13,399
possible to explore for instance the

00:30:09,649 --> 00:30:15,890
tags on the on each yeah deploy node to

00:30:13,399 --> 00:30:18,830
see whether an application is a stateful

00:30:15,890 --> 00:30:20,570
lost atlas on may i destroys this not

00:30:18,830 --> 00:30:22,039
for instance but in this case you have

00:30:20,570 --> 00:30:24,770
another issue which is fragmentation

00:30:22,039 --> 00:30:27,110
yeah yeah you have to repack the stuff

00:30:24,770 --> 00:30:29,830
and I got to pond and a way that just

00:30:27,110 --> 00:30:32,360
confirm it the pond I said that custom

00:30:29,830 --> 00:30:35,299
there is no magic way to auto scale

00:30:32,360 --> 00:30:39,020
right it's just a way and again the

00:30:35,299 --> 00:30:42,200
easier 45 minutes way to do that but

00:30:39,020 --> 00:30:46,250
yeah totally agree with you you can I

00:30:42,200 --> 00:30:50,630
mean on that code I can add more that's

00:30:46,250 --> 00:30:53,630
a smart way to to scale like reading

00:30:50,630 --> 00:30:56,000
like the I don't know the viable so

00:30:53,630 --> 00:30:57,980
whatever I want to the name or but yeah

00:30:56,000 --> 00:31:00,649
I'm totally with you with that I mean

00:30:57,980 --> 00:31:02,570
fermentation is one point here and maybe

00:31:00,649 --> 00:31:04,970
not the best way to do that but again 45

00:31:02,570 --> 00:31:22,520
minutes north and are you doing auto

00:31:04,970 --> 00:31:27,440
scaling yeah yeah right just a few

00:31:22,520 --> 00:31:30,649
remarks yeah the first one is there is a

00:31:27,440 --> 00:31:34,520
Mersenne lb autoscale project which aims

00:31:30,649 --> 00:31:35,870
to scale application on top person to me

00:31:34,520 --> 00:31:38,360
your project is a good

00:31:35,870 --> 00:31:41,360
tension of that one because basically

00:31:38,360 --> 00:31:44,990
when you're blocked because of resources

00:31:41,360 --> 00:31:47,420
purpose to schedule on top of the

00:31:44,990 --> 00:31:50,350
message Crestor you can act at the

00:31:47,420 --> 00:31:54,140
underlying level meaning that you can

00:31:50,350 --> 00:31:55,820
increase your cluster size yeah because

00:31:54,140 --> 00:32:00,800
you're blocked in increasing number of

00:31:55,820 --> 00:32:02,780
instance due to resource week yeah yeah

00:32:00,800 --> 00:32:04,850
that's a good point and also the thing

00:32:02,780 --> 00:32:07,190
on I mean on I know where where's our

00:32:04,850 --> 00:32:08,870
show right I don't know about Amazon and

00:32:07,190 --> 00:32:10,610
also cloud provider but this thing on

00:32:08,870 --> 00:32:12,700
the VM scale said the idea of the VM

00:32:10,610 --> 00:32:15,320
scale set on Azure is to be able to

00:32:12,700 --> 00:32:18,110
automatically auto scale actually so we

00:32:15,320 --> 00:32:20,000
have this magic switch Budin to okay

00:32:18,110 --> 00:32:22,970
auto scale for me but the problem of

00:32:20,000 --> 00:32:25,400
that it's as you're gonna read the the

00:32:22,970 --> 00:32:26,780
CPU consumption of the VM by itself you

00:32:25,400 --> 00:32:29,270
know what I mean it's not going to be

00:32:26,780 --> 00:32:31,720
able to read like math on or or measles

00:32:29,270 --> 00:32:34,670
right this is why we need that tool and

00:32:31,720 --> 00:32:37,280
yeah totally agree I also saw this

00:32:34,670 --> 00:32:39,610
project and again I'm not in the

00:32:37,280 --> 00:32:42,440
engineering team that also one reason I

00:32:39,610 --> 00:32:44,750
am not in the Microsoft Azure engine

00:32:42,440 --> 00:32:46,910
regime right my work is to engage with

00:32:44,750 --> 00:32:49,309
customers so unfortunately I don't have

00:32:46,910 --> 00:32:52,160
time to invest a lot of time on that

00:32:49,309 --> 00:32:54,650
project I would love to but but yeah

00:32:52,160 --> 00:32:59,390
that's a very good point okay and the

00:32:54,650 --> 00:33:02,330
signal remark was our intuition so far

00:32:59,390 --> 00:33:06,800
and creature is that you have to gather

00:33:02,330 --> 00:33:10,010
more business metrics to start really

00:33:06,800 --> 00:33:13,130
doing auto scaling and if you want to

00:33:10,010 --> 00:33:14,530
push this thing really far potentially

00:33:13,130 --> 00:33:17,030
you have to apply some machine learning

00:33:14,530 --> 00:33:18,200
stuff on top of that yeah meaning that

00:33:17,030 --> 00:33:23,420
you have to understand what's the

00:33:18,200 --> 00:33:25,670
pattern and to act upon conditions yeah

00:33:23,420 --> 00:33:29,240
and we know that executing people loves

00:33:25,670 --> 00:33:31,309
dashboard right metrics so yeah that's

00:33:29,240 --> 00:33:34,280
agree and our so like the talk this

00:33:31,309 --> 00:33:37,429
morning about I mean I never heard about

00:33:34,280 --> 00:33:40,490
that before you talk about the poor

00:33:37,429 --> 00:33:42,200
being or whatever just been clicking the

00:33:40,490 --> 00:33:43,640
a meatpacking and that's I mean that's

00:33:42,200 --> 00:33:44,929
awesome I mean the concept is awesome

00:33:43,640 --> 00:33:45,560
I'm pretty sure that execute people

00:33:44,929 --> 00:33:47,520
would love that

00:33:45,560 --> 00:33:49,590
but it's

00:33:47,520 --> 00:33:52,740
I think it's pretty tough matrix to

00:33:49,590 --> 00:33:54,539
reach right so two together I mean to

00:33:52,740 --> 00:33:58,500
have the correct math on that and which

00:33:54,539 --> 00:34:00,690
the correct execution of if at some

00:33:58,500 --> 00:34:02,850
point we are able to do that for sure

00:34:00,690 --> 00:34:06,240
you have to prepare this operation

00:34:02,850 --> 00:34:08,490
carefully and also have a lot of insight

00:34:06,240 --> 00:34:11,520
really the business and new applications

00:34:08,490 --> 00:34:13,349
yeah I'm q-switch Joel I mean our people

00:34:11,520 --> 00:34:15,240
is open question which tool are using to

00:34:13,349 --> 00:34:17,730
a food matrix I'm using Pro materials or

00:34:15,240 --> 00:34:32,490
I don't know which which yeah primitives

00:34:17,730 --> 00:34:39,589
yeah here the guys know any and do the

00:34:32,490 --> 00:34:39,589
wrong way no dashboard and okay

00:34:44,830 --> 00:34:53,770
okay and we also ingest a lot of logs

00:34:50,170 --> 00:34:54,910
and stuff into Splunk okay yes and that

00:34:53,770 --> 00:35:02,020
provides some useful metrics as well

00:34:54,910 --> 00:35:06,130
okay yeah so that's it for me guys

00:35:02,020 --> 00:35:10,120
if you have other thing I wanna share a

00:35:06,130 --> 00:35:14,380
question whatever No

00:35:10,120 --> 00:35:18,100
so if you want to reach me my twitter

00:35:14,380 --> 00:35:21,190
that one or I think you're gonna be able

00:35:18,100 --> 00:35:23,860
to have the slide anyway but any

00:35:21,190 --> 00:35:28,270
question and if you are using or

00:35:23,860 --> 00:35:29,890
planning to use Azure let me know again

00:35:28,270 --> 00:35:31,990
no worries I have nothing to sell are

00:35:29,890 --> 00:35:34,300
not in the sale spot but if you have

00:35:31,990 --> 00:35:37,600
nice technical challenge on Azure let me

00:35:34,300 --> 00:35:41,340
know a model willing to to come and help

00:35:37,600 --> 00:35:43,990
you with awesome people from Microsoft

00:35:41,340 --> 00:35:47,650
because what we want and what we like is

00:35:43,990 --> 00:35:50,290
challenges actually so that was the the

00:35:47,650 --> 00:35:52,630
idea of the of my team its it just to be

00:35:50,290 --> 00:35:53,860
challenged and just because we're going

00:35:52,630 --> 00:35:56,410
to be challenged we're gonna have like

00:35:53,860 --> 00:35:57,730
the tricky scenarios that we never see

00:35:56,410 --> 00:35:59,170
before and then is going to be the

00:35:57,730 --> 00:36:02,080
better way to give feedback to the

00:35:59,170 --> 00:36:03,610
ingenuity and to have the best product

00:36:02,080 --> 00:36:06,700
on the market right so that's how we

00:36:03,610 --> 00:36:09,310
works on my team so thank you very much

00:36:06,700 --> 00:36:12,150
for your time guys and hope to see you

00:36:09,310 --> 00:36:12,150
after

00:36:12,600 --> 00:36:16,350

YouTube URL: https://www.youtube.com/watch?v=wwCyK5IiVR8


