Title: Secrets Management in Mesos - Vinod Kone, Mesosphere, Inc.
Publication date: 2017-10-27
Playlist: MesosCon Europe 2017
Description: 
	Secrets Management in Mesos - Vinod Kone, Mesosphere, Inc.

Without first class support for secrets (Credentials, API keys etc), application and framework developers had to traditionally resort to out-of-band mechanisms to transmit and use secrets in Mesos. This is changing now!

In this talk, we will describe the newly-added native support for secrets in Mesos. The Secrets API will let Mesos inject sensitive information into either the container environment or sandbox without exposing it to unauthorized actors. The advantage of this approach is that users do not need to explicitly store sensitive information in their task configuration but can let Mesos retrieve it from a secret store at container launch time. This is possible via the new “Secrets Resolver” module interface which allows operators to integrate Mesos with 3rd party secret stores (e.g., HashiCorp’s Vault).

We will show a cool demo at the end that shows secrets in action.

About Vinod Kone
Vinod Kone is a committer and PMC member of the Apache Mesos project. He is currently a Tech Lead and Engineering Manager @ Mesosphere. Previously, he was a Tech Lead and Manager of the Mesos team @Twitter. Vinod completed his PhD in Computer Science from UC Santa Barbara.
Captions: 
	00:00:00,060 --> 00:00:07,250
alright let's get started

00:00:03,120 --> 00:00:11,519
the next talk so this talk is about

00:00:07,250 --> 00:00:14,490
secrets management and messes this is

00:00:11,519 --> 00:00:18,539
also a relatively new feature that was

00:00:14,490 --> 00:00:21,090
introduced in Messrs so let's talk about

00:00:18,539 --> 00:00:23,090
what does it mean and what you can do

00:00:21,090 --> 00:00:25,800
with it

00:00:23,090 --> 00:00:29,699
for those who are not there definitely

00:00:25,800 --> 00:00:31,550
via stock quick introduction patchy

00:00:29,699 --> 00:00:35,340
missiles committed in PMC member

00:00:31,550 --> 00:00:37,620
currently working at mesosphere managing

00:00:35,340 --> 00:00:41,670
the Missis team and before that is doing

00:00:37,620 --> 00:00:48,090
something similar to Twitter and also

00:00:41,670 --> 00:00:51,690
did my PhD so what what's the secret so

00:00:48,090 --> 00:00:53,430
secret in our terminology basically

00:00:51,690 --> 00:00:56,489
means any sensitive information that you

00:00:53,430 --> 00:00:59,579
want to use in your cluster this could

00:00:56,489 --> 00:01:01,770
be things like passwords or SSH keys or

00:00:59,579 --> 00:01:04,650
certificates or API keys what have you

00:01:01,770 --> 00:01:07,340
you typically need some of these in a

00:01:04,650 --> 00:01:10,860
secure cluster to be able to access

00:01:07,340 --> 00:01:12,570
authenticated services right and the

00:01:10,860 --> 00:01:14,790
most important thing about secret is

00:01:12,570 --> 00:01:15,900
that it should only be visible to

00:01:14,790 --> 00:01:18,119
authorized users

00:01:15,900 --> 00:01:19,710
which basically means which typically

00:01:18,119 --> 00:01:21,240
means this is the owner of the secret

00:01:19,710 --> 00:01:22,770
the one who created the secret should be

00:01:21,240 --> 00:01:27,000
the only one who should be able to view

00:01:22,770 --> 00:01:29,820
it anyone else in the system should not

00:01:27,000 --> 00:01:35,159
be able to access it unless they have

00:01:29,820 --> 00:01:39,299
some special elevated permissions so how

00:01:35,159 --> 00:01:41,850
should we handle secrets in a huge

00:01:39,299 --> 00:01:44,310
distributed cluster like a mesos cluster

00:01:41,850 --> 00:01:46,189
when you have thousands of machines and

00:01:44,310 --> 00:01:49,439
you have frameworks and schedulers and

00:01:46,189 --> 00:01:51,420
agents and tasks the biggest things that

00:01:49,439 --> 00:01:54,149
we need to keep in mind are that the

00:01:51,420 --> 00:01:57,299
time in transit for a secret should be

00:01:54,149 --> 00:01:59,490
minimal for example if a framework is

00:01:57,299 --> 00:02:01,530
trying to send this secret all the way

00:01:59,490 --> 00:02:03,149
to the task it has to go through the

00:02:01,530 --> 00:02:05,280
master master has to go through the

00:02:03,149 --> 00:02:07,710
agent agent then has to give it to the

00:02:05,280 --> 00:02:10,440
task that's a lot of network hops

00:02:07,710 --> 00:02:12,000
potential network ops which means

00:02:10,440 --> 00:02:13,250
there's a lot of opportunities for it to

00:02:12,000 --> 00:02:15,740
get compromised

00:02:13,250 --> 00:02:19,990
you need to kind of minimize how long a

00:02:15,740 --> 00:02:23,330
secret is visible before it gets used

00:02:19,990 --> 00:02:26,020
the next thing is you should try to

00:02:23,330 --> 00:02:30,370
avoid persisting to the desk the secret

00:02:26,020 --> 00:02:33,350
if possible because even when the app

00:02:30,370 --> 00:02:35,630
terminates if the thing is still on disk

00:02:33,350 --> 00:02:37,130
there's high potential that it could get

00:02:35,630 --> 00:02:39,260
compromised if someone gets access to

00:02:37,130 --> 00:02:41,870
the machine and able to look at the file

00:02:39,260 --> 00:02:44,810
system they can see the secret so

00:02:41,870 --> 00:02:49,940
usually should try to avoid persisting

00:02:44,810 --> 00:02:51,970
it to disk and as with any secret you

00:02:49,940 --> 00:02:56,480
should limit the possibilities of

00:02:51,970 --> 00:02:58,790
interception basically that means it

00:02:56,480 --> 00:03:02,090
should be encrypted

00:02:58,790 --> 00:03:05,959
probably on the way to the usage and

00:03:02,090 --> 00:03:08,060
again it should have very few hops when

00:03:05,959 --> 00:03:11,209
it's actually open to interception by

00:03:08,060 --> 00:03:13,030
someone in the middle so what are some

00:03:11,209 --> 00:03:18,410
of the use cases that we would need

00:03:13,030 --> 00:03:21,350
secrets for in mesas cluster the one of

00:03:18,410 --> 00:03:23,390
the biggest use cases is of course image

00:03:21,350 --> 00:03:26,959
pull secrets a lot of people use docker

00:03:23,390 --> 00:03:31,489
images in mace was cluster to run docker

00:03:26,959 --> 00:03:33,620
containers but a problem arises when you

00:03:31,489 --> 00:03:35,540
want to download these images from a

00:03:33,620 --> 00:03:37,790
private registry when you want to

00:03:35,540 --> 00:03:40,160
download like an Ubuntu or Alpine image

00:03:37,790 --> 00:03:41,959
from a public dock originally it's easy

00:03:40,160 --> 00:03:44,420
there's no authentication needed you can

00:03:41,959 --> 00:03:47,840
just a docker for that's fine but most

00:03:44,420 --> 00:03:49,760
organizations would care about security

00:03:47,840 --> 00:03:51,670
and care about the availability of

00:03:49,760 --> 00:03:55,820
registry run their own registries

00:03:51,670 --> 00:03:57,320
in-house and they're usually configured

00:03:55,820 --> 00:03:59,269
with some authentication and user

00:03:57,320 --> 00:04:03,010
credentials so once you have those in

00:03:59,269 --> 00:04:05,810
front of your registry how do you pull

00:04:03,010 --> 00:04:07,310
your images from that registry how do

00:04:05,810 --> 00:04:10,220
you pass the credentials needed to pull

00:04:07,310 --> 00:04:15,019
the images the current solution that we

00:04:10,220 --> 00:04:17,870
have in masers is a bit hacky if you are

00:04:15,019 --> 00:04:21,650
using docker registry 1.0 or 2.0

00:04:17,870 --> 00:04:24,860
we take a special interest in some of

00:04:21,650 --> 00:04:27,110
the URIs that you send to us and we

00:04:24,860 --> 00:04:32,419
interpret it differently for example

00:04:27,110 --> 00:04:35,710
if you have a URI call that ends with -

00:04:32,419 --> 00:04:38,300
Tucker config in your URI maysa is

00:04:35,710 --> 00:04:40,250
containerized knows that okay this

00:04:38,300 --> 00:04:42,199
particular URL corresponds to docker

00:04:40,250 --> 00:04:44,240
credentials so it actually downloads

00:04:42,199 --> 00:04:47,750
them and puts it in the Missis sandbox

00:04:44,240 --> 00:04:50,389
and sets docker home sets a dollar home

00:04:47,750 --> 00:04:53,300
value variable to this so that when

00:04:50,389 --> 00:04:55,189
docker comes up and it tries to do a

00:04:53,300 --> 00:04:57,439
pull it gets the credentials based on

00:04:55,189 --> 00:05:02,389
this information similarly if you're

00:04:57,439 --> 00:05:06,409
using HT 2.0 if you put docket order GZ

00:05:02,389 --> 00:05:08,300
in your URI missus knows that okay this

00:05:06,409 --> 00:05:10,159
is again docker credential that you're

00:05:08,300 --> 00:05:13,310
using for 2.0 and then it's going to

00:05:10,159 --> 00:05:16,219
pull that and actually put them under

00:05:13,310 --> 00:05:18,169
dot dot docker / config dot Jason so

00:05:16,219 --> 00:05:19,490
when you run the docker run command it

00:05:18,169 --> 00:05:22,009
actually knows to look into this

00:05:19,490 --> 00:05:26,419
specific location to get cadential I

00:05:22,009 --> 00:05:28,250
mean this is all a bit of workaround to

00:05:26,419 --> 00:05:30,680
address the fact that we don't have a

00:05:28,250 --> 00:05:32,779
good first class way of passing a docker

00:05:30,680 --> 00:05:35,629
cadential right what are some of the

00:05:32,779 --> 00:05:38,090
limitations other than the code smell

00:05:35,629 --> 00:05:39,620
that we have there is the URLs are

00:05:38,090 --> 00:05:41,990
accessible to all tasks and users that

00:05:39,620 --> 00:05:45,680
you are as themselves are not protected

00:05:41,990 --> 00:05:49,250
by any credentials at least we don't

00:05:45,680 --> 00:05:50,779
support authenticated urs yet which

00:05:49,250 --> 00:05:53,060
means even if you put your credentials

00:05:50,779 --> 00:05:56,469
in a URI somewhere someone can actually

00:05:53,060 --> 00:05:59,629
just grab that URI so not very secure

00:05:56,469 --> 00:06:01,669
and the credentials are as as we showed

00:05:59,629 --> 00:06:03,830
that there is downloaded to the sandbox

00:06:01,669 --> 00:06:05,300
which means they're available on the

00:06:03,830 --> 00:06:08,000
filesystem even after the container

00:06:05,300 --> 00:06:10,639
terminates the sandbox is lifecycle is

00:06:08,000 --> 00:06:12,110
not tied to the containers lifecycle

00:06:10,639 --> 00:06:14,750
because we want people to be able to

00:06:12,110 --> 00:06:17,210
debug so when something goes wrong we

00:06:14,750 --> 00:06:18,710
usually keep the sandboxes around until

00:06:17,210 --> 00:06:20,750
we actually need to garbage collect them

00:06:18,710 --> 00:06:23,240
which means even the content terminates

00:06:20,750 --> 00:06:24,469
and it's done its job with the secret

00:06:23,240 --> 00:06:26,320
those credentials are still available

00:06:24,469 --> 00:06:31,780
here in

00:06:26,320 --> 00:06:33,940
their sandbox is not great and this is

00:06:31,780 --> 00:06:36,550
with the docker container Iser if you

00:06:33,940 --> 00:06:38,890
have to use mesos container Iser the

00:06:36,550 --> 00:06:42,580
only way that you could pass credentials

00:06:38,890 --> 00:06:45,580
today was is by setting a docker config

00:06:42,580 --> 00:06:48,300
flag on the agent and you pass the

00:06:45,580 --> 00:06:50,890
docker credentials on the agent

00:06:48,300 --> 00:06:54,700
obviously this is not great either

00:06:50,890 --> 00:06:56,080
because for one this means operators

00:06:54,700 --> 00:06:58,540
have to know the credentials that users

00:06:56,080 --> 00:07:02,020
are using because operators are the ones

00:06:58,540 --> 00:07:04,990
who typically configure an agent so they

00:07:02,020 --> 00:07:08,520
have to know the credentials that users

00:07:04,990 --> 00:07:08,520
are going to use and what this ends up

00:07:08,700 --> 00:07:13,600
what ends up happening in the situations

00:07:11,260 --> 00:07:14,650
is that they're only probably going to

00:07:13,600 --> 00:07:17,230
configure the registry with one

00:07:14,650 --> 00:07:19,510
credential that they're going to set on

00:07:17,230 --> 00:07:21,700
all the agents and there is not really

00:07:19,510 --> 00:07:24,700
per user credentials anymore because

00:07:21,700 --> 00:07:26,650
operators cannot conceivably know all

00:07:24,700 --> 00:07:28,510
these credentials if they use one per

00:07:26,650 --> 00:07:31,000
user or anything like that so this is

00:07:28,510 --> 00:07:35,380
not great either these are all some

00:07:31,000 --> 00:07:37,630
workarounds and gets you to use private

00:07:35,380 --> 00:07:39,940
registries but it's not really flexible

00:07:37,630 --> 00:07:43,840
not a really first-class way to do

00:07:39,940 --> 00:07:46,540
things and then the other use case is of

00:07:43,840 --> 00:07:47,890
course applications secrets like a lot

00:07:46,540 --> 00:07:50,080
of applications that you run in your

00:07:47,890 --> 00:07:52,720
cluster typically need to talk to some

00:07:50,080 --> 00:07:55,600
other services in your cluster and if

00:07:52,720 --> 00:07:57,730
those services need some credentials to

00:07:55,600 --> 00:08:00,070
be able to authenticate the access or

00:07:57,730 --> 00:08:04,390
authorize access these applications need

00:08:00,070 --> 00:08:06,100
to have access to them so there is no

00:08:04,390 --> 00:08:08,950
support at all for something like this

00:08:06,100 --> 00:08:11,770
so far what people typically end up

00:08:08,950 --> 00:08:13,500
doing is they pass the credential

00:08:11,770 --> 00:08:17,350
information inside the task in for

00:08:13,500 --> 00:08:21,760
labels or data which is not really

00:08:17,350 --> 00:08:24,160
secure especially if you're if you're

00:08:21,760 --> 00:08:26,110
not using SSL if you're not configured

00:08:24,160 --> 00:08:30,130
if you are not configured me especially

00:08:26,110 --> 00:08:32,860
with SSL the network traffic is all open

00:08:30,130 --> 00:08:34,780
to snooping which means anyone can snoop

00:08:32,860 --> 00:08:36,190
on the network and get your task in

00:08:34,780 --> 00:08:39,010
phone look at the data or labels and

00:08:36,190 --> 00:08:40,000
moreover if you put it in labels we also

00:08:39,010 --> 00:08:42,340
expose

00:08:40,000 --> 00:08:44,500
or API endpoints and operator APN points

00:08:42,340 --> 00:08:47,980
if you hit slash state or slash tasks or

00:08:44,500 --> 00:08:49,450
what what not all the labels of a task

00:08:47,980 --> 00:08:52,570
are exposed there so anyone who has

00:08:49,450 --> 00:08:56,500
access to our operator API endpoints can

00:08:52,570 --> 00:08:58,420
actually see the secrets there if you

00:08:56,500 --> 00:09:01,030
put it in the labels it's not not really

00:08:58,420 --> 00:09:03,850
great the other solution that people

00:09:01,030 --> 00:09:05,350
have used if again use the same URI hack

00:09:03,850 --> 00:09:08,110
that we talked about before

00:09:05,350 --> 00:09:10,960
put your secrets in a URI and then

00:09:08,110 --> 00:09:12,250
missus downloads that secrets to your

00:09:10,960 --> 00:09:15,550
sandbox and their application is

00:09:12,250 --> 00:09:16,050
configured to look into a particular

00:09:15,550 --> 00:09:18,310
location

00:09:16,050 --> 00:09:19,930
somebody auto band information on what

00:09:18,310 --> 00:09:22,900
that location is what that file name is

00:09:19,930 --> 00:09:25,510
and what-have-you and then uses that to

00:09:22,900 --> 00:09:27,820
talk to other applications it has the

00:09:25,510 --> 00:09:29,620
same limitations that we talked about in

00:09:27,820 --> 00:09:36,880
the previous slide on what happens if

00:09:29,620 --> 00:09:39,460
you use your eyes to pull secrets the

00:09:36,880 --> 00:09:43,510
other solution for this has been at

00:09:39,460 --> 00:09:47,320
least in distress' enterprise was to use

00:09:43,510 --> 00:09:51,700
custom hooks and isolated modules to do

00:09:47,320 --> 00:09:56,260
some of this stuff to not expose the

00:09:51,700 --> 00:09:58,089
secrets and to limit that time of like

00:09:56,260 --> 00:10:00,280
to limit the scope of how long the

00:09:58,089 --> 00:10:03,520
secrets are available DHS enterprising

00:10:00,280 --> 00:10:06,790
ended up implementing hooks and modules

00:10:03,520 --> 00:10:09,910
to pull secrets which is not read it's

00:10:06,790 --> 00:10:11,710
it's complicated for one and it's not

00:10:09,910 --> 00:10:13,750
really reusable if you want to use that

00:10:11,710 --> 00:10:15,339
same solution with other frameworks are

00:10:13,750 --> 00:10:18,130
other organizations if you want to build

00:10:15,339 --> 00:10:21,850
something on your own so that's not a

00:10:18,130 --> 00:10:23,200
viable solution either so the last use

00:10:21,850 --> 00:10:25,630
case that I want to chat about is

00:10:23,200 --> 00:10:30,160
exactly authentication as you know in

00:10:25,630 --> 00:10:32,530
masers the way you run a task is through

00:10:30,160 --> 00:10:34,390
an executor when you when you try to

00:10:32,530 --> 00:10:36,250
launch a task so the agent actually

00:10:34,390 --> 00:10:38,260
launches an executor and the executor is

00:10:36,250 --> 00:10:41,110
the one that launches that execute the

00:10:38,260 --> 00:10:42,640
task which basically means the

00:10:41,110 --> 00:10:45,400
executives are the ones that have to

00:10:42,640 --> 00:10:49,990
connect back to the agent before they

00:10:45,400 --> 00:10:52,150
accept that has to execute and X until

00:10:49,990 --> 00:10:53,780
very recently there is no authentication

00:10:52,150 --> 00:10:57,860
at all between exact

00:10:53,780 --> 00:11:00,770
and agents like any task could come up

00:10:57,860 --> 00:11:03,500
and tell the agent that it's an exactor

00:11:00,770 --> 00:11:05,360
and the agent would allow it so there's

00:11:03,500 --> 00:11:07,610
no real protection if someone is like

00:11:05,360 --> 00:11:11,810
malicious in a mesas cluster and tries

00:11:07,610 --> 00:11:13,460
to spoof an executor but if you want to

00:11:11,810 --> 00:11:15,350
allow an executor authentication let's

00:11:13,460 --> 00:11:17,360
say we want to have we don't have to

00:11:15,350 --> 00:11:19,550
have this loophole where anyone can

00:11:17,360 --> 00:11:22,250
claim that an executor we want to be

00:11:19,550 --> 00:11:23,780
able to pass some kind of one-time

00:11:22,250 --> 00:11:25,760
credentials to an executor when we

00:11:23,780 --> 00:11:27,440
launch them and then they should be able

00:11:25,760 --> 00:11:29,720
to register with agent with those

00:11:27,440 --> 00:11:31,940
credentials provided and then we

00:11:29,720 --> 00:11:34,730
authenticate it so we want to support

00:11:31,940 --> 00:11:37,720
this case as well using whatever

00:11:34,730 --> 00:11:40,640
mechanism we come up with for secrets

00:11:37,720 --> 00:11:43,220
and yes so there is no support for this

00:11:40,640 --> 00:11:45,830
there was no support for this either in

00:11:43,220 --> 00:11:48,950
the v-0 APL v1 API that the executors

00:11:45,830 --> 00:11:51,320
might use to talk to the agent so lots

00:11:48,950 --> 00:11:56,990
of use cases for using secrets no real

00:11:51,320 --> 00:11:59,660
good solutions existed so this work was

00:11:56,990 --> 00:12:01,820
actually around how do we add

00:11:59,660 --> 00:12:03,500
first-class support for secrets how do

00:12:01,820 --> 00:12:05,390
we make Secrets is so important and

00:12:03,500 --> 00:12:09,110
mesos for a lot of security conscious

00:12:05,390 --> 00:12:12,820
customers how do we make it like a

00:12:09,110 --> 00:12:15,470
first-class primitive and then how do we

00:12:12,820 --> 00:12:17,900
integrate with existing third party

00:12:15,470 --> 00:12:21,350
secret stores like we don't want to

00:12:17,900 --> 00:12:23,210
build a secret store in masers because

00:12:21,350 --> 00:12:25,610
that's not the business we are in there

00:12:23,210 --> 00:12:28,760
lots of people who are very good at it

00:12:25,610 --> 00:12:31,370
and built really good secure secret

00:12:28,760 --> 00:12:32,839
stores like Walt and lots of other

00:12:31,370 --> 00:12:34,850
open-source implementation for secret

00:12:32,839 --> 00:12:36,140
stores well-thought-out implementations

00:12:34,850 --> 00:12:40,400
so we just want to be able to integrate

00:12:36,140 --> 00:12:42,589
with them for your secrets and we wanted

00:12:40,400 --> 00:12:44,020
to support both environment based

00:12:42,589 --> 00:12:45,890
secrets and file based secrets

00:12:44,020 --> 00:12:47,390
environment based secrets are where the

00:12:45,890 --> 00:12:49,640
secrets are exposed to tasks in

00:12:47,390 --> 00:12:52,970
environment file based is where it's

00:12:49,640 --> 00:12:54,980
exposed as like a file in your sandbox

00:12:52,970 --> 00:12:57,050
that you can access to so we wanted to

00:12:54,980 --> 00:12:58,490
support both of those in in addition to

00:12:57,050 --> 00:13:03,320
the image pull secrets that we talked

00:12:58,490 --> 00:13:06,220
about to fetch images so again the

00:13:03,320 --> 00:13:08,410
solution for this has been

00:13:06,220 --> 00:13:10,960
has three parts to its have introduced a

00:13:08,410 --> 00:13:12,370
new concept called secret it's a

00:13:10,960 --> 00:13:13,870
first-class word above first as

00:13:12,370 --> 00:13:17,380
primitive that missus understands and

00:13:13,870 --> 00:13:19,360
knows how to deal with it we also

00:13:17,380 --> 00:13:22,480
introduced this concept of secret

00:13:19,360 --> 00:13:25,120
resolver it's which is responsible for

00:13:22,480 --> 00:13:26,740
resolving a secret and we'll talk about

00:13:25,120 --> 00:13:29,230
what does it mean to resolve a secret

00:13:26,740 --> 00:13:30,850
and this is the interface that is

00:13:29,230 --> 00:13:33,330
actually modularized so that you can

00:13:30,850 --> 00:13:36,270
hook into a lot of different third party

00:13:33,330 --> 00:13:38,730
secret stores and then we also

00:13:36,270 --> 00:13:40,930
introduced couple of Isolators

00:13:38,730 --> 00:13:44,620
environment isolator and volume isolator

00:13:40,930 --> 00:13:46,330
and these are respectively for your

00:13:44,620 --> 00:13:50,200
environment based secrets and file based

00:13:46,330 --> 00:13:53,020
secrets so let's let's go into some

00:13:50,200 --> 00:13:56,550
details now so how does the secret put

00:13:53,020 --> 00:14:00,670
above itself look so the secret protocol

00:13:56,550 --> 00:14:03,250
has two types so we allow two types of

00:14:00,670 --> 00:14:05,080
Secrets what we call the first one is

00:14:03,250 --> 00:14:06,940
what we call the difference based secret

00:14:05,080 --> 00:14:10,300
the second one is what we call a value

00:14:06,940 --> 00:14:13,030
based secret so difference by secret is

00:14:10,300 --> 00:14:14,950
I hope what everyone uses in an actual

00:14:13,030 --> 00:14:18,670
production cluster where you give a

00:14:14,950 --> 00:14:20,860
reference to a secret and someone else

00:14:18,670 --> 00:14:23,050
like a secret resolves a resolver is all

00:14:20,860 --> 00:14:26,500
set for example you could think of this

00:14:23,050 --> 00:14:29,110
reference as a name in your vault secret

00:14:26,500 --> 00:14:31,990
store and you have a vault based secret

00:14:29,110 --> 00:14:33,820
resolver that knows given this name how

00:14:31,990 --> 00:14:36,760
to talk to the vault secret store and

00:14:33,820 --> 00:14:38,860
get and fetch that secret so that's the

00:14:36,760 --> 00:14:41,410
reference based secret we also have a

00:14:38,860 --> 00:14:43,240
key in there just in case your secret

00:14:41,410 --> 00:14:44,560
object is actually a hashmap and you

00:14:43,240 --> 00:14:46,090
want to just don't want to get the whole

00:14:44,560 --> 00:14:47,890
hash map but you want to key into it

00:14:46,090 --> 00:14:50,200
there's traditional flexibility there

00:14:47,890 --> 00:14:52,720
that we provided in the reference the

00:14:50,200 --> 00:14:54,460
value base secret is it's mostly for

00:14:52,720 --> 00:14:57,130
testing purposes and we also leverage

00:14:54,460 --> 00:14:59,110
this for execute authentication and in

00:14:57,130 --> 00:15:01,270
this case the value of the secret is

00:14:59,110 --> 00:15:04,300
actually inside the pot above clearly

00:15:01,270 --> 00:15:08,050
not very secure only secure if your

00:15:04,300 --> 00:15:09,310
network is completely encrypted we make

00:15:08,050 --> 00:15:12,520
sure we don't expose any of this in the

00:15:09,310 --> 00:15:14,560
APS and whatever so that part is taken

00:15:12,520 --> 00:15:17,110
care of but if the framework is using

00:15:14,560 --> 00:15:19,620
the value base secret which I highly do

00:15:17,110 --> 00:15:19,620
not recommend

00:15:19,740 --> 00:15:25,839
it's going to use this value information

00:15:23,529 --> 00:15:30,040
to directly give the data to the task

00:15:25,839 --> 00:15:31,899
where we do use this is executor based

00:15:30,040 --> 00:15:34,269
authentication which we'll talk about on

00:15:31,899 --> 00:15:37,149
why we needed this and there because

00:15:34,269 --> 00:15:39,519
there's no time in transit it's only the

00:15:37,149 --> 00:15:41,889
agent that's doing this we're not too

00:15:39,519 --> 00:15:44,769
worried about someone snooping something

00:15:41,889 --> 00:15:46,690
like this so you could use any of these

00:15:44,769 --> 00:15:50,500
secrets but definitely use different

00:15:46,690 --> 00:15:52,209
secret if you're a framework and then

00:15:50,500 --> 00:15:54,699
the new interface that we introduced is

00:15:52,209 --> 00:15:56,769
the secret resolver interface it's the

00:15:54,699 --> 00:15:59,139
interface is actually really simple you

00:15:56,769 --> 00:16:01,089
have a resolve function which takes a

00:15:59,139 --> 00:16:04,060
secret and returns the value of the

00:16:01,089 --> 00:16:06,820
secret and that resolver might actually

00:16:04,060 --> 00:16:09,730
have to talk to a different back-end

00:16:06,820 --> 00:16:12,699
that you have to get that value out of

00:16:09,730 --> 00:16:15,040
that secret reference and this interface

00:16:12,699 --> 00:16:17,290
is actually modularized so you can write

00:16:15,040 --> 00:16:19,389
your own secret resolver module if you

00:16:17,290 --> 00:16:24,699
want to talk to your in-house secret

00:16:19,389 --> 00:16:27,220
store and the architecture looks

00:16:24,699 --> 00:16:30,130
something like this so we have a secret

00:16:27,220 --> 00:16:33,100
resolve word that the provisional which

00:16:30,130 --> 00:16:35,339
is the component in mesas agent that is

00:16:33,100 --> 00:16:40,959
responsible for provisioning images

00:16:35,339 --> 00:16:42,760
container images is going to talk to and

00:16:40,959 --> 00:16:44,769
we also have some Isolators that can

00:16:42,760 --> 00:16:46,360
talk to the secret is all words so both

00:16:44,769 --> 00:16:47,829
of them can talk to secret is all word

00:16:46,360 --> 00:16:50,709
in it they pass it the actual secret

00:16:47,829 --> 00:16:52,480
proto let's say as a reference and then

00:16:50,709 --> 00:16:55,000
the resolver talks to a secret store and

00:16:52,480 --> 00:16:58,630
gets a value and then passes that value

00:16:55,000 --> 00:17:01,510
to the corresponding clients whether

00:16:58,630 --> 00:17:03,940
it's a probationer or the nice letter so

00:17:01,510 --> 00:17:05,350
let's look at how it's all the three use

00:17:03,940 --> 00:17:07,419
cases that we chatted about in the

00:17:05,350 --> 00:17:10,510
beginning so for image pool secrets

00:17:07,419 --> 00:17:13,120
where you want to get an image from a

00:17:10,510 --> 00:17:18,339
private registry what we did was we

00:17:13,120 --> 00:17:20,589
added this new field in the darker

00:17:18,339 --> 00:17:24,100
throat above in the image that we

00:17:20,589 --> 00:17:27,220
currently have which is of type secret

00:17:24,100 --> 00:17:30,970
optional secret config so now you can

00:17:27,220 --> 00:17:33,340
set this config in your image darker

00:17:30,970 --> 00:17:36,220
image pot above what the

00:17:33,340 --> 00:17:38,650
interpreted is where we're going to use

00:17:36,220 --> 00:17:42,730
a secret resolver to get the secret

00:17:38,650 --> 00:17:45,550
value from secret store and we we

00:17:42,730 --> 00:17:48,250
actually decode that as darker config

00:17:45,550 --> 00:17:52,510
file and we either put it in your

00:17:48,250 --> 00:17:53,890
environment or you put it in your we

00:17:52,510 --> 00:17:56,110
don't need to put it in environment we

00:17:53,890 --> 00:17:57,820
just interpret this as your darker

00:17:56,110 --> 00:17:59,860
config and use that information to pull

00:17:57,820 --> 00:18:03,190
the image that's pretty much it we don't

00:17:59,860 --> 00:18:05,110
we don't store this at all on your desk

00:18:03,190 --> 00:18:07,120
because it's not needed after you pull

00:18:05,110 --> 00:18:10,750
the image so that thing is completely

00:18:07,120 --> 00:18:13,660
out of the picture so yeah if you want

00:18:10,750 --> 00:18:16,000
to use your own private credentials when

00:18:13,660 --> 00:18:17,830
pulling docker image just put the stuff

00:18:16,000 --> 00:18:19,630
your credentials in a secret store and

00:18:17,830 --> 00:18:21,880
just give the difference to it new

00:18:19,630 --> 00:18:24,430
docker image and missus will do the rest

00:18:21,880 --> 00:18:28,900
as long as you have a secret it's all

00:18:24,430 --> 00:18:30,790
word that knows how to pull that so yeah

00:18:28,900 --> 00:18:33,430
so this is an example how the workflow

00:18:30,790 --> 00:18:36,310
would look in the task info when you set

00:18:33,430 --> 00:18:39,070
the docker image you said conflictive

00:18:36,310 --> 00:18:41,590
foo and then the provisioner when it

00:18:39,070 --> 00:18:43,420
gets that information it talks to secret

00:18:41,590 --> 00:18:45,370
resolver and says hey I want to resolve

00:18:43,420 --> 00:18:47,820
this secret foo which talks to the

00:18:45,370 --> 00:18:51,330
secret store gets the value for foo

00:18:47,820 --> 00:18:53,860
interprets that as a darker config and

00:18:51,330 --> 00:18:57,090
then talk to doc registry using that

00:18:53,860 --> 00:18:59,140
configuration gets it and then

00:18:57,090 --> 00:19:00,850
provisions the container image and

00:18:59,140 --> 00:19:04,030
launches the container very

00:19:00,850 --> 00:19:07,540
straightforward all framix have to do is

00:19:04,030 --> 00:19:12,420
put the stuff in config their credential

00:19:07,540 --> 00:19:16,870
and of course write a one-time resolver

00:19:12,420 --> 00:19:21,580
the next use case was how do we pass

00:19:16,870 --> 00:19:23,680
application secrets as environment so

00:19:21,580 --> 00:19:25,450
for this what we did was we extended our

00:19:23,680 --> 00:19:27,490
environment protobuf so we had this

00:19:25,450 --> 00:19:29,500
environment put above a already in my

00:19:27,490 --> 00:19:30,970
source which will let you put orbit pass

00:19:29,500 --> 00:19:33,880
arbitrary environments from the

00:19:30,970 --> 00:19:35,680
framework to the task so previously we

00:19:33,880 --> 00:19:37,660
only had what we call value base

00:19:35,680 --> 00:19:40,480
environment where you can set a key and

00:19:37,660 --> 00:19:43,840
a value both are strings but we extended

00:19:40,480 --> 00:19:44,930
it right now to actually have the value

00:19:43,840 --> 00:19:48,110
as

00:19:44,930 --> 00:19:51,200
so you could say set my environment with

00:19:48,110 --> 00:19:52,820
the key something and value is a secret

00:19:51,200 --> 00:19:53,870
you have to fetch that secret from

00:19:52,820 --> 00:19:55,910
somewhere else and put it in the

00:19:53,870 --> 00:19:58,790
environment so we extended the

00:19:55,910 --> 00:20:02,060
environment of proto professor so you

00:19:58,790 --> 00:20:04,100
could set environment where either it

00:20:02,060 --> 00:20:06,530
the value could be a simple string value

00:20:04,100 --> 00:20:08,990
or a secret and if you do that in

00:20:06,530 --> 00:20:11,030
environment we will do all the magic to

00:20:08,990 --> 00:20:14,930
make sure your environment is reflected

00:20:11,030 --> 00:20:16,910
with the actual secret value so here's

00:20:14,930 --> 00:20:19,580
an example someone said okay to a

00:20:16,910 --> 00:20:22,250
skinful environment name is foo and

00:20:19,580 --> 00:20:23,480
secret reference is bar so bar is not

00:20:22,250 --> 00:20:24,950
the actual value they want it's

00:20:23,480 --> 00:20:27,230
referencing some secret information

00:20:24,950 --> 00:20:30,020
maybe it's a API key or s password and

00:20:27,230 --> 00:20:32,990
then they when the agent gets it the

00:20:30,020 --> 00:20:35,690
environment isolator intercepts this

00:20:32,990 --> 00:20:39,830
task info and then it talks to secret

00:20:35,690 --> 00:20:41,600
resolver gets the bar value from secret

00:20:39,830 --> 00:20:43,760
store and then when the task gets

00:20:41,600 --> 00:20:47,060
launched the environment is actually set

00:20:43,760 --> 00:20:50,300
for with foo key and value as bar value

00:20:47,060 --> 00:20:53,210
so that's how it's going to work for

00:20:50,300 --> 00:20:56,270
file based secrets what we did was we

00:20:53,210 --> 00:20:58,730
also extended the volume protobuf that

00:20:56,270 --> 00:21:00,650
we currently have where you can set up

00:20:58,730 --> 00:21:04,490
different sorts of volumes in your

00:21:00,650 --> 00:21:07,160
container we extended it so that the

00:21:04,490 --> 00:21:09,380
source of the volume could be a secret

00:21:07,160 --> 00:21:12,290
so previously you could only do like a

00:21:09,380 --> 00:21:14,900
darker volume as a source or a sandbox

00:21:12,290 --> 00:21:18,740
path as a source now someone could say

00:21:14,900 --> 00:21:20,810
the source of my secret is my suppose of

00:21:18,740 --> 00:21:23,300
no volume is a secret what this

00:21:20,810 --> 00:21:25,940
basically tells missus is that someone

00:21:23,300 --> 00:21:28,870
wants to put that secret as a volume at

00:21:25,940 --> 00:21:31,940
a container path the container path is

00:21:28,870 --> 00:21:33,950
right there in the volume but the data

00:21:31,940 --> 00:21:35,840
that they need in that container path is

00:21:33,950 --> 00:21:38,330
actually in a secret store somewhere so

00:21:35,840 --> 00:21:40,790
mezzos needs to pull that and then put

00:21:38,330 --> 00:21:44,030
it in that container path inside their

00:21:40,790 --> 00:21:46,400
container so that they can access it and

00:21:44,030 --> 00:21:49,190
the nice thing about the way we did it

00:21:46,400 --> 00:21:52,080
is even for volume based secrets we

00:21:49,190 --> 00:21:53,310
didn't want the

00:21:52,080 --> 00:21:56,490
things that are mounted in the

00:21:53,310 --> 00:21:59,040
containers hand box to persist after the

00:21:56,490 --> 00:22:00,900
container terminates so the way we

00:21:59,040 --> 00:22:03,000
implemented this is it's going to be

00:22:00,900 --> 00:22:06,330
like a temper fest vol mounted into your

00:22:03,000 --> 00:22:09,450
container once you said that stuff in

00:22:06,330 --> 00:22:10,770
your task info the secret resolver is

00:22:09,450 --> 00:22:13,950
called by the volume secret eyes data

00:22:10,770 --> 00:22:16,050
that we added and the actual contents of

00:22:13,950 --> 00:22:17,940
that secret or put it in a look put in a

00:22:16,050 --> 00:22:20,940
location that you asked for in the

00:22:17,940 --> 00:22:23,700
volume proto but it's mounted after as a

00:22:20,940 --> 00:22:25,710
temp FS volume which means once it goes

00:22:23,700 --> 00:22:28,050
up once the container terminates that

00:22:25,710 --> 00:22:31,020
volume goes away as well and no one can

00:22:28,050 --> 00:22:35,460
see it so that's a nice nice feature to

00:22:31,020 --> 00:22:39,930
have so I'm not going to talk about the

00:22:35,460 --> 00:22:42,180
executive based authentication in this

00:22:39,930 --> 00:22:46,110
talk but there was a talking about it

00:22:42,180 --> 00:22:48,630
and this year's mrs. Kahn aja about how

00:22:46,110 --> 00:22:49,770
we did the exact erotic ation so if

00:22:48,630 --> 00:22:52,230
you're interested in how we leverage

00:22:49,770 --> 00:22:54,350
secrets to do agent executor

00:22:52,230 --> 00:22:57,840
authentication I would highly recommend

00:22:54,350 --> 00:23:00,690
looking at the talk that's also pretty

00:22:57,840 --> 00:23:04,020
neat implementation of using one-time

00:23:00,690 --> 00:23:07,680
credentials in inmates was to be able to

00:23:04,020 --> 00:23:10,070
authenticate eggs actors on-demand so

00:23:07,680 --> 00:23:14,550
the support for secret has been landed

00:23:10,070 --> 00:23:17,340
has landed in 1.3 so it's been around

00:23:14,550 --> 00:23:21,150
for a couple villages know already and

00:23:17,340 --> 00:23:22,950
we have been using it at least at

00:23:21,150 --> 00:23:25,410
mesosphere in these ways Enterprise for

00:23:22,950 --> 00:23:28,170
a long time so it's pretty close to be

00:23:25,410 --> 00:23:32,670
called stable we might graduate it in

00:23:28,170 --> 00:23:35,970
missus 1.52 stable feature so you should

00:23:32,670 --> 00:23:39,180
feel confident that this plumbing all

00:23:35,970 --> 00:23:40,620
works just fine and it's been used in

00:23:39,180 --> 00:23:43,860
production environments and quite some

00:23:40,620 --> 00:23:46,710
places already so that's pretty cool

00:23:43,860 --> 00:23:48,870
and we support we added support for

00:23:46,710 --> 00:23:50,310
mesos container riser for dock for the

00:23:48,870 --> 00:23:53,640
pulling of images using private

00:23:50,310 --> 00:23:57,660
credentials but we haven't yet added

00:23:53,640 --> 00:23:59,130
support for docker container riser we

00:23:57,660 --> 00:24:02,850
haven't gotten enough requests for

00:23:59,130 --> 00:24:04,470
people to do that if we do have an

00:24:02,850 --> 00:24:05,340
overwhelming request from the community

00:24:04,470 --> 00:24:09,240
we made this

00:24:05,340 --> 00:24:10,590
added but the future of missus is the

00:24:09,240 --> 00:24:12,180
Miss was contained eyes are not darker

00:24:10,590 --> 00:24:14,240
contained Iser which depends on darker

00:24:12,180 --> 00:24:17,160
demon so we're trying to not make

00:24:14,240 --> 00:24:19,200
feature parity we want to have better

00:24:17,160 --> 00:24:24,900
features in missus contain riser which

00:24:19,200 --> 00:24:26,900
has better modular implementation the

00:24:24,900 --> 00:24:29,940
secret resolver as I said is completely

00:24:26,900 --> 00:24:32,340
modernized missus comes out of the box

00:24:29,940 --> 00:24:35,250
to understand value basically as Freddy

00:24:32,340 --> 00:24:36,930
straightforward but reference based ones

00:24:35,250 --> 00:24:39,720
are modularized so you need to implement

00:24:36,930 --> 00:24:45,870
a module if you want to hook to any of

00:24:39,720 --> 00:24:51,360
your secret stores so next up is demo of

00:24:45,870 --> 00:24:54,170
the file based secrets and and and women

00:24:51,360 --> 00:24:58,140
bear secrets in action so I just

00:24:54,170 --> 00:25:03,570
recorded the video so that I don't have

00:24:58,140 --> 00:25:06,080
to have any surprises let's see if I can

00:25:03,570 --> 00:25:06,080
lip sync

00:25:21,350 --> 00:25:29,580
okay so this is an example so we're

00:25:26,730 --> 00:25:32,010
doing this with DCs just because that's

00:25:29,580 --> 00:25:34,890
the one that has implemented secrets is

00:25:32,010 --> 00:25:37,290
all words that we know of so this

00:25:34,890 --> 00:25:40,500
example uses these years so this is a

00:25:37,290 --> 00:25:42,960
typical mesos marathon configuration

00:25:40,500 --> 00:25:45,330
that using this us for environment based

00:25:42,960 --> 00:25:49,280
secret as you can see they set an

00:25:45,330 --> 00:25:51,420
environment here called my secret and

00:25:49,280 --> 00:25:57,060
when they set up the containers

00:25:51,420 --> 00:25:59,340
information they actually say that okay

00:25:57,060 --> 00:26:04,080
my environment secret value should be

00:25:59,340 --> 00:26:06,960
secret zero and the source of that is in

00:26:04,080 --> 00:26:09,240
a secret store at path slash my secret

00:26:06,960 --> 00:26:12,330
and the way we are going to see this all

00:26:09,240 --> 00:26:15,480
worked is by echoing the environment

00:26:12,330 --> 00:26:18,630
variable my underscore secret in the app

00:26:15,480 --> 00:26:21,780
and see that we actually get to see the

00:26:18,630 --> 00:26:25,740
secret value in the environment so this

00:26:21,780 --> 00:26:27,390
is how we are going to test that the

00:26:25,740 --> 00:26:32,150
secret value has been passed to the

00:26:27,390 --> 00:26:35,940
environment so the next one is a

00:26:32,150 --> 00:26:39,930
file-based secret and for this one what

00:26:35,940 --> 00:26:42,810
we did is again in when you set up the

00:26:39,930 --> 00:26:45,150
container we set a new volume whose

00:26:42,810 --> 00:26:47,310
source is secret as we said that's the

00:26:45,150 --> 00:26:50,490
thing that we support now in mesos and

00:26:47,310 --> 00:26:54,720
the secret contains a secret password as

00:26:50,490 --> 00:26:56,100
a reference name but the actual contents

00:26:54,720 --> 00:26:58,230
of the password will be told in the

00:26:56,100 --> 00:26:59,640
secret and the way we're going to test

00:26:58,230 --> 00:27:02,850
this is we're going to do an LS in the

00:26:59,640 --> 00:27:04,770
sandbox and we see that the secret has

00:27:02,850 --> 00:27:10,320
actually been mounted in the sandbox has

00:27:04,770 --> 00:27:12,410
a file under path in the in the sandbox

00:27:10,320 --> 00:27:19,410
and we see that the contents are

00:27:12,410 --> 00:27:22,860
actually present in the sandbox yeah

00:27:19,410 --> 00:27:27,150
that's ok let's let's wait for the video

00:27:22,860 --> 00:27:29,310
to go forward before so the next step

00:27:27,150 --> 00:27:32,850
what we're going to do is we're going to

00:27:29,310 --> 00:27:34,659
take this and actually launch a marathon

00:27:32,850 --> 00:27:40,149
app with this configuration

00:27:34,659 --> 00:27:43,149
and in DCOs and see it works so we're

00:27:40,149 --> 00:27:45,489
going to the DCO sui for those of you

00:27:43,149 --> 00:27:49,149
are new to this show this is how the dcs

00:27:45,489 --> 00:27:51,909
UI looks and the first thing that we

00:27:49,149 --> 00:27:54,729
need to do in the DC OS is to actually

00:27:51,909 --> 00:27:56,470
create the secret in the secret store so

00:27:54,729 --> 00:27:59,129
this is you allows you to actually

00:27:56,470 --> 00:28:03,489
create secrets we use a vault based

00:27:59,129 --> 00:28:05,169
secret store in DC us so from the DCs

00:28:03,489 --> 00:28:06,970
you can actually configure your secrets

00:28:05,169 --> 00:28:10,450
so you go to your secrets page here and

00:28:06,970 --> 00:28:15,849
you create a new secret and then let's

00:28:10,450 --> 00:28:18,759
give it an ID called my secret and then

00:28:15,849 --> 00:28:21,879
give it a value so this what happens

00:28:18,759 --> 00:28:25,169
here is it it goes and stores the secret

00:28:21,879 --> 00:28:28,840
inner walls based secret store securely

00:28:25,169 --> 00:28:31,090
and no one gets to see it unless they

00:28:28,840 --> 00:28:33,340
are the owner of the secret so okay we

00:28:31,090 --> 00:28:35,529
created the secret first it's it's in a

00:28:33,340 --> 00:28:40,690
secret store and now we are going to

00:28:35,529 --> 00:28:47,679
launch an app which is going to test the

00:28:40,690 --> 00:28:52,389
environment based secret so okay so we

00:28:47,679 --> 00:28:54,009
are going to use the DCOs CLI and here

00:28:52,389 --> 00:28:55,950
we are testing both the pod

00:28:54,009 --> 00:28:59,440
specification and the app specification

00:28:55,950 --> 00:29:01,599
just to show that it works on both for

00:28:59,440 --> 00:29:03,849
the environment by secret we are using

00:29:01,599 --> 00:29:06,849
pod suffocated this app with the

00:29:03,849 --> 00:29:08,950
definition that we saw before and as you

00:29:06,849 --> 00:29:11,799
can see it's already gone ahead and

00:29:08,950 --> 00:29:16,720
running and if you click through that

00:29:11,799 --> 00:29:21,070
app and try to see its sandbox logs and

00:29:16,720 --> 00:29:23,919
see awarded it echo as the secret value

00:29:21,070 --> 00:29:24,940
you can see that the secret super secret

00:29:23,919 --> 00:29:26,889
information which is the value of the

00:29:24,940 --> 00:29:28,659
secret was actually given in the

00:29:26,889 --> 00:29:31,210
environment we just told this in the

00:29:28,659 --> 00:29:34,450
secret store but we it all got pulled

00:29:31,210 --> 00:29:36,779
directly as environment variable to the

00:29:34,450 --> 00:29:39,940
container so it kind of shows you that

00:29:36,779 --> 00:29:42,129
you can pass secret information as

00:29:39,940 --> 00:29:44,859
environment variable so the next step is

00:29:42,129 --> 00:29:47,229
we are going to do the file based

00:29:44,859 --> 00:29:48,050
secrets now with the app definition

00:29:47,229 --> 00:29:51,380
instead of

00:29:48,050 --> 00:29:55,130
just for some variety and we just add

00:29:51,380 --> 00:29:57,290
that application in marathon and then as

00:29:55,130 --> 00:30:00,790
you can see the application is already

00:29:57,290 --> 00:30:05,630
running and then if you go to its

00:30:00,790 --> 00:30:11,510
sandbox and see if that thing is there

00:30:05,630 --> 00:30:13,760
you can see that there's a path file in

00:30:11,510 --> 00:30:15,980
there which has some contents so this

00:30:13,760 --> 00:30:18,080
basically shows that we actually created

00:30:15,980 --> 00:30:21,320
a path file name in the container and

00:30:18,080 --> 00:30:22,940
it's actually mounted in there and you

00:30:21,320 --> 00:30:25,180
can an application can read the path

00:30:22,940 --> 00:30:27,890
file and see that the contents are there

00:30:25,180 --> 00:30:30,530
as you can see at the last bit here

00:30:27,890 --> 00:30:32,120
actually cats that path information and

00:30:30,530 --> 00:30:34,220
you can see the super-secret information

00:30:32,120 --> 00:30:36,650
is there in the path so that thing is

00:30:34,220 --> 00:30:39,260
actually got copied into the path inside

00:30:36,650 --> 00:30:42,920
your container as a temp efest volume so

00:30:39,260 --> 00:30:44,990
this kind of shows that that stuff works

00:30:42,920 --> 00:30:47,150
just fine

00:30:44,990 --> 00:30:49,880
so this better shows that all that

00:30:47,150 --> 00:30:52,040
wiring and everything works and we have

00:30:49,880 --> 00:30:53,870
a first-class implementation of

00:30:52,040 --> 00:31:00,010
attendees here as if you want to check

00:30:53,870 --> 00:31:00,010
it out so that's pretty much the demo

00:31:00,370 --> 00:31:09,140
get back to future work so as I said

00:31:06,680 --> 00:31:12,200
image pool secrets currently only work

00:31:09,140 --> 00:31:13,730
in the mazes contain Iser and we would

00:31:12,200 --> 00:31:17,090
like to add it for docker containers if

00:31:13,730 --> 00:31:18,980
people really really want it more

00:31:17,090 --> 00:31:22,820
importantly I think we want to add this

00:31:18,980 --> 00:31:25,520
support for app C&O say images that we

00:31:22,820 --> 00:31:27,020
are going to support in the UC are the

00:31:25,520 --> 00:31:29,090
message contained either going forward

00:31:27,020 --> 00:31:31,130
so this new image formats all of this

00:31:29,090 --> 00:31:35,420
will directly we will pretty easily

00:31:31,130 --> 00:31:37,370
support image pull sequence and then the

00:31:35,420 --> 00:31:40,070
one thing that I alluded to when we're

00:31:37,370 --> 00:31:45,050
talking about URL fetching is that we do

00:31:40,070 --> 00:31:47,840
not currently have a mechanism for mazes

00:31:45,050 --> 00:31:49,880
to fetch urs that need authentication

00:31:47,840 --> 00:31:52,460
which is a pretty big limitation the

00:31:49,880 --> 00:31:54,800
current workaround for this is people

00:31:52,460 --> 00:31:56,600
have to configure their curls on the

00:31:54,800 --> 00:31:59,870
machines with the credentials that they

00:31:56,600 --> 00:32:01,810
want to get the you are is not great you

00:31:59,870 --> 00:32:03,790
cannot do per user

00:32:01,810 --> 00:32:05,350
credentials to fetch your ax so we

00:32:03,790 --> 00:32:07,420
actually know that we have the secrets

00:32:05,350 --> 00:32:10,180
mechanism this first class primitive we

00:32:07,420 --> 00:32:12,340
actually want to be able to use that for

00:32:10,180 --> 00:32:14,170
fetching authenticated urs as well so

00:32:12,340 --> 00:32:17,140
we're going to add that support in the

00:32:14,170 --> 00:32:18,550
future for URIs and the secrets are

00:32:17,140 --> 00:32:20,800
going to be the mechanism where how

00:32:18,550 --> 00:32:22,570
someone could pass credentials for

00:32:20,800 --> 00:32:25,030
fetching you our eyes so that's

00:32:22,570 --> 00:32:26,740
something that we are looking forward to

00:32:25,030 --> 00:32:27,430
hopefully we'll get time to implement it

00:32:26,740 --> 00:32:29,380
at some point

00:32:27,430 --> 00:32:31,150
I suppose it is important for HTTPS

00:32:29,380 --> 00:32:33,960
right like you need certificates and

00:32:31,150 --> 00:32:37,240
stuff that you need to use to get your

00:32:33,960 --> 00:32:39,760
HTTP base your eyes and there's no wait

00:32:37,240 --> 00:32:41,590
currently to pass it Hydra nice for

00:32:39,760 --> 00:32:44,140
people to able to pass it in the secret

00:32:41,590 --> 00:32:49,330
and will and the missus passer will use

00:32:44,140 --> 00:32:51,760
that to fetch the URI again some

00:32:49,330 --> 00:32:56,230
acknowledgments this is when a joint

00:32:51,760 --> 00:32:59,440
work between a lot of people Greg

00:32:56,230 --> 00:33:02,260
especially implemented the environment

00:32:59,440 --> 00:33:04,750
based Secrets stuff on executor

00:33:02,260 --> 00:33:07,660
authentication Kapil did some of the

00:33:04,750 --> 00:33:09,760
environment base secrets and also file

00:33:07,660 --> 00:33:11,320
based secrets and lots of others were

00:33:09,760 --> 00:33:13,780
actually involved in reviewing and

00:33:11,320 --> 00:33:16,690
design discussions and all of that stuff

00:33:13,780 --> 00:33:18,550
so it's a pretty big effort from a lot

00:33:16,690 --> 00:33:21,700
of these folks special thanks to all of

00:33:18,550 --> 00:33:23,620
these folks that's pretty much it

00:33:21,700 --> 00:33:26,350
again I've linked some design Doc's here

00:33:23,620 --> 00:33:28,000
if you're interested to read more about

00:33:26,350 --> 00:33:31,500
this there's a different design Doc's

00:33:28,000 --> 00:33:35,680
for each of the different features so

00:33:31,500 --> 00:33:38,440
click through them from the SCAD dot org

00:33:35,680 --> 00:33:42,520
website and read them if you're

00:33:38,440 --> 00:33:47,610
interested that's pretty much it now

00:33:42,520 --> 00:33:47,610
I'll take questions yes

00:34:07,240 --> 00:34:11,710
please for this youth enterprise okay so

00:34:10,119 --> 00:34:14,260
the question was for this one enterprise

00:34:11,710 --> 00:34:18,399
have you considered any backup mechanism

00:34:14,260 --> 00:34:20,290
for secrets and when it's a backup team

00:34:18,399 --> 00:34:23,889
in backing up the secret or a backup

00:34:20,290 --> 00:34:32,980
mechanism to get C created the secret

00:34:23,889 --> 00:34:33,520
store fails or some reason reinitialize

00:34:32,980 --> 00:34:42,780
vault

00:34:33,520 --> 00:34:45,310
okay yeah I'm not aware of the work

00:34:42,780 --> 00:34:48,220
regarding that particular aspect of

00:34:45,310 --> 00:34:50,349
backing up fault or reinitializing it

00:34:48,220 --> 00:34:52,839
easily instead of having to have

00:34:50,349 --> 00:34:55,540
operators to reconfirm it seems pretty

00:34:52,839 --> 00:34:57,849
unfortunate if they have to if all

00:34:55,540 --> 00:34:59,560
crashes have to go and really trace it

00:34:57,849 --> 00:35:01,599
everything it'd be nice if you do

00:34:59,560 --> 00:35:04,540
automatic backups or something like that

00:35:01,599 --> 00:35:06,040
so I'll be glad to take that feedback to

00:35:04,540 --> 00:35:07,570
the team and let them know that's

00:35:06,040 --> 00:35:10,690
something that we should look into it

00:35:07,570 --> 00:35:16,180
I'm not intimately involved in how the

00:35:10,690 --> 00:35:17,950
dcs vault integration works under will

00:35:16,180 --> 00:35:20,680
until this feature landed they were

00:35:17,950 --> 00:35:22,750
using the hooks and Isolators but we are

00:35:20,680 --> 00:35:25,060
slowly having the deesis moved to this

00:35:22,750 --> 00:35:26,530
world as well to be more first-class

00:35:25,060 --> 00:35:28,570
hole but that's not gonna solve the

00:35:26,530 --> 00:35:30,820
vault crashing problem so that needs to

00:35:28,570 --> 00:35:36,750
be solved separately if the secret store

00:35:30,820 --> 00:35:36,750
itself is not stable first year

00:36:02,610 --> 00:36:06,000
okay so you're saying depending on the

00:36:04,590 --> 00:36:07,980
storage that you pick for all the

00:36:06,000 --> 00:36:12,330
storage could be highly available which

00:36:07,980 --> 00:36:14,780
makes Walt less susceptible to downtime

00:36:12,330 --> 00:36:14,780
and stuff

00:36:23,280 --> 00:36:29,010
okay maybe you guys should talk after

00:36:25,620 --> 00:36:35,690
the talk and share some lessons

00:36:29,010 --> 00:36:35,690
production lessons yeah yes

00:36:43,330 --> 00:36:48,850
so the first question was which bits

00:36:45,670 --> 00:36:53,760
work with the missus executor and which

00:36:48,850 --> 00:36:57,220
bits work with the doc or executor so

00:36:53,760 --> 00:36:58,690
the application like environment basic

00:36:57,220 --> 00:37:01,390
use and filed by secrets they only work

00:36:58,690 --> 00:37:03,040
with measures executor and missus

00:37:01,390 --> 00:37:05,200
executor by that I mean both the command

00:37:03,040 --> 00:37:06,910
exactor and the default executor that

00:37:05,200 --> 00:37:09,910
can run pods

00:37:06,910 --> 00:37:12,960
it won't work with docker executor which

00:37:09,910 --> 00:37:12,960
uses docker container Iser

00:37:18,450 --> 00:37:21,450
yep

00:37:47,730 --> 00:37:53,160
so the question was can the secret

00:37:50,190 --> 00:37:55,280
resolver be used on the master instead

00:37:53,160 --> 00:37:59,930
of agents so that you could avoid having

00:37:55,280 --> 00:38:03,960
to pass the secrets for getting secrets

00:37:59,930 --> 00:38:07,050
that's for the secret resolver we I

00:38:03,960 --> 00:38:09,450
think that was a discussion that we had

00:38:07,050 --> 00:38:12,329
earlier as well the way at least that

00:38:09,450 --> 00:38:14,910
was all in this year's Enterprise was

00:38:12,329 --> 00:38:17,700
that all elections it's a module it gets

00:38:14,910 --> 00:38:19,380
that information possibly through alt

00:38:17,700 --> 00:38:21,000
itself and of course that means they

00:38:19,380 --> 00:38:23,520
have to share current shells or you have

00:38:21,000 --> 00:38:26,099
to have agent specific credentials but

00:38:23,520 --> 00:38:29,130
resolving it at the master and then

00:38:26,099 --> 00:38:31,230
passing it is also interesting if you

00:38:29,130 --> 00:38:33,300
are okay with that transit being secure

00:38:31,230 --> 00:38:36,829
in your organization but yeah that's

00:38:33,300 --> 00:38:39,510
something that we haven't definitely

00:38:36,829 --> 00:38:42,630
designed in some sense so that's an

00:38:39,510 --> 00:38:44,700
interesting design choice as well we

00:38:42,630 --> 00:38:46,230
could provide that flexibility you think

00:38:44,700 --> 00:38:48,450
about how that plays with the agent

00:38:46,230 --> 00:38:50,910
resolver and how does it know that they

00:38:48,450 --> 00:38:53,250
might resolve it and stuff like that so

00:38:50,910 --> 00:38:55,680
but that's that's an interesting idea I

00:38:53,250 --> 00:38:58,040
would say yeah I don't see why we cannot

00:38:55,680 --> 00:38:58,040
do that

00:39:11,810 --> 00:39:13,840
ah

00:39:40,130 --> 00:39:45,089
yeah yeah so the question was how did

00:39:42,930 --> 00:39:46,710
the secret reso doesn't have more

00:39:45,089 --> 00:39:49,589
context than just as the kid is getting

00:39:46,710 --> 00:39:54,270
so that it knows which credentials it

00:39:49,589 --> 00:39:57,750
should be used to get the secret so yes

00:39:54,270 --> 00:40:00,089
so that's a that's the limitation of

00:39:57,750 --> 00:40:04,349
that interface so the way we did that in

00:40:00,089 --> 00:40:06,540
DC US enterprise was like we have an

00:40:04,349 --> 00:40:07,829
authorization module right the

00:40:06,540 --> 00:40:09,809
authorization module is the one that's

00:40:07,829 --> 00:40:12,300
doing the authorization of lots of

00:40:09,809 --> 00:40:14,730
things in mesos so when a task is

00:40:12,300 --> 00:40:16,740
launching when the framework is

00:40:14,730 --> 00:40:19,140
launching a task with a certain secret

00:40:16,740 --> 00:40:20,790
information that thing is authorized

00:40:19,140 --> 00:40:23,010
even before it goes to secret is all

00:40:20,790 --> 00:40:26,670
words so the authorization part of who

00:40:23,010 --> 00:40:28,349
gets to use which secret is not done by

00:40:26,670 --> 00:40:30,690
the secret resolve itself it's actually

00:40:28,349 --> 00:40:32,550
done at a layer even before secrets ever

00:40:30,690 --> 00:40:35,400
gets involved it's done by the

00:40:32,550 --> 00:40:37,319
authorizer on the master that's the one

00:40:35,400 --> 00:40:39,210
that has a task info which has a lot

00:40:37,319 --> 00:40:41,430
more context on who is trying to

00:40:39,210 --> 00:40:43,950
download that secret and it has a name

00:40:41,430 --> 00:40:47,040
of the secret so using that those two

00:40:43,950 --> 00:40:49,440
information bits it actually uses to

00:40:47,040 --> 00:40:51,359
authorize it but not but of course that

00:40:49,440 --> 00:40:53,010
doesn't solve the problem of when you

00:40:51,359 --> 00:40:54,900
actually pulling this idiot from the

00:40:53,010 --> 00:40:56,369
thicket store you are still pulling it

00:40:54,900 --> 00:40:57,569
with the agents credential and not the

00:40:56,369 --> 00:41:00,170
users credentials so that's a limitation

00:40:57,569 --> 00:41:00,170
of that

00:41:12,460 --> 00:41:17,200
so the question was is implementation

00:41:14,560 --> 00:41:21,450
for vault secrets is always that open

00:41:17,200 --> 00:41:21,450
source or not it's not yet

00:41:39,770 --> 00:41:43,910
okay so the question was how confident

00:41:42,170 --> 00:41:45,740
are we that people are going to

00:41:43,910 --> 00:41:47,450
implement modules for the circuit is

00:41:45,740 --> 00:41:50,270
always out in the open that people could

00:41:47,450 --> 00:41:52,580
use I think that's something that we

00:41:50,270 --> 00:41:55,580
have to wait and see

00:41:52,580 --> 00:41:56,990
I hope there's enough interest in the

00:41:55,580 --> 00:41:59,800
ecosystem for people to share their

00:41:56,990 --> 00:42:02,030
implementations one of the things with

00:41:59,800 --> 00:42:05,590
with the secret stores is a lot of our

00:42:02,030 --> 00:42:07,730
nations have their own custom snowflake

00:42:05,590 --> 00:42:09,830
secret store implementations inside it

00:42:07,730 --> 00:42:11,570
so it's really hard for them to share

00:42:09,830 --> 00:42:12,980
something but if thought evaluations are

00:42:11,570 --> 00:42:13,700
standardizing on Walt or something I

00:42:12,980 --> 00:42:16,040
could imagine

00:42:13,700 --> 00:42:18,380
oh maybe Netflix or Twitter will come at

00:42:16,040 --> 00:42:20,420
some point or Apple and say Herman put

00:42:18,380 --> 00:42:21,980
them in a spot but if they are also

00:42:20,420 --> 00:42:24,230
analyzing on Walt inside they could say

00:42:21,980 --> 00:42:25,340
okay we could probably share that module

00:42:24,230 --> 00:42:29,030
but until the organization's are

00:42:25,340 --> 00:42:30,170
actually trying to standardize on some

00:42:29,030 --> 00:42:31,820
of the secret stores that they're going

00:42:30,170 --> 00:42:34,550
to use it's kinda hard to see how they

00:42:31,820 --> 00:42:36,350
would come out with something that they

00:42:34,550 --> 00:42:39,200
could share but that's where the

00:42:36,350 --> 00:42:41,930
industry is moving towards I hope that

00:42:39,200 --> 00:42:43,580
people are willing to share those

00:42:41,930 --> 00:42:46,040
modules with others because that's not

00:42:43,580 --> 00:42:47,750
really a secret sauce and how to pull it

00:42:46,040 --> 00:42:51,920
from a Walt it just needs to be

00:42:47,750 --> 00:42:56,770
implemented in a robust way you had a

00:42:51,920 --> 00:43:00,580
question somewhere in the back ok cool

00:42:56,770 --> 00:43:00,580
you had a question yeah

00:43:12,920 --> 00:43:18,120
so the question was it's easy to do it

00:43:15,510 --> 00:43:19,920
in marathon to get secrets how do we do

00:43:18,120 --> 00:43:23,130
it in details comments so this is

00:43:19,920 --> 00:43:25,260
comments is going to also support the

00:43:23,130 --> 00:43:26,490
secrets in meso so I think I believe it

00:43:25,260 --> 00:43:28,620
already supports it in the latest

00:43:26,490 --> 00:43:33,870
release of SDK if you're using

00:43:28,620 --> 00:43:36,030
Enterprise yeah if you're using

00:43:33,870 --> 00:43:38,280
open-source gcos and you're using SDK I

00:43:36,030 --> 00:43:39,570
don't have the support secrets they

00:43:38,280 --> 00:43:42,300
probably don't but if there is an

00:43:39,570 --> 00:43:46,580
enterprise version of SDK they all

00:43:42,300 --> 00:43:46,580
support all of this secret for the boss

00:44:24,410 --> 00:44:32,039
so the question was if someone gets root

00:44:28,890 --> 00:44:35,279
access to the agent node how would we

00:44:32,039 --> 00:44:38,069
make it difficult for them to get access

00:44:35,279 --> 00:44:39,839
to secrets are we trying to launch it in

00:44:38,069 --> 00:44:43,079
a different process or something

00:44:39,839 --> 00:44:47,579
the secret fetching part we haven't

00:44:43,079 --> 00:44:49,770
thought that far to be honest if someone

00:44:47,579 --> 00:44:52,020
gets into the box they could actually

00:44:49,770 --> 00:44:53,520
just go into the container sandbox the

00:44:52,020 --> 00:44:55,760
Sun looking to it or they could probably

00:44:53,520 --> 00:44:58,369
do a PS and look into environment so

00:44:55,760 --> 00:45:00,450
like the secret fetching process itself

00:44:58,369 --> 00:45:01,710
you could probably make it secure by

00:45:00,450 --> 00:45:03,569
running some out-of-band process

00:45:01,710 --> 00:45:06,299
something that people cannot look into

00:45:03,569 --> 00:45:10,260
maybe but yeah we haven't really thought

00:45:06,299 --> 00:45:12,750
in that direction yet when someone gets

00:45:10,260 --> 00:45:15,059
into the node maliciously how would they

00:45:12,750 --> 00:45:18,480
what can we do to prevent their access

00:45:15,059 --> 00:45:19,829
but if there's some examples out there

00:45:18,480 --> 00:45:21,390
that we could learn from I'd be happy to

00:45:19,829 --> 00:45:24,170
look into them and see what we can do

00:45:21,390 --> 00:45:27,829
there cool

00:45:24,170 --> 00:45:27,829
any other questions

00:45:41,230 --> 00:45:45,460
so the question was the authorization

00:45:43,660 --> 00:45:47,940
model that I chatted about before

00:45:45,460 --> 00:45:50,050
answering that question was that

00:45:47,940 --> 00:45:52,119
available in open source as well and

00:45:50,050 --> 00:45:53,320
it's also modularize able in the sense

00:45:52,119 --> 00:45:55,839
that it could be used within the

00:45:53,320 --> 00:46:00,640
authorizers yes the authorization module

00:45:55,839 --> 00:46:03,460
has been in long long term interface in

00:46:00,640 --> 00:46:06,220
masers for like for felices now so that

00:46:03,460 --> 00:46:07,599
exists in mezzos proper on both master

00:46:06,220 --> 00:46:10,270
on the agent for a very long time and

00:46:07,599 --> 00:46:12,190
both of those are authorized so you can

00:46:10,270 --> 00:46:14,680
write your own authorization module to

00:46:12,190 --> 00:46:17,230
hook into your authorization back-end

00:46:14,680 --> 00:46:19,599
whether you use LDAP or whatever I am

00:46:17,230 --> 00:46:23,040
service you use you can definitely hook

00:46:19,599 --> 00:46:23,040
into it it's totally possible today

00:46:44,910 --> 00:46:47,910
mm-hmm

00:46:50,090 --> 00:46:53,570
yes they're saying you would like to see

00:46:52,070 --> 00:46:55,640
the docker containers or have support

00:46:53,570 --> 00:46:57,440
for okay that's one word for a docker

00:46:55,640 --> 00:47:01,730
container raiser hang support we need

00:46:57,440 --> 00:47:04,850
more votes towards three words four

00:47:01,730 --> 00:47:08,060
words five words okay

00:47:04,850 --> 00:47:12,760
it's a biased sample but we'll take that

00:47:08,060 --> 00:47:12,760
um any other questions

00:47:12,940 --> 00:47:17,240
no all right thanks guys thanks for

00:47:15,830 --> 00:47:20,950
sticking around

00:47:17,240 --> 00:47:20,950

YouTube URL: https://www.youtube.com/watch?v=ipy1IL1Jd7I


