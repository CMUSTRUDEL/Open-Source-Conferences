Title: Advanced Deployment Strategies and Workflows for Containerized Apps on DC OS - Tim Nolet, vamp.io
Publication date: 2017-10-31
Playlist: MesosCon Europe 2017
Description: 
	Advanced Deployment Strategies and Workflows for Containerized Apps on DC/OS - Tim Nolet, vamp.io

DC/OS container orchestration on Mesos is a powerful tool already embraced by many teams across many enterprises. After taking this first step towards containerized workloads, teams are confronted with complex and time intensive deployment and release requirements; canary releasing, zero downtime, constant health tracking and roll backs to known states.

This talk deep dives into different deployment and release patterns, how they can help in real life scenarios and how you can code these using Vamp’s advanced automation workflows. I’ll show how to integrate these patterns into typical CI/CD tools like Jenkins and provide Node.js based workflow examples how you can use live metrics and health statistics to influence a deployment’s course dynamically.

About Tim Nolet
Tim is a developer and product evangelist for vamp.io, an open source project that enables canary releasing, AB-testing and other advanced application delivery workflows for modern cloud platforms. Tim is a regular speaker at meetups in Amsterdam, Berlin and Hamburg and spoke at PuppetConf in San Francisco.
Captions: 
	00:00:00,000 --> 00:00:09,620
hi good morning everyone my name is Tim

00:00:05,790 --> 00:00:12,450
and I'm a product advocate for vamp an

00:00:09,620 --> 00:00:15,000
open-source release and management

00:00:12,450 --> 00:00:20,279
platform that runs among others on D cos

00:00:15,000 --> 00:00:22,529
and kubernetes the title of my talk is

00:00:20,279 --> 00:00:24,539
advanced deployment strategies and

00:00:22,529 --> 00:00:27,689
workflows for containerized apps on D

00:00:24,539 --> 00:00:32,219
cos that's a huge mouthful but it will

00:00:27,689 --> 00:00:37,590
make sense as we dive in a tiny bit

00:00:32,219 --> 00:00:40,739
about me I am Dutch vamp is a Dutch

00:00:37,590 --> 00:00:43,739
company that as an HQ in Amsterdam but I

00:00:40,739 --> 00:00:47,280
live in Berlin I come from an Operations

00:00:43,739 --> 00:00:49,530
background and have been responsible for

00:00:47,280 --> 00:00:53,370
deploying applications in many shapes

00:00:49,530 --> 00:00:56,899
sizes tech stacks over the last almost

00:00:53,370 --> 00:00:59,550
20 years I actually studied art history

00:00:56,899 --> 00:01:02,550
so it's pretty cool for me being here in

00:00:59,550 --> 00:01:09,110
Prague had never been here before it's

00:01:02,550 --> 00:01:09,110
great but enough about me let's dive in

00:01:09,229 --> 00:01:14,850
today I want to talk to you about

00:01:11,930 --> 00:01:18,450
deployments and I want to start with the

00:01:14,850 --> 00:01:21,030
following hypotheses the hypotheses is

00:01:18,450 --> 00:01:26,220
in a perfect world no one would deploy

00:01:21,030 --> 00:01:28,920
anything ever so that's kind of where my

00:01:26,220 --> 00:01:33,030
talk ends thank you have a great mezzos

00:01:28,920 --> 00:01:35,750
cone know without all silliness let's

00:01:33,030 --> 00:01:38,280
investigate this statement a bit closer

00:01:35,750 --> 00:01:41,759
in a little segment that I would like to

00:01:38,280 --> 00:01:46,290
call a brief and unscientific history of

00:01:41,759 --> 00:01:50,430
application deployment by me so let's

00:01:46,290 --> 00:01:52,079
wind the clock back to 1998 2000 this

00:01:50,430 --> 00:01:55,200
was about the time that I was getting

00:01:52,079 --> 00:01:59,219
started in the business I was working

00:01:55,200 --> 00:02:02,180
for a consulting company who had

00:01:59,219 --> 00:02:04,110
consultants at banks big Dutch banks

00:02:02,180 --> 00:02:08,340
Rabobank if you might have heard of them

00:02:04,110 --> 00:02:12,030
so back then application deployments

00:02:08,340 --> 00:02:15,760
were a bit like giving birth

00:02:12,030 --> 00:02:18,780
they were the culmination of months and

00:02:15,760 --> 00:02:22,390
months of eager expectation of work

00:02:18,780 --> 00:02:25,209
dedication and all scenarios for the

00:02:22,390 --> 00:02:28,450
birth or / deployment had been written

00:02:25,209 --> 00:02:31,300
down in big Word documents emails were

00:02:28,450 --> 00:02:33,610
written CC lists grow and experts and

00:02:31,300 --> 00:02:37,780
engineering teams were on coal for when

00:02:33,610 --> 00:02:40,239
the big moment happens the eventual

00:02:37,780 --> 00:02:43,930
delivery process was a big contradiction

00:02:40,239 --> 00:02:46,360
of joy pain and a lot of sweaty men

00:02:43,930 --> 00:02:49,510
staring at monitoring screens deep into

00:02:46,360 --> 00:02:52,269
the night and as always things never

00:02:49,510 --> 00:02:55,870
went as planned each minute knew

00:02:52,269 --> 00:02:57,489
unforeseen complications arise and it

00:02:55,870 --> 00:02:59,049
turns out that our 35 page

00:02:57,489 --> 00:03:01,329
implementation plan that we had written

00:02:59,049 --> 00:03:03,970
three months in advance was not an

00:03:01,329 --> 00:03:07,120
actual reflection of reality Wow who

00:03:03,970 --> 00:03:10,720
would have thought so people panicked

00:03:07,120 --> 00:03:12,640
some turn to alcohol others just have to

00:03:10,720 --> 00:03:13,959
go home to their families because of

00:03:12,640 --> 00:03:16,329
course we do this stuff on Friday

00:03:13,959 --> 00:03:18,880
evenings and had to tell their wife and

00:03:16,329 --> 00:03:20,319
kids that yeah I'm not coming home this

00:03:18,880 --> 00:03:28,690
weekend I'm sorry

00:03:20,319 --> 00:03:31,569
because deployment so you slave on into

00:03:28,690 --> 00:03:34,359
the night and finally early in the

00:03:31,569 --> 00:03:38,799
morning when the Sun rises the

00:03:34,359 --> 00:03:41,260
deployment is done you fold all the

00:03:38,799 --> 00:03:44,139
demons that we're lurking in your IBM

00:03:41,260 --> 00:03:48,370
WebSphere core bar spring tip month tip

00:03:44,139 --> 00:03:53,470
go monstrosity and you want your new

00:03:48,370 --> 00:03:56,980
about us page is live but at what cost

00:03:53,470 --> 00:04:00,670
but what what what did we learn well any

00:03:56,980 --> 00:04:03,329
logical rational person would say we

00:04:00,670 --> 00:04:07,599
will never do this again

00:04:03,329 --> 00:04:12,400
no more deployments it's just not worth

00:04:07,599 --> 00:04:15,069
it so we learned that deployments are

00:04:12,400 --> 00:04:17,019
evil they're soul consuming demons that

00:04:15,069 --> 00:04:19,680
should be destroyed and vanished from

00:04:17,019 --> 00:04:19,680
the face of the earth

00:04:19,729 --> 00:04:28,760
and then as we fast-forward to 2011 so

00:04:24,180 --> 00:04:33,199
that's about 10 years disaster strikes

00:04:28,760 --> 00:04:36,960
multiple times it's like a meteor shower

00:04:33,199 --> 00:04:40,020
boom continues delivery boom lean

00:04:36,960 --> 00:04:46,010
startup boom DevOps boom agile boom

00:04:40,020 --> 00:04:48,860
cloud stuff so they're all telling us

00:04:46,010 --> 00:04:53,430
that everyone should be deploying

00:04:48,860 --> 00:04:55,800
everything all of the time back then

00:04:53,430 --> 00:04:57,900
companies like Facebook and at sea

00:04:55,800 --> 00:05:00,660
started claiming yeah we deploy 50 times

00:04:57,900 --> 00:05:03,840
per day it's completely normal

00:05:00,660 --> 00:05:06,150
hey this was a time that Heroku got very

00:05:03,840 --> 00:05:09,389
popular and showed us that you could

00:05:06,150 --> 00:05:12,780
deploy something with just one get push

00:05:09,389 --> 00:05:17,280
command but the horror doesn't end there

00:05:12,780 --> 00:05:22,650
so if we fast forward another two years

00:05:17,280 --> 00:05:26,780
we come to the great flood of 2013 2013

00:05:22,650 --> 00:05:29,820
that's so this was the message and then

00:05:26,780 --> 00:05:33,770
we go to 2013 the great flood called

00:05:29,820 --> 00:05:37,440
micro services and what happens then is

00:05:33,770 --> 00:05:40,169
if we point one monolith application was

00:05:37,440 --> 00:05:41,970
already not enough they're telling us to

00:05:40,169 --> 00:05:45,599
actually split this up into multiple

00:05:41,970 --> 00:05:47,580
deployments and that is crazy

00:05:45,599 --> 00:05:50,430
I just heard yesterday at the keynote

00:05:47,580 --> 00:05:55,470
that netflix has 380 services in

00:05:50,430 --> 00:06:00,930
production so either these people must

00:05:55,470 --> 00:06:02,550
be insane or evil or both clearly but

00:06:00,930 --> 00:06:06,090
there's light at the end of the tunnel

00:06:02,550 --> 00:06:11,789
because around the same time so let's

00:06:06,090 --> 00:06:16,590
say 2013 ish the earth was subjected to

00:06:11,789 --> 00:06:21,660
a Cambrian explosion of containerized

00:06:16,590 --> 00:06:24,930
stuff we had kubernetes docker Maysles

00:06:21,660 --> 00:06:27,750
all coming out around the same time so

00:06:24,930 --> 00:06:32,280
you could start getting this on Prem

00:06:27,750 --> 00:06:34,530
hosted solutions everything so

00:06:32,280 --> 00:06:39,300
glory to the world hallelujah everything

00:06:34,530 --> 00:06:42,500
saved um here's your timeline again my

00:06:39,300 --> 00:06:48,510
brief unscientific history

00:06:42,500 --> 00:06:51,419
we're in 2017 now and my conviction is

00:06:48,510 --> 00:06:55,230
that the deployment problem is still not

00:06:51,419 --> 00:06:57,120
really solved sure you can have marathon

00:06:55,230 --> 00:06:59,580
running on your Maysles cluster that's

00:06:57,120 --> 00:07:02,250
pretty easy you create a piece of JSON

00:06:59,580 --> 00:07:05,310
or you type it into the UI boom you have

00:07:02,250 --> 00:07:06,780
a deployment it's there but what happens

00:07:05,310 --> 00:07:09,000
if it's in production what happens if

00:07:06,780 --> 00:07:11,490
there's multiple versions what happens

00:07:09,000 --> 00:07:13,140
if there's dependencies what happens if

00:07:11,490 --> 00:07:15,810
there is actual real traffic and it's

00:07:13,140 --> 00:07:21,750
not some kind of you know to-do app or

00:07:15,810 --> 00:07:24,180
showcase for a conference well this is

00:07:21,750 --> 00:07:28,229
kind of the problem that struck me when

00:07:24,180 --> 00:07:33,240
we started vamp back in end of 2013

00:07:28,229 --> 00:07:36,690
beginning of 2014 and the whole

00:07:33,240 --> 00:07:39,390
containerization principle is great

00:07:36,690 --> 00:07:45,090
I got it very quickly we quickly saw the

00:07:39,390 --> 00:07:45,660
the implications of it but me and my

00:07:45,090 --> 00:07:48,210
colleagues

00:07:45,660 --> 00:07:50,010
we're from that background where we were

00:07:48,210 --> 00:07:53,550
at banks where we were at large

00:07:50,010 --> 00:07:55,200
traditional e-commerce companies and

00:07:53,550 --> 00:07:56,850
these companies have different concerns

00:07:55,200 --> 00:07:58,560
they have different type of people

00:07:56,850 --> 00:08:02,430
they're mostly here in Europe they're

00:07:58,560 --> 00:08:03,330
not Bay Area startups so how can we make

00:08:02,430 --> 00:08:05,160
this work

00:08:03,330 --> 00:08:09,630
for them that's one of the underlying

00:08:05,160 --> 00:08:14,789
principles so we started building

00:08:09,630 --> 00:08:16,580
something which we called vamp we

00:08:14,789 --> 00:08:19,560
actually don't use it anymore but

00:08:16,580 --> 00:08:20,310
originally vamp suit for the very

00:08:19,560 --> 00:08:24,300
awesome

00:08:20,310 --> 00:08:26,760
micro services platform we kind of left

00:08:24,300 --> 00:08:29,430
that behind because we very quickly

00:08:26,760 --> 00:08:32,099
found out that it doesn't really matter

00:08:29,430 --> 00:08:34,050
whether you're doing micro services to

00:08:32,099 --> 00:08:40,979
use vamp but the name is nice so we

00:08:34,050 --> 00:08:42,930
stuck with it I'm I was hesitant if I

00:08:40,979 --> 00:08:43,930
was gonna explain here how vamp

00:08:42,930 --> 00:08:46,060
works

00:08:43,930 --> 00:08:48,910
I'm gonna do it a bit but there was a

00:08:46,060 --> 00:08:50,950
talk yesterday here by Julian from

00:08:48,910 --> 00:08:53,140
Microsoft who did a fantastic job

00:08:50,950 --> 00:08:55,570
actually showing of em I was in the Oh

00:08:53,140 --> 00:08:58,839
in the audience like there goes my talk

00:08:55,570 --> 00:09:02,020
but I think I picked out the right bits

00:08:58,839 --> 00:09:05,140
that kind of delve a bit deeper in into

00:09:02,020 --> 00:09:08,950
what vamp can do for you so if you want

00:09:05,140 --> 00:09:11,230
to get in let's say ground level I would

00:09:08,950 --> 00:09:12,880
highly recommend either looking up

00:09:11,230 --> 00:09:15,670
Julian's talk from yesterday it was in

00:09:12,880 --> 00:09:18,070
the same room here or just going to the

00:09:15,670 --> 00:09:21,310
website and because all the demos and

00:09:18,070 --> 00:09:24,520
all the startup material is there having

00:09:21,310 --> 00:09:30,149
said that I will try to explain a bit

00:09:24,520 --> 00:09:33,459
like what vamp does so you have hardware

00:09:30,149 --> 00:09:35,589
that never goes away stuff needs to run

00:09:33,459 --> 00:09:39,370
somewhere then you have your

00:09:35,589 --> 00:09:44,760
applications then you have vamp that

00:09:39,370 --> 00:09:48,420
runs on top of something like D cos or

00:09:44,760 --> 00:09:52,330
kubernetes or straight talker

00:09:48,420 --> 00:09:56,560
what fam does is it natively runs inside

00:09:52,330 --> 00:09:59,200
one of your container or orchestrators

00:09:56,560 --> 00:10:02,230
just as any other container would run

00:09:59,200 --> 00:10:05,560
there what we've done is we've

00:10:02,230 --> 00:10:09,430
abstracted how you can send commands to

00:10:05,560 --> 00:10:11,200
your Orchestrator a bit like a JDBC

00:10:09,430 --> 00:10:13,330
driver from the Java world you have a

00:10:11,200 --> 00:10:15,610
couple of databases you have one driver

00:10:13,330 --> 00:10:18,640
you just talk to the driver and it sorts

00:10:15,610 --> 00:10:22,510
out all the differences however we do

00:10:18,640 --> 00:10:24,550
allow you to take advantage of some of

00:10:22,510 --> 00:10:25,180
the specific things that are either in

00:10:24,550 --> 00:10:29,380
DCOs

00:10:25,180 --> 00:10:31,000
or in kubernetes - we do that by using

00:10:29,380 --> 00:10:33,400
something we call dialects I'll show

00:10:31,000 --> 00:10:35,410
this later so you're not losing any

00:10:33,400 --> 00:10:41,529
power that's specifically for instance

00:10:35,410 --> 00:10:44,770
in kubernetes so vamp runs on your

00:10:41,529 --> 00:10:47,800
Orchestrator and what does it do well it

00:10:44,770 --> 00:10:50,470
takes into account three basic artifacts

00:10:47,800 --> 00:10:53,260
that you can deploy to vamp extremely

00:10:50,470 --> 00:10:56,529
similar to what you would do in let's

00:10:53,260 --> 00:10:57,290
say marathon we have what we call breeds

00:10:56,529 --> 00:10:59,720
bridge

00:10:57,290 --> 00:11:03,019
tiniest smallest building blocks they

00:10:59,720 --> 00:11:05,240
are the definition of hey this is my

00:11:03,019 --> 00:11:08,930
application name it has a container

00:11:05,240 --> 00:11:11,449
version it has I don't know some

00:11:08,930 --> 00:11:15,740
variables and then we have a blueprint

00:11:11,449 --> 00:11:18,440
which is a multiple breeds can live in a

00:11:15,740 --> 00:11:20,360
blueprint it tells fab like okay this

00:11:18,440 --> 00:11:22,220
one she talked at that one and if you

00:11:20,360 --> 00:11:24,560
spin up this one then that one should

00:11:22,220 --> 00:11:29,300
also be there so it can declare

00:11:24,560 --> 00:11:30,500
dependencies between breeze there's a

00:11:29,300 --> 00:11:33,170
reason that the blueprint is in the

00:11:30,500 --> 00:11:35,690
middle because in day-in day-out you

00:11:33,170 --> 00:11:37,399
will only probably use blueprints

00:11:35,690 --> 00:11:40,209
because if you make a blueprint we

00:11:37,399 --> 00:11:41,959
extract out the breeds so it's very

00:11:40,209 --> 00:11:44,360
common that you will never actually

00:11:41,959 --> 00:11:46,149
click on that tab in the UI which I'll

00:11:44,360 --> 00:11:48,740
show you later

00:11:46,149 --> 00:11:51,019
so blueprint is a static artifact it's a

00:11:48,740 --> 00:11:53,600
piece of Yama or piece of JSON whatever

00:11:51,019 --> 00:11:56,569
you want and then you click deploy and

00:11:53,600 --> 00:11:59,209
it's turned into a running container or

00:11:56,569 --> 00:12:02,180
containers on the orchestrator of your

00:11:59,209 --> 00:12:06,260
choice now I'll have magic there

00:12:02,180 --> 00:12:08,870
basically everyone does it this way but

00:12:06,260 --> 00:12:11,269
then we have two things that are kind of

00:12:08,870 --> 00:12:15,589
special about famine we have the concept

00:12:11,269 --> 00:12:18,490
of cold of gateways and gateways are

00:12:15,589 --> 00:12:23,540
strictly speaking just load balancers

00:12:18,490 --> 00:12:27,079
they allow traffic to stream into your

00:12:23,540 --> 00:12:27,709
deployments your running applications so

00:12:27,079 --> 00:12:31,959
far so good

00:12:27,709 --> 00:12:34,810
everyone does that but what we can do is

00:12:31,959 --> 00:12:38,660
we can extract metrics from the Gateway

00:12:34,810 --> 00:12:41,360
if you deploy a vamp gateway it is

00:12:38,660 --> 00:12:43,819
connected to an elastic search data

00:12:41,360 --> 00:12:47,810
store and every request that runs

00:12:43,819 --> 00:12:51,019
through it we measure stuff request rate

00:12:47,810 --> 00:12:54,670
response time error rate etc and we feed

00:12:51,019 --> 00:12:54,670
that into our metric system

00:12:55,399 --> 00:13:00,800
and what we allow you to do then is

00:12:57,810 --> 00:13:05,730
write another thing called workflows

00:13:00,800 --> 00:13:09,060
workflows are pieces of JavaScript note

00:13:05,730 --> 00:13:12,029
to be specific that can use whatever is

00:13:09,060 --> 00:13:14,370
fed into the system and do things to

00:13:12,029 --> 00:13:17,399
vamp I will make it a lot clearer later

00:13:14,370 --> 00:13:19,800
and these things can influence the

00:13:17,399 --> 00:13:23,640
gateways or influence the deployments

00:13:19,800 --> 00:13:27,690
and the consequences of this are pretty

00:13:23,640 --> 00:13:32,790
big you can have a very interesting

00:13:27,690 --> 00:13:34,680
dynamic deployment by using things that

00:13:32,790 --> 00:13:37,790
are happening during the deployment in

00:13:34,680 --> 00:13:42,959
the decision-making of the deployment

00:13:37,790 --> 00:13:45,839
this is exactly what 20 years or let's

00:13:42,959 --> 00:13:49,050
say in 1998 we would use to do with an

00:13:45,839 --> 00:13:51,959
implementation plan we roll out four

00:13:49,050 --> 00:13:54,990
instances of our app then we check this

00:13:51,959 --> 00:13:57,180
and that and blah and this metric and

00:13:54,990 --> 00:13:59,160
see if everything's going fine then we

00:13:57,180 --> 00:14:01,860
pull a couple of switches to I don't

00:13:59,160 --> 00:14:04,290
know have new customers try out this

00:14:01,860 --> 00:14:05,850
this new feature and if that's all

00:14:04,290 --> 00:14:09,570
thumbs up and everything is green then

00:14:05,850 --> 00:14:11,400
we move on to the next stage this used

00:14:09,570 --> 00:14:14,610
to be a Word document now you can put it

00:14:11,400 --> 00:14:17,610
in code we try to come up with an

00:14:14,610 --> 00:14:19,980
acronym for it and now DAC deployment as

00:14:17,610 --> 00:14:22,470
code something like that but we didn't

00:14:19,980 --> 00:14:26,370
do it there's already way too many

00:14:22,470 --> 00:14:30,089
acronyms in this whole space so in a

00:14:26,370 --> 00:14:36,000
nutshell this is the power that fab

00:14:30,089 --> 00:14:37,860
gives you out of the box so the rest of

00:14:36,000 --> 00:14:41,010
my talk is demo time all the funny stuff

00:14:37,860 --> 00:14:45,329
is over I want to show you basically

00:14:41,010 --> 00:14:47,579
three scenarios and I want to get us

00:14:45,329 --> 00:14:50,910
from an application that's deployed a

00:14:47,579 --> 00:14:52,470
version one to a version two in two or

00:14:50,910 --> 00:14:54,930
three different ways depends on how you

00:14:52,470 --> 00:14:57,870
look at it fun thing is you can play

00:14:54,930 --> 00:15:00,290
along if you go to this URL right now

00:14:57,870 --> 00:15:06,460
you'll get an ice-cream

00:15:00,290 --> 00:15:10,120
it's HTTP mazes con vamp IO

00:15:06,460 --> 00:15:14,980
you will be connected to a Azure cluster

00:15:10,120 --> 00:15:17,950
we're using Microsoft Microsoft's Azure

00:15:14,980 --> 00:15:20,140
containers which is great really works

00:15:17,950 --> 00:15:21,910
really nice and we got free credits from

00:15:20,140 --> 00:15:25,120
them so that also might have been an

00:15:21,910 --> 00:15:29,370
influence on this and you will get a

00:15:25,120 --> 00:15:29,370
screen that looks a bit like this

00:15:30,300 --> 00:15:34,740
let me just blow up blow it up a bit

00:15:34,770 --> 00:15:41,560
it's a blue screen version 1.0.0 and it

00:15:39,130 --> 00:15:44,440
prints out the host name of the

00:15:41,560 --> 00:15:47,440
container that it's running on so before

00:15:44,440 --> 00:15:49,660
I dive in I just want to show you this

00:15:47,440 --> 00:15:51,000
party trick because it completely drives

00:15:49,660 --> 00:15:55,380
home the point

00:15:51,000 --> 00:16:01,230
here's vamp let me blow this up a bit

00:15:55,380 --> 00:16:06,240
let me go to the gateways just a slider

00:16:01,230 --> 00:16:08,710
let's put it on 5050 let's save it

00:16:06,240 --> 00:16:14,440
actually there's a constant load on it

00:16:08,710 --> 00:16:17,110
right here yes it's going great and

00:16:14,440 --> 00:16:20,010
roughly 50% of the time if I hit a hard

00:16:17,110 --> 00:16:25,060
refresh you will see a different version

00:16:20,010 --> 00:16:28,270
great this is the basic thing you can do

00:16:25,060 --> 00:16:31,540
with fab so again Julien yesterday

00:16:28,270 --> 00:16:35,560
showed how you get here from 0 to this

00:16:31,540 --> 00:16:39,100
situation I'm using the UI that I just

00:16:35,560 --> 00:16:42,030
showed you you can already do a lot of

00:16:39,100 --> 00:16:45,190
powerful things very very very easily

00:16:42,030 --> 00:16:48,610
deploy two versions of your app pull the

00:16:45,190 --> 00:16:50,290
slider boom and then you have your 50 50

00:16:48,610 --> 00:16:52,570
percent split you can do this for three

00:16:50,290 --> 00:16:54,970
or four or five apps it doesn't really

00:16:52,570 --> 00:16:59,920
matter as long as the weights as we call

00:16:54,970 --> 00:17:02,380
them add up to 100% but as we said we

00:16:59,920 --> 00:17:05,350
want to ultimate this we don't want to

00:17:02,380 --> 00:17:06,640
be pulling that slider ourselves all the

00:17:05,350 --> 00:17:11,230
time

00:17:06,640 --> 00:17:15,339
so just to reset the situation I will go

00:17:11,230 --> 00:17:24,189
back to our blue version 100% of traffic

00:17:15,339 --> 00:17:28,080
there we go so the first scenario that I

00:17:24,189 --> 00:17:34,270
want to show you guys is the following

00:17:28,080 --> 00:17:36,880
it is a rolling release from a CI CD

00:17:34,270 --> 00:17:40,929
pipeline this document and all the files

00:17:36,880 --> 00:17:43,360
you can find on our github I made a

00:17:40,929 --> 00:17:46,240
public yesterday evening so if anything

00:17:43,360 --> 00:17:49,179
goes too fast or you didn't quite catch

00:17:46,240 --> 00:17:51,250
it after the talk you can go to github

00:17:49,179 --> 00:17:56,980
and read through it and play around with

00:17:51,250 --> 00:18:02,770
all the examples yourself so in in a

00:17:56,980 --> 00:18:04,990
typical deployment pipeline you want to

00:18:02,770 --> 00:18:07,720
have something like this and this is

00:18:04,990 --> 00:18:11,169
what the Julien did yesterday this is a

00:18:07,720 --> 00:18:13,390
clip from Jenkins Jenkins pipeline

00:18:11,169 --> 00:18:15,450
completely scripted even the pipeline so

00:18:13,390 --> 00:18:18,340
there's a Jenkins file that tells

00:18:15,450 --> 00:18:24,970
Jenkins how to proceed through all these

00:18:18,340 --> 00:18:28,210
stages and stage the last three stages

00:18:24,970 --> 00:18:30,220
are all vamp specific the first couple

00:18:28,210 --> 00:18:32,080
of stages are kind of what you would

00:18:30,220 --> 00:18:34,480
find everywhere you pull something you

00:18:32,080 --> 00:18:36,100
build something you test it then you

00:18:34,480 --> 00:18:39,010
wrap it in a container and you push it

00:18:36,100 --> 00:18:41,320
to some container registry and then Pham

00:18:39,010 --> 00:18:45,820
comes in so I'm gonna show you a couple

00:18:41,320 --> 00:18:48,820
of the commands that would help here

00:18:45,820 --> 00:18:54,910
and then I'm gonna show you how that

00:18:48,820 --> 00:18:57,820
works in a Jenkins context so what you

00:18:54,910 --> 00:19:00,429
want to do essentially in a very simple

00:18:57,820 --> 00:19:03,400
rolling deploy is the following you have

00:19:00,429 --> 00:19:06,130
your version 1.0.0 running somewhere it

00:19:03,400 --> 00:19:08,169
is set up in a specific way that at

00:19:06,130 --> 00:19:10,270
first deployment you thought okay this

00:19:08,169 --> 00:19:12,730
is the right size these are the right

00:19:10,270 --> 00:19:14,980
tags I want attached to it this is the

00:19:12,730 --> 00:19:17,650
right port that it's running on and then

00:19:14,980 --> 00:19:19,419
version 1.1 comes along you actually

00:19:17,650 --> 00:19:20,500
don't want to redo that you don't want

00:19:19,419 --> 00:19:23,260
to say okay now I have to go

00:19:20,500 --> 00:19:26,380
back to version 1.00 and see how that's

00:19:23,260 --> 00:19:30,580
running copy paste all the specific 'no

00:19:26,380 --> 00:19:33,250
sit it in my 1.1 version and then kind

00:19:30,580 --> 00:19:35,440
of you know switch it what you want to

00:19:33,250 --> 00:19:38,800
do is just bump the version number

00:19:35,440 --> 00:19:43,840
because a 1.1 release should have no

00:19:38,800 --> 00:19:46,570
breaking changes 1.0.1 just a bug fix

00:19:43,840 --> 00:19:48,580
should even be easier so many systems

00:19:46,570 --> 00:19:50,020
makes it's actually pretty hard to do

00:19:48,580 --> 00:19:52,450
you kind of have to have all these

00:19:50,020 --> 00:19:54,760
knowledge of like how is my current

00:19:52,450 --> 00:19:57,520
environment doing when i want to add

00:19:54,760 --> 00:19:58,450
something to it so what we do is we give

00:19:57,520 --> 00:20:01,870
you two options

00:19:58,450 --> 00:20:04,090
and it's so you can see here there's two

00:20:01,870 --> 00:20:06,070
commands that i give from the vamp CLI

00:20:04,090 --> 00:20:09,250
there's a CLI that you can use in your

00:20:06,070 --> 00:20:12,100
CI system or just on the command line

00:20:09,250 --> 00:20:14,980
and it's the vamp generate command and

00:20:12,100 --> 00:20:17,860
what vamp generate does is it ingests a

00:20:14,980 --> 00:20:20,020
current running deployment and allows

00:20:17,860 --> 00:20:22,360
you to basically replace a couple of

00:20:20,020 --> 00:20:24,760
placeholders like the version number or

00:20:22,360 --> 00:20:27,940
like the container name or the address

00:20:24,760 --> 00:20:30,520
of the registry this way you keep all

00:20:27,940 --> 00:20:34,450
the things that are static the same you

00:20:30,520 --> 00:20:36,760
just bump the version and what you then

00:20:34,450 --> 00:20:39,570
do once you have done this and this will

00:20:36,760 --> 00:20:42,970
then in the end

00:20:39,570 --> 00:20:47,190
oops here we go it will turn out that

00:20:42,970 --> 00:20:50,470
you have two blueprints automatically

00:20:47,190 --> 00:20:53,650
generated from the CLI and i'm showing

00:20:50,470 --> 00:20:55,660
you these in the UI now because it's

00:20:53,650 --> 00:20:58,810
nicer to look at we started off with a

00:20:55,660 --> 00:21:01,810
simple blueprint 1.0.0 we push it into

00:20:58,810 --> 00:21:03,970
the vamp generate command we replace a

00:21:01,810 --> 00:21:10,600
couple of tags and outcomes to one point

00:21:03,970 --> 00:21:13,690
1.0 what you can do is either from the

00:21:10,600 --> 00:21:16,390
command line as is shown here to a vamp

00:21:13,690 --> 00:21:20,950
merge it's the second the middle bash

00:21:16,390 --> 00:21:23,320
command at line 57 sorry 75 switching

00:21:20,950 --> 00:21:26,110
from English to German to Dutch

00:21:23,320 --> 00:21:29,830
sometimes mixes up the numbers so number

00:21:26,110 --> 00:21:32,170
75 vamp merge it sells it says put the

00:21:29,830 --> 00:21:33,580
1.1 version in my already existing

00:21:32,170 --> 00:21:36,549
deployment

00:21:33,580 --> 00:21:40,059
from the UI it's basically exactly the

00:21:36,549 --> 00:21:45,009
same and I think I already had it

00:21:40,059 --> 00:21:48,519
deployed here so yes I did so I'm just

00:21:45,009 --> 00:21:53,279
gonna undeploy it she's from the command

00:21:48,519 --> 00:21:59,489
line to vamp undeploy with that list

00:21:53,279 --> 00:22:04,269
deployments there your vamp on deploy

00:21:59,489 --> 00:22:11,559
simple deploy oh sorry that's not an

00:22:04,269 --> 00:22:13,929
underscore deploy but so while that's

00:22:11,559 --> 00:22:21,879
rolling out let me just clean this thing

00:22:13,929 --> 00:22:23,590
up boom yeah get rid of everything on

00:22:21,879 --> 00:22:29,739
deploying we should have a clean slate

00:22:23,590 --> 00:22:36,149
pretty quickly create a new deployment

00:22:29,739 --> 00:22:36,149
so I'm resetting it simple deployment

00:22:37,109 --> 00:22:42,070
this is all kind of pre cached so it

00:22:40,389 --> 00:22:44,710
should be pretty quick and the app is

00:22:42,070 --> 00:22:51,519
not that big we're not talking Java

00:22:44,710 --> 00:22:53,710
sizes here deploying great so what the

00:22:51,519 --> 00:22:56,259
merge command allows you to do from the

00:22:53,710 --> 00:22:59,139
UI it's even more simple you just click

00:22:56,259 --> 00:23:00,789
merge two and it will prompt you cuz I

00:22:59,139 --> 00:23:05,499
can hey do you want to merge it maybe to

00:23:00,789 --> 00:23:09,609
this one and yes we do click merge and

00:23:05,499 --> 00:23:13,239
it's deployed or it is deploying what

00:23:09,609 --> 00:23:14,769
happens now is actually nothing your

00:23:13,239 --> 00:23:17,019
users of your app will not notice

00:23:14,769 --> 00:23:19,690
anything because we haven't changed

00:23:17,019 --> 00:23:22,629
anything in the Gateway yet it's just

00:23:19,690 --> 00:23:26,830
the APIs sitting there receiving no

00:23:22,629 --> 00:23:30,460
traffic so in your CI CD pipeline the

00:23:26,830 --> 00:23:33,999
next step would be to update the Gateway

00:23:30,460 --> 00:23:35,859
the top command that's a long command

00:23:33,999 --> 00:23:37,869
but actually makes sense and I will not

00:23:35,859 --> 00:23:39,570
try to explain it right here but it's a

00:23:37,869 --> 00:23:43,059
very logical thing where we say hey

00:23:39,570 --> 00:23:44,859
there's one Gateway it's at 100% wait

00:23:43,059 --> 00:23:47,410
and there's another one it's at 0%

00:23:44,859 --> 00:23:51,450
weight update it from

00:23:47,410 --> 00:23:54,160
to 1090 or 5050 or something like that

00:23:51,450 --> 00:23:58,240
it is exactly what I showed you with the

00:23:54,160 --> 00:24:01,570
slider just through a CLI command so

00:23:58,240 --> 00:24:04,150
what you would do now is actually try to

00:24:01,570 --> 00:24:08,350
put that into a script and we have a

00:24:04,150 --> 00:24:09,700
Jenkins pipeline script in a gist and

00:24:08,350 --> 00:24:13,210
I'm just gonna show you it's a piece of

00:24:09,700 --> 00:24:17,160
groovy that's what Jenkins eats pipeline

00:24:13,210 --> 00:24:17,160
scripts I'm just gonna blow it up a bit

00:24:17,970 --> 00:24:25,960
and here at the top you can see a super

00:24:21,490 --> 00:24:30,160
simple loop it goes through ten steps

00:24:25,960 --> 00:24:33,430
and at each step it updates the weights

00:24:30,160 --> 00:24:35,830
and then it sleeps for ten seconds

00:24:33,430 --> 00:24:39,730
and it does it again it does it again

00:24:35,830 --> 00:24:43,180
until it's 100 and then it stops or at

00:24:39,730 --> 00:24:47,440
least when ten steps are done this is

00:24:43,180 --> 00:24:54,250
pretty powerful already it's this whole

00:24:47,440 --> 00:24:57,070
pipeline script is 85 lines with

00:24:54,250 --> 00:24:59,970
indentation and comments etc it

00:24:57,070 --> 00:25:03,700
describes the whole deployment of this

00:24:59,970 --> 00:25:05,740
admittedly pretty simple nodejs app but

00:25:03,700 --> 00:25:08,680
you know if you can already do this

00:25:05,740 --> 00:25:11,910
deploying testing pushing etc in this

00:25:08,680 --> 00:25:15,210
amount of code that's pretty nice

00:25:11,910 --> 00:25:17,680
but as many of you would have noticed

00:25:15,210 --> 00:25:20,380
what if something goes wrong this loop

00:25:17,680 --> 00:25:24,070
that's pretty you know simple you're

00:25:20,380 --> 00:25:25,540
completely correct there are many other

00:25:24,070 --> 00:25:27,220
ways to do this and there's not a lot of

00:25:25,540 --> 00:25:30,160
control here it just will just keep

00:25:27,220 --> 00:25:34,720
going through these ten percent

00:25:30,160 --> 00:25:40,300
increments so what are our options do we

00:25:34,720 --> 00:25:42,790
have here well one option an extra

00:25:40,300 --> 00:25:44,410
option is to split the testing that you

00:25:42,790 --> 00:25:48,670
want to do once the application is

00:25:44,410 --> 00:25:50,500
deployed on user segments and these

00:25:48,670 --> 00:25:54,160
segments can be anything you like as

00:25:50,500 --> 00:25:57,340
long as we can somehow read them from

00:25:54,160 --> 00:26:01,330
either the content of your requests or

00:25:57,340 --> 00:26:04,119
the headers in your requests so

00:26:01,330 --> 00:26:06,340
with HTTP stuff it's pretty easy with

00:26:04,119 --> 00:26:09,730
TCP stuff it becomes a little bit harder

00:26:06,340 --> 00:26:13,600
but it's possible so we're gonna do a

00:26:09,730 --> 00:26:15,220
little simple experiment here this

00:26:13,600 --> 00:26:19,330
command that you see here that starts at

00:26:15,220 --> 00:26:23,049
line at line 1979 femp

00:26:19,330 --> 00:26:27,279
update gateway what it does is it goes

00:26:23,049 --> 00:26:31,950
into the gateway and it sets a specific

00:26:27,279 --> 00:26:34,960
what we call condition condition is

00:26:31,950 --> 00:26:37,600
pretty much the same as content based

00:26:34,960 --> 00:26:40,359
routing for all you network people out

00:26:37,600 --> 00:26:41,950
there we do basically the packet

00:26:40,359 --> 00:26:43,509
inspection we look at your requests we

00:26:41,950 --> 00:26:46,840
grab out the headers and based on that

00:26:43,509 --> 00:26:49,179
information which you can tune with vamp

00:26:46,840 --> 00:26:52,090
we make decisions on where the

00:26:49,179 --> 00:26:54,309
application request should go you can do

00:26:52,090 --> 00:26:56,950
this in the UI or you can do this from

00:26:54,309 --> 00:26:59,919
the CLI which means you can integrate it

00:26:56,950 --> 00:27:01,899
into your CI CD pipeline so I'm just

00:26:59,919 --> 00:27:04,139
gonna run this and then we're gonna see

00:27:01,899 --> 00:27:04,139
what happens

00:27:05,340 --> 00:27:12,700
it didn't throw an error so it should be

00:27:09,009 --> 00:27:14,379
fine if I go to my gateway you should

00:27:12,700 --> 00:27:16,059
probably be able to see this I'm gonna

00:27:14,379 --> 00:27:20,139
make it smaller

00:27:16,059 --> 00:27:23,320
boom what we just did it you can see it

00:27:20,139 --> 00:27:25,779
here in the corner lower right corner we

00:27:23,320 --> 00:27:28,779
added a shortcode what we call user

00:27:25,779 --> 00:27:31,059
agent the shortcode user agent on the

00:27:28,779 --> 00:27:33,669
vamp website you can see a whole bunch

00:27:31,059 --> 00:27:37,869
of short codes that we created in vamp

00:27:33,669 --> 00:27:42,669
and in the end they map to a CH a proxy

00:27:37,869 --> 00:27:44,980
ACL rules H a proxy H a ACL rules are

00:27:42,669 --> 00:27:47,019
kind of daunting can be very hard to

00:27:44,980 --> 00:27:49,269
read and understand so that's why we

00:27:47,019 --> 00:27:50,859
made them a bit easier but if you want

00:27:49,269 --> 00:27:53,139
to use them if you want to use reg exes

00:27:50,859 --> 00:27:56,679
it's so be fine you can also do this

00:27:53,139 --> 00:27:57,879
what's even cooler is that and you might

00:27:56,679 --> 00:28:00,100
have noticed there's this little tab

00:27:57,879 --> 00:28:04,710
called conditions here it's empty now

00:28:00,100 --> 00:28:08,830
but we allow you to save the conditions

00:28:04,710 --> 00:28:10,720
that are here as artifacts so you could

00:28:08,830 --> 00:28:13,179
come up with something really difficult

00:28:10,720 --> 00:28:15,070
like this application with this user

00:28:13,179 --> 00:28:18,070
that's that cookie from that bra

00:28:15,070 --> 00:28:21,220
blah blah blah which could be very long

00:28:18,070 --> 00:28:23,650
you know piece of a long string or a

00:28:21,220 --> 00:28:26,440
long FX you save it and then you can use

00:28:23,650 --> 00:28:28,180
a reference to it allowing other people

00:28:26,440 --> 00:28:32,130
that are not as handy with this stuff to

00:28:28,180 --> 00:28:34,240
still use your user segmenting so

00:28:32,130 --> 00:28:39,370
everyone whips out their phones or their

00:28:34,240 --> 00:28:44,410
browsers you go to mazes con vamp dot IO

00:28:39,370 --> 00:28:48,780
and I am on chrome here and I will have

00:28:44,410 --> 00:28:52,810
my blue version but if you're on Safari

00:28:48,780 --> 00:28:58,090
let me just reload this it actually does

00:28:52,810 --> 00:29:01,060
it is the green version admittedly very

00:28:58,090 --> 00:29:04,180
simple example but the sky is pretty

00:29:01,060 --> 00:29:06,670
much the limit here there's a lot of

00:29:04,180 --> 00:29:09,880
interesting stuff you can do we've seen

00:29:06,670 --> 00:29:12,160
usage of this where for instance is a

00:29:09,880 --> 00:29:14,590
very common problem I have a new version

00:29:12,160 --> 00:29:17,530
of my app but I just want to show it to

00:29:14,590 --> 00:29:20,200
the internal personnel put the IP

00:29:17,530 --> 00:29:22,320
address of your company in it we will

00:29:20,200 --> 00:29:25,750
route the traffic from internal traffic

00:29:22,320 --> 00:29:32,110
internal users to this new version so

00:29:25,750 --> 00:29:35,620
you can try it out super easy so those

00:29:32,110 --> 00:29:40,090
are two ways of getting from our 1.0 to

00:29:35,620 --> 00:29:44,850
our 1.1 and now we're gonna dive into

00:29:40,090 --> 00:29:44,850
the last chapter which is the workflows

00:29:46,440 --> 00:29:54,850
as I try to explain in my sheet

00:29:50,140 --> 00:29:58,440
workflows are pieces of JavaScript and

00:29:54,850 --> 00:30:05,650
I'm just going to show you one piece

00:29:58,440 --> 00:30:07,060
it's cold here workflow canary Jas some

00:30:05,650 --> 00:30:08,890
of you might not be familiar with node

00:30:07,060 --> 00:30:10,840
or JavaScript but I think you can

00:30:08,890 --> 00:30:13,540
definitely follow a couple of these

00:30:10,840 --> 00:30:17,260
things that you can see here first of

00:30:13,540 --> 00:30:19,870
all we import our libraries nothing

00:30:17,260 --> 00:30:22,420
special there then we set a couple of

00:30:19,870 --> 00:30:25,090
environment variables and why are we

00:30:22,420 --> 00:30:27,660
doing this we're doing this because this

00:30:25,090 --> 00:30:30,540
workflow is generic

00:30:27,660 --> 00:30:31,080
can deploy anything you give it within

00:30:30,540 --> 00:30:33,930
vamp

00:30:31,080 --> 00:30:37,440
because the services and the gateways it

00:30:33,930 --> 00:30:39,000
it's gonna start editing are put into

00:30:37,440 --> 00:30:41,040
environment variables I will make this

00:30:39,000 --> 00:30:43,980
very clear later all so we get

00:30:41,040 --> 00:30:48,330
environment variables in this case the

00:30:43,980 --> 00:30:51,000
gateway service one and service two and

00:30:48,330 --> 00:30:52,920
then we have a bunch of functions we

00:30:51,000 --> 00:30:56,910
have the run function an increase

00:30:52,920 --> 00:30:58,830
function and an update function the run

00:30:56,910 --> 00:31:01,260
function is pretty easy it runs the

00:30:58,830 --> 00:31:04,170
whole thing it's the entry point for the

00:31:01,260 --> 00:31:06,810
whole workflow the increased function

00:31:04,170 --> 00:31:10,800
does what we just saw in the Jenkins

00:31:06,810 --> 00:31:13,950
script in groovy it loops over a bunch

00:31:10,800 --> 00:31:15,120
of things and adjusts the weights you

00:31:13,950 --> 00:31:18,420
can see that right here in the code

00:31:15,120 --> 00:31:20,040
starting at line 19 that we look at what

00:31:18,420 --> 00:31:23,400
is the current weight is it still within

00:31:20,040 --> 00:31:26,010
the bands that we want it to be and if

00:31:23,400 --> 00:31:29,040
so and everything is OK we update it and

00:31:26,010 --> 00:31:33,150
then we run at the line 25 update

00:31:29,040 --> 00:31:35,490
gateway this is a lot cleaner than doing

00:31:33,150 --> 00:31:40,290
curl commands or something else

00:31:35,490 --> 00:31:42,900
from a CI CD pipeline and then we have

00:31:40,290 --> 00:31:47,600
the update function and the update

00:31:42,900 --> 00:31:52,400
function uses our own node SDK for vamp

00:31:47,600 --> 00:31:52,400
to make the actual update to the Gateway

00:31:53,030 --> 00:32:01,680
so what we do is we save this piece of

00:31:57,660 --> 00:32:05,040
JavaScript we save it into vamp and I

00:32:01,680 --> 00:32:08,100
can show you where it is and this might

00:32:05,040 --> 00:32:12,120
also make it a bit clearer what a breed

00:32:08,100 --> 00:32:14,910
is so a breed is a static art effect

00:32:12,120 --> 00:32:18,270
what we did is we wrapped this piece of

00:32:14,910 --> 00:32:20,310
script into a bunch of llamó tags

00:32:18,270 --> 00:32:21,630
let me just blow it up a bit actually I

00:32:20,310 --> 00:32:24,570
have it right here

00:32:21,630 --> 00:32:27,030
breathe canary it's exactly the exact

00:32:24,570 --> 00:32:29,490
same script we just tagged it with what

00:32:27,030 --> 00:32:29,730
it is put it into vamp it just sits

00:32:29,490 --> 00:32:31,770
there

00:32:29,730 --> 00:32:35,110
it does nothing

00:32:31,770 --> 00:32:37,690
then we have our workflow and this is

00:32:35,110 --> 00:32:41,590
the actual workflow definition you can

00:32:37,690 --> 00:32:44,110
see what it does it has a name and it

00:32:41,590 --> 00:32:46,210
references that breed canary it's cold

00:32:44,110 --> 00:32:48,580
so it will pull in this piece of

00:32:46,210 --> 00:32:51,160
JavaScript and it will instruct it with

00:32:48,580 --> 00:32:54,820
these variables the period the window

00:32:51,160 --> 00:32:57,190
period is how often it it goes through

00:32:54,820 --> 00:32:59,679
its loop window we will jump into that

00:32:57,190 --> 00:33:02,440
later the gateway that it needs to each

00:32:59,679 --> 00:33:06,520
instrument and the services within that

00:33:02,440 --> 00:33:07,780
gateway that are the actors now the two

00:33:06,520 --> 00:33:11,559
services that we want to migrate from

00:33:07,780 --> 00:33:13,290
version one to version two there's a

00:33:11,559 --> 00:33:16,030
couple of options you can give there

00:33:13,290 --> 00:33:17,710
none of them are pretty much important

00:33:16,030 --> 00:33:21,700
right now let me just scroll here you

00:33:17,710 --> 00:33:24,700
can see how we instrument service 1 and

00:33:21,700 --> 00:33:27,220
service 2 and now we can run this

00:33:24,700 --> 00:33:28,780
workflow you can instantly see you could

00:33:27,220 --> 00:33:30,580
do this with anything you just have to

00:33:28,780 --> 00:33:31,929
write that piece of JavaScript once and

00:33:30,580 --> 00:33:36,160
then you stick in the variables and it

00:33:31,929 --> 00:33:43,270
will run so just to show you that I'm

00:33:36,160 --> 00:33:46,660
not lying let's have a look we are at C

00:33:43,270 --> 00:33:49,120
where are we oh you can't see it I'm at

00:33:46,660 --> 00:33:52,650
the wrong tab here's our gateway

00:33:49,120 --> 00:33:56,559
definition 100% 0%

00:33:52,650 --> 00:33:58,270
ok let's kick off this workflow and I

00:33:56,559 --> 00:33:59,170
could do this now let's do it from the

00:33:58,270 --> 00:34:01,390
UI why not

00:33:59,170 --> 00:34:02,820
or actually I think I have the command

00:34:01,390 --> 00:34:15,600
right here

00:34:02,820 --> 00:34:15,600
yes bottom create flow

00:34:20,540 --> 00:34:29,630
all right so it's pushed in you can

00:34:26,030 --> 00:34:31,490
instantly start seeing stuff happen here

00:34:29,630 --> 00:34:36,050
at the bottom you can see that it's

00:34:31,490 --> 00:34:37,970
updating the 90% and the 10% actually we

00:34:36,050 --> 00:34:40,070
still have this one the user agent is

00:34:37,970 --> 00:34:42,050
Safari on it that's actually we should

00:34:40,070 --> 00:34:45,590
have removed that because they both work

00:34:42,050 --> 00:34:49,220
at the same time conditions are first

00:34:45,590 --> 00:34:51,290
there at their number one in in the

00:34:49,220 --> 00:34:53,450
hierarchy so any request is first match

00:34:51,290 --> 00:34:56,330
to a condition and if it's then not

00:34:53,450 --> 00:34:59,620
matched it will look at the weights so

00:34:56,330 --> 00:35:02,180
what's gonna happen right now is that

00:34:59,620 --> 00:35:04,490
user agent the Safari will still always

00:35:02,180 --> 00:35:09,340
go here so this regardless of what

00:35:04,490 --> 00:35:11,570
happens to this these weights and our

00:35:09,340 --> 00:35:14,570
workflow you can see right here in the

00:35:11,570 --> 00:35:20,330
workflows tab this guy is running and

00:35:14,570 --> 00:35:21,920
doing its job and at the same time good

00:35:20,330 --> 00:35:28,150
to show you actually have a little

00:35:21,920 --> 00:35:32,150
script here that's just doing requests

00:35:28,150 --> 00:35:34,250
every I think half second a fire get

00:35:32,150 --> 00:35:35,840
onto the home page it should always be

00:35:34,250 --> 00:35:38,180
green because you don't want to lose

00:35:35,840 --> 00:35:41,630
requests

00:35:38,180 --> 00:35:43,310
we're almost done we can see the 20% 80%

00:35:41,630 --> 00:35:44,870
it's almost there

00:35:43,310 --> 00:35:46,790
but some of you might say like yeah

00:35:44,870 --> 00:35:48,800
that's nice but it's actually still

00:35:46,790 --> 00:35:50,660
doing exactly the same it's not checking

00:35:48,800 --> 00:35:53,930
whether things are okay when I'm rolling

00:35:50,660 --> 00:35:57,080
out when I'm doing my deployment you're

00:35:53,930 --> 00:36:02,240
absolutely correct but I needed this set

00:35:57,080 --> 00:36:07,820
up to show you the next iteration of our

00:36:02,240 --> 00:36:11,480
script and the next iteration is a

00:36:07,820 --> 00:36:15,190
canary release with rollback and this is

00:36:11,480 --> 00:36:17,800
where the metrics engine comes in the

00:36:15,190 --> 00:36:21,170
libraries that we import at the top

00:36:17,800 --> 00:36:24,350
allow us to dive in to the metrics and

00:36:21,170 --> 00:36:26,450
use this in our script and this script

00:36:24,350 --> 00:36:30,020
is exactly the same as the one I showed

00:36:26,450 --> 00:36:32,140
you earlier except for this little extra

00:36:30,020 --> 00:36:32,140
bit

00:36:32,500 --> 00:36:42,350
and it starts at line 23 what we're

00:36:37,010 --> 00:36:46,150
doing is recounting the amount of 500

00:36:42,350 --> 00:36:49,220
errors that happen on a specific gateway

00:36:46,150 --> 00:36:50,930
it might be bit crypt cryptic and we're

00:36:49,220 --> 00:36:53,750
still working on getting the naming

00:36:50,930 --> 00:36:56,630
right but ft you can see incline 23 is

00:36:53,750 --> 00:36:58,790
front end this is an H a proxy specific

00:36:56,630 --> 00:37:00,260
thing we're gonna make that a bit nicer

00:36:58,790 --> 00:37:03,080
because we don't really want you guys to

00:37:00,260 --> 00:37:06,110
be worrying about H a proxy specific

00:37:03,080 --> 00:37:09,380
things then we have the gateway name and

00:37:06,110 --> 00:37:11,150
then st is status code I actually had to

00:37:09,380 --> 00:37:13,010
look that up but what is s T it's a

00:37:11,150 --> 00:37:17,030
status code just to HTTP status code

00:37:13,010 --> 00:37:20,420
that is greater than equal 500 500 means

00:37:17,030 --> 00:37:22,280
things are going bad so what we do is we

00:37:20,420 --> 00:37:23,900
check that and because we're using

00:37:22,280 --> 00:37:25,940
elasticsearch we have some pretty

00:37:23,900 --> 00:37:27,770
powerful stuff that we can do there you

00:37:25,940 --> 00:37:30,770
can see the dollar window and dollar

00:37:27,770 --> 00:37:33,500
window we instrument with 30 which is 30

00:37:30,770 --> 00:37:36,530
seconds so we look at the amount of

00:37:33,500 --> 00:37:38,960
errors 500 arrows in the last 30 seconds

00:37:36,530 --> 00:37:40,820
you can pretty much do whatever you want

00:37:38,960 --> 00:37:43,040
there you can write a very complicated

00:37:40,820 --> 00:37:45,140
script that takes into account all kinds

00:37:43,040 --> 00:37:48,350
of other things but it kind of drives

00:37:45,140 --> 00:37:50,750
home the point so we count them and then

00:37:48,350 --> 00:37:54,250
at line 25 you can see if there's more

00:37:50,750 --> 00:37:56,840
than three we actually roll back

00:37:54,250 --> 00:38:02,770
otherwise just proceed as normal and

00:37:56,840 --> 00:38:05,570
increase the weight of the Gateway so

00:38:02,770 --> 00:38:08,540
let's test it out I think we should be

00:38:05,570 --> 00:38:14,360
done here yeah we're at simple

00:38:08,540 --> 00:38:16,640
deployment number one is at zero and the

00:38:14,360 --> 00:38:19,430
other one is at 100 so I'm just gonna

00:38:16,640 --> 00:38:22,520
quickly reset this because we're gonna

00:38:19,430 --> 00:38:24,740
have to have an application that

00:38:22,520 --> 00:38:29,030
actually creates errors luckily I

00:38:24,740 --> 00:38:33,200
created an example of our service that

00:38:29,030 --> 00:38:40,340
throws 500 errors all the time so let's

00:38:33,200 --> 00:38:43,020
make a clean slate here and I'm gonna

00:38:40,340 --> 00:38:46,150
delete the Gateway just to be sure

00:38:43,020 --> 00:38:46,150
[Music]

00:38:46,610 --> 00:38:54,140
our starting position is exactly the

00:38:49,160 --> 00:38:58,970
same again it's 1.0.0 we're gonna call

00:38:54,140 --> 00:39:05,630
it simple deployment again deploy it

00:38:58,970 --> 00:39:06,230
great actually I'm gonna suspend this

00:39:05,630 --> 00:39:12,710
one

00:39:06,230 --> 00:39:14,990
bye-bye and then I'm gonna merge in our

00:39:12,710 --> 00:39:22,310
simple deployment one point one point

00:39:14,990 --> 00:39:23,720
zero dash faulty budget of course in the

00:39:22,310 --> 00:39:30,680
real world we don't know that it's

00:39:23,720 --> 00:39:35,630
faulty so it is deploying it's probably

00:39:30,680 --> 00:39:37,490
already done it's still busy starting

00:39:35,630 --> 00:39:45,340
position one hundred percent zero

00:39:37,490 --> 00:39:45,340
percent and while that is deploying

00:39:47,680 --> 00:39:52,300
we're gonna issue the commands to

00:39:53,079 --> 00:40:06,320
actually start the workflow yes it's the

00:40:04,339 --> 00:40:10,150
breed already there it's already there

00:40:06,320 --> 00:40:10,150
for my practice run yesterday

00:40:14,240 --> 00:40:20,530
so this looks all blue and nice quit

00:40:24,890 --> 00:40:28,910
are you done he employment it's done so

00:40:28,339 --> 00:40:33,140
here we go

00:40:28,910 --> 00:40:36,380
vamp create workflow boom so what are

00:40:33,140 --> 00:40:39,410
you gonna notice here in the bottom and

00:40:36,380 --> 00:40:43,489
here let me just get old screen setup so

00:40:39,410 --> 00:40:45,440
you can see it the beginning everything

00:40:43,489 --> 00:40:48,499
is exactly the same nothing's happening

00:40:45,440 --> 00:40:51,440
90 percent 10 percent looks good boom

00:40:48,499 --> 00:40:51,799
500 internal server error hmm that's not

00:40:51,440 --> 00:40:53,809
good

00:40:51,799 --> 00:40:56,690
oops there's another one there's another

00:40:53,809 --> 00:40:57,049
one so we should see something happening

00:40:56,690 --> 00:40:59,779
here

00:40:57,049 --> 00:41:02,980
it's almost real-time what you see oh

00:40:59,779 --> 00:41:06,950
now we're already switched back to 100

00:41:02,980 --> 00:41:10,480
it will keep doing this forever because

00:41:06,950 --> 00:41:10,480
we didn't build in like a stop sign

00:41:10,640 --> 00:41:15,289
it's a workflow that's now in daemon

00:41:12,859 --> 00:41:17,480
mode daemon mode means it will just keep

00:41:15,289 --> 00:41:19,249
running and running and running we also

00:41:17,480 --> 00:41:21,559
have workflows that you can trigger with

00:41:19,249 --> 00:41:25,579
events they're basically one-off like do

00:41:21,559 --> 00:41:27,799
this now if you get to the end stop for

00:41:25,579 --> 00:41:29,869
demo purposes this is a bit easier but I

00:41:27,799 --> 00:41:34,489
would definitely recommend doing this

00:41:29,869 --> 00:41:36,710
with an event based workflow also and I

00:41:34,489 --> 00:41:39,499
thought about doing this for the demo

00:41:36,710 --> 00:41:42,230
but too many variables things can go

00:41:39,499 --> 00:41:44,150
wrong what's super easy to do now you're

00:41:42,230 --> 00:41:47,509
in JavaScript land is just import I

00:41:44,150 --> 00:41:48,999
don't know slack or something else send

00:41:47,509 --> 00:41:51,799
a message put in your if statement

00:41:48,999 --> 00:41:54,039
something like hey something went wrong

00:41:51,799 --> 00:41:56,210
here so you have instant notifications

00:41:54,039 --> 00:41:58,880
directly from your own deployment about

00:41:56,210 --> 00:42:02,029
what's happening what I did do actually

00:41:58,880 --> 00:42:06,319
you can see this in the code here is

00:42:02,029 --> 00:42:10,519
that I have it throw an event did I put

00:42:06,319 --> 00:42:10,910
it in let me see update get oh no I took

00:42:10,519 --> 00:42:17,930
it out

00:42:10,910 --> 00:42:21,769
sorry guys so this will keep on running

00:42:17,930 --> 00:42:24,739
and in the end we will never actually

00:42:21,769 --> 00:42:26,900
deploy our new version that will just

00:42:24,739 --> 00:42:31,029
keep bumping into this error stage I

00:42:26,900 --> 00:42:31,029
hope that's clear so

00:42:31,800 --> 00:42:35,890
that is actually the end of my talk I

00:42:34,210 --> 00:42:38,680
wanted to keep a lot of time open for

00:42:35,890 --> 00:42:45,340
questions because there always are thank

00:42:38,680 --> 00:42:47,680
you and again if you want to play along

00:42:45,340 --> 00:42:50,410
at home or check out the code or the

00:42:47,680 --> 00:42:51,820
slides it's all here at github and you

00:42:50,410 --> 00:43:02,380
can always send me an email or ask

00:42:51,820 --> 00:43:04,540
questions right now thank you thanks for

00:43:02,380 --> 00:43:07,290
the presentation how do you integrate

00:43:04,540 --> 00:43:10,450
with the kubernetes ingress exactly oh

00:43:07,290 --> 00:43:15,670
that's a very interesting question if

00:43:10,450 --> 00:43:22,480
you spin up for example kubernetes

00:43:15,670 --> 00:43:24,820
cluster right now on a sure they

00:43:22,480 --> 00:43:28,300
integrate into their own load balancer

00:43:24,820 --> 00:43:32,440
for this and at this moment it will sit

00:43:28,300 --> 00:43:34,570
let's say in front of it we are looking

00:43:32,440 --> 00:43:41,380
into making native integration work

00:43:34,570 --> 00:43:43,360
there that is probably possible using

00:43:41,380 --> 00:43:47,080
dialects and I'm just going to show you

00:43:43,360 --> 00:43:50,530
this right now because it will give you

00:43:47,080 --> 00:43:55,030
a little bit of information about how

00:43:50,530 --> 00:43:57,730
this might work this part starting at

00:43:55,030 --> 00:44:00,250
line 14 dialects marathon container

00:43:57,730 --> 00:44:01,990
docker for school image is true what

00:44:00,250 --> 00:44:05,110
we're doing here is we're natively

00:44:01,990 --> 00:44:07,680
speaking to marathon we just go to the

00:44:05,110 --> 00:44:10,750
marathon dogs look at what their JSON

00:44:07,680 --> 00:44:12,880
structure is and put it in here I put

00:44:10,750 --> 00:44:15,400
this forest pool image true because

00:44:12,880 --> 00:44:16,960
during the making of this demo I tweaked

00:44:15,400 --> 00:44:19,570
the container a bit and it's bit of a

00:44:16,960 --> 00:44:21,850
pain having to flush your darker cache

00:44:19,570 --> 00:44:24,730
on the nodes so now I just instruct

00:44:21,850 --> 00:44:27,130
marathon or DCOs in this case to always

00:44:24,730 --> 00:44:30,940
pull the container so we're actually

00:44:27,130 --> 00:44:34,150
specking what parts of kubernetes we're

00:44:30,940 --> 00:44:36,970
putting into the dialects like this week

00:44:34,150 --> 00:44:39,540
or next week so I expect a lot of things

00:44:36,970 --> 00:44:39,540
happening there

00:44:45,250 --> 00:44:51,650
so thanks again for the presentation my

00:44:48,890 --> 00:44:53,780
question was regarding gateways yes I

00:44:51,650 --> 00:44:54,770
heard that it was based on a cheap proxy

00:44:53,780 --> 00:44:56,839
yes correct

00:44:54,770 --> 00:44:59,210
so in the case of TCO SSE to use

00:44:56,839 --> 00:45:01,760
marathon lb or it spins up another

00:44:59,210 --> 00:45:03,710
instance it does not use marathon lb

00:45:01,760 --> 00:45:07,070
marathon lb is completely separate from

00:45:03,710 --> 00:45:12,710
this but we get this question so many

00:45:07,070 --> 00:45:17,000
times that what we did three weeks ago I

00:45:12,710 --> 00:45:20,660
up this blog post I'm just gonna go to

00:45:17,000 --> 00:45:22,490
her own blog how to extend marathon lb

00:45:20,660 --> 00:45:24,710
with canary releasing features using

00:45:22,490 --> 00:45:27,080
vamp because there's a lots of people on

00:45:24,710 --> 00:45:28,670
marathon starting out with marathon lb

00:45:27,080 --> 00:45:31,099
and marathon lb actually gives you

00:45:28,670 --> 00:45:34,490
through a bunch of Python scripts some

00:45:31,099 --> 00:45:36,200
kind of zero downtime deployment they

00:45:34,490 --> 00:45:41,859
it's kind of not production-ready

00:45:36,200 --> 00:45:45,589
they're kind of being I don't know bit

00:45:41,859 --> 00:45:47,930
being a bit difficult about it but we

00:45:45,589 --> 00:45:50,480
made a write-up on how you can actually

00:45:47,930 --> 00:45:52,160
start using vamp and actually it's

00:45:50,480 --> 00:45:54,589
actually already here maybe this picture

00:45:52,160 --> 00:45:56,930
MIT might not show you a lot maybe a bit

00:45:54,589 --> 00:46:00,130
what we allow you to do is deploy vamp

00:45:56,930 --> 00:46:02,990
and you don't have to use the blueprints

00:46:00,130 --> 00:46:05,540
the the breeds all that other stuff the

00:46:02,990 --> 00:46:10,730
workflows you just use the gateway part

00:46:05,540 --> 00:46:13,339
and we can then still and use the

00:46:10,730 --> 00:46:17,000
sliders the conditions etc and you can

00:46:13,339 --> 00:46:19,480
use it next to marathon Elbe does that

00:46:17,000 --> 00:46:19,480
answer your question

00:46:26,970 --> 00:46:33,520
my question so it's easily to use our

00:46:30,819 --> 00:46:35,680
own services it's already running and to

00:46:33,520 --> 00:46:38,710
use it on the getaway part and correct

00:46:35,680 --> 00:46:42,010
yeah tricks and that's yeah so this is

00:46:38,710 --> 00:46:45,069
extremely common thing we find when we

00:46:42,010 --> 00:46:46,690
talk to customers and users is that hey

00:46:45,069 --> 00:46:49,180
we already put all this effort into

00:46:46,690 --> 00:46:50,770
tweaking our marathon deployments but we

00:46:49,180 --> 00:46:52,510
still like that cool slider stuff and

00:46:50,770 --> 00:46:55,450
all that stuff it's totally usable and

00:46:52,510 --> 00:46:57,099
it's also I mean it's free it's open

00:46:55,450 --> 00:46:59,710
source you can install ramp from the

00:46:57,099 --> 00:47:02,859
universe in DC OS so you could be up and

00:46:59,710 --> 00:47:05,470
running using this well it says a 7

00:47:02,859 --> 00:47:06,849
minute read in 7 minutes and you can

00:47:05,470 --> 00:47:08,619
start playing around with it and the

00:47:06,849 --> 00:47:10,420
nice thing about it is is that it's

00:47:08,619 --> 00:47:12,220
parallel so you can still have your

00:47:10,420 --> 00:47:14,560
let's say your edge load balancer or

00:47:12,220 --> 00:47:14,920
your DNS pointing at the marathon well

00:47:14,560 --> 00:47:17,050
boost

00:47:14,920 --> 00:47:18,819
lb stuff that you've already set up and

00:47:17,050 --> 00:47:20,770
then you know open up a different board

00:47:18,819 --> 00:47:22,630
or a different hostname to play around

00:47:20,770 --> 00:47:30,839
with how vamp would then use that

00:47:22,630 --> 00:47:30,839
traffic great any more questions

00:47:42,460 --> 00:47:47,380
we've noticed that you apparently

00:47:44,920 --> 00:47:48,160
integrated console as a back-end for

00:47:47,380 --> 00:47:51,280
vendetta you

00:47:48,160 --> 00:47:53,410
is there any subtleties regarding this

00:47:51,280 --> 00:47:56,650
integration so sorry are there any what

00:47:53,410 --> 00:47:58,839
subtlety is like do I get the same

00:47:56,650 --> 00:48:04,270
features etc you get exactly the same

00:47:58,839 --> 00:48:07,690
features technically Pham uses started

00:48:04,270 --> 00:48:10,329
using only zookeeper but this was in

00:48:07,690 --> 00:48:13,740
well I could bring back my timeline this

00:48:10,329 --> 00:48:17,020
was when kubernetes didn't exist and

00:48:13,740 --> 00:48:19,240
there was mesas and kind of Marathon

00:48:17,020 --> 00:48:22,869
version 0.2 or something like that and

00:48:19,240 --> 00:48:24,640
then DCO is this us didn't exist also so

00:48:22,869 --> 00:48:29,170
it was very logical for us to use

00:48:24,640 --> 00:48:31,839
zookeeper because zookeeper in this case

00:48:29,170 --> 00:48:33,880
is used to update all these HD proxy so

00:48:31,839 --> 00:48:35,740
if you have five then the HD poxy

00:48:33,880 --> 00:48:38,380
convicts pushed into zookeeper -

00:48:35,740 --> 00:48:40,930
zookeeper are vamp gateway agent which

00:48:38,380 --> 00:48:44,020
is a component of vamp reads it and

00:48:40,930 --> 00:48:45,730
updates the HF proxies but then council

00:48:44,020 --> 00:48:50,260
started to appear together with

00:48:45,730 --> 00:48:53,500
kubernetes etc and yeah requesting users

00:48:50,260 --> 00:48:55,510
of kubernetes to also run zookeeper just

00:48:53,500 --> 00:48:58,510
for vamp that was kind of a non-starter

00:48:55,510 --> 00:49:00,130
so we abstracted this stuff out so the

00:48:58,510 --> 00:49:02,680
key value store the distributed

00:49:00,130 --> 00:49:07,000
key-value store that you use we have at

00:49:02,680 --> 00:49:09,640
CD is the standard one if you deploy to

00:49:07,000 --> 00:49:12,180
kubernetes zookeeper is the standard one

00:49:09,640 --> 00:49:14,950
if you deploy to DCOs

00:49:12,180 --> 00:49:18,970
but if you have console then you can use

00:49:14,950 --> 00:49:20,380
consoles at CD installation just added

00:49:18,970 --> 00:49:22,480
the config file and you should be fine

00:49:20,380 --> 00:49:26,770
and the features are exactly the same so

00:49:22,480 --> 00:49:32,430
no difficulties all right thanks Tim

00:49:26,770 --> 00:49:32,430
great ever have a nice Maysles come guys

00:49:32,520 --> 00:49:36,059

YouTube URL: https://www.youtube.com/watch?v=uOPKPzhPqrw


