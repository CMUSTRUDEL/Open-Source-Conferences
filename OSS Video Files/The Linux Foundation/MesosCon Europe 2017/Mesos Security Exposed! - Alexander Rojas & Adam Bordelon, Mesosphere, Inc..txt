Title: Mesos Security Exposed! - Alexander Rojas & Adam Bordelon, Mesosphere, Inc.
Publication date: 2017-10-27
Playlist: MesosCon Europe 2017
Description: 
	Mesos Security Exposed! - Alexander Rojas & Adam Bordelon, Mesosphere, Inc.

Security is one of the major pursuits of Apache Mesos since it reduces the amount of concerns operators have to worry about. As such, every year a lot of work is done to reduce the work of operators when running their clusters. In this year’s talk we will focus on:

* Authentication and authorization of the V1 API
* Executor authentication (JWT, claims)
* Secrets as first class citizens.
* Elliptic Curve cryptography support.
* Enhanced isolation.

Come learn about these topics and share your thoughts on security.

About Adam Bordelon
Adam Bordelon is a distributed systems architect at Mesosphere and an Apache Mesos committer. Before joining Mesosphere, Adam lead development on Hadoop core at MapR, built distributed systems for recommendations at Amazon, and re-architected the LabVIEW compiler at National Instruments. He completed his Master’s degree at Rice University, building a tool to analyze supercomputer performance data for bottlenecks and anomalies.

About Alexander Rojas
Alexander Rojas is a software engineer at Mesosphere Hamburg. He has been contributing to the Apache Mesos project over the last year. Before joining Mesosphere, Alexander worked on distributed rendering systems at 3DExcite. He studied Computer Systems at the National University of Colombia and later did some studies in Computational Logic at the Technical University of Dresden.
Captions: 
	00:00:00,000 --> 00:00:06,870
hello all right thank you for coming

00:00:04,440 --> 00:00:10,800
welcome to our talk about Apache Mesa

00:00:06,870 --> 00:00:12,360
security we'll go into the security of a

00:00:10,800 --> 00:00:14,099
teammate the security features

00:00:12,360 --> 00:00:16,080
introduced in Apache maysa itself as

00:00:14,099 --> 00:00:17,190
well as some recommendations for the

00:00:16,080 --> 00:00:20,970
surrounding ecosystem

00:00:17,190 --> 00:00:23,550
I am Adam Bordelon distributed systems

00:00:20,970 --> 00:00:26,250
architect at Mesa sphere Apache mesas

00:00:23,550 --> 00:00:27,930
committer and a DC West committer has

00:00:26,250 --> 00:00:31,260
been specializing in security and

00:00:27,930 --> 00:00:35,100
storage in the area for almost four

00:00:31,260 --> 00:00:37,610
years now and we've also got Alexander

00:00:35,100 --> 00:00:42,570
here and another Apache mesas committer

00:00:37,610 --> 00:00:46,050
from Mesa spear and yeah we'll get right

00:00:42,570 --> 00:00:49,070
into it so today I'll start off with

00:00:46,050 --> 00:00:53,070
some of the Mesa security basics

00:00:49,070 --> 00:00:55,590
we've given I guess this is my third or

00:00:53,070 --> 00:00:57,719
fourth talk on on the topic and various

00:00:55,590 --> 00:00:59,699
mesas cons so some of you may have seen

00:00:57,719 --> 00:01:02,160
the previous talks we gave one at a

00:00:59,699 --> 00:01:04,769
siscon North America last year that this

00:01:02,160 --> 00:01:06,360
is kind of an extension of Alexander

00:01:04,769 --> 00:01:09,420
we'll go into some of the new and

00:01:06,360 --> 00:01:13,350
exciting security features since last

00:01:09,420 --> 00:01:16,890
year's maysa 1.0 and then I'll wrap it

00:01:13,350 --> 00:01:18,689
up with some discussion of multi-tenancy

00:01:16,890 --> 00:01:25,409
developments that are upcoming and in

00:01:18,689 --> 00:01:26,970
Mesa so brief motivation you guys

00:01:25,409 --> 00:01:29,130
probably care about security which is

00:01:26,970 --> 00:01:29,670
why you're here but who else cares about

00:01:29,130 --> 00:01:31,979
security

00:01:29,670 --> 00:01:37,020
anybody with any sensitive data anybody

00:01:31,979 --> 00:01:38,549
that has untrusted users you know as an

00:01:37,020 --> 00:01:40,079
operator you can't always trust that

00:01:38,549 --> 00:01:42,360
your users are going to do what you want

00:01:40,079 --> 00:01:43,799
them to do with your system and you

00:01:42,360 --> 00:01:45,090
can't always trust that your users are

00:01:43,799 --> 00:01:48,570
not going to mess with your other users

00:01:45,090 --> 00:01:50,579
so if you've got you know personally

00:01:48,570 --> 00:01:52,920
identifiable information you've got

00:01:50,579 --> 00:01:55,640
legal requirements you've got operations

00:01:52,920 --> 00:01:59,040
that should only be for administrators

00:01:55,640 --> 00:02:00,329
you may even have multiple clients that

00:01:59,040 --> 00:02:02,909
shouldn't even know that each other

00:02:00,329 --> 00:02:04,079
exists on the same cluster but from an

00:02:02,909 --> 00:02:08,869
operator's perspective you want to

00:02:04,079 --> 00:02:11,940
co-locate them to to get the

00:02:08,869 --> 00:02:13,440
improvements of running all those

00:02:11,940 --> 00:02:17,940
workloads on the same

00:02:13,440 --> 00:02:22,020
physical hardware so getting into some

00:02:17,940 --> 00:02:25,260
of the security basics we summarized

00:02:22,020 --> 00:02:27,210
last year's talk with some of these with

00:02:25,260 --> 00:02:28,140
the basic idea that you need to firewall

00:02:27,210 --> 00:02:29,910
off the perimeter

00:02:28,140 --> 00:02:32,460
you need to encrypt everything you can

00:02:29,910 --> 00:02:35,460
add all ten ocation to all your all the

00:02:32,460 --> 00:02:38,510
maysa api's as well as any others you

00:02:35,460 --> 00:02:41,910
need to authorize any action that can

00:02:38,510 --> 00:02:45,360
perform any modification to the system

00:02:41,910 --> 00:02:48,090
or retrieve sensitive information you

00:02:45,360 --> 00:02:50,100
need to secure your own applications

00:02:48,090 --> 00:02:51,450
running on top of mesas which we

00:02:50,100 --> 00:02:53,520
described as very much

00:02:51,450 --> 00:02:56,160
do-it-yourself last year but we've got a

00:02:53,520 --> 00:02:58,110
little more help for you this year and

00:02:56,160 --> 00:03:00,210
then of course you want to isolate all

00:02:58,110 --> 00:03:01,980
the containers so that even if those

00:03:00,210 --> 00:03:03,780
workloads are co-located next to each

00:03:01,980 --> 00:03:06,210
other they don't impact each other's

00:03:03,780 --> 00:03:09,720
performance in addition to not being

00:03:06,210 --> 00:03:12,450
able to actually see each other and I'll

00:03:09,720 --> 00:03:13,980
also mention some of the custom modules

00:03:12,450 --> 00:03:18,200
and hooks you can use to extend Apache

00:03:13,980 --> 00:03:20,750
mesas to provide your own custom

00:03:18,200 --> 00:03:25,350
implementations of these security

00:03:20,750 --> 00:03:27,180
interfaces so if you're going to fall

00:03:25,350 --> 00:03:30,030
firewall off the perimeter

00:03:27,180 --> 00:03:31,980
you have to poke some holes through for

00:03:30,030 --> 00:03:34,800
some of the services that you care about

00:03:31,980 --> 00:03:37,410
you know meso smash Terr to be able to

00:03:34,800 --> 00:03:41,250
view the whole state and the UI basis

00:03:37,410 --> 00:03:43,410
agents to get at sandbox logs zookeeper

00:03:41,250 --> 00:03:46,500
to you know figure out which leader

00:03:43,410 --> 00:03:48,720
which may sauce master is the leader and

00:03:46,500 --> 00:03:51,060
then you may need other system services

00:03:48,720 --> 00:03:52,620
that your operator needs access to when

00:03:51,060 --> 00:03:54,870
you don't want to necessarily want them

00:03:52,620 --> 00:03:56,840
SSH into the cluster every time and

00:03:54,870 --> 00:03:59,840
those could run on a variety of ports

00:03:56,840 --> 00:04:02,700
your users may also need to access the

00:03:59,840 --> 00:04:05,519
framework schedulers UIs and api's

00:04:02,700 --> 00:04:07,590
themselves as well as any api's and at

00:04:05,519 --> 00:04:10,920
UI is exposed by the executives and the

00:04:07,590 --> 00:04:12,360
tasks running on the agents and those

00:04:10,920 --> 00:04:15,810
could run on a variety of different

00:04:12,360 --> 00:04:18,780
ports and so you find that you may end

00:04:15,810 --> 00:04:20,580
up poking holes poking dozens or

00:04:18,780 --> 00:04:22,680
hundreds of holes in your firewall and

00:04:20,580 --> 00:04:24,940
then that's not actually as secure as

00:04:22,680 --> 00:04:27,640
you would hope

00:04:24,940 --> 00:04:29,230
you know especially if these services

00:04:27,640 --> 00:04:31,260
underneath they're not properly

00:04:29,230 --> 00:04:35,890
authenticated and encrypted themselves

00:04:31,260 --> 00:04:38,950
we've run into open source clusters that

00:04:35,890 --> 00:04:42,160
have marathon exposed publicly on port

00:04:38,950 --> 00:04:44,890
8080 and there are Metasploit scripts

00:04:42,160 --> 00:04:47,560
that will you know jump in and you know

00:04:44,890 --> 00:04:50,380
start Bitcoin mining tasks on those

00:04:47,560 --> 00:04:53,020
nodes instantly so you need to make sure

00:04:50,380 --> 00:04:55,540
you've firewalls off any access and

00:04:53,020 --> 00:04:58,030
you're actually authenticating access to

00:04:55,540 --> 00:05:02,170
it or else scanners are just gonna find

00:04:58,030 --> 00:05:04,900
it hmm start mining on you so one thing

00:05:02,170 --> 00:05:08,170
that we've done in the meso sphere DCOs

00:05:04,900 --> 00:05:11,770
product is built an api gateway which is

00:05:08,170 --> 00:05:13,780
we call it admin router for historical

00:05:11,770 --> 00:05:15,100
reasons but it's a it's basically just

00:05:13,780 --> 00:05:17,530
an engine X proxy with some

00:05:15,100 --> 00:05:19,630
configuration on top and what this

00:05:17,530 --> 00:05:21,970
allows you to do is only expose a

00:05:19,630 --> 00:05:25,480
minimal number of ports outside of the

00:05:21,970 --> 00:05:27,460
firewall so you have 22 so that you can

00:05:25,480 --> 00:05:31,060
still SSH in if you really need to and

00:05:27,460 --> 00:05:32,610
then port 80 and 443 are the main ports

00:05:31,060 --> 00:05:36,520
through which you get into admin router

00:05:32,610 --> 00:05:38,560
and then it has routes that that can

00:05:36,520 --> 00:05:41,080
provide access to zookeeper meso

00:05:38,560 --> 00:05:43,620
semester's other system services as well

00:05:41,080 --> 00:05:47,380
as frameworks running on top of nato's

00:05:43,620 --> 00:05:50,770
and because you've got this API gateway

00:05:47,380 --> 00:05:53,260
here that's you know know somewhat

00:05:50,770 --> 00:05:55,990
smarter than a vanilla firewall you can

00:05:53,260 --> 00:05:58,180
actually do SSL termination at the at

00:05:55,990 --> 00:06:01,419
the gateway you can do authentication

00:05:58,180 --> 00:06:02,610
requiring that nobody can get through to

00:06:01,419 --> 00:06:05,680
any of these routes unless they've

00:06:02,610 --> 00:06:07,540
authenticated with your system as well

00:06:05,680 --> 00:06:09,400
as some coarse-grained authorization so

00:06:07,540 --> 00:06:11,230
that you can say that only you know

00:06:09,400 --> 00:06:13,900
operators or people with operator

00:06:11,230 --> 00:06:16,960
privileges can actually access zookeeper

00:06:13,900 --> 00:06:18,550
or can access your certificate authority

00:06:16,960 --> 00:06:24,850
or your secret store or something like

00:06:18,550 --> 00:06:27,490
that we've also found it valuable to you

00:06:24,850 --> 00:06:29,020
know create this notion of what we call

00:06:27,490 --> 00:06:31,630
public agents in DCOs

00:06:29,020 --> 00:06:36,010
so a certain number of agents that have

00:06:31,630 --> 00:06:37,030
their own exposed IPs and then you can

00:06:36,010 --> 00:06:39,040
run

00:06:37,030 --> 00:06:42,300
balancers like marathon lb or the new

00:06:39,040 --> 00:06:46,030
edge lb on top of that which will then

00:06:42,300 --> 00:06:48,820
so you those are exposed to the the

00:06:46,030 --> 00:06:50,710
public Internet and the request to those

00:06:48,820 --> 00:06:53,440
are then load balanced across different

00:06:50,710 --> 00:06:54,910
service instances so if you've got a web

00:06:53,440 --> 00:06:58,570
server running on a hundred different

00:06:54,910 --> 00:06:59,680
agents privately inside the cluster but

00:06:58,570 --> 00:07:03,610
then you want to serve that up to the

00:06:59,680 --> 00:07:06,820
outside world you can use the marathon

00:07:03,610 --> 00:07:08,560
lb or edge lb to load balance between

00:07:06,820 --> 00:07:11,620
those but you still of course need to

00:07:08,560 --> 00:07:12,310
you can do SSL termination at the LB but

00:07:11,620 --> 00:07:15,010
you're still going to need

00:07:12,310 --> 00:07:16,870
authentication or else anybody can

00:07:15,010 --> 00:07:18,250
access that website which is maybe what

00:07:16,870 --> 00:07:21,460
you want if you're hosting a public

00:07:18,250 --> 00:07:24,640
website so you don't necessarily want to

00:07:21,460 --> 00:07:29,440
require that all users must authenticate

00:07:24,640 --> 00:07:31,210
in the DCOs or may so sway just to get

00:07:29,440 --> 00:07:36,310
access to your web servers or other

00:07:31,210 --> 00:07:38,820
applications we you want to encrypt

00:07:36,310 --> 00:07:42,400
everything in May so s-- you have to

00:07:38,820 --> 00:07:45,070
enable live event and SSL at configure

00:07:42,400 --> 00:07:50,830
time at Build time in order to actually

00:07:45,070 --> 00:07:53,890
get SSL and TLS built into May sews the

00:07:50,830 --> 00:07:57,760
package is distributed by meso sphere

00:07:53,890 --> 00:07:59,620
has that built in since 1.0 but if

00:07:57,760 --> 00:08:01,900
you're building it yourself you know

00:07:59,620 --> 00:08:03,460
take note of these flags you're going to

00:08:01,900 --> 00:08:07,690
need to set environment variables to

00:08:03,460 --> 00:08:10,540
enable SSL by default we do not support

00:08:07,690 --> 00:08:13,840
downgrade but if you're doing if you're

00:08:10,540 --> 00:08:16,000
upgrading from a unencrypted cluster to

00:08:13,840 --> 00:08:19,600
an encrypted cluster you'll probably

00:08:16,000 --> 00:08:21,310
stage it where you allow SSL but don't

00:08:19,600 --> 00:08:23,770
require it and that's what support

00:08:21,310 --> 00:08:25,570
downgrade does and then once you've got

00:08:23,770 --> 00:08:27,430
all the Masters and the agents and

00:08:25,570 --> 00:08:30,670
schedulers and executor is switched over

00:08:27,430 --> 00:08:34,570
to allow SSL you can start requiring it

00:08:30,670 --> 00:08:36,460
across the board you'll also need to

00:08:34,570 --> 00:08:39,460
specify a key file and certificate file

00:08:36,460 --> 00:08:42,130
this is how you actually do the

00:08:39,460 --> 00:08:43,690
encryption you can verify peer

00:08:42,130 --> 00:08:47,340
certificates when they're present and

00:08:43,690 --> 00:08:49,510
require that they're always present and

00:08:47,340 --> 00:08:52,090
what was underneath that Oh

00:08:49,510 --> 00:08:55,630
depth and then you need the CA

00:08:52,090 --> 00:08:58,060
certificate in a directory or a file in

00:08:55,630 --> 00:08:59,610
order to actually validate that these

00:08:58,060 --> 00:09:02,380
are properly signed certs

00:08:59,610 --> 00:09:04,090
you can specify whatever ciphers you

00:09:02,380 --> 00:09:07,230
care about if you happen to be some sort

00:09:04,090 --> 00:09:09,850
of government entity or other

00:09:07,230 --> 00:09:12,430
organization that happens to know that

00:09:09,850 --> 00:09:14,950
some of these ciphers are not secure

00:09:12,430 --> 00:09:22,060
anymore I don't know that personally

00:09:14,950 --> 00:09:26,440
maybe you do we disable SSL v3 and TLS v

00:09:22,060 --> 00:09:29,200
1.0 and 1.1 by default so it's 1.2 which

00:09:26,440 --> 00:09:30,820
is the more recent one if you need to

00:09:29,200 --> 00:09:32,380
support any of these for backwards

00:09:30,820 --> 00:09:36,820
compatibility reasons you can enable

00:09:32,380 --> 00:09:39,430
that has described here and we've

00:09:36,820 --> 00:09:41,470
recently added support for ECD H curves

00:09:39,430 --> 00:09:47,230
which Alexander will go into in a little

00:09:41,470 --> 00:09:50,230
while authenticated agents and v-0

00:09:47,230 --> 00:09:52,720
schedulers so those are you don't know

00:09:50,230 --> 00:09:58,030
meso started out with what we call the

00:09:52,720 --> 00:10:03,190
v-0 API and we've with the 1.0 release

00:09:58,030 --> 00:10:07,840
we added a stable v1 HTTP API or more

00:10:03,190 --> 00:10:11,290
HTTP like than the previous one going

00:10:07,840 --> 00:10:16,330
with the v-0 API you need to configure

00:10:11,290 --> 00:10:18,160
with SAS whole built-in and you

00:10:16,330 --> 00:10:20,620
configure the Masters with an

00:10:18,160 --> 00:10:22,870
Authenticator default is kram md5 but as

00:10:20,620 --> 00:10:24,700
I mentioned they're modules so you can

00:10:22,870 --> 00:10:27,060
extend this to have your own custom

00:10:24,700 --> 00:10:30,040
Authenticator and authenticate D modules

00:10:27,060 --> 00:10:33,840
with the cram md5 Authenticator it's

00:10:30,040 --> 00:10:36,670
just a raw JSON file of credentials and

00:10:33,840 --> 00:10:38,950
you have flags to require framework and

00:10:36,670 --> 00:10:40,360
agent authentication on the agent you

00:10:38,950 --> 00:10:42,940
have to have the authentic Katie and its

00:10:40,360 --> 00:10:45,750
own credential and the v-0 schedulers

00:10:42,940 --> 00:10:47,680
have to specify a credential when

00:10:45,750 --> 00:10:50,620
initializing the scheduler driver as

00:10:47,680 --> 00:10:52,960
well as setting that same principle on

00:10:50,620 --> 00:10:56,260
the framework info which is used for

00:10:52,960 --> 00:10:58,060
authorization if you don't match those

00:10:56,260 --> 00:11:00,640
you'll get an error when trying to

00:10:58,060 --> 00:11:02,890
register a credential in this case is

00:11:00,640 --> 00:11:05,470
just a string that it

00:11:02,890 --> 00:11:07,780
it's the principle or the ID that you're

00:11:05,470 --> 00:11:10,290
authenticating as and an optional secret

00:11:07,780 --> 00:11:12,490
some authentication mechanisms do the

00:11:10,290 --> 00:11:14,670
secret management out-of-band

00:11:12,490 --> 00:11:17,890
so you just need the the principal and

00:11:14,670 --> 00:11:20,800
Kerberos for example might you know use

00:11:17,890 --> 00:11:24,040
your key tabs and tokens that are on

00:11:20,800 --> 00:11:30,870
disk instead of passing those around in

00:11:24,040 --> 00:11:34,930
these these messages HTTP authentication

00:11:30,870 --> 00:11:39,400
you know as of 1.0 we we had a lot of

00:11:34,930 --> 00:11:42,340
these endpoints already authenticated we

00:11:39,400 --> 00:11:44,890
recently added authentication to the v1

00:11:42,340 --> 00:11:47,710
executor API which Alexander will go

00:11:44,890 --> 00:11:51,010
into in a bit but all the rest of these

00:11:47,710 --> 00:11:53,800
endpoints are authenticated so you are

00:11:51,010 --> 00:11:55,630
required to by default we do HTTP basic

00:11:53,800 --> 00:11:59,470
auth but again you can extend that with

00:11:55,630 --> 00:12:00,880
modules and there are a couple of

00:11:59,470 --> 00:12:04,240
endpoints that are not authenticated

00:12:00,880 --> 00:12:05,920
things like redirect or health which

00:12:04,240 --> 00:12:07,870
don't expose any sensitive information

00:12:05,920 --> 00:12:09,700
and don't allow you to actually perform

00:12:07,870 --> 00:12:12,940
modifications to the state of the system

00:12:09,700 --> 00:12:16,090
so we felt that was okay and sometimes

00:12:12,940 --> 00:12:18,760
necessary to know that a node is up

00:12:16,090 --> 00:12:21,600
before you you know actually bother to

00:12:18,760 --> 00:12:21,600
authenticate to it

00:12:23,640 --> 00:12:28,120
authorizing these endpoints comes

00:12:26,740 --> 00:12:29,800
through a variety of actions because

00:12:28,120 --> 00:12:33,910
it's not just these endpoints you know

00:12:29,800 --> 00:12:35,830
in v1 in the v1 API it's a single v1

00:12:33,910 --> 00:12:38,410
operator in point and then a lot of

00:12:35,830 --> 00:12:40,470
different actions you can form in the

00:12:38,410 --> 00:12:44,470
message that you send to that endpoint

00:12:40,470 --> 00:12:48,280
we have deprecated a lot of these with

00:12:44,470 --> 00:12:51,160
role with principal action names in

00:12:48,280 --> 00:12:53,920
favor of a more generic create volume or

00:12:51,160 --> 00:12:57,490
destroy volume get quota where there's

00:12:53,920 --> 00:12:59,070
an authorization object that has various

00:12:57,490 --> 00:13:03,180
metadata that you might authorize on

00:12:59,070 --> 00:13:07,180
just because the initial authorization

00:13:03,180 --> 00:13:11,140
module authenticated authorized creating

00:13:07,180 --> 00:13:12,940
volumes based on the role that of the

00:13:11,140 --> 00:13:15,940
volume or destroying a volume based on

00:13:12,940 --> 00:13:16,630
the principle that created it doesn't

00:13:15,940 --> 00:13:18,550
mean that everyone

00:13:16,630 --> 00:13:20,920
he wants to authorize based on that

00:13:18,550 --> 00:13:22,930
metadata so we try to provide as much

00:13:20,920 --> 00:13:26,050
metadata as possible like task infos

00:13:22,930 --> 00:13:28,570
full resource fields and that way you

00:13:26,050 --> 00:13:31,840
can choose to authorize based on role

00:13:28,570 --> 00:13:34,210
principle user that the task is running

00:13:31,840 --> 00:13:36,460
on or you know may be arbitrary labels

00:13:34,210 --> 00:13:39,570
that you've tagged on to your tasks and

00:13:36,460 --> 00:13:43,810
volumes we added a lot more

00:13:39,570 --> 00:13:47,800
authorization actions since last year in

00:13:43,810 --> 00:13:50,050
addition to taking the v-0 api's actions

00:13:47,800 --> 00:13:53,680
and extending those throughout the rest

00:13:50,050 --> 00:13:56,440
of the v1 operator API we also added new

00:13:53,680 --> 00:13:58,890
features for things like attaching

00:13:56,440 --> 00:14:02,800
container input and output for debugging

00:13:58,890 --> 00:14:04,990
we had maintenance primitives before but

00:14:02,800 --> 00:14:07,750
they weren't authorized yet now they are

00:14:04,990 --> 00:14:11,230
we also have nested containers for pod

00:14:07,750 --> 00:14:14,560
like support some agent gone semantics

00:14:11,230 --> 00:14:16,660
we now also authorize registering agents

00:14:14,560 --> 00:14:19,480
so instead of just authenticating the

00:14:16,660 --> 00:14:21,640
agent we actually can allow you to

00:14:19,480 --> 00:14:23,230
specify which principles are allowed to

00:14:21,640 --> 00:14:25,630
register as agents so you don't end up

00:14:23,230 --> 00:14:27,520
with somebody who just happens to have a

00:14:25,630 --> 00:14:30,250
scheduler credential being able to use

00:14:27,520 --> 00:14:37,330
that to spin up a new meso agent and

00:14:30,250 --> 00:14:39,340
claim tasks and resources yeah so you

00:14:37,330 --> 00:14:42,220
can get the whole list of of

00:14:39,340 --> 00:14:45,420
authorization actions in the authorizer

00:14:42,220 --> 00:14:49,120
dot proto they're all listed there and

00:14:45,420 --> 00:14:51,940
if you find anything that you think

00:14:49,120 --> 00:14:53,830
needs authorization file a JIRA will you

00:14:51,940 --> 00:14:56,290
know look into it and make sure that we

00:14:53,830 --> 00:15:02,020
can clean that up and prevent any

00:14:56,290 --> 00:15:03,460
unauthorized actions so last year we

00:15:02,020 --> 00:15:06,190
talked about how application security

00:15:03,460 --> 00:15:08,020
was pretty much do it yourself now that

00:15:06,190 --> 00:15:10,300
we've got secrets first-class tin Mesa

00:15:08,020 --> 00:15:12,520
which Alexander will talk about in a

00:15:10,300 --> 00:15:14,620
minute you can actually distribute a lot

00:15:12,520 --> 00:15:18,160
of these credentials and certificates

00:15:14,620 --> 00:15:20,710
and keys in secrets so that when your

00:15:18,160 --> 00:15:22,720
task runs it already has its credential

00:15:20,710 --> 00:15:24,010
that it can use to authenticate with the

00:15:22,720 --> 00:15:26,230
meso smashed ur4 framework

00:15:24,010 --> 00:15:29,200
authentication already has certificates

00:15:26,230 --> 00:15:32,340
that can use to communicate over an

00:15:29,200 --> 00:15:37,000
crypted channel with Mesa master or

00:15:32,340 --> 00:15:39,250
other components in the system and you

00:15:37,000 --> 00:15:41,040
know if you're storing state and

00:15:39,250 --> 00:15:44,530
zookeeper and you want to protect that

00:15:41,040 --> 00:15:50,620
state from unauthorized access from

00:15:44,530 --> 00:15:54,640
other tasks and bad actors you can use Z

00:15:50,620 --> 00:15:57,040
node Z which base is basically just a

00:15:54,640 --> 00:15:58,600
symmetric key and so you want to be able

00:15:57,040 --> 00:16:00,820
to pass that symmetric key around so

00:15:58,600 --> 00:16:02,650
that even if your task dies and ends up

00:16:00,820 --> 00:16:04,900
somewhere else it still has access to

00:16:02,650 --> 00:16:06,970
its Z node for example for leader

00:16:04,900 --> 00:16:10,680
election for your framework scheduler or

00:16:06,970 --> 00:16:12,970
any other state you're trying to store

00:16:10,680 --> 00:16:17,920
similarly you can use secrets for some

00:16:12,970 --> 00:16:20,320
of the other encryption features that

00:16:17,920 --> 00:16:21,700
you need to enable and you know you're

00:16:20,320 --> 00:16:24,070
gonna have to do network segmentation

00:16:21,700 --> 00:16:27,040
yourself we're not building all of that

00:16:24,070 --> 00:16:31,960
in automagically for you by default on

00:16:27,040 --> 00:16:33,580
disk encryption do it yourself you maysa

00:16:31,960 --> 00:16:35,770
does allow you to specify which linux

00:16:33,580 --> 00:16:37,600
user you're running your tasks as and

00:16:35,770 --> 00:16:41,080
you can use that too

00:16:37,600 --> 00:16:44,530
as well as providing filesystem images

00:16:41,080 --> 00:16:47,470
in your containers to prevent other

00:16:44,530 --> 00:16:49,210
tasks from hopping around and accessing

00:16:47,470 --> 00:16:51,720
your sandbox but you need to make sure

00:16:49,210 --> 00:16:54,550
you have a unique Linux user per

00:16:51,720 --> 00:16:56,140
application because if everything is

00:16:54,550 --> 00:16:58,420
running is the nobody user and

00:16:56,140 --> 00:17:01,630
everything is readable by the nobody

00:16:58,420 --> 00:17:05,400
user then every task can read every

00:17:01,630 --> 00:17:09,490
other tasks sandbox so be aware of that

00:17:05,400 --> 00:17:13,300
and then if your tasks themselves expose

00:17:09,490 --> 00:17:15,250
UIs and api's you're gonna have to you

00:17:13,300 --> 00:17:20,170
know encrypt and authenticate and

00:17:15,250 --> 00:17:21,310
authorize any access there yourself you

00:17:20,170 --> 00:17:23,680
know if you have ideas for how many

00:17:21,310 --> 00:17:27,520
cells can make this easier for you we

00:17:23,680 --> 00:17:29,980
welcome them but for now we've focused

00:17:27,520 --> 00:17:32,680
on securing the mesas platform itself

00:17:29,980 --> 00:17:34,150
and you know providing any primitives we

00:17:32,680 --> 00:17:38,200
can come up with that make this easier

00:17:34,150 --> 00:17:40,360
for you container isolation is

00:17:38,200 --> 00:17:42,820
incredibly important for

00:17:40,360 --> 00:17:44,260
you know keeping tasks inside their

00:17:42,820 --> 00:17:47,140
containers and keeping them from

00:17:44,260 --> 00:17:49,059
accessing other containers as well as

00:17:47,140 --> 00:17:52,450
restricting the resources that they're

00:17:49,059 --> 00:17:55,030
using so we had several Isolators before

00:17:52,450 --> 00:17:57,370
we've added quite a few more in the past

00:17:55,030 --> 00:18:00,580
year we've got an isolator for apps II

00:17:57,370 --> 00:18:03,220
got block i/o CPU sets Linux

00:18:00,580 --> 00:18:07,000
capabilities and our limits and the new

00:18:03,220 --> 00:18:12,480
volume secret isolator for file based

00:18:07,000 --> 00:18:15,040
secrets and you know I mentioned

00:18:12,480 --> 00:18:17,919
extending maysa with custom modules and

00:18:15,040 --> 00:18:20,830
hooks I've got here the list of all of

00:18:17,919 --> 00:18:25,720
the module interfaces and hooks that

00:18:20,830 --> 00:18:28,000
maysa currently provides I've marked in

00:18:25,720 --> 00:18:29,679
bold the ones that you might want to use

00:18:28,000 --> 00:18:33,070
if you're building your own custom

00:18:29,679 --> 00:18:35,230
security interface for for your meso

00:18:33,070 --> 00:18:38,230
Splatt form much like we've done with

00:18:35,230 --> 00:18:40,360
meso spheres enterprise-d cos so you can

00:18:38,230 --> 00:18:43,450
have a custom authentication in a

00:18:40,360 --> 00:18:47,559
Couture module pair for the v-0 API

00:18:43,450 --> 00:18:50,890
custom authorizer so that you know you

00:18:47,559 --> 00:18:53,830
don't have to specify and specify ACLs

00:18:50,890 --> 00:18:56,140
on every node if you've got a custom

00:18:53,830 --> 00:18:58,179
authorizer and Authenticator you can

00:18:56,140 --> 00:19:01,809
have a central identity and access

00:18:58,179 --> 00:19:06,360
management store that all of the nodes

00:19:01,809 --> 00:19:10,929
retrieve ACLs from and used to validate

00:19:06,360 --> 00:19:14,410
credentials got a lot of these different

00:19:10,929 --> 00:19:16,570
hooks a lot of them are more relevant

00:19:14,410 --> 00:19:19,059
for the docker container Iser because

00:19:16,570 --> 00:19:22,090
with the mesas container Iser we have

00:19:19,059 --> 00:19:22,720
this isolator module which is kind of a

00:19:22,090 --> 00:19:24,820
misnomer

00:19:22,720 --> 00:19:26,799
because it does it's actually just

00:19:24,820 --> 00:19:29,890
watching the entire container lifecycle

00:19:26,799 --> 00:19:31,840
so you get access to perform

00:19:29,890 --> 00:19:33,460
modifications before you launch the

00:19:31,840 --> 00:19:36,100
container right after the container is

00:19:33,460 --> 00:19:39,400
launched when the container exits you

00:19:36,100 --> 00:19:41,830
can monitor it periodically and so we

00:19:39,400 --> 00:19:45,040
found that the isolator module is by far

00:19:41,830 --> 00:19:47,799
the most used most extensible most

00:19:45,040 --> 00:19:50,200
flexible module for not just security

00:19:47,799 --> 00:19:53,950
but for pretty much anything that you

00:19:50,200 --> 00:20:00,309
want to do injecting before or after

00:19:53,950 --> 00:20:04,600
during container lifecycle then we've

00:20:00,309 --> 00:20:06,700
got the HTTP authenticators which can

00:20:04,600 --> 00:20:12,070
help you override the basic auth scheme

00:20:06,700 --> 00:20:14,740
and I in coming up in May says 1.5 we've

00:20:12,070 --> 00:20:19,450
actually built in an HTTP authenticate

00:20:14,740 --> 00:20:21,970
as well so your v1 schedulers as well as

00:20:19,450 --> 00:20:24,970
anything else that you're building that

00:20:21,970 --> 00:20:28,539
might want to access the may so's HTTP

00:20:24,970 --> 00:20:32,289
API can include that as a part of Lib

00:20:28,539 --> 00:20:35,080
maysa and use it to automate the

00:20:32,289 --> 00:20:39,070
authentication with the master agent

00:20:35,080 --> 00:20:41,500
api's and then we've got the secret

00:20:39,070 --> 00:20:45,039
generator in secret resolver modules

00:20:41,500 --> 00:20:46,899
which are new with the first class

00:20:45,039 --> 00:20:51,100
secret support that we've added in maysa

00:20:46,899 --> 00:20:54,669
recently so that was kind of a breeze

00:20:51,100 --> 00:20:57,130
through all the things that we've done

00:20:54,669 --> 00:21:00,580
in Mesa security in the past with some

00:20:57,130 --> 00:21:02,649
notes on some recent additions and I'll

00:21:00,580 --> 00:21:05,019
hand it off to Alexandre to talk about

00:21:02,649 --> 00:21:11,289
some of the more advanced features that

00:21:05,019 --> 00:21:14,230
we've added recently hey guys so I will

00:21:11,289 --> 00:21:15,639
be focusing on the things the most

00:21:14,230 --> 00:21:18,519
important things we have done over the

00:21:15,639 --> 00:21:21,059
last year so one of the most important

00:21:18,519 --> 00:21:24,490
things is the executor authentication

00:21:21,059 --> 00:21:27,730
one of the issues we were tackling here

00:21:24,490 --> 00:21:29,649
is a very important security issue that

00:21:27,730 --> 00:21:33,610
happens when an executor is launched it

00:21:29,649 --> 00:21:35,669
in inside messes to understand I will

00:21:33,610 --> 00:21:39,429
explain you how it used to be done and

00:21:35,669 --> 00:21:43,330
then I will tell you what we did to to

00:21:39,429 --> 00:21:45,639
fix this problem so originally an agent

00:21:43,330 --> 00:21:48,940
launches an executor usually in a

00:21:45,639 --> 00:21:50,740
container and it injects the framework

00:21:48,940 --> 00:21:53,830
ID and the executor idea of this new

00:21:50,740 --> 00:21:56,610
religion it created a executor in as an

00:21:53,830 --> 00:21:58,929
environment variable then the executor

00:21:56,610 --> 00:22:02,980
launches the container is initialized

00:21:58,929 --> 00:22:07,120
and then uses an API to register to

00:22:02,980 --> 00:22:08,710
agent this API this message will in

00:22:07,120 --> 00:22:12,309
flute again the framework I did that was

00:22:08,710 --> 00:22:15,070
given to him the executor ID and a PID

00:22:12,309 --> 00:22:17,320
which is just like an identifier for

00:22:15,070 --> 00:22:22,780
this executor usually is a combination

00:22:17,320 --> 00:22:28,200
of IP and a port where the executor

00:22:22,780 --> 00:22:32,830
usually is listening like the mesos

00:22:28,200 --> 00:22:34,570
missus API secret API is working well

00:22:32,830 --> 00:22:37,690
not that secret but it's like a private

00:22:34,570 --> 00:22:41,740
way of communicating the problem here is

00:22:37,690 --> 00:22:43,360
that the framework ID is given like if

00:22:41,740 --> 00:22:46,150
you have a long-running framework you

00:22:43,360 --> 00:22:50,280
can very easily get that XFM work ID and

00:22:46,150 --> 00:22:53,800
at the same time the executor ID is

00:22:50,280 --> 00:22:55,720
given by the framework so some executors

00:22:53,800 --> 00:22:58,360
for some frameworks for example just

00:22:55,720 --> 00:23:03,000
have an ever-increasing integer number

00:22:58,360 --> 00:23:03,000
for the executor IDs so you can really

00:23:03,150 --> 00:23:09,160
guess what the next executor ID is going

00:23:05,980 --> 00:23:11,710
to be and if you did that anyone can

00:23:09,160 --> 00:23:13,929
claim to be that executor it provided

00:23:11,710 --> 00:23:17,200
they register before the executors lunch

00:23:13,929 --> 00:23:19,809
by the end so we have a fake executor

00:23:17,200 --> 00:23:20,710
who just gets the he knows the framework

00:23:19,809 --> 00:23:22,150
deals God

00:23:20,710 --> 00:23:25,200
just gets the executor ID and just

00:23:22,150 --> 00:23:29,020
provide a PID whatever it is because

00:23:25,200 --> 00:23:31,330
ledian really doesn't verify that once

00:23:29,020 --> 00:23:32,650
the the fake executor is there the old

00:23:31,330 --> 00:23:34,600
executor will integrate

00:23:32,650 --> 00:23:37,059
intend to register he won't be late

00:23:34,600 --> 00:23:39,280
because the this agent will say hey I

00:23:37,059 --> 00:23:41,440
already know that the executor and this

00:23:39,280 --> 00:23:44,950
and then this fact executor can just get

00:23:41,440 --> 00:23:46,360
all the information that was intended

00:23:44,950 --> 00:23:50,650
for the original executor task

00:23:46,360 --> 00:23:55,120
definition secrets etc so what we did

00:23:50,650 --> 00:23:59,530
was assign a unique sign token when we

00:23:55,120 --> 00:24:01,660
launched the executor that's created

00:23:59,530 --> 00:24:06,580
with a secret that you pass to agent

00:24:01,660 --> 00:24:08,770
that he will use to sign every token so

00:24:06,580 --> 00:24:11,020
when he launched executors he will again

00:24:08,770 --> 00:24:13,960
give the framework ID the security and

00:24:11,020 --> 00:24:15,610
the Sun sank token as environment

00:24:13,960 --> 00:24:17,920
variables in the executor so now it's

00:24:15,610 --> 00:24:20,860
much harder for anyone to claim to be

00:24:17,920 --> 00:24:23,380
the executor that was lunch

00:24:20,860 --> 00:24:25,929
at the same time when he registers he

00:24:23,380 --> 00:24:27,909
will pass the same values plus the PID

00:24:25,929 --> 00:24:30,820
and then the agent can say hey I did

00:24:27,909 --> 00:24:33,429
sign this token with this information so

00:24:30,820 --> 00:24:35,289
we not only verify that the token we

00:24:33,429 --> 00:24:39,370
gave him is the correct one but the

00:24:35,289 --> 00:24:41,980
token has some information inside that

00:24:39,370 --> 00:24:45,130
is signed so the agent can also verify

00:24:41,980 --> 00:24:49,179
that information so how we did that we

00:24:45,130 --> 00:24:51,519
use JW to base tokens because we can put

00:24:49,179 --> 00:24:54,220
anything we want in the payload so what

00:24:51,519 --> 00:24:58,299
we add is the framework ID the executor

00:24:54,220 --> 00:25:02,649
ID and the container ID so these three

00:24:58,299 --> 00:25:06,159
elements as of the moment are put in the

00:25:02,649 --> 00:25:14,500
JWT base token we also sang it with an H

00:25:06,159 --> 00:25:16,210
Mack 256 hash algorithm and we use HTTP

00:25:14,500 --> 00:25:19,210
authentication using various scheme

00:25:16,210 --> 00:25:22,679
which means this new feature is only

00:25:19,210 --> 00:25:25,929
available on new executors who use the

00:25:22,679 --> 00:25:28,600
HTTP v1 API so if you are still using

00:25:25,929 --> 00:25:31,779
v-0 I will highly recommend you to move

00:25:28,600 --> 00:25:34,210
to a new API you can enable it by saying

00:25:31,779 --> 00:25:36,940
when you launch the agent giving it the

00:25:34,210 --> 00:25:39,580
authenticated HTTP executor and you will

00:25:36,940 --> 00:25:41,980
need the secret the executor secret key

00:25:39,580 --> 00:25:45,039
which is a blob of data used to compute

00:25:41,980 --> 00:25:48,340
the token signature it can be a path to

00:25:45,039 --> 00:25:55,149
a file with this blood of data or base64

00:25:48,340 --> 00:25:58,179
encoded 256 bit number so that's 4x

00:25:55,149 --> 00:26:00,580
secure authentication one thing is is

00:25:58,179 --> 00:26:05,440
designed to be used as a module so you

00:26:00,580 --> 00:26:09,399
can overwrite the the mechanism we use

00:26:05,440 --> 00:26:12,700
but some parts of the code still expect

00:26:09,399 --> 00:26:15,669
to be able to read a JSON part that has

00:26:12,700 --> 00:26:18,880
the framework the executor ID and

00:26:15,669 --> 00:26:22,740
container ID so I guess we still have to

00:26:18,880 --> 00:26:26,049
fine-tune this descent occation so is

00:26:22,740 --> 00:26:30,370
over rideable completely by you guys

00:26:26,049 --> 00:26:32,380
model writers the other thing we really

00:26:30,370 --> 00:26:34,000
really work on or this last year was

00:26:32,380 --> 00:26:38,290
having secrets as first class

00:26:34,000 --> 00:26:40,510
citizens so the first thing that may pop

00:26:38,290 --> 00:26:44,410
in your head is what is the secret and

00:26:40,510 --> 00:26:46,660
if you didn't attend the talk of like an

00:26:44,410 --> 00:26:49,630
hour ago or two hours ago then I will

00:26:46,660 --> 00:26:52,660
try to summarize and I won't give you

00:26:49,630 --> 00:26:55,090
the fancy demo that was given before so

00:26:52,660 --> 00:26:56,500
a secret is anything any sensitive

00:26:55,090 --> 00:26:58,210
information so you can have your

00:26:56,500 --> 00:27:03,640
passwords your secure shell key

00:26:58,210 --> 00:27:05,050
certificates API keys so and and the

00:27:03,640 --> 00:27:06,880
important thing about the secrets is

00:27:05,050 --> 00:27:11,170
that they only they should only be

00:27:06,880 --> 00:27:12,820
accessed by authorized users so you for

00:27:11,170 --> 00:27:16,120
example Don one in your task definition

00:27:12,820 --> 00:27:18,190
to have your your passwords in clean

00:27:16,120 --> 00:27:21,100
text because then anybody can read them

00:27:18,190 --> 00:27:22,530
and probably connect to your database

00:27:21,100 --> 00:27:27,460
and play with it

00:27:22,530 --> 00:27:31,450
so for Messrs the the center structure

00:27:27,460 --> 00:27:33,370
that mal that manage the secrets is this

00:27:31,450 --> 00:27:36,490
message secret because it's a proto buff

00:27:33,370 --> 00:27:38,890
and from them we can deduct a secret can

00:27:36,490 --> 00:27:41,800
be one of two things it can be a

00:27:38,890 --> 00:27:44,200
reference or can be a value reference

00:27:41,800 --> 00:27:46,990
secrets are just a way to describe how

00:27:44,200 --> 00:27:49,590
to get the secret so they have a name

00:27:46,990 --> 00:27:52,180
and they have the must have a name and

00:27:49,590 --> 00:27:55,690
optionally because some secret stores

00:27:52,180 --> 00:27:58,150
each secret is just like a hash map of

00:27:55,690 --> 00:28:01,930
key value elements so optionally you can

00:27:58,150 --> 00:28:06,910
just get the key in that is store under

00:28:01,930 --> 00:28:10,450
that secret it can also be a value which

00:28:06,910 --> 00:28:14,640
is just the cont'd a on the unencrypted

00:28:10,450 --> 00:28:19,840
contents of the equivalent reference

00:28:14,640 --> 00:28:22,080
secret that's what a secret is now how

00:28:19,840 --> 00:28:25,510
we fetch the secret is based on this

00:28:22,080 --> 00:28:28,990
interface called the secret resolver it

00:28:25,510 --> 00:28:30,250
just has one method the resolve in as

00:28:28,990 --> 00:28:33,580
you can guess

00:28:30,250 --> 00:28:36,790
the parameter is your secret reference

00:28:33,580 --> 00:28:39,040
it as ice' mentioned the name is the

00:28:36,790 --> 00:28:42,010
only one required the key is yours

00:28:39,040 --> 00:28:44,610
optional and it will return a secret

00:28:42,010 --> 00:28:44,610
value

00:28:45,210 --> 00:28:50,220
by default like usually we provide you a

00:28:48,150 --> 00:28:53,640
default that is more or less usable in

00:28:50,220 --> 00:28:56,010
each of the interfaces from messes I

00:28:53,640 --> 00:28:59,820
will never recommend to use the default

00:28:56,010 --> 00:29:01,860
of their secret resolver because he just

00:28:59,820 --> 00:29:04,950
assumes that each secret that comes in

00:29:01,860 --> 00:29:07,470
has the value already set in unencrypted

00:29:04,950 --> 00:29:09,660
so he will just give you back so please

00:29:07,470 --> 00:29:12,420
if you're going to play with it create

00:29:09,660 --> 00:29:15,660
your own module connect to your safe

00:29:12,420 --> 00:29:19,230
secret store right now there are many

00:29:15,660 --> 00:29:21,330
and we didn't want to force a dependency

00:29:19,230 --> 00:29:24,690
in message that's why we didn't provide

00:29:21,330 --> 00:29:27,720
a safe way of dealing with secrets also

00:29:24,690 --> 00:29:32,250
because we are not secret stores expert

00:29:27,720 --> 00:29:35,670
so this is up to you guys so how does

00:29:32,250 --> 00:29:39,090
this work in imagine you have these two

00:29:35,670 --> 00:29:41,490
secrets one is a certificate so it's

00:29:39,090 --> 00:29:45,000
under the name certificate web api

00:29:41,490 --> 00:29:48,210
the key is web service word web server

00:29:45,000 --> 00:29:50,550
cert and this won't help you because

00:29:48,210 --> 00:29:53,220
this certificate is I just created so

00:29:50,550 --> 00:29:57,450
don't expect to break into mesosphere

00:29:53,220 --> 00:30:00,000
plus this 128 bits Keys very useless and

00:29:57,450 --> 00:30:03,660
then you have the other secret which is

00:30:00,000 --> 00:30:06,270
a database credentials UI which just has

00:30:03,660 --> 00:30:08,370
like a key a name and a password so you

00:30:06,270 --> 00:30:11,850
can connect to your database so we have

00:30:08,370 --> 00:30:14,010
a fancy web api that we want to be able

00:30:11,850 --> 00:30:19,310
to launch in a container with some

00:30:14,010 --> 00:30:22,350
secrets so sometimes you want your

00:30:19,310 --> 00:30:24,240
secrets to be available as environment

00:30:22,350 --> 00:30:26,550
variables particularly like in the case

00:30:24,240 --> 00:30:29,930
of the password and the database

00:30:26,550 --> 00:30:32,610
username you probably want that to be in

00:30:29,930 --> 00:30:34,800
an environment variable so the way to do

00:30:32,610 --> 00:30:38,160
it is when you're doing the test

00:30:34,800 --> 00:30:41,010
definition in the environment section we

00:30:38,160 --> 00:30:43,500
can never hear the vironment section the

00:30:41,010 --> 00:30:46,590
environment needs like a variable

00:30:43,500 --> 00:30:49,710
describe similar to this and I use yml

00:30:46,590 --> 00:30:51,840
so I could remove all brackets so we

00:30:49,710 --> 00:30:55,050
focus on what is important we have a

00:30:51,840 --> 00:30:57,670
name a type which is a type secret and

00:30:55,050 --> 00:30:59,800
the message secret we'll say it's a

00:30:57,670 --> 00:31:02,260
friends with the given name and the

00:30:59,800 --> 00:31:05,890
given key so what happens when you

00:31:02,260 --> 00:31:09,730
launch a task which has this variable so

00:31:05,890 --> 00:31:11,440
you receive the tasks info the agent

00:31:09,730 --> 00:31:14,320
takes and pass it to the environment

00:31:11,440 --> 00:31:16,210
secret isolator which is enabled by

00:31:14,320 --> 00:31:19,600
default so you will never have to set it

00:31:16,210 --> 00:31:21,430
up in the Isolators this will call your

00:31:19,600 --> 00:31:23,740
interface implementation of your

00:31:21,430 --> 00:31:25,900
interface secret resolver which will

00:31:23,740 --> 00:31:28,390
connect to a secret store resolve your

00:31:25,900 --> 00:31:31,330
secret and then your isolator will be

00:31:28,390 --> 00:31:33,040
uncharged to put the value of the secret

00:31:31,330 --> 00:31:34,720
in your environment and then your task

00:31:33,040 --> 00:31:38,140
will be able to connect to your database

00:31:34,720 --> 00:31:40,000
without problems the thing is you don't

00:31:38,140 --> 00:31:42,400
always want your secrets to be

00:31:40,000 --> 00:31:45,430
environment variables sometimes you want

00:31:42,400 --> 00:31:48,880
them to be files that you can read like

00:31:45,430 --> 00:31:50,680
the certificate so in that case the

00:31:48,880 --> 00:31:52,480
procedure is very similar now you

00:31:50,680 --> 00:31:55,050
instead of creating an environment

00:31:52,480 --> 00:31:58,360
variable you will create a volume and

00:31:55,050 --> 00:32:00,700
this volume you will define it also like

00:31:58,360 --> 00:32:03,190
you give your container pilot and the

00:32:00,700 --> 00:32:05,560
source will be a secret now and the

00:32:03,190 --> 00:32:08,970
secret will like in our case will be the

00:32:05,560 --> 00:32:12,940
path certificate I will show you before

00:32:08,970 --> 00:32:14,530
so for this one sorry it's important

00:32:12,940 --> 00:32:16,630
that you enable the volume secret

00:32:14,530 --> 00:32:18,130
isolator that one is not enabled by

00:32:16,630 --> 00:32:22,000
default so when you launch your agent

00:32:18,130 --> 00:32:25,270
you say enable this isolator and how it

00:32:22,000 --> 00:32:27,820
works pretty similar as before the

00:32:25,270 --> 00:32:30,160
volume secret isolator will use the

00:32:27,820 --> 00:32:33,220
secret resolver contact your secret

00:32:30,160 --> 00:32:37,060
store receive the secret and then he

00:32:33,220 --> 00:32:40,770
will mount that in the path that you

00:32:37,060 --> 00:32:44,160
give this a temporary file system volume

00:32:40,770 --> 00:32:48,640
with the certificate that you wrote that

00:32:44,160 --> 00:32:50,800
you want it as a file there important

00:32:48,640 --> 00:32:53,740
thing the file is loaded in a temporary

00:32:50,800 --> 00:32:55,990
file system you can modify it if you

00:32:53,740 --> 00:32:57,700
want but these changes won't be

00:32:55,990 --> 00:33:00,180
transmitted to the secret store so

00:32:57,700 --> 00:33:02,770
secret stories are read-only operation

00:33:00,180 --> 00:33:04,060
but you can do whatever you want with

00:33:02,770 --> 00:33:08,710
this file is just a file in your file

00:33:04,060 --> 00:33:11,020
system we have a third kind of secret we

00:33:08,710 --> 00:33:11,500
support and with this we wanted to solve

00:33:11,020 --> 00:33:14,200
the pro

00:33:11,500 --> 00:33:16,750
of how do we love how do we download

00:33:14,200 --> 00:33:19,540
images from private dock registries in a

00:33:16,750 --> 00:33:22,900
secure way the ways we could use like

00:33:19,540 --> 00:33:24,970
you could palace docker config to the

00:33:22,900 --> 00:33:27,370
agent when you launch it you could also

00:33:24,970 --> 00:33:30,310
put your credentials for your registry

00:33:27,370 --> 00:33:31,870
in your task definition but you really

00:33:30,310 --> 00:33:34,630
don't want to do any of those because

00:33:31,870 --> 00:33:36,490
they are readable so we decided okay

00:33:34,630 --> 00:33:39,240
let's put just the docker configuration

00:33:36,490 --> 00:33:44,590
in our secret sir and letter secret API

00:33:39,240 --> 00:33:47,380
fetch it for us so this of course causes

00:33:44,590 --> 00:33:51,790
some constraints in how the secret has

00:33:47,380 --> 00:33:53,560
to be formatted or which type it has to

00:33:51,790 --> 00:33:55,840
be so it needs to be a docker config

00:33:53,560 --> 00:33:58,480
file I think that's pretty obvious but

00:33:55,840 --> 00:34:01,090
it needs to be formatted as a JSON it

00:33:58,480 --> 00:34:03,460
needs to be in utf-8 that's what we

00:34:01,090 --> 00:34:05,230
expect it to be and of course you need

00:34:03,460 --> 00:34:07,840
to contain the the credentials to a

00:34:05,230 --> 00:34:09,060
registry that I think that's pretty

00:34:07,840 --> 00:34:13,870
obvious

00:34:09,060 --> 00:34:16,629
so this basically works again when

00:34:13,870 --> 00:34:19,929
you're launching your executors you will

00:34:16,629 --> 00:34:22,060
pass like the message image then the

00:34:19,929 --> 00:34:25,240
docker and in the docker the important

00:34:22,060 --> 00:34:27,730
one is this secret optional secret

00:34:25,240 --> 00:34:30,100
config if you give this optional secret

00:34:27,730 --> 00:34:32,770
config he will use the path in the sea

00:34:30,100 --> 00:34:36,700
the reference in the secret to retrieve

00:34:32,770 --> 00:34:38,220
your your image like to contact your

00:34:36,700 --> 00:34:40,659
secret store

00:34:38,220 --> 00:34:43,540
how does it work pretty similar as

00:34:40,659 --> 00:34:45,690
everything before except now you one go

00:34:43,540 --> 00:34:48,730
through an insulator but the provisioner

00:34:45,690 --> 00:34:50,320
so he will get the config file the keys

00:34:48,730 --> 00:34:52,780
and then it will contact your docker

00:34:50,320 --> 00:34:55,030
registry based on the configuration that

00:34:52,780 --> 00:34:56,740
he just download from the secret once

00:34:55,030 --> 00:34:59,530
you contact the docker registry he will

00:34:56,740 --> 00:35:01,510
get the container image and then launch

00:34:59,530 --> 00:35:03,540
your container which i think is pretty

00:35:01,510 --> 00:35:06,430
cool

00:35:03,540 --> 00:35:08,470
constraints we have the secret the

00:35:06,430 --> 00:35:11,680
secret api is only available for the

00:35:08,470 --> 00:35:17,040
message container Iser sorry about that

00:35:11,680 --> 00:35:21,880
if you if your amazes docker follower

00:35:17,040 --> 00:35:24,400
you and the image pool secrets is only

00:35:21,880 --> 00:35:25,200
available for docker images that are

00:35:24,400 --> 00:35:28,230
running with

00:35:25,200 --> 00:35:32,040
Mesa's containerize err so that's pretty

00:35:28,230 --> 00:35:35,099
much for the missus and i will talk

00:35:32,040 --> 00:35:37,829
about the little elliptic curve the key

00:35:35,099 --> 00:35:39,869
photography support the problem with

00:35:37,829 --> 00:35:42,900
this was that was on our site because

00:35:39,869 --> 00:35:47,460
you have to implement an extra api when

00:35:42,900 --> 00:35:49,950
you instantiate all your SSL so we

00:35:47,460 --> 00:35:53,460
corrected this oversight now we enable

00:35:49,950 --> 00:35:56,880
the ACD each H E which is elliptical

00:35:53,460 --> 00:36:01,410
curve diffie-hellman which is just how

00:35:56,880 --> 00:36:02,940
you do key exchanges in TLS the

00:36:01,410 --> 00:36:05,160
important thing of this is that you can

00:36:02,940 --> 00:36:08,310
have equivalent Pradesh protection which

00:36:05,160 --> 00:36:10,770
smaller case so you know the strongest

00:36:08,310 --> 00:36:15,000
security is given by symmetric

00:36:10,770 --> 00:36:17,040
encryption so you have the best security

00:36:15,000 --> 00:36:19,740
with the smaller keys but then the

00:36:17,040 --> 00:36:23,579
problem there is you have to share your

00:36:19,740 --> 00:36:26,220
key then you have the public private key

00:36:23,579 --> 00:36:29,520
support which is the initial part of an

00:36:26,220 --> 00:36:33,630
SS TLS connection so traditionally we

00:36:29,520 --> 00:36:36,150
use RSA with diffie-hellman and I not

00:36:33,630 --> 00:36:38,339
long ago like ten years ago we started

00:36:36,150 --> 00:36:43,470
working with elliptic curve so the cool

00:36:38,339 --> 00:36:48,300
thing is if you see a one kilobyte error

00:36:43,470 --> 00:36:51,569
say D H key is as secure as 160 bits

00:36:48,300 --> 00:36:54,390
elliptic curve key and if you go bigger

00:36:51,569 --> 00:36:57,960
you say like a 15 kilobytes error say

00:36:54,390 --> 00:37:02,099
difficult monkey is as secure as a 521

00:36:57,960 --> 00:37:04,589
bits elliptic curve key this not only

00:37:02,099 --> 00:37:06,720
reduced the size of the messages you're

00:37:04,589 --> 00:37:08,880
passing when you are negotiating a

00:37:06,720 --> 00:37:11,849
connection it also reduces the amount of

00:37:08,880 --> 00:37:14,400
cryptographic operations your CPU will

00:37:11,849 --> 00:37:16,200
be doing so so in that sense elliptic

00:37:14,400 --> 00:37:20,190
curve is really really an interesting

00:37:16,200 --> 00:37:22,050
topic they also use it to solve the firm

00:37:20,190 --> 00:37:25,470
Atlas theorem so elliptic curves are

00:37:22,050 --> 00:37:27,690
very interesting if you're into math so

00:37:25,470 --> 00:37:31,050
I will recommend you guys to think about

00:37:27,690 --> 00:37:34,530
using it in order to use it you need to

00:37:31,050 --> 00:37:36,869
use the lip daily process SSL key file

00:37:34,530 --> 00:37:37,890
and for this you need a special key like

00:37:36,869 --> 00:37:41,720
the

00:37:37,890 --> 00:37:46,410
our psyches that we used with a

00:37:41,720 --> 00:37:48,570
ssh-keygen to not work you need actually

00:37:46,410 --> 00:37:50,310
uses this is HQ yen but you use

00:37:48,570 --> 00:37:54,600
different set of parameters and then you

00:37:50,310 --> 00:37:56,280
get an easy key and then you pass you

00:37:54,600 --> 00:37:58,320
need to change the leap process SSL

00:37:56,280 --> 00:38:02,340
ciphers because the default ones are

00:37:58,320 --> 00:38:04,350
don't have a CD eh II enabled so you

00:38:02,340 --> 00:38:06,440
support all the ciphers that you see

00:38:04,350 --> 00:38:09,390
right behind me

00:38:06,440 --> 00:38:12,210
the important thing very important is

00:38:09,390 --> 00:38:14,520
the key and the cipher must match if you

00:38:12,210 --> 00:38:18,810
want easy keys you need to put at least

00:38:14,520 --> 00:38:20,130
ones of these ciphers otherwise you will

00:38:18,810 --> 00:38:22,560
get a bunch of errors that the

00:38:20,130 --> 00:38:25,080
connection will be initially initiated

00:38:22,560 --> 00:38:29,220
because the handshake won't be done so

00:38:25,080 --> 00:38:31,080
very important and I think that's pretty

00:38:29,220 --> 00:38:33,780
much what we have for you in new

00:38:31,080 --> 00:38:37,320
features we definitely are working hard

00:38:33,780 --> 00:38:41,790
so on making messes as secure as

00:38:37,320 --> 00:38:44,520
possible so I will ask you guys test if

00:38:41,790 --> 00:38:47,640
you find a bug notify us we we really

00:38:44,520 --> 00:38:52,940
take this seriously and and we're trying

00:38:47,640 --> 00:38:52,940
to make messes more secure every day so

00:38:53,810 --> 00:39:00,990
alright and on the topic of making it

00:38:58,110 --> 00:39:05,760
more and more secure talk briefly about

00:39:00,990 --> 00:39:08,280
some multi-tenancy concerns so you know

00:39:05,760 --> 00:39:10,050
if you're a single user using a mesas

00:39:08,280 --> 00:39:13,250
cluster you have no problem seeing

00:39:10,050 --> 00:39:17,910
everything but if you're a you know

00:39:13,250 --> 00:39:20,280
100,000 person organization spread out

00:39:17,910 --> 00:39:22,830
across different departments and teams

00:39:20,280 --> 00:39:26,220
and projects you may have legal

00:39:22,830 --> 00:39:28,580
requirements that you know your home

00:39:26,220 --> 00:39:32,120
mortgage department can't access your

00:39:28,580 --> 00:39:34,350
stock investment department you may have

00:39:32,120 --> 00:39:36,570
you know all sorts of different

00:39:34,350 --> 00:39:37,920
requirements that you know sales

00:39:36,570 --> 00:39:40,170
shouldn't see what engineering is

00:39:37,920 --> 00:39:43,980
working on and you know the upcoming

00:39:40,170 --> 00:39:46,350
releases and so you you often end up

00:39:43,980 --> 00:39:48,450
with kind of a hierarchical organization

00:39:46,350 --> 00:39:50,220
you know maybe split between different

00:39:48,450 --> 00:39:51,780
environments different departments

00:39:50,220 --> 00:39:55,230
different teams different project

00:39:51,780 --> 00:39:57,690
and similarly you're going to want to

00:39:55,230 --> 00:40:02,940
partition your resources and your tasks

00:39:57,690 --> 00:40:04,950
in a corresponding manner so in the past

00:40:02,940 --> 00:40:08,910
year we've introduced hierarchical roles

00:40:04,950 --> 00:40:12,090
Tomaso's you may remember roles as a

00:40:08,910 --> 00:40:14,100
mechanism for partitioning resources in

00:40:12,090 --> 00:40:16,860
a rather flat manner where each

00:40:14,100 --> 00:40:21,120
framework can register as a single role

00:40:16,860 --> 00:40:23,820
and you can reserve resources or set

00:40:21,120 --> 00:40:25,530
quota for a particular role and you know

00:40:23,820 --> 00:40:27,810
that allowed you kind of this flat name

00:40:25,530 --> 00:40:30,990
space where each framework had one role

00:40:27,810 --> 00:40:32,880
you could theoretically have multiple

00:40:30,990 --> 00:40:35,670
frameworks share a role but they have to

00:40:32,880 --> 00:40:38,090
you know work very closely with each

00:40:35,670 --> 00:40:40,590
other to not step on each other's toes

00:40:38,090 --> 00:40:43,290
but now you can have a hierarchical

00:40:40,590 --> 00:40:46,190
roles so that match the same kind of

00:40:43,290 --> 00:40:51,360
hierarchy so that you could have

00:40:46,190 --> 00:40:53,640
framework you know in the dev sales app

00:40:51,360 --> 00:40:57,690
project you could have a framework in

00:40:53,640 --> 00:41:01,080
the test sales app project or you know

00:40:57,690 --> 00:41:03,270
any of these and you can do quota at

00:41:01,080 --> 00:41:06,690
every at every level of this hierarchy

00:41:03,270 --> 00:41:09,570
so you can have top-level administrators

00:41:06,690 --> 00:41:11,310
say ok I want sales to have this many

00:41:09,570 --> 00:41:15,510
resources and engineering to have this

00:41:11,310 --> 00:41:16,620
many resources and then within that they

00:41:15,510 --> 00:41:18,510
don't have to care how its distributed

00:41:16,620 --> 00:41:20,550
then you know the head of engineering

00:41:18,510 --> 00:41:24,180
says ok well I've got the front end team

00:41:20,550 --> 00:41:26,400
the back end team the interns and R&D

00:41:24,180 --> 00:41:28,890
and you know you can split things up

00:41:26,400 --> 00:41:30,630
there and then within the front end team

00:41:28,890 --> 00:41:32,370
maybe you've got different projects and

00:41:30,630 --> 00:41:35,430
you want to split up the resources there

00:41:32,370 --> 00:41:40,140
as well so you can set quota at every

00:41:35,430 --> 00:41:42,990
level here and we do have a validation

00:41:40,140 --> 00:41:45,300
that you know look quota lower in the

00:41:42,990 --> 00:41:47,850
hierarchy does not exceed the quota of

00:41:45,300 --> 00:41:49,320
its parent so you're actually taking a

00:41:47,850 --> 00:41:51,950
hundred percent and distributing it

00:41:49,320 --> 00:41:55,050
across all of the nodes in the hierarchy

00:41:51,950 --> 00:41:58,470
we also have added reservation

00:41:55,050 --> 00:42:00,660
refinement so a top level administrator

00:41:58,470 --> 00:42:02,850
could say you know these resources on

00:42:00,660 --> 00:42:05,040
these particular nodes are reserved for

00:42:02,850 --> 00:42:06,869
the engineering department

00:42:05,040 --> 00:42:08,910
and I don't care what they do with them

00:42:06,869 --> 00:42:11,100
but they're theirs now sales is never

00:42:08,910 --> 00:42:15,240
gonna get offered them they're dedicated

00:42:11,100 --> 00:42:17,220
to engineering and then a an operator or

00:42:15,240 --> 00:42:18,960
even a framework within engineering

00:42:17,220 --> 00:42:22,260
could take that and further refine it

00:42:18,960 --> 00:42:24,750
and say that okay well I now that I know

00:42:22,260 --> 00:42:26,700
that I've got maybe this disc resource

00:42:24,750 --> 00:42:27,900
that's available for engineering I'm

00:42:26,700 --> 00:42:30,240
going to take it music for this

00:42:27,900 --> 00:42:33,359
particular application and once I've

00:42:30,240 --> 00:42:36,540
refined the reservation down to my node

00:42:33,359 --> 00:42:37,290
in the hierarchy if you know my task

00:42:36,540 --> 00:42:38,970
dies

00:42:37,290 --> 00:42:41,310
I know it's those resources going to be

00:42:38,970 --> 00:42:41,910
offered back to me and not just to

00:42:41,310 --> 00:42:44,160
anyway

00:42:41,910 --> 00:42:46,500
buddy and engineering and so this gives

00:42:44,160 --> 00:42:47,850
you flexibility to partition your

00:42:46,500 --> 00:42:49,800
resources between the different

00:42:47,850 --> 00:42:52,440
frameworks and teams and projects

00:42:49,800 --> 00:42:56,670
however you've organized your role

00:42:52,440 --> 00:42:58,500
hierarchy and it's also important to

00:42:56,670 --> 00:43:00,570
note that a single framework can

00:42:58,500 --> 00:43:02,640
actually register for multiple roles and

00:43:00,570 --> 00:43:06,830
multiple roles anywhere in the hierarchy

00:43:02,640 --> 00:43:10,109
so you could imagine a framework that

00:43:06,830 --> 00:43:11,910
for you know maybe it organizes its own

00:43:10,109 --> 00:43:14,119
applications within different folders

00:43:11,910 --> 00:43:18,180
and you could have those folders map to

00:43:14,119 --> 00:43:20,760
hierarchical roles and in that way you

00:43:18,180 --> 00:43:24,720
can manage the hierarchy within your

00:43:20,760 --> 00:43:27,420
application and all the the projects and

00:43:24,720 --> 00:43:30,630
tasks running within it and map that on

00:43:27,420 --> 00:43:34,920
to the role partitioning of your

00:43:30,630 --> 00:43:37,260
resources a second way you can use the

00:43:34,920 --> 00:43:39,510
this name spacing is authorization name

00:43:37,260 --> 00:43:43,020
spacing to control which users can

00:43:39,510 --> 00:43:44,940
access which tasks you know if you have

00:43:43,020 --> 00:43:48,750
Alice that works in sales and Bob and

00:43:44,940 --> 00:43:49,980
engineering it's a pretty common setup

00:43:48,750 --> 00:43:53,280
that you would want to make sure that

00:43:49,980 --> 00:43:56,040
Alice can't you know see Bob's tasks and

00:43:53,280 --> 00:43:59,430
frameworks and Alice can't even modify

00:43:56,040 --> 00:44:03,510
them or you know start tasks on those

00:43:59,430 --> 00:44:06,090
resources so you can do authorization

00:44:03,510 --> 00:44:09,990
name spacing based on these roles as

00:44:06,090 --> 00:44:12,300
well and we're going to you know we

00:44:09,990 --> 00:44:14,160
remove the with role and with principle

00:44:12,300 --> 00:44:16,760
ones a lot of the authorization actions

00:44:14,160 --> 00:44:19,830
so that we can move closer and closer to

00:44:16,760 --> 00:44:21,720
doing authorization names

00:44:19,830 --> 00:44:24,150
and you can similarly do secret

00:44:21,720 --> 00:44:26,130
namespacing based on the same kinds of

00:44:24,150 --> 00:44:28,700
hierarchical roles you know you have a

00:44:26,130 --> 00:44:31,530
task that's running in a particular

00:44:28,700 --> 00:44:33,180
hierarchical role and you have a secret

00:44:31,530 --> 00:44:35,220
that's named spaced a certain way so you

00:44:33,180 --> 00:44:37,050
can say that only these tasks and access

00:44:35,220 --> 00:44:40,140
these secrets or only these users can

00:44:37,050 --> 00:44:42,360
access these secrets you can tie that in

00:44:40,140 --> 00:44:45,960
to permission management when you're

00:44:42,360 --> 00:44:48,540
setting up ACLs the namespace is going

00:44:45,960 --> 00:44:51,150
to be a big part of what permission

00:44:48,540 --> 00:44:54,150
you're you're managing so not only this

00:44:51,150 --> 00:44:55,770
user or this framework can launch tasks

00:44:54,150 --> 00:44:58,230
but this framework can launch tasks only

00:44:55,770 --> 00:45:00,420
within this particular namespace you can

00:44:58,230 --> 00:45:02,720
do chargeback accounting to know you

00:45:00,420 --> 00:45:06,120
know which resources were used by which

00:45:02,720 --> 00:45:08,250
projects departments teams and even

00:45:06,120 --> 00:45:09,240
tie-in naming and discoverability you

00:45:08,250 --> 00:45:10,710
know if you have two different teams

00:45:09,240 --> 00:45:14,100
that both want to run something called

00:45:10,710 --> 00:45:20,250
spark how do you make sure that they are

00:45:14,100 --> 00:45:23,370
uniquely named spaced namespaces and so

00:45:20,250 --> 00:45:26,280
that's that's it for what we've got to

00:45:23,370 --> 00:45:29,100
talk about today we are gonna open it up

00:45:26,280 --> 00:45:31,230
to Q&A there were a couple of security

00:45:29,100 --> 00:45:32,820
talks already today and a couple more

00:45:31,230 --> 00:45:34,980
relevant ones coming on later in this

00:45:32,820 --> 00:45:37,520
afternoon as well as the town halls

00:45:34,980 --> 00:45:39,990
which I encourage you all to visit and

00:45:37,520 --> 00:45:42,960
but yeah we'll open it up for any

00:45:39,990 --> 00:45:45,600
questions you may have I know that this

00:45:42,960 --> 00:45:49,310
is a complex topic and I'm sure you have

00:45:45,600 --> 00:45:49,310
some some deep questions

00:45:58,280 --> 00:46:05,520
yeah I'm a bit skeptical about the way

00:46:01,670 --> 00:46:07,980
the secret are handled because in the

00:46:05,520 --> 00:46:10,200
secret resolver there's no context

00:46:07,980 --> 00:46:13,109
information regarding a secret as it's

00:46:10,200 --> 00:46:15,349
just a secret itself and in your

00:46:13,109 --> 00:46:20,460
previous slide you talked about

00:46:15,349 --> 00:46:23,790
namespacing secrets my question is if I

00:46:20,460 --> 00:46:27,900
understand correctly the secret resolver

00:46:23,790 --> 00:46:30,480
is running as a normal process here he

00:46:27,900 --> 00:46:33,450
has no contact information so how can

00:46:30,480 --> 00:46:37,250
the namespace be performed it's not

00:46:33,450 --> 00:46:37,250
possible in my opinion I don't know

00:46:58,000 --> 00:47:08,109
well the thing is as it is right now the

00:47:04,090 --> 00:47:10,930
secret resolver is just an interface and

00:47:08,109 --> 00:47:14,680
it just takes a name so pretty much all

00:47:10,930 --> 00:47:16,210
this all these name spacing and the

00:47:14,680 --> 00:47:18,760
stuff is left for the person who

00:47:16,210 --> 00:47:23,020
implement the interface which we don't

00:47:18,760 --> 00:47:25,630
do we we lived we just designed the

00:47:23,020 --> 00:47:28,180
interface and it's up to 2 meses users

00:47:25,630 --> 00:47:47,950
to implement the interface and they

00:47:28,180 --> 00:47:50,859
configure it as you guys see fit my my

00:47:47,950 --> 00:47:53,710
issue is if I understand correctly is

00:47:50,859 --> 00:47:55,570
your secret resolve a stateless so he

00:47:53,710 --> 00:47:59,380
has no context information so you cannot

00:47:55,570 --> 00:48:01,599
say or it cannot it means that any tasks

00:47:59,380 --> 00:48:09,250
run using the secret reservoir can

00:48:01,599 --> 00:48:13,599
access the secret from anybody right my

00:48:09,250 --> 00:48:15,820
point is if we want really to to split

00:48:13,599 --> 00:48:21,130
secrets at least the secret reservoir

00:48:15,820 --> 00:48:25,510
has to have at least the user the task

00:48:21,130 --> 00:48:28,630
is running your own and so on I believe

00:48:25,510 --> 00:48:31,300
the secret resolver also has access to

00:48:28,630 --> 00:48:33,760
the task metadata so you you know the

00:48:31,300 --> 00:48:36,640
task ID and any labels associated with

00:48:33,760 --> 00:48:40,270
it so you can tag that on to the task

00:48:36,640 --> 00:48:42,700
and then you also have minimal metadata

00:48:40,270 --> 00:48:45,070
about the secret itself the name could

00:48:42,700 --> 00:48:47,349
be a hierarchical path so you can have

00:48:45,070 --> 00:48:50,080
names facing on the secret itself as

00:48:47,349 --> 00:48:52,270
well as metadata about the tasks

00:48:50,080 --> 00:48:55,000
namespace and you can match that only

00:48:52,270 --> 00:48:57,849
tasks in namespace foo slash bark and

00:48:55,000 --> 00:49:00,220
access secrets in namespace boo slash

00:48:57,849 --> 00:49:02,890
bar so you can tie them together that

00:49:00,220 --> 00:49:05,520
way but there's certainly room for

00:49:02,890 --> 00:49:05,520
improvement

00:49:07,830 --> 00:49:11,620
all right thank you we'll be outside at

00:49:10,570 --> 00:49:14,650
the booth if you have further questions

00:49:11,620 --> 00:49:17,979
at the Mesa sphere booth

00:49:14,650 --> 00:49:17,979

YouTube URL: https://www.youtube.com/watch?v=fdT1bCqy-68


